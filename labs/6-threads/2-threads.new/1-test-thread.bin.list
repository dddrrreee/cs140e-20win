
1-test-thread.bin.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e3a0d302 	mov	sp, #134217728	; 0x8000000
    8004:	e3a0b000 	mov	fp, #0
    8008:	eb0004b5 	bl	92e4 <_cstart>
    800c:	eb0004e3 	bl	93a0 <rpi_reboot>

00008010 <thread_code>:
#include "rpi-thread.h"

static unsigned thread_count, thread_sum;

// trivial first thread: does not block, explicitly calls exit.
static void thread_code(void *arg) {
    8010:	e92d4030 	push	{r4, r5, lr}
    8014:	e24dd00c 	sub	sp, sp, #12
    8018:	e1a05000 	mov	r5, r0
    unsigned *x = arg;

    // check tid
    unsigned tid = rpi_cur_thread()->tid;
    801c:	eb0000ef 	bl	83e0 <rpi_cur_thread>
    8020:	e5904044 	ldr	r4, [r0, #68]	; 0x44
	printk("in thread %p, with %x\n", tid, *x);
    8024:	e59f0088 	ldr	r0, [pc, #136]	; 80b4 <thread_code+0xa4>
    8028:	e1a01004 	mov	r1, r4
    802c:	e5952000 	ldr	r2, [r5]
    8030:	eb000329 	bl	8cdc <printk>
    demand(rpi_cur_thread()->tid == *x+1, 
    8034:	eb0000e9 	bl	83e0 <rpi_cur_thread>
    8038:	e5902044 	ldr	r2, [r0, #68]	; 0x44
    803c:	e5953000 	ldr	r3, [r5]
    8040:	e2833001 	add	r3, r3, #1
    8044:	e1520003 	cmp	r2, r3
    8048:	0a00000a 	beq	8078 <thread_code+0x68>
    804c:	eb00033d 	bl	8d48 <rpi_reset_putc>
    8050:	e5953000 	ldr	r3, [r5]
    8054:	e58d4000 	str	r4, [sp]
    8058:	e2833001 	add	r3, r3, #1
    805c:	e58d3004 	str	r3, [sp, #4]
    8060:	e59f0050 	ldr	r0, [pc, #80]	; 80b8 <thread_code+0xa8>
    8064:	e59f1050 	ldr	r1, [pc, #80]	; 80bc <thread_code+0xac>
    8068:	e59f2050 	ldr	r2, [pc, #80]	; 80c0 <thread_code+0xb0>
    806c:	e3a0301a 	mov	r3, #26
    8070:	eb000319 	bl	8cdc <printk>
    8074:	eb000488 	bl	929c <clean_reboot>
                "expected %d, have %d\n", tid,*x+1);

    // check yield.
    rpi_yield();
    8078:	eb000105 	bl	8494 <rpi_yield>
	thread_count ++;
    807c:	e59f4040 	ldr	r4, [pc, #64]	; 80c4 <thread_code+0xb4>
    8080:	e5943000 	ldr	r3, [r4]
    8084:	e2833001 	add	r3, r3, #1
    8088:	e5843000 	str	r3, [r4]
    rpi_yield();
    808c:	eb000100 	bl	8494 <rpi_yield>
	thread_sum += *x;
    8090:	e5952000 	ldr	r2, [r5]
    8094:	e5943004 	ldr	r3, [r4, #4]
    8098:	e0823003 	add	r3, r2, r3
    809c:	e5843004 	str	r3, [r4, #4]
    rpi_yield();
    80a0:	eb0000fb 	bl	8494 <rpi_yield>
    // check exit
    rpi_exit(0);
    80a4:	e3a00000 	mov	r0, #0
    80a8:	eb0000e3 	bl	843c <rpi_exit>
}
    80ac:	e28dd00c 	add	sp, sp, #12
    80b0:	e8bd8030 	pop	{r4, r5, pc}
    80b4:	0000a49c 	muleq	r0, ip, r4
    80b8:	0000a4b4 			; <UNDEFINED> instruction: 0x0000a4b4
    80bc:	0000a508 	andeq	sl, r0, r8, lsl #10
    80c0:	0000a488 	andeq	sl, r0, r8, lsl #9
    80c4:	0000ad30 	andeq	sl, r0, r0, lsr sp

000080c8 <notmain>:

void notmain() {
    80c8:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    uart_init();
    80cc:	eb0006e9 	bl	9c78 <uart_init>
    kmalloc_init();
    80d0:	eb00052a 	bl	9580 <kmalloc_init>

    printk("about to test summing of 30 threads\n");
    80d4:	e59f00c0 	ldr	r0, [pc, #192]	; 819c <notmain+0xd4>
    80d8:	eb0002ff 	bl	8cdc <printk>

    // change this to increase the number of threads.
	int n = 30;
	thread_sum = thread_count = 0;
    80dc:	e59f30bc 	ldr	r3, [pc, #188]	; 81a0 <notmain+0xd8>
    80e0:	e3a05000 	mov	r5, #0
    80e4:	e5835000 	str	r5, [r3]
    80e8:	e5835004 	str	r5, [r3, #4]

    unsigned sum = 0;
	for(int i = 0; i < n; i++)  {
    80ec:	e1a04005 	mov	r4, r5
        int *x = kmalloc(sizeof *x);
    80f0:	e3a07004 	mov	r7, #4
        sum += *x = i;
		rpi_fork(thread_code, x);
    80f4:	e59f60a8 	ldr	r6, [pc, #168]	; 81a4 <notmain+0xdc>
    // change this to increase the number of threads.
	int n = 30;
	thread_sum = thread_count = 0;

    unsigned sum = 0;
	for(int i = 0; i < n; i++)  {
    80f8:	ea000007 	b	811c <notmain+0x54>
        int *x = kmalloc(sizeof *x);
    80fc:	e1a00007 	mov	r0, r7
    8100:	eb0004da 	bl	9470 <kmalloc>
    8104:	e1a01000 	mov	r1, r0
        sum += *x = i;
    8108:	e5804000 	str	r4, [r0]
    810c:	e0855004 	add	r5, r5, r4
		rpi_fork(thread_code, x);
    8110:	e1a00006 	mov	r0, r6
    8114:	eb0000b5 	bl	83f0 <rpi_fork>
    // change this to increase the number of threads.
	int n = 30;
	thread_sum = thread_count = 0;

    unsigned sum = 0;
	for(int i = 0; i < n; i++)  {
    8118:	e2844001 	add	r4, r4, #1
    811c:	e354001d 	cmp	r4, #29
    8120:	dafffff5 	ble	80fc <notmain+0x34>
        int *x = kmalloc(sizeof *x);
        sum += *x = i;
		rpi_fork(thread_code, x);
    }
	rpi_thread_start();
    8124:	eb000115 	bl	8580 <rpi_thread_start>

	// no more threads: check.
	printk("count = %d, sum=%d\n", thread_count, thread_sum);
    8128:	e59f4070 	ldr	r4, [pc, #112]	; 81a0 <notmain+0xd8>
    812c:	e59f0074 	ldr	r0, [pc, #116]	; 81a8 <notmain+0xe0>
    8130:	e5941000 	ldr	r1, [r4]
    8134:	e5942004 	ldr	r2, [r4, #4]
    8138:	eb0002e7 	bl	8cdc <printk>
	assert(thread_count == n);
    813c:	e5943000 	ldr	r3, [r4]
    8140:	e353001e 	cmp	r3, #30
    8144:	0a000006 	beq	8164 <notmain+0x9c>
    8148:	eb0002fe 	bl	8d48 <rpi_reset_putc>
    814c:	e59f0058 	ldr	r0, [pc, #88]	; 81ac <notmain+0xe4>
    8150:	e59f1058 	ldr	r1, [pc, #88]	; 81b0 <notmain+0xe8>
    8154:	e59f2058 	ldr	r2, [pc, #88]	; 81b4 <notmain+0xec>
    8158:	e3a0303a 	mov	r3, #58	; 0x3a
    815c:	eb0002de 	bl	8cdc <printk>
    8160:	eb00044d 	bl	929c <clean_reboot>
	assert(thread_sum == sum);
    8164:	e59f3034 	ldr	r3, [pc, #52]	; 81a0 <notmain+0xd8>
    8168:	e5933004 	ldr	r3, [r3, #4]
    816c:	e1530005 	cmp	r3, r5
    8170:	0a000006 	beq	8190 <notmain+0xc8>
    8174:	eb0002f3 	bl	8d48 <rpi_reset_putc>
    8178:	e59f0038 	ldr	r0, [pc, #56]	; 81b8 <notmain+0xf0>
    817c:	e59f102c 	ldr	r1, [pc, #44]	; 81b0 <notmain+0xe8>
    8180:	e59f202c 	ldr	r2, [pc, #44]	; 81b4 <notmain+0xec>
    8184:	e3a0303b 	mov	r3, #59	; 0x3b
    8188:	eb0002d3 	bl	8cdc <printk>
    818c:	eb000442 	bl	929c <clean_reboot>
    printk("SUCCESS!\n");
    8190:	e59f0024 	ldr	r0, [pc, #36]	; 81bc <notmain+0xf4>
    8194:	eb0002d0 	bl	8cdc <printk>
	clean_reboot();
    8198:	eb00043f 	bl	929c <clean_reboot>
    819c:	0000a518 	andeq	sl, r0, r8, lsl r5
    81a0:	0000ad30 	andeq	sl, r0, r0, lsr sp
    81a4:	00008010 	andeq	r8, r0, r0, lsl r0
    81a8:	0000a540 	andeq	sl, r0, r0, asr #10
    81ac:	0000a554 	andeq	sl, r0, r4, asr r5
    81b0:	0000a508 	andeq	sl, r0, r8, lsl #10
    81b4:	0000a494 	muleq	r0, r4, r4
    81b8:	0000a578 	andeq	sl, r0, r8, ror r5
    81bc:	0000a59c 	muleq	r0, ip, r5

000081c0 <Q_nelem>:
} Q_t;

// used for iteration.
static E *Q_start(Q_t *q)   { return q->head; }
static E *Q_next(E *e)      { return e->next; }
static unsigned Q_nelem(Q_t *q) { return q->cnt; }
    81c0:	e5900008 	ldr	r0, [r0, #8]
    81c4:	e12fff1e 	bx	lr

000081c8 <Q_append>:
    return e;
}

// insert at tail. (for FIFO)
static void Q_append(Q_t *q, E *e) {
    e->next = 0;
    81c8:	e3a03000 	mov	r3, #0
    81cc:	e5813040 	str	r3, [r1, #64]	; 0x40
    q->cnt++;
    81d0:	e5903008 	ldr	r3, [r0, #8]
    81d4:	e2833001 	add	r3, r3, #1
    81d8:	e5803008 	str	r3, [r0, #8]
    if(!q->tail) 
    81dc:	e5903004 	ldr	r3, [r0, #4]
    81e0:	e3530000 	cmp	r3, #0
    81e4:	1a000002 	bne	81f4 <Q_append+0x2c>
        q->head = q->tail = e;
    81e8:	e5801004 	str	r1, [r0, #4]
    81ec:	e5801000 	str	r1, [r0]
    81f0:	e12fff1e 	bx	lr
    else {
        q->tail->next = e;
    81f4:	e5831040 	str	r1, [r3, #64]	; 0x40
        q->tail = e;
    81f8:	e5801004 	str	r1, [r0, #4]
    81fc:	e12fff1e 	bx	lr

00008200 <Q_push>:
    }
}

// insert at head (for LIFO)
static void Q_push(Q_t *q, E *e) {
    q->cnt++;
    8200:	e5903008 	ldr	r3, [r0, #8]
    8204:	e2833001 	add	r3, r3, #1
    8208:	e5803008 	str	r3, [r0, #8]
    e->next = q->head;
    820c:	e5903000 	ldr	r3, [r0]
    8210:	e5813040 	str	r3, [r1, #64]	; 0x40
    q->head = e;
    8214:	e5801000 	str	r1, [r0]
    if(!q->tail)
    8218:	e5903004 	ldr	r3, [r0, #4]
    821c:	e3530000 	cmp	r3, #0
        q->tail = e;
    8220:	05801004 	streq	r1, [r0, #4]
    8224:	e12fff1e 	bx	lr

00008228 <th_free>:
    demand(is_aligned(&t->stack[0],8), stack must be 8-byte aligned!);
    t->tid = tid++;
    return t;
}

static void th_free(rpi_thread_t *th) {
    8228:	e92d4008 	push	{r3, lr}
    822c:	e1a01000 	mov	r1, r0
    // push on the front in case helps with caching.
    Q_push(&freeq, th);
    8230:	e59f0004 	ldr	r0, [pc, #4]	; 823c <th_free+0x14>
    8234:	ebfffff1 	bl	8200 <Q_push>
    8238:	e8bd8008 	pop	{r3, pc}
    823c:	0000ad38 	andeq	sl, r0, r8, lsr sp

00008240 <Q_empty>:
// used for iteration.
static E *Q_start(Q_t *q)   { return q->head; }
static E *Q_next(E *e)      { return e->next; }
static unsigned Q_nelem(Q_t *q) { return q->cnt; }

static int Q_empty(Q_t *q)  { 
    8240:	e92d4010 	push	{r4, lr}
    8244:	e1a04000 	mov	r4, r0
    if(q->head)
    8248:	e5903000 	ldr	r3, [r0]
    824c:	e3530000 	cmp	r3, #0
    8250:	1a000013 	bne	82a4 <Q_empty+0x64>
        return 0;
    assert(Q_nelem(q) == 0);
    8254:	ebffffd9 	bl	81c0 <Q_nelem>
    8258:	e3500000 	cmp	r0, #0
    825c:	0a000006 	beq	827c <Q_empty+0x3c>
    8260:	eb0002b8 	bl	8d48 <rpi_reset_putc>
    8264:	e59f0048 	ldr	r0, [pc, #72]	; 82b4 <Q_empty+0x74>
    8268:	e59f1048 	ldr	r1, [pc, #72]	; 82b8 <Q_empty+0x78>
    826c:	e59f2048 	ldr	r2, [pc, #72]	; 82bc <Q_empty+0x7c>
    8270:	e3a03015 	mov	r3, #21
    8274:	eb000298 	bl	8cdc <printk>
    8278:	eb000407 	bl	929c <clean_reboot>
    demand(!q->tail, invalid Q);
    827c:	e5943004 	ldr	r3, [r4, #4]
    8280:	e3530000 	cmp	r3, #0
    8284:	0a000008 	beq	82ac <Q_empty+0x6c>
    8288:	eb0002ae 	bl	8d48 <rpi_reset_putc>
    828c:	e59f002c 	ldr	r0, [pc, #44]	; 82c0 <Q_empty+0x80>
    8290:	e59f1020 	ldr	r1, [pc, #32]	; 82b8 <Q_empty+0x78>
    8294:	e59f2020 	ldr	r2, [pc, #32]	; 82bc <Q_empty+0x7c>
    8298:	e3a03016 	mov	r3, #22
    829c:	eb00028e 	bl	8cdc <printk>
    82a0:	eb0003fd 	bl	929c <clean_reboot>
static E *Q_next(E *e)      { return e->next; }
static unsigned Q_nelem(Q_t *q) { return q->cnt; }

static int Q_empty(Q_t *q)  { 
    if(q->head)
        return 0;
    82a4:	e3a00000 	mov	r0, #0
    82a8:	e8bd8010 	pop	{r4, pc}
    assert(Q_nelem(q) == 0);
    demand(!q->tail, invalid Q);
    return 1;
    82ac:	e3a00001 	mov	r0, #1
}
    82b0:	e8bd8010 	pop	{r4, pc}
    82b4:	0000a604 	andeq	sl, r0, r4, lsl #12
    82b8:	0000a624 	andeq	sl, r0, r4, lsr #12
    82bc:	0000a5a8 	andeq	sl, r0, r8, lsr #11
    82c0:	0000a628 	andeq	sl, r0, r8, lsr #12

000082c4 <Q_pop>:

// remove from front of list.
static E *Q_pop(Q_t *q) {
    82c4:	e92d4008 	push	{r3, lr}
    demand(q, bad input);
    82c8:	e3500000 	cmp	r0, #0
    82cc:	1a000006 	bne	82ec <Q_pop+0x28>
    82d0:	eb00029c 	bl	8d48 <rpi_reset_putc>
    82d4:	e59f0070 	ldr	r0, [pc, #112]	; 834c <Q_pop+0x88>
    82d8:	e59f1070 	ldr	r1, [pc, #112]	; 8350 <Q_pop+0x8c>
    82dc:	e59f2070 	ldr	r2, [pc, #112]	; 8354 <Q_pop+0x90>
    82e0:	e3a0301c 	mov	r3, #28
    82e4:	eb00027c 	bl	8cdc <printk>
    82e8:	eb0003eb 	bl	929c <clean_reboot>

    E *e = q->head;
    82ec:	e5903000 	ldr	r3, [r0]
    if(!e) {
    82f0:	e3530000 	cmp	r3, #0
    82f4:	1a000009 	bne	8320 <Q_pop+0x5c>
        assert(Q_empty(q));
    82f8:	ebffffd0 	bl	8240 <Q_empty>
    82fc:	e3500000 	cmp	r0, #0
    8300:	1a00000f 	bne	8344 <Q_pop+0x80>
    8304:	eb00028f 	bl	8d48 <rpi_reset_putc>
    8308:	e59f0048 	ldr	r0, [pc, #72]	; 8358 <Q_pop+0x94>
    830c:	e59f103c 	ldr	r1, [pc, #60]	; 8350 <Q_pop+0x8c>
    8310:	e59f203c 	ldr	r2, [pc, #60]	; 8354 <Q_pop+0x90>
    8314:	e3a03020 	mov	r3, #32
    8318:	eb00026f 	bl	8cdc <printk>
    831c:	eb0003de 	bl	929c <clean_reboot>
        return 0;
    }
    q->cnt--;
    8320:	e5902008 	ldr	r2, [r0, #8]
    8324:	e2422001 	sub	r2, r2, #1
    8328:	e5802008 	str	r2, [r0, #8]
    q->head = e->next;
    832c:	e5932040 	ldr	r2, [r3, #64]	; 0x40
    8330:	e5802000 	str	r2, [r0]
    if(!q->head)
    8334:	e3520000 	cmp	r2, #0
        q->tail = 0;
    8338:	05802004 	streq	r2, [r0, #4]
    return e;
    833c:	e1a00003 	mov	r0, r3
    8340:	e8bd8008 	pop	{r3, pc}
    demand(q, bad input);

    E *e = q->head;
    if(!e) {
        assert(Q_empty(q));
        return 0;
    8344:	e3a00000 	mov	r0, #0
    q->cnt--;
    q->head = e->next;
    if(!q->head)
        q->tail = 0;
    return e;
}
    8348:	e8bd8008 	pop	{r3, pc}
    834c:	0000a658 	andeq	sl, r0, r8, asr r6
    8350:	0000a624 	andeq	sl, r0, r4, lsr #12
    8354:	0000a5b0 			; <UNDEFINED> instruction: 0x0000a5b0
    8358:	0000a680 	andeq	sl, r0, r0, lsl #13

0000835c <th_alloc>:
}

#define is_aligned(_p,_n) (((unsigned)(_p))%(_n) == 0)

// keep a cache of freed thread blocks.  call kmalloc if run out.
static rpi_thread_t *th_alloc(void) {
    835c:	e92d4008 	push	{r3, lr}
    rpi_thread_t *t = Q_pop(&freeq);
    8360:	e59f0060 	ldr	r0, [pc, #96]	; 83c8 <th_alloc+0x6c>
    8364:	ebffffd6 	bl	82c4 <Q_pop>

    // stack has to be 8-byte aligned.
    if(!t) {
    8368:	e3500000 	cmp	r0, #0
    836c:	1a000006 	bne	838c <th_alloc+0x30>
        t = kmalloc_aligned(sizeof *t, 8);
    8370:	e59f0054 	ldr	r0, [pc, #84]	; 83cc <th_alloc+0x70>
    8374:	e3a01008 	mov	r1, #8
    8378:	eb000459 	bl	94e4 <kmalloc_aligned>
        nalloced++;
    837c:	e59f3044 	ldr	r3, [pc, #68]	; 83c8 <th_alloc+0x6c>
    8380:	e593200c 	ldr	r2, [r3, #12]
    8384:	e2822001 	add	r2, r2, #1
    8388:	e583200c 	str	r2, [r3, #12]
    }
    demand(is_aligned(&t->stack[0],8), stack must be 8-byte aligned!);
    838c:	e3100007 	tst	r0, #7
    8390:	0a000006 	beq	83b0 <th_alloc+0x54>
    8394:	eb00026b 	bl	8d48 <rpi_reset_putc>
    8398:	e59f0030 	ldr	r0, [pc, #48]	; 83d0 <th_alloc+0x74>
    839c:	e59f1030 	ldr	r1, [pc, #48]	; 83d4 <th_alloc+0x78>
    83a0:	e59f2030 	ldr	r2, [pc, #48]	; 83d8 <th_alloc+0x7c>
    83a4:	e3a03024 	mov	r3, #36	; 0x24
    83a8:	eb00024b 	bl	8cdc <printk>
    83ac:	eb0003ba 	bl	929c <clean_reboot>
    t->tid = tid++;
    83b0:	e59f2024 	ldr	r2, [pc, #36]	; 83dc <th_alloc+0x80>
    83b4:	e5923000 	ldr	r3, [r2]
    83b8:	e2831001 	add	r1, r3, #1
    83bc:	e5821000 	str	r1, [r2]
    83c0:	e5803044 	str	r3, [r0, #68]	; 0x44
    return t;
}
    83c4:	e8bd8008 	pop	{r3, pc}
    83c8:	0000ad38 	andeq	sl, r0, r8, lsr sp
    83cc:	00002050 	andeq	r2, r0, r0, asr r0
    83d0:	0000a69c 	muleq	r0, ip, r6
    83d4:	0000a6fc 	strdeq	sl, [r0], -ip
    83d8:	0000a5b8 			; <UNDEFINED> instruction: 0x0000a5b8
    83dc:	0000a3e8 	andeq	sl, r0, r8, ror #7

000083e0 <rpi_cur_thread>:
static unsigned nalloced = 0;

// return pointer to the current thread.  
rpi_thread_t *rpi_cur_thread(void) {
    return cur_thread;
}
    83e0:	e59f3004 	ldr	r3, [pc, #4]	; 83ec <rpi_cur_thread+0xc>
    83e4:	e5930010 	ldr	r0, [r3, #16]
    83e8:	e12fff1e 	bx	lr
    83ec:	0000ad38 	andeq	sl, r0, r8, lsr sp

000083f0 <rpi_fork>:
/***********************************************************************
 * implement the code below.
 */

// create a new thread.
rpi_thread_t *rpi_fork(void (*code)(void *arg), void *arg) {
    83f0:	e92d4070 	push	{r4, r5, r6, lr}
    83f4:	e1a06000 	mov	r6, r0
    83f8:	e1a05001 	mov	r5, r1
    rpi_thread_t *t = th_alloc();
    83fc:	ebffffd6 	bl	835c <th_alloc>
    8400:	e1a04000 	mov	r4, r0
    /*
     * do the brain-surgery on the new thread stack here.
     * must set up initial stack: 
     *  - set LR, SP, and store <code> and <arg> where trampoline can get it.
     */
    t->reg_save_area[0] = (unsigned) code;
    8404:	e5806000 	str	r6, [r0]
	t->reg_save_area[1] = (unsigned) arg;
    8408:	e5805004 	str	r5, [r0, #4]
	void rpi_init_trampoline(void);
	t->reg_save_area[REG_LR_OFF] = (unsigned) &rpi_init_trampoline;
    840c:	e59f3020 	ldr	r3, [pc, #32]	; 8434 <rpi_fork+0x44>
    8410:	e5803024 	str	r3, [r0, #36]	; 0x24
	t->reg_save_area[REG_SP_OFF] = (unsigned) &t->stack[THREAD_MAXSTACK - 2];
    8414:	e2803d81 	add	r3, r0, #8256	; 0x2040
    8418:	e2833008 	add	r3, r3, #8
    841c:	e5803028 	str	r3, [r0, #40]	; 0x28
    //unimplemented();
    Q_append(&runq, t);
    8420:	e59f0010 	ldr	r0, [pc, #16]	; 8438 <rpi_fork+0x48>
    8424:	e1a01004 	mov	r1, r4
    8428:	ebffff66 	bl	81c8 <Q_append>
    return t;
}
    842c:	e1a00004 	mov	r0, r4
    8430:	e8bd8070 	pop	{r4, r5, r6, pc}
    8434:	000086b8 			; <UNDEFINED> instruction: 0x000086b8
    8438:	0000ad4c 	andeq	sl, r0, ip, asr #26

0000843c <rpi_exit>:

// exit current thread.
void rpi_exit(int exitcode) {
    843c:	e92d4038 	push	{r3, r4, r5, lr}
 	 * switch to it.
	 
	 * 3. otherwise we are done, switch to the scheduler thread 
	 * so we call back into the client code.
	 */
	rpi_thread_t* old_thread = cur_thread;
    8440:	e59f5048 	ldr	r5, [pc, #72]	; 8490 <rpi_exit+0x54>
    8444:	e5954010 	ldr	r4, [r5, #16]
	th_free(cur_thread);
    8448:	e1a00004 	mov	r0, r4
    844c:	ebffff75 	bl	8228 <th_free>

	if(!Q_empty(&runq)) {
    8450:	e2850014 	add	r0, r5, #20
    8454:	ebffff79 	bl	8240 <Q_empty>
    8458:	e3500000 	cmp	r0, #0
    845c:	1a000003 	bne	8470 <rpi_exit+0x34>
		cur_thread = Q_pop(&runq);
    8460:	e2850014 	add	r0, r5, #20
    8464:	ebffff96 	bl	82c4 <Q_pop>
    8468:	e5850010 	str	r0, [r5, #16]
    846c:	ea000002 	b	847c <rpi_exit+0x40>
	} else {
		cur_thread = scheduler_thread;
    8470:	e59f3018 	ldr	r3, [pc, #24]	; 8490 <rpi_exit+0x54>
    8474:	e5932020 	ldr	r2, [r3, #32]
    8478:	e5832010 	str	r2, [r3, #16]
	}
	rpi_cswitch(old_thread->reg_save_area, cur_thread->reg_save_area);
    847c:	e1a00004 	mov	r0, r4
    8480:	e59f3008 	ldr	r3, [pc, #8]	; 8490 <rpi_exit+0x54>
    8484:	e5931010 	ldr	r1, [r3, #16]
    8488:	eb000073 	bl	865c <rpi_cswitch>
    848c:	e8bd8038 	pop	{r3, r4, r5, pc}
    8490:	0000ad38 	andeq	sl, r0, r8, lsr sp

00008494 <rpi_yield>:
	return;
}

// yield the current thread.
void rpi_yield(void) {
    8494:	e92d4070 	push	{r4, r5, r6, lr}
	//	- there are no more runnable threads, return.  
	// otherwise: 
	//	1. put current thread on runq.
	// 	2. context switch to the new thread.
	rpi_thread_t* next_thread;
	if(Q_empty(&runq)) {
    8498:	e59f003c 	ldr	r0, [pc, #60]	; 84dc <rpi_yield+0x48>
    849c:	ebffff67 	bl	8240 <Q_empty>
    84a0:	e3500000 	cmp	r0, #0
    84a4:	18bd8070 	popne	{r4, r5, r6, pc}
		return;
	} else {
		rpi_thread_t* old_thread = cur_thread;
    84a8:	e59f4030 	ldr	r4, [pc, #48]	; 84e0 <rpi_yield+0x4c>
    84ac:	e5945010 	ldr	r5, [r4, #16]
		Q_append(&runq, cur_thread);
    84b0:	e2846014 	add	r6, r4, #20
    84b4:	e1a00006 	mov	r0, r6
    84b8:	e1a01005 	mov	r1, r5
    84bc:	ebffff41 	bl	81c8 <Q_append>
		cur_thread = Q_pop(&runq);
    84c0:	e1a00006 	mov	r0, r6
    84c4:	ebffff7e 	bl	82c4 <Q_pop>
    84c8:	e1a01000 	mov	r1, r0
    84cc:	e5840010 	str	r0, [r4, #16]
		rpi_cswitch(old_thread->reg_save_area, cur_thread->reg_save_area);
    84d0:	e1a00005 	mov	r0, r5
    84d4:	eb000060 	bl	865c <rpi_cswitch>
    84d8:	e8bd8070 	pop	{r4, r5, r6, pc}
    84dc:	0000ad4c 	andeq	sl, r0, ip, asr #26
    84e0:	0000ad38 	andeq	sl, r0, r8, lsr sp

000084e4 <rpi_internal_check>:
    printk("rpithreads: done with all threads! returning\n");
}


// internal consistency checks.
void rpi_internal_check(void) {
    84e4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    84e8:	e24dd014 	sub	sp, sp, #20
    // the blocks on the runq + freeq must equal the total ever allocated
    // or we have leaked storage.
    unsigned n_free = Q_nelem(&freeq),
    84ec:	e59f4074 	ldr	r4, [pc, #116]	; 8568 <rpi_internal_check+0x84>
    84f0:	e1a00004 	mov	r0, r4
    84f4:	ebffff31 	bl	81c0 <Q_nelem>
    84f8:	e1a06000 	mov	r6, r0
             n_run = Q_nelem(&runq),
    84fc:	e2840014 	add	r0, r4, #20
    8500:	ebffff2e 	bl	81c0 <Q_nelem>
    8504:	e1a05000 	mov	r5, r0
             n = n_free + n_run;
    8508:	e0867000 	add	r7, r6, r0

    if(nalloced != n)
    850c:	e594300c 	ldr	r3, [r4, #12]
    8510:	e1530007 	cmp	r3, r7
    8514:	0a00000b 	beq	8548 <rpi_internal_check+0x64>
        panic("storage leak: should have %d free blocks, have %d (runq=%d, freeq=%d)\n", 
    8518:	eb00020a 	bl	8d48 <rpi_reset_putc>
    851c:	e594300c 	ldr	r3, [r4, #12]
    8520:	e58d3000 	str	r3, [sp]
    8524:	e58d7004 	str	r7, [sp, #4]
    8528:	e58d6008 	str	r6, [sp, #8]
    852c:	e58d500c 	str	r5, [sp, #12]
    8530:	e59f0034 	ldr	r0, [pc, #52]	; 856c <rpi_internal_check+0x88>
    8534:	e59f1034 	ldr	r1, [pc, #52]	; 8570 <rpi_internal_check+0x8c>
    8538:	e59f2034 	ldr	r2, [pc, #52]	; 8574 <rpi_internal_check+0x90>
    853c:	e3a03096 	mov	r3, #150	; 0x96
    8540:	eb0001e5 	bl	8cdc <printk>
    8544:	eb000354 	bl	929c <clean_reboot>
            nalloced, n, n_free,n_run);

    // active thread system: 
    //      walk through the run queue making sure the stack pointer
    //     and ra pointer makes sense.
    if(!Q_empty(&runq)) {
    8548:	e59f0028 	ldr	r0, [pc, #40]	; 8578 <rpi_internal_check+0x94>
    854c:	ebffff3b 	bl	8240 <Q_empty>
    8550:	e3500000 	cmp	r0, #0
    8554:	0a000001 	beq	8560 <rpi_internal_check+0x7c>
        //unimplemented();
        return;
    }
    printk("thread: internal check passed\n");
    8558:	e59f001c 	ldr	r0, [pc, #28]	; 857c <rpi_internal_check+0x98>
    855c:	eb0001de 	bl	8cdc <printk>
}
    8560:	e28dd014 	add	sp, sp, #20
    8564:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8568:	0000ad38 	andeq	sl, r0, r8, lsr sp
    856c:	0000a70c 	andeq	sl, r0, ip, lsl #14
    8570:	0000a6fc 	strdeq	sl, [r0], -ip
    8574:	0000a5c4 	andeq	sl, r0, r4, asr #11
    8578:	0000ad4c 	andeq	sl, r0, ip, asr #26
    857c:	0000a764 	andeq	sl, r0, r4, ror #14

00008580 <rpi_thread_start>:
/*
 * starts the thread system.  
 * note: our caller is not a thread!  so you have to figure
 * out how to handle this.
 */
void rpi_thread_start(void) {
    8580:	e92d4010 	push	{r4, lr}
    AssertNow(offsetof(rpi_thread_t, stack) % 8 == 0);
    // statically check that the register save area is at offset 0.
    AssertNow(offsetof(rpi_thread_t, reg_save_area) == 0);

    // no other runnable thread: return.
    if(Q_empty(&runq))
    8584:	e59f003c 	ldr	r0, [pc, #60]	; 85c8 <rpi_thread_start+0x48>
    8588:	ebffff2c 	bl	8240 <Q_empty>
    858c:	e3500000 	cmp	r0, #0
    8590:	18bd8010 	popne	{r4, pc}
        return;
    rpi_internal_check();
    8594:	ebffffd2 	bl	84e4 <rpi_internal_check>
    //unimplemented();
    //  1. create a new fake thread 
    //  2. dequeue a thread from the runq
    //  3. context switch to it, saving current state in
    //	    <scheduler_thread>
    scheduler_thread = th_alloc();
    8598:	ebffff6f 	bl	835c <th_alloc>
    859c:	e59f4028 	ldr	r4, [pc, #40]	; 85cc <rpi_thread_start+0x4c>
    85a0:	e5840020 	str	r0, [r4, #32]
	cur_thread = Q_pop(&runq);
    85a4:	e2840014 	add	r0, r4, #20
    85a8:	ebffff45 	bl	82c4 <Q_pop>
    85ac:	e1a01000 	mov	r1, r0
    85b0:	e5840010 	str	r0, [r4, #16]
	rpi_cswitch(scheduler_thread->reg_save_area, cur_thread->reg_save_area);
    85b4:	e5940020 	ldr	r0, [r4, #32]
    85b8:	eb000027 	bl	865c <rpi_cswitch>
	//unimplemented();
    printk("rpithreads: done with all threads! returning\n");
    85bc:	e59f000c 	ldr	r0, [pc, #12]	; 85d0 <rpi_thread_start+0x50>
    85c0:	eb0001c5 	bl	8cdc <printk>
    85c4:	e8bd8010 	pop	{r4, pc}
    85c8:	0000ad4c 	andeq	sl, r0, ip, asr #26
    85cc:	0000ad38 	andeq	sl, r0, r8, lsr sp
    85d0:	0000a784 	andeq	sl, r0, r4, lsl #15

000085d4 <rpi_stack_check>:
    }
    printk("thread: internal check passed\n");
}

// check the current thread stack.
void rpi_stack_check(void) {
    85d4:	e92d4008 	push	{r3, lr}
    unimplemented();
    85d8:	eb0001da 	bl	8d48 <rpi_reset_putc>
    85dc:	e59f0010 	ldr	r0, [pc, #16]	; 85f4 <rpi_stack_check+0x20>
    85e0:	e59f1010 	ldr	r1, [pc, #16]	; 85f8 <rpi_stack_check+0x24>
    85e4:	e59f2010 	ldr	r2, [pc, #16]	; 85fc <rpi_stack_check+0x28>
    85e8:	e3a030a4 	mov	r3, #164	; 0xa4
    85ec:	eb0001ba 	bl	8cdc <printk>
    85f0:	eb000329 	bl	929c <clean_reboot>
    85f4:	0000a7b4 			; <UNDEFINED> instruction: 0x0000a7b4
    85f8:	0000a6fc 	strdeq	sl, [r0], -ip
    85fc:	0000a5d8 	ldrdeq	sl, [r0], -r8

00008600 <rpi_join>:
/********************************************************************
 * save for homework.
 */

// block caller until thread <th> completes.
void rpi_join(rpi_thread_t *th) {
    8600:	e92d4008 	push	{r3, lr}
    unimplemented();
    8604:	eb0001cf 	bl	8d48 <rpi_reset_putc>
    8608:	e59f0010 	ldr	r0, [pc, #16]	; 8620 <rpi_join+0x20>
    860c:	e59f1010 	ldr	r1, [pc, #16]	; 8624 <rpi_join+0x24>
    8610:	e59f2010 	ldr	r2, [pc, #16]	; 8628 <rpi_join+0x28>
    8614:	e3a030ad 	mov	r3, #173	; 0xad
    8618:	eb0001af 	bl	8cdc <printk>
    861c:	eb00031e 	bl	929c <clean_reboot>
    8620:	0000a7b4 			; <UNDEFINED> instruction: 0x0000a7b4
    8624:	0000a6fc 	strdeq	sl, [r0], -ip
    8628:	0000a5e8 	andeq	sl, r0, r8, ror #11

0000862c <rpi_exact_sleep>:
}

// put the current thread on a blocked queue: resume in 
// exactly // <usec> micro-seconds.  not before, not after.
// should give low-error resumption times.
void rpi_exact_sleep(uint32_t usec) {
    862c:	e92d4008 	push	{r3, lr}
    unimplemented();
    8630:	eb0001c4 	bl	8d48 <rpi_reset_putc>
    8634:	e59f0010 	ldr	r0, [pc, #16]	; 864c <rpi_exact_sleep+0x20>
    8638:	e59f1010 	ldr	r1, [pc, #16]	; 8650 <rpi_exact_sleep+0x24>
    863c:	e59f2010 	ldr	r2, [pc, #16]	; 8654 <rpi_exact_sleep+0x28>
    8640:	e3a030b4 	mov	r3, #180	; 0xb4
    8644:	eb0001a4 	bl	8cdc <printk>
    8648:	eb000313 	bl	929c <clean_reboot>
    864c:	0000a7b4 			; <UNDEFINED> instruction: 0x0000a7b4
    8650:	0000a6fc 	strdeq	sl, [r0], -ip
    8654:	0000a5f4 	strdeq	sl, [r0], -r4

00008658 <rpi_get_sp>:
    8658:	e12fff1e 	bx	lr

0000865c <rpi_cswitch>:
    865c:	e5804000 	str	r4, [r0]
    8660:	e5805004 	str	r5, [r0, #4]
    8664:	e5806008 	str	r6, [r0, #8]
    8668:	e580700c 	str	r7, [r0, #12]
    866c:	e5808010 	str	r8, [r0, #16]
    8670:	e5809014 	str	r9, [r0, #20]
    8674:	e580a018 	str	sl, [r0, #24]
    8678:	e580b01c 	str	fp, [r0, #28]
    867c:	e580c020 	str	ip, [r0, #32]
    8680:	e580e024 	str	lr, [r0, #36]	; 0x24
    8684:	e580d028 	str	sp, [r0, #40]	; 0x28
    8688:	e5914000 	ldr	r4, [r1]
    868c:	e5915004 	ldr	r5, [r1, #4]
    8690:	e5916008 	ldr	r6, [r1, #8]
    8694:	e591700c 	ldr	r7, [r1, #12]
    8698:	e5918010 	ldr	r8, [r1, #16]
    869c:	e5919014 	ldr	r9, [r1, #20]
    86a0:	e591a018 	ldr	sl, [r1, #24]
    86a4:	e591b01c 	ldr	fp, [r1, #28]
    86a8:	e591c020 	ldr	ip, [r1, #32]
    86ac:	e591e024 	ldr	lr, [r1, #36]	; 0x24
    86b0:	e591d028 	ldr	sp, [r1, #40]	; 0x28
    86b4:	e12fff1e 	bx	lr

000086b8 <rpi_init_trampoline>:
    86b8:	e1a00005 	mov	r0, r5
    86bc:	e12fff34 	blx	r4
    86c0:	ebffff5d 	bl	843c <rpi_exit>

000086c4 <cq_print>:
#ifdef LINUX
#   include <string.h>
#endif
#include "circular.h"

void cq_print(cq_t *c) {
    86c4:	e92d4010 	push	{r4, lr}
    86c8:	e24dd010 	sub	sp, sp, #16
    debug("cq print: head=%d, tail=%d, nelem=%d, empty=%d\n", 
    86cc:	e59f205c 	ldr	r2, [pc, #92]	; 8730 <cq_print+0x6c>
    86d0:	e790e002 	ldr	lr, [r0, r2]
    86d4:	e59f3058 	ldr	r3, [pc, #88]	; 8734 <cq_print+0x70>
    86d8:	e790c003 	ldr	ip, [r0, r3]
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }

// if adding 1 to head = tail, then we have no space.
static inline int cq_full(cq_t *q) { return (q->head+1) % CQ_N == q->tail; }

static inline unsigned cq_nelem(cq_t *q) { return (q->head - q->tail) % CQ_N; }
    86dc:	e7904002 	ldr	r4, [r0, r2]
    86e0:	e7901003 	ldr	r1, [r0, r3]
    86e4:	e0611004 	rsb	r1, r1, r4
    86e8:	e1a01981 	lsl	r1, r1, #19
    86ec:	e1a019a1 	lsr	r1, r1, #19
void cq_print(cq_t *c);

/*************************************************************************************
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }
    86f0:	e7902002 	ldr	r2, [r0, r2]
    86f4:	e7903003 	ldr	r3, [r0, r3]
    86f8:	e1520003 	cmp	r2, r3
    86fc:	13a03000 	movne	r3, #0
    8700:	03a03001 	moveq	r3, #1
    8704:	e58de000 	str	lr, [sp]
    8708:	e58dc004 	str	ip, [sp, #4]
    870c:	e58d1008 	str	r1, [sp, #8]
    8710:	e58d300c 	str	r3, [sp, #12]
    8714:	e59f001c 	ldr	r0, [pc, #28]	; 8738 <cq_print+0x74>
    8718:	e59f101c 	ldr	r1, [pc, #28]	; 873c <cq_print+0x78>
    871c:	e59f201c 	ldr	r2, [pc, #28]	; 8740 <cq_print+0x7c>
    8720:	e3a0300a 	mov	r3, #10
    8724:	eb00016c 	bl	8cdc <printk>
                c->head, c->tail, cq_nelem(c), cq_empty(c));
}
    8728:	e28dd010 	add	sp, sp, #16
    872c:	e8bd8010 	pop	{r4, pc}
    8730:	00002004 	andeq	r2, r0, r4
    8734:	00002008 	andeq	r2, r0, r8
    8738:	0000a814 	andeq	sl, r0, r4, lsl r8
    873c:	0000a850 	andeq	sl, r0, r0, asr r8
    8740:	0000a7e0 	andeq	sl, r0, r0, ror #15

00008744 <cq_ok>:

void cq_ok(cq_t *c) {
    8744:	e92d4008 	push	{r3, lr}
    if(c->fence != 0x12345678)
    8748:	e3a03a02 	mov	r3, #8192	; 0x2000
    874c:	e7902003 	ldr	r2, [r0, r3]
    8750:	e59f3020 	ldr	r3, [pc, #32]	; 8778 <cq_ok+0x34>
    8754:	e1520003 	cmp	r2, r3
    8758:	08bd8008 	popeq	{r3, pc}
        panic("fence is corrupted\n");
    875c:	eb000179 	bl	8d48 <rpi_reset_putc>
    8760:	e59f0014 	ldr	r0, [pc, #20]	; 877c <cq_ok+0x38>
    8764:	e59f1014 	ldr	r1, [pc, #20]	; 8780 <cq_ok+0x3c>
    8768:	e59f2014 	ldr	r2, [pc, #20]	; 8784 <cq_ok+0x40>
    876c:	e3a0300f 	mov	r3, #15
    8770:	eb000159 	bl	8cdc <printk>
    8774:	eb0002c8 	bl	929c <clean_reboot>
    8778:	12345678 	eorsne	r5, r4, #120, 12	; 0x7800000
    877c:	0000a85c 	andeq	sl, r0, ip, asr r8
    8780:	0000a850 	andeq	sl, r0, r0, asr r8
    8784:	0000a7ec 	andeq	sl, r0, ip, ror #15

00008788 <cq_init>:
}

void cq_init(cq_t *c, unsigned errors_fatal_p) {
    8788:	e92d4038 	push	{r3, r4, r5, lr}
    878c:	e1a04000 	mov	r4, r0
    8790:	e1a05001 	mov	r5, r1
    memset(c, 0, sizeof *c);
    8794:	e3a01000 	mov	r1, #0
    8798:	e59f216c 	ldr	r2, [pc, #364]	; 890c <cq_init+0x184>
    879c:	eb000146 	bl	8cbc <memset>
    c->fence = 0x12345678;
    87a0:	e59f2168 	ldr	r2, [pc, #360]	; 8910 <cq_init+0x188>
    87a4:	e3a03a02 	mov	r3, #8192	; 0x2000
    87a8:	e7842003 	str	r2, [r4, r3]
    c->head = c->tail = 0;
    87ac:	e59f2160 	ldr	r2, [pc, #352]	; 8914 <cq_init+0x18c>
    87b0:	e3a03000 	mov	r3, #0
    87b4:	e7843002 	str	r3, [r4, r2]
    87b8:	e59f0158 	ldr	r0, [pc, #344]	; 8918 <cq_init+0x190>
    87bc:	e7843000 	str	r3, [r4, r0]
    c->overflow = 0;
    87c0:	e59f1154 	ldr	r1, [pc, #340]	; 891c <cq_init+0x194>
    87c4:	e7843001 	str	r3, [r4, r1]
    c->errors_fatal_p = errors_fatal_p;
    87c8:	e59f3150 	ldr	r3, [pc, #336]	; 8920 <cq_init+0x198>
    87cc:	e7d41003 	ldrb	r1, [r4, r3]
    87d0:	e2055001 	and	r5, r5, #1
    87d4:	e3c11001 	bic	r1, r1, #1
    87d8:	e1855001 	orr	r5, r5, r1
    87dc:	e7c45003 	strb	r5, [r4, r3]
    87e0:	e7941000 	ldr	r1, [r4, r0]
    87e4:	e7943002 	ldr	r3, [r4, r2]
    assert(cq_empty(c));
    87e8:	e1510003 	cmp	r1, r3
    87ec:	0a000006 	beq	880c <cq_init+0x84>
    87f0:	eb000154 	bl	8d48 <rpi_reset_putc>
    87f4:	e59f0128 	ldr	r0, [pc, #296]	; 8924 <cq_init+0x19c>
    87f8:	e59f1128 	ldr	r1, [pc, #296]	; 8928 <cq_init+0x1a0>
    87fc:	e59f2128 	ldr	r2, [pc, #296]	; 892c <cq_init+0x1a4>
    8800:	e3a03018 	mov	r3, #24
    8804:	eb000134 	bl	8cdc <printk>
    8808:	eb0002a3 	bl	929c <clean_reboot>

// if adding 1 to head = tail, then we have no space.
static inline int cq_full(cq_t *q) { return (q->head+1) % CQ_N == q->tail; }
    880c:	e59f3104 	ldr	r3, [pc, #260]	; 8918 <cq_init+0x190>
    8810:	e7942003 	ldr	r2, [r4, r3]
    8814:	e2822001 	add	r2, r2, #1
    8818:	e1a02982 	lsl	r2, r2, #19
    881c:	e2833004 	add	r3, r3, #4
    8820:	e7943003 	ldr	r3, [r4, r3]
    assert(!cq_full(c));
    8824:	e15309a2 	cmp	r3, r2, lsr #19
    8828:	1a000006 	bne	8848 <cq_init+0xc0>
    882c:	eb000145 	bl	8d48 <rpi_reset_putc>
    8830:	e59f00f8 	ldr	r0, [pc, #248]	; 8930 <cq_init+0x1a8>
    8834:	e59f10ec 	ldr	r1, [pc, #236]	; 8928 <cq_init+0x1a0>
    8838:	e59f20ec 	ldr	r2, [pc, #236]	; 892c <cq_init+0x1a4>
    883c:	e3a03019 	mov	r3, #25
    8840:	eb000125 	bl	8cdc <printk>
    8844:	eb000294 	bl	929c <clean_reboot>

static inline unsigned cq_nelem(cq_t *q) { return (q->head - q->tail) % CQ_N; }
    8848:	e59f30c8 	ldr	r3, [pc, #200]	; 8918 <cq_init+0x190>
    884c:	e7942003 	ldr	r2, [r4, r3]
    8850:	e2833004 	add	r3, r3, #4
    8854:	e7943003 	ldr	r3, [r4, r3]
    8858:	e0633002 	rsb	r3, r3, r2
    assert(cq_nelem(c) == 0);
    885c:	e1b03983 	lsls	r3, r3, #19
    8860:	0a000006 	beq	8880 <cq_init+0xf8>
    8864:	eb000137 	bl	8d48 <rpi_reset_putc>
    8868:	e59f00c4 	ldr	r0, [pc, #196]	; 8934 <cq_init+0x1ac>
    886c:	e59f10b4 	ldr	r1, [pc, #180]	; 8928 <cq_init+0x1a0>
    8870:	e59f20b4 	ldr	r2, [pc, #180]	; 892c <cq_init+0x1a4>
    8874:	e3a0301a 	mov	r3, #26
    8878:	eb000117 	bl	8cdc <printk>
    887c:	eb000286 	bl	929c <clean_reboot>
void cq_print(cq_t *c);

/*************************************************************************************
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }
    8880:	e59f3090 	ldr	r3, [pc, #144]	; 8918 <cq_init+0x190>
    8884:	e7942003 	ldr	r2, [r4, r3]
    8888:	e2833004 	add	r3, r3, #4
    888c:	e7943003 	ldr	r3, [r4, r3]
static inline unsigned cq_nelem(cq_t *q) { return (q->head - q->tail) % CQ_N; }
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }

// not blocking: wait: this never calls getc?
static inline int cq_pop_nonblock(cq_t *c, cqe_t *e) {
    if(cq_empty(c))
    8890:	e1520003 	cmp	r2, r3
    8894:	0a000009 	beq	88c0 <cq_init+0x138>
        return 0;
    unsigned tail = c->tail;
    8898:	e59f3074 	ldr	r3, [pc, #116]	; 8914 <cq_init+0x18c>
    889c:	e7942003 	ldr	r2, [r4, r3]
    *e = c->c_buf[tail];
    88a0:	e7d41002 	ldrb	r1, [r4, r2]
    88a4:	e6ef1071 	uxtb	r1, r1
    c->tail = (tail+1)%CQ_N;
    88a8:	e2822001 	add	r2, r2, #1
    88ac:	e1a02982 	lsl	r2, r2, #19
    88b0:	e1a029a2 	lsr	r2, r2, #19
    88b4:	e7842003 	str	r2, [r4, r3]
    return 1;
    88b8:	e3a03001 	mov	r3, #1
    88bc:	ea000001 	b	88c8 <cq_init+0x140>
    cqe_t e = 0x12;
    88c0:	e3a01012 	mov	r1, #18
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }

// not blocking: wait: this never calls getc?
static inline int cq_pop_nonblock(cq_t *c, cqe_t *e) {
    if(cq_empty(c))
        return 0;
    88c4:	e3a03000 	mov	r3, #0
    assert(cq_pop_nonblock(c,&e) == 0 && e == 0x12);
    88c8:	e3530000 	cmp	r3, #0
    88cc:	1a000002 	bne	88dc <cq_init+0x154>
    88d0:	e3510012 	cmp	r1, #18
    88d4:	0a000002 	beq	88e4 <cq_init+0x15c>
    88d8:	ea000002 	b	88e8 <cq_init+0x160>
    88dc:	e3a03000 	mov	r3, #0
    88e0:	ea000000 	b	88e8 <cq_init+0x160>
    88e4:	e3a03001 	mov	r3, #1
    88e8:	e3530000 	cmp	r3, #0
    88ec:	18bd8038 	popne	{r3, r4, r5, pc}
    88f0:	eb000114 	bl	8d48 <rpi_reset_putc>
    88f4:	e59f003c 	ldr	r0, [pc, #60]	; 8938 <cq_init+0x1b0>
    88f8:	e59f1028 	ldr	r1, [pc, #40]	; 8928 <cq_init+0x1a0>
    88fc:	e59f2028 	ldr	r2, [pc, #40]	; 892c <cq_init+0x1a4>
    8900:	e3a0301c 	mov	r3, #28
    8904:	eb0000f4 	bl	8cdc <printk>
    8908:	eb000263 	bl	929c <clean_reboot>
    890c:	00002014 	andeq	r2, r0, r4, lsl r0
    8910:	12345678 	eorsne	r5, r4, #120, 12	; 0x7800000
    8914:	00002008 	andeq	r2, r0, r8
    8918:	00002004 	andeq	r2, r0, r4
    891c:	0000200c 	andeq	r2, r0, ip
    8920:	00002010 	andeq	r2, r0, r0, lsl r0
    8924:	0000a880 	andeq	sl, r0, r0, lsl #17
    8928:	0000a850 	andeq	sl, r0, r0, asr r8
    892c:	0000a7f4 	strdeq	sl, [r0], -r4
    8930:	0000a89c 	muleq	r0, ip, r8
    8934:	0000a8b8 			; <UNDEFINED> instruction: 0x0000a8b8
    8938:	0000a8dc 	ldrdeq	sl, [r0], -ip

0000893c <cq_pop>:
    assert(sz == cq_nelem(c));
    return 1;
}

// called from user space.
cqe_t cq_pop(cq_t *c) {
    893c:	e92d0070 	push	{r4, r5, r6}
    8940:	e1a03000 	mov	r3, r0
void cq_print(cq_t *c);

/*************************************************************************************
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }
    8944:	e59f4054 	ldr	r4, [pc, #84]	; 89a0 <cq_pop+0x64>
    8948:	e59f2054 	ldr	r2, [pc, #84]	; 89a4 <cq_pop+0x68>
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }

// not blocking: wait: this never calls getc?
static inline int cq_pop_nonblock(cq_t *c, cqe_t *e) {
    if(cq_empty(c))
        return 0;
    894c:	e3a06000 	mov	r6, #0
    unsigned tail = c->tail;
    *e = c->c_buf[tail];
    c->tail = (tail+1)%CQ_N;
    return 1;
    8950:	e3a00001 	mov	r0, #1
void cq_print(cq_t *c);

/*************************************************************************************
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }
    8954:	e793c004 	ldr	ip, [r3, r4]
    8958:	e7931002 	ldr	r1, [r3, r2]
static inline unsigned cq_nelem(cq_t *q) { return (q->head - q->tail) % CQ_N; }
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }

// not blocking: wait: this never calls getc?
static inline int cq_pop_nonblock(cq_t *c, cqe_t *e) {
    if(cq_empty(c))
    895c:	e15c0001 	cmp	ip, r1
    8960:	0a000008 	beq	8988 <cq_pop+0x4c>
        return 0;
    unsigned tail = c->tail;
    8964:	e7931002 	ldr	r1, [r3, r2]
    *e = c->c_buf[tail];
    8968:	e7d35001 	ldrb	r5, [r3, r1]
    896c:	e6ef5075 	uxtb	r5, r5
    c->tail = (tail+1)%CQ_N;
    8970:	e2811001 	add	r1, r1, #1
    8974:	e1a01981 	lsl	r1, r1, #19
    8978:	e1a019a1 	lsr	r1, r1, #19
    897c:	e7831002 	str	r1, [r3, r2]
    return 1;
    8980:	e1a01000 	mov	r1, r0
    8984:	ea000000 	b	898c <cq_pop+0x50>
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }

// not blocking: wait: this never calls getc?
static inline int cq_pop_nonblock(cq_t *c, cqe_t *e) {
    if(cq_empty(c))
        return 0;
    8988:	e1a01006 	mov	r1, r6
    cqe_t e;

	// wait til interrupt puts something here: if interrupts not enabled,
    // this will deadlock.
    while(!cq_pop_nonblock(c,&e))
    898c:	e3510000 	cmp	r1, #0
    8990:	0affffef 	beq	8954 <cq_pop+0x18>
        ;
        // panic("will deadlock: interrupts not enabled [FIXME]\n");
    return e;
}
    8994:	e1a00005 	mov	r0, r5
    8998:	e8bd0070 	pop	{r4, r5, r6}
    899c:	e12fff1e 	bx	lr
    89a0:	00002004 	andeq	r2, r0, r4
    89a4:	00002008 	andeq	r2, r0, r8

000089a8 <cq_pop_n>:

void cq_pop_n(cq_t *c, void *data, unsigned n) {
    89a8:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    89ac:	e1a07000 	mov	r7, r0
    89b0:	e1a06001 	mov	r6, r1
    89b4:	e1a05002 	mov	r5, r2
    cqe_t *p = data;

    for(int i = 0; i < n; i++)
    89b8:	e3a04000 	mov	r4, #0
    89bc:	ea000003 	b	89d0 <cq_pop_n+0x28>
        p[i] = cq_pop(c);
    89c0:	e1a00007 	mov	r0, r7
    89c4:	ebffffdc 	bl	893c <cq_pop>
    89c8:	e7c60004 	strb	r0, [r6, r4]
}

void cq_pop_n(cq_t *c, void *data, unsigned n) {
    cqe_t *p = data;

    for(int i = 0; i < n; i++)
    89cc:	e2844001 	add	r4, r4, #1
    89d0:	e1540005 	cmp	r4, r5
    89d4:	3afffff9 	bcc	89c0 <cq_pop_n+0x18>
        p[i] = cq_pop(c);
}
    89d8:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

000089dc <cq_pop_n_noblk>:
    assert(cq_nelem(c) == 0);
    cqe_t e = 0x12;
    assert(cq_pop_nonblock(c,&e) == 0 && e == 0x12);
}

int cq_pop_n_noblk(cq_t *q, void *data, unsigned n) {
    89dc:	e92d4070 	push	{r4, r5, r6, lr}
    89e0:	e1a04000 	mov	r4, r0
    89e4:	e1a06001 	mov	r6, r1
    89e8:	e1a05002 	mov	r5, r2
    cq_ok(q);
    89ec:	ebffff54 	bl	8744 <cq_ok>
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }

// if adding 1 to head = tail, then we have no space.
static inline int cq_full(cq_t *q) { return (q->head+1) % CQ_N == q->tail; }

static inline unsigned cq_nelem(cq_t *q) { return (q->head - q->tail) % CQ_N; }
    89f0:	e59f3038 	ldr	r3, [pc, #56]	; 8a30 <cq_pop_n_noblk+0x54>
    89f4:	e7942003 	ldr	r2, [r4, r3]
    89f8:	e2833004 	add	r3, r3, #4
    89fc:	e7943003 	ldr	r3, [r4, r3]
    8a00:	e0633002 	rsb	r3, r3, r2
    8a04:	e1a03983 	lsl	r3, r3, #19
    if(cq_nelem(q) < n)
    8a08:	e15509a3 	cmp	r5, r3, lsr #19
    8a0c:	8a000005 	bhi	8a28 <cq_pop_n_noblk+0x4c>
        return 0;
    cq_pop_n(q,data,n);
    8a10:	e1a00004 	mov	r0, r4
    8a14:	e1a01006 	mov	r1, r6
    8a18:	e1a02005 	mov	r2, r5
    8a1c:	ebffffe1 	bl	89a8 <cq_pop_n>
    return 1;
    8a20:	e3a00001 	mov	r0, #1
    8a24:	e8bd8070 	pop	{r4, r5, r6, pc}
}

int cq_pop_n_noblk(cq_t *q, void *data, unsigned n) {
    cq_ok(q);
    if(cq_nelem(q) < n)
        return 0;
    8a28:	e3a00000 	mov	r0, #0
    cq_pop_n(q,data,n);
    return 1;
}
    8a2c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8a30:	00002004 	andeq	r2, r0, r4

00008a34 <cq_peek_n>:

// non-destructively peek ahead <n> entries.
int cq_peek_n(cq_t *c, cqe_t *v, unsigned n) {
    8a34:	e92d4070 	push	{r4, r5, r6, lr}
    8a38:	e1a04000 	mov	r4, r0
    8a3c:	e59f3080 	ldr	r3, [pc, #128]	; 8ac4 <cq_peek_n+0x90>
    8a40:	e7905003 	ldr	r5, [r0, r3]
    8a44:	e2833004 	add	r3, r3, #4
    8a48:	e7903003 	ldr	r3, [r0, r3]
    8a4c:	e0635005 	rsb	r5, r3, r5
    8a50:	e1a05985 	lsl	r5, r5, #19
    8a54:	e1a059a5 	lsr	r5, r5, #19
    int sz = cq_nelem(c);
    if(n > sz)
    8a58:	e1520005 	cmp	r2, r5
    8a5c:	8a000014 	bhi	8ab4 <cq_peek_n+0x80>
        return 0;
    unsigned tail = c->tail;
    8a60:	e59f3060 	ldr	r3, [pc, #96]	; 8ac8 <cq_peek_n+0x94>
    8a64:	e7906003 	ldr	r6, [r0, r3]
    if(!cq_pop_n_noblk(c, v, n))
    8a68:	ebffffdb 	bl	89dc <cq_pop_n_noblk>
    8a6c:	e3500000 	cmp	r0, #0
    8a70:	08bd8070 	popeq	{r4, r5, r6, pc}
        return 0;
    c->tail = tail;
    8a74:	e59f304c 	ldr	r3, [pc, #76]	; 8ac8 <cq_peek_n+0x94>
    8a78:	e7846003 	str	r6, [r4, r3]
    8a7c:	e59f2040 	ldr	r2, [pc, #64]	; 8ac4 <cq_peek_n+0x90>
    8a80:	e7942002 	ldr	r2, [r4, r2]
    8a84:	e7943003 	ldr	r3, [r4, r3]
    8a88:	e0633002 	rsb	r3, r3, r2
    8a8c:	e1a03983 	lsl	r3, r3, #19
    assert(sz == cq_nelem(c));
    8a90:	e15509a3 	cmp	r5, r3, lsr #19
    8a94:	0a000008 	beq	8abc <cq_peek_n+0x88>
    8a98:	eb0000aa 	bl	8d48 <rpi_reset_putc>
    8a9c:	e59f0028 	ldr	r0, [pc, #40]	; 8acc <cq_peek_n+0x98>
    8aa0:	e59f1028 	ldr	r1, [pc, #40]	; 8ad0 <cq_peek_n+0x9c>
    8aa4:	e59f2028 	ldr	r2, [pc, #40]	; 8ad4 <cq_peek_n+0xa0>
    8aa8:	e3a03030 	mov	r3, #48	; 0x30
    8aac:	eb00008a 	bl	8cdc <printk>
    8ab0:	eb0001f9 	bl	929c <clean_reboot>

// non-destructively peek ahead <n> entries.
int cq_peek_n(cq_t *c, cqe_t *v, unsigned n) {
    int sz = cq_nelem(c);
    if(n > sz)
        return 0;
    8ab4:	e3a00000 	mov	r0, #0
    8ab8:	e8bd8070 	pop	{r4, r5, r6, pc}
    unsigned tail = c->tail;
    if(!cq_pop_n_noblk(c, v, n))
        return 0;
    c->tail = tail;
    assert(sz == cq_nelem(c));
    return 1;
    8abc:	e3a00001 	mov	r0, #1
}
    8ac0:	e8bd8070 	pop	{r4, r5, r6, pc}
    8ac4:	00002004 	andeq	r2, r0, r4
    8ac8:	00002008 	andeq	r2, r0, r8
    8acc:	0000a914 	andeq	sl, r0, r4, lsl r9
    8ad0:	0000a850 	andeq	sl, r0, r0, asr r8
    8ad4:	0000a7fc 	strdeq	sl, [r0], -ip

00008ad8 <cq_push_n>:

    for(int i = 0; i < n; i++)
        p[i] = cq_pop(c);
}

int cq_push_n(cq_t *c, void *data, unsigned n) {
    8ad8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8adc:	e59f3100 	ldr	r3, [pc, #256]	; 8be4 <cq_push_n+0x10c>
    8ae0:	e790c003 	ldr	ip, [r0, r3]
    8ae4:	e2833004 	add	r3, r3, #4
    8ae8:	e7903003 	ldr	r3, [r0, r3]
    8aec:	e063300c 	rsb	r3, r3, ip
    8af0:	e1a03983 	lsl	r3, r3, #19
    8af4:	e1a039a3 	lsr	r3, r3, #19
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }
    8af8:	e2633a02 	rsb	r3, r3, #8192	; 0x2000
    cqe_t *p = data;

    if(cq_nspace(c) < n)
    8afc:	e1520003 	cmp	r2, r3
    8b00:	8a000031 	bhi	8bcc <cq_push_n+0xf4>
    8b04:	e3a03000 	mov	r3, #0
    return 1;
}

// non-blocking push.
static inline int cq_push(cq_t *c, cqe_t x) {
    unsigned head = c->head;
    8b08:	e59fc0d4 	ldr	ip, [pc, #212]	; 8be4 <cq_push_n+0x10c>
    unsigned tail = c->tail;
    8b0c:	e59f50d4 	ldr	r5, [pc, #212]	; 8be8 <cq_push_n+0x110>
    if(cq_full(c)) 
        return 0;
    8b10:	e1a09003 	mov	r9, r3
    c->c_buf[head] = x;
    c->head = (head + 1) % CQ_N;
    return 1;
    8b14:	e3a08001 	mov	r8, #1
    8b18:	ea00001a 	b	8b88 <cq_push_n+0xb0>
        return 0;
    for(int i = 0; i < n; i++)
        if(!cq_push(c, p[i]))
    8b1c:	e7d1a003 	ldrb	sl, [r1, r3]
    return 1;
}

// non-blocking push.
static inline int cq_push(cq_t *c, cqe_t x) {
    unsigned head = c->head;
    8b20:	e790400c 	ldr	r4, [r0, ip]
    unsigned tail = c->tail;
    8b24:	e7906005 	ldr	r6, [r0, r5]
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }

// if adding 1 to head = tail, then we have no space.
static inline int cq_full(cq_t *q) { return (q->head+1) % CQ_N == q->tail; }
    8b28:	e790700c 	ldr	r7, [r0, ip]
    8b2c:	e2877001 	add	r7, r7, #1
    8b30:	e1a07987 	lsl	r7, r7, #19
    8b34:	e7906005 	ldr	r6, [r0, r5]

// non-blocking push.
static inline int cq_push(cq_t *c, cqe_t x) {
    unsigned head = c->head;
    unsigned tail = c->tail;
    if(cq_full(c)) 
    8b38:	e15609a7 	cmp	r6, r7, lsr #19
    8b3c:	0a000006 	beq	8b5c <cq_push_n+0x84>
        return 0;
    c->c_buf[head] = x;
    8b40:	e7c0a004 	strb	sl, [r0, r4]
    c->head = (head + 1) % CQ_N;
    8b44:	e2844001 	add	r4, r4, #1
    8b48:	e1a04984 	lsl	r4, r4, #19
    8b4c:	e1a049a4 	lsr	r4, r4, #19
    8b50:	e780400c 	str	r4, [r0, ip]
    return 1;
    8b54:	e1a04008 	mov	r4, r8
    8b58:	ea000000 	b	8b60 <cq_push_n+0x88>
// non-blocking push.
static inline int cq_push(cq_t *c, cqe_t x) {
    unsigned head = c->head;
    unsigned tail = c->tail;
    if(cq_full(c)) 
        return 0;
    8b5c:	e1a04009 	mov	r4, r9
    8b60:	e3540000 	cmp	r4, #0
    8b64:	1a000006 	bne	8b84 <cq_push_n+0xac>
            panic("not handling this\n");
    8b68:	eb000076 	bl	8d48 <rpi_reset_putc>
    8b6c:	e59f0078 	ldr	r0, [pc, #120]	; 8bec <cq_push_n+0x114>
    8b70:	e59f1078 	ldr	r1, [pc, #120]	; 8bf0 <cq_push_n+0x118>
    8b74:	e59f2078 	ldr	r2, [pc, #120]	; 8bf4 <cq_push_n+0x11c>
    8b78:	e3a0304e 	mov	r3, #78	; 0x4e
    8b7c:	eb000056 	bl	8cdc <printk>
    8b80:	eb0001c5 	bl	929c <clean_reboot>
int cq_push_n(cq_t *c, void *data, unsigned n) {
    cqe_t *p = data;

    if(cq_nspace(c) < n)
        return 0;
    for(int i = 0; i < n; i++)
    8b84:	e2833001 	add	r3, r3, #1
    8b88:	e1530002 	cmp	r3, r2
    8b8c:	3affffe2 	bcc	8b1c <cq_push_n+0x44>
        if(!cq_push(c, p[i]))
            panic("not handling this\n");
    if(n)
    8b90:	e3520000 	cmp	r2, #0
    8b94:	0a00000e 	beq	8bd4 <cq_push_n+0xfc>
void cq_print(cq_t *c);

/*************************************************************************************
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }
    8b98:	e59f3044 	ldr	r3, [pc, #68]	; 8be4 <cq_push_n+0x10c>
    8b9c:	e7902003 	ldr	r2, [r0, r3]
    8ba0:	e2833004 	add	r3, r3, #4
    8ba4:	e7903003 	ldr	r3, [r0, r3]
        assert(!cq_empty(c));
    8ba8:	e1520003 	cmp	r2, r3
    8bac:	1a00000a 	bne	8bdc <cq_push_n+0x104>
    8bb0:	eb000064 	bl	8d48 <rpi_reset_putc>
    8bb4:	e59f003c 	ldr	r0, [pc, #60]	; 8bf8 <cq_push_n+0x120>
    8bb8:	e59f1030 	ldr	r1, [pc, #48]	; 8bf0 <cq_push_n+0x118>
    8bbc:	e59f2030 	ldr	r2, [pc, #48]	; 8bf4 <cq_push_n+0x11c>
    8bc0:	e3a03050 	mov	r3, #80	; 0x50
    8bc4:	eb000044 	bl	8cdc <printk>
    8bc8:	eb0001b3 	bl	929c <clean_reboot>

int cq_push_n(cq_t *c, void *data, unsigned n) {
    cqe_t *p = data;

    if(cq_nspace(c) < n)
        return 0;
    8bcc:	e3a00000 	mov	r0, #0
    8bd0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    for(int i = 0; i < n; i++)
        if(!cq_push(c, p[i]))
            panic("not handling this\n");
    if(n)
        assert(!cq_empty(c));
    return 1;
    8bd4:	e3a00001 	mov	r0, #1
    8bd8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8bdc:	e3a00001 	mov	r0, #1
}
    8be0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8be4:	00002004 	andeq	r2, r0, r4
    8be8:	00002008 	andeq	r2, r0, r8
    8bec:	0000a938 	andeq	sl, r0, r8, lsr r9
    8bf0:	0000a850 	andeq	sl, r0, r0, asr r8
    8bf4:	0000a808 	andeq	sl, r0, r8, lsl #16
    8bf8:	0000a95c 	andeq	sl, r0, ip, asr r9

00008bfc <callee_save>:
    8bfc:	e12fff1e 	bx	lr

00008c00 <store_one_asm>:
    8c00:	e5801000 	str	r1, [r0]
    8c04:	e12fff1e 	bx	lr

00008c08 <check_callee_save>:
    8c08:	e3a04004 	mov	r4, #4
    8c0c:	e3a05005 	mov	r5, #5
    8c10:	e3a06006 	mov	r6, #6
    8c14:	e3a07007 	mov	r7, #7
    8c18:	e3a08008 	mov	r8, #8
    8c1c:	e3a09009 	mov	r9, #9
    8c20:	e3a0a00a 	mov	sl, #10
    8c24:	e3a0b00b 	mov	fp, #11
    8c28:	e3a0c00c 	mov	ip, #12
    8c2c:	e9202000 	stmdb	r0!, {sp}
    8c30:	e9204ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00008c34 <cswitch>:
    8c34:	e5804000 	str	r4, [r0]
    8c38:	e5805004 	str	r5, [r0, #4]
    8c3c:	e5806008 	str	r6, [r0, #8]
    8c40:	e580700c 	str	r7, [r0, #12]
    8c44:	e5808010 	str	r8, [r0, #16]
    8c48:	e5809014 	str	r9, [r0, #20]
    8c4c:	e580a018 	str	sl, [r0, #24]
    8c50:	e580b01c 	str	fp, [r0, #28]
    8c54:	e580c020 	str	ip, [r0, #32]
    8c58:	e580e024 	str	lr, [r0, #36]	; 0x24
    8c5c:	e580d028 	str	sp, [r0, #40]	; 0x28
    8c60:	e3a04004 	mov	r4, #4
    8c64:	e3a05005 	mov	r5, #5
    8c68:	e3a06006 	mov	r6, #6
    8c6c:	e3a07007 	mov	r7, #7
    8c70:	e3a08008 	mov	r8, #8
    8c74:	e3a09009 	mov	r9, #9
    8c78:	e3a0a00a 	mov	sl, #10
    8c7c:	e3a0b00b 	mov	fp, #11
    8c80:	e3a0c00c 	mov	ip, #12
    8c84:	e3a0d00d 	mov	sp, #13
    8c88:	e3a0e00e 	mov	lr, #14
    8c8c:	e5914000 	ldr	r4, [r1]
    8c90:	e5915004 	ldr	r5, [r1, #4]
    8c94:	e5916008 	ldr	r6, [r1, #8]
    8c98:	e591700c 	ldr	r7, [r1, #12]
    8c9c:	e5918010 	ldr	r8, [r1, #16]
    8ca0:	e5919014 	ldr	r9, [r1, #20]
    8ca4:	e591a018 	ldr	sl, [r1, #24]
    8ca8:	e591b01c 	ldr	fp, [r1, #28]
    8cac:	e591c020 	ldr	ip, [r1, #32]
    8cb0:	e591e024 	ldr	lr, [r1, #36]	; 0x24
    8cb4:	e591d028 	ldr	sp, [r1, #40]	; 0x28
    8cb8:	e12fff1e 	bx	lr

00008cbc <memset>:
#include <string.h>

void *memset(void *_p, int c, size_t n) {
    char *p = _p, *e = p + n;
    8cbc:	e0802002 	add	r2, r0, r2
    8cc0:	e1a03000 	mov	r3, r0

    while(p < e)
    8cc4:	ea000001 	b	8cd0 <memset+0x14>
        *p++ = c;
    8cc8:	e5c31000 	strb	r1, [r3]
    8ccc:	e2833001 	add	r3, r3, #1
#include <string.h>

void *memset(void *_p, int c, size_t n) {
    char *p = _p, *e = p + n;

    while(p < e)
    8cd0:	e1530002 	cmp	r3, r2
    8cd4:	3afffffb 	bcc	8cc8 <memset+0xc>
        *p++ = c;
    return _p;
}
    8cd8:	e12fff1e 	bx	lr

00008cdc <printk>:
#include <stdarg.h>

#include "rpi.h"
#include "va-printk.h"

int printk(const char *fmt, ...) {
    8cdc:	e92d000f 	push	{r0, r1, r2, r3}
    8ce0:	e92d4030 	push	{r4, r5, lr}
    8ce4:	e24dd00c 	sub	sp, sp, #12
    // this is a really huge buffer for a pi.   could do this better.
    static char buf[1024];
    va_list args;

    va_start(args, fmt);
    8ce8:	e28d301c 	add	r3, sp, #28
    8cec:	e58d3004 	str	r3, [sp, #4]
        int sz = va_printk(buf, sizeof buf, fmt, args);
    8cf0:	e59f4034 	ldr	r4, [pc, #52]	; 8d2c <printk+0x50>
    8cf4:	e1a00004 	mov	r0, r4
    8cf8:	e3a01b01 	mov	r1, #1024	; 0x400
    8cfc:	e59d2018 	ldr	r2, [sp, #24]
    8d00:	eb0000c3 	bl	9014 <va_printk>
    8d04:	e1a05000 	mov	r5, r0
    va_end(args);


#if 1
    putk(buf);
    8d08:	e59f3020 	ldr	r3, [pc, #32]	; 8d30 <printk+0x54>
    8d0c:	e5933000 	ldr	r3, [r3]
    8d10:	e1a00004 	mov	r0, r4
    8d14:	e12fff33 	blx	r3
    int i;
    for(i = 0; buf[i]; i++)
        rpi_putchar(buf[i]);
#endif
    return sz;
}
    8d18:	e1a00005 	mov	r0, r5
    8d1c:	e28dd00c 	add	sp, sp, #12
    8d20:	e8bd4030 	pop	{r4, r5, lr}
    8d24:	e28dd010 	add	sp, sp, #16
    8d28:	e12fff1e 	bx	lr
    8d2c:	0000ad5c 	andeq	sl, r0, ip, asr sp
    8d30:	0000a3f0 	strdeq	sl, [r0], -r0

00008d34 <internal_putchar>:
#include "rpi.h"

static int internal_putchar(int c) { uart_putc(c); return c; }
    8d34:	e92d4010 	push	{r4, lr}
    8d38:	e1a04000 	mov	r4, r0
    8d3c:	eb00040c 	bl	9d74 <uart_putc>
    8d40:	e1a00004 	mov	r0, r4
    8d44:	e8bd8010 	pop	{r4, pc}

00008d48 <rpi_reset_putc>:

// override this is going through the network.
int (*rpi_putchar)(int c) = internal_putchar;

void rpi_reset_putc(void) {
    rpi_putchar = internal_putchar;
    8d48:	e59f2008 	ldr	r2, [pc, #8]	; 8d58 <rpi_reset_putc+0x10>
    8d4c:	e59f3008 	ldr	r3, [pc, #8]	; 8d5c <rpi_reset_putc+0x14>
    8d50:	e5832000 	str	r2, [r3]
    8d54:	e12fff1e 	bx	lr
    8d58:	00008d34 	andeq	r8, r0, r4, lsr sp
    8d5c:	0000a3ec 	andeq	sl, r0, ip, ror #7

00008d60 <rpi_set_putc>:
}
void rpi_set_putc(int (*fp)(int)) {
    rpi_putchar = fp;
    8d60:	e59f3004 	ldr	r3, [pc, #4]	; 8d6c <rpi_set_putc+0xc>
    8d64:	e5830000 	str	r0, [r3]
    8d68:	e12fff1e 	bx	lr
    8d6c:	0000a3ec 	andeq	sl, r0, ip, ror #7

00008d70 <internal_putk>:
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    8d70:	e92d4038 	push	{r3, r4, r5, lr}
    8d74:	e1a04000 	mov	r4, r0
    for(; *p; p++)
        rpi_putchar(*p);
    8d78:	e59f5020 	ldr	r5, [pc, #32]	; 8da0 <internal_putk+0x30>
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    8d7c:	ea000002 	b	8d8c <internal_putk+0x1c>
        rpi_putchar(*p);
    8d80:	e5953000 	ldr	r3, [r5]
    8d84:	e12fff33 	blx	r3
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    8d88:	e2844001 	add	r4, r4, #1
    8d8c:	e5d40000 	ldrb	r0, [r4]
    8d90:	e3500000 	cmp	r0, #0
    8d94:	1afffff9 	bne	8d80 <internal_putk+0x10>
        rpi_putchar(*p);
//  we were adding this.
//  rpi_putchar('\n');
    return 1;
}
    8d98:	e3a00001 	mov	r0, #1
    8d9c:	e8bd8038 	pop	{r3, r4, r5, pc}
    8da0:	0000a3ec 	andeq	sl, r0, ip, ror #7

00008da4 <isdigit>:
    if(puts_fp)
        putk = puts_fp;
}

// XXX: check sign promotion.
static int isdigit(int c) { return c >= '0' && c <= '9'; }
    8da4:	e2400030 	sub	r0, r0, #48	; 0x30
    8da8:	e3500009 	cmp	r0, #9
    8dac:	83a00000 	movhi	r0, #0
    8db0:	93a00001 	movls	r0, #1
    8db4:	e12fff1e 	bx	lr

00008db8 <pad>:

// don't move: can't be inlined, gcc seems to have a bug.
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
    8db8:	e0611000 	rsb	r1, r1, r0
	// pad with leading spaces
	for(; len < width; len++)
		*p++ = ' ';
    8dbc:	e3a03020 	mov	r3, #32
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8dc0:	ea000002 	b	8dd0 <pad+0x18>
		*p++ = ' ';
    8dc4:	e5c03000 	strb	r3, [r0]
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8dc8:	e2811001 	add	r1, r1, #1
		*p++ = ' ';
    8dcc:	e2800001 	add	r0, r0, #1
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8dd0:	e1510002 	cmp	r1, r2
    8dd4:	bafffffa 	blt	8dc4 <pad+0xc>
		*p++ = ' ';
	*p = 0;
    8dd8:	e3a03000 	mov	r3, #0
    8ddc:	e5c03000 	strb	r3, [r0]
	return p;
}
    8de0:	e12fff1e 	bx	lr

00008de4 <reverse>:

static char* reverse(char *dst, int n, char *p, char *start) {
	// drop the lower chars if the string is too big.
	int len = p - start + 1; // include \0
    8de4:	e063c002 	rsb	ip, r3, r2
    8de8:	e28cc001 	add	ip, ip, #1
	if(len > n)
    8dec:	e15c0001 	cmp	ip, r1
		start += (len - n);
    8df0:	c061100c 	rsbgt	r1, r1, ip
    8df4:	c0833001 	addgt	r3, r3, r1

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    8df8:	e2422001 	sub	r2, r2, #1
    8dfc:	e1a01000 	mov	r1, r0
    8e00:	ea000002 	b	8e10 <reverse+0x2c>
		*dst++ = *p;
    8e04:	e452c001 	ldrb	ip, [r2], #-1
    8e08:	e5c1c000 	strb	ip, [r1]
    8e0c:	e2811001 	add	r1, r1, #1
		start += (len - n);

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    8e10:	e1520003 	cmp	r2, r3
    8e14:	2afffffa 	bcs	8e04 <reverse+0x20>
		*dst++ = *p;
	*dst++ = 0;
    8e18:	e3a03000 	mov	r3, #0
    8e1c:	e5c13000 	strb	r3, [r1]

	return s;
}
    8e20:	e12fff1e 	bx	lr

00008e24 <emit>:

static char* emit(unsigned base, char *dst, int n, int val, int width, int signed_p) {
    8e24:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8e28:	e24dd040 	sub	sp, sp, #64	; 0x40
    8e2c:	e1a05001 	mov	r5, r1
    8e30:	e1a04002 	mov	r4, r2
    8e34:	e59d2058 	ldr	r2, [sp, #88]	; 0x58
	// XXX: constrain width to be >= bit size: can change this.
	if(width > n)
    8e38:	e1520004 	cmp	r2, r4
		width = n - 1;
    8e3c:	c2442001 	subgt	r2, r4, #1

	char buf[64], *p = buf; 
	unsigned u = val;
    8e40:	e1a0c003 	mov	ip, r3

	switch(base) { 
    8e44:	e2400002 	sub	r0, r0, #2
    8e48:	e350000e 	cmp	r0, #14
    8e4c:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
    8e50:	ea000042 	b	8f60 <emit+0x13c>
    8e54:	00008f38 	andeq	r8, r0, r8, lsr pc
    8e58:	00008f60 	andeq	r8, r0, r0, ror #30
    8e5c:	00008f60 	andeq	r8, r0, r0, ror #30
    8e60:	00008f60 	andeq	r8, r0, r0, ror #30
    8e64:	00008f60 	andeq	r8, r0, r0, ror #30
    8e68:	00008f60 	andeq	r8, r0, r0, ror #30
    8e6c:	00008f2c 	andeq	r8, r0, ip, lsr #30
    8e70:	00008f60 	andeq	r8, r0, r0, ror #30
    8e74:	00008e90 	muleq	r0, r0, lr
    8e78:	00008f60 	andeq	r8, r0, r0, ror #30
    8e7c:	00008f60 	andeq	r8, r0, r0, ror #30
    8e80:	00008f60 	andeq	r8, r0, r0, ror #30
    8e84:	00008f60 	andeq	r8, r0, r0, ror #30
    8e88:	00008f60 	andeq	r8, r0, r0, ror #30
    8e8c:	00008f04 	andeq	r8, r0, r4, lsl #30
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
    8e90:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
    8e94:	e2911000 	adds	r1, r1, #0
    8e98:	13a01001 	movne	r1, #1
    8e9c:	e0111fa3 	ands	r1, r1, r3, lsr #31
				neg_p = 1;
				val = -val;
    8ea0:	1263c000 	rsbne	ip, r3, #0
	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
				neg_p = 1;
    8ea4:	13a08001 	movne	r8, #1
	unsigned u = val;

	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
    8ea8:	03a08000 	moveq	r8, #0
			if(val < 0 && signed_p) {
				neg_p = 1;
    8eac:	e1a0100d 	mov	r1, sp
				val = -val;
				u = val;
			}
			do { 
				*p++ = "0123456789"[u % 10];
    8eb0:	e59f70ec 	ldr	r7, [pc, #236]	; 8fa4 <emit+0x180>
    8eb4:	e59f60ec 	ldr	r6, [pc, #236]	; 8fa8 <emit+0x184>
    8eb8:	ea000000 	b	8ec0 <emit+0x9c>
    8ebc:	e1a01003 	mov	r1, r3
    8ec0:	e2813001 	add	r3, r1, #1
    8ec4:	e08e0c97 	umull	r0, lr, r7, ip
    8ec8:	e1a0e1ae 	lsr	lr, lr, #3
    8ecc:	e1a0000e 	mov	r0, lr
    8ed0:	e08ee10e 	add	lr, lr, lr, lsl #2
    8ed4:	e1a0e08e 	lsl	lr, lr, #1
    8ed8:	e06ee00c 	rsb	lr, lr, ip
    8edc:	e7d6c00e 	ldrb	ip, [r6, lr]
    8ee0:	e5c1c000 	strb	ip, [r1]
			} while(u /= 10); 
    8ee4:	e1a0c000 	mov	ip, r0
    8ee8:	e3500000 	cmp	r0, #0
    8eec:	1afffff2 	bne	8ebc <emit+0x98>
			if(neg_p)
    8ef0:	e3580000 	cmp	r8, #0
				*p++ = '-';
    8ef4:	12813002 	addne	r3, r1, #2
    8ef8:	13a0002d 	movne	r0, #45	; 0x2d
    8efc:	15c10001 	strbne	r0, [r1, #1]
    8f00:	ea00001d 	b	8f7c <emit+0x158>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    8f04:	e1a0e00d 	mov	lr, sp
			break;
		}
		case 16:
			u = val;
                        do {
                                *p++ = "0123456789abcdef"[u % 16];
    8f08:	e59f009c 	ldr	r0, [pc, #156]	; 8fac <emit+0x188>
    8f0c:	e28e3001 	add	r3, lr, #1
    8f10:	e20c100f 	and	r1, ip, #15
    8f14:	e7d01001 	ldrb	r1, [r0, r1]
    8f18:	e5ce1000 	strb	r1, [lr]
    8f1c:	e1a0e003 	mov	lr, r3
                        } while(u /= 16);
    8f20:	e1b0c22c 	lsrs	ip, ip, #4
    8f24:	1afffff8 	bne	8f0c <emit+0xe8>
    8f28:	ea000013 	b	8f7c <emit+0x158>
                        break;
		// just a single char
		case 8:
			*p++ = val;
    8f2c:	e5cd3000 	strb	r3, [sp]
    8f30:	e28d3001 	add	r3, sp, #1
			break;
    8f34:	ea000010 	b	8f7c <emit+0x158>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    8f38:	e1a0e00d 	mov	lr, sp
#if 0
			for(int i = 0; i < 32; i++)
				*p++ = "01"[(u & (1<<i)) != 0];
#else
                        do {
                        	*p++ = "01"[u % 2];
    8f3c:	e59f006c 	ldr	r0, [pc, #108]	; 8fb0 <emit+0x18c>
    8f40:	e28e3001 	add	r3, lr, #1
    8f44:	e20c1001 	and	r1, ip, #1
    8f48:	e7d01001 	ldrb	r1, [r0, r1]
    8f4c:	e5ce1000 	strb	r1, [lr]
    8f50:	e1a0e003 	mov	lr, r3
			} while(u /= 2);
    8f54:	e1b0c0ac 	lsrs	ip, ip, #1
    8f58:	1afffff8 	bne	8f40 <emit+0x11c>
    8f5c:	ea000006 	b	8f7c <emit+0x158>
#endif
			break;
		default:
			assert(0);
    8f60:	ebffff78 	bl	8d48 <rpi_reset_putc>
    8f64:	e59f0048 	ldr	r0, [pc, #72]	; 8fb4 <emit+0x190>
    8f68:	e59f1048 	ldr	r1, [pc, #72]	; 8fb8 <emit+0x194>
    8f6c:	e59f2048 	ldr	r2, [pc, #72]	; 8fbc <emit+0x198>
    8f70:	e3a03075 	mov	r3, #117	; 0x75
    8f74:	ebffff58 	bl	8cdc <printk>
    8f78:	eb0000c7 	bl	929c <clean_reboot>
	}
	// number string is reversed, so re-reverse it.
	return reverse(dst, n, pad(p, buf, width), buf);
    8f7c:	e1a00003 	mov	r0, r3
    8f80:	e1a0100d 	mov	r1, sp
    8f84:	ebffff8b 	bl	8db8 <pad>
    8f88:	e1a02000 	mov	r2, r0
    8f8c:	e1a00005 	mov	r0, r5
    8f90:	e1a01004 	mov	r1, r4
    8f94:	e1a0300d 	mov	r3, sp
    8f98:	ebffff91 	bl	8de4 <reverse>
}
    8f9c:	e28dd040 	add	sp, sp, #64	; 0x40
    8fa0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8fa4:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    8fa8:	0000a9c8 	andeq	sl, r0, r8, asr #19
    8fac:	0000a9d4 	ldrdeq	sl, [r0], -r4
    8fb0:	0000a9e8 	andeq	sl, r0, r8, ror #19
    8fb4:	0000a9a0 	andeq	sl, r0, r0, lsr #19
    8fb8:	0000a9b4 			; <UNDEFINED> instruction: 0x0000a9b4
    8fbc:	0000a97c 	andeq	sl, r0, ip, ror r9

00008fc0 <rpi_set_output>:
// override this is going through the network.
int (*rpi_putchar)(int c) = internal_putchar;
#endif


void rpi_set_output(int (*putc_fp)(int), int (*puts_fp)(const char *)) {
    8fc0:	e92d4008 	push	{r3, lr}
    assert(putc_fp);
    8fc4:	e3500000 	cmp	r0, #0
    8fc8:	1a000006 	bne	8fe8 <rpi_set_output+0x28>
    8fcc:	ebffff5d 	bl	8d48 <rpi_reset_putc>
    8fd0:	e59f0028 	ldr	r0, [pc, #40]	; 9000 <rpi_set_output+0x40>
    8fd4:	e59f1028 	ldr	r1, [pc, #40]	; 9004 <rpi_set_output+0x44>
    8fd8:	e59f2028 	ldr	r2, [pc, #40]	; 9008 <rpi_set_output+0x48>
    8fdc:	e3a03020 	mov	r3, #32
    8fe0:	ebffff3d 	bl	8cdc <printk>
    8fe4:	eb0000ac 	bl	929c <clean_reboot>
    rpi_putchar = putc_fp;
    8fe8:	e59f301c 	ldr	r3, [pc, #28]	; 900c <rpi_set_output+0x4c>
    8fec:	e5830000 	str	r0, [r3]
    if(puts_fp)
    8ff0:	e3510000 	cmp	r1, #0
        putk = puts_fp;
    8ff4:	159f3014 	ldrne	r3, [pc, #20]	; 9010 <rpi_set_output+0x50>
    8ff8:	15831000 	strne	r1, [r3]
    8ffc:	e8bd8008 	pop	{r3, pc}
    9000:	0000a9ec 	andeq	sl, r0, ip, ror #19
    9004:	0000a9b4 			; <UNDEFINED> instruction: 0x0000a9b4
    9008:	0000a984 	andeq	sl, r0, r4, lsl #19
    900c:	0000a3ec 	andeq	sl, r0, ip, ror #7
    9010:	0000a3f0 	strdeq	sl, [r0], -r0

00009014 <va_printk>:
	return reverse(dst, n, pad(p, buf, width), buf);
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
    9014:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9018:	e24dd08c 	sub	sp, sp, #140	; 0x8c
    901c:	e1a0a000 	mov	sl, r0
    9020:	e1a09003 	mov	r9, r3
	char *p = buf, *e = buf + n - 1;
    9024:	e2411001 	sub	r1, r1, #1
    9028:	e0808001 	add	r8, r0, r1

	buf[0] = 0;
    902c:	e3a03000 	mov	r3, #0
    9030:	e5c03000 	strb	r3, [r0]
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;
    9034:	e1a04000 	mov	r4, r0
			fmt+=2;
		} else {	
			fmt++;

			char *s, num[128];
			unsigned width = 0;
    9038:	e1a0b003 	mov	fp, r3

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    903c:	ea000086 	b	925c <va_printk+0x248>
		if(*fmt != '%')
    9040:	e3530025 	cmp	r3, #37	; 0x25
			*p++ = *fmt++;
    9044:	12822001 	addne	r2, r2, #1
    9048:	15c43000 	strbne	r3, [r4]
    904c:	12844001 	addne	r4, r4, #1
    9050:	1a000081 	bne	925c <va_printk+0x248>
		
		else if(fmt[1] == '%') {
    9054:	e5d21001 	ldrb	r1, [r2, #1]
    9058:	e3510025 	cmp	r1, #37	; 0x25
			*p++ = *fmt;
    905c:	05c43000 	strbeq	r3, [r4]
			fmt+=2;
    9060:	02822002 	addeq	r2, r2, #2
	for(; *fmt && p < e; ) {
		if(*fmt != '%')
			*p++ = *fmt++;
		
		else if(fmt[1] == '%') {
			*p++ = *fmt;
    9064:	02844001 	addeq	r4, r4, #1
    9068:	0a00007b 	beq	925c <va_printk+0x248>
			fmt+=2;
		} else {	
			fmt++;
    906c:	e2826001 	add	r6, r2, #1

			char *s, num[128];
			unsigned width = 0;
    9070:	e1a0700b 	mov	r7, fp

			while(isdigit(*fmt)) {
    9074:	ea000004 	b	908c <va_printk+0x78>
				width = width*10 + *fmt - '0';
    9078:	e0877107 	add	r7, r7, r7, lsl #2
    907c:	e1a07087 	lsl	r7, r7, #1
    9080:	e0877005 	add	r7, r7, r5
    9084:	e2477030 	sub	r7, r7, #48	; 0x30
				fmt++;
    9088:	e2866001 	add	r6, r6, #1
			fmt++;

			char *s, num[128];
			unsigned width = 0;

			while(isdigit(*fmt)) {
    908c:	e5d65000 	ldrb	r5, [r6]
    9090:	e1a00005 	mov	r0, r5
    9094:	ebffff42 	bl	8da4 <isdigit>
    9098:	e3500000 	cmp	r0, #0
    909c:	1afffff5 	bne	9078 <va_printk+0x64>
				width = width*10 + *fmt - '0';
				fmt++;
			}
			assert(width < 32);
    90a0:	e357001f 	cmp	r7, #31
    90a4:	9a000006 	bls	90c4 <va_printk+0xb0>
    90a8:	ebffff26 	bl	8d48 <rpi_reset_putc>
    90ac:	e59f01d4 	ldr	r0, [pc, #468]	; 9288 <va_printk+0x274>
    90b0:	e59f11d4 	ldr	r1, [pc, #468]	; 928c <va_printk+0x278>
    90b4:	e59f21d4 	ldr	r2, [pc, #468]	; 9290 <va_printk+0x27c>
    90b8:	e3a03092 	mov	r3, #146	; 0x92
    90bc:	ebffff06 	bl	8cdc <printk>
    90c0:	eb000075 	bl	929c <clean_reboot>
			
			switch(*fmt) {
    90c4:	e2455062 	sub	r5, r5, #98	; 0x62
    90c8:	e3550016 	cmp	r5, #22
    90cc:	979ff105 	ldrls	pc, [pc, r5, lsl #2]
    90d0:	ea00004e 	b	9210 <va_printk+0x1fc>
    90d4:	000091bc 			; <UNDEFINED> instruction: 0x000091bc
    90d8:	000091ec 	andeq	r9, r0, ip, ror #3
    90dc:	0000914c 	andeq	r9, r0, ip, asr #2
    90e0:	00009210 	andeq	r9, r0, r0, lsl r2
    90e4:	00009130 	andeq	r9, r0, r0, lsr r1
    90e8:	00009210 	andeq	r9, r0, r0, lsl r2
    90ec:	00009210 	andeq	r9, r0, r0, lsl r2
    90f0:	00009210 	andeq	r9, r0, r0, lsl r2
    90f4:	00009210 	andeq	r9, r0, r0, lsl r2
    90f8:	00009210 	andeq	r9, r0, r0, lsl r2
    90fc:	00009210 	andeq	r9, r0, r0, lsl r2
    9100:	00009210 	andeq	r9, r0, r0, lsl r2
    9104:	00009210 	andeq	r9, r0, r0, lsl r2
    9108:	00009210 	andeq	r9, r0, r0, lsl r2
    910c:	00009198 	muleq	r0, r8, r1
    9110:	00009210 	andeq	r9, r0, r0, lsl r2
    9114:	00009210 	andeq	r9, r0, r0, lsl r2
    9118:	000091e0 	andeq	r9, r0, r0, ror #3
    911c:	00009210 	andeq	r9, r0, r0, lsl r2
    9120:	00009174 	andeq	r9, r0, r4, ror r1
    9124:	00009210 	andeq	r9, r0, r0, lsl r2
    9128:	00009210 	andeq	r9, r0, r0, lsl r2
    912c:	00009198 	muleq	r0, r8, r1
			case 'f':
			{
#ifndef RPI_FP_ENABLED
				panic("float not enabled!!!");
    9130:	ebffff04 	bl	8d48 <rpi_reset_putc>
    9134:	e59f0158 	ldr	r0, [pc, #344]	; 9294 <va_printk+0x280>
    9138:	e59f114c 	ldr	r1, [pc, #332]	; 928c <va_printk+0x278>
    913c:	e59f214c 	ldr	r2, [pc, #332]	; 9290 <va_printk+0x27c>
    9140:	e3a03098 	mov	r3, #152	; 0x98
    9144:	ebfffee4 	bl	8cdc <printk>
    9148:	eb000053 	bl	929c <clean_reboot>

				break;
#endif
			}
			case 'd':
				s = emit(10, num, 128, va_arg(args, int), width, 1);
    914c:	e5993000 	ldr	r3, [r9]
    9150:	e2899004 	add	r9, r9, #4
    9154:	e58d7000 	str	r7, [sp]
    9158:	e3a02001 	mov	r2, #1
    915c:	e58d2004 	str	r2, [sp, #4]
    9160:	e3a0000a 	mov	r0, #10
    9164:	e28d1008 	add	r1, sp, #8
    9168:	e3a02080 	mov	r2, #128	; 0x80
    916c:	ebffff2c 	bl	8e24 <emit>
				break;
    9170:	ea00002f 	b	9234 <va_printk+0x220>
			case 'u':
				s = emit(10, num, 128, va_arg(args, unsigned), width, 0);
    9174:	e5993000 	ldr	r3, [r9]
    9178:	e2899004 	add	r9, r9, #4
    917c:	e58d7000 	str	r7, [sp]
    9180:	e58db004 	str	fp, [sp, #4]
    9184:	e3a0000a 	mov	r0, #10
    9188:	e28d1008 	add	r1, sp, #8
    918c:	e3a02080 	mov	r2, #128	; 0x80
    9190:	ebffff23 	bl	8e24 <emit>
				break;
    9194:	ea000026 	b	9234 <va_printk+0x220>
			case 'p':
			case 'x':
				s = emit(16, num, 128, va_arg(args, unsigned), width, 0);
    9198:	e5993000 	ldr	r3, [r9]
    919c:	e2899004 	add	r9, r9, #4
    91a0:	e58d7000 	str	r7, [sp]
    91a4:	e58db004 	str	fp, [sp, #4]
    91a8:	e3a00010 	mov	r0, #16
    91ac:	e28d1008 	add	r1, sp, #8
    91b0:	e3a02080 	mov	r2, #128	; 0x80
    91b4:	ebffff1a 	bl	8e24 <emit>
				break;
    91b8:	ea00001d 	b	9234 <va_printk+0x220>
			case 'b':
				s = emit(2, num, 128, va_arg(args, unsigned), width, 0);
    91bc:	e5993000 	ldr	r3, [r9]
    91c0:	e2899004 	add	r9, r9, #4
    91c4:	e58d7000 	str	r7, [sp]
    91c8:	e58db004 	str	fp, [sp, #4]
    91cc:	e3a00002 	mov	r0, #2
    91d0:	e28d1008 	add	r1, sp, #8
    91d4:	e3a02080 	mov	r2, #128	; 0x80
    91d8:	ebffff11 	bl	8e24 <emit>
				break;
    91dc:	ea000014 	b	9234 <va_printk+0x220>
			case 's':
				s = va_arg(args, char *);
    91e0:	e5990000 	ldr	r0, [r9]
    91e4:	e2899004 	add	r9, r9, #4
				break;
    91e8:	ea000011 	b	9234 <va_printk+0x220>
			case 'c':
				s = emit(8, num, 128, va_arg(args, int),width,0);
    91ec:	e5993000 	ldr	r3, [r9]
    91f0:	e2899004 	add	r9, r9, #4
    91f4:	e58d7000 	str	r7, [sp]
    91f8:	e58db004 	str	fp, [sp, #4]
    91fc:	e3a00008 	mov	r0, #8
    9200:	e08d1000 	add	r1, sp, r0
    9204:	e3a02080 	mov	r2, #128	; 0x80
    9208:	ebffff05 	bl	8e24 <emit>
				break;
    920c:	ea000008 	b	9234 <va_printk+0x220>
			default: 
				panic("printk: not handling specifier '%c'\n", *fmt);
    9210:	ebfffecc 	bl	8d48 <rpi_reset_putc>
    9214:	e5d63000 	ldrb	r3, [r6]
    9218:	e58d3000 	str	r3, [sp]
    921c:	e59f0074 	ldr	r0, [pc, #116]	; 9298 <va_printk+0x284>
    9220:	e59f1064 	ldr	r1, [pc, #100]	; 928c <va_printk+0x278>
    9224:	e59f2064 	ldr	r2, [pc, #100]	; 9290 <va_printk+0x27c>
    9228:	e3a030b9 	mov	r3, #185	; 0xb9
    922c:	ebfffeaa 	bl	8cdc <printk>
    9230:	eb000019 	bl	929c <clean_reboot>
				return 0;   // ugh
			}
			fmt++;
    9234:	e2862001 	add	r2, r6, #1

			// safe string copy
			for(; p < e && *s; )
    9238:	ea000002 	b	9248 <va_printk+0x234>
				*p++ = *s++;
    923c:	e2800001 	add	r0, r0, #1
    9240:	e5c43000 	strb	r3, [r4]
    9244:	e2844001 	add	r4, r4, #1
				return 0;   // ugh
			}
			fmt++;

			// safe string copy
			for(; p < e && *s; )
    9248:	e1540008 	cmp	r4, r8
    924c:	2a000002 	bcs	925c <va_printk+0x248>
    9250:	e5d03000 	ldrb	r3, [r0]
    9254:	e3530000 	cmp	r3, #0
    9258:	1afffff7 	bne	923c <va_printk+0x228>

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    925c:	e5d23000 	ldrb	r3, [r2]
    9260:	e3530000 	cmp	r3, #0
    9264:	0a000001 	beq	9270 <va_printk+0x25c>
    9268:	e1540008 	cmp	r4, r8
    926c:	3affff73 	bcc	9040 <va_printk+0x2c>
			// safe string copy
			for(; p < e && *s; )
				*p++ = *s++;
		}
	}
	*p++ = 0;
    9270:	e2840001 	add	r0, r4, #1
    9274:	e3a03000 	mov	r3, #0
    9278:	e5c43000 	strb	r3, [r4]
	return p - buf;
}
    927c:	e06a0000 	rsb	r0, sl, r0
    9280:	e28dd08c 	add	sp, sp, #140	; 0x8c
    9284:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9288:	0000aa04 	andeq	sl, r0, r4, lsl #20
    928c:	0000a9b4 			; <UNDEFINED> instruction: 0x0000a9b4
    9290:	0000a994 	muleq	r0, r4, r9
    9294:	0000aa20 	andeq	sl, r0, r0, lsr #20
    9298:	0000aa48 	andeq	sl, r0, r8, asr #20

0000929c <clean_reboot>:
#include "rpi.h"

// print out a special message so bootloader exits
void clean_reboot(void) {
    929c:	e92d4008 	push	{r3, lr}
    putk("DONE!!!\n");
    92a0:	e59f3014 	ldr	r3, [pc, #20]	; 92bc <clean_reboot+0x20>
    92a4:	e5933000 	ldr	r3, [r3]
    92a8:	e59f0010 	ldr	r0, [pc, #16]	; 92c0 <clean_reboot+0x24>
    92ac:	e12fff33 	blx	r3
    delay_ms(100);       // (hopefully) enough time for message to get flushed.
    92b0:	e3a00064 	mov	r0, #100	; 0x64
    92b4:	eb000063 	bl	9448 <delay_ms>
    rpi_reboot();
    92b8:	eb000038 	bl	93a0 <rpi_reboot>
    92bc:	0000a3f0 	strdeq	sl, [r0], -r0
    92c0:	0000aa80 	andeq	sl, r0, r0, lsl #21

000092c4 <internal_sw_putchar>:
#include "rpi.h"
#include "sw-uart.h"
#include "control-block.h"

static sw_uart_t console_uart;
static int internal_sw_putchar(int c) {
    92c4:	e92d4010 	push	{r4, lr}
    92c8:	e1a04000 	mov	r4, r0
    sw_uart_putc(&console_uart, c);
    92cc:	e59f000c 	ldr	r0, [pc, #12]	; 92e0 <internal_sw_putchar+0x1c>
    92d0:	e6ef1074 	uxtb	r1, r4
    92d4:	eb0000df 	bl	9658 <sw_uart_putc>
    return c;
}
    92d8:	e1a00004 	mov	r0, r4
    92dc:	e8bd8010 	pop	{r4, pc}
    92e0:	0000b15c 	andeq	fp, r0, ip, asr r1

000092e4 <_cstart>:

void _cstart() {
    92e4:	e92d4008 	push	{r3, lr}
    extern int __bss_start__, __bss_end__;
	void notmain();

    int* bss = &__bss_start__;
    92e8:	e59f3068 	ldr	r3, [pc, #104]	; 9358 <_cstart+0x74>
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    92ec:	e59f2068 	ldr	r2, [pc, #104]	; 935c <_cstart+0x78>
        *bss++ = 0;
    92f0:	e3a01000 	mov	r1, #0
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    92f4:	ea000001 	b	9300 <_cstart+0x1c>
        *bss++ = 0;
    92f8:	e5831000 	str	r1, [r3]
    92fc:	e2833004 	add	r3, r3, #4
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    9300:	e1530002 	cmp	r3, r2
    9304:	3afffffb 	bcc	92f8 <_cstart+0x14>
        *bss++ = 0;

#if 1
    // this links in so much stuff.  need to fix.
    control_blk_t *cb = cb_get_block();
    9308:	eb00042c 	bl	a3c0 <cb_get_block>
    if(cb) {
    930c:	e3500000 	cmp	r0, #0
    9310:	0a00000e 	beq	9350 <_cstart+0x6c>
        if(cb->console_dev == PUTC_SW_UART) {
    9314:	e5d02004 	ldrb	r2, [r0, #4]
    9318:	e3520002 	cmp	r2, #2
    931c:	1a00000b 	bne	9350 <_cstart+0x6c>
            rpi_putchar = internal_sw_putchar;
    9320:	e59f1038 	ldr	r1, [pc, #56]	; 9360 <_cstart+0x7c>
    9324:	e59f2038 	ldr	r2, [pc, #56]	; 9364 <_cstart+0x80>
    9328:	e5821000 	str	r1, [r2]
            console_uart = cb->sw_uart;
    932c:	e59fc034 	ldr	ip, [pc, #52]	; 9368 <_cstart+0x84>
    9330:	e2803008 	add	r3, r0, #8
    9334:	e8930007 	ldm	r3, {r0, r1, r2}
    9338:	e88c0007 	stm	ip, {r0, r1, r2}
            sw_uart_printk(&console_uart, "about to print on regular printf\n");
    933c:	e1a0000c 	mov	r0, ip
    9340:	e59f1024 	ldr	r1, [pc, #36]	; 936c <_cstart+0x88>
    9344:	eb000217 	bl	9ba8 <sw_uart_printk>
            printk("success!\n");
    9348:	e59f0020 	ldr	r0, [pc, #32]	; 9370 <_cstart+0x8c>
    934c:	ebfffe62 	bl	8cdc <printk>
        }
    }
#endif
    notmain(); 
    9350:	ebfffb5c 	bl	80c8 <notmain>
	rpi_reboot();
    9354:	eb000011 	bl	93a0 <rpi_reboot>
    9358:	0000ad30 	andeq	sl, r0, r0, lsr sp
    935c:	0000b170 	andeq	fp, r0, r0, ror r1
    9360:	000092c4 	andeq	r9, r0, r4, asr #5
    9364:	0000a3ec 	andeq	sl, r0, ip, ror #7
    9368:	0000b15c 	andeq	fp, r0, ip, asr r1
    936c:	0000aa8c 	andeq	sl, r0, ip, lsl #21
    9370:	0000aab0 			; <UNDEFINED> instruction: 0x0000aab0

00009374 <at_user_level>:
 * works if we have a trashed stack pointer?
 */
static unsigned user_level = 0b10000;
int at_user_level(void) {
    unsigned cpsr = 0;
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    9374:	e10f0000 	mrs	r0, CPSR

    // user level = lower 5 bits = 0b10000);
    return (cpsr  & 0b11111)  == user_level;
    9378:	e200001f 	and	r0, r0, #31
}
    937c:	e3500010 	cmp	r0, #16
    9380:	13a00000 	movne	r0, #0
    9384:	03a00001 	moveq	r0, #1
    9388:	e12fff1e 	bx	lr

0000938c <set_user_level>:

// this is just used by the reboot code.
void set_user_level(void) {
    unsigned cpsr = 0;
    // XXX: shouldn't we just set the one bit?
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    938c:	e10f3000 	mrs	r3, CPSR
        cpsr = (cpsr & ~0b11111) | user_level;
    9390:	e3c3301f 	bic	r3, r3, #31
    9394:	e3833010 	orr	r3, r3, #16
    asm volatile("msr cpsr, %0" :: "r"(cpsr));
    9398:	e129f003 	msr	CPSR_fc, r3
    939c:	e12fff1e 	bx	lr

000093a0 <rpi_reboot>:
}

void rpi_reboot(void) {
    93a0:	e92d4008 	push	{r3, lr}
    if(at_user_level()) {
    93a4:	ebfffff2 	bl	9374 <at_user_level>
    93a8:	e3500000 	cmp	r0, #0
    93ac:	0a000000 	beq	93b4 <rpi_reboot+0x14>
        set_user_level();
    93b0:	ebfffff5 	bl	938c <set_user_level>
        // of stuff.
        // assert(!at_user_level());
    }

    // gives uart time to flush: should just call flush directly.
    delay_ms(30);
    93b4:	e3a0001e 	mov	r0, #30
    93b8:	eb000022 	bl	9448 <delay_ms>
    const int PM_WDOG = 0x20100024;
    const int PM_PASSWORD = 0x5a000000;
    const int PM_RSTC_WRCFG_FULL_RESET = 0x00000020;

    // timeout = 1/16th of a second? (whatever)
    PUT32(PM_WDOG, PM_PASSWORD | 1);
    93bc:	e59f0014 	ldr	r0, [pc, #20]	; 93d8 <rpi_reboot+0x38>
    93c0:	e59f1014 	ldr	r1, [pc, #20]	; 93dc <rpi_reboot+0x3c>
    93c4:	eb000288 	bl	9dec <PUT32>
    PUT32(PM_RSTC, PM_PASSWORD | PM_RSTC_WRCFG_FULL_RESET);
    93c8:	e59f0010 	ldr	r0, [pc, #16]	; 93e0 <rpi_reboot+0x40>
    93cc:	e59f1010 	ldr	r1, [pc, #16]	; 93e4 <rpi_reboot+0x44>
    93d0:	eb000285 	bl	9dec <PUT32>
    93d4:	eafffffe 	b	93d4 <rpi_reboot+0x34>
    93d8:	20100024 	andscs	r0, r0, r4, lsr #32
    93dc:	5a000001 	bpl	93e8 <delay_cycles>
    93e0:	2010001c 	andscs	r0, r0, ip, lsl r0
    93e4:	5a000020 	bpl	946c <delay_sec+0x10>

000093e8 <delay_cycles>:
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    93e8:	ea000001 	b	93f4 <delay_cycles+0xc>
        asm("add r1, r1, #0");
    93ec:	e2811000 	add	r1, r1, #0
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    93f0:	e1a00003 	mov	r0, r3
    93f4:	e2403001 	sub	r3, r0, #1
    93f8:	e3500000 	cmp	r0, #0
    93fc:	1afffffa 	bne	93ec <delay_cycles+0x4>
        asm("add r1, r1, #0");
}
    9400:	e12fff1e 	bx	lr

00009404 <timer_get_usec_raw>:

// no dev barrier.
unsigned timer_get_usec_raw(void) {
    9404:	e92d4008 	push	{r3, lr}
    return GET32(0x20003004);
    9408:	e59f0004 	ldr	r0, [pc, #4]	; 9414 <timer_get_usec_raw+0x10>
    940c:	eb000282 	bl	9e1c <GET32>
}
    9410:	e8bd8008 	pop	{r3, pc}
    9414:	20003004 	andcs	r3, r0, r4

00009418 <timer_get_usec>:

// in usec
unsigned timer_get_usec(void) {
    9418:	e92d4008 	push	{r3, lr}
// comment these out for this lab (8) so student
// code does not get hit by weird timing issues.
//    dev_barrier();
    unsigned u = timer_get_usec_raw();
    941c:	ebfffff8 	bl	9404 <timer_get_usec_raw>
//    dev_barrier();
    return u;
}
    9420:	e8bd8008 	pop	{r3, pc}

00009424 <delay_us>:

void delay_us(unsigned us) {
    9424:	e92d4038 	push	{r3, r4, r5, lr}
    9428:	e1a05000 	mov	r5, r0
    unsigned rb = timer_get_usec();
    942c:	ebfffff9 	bl	9418 <timer_get_usec>
    9430:	e1a04000 	mov	r4, r0
    while (1) {
        unsigned ra = timer_get_usec();
    9434:	ebfffff7 	bl	9418 <timer_get_usec>
        if ((ra - rb) >= us) {
    9438:	e0640000 	rsb	r0, r4, r0
    943c:	e1500005 	cmp	r0, r5
    9440:	3afffffb 	bcc	9434 <delay_us+0x10>
            break;
        }
    }
}
    9444:	e8bd8038 	pop	{r3, r4, r5, pc}

00009448 <delay_ms>:
void delay_ms(unsigned ms) {
    9448:	e92d4008 	push	{r3, lr}
    delay_us(ms*1000);
    944c:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    9450:	e0000093 	mul	r0, r3, r0
    9454:	ebfffff2 	bl	9424 <delay_us>
    9458:	e8bd8008 	pop	{r3, pc}

0000945c <delay_sec>:
}
void delay_sec(unsigned sec) {
    945c:	e92d4008 	push	{r3, lr}
    delay_ms(sec*1000);
    9460:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    9464:	e0000093 	mul	r0, r3, r0
    9468:	ebfffff6 	bl	9448 <delay_ms>
    946c:	e8bd8008 	pop	{r3, pc}

00009470 <kmalloc>:
 *  - The returned pointer should always be 4-byte aligned.  
 *    Easiest way is to make sure the heap pointer starts 4-byte
 *    and you always round up the number of bytes.  Make sure
 *    you put an assertion in.  
 */
void *kmalloc(unsigned nbytes) {
    9470:	e92d4070 	push	{r4, r5, r6, lr}
    demand(init_p, calling before initialized);
    9474:	e59f3058 	ldr	r3, [pc, #88]	; 94d4 <kmalloc+0x64>
    9478:	e5933000 	ldr	r3, [r3]
    947c:	e3530000 	cmp	r3, #0
    9480:	1a000006 	bne	94a0 <kmalloc+0x30>
    9484:	ebfffe2f 	bl	8d48 <rpi_reset_putc>
    9488:	e59f0048 	ldr	r0, [pc, #72]	; 94d8 <kmalloc+0x68>
    948c:	e59f1048 	ldr	r1, [pc, #72]	; 94dc <kmalloc+0x6c>
    9490:	e59f2048 	ldr	r2, [pc, #72]	; 94e0 <kmalloc+0x70>
    9494:	e3a0301a 	mov	r3, #26
    9498:	ebfffe0f 	bl	8cdc <printk>
    949c:	ebffff7e 	bl	929c <clean_reboot>
    
    void* to_allocate = heap_ptr;
    94a0:	e59f402c 	ldr	r4, [pc, #44]	; 94d4 <kmalloc+0x64>
    94a4:	e5945004 	ldr	r5, [r4, #4]
    unsigned rounded_nbytes = roundup(nbytes, 8);
    94a8:	e2806007 	add	r6, r0, #7
    94ac:	e3c66007 	bic	r6, r6, #7
    memset(heap_ptr, 0, rounded_nbytes);
    94b0:	e1a00005 	mov	r0, r5
    94b4:	e3a01000 	mov	r1, #0
    94b8:	e1a02006 	mov	r2, r6
    94bc:	ebfffdfe 	bl	8cbc <memset>
    heap_ptr += rounded_nbytes;
    94c0:	e5943004 	ldr	r3, [r4, #4]
    94c4:	e0836006 	add	r6, r3, r6
    94c8:	e5846004 	str	r6, [r4, #4]
    //memset(heap_ptr, 0, rounded_nbytes);
    return to_allocate;

}
    94cc:	e1a00005 	mov	r0, r5
    94d0:	e8bd8070 	pop	{r4, r5, r6, pc}
    94d4:	0000b168 	andeq	fp, r0, r8, ror #2
    94d8:	0000aafc 	strdeq	sl, [r0], -ip
    94dc:	0000ab3c 	andeq	sl, r0, ip, lsr fp
    94e0:	0000aabc 			; <UNDEFINED> instruction: 0x0000aabc

000094e4 <kmalloc_aligned>:

// address of returned pointer should be a multiple of
// alignment.
void *kmalloc_aligned(unsigned nbytes, unsigned alignment) {
    94e4:	e92d4008 	push	{r3, lr}
    demand(init_p, calling before initialized);
    94e8:	e59f307c 	ldr	r3, [pc, #124]	; 956c <kmalloc_aligned+0x88>
    94ec:	e5933000 	ldr	r3, [r3]
    94f0:	e3530000 	cmp	r3, #0
    94f4:	1a000006 	bne	9514 <kmalloc_aligned+0x30>
    94f8:	ebfffe12 	bl	8d48 <rpi_reset_putc>
    94fc:	e59f006c 	ldr	r0, [pc, #108]	; 9570 <kmalloc_aligned+0x8c>
    9500:	e59f106c 	ldr	r1, [pc, #108]	; 9574 <kmalloc_aligned+0x90>
    9504:	e59f206c 	ldr	r2, [pc, #108]	; 9578 <kmalloc_aligned+0x94>
    9508:	e3a03028 	mov	r3, #40	; 0x28
    950c:	ebfffdf2 	bl	8cdc <printk>
    9510:	ebffff61 	bl	929c <clean_reboot>

    if(alignment <= 8)
    9514:	e3510008 	cmp	r1, #8
    9518:	8a000001 	bhi	9524 <kmalloc_aligned+0x40>
        return kmalloc(nbytes);
    951c:	ebffffd3 	bl	9470 <kmalloc>
    9520:	e8bd8008 	pop	{r3, pc}
    demand(alignment % 8 == 0, "weird alignment: not a multiple of 4!");
    9524:	e3110007 	tst	r1, #7
    9528:	0a000006 	beq	9548 <kmalloc_aligned+0x64>
    952c:	ebfffe05 	bl	8d48 <rpi_reset_putc>
    9530:	e59f0044 	ldr	r0, [pc, #68]	; 957c <kmalloc_aligned+0x98>
    9534:	e59f1038 	ldr	r1, [pc, #56]	; 9574 <kmalloc_aligned+0x90>
    9538:	e59f2038 	ldr	r2, [pc, #56]	; 9578 <kmalloc_aligned+0x94>
    953c:	e3a0302c 	mov	r3, #44	; 0x2c
    9540:	ebfffde5 	bl	8cdc <printk>
    9544:	ebffff54 	bl	929c <clean_reboot>
    unsigned aligned_heap_ptr = (unsigned) heap_ptr;
    9548:	e59f301c 	ldr	r3, [pc, #28]	; 956c <kmalloc_aligned+0x88>
    954c:	e5932004 	ldr	r2, [r3, #4]
	aligned_heap_ptr = roundup(aligned_heap_ptr, alignment);
    9550:	e0812002 	add	r2, r1, r2
    9554:	e2422001 	sub	r2, r2, #1
    9558:	e2611000 	rsb	r1, r1, #0
    955c:	e0021001 	and	r1, r2, r1
	heap_ptr = (void*) aligned_heap_ptr;
    9560:	e5831004 	str	r1, [r3, #4]

	return kmalloc(nbytes);
    9564:	ebffffc1 	bl	9470 <kmalloc>
}
    9568:	e8bd8008 	pop	{r3, pc}
    956c:	0000b168 	andeq	fp, r0, r8, ror #2
    9570:	0000aafc 	strdeq	sl, [r0], -ip
    9574:	0000ab3c 	andeq	sl, r0, ip, lsr fp
    9578:	0000aac4 	andeq	sl, r0, r4, asr #21
    957c:	0000ab50 	andeq	sl, r0, r0, asr fp

00009580 <kmalloc_init>:
 *    - should be just a few lines of code.
 *    - sets heap pointer to the location of 
 *      __heap_start__.   print this to make sure
 *      it makes sense!
 */
void kmalloc_init(void) {
    9580:	e92d4008 	push	{r3, lr}
    demand(!init_p, cannot initialize twice!\n);
    9584:	e59f303c 	ldr	r3, [pc, #60]	; 95c8 <kmalloc_init+0x48>
    9588:	e5933000 	ldr	r3, [r3]
    958c:	e3530000 	cmp	r3, #0
    9590:	0a000006 	beq	95b0 <kmalloc_init+0x30>
    9594:	ebfffdeb 	bl	8d48 <rpi_reset_putc>
    9598:	e59f002c 	ldr	r0, [pc, #44]	; 95cc <kmalloc_init+0x4c>
    959c:	e59f102c 	ldr	r1, [pc, #44]	; 95d0 <kmalloc_init+0x50>
    95a0:	e59f202c 	ldr	r2, [pc, #44]	; 95d4 <kmalloc_init+0x54>
    95a4:	e3a0303d 	mov	r3, #61	; 0x3d
    95a8:	ebfffdcb 	bl	8cdc <printk>
    95ac:	ebffff3a 	bl	929c <clean_reboot>
    init_p = 1;
    95b0:	e59f3010 	ldr	r3, [pc, #16]	; 95c8 <kmalloc_init+0x48>
    95b4:	e3a02001 	mov	r2, #1
    95b8:	e5832000 	str	r2, [r3]
    heap_ptr = &__heap_start__;
    95bc:	e59f2014 	ldr	r2, [pc, #20]	; 95d8 <kmalloc_init+0x58>
    95c0:	e5832004 	str	r2, [r3, #4]
    95c4:	e8bd8008 	pop	{r3, pc}
    95c8:	0000b168 	andeq	fp, r0, r8, ror #2
    95cc:	0000aba8 	andeq	sl, r0, r8, lsr #23
    95d0:	0000ab3c 	andeq	sl, r0, ip, lsr fp
    95d4:	0000aad4 	ldrdeq	sl, [r0], -r4
    95d8:	0000b170 	andeq	fp, r0, r0, ror r1

000095dc <kfree_all>:
/* 
 * free all allocated memory: reset the heap 
 * pointer back to the beginning.
 */
void kfree_all(void) {
    heap_ptr = &__heap_start__;
    95dc:	e59f2008 	ldr	r2, [pc, #8]	; 95ec <kfree_all+0x10>
    95e0:	e59f3008 	ldr	r3, [pc, #8]	; 95f0 <kfree_all+0x14>
    95e4:	e5832004 	str	r2, [r3, #4]
    95e8:	e12fff1e 	bx	lr
    95ec:	0000b170 	andeq	fp, r0, r0, ror r1
    95f0:	0000b168 	andeq	fp, r0, r8, ror #2

000095f4 <kmalloc_heap_ptr>:
// allocated block satisfies: 
//    assert(<addr> < kmalloc_heap_ptr());
// 
void *kmalloc_heap_ptr(void) {
    return (void*) heap_ptr;
}
    95f4:	e59f3004 	ldr	r3, [pc, #4]	; 9600 <kmalloc_heap_ptr+0xc>
    95f8:	e5930004 	ldr	r0, [r3, #4]
    95fc:	e12fff1e 	bx	lr
    9600:	0000b168 	andeq	fp, r0, r8, ror #2

00009604 <kmalloc_init_set_start>:

void kmalloc_init_set_start(unsigned start_address) {
    9604:	e92d4008 	push	{r3, lr}
    demand(!init_p, cannot initialize twice!\n);
    9608:	e59f3038 	ldr	r3, [pc, #56]	; 9648 <kmalloc_init_set_start+0x44>
    960c:	e5933000 	ldr	r3, [r3]
    9610:	e3530000 	cmp	r3, #0
    9614:	0a000006 	beq	9634 <kmalloc_init_set_start+0x30>
    9618:	ebfffdca 	bl	8d48 <rpi_reset_putc>
    961c:	e59f0028 	ldr	r0, [pc, #40]	; 964c <kmalloc_init_set_start+0x48>
    9620:	e59f1028 	ldr	r1, [pc, #40]	; 9650 <kmalloc_init_set_start+0x4c>
    9624:	e59f2028 	ldr	r2, [pc, #40]	; 9654 <kmalloc_init_set_start+0x50>
    9628:	e3a03054 	mov	r3, #84	; 0x54
    962c:	ebfffdaa 	bl	8cdc <printk>
    9630:	ebffff19 	bl	929c <clean_reboot>
    init_p = 1;
    9634:	e59f300c 	ldr	r3, [pc, #12]	; 9648 <kmalloc_init_set_start+0x44>
    9638:	e3a02001 	mov	r2, #1
    963c:	e5832000 	str	r2, [r3]
    heap_ptr = (void*) start_address;
    9640:	e5830004 	str	r0, [r3, #4]
    9644:	e8bd8008 	pop	{r3, pc}
    9648:	0000b168 	andeq	fp, r0, r8, ror #2
    964c:	0000aba8 	andeq	sl, r0, r8, lsr #23
    9650:	0000ab3c 	andeq	sl, r0, ip, lsr fp
    9654:	0000aae4 	andeq	sl, r0, r4, ror #21

00009658 <sw_uart_putc>:
 */ 
#include "rpi.h"
#include "sw-uart.h"
#include "cycle-util.h"

void sw_uart_putc(sw_uart_t *uart, unsigned char c) {
    9658:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    965c:	e1a07001 	mov	r7, r1
    // use local variables to minimize any loads or stores
    int tx = uart->tx;
    9660:	e5d06000 	ldrb	r6, [r0]
    uint32_t n = uart->cycle_per_bit,
    9664:	e5905008 	ldr	r5, [r0, #8]
             u = n,
             s = cycle_cnt_read();
    9668:	ee1f4f3c 	mrc	15, 0, r4, cr15, cr12, {1}
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    966c:	e1a00006 	mov	r0, r6
    9670:	e3a01000 	mov	r1, #0
    9674:	eb000284 	bl	a08c <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    9678:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    967c:	e0643003 	rsb	r3, r4, r3
    9680:	e1550003 	cmp	r5, r3
    9684:	8afffffb 	bhi	9678 <sw_uart_putc+0x20>
	
	// lower line (line idling)
	write_cyc_until(tx, 0, s, u);
	u += n; 
    9688:	e1a08085 	lsl	r8, r5, #1
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    968c:	e1a00006 	mov	r0, r6
    9690:	e2071001 	and	r1, r7, #1
    9694:	eb00027c 	bl	a08c <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    9698:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    969c:	e0643003 	rsb	r3, r4, r3
    96a0:	e1580003 	cmp	r8, r3
    96a4:	8afffffb 	bhi	9698 <sw_uart_putc+0x40>
	write_cyc_until(tx, c & 1, s, u);
	u += n; 
    96a8:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    96ac:	e1a00006 	mov	r0, r6
    96b0:	e2071002 	and	r1, r7, #2
    96b4:	eb000274 	bl	a08c <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    96b8:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    96bc:	e0643003 	rsb	r3, r4, r3
    96c0:	e1580003 	cmp	r8, r3
    96c4:	8afffffb 	bhi	96b8 <sw_uart_putc+0x60>
	write_cyc_until(tx, c & 2, s, u);
	u += n; 
    96c8:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    96cc:	e1a00006 	mov	r0, r6
    96d0:	e2071004 	and	r1, r7, #4
    96d4:	eb00026c 	bl	a08c <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    96d8:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    96dc:	e0643003 	rsb	r3, r4, r3
    96e0:	e1580003 	cmp	r8, r3
    96e4:	8afffffb 	bhi	96d8 <sw_uart_putc+0x80>
	write_cyc_until(tx, c & 4, s, u);
	u += n; 
    96e8:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    96ec:	e1a00006 	mov	r0, r6
    96f0:	e2071008 	and	r1, r7, #8
    96f4:	eb000264 	bl	a08c <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    96f8:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    96fc:	e0643003 	rsb	r3, r4, r3
    9700:	e1580003 	cmp	r8, r3
    9704:	8afffffb 	bhi	96f8 <sw_uart_putc+0xa0>
	write_cyc_until(tx, c & 8, s, u);
	u += n; 
    9708:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    970c:	e1a00006 	mov	r0, r6
    9710:	e2071010 	and	r1, r7, #16
    9714:	eb00025c 	bl	a08c <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    9718:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    971c:	e0643003 	rsb	r3, r4, r3
    9720:	e1580003 	cmp	r8, r3
    9724:	8afffffb 	bhi	9718 <sw_uart_putc+0xc0>
	write_cyc_until(tx, c & 16, s, u);
	u += n; 
    9728:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    972c:	e1a00006 	mov	r0, r6
    9730:	e2071020 	and	r1, r7, #32
    9734:	eb000254 	bl	a08c <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    9738:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    973c:	e0643003 	rsb	r3, r4, r3
    9740:	e1580003 	cmp	r8, r3
    9744:	8afffffb 	bhi	9738 <sw_uart_putc+0xe0>
	write_cyc_until(tx, c & 32, s, u);
	u += n; 
    9748:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    974c:	e1a00006 	mov	r0, r6
    9750:	e2071040 	and	r1, r7, #64	; 0x40
    9754:	eb00024c 	bl	a08c <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    9758:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    975c:	e0643003 	rsb	r3, r4, r3
    9760:	e1580003 	cmp	r8, r3
    9764:	8afffffb 	bhi	9758 <sw_uart_putc+0x100>
	write_cyc_until(tx, c & 64, s, u);
	u += n;
    9768:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    976c:	e1a00006 	mov	r0, r6
    9770:	e2071080 	and	r1, r7, #128	; 0x80
    9774:	eb000244 	bl	a08c <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    9778:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    977c:	e0643003 	rsb	r3, r4, r3
    9780:	e1580003 	cmp	r8, r3
    9784:	8afffffb 	bhi	9778 <sw_uart_putc+0x120>
	write_cyc_until(tx, c & 128, s, u);
	u += n; 
    9788:	e0885005 	add	r5, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    978c:	e1a00006 	mov	r0, r6
    9790:	e3a01001 	mov	r1, #1
    9794:	eb00023c 	bl	a08c <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    9798:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    979c:	e0643003 	rsb	r3, r4, r3
    97a0:	e1550003 	cmp	r5, r3
    97a4:	8afffffb 	bhi	9798 <sw_uart_putc+0x140>
	write_cyc_until(tx, 1, s, u);
}
    97a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000097ac <sw_uart_getc_timeout>:
}

// do this second: you can type in pi-cat to send stuff.
//      EASY BUG: if you are reading input, but you do not get here in 
//      time it will disappear.
int sw_uart_getc_timeout(sw_uart_t *uart, int timeout_usec) {
    97ac:	e92d43f8 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
    97b0:	e1a09000 	mov	r9, r0
   int rx = uart->rx;
    97b4:	e5d07001 	ldrb	r7, [r0, #1]
    97b8:	e1a05007 	mov	r5, r7

    // get start bit: timeout_usec=0 implies you return right away.
    while(!wait_until_usec(rx, 0, timeout_usec))
    97bc:	e1a06001 	mov	r6, r1
	write_cyc_until(tx, 1, s, u);
}

// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    97c0:	ebffff0f 	bl	9404 <timer_get_usec_raw>
    97c4:	e1a04000 	mov	r4, r0
    while(1) {
        if(gpio_read(rx) == v)
    97c8:	e1a00005 	mov	r0, r5
    97cc:	eb00021b 	bl	a040 <gpio_read>
    97d0:	e3500000 	cmp	r0, #0
    97d4:	0a000005 	beq	97f0 <sw_uart_getc_timeout+0x44>
            return 1;
        if(timer_get_usec_raw() - start > timeout_usec)
    97d8:	ebffff09 	bl	9404 <timer_get_usec_raw>
    97dc:	e0640000 	rsb	r0, r4, r0
    97e0:	e1560000 	cmp	r6, r0
    97e4:	2afffff7 	bcs	97c8 <sw_uart_getc_timeout+0x1c>
            return 0;
    97e8:	e3a03000 	mov	r3, #0
    97ec:	ea000000 	b	97f4 <sw_uart_getc_timeout+0x48>
// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    while(1) {
        if(gpio_read(rx) == v)
            return 1;
    97f0:	e3a03001 	mov	r3, #1
//      time it will disappear.
int sw_uart_getc_timeout(sw_uart_t *uart, int timeout_usec) {
   int rx = uart->rx;

    // get start bit: timeout_usec=0 implies you return right away.
    while(!wait_until_usec(rx, 0, timeout_usec))
    97f4:	e3530000 	cmp	r3, #0
    97f8:	0a000059 	beq	9964 <sw_uart_getc_timeout+0x1b8>
        return -1;

    // do this first so we have a tighter bound (maybe)
    unsigned s = cycle_cnt_read();  // subtract off slop?
    97fc:	ee1f8f3c 	mrc	15, 0, r8, cr15, cr12, {1}

    // store these in locals to minimize load stores later.
    uint32_t u = uart->cycle_per_bit;
    9800:	e5994008 	ldr	r4, [r9, #8]
    unsigned n = u/2;
    unsigned c = 0;

    // wait one period + 1/2 to get in the middle of the next read.
    delay_ncycles(s, n + 1*u);
    9804:	e08420a4 	add	r2, r4, r4, lsr #1
    9808:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    980c:	e0683003 	rsb	r3, r8, r3
    9810:	e1520003 	cmp	r2, r3
    9814:	8afffffb 	bhi	9808 <sw_uart_getc_timeout+0x5c>
	
	s += u;
    9818:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx);
    981c:	e1a00007 	mov	r0, r7
    9820:	eb000206 	bl	a040 <gpio_read>
    9824:	e1a09750 	asr	r9, r0, r7
    9828:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    982c:	e0683003 	rsb	r3, r8, r3
    9830:	e1540003 	cmp	r4, r3
    9834:	8afffffb 	bhi	9828 <sw_uart_getc_timeout+0x7c>
    delay_ncycles(s, u);
	s += u; 
    9838:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 1;
    983c:	e1a00007 	mov	r0, r7
    9840:	eb0001fe 	bl	a040 <gpio_read>
    9844:	e1a00750 	asr	r0, r0, r7
    9848:	e1899080 	orr	r9, r9, r0, lsl #1
    984c:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    9850:	e0683003 	rsb	r3, r8, r3
    9854:	e1540003 	cmp	r4, r3
    9858:	8afffffb 	bhi	984c <sw_uart_getc_timeout+0xa0>
    delay_ncycles(s, u);
	s += u;
    985c:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 2;
    9860:	e1a00007 	mov	r0, r7
    9864:	eb0001f5 	bl	a040 <gpio_read>
    9868:	e1a00750 	asr	r0, r0, r7
    986c:	e1899100 	orr	r9, r9, r0, lsl #2
    9870:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    9874:	e0683003 	rsb	r3, r8, r3
    9878:	e1540003 	cmp	r4, r3
    987c:	8afffffb 	bhi	9870 <sw_uart_getc_timeout+0xc4>
    delay_ncycles(s, u);
	s += u;
    9880:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 3;
    9884:	e1a00007 	mov	r0, r7
    9888:	eb0001ec 	bl	a040 <gpio_read>
    988c:	e1a00750 	asr	r0, r0, r7
    9890:	e1899180 	orr	r9, r9, r0, lsl #3
    9894:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    9898:	e0683003 	rsb	r3, r8, r3
    989c:	e1540003 	cmp	r4, r3
    98a0:	8afffffb 	bhi	9894 <sw_uart_getc_timeout+0xe8>
    delay_ncycles(s, u);
	s += u;
    98a4:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 4;
    98a8:	e1a00007 	mov	r0, r7
    98ac:	eb0001e3 	bl	a040 <gpio_read>
    98b0:	e1a00750 	asr	r0, r0, r7
    98b4:	e1899200 	orr	r9, r9, r0, lsl #4
    98b8:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    98bc:	e0683003 	rsb	r3, r8, r3
    98c0:	e1540003 	cmp	r4, r3
    98c4:	8afffffb 	bhi	98b8 <sw_uart_getc_timeout+0x10c>
    delay_ncycles(s, u);
	s += u;
    98c8:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 5;
    98cc:	e1a00007 	mov	r0, r7
    98d0:	eb0001da 	bl	a040 <gpio_read>
    98d4:	e1a00750 	asr	r0, r0, r7
    98d8:	e1899280 	orr	r9, r9, r0, lsl #5
    98dc:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    98e0:	e0683003 	rsb	r3, r8, r3
    98e4:	e1540003 	cmp	r4, r3
    98e8:	8afffffb 	bhi	98dc <sw_uart_getc_timeout+0x130>
    delay_ncycles(s, u);
	s += u;
    98ec:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 6;
    98f0:	e1a00007 	mov	r0, r7
    98f4:	eb0001d1 	bl	a040 <gpio_read>
    98f8:	e1a00750 	asr	r0, r0, r7
    98fc:	e1899300 	orr	r9, r9, r0, lsl #6
    9900:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    9904:	e0683003 	rsb	r3, r8, r3
    9908:	e1540003 	cmp	r4, r3
    990c:	8afffffb 	bhi	9900 <sw_uart_getc_timeout+0x154>
    delay_ncycles(s, u);
	s += u;
    c |= (gpio_read(rx) >> rx) << 7;
    9910:	e1a00007 	mov	r0, r7
    9914:	eb0001c9 	bl	a040 <gpio_read>
    9918:	e1a00750 	asr	r0, r0, r7
    991c:	e1899380 	orr	r9, r9, r0, lsl #7
	write_cyc_until(tx, 1, s, u);
}

// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    9920:	ebfffeb7 	bl	9404 <timer_get_usec_raw>
    9924:	e1a04000 	mov	r4, r0
    while(1) {
        if(gpio_read(rx) == v)
    9928:	e1a00005 	mov	r0, r5
    992c:	eb0001c3 	bl	a040 <gpio_read>
    9930:	e3500000 	cmp	r0, #0
    9934:	0a000005 	beq	9950 <sw_uart_getc_timeout+0x1a4>
            return 1;
        if(timer_get_usec_raw() - start > timeout_usec)
    9938:	ebfffeb1 	bl	9404 <timer_get_usec_raw>
    993c:	e0640000 	rsb	r0, r4, r0
    9940:	e1560000 	cmp	r6, r0
    9944:	2afffff7 	bcs	9928 <sw_uart_getc_timeout+0x17c>
            return 0;
    9948:	e3a03000 	mov	r3, #0
    994c:	ea000000 	b	9954 <sw_uart_getc_timeout+0x1a8>
// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    while(1) {
        if(gpio_read(rx) == v)
            return 1;
    9950:	e3a03001 	mov	r3, #1
    c |= (gpio_read(rx) >> rx) << 7;
    //delay_ncycles(s, u);
	//s += u;
    
	// make sure you wait for a stop bit: otherwise the next read may fail.
    while(!wait_until_usec(rx, 0, timeout_usec))
    9954:	e3530000 	cmp	r3, #0
    9958:	0a000003 	beq	996c <sw_uart_getc_timeout+0x1c0>
        return -1;
	// delay_ncycles(s, n);

    return (int)c;
    995c:	e1a00009 	mov	r0, r9
    9960:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
int sw_uart_getc_timeout(sw_uart_t *uart, int timeout_usec) {
   int rx = uart->rx;

    // get start bit: timeout_usec=0 implies you return right away.
    while(!wait_until_usec(rx, 0, timeout_usec))
        return -1;
    9964:	e3e00000 	mvn	r0, #0
    9968:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
    //delay_ncycles(s, u);
	//s += u;
    
	// make sure you wait for a stop bit: otherwise the next read may fail.
    while(!wait_until_usec(rx, 0, timeout_usec))
        return -1;
    996c:	e3e00000 	mvn	r0, #0
	// delay_ncycles(s, n);

    return (int)c;
}
    9970:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}

00009974 <sw_uart_gets_until>:


// read characters using <sw_uart_getc()> until:
//       <sw_uart_getc() == <end>>
// returns -nbytes read if timeout (could be 0).
int sw_uart_gets_until(sw_uart_t *u, uint8_t *buf, uint32_t nbytes, uint8_t end, uint32_t usec_timeout) {
    9974:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9978:	e1a08000 	mov	r8, r0
    997c:	e1a06001 	mov	r6, r1
    9980:	e1a09003 	mov	r9, r3
    9984:	e59da020 	ldr	sl, [sp, #32]
    assert(nbytes>0);
    9988:	e3520000 	cmp	r2, #0
    998c:	1a000006 	bne	99ac <sw_uart_gets_until+0x38>
    9990:	ebfffcec 	bl	8d48 <rpi_reset_putc>
    9994:	e59f005c 	ldr	r0, [pc, #92]	; 99f8 <sw_uart_gets_until+0x84>
    9998:	e59f105c 	ldr	r1, [pc, #92]	; 99fc <sw_uart_gets_until+0x88>
    999c:	e59f205c 	ldr	r2, [pc, #92]	; 9a00 <sw_uart_gets_until+0x8c>
    99a0:	e3a0306d 	mov	r3, #109	; 0x6d
    99a4:	ebfffccc 	bl	8cdc <printk>
    99a8:	ebfffe3b 	bl	929c <clean_reboot>
    buf[0] = 0;
    99ac:	e3a04000 	mov	r4, #0
    99b0:	e5c14000 	strb	r4, [r1]

    int i;
	uint8_t char_in;
    for(i = 0; i < nbytes-1; i++) {
    99b4:	e2427001 	sub	r7, r2, #1
    99b8:	ea000007 	b	99dc <sw_uart_gets_until+0x68>
        if((char_in = (uint8_t)sw_uart_getc_timeout(u, usec_timeout)) != end) {
    99bc:	e1a00008 	mov	r0, r8
    99c0:	e1a0100a 	mov	r1, sl
    99c4:	ebffff78 	bl	97ac <sw_uart_getc_timeout>
    99c8:	e6ef0070 	uxtb	r0, r0
    99cc:	e1500009 	cmp	r0, r9
    99d0:	0a000004 	beq	99e8 <sw_uart_gets_until+0x74>
			buf[i] = char_in;
    99d4:	e7c60005 	strb	r0, [r6, r5]
    assert(nbytes>0);
    buf[0] = 0;

    int i;
	uint8_t char_in;
    for(i = 0; i < nbytes-1; i++) {
    99d8:	e2844001 	add	r4, r4, #1
    99dc:	e1a05004 	mov	r5, r4
    99e0:	e1540007 	cmp	r4, r7
    99e4:	3afffff4 	bcc	99bc <sw_uart_gets_until+0x48>
			buf[i] = char_in;
		} else {
			break;
		}
    }
    buf[i] = 0;
    99e8:	e3a03000 	mov	r3, #0
    99ec:	e7c63005 	strb	r3, [r6, r5]
    return i;
}
    99f0:	e1a00004 	mov	r0, r4
    99f4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    99f8:	0000ac60 	andeq	sl, r0, r0, ror #24
    99fc:	0000ac7c 	andeq	sl, r0, ip, ror ip
    9a00:	0000abe8 	andeq	sl, r0, r8, ror #23

00009a04 <sw_uart_gets_timeout>:

// read characters using <sw_uart_getc()> until:
//      we do not receive any characters for <timeout> usec.
// make sure to 0 terminate!
int sw_uart_gets_timeout(sw_uart_t *u, uint8_t *buf, 
                    uint32_t nbytes, uint32_t usec_timeout) {
    9a04:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9a08:	e1a07000 	mov	r7, r0
    9a0c:	e1a05001 	mov	r5, r1
    9a10:	e1a08003 	mov	r8, r3

    assert(nbytes>0);
    9a14:	e3520000 	cmp	r2, #0
    9a18:	1a000006 	bne	9a38 <sw_uart_gets_timeout+0x34>
    9a1c:	ebfffcc9 	bl	8d48 <rpi_reset_putc>
    9a20:	e59f004c 	ldr	r0, [pc, #76]	; 9a74 <sw_uart_gets_timeout+0x70>
    9a24:	e59f104c 	ldr	r1, [pc, #76]	; 9a78 <sw_uart_gets_timeout+0x74>
    9a28:	e59f204c 	ldr	r2, [pc, #76]	; 9a7c <sw_uart_gets_timeout+0x78>
    9a2c:	e3a03083 	mov	r3, #131	; 0x83
    9a30:	ebfffca9 	bl	8cdc <printk>
    9a34:	ebfffe18 	bl	929c <clean_reboot>
    buf[0] = 0;
    9a38:	e3a04000 	mov	r4, #0
    9a3c:	e5c14000 	strb	r4, [r1]

    int i;
    for(i = 0; i < nbytes-1; i++) {
    9a40:	e2426001 	sub	r6, r2, #1
    9a44:	ea000004 	b	9a5c <sw_uart_gets_timeout+0x58>
        buf[i] = (uint8_t) sw_uart_getc_timeout(u, usec_timeout);
    9a48:	e1a00007 	mov	r0, r7
    9a4c:	e1a01008 	mov	r1, r8
    9a50:	ebffff55 	bl	97ac <sw_uart_getc_timeout>
    9a54:	e7c50004 	strb	r0, [r5, r4]

    assert(nbytes>0);
    buf[0] = 0;

    int i;
    for(i = 0; i < nbytes-1; i++) {
    9a58:	e2844001 	add	r4, r4, #1
    9a5c:	e1540006 	cmp	r4, r6
    9a60:	3afffff8 	bcc	9a48 <sw_uart_gets_timeout+0x44>
        buf[i] = (uint8_t) sw_uart_getc_timeout(u, usec_timeout);
    }
    buf[i] = 0;
    9a64:	e3a03000 	mov	r3, #0
    9a68:	e7c53004 	strb	r3, [r5, r4]
    return i;
}
    9a6c:	e1a00004 	mov	r0, r4
    9a70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9a74:	0000ac60 	andeq	sl, r0, r0, ror #24
    9a78:	0000ac7c 	andeq	sl, r0, ip, ror ip
    9a7c:	0000abfc 	strdeq	sl, [r0], -ip

00009a80 <sw_uart_init_helper>:
/**************************************************************************
 * this code is implemented for you
 */

sw_uart_t 
sw_uart_init_helper(uint8_t tx, uint8_t rx, uint32_t baud, uint32_t cyc_per_bit) {
    9a80:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9a84:	e1a04000 	mov	r4, r0
    9a88:	e1a06001 	mov	r6, r1
    9a8c:	e1a08002 	mov	r8, r2
    9a90:	e1a05003 	mov	r5, r3
    9a94:	e59d7018 	ldr	r7, [sp, #24]
    // maybe enable the cache?  don't think will work otherwise.
    gpio_set_output(tx);
    9a98:	e1a00001 	mov	r0, r1
    9a9c:	eb0000e3 	bl	9e30 <gpio_set_output>
    gpio_set_input(rx);
    9aa0:	e1a00008 	mov	r0, r8
    9aa4:	eb000132 	bl	9f74 <gpio_set_input>
    cycle_cnt_init();       
    9aa8:	e3a03001 	mov	r3, #1
    9aac:	ee0f3f1c 	mcr	15, 0, r3, cr15, cr12, {0}
	gpio_write(tx, 1);
    9ab0:	e1a00006 	mov	r0, r6
    9ab4:	e3a01001 	mov	r1, #1
    9ab8:	eb000173 	bl	a08c <gpio_write>

    // make sure it makes sense.
    unsigned mhz = 700 * 1000 * 1000;
    unsigned derived = cyc_per_bit * baud;
    9abc:	e0020795 	mul	r2, r5, r7
    assert((mhz - baud) <= derived && derived <= (mhz + baud));
    9ac0:	e59f3068 	ldr	r3, [pc, #104]	; 9b30 <sw_uart_init_helper+0xb0>
    9ac4:	e0653003 	rsb	r3, r5, r3
    9ac8:	e1530002 	cmp	r3, r2
    9acc:	8a000005 	bhi	9ae8 <sw_uart_init_helper+0x68>
    9ad0:	e59f3058 	ldr	r3, [pc, #88]	; 9b30 <sw_uart_init_helper+0xb0>
    9ad4:	e0853003 	add	r3, r5, r3
    9ad8:	e1530002 	cmp	r3, r2
    9adc:	2a000003 	bcs	9af0 <sw_uart_init_helper+0x70>
    9ae0:	e3a03000 	mov	r3, #0
    9ae4:	ea000002 	b	9af4 <sw_uart_init_helper+0x74>
    9ae8:	e3a03000 	mov	r3, #0
    9aec:	ea000000 	b	9af4 <sw_uart_init_helper+0x74>
    9af0:	e3a03001 	mov	r3, #1
    9af4:	e3530000 	cmp	r3, #0
    9af8:	1a000006 	bne	9b18 <sw_uart_init_helper+0x98>
    9afc:	ebfffc91 	bl	8d48 <rpi_reset_putc>
    9b00:	e59f002c 	ldr	r0, [pc, #44]	; 9b34 <sw_uart_init_helper+0xb4>
    9b04:	e59f102c 	ldr	r1, [pc, #44]	; 9b38 <sw_uart_init_helper+0xb8>
    9b08:	e59f202c 	ldr	r2, [pc, #44]	; 9b3c <sw_uart_init_helper+0xbc>
    9b0c:	e3a0309d 	mov	r3, #157	; 0x9d
    9b10:	ebfffc71 	bl	8cdc <printk>
    9b14:	ebfffde0 	bl	929c <clean_reboot>
    // panic("cyc_per_bit = %d * baud = %d\n", cyc_per_bit, cyc_per_bit * baud);

    return (sw_uart_t) { 
    9b18:	e5c46000 	strb	r6, [r4]
    9b1c:	e5c48001 	strb	r8, [r4, #1]
    9b20:	e5845004 	str	r5, [r4, #4]
    9b24:	e5847008 	str	r7, [r4, #8]
            .tx = tx, 
            .rx = rx, 
            .baud = baud, 
            .cycle_per_bit = cyc_per_bit 
    };
}
    9b28:	e1a00004 	mov	r0, r4
    9b2c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9b30:	29b92700 	ldmibcs	r9!, {r8, r9, sl, sp}
    9b34:	0000ac90 	muleq	r0, r0, ip
    9b38:	0000ac7c 	andeq	sl, r0, ip, ror ip
    9b3c:	0000ac14 	andeq	sl, r0, r4, lsl ip

00009b40 <sw_uart_getc>:

// blocking read.
int sw_uart_getc(sw_uart_t *uart) {
    9b40:	e92d4008 	push	{r3, lr}
    int res = sw_uart_getc_timeout(uart, ~0);
    9b44:	e3e01000 	mvn	r1, #0
    9b48:	ebffff17 	bl	97ac <sw_uart_getc_timeout>
    if(res < 0)
    9b4c:	e3500000 	cmp	r0, #0
    9b50:	a8bd8008 	popge	{r3, pc}
        panic("impossible: have an infinite timeout!\n");
    9b54:	ebfffc7b 	bl	8d48 <rpi_reset_putc>
    9b58:	e59f0010 	ldr	r0, [pc, #16]	; 9b70 <sw_uart_getc+0x30>
    9b5c:	e59f1010 	ldr	r1, [pc, #16]	; 9b74 <sw_uart_getc+0x34>
    9b60:	e59f2010 	ldr	r2, [pc, #16]	; 9b78 <sw_uart_getc+0x38>
    9b64:	e3a030ac 	mov	r3, #172	; 0xac
    9b68:	ebfffc5b 	bl	8cdc <printk>
    9b6c:	ebfffdca 	bl	929c <clean_reboot>
    9b70:	0000acd4 	ldrdeq	sl, [r0], -r4
    9b74:	0000ac7c 	andeq	sl, r0, ip, ror ip
    9b78:	0000ac28 	andeq	sl, r0, r8, lsr #24

00009b7c <sw_uart_putk>:
    return res;
}

void sw_uart_putk(sw_uart_t *uart, const char *msg) {
    9b7c:	e92d4038 	push	{r3, r4, r5, lr}
    9b80:	e1a05000 	mov	r5, r0
    9b84:	e1a04001 	mov	r4, r1
    for(; *msg; msg++)
    9b88:	ea000002 	b	9b98 <sw_uart_putk+0x1c>
        sw_uart_putc(uart, *msg);
    9b8c:	e1a00005 	mov	r0, r5
    9b90:	ebfffeb0 	bl	9658 <sw_uart_putc>
        panic("impossible: have an infinite timeout!\n");
    return res;
}

void sw_uart_putk(sw_uart_t *uart, const char *msg) {
    for(; *msg; msg++)
    9b94:	e2844001 	add	r4, r4, #1
    9b98:	e5d41000 	ldrb	r1, [r4]
    9b9c:	e3510000 	cmp	r1, #0
    9ba0:	1afffff9 	bne	9b8c <sw_uart_putk+0x10>
        sw_uart_putc(uart, *msg);
}
    9ba4:	e8bd8038 	pop	{r3, r4, r5, pc}

00009ba8 <sw_uart_printk>:

// don't pollute the rest of the code with all the stuff in the 
// <stdarg.h> header.
#include <stdarg.h>
#include "libc/va-printk.h"
int sw_uart_printk(sw_uart_t *uart, const char *fmt, ...) {
    9ba8:	e92d000e 	push	{r1, r2, r3}
    9bac:	e92d4030 	push	{r4, r5, lr}
    9bb0:	e24dde1d 	sub	sp, sp, #464	; 0x1d0
    9bb4:	e1a05000 	mov	r5, r0
    char buf[460];

    va_list args;
    va_start(args, fmt);
    9bb8:	e28d3e1e 	add	r3, sp, #480	; 0x1e0
    9bbc:	e58d3000 	str	r3, [sp]
        int sz = va_printk(buf, sizeof buf, fmt, args);
    9bc0:	e28d0004 	add	r0, sp, #4
    9bc4:	e3a01f73 	mov	r1, #460	; 0x1cc
    9bc8:	e59d21dc 	ldr	r2, [sp, #476]	; 0x1dc
    9bcc:	ebfffd10 	bl	9014 <va_printk>
    9bd0:	e1a04000 	mov	r4, r0
    va_end(args);
    assert(sz < sizeof buf-1);
    9bd4:	e59f3040 	ldr	r3, [pc, #64]	; 9c1c <sw_uart_printk+0x74>
    9bd8:	e1500003 	cmp	r0, r3
    9bdc:	9a000006 	bls	9bfc <sw_uart_printk+0x54>
    9be0:	ebfffc58 	bl	8d48 <rpi_reset_putc>
    9be4:	e59f0034 	ldr	r0, [pc, #52]	; 9c20 <sw_uart_printk+0x78>
    9be8:	e59f1034 	ldr	r1, [pc, #52]	; 9c24 <sw_uart_printk+0x7c>
    9bec:	e59f2034 	ldr	r2, [pc, #52]	; 9c28 <sw_uart_printk+0x80>
    9bf0:	e3a030c0 	mov	r3, #192	; 0xc0
    9bf4:	ebfffc38 	bl	8cdc <printk>
    9bf8:	ebfffda7 	bl	929c <clean_reboot>
    sw_uart_putk(uart,buf);
    9bfc:	e1a00005 	mov	r0, r5
    9c00:	e28d1004 	add	r1, sp, #4
    9c04:	ebffffdc 	bl	9b7c <sw_uart_putk>
    return sz;
}
    9c08:	e1a00004 	mov	r0, r4
    9c0c:	e28dde1d 	add	sp, sp, #464	; 0x1d0
    9c10:	e8bd4030 	pop	{r4, r5, lr}
    9c14:	e28dd00c 	add	sp, sp, #12
    9c18:	e12fff1e 	bx	lr
    9c1c:	000001ca 	andeq	r0, r0, sl, asr #3
    9c20:	0000ad0c 	andeq	sl, r0, ip, lsl #26
    9c24:	0000ac7c 	andeq	sl, r0, ip, ror ip
    9c28:	0000ac38 	andeq	sl, r0, r8, lsr ip

00009c2c <sw_uart_gets_until_blk>:

int sw_uart_gets_until_blk(sw_uart_t *u, uint8_t *buf, uint32_t nbytes, uint8_t end) {
    9c2c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9c30:	e24dd00c 	sub	sp, sp, #12
    int res = sw_uart_gets_until(u, buf, nbytes, end, ~0);
    9c34:	e3e0c000 	mvn	ip, #0
    9c38:	e58dc000 	str	ip, [sp]
    9c3c:	ebffff4c 	bl	9974 <sw_uart_gets_until>
    if(res < 0)
    9c40:	e3500000 	cmp	r0, #0
    9c44:	aa000006 	bge	9c64 <sw_uart_gets_until_blk+0x38>
        panic("impossible: have an infinite timeout!\n");
    9c48:	ebfffc3e 	bl	8d48 <rpi_reset_putc>
    9c4c:	e59f0018 	ldr	r0, [pc, #24]	; 9c6c <sw_uart_gets_until_blk+0x40>
    9c50:	e59f1018 	ldr	r1, [pc, #24]	; 9c70 <sw_uart_gets_until_blk+0x44>
    9c54:	e59f2018 	ldr	r2, [pc, #24]	; 9c74 <sw_uart_gets_until_blk+0x48>
    9c58:	e3a030c8 	mov	r3, #200	; 0xc8
    9c5c:	ebfffc1e 	bl	8cdc <printk>
    9c60:	ebfffd8d 	bl	929c <clean_reboot>
    return res;
}
    9c64:	e28dd00c 	add	sp, sp, #12
    9c68:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9c6c:	0000acd4 	ldrdeq	sl, [r0], -r4
    9c70:	0000ac7c 	andeq	sl, r0, ip, ror ip
    9c74:	0000ac48 	andeq	sl, r0, r8, asr #24

00009c78 <uart_init>:
#define RX_READY 0x1
#define TX_READY 0x10
#define TX_EMPTY 0x20

// note: if you need memory barriers, use <dev_barrier()>
void uart_init(void) {
    9c78:	e92d4038 	push	{r3, r4, r5, lr}
    
	dev_barrier();
    9c7c:	eb000052 	bl	9dcc <dev_barrier>

	// set GPIO 14 and 15 to alternate function 0
    //volatile unsigned* gpio_reg = (void*) 0x20200004;
    //unsigned bitmask = get32(gpio_reg);
    gpio_set_function(14, GPIO_FUNC_ALT5);
    9c80:	e3a0000e 	mov	r0, #14
    9c84:	e3a01002 	mov	r1, #2
    9c88:	eb000108 	bl	a0b0 <gpio_set_function>
	gpio_set_function(15, GPIO_FUNC_ALT5);
    9c8c:	e3a0000f 	mov	r0, #15
    9c90:	e3a01002 	mov	r1, #2
    9c94:	eb000105 	bl	a0b0 <gpio_set_function>
    //bitmask &= ~(0b111 << ((UART0_RX % 10) * 3));
    //bitmask |= (0b010 << ((UART0_TX % 10) * 3));
    //bitmask |= (0b010 << ((UART0_RX % 10) * 3));
    //put32(gpio_reg, bitmask);

	dev_barrier();
    9c98:	eb00004b 	bl	9dcc <dev_barrier>

    put32(AUX_ENABLES, get32(AUX_ENABLES) | (ENABLE_UART));
    9c9c:	e59f4068 	ldr	r4, [pc, #104]	; 9d0c <uart_init+0x94>
    9ca0:	e5945000 	ldr	r5, [r4]
    9ca4:	e1a00005 	mov	r0, r5
    9ca8:	eb000059 	bl	9e14 <get32>
    9cac:	e3801001 	orr	r1, r0, #1
    9cb0:	e1a00005 	mov	r0, r5
    9cb4:	eb00004a 	bl	9de4 <put32>
	
	dev_barrier();
    9cb8:	eb000043 	bl	9dcc <dev_barrier>
	
    put32(AUX_MU_CNTL_REG, 0x0);
    9cbc:	e5940004 	ldr	r0, [r4, #4]
    9cc0:	e3a01000 	mov	r1, #0
    9cc4:	eb000046 	bl	9de4 <put32>
    put32(AUX_MU_IER_REG, 0x0);
    9cc8:	e5940008 	ldr	r0, [r4, #8]
    9ccc:	e3a01000 	mov	r1, #0
    9cd0:	eb000043 	bl	9de4 <put32>
    put32(AUX_MU_IIR_REG, CLEAR_RX_FIFO | CLEAR_TX_FIFO);
    9cd4:	e594000c 	ldr	r0, [r4, #12]
    9cd8:	e3a01006 	mov	r1, #6
    9cdc:	eb000040 	bl	9de4 <put32>
	put32(AUX_MU_LCR_REG, ENABLE_8BIT_MODE);
    9ce0:	e5940010 	ldr	r0, [r4, #16]
    9ce4:	e3a01003 	mov	r1, #3
    9ce8:	eb00003d 	bl	9de4 <put32>
    put32(AUX_MU_BAUD_REG, BAUD_115200);
    9cec:	e5940014 	ldr	r0, [r4, #20]
    9cf0:	e59f1018 	ldr	r1, [pc, #24]	; 9d10 <uart_init+0x98>
    9cf4:	eb00003a 	bl	9de4 <put32>
    put32(AUX_MU_CNTL_REG, ENABLE_TXER | ENABLE_RXER);
    9cf8:	e5940004 	ldr	r0, [r4, #4]
    9cfc:	e3a01003 	mov	r1, #3
    9d00:	eb000037 	bl	9de4 <put32>

	dev_barrier();
    9d04:	eb000030 	bl	9dcc <dev_barrier>
    9d08:	e8bd8038 	pop	{r3, r4, r5, pc}
    9d0c:	0000a3f4 	strdeq	sl, [r0], -r4
    9d10:	0000010e 	andeq	r0, r0, lr, lsl #2

00009d14 <uart_can_getc>:
}

// 1 = at least one byte on rx queue, 0 otherwise
int uart_can_getc(void) {
    9d14:	e92d4008 	push	{r3, lr}
    return get32(AUX_MU_LSR_REG) & RX_READY;
    9d18:	e59f300c 	ldr	r3, [pc, #12]	; 9d2c <uart_can_getc+0x18>
    9d1c:	e5930018 	ldr	r0, [r3, #24]
    9d20:	eb00003b 	bl	9e14 <get32>
}
    9d24:	e2000001 	and	r0, r0, #1
    9d28:	e8bd8008 	pop	{r3, pc}
    9d2c:	0000a3f4 	strdeq	sl, [r0], -r4

00009d30 <uart_getc>:

// returns one byte from the rx queue, if needed
// blocks until there is one.
int uart_getc(void) {
    9d30:	e92d4008 	push	{r3, lr}
    while(1)
        if(uart_can_getc())  break;
    9d34:	ebfffff6 	bl	9d14 <uart_can_getc>
    9d38:	e3500000 	cmp	r0, #0
    9d3c:	0afffffc 	beq	9d34 <uart_getc+0x4>
    return get32(AUX_MU_IO_REG) & 0xFF;
    9d40:	e59f300c 	ldr	r3, [pc, #12]	; 9d54 <uart_getc+0x24>
    9d44:	e593001c 	ldr	r0, [r3, #28]
    9d48:	eb000031 	bl	9e14 <get32>
}
    9d4c:	e6ef0070 	uxtb	r0, r0
    9d50:	e8bd8008 	pop	{r3, pc}
    9d54:	0000a3f4 	strdeq	sl, [r0], -r4

00009d58 <uart_can_putc>:

// 1 = space to put at least one byte, 0 otherwise.
int uart_can_putc(void) {
    9d58:	e92d4008 	push	{r3, lr}
    return get32(AUX_MU_LSR_REG) & TX_EMPTY;
    9d5c:	e59f300c 	ldr	r3, [pc, #12]	; 9d70 <uart_can_putc+0x18>
    9d60:	e5930018 	ldr	r0, [r3, #24]
    9d64:	eb00002a 	bl	9e14 <get32>
}
    9d68:	e2000020 	and	r0, r0, #32
    9d6c:	e8bd8008 	pop	{r3, pc}
    9d70:	0000a3f4 	strdeq	sl, [r0], -r4

00009d74 <uart_putc>:

// put one byte on the tx qqueue, if needed, blocks
// until TX has space.
void uart_putc(unsigned c) {
    9d74:	e92d4010 	push	{r4, lr}
    9d78:	e1a04000 	mov	r4, r0
    while(1)
            if(uart_can_putc())  break;
    9d7c:	ebfffff5 	bl	9d58 <uart_can_putc>
    9d80:	e3500000 	cmp	r0, #0
    9d84:	0afffffc 	beq	9d7c <uart_putc+0x8>
    put32(AUX_MU_IO_REG, c);
    9d88:	e59f300c 	ldr	r3, [pc, #12]	; 9d9c <uart_putc+0x28>
    9d8c:	e593001c 	ldr	r0, [r3, #28]
    9d90:	e1a01004 	mov	r1, r4
    9d94:	eb000012 	bl	9de4 <put32>
    9d98:	e8bd8010 	pop	{r4, pc}
    9d9c:	0000a3f4 	strdeq	sl, [r0], -r4

00009da0 <uart_has_data>:


// simple wrapper routines useful later.

// a maybe-more intuitive name for clients.
int uart_has_data(void) {
    9da0:	e92d4008 	push	{r3, lr}
    return uart_can_getc();
    9da4:	ebffffda 	bl	9d14 <uart_can_getc>
}
    9da8:	e8bd8008 	pop	{r3, pc}

00009dac <uart_getc_async>:

int uart_getc_async(void) { 
    9dac:	e92d4008 	push	{r3, lr}
    if(!uart_has_data())
    9db0:	ebfffffa 	bl	9da0 <uart_has_data>
    9db4:	e3500000 	cmp	r0, #0
    9db8:	0a000001 	beq	9dc4 <uart_getc_async+0x18>
        return -1;
    return uart_getc();
    9dbc:	ebffffdb 	bl	9d30 <uart_getc>
    9dc0:	e8bd8008 	pop	{r3, pc}
    return uart_can_getc();
}

int uart_getc_async(void) { 
    if(!uart_has_data())
        return -1;
    9dc4:	e3e00000 	mvn	r0, #0
    return uart_getc();
}
    9dc8:	e8bd8008 	pop	{r3, pc}

00009dcc <dev_barrier>:
    9dcc:	ea000002 	b	9ddc <dsb>

00009dd0 <dmb>:
    9dd0:	e3a00000 	mov	r0, #0
    9dd4:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
    9dd8:	e12fff1e 	bx	lr

00009ddc <dsb>:
    9ddc:	ee070f9a 	mcr	15, 0, r0, cr7, cr10, {4}
    9de0:	e12fff1e 	bx	lr

00009de4 <put32>:
    9de4:	e5801000 	str	r1, [r0]
    9de8:	e12fff1e 	bx	lr

00009dec <PUT32>:
    9dec:	e5801000 	str	r1, [r0]
    9df0:	e12fff1e 	bx	lr

00009df4 <put16>:
    9df4:	e1c010b0 	strh	r1, [r0]
    9df8:	e12fff1e 	bx	lr

00009dfc <PUT16>:
    9dfc:	e1c010b0 	strh	r1, [r0]
    9e00:	e12fff1e 	bx	lr

00009e04 <put8>:
    9e04:	e5c01000 	strb	r1, [r0]
    9e08:	e12fff1e 	bx	lr

00009e0c <PUT8>:
    9e0c:	e5c01000 	strb	r1, [r0]
    9e10:	e12fff1e 	bx	lr

00009e14 <get32>:
    9e14:	e5900000 	ldr	r0, [r0]
    9e18:	e12fff1e 	bx	lr

00009e1c <GET32>:
    9e1c:	e5900000 	ldr	r0, [r0]
    9e20:	e12fff1e 	bx	lr

00009e24 <GETPC>:
    9e24:	e1a0000e 	mov	r0, lr
    9e28:	e12fff1e 	bx	lr

00009e2c <dummy>:
    9e2c:	e12fff1e 	bx	lr

00009e30 <gpio_set_output>:
volatile unsigned *GPLEV1 = (void*) 0x20200038;
// Part 1 implement gpio_set_on, gpio_set_off, gpio_set_output

// set <pin> to be an output pin.  note: fsel0, fsel1, fsel2 are contiguous in memory,
// so you can use array calculations!
extern inline void gpio_set_output(unsigned pin) {
    9e30:	e92d4038 	push	{r3, r4, r5, lr}
    9e34:	e1a04000 	mov	r4, r0
    // implement this
    // use gpio_fsel0
    
    if (pin >= 32) {
    9e38:	e350001f 	cmp	r0, #31
    9e3c:	88bd8038 	pophi	{r3, r4, r5, pc}
        return;
    }
    
    volatile unsigned* gpio_reg;
    
    unsigned reg_select = pin / 10;
    9e40:	e59f30b4 	ldr	r3, [pc, #180]	; 9efc <gpio_set_output+0xcc>
    9e44:	e0832093 	umull	r2, r3, r3, r0
    9e48:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    9e4c:	e3530005 	cmp	r3, #5
    9e50:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    9e54:	ea000017 	b	9eb8 <gpio_set_output+0x88>
    9e58:	00009e70 	andeq	r9, r0, r0, ror lr
    9e5c:	00009e7c 	andeq	r9, r0, ip, ror lr
    9e60:	00009e88 	andeq	r9, r0, r8, lsl #29
    9e64:	00009e94 	muleq	r0, r4, lr
    9e68:	00009ea0 	andeq	r9, r0, r0, lsr #29
    9e6c:	00009eac 	andeq	r9, r0, ip, lsr #29
        case 0: {gpio_reg = GPFSEL0; break;}
    9e70:	e59f3088 	ldr	r3, [pc, #136]	; 9f00 <gpio_set_output+0xd0>
    9e74:	e5935000 	ldr	r5, [r3]
    9e78:	ea00000f 	b	9ebc <gpio_set_output+0x8c>
        case 1: {gpio_reg = GPFSEL1; break;}
    9e7c:	e59f307c 	ldr	r3, [pc, #124]	; 9f00 <gpio_set_output+0xd0>
    9e80:	e5935004 	ldr	r5, [r3, #4]
    9e84:	ea00000c 	b	9ebc <gpio_set_output+0x8c>
        case 2: {gpio_reg = GPFSEL2; break;}
    9e88:	e59f3070 	ldr	r3, [pc, #112]	; 9f00 <gpio_set_output+0xd0>
    9e8c:	e5935008 	ldr	r5, [r3, #8]
    9e90:	ea000009 	b	9ebc <gpio_set_output+0x8c>
        case 3: {gpio_reg = GPFSEL3; break;}
    9e94:	e59f3064 	ldr	r3, [pc, #100]	; 9f00 <gpio_set_output+0xd0>
    9e98:	e593500c 	ldr	r5, [r3, #12]
    9e9c:	ea000006 	b	9ebc <gpio_set_output+0x8c>
        case 4: {gpio_reg = GPFSEL4; break;}
    9ea0:	e59f3058 	ldr	r3, [pc, #88]	; 9f00 <gpio_set_output+0xd0>
    9ea4:	e5935010 	ldr	r5, [r3, #16]
    9ea8:	ea000003 	b	9ebc <gpio_set_output+0x8c>
        case 5: {gpio_reg = GPFSEL5; break;}
    9eac:	e59f304c 	ldr	r3, [pc, #76]	; 9f00 <gpio_set_output+0xd0>
    9eb0:	e5935014 	ldr	r5, [r3, #20]
    9eb4:	ea000000 	b	9ebc <gpio_set_output+0x8c>
        default: gpio_reg = 0x0;
    9eb8:	e3a05000 	mov	r5, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    9ebc:	e1a00005 	mov	r0, r5
    9ec0:	ebffffd3 	bl	9e14 <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    9ec4:	e59f1030 	ldr	r1, [pc, #48]	; 9efc <gpio_set_output+0xcc>
    9ec8:	e0813491 	umull	r3, r1, r1, r4
    9ecc:	e1a011a1 	lsr	r1, r1, #3
    9ed0:	e0811101 	add	r1, r1, r1, lsl #2
    9ed4:	e1a01081 	lsl	r1, r1, #1
    9ed8:	e0611004 	rsb	r1, r1, r4
    9edc:	e0811081 	add	r1, r1, r1, lsl #1
    9ee0:	e3a03007 	mov	r3, #7
    9ee4:	e1c03113 	bic	r3, r0, r3, lsl r1
    bitmask |= (1 << ((pin % 10) * 3));
    put32(gpio_reg, bitmask);
    9ee8:	e1a00005 	mov	r0, r5
    9eec:	e3a02001 	mov	r2, #1
    9ef0:	e1831112 	orr	r1, r3, r2, lsl r1
    9ef4:	ebffffba 	bl	9de4 <put32>
    9ef8:	e8bd8038 	pop	{r3, r4, r5, pc}
    9efc:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    9f00:	0000a428 	andeq	sl, r0, r8, lsr #8

00009f04 <gpio_set_on>:
    
}


// set GPIO <pin> on.
void gpio_set_on(unsigned pin) {
    9f04:	e92d4008 	push	{r3, lr}
    // implement this
    // use gpio_set0
    if (pin >= 32) {
    9f08:	e350001f 	cmp	r0, #31
    9f0c:	88bd8008 	pophi	{r3, pc}
    // Get current register value
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPSET0;
    9f10:	959f3020 	ldrls	r3, [pc, #32]	; 9f38 <gpio_set_on+0x34>
    9f14:	95932018 	ldrls	r2, [r3, #24]
        // TODO: why do we not want this statement?
        //bitmask = get32(GPSET0);
    } else {
        gpio_reg = GPSET1;
    9f18:	859f3018 	ldrhi	r3, [pc, #24]	; 9f38 <gpio_set_on+0x34>
    9f1c:	8593201c 	ldrhi	r2, [r3, #28]
        //bitmask = get32(GPSET1);
        // TODO: why do we not want this statement?
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    9f20:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    9f24:	e1a00002 	mov	r0, r2
    9f28:	e3a01001 	mov	r1, #1
    9f2c:	e1a01311 	lsl	r1, r1, r3
    9f30:	ebffffab 	bl	9de4 <put32>
    9f34:	e8bd8008 	pop	{r3, pc}
    9f38:	0000a428 	andeq	sl, r0, r8, lsr #8

00009f3c <gpio_set_off>:
}

// set GPIO <pin> off
void gpio_set_off(unsigned pin) {
    9f3c:	e92d4008 	push	{r3, lr}
    // implement this
    // use gpio_clr0
    if(pin >= 32) {
    9f40:	e350001f 	cmp	r0, #31
    9f44:	88bd8008 	pophi	{r3, pc}
    }
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPCLR0;
    9f48:	959f3020 	ldrls	r3, [pc, #32]	; 9f70 <gpio_set_off+0x34>
    9f4c:	95932020 	ldrls	r2, [r3, #32]
        //bitmask = get32(GPCLR0);
    } else {
        gpio_reg = GPCLR1;
    9f50:	859f3018 	ldrhi	r3, [pc, #24]	; 9f70 <gpio_set_off+0x34>
    9f54:	85932024 	ldrhi	r2, [r3, #36]	; 0x24
        //bitmask = get32(GPCLR1);
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    9f58:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    9f5c:	e1a00002 	mov	r0, r2
    9f60:	e3a01001 	mov	r1, #1
    9f64:	e1a01311 	lsl	r1, r1, r3
    9f68:	ebffff9d 	bl	9de4 <put32>
    9f6c:	e8bd8008 	pop	{r3, pc}
    9f70:	0000a428 	andeq	sl, r0, r8, lsr #8

00009f74 <gpio_set_input>:
}

// Part 2: implement gpio_set_input and gpio_read

// set <pin> to input.
void gpio_set_input(unsigned pin) {
    9f74:	e92d4038 	push	{r3, r4, r5, lr}
    9f78:	e1a04000 	mov	r4, r0
    // implement.
    if(pin >= 32) {
    9f7c:	e350001f 	cmp	r0, #31
    9f80:	88bd8038 	pophi	{r3, r4, r5, pc}
        return;
    }
    
    volatile unsigned* gpio_reg;
    
    unsigned reg_select = pin / 10;
    9f84:	e59f30ac 	ldr	r3, [pc, #172]	; a038 <gpio_set_input+0xc4>
    9f88:	e0832093 	umull	r2, r3, r3, r0
    9f8c:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    9f90:	e3530005 	cmp	r3, #5
    9f94:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    9f98:	ea000017 	b	9ffc <gpio_set_input+0x88>
    9f9c:	00009fb4 			; <UNDEFINED> instruction: 0x00009fb4
    9fa0:	00009fc0 	andeq	r9, r0, r0, asr #31
    9fa4:	00009fcc 	andeq	r9, r0, ip, asr #31
    9fa8:	00009fd8 	ldrdeq	r9, [r0], -r8
    9fac:	00009fe4 	andeq	r9, r0, r4, ror #31
    9fb0:	00009ff0 	strdeq	r9, [r0], -r0
        case 0: {gpio_reg = GPFSEL0; break;}
    9fb4:	e59f3080 	ldr	r3, [pc, #128]	; a03c <gpio_set_input+0xc8>
    9fb8:	e5935000 	ldr	r5, [r3]
    9fbc:	ea00000f 	b	a000 <gpio_set_input+0x8c>
        case 1: {gpio_reg = GPFSEL1; break;}
    9fc0:	e59f3074 	ldr	r3, [pc, #116]	; a03c <gpio_set_input+0xc8>
    9fc4:	e5935004 	ldr	r5, [r3, #4]
    9fc8:	ea00000c 	b	a000 <gpio_set_input+0x8c>
        case 2: {gpio_reg = GPFSEL2; break;}
    9fcc:	e59f3068 	ldr	r3, [pc, #104]	; a03c <gpio_set_input+0xc8>
    9fd0:	e5935008 	ldr	r5, [r3, #8]
    9fd4:	ea000009 	b	a000 <gpio_set_input+0x8c>
        case 3: {gpio_reg = GPFSEL3; break;}
    9fd8:	e59f305c 	ldr	r3, [pc, #92]	; a03c <gpio_set_input+0xc8>
    9fdc:	e593500c 	ldr	r5, [r3, #12]
    9fe0:	ea000006 	b	a000 <gpio_set_input+0x8c>
        case 4: {gpio_reg = GPFSEL4; break;}
    9fe4:	e59f3050 	ldr	r3, [pc, #80]	; a03c <gpio_set_input+0xc8>
    9fe8:	e5935010 	ldr	r5, [r3, #16]
    9fec:	ea000003 	b	a000 <gpio_set_input+0x8c>
        case 5: {gpio_reg = GPFSEL5; break;}
    9ff0:	e59f3044 	ldr	r3, [pc, #68]	; a03c <gpio_set_input+0xc8>
    9ff4:	e5935014 	ldr	r5, [r3, #20]
    9ff8:	ea000000 	b	a000 <gpio_set_input+0x8c>
        default: gpio_reg = 0x0;
    9ffc:	e3a05000 	mov	r5, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    a000:	e1a00005 	mov	r0, r5
    a004:	ebffff82 	bl	9e14 <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    a008:	e59f1028 	ldr	r1, [pc, #40]	; a038 <gpio_set_input+0xc4>
    a00c:	e0813491 	umull	r3, r1, r1, r4
    a010:	e1a011a1 	lsr	r1, r1, #3
    a014:	e0811101 	add	r1, r1, r1, lsl #2
    a018:	e1a01081 	lsl	r1, r1, #1
    a01c:	e0611004 	rsb	r1, r1, r4
    a020:	e0811081 	add	r1, r1, r1, lsl #1
    a024:	e3a03007 	mov	r3, #7
    a028:	e1c01113 	bic	r1, r0, r3, lsl r1
    put32(gpio_reg, bitmask);
    a02c:	e1a00005 	mov	r0, r5
    a030:	ebffff6b 	bl	9de4 <put32>
    a034:	e8bd8038 	pop	{r3, r4, r5, pc}
    a038:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    a03c:	0000a428 	andeq	sl, r0, r8, lsr #8

0000a040 <gpio_read>:
    
    
}

// return the value of <pin>
int gpio_read(unsigned pin) {
    a040:	e92d4010 	push	{r4, lr}
    a044:	e1a04000 	mov	r4, r0
    
    if(pin >= 32) {
    a048:	e350001f 	cmp	r0, #31
    a04c:	8a00000b 	bhi	a080 <gpio_read+0x40>
        return -1;
    }
    
    unsigned v = 0;
    
    if (pin <= 31){
    a050:	8a000003 	bhi	a064 <gpio_read+0x24>
        v = get32(GPLEV0);
    a054:	e59f302c 	ldr	r3, [pc, #44]	; a088 <gpio_read+0x48>
    a058:	e5930028 	ldr	r0, [r3, #40]	; 0x28
    a05c:	ebffff6c 	bl	9e14 <get32>
    a060:	ea000002 	b	a070 <gpio_read+0x30>
    } else {
        v = get32(GPLEV1);
    a064:	e59f301c 	ldr	r3, [pc, #28]	; a088 <gpio_read+0x48>
    a068:	e593002c 	ldr	r0, [r3, #44]	; 0x2c
    a06c:	ebffff68 	bl	9e14 <get32>
    }
    
    return (v & (1 << (pin % 32)));
    a070:	e204401f 	and	r4, r4, #31
    a074:	e3a03001 	mov	r3, #1
    a078:	e0000413 	and	r0, r0, r3, lsl r4
    a07c:	e8bd8010 	pop	{r4, pc}

// return the value of <pin>
int gpio_read(unsigned pin) {
    
    if(pin >= 32) {
        return -1;
    a080:	e3e00000 	mvn	r0, #0
    } else {
        v = get32(GPLEV1);
    }
    
    return (v & (1 << (pin % 32)));
}
    a084:	e8bd8010 	pop	{r4, pc}
    a088:	0000a428 	andeq	sl, r0, r8, lsr #8

0000a08c <gpio_write>:

// set <pin> to <v> (v \in {0,1})
void gpio_write(unsigned pin, unsigned v) {
    a08c:	e92d4008 	push	{r3, lr}
    
    if(pin >= 32) {
    a090:	e350001f 	cmp	r0, #31
    a094:	88bd8008 	pophi	{r3, pc}
        return;
    }
    
    if(v)
    a098:	e3510000 	cmp	r1, #0
    a09c:	0a000001 	beq	a0a8 <gpio_write+0x1c>
        gpio_set_on(pin);
    a0a0:	ebffff97 	bl	9f04 <gpio_set_on>
    a0a4:	e8bd8008 	pop	{r3, pc}
    else
        gpio_set_off(pin);
    a0a8:	ebffffa3 	bl	9f3c <gpio_set_off>
    a0ac:	e8bd8008 	pop	{r3, pc}

0000a0b0 <gpio_set_function>:
}

void gpio_set_function(unsigned pin, gpio_func_t func) {
    a0b0:	e92d4070 	push	{r4, r5, r6, lr}
    a0b4:	e1a04000 	mov	r4, r0
    a0b8:	e1a05001 	mov	r5, r1
    // implement this
    // use gpio_fsel0
    
    if (pin >= 32 || func >= 8) {
    a0bc:	e3510007 	cmp	r1, #7
    a0c0:	9350001f 	cmpls	r0, #31
    a0c4:	88bd8070 	pophi	{r4, r5, r6, pc}
        return;
    }

    volatile unsigned* gpio_reg;
    unsigned reg_select = pin / 10;
    a0c8:	e59f30b0 	ldr	r3, [pc, #176]	; a180 <gpio_set_function+0xd0>
    a0cc:	e0832093 	umull	r2, r3, r3, r0
    a0d0:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    a0d4:	e3530005 	cmp	r3, #5
    a0d8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    a0dc:	ea000017 	b	a140 <gpio_set_function+0x90>
    a0e0:	0000a0f8 	strdeq	sl, [r0], -r8
    a0e4:	0000a104 	andeq	sl, r0, r4, lsl #2
    a0e8:	0000a110 	andeq	sl, r0, r0, lsl r1
    a0ec:	0000a11c 	andeq	sl, r0, ip, lsl r1
    a0f0:	0000a128 	andeq	sl, r0, r8, lsr #2
    a0f4:	0000a134 	andeq	sl, r0, r4, lsr r1
        case 0: {gpio_reg = GPFSEL0; break;}
    a0f8:	e59f3084 	ldr	r3, [pc, #132]	; a184 <gpio_set_function+0xd4>
    a0fc:	e5936000 	ldr	r6, [r3]
    a100:	ea00000f 	b	a144 <gpio_set_function+0x94>
        case 1: {gpio_reg = GPFSEL1; break;}
    a104:	e59f3078 	ldr	r3, [pc, #120]	; a184 <gpio_set_function+0xd4>
    a108:	e5936004 	ldr	r6, [r3, #4]
    a10c:	ea00000c 	b	a144 <gpio_set_function+0x94>
        case 2: {gpio_reg = GPFSEL2; break;}
    a110:	e59f306c 	ldr	r3, [pc, #108]	; a184 <gpio_set_function+0xd4>
    a114:	e5936008 	ldr	r6, [r3, #8]
    a118:	ea000009 	b	a144 <gpio_set_function+0x94>
        case 3: {gpio_reg = GPFSEL3; break;}
    a11c:	e59f3060 	ldr	r3, [pc, #96]	; a184 <gpio_set_function+0xd4>
    a120:	e593600c 	ldr	r6, [r3, #12]
    a124:	ea000006 	b	a144 <gpio_set_function+0x94>
        case 4: {gpio_reg = GPFSEL4; break;}
    a128:	e59f3054 	ldr	r3, [pc, #84]	; a184 <gpio_set_function+0xd4>
    a12c:	e5936010 	ldr	r6, [r3, #16]
    a130:	ea000003 	b	a144 <gpio_set_function+0x94>
        case 5: {gpio_reg = GPFSEL5; break;}
    a134:	e59f3048 	ldr	r3, [pc, #72]	; a184 <gpio_set_function+0xd4>
    a138:	e5936014 	ldr	r6, [r3, #20]
    a13c:	ea000000 	b	a144 <gpio_set_function+0x94>
        default: gpio_reg = 0x0;
    a140:	e3a06000 	mov	r6, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    a144:	e1a00006 	mov	r0, r6
    a148:	ebffff31 	bl	9e14 <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    a14c:	e59f302c 	ldr	r3, [pc, #44]	; a180 <gpio_set_function+0xd0>
    a150:	e0832493 	umull	r2, r3, r3, r4
    a154:	e1a031a3 	lsr	r3, r3, #3
    a158:	e0833103 	add	r3, r3, r3, lsl #2
    a15c:	e1a03083 	lsl	r3, r3, #1
    a160:	e0633004 	rsb	r3, r3, r4
    a164:	e0833083 	add	r3, r3, r3, lsl #1
    a168:	e3a01007 	mov	r1, #7
    a16c:	e1c01311 	bic	r1, r0, r1, lsl r3
    bitmask |= (func << ((pin % 10) * 3));
    put32(gpio_reg, bitmask);
    a170:	e1a00006 	mov	r0, r6
    a174:	e1811315 	orr	r1, r1, r5, lsl r3
    a178:	ebffff19 	bl	9de4 <put32>
    a17c:	e8bd8070 	pop	{r4, r5, r6, pc}
    a180:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    a184:	0000a428 	andeq	sl, r0, r8, lsr #8

0000a188 <is_gpio_int>:
// call this routine (you must implement) to setup the right GPIO event.
// as with setting up functions, you should bitwise-or in the value for the
// pin you are setting with the existing pin values.  (otherwise you will
// lose their configuration).  you also need to enable the right IRQ.   make
// sure to use device barriers!!
int is_gpio_int(unsigned gpio_int) {
    a188:	e92d4008 	push	{r3, lr}
    // assert(gpio_int >= GPIO_INT0 && gpio_int <= GPIO_INT3);

    if(get32(IRQ_PENDING_2) > 0) {
    a18c:	e59f301c 	ldr	r3, [pc, #28]	; a1b0 <is_gpio_int+0x28>
    a190:	e5930030 	ldr	r0, [r3, #48]	; 0x30
    a194:	ebffff1e 	bl	9e14 <get32>
    a198:	e3500000 	cmp	r0, #0
    a19c:	0a000001 	beq	a1a8 <is_gpio_int+0x20>
        return 1;
    a1a0:	e3a00001 	mov	r0, #1
    a1a4:	e8bd8008 	pop	{r3, pc}
    }
    return 0;
    a1a8:	e3a00000 	mov	r0, #0
}
    a1ac:	e8bd8008 	pop	{r3, pc}
    a1b0:	0000a428 	andeq	sl, r0, r8, lsr #8

0000a1b4 <gpio_int_rising_edge>:
// p97 set to detect rising edge (0->1) on <pin>.
// as the broadcom doc states, it  detects by sampling based on the clock.
// it looks for "011" (low, hi, hi) to suppress noise.  i.e., its triggered only
// *after* a 1 reading has been sampled twice, so there will be delay.
// if you want lower latency, you should us async rising edge (p99)
void gpio_int_rising_edge(unsigned pin) {
    a1b4:	e92d4038 	push	{r3, r4, r5, lr}
    a1b8:	e1a04000 	mov	r4, r0
    
    
    if(pin >= 32) {
    a1bc:	e350001f 	cmp	r0, #31
    a1c0:	88bd8038 	pophi	{r3, r4, r5, pc}
        return;
    }
    
    dev_barrier();
    a1c4:	ebffff00 	bl	9dcc <dev_barrier>
    if(pin <= 31) {
    a1c8:	e354001f 	cmp	r4, #31
    a1cc:	8a000007 	bhi	a1f0 <gpio_int_rising_edge+0x3c>
        unsigned bitmask = get32(GPREN0);
    a1d0:	e59f505c 	ldr	r5, [pc, #92]	; a234 <gpio_int_rising_edge+0x80>
    a1d4:	e5950034 	ldr	r0, [r5, #52]	; 0x34
    a1d8:	ebffff0d 	bl	9e14 <get32>
        bitmask |= 1 << pin;
    a1dc:	e3a01001 	mov	r1, #1
    a1e0:	e1801411 	orr	r1, r0, r1, lsl r4
        put32(GPREN0, bitmask);
    a1e4:	e5950034 	ldr	r0, [r5, #52]	; 0x34
    a1e8:	ebfffefd 	bl	9de4 <put32>
    a1ec:	ea000007 	b	a210 <gpio_int_rising_edge+0x5c>
    } else {
        unsigned bitmask = get32(GPREN1);
    a1f0:	e59f503c 	ldr	r5, [pc, #60]	; a234 <gpio_int_rising_edge+0x80>
    a1f4:	e5950038 	ldr	r0, [r5, #56]	; 0x38
    a1f8:	ebffff05 	bl	9e14 <get32>
        bitmask |= 1 << (pin % 32);
    a1fc:	e204401f 	and	r4, r4, #31
    a200:	e3a01001 	mov	r1, #1
    a204:	e1801411 	orr	r1, r0, r1, lsl r4
        put32(GPREN1, bitmask);
    a208:	e5950038 	ldr	r0, [r5, #56]	; 0x38
    a20c:	ebfffef4 	bl	9de4 <put32>
    }
    dev_barrier();
    a210:	ebfffeed 	bl	9dcc <dev_barrier>
    unsigned int_mask = get32(ENABLE_IRQS_2);
    a214:	e59f4018 	ldr	r4, [pc, #24]	; a234 <gpio_int_rising_edge+0x80>
    a218:	e594003c 	ldr	r0, [r4, #60]	; 0x3c
    a21c:	ebfffefc 	bl	9e14 <get32>
    int_mask |= 1 << (49 - 32);
    a220:	e3801802 	orr	r1, r0, #131072	; 0x20000
    put32(ENABLE_IRQS_2, int_mask);
    a224:	e594003c 	ldr	r0, [r4, #60]	; 0x3c
    a228:	ebfffeed 	bl	9de4 <put32>
    dev_barrier();
    a22c:	ebfffee6 	bl	9dcc <dev_barrier>
    a230:	e8bd8038 	pop	{r3, r4, r5, pc}
    a234:	0000a428 	andeq	sl, r0, r8, lsr #8

0000a238 <gpio_int_falling_edge>:
// p98: detect falling edge (1->0).  sampled using the system clock.
// similarly to rising edge detection, it suppresses noise by looking for
// "100" --- i.e., is triggered after two readings of "0" and so the
// interrupt is delayed two clock cycles.   if you want  lower latency,
// you should use async falling edge. (p99)
void gpio_int_falling_edge(unsigned pin) {
    a238:	e92d4038 	push	{r3, r4, r5, lr}
    a23c:	e1a04000 	mov	r4, r0
    
    if(pin >= 32) {
    a240:	e350001f 	cmp	r0, #31
    a244:	88bd8038 	pophi	{r3, r4, r5, pc}
        return;
    }
    
    dev_barrier();
    a248:	ebfffedf 	bl	9dcc <dev_barrier>
    if(pin <= 31) {
    a24c:	e354001f 	cmp	r4, #31
    a250:	8a000007 	bhi	a274 <gpio_int_falling_edge+0x3c>
        unsigned bitmask = get32(GPFEN0);
    a254:	e59f505c 	ldr	r5, [pc, #92]	; a2b8 <gpio_int_falling_edge+0x80>
    a258:	e5950040 	ldr	r0, [r5, #64]	; 0x40
    a25c:	ebfffeec 	bl	9e14 <get32>
        bitmask |= 1 << pin;
    a260:	e3a01001 	mov	r1, #1
    a264:	e1801411 	orr	r1, r0, r1, lsl r4
        put32(GPFEN0, bitmask);
    a268:	e5950040 	ldr	r0, [r5, #64]	; 0x40
    a26c:	ebfffedc 	bl	9de4 <put32>
    a270:	ea000007 	b	a294 <gpio_int_falling_edge+0x5c>
    } else {
        unsigned bitmask = get32(GPFEN1);
    a274:	e59f503c 	ldr	r5, [pc, #60]	; a2b8 <gpio_int_falling_edge+0x80>
    a278:	e5950044 	ldr	r0, [r5, #68]	; 0x44
    a27c:	ebfffee4 	bl	9e14 <get32>
        bitmask |= 1 << (pin % 32);
    a280:	e204401f 	and	r4, r4, #31
    a284:	e3a01001 	mov	r1, #1
    a288:	e1801411 	orr	r1, r0, r1, lsl r4
        put32(GPFEN1, bitmask);
    a28c:	e5950044 	ldr	r0, [r5, #68]	; 0x44
    a290:	ebfffed3 	bl	9de4 <put32>
    }
    dev_barrier();
    a294:	ebfffecc 	bl	9dcc <dev_barrier>
    unsigned int_mask = get32(ENABLE_IRQS_2);
    a298:	e59f4018 	ldr	r4, [pc, #24]	; a2b8 <gpio_int_falling_edge+0x80>
    a29c:	e594003c 	ldr	r0, [r4, #60]	; 0x3c
    a2a0:	ebfffedb 	bl	9e14 <get32>
    int_mask |= 1 << (52 -32);
    a2a4:	e3801601 	orr	r1, r0, #1048576	; 0x100000
    put32(ENABLE_IRQS_2, int_mask);
    a2a8:	e594003c 	ldr	r0, [r4, #60]	; 0x3c
    a2ac:	ebfffecc 	bl	9de4 <put32>
    dev_barrier();
    a2b0:	ebfffec5 	bl	9dcc <dev_barrier>
    a2b4:	e8bd8038 	pop	{r3, r4, r5, pc}
    a2b8:	0000a428 	andeq	sl, r0, r8, lsr #8

0000a2bc <gpio_event_detected>:
}

// p96: a 1<<pin is set in EVENT_DETECT if <pin> triggered an interrupt.
// if you configure multiple events to lead to interrupts, you will have to
// read the pin to determine which caused it.
int gpio_event_detected(unsigned pin) {
    a2bc:	e92d4010 	push	{r4, lr}
    a2c0:	e1a04000 	mov	r4, r0
    if(pin >= 32) {
    a2c4:	e350001f 	cmp	r0, #31
    a2c8:	8a000019 	bhi	a334 <gpio_event_detected+0x78>
        return -1;
    }
    
    dev_barrier();
    a2cc:	ebfffebe 	bl	9dcc <dev_barrier>
    if(pin <= 31) {
    a2d0:	e354001f 	cmp	r4, #31
    a2d4:	8a000008 	bhi	a2fc <gpio_event_detected+0x40>
        unsigned reg_stat = get32(GPEDS0) & (1 << pin);
    a2d8:	e59f305c 	ldr	r3, [pc, #92]	; a33c <gpio_event_detected+0x80>
    a2dc:	e5930048 	ldr	r0, [r3, #72]	; 0x48
    a2e0:	ebfffecb 	bl	9e14 <get32>
        if(reg_stat > 0) {dev_barrier(); return 1;}
    a2e4:	e3a03001 	mov	r3, #1
    a2e8:	e0103413 	ands	r3, r0, r3, lsl r4
    a2ec:	0a00000d 	beq	a328 <gpio_event_detected+0x6c>
    a2f0:	ebfffeb5 	bl	9dcc <dev_barrier>
    a2f4:	e3a00001 	mov	r0, #1
    a2f8:	e8bd8010 	pop	{r4, pc}
    } else {
        unsigned reg_stat = get32(GPEDS1) & (1 << pin);
    a2fc:	e59f3038 	ldr	r3, [pc, #56]	; a33c <gpio_event_detected+0x80>
    a300:	e593004c 	ldr	r0, [r3, #76]	; 0x4c
    a304:	ebfffec2 	bl	9e14 <get32>
    a308:	e3a03001 	mov	r3, #1
    a30c:	e0004413 	and	r4, r0, r3, lsl r4
        dev_barrier();
    a310:	ebfffead 	bl	9dcc <dev_barrier>
        if(reg_stat > 0) {dev_barrier(); return 1;}
    a314:	e3540000 	cmp	r4, #0
    a318:	0a000002 	beq	a328 <gpio_event_detected+0x6c>
    a31c:	ebfffeaa 	bl	9dcc <dev_barrier>
    a320:	e3a00001 	mov	r0, #1
    a324:	e8bd8010 	pop	{r4, pc}
    }
    dev_barrier();
    a328:	ebfffea7 	bl	9dcc <dev_barrier>
    return 0;
    a32c:	e3a00000 	mov	r0, #0
    a330:	e8bd8010 	pop	{r4, pc}
// p96: a 1<<pin is set in EVENT_DETECT if <pin> triggered an interrupt.
// if you configure multiple events to lead to interrupts, you will have to
// read the pin to determine which caused it.
int gpio_event_detected(unsigned pin) {
    if(pin >= 32) {
        return -1;
    a334:	e3e00000 	mvn	r0, #0
        dev_barrier();
        if(reg_stat > 0) {dev_barrier(); return 1;}
    }
    dev_barrier();
    return 0;
}
    a338:	e8bd8010 	pop	{r4, pc}
    a33c:	0000a428 	andeq	sl, r0, r8, lsr #8

0000a340 <gpio_event_clear>:

// p96: have to write a 1 to the pin to clear the event.
void gpio_event_clear(unsigned pin) {
    a340:	e92d4010 	push	{r4, lr}
    a344:	e1a04000 	mov	r4, r0
    
    if(pin >= 32) {
    a348:	e350001f 	cmp	r0, #31
    a34c:	88bd8010 	pophi	{r4, pc}
        return;
    }
    
    dev_barrier();
    a350:	ebfffe9d 	bl	9dcc <dev_barrier>
    if(pin <= 31) {
    a354:	e354001f 	cmp	r4, #31
    a358:	8a000005 	bhi	a374 <gpio_event_clear+0x34>
        put32(GPEDS0, 1 << pin);
    a35c:	e59f3030 	ldr	r3, [pc, #48]	; a394 <gpio_event_clear+0x54>
    a360:	e5930048 	ldr	r0, [r3, #72]	; 0x48
    a364:	e3a01001 	mov	r1, #1
    a368:	e1a01411 	lsl	r1, r1, r4
    a36c:	ebfffe9c 	bl	9de4 <put32>
    a370:	ea000005 	b	a38c <gpio_event_clear+0x4c>
    } else {
        put32(GPEDS1, 1 << (pin % 32));
    a374:	e204401f 	and	r4, r4, #31
    a378:	e59f3014 	ldr	r3, [pc, #20]	; a394 <gpio_event_clear+0x54>
    a37c:	e593004c 	ldr	r0, [r3, #76]	; 0x4c
    a380:	e3a01001 	mov	r1, #1
    a384:	e1a01411 	lsl	r1, r1, r4
    a388:	ebfffe95 	bl	9de4 <put32>
    }
    dev_barrier();
    a38c:	ebfffe8e 	bl	9dcc <dev_barrier>
    a390:	e8bd8010 	pop	{r4, pc}
    a394:	0000a428 	andeq	sl, r0, r8, lsr #8

0000a398 <cb_new>:
// trivial routines to access control block.
#include "rpi.h"
#include "control-block.h"

control_blk_t *cb_new(void) {
    a398:	e92d4008 	push	{r3, lr}
    control_blk_t *c = CTRL_BLK_ADDR;
    memset(c, 0, sizeof c);
    a39c:	e3a00409 	mov	r0, #150994944	; 0x9000000
    a3a0:	e3a01000 	mov	r1, #0
    a3a4:	e3a02004 	mov	r2, #4
    a3a8:	ebfffa43 	bl	8cbc <memset>
    c->magic = CTRL_BLK_MAGIC;
    a3ac:	e3a00409 	mov	r0, #150994944	; 0x9000000
    a3b0:	e59f3004 	ldr	r3, [pc, #4]	; a3bc <cb_new+0x24>
    a3b4:	e5803000 	str	r3, [r0]
    return c;
}
    a3b8:	e8bd8008 	pop	{r3, pc}
    a3bc:	12345678 	eorsne	r5, r4, #120, 12	; 0x7800000

0000a3c0 <cb_get_block>:

control_blk_t *cb_get_block(void) {
    control_blk_t *c = CTRL_BLK_ADDR;
    if(c->magic != CTRL_BLK_MAGIC)
    a3c0:	e3a03409 	mov	r3, #150994944	; 0x9000000
    a3c4:	e5932000 	ldr	r2, [r3]
    a3c8:	e59f3014 	ldr	r3, [pc, #20]	; a3e4 <cb_get_block+0x24>
    a3cc:	e1520003 	cmp	r2, r3
    a3d0:	0a000001 	beq	a3dc <cb_get_block+0x1c>
        return 0;
    a3d4:	e3a00000 	mov	r0, #0
    a3d8:	e12fff1e 	bx	lr
    return c;
    a3dc:	e3a00409 	mov	r0, #150994944	; 0x9000000
}
    a3e0:	e12fff1e 	bx	lr
    a3e4:	12345678 	eorsne	r5, r4, #120, 12	; 0x7800000

Disassembly of section .data:

0000a3e8 <tid>:
    a3e8:	00000001 	andeq	r0, r0, r1

0000a3ec <rpi_putchar>:
    a3ec:	00008d34 	andeq	r8, r0, r4, lsr sp

0000a3f0 <putk>:
    a3f0:	00008d70 	andeq	r8, r0, r0, ror sp

0000a3f4 <AUX_ENABLES>:
    a3f4:	20215004 	eorcs	r5, r1, r4

0000a3f8 <AUX_MU_CNTL_REG>:
    a3f8:	20215060 	eorcs	r5, r1, r0, rrx

0000a3fc <AUX_MU_IER_REG>:
    a3fc:	20215044 	eorcs	r5, r1, r4, asr #32

0000a400 <AUX_MU_IIR_REG>:
    a400:	20215048 	eorcs	r5, r1, r8, asr #32

0000a404 <AUX_MU_LCR_REG>:
    a404:	2021504c 	eorcs	r5, r1, ip, asr #32

0000a408 <AUX_MU_BAUD_REG>:
    a408:	20215068 	eorcs	r5, r1, r8, rrx

0000a40c <AUX_MU_LSR_REG>:
    a40c:	20215054 	eorcs	r5, r1, r4, asr r0

0000a410 <AUX_MU_IO_REG>:
    a410:	20215040 	eorcs	r5, r1, r0, asr #32

0000a414 <AUX_MU_STAT_REG>:
    a414:	20215064 	eorcs	r5, r1, r4, rrx

0000a418 <AUX_MU_SCRATCH>:
    a418:	2021505c 	eorcs	r5, r1, ip, asr r0

0000a41c <AUX_MU_MSR_REG>:
    a41c:	20215058 	eorcs	r5, r1, r8, asr r0

0000a420 <AUX_MU_MCR_REG>:
    a420:	20215050 	eorcs	r5, r1, r0, asr r0

0000a424 <AUX_IRQ>:
    a424:	20215000 	eorcs	r5, r1, r0

0000a428 <GPFSEL0>:
    a428:	20200000 	eorcs	r0, r0, r0

0000a42c <GPFSEL1>:
    a42c:	20200004 	eorcs	r0, r0, r4

0000a430 <GPFSEL2>:
    a430:	20200008 	eorcs	r0, r0, r8

0000a434 <GPFSEL3>:
    a434:	2020000c 	eorcs	r0, r0, ip

0000a438 <GPFSEL4>:
    a438:	20200010 	eorcs	r0, r0, r0, lsl r0

0000a43c <GPFSEL5>:
    a43c:	20200014 	eorcs	r0, r0, r4, lsl r0

0000a440 <GPSET0>:
    a440:	2020001c 	eorcs	r0, r0, ip, lsl r0

0000a444 <GPSET1>:
    a444:	20200020 	eorcs	r0, r0, r0, lsr #32

0000a448 <GPCLR0>:
    a448:	20200028 	eorcs	r0, r0, r8, lsr #32

0000a44c <GPCLR1>:
    a44c:	2020002c 	eorcs	r0, r0, ip, lsr #32

0000a450 <GPLEV0>:
    a450:	20200034 	eorcs	r0, r0, r4, lsr r0

0000a454 <GPLEV1>:
    a454:	20200038 	eorcs	r0, r0, r8, lsr r0

0000a458 <IRQ_PENDING_2>:
    a458:	2000b208 	andcs	fp, r0, r8, lsl #4

0000a45c <GPREN0>:
    a45c:	2020004c 	eorcs	r0, r0, ip, asr #32

0000a460 <GPREN1>:
    a460:	20200050 	eorcs	r0, r0, r0, asr r0

0000a464 <ENABLE_IRQS_2>:
    a464:	2000b214 	andcs	fp, r0, r4, lsl r2

0000a468 <GPFEN0>:
    a468:	20200058 	eorcs	r0, r0, r8, asr r0

0000a46c <GPFEN1>:
    a46c:	2020005c 	eorcs	r0, r0, ip, asr r0

0000a470 <GPEDS0>:
    a470:	20200040 	eorcs	r0, r0, r0, asr #32

0000a474 <GPEDS1>:
    a474:	20200044 	eorcs	r0, r0, r4, asr #32

0000a478 <IRQ_PENDING_1>:
    a478:	2000b204 	andcs	fp, r0, r4, lsl #4

0000a47c <gpio_clr0>:
    a47c:	20200028 	eorcs	r0, r0, r8, lsr #32

0000a480 <gpio_set0>:
    a480:	2020001c 	eorcs	r0, r0, ip, lsl r0

0000a484 <gpio_fsel0>:
    a484:	20200000 	eorcs	r0, r0, r0

Disassembly of section .rodata:

0000a488 <__FUNCTION__.4205>:
    a488:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
    a48c:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
    a490:	0065646f 	rsbeq	r6, r5, pc, ror #8

0000a494 <__FUNCTION__.4215>:
    a494:	6d746f6e 	ldclvs	15, cr6, [r4, #-440]!	; 0xfffffe48
    a498:	006e6961 	rsbeq	r6, lr, r1, ror #18
    a49c:	74206e69 	strtvc	r6, [r0], #-3689	; 0xe69
    a4a0:	61657268 	cmnvs	r5, r8, ror #4
    a4a4:	70252064 	eorvc	r2, r5, r4, rrx
    a4a8:	6977202c 	ldmdbvs	r7!, {r2, r3, r5, sp}^
    a4ac:	25206874 	strcs	r6, [r0, #-2164]!	; 0x874
    a4b0:	00000a78 	andeq	r0, r0, r8, ror sl
    a4b4:	4f525245 	svcmi	0x00525245
    a4b8:	73253a52 	teqvc	r5, #335872	; 0x52000
    a4bc:	3a73253a 	bcc	1cd39ac <__bss_end__+0x1cc883c>
    a4c0:	203a6425 	eorscs	r6, sl, r5, lsr #8
    a4c4:	534c4146 	movtpl	r4, #49478	; 0xc146
    a4c8:	723c2845 	eorsvc	r2, ip, #4521984	; 0x450000
    a4cc:	635f6970 	cmpvs	pc, #112, 18	; 0x1c0000
    a4d0:	745f7275 	ldrbvc	r7, [pc], #-629	; a4d8 <__FUNCTION__.4215+0x44>
    a4d4:	61657268 	cmnvs	r5, r8, ror #4
    a4d8:	2d292864 	stccs	8, cr2, [r9, #-400]!	; 0xfffffe70
    a4dc:	6469743e 	strbtvs	r7, [r9], #-1086	; 0x43e
    a4e0:	203d3d20 	eorscs	r3, sp, r0, lsr #26
    a4e4:	312b782a 	teqcc	fp, sl, lsr #16
    a4e8:	203a293e 	eorscs	r2, sl, lr, lsr r9
    a4ec:	70786522 	rsbsvc	r6, r8, r2, lsr #10
    a4f0:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0x365
    a4f4:	64252064 	strtvs	r2, [r5], #-100	; 0x64
    a4f8:	6168202c 	cmnvs	r8, ip, lsr #32
    a4fc:	25206576 	strcs	r6, [r0, #-1398]!	; 0x576
    a500:	226e5c64 	rsbcs	r5, lr, #100, 24	; 0x6400
    a504:	0000000a 	andeq	r0, r0, sl
    a508:	65742d31 	ldrbvs	r2, [r4, #-3377]!	; 0xd31
    a50c:	742d7473 	strtvc	r7, [sp], #-1139	; 0x473
    a510:	61657268 	cmnvs	r5, r8, ror #4
    a514:	00632e64 	rsbeq	r2, r3, r4, ror #28
    a518:	756f6261 	strbvc	r6, [pc, #-609]!	; a2bf <gpio_event_detected+0x3>
    a51c:	6f742074 	svcvs	0x00742074
    a520:	73657420 	cmnvc	r5, #32, 8	; 0x20000000
    a524:	75732074 	ldrbvc	r2, [r3, #-116]!	; 0x74
    a528:	6e696d6d 	cdpvs	13, 6, cr6, cr9, cr13, {3}
    a52c:	666f2067 	strbtvs	r2, [pc], -r7, rrx
    a530:	20303320 	eorscs	r3, r0, r0, lsr #6
    a534:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
    a538:	0a736461 	beq	1ce36c4 <__bss_end__+0x1cd8554>
    a53c:	00000000 	andeq	r0, r0, r0
    a540:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    a544:	203d2074 	eorscs	r2, sp, r4, ror r0
    a548:	202c6425 	eorcs	r6, ip, r5, lsr #8
    a54c:	3d6d7573 	cfstr64cc	mvdx7, [sp, #-460]!	; 0xfffffe34
    a550:	000a6425 	andeq	r6, sl, r5, lsr #8
    a554:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a558:	73253a43 	teqvc	r5, #274432	; 0x43000
    a55c:	3a73253a 	bcc	1cd3a4c <__bss_end__+0x1cc88dc>
    a560:	743a6425 	ldrtvc	r6, [sl], #-1061	; 0x425
    a564:	61657268 	cmnvs	r5, r8, ror #4
    a568:	6f635f64 	svcvs	0x00635f64
    a56c:	20746e75 	rsbscs	r6, r4, r5, ror lr
    a570:	6e203d3d 	mcrvs	13, 1, r3, cr0, cr13, {1}
    a574:	0000000a 	andeq	r0, r0, sl
    a578:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a57c:	73253a43 	teqvc	r5, #274432	; 0x43000
    a580:	3a73253a 	bcc	1cd3a70 <__bss_end__+0x1cc8900>
    a584:	743a6425 	ldrtvc	r6, [sl], #-1061	; 0x425
    a588:	61657268 	cmnvs	r5, r8, ror #4
    a58c:	75735f64 	ldrbvc	r5, [r3, #-3940]!	; 0xf64
    a590:	3d3d206d 	ldccc	0, cr2, [sp, #-436]!	; 0xfffffe4c
    a594:	6d757320 	ldclvs	3, cr7, [r5, #-128]!	; 0xffffff80
    a598:	0000000a 	andeq	r0, r0, sl
    a59c:	43435553 	movtmi	r5, #13651	; 0x3553
    a5a0:	21535345 	cmpcs	r3, r5, asr #6
    a5a4:	0000000a 	andeq	r0, r0, sl

0000a5a8 <__FUNCTION__.4215>:
    a5a8:	6d655f51 	stclvs	15, cr5, [r5, #-324]!	; 0xfffffebc
    a5ac:	00797470 	rsbseq	r7, r9, r0, ror r4

0000a5b0 <__FUNCTION__.4219>:
    a5b0:	6f705f51 	svcvs	0x00705f51
    a5b4:	00000070 	andeq	r0, r0, r0, ror r0

0000a5b8 <__FUNCTION__.4247>:
    a5b8:	615f6874 	cmpvs	pc, r4, ror r8	; <UNPREDICTABLE>
    a5bc:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    a5c0:	00000000 	andeq	r0, r0, r0

0000a5c4 <__FUNCTION__.4282>:
    a5c4:	5f697072 	svcpl	0x00697072
    a5c8:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    a5cc:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    a5d0:	6568635f 	strbvs	r6, [r8, #-863]!	; 0x35f
    a5d4:	00006b63 	andeq	r6, r0, r3, ror #22

0000a5d8 <__FUNCTION__.4286>:
    a5d8:	5f697072 	svcpl	0x00697072
    a5dc:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    a5e0:	68635f6b 	stmdavs	r3!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    a5e4:	006b6365 	rsbeq	r6, fp, r5, ror #6

0000a5e8 <__FUNCTION__.4290>:
    a5e8:	5f697072 	svcpl	0x00697072
    a5ec:	6e696f6a 	cdpvs	15, 6, cr6, cr9, cr10, {3}
    a5f0:	00000000 	andeq	r0, r0, r0

0000a5f4 <__FUNCTION__.4294>:
    a5f4:	5f697072 	svcpl	0x00697072
    a5f8:	63617865 	cmnvs	r1, #6619136	; 0x650000
    a5fc:	6c735f74 	ldclvs	15, cr5, [r3], #-464	; 0xfffffe30
    a600:	00706565 	rsbseq	r6, r0, r5, ror #10
    a604:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a608:	73253a43 	teqvc	r5, #274432	; 0x43000
    a60c:	3a73253a 	bcc	1cd3afc <__bss_end__+0x1cc898c>
    a610:	513a6425 	teqpl	sl, r5, lsr #8
    a614:	6c656e5f 	stclvs	14, cr6, [r5], #-380	; 0xfffffe84
    a618:	71286d65 	teqvc	r8, r5, ror #26
    a61c:	3d3d2029 	ldccc	0, cr2, [sp, #-164]!	; 0xffffff5c
    a620:	000a3020 	andeq	r3, sl, r0, lsr #32
    a624:	00682e51 	rsbeq	r2, r8, r1, asr lr
    a628:	4f525245 	svcmi	0x00525245
    a62c:	73253a52 	teqvc	r5, #335872	; 0x52000
    a630:	3a73253a 	bcc	1cd3b20 <__bss_end__+0x1cc89b0>
    a634:	203a6425 	eorscs	r6, sl, r5, lsr #8
    a638:	534c4146 	movtpl	r4, #49478	; 0xc146
    a63c:	213c2845 	teqcs	ip, r5, asr #16
    a640:	743e2d71 	ldrtvc	r2, [lr], #-3441	; 0xd71
    a644:	3e6c6961 	cdpcc	9, 6, cr6, cr12, cr1, {3}
    a648:	69203a29 	stmdbvs	r0!, {r0, r3, r5, r9, fp, ip, sp}
    a64c:	6c61766e 	stclvs	6, cr7, [r1], #-440	; 0xfffffe48
    a650:	51206469 	teqpl	r0, r9, ror #8
    a654:	0000000a 	andeq	r0, r0, sl
    a658:	4f525245 	svcmi	0x00525245
    a65c:	73253a52 	teqvc	r5, #335872	; 0x52000
    a660:	3a73253a 	bcc	1cd3b50 <__bss_end__+0x1cc89e0>
    a664:	203a6425 	eorscs	r6, sl, r5, lsr #8
    a668:	534c4146 	movtpl	r4, #49478	; 0xc146
    a66c:	713c2845 	teqvc	ip, r5, asr #16
    a670:	203a293e 	eorscs	r2, sl, lr, lsr r9
    a674:	20646162 	rsbcs	r6, r4, r2, ror #2
    a678:	75706e69 	ldrbvc	r6, [r0, #-3689]!	; 0xe69
    a67c:	00000a74 	andeq	r0, r0, r4, ror sl
    a680:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a684:	73253a43 	teqvc	r5, #274432	; 0x43000
    a688:	3a73253a 	bcc	1cd3b78 <__bss_end__+0x1cc8a08>
    a68c:	513a6425 	teqpl	sl, r5, lsr #8
    a690:	706d655f 	rsbvc	r6, sp, pc, asr r5
    a694:	71287974 	teqvc	r8, r4, ror r9
    a698:	00000a29 	andeq	r0, r0, r9, lsr #20
    a69c:	4f525245 	svcmi	0x00525245
    a6a0:	73253a52 	teqvc	r5, #335872	; 0x52000
    a6a4:	3a73253a 	bcc	1cd3b94 <__bss_end__+0x1cc8a24>
    a6a8:	203a6425 	eorscs	r6, sl, r5, lsr #8
    a6ac:	534c4146 	movtpl	r4, #49478	; 0xc146
    a6b0:	283c2845 	ldmdacs	ip!, {r0, r2, r6, fp, sp}
    a6b4:	6e752828 	cdpvs	8, 7, cr2, cr5, cr8, {1}
    a6b8:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
    a6bc:	28296465 	stmdacs	r9!, {r0, r2, r5, r6, sl, sp, lr}
    a6c0:	3e2d7426 	cdpcc	4, 2, cr7, cr13, cr6, {1}
    a6c4:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    a6c8:	5d305b6b 	fldmdbxpl	r0!, {d5-d57}	;@ Deprecated
    a6cc:	28252929 	stmdacs	r5!, {r0, r3, r5, r8, fp, sp}
    a6d0:	3d202938 	stccc	9, cr2, [r0, #-224]!	; 0xffffff20
    a6d4:	2930203d 	ldmdbcs	r0!, {r0, r2, r3, r4, r5, sp}
    a6d8:	203a293e 	eorscs	r2, sl, lr, lsr r9
    a6dc:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    a6e0:	756d206b 	strbvc	r2, [sp, #-107]!	; 0x6b
    a6e4:	62207473 	eorvs	r7, r0, #1929379840	; 0x73000000
    a6e8:	2d382065 	ldccs	0, cr2, [r8, #-404]!	; 0xfffffe6c
    a6ec:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
    a6f0:	696c6120 	stmdbvs	ip!, {r5, r8, sp, lr}^
    a6f4:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
    a6f8:	00000a21 	andeq	r0, r0, r1, lsr #20
    a6fc:	2d697072 	stclcs	0, cr7, [r9, #-456]!	; 0xfffffe38
    a700:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
    a704:	632e6461 	teqvs	lr, #1627389952	; 0x61000000
    a708:	00000000 	andeq	r0, r0, r0
    a70c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a710:	73253a43 	teqvc	r5, #274432	; 0x43000
    a714:	3a73253a 	bcc	1cd3c04 <__bss_end__+0x1cc8a94>
    a718:	733a6425 	teqvc	sl, #620756992	; 0x25000000
    a71c:	61726f74 	cmnvs	r2, r4, ror pc
    a720:	6c206567 	cfstr32vs	mvfx6, [r0], #-412	; 0xfffffe64
    a724:	3a6b6165 	bcc	1ae2cc0 <__bss_end__+0x1ad7b50>
    a728:	6f687320 	svcvs	0x00687320
    a72c:	20646c75 	rsbcs	r6, r4, r5, ror ip
    a730:	65766168 	ldrbvs	r6, [r6, #-360]!	; 0x168
    a734:	20642520 	rsbcs	r2, r4, r0, lsr #10
    a738:	65657266 	strbvs	r7, [r5, #-614]!	; 0x266
    a73c:	6f6c6220 	svcvs	0x006c6220
    a740:	2c736b63 	ldclcs	11, cr6, [r3], #-396	; 0xfffffe74
    a744:	76616820 	strbtvc	r6, [r1], -r0, lsr #16
    a748:	64252065 	strtvs	r2, [r5], #-101	; 0x65
    a74c:	75722820 	ldrbvc	r2, [r2, #-2080]!	; 0x820
    a750:	253d716e 	ldrcs	r7, [sp, #-366]!	; 0x16e
    a754:	66202c64 	strtvs	r2, [r0], -r4, ror #24
    a758:	71656572 	smcvc	22098	; 0x5652
    a75c:	2964253d 	stmdbcs	r4!, {r0, r2, r3, r4, r5, r8, sl, sp}^
    a760:	00000a0a 	andeq	r0, r0, sl, lsl #20
    a764:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
    a768:	203a6461 	eorscs	r6, sl, r1, ror #8
    a76c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    a770:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    a774:	65686320 	strbvs	r6, [r8, #-800]!	; 0x320
    a778:	70206b63 	eorvc	r6, r0, r3, ror #22
    a77c:	65737361 	ldrbvs	r7, [r3, #-865]!	; 0x361
    a780:	00000a64 	andeq	r0, r0, r4, ror #20
    a784:	74697072 	strbtvc	r7, [r9], #-114	; 0x72
    a788:	61657268 	cmnvs	r5, r8, ror #4
    a78c:	203a7364 	eorscs	r7, sl, r4, ror #6
    a790:	656e6f64 	strbvs	r6, [lr, #-3940]!	; 0xf64
    a794:	74697720 	strbtvc	r7, [r9], #-1824	; 0x720
    a798:	6c612068 	stclvs	0, cr2, [r1], #-416	; 0xfffffe60
    a79c:	6874206c 	ldmdavs	r4!, {r2, r3, r5, r6, sp}^
    a7a0:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
    a7a4:	72202173 	eorvc	r2, r0, #-1073741796	; 0xc000001c
    a7a8:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
    a7ac:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
    a7b0:	0000000a 	andeq	r0, r0, sl
    a7b4:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a7b8:	73253a43 	teqvc	r5, #274432	; 0x43000
    a7bc:	3a73253a 	bcc	1cd3cac <__bss_end__+0x1cc8b3c>
    a7c0:	693a6425 	ldmdbvs	sl!, {r0, r2, r5, sl, sp, lr}
    a7c4:	656c706d 	strbvs	r7, [ip, #-109]!	; 0x6d
    a7c8:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
    a7cc:	69687420 	stmdbvs	r8!, {r5, sl, ip, sp, lr}^
    a7d0:	75662073 	strbvc	r2, [r6, #-115]!	; 0x73
    a7d4:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    a7d8:	0a216e6f 	beq	86619c <__bss_end__+0x85b02c>
    a7dc:	0000000a 	andeq	r0, r0, sl

0000a7e0 <__FUNCTION__.4245>:
    a7e0:	705f7163 	subsvc	r7, pc, r3, ror #2
    a7e4:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    a7e8:	00000000 	andeq	r0, r0, r0

0000a7ec <__FUNCTION__.4249>:
    a7ec:	6f5f7163 	svcvs	0x005f7163
    a7f0:	0000006b 	andeq	r0, r0, fp, rrx

0000a7f4 <__FUNCTION__.4254>:
    a7f4:	695f7163 	ldmdbvs	pc, {r0, r1, r5, r6, r8, ip, sp, lr}^	; <UNPREDICTABLE>
    a7f8:	0074696e 	rsbseq	r6, r4, lr, ror #18

0000a7fc <__FUNCTION__.4268>:
    a7fc:	705f7163 	subsvc	r7, pc, r3, ror #2
    a800:	5f6b6565 	svcpl	0x006b6565
    a804:	0000006e 	andeq	r0, r0, lr, rrx

0000a808 <__FUNCTION__.4293>:
    a808:	705f7163 	subsvc	r7, pc, r3, ror #2
    a80c:	5f687375 	svcpl	0x00687375
    a810:	0000006e 	andeq	r0, r0, lr, rrx
    a814:	253a7325 	ldrcs	r7, [sl, #-805]!	; 0x325
    a818:	64253a73 	strtvs	r3, [r5], #-2675	; 0xa73
    a81c:	2071633a 	rsbscs	r6, r1, sl, lsr r3
    a820:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    a824:	68203a74 	stmdavs	r0!, {r2, r4, r5, r6, r9, fp, ip, sp}
    a828:	3d646165 	stfcce	f6, [r4, #-404]!	; 0xfffffe6c
    a82c:	202c6425 	eorcs	r6, ip, r5, lsr #8
    a830:	6c696174 	stfvse	f6, [r9], #-464	; 0xfffffe30
    a834:	2c64253d 	cfstr64cs	mvdx2, [r4], #-244	; 0xffffff0c
    a838:	6c656e20 	stclvs	14, cr6, [r5], #-128	; 0xffffff80
    a83c:	253d6d65 	ldrcs	r6, [sp, #-3429]!	; 0xd65
    a840:	65202c64 	strvs	r2, [r0, #-3172]!	; 0xc64
    a844:	7974706d 	ldmdbvc	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    a848:	0a64253d 	beq	1913d44 <__bss_end__+0x1908bd4>
    a84c:	00000000 	andeq	r0, r0, r0
    a850:	63726963 	cmnvs	r2, #1622016	; 0x18c000
    a854:	72616c75 	rsbvc	r6, r1, #29952	; 0x7500
    a858:	0000632e 	andeq	r6, r0, lr, lsr #6
    a85c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a860:	73253a43 	teqvc	r5, #274432	; 0x43000
    a864:	3a73253a 	bcc	1cd3d54 <__bss_end__+0x1cc8be4>
    a868:	663a6425 	ldrtvs	r6, [sl], -r5, lsr #8
    a86c:	65636e65 	strbvs	r6, [r3, #-3685]!	; 0xe65
    a870:	20736920 	rsbscs	r6, r3, r0, lsr #18
    a874:	72726f63 	rsbsvc	r6, r2, #396	; 0x18c
    a878:	65747075 	ldrbvs	r7, [r4, #-117]!	; 0x75
    a87c:	000a0a64 	andeq	r0, sl, r4, ror #20
    a880:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a884:	73253a43 	teqvc	r5, #274432	; 0x43000
    a888:	3a73253a 	bcc	1cd3d78 <__bss_end__+0x1cc8c08>
    a88c:	633a6425 	teqvs	sl, #620756992	; 0x25000000
    a890:	6d655f71 	stclvs	15, cr5, [r5, #-452]!	; 0xfffffe3c
    a894:	28797470 	ldmdacs	r9!, {r4, r5, r6, sl, ip, sp, lr}^
    a898:	000a2963 	andeq	r2, sl, r3, ror #18
    a89c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a8a0:	73253a43 	teqvc	r5, #274432	; 0x43000
    a8a4:	3a73253a 	bcc	1cd3d94 <__bss_end__+0x1cc8c24>
    a8a8:	213a6425 	teqcs	sl, r5, lsr #8
    a8ac:	665f7163 	ldrbvs	r7, [pc], -r3, ror #2
    a8b0:	286c6c75 	stmdacs	ip!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    a8b4:	000a2963 	andeq	r2, sl, r3, ror #18
    a8b8:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a8bc:	73253a43 	teqvc	r5, #274432	; 0x43000
    a8c0:	3a73253a 	bcc	1cd3db0 <__bss_end__+0x1cc8c40>
    a8c4:	633a6425 	teqvs	sl, #620756992	; 0x25000000
    a8c8:	656e5f71 	strbvs	r5, [lr, #-3953]!	; 0xf71
    a8cc:	286d656c 	stmdacs	sp!, {r2, r3, r5, r6, r8, sl, sp, lr}^
    a8d0:	3d202963 	stccc	9, cr2, [r0, #-396]!	; 0xfffffe74
    a8d4:	0a30203d 	beq	c129d0 <__bss_end__+0xc07860>
    a8d8:	00000000 	andeq	r0, r0, r0
    a8dc:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a8e0:	73253a43 	teqvc	r5, #274432	; 0x43000
    a8e4:	3a73253a 	bcc	1cd3dd4 <__bss_end__+0x1cc8c64>
    a8e8:	633a6425 	teqvs	sl, #620756992	; 0x25000000
    a8ec:	6f705f71 	svcvs	0x00705f71
    a8f0:	6f6e5f70 	svcvs	0x006e5f70
    a8f4:	6f6c626e 	svcvs	0x006c626e
    a8f8:	63286b63 	teqvs	r8, #101376	; 0x18c00
    a8fc:	2965262c 	stmdbcs	r5!, {r2, r3, r5, r9, sl, sp}^
    a900:	203d3d20 	eorscs	r3, sp, r0, lsr #26
    a904:	26262030 			; <UNDEFINED> instruction: 0x26262030
    a908:	3d206520 	cfstr32cc	mvfx6, [r0, #-128]!	; 0xffffff80
    a90c:	7830203d 	ldmdavc	r0!, {r0, r2, r3, r4, r5, sp}
    a910:	000a3231 	andeq	r3, sl, r1, lsr r2
    a914:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a918:	73253a43 	teqvc	r5, #274432	; 0x43000
    a91c:	3a73253a 	bcc	1cd3e0c <__bss_end__+0x1cc8c9c>
    a920:	733a6425 	teqvc	sl, #620756992	; 0x25000000
    a924:	3d3d207a 	ldccc	0, cr2, [sp, #-488]!	; 0xfffffe18
    a928:	5f716320 	svcpl	0x00716320
    a92c:	656c656e 	strbvs	r6, [ip, #-1390]!	; 0x56e
    a930:	2963286d 	stmdbcs	r3!, {r0, r2, r3, r5, r6, fp, sp}^
    a934:	0000000a 	andeq	r0, r0, sl
    a938:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a93c:	73253a43 	teqvc	r5, #274432	; 0x43000
    a940:	3a73253a 	bcc	1cd3e30 <__bss_end__+0x1cc8cc0>
    a944:	6e3a6425 	cdpvs	4, 3, cr6, cr10, cr5, {1}
    a948:	6820746f 	stmdavs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
    a94c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    a950:	20676e69 	rsbcs	r6, r7, r9, ror #28
    a954:	73696874 	cmnvc	r9, #116, 16	; 0x740000
    a958:	00000a0a 	andeq	r0, r0, sl, lsl #20
    a95c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a960:	73253a43 	teqvc	r5, #274432	; 0x43000
    a964:	3a73253a 	bcc	1cd3e54 <__bss_end__+0x1cc8ce4>
    a968:	213a6425 	teqcs	sl, r5, lsr #8
    a96c:	655f7163 	ldrbvs	r7, [pc, #-355]	; a811 <__FUNCTION__.4293+0x9>
    a970:	7974706d 	ldmdbvc	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    a974:	0a296328 	beq	a6361c <__bss_end__+0xa584ac>
    a978:	00000000 	andeq	r0, r0, r0

0000a97c <__FUNCTION__.4228>:
    a97c:	74696d65 	strbtvc	r6, [r9], #-3429	; 0xd65
    a980:	00000000 	andeq	r0, r0, r0

0000a984 <__FUNCTION__.4176>:
    a984:	5f697072 	svcpl	0x00697072
    a988:	5f746573 	svcpl	0x00746573
    a98c:	7074756f 	rsbsvc	r7, r4, pc, ror #10
    a990:	00007475 	andeq	r7, r0, r5, ror r4

0000a994 <__FUNCTION__.4250>:
    a994:	705f6176 	subsvc	r6, pc, r6, ror r1	; <UNPREDICTABLE>
    a998:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    a99c:	0000006b 	andeq	r0, r0, fp, rrx
    a9a0:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a9a4:	73253a43 	teqvc	r5, #274432	; 0x43000
    a9a8:	3a73253a 	bcc	1cd3e98 <__bss_end__+0x1cc8d28>
    a9ac:	303a6425 	eorscc	r6, sl, r5, lsr #8
    a9b0:	0000000a 	andeq	r0, r0, sl
    a9b4:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    a9b8:	2d61762f 	stclcs	6, cr7, [r1, #-188]!	; 0xffffff44
    a9bc:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    a9c0:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
    a9c4:	00000000 	andeq	r0, r0, r0
    a9c8:	33323130 	teqcc	r2, #48, 2
    a9cc:	37363534 			; <UNDEFINED> instruction: 0x37363534
    a9d0:	00003938 	andeq	r3, r0, r8, lsr r9
    a9d4:	33323130 	teqcc	r2, #48, 2
    a9d8:	37363534 			; <UNDEFINED> instruction: 0x37363534
    a9dc:	62613938 	rsbvs	r3, r1, #56, 18	; 0xe0000
    a9e0:	66656463 	strbtvs	r6, [r5], -r3, ror #8
    a9e4:	00000000 	andeq	r0, r0, r0
    a9e8:	00003130 	andeq	r3, r0, r0, lsr r1
    a9ec:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a9f0:	73253a43 	teqvc	r5, #274432	; 0x43000
    a9f4:	3a73253a 	bcc	1cd3ee4 <__bss_end__+0x1cc8d74>
    a9f8:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    a9fc:	5f637475 	svcpl	0x00637475
    aa00:	000a7066 	andeq	r7, sl, r6, rrx
    aa04:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    aa08:	73253a43 	teqvc	r5, #274432	; 0x43000
    aa0c:	3a73253a 	bcc	1cd3efc <__bss_end__+0x1cc8d8c>
    aa10:	773a6425 	ldrvc	r6, [sl, -r5, lsr #8]!
    aa14:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
    aa18:	33203c20 	teqcc	r0, #32, 24	; 0x2000
    aa1c:	00000a32 	andeq	r0, r0, r2, lsr sl
    aa20:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    aa24:	73253a43 	teqvc	r5, #274432	; 0x43000
    aa28:	3a73253a 	bcc	1cd3f18 <__bss_end__+0x1cc8da8>
    aa2c:	663a6425 	ldrtvs	r6, [sl], -r5, lsr #8
    aa30:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xf6c
    aa34:	746f6e20 	strbtvc	r6, [pc], #-3616	; aa3c <__FUNCTION__.4250+0xa8>
    aa38:	616e6520 	cmnvs	lr, r0, lsr #10
    aa3c:	64656c62 	strbtvs	r6, [r5], #-3170	; 0xc62
    aa40:	0a212121 	beq	852ecc <__bss_end__+0x847d5c>
    aa44:	00000000 	andeq	r0, r0, r0
    aa48:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    aa4c:	73253a43 	teqvc	r5, #274432	; 0x43000
    aa50:	3a73253a 	bcc	1cd3f40 <__bss_end__+0x1cc8dd0>
    aa54:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    aa58:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    aa5c:	6e203a6b 	vnmulvs.f32	s6, s0, s23
    aa60:	6820746f 	stmdavs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
    aa64:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    aa68:	20676e69 	rsbcs	r6, r7, r9, ror #28
    aa6c:	63657073 	cmnvs	r5, #115	; 0x73
    aa70:	65696669 	strbvs	r6, [r9, #-1641]!	; 0x669
    aa74:	25272072 	strcs	r2, [r7, #-114]!	; 0x72
    aa78:	0a0a2763 	beq	29480c <__bss_end__+0x28969c>
    aa7c:	00000000 	andeq	r0, r0, r0
    aa80:	454e4f44 	strbmi	r4, [lr, #-3908]	; 0xf44
    aa84:	0a212121 	beq	852f10 <__bss_end__+0x847da0>
    aa88:	00000000 	andeq	r0, r0, r0
    aa8c:	756f6261 	strbvc	r6, [pc, #-609]!	; a833 <__FUNCTION__.4293+0x2b>
    aa90:	6f742074 	svcvs	0x00742074
    aa94:	69727020 	ldmdbvs	r2!, {r5, ip, sp, lr}^
    aa98:	6f20746e 	svcvs	0x0020746e
    aa9c:	6572206e 	ldrbvs	r2, [r2, #-110]!	; 0x6e
    aaa0:	616c7567 	cmnvs	ip, r7, ror #10
    aaa4:	72702072 	rsbsvc	r2, r0, #114	; 0x72
    aaa8:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
    aaac:	0000000a 	andeq	r0, r0, sl
    aab0:	63637573 	cmnvs	r3, #482344960	; 0x1cc00000
    aab4:	21737365 	cmncs	r3, r5, ror #6
    aab8:	0000000a 	andeq	r0, r0, sl

0000aabc <__FUNCTION__.4172>:
    aabc:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    aac0:	00636f6c 	rsbeq	r6, r3, ip, ror #30

0000aac4 <__FUNCTION__.4179>:
    aac4:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    aac8:	5f636f6c 	svcpl	0x00636f6c
    aacc:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    aad0:	0064656e 	rsbeq	r6, r4, lr, ror #10

0000aad4 <__FUNCTION__.4184>:
    aad4:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    aad8:	5f636f6c 	svcpl	0x00636f6c
    aadc:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    aae0:	00000000 	andeq	r0, r0, r0

0000aae4 <__FUNCTION__.4194>:
    aae4:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    aae8:	5f636f6c 	svcpl	0x00636f6c
    aaec:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    aaf0:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
    aaf4:	6174735f 	cmnvs	r4, pc, asr r3
    aaf8:	00007472 	andeq	r7, r0, r2, ror r4
    aafc:	4f525245 	svcmi	0x00525245
    ab00:	73253a52 	teqvc	r5, #335872	; 0x52000
    ab04:	3a73253a 	bcc	1cd3ff4 <__bss_end__+0x1cc8e84>
    ab08:	203a6425 	eorscs	r6, sl, r5, lsr #8
    ab0c:	534c4146 	movtpl	r4, #49478	; 0xc146
    ab10:	693c2845 	ldmdbvs	ip!, {r0, r2, r6, fp, sp}
    ab14:	5f74696e 	svcpl	0x0074696e
    ab18:	3a293e70 	bcc	a5a4e0 <__bss_end__+0xa4f370>
    ab1c:	6c616320 	stclvs	3, cr6, [r1], #-128	; 0xffffff80
    ab20:	676e696c 	strbvs	r6, [lr, -ip, ror #18]!
    ab24:	66656220 	strbtvs	r6, [r5], -r0, lsr #4
    ab28:	2065726f 	rsbcs	r7, r5, pc, ror #4
    ab2c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    ab30:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    ab34:	0a64657a 	beq	1924124 <__bss_end__+0x1918fb4>
    ab38:	00000000 	andeq	r0, r0, r0
    ab3c:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
    ab40:	6b2f6372 	blvs	be3910 <__bss_end__+0xbd87a0>
    ab44:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    ab48:	632e636f 	teqvs	lr, #-1140850687	; 0xbc000001
    ab4c:	00000000 	andeq	r0, r0, r0
    ab50:	4f525245 	svcmi	0x00525245
    ab54:	73253a52 	teqvc	r5, #335872	; 0x52000
    ab58:	3a73253a 	bcc	1cd4048 <__bss_end__+0x1cc8ed8>
    ab5c:	203a6425 	eorscs	r6, sl, r5, lsr #8
    ab60:	534c4146 	movtpl	r4, #49478	; 0xc146
    ab64:	613c2845 	teqvs	ip, r5, asr #16
    ab68:	6e67696c 	cdpvs	9, 6, cr6, cr7, cr12, {3}
    ab6c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
    ab70:	38202520 	stmdacc	r0!, {r5, r8, sl, sp}
    ab74:	203d3d20 	eorscs	r3, sp, r0, lsr #26
    ab78:	3a293e30 	bcc	a5a440 <__bss_end__+0xa4f2d0>
    ab7c:	65772220 	ldrbvs	r2, [r7, #-544]!	; 0x220
    ab80:	20647269 	rsbcs	r7, r4, r9, ror #4
    ab84:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    ab88:	6e656d6e 	cdpvs	13, 6, cr6, cr5, cr14, {3}
    ab8c:	6e203a74 	mcrvs	10, 1, r3, cr0, cr4, {3}
    ab90:	6120746f 	teqvs	r0, pc, ror #8
    ab94:	6c756d20 	ldclvs	13, cr6, [r5], #-128	; 0xffffff80
    ab98:	6c706974 	ldclvs	9, cr6, [r0], #-464	; 0xfffffe30
    ab9c:	666f2065 	strbtvs	r2, [pc], -r5, rrx
    aba0:	22213420 	eorcs	r3, r1, #32, 8	; 0x20000000
    aba4:	0000000a 	andeq	r0, r0, sl
    aba8:	4f525245 	svcmi	0x00525245
    abac:	73253a52 	teqvc	r5, #335872	; 0x52000
    abb0:	3a73253a 	bcc	1cd40a0 <__bss_end__+0x1cc8f30>
    abb4:	203a6425 	eorscs	r6, sl, r5, lsr #8
    abb8:	534c4146 	movtpl	r4, #49478	; 0xc146
    abbc:	213c2845 	teqcs	ip, r5, asr #16
    abc0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    abc4:	293e705f 	ldmdbcs	lr!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}
    abc8:	6163203a 	cmnvs	r3, sl, lsr r0
    abcc:	746f6e6e 	strbtvc	r6, [pc], #-3694	; abd4 <__FUNCTION__.4194+0xf0>
    abd0:	696e6920 	stmdbvs	lr!, {r5, r8, fp, sp, lr}^
    abd4:	6c616974 	stclvs	9, cr6, [r1], #-464	; 0xfffffe30
    abd8:	20657a69 	rsbcs	r7, r5, r9, ror #20
    abdc:	63697774 	cmnvs	r9, #116, 14	; 0x1d00000
    abe0:	0a0a2165 	beq	29317c <__bss_end__+0x28800c>
    abe4:	00000000 	andeq	r0, r0, r0

0000abe8 <__FUNCTION__.4277>:
    abe8:	755f7773 	ldrbvc	r7, [pc, #-1907]	; a47d <gpio_clr0+0x1>
    abec:	5f747261 	svcpl	0x00747261
    abf0:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
    abf4:	746e755f 	strbtvc	r7, [lr], #-1375	; 0x55f
    abf8:	00006c69 	andeq	r6, r0, r9, ror #24

0000abfc <__FUNCTION__.4289>:
    abfc:	755f7773 	ldrbvc	r7, [pc, #-1907]	; a491 <__FUNCTION__.4205+0x9>
    ac00:	5f747261 	svcpl	0x00747261
    ac04:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
    ac08:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    ac0c:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
    ac10:	00000000 	andeq	r0, r0, r0

0000ac14 <__FUNCTION__.4303>:
    ac14:	755f7773 	ldrbvc	r7, [pc, #-1907]	; a4a9 <__FUNCTION__.4215+0x15>
    ac18:	5f747261 	svcpl	0x00747261
    ac1c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    ac20:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
    ac24:	00726570 	rsbseq	r6, r2, r0, ror r5

0000ac28 <__FUNCTION__.4309>:
    ac28:	755f7773 	ldrbvc	r7, [pc, #-1907]	; a4bd <__FUNCTION__.4215+0x29>
    ac2c:	5f747261 	svcpl	0x00747261
    ac30:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
    ac34:	00000000 	andeq	r0, r0, r0

0000ac38 <__FUNCTION__.4331>:
    ac38:	755f7773 	ldrbvc	r7, [pc, #-1907]	; a4cd <__FUNCTION__.4215+0x39>
    ac3c:	5f747261 	svcpl	0x00747261
    ac40:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    ac44:	00006b74 	andeq	r6, r0, r4, ror fp

0000ac48 <__FUNCTION__.4339>:
    ac48:	755f7773 	ldrbvc	r7, [pc, #-1907]	; a4dd <__FUNCTION__.4215+0x49>
    ac4c:	5f747261 	svcpl	0x00747261
    ac50:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
    ac54:	746e755f 	strbtvc	r7, [lr], #-1375	; 0x55f
    ac58:	625f6c69 	subsvs	r6, pc, #26880	; 0x6900
    ac5c:	00006b6c 	andeq	r6, r0, ip, ror #22
    ac60:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    ac64:	73253a43 	teqvc	r5, #274432	; 0x43000
    ac68:	3a73253a 	bcc	1cd4158 <__bss_end__+0x1cc8fe8>
    ac6c:	6e3a6425 	cdpvs	4, 3, cr6, cr10, cr5, {1}
    ac70:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
    ac74:	0a303e73 	beq	c1a648 <__bss_end__+0xc0f4d8>
    ac78:	00000000 	andeq	r0, r0, r0
    ac7c:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
    ac80:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    ac84:	61752d77 	cmnvs	r5, r7, ror sp
    ac88:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
    ac8c:	00000000 	andeq	r0, r0, r0
    ac90:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    ac94:	73253a43 	teqvc	r5, #274432	; 0x43000
    ac98:	3a73253a 	bcc	1cd4188 <__bss_end__+0x1cc9018>
    ac9c:	283a6425 	ldmdacs	sl!, {r0, r2, r5, sl, sp, lr}
    aca0:	207a686d 	rsbscs	r6, sl, sp, ror #16
    aca4:	6162202d 	cmnvs	r2, sp, lsr #32
    aca8:	20296475 	eorcs	r6, r9, r5, ror r4
    acac:	64203d3c 	strtvs	r3, [r0], #-3388	; 0xd3c
    acb0:	76697265 	strbtvc	r7, [r9], -r5, ror #4
    acb4:	26206465 	strtcs	r6, [r0], -r5, ror #8
    acb8:	65642026 	strbvs	r2, [r4, #-38]!	; 0x26
    acbc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    acc0:	3d3c2064 	ldccc	0, cr2, [ip, #-400]!	; 0xfffffe70
    acc4:	686d2820 	stmdavs	sp!, {r5, fp, sp}^
    acc8:	202b207a 	eorcs	r2, fp, sl, ror r0
    accc:	64756162 	ldrbtvs	r6, [r5], #-354	; 0x162
    acd0:	00000a29 	andeq	r0, r0, r9, lsr #20
    acd4:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    acd8:	73253a43 	teqvc	r5, #274432	; 0x43000
    acdc:	3a73253a 	bcc	1cd41cc <__bss_end__+0x1cc905c>
    ace0:	693a6425 	ldmdbvs	sl!, {r0, r2, r5, sl, sp, lr}
    ace4:	736f706d 	cmnvc	pc, #109	; 0x6d
    ace8:	6c626973 	stclvs	9, cr6, [r2], #-460	; 0xfffffe34
    acec:	68203a65 	stmdavs	r0!, {r0, r2, r5, r6, r9, fp, ip, sp}
    acf0:	20657661 	rsbcs	r7, r5, r1, ror #12
    acf4:	69206e61 	stmdbvs	r0!, {r0, r5, r6, r9, sl, fp, sp, lr}
    acf8:	6e69666e 	cdpvs	6, 6, cr6, cr9, cr14, {3}
    acfc:	20657469 	rsbcs	r7, r5, r9, ror #8
    ad00:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    ad04:	2174756f 	cmncs	r4, pc, ror #10
    ad08:	00000a0a 	andeq	r0, r0, sl, lsl #20
    ad0c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    ad10:	73253a43 	teqvc	r5, #274432	; 0x43000
    ad14:	3a73253a 	bcc	1cd4204 <__bss_end__+0x1cc9094>
    ad18:	733a6425 	teqvc	sl, #620756992	; 0x25000000
    ad1c:	203c207a 	eorscs	r2, ip, sl, ror r0
    ad20:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
    ad24:	6220666f 	eorvs	r6, r0, #116391936	; 0x6f00000
    ad28:	312d6675 	teqcc	sp, r5, ror r6
    ad2c:	0000000a 	andeq	r0, r0, sl

Disassembly of section .bss:

0000ad30 <__bss_start__>:
    ad30:	00000000 	andeq	r0, r0, r0

0000ad34 <thread_sum>:
    ad34:	00000000 	andeq	r0, r0, r0

0000ad38 <freeq>:
	...

0000ad44 <nalloced>:
    ad44:	00000000 	andeq	r0, r0, r0

0000ad48 <cur_thread>:
    ad48:	00000000 	andeq	r0, r0, r0

0000ad4c <runq>:
	...

0000ad58 <scheduler_thread>:
    ad58:	00000000 	andeq	r0, r0, r0

0000ad5c <buf.4176>:
	...

0000b15c <console_uart>:
	...

0000b168 <init_p>:
    b168:	00000000 	andeq	r0, r0, r0

0000b16c <heap_ptr>:
    b16c:	00000000 	andeq	r0, r0, r0

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4b5a3605 	blmi	168d82c <__bss_end__+0x16826bc>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	12010901 	andne	r0, r1, #16384	; 0x4000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0x404
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	22011a01 	andcs	r1, r1, #4096	; 0x1000
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__bss_end__+0x10c5bb4>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	34202955 	strtcc	r2, [r0], #-2389	; 0x955
   c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000047a 	andeq	r0, r0, sl, ror r4
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	0000000b 	andeq	r0, r0, fp
      10:	00011f01 	andeq	r1, r1, r1, lsl #30
      14:	00009800 	andeq	r9, r0, r0, lsl #16
      18:	00801000 	addeq	r1, r0, r0
      1c:	0001b000 	andeq	fp, r1, r0
      20:	00000000 	andeq	r0, r0, r0
      24:	05040200 	streq	r0, [r4, #-512]	; 0x200
      28:	00746e69 	rsbseq	r6, r4, r9, ror #28
      2c:	76070403 	strvc	r0, [r7], -r3, lsl #8
      30:	03000001 	movweq	r0, #1
      34:	00760601 	rsbseq	r0, r6, r1, lsl #12
      38:	02030000 	andeq	r0, r3, #0
      3c:	0001c705 	andeq	ip, r1, r5, lsl #14
      40:	05040300 	streq	r0, [r4, #-768]	; 0x300
      44:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
      48:	ae050803 	cdpge	8, 0, cr0, cr5, cr3, {0}
      4c:	03000001 	movweq	r0, #1
      50:	00740801 	rsbseq	r0, r4, r1, lsl #16
      54:	02030000 	andeq	r0, r3, #0
      58:	0000f307 	andeq	pc, r0, r7, lsl #6
      5c:	01d10400 	bicseq	r0, r1, r0, lsl #8
      60:	34030000 	strcc	r0, [r3], #-0
      64:	00000068 	andeq	r0, r0, r8, rrx
      68:	71070403 	tstvc	r7, r3, lsl #8
      6c:	03000001 	movweq	r0, #1
      70:	016c0708 	cmneq	ip, r8, lsl #14
      74:	04030000 	streq	r0, [r3], #-0
      78:	0001a507 	andeq	sl, r1, r7, lsl #10
      7c:	03040500 	movweq	r0, #17664	; 0x4500
      80:	007d0801 	rsbseq	r0, sp, r1, lsl #16
      84:	04060000 	streq	r0, [r6], #-0
      88:	0000008c 	andeq	r0, r0, ip, lsl #1
      8c:	00007f07 	andeq	r7, r0, r7, lsl #30
      90:	007f0800 	rsbseq	r0, pc, r0, lsl #16
      94:	00a10000 	adceq	r0, r1, r0
      98:	76090000 	strvc	r0, [r9], -r0
      9c:	07000000 	streq	r0, [r0, -r0]
      a0:	01bc0a00 			; <UNDEFINED> instruction: 0x01bc0a00
      a4:	20500000 	subscs	r0, r0, r0
      a8:	00f62502 	rscseq	r2, r6, r2, lsl #10
      ac:	5e0b0000 	cdppl	0, 0, cr0, cr11, cr0, {0}
      b0:	02000001 	andeq	r0, r0, #1
      b4:	0000f627 	andeq	pc, r0, r7, lsr #12
      b8:	000b0000 	andeq	r0, fp, r0
      bc:	02000000 	andeq	r0, r0, #0
      c0:	00010629 	andeq	r0, r1, r9, lsr #12
      c4:	740c4000 	strvc	r4, [ip], #-0
      c8:	02006469 	andeq	r6, r0, #1761607680	; 0x69000000
      cc:	00005d2a 	andeq	r5, r0, sl, lsr #26
      d0:	660c4400 	strvs	r4, [ip], -r0, lsl #8
      d4:	2c02006e 	stccs	0, cr0, [r2], {110}	; 0x6e
      d8:	00000117 	andeq	r0, r0, r7, lsl r1
      dc:	72610c48 	rsbvc	r0, r1, #72, 24	; 0x4800
      e0:	2d020067 	stccs	0, cr0, [r2, #-412]	; 0xfffffe64
      e4:	0000007d 	andeq	r0, r0, sp, ror r0
      e8:	00050b4c 	andeq	r0, r5, ip, asr #22
      ec:	2f020000 	svccs	0x00020000
      f0:	0000011d 	andeq	r0, r0, sp, lsl r1
      f4:	5d080050 	stcpl	0, cr0, [r8, #-320]	; 0xfffffec0
      f8:	06000000 	streq	r0, [r0], -r0
      fc:	09000001 	stmdbeq	r0, {r0}
     100:	00000076 	andeq	r0, r0, r6, ror r0
     104:	0406000f 	streq	r0, [r6], #-15
     108:	000000a1 	andeq	r0, r0, r1, lsr #1
     10c:	0001170d 	andeq	r1, r1, sp, lsl #14
     110:	007d0e00 	rsbseq	r0, sp, r0, lsl #28
     114:	06000000 	streq	r0, [r0], -r0
     118:	00010c04 	andeq	r0, r1, r4, lsl #24
     11c:	005d0800 	subseq	r0, sp, r0, lsl #16
     120:	012e0000 	teqeq	lr, r0
     124:	760f0000 	strvc	r0, [pc], -r0
     128:	ff000000 			; <UNDEFINED> instruction: 0xff000000
     12c:	83040007 	movwhi	r0, #16391	; 0x4007
     130:	02000001 	andeq	r0, r0, #1
     134:	0000a130 	andeq	sl, r0, r0, lsr r1
     138:	012f1000 	teqeq	pc, r0
     13c:	13010000 	movwne	r0, #4096	; 0x1000
     140:	00008010 	andeq	r8, r0, r0, lsl r0
     144:	000000b8 	strheq	r0, [r0], -r8
     148:	02299c01 	eoreq	r9, r9, #256	; 0x100
     14c:	61110000 	tstvs	r1, r0
     150:	01006772 	tsteq	r0, r2, ror r7
     154:	00007d13 	andeq	r7, r0, r3, lsl sp
     158:	00000000 	andeq	r0, r0, r0
     15c:	00781200 	rsbseq	r1, r8, r0, lsl #4
     160:	02291401 	eoreq	r1, r9, #16777216	; 0x1000000
     164:	002c0000 	eoreq	r0, ip, r0
     168:	74120000 	ldrvc	r0, [r2], #-0
     16c:	01006469 	tsteq	r0, r9, ror #8
     170:	00002c17 	andeq	r2, r0, r7, lsl ip
     174:	00005800 	andeq	r5, r0, r0, lsl #16
     178:	013b1300 	teqeq	fp, r0, lsl #6
     17c:	023f0000 	eorseq	r0, pc, #0
     180:	03050000 	movweq	r0, #20480	; 0x5000
     184:	0000a488 	andeq	sl, r0, r8, lsl #9
     188:	00802014 	addeq	r2, r0, r4, lsl r0
     18c:	0003ec00 	andeq	lr, r3, r0, lsl #24
     190:	80341500 	eorshi	r1, r4, r0, lsl #10
     194:	03fd0000 	mvnseq	r0, #0
     198:	01ae0000 			; <UNDEFINED> instruction: 0x01ae0000
     19c:	01160000 	tsteq	r6, r0
     1a0:	00740251 	rsbseq	r0, r4, r1, asr r2
     1a4:	05500116 	ldrbeq	r0, [r0, #-278]	; 0x116
     1a8:	00a49c03 	adceq	r9, r4, r3, lsl #24
     1ac:	38140000 	ldmdacc	r4, {}	; <UNPREDICTABLE>
     1b0:	ec000080 	stc	0, cr0, [r0], {128}	; 0x80
     1b4:	14000003 	strne	r0, [r0], #-3
     1b8:	00008050 	andeq	r8, r0, r0, asr r0
     1bc:	00000413 	andeq	r0, r0, r3, lsl r4
     1c0:	00807415 	addeq	r7, r0, r5, lsl r4
     1c4:	0003fd00 	andeq	pc, r3, r0, lsl #26
     1c8:	0001f500 	andeq	pc, r1, r0, lsl #10
     1cc:	53011600 	movwpl	r1, #5632	; 0x1600
     1d0:	01164a01 	tsteq	r6, r1, lsl #20
     1d4:	88030552 	stmdahi	r3, {r1, r4, r6, r8, sl}
     1d8:	160000a4 	strne	r0, [r0], -r4, lsr #1
     1dc:	03055101 	movweq	r5, #20737	; 0x5101
     1e0:	0000a508 	andeq	sl, r0, r8, lsl #10
     1e4:	05500116 	ldrbeq	r0, [r0, #-278]	; 0x116
     1e8:	00a4b403 	adceq	fp, r4, r3, lsl #8
     1ec:	7d021600 	stcvc	6, cr1, [r2, #-0]
     1f0:	00740200 	rsbseq	r0, r4, r0, lsl #4
     1f4:	80781400 	rsbshi	r1, r8, r0, lsl #8
     1f8:	041a0000 	ldreq	r0, [sl], #-0
     1fc:	7c140000 	ldcvc	0, cr0, [r4], {-0}
     200:	21000080 	smlabbcs	r0, r0, r0, r0
     204:	14000004 	strne	r0, [r0], #-4
     208:	00008090 	muleq	r0, r0, r0
     20c:	00000421 	andeq	r0, r0, r1, lsr #8
     210:	0080a414 	addeq	sl, r0, r4, lsl r4
     214:	00042100 	andeq	r2, r4, r0, lsl #2
     218:	80ac1700 	adchi	r1, ip, r0, lsl #14
     21c:	04280000 	strteq	r0, [r8], #-0
     220:	01160000 	tsteq	r6, r0
     224:	00300150 	eorseq	r0, r0, r0, asr r1
     228:	2c040600 	stccs	6, cr0, [r4], {-0}
     22c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     230:	0000007f 	andeq	r0, r0, pc, ror r0
     234:	0000023f 	andeq	r0, r0, pc, lsr r2
     238:	00007609 	andeq	r7, r0, r9, lsl #12
     23c:	07000b00 	streq	r0, [r0, -r0, lsl #22]
     240:	0000022f 	andeq	r0, r0, pc, lsr #4
     244:	00006218 	andeq	r6, r0, r8, lsl r2
     248:	c8260100 	stmdagt	r6!, {r8}
     24c:	f8000080 			; <UNDEFINED> instruction: 0xf8000080
     250:	01000000 	mrseq	r0, (UNDEF: 0)
     254:	0003bf9c 	muleq	r3, ip, pc	; <UNPREDICTABLE>
     258:	006e1900 	rsbeq	r1, lr, r0, lsl #18
     25c:	00252d01 	eoreq	r2, r5, r1, lsl #26
     260:	121e0000 	andsne	r0, lr, #0
     264:	006d7573 	rsbeq	r7, sp, r3, ror r5
     268:	002c3001 	eoreq	r3, ip, r1
     26c:	006b0000 	rsbeq	r0, fp, r0
     270:	3b130000 	blcc	4c0278 <__bss_end__+0x4b5108>
     274:	bf000001 	svclt	0x00000001
     278:	05000003 	streq	r0, [r0, #-3]
     27c:	00a49403 	adceq	r9, r4, r3, lsl #8
     280:	80ec1a00 	rschi	r1, ip, r0, lsl #20
     284:	00380000 	eorseq	r0, r8, r0
     288:	02d30000 	sbcseq	r0, r3, #0
     28c:	69120000 	ldmdbvs	r2, {}	; <UNPREDICTABLE>
     290:	25310100 	ldrcs	r0, [r1, #-256]!	; 0x100
     294:	8a000000 	bhi	29c <_start-0x7d64>
     298:	1b000000 	blne	2a0 <_start-0x7d60>
     29c:	00000000 	andeq	r0, r0, r0
     2a0:	01007812 	tsteq	r0, r2, lsl r8
     2a4:	0003c432 	andeq	ip, r3, r2, lsr r4
     2a8:	0000a900 	andeq	sl, r0, r0, lsl #18
     2ac:	81041500 	tsthi	r4, r0, lsl #10
     2b0:	04390000 	ldrteq	r0, [r9], #-0
     2b4:	02c10000 	sbceq	r0, r1, #0
     2b8:	01160000 	tsteq	r6, r0
     2bc:	00770250 	rsbseq	r0, r7, r0, asr r2
     2c0:	81181700 	tsthi	r8, r0, lsl #14
     2c4:	044e0000 	strbeq	r0, [lr], #-0
     2c8:	01160000 	tsteq	r6, r0
     2cc:	00760250 	rsbseq	r0, r6, r0, asr r2
     2d0:	14000000 	strne	r0, [r0], #-0
     2d4:	000080d0 	ldrdeq	r8, [r0], -r0
     2d8:	00000468 	andeq	r0, r0, r8, ror #8
     2dc:	0080d414 	addeq	sp, r0, r4, lsl r4
     2e0:	00046f00 	andeq	r6, r4, r0, lsl #30
     2e4:	80dc1500 	sbcshi	r1, ip, r0, lsl #10
     2e8:	03fd0000 	mvnseq	r0, #0
     2ec:	02fc0000 	rscseq	r0, ip, #0
     2f0:	01160000 	tsteq	r6, r0
     2f4:	18030550 	stmdane	r3, {r4, r6, r8, sl}
     2f8:	000000a5 	andeq	r0, r0, r5, lsr #1
     2fc:	00812814 	addeq	r2, r1, r4, lsl r8
     300:	00047600 	andeq	r7, r4, r0, lsl #12
     304:	813c1500 	teqhi	ip, r0, lsl #10
     308:	03fd0000 	mvnseq	r0, #0
     30c:	031c0000 	tsteq	ip, #0
     310:	01160000 	tsteq	r6, r0
     314:	40030550 	andmi	r0, r3, r0, asr r5
     318:	000000a5 	andeq	r0, r0, r5, lsr #1
     31c:	00814c14 	addeq	r4, r1, r4, lsl ip
     320:	00041300 	andeq	r1, r4, r0, lsl #6
     324:	81601500 	cmnhi	r0, r0, lsl #10
     328:	03fd0000 	mvnseq	r0, #0
     32c:	03540000 	cmpeq	r4, #0
     330:	01160000 	tsteq	r6, r0
     334:	3a080253 	bcc	200c88 <__bss_end__+0x1f5b18>
     338:	05520116 	ldrbeq	r0, [r2, #-278]	; 0x116
     33c:	00a49403 	adceq	r9, r4, r3, lsl #8
     340:	51011600 	tstpl	r1, r0, lsl #12
     344:	a5080305 	strge	r0, [r8, #-773]	; 0x305
     348:	01160000 	tsteq	r6, r0
     34c:	54030550 	strpl	r0, [r3], #-1360	; 0x550
     350:	000000a5 	andeq	r0, r0, r5, lsr #1
     354:	00816414 	addeq	r6, r1, r4, lsl r4
     358:	00041a00 	andeq	r1, r4, r0, lsl #20
     35c:	81781400 	cmnhi	r8, r0, lsl #8
     360:	04130000 	ldreq	r0, [r3], #-0
     364:	8c150000 	ldchi	0, cr0, [r5], {-0}
     368:	fd000081 	stc2	0, cr0, [r0, #-516]	; 0xfffffdfc
     36c:	95000003 	strls	r0, [r0, #-3]
     370:	16000003 	strne	r0, [r0], -r3
     374:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     378:	5201163b 	andpl	r1, r1, #61865984	; 0x3b00000
     37c:	a4940305 	ldrge	r0, [r4], #773	; 0x305
     380:	01160000 	tsteq	r6, r0
     384:	08030551 	stmdaeq	r3, {r0, r4, r6, r8, sl}
     388:	160000a5 	strne	r0, [r0], -r5, lsr #1
     38c:	03055001 	movweq	r5, #20481	; 0x5001
     390:	0000a578 	andeq	sl, r0, r8, ror r5
     394:	81901400 	orrshi	r1, r0, r0, lsl #8
     398:	041a0000 	ldreq	r0, [sl], #-0
     39c:	98150000 	ldmdals	r5, {}	; <UNPREDICTABLE>
     3a0:	fd000081 	stc2	0, cr0, [r0, #-516]	; 0xfffffdfc
     3a4:	b5000003 	strlt	r0, [r0, #-3]
     3a8:	16000003 	strne	r0, [r0], -r3
     3ac:	03055001 	movweq	r5, #20481	; 0x5001
     3b0:	0000a59c 	muleq	r0, ip, r5
     3b4:	819c1400 	orrshi	r1, ip, r0, lsl #8
     3b8:	041a0000 	ldreq	r0, [sl], #-0
     3bc:	07000000 	streq	r0, [r0, -r0]
     3c0:	00000091 	muleq	r0, r1, r0
     3c4:	00250406 	eoreq	r0, r5, r6, lsl #8
     3c8:	481c0000 	ldmdami	ip, {}	; <UNPREDICTABLE>
     3cc:	01000001 	tsteq	r0, r1
     3d0:	00002c10 	andeq	r2, r0, r0, lsl ip
     3d4:	30030500 	andcc	r0, r3, r0, lsl #10
     3d8:	1c0000ad 	stcne	0, cr0, [r0], {173}	; 0xad
     3dc:	00000190 	muleq	r0, r0, r1
     3e0:	002c1001 	eoreq	r1, ip, r1
     3e4:	03050000 	movweq	r0, #20480	; 0x5000
     3e8:	0000ad34 	andeq	sl, r0, r4, lsr sp
     3ec:	0001da1d 	andeq	sp, r1, sp, lsl sl
     3f0:	f7400200 			; <UNDEFINED> instruction: 0xf7400200
     3f4:	06000003 	streq	r0, [r0], -r3
     3f8:	00012e04 	andeq	r2, r1, r4, lsl #28
     3fc:	04511e00 	ldrbeq	r1, [r1], #-3584	; 0xe00
     400:	29040000 	stmdbcs	r4, {}	; <UNPREDICTABLE>
     404:	00000025 	andeq	r0, r0, r5, lsr #32
     408:	00000413 	andeq	r0, r0, r3, lsl r4
     40c:	0000860e 	andeq	r8, r0, lr, lsl #12
     410:	20001f00 	andcs	r1, r0, r0, lsl #30
     414:	000001f6 	strdeq	r0, [r0], -r6
     418:	82201e04 	eorhi	r1, r0, #4, 28	; 0x40
     41c:	04000000 	streq	r0, [r0], #-0
     420:	019b2066 	orrseq	r2, fp, r6, rrx
     424:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
     428:	00015521 	andeq	r5, r1, r1, lsr #10
     42c:	39360200 	ldmdbcc	r6!, {r9}
     430:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
     434:	00000025 	andeq	r0, r0, r5, lsr #32
     438:	01061e00 	tsteq	r6, r0, lsl #28
     43c:	6d040000 	stcvs	0, cr0, [r4, #-0]
     440:	0000007d 	andeq	r0, r0, sp, ror r0
     444:	0000044e 	andeq	r0, r0, lr, asr #8
     448:	00002c0e 	andeq	r2, r0, lr, lsl #24
     44c:	8f1e0000 	svchi	0x001e0000
     450:	02000000 	andeq	r0, r0, #0
     454:	0003f733 	andeq	pc, r3, r3, lsr r7	; <UNPREDICTABLE>
     458:	00046800 	andeq	r6, r4, r0, lsl #16
     45c:	01170e00 	tsteq	r7, r0, lsl #28
     460:	7d0e0000 	stcvc	0, cr0, [lr, #-0]
     464:	00000000 	andeq	r0, r0, r0
     468:	00006a20 	andeq	r6, r0, r0, lsr #20
     46c:	203a0400 	eorscs	r0, sl, r0, lsl #8
     470:	000001e9 	andeq	r0, r0, r9, ror #3
     474:	0e207104 	sufeqs	f7, f0, f4
     478:	02000001 	andeq	r0, r0, #1
     47c:	09eb003d 	stmibeq	fp!, {r0, r2, r3, r4, r5}^
     480:	00040000 	andeq	r0, r4, r0
     484:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
     488:	000b0104 	andeq	r0, fp, r4, lsl #2
     48c:	0c010000 	stceq	0, cr0, [r1], {-0}
     490:	98000002 	stmdals	r0, {r1}
     494:	c0000000 	andgt	r0, r0, r0
     498:	98000081 	stmdals	r0, {r0, r7}
     49c:	47000004 	strmi	r0, [r0, -r4]
     4a0:	02000001 	andeq	r0, r0, #1
     4a4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     4a8:	04030074 	streq	r0, [r3], #-116	; 0x74
     4ac:	00017607 	andeq	r7, r1, r7, lsl #12
     4b0:	06010300 	streq	r0, [r1], -r0, lsl #6
     4b4:	00000076 	andeq	r0, r0, r6, ror r0
     4b8:	c7050203 	strgt	r0, [r5, -r3, lsl #4]
     4bc:	03000001 	movweq	r0, #1
     4c0:	01b30504 			; <UNDEFINED> instruction: 0x01b30504
     4c4:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     4c8:	0001ae05 	andeq	sl, r1, r5, lsl #28
     4cc:	08010300 	stmdaeq	r1, {r8, r9}
     4d0:	00000074 	andeq	r0, r0, r4, ror r0
     4d4:	f3070203 	vhsub.u8	d0, d7, d3
     4d8:	04000000 	streq	r0, [r0], #-0
     4dc:	000001d1 	ldrdeq	r0, [r0], -r1
     4e0:	00683404 	rsbeq	r3, r8, r4, lsl #8
     4e4:	04030000 	streq	r0, [r3], #-0
     4e8:	00017107 	andeq	r7, r1, r7, lsl #2
     4ec:	07080300 	streq	r0, [r8, -r0, lsl #6]
     4f0:	0000016c 	andeq	r0, r0, ip, ror #2
     4f4:	a5070403 	strge	r0, [r7, #-1027]	; 0x403
     4f8:	05000001 	streq	r0, [r0, #-1]
     4fc:	08010304 	stmdaeq	r1, {r2, r8, r9}
     500:	0000007d 	andeq	r0, r0, sp, ror r0
     504:	008c0406 	addeq	r0, ip, r6, lsl #8
     508:	7f070000 	svcvc	0x00070000
     50c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     510:	0000007f 	andeq	r0, r0, pc, ror r0
     514:	000000a1 	andeq	r0, r0, r1, lsr #1
     518:	00007609 	andeq	r7, r0, r9, lsl #12
     51c:	0a000700 	beq	2124 <_start-0x5edc>
     520:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     524:	25032050 	strcs	r2, [r3, #-80]	; 0x50
     528:	000000f6 	strdeq	r0, [r0], -r6
     52c:	00015e0b 	andeq	r5, r1, fp, lsl #28
     530:	f6270300 			; <UNDEFINED> instruction: 0xf6270300
     534:	00000000 	andeq	r0, r0, r0
     538:	0000000b 	andeq	r0, r0, fp
     53c:	06290300 	strteq	r0, [r9], -r0, lsl #6
     540:	40000001 	andmi	r0, r0, r1
     544:	6469740c 	strbtvs	r7, [r9], #-1036	; 0x40c
     548:	5d2a0300 	stcpl	3, cr0, [sl, #-0]
     54c:	44000000 	strmi	r0, [r0], #-0
     550:	006e660c 	rsbeq	r6, lr, ip, lsl #12
     554:	01172c03 	tsteq	r7, r3, lsl #24
     558:	0c480000 	mareq	acc0, r0, r8
     55c:	00677261 	rsbeq	r7, r7, r1, ror #4
     560:	007d2d03 	rsbseq	r2, sp, r3, lsl #26
     564:	0b4c0000 	bleq	130056c <__bss_end__+0x12f53fc>
     568:	00000005 	andeq	r0, r0, r5
     56c:	011d2f03 	tsteq	sp, r3, lsl #30
     570:	00500000 	subseq	r0, r0, r0
     574:	00005d08 	andeq	r5, r0, r8, lsl #26
     578:	00010600 	andeq	r0, r1, r0, lsl #12
     57c:	00760900 	rsbseq	r0, r6, r0, lsl #18
     580:	000f0000 	andeq	r0, pc, r0
     584:	00a10406 	adceq	r0, r1, r6, lsl #8
     588:	170d0000 	strne	r0, [sp, -r0]
     58c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     590:	0000007d 	andeq	r0, r0, sp, ror r0
     594:	0c040600 	stceq	6, cr0, [r4], {-0}
     598:	08000001 	stmdaeq	r0, {r0}
     59c:	0000005d 	andeq	r0, r0, sp, asr r0
     5a0:	0000012e 	andeq	r0, r0, lr, lsr #2
     5a4:	0000760f 	andeq	r7, r0, pc, lsl #12
     5a8:	0007ff00 	andeq	pc, r7, r0, lsl #30
     5ac:	00018304 	andeq	r8, r1, r4, lsl #6
     5b0:	a1300300 	teqge	r0, r0, lsl #6
     5b4:	10000000 	andne	r0, r0, r0
     5b8:	010c0051 	qaddeq	r0, r1, ip
     5bc:	00016808 	andeq	r6, r1, r8, lsl #16
     5c0:	02e70b00 	rsceq	r0, r7, #0, 22
     5c4:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
     5c8:	00000168 	andeq	r0, r0, r8, ror #2
     5cc:	02c80b00 	sbceq	r0, r8, #0, 22
     5d0:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
     5d4:	00000168 	andeq	r0, r0, r8, ror #2
     5d8:	6e630c04 	cdpvs	12, 6, cr0, cr3, cr4, {0}
     5dc:	0a010074 	beq	407b4 <__bss_end__+0x35644>
     5e0:	0000002c 	andeq	r0, r0, ip, lsr #32
     5e4:	04060008 	streq	r0, [r6], #-8
     5e8:	0000012e 	andeq	r0, r0, lr, lsr #2
     5ec:	745f5111 	ldrbvc	r5, [pc], #-273	; 5f4 <_start-0x7a0c>
     5f0:	390b0100 	stmdbcc	fp, {r8}
     5f4:	12000001 	andne	r0, r0, #1
     5f8:	00000257 	andeq	r0, r0, r7, asr r2
     5fc:	002c1001 	eoreq	r1, ip, r1
     600:	81c00000 	bichi	r0, r0, r0
     604:	00080000 	andeq	r0, r8, r0
     608:	9c010000 	stcls	0, cr0, [r1], {-0}
     60c:	000001a0 	andeq	r0, r0, r0, lsr #3
     610:	01007113 	tsteq	r0, r3, lsl r1
     614:	0001a010 	andeq	sl, r1, r0, lsl r0
     618:	0000c700 	andeq	ip, r0, r0, lsl #14
     61c:	04060000 	streq	r0, [r6], #-0
     620:	0000016e 	andeq	r0, r0, lr, ror #2
     624:	0002de14 	andeq	sp, r2, r4, lsl lr
     628:	c82b0100 	stmdagt	fp!, {r8}
     62c:	38000081 	stmdacc	r0, {r0, r7}
     630:	01000000 	mrseq	r0, (UNDEF: 0)
     634:	0001d29c 	muleq	r1, ip, r2
     638:	00711500 	rsbseq	r1, r1, r0, lsl #10
     63c:	01a02b01 	lsleq	r2, r1, #22
     640:	50010000 	andpl	r0, r1, r0
     644:	01006515 	tsteq	r0, r5, lsl r5
     648:	0001682b 	andeq	r6, r1, fp, lsr #16
     64c:	00510100 	subseq	r0, r1, r0, lsl #2
     650:	00020514 	andeq	r0, r2, r4, lsl r5
     654:	00370100 	eorseq	r0, r7, r0, lsl #2
     658:	28000082 	stmdacs	r0, {r1, r7}
     65c:	01000000 	mrseq	r0, (UNDEF: 0)
     660:	0001fe9c 	muleq	r1, ip, lr
     664:	00711500 	rsbseq	r1, r1, r0, lsl #10
     668:	01a03701 	lsleq	r3, r1, #14
     66c:	50010000 	andpl	r0, r1, r0
     670:	01006515 	tsteq	r0, r5, lsl r5
     674:	00016837 	andeq	r6, r1, r7, lsr r8
     678:	00510100 	subseq	r0, r1, r0, lsl #2
     67c:	0002d614 	andeq	sp, r2, r4, lsl r6
     680:	28290200 	stmdacs	r9!, {r9}
     684:	18000082 	stmdane	r0, {r1, r7}
     688:	01000000 	mrseq	r0, (UNDEF: 0)
     68c:	00023c9c 	muleq	r2, ip, ip
     690:	68741300 	ldmdavs	r4!, {r8, r9, ip}^
     694:	68290200 	stmdavs	r9!, {r9}
     698:	e8000001 	stmda	r0, {r0}
     69c:	16000000 	strne	r0, [r0], -r0
     6a0:	00008238 	andeq	r8, r0, r8, lsr r2
     6a4:	000001d2 	ldrdeq	r0, [r0], -r2
     6a8:	03510117 	cmpeq	r1, #-1073741819	; 0xc0000005
     6ac:	175001f3 	smmlsrne	r0, r3, r1, r0
     6b0:	03055001 	movweq	r5, #20481	; 0x5001
     6b4:	0000ad38 	andeq	sl, r0, r8, lsr sp
     6b8:	a9120000 	ldmdbge	r2, {}	; <UNPREDICTABLE>
     6bc:	01000002 	tsteq	r0, r2
     6c0:	00002512 	andeq	r2, r0, r2, lsl r5
     6c4:	00824000 	addeq	r4, r2, r0
     6c8:	00008400 	andeq	r8, r0, r0, lsl #8
     6cc:	069c0100 	ldreq	r0, [ip], r0, lsl #2
     6d0:	13000003 	movwne	r0, #3
     6d4:	12010071 	andne	r0, r1, #113	; 0x71
     6d8:	000001a0 	andeq	r0, r0, r0, lsr #3
     6dc:	00000114 	andeq	r0, r0, r4, lsl r1
     6e0:	00013b18 	andeq	r3, r1, r8, lsl fp
     6e4:	00030600 	andeq	r0, r3, r0, lsl #12
     6e8:	a8030500 	stmdage	r3, {r8, sl}
     6ec:	190000a5 	stmdbne	r0, {r0, r2, r5, r7}
     6f0:	00008258 	andeq	r8, r0, r8, asr r2
     6f4:	00000179 	andeq	r0, r0, r9, ror r1
     6f8:	00000285 	andeq	r0, r0, r5, lsl #5
     6fc:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     700:	1a000074 	bne	8d8 <_start-0x7728>
     704:	00008264 	andeq	r8, r0, r4, ror #4
     708:	00000994 	muleq	r0, r4, r9
     70c:	00827819 	addeq	r7, r2, r9, lsl r8
     710:	00099b00 	andeq	r9, r9, r0, lsl #22
     714:	0002bc00 	andeq	fp, r2, r0, lsl #24
     718:	53011700 	movwpl	r1, #5888	; 0x1700
     71c:	01174501 	tsteq	r7, r1, lsl #10
     720:	a8030552 	stmdage	r3, {r1, r4, r6, r8, sl}
     724:	170000a5 	strne	r0, [r0, -r5, lsr #1]
     728:	03055101 	movweq	r5, #20737	; 0x5101
     72c:	0000a624 	andeq	sl, r0, r4, lsr #12
     730:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     734:	00a60403 	adceq	r0, r6, r3, lsl #8
     738:	7c1a0000 	ldcvc	0, cr0, [sl], {-0}
     73c:	b1000082 	smlabblt	r0, r2, r0, r0
     740:	1a000009 	bne	76c <_start-0x7894>
     744:	0000828c 	andeq	r8, r0, ip, lsl #5
     748:	00000994 	muleq	r0, r4, r9
     74c:	0082a019 	addeq	sl, r2, r9, lsl r0
     750:	00099b00 	andeq	r9, r9, r0, lsl #22
     754:	0002fc00 	andeq	pc, r2, r0, lsl #24
     758:	53011700 	movwpl	r1, #5888	; 0x1700
     75c:	01174601 	tsteq	r7, r1, lsl #12
     760:	a8030552 	stmdage	r3, {r1, r4, r6, r8, sl}
     764:	170000a5 	strne	r0, [r0, -r5, lsr #1]
     768:	03055101 	movweq	r5, #20737	; 0x5101
     76c:	0000a624 	andeq	sl, r0, r4, lsr #12
     770:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     774:	00a62803 	adceq	r2, r6, r3, lsl #16
     778:	a41a0000 	ldrge	r0, [sl], #-0
     77c:	b1000082 	smlabblt	r0, r2, r0, r0
     780:	00000009 	andeq	r0, r0, r9
     784:	00009107 	andeq	r9, r0, r7, lsl #2
     788:	02b11200 	adcseq	r1, r1, #0, 4
     78c:	1b010000 	blne	40794 <__bss_end__+0x35624>
     790:	00000168 	andeq	r0, r0, r8, ror #2
     794:	000082c4 	andeq	r8, r0, r4, asr #5
     798:	00000098 	muleq	r0, r8, r0
     79c:	03e49c01 	mvneq	r9, #256	; 0x100
     7a0:	71130000 	tstvc	r3, r0
     7a4:	a01b0100 	andsge	r0, fp, r0, lsl #2
     7a8:	48000001 	stmdami	r0, {r0}
     7ac:	18000001 	stmdane	r0, {r0}
     7b0:	0000013b 	andeq	r0, r0, fp, lsr r1
     7b4:	000003f4 	strdeq	r0, [r0], -r4
     7b8:	a5b00305 	ldrge	r0, [r0, #773]!	; 0x305
     7bc:	651b0000 	ldrvs	r0, [fp, #-0]
     7c0:	681e0100 	ldmdavs	lr, {r8}
     7c4:	9b000001 	blls	7d0 <_start-0x7830>
     7c8:	1a000001 	bne	7d4 <_start-0x782c>
     7cc:	000082d4 	ldrdeq	r8, [r0], -r4
     7d0:	00000994 	muleq	r0, r4, r9
     7d4:	0082e819 	addeq	lr, r2, r9, lsl r8
     7d8:	00099b00 	andeq	r9, r9, r0, lsl #22
     7dc:	00038400 	andeq	r8, r3, r0, lsl #8
     7e0:	53011700 	movwpl	r1, #5888	; 0x1700
     7e4:	01174c01 	tsteq	r7, r1, lsl #24
     7e8:	b0030552 	andlt	r0, r3, r2, asr r5
     7ec:	170000a5 	strne	r0, [r0, -r5, lsr #1]
     7f0:	03055101 	movweq	r5, #20737	; 0x5101
     7f4:	0000a624 	andeq	sl, r0, r4, lsr #12
     7f8:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     7fc:	00a65803 	adceq	r5, r6, r3, lsl #16
     800:	ec1a0000 	ldc	0, cr0, [sl], {-0}
     804:	b1000082 	smlabblt	r0, r2, r0, r0
     808:	19000009 	stmdbne	r0, {r0, r3}
     80c:	000082fc 	strdeq	r8, [r0], -ip
     810:	0000023c 	andeq	r0, r0, ip, lsr r2
     814:	000003a2 	andeq	r0, r0, r2, lsr #7
     818:	03500117 	cmpeq	r0, #-1073741819	; 0xc0000005
     81c:	005001f3 	ldrsheq	r0, [r0], #-19	; 0xffffffed
     820:	0083081a 	addeq	r0, r3, sl, lsl r8
     824:	00099400 	andeq	r9, r9, r0, lsl #8
     828:	831c1900 	tsthi	ip, #0, 18
     82c:	099b0000 	ldmibeq	fp, {}	; <UNPREDICTABLE>
     830:	03da0000 	bicseq	r0, sl, #0
     834:	01170000 	tsteq	r7, r0
     838:	20080253 	andcs	r0, r8, r3, asr r2
     83c:	05520117 	ldrbeq	r0, [r2, #-279]	; 0x117
     840:	00a5b003 	adceq	fp, r5, r3
     844:	51011700 	tstpl	r1, r0, lsl #14
     848:	a6240305 	strtge	r0, [r4], -r5, lsl #6
     84c:	01170000 	tsteq	r7, r0
     850:	80030550 	andhi	r0, r3, r0, asr r5
     854:	000000a6 	andeq	r0, r0, r6, lsr #1
     858:	0083201a 	addeq	r2, r3, sl, lsl r0
     85c:	0009b100 	andeq	fp, r9, r0, lsl #2
     860:	7f080000 	svcvc	0x00080000
     864:	f4000000 	vst4.8	{d0-d3}, [r0], r0
     868:	09000003 	stmdbeq	r0, {r0, r1}
     86c:	00000076 	andeq	r0, r0, r6, ror r0
     870:	e4070005 	str	r0, [r7], #-5
     874:	12000003 	andne	r0, r0, #3
     878:	000002cd 	andeq	r0, r0, sp, asr #5
     87c:	01681c02 	cmneq	r8, r2, lsl #24
     880:	835c0000 	cmphi	ip, #0
     884:	00840000 	addeq	r0, r4, r0
     888:	9c010000 	stcls	0, cr0, [r1], {-0}
     88c:	000004a1 	andeq	r0, r0, r1, lsr #9
     890:	0200741b 	andeq	r7, r0, #452984832	; 0x1b000000
     894:	0001681d 	andeq	r6, r1, sp, lsl r8
     898:	0001b900 	andeq	fp, r1, r0, lsl #18
     89c:	013b1800 	teqeq	fp, r0, lsl #16
     8a0:	04b10000 	ldrteq	r0, [r1], #0
     8a4:	03050000 	movweq	r0, #20480	; 0x5000
     8a8:	0000a5b8 			; <UNDEFINED> instruction: 0x0000a5b8
     8ac:	00836819 	addeq	r6, r3, r9, lsl r8
     8b0:	00030b00 	andeq	r0, r3, r0, lsl #22
     8b4:	00044500 	andeq	r4, r4, r0, lsl #10
     8b8:	50011700 	andpl	r1, r1, r0, lsl #14
     8bc:	ad380305 	ldcge	3, cr0, [r8, #-20]!	; 0xffffffec
     8c0:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     8c4:	0000837c 	andeq	r8, r0, ip, ror r3
     8c8:	000009b8 			; <UNDEFINED> instruction: 0x000009b8
     8cc:	0000045f 	andeq	r0, r0, pc, asr r4
     8d0:	01510117 	cmpeq	r1, r7, lsl r1
     8d4:	50011738 	andpl	r1, r1, r8, lsr r7
     8d8:	20500a03 	subscs	r0, r0, r3, lsl #20
     8dc:	83981a00 	orrshi	r1, r8, #0, 20
     8e0:	09940000 	ldmibeq	r4, {}	; <UNPREDICTABLE>
     8e4:	ac190000 	ldcge	0, cr0, [r9], {-0}
     8e8:	9b000083 	blls	afc <_start-0x7504>
     8ec:	97000009 	strls	r0, [r0, -r9]
     8f0:	17000004 	strne	r0, [r0, -r4]
     8f4:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     8f8:	52011724 	andpl	r1, r1, #36, 14	; 0x900000
     8fc:	a5b80305 	ldrge	r0, [r8, #773]!	; 0x305
     900:	01170000 	tsteq	r7, r0
     904:	fc030551 	stc2	5, cr0, [r3], {81}	; 0x51
     908:	170000a6 	strne	r0, [r0, -r6, lsr #1]
     90c:	03055001 	movweq	r5, #20481	; 0x5001
     910:	0000a69c 	muleq	r0, ip, r6
     914:	83b01a00 	movshi	r1, #0, 20
     918:	09b10000 	ldmibeq	r1!, {}	; <UNPREDICTABLE>
     91c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     920:	0000007f 	andeq	r0, r0, pc, ror r0
     924:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
     928:	00007609 	andeq	r7, r0, r9, lsl #12
     92c:	07000800 	streq	r0, [r0, -r0, lsl #16]
     930:	000004a1 	andeq	r0, r0, r1, lsr #9
     934:	0001da1c 	andeq	sp, r1, ip, lsl sl
     938:	68150200 	ldmdavs	r5, {r9}
     93c:	e0000001 	and	r0, r0, r1
     940:	10000083 	andne	r0, r0, r3, lsl #1
     944:	01000000 	mrseq	r0, (UNDEF: 0)
     948:	008f1d9c 	umulleq	r1, pc, ip, sp	; <UNPREDICTABLE>
     94c:	33020000 	movwcc	r0, #8192	; 0x2000
     950:	00000168 	andeq	r0, r0, r8, ror #2
     954:	000083f0 	strdeq	r8, [r0], -r0
     958:	0000004c 	andeq	r0, r0, ip, asr #32
     95c:	05399c01 	ldreq	r9, [r9, #-3073]!	; 0xc01
     960:	361e0000 	ldrcc	r0, [lr], -r0
     964:	02000001 	andeq	r0, r0, #1
     968:	00011733 	andeq	r1, r1, r3, lsr r7
     96c:	0001e200 	andeq	lr, r1, r0, lsl #4
     970:	72611300 	rsbvc	r1, r1, #0, 6
     974:	33020067 	movwcc	r0, #8295	; 0x2067
     978:	0000007d 	andeq	r0, r0, sp, ror r0
     97c:	00000200 	andeq	r0, r0, r0, lsl #4
     980:	0200741b 	andeq	r7, r0, #452984832	; 0x1b000000
     984:	00016834 	andeq	r6, r1, r4, lsr r8
     988:	00021e00 	andeq	r1, r2, r0, lsl #28
     98c:	025f1f00 	subseq	r1, pc, #0, 30
     990:	3d020000 	stccc	0, cr0, [r2, #-0]
     994:	0084001a 	addeq	r0, r4, sl, lsl r0
     998:	0003f900 	andeq	pc, r3, r0, lsl #18
     99c:	842c1600 	strthi	r1, [ip], #-1536	; 0x600
     9a0:	01a60000 			; <UNDEFINED> instruction: 0x01a60000
     9a4:	01170000 	tsteq	r7, r0
     9a8:	00740251 	rsbseq	r0, r4, r1, asr r2
     9ac:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     9b0:	00ad4c03 	adceq	r4, sp, r3, lsl #24
     9b4:	20000000 	andcs	r0, r0, r0
     9b8:	00000155 	andeq	r0, r0, r5, asr r1
     9bc:	843c4602 	ldrthi	r4, [ip], #-1538	; 0x602
     9c0:	00580000 	subseq	r0, r8, r0
     9c4:	9c010000 	stcls	0, cr0, [r1], {-0}
     9c8:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
     9cc:	0002221e 	andeq	r2, r2, lr, lsl r2
     9d0:	25460200 	strbcs	r0, [r6, #-512]	; 0x200
     9d4:	3c000000 	stccc	0, cr0, [r0], {-0}
     9d8:	21000002 	tstcs	r0, r2
     9dc:	000002fd 	strdeq	r0, [r0], -sp
     9e0:	01685002 	cmneq	r8, r2
     9e4:	54010000 	strpl	r0, [r1], #-0
     9e8:	00845019 	addeq	r5, r4, r9, lsl r0
     9ec:	0001fe00 	andeq	pc, r1, r0, lsl #28
     9f0:	00057e00 	andeq	r7, r5, r0, lsl #28
     9f4:	50011700 	andpl	r1, r1, r0, lsl #14
     9f8:	00007402 	andeq	r7, r0, r2, lsl #8
     9fc:	00845819 	addeq	r5, r4, r9, lsl r8
     a00:	00023c00 	andeq	r3, r2, r0, lsl #24
     a04:	00059200 	andeq	r9, r5, r0, lsl #4
     a08:	50011700 	andpl	r1, r1, r0, lsl #14
     a0c:	00147502 	andseq	r7, r4, r2, lsl #10
     a10:	00846819 	addeq	r6, r4, r9, lsl r8
     a14:	00030b00 	andeq	r0, r3, r0, lsl #22
     a18:	0005a600 	andeq	sl, r5, r0, lsl #12
     a1c:	50011700 	andpl	r1, r1, r0, lsl #14
     a20:	00147502 	andseq	r7, r4, r2, lsl #10
     a24:	00848c16 	addeq	r8, r4, r6, lsl ip
     a28:	0009d200 	andeq	sp, r9, r0, lsl #4
     a2c:	50011700 	andpl	r1, r1, r0, lsl #14
     a30:	00007402 	andeq	r7, r0, r2, lsl #8
     a34:	019b2000 	orrseq	r2, fp, r0
     a38:	5d020000 	stcpl	0, cr0, [r2, #-0]
     a3c:	00008494 	muleq	r0, r4, r4
     a40:	00000050 	andeq	r0, r0, r0, asr r0
     a44:	06449c01 	strbeq	r9, [r4], -r1, lsl #24
     a48:	2b220000 	blcs	880a50 <__bss_end__+0x8758e0>
     a4c:	02000002 	andeq	r0, r0, #2
     a50:	00016863 	andeq	r6, r1, r3, ror #16
     a54:	84a82300 	strthi	r2, [r8], #768	; 0x300
     a58:	003c0000 	eorseq	r0, ip, r0
     a5c:	06300000 	ldrteq	r0, [r0], -r0
     a60:	fd210000 	stc2	0, cr0, [r1, #-0]
     a64:	02000002 	andeq	r0, r0, #2
     a68:	00016867 	andeq	r6, r1, r7, ror #16
     a6c:	19550100 	ldmdbne	r5, {r8}^
     a70:	000084c0 	andeq	r8, r0, r0, asr #9
     a74:	000001a6 	andeq	r0, r0, r6, lsr #3
     a78:	0000060b 	andeq	r0, r0, fp, lsl #12
     a7c:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
     a80:	01170075 	tsteq	r7, r5, ror r0
     a84:	00760250 	rsbseq	r0, r6, r0, asr r2
     a88:	84c81900 	strbhi	r1, [r8], #2304	; 0x900
     a8c:	030b0000 	movweq	r0, #45056	; 0xb000
     a90:	061f0000 	ldreq	r0, [pc], -r0
     a94:	01170000 	tsteq	r7, r0
     a98:	00760250 	rsbseq	r0, r6, r0, asr r2
     a9c:	84d81600 	ldrbhi	r1, [r8], #1536	; 0x600
     aa0:	09d20000 	ldmibeq	r2, {}^	; <UNPREDICTABLE>
     aa4:	01170000 	tsteq	r7, r0
     aa8:	00750250 	rsbseq	r0, r5, r0, asr r2
     aac:	a0160000 	andsge	r0, r6, r0
     ab0:	3c000084 	stccc	0, cr0, [r0], {132}	; 0x84
     ab4:	17000002 	strne	r0, [r0, -r2]
     ab8:	03055001 	movweq	r5, #20481	; 0x5001
     abc:	0000ad4c 	andeq	sl, r0, ip, asr #26
     ac0:	44200000 	strtmi	r0, [r0], #-0
     ac4:	02000002 	andeq	r0, r0, #2
     ac8:	0084e48d 	addeq	lr, r4, sp, lsl #9
     acc:	00009c00 	andeq	r9, r0, r0, lsl #24
     ad0:	3c9c0100 	ldfccs	f0, [ip], {0}
     ad4:	24000007 	strcs	r0, [r0], #-7
     ad8:	0000023d 	andeq	r0, r0, sp, lsr r2
     adc:	002c9002 	eoreq	r9, ip, r2
     ae0:	025d0000 	subseq	r0, sp, #0
     ae4:	37240000 	strcc	r0, [r4, -r0]!
     ae8:	02000002 	andeq	r0, r0, #2
     aec:	00002c91 	muleq	r0, r1, ip
     af0:	00027b00 	andeq	r7, r2, r0, lsl #22
     af4:	006e1b00 	rsbeq	r1, lr, r0, lsl #22
     af8:	002c9202 	eoreq	r9, ip, r2, lsl #4
     afc:	02af0000 	adceq	r0, pc, #0
     b00:	3b180000 	blcc	600b08 <__bss_end__+0x5f5998>
     b04:	4c000001 	stcmi	0, cr0, [r0], {1}
     b08:	05000007 	streq	r0, [r0, #-7]
     b0c:	00a5c403 	adceq	ip, r5, r3, lsl #8
     b10:	84f81900 	ldrbthi	r1, [r8], #2304	; 0x900
     b14:	01790000 	cmneq	r9, r0
     b18:	06a70000 	strteq	r0, [r7], r0
     b1c:	01170000 	tsteq	r7, r0
     b20:	00740250 	rsbseq	r0, r4, r0, asr r2
     b24:	85041900 	strhi	r1, [r4, #-2304]	; 0x900
     b28:	01790000 	cmneq	r9, r0
     b2c:	06bb0000 	ldrteq	r0, [fp], r0
     b30:	01170000 	tsteq	r7, r0
     b34:	14740250 	ldrbtne	r0, [r4], #-592	; 0x250
     b38:	851c1a00 	ldrhi	r1, [ip, #-2560]	; 0xa00
     b3c:	09940000 	ldmibeq	r4, {}	; <UNPREDICTABLE>
     b40:	44190000 	ldrmi	r0, [r9], #-0
     b44:	9b000085 	blls	d60 <_start-0x72a0>
     b48:	08000009 	stmdaeq	r0, {r0, r3}
     b4c:	17000007 	strne	r0, [r0, -r7]
     b50:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     b54:	52011796 	andpl	r1, r1, #39321600	; 0x2580000
     b58:	a5c40305 	strbge	r0, [r4, #773]	; 0x305
     b5c:	01170000 	tsteq	r7, r0
     b60:	fc030551 	stc2	5, cr0, [r3], {81}	; 0x51
     b64:	170000a6 	strne	r0, [r0, -r6, lsr #1]
     b68:	03055001 	movweq	r5, #20481	; 0x5001
     b6c:	0000a70c 	andeq	sl, r0, ip, lsl #14
     b70:	0c7d0217 	lfmeq	f0, 2, [sp], #-92	; 0xffffffa4
     b74:	17007502 	strne	r7, [r0, -r2, lsl #10]
     b78:	02087d02 	andeq	r7, r8, #2, 26	; 0x80
     b7c:	02170076 	andseq	r0, r7, #118	; 0x76
     b80:	7702047d 	smlsdxvc	r2, sp, r4, r0
     b84:	481a0000 	ldmdami	sl, {}	; <UNPREDICTABLE>
     b88:	b1000085 	smlabblt	r0, r5, r0, r0
     b8c:	19000009 	stmdbne	r0, {r0, r3}
     b90:	00008550 	andeq	r8, r0, r0, asr r5
     b94:	0000023c 	andeq	r0, r0, ip, lsr r2
     b98:	00000728 	andeq	r0, r0, r8, lsr #14
     b9c:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     ba0:	00ad4c03 	adceq	r4, sp, r3, lsl #24
     ba4:	60160000 	andsvs	r0, r6, r0
     ba8:	9b000085 	blls	dc4 <_start-0x723c>
     bac:	17000009 	strne	r0, [r0, -r9]
     bb0:	03055001 	movweq	r5, #20481	; 0x5001
     bb4:	0000a764 	andeq	sl, r0, r4, ror #14
     bb8:	7f080000 	svcvc	0x00080000
     bbc:	4c000000 	stcmi	0, cr0, [r0], {-0}
     bc0:	09000007 	stmdbeq	r0, {r0, r1, r2}
     bc4:	00000076 	andeq	r0, r0, r6, ror r0
     bc8:	3c070012 	stccc	0, cr0, [r7], {18}
     bcc:	20000007 	andcs	r0, r0, r7
     bd0:	0000010e 	andeq	r0, r0, lr, lsl #2
     bd4:	85807402 	strhi	r7, [r0, #1026]	; 0x402
     bd8:	00540000 	subseq	r0, r4, r0
     bdc:	9c010000 	stcls	0, cr0, [r1], {-0}
     be0:	000007c0 	andeq	r0, r0, r0, asr #15
     be4:	00858c19 	addeq	r8, r5, r9, lsl ip
     be8:	00023c00 	andeq	r3, r2, r0, lsl #24
     bec:	00077d00 	andeq	r7, r7, r0, lsl #26
     bf0:	50011700 	andpl	r1, r1, r0, lsl #14
     bf4:	ad4c0305 	stclge	3, cr0, [ip, #-20]	; 0xffffffec
     bf8:	1a000000 	bne	c00 <_start-0x7400>
     bfc:	00008598 	muleq	r0, r8, r5
     c00:	00000644 	andeq	r0, r0, r4, asr #12
     c04:	00859c1a 	addeq	r9, r5, sl, lsl ip
     c08:	0003f900 	andeq	pc, r3, r0, lsl #18
     c0c:	85ac1900 	strhi	r1, [ip, #2304]!	; 0x900
     c10:	030b0000 	movweq	r0, #45056	; 0xb000
     c14:	07a30000 	streq	r0, [r3, r0]!
     c18:	01170000 	tsteq	r7, r0
     c1c:	14740250 	ldrbtne	r0, [r4], #-592	; 0x250
     c20:	85bc1a00 	ldrhi	r1, [ip, #2560]!	; 0xa00
     c24:	09d20000 	ldmibeq	r2, {}^	; <UNPREDICTABLE>
     c28:	c4160000 	ldrgt	r0, [r6], #-0
     c2c:	9b000085 	blls	e48 <_start-0x71b8>
     c30:	17000009 	strne	r0, [r0, -r9]
     c34:	03055001 	movweq	r5, #20481	; 0x5001
     c38:	0000a784 	andeq	sl, r0, r4, lsl #15
     c3c:	83200000 	teqhi	r0, #0
     c40:	02000002 	andeq	r0, r0, #2
     c44:	0085d4a3 	addeq	sp, r5, r3, lsr #9
     c48:	00002c00 	andeq	r2, r0, r0, lsl #24
     c4c:	269c0100 	ldrcs	r0, [ip], r0, lsl #2
     c50:	18000008 	stmdane	r0, {r3}
     c54:	0000013b 	andeq	r0, r0, fp, lsr r1
     c58:	00000836 	andeq	r0, r0, r6, lsr r8
     c5c:	a5d80305 	ldrbge	r0, [r8, #773]	; 0x305
     c60:	dc1a0000 	ldcle	0, cr0, [sl], {-0}
     c64:	94000085 	strls	r0, [r0], #-133	; 0x85
     c68:	19000009 	stmdbne	r0, {r0, r3}
     c6c:	000085f0 	strdeq	r8, [r0], -r0
     c70:	0000099b 	muleq	r0, fp, r9
     c74:	0000081c 	andeq	r0, r0, ip, lsl r8
     c78:	02530117 	subseq	r0, r3, #-1073741819	; 0xc0000005
     c7c:	0117a408 	tsteq	r7, r8, lsl #8
     c80:	d8030552 	stmdale	r3, {r1, r4, r6, r8, sl}
     c84:	170000a5 	strne	r0, [r0, -r5, lsr #1]
     c88:	03055101 	movweq	r5, #20737	; 0x5101
     c8c:	0000a6fc 	strdeq	sl, [r0], -ip
     c90:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     c94:	00a7b403 	adceq	fp, r7, r3, lsl #8
     c98:	f41a0000 			; <UNDEFINED> instruction: 0xf41a0000
     c9c:	b1000085 	smlabblt	r0, r5, r0, r0
     ca0:	00000009 	andeq	r0, r0, r9
     ca4:	00007f08 	andeq	r7, r0, r8, lsl #30
     ca8:	00083600 	andeq	r3, r8, r0, lsl #12
     cac:	00760900 	rsbseq	r0, r6, r0, lsl #18
     cb0:	000f0000 	andeq	r0, pc, r0
     cb4:	00082607 	andeq	r2, r8, r7, lsl #12
     cb8:	02192000 	andseq	r2, r9, #0
     cbc:	ac020000 	stcge	0, cr0, [r2], {-0}
     cc0:	00008600 	andeq	r8, r0, r0, lsl #12
     cc4:	0000002c 	andeq	r0, r0, ip, lsr #32
     cc8:	08af9c01 	stmiaeq	pc!, {r0, sl, fp, ip, pc}	; <UNPREDICTABLE>
     ccc:	74130000 	ldrvc	r0, [r3], #-0
     cd0:	ac020068 	stcge	0, cr0, [r2], {104}	; 0x68
     cd4:	00000168 	andeq	r0, r0, r8, ror #2
     cd8:	000002c2 	andeq	r0, r0, r2, asr #5
     cdc:	00013b18 	andeq	r3, r1, r8, lsl fp
     ce0:	0008af00 	andeq	sl, r8, r0, lsl #30
     ce4:	e8030500 	stmda	r3, {r8, sl}
     ce8:	1a0000a5 	bne	f84 <_start-0x707c>
     cec:	00008608 	andeq	r8, r0, r8, lsl #12
     cf0:	00000994 	muleq	r0, r4, r9
     cf4:	00861c19 	addeq	r1, r6, r9, lsl ip
     cf8:	00099b00 	andeq	r9, r9, r0, lsl #22
     cfc:	0008a500 	andeq	sl, r8, r0, lsl #10
     d00:	53011700 	movwpl	r1, #5888	; 0x1700
     d04:	17ad0802 	strne	r0, [sp, r2, lsl #16]!
     d08:	03055201 	movweq	r5, #20993	; 0x5201
     d0c:	0000a5e8 	andeq	sl, r0, r8, ror #11
     d10:	05510117 	ldrbeq	r0, [r1, #-279]	; 0x117
     d14:	00a6fc03 	adceq	pc, r6, r3, lsl #24
     d18:	50011700 	andpl	r1, r1, r0, lsl #14
     d1c:	a7b40305 	ldrge	r0, [r4, r5, lsl #6]!
     d20:	1a000000 	bne	d28 <_start-0x72d8>
     d24:	00008620 	andeq	r8, r0, r0, lsr #12
     d28:	000009b1 			; <UNDEFINED> instruction: 0x000009b1
     d2c:	04a10700 	strteq	r0, [r1], #1792	; 0x700
     d30:	99200000 	stmdbls	r0!, {}	; <UNPREDICTABLE>
     d34:	02000002 	andeq	r0, r0, #2
     d38:	00862cb3 			; <UNDEFINED> instruction: 0x00862cb3
     d3c:	00002c00 	andeq	r2, r0, r0, lsl #24
     d40:	299c0100 	ldmibcs	ip, {r8}
     d44:	1e000009 	cdpne	0, 0, cr0, cr0, cr9, {0}
     d48:	000008ee 	andeq	r0, r0, lr, ror #17
     d4c:	005db302 	subseq	fp, sp, r2, lsl #6
     d50:	02e30000 	rsceq	r0, r3, #0
     d54:	3b180000 	blcc	600d5c <__bss_end__+0x5f5bec>
     d58:	29000001 	stmdbcs	r0, {r0}
     d5c:	05000009 	streq	r0, [r0, #-9]
     d60:	00a5f403 	adceq	pc, r5, r3, lsl #8
     d64:	86341a00 	ldrthi	r1, [r4], -r0, lsl #20
     d68:	09940000 	ldmibeq	r4, {}	; <UNPREDICTABLE>
     d6c:	48190000 	ldmdami	r9, {}	; <UNPREDICTABLE>
     d70:	9b000086 	blls	f90 <_start-0x7070>
     d74:	1f000009 	svcne	0x00000009
     d78:	17000009 	strne	r0, [r0, -r9]
     d7c:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     d80:	520117b4 	andpl	r1, r1, #180, 14	; 0x2d00000
     d84:	a5f40305 	ldrbge	r0, [r4, #773]!	; 0x305
     d88:	01170000 	tsteq	r7, r0
     d8c:	fc030551 	stc2	5, cr0, [r3], {81}	; 0x51
     d90:	170000a6 	strne	r0, [r0, -r6, lsr #1]
     d94:	03055001 	movweq	r5, #20481	; 0x5001
     d98:	0000a7b4 			; <UNDEFINED> instruction: 0x0000a7b4
     d9c:	864c1a00 	strbhi	r1, [ip], -r0, lsl #20
     da0:	09b10000 	ldmibeq	r1!, {}	; <UNPREDICTABLE>
     da4:	07000000 	streq	r0, [r0, -r0]
     da8:	00000826 	andeq	r0, r0, r6, lsr #16
     dac:	0002ec21 	andeq	lr, r2, r1, lsr #24
     db0:	6e0a0200 	cdpvs	2, 0, cr0, cr10, cr0, {0}
     db4:	05000001 	streq	r0, [r0, #-1]
     db8:	00ad4c03 	adceq	r4, sp, r3, lsl #24
     dbc:	02932100 	addseq	r2, r3, #0, 2
     dc0:	0a020000 	beq	80dc8 <__bss_end__+0x75c58>
     dc4:	0000016e 	andeq	r0, r0, lr, ror #2
     dc8:	ad380305 	ldcge	3, cr0, [r8, #-20]!	; 0xffffffec
     dcc:	de210000 	cdple	0, 2, cr0, cr1, cr0, {0}
     dd0:	02000001 	andeq	r0, r0, #1
     dd4:	0001680c 	andeq	r6, r1, ip, lsl #16
     dd8:	48030500 	stmdami	r3, {r8, sl}
     ddc:	210000ad 	smlatbcs	r0, sp, r0, r0
     de0:	000002b7 			; <UNDEFINED> instruction: 0x000002b7
     de4:	01680d02 	cmneq	r8, r2, lsl #26
     de8:	03050000 	movweq	r0, #20480	; 0x5000
     dec:	0000ad58 	andeq	sl, r0, r8, asr sp
     df0:	64697425 	strbtvs	r7, [r9], #-1061	; 0x425
     df4:	2c100200 	lfmcs	f0, 4, [r0], {-0}
     df8:	05000000 	streq	r0, [r0, #-0]
     dfc:	00a3e803 	adceq	lr, r3, r3, lsl #16
     e00:	03082100 	movweq	r2, #33024	; 0x8100
     e04:	12020000 	andne	r0, r2, #0
     e08:	0000002c 	andeq	r0, r0, ip, lsr #32
     e0c:	ad440305 	stclge	3, cr0, [r4, #-20]	; 0xffffffec
     e10:	f61f0000 			; <UNDEFINED> instruction: 0xf61f0000
     e14:	05000001 	streq	r0, [r0, #-1]
     e18:	0451261e 	ldrbeq	r2, [r1], #-1566	; 0x61e
     e1c:	29050000 	stmdbcs	r5, {}	; <UNPREDICTABLE>
     e20:	00000025 	andeq	r0, r0, r5, lsr #32
     e24:	000009b1 			; <UNDEFINED> instruction: 0x000009b1
     e28:	0000860e 	andeq	r8, r0, lr, lsl #12
     e2c:	1f002700 	svcne	0x00002700
     e30:	00000082 	andeq	r0, r0, r2, lsl #1
     e34:	73266605 	teqvc	r6, #5242880	; 0x500000
     e38:	05000002 	streq	r0, [r0, #-2]
     e3c:	00007d6e 	andeq	r7, r0, lr, ror #26
     e40:	0009d200 	andeq	sp, r9, r0, lsl #4
     e44:	002c0e00 	eoreq	r0, ip, r0, lsl #28
     e48:	2c0e0000 	stccs	0, cr0, [lr], {-0}
     e4c:	00000000 	andeq	r0, r0, r0
     e50:	0002f128 	andeq	pc, r2, r8, lsr #2
     e54:	e8460300 	stmda	r6, {r8, r9}^
     e58:	0e000009 	cdpeq	0, 0, cr0, cr0, cr9, {0}
     e5c:	000009e8 	andeq	r0, r0, r8, ror #19
     e60:	0009e80e 	andeq	lr, r9, lr, lsl #16
     e64:	04060000 	streq	r0, [r6], #-0
     e68:	0000005d 	andeq	r0, r0, sp, asr r0
     e6c:	0009ce00 	andeq	ip, r9, r0, lsl #28
     e70:	f2000400 	vshl.s8	d0, d0, d0
     e74:	04000003 	streq	r0, [r0], #-3
     e78:	00000b01 	andeq	r0, r0, r1, lsl #22
     e7c:	03110100 	tsteq	r1, #0, 2
     e80:	00980000 	addseq	r0, r8, r0
     e84:	86c40000 	strbhi	r0, [r4], r0
     e88:	05380000 	ldreq	r0, [r8, #-0]!
     e8c:	02e20000 	rsceq	r0, r2, #0
     e90:	04020000 	streq	r0, [r2], #-0
     e94:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
     e98:	034a0300 	movteq	r0, #41728	; 0xa300
     e9c:	d4030000 	strle	r0, [r3], #-0
     ea0:	00000037 	andeq	r0, r0, r7, lsr r0
     ea4:	76070404 	strvc	r0, [r7], -r4, lsl #8
     ea8:	04000001 	streq	r0, [r0], #-1
     eac:	00760601 	rsbseq	r0, r6, r1, lsl #12
     eb0:	02040000 	andeq	r0, r4, #0
     eb4:	0001c705 	andeq	ip, r1, r5, lsl #14
     eb8:	05040400 	streq	r0, [r4, #-1024]	; 0x400
     ebc:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
     ec0:	ae050804 	cdpge	8, 0, cr0, cr5, cr4, {0}
     ec4:	04000001 	streq	r0, [r0], #-1
     ec8:	00740801 	rsbseq	r0, r4, r1, lsl #16
     ecc:	02040000 	andeq	r0, r4, #0
     ed0:	0000f307 	andeq	pc, r0, r7, lsl #6
     ed4:	07040400 	streq	r0, [r4, -r0, lsl #8]
     ed8:	00000171 	andeq	r0, r0, r1, ror r1
     edc:	6c070804 	stcvs	8, cr0, [r7], {4}
     ee0:	04000001 	streq	r0, [r0], #-1
     ee4:	01a50704 			; <UNDEFINED> instruction: 0x01a50704
     ee8:	04050000 	streq	r0, [r5], #-0
     eec:	7d080104 	stfvcs	f0, [r8, #-16]
     ef0:	06000000 	streq	r0, [r0], -r0
     ef4:	00008c04 	andeq	r8, r0, r4, lsl #24
     ef8:	007f0700 	rsbseq	r0, pc, r0, lsl #14
     efc:	7f080000 	svcvc	0x00080000
     f00:	a1000000 	mrsge	r0, (UNDEF: 0)
     f04:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     f08:	00000076 	andeq	r0, r0, r6, ror r0
     f0c:	44030007 	strmi	r0, [r3], #-7
     f10:	02000003 	andeq	r0, r0, #3
     f14:	00005a1b 	andeq	r5, r0, fp, lsl sl
     f18:	20140a00 	andscs	r0, r4, r0, lsl #20
     f1c:	01062702 	tsteq	r6, r2, lsl #14
     f20:	bd0b0000 	stclt	0, cr0, [fp, #-0]
     f24:	02000003 	andeq	r0, r0, #3
     f28:	00011729 	andeq	r1, r1, r9, lsr #14
     f2c:	ae0c0000 	cdpge	0, 0, cr0, cr12, cr0, {0}
     f30:	02000003 	andeq	r0, r0, #3
     f34:	0000372a 	andeq	r3, r0, sl, lsr #14
     f38:	0c200000 	stceq	0, cr0, [r0], #-0
     f3c:	000002e7 	andeq	r0, r0, r7, ror #5
     f40:	011c2b02 	tsteq	ip, r2, lsl #22
     f44:	20040000 	andcs	r0, r4, r0
     f48:	0002c80c 	andeq	ip, r2, ip, lsl #16
     f4c:	1c2b0200 	sfmne	f0, 4, [fp], #-0
     f50:	08000001 	stmdaeq	r0, {r0}
     f54:	033b0c20 	teqeq	fp, #32, 24	; 0x2000
     f58:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
     f5c:	0000011c 	andeq	r0, r0, ip, lsl r1
     f60:	5b0d200c 	blpl	348f98 <__bss_end__+0x33de28>
     f64:	02000003 	andeq	r0, r0, #3
     f68:	00003730 	andeq	r3, r0, r0, lsr r7
     f6c:	1f010400 	svcne	0x00010400
     f70:	08002010 	stmdaeq	r0, {r4, sp}
     f74:	000000a1 	andeq	r0, r0, r1, lsr #1
     f78:	00000117 	andeq	r0, r0, r7, lsl r1
     f7c:	0000760e 	andeq	r7, r0, lr, lsl #12
     f80:	001fff00 	andseq	pc, pc, r0, lsl #30
     f84:	0001060f 	andeq	r0, r1, pc, lsl #12
     f88:	00370f00 	eorseq	r0, r7, r0, lsl #30
     f8c:	da030000 	ble	c0f94 <__bss_end__+0xb5e24>
     f90:	02000003 	andeq	r0, r0, #3
     f94:	0000ac31 	andeq	sl, r0, r1, lsr ip
     f98:	03b41000 			; <UNDEFINED> instruction: 0x03b41000
     f9c:	56020000 	strpl	r0, [r2], -r0
     fa0:	00000037 	andeq	r0, r0, r7, lsr r0
     fa4:	00014603 	andeq	r4, r1, r3, lsl #12
     fa8:	00711100 	rsbseq	r1, r1, r0, lsl #2
     fac:	01465602 	cmpeq	r6, r2, lsl #12
     fb0:	06000000 	streq	r0, [r0], -r0
     fb4:	00012104 	andeq	r2, r1, r4, lsl #2
     fb8:	03a51000 			; <UNDEFINED> instruction: 0x03a51000
     fbc:	51020000 	mrspl	r0, (UNDEF: 2)
     fc0:	00000025 	andeq	r0, r0, r5, lsr #32
     fc4:	00016603 	andeq	r6, r1, r3, lsl #12
     fc8:	00711100 	rsbseq	r1, r1, r0, lsl #2
     fcc:	01465102 	cmpeq	r6, r2, lsl #2
     fd0:	10000000 	andne	r0, r0, r0
     fd4:	000003c3 	andeq	r0, r0, r3, asr #7
     fd8:	00255402 	eoreq	r5, r5, r2, lsl #8
     fdc:	80030000 	andhi	r0, r3, r0
     fe0:	11000001 	tstne	r0, r1
     fe4:	54020071 	strpl	r0, [r2], #-113	; 0x71
     fe8:	00000146 	andeq	r0, r0, r6, asr #2
     fec:	031c1000 	tsteq	ip, #0
     ff0:	5a020000 	bpl	80ff8 <__bss_end__+0x75e88>
     ff4:	00000025 	andeq	r0, r0, r5, lsr #32
     ff8:	0001ae03 	andeq	sl, r1, r3, lsl #28
     ffc:	00631100 	rsbeq	r1, r3, r0, lsl #2
    1000:	01465a02 	cmpeq	r6, r2, lsl #20
    1004:	65110000 	ldrvs	r0, [r1, #-0]
    1008:	ae5a0200 	cdpge	2, 5, cr0, cr10, cr0, {0}
    100c:	12000001 	andne	r0, r0, #1
    1010:	000002c8 	andeq	r0, r0, r8, asr #5
    1014:	00375d02 	eorseq	r5, r7, r2, lsl #26
    1018:	06000000 	streq	r0, [r0], -r0
    101c:	0000a104 	andeq	sl, r0, r4, lsl #2
    1020:	03781000 	cmneq	r8, #0
    1024:	57020000 	strpl	r0, [r2, -r0]
    1028:	00000037 	andeq	r0, r0, r7, lsr r0
    102c:	0001ce03 	andeq	ip, r1, r3, lsl #28
    1030:	00711100 	rsbseq	r1, r1, r0, lsl #2
    1034:	01465702 	cmpeq	r6, r2, lsl #14
    1038:	10000000 	andne	r0, r0, r0
    103c:	00000393 	muleq	r0, r3, r3
    1040:	00256402 	eoreq	r6, r5, r2, lsl #8
    1044:	07030000 	streq	r0, [r3, -r0]
    1048:	11000002 	tstne	r0, r2
    104c:	64020063 	strvs	r0, [r2], #-99	; 0x63
    1050:	00000146 	andeq	r0, r0, r6, asr #2
    1054:	02007811 	andeq	r7, r0, #1114112	; 0x110000
    1058:	0000a164 	andeq	sl, r0, r4, ror #2
    105c:	02e71200 	rsceq	r1, r7, #0, 4
    1060:	65020000 	strvs	r0, [r2, #-0]
    1064:	00000037 	andeq	r0, r0, r7, lsr r0
    1068:	0002c812 	andeq	ip, r2, r2, lsl r8
    106c:	37660200 	strbcc	r0, [r6, -r0, lsl #4]!
    1070:	00000000 	andeq	r0, r0, r0
    1074:	0003cb13 	andeq	ip, r3, r3, lsl fp
    1078:	c4080100 	strgt	r0, [r8], #-256	; 0x100
    107c:	80000086 	andhi	r0, r0, r6, lsl #1
    1080:	01000000 	mrseq	r0, (UNDEF: 0)
    1084:	00029d9c 	muleq	r2, ip, sp
    1088:	00631400 	rsbeq	r1, r3, r0, lsl #8
    108c:	01460801 	cmpeq	r6, r1, lsl #16
    1090:	03040000 	movweq	r0, #16384	; 0x4000
    1094:	3b150000 	blcc	54109c <__bss_end__+0x535f2c>
    1098:	ad000001 	stcge	0, cr0, [r0, #-4]
    109c:	05000002 	streq	r0, [r0, #-2]
    10a0:	00a7e003 	adceq	lr, r7, r3
    10a4:	012c1600 	teqeq	ip, r0, lsl #12
    10a8:	86dc0000 	ldrbhi	r0, [ip], r0
    10ac:	00140000 	andseq	r0, r4, r0
    10b0:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    10b4:	00000255 	andeq	r0, r0, r5, asr r2
    10b8:	00013c17 	andeq	r3, r1, r7, lsl ip
    10bc:	00032500 	andeq	r2, r3, r0, lsl #10
    10c0:	4c160000 	ldcmi	0, cr0, [r6], {-0}
    10c4:	f0000001 			; <UNDEFINED> instruction: 0xf0000001
    10c8:	14000086 	strne	r0, [r0], #-134	; 0x86
    10cc:	01000000 	mrseq	r0, (UNDEF: 0)
    10d0:	00027209 	andeq	r7, r2, r9, lsl #4
    10d4:	015c1700 	cmpeq	ip, r0, lsl #14
    10d8:	03460000 	movteq	r0, #24576	; 0x6000
    10dc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    10e0:	00008728 	andeq	r8, r0, r8, lsr #14
    10e4:	00000992 	muleq	r0, r2, r9
    10e8:	01530119 	cmpeq	r3, r9, lsl r1
    10ec:	5201193a 	andpl	r1, r1, #950272	; 0xe8000
    10f0:	a7e00305 	strbge	r0, [r0, r5, lsl #6]!
    10f4:	01190000 	tsteq	r9, r0
    10f8:	50030551 	andpl	r0, r3, r1, asr r5
    10fc:	190000a8 	stmdbne	r0, {r3, r5, r7}
    1100:	03055001 	movweq	r5, #20481	; 0x5001
    1104:	0000a814 	andeq	sl, r0, r4, lsl r8
    1108:	7f080000 	svcvc	0x00080000
    110c:	ad000000 	stcge	0, cr0, [r0, #-0]
    1110:	09000002 	stmdbeq	r0, {r1}
    1114:	00000076 	andeq	r0, r0, r6, ror r0
    1118:	9d070008 	stcls	0, cr0, [r7, #-32]	; 0xffffffe0
    111c:	13000002 	movwne	r0, #2
    1120:	000003d4 	ldrdeq	r0, [r0], -r4
    1124:	87440d01 	strbhi	r0, [r4, -r1, lsl #26]
    1128:	00440000 	subeq	r0, r4, r0
    112c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1130:	00000324 	andeq	r0, r0, r4, lsr #6
    1134:	01006314 	tsteq	r0, r4, lsl r3
    1138:	0001460d 	andeq	r4, r1, sp, lsl #12
    113c:	00036700 	andeq	r6, r3, r0, lsl #14
    1140:	013b1500 	teqeq	fp, r0, lsl #10
    1144:	03340000 	teqeq	r4, #0
    1148:	03050000 	movweq	r0, #20480	; 0x5000
    114c:	0000a7ec 	andeq	sl, r0, ip, ror #15
    1150:	0087601a 	addeq	r6, r7, sl, lsl r0
    1154:	0009a800 	andeq	sl, r9, r0, lsl #16
    1158:	87741b00 	ldrbhi	r1, [r4, -r0, lsl #22]!
    115c:	09920000 	ldmibeq	r2, {}	; <UNPREDICTABLE>
    1160:	031a0000 	tsteq	sl, #0
    1164:	01190000 	tsteq	r9, r0
    1168:	193f0153 	ldmdbne	pc!, {r0, r1, r4, r6, r8}	; <UNPREDICTABLE>
    116c:	03055201 	movweq	r5, #20993	; 0x5201
    1170:	0000a7ec 	andeq	sl, r0, ip, ror #15
    1174:	05510119 	ldrbeq	r0, [r1, #-281]	; 0x119
    1178:	00a85003 	adceq	r5, r8, r3
    117c:	50011900 	andpl	r1, r1, r0, lsl #18
    1180:	a85c0305 	ldmdage	ip, {r0, r2, r8, r9}^
    1184:	1a000000 	bne	118c <_start-0x6e74>
    1188:	00008778 	andeq	r8, r0, r8, ror r7
    118c:	000009af 	andeq	r0, r0, pc, lsr #19
    1190:	007f0800 	rsbseq	r0, pc, r0, lsl #16
    1194:	03340000 	teqeq	r4, #0
    1198:	76090000 	strvc	r0, [r9], -r0
    119c:	05000000 	streq	r0, [r0, #-0]
    11a0:	03240700 	teqeq	r4, #0, 14
    11a4:	82130000 	andshi	r0, r3, #0
    11a8:	01000003 	tsteq	r0, r3
    11ac:	00878812 	addeq	r8, r7, r2, lsl r8
    11b0:	0001b400 	andeq	fp, r1, r0, lsl #8
    11b4:	459c0100 	ldrmi	r0, [ip, #256]	; 0x100
    11b8:	14000005 	strne	r0, [r0], #-5
    11bc:	12010063 	andne	r0, r1, #99	; 0x63
    11c0:	00000146 	andeq	r0, r0, r6, asr #2
    11c4:	00000388 	andeq	r0, r0, r8, lsl #7
    11c8:	00035b1c 	andeq	r5, r3, ip, lsl fp
    11cc:	37120100 	ldrcc	r0, [r2, -r0, lsl #2]
    11d0:	a6000000 	strge	r0, [r0], -r0
    11d4:	15000003 	strne	r0, [r0, #-3]
    11d8:	0000013b 	andeq	r0, r0, fp, lsr r1
    11dc:	00000545 	andeq	r0, r0, r5, asr #10
    11e0:	a7f40305 	ldrbge	r0, [r4, r5, lsl #6]!
    11e4:	651d0000 	ldrvs	r0, [sp, #-0]
    11e8:	a11b0100 	tstge	fp, r0, lsl #2
    11ec:	d2000000 	andle	r0, r0, #0
    11f0:	16000003 	strne	r0, [r0], -r3
    11f4:	0000014c 	andeq	r0, r0, ip, asr #2
    11f8:	000087e0 	andeq	r8, r0, r0, ror #15
    11fc:	00000008 	andeq	r0, r0, r8
    1200:	03a11801 			; <UNDEFINED> instruction: 0x03a11801
    1204:	5c1e0000 	ldcpl	0, cr0, [lr], {-0}
    1208:	01000001 	tsteq	r0, r1
    120c:	66160054 			; <UNDEFINED> instruction: 0x66160054
    1210:	0c000001 	stceq	0, cr0, [r0], {1}
    1214:	18000088 	stmdane	r0, {r3, r7}
    1218:	01000000 	mrseq	r0, (UNDEF: 0)
    121c:	0003bc19 	andeq	fp, r3, r9, lsl ip
    1220:	01761e00 	cmneq	r6, r0, lsl #28
    1224:	54010000 	strpl	r0, [r1], #-0
    1228:	012c1600 	teqeq	ip, r0, lsl #12
    122c:	88480000 	stmdahi	r8, {}^	; <UNPREDICTABLE>
    1230:	00140000 	andseq	r0, r4, r0
    1234:	1a010000 	bne	4123c <__bss_end__+0x360cc>
    1238:	000003d7 	ldrdeq	r0, [r0], -r7
    123c:	00013c1e 	andeq	r3, r1, lr, lsl ip
    1240:	00540100 	subseq	r0, r4, r0, lsl #2
    1244:	0001801f 	andeq	r8, r1, pc, lsl r0
    1248:	00888000 	addeq	r8, r8, r0
    124c:	00001800 	andeq	r1, r0, r0, lsl #16
    1250:	241c0100 	ldrcs	r0, [ip], #-256	; 0x100
    1254:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    1258:	00000199 	muleq	r0, r9, r1
    125c:	11e6f206 	mvnne	pc, r6, lsl #4
    1260:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1264:	00000190 	muleq	r0, r0, r1
    1268:	18205401 	stmdane	r0!, {r0, sl, ip, lr}
    126c:	21000000 	mrscs	r0, (UNDEF: 0)
    1270:	000001a2 	andeq	r0, r0, r2, lsr #3
    1274:	00000408 	andeq	r0, r0, r8, lsl #8
    1278:	00014c22 	andeq	r4, r1, r2, lsr #24
    127c:	00888000 	addeq	r8, r8, r0
    1280:	00001000 	andeq	r1, r0, r0
    1284:	1e5b0200 	cdpne	2, 5, cr0, cr11, cr0, {0}
    1288:	0000015c 	andeq	r0, r0, ip, asr r1
    128c:	00005401 	andeq	r5, r0, r1, lsl #8
    1290:	87a01b00 	strhi	r1, [r0, r0, lsl #22]!
    1294:	09b60000 	ldmibeq	r6!, {}	; <UNPREDICTABLE>
    1298:	04440000 	strbeq	r0, [r4], #-0
    129c:	01190000 	tsteq	r9, r0
    12a0:	140a0352 	strne	r0, [sl], #-850	; 0x352
    12a4:	51011920 	tstpl	r1, r0, lsr #18
    12a8:	01193001 	tsteq	r9, r1
    12ac:	00740250 	rsbseq	r0, r4, r0, asr r2
    12b0:	87f41a00 	ldrbhi	r1, [r4, r0, lsl #20]!
    12b4:	09a80000 	stmibeq	r8!, {}	; <UNPREDICTABLE>
    12b8:	081b0000 	ldmdaeq	fp, {}	; <UNPREDICTABLE>
    12bc:	92000088 	andls	r0, r0, #136	; 0x88
    12c0:	7b000009 	blvc	12ec <_start-0x6d14>
    12c4:	19000004 	stmdbne	r0, {r2}
    12c8:	48015301 	stmdami	r1, {r0, r8, r9, ip, lr}
    12cc:	05520119 	ldrbeq	r0, [r2, #-281]	; 0x119
    12d0:	00a7f403 	adceq	pc, r7, r3, lsl #8
    12d4:	51011900 	tstpl	r1, r0, lsl #18
    12d8:	a8500305 	ldmdage	r0, {r0, r2, r8, r9}^
    12dc:	01190000 	tsteq	r9, r0
    12e0:	80030550 	andhi	r0, r3, r0, asr r5
    12e4:	000000a8 	andeq	r0, r0, r8, lsr #1
    12e8:	00880c1a 	addeq	r0, r8, sl, lsl ip
    12ec:	0009af00 	andeq	sl, r9, r0, lsl #30
    12f0:	88301a00 	ldmdahi	r0!, {r9, fp, ip}
    12f4:	09a80000 	stmibeq	r8!, {}	; <UNPREDICTABLE>
    12f8:	441b0000 	ldrmi	r0, [fp], #-0
    12fc:	92000088 	andls	r0, r0, #136	; 0x88
    1300:	bb000009 	bllt	132c <_start-0x6cd4>
    1304:	19000004 	stmdbne	r0, {r2}
    1308:	49015301 	stmdbmi	r1, {r0, r8, r9, ip, lr}
    130c:	05520119 	ldrbeq	r0, [r2, #-281]	; 0x119
    1310:	00a7f403 	adceq	pc, r7, r3, lsl #8
    1314:	51011900 	tstpl	r1, r0, lsl #18
    1318:	a8500305 	ldmdage	r0, {r0, r2, r8, r9}^
    131c:	01190000 	tsteq	r9, r0
    1320:	9c030550 	cfstr32ls	mvfx0, [r3], {80}	; 0x50
    1324:	000000a8 	andeq	r0, r0, r8, lsr #1
    1328:	0088481a 	addeq	r4, r8, sl, lsl r8
    132c:	0009af00 	andeq	sl, r9, r0, lsl #30
    1330:	88681a00 	stmdahi	r8!, {r9, fp, ip}^
    1334:	09a80000 	stmibeq	r8!, {}	; <UNPREDICTABLE>
    1338:	7c1b0000 	ldcvc	0, cr0, [fp], {-0}
    133c:	92000088 	andls	r0, r0, #136	; 0x88
    1340:	fb000009 	blx	136e <_start-0x6c92>
    1344:	19000004 	stmdbne	r0, {r2}
    1348:	4a015301 	bmi	55f54 <__bss_end__+0x4ade4>
    134c:	05520119 	ldrbeq	r0, [r2, #-281]	; 0x119
    1350:	00a7f403 	adceq	pc, r7, r3, lsl #8
    1354:	51011900 	tstpl	r1, r0, lsl #18
    1358:	a8500305 	ldmdage	r0, {r0, r2, r8, r9}^
    135c:	01190000 	tsteq	r9, r0
    1360:	b8030550 	stmdalt	r3, {r4, r6, r8, sl}
    1364:	000000a8 	andeq	r0, r0, r8, lsr #1
    1368:	0088801a 	addeq	r8, r8, sl, lsl r0
    136c:	0009af00 	andeq	sl, r9, r0, lsl #30
    1370:	88f41a00 	ldmhi	r4!, {r9, fp, ip}^
    1374:	09a80000 	stmibeq	r8!, {}	; <UNPREDICTABLE>
    1378:	081b0000 	ldmdaeq	fp, {}	; <UNPREDICTABLE>
    137c:	92000089 	andls	r0, r0, #137	; 0x89
    1380:	3b000009 	blcc	13ac <_start-0x6c54>
    1384:	19000005 	stmdbne	r0, {r0, r2}
    1388:	4c015301 	stcmi	3, cr5, [r1], {1}
    138c:	05520119 	ldrbeq	r0, [r2, #-281]	; 0x119
    1390:	00a7f403 	adceq	pc, r7, r3, lsl #8
    1394:	51011900 	tstpl	r1, r0, lsl #18
    1398:	a8500305 	ldmdage	r0, {r0, r2, r8, r9}^
    139c:	01190000 	tsteq	r9, r0
    13a0:	dc030550 	cfstr32le	mvfx0, [r3], {80}	; 0x50
    13a4:	000000a8 	andeq	r0, r0, r8, lsr #1
    13a8:	00890c1a 	addeq	r0, r9, sl, lsl ip
    13ac:	0009af00 	andeq	sl, r9, r0, lsl #30
    13b0:	91070000 	mrsls	r0, (UNDEF: 7)
    13b4:	23000000 	movwcs	r0, #0
    13b8:	0000036a 	andeq	r0, r0, sl, ror #6
    13bc:	00a13501 	adceq	r3, r1, r1, lsl #10
    13c0:	893c0000 	ldmdbhi	ip!, {}	; <UNPREDICTABLE>
    13c4:	006c0000 	rsbeq	r0, ip, r0
    13c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    13cc:	000005cb 	andeq	r0, r0, fp, asr #11
    13d0:	01006314 	tsteq	r0, r4, lsl r3
    13d4:	00014635 	andeq	r4, r1, r5, lsr r6
    13d8:	00042800 	andeq	r2, r4, r0, lsl #16
    13dc:	00651d00 	rsbeq	r1, r5, r0, lsl #26
    13e0:	00a13601 	adceq	r3, r1, r1, lsl #12
    13e4:	04460000 	strbeq	r0, [r6], #-0
    13e8:	80220000 	eorhi	r0, r2, r0
    13ec:	44000001 	strmi	r0, [r0], #-1
    13f0:	48000089 	stmdami	r0, {r0, r3, r7}
    13f4:	01000000 	mrseq	r0, (UNDEF: 0)
    13f8:	01991e3a 	orrseq	r1, r9, sl, lsr lr
    13fc:	f2060000 	vhadd.s8	d0, d6, d0
    1400:	000013dd 	ldrdeq	r1, [r0], -sp
    1404:	01901e00 	orrseq	r1, r0, r0, lsl #28
    1408:	53010000 	movwpl	r0, #4096	; 0x1000
    140c:	00894424 	addeq	r4, r9, r4, lsr #8
    1410:	00004800 	andeq	r4, r0, r0, lsl #16
    1414:	01a22100 			; <UNDEFINED> instruction: 0x01a22100
    1418:	04590000 	ldrbeq	r0, [r9], #-0
    141c:	4c250000 	stcmi	0, cr0, [r5], #-0
    1420:	44000001 	strmi	r0, [r0], #-1
    1424:	30000089 	andcc	r0, r0, r9, lsl #1
    1428:	02000000 	andeq	r0, r0, #0
    142c:	015c1e5b 	cmpeq	ip, fp, asr lr
    1430:	53010000 	movwpl	r0, #4096	; 0x1000
    1434:	00000000 	andeq	r0, r0, r0
    1438:	00038a13 	andeq	r8, r3, r3, lsl sl
    143c:	a8400100 	stmdage	r0, {r8}^
    1440:	34000089 	strcc	r0, [r0], #-137	; 0x89
    1444:	01000000 	mrseq	r0, (UNDEF: 0)
    1448:	00063e9c 	muleq	r6, ip, lr
    144c:	00631400 	rsbeq	r1, r3, r0, lsl #8
    1450:	01464001 	cmpeq	r6, r1
    1454:	04790000 	ldrbteq	r0, [r9], #-0
    1458:	551c0000 	ldrpl	r0, [ip, #-0]
    145c:	01000009 	tsteq	r0, r9
    1460:	00007d40 	andeq	r7, r0, r0, asr #26
    1464:	00049700 	andeq	r9, r4, r0, lsl #14
    1468:	006e1400 	rsbeq	r1, lr, r0, lsl #8
    146c:	00374001 	eorseq	r4, r7, r1
    1470:	04b50000 	ldrteq	r0, [r5], #0
    1474:	701d0000 	andsvc	r0, sp, r0
    1478:	ae410100 	dvfges	f0, f1, f0
    147c:	d3000001 	movwle	r0, #1
    1480:	24000004 	strcs	r0, [r0], #-4
    1484:	000089b8 			; <UNDEFINED> instruction: 0x000089b8
    1488:	00000020 	andeq	r0, r0, r0, lsr #32
    148c:	0100691d 	tsteq	r0, sp, lsl r9
    1490:	00002543 	andeq	r2, r0, r3, asr #10
    1494:	0004f100 	andeq	pc, r4, r0, lsl #2
    1498:	89c81800 	stmibhi	r8, {fp, ip}^
    149c:	054a0000 	strbeq	r0, [sl, #-0]
    14a0:	01190000 	tsteq	r9, r0
    14a4:	00770250 	rsbseq	r0, r7, r0, asr r2
    14a8:	23000000 	movwcs	r0, #0
    14ac:	0000032c 	andeq	r0, r0, ip, lsr #6
    14b0:	00251f01 	eoreq	r1, r5, r1, lsl #30
    14b4:	89dc0000 	ldmibhi	ip, {}^	; <UNPREDICTABLE>
    14b8:	00580000 	subseq	r0, r8, r0
    14bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    14c0:	000006cc 	andeq	r0, r0, ip, asr #13
    14c4:	01007114 	tsteq	r0, r4, lsl r1
    14c8:	0001461f 	andeq	r4, r1, pc, lsl r6
    14cc:	00051000 	andeq	r1, r5, r0
    14d0:	09551c00 	ldmdbeq	r5, {sl, fp, ip}^
    14d4:	1f010000 	svcne	0x00010000
    14d8:	0000007d 	andeq	r0, r0, sp, ror r0
    14dc:	0000052e 	andeq	r0, r0, lr, lsr #10
    14e0:	01006e14 	tsteq	r0, r4, lsl lr
    14e4:	0000371f 	andeq	r3, r0, pc, lsl r7
    14e8:	00054c00 	andeq	r4, r5, r0, lsl #24
    14ec:	012c1600 	teqeq	ip, r0, lsl #12
    14f0:	89f00000 	ldmibhi	r0!, {}^	; <UNPREDICTABLE>
    14f4:	00180000 	andseq	r0, r8, r0
    14f8:	21010000 	mrscs	r0, (UNDEF: 1)
    14fc:	0000069b 	muleq	r0, fp, r6
    1500:	00013c1e 	andeq	r3, r1, lr, lsl ip
    1504:	00540100 	subseq	r0, r4, r0, lsl #2
    1508:	0089f01b 	addeq	pc, r9, fp, lsl r0	; <UNPREDICTABLE>
    150c:	0002b200 	andeq	fp, r2, r0, lsl #4
    1510:	0006af00 	andeq	sl, r6, r0, lsl #30
    1514:	50011900 	andpl	r1, r1, r0, lsl #18
    1518:	00007402 	andeq	r7, r0, r2, lsl #8
    151c:	008a2018 	addeq	r2, sl, r8, lsl r0
    1520:	0005cb00 	andeq	ip, r5, r0, lsl #22
    1524:	52011900 	andpl	r1, r1, #0, 18
    1528:	19007502 	stmdbne	r0, {r1, r8, sl, ip, sp, lr}
    152c:	76025101 	strvc	r5, [r2], -r1, lsl #2
    1530:	50011900 	andpl	r1, r1, r0, lsl #18
    1534:	00007402 	andeq	r7, r0, r2, lsl #8
    1538:	03512300 	cmpeq	r1, #0, 6
    153c:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    1540:	00000025 	andeq	r0, r0, r5, lsr #32
    1544:	00008a34 	andeq	r8, r0, r4, lsr sl
    1548:	000000a4 	andeq	r0, r0, r4, lsr #1
    154c:	07d49c01 	ldrbeq	r9, [r4, r1, lsl #24]
    1550:	63140000 	tstvs	r4, #0
    1554:	46280100 	strtmi	r0, [r8], -r0, lsl #2
    1558:	6a000001 	bvs	1564 <_start-0x6a9c>
    155c:	14000005 	strne	r0, [r0], #-5
    1560:	28010076 	stmdacs	r1, {r1, r2, r4, r5, r6}
    1564:	000001ae 	andeq	r0, r0, lr, lsr #3
    1568:	0000059e 	muleq	r0, lr, r5
    156c:	01006e14 	tsteq	r0, r4, lsl lr
    1570:	00003728 	andeq	r3, r0, r8, lsr #14
    1574:	0005d800 	andeq	sp, r5, r0, lsl #16
    1578:	7a732600 	bvc	1ccad80 <__bss_end__+0x1cbfc10>
    157c:	25290100 	strcs	r0, [r9, #-256]!	; 0x100
    1580:	01000000 	mrseq	r0, (UNDEF: 0)
    1584:	02c82755 	sbceq	r2, r8, #22282240	; 0x1540000
    1588:	2c010000 	stccs	0, cr0, [r1], {-0}
    158c:	00000037 	andeq	r0, r0, r7, lsr r0
    1590:	00000612 	andeq	r0, r0, r2, lsl r6
    1594:	00013b15 	andeq	r3, r1, r5, lsl fp
    1598:	0007e400 	andeq	lr, r7, r0, lsl #8
    159c:	fc030500 	stc2	5, cr0, [r3], {-0}
    15a0:	160000a7 	strne	r0, [r0], -r7, lsr #1
    15a4:	0000012c 	andeq	r0, r0, ip, lsr #2
    15a8:	00008a3c 	andeq	r8, r0, ip, lsr sl
    15ac:	0000001c 	andeq	r0, r0, ip, lsl r0
    15b0:	07532901 	ldrbeq	r2, [r3, -r1, lsl #18]
    15b4:	3c170000 	ldccc	0, cr0, [r7], {-0}
    15b8:	30000001 	andcc	r0, r0, r1
    15bc:	00000006 	andeq	r0, r0, r6
    15c0:	00012c16 	andeq	r2, r1, r6, lsl ip
    15c4:	008a7c00 	addeq	r7, sl, r0, lsl #24
    15c8:	00001400 	andeq	r1, r0, r0, lsl #8
    15cc:	70300100 	eorsvc	r0, r0, r0, lsl #2
    15d0:	17000007 	strne	r0, [r0, -r7]
    15d4:	0000013c 	andeq	r0, r0, ip, lsr r1
    15d8:	00000664 	andeq	r0, r0, r4, ror #12
    15dc:	8a6c1b00 	bhi	1b081e4 <__bss_end__+0x1afd074>
    15e0:	063e0000 	ldrteq	r0, [lr], -r0
    15e4:	07920000 	ldreq	r0, [r2, r0]
    15e8:	01190000 	tsteq	r9, r0
    15ec:	01f30352 	mvnseq	r0, r2, asr r3
    15f0:	51011952 	tstpl	r1, r2, asr r9
    15f4:	5101f303 	tstpl	r1, r3, lsl #6
    15f8:	02500119 	subseq	r0, r0, #1073741830	; 0x40000006
    15fc:	1a000074 	bne	17d4 <_start-0x682c>
    1600:	00008a9c 	muleq	r0, ip, sl
    1604:	000009a8 	andeq	r0, r0, r8, lsr #19
    1608:	008ab01b 	addeq	fp, sl, fp, lsl r0
    160c:	00099200 	andeq	r9, r9, r0, lsl #4
    1610:	0007ca00 	andeq	ip, r7, r0, lsl #20
    1614:	53011900 	movwpl	r1, #6400	; 0x1900
    1618:	19300802 	ldmdbne	r0!, {r1, fp}
    161c:	03055201 	movweq	r5, #20993	; 0x5201
    1620:	0000a7fc 	strdeq	sl, [r0], -ip
    1624:	05510119 	ldrbeq	r0, [r1, #-281]	; 0x119
    1628:	00a85003 	adceq	r5, r8, r3
    162c:	50011900 	andpl	r1, r1, r0, lsl #18
    1630:	a9140305 	ldmdbge	r4, {r0, r2, r8, r9}
    1634:	1a000000 	bne	163c <_start-0x69c4>
    1638:	00008ab4 			; <UNDEFINED> instruction: 0x00008ab4
    163c:	000009af 	andeq	r0, r0, pc, lsr #19
    1640:	007f0800 	rsbseq	r0, pc, r0, lsl #16
    1644:	07e40000 	strbeq	r0, [r4, r0]!
    1648:	76090000 	strvc	r0, [r9], -r0
    164c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1650:	07d40700 	ldrbeq	r0, [r4, r0, lsl #14]
    1654:	9b230000 	blls	8c165c <__bss_end__+0x8b64ec>
    1658:	01000003 	tsteq	r0, r3
    165c:	00002547 	andeq	r2, r0, r7, asr #10
    1660:	008ad800 	addeq	sp, sl, r0, lsl #16
    1664:	00012400 	andeq	r2, r1, r0, lsl #8
    1668:	8d9c0100 	ldfhis	f0, [ip]
    166c:	14000009 	strne	r0, [r0], #-9
    1670:	47010063 	strmi	r0, [r1, -r3, rrx]
    1674:	00000146 	andeq	r0, r0, r6, asr #2
    1678:	00000682 	andeq	r0, r0, r2, lsl #13
    167c:	0009551c 	andeq	r5, r9, ip, lsl r5
    1680:	7d470100 	stfvce	f0, [r7, #-0]
    1684:	07000000 	streq	r0, [r0, -r0]
    1688:	14000007 	strne	r0, [r0], #-7
    168c:	4701006e 	strmi	r0, [r1, -lr, rrx]
    1690:	00000037 	andeq	r0, r0, r7, lsr r0
    1694:	0000074c 	andeq	r0, r0, ip, asr #14
    1698:	0100701d 	tsteq	r0, sp, lsl r0
    169c:	0001ae48 	andeq	sl, r1, r8, asr #28
    16a0:	00079f00 	andeq	r9, r7, r0, lsl #30
    16a4:	013b1500 	teqeq	fp, r0, lsl #10
    16a8:	098d0000 	stmibeq	sp, {}	; <UNPREDICTABLE>
    16ac:	03050000 	movweq	r0, #20480	; 0x5000
    16b0:	0000a808 	andeq	sl, r0, r8, lsl #16
    16b4:	0001b416 	andeq	fp, r1, r6, lsl r4
    16b8:	008adc00 	addeq	sp, sl, r0, lsl #24
    16bc:	00002000 	andeq	r2, r0, r0
    16c0:	7d4a0100 	stfvce	f0, [sl, #-0]
    16c4:	17000008 	strne	r0, [r0, -r8]
    16c8:	000001c4 	andeq	r0, r0, r4, asr #3
    16cc:	000007e4 	andeq	r0, r0, r4, ror #15
    16d0:	00012c22 	andeq	r2, r1, r2, lsr #24
    16d4:	008adc00 	addeq	sp, sl, r0, lsl #24
    16d8:	00001c00 	andeq	r1, r0, r0, lsl #24
    16dc:	17570200 	ldrbne	r0, [r7, -r0, lsl #4]
    16e0:	0000013c 	andeq	r0, r0, ip, lsr r1
    16e4:	000007e4 	andeq	r0, r0, r4, ror #15
    16e8:	08280000 	stmdaeq	r8!, {}	; <UNPREDICTABLE>
    16ec:	8800008b 	stmdahi	r0, {r0, r1, r3, r7}
    16f0:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    16f4:	1d000009 	stcne	0, cr0, [r0, #-36]	; 0xffffffdc
    16f8:	4c010069 	stcmi	0, cr0, [r1], {105}	; 0x69
    16fc:	00000025 	andeq	r0, r0, r5, lsr #32
    1700:	00000869 	andeq	r0, r0, r9, ror #16
    1704:	0001ce1f 	andeq	ip, r1, pc, lsl lr
    1708:	008b0800 	addeq	r0, fp, r0, lsl #16
    170c:	00004800 	andeq	r4, r0, r0, lsl #16
    1710:	ec4d0100 	stfe	f0, [sp], {-0}
    1714:	17000008 	strne	r0, [r0, -r8]
    1718:	000001e7 	andeq	r0, r0, r7, ror #3
    171c:	00000892 	muleq	r0, r2, r8
    1720:	0001de17 	andeq	sp, r1, r7, lsl lr
    1724:	0008ce00 	andeq	ip, r8, r0, lsl #28
    1728:	00482000 	subeq	r2, r8, r0
    172c:	f0210000 			; <UNDEFINED> instruction: 0xf0210000
    1730:	fa000001 	blx	173c <_start-0x68c4>
    1734:	29000008 	stmdbcs	r0, {r3}
    1738:	000001fb 	strdeq	r0, [r0], -fp
    173c:	66225601 	strtvs	r5, [r2], -r1, lsl #12
    1740:	28000001 	stmdacs	r0, {r0}
    1744:	1000008b 	andne	r0, r0, fp, lsl #1
    1748:	02000000 	andeq	r0, r0, #0
    174c:	01761767 	cmneq	r6, r7, ror #14
    1750:	09250000 	stmdbeq	r5!, {}	; <UNPREDICTABLE>
    1754:	00000000 	andeq	r0, r0, r0
    1758:	8b6c1a00 	blhi	1b07f60 <__bss_end__+0x1afcdf0>
    175c:	09a80000 	stmibeq	r8!, {}	; <UNPREDICTABLE>
    1760:	801b0000 	andshi	r0, fp, r0
    1764:	9200008b 	andls	r0, r0, #139	; 0x8b
    1768:	24000009 	strcs	r0, [r0], #-9
    176c:	19000009 	stmdbne	r0, {r0, r3}
    1770:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    1774:	5201194e 	andpl	r1, r1, #1277952	; 0x138000
    1778:	a8080305 	stmdage	r8, {r0, r2, r8, r9}
    177c:	01190000 	tsteq	r9, r0
    1780:	50030551 	andpl	r0, r3, r1, asr r5
    1784:	190000a8 	stmdbne	r0, {r3, r5, r7}
    1788:	03055001 	movweq	r5, #20481	; 0x5001
    178c:	0000a938 	andeq	sl, r0, r8, lsr r9
    1790:	8b841a00 	blhi	fe107f98 <__bss_end__+0xfe0fce28>
    1794:	09af0000 	stmibeq	pc!, {}	; <UNPREDICTABLE>
    1798:	16000000 	strne	r0, [r0], -r0
    179c:	0000014c 	andeq	r0, r0, ip, asr #2
    17a0:	00008b98 	muleq	r0, r8, fp
    17a4:	00000010 	andeq	r0, r0, r0, lsl r0
    17a8:	094b5001 	stmdbeq	fp, {r0, ip, lr}^
    17ac:	5c170000 	ldcpl	0, cr0, [r7], {-0}
    17b0:	51000001 	tstpl	r0, r1
    17b4:	00000009 	andeq	r0, r0, r9
    17b8:	008bb41a 	addeq	fp, fp, sl, lsl r4
    17bc:	0009a800 	andeq	sl, r9, r0, lsl #16
    17c0:	8bc81b00 	blhi	ff2083c8 <__bss_end__+0xff1fd258>
    17c4:	09920000 	ldmibeq	r2, {}	; <UNPREDICTABLE>
    17c8:	09830000 	stmibeq	r3, {}	; <UNPREDICTABLE>
    17cc:	01190000 	tsteq	r9, r0
    17d0:	50080253 	andpl	r0, r8, r3, asr r2
    17d4:	05520119 	ldrbeq	r0, [r2, #-281]	; 0x119
    17d8:	00a80803 	adceq	r0, r8, r3, lsl #16
    17dc:	51011900 	tstpl	r1, r0, lsl #18
    17e0:	a8500305 	ldmdage	r0, {r0, r2, r8, r9}^
    17e4:	01190000 	tsteq	r9, r0
    17e8:	5c030550 	cfstr32pl	mvfx0, [r3], {80}	; 0x50
    17ec:	000000a9 	andeq	r0, r0, r9, lsr #1
    17f0:	008bcc1a 	addeq	ip, fp, sl, lsl ip
    17f4:	0009af00 	andeq	sl, r9, r0, lsl #30
    17f8:	d4070000 	strle	r0, [r7], #-0
    17fc:	2a000007 	bcs	1820 <_start-0x67e0>
    1800:	00000451 	andeq	r0, r0, r1, asr r4
    1804:	00252904 	eoreq	r2, r5, r4, lsl #18
    1808:	09a80000 	stmibeq	r8!, {}	; <UNPREDICTABLE>
    180c:	862b0000 	strthi	r0, [fp], -r0
    1810:	2c000000 	stccs	0, cr0, [r0], {-0}
    1814:	01f62d00 	mvnseq	r2, r0, lsl #26
    1818:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
    181c:	0000822d 	andeq	r8, r0, sp, lsr #4
    1820:	2e660400 	cdpcs	4, 6, cr0, cr6, cr0, {0}
    1824:	00000371 	andeq	r0, r0, r1, ror r3
    1828:	007d1b05 	rsbseq	r1, sp, r5, lsl #22
    182c:	7d2b0000 	stcvc	0, cr0, [fp, #-0]
    1830:	2b000000 	blcs	1838 <_start-0x67c8>
    1834:	00000025 	andeq	r0, r0, r5, lsr #32
    1838:	00002c2b 	andeq	r2, r0, fp, lsr #24
    183c:	db000000 	blle	1844 <_start-0x67bc>
    1840:	04000000 	streq	r0, [r0], #-0
    1844:	00065000 	andeq	r5, r6, r0
    1848:	0b010400 	bleq	42850 <__bss_end__+0x376e0>
    184c:	01000000 	mrseq	r0, (UNDEF: 0)
    1850:	000003df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1854:	000003ed 	andeq	r0, r0, sp, ror #7
    1858:	00008cbc 			; <UNDEFINED> instruction: 0x00008cbc
    185c:	00000020 	andeq	r0, r0, r0, lsr #32
    1860:	00000556 	andeq	r0, r0, r6, asr r5
    1864:	76060102 	strvc	r0, [r6], -r2, lsl #2
    1868:	02000000 	andeq	r0, r0, #0
    186c:	00740801 	rsbseq	r0, r4, r1, lsl #16
    1870:	02020000 	andeq	r0, r2, #0
    1874:	0001c705 	andeq	ip, r1, r5, lsl #14
    1878:	07020200 	streq	r0, [r2, -r0, lsl #4]
    187c:	000000f3 	strdeq	r0, [r0], -r3
    1880:	69050403 	stmdbvs	r5, {r0, r1, sl}
    1884:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    1888:	01760704 	cmneq	r6, r4, lsl #14
    188c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1890:	0001ae05 	andeq	sl, r1, r5, lsl #28
    1894:	07080200 	streq	r0, [r8, -r0, lsl #4]
    1898:	0000016c 	andeq	r0, r0, ip, ror #2
    189c:	b3050402 	movwlt	r0, #21506	; 0x5402
    18a0:	02000001 	andeq	r0, r0, #1
    18a4:	01a50704 			; <UNDEFINED> instruction: 0x01a50704
    18a8:	04040000 	streq	r0, [r4], #-0
    18ac:	71070402 	tstvc	r7, r2, lsl #8
    18b0:	05000001 	streq	r0, [r0, #-1]
    18b4:	00007a04 	andeq	r7, r0, r4, lsl #20
    18b8:	08010200 	stmdaeq	r1, {r9}
    18bc:	0000007d 	andeq	r0, r0, sp, ror r0
    18c0:	00034a06 	andeq	r4, r3, r6, lsl #20
    18c4:	48d40200 	ldmmi	r4, {r9}^
    18c8:	07000000 	streq	r0, [r0, -r0]
    18cc:	00000371 	andeq	r0, r0, r1, ror r3
    18d0:	006b1b03 	rsbeq	r1, fp, r3, lsl #22
    18d4:	8cbc0000 	ldchi	0, cr0, [ip]
    18d8:	00200000 	eoreq	r0, r0, r0
    18dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    18e0:	00705f08 	rsbseq	r5, r0, r8, lsl #30
    18e4:	006b0301 	rsbeq	r0, fp, r1, lsl #6
    18e8:	50010000 	andpl	r0, r1, r0
    18ec:	01006308 	tsteq	r0, r8, lsl #6
    18f0:	00004103 	andeq	r4, r0, r3, lsl #2
    18f4:	09510100 	ldmdbeq	r1, {r8}^
    18f8:	0301006e 	movweq	r0, #4206	; 0x106e
    18fc:	00000081 	andeq	r0, r0, r1, lsl #1
    1900:	0000098b 	andeq	r0, r0, fp, lsl #19
    1904:	0100700a 	tsteq	r0, sl
    1908:	00007404 	andeq	r7, r0, r4, lsl #8
    190c:	0009ac00 	andeq	sl, r9, r0, lsl #24
    1910:	00650b00 	rsbeq	r0, r5, r0, lsl #22
    1914:	00740401 	rsbseq	r0, r4, r1, lsl #8
    1918:	52010000 	andpl	r0, r1, #0
    191c:	01910000 	orrseq	r0, r1, r0
    1920:	00040000 	andeq	r0, r4, r0
    1924:	000006ed 	andeq	r0, r0, sp, ror #13
    1928:	000b0104 	andeq	r0, fp, r4, lsl #2
    192c:	40010000 	andmi	r0, r1, r0
    1930:	ed000004 	stc	0, cr0, [r0, #-16]
    1934:	dc000003 	stcle	0, cr0, [r0], {3}
    1938:	5800008c 	stmdapl	r0, {r2, r3, r7}
    193c:	46000000 	strmi	r0, [r0], -r0
    1940:	02000006 	andeq	r0, r0, #6
    1944:	00000431 	andeq	r0, r0, r1, lsr r4
    1948:	00302802 	eorseq	r2, r0, r2, lsl #16
    194c:	58030000 	stmdapl	r3, {}	; <UNPREDICTABLE>
    1950:	04000004 	streq	r0, [r0], #-4
    1954:	00470003 	subeq	r0, r7, r3
    1958:	67040000 	strvs	r0, [r4, -r0]
    195c:	47000004 	strmi	r0, [r0, -r4]
    1960:	00000000 	andeq	r0, r0, r0
    1964:	02040500 	andeq	r0, r4, #0, 10
    1968:	0000045a 	andeq	r0, r0, sl, asr r4
    196c:	00256202 	eoreq	r6, r5, r2, lsl #4
    1970:	04060000 	streq	r0, [r6], #-0
    1974:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    1978:	07040700 	streq	r0, [r4, -r0, lsl #14]
    197c:	00000176 	andeq	r0, r0, r6, ror r1
    1980:	76060107 	strvc	r0, [r6], -r7, lsl #2
    1984:	07000000 	streq	r0, [r0, -r0]
    1988:	01c70502 	biceq	r0, r7, r2, lsl #10
    198c:	04070000 	streq	r0, [r7], #-0
    1990:	0001b305 	andeq	fp, r1, r5, lsl #6
    1994:	05080700 	streq	r0, [r8, #-1792]	; 0x700
    1998:	000001ae 	andeq	r0, r0, lr, lsr #3
    199c:	74080107 	strvc	r0, [r8], #-263	; 0x107
    19a0:	07000000 	streq	r0, [r0, -r0]
    19a4:	00f30702 	rscseq	r0, r3, r2, lsl #14
    19a8:	04070000 	streq	r0, [r7], #-0
    19ac:	00017107 	andeq	r7, r1, r7, lsl #2
    19b0:	07080700 	streq	r0, [r8, -r0, lsl #14]
    19b4:	0000016c 	andeq	r0, r0, ip, ror #2
    19b8:	a5070407 	strge	r0, [r7, #-1031]	; 0x407
    19bc:	08000001 	stmdaeq	r0, {r0}
    19c0:	0000a704 	andeq	sl, r0, r4, lsl #14
    19c4:	08010700 	stmdaeq	r1, {r8, r9, sl}
    19c8:	0000007d 	andeq	r0, r0, sp, ror r0
    19cc:	00b40408 	adcseq	r0, r4, r8, lsl #8
    19d0:	a7090000 	strge	r0, [r9, -r0]
    19d4:	0a000000 	beq	19dc <_start-0x6624>
    19d8:	00000451 	andeq	r0, r0, r1, asr r4
    19dc:	00540601 	subseq	r0, r4, r1, lsl #12
    19e0:	8cdc0000 	ldclhi	0, cr0, [ip], {0}
    19e4:	00580000 	subseq	r0, r8, r0
    19e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    19ec:	00000143 	andeq	r0, r0, r3, asr #2
    19f0:	746d660b 	strbtvc	r6, [sp], #-1547	; 0x60b
    19f4:	ae060100 	adfges	f0, f6, f0
    19f8:	02000000 	andeq	r0, r0, #0
    19fc:	0d0c7091 	stceq	0, cr7, [ip, #-580]	; 0xfffffdbc
    1a00:	00667562 	rsbeq	r7, r6, r2, ror #10
    1a04:	01430801 	cmpeq	r3, r1, lsl #16
    1a08:	03050000 	movweq	r0, #20480	; 0x5000
    1a0c:	0000ad5c 	andeq	sl, r0, ip, asr sp
    1a10:	0004620e 	andeq	r6, r4, lr, lsl #4
    1a14:	49090100 	stmdbmi	r9, {r8}
    1a18:	02000000 	andeq	r0, r0, #0
    1a1c:	730f5c91 	movwvc	r5, #64657	; 0xfc91
    1a20:	0c01007a 	stceq	0, cr0, [r1], {122}	; 0x7a
    1a24:	00000054 	andeq	r0, r0, r4, asr r0
    1a28:	000009d7 	ldrdeq	r0, [r0], -r7
    1a2c:	008d0410 	addeq	r0, sp, r0, lsl r4
    1a30:	00017400 	andeq	r7, r1, r0, lsl #8
    1a34:	00013600 	andeq	r3, r1, r0, lsl #12
    1a38:	53011100 	movwpl	r1, #4352	; 0x1100
    1a3c:	114c9102 	cmpne	ip, r2, lsl #2
    1a40:	91035201 	tstls	r3, r1, lsl #4
    1a44:	01110648 	tsteq	r1, r8, asr #12
    1a48:	000a0351 	andeq	r0, sl, r1, asr r3
    1a4c:	50011104 	andpl	r1, r1, r4, lsl #2
    1a50:	00007402 	andeq	r7, r0, r2, lsl #8
    1a54:	008d1812 	addeq	r1, sp, r2, lsl r8
    1a58:	50011100 	andpl	r1, r1, r0, lsl #2
    1a5c:	00007402 	andeq	r7, r0, r2, lsl #8
    1a60:	00a71300 	adceq	r1, r7, r0, lsl #6
    1a64:	01540000 	cmpeq	r4, r0
    1a68:	9a140000 	bls	501a70 <__bss_end__+0x4f6900>
    1a6c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    1a70:	54150003 	ldrpl	r0, [r5], #-3
    1a74:	63000000 	movwvs	r0, #0
    1a78:	16000001 	strne	r0, [r0], -r1
    1a7c:	000000ae 	andeq	r0, r0, lr, lsr #1
    1a80:	04ba1700 	ldrteq	r1, [sl], #1792	; 0x700
    1a84:	22040000 	andcs	r0, r4, #0
    1a88:	0000016e 	andeq	r0, r0, lr, ror #2
    1a8c:	01540408 	cmpeq	r4, r8, lsl #8
    1a90:	4e180000 	cdpmi	0, 1, cr0, cr8, cr0, {0}
    1a94:	05000004 	streq	r0, [r0, #-4]
    1a98:	00005402 	andeq	r5, r0, r2, lsl #8
    1a9c:	00a11600 	adceq	r1, r1, r0, lsl #12
    1aa0:	54160000 	ldrpl	r0, [r6], #-0
    1aa4:	16000000 	strne	r0, [r0], -r0
    1aa8:	000000ae 	andeq	r0, r0, lr, lsr #1
    1aac:	00004916 	andeq	r4, r0, r6, lsl r9
    1ab0:	13000000 	movwne	r0, #0
    1ab4:	04000001 	streq	r0, [r0], #-1
    1ab8:	00081e00 	andeq	r1, r8, r0, lsl #28
    1abc:	0b010400 	bleq	42ac4 <__bss_end__+0x37954>
    1ac0:	01000000 	mrseq	r0, (UNDEF: 0)
    1ac4:	00000489 	andeq	r0, r0, r9, lsl #9
    1ac8:	000003ed 	andeq	r0, r0, sp, ror #7
    1acc:	00008d34 	andeq	r8, r0, r4, lsr sp
    1ad0:	0000003c 	andeq	r0, r0, ip, lsr r0
    1ad4:	0000074c 	andeq	r0, r0, ip, asr #14
    1ad8:	69050402 	stmdbvs	r5, {r1, sl}
    1adc:	0300746e 	movweq	r7, #1134	; 0x46e
    1ae0:	01760704 	cmneq	r6, r4, lsl #14
    1ae4:	01030000 	mrseq	r0, (UNDEF: 3)
    1ae8:	00007606 	andeq	r7, r0, r6, lsl #12
    1aec:	05020300 	streq	r0, [r2, #-768]	; 0x300
    1af0:	000001c7 	andeq	r0, r0, r7, asr #3
    1af4:	b3050403 	movwlt	r0, #21507	; 0x5403
    1af8:	03000001 	movweq	r0, #1
    1afc:	01ae0508 			; <UNDEFINED> instruction: 0x01ae0508
    1b00:	01030000 	mrseq	r0, (UNDEF: 3)
    1b04:	00007408 	andeq	r7, r0, r8, lsl #8
    1b08:	07020300 	streq	r0, [r2, -r0, lsl #6]
    1b0c:	000000f3 	strdeq	r0, [r0], -r3
    1b10:	71070403 	tstvc	r7, r3, lsl #8
    1b14:	03000001 	movweq	r0, #1
    1b18:	016c0708 	cmneq	ip, r8, lsl #14
    1b1c:	04030000 	streq	r0, [r3], #-0
    1b20:	0001a507 	andeq	sl, r1, r7, lsl #10
    1b24:	08010300 	stmdaeq	r1, {r8, r9}
    1b28:	0000007d 	andeq	r0, r0, sp, ror r0
    1b2c:	00046c04 	andeq	r6, r4, r4, lsl #24
    1b30:	25030100 	strcs	r0, [r3, #-256]	; 0x100
    1b34:	34000000 	strcc	r0, [r0], #-0
    1b38:	1400008d 	strne	r0, [r0], #-141	; 0x8d
    1b3c:	01000000 	mrseq	r0, (UNDEF: 0)
    1b40:	0000b09c 	muleq	r0, ip, r0
    1b44:	00630500 	rsbeq	r0, r3, r0, lsl #10
    1b48:	00250301 	eoreq	r0, r5, r1, lsl #6
    1b4c:	0a000000 	beq	1b54 <_start-0x64ac>
    1b50:	40060000 	andmi	r0, r6, r0
    1b54:	0900008d 	stmdbeq	r0, {r0, r2, r3, r7}
    1b58:	07000001 	streq	r0, [r0, -r1]
    1b5c:	74025001 	strvc	r5, [r2], #-1
    1b60:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1b64:	000001f6 	strdeq	r0, [r0], -r6
    1b68:	8d480801 	stclhi	8, cr0, [r8, #-4]
    1b6c:	00180000 	andseq	r0, r8, r0
    1b70:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b74:	00049809 	andeq	r9, r4, r9, lsl #16
    1b78:	600b0100 	andvs	r0, fp, r0, lsl #2
    1b7c:	1000008d 	andne	r0, r0, sp, lsl #1
    1b80:	01000000 	mrseq	r0, (UNDEF: 0)
    1b84:	0000e39c 	muleq	r0, ip, r3
    1b88:	70660a00 	rsbvc	r0, r6, r0, lsl #20
    1b8c:	f20b0100 	vrhadd.s8	d0, d11, d0
    1b90:	01000000 	mrseq	r0, (UNDEF: 0)
    1b94:	250b0050 	strcs	r0, [fp, #-80]	; 0x50
    1b98:	f2000000 	vhadd.s8	d0, d0, d0
    1b9c:	0c000000 	stceq	0, cr0, [r0], {-0}
    1ba0:	00000025 	andeq	r0, r0, r5, lsr #32
    1ba4:	e3040d00 	movw	r0, #19712	; 0x4d00
    1ba8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1bac:	0000047d 	andeq	r0, r0, sp, ror r4
    1bb0:	00f20601 	rscseq	r0, r2, r1, lsl #12
    1bb4:	03050000 	movweq	r0, #20480	; 0x5000
    1bb8:	0000a3ec 	andeq	sl, r0, ip, ror #7
    1bbc:	0005ed0f 	andeq	lr, r5, pc, lsl #26
    1bc0:	0c3c0200 	lfmeq	f0, 4, [ip], #-0
    1bc4:	0000002c 	andeq	r0, r0, ip, lsr #32
    1bc8:	00ee0000 	rsceq	r0, lr, r0
    1bcc:	00040000 	andeq	r0, r4, r0
    1bd0:	00000906 	andeq	r0, r0, r6, lsl #18
    1bd4:	000b0104 	andeq	r0, fp, r4, lsl #2
    1bd8:	a5010000 	strge	r0, [r1, #-0]
    1bdc:	ed000004 	stc	0, cr0, [r0, #-16]
    1be0:	70000003 	andvc	r0, r0, r3
    1be4:	3400008d 	strcc	r0, [r0], #-141	; 0x8d
    1be8:	da000000 	ble	1bf0 <_start-0x6410>
    1bec:	02000007 	andeq	r0, r0, #7
    1bf0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1bf4:	04030074 	streq	r0, [r3], #-116	; 0x74
    1bf8:	00017607 	andeq	r7, r1, r7, lsl #12
    1bfc:	06010300 	streq	r0, [r1], -r0, lsl #6
    1c00:	00000076 	andeq	r0, r0, r6, ror r0
    1c04:	c7050203 	strgt	r0, [r5, -r3, lsl #4]
    1c08:	03000001 	movweq	r0, #1
    1c0c:	01b30504 			; <UNDEFINED> instruction: 0x01b30504
    1c10:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1c14:	0001ae05 	andeq	sl, r1, r5, lsl #28
    1c18:	08010300 	stmdaeq	r1, {r8, r9}
    1c1c:	00000074 	andeq	r0, r0, r4, ror r0
    1c20:	f3070203 	vhsub.u8	d0, d7, d3
    1c24:	03000000 	movweq	r0, #0
    1c28:	01710704 	cmneq	r1, r4, lsl #14
    1c2c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1c30:	00016c07 	andeq	r6, r1, r7, lsl #24
    1c34:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1c38:	000001a5 	andeq	r0, r0, r5, lsr #3
    1c3c:	7d080103 	stfvcs	f0, [r8, #-12]
    1c40:	04000000 	streq	r0, [r0], #-0
    1c44:	00007f04 	andeq	r7, r0, r4, lsl #30
    1c48:	00720500 	rsbseq	r0, r2, r0, lsl #10
    1c4c:	b1060000 	mrslt	r0, (UNDEF: 6)
    1c50:	01000004 	tsteq	r0, r4
    1c54:	00002504 	andeq	r2, r0, r4, lsl #10
    1c58:	008d7000 	addeq	r7, sp, r0
    1c5c:	00003400 	andeq	r3, r0, r0, lsl #8
    1c60:	ab9c0100 	blge	fe702068 <__bss_end__+0xfe6f6ef8>
    1c64:	07000000 	streq	r0, [r0, -r0]
    1c68:	04010070 	streq	r0, [r1], #-112	; 0x70
    1c6c:	00000079 	andeq	r0, r0, r9, ror r0
    1c70:	00000a1e 	andeq	r0, r0, lr, lsl sl
    1c74:	00250800 	eoreq	r0, r5, r0, lsl #16
    1c78:	00ba0000 	adcseq	r0, sl, r0
    1c7c:	25090000 	strcs	r0, [r9, #-0]
    1c80:	00000000 	andeq	r0, r0, r0
    1c84:	00047d0a 	andeq	r7, r4, sl, lsl #26
    1c88:	c51d0200 	ldrgt	r0, [sp, #-512]	; 0x200
    1c8c:	04000000 	streq	r0, [r0], #-0
    1c90:	0000ab04 	andeq	sl, r0, r4, lsl #22
    1c94:	00250800 	eoreq	r0, r5, r0, lsl #16
    1c98:	00da0000 	sbcseq	r0, sl, r0
    1c9c:	79090000 	stmdbvc	r9, {}	; <UNPREDICTABLE>
    1ca0:	00000000 	andeq	r0, r0, r0
    1ca4:	0004ba0b 	andeq	fp, r4, fp, lsl #20
    1ca8:	eb0c0100 	bl	3020b0 <__bss_end__+0x2f6f40>
    1cac:	05000000 	streq	r0, [r0, #-0]
    1cb0:	00a3f003 	adceq	pc, r3, r3
    1cb4:	cb040400 	blgt	102cbc <__bss_end__+0xf7b4c>
    1cb8:	00000000 	andeq	r0, r0, r0
    1cbc:	00000681 	andeq	r0, r0, r1, lsl #13
    1cc0:	099f0004 	ldmibeq	pc, {r2}	; <UNPREDICTABLE>
    1cc4:	01040000 	mrseq	r0, (UNDEF: 4)
    1cc8:	0000000b 	andeq	r0, r0, fp
    1ccc:	0004eb01 	andeq	lr, r4, r1, lsl #22
    1cd0:	0003ed00 	andeq	lr, r3, r0, lsl #26
    1cd4:	008da400 	addeq	sl, sp, r0, lsl #8
    1cd8:	0004f800 	andeq	pc, r4, r0, lsl #16
    1cdc:	00087400 	andeq	r7, r8, r0, lsl #8
    1ce0:	05040200 	streq	r0, [r4, #-512]	; 0x200
    1ce4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1ce8:	76070403 	strvc	r0, [r7], -r3, lsl #8
    1cec:	03000001 	movweq	r0, #1
    1cf0:	00760601 	rsbseq	r0, r6, r1, lsl #12
    1cf4:	02030000 	andeq	r0, r3, #0
    1cf8:	0001c705 	andeq	ip, r1, r5, lsl #14
    1cfc:	05040300 	streq	r0, [r4, #-768]	; 0x300
    1d00:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
    1d04:	ae050803 	cdpge	8, 0, cr0, cr5, cr3, {0}
    1d08:	03000001 	movweq	r0, #1
    1d0c:	00740801 	rsbseq	r0, r4, r1, lsl #16
    1d10:	02030000 	andeq	r0, r3, #0
    1d14:	0000f307 	andeq	pc, r0, r7, lsl #6
    1d18:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1d1c:	00000171 	andeq	r0, r0, r1, ror r1
    1d20:	6c070803 	stcvs	8, cr0, [r7], {3}
    1d24:	03000001 	movweq	r0, #1
    1d28:	01a50704 			; <UNDEFINED> instruction: 0x01a50704
    1d2c:	04040000 	streq	r0, [r4], #-0
    1d30:	007a0405 	rsbseq	r0, sl, r5, lsl #8
    1d34:	01030000 	mrseq	r0, (UNDEF: 3)
    1d38:	00007d08 	andeq	r7, r0, r8, lsl #26
    1d3c:	87040500 	strhi	r0, [r4, -r0, lsl #10]
    1d40:	06000000 	streq	r0, [r0], -r0
    1d44:	0000007a 	andeq	r0, r0, sl, ror r0
    1d48:	00043107 	andeq	r3, r4, r7, lsl #2
    1d4c:	97280200 	strls	r0, [r8, -r0, lsl #4]!
    1d50:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1d54:	00000458 	andeq	r0, r0, r8, asr r4
    1d58:	ae000404 	cdpge	4, 0, cr0, cr0, cr4, {0}
    1d5c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1d60:	00000467 	andeq	r0, r0, r7, ror #8
    1d64:	00000072 	andeq	r0, r0, r2, ror r0
    1d68:	5a070000 	bpl	1c1d70 <__bss_end__+0x1b6c00>
    1d6c:	02000004 	andeq	r0, r0, #4
    1d70:	00008c62 	andeq	r8, r0, r2, ror #24
    1d74:	04cd0a00 	strbeq	r0, [sp], #2560	; 0xa00
    1d78:	27010000 	strcs	r0, [r1, -r0]
    1d7c:	00000025 	andeq	r0, r0, r5, lsr #32
    1d80:	00008da4 	andeq	r8, r0, r4, lsr #27
    1d84:	00000014 	andeq	r0, r0, r4, lsl r0
    1d88:	00e09c01 	rsceq	r9, r0, r1, lsl #24
    1d8c:	630b0000 	movwvs	r0, #45056	; 0xb000
    1d90:	25270100 	strcs	r0, [r7, #-256]!	; 0x100
    1d94:	3c000000 	stccc	0, cr0, [r0], {-0}
    1d98:	0000000a 	andeq	r0, r0, sl
    1d9c:	6461700c 	strbtvs	r7, [r1], #-12
    1da0:	742e0100 	strtvc	r0, [lr], #-256	; 0x100
    1da4:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    1da8:	2c00008d 	stccs	0, cr0, [r0], {141}	; 0x8d
    1dac:	01000000 	mrseq	r0, (UNDEF: 0)
    1db0:	0001309c 	muleq	r1, ip, r0
    1db4:	00700b00 	rsbseq	r0, r0, r0, lsl #22
    1db8:	00742e01 	rsbseq	r2, r4, r1, lsl #28
    1dbc:	0a6a0000 	beq	1a81dc4 <__bss_end__+0x1a76c54>
    1dc0:	dd0d0000 	stcle	0, cr0, [sp, #-0]
    1dc4:	01000004 	tsteq	r0, r4
    1dc8:	0000742e 	andeq	r7, r0, lr, lsr #8
    1dcc:	000a9500 	andeq	r9, sl, r0, lsl #10
    1dd0:	050b0e00 	streq	r0, [fp, #-3584]	; 0xe00
    1dd4:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    1dd8:	00000025 	andeq	r0, r0, r5, lsr #32
    1ddc:	6c0f5201 	sfmvs	f5, 4, [pc], {1}
    1de0:	01006e65 	tsteq	r0, r5, ror #28
    1de4:	0000252f 	andeq	r2, r0, pc, lsr #10
    1de8:	00510100 	subseq	r0, r1, r0, lsl #2
    1dec:	0004c50a 	andeq	ip, r4, sl, lsl #10
    1df0:	74370100 	ldrtvc	r0, [r7], #-256	; 0x100
    1df4:	e4000000 	str	r0, [r0], #-0
    1df8:	4000008d 	andmi	r0, r0, sp, lsl #1
    1dfc:	01000000 	mrseq	r0, (UNDEF: 0)
    1e00:	00019c9c 	muleq	r1, ip, ip
    1e04:	73640b00 	cmnvc	r4, #0, 22
    1e08:	37010074 	smlsdxcc	r1, r4, r0, r0
    1e0c:	00000074 	andeq	r0, r0, r4, ror r0
    1e10:	00000ab6 			; <UNDEFINED> instruction: 0x00000ab6
    1e14:	01006e0b 	tsteq	r0, fp, lsl #28
    1e18:	00002537 	andeq	r2, r0, r7, lsr r5
    1e1c:	000aee00 	andeq	lr, sl, r0, lsl #28
    1e20:	00700b00 	rsbseq	r0, r0, r0, lsl #22
    1e24:	00743701 	rsbseq	r3, r4, r1, lsl #14
    1e28:	0b0f0000 	bleq	3c1e30 <__bss_end__+0x3b6cc0>
    1e2c:	190d0000 	stmdbne	sp, {}	; <UNPREDICTABLE>
    1e30:	01000001 	tsteq	r0, r1
    1e34:	00007437 	andeq	r7, r0, r7, lsr r4
    1e38:	000b4500 	andeq	r4, fp, r0, lsl #10
    1e3c:	656c1000 	strbvs	r1, [ip, #-0]!
    1e40:	3901006e 	stmdbcc	r1, {r1, r2, r3, r5, r6}
    1e44:	00000025 	andeq	r0, r0, r5, lsr #32
    1e48:	00000b63 	andeq	r0, r0, r3, ror #22
    1e4c:	0100730f 	tsteq	r0, pc, lsl #6
    1e50:	0000743d 	andeq	r7, r0, sp, lsr r4
    1e54:	00500100 	subseq	r0, r0, r0, lsl #2
    1e58:	0005190a 	andeq	r1, r5, sl, lsl #18
    1e5c:	74470100 	strbvc	r0, [r7], #-256	; 0x100
    1e60:	24000000 	strcs	r0, [r0], #-0
    1e64:	9c00008e 	stcls	0, cr0, [r0], {142}	; 0x8e
    1e68:	01000001 	tsteq	r0, r1
    1e6c:	0002d39c 	muleq	r2, ip, r3
    1e70:	04dd0d00 	ldrbeq	r0, [sp], #3328	; 0xd00
    1e74:	47010000 	strmi	r0, [r1, -r0]
    1e78:	0000002c 	andeq	r0, r0, ip, lsr #32
    1e7c:	00000b8a 	andeq	r0, r0, sl, lsl #23
    1e80:	7473640b 	ldrbtvc	r6, [r3], #-1035	; 0x40b
    1e84:	74470100 	strbvc	r0, [r7], #-256	; 0x100
    1e88:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    1e8c:	0b00000b 	bleq	1ec0 <_start-0x6140>
    1e90:	4701006e 	strmi	r0, [r1, -lr, rrx]
    1e94:	00000025 	andeq	r0, r0, r5, lsr #32
    1e98:	00000c26 	andeq	r0, r0, r6, lsr #24
    1e9c:	6c61760b 	stclvs	6, cr7, [r1], #-44	; 0xffffffd4
    1ea0:	25470100 	strbcs	r0, [r7, #-256]	; 0x100
    1ea4:	52000000 	andpl	r0, r0, #0
    1ea8:	0d00000c 	stceq	0, cr0, [r0, #-48]	; 0xffffffd0
    1eac:	0000050b 	andeq	r0, r0, fp, lsl #10
    1eb0:	00254701 	eoreq	r4, r5, r1, lsl #14
    1eb4:	0cd10000 	ldcleq	0, cr0, [r1], {0}
    1eb8:	e20e0000 	and	r0, lr, #0
    1ebc:	01000004 	tsteq	r0, r4
    1ec0:	00002547 	andeq	r2, r0, r7, asr #10
    1ec4:	04910200 	ldreq	r0, [r1], #512	; 0x200
    1ec8:	6675620f 	ldrbtvs	r6, [r5], -pc, lsl #4
    1ecc:	d34c0100 	movtle	r0, #49408	; 0xc100
    1ed0:	03000002 	movweq	r0, #2
    1ed4:	107fa891 			; <UNDEFINED> instruction: 0x107fa891
    1ed8:	4c010070 	stcmi	0, cr0, [r1], {112}	; 0x70
    1edc:	00000074 	andeq	r0, r0, r4, ror r0
    1ee0:	00000cfb 	strdeq	r0, [r0], -fp
    1ee4:	01007510 	tsteq	r0, r0, lsl r5
    1ee8:	00002c4d 	andeq	r2, r0, sp, asr #24
    1eec:	000da000 	andeq	sl, sp, r0
    1ef0:	013b1100 	teqeq	fp, r0, lsl #2
    1ef4:	02f30000 	rscseq	r0, r3, #0
    1ef8:	03050000 	movweq	r0, #20480	; 0x5000
    1efc:	0000a97c 	andeq	sl, r0, ip, ror r9
    1f00:	008e9012 	addeq	r9, lr, r2, lsl r0
    1f04:	00007400 	andeq	r7, r0, r0, lsl #8
    1f08:	00026100 	andeq	r6, r2, r0, lsl #2
    1f0c:	04bf1300 	ldrteq	r1, [pc], #768	; 1f14 <_start-0x60ec>
    1f10:	52010000 	andpl	r0, r1, #0
    1f14:	0000002c 	andeq	r0, r0, ip, lsr #32
    1f18:	00000ea5 	andeq	r0, r0, r5, lsr #29
    1f1c:	8f641400 	svchi	0x00641400
    1f20:	06600000 	strbteq	r0, [r0], -r0
    1f24:	78150000 	ldmdavc	r5, {}	; <UNPREDICTABLE>
    1f28:	6700008f 	strvs	r0, [r0, -pc, lsl #1]
    1f2c:	99000006 	stmdbls	r0, {r1, r2}
    1f30:	16000002 	strne	r0, [r0], -r2
    1f34:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    1f38:	52011675 	andpl	r1, r1, #122683392	; 0x7500000
    1f3c:	a97c0305 	ldmdbge	ip!, {r0, r2, r8, r9}^
    1f40:	01160000 	tsteq	r6, r0
    1f44:	b4030551 	strlt	r0, [r3], #-1361	; 0x551
    1f48:	160000a9 	strne	r0, [r0], -r9, lsr #1
    1f4c:	03055001 	movweq	r5, #20481	; 0x5001
    1f50:	0000a9a0 	andeq	sl, r0, r0, lsr #19
    1f54:	8f7c1400 	svchi	0x007c1400
    1f58:	067d0000 	ldrbteq	r0, [sp], -r0
    1f5c:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    1f60:	e000008f 	and	r0, r0, pc, lsl #1
    1f64:	b6000000 	strlt	r0, [r0], -r0
    1f68:	16000002 	strne	r0, [r0], -r2
    1f6c:	7d025101 	stfvcs	f5, [r2, #-4]
    1f70:	9c170000 	ldcls	0, cr0, [r7], {-0}
    1f74:	3000008f 	andcc	r0, r0, pc, lsl #1
    1f78:	16000001 	strne	r0, [r0], -r1
    1f7c:	7d025301 	stcvc	3, cr5, [r2, #-4]
    1f80:	51011600 	tstpl	r1, r0, lsl #12
    1f84:	16007402 	strne	r7, [r0], -r2, lsl #8
    1f88:	75025001 	strvc	r5, [r2, #-1]
    1f8c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1f90:	0000007a 	andeq	r0, r0, sl, ror r0
    1f94:	000002e3 	andeq	r0, r0, r3, ror #5
    1f98:	00006b19 	andeq	r6, r0, r9, lsl fp
    1f9c:	18003f00 	stmdane	r0, {r8, r9, sl, fp, ip, sp}
    1fa0:	0000007a 	andeq	r0, r0, sl, ror r0
    1fa4:	000002f3 	strdeq	r0, [r0], -r3
    1fa8:	00006b19 	andeq	r6, r0, r9, lsl fp
    1fac:	06000400 	streq	r0, [r0], -r0, lsl #8
    1fb0:	000002e3 	andeq	r0, r0, r3, ror #5
    1fb4:	0004fc1a 	andeq	pc, r4, sl, lsl ip	; <UNPREDICTABLE>
    1fb8:	c01f0100 	andsgt	r0, pc, r0, lsl #2
    1fbc:	5400008f 	strpl	r0, [r0], #-143	; 0x8f
    1fc0:	01000000 	mrseq	r0, (UNDEF: 0)
    1fc4:	00037c9c 	muleq	r3, ip, ip
    1fc8:	05110d00 	ldreq	r0, [r1, #-3328]	; 0xd00
    1fcc:	1f010000 	svcne	0x00010000
    1fd0:	0000038b 	andeq	r0, r0, fp, lsl #7
    1fd4:	00000ed1 	ldrdeq	r0, [r0], -r1
    1fd8:	0004d50d 	andeq	sp, r4, sp, lsl #10
    1fdc:	a01f0100 	andsge	r0, pc, r0, lsl #2
    1fe0:	fd000003 	stc2	0, cr0, [r0, #-12]
    1fe4:	1100000e 	tstne	r0, lr
    1fe8:	0000013b 	andeq	r0, r0, fp, lsr r1
    1fec:	000003b6 			; <UNDEFINED> instruction: 0x000003b6
    1ff0:	a9840305 	stmibge	r4, {r0, r2, r8, r9}
    1ff4:	d0140000 	andsle	r0, r4, r0
    1ff8:	6000008f 	andvs	r0, r0, pc, lsl #1
    1ffc:	15000006 	strne	r0, [r0, #-6]
    2000:	00008fe4 	andeq	r8, r0, r4, ror #31
    2004:	00000667 	andeq	r0, r0, r7, ror #12
    2008:	00000372 	andeq	r0, r0, r2, ror r3
    200c:	02530116 	subseq	r0, r3, #-2147483643	; 0x80000005
    2010:	01162008 	tsteq	r6, r8
    2014:	84030552 	strhi	r0, [r3], #-1362	; 0x552
    2018:	160000a9 	strne	r0, [r0], -r9, lsr #1
    201c:	03055101 	movweq	r5, #20737	; 0x5101
    2020:	0000a9b4 			; <UNDEFINED> instruction: 0x0000a9b4
    2024:	05500116 	ldrbeq	r0, [r0, #-278]	; 0x116
    2028:	00a9ec03 	adceq	lr, r9, r3, lsl #24
    202c:	e8140000 	ldmda	r4, {}	; <UNPREDICTABLE>
    2030:	7d00008f 	stcvc	0, cr0, [r0, #-572]	; 0xfffffdc4
    2034:	00000006 	andeq	r0, r0, r6
    2038:	0000251b 	andeq	r2, r0, fp, lsl r5
    203c:	00038b00 	andeq	r8, r3, r0, lsl #22
    2040:	00251c00 	eoreq	r1, r5, r0, lsl #24
    2044:	05000000 	streq	r0, [r0, #-0]
    2048:	00037c04 	andeq	r7, r3, r4, lsl #24
    204c:	00251b00 	eoreq	r1, r5, r0, lsl #22
    2050:	03a00000 	moveq	r0, #0
    2054:	811c0000 	tsthi	ip, r0
    2058:	00000000 	andeq	r0, r0, r0
    205c:	03910405 	orrseq	r0, r1, #83886080	; 0x5000000
    2060:	7a180000 	bvc	602068 <__bss_end__+0x5f6ef8>
    2064:	b6000000 	strlt	r0, [r0], -r0
    2068:	19000003 	stmdbne	r0, {r0, r1}
    206c:	0000006b 	andeq	r0, r0, fp, rrx
    2070:	a606000e 	strge	r0, [r6], -lr
    2074:	1d000003 	stcne	0, cr0, [r0, #-12]
    2078:	0000044e 	andeq	r0, r0, lr, asr #8
    207c:	00257d01 	eoreq	r7, r5, r1, lsl #26
    2080:	90140000 	andsls	r0, r4, r0
    2084:	02880000 	addeq	r0, r8, #0
    2088:	9c010000 	stcls	0, cr0, [r1], {-0}
    208c:	00000625 	andeq	r0, r0, r5, lsr #12
    2090:	6675620b 	ldrbtvs	r6, [r5], -fp, lsl #4
    2094:	747d0100 	ldrbtvc	r0, [sp], #-256	; 0x100
    2098:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    209c:	0b00000f 	bleq	20e0 <_start-0x5f20>
    20a0:	7d01006e 	stcvc	0, cr0, [r1, #-440]	; 0xfffffe48
    20a4:	00000025 	andeq	r0, r0, r5, lsr #32
    20a8:	00000f55 	andeq	r0, r0, r5, asr pc
    20ac:	746d660b 	strbtvc	r6, [sp], #-1547	; 0x60b
    20b0:	817d0100 	cmnhi	sp, r0, lsl #2
    20b4:	83000000 	movwhi	r0, #0
    20b8:	0d00000f 	stceq	0, cr0, [r0, #-60]	; 0xffffffc4
    20bc:	00000462 	andeq	r0, r0, r2, ror #8
    20c0:	00ae7d01 	adceq	r7, lr, r1, lsl #26
    20c4:	0fb70000 	svceq	0x00b70000
    20c8:	70100000 	andsvc	r0, r0, r0
    20cc:	747e0100 	ldrbtvc	r0, [lr], #-256	; 0x100
    20d0:	ca000000 	bgt	20d8 <_start-0x5f28>
    20d4:	1000000f 	andne	r0, r0, pc
    20d8:	7e010065 	cdpvc	0, 0, cr0, cr1, cr5, {3}
    20dc:	00000074 	andeq	r0, r0, r4, ror r0
    20e0:	00001048 	andeq	r1, r0, r8, asr #32
    20e4:	00013b11 	andeq	r3, r1, r1, lsl fp
    20e8:	00063500 	andeq	r3, r6, r0, lsl #10
    20ec:	94030500 	strls	r0, [r3], #-1280	; 0x500
    20f0:	1e0000a9 	cdpne	0, 0, cr0, cr0, cr9, {5}
    20f4:	00000060 	andeq	r0, r0, r0, rrx
    20f8:	01007310 	tsteq	r0, r0, lsl r3
    20fc:	0000748b 	andeq	r7, r0, fp, lsl #9
    2100:	00106f00 	andseq	r6, r0, r0, lsl #30
    2104:	756e0f00 	strbvc	r0, [lr, #-3840]!	; 0xf00
    2108:	8b01006d 	blhi	422c4 <__bss_end__+0x37154>
    210c:	0000063a 	andeq	r0, r0, sl, lsr r6
    2110:	7ed89103 	atnvce	f1, f3
    2114:	00050b13 	andeq	r0, r5, r3, lsl fp
    2118:	2c8c0100 	stfcss	f0, [ip], {0}
    211c:	c4000000 	strgt	r0, [r0], #-0
    2120:	15000010 	strne	r0, [r0, #-16]
    2124:	00009098 	muleq	r0, r8, r0
    2128:	000000b9 	strheq	r0, [r0], -r9
    212c:	0000047b 	andeq	r0, r0, fp, ror r4
    2130:	02500116 	subseq	r0, r0, #-2147483643	; 0x80000005
    2134:	14000075 	strne	r0, [r0], #-117	; 0x75
    2138:	000090ac 	andeq	r9, r0, ip, lsr #1
    213c:	00000660 	andeq	r0, r0, r0, ror #12
    2140:	0090c015 	addseq	ip, r0, r5, lsl r0
    2144:	00066700 	andeq	r6, r6, r0, lsl #14
    2148:	0004b300 	andeq	fp, r4, r0, lsl #6
    214c:	53011600 	movwpl	r1, #5632	; 0x1600
    2150:	16920802 	ldrne	r0, [r2], r2, lsl #16
    2154:	03055201 	movweq	r5, #20993	; 0x5201
    2158:	0000a994 	muleq	r0, r4, r9
    215c:	05510116 	ldrbeq	r0, [r1, #-278]	; 0x116
    2160:	00a9b403 	adceq	fp, r9, r3, lsl #8
    2164:	50011600 	andpl	r1, r1, r0, lsl #12
    2168:	aa040305 	bge	102d84 <__bss_end__+0xf7c14>
    216c:	14000000 	strne	r0, [r0], #-0
    2170:	000090c4 	andeq	r9, r0, r4, asr #1
    2174:	0000067d 	andeq	r0, r0, sp, ror r6
    2178:	00913414 	addseq	r3, r1, r4, lsl r4
    217c:	00066000 	andeq	r6, r6, r0
    2180:	91481500 	cmpls	r8, r0, lsl #10
    2184:	06670000 	strbteq	r0, [r7], -r0
    2188:	04f40000 	ldrbteq	r0, [r4], #0
    218c:	01160000 	tsteq	r6, r0
    2190:	98080253 	stmdals	r8, {r0, r1, r4, r6, r9}
    2194:	05520116 	ldrbeq	r0, [r2, #-278]	; 0x116
    2198:	00a99403 	adceq	r9, r9, r3, lsl #8
    219c:	51011600 	tstpl	r1, r0, lsl #12
    21a0:	a9b40305 	ldmibge	r4!, {r0, r2, r8, r9}
    21a4:	01160000 	tsteq	r6, r0
    21a8:	20030550 	andcs	r0, r3, r0, asr r5
    21ac:	000000aa 	andeq	r0, r0, sl, lsr #1
    21b0:	00914c14 	addseq	r4, r1, r4, lsl ip
    21b4:	00067d00 	andeq	r7, r6, r0, lsl #26
    21b8:	91701500 	cmnls	r0, r0, lsl #10
    21bc:	019c0000 	orrseq	r0, ip, r0
    21c0:	052a0000 	streq	r0, [sl, #-0]!
    21c4:	01160000 	tsteq	r6, r0
    21c8:	80080252 	andhi	r0, r8, r2, asr r2
    21cc:	03510116 	cmpeq	r1, #-2147483643	; 0x80000005
    21d0:	167ed091 			; <UNDEFINED> instruction: 0x167ed091
    21d4:	3a015001 	bcc	561e0 <__bss_end__+0x4b070>
    21d8:	047d0216 	ldrbteq	r0, [sp], #-534	; 0x216
    21dc:	02163101 	andseq	r3, r6, #1073741824	; 0x40000000
    21e0:	7702007d 	smlsdxvc	r2, sp, r0, r0
    21e4:	94150000 	ldrls	r0, [r5], #-0
    21e8:	9c000091 	stcls	0, cr0, [r0], {145}	; 0x91
    21ec:	58000001 	stmdapl	r0, {r0}
    21f0:	16000005 	strne	r0, [r0], -r5
    21f4:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    21f8:	51011680 	smlabbpl	r1, r0, r6, r1
    21fc:	7ed09103 	atnvcs	f1, f3
    2200:	01500116 	cmpeq	r0, r6, lsl r1
    2204:	7d02163a 	stcvc	6, cr1, [r2, #-232]	; 0xffffff18
    2208:	007b0204 	rsbseq	r0, fp, r4, lsl #4
    220c:	007d0216 	rsbseq	r0, sp, r6, lsl r2
    2210:	00007702 	andeq	r7, r0, r2, lsl #14
    2214:	0091b815 	addseq	fp, r1, r5, lsl r8
    2218:	00019c00 	andeq	r9, r1, r0, lsl #24
    221c:	00058600 	andeq	r8, r5, r0, lsl #12
    2220:	52011600 	andpl	r1, r1, #0, 12
    2224:	16800802 	strne	r0, [r0], r2, lsl #16
    2228:	91035101 	tstls	r3, r1, lsl #2
    222c:	01167ed0 			; <UNDEFINED> instruction: 0x01167ed0
    2230:	16400150 			; <UNDEFINED> instruction: 0x16400150
    2234:	02047d02 	andeq	r7, r4, #2, 26	; 0x80
    2238:	0216007b 	andseq	r0, r6, #123	; 0x7b
    223c:	7702007d 	smlsdxvc	r2, sp, r0, r0
    2240:	dc150000 	ldcle	0, cr0, [r5], {-0}
    2244:	9c000091 	stcls	0, cr0, [r0], {145}	; 0x91
    2248:	b4000001 	strlt	r0, [r0], #-1
    224c:	16000005 	strne	r0, [r0], -r5
    2250:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    2254:	51011680 	smlabbpl	r1, r0, r6, r1
    2258:	7ed09103 	atnvcs	f1, f3
    225c:	01500116 	cmpeq	r0, r6, lsl r1
    2260:	7d021632 	stcvc	6, cr1, [r2, #-200]	; 0xffffff38
    2264:	007b0204 	rsbseq	r0, fp, r4, lsl #4
    2268:	007d0216 	rsbseq	r0, sp, r6, lsl r2
    226c:	00007702 	andeq	r7, r0, r2, lsl #14
    2270:	00920c15 	addseq	r0, r2, r5, lsl ip
    2274:	00019c00 	andeq	r9, r1, r0, lsl #24
    2278:	0005e200 	andeq	lr, r5, r0, lsl #4
    227c:	52011600 	andpl	r1, r1, #0, 12
    2280:	16800802 	strne	r0, [r0], r2, lsl #16
    2284:	91035101 	tstls	r3, r1, lsl #2
    2288:	01167ed0 			; <UNDEFINED> instruction: 0x01167ed0
    228c:	16380150 			; <UNDEFINED> instruction: 0x16380150
    2290:	02047d02 	andeq	r7, r4, #2, 26	; 0x80
    2294:	0216007b 	andseq	r0, r6, #123	; 0x7b
    2298:	7702007d 	smlsdxvc	r2, sp, r0, r0
    229c:	14140000 	ldrne	r0, [r4], #-0
    22a0:	60000092 	mulvs	r0, r2, r0
    22a4:	15000006 	strne	r0, [r0, #-6]
    22a8:	00009230 	andeq	r9, r0, r0, lsr r2
    22ac:	00000667 	andeq	r0, r0, r7, ror #12
    22b0:	0000061a 	andeq	r0, r0, sl, lsl r6
    22b4:	02530116 	subseq	r0, r3, #-2147483643	; 0x80000005
    22b8:	0116b908 	tsteq	r6, r8, lsl #18
    22bc:	94030552 	strls	r0, [r3], #-1362	; 0x552
    22c0:	160000a9 	strne	r0, [r0], -r9, lsr #1
    22c4:	03055101 	movweq	r5, #20737	; 0x5101
    22c8:	0000a9b4 			; <UNDEFINED> instruction: 0x0000a9b4
    22cc:	05500116 	ldrbeq	r0, [r0, #-278]	; 0x116
    22d0:	00aa4803 	adceq	r4, sl, r3, lsl #16
    22d4:	34140000 	ldrcc	r0, [r4], #-0
    22d8:	7d000092 	stcvc	0, cr0, [r0, #-584]	; 0xfffffdb8
    22dc:	00000006 	andeq	r0, r0, r6
    22e0:	007a1800 	rsbseq	r1, sl, r0, lsl #16
    22e4:	06350000 	ldrteq	r0, [r5], -r0
    22e8:	6b190000 	blvs	6422f0 <__bss_end__+0x637180>
    22ec:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    22f0:	06250600 	strteq	r0, [r5], -r0, lsl #12
    22f4:	7a180000 	bvc	6022fc <__bss_end__+0x5f718c>
    22f8:	4a000000 	bmi	2300 <_start-0x5d00>
    22fc:	19000006 	stmdbne	r0, {r1, r2}
    2300:	0000006b 	andeq	r0, r0, fp, rrx
    2304:	7d1f007f 	ldcvc	0, cr0, [pc, #-508]	; 2110 <_start-0x5ef0>
    2308:	03000004 	movweq	r0, #4
    230c:	00038b1d 	andeq	r8, r3, sp, lsl fp
    2310:	04ba1f00 	ldrteq	r1, [sl], #3840	; 0xf00
    2314:	22030000 	andcs	r0, r3, #0
    2318:	000003a0 	andeq	r0, r0, r0, lsr #7
    231c:	0001f620 	andeq	pc, r1, r0, lsr #12
    2320:	211e0300 	tstcs	lr, r0, lsl #6
    2324:	00000451 	andeq	r0, r0, r1, asr r4
    2328:	00252903 	eoreq	r2, r5, r3, lsl #18
    232c:	067d0000 	ldrbteq	r0, [sp], -r0
    2330:	811c0000 	tsthi	ip, r0
    2334:	22000000 	andcs	r0, r0, #0
    2338:	00822000 	addeq	r2, r2, r0
    233c:	66030000 	strvs	r0, [r3], -r0
    2340:	0000ff00 	andeq	pc, r0, r0, lsl #30
    2344:	7b000400 	blvc	334c <_start-0x4cb4>
    2348:	0400000b 	streq	r0, [r0], #-11
    234c:	00000b01 	andeq	r0, r0, r1, lsl #22
    2350:	05290100 	streq	r0, [r9, #-256]!	; 0x100
    2354:	03ed0000 	mvneq	r0, #0
    2358:	929c0000 	addsls	r0, ip, #0
    235c:	00280000 	eoreq	r0, r8, r0
    2360:	0a560000 	beq	1582368 <__bss_end__+0x15771f8>
    2364:	04020000 	streq	r0, [r2], #-0
    2368:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    236c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2370:	00000176 	andeq	r0, r0, r6, ror r1
    2374:	76060103 	strvc	r0, [r6], -r3, lsl #2
    2378:	03000000 	movweq	r0, #0
    237c:	01c70502 	biceq	r0, r7, r2, lsl #10
    2380:	04030000 	streq	r0, [r3], #-0
    2384:	0001b305 	andeq	fp, r1, r5, lsl #6
    2388:	05080300 	streq	r0, [r8, #-768]	; 0x300
    238c:	000001ae 	andeq	r0, r0, lr, lsr #3
    2390:	74080103 	strvc	r0, [r8], #-259	; 0x103
    2394:	03000000 	movweq	r0, #0
    2398:	00f30702 	rscseq	r0, r3, r2, lsl #14
    239c:	04030000 	streq	r0, [r3], #-0
    23a0:	00017107 	andeq	r7, r1, r7, lsl #2
    23a4:	07080300 	streq	r0, [r8, -r0, lsl #6]
    23a8:	0000016c 	andeq	r0, r0, ip, ror #2
    23ac:	a5070403 	strge	r0, [r7, #-1027]	; 0x403
    23b0:	03000001 	movweq	r0, #1
    23b4:	007d0801 	rsbseq	r0, sp, r1, lsl #16
    23b8:	04040000 	streq	r0, [r4], #-0
    23bc:	0000007f 	andeq	r0, r0, pc, ror r0
    23c0:	00007205 	andeq	r7, r0, r5, lsl #4
    23c4:	00820600 	addeq	r0, r2, r0, lsl #12
    23c8:	04010000 	streq	r0, [r1], #-0
    23cc:	0000929c 	muleq	r0, ip, r2
    23d0:	00000028 	andeq	r0, r0, r8, lsr #32
    23d4:	00ca9c01 	sbceq	r9, sl, r1, lsl #24
    23d8:	b0070000 	andlt	r0, r7, r0
    23dc:	ac000092 	stcge	0, cr0, [r0], {146}	; 0x92
    23e0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    23e4:	03055001 	movweq	r5, #20481	; 0x5001
    23e8:	0000aa80 	andeq	sl, r0, r0, lsl #21
    23ec:	92b80900 	adcsls	r0, r8, #0, 18
    23f0:	00ea0000 	rsceq	r0, sl, r0
    23f4:	00c00000 	sbceq	r0, r0, r0
    23f8:	01080000 	mrseq	r0, (UNDEF: 8)
    23fc:	64080250 	strvs	r0, [r8], #-592	; 0x250
    2400:	92bc0a00 	adcsls	r0, ip, #0, 20
    2404:	00fb0000 	rscseq	r0, fp, r0
    2408:	0b000000 	bleq	2410 <_start-0x5bf0>
    240c:	00000025 	andeq	r0, r0, r5, lsr #32
    2410:	000000d9 	ldrdeq	r0, [r0], -r9
    2414:	0000790c 	andeq	r7, r0, ip, lsl #18
    2418:	ba0d0000 	blt	342420 <__bss_end__+0x3372b0>
    241c:	02000004 	andeq	r0, r0, #4
    2420:	0000e422 	andeq	lr, r0, r2, lsr #8
    2424:	ca040400 	bgt	10342c <__bss_end__+0xf82bc>
    2428:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    242c:	00000543 	andeq	r0, r0, r3, asr #10
    2430:	00fb5002 	rscseq	r5, fp, r2
    2434:	2c0c0000 	stccs	0, cr0, [ip], {-0}
    2438:	00000000 	andeq	r0, r0, r0
    243c:	00051e0f 	andeq	r1, r5, pc, lsl #28
    2440:	00630200 	rsbeq	r0, r3, r0, lsl #4
    2444:	000002dd 	ldrdeq	r0, [r0], -sp
    2448:	0c450004 	mcrreq	0, 0, r0, r5, cr4
    244c:	01040000 	mrseq	r0, (UNDEF: 4)
    2450:	0000000b 	andeq	r0, r0, fp
    2454:	00062e01 	andeq	r2, r6, r1, lsl #28
    2458:	0003ed00 	andeq	lr, r3, r0, lsl #26
    245c:	0092c400 	addseq	ip, r2, r0, lsl #8
    2460:	0000b000 	andeq	fp, r0, r0
    2464:	000aed00 	andeq	lr, sl, r0, lsl #26
    2468:	05040200 	streq	r0, [r4, #-512]	; 0x200
    246c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2470:	76070403 	strvc	r0, [r7], -r3, lsl #8
    2474:	03000001 	movweq	r0, #1
    2478:	00760601 	rsbseq	r0, r6, r1, lsl #12
    247c:	02030000 	andeq	r0, r3, #0
    2480:	0001c705 	andeq	ip, r1, r5, lsl #14
    2484:	05040300 	streq	r0, [r4, #-768]	; 0x300
    2488:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
    248c:	ae050803 	cdpge	8, 0, cr0, cr5, cr3, {0}
    2490:	04000001 	streq	r0, [r0], #-1
    2494:	000005f7 	strdeq	r0, [r0], -r7
    2498:	005a2e02 	subseq	r2, sl, r2, lsl #28
    249c:	01030000 	mrseq	r0, (UNDEF: 3)
    24a0:	00007408 	andeq	r7, r0, r8, lsl #8
    24a4:	07020300 	streq	r0, [r2, -r0, lsl #6]
    24a8:	000000f3 	strdeq	r0, [r0], -r3
    24ac:	0001d104 	andeq	sp, r1, r4, lsl #2
    24b0:	73340200 	teqvc	r4, #0, 4
    24b4:	03000000 	movweq	r0, #0
    24b8:	01710704 	cmneq	r1, r4, lsl #14
    24bc:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    24c0:	00016c07 	andeq	r6, r1, r7, lsl #24
    24c4:	07040300 	streq	r0, [r4, -r0, lsl #6]
    24c8:	000001a5 	andeq	r0, r0, r5, lsr #3
    24cc:	7d080103 	stfvcs	f0, [r8, #-12]
    24d0:	05000000 	streq	r0, [r0, #-0]
    24d4:	00009504 	andeq	r9, r0, r4, lsl #10
    24d8:	00880600 	addeq	r0, r8, r0, lsl #12
    24dc:	0c070000 	stceq	0, cr0, [r7], {-0}
    24e0:	00d10e03 	sbcseq	r0, r1, r3, lsl #28
    24e4:	74080000 	strvc	r0, [r8], #-0
    24e8:	0f030078 	svceq	0x00030078
    24ec:	0000004f 	andeq	r0, r0, pc, asr #32
    24f0:	78720800 	ldmdavc	r2!, {fp}^
    24f4:	4f0f0300 	svcmi	0x000f0300
    24f8:	01000000 	mrseq	r0, (UNDEF: 0)
    24fc:	0005c509 	andeq	ip, r5, r9, lsl #10
    2500:	68100300 	ldmdavs	r0, {r8, r9}
    2504:	04000000 	streq	r0, [r0], #-0
    2508:	00057609 	andeq	r7, r5, r9, lsl #12
    250c:	68110300 	ldmdavs	r1, {r8, r9}
    2510:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2514:	05ae0400 	streq	r0, [lr, #1024]!	; 0x400
    2518:	12030000 	andne	r0, r3, #0
    251c:	0000009a 	muleq	r0, sl, r0
    2520:	1004010a 	andne	r0, r4, sl, lsl #2
    2524:	000000f7 	strdeq	r0, [r0], -r7
    2528:	0005ca0b 	andeq	ip, r5, fp, lsl #20
    252c:	b80b0100 	stmdalt	fp, {r8}
    2530:	02000005 	andeq	r0, r0, #5
    2534:	0005a00b 	andeq	sl, r5, fp
    2538:	04000300 	streq	r0, [r0], #-768	; 0x300
    253c:	000005df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2540:	00dc1004 	sbcseq	r1, ip, r4
    2544:	14070000 	strne	r0, [r7], #-0
    2548:	012f1404 	teqeq	pc, r4, lsl #8
    254c:	4e090000 	cdpmi	0, 0, cr0, cr9, cr0, {0}
    2550:	04000006 	streq	r0, [r0], #-6
    2554:	00002c15 	andeq	r2, r0, r5, lsl ip
    2558:	42090000 	andmi	r0, r9, #0
    255c:	04000006 	streq	r0, [r0], #-6
    2560:	0000f718 	andeq	pc, r0, r8, lsl r7	; <UNPREDICTABLE>
    2564:	0d090400 	cfstrseq	mvf0, [r9, #-0]
    2568:	04000006 	streq	r0, [r0], #-6
    256c:	0000d11b 	andeq	sp, r0, fp, lsl r1
    2570:	04000800 	streq	r0, [r0], #-2048	; 0x800
    2574:	000005ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2578:	01022004 	tsteq	r2, r4
    257c:	4c0c0000 	stcmi	0, cr0, [ip], {-0}
    2580:	01000005 	tsteq	r0, r5
    2584:	00002506 	andeq	r2, r0, r6, lsl #10
    2588:	0092c400 	addseq	ip, r2, r0, lsl #8
    258c:	00002000 	andeq	r2, r0, r0
    2590:	7a9c0100 	bvc	fe702998 <__bss_end__+0xfe6f7828>
    2594:	0d000001 	stceq	0, cr0, [r0, #-4]
    2598:	06010063 	streq	r0, [r1], -r3, rrx
    259c:	00000025 	andeq	r0, r0, r5, lsr #32
    25a0:	000010ee 	andeq	r1, r0, lr, ror #1
    25a4:	0092d80e 	addseq	sp, r2, lr, lsl #16
    25a8:	00027a00 	andeq	r7, r2, r0, lsl #20
    25ac:	51010f00 	tstpl	r1, r0, lsl #30
    25b0:	0f007402 	svceq	0x00007402
    25b4:	03055001 	movweq	r5, #20481	; 0x5001
    25b8:	0000b15c 	andeq	fp, r0, ip, asr r1
    25bc:	d7100000 	ldrle	r0, [r0, -r0]
    25c0:	01000005 	tsteq	r0, r5
    25c4:	0092e40b 	addseq	lr, r2, fp, lsl #8
    25c8:	00009000 	andeq	r9, r0, r0
    25cc:	279c0100 	ldrcs	r0, [ip, r0, lsl #2]
    25d0:	11000002 	tstne	r0, r2
    25d4:	00000560 	andeq	r0, r0, r0, ror #10
    25d8:	00250c01 	eoreq	r0, r5, r1, lsl #24
    25dc:	22110000 	andscs	r0, r1, #0
    25e0:	01000006 	tsteq	r0, r6
    25e4:	0000250c 	andeq	r2, r0, ip, lsl #10
    25e8:	00621200 	rsbeq	r1, r2, r0, lsl #4
    25ec:	0d010000 	stceq	0, cr0, [r1, #-0]
    25f0:	73736213 	cmnvc	r3, #805306369	; 0x30000001
    25f4:	270f0100 	strcs	r0, [pc, -r0, lsl #2]
    25f8:	0c000002 	stceq	0, cr0, [r0], {2}
    25fc:	14000011 	strne	r0, [r0], #-17
    2600:	0000056e 	andeq	r0, r0, lr, ror #10
    2604:	02271001 	eoreq	r1, r7, #1
    2608:	63130000 	tstvs	r3, #0
    260c:	17010062 	strne	r0, [r1, -r2, rrx]
    2610:	0000022d 	andeq	r0, r0, sp, lsr #4
    2614:	0000112c 	andeq	r1, r0, ip, lsr #2
    2618:	00930c15 	addseq	r0, r3, r5, lsl ip
    261c:	00029600 	andeq	r9, r2, r0, lsl #12
    2620:	93481600 	movtls	r1, #34304	; 0x8600
    2624:	02a10000 	adceq	r0, r1, #0
    2628:	01fd0000 	mvnseq	r0, r0
    262c:	010f0000 	mrseq	r0, CPSR
    2630:	8c030551 	cfstr32hi	mvfx0, [r3], {81}	; 0x51
    2634:	0f0000aa 	svceq	0x000000aa
    2638:	03055001 	movweq	r5, #20481	; 0x5001
    263c:	0000b15c 	andeq	fp, r0, ip, asr r1
    2640:	93501600 	cmpls	r0, #0, 12
    2644:	02bc0000 	adcseq	r0, ip, #0
    2648:	02140000 	andseq	r0, r4, #0
    264c:	010f0000 	mrseq	r0, CPSR
    2650:	b0030550 	andlt	r0, r3, r0, asr r5
    2654:	000000aa 	andeq	r0, r0, sl, lsr #1
    2658:	00935415 	addseq	r5, r3, r5, lsl r4
    265c:	0002d200 	andeq	sp, r2, r0, lsl #4
    2660:	93581500 	cmpls	r8, #0, 10
    2664:	02d90000 	sbcseq	r0, r9, #0
    2668:	05000000 	streq	r0, [r0, #-0]
    266c:	00002504 	andeq	r2, r0, r4, lsl #10
    2670:	2f040500 	svccs	0x00040500
    2674:	17000001 	strne	r0, [r0, -r1]
    2678:	00000584 	andeq	r0, r0, r4, lsl #11
    267c:	00d10501 	sbcseq	r0, r1, r1, lsl #10
    2680:	03050000 	movweq	r0, #20480	; 0x5000
    2684:	0000b15c 	andeq	fp, r0, ip, asr r1
    2688:	00002518 	andeq	r2, r0, r8, lsl r5
    268c:	00025300 	andeq	r5, r2, r0, lsl #6
    2690:	00251900 	eoreq	r1, r5, r0, lsl #18
    2694:	11000000 	mrsne	r0, (UNDEF: 0)
    2698:	0000047d 	andeq	r0, r0, sp, ror r4
    269c:	025e1d05 	subseq	r1, lr, #320	; 0x140
    26a0:	04050000 	streq	r0, [r5], #-0
    26a4:	00000244 	andeq	r0, r0, r4, asr #4
    26a8:	00056011 	andeq	r6, r5, r1, lsl r0
    26ac:	250c0100 	strcs	r0, [ip, #-256]	; 0x100
    26b0:	11000000 	mrsne	r0, (UNDEF: 0)
    26b4:	00000622 	andeq	r0, r0, r2, lsr #12
    26b8:	00250c01 	eoreq	r0, r5, r1, lsl #24
    26bc:	ea1a0000 	b	6826c4 <__bss_end__+0x677554>
    26c0:	03000005 	movweq	r0, #5
    26c4:	00029044 	andeq	r9, r2, r4, asr #32
    26c8:	02901900 	addseq	r1, r0, #0, 18
    26cc:	5a190000 	bpl	6426d4 <__bss_end__+0x637564>
    26d0:	00000000 	andeq	r0, r0, r0
    26d4:	00d10405 	sbcseq	r0, r1, r5, lsl #8
    26d8:	151b0000 	ldrne	r0, [fp, #-0]
    26dc:	04000006 	streq	r0, [r0], #-6
    26e0:	00022d2a 	andeq	r2, r2, sl, lsr #26
    26e4:	05911c00 	ldreq	r1, [r1, #3072]	; 0xc00
    26e8:	15030000 	strne	r0, [r3, #-0]
    26ec:	00000025 	andeq	r0, r0, r5, lsr #32
    26f0:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
    26f4:	00029019 	andeq	r9, r2, r9, lsl r0
    26f8:	008f1900 	addeq	r1, pc, r0, lsl #18
    26fc:	001d0000 	andseq	r0, sp, r0
    2700:	0004511c 	andeq	r5, r4, ip, lsl r1
    2704:	25290500 	strcs	r0, [r9, #-1280]!	; 0x500
    2708:	d2000000 	andle	r0, r0, #0
    270c:	19000002 	stmdbne	r0, {r1}
    2710:	0000008f 	andeq	r0, r0, pc, lsl #1
    2714:	6212001d 	andsvs	r0, r2, #29
    2718:	05000000 	streq	r0, [r0, #-0]
    271c:	051e12d1 	ldreq	r1, [lr, #-721]	; 0x2d1
    2720:	63050000 	movwvs	r0, #20480	; 0x5000
    2724:	0001ad00 	andeq	sl, r1, r0, lsl #26
    2728:	dc000400 	cfstrsle	mvf0, [r0], {-0}
    272c:	0400000d 	streq	r0, [r0], #-13
    2730:	00000b01 	andeq	r0, r0, r1, lsl #22
    2734:	066e0100 	strbteq	r0, [lr], -r0, lsl #2
    2738:	03ed0000 	mvneq	r0, #0
    273c:	00780000 	rsbseq	r0, r8, r0
    2740:	00000000 	andeq	r0, r0, r0
    2744:	0c120000 	ldceq	0, cr0, [r2], {-0}
    2748:	04020000 	streq	r0, [r2], #-0
    274c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    2750:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2754:	00000176 	andeq	r0, r0, r6, ror r1
    2758:	76060103 	strvc	r0, [r6], -r3, lsl #2
    275c:	03000000 	movweq	r0, #0
    2760:	01c70502 	biceq	r0, r7, r2, lsl #10
    2764:	04030000 	streq	r0, [r3], #-0
    2768:	0001b305 	andeq	fp, r1, r5, lsl #6
    276c:	05080300 	streq	r0, [r8, #-768]	; 0x300
    2770:	000001ae 	andeq	r0, r0, lr, lsr #3
    2774:	74080103 	strvc	r0, [r8], #-259	; 0x103
    2778:	03000000 	movweq	r0, #0
    277c:	00f30702 	rscseq	r0, r3, r2, lsl #14
    2780:	04030000 	streq	r0, [r3], #-0
    2784:	00017107 	andeq	r7, r1, r7, lsl #2
    2788:	07080300 	streq	r0, [r8, -r0, lsl #6]
    278c:	0000016c 	andeq	r0, r0, ip, ror #2
    2790:	a5070403 	strge	r0, [r7, #-1027]	; 0x403
    2794:	03000001 	movweq	r0, #1
    2798:	007d0801 	rsbseq	r0, sp, r1, lsl #16
    279c:	54040000 	strpl	r0, [r4], #-0
    27a0:	01000006 	tsteq	r0, r6
    27a4:	0000250e 	andeq	r2, r0, lr, lsl #10
    27a8:	00937400 	addseq	r7, r3, r0, lsl #8
    27ac:	00001800 	andeq	r1, r0, r0, lsl #16
    27b0:	a29c0100 	addsge	r0, ip, #0, 2
    27b4:	05000000 	streq	r0, [r0, #-0]
    27b8:	000006c0 	andeq	r0, r0, r0, asr #13
    27bc:	002c0f01 	eoreq	r0, ip, r1, lsl #30
    27c0:	114c0000 	mrsne	r0, (UNDEF: 76)
    27c4:	06000000 	streq	r0, [r0], -r0
    27c8:	000006a3 	andeq	r0, r0, r3, lsr #13
    27cc:	938c1701 	orrls	r1, ip, #262144	; 0x40000
    27d0:	00140000 	andseq	r0, r4, r0
    27d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    27d8:	000000c7 	andeq	r0, r0, r7, asr #1
    27dc:	0006c005 	andeq	ip, r6, r5
    27e0:	2c180100 	ldfcss	f0, [r8], {-0}
    27e4:	6b000000 	blvs	27ec <_start-0x5814>
    27e8:	00000011 	andeq	r0, r0, r1, lsl r0
    27ec:	00051e06 	andeq	r1, r5, r6, lsl #28
    27f0:	a01f0100 	andsge	r0, pc, r0, lsl #2
    27f4:	48000093 	stmdami	r0, {r0, r1, r4, r7}
    27f8:	01000000 	mrseq	r0, (UNDEF: 0)
    27fc:	0001779c 	muleq	r1, ip, r7
    2800:	06b80700 	ldrteq	r0, [r8], r0, lsl #14
    2804:	2a010000 	bcs	4280c <__bss_end__+0x3769c>
    2808:	00000177 	andeq	r0, r0, r7, ror r1
    280c:	2010001c 	andscs	r0, r0, ip, lsl r0
    2810:	00069b07 	andeq	r9, r6, r7, lsl #22
    2814:	772b0100 	strvc	r0, [fp, -r0, lsl #2]!
    2818:	24000001 	strcs	r0, [r0], #-1
    281c:	07201000 	streq	r1, [r0, -r0]!
    2820:	00000662 	andeq	r0, r0, r2, ror #12
    2824:	01772c01 	cmneq	r7, r1, lsl #24
    2828:	00000000 	andeq	r0, r0, r0
    282c:	82085a00 	andhi	r5, r8, #0, 20
    2830:	01000006 	tsteq	r0, r6
    2834:	0001772d 	andeq	r7, r1, sp, lsr #14
    2838:	a8092000 	stmdage	r9, {sp}
    283c:	79000093 	stmdbvc	r0, {r0, r1, r4, r7}
    2840:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2844:	000093b4 			; <UNDEFINED> instruction: 0x000093b4
    2848:	000000a2 	andeq	r0, r0, r2, lsr #1
    284c:	0093bc0a 	addseq	fp, r3, sl, lsl #24
    2850:	00018d00 	andeq	r8, r1, r0, lsl #26
    2854:	00013a00 	andeq	r3, r1, r0, lsl #20
    2858:	50010b00 	andpl	r0, r1, r0, lsl #22
    285c:	0a004e01 	beq	16068 <__bss_end__+0xaef8>
    2860:	000093c8 	andeq	r9, r0, r8, asr #7
    2864:	0000019e 	muleq	r0, lr, r1
    2868:	0000015a 	andeq	r0, r0, sl, asr r1
    286c:	0551010b 	ldrbeq	r0, [r1, #-267]	; 0x10b
    2870:	0000010c 	andeq	r0, r0, ip, lsl #2
    2874:	50010b5a 	andpl	r0, r1, sl, asr fp
    2878:	00240c05 	eoreq	r0, r4, r5, lsl #24
    287c:	0c002010 	stceq	0, cr2, [r0], {16}
    2880:	000093d4 	ldrdeq	r9, [r0], -r4
    2884:	0000019e 	muleq	r0, lr, r1
    2888:	0551010b 	ldrbeq	r0, [r1, #-267]	; 0x10b
    288c:	0000200c 	andeq	r2, r0, ip
    2890:	50010b5a 	andpl	r0, r1, sl, asr fp
    2894:	001c0c05 	andseq	r0, ip, r5, lsl #24
    2898:	00002010 	andeq	r2, r0, r0, lsl r0
    289c:	0000250d 	andeq	r2, r0, sp, lsl #10
    28a0:	06570800 	ldrbeq	r0, [r7], -r0, lsl #16
    28a4:	0d010000 	stceq	0, cr0, [r1, #-0]
    28a8:	00000188 	andeq	r0, r0, r8, lsl #3
    28ac:	002c0d10 	eoreq	r0, ip, r0, lsl sp
    28b0:	430e0000 	movwmi	r0, #57344	; 0xe000
    28b4:	02000005 	andeq	r0, r0, #5
    28b8:	00019e50 	andeq	r9, r1, r0, asr lr
    28bc:	002c0f00 	eoreq	r0, ip, r0, lsl #30
    28c0:	10000000 	andne	r0, r0, r0
    28c4:	000006b2 			; <UNDEFINED> instruction: 0x000006b2
    28c8:	2c0f9c02 	stccs	12, cr9, [pc], {2}
    28cc:	0f000000 	svceq	0x00000000
    28d0:	0000002c 	andeq	r0, r0, ip, lsr #32
    28d4:	01d80000 	bicseq	r0, r8, r0
    28d8:	00040000 	andeq	r0, r4, r0
    28dc:	00000eca 	andeq	r0, r0, sl, asr #29
    28e0:	000b0104 	andeq	r0, fp, r4, lsl #2
    28e4:	e2010000 	and	r0, r1, #0
    28e8:	ed000006 	stc	0, cr0, [r0, #-24]	; 0xffffffe8
    28ec:	e8000003 	stmda	r0, {r0, r1}
    28f0:	88000093 	stmdahi	r0, {r0, r1, r4, r7}
    28f4:	af000000 	svcge	0x00000000
    28f8:	0200000c 	andeq	r0, r0, #12
    28fc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2900:	04030074 	streq	r0, [r3], #-116	; 0x74
    2904:	00017607 	andeq	r7, r1, r7, lsl #12
    2908:	06010300 	streq	r0, [r1], -r0, lsl #6
    290c:	00000076 	andeq	r0, r0, r6, ror r0
    2910:	c7050203 	strgt	r0, [r5, -r3, lsl #4]
    2914:	03000001 	movweq	r0, #1
    2918:	01b30504 			; <UNDEFINED> instruction: 0x01b30504
    291c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2920:	0001ae05 	andeq	sl, r1, r5, lsl #28
    2924:	08010300 	stmdaeq	r1, {r8, r9}
    2928:	00000074 	andeq	r0, r0, r4, ror r0
    292c:	f3070203 	vhsub.u8	d0, d7, d3
    2930:	03000000 	movweq	r0, #0
    2934:	01710704 	cmneq	r1, r4, lsl #14
    2938:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    293c:	00016c07 	andeq	r6, r1, r7, lsl #24
    2940:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2944:	000001a5 	andeq	r0, r0, r5, lsr #3
    2948:	7d080103 	stfvcs	f0, [r8, #-12]
    294c:	04000000 	streq	r0, [r0], #-0
    2950:	00000701 	andeq	r0, r0, r1, lsl #14
    2954:	93e80501 	mvnls	r0, #4194304	; 0x400000
    2958:	001c0000 	andseq	r0, ip, r0
    295c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2960:	0000009e 	muleq	r0, lr, r0
    2964:	0006fb05 	andeq	pc, r6, r5, lsl #22
    2968:	2c050100 	stfcss	f0, [r5], {-0}
    296c:	95000000 	strls	r0, [r0, #-0]
    2970:	00000011 	andeq	r0, r0, r1, lsl r0
    2974:	0006c506 	andeq	ip, r6, r6, lsl #10
    2978:	2c0b0100 	stfcss	f0, [fp], {-0}
    297c:	04000000 	streq	r0, [r0], #-0
    2980:	14000094 	strne	r0, [r0], #-148	; 0x94
    2984:	01000000 	mrseq	r0, (UNDEF: 0)
    2988:	0000cb9c 	muleq	r0, ip, fp
    298c:	94100700 	ldrls	r0, [r0], #-1792	; 0x700
    2990:	01ca0000 	biceq	r0, sl, r0
    2994:	01080000 	mrseq	r0, (UNDEF: 8)
    2998:	040c0550 	streq	r0, [ip], #-1360	; 0x550
    299c:	00200030 	eoreq	r0, r0, r0, lsr r0
    29a0:	07170600 	ldreq	r0, [r7, -r0, lsl #12]
    29a4:	10010000 	andne	r0, r1, r0
    29a8:	0000002c 	andeq	r0, r0, ip, lsr #32
    29ac:	00009418 	andeq	r9, r0, r8, lsl r4
    29b0:	0000000c 	andeq	r0, r0, ip
    29b4:	00f99c01 	rscseq	r9, r9, r1, lsl #24
    29b8:	75090000 	strvc	r0, [r9, #-0]
    29bc:	2c140100 	ldfcss	f0, [r4], {-0}
    29c0:	01000000 	mrseq	r0, (UNDEF: 0)
    29c4:	94200a50 	strtls	r0, [r0], #-2640	; 0xa50
    29c8:	009e0000 	addseq	r0, lr, r0
    29cc:	04000000 	streq	r0, [r0], #-0
    29d0:	0000070e 	andeq	r0, r0, lr, lsl #14
    29d4:	94241901 	strtls	r1, [r4], #-2305	; 0x901
    29d8:	00240000 	eoreq	r0, r4, r0
    29dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    29e0:	00000157 	andeq	r0, r0, r7, asr r1
    29e4:	0073750b 	rsbseq	r7, r3, fp, lsl #10
    29e8:	002c1901 	eoreq	r1, ip, r1, lsl #18
    29ec:	11c90000 	bicne	r0, r9, r0
    29f0:	72090000 	andvc	r0, r9, #0
    29f4:	1a010062 	bne	42b84 <__bss_end__+0x37a14>
    29f8:	0000002c 	andeq	r0, r0, ip, lsr #32
    29fc:	340c5401 	strcc	r5, [ip], #-1025	; 0x401
    2a00:	10000094 	mulne	r0, r4, r0
    2a04:	4d000000 	stcmi	0, cr0, [r0, #-0]
    2a08:	0d000001 	stceq	0, cr0, [r0, #-4]
    2a0c:	01006172 	tsteq	r0, r2, ror r1
    2a10:	00002c1c 	andeq	r2, r0, ip, lsl ip
    2a14:	0011e700 	andseq	lr, r1, r0, lsl #14
    2a18:	94380a00 	ldrtls	r0, [r8], #-2560	; 0xa00
    2a1c:	00cb0000 	sbceq	r0, fp, r0
    2a20:	0a000000 	beq	2a28 <_start-0x55d8>
    2a24:	00009430 	andeq	r9, r0, r0, lsr r4
    2a28:	000000cb 	andeq	r0, r0, fp, asr #1
    2a2c:	05430400 	strbeq	r0, [r3, #-1024]	; 0x400
    2a30:	22010000 	andcs	r0, r1, #0
    2a34:	00009448 	andeq	r9, r0, r8, asr #8
    2a38:	00000014 	andeq	r0, r0, r4, lsl r0
    2a3c:	01909c01 	orrseq	r9, r0, r1, lsl #24
    2a40:	6d0b0000 	stcvs	0, cr0, [fp, #-0]
    2a44:	22010073 	andcs	r0, r1, #115	; 0x73
    2a48:	0000002c 	andeq	r0, r0, ip, lsr #32
    2a4c:	000011fa 	strdeq	r1, [r0], -sl
    2a50:	00945807 	addseq	r5, r4, r7, lsl #16
    2a54:	0000f900 	andeq	pc, r0, r0, lsl #18
    2a58:	50010800 	andpl	r0, r1, r0, lsl #16
    2a5c:	5001f307 	andpl	pc, r1, r7, lsl #6
    2a60:	1e03e80a 	cdpne	8, 0, cr14, cr3, cr10, {0}
    2a64:	d8040000 	stmdale	r4, {}	; <UNPREDICTABLE>
    2a68:	01000006 	tsteq	r0, r6
    2a6c:	00945c25 	addseq	r5, r4, r5, lsr #24
    2a70:	00001400 	andeq	r1, r0, r0, lsl #8
    2a74:	ca9c0100 	bgt	fe702e7c <__bss_end__+0xfe6f7d0c>
    2a78:	0b000001 	bleq	2a84 <_start-0x557c>
    2a7c:	00636573 	rsbeq	r6, r3, r3, ror r5
    2a80:	002c2501 	eoreq	r2, ip, r1, lsl #10
    2a84:	121b0000 	andsne	r0, fp, #0
    2a88:	6c070000 	stcvs	0, cr0, [r7], {-0}
    2a8c:	57000094 			; <UNDEFINED> instruction: 0x57000094
    2a90:	08000001 	stmdaeq	r0, {r0}
    2a94:	f3075001 	vhadd.u8	d5, d7, d1
    2a98:	e80a5001 	stmda	sl, {r0, ip, lr}
    2a9c:	00001e03 	andeq	r1, r0, r3, lsl #28
    2aa0:	0006f50e 	andeq	pc, r6, lr, lsl #10
    2aa4:	2ca80200 	sfmcs	f0, 4, [r8]
    2aa8:	0f000000 	svceq	0x00000000
    2aac:	0000002c 	andeq	r0, r0, ip, lsr #32
    2ab0:	03ee0000 	mvneq	r0, #0
    2ab4:	00040000 	andeq	r0, r4, r0
    2ab8:	00000fad 	andeq	r0, r0, sp, lsr #31
    2abc:	000b0104 	andeq	r0, fp, r4, lsl #2
    2ac0:	41010000 	mrsmi	r0, (UNDEF: 1)
    2ac4:	ed000007 	stc	0, cr0, [r0, #-28]	; 0xffffffe4
    2ac8:	70000003 	andvc	r0, r0, r3
    2acc:	e8000094 	stmda	r0, {r2, r4, r7}
    2ad0:	56000001 	strpl	r0, [r0], -r1
    2ad4:	0200000d 	andeq	r0, r0, #13
    2ad8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2adc:	4a030074 	bmi	c2cb4 <__bss_end__+0xb7b44>
    2ae0:	03000003 	movweq	r0, #3
    2ae4:	000037d4 	ldrdeq	r3, [r0], -r4
    2ae8:	07040400 	streq	r0, [r4, -r0, lsl #8]
    2aec:	00000176 	andeq	r0, r0, r6, ror r1
    2af0:	76060104 	strvc	r0, [r6], -r4, lsl #2
    2af4:	04000000 	streq	r0, [r0], #-0
    2af8:	01c70502 	biceq	r0, r7, r2, lsl #10
    2afc:	04040000 	streq	r0, [r4], #-0
    2b00:	0001b305 	andeq	fp, r1, r5, lsl #6
    2b04:	05080400 	streq	r0, [r8, #-1024]	; 0x400
    2b08:	000001ae 	andeq	r0, r0, lr, lsr #3
    2b0c:	74080104 	strvc	r0, [r8], #-260	; 0x104
    2b10:	04000000 	streq	r0, [r0], #-0
    2b14:	00f30702 	rscseq	r0, r3, r2, lsl #14
    2b18:	04040000 	streq	r0, [r4], #-0
    2b1c:	00017107 	andeq	r7, r1, r7, lsl #2
    2b20:	07080400 	streq	r0, [r8, -r0, lsl #8]
    2b24:	0000016c 	andeq	r0, r0, ip, ror #2
    2b28:	a5070404 	strge	r0, [r7, #-1028]	; 0x404
    2b2c:	05000001 	streq	r0, [r0, #-1]
    2b30:	85040604 	strhi	r0, [r4, #-1540]	; 0x604
    2b34:	04000000 	streq	r0, [r0], #-0
    2b38:	007d0801 	rsbseq	r0, sp, r1, lsl #16
    2b3c:	04060000 	streq	r0, [r6], #-0
    2b40:	00000092 	muleq	r0, r2, r0
    2b44:	00008507 	andeq	r8, r0, r7, lsl #10
    2b48:	00850800 	addeq	r0, r5, r0, lsl #16
    2b4c:	00a70000 	adceq	r0, r7, r0
    2b50:	76090000 	strvc	r0, [r9], -r0
    2b54:	07000000 	streq	r0, [r0, -r0]
    2b58:	01060a00 	tsteq	r6, r0, lsl #20
    2b5c:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    2b60:	0000007d 	andeq	r0, r0, sp, ror r0
    2b64:	00009470 	andeq	r9, r0, r0, ror r4
    2b68:	00000074 	andeq	r0, r0, r4, ror r0
    2b6c:	01569c01 	cmpeq	r6, r1, lsl #24
    2b70:	790b0000 	stmdbvc	fp, {}	; <UNPREDICTABLE>
    2b74:	01000007 	tsteq	r0, r7
    2b78:	00003719 	andeq	r3, r0, r9, lsl r7
    2b7c:	00123c00 	andseq	r3, r2, r0, lsl #24
    2b80:	013b0c00 	teqeq	fp, r0, lsl #24
    2b84:	01560000 	cmpeq	r6, r0
    2b88:	03050000 	movweq	r0, #20480	; 0x5000
    2b8c:	0000aabc 			; <UNDEFINED> instruction: 0x0000aabc
    2b90:	0007a80d 	andeq	sl, r7, sp, lsl #16
    2b94:	7d1c0100 	ldfvcs	f0, [ip, #-0]
    2b98:	01000000 	mrseq	r0, (UNDEF: 0)
    2b9c:	07710e55 			; <UNDEFINED> instruction: 0x07710e55
    2ba0:	1d010000 	stcne	0, cr0, [r1, #-0]
    2ba4:	00000037 	andeq	r0, r0, r7, lsr r0
    2ba8:	00001276 	andeq	r1, r0, r6, ror r2
    2bac:	0094880f 	addseq	r8, r4, pc, lsl #16
    2bb0:	0003b200 	andeq	fp, r3, r0, lsl #4
    2bb4:	949c1000 	ldrls	r1, [ip], #0
    2bb8:	03b90000 			; <UNDEFINED> instruction: 0x03b90000
    2bbc:	01310000 	teqeq	r1, r0
    2bc0:	01110000 	tsteq	r1, r0
    2bc4:	114a0153 	cmpne	sl, r3, asr r1
    2bc8:	03055201 	movweq	r5, #20993	; 0x5201
    2bcc:	0000aabc 			; <UNDEFINED> instruction: 0x0000aabc
    2bd0:	05510111 	ldrbeq	r0, [r1, #-273]	; 0x111
    2bd4:	00ab3c03 	adceq	r3, fp, r3, lsl #24
    2bd8:	50011100 	andpl	r1, r1, r0, lsl #2
    2bdc:	aafc0305 	bge	fff037f8 <__bss_end__+0xffef8688>
    2be0:	0f000000 	svceq	0x00000000
    2be4:	000094a0 	andeq	r9, r0, r0, lsr #9
    2be8:	000003cf 	andeq	r0, r0, pc, asr #7
    2bec:	0094c012 	addseq	ip, r4, r2, lsl r0
    2bf0:	0003d600 	andeq	sp, r3, r0, lsl #12
    2bf4:	52011100 	andpl	r1, r1, #0, 2
    2bf8:	11007602 	tstne	r0, r2, lsl #12
    2bfc:	30015101 	andcc	r5, r1, r1, lsl #2
    2c00:	02500111 	subseq	r0, r0, #1073741828	; 0x40000004
    2c04:	00000075 	andeq	r0, r0, r5, ror r0
    2c08:	00009707 	andeq	r9, r0, r7, lsl #14
    2c0c:	02730a00 	rsbseq	r0, r3, #0, 20
    2c10:	27010000 	strcs	r0, [r1, -r0]
    2c14:	0000007d 	andeq	r0, r0, sp, ror r0
    2c18:	000094e4 	andeq	r9, r0, r4, ror #9
    2c1c:	0000009c 	muleq	r0, ip, r0
    2c20:	02459c01 	subeq	r9, r5, #256	; 0x100
    2c24:	790b0000 	stmdbvc	fp, {}	; <UNPREDICTABLE>
    2c28:	01000007 	tsteq	r0, r7
    2c2c:	00003727 	andeq	r3, r0, r7, lsr #14
    2c30:	00129c00 	andseq	r9, r2, r0, lsl #24
    2c34:	07670b00 	strbeq	r0, [r7, -r0, lsl #22]!
    2c38:	27010000 	strcs	r0, [r1, -r0]
    2c3c:	00000037 	andeq	r0, r0, r7, lsr r0
    2c40:	00001308 	andeq	r1, r0, r8, lsl #6
    2c44:	00013b0c 	andeq	r3, r1, ip, lsl #22
    2c48:	00025500 	andeq	r5, r2, r0, lsl #10
    2c4c:	c4030500 	strgt	r0, [r3], #-1280	; 0x500
    2c50:	0e0000aa 	cdpeq	0, 0, cr0, cr0, cr10, {5}
    2c54:	00000730 	andeq	r0, r0, r0, lsr r7
    2c58:	00372d01 	eorseq	r2, r7, r1, lsl #26
    2c5c:	13820000 	orrne	r0, r2, #0
    2c60:	fc0f0000 	stc2	0, cr0, [pc], {-0}
    2c64:	b2000094 	andlt	r0, r0, #148	; 0x94
    2c68:	10000003 	andne	r0, r0, r3
    2c6c:	00009510 	andeq	r9, r0, r0, lsl r5
    2c70:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
    2c74:	000001e8 	andeq	r0, r0, r8, ror #3
    2c78:	02530111 	subseq	r0, r3, #1073741828	; 0x40000004
    2c7c:	01112808 	tsteq	r1, r8, lsl #16
    2c80:	c4030552 	strgt	r0, [r3], #-1362	; 0x552
    2c84:	110000aa 	smlatbne	r0, sl, r0, r0
    2c88:	03055101 	movweq	r5, #20737	; 0x5101
    2c8c:	0000ab3c 	andeq	sl, r0, ip, lsr fp
    2c90:	05500111 	ldrbeq	r0, [r0, #-273]	; 0x111
    2c94:	00aafc03 	adceq	pc, sl, r3, lsl #24
    2c98:	140f0000 	strne	r0, [pc], #-0	; 2ca0 <_start-0x5360>
    2c9c:	cf000095 	svcgt	0x00000095
    2ca0:	0f000003 	svceq	0x00000003
    2ca4:	00009520 	andeq	r9, r0, r0, lsr #10
    2ca8:	000000a7 	andeq	r0, r0, r7, lsr #1
    2cac:	0095300f 	addseq	r3, r5, pc
    2cb0:	0003b200 	andeq	fp, r3, r0, lsl #4
    2cb4:	95441000 	strbls	r1, [r4, #-0]
    2cb8:	03b90000 			; <UNDEFINED> instruction: 0x03b90000
    2cbc:	02320000 	eorseq	r0, r2, #0
    2cc0:	01110000 	tsteq	r1, r0
    2cc4:	2c080253 	sfmcs	f0, 4, [r8], {83}	; 0x53
    2cc8:	05520111 	ldrbeq	r0, [r2, #-273]	; 0x111
    2ccc:	00aac403 	adceq	ip, sl, r3, lsl #8
    2cd0:	51011100 	mrspl	r1, (UNDEF: 17)
    2cd4:	ab3c0305 	blge	f038f0 <__bss_end__+0xef8780>
    2cd8:	01110000 	tsteq	r1, r0
    2cdc:	50030550 	andpl	r0, r3, r0, asr r5
    2ce0:	000000ab 	andeq	r0, r0, fp, lsr #1
    2ce4:	0095480f 	addseq	r4, r5, pc, lsl #16
    2ce8:	0003cf00 	andeq	ip, r3, r0, lsl #30
    2cec:	95680f00 	strbls	r0, [r8, #-3840]!	; 0xf00
    2cf0:	00a70000 	adceq	r0, r7, r0
    2cf4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2cf8:	00000085 	andeq	r0, r0, r5, lsl #1
    2cfc:	00000255 	andeq	r0, r0, r5, asr r2
    2d00:	00007609 	andeq	r7, r0, r9, lsl #12
    2d04:	07000f00 	streq	r0, [r0, -r0, lsl #30]
    2d08:	00000245 	andeq	r0, r0, r5, asr #4
    2d0c:	0001e913 	andeq	lr, r1, r3, lsl r9
    2d10:	803c0100 	eorshi	r0, ip, r0, lsl #2
    2d14:	5c000095 	stcpl	0, cr0, [r0], {149}	; 0x95
    2d18:	01000000 	mrseq	r0, (UNDEF: 0)
    2d1c:	0002c09c 	muleq	r2, ip, r0
    2d20:	013b0c00 	teqeq	fp, r0, lsl #24
    2d24:	02d00000 	sbcseq	r0, r0, #0
    2d28:	03050000 	movweq	r0, #20480	; 0x5000
    2d2c:	0000aad4 	ldrdeq	sl, [r0], -r4
    2d30:	0095980f 	addseq	r9, r5, pc, lsl #16
    2d34:	0003b200 	andeq	fp, r3, r0, lsl #4
    2d38:	95ac1000 	strls	r1, [ip, #0]!
    2d3c:	03b90000 			; <UNDEFINED> instruction: 0x03b90000
    2d40:	02b60000 	adcseq	r0, r6, #0
    2d44:	01110000 	tsteq	r1, r0
    2d48:	3d080253 	sfmcc	f0, 4, [r8, #-332]	; 0xfffffeb4
    2d4c:	05520111 	ldrbeq	r0, [r2, #-273]	; 0x111
    2d50:	00aad403 	adceq	sp, sl, r3, lsl #8
    2d54:	51011100 	mrspl	r1, (UNDEF: 17)
    2d58:	ab3c0305 	blge	f03974 <__bss_end__+0xef8804>
    2d5c:	01110000 	tsteq	r1, r0
    2d60:	a8030550 	stmdage	r3, {r4, r6, r8, sl}
    2d64:	000000ab 	andeq	r0, r0, fp, lsr #1
    2d68:	0095b00f 	addseq	fp, r5, pc
    2d6c:	0003cf00 	andeq	ip, r3, r0, lsl #30
    2d70:	85080000 	strhi	r0, [r8, #-0]
    2d74:	d0000000 	andle	r0, r0, r0
    2d78:	09000002 	stmdbeq	r0, {r1}
    2d7c:	00000076 	andeq	r0, r0, r6, ror r0
    2d80:	c007000c 	andgt	r0, r7, ip
    2d84:	14000002 	strne	r0, [r0], #-2
    2d88:	00000726 	andeq	r0, r0, r6, lsr #14
    2d8c:	95dc4601 	ldrbls	r4, [ip, #1537]	; 0x601
    2d90:	00180000 	andseq	r0, r8, r0
    2d94:	9c010000 	stcls	0, cr0, [r1], {-0}
    2d98:	00078015 	andeq	r8, r7, r5, lsl r0
    2d9c:	7d4f0100 	stfvce	f0, [pc, #-0]	; 2da4 <_start-0x525c>
    2da0:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    2da4:	10000095 	mulne	r0, r5, r0
    2da8:	01000000 	mrseq	r0, (UNDEF: 0)
    2dac:	0791139c 			; <UNDEFINED> instruction: 0x0791139c
    2db0:	53010000 	movwpl	r0, #4096	; 0x1000
    2db4:	00009604 	andeq	r9, r0, r4, lsl #12
    2db8:	00000054 	andeq	r0, r0, r4, asr r0
    2dbc:	03709c01 	cmneq	r0, #256	; 0x100
    2dc0:	520b0000 	andpl	r0, fp, #0
    2dc4:	01000007 	tsteq	r0, r7
    2dc8:	00003753 	andeq	r3, r0, r3, asr r7
    2dcc:	0013af00 	andseq	sl, r3, r0, lsl #30
    2dd0:	013b0c00 	teqeq	fp, r0, lsl #24
    2dd4:	03800000 	orreq	r0, r0, #0
    2dd8:	03050000 	movweq	r0, #20480	; 0x5000
    2ddc:	0000aae4 	andeq	sl, r0, r4, ror #21
    2de0:	00961c0f 	addseq	r1, r6, pc, lsl #24
    2de4:	0003b200 	andeq	fp, r3, r0, lsl #4
    2de8:	96301000 	ldrtls	r1, [r0], -r0
    2dec:	03b90000 			; <UNDEFINED> instruction: 0x03b90000
    2df0:	03660000 	cmneq	r6, #0
    2df4:	01110000 	tsteq	r1, r0
    2df8:	54080253 	strpl	r0, [r8], #-595	; 0x253
    2dfc:	05520111 	ldrbeq	r0, [r2, #-273]	; 0x111
    2e00:	00aae403 	adceq	lr, sl, r3, lsl #8
    2e04:	51011100 	mrspl	r1, (UNDEF: 17)
    2e08:	ab3c0305 	blge	f03a24 <__bss_end__+0xef88b4>
    2e0c:	01110000 	tsteq	r1, r0
    2e10:	a8030550 	stmdage	r3, {r4, r6, r8, sl}
    2e14:	000000ab 	andeq	r0, r0, fp, lsr #1
    2e18:	0096340f 	addseq	r3, r6, pc, lsl #8
    2e1c:	0003cf00 	andeq	ip, r3, r0, lsl #30
    2e20:	85080000 	strhi	r0, [r8, #-0]
    2e24:	80000000 	andhi	r0, r0, r0
    2e28:	09000003 	stmdbeq	r0, {r0, r1}
    2e2c:	00000076 	andeq	r0, r0, r6, ror r0
    2e30:	70070016 	andvc	r0, r7, r6, lsl r0
    2e34:	0d000003 	stceq	0, cr0, [r0, #-12]
    2e38:	00000760 	andeq	r0, r0, r0, ror #14
    2e3c:	00250801 	eoreq	r0, r5, r1, lsl #16
    2e40:	03050000 	movweq	r0, #20480	; 0x5000
    2e44:	0000b168 	andeq	fp, r0, r8, ror #2
    2e48:	0007880d 	andeq	r8, r7, sp, lsl #16
    2e4c:	7f0b0100 	svcvc	0x000b0100
    2e50:	05000000 	streq	r0, [r0, #-0]
    2e54:	00b16c03 	adcseq	r6, r1, r3, lsl #24
    2e58:	07b41600 	ldreq	r1, [r4, r0, lsl #12]!
    2e5c:	05010000 	streq	r0, [r1, #-0]
    2e60:	00000085 	andeq	r0, r0, r5, lsl #1
    2e64:	0001f617 	andeq	pc, r1, r7, lsl r6	; <UNPREDICTABLE>
    2e68:	181e0200 	ldmdane	lr, {r9}
    2e6c:	00000451 	andeq	r0, r0, r1, asr r4
    2e70:	00252902 	eoreq	r2, r5, r2, lsl #18
    2e74:	03cf0000 	biceq	r0, pc, #0
    2e78:	8c190000 	ldchi	0, cr0, [r9], {-0}
    2e7c:	1a000000 	bne	2e84 <_start-0x517c>
    2e80:	00821700 	addeq	r1, r2, r0, lsl #14
    2e84:	66020000 	strvs	r0, [r2], -r0
    2e88:	0003711b 	andeq	r7, r3, fp, lsl r1
    2e8c:	7d1b0400 	cfldrsvc	mvf0, [fp, #-0]
    2e90:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    2e94:	0000007d 	andeq	r0, r0, sp, ror r0
    2e98:	00002519 	andeq	r2, r0, r9, lsl r5
    2e9c:	002c1900 	eoreq	r1, ip, r0, lsl #18
    2ea0:	00000000 	andeq	r0, r0, r0
    2ea4:	000011ca 	andeq	r1, r0, sl, asr #3
    2ea8:	11340004 	teqne	r4, r4
    2eac:	01040000 	mrseq	r0, (UNDEF: 4)
    2eb0:	0000000b 	andeq	r0, r0, fp
    2eb4:	00086201 	andeq	r6, r8, r1, lsl #4
    2eb8:	0003ed00 	andeq	lr, r3, r0, lsl #26
    2ebc:	00965800 	addseq	r5, r6, r0, lsl #16
    2ec0:	00062000 	andeq	r2, r6, r0
    2ec4:	000ed000 	andeq	sp, lr, r0
    2ec8:	05040200 	streq	r0, [r4, #-512]	; 0x200
    2ecc:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2ed0:	76070403 	strvc	r0, [r7], -r3, lsl #8
    2ed4:	03000001 	movweq	r0, #1
    2ed8:	00760601 	rsbseq	r0, r6, r1, lsl #12
    2edc:	02030000 	andeq	r0, r3, #0
    2ee0:	0001c705 	andeq	ip, r1, r5, lsl #14
    2ee4:	05040300 	streq	r0, [r4, #-768]	; 0x300
    2ee8:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
    2eec:	ae050803 	cdpge	8, 0, cr0, cr5, cr3, {0}
    2ef0:	04000001 	streq	r0, [r0], #-1
    2ef4:	000005f7 	strdeq	r0, [r0], -r7
    2ef8:	005a2e03 	subseq	r2, sl, r3, lsl #28
    2efc:	01030000 	mrseq	r0, (UNDEF: 3)
    2f00:	00007408 	andeq	r7, r0, r8, lsl #8
    2f04:	07020300 	streq	r0, [r2, -r0, lsl #6]
    2f08:	000000f3 	strdeq	r0, [r0], -r3
    2f0c:	0001d104 	andeq	sp, r1, r4, lsl #2
    2f10:	73340300 	teqvc	r4, #0, 6
    2f14:	03000000 	movweq	r0, #0
    2f18:	01710704 	cmneq	r1, r4, lsl #14
    2f1c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2f20:	00016c07 	andeq	r6, r1, r7, lsl #24
    2f24:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2f28:	000001a5 	andeq	r0, r0, r5, lsr #3
    2f2c:	04060405 	streq	r0, [r6], #-1029	; 0x405
    2f30:	00000090 	muleq	r0, r0, r0
    2f34:	7d080103 	stfvcs	f0, [r8, #-12]
    2f38:	06000000 	streq	r0, [r0], -r0
    2f3c:	00009d04 	andeq	r9, r0, r4, lsl #26
    2f40:	00900700 	addseq	r0, r0, r0, lsl #14
    2f44:	0c080000 	stceq	0, cr0, [r8], {-0}
    2f48:	00d90e04 	sbcseq	r0, r9, r4, lsl #28
    2f4c:	74090000 	strvc	r0, [r9], #-0
    2f50:	0f040078 	svceq	0x00040078
    2f54:	0000004f 	andeq	r0, r0, pc, asr #32
    2f58:	78720900 	ldmdavc	r2!, {r8, fp}^
    2f5c:	4f0f0400 	svcmi	0x000f0400
    2f60:	01000000 	mrseq	r0, (UNDEF: 0)
    2f64:	0005c50a 	andeq	ip, r5, sl, lsl #10
    2f68:	68100400 	ldmdavs	r0, {sl}
    2f6c:	04000000 	streq	r0, [r0], #-0
    2f70:	0005760a 	andeq	r7, r5, sl, lsl #12
    2f74:	68110400 	ldmdavs	r1, {sl}
    2f78:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2f7c:	05ae0400 	streq	r0, [lr, #1024]!	; 0x400
    2f80:	12040000 	andne	r0, r4, #0
    2f84:	000000a2 	andeq	r0, r0, r2, lsr #1
    2f88:	00043104 	andeq	r3, r4, r4, lsl #2
    2f8c:	ef280500 	svc	0x00280500
    2f90:	0b000000 	bleq	2f98 <_start-0x5068>
    2f94:	00000458 	andeq	r0, r0, r8, asr r4
    2f98:	06000904 	streq	r0, [r0], -r4, lsl #18
    2f9c:	0c000001 	stceq	0, cr0, [r0], {1}
    2fa0:	00000467 	andeq	r0, r0, r7, ror #8
    2fa4:	00000088 	andeq	r0, r0, r8, lsl #1
    2fa8:	5a040000 	bpl	102fb0 <__bss_end__+0xf7e40>
    2fac:	05000004 	streq	r0, [r0, #-4]
    2fb0:	0000e462 	andeq	lr, r0, r2, ror #8
    2fb4:	081c0d00 	ldmdaeq	ip, {r8, sl, fp}
    2fb8:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    2fbc:	00013f03 	andeq	r3, r1, r3, lsl #30
    2fc0:	01190e00 	tsteq	r9, r0, lsl #28
    2fc4:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    2fc8:	0000002c 	andeq	r0, r0, ip, lsr #32
    2fcc:	02006e0f 	andeq	r6, r0, #15, 28	; 0xf0
    2fd0:	00002c09 	andeq	r2, r0, r9, lsl #24
    2fd4:	90111000 	andsls	r1, r1, r0
    2fd8:	02000008 	andeq	r0, r0, #8
    2fdc:	00002c0c 	andeq	r2, r0, ip, lsl #24
    2fe0:	0d000000 	stceq	0, cr0, [r0, #-0]
    2fe4:	000007cf 	andeq	r0, r0, pc, asr #15
    2fe8:	76031702 	strvc	r1, [r3], -r2, lsl #14
    2fec:	0f000001 	svceq	0x00000001
    2ff0:	006e6970 	rsbeq	r6, lr, r0, ror r9
    2ff4:	002c1702 	eoreq	r1, ip, r2, lsl #14
    2ff8:	760f0000 	strvc	r0, [pc], -r0
    2ffc:	2c170200 	lfmcs	f0, 4, [r7], {-0}
    3000:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    3004:	00000119 	andeq	r0, r0, r9, lsl r1
    3008:	002c1702 	eoreq	r1, ip, r2, lsl #14
    300c:	220e0000 	andcs	r0, lr, #0
    3010:	02000008 	andeq	r0, r0, #8
    3014:	00002c17 	andeq	r2, r0, r7, lsl ip
    3018:	ea120000 	b	483020 <__bss_end__+0x477eb0>
    301c:	01000005 	tsteq	r0, r5
    3020:	00965809 	addseq	r5, r6, r9, lsl #16
    3024:	00015400 	andeq	r5, r1, r0, lsl #8
    3028:	229c0100 	addscs	r0, ip, #0, 2
    302c:	13000007 	movwne	r0, #7
    3030:	0000058c 	andeq	r0, r0, ip, lsl #11
    3034:	07220901 	streq	r0, [r2, -r1, lsl #18]!
    3038:	13db0000 	bicsne	r0, fp, #0
    303c:	63140000 	tstvs	r4, #0
    3040:	5a090100 	bpl	243448 <__bss_end__+0x2382d8>
    3044:	fc000000 	stc2	0, cr0, [r0], {-0}
    3048:	15000013 	strne	r0, [r0, #-19]
    304c:	01007874 	tsteq	r0, r4, ror r8
    3050:	0000250b 	andeq	r2, r0, fp, lsl #10
    3054:	00760600 	rsbseq	r0, r6, r0, lsl #12
    3058:	9f1aff08 	svcls	0x001aff08
    305c:	01006e16 	tsteq	r0, r6, lsl lr
    3060:	0000680c 	andeq	r6, r0, ip, lsl #16
    3064:	00141d00 	andseq	r1, r4, r0, lsl #26
    3068:	00751600 	rsbseq	r1, r5, r0, lsl #12
    306c:	00680d01 	rsbeq	r0, r8, r1, lsl #26
    3070:	14300000 	ldrtne	r0, [r0], #-0
    3074:	73150000 	tstvc	r5, #0
    3078:	680e0100 	stmdavs	lr, {r8}
    307c:	01000000 	mrseq	r0, (UNDEF: 0)
    3080:	96681754 			; <UNDEFINED> instruction: 0x96681754
    3084:	00040000 	andeq	r0, r4, r0
    3088:	01f80000 	mvnseq	r0, r0
    308c:	90180000 	andsls	r0, r8, r0
    3090:	01000008 	tsteq	r0, r8
    3094:	00002c0e 	andeq	r2, r0, lr, lsl #24
    3098:	00540100 	subseq	r0, r4, r0, lsl #2
    309c:	00013f19 	andeq	r3, r1, r9, lsl pc
    30a0:	00966c00 	addseq	r6, r6, r0, lsl #24
    30a4:	00001c00 	andeq	r1, r0, r0, lsl #24
    30a8:	75110100 	ldrvc	r0, [r1, #-256]	; 0x100
    30ac:	1a000002 	bne	30bc <_start-0x4f44>
    30b0:	0000016a 	andeq	r0, r0, sl, ror #2
    30b4:	00001459 	andeq	r1, r0, r9, asr r4
    30b8:	00015f1b 	andeq	r5, r1, fp, lsl pc
    30bc:	1c540100 	ldfnee	f0, [r4], {-0}
    30c0:	00000156 	andeq	r0, r0, r6, asr r1
    30c4:	014b1b00 	cmpeq	fp, r0, lsl #22
    30c8:	56010000 	strpl	r0, [r1], -r0
    30cc:	00011119 	andeq	r1, r1, r9, lsl r1
    30d0:	00967800 	addseq	r7, r6, r0, lsl #16
    30d4:	00001000 	andeq	r1, r0, r0
    30d8:	5f1a0200 	svcpl	0x001a0200
    30dc:	1a000002 	bne	30ec <_start-0x4f14>
    30e0:	00000128 	andeq	r0, r0, r8, lsr #2
    30e4:	0000146c 	andeq	r1, r0, ip, ror #8
    30e8:	00011d1b 	andeq	r1, r1, fp, lsl sp
    30ec:	1d540100 	ldfnee	f0, [r4, #-0]
    30f0:	00009678 	andeq	r9, r0, r8, ror r6
    30f4:	00000004 	andeq	r0, r0, r4
    30f8:	0001321e 	andeq	r3, r1, lr, lsl r2
    30fc:	00147f00 	andseq	r7, r4, r0, lsl #30
    3100:	1f000000 	svcne	0x00000000
    3104:	00009678 	andeq	r9, r0, r8, ror r6
    3108:	00001131 	andeq	r1, r0, r1, lsr r1
    310c:	01510120 	cmpeq	r1, r0, lsr #2
    3110:	50012030 	andpl	r2, r1, r0, lsr r0
    3114:	00007602 	andeq	r7, r0, r2, lsl #12
    3118:	013f1900 	teqeq	pc, r0, lsl #18
    311c:	968c0000 	strls	r0, [ip], r0
    3120:	001c0000 	andseq	r0, ip, r0
    3124:	13010000 	movwne	r0, #4096	; 0x1000
    3128:	000002f8 	strdeq	r0, [r0], -r8
    312c:	00016a1a 	andeq	r6, r1, sl, lsl sl
    3130:	00149200 	andseq	r9, r4, r0, lsl #4
    3134:	015f1b00 	cmpeq	pc, r0, lsl #22
    3138:	54010000 	strpl	r0, [r1], #-0
    313c:	0001561a 	andeq	r5, r1, sl, lsl r6
    3140:	0014b400 	andseq	fp, r4, r0, lsl #8
    3144:	014b1b00 	cmpeq	fp, r0, lsl #22
    3148:	56010000 	strpl	r0, [r1], -r0
    314c:	00011119 	andeq	r1, r1, r9, lsl r1
    3150:	00969800 	addseq	r9, r6, r0, lsl #16
    3154:	00001000 	andeq	r1, r0, r0
    3158:	df1a0200 	svcle	0x001a0200
    315c:	1a000002 	bne	316c <_start-0x4e94>
    3160:	00000128 	andeq	r0, r0, r8, lsr #2
    3164:	000014e5 	andeq	r1, r0, r5, ror #9
    3168:	00011d1b 	andeq	r1, r1, fp, lsl sp
    316c:	1d540100 	ldfnee	f0, [r4, #-0]
    3170:	00009698 	muleq	r0, r8, r6
    3174:	00000004 	andeq	r0, r0, r4
    3178:	0001321e 	andeq	r3, r1, lr, lsl r2
    317c:	00150700 	andseq	r0, r5, r0, lsl #14
    3180:	1f000000 	svcne	0x00000000
    3184:	00009698 	muleq	r0, r8, r6
    3188:	00001131 	andeq	r1, r0, r1, lsr r1
    318c:	04510120 	ldrbeq	r0, [r1], #-288	; 0x120
    3190:	1a310077 	bne	c43374 <__bss_end__+0xc38204>
    3194:	02500120 	subseq	r0, r0, #32, 2
    3198:	00000076 	andeq	r0, r0, r6, ror r0
    319c:	00013f19 	andeq	r3, r1, r9, lsl pc
    31a0:	0096ac00 	addseq	sl, r6, r0, lsl #24
    31a4:	00001c00 	andeq	r1, r0, r0, lsl #24
    31a8:	80150100 	andshi	r0, r5, r0, lsl #2
    31ac:	1a000003 	bne	31c0 <_start-0x4e40>
    31b0:	0000016a 	andeq	r0, r0, sl, ror #2
    31b4:	0000151a 	andeq	r1, r0, sl, lsl r5
    31b8:	00015f1b 	andeq	r5, r1, fp, lsl pc
    31bc:	1b540100 	blne	15035c4 <__bss_end__+0x14f8454>
    31c0:	00000156 	andeq	r0, r0, r6, asr r1
    31c4:	32007708 	andcc	r7, r0, #8, 14	; 0x200000
    31c8:	1aff081a 	bne	fffc5238 <__bss_end__+0xfffba0c8>
    31cc:	014b1b9f 			; <UNDEFINED> instruction: 0x014b1b9f
    31d0:	56010000 	strpl	r0, [r1], -r0
    31d4:	00011119 	andeq	r1, r1, r9, lsl r1
    31d8:	0096b800 	addseq	fp, r6, r0, lsl #16
    31dc:	00001000 	andeq	r1, r0, r0
    31e0:	671a0200 	ldrvs	r0, [sl, -r0, lsl #4]
    31e4:	1a000003 	bne	31f8 <_start-0x4e08>
    31e8:	00000128 	andeq	r0, r0, r8, lsr #2
    31ec:	0000153f 	andeq	r1, r0, pc, lsr r5
    31f0:	00011d1b 	andeq	r1, r1, fp, lsl sp
    31f4:	1d540100 	ldfnee	f0, [r4, #-0]
    31f8:	000096b8 			; <UNDEFINED> instruction: 0x000096b8
    31fc:	00000004 	andeq	r0, r0, r4
    3200:	0001321e 	andeq	r3, r1, lr, lsl r2
    3204:	00156400 	andseq	r6, r5, r0, lsl #8
    3208:	1f000000 	svcne	0x00000000
    320c:	000096b8 			; <UNDEFINED> instruction: 0x000096b8
    3210:	00001131 	andeq	r1, r0, r1, lsr r1
    3214:	04510120 	ldrbeq	r0, [r1], #-288	; 0x120
    3218:	1a320077 	bne	c833fc <__bss_end__+0xc7828c>
    321c:	02500120 	subseq	r0, r0, #32, 2
    3220:	00000076 	andeq	r0, r0, r6, ror r0
    3224:	00013f19 	andeq	r3, r1, r9, lsl pc
    3228:	0096cc00 	addseq	ip, r6, r0, lsl #24
    322c:	00001c00 	andeq	r1, r0, r0, lsl #24
    3230:	08170100 	ldmdaeq	r7, {r8}
    3234:	1a000004 	bne	324c <_start-0x4db4>
    3238:	0000016a 	andeq	r0, r0, sl, ror #2
    323c:	00001577 	andeq	r1, r0, r7, ror r5
    3240:	00015f1b 	andeq	r5, r1, fp, lsl pc
    3244:	1b540100 	blne	150364c <__bss_end__+0x14f84dc>
    3248:	00000156 	andeq	r0, r0, r6, asr r1
    324c:	34007708 	strcc	r7, [r0], #-1800	; 0x708
    3250:	1aff081a 	bne	fffc52c0 <__bss_end__+0xfffba150>
    3254:	014b1b9f 			; <UNDEFINED> instruction: 0x014b1b9f
    3258:	56010000 	strpl	r0, [r1], -r0
    325c:	00011119 	andeq	r1, r1, r9, lsl r1
    3260:	0096d800 	addseq	sp, r6, r0, lsl #16
    3264:	00001000 	andeq	r1, r0, r0
    3268:	ef1a0200 	svc	0x001a0200
    326c:	1a000003 	bne	3280 <_start-0x4d80>
    3270:	00000128 	andeq	r0, r0, r8, lsr #2
    3274:	00001599 	muleq	r0, r9, r5
    3278:	00011d1b 	andeq	r1, r1, fp, lsl sp
    327c:	1d540100 	ldfnee	f0, [r4, #-0]
    3280:	000096d8 	ldrdeq	r9, [r0], -r8
    3284:	00000004 	andeq	r0, r0, r4
    3288:	0001321e 	andeq	r3, r1, lr, lsl r2
    328c:	0015bb00 	andseq	fp, r5, r0, lsl #22
    3290:	1f000000 	svcne	0x00000000
    3294:	000096d8 	ldrdeq	r9, [r0], -r8
    3298:	00001131 	andeq	r1, r0, r1, lsr r1
    329c:	04510120 	ldrbeq	r0, [r1], #-288	; 0x120
    32a0:	1a340077 	bne	d03484 <__bss_end__+0xcf8314>
    32a4:	02500120 	subseq	r0, r0, #32, 2
    32a8:	00000076 	andeq	r0, r0, r6, ror r0
    32ac:	00013f19 	andeq	r3, r1, r9, lsl pc
    32b0:	0096ec00 	addseq	lr, r6, r0, lsl #24
    32b4:	00001c00 	andeq	r1, r0, r0, lsl #24
    32b8:	90190100 	andsls	r0, r9, r0, lsl #2
    32bc:	1a000004 	bne	32d4 <_start-0x4d2c>
    32c0:	0000016a 	andeq	r0, r0, sl, ror #2
    32c4:	000015ce 	andeq	r1, r0, lr, asr #11
    32c8:	00015f1b 	andeq	r5, r1, fp, lsl pc
    32cc:	1b540100 	blne	15036d4 <__bss_end__+0x14f8564>
    32d0:	00000156 	andeq	r0, r0, r6, asr r1
    32d4:	38007708 	stmdacc	r0, {r3, r8, r9, sl, ip, sp, lr}
    32d8:	1aff081a 	bne	fffc5348 <__bss_end__+0xfffba1d8>
    32dc:	014b1b9f 			; <UNDEFINED> instruction: 0x014b1b9f
    32e0:	56010000 	strpl	r0, [r1], -r0
    32e4:	00011119 	andeq	r1, r1, r9, lsl r1
    32e8:	0096f800 	addseq	pc, r6, r0, lsl #16
    32ec:	00001000 	andeq	r1, r0, r0
    32f0:	771a0200 	ldrvc	r0, [sl, -r0, lsl #4]
    32f4:	1a000004 	bne	330c <_start-0x4cf4>
    32f8:	00000128 	andeq	r0, r0, r8, lsr #2
    32fc:	000015f3 	strdeq	r1, [r0], -r3
    3300:	00011d1b 	andeq	r1, r1, fp, lsl sp
    3304:	1d540100 	ldfnee	f0, [r4, #-0]
    3308:	000096f8 	strdeq	r9, [r0], -r8
    330c:	00000004 	andeq	r0, r0, r4
    3310:	0001321e 	andeq	r3, r1, lr, lsl r2
    3314:	00161800 	andseq	r1, r6, r0, lsl #16
    3318:	1f000000 	svcne	0x00000000
    331c:	000096f8 	strdeq	r9, [r0], -r8
    3320:	00001131 	andeq	r1, r0, r1, lsr r1
    3324:	04510120 	ldrbeq	r0, [r1], #-288	; 0x120
    3328:	1a380077 	bne	e0350c <__bss_end__+0xdf839c>
    332c:	02500120 	subseq	r0, r0, #32, 2
    3330:	00000076 	andeq	r0, r0, r6, ror r0
    3334:	00013f19 	andeq	r3, r1, r9, lsl pc
    3338:	00970c00 	addseq	r0, r7, r0, lsl #24
    333c:	00001c00 	andeq	r1, r0, r0, lsl #24
    3340:	181b0100 	ldmdane	fp, {r8}
    3344:	1a000005 	bne	3360 <_start-0x4ca0>
    3348:	0000016a 	andeq	r0, r0, sl, ror #2
    334c:	0000162b 	andeq	r1, r0, fp, lsr #12
    3350:	00015f1b 	andeq	r5, r1, fp, lsl pc
    3354:	1b540100 	blne	150375c <__bss_end__+0x14f85ec>
    3358:	00000156 	andeq	r0, r0, r6, asr r1
    335c:	40007708 	andmi	r7, r0, r8, lsl #14
    3360:	1aff081a 	bne	fffc53d0 <__bss_end__+0xfffba260>
    3364:	014b1b9f 			; <UNDEFINED> instruction: 0x014b1b9f
    3368:	56010000 	strpl	r0, [r1], -r0
    336c:	00011119 	andeq	r1, r1, r9, lsl r1
    3370:	00971800 	addseq	r1, r7, r0, lsl #16
    3374:	00001000 	andeq	r1, r0, r0
    3378:	ff1a0200 			; <UNDEFINED> instruction: 0xff1a0200
    337c:	1a000004 	bne	3394 <_start-0x4c6c>
    3380:	00000128 	andeq	r0, r0, r8, lsr #2
    3384:	00001652 	andeq	r1, r0, r2, asr r6
    3388:	00011d1b 	andeq	r1, r1, fp, lsl sp
    338c:	1d540100 	ldfnee	f0, [r4, #-0]
    3390:	00009718 	andeq	r9, r0, r8, lsl r7
    3394:	00000004 	andeq	r0, r0, r4
    3398:	0001321e 	andeq	r3, r1, lr, lsl r2
    339c:	00167900 	andseq	r7, r6, r0, lsl #18
    33a0:	1f000000 	svcne	0x00000000
    33a4:	00009718 	andeq	r9, r0, r8, lsl r7
    33a8:	00001131 	andeq	r1, r0, r1, lsr r1
    33ac:	04510120 	ldrbeq	r0, [r1], #-288	; 0x120
    33b0:	1a400077 	bne	1003594 <__bss_end__+0xff8424>
    33b4:	02500120 	subseq	r0, r0, #32, 2
    33b8:	00000076 	andeq	r0, r0, r6, ror r0
    33bc:	00013f19 	andeq	r3, r1, r9, lsl pc
    33c0:	00972c00 	addseq	r2, r7, r0, lsl #24
    33c4:	00001c00 	andeq	r1, r0, r0, lsl #24
    33c8:	a21d0100 	andsge	r0, sp, #0, 2
    33cc:	1a000005 	bne	33e8 <_start-0x4c18>
    33d0:	0000016a 	andeq	r0, r0, sl, ror #2
    33d4:	0000168c 	andeq	r1, r0, ip, lsl #13
    33d8:	00015f1b 	andeq	r5, r1, fp, lsl pc
    33dc:	1b540100 	blne	15037e4 <__bss_end__+0x14f8674>
    33e0:	00000156 	andeq	r0, r0, r6, asr r1
    33e4:	08007709 	stmdaeq	r0, {r0, r3, r8, r9, sl, ip, sp, lr}
    33e8:	ff081a20 			; <UNDEFINED> instruction: 0xff081a20
    33ec:	4b1b9f1a 	blmi	6eb05c <__bss_end__+0x6dfeec>
    33f0:	01000001 	tsteq	r0, r1
    33f4:	01111956 	tsteq	r1, r6, asr r9
    33f8:	97380000 	ldrls	r0, [r8, -r0]!
    33fc:	00100000 	andseq	r0, r0, r0
    3400:	1a020000 	bne	83408 <__bss_end__+0x78298>
    3404:	00000588 	andeq	r0, r0, r8, lsl #11
    3408:	0001281a 	andeq	r2, r1, sl, lsl r8
    340c:	0016b600 	andseq	fp, r6, r0, lsl #12
    3410:	011d1b00 	tsteq	sp, r0, lsl #22
    3414:	54010000 	strpl	r0, [r1], #-0
    3418:	0097381d 	addseq	r3, r7, sp, lsl r8
    341c:	00000400 	andeq	r0, r0, r0, lsl #8
    3420:	01321e00 	teqeq	r2, r0, lsl #28
    3424:	16e00000 	strbtne	r0, [r0], r0
    3428:	00000000 	andeq	r0, r0, r0
    342c:	0097381f 	addseq	r3, r7, pc, lsl r8
    3430:	00113100 	andseq	r3, r1, r0, lsl #2
    3434:	51012000 	mrspl	r2, (UNDEF: 1)
    3438:	08007705 	stmdaeq	r0, {r0, r2, r8, r9, sl, ip, sp, lr}
    343c:	01201a20 	teqeq	r0, r0, lsr #20
    3440:	00760250 	rsbseq	r0, r6, r0, asr r2
    3444:	3f190000 	svccc	0x00190000
    3448:	4c000001 	stcmi	0, cr0, [r0], {1}
    344c:	1c000097 	stcne	0, cr0, [r0], {151}	; 0x97
    3450:	01000000 	mrseq	r0, (UNDEF: 0)
    3454:	00062c1f 	andeq	r2, r6, pc, lsl ip
    3458:	016a1a00 	cmneq	sl, r0, lsl #20
    345c:	16f30000 	ldrbtne	r0, [r3], r0
    3460:	5f1b0000 	svcpl	0x001b0000
    3464:	01000001 	tsteq	r0, r1
    3468:	01561b54 	cmpeq	r6, r4, asr fp
    346c:	77090000 	strvc	r0, [r9, -r0]
    3470:	1a400800 	bne	1005478 <__bss_end__+0xffa308>
    3474:	9f1aff08 	svcls	0x001aff08
    3478:	00014b1b 	andeq	r4, r1, fp, lsl fp
    347c:	19560100 	ldmdbne	r6, {r8}^
    3480:	00000111 	andeq	r0, r0, r1, lsl r1
    3484:	00009758 	andeq	r9, r0, r8, asr r7
    3488:	00000010 	andeq	r0, r0, r0, lsl r0
    348c:	06121a02 	ldreq	r1, [r2], -r2, lsl #20
    3490:	281a0000 	ldmdacs	sl, {}	; <UNPREDICTABLE>
    3494:	15000001 	strne	r0, [r0, #-1]
    3498:	1b000017 	blne	34fc <_start-0x4b04>
    349c:	0000011d 	andeq	r0, r0, sp, lsl r1
    34a0:	581d5401 	ldmdapl	sp, {r0, sl, ip, lr}
    34a4:	04000097 	streq	r0, [r0], #-151	; 0x97
    34a8:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    34ac:	00000132 	andeq	r0, r0, r2, lsr r1
    34b0:	00001737 	andeq	r1, r0, r7, lsr r7
    34b4:	581f0000 	ldmdapl	pc, {}	; <UNPREDICTABLE>
    34b8:	31000097 	swpcc	r0, r7, [r0]	; <UNPREDICTABLE>
    34bc:	20000011 	andcs	r0, r0, r1, lsl r0
    34c0:	77055101 	strvc	r5, [r5, -r1, lsl #2]
    34c4:	1a400800 	bne	10054cc <__bss_end__+0xffa35c>
    34c8:	02500120 	subseq	r0, r0, #32, 2
    34cc:	00000076 	andeq	r0, r0, r6, ror r0
    34d0:	00013f19 	andeq	r3, r1, r9, lsl pc
    34d4:	00976c00 	addseq	r6, r7, r0, lsl #24
    34d8:	00001c00 	andeq	r1, r0, r0, lsl #24
    34dc:	ac210100 	stfges	f0, [r1], #-0
    34e0:	1b000006 	blne	3500 <_start-0x4b00>
    34e4:	0000016a 	andeq	r0, r0, sl, ror #2
    34e8:	5f1b5801 	svcpl	0x001b5801
    34ec:	01000001 	tsteq	r0, r1
    34f0:	01561a54 	cmpeq	r6, r4, asr sl
    34f4:	174a0000 	strbne	r0, [sl, -r0]
    34f8:	4b1b0000 	blmi	6c3500 <__bss_end__+0x6b8390>
    34fc:	01000001 	tsteq	r0, r1
    3500:	01111956 	tsteq	r1, r6, asr r9
    3504:	97780000 	ldrbls	r0, [r8, -r0]!
    3508:	00100000 	andseq	r0, r0, r0
    350c:	1a020000 	bne	83514 <__bss_end__+0x783a4>
    3510:	00000692 	muleq	r0, r2, r6
    3514:	0001281b 	andeq	r2, r1, fp, lsl r8
    3518:	1b580100 	blne	1603920 <__bss_end__+0x15f87b0>
    351c:	0000011d 	andeq	r0, r0, sp, lsl r1
    3520:	781d5401 	ldmdavc	sp, {r0, sl, ip, lr}
    3524:	04000097 	streq	r0, [r0], #-151	; 0x97
    3528:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    352c:	00000132 	andeq	r0, r0, r2, lsr r1
    3530:	0000177d 	andeq	r1, r0, sp, ror r7
    3534:	781f0000 	ldmdavc	pc, {}	; <UNPREDICTABLE>
    3538:	31000097 	swpcc	r0, r7, [r0]	; <UNPREDICTABLE>
    353c:	20000011 	andcs	r0, r0, r1, lsl r0
    3540:	77055101 	strvc	r5, [r5, -r1, lsl #2]
    3544:	1a800800 	bne	fe00554c <__bss_end__+0xfdffa3dc>
    3548:	02500120 	subseq	r0, r0, #32, 2
    354c:	00000076 	andeq	r0, r0, r6, ror r0
    3550:	00013f21 	andeq	r3, r1, r1, lsr #30
    3554:	00978c00 	addseq	r8, r7, r0, lsl #24
    3558:	00001c00 	andeq	r1, r0, r0, lsl #24
    355c:	1b230100 	blne	8c3964 <__bss_end__+0x8b87f4>
    3560:	0000016a 	andeq	r0, r0, sl, ror #2
    3564:	5f1b5501 	svcpl	0x001b5501
    3568:	01000001 	tsteq	r0, r1
    356c:	01561c54 	cmpeq	r6, r4, asr ip
    3570:	1b010000 	blne	43578 <__bss_end__+0x38408>
    3574:	0000014b 	andeq	r0, r0, fp, asr #2
    3578:	11195601 	tstne	r9, r1, lsl #12
    357c:	98000001 	stmdals	r0, {r0}
    3580:	10000097 	mulne	r0, r7, r0
    3584:	02000000 	andeq	r0, r0, #0
    3588:	00070b1a 	andeq	r0, r7, sl, lsl fp
    358c:	01281b00 	teqeq	r8, r0, lsl #22
    3590:	55010000 	strpl	r0, [r1, #-0]
    3594:	00011d1b 	andeq	r1, r1, fp, lsl sp
    3598:	1d540100 	ldfnee	f0, [r4, #-0]
    359c:	00009798 	muleq	r0, r8, r7
    35a0:	00000004 	andeq	r0, r0, r4
    35a4:	0001321e 	andeq	r3, r1, lr, lsl r2
    35a8:	00179000 	andseq	r9, r7, r0
    35ac:	1f000000 	svcne	0x00000000
    35b0:	00009798 	muleq	r0, r8, r7
    35b4:	00001131 	andeq	r1, r0, r1, lsr r1
    35b8:	01510120 	cmpeq	r1, r0, lsr #2
    35bc:	50012031 	andpl	r2, r1, r1, lsr r0
    35c0:	00007602 	andeq	r7, r0, r2, lsl #12
    35c4:	04060000 	streq	r0, [r6], #-0
    35c8:	000000d9 	ldrdeq	r0, [r0], -r9
    35cc:	0008e322 	andeq	lr, r8, r2, lsr #6
    35d0:	25270100 	strcs	r0, [r7, #-256]!	; 0x100
    35d4:	03000000 	movweq	r0, #0
    35d8:	00000762 	andeq	r0, r0, r2, ror #14
    35dc:	0078720f 	rsbseq	r7, r8, pc, lsl #4
    35e0:	00252701 	eoreq	r2, r5, r1, lsl #14
    35e4:	760f0000 	strvc	r0, [pc], -r0
    35e8:	25270100 	strcs	r0, [r7, #-256]!	; 0x100
    35ec:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    35f0:	0000083e 	andeq	r0, r0, lr, lsr r8
    35f4:	002c2701 	eoreq	r2, ip, r1, lsl #14
    35f8:	19110000 	ldmdbne	r1, {}	; <UNPREDICTABLE>
    35fc:	01000001 	tsteq	r0, r1
    3600:	00002c28 	andeq	r2, r0, r8, lsr #24
    3604:	df230000 	svcle	0x00230000
    3608:	01000007 	tsteq	r0, r7
    360c:	00002534 	andeq	r2, r0, r4, lsr r5
    3610:	0097ac00 	addseq	sl, r7, r0, lsl #24
    3614:	0001c800 	andeq	ip, r1, r0, lsl #16
    3618:	1e9c0100 	fmlnee	f0, f4, f0
    361c:	1300000b 	movwne	r0, #11
    3620:	0000058c 	andeq	r0, r0, ip, lsl #11
    3624:	07223401 	streq	r3, [r2, -r1, lsl #8]!
    3628:	17a30000 	strne	r0, [r3, r0]!
    362c:	3e130000 	cdpcc	0, 1, cr0, cr3, cr0, {0}
    3630:	01000008 	tsteq	r0, r8
    3634:	00002534 	andeq	r2, r0, r4, lsr r5
    3638:	0017e800 	andseq	lr, r7, r0, lsl #16
    363c:	78721500 	ldmdavc	r2!, {r8, sl, ip}^
    3640:	25350100 	ldrcs	r0, [r5, #-256]!	; 0x100
    3644:	01000000 	mrseq	r0, (UNDEF: 0)
    3648:	00731655 	rsbseq	r1, r3, r5, asr r6
    364c:	002c3c01 	eoreq	r3, ip, r1, lsl #24
    3650:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
    3654:	75160000 	ldrvc	r0, [r6, #-0]
    3658:	683f0100 	ldmdavs	pc!, {r8}	; <UNPREDICTABLE>
    365c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    3660:	16000018 			; <UNDEFINED> instruction: 0x16000018
    3664:	4001006e 	andmi	r0, r1, lr, rrx
    3668:	0000002c 	andeq	r0, r0, ip, lsr #32
    366c:	0000182c 	andeq	r1, r0, ip, lsr #16
    3670:	01006316 	tsteq	r0, r6, lsl r3
    3674:	00002c41 	andeq	r2, r0, r1, asr #24
    3678:	00184300 	andseq	r4, r8, r0, lsl #6
    367c:	07281900 	streq	r1, [r8, -r0, lsl #18]!
    3680:	97c00000 	strbls	r0, [r0, r0]
    3684:	00340000 	eorseq	r0, r4, r0
    3688:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    368c:	0000083c 	andeq	r0, r0, ip, lsr r8
    3690:	00074b1a 	andeq	r4, r7, sl, lsl fp
    3694:	00186d00 	andseq	r6, r8, r0, lsl #26
    3698:	07421c00 	strbeq	r1, [r2, -r0, lsl #24]
    369c:	1b000000 	blne	36a4 <_start-0x495c>
    36a0:	00000738 	andeq	r0, r0, r8, lsr r7
    36a4:	c01d5501 	andsgt	r5, sp, r1, lsl #10
    36a8:	34000097 	strcc	r0, [r0], #-151	; 0x97
    36ac:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    36b0:	00000756 	andeq	r0, r0, r6, asr r7
    36b4:	0000188b 	andeq	r1, r0, fp, lsl #17
    36b8:	0097c424 	addseq	ip, r7, r4, lsr #8
    36bc:	00114700 	andseq	r4, r1, r0, lsl #14
    36c0:	97d02500 	ldrbls	r2, [r0, r0, lsl #10]
    36c4:	11520000 	cmpne	r2, r0
    36c8:	08310000 	ldmdaeq	r1!, {}	; <UNPREDICTABLE>
    36cc:	01200000 	teqeq	r0, r0
    36d0:	00750250 	rsbseq	r0, r5, r0, asr r2
    36d4:	97dc2400 	ldrbls	r2, [ip, r0, lsl #8]
    36d8:	11470000 	mrsne	r0, (UNDEF: 71)
    36dc:	00000000 	andeq	r0, r0, r0
    36e0:	0097fc17 	addseq	pc, r7, r7, lsl ip	; <UNPREDICTABLE>
    36e4:	00000400 	andeq	r0, r0, r0, lsl #8
    36e8:	00085900 	andeq	r5, r8, r0, lsl #18
    36ec:	08902600 	ldmeq	r0, {r9, sl, sp}
    36f0:	3c010000 	stccc	0, cr0, [r1], {-0}
    36f4:	0000002c 	andeq	r0, r0, ip, lsr #32
    36f8:	000018a9 	andeq	r1, r0, r9, lsr #17
    36fc:	01111900 	tsteq	r1, r0, lsl #18
    3700:	98080000 	stmdals	r8, {}	; <UNPREDICTABLE>
    3704:	00100000 	andseq	r0, r0, r0
    3708:	44010000 	strmi	r0, [r1], #-0
    370c:	00000892 	muleq	r0, r2, r8
    3710:	0001281a 	andeq	r2, r1, sl, lsl r8
    3714:	0018bc00 	andseq	fp, r8, r0, lsl #24
    3718:	011d1a00 	tsteq	sp, r0, lsl #20
    371c:	18e10000 	stmiane	r1!, {}^	; <UNPREDICTABLE>
    3720:	081d0000 	ldmdaeq	sp, {}	; <UNPREDICTABLE>
    3724:	04000098 	streq	r0, [r0], #-152	; 0x98
    3728:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    372c:	00000132 	andeq	r0, r0, r2, lsr r1
    3730:	000018f4 	strdeq	r1, [r0], -r4
    3734:	11190000 	tstne	r9, r0
    3738:	28000001 	stmdacs	r0, {r0}
    373c:	10000098 	mulne	r0, r8, r0
    3740:	01000000 	mrseq	r0, (UNDEF: 0)
    3744:	0008cb48 	andeq	ip, r8, r8, asr #22
    3748:	01281a00 	teqeq	r8, r0, lsl #20
    374c:	19070000 	stmdbne	r7, {}	; <UNPREDICTABLE>
    3750:	1d1a0000 	ldcne	0, cr0, [sl, #-0]
    3754:	1a000001 	bne	3760 <_start-0x48a0>
    3758:	1d000019 	stcne	0, cr0, [r0, #-100]	; 0xffffff9c
    375c:	00009828 	andeq	r9, r0, r8, lsr #16
    3760:	00000004 	andeq	r0, r0, r4
    3764:	0001321e 	andeq	r3, r1, lr, lsl r2
    3768:	00192d00 	andseq	r2, r9, r0, lsl #26
    376c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    3770:	00000111 	andeq	r0, r0, r1, lsl r1
    3774:	0000984c 	andeq	r9, r0, ip, asr #16
    3778:	00000010 	andeq	r0, r0, r0, lsl r0
    377c:	09044b01 	stmdbeq	r4, {r0, r8, r9, fp, lr}
    3780:	281a0000 	ldmdacs	sl, {}	; <UNPREDICTABLE>
    3784:	40000001 	andmi	r0, r0, r1
    3788:	1a000019 	bne	37f4 <_start-0x480c>
    378c:	0000011d 	andeq	r0, r0, sp, lsl r1
    3790:	00001953 	andeq	r1, r0, r3, asr r9
    3794:	00984c1d 	addseq	r4, r8, sp, lsl ip
    3798:	00000400 	andeq	r0, r0, r0, lsl #8
    379c:	01321e00 	teqeq	r2, r0, lsl #28
    37a0:	19660000 	stmdbne	r6!, {}^	; <UNPREDICTABLE>
    37a4:	00000000 	andeq	r0, r0, r0
    37a8:	00011119 	andeq	r1, r1, r9, lsl r1
    37ac:	00987000 	addseq	r7, r8, r0
    37b0:	00001000 	andeq	r1, r0, r0
    37b4:	3d4e0100 	stfcce	f0, [lr, #-0]
    37b8:	1a000009 	bne	37e4 <_start-0x481c>
    37bc:	00000128 	andeq	r0, r0, r8, lsr #2
    37c0:	00001979 	andeq	r1, r0, r9, ror r9
    37c4:	00011d1a 	andeq	r1, r1, sl, lsl sp
    37c8:	00198c00 	andseq	r8, r9, r0, lsl #24
    37cc:	98701d00 	ldmdals	r0!, {r8, sl, fp, ip}^
    37d0:	00040000 	andeq	r0, r4, r0
    37d4:	321e0000 	andscc	r0, lr, #0
    37d8:	9f000001 	svcls	0x00000001
    37dc:	00000019 	andeq	r0, r0, r9, lsl r0
    37e0:	01111900 	tsteq	r1, r0, lsl #18
    37e4:	98940000 	ldmls	r4, {}	; <UNPREDICTABLE>
    37e8:	00100000 	andseq	r0, r0, r0
    37ec:	51010000 	mrspl	r0, (UNDEF: 1)
    37f0:	00000976 	andeq	r0, r0, r6, ror r9
    37f4:	0001281a 	andeq	r2, r1, sl, lsl r8
    37f8:	0019b200 	andseq	fp, r9, r0, lsl #4
    37fc:	011d1a00 	tsteq	sp, r0, lsl #20
    3800:	19c50000 	stmibne	r5, {}^	; <UNPREDICTABLE>
    3804:	941d0000 	ldrls	r0, [sp], #-0
    3808:	04000098 	streq	r0, [r0], #-152	; 0x98
    380c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    3810:	00000132 	andeq	r0, r0, r2, lsr r1
    3814:	000019d8 	ldrdeq	r1, [r0], -r8
    3818:	11190000 	tstne	r9, r0
    381c:	b8000001 	stmdalt	r0, {r0}
    3820:	10000098 	mulne	r0, r8, r0
    3824:	01000000 	mrseq	r0, (UNDEF: 0)
    3828:	0009af54 	andeq	sl, r9, r4, asr pc
    382c:	01281a00 	teqeq	r8, r0, lsl #20
    3830:	19eb0000 	stmibne	fp!, {}^	; <UNPREDICTABLE>
    3834:	1d1a0000 	ldcne	0, cr0, [sl, #-0]
    3838:	fe000001 	cdp2	0, 0, cr0, cr0, cr1, {0}
    383c:	1d000019 	stcne	0, cr0, [r0, #-100]	; 0xffffff9c
    3840:	000098b8 			; <UNDEFINED> instruction: 0x000098b8
    3844:	00000004 	andeq	r0, r0, r4
    3848:	0001321e 	andeq	r3, r1, lr, lsl r2
    384c:	001a1100 	andseq	r1, sl, r0, lsl #2
    3850:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    3854:	00000111 	andeq	r0, r0, r1, lsl r1
    3858:	000098dc 	ldrdeq	r9, [r0], -ip
    385c:	00000010 	andeq	r0, r0, r0, lsl r0
    3860:	09e85701 	stmibeq	r8!, {r0, r8, r9, sl, ip, lr}^
    3864:	281a0000 	ldmdacs	sl, {}	; <UNPREDICTABLE>
    3868:	24000001 	strcs	r0, [r0], #-1
    386c:	1a00001a 	bne	38dc <_start-0x4724>
    3870:	0000011d 	andeq	r0, r0, sp, lsl r1
    3874:	00001a37 	andeq	r1, r0, r7, lsr sl
    3878:	0098dc1d 	addseq	sp, r8, sp, lsl ip
    387c:	00000400 	andeq	r0, r0, r0, lsl #8
    3880:	01321e00 	teqeq	r2, r0, lsl #28
    3884:	1a4a0000 	bne	128388c <__bss_end__+0x127871c>
    3888:	00000000 	andeq	r0, r0, r0
    388c:	00011119 	andeq	r1, r1, r9, lsl r1
    3890:	00990000 	addseq	r0, r9, r0
    3894:	00001000 	andeq	r1, r0, r0
    3898:	1d5a0100 	ldfnee	f0, [sl, #-0]
    389c:	1a00000a 	bne	38cc <_start-0x4734>
    38a0:	00000128 	andeq	r0, r0, r8, lsr #2
    38a4:	00001a5d 	andeq	r1, r0, sp, asr sl
    38a8:	00011d27 	andeq	r1, r1, r7, lsr #26
    38ac:	99001d00 	stmdbls	r0, {r8, sl, fp, ip}
    38b0:	00040000 	andeq	r0, r4, r0
    38b4:	321e0000 	andscc	r0, lr, #0
    38b8:	70000001 	andvc	r0, r0, r1
    38bc:	0000001a 	andeq	r0, r0, sl, lsl r0
    38c0:	07281900 	streq	r1, [r8, -r0, lsl #18]!
    38c4:	99200000 	stmdbls	r0!, {}	; <UNPREDICTABLE>
    38c8:	00340000 	eorseq	r0, r4, r0
    38cc:	61010000 	mrsvs	r0, (UNDEF: 1)
    38d0:	00000a81 	andeq	r0, r0, r1, lsl #21
    38d4:	00074b27 	andeq	r4, r7, r7, lsr #22
    38d8:	07421a00 	strbeq	r1, [r2, -r0, lsl #20]
    38dc:	1a830000 	bne	fe0c38e4 <__bss_end__+0xfe0b8774>
    38e0:	381a0000 	ldmdacc	sl, {}	; <UNPREDICTABLE>
    38e4:	a3000007 	movwge	r0, #7
    38e8:	1d00001a 	stcne	0, cr0, [r0, #-104]	; 0xffffff98
    38ec:	00009920 	andeq	r9, r0, r0, lsr #18
    38f0:	00000034 	andeq	r0, r0, r4, lsr r0
    38f4:	0007561e 	andeq	r5, r7, lr, lsl r6
    38f8:	001ac100 	andseq	ip, sl, r0, lsl #2
    38fc:	99242400 	stmdbls	r4!, {sl, sp}
    3900:	11470000 	mrsne	r0, (UNDEF: 71)
    3904:	30250000 	eorcc	r0, r5, r0
    3908:	52000099 	andpl	r0, r0, #153	; 0x99
    390c:	76000011 			; <UNDEFINED> instruction: 0x76000011
    3910:	2000000a 	andcs	r0, r0, sl
    3914:	75025001 	strvc	r5, [r2, #-1]
    3918:	3c240000 	stccc	0, cr0, [r4], #-0
    391c:	47000099 			; <UNDEFINED> instruction: 0x47000099
    3920:	00000011 	andeq	r0, r0, r1, lsl r0
    3924:	98242500 	stmdals	r4!, {r8, sl, sp}
    3928:	11520000 	cmpne	r2, r0
    392c:	0a950000 	beq	fe543934 <__bss_end__+0xfe5387c4>
    3930:	01200000 	teqeq	r0, r0
    3934:	00750250 	rsbseq	r0, r5, r0, asr r2
    3938:	98442500 	stmdals	r4, {r8, sl, sp}^
    393c:	11520000 	cmpne	r2, r0
    3940:	0aa90000 	beq	fea43948 <__bss_end__+0xfea387d8>
    3944:	01200000 	teqeq	r0, r0
    3948:	00750250 	rsbseq	r0, r5, r0, asr r2
    394c:	98682500 	stmdals	r8!, {r8, sl, sp}^
    3950:	11520000 	cmpne	r2, r0
    3954:	0abd0000 	beq	fef4395c <__bss_end__+0xfef387ec>
    3958:	01200000 	teqeq	r0, r0
    395c:	00750250 	rsbseq	r0, r5, r0, asr r2
    3960:	988c2500 	stmls	ip, {r8, sl, sp}
    3964:	11520000 	cmpne	r2, r0
    3968:	0ad10000 	beq	ff443970 <__bss_end__+0xff438800>
    396c:	01200000 	teqeq	r0, r0
    3970:	00750250 	rsbseq	r0, r5, r0, asr r2
    3974:	98b02500 	ldmls	r0!, {r8, sl, sp}
    3978:	11520000 	cmpne	r2, r0
    397c:	0ae50000 	beq	ff943984 <__bss_end__+0xff938814>
    3980:	01200000 	teqeq	r0, r0
    3984:	00750250 	rsbseq	r0, r5, r0, asr r2
    3988:	98d42500 	ldmls	r4, {r8, sl, sp}^
    398c:	11520000 	cmpne	r2, r0
    3990:	0af90000 	beq	ffe43998 <__bss_end__+0xffe38828>
    3994:	01200000 	teqeq	r0, r0
    3998:	00750250 	rsbseq	r0, r5, r0, asr r2
    399c:	98f82500 	ldmls	r8!, {r8, sl, sp}^
    39a0:	11520000 	cmpne	r2, r0
    39a4:	0b0d0000 	bleq	3439ac <__bss_end__+0x33883c>
    39a8:	01200000 	teqeq	r0, r0
    39ac:	00750250 	rsbseq	r0, r5, r0, asr r2
    39b0:	99181f00 	ldmdbls	r8, {r8, r9, sl, fp, ip}
    39b4:	11520000 	cmpne	r2, r0
    39b8:	01200000 	teqeq	r0, r0
    39bc:	00750250 	rsbseq	r0, r5, r0, asr r2
    39c0:	f4230000 	vld4.8	{d0-d3}, [r3], r0
    39c4:	01000007 	tsteq	r0, r7
    39c8:	0000256c 	andeq	r2, r0, ip, ror #10
    39cc:	00997400 	addseq	r7, r9, r0, lsl #8
    39d0:	00009000 	andeq	r9, r0, r0
    39d4:	029c0100 	addseq	r0, ip, #0, 2
    39d8:	1400000c 	strne	r0, [r0], #-12
    39dc:	6c010075 	stcvs	0, cr0, [r1], {117}	; 0x75
    39e0:	00000722 	andeq	r0, r0, r2, lsr #14
    39e4:	00001adf 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    39e8:	66756214 			; <UNDEFINED> instruction: 0x66756214
    39ec:	026c0100 	rsbeq	r0, ip, #0, 2
    39f0:	1300000c 	movwne	r0, #12
    39f4:	1300001b 	movwne	r0, #27
    39f8:	00000779 	andeq	r0, r0, r9, ror r7
    39fc:	00686c01 	rsbeq	r6, r8, r1, lsl #24
    3a00:	1b470000 	blne	11c3a08 <__bss_end__+0x11b8898>
    3a04:	65140000 	ldrvs	r0, [r4, #-0]
    3a08:	0100646e 	tsteq	r0, lr, ror #8
    3a0c:	00004f6c 	andeq	r4, r0, ip, ror #30
    3a10:	001b8000 	andseq	r8, fp, r0
    3a14:	08a02800 	stmiaeq	r0!, {fp, sp}
    3a18:	6c010000 	stcvs	0, cr0, [r1], {-0}
    3a1c:	00000068 	andeq	r0, r0, r8, rrx
    3a20:	29009102 	stmdbcs	r0, {r1, r8, ip, pc}
    3a24:	0000013b 	andeq	r0, r0, fp, lsr r1
    3a28:	00000c18 	andeq	r0, r0, r8, lsl ip
    3a2c:	abe80305 	blge	ffa04648 <__bss_end__+0xff9f94d8>
    3a30:	69160000 	ldmdbvs	r6, {}	; <UNPREDICTABLE>
    3a34:	25700100 	ldrbcs	r0, [r0, #-256]!	; 0x100
    3a38:	ba000000 	blt	3a40 <_start-0x45c0>
    3a3c:	2600001b 			; <UNDEFINED> instruction: 0x2600001b
    3a40:	00000873 	andeq	r0, r0, r3, ror r8
    3a44:	004f7101 	subeq	r7, pc, r1, lsl #2
    3a48:	1bd90000 	blne	ff643a50 <__bss_end__+0xff6388e0>
    3a4c:	94240000 	strtls	r0, [r4], #-0
    3a50:	67000099 			; <UNDEFINED> instruction: 0x67000099
    3a54:	25000011 	strcs	r0, [r0, #-17]
    3a58:	000099a8 	andeq	r9, r0, r8, lsr #19
    3a5c:	0000116e 	andeq	r1, r0, lr, ror #2
    3a60:	00000be2 	andeq	r0, r0, r2, ror #23
    3a64:	02530120 	subseq	r0, r3, #32, 2
    3a68:	01206d08 	teqeq	r0, r8, lsl #26
    3a6c:	e8030552 	stmda	r3, {r1, r4, r6, r8, sl}
    3a70:	200000ab 	andcs	r0, r0, fp, lsr #1
    3a74:	03055101 	movweq	r5, #20737	; 0x5101
    3a78:	0000ac7c 	andeq	sl, r0, ip, ror ip
    3a7c:	05500120 	ldrbeq	r0, [r0, #-288]	; 0x120
    3a80:	00ac6003 	adceq	r6, ip, r3
    3a84:	ac240000 	stcge	0, cr0, [r4], #-0
    3a88:	84000099 	strhi	r0, [r0], #-153	; 0x99
    3a8c:	1f000011 	svcne	0x00000011
    3a90:	000099c8 	andeq	r9, r0, r8, asr #19
    3a94:	00000762 	andeq	r0, r0, r2, ror #14
    3a98:	02510120 	subseq	r0, r1, #32, 2
    3a9c:	0120007a 	teqeq	r0, sl, ror r0
    3aa0:	00780250 	rsbseq	r0, r8, r0, asr r2
    3aa4:	04060000 	streq	r0, [r6], #-0
    3aa8:	0000004f 	andeq	r0, r0, pc, asr #32
    3aac:	0000902a 	andeq	r9, r0, sl, lsr #32
    3ab0:	000c1800 	andeq	r1, ip, r0, lsl #16
    3ab4:	00812b00 	addeq	r2, r1, r0, lsl #22
    3ab8:	00120000 	andseq	r0, r2, r0
    3abc:	000c0807 	andeq	r0, ip, r7, lsl #16
    3ac0:	087b2300 	ldmdaeq	fp!, {r8, r9, sp}^
    3ac4:	80010000 	andhi	r0, r1, r0
    3ac8:	00000025 	andeq	r0, r0, r5, lsr #32
    3acc:	00009a04 	andeq	r9, r0, r4, lsl #20
    3ad0:	0000007c 	andeq	r0, r0, ip, ror r0
    3ad4:	0ce49c01 	stcleq	12, cr9, [r4], #4
    3ad8:	75140000 	ldrvc	r0, [r4, #-0]
    3adc:	22800100 	addcs	r0, r0, #0, 2
    3ae0:	ec000007 	stc	0, cr0, [r0], {7}
    3ae4:	1400001b 	strne	r0, [r0], #-27
    3ae8:	00667562 	rsbeq	r7, r6, r2, ror #10
    3aec:	0c028001 	stceq	0, cr8, [r2], {1}
    3af0:	1c200000 	stcne	0, cr0, [r0], #-0
    3af4:	79130000 	ldmdbvc	r3, {}	; <UNPREDICTABLE>
    3af8:	01000007 	tsteq	r0, r7
    3afc:	00006881 	andeq	r6, r0, r1, lsl #17
    3b00:	001c5400 	andseq	r5, ip, r0, lsl #8
    3b04:	08a01300 	stmiaeq	r0!, {r8, r9, ip}
    3b08:	81010000 	mrshi	r0, (UNDEF: 1)
    3b0c:	00000068 	andeq	r0, r0, r8, rrx
    3b10:	00001c8d 	andeq	r1, r0, sp, lsl #25
    3b14:	00013b29 	andeq	r3, r1, r9, lsr #22
    3b18:	000cf400 	andeq	pc, ip, r0, lsl #8
    3b1c:	fc030500 	stc2	5, cr0, [r3], {-0}
    3b20:	160000ab 	strne	r0, [r0], -fp, lsr #1
    3b24:	86010069 	strhi	r0, [r1], -r9, rrx
    3b28:	00000025 	andeq	r0, r0, r5, lsr #32
    3b2c:	00001cc1 	andeq	r1, r0, r1, asr #25
    3b30:	009a2024 	addseq	r2, sl, r4, lsr #32
    3b34:	00116700 	andseq	r6, r1, r0, lsl #14
    3b38:	9a342500 	bls	d0cf40 <__bss_end__+0xd01dd0>
    3b3c:	116e0000 	cmnne	lr, r0
    3b40:	0cc40000 	stcleq	0, cr0, [r4], {0}
    3b44:	01200000 	teqeq	r0, r0
    3b48:	83080253 	movwhi	r0, #33363	; 0x8253
    3b4c:	05520120 	ldrbeq	r0, [r2, #-288]	; 0x120
    3b50:	00abfc03 	adceq	pc, fp, r3, lsl #24
    3b54:	51012000 	mrspl	r2, (UNDEF: 1)
    3b58:	ac7c0305 	ldclge	3, cr0, [ip], #-20	; 0xffffffec
    3b5c:	01200000 	teqeq	r0, r0
    3b60:	60030550 	andvs	r0, r3, r0, asr r5
    3b64:	000000ac 	andeq	r0, r0, ip, lsr #1
    3b68:	009a3824 	addseq	r3, sl, r4, lsr #16
    3b6c:	00118400 	andseq	r8, r1, r0, lsl #8
    3b70:	9a541f00 	bls	150b778 <__bss_end__+0x1500608>
    3b74:	07620000 	strbeq	r0, [r2, -r0]!
    3b78:	01200000 	teqeq	r0, r0
    3b7c:	00780251 	rsbseq	r0, r8, r1, asr r2
    3b80:	02500120 	subseq	r0, r0, #32, 2
    3b84:	00000077 	andeq	r0, r0, r7, ror r0
    3b88:	0000902a 	andeq	r9, r0, sl, lsr #32
    3b8c:	000cf400 	andeq	pc, ip, r0, lsl #8
    3b90:	00812b00 	addeq	r2, r1, r0, lsl #22
    3b94:	00140000 	andseq	r0, r4, r0
    3b98:	000ce407 	andeq	lr, ip, r7, lsl #8
    3b9c:	082a2300 	stmdaeq	sl!, {r8, r9, sp}
    3ba0:	93010000 	movwls	r0, #4096	; 0x1000
    3ba4:	000000d9 	ldrdeq	r0, [r0], -r9
    3ba8:	00009a80 	andeq	r9, r0, r0, lsl #21
    3bac:	000000c0 	andeq	r0, r0, r0, asr #1
    3bb0:	0e149c01 	cdpeq	12, 1, cr9, cr4, cr1, {0}
    3bb4:	74140000 	ldrvc	r0, [r4], #-0
    3bb8:	93010078 	movwls	r0, #4216	; 0x1078
    3bbc:	0000004f 	andeq	r0, r0, pc, asr #32
    3bc0:	00001ce0 	andeq	r1, r0, r0, ror #25
    3bc4:	00787214 	rsbseq	r7, r8, r4, lsl r2
    3bc8:	004f9301 	subeq	r9, pc, r1, lsl #6
    3bcc:	1d010000 	stcne	0, cr0, [r1, #-0]
    3bd0:	c5130000 	ldrgt	r0, [r3, #-0]
    3bd4:	01000005 	tsteq	r0, r5
    3bd8:	00006893 	muleq	r0, r3, r8
    3bdc:	001d2200 	andseq	r2, sp, r0, lsl #4
    3be0:	07c32800 	strbeq	r2, [r3, r0, lsl #16]
    3be4:	93010000 	movwls	r0, #4096	; 0x1000
    3be8:	00000068 	andeq	r0, r0, r8, rrx
    3bec:	2c009102 	stfcsd	f1, [r0], {2}
    3bf0:	007a686d 	rsbseq	r6, sl, sp, ror #16
    3bf4:	002c9b01 	eoreq	r9, ip, r1, lsl #22
    3bf8:	27000000 	strcs	r0, [r0, -r0]
    3bfc:	142629b9 	strtne	r2, [r6], #-2489	; 0x9b9
    3c00:	01000008 	tsteq	r0, r8
    3c04:	00002c9c 	muleq	r0, ip, ip
    3c08:	001d4000 	andseq	r4, sp, r0
    3c0c:	013b2900 	teqeq	fp, r0, lsl #18
    3c10:	0e240000 	cdpeq	0, 2, cr0, cr4, cr0, {0}
    3c14:	03050000 	movweq	r0, #20480	; 0x5000
    3c18:	0000ac14 	andeq	sl, r0, r4, lsl ip
    3c1c:	009aa817 	addseq	sl, sl, r7, lsl r8
    3c20:	00000800 	andeq	r0, r0, r0, lsl #16
    3c24:	000d9100 	andeq	r9, sp, r0, lsl #2
    3c28:	6e692d00 	cdpvs	13, 6, cr2, cr9, cr0, {0}
    3c2c:	2c970100 	ldfcss	f0, [r7], {0}
    3c30:	01000000 	mrseq	r0, (UNDEF: 0)
    3c34:	9aa02500 	bls	fe80d03c <__bss_end__+0xfe801ecc>
    3c38:	118b0000 	orrne	r0, fp, r0
    3c3c:	0da50000 	stceq	0, cr0, [r5]
    3c40:	01200000 	teqeq	r0, r0
    3c44:	00760250 	rsbseq	r0, r6, r0, asr r2
    3c48:	9aa82500 	bls	fea0d050 <__bss_end__+0xfea01ee0>
    3c4c:	119c0000 	orrsne	r0, ip, r0
    3c50:	0db90000 	ldceq	0, cr0, [r9]
    3c54:	01200000 	teqeq	r0, r0
    3c58:	00780250 	rsbseq	r0, r8, r0, asr r2
    3c5c:	9abc2500 	bls	fef0d064 <__bss_end__+0xfef01ef4>
    3c60:	11310000 	teqne	r1, r0
    3c64:	0dd20000 	ldcleq	0, cr0, [r2]
    3c68:	01200000 	teqeq	r0, r0
    3c6c:	20310151 	eorscs	r0, r1, r1, asr r1
    3c70:	76025001 	strvc	r5, [r2], -r1
    3c74:	00240000 	eoreq	r0, r4, r0
    3c78:	6700009b 			; <UNDEFINED> instruction: 0x6700009b
    3c7c:	25000011 	strcs	r0, [r0, #-17]
    3c80:	00009b14 	andeq	r9, r0, r4, lsl fp
    3c84:	0000116e 	andeq	r1, r0, lr, ror #2
    3c88:	00000e0a 	andeq	r0, r0, sl, lsl #28
    3c8c:	02530120 	subseq	r0, r3, #32, 2
    3c90:	01209d08 	teqeq	r0, r8, lsl #26
    3c94:	14030552 	strne	r0, [r3], #-1362	; 0x552
    3c98:	200000ac 	andcs	r0, r0, ip, lsr #1
    3c9c:	03055101 	movweq	r5, #20737	; 0x5101
    3ca0:	0000ac7c 	andeq	sl, r0, ip, ror ip
    3ca4:	05500120 	ldrbeq	r0, [r0, #-288]	; 0x120
    3ca8:	00ac9003 	adceq	r9, ip, r3
    3cac:	18240000 	stmdane	r4!, {}	; <UNPREDICTABLE>
    3cb0:	8400009b 	strhi	r0, [r0], #-155	; 0x9b
    3cb4:	00000011 	andeq	r0, r0, r1, lsl r0
    3cb8:	0000902a 	andeq	r9, r0, sl, lsr #32
    3cbc:	000e2400 	andeq	r2, lr, r0, lsl #8
    3cc0:	00812b00 	addeq	r2, r1, r0, lsl #22
    3cc4:	00130000 	andseq	r0, r3, r0
    3cc8:	000e1407 	andeq	r1, lr, r7, lsl #8
    3ccc:	08072300 	stmdaeq	r7, {r8, r9, sp}
    3cd0:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    3cd4:	00000025 	andeq	r0, r0, r5, lsr #32
    3cd8:	00009b40 	andeq	r9, r0, r0, asr #22
    3cdc:	0000003c 	andeq	r0, r0, ip, lsr r0
    3ce0:	0ecc9c01 	cdpeq	12, 12, cr9, cr12, cr1, {0}
    3ce4:	8c130000 	ldchi	0, cr0, [r3], {-0}
    3ce8:	01000005 	tsteq	r0, r5
    3cec:	000722a9 	andeq	r2, r7, r9, lsr #5
    3cf0:	001d6e00 	andseq	r6, sp, r0, lsl #28
    3cf4:	65721600 	ldrbvs	r1, [r2, #-1536]!	; 0x600
    3cf8:	aa010073 	bge	43ecc <__bss_end__+0x38d5c>
    3cfc:	00000025 	andeq	r0, r0, r5, lsr #32
    3d00:	00001d8f 	andeq	r1, r0, pc, lsl #27
    3d04:	00013b29 	andeq	r3, r1, r9, lsr #22
    3d08:	000edc00 	andeq	sp, lr, r0, lsl #24
    3d0c:	28030500 	stmdacs	r3, {r8, sl}
    3d10:	250000ac 	strcs	r0, [r0, #-172]	; 0xac
    3d14:	00009b4c 	andeq	r9, r0, ip, asr #22
    3d18:	00000762 	andeq	r0, r0, r2, ror #14
    3d1c:	00000e8a 	andeq	r0, r0, sl, lsl #29
    3d20:	02510120 	subseq	r0, r1, #32, 2
    3d24:	0120ff09 	msreq	LR_irq, r9
    3d28:	01f30350 	mvnseq	r0, r0, asr r3
    3d2c:	58240050 	stmdapl	r4!, {r4, r6}
    3d30:	6700009b 			; <UNDEFINED> instruction: 0x6700009b
    3d34:	25000011 	strcs	r0, [r0, #-17]
    3d38:	00009b6c 	andeq	r9, r0, ip, ror #22
    3d3c:	0000116e 	andeq	r1, r0, lr, ror #2
    3d40:	00000ec2 	andeq	r0, r0, r2, asr #29
    3d44:	02530120 	subseq	r0, r3, #32, 2
    3d48:	0120ac08 	teqeq	r0, r8, lsl #24
    3d4c:	28030552 	stmdacs	r3, {r1, r4, r6, r8, sl}
    3d50:	200000ac 	andcs	r0, r0, ip, lsr #1
    3d54:	03055101 	movweq	r5, #20737	; 0x5101
    3d58:	0000ac7c 	andeq	sl, r0, ip, ror ip
    3d5c:	05500120 	ldrbeq	r0, [r0, #-288]	; 0x120
    3d60:	00acd403 	adceq	sp, ip, r3, lsl #8
    3d64:	70240000 	eorvc	r0, r4, r0
    3d68:	8400009b 	strhi	r0, [r0], #-155	; 0x9b
    3d6c:	00000011 	andeq	r0, r0, r1, lsl r0
    3d70:	0000902a 	andeq	r9, r0, sl, lsr #32
    3d74:	000edc00 	andeq	sp, lr, r0, lsl #24
    3d78:	00812b00 	addeq	r2, r1, r0, lsl #22
    3d7c:	000c0000 	andeq	r0, ip, r0
    3d80:	000ecc07 	andeq	ip, lr, r7, lsl #24
    3d84:	084b1200 	stmdaeq	fp, {r9, ip}^
    3d88:	b0010000 	andlt	r0, r1, r0
    3d8c:	00009b7c 	andeq	r9, r0, ip, ror fp
    3d90:	0000002c 	andeq	r0, r0, ip, lsr #32
    3d94:	0f259c01 	svceq	0x00259c01
    3d98:	8c130000 	ldchi	0, cr0, [r3], {-0}
    3d9c:	01000005 	tsteq	r0, r5
    3da0:	000722b0 			; <UNDEFINED> instruction: 0x000722b0
    3da4:	001da200 	andseq	sl, sp, r0, lsl #4
    3da8:	736d1400 	cmnvc	sp, #0, 8
    3dac:	b0010067 	andlt	r0, r1, r7, rrx
    3db0:	00000097 	muleq	r0, r7, r0
    3db4:	00001dc0 	andeq	r1, r0, r0, asr #27
    3db8:	009b941f 	addseq	r9, fp, pc, lsl r4
    3dbc:	00017600 	andeq	r7, r1, r0, lsl #12
    3dc0:	50012000 	andpl	r2, r1, r0
    3dc4:	00007502 	andeq	r7, r0, r2, lsl #10
    3dc8:	05912300 	ldreq	r2, [r1, #768]	; 0x300
    3dcc:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    3dd0:	00000025 	andeq	r0, r0, r5, lsr #32
    3dd4:	00009ba8 	andeq	r9, r0, r8, lsr #23
    3dd8:	00000084 	andeq	r0, r0, r4, lsl #1
    3ddc:	10199c01 	andsne	r9, r9, r1, lsl #24
    3de0:	8c130000 	ldchi	0, cr0, [r3], {-0}
    3de4:	01000005 	tsteq	r0, r5
    3de8:	000722b9 			; <UNDEFINED> instruction: 0x000722b9
    3dec:	001dde00 	andseq	sp, sp, r0, lsl #28
    3df0:	6d662e00 	stclvs	14, cr2, [r6, #-0]
    3df4:	b9010074 	stmdblt	r1, {r2, r4, r5, r6}
    3df8:	00000097 	muleq	r0, r7, r0
    3dfc:	2f749102 	svccs	0x00749102
    3e00:	66756215 			; <UNDEFINED> instruction: 0x66756215
    3e04:	19ba0100 	ldmibne	sl!, {r8}
    3e08:	03000010 	movweq	r0, #16
    3e0c:	187c9c91 	ldmdane	ip!, {r0, r4, r7, sl, fp, ip, pc}^
    3e10:	00000462 	andeq	r0, r0, r2, ror #8
    3e14:	0106bc01 	tsteq	r6, r1, lsl #24
    3e18:	91030000 	mrsls	r0, (UNDEF: 3)
    3e1c:	73167c98 	tstvc	r6, #152, 24	; 0x9800
    3e20:	be01007a 	mcrlt	0, 0, r0, cr1, cr10, {3}
    3e24:	00000025 	andeq	r0, r0, r5, lsr #32
    3e28:	00001e0a 	andeq	r1, r0, sl, lsl #28
    3e2c:	00013b29 	andeq	r3, r1, r9, lsr #22
    3e30:	00103a00 	andseq	r3, r0, r0, lsl #20
    3e34:	38030500 	stmdacc	r3, {r8, sl}
    3e38:	250000ac 	strcs	r0, [r0, #-172]	; 0xac
    3e3c:	00009bd0 	ldrdeq	r9, [r0], -r0
    3e40:	000011ad 	andeq	r1, r0, sp, lsr #3
    3e44:	00000fc0 	andeq	r0, r0, r0, asr #31
    3e48:	02530120 	subseq	r0, r3, #32, 2
    3e4c:	01205891 			; <UNDEFINED> instruction: 0x01205891
    3e50:	54910352 	ldrpl	r0, [r1], #850	; 0x352
    3e54:	51012006 	tstpl	r1, r6
    3e58:	01cc0a03 	biceq	r0, ip, r3, lsl #20
    3e5c:	03500120 	cmpeq	r0, #32, 2
    3e60:	007bfc91 			; <UNDEFINED> instruction: 0x007bfc91
    3e64:	009be424 	addseq	lr, fp, r4, lsr #8
    3e68:	00116700 	andseq	r6, r1, r0, lsl #14
    3e6c:	9bf82500 	blls	ffe0d274 <__bss_end__+0xffe02104>
    3e70:	116e0000 	cmnne	lr, r0
    3e74:	0ff80000 	svceq	0x00f80000
    3e78:	01200000 	teqeq	r0, r0
    3e7c:	c0080253 	andgt	r0, r8, r3, asr r2
    3e80:	05520120 	ldrbeq	r0, [r2, #-288]	; 0x120
    3e84:	00ac3803 	adceq	r3, ip, r3, lsl #16
    3e88:	51012000 	mrspl	r2, (UNDEF: 1)
    3e8c:	ac7c0305 	ldclge	3, cr0, [ip], #-20	; 0xffffffec
    3e90:	01200000 	teqeq	r0, r0
    3e94:	0c030550 	cfstr32eq	mvfx0, [r3], {80}	; 0x50
    3e98:	000000ad 	andeq	r0, r0, sp, lsr #1
    3e9c:	009bfc24 	addseq	pc, fp, r4, lsr #24
    3ea0:	00118400 	andseq	r8, r1, r0, lsl #8
    3ea4:	9c081f00 	stcls	15, cr1, [r8], {-0}
    3ea8:	0ee10000 	cdpeq	0, 14, cr0, cr1, cr0, {0}
    3eac:	01200000 	teqeq	r0, r0
    3eb0:	fc910351 	ldc2	3, cr0, [r1], {81}	; 0x51
    3eb4:	5001207b 	andpl	r2, r1, fp, ror r0
    3eb8:	00007502 	andeq	r7, r0, r2, lsl #10
    3ebc:	00902a00 	addseq	r2, r0, r0, lsl #20
    3ec0:	102a0000 	eorne	r0, sl, r0
    3ec4:	81300000 	teqhi	r0, r0
    3ec8:	cb000000 	blgt	3ed0 <_start-0x4130>
    3ecc:	902a0001 	eorls	r0, sl, r1
    3ed0:	3a000000 	bcc	3ed8 <_start-0x4128>
    3ed4:	2b000010 	blcs	3f1c <_start-0x40e4>
    3ed8:	00000081 	andeq	r0, r0, r1, lsl #1
    3edc:	2a07000e 	bcs	1c3f1c <__bss_end__+0x1b8dac>
    3ee0:	23000010 	movwcs	r0, #16
    3ee4:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
    3ee8:	0025c501 	eoreq	ip, r5, r1, lsl #10
    3eec:	9c2c0000 	stcls	0, cr0, [ip], #-0
    3ef0:	004c0000 	subeq	r0, ip, r0
    3ef4:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ef8:	0000111c 	andeq	r1, r0, ip, lsl r1
    3efc:	01007514 	tsteq	r0, r4, lsl r5
    3f00:	000722c5 	andeq	r2, r7, r5, asr #5
    3f04:	001e4900 	andseq	r4, lr, r0, lsl #18
    3f08:	75621400 	strbvc	r1, [r2, #-1024]!	; 0x400
    3f0c:	c5010066 	strgt	r0, [r1, #-102]	; 0x66
    3f10:	00000c02 	andeq	r0, r0, r2, lsl #24
    3f14:	00001e6a 	andeq	r1, r0, sl, ror #28
    3f18:	00077913 	andeq	r7, r7, r3, lsl r9
    3f1c:	68c50100 	stmiavs	r5, {r8}^
    3f20:	8b000000 	blhi	3f28 <_start-0x40d8>
    3f24:	1400001e 	strne	r0, [r0], #-30
    3f28:	00646e65 	rsbeq	r6, r4, r5, ror #28
    3f2c:	004fc501 	subeq	ip, pc, r1, lsl #10
    3f30:	1eac0000 	cdpne	0, 10, cr0, cr12, cr0, {0}
    3f34:	72160000 	andsvc	r0, r6, #0
    3f38:	01007365 	tsteq	r0, r5, ror #6
    3f3c:	000025c6 	andeq	r2, r0, r6, asr #11
    3f40:	001ecd00 	andseq	ip, lr, r0, lsl #26
    3f44:	013b2900 	teqeq	fp, r0, lsl #18
    3f48:	112c0000 	teqne	ip, r0
    3f4c:	03050000 	movweq	r0, #20480	; 0x5000
    3f50:	0000ac48 	andeq	sl, r0, r8, asr #24
    3f54:	009c4025 	addseq	r4, ip, r5, lsr #32
    3f58:	000b1e00 	andeq	r1, fp, r0, lsl #28
    3f5c:	0010da00 	andseq	sp, r0, r0, lsl #20
    3f60:	52012000 	andpl	r2, r1, #0
    3f64:	5201f303 	andpl	pc, r1, #201326592	; 0xc000000
    3f68:	03510120 	cmpeq	r1, #32, 2
    3f6c:	205101f3 	ldrshcs	r0, [r1], #-19	; 0xffffffed
    3f70:	f3035001 	vhadd.u8	d5, d3, d1
    3f74:	02205001 	eoreq	r5, r0, #1
    3f78:	0902007d 	stmdbeq	r2, {r0, r2, r3, r4, r5, r6}
    3f7c:	4c2400ff 	stcmi	0, cr0, [r4], #-1020	; 0xfffffc04
    3f80:	6700009c 			; <UNDEFINED> instruction: 0x6700009c
    3f84:	25000011 	strcs	r0, [r0, #-17]
    3f88:	00009c60 	andeq	r9, r0, r0, ror #24
    3f8c:	0000116e 	andeq	r1, r0, lr, ror #2
    3f90:	00001112 	andeq	r1, r0, r2, lsl r1
    3f94:	02530120 	subseq	r0, r3, #32, 2
    3f98:	0120c808 	teqeq	r0, r8, lsl #16
    3f9c:	48030552 	stmdami	r3, {r1, r4, r6, r8, sl}
    3fa0:	200000ac 	andcs	r0, r0, ip, lsr #1
    3fa4:	03055101 	movweq	r5, #20737	; 0x5101
    3fa8:	0000ac7c 	andeq	sl, r0, ip, ror ip
    3fac:	05500120 	ldrbeq	r0, [r0, #-288]	; 0x120
    3fb0:	00acd403 	adceq	sp, ip, r3, lsl #8
    3fb4:	64240000 	strtvs	r0, [r4], #-0
    3fb8:	8400009c 	strhi	r0, [r0], #-156	; 0x9c
    3fbc:	00000011 	andeq	r0, r0, r1, lsl r0
    3fc0:	0000902a 	andeq	r9, r0, sl, lsr #32
    3fc4:	00112c00 	andseq	r2, r1, r0, lsl #24
    3fc8:	00812b00 	addeq	r2, r1, r0, lsl #22
    3fcc:	00160000 	andseq	r0, r6, r0
    3fd0:	00111c07 	andseq	r1, r1, r7, lsl #24
    3fd4:	08953100 	ldmeq	r5, {r8, ip, sp}
    3fd8:	21060000 	mrscs	r0, (UNDEF: 6)
    3fdc:	00001147 	andeq	r1, r0, r7, asr #2
    3fe0:	00002c32 	andeq	r2, r0, r2, lsr ip
    3fe4:	002c3200 	eoreq	r3, ip, r0, lsl #4
    3fe8:	33000000 	movwcc	r0, #0
    3fec:	000006c5 	andeq	r0, r0, r5, asr #13
    3ff0:	002c5707 	eoreq	r5, ip, r7, lsl #14
    3ff4:	58340000 	ldmdapl	r4!, {}	; <UNPREDICTABLE>
    3ff8:	06000008 	streq	r0, [r0], -r8
    3ffc:	00002524 	andeq	r2, r0, r4, lsr #10
    4000:	00116700 	andseq	r6, r1, r0, lsl #14
    4004:	002c3200 	eoreq	r3, ip, r0, lsl #4
    4008:	35000000 	strcc	r0, [r0, #-0]
    400c:	000001f6 	strdeq	r0, [r0], -r6
    4010:	51341e07 	teqpl	r4, r7, lsl #28
    4014:	07000004 	streq	r0, [r0, -r4]
    4018:	00002529 	andeq	r2, r0, r9, lsr #10
    401c:	00118400 	andseq	r8, r1, r0, lsl #8
    4020:	00973200 	addseq	r3, r7, r0, lsl #4
    4024:	002f0000 	eoreq	r0, pc, r0
    4028:	00008235 	andeq	r8, r0, r5, lsr r2
    402c:	31660700 	cmncc	r6, r0, lsl #14
    4030:	000008d3 	ldrdeq	r0, [r0], -r3
    4034:	119c1d06 	orrsne	r1, ip, r6, lsl #26
    4038:	2c320000 	ldccs	0, cr0, [r2], #-0
    403c:	00000000 	andeq	r0, r0, r0
    4040:	0008ad31 	andeq	sl, r8, r1, lsr sp
    4044:	ad1c0600 	ldcge	6, cr0, [ip, #-0]
    4048:	32000011 	andcc	r0, r0, #17
    404c:	0000002c 	andeq	r0, r0, ip, lsr #32
    4050:	044e3600 	strbeq	r3, [lr], #-1536	; 0x600
    4054:	02080000 	andeq	r0, r8, #0
    4058:	00000025 	andeq	r0, r0, r5, lsr #32
    405c:	00008a32 	andeq	r8, r0, r2, lsr sl
    4060:	00253200 	eoreq	r3, r5, r0, lsl #4
    4064:	97320000 	ldrls	r0, [r2, -r0]!
    4068:	32000000 	andcc	r0, r0, #0
    406c:	00000106 	andeq	r0, r0, r6, lsl #2
    4070:	03ff0000 	mvnseq	r0, #0
    4074:	00040000 	andeq	r0, r4, r0
    4078:	00001406 	andeq	r1, r0, r6, lsl #8
    407c:	000b0104 	andeq	r0, fp, r4, lsl #2
    4080:	55010000 	strpl	r0, [r1, #-0]
    4084:	ed00000a 	stc	0, cr0, [r0, #-40]	; 0xffffffd8
    4088:	78000003 	stmdavc	r0, {r0, r1}
    408c:	5400009c 	strpl	r0, [r0], #-156	; 0x9c
    4090:	19000001 	stmdbne	r0, {r0}
    4094:	02000012 	andeq	r0, r0, #18
    4098:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    409c:	04030074 	streq	r0, [r3], #-116	; 0x74
    40a0:	00017607 	andeq	r7, r1, r7, lsl #12
    40a4:	06010300 	streq	r0, [r1], -r0, lsl #6
    40a8:	00000076 	andeq	r0, r0, r6, ror r0
    40ac:	c7050203 	strgt	r0, [r5, -r3, lsl #4]
    40b0:	03000001 	movweq	r0, #1
    40b4:	01b30504 			; <UNDEFINED> instruction: 0x01b30504
    40b8:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    40bc:	0001ae05 	andeq	sl, r1, r5, lsl #28
    40c0:	08010300 	stmdaeq	r1, {r8, r9}
    40c4:	00000074 	andeq	r0, r0, r4, ror r0
    40c8:	f3070203 	vhsub.u8	d0, d7, d3
    40cc:	03000000 	movweq	r0, #0
    40d0:	01710704 	cmneq	r1, r4, lsl #14
    40d4:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    40d8:	00016c07 	andeq	r6, r1, r7, lsl #24
    40dc:	07040300 	streq	r0, [r4, -r0, lsl #6]
    40e0:	000001a5 	andeq	r0, r0, r5, lsr #3
    40e4:	7d080103 	stfvcs	f0, [r8, #-12]
    40e8:	04000000 	streq	r0, [r0], #-0
    40ec:	b20c0201 	andlt	r0, ip, #268435456	; 0x10000000
    40f0:	05000000 	streq	r0, [r0, #-0]
    40f4:	00000a72 	andeq	r0, r0, r2, ror sl
    40f8:	09660500 	stmdbeq	r6!, {r8, sl}^
    40fc:	05010000 	streq	r0, [r1, #-0]
    4100:	0000091f 	andeq	r0, r0, pc, lsl r9
    4104:	09770504 	ldmdbeq	r7!, {r2, r8, sl}^
    4108:	05050000 	streq	r0, [r5, #-0]
    410c:	00000986 	andeq	r0, r0, r6, lsl #19
    4110:	09950506 	ldmibeq	r5, {r1, r2, r8, sl}
    4114:	05070000 	streq	r0, [r7, #-0]
    4118:	00000a25 	andeq	r0, r0, r5, lsr #20
    411c:	09a40503 	stmibeq	r4!, {r0, r1, r8, sl}
    4120:	00020000 	andeq	r0, r2, r0
    4124:	0009d706 	andeq	sp, r9, r6, lsl #14
    4128:	79150200 	ldmdbvc	r5, {r9}
    412c:	07000000 	streq	r0, [r0, -r0]
    4130:	0000006a 	andeq	r0, r0, sl, rrx
    4134:	9c783701 	ldclls	7, cr3, [r8], #-4
    4138:	009c0000 	addseq	r0, ip, r0
    413c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4140:	000001c3 	andeq	r0, r0, r3, asr #3
    4144:	009c8008 	addseq	r8, ip, r8
    4148:	0003a800 	andeq	sl, r3, r0, lsl #16
    414c:	9c8c0900 	stcls	9, cr0, [ip], {0}
    4150:	03af0000 			; <UNDEFINED> instruction: 0x03af0000
    4154:	00f30000 	rscseq	r0, r3, r0
    4158:	010a0000 	mrseq	r0, (UNDEF: 10)
    415c:	0a320151 	beq	c846a8 <__bss_end__+0xc79538>
    4160:	3e015001 	cdpcc	0, 0, cr5, cr1, cr1, {0}
    4164:	9c980900 	ldcls	9, cr0, [r8], {0}
    4168:	03af0000 			; <UNDEFINED> instruction: 0x03af0000
    416c:	010b0000 	mrseq	r0, (UNDEF: 11)
    4170:	010a0000 	mrseq	r0, (UNDEF: 10)
    4174:	0a320151 	beq	c846c0 <__bss_end__+0xc79550>
    4178:	3f015001 	svccc	0x00015001
    417c:	9c9c0800 	ldcls	8, cr0, [ip], {0}
    4180:	03a80000 			; <UNDEFINED> instruction: 0x03a80000
    4184:	ac090000 	stcge	0, cr0, [r9], {-0}
    4188:	c500009c 	strgt	r0, [r0, #-156]	; 0x9c
    418c:	28000003 	stmdacs	r0, {r0, r1}
    4190:	0a000001 	beq	419c <_start-0x3e64>
    4194:	75025001 	strvc	r5, [r2, #-1]
    4198:	b8090000 	stmdalt	r9, {}	; <UNPREDICTABLE>
    419c:	e600009c 			; <UNDEFINED> instruction: 0xe600009c
    41a0:	3c000003 	stccc	0, cr0, [r0], {3}
    41a4:	0a000001 	beq	41b0 <_start-0x3e50>
    41a8:	75025001 	strvc	r5, [r2, #-1]
    41ac:	bc080000 	stclt	0, cr0, [r8], {-0}
    41b0:	a800009c 	stmdage	r0, {r2, r3, r4, r7}
    41b4:	09000003 	stmdbeq	r0, {r0, r1}
    41b8:	00009cc8 	andeq	r9, r0, r8, asr #25
    41bc:	000003e6 	andeq	r0, r0, r6, ror #7
    41c0:	00000158 	andeq	r0, r0, r8, asr r1
    41c4:	0151010a 	cmpeq	r1, sl, lsl #2
    41c8:	d4090030 	strle	r0, [r9], #-48	; 0x30
    41cc:	e600009c 			; <UNDEFINED> instruction: 0xe600009c
    41d0:	6b000003 	blvs	41e4 <_start-0x3e1c>
    41d4:	0a000001 	beq	41e0 <_start-0x3e20>
    41d8:	30015101 	andcc	r5, r1, r1, lsl #2
    41dc:	9ce00900 	stclls	9, cr0, [r0]
    41e0:	03e60000 	mvneq	r0, #0
    41e4:	017e0000 	cmneq	lr, r0
    41e8:	010a0000 	mrseq	r0, (UNDEF: 10)
    41ec:	00360151 	eorseq	r0, r6, r1, asr r1
    41f0:	009cec09 	addseq	lr, ip, r9, lsl #24
    41f4:	0003e600 	andeq	lr, r3, r0, lsl #12
    41f8:	00019100 	andeq	r9, r1, r0, lsl #2
    41fc:	51010a00 	tstpl	r1, r0, lsl #20
    4200:	09003301 	stmdbeq	r0, {r0, r8, r9, ip, sp}
    4204:	00009cf8 	strdeq	r9, [r0], -r8
    4208:	000003e6 	andeq	r0, r0, r6, ror #7
    420c:	000001a6 	andeq	r0, r0, r6, lsr #3
    4210:	0351010a 	cmpeq	r1, #-2147483646	; 0x80000002
    4214:	00010e0a 	andeq	r0, r1, sl, lsl #28
    4218:	009d0409 	addseq	r0, sp, r9, lsl #8
    421c:	0003e600 	andeq	lr, r3, r0, lsl #12
    4220:	0001b900 	andeq	fp, r1, r0, lsl #18
    4224:	51010a00 	tstpl	r1, r0, lsl #20
    4228:	08003301 	stmdaeq	r0, {r0, r8, r9, ip, sp}
    422c:	00009d08 	andeq	r9, r0, r8, lsl #26
    4230:	000003a8 	andeq	r0, r0, r8, lsr #7
    4234:	092e0b00 	stmdbeq	lr!, {r8, r9, fp}
    4238:	57010000 	strpl	r0, [r1, -r0]
    423c:	00000025 	andeq	r0, r0, r5, lsr #32
    4240:	00009d14 	andeq	r9, r0, r4, lsl sp
    4244:	0000001c 	andeq	r0, r0, ip, lsl r0
    4248:	01e69c01 	mvneq	r9, r1, lsl #24
    424c:	24080000 	strcs	r0, [r8], #-0
    4250:	c500009d 	strgt	r0, [r0, #-157]	; 0x9d
    4254:	00000003 	andeq	r0, r0, r3
    4258:	00080a0b 	andeq	r0, r8, fp, lsl #20
    425c:	255d0100 	ldrbcs	r0, [sp, #-256]	; 0x100
    4260:	30000000 	andcc	r0, r0, r0
    4264:	2800009d 	stmdacs	r0, {r0, r2, r3, r4, r7}
    4268:	01000000 	mrseq	r0, (UNDEF: 0)
    426c:	0002129c 	muleq	r2, ip, r2
    4270:	9d380800 	ldcls	8, cr0, [r8, #-0]
    4274:	01c30000 	biceq	r0, r3, r0
    4278:	4c080000 	stcmi	0, cr0, [r8], {-0}
    427c:	c500009d 	strgt	r0, [r0, #-157]	; 0x9d
    4280:	00000003 	andeq	r0, r0, r3
    4284:	0009e30b 	andeq	lr, r9, fp, lsl #6
    4288:	25640100 	strbcs	r0, [r4, #-256]!	; 0x100
    428c:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    4290:	1c00009d 	stcne	0, cr0, [r0], {157}	; 0x9d
    4294:	01000000 	mrseq	r0, (UNDEF: 0)
    4298:	0002359c 	muleq	r2, ip, r5
    429c:	9d680800 	stclls	8, cr0, [r8, #-0]
    42a0:	03c50000 	biceq	r0, r5, #0
    42a4:	07000000 	streq	r0, [r0, -r0]
    42a8:	000005ed 	andeq	r0, r0, sp, ror #11
    42ac:	9d746a01 	vldmdbls	r4!, {s13}
    42b0:	002c0000 	eoreq	r0, ip, r0
    42b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    42b8:	00000271 	andeq	r0, r0, r1, ror r2
    42bc:	0100630c 	tsteq	r0, ip, lsl #6
    42c0:	00002c6a 	andeq	r2, r0, sl, ror #24
    42c4:	001eeb00 	andseq	lr, lr, r0, lsl #22
    42c8:	9d800800 	stcls	8, cr0, [r0]
    42cc:	02120000 	andseq	r0, r2, #0
    42d0:	980d0000 	stmdals	sp, {}	; <UNPREDICTABLE>
    42d4:	e600009d 			; <UNDEFINED> instruction: 0xe600009d
    42d8:	0a000003 	beq	42ec <_start-0x3d14>
    42dc:	74025101 	strvc	r5, [r2], #-257	; 0x101
    42e0:	0b000000 	bleq	42e8 <_start-0x3d18>
    42e4:	0000094c 	andeq	r0, r0, ip, asr #18
    42e8:	00257401 	eoreq	r7, r5, r1, lsl #8
    42ec:	9da00000 	stcls	0, cr0, [r0]
    42f0:	000c0000 	andeq	r0, ip, r0
    42f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    42f8:	00000294 	muleq	r0, r4, r2
    42fc:	009da808 	addseq	sl, sp, r8, lsl #16
    4300:	0001c300 	andeq	ip, r1, r0, lsl #6
    4304:	910b0000 	mrsls	r0, (UNDEF: 11)
    4308:	0100000a 	tsteq	r0, sl
    430c:	00002578 	andeq	r2, r0, r8, ror r5
    4310:	009dac00 	addseq	sl, sp, r0, lsl #24
    4314:	00002000 	andeq	r2, r0, r0
    4318:	c09c0100 	addsgt	r0, ip, r0, lsl #2
    431c:	08000002 	stmdaeq	r0, {r1}
    4320:	00009db4 			; <UNDEFINED> instruction: 0x00009db4
    4324:	00000271 	andeq	r0, r0, r1, ror r2
    4328:	009dc008 	addseq	ip, sp, r8
    432c:	0001e600 	andeq	lr, r1, r0, lsl #12
    4330:	fd0e0000 	stc2	0, cr0, [lr, #-0]
    4334:	01000009 	tsteq	r0, r9
    4338:	0002d116 	andeq	sp, r2, r6, lsl r1
    433c:	24030500 	strcs	r0, [r3], #-1280	; 0x500
    4340:	0f0000a4 	svceq	0x000000a4
    4344:	0002d704 	andeq	sp, r2, r4, lsl #14
    4348:	002c1000 	eoreq	r1, ip, r0
    434c:	f10e0000 	cpsid	,#0
    4350:	01000009 	tsteq	r0, r9
    4354:	0002d117 	andeq	sp, r2, r7, lsl r1
    4358:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
    435c:	0e0000a3 	cdpeq	0, 0, cr0, cr0, cr3, {5}
    4360:	00000902 	andeq	r0, r0, r2, lsl #18
    4364:	02d11a01 	sbcseq	r1, r1, #4096	; 0x1000
    4368:	03050000 	movweq	r0, #20480	; 0x5000
    436c:	0000a410 	andeq	sl, r0, r0, lsl r4
    4370:	0009b30e 	andeq	fp, r9, lr, lsl #6
    4374:	d11b0100 	tstle	fp, r0, lsl #2
    4378:	05000002 	streq	r0, [r0, #-2]
    437c:	00a3fc03 	adceq	pc, r3, r3, lsl #24
    4380:	09c80e00 	stmibeq	r8, {r9, sl, fp}^
    4384:	1c010000 	stcne	0, cr0, [r1], {-0}
    4388:	000002d1 	ldrdeq	r0, [r0], -r1
    438c:	a4000305 	strge	r0, [r0], #-773	; 0x305
    4390:	630e0000 	movwvs	r0, #57344	; 0xe000
    4394:	0100000a 	tsteq	r0, sl
    4398:	0002d11d 	andeq	sp, r2, sp, lsl r1
    439c:	04030500 	streq	r0, [r3], #-1280	; 0x500
    43a0:	0e0000a4 	cdpeq	0, 0, cr0, cr0, cr4, {5}
    43a4:	000008f3 	strdeq	r0, [r0], -r3
    43a8:	02d11e01 	sbcseq	r1, r1, #1, 28
    43ac:	03050000 	movweq	r0, #20480	; 0x5000
    43b0:	0000a420 	andeq	sl, r0, r0, lsr #8
    43b4:	000a820e 	andeq	r8, sl, lr, lsl #4
    43b8:	d11f0100 	tstle	pc, r0, lsl #2
    43bc:	05000002 	streq	r0, [r0, #-2]
    43c0:	00a40c03 	adceq	r0, r4, r3, lsl #24
    43c4:	09100e00 	ldmdbeq	r0, {r9, sl, fp}
    43c8:	20010000 	andcs	r0, r1, r0
    43cc:	000002d1 	ldrdeq	r0, [r0], -r1
    43d0:	a41c0305 	ldrge	r0, [ip], #-773	; 0x305
    43d4:	460e0000 	strmi	r0, [lr], -r0
    43d8:	0100000a 	tsteq	r0, sl
    43dc:	0002d121 	andeq	sp, r2, r1, lsr #2
    43e0:	18030500 	stmdane	r3, {r8, sl}
    43e4:	0e0000a4 	cdpeq	0, 0, cr0, cr0, cr4, {5}
    43e8:	0000093c 	andeq	r0, r0, ip, lsr r9
    43ec:	02d12201 	sbcseq	r2, r1, #268435456	; 0x10000000
    43f0:	03050000 	movweq	r0, #20480	; 0x5000
    43f4:	0000a3f8 	strdeq	sl, [r0], -r8
    43f8:	000a150e 	andeq	r1, sl, lr, lsl #10
    43fc:	d1230100 	teqle	r3, r0, lsl #2
    4400:	05000002 	streq	r0, [r0, #-2]
    4404:	00a41403 	adceq	r1, r4, r3, lsl #8
    4408:	0a050e00 	beq	147c10 <__bss_end__+0x13caa0>
    440c:	24010000 	strcs	r0, [r1], #-0
    4410:	000002d1 	ldrdeq	r0, [r0], -r1
    4414:	a4080305 	strge	r0, [r8], #-773	; 0x305
    4418:	5a110000 	bpl	444420 <__bss_end__+0x4392b0>
    441c:	03000009 	movweq	r0, #9
    4420:	0a34128a 	beq	d08e50 <__bss_end__+0xcfdce0>
    4424:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
    4428:	000003c5 	andeq	r0, r0, r5, asr #7
    442c:	00002c13 	andeq	r2, r0, r3, lsl ip
    4430:	00b21300 	adcseq	r1, r2, r0, lsl #6
    4434:	14000000 	strne	r0, [r0], #-0
    4438:	00000aa1 	andeq	r0, r0, r1, lsr #21
    443c:	002ca903 	eoreq	sl, ip, r3, lsl #18
    4440:	03da0000 	bicseq	r0, sl, #0
    4444:	da130000 	ble	4c444c <__bss_end__+0x4b92dc>
    4448:	00000003 	andeq	r0, r0, r3
    444c:	03e0040f 	mvneq	r0, #251658240	; 0xf000000
    4450:	e5150000 	ldr	r0, [r5, #-0]
    4454:	16000003 	strne	r0, [r0], -r3
    4458:	0009c212 	andeq	ip, r9, r2, lsl r2
    445c:	fc9d0300 	ldc2	3, cr0, [sp], {0}
    4460:	13000003 	movwne	r0, #3
    4464:	000003fc 	strdeq	r0, [r0], -ip
    4468:	00002c13 	andeq	r2, r0, r3, lsl ip
    446c:	040f0000 	streq	r0, [pc], #-0	; 4474 <_start-0x3b8c>
    4470:	000003e5 	andeq	r0, r0, r5, ror #7
    4474:	00082100 	andeq	r2, r8, r0, lsl #2
    4478:	34000400 	strcc	r0, [r0], #-1024	; 0x400
    447c:	04000015 	streq	r0, [r0], #-21
    4480:	00000b01 	andeq	r0, r0, r1, lsl #22
    4484:	0af10100 	beq	ffc4488c <__bss_end__+0xffc3971c>
    4488:	03ed0000 	mvneq	r0, #0
    448c:	9e300000 	cdpls	0, 3, cr0, cr0, cr0, {0}
    4490:	05680000 	strbeq	r0, [r8, #-0]!
    4494:	131e0000 	tstne	lr, #0
    4498:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    449c:	00016c07 	andeq	r6, r1, r7, lsl #24
    44a0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    44a4:	00000176 	andeq	r0, r0, r6, ror r1
    44a8:	76060102 	strvc	r0, [r6], -r2, lsl #2
    44ac:	02000000 	andeq	r0, r0, #0
    44b0:	01c70502 	biceq	r0, r7, r2, lsl #10
    44b4:	04020000 	streq	r0, [r2], #-0
    44b8:	0001b305 	andeq	fp, r1, r5, lsl #6
    44bc:	05080200 	streq	r0, [r8, #-512]	; 0x200
    44c0:	000001ae 	andeq	r0, r0, lr, lsr #3
    44c4:	74080102 	strvc	r0, [r8], #-258	; 0x102
    44c8:	02000000 	andeq	r0, r0, #0
    44cc:	00f30702 	rscseq	r0, r3, r2, lsl #14
    44d0:	04020000 	streq	r0, [r2], #-0
    44d4:	00017107 	andeq	r7, r1, r7, lsl #2
    44d8:	05040300 	streq	r0, [r4, #-768]	; 0x300
    44dc:	00746e69 	rsbseq	r6, r4, r9, ror #28
    44e0:	a5070402 	strge	r0, [r7, #-1026]	; 0x402
    44e4:	02000001 	andeq	r0, r0, #1
    44e8:	007d0801 	rsbseq	r0, sp, r1, lsl #16
    44ec:	01040000 	mrseq	r0, (UNDEF: 4)
    44f0:	00b20c02 	adcseq	r0, r2, r2, lsl #24
    44f4:	72050000 	andvc	r0, r5, #0
    44f8:	0000000a 	andeq	r0, r0, sl
    44fc:	00096605 	andeq	r6, r9, r5, lsl #12
    4500:	1f050100 	svcne	0x00050100
    4504:	04000009 	streq	r0, [r0], #-9
    4508:	00097705 	andeq	r7, r9, r5, lsl #14
    450c:	86050500 	strhi	r0, [r5], -r0, lsl #10
    4510:	06000009 	streq	r0, [r0], -r9
    4514:	00099505 	andeq	r9, r9, r5, lsl #10
    4518:	25050700 	strcs	r0, [r5, #-1792]	; 0x700
    451c:	0300000a 	movweq	r0, #10
    4520:	0009a405 	andeq	sl, r9, r5, lsl #8
    4524:	06000200 	streq	r0, [r0], -r0, lsl #4
    4528:	000009d7 	ldrdeq	r0, [r0], -r7
    452c:	00791502 	rsbseq	r1, r9, r2, lsl #10
    4530:	d3070000 	movwle	r0, #28672	; 0x7000
    4534:	01000008 	tsteq	r0, r8
    4538:	009e303f 	addseq	r3, lr, pc, lsr r0
    453c:	0000d400 	andeq	sp, r0, r0, lsl #8
    4540:	339c0100 	orrscc	r0, ip, #0, 2
    4544:	08000001 	stmdaeq	r0, {r0}
    4548:	006e6970 	rsbeq	r6, lr, r0, ror r9
    454c:	002c3f01 	eoreq	r3, ip, r1, lsl #30
    4550:	1f090000 	svcne	0x00090000
    4554:	2d090000 	stccs	0, cr0, [r9, #-0]
    4558:	0100000b 	tsteq	r0, fp
    455c:	00013347 	andeq	r3, r1, r7, asr #6
    4560:	001f2700 	andseq	r2, pc, r0, lsl #14
    4564:	0c150900 	ldceq	9, cr0, [r5], {-0}
    4568:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    456c:	0000002c 	andeq	r0, r0, ip, lsr #32
    4570:	00001f7c 	andeq	r1, r0, ip, ror pc
    4574:	000bc009 	andeq	ip, fp, r9
    4578:	2c570100 	ldfcse	f0, [r7], {-0}
    457c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    4580:	0a000021 	beq	460c <_start-0x39f4>
    4584:	00009ec4 	andeq	r9, r0, r4, asr #29
    4588:	000007e0 	andeq	r0, r0, r0, ror #15
    458c:	00000122 	andeq	r0, r0, r2, lsr #2
    4590:	0250010b 	subseq	r0, r0, #-1073741822	; 0xc0000002
    4594:	0c000075 	stceq	0, cr0, [r0], {117}	; 0x75
    4598:	00009ef8 	strdeq	r9, [r0], -r8
    459c:	00000801 	andeq	r0, r0, r1, lsl #16
    45a0:	0250010b 	subseq	r0, r0, #-1073741822	; 0xc0000002
    45a4:	00000075 	andeq	r0, r0, r5, ror r0
    45a8:	0139040d 	teqeq	r9, sp, lsl #8
    45ac:	2c0e0000 	stccs	0, cr0, [lr], {-0}
    45b0:	07000000 	streq	r0, [r0, -r0]
    45b4:	00000be5 	andeq	r0, r0, r5, ror #23
    45b8:	9f046001 	svcls	0x00046001
    45bc:	00380000 	eorseq	r0, r8, r0
    45c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    45c4:	00000196 	muleq	r0, r6, r1
    45c8:	6e697008 	cdpvs	0, 6, cr7, cr9, cr8, {0}
    45cc:	2c600100 	stfcse	f0, [r0], #-0
    45d0:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    45d4:	09000021 	stmdbeq	r0, {r0, r5}
    45d8:	00000b2d 	andeq	r0, r0, sp, lsr #22
    45dc:	01336701 	teqeq	r3, r1, lsl #14
    45e0:	21990000 	orrscs	r0, r9, r0
    45e4:	c0090000 	andgt	r0, r9, r0
    45e8:	0100000b 	tsteq	r0, fp
    45ec:	00002c68 	andeq	r2, r0, r8, ror #24
    45f0:	0021cf00 	eoreq	ip, r1, r0, lsl #30
    45f4:	9f340c00 	svcls	0x00340c00
    45f8:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    45fc:	010b0000 	mrseq	r0, (UNDEF: 11)
    4600:	f3310751 	vaba.u<illegal width 64>	q0, <illegal reg q0.5>, <illegal reg q0.5>
    4604:	1a4f5001 	bne	13d8610 <__bss_end__+0x13cd4a0>
    4608:	07000024 	streq	r0, [r0, -r4, lsr #32]
    460c:	00000ae4 	andeq	r0, r0, r4, ror #21
    4610:	9f3c7b01 	svcls	0x003c7b01
    4614:	00380000 	eorseq	r0, r8, r0
    4618:	9c010000 	stcls	0, cr0, [r1], {-0}
    461c:	000001ee 	andeq	r0, r0, lr, ror #3
    4620:	6e697008 	cdpvs	0, 6, cr7, cr9, cr8, {0}
    4624:	2c7b0100 	ldfcse	f0, [fp], #-0
    4628:	0f000000 	svceq	0x00000000
    462c:	09000022 	stmdbeq	r0, {r1, r5}
    4630:	00000b2d 	andeq	r0, r0, sp, lsr #22
    4634:	01338101 	teqeq	r3, r1, lsl #2
    4638:	22300000 	eorscs	r0, r0, #0
    463c:	c0090000 	andgt	r0, r9, r0
    4640:	0100000b 	tsteq	r0, fp
    4644:	00002c82 	andeq	r2, r0, r2, lsl #25
    4648:	00226600 	eoreq	r6, r2, r0, lsl #12
    464c:	9f6c0c00 	svcls	0x006c0c00
    4650:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    4654:	010b0000 	mrseq	r0, (UNDEF: 11)
    4658:	f3310751 	vaba.u<illegal width 64>	q0, <illegal reg q0.5>, <illegal reg q0.5>
    465c:	1a4f5001 	bne	13d8668 <__bss_end__+0x13cd4f8>
    4660:	07000024 	streq	r0, [r0, -r4, lsr #32]
    4664:	000008ad 	andeq	r0, r0, sp, lsr #17
    4668:	9f749501 	svcls	0x00749501
    466c:	00cc0000 	sbceq	r0, ip, r0
    4670:	9c010000 	stcls	0, cr0, [r1], {-0}
    4674:	00000264 	andeq	r0, r0, r4, ror #4
    4678:	6e697008 	cdpvs	0, 6, cr7, cr9, cr8, {0}
    467c:	2c950100 	ldfcss	f0, [r5], {0}
    4680:	a6000000 	strge	r0, [r0], -r0
    4684:	09000022 	stmdbeq	r0, {r1, r5}
    4688:	00000b2d 	andeq	r0, r0, sp, lsr #22
    468c:	01339b01 	teqeq	r3, r1, lsl #22
    4690:	22c40000 	sbccs	r0, r4, #0
    4694:	15090000 	strne	r0, [r9, #-0]
    4698:	0100000c 	tsteq	r0, ip
    469c:	00002c9d 	muleq	r0, sp, ip
    46a0:	00231900 	eoreq	r1, r3, r0, lsl #18
    46a4:	0bc00900 	bleq	ff006aac <__bss_end__+0xfeffb93c>
    46a8:	ab010000 	blge	446b0 <__bss_end__+0x39540>
    46ac:	0000002c 	andeq	r0, r0, ip, lsr #32
    46b0:	000024e5 	andeq	r2, r0, r5, ror #9
    46b4:	00a0080a 	adceq	r0, r0, sl, lsl #16
    46b8:	0007e000 	andeq	lr, r7, r0
    46bc:	00025300 	andeq	r5, r2, r0, lsl #6
    46c0:	50010b00 	andpl	r0, r1, r0, lsl #22
    46c4:	00007502 	andeq	r7, r0, r2, lsl #10
    46c8:	00a0340c 	adceq	r3, r0, ip, lsl #8
    46cc:	00080100 	andeq	r0, r8, r0, lsl #2
    46d0:	50010b00 	andpl	r0, r1, r0, lsl #22
    46d4:	00007502 	andeq	r7, r0, r2, lsl #10
    46d8:	08580f00 	ldmdaeq	r8, {r8, r9, sl, fp}^
    46dc:	b3010000 	movwlt	r0, #4096	; 0x1000
    46e0:	00000064 	andeq	r0, r0, r4, rrx
    46e4:	0000a040 	andeq	sl, r0, r0, asr #32
    46e8:	0000004c 	andeq	r0, r0, ip, asr #32
    46ec:	02ac9c01 	adceq	r9, ip, #256	; 0x100
    46f0:	70080000 	andvc	r0, r8, r0
    46f4:	01006e69 	tsteq	r0, r9, ror #28
    46f8:	00002cb3 			; <UNDEFINED> instruction: 0x00002cb3
    46fc:	00250300 	eoreq	r0, r5, r0, lsl #6
    4700:	00761000 	rsbseq	r1, r6, r0
    4704:	002cb901 	eoreq	fp, ip, r1, lsl #18
    4708:	255b0000 	ldrbcs	r0, [fp, #-0]
    470c:	60110000 	andsvs	r0, r1, r0
    4710:	e00000a0 	and	r0, r0, r0, lsr #1
    4714:	11000007 	tstne	r0, r7
    4718:	0000a070 	andeq	sl, r0, r0, ror r0
    471c:	000007e0 	andeq	r0, r0, r0, ror #15
    4720:	08950700 	ldmeq	r5, {r8, r9, sl}
    4724:	c5010000 	strgt	r0, [r1, #-0]
    4728:	0000a08c 	andeq	sl, r0, ip, lsl #1
    472c:	00000024 	andeq	r0, r0, r4, lsr #32
    4730:	02fc9c01 	rscseq	r9, ip, #256	; 0x100
    4734:	70080000 	andvc	r0, r8, r0
    4738:	01006e69 	tsteq	r0, r9, ror #28
    473c:	00002cc5 	andeq	r2, r0, r5, asr #25
    4740:	00259100 	eoreq	r9, r5, r0, lsl #2
    4744:	00760800 	rsbseq	r0, r6, r0, lsl #16
    4748:	002cc501 	eoreq	ip, ip, r1, lsl #10
    474c:	25cb0000 	strbcs	r0, [fp]
    4750:	a40a0000 	strge	r0, [sl], #-0
    4754:	3e0000a0 	cdpcc	0, 0, cr0, cr0, cr0, {5}
    4758:	f2000001 	vhadd.s8	d0, d0, d1
    475c:	0b000002 	bleq	476c <_start-0x3894>
    4760:	f3035001 	vhadd.u8	d5, d3, d1
    4764:	11005001 	tstne	r0, r1
    4768:	0000a0ac 	andeq	sl, r0, ip, lsr #1
    476c:	00000196 	muleq	r0, r6, r1
    4770:	0a340700 	beq	d06378 <__bss_end__+0xcfb208>
    4774:	d1010000 	mrsle	r0, (UNDEF: 1)
    4778:	0000a0b0 	strheq	sl, [r0], -r0
    477c:	000000d8 	ldrdeq	r0, [r0], -r8
    4780:	03819c01 	orreq	r9, r1, #256	; 0x100
    4784:	70080000 	andvc	r0, r8, r0
    4788:	01006e69 	tsteq	r0, r9, ror #28
    478c:	00002cd1 	ldrdeq	r2, [r0], -r1
    4790:	00260500 	eoreq	r0, r6, r0, lsl #10
    4794:	0bd21200 	bleq	ff488f9c <__bss_end__+0xff47de2c>
    4798:	d1010000 	mrsle	r0, (UNDEF: 1)
    479c:	000000b2 	strheq	r0, [r0], -r2
    47a0:	00002623 	andeq	r2, r0, r3, lsr #12
    47a4:	000b2d09 	andeq	r2, fp, r9, lsl #26
    47a8:	33d90100 	bicscc	r0, r9, #0, 2
    47ac:	44000001 	strmi	r0, [r0], #-1
    47b0:	09000026 	stmdbeq	r0, {r1, r2, r5}
    47b4:	00000c15 	andeq	r0, r0, r5, lsl ip
    47b8:	002cda01 	eoreq	sp, ip, r1, lsl #20
    47bc:	26990000 	ldrcs	r0, [r9], r0
    47c0:	c0090000 	andgt	r0, r9, r0
    47c4:	0100000b 	tsteq	r0, fp
    47c8:	00002ce8 	andeq	r2, r0, r8, ror #25
    47cc:	00286500 	eoreq	r6, r8, r0, lsl #10
    47d0:	a14c0a00 	cmpge	ip, r0, lsl #20
    47d4:	07e00000 	strbeq	r0, [r0, r0]!
    47d8:	03700000 	cmneq	r0, #0
    47dc:	010b0000 	mrseq	r0, (UNDEF: 11)
    47e0:	00760250 	rsbseq	r0, r6, r0, asr r2
    47e4:	a17c0c00 	cmnge	ip, r0, lsl #24
    47e8:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    47ec:	010b0000 	mrseq	r0, (UNDEF: 11)
    47f0:	00760250 	rsbseq	r0, r6, r0, asr r2
    47f4:	d8130000 	ldmdale	r3, {}	; <UNPREDICTABLE>
    47f8:	0100000a 	tsteq	r0, sl
    47fc:	00640105 	rsbeq	r0, r4, r5, lsl #2
    4800:	a1880000 	orrge	r0, r8, r0
    4804:	002c0000 	eoreq	r0, ip, r0
    4808:	9c010000 	stcls	0, cr0, [r1], {-0}
    480c:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
    4810:	000adb14 	andeq	sp, sl, r4, lsl fp
    4814:	01050100 	mrseq	r0, (UNDEF: 21)
    4818:	0000002c 	andeq	r0, r0, ip, lsr #32
    481c:	00002896 	muleq	r0, r6, r8
    4820:	00a19811 	adceq	r9, r1, r1, lsl r8
    4824:	0007e000 	andeq	lr, r7, r0
    4828:	70150000 	andsvc	r0, r5, r0
    482c:	0100000b 	tsteq	r0, fp
    4830:	a1b40114 			; <UNDEFINED> instruction: 0xa1b40114
    4834:	00840000 	addeq	r0, r4, r0
    4838:	9c010000 	stcls	0, cr0, [r1], {-0}
    483c:	00000479 	andeq	r0, r0, r9, ror r4
    4840:	6e697016 	mcrvs	0, 3, r7, cr9, cr6, {0}
    4844:	01140100 	tsteq	r4, r0, lsl #2
    4848:	0000002c 	andeq	r0, r0, ip, lsr #32
    484c:	000028b7 			; <UNDEFINED> instruction: 0x000028b7
    4850:	000aff17 	andeq	pc, sl, r7, lsl pc	; <UNPREDICTABLE>
    4854:	01260100 	teqeq	r6, r0, lsl #2
    4858:	0000002c 	andeq	r0, r0, ip, lsr #32
    485c:	000028e3 	andeq	r2, r0, r3, ror #17
    4860:	00a1d018 	adceq	sp, r1, r8, lsl r0
    4864:	00001c00 	andeq	r1, r0, r0, lsl #24
    4868:	00041b00 	andeq	r1, r4, r0, lsl #22
    486c:	0bc01700 	bleq	ff00a474 <__bss_end__+0xfefff304>
    4870:	1d010000 	stcne	0, cr0, [r1, #-0]
    4874:	00002c01 	andeq	r2, r0, r1, lsl #24
    4878:	00290100 	eoreq	r0, r9, r0, lsl #2
    487c:	a1dc1100 	bicsge	r1, ip, r0, lsl #2
    4880:	07e00000 	strbeq	r0, [r0, r0]!
    4884:	ec110000 	ldc	0, cr0, [r1], {-0}
    4888:	010000a1 	smlatbeq	r0, r1, r0, r0
    488c:	00000008 	andeq	r0, r0, r8
    4890:	00a1f018 	adceq	pc, r1, r8, lsl r0	; <UNPREDICTABLE>
    4894:	00002000 	andeq	r2, r0, r0
    4898:	00044b00 	andeq	r4, r4, r0, lsl #22
    489c:	0bc01700 	bleq	ff00a4a4 <__bss_end__+0xfefff334>
    48a0:	21010000 	mrscs	r0, (UNDEF: 1)
    48a4:	00002c01 	andeq	r2, r0, r1, lsl #24
    48a8:	00291f00 	eoreq	r1, r9, r0, lsl #30
    48ac:	a1fc1100 	mvnsge	r1, r0, lsl #2
    48b0:	07e00000 	strbeq	r0, [r0, r0]!
    48b4:	10110000 	andsne	r0, r1, r0
    48b8:	010000a2 	smlatbeq	r0, r2, r0, r0
    48bc:	00000008 	andeq	r0, r0, r8
    48c0:	00a1c811 	adceq	ip, r1, r1, lsl r8
    48c4:	00081d00 	andeq	r1, r8, r0, lsl #26
    48c8:	a2141100 	andsge	r1, r4, #0, 2
    48cc:	081d0000 	ldmdaeq	sp, {}	; <UNPREDICTABLE>
    48d0:	20110000 	andscs	r0, r1, r0
    48d4:	e00000a2 	and	r0, r0, r2, lsr #1
    48d8:	11000007 	tstne	r0, r7
    48dc:	0000a22c 	andeq	sl, r0, ip, lsr #4
    48e0:	00000801 	andeq	r0, r0, r1, lsl #16
    48e4:	00a23011 	adceq	r3, r2, r1, lsl r0
    48e8:	00081d00 	andeq	r1, r8, r0, lsl #26
    48ec:	ff150000 			; <UNDEFINED> instruction: 0xff150000
    48f0:	0100000b 	tsteq	r0, fp
    48f4:	a2380131 	eorsge	r0, r8, #1073741836	; 0x4000000c
    48f8:	00840000 	addeq	r0, r4, r0
    48fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    4900:	0000053d 	andeq	r0, r0, sp, lsr r5
    4904:	6e697016 	mcrvs	0, 3, r7, cr9, cr6, {0}
    4908:	01310100 	teqeq	r1, r0, lsl #2
    490c:	0000002c 	andeq	r0, r0, ip, lsr #32
    4910:	0000293d 	andeq	r2, r0, sp, lsr r9
    4914:	000aff17 	andeq	pc, sl, r7, lsl pc	; <UNPREDICTABLE>
    4918:	01420100 	mrseq	r0, (UNDEF: 82)
    491c:	0000002c 	andeq	r0, r0, ip, lsr #32
    4920:	00002969 	andeq	r2, r0, r9, ror #18
    4924:	00a25418 	adceq	r5, r2, r8, lsl r4
    4928:	00001c00 	andeq	r1, r0, r0, lsl #24
    492c:	0004df00 	andeq	sp, r4, r0, lsl #30
    4930:	0bc01700 	bleq	ff00a538 <__bss_end__+0xfefff3c8>
    4934:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    4938:	00002c01 	andeq	r2, r0, r1, lsl #24
    493c:	00298700 	eoreq	r8, r9, r0, lsl #14
    4940:	a2601100 	rsbge	r1, r0, #0, 2
    4944:	07e00000 	strbeq	r0, [r0, r0]!
    4948:	70110000 	andsvc	r0, r1, r0
    494c:	010000a2 	smlatbeq	r0, r2, r0, r0
    4950:	00000008 	andeq	r0, r0, r8
    4954:	00a27418 	adceq	r7, r2, r8, lsl r4
    4958:	00002000 	andeq	r2, r0, r0
    495c:	00050f00 	andeq	r0, r5, r0, lsl #30
    4960:	0bc01700 	bleq	ff00a568 <__bss_end__+0xfefff3f8>
    4964:	3d010000 	stccc	0, cr0, [r1, #-0]
    4968:	00002c01 	andeq	r2, r0, r1, lsl #24
    496c:	0029a500 	eoreq	sl, r9, r0, lsl #10
    4970:	a2801100 	addge	r1, r0, #0, 2
    4974:	07e00000 	strbeq	r0, [r0, r0]!
    4978:	94110000 	ldrls	r0, [r1], #-0
    497c:	010000a2 	smlatbeq	r0, r2, r0, r0
    4980:	00000008 	andeq	r0, r0, r8
    4984:	00a24c11 	adceq	r4, r2, r1, lsl ip
    4988:	00081d00 	andeq	r1, r8, r0, lsl #26
    498c:	a2981100 	addsge	r1, r8, #0, 2
    4990:	081d0000 	ldmdaeq	sp, {}	; <UNPREDICTABLE>
    4994:	a4110000 	ldrge	r0, [r1], #-0
    4998:	e00000a2 	and	r0, r0, r2, lsr #1
    499c:	11000007 	tstne	r0, r7
    49a0:	0000a2b0 			; <UNDEFINED> instruction: 0x0000a2b0
    49a4:	00000801 	andeq	r0, r0, r1, lsl #16
    49a8:	00a2b411 	adceq	fp, r2, r1, lsl r4
    49ac:	00081d00 	andeq	r1, r8, r0, lsl #26
    49b0:	a7130000 	ldrge	r0, [r3, -r0]
    49b4:	0100000a 	tsteq	r0, sl
    49b8:	0064014c 	rsbeq	r0, r4, ip, asr #2
    49bc:	a2bc0000 	adcsge	r0, ip, #0
    49c0:	00840000 	addeq	r0, r4, r0
    49c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    49c8:	000005e3 	andeq	r0, r0, r3, ror #11
    49cc:	6e697016 	mcrvs	0, 3, r7, cr9, cr6, {0}
    49d0:	014c0100 	mrseq	r0, (UNDEF: 92)
    49d4:	0000002c 	andeq	r0, r0, ip, lsr #32
    49d8:	000029c3 	andeq	r2, r0, r3, asr #19
    49dc:	00a2d818 	adceq	sp, r2, r8, lsl r8
    49e0:	00002400 	andeq	r2, r0, r0, lsl #8
    49e4:	00059700 	andeq	r9, r5, r0, lsl #14
    49e8:	0b161700 	bleq	58a5f0 <__bss_end__+0x57f480>
    49ec:	53010000 	movwpl	r0, #4096	; 0x1000
    49f0:	00002c01 	andeq	r2, r0, r1, lsl #24
    49f4:	002a0500 	eoreq	r0, sl, r0, lsl #10
    49f8:	a2e41100 	rscge	r1, r4, #0, 2
    49fc:	07e00000 	strbeq	r0, [r0, r0]!
    4a00:	f4110000 			; <UNDEFINED> instruction: 0xf4110000
    4a04:	1d0000a2 	stcne	0, cr0, [r0, #-648]	; 0xfffffd78
    4a08:	00000008 	andeq	r0, r0, r8
    4a0c:	00a2fc18 	adceq	pc, r2, r8, lsl ip	; <UNPREDICTABLE>
    4a10:	00002c00 	andeq	r2, r0, r0, lsl #24
    4a14:	0005d000 	andeq	sp, r5, r0
    4a18:	0b161700 	bleq	58a620 <__bss_end__+0x57f4b0>
    4a1c:	56010000 	strpl	r0, [r1], -r0
    4a20:	00002c01 	andeq	r2, r0, r1, lsl #24
    4a24:	002a1f00 	eoreq	r1, sl, r0, lsl #30
    4a28:	a3081100 	movwge	r1, #33024	; 0x8100
    4a2c:	07e00000 	strbeq	r0, [r0, r0]!
    4a30:	14110000 	ldrne	r0, [r1], #-0
    4a34:	1d0000a3 	stcne	0, cr0, [r0, #-652]	; 0xfffffd74
    4a38:	11000008 	tstne	r0, r8
    4a3c:	0000a320 	andeq	sl, r0, r0, lsr #6
    4a40:	0000081d 	andeq	r0, r0, sp, lsl r8
    4a44:	a2d01100 	sbcsge	r1, r0, #0, 2
    4a48:	081d0000 	ldmdaeq	sp, {}	; <UNPREDICTABLE>
    4a4c:	2c110000 	ldccs	0, cr0, [r1], {-0}
    4a50:	1d0000a3 	stcne	0, cr0, [r0, #-652]	; 0xfffffd74
    4a54:	00000008 	andeq	r0, r0, r8
    4a58:	000b9315 	andeq	r9, fp, r5, lsl r3
    4a5c:	015f0100 	cmpeq	pc, r0, lsl #2
    4a60:	0000a340 	andeq	sl, r0, r0, asr #6
    4a64:	00000058 	andeq	r0, r0, r8, asr r0
    4a68:	06489c01 	strbeq	r9, [r8], -r1, lsl #24
    4a6c:	70160000 	andsvc	r0, r6, r0
    4a70:	01006e69 	tsteq	r0, r9, ror #28
    4a74:	002c015f 	eoreq	r0, ip, pc, asr r1
    4a78:	2a320000 	bcs	c84a80 <__bss_end__+0xc79910>
    4a7c:	54110000 	ldrpl	r0, [r1], #-0
    4a80:	1d0000a3 	stcne	0, cr0, [r0, #-652]	; 0xfffffd74
    4a84:	0a000008 	beq	4aac <_start-0x3554>
    4a88:	0000a370 	andeq	sl, r0, r0, ror r3
    4a8c:	00000801 	andeq	r0, r0, r1, lsl #16
    4a90:	00000628 	andeq	r0, r0, r8, lsr #12
    4a94:	0451010b 	ldrbeq	r0, [r1], #-267	; 0x10b
    4a98:	24007431 	strcs	r7, [r0], #-1073	; 0x431
    4a9c:	a38c0a00 	orrge	r0, ip, #0, 20
    4aa0:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    4aa4:	063e0000 	ldrteq	r0, [lr], -r0
    4aa8:	010b0000 	mrseq	r0, (UNDEF: 11)
    4aac:	74310451 	ldrtvc	r0, [r1], #-1105	; 0x451
    4ab0:	11002400 	tstne	r0, r0, lsl #8
    4ab4:	0000a390 	muleq	r0, r0, r3
    4ab8:	0000081d 	andeq	r0, r0, sp, lsl r8
    4abc:	0b5e1900 	bleq	178aec4 <__bss_end__+0x177fd54>
    4ac0:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    4ac4:	00000133 	andeq	r0, r0, r3, lsr r1
    4ac8:	a4840305 	strge	r0, [r4], #773	; 0x305
    4acc:	c8190000 	ldmdagt	r9, {}	; <UNPREDICTABLE>
    4ad0:	0100000b 	tsteq	r0, fp
    4ad4:	00013329 	andeq	r3, r1, r9, lsr #6
    4ad8:	80030500 	andhi	r0, r3, r0, lsl #10
    4adc:	190000a4 	stmdbne	r0, {r2, r5, r7}
    4ae0:	00000c20 	andeq	r0, r0, r0, lsr #24
    4ae4:	01332a01 	teqeq	r3, r1, lsl #20
    4ae8:	03050000 	movweq	r0, #20480	; 0x5000
    4aec:	0000a47c 	andeq	sl, r0, ip, ror r4
    4af0:	000b3619 	andeq	r3, fp, r9, lsl r6
    4af4:	332c0100 	teqcc	ip, #0, 2
    4af8:	05000001 	streq	r0, [r0, #-1]
    4afc:	00a42803 	adceq	r2, r4, r3, lsl #16
    4b00:	0b3e1900 	bleq	f8af08 <__bss_end__+0xf7fd98>
    4b04:	2d010000 	stccs	0, cr0, [r1, #-0]
    4b08:	00000133 	andeq	r0, r0, r3, lsr r1
    4b0c:	a42c0305 	strtge	r0, [ip], #-773	; 0x305
    4b10:	bb190000 	bllt	644b18 <__bss_end__+0x6399a8>
    4b14:	0100000a 	tsteq	r0, sl
    4b18:	0001332e 	andeq	r3, r1, lr, lsr #6
    4b1c:	30030500 	andcc	r0, r3, r0, lsl #10
    4b20:	190000a4 	stmdbne	r0, {r2, r5, r7}
    4b24:	00000b46 	andeq	r0, r0, r6, asr #22
    4b28:	01332f01 	teqeq	r3, r1, lsl #30
    4b2c:	03050000 	movweq	r0, #20480	; 0x5000
    4b30:	0000a434 	andeq	sl, r0, r4, lsr r4
    4b34:	000b4e19 	andeq	r4, fp, r9, lsl lr
    4b38:	33300100 	teqcc	r0, #0, 2
    4b3c:	05000001 	streq	r0, [r0, #-1]
    4b40:	00a43803 	adceq	r3, r4, r3, lsl #16
    4b44:	0b561900 	bleq	158af4c <__bss_end__+0x157fddc>
    4b48:	31010000 	mrscc	r0, (UNDEF: 1)
    4b4c:	00000133 	andeq	r0, r0, r3, lsr r1
    4b50:	a43c0305 	ldrtge	r0, [ip], #-773	; 0x305
    4b54:	08190000 	ldmdaeq	r9, {}	; <UNPREDICTABLE>
    4b58:	0100000b 	tsteq	r0, fp
    4b5c:	00013333 	andeq	r3, r1, r3, lsr r3
    4b60:	40030500 	andmi	r0, r3, r0, lsl #10
    4b64:	190000a4 	stmdbne	r0, {r2, r5, r7}
    4b68:	00000b0f 	andeq	r0, r0, pc, lsl #22
    4b6c:	01333401 	teqeq	r3, r1, lsl #8
    4b70:	03050000 	movweq	r0, #20480	; 0x5000
    4b74:	0000a444 	andeq	sl, r0, r4, asr #8
    4b78:	000ac319 	andeq	ip, sl, r9, lsl r3
    4b7c:	33360100 	teqcc	r6, #0, 2
    4b80:	05000001 	streq	r0, [r0, #-1]
    4b84:	00a44803 	adceq	r4, r4, r3, lsl #16
    4b88:	0b691900 	bleq	1a4af90 <__bss_end__+0x1a3fe20>
    4b8c:	37010000 	strcc	r0, [r1, -r0]
    4b90:	00000133 	andeq	r0, r0, r3, lsr r1
    4b94:	a44c0305 	strbge	r0, [ip], #-773	; 0x305
    4b98:	1f190000 	svcne	0x00190000
    4b9c:	0100000b 	tsteq	r0, fp
    4ba0:	00013339 	andeq	r3, r1, r9, lsr r3
    4ba4:	50030500 	andpl	r0, r3, r0, lsl #10
    4ba8:	190000a4 	stmdbne	r0, {r2, r5, r7}
    4bac:	00000b26 	andeq	r0, r0, r6, lsr #22
    4bb0:	01333a01 	teqeq	r3, r1, lsl #20
    4bb4:	03050000 	movweq	r0, #20480	; 0x5000
    4bb8:	0000a454 	andeq	sl, r0, r4, asr r4
    4bbc:	000ba419 	andeq	sl, fp, r9, lsl r4
    4bc0:	33f00100 	mvnscc	r0, #0, 2
    4bc4:	05000001 	streq	r0, [r0, #-1]
    4bc8:	00a47803 	adceq	r7, r4, r3, lsl #16
    4bcc:	0bb21900 	bleq	fec8afd4 <__bss_end__+0xfec7fe64>
    4bd0:	f1010000 	setend	le
    4bd4:	00000133 	andeq	r0, r0, r3, lsr r1
    4bd8:	a4580305 	ldrbge	r0, [r8], #-773	; 0x305
    4bdc:	d7190000 	ldrle	r0, [r9, -r0]
    4be0:	0100000b 	tsteq	r0, fp
    4be4:	000133f3 	strdeq	r3, [r1], -r3	; <UNPREDICTABLE>
    4be8:	70030500 	andvc	r0, r3, r0, lsl #10
    4bec:	190000a4 	stmdbne	r0, {r2, r5, r7}
    4bf0:	00000bde 	ldrdeq	r0, [r0], -lr
    4bf4:	0133f401 	teqeq	r3, r1, lsl #8
    4bf8:	03050000 	movweq	r0, #20480	; 0x5000
    4bfc:	0000a474 	andeq	sl, r0, r4, ror r4
    4c00:	000b8519 	andeq	r8, fp, r9, lsl r5
    4c04:	33f60100 	mvnscc	r0, #0, 2
    4c08:	05000001 	streq	r0, [r0, #-1]
    4c0c:	00a45c03 	adceq	r5, r4, r3, lsl #24
    4c10:	0b8c1900 	bleq	fe30b018 <__bss_end__+0xfe2ffea8>
    4c14:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    4c18:	00000133 	andeq	r0, r0, r3, lsr r1
    4c1c:	a4600305 	strbtge	r0, [r0], #-773	; 0x305
    4c20:	f1190000 			; <UNDEFINED> instruction: 0xf1190000
    4c24:	0100000b 	tsteq	r0, fp
    4c28:	000133f9 	strdeq	r3, [r1], -r9
    4c2c:	68030500 	stmdavs	r3, {r8, sl}
    4c30:	190000a4 	stmdbne	r0, {r2, r5, r7}
    4c34:	00000bf8 	strdeq	r0, [r0], -r8
    4c38:	0133fa01 	teqeq	r3, r1, lsl #20
    4c3c:	03050000 	movweq	r0, #20480	; 0x5000
    4c40:	0000a46c 	andeq	sl, r0, ip, ror #8
    4c44:	000aca19 	andeq	ip, sl, r9, lsl sl
    4c48:	33fc0100 	mvnscc	r0, #0, 2
    4c4c:	05000001 	streq	r0, [r0, #-1]
    4c50:	00a46403 	adceq	r6, r4, r3, lsl #8
    4c54:	0aa11a00 	beq	fe84b45c <__bss_end__+0xfe8402ec>
    4c58:	20010000 	andcs	r0, r1, r0
    4c5c:	0000002c 	andeq	r0, r0, ip, lsr #32
    4c60:	000007f5 	strdeq	r0, [r0], -r5
    4c64:	0007f51b 	andeq	pc, r7, fp, lsl r5	; <UNPREDICTABLE>
    4c68:	040d0000 	streq	r0, [sp], #-0
    4c6c:	000007fb 	strdeq	r0, [r0], -fp
    4c70:	0008001c 	andeq	r0, r8, ip, lsl r0
    4c74:	c21e1d00 	andsgt	r1, lr, #0, 26
    4c78:	01000009 	tsteq	r0, r9
    4c7c:	0008171e 	andeq	r1, r8, lr, lsl r7
    4c80:	08171b00 	ldmdaeq	r7, {r8, r9, fp, ip}
    4c84:	2c1b0000 	ldccs	0, cr0, [fp], {-0}
    4c88:	00000000 	andeq	r0, r0, r0
    4c8c:	0800040d 	stmdaeq	r0, {r0, r2, r3, sl}
    4c90:	5a1f0000 	bpl	7c4c98 <__bss_end__+0x7b9b28>
    4c94:	03000009 	movweq	r0, #9
    4c98:	01c3008a 	biceq	r0, r3, sl, lsl #1
    4c9c:	00040000 	andeq	r0, r4, r0
    4ca0:	000016fd 	strdeq	r1, [r0], -sp
    4ca4:	000b0104 	andeq	r0, fp, r4, lsl #2
    4ca8:	31010000 	mrscc	r0, (UNDEF: 1)
    4cac:	ed00000c 	stc	0, cr0, [r0, #-48]	; 0xffffffd0
    4cb0:	98000003 	stmdals	r0, {r0, r1}
    4cb4:	500000a3 	andpl	r0, r0, r3, lsr #1
    4cb8:	9a000000 	bls	4cc0 <_start-0x3340>
    4cbc:	02000014 	andeq	r0, r0, #20
    4cc0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    4cc4:	4a030074 	bmi	c4e9c <__bss_end__+0xb9d2c>
    4cc8:	02000003 	andeq	r0, r0, #3
    4ccc:	000037d4 	ldrdeq	r3, [r0], -r4
    4cd0:	07040400 	streq	r0, [r4, -r0, lsl #8]
    4cd4:	00000176 	andeq	r0, r0, r6, ror r1
    4cd8:	76060104 	strvc	r0, [r6], -r4, lsl #2
    4cdc:	04000000 	streq	r0, [r0], #-0
    4ce0:	01c70502 	biceq	r0, r7, r2, lsl #10
    4ce4:	04040000 	streq	r0, [r4], #-0
    4ce8:	0001b305 	andeq	fp, r1, r5, lsl #6
    4cec:	05080400 	streq	r0, [r8, #-1024]	; 0x400
    4cf0:	000001ae 	andeq	r0, r0, lr, lsr #3
    4cf4:	0005f703 	andeq	pc, r5, r3, lsl #14
    4cf8:	652e0300 	strvs	r0, [lr, #-768]!	; 0x300
    4cfc:	04000000 	streq	r0, [r0], #-0
    4d00:	00740801 	rsbseq	r0, r4, r1, lsl #16
    4d04:	02040000 	andeq	r0, r4, #0
    4d08:	0000f307 	andeq	pc, r0, r7, lsl #6
    4d0c:	01d10300 	bicseq	r0, r1, r0, lsl #6
    4d10:	34030000 	strcc	r0, [r3], #-0
    4d14:	0000007e 	andeq	r0, r0, lr, ror r0
    4d18:	71070404 	tstvc	r7, r4, lsl #8
    4d1c:	04000001 	streq	r0, [r0], #-1
    4d20:	016c0708 	cmneq	ip, r8, lsl #14
    4d24:	04040000 	streq	r0, [r4], #-0
    4d28:	0001a507 	andeq	sl, r1, r7, lsl #10
    4d2c:	04040500 	streq	r0, [r4], #-1280	; 0x500
    4d30:	007d0801 	rsbseq	r0, sp, r1, lsl #16
    4d34:	0c060000 	stceq	0, cr0, [r6], {-0}
    4d38:	00d30e04 	sbcseq	r0, r3, r4, lsl #28
    4d3c:	74070000 	strvc	r0, [r7], #-0
    4d40:	0f040078 	svceq	0x00040078
    4d44:	0000005a 	andeq	r0, r0, sl, asr r0
    4d48:	78720700 	ldmdavc	r2!, {r8, r9, sl}^
    4d4c:	5a0f0400 	bpl	3c5d54 <__bss_end__+0x3babe4>
    4d50:	01000000 	mrseq	r0, (UNDEF: 0)
    4d54:	0005c508 	andeq	ip, r5, r8, lsl #10
    4d58:	73100400 	tstvc	r0, #0, 8
    4d5c:	04000000 	streq	r0, [r0], #-0
    4d60:	00057608 	andeq	r7, r5, r8, lsl #12
    4d64:	73110400 	tstvc	r1, #0, 8
    4d68:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4d6c:	05ae0300 	streq	r0, [lr, #768]!	; 0x300
    4d70:	12040000 	andne	r0, r4, #0
    4d74:	0000009c 	muleq	r0, ip, r0
    4d78:	10050109 	andne	r0, r5, r9, lsl #2
    4d7c:	000000f9 	strdeq	r0, [r0], -r9
    4d80:	0005ca0a 	andeq	ip, r5, sl, lsl #20
    4d84:	b80a0100 	stmdalt	sl, {r8}
    4d88:	02000005 	andeq	r0, r0, #5
    4d8c:	0005a00a 	andeq	sl, r5, sl
    4d90:	03000300 	movweq	r0, #768	; 0x300
    4d94:	000005df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4d98:	00de1005 	sbcseq	r1, lr, r5
    4d9c:	14060000 	strne	r0, [r6], #-0
    4da0:	01311405 	teqeq	r1, r5, lsl #8
    4da4:	4e080000 	cdpmi	0, 0, cr0, cr8, cr0, {0}
    4da8:	05000006 	streq	r0, [r0, #-6]
    4dac:	00003715 	andeq	r3, r0, r5, lsl r7
    4db0:	42080000 	andmi	r0, r8, #0
    4db4:	05000006 	streq	r0, [r0, #-6]
    4db8:	0000f918 	andeq	pc, r0, r8, lsl r9	; <UNPREDICTABLE>
    4dbc:	0d080400 	cfstrseq	mvf0, [r8, #-0]
    4dc0:	05000006 	streq	r0, [r0, #-6]
    4dc4:	0000d31b 	andeq	sp, r0, fp, lsl r3
    4dc8:	03000800 	movweq	r0, #2048	; 0x800
    4dcc:	000005ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4dd0:	01042005 	tsteq	r4, r5
    4dd4:	2a0b0000 	bcs	2c4ddc <__bss_end__+0x2b9c6c>
    4dd8:	0100000c 	tsteq	r0, ip
    4ddc:	00017e05 	andeq	r7, r1, r5, lsl #28
    4de0:	00a39800 	adceq	r9, r3, r0, lsl #16
    4de4:	00002800 	andeq	r2, r0, r0, lsl #16
    4de8:	7e9c0100 	fmlvce	f0, f4, f0
    4dec:	0c000001 	stceq	0, cr0, [r0], {1}
    4df0:	06010063 	streq	r0, [r1], -r3, rrx
    4df4:	0000017e 	andeq	r0, r0, lr, ror r1
    4df8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    4dfc:	00a3ac0d 	adceq	sl, r3, sp, lsl #24
    4e00:	0001ab00 	andeq	sl, r1, r0, lsl #22
    4e04:	52010e00 	andpl	r0, r1, #0, 28
    4e08:	010e3401 	tsteq	lr, r1, lsl #8
    4e0c:	0e300151 	mrceq	1, 1, r0, cr0, cr1, {2}
    4e10:	42035001 	andmi	r5, r3, #1
    4e14:	00002447 	andeq	r2, r0, r7, asr #8
    4e18:	0131040f 	teqeq	r1, pc, lsl #8
    4e1c:	150b0000 	strne	r0, [fp, #-0]
    4e20:	01000006 	tsteq	r0, r6
    4e24:	00017e0c 	andeq	r7, r1, ip, lsl #28
    4e28:	00a3c000 	adceq	ip, r3, r0
    4e2c:	00002800 	andeq	r2, r0, r0, lsl #16
    4e30:	ab9c0100 	blge	fe705238 <__bss_end__+0xfe6fa0c8>
    4e34:	0c000001 	stceq	0, cr0, [r0], {1}
    4e38:	0d010063 	stceq	0, cr0, [r1, #-396]	; 0xfffffe74
    4e3c:	0000017e 	andeq	r0, r0, lr, ror r1
    4e40:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    4e44:	03711000 	cmneq	r1, #0
    4e48:	1b060000 	blne	184e50 <__bss_end__+0x179ce0>
    4e4c:	00000093 	muleq	r0, r3, r0
    4e50:	00009311 	andeq	r9, r0, r1, lsl r3
    4e54:	00251100 	eoreq	r1, r5, r0, lsl #2
    4e58:	2c110000 	ldccs	0, cr0, [r1], {-0}
    4e5c:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	110e1b0e 	tstne	lr, lr, lsl #22
       c:	10061201 	andne	r1, r6, r1, lsl #4
      10:	02000017 	andeq	r0, r0, #23
      14:	0b0b0024 	bleq	2c00ac <__bss_end__+0x2b4f3c>
      18:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
      1c:	24030000 	strcs	r0, [r3], #-0
      20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
      24:	000e030b 	andeq	r0, lr, fp, lsl #6
      28:	00160400 	andseq	r0, r6, r0, lsl #8
      2c:	0b3a0e03 	bleq	e83840 <__bss_end__+0xe786d0>
      30:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      34:	0f050000 	svceq	0x00050000
      38:	000b0b00 	andeq	r0, fp, r0, lsl #22
      3c:	000f0600 	andeq	r0, pc, r0, lsl #12
      40:	13490b0b 	movtne	r0, #39691	; 0x9b0b
      44:	26070000 	strcs	r0, [r7], -r0
      48:	00134900 	andseq	r4, r3, r0, lsl #18
      4c:	01010800 	tsteq	r1, r0, lsl #16
      50:	13011349 	movwne	r1, #4937	; 0x1349
      54:	21090000 	mrscs	r0, (UNDEF: 9)
      58:	2f134900 	svccs	0x00134900
      5c:	0a00000b 	beq	90 <_start-0x7f70>
      60:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
      64:	0b3a050b 	bleq	e81498 <__bss_end__+0xe76328>
      68:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      6c:	0d0b0000 	stceq	0, cr0, [fp, #-0]
      70:	3a0e0300 	bcc	380c78 <__bss_end__+0x375b08>
      74:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      78:	000b3813 	andeq	r3, fp, r3, lsl r8
      7c:	000d0c00 	andeq	r0, sp, r0, lsl #24
      80:	0b3a0803 	bleq	e82094 <__bss_end__+0xe76f24>
      84:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      88:	00000b38 	andeq	r0, r0, r8, lsr fp
      8c:	2701150d 	strcs	r1, [r1, -sp, lsl #10]
      90:	00130119 	andseq	r0, r3, r9, lsl r1
      94:	00050e00 	andeq	r0, r5, r0, lsl #28
      98:	00001349 	andeq	r1, r0, r9, asr #6
      9c:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
      a0:	00052f13 	andeq	r2, r5, r3, lsl pc
      a4:	012e1000 	teqeq	lr, r0
      a8:	0b3a0e03 	bleq	e838bc <__bss_end__+0xe7874c>
      ac:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
      b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
      b4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
      b8:	00130119 	andseq	r0, r3, r9, lsl r1
      bc:	00051100 	andeq	r1, r5, r0, lsl #2
      c0:	0b3a0803 	bleq	e820d4 <__bss_end__+0xe76f64>
      c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      c8:	00001702 	andeq	r1, r0, r2, lsl #14
      cc:	03003412 	movweq	r3, #1042	; 0x412
      d0:	3b0b3a08 	blcc	2ce8f8 <__bss_end__+0x2c3788>
      d4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
      d8:	13000017 	movwne	r0, #23
      dc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
      e0:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
      e4:	00001802 	andeq	r1, r0, r2, lsl #16
      e8:	01828914 	orreq	r8, r2, r4, lsl r9
      ec:	31011100 	mrscc	r1, (UNDEF: 17)
      f0:	15000013 	strne	r0, [r0, #-19]
      f4:	01018289 	smlabbeq	r1, r9, r2, r8
      f8:	13310111 	teqne	r1, #1073741828	; 0x40000004
      fc:	00001301 	andeq	r1, r0, r1, lsl #6
     100:	01828a16 	orreq	r8, r2, r6, lsl sl
     104:	91180200 	tstls	r8, r0, lsl #4
     108:	00001842 	andeq	r1, r0, r2, asr #16
     10c:	01828917 	orreq	r8, r2, r7, lsl r9
     110:	31011101 	tstcc	r1, r1, lsl #2
     114:	18000013 	stmdane	r0, {r0, r1, r4}
     118:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     11c:	0b3a0e03 	bleq	e83930 <__bss_end__+0xe787c0>
     120:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     124:	06120111 			; <UNDEFINED> instruction: 0x06120111
     128:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     12c:	00130119 	andseq	r0, r3, r9, lsl r1
     130:	00341900 	eorseq	r1, r4, r0, lsl #18
     134:	0b3a0803 	bleq	e82148 <__bss_end__+0xe76fd8>
     138:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     13c:	00000b1c 	andeq	r0, r0, ip, lsl fp
     140:	11010b1a 	tstne	r1, sl, lsl fp
     144:	01061201 	tsteq	r6, r1, lsl #4
     148:	1b000013 	blne	19c <_start-0x7e64>
     14c:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
     150:	341c0000 	ldrcc	r0, [ip], #-0
     154:	3a0e0300 	bcc	380d5c <__bss_end__+0x375bec>
     158:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     15c:	00180213 	andseq	r0, r8, r3, lsl r2
     160:	002e1d00 	eoreq	r1, lr, r0, lsl #26
     164:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     168:	0b3b0b3a 	bleq	ec2e58 <__bss_end__+0xeb7ce8>
     16c:	13491927 	movtne	r1, #39207	; 0x9927
     170:	0000193c 	andeq	r1, r0, ip, lsr r9
     174:	3f012e1e 	svccc	0x00012e1e
     178:	3a0e0319 	bcc	380de4 <__bss_end__+0x375c74>
     17c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     180:	3c134919 	ldccc	9, cr4, [r3], {25}
     184:	00130119 	andseq	r0, r3, r9, lsl r1
     188:	00181f00 	andseq	r1, r8, r0, lsl #30
     18c:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
     190:	03193f00 	tsteq	r9, #0, 30
     194:	3b0b3a0e 	blcc	2ce9d4 <__bss_end__+0x2c3864>
     198:	3c19270b 	ldccc	7, cr2, [r9], {11}
     19c:	21000019 	tstcs	r0, r9, lsl r0
     1a0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     1a4:	0b3a0e03 	bleq	e839b8 <__bss_end__+0xe78848>
     1a8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     1ac:	1301193c 	movwne	r1, #6460	; 0x193c
     1b0:	01000000 	mrseq	r0, (UNDEF: 0)
     1b4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     1b8:	0e030b13 	vmoveq.32	d3[0], r0
     1bc:	01110e1b 	tsteq	r1, fp, lsl lr
     1c0:	17100612 			; <UNDEFINED> instruction: 0x17100612
     1c4:	24020000 	strcs	r0, [r2], #-0
     1c8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     1cc:	0008030b 	andeq	r0, r8, fp, lsl #6
     1d0:	00240300 	eoreq	r0, r4, r0, lsl #6
     1d4:	0b3e0b0b 	bleq	f82e08 <__bss_end__+0xf77c98>
     1d8:	00000e03 	andeq	r0, r0, r3, lsl #28
     1dc:	03001604 	movweq	r1, #1540	; 0x604
     1e0:	3b0b3a0e 	blcc	2cea20 <__bss_end__+0x2c38b0>
     1e4:	0013490b 	andseq	r4, r3, fp, lsl #18
     1e8:	000f0500 	andeq	r0, pc, r0, lsl #10
     1ec:	00000b0b 	andeq	r0, r0, fp, lsl #22
     1f0:	0b000f06 	bleq	3e10 <_start-0x41f0>
     1f4:	0013490b 	andseq	r4, r3, fp, lsl #18
     1f8:	00260700 	eoreq	r0, r6, r0, lsl #14
     1fc:	00001349 	andeq	r1, r0, r9, asr #6
     200:	49010108 	stmdbmi	r1, {r3, r8}
     204:	00130113 	andseq	r0, r3, r3, lsl r1
     208:	00210900 	eoreq	r0, r1, r0, lsl #18
     20c:	0b2f1349 	bleq	bc4f38 <__bss_end__+0xbb9dc8>
     210:	130a0000 	movwne	r0, #40960	; 0xa000
     214:	0b0e0301 	bleq	380e20 <__bss_end__+0x375cb0>
     218:	3b0b3a05 	blcc	2cea34 <__bss_end__+0x2c38c4>
     21c:	0013010b 	andseq	r0, r3, fp, lsl #2
     220:	000d0b00 	andeq	r0, sp, r0, lsl #22
     224:	0b3a0e03 	bleq	e83a38 <__bss_end__+0xe788c8>
     228:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     22c:	00000b38 	andeq	r0, r0, r8, lsr fp
     230:	03000d0c 	movweq	r0, #3340	; 0xd0c
     234:	3b0b3a08 	blcc	2cea5c <__bss_end__+0x2c38ec>
     238:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     23c:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
     240:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     244:	00001301 	andeq	r1, r0, r1, lsl #6
     248:	4900050e 	stmdbmi	r0, {r1, r2, r3, r8, sl}
     24c:	0f000013 	svceq	0x00000013
     250:	13490021 	movtne	r0, #36897	; 0x9021
     254:	0000052f 	andeq	r0, r0, pc, lsr #10
     258:	03011310 	movweq	r1, #4880	; 0x1310
     25c:	3a0b0b08 	bcc	2c2e84 <__bss_end__+0x2b7d14>
     260:	010b3b0b 	tsteq	fp, fp, lsl #22
     264:	11000013 	tstne	r0, r3, lsl r0
     268:	08030016 	stmdaeq	r3, {r1, r2, r4}
     26c:	0b3b0b3a 	bleq	ec2f5c <__bss_end__+0xeb7dec>
     270:	00001349 	andeq	r1, r0, r9, asr #6
     274:	03012e12 	movweq	r2, #7698	; 0x1e12
     278:	3b0b3a0e 	blcc	2ceab8 <__bss_end__+0x2c3948>
     27c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     280:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     284:	97184006 	ldrls	r4, [r8, -r6]
     288:	13011942 	movwne	r1, #6466	; 0x1942
     28c:	05130000 	ldreq	r0, [r3, #-0]
     290:	3a080300 	bcc	200e98 <__bss_end__+0x1f5d28>
     294:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     298:	00170213 	andseq	r0, r7, r3, lsl r2
     29c:	012e1400 	teqeq	lr, r0, lsl #8
     2a0:	0b3a0e03 	bleq	e83ab4 <__bss_end__+0xe78944>
     2a4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     2a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     2ac:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     2b0:	00130119 	andseq	r0, r3, r9, lsl r1
     2b4:	00051500 	andeq	r1, r5, r0, lsl #10
     2b8:	0b3a0803 	bleq	e822cc <__bss_end__+0xe7715c>
     2bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     2c0:	00001802 	andeq	r1, r0, r2, lsl #16
     2c4:	01828916 	orreq	r8, r2, r6, lsl r9
     2c8:	31011101 	tstcc	r1, r1, lsl #2
     2cc:	17000013 	smladne	r0, r3, r0, r0
     2d0:	0001828a 	andeq	r8, r1, sl, lsl #5
     2d4:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     2d8:	18000018 	stmdane	r0, {r3, r4}
     2dc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     2e0:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
     2e4:	00001802 	andeq	r1, r0, r2, lsl #16
     2e8:	01828919 	orreq	r8, r2, r9, lsl r9
     2ec:	31011101 	tstcc	r1, r1, lsl #2
     2f0:	00130113 	andseq	r0, r3, r3, lsl r1
     2f4:	82891a00 	addhi	r1, r9, #0, 20
     2f8:	01110001 	tsteq	r1, r1
     2fc:	00001331 	andeq	r1, r0, r1, lsr r3
     300:	0300341b 	movweq	r3, #1051	; 0x41b
     304:	3b0b3a08 	blcc	2ceb2c <__bss_end__+0x2c39bc>
     308:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     30c:	1c000017 	stcne	0, cr0, [r0], {23}
     310:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     314:	0b3a0e03 	bleq	e83b28 <__bss_end__+0xe789b8>
     318:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     31c:	01111349 	tsteq	r1, r9, asr #6
     320:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     324:	00194297 	mulseq	r9, r7, r2
     328:	012e1d00 	teqeq	lr, r0, lsl #26
     32c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     330:	0b3b0b3a 	bleq	ec3020 <__bss_end__+0xeb7eb0>
     334:	13491927 	movtne	r1, #39207	; 0x9927
     338:	06120111 			; <UNDEFINED> instruction: 0x06120111
     33c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     340:	00130119 	andseq	r0, r3, r9, lsl r1
     344:	00051e00 	andeq	r1, r5, r0, lsl #28
     348:	0b3a0e03 	bleq	e83b5c <__bss_end__+0xe789ec>
     34c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     350:	00001702 	andeq	r1, r0, r2, lsl #14
     354:	3f002e1f 	svccc	0x00002e1f
     358:	3a0e0319 	bcc	380fc4 <__bss_end__+0x375e54>
     35c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     360:	00193c19 	andseq	r3, r9, r9, lsl ip
     364:	012e2000 	teqeq	lr, r0
     368:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     36c:	0b3b0b3a 	bleq	ec305c <__bss_end__+0xeb7eec>
     370:	01111927 	tsteq	r1, r7, lsr #18
     374:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     378:	01194297 			; <UNDEFINED> instruction: 0x01194297
     37c:	21000013 	tstcs	r0, r3, lsl r0
     380:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     384:	0b3b0b3a 	bleq	ec3074 <__bss_end__+0xeb7f04>
     388:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     38c:	34220000 	strtcc	r0, [r2], #-0
     390:	3a0e0300 	bcc	380f98 <__bss_end__+0x375e28>
     394:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     398:	23000013 	movwcs	r0, #19
     39c:	0111010b 	tsteq	r1, fp, lsl #2
     3a0:	13010612 	movwne	r0, #5650	; 0x1612
     3a4:	34240000 	strtcc	r0, [r4], #-0
     3a8:	3a0e0300 	bcc	380fb0 <__bss_end__+0x375e40>
     3ac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3b0:	00170213 	andseq	r0, r7, r3, lsl r2
     3b4:	00342500 	eorseq	r2, r4, r0, lsl #10
     3b8:	0b3a0803 	bleq	e823cc <__bss_end__+0xe7725c>
     3bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     3c0:	00001802 	andeq	r1, r0, r2, lsl #16
     3c4:	3f012e26 	svccc	0x00012e26
     3c8:	3a0e0319 	bcc	381034 <__bss_end__+0x375ec4>
     3cc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     3d0:	3c134919 	ldccc	9, cr4, [r3], {25}
     3d4:	00130119 	andseq	r0, r3, r9, lsl r1
     3d8:	00182700 	andseq	r2, r8, r0, lsl #14
     3dc:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
     3e0:	03193f01 	tsteq	r9, #1, 30
     3e4:	3b0b3a0e 	blcc	2cec24 <__bss_end__+0x2c3ab4>
     3e8:	3c19270b 	ldccc	7, cr2, [r9], {11}
     3ec:	00130119 	andseq	r0, r3, r9, lsl r1
     3f0:	11010000 	mrsne	r0, (UNDEF: 1)
     3f4:	130e2501 	movwne	r2, #58625	; 0xe501
     3f8:	1b0e030b 	blne	38102c <__bss_end__+0x375ebc>
     3fc:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     400:	00171006 	andseq	r1, r7, r6
     404:	00240200 	eoreq	r0, r4, r0, lsl #4
     408:	0b3e0b0b 	bleq	f8303c <__bss_end__+0xf77ecc>
     40c:	00000803 	andeq	r0, r0, r3, lsl #16
     410:	03001603 	movweq	r1, #1539	; 0x603
     414:	3b0b3a0e 	blcc	2cec54 <__bss_end__+0x2c3ae4>
     418:	0013490b 	andseq	r4, r3, fp, lsl #18
     41c:	00240400 	eoreq	r0, r4, r0, lsl #8
     420:	0b3e0b0b 	bleq	f83054 <__bss_end__+0xf77ee4>
     424:	00000e03 	andeq	r0, r0, r3, lsl #28
     428:	0b000f05 	bleq	4044 <_start-0x3fbc>
     42c:	0600000b 	streq	r0, [r0], -fp
     430:	0b0b000f 	bleq	2c0474 <__bss_end__+0x2b5304>
     434:	00001349 	andeq	r1, r0, r9, asr #6
     438:	49002607 	stmdbmi	r0, {r0, r1, r2, r9, sl, sp}
     43c:	08000013 	stmdaeq	r0, {r0, r1, r4}
     440:	13490101 	movtne	r0, #37121	; 0x9101
     444:	00001301 	andeq	r1, r0, r1, lsl #6
     448:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
     44c:	000b2f13 	andeq	r2, fp, r3, lsl pc
     450:	01130a00 	tsteq	r3, r0, lsl #20
     454:	0b3a050b 	bleq	e81888 <__bss_end__+0xe76718>
     458:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     45c:	0d0b0000 	stceq	0, cr0, [fp, #-0]
     460:	3a0e0300 	bcc	381068 <__bss_end__+0x375ef8>
     464:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     468:	000b3813 	andeq	r3, fp, r3, lsl r8
     46c:	000d0c00 	andeq	r0, sp, r0, lsl #24
     470:	0b3a0e03 	bleq	e83c84 <__bss_end__+0xe78b14>
     474:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     478:	00000538 	andeq	r0, r0, r8, lsr r5
     47c:	03000d0d 	movweq	r0, #3341	; 0xd0d
     480:	3b0b3a0e 	blcc	2cecc0 <__bss_end__+0x2c3b50>
     484:	0b13490b 	bleq	4d28b8 <__bss_end__+0x4c7748>
     488:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
     48c:	0005380b 	andeq	r3, r5, fp, lsl #16
     490:	00210e00 	eoreq	r0, r1, r0, lsl #28
     494:	052f1349 	streq	r1, [pc, #-841]!	; 153 <_start-0x7ead>
     498:	350f0000 	strcc	r0, [pc, #-0]	; 4a0 <_start-0x7b60>
     49c:	00134900 	andseq	r4, r3, r0, lsl #18
     4a0:	012e1000 	teqeq	lr, r0
     4a4:	0b3a0e03 	bleq	e83cb8 <__bss_end__+0xe78b48>
     4a8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     4ac:	0b201349 	bleq	8051d8 <__bss_end__+0x7fa068>
     4b0:	00001301 	andeq	r1, r0, r1, lsl #6
     4b4:	03000511 	movweq	r0, #1297	; 0x511
     4b8:	3b0b3a08 	blcc	2cece0 <__bss_end__+0x2c3b70>
     4bc:	0013490b 	andseq	r4, r3, fp, lsl #18
     4c0:	00341200 	eorseq	r1, r4, r0, lsl #4
     4c4:	0b3a0e03 	bleq	e83cd8 <__bss_end__+0xe78b68>
     4c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     4cc:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
     4d0:	03193f01 	tsteq	r9, #1, 30
     4d4:	3b0b3a0e 	blcc	2ced14 <__bss_end__+0x2c3ba4>
     4d8:	1119270b 	tstne	r9, fp, lsl #14
     4dc:	40061201 	andmi	r1, r6, r1, lsl #4
     4e0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     4e4:	00001301 	andeq	r1, r0, r1, lsl #6
     4e8:	03000514 	movweq	r0, #1300	; 0x514
     4ec:	3b0b3a08 	blcc	2ced14 <__bss_end__+0x2c3ba4>
     4f0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     4f4:	15000017 	strne	r0, [r0, #-23]
     4f8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     4fc:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
     500:	00001802 	andeq	r1, r0, r2, lsl #16
     504:	31011d16 	tstcc	r1, r6, lsl sp
     508:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     50c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     510:	0013010b 	andseq	r0, r3, fp, lsl #2
     514:	00051700 	andeq	r1, r5, r0, lsl #14
     518:	17021331 	smladxne	r2, r1, r3, r1
     51c:	89180000 	ldmdbhi	r8, {}	; <UNPREDICTABLE>
     520:	11010182 	smlabbne	r1, r2, r1, r0
     524:	00133101 	andseq	r3, r3, r1, lsl #2
     528:	828a1900 	addhi	r1, sl, #0, 18
     52c:	18020001 	stmdane	r2, {r0}
     530:	00184291 	mulseq	r8, r1, r2
     534:	82891a00 	addhi	r1, r9, #0, 20
     538:	01110001 	tsteq	r1, r1
     53c:	00001331 	andeq	r1, r0, r1, lsr r3
     540:	0182891b 	orreq	r8, r2, fp, lsl r9
     544:	31011101 	tstcc	r1, r1, lsl #2
     548:	00130113 	andseq	r0, r3, r3, lsl r1
     54c:	00051c00 	andeq	r1, r5, r0, lsl #24
     550:	0b3a0e03 	bleq	e83d64 <__bss_end__+0xe78bf4>
     554:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     558:	00001702 	andeq	r1, r0, r2, lsl #14
     55c:	0300341d 	movweq	r3, #1053	; 0x41d
     560:	3b0b3a08 	blcc	2ced88 <__bss_end__+0x2c3c18>
     564:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     568:	1e000017 	mcrne	0, 0, r0, cr0, cr7, {0}
     56c:	13310005 	teqne	r1, #5
     570:	00001802 	andeq	r1, r0, r2, lsl #16
     574:	31011d1f 	tstcc	r1, pc, lsl sp
     578:	55015213 	strpl	r5, [r1, #-531]	; 0x213
     57c:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
     580:	0013010b 	andseq	r0, r3, fp, lsl #2
     584:	010b2000 	mrseq	r2, (UNDEF: 11)
     588:	00001755 	andeq	r1, r0, r5, asr r7
     58c:	31003421 	tstcc	r0, r1, lsr #8
     590:	00170213 	andseq	r0, r7, r3, lsl r2
     594:	011d2200 	tsteq	sp, r0, lsl #4
     598:	01111331 	tsteq	r1, r1, lsr r3
     59c:	0b580612 	bleq	1601dec <__bss_end__+0x15f6c7c>
     5a0:	00000b59 	andeq	r0, r0, r9, asr fp
     5a4:	3f012e23 	svccc	0x00012e23
     5a8:	3a0e0319 	bcc	381214 <__bss_end__+0x3760a4>
     5ac:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     5b0:	11134919 	tstne	r3, r9, lsl r9
     5b4:	40061201 	andmi	r1, r6, r1, lsl #4
     5b8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     5bc:	00001301 	andeq	r1, r0, r1, lsl #6
     5c0:	11010b24 	tstne	r1, r4, lsr #22
     5c4:	00061201 	andeq	r1, r6, r1, lsl #4
     5c8:	011d2500 	tsteq	sp, r0, lsl #10
     5cc:	01521331 	cmpeq	r2, r1, lsr r3
     5d0:	0b581755 	bleq	160632c <__bss_end__+0x15fb1bc>
     5d4:	00000b59 	andeq	r0, r0, r9, asr fp
     5d8:	03003426 	movweq	r3, #1062	; 0x426
     5dc:	3b0b3a08 	blcc	2cee04 <__bss_end__+0x2c3c94>
     5e0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     5e4:	27000018 	smladcs	r0, r8, r0, r0
     5e8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     5ec:	0b3b0b3a 	bleq	ec32dc <__bss_end__+0xeb816c>
     5f0:	17021349 	strne	r1, [r2, -r9, asr #6]
     5f4:	0b280000 	bleq	a005fc <__bss_end__+0x9f548c>
     5f8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     5fc:	00130106 	andseq	r0, r3, r6, lsl #2
     600:	00342900 	eorseq	r2, r4, r0, lsl #18
     604:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
     608:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
     60c:	03193f01 	tsteq	r9, #1, 30
     610:	3b0b3a0e 	blcc	2cee50 <__bss_end__+0x2c3ce0>
     614:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     618:	01193c13 	tsteq	r9, r3, lsl ip
     61c:	2b000013 	blcs	670 <_start-0x7990>
     620:	13490005 	movtne	r0, #36869	; 0x9005
     624:	182c0000 	stmdane	ip!, {}	; <UNPREDICTABLE>
     628:	2d000000 	stccs	0, cr0, [r0, #-0]
     62c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     630:	0b3a0e03 	bleq	e83e44 <__bss_end__+0xe78cd4>
     634:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     638:	0000193c 	andeq	r1, r0, ip, lsr r9
     63c:	3f012e2e 	svccc	0x00012e2e
     640:	3a0e0319 	bcc	3812ac <__bss_end__+0x37613c>
     644:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     648:	3c134919 	ldccc	9, cr4, [r3], {25}
     64c:	00000019 	andeq	r0, r0, r9, lsl r0
     650:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     654:	030b130e 	movweq	r1, #45838	; 0xb30e
     658:	110e1b0e 	tstne	lr, lr, lsl #22
     65c:	10061201 	andne	r1, r6, r1, lsl #4
     660:	02000017 	andeq	r0, r0, #23
     664:	0b0b0024 	bleq	2c06fc <__bss_end__+0x2b558c>
     668:	0e030b3e 	vmoveq.16	d3[0], r0
     66c:	24030000 	strcs	r0, [r3], #-0
     670:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     674:	0008030b 	andeq	r0, r8, fp, lsl #6
     678:	000f0400 	andeq	r0, pc, r0, lsl #8
     67c:	00000b0b 	andeq	r0, r0, fp, lsl #22
     680:	0b000f05 	bleq	429c <_start-0x3d64>
     684:	0013490b 	andseq	r4, r3, fp, lsl #18
     688:	00160600 	andseq	r0, r6, r0, lsl #12
     68c:	0b3a0e03 	bleq	e83ea0 <__bss_end__+0xe78d30>
     690:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     694:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
     698:	03193f01 	tsteq	r9, #1, 30
     69c:	3b0b3a0e 	blcc	2ceedc <__bss_end__+0x2c3d6c>
     6a0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     6a4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     6a8:	97184006 	ldrls	r4, [r8, -r6]
     6ac:	00001942 	andeq	r1, r0, r2, asr #18
     6b0:	03000508 	movweq	r0, #1288	; 0x508
     6b4:	3b0b3a08 	blcc	2ceedc <__bss_end__+0x2c3d6c>
     6b8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     6bc:	09000018 	stmdbeq	r0, {r3, r4}
     6c0:	08030005 	stmdaeq	r3, {r0, r2}
     6c4:	0b3b0b3a 	bleq	ec33b4 <__bss_end__+0xeb8244>
     6c8:	17021349 	strne	r1, [r2, -r9, asr #6]
     6cc:	340a0000 	strcc	r0, [sl], #-0
     6d0:	3a080300 	bcc	2012d8 <__bss_end__+0x1f6168>
     6d4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     6d8:	00170213 	andseq	r0, r7, r3, lsl r2
     6dc:	00340b00 	eorseq	r0, r4, r0, lsl #22
     6e0:	0b3a0803 	bleq	e826f4 <__bss_end__+0xe77584>
     6e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     6e8:	00001802 	andeq	r1, r0, r2, lsl #16
     6ec:	01110100 	tsteq	r1, r0, lsl #2
     6f0:	0b130e25 	bleq	4c3f8c <__bss_end__+0x4b8e1c>
     6f4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     6f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     6fc:	00001710 	andeq	r1, r0, r0, lsl r7
     700:	03001602 	movweq	r1, #1538	; 0x602
     704:	3b0b3a0e 	blcc	2cef44 <__bss_end__+0x2c3dd4>
     708:	0013490b 	andseq	r4, r3, fp, lsl #18
     70c:	01130300 	tsteq	r3, r0, lsl #6
     710:	0b0b0e03 	bleq	2c3f24 <__bss_end__+0x2b8db4>
     714:	0b3b0b3a 	bleq	ec3404 <__bss_end__+0xeb8294>
     718:	00001301 	andeq	r1, r0, r1, lsl #6
     71c:	03000d04 	movweq	r0, #3332	; 0xd04
     720:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
     724:	0019340b 	andseq	r3, r9, fp, lsl #8
     728:	000f0500 	andeq	r0, pc, r0, lsl #10
     72c:	00000b0b 	andeq	r0, r0, fp, lsl #22
     730:	0b002406 	bleq	9750 <sw_uart_putc+0xf8>
     734:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     738:	07000008 	streq	r0, [r0, -r8]
     73c:	0b0b0024 	bleq	2c07d4 <__bss_end__+0x2b5664>
     740:	0e030b3e 	vmoveq.16	d3[0], r0
     744:	0f080000 	svceq	0x00080000
     748:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     74c:	09000013 	stmdbeq	r0, {r0, r1, r4}
     750:	13490026 	movtne	r0, #36902	; 0x9026
     754:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
     758:	03193f01 	tsteq	r9, #1, 30
     75c:	3b0b3a0e 	blcc	2cef9c <__bss_end__+0x2c3e2c>
     760:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     764:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     768:	97184006 	ldrls	r4, [r8, -r6]
     76c:	13011942 	movwne	r1, #6466	; 0x1942
     770:	050b0000 	streq	r0, [fp, #-0]
     774:	3a080300 	bcc	20137c <__bss_end__+0x1f620c>
     778:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     77c:	00180213 	andseq	r0, r8, r3, lsl r2
     780:	00180c00 	andseq	r0, r8, r0, lsl #24
     784:	340d0000 	strcc	r0, [sp], #-0
     788:	3a080300 	bcc	201390 <__bss_end__+0x1f6220>
     78c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     790:	00180213 	andseq	r0, r8, r3, lsl r2
     794:	00340e00 	eorseq	r0, r4, r0, lsl #28
     798:	0b3a0e03 	bleq	e83fac <__bss_end__+0xe78e3c>
     79c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     7a0:	00001802 	andeq	r1, r0, r2, lsl #16
     7a4:	0300340f 	movweq	r3, #1039	; 0x40f
     7a8:	3b0b3a08 	blcc	2cefd0 <__bss_end__+0x2c3e60>
     7ac:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     7b0:	10000017 	andne	r0, r0, r7, lsl r0
     7b4:	01018289 	smlabbeq	r1, r9, r2, r8
     7b8:	13310111 	teqne	r1, #1073741828	; 0x40000004
     7bc:	00001301 	andeq	r1, r0, r1, lsl #6
     7c0:	01828a11 	orreq	r8, r2, r1, lsl sl
     7c4:	91180200 	tstls	r8, r0, lsl #4
     7c8:	00001842 	andeq	r1, r0, r2, asr #16
     7cc:	01828912 	orreq	r8, r2, r2, lsl r9
     7d0:	00011101 	andeq	r1, r1, r1, lsl #2
     7d4:	01011300 	mrseq	r1, SP_irq
     7d8:	13011349 	movwne	r1, #4937	; 0x1349
     7dc:	21140000 	tstcs	r4, r0
     7e0:	2f134900 	svccs	0x00134900
     7e4:	15000005 	strne	r0, [r0, #-5]
     7e8:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     7ec:	13011349 	movwne	r1, #4937	; 0x1349
     7f0:	05160000 	ldreq	r0, [r6, #-0]
     7f4:	00134900 	andseq	r4, r3, r0, lsl #18
     7f8:	00341700 	eorseq	r1, r4, r0, lsl #14
     7fc:	0b3a0e03 	bleq	e84010 <__bss_end__+0xe78ea0>
     800:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     804:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     808:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
     80c:	03193f01 	tsteq	r9, #1, 30
     810:	3b0b3a0e 	blcc	2cf050 <__bss_end__+0x2c3ee0>
     814:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     818:	00193c13 	andseq	r3, r9, r3, lsl ip
     81c:	11010000 	mrsne	r0, (UNDEF: 1)
     820:	130e2501 	movwne	r2, #58625	; 0xe501
     824:	1b0e030b 	blne	381458 <__bss_end__+0x3762e8>
     828:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     82c:	00171006 	andseq	r1, r7, r6
     830:	00240200 	eoreq	r0, r4, r0, lsl #4
     834:	0b3e0b0b 	bleq	f83468 <__bss_end__+0xf782f8>
     838:	00000803 	andeq	r0, r0, r3, lsl #16
     83c:	0b002403 	bleq	9850 <sw_uart_getc_timeout+0xa4>
     840:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     844:	0400000e 	streq	r0, [r0], #-14
     848:	0e03012e 	adfeqsp	f0, f3, #0.5
     84c:	0b3b0b3a 	bleq	ec353c <__bss_end__+0xeb83cc>
     850:	13491927 	movtne	r1, #39207	; 0x9927
     854:	06120111 			; <UNDEFINED> instruction: 0x06120111
     858:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     85c:	00130119 	andseq	r0, r3, r9, lsl r1
     860:	00050500 	andeq	r0, r5, r0, lsl #10
     864:	0b3a0803 	bleq	e82878 <__bss_end__+0xe77708>
     868:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     86c:	00001702 	andeq	r1, r0, r2, lsl #14
     870:	01828906 	orreq	r8, r2, r6, lsl #18
     874:	31011101 	tstcc	r1, r1, lsl #2
     878:	07000013 	smladeq	r0, r3, r0, r0
     87c:	0001828a 	andeq	r8, r1, sl, lsl #5
     880:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     884:	08000018 	stmdaeq	r0, {r3, r4}
     888:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     88c:	0b3a0e03 	bleq	e840a0 <__bss_end__+0xe78f30>
     890:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     894:	06120111 			; <UNDEFINED> instruction: 0x06120111
     898:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     89c:	09000019 	stmdbeq	r0, {r0, r3, r4}
     8a0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     8a4:	0b3a0e03 	bleq	e840b8 <__bss_end__+0xe78f48>
     8a8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     8ac:	06120111 			; <UNDEFINED> instruction: 0x06120111
     8b0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     8b4:	00130119 	andseq	r0, r3, r9, lsl r1
     8b8:	00050a00 	andeq	r0, r5, r0, lsl #20
     8bc:	0b3a0803 	bleq	e828d0 <__bss_end__+0xe77760>
     8c0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     8c4:	00001802 	andeq	r1, r0, r2, lsl #16
     8c8:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
     8cc:	01134919 	tsteq	r3, r9, lsl r9
     8d0:	0c000013 	stceq	0, cr0, [r0], {19}
     8d4:	13490005 	movtne	r0, #36869	; 0x9005
     8d8:	0f0d0000 	svceq	0x000d0000
     8dc:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     8e0:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     8e4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     8e8:	0b3b0b3a 	bleq	ec35d8 <__bss_end__+0xeb8468>
     8ec:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     8f0:	00001802 	andeq	r1, r0, r2, lsl #16
     8f4:	3f012e0f 	svccc	0x00012e0f
     8f8:	3a0e0319 	bcc	381564 <__bss_end__+0x3763f4>
     8fc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     900:	00193c19 	andseq	r3, r9, r9, lsl ip
     904:	11010000 	mrsne	r0, (UNDEF: 1)
     908:	130e2501 	movwne	r2, #58625	; 0xe501
     90c:	1b0e030b 	blne	381540 <__bss_end__+0x3763d0>
     910:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     914:	00171006 	andseq	r1, r7, r6
     918:	00240200 	eoreq	r0, r4, r0, lsl #4
     91c:	0b3e0b0b 	bleq	f83550 <__bss_end__+0xf783e0>
     920:	00000803 	andeq	r0, r0, r3, lsl #16
     924:	0b002403 	bleq	9938 <sw_uart_getc_timeout+0x18c>
     928:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     92c:	0400000e 	streq	r0, [r0], #-14
     930:	0b0b000f 	bleq	2c0974 <__bss_end__+0x2b5804>
     934:	00001349 	andeq	r1, r0, r9, asr #6
     938:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
     93c:	06000013 			; <UNDEFINED> instruction: 0x06000013
     940:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     944:	0b3a0e03 	bleq	e84158 <__bss_end__+0xe78fe8>
     948:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     94c:	01111349 	tsteq	r1, r9, asr #6
     950:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     954:	01194296 			; <UNDEFINED> instruction: 0x01194296
     958:	07000013 	smladeq	r0, r3, r0, r0
     95c:	08030005 	stmdaeq	r3, {r0, r2}
     960:	0b3b0b3a 	bleq	ec3650 <__bss_end__+0xeb84e0>
     964:	17021349 	strne	r1, [r2, -r9, asr #6]
     968:	15080000 	strne	r0, [r8, #-0]
     96c:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
     970:	00130113 	andseq	r0, r3, r3, lsl r1
     974:	00050900 	andeq	r0, r5, r0, lsl #18
     978:	00001349 	andeq	r1, r0, r9, asr #6
     97c:	0300340a 	movweq	r3, #1034	; 0x40a
     980:	3b0b3a0e 	blcc	2cf1c0 <__bss_end__+0x2c4050>
     984:	3f13490b 	svccc	0x0013490b
     988:	00193c19 	andseq	r3, r9, r9, lsl ip
     98c:	00340b00 	eorseq	r0, r4, r0, lsl #22
     990:	0b3a0e03 	bleq	e841a4 <__bss_end__+0xe79034>
     994:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     998:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     99c:	01000000 	mrseq	r0, (UNDEF: 0)
     9a0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     9a4:	0e030b13 	vmoveq.32	d3[0], r0
     9a8:	01110e1b 	tsteq	r1, fp, lsl lr
     9ac:	17100612 			; <UNDEFINED> instruction: 0x17100612
     9b0:	24020000 	strcs	r0, [r2], #-0
     9b4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     9b8:	0008030b 	andeq	r0, r8, fp, lsl #6
     9bc:	00240300 	eoreq	r0, r4, r0, lsl #6
     9c0:	0b3e0b0b 	bleq	f835f4 <__bss_end__+0xf78484>
     9c4:	00000e03 	andeq	r0, r0, r3, lsl #28
     9c8:	0b000f04 	bleq	45e0 <_start-0x3a20>
     9cc:	0500000b 	streq	r0, [r0, #-11]
     9d0:	0b0b000f 	bleq	2c0a14 <__bss_end__+0x2b58a4>
     9d4:	00001349 	andeq	r1, r0, r9, asr #6
     9d8:	49002606 	stmdbmi	r0, {r1, r2, r9, sl, sp}
     9dc:	07000013 	smladeq	r0, r3, r0, r0
     9e0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     9e4:	0b3b0b3a 	bleq	ec36d4 <__bss_end__+0xeb8564>
     9e8:	00001349 	andeq	r1, r0, r9, asr #6
     9ec:	03011308 	movweq	r1, #4872	; 0x1308
     9f0:	3a0b0b0e 	bcc	2c3630 <__bss_end__+0x2b84c0>
     9f4:	010b3b0b 	tsteq	fp, fp, lsl #22
     9f8:	09000013 	stmdbeq	r0, {r0, r1, r4}
     9fc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     a00:	0b381349 	bleq	e0572c <__bss_end__+0xdfa5bc>
     a04:	00001934 	andeq	r1, r0, r4, lsr r9
     a08:	03012e0a 	movweq	r2, #7690	; 0x1e0a
     a0c:	3b0b3a0e 	blcc	2cf24c <__bss_end__+0x2c40dc>
     a10:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     a14:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     a18:	97184006 	ldrls	r4, [r8, -r6]
     a1c:	13011942 	movwne	r1, #6466	; 0x1942
     a20:	050b0000 	streq	r0, [fp, #-0]
     a24:	3a080300 	bcc	20162c <__bss_end__+0x1f64bc>
     a28:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a2c:	00170213 	andseq	r0, r7, r3, lsl r2
     a30:	012e0c00 	teqeq	lr, r0, lsl #24
     a34:	0b3a0803 	bleq	e82a48 <__bss_end__+0xe778d8>
     a38:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     a3c:	01111349 	tsteq	r1, r9, asr #6
     a40:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a44:	01194297 			; <UNDEFINED> instruction: 0x01194297
     a48:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     a4c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     a50:	0b3b0b3a 	bleq	ec3740 <__bss_end__+0xeb85d0>
     a54:	17021349 	strne	r1, [r2, -r9, asr #6]
     a58:	050e0000 	streq	r0, [lr, #-0]
     a5c:	3a0e0300 	bcc	381664 <__bss_end__+0x3764f4>
     a60:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a64:	00180213 	andseq	r0, r8, r3, lsl r2
     a68:	00340f00 	eorseq	r0, r4, r0, lsl #30
     a6c:	0b3a0803 	bleq	e82a80 <__bss_end__+0xe77910>
     a70:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     a74:	00001802 	andeq	r1, r0, r2, lsl #16
     a78:	03003410 	movweq	r3, #1040	; 0x410
     a7c:	3b0b3a08 	blcc	2cf2a4 <__bss_end__+0x2c4134>
     a80:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     a84:	11000017 	tstne	r0, r7, lsl r0
     a88:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     a8c:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
     a90:	00001802 	andeq	r1, r0, r2, lsl #16
     a94:	11010b12 	tstne	r1, r2, lsl fp
     a98:	01061201 	tsteq	r6, r1, lsl #4
     a9c:	13000013 	movwne	r0, #19
     aa0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     aa4:	0b3b0b3a 	bleq	ec3794 <__bss_end__+0xeb8624>
     aa8:	17021349 	strne	r1, [r2, -r9, asr #6]
     aac:	89140000 	ldmdbhi	r4, {}	; <UNPREDICTABLE>
     ab0:	11000182 	smlabbne	r0, r2, r1, r0
     ab4:	00133101 	andseq	r3, r3, r1, lsl #2
     ab8:	82891500 	addhi	r1, r9, #0, 10
     abc:	01110101 	tsteq	r1, r1, lsl #2
     ac0:	13011331 	movwne	r1, #4913	; 0x1331
     ac4:	8a160000 	bhi	580acc <__bss_end__+0x57595c>
     ac8:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     acc:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     ad0:	89170000 	ldmdbhi	r7, {}	; <UNPREDICTABLE>
     ad4:	11010182 	smlabbne	r1, r2, r1, r0
     ad8:	00133101 	andseq	r3, r3, r1, lsl #2
     adc:	01011800 	tsteq	r1, r0, lsl #16
     ae0:	13011349 	movwne	r1, #4937	; 0x1349
     ae4:	21190000 	tstcs	r9, r0
     ae8:	2f134900 	svccs	0x00134900
     aec:	1a00000b 	bne	b20 <_start-0x74e0>
     af0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     af4:	0b3a0e03 	bleq	e84308 <__bss_end__+0xe79198>
     af8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     afc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     b00:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     b04:	00130119 	andseq	r0, r3, r9, lsl r1
     b08:	01151b00 	tsteq	r5, r0, lsl #22
     b0c:	13491927 	movtne	r1, #39207	; 0x9927
     b10:	00001301 	andeq	r1, r0, r1, lsl #6
     b14:	4900051c 	stmdbmi	r0, {r2, r3, r4, r8, sl}
     b18:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
     b1c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     b20:	0b3a0e03 	bleq	e84334 <__bss_end__+0xe791c4>
     b24:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     b28:	01111349 	tsteq	r1, r9, asr #6
     b2c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b30:	01194297 			; <UNDEFINED> instruction: 0x01194297
     b34:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     b38:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
     b3c:	341f0000 	ldrcc	r0, [pc], #-0	; b44 <_start-0x74bc>
     b40:	3a0e0300 	bcc	381748 <__bss_end__+0x3765d8>
     b44:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b48:	3c193f13 	ldccc	15, cr3, [r9], {19}
     b4c:	20000019 	andcs	r0, r0, r9, lsl r0
     b50:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     b54:	0b3a0e03 	bleq	e84368 <__bss_end__+0xe791f8>
     b58:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     b5c:	0000193c 	andeq	r1, r0, ip, lsr r9
     b60:	3f012e21 	svccc	0x00012e21
     b64:	3a0e0319 	bcc	3817d0 <__bss_end__+0x376660>
     b68:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     b6c:	3c134919 	ldccc	9, cr4, [r3], {25}
     b70:	00130119 	andseq	r0, r3, r9, lsl r1
     b74:	00182200 	andseq	r2, r8, r0, lsl #4
     b78:	01000000 	mrseq	r0, (UNDEF: 0)
     b7c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     b80:	0e030b13 	vmoveq.32	d3[0], r0
     b84:	01110e1b 	tsteq	r1, fp, lsl lr
     b88:	17100612 			; <UNDEFINED> instruction: 0x17100612
     b8c:	24020000 	strcs	r0, [r2], #-0
     b90:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     b94:	0008030b 	andeq	r0, r8, fp, lsl #6
     b98:	00240300 	eoreq	r0, r4, r0, lsl #6
     b9c:	0b3e0b0b 	bleq	f837d0 <__bss_end__+0xf78660>
     ba0:	00000e03 	andeq	r0, r0, r3, lsl #28
     ba4:	0b000f04 	bleq	47bc <_start-0x3844>
     ba8:	0013490b 	andseq	r4, r3, fp, lsl #18
     bac:	00260500 	eoreq	r0, r6, r0, lsl #10
     bb0:	00001349 	andeq	r1, r0, r9, asr #6
     bb4:	3f012e06 	svccc	0x00012e06
     bb8:	3a0e0319 	bcc	381824 <__bss_end__+0x3766b4>
     bbc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     bc0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     bc4:	97184006 	ldrls	r4, [r8, -r6]
     bc8:	13011942 	movwne	r1, #6466	; 0x1942
     bcc:	89070000 	stmdbhi	r7, {}	; <UNPREDICTABLE>
     bd0:	11010182 	smlabbne	r1, r2, r1, r0
     bd4:	00130101 	andseq	r0, r3, r1, lsl #2
     bd8:	828a0800 	addhi	r0, sl, #0, 16
     bdc:	18020001 	stmdane	r2, {r0}
     be0:	00184291 	mulseq	r8, r1, r2
     be4:	82890900 	addhi	r0, r9, #0, 18
     be8:	01110101 	tsteq	r1, r1, lsl #2
     bec:	13011331 	movwne	r1, #4913	; 0x1331
     bf0:	890a0000 	stmdbhi	sl, {}	; <UNPREDICTABLE>
     bf4:	11000182 	smlabbne	r0, r2, r1, r0
     bf8:	00133101 	andseq	r3, r3, r1, lsl #2
     bfc:	01150b00 	tsteq	r5, r0, lsl #22
     c00:	13491927 	movtne	r1, #39207	; 0x9927
     c04:	00001301 	andeq	r1, r0, r1, lsl #6
     c08:	4900050c 	stmdbmi	r0, {r2, r3, r8, sl}
     c0c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     c10:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     c14:	0b3b0b3a 	bleq	ec3904 <__bss_end__+0xeb8794>
     c18:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     c1c:	0000193c 	andeq	r1, r0, ip, lsr r9
     c20:	3f012e0e 	svccc	0x00012e0e
     c24:	3a0e0319 	bcc	381890 <__bss_end__+0x376720>
     c28:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     c2c:	01193c19 	tsteq	r9, r9, lsl ip
     c30:	0f000013 	svceq	0x00000013
     c34:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     c38:	0b3a0e03 	bleq	e8444c <__bss_end__+0xe792dc>
     c3c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     c40:	0000193c 	andeq	r1, r0, ip, lsr r9
     c44:	01110100 	tsteq	r1, r0, lsl #2
     c48:	0b130e25 	bleq	4c44e4 <__bss_end__+0x4b9374>
     c4c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     c50:	06120111 			; <UNDEFINED> instruction: 0x06120111
     c54:	00001710 	andeq	r1, r0, r0, lsl r7
     c58:	0b002402 	bleq	9c68 <sw_uart_gets_until_blk+0x3c>
     c5c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     c60:	03000008 	movweq	r0, #8
     c64:	0b0b0024 	bleq	2c0cfc <__bss_end__+0x2b5b8c>
     c68:	0e030b3e 	vmoveq.16	d3[0], r0
     c6c:	16040000 	strne	r0, [r4], -r0
     c70:	3a0e0300 	bcc	381878 <__bss_end__+0x376708>
     c74:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c78:	05000013 	streq	r0, [r0, #-19]
     c7c:	0b0b000f 	bleq	2c0cc0 <__bss_end__+0x2b5b50>
     c80:	00001349 	andeq	r1, r0, r9, asr #6
     c84:	49002606 	stmdbmi	r0, {r1, r2, r9, sl, sp}
     c88:	07000013 	smladeq	r0, r3, r0, r0
     c8c:	0b0b0113 	bleq	2c10e0 <__bss_end__+0x2b5f70>
     c90:	0b3b0b3a 	bleq	ec3980 <__bss_end__+0xeb8810>
     c94:	00001301 	andeq	r1, r0, r1, lsl #6
     c98:	03000d08 	movweq	r0, #3336	; 0xd08
     c9c:	3b0b3a08 	blcc	2cf4c4 <__bss_end__+0x2c4354>
     ca0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     ca4:	0900000b 	stmdbeq	r0, {r0, r1, r3}
     ca8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     cac:	0b3b0b3a 	bleq	ec399c <__bss_end__+0xeb882c>
     cb0:	0b381349 	bleq	e059dc <__bss_end__+0xdfa86c>
     cb4:	040a0000 	streq	r0, [sl], #-0
     cb8:	3a0b0b01 	bcc	2c38c4 <__bss_end__+0x2b8754>
     cbc:	010b3b0b 	tsteq	fp, fp, lsl #22
     cc0:	0b000013 	bleq	d14 <_start-0x72ec>
     cc4:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     cc8:	00000d1c 	andeq	r0, r0, ip, lsl sp
     ccc:	03012e0c 	movweq	r2, #7692	; 0x1e0c
     cd0:	3b0b3a0e 	blcc	2cf510 <__bss_end__+0x2c43a0>
     cd4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     cd8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     cdc:	97184006 	ldrls	r4, [r8, -r6]
     ce0:	13011942 	movwne	r1, #6466	; 0x1942
     ce4:	050d0000 	streq	r0, [sp, #-0]
     ce8:	3a080300 	bcc	2018f0 <__bss_end__+0x1f6780>
     cec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     cf0:	00170213 	andseq	r0, r7, r3, lsl r2
     cf4:	82890e00 	addhi	r0, r9, #0, 28
     cf8:	01110101 	tsteq	r1, r1, lsl #2
     cfc:	00001331 	andeq	r1, r0, r1, lsr r3
     d00:	01828a0f 	orreq	r8, r2, pc, lsl #20
     d04:	91180200 	tstls	r8, r0, lsl #4
     d08:	00001842 	andeq	r1, r0, r2, asr #16
     d0c:	3f012e10 	svccc	0x00012e10
     d10:	3a0e0319 	bcc	38197c <__bss_end__+0x37680c>
     d14:	110b3b0b 	tstne	fp, fp, lsl #22
     d18:	40061201 	andmi	r1, r6, r1, lsl #4
     d1c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     d20:	00001301 	andeq	r1, r0, r1, lsl #6
     d24:	03003411 	movweq	r3, #1041	; 0x411
     d28:	3b0b3a0e 	blcc	2cf568 <__bss_end__+0x2c43f8>
     d2c:	3f13490b 	svccc	0x0013490b
     d30:	00193c19 	andseq	r3, r9, r9, lsl ip
     d34:	002e1200 	eoreq	r1, lr, r0, lsl #4
     d38:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     d3c:	0b3b0b3a 	bleq	ec3a2c <__bss_end__+0xeb88bc>
     d40:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     d44:	34130000 	ldrcc	r0, [r3], #-0
     d48:	3a080300 	bcc	201950 <__bss_end__+0x1f67e0>
     d4c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d50:	00170213 	andseq	r0, r7, r3, lsl r2
     d54:	00341400 	eorseq	r1, r4, r0, lsl #8
     d58:	0b3a0e03 	bleq	e8456c <__bss_end__+0xe793fc>
     d5c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     d60:	89150000 	ldmdbhi	r5, {}	; <UNPREDICTABLE>
     d64:	11000182 	smlabbne	r0, r2, r1, r0
     d68:	00133101 	andseq	r3, r3, r1, lsl #2
     d6c:	82891600 	addhi	r1, r9, #0, 12
     d70:	01110101 	tsteq	r1, r1, lsl #2
     d74:	13011331 	movwne	r1, #4913	; 0x1331
     d78:	34170000 	ldrcc	r0, [r7], #-0
     d7c:	3a0e0300 	bcc	381984 <__bss_end__+0x376814>
     d80:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d84:	00180213 	andseq	r0, r8, r3, lsl r2
     d88:	01151800 	tsteq	r5, r0, lsl #16
     d8c:	13491927 	movtne	r1, #39207	; 0x9927
     d90:	00001301 	andeq	r1, r0, r1, lsl #6
     d94:	49000519 	stmdbmi	r0, {r0, r3, r4, r8, sl}
     d98:	1a000013 	bne	dec <_start-0x7214>
     d9c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     da0:	0b3a0e03 	bleq	e845b4 <__bss_end__+0xe79444>
     da4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     da8:	1301193c 	movwne	r1, #6460	; 0x193c
     dac:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
     db0:	03193f00 	tsteq	r9, #0, 30
     db4:	3b0b3a0e 	blcc	2cf5f4 <__bss_end__+0x2c4484>
     db8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     dbc:	00193c13 	andseq	r3, r9, r3, lsl ip
     dc0:	012e1c00 	teqeq	lr, r0, lsl #24
     dc4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     dc8:	0b3b0b3a 	bleq	ec3ab8 <__bss_end__+0xeb8948>
     dcc:	13491927 	movtne	r1, #39207	; 0x9927
     dd0:	1301193c 	movwne	r1, #6460	; 0x193c
     dd4:	181d0000 	ldmdane	sp, {}	; <UNPREDICTABLE>
     dd8:	00000000 	andeq	r0, r0, r0
     ddc:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     de0:	030b130e 	movweq	r1, #45838	; 0xb30e
     de4:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
     de8:	10011117 	andne	r1, r1, r7, lsl r1
     dec:	02000017 	andeq	r0, r0, #23
     df0:	0b0b0024 	bleq	2c0e88 <__bss_end__+0x2b5d18>
     df4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     df8:	24030000 	strcs	r0, [r3], #-0
     dfc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     e00:	000e030b 	andeq	r0, lr, fp, lsl #6
     e04:	012e0400 	teqeq	lr, r0, lsl #8
     e08:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     e0c:	0b3b0b3a 	bleq	ec3afc <__bss_end__+0xeb898c>
     e10:	13491927 	movtne	r1, #39207	; 0x9927
     e14:	06120111 			; <UNDEFINED> instruction: 0x06120111
     e18:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     e1c:	00130119 	andseq	r0, r3, r9, lsl r1
     e20:	00340500 	eorseq	r0, r4, r0, lsl #10
     e24:	0b3a0e03 	bleq	e84638 <__bss_end__+0xe794c8>
     e28:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e2c:	00001702 	andeq	r1, r0, r2, lsl #14
     e30:	3f012e06 	svccc	0x00012e06
     e34:	3a0e0319 	bcc	381aa0 <__bss_end__+0x376930>
     e38:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     e3c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     e40:	97184006 	ldrls	r4, [r8, -r6]
     e44:	13011942 	movwne	r1, #6466	; 0x1942
     e48:	34070000 	strcc	r0, [r7], #-0
     e4c:	3a0e0300 	bcc	381a54 <__bss_end__+0x3768e4>
     e50:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e54:	00061c13 	andeq	r1, r6, r3, lsl ip
     e58:	00340800 	eorseq	r0, r4, r0, lsl #16
     e5c:	0b3a0e03 	bleq	e84670 <__bss_end__+0xe79500>
     e60:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e64:	00000b1c 	andeq	r0, r0, ip, lsl fp
     e68:	01828909 	orreq	r8, r2, r9, lsl #18
     e6c:	31011100 	mrscc	r1, (UNDEF: 17)
     e70:	0a000013 	beq	ec4 <_start-0x713c>
     e74:	01018289 	smlabbeq	r1, r9, r2, r8
     e78:	13310111 	teqne	r1, #1073741828	; 0x40000004
     e7c:	00001301 	andeq	r1, r0, r1, lsl #6
     e80:	01828a0b 	orreq	r8, r2, fp, lsl #20
     e84:	91180200 	tstls	r8, r0, lsl #4
     e88:	00001842 	andeq	r1, r0, r2, asr #16
     e8c:	0182890c 	orreq	r8, r2, ip, lsl #18
     e90:	31011101 	tstcc	r1, r1, lsl #2
     e94:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     e98:	13490026 	movtne	r0, #36902	; 0x9026
     e9c:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
     ea0:	03193f01 	tsteq	r9, #1, 30
     ea4:	3b0b3a0e 	blcc	2cf6e4 <__bss_end__+0x2c4574>
     ea8:	3c19270b 	ldccc	7, cr2, [r9], {11}
     eac:	00130119 	andseq	r0, r3, r9, lsl r1
     eb0:	00050f00 	andeq	r0, r5, r0, lsl #30
     eb4:	00001349 	andeq	r1, r0, r9, asr #6
     eb8:	3f012e10 	svccc	0x00012e10
     ebc:	3a0e0319 	bcc	381b28 <__bss_end__+0x3769b8>
     ec0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     ec4:	00193c19 	andseq	r3, r9, r9, lsl ip
     ec8:	11010000 	mrsne	r0, (UNDEF: 1)
     ecc:	130e2501 	movwne	r2, #58625	; 0xe501
     ed0:	1b0e030b 	blne	381b04 <__bss_end__+0x376994>
     ed4:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     ed8:	00171006 	andseq	r1, r7, r6
     edc:	00240200 	eoreq	r0, r4, r0, lsl #4
     ee0:	0b3e0b0b 	bleq	f83b14 <__bss_end__+0xf789a4>
     ee4:	00000803 	andeq	r0, r0, r3, lsl #16
     ee8:	0b002403 	bleq	9efc <gpio_set_output+0xcc>
     eec:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     ef0:	0400000e 	streq	r0, [r0], #-14
     ef4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     ef8:	0b3a0e03 	bleq	e8470c <__bss_end__+0xe7959c>
     efc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     f00:	06120111 			; <UNDEFINED> instruction: 0x06120111
     f04:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     f08:	00130119 	andseq	r0, r3, r9, lsl r1
     f0c:	00050500 	andeq	r0, r5, r0, lsl #10
     f10:	0b3a0e03 	bleq	e84724 <__bss_end__+0xe795b4>
     f14:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f18:	00001702 	andeq	r1, r0, r2, lsl #14
     f1c:	3f012e06 	svccc	0x00012e06
     f20:	3a0e0319 	bcc	381b8c <__bss_end__+0x376a1c>
     f24:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     f28:	11134919 	tstne	r3, r9, lsl r9
     f2c:	40061201 	andmi	r1, r6, r1, lsl #4
     f30:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     f34:	00001301 	andeq	r1, r0, r1, lsl #6
     f38:	01828907 	orreq	r8, r2, r7, lsl #18
     f3c:	31011101 	tstcc	r1, r1, lsl #2
     f40:	08000013 	stmdaeq	r0, {r0, r1, r4}
     f44:	0001828a 	andeq	r8, r1, sl, lsl #5
     f48:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     f4c:	09000018 	stmdbeq	r0, {r3, r4}
     f50:	08030034 	stmdaeq	r3, {r2, r4, r5}
     f54:	0b3b0b3a 	bleq	ec3c44 <__bss_end__+0xeb8ad4>
     f58:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     f5c:	890a0000 	stmdbhi	sl, {}	; <UNPREDICTABLE>
     f60:	11000182 	smlabbne	r0, r2, r1, r0
     f64:	00133101 	andseq	r3, r3, r1, lsl #2
     f68:	00050b00 	andeq	r0, r5, r0, lsl #22
     f6c:	0b3a0803 	bleq	e82f80 <__bss_end__+0xe77e10>
     f70:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f74:	00001702 	andeq	r1, r0, r2, lsl #14
     f78:	11010b0c 	tstne	r1, ip, lsl #22
     f7c:	01061201 	tsteq	r6, r1, lsl #4
     f80:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     f84:	08030034 	stmdaeq	r3, {r2, r4, r5}
     f88:	0b3b0b3a 	bleq	ec3c78 <__bss_end__+0xeb8b08>
     f8c:	17021349 	strne	r1, [r2, -r9, asr #6]
     f90:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
     f94:	03193f01 	tsteq	r9, #1, 30
     f98:	3b0b3a0e 	blcc	2cf7d8 <__bss_end__+0x2c4668>
     f9c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     fa0:	00193c13 	andseq	r3, r9, r3, lsl ip
     fa4:	00050f00 	andeq	r0, r5, r0, lsl #30
     fa8:	00001349 	andeq	r1, r0, r9, asr #6
     fac:	01110100 	tsteq	r1, r0, lsl #2
     fb0:	0b130e25 	bleq	4c484c <__bss_end__+0x4b96dc>
     fb4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     fb8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     fbc:	00001710 	andeq	r1, r0, r0, lsl r7
     fc0:	0b002402 	bleq	9fd0 <gpio_set_input+0x5c>
     fc4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     fc8:	03000008 	movweq	r0, #8
     fcc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     fd0:	0b3b0b3a 	bleq	ec3cc0 <__bss_end__+0xeb8b50>
     fd4:	00001349 	andeq	r1, r0, r9, asr #6
     fd8:	0b002404 	bleq	9ff0 <gpio_set_input+0x7c>
     fdc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     fe0:	0500000e 	streq	r0, [r0, #-14]
     fe4:	0b0b000f 	bleq	2c1028 <__bss_end__+0x2b5eb8>
     fe8:	0f060000 	svceq	0x00060000
     fec:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     ff0:	07000013 	smladeq	r0, r3, r0, r0
     ff4:	13490026 	movtne	r0, #36902	; 0x9026
     ff8:	01080000 	mrseq	r0, (UNDEF: 8)
     ffc:	01134901 	tsteq	r3, r1, lsl #18
    1000:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1004:	13490021 	movtne	r0, #36897	; 0x9021
    1008:	00000b2f 	andeq	r0, r0, pc, lsr #22
    100c:	3f012e0a 	svccc	0x00012e0a
    1010:	3a0e0319 	bcc	381c7c <__bss_end__+0x376b0c>
    1014:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1018:	11134919 	tstne	r3, r9, lsl r9
    101c:	40061201 	andmi	r1, r6, r1, lsl #4
    1020:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1024:	00001301 	andeq	r1, r0, r1, lsl #6
    1028:	0300050b 	movweq	r0, #1291	; 0x50b
    102c:	3b0b3a0e 	blcc	2cf86c <__bss_end__+0x2c46fc>
    1030:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1034:	0c000017 	stceq	0, cr0, [r0], {23}
    1038:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    103c:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
    1040:	00001802 	andeq	r1, r0, r2, lsl #16
    1044:	0300340d 	movweq	r3, #1037	; 0x40d
    1048:	3b0b3a0e 	blcc	2cf888 <__bss_end__+0x2c4718>
    104c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1050:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
    1054:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1058:	0b3b0b3a 	bleq	ec3d48 <__bss_end__+0xeb8bd8>
    105c:	17021349 	strne	r1, [r2, -r9, asr #6]
    1060:	890f0000 	stmdbhi	pc, {}	; <UNPREDICTABLE>
    1064:	11000182 	smlabbne	r0, r2, r1, r0
    1068:	00133101 	andseq	r3, r3, r1, lsl #2
    106c:	82891000 	addhi	r1, r9, #0
    1070:	01110101 	tsteq	r1, r1, lsl #2
    1074:	13011331 	movwne	r1, #4913	; 0x1331
    1078:	8a110000 	bhi	441080 <__bss_end__+0x435f10>
    107c:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    1080:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    1084:	89120000 	ldmdbhi	r2, {}	; <UNPREDICTABLE>
    1088:	11010182 	smlabbne	r1, r2, r1, r0
    108c:	00133101 	andseq	r3, r3, r1, lsl #2
    1090:	012e1300 	teqeq	lr, r0, lsl #6
    1094:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1098:	0b3b0b3a 	bleq	ec3d88 <__bss_end__+0xeb8c18>
    109c:	01111927 	tsteq	r1, r7, lsr #18
    10a0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    10a4:	01194297 			; <UNDEFINED> instruction: 0x01194297
    10a8:	14000013 	strne	r0, [r0], #-19
    10ac:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    10b0:	0b3a0e03 	bleq	e848c4 <__bss_end__+0xe79754>
    10b4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    10b8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    10bc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    10c0:	15000019 	strne	r0, [r0, #-25]
    10c4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    10c8:	0b3a0e03 	bleq	e848dc <__bss_end__+0xe7976c>
    10cc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    10d0:	01111349 	tsteq	r1, r9, asr #6
    10d4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    10d8:	00194297 	mulseq	r9, r7, r2
    10dc:	00341600 	eorseq	r1, r4, r0, lsl #12
    10e0:	0b3a0e03 	bleq	e848f4 <__bss_end__+0xe79784>
    10e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    10e8:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    10ec:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
    10f0:	03193f00 	tsteq	r9, #0, 30
    10f4:	3b0b3a0e 	blcc	2cf934 <__bss_end__+0x2c47c4>
    10f8:	3c19270b 	ldccc	7, cr2, [r9], {11}
    10fc:	18000019 	stmdane	r0, {r0, r3, r4}
    1100:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1104:	0b3a0e03 	bleq	e84918 <__bss_end__+0xe797a8>
    1108:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    110c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    1110:	00001301 	andeq	r1, r0, r1, lsl #6
    1114:	49000519 	stmdbmi	r0, {r0, r3, r4, r8, sl}
    1118:	1a000013 	bne	116c <_start-0x6e94>
    111c:	00000018 	andeq	r0, r0, r8, lsl r0
    1120:	3f012e1b 	svccc	0x00012e1b
    1124:	3a0e0319 	bcc	381d90 <__bss_end__+0x376c20>
    1128:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    112c:	3c134919 	ldccc	9, cr4, [r3], {25}
    1130:	00000019 	andeq	r0, r0, r9, lsl r0
    1134:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    1138:	030b130e 	movweq	r1, #45838	; 0xb30e
    113c:	110e1b0e 	tstne	lr, lr, lsl #22
    1140:	10061201 	andne	r1, r6, r1, lsl #4
    1144:	02000017 	andeq	r0, r0, #23
    1148:	0b0b0024 	bleq	2c11e0 <__bss_end__+0x2b6070>
    114c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1150:	24030000 	strcs	r0, [r3], #-0
    1154:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1158:	000e030b 	andeq	r0, lr, fp, lsl #6
    115c:	00160400 	andseq	r0, r6, r0, lsl #8
    1160:	0b3a0e03 	bleq	e84974 <__bss_end__+0xe79804>
    1164:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1168:	0f050000 	svceq	0x00050000
    116c:	000b0b00 	andeq	r0, fp, r0, lsl #22
    1170:	000f0600 	andeq	r0, pc, r0, lsl #12
    1174:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1178:	26070000 	strcs	r0, [r7], -r0
    117c:	00134900 	andseq	r4, r3, r0, lsl #18
    1180:	01130800 	tsteq	r3, r0, lsl #16
    1184:	0b3a0b0b 	bleq	e83db8 <__bss_end__+0xe78c48>
    1188:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    118c:	0d090000 	stceq	0, cr0, [r9, #-0]
    1190:	3a080300 	bcc	201d98 <__bss_end__+0x1f6c28>
    1194:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1198:	000b3813 	andeq	r3, fp, r3, lsl r8
    119c:	000d0a00 	andeq	r0, sp, r0, lsl #20
    11a0:	0b3a0e03 	bleq	e849b4 <__bss_end__+0xe79844>
    11a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    11a8:	00000b38 	andeq	r0, r0, r8, lsr fp
    11ac:	0301130b 	movweq	r1, #4875	; 0x130b
    11b0:	3a0b0b0e 	bcc	2c3df0 <__bss_end__+0x2b8c80>
    11b4:	010b3b0b 	tsteq	fp, fp, lsl #22
    11b8:	0c000013 	stceq	0, cr0, [r0], {19}
    11bc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    11c0:	0b381349 	bleq	e05eec <__bss_end__+0xdfad7c>
    11c4:	00001934 	andeq	r1, r0, r4, lsr r9
    11c8:	03012e0d 	movweq	r2, #7693	; 0x1e0d
    11cc:	3b0b3a0e 	blcc	2cfa0c <__bss_end__+0x2c489c>
    11d0:	2019270b 	andscs	r2, r9, fp, lsl #14
    11d4:	0013010b 	andseq	r0, r3, fp, lsl #2
    11d8:	00050e00 	andeq	r0, r5, r0, lsl #28
    11dc:	0b3a0e03 	bleq	e849f0 <__bss_end__+0xe79880>
    11e0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    11e4:	050f0000 	streq	r0, [pc, #-0]	; 11ec <_start-0x6e14>
    11e8:	3a080300 	bcc	201df0 <__bss_end__+0x1f6c80>
    11ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    11f0:	10000013 	andne	r0, r0, r3, lsl r0
    11f4:	0000010b 	andeq	r0, r0, fp, lsl #2
    11f8:	03003411 	movweq	r3, #1041	; 0x411
    11fc:	3b0b3a0e 	blcc	2cfa3c <__bss_end__+0x2c48cc>
    1200:	0013490b 	andseq	r4, r3, fp, lsl #18
    1204:	012e1200 	teqeq	lr, r0, lsl #4
    1208:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    120c:	0b3b0b3a 	bleq	ec3efc <__bss_end__+0xeb8d8c>
    1210:	01111927 	tsteq	r1, r7, lsr #18
    1214:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1218:	01194297 			; <UNDEFINED> instruction: 0x01194297
    121c:	13000013 	movwne	r0, #19
    1220:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1224:	0b3b0b3a 	bleq	ec3f14 <__bss_end__+0xeb8da4>
    1228:	17021349 	strne	r1, [r2, -r9, asr #6]
    122c:	05140000 	ldreq	r0, [r4, #-0]
    1230:	3a080300 	bcc	201e38 <__bss_end__+0x1f6cc8>
    1234:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1238:	00170213 	andseq	r0, r7, r3, lsl r2
    123c:	00341500 	eorseq	r1, r4, r0, lsl #10
    1240:	0b3a0803 	bleq	e83254 <__bss_end__+0xe780e4>
    1244:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1248:	00001802 	andeq	r1, r0, r2, lsl #16
    124c:	03003416 	movweq	r3, #1046	; 0x416
    1250:	3b0b3a08 	blcc	2cfa78 <__bss_end__+0x2c4908>
    1254:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1258:	17000017 	smladne	r0, r7, r0, r0
    125c:	0111010b 	tsteq	r1, fp, lsl #2
    1260:	13010612 	movwne	r0, #5650	; 0x1612
    1264:	34180000 	ldrcc	r0, [r8], #-0
    1268:	3a0e0300 	bcc	381e70 <__bss_end__+0x376d00>
    126c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1270:	00180213 	andseq	r0, r8, r3, lsl r2
    1274:	011d1900 	tsteq	sp, r0, lsl #18
    1278:	01111331 	tsteq	r1, r1, lsr r3
    127c:	0b580612 	bleq	1602acc <__bss_end__+0x15f795c>
    1280:	13010b59 	movwne	r0, #7001	; 0x1b59
    1284:	051a0000 	ldreq	r0, [sl, #-0]
    1288:	02133100 	andseq	r3, r3, #0, 2
    128c:	1b000017 	blne	12f0 <_start-0x6d10>
    1290:	13310005 	teqne	r1, #5
    1294:	00001802 	andeq	r1, r0, r2, lsl #16
    1298:	3100051c 	tstcc	r0, ip, lsl r5
    129c:	000b1c13 	andeq	r1, fp, r3, lsl ip
    12a0:	010b1d00 	tsteq	fp, r0, lsl #26
    12a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    12a8:	341e0000 	ldrcc	r0, [lr], #-0
    12ac:	02133100 	andseq	r3, r3, #0, 2
    12b0:	1f000017 	svcne	0x00000017
    12b4:	01018289 	smlabbeq	r1, r9, r2, r8
    12b8:	13310111 	teqne	r1, #1073741828	; 0x40000004
    12bc:	8a200000 	bhi	8012c4 <__bss_end__+0x7f6154>
    12c0:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    12c4:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    12c8:	1d210000 	stcne	0, cr0, [r1, #-0]
    12cc:	11133101 	tstne	r3, r1, lsl #2
    12d0:	58061201 	stmdapl	r6, {r0, r9, ip}
    12d4:	000b590b 	andeq	r5, fp, fp, lsl #18
    12d8:	012e2200 	teqeq	lr, r0, lsl #4
    12dc:	0b3a0e03 	bleq	e84af0 <__bss_end__+0xe79980>
    12e0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    12e4:	0b201349 	bleq	806010 <__bss_end__+0x7faea0>
    12e8:	00001301 	andeq	r1, r0, r1, lsl #6
    12ec:	3f012e23 	svccc	0x00012e23
    12f0:	3a0e0319 	bcc	381f5c <__bss_end__+0x376dec>
    12f4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    12f8:	11134919 	tstne	r3, r9, lsl r9
    12fc:	40061201 	andmi	r1, r6, r1, lsl #4
    1300:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1304:	00001301 	andeq	r1, r0, r1, lsl #6
    1308:	01828924 	orreq	r8, r2, r4, lsr #18
    130c:	31011100 	mrscc	r1, (UNDEF: 17)
    1310:	25000013 	strcs	r0, [r0, #-19]
    1314:	01018289 	smlabbeq	r1, r9, r2, r8
    1318:	13310111 	teqne	r1, #1073741828	; 0x40000004
    131c:	00001301 	andeq	r1, r0, r1, lsl #6
    1320:	03003426 	movweq	r3, #1062	; 0x426
    1324:	3b0b3a0e 	blcc	2cfb64 <__bss_end__+0x2c49f4>
    1328:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    132c:	27000017 	smladcs	r0, r7, r0, r0
    1330:	13310005 	teqne	r1, #5
    1334:	05280000 	streq	r0, [r8, #-0]!
    1338:	3a0e0300 	bcc	381f40 <__bss_end__+0x376dd0>
    133c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1340:	00180213 	andseq	r0, r8, r3, lsl r2
    1344:	00342900 	eorseq	r2, r4, r0, lsl #18
    1348:	13490e03 	movtne	r0, #40451	; 0x9e03
    134c:	18021934 	stmdane	r2, {r2, r4, r5, r8, fp, ip}
    1350:	012a0000 	teqeq	sl, r0
    1354:	01134901 	tsteq	r3, r1, lsl #18
    1358:	2b000013 	blcs	13ac <_start-0x6c54>
    135c:	13490021 	movtne	r0, #36897	; 0x9021
    1360:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1364:	0300342c 	movweq	r3, #1068	; 0x42c
    1368:	3b0b3a08 	blcc	2cfb90 <__bss_end__+0x2c4a20>
    136c:	1c13490b 	ldcne	9, cr4, [r3], {11}
    1370:	2d000006 	stccs	0, cr0, [r0, #-24]	; 0xffffffe8
    1374:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1378:	0b3b0b3a 	bleq	ec4068 <__bss_end__+0xeb8ef8>
    137c:	0b1c1349 	bleq	7060a8 <__bss_end__+0x6faf38>
    1380:	052e0000 	streq	r0, [lr, #-0]!
    1384:	3a080300 	bcc	201f8c <__bss_end__+0x1f6e1c>
    1388:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    138c:	00180213 	andseq	r0, r8, r3, lsl r2
    1390:	00182f00 	andseq	r2, r8, r0, lsl #30
    1394:	21300000 	teqcs	r0, r0
    1398:	2f134900 	svccs	0x00134900
    139c:	31000005 	tstcc	r0, r5
    13a0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    13a4:	0b3a0e03 	bleq	e84bb8 <__bss_end__+0xe79a48>
    13a8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    13ac:	1301193c 	movwne	r1, #6460	; 0x193c
    13b0:	05320000 	ldreq	r0, [r2, #-0]!
    13b4:	00134900 	andseq	r4, r3, r0, lsl #18
    13b8:	002e3300 	eoreq	r3, lr, r0, lsl #6
    13bc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    13c0:	0b3b0b3a 	bleq	ec40b0 <__bss_end__+0xeb8f40>
    13c4:	13491927 	movtne	r1, #39207	; 0x9927
    13c8:	0000193c 	andeq	r1, r0, ip, lsr r9
    13cc:	3f012e34 	svccc	0x00012e34
    13d0:	3a0e0319 	bcc	38203c <__bss_end__+0x376ecc>
    13d4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    13d8:	3c134919 	ldccc	9, cr4, [r3], {25}
    13dc:	00130119 	andseq	r0, r3, r9, lsl r1
    13e0:	002e3500 	eoreq	r3, lr, r0, lsl #10
    13e4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    13e8:	0b3b0b3a 	bleq	ec40d8 <__bss_end__+0xeb8f68>
    13ec:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    13f0:	2e360000 	cdpcs	0, 3, cr0, cr6, cr0, {0}
    13f4:	03193f01 	tsteq	r9, #1, 30
    13f8:	3b0b3a0e 	blcc	2cfc38 <__bss_end__+0x2c4ac8>
    13fc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1400:	00193c13 	andseq	r3, r9, r3, lsl ip
    1404:	11010000 	mrsne	r0, (UNDEF: 1)
    1408:	130e2501 	movwne	r2, #58625	; 0xe501
    140c:	1b0e030b 	blne	382040 <__bss_end__+0x376ed0>
    1410:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    1414:	00171006 	andseq	r1, r7, r6
    1418:	00240200 	eoreq	r0, r4, r0, lsl #4
    141c:	0b3e0b0b 	bleq	f84050 <__bss_end__+0xf78ee0>
    1420:	00000803 	andeq	r0, r0, r3, lsl #16
    1424:	0b002403 	bleq	a438 <GPFSEL4>
    1428:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    142c:	0400000e 	streq	r0, [r0], #-14
    1430:	0b0b0104 	bleq	2c1848 <__bss_end__+0x2b66d8>
    1434:	0b3b0b3a 	bleq	ec4124 <__bss_end__+0xeb8fb4>
    1438:	00001301 	andeq	r1, r0, r1, lsl #6
    143c:	03002805 	movweq	r2, #2053	; 0x805
    1440:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    1444:	00160600 	andseq	r0, r6, r0, lsl #12
    1448:	0b3a0e03 	bleq	e84c5c <__bss_end__+0xe79aec>
    144c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1450:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
    1454:	03193f01 	tsteq	r9, #1, 30
    1458:	3b0b3a0e 	blcc	2cfc98 <__bss_end__+0x2c4b28>
    145c:	1119270b 	tstne	r9, fp, lsl #14
    1460:	40061201 	andmi	r1, r6, r1, lsl #4
    1464:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1468:	00001301 	andeq	r1, r0, r1, lsl #6
    146c:	01828908 	orreq	r8, r2, r8, lsl #18
    1470:	31011100 	mrscc	r1, (UNDEF: 17)
    1474:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1478:	01018289 	smlabbeq	r1, r9, r2, r8
    147c:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1480:	00001301 	andeq	r1, r0, r1, lsl #6
    1484:	01828a0a 	orreq	r8, r2, sl, lsl #20
    1488:	91180200 	tstls	r8, r0, lsl #4
    148c:	00001842 	andeq	r1, r0, r2, asr #16
    1490:	3f012e0b 	svccc	0x00012e0b
    1494:	3a0e0319 	bcc	382100 <__bss_end__+0x376f90>
    1498:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    149c:	11134919 	tstne	r3, r9, lsl r9
    14a0:	40061201 	andmi	r1, r6, r1, lsl #4
    14a4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    14a8:	00001301 	andeq	r1, r0, r1, lsl #6
    14ac:	0300050c 	movweq	r0, #1292	; 0x50c
    14b0:	3b0b3a08 	blcc	2cfcd8 <__bss_end__+0x2c4b68>
    14b4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    14b8:	0d000017 	stceq	0, cr0, [r0, #-92]	; 0xffffffa4
    14bc:	01018289 	smlabbeq	r1, r9, r2, r8
    14c0:	13310111 	teqne	r1, #1073741828	; 0x40000004
    14c4:	340e0000 	strcc	r0, [lr], #-0
    14c8:	3a0e0300 	bcc	3820d0 <__bss_end__+0x376f60>
    14cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    14d0:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    14d4:	0f000018 	svceq	0x00000018
    14d8:	0b0b000f 	bleq	2c151c <__bss_end__+0x2b63ac>
    14dc:	00001349 	andeq	r1, r0, r9, asr #6
    14e0:	49003510 	stmdbmi	r0, {r4, r8, sl, ip, sp}
    14e4:	11000013 	tstne	r0, r3, lsl r0
    14e8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    14ec:	0b3a0e03 	bleq	e84d00 <__bss_end__+0xe79b90>
    14f0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    14f4:	0000193c 	andeq	r1, r0, ip, lsr r9
    14f8:	3f012e12 	svccc	0x00012e12
    14fc:	3a0e0319 	bcc	382168 <__bss_end__+0x376ff8>
    1500:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1504:	01193c19 	tsteq	r9, r9, lsl ip
    1508:	13000013 	movwne	r0, #19
    150c:	13490005 	movtne	r0, #36869	; 0x9005
    1510:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    1514:	03193f01 	tsteq	r9, #1, 30
    1518:	3b0b3a0e 	blcc	2cfd58 <__bss_end__+0x2c4be8>
    151c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1520:	01193c13 	tsteq	r9, r3, lsl ip
    1524:	15000013 	strne	r0, [r0, #-19]
    1528:	13490026 	movtne	r0, #36902	; 0x9026
    152c:	35160000 	ldrcc	r0, [r6, #-0]
    1530:	00000000 	andeq	r0, r0, r0
    1534:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    1538:	030b130e 	movweq	r1, #45838	; 0xb30e
    153c:	110e1b0e 	tstne	lr, lr, lsl #22
    1540:	10061201 	andne	r1, r6, r1, lsl #4
    1544:	02000017 	andeq	r0, r0, #23
    1548:	0b0b0024 	bleq	2c15e0 <__bss_end__+0x2b6470>
    154c:	0e030b3e 	vmoveq.16	d3[0], r0
    1550:	24030000 	strcs	r0, [r3], #-0
    1554:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1558:	0008030b 	andeq	r0, r8, fp, lsl #6
    155c:	01040400 	tsteq	r4, r0, lsl #8
    1560:	0b3a0b0b 	bleq	e84194 <__bss_end__+0xe79024>
    1564:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1568:	28050000 	stmdacs	r5, {}	; <UNPREDICTABLE>
    156c:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    1570:	0600000d 	streq	r0, [r0], -sp
    1574:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1578:	0b3b0b3a 	bleq	ec4268 <__bss_end__+0xeb90f8>
    157c:	00001349 	andeq	r1, r0, r9, asr #6
    1580:	3f012e07 	svccc	0x00012e07
    1584:	3a0e0319 	bcc	3821f0 <__bss_end__+0x377080>
    1588:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    158c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1590:	97184006 	ldrls	r4, [r8, -r6]
    1594:	13011942 	movwne	r1, #6466	; 0x1942
    1598:	05080000 	streq	r0, [r8, #-0]
    159c:	3a080300 	bcc	2021a4 <__bss_end__+0x1f7034>
    15a0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    15a4:	00170213 	andseq	r0, r7, r3, lsl r2
    15a8:	00340900 	eorseq	r0, r4, r0, lsl #18
    15ac:	0b3a0e03 	bleq	e84dc0 <__bss_end__+0xe79c50>
    15b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    15b4:	00001702 	andeq	r1, r0, r2, lsl #14
    15b8:	0182890a 	orreq	r8, r2, sl, lsl #18
    15bc:	31011101 	tstcc	r1, r1, lsl #2
    15c0:	00130113 	andseq	r0, r3, r3, lsl r1
    15c4:	828a0b00 	addhi	r0, sl, #0, 22
    15c8:	18020001 	stmdane	r2, {r0}
    15cc:	00184291 	mulseq	r8, r1, r2
    15d0:	82890c00 	addhi	r0, r9, #0, 24
    15d4:	01110101 	tsteq	r1, r1, lsl #2
    15d8:	00001331 	andeq	r1, r0, r1, lsr r3
    15dc:	0b000f0d 	bleq	5218 <_start-0x2de8>
    15e0:	0013490b 	andseq	r4, r3, fp, lsl #18
    15e4:	00350e00 	eorseq	r0, r5, r0, lsl #28
    15e8:	00001349 	andeq	r1, r0, r9, asr #6
    15ec:	3f012e0f 	svccc	0x00012e0f
    15f0:	3a0e0319 	bcc	38225c <__bss_end__+0x3770ec>
    15f4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    15f8:	11134919 	tstne	r3, r9, lsl r9
    15fc:	40061201 	andmi	r1, r6, r1, lsl #4
    1600:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1604:	00001301 	andeq	r1, r0, r1, lsl #6
    1608:	03003410 	movweq	r3, #1040	; 0x410
    160c:	3b0b3a08 	blcc	2cfe34 <__bss_end__+0x2c4cc4>
    1610:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1614:	11000017 	tstne	r0, r7, lsl r0
    1618:	00018289 	andeq	r8, r1, r9, lsl #5
    161c:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1620:	05120000 	ldreq	r0, [r2, #-0]
    1624:	3a0e0300 	bcc	38222c <__bss_end__+0x3770bc>
    1628:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    162c:	00170213 	andseq	r0, r7, r3, lsl r2
    1630:	012e1300 	teqeq	lr, r0, lsl #6
    1634:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1638:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    163c:	13491927 	movtne	r1, #39207	; 0x9927
    1640:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1644:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1648:	00130119 	andseq	r0, r3, r9, lsl r1
    164c:	00051400 	andeq	r1, r5, r0, lsl #8
    1650:	0b3a0e03 	bleq	e84e64 <__bss_end__+0xe79cf4>
    1654:	1349053b 	movtne	r0, #38203	; 0x953b
    1658:	00001702 	andeq	r1, r0, r2, lsl #14
    165c:	3f012e15 	svccc	0x00012e15
    1660:	3a0e0319 	bcc	3822cc <__bss_end__+0x37715c>
    1664:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1668:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    166c:	97184006 	ldrls	r4, [r8, -r6]
    1670:	13011942 	movwne	r1, #6466	; 0x1942
    1674:	05160000 	ldreq	r0, [r6, #-0]
    1678:	3a080300 	bcc	202280 <__bss_end__+0x1f7110>
    167c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1680:	00170213 	andseq	r0, r7, r3, lsl r2
    1684:	00341700 	eorseq	r1, r4, r0, lsl #14
    1688:	0b3a0e03 	bleq	e84e9c <__bss_end__+0xe79d2c>
    168c:	1349053b 	movtne	r0, #38203	; 0x953b
    1690:	00001702 	andeq	r1, r0, r2, lsl #14
    1694:	11010b18 	tstne	r1, r8, lsl fp
    1698:	01061201 	tsteq	r6, r1, lsl #4
    169c:	19000013 	stmdbne	r0, {r0, r1, r4}
    16a0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    16a4:	0b3b0b3a 	bleq	ec4394 <__bss_end__+0xeb9224>
    16a8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    16ac:	00001802 	andeq	r1, r0, r2, lsl #16
    16b0:	3f012e1a 	svccc	0x00012e1a
    16b4:	3a0e0319 	bcc	382320 <__bss_end__+0x3771b0>
    16b8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    16bc:	3c134919 	ldccc	9, cr4, [r3], {25}
    16c0:	00130119 	andseq	r0, r3, r9, lsl r1
    16c4:	00051b00 	andeq	r1, r5, r0, lsl #22
    16c8:	00001349 	andeq	r1, r0, r9, asr #6
    16cc:	4900261c 	stmdbmi	r0, {r2, r3, r4, r9, sl, sp}
    16d0:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    16d4:	00000035 	andeq	r0, r0, r5, lsr r0
    16d8:	3f012e1e 	svccc	0x00012e1e
    16dc:	3a0e0319 	bcc	382348 <__bss_end__+0x3771d8>
    16e0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    16e4:	01193c19 	tsteq	r9, r9, lsl ip
    16e8:	1f000013 	svcne	0x00000013
    16ec:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    16f0:	0b3a0e03 	bleq	e84f04 <__bss_end__+0xe79d94>
    16f4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    16f8:	0000193c 	andeq	r1, r0, ip, lsr r9
    16fc:	01110100 	tsteq	r1, r0, lsl #2
    1700:	0b130e25 	bleq	4c4f9c <__bss_end__+0x4b9e2c>
    1704:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1708:	06120111 			; <UNDEFINED> instruction: 0x06120111
    170c:	00001710 	andeq	r1, r0, r0, lsl r7
    1710:	0b002402 	bleq	a720 <__FUNCTION__.4294+0x12c>
    1714:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1718:	03000008 	movweq	r0, #8
    171c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1720:	0b3b0b3a 	bleq	ec4410 <__bss_end__+0xeb92a0>
    1724:	00001349 	andeq	r1, r0, r9, asr #6
    1728:	0b002404 	bleq	a740 <__FUNCTION__.4294+0x14c>
    172c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1730:	0500000e 	streq	r0, [r0, #-14]
    1734:	0b0b000f 	bleq	2c1778 <__bss_end__+0x2b6608>
    1738:	13060000 	movwne	r0, #24576	; 0x6000
    173c:	3a0b0b01 	bcc	2c4348 <__bss_end__+0x2b91d8>
    1740:	010b3b0b 	tsteq	fp, fp, lsl #22
    1744:	07000013 	smladeq	r0, r3, r0, r0
    1748:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    174c:	0b3b0b3a 	bleq	ec443c <__bss_end__+0xeb92cc>
    1750:	0b381349 	bleq	e0647c <__bss_end__+0xdfb30c>
    1754:	0d080000 	stceq	0, cr0, [r8, #-0]
    1758:	3a0e0300 	bcc	382360 <__bss_end__+0x3771f0>
    175c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1760:	000b3813 	andeq	r3, fp, r3, lsl r8
    1764:	01040900 	tsteq	r4, r0, lsl #18
    1768:	0b3a0b0b 	bleq	e8439c <__bss_end__+0xe7922c>
    176c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1770:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
    1774:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    1778:	0b00000d 	bleq	17b4 <_start-0x684c>
    177c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1780:	0b3a0e03 	bleq	e84f94 <__bss_end__+0xe79e24>
    1784:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1788:	01111349 	tsteq	r1, r9, asr #6
    178c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1790:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1794:	0c000013 	stceq	0, cr0, [r0], {19}
    1798:	08030034 	stmdaeq	r3, {r2, r4, r5}
    179c:	0b3b0b3a 	bleq	ec448c <__bss_end__+0xeb931c>
    17a0:	061c1349 	ldreq	r1, [ip], -r9, asr #6
    17a4:	890d0000 	stmdbhi	sp, {}	; <UNPREDICTABLE>
    17a8:	11010182 	smlabbne	r1, r2, r1, r0
    17ac:	00133101 	andseq	r3, r3, r1, lsl #2
    17b0:	828a0e00 	addhi	r0, sl, #0, 28
    17b4:	18020001 	stmdane	r2, {r0}
    17b8:	00184291 	mulseq	r8, r1, r2
    17bc:	000f0f00 	andeq	r0, pc, r0, lsl #30
    17c0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    17c4:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
    17c8:	03193f01 	tsteq	r9, #1, 30
    17cc:	3b0b3a0e 	blcc	2d000c <__bss_end__+0x2c4e9c>
    17d0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    17d4:	00193c13 	andseq	r3, r9, r3, lsl ip
    17d8:	00051100 	andeq	r1, r5, r0, lsl #2
    17dc:	00001349 	andeq	r1, r0, r9, asr #6
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	00000000 	andeq	r0, r0, r0
       4:	0000000f 	andeq	r0, r0, pc
       8:	0f500001 	svceq	0x00500001
       c:	a4000000 	strge	r0, [r0], #-0
      10:	01000000 	mrseq	r0, (UNDEF: 0)
      14:	00a45500 	adceq	r5, r4, r0, lsl #10
      18:	00b80000 	adcseq	r0, r8, r0
      1c:	00040000 	andeq	r0, r4, r0
      20:	9f5001f3 	svcls	0x005001f3
	...
      2c:	0000000c 	andeq	r0, r0, ip
      30:	0000000f 	andeq	r0, r0, pc
      34:	0f500001 	svceq	0x00500001
      38:	a4000000 	strge	r0, [r0], #-0
      3c:	01000000 	mrseq	r0, (UNDEF: 0)
      40:	00a45500 	adceq	r5, r4, r0, lsl #10
      44:	00b80000 	adcseq	r0, r8, r0
      48:	00040000 	andeq	r0, r4, r0
      4c:	9f5001f3 	svcls	0x005001f3
	...
      58:	00000014 	andeq	r0, r0, r4, lsl r0
      5c:	00000070 	andeq	r0, r0, r0, ror r0
      60:	00540001 	subseq	r0, r4, r1
      64:	00000000 	andeq	r0, r0, r0
      68:	dc000000 	stcle	0, cr0, [r0], {-0}
      6c:	ec000000 	stc	0, cr0, [r0], {-0}
      70:	02000000 	andeq	r0, r0, #0
      74:	ec9f3000 	ldc	0, cr3, [pc], {0}
      78:	b0000000 	andlt	r0, r0, r0
      7c:	01000001 	tsteq	r0, r1
      80:	00005500 	andeq	r5, r0, r0, lsl #10
      84:	00000000 	andeq	r0, r0, r0
      88:	00dc0000 	sbcseq	r0, ip, r0
      8c:	00ec0000 	rsceq	r0, ip, r0
      90:	00020000 	andeq	r0, r2, r0
      94:	00ec9f30 	rsceq	r9, ip, r0, lsr pc
      98:	011c0000 	tsteq	ip, r0
      9c:	00010000 	andeq	r0, r1, r0
      a0:	00000054 	andeq	r0, r0, r4, asr r0
      a4:	00000000 	andeq	r0, r0, r0
      a8:	0000f800 	andeq	pc, r0, r0, lsl #16
      ac:	00010400 	andeq	r0, r1, r0, lsl #8
      b0:	50000100 	andpl	r0, r0, r0, lsl #2
      b4:	00000104 	andeq	r0, r0, r4, lsl #2
      b8:	00000107 	andeq	r0, r0, r7, lsl #2
      bc:	00510001 	subseq	r0, r1, r1
	...
      c8:	04000000 	streq	r0, [r0], #-0
      cc:	01000000 	mrseq	r0, (UNDEF: 0)
      d0:	00045000 	andeq	r5, r4, r0
      d4:	00080000 	andeq	r0, r8, r0
      d8:	00040000 	andeq	r0, r4, r0
      dc:	9f5001f3 	svcls	0x005001f3
	...
      e8:	00000068 	andeq	r0, r0, r8, rrx
      ec:	00000074 	andeq	r0, r0, r4, ror r0
      f0:	74500001 	ldrbvc	r0, [r0], #-1
      f4:	77000000 	strvc	r0, [r0, -r0]
      f8:	01000000 	mrseq	r0, (UNDEF: 0)
      fc:	00775100 	rsbseq	r5, r7, r0, lsl #2
     100:	00800000 	addeq	r0, r0, r0
     104:	00040000 	andeq	r0, r4, r0
     108:	9f5001f3 	svcls	0x005001f3
	...
     114:	00000080 	andeq	r0, r0, r0, lsl #1
     118:	00000097 	muleq	r0, r7, r0
     11c:	97500001 	ldrbls	r0, [r0, -r1]
     120:	e4000000 	str	r0, [r0], #-0
     124:	01000000 	mrseq	r0, (UNDEF: 0)
     128:	00e45400 	rsceq	r5, r4, r0, lsl #8
     12c:	00e80000 	rsceq	r0, r8, r0
     130:	00010000 	andeq	r0, r1, r0
     134:	0000e850 	andeq	lr, r0, r0, asr r8
     138:	00010400 	andeq	r0, r1, r0, lsl #8
     13c:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     148:	00000104 	andeq	r0, r0, r4, lsl #2
     14c:	00000113 	andeq	r0, r0, r3, lsl r1
     150:	13500001 	cmpne	r0, #1
     154:	2c000001 	stccs	0, cr0, [r0], {1}
     158:	04000001 	streq	r0, [r0], #-1
     15c:	5001f300 	andpl	pc, r1, r0, lsl #6
     160:	00012c9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
     164:	00013b00 	andeq	r3, r1, r0, lsl #22
     168:	50000100 	andpl	r0, r0, r0, lsl #2
     16c:	0000013b 	andeq	r0, r0, fp, lsr r1
     170:	00000160 	andeq	r0, r0, r0, ror #2
     174:	01f30004 	mvnseq	r0, r4
     178:	01609f50 	cmneq	r0, r0, asr pc
     17c:	01800000 	orreq	r0, r0, r0
     180:	00010000 	andeq	r0, r1, r0
     184:	00018050 	andeq	r8, r1, r0, asr r0
     188:	00019c00 	andeq	r9, r1, r0, lsl #24
     18c:	f3000400 	vshl.u8	d0, d0, d0
     190:	009f5001 	addseq	r5, pc, r1
     194:	00000000 	andeq	r0, r0, r0
     198:	30000000 	andcc	r0, r0, r0
     19c:	3b000001 	blcc	1a8 <_start-0x7e58>
     1a0:	01000001 	tsteq	r0, r1
     1a4:	01605300 	cmneq	r0, r0, lsl #6
     1a8:	01840000 	orreq	r0, r4, r0
     1ac:	00010000 	andeq	r0, r1, r0
     1b0:	00000053 	andeq	r0, r0, r3, asr r0
     1b4:	00000000 	andeq	r0, r0, r0
     1b8:	0001a800 	andeq	sl, r1, r0, lsl #16
     1bc:	0001b400 	andeq	fp, r1, r0, lsl #8
     1c0:	50000100 	andpl	r0, r0, r0, lsl #2
     1c4:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     1c8:	000001d7 	ldrdeq	r0, [r0], -r7
     1cc:	f0500001 			; <UNDEFINED> instruction: 0xf0500001
     1d0:	20000001 	andcs	r0, r0, r1
     1d4:	01000002 	tsteq	r0, r2
     1d8:	00005000 	andeq	r5, r0, r0
     1dc:	00000000 	andeq	r0, r0, r0
     1e0:	02300000 	eorseq	r0, r0, #0
     1e4:	023f0000 	eorseq	r0, pc, #0
     1e8:	00010000 	andeq	r0, r1, r0
     1ec:	00023f50 	andeq	r3, r2, r0, asr pc
     1f0:	00027c00 	andeq	r7, r2, r0, lsl #24
     1f4:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     200:	00000230 	andeq	r0, r0, r0, lsr r2
     204:	0000023f 	andeq	r0, r0, pc, lsr r2
     208:	3f510001 	svccc	0x00510001
     20c:	7c000002 	stcvc	0, cr0, [r0], {2}
     210:	01000002 	tsteq	r0, r2
     214:	00005500 	andeq	r5, r0, r0, lsl #10
     218:	00000000 	andeq	r0, r0, r0
     21c:	02440000 	subeq	r0, r4, #0
     220:	02640000 	rsbeq	r0, r4, #0
     224:	00010000 	andeq	r0, r1, r0
     228:	00026450 	andeq	r6, r2, r0, asr r4
     22c:	00027c00 	andeq	r7, r2, r0, lsl #24
     230:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     23c:	0000027c 	andeq	r0, r0, ip, ror r2
     240:	0000028c 	andeq	r0, r0, ip, lsl #5
     244:	8c500001 	mrrchi	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     248:	d4000002 	strle	r0, [r0], #-2
     24c:	04000002 	streq	r0, [r0], #-2
     250:	5001f300 	andpl	pc, r1, r0, lsl #6
     254:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     258:	00000000 	andeq	r0, r0, r0
     25c:	00033c00 	andeq	r3, r3, r0, lsl #24
     260:	00034000 	andeq	r4, r3, r0
     264:	50000100 	andpl	r0, r0, r0, lsl #2
     268:	00000340 	andeq	r0, r0, r0, asr #6
     26c:	000003a8 	andeq	r0, r0, r8, lsr #7
     270:	00560001 	subseq	r0, r6, r1
     274:	00000000 	andeq	r0, r0, r0
     278:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     27c:	5b000003 	blpl	290 <_start-0x7d70>
     280:	01000003 	tsteq	r0, r3
     284:	035b5000 	cmpeq	fp, #0
     288:	03880000 	orreq	r0, r8, #0
     28c:	00010000 	andeq	r0, r1, r0
     290:	00038855 	andeq	r8, r3, r5, asr r8
     294:	00038c00 	andeq	r8, r3, r0, lsl #24
     298:	50000100 	andpl	r0, r0, r0, lsl #2
     29c:	0000038c 	andeq	r0, r0, ip, lsl #7
     2a0:	000003a8 	andeq	r0, r0, r8, lsr #7
     2a4:	00550001 	subseq	r0, r5, r1
     2a8:	00000000 	andeq	r0, r0, r0
     2ac:	4c000000 	stcmi	0, cr0, [r0], {-0}
     2b0:	a8000003 	stmdage	r0, {r0, r1}
     2b4:	01000003 	tsteq	r0, r3
     2b8:	00005700 	andeq	r5, r0, r0, lsl #14
     2bc:	00000000 	andeq	r0, r0, r0
     2c0:	04400000 	strbeq	r0, [r0], #-0
     2c4:	04470000 	strbeq	r0, [r7], #-0
     2c8:	00010000 	andeq	r0, r1, r0
     2cc:	00044750 	andeq	r4, r4, r0, asr r7
     2d0:	00046c00 	andeq	r6, r4, r0, lsl #24
     2d4:	f3000400 	vshl.u8	d0, d0, d0
     2d8:	009f5001 	addseq	r5, pc, r1
     2dc:	00000000 	andeq	r0, r0, r0
     2e0:	6c000000 	stcvs	0, cr0, [r0], {-0}
     2e4:	73000004 	movwvc	r0, #4
     2e8:	01000004 	tsteq	r0, r4
     2ec:	04735000 	ldrbteq	r5, [r3], #-0
     2f0:	04980000 	ldreq	r0, [r8], #0
     2f4:	00040000 	andeq	r0, r4, r0
     2f8:	9f5001f3 	svcls	0x005001f3
	...
     308:	00000054 	andeq	r0, r0, r4, asr r0
     30c:	54500001 	ldrbpl	r0, [r0], #-1
     310:	80000000 	andhi	r0, r0, r0
     314:	04000000 	streq	r0, [r0], #-0
     318:	5001f300 	andpl	pc, r1, r0, lsl #6
     31c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     320:	00000000 	andeq	r0, r0, r0
     324:	00001800 	andeq	r1, r0, r0, lsl #16
     328:	00005400 	andeq	r5, r0, r0, lsl #8
     32c:	50000100 	andpl	r0, r0, r0, lsl #2
     330:	00000054 	andeq	r0, r0, r4, asr r0
     334:	00000080 	andeq	r0, r0, r0, lsl #1
     338:	01f30004 	mvnseq	r0, r4
     33c:	00009f50 	andeq	r9, r0, r0, asr pc
     340:	00000000 	andeq	r0, r0, r0
     344:	002c0000 	eoreq	r0, ip, r0
     348:	00540000 	subseq	r0, r4, r0
     34c:	00010000 	andeq	r0, r1, r0
     350:	00005450 	andeq	r5, r0, r0, asr r4
     354:	00008000 	andeq	r8, r0, r0
     358:	f3000400 	vshl.u8	d0, d0, d0
     35c:	009f5001 	addseq	r5, pc, r1
     360:	00000000 	andeq	r0, r0, r0
     364:	80000000 	andhi	r0, r0, r0
     368:	9b000000 	blls	370 <_start-0x7c90>
     36c:	01000000 	mrseq	r0, (UNDEF: 0)
     370:	009b5000 	addseq	r5, fp, r0
     374:	00c40000 	sbceq	r0, r4, r0
     378:	00040000 	andeq	r0, r4, r0
     37c:	9f5001f3 	svcls	0x005001f3
	...
     388:	000000c4 	andeq	r0, r0, r4, asr #1
     38c:	000000db 	ldrdeq	r0, [r0], -fp
     390:	db500001 	blle	140039c <__bss_end__+0x13f522c>
     394:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
     398:	01000002 	tsteq	r0, r2
     39c:	00005400 	andeq	r5, r0, r0, lsl #8
     3a0:	00000000 	andeq	r0, r0, r0
     3a4:	00c40000 	sbceq	r0, r4, r0
     3a8:	00d40000 	sbcseq	r0, r4, r0
     3ac:	00010000 	andeq	r0, r1, r0
     3b0:	0000d451 	andeq	sp, r0, r1, asr r4
     3b4:	00011000 	andeq	r1, r1, r0
     3b8:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     3bc:	00000110 	andeq	r0, r0, r0, lsl r1
     3c0:	00000278 	andeq	r0, r0, r8, ror r2
     3c4:	01f30004 	mvnseq	r0, r4
     3c8:	00009f51 	andeq	r9, r0, r1, asr pc
     3cc:	00000000 	andeq	r0, r0, r0
     3d0:	01bc0000 			; <UNDEFINED> instruction: 0x01bc0000
     3d4:	01e40000 	mvneq	r0, r0
     3d8:	00020000 	andeq	r0, r2, r0
     3dc:	01e49f42 	mvneq	r9, r2, asr #30
     3e0:	01fc0000 	mvnseq	r0, r0
     3e4:	00010000 	andeq	r0, r1, r0
     3e8:	0001fc51 	andeq	pc, r1, r1, asr ip	; <UNPREDICTABLE>
     3ec:	00020400 	andeq	r0, r2, r0, lsl #8
     3f0:	42000200 	andmi	r0, r0, #0, 4
     3f4:	0002049f 	muleq	r2, pc, r4	; <UNPREDICTABLE>
     3f8:	00022f00 	andeq	r2, r2, r0, lsl #30
     3fc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     408:	000001dc 	ldrdeq	r0, [r0], -ip
     40c:	000001e8 	andeq	r0, r0, r8, ror #3
     410:	e8520001 	ldmda	r2, {r0}^
     414:	ec000001 	stc	0, cr0, [r0], {1}
     418:	03000001 	movweq	r0, #1
     41c:	9f7f7200 	svcls	0x007f7200
	...
     428:	00000278 	andeq	r0, r0, r8, ror r2
     42c:	00000290 	muleq	r0, r0, r2
     430:	90500001 	subsls	r0, r0, r1
     434:	e4000002 	str	r0, [r0], #-2
     438:	01000002 	tsteq	r0, r2
     43c:	00005300 	andeq	r5, r0, r0, lsl #6
     440:	00000000 	andeq	r0, r0, r0
     444:	02ac0000 	adceq	r0, ip, #0
     448:	02c40000 	sbceq	r0, r4, #0
     44c:	00010000 	andeq	r0, r1, r0
     450:	00000055 	andeq	r0, r0, r5, asr r0
     454:	00000000 	andeq	r0, r0, r0
     458:	0002a400 	andeq	sl, r2, r0, lsl #8
     45c:	0002b000 	andeq	fp, r2, r0
     460:	51000100 	mrspl	r0, (UNDEF: 16)
     464:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
     468:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
     46c:	7f710003 	svcvc	0x00710003
     470:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     474:	00000000 	andeq	r0, r0, r0
     478:	0002e400 	andeq	lr, r2, r0, lsl #8
     47c:	0002fc00 	andeq	pc, r2, r0, lsl #24
     480:	50000100 	andpl	r0, r0, r0, lsl #2
     484:	000002fc 	strdeq	r0, [r0], -ip
     488:	00000318 	andeq	r0, r0, r8, lsl r3
     48c:	00570001 	subseq	r0, r7, r1
     490:	00000000 	andeq	r0, r0, r0
     494:	e4000000 	str	r0, [r0], #-0
     498:	fc000002 	stc2	0, cr0, [r0], {2}
     49c:	01000002 	tsteq	r0, r2
     4a0:	02fc5100 	rscseq	r5, ip, #0, 2
     4a4:	03180000 	tsteq	r8, #0
     4a8:	00010000 	andeq	r0, r1, r0
     4ac:	00000056 	andeq	r0, r0, r6, asr r0
     4b0:	00000000 	andeq	r0, r0, r0
     4b4:	0002e400 	andeq	lr, r2, r0, lsl #8
     4b8:	0002fc00 	andeq	pc, r2, r0, lsl #24
     4bc:	52000100 	andpl	r0, r0, #0, 2
     4c0:	000002fc 	strdeq	r0, [r0], -ip
     4c4:	00000318 	andeq	r0, r0, r8, lsl r3
     4c8:	00550001 	subseq	r0, r5, r1
     4cc:	00000000 	andeq	r0, r0, r0
     4d0:	f4000000 	vst4.8	{d0-d3}, [r0], r0
     4d4:	fc000002 	stc2	0, cr0, [r0], {2}
     4d8:	01000002 	tsteq	r0, r2
     4dc:	02fc5100 	rscseq	r5, ip, #0, 2
     4e0:	03180000 	tsteq	r8, #0
     4e4:	00010000 	andeq	r0, r1, r0
     4e8:	00000056 	andeq	r0, r0, r6, asr r0
     4ec:	00000000 	andeq	r0, r0, r0
     4f0:	0002f400 	andeq	pc, r2, r0, lsl #8
     4f4:	0002fc00 	andeq	pc, r2, r0, lsl #24
     4f8:	30000200 	andcc	r0, r0, r0, lsl #4
     4fc:	0002fc9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
     500:	00031800 	andeq	r1, r3, r0, lsl #16
     504:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     510:	00000318 	andeq	r0, r0, r8, lsl r3
     514:	0000032b 	andeq	r0, r0, fp, lsr #6
     518:	2b500001 	blcs	1400524 <__bss_end__+0x13f53b4>
     51c:	70000003 	andvc	r0, r0, r3
     520:	01000003 	tsteq	r0, r3
     524:	00005400 	andeq	r5, r0, r0, lsl #8
     528:	00000000 	andeq	r0, r0, r0
     52c:	03180000 	tsteq	r8, #0
     530:	032b0000 	teqeq	fp, #0
     534:	00010000 	andeq	r0, r1, r0
     538:	00032b51 	andeq	r2, r3, r1, asr fp
     53c:	00037000 	andeq	r7, r3, r0
     540:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     54c:	00000318 	andeq	r0, r0, r8, lsl r3
     550:	0000032b 	andeq	r0, r0, fp, lsr #6
     554:	2b520001 	blcs	1480560 <__bss_end__+0x14753f0>
     558:	70000003 	andvc	r0, r0, r3
     55c:	01000003 	tsteq	r0, r3
     560:	00005500 	andeq	r5, r0, r0, lsl #10
     564:	00000000 	andeq	r0, r0, r0
     568:	03700000 	cmneq	r0, #0
     56c:	03a70000 			; <UNDEFINED> instruction: 0x03a70000
     570:	00010000 	andeq	r0, r1, r0
     574:	0003a750 	andeq	sl, r3, r0, asr r7
     578:	0003f000 	andeq	pc, r3, r0
     57c:	54000100 	strpl	r0, [r0], #-256	; 0x100
     580:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     584:	000003f4 	strdeq	r0, [r0], -r4
     588:	f4500001 			; <UNDEFINED> instruction: 0xf4500001
     58c:	14000003 	strne	r0, [r0], #-3
     590:	01000004 	tsteq	r0, r4
     594:	00005400 	andeq	r5, r0, r0, lsl #8
     598:	00000000 	andeq	r0, r0, r0
     59c:	03700000 	cmneq	r0, #0
     5a0:	03a70000 			; <UNDEFINED> instruction: 0x03a70000
     5a4:	00010000 	andeq	r0, r1, r0
     5a8:	0003a751 	andeq	sl, r3, r1, asr r7
     5ac:	0003f000 	andeq	pc, r3, r0
     5b0:	f3000400 	vshl.u8	d0, d0, d0
     5b4:	f09f5101 			; <UNDEFINED> instruction: 0xf09f5101
     5b8:	f8000003 			; <UNDEFINED> instruction: 0xf8000003
     5bc:	01000003 	tsteq	r0, r3
     5c0:	03f85100 	mvnseq	r5, #0, 2
     5c4:	04140000 	ldreq	r0, [r4], #-0
     5c8:	00040000 	andeq	r0, r4, r0
     5cc:	9f5101f3 	svcls	0x005101f3
	...
     5d8:	00000370 	andeq	r0, r0, r0, ror r3
     5dc:	000003a7 	andeq	r0, r0, r7, lsr #7
     5e0:	a7520001 	ldrbge	r0, [r2, -r1]
     5e4:	f0000003 			; <UNDEFINED> instruction: 0xf0000003
     5e8:	04000003 	streq	r0, [r0], #-3
     5ec:	5201f300 	andpl	pc, r1, #0, 6
     5f0:	0003f09f 	muleq	r3, pc, r0	; <UNPREDICTABLE>
     5f4:	0003f800 	andeq	pc, r3, r0, lsl #16
     5f8:	52000100 	andpl	r0, r0, #0, 2
     5fc:	000003f8 	strdeq	r0, [r0], -r8
     600:	00000414 	andeq	r0, r0, r4, lsl r4
     604:	01f30004 	mvnseq	r0, r4
     608:	00009f52 	andeq	r9, r0, r2, asr pc
     60c:	00000000 	andeq	r0, r0, r0
     610:	03a40000 			; <UNDEFINED> instruction: 0x03a40000
     614:	03f00000 	mvnseq	r0, #0
     618:	00010000 	andeq	r0, r1, r0
     61c:	0003f856 	andeq	pc, r3, r6, asr r8	; <UNPREDICTABLE>
     620:	00041400 	andeq	r1, r4, r0, lsl #8
     624:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     630:	00000378 	andeq	r0, r0, r8, ror r3
     634:	000003a7 	andeq	r0, r0, r7, lsr #7
     638:	a7500001 	ldrbge	r0, [r0, -r1]
     63c:	f0000003 			; <UNDEFINED> instruction: 0xf0000003
     640:	01000003 	tsteq	r0, r3
     644:	03f05400 	mvnseq	r5, #0, 8
     648:	03f40000 	mvnseq	r0, #0
     64c:	00010000 	andeq	r0, r1, r0
     650:	0003f450 	andeq	pc, r3, r0, asr r4	; <UNPREDICTABLE>
     654:	00041400 	andeq	r1, r4, r0, lsl #8
     658:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     664:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
     668:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     66c:	f8540001 			; <UNDEFINED> instruction: 0xf8540001
     670:	14000003 	strne	r0, [r0], #-3
     674:	01000004 	tsteq	r0, r4
     678:	00005400 	andeq	r5, r0, r0, lsl #8
     67c:	00000000 	andeq	r0, r0, r0
     680:	04140000 	ldreq	r0, [r4], #-0
     684:	04a70000 	strteq	r0, [r7], #0
     688:	00010000 	andeq	r0, r1, r0
     68c:	0004a750 	andeq	sl, r4, r0, asr r7
     690:	0004c000 	andeq	ip, r4, r0
     694:	f3000400 	vshl.u8	d0, d0, d0
     698:	c09f5001 	addsgt	r5, pc, r1
     69c:	ef000004 	svc	0x00000004
     6a0:	01000004 	tsteq	r0, r4
     6a4:	04ef5000 	strbteq	r5, [pc], #0	; 6ac <_start-0x7954>
     6a8:	05080000 	streq	r0, [r8, #-0]
     6ac:	00040000 	andeq	r0, r4, r0
     6b0:	9f5001f3 	svcls	0x005001f3
     6b4:	00000508 	andeq	r0, r0, r8, lsl #10
     6b8:	0000050c 	andeq	r0, r0, ip, lsl #10
     6bc:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     6c0:	10000005 	andne	r0, r0, r5
     6c4:	04000005 	streq	r0, [r0], #-5
     6c8:	5001f300 	andpl	pc, r1, r0, lsl #6
     6cc:	0005109f 	muleq	r5, pc, r0	; <UNPREDICTABLE>
     6d0:	00051400 	andeq	r1, r5, r0, lsl #8
     6d4:	50000100 	andpl	r0, r0, r0, lsl #2
     6d8:	00000514 	andeq	r0, r0, r4, lsl r5
     6dc:	00000518 	andeq	r0, r0, r8, lsl r5
     6e0:	01f30004 	mvnseq	r0, r4
     6e4:	05189f50 	ldreq	r9, [r8, #-3920]	; 0xf50
     6e8:	051c0000 	ldreq	r0, [ip, #-0]
     6ec:	00010000 	andeq	r0, r1, r0
     6f0:	00051c50 	andeq	r1, r5, r0, asr ip
     6f4:	00053800 	andeq	r3, r5, r0, lsl #16
     6f8:	f3000400 	vshl.u8	d0, d0, d0
     6fc:	009f5001 	addseq	r5, pc, r1
     700:	00000000 	andeq	r0, r0, r0
     704:	14000000 	strne	r0, [r0], #-0
     708:	a7000004 	strge	r0, [r0, -r4]
     70c:	01000004 	tsteq	r0, r4
     710:	04a75100 	strteq	r5, [r7], #256	; 0x100
     714:	04c00000 	strbeq	r0, [r0], #0
     718:	00040000 	andeq	r0, r4, r0
     71c:	9f5101f3 	svcls	0x005101f3
     720:	000004c0 	andeq	r0, r0, r0, asr #9
     724:	000004ef 	andeq	r0, r0, pc, ror #9
     728:	ef510001 	svc	0x00510001
     72c:	08000004 	stmdaeq	r0, {r2}
     730:	04000005 	streq	r0, [r0], #-5
     734:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     738:	0005089f 	muleq	r5, pc, r8	; <UNPREDICTABLE>
     73c:	00053800 	andeq	r3, r5, r0, lsl #16
     740:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     74c:	00000414 	andeq	r0, r0, r4, lsl r4
     750:	000004a7 	andeq	r0, r0, r7, lsr #9
     754:	a7520001 	ldrbge	r0, [r2, -r1]
     758:	c0000004 	andgt	r0, r0, r4
     75c:	04000004 	streq	r0, [r0], #-4
     760:	5201f300 	andpl	pc, r1, #0, 6
     764:	0004c09f 	muleq	r4, pc, r0	; <UNPREDICTABLE>
     768:	0004dc00 	andeq	sp, r4, r0, lsl #24
     76c:	52000100 	andpl	r0, r0, #0, 2
     770:	000004dc 	ldrdeq	r0, [r0], -ip
     774:	00000508 	andeq	r0, r0, r8, lsl #10
     778:	01f30004 	mvnseq	r0, r4
     77c:	05089f52 	streq	r9, [r8, #-3922]	; 0xf52
     780:	05180000 	ldreq	r0, [r8, #-0]
     784:	00010000 	andeq	r0, r1, r0
     788:	00051852 	andeq	r1, r5, r2, asr r8
     78c:	00053800 	andeq	r3, r5, r0, lsl #16
     790:	f3000400 	vshl.u8	d0, d0, d0
     794:	009f5201 	addseq	r5, pc, r1, lsl #4
     798:	00000000 	andeq	r0, r0, r0
     79c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     7a0:	a7000004 	strge	r0, [r0, -r4]
     7a4:	01000004 	tsteq	r0, r4
     7a8:	04a75100 	strteq	r5, [r7], #256	; 0x100
     7ac:	04c00000 	strbeq	r0, [r0], #0
     7b0:	00040000 	andeq	r0, r4, r0
     7b4:	9f5101f3 	svcls	0x005101f3
     7b8:	000004c0 	andeq	r0, r0, r0, asr #9
     7bc:	000004ef 	andeq	r0, r0, pc, ror #9
     7c0:	ef510001 	svc	0x00510001
     7c4:	08000004 	stmdaeq	r0, {r2}
     7c8:	04000005 	streq	r0, [r0], #-5
     7cc:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     7d0:	0005089f 	muleq	r5, pc, r8	; <UNPREDICTABLE>
     7d4:	00053800 	andeq	r3, r5, r0, lsl #16
     7d8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     7e4:	00000418 	andeq	r0, r0, r8, lsl r4
     7e8:	000004a7 	andeq	r0, r0, r7, lsr #9
     7ec:	a7500001 	ldrbge	r0, [r0, -r1]
     7f0:	c0000004 	andgt	r0, r0, r4
     7f4:	04000004 	streq	r0, [r0], #-4
     7f8:	5001f300 	andpl	pc, r1, r0, lsl #6
     7fc:	0004c09f 	muleq	r4, pc, r0	; <UNPREDICTABLE>
     800:	0004ef00 	andeq	lr, r4, r0, lsl #30
     804:	50000100 	andpl	r0, r0, r0, lsl #2
     808:	000004ef 	andeq	r0, r0, pc, ror #9
     80c:	00000508 	andeq	r0, r0, r8, lsl #10
     810:	01f30004 	mvnseq	r0, r4
     814:	05089f50 	streq	r9, [r8, #-3920]	; 0xf50
     818:	050c0000 	streq	r0, [ip, #-0]
     81c:	00010000 	andeq	r0, r1, r0
     820:	00050c50 	andeq	r0, r5, r0, asr ip
     824:	00051000 	andeq	r1, r5, r0
     828:	f3000400 	vshl.u8	d0, d0, d0
     82c:	109f5001 	addsne	r5, pc, r1
     830:	14000005 	strne	r0, [r0], #-5
     834:	01000005 	tsteq	r0, r5
     838:	05145000 	ldreq	r5, [r4, #-0]
     83c:	05180000 	ldreq	r0, [r8, #-0]
     840:	00040000 	andeq	r0, r4, r0
     844:	9f5001f3 	svcls	0x005001f3
     848:	00000518 	andeq	r0, r0, r8, lsl r5
     84c:	0000051c 	andeq	r0, r0, ip, lsl r5
     850:	1c500001 	mrrcne	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     854:	38000005 	stmdacc	r0, {r0, r2}
     858:	04000005 	streq	r0, [r0], #-5
     85c:	5001f300 	andpl	pc, r1, r0, lsl #6
     860:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     864:	00000000 	andeq	r0, r0, r0
     868:	00045800 	andeq	r5, r4, r0, lsl #16
     86c:	0004a700 	andeq	sl, r4, r0, lsl #14
     870:	53000100 	movwpl	r0, #256	; 0x100
     874:	000004c0 	andeq	r0, r0, r0, asr #9
     878:	000004d8 	ldrdeq	r0, [r0], -r8
     87c:	10530001 	subsne	r0, r3, r1
     880:	18000005 	stmdane	r0, {r0, r2}
     884:	01000005 	tsteq	r0, r5
     888:	00005300 	andeq	r5, r0, r0, lsl #6
     88c:	00000000 	andeq	r0, r0, r0
     890:	045c0000 	ldrbeq	r0, [ip], #-0
     894:	04800000 	streq	r0, [r0], #0
     898:	00050000 	andeq	r0, r5, r0
     89c:	00730071 	rsbseq	r0, r3, r1, ror r0
     8a0:	00048022 	andeq	r8, r4, r2, lsr #32
     8a4:	00049800 	andeq	r9, r4, r0, lsl #16
     8a8:	5a000100 	bpl	cb0 <_start-0x7350>
     8ac:	00000498 	muleq	r0, r8, r4
     8b0:	0000049c 	muleq	r0, ip, r4
     8b4:	00710005 	rsbseq	r0, r1, r5
     8b8:	9c220073 	stcls	0, cr0, [r2], #-460	; 0xfffffe34
     8bc:	c4000004 	strgt	r0, [r0], #-4
     8c0:	01000004 	tsteq	r0, r4
     8c4:	00005a00 	andeq	r5, r0, r0, lsl #20
     8c8:	00000000 	andeq	r0, r0, r0
     8cc:	045c0000 	ldrbeq	r0, [ip], #-0
     8d0:	04a70000 	strteq	r0, [r7], #0
     8d4:	00010000 	andeq	r0, r1, r0
     8d8:	0004a750 	andeq	sl, r4, r0, asr r7
     8dc:	0004c000 	andeq	ip, r4, r0
     8e0:	f3000400 	vshl.u8	d0, d0, d0
     8e4:	c09f5001 	addsgt	r5, pc, r1
     8e8:	c4000004 	strgt	r0, [r0], #-4
     8ec:	01000004 	tsteq	r0, r4
     8f0:	00005000 	andeq	r5, r0, r0
     8f4:	00000000 	andeq	r0, r0, r0
     8f8:	04600000 	strbteq	r0, [r0], #-0
     8fc:	04840000 	streq	r0, [r4], #0
     900:	00010000 	andeq	r0, r1, r0
     904:	00048454 	andeq	r8, r4, r4, asr r4
     908:	00048800 	andeq	r8, r4, r0, lsl #16
     90c:	74000300 	strvc	r0, [r0], #-768	; 0x300
     910:	04989f7f 	ldreq	r9, [r8], #3967	; 0xf7f
     914:	049c0000 	ldreq	r0, [ip], #0
     918:	00010000 	andeq	r0, r1, r0
     91c:	00000054 	andeq	r0, r0, r4, asr r0
     920:	00000000 	andeq	r0, r0, r0
     924:	00046400 	andeq	r6, r4, r0, lsl #8
     928:	0004a700 	andeq	sl, r4, r0, lsl #14
     92c:	50000100 	andpl	r0, r0, r0, lsl #2
     930:	000004a7 	andeq	r0, r0, r7, lsr #9
     934:	000004c0 	andeq	r0, r0, r0, asr #9
     938:	01f30004 	mvnseq	r0, r4
     93c:	04c09f50 	strbeq	r9, [r0], #3920	; 0xf50
     940:	04c40000 	strbeq	r0, [r4], #0
     944:	00010000 	andeq	r0, r1, r0
     948:	00000050 	andeq	r0, r0, r0, asr r0
     94c:	00000000 	andeq	r0, r0, r0
     950:	0004d400 	andeq	sp, r4, r0, lsl #8
     954:	0004ef00 	andeq	lr, r4, r0, lsl #30
     958:	50000100 	andpl	r0, r0, r0, lsl #2
     95c:	000004ef 	andeq	r0, r0, pc, ror #9
     960:	00000508 	andeq	r0, r0, r8, lsl #10
     964:	01f30004 	mvnseq	r0, r4
     968:	05189f50 	ldreq	r9, [r8, #-3920]	; 0xf50
     96c:	051c0000 	ldreq	r0, [ip, #-0]
     970:	00010000 	andeq	r0, r1, r0
     974:	00051c50 	andeq	r1, r5, r0, asr ip
     978:	00053800 	andeq	r3, r5, r0, lsl #16
     97c:	f3000400 	vshl.u8	d0, d0, d0
     980:	009f5001 	addseq	r5, pc, r1
	...
     98c:	04000000 	streq	r0, [r0], #-0
     990:	01000000 	mrseq	r0, (UNDEF: 0)
     994:	00045200 	andeq	r5, r4, r0, lsl #4
     998:	00200000 	eoreq	r0, r0, r0
     99c:	00040000 	andeq	r0, r4, r0
     9a0:	9f5201f3 	svcls	0x005201f3
	...
     9b0:	0000000c 	andeq	r0, r0, ip
     9b4:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     9b8:	14000000 	strne	r0, [r0], #-0
     9bc:	03000000 	movweq	r0, #0
     9c0:	9f017300 	svcls	0x00017300
     9c4:	00000014 	andeq	r0, r0, r4, lsl r0
     9c8:	00000020 	andeq	r0, r0, r0, lsr #32
     9cc:	00530001 	subseq	r0, r3, r1
     9d0:	00000000 	andeq	r0, r0, r0
     9d4:	2c000000 	stccs	0, cr0, [r0], {-0}
     9d8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     9dc:	01000000 	mrseq	r0, (UNDEF: 0)
     9e0:	00385000 	eorseq	r5, r8, r0
     9e4:	00480000 	subeq	r0, r8, r0
     9e8:	00010000 	andeq	r0, r1, r0
     9ec:	00004855 	andeq	r4, r0, r5, asr r8
     9f0:	00005800 	andeq	r5, r0, r0, lsl #16
     9f4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     a04:	0000000b 	andeq	r0, r0, fp
     a08:	0b500001 	bleq	1400a14 <__bss_end__+0x13f58a4>
     a0c:	14000000 	strne	r0, [r0], #-0
     a10:	01000000 	mrseq	r0, (UNDEF: 0)
     a14:	00005400 	andeq	r5, r0, r0, lsl #8
	...
     a20:	00100000 	andseq	r0, r0, r0
     a24:	00010000 	andeq	r0, r1, r0
     a28:	00001050 	andeq	r1, r0, r0, asr r0
     a2c:	00003400 	andeq	r3, r0, r0, lsl #8
     a30:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     a40:	00000004 	andeq	r0, r0, r4
     a44:	04500001 	ldrbeq	r0, [r0], #-1
     a48:	0c000000 	stceq	0, cr0, [r0], {-0}
     a4c:	03000000 	movweq	r0, #0
     a50:	9f307000 	svcls	0x00307000
     a54:	0000000c 	andeq	r0, r0, ip
     a58:	00000014 	andeq	r0, r0, r4, lsl r0
     a5c:	01f30004 	mvnseq	r0, r4
     a60:	00009f50 	andeq	r9, r0, r0, asr pc
     a64:	00000000 	andeq	r0, r0, r0
     a68:	00140000 	andseq	r0, r4, r0
     a6c:	00200000 	eoreq	r0, r0, r0
     a70:	00010000 	andeq	r0, r1, r0
     a74:	00002050 	andeq	r2, r0, r0, asr r0
     a78:	00002c00 	andeq	r2, r0, r0, lsl #24
     a7c:	70000300 	andvc	r0, r0, r0, lsl #6
     a80:	002c9f01 	eoreq	r9, ip, r1, lsl #30
     a84:	00400000 	subeq	r0, r0, r0
     a88:	00010000 	andeq	r0, r1, r0
     a8c:	00000050 	andeq	r0, r0, r0, asr r0
     a90:	00000000 	andeq	r0, r0, r0
     a94:	00001400 	andeq	r1, r0, r0, lsl #8
     a98:	00001800 	andeq	r1, r0, r0, lsl #16
     a9c:	51000100 	mrspl	r0, (UNDEF: 16)
     aa0:	00000018 	andeq	r0, r0, r8, lsl r0
     aa4:	00000040 	andeq	r0, r0, r0, asr #32
     aa8:	01f30004 	mvnseq	r0, r4
     aac:	00009f51 	andeq	r9, r0, r1, asr pc
     ab0:	00000000 	andeq	r0, r0, r0
     ab4:	00400000 	subeq	r0, r0, r0
     ab8:	00600000 	rsbeq	r0, r0, r0
     abc:	00010000 	andeq	r0, r1, r0
     ac0:	00006050 	andeq	r6, r0, r0, asr r0
     ac4:	00006c00 	andeq	r6, r0, r0, lsl #24
     ac8:	71000300 	mrsvc	r0, LR_irq
     acc:	006c9f01 	rsbeq	r9, ip, r1, lsl #30
     ad0:	00740000 	rsbseq	r0, r4, r0
     ad4:	00010000 	andeq	r0, r1, r0
     ad8:	00007451 	andeq	r7, r0, r1, asr r4
     adc:	00008000 	andeq	r8, r0, r0
     ae0:	71000300 	mrsvc	r0, LR_irq
     ae4:	00009f01 	andeq	r9, r0, r1, lsl #30
     ae8:	00000000 	andeq	r0, r0, r0
     aec:	00400000 	subeq	r0, r0, r0
     af0:	00500000 	subseq	r0, r0, r0
     af4:	00010000 	andeq	r0, r1, r0
     af8:	00005051 	andeq	r5, r0, r1, asr r0
     afc:	00008000 	andeq	r8, r0, r0
     b00:	f3000400 	vshl.u8	d0, d0, d0
     b04:	009f5101 	addseq	r5, pc, r1, lsl #2
     b08:	00000000 	andeq	r0, r0, r0
     b0c:	40000000 	andmi	r0, r0, r0
     b10:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     b14:	01000000 	mrseq	r0, (UNDEF: 0)
     b18:	00585200 	subseq	r5, r8, r0, lsl #4
     b1c:	00640000 	rsbeq	r0, r4, r0
     b20:	00010000 	andeq	r0, r1, r0
     b24:	00006452 	andeq	r6, r0, r2, asr r4
     b28:	00006800 	andeq	r6, r0, r0, lsl #16
     b2c:	72000300 	andvc	r0, r0, #0, 6
     b30:	00689f01 	rsbeq	r9, r8, r1, lsl #30
     b34:	00800000 	addeq	r0, r0, r0
     b38:	00010000 	andeq	r0, r1, r0
     b3c:	00000052 	andeq	r0, r0, r2, asr r0
     b40:	00000000 	andeq	r0, r0, r0
     b44:	00004000 	andeq	r4, r0, r0
     b48:	00005400 	andeq	r5, r0, r0, lsl #8
     b4c:	53000100 	movwpl	r0, #256	; 0x100
     b50:	00000054 	andeq	r0, r0, r4, asr r0
     b54:	00000078 	andeq	r0, r0, r8, ror r0
     b58:	00530001 	subseq	r0, r3, r1
     b5c:	00000000 	andeq	r0, r0, r0
     b60:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     b64:	60000000 	andvs	r0, r0, r0
     b68:	01000000 	mrseq	r0, (UNDEF: 0)
     b6c:	00605c00 	rsbeq	r5, r0, r0, lsl #24
     b70:	00800000 	addeq	r0, r0, r0
     b74:	000a0000 	andeq	r0, sl, r0
     b78:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
     b7c:	231c5301 	tstcs	ip, #67108864	; 0x4000000
     b80:	00009f01 	andeq	r9, r0, r1, lsl #30
     b84:	00000000 	andeq	r0, r0, r0
     b88:	00800000 	addeq	r0, r0, r0
     b8c:	00a40000 	adceq	r0, r4, r0
     b90:	00010000 	andeq	r0, r1, r0
     b94:	0000a450 	andeq	sl, r0, r0, asr r4
     b98:	00011800 	andeq	r1, r1, r0, lsl #16
     b9c:	70000300 	andvc	r0, r0, r0, lsl #6
     ba0:	01189f02 	tsteq	r8, r2, lsl #30
     ba4:	021c0000 	andseq	r0, ip, #0
     ba8:	00040000 	andeq	r0, r4, r0
     bac:	9f5001f3 	svcls	0x005001f3
	...
     bb8:	00000080 	andeq	r0, r0, r0, lsl #1
     bbc:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     bc0:	f0510001 			; <UNDEFINED> instruction: 0xf0510001
     bc4:	60000000 	andvs	r0, r0, r0
     bc8:	01000001 	tsteq	r0, r1
     bcc:	01605500 	cmneq	r0, r0, lsl #10
     bd0:	01680000 	cmneq	r8, r0
     bd4:	00010000 	andeq	r0, r1, r0
     bd8:	00016851 	andeq	r6, r1, r1, asr r8
     bdc:	00018800 	andeq	r8, r1, r0, lsl #16
     be0:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     be4:	00000188 	andeq	r0, r0, r8, lsl #3
     be8:	0000019c 	muleq	r0, ip, r1
     bec:	9c510001 	mrrcls	0, 0, r0, r1, cr1
     bf0:	bc000001 	stclt	0, cr0, [r0], {1}
     bf4:	01000001 	tsteq	r0, r1
     bf8:	01bc5500 			; <UNDEFINED> instruction: 0x01bc5500
     bfc:	01bf0000 			; <UNDEFINED> instruction: 0x01bf0000
     c00:	00010000 	andeq	r0, r1, r0
     c04:	0001bf51 	andeq	fp, r1, r1, asr pc
     c08:	00020000 	andeq	r0, r2, r0
     c0c:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     c10:	00000200 	andeq	r0, r0, r0, lsl #4
     c14:	0000021c 	andeq	r0, r0, ip, lsl r2
     c18:	01f30004 	mvnseq	r0, r4
     c1c:	00009f51 	andeq	r9, r0, r1, asr pc
     c20:	00000000 	andeq	r0, r0, r0
     c24:	00800000 	addeq	r0, r0, r0
     c28:	00940000 	addseq	r0, r4, r0
     c2c:	00010000 	andeq	r0, r1, r0
     c30:	00009452 	andeq	r9, r0, r2, asr r4
     c34:	00020000 	andeq	r0, r2, r0
     c38:	54000100 	strpl	r0, [r0], #-256	; 0x100
     c3c:	00000200 	andeq	r0, r0, r0, lsl #4
     c40:	0000021c 	andeq	r0, r0, ip, lsl r2
     c44:	01f30004 	mvnseq	r0, r4
     c48:	00009f52 	andeq	r9, r0, r2, asr pc
     c4c:	00000000 	andeq	r0, r0, r0
     c50:	00800000 	addeq	r0, r0, r0
     c54:	01000000 	mrseq	r0, (UNDEF: 0)
     c58:	00010000 	andeq	r0, r1, r0
     c5c:	00010453 	andeq	r0, r1, r3, asr r4
     c60:	00010800 	andeq	r0, r1, r0, lsl #16
     c64:	53000100 	movwpl	r0, #256	; 0x100
     c68:	00000160 	andeq	r0, r0, r0, ror #2
     c6c:	00000168 	andeq	r0, r0, r8, ror #2
     c70:	68530001 	ldmdavs	r3, {r0}^
     c74:	88000001 	stmdahi	r0, {r0}
     c78:	04000001 	streq	r0, [r0], #-1
     c7c:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
     c80:	0001889f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
     c84:	00019000 	andeq	r9, r1, r0
     c88:	53000100 	movwpl	r0, #256	; 0x100
     c8c:	00000190 	muleq	r0, r0, r1
     c90:	00000194 	muleq	r0, r4, r1
     c94:	945c0001 	ldrbls	r0, [ip], #-1
     c98:	9c000001 	stcls	0, cr0, [r0], {1}
     c9c:	01000001 	tsteq	r0, r1
     ca0:	019c5300 	orrseq	r5, ip, r0, lsl #6
     ca4:	01bc0000 			; <UNDEFINED> instruction: 0x01bc0000
     ca8:	00040000 	andeq	r0, r4, r0
     cac:	9f5301f3 	svcls	0x005301f3
     cb0:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     cb4:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
     cb8:	bf530001 	svclt	0x00530001
     cbc:	d8000001 	stmdale	r0, {r0}
     cc0:	04000001 	streq	r0, [r0], #-1
     cc4:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
     cc8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     ccc:	00000000 	andeq	r0, r0, r0
     cd0:	00008000 	andeq	r8, r0, r0
     cd4:	00009c00 	andeq	r9, r0, r0, lsl #24
     cd8:	91000200 	mrsls	r0, R8_usr
     cdc:	00009c00 	andeq	r9, r0, r0, lsl #24
     ce0:	0001bf00 	andeq	fp, r1, r0, lsl #30
     ce4:	52000100 	andpl	r0, r0, #0, 2
     ce8:	000001d8 	ldrdeq	r0, [r0], -r8
     cec:	000001e3 	andeq	r0, r0, r3, ror #3
     cf0:	00520001 	subseq	r0, r2, r1
     cf4:	00000000 	andeq	r0, r0, r0
     cf8:	9c000000 	stcls	0, cr0, [r0], {-0}
     cfc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     d00:	01000001 	tsteq	r0, r1
     d04:	01185d00 	tsteq	r8, r0, lsl #26
     d08:	011c0000 	tsteq	ip, r0
     d0c:	00010000 	andeq	r0, r1, r0
     d10:	00011c53 	andeq	r1, r1, r3, asr ip
     d14:	00012000 	andeq	r2, r1, r0
     d18:	51000100 	mrspl	r0, (UNDEF: 16)
     d1c:	00000120 	andeq	r0, r0, r0, lsr #2
     d20:	00000160 	andeq	r0, r0, r0, ror #2
     d24:	60530001 	subsvs	r0, r3, r1
     d28:	68000001 	stmdavs	r0, {r0}
     d2c:	01000001 	tsteq	r0, r1
     d30:	01685d00 	cmneq	r8, r0, lsl #26
     d34:	016c0000 	cmneq	ip, r0
     d38:	00010000 	andeq	r0, r1, r0
     d3c:	00016c5e 	andeq	r6, r1, lr, asr ip
     d40:	00018800 	andeq	r8, r1, r0, lsl #16
     d44:	53000100 	movwpl	r0, #256	; 0x100
     d48:	00000188 	andeq	r0, r0, r8, lsl #3
     d4c:	00000190 	muleq	r0, r0, r1
     d50:	a1910004 	orrsge	r0, r1, r4
     d54:	01909f7f 	orrseq	r9, r0, pc, ror pc
     d58:	01940000 	orrseq	r0, r4, r0
     d5c:	00010000 	andeq	r0, r1, r0
     d60:	00019453 	andeq	r9, r1, r3, asr r4
     d64:	00019c00 	andeq	r9, r1, r0, lsl #24
     d68:	5d000100 	stfpls	f0, [r0, #-0]
     d6c:	0000019c 	muleq	r0, ip, r1
     d70:	000001a0 	andeq	r0, r0, r0, lsr #3
     d74:	a05e0001 	subsge	r0, lr, r1
     d78:	bc000001 	stclt	0, cr0, [r0], {1}
     d7c:	01000001 	tsteq	r0, r1
     d80:	01bc5300 			; <UNDEFINED> instruction: 0x01bc5300
     d84:	01d80000 	bicseq	r0, r8, r0
     d88:	00010000 	andeq	r0, r1, r0
     d8c:	0001d85d 	andeq	sp, r1, sp, asr r8
     d90:	0001e300 	andeq	lr, r1, r0, lsl #6
     d94:	53000100 	movwpl	r0, #256	; 0x100
	...
     da0:	000000a0 	andeq	r0, r0, r0, lsr #1
     da4:	000000ec 	andeq	r0, r0, ip, ror #1
     da8:	ec5c0001 	mrrc	0, 0, r0, ip, cr1
     dac:	00000000 	andeq	r0, r0, r0
     db0:	01000001 	tsteq	r0, r1
     db4:	01005300 	mrseq	r5, LR_irq
     db8:	01040000 	mrseq	r0, (UNDEF: 4)
     dbc:	00010000 	andeq	r0, r1, r0
     dc0:	0001045c 	andeq	r0, r1, ip, asr r4
     dc4:	00010800 	andeq	r0, r1, r0, lsl #16
     dc8:	53000100 	movwpl	r0, #256	; 0x100
     dcc:	00000108 	andeq	r0, r0, r8, lsl #2
     dd0:	00000118 	andeq	r0, r0, r8, lsl r1
     dd4:	185c0001 	ldmdane	ip, {r0}^
     dd8:	1c000001 	stcne	0, cr0, [r0], {1}
     ddc:	01000001 	tsteq	r0, r1
     de0:	011c5000 	tsteq	ip, r0
     de4:	013c0000 	teqeq	ip, r0
     de8:	00010000 	andeq	r0, r1, r0
     dec:	0001445c 	andeq	r4, r1, ip, asr r4
     df0:	00015800 	andeq	r5, r1, r0, lsl #16
     df4:	50000100 	andpl	r0, r0, r0, lsl #2
     df8:	00000158 	andeq	r0, r0, r8, asr r1
     dfc:	00000160 	andeq	r0, r0, r0, ror #2
     e00:	605c0001 	subsvs	r0, ip, r1
     e04:	68000001 	stmdavs	r0, {r0}
     e08:	01000001 	tsteq	r0, r1
     e0c:	01685300 	cmneq	r8, r0, lsl #6
     e10:	01780000 	cmneq	r8, r0
     e14:	00010000 	andeq	r0, r1, r0
     e18:	0001785c 	andeq	r7, r1, ip, asr r8
     e1c:	00018000 	andeq	r8, r1, r0
     e20:	7c000500 	cfstr32vc	mvfx0, [r0], {-0}
     e24:	9f253400 	svcls	0x00253400
     e28:	00000180 	andeq	r0, r0, r0, lsl #3
     e2c:	00000188 	andeq	r0, r0, r8, lsl #3
     e30:	885c0001 	ldmdahi	ip, {r0}^
     e34:	90000001 	andls	r0, r0, r1
     e38:	01000001 	tsteq	r0, r1
     e3c:	01905300 	orrseq	r5, r0, r0, lsl #6
     e40:	01940000 	orrseq	r0, r4, r0
     e44:	00010000 	andeq	r0, r1, r0
     e48:	0001945c 	andeq	r9, r1, ip, asr r4
     e4c:	00019c00 	andeq	r9, r1, r0, lsl #24
     e50:	53000100 	movwpl	r0, #256	; 0x100
     e54:	0000019c 	muleq	r0, ip, r1
     e58:	000001ac 	andeq	r0, r0, ip, lsr #3
     e5c:	ac5c0001 	mrrcge	0, 0, r0, ip, cr1
     e60:	b4000001 	strlt	r0, [r0], #-1
     e64:	05000001 	streq	r0, [r0, #-1]
     e68:	31007c00 	tstcc	r0, r0, lsl #24
     e6c:	01b49f25 			; <UNDEFINED> instruction: 0x01b49f25
     e70:	01bc0000 			; <UNDEFINED> instruction: 0x01bc0000
     e74:	00010000 	andeq	r0, r1, r0
     e78:	0001bc5c 	andeq	fp, r1, ip, asr ip
     e7c:	0001bf00 	andeq	fp, r1, r0, lsl #30
     e80:	53000100 	movwpl	r0, #256	; 0x100
     e84:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
     e88:	000001d8 	ldrdeq	r0, [r0], -r8
     e8c:	01f30004 	mvnseq	r0, r4
     e90:	01d89f53 	bicseq	r9, r8, r3, asr pc
     e94:	01e30000 	mvneq	r0, r0
     e98:	00010000 	andeq	r0, r1, r0
     e9c:	0000005c 	andeq	r0, r0, ip, asr r0
     ea0:	00000000 	andeq	r0, r0, r0
     ea4:	0000ec00 	andeq	lr, r0, r0, lsl #24
     ea8:	0000fc00 	andeq	pc, r0, r0, lsl #24
     eac:	30000200 	andcc	r0, r0, r0, lsl #4
     eb0:	0000fc9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
     eb4:	00010400 	andeq	r0, r1, r0, lsl #8
     eb8:	31000200 	mrscc	r0, R8_usr
     ebc:	0001049f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
     ec0:	00010800 	andeq	r0, r1, r0, lsl #16
     ec4:	30000200 	andcc	r0, r0, r0, lsl #4
     ec8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     ecc:	00000000 	andeq	r0, r0, r0
     ed0:	00021c00 	andeq	r1, r2, r0, lsl #24
     ed4:	00022b00 	andeq	r2, r2, r0, lsl #22
     ed8:	50000100 	andpl	r0, r0, r0, lsl #2
     edc:	0000022b 	andeq	r0, r0, fp, lsr #4
     ee0:	00000244 	andeq	r0, r0, r4, asr #4
     ee4:	01f30004 	mvnseq	r0, r4
     ee8:	02449f50 	subeq	r9, r4, #80, 30	; 0x140
     eec:	02700000 	rsbseq	r0, r0, #0
     ef0:	00010000 	andeq	r0, r1, r0
     ef4:	00000050 	andeq	r0, r0, r0, asr r0
     ef8:	00000000 	andeq	r0, r0, r0
     efc:	00021c00 	andeq	r1, r2, r0, lsl #24
     f00:	00022b00 	andeq	r2, r2, r0, lsl #22
     f04:	51000100 	mrspl	r0, (UNDEF: 16)
     f08:	0000022b 	andeq	r0, r0, fp, lsr #4
     f0c:	00000244 	andeq	r0, r0, r4, asr #4
     f10:	01f30004 	mvnseq	r0, r4
     f14:	02449f51 	subeq	r9, r4, #324	; 0x144
     f18:	02700000 	rsbseq	r0, r0, #0
     f1c:	00010000 	andeq	r0, r1, r0
     f20:	00000051 	andeq	r0, r0, r1, asr r0
     f24:	00000000 	andeq	r0, r0, r0
     f28:	00027000 	andeq	r7, r2, r0
     f2c:	00029c00 	andeq	r9, r2, r0, lsl #24
     f30:	50000100 	andpl	r0, r0, r0, lsl #2
     f34:	0000029c 	muleq	r0, ip, r2
     f38:	000004e4 	andeq	r0, r0, r4, ror #9
     f3c:	e45a0001 	ldrb	r0, [sl], #-1
     f40:	f8000004 			; <UNDEFINED> instruction: 0xf8000004
     f44:	04000004 	streq	r0, [r0], #-4
     f48:	5001f300 	andpl	pc, r1, r0, lsl #6
     f4c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     f50:	00000000 	andeq	r0, r0, r0
     f54:	00027000 	andeq	r7, r2, r0
     f58:	00028400 	andeq	r8, r2, r0, lsl #8
     f5c:	51000100 	mrspl	r0, (UNDEF: 16)
     f60:	00000284 	andeq	r0, r0, r4, lsl #5
     f64:	0000029c 	muleq	r0, ip, r2
     f68:	01710003 	cmneq	r1, r3
     f6c:	00029c9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
     f70:	0004f800 	andeq	pc, r4, r0, lsl #16
     f74:	f3000400 	vshl.u8	d0, d0, d0
     f78:	009f5101 	addseq	r5, pc, r1, lsl #2
     f7c:	00000000 	andeq	r0, r0, r0
     f80:	70000000 	andvc	r0, r0, r0
     f84:	a4000002 	strge	r0, [r0], #-2
     f88:	01000002 	tsteq	r0, r2
     f8c:	02a45200 	adceq	r5, r4, #0, 4
     f90:	02cc0000 	sbceq	r0, ip, #0
     f94:	00010000 	andeq	r0, r1, r0
     f98:	0002cc52 	andeq	ip, r2, r2, asr ip
     f9c:	00049400 	andeq	r9, r4, r0, lsl #8
     fa0:	56000100 	strpl	r0, [r0], -r0, lsl #2
     fa4:	00000494 	muleq	r0, r4, r4
     fa8:	000004f8 	strdeq	r0, [r0], -r8
     fac:	00520001 	subseq	r0, r2, r1
     fb0:	00000000 	andeq	r0, r0, r0
     fb4:	70000000 	andvc	r0, r0, r0
     fb8:	8c000002 	stchi	0, cr0, [r0], {2}
     fbc:	01000002 	tsteq	r0, r2
     fc0:	00005300 	andeq	r5, r0, r0, lsl #6
     fc4:	00000000 	andeq	r0, r0, r0
     fc8:	02800000 	addeq	r0, r0, #0
     fcc:	029c0000 	addseq	r0, ip, #0
     fd0:	00010000 	andeq	r0, r1, r0
     fd4:	00029c50 	andeq	r9, r2, r0, asr ip
     fd8:	0002a000 	andeq	sl, r2, r0
     fdc:	54000100 	strpl	r0, [r0], #-256	; 0x100
     fe0:	000002a0 	andeq	r0, r0, r0, lsr #5
     fe4:	000002ac 	andeq	r0, r0, ip, lsr #5
     fe8:	01740003 	cmneq	r4, r3
     fec:	0002ac9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
     ff0:	0002b800 	andeq	fp, r2, r0, lsl #16
     ff4:	54000100 	strpl	r0, [r0], #-256	; 0x100
     ff8:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
     ffc:	000002c4 	andeq	r0, r0, r4, asr #5
    1000:	01740003 	cmneq	r4, r3
    1004:	0002c49f 	muleq	r2, pc, r4	; <UNPREDICTABLE>
    1008:	00049800 	andeq	r9, r4, r0, lsl #16
    100c:	54000100 	strpl	r0, [r0], #-256	; 0x100
    1010:	00000498 	muleq	r0, r8, r4
    1014:	000004a4 	andeq	r0, r0, r4, lsr #9
    1018:	01740003 	cmneq	r4, r3
    101c:	0004a49f 	muleq	r4, pc, r4	; <UNPREDICTABLE>
    1020:	0004d000 	andeq	sp, r4, r0
    1024:	54000100 	strpl	r0, [r0], #-256	; 0x100
    1028:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    102c:	000004dc 	ldrdeq	r0, [r0], -ip
    1030:	dc500001 	mrrcle	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    1034:	e4000004 	str	r0, [r0], #-4
    1038:	03000004 	movweq	r0, #4
    103c:	9f017400 	svcls	0x00017400
	...
    1048:	00000288 	andeq	r0, r0, r8, lsl #5
    104c:	000004e4 	andeq	r0, r0, r4, ror #9
    1050:	e4580001 	ldrb	r0, [r8], #-1
    1054:	f8000004 			; <UNDEFINED> instruction: 0xf8000004
    1058:	0a000004 	beq	1070 <_start-0x6f90>
    105c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1060:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    1064:	009f1c31 	addseq	r1, pc, r1, lsr ip	; <UNPREDICTABLE>
    1068:	00000000 	andeq	r0, r0, r0
    106c:	cc000000 	stcgt	0, cr0, [r0], {-0}
    1070:	d0000003 	andle	r0, r0, r3
    1074:	01000003 	tsteq	r0, r3
    1078:	03f05000 	mvnseq	r5, #0
    107c:	03f40000 	mvnseq	r0, #0
    1080:	00010000 	andeq	r0, r1, r0
    1084:	00041450 	andeq	r1, r4, r0, asr r4
    1088:	00041800 	andeq	r1, r4, r0, lsl #16
    108c:	50000100 	andpl	r0, r0, r0, lsl #2
    1090:	00000438 	andeq	r0, r0, r8, lsr r4
    1094:	0000043c 	andeq	r0, r0, ip, lsr r4
    1098:	44500001 	ldrbmi	r0, [r0], #-1
    109c:	48000004 	stmdami	r0, {r2}
    10a0:	01000004 	tsteq	r0, r4
    10a4:	04685000 	strbteq	r5, [r8], #-0
    10a8:	046c0000 	strbteq	r0, [ip], #-0
    10ac:	00010000 	andeq	r0, r1, r0
    10b0:	00049050 	andeq	r9, r4, r0, asr r0
    10b4:	0004b800 	andeq	fp, r4, r0, lsl #16
    10b8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    10c4:	000002cc 	andeq	r0, r0, ip, asr #5
    10c8:	000002d4 	ldrdeq	r0, [r0], -r4
    10cc:	9f300002 	svcls	0x00300002
    10d0:	000002d4 	ldrdeq	r0, [r0], -r4
    10d4:	000002d8 	ldrdeq	r0, [r0], -r8
    10d8:	e4570001 	ldrb	r0, [r7], #-1
    10dc:	b8000002 	stmdalt	r0, {r1}
    10e0:	01000004 	tsteq	r0, r4
    10e4:	00005700 	andeq	r5, r0, r0, lsl #14
	...
    10f0:	000c0000 	andeq	r0, ip, r0
    10f4:	00010000 	andeq	r0, r1, r0
    10f8:	00000c50 	andeq	r0, r0, r0, asr ip
    10fc:	00002000 	andeq	r2, r0, r0
    1100:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    110c:	00000034 	andeq	r0, r0, r4, lsr r0
    1110:	0000003c 	andeq	r0, r0, ip, lsr r0
    1114:	04730003 	ldrbteq	r0, [r3], #-3
    1118:	00003c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    111c:	00004700 	andeq	r4, r0, r0, lsl #14
    1120:	53000100 	movwpl	r0, #256	; 0x100
	...
    112c:	00000048 	andeq	r0, r0, r8, asr #32
    1130:	00000074 	andeq	r0, r0, r4, ror r0
    1134:	74500001 	ldrbvc	r0, [r0], #-1
    1138:	83000000 	movwhi	r0, #0
    113c:	03000000 	movweq	r0, #0
    1140:	9f787300 	svcls	0x00787300
	...
    114c:	00009374 	andeq	r9, r0, r4, ror r3
    1150:	00009378 	andeq	r9, r0, r8, ror r3
    1154:	9f300002 	svcls	0x00300002
    1158:	00009378 	andeq	r9, r0, r8, ror r3
    115c:	0000937c 	andeq	r9, r0, ip, ror r3
    1160:	00500001 	subseq	r0, r0, r1
    1164:	00000000 	andeq	r0, r0, r0
    1168:	8c000000 	stchi	0, cr0, [r0], {-0}
    116c:	90000093 	mulls	r0, r3, r0
    1170:	02000093 	andeq	r0, r0, #147	; 0x93
    1174:	909f3000 	addsls	r3, pc, r0
    1178:	94000093 	strls	r0, [r0], #-147	; 0x93
    117c:	01000093 	swpeq	r0, r3, [r0]	; <UNPREDICTABLE>
    1180:	93985300 	orrsls	r5, r8, #0, 6
    1184:	93a00000 	movls	r0, #0
    1188:	00010000 	andeq	r0, r1, r0
    118c:	00000053 	andeq	r0, r0, r3, asr r0
	...
    1198:	00000400 	andeq	r0, r0, r0, lsl #8
    119c:	50000100 	andpl	r0, r0, r0, lsl #2
    11a0:	00000004 	andeq	r0, r0, r4
    11a4:	0000000c 	andeq	r0, r0, ip
    11a8:	0c530001 	mrrceq	0, 0, r0, r3, cr1
    11ac:	10000000 	andne	r0, r0, r0
    11b0:	01000000 	mrseq	r0, (UNDEF: 0)
    11b4:	00105000 	andseq	r5, r0, r0
    11b8:	001c0000 	andseq	r0, ip, r0
    11bc:	00010000 	andeq	r0, r1, r0
    11c0:	00000053 	andeq	r0, r0, r3, asr r0
    11c4:	00000000 	andeq	r0, r0, r0
    11c8:	00003c00 	andeq	r3, r0, r0, lsl #24
    11cc:	00004700 	andeq	r4, r0, r0, lsl #14
    11d0:	50000100 	andpl	r0, r0, r0, lsl #2
    11d4:	00000047 	andeq	r0, r0, r7, asr #32
    11d8:	00000060 	andeq	r0, r0, r0, rrx
    11dc:	00550001 	subseq	r0, r5, r1
    11e0:	00000000 	andeq	r0, r0, r0
    11e4:	50000000 	andpl	r0, r0, r0
    11e8:	54000000 	strpl	r0, [r0], #-0
    11ec:	01000000 	mrseq	r0, (UNDEF: 0)
    11f0:	00005000 	andeq	r5, r0, r0
    11f4:	00000000 	andeq	r0, r0, r0
    11f8:	00600000 	rsbeq	r0, r0, r0
    11fc:	006c0000 	rsbeq	r0, ip, r0
    1200:	00010000 	andeq	r0, r1, r0
    1204:	00006c50 	andeq	r6, r0, r0, asr ip
    1208:	00007400 	andeq	r7, r0, r0, lsl #8
    120c:	f3000400 	vshl.u8	d0, d0, d0
    1210:	009f5001 	addseq	r5, pc, r1
    1214:	00000000 	andeq	r0, r0, r0
    1218:	74000000 	strvc	r0, [r0], #-0
    121c:	80000000 	andhi	r0, r0, r0
    1220:	01000000 	mrseq	r0, (UNDEF: 0)
    1224:	00805000 	addeq	r5, r0, r0
    1228:	00880000 	addeq	r0, r8, r0
    122c:	00040000 	andeq	r0, r4, r0
    1230:	9f5001f3 	svcls	0x005001f3
	...
    1240:	00000017 	andeq	r0, r0, r7, lsl r0
    1244:	17500001 	ldrbne	r0, [r0, -r1]
    1248:	30000000 	andcc	r0, r0, r0
    124c:	04000000 	streq	r0, [r0], #-0
    1250:	5001f300 	andpl	pc, r1, r0, lsl #6
    1254:	0000309f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1258:	00004400 	andeq	r4, r0, r0, lsl #8
    125c:	50000100 	andpl	r0, r0, r0, lsl #2
    1260:	00000044 	andeq	r0, r0, r4, asr #32
    1264:	00000074 	andeq	r0, r0, r4, ror r0
    1268:	01f30004 	mvnseq	r0, r4
    126c:	00009f50 	andeq	r9, r0, r0, asr pc
    1270:	00000000 	andeq	r0, r0, r0
    1274:	00400000 	subeq	r0, r0, r0
    1278:	00580000 	subseq	r0, r8, r0
    127c:	00010000 	andeq	r0, r1, r0
    1280:	00005856 	andeq	r5, r0, r6, asr r8
    1284:	00007400 	andeq	r7, r0, r0, lsl #8
    1288:	f3000900 	vmls.i8	d0, d0, d0
    128c:	07235001 	streq	r5, [r3, -r1]!
    1290:	9f1af809 	svcls	0x001af809
	...
    129c:	00000074 	andeq	r0, r0, r4, ror r0
    12a0:	0000008b 	andeq	r0, r0, fp, lsl #1
    12a4:	8b500001 	blhi	14012b0 <__bss_end__+0x13f6140>
    12a8:	a4000000 	strge	r0, [r0], #-0
    12ac:	04000000 	streq	r0, [r0], #-0
    12b0:	5001f300 	andpl	pc, r1, r0, lsl #6
    12b4:	0000a49f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    12b8:	0000af00 	andeq	sl, r0, r0, lsl #30
    12bc:	50000100 	andpl	r0, r0, r0, lsl #2
    12c0:	000000af 	andeq	r0, r0, pc, lsr #1
    12c4:	000000b4 	strheq	r0, [r0], -r4
    12c8:	01f30004 	mvnseq	r0, r4
    12cc:	00b49f50 	adcseq	r9, r4, r0, asr pc
    12d0:	00bf0000 	adcseq	r0, pc, r0
    12d4:	00010000 	andeq	r0, r1, r0
    12d8:	0000bf50 	andeq	fp, r0, r0, asr pc
    12dc:	0000d800 	andeq	sp, r0, r0, lsl #16
    12e0:	f3000400 	vshl.u8	d0, d0, d0
    12e4:	d89f5001 	ldmle	pc, {r0, ip, lr}	; <UNPREDICTABLE>
    12e8:	f7000000 			; <UNDEFINED> instruction: 0xf7000000
    12ec:	01000000 	mrseq	r0, (UNDEF: 0)
    12f0:	00f75000 	rscseq	r5, r7, r0
    12f4:	01100000 	tsteq	r0, r0
    12f8:	00040000 	andeq	r0, r4, r0
    12fc:	9f5001f3 	svcls	0x005001f3
	...
    1308:	00000074 	andeq	r0, r0, r4, ror r0
    130c:	0000008b 	andeq	r0, r0, fp, lsl #1
    1310:	8b510001 	blhi	144131c <__bss_end__+0x14361ac>
    1314:	a4000000 	strge	r0, [r0], #-0
    1318:	04000000 	streq	r0, [r0], #-0
    131c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1320:	0000a49f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    1324:	0000af00 	andeq	sl, r0, r0, lsl #30
    1328:	51000100 	mrspl	r0, (UNDEF: 16)
    132c:	000000af 	andeq	r0, r0, pc, lsr #1
    1330:	000000b4 	strheq	r0, [r0], -r4
    1334:	01f30004 	mvnseq	r0, r4
    1338:	00b49f51 	adcseq	r9, r4, r1, asr pc
    133c:	00bf0000 	adcseq	r0, pc, r0
    1340:	00010000 	andeq	r0, r1, r0
    1344:	0000bf51 	andeq	fp, r0, r1, asr pc
    1348:	0000d800 	andeq	sp, r0, r0, lsl #16
    134c:	f3000400 	vshl.u8	d0, d0, d0
    1350:	d89f5101 	ldmle	pc, {r0, r8, ip, lr}	; <UNPREDICTABLE>
    1354:	ec000000 	stc	0, cr0, [r0], {-0}
    1358:	01000000 	mrseq	r0, (UNDEF: 0)
    135c:	00ec5100 	rsceq	r5, ip, r0, lsl #2
    1360:	00f00000 	rscseq	r0, r0, r0
    1364:	00040000 	andeq	r0, r4, r0
    1368:	9f1f0071 	svcls	0x001f0071
    136c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1370:	00000110 	andeq	r0, r0, r0, lsl r1
    1374:	01f30004 	mvnseq	r0, r4
    1378:	00009f51 	andeq	r9, r0, r1, asr pc
    137c:	00000000 	andeq	r0, r0, r0
    1380:	00e00000 	rsceq	r0, r0, r0
    1384:	00e40000 	rsceq	r0, r4, r0
    1388:	00010000 	andeq	r0, r1, r0
    138c:	0000e452 	andeq	lr, r0, r2, asr r4
    1390:	0000f000 	andeq	pc, r0, r0
    1394:	03000500 	movweq	r0, #1280	; 0x500
    1398:	0000b16c 	andeq	fp, r0, ip, ror #2
    139c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    13a0:	000000f7 	strdeq	r0, [r0], -r7
    13a4:	00510001 	subseq	r0, r1, r1
    13a8:	00000000 	andeq	r0, r0, r0
    13ac:	94000000 	strls	r0, [r0], #-0
    13b0:	ab000001 	blge	13bc <_start-0x6c44>
    13b4:	01000001 	tsteq	r0, r1
    13b8:	01ab5000 			; <UNDEFINED> instruction: 0x01ab5000
    13bc:	01c40000 	biceq	r0, r4, r0
    13c0:	00040000 	andeq	r0, r4, r0
    13c4:	9f5001f3 	svcls	0x005001f3
    13c8:	000001c4 	andeq	r0, r0, r4, asr #3
    13cc:	000001e8 	andeq	r0, r0, r8, ror #3
    13d0:	00500001 	subseq	r0, r0, r1
	...
    13dc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    13e0:	01000000 	mrseq	r0, (UNDEF: 0)
    13e4:	00185000 	andseq	r5, r8, r0
    13e8:	01540000 	cmpeq	r4, r0
    13ec:	00040000 	andeq	r0, r4, r0
    13f0:	9f5001f3 	svcls	0x005001f3
	...
    1400:	0000001c 	andeq	r0, r0, ip, lsl r0
    1404:	1c510001 	mrrcne	0, 0, r0, r1, cr1
    1408:	54000000 	strpl	r0, [r0], #-0
    140c:	04000001 	streq	r0, [r0], #-1
    1410:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1414:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1418:	00000000 	andeq	r0, r0, r0
    141c:	00001000 	andeq	r1, r0, r0
    1420:	00013400 	andeq	r3, r1, r0, lsl #8
    1424:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    1430:	00000010 	andeq	r0, r0, r0, lsl r0
    1434:	00000034 	andeq	r0, r0, r4, lsr r0
    1438:	34550001 	ldrbcc	r0, [r5], #-1
    143c:	34000000 	strcc	r0, [r0], #-0
    1440:	01000001 	tsteq	r0, r1
    1444:	01345800 	teqeq	r4, r0, lsl #16
    1448:	01540000 	cmpeq	r4, r0
    144c:	00010000 	andeq	r0, r1, r0
    1450:	00000055 	andeq	r0, r0, r5, asr r0
    1454:	00000000 	andeq	r0, r0, r0
    1458:	00001400 	andeq	r1, r0, r0, lsl #8
    145c:	00013400 	andeq	r3, r1, r0, lsl #8
    1460:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    146c:	00000020 	andeq	r0, r0, r0, lsr #32
    1470:	00000134 	andeq	r0, r0, r4, lsr r1
    1474:	00550001 	subseq	r0, r5, r1
    1478:	00000000 	andeq	r0, r0, r0
    147c:	24000000 	strcs	r0, [r0], #-0
    1480:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    1484:	01000000 	mrseq	r0, (UNDEF: 0)
    1488:	00005300 	andeq	r5, r0, r0, lsl #6
    148c:	00000000 	andeq	r0, r0, r0
    1490:	00340000 	eorseq	r0, r4, r0
    1494:	00540000 	subseq	r0, r4, r0
    1498:	00010000 	andeq	r0, r1, r0
    149c:	00005458 	andeq	r5, r0, r8, asr r4
    14a0:	00013400 	andeq	r3, r1, r0, lsl #8
    14a4:	75000500 	strvc	r0, [r0, #-1280]	; 0x500
    14a8:	9f243100 	svcls	0x00243100
	...
    14b4:	00000034 	andeq	r0, r0, r4, lsr r0
    14b8:	0000003c 	andeq	r0, r0, ip, lsr r0
    14bc:	00770005 	rsbseq	r0, r7, r5
    14c0:	3c9f1a31 	vldmiacc	pc, {s2-s50}
    14c4:	3f000000 	svccc	0x00000000
    14c8:	01000000 	mrseq	r0, (UNDEF: 0)
    14cc:	003f5100 	eorseq	r5, pc, r0, lsl #2
    14d0:	01540000 	cmpeq	r4, r0
    14d4:	00050000 	andeq	r0, r5, r0
    14d8:	1a310077 	bne	c416bc <__bss_end__+0xc3654c>
    14dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    14e0:	00000000 	andeq	r0, r0, r0
    14e4:	00004000 	andeq	r4, r0, r0
    14e8:	00005400 	andeq	r5, r0, r0, lsl #8
    14ec:	58000100 	stmdapl	r0, {r8}
    14f0:	00000054 	andeq	r0, r0, r4, asr r0
    14f4:	00000134 	andeq	r0, r0, r4, lsr r1
    14f8:	00750005 	rsbseq	r0, r5, r5
    14fc:	009f2431 	addseq	r2, pc, r1, lsr r4	; <UNPREDICTABLE>
    1500:	00000000 	andeq	r0, r0, r0
    1504:	44000000 	strmi	r0, [r0], #-0
    1508:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    150c:	01000000 	mrseq	r0, (UNDEF: 0)
    1510:	00005300 	andeq	r5, r0, r0, lsl #6
    1514:	00000000 	andeq	r0, r0, r0
    1518:	00540000 	subseq	r0, r4, r0
    151c:	00740000 	rsbseq	r0, r4, r0
    1520:	00010000 	andeq	r0, r1, r0
    1524:	00007458 	andeq	r7, r0, r8, asr r4
    1528:	00013400 	andeq	r3, r1, r0, lsl #8
    152c:	75000800 	strvc	r0, [r0, #-2048]	; 0x800
    1530:	75243100 	strvc	r3, [r4, #-256]!	; 0x100
    1534:	009f2200 	addseq	r2, pc, r0, lsl #4
    1538:	00000000 	andeq	r0, r0, r0
    153c:	60000000 	andvs	r0, r0, r0
    1540:	74000000 	strvc	r0, [r0], #-0
    1544:	01000000 	mrseq	r0, (UNDEF: 0)
    1548:	00745800 	rsbseq	r5, r4, r0, lsl #16
    154c:	01340000 	teqeq	r4, r0
    1550:	00080000 	andeq	r0, r8, r0
    1554:	24310075 	ldrtcs	r0, [r1], #-117	; 0x75
    1558:	9f220075 	svcls	0x00220075
	...
    1564:	00000064 	andeq	r0, r0, r4, rrx
    1568:	00000068 	andeq	r0, r0, r8, rrx
    156c:	00530001 	subseq	r0, r3, r1
    1570:	00000000 	andeq	r0, r0, r0
    1574:	74000000 	strvc	r0, [r0], #-0
    1578:	94000000 	strls	r0, [r0], #-0
    157c:	01000000 	mrseq	r0, (UNDEF: 0)
    1580:	00945800 	addseq	r5, r4, r0, lsl #16
    1584:	01340000 	teqeq	r4, r0
    1588:	00050000 	andeq	r0, r5, r0
    158c:	24320075 	ldrtcs	r0, [r2], #-117	; 0x75
    1590:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1594:	00000000 	andeq	r0, r0, r0
    1598:	00008000 	andeq	r8, r0, r0
    159c:	00009400 	andeq	r9, r0, r0, lsl #8
    15a0:	58000100 	stmdapl	r0, {r8}
    15a4:	00000094 	muleq	r0, r4, r0
    15a8:	00000134 	andeq	r0, r0, r4, lsr r1
    15ac:	00750005 	rsbseq	r0, r5, r5
    15b0:	009f2432 	addseq	r2, pc, r2, lsr r4	; <UNPREDICTABLE>
    15b4:	00000000 	andeq	r0, r0, r0
    15b8:	84000000 	strhi	r0, [r0], #-0
    15bc:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    15c0:	01000000 	mrseq	r0, (UNDEF: 0)
    15c4:	00005300 	andeq	r5, r0, r0, lsl #6
    15c8:	00000000 	andeq	r0, r0, r0
    15cc:	00940000 	addseq	r0, r4, r0
    15d0:	00b40000 	adcseq	r0, r4, r0
    15d4:	00010000 	andeq	r0, r1, r0
    15d8:	0000b458 	andeq	fp, r0, r8, asr r4
    15dc:	00013400 	andeq	r3, r1, r0, lsl #8
    15e0:	75000800 	strvc	r0, [r0, #-2048]	; 0x800
    15e4:	75243200 	strvc	r3, [r4, #-512]!	; 0x200
    15e8:	009f2200 	addseq	r2, pc, r0, lsl #4
    15ec:	00000000 	andeq	r0, r0, r0
    15f0:	a0000000 	andge	r0, r0, r0
    15f4:	b4000000 	strlt	r0, [r0], #-0
    15f8:	01000000 	mrseq	r0, (UNDEF: 0)
    15fc:	00b45800 	adcseq	r5, r4, r0, lsl #16
    1600:	01340000 	teqeq	r4, r0
    1604:	00080000 	andeq	r0, r8, r0
    1608:	24320075 	ldrtcs	r0, [r2], #-117	; 0x75
    160c:	9f220075 	svcls	0x00220075
	...
    1618:	000000a4 	andeq	r0, r0, r4, lsr #1
    161c:	000000a8 	andeq	r0, r0, r8, lsr #1
    1620:	00530001 	subseq	r0, r3, r1
    1624:	00000000 	andeq	r0, r0, r0
    1628:	b4000000 	strlt	r0, [r0], #-0
    162c:	d4000000 	strle	r0, [r0], #-0
    1630:	01000000 	mrseq	r0, (UNDEF: 0)
    1634:	00d45800 	sbcseq	r5, r4, r0, lsl #16
    1638:	01340000 	teqeq	r4, r0
    163c:	000a0000 	andeq	r0, sl, r0
    1640:	24320075 	ldrtcs	r0, [r2], #-117	; 0x75
    1644:	24310075 	ldrtcs	r0, [r1], #-117	; 0x75
    1648:	00009f22 	andeq	r9, r0, r2, lsr #30
    164c:	00000000 	andeq	r0, r0, r0
    1650:	00c00000 	sbceq	r0, r0, r0
    1654:	00d40000 	sbcseq	r0, r4, r0
    1658:	00010000 	andeq	r0, r1, r0
    165c:	0000d458 	andeq	sp, r0, r8, asr r4
    1660:	00013400 	andeq	r3, r1, r0, lsl #8
    1664:	75000a00 	strvc	r0, [r0, #-2560]	; 0xa00
    1668:	75243200 	strvc	r3, [r4, #-512]!	; 0x200
    166c:	22243100 	eorcs	r3, r4, #0, 2
    1670:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1674:	00000000 	andeq	r0, r0, r0
    1678:	0000c400 	andeq	ip, r0, r0, lsl #8
    167c:	0000c800 	andeq	ip, r0, r0, lsl #16
    1680:	53000100 	movwpl	r0, #256	; 0x100
	...
    168c:	000000d4 	ldrdeq	r0, [r0], -r4
    1690:	000000f4 	strdeq	r0, [r0], -r4
    1694:	f4580001 			; <UNDEFINED> instruction: 0xf4580001
    1698:	34000000 	strcc	r0, [r0], #-0
    169c:	0d000001 	stceq	0, cr0, [r0, #-4]
    16a0:	32007500 	andcc	r7, r0, #0, 10
    16a4:	31007524 	tstcc	r0, r4, lsr #10
    16a8:	00752224 	rsbseq	r2, r5, r4, lsr #4
    16ac:	00009f22 	andeq	r9, r0, r2, lsr #30
    16b0:	00000000 	andeq	r0, r0, r0
    16b4:	00e00000 	rsceq	r0, r0, r0
    16b8:	00f40000 	rscseq	r0, r4, r0
    16bc:	00010000 	andeq	r0, r1, r0
    16c0:	0000f458 	andeq	pc, r0, r8, asr r4	; <UNPREDICTABLE>
    16c4:	00013400 	andeq	r3, r1, r0, lsl #8
    16c8:	75000d00 	strvc	r0, [r0, #-3328]	; 0xd00
    16cc:	75243200 	strvc	r3, [r4, #-512]!	; 0x200
    16d0:	22243100 	eorcs	r3, r4, #0, 2
    16d4:	9f220075 	svcls	0x00220075
	...
    16e0:	000000e4 	andeq	r0, r0, r4, ror #1
    16e4:	000000e8 	andeq	r0, r0, r8, ror #1
    16e8:	00530001 	subseq	r0, r3, r1
    16ec:	00000000 	andeq	r0, r0, r0
    16f0:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    16f4:	14000000 	strne	r0, [r0], #-0
    16f8:	01000001 	tsteq	r0, r1
    16fc:	01145800 	tsteq	r4, r0, lsl #16
    1700:	01340000 	teqeq	r4, r0
    1704:	00050000 	andeq	r0, r5, r0
    1708:	24330075 	ldrtcs	r0, [r3], #-117	; 0x75
    170c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1710:	00000000 	andeq	r0, r0, r0
    1714:	00010000 	andeq	r0, r1, r0
    1718:	00011400 	andeq	r1, r1, r0, lsl #8
    171c:	58000100 	stmdapl	r0, {r8}
    1720:	00000114 	andeq	r0, r0, r4, lsl r1
    1724:	00000134 	andeq	r0, r0, r4, lsr r1
    1728:	00750005 	rsbseq	r0, r5, r5
    172c:	009f2433 	addseq	r2, pc, r3, lsr r4	; <UNPREDICTABLE>
    1730:	00000000 	andeq	r0, r0, r0
    1734:	04000000 	streq	r0, [r0], #-0
    1738:	08000001 	stmdaeq	r0, {r0}
    173c:	01000001 	tsteq	r0, r1
    1740:	00005300 	andeq	r5, r0, r0, lsl #6
    1744:	00000000 	andeq	r0, r0, r0
    1748:	01140000 	tsteq	r4, r0
    174c:	011c0000 	tsteq	ip, r0
    1750:	00060000 	andeq	r0, r6, r0
    1754:	80080077 	andhi	r0, r8, r7, ror r0
    1758:	011c9f1a 	tsteq	ip, sl, lsl pc
    175c:	011f0000 	tsteq	pc, r0
    1760:	00010000 	andeq	r0, r1, r0
    1764:	00011f51 	andeq	r1, r1, r1, asr pc
    1768:	00015400 	andeq	r5, r1, r0, lsl #8
    176c:	77000600 	strvc	r0, [r0, -r0, lsl #12]
    1770:	1a800800 	bne	fe003778 <__bss_end__+0xfdff8608>
    1774:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1778:	00000000 	andeq	r0, r0, r0
    177c:	00012400 	andeq	r2, r1, r0, lsl #8
    1780:	00012800 	andeq	r2, r1, r0, lsl #16
    1784:	53000100 	movwpl	r0, #256	; 0x100
	...
    1790:	00000144 	andeq	r0, r0, r4, asr #2
    1794:	00000148 	andeq	r0, r0, r8, asr #2
    1798:	00530001 	subseq	r0, r3, r1
    179c:	00000000 	andeq	r0, r0, r0
    17a0:	54000000 	strpl	r0, [r0], #-0
    17a4:	6b000001 	blvs	17b0 <_start-0x6850>
    17a8:	01000001 	tsteq	r0, r1
    17ac:	016b5000 	cmneq	fp, r0
    17b0:	01d00000 	bicseq	r0, r0, r0
    17b4:	00010000 	andeq	r0, r1, r0
    17b8:	0001d059 	andeq	sp, r1, r9, asr r0
    17bc:	00030c00 	andeq	r0, r3, r0, lsl #24
    17c0:	f3000400 	vshl.u8	d0, d0, d0
    17c4:	0c9f5001 	ldceq	0, cr5, [pc], {1}
    17c8:	14000003 	strne	r0, [r0], #-3
    17cc:	01000003 	tsteq	r0, r3
    17d0:	03145900 	tsteq	r4, #0, 18
    17d4:	031c0000 	tsteq	ip, #0
    17d8:	00040000 	andeq	r0, r4, r0
    17dc:	9f5001f3 	svcls	0x005001f3
	...
    17e8:	00000154 	andeq	r0, r0, r4, asr r1
    17ec:	0000016b 	andeq	r0, r0, fp, ror #2
    17f0:	6b510001 	blvs	14417fc <__bss_end__+0x143668c>
    17f4:	1c000001 	stcne	0, cr0, [r0], {1}
    17f8:	01000003 	tsteq	r0, r3
    17fc:	00005600 	andeq	r5, r0, r0, lsl #12
    1800:	00000000 	andeq	r0, r0, r0
    1804:	01a80000 			; <UNDEFINED> instruction: 0x01a80000
    1808:	02980000 	addseq	r0, r8, #0
    180c:	00010000 	andeq	r0, r1, r0
    1810:	00000058 	andeq	r0, r0, r8, asr r0
    1814:	00000000 	andeq	r0, r0, r0
    1818:	0001ac00 	andeq	sl, r1, r0, lsl #24
    181c:	0002d000 	andeq	sp, r2, r0
    1820:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    182c:	000001ac 	andeq	r0, r0, ip, lsr #3
    1830:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1834:	00740005 	rsbseq	r0, r4, r5
    1838:	009f2531 	addseq	r2, pc, r1, lsr r5	; <UNPREDICTABLE>
    183c:	00000000 	andeq	r0, r0, r0
    1840:	ac000000 	stcge	0, cr0, [r0], {-0}
    1844:	d0000001 	andle	r0, r0, r1
    1848:	02000001 	andeq	r0, r0, #1
    184c:	d09f3000 	addsle	r3, pc, r0
    1850:	0c000001 	stceq	0, cr0, [r0], {1}
    1854:	01000003 	tsteq	r0, r3
    1858:	03145900 	tsteq	r4, #0, 18
    185c:	031c0000 	tsteq	ip, #0
    1860:	00010000 	andeq	r0, r1, r0
    1864:	00000059 	andeq	r0, r0, r9, asr r0
    1868:	00000000 	andeq	r0, r0, r0
    186c:	00016800 	andeq	r6, r1, r0, lsl #16
    1870:	00016b00 	andeq	r6, r1, r0, lsl #22
    1874:	51000100 	mrspl	r0, (UNDEF: 16)
    1878:	0000016b 	andeq	r0, r0, fp, ror #2
    187c:	0000031c 	andeq	r0, r0, ip, lsl r3
    1880:	00560001 	subseq	r0, r6, r1
    1884:	00000000 	andeq	r0, r0, r0
    1888:	70000000 	andvc	r0, r0, r0
    188c:	ac000001 	stcge	0, cr0, [r0], {1}
    1890:	01000001 	tsteq	r0, r1
    1894:	030c5400 	movweq	r5, #50176	; 0xc400
    1898:	03140000 	tsteq	r4, #0
    189c:	00010000 	andeq	r0, r1, r0
    18a0:	00000054 	andeq	r0, r0, r4, asr r0
    18a4:	00000000 	andeq	r0, r0, r0
    18a8:	0001a800 	andeq	sl, r1, r0, lsl #16
    18ac:	0001c400 	andeq	ip, r1, r0, lsl #8
    18b0:	58000100 	stmdapl	r0, {r8}
	...
    18bc:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    18c0:	000001cb 	andeq	r0, r0, fp, asr #3
    18c4:	cb520001 	blgt	14818d0 <__bss_end__+0x1476760>
    18c8:	d0000001 	andle	r0, r0, r1
    18cc:	08000002 	stmdaeq	r0, {r1}
    18d0:	31007400 	tstcc	r0, r0, lsl #8
    18d4:	22007425 	andcs	r7, r0, #620756992	; 0x25000000
    18d8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    18dc:	00000000 	andeq	r0, r0, r0
    18e0:	0001b000 	andeq	fp, r1, r0
    18e4:	0001c400 	andeq	ip, r1, r0, lsl #8
    18e8:	58000100 	stmdapl	r0, {r8}
	...
    18f4:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
    18f8:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    18fc:	00530001 	subseq	r0, r3, r1
    1900:	00000000 	andeq	r0, r0, r0
    1904:	d0000000 	andle	r0, r0, r0
    1908:	d0000001 	andle	r0, r0, r1
    190c:	01000002 	tsteq	r0, r2
    1910:	00005400 	andeq	r5, r0, r0, lsl #8
    1914:	00000000 	andeq	r0, r0, r0
    1918:	01d00000 	bicseq	r0, r0, r0
    191c:	01e40000 	mvneq	r0, r0
    1920:	00010000 	andeq	r0, r1, r0
    1924:	00000058 	andeq	r0, r0, r8, asr r0
    1928:	00000000 	andeq	r0, r0, r0
    192c:	0001d400 	andeq	sp, r1, r0, lsl #8
    1930:	0001d800 	andeq	sp, r1, r0, lsl #16
    1934:	53000100 	movwpl	r0, #256	; 0x100
	...
    1940:	000001f4 	strdeq	r0, [r0], -r4
    1944:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1948:	00540001 	subseq	r0, r4, r1
    194c:	00000000 	andeq	r0, r0, r0
    1950:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    1954:	08000001 	stmdaeq	r0, {r0}
    1958:	01000002 	tsteq	r0, r2
    195c:	00005800 	andeq	r5, r0, r0, lsl #16
    1960:	00000000 	andeq	r0, r0, r0
    1964:	01f80000 	mvnseq	r0, r0
    1968:	01fc0000 	mvnseq	r0, r0
    196c:	00010000 	andeq	r0, r1, r0
    1970:	00000053 	andeq	r0, r0, r3, asr r0
    1974:	00000000 	andeq	r0, r0, r0
    1978:	00021800 	andeq	r1, r2, r0, lsl #16
    197c:	0002d000 	andeq	sp, r2, r0
    1980:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    198c:	00000218 	andeq	r0, r0, r8, lsl r2
    1990:	0000022c 	andeq	r0, r0, ip, lsr #4
    1994:	00580001 	subseq	r0, r8, r1
    1998:	00000000 	andeq	r0, r0, r0
    199c:	1c000000 	stcne	0, cr0, [r0], {-0}
    19a0:	20000002 	andcs	r0, r0, r2
    19a4:	01000002 	tsteq	r0, r2
    19a8:	00005300 	andeq	r5, r0, r0, lsl #6
    19ac:	00000000 	andeq	r0, r0, r0
    19b0:	023c0000 	eorseq	r0, ip, #0
    19b4:	02d00000 	sbcseq	r0, r0, #0
    19b8:	00010000 	andeq	r0, r1, r0
    19bc:	00000054 	andeq	r0, r0, r4, asr r0
    19c0:	00000000 	andeq	r0, r0, r0
    19c4:	00023c00 	andeq	r3, r2, r0, lsl #24
    19c8:	00025000 	andeq	r5, r2, r0
    19cc:	58000100 	stmdapl	r0, {r8}
	...
    19d8:	00000240 	andeq	r0, r0, r0, asr #4
    19dc:	00000244 	andeq	r0, r0, r4, asr #4
    19e0:	00530001 	subseq	r0, r3, r1
    19e4:	00000000 	andeq	r0, r0, r0
    19e8:	60000000 	andvs	r0, r0, r0
    19ec:	d0000002 	andle	r0, r0, r2
    19f0:	01000002 	tsteq	r0, r2
    19f4:	00005400 	andeq	r5, r0, r0, lsl #8
    19f8:	00000000 	andeq	r0, r0, r0
    19fc:	02600000 	rsbeq	r0, r0, #0
    1a00:	02740000 	rsbseq	r0, r4, #0
    1a04:	00010000 	andeq	r0, r1, r0
    1a08:	00000058 	andeq	r0, r0, r8, asr r0
    1a0c:	00000000 	andeq	r0, r0, r0
    1a10:	00026400 	andeq	r6, r2, r0, lsl #8
    1a14:	00026800 	andeq	r6, r2, r0, lsl #16
    1a18:	53000100 	movwpl	r0, #256	; 0x100
	...
    1a24:	00000284 	andeq	r0, r0, r4, lsl #5
    1a28:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1a2c:	00540001 	subseq	r0, r4, r1
    1a30:	00000000 	andeq	r0, r0, r0
    1a34:	84000000 	strhi	r0, [r0], #-0
    1a38:	98000002 	stmdals	r0, {r1}
    1a3c:	01000002 	tsteq	r0, r2
    1a40:	00005800 	andeq	r5, r0, r0, lsl #16
    1a44:	00000000 	andeq	r0, r0, r0
    1a48:	02880000 	addeq	r0, r8, #0
    1a4c:	028c0000 	addeq	r0, ip, #0
    1a50:	00010000 	andeq	r0, r1, r0
    1a54:	00000053 	andeq	r0, r0, r3, asr r0
    1a58:	00000000 	andeq	r0, r0, r0
    1a5c:	0002a800 	andeq	sl, r2, r0, lsl #16
    1a60:	0002d000 	andeq	sp, r2, r0
    1a64:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    1a70:	000002ac 	andeq	r0, r0, ip, lsr #5
    1a74:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
    1a78:	00530001 	subseq	r0, r3, r1
    1a7c:	00000000 	andeq	r0, r0, r0
    1a80:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    1a84:	0c000002 	stceq	0, cr0, [r0], {2}
    1a88:	02000003 	andeq	r0, r0, #3
    1a8c:	149f3000 	ldrne	r3, [pc], #0	; 1a94 <_start-0x656c>
    1a90:	1c000003 	stcne	0, cr0, [r0], {3}
    1a94:	02000003 	andeq	r0, r0, #3
    1a98:	009f3000 	addseq	r3, pc, r0
    1a9c:	00000000 	andeq	r0, r0, r0
    1aa0:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    1aa4:	0c000002 	stceq	0, cr0, [r0], {2}
    1aa8:	01000003 	tsteq	r0, r3
    1aac:	03145500 	tsteq	r4, #0, 10
    1ab0:	031c0000 	tsteq	ip, #0
    1ab4:	00010000 	andeq	r0, r1, r0
    1ab8:	00000055 	andeq	r0, r0, r5, asr r0
    1abc:	00000000 	andeq	r0, r0, r0
    1ac0:	0002d000 	andeq	sp, r2, r0
    1ac4:	00030c00 	andeq	r0, r3, r0, lsl #24
    1ac8:	54000100 	strpl	r0, [r0], #-256	; 0x100
    1acc:	00000314 	andeq	r0, r0, r4, lsl r3
    1ad0:	0000031c 	andeq	r0, r0, ip, lsl r3
    1ad4:	00540001 	subseq	r0, r4, r1
    1ad8:	00000000 	andeq	r0, r0, r0
    1adc:	1c000000 	stcne	0, cr0, [r0], {-0}
    1ae0:	3b000003 	blcc	1af4 <_start-0x650c>
    1ae4:	01000003 	tsteq	r0, r3
    1ae8:	033b5000 	teqeq	fp, #0
    1aec:	03540000 	cmpeq	r4, #0
    1af0:	00010000 	andeq	r0, r1, r0
    1af4:	00035458 	andeq	r5, r3, r8, asr r4
    1af8:	00036400 	andeq	r6, r3, r0, lsl #8
    1afc:	50000100 	andpl	r0, r0, r0, lsl #2
    1b00:	00000364 	andeq	r0, r0, r4, ror #6
    1b04:	000003ac 	andeq	r0, r0, ip, lsr #7
    1b08:	00580001 	subseq	r0, r8, r1
    1b0c:	00000000 	andeq	r0, r0, r0
    1b10:	1c000000 	stcne	0, cr0, [r0], {-0}
    1b14:	3b000003 	blcc	1b28 <_start-0x64d8>
    1b18:	01000003 	tsteq	r0, r3
    1b1c:	033b5100 	teqeq	fp, #0, 2
    1b20:	03540000 	cmpeq	r4, #0
    1b24:	00010000 	andeq	r0, r1, r0
    1b28:	00035456 	andeq	r5, r3, r6, asr r4
    1b2c:	00036400 	andeq	r6, r3, r0, lsl #8
    1b30:	51000100 	mrspl	r0, (UNDEF: 16)
    1b34:	00000364 	andeq	r0, r0, r4, ror #6
    1b38:	000003ac 	andeq	r0, r0, ip, lsr #7
    1b3c:	00560001 	subseq	r0, r6, r1
    1b40:	00000000 	andeq	r0, r0, r0
    1b44:	1c000000 	stcne	0, cr0, [r0], {-0}
    1b48:	3b000003 	blcc	1b5c <_start-0x64a4>
    1b4c:	01000003 	tsteq	r0, r3
    1b50:	033b5200 	teqeq	fp, #0, 4
    1b54:	03540000 	cmpeq	r4, #0
    1b58:	00040000 	andeq	r0, r4, r0
    1b5c:	9f5201f3 	svcls	0x005201f3
    1b60:	00000354 	andeq	r0, r0, r4, asr r3
    1b64:	00000364 	andeq	r0, r0, r4, ror #6
    1b68:	64520001 	ldrbvs	r0, [r2], #-1
    1b6c:	ac000003 	stcge	0, cr0, [r0], {3}
    1b70:	03000003 	movweq	r0, #3
    1b74:	9f017700 	svcls	0x00017700
	...
    1b80:	0000031c 	andeq	r0, r0, ip, lsl r3
    1b84:	0000033b 	andeq	r0, r0, fp, lsr r3
    1b88:	3b530001 	blcc	14c1b94 <__bss_end__+0x14b6a24>
    1b8c:	54000003 	strpl	r0, [r0], #-3
    1b90:	04000003 	streq	r0, [r0], #-3
    1b94:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    1b98:	0003549f 	muleq	r3, pc, r4	; <UNPREDICTABLE>
    1b9c:	00036400 	andeq	r6, r3, r0, lsl #8
    1ba0:	53000100 	movwpl	r0, #256	; 0x100
    1ba4:	00000364 	andeq	r0, r0, r4, ror #6
    1ba8:	000003ac 	andeq	r0, r0, ip, lsr #7
    1bac:	01f30004 	mvnseq	r0, r4
    1bb0:	00009f53 	andeq	r9, r0, r3, asr pc
    1bb4:	00000000 	andeq	r0, r0, r0
    1bb8:	035c0000 	cmpeq	ip, #0
    1bbc:	03640000 	cmneq	r4, #0
    1bc0:	00020000 	andeq	r0, r2, r0
    1bc4:	03649f30 	cmneq	r4, #48, 30	; 0xc0
    1bc8:	03ac0000 			; <UNDEFINED> instruction: 0x03ac0000
    1bcc:	00010000 	andeq	r0, r1, r0
    1bd0:	00000054 	andeq	r0, r0, r4, asr r0
    1bd4:	00000000 	andeq	r0, r0, r0
    1bd8:	00037400 	andeq	r7, r3, r0, lsl #8
    1bdc:	00038400 	andeq	r8, r3, r0, lsl #8
    1be0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1bec:	000003ac 	andeq	r0, r0, ip, lsr #7
    1bf0:	000003c7 	andeq	r0, r0, r7, asr #7
    1bf4:	c7500001 	ldrbgt	r0, [r0, -r1]
    1bf8:	e0000003 	and	r0, r0, r3
    1bfc:	01000003 	tsteq	r0, r3
    1c00:	03e05700 	mvneq	r5, #0, 14
    1c04:	03f00000 	mvnseq	r0, #0
    1c08:	00010000 	andeq	r0, r1, r0
    1c0c:	0003f050 	andeq	pc, r3, r0, asr r0	; <UNPREDICTABLE>
    1c10:	00042800 	andeq	r2, r4, r0, lsl #16
    1c14:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    1c20:	000003ac 	andeq	r0, r0, ip, lsr #7
    1c24:	000003c7 	andeq	r0, r0, r7, asr #7
    1c28:	c7510001 	ldrbgt	r0, [r1, -r1]
    1c2c:	e0000003 	and	r0, r0, r3
    1c30:	01000003 	tsteq	r0, r3
    1c34:	03e05500 	mvneq	r5, #0, 10
    1c38:	03f00000 	mvnseq	r0, #0
    1c3c:	00010000 	andeq	r0, r1, r0
    1c40:	0003f051 	andeq	pc, r3, r1, asr r0	; <UNPREDICTABLE>
    1c44:	00042800 	andeq	r2, r4, r0, lsl #16
    1c48:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    1c54:	000003ac 	andeq	r0, r0, ip, lsr #7
    1c58:	000003c7 	andeq	r0, r0, r7, asr #7
    1c5c:	c7520001 	ldrbgt	r0, [r2, -r1]
    1c60:	e0000003 	and	r0, r0, r3
    1c64:	04000003 	streq	r0, [r0], #-3
    1c68:	5201f300 	andpl	pc, r1, #0, 6
    1c6c:	0003e09f 	muleq	r3, pc, r0	; <UNPREDICTABLE>
    1c70:	0003f000 	andeq	pc, r3, r0
    1c74:	52000100 	andpl	r0, r0, #0, 2
    1c78:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1c7c:	00000428 	andeq	r0, r0, r8, lsr #8
    1c80:	01760003 	cmneq	r6, r3
    1c84:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1c88:	00000000 	andeq	r0, r0, r0
    1c8c:	0003ac00 	andeq	sl, r3, r0, lsl #24
    1c90:	0003c700 	andeq	ip, r3, r0, lsl #14
    1c94:	53000100 	movwpl	r0, #256	; 0x100
    1c98:	000003c7 	andeq	r0, r0, r7, asr #7
    1c9c:	000003e0 	andeq	r0, r0, r0, ror #7
    1ca0:	e0580001 	subs	r0, r8, r1
    1ca4:	f0000003 			; <UNDEFINED> instruction: 0xf0000003
    1ca8:	01000003 	tsteq	r0, r3
    1cac:	03f05300 	mvnseq	r5, #0, 6
    1cb0:	04280000 	strteq	r0, [r8], #-0
    1cb4:	00010000 	andeq	r0, r1, r0
    1cb8:	00000058 	andeq	r0, r0, r8, asr r0
    1cbc:	00000000 	andeq	r0, r0, r0
    1cc0:	0003e800 	andeq	lr, r3, r0, lsl #16
    1cc4:	0003f000 	andeq	pc, r3, r0
    1cc8:	30000200 	andcc	r0, r0, r0, lsl #4
    1ccc:	0003f09f 	muleq	r3, pc, r0	; <UNPREDICTABLE>
    1cd0:	00042800 	andeq	r2, r4, r0, lsl #16
    1cd4:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    1ce0:	00000428 	andeq	r0, r0, r8, lsr #8
    1ce4:	00000447 	andeq	r0, r0, r7, asr #8
    1ce8:	47510001 	ldrbmi	r0, [r1, -r1]
    1cec:	e8000004 	stmda	r0, {r2}
    1cf0:	04000004 	streq	r0, [r0], #-4
    1cf4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1cf8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1cfc:	00000000 	andeq	r0, r0, r0
    1d00:	00042800 	andeq	r2, r4, r0, lsl #16
    1d04:	00044700 	andeq	r4, r4, r0, lsl #14
    1d08:	52000100 	andpl	r0, r0, #0, 2
    1d0c:	00000447 	andeq	r0, r0, r7, asr #8
    1d10:	000004e8 	andeq	r0, r0, r8, ror #9
    1d14:	01f30004 	mvnseq	r0, r4
    1d18:	00009f52 	andeq	r9, r0, r2, asr pc
    1d1c:	00000000 	andeq	r0, r0, r0
    1d20:	04280000 	strteq	r0, [r8], #-0
    1d24:	04470000 	strbeq	r0, [r7], #-0
    1d28:	00010000 	andeq	r0, r1, r0
    1d2c:	00044753 	andeq	r4, r4, r3, asr r7
    1d30:	0004e800 	andeq	lr, r4, r0, lsl #16
    1d34:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    1d40:	00000468 	andeq	r0, r0, r8, ror #8
    1d44:	000004a7 	andeq	r0, r0, r7, lsr #9
    1d48:	a7520001 	ldrbge	r0, [r2, -r1]
    1d4c:	c0000004 	andgt	r0, r0, r4
    1d50:	06000004 	streq	r0, [r0], -r4
    1d54:	77007500 	strvc	r7, [r0, -r0, lsl #10]
    1d58:	c09f1e00 	addsgt	r1, pc, r0, lsl #28
    1d5c:	e8000004 	stmda	r0, {r2}
    1d60:	01000004 	tsteq	r0, r4
    1d64:	00005200 	andeq	r5, r0, r0, lsl #4
    1d68:	00000000 	andeq	r0, r0, r0
    1d6c:	04e80000 	strbteq	r0, [r8], #0
    1d70:	04f30000 	ldrbteq	r0, [r3], #0
    1d74:	00010000 	andeq	r0, r1, r0
    1d78:	0004f350 	andeq	pc, r4, r0, asr r3	; <UNPREDICTABLE>
    1d7c:	00052400 	andeq	r2, r5, r0, lsl #8
    1d80:	f3000400 	vshl.u8	d0, d0, d0
    1d84:	009f5001 	addseq	r5, pc, r1
    1d88:	00000000 	andeq	r0, r0, r0
    1d8c:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    1d90:	ff000004 			; <UNDEFINED> instruction: 0xff000004
    1d94:	01000004 	tsteq	r0, r4
    1d98:	00005000 	andeq	r5, r0, r0
    1d9c:	00000000 	andeq	r0, r0, r0
    1da0:	05240000 	streq	r0, [r4, #-0]!
    1da4:	05340000 	ldreq	r0, [r4, #-0]!
    1da8:	00010000 	andeq	r0, r1, r0
    1dac:	00053450 	andeq	r3, r5, r0, asr r4
    1db0:	00055000 	andeq	r5, r5, r0
    1db4:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    1dc0:	00000524 	andeq	r0, r0, r4, lsr #10
    1dc4:	00000534 	andeq	r0, r0, r4, lsr r5
    1dc8:	34510001 	ldrbcc	r0, [r1], #-1
    1dcc:	50000005 	andpl	r0, r0, r5
    1dd0:	01000005 	tsteq	r0, r5
    1dd4:	00005400 	andeq	r5, r0, r0, lsl #8
    1dd8:	00000000 	andeq	r0, r0, r0
    1ddc:	05500000 	ldrbeq	r0, [r0, #-0]
    1de0:	056c0000 	strbeq	r0, [ip, #-0]!
    1de4:	00010000 	andeq	r0, r1, r0
    1de8:	00056c50 	andeq	r6, r5, r0, asr ip
    1dec:	0005bc00 	andeq	fp, r5, r0, lsl #24
    1df0:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    1df4:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
    1df8:	000005d4 	ldrdeq	r0, [r0], -r4
    1dfc:	01f30004 	mvnseq	r0, r4
    1e00:	00009f50 	andeq	r9, r0, r0, asr pc
    1e04:	00000000 	andeq	r0, r0, r0
    1e08:	057c0000 	ldrbeq	r0, [ip, #-0]!
    1e0c:	058b0000 	streq	r0, [fp]
    1e10:	00010000 	andeq	r0, r1, r0
    1e14:	00058b50 	andeq	r8, r5, r0, asr fp
    1e18:	0005a400 	andeq	sl, r5, r0, lsl #8
    1e1c:	54000100 	strpl	r0, [r0], #-256	; 0x100
    1e20:	000005a4 	andeq	r0, r0, r4, lsr #11
    1e24:	000005a8 	andeq	r0, r0, r8, lsr #11
    1e28:	a8500001 	ldmdage	r0, {r0}^
    1e2c:	bc000005 	stclt	0, cr0, [r0], {5}
    1e30:	01000005 	tsteq	r0, r5
    1e34:	05bc5400 	ldreq	r5, [ip, #1024]!	; 0x400
    1e38:	05d40000 	ldrbeq	r0, [r4]
    1e3c:	00010000 	andeq	r0, r1, r0
    1e40:	00000050 	andeq	r0, r0, r0, asr r0
    1e44:	00000000 	andeq	r0, r0, r0
    1e48:	0005d400 	andeq	sp, r5, r0, lsl #8
    1e4c:	0005e700 	andeq	lr, r5, r0, lsl #14
    1e50:	50000100 	andpl	r0, r0, r0, lsl #2
    1e54:	000005e7 	andeq	r0, r0, r7, ror #11
    1e58:	00000620 	andeq	r0, r0, r0, lsr #12
    1e5c:	01f30004 	mvnseq	r0, r4
    1e60:	00009f50 	andeq	r9, r0, r0, asr pc
    1e64:	00000000 	andeq	r0, r0, r0
    1e68:	05d40000 	ldrbeq	r0, [r4]
    1e6c:	05e70000 	strbeq	r0, [r7, #0]!
    1e70:	00010000 	andeq	r0, r1, r0
    1e74:	0005e751 	andeq	lr, r5, r1, asr r7
    1e78:	00062000 	andeq	r2, r6, r0
    1e7c:	f3000400 	vshl.u8	d0, d0, d0
    1e80:	009f5101 	addseq	r5, pc, r1, lsl #2
    1e84:	00000000 	andeq	r0, r0, r0
    1e88:	d4000000 	strle	r0, [r0], #-0
    1e8c:	e7000005 	str	r0, [r0, -r5]
    1e90:	01000005 	tsteq	r0, r5
    1e94:	05e75200 	strbeq	r5, [r7, #512]!	; 0x200
    1e98:	06200000 	strteq	r0, [r0], -r0
    1e9c:	00040000 	andeq	r0, r4, r0
    1ea0:	9f5201f3 	svcls	0x005201f3
	...
    1eac:	000005d4 	ldrdeq	r0, [r0], -r4
    1eb0:	000005e7 	andeq	r0, r0, r7, ror #11
    1eb4:	e7530001 	ldrb	r0, [r3, -r1]
    1eb8:	20000005 	andcs	r0, r0, r5
    1ebc:	04000006 	streq	r0, [r0], #-6
    1ec0:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    1ec4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1ec8:	00000000 	andeq	r0, r0, r0
    1ecc:	0005e800 	andeq	lr, r5, r0, lsl #16
    1ed0:	0005f300 	andeq	pc, r5, r0, lsl #6
    1ed4:	50000100 	andpl	r0, r0, r0, lsl #2
    1ed8:	0000060c 	andeq	r0, r0, ip, lsl #12
    1edc:	00000620 	andeq	r0, r0, r0, lsr #12
    1ee0:	00500001 	subseq	r0, r0, r1
    1ee4:	00000000 	andeq	r0, r0, r0
    1ee8:	fc000000 	stc2	0, cr0, [r0], {-0}
    1eec:	04000000 	streq	r0, [r0], #-0
    1ef0:	01000001 	tsteq	r0, r1
    1ef4:	01045000 	mrseq	r5, (UNDEF: 4)
    1ef8:	01280000 	teqeq	r8, r0
    1efc:	00010000 	andeq	r0, r1, r0
    1f00:	00000054 	andeq	r0, r0, r4, asr r0
	...
    1f0c:	00009000 	andeq	r9, r0, r0
    1f10:	50000100 	andpl	r0, r0, r0, lsl #2
    1f14:	00000090 	muleq	r0, r0, r0
    1f18:	000000d4 	ldrdeq	r0, [r0], -r4
    1f1c:	00540001 	subseq	r0, r4, r1
    1f20:	00000000 	andeq	r0, r0, r0
    1f24:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    1f28:	4c000000 	stcmi	0, cr0, [r0], {-0}
    1f2c:	01000000 	mrseq	r0, (UNDEF: 0)
    1f30:	00545500 	subseq	r5, r4, r0, lsl #10
    1f34:	00580000 	subseq	r0, r8, r0
    1f38:	00010000 	andeq	r0, r1, r0
    1f3c:	00006055 	andeq	r6, r0, r5, asr r0
    1f40:	00006400 	andeq	r6, r0, r0, lsl #8
    1f44:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    1f48:	0000006c 	andeq	r0, r0, ip, rrx
    1f4c:	00000070 	andeq	r0, r0, r0, ror r0
    1f50:	78550001 	ldmdavc	r5, {r0}^
    1f54:	7c000000 	stcvc	0, cr0, [r0], {-0}
    1f58:	01000000 	mrseq	r0, (UNDEF: 0)
    1f5c:	00845500 	addeq	r5, r4, r0, lsl #10
    1f60:	00880000 	addeq	r0, r8, r0
    1f64:	00010000 	andeq	r0, r1, r0
    1f68:	00008c55 	andeq	r8, r0, r5, asr ip
    1f6c:	0000d400 	andeq	sp, r0, r0, lsl #8
    1f70:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    1f7c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1f80:	00000044 	andeq	r0, r0, r4, asr #32
    1f84:	44530001 	ldrbmi	r0, [r3], #-1
    1f88:	4c000000 	stcmi	0, cr0, [r0], {-0}
    1f8c:	1c000000 	stcne	0, cr0, [r0], {-0}
    1f90:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    1f94:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    1f98:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1f9c:	0000cccc 	andeq	ip, r0, ip, asr #25
    1fa0:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1fa4:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1fa8:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1fac:	00004c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    1fb0:	00005000 	andeq	r5, r0, r0
    1fb4:	53000100 	movwpl	r0, #256	; 0x100
    1fb8:	00000050 	andeq	r0, r0, r0, asr r0
    1fbc:	00000058 	andeq	r0, r0, r8, asr r0
    1fc0:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    1fc4:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1fc8:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1fcc:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1fd0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1fd4:	25f72008 	ldrbcs	r2, [r7, #8]!
    1fd8:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1fdc:	00589f25 	subseq	r9, r8, r5, lsr #30
    1fe0:	005c0000 	subseq	r0, ip, r0
    1fe4:	00010000 	andeq	r0, r1, r0
    1fe8:	00005c53 	andeq	r5, r0, r3, asr ip
    1fec:	00006400 	andeq	r6, r0, r0, lsl #8
    1ff0:	70001c00 	andvc	r1, r0, r0, lsl #24
    1ff4:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1ff8:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1ffc:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    2000:	00000000 	andeq	r0, r0, r0
    2004:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    2008:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    200c:	649f2533 	ldrvs	r2, [pc], #1331	; 2014 <_start-0x5fec>
    2010:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    2014:	01000000 	mrseq	r0, (UNDEF: 0)
    2018:	00685300 	rsbeq	r5, r8, r0, lsl #6
    201c:	00700000 	rsbseq	r0, r0, r0
    2020:	001c0000 	andseq	r0, ip, r0
    2024:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    2028:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    202c:	cccccd08 	stclgt	13, cr12, [ip], {8}
    2030:	000000cc 	andeq	r0, r0, ip, asr #1
    2034:	20081e00 	andcs	r1, r8, r0, lsl #28
    2038:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    203c:	9f25332c 	svcls	0x0025332c
    2040:	00000070 	andeq	r0, r0, r0, ror r0
    2044:	00000074 	andeq	r0, r0, r4, ror r0
    2048:	74530001 	ldrbvc	r0, [r3], #-1
    204c:	7c000000 	stcvc	0, cr0, [r0], {-0}
    2050:	1c000000 	stcne	0, cr0, [r0], {-0}
    2054:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    2058:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    205c:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    2060:	0000cccc 	andeq	ip, r0, ip, asr #25
    2064:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    2068:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    206c:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    2070:	00007c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    2074:	00008000 	andeq	r8, r0, r0
    2078:	53000100 	movwpl	r0, #256	; 0x100
    207c:	00000080 	andeq	r0, r0, r0, lsl #1
    2080:	00000088 	andeq	r0, r0, r8, lsl #1
    2084:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    2088:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    208c:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    2090:	00cccccc 	sbceq	ip, ip, ip, asr #25
    2094:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2098:	25f72008 	ldrbcs	r2, [r7, #8]!
    209c:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    20a0:	00889f25 	addeq	r9, r8, r5, lsr #30
    20a4:	008c0000 	addeq	r0, ip, r0
    20a8:	00010000 	andeq	r0, r1, r0
    20ac:	00008c53 	andeq	r8, r0, r3, asr ip
    20b0:	00009000 	andeq	r9, r0, r0
    20b4:	70001c00 	andvc	r1, r0, r0, lsl #24
    20b8:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    20bc:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    20c0:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    20c4:	00000000 	andeq	r0, r0, r0
    20c8:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    20cc:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    20d0:	909f2533 	addsls	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
    20d4:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    20d8:	1c000000 	stcne	0, cr0, [r0], {-0}
    20dc:	f7007400 			; <UNDEFINED> instruction: 0xf7007400
    20e0:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    20e4:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    20e8:	0000cccc 	andeq	ip, r0, ip, asr #25
    20ec:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    20f0:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    20f4:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    20f8:	0000989f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    20fc:	00009c00 	andeq	r9, r0, r0, lsl #24
    2100:	74001700 	strvc	r1, [r0], #-1792	; 0x700
    2104:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    2108:	f7007125 			; <UNDEFINED> instruction: 0xf7007125
    210c:	1e25f72c 	cdpne	7, 2, cr15, cr5, cr12, {1}
    2110:	25f72008 	ldrbcs	r2, [r7, #8]!
    2114:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    2118:	009c9f25 	addseq	r9, ip, r5, lsr #30
    211c:	00d40000 	sbcseq	r0, r4, r0
    2120:	001c0000 	andseq	r0, ip, r0
    2124:	2cf70074 	ldclcs	0, cr0, [r7], #464	; 0x1d0
    2128:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    212c:	cccccd08 	stclgt	13, cr12, [ip], {8}
    2130:	000000cc 	andeq	r0, r0, ip, asr #1
    2134:	20081e00 	andcs	r1, r8, r0, lsl #28
    2138:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    213c:	9f25332c 	svcls	0x0025332c
	...
    2148:	00000094 	muleq	r0, r4, r0
    214c:	000000b8 	strheq	r0, [r0], -r8
    2150:	b8500001 	ldmdalt	r0, {r0}^
    2154:	c4000000 	strgt	r0, [r0], #-0
    2158:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    215c:	00713100 	rsbseq	r3, r1, r0, lsl #2
    2160:	21007324 	tstcs	r0, r4, lsr #6
    2164:	0000c49f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    2168:	0000c700 	andeq	ip, r0, r0, lsl #14
    216c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    2178:	000000d4 	ldrdeq	r0, [r0], -r4
    217c:	000000f8 	strdeq	r0, [r0], -r8
    2180:	f8500001 			; <UNDEFINED> instruction: 0xf8500001
    2184:	0c000000 	stceq	0, cr0, [r0], {-0}
    2188:	04000001 	streq	r0, [r0], #-1
    218c:	5001f300 	andpl	pc, r1, r0, lsl #6
    2190:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2194:	00000000 	andeq	r0, r0, r0
    2198:	0000e000 	andeq	lr, r0, r0
    219c:	0000e800 	andeq	lr, r0, r0, lsl #16
    21a0:	30000200 	andcc	r0, r0, r0, lsl #4
    21a4:	0000e89f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    21a8:	0000e800 	andeq	lr, r0, r0, lsl #16
    21ac:	52000100 	andpl	r0, r0, #0, 2
    21b0:	000000e8 	andeq	r0, r0, r8, ror #1
    21b4:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    21b8:	9f300002 	svcls	0x00300002
    21bc:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    21c0:	00000103 	andeq	r0, r0, r3, lsl #2
    21c4:	00520001 	subseq	r0, r2, r1
    21c8:	00000000 	andeq	r0, r0, r0
    21cc:	e0000000 	and	r0, r0, r0
    21d0:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    21d4:	02000000 	andeq	r0, r0, #0
    21d8:	f49f3000 			; <UNDEFINED> instruction: 0xf49f3000
    21dc:	00000000 	andeq	r0, r0, r0
    21e0:	05000001 	streq	r0, [r0, #-1]
    21e4:	00733100 	rsbseq	r3, r3, r0, lsl #2
    21e8:	01009f24 	tsteq	r0, r4, lsr #30
    21ec:	01030000 	mrseq	r0, (UNDEF: 3)
    21f0:	00010000 	andeq	r0, r1, r0
    21f4:	00010351 	andeq	r0, r1, r1, asr r3
    21f8:	00010c00 	andeq	r0, r1, r0, lsl #24
    21fc:	31000800 	tstcc	r0, r0, lsl #16
    2200:	4f5001f3 	svcmi	0x005001f3
    2204:	009f241a 	addseq	r2, pc, sl, lsl r4	; <UNPREDICTABLE>
    2208:	00000000 	andeq	r0, r0, r0
    220c:	0c000000 	stceq	0, cr0, [r0], {-0}
    2210:	30000001 	andcc	r0, r0, r1
    2214:	01000001 	tsteq	r0, r1
    2218:	01305000 	teqeq	r0, r0
    221c:	01440000 	mrseq	r0, (UNDEF: 68)
    2220:	00040000 	andeq	r0, r4, r0
    2224:	9f5001f3 	svcls	0x005001f3
	...
    2230:	00000118 	andeq	r0, r0, r8, lsl r1
    2234:	00000120 	andeq	r0, r0, r0, lsr #2
    2238:	9f300002 	svcls	0x00300002
    223c:	00000120 	andeq	r0, r0, r0, lsr #2
    2240:	00000120 	andeq	r0, r0, r0, lsr #2
    2244:	20520001 	subscs	r0, r2, r1
    2248:	28000001 	stmdacs	r0, {r0}
    224c:	02000001 	andeq	r0, r0, #1
    2250:	289f3000 	ldmcs	pc, {ip, sp}	; <UNPREDICTABLE>
    2254:	3b000001 	blcc	2260 <_start-0x5da0>
    2258:	01000001 	tsteq	r0, r1
    225c:	00005200 	andeq	r5, r0, r0, lsl #4
    2260:	00000000 	andeq	r0, r0, r0
    2264:	01180000 	tsteq	r8, r0
    2268:	012c0000 	teqeq	ip, r0
    226c:	00020000 	andeq	r0, r2, r0
    2270:	012c9f30 	teqeq	ip, r0, lsr pc
    2274:	01380000 	teqeq	r8, r0
    2278:	00050000 	andeq	r0, r5, r0
    227c:	24007331 	strcs	r7, [r0], #-817	; 0x331
    2280:	0001389f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
    2284:	00013b00 	andeq	r3, r1, r0, lsl #22
    2288:	51000100 	mrspl	r0, (UNDEF: 16)
    228c:	0000013b 	andeq	r0, r0, fp, lsr r1
    2290:	00000144 	andeq	r0, r0, r4, asr #2
    2294:	f3310008 	vhadd.u<illegal width 64>	d0, d1, d8
    2298:	1a4f5001 	bne	13d62a4 <__bss_end__+0x13cb134>
    229c:	00009f24 	andeq	r9, r0, r4, lsr #30
    22a0:	00000000 	andeq	r0, r0, r0
    22a4:	01440000 	mrseq	r0, (UNDEF: 68)
    22a8:	01d40000 	bicseq	r0, r4, r0
    22ac:	00010000 	andeq	r0, r1, r0
    22b0:	0001d450 	andeq	sp, r1, r0, asr r4
    22b4:	00021000 	andeq	r1, r2, r0
    22b8:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    22c4:	0000018c 	andeq	r0, r0, ip, lsl #3
    22c8:	00000190 	muleq	r0, r0, r1
    22cc:	98550001 	ldmdals	r5, {r0}^
    22d0:	9c000001 	stcls	0, cr0, [r0], {1}
    22d4:	01000001 	tsteq	r0, r1
    22d8:	01a45500 			; <UNDEFINED> instruction: 0x01a45500
    22dc:	01a80000 			; <UNDEFINED> instruction: 0x01a80000
    22e0:	00010000 	andeq	r0, r1, r0
    22e4:	0001b055 	andeq	fp, r1, r5, asr r0
    22e8:	0001b400 	andeq	fp, r1, r0, lsl #8
    22ec:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    22f0:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    22f4:	000001c0 	andeq	r0, r0, r0, asr #3
    22f8:	c8550001 	ldmdagt	r5, {r0}^
    22fc:	cc000001 	stcgt	0, cr0, [r0], {1}
    2300:	01000001 	tsteq	r0, r1
    2304:	01d05500 	bicseq	r5, r0, r0, lsl #10
    2308:	02100000 	andseq	r0, r0, #0
    230c:	00010000 	andeq	r0, r1, r0
    2310:	00000055 	andeq	r0, r0, r5, asr r0
    2314:	00000000 	andeq	r0, r0, r0
    2318:	00016000 	andeq	r6, r1, r0
    231c:	00018800 	andeq	r8, r1, r0, lsl #16
    2320:	53000100 	movwpl	r0, #256	; 0x100
    2324:	00000188 	andeq	r0, r0, r8, lsl #3
    2328:	00000190 	muleq	r0, r0, r1
    232c:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    2330:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    2334:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    2338:	00cccccc 	sbceq	ip, ip, ip, asr #25
    233c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2340:	25f72008 	ldrbcs	r2, [r7, #8]!
    2344:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    2348:	01909f25 	orrseq	r9, r0, r5, lsr #30
    234c:	01940000 	orrseq	r0, r4, r0
    2350:	00010000 	andeq	r0, r1, r0
    2354:	00019453 	andeq	r9, r1, r3, asr r4
    2358:	00019c00 	andeq	r9, r1, r0, lsl #24
    235c:	70001c00 	andvc	r1, r0, r0, lsl #24
    2360:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    2364:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    2368:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    236c:	00000000 	andeq	r0, r0, r0
    2370:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    2374:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    2378:	9c9f2533 	cfldr32ls	mvfx2, [pc], {51}	; 0x33
    237c:	a0000001 	andge	r0, r0, r1
    2380:	01000001 	tsteq	r0, r1
    2384:	01a05300 	lsleq	r5, r0, #6
    2388:	01a80000 			; <UNDEFINED> instruction: 0x01a80000
    238c:	001c0000 	andseq	r0, ip, r0
    2390:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    2394:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    2398:	cccccd08 	stclgt	13, cr12, [ip], {8}
    239c:	000000cc 	andeq	r0, r0, ip, asr #1
    23a0:	20081e00 	andcs	r1, r8, r0, lsl #28
    23a4:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    23a8:	9f25332c 	svcls	0x0025332c
    23ac:	000001a8 	andeq	r0, r0, r8, lsr #3
    23b0:	000001ac 	andeq	r0, r0, ip, lsr #3
    23b4:	ac530001 	mrrcge	0, 0, r0, r3, cr1
    23b8:	b4000001 	strlt	r0, [r0], #-1
    23bc:	1c000001 	stcne	0, cr0, [r0], {1}
    23c0:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    23c4:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    23c8:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    23cc:	0000cccc 	andeq	ip, r0, ip, asr #25
    23d0:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    23d4:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    23d8:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    23dc:	0001b49f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
    23e0:	0001b800 	andeq	fp, r1, r0, lsl #16
    23e4:	53000100 	movwpl	r0, #256	; 0x100
    23e8:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    23ec:	000001c0 	andeq	r0, r0, r0, asr #3
    23f0:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    23f4:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    23f8:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    23fc:	00cccccc 	sbceq	ip, ip, ip, asr #25
    2400:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2404:	25f72008 	ldrbcs	r2, [r7, #8]!
    2408:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    240c:	01c09f25 	biceq	r9, r0, r5, lsr #30
    2410:	01c40000 	biceq	r0, r4, r0
    2414:	00010000 	andeq	r0, r1, r0
    2418:	0001c453 	andeq	ip, r1, r3, asr r4
    241c:	0001cc00 	andeq	ip, r1, r0, lsl #24
    2420:	70001c00 	andvc	r1, r0, r0, lsl #24
    2424:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    2428:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    242c:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    2430:	00000000 	andeq	r0, r0, r0
    2434:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    2438:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    243c:	cc9f2533 	cfldr32gt	mvfx2, [pc], {51}	; 0x33
    2440:	d0000001 	andle	r0, r0, r1
    2444:	01000001 	tsteq	r0, r1
    2448:	01d05300 	bicseq	r5, r0, r0, lsl #6
    244c:	01d40000 	bicseq	r0, r4, r0
    2450:	001c0000 	andseq	r0, ip, r0
    2454:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    2458:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    245c:	cccccd08 	stclgt	13, cr12, [ip], {8}
    2460:	000000cc 	andeq	r0, r0, ip, asr #1
    2464:	20081e00 	andcs	r1, r8, r0, lsl #28
    2468:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    246c:	9f25332c 	svcls	0x0025332c
    2470:	000001d4 	ldrdeq	r0, [r0], -r4
    2474:	000001dc 	ldrdeq	r0, [r0], -ip
    2478:	0074001c 	rsbseq	r0, r4, ip, lsl r0
    247c:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    2480:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    2484:	00cccccc 	sbceq	ip, ip, ip, asr #25
    2488:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    248c:	25f72008 	ldrbcs	r2, [r7, #8]!
    2490:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    2494:	01dc9f25 	bicseq	r9, ip, r5, lsr #30
    2498:	01e00000 	mvneq	r0, r0
    249c:	00170000 	andseq	r0, r7, r0
    24a0:	2cf70074 	ldclcs	0, cr0, [r7], #464	; 0x1d0
    24a4:	007125f7 	ldrshteq	r2, [r1], #-87	; 0xffffffa9
    24a8:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    24ac:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    24b0:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    24b4:	e09f2533 	adds	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
    24b8:	10000001 	andne	r0, r0, r1
    24bc:	1c000002 	stcne	0, cr0, [r0], {2}
    24c0:	f7007400 			; <UNDEFINED> instruction: 0xf7007400
    24c4:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    24c8:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    24cc:	0000cccc 	andeq	ip, r0, ip, asr #25
    24d0:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    24d4:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    24d8:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    24dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    24e0:	00000000 	andeq	r0, r0, r0
    24e4:	0001d800 	andeq	sp, r1, r0, lsl #16
    24e8:	0001fc00 	andeq	pc, r1, r0, lsl #24
    24ec:	50000100 	andpl	r0, r0, r0, lsl #2
    24f0:	000001fc 	strdeq	r0, [r0], -ip
    24f4:	00000203 	andeq	r0, r0, r3, lsl #4
    24f8:	00510001 	subseq	r0, r1, r1
    24fc:	00000000 	andeq	r0, r0, r0
    2500:	10000000 	andne	r0, r0, r0
    2504:	2c000002 	stccs	0, cr0, [r0], {2}
    2508:	01000002 	tsteq	r0, r2
    250c:	022c5000 	eoreq	r5, ip, #0
    2510:	02340000 	eorseq	r0, r4, #0
    2514:	00010000 	andeq	r0, r1, r0
    2518:	00023454 	andeq	r3, r2, r4, asr r4
    251c:	00023c00 	andeq	r3, r2, r0, lsl #24
    2520:	50000100 	andpl	r0, r0, r0, lsl #2
    2524:	0000023c 	andeq	r0, r0, ip, lsr r2
    2528:	00000244 	andeq	r0, r0, r4, asr #4
    252c:	44540001 	ldrbmi	r0, [r4], #-1
    2530:	50000002 	andpl	r0, r0, r2
    2534:	04000002 	streq	r0, [r0], #-2
    2538:	5001f300 	andpl	pc, r1, r0, lsl #6
    253c:	0002509f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
    2540:	00025400 	andeq	r5, r2, r0, lsl #8
    2544:	50000100 	andpl	r0, r0, r0, lsl #2
    2548:	00000254 	andeq	r0, r0, r4, asr r2
    254c:	0000025c 	andeq	r0, r0, ip, asr r2
    2550:	00540001 	subseq	r0, r4, r1
    2554:	00000000 	andeq	r0, r0, r0
    2558:	20000000 	andcs	r0, r0, r0
    255c:	30000002 	andcc	r0, r0, r2
    2560:	02000002 	andeq	r0, r0, #2
    2564:	309f3000 	addscc	r3, pc, r0
    2568:	34000002 	strcc	r0, [r0], #-2
    256c:	01000002 	tsteq	r0, r2
    2570:	02345000 	eorseq	r5, r4, #0
    2574:	02400000 	subeq	r0, r0, #0
    2578:	00020000 	andeq	r0, r2, r0
    257c:	02409f30 	subeq	r9, r0, #48, 30	; 0xc0
    2580:	024c0000 	subeq	r0, ip, #0
    2584:	00010000 	andeq	r0, r1, r0
    2588:	00000050 	andeq	r0, r0, r0, asr r0
    258c:	00000000 	andeq	r0, r0, r0
    2590:	00025c00 	andeq	r5, r2, r0, lsl #24
    2594:	00027300 	andeq	r7, r2, r0, lsl #6
    2598:	50000100 	andpl	r0, r0, r0, lsl #2
    259c:	00000273 	andeq	r0, r0, r3, ror r2
    25a0:	00000278 	andeq	r0, r0, r8, ror r2
    25a4:	01f30004 	mvnseq	r0, r4
    25a8:	02789f50 	rsbseq	r9, r8, #80, 30	; 0x140
    25ac:	027b0000 	rsbseq	r0, fp, #0
    25b0:	00010000 	andeq	r0, r1, r0
    25b4:	00027b50 	andeq	r7, r2, r0, asr fp
    25b8:	00028000 	andeq	r8, r2, r0
    25bc:	f3000400 	vshl.u8	d0, d0, d0
    25c0:	009f5001 	addseq	r5, pc, r1
    25c4:	00000000 	andeq	r0, r0, r0
    25c8:	5c000000 	stcpl	0, cr0, [r0], {-0}
    25cc:	73000002 	movwvc	r0, #2
    25d0:	01000002 	tsteq	r0, r2
    25d4:	02735100 	rsbseq	r5, r3, #0, 2
    25d8:	02780000 	rsbseq	r0, r8, #0
    25dc:	00040000 	andeq	r0, r4, r0
    25e0:	9f5101f3 	svcls	0x005101f3
    25e4:	00000278 	andeq	r0, r0, r8, ror r2
    25e8:	0000027b 	andeq	r0, r0, fp, ror r2
    25ec:	7b510001 	blvc	14425f8 <__bss_end__+0x1437488>
    25f0:	80000002 	andhi	r0, r0, r2
    25f4:	04000002 	streq	r0, [r0], #-2
    25f8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    25fc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2600:	00000000 	andeq	r0, r0, r0
    2604:	00028000 	andeq	r8, r2, r0
    2608:	00031800 	andeq	r1, r3, r0, lsl #16
    260c:	50000100 	andpl	r0, r0, r0, lsl #2
    2610:	00000318 	andeq	r0, r0, r8, lsl r3
    2614:	00000358 	andeq	r0, r0, r8, asr r3
    2618:	00540001 	subseq	r0, r4, r1
    261c:	00000000 	andeq	r0, r0, r0
    2620:	80000000 	andhi	r0, r0, r0
    2624:	1b000002 	blne	2634 <_start-0x59cc>
    2628:	01000003 	tsteq	r0, r3
    262c:	031b5100 	tsteq	fp, #0, 2
    2630:	03580000 	cmpeq	r8, #0
    2634:	00040000 	andeq	r0, r4, r0
    2638:	9f5101f3 	svcls	0x005101f3
	...
    2644:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2648:	000002d4 	ldrdeq	r0, [r0], -r4
    264c:	dc560001 	mrrcle	0, 0, r0, r6, cr1
    2650:	e0000002 	and	r0, r0, r2
    2654:	01000002 	tsteq	r0, r2
    2658:	02e85600 	rsceq	r5, r8, #0, 12
    265c:	02ec0000 	rsceq	r0, ip, #0
    2660:	00010000 	andeq	r0, r1, r0
    2664:	0002f456 	andeq	pc, r2, r6, asr r4	; <UNPREDICTABLE>
    2668:	0002f800 	andeq	pc, r2, r0, lsl #16
    266c:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2670:	00000300 	andeq	r0, r0, r0, lsl #6
    2674:	00000304 	andeq	r0, r0, r4, lsl #6
    2678:	0c560001 	mrrceq	0, 0, r0, r6, cr1
    267c:	10000003 	andne	r0, r0, r3
    2680:	01000003 	tsteq	r0, r3
    2684:	03145600 	tsteq	r4, #0, 12
    2688:	03580000 	cmpeq	r8, #0
    268c:	00010000 	andeq	r0, r1, r0
    2690:	00000056 	andeq	r0, r0, r6, asr r0
    2694:	00000000 	andeq	r0, r0, r0
    2698:	0002a400 	andeq	sl, r2, r0, lsl #8
    269c:	0002cc00 	andeq	ip, r2, r0, lsl #24
    26a0:	53000100 	movwpl	r0, #256	; 0x100
    26a4:	000002cc 	andeq	r0, r0, ip, asr #5
    26a8:	000002d4 	ldrdeq	r0, [r0], -r4
    26ac:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    26b0:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    26b4:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    26b8:	00cccccc 	sbceq	ip, ip, ip, asr #25
    26bc:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    26c0:	25f72008 	ldrbcs	r2, [r7, #8]!
    26c4:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    26c8:	02d49f25 	sbcseq	r9, r4, #37, 30	; 0x94
    26cc:	02d80000 	sbcseq	r0, r8, #0
    26d0:	00010000 	andeq	r0, r1, r0
    26d4:	0002d853 	andeq	sp, r2, r3, asr r8
    26d8:	0002e000 	andeq	lr, r2, r0
    26dc:	70001c00 	andvc	r1, r0, r0, lsl #24
    26e0:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    26e4:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    26e8:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    26ec:	00000000 	andeq	r0, r0, r0
    26f0:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    26f4:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    26f8:	e09f2533 	adds	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
    26fc:	e4000002 	str	r0, [r0], #-2
    2700:	01000002 	tsteq	r0, r2
    2704:	02e45300 	rsceq	r5, r4, #0, 6
    2708:	02ec0000 	rsceq	r0, ip, #0
    270c:	001c0000 	andseq	r0, ip, r0
    2710:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    2714:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    2718:	cccccd08 	stclgt	13, cr12, [ip], {8}
    271c:	000000cc 	andeq	r0, r0, ip, asr #1
    2720:	20081e00 	andcs	r1, r8, r0, lsl #28
    2724:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    2728:	9f25332c 	svcls	0x0025332c
    272c:	000002ec 	andeq	r0, r0, ip, ror #5
    2730:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2734:	f0530001 			; <UNDEFINED> instruction: 0xf0530001
    2738:	f8000002 			; <UNDEFINED> instruction: 0xf8000002
    273c:	1c000002 	stcne	0, cr0, [r0], {2}
    2740:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    2744:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    2748:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    274c:	0000cccc 	andeq	ip, r0, ip, asr #25
    2750:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    2754:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    2758:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    275c:	0002f89f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
    2760:	0002fc00 	andeq	pc, r2, r0, lsl #24
    2764:	53000100 	movwpl	r0, #256	; 0x100
    2768:	000002fc 	strdeq	r0, [r0], -ip
    276c:	00000304 	andeq	r0, r0, r4, lsl #6
    2770:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    2774:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    2778:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    277c:	00cccccc 	sbceq	ip, ip, ip, asr #25
    2780:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2784:	25f72008 	ldrbcs	r2, [r7, #8]!
    2788:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    278c:	03049f25 	movweq	r9, #20261	; 0x4f25
    2790:	03080000 	movweq	r0, #32768	; 0x8000
    2794:	00010000 	andeq	r0, r1, r0
    2798:	00030853 	andeq	r0, r3, r3, asr r8
    279c:	00031000 	andeq	r1, r3, r0
    27a0:	70001c00 	andvc	r1, r0, r0, lsl #24
    27a4:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    27a8:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    27ac:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    27b0:	00000000 	andeq	r0, r0, r0
    27b4:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    27b8:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    27bc:	109f2533 	addsne	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
    27c0:	14000003 	strne	r0, [r0], #-3
    27c4:	01000003 	tsteq	r0, r3
    27c8:	03145300 	tsteq	r4, #0, 6
    27cc:	03180000 	tsteq	r8, #0
    27d0:	001c0000 	andseq	r0, ip, r0
    27d4:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    27d8:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    27dc:	cccccd08 	stclgt	13, cr12, [ip], {8}
    27e0:	000000cc 	andeq	r0, r0, ip, asr #1
    27e4:	20081e00 	andcs	r1, r8, r0, lsl #28
    27e8:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    27ec:	9f25332c 	svcls	0x0025332c
    27f0:	00000318 	andeq	r0, r0, r8, lsl r3
    27f4:	00000320 	andeq	r0, r0, r0, lsr #6
    27f8:	0074001c 	rsbseq	r0, r4, ip, lsl r0
    27fc:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    2800:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    2804:	00cccccc 	sbceq	ip, ip, ip, asr #25
    2808:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    280c:	25f72008 	ldrbcs	r2, [r7, #8]!
    2810:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    2814:	03209f25 	teqeq	r0, #37, 30	; 0x94
    2818:	03240000 	teqeq	r4, #0
    281c:	00170000 	andseq	r0, r7, r0
    2820:	2cf70074 	ldclcs	0, cr0, [r7], #464	; 0x1d0
    2824:	007325f7 	ldrshteq	r2, [r3], #-87	; 0xffffffa9
    2828:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    282c:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    2830:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    2834:	249f2533 	ldrcs	r2, [pc], #1331	; 283c <_start-0x57c4>
    2838:	58000003 	stmdapl	r0, {r0, r1}
    283c:	1c000003 	stcne	0, cr0, [r0], {3}
    2840:	f7007400 			; <UNDEFINED> instruction: 0xf7007400
    2844:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    2848:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    284c:	0000cccc 	andeq	ip, r0, ip, asr #25
    2850:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    2854:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    2858:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    285c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2860:	00000000 	andeq	r0, r0, r0
    2864:	00031c00 	andeq	r1, r3, r0, lsl #24
    2868:	00034000 	andeq	r4, r3, r0
    286c:	50000100 	andpl	r0, r0, r0, lsl #2
    2870:	00000340 	andeq	r0, r0, r0, asr #6
    2874:	00000348 	andeq	r0, r0, r8, asr #6
    2878:	00750009 	rsbseq	r0, r5, r9
    287c:	71240073 	teqvc	r4, r3, ror r0
    2880:	489f2100 	ldmmi	pc, {r8, sp}	; <UNPREDICTABLE>
    2884:	4b000003 	blmi	2898 <_start-0x5768>
    2888:	01000003 	tsteq	r0, r3
    288c:	00005100 	andeq	r5, r0, r0, lsl #2
    2890:	00000000 	andeq	r0, r0, r0
    2894:	03580000 	cmpeq	r8, #0
    2898:	03640000 	cmneq	r4, #0
    289c:	00010000 	andeq	r0, r1, r0
    28a0:	00036450 	andeq	r6, r3, r0, asr r4
    28a4:	00038400 	andeq	r8, r3, r0, lsl #8
    28a8:	f3000400 	vshl.u8	d0, d0, d0
    28ac:	009f5001 	addseq	r5, pc, r1
    28b0:	00000000 	andeq	r0, r0, r0
    28b4:	84000000 	strhi	r0, [r0], #-0
    28b8:	97000003 	strls	r0, [r0, -r3]
    28bc:	01000003 	tsteq	r0, r3
    28c0:	03975000 	orrseq	r5, r7, #0
    28c4:	03d00000 	bicseq	r0, r0, #0
    28c8:	00010000 	andeq	r0, r1, r0
    28cc:	0003d054 	andeq	sp, r3, r4, asr r0
    28d0:	00040800 	andeq	r0, r4, r0, lsl #16
    28d4:	f3000400 	vshl.u8	d0, d0, d0
    28d8:	009f5001 	addseq	r5, pc, r1
    28dc:	00000000 	andeq	r0, r0, r0
    28e0:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    28e4:	f4000003 	vst4.8	{d0-d3}, [r0], r3
    28e8:	01000003 	tsteq	r0, r3
    28ec:	03f45000 	mvnseq	r5, #0
    28f0:	03fb0000 	mvnseq	r0, #0
    28f4:	00010000 	andeq	r0, r1, r0
    28f8:	00000051 	andeq	r0, r0, r1, asr r0
    28fc:	00000000 	andeq	r0, r0, r0
    2900:	0003ac00 	andeq	sl, r3, r0, lsl #24
    2904:	0003b400 	andeq	fp, r3, r0, lsl #8
    2908:	50000100 	andpl	r0, r0, r0, lsl #2
    290c:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
    2910:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    2914:	00510001 	subseq	r0, r1, r1
    2918:	00000000 	andeq	r0, r0, r0
    291c:	cc000000 	stcgt	0, cr0, [r0], {-0}
    2920:	d8000003 	stmdale	r0, {r0, r1}
    2924:	01000003 	tsteq	r0, r3
    2928:	03d85000 	bicseq	r5, r8, #0
    292c:	03df0000 	bicseq	r0, pc, #0
    2930:	00010000 	andeq	r0, r1, r0
    2934:	00000051 	andeq	r0, r0, r1, asr r0
    2938:	00000000 	andeq	r0, r0, r0
    293c:	00040800 	andeq	r0, r4, r0, lsl #16
    2940:	00041b00 	andeq	r1, r4, r0, lsl #22
    2944:	50000100 	andpl	r0, r0, r0, lsl #2
    2948:	0000041b 	andeq	r0, r0, fp, lsl r4
    294c:	00000454 	andeq	r0, r0, r4, asr r4
    2950:	54540001 	ldrbpl	r0, [r4], #-1
    2954:	8c000004 	stchi	0, cr0, [r0], {4}
    2958:	04000004 	streq	r0, [r0], #-4
    295c:	5001f300 	andpl	pc, r1, r0, lsl #6
    2960:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2964:	00000000 	andeq	r0, r0, r0
    2968:	00047400 	andeq	r7, r4, r0, lsl #8
    296c:	00047800 	andeq	r7, r4, r0, lsl #16
    2970:	50000100 	andpl	r0, r0, r0, lsl #2
    2974:	00000478 	andeq	r0, r0, r8, ror r4
    2978:	0000047f 	andeq	r0, r0, pc, ror r4
    297c:	00510001 	subseq	r0, r1, r1
    2980:	00000000 	andeq	r0, r0, r0
    2984:	30000000 	andcc	r0, r0, r0
    2988:	38000004 	stmdacc	r0, {r2}
    298c:	01000004 	tsteq	r0, r4
    2990:	04385000 	ldrteq	r5, [r8], #-0
    2994:	043f0000 	ldrteq	r0, [pc], #-0	; 299c <_start-0x5664>
    2998:	00010000 	andeq	r0, r1, r0
    299c:	00000051 	andeq	r0, r0, r1, asr r0
    29a0:	00000000 	andeq	r0, r0, r0
    29a4:	00045000 	andeq	r5, r4, r0
    29a8:	00045c00 	andeq	r5, r4, r0, lsl #24
    29ac:	50000100 	andpl	r0, r0, r0, lsl #2
    29b0:	0000045c 	andeq	r0, r0, ip, asr r4
    29b4:	00000463 	andeq	r0, r0, r3, ror #8
    29b8:	00510001 	subseq	r0, r1, r1
    29bc:	00000000 	andeq	r0, r0, r0
    29c0:	8c000000 	stchi	0, cr0, [r0], {-0}
    29c4:	9f000004 	svcls	0x00000004
    29c8:	01000004 	tsteq	r0, r4
    29cc:	049f5000 	ldreq	r5, [pc], #0	; 29d4 <_start-0x562c>
    29d0:	04e00000 	strbteq	r0, [r0], #0
    29d4:	00010000 	andeq	r0, r1, r0
    29d8:	0004e054 	andeq	lr, r4, r4, asr r0
    29dc:	00050400 	andeq	r0, r5, r0, lsl #8
    29e0:	f3000400 	vshl.u8	d0, d0, d0
    29e4:	049f5001 	ldreq	r5, [pc], #1	; 29ec <_start-0x5614>
    29e8:	08000005 	stmdaeq	r0, {r0, r2}
    29ec:	01000005 	tsteq	r0, r5
    29f0:	05085000 	streq	r5, [r8, #-0]
    29f4:	05100000 	ldreq	r0, [r0, #-0]
    29f8:	00010000 	andeq	r0, r1, r0
    29fc:	00000054 	andeq	r0, r0, r4, asr r0
    2a00:	00000000 	andeq	r0, r0, r0
    2a04:	0004b400 	andeq	fp, r4, r0, lsl #8
    2a08:	0004c300 	andeq	ip, r4, r0, lsl #6
    2a0c:	31000800 	tstcc	r0, r0, lsl #16
    2a10:	70240074 	eorvc	r0, r4, r4, ror r0
    2a14:	009f1a00 	addseq	r1, pc, r0, lsl #20
    2a18:	00000000 	andeq	r0, r0, r0
    2a1c:	e0000000 	and	r0, r0, r0
    2a20:	f8000004 			; <UNDEFINED> instruction: 0xf8000004
    2a24:	01000004 	tsteq	r0, r4
    2a28:	00005400 	andeq	r5, r0, r0, lsl #8
    2a2c:	00000000 	andeq	r0, r0, r0
    2a30:	05100000 	ldreq	r0, [r0, #-0]
    2a34:	05230000 	streq	r0, [r3, #-0]!
    2a38:	00010000 	andeq	r0, r1, r0
    2a3c:	00052350 	andeq	r2, r5, r0, asr r3
    2a40:	00054800 	andeq	r4, r5, r0, lsl #16
    2a44:	54000100 	strpl	r0, [r0], #-256	; 0x100
    2a48:	00000548 	andeq	r0, r0, r8, asr #10
    2a4c:	00000568 	andeq	r0, r0, r8, ror #10
    2a50:	01f30004 	mvnseq	r0, r4
    2a54:	00009f50 	andeq	r9, r0, r0, asr pc
    2a58:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	00008010 	andeq	r8, r0, r0, lsl r0
  14:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	047e0002 	ldrbteq	r0, [lr], #-2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	000081c0 	andeq	r8, r0, r0, asr #3
  34:	00000498 	muleq	r0, r8, r4
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	0e6d0002 	cdpeq	0, 6, cr0, cr13, cr2, {0}
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	000086c4 	andeq	r8, r0, r4, asr #13
  54:	00000538 	andeq	r0, r0, r8, lsr r5
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	183f0002 	ldmdane	pc!, {r1}	; <UNPREDICTABLE>
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	00008cbc 			; <UNDEFINED> instruction: 0x00008cbc
  74:	00000020 	andeq	r0, r0, r0, lsr #32
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	191e0002 	ldmdbne	lr, {r1}
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	00008cdc 	ldrdeq	r8, [r0], -ip
  94:	00000058 	andeq	r0, r0, r8, asr r0
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	1ab30002 	bne	fecc00b4 <__bss_end__+0xfecb4f44>
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	00008d34 	andeq	r8, r0, r4, lsr sp
  b4:	0000003c 	andeq	r0, r0, ip, lsr r0
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	1bca0002 	blne	ff2800d4 <__bss_end__+0xff274f64>
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	00008d70 	andeq	r8, r0, r0, ror sp
  d4:	00000034 	andeq	r0, r0, r4, lsr r0
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	1cbc0002 	ldcne	0, cr0, [ip], #8
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	00008da4 	andeq	r8, r0, r4, lsr #27
  f4:	000004f8 	strdeq	r0, [r0], -r8
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	23410002 	movtcs	r0, #4098	; 0x1002
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	0000929c 	muleq	r0, ip, r2
 114:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	24440002 	strbcs	r0, [r4], #-2
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	000092c4 	andeq	r9, r0, r4, asr #5
 134:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	27250002 	strcs	r0, [r5, -r2]!
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	00009374 	andeq	r9, r0, r4, ror r3
 154:	00000074 	andeq	r0, r0, r4, ror r0
	...
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	28d60002 	ldmcs	r6, {r1}^
 168:	00040000 	andeq	r0, r4, r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	000093e8 	andeq	r9, r0, r8, ror #7
 174:	00000088 	andeq	r0, r0, r8, lsl #1
	...
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	2ab20002 	bcs	fec80194 <__bss_end__+0xfec75024>
 188:	00040000 	andeq	r0, r4, r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	00009470 	andeq	r9, r0, r0, ror r4
 194:	000001e8 	andeq	r0, r0, r8, ror #3
	...
 1a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a4:	2ea40002 	cdpcs	0, 10, cr0, cr4, cr2, {0}
 1a8:	00040000 	andeq	r0, r4, r0
 1ac:	00000000 	andeq	r0, r0, r0
 1b0:	00009658 	andeq	r9, r0, r8, asr r6
 1b4:	00000620 	andeq	r0, r0, r0, lsr #12
	...
 1c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c4:	40720002 	rsbsmi	r0, r2, r2
 1c8:	00040000 	andeq	r0, r4, r0
 1cc:	00000000 	andeq	r0, r0, r0
 1d0:	00009c78 	andeq	r9, r0, r8, ror ip
 1d4:	00000154 	andeq	r0, r0, r4, asr r1
	...
 1e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e4:	44750002 	ldrbtmi	r0, [r5], #-2
 1e8:	00040000 	andeq	r0, r4, r0
 1ec:	00000000 	andeq	r0, r0, r0
 1f0:	00009e30 	andeq	r9, r0, r0, lsr lr
 1f4:	00000568 	andeq	r0, r0, r8, ror #10
	...
 200:	0000001c 	andeq	r0, r0, ip, lsl r0
 204:	4c9a0002 	ldcmi	0, cr0, [sl], {2}
 208:	00040000 	andeq	r0, r4, r0
 20c:	00000000 	andeq	r0, r0, r0
 210:	0000a398 	muleq	r0, r8, r3
 214:	00000050 	andeq	r0, r0, r0, asr r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	000000e0 	andeq	r0, r0, r0, ror #1
   4:	000000e8 	andeq	r0, r0, r8, ror #1
   8:	000000ec 	andeq	r0, r0, ip, ror #1
   c:	00000108 	andeq	r0, r0, r8, lsl #2
	...
  18:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
  1c:	000001fc 	strdeq	r0, [r0], -ip
  20:	00000200 	andeq	r0, r0, r0, lsl #4
  24:	00000204 	andeq	r0, r0, r4, lsl #4
	...
  30:	00000280 	andeq	r0, r0, r0, lsl #5
  34:	00000288 	andeq	r0, r0, r8, lsl #5
  38:	00000290 	muleq	r0, r0, r2
  3c:	00000298 	muleq	r0, r8, r2
	...
  48:	00000444 	andeq	r0, r0, r4, asr #8
  4c:	00000458 	andeq	r0, r0, r8, asr r4
  50:	0000045c 	andeq	r0, r0, ip, asr r4
  54:	0000049c 	muleq	r0, ip, r4
	...
  60:	00000294 	muleq	r0, r4, r2
  64:	00000298 	muleq	r0, r8, r2
  68:	000002c8 	andeq	r0, r0, r8, asr #5
  6c:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
	...
  78:	00009374 	andeq	r9, r0, r4, ror r3
  7c:	000093e8 	andeq	r9, r0, r8, ror #7
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000143 	andeq	r0, r0, r3, asr #2
       4:	00e40002 	rsceq	r0, r4, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	2f727375 	svccs	0x00727375
      20:	61636f6c 	cmnvs	r3, ip, ror #30
      24:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
      28:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
      2c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
      30:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
      34:	61652d65 	cmnvs	r5, r5, ror #26
      38:	342f6962 	strtcc	r6, [pc], #-2402	; 40 <_start-0x7fc0>
      3c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
      40:	3173632d 	cmncc	r3, sp, lsr #6
      44:	2f653037 	svccs	0x00653037
      48:	2f62696c 	svccs	0x0062696c
      4c:	2f636367 	svccs	0x00636367
      50:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
      54:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
      58:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
      5c:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
      60:	2f332e38 	svccs	0x00332e38
      64:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      68:	00656475 	rsbeq	r6, r5, r5, ror r4
      6c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
      70:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
      74:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
      78:	2f6e756a 	svccs	0x006e756a
      7c:	6b736544 	blvs	1cd9594 <__bss_end__+0x1cce424>
      80:	2f706f74 	svccs	0x00706f74
      84:	6f686373 	svcvs	0x00686373
      88:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
      8c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
      90:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
      94:	53432f30 	movtpl	r2, #16176	; 0x3f30
      98:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
      9c:	3173632f 	cmncc	r3, pc, lsr #6
      a0:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
      a4:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
      a8:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
      ac:	00697062 	rsbeq	r7, r9, r2, rrx
      b0:	742d3100 	strtvc	r3, [sp], #-256	; 0x100
      b4:	2d747365 	ldclcs	3, cr7, [r4, #-404]!	; 0xfffffe6c
      b8:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
      bc:	632e6461 	teqvs	lr, #1627389952	; 0x61000000
      c0:	00000000 	andeq	r0, r0, r0
      c4:	2d697072 	stclcs	0, cr7, [r9, #-456]!	; 0xfffffe38
      c8:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
      cc:	682e6461 	stmdavs	lr!, {r0, r5, r6, sl, sp, lr}
      d0:	00000000 	andeq	r0, r0, r0
      d4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
      d8:	672d746e 	strvs	r7, [sp, -lr, ror #8]!
      dc:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
      e0:	00000100 	andeq	r0, r0, r0, lsl #2
      e4:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
      e8:	00020068 	andeq	r0, r2, r8, rrx
      ec:	05000000 	streq	r0, [r0, #-0]
      f0:	00801002 	addeq	r1, r0, r2
      f4:	01120300 	tsteq	r2, r0, lsl #6
      f8:	00834b6a 	addeq	r4, r3, sl, ror #22
      fc:	06010402 	streq	r0, [r1], -r2, lsl #8
     100:	5c0806ba 	stcpl	6, cr0, [r8], {186}	; 0xba
     104:	832f832f 	teqhi	pc, #-1140850688	; 0xbc000000
     108:	2fd84b30 	svccs	0x00d84b30
     10c:	854e302f 	strbhi	r3, [lr, #-47]	; 0x2f
     110:	002b302f 	eoreq	r3, fp, pc, lsr #32
     114:	2f020402 	svccs	0x00020402
     118:	02040200 	andeq	r0, r4, #0, 4
     11c:	04020067 	streq	r0, [r2], #-103	; 0x67
     120:	02004b02 	andeq	r4, r0, #2048	; 0x800
     124:	00470204 	subeq	r0, r7, r4, lsl #4
     128:	06010402 	streq	r0, [r1], -r2, lsl #8
     12c:	314f062e 	cmpcc	pc, lr, lsr #12
     130:	0402009f 	streq	r0, [r2], #-159	; 0x9f
     134:	06660601 	strbteq	r0, [r6], -r1, lsl #12
     138:	040200d7 	streq	r0, [r2], #-215	; 0xd7
     13c:	06820601 	streq	r0, [r2], r1, lsl #12
     140:	14024bd7 	strne	r4, [r2], #-3031	; 0xbd7
     144:	97010100 	strls	r0, [r1, -r0, lsl #2]
     148:	02000001 	andeq	r0, r0, #1
     14c:	0000e800 	andeq	lr, r0, r0, lsl #16
     150:	fb010200 	blx	4095a <__bss_end__+0x357ea>
     154:	01000d0e 	tsteq	r0, lr, lsl #26
     158:	00010101 	andeq	r0, r1, r1, lsl #2
     15c:	00010000 	andeq	r0, r1, r0
     160:	752f0100 	strvc	r0, [pc, #-256]!	; 68 <_start-0x7f98>
     164:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; ffffffa0 <__bss_end__+0xffff4e30>
     168:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
     16c:	6c65432f 	stclvs	3, cr4, [r5], #-188	; 0xffffff44
     170:	2f72616c 	svccs	0x0072616c
     174:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     178:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     17c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     180:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
     184:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
     188:	37317363 	ldrcc	r7, [r1, -r3, ror #6]!
     18c:	6c2f6530 	cfstr32vs	mvfx6, [pc], #-192	; d4 <_start-0x7f2c>
     190:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
     194:	612f6363 	teqvs	pc, r3, ror #6
     198:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     19c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     1a0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     1a4:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
     1a8:	692f332e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, r9, ip, sp}	; <UNPREDICTABLE>
     1ac:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     1b0:	2f006564 	svccs	0x00006564
     1b4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     1b8:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
     1bc:	6a6e6169 	bvs	1b98768 <__bss_end__+0x1b8d5f8>
     1c0:	442f6e75 	strtmi	r6, [pc], #-3701	; 1c8 <_start-0x7e38>
     1c4:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
     1c8:	732f706f 	teqvc	pc, #111	; 0x6f
     1cc:	6f6f6863 	svcvs	0x006f6863
     1d0:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     1d4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     1d8:	30323931 	eorscc	r3, r2, r1, lsr r9
     1dc:	3153432f 	cmpcc	r3, pc, lsr #6
     1e0:	2f453034 	svccs	0x00453034
     1e4:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
     1e8:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
     1ec:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
     1f0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     1f4:	00006970 	andeq	r6, r0, r0, ror r9
     1f8:	00682e51 	rsbeq	r2, r8, r1, asr lr
     1fc:	72000000 	andvc	r0, r0, #0
     200:	742d6970 	strtvc	r6, [sp], #-2416	; 0x970
     204:	61657268 	cmnvs	r5, r8, ror #4
     208:	00632e64 	rsbeq	r2, r3, r4, ror #28
     20c:	72000000 	andvc	r0, r0, #0
     210:	742d6970 	strtvc	r6, [sp], #-2416	; 0x970
     214:	61657268 	cmnvs	r5, r8, ror #4
     218:	00682e64 	rsbeq	r2, r8, r4, ror #28
     21c:	73000000 	movwvc	r0, #0
     220:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     224:	63672d74 	cmnvs	r7, #116, 26	; 0x1d00
     228:	00682e63 	rsbeq	r2, r8, r3, ror #28
     22c:	72000001 	andvc	r0, r0, #1
     230:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
     234:	00000200 	andeq	r0, r0, r0, lsl #4
     238:	02050000 	andeq	r0, r5, #0
     23c:	000081c0 	andeq	r8, r0, r0, asr #3
     240:	01010f03 	tsteq	r1, r3, lsl #30
     244:	134a1b03 	movtne	r1, #43779	; 0xab03
     248:	6867674b 	stmdavs	r7!, {r0, r1, r3, r6, r8, r9, sl, sp, lr}^
     24c:	67134f2f 	ldrvs	r4, [r3, -pc, lsr #30]
     250:	044b2f4b 	strbeq	r2, [fp], #-3915	; 0xf4b
     254:	4a6d0302 	bmi	1b40e64 <__bss_end__+0x1b35cf4>
     258:	0301044c 	movweq	r0, #5196	; 0x144c
     25c:	684b8267 	stmdavs	fp, {r0, r1, r2, r5, r6, r9, pc}^
     260:	01040200 	mrseq	r0, R12_usr
     264:	d7066606 	strle	r6, [r6, -r6, lsl #12]
     268:	01040200 	mrseq	r0, R12_usr
     26c:	d4066606 	strle	r6, [r6], #-1542	; 0x606
     270:	2fa12f4d 	svccs	0x00a12f4d
     274:	01040200 	mrseq	r0, R12_usr
     278:	d8064a06 	stmdale	r6, {r1, r2, r9, fp, lr}
     27c:	02004b2f 	andeq	r4, r0, #48128	; 0xbc00
     280:	66060104 	strvs	r0, [r6], -r4, lsl #2
     284:	4b67d906 	blmi	19f66a4 <__bss_end__+0x19eb534>
     288:	7a032f2f 	bvc	cbf4c <__bss_end__+0xc0ddc>
     28c:	0204354a 	andeq	r3, r4, #310378496	; 0x12800000
     290:	2f9e7403 	svccs	0x009e7403
     294:	84674b4d 	strbthi	r4, [r7], #-2893	; 0xb4d
     298:	01040200 	mrseq	r0, R12_usr
     29c:	d7064a06 	strle	r4, [r6, -r6, lsl #20]
     2a0:	d66e03a0 	strbtle	r0, [lr], -r0, lsr #7
     2a4:	821c0314 	andshi	r0, ip, #20, 6	; 0x50000000
     2a8:	302f5167 	eorcc	r5, pc, r7, ror #2
     2ac:	8568684b 	strbhi	r6, [r8, #-2123]!	; 0x84b
     2b0:	4b2e0a03 	blmi	b82ac4 <__bss_end__+0xb77954>
     2b4:	6884834c 	stmvs	r4, {r2, r3, r6, r8, r9, pc}
     2b8:	4b8535bf 	blmi	fe14d9bc <__bss_end__+0xfe14284c>
     2bc:	23038383 	movwcs	r8, #13187	; 0x3383
     2c0:	67834d9e 			; <UNDEFINED> instruction: 0x67834d9e
     2c4:	7a086730 	bvc	219f8c <__bss_end__+0x20ee1c>
     2c8:	54034b86 	strpl	r4, [r3], #-2950	; 0xb86
     2cc:	358435f2 	strcc	r3, [r4, #1522]	; 0x5f2
     2d0:	034c8367 	movteq	r8, #50023	; 0xc367
     2d4:	082fba1b 	stmdaeq	pc!, {r0, r1, r3, r4, r9, fp, ip, sp, pc}	; <UNPREDICTABLE>
     2d8:	42082f44 	andmi	r2, r8, #68, 30	; 0x110
     2dc:	0014022f 	andseq	r0, r4, pc, lsr #4
     2e0:	02700101 	rsbseq	r0, r0, #1073741824	; 0x40000000
     2e4:	00020000 	andeq	r0, r2, r0
     2e8:	00000128 	andeq	r0, r0, r8, lsr #2
     2ec:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     2f0:	0101000d 	tsteq	r1, sp
     2f4:	00000101 	andeq	r0, r0, r1, lsl #2
     2f8:	00000100 	andeq	r0, r0, r0, lsl #2
     2fc:	73752f01 	cmnvc	r5, #1, 30
     300:	6f6c2f72 	svcvs	0x006c2f72
     304:	2f6c6163 	svccs	0x006c6163
     308:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
     30c:	612f7261 	teqvs	pc, r1, ror #4
     310:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     314:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     318:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     31c:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
     320:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
     324:	30373173 	eorscc	r3, r7, r3, ror r1
     328:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     32c:	63672f62 	cmnvs	r7, #392	; 0x188
     330:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
     334:	6f6e2d6d 	svcvs	0x006e2d6d
     338:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     33c:	2f696261 	svccs	0x00696261
     340:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
     344:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
     348:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     34c:	552f0065 	strpl	r0, [pc, #-101]!	; 2ef <_start-0x7d11>
     350:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     354:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
     358:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
     35c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
     360:	6f746b73 	svcvs	0x00746b73
     364:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
     368:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 1d0 <_start-0x7e30>
     36c:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
     370:	31726574 	cmncc	r2, r4, ror r5
     374:	2f303239 	svccs	0x00303239
     378:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
     37c:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
     380:	30343173 	eorscc	r3, r4, r3, ror r1
     384:	30322d65 	eorscc	r2, r2, r5, ror #26
     388:	2f6e6977 	svccs	0x006e6977
     38c:	7062696c 	rsbvc	r6, r2, ip, ror #18
     390:	752f0069 	strvc	r0, [pc, #-105]!	; 32f <_start-0x7cd1>
     394:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 1d0 <_start-0x7e30>
     398:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
     39c:	6c65432f 	stclvs	3, cr4, [r5], #-188	; 0xffffff44
     3a0:	2f72616c 	svccs	0x0072616c
     3a4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     3a8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     3ac:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     3b0:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
     3b4:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
     3b8:	37317363 	ldrcc	r7, [r1, -r3, ror #6]!
     3bc:	612f6530 	teqvs	pc, r0, lsr r5	; <UNPREDICTABLE>
     3c0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     3c4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     3c8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     3cc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     3d0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     3d4:	69630000 	stmdbvs	r3!, {}^	; <UNPREDICTABLE>
     3d8:	6c756372 	ldclvs	3, cr6, [r5], #-456	; 0xfffffe38
     3dc:	632e7261 	teqvs	lr, #268435462	; 0x10000006
     3e0:	00000000 	andeq	r0, r0, r0
     3e4:	63726963 	cmnvs	r2, #1622016	; 0x18c000
     3e8:	72616c75 	rsbvc	r6, r1, #29952	; 0x7500
     3ec:	0000682e 	andeq	r6, r0, lr, lsr #16
     3f0:	74730000 	ldrbtvc	r0, [r3], #-0
     3f4:	66656464 	strbtvs	r6, [r5], -r4, ror #8
     3f8:	0100682e 	tsteq	r0, lr, lsr #16
     3fc:	70720000 	rsbsvc	r0, r2, r0
     400:	00682e69 	rsbeq	r2, r8, r9, ror #28
     404:	73000002 	movwvc	r0, #2
     408:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     40c:	00682e67 	rsbeq	r2, r8, r7, ror #28
     410:	00000003 	andeq	r0, r0, r3
     414:	c4020500 	strgt	r0, [r2], #-1280	; 0x500
     418:	19000086 	stmdbne	r0, {r1, r2, r7}
     41c:	0302044b 	movweq	r0, #9291	; 0x244b
     420:	998200cd 	stmibls	r2, {r0, r2, r3, r6, r7}
     424:	b8030104 	stmdalt	r3, {r2, r8}
     428:	22089e7f 	andcs	r9, r8, #2032	; 0x7f0
     42c:	089f2fd8 	ldmeq	pc, {r3, r4, r6, r7, r8, r9, sl, fp, sp}	; <UNPREDICTABLE>
     430:	6767675b 			; <UNDEFINED> instruction: 0x6767675b
     434:	02044b9f 	andeq	r4, r4, #162816	; 0x27c00
     438:	04ba3a03 	ldrteq	r3, [sl], #2563	; 0xa03
     43c:	4a470301 	bmi	11c1048 <__bss_end__+0x11b5ed8>
     440:	01040200 	mrseq	r0, R12_usr
     444:	02044a06 	andeq	r4, r4, #24576	; 0x6000
     448:	d63c0306 	ldrtle	r0, [ip], -r6, lsl #6
     44c:	45030104 	strmi	r0, [r3, #-260]	; 0x104
     450:	040200ba 	streq	r0, [r2], #-186	; 0xba
     454:	044a0601 	strbeq	r0, [sl], #-1537	; 0x601
     458:	3d030602 	stccc	6, cr0, [r3, #-8]
     45c:	030104d6 	movweq	r0, #5334	; 0x14d6
     460:	02009e44 	andeq	r9, r0, #68, 28	; 0x440
     464:	4a060104 	bmi	18087c <__bss_end__+0x17570c>
     468:	03060204 	movweq	r0, #25092	; 0x6204
     46c:	0a03d637 	beq	f5d50 <__bss_end__+0xeabe0>
     470:	4b4b4c82 	blmi	12d3680 <__bss_end__+0x12c8510>
     474:	03010483 	movweq	r0, #5251	; 0x1483
     478:	044a7fbb 	strbeq	r7, [sl], #-4027	; 0xfbb
     47c:	00c10302 	sbceq	r0, r1, r2, lsl #6
     480:	0301042e 	movweq	r0, #5166	; 0x142e
     484:	02002e40 	andeq	r2, r0, #64, 28	; 0x400
     488:	4a060104 	bmi	1808a0 <__bss_end__+0x175730>
     48c:	04020066 	streq	r0, [r2], #-102	; 0x66
     490:	02006604 	andeq	r6, r0, #4, 12	; 0x400000
     494:	064a0104 	strbeq	r0, [sl], -r4, lsl #2
     498:	26021903 	strcs	r1, [r2], -r3, lsl #18
     49c:	03020401 	movweq	r0, #9217	; 0x2401
     4a0:	0b034a1c 	bleq	d2d18 <__bss_end__+0xc7ba8>
     4a4:	0200324a 	andeq	r3, r0, #-1610612732	; 0xa0000004
     4a8:	71030104 	tstvc	r3, r4, lsl #2
     4ac:	0402002e 	streq	r0, [r2], #-46	; 0x2e
     4b0:	4a0a0301 	bmi	2810bc <__bss_end__+0x275f4c>
     4b4:	834b2f4c 	movthi	r2, #48972	; 0xbf4c
     4b8:	03010446 	movweq	r0, #5190	; 0x1446
     4bc:	a04e2e5e 	subge	r2, lr, lr, asr lr
     4c0:	04020085 	streq	r0, [r2], #-133	; 0x85
     4c4:	02004b02 	andeq	r4, r0, #2048	; 0x800
     4c8:	00650204 	rsbeq	r0, r5, r4, lsl #4
     4cc:	06010402 	streq	r0, [r1], -r2, lsl #8
     4d0:	034c062e 	movteq	r0, #50734	; 0xc62e
     4d4:	04832e5a 	streq	r2, [r3], #3674	; 0xe5a
     4d8:	2e360302 	cdpcs	3, 3, cr0, cr6, cr2, {0}
     4dc:	4b030104 	blmi	c08f4 <__bss_end__+0xb5784>
     4e0:	48834cba 	stmmi	r3, {r1, r3, r4, r5, r7, sl, fp, lr}
     4e4:	02044d31 	andeq	r4, r4, #3136	; 0xc40
     4e8:	044a2e03 	strbeq	r2, [sl], #-3587	; 0xe03
     4ec:	d6540301 	ldrble	r0, [r4], -r1, lsl #6
     4f0:	04684b4c 	strbteq	r4, [r8], #-2892	; 0xb4c
     4f4:	4a270302 	bmi	9c1104 <__bss_end__+0x9b5f94>
     4f8:	5a030104 	bpl	c0910 <__bss_end__+0xb57a0>
     4fc:	0402009e 	streq	r0, [r2], #-158	; 0x9e
     500:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
     504:	032f50d1 	teqeq	pc, #209	; 0xd1
     508:	0204ba15 	andeq	fp, r4, #86016	; 0x15000
     50c:	d72e0f03 	strle	r0, [lr, -r3, lsl #30]!
     510:	73030104 	movwvc	r0, #12548	; 0x3104
     514:	0302042e 	movweq	r0, #9262	; 0x242e
     518:	302f661b 	eorcc	r6, pc, fp, lsl r6	; <UNPREDICTABLE>
     51c:	03010431 	movweq	r0, #5169	; 0x1431
     520:	02044a62 	andeq	r4, r4, #401408	; 0x62000
     524:	2f2e1803 	svccs	0x002e1803
     528:	032e6e03 	teqeq	lr, #3, 28	; 0x30
     52c:	2f4c8213 	svccs	0x004c8213
     530:	01044783 	smlabbeq	r4, r3, r7, r4
     534:	4b2e6503 	blmi	b99948 <__bss_end__+0xb8e7d8>
     538:	040200d4 	streq	r0, [r2], #-212	; 0xd4
     53c:	062e0601 	strteq	r0, [lr], -r1, lsl #12
     540:	4c02044d 	cfstrsmi	mvf0, [r2], {77}	; 0x4d
     544:	00810104 	addeq	r0, r1, r4, lsl #2
     548:	06010402 	streq	r0, [r1], -r2, lsl #8
     54c:	50d1064a 	sbcspl	r0, r1, sl, asr #12
     550:	000e0267 	andeq	r0, lr, r7, ror #4
     554:	00ec0101 	rsceq	r0, ip, r1, lsl #2
     558:	00020000 	andeq	r0, r2, r0
     55c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     560:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     564:	0101000d 	tsteq	r1, sp
     568:	00000101 	andeq	r0, r0, r1, lsl #2
     56c:	00000100 	andeq	r0, r0, r0, lsl #2
     570:	62696c01 	rsbvs	r6, r9, #256	; 0x100
     574:	752f0063 	strvc	r0, [pc, #-99]!	; 519 <_start-0x7ae7>
     578:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 3b4 <_start-0x7c4c>
     57c:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
     580:	6c65432f 	stclvs	3, cr4, [r5], #-188	; 0xffffff44
     584:	2f72616c 	svccs	0x0072616c
     588:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     58c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     590:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     594:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
     598:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
     59c:	37317363 	ldrcc	r7, [r1, -r3, ror #6]!
     5a0:	6c2f6530 	cfstr32vs	mvfx6, [pc], #-192	; 4e8 <_start-0x7b18>
     5a4:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
     5a8:	612f6363 	teqvs	pc, r3, ror #6
     5ac:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     5b0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     5b4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     5b8:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
     5bc:	692f332e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, r9, ip, sp}	; <UNPREDICTABLE>
     5c0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     5c4:	2f006564 	svccs	0x00006564
     5c8:	2f727375 	svccs	0x00727375
     5cc:	61636f6c 	cmnvs	r3, ip, ror #30
     5d0:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
     5d4:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
     5d8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     5dc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     5e0:	61652d65 	cmnvs	r5, r5, ror #26
     5e4:	342f6962 	strtcc	r6, [pc], #-2402	; 5ec <_start-0x7a14>
     5e8:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
     5ec:	3173632d 	cmncc	r3, sp, lsr #6
     5f0:	2f653037 	svccs	0x00653037
     5f4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     5f8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     5fc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     600:	6e692f69 	cdpvs	15, 6, cr2, cr9, cr9, {3}
     604:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     608:	6d000065 	stcvs	0, cr0, [r0, #-404]	; 0xfffffe6c
     60c:	65736d65 	ldrbvs	r6, [r3, #-3429]!	; 0xd65
     610:	00632e74 	rsbeq	r2, r3, r4, ror lr
     614:	73000001 	movwvc	r0, #1
     618:	65646474 	strbvs	r6, [r4, #-1140]!	; 0x474
     61c:	00682e66 	rsbeq	r2, r8, r6, ror #28
     620:	73000002 	movwvc	r0, #2
     624:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     628:	00682e67 	rsbeq	r2, r8, r7, ror #28
     62c:	00000003 	andeq	r0, r0, r3
     630:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
     634:	1400008c 	strne	r0, [r0], #-140	; 0x8c
     638:	002f4c13 	eoreq	r4, pc, r3, lsl ip	; <UNPREDICTABLE>
     63c:	49010402 	stmdbmi	r1, {r1, sl}
     640:	0002024d 	andeq	r0, r2, sp, asr #4
     644:	01020101 	tsteq	r2, r1, lsl #2
     648:	00020000 	andeq	r0, r2, r0
     64c:	000000eb 	andeq	r0, r0, fp, ror #1
     650:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     654:	0101000d 	tsteq	r1, sp
     658:	00000101 	andeq	r0, r0, r1, lsl #2
     65c:	00000100 	andeq	r0, r0, r0, lsl #2
     660:	62696c01 	rsbvs	r6, r9, #256	; 0x100
     664:	752f0063 	strvc	r0, [pc, #-99]!	; 609 <_start-0x79f7>
     668:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 4a4 <_start-0x7b5c>
     66c:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
     670:	6c65432f 	stclvs	3, cr4, [r5], #-188	; 0xffffff44
     674:	2f72616c 	svccs	0x0072616c
     678:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     67c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     680:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     684:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
     688:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
     68c:	37317363 	ldrcc	r7, [r1, -r3, ror #6]!
     690:	6c2f6530 	cfstr32vs	mvfx6, [pc], #-192	; 5d8 <_start-0x7a28>
     694:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
     698:	612f6363 	teqvs	pc, r3, ror #6
     69c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     6a0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     6a4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     6a8:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
     6ac:	692f332e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, r9, ip, sp}	; <UNPREDICTABLE>
     6b0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     6b4:	2f006564 	svccs	0x00006564
     6b8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     6bc:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
     6c0:	6a6e6169 	bvs	1b98c6c <__bss_end__+0x1b8dafc>
     6c4:	442f6e75 	strtmi	r6, [pc], #-3701	; 6cc <_start-0x7934>
     6c8:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
     6cc:	732f706f 	teqvc	pc, #111	; 0x6f
     6d0:	6f6f6863 	svcvs	0x006f6863
     6d4:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     6d8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     6dc:	30323931 	eorscc	r3, r2, r1, lsr r9
     6e0:	3153432f 	cmpcc	r3, pc, lsr #6
     6e4:	2f453034 	svccs	0x00453034
     6e8:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
     6ec:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
     6f0:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
     6f4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     6f8:	00006970 	andeq	r6, r0, r0, ror r9
     6fc:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
     700:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
     704:	00000100 	andeq	r0, r0, r0, lsl #2
     708:	61647473 	smcvs	18243	; 0x4743
     70c:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
     710:	00000200 	andeq	r0, r0, r0, lsl #4
     714:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
     718:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
     71c:	00003e6e 	andeq	r3, r0, lr, ror #28
     720:	70720000 	rsbsvc	r0, r2, r0
     724:	00682e69 	rsbeq	r2, r8, r9, ror #28
     728:	76000003 	strvc	r0, [r0], -r3
     72c:	72702d61 	rsbsvc	r2, r0, #6208	; 0x1840
     730:	6b746e69 	blvs	1d1c0dc <__bss_end__+0x1d10f6c>
     734:	0100682e 	tsteq	r0, lr, lsr #16
     738:	00000000 	andeq	r0, r0, r0
     73c:	8cdc0205 	lfmhi	f0, 2, [ip], {5}
     740:	6b170000 	blvs	5c0748 <__bss_end__+0x5b55d8>
     744:	0289bf4b 	addeq	fp, r9, #300	; 0x12c
     748:	0101000e 	tsteq	r1, lr
     74c:	0000008a 	andeq	r0, r0, sl, lsl #1
     750:	00720002 	rsbseq	r0, r2, r2
     754:	01020000 	mrseq	r0, (UNDEF: 2)
     758:	000d0efb 	strdeq	r0, [sp], -fp
     75c:	01010101 	tsteq	r1, r1, lsl #2
     760:	01000000 	mrseq	r0, (UNDEF: 0)
     764:	6c010000 	stcvs	0, cr0, [r1], {-0}
     768:	00636269 	rsbeq	r6, r3, r9, ror #4
     76c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
     770:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
     774:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
     778:	2f6e756a 	svccs	0x006e756a
     77c:	6b736544 	blvs	1cd9c94 <__bss_end__+0x1cceb24>
     780:	2f706f74 	svccs	0x00706f74
     784:	6f686373 	svcvs	0x00686373
     788:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
     78c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
     790:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
     794:	53432f30 	movtpl	r2, #16176	; 0x3f30
     798:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
     79c:	3173632f 	cmncc	r3, pc, lsr #6
     7a0:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
     7a4:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
     7a8:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     7ac:	00697062 	rsbeq	r7, r9, r2, rrx
     7b0:	74757000 	ldrbtvc	r7, [r5], #-0
     7b4:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
     7b8:	0100632e 	tsteq	r0, lr, lsr #6
     7bc:	70720000 	rsbsvc	r0, r2, r0
     7c0:	00682e69 	rsbeq	r2, r8, r9, ror #28
     7c4:	00000002 	andeq	r0, r0, r2
     7c8:	34020500 	strcc	r0, [r2], #-1280	; 0x500
     7cc:	1400008d 	strne	r0, [r0], #-141	; 0x8d
     7d0:	bc136b4a 	ldclt	11, cr6, [r3], {74}	; 0x4a
     7d4:	00080213 	andeq	r0, r8, r3, lsl r2
     7d8:	00960101 	addseq	r0, r6, r1, lsl #2
     7dc:	00020000 	andeq	r0, r2, r0
     7e0:	0000006f 	andeq	r0, r0, pc, rrx
     7e4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     7e8:	0101000d 	tsteq	r1, sp
     7ec:	00000101 	andeq	r0, r0, r1, lsl #2
     7f0:	00000100 	andeq	r0, r0, r0, lsl #2
     7f4:	62696c01 	rsbvs	r6, r9, #256	; 0x100
     7f8:	552f0063 	strpl	r0, [pc, #-99]!	; 79d <_start-0x7863>
     7fc:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     800:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
     804:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
     808:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
     80c:	6f746b73 	svcvs	0x00746b73
     810:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
     814:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 67c <_start-0x7984>
     818:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
     81c:	31726574 	cmncc	r2, r4, ror r5
     820:	2f303239 	svccs	0x00303239
     824:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
     828:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
     82c:	30343173 	eorscc	r3, r4, r3, ror r1
     830:	30322d65 	eorscc	r2, r2, r5, ror #26
     834:	2f6e6977 	svccs	0x006e6977
     838:	7062696c 	rsbvc	r6, r2, ip, ror #18
     83c:	70000069 	andvc	r0, r0, r9, rrx
     840:	2e6b7475 	mcrcs	4, 3, r7, cr11, cr5, {3}
     844:	00010063 	andeq	r0, r1, r3, rrx
     848:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
     84c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     850:	00000000 	andeq	r0, r0, r0
     854:	8d700205 	lfmhi	f0, 2, [r0, #-20]!	; 0xffffffec
     858:	4c150000 	ldcmi	0, cr0, [r5], {-0}
     85c:	0402002d 	streq	r0, [r2], #-45	; 0x2d
     860:	02002f02 	andeq	r2, r0, #2, 30
     864:	00490204 	subeq	r0, r9, r4, lsl #4
     868:	06010402 	streq	r0, [r1], -r2, lsl #8
     86c:	026b062e 	rsbeq	r0, fp, #48234496	; 0x2e00000
     870:	01010006 	tsteq	r1, r6
     874:	000001de 	ldrdeq	r0, [r0], -lr
     878:	00df0002 	sbcseq	r0, pc, r2
     87c:	01020000 	mrseq	r0, (UNDEF: 2)
     880:	000d0efb 	strdeq	r0, [sp], -fp
     884:	01010101 	tsteq	r1, r1, lsl #2
     888:	01000000 	mrseq	r0, (UNDEF: 0)
     88c:	6c010000 	stcvs	0, cr0, [r1], {-0}
     890:	00636269 	rsbeq	r6, r3, r9, ror #4
     894:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     898:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
     89c:	432f6c61 	teqmi	pc, #24832	; 0x6100
     8a0:	616c6c65 	cmnvs	ip, r5, ror #24
     8a4:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
     8a8:	6f6e2d6d 	svcvs	0x006e2d6d
     8ac:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     8b0:	2f696261 	svccs	0x00696261
     8b4:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
     8b8:	73632d33 	cmnvc	r3, #3264	; 0xcc0
     8bc:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
     8c0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     8c4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     8c8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     8cc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     8d0:	61652d65 	cmnvs	r5, r5, ror #26
     8d4:	342f6962 	strtcc	r6, [pc], #-2402	; 8dc <_start-0x7724>
     8d8:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
     8dc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     8e0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     8e4:	73552f00 	cmpvc	r5, #0, 30
     8e8:	2f737265 	svccs	0x00737265
     8ec:	61697262 	cmnvs	r9, r2, ror #4
     8f0:	6e756a6e 	vsubvs.f32	s13, s10, s29
     8f4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     8f8:	706f746b 	rsbvc	r7, pc, fp, ror #8
     8fc:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
     900:	2f6c6f6f 	svccs	0x006c6f6f
     904:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
     908:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
     90c:	432f3032 	teqmi	pc, #50	; 0x32
     910:	30343153 	eorscc	r3, r4, r3, asr r1
     914:	73632f45 	cmnvc	r3, #276	; 0x114
     918:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
     91c:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
     920:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 784 <_start-0x787c>
     924:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
     928:	61760000 	cmnvs	r6, r0
     92c:	6972702d 	ldmdbvs	r2!, {r0, r2, r3, r5, ip, sp, lr}^
     930:	2e6b746e 	cdpcs	4, 6, cr7, cr11, cr14, {3}
     934:	00010063 	andeq	r0, r1, r3, rrx
     938:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
     93c:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
     940:	00020068 	andeq	r0, r2, r8, rrx
     944:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
     948:	0300682e 	movweq	r6, #2094	; 0x82e
     94c:	623c0000 	eorsvs	r0, ip, #0
     950:	746c6975 	strbtvc	r6, [ip], #-2421	; 0x975
     954:	3e6e692d 	cdpcc	9, 6, cr6, cr14, cr13, {1}
     958:	00000000 	andeq	r0, r0, r0
     95c:	02050000 	andeq	r0, r5, #0
     960:	00008da4 	andeq	r8, r0, r4, lsr #27
     964:	01012603 	tsteq	r1, r3, lsl #12
     968:	2d3113a5 	ldccs	3, cr1, [r1, #-660]!	; 0xfffffd6c
     96c:	02040200 	andeq	r0, r4, #0, 4
     970:	0402002f 	streq	r0, [r2], #-47	; 0x2f
     974:	02002d02 	andeq	r2, r0, #2, 26	; 0x80
     978:	002f0204 	eoreq	r0, pc, r4, lsl #4
     97c:	2d010402 	cfstrscs	mvf0, [r1, #-8]
     980:	14304c4c 	ldrtne	r4, [r0], #-3148	; 0xc4c
     984:	004f2f4b 	subeq	r2, pc, fp, asr #30
     988:	67020402 	strvs	r0, [r2, -r2, lsl #8]
     98c:	01040200 	mrseq	r0, R12_usr
     990:	304d4c65 	subcc	r4, sp, r5, ror #24
     994:	30312fa0 	eorscc	r2, r1, r0, lsr #31
     998:	84162602 	ldrhi	r2, [r6], #-1538	; 0x602
     99c:	02002c2d 	andeq	r2, r0, #11520	; 0x2d00
     9a0:	00300104 	eorseq	r0, r0, r4, lsl #2
     9a4:	33010402 	movwcc	r0, #5122	; 0x1402
     9a8:	02006606 	andeq	r6, r0, #6291456	; 0x600000
     9ac:	002e0104 	eoreq	r0, lr, r4, lsl #2
     9b0:	06010402 	streq	r0, [r1], -r2, lsl #8
     9b4:	2f672108 	svccs	0x00672108
     9b8:	03827303 	orreq	r7, r2, #201326592	; 0xc000000
     9bc:	02002e13 	andeq	r2, r0, #304	; 0x130
     9c0:	2e060104 	adfcss	f0, f6, f4
     9c4:	01040200 	mrseq	r0, R12_usr
     9c8:	4b6a9f06 	blmi	1aa85e8 <__bss_end__+0x1a9d478>
     9cc:	032e6703 	teqeq	lr, #786432	; 0xc0000
     9d0:	02002e21 	andeq	r2, r0, #528	; 0x210
     9d4:	2e060104 	adfcss	f0, f6, f4
     9d8:	01040200 	mrseq	r0, R12_usr
     9dc:	02009f06 	andeq	r9, r0, #6, 30
     9e0:	d96a0104 	stmdble	sl!, {r2, r8}^
     9e4:	7fa603f3 	svcvc	0x00a603f3
     9e8:	002f2008 	eoreq	r2, pc, r8
     9ec:	06010402 	streq	r0, [r1], -r2, lsl #8
     9f0:	4bd7064a 	blmi	ff5c2320 <__bss_end__+0xff5b71b0>
     9f4:	00da032f 	sbcseq	r0, sl, pc, lsr #6
     9f8:	484c83f2 	stmdami	ip, {r1, r4, r5, r6, r7, r8, r9, pc}^
     9fc:	032e0e03 	teqeq	lr, #3, 28	; 0x30
     a00:	2f2f2e75 	svccs	0x002f2e75
     a04:	2d2f4b84 	vstmdbcs	pc!, {d4-d5}
     a08:	2f30314d 	svccs	0x0030314d
     a0c:	04020083 	streq	r0, [r2], #-131	; 0x83
     a10:	00a22c01 	adceq	r2, r2, r1, lsl #24
     a14:	06010402 	streq	r0, [r1], -r2, lsl #8
     a18:	02d8064a 	sbcseq	r0, r8, #77594624	; 0x4a00000
     a1c:	0e031636 	mcreq	6, 0, r1, cr3, cr6, {1}
     a20:	302108d6 	ldrdcc	r0, [r1], -r6	; <UNPREDICTABLE>
     a24:	30f331f3 	ldrshtcc	r3, [r3], #19
     a28:	304b30f3 	strdcc	r3, [fp], #-3
     a2c:	230830f3 	movwcs	r3, #33011	; 0x80f3
     a30:	02002f31 	andeq	r2, r0, #49, 30	; 0xc4
     a34:	00650104 	rsbeq	r0, r5, r4, lsl #2
     a38:	06020402 	streq	r0, [r2], -r2, lsl #8
     a3c:	0402004a 	streq	r0, [r2], #-74	; 0x4a
     a40:	42030601 	andmi	r0, r3, #1048576	; 0x100000
     a44:	04020066 	streq	r0, [r2], #-102	; 0x66
     a48:	06660602 	strbteq	r0, [r6], -r2, lsl #12
     a4c:	4a00c203 	bmi	31260 <__bss_end__+0x260f0>
     a50:	00100268 	andseq	r0, r0, r8, ror #4
     a54:	00930101 	addseq	r0, r3, r1, lsl #2
     a58:	00020000 	andeq	r0, r2, r0
     a5c:	0000007d 	andeq	r0, r0, sp, ror r0
     a60:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     a64:	0101000d 	tsteq	r1, sp
     a68:	00000101 	andeq	r0, r0, r1, lsl #2
     a6c:	00000100 	andeq	r0, r0, r0, lsl #2
     a70:	31736301 	cmncc	r3, r1, lsl #6
     a74:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
     a78:	00637273 	rsbeq	r7, r3, r3, ror r2
     a7c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
     a80:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
     a84:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
     a88:	2f6e756a 	svccs	0x006e756a
     a8c:	6b736544 	blvs	1cd9fa4 <__bss_end__+0x1ccee34>
     a90:	2f706f74 	svccs	0x00706f74
     a94:	6f686373 	svcvs	0x00686373
     a98:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
     a9c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
     aa0:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
     aa4:	53432f30 	movtpl	r2, #16176	; 0x3f30
     aa8:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
     aac:	3173632f 	cmncc	r3, pc, lsr #6
     ab0:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
     ab4:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
     ab8:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     abc:	00697062 	rsbeq	r7, r9, r2, rrx
     ac0:	656c6300 	strbvs	r6, [ip, #-768]!	; 0x300
     ac4:	722d6e61 	eorvc	r6, sp, #1552	; 0x610
     ac8:	6f6f6265 	svcvs	0x006f6265
     acc:	00632e74 	rsbeq	r2, r3, r4, ror lr
     ad0:	72000001 	andvc	r0, r0, #1
     ad4:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
     ad8:	00000200 	andeq	r0, r0, r0, lsl #4
     adc:	02050000 	andeq	r0, r5, #0
     ae0:	0000929c 	muleq	r0, ip, r2
     ae4:	4b832f15 	blmi	fe0cc740 <__bss_end__+0xfe0c15d0>
     ae8:	01000602 	tsteq	r0, r2, lsl #12
     aec:	00012101 	andeq	r2, r1, r1, lsl #2
     af0:	f8000200 			; <UNDEFINED> instruction: 0xf8000200
     af4:	02000000 	andeq	r0, r0, #0
     af8:	0d0efb01 	vstreq	d15, [lr, #-4]
     afc:	01010100 	mrseq	r0, (UNDEF: 17)
     b00:	00000001 	andeq	r0, r0, r1
     b04:	01000001 	tsteq	r0, r1
     b08:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
     b0c:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
     b10:	2f006372 	svccs	0x00006372
     b14:	2f727375 	svccs	0x00727375
     b18:	61636f6c 	cmnvs	r3, ip, ror #30
     b1c:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
     b20:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
     b24:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     b28:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     b2c:	61652d65 	cmnvs	r5, r5, ror #26
     b30:	342f6962 	strtcc	r6, [pc], #-2402	; b38 <_start-0x74c8>
     b34:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
     b38:	3173632d 	cmncc	r3, sp, lsr #6
     b3c:	2f653037 	svccs	0x00653037
     b40:	2f62696c 	svccs	0x0062696c
     b44:	2f636367 	svccs	0x00636367
     b48:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     b4c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     b50:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     b54:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
     b58:	2f332e38 	svccs	0x00332e38
     b5c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     b60:	00656475 	rsbeq	r6, r5, r5, ror r4
     b64:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
     b68:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
     b6c:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
     b70:	2f6e756a 	svccs	0x006e756a
     b74:	6b736544 	blvs	1cda08c <__bss_end__+0x1ccef1c>
     b78:	2f706f74 	svccs	0x00706f74
     b7c:	6f686373 	svcvs	0x00686373
     b80:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
     b84:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
     b88:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
     b8c:	53432f30 	movtpl	r2, #16176	; 0x3f30
     b90:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
     b94:	3173632f 	cmncc	r3, pc, lsr #6
     b98:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
     b9c:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
     ba0:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     ba4:	00697062 	rsbeq	r7, r9, r2, rrx
     ba8:	74736300 	ldrbtvc	r6, [r3], #-768	; 0x300
     bac:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
     bb0:	00010063 	andeq	r0, r1, r3, rrx
     bb4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
     bb8:	2d746e69 	ldclcs	14, cr6, [r4, #-420]!	; 0xfffffe5c
     bbc:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
     bc0:	00020068 	andeq	r0, r2, r8, rrx
     bc4:	2d777300 	ldclcs	3, cr7, [r7, #-0]
     bc8:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
     bcc:	0100682e 	tsteq	r0, lr, lsr #16
     bd0:	6f630000 	svcvs	0x00630000
     bd4:	6f72746e 	svcvs	0x0072746e
     bd8:	6c622d6c 	stclvs	13, cr2, [r2], #-432	; 0xfffffe50
     bdc:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
     be0:	00010068 	andeq	r0, r1, r8, rrx
     be4:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
     be8:	0300682e 	movweq	r6, #2094	; 0x82e
     bec:	00000000 	andeq	r0, r0, r0
     bf0:	92c40205 	sbcls	r0, r4, #1342177280	; 0x50000000
     bf4:	4b170000 	blmi	5c0bfc <__bss_end__+0x5b5a8c>
     bf8:	31326868 	teqcc	r2, r8, ror #16
     bfc:	002f2d2f 	eoreq	r2, pc, pc, lsr #26
     c00:	49010402 	stmdbmi	r1, {r1, sl}
     c04:	674b2f4f 	strbvs	r2, [fp, -pc, asr #30]
     c08:	4e678367 	cdpmi	3, 6, cr8, cr7, cr7, {3}
     c0c:	0010022f 	andseq	r0, r0, pc, lsr #4
     c10:	00990101 	addseq	r0, r9, r1, lsl #2
     c14:	00020000 	andeq	r0, r2, r0
     c18:	00000077 	andeq	r0, r0, r7, ror r0
     c1c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     c20:	0101000d 	tsteq	r1, sp
     c24:	00000101 	andeq	r0, r0, r1, lsl #2
     c28:	00000100 	andeq	r0, r0, r0, lsl #2
     c2c:	31736301 	cmncc	r3, r1, lsl #6
     c30:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
     c34:	00637273 	rsbeq	r7, r3, r3, ror r2
     c38:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
     c3c:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
     c40:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
     c44:	2f6e756a 	svccs	0x006e756a
     c48:	6b736544 	blvs	1cda160 <__bss_end__+0x1cceff0>
     c4c:	2f706f74 	svccs	0x00706f74
     c50:	6f686373 	svcvs	0x00686373
     c54:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
     c58:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
     c5c:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
     c60:	53432f30 	movtpl	r2, #16176	; 0x3f30
     c64:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
     c68:	3173632f 	cmncc	r3, pc, lsr #6
     c6c:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
     c70:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
     c74:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     c78:	00697062 	rsbeq	r7, r9, r2, rrx
     c7c:	62657200 	rsbvs	r7, r5, #0, 4
     c80:	2e746f6f 	cdpcs	15, 7, cr6, cr4, cr15, {3}
     c84:	00010063 	andeq	r0, r1, r3, rrx
     c88:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
     c8c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     c90:	00000000 	andeq	r0, r0, r0
     c94:	93740205 	cmnls	r4, #1342177280	; 0x50000000
     c98:	0d030000 	stceq	0, cr0, [r3, #-0]
     c9c:	2f311401 	svccs	0x00311401
     ca0:	4b2f1585 	blmi	bc62bc <__bss_end__+0xbbb14c>
     ca4:	35672f4d 	strbcc	r2, [r7, #-3917]!	; 0xf4d
     ca8:	10026752 	andne	r6, r2, r2, asr r7
     cac:	a3010100 	movwge	r0, #4352	; 0x1100
     cb0:	02000000 	andeq	r0, r0, #0
     cb4:	00007600 	andeq	r7, r0, r0, lsl #12
     cb8:	fb010200 	blx	414c2 <__bss_end__+0x36352>
     cbc:	01000d0e 	tsteq	r0, lr, lsl #26
     cc0:	00010101 	andeq	r0, r1, r1, lsl #2
     cc4:	00010000 	andeq	r0, r1, r0
     cc8:	73630100 	cmnvc	r3, #0, 2
     ccc:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
     cd0:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
     cd4:	73552f00 	cmpvc	r5, #0, 30
     cd8:	2f737265 	svccs	0x00737265
     cdc:	61697262 	cmnvs	r9, r2, ror #4
     ce0:	6e756a6e 	vsubvs.f32	s13, s10, s29
     ce4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     ce8:	706f746b 	rsbvc	r7, pc, fp, ror #8
     cec:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
     cf0:	2f6c6f6f 	svccs	0x006c6f6f
     cf4:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
     cf8:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
     cfc:	432f3032 	teqmi	pc, #50	; 0x32
     d00:	30343153 	eorscc	r3, r4, r3, asr r1
     d04:	73632f45 	cmnvc	r3, #276	; 0x114
     d08:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
     d0c:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
     d10:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; b74 <_start-0x748c>
     d14:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
     d18:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
     d1c:	2e72656d 	cdpcs	5, 7, cr6, cr2, cr13, {3}
     d20:	00010063 	andeq	r0, r1, r3, rrx
     d24:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
     d28:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     d2c:	00000000 	andeq	r0, r0, r0
     d30:	93e80205 	mvnls	r0, #1342177280	; 0x50000000
     d34:	13160000 	tstne	r6, #0
     d38:	02002d2f 	andeq	r2, r0, #3008	; 0xbc0
     d3c:	2e060104 	adfcss	f0, f6, f4
     d40:	2f316806 	svccs	0x00316806
     d44:	31324d4b 	teqcc	r2, fp, asr #26
     d48:	2f4c4b30 	svccs	0x004c4b30
     d4c:	842f2f6a 	strthi	r2, [pc], #-3946	; d54 <_start-0x72ac>
     d50:	0008022f 	andeq	r0, r8, pc, lsr #4
     d54:	01760101 	cmneq	r6, r1, lsl #2
     d58:	00020000 	andeq	r0, r2, r0
     d5c:	00000120 	andeq	r0, r0, r0, lsr #2
     d60:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     d64:	0101000d 	tsteq	r1, sp
     d68:	00000101 	andeq	r0, r0, r1, lsl #2
     d6c:	00000100 	andeq	r0, r0, r0, lsl #2
     d70:	2d796d01 	ldclcs	13, cr6, [r9, #-4]!
     d74:	00637273 	rsbeq	r7, r3, r3, ror r2
     d78:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
     d7c:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
     d80:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
     d84:	2f6e756a 	svccs	0x006e756a
     d88:	6b736544 	blvs	1cda2a0 <__bss_end__+0x1ccf130>
     d8c:	2f706f74 	svccs	0x00706f74
     d90:	6f686373 	svcvs	0x00686373
     d94:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
     d98:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
     d9c:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
     da0:	53432f30 	movtpl	r2, #16176	; 0x3f30
     da4:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
     da8:	3173632f 	cmncc	r3, pc, lsr #6
     dac:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
     db0:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
     db4:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     db8:	00697062 	rsbeq	r7, r9, r2, rrx
     dbc:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     dc0:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
     dc4:	432f6c61 	teqmi	pc, #24832	; 0x6100
     dc8:	616c6c65 	cmnvs	ip, r5, ror #24
     dcc:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
     dd0:	6f6e2d6d 	svcvs	0x006e2d6d
     dd4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     dd8:	2f696261 	svccs	0x00696261
     ddc:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
     de0:	73632d33 	cmnvc	r3, #3264	; 0xcc0
     de4:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
     de8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     dec:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     df0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     df4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     df8:	61652d65 	cmnvs	r5, r5, ror #26
     dfc:	342f6962 	strtcc	r6, [pc], #-2402	; e04 <_start-0x71fc>
     e00:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
     e04:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     e08:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     e0c:	73752f00 	cmnvc	r5, #0, 30
     e10:	6f6c2f72 	svcvs	0x006c2f72
     e14:	2f6c6163 	svccs	0x006c6163
     e18:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
     e1c:	612f7261 	teqvs	pc, r1, ror #4
     e20:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     e24:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     e28:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     e2c:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
     e30:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
     e34:	30373173 	eorscc	r3, r7, r3, ror r1
     e38:	72612f65 	rsbvc	r2, r1, #404	; 0x194
     e3c:	6f6e2d6d 	svcvs	0x006e2d6d
     e40:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     e44:	2f696261 	svccs	0x00696261
     e48:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     e4c:	00656475 	rsbeq	r6, r5, r5, ror r4
     e50:	616d6b00 	cmnvs	sp, r0, lsl #22
     e54:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
     e58:	0100632e 	tsteq	r0, lr, lsr #6
     e5c:	70720000 	rsbsvc	r0, r2, r0
     e60:	00682e69 	rsbeq	r2, r8, r9, ror #28
     e64:	73000002 	movwvc	r0, #2
     e68:	65646474 	strbvs	r6, [r4, #-1140]!	; 0x474
     e6c:	00682e66 	rsbeq	r2, r8, r6, ror #28
     e70:	73000003 	movwvc	r0, #3
     e74:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     e78:	00682e67 	rsbeq	r2, r8, r7, ror #28
     e7c:	00000004 	andeq	r0, r0, r4
     e80:	70020500 	andvc	r0, r2, r0, lsl #10
     e84:	03000094 	movweq	r0, #148	; 0x94
     e88:	002f0118 	eoreq	r0, pc, r8, lsl r1	; <UNPREDICTABLE>
     e8c:	06010402 	streq	r0, [r1], -r2, lsl #8
     e90:	4bd80682 	blmi	ff6028a0 <__bss_end__+0xff5f7730>
     e94:	be6a834b 	cdplt	3, 6, cr8, cr10, cr11, {2}
     e98:	0402002f 	streq	r0, [r2], #-47	; 0x2f
     e9c:	06820601 	streq	r0, [r2], r1, lsl #12
     ea0:	004b4bd8 	ldrdeq	r4, [fp], #-184	; 0xffffff48
     ea4:	06010402 	streq	r0, [r1], -r2, lsl #8
     ea8:	4bd7064a 	blmi	ff5c27d8 <__bss_end__+0xff5b7668>
     eac:	032f3083 	teqeq	pc, #131	; 0x83
     eb0:	002fba0a 	eoreq	fp, pc, sl, lsl #20
     eb4:	06010402 	streq	r0, [r1], -r2, lsl #8
     eb8:	67d70682 	ldrbvs	r0, [r7, r2, lsl #13]
     ebc:	14c213f9 	strbne	r1, [r2], #1017	; 0x3f9
     ec0:	02002f84 	andeq	r2, r0, #132, 30	; 0x210
     ec4:	82060104 	andhi	r0, r6, #4, 2
     ec8:	0267d706 	rsbeq	sp, r7, #1572864	; 0x180000
     ecc:	0101000c 	tsteq	r1, ip
     ed0:	00000345 	andeq	r0, r0, r5, asr #6
     ed4:	01bd0002 			; <UNDEFINED> instruction: 0x01bd0002
     ed8:	01020000 	mrseq	r0, (UNDEF: 2)
     edc:	000d0efb 	strdeq	r0, [sp], -fp
     ee0:	01010101 	tsteq	r1, r1, lsl #2
     ee4:	01000000 	mrseq	r0, (UNDEF: 0)
     ee8:	6d010000 	stcvs	0, cr0, [r1, #-0]
     eec:	72732d79 	rsbsvc	r2, r3, #7744	; 0x1e40
     ef0:	552f0063 	strpl	r0, [pc, #-99]!	; e95 <_start-0x716b>
     ef4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     ef8:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
     efc:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
     f00:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
     f04:	6f746b73 	svcvs	0x00746b73
     f08:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
     f0c:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; d74 <_start-0x728c>
     f10:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
     f14:	31726574 	cmncc	r2, r4, ror r5
     f18:	2f303239 	svccs	0x00303239
     f1c:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
     f20:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
     f24:	30343173 	eorscc	r3, r4, r3, ror r1
     f28:	30322d65 	eorscc	r2, r2, r5, ror #26
     f2c:	2f6e6977 	svccs	0x006e6977
     f30:	7062696c 	rsbvc	r6, r2, ip, ror #18
     f34:	73632f69 	cmnvc	r3, #420	; 0x1a4
     f38:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
     f3c:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
     f40:	73752f00 	cmnvc	r5, #0, 30
     f44:	6f6c2f72 	svcvs	0x006c2f72
     f48:	2f6c6163 	svccs	0x006c6163
     f4c:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
     f50:	612f7261 	teqvs	pc, r1, ror #4
     f54:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     f58:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     f5c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     f60:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
     f64:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
     f68:	30373173 	eorscc	r3, r7, r3, ror r1
     f6c:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     f70:	63672f62 	cmnvs	r7, #392	; 0x188
     f74:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
     f78:	6f6e2d6d 	svcvs	0x006e2d6d
     f7c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     f80:	2f696261 	svccs	0x00696261
     f84:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
     f88:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
     f8c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     f90:	552f0065 	strpl	r0, [pc, #-101]!	; f33 <_start-0x70cd>
     f94:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     f98:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
     f9c:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
     fa0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
     fa4:	6f746b73 	svcvs	0x00746b73
     fa8:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
     fac:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; e14 <_start-0x71ec>
     fb0:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
     fb4:	31726574 	cmncc	r2, r4, ror r5
     fb8:	2f303239 	svccs	0x00303239
     fbc:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
     fc0:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
     fc4:	30343173 	eorscc	r3, r4, r3, ror r1
     fc8:	30322d65 	eorscc	r2, r2, r5, ror #26
     fcc:	2f6e6977 	svccs	0x006e6977
     fd0:	7062696c 	rsbvc	r6, r2, ip, ror #18
     fd4:	552f0069 	strpl	r0, [pc, #-105]!	; f73 <_start-0x708d>
     fd8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     fdc:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
     fe0:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
     fe4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
     fe8:	6f746b73 	svcvs	0x00746b73
     fec:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
     ff0:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; e58 <_start-0x71a8>
     ff4:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
     ff8:	31726574 	cmncc	r2, r4, ror r5
     ffc:	2f303239 	svccs	0x00303239
    1000:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
    1004:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
    1008:	30343173 	eorscc	r3, r4, r3, ror r1
    100c:	30322d65 	eorscc	r2, r2, r5, ror #26
    1010:	2f6e6977 	svccs	0x006e6977
    1014:	7062696c 	rsbvc	r6, r2, ip, ror #18
    1018:	696c2f69 	stmdbvs	ip!, {r0, r3, r5, r6, r8, r9, sl, fp, sp}^
    101c:	00006362 	andeq	r6, r0, r2, ror #6
    1020:	752d7773 	strvc	r7, [sp, #-1907]!	; 0x773
    1024:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    1028:	00010063 	andeq	r0, r1, r3, rrx
    102c:	63796300 	cmnvs	r9, #0, 6
    1030:	752d656c 	strvc	r6, [sp, #-1388]!	; 0x56c
    1034:	2e6c6974 	mcrcs	9, 3, r6, cr12, cr4, {3}
    1038:	00020068 	andeq	r0, r2, r8, rrx
    103c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    1040:	2d746e69 	ldclcs	14, cr6, [r4, #-420]!	; 0xfffffe5c
    1044:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
    1048:	00030068 	andeq	r0, r3, r8, rrx
    104c:	2d777300 	ldclcs	3, cr7, [r7, #-0]
    1050:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
    1054:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1058:	74730000 	ldrbtvc	r0, [r3], #-0
    105c:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
    1060:	0300682e 	movweq	r6, #2094	; 0x82e
    1064:	70670000 	rsbvc	r0, r7, r0
    1068:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    106c:	00000200 	andeq	r0, r0, r0, lsl #4
    1070:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
    1074:	00040068 	andeq	r0, r4, r8, rrx
    1078:	2d617600 	stclcs	6, cr7, [r1, #-0]
    107c:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    1080:	682e6b74 	stmdavs	lr!, {r2, r4, r5, r6, r8, r9, fp, sp, lr}
    1084:	00000500 	andeq	r0, r0, r0, lsl #10
    1088:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
    108c:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
    1090:	00003e6e 	andeq	r3, r0, lr, ror #28
    1094:	00000000 	andeq	r0, r0, r0
    1098:	96580205 	ldrbls	r0, [r8], -r5, lsl #4
    109c:	4c1a0000 	ldcmi	0, cr0, [sl], {-0}
    10a0:	0204302f 	andeq	r3, r4, #47	; 0x2f
    10a4:	032e0b03 	teqeq	lr, #3072	; 0xc00
    10a8:	01046673 	tsteq	r4, r3, ror r6
    10ac:	35020488 	strcc	r0, [r2, #-1160]	; 0x488
    10b0:	04667303 	strbteq	r7, [r6], #-771	; 0x303
    10b4:	02048a01 	andeq	r8, r4, #4096	; 0x1000
    10b8:	66730333 			; <UNDEFINED> instruction: 0x66730333
    10bc:	0a030104 	beq	c14d4 <__bss_end__+0xb6364>
    10c0:	31020482 	smlabbcc	r2, r2, r4, r0
    10c4:	04667303 	strbteq	r7, [r6], #-771	; 0x303
    10c8:	820c0301 	andhi	r0, ip, #67108864	; 0x4000000
    10cc:	032f0204 	teqeq	pc, #4, 4	; 0x40000000
    10d0:	01046673 	tsteq	r4, r3, ror r6
    10d4:	04820e03 	streq	r0, [r2], #3587	; 0xe03
    10d8:	73032d02 	movwvc	r2, #15618	; 0x3d02
    10dc:	03010466 	movweq	r0, #5222	; 0x1466
    10e0:	02048210 	andeq	r8, r4, #16, 4
    10e4:	6673032b 	ldrbtvs	r0, [r3], -fp, lsr #6
    10e8:	12030104 	andne	r0, r3, #4, 2
    10ec:	29020482 	stmdbcs	r2, {r1, r7, sl}
    10f0:	04667303 	strbteq	r7, [r6], #-771	; 0x303
    10f4:	82140301 	andshi	r0, r4, #67108864	; 0x4000000
    10f8:	79030204 	stmdbvc	r3, {r2, r9}
    10fc:	6673032e 	ldrbtvs	r0, [r3], -lr, lsr #6
    1100:	16030104 	strne	r0, [r3], -r4, lsl #2
    1104:	03020482 	movweq	r0, #9346	; 0x2482
    1108:	73032e77 	movwvc	r2, #15991	; 0x3e77
    110c:	03010466 	movweq	r0, #5222	; 0x1466
    1110:	10038218 	andne	r8, r3, r8, lsl r2
    1114:	034d4b2e 	movteq	r4, #56110	; 0xdb2e
    1118:	844c2e70 	strbhi	r2, [ip], #-3696	; 0xe70
    111c:	0d034883 	stceq	8, cr4, [r3, #-524]	; 0xfffffdf4
    1120:	33314e2e 	teqcc	r1, #736	; 0x2e0
    1124:	48030204 	stmdami	r3, {r2, r9}
    1128:	0301042e 	movweq	r0, #5166	; 0x142e
    112c:	042f823a 	strteq	r8, [pc], #-570	; 1134 <_start-0x6ecc>
    1130:	66450302 	strbvs	r0, [r5], -r2, lsl #6
    1134:	3d030104 	stfccs	f0, [r3, #-16]
    1138:	02042f82 	andeq	r2, r4, #520	; 0x208
    113c:	04824203 	streq	r4, [r2], #515	; 0x203
    1140:	00c00301 	sbceq	r0, r0, r1, lsl #6
    1144:	02042f82 	andeq	r2, r4, #520	; 0x208
    1148:	827fbf03 	rsbshi	fp, pc, #3, 30
    114c:	c3030104 	movwgt	r0, #12548	; 0x3104
    1150:	042f8200 	strteq	r8, [pc], #-512	; 1158 <_start-0x6ea8>
    1154:	7fbc0302 	svcvc	0x00bc0302
    1158:	03010482 	movweq	r0, #5250	; 0x1482
    115c:	2f8200c6 	svccs	0x008200c6
    1160:	b9030204 	stmdblt	r3, {r2, r9}
    1164:	0104827f 	tsteq	r4, pc, ror r2
    1168:	8200c903 	andhi	ip, r0, #49152	; 0xc000
    116c:	0302042f 	movweq	r0, #9263	; 0x242f
    1170:	04827fb6 	streq	r7, [r2], #4022	; 0xfb6
    1174:	00cc0301 	sbceq	r0, ip, r1, lsl #6
    1178:	02042f82 	andeq	r2, r4, #520	; 0x208
    117c:	827fb303 	rsbshi	fp, pc, #201326592	; 0xc000000
    1180:	d0030104 	andle	r0, r3, r4, lsl #2
    1184:	4c038200 	sfmmi	f0, 1, [r3], {-0}
    1188:	83844c82 	orrhi	r4, r4, #33280	; 0x8200
    118c:	2e360348 	cdpcs	3, 3, cr0, cr6, cr8, {2}
    1190:	4a54034e 	bmi	1501ed0 <__bss_end__+0x14f6d60>
    1194:	324a2903 	subcc	r2, sl, #49152	; 0xc000
    1198:	02009f34 	andeq	r9, r0, #52, 30	; 0xd0
    119c:	4a060104 	bmi	1815b4 <__bss_end__+0x176444>
    11a0:	4b4ed706 	blmi	13b6dc0 <__bss_end__+0x13abc50>
    11a4:	02002cbb 	andeq	r2, r0, #47872	; 0xbb00
    11a8:	2e060104 	adfcss	f0, f6, f4
    11ac:	a44c6d06 	strbge	r6, [ip], #-3334	; 0xd06
    11b0:	04020084 	streq	r0, [r2], #-132	; 0x84
    11b4:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    11b8:	02004dd7 	andeq	r4, r0, #13760	; 0x35c0
    11bc:	004b0204 	subeq	r0, fp, r4, lsl #4
    11c0:	81020402 	tsthi	r2, r2, lsl #8
    11c4:	01040200 	mrseq	r0, R12_usr
    11c8:	4d062e06 	stcmi	14, cr2, [r6, #-24]	; 0xffffffe8
    11cc:	4bbca54c 	blmi	fef2a704 <__bss_end__+0xfef1f594>
    11d0:	2f6a4b4b 	svccs	0x006a4b4b
    11d4:	01040200 	mrseq	r0, R12_usr
    11d8:	00828206 	addeq	r8, r2, r6, lsl #4
    11dc:	9e040402 	cdpls	4, 0, cr0, cr4, cr2, {0}
    11e0:	01040200 	mrseq	r0, R12_usr
    11e4:	88d9064a 	ldmhi	r9, {r1, r3, r6, r9, sl}^
    11e8:	4b4b2fbd 	blmi	12cd0e4 <__bss_end__+0x12c1f74>
    11ec:	00674008 	rsbeq	r4, r7, r8
    11f0:	2f020402 	svccs	0x00020402
    11f4:	02040200 	andeq	r0, r4, #0, 4
    11f8:	04020049 	streq	r0, [r2], #-73	; 0x49
    11fc:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    1200:	4b863468 	blmi	fe18e3a8 <__bss_end__+0xfe183238>
    1204:	040200a0 	streq	r0, [r2], #-160	; 0xa0
    1208:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    120c:	220868d7 	andcs	r6, r8, #14090240	; 0xd70000
    1210:	d84b674b 	stmdale	fp, {r0, r1, r3, r6, r8, r9, sl, sp, lr}^
    1214:	01000a02 	tsteq	r0, r2, lsl #20
    1218:	00010101 	andeq	r0, r1, r1, lsl #2
    121c:	ca000200 	bgt	1a24 <_start-0x65dc>
    1220:	02000000 	andeq	r0, r0, #0
    1224:	0d0efb01 	vstreq	d15, [lr, #-4]
    1228:	01010100 	mrseq	r0, (UNDEF: 17)
    122c:	00000001 	andeq	r0, r0, r1
    1230:	01000001 	tsteq	r0, r1
    1234:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
    1238:	2f006372 	svccs	0x00006372
    123c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1240:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
    1244:	6a6e6169 	bvs	1b997f0 <__bss_end__+0x1b8e680>
    1248:	442f6e75 	strtmi	r6, [pc], #-3701	; 1250 <_start-0x6db0>
    124c:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
    1250:	732f706f 	teqvc	pc, #111	; 0x6f
    1254:	6f6f6863 	svcvs	0x006f6863
    1258:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
    125c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1260:	30323931 	eorscc	r3, r2, r1, lsr r9
    1264:	3153432f 	cmpcc	r3, pc, lsr #6
    1268:	2f453034 	svccs	0x00453034
    126c:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
    1270:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
    1274:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
    1278:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    127c:	632f6970 	teqvs	pc, #112, 18	; 0x1c0000
    1280:	30343173 	eorscc	r3, r4, r3, ror r1
    1284:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
    1288:	552f0063 	strpl	r0, [pc, #-99]!	; 122d <_start-0x6dd3>
    128c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    1290:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    1294:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
    1298:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
    129c:	6f746b73 	svcvs	0x00746b73
    12a0:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
    12a4:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 110c <_start-0x6ef4>
    12a8:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
    12ac:	31726574 	cmncc	r2, r4, ror r5
    12b0:	2f303239 	svccs	0x00303239
    12b4:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
    12b8:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
    12bc:	30343173 	eorscc	r3, r4, r3, ror r1
    12c0:	30322d65 	eorscc	r2, r2, r5, ror #26
    12c4:	2f6e6977 	svccs	0x006e6977
    12c8:	7062696c 	rsbvc	r6, r2, ip, ror #18
    12cc:	75000069 	strvc	r0, [r0, #-105]	; 0x69
    12d0:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    12d4:	00010063 	andeq	r0, r1, r3, rrx
    12d8:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    12dc:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    12e0:	72000002 	andvc	r0, r0, #2
    12e4:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
    12e8:	00000300 	andeq	r0, r0, r0, lsl #6
    12ec:	02050000 	andeq	r0, r5, #0
    12f0:	00009c78 	andeq	r9, r0, r8, ror ip
    12f4:	30013603 	andcc	r3, r1, r3, lsl #12
    12f8:	306d6733 	rsbcc	r6, sp, r3, lsr r7
    12fc:	676730d8 			; <UNDEFINED> instruction: 0x676730d8
    1300:	68676767 	stmdavs	r7!, {r0, r1, r2, r5, r6, r8, r9, sl, sp, lr}^
    1304:	6a672f86 	bvs	19cd124 <__bss_end__+0x19c1fb4>
    1308:	69676730 	stmdbvs	r7!, {r4, r5, r8, r9, sl, sp, lr}^
    130c:	4c6a672f 	stclmi	7, cr6, [sl], #-188	; 0xffffff44
    1310:	2f2fc167 	svccs	0x002fc167
    1314:	49682f30 	stmdbmi	r8!, {r4, r5, r8, r9, sl, fp, sp}^
    1318:	00020230 	andeq	r0, r2, r0, lsr r2
    131c:	01780101 	cmneq	r8, r1, lsl #2
    1320:	00020000 	andeq	r0, r2, r0
    1324:	000000ca 	andeq	r0, r0, sl, asr #1
    1328:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    132c:	0101000d 	tsteq	r1, sp
    1330:	00000101 	andeq	r0, r0, r1, lsl #2
    1334:	00000100 	andeq	r0, r0, r0, lsl #2
    1338:	2d796d01 	ldclcs	13, cr6, [r9, #-4]!
    133c:	00637273 	rsbeq	r7, r3, r3, ror r2
    1340:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
    1344:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
    1348:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
    134c:	2f6e756a 	svccs	0x006e756a
    1350:	6b736544 	blvs	1cda868 <__bss_end__+0x1ccf6f8>
    1354:	2f706f74 	svccs	0x00706f74
    1358:	6f686373 	svcvs	0x00686373
    135c:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
    1360:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    1364:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
    1368:	53432f30 	movtpl	r2, #16176	; 0x3f30
    136c:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
    1370:	3173632f 	cmncc	r3, pc, lsr #6
    1374:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
    1378:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
    137c:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
    1380:	2f697062 	svccs	0x00697062
    1384:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
    1388:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
    138c:	2f006372 	svccs	0x00006372
    1390:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1394:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
    1398:	6a6e6169 	bvs	1b99944 <__bss_end__+0x1b8e7d4>
    139c:	442f6e75 	strtmi	r6, [pc], #-3701	; 13a4 <_start-0x6c5c>
    13a0:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
    13a4:	732f706f 	teqvc	pc, #111	; 0x6f
    13a8:	6f6f6863 	svcvs	0x006f6863
    13ac:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
    13b0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    13b4:	30323931 	eorscc	r3, r2, r1, lsr r9
    13b8:	3153432f 	cmpcc	r3, pc, lsr #6
    13bc:	2f453034 	svccs	0x00453034
    13c0:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
    13c4:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
    13c8:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
    13cc:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    13d0:	00006970 	andeq	r6, r0, r0, ror r9
    13d4:	6f697067 	svcvs	0x00697067
    13d8:	0100632e 	tsteq	r0, lr, lsr #6
    13dc:	70670000 	rsbvc	r0, r7, r0
    13e0:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    13e4:	00000200 	andeq	r0, r0, r0, lsl #4
    13e8:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
    13ec:	00030068 	andeq	r0, r3, r8, rrx
    13f0:	05000000 	streq	r0, [r0, #-0]
    13f4:	009e3002 	addseq	r3, lr, r2
    13f8:	013e0300 	teqeq	lr, r0, lsl #6
    13fc:	0869504e 	stmdaeq	r9!, {r1, r2, r3, r6, ip, lr}^
    1400:	67676721 	strbvs	r6, [r7, -r1, lsr #14]!
    1404:	32676767 	rsbcc	r6, r7, #27000832	; 0x19c0000
    1408:	dc22084b 	stcle	8, cr0, [r2], #-300	; 0xfffffed4
    140c:	4e135131 	mrcmi	1, 0, r5, cr3, cr1, {1}
    1410:	31be3050 			; <UNDEFINED> instruction: 0x31be3050
    1414:	4f4d1350 	svcmi	0x004d1350
    1418:	504cc030 	subpl	ip, ip, r0, lsr r0
    141c:	67210869 	strvs	r0, [r1, -r9, ror #16]!
    1420:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
    1424:	084b3267 	stmdaeq	fp, {r0, r1, r2, r5, r6, r9, ip, sp}^
    1428:	504ca421 	subpl	sl, ip, r1, lsr #8
    142c:	0369842f 	cmneq	r9, #788529152	; 0x2f000000
    1430:	0c038275 	sfmeq	f0, 1, [r3], {117}	; 0x75
    1434:	4e304d2e 	cdpmi	13, 3, cr4, cr0, cr14, {1}
    1438:	6a4d4c4b 	bvs	135456c <__bss_end__+0x13493fc>
    143c:	2108696b 	tstcs	r8, fp, ror #18
    1440:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
    1444:	4b326767 	blmi	c9b1e8 <__bss_end__+0xc90078>
    1448:	1a032208 	bne	c9c70 <__bss_end__+0xbeb00>
    144c:	4c9f31ba 	ldfmis	f3, [pc], {186}	; 0xba
    1450:	4e4d522f 	cdpmi	2, 4, cr5, cr13, cr15, {1}
    1454:	4b674b2f 	blmi	19d4118 <__bss_end__+0x19c8fa8>
    1458:	4c676768 	stclmi	7, cr6, [r7], #-416	; 0xfffffe60
    145c:	4b2f672f 	blmi	bdb120 <__bss_end__+0xbcffb0>
    1460:	2f4e4c6e 	svccs	0x004e4c6e
    1464:	684b674b 	stmdavs	fp, {r0, r1, r3, r6, r8, r9, sl, sp, lr}^
    1468:	2f4c6767 	svccs	0x004c6767
    146c:	6d4b2f67 	stclvs	15, cr2, [fp, #-412]	; 0xfffffe64
    1470:	4b2f4e4b 	blmi	bd4da4 <__bss_end__+0xbc9c34>
    1474:	04020067 	streq	r0, [r2], #-103	; 0x67
    1478:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    147c:	002f9f68 	eoreq	r9, pc, r8, ror #30
    1480:	06010402 	streq	r0, [r1], -r2, lsl #8
    1484:	2f68064a 	svccs	0x0068064a
    1488:	034a7303 	movteq	r7, #41731	; 0xa303
    148c:	4c4d2e0e 	mcrrmi	14, 0, r2, sp, cr14
    1490:	bc4b2f4e 	mcrrlt	15, 4, r2, fp, cr14
    1494:	000602bc 			; <UNDEFINED> instruction: 0x000602bc
    1498:	01280101 	teqeq	r8, r1, lsl #2
    149c:	00020000 	andeq	r0, r2, r0
    14a0:	0000010d 	andeq	r0, r0, sp, lsl #2
    14a4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    14a8:	0101000d 	tsteq	r1, sp
    14ac:	00000101 	andeq	r0, r0, r1, lsl #2
    14b0:	00000100 	andeq	r0, r0, r0, lsl #2
    14b4:	31736301 	cmncc	r3, r1, lsl #6
    14b8:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
    14bc:	00637273 	rsbeq	r7, r3, r3, ror r2
    14c0:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    14c4:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
    14c8:	432f6c61 	teqmi	pc, #24832	; 0x6100
    14cc:	616c6c65 	cmnvs	ip, r5, ror #24
    14d0:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
    14d4:	6f6e2d6d 	svcvs	0x006e2d6d
    14d8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
    14dc:	2f696261 	svccs	0x00696261
    14e0:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
    14e4:	73632d33 	cmnvc	r3, #3264	; 0xcc0
    14e8:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
    14ec:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    14f0:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    14f4:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    14f8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    14fc:	61652d65 	cmnvs	r5, r5, ror #26
    1500:	342f6962 	strtcc	r6, [pc], #-2402	; 1508 <_start-0x6af8>
    1504:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
    1508:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    150c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    1510:	73752f00 	cmnvc	r5, #0, 30
    1514:	6f6c2f72 	svcvs	0x006c2f72
    1518:	2f6c6163 	svccs	0x006c6163
    151c:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
    1520:	612f7261 	teqvs	pc, r1, ror #4
    1524:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1528:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    152c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1530:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
    1534:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
    1538:	30373173 	eorscc	r3, r7, r3, ror r1
    153c:	72612f65 	rsbvc	r2, r1, #404	; 0x194
    1540:	6f6e2d6d 	svcvs	0x006e2d6d
    1544:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
    1548:	2f696261 	svccs	0x00696261
    154c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1550:	00656475 	rsbeq	r6, r5, r5, ror r4
    1554:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
    1558:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 1390 <_start-0x6c70>
    155c:	6f6c622d 	svcvs	0x006c622d
    1560:	632e6b63 	teqvs	lr, #101376	; 0x18c00
    1564:	00000100 	andeq	r0, r0, r0, lsl #2
    1568:	64647473 	strbtvs	r7, [r4], #-1139	; 0x473
    156c:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    1570:	00000200 	andeq	r0, r0, r0, lsl #4
    1574:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1578:	672d746e 	strvs	r7, [sp, -lr, ror #8]!
    157c:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
    1580:	00000200 	andeq	r0, r0, r0, lsl #4
    1584:	752d7773 	strvc	r7, [sp, #-1907]!	; 0x773
    1588:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    158c:	00010068 	andeq	r0, r1, r8, rrx
    1590:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
    1594:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 13cc <_start-0x6c34>
    1598:	6f6c622d 	svcvs	0x006c622d
    159c:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    15a0:	00000100 	andeq	r0, r0, r0, lsl #2
    15a4:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    15a8:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    15ac:	00000300 	andeq	r0, r0, r0, lsl #6
    15b0:	02050000 	andeq	r0, r5, #0
    15b4:	0000a398 	muleq	r0, r8, r3
    15b8:	68833016 	stmvs	r3, {r1, r2, r4, ip, sp}
    15bc:	4b9f144c 	blmi	fe7c66f4 <__bss_end__+0xfe7bb584>
    15c0:	0004022f 	andeq	r0, r4, pc, lsr #4
    15c4:	Address 0x00000000000015c4 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0x56e
   4:	61747300 	cmnvs	r4, r0, lsl #6
   8:	47006b63 	strmi	r6, [r0, -r3, ror #22]
   c:	4320554e 	teqmi	r0, #327155712	; 0x13800000
  10:	382e3420 	stmdacc	lr!, {r5, sl, ip, sp}
  14:	2d20332e 	stccs	3, cr3, [r0, #-184]!	; 0xffffff48
  18:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0x36d
  1c:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  20:	36373131 			; <UNDEFINED> instruction: 0x36373131
  24:	2d667a6a 	vstmdbcs	r6!, {s15-s120}
  28:	6d2d2073 	stcvs	0, cr2, [sp, #-460]!	; 0xfffffe34
  2c:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0x574
  30:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  34:	36373131 			; <UNDEFINED> instruction: 0x36373131
  38:	2d667a6a 	vstmdbcs	r6!, {s15-s120}
  3c:	672d2073 			; <UNDEFINED> instruction: 0x672d2073
  40:	20626467 	rsbcs	r6, r2, r7, ror #8
  44:	20674f2d 	rsbcs	r4, r7, sp, lsr #30
  48:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0x32d
  4c:	756e673d 	strbvc	r6, [lr, #-1853]!	; 0x73d
  50:	2d203939 	stccs	9, cr3, [r0, #-228]!	; 0xffffff1c
  54:	65726666 	ldrbvs	r6, [r2, #-1638]!	; 0x666
  58:	61747365 	cmnvs	r4, r5, ror #6
  5c:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
  60:	6f6e0067 	svcvs	0x006e0067
  64:	69616d74 	stmdbvs	r1!, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^
  68:	6175006e 	cmnvs	r5, lr, rrx
  6c:	695f7472 	ldmdbvs	pc, {r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
  70:	0074696e 	rsbseq	r6, r4, lr, ror #18
  74:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  78:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
  7c:	61686320 	cmnvs	r8, r0, lsr #6
  80:	6c630072 	stclvs	0, cr0, [r3], #-456	; 0xfffffe38
  84:	5f6e6165 	svcpl	0x006e6165
  88:	6f626572 	svcvs	0x00626572
  8c:	7200746f 	andvc	r7, r0, #1862270976	; 0x6f000000
  90:	665f6970 			; <UNDEFINED> instruction: 0x665f6970
  94:	006b726f 	rsbeq	r7, fp, pc, ror #4
  98:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
  9c:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
  a0:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
  a4:	2f6e756a 	svccs	0x006e756a
  a8:	6b736544 	blvs	1cd95c0 <__bss_end__+0x1cce450>
  ac:	2f706f74 	svccs	0x00706f74
  b0:	6f686373 	svcvs	0x00686373
  b4:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
  b8:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
  bc:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
  c0:	53432f30 	movtpl	r2, #16176	; 0x3f30
  c4:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
  c8:	3173632f 	cmncc	r3, pc, lsr #6
  cc:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
  d0:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
  d4:	616c2f6e 	cmnvs	ip, lr, ror #30
  d8:	362f7362 	strtcc	r7, [pc], -r2, ror #6
  dc:	7268742d 	rsbvc	r7, r8, #754974720	; 0x2d000000
  e0:	73646165 	cmnvc	r4, #1073741849	; 0x40000019
  e4:	742d322f 	strtvc	r3, [sp], #-559	; 0x22f
  e8:	61657268 	cmnvs	r5, r8, ror #4
  ec:	6e2e7364 	cdpvs	3, 2, cr7, cr14, cr4, {3}
  f0:	73007765 	movwvc	r7, #1893	; 0x765
  f4:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xf68
  f8:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
  fc:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
 100:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 104:	6d6b0074 	stclvs	0, cr0, [fp, #-464]!	; 0xfffffe30
 108:	6f6c6c61 	svcvs	0x006c6c61
 10c:	70720063 	rsbsvc	r0, r2, r3, rrx
 110:	68745f69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 114:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 118:	6174735f 	cmnvs	r4, pc, asr r3
 11c:	31007472 	tstcc	r0, r2, ror r4
 120:	7365742d 	cmnvc	r5, #754974720	; 0x2d000000
 124:	68742d74 	ldmdavs	r4!, {r2, r4, r5, r6, r8, sl, fp, sp}^
 128:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 12c:	7400632e 	strvc	r6, [r0], #-814	; 0x32e
 130:	61657268 	cmnvs	r5, r8, ror #4
 134:	6f635f64 	svcvs	0x00635f64
 138:	5f006564 	svcpl	0x00006564
 13c:	4e55465f 	mrcmi	6, 2, r4, cr5, cr15, {2}
 140:	4f495443 	svcmi	0x00495443
 144:	005f5f4e 	subseq	r5, pc, lr, asr #30
 148:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 14c:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
 150:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
 154:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 158:	6978655f 	ldmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
 15c:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0x74
 160:	61735f67 	cmnvs	r3, r7, ror #30
 164:	615f6576 	cmpvs	pc, r6, ror r5	; <UNPREDICTABLE>
 168:	00616572 	rsbeq	r6, r1, r2, ror r5
 16c:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 170:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
 174:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
 178:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
 17c:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 180:	7200746e 	andvc	r7, r0, #1845493760	; 0x6e000000
 184:	745f6970 	ldrbvc	r6, [pc], #-2416	; 18c <_start-0x7e74>
 188:	61657268 	cmnvs	r5, r8, ror #4
 18c:	00745f64 	rsbseq	r5, r4, r4, ror #30
 190:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 194:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
 198:	72006d75 	andvc	r6, r0, #7488	; 0x1d40
 19c:	795f6970 	ldmdbvc	pc, {r4, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
 1a0:	646c6569 	strbtvs	r6, [ip], #-1385	; 0x569
 1a4:	7a697300 	bvc	1a5cdac <__bss_end__+0x1a51c3c>
 1a8:	70797465 	rsbsvc	r7, r9, r5, ror #8
 1ac:	6f6c0065 	svcvs	0x006c0065
 1b0:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
 1b4:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 1b8:	00746e69 	rsbseq	r6, r4, r9, ror #28
 1bc:	5f697072 	svcpl	0x00697072
 1c0:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 1c4:	73006461 	movwvc	r6, #1121	; 0x461
 1c8:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xf68
 1cc:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
 1d0:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 1d4:	5f323374 	svcpl	0x00323374
 1d8:	70720074 	rsbsvc	r0, r2, r4, ror r0
 1dc:	75635f69 	strbvc	r5, [r3, #-3945]!	; 0xf69
 1e0:	68745f72 	ldmdavs	r4!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 1e4:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 1e8:	616d6b00 	cmnvs	sp, r0, lsl #22
 1ec:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 1f0:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 1f4:	70720074 	rsbsvc	r0, r2, r4, ror r0
 1f8:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xf69
 1fc:	5f746573 	svcpl	0x00746573
 200:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 204:	705f5100 	subsvc	r5, pc, r0, lsl #2
 208:	00687375 	rsbeq	r7, r8, r5, ror r3
 20c:	2d697072 	stclcs	0, cr7, [r9, #-456]!	; 0xfffffe38
 210:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 214:	632e6461 	teqvs	lr, #1627389952	; 0x61000000
 218:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 21c:	696f6a5f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, r9, fp, sp, lr}^	; <UNPREDICTABLE>
 220:	7865006e 	stmdavc	r5!, {r1, r2, r3, r5, r6}^
 224:	6f637469 	svcvs	0x00637469
 228:	6e006564 	cfsh32vs	mvfx6, mvfx0, #52
 22c:	5f747865 	svcpl	0x00747865
 230:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 234:	6e006461 	cdpvs	4, 0, cr6, cr0, cr1, {3}
 238:	6e75725f 	mrcvs	2, 3, r7, cr5, cr15, {2}
 23c:	665f6e00 	ldrbvs	r6, [pc], -r0, lsl #28
 240:	00656572 	rsbeq	r6, r5, r2, ror r5
 244:	5f697072 	svcpl	0x00697072
 248:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 24c:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
 250:	6568635f 	strbvs	r6, [r8, #-863]!	; 0x35f
 254:	51006b63 	tstpl	r0, r3, ror #22
 258:	6c656e5f 	stclvs	14, cr6, [r5], #-380	; 0xfffffe84
 25c:	72006d65 	andvc	r6, r0, #6464	; 0x1940
 260:	695f6970 	ldmdbvs	pc, {r4, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
 264:	5f74696e 	svcpl	0x0074696e
 268:	6d617274 	sfmvs	f7, 2, [r1, #-464]!	; 0xfffffe30
 26c:	696c6f70 	stmdbvs	ip!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 270:	6b00656e 	blvs	19830 <__bss_end__+0xe6c0>
 274:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 278:	615f636f 	cmpvs	pc, pc, ror #6
 27c:	6e67696c 	cdpvs	9, 6, cr6, cr7, cr12, {3}
 280:	72006465 	andvc	r6, r0, #1694498816	; 0x65000000
 284:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
 288:	6b636174 	blvs	18d8860 <__bss_end__+0x18cd6f0>
 28c:	6568635f 	strbvs	r6, [r8, #-863]!	; 0x35f
 290:	66006b63 	strvs	r6, [r0], -r3, ror #22
 294:	71656572 	smcvc	22098	; 0x5652
 298:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 29c:	6178655f 	cmnvs	r8, pc, asr r5
 2a0:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 2a4:	7065656c 	rsbvc	r6, r5, ip, ror #10
 2a8:	655f5100 	ldrbvs	r5, [pc, #-256]	; 1b0 <_start-0x7e50>
 2ac:	7974706d 	ldmdbvc	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
 2b0:	705f5100 	subsvc	r5, pc, r0, lsl #2
 2b4:	7300706f 	movwvc	r7, #111	; 0x6f
 2b8:	64656863 	strbtvs	r6, [r5], #-2147	; 0x863
 2bc:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
 2c0:	7268745f 	rsbvc	r7, r8, #1593835520	; 0x5f000000
 2c4:	00646165 	rsbeq	r6, r4, r5, ror #2
 2c8:	6c696174 	stfvse	f6, [r9], #-464	; 0xfffffe30
 2cc:	5f687400 	svcpl	0x00687400
 2d0:	6f6c6c61 	svcvs	0x006c6c61
 2d4:	68740063 	ldmdavs	r4!, {r0, r1, r5, r6}^
 2d8:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0x65f
 2dc:	5f510065 	svcpl	0x00510065
 2e0:	65707061 	ldrbvs	r7, [r0, #-97]!	; 0x61
 2e4:	6800646e 	stmdavs	r0, {r1, r2, r3, r5, r6, sl, sp, lr}
 2e8:	00646165 	rsbeq	r6, r4, r5, ror #2
 2ec:	716e7572 	smcvc	59218	; 0xe752
 2f0:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 2f4:	7773635f 			; <UNDEFINED> instruction: 0x7773635f
 2f8:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
 2fc:	646c6f00 	strbtvs	r6, [ip], #-3840	; 0xf00
 300:	7268745f 	rsbvc	r7, r8, #1593835520	; 0x5f000000
 304:	00646165 	rsbeq	r6, r4, r5, ror #2
 308:	6c6c616e 	stfvse	f6, [ip], #-440	; 0xfffffe48
 30c:	6465636f 	strbtvs	r6, [r5], #-879	; 0x36f
 310:	72696300 	rsbvc	r6, r9, #0, 6
 314:	616c7563 	cmnvs	ip, r3, ror #10
 318:	00632e72 	rsbeq	r2, r3, r2, ror lr
 31c:	705f7163 	subsvc	r7, pc, r3, ror #2
 320:	6e5f706f 	cdpvs	0, 5, cr7, cr15, cr15, {3}
 324:	6c626e6f 	stclvs	14, cr6, [r2], #-444	; 0xfffffe44
 328:	006b636f 	rsbeq	r6, fp, pc, ror #6
 32c:	705f7163 	subsvc	r7, pc, r3, ror #2
 330:	6e5f706f 	cdpvs	0, 5, cr7, cr15, cr15, {3}
 334:	626f6e5f 	rsbvs	r6, pc, #1520	; 0x5f0
 338:	6f006b6c 	svcvs	0x00006b6c
 33c:	66726576 			; <UNDEFINED> instruction: 0x66726576
 340:	00776f6c 	rsbseq	r6, r7, ip, ror #30
 344:	5f657163 	svcpl	0x00657163
 348:	69730074 	ldmdbvs	r3!, {r2, r4, r5, r6}^
 34c:	745f657a 	ldrbvc	r6, [pc], #-1402	; 354 <_start-0x7cac>
 350:	5f716300 	svcpl	0x00716300
 354:	6b656570 	blvs	195991c <__bss_end__+0x194e7ac>
 358:	65006e5f 	strvs	r6, [r0, #-3679]	; 0xe5f
 35c:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 360:	61665f73 	smcvs	26099	; 0x65f3
 364:	5f6c6174 	svcpl	0x006c6174
 368:	71630070 	smcvc	12288	; 0x3000
 36c:	706f705f 	rsbvc	r7, pc, pc, asr r0	; <UNPREDICTABLE>
 370:	6d656d00 	stclvs	13, cr6, [r5, #-0]
 374:	00746573 	rsbseq	r6, r4, r3, ror r5
 378:	6e5f7163 	rdfvsez	f7, f7, f3
 37c:	63617073 	cmnvs	r1, #115	; 0x73
 380:	71630065 	cmnvc	r3, r5, rrx
 384:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 388:	71630074 	smcvc	12292	; 0x3004
 38c:	706f705f 	rsbvc	r7, pc, pc, asr r0	; <UNPREDICTABLE>
 390:	63006e5f 	movwvs	r6, #3679	; 0xe5f
 394:	75705f71 	ldrbvc	r5, [r0, #-3953]!	; 0xf71
 398:	63006873 	movwvs	r6, #2163	; 0x873
 39c:	75705f71 	ldrbvc	r5, [r0, #-3953]!	; 0xf71
 3a0:	6e5f6873 	mrcvs	8, 2, r6, cr15, cr3, {3}
 3a4:	5f716300 	svcpl	0x00716300
 3a8:	74706d65 	ldrbtvc	r6, [r0], #-3429	; 0xd65
 3ac:	65660079 	strbvs	r0, [r6, #-121]!	; 0x79
 3b0:	0065636e 	rsbeq	r6, r5, lr, ror #6
 3b4:	6e5f7163 	rdfvsez	f7, f7, f3
 3b8:	6d656c65 	stclvs	12, cr6, [r5, #-404]!	; 0xfffffe6c
 3bc:	625f6300 	subsvs	r6, pc, #0, 6
 3c0:	63006675 	movwvs	r6, #1653	; 0x675
 3c4:	75665f71 	strbvc	r5, [r6, #-3953]!	; 0xf71
 3c8:	63006c6c 	movwvs	r6, #3180	; 0xc6c
 3cc:	72705f71 	rsbsvc	r5, r0, #452	; 0x1c4
 3d0:	00746e69 	rsbseq	r6, r4, r9, ror #28
 3d4:	6f5f7163 	svcvs	0x005f7163
 3d8:	7163006b 	cmnvc	r3, fp, rrx
 3dc:	6c00745f 	cfstrsvs	mvf7, [r0], {95}	; 0x5f
 3e0:	2f636269 	svccs	0x00636269
 3e4:	736d656d 	cmnvc	sp, #457179136	; 0x1b400000
 3e8:	632e7465 	teqvs	lr, #1694498816	; 0x65000000
 3ec:	73552f00 	cmpvc	r5, #0, 30
 3f0:	2f737265 	svccs	0x00737265
 3f4:	61697262 	cmnvs	r9, r2, ror #4
 3f8:	6e756a6e 	vsubvs.f32	s13, s10, s29
 3fc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 400:	706f746b 	rsbvc	r7, pc, fp, ror #8
 404:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 408:	2f6c6f6f 	svccs	0x006c6f6f
 40c:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 410:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 414:	432f3032 	teqmi	pc, #50	; 0x32
 418:	30343153 	eorscc	r3, r4, r3, asr r1
 41c:	73632f45 	cmnvc	r3, #276	; 0x114
 420:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 424:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 428:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 28c <_start-0x7d74>
 42c:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 430:	675f5f00 	ldrbvs	r5, [pc, -r0, lsl #30]
 434:	5f63756e 	svcpl	0x0063756e
 438:	6c5f6176 	ldfvse	f6, [pc], {118}	; 0x76
 43c:	00747369 	rsbseq	r7, r4, r9, ror #6
 440:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 444:	6972702f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, ip, sp, lr}^
 448:	2e6b746e 	cdpcs	4, 6, cr7, cr11, cr14, {3}
 44c:	61760063 	cmnvs	r6, r3, rrx
 450:	6972705f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
 454:	006b746e 	rsbeq	r7, fp, lr, ror #8
 458:	61765f5f 	cmnvs	r6, pc, asr pc
 45c:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
 460:	72610074 	rsbvc	r0, r1, #116	; 0x74
 464:	5f007367 	svcpl	0x00007367
 468:	0070615f 	rsbseq	r6, r0, pc, asr r1
 46c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 470:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
 474:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
 478:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 47c:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 480:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
 484:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 488:	62696c00 	rsbvs	r6, r9, #0, 24
 48c:	75702f63 	ldrbvc	r2, [r0, #-3939]!	; 0xf63
 490:	61686374 	smcvs	34356	; 0x8634
 494:	00632e72 	rsbeq	r2, r3, r2, ror lr
 498:	5f697072 	svcpl	0x00697072
 49c:	5f746573 	svcpl	0x00746573
 4a0:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 4a4:	62696c00 	rsbvs	r6, r9, #0, 24
 4a8:	75702f63 	ldrbvc	r2, [r0, #-3939]!	; 0xf63
 4ac:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
 4b0:	746e6900 	strbtvc	r6, [lr], #-2304	; 0x900
 4b4:	616e7265 	cmnvs	lr, r5, ror #4
 4b8:	75705f6c 	ldrbvc	r5, [r0, #-3948]!	; 0xf6c
 4bc:	6e006b74 	vmovvs.16	d0[1], r6
 4c0:	705f6765 	subsvc	r6, pc, r5, ror #14
 4c4:	76657200 	strbtvc	r7, [r5], -r0, lsl #4
 4c8:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0x265
 4cc:	64736900 	ldrbtvs	r6, [r3], #-2304	; 0x900
 4d0:	74696769 	strbtvc	r6, [r9], #-1897	; 0x769
 4d4:	74757000 	ldrbtvc	r7, [r5], #-0
 4d8:	70665f73 	rsbvc	r5, r6, r3, ror pc
 4dc:	73616200 	cmnvc	r1, #0, 4
 4e0:	69730065 	ldmdbvs	r3!, {r0, r2, r5, r6}^
 4e4:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
 4e8:	6c00705f 	stcvs	0, cr7, [r0], {95}	; 0x5f
 4ec:	2f636269 	svccs	0x00636269
 4f0:	702d6176 	eorvc	r6, sp, r6, ror r1
 4f4:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 4f8:	00632e6b 	rsbeq	r2, r3, fp, ror #28
 4fc:	5f697072 	svcpl	0x00697072
 500:	5f746573 	svcpl	0x00746573
 504:	7074756f 	rsbsvc	r7, r4, pc, ror #10
 508:	77007475 	smlsdxvc	r0, r5, r4, r7
 50c:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
 510:	74757000 	ldrbtvc	r7, [r5], #-0
 514:	70665f63 	rsbvc	r5, r6, r3, ror #30
 518:	696d6500 	stmdbvs	sp!, {r8, sl, sp, lr}^
 51c:	70720074 	rsbsvc	r0, r2, r4, ror r0
 520:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xf69
 524:	746f6f62 	strbtvc	r6, [pc], #-3938	; 52c <_start-0x7ad4>
 528:	31736300 	cmncc	r3, r0, lsl #6
 52c:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 530:	2f637273 	svccs	0x00637273
 534:	61656c63 	cmnvs	r5, r3, ror #24
 538:	65722d6e 	ldrbvs	r2, [r2, #-3438]!	; 0xd6e
 53c:	746f6f62 	strbtvc	r6, [pc], #-3938	; 544 <_start-0x7abc>
 540:	6400632e 	strvs	r6, [r0], #-814	; 0x32e
 544:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 548:	00736d5f 	rsbseq	r6, r3, pc, asr sp
 54c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 550:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
 554:	5f77735f 	svcpl	0x0077735f
 558:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 55c:	00726168 	rsbseq	r6, r2, r8, ror #2
 560:	73625f5f 	cmnvc	r2, #380	; 0x17c
 564:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xf73
 568:	5f747261 	svcpl	0x00747261
 56c:	7362005f 	cmnvc	r2, #95	; 0x5f
 570:	6e655f73 	mcrvs	15, 3, r5, cr5, cr3, {3}
 574:	79630064 	stmdbvc	r3!, {r2, r5, r6}^
 578:	5f656c63 	svcpl	0x00656c63
 57c:	5f726570 	svcpl	0x00726570
 580:	00746962 	rsbseq	r6, r4, r2, ror #18
 584:	736e6f63 	cmnvc	lr, #396	; 0x18c
 588:	5f656c6f 	svcpl	0x00656c6f
 58c:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 590:	5f777300 	svcpl	0x00777300
 594:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 598:	6972705f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
 59c:	006b746e 	rsbeq	r7, fp, lr, ror #8
 5a0:	43545550 	cmpmi	r4, #80, 10	; 0x14000000
 5a4:	5053455f 	subspl	r4, r3, pc, asr r5
 5a8:	5241555f 	subpl	r5, r1, #398458880	; 0x17c00000
 5ac:	77730054 			; <UNDEFINED> instruction: 0x77730054
 5b0:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 5b4:	00745f74 	rsbseq	r5, r4, r4, ror pc
 5b8:	43545550 	cmpmi	r4, #80, 10	; 0x14000000
 5bc:	5f57535f 	svcpl	0x0057535f
 5c0:	54524155 	ldrbpl	r4, [r2], #-341	; 0x155
 5c4:	75616200 	strbvc	r6, [r1, #-512]!	; 0x200
 5c8:	55500064 	ldrbpl	r0, [r0, #-100]	; 0x64
 5cc:	485f4354 	ldmdami	pc, {r2, r4, r6, r8, r9, lr}^	; <UNPREDICTABLE>
 5d0:	41555f57 	cmpmi	r5, r7, asr pc
 5d4:	5f005452 	svcpl	0x00005452
 5d8:	61747363 	cmnvs	r4, r3, ror #6
 5dc:	75007472 	strvc	r7, [r0, #-1138]	; 0x472
 5e0:	5f747261 	svcpl	0x00747261
 5e4:	5f766564 	svcpl	0x00766564
 5e8:	77730074 			; <UNDEFINED> instruction: 0x77730074
 5ec:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 5f0:	75705f74 	ldrbvc	r5, [r0, #-3956]!	; 0xf74
 5f4:	75006374 	strvc	r6, [r0, #-884]	; 0x374
 5f8:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
 5fc:	6300745f 	movwvs	r7, #1119	; 0x45f
 600:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 604:	625f6c6f 	subsvs	r6, pc, #28416	; 0x6f00
 608:	745f6b6c 	ldrbvc	r6, [pc], #-2924	; 610 <_start-0x79f0>
 60c:	5f777300 	svcpl	0x00777300
 610:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 614:	5f626300 	svcpl	0x00626300
 618:	5f746567 	svcpl	0x00746567
 61c:	636f6c62 	cmnvs	pc, #25088	; 0x6200
 620:	5f5f006b 	svcpl	0x005f006b
 624:	5f737362 	svcpl	0x00737362
 628:	5f646e65 	svcpl	0x00646e65
 62c:	7363005f 	cmnvc	r3, #95	; 0x5f
 630:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 634:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 638:	7473632f 	ldrbtvc	r6, [r3], #-815	; 0x32f
 63c:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
 640:	6f630063 	svcvs	0x00630063
 644:	6c6f736e 	stclvs	3, cr7, [pc], #-440	; 494 <_start-0x7b6c>
 648:	65645f65 	strbvs	r5, [r4, #-3941]!	; 0xf65
 64c:	616d0076 	smcvs	53254	; 0xd006
 650:	00636967 	rsbeq	r6, r3, r7, ror #18
 654:	755f7461 	ldrbvc	r7, [pc, #-1121]	; 1fb <_start-0x7e05>
 658:	5f726573 	svcpl	0x00726573
 65c:	6576656c 	ldrbvs	r6, [r6, #-1388]!	; 0x56c
 660:	4d50006c 	ldclmi	0, cr0, [r0, #-432]	; 0xfffffe50
 664:	5341505f 	movtpl	r5, #4191	; 0x105f
 668:	524f5753 	subpl	r5, pc, #21757952	; 0x14c0000
 66c:	73630044 	cmnvc	r3, #68	; 0x44
 670:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 674:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 678:	6265722f 	rsbvs	r7, r5, #-268435454	; 0xf0000002
 67c:	2e746f6f 	cdpcs	15, 7, cr6, cr4, cr15, {3}
 680:	4d500063 	ldclmi	0, cr0, [r0, #-396]	; 0xfffffe74
 684:	5453525f 	ldrbpl	r5, [r3], #-607	; 0x25f
 688:	52575f43 	subspl	r5, r7, #268	; 0x10c
 68c:	5f474643 	svcpl	0x00474643
 690:	4c4c5546 	cfstr64mi	mvdx5, [ip], {70}	; 0x46
 694:	5345525f 	movtpl	r5, #21087	; 0x525f
 698:	50005445 	andpl	r5, r0, r5, asr #8
 69c:	44575f4d 	ldrbmi	r5, [r7], #-3917	; 0xf4d
 6a0:	7300474f 	movwvc	r4, #1871	; 0x74f
 6a4:	755f7465 	ldrbvc	r7, [pc, #-1125]	; 247 <_start-0x7db9>
 6a8:	5f726573 	svcpl	0x00726573
 6ac:	6576656c 	ldrbvs	r6, [r6, #-1388]!	; 0x56c
 6b0:	5550006c 	ldrbpl	r0, [r0, #-108]	; 0x6c
 6b4:	00323354 	eorseq	r3, r2, r4, asr r3
 6b8:	525f4d50 	subspl	r4, pc, #80, 26	; 0x1400
 6bc:	00435453 	subeq	r5, r3, r3, asr r4
 6c0:	72737063 	rsbsvc	r7, r3, #99	; 0x63
 6c4:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
 6c8:	675f7265 	ldrbvs	r7, [pc, -r5, ror #4]
 6cc:	755f7465 	ldrbvc	r7, [pc, #-1125]	; 26f <_start-0x7d91>
 6d0:	5f636573 	svcpl	0x00636573
 6d4:	00776172 	rsbseq	r6, r7, r2, ror r1
 6d8:	616c6564 	cmnvs	ip, r4, ror #10
 6dc:	65735f79 	ldrbvs	r5, [r3, #-3961]!	; 0xf79
 6e0:	73630063 	cmnvc	r3, #99	; 0x63
 6e4:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 6e8:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 6ec:	6d69742f 	cfstrdvs	mvd7, [r9, #-188]!	; 0xffffff44
 6f0:	632e7265 	teqvs	lr, #1342177286	; 0x50000006
 6f4:	54454700 	strbpl	r4, [r5], #-1792	; 0x700
 6f8:	74003233 	strvc	r3, [r0], #-563	; 0x233
 6fc:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
 700:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 704:	635f7961 	cmpvs	pc, #1589248	; 0x184000
 708:	656c6379 	strbvs	r6, [ip, #-889]!	; 0x379
 70c:	65640073 	strbvs	r0, [r4, #-115]!	; 0x73
 710:	5f79616c 	svcpl	0x0079616c
 714:	74007375 	strvc	r7, [r0], #-885	; 0x375
 718:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 71c:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 720:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0x55f
 724:	666b0063 	strbtvs	r0, [fp], -r3, rrx
 728:	5f656572 	svcpl	0x00656572
 72c:	006c6c61 	rsbeq	r6, ip, r1, ror #24
 730:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
 734:	5f64656e 	svcpl	0x0064656e
 738:	70616568 	rsbvc	r6, r1, r8, ror #10
 73c:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
 740:	2d796d00 	ldclcs	13, cr6, [r9, #-0]
 744:	2f637273 	svccs	0x00637273
 748:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
 74c:	2e636f6c 	cdpcs	15, 6, cr6, cr3, cr12, {3}
 750:	74730063 	ldrbtvc	r0, [r3], #-99	; 0x63
 754:	5f747261 	svcpl	0x00747261
 758:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
 75c:	00737365 	rsbseq	r7, r3, r5, ror #6
 760:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
 764:	6100705f 	qaddvs	r7, pc, r0	; <UNPREDICTABLE>
 768:	6e67696c 	cdpvs	9, 6, cr6, cr7, cr12, {3}
 76c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
 770:	756f7200 	strbvc	r7, [pc, #-512]!	; 578 <_start-0x7a88>
 774:	6465646e 	strbtvs	r6, [r5], #-1134	; 0x46e
 778:	79626e5f 	stmdbvc	r2!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
 77c:	00736574 	rsbseq	r6, r3, r4, ror r5
 780:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
 784:	5f636f6c 	svcpl	0x00636f6c
 788:	70616568 	rsbvc	r6, r1, r8, ror #10
 78c:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
 790:	616d6b00 	cmnvs	sp, r0, lsl #22
 794:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 798:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 79c:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xf74
 7a0:	74735f74 	ldrbtvc	r5, [r3], #-3956	; 0xf74
 7a4:	00747261 	rsbseq	r7, r4, r1, ror #4
 7a8:	615f6f74 	cmpvs	pc, r4, ror pc	; <UNPREDICTABLE>
 7ac:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 7b0:	00657461 	rsbeq	r7, r5, r1, ror #8
 7b4:	65685f5f 	strbvs	r5, [r8, #-3935]!	; 0xf5f
 7b8:	735f7061 	cmpvc	pc, #97	; 0x61
 7bc:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
 7c0:	63005f5f 	movwvs	r5, #3935	; 0xf5f
 7c4:	705f6379 	subsvc	r6, pc, r9, ror r3	; <UNPREDICTABLE>
 7c8:	625f7265 	subsvs	r7, pc, #1342177286	; 0x50000006
 7cc:	77007469 	strvc	r7, [r0, -r9, ror #8]
 7d0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
 7d4:	6379635f 	cmnvs	r9, #2080374785	; 0x7c000001
 7d8:	746e755f 	strbtvc	r7, [lr], #-1375	; 0x55f
 7dc:	73006c69 	movwvc	r6, #3177	; 0xc69
 7e0:	61755f77 	cmnvs	r5, r7, ror pc
 7e4:	675f7472 			; <UNDEFINED> instruction: 0x675f7472
 7e8:	5f637465 	svcpl	0x00637465
 7ec:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 7f0:	0074756f 	rsbseq	r7, r4, pc, ror #10
 7f4:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 89 <_start-0x7f77>
 7f8:	5f747261 	svcpl	0x00747261
 7fc:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
 800:	746e755f 	strbtvc	r7, [lr], #-1375	; 0x55f
 804:	73006c69 	movwvc	r6, #3177	; 0xc69
 808:	61755f77 	cmnvs	r5, r7, ror pc
 80c:	675f7472 			; <UNDEFINED> instruction: 0x675f7472
 810:	00637465 	rsbeq	r7, r3, r5, ror #8
 814:	69726564 	ldmdbvs	r2!, {r2, r5, r6, r8, sl, sp, lr}^
 818:	00646576 	rsbeq	r6, r4, r6, ror r5
 81c:	616c6564 	cmnvs	ip, r4, ror #10
 820:	636e5f79 	cmnvs	lr, #484	; 0x1e4
 824:	656c6379 	strbvs	r6, [ip, #-889]!	; 0x379
 828:	77730073 			; <UNDEFINED> instruction: 0x77730073
 82c:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 830:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
 834:	685f7469 	ldmdavs	pc, {r0, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 838:	65706c65 	ldrbvs	r6, [r0, #-3173]!	; 0xc65
 83c:	69740072 	ldmdbvs	r4!, {r1, r4, r5, r6}^
 840:	756f656d 	strbvc	r6, [pc, #-1389]!	; 2db <_start-0x7d25>
 844:	73755f74 	cmnvc	r5, #116, 30	; 0x1d0
 848:	73006365 	movwvc	r6, #869	; 0x365
 84c:	61755f77 	cmnvs	r5, r7, ror pc
 850:	705f7472 	subsvc	r7, pc, r2, ror r4	; <UNPREDICTABLE>
 854:	006b7475 	rsbeq	r7, fp, r5, ror r4
 858:	6f697067 	svcvs	0x00697067
 85c:	6165725f 	cmnvs	r5, pc, asr r2
 860:	796d0064 	stmdbvc	sp!, {r2, r5, r6}^
 864:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 868:	2d77732f 	ldclcs	3, cr7, [r7, #-188]!	; 0xffffff44
 86c:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 870:	6300632e 	movwvs	r6, #814	; 0x32e
 874:	5f726168 	svcpl	0x00726168
 878:	73006e69 	movwvc	r6, #3689	; 0xe69
 87c:	61755f77 	cmnvs	r5, r7, ror pc
 880:	675f7472 			; <UNDEFINED> instruction: 0x675f7472
 884:	5f737465 	svcpl	0x00737465
 888:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 88c:	0074756f 	rsbseq	r7, r4, pc, ror #10
 890:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xf5f
 894:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 898:	72775f6f 	rsbsvc	r5, r7, #444	; 0x1bc
 89c:	00657469 	rsbeq	r7, r5, r9, ror #8
 8a0:	63657375 	cmnvs	r5, #-738197503	; 0xd4000001
 8a4:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
 8a8:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
 8ac:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 8b0:	65735f6f 	ldrbvs	r5, [r3, #-3951]!	; 0xf6f
 8b4:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
 8b8:	00747570 	rsbseq	r7, r4, r0, ror r5
 8bc:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 151 <_start-0x7eaf>
 8c0:	5f747261 	svcpl	0x00747261
 8c4:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
 8c8:	746e755f 	strbtvc	r7, [lr], #-1375	; 0x55f
 8cc:	625f6c69 	subsvs	r6, pc, #26880	; 0x6900
 8d0:	67006b6c 	strvs	r6, [r0, -ip, ror #22]
 8d4:	5f6f6970 	svcpl	0x006f6970
 8d8:	5f746573 	svcpl	0x00746573
 8dc:	7074756f 	rsbsvc	r7, r4, pc, ror #10
 8e0:	77007475 	smlsdxvc	r0, r5, r4, r7
 8e4:	5f746961 	svcpl	0x00746961
 8e8:	69746e75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 8ec:	73755f6c 	cmnvc	r5, #108, 30	; 0x1b0
 8f0:	41006365 	tstmi	r0, r5, ror #6
 8f4:	4d5f5855 	ldclmi	8, cr5, [pc, #-340]	; 7a8 <_start-0x7858>
 8f8:	434d5f55 	movtmi	r5, #57173	; 0xdf55
 8fc:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xf52
 900:	55410047 	strbpl	r0, [r1, #-71]	; 0x47
 904:	554d5f58 	strbpl	r5, [sp, #-3928]	; 0xf58
 908:	5f4f495f 	svcpl	0x004f495f
 90c:	00474552 	subeq	r4, r7, r2, asr r5
 910:	5f585541 	svcpl	0x00585541
 914:	4d5f554d 	cfldr64mi	mvdx5, [pc, #-308]	; 7e8 <_start-0x7818>
 918:	525f5253 	subspl	r5, pc, #805306373	; 0x30000005
 91c:	47004745 	strmi	r4, [r0, -r5, asr #14]
 920:	5f4f4950 	svcpl	0x004f4950
 924:	434e5546 	movtmi	r5, #58694	; 0xe546
 928:	544c415f 	strbpl	r4, [ip], #-351	; 0x15f
 92c:	61750030 	cmnvs	r5, r0, lsr r0
 930:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
 934:	675f6e61 	ldrbvs	r6, [pc, -r1, ror #28]
 938:	00637465 	rsbeq	r7, r3, r5, ror #8
 93c:	5f585541 	svcpl	0x00585541
 940:	435f554d 	cmpmi	pc, #322961408	; 0x13400000
 944:	5f4c544e 	svcpl	0x004c544e
 948:	00474552 	subeq	r4, r7, r2, asr r5
 94c:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 950:	7361685f 	cmnvc	r1, #6225920	; 0x5f0000
 954:	7461645f 	strbtvc	r6, [r1], #-1119	; 0x45f
 958:	65640061 	strbvs	r0, [r4, #-97]!	; 0x61
 95c:	61625f76 	smcvs	9718	; 0x25f6
 960:	65697272 	strbvs	r7, [r9, #-626]!	; 0x272
 964:	50470072 	subpl	r0, r7, r2, ror r0
 968:	465f4f49 	ldrbmi	r4, [pc], -r9, asr #30
 96c:	5f434e55 	svcpl	0x00434e55
 970:	5054554f 	subspl	r5, r4, pc, asr #10
 974:	47005455 	smlsdmi	r0, r5, r4, r5
 978:	5f4f4950 	svcpl	0x004f4950
 97c:	434e5546 	movtmi	r5, #58694	; 0xe546
 980:	544c415f 	strbpl	r4, [ip], #-351	; 0x15f
 984:	50470031 	subpl	r0, r7, r1, lsr r0
 988:	465f4f49 	ldrbmi	r4, [pc], -r9, asr #30
 98c:	5f434e55 	svcpl	0x00434e55
 990:	32544c41 	subscc	r4, r4, #16640	; 0x4100
 994:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 998:	55465f4f 	strbpl	r5, [r6, #-3919]	; 0xf4f
 99c:	415f434e 	cmpmi	pc, lr, asr #6
 9a0:	0033544c 	eorseq	r5, r3, ip, asr #8
 9a4:	4f495047 	svcmi	0x00495047
 9a8:	4e55465f 	mrcmi	6, 2, r4, cr5, cr15, {2}
 9ac:	4c415f43 	mcrrmi	15, 4, r5, r1, cr3
 9b0:	41003554 	tstmi	r0, r4, asr r5
 9b4:	4d5f5855 	ldclmi	8, cr5, [pc, #-340]	; 868 <_start-0x7798>
 9b8:	45495f55 	strbmi	r5, [r9, #-3925]	; 0xf55
 9bc:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xf52
 9c0:	75700047 	ldrbvc	r0, [r0, #-71]!	; 0x47
 9c4:	00323374 	eorseq	r3, r2, r4, ror r3
 9c8:	5f585541 	svcpl	0x00585541
 9cc:	495f554d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, sl, ip, lr}^	; <UNPREDICTABLE>
 9d0:	525f5249 	subspl	r5, pc, #-1879048188	; 0x90000004
 9d4:	67004745 	strvs	r4, [r0, -r5, asr #14]
 9d8:	5f6f6970 	svcpl	0x006f6970
 9dc:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 9e0:	7500745f 	strvc	r7, [r0, #-1119]	; 0x45f
 9e4:	5f747261 	svcpl	0x00747261
 9e8:	5f6e6163 	svcpl	0x006e6163
 9ec:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 9f0:	58554100 	ldmdapl	r5, {r8, lr}^
 9f4:	414e455f 	cmpmi	lr, pc, asr r5
 9f8:	53454c42 	movtpl	r4, #23618	; 0x5c42
 9fc:	58554100 	ldmdapl	r5, {r8, lr}^
 a00:	5152495f 	cmppl	r2, pc, asr r9
 a04:	58554100 	ldmdapl	r5, {r8, lr}^
 a08:	5f554d5f 	svcpl	0x00554d5f
 a0c:	44554142 	ldrbmi	r4, [r5], #-322	; 0x142
 a10:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
 a14:	58554100 	ldmdapl	r5, {r8, lr}^
 a18:	5f554d5f 	svcpl	0x00554d5f
 a1c:	54415453 	strbpl	r5, [r1], #-1107	; 0x453
 a20:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
 a24:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 a28:	55465f4f 	strbpl	r5, [r6, #-3919]	; 0xf4f
 a2c:	415f434e 	cmpmi	pc, lr, asr #6
 a30:	0034544c 	eorseq	r5, r4, ip, asr #8
 a34:	6f697067 	svcvs	0x00697067
 a38:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
 a3c:	6e75665f 	mrcvs	6, 3, r6, cr5, cr15, {2}
 a40:	6f697463 	svcvs	0x00697463
 a44:	5541006e 	strbpl	r0, [r1, #-110]	; 0x6e
 a48:	554d5f58 	strbpl	r5, [sp, #-3928]	; 0xf58
 a4c:	5243535f 	subpl	r5, r3, #2080374785	; 0x7c000001
 a50:	48435441 	stmdami	r3, {r0, r6, sl, ip, lr}^
 a54:	2d796d00 	ldclcs	13, cr6, [r9, #-0]
 a58:	2f637273 	svccs	0x00637273
 a5c:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 a60:	4100632e 	tstmi	r0, lr, lsr #6
 a64:	4d5f5855 	ldclmi	8, cr5, [pc, #-340]	; 918 <_start-0x76e8>
 a68:	434c5f55 	movtmi	r5, #53077	; 0xcf55
 a6c:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xf52
 a70:	50470047 	subpl	r0, r7, r7, asr #32
 a74:	465f4f49 	ldrbmi	r4, [pc], -r9, asr #30
 a78:	5f434e55 	svcpl	0x00434e55
 a7c:	55504e49 	ldrbpl	r4, [r0, #-3657]	; 0xe49
 a80:	55410054 	strbpl	r0, [r1, #-84]	; 0x54
 a84:	554d5f58 	strbpl	r5, [sp, #-3928]	; 0xf58
 a88:	52534c5f 	subspl	r4, r3, #24320	; 0x5f00
 a8c:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
 a90:	72617500 	rsbvc	r7, r1, #0, 10
 a94:	65675f74 	strbvs	r5, [r7, #-3956]!	; 0xf74
 a98:	615f6374 	cmpvs	pc, r4, ror r3	; <UNPREDICTABLE>
 a9c:	636e7973 	cmnvs	lr, #1884160	; 0x1cc000
 aa0:	74656700 	strbtvc	r6, [r5], #-1792	; 0x700
 aa4:	67003233 	smladxvs	r0, r3, r2, r3
 aa8:	5f6f6970 	svcpl	0x006f6970
 aac:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
 ab0:	65645f74 	strbvs	r5, [r4, #-3956]!	; 0xf74
 ab4:	74636574 	strbtvc	r6, [r3], #-1396	; 0x574
 ab8:	47006465 	strmi	r6, [r0, -r5, ror #8]
 abc:	45534650 	ldrbmi	r4, [r3, #-1616]	; 0x650
 ac0:	4700324c 	strmi	r3, [r0, -ip, asr #4]
 ac4:	524c4350 	subpl	r4, ip, #80, 6	; 0x40000001
 ac8:	4e450030 	mcrmi	0, 2, r0, cr5, cr0, {1}
 acc:	454c4241 	strbmi	r4, [ip, #-577]	; 0x241
 ad0:	5152495f 	cmppl	r2, pc, asr r9
 ad4:	00325f53 	eorseq	r5, r2, r3, asr pc
 ad8:	675f7369 	ldrbvs	r7, [pc, -r9, ror #6]
 adc:	5f6f6970 	svcpl	0x006f6970
 ae0:	00746e69 	rsbseq	r6, r4, r9, ror #28
 ae4:	6f697067 	svcvs	0x00697067
 ae8:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
 aec:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
 af0:	2d796d00 	ldclcs	13, cr6, [r9, #-0]
 af4:	2f637273 	svccs	0x00637273
 af8:	6f697067 	svcvs	0x00697067
 afc:	6900632e 	stmdbvs	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
 b00:	6d5f746e 	cfldrdvs	mvd7, [pc, #-440]	; 950 <_start-0x76b0>
 b04:	006b7361 	rsbeq	r7, fp, r1, ror #6
 b08:	45535047 	ldrbmi	r5, [r3, #-71]	; 0x47
 b0c:	47003054 	smlsdmi	r0, r4, r0, r3
 b10:	54455350 	strbpl	r5, [r5], #-848	; 0x350
 b14:	65720031 	ldrbvs	r0, [r2, #-49]!	; 0x31
 b18:	74735f67 	ldrbtvc	r5, [r3], #-3943	; 0xf67
 b1c:	47007461 	strmi	r7, [r0, -r1, ror #8]
 b20:	56454c50 			; <UNDEFINED> instruction: 0x56454c50
 b24:	50470030 	subpl	r0, r7, r0, lsr r0
 b28:	3156454c 	cmpcc	r6, ip, asr #10
 b2c:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 b30:	65725f6f 	ldrbvs	r5, [r2, #-3951]!	; 0xf6f
 b34:	50470067 	subpl	r0, r7, r7, rrx
 b38:	4c455346 	mcrrmi	3, 4, r5, r5, cr6
 b3c:	50470030 	subpl	r0, r7, r0, lsr r0
 b40:	4c455346 	mcrrmi	3, 4, r5, r5, cr6
 b44:	50470031 	subpl	r0, r7, r1, lsr r0
 b48:	4c455346 	mcrrmi	3, 4, r5, r5, cr6
 b4c:	50470033 	subpl	r0, r7, r3, lsr r0
 b50:	4c455346 	mcrrmi	3, 4, r5, r5, cr6
 b54:	50470034 	subpl	r0, r7, r4, lsr r0
 b58:	4c455346 	mcrrmi	3, 4, r5, r5, cr6
 b5c:	70670035 	rsbvc	r0, r7, r5, lsr r0
 b60:	665f6f69 	ldrbvs	r6, [pc], -r9, ror #30
 b64:	306c6573 	rsbcc	r6, ip, r3, ror r5
 b68:	43504700 	cmpmi	r0, #0, 14
 b6c:	0031524c 	eorseq	r5, r1, ip, asr #4
 b70:	6f697067 	svcvs	0x00697067
 b74:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
 b78:	7369725f 	cmnvc	r9, #-268435451	; 0xf0000005
 b7c:	5f676e69 	svcpl	0x00676e69
 b80:	65676465 	strbvs	r6, [r7, #-1125]!	; 0x465
 b84:	52504700 	subspl	r4, r0, #0, 14
 b88:	00304e45 	eorseq	r4, r0, r5, asr #28
 b8c:	45525047 	ldrbmi	r5, [r2, #-71]	; 0x47
 b90:	6700314e 	strvs	r3, [r0, -lr, asr #2]
 b94:	5f6f6970 	svcpl	0x006f6970
 b98:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
 b9c:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 ba0:	00726165 	rsbseq	r6, r2, r5, ror #2
 ba4:	5f515249 	svcpl	0x00515249
 ba8:	444e4550 	strbmi	r4, [lr], #-1360	; 0x550
 bac:	5f474e49 	svcpl	0x00474e49
 bb0:	52490031 	subpl	r0, r9, #49	; 0x31
 bb4:	45505f51 	ldrbmi	r5, [r0, #-3921]	; 0xf51
 bb8:	4e49444e 	cdpmi	4, 4, cr4, cr9, cr14, {2}
 bbc:	00325f47 	eorseq	r5, r2, r7, asr #30
 bc0:	6d746962 	ldclvs	9, cr6, [r4, #-392]!	; 0xfffffe78
 bc4:	006b7361 	rsbeq	r7, fp, r1, ror #6
 bc8:	6f697067 	svcvs	0x00697067
 bcc:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
 bd0:	75660030 	strbvc	r0, [r6, #-48]!	; 0x30
 bd4:	4700636e 	strmi	r6, [r0, -lr, ror #6]
 bd8:	53444550 	movtpl	r4, #17744	; 0x4550
 bdc:	50470030 	subpl	r0, r7, r0, lsr r0
 be0:	31534445 	cmpcc	r3, r5, asr #8
 be4:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 be8:	65735f6f 	ldrbvs	r5, [r3, #-3951]!	; 0xf6f
 bec:	6e6f5f74 	mcrvs	15, 3, r5, cr15, cr4, {3}
 bf0:	46504700 	ldrbmi	r4, [r0], -r0, lsl #14
 bf4:	00304e45 	eorseq	r4, r0, r5, asr #28
 bf8:	45465047 	strbmi	r5, [r6, #-71]	; 0x47
 bfc:	6700314e 	strvs	r3, [r0, -lr, asr #2]
 c00:	5f6f6970 	svcpl	0x006f6970
 c04:	5f746e69 	svcpl	0x00746e69
 c08:	6c6c6166 	stfvse	f6, [ip], #-408	; 0xfffffe68
 c0c:	5f676e69 	svcpl	0x00676e69
 c10:	65676465 	strbvs	r6, [r7, #-1125]!	; 0x465
 c14:	67657200 	strbvs	r7, [r5, -r0, lsl #4]!
 c18:	6c65735f 	stclvs	3, cr7, [r5], #-380	; 0xfffffe84
 c1c:	00746365 	rsbseq	r6, r4, r5, ror #6
 c20:	6f697067 	svcvs	0x00697067
 c24:	726c635f 	rsbvc	r6, ip, #2080374785	; 0x7c000001
 c28:	62630030 	rsbvs	r0, r3, #48	; 0x30
 c2c:	77656e5f 			; <UNDEFINED> instruction: 0x77656e5f
 c30:	31736300 	cmncc	r3, r0, lsl #6
 c34:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 c38:	2f637273 	svccs	0x00637273
 c3c:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xf63
 c40:	2d6c6f72 	stclcs	15, cr6, [ip, #-456]!	; 0xfffffe38
 c44:	636f6c62 	cmnvs	pc, #25088	; 0x6200
 c48:	00632e6b 	rsbeq	r2, r3, fp, ror #28

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	00008010 	andeq	r8, r0, r0, lsl r0
  1c:	000000b8 	strheq	r0, [r0], -r8
  20:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
  24:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
  28:	180e4201 	stmdane	lr, {r0, r9, lr}
  2c:	0000001c 	andeq	r0, r0, ip, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	000080c8 	andeq	r8, r0, r8, asr #1
  38:	000000f8 	strdeq	r0, [r0], -r8
  3c:	83180e42 	tsthi	r8, #1056	; 0x420
  40:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
  44:	87038604 	strhi	r8, [r3, -r4, lsl #12]
  48:	00018e02 	andeq	r8, r1, r2, lsl #28
  4c:	0000000c 	andeq	r0, r0, ip
  50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  54:	7c020001 	stcvc	0, cr0, [r2], {1}
  58:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  5c:	0000000c 	andeq	r0, r0, ip
  60:	0000004c 	andeq	r0, r0, ip, asr #32
  64:	000081c0 	andeq	r8, r0, r0, asr #3
  68:	00000008 	andeq	r0, r0, r8
  6c:	0000000c 	andeq	r0, r0, ip
  70:	0000004c 	andeq	r0, r0, ip, asr #32
  74:	000081c8 	andeq	r8, r0, r8, asr #3
  78:	00000038 	andeq	r0, r0, r8, lsr r0
  7c:	0000000c 	andeq	r0, r0, ip
  80:	0000004c 	andeq	r0, r0, ip, asr #32
  84:	00008200 	andeq	r8, r0, r0, lsl #4
  88:	00000028 	andeq	r0, r0, r8, lsr #32
  8c:	00000014 	andeq	r0, r0, r4, lsl r0
  90:	0000004c 	andeq	r0, r0, ip, asr #32
  94:	00008228 	andeq	r8, r0, r8, lsr #4
  98:	00000018 	andeq	r0, r0, r8, lsl r0
  9c:	83080e42 	movwhi	r0, #36418	; 0x8e42
  a0:	00018e02 	andeq	r8, r1, r2, lsl #28
  a4:	00000014 	andeq	r0, r0, r4, lsl r0
  a8:	0000004c 	andeq	r0, r0, ip, asr #32
  ac:	00008240 	andeq	r8, r0, r0, asr #4
  b0:	00000084 	andeq	r0, r0, r4, lsl #1
  b4:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
  b8:	00018e02 	andeq	r8, r1, r2, lsl #28
  bc:	00000014 	andeq	r0, r0, r4, lsl r0
  c0:	0000004c 	andeq	r0, r0, ip, asr #32
  c4:	000082c4 	andeq	r8, r0, r4, asr #5
  c8:	00000098 	muleq	r0, r8, r0
  cc:	83080e42 	movwhi	r0, #36418	; 0x8e42
  d0:	00018e02 	andeq	r8, r1, r2, lsl #28
  d4:	00000014 	andeq	r0, r0, r4, lsl r0
  d8:	0000004c 	andeq	r0, r0, ip, asr #32
  dc:	0000835c 	andeq	r8, r0, ip, asr r3
  e0:	00000084 	andeq	r0, r0, r4, lsl #1
  e4:	83080e42 	movwhi	r0, #36418	; 0x8e42
  e8:	00018e02 	andeq	r8, r1, r2, lsl #28
  ec:	0000000c 	andeq	r0, r0, ip
  f0:	0000004c 	andeq	r0, r0, ip, asr #32
  f4:	000083e0 	andeq	r8, r0, r0, ror #7
  f8:	00000010 	andeq	r0, r0, r0, lsl r0
  fc:	00000018 	andeq	r0, r0, r8, lsl r0
 100:	0000004c 	andeq	r0, r0, ip, asr #32
 104:	000083f0 	strdeq	r8, [r0], -r0
 108:	0000004c 	andeq	r0, r0, ip, asr #32
 10c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 110:	86038504 	strhi	r8, [r3], -r4, lsl #10
 114:	00018e02 	andeq	r8, r1, r2, lsl #28
 118:	00000018 	andeq	r0, r0, r8, lsl r0
 11c:	0000004c 	andeq	r0, r0, ip, asr #32
 120:	0000843c 	andeq	r8, r0, ip, lsr r4
 124:	00000058 	andeq	r0, r0, r8, asr r0
 128:	83100e42 	tsthi	r0, #1056	; 0x420
 12c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 130:	00018e02 	andeq	r8, r1, r2, lsl #28
 134:	00000018 	andeq	r0, r0, r8, lsl r0
 138:	0000004c 	andeq	r0, r0, ip, asr #32
 13c:	00008494 	muleq	r0, r4, r4
 140:	00000050 	andeq	r0, r0, r0, asr r0
 144:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 148:	86038504 	strhi	r8, [r3], -r4, lsl #10
 14c:	00018e02 	andeq	r8, r1, r2, lsl #28
 150:	0000001c 	andeq	r0, r0, ip, lsl r0
 154:	0000004c 	andeq	r0, r0, ip, asr #32
 158:	000084e4 	andeq	r8, r0, r4, ror #9
 15c:	0000009c 	muleq	r0, ip, r0
 160:	84140e42 	ldrhi	r0, [r4], #-3650	; 0xe42
 164:	86048505 	strhi	r8, [r4], -r5, lsl #10
 168:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 16c:	280e4201 	stmdacs	lr, {r0, r9, lr}
 170:	00000014 	andeq	r0, r0, r4, lsl r0
 174:	0000004c 	andeq	r0, r0, ip, asr #32
 178:	00008580 	andeq	r8, r0, r0, lsl #11
 17c:	00000054 	andeq	r0, r0, r4, asr r0
 180:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 184:	00018e02 	andeq	r8, r1, r2, lsl #28
 188:	00000014 	andeq	r0, r0, r4, lsl r0
 18c:	0000004c 	andeq	r0, r0, ip, asr #32
 190:	000085d4 	ldrdeq	r8, [r0], -r4
 194:	0000002c 	andeq	r0, r0, ip, lsr #32
 198:	83080e42 	movwhi	r0, #36418	; 0x8e42
 19c:	00018e02 	andeq	r8, r1, r2, lsl #28
 1a0:	00000014 	andeq	r0, r0, r4, lsl r0
 1a4:	0000004c 	andeq	r0, r0, ip, asr #32
 1a8:	00008600 	andeq	r8, r0, r0, lsl #12
 1ac:	0000002c 	andeq	r0, r0, ip, lsr #32
 1b0:	83080e42 	movwhi	r0, #36418	; 0x8e42
 1b4:	00018e02 	andeq	r8, r1, r2, lsl #28
 1b8:	00000014 	andeq	r0, r0, r4, lsl r0
 1bc:	0000004c 	andeq	r0, r0, ip, asr #32
 1c0:	0000862c 	andeq	r8, r0, ip, lsr #12
 1c4:	0000002c 	andeq	r0, r0, ip, lsr #32
 1c8:	83080e42 	movwhi	r0, #36418	; 0x8e42
 1cc:	00018e02 	andeq	r8, r1, r2, lsl #28
 1d0:	0000000c 	andeq	r0, r0, ip
 1d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1d8:	7c020001 	stcvc	0, cr0, [r2], {1}
 1dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1e0:	00000018 	andeq	r0, r0, r8, lsl r0
 1e4:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 1e8:	000086c4 	andeq	r8, r0, r4, asr #13
 1ec:	00000080 	andeq	r0, r0, r0, lsl #1
 1f0:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 1f4:	42018e02 	andmi	r8, r1, #2, 28
 1f8:	0000180e 	andeq	r1, r0, lr, lsl #16
 1fc:	00000014 	andeq	r0, r0, r4, lsl r0
 200:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 204:	00008744 	andeq	r8, r0, r4, asr #14
 208:	00000044 	andeq	r0, r0, r4, asr #32
 20c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 210:	00018e02 	andeq	r8, r1, r2, lsl #28
 214:	00000018 	andeq	r0, r0, r8, lsl r0
 218:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 21c:	00008788 	andeq	r8, r0, r8, lsl #15
 220:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
 224:	83100e42 	tsthi	r0, #1056	; 0x420
 228:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 22c:	00018e02 	andeq	r8, r1, r2, lsl #28
 230:	00000018 	andeq	r0, r0, r8, lsl r0
 234:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 238:	0000893c 	andeq	r8, r0, ip, lsr r9
 23c:	0000006c 	andeq	r0, r0, ip, rrx
 240:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
 244:	86028503 	strhi	r8, [r2], -r3, lsl #10
 248:	00000001 	andeq	r0, r0, r1
 24c:	0000001c 	andeq	r0, r0, ip, lsl r0
 250:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 254:	000089a8 	andeq	r8, r0, r8, lsr #19
 258:	00000034 	andeq	r0, r0, r4, lsr r0
 25c:	83180e42 	tsthi	r8, #1056	; 0x420
 260:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
 264:	87038604 	strhi	r8, [r3, -r4, lsl #12]
 268:	00018e02 	andeq	r8, r1, r2, lsl #28
 26c:	00000018 	andeq	r0, r0, r8, lsl r0
 270:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 274:	000089dc 	ldrdeq	r8, [r0], -ip
 278:	00000058 	andeq	r0, r0, r8, asr r0
 27c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 280:	86038504 	strhi	r8, [r3], -r4, lsl #10
 284:	00018e02 	andeq	r8, r1, r2, lsl #28
 288:	00000018 	andeq	r0, r0, r8, lsl r0
 28c:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 290:	00008a34 	andeq	r8, r0, r4, lsr sl
 294:	000000a4 	andeq	r0, r0, r4, lsr #1
 298:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 29c:	86038504 	strhi	r8, [r3], -r4, lsl #10
 2a0:	00018e02 	andeq	r8, r1, r2, lsl #28
 2a4:	00000020 	andeq	r0, r0, r0, lsr #32
 2a8:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 2ac:	00008ad8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
 2b0:	00000124 	andeq	r0, r0, r4, lsr #2
 2b4:	84200e42 	strthi	r0, [r0], #-3650	; 0xe42
 2b8:	86078508 	strhi	r8, [r7], -r8, lsl #10
 2bc:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
 2c0:	8a038904 	bhi	e26d8 <__bss_end__+0xd7568>
 2c4:	00018e02 	andeq	r8, r1, r2, lsl #28
 2c8:	0000000c 	andeq	r0, r0, ip
 2cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2d0:	7c020001 	stcvc	0, cr0, [r2], {1}
 2d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2d8:	0000000c 	andeq	r0, r0, ip
 2dc:	000002c8 	andeq	r0, r0, r8, asr #5
 2e0:	00008cbc 			; <UNDEFINED> instruction: 0x00008cbc
 2e4:	00000020 	andeq	r0, r0, r0, lsr #32
 2e8:	0000000c 	andeq	r0, r0, ip
 2ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2f0:	7c020001 	stcvc	0, cr0, [r2], {1}
 2f4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2f8:	00000024 	andeq	r0, r0, r4, lsr #32
 2fc:	000002e8 	andeq	r0, r0, r8, ror #5
 300:	00008cdc 	ldrdeq	r8, [r0], -ip
 304:	00000058 	andeq	r0, r0, r8, asr r0
 308:	80100e42 	andshi	r0, r0, r2, asr #28
 30c:	82038104 	andhi	r8, r3, #4, 2
 310:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
 314:	07841c0e 	streq	r1, [r4, lr, lsl #24]
 318:	058e0685 	streq	r0, [lr, #1669]	; 0x685
 31c:	00280e42 	eoreq	r0, r8, r2, asr #28
 320:	0000000c 	andeq	r0, r0, ip
 324:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 328:	7c020001 	stcvc	0, cr0, [r2], {1}
 32c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 330:	00000014 	andeq	r0, r0, r4, lsl r0
 334:	00000320 	andeq	r0, r0, r0, lsr #6
 338:	00008d34 	andeq	r8, r0, r4, lsr sp
 33c:	00000014 	andeq	r0, r0, r4, lsl r0
 340:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 344:	00018e02 	andeq	r8, r1, r2, lsl #28
 348:	0000000c 	andeq	r0, r0, ip
 34c:	00000320 	andeq	r0, r0, r0, lsr #6
 350:	00008d48 	andeq	r8, r0, r8, asr #26
 354:	00000018 	andeq	r0, r0, r8, lsl r0
 358:	0000000c 	andeq	r0, r0, ip
 35c:	00000320 	andeq	r0, r0, r0, lsr #6
 360:	00008d60 	andeq	r8, r0, r0, ror #26
 364:	00000010 	andeq	r0, r0, r0, lsl r0
 368:	0000000c 	andeq	r0, r0, ip
 36c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 370:	7c020001 	stcvc	0, cr0, [r2], {1}
 374:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 378:	00000018 	andeq	r0, r0, r8, lsl r0
 37c:	00000368 	andeq	r0, r0, r8, ror #6
 380:	00008d70 	andeq	r8, r0, r0, ror sp
 384:	00000034 	andeq	r0, r0, r4, lsr r0
 388:	83100e42 	tsthi	r0, #1056	; 0x420
 38c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 390:	00018e02 	andeq	r8, r1, r2, lsl #28
 394:	0000000c 	andeq	r0, r0, ip
 398:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 39c:	7c020001 	stcvc	0, cr0, [r2], {1}
 3a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3a4:	0000000c 	andeq	r0, r0, ip
 3a8:	00000394 	muleq	r0, r4, r3
 3ac:	00008da4 	andeq	r8, r0, r4, lsr #27
 3b0:	00000014 	andeq	r0, r0, r4, lsl r0
 3b4:	0000000c 	andeq	r0, r0, ip
 3b8:	00000394 	muleq	r0, r4, r3
 3bc:	00008db8 			; <UNDEFINED> instruction: 0x00008db8
 3c0:	0000002c 	andeq	r0, r0, ip, lsr #32
 3c4:	0000000c 	andeq	r0, r0, ip
 3c8:	00000394 	muleq	r0, r4, r3
 3cc:	00008de4 	andeq	r8, r0, r4, ror #27
 3d0:	00000040 	andeq	r0, r0, r0, asr #32
 3d4:	00000020 	andeq	r0, r0, r0, lsr #32
 3d8:	00000394 	muleq	r0, r4, r3
 3dc:	00008e24 	andeq	r8, r0, r4, lsr #28
 3e0:	0000019c 	muleq	r0, ip, r1
 3e4:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 3e8:	86058506 	strhi	r8, [r5], -r6, lsl #10
 3ec:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 3f0:	42018e02 	andmi	r8, r1, #2, 28
 3f4:	0000580e 	andeq	r5, r0, lr, lsl #16
 3f8:	00000014 	andeq	r0, r0, r4, lsl r0
 3fc:	00000394 	muleq	r0, r4, r3
 400:	00008fc0 	andeq	r8, r0, r0, asr #31
 404:	00000054 	andeq	r0, r0, r4, asr r0
 408:	83080e42 	movwhi	r0, #36418	; 0x8e42
 40c:	00018e02 	andeq	r8, r1, r2, lsl #28
 410:	00000028 	andeq	r0, r0, r8, lsr #32
 414:	00000394 	muleq	r0, r4, r3
 418:	00009014 	andeq	r9, r0, r4, lsl r0
 41c:	00000288 	andeq	r0, r0, r8, lsl #5
 420:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
 424:	86088509 	strhi	r8, [r8], -r9, lsl #10
 428:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
 42c:	8a048905 	bhi	122848 <__bss_end__+0x1176d8>
 430:	8e028b03 	vmlahi.f64	d8, d2, d3
 434:	b00e4201 	andlt	r4, lr, r1, lsl #4
 438:	00000001 	andeq	r0, r0, r1
 43c:	0000000c 	andeq	r0, r0, ip
 440:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 444:	7c020001 	stcvc	0, cr0, [r2], {1}
 448:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 44c:	00000014 	andeq	r0, r0, r4, lsl r0
 450:	0000043c 	andeq	r0, r0, ip, lsr r4
 454:	0000929c 	muleq	r0, ip, r2
 458:	00000028 	andeq	r0, r0, r8, lsr #32
 45c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 460:	00018e02 	andeq	r8, r1, r2, lsl #28
 464:	0000000c 	andeq	r0, r0, ip
 468:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 46c:	7c020001 	stcvc	0, cr0, [r2], {1}
 470:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 474:	00000014 	andeq	r0, r0, r4, lsl r0
 478:	00000464 	andeq	r0, r0, r4, ror #8
 47c:	000092c4 	andeq	r9, r0, r4, asr #5
 480:	00000020 	andeq	r0, r0, r0, lsr #32
 484:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 488:	00018e02 	andeq	r8, r1, r2, lsl #28
 48c:	00000014 	andeq	r0, r0, r4, lsl r0
 490:	00000464 	andeq	r0, r0, r4, ror #8
 494:	000092e4 	andeq	r9, r0, r4, ror #5
 498:	00000090 	muleq	r0, r0, r0
 49c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 4a0:	00018e02 	andeq	r8, r1, r2, lsl #28
 4a4:	0000000c 	andeq	r0, r0, ip
 4a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4ac:	7c020001 	stcvc	0, cr0, [r2], {1}
 4b0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4b4:	0000000c 	andeq	r0, r0, ip
 4b8:	000004a4 	andeq	r0, r0, r4, lsr #9
 4bc:	00009374 	andeq	r9, r0, r4, ror r3
 4c0:	00000018 	andeq	r0, r0, r8, lsl r0
 4c4:	0000000c 	andeq	r0, r0, ip
 4c8:	000004a4 	andeq	r0, r0, r4, lsr #9
 4cc:	0000938c 	andeq	r9, r0, ip, lsl #7
 4d0:	00000014 	andeq	r0, r0, r4, lsl r0
 4d4:	00000014 	andeq	r0, r0, r4, lsl r0
 4d8:	000004a4 	andeq	r0, r0, r4, lsr #9
 4dc:	000093a0 	andeq	r9, r0, r0, lsr #7
 4e0:	00000048 	andeq	r0, r0, r8, asr #32
 4e4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 4e8:	00018e02 	andeq	r8, r1, r2, lsl #28
 4ec:	0000000c 	andeq	r0, r0, ip
 4f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4f4:	7c020001 	stcvc	0, cr0, [r2], {1}
 4f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4fc:	0000000c 	andeq	r0, r0, ip
 500:	000004ec 	andeq	r0, r0, ip, ror #9
 504:	000093e8 	andeq	r9, r0, r8, ror #7
 508:	0000001c 	andeq	r0, r0, ip, lsl r0
 50c:	00000014 	andeq	r0, r0, r4, lsl r0
 510:	000004ec 	andeq	r0, r0, ip, ror #9
 514:	00009404 	andeq	r9, r0, r4, lsl #8
 518:	00000014 	andeq	r0, r0, r4, lsl r0
 51c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 520:	00018e02 	andeq	r8, r1, r2, lsl #28
 524:	00000014 	andeq	r0, r0, r4, lsl r0
 528:	000004ec 	andeq	r0, r0, ip, ror #9
 52c:	00009418 	andeq	r9, r0, r8, lsl r4
 530:	0000000c 	andeq	r0, r0, ip
 534:	83080e42 	movwhi	r0, #36418	; 0x8e42
 538:	00018e02 	andeq	r8, r1, r2, lsl #28
 53c:	00000018 	andeq	r0, r0, r8, lsl r0
 540:	000004ec 	andeq	r0, r0, ip, ror #9
 544:	00009424 	andeq	r9, r0, r4, lsr #8
 548:	00000024 	andeq	r0, r0, r4, lsr #32
 54c:	83100e42 	tsthi	r0, #1056	; 0x420
 550:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 554:	00018e02 	andeq	r8, r1, r2, lsl #28
 558:	00000014 	andeq	r0, r0, r4, lsl r0
 55c:	000004ec 	andeq	r0, r0, ip, ror #9
 560:	00009448 	andeq	r9, r0, r8, asr #8
 564:	00000014 	andeq	r0, r0, r4, lsl r0
 568:	83080e42 	movwhi	r0, #36418	; 0x8e42
 56c:	00018e02 	andeq	r8, r1, r2, lsl #28
 570:	00000014 	andeq	r0, r0, r4, lsl r0
 574:	000004ec 	andeq	r0, r0, ip, ror #9
 578:	0000945c 	andeq	r9, r0, ip, asr r4
 57c:	00000014 	andeq	r0, r0, r4, lsl r0
 580:	83080e42 	movwhi	r0, #36418	; 0x8e42
 584:	00018e02 	andeq	r8, r1, r2, lsl #28
 588:	0000000c 	andeq	r0, r0, ip
 58c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 590:	7c020001 	stcvc	0, cr0, [r2], {1}
 594:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 598:	00000018 	andeq	r0, r0, r8, lsl r0
 59c:	00000588 	andeq	r0, r0, r8, lsl #11
 5a0:	00009470 	andeq	r9, r0, r0, ror r4
 5a4:	00000074 	andeq	r0, r0, r4, ror r0
 5a8:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 5ac:	86038504 	strhi	r8, [r3], -r4, lsl #10
 5b0:	00018e02 	andeq	r8, r1, r2, lsl #28
 5b4:	00000014 	andeq	r0, r0, r4, lsl r0
 5b8:	00000588 	andeq	r0, r0, r8, lsl #11
 5bc:	000094e4 	andeq	r9, r0, r4, ror #9
 5c0:	0000009c 	muleq	r0, ip, r0
 5c4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 5c8:	00018e02 	andeq	r8, r1, r2, lsl #28
 5cc:	00000014 	andeq	r0, r0, r4, lsl r0
 5d0:	00000588 	andeq	r0, r0, r8, lsl #11
 5d4:	00009580 	andeq	r9, r0, r0, lsl #11
 5d8:	0000005c 	andeq	r0, r0, ip, asr r0
 5dc:	83080e42 	movwhi	r0, #36418	; 0x8e42
 5e0:	00018e02 	andeq	r8, r1, r2, lsl #28
 5e4:	0000000c 	andeq	r0, r0, ip
 5e8:	00000588 	andeq	r0, r0, r8, lsl #11
 5ec:	000095dc 	ldrdeq	r9, [r0], -ip
 5f0:	00000018 	andeq	r0, r0, r8, lsl r0
 5f4:	0000000c 	andeq	r0, r0, ip
 5f8:	00000588 	andeq	r0, r0, r8, lsl #11
 5fc:	000095f4 	strdeq	r9, [r0], -r4
 600:	00000010 	andeq	r0, r0, r0, lsl r0
 604:	00000014 	andeq	r0, r0, r4, lsl r0
 608:	00000588 	andeq	r0, r0, r8, lsl #11
 60c:	00009604 	andeq	r9, r0, r4, lsl #12
 610:	00000054 	andeq	r0, r0, r4, asr r0
 614:	83080e42 	movwhi	r0, #36418	; 0x8e42
 618:	00018e02 	andeq	r8, r1, r2, lsl #28
 61c:	0000000c 	andeq	r0, r0, ip
 620:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 624:	7c020001 	stcvc	0, cr0, [r2], {1}
 628:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 62c:	0000001c 	andeq	r0, r0, ip, lsl r0
 630:	0000061c 	andeq	r0, r0, ip, lsl r6
 634:	00009658 	andeq	r9, r0, r8, asr r6
 638:	00000154 	andeq	r0, r0, r4, asr r1
 63c:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 640:	86058506 	strhi	r8, [r5], -r6, lsl #10
 644:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 648:	00018e02 	andeq	r8, r1, r2, lsl #28
 64c:	00000020 	andeq	r0, r0, r0, lsr #32
 650:	0000061c 	andeq	r0, r0, ip, lsl r6
 654:	000097ac 	andeq	r9, r0, ip, lsr #15
 658:	000001c8 	andeq	r0, r0, r8, asr #3
 65c:	83200e42 	teqhi	r0, #1056	; 0x420
 660:	85078408 	strhi	r8, [r7, #-1032]	; 0x408
 664:	87058606 	strhi	r8, [r5, -r6, lsl #12]
 668:	89038804 	stmdbhi	r3, {r2, fp, pc}
 66c:	00018e02 	andeq	r8, r1, r2, lsl #28
 670:	00000020 	andeq	r0, r0, r0, lsr #32
 674:	0000061c 	andeq	r0, r0, ip, lsl r6
 678:	00009974 	andeq	r9, r0, r4, ror r9
 67c:	00000090 	muleq	r0, r0, r0
 680:	84200e42 	strthi	r0, [r0], #-3650	; 0xe42
 684:	86078508 	strhi	r8, [r7], -r8, lsl #10
 688:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
 68c:	8a038904 	bhi	e2aa4 <__bss_end__+0xd7934>
 690:	00018e02 	andeq	r8, r1, r2, lsl #28
 694:	0000001c 	andeq	r0, r0, ip, lsl r0
 698:	0000061c 	andeq	r0, r0, ip, lsl r6
 69c:	00009a04 	andeq	r9, r0, r4, lsl #20
 6a0:	0000007c 	andeq	r0, r0, ip, ror r0
 6a4:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 6a8:	86058506 	strhi	r8, [r5], -r6, lsl #10
 6ac:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 6b0:	00018e02 	andeq	r8, r1, r2, lsl #28
 6b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 6b8:	0000061c 	andeq	r0, r0, ip, lsl r6
 6bc:	00009a80 	andeq	r9, r0, r0, lsl #21
 6c0:	000000c0 	andeq	r0, r0, r0, asr #1
 6c4:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 6c8:	86058506 	strhi	r8, [r5], -r6, lsl #10
 6cc:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 6d0:	00018e02 	andeq	r8, r1, r2, lsl #28
 6d4:	00000014 	andeq	r0, r0, r4, lsl r0
 6d8:	0000061c 	andeq	r0, r0, ip, lsl r6
 6dc:	00009b40 	andeq	r9, r0, r0, asr #22
 6e0:	0000003c 	andeq	r0, r0, ip, lsr r0
 6e4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 6e8:	00018e02 	andeq	r8, r1, r2, lsl #28
 6ec:	00000018 	andeq	r0, r0, r8, lsl r0
 6f0:	0000061c 	andeq	r0, r0, ip, lsl r6
 6f4:	00009b7c 	andeq	r9, r0, ip, ror fp
 6f8:	0000002c 	andeq	r0, r0, ip, lsr #32
 6fc:	83100e42 	tsthi	r0, #1056	; 0x420
 700:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 704:	00018e02 	andeq	r8, r1, r2, lsl #28
 708:	00000024 	andeq	r0, r0, r4, lsr #32
 70c:	0000061c 	andeq	r0, r0, ip, lsl r6
 710:	00009ba8 	andeq	r9, r0, r8, lsr #23
 714:	00000084 	andeq	r0, r0, r4, lsl #1
 718:	810c0e42 	tsthi	ip, r2, asr #28
 71c:	83028203 	movwhi	r8, #8707	; 0x2203
 720:	180e4201 	stmdane	lr, {r0, r9, lr}
 724:	05850684 	streq	r0, [r5, #1668]	; 0x684
 728:	0e42048e 	cdpeq	4, 4, cr0, cr2, cr14, {4}
 72c:	000003e8 	andeq	r0, r0, r8, ror #7
 730:	00000014 	andeq	r0, r0, r4, lsl r0
 734:	0000061c 	andeq	r0, r0, ip, lsl r6
 738:	00009c2c 	andeq	r9, r0, ip, lsr #24
 73c:	0000004c 	andeq	r0, r0, ip, asr #32
 740:	8e040e42 	cdphi	14, 0, cr0, cr4, cr2, {2}
 744:	100e4201 	andne	r4, lr, r1, lsl #4
 748:	0000000c 	andeq	r0, r0, ip
 74c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 750:	7c020001 	stcvc	0, cr0, [r2], {1}
 754:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 758:	00000018 	andeq	r0, r0, r8, lsl r0
 75c:	00000748 	andeq	r0, r0, r8, asr #14
 760:	00009c78 	andeq	r9, r0, r8, ror ip
 764:	0000009c 	muleq	r0, ip, r0
 768:	83100e42 	tsthi	r0, #1056	; 0x420
 76c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 770:	00018e02 	andeq	r8, r1, r2, lsl #28
 774:	00000014 	andeq	r0, r0, r4, lsl r0
 778:	00000748 	andeq	r0, r0, r8, asr #14
 77c:	00009d14 	andeq	r9, r0, r4, lsl sp
 780:	0000001c 	andeq	r0, r0, ip, lsl r0
 784:	83080e42 	movwhi	r0, #36418	; 0x8e42
 788:	00018e02 	andeq	r8, r1, r2, lsl #28
 78c:	00000014 	andeq	r0, r0, r4, lsl r0
 790:	00000748 	andeq	r0, r0, r8, asr #14
 794:	00009d30 	andeq	r9, r0, r0, lsr sp
 798:	00000028 	andeq	r0, r0, r8, lsr #32
 79c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 7a0:	00018e02 	andeq	r8, r1, r2, lsl #28
 7a4:	00000014 	andeq	r0, r0, r4, lsl r0
 7a8:	00000748 	andeq	r0, r0, r8, asr #14
 7ac:	00009d58 	andeq	r9, r0, r8, asr sp
 7b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7b4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 7b8:	00018e02 	andeq	r8, r1, r2, lsl #28
 7bc:	00000014 	andeq	r0, r0, r4, lsl r0
 7c0:	00000748 	andeq	r0, r0, r8, asr #14
 7c4:	00009d74 	andeq	r9, r0, r4, ror sp
 7c8:	0000002c 	andeq	r0, r0, ip, lsr #32
 7cc:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 7d0:	00018e02 	andeq	r8, r1, r2, lsl #28
 7d4:	00000014 	andeq	r0, r0, r4, lsl r0
 7d8:	00000748 	andeq	r0, r0, r8, asr #14
 7dc:	00009da0 	andeq	r9, r0, r0, lsr #27
 7e0:	0000000c 	andeq	r0, r0, ip
 7e4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 7e8:	00018e02 	andeq	r8, r1, r2, lsl #28
 7ec:	00000014 	andeq	r0, r0, r4, lsl r0
 7f0:	00000748 	andeq	r0, r0, r8, asr #14
 7f4:	00009dac 	andeq	r9, r0, ip, lsr #27
 7f8:	00000020 	andeq	r0, r0, r0, lsr #32
 7fc:	83080e42 	movwhi	r0, #36418	; 0x8e42
 800:	00018e02 	andeq	r8, r1, r2, lsl #28
 804:	0000000c 	andeq	r0, r0, ip
 808:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 80c:	7c020001 	stcvc	0, cr0, [r2], {1}
 810:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 814:	00000018 	andeq	r0, r0, r8, lsl r0
 818:	00000804 	andeq	r0, r0, r4, lsl #16
 81c:	00009e30 	andeq	r9, r0, r0, lsr lr
 820:	000000d4 	ldrdeq	r0, [r0], -r4
 824:	83100e42 	tsthi	r0, #1056	; 0x420
 828:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 82c:	00018e02 	andeq	r8, r1, r2, lsl #28
 830:	00000014 	andeq	r0, r0, r4, lsl r0
 834:	00000804 	andeq	r0, r0, r4, lsl #16
 838:	00009f04 	andeq	r9, r0, r4, lsl #30
 83c:	00000038 	andeq	r0, r0, r8, lsr r0
 840:	83080e42 	movwhi	r0, #36418	; 0x8e42
 844:	00018e02 	andeq	r8, r1, r2, lsl #28
 848:	00000014 	andeq	r0, r0, r4, lsl r0
 84c:	00000804 	andeq	r0, r0, r4, lsl #16
 850:	00009f3c 	andeq	r9, r0, ip, lsr pc
 854:	00000038 	andeq	r0, r0, r8, lsr r0
 858:	83080e42 	movwhi	r0, #36418	; 0x8e42
 85c:	00018e02 	andeq	r8, r1, r2, lsl #28
 860:	00000018 	andeq	r0, r0, r8, lsl r0
 864:	00000804 	andeq	r0, r0, r4, lsl #16
 868:	00009f74 	andeq	r9, r0, r4, ror pc
 86c:	000000cc 	andeq	r0, r0, ip, asr #1
 870:	83100e42 	tsthi	r0, #1056	; 0x420
 874:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 878:	00018e02 	andeq	r8, r1, r2, lsl #28
 87c:	00000014 	andeq	r0, r0, r4, lsl r0
 880:	00000804 	andeq	r0, r0, r4, lsl #16
 884:	0000a040 	andeq	sl, r0, r0, asr #32
 888:	0000004c 	andeq	r0, r0, ip, asr #32
 88c:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 890:	00018e02 	andeq	r8, r1, r2, lsl #28
 894:	00000014 	andeq	r0, r0, r4, lsl r0
 898:	00000804 	andeq	r0, r0, r4, lsl #16
 89c:	0000a08c 	andeq	sl, r0, ip, lsl #1
 8a0:	00000024 	andeq	r0, r0, r4, lsr #32
 8a4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 8a8:	00018e02 	andeq	r8, r1, r2, lsl #28
 8ac:	00000018 	andeq	r0, r0, r8, lsl r0
 8b0:	00000804 	andeq	r0, r0, r4, lsl #16
 8b4:	0000a0b0 	strheq	sl, [r0], -r0
 8b8:	000000d8 	ldrdeq	r0, [r0], -r8
 8bc:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 8c0:	86038504 	strhi	r8, [r3], -r4, lsl #10
 8c4:	00018e02 	andeq	r8, r1, r2, lsl #28
 8c8:	00000014 	andeq	r0, r0, r4, lsl r0
 8cc:	00000804 	andeq	r0, r0, r4, lsl #16
 8d0:	0000a188 	andeq	sl, r0, r8, lsl #3
 8d4:	0000002c 	andeq	r0, r0, ip, lsr #32
 8d8:	83080e42 	movwhi	r0, #36418	; 0x8e42
 8dc:	00018e02 	andeq	r8, r1, r2, lsl #28
 8e0:	00000018 	andeq	r0, r0, r8, lsl r0
 8e4:	00000804 	andeq	r0, r0, r4, lsl #16
 8e8:	0000a1b4 			; <UNDEFINED> instruction: 0x0000a1b4
 8ec:	00000084 	andeq	r0, r0, r4, lsl #1
 8f0:	83100e42 	tsthi	r0, #1056	; 0x420
 8f4:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 8f8:	00018e02 	andeq	r8, r1, r2, lsl #28
 8fc:	00000018 	andeq	r0, r0, r8, lsl r0
 900:	00000804 	andeq	r0, r0, r4, lsl #16
 904:	0000a238 	andeq	sl, r0, r8, lsr r2
 908:	00000084 	andeq	r0, r0, r4, lsl #1
 90c:	83100e42 	tsthi	r0, #1056	; 0x420
 910:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 914:	00018e02 	andeq	r8, r1, r2, lsl #28
 918:	00000014 	andeq	r0, r0, r4, lsl r0
 91c:	00000804 	andeq	r0, r0, r4, lsl #16
 920:	0000a2bc 			; <UNDEFINED> instruction: 0x0000a2bc
 924:	00000084 	andeq	r0, r0, r4, lsl #1
 928:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 92c:	00018e02 	andeq	r8, r1, r2, lsl #28
 930:	00000014 	andeq	r0, r0, r4, lsl r0
 934:	00000804 	andeq	r0, r0, r4, lsl #16
 938:	0000a340 	andeq	sl, r0, r0, asr #6
 93c:	00000058 	andeq	r0, r0, r8, asr r0
 940:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 944:	00018e02 	andeq	r8, r1, r2, lsl #28
 948:	0000000c 	andeq	r0, r0, ip
 94c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 950:	7c020001 	stcvc	0, cr0, [r2], {1}
 954:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 958:	00000014 	andeq	r0, r0, r4, lsl r0
 95c:	00000948 	andeq	r0, r0, r8, asr #18
 960:	0000a398 	muleq	r0, r8, r3
 964:	00000028 	andeq	r0, r0, r8, lsr #32
 968:	83080e42 	movwhi	r0, #36418	; 0x8e42
 96c:	00018e02 	andeq	r8, r1, r2, lsl #28
 970:	0000000c 	andeq	r0, r0, ip
 974:	00000948 	andeq	r0, r0, r8, asr #18
 978:	0000a3c0 	andeq	sl, r0, r0, asr #7
 97c:	00000028 	andeq	r0, r0, r8, lsr #32
