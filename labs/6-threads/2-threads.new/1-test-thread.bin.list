
1-test-thread.bin.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e3a0d302 	mov	sp, #134217728	; 0x8000000
    8004:	e3a0b000 	mov	fp, #0
    8008:	eb000484 	bl	9220 <_cstart>
    800c:	eb00049b 	bl	9280 <rpi_reboot>

00008010 <thread_code>:
#include "rpi-thread.h"

static unsigned thread_count, thread_sum;

// trivial first thread: does not block, explicitly calls exit.
static void thread_code(void *arg) {
    8010:	e92d4030 	push	{r4, r5, lr}
    8014:	e24dd00c 	sub	sp, sp, #12
    8018:	e1a05000 	mov	r5, r0
    unsigned *x = arg;

    // check tid
    unsigned tid = rpi_cur_thread()->tid;
    801c:	eb0000e5 	bl	83b8 <rpi_cur_thread>
    8020:	e5904044 	ldr	r4, [r0, #68]	; 0x44
	printk("in thread %p, with %x\n", tid, *x);
    8024:	e59f007c 	ldr	r0, [pc, #124]	; 80a8 <thread_code+0x98>
    8028:	e1a01004 	mov	r1, r4
    802c:	e5952000 	ldr	r2, [r5]
    8030:	eb000311 	bl	8c7c <printk>
    demand(rpi_cur_thread()->tid == *x+1, 
    8034:	eb0000df 	bl	83b8 <rpi_cur_thread>
    8038:	e5902044 	ldr	r2, [r0, #68]	; 0x44
    803c:	e5953000 	ldr	r3, [r5]
    8040:	e2833001 	add	r3, r3, #1
    8044:	e1520003 	cmp	r2, r3
    8048:	0a000007 	beq	806c <thread_code+0x5c>
    804c:	e58d4000 	str	r4, [sp]
    8050:	e58d3004 	str	r3, [sp, #4]
    8054:	e59f0050 	ldr	r0, [pc, #80]	; 80ac <thread_code+0x9c>
    8058:	e59f1050 	ldr	r1, [pc, #80]	; 80b0 <thread_code+0xa0>
    805c:	e59f2050 	ldr	r2, [pc, #80]	; 80b4 <thread_code+0xa4>
    8060:	e3a0301a 	mov	r3, #26
    8064:	eb000304 	bl	8c7c <printk>
    8068:	eb000484 	bl	9280 <rpi_reboot>
                "expected %d, have %d\n", tid,*x+1);

    // check yield.
    rpi_yield();
    806c:	eb0000fe 	bl	846c <rpi_yield>
	thread_count ++;
    8070:	e59f4040 	ldr	r4, [pc, #64]	; 80b8 <thread_code+0xa8>
    8074:	e5943000 	ldr	r3, [r4]
    8078:	e2833001 	add	r3, r3, #1
    807c:	e5843000 	str	r3, [r4]
    rpi_yield();
    8080:	eb0000f9 	bl	846c <rpi_yield>
	thread_sum += *x;
    8084:	e5952000 	ldr	r2, [r5]
    8088:	e5943004 	ldr	r3, [r4, #4]
    808c:	e0823003 	add	r3, r2, r3
    8090:	e5843004 	str	r3, [r4, #4]
    rpi_yield();
    8094:	eb0000f4 	bl	846c <rpi_yield>
    // check exit
    rpi_exit(0);
    8098:	e3a00000 	mov	r0, #0
    809c:	eb0000dc 	bl	8414 <rpi_exit>
}
    80a0:	e28dd00c 	add	sp, sp, #12
    80a4:	e8bd8030 	pop	{r4, r5, pc}
    80a8:	000097e0 	andeq	r9, r0, r0, ror #15
    80ac:	000097f8 	strdeq	r9, [r0], -r8
    80b0:	0000984c 	andeq	r9, r0, ip, asr #16
    80b4:	000097cc 	andeq	r9, r0, ip, asr #15
    80b8:	00009ee4 	andeq	r9, r0, r4, ror #29

000080bc <notmain>:

void notmain() {
    80bc:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    uart_init();
    80c0:	eb0004bd 	bl	93bc <uart_init>
    kmalloc_init();
    80c4:	eb000592 	bl	9714 <kmalloc_init>

    printk("about to test summing of 30 threads\n");
    80c8:	e59f00b8 	ldr	r0, [pc, #184]	; 8188 <notmain+0xcc>
    80cc:	eb0002ea 	bl	8c7c <printk>

    // change this to increase the number of threads.
	int n = 30;
	thread_sum = thread_count = 0;
    80d0:	e59f30b4 	ldr	r3, [pc, #180]	; 818c <notmain+0xd0>
    80d4:	e3a05000 	mov	r5, #0
    80d8:	e5835000 	str	r5, [r3]
    80dc:	e5835004 	str	r5, [r3, #4]

    unsigned sum = 0;
	for(int i = 0; i < n; i++)  {
    80e0:	e1a04005 	mov	r4, r5
        int *x = kmalloc(sizeof *x);
    80e4:	e3a07004 	mov	r7, #4
        sum += *x = i;
		rpi_fork(thread_code, x);
    80e8:	e59f60a0 	ldr	r6, [pc, #160]	; 8190 <notmain+0xd4>
    // change this to increase the number of threads.
	int n = 30;
	thread_sum = thread_count = 0;

    unsigned sum = 0;
	for(int i = 0; i < n; i++)  {
    80ec:	ea000007 	b	8110 <notmain+0x54>
        int *x = kmalloc(sizeof *x);
    80f0:	e1a00007 	mov	r0, r7
    80f4:	eb000548 	bl	961c <kmalloc>
    80f8:	e1a01000 	mov	r1, r0
        sum += *x = i;
    80fc:	e5804000 	str	r4, [r0]
    8100:	e0855004 	add	r5, r5, r4
		rpi_fork(thread_code, x);
    8104:	e1a00006 	mov	r0, r6
    8108:	eb0000ae 	bl	83c8 <rpi_fork>
    // change this to increase the number of threads.
	int n = 30;
	thread_sum = thread_count = 0;

    unsigned sum = 0;
	for(int i = 0; i < n; i++)  {
    810c:	e2844001 	add	r4, r4, #1
    8110:	e354001d 	cmp	r4, #29
    8114:	dafffff5 	ble	80f0 <notmain+0x34>
        int *x = kmalloc(sizeof *x);
        sum += *x = i;
		rpi_fork(thread_code, x);
    }
	rpi_thread_start();
    8118:	eb00010b 	bl	854c <rpi_thread_start>

	// no more threads: check.
	printk("count = %d, sum=%d\n", thread_count, thread_sum);
    811c:	e59f4068 	ldr	r4, [pc, #104]	; 818c <notmain+0xd0>
    8120:	e59f006c 	ldr	r0, [pc, #108]	; 8194 <notmain+0xd8>
    8124:	e5941000 	ldr	r1, [r4]
    8128:	e5942004 	ldr	r2, [r4, #4]
    812c:	eb0002d2 	bl	8c7c <printk>
	assert(thread_count == n);
    8130:	e5943000 	ldr	r3, [r4]
    8134:	e353001e 	cmp	r3, #30
    8138:	0a000005 	beq	8154 <notmain+0x98>
    813c:	e59f0054 	ldr	r0, [pc, #84]	; 8198 <notmain+0xdc>
    8140:	e59f1054 	ldr	r1, [pc, #84]	; 819c <notmain+0xe0>
    8144:	e59f2054 	ldr	r2, [pc, #84]	; 81a0 <notmain+0xe4>
    8148:	e3a0303a 	mov	r3, #58	; 0x3a
    814c:	eb0002ca 	bl	8c7c <printk>
    8150:	eb00044a 	bl	9280 <rpi_reboot>
	assert(thread_sum == sum);
    8154:	e59f3030 	ldr	r3, [pc, #48]	; 818c <notmain+0xd0>
    8158:	e5933004 	ldr	r3, [r3, #4]
    815c:	e1530005 	cmp	r3, r5
    8160:	0a000005 	beq	817c <notmain+0xc0>
    8164:	e59f0038 	ldr	r0, [pc, #56]	; 81a4 <notmain+0xe8>
    8168:	e59f102c 	ldr	r1, [pc, #44]	; 819c <notmain+0xe0>
    816c:	e59f202c 	ldr	r2, [pc, #44]	; 81a0 <notmain+0xe4>
    8170:	e3a0303b 	mov	r3, #59	; 0x3b
    8174:	eb0002c0 	bl	8c7c <printk>
    8178:	eb000440 	bl	9280 <rpi_reboot>
    printk("SUCCESS!\n");
    817c:	e59f0024 	ldr	r0, [pc, #36]	; 81a8 <notmain+0xec>
    8180:	eb0002bd 	bl	8c7c <printk>
	clean_reboot();
    8184:	eb00041b 	bl	91f8 <clean_reboot>
    8188:	0000985c 	andeq	r9, r0, ip, asr r8
    818c:	00009ee4 	andeq	r9, r0, r4, ror #29
    8190:	00008010 	andeq	r8, r0, r0, lsl r0
    8194:	00009884 	andeq	r9, r0, r4, lsl #17
    8198:	00009898 	muleq	r0, r8, r8
    819c:	0000984c 	andeq	r9, r0, ip, asr #16
    81a0:	000097d8 	ldrdeq	r9, [r0], -r8
    81a4:	000098bc 			; <UNDEFINED> instruction: 0x000098bc
    81a8:	000098e0 	andeq	r9, r0, r0, ror #17

000081ac <Q_nelem>:
} Q_t;

// used for iteration.
static E *Q_start(Q_t *q)   { return q->head; }
static E *Q_next(E *e)      { return e->next; }
static unsigned Q_nelem(Q_t *q) { return q->cnt; }
    81ac:	e5900008 	ldr	r0, [r0, #8]
    81b0:	e12fff1e 	bx	lr

000081b4 <Q_append>:
    return e;
}

// insert at tail. (for FIFO)
static void Q_append(Q_t *q, E *e) {
    e->next = 0;
    81b4:	e3a03000 	mov	r3, #0
    81b8:	e5813040 	str	r3, [r1, #64]	; 0x40
    q->cnt++;
    81bc:	e5903008 	ldr	r3, [r0, #8]
    81c0:	e2833001 	add	r3, r3, #1
    81c4:	e5803008 	str	r3, [r0, #8]
    if(!q->tail) 
    81c8:	e5903004 	ldr	r3, [r0, #4]
    81cc:	e3530000 	cmp	r3, #0
    81d0:	1a000002 	bne	81e0 <Q_append+0x2c>
        q->head = q->tail = e;
    81d4:	e5801004 	str	r1, [r0, #4]
    81d8:	e5801000 	str	r1, [r0]
    81dc:	e12fff1e 	bx	lr
    else {
        q->tail->next = e;
    81e0:	e5831040 	str	r1, [r3, #64]	; 0x40
        q->tail = e;
    81e4:	e5801004 	str	r1, [r0, #4]
    81e8:	e12fff1e 	bx	lr

000081ec <Q_push>:
    }
}

// insert at head (for LIFO)
static void Q_push(Q_t *q, E *e) {
    q->cnt++;
    81ec:	e5903008 	ldr	r3, [r0, #8]
    81f0:	e2833001 	add	r3, r3, #1
    81f4:	e5803008 	str	r3, [r0, #8]
    e->next = q->head;
    81f8:	e5903000 	ldr	r3, [r0]
    81fc:	e5813040 	str	r3, [r1, #64]	; 0x40
    q->head = e;
    8200:	e5801000 	str	r1, [r0]
    if(!q->tail)
    8204:	e5903004 	ldr	r3, [r0, #4]
    8208:	e3530000 	cmp	r3, #0
        q->tail = e;
    820c:	05801004 	streq	r1, [r0, #4]
    8210:	e12fff1e 	bx	lr

00008214 <th_free>:
    demand(is_aligned(&t->stack[0],8), stack must be 8-byte aligned!);
    t->tid = tid++;
    return t;
}

static void th_free(rpi_thread_t *th) {
    8214:	e92d4008 	push	{r3, lr}
    8218:	e1a01000 	mov	r1, r0
    // push on the front in case helps with caching.
    Q_push(&freeq, th);
    821c:	e59f0004 	ldr	r0, [pc, #4]	; 8228 <th_free+0x14>
    8220:	ebfffff1 	bl	81ec <Q_push>
    8224:	e8bd8008 	pop	{r3, pc}
    8228:	00009eec 	andeq	r9, r0, ip, ror #29

0000822c <Q_empty>:
// used for iteration.
static E *Q_start(Q_t *q)   { return q->head; }
static E *Q_next(E *e)      { return e->next; }
static unsigned Q_nelem(Q_t *q) { return q->cnt; }

static int Q_empty(Q_t *q)  { 
    822c:	e92d4010 	push	{r4, lr}
    8230:	e1a04000 	mov	r4, r0
    if(q->head)
    8234:	e5903000 	ldr	r3, [r0]
    8238:	e3530000 	cmp	r3, #0
    823c:	1a000011 	bne	8288 <Q_empty+0x5c>
        return 0;
    assert(Q_nelem(q) == 0);
    8240:	ebffffd9 	bl	81ac <Q_nelem>
    8244:	e3500000 	cmp	r0, #0
    8248:	0a000005 	beq	8264 <Q_empty+0x38>
    824c:	e59f0044 	ldr	r0, [pc, #68]	; 8298 <Q_empty+0x6c>
    8250:	e59f1044 	ldr	r1, [pc, #68]	; 829c <Q_empty+0x70>
    8254:	e59f2044 	ldr	r2, [pc, #68]	; 82a0 <Q_empty+0x74>
    8258:	e3a03015 	mov	r3, #21
    825c:	eb000286 	bl	8c7c <printk>
    8260:	eb000406 	bl	9280 <rpi_reboot>
    demand(!q->tail, invalid Q);
    8264:	e5943004 	ldr	r3, [r4, #4]
    8268:	e3530000 	cmp	r3, #0
    826c:	0a000007 	beq	8290 <Q_empty+0x64>
    8270:	e59f002c 	ldr	r0, [pc, #44]	; 82a4 <Q_empty+0x78>
    8274:	e59f1020 	ldr	r1, [pc, #32]	; 829c <Q_empty+0x70>
    8278:	e59f2020 	ldr	r2, [pc, #32]	; 82a0 <Q_empty+0x74>
    827c:	e3a03016 	mov	r3, #22
    8280:	eb00027d 	bl	8c7c <printk>
    8284:	eb0003fd 	bl	9280 <rpi_reboot>
static E *Q_next(E *e)      { return e->next; }
static unsigned Q_nelem(Q_t *q) { return q->cnt; }

static int Q_empty(Q_t *q)  { 
    if(q->head)
        return 0;
    8288:	e3a00000 	mov	r0, #0
    828c:	e8bd8010 	pop	{r4, pc}
    assert(Q_nelem(q) == 0);
    demand(!q->tail, invalid Q);
    return 1;
    8290:	e3a00001 	mov	r0, #1
}
    8294:	e8bd8010 	pop	{r4, pc}
    8298:	00009948 	andeq	r9, r0, r8, asr #18
    829c:	00009968 	andeq	r9, r0, r8, ror #18
    82a0:	000098ec 	andeq	r9, r0, ip, ror #17
    82a4:	0000996c 	andeq	r9, r0, ip, ror #18

000082a8 <Q_pop>:

// remove from front of list.
static E *Q_pop(Q_t *q) {
    82a8:	e92d4008 	push	{r3, lr}
    demand(q, bad input);
    82ac:	e3500000 	cmp	r0, #0
    82b0:	1a000005 	bne	82cc <Q_pop+0x24>
    82b4:	e59f006c 	ldr	r0, [pc, #108]	; 8328 <Q_pop+0x80>
    82b8:	e59f106c 	ldr	r1, [pc, #108]	; 832c <Q_pop+0x84>
    82bc:	e59f206c 	ldr	r2, [pc, #108]	; 8330 <Q_pop+0x88>
    82c0:	e3a0301c 	mov	r3, #28
    82c4:	eb00026c 	bl	8c7c <printk>
    82c8:	eb0003ec 	bl	9280 <rpi_reboot>

    E *e = q->head;
    82cc:	e5903000 	ldr	r3, [r0]
    if(!e) {
    82d0:	e3530000 	cmp	r3, #0
    82d4:	1a000008 	bne	82fc <Q_pop+0x54>
        assert(Q_empty(q));
    82d8:	ebffffd3 	bl	822c <Q_empty>
    82dc:	e3500000 	cmp	r0, #0
    82e0:	1a00000e 	bne	8320 <Q_pop+0x78>
    82e4:	e59f0048 	ldr	r0, [pc, #72]	; 8334 <Q_pop+0x8c>
    82e8:	e59f103c 	ldr	r1, [pc, #60]	; 832c <Q_pop+0x84>
    82ec:	e59f203c 	ldr	r2, [pc, #60]	; 8330 <Q_pop+0x88>
    82f0:	e3a03020 	mov	r3, #32
    82f4:	eb000260 	bl	8c7c <printk>
    82f8:	eb0003e0 	bl	9280 <rpi_reboot>
        return 0;
    }
    q->cnt--;
    82fc:	e5902008 	ldr	r2, [r0, #8]
    8300:	e2422001 	sub	r2, r2, #1
    8304:	e5802008 	str	r2, [r0, #8]
    q->head = e->next;
    8308:	e5932040 	ldr	r2, [r3, #64]	; 0x40
    830c:	e5802000 	str	r2, [r0]
    if(!q->head)
    8310:	e3520000 	cmp	r2, #0
        q->tail = 0;
    8314:	05802004 	streq	r2, [r0, #4]
    return e;
    8318:	e1a00003 	mov	r0, r3
    831c:	e8bd8008 	pop	{r3, pc}
    demand(q, bad input);

    E *e = q->head;
    if(!e) {
        assert(Q_empty(q));
        return 0;
    8320:	e3a00000 	mov	r0, #0
    q->cnt--;
    q->head = e->next;
    if(!q->head)
        q->tail = 0;
    return e;
}
    8324:	e8bd8008 	pop	{r3, pc}
    8328:	0000999c 	muleq	r0, ip, r9
    832c:	00009968 	andeq	r9, r0, r8, ror #18
    8330:	000098f4 	strdeq	r9, [r0], -r4
    8334:	000099c4 	andeq	r9, r0, r4, asr #19

00008338 <th_alloc>:
}

#define is_aligned(_p,_n) (((unsigned)(_p))%(_n) == 0)

// keep a cache of freed thread blocks.  call kmalloc if run out.
static rpi_thread_t *th_alloc(void) {
    8338:	e92d4008 	push	{r3, lr}
    rpi_thread_t *t = Q_pop(&freeq);
    833c:	e59f005c 	ldr	r0, [pc, #92]	; 83a0 <th_alloc+0x68>
    8340:	ebffffd8 	bl	82a8 <Q_pop>

    // stack has to be 8-byte aligned.
    if(!t) {
    8344:	e3500000 	cmp	r0, #0
    8348:	1a000006 	bne	8368 <th_alloc+0x30>
        t = kmalloc_aligned(sizeof *t, 8);
    834c:	e59f0050 	ldr	r0, [pc, #80]	; 83a4 <th_alloc+0x6c>
    8350:	e3a01008 	mov	r1, #8
    8354:	eb0004c9 	bl	9680 <kmalloc_aligned>
        nalloced++;
    8358:	e59f3040 	ldr	r3, [pc, #64]	; 83a0 <th_alloc+0x68>
    835c:	e593200c 	ldr	r2, [r3, #12]
    8360:	e2822001 	add	r2, r2, #1
    8364:	e583200c 	str	r2, [r3, #12]
    }
    demand(is_aligned(&t->stack[0],8), stack must be 8-byte aligned!);
    8368:	e3100007 	tst	r0, #7
    836c:	0a000005 	beq	8388 <th_alloc+0x50>
    8370:	e59f0030 	ldr	r0, [pc, #48]	; 83a8 <th_alloc+0x70>
    8374:	e59f1030 	ldr	r1, [pc, #48]	; 83ac <th_alloc+0x74>
    8378:	e59f2030 	ldr	r2, [pc, #48]	; 83b0 <th_alloc+0x78>
    837c:	e3a03024 	mov	r3, #36	; 0x24
    8380:	eb00023d 	bl	8c7c <printk>
    8384:	eb0003bd 	bl	9280 <rpi_reboot>
    t->tid = tid++;
    8388:	e59f2024 	ldr	r2, [pc, #36]	; 83b4 <th_alloc+0x7c>
    838c:	e5923000 	ldr	r3, [r2]
    8390:	e2831001 	add	r1, r3, #1
    8394:	e5821000 	str	r1, [r2]
    8398:	e5803044 	str	r3, [r0, #68]	; 0x44
    return t;
}
    839c:	e8bd8008 	pop	{r3, pc}
    83a0:	00009eec 	andeq	r9, r0, ip, ror #29
    83a4:	00002050 	andeq	r2, r0, r0, asr r0
    83a8:	000099e0 	andeq	r9, r0, r0, ror #19
    83ac:	00009a40 	andeq	r9, r0, r0, asr #20
    83b0:	000098fc 	strdeq	r9, [r0], -ip
    83b4:	000097c0 	andeq	r9, r0, r0, asr #15

000083b8 <rpi_cur_thread>:
static unsigned nalloced = 0;

// return pointer to the current thread.  
rpi_thread_t *rpi_cur_thread(void) {
    return cur_thread;
}
    83b8:	e59f3004 	ldr	r3, [pc, #4]	; 83c4 <rpi_cur_thread+0xc>
    83bc:	e5930010 	ldr	r0, [r3, #16]
    83c0:	e12fff1e 	bx	lr
    83c4:	00009eec 	andeq	r9, r0, ip, ror #29

000083c8 <rpi_fork>:
/***********************************************************************
 * implement the code below.
 */

// create a new thread.
rpi_thread_t *rpi_fork(void (*code)(void *arg), void *arg) {
    83c8:	e92d4070 	push	{r4, r5, r6, lr}
    83cc:	e1a06000 	mov	r6, r0
    83d0:	e1a05001 	mov	r5, r1
    rpi_thread_t *t = th_alloc();
    83d4:	ebffffd7 	bl	8338 <th_alloc>
    83d8:	e1a04000 	mov	r4, r0
    /*
     * do the brain-surgery on the new thread stack here.
     * must set up initial stack: 
     *  - set LR, SP, and store <code> and <arg> where trampoline can get it.
     */
    t->reg_save_area[0] = (unsigned) code;
    83dc:	e5806000 	str	r6, [r0]
	t->reg_save_area[1] = (unsigned) arg;
    83e0:	e5805004 	str	r5, [r0, #4]
	void rpi_init_trampoline(void);
	t->reg_save_area[REG_LR_OFF] = (unsigned) &rpi_init_trampoline;
    83e4:	e59f3020 	ldr	r3, [pc, #32]	; 840c <rpi_fork+0x44>
    83e8:	e5803024 	str	r3, [r0, #36]	; 0x24
	t->reg_save_area[REG_SP_OFF] = (unsigned) &t->stack[THREAD_MAXSTACK - 2];
    83ec:	e2803d81 	add	r3, r0, #8256	; 0x2040
    83f0:	e2833008 	add	r3, r3, #8
    83f4:	e5803028 	str	r3, [r0, #40]	; 0x28
    //unimplemented();
    Q_append(&runq, t);
    83f8:	e59f0010 	ldr	r0, [pc, #16]	; 8410 <rpi_fork+0x48>
    83fc:	e1a01004 	mov	r1, r4
    8400:	ebffff6b 	bl	81b4 <Q_append>
    return t;
}
    8404:	e1a00004 	mov	r0, r4
    8408:	e8bd8070 	pop	{r4, r5, r6, pc}
    840c:	00008678 	andeq	r8, r0, r8, ror r6
    8410:	00009f00 	andeq	r9, r0, r0, lsl #30

00008414 <rpi_exit>:

// exit current thread.
void rpi_exit(int exitcode) {
    8414:	e92d4038 	push	{r3, r4, r5, lr}
 	 * switch to it.
	 
	 * 3. otherwise we are done, switch to the scheduler thread 
	 * so we call back into the client code.
	 */
	rpi_thread_t* old_thread = cur_thread;
    8418:	e59f5048 	ldr	r5, [pc, #72]	; 8468 <rpi_exit+0x54>
    841c:	e5954010 	ldr	r4, [r5, #16]
	th_free(cur_thread);
    8420:	e1a00004 	mov	r0, r4
    8424:	ebffff7a 	bl	8214 <th_free>

	if(!Q_empty(&runq)) {
    8428:	e2850014 	add	r0, r5, #20
    842c:	ebffff7e 	bl	822c <Q_empty>
    8430:	e3500000 	cmp	r0, #0
    8434:	1a000003 	bne	8448 <rpi_exit+0x34>
		cur_thread = Q_pop(&runq);
    8438:	e2850014 	add	r0, r5, #20
    843c:	ebffff99 	bl	82a8 <Q_pop>
    8440:	e5850010 	str	r0, [r5, #16]
    8444:	ea000002 	b	8454 <rpi_exit+0x40>
	} else {
		cur_thread = scheduler_thread;
    8448:	e59f3018 	ldr	r3, [pc, #24]	; 8468 <rpi_exit+0x54>
    844c:	e5932020 	ldr	r2, [r3, #32]
    8450:	e5832010 	str	r2, [r3, #16]
	}
	rpi_cswitch(old_thread->reg_save_area, cur_thread->reg_save_area);
    8454:	e1a00004 	mov	r0, r4
    8458:	e59f3008 	ldr	r3, [pc, #8]	; 8468 <rpi_exit+0x54>
    845c:	e5931010 	ldr	r1, [r3, #16]
    8460:	eb00006d 	bl	861c <rpi_cswitch>
    8464:	e8bd8038 	pop	{r3, r4, r5, pc}
    8468:	00009eec 	andeq	r9, r0, ip, ror #29

0000846c <rpi_yield>:
	return;
}

// yield the current thread.
void rpi_yield(void) {
    846c:	e92d4070 	push	{r4, r5, r6, lr}
	//	- there are no more runnable threads, return.  
	// otherwise: 
	//	1. put current thread on runq.
	// 	2. context switch to the new thread.
	rpi_thread_t* next_thread;
	if(Q_empty(&runq)) {
    8470:	e59f003c 	ldr	r0, [pc, #60]	; 84b4 <rpi_yield+0x48>
    8474:	ebffff6c 	bl	822c <Q_empty>
    8478:	e3500000 	cmp	r0, #0
    847c:	18bd8070 	popne	{r4, r5, r6, pc}
		return;
	} else {
		rpi_thread_t* old_thread = cur_thread;
    8480:	e59f4030 	ldr	r4, [pc, #48]	; 84b8 <rpi_yield+0x4c>
    8484:	e5945010 	ldr	r5, [r4, #16]
		Q_append(&runq, cur_thread);
    8488:	e2846014 	add	r6, r4, #20
    848c:	e1a00006 	mov	r0, r6
    8490:	e1a01005 	mov	r1, r5
    8494:	ebffff46 	bl	81b4 <Q_append>
		cur_thread = Q_pop(&runq);
    8498:	e1a00006 	mov	r0, r6
    849c:	ebffff81 	bl	82a8 <Q_pop>
    84a0:	e1a01000 	mov	r1, r0
    84a4:	e5840010 	str	r0, [r4, #16]
		rpi_cswitch(old_thread->reg_save_area, cur_thread->reg_save_area);
    84a8:	e1a00005 	mov	r0, r5
    84ac:	eb00005a 	bl	861c <rpi_cswitch>
    84b0:	e8bd8070 	pop	{r4, r5, r6, pc}
    84b4:	00009f00 	andeq	r9, r0, r0, lsl #30
    84b8:	00009eec 	andeq	r9, r0, ip, ror #29

000084bc <rpi_internal_check>:
    printk("rpithreads: done with all threads! returning\n");
}


// internal consistency checks.
void rpi_internal_check(void) {
    84bc:	e92d4030 	push	{r4, r5, lr}
    84c0:	e24dd014 	sub	sp, sp, #20
    // the blocks on the runq + freeq must equal the total ever allocated
    // or we have leaked storage.
    unsigned n_free = Q_nelem(&freeq),
    84c4:	e59f4068 	ldr	r4, [pc, #104]	; 8534 <rpi_internal_check+0x78>
    84c8:	e1a00004 	mov	r0, r4
    84cc:	ebffff36 	bl	81ac <Q_nelem>
    84d0:	e1a05000 	mov	r5, r0
             n_run = Q_nelem(&runq),
    84d4:	e2840014 	add	r0, r4, #20
    84d8:	ebffff33 	bl	81ac <Q_nelem>
             n = n_free + n_run;
    84dc:	e0853000 	add	r3, r5, r0

    if(nalloced != n)
    84e0:	e594200c 	ldr	r2, [r4, #12]
    84e4:	e1520003 	cmp	r2, r3
    84e8:	0a000009 	beq	8514 <rpi_internal_check+0x58>
        panic("storage leak: should have %d free blocks, have %d (runq=%d, freeq=%d)\n", 
    84ec:	e58d2000 	str	r2, [sp]
    84f0:	e58d3004 	str	r3, [sp, #4]
    84f4:	e58d5008 	str	r5, [sp, #8]
    84f8:	e58d000c 	str	r0, [sp, #12]
    84fc:	e59f0034 	ldr	r0, [pc, #52]	; 8538 <rpi_internal_check+0x7c>
    8500:	e59f1034 	ldr	r1, [pc, #52]	; 853c <rpi_internal_check+0x80>
    8504:	e59f2034 	ldr	r2, [pc, #52]	; 8540 <rpi_internal_check+0x84>
    8508:	e3a03096 	mov	r3, #150	; 0x96
    850c:	eb0001da 	bl	8c7c <printk>
    8510:	eb00035a 	bl	9280 <rpi_reboot>
            nalloced, n, n_free,n_run);

    // active thread system: 
    //      walk through the run queue making sure the stack pointer
    //     and ra pointer makes sense.
    if(!Q_empty(&runq)) {
    8514:	e59f0028 	ldr	r0, [pc, #40]	; 8544 <rpi_internal_check+0x88>
    8518:	ebffff43 	bl	822c <Q_empty>
    851c:	e3500000 	cmp	r0, #0
    8520:	0a000001 	beq	852c <rpi_internal_check+0x70>
        //unimplemented();
        return;
    }
    printk("thread: internal check passed\n");
    8524:	e59f001c 	ldr	r0, [pc, #28]	; 8548 <rpi_internal_check+0x8c>
    8528:	eb0001d3 	bl	8c7c <printk>
}
    852c:	e28dd014 	add	sp, sp, #20
    8530:	e8bd8030 	pop	{r4, r5, pc}
    8534:	00009eec 	andeq	r9, r0, ip, ror #29
    8538:	00009a50 	andeq	r9, r0, r0, asr sl
    853c:	00009a40 	andeq	r9, r0, r0, asr #20
    8540:	00009908 	andeq	r9, r0, r8, lsl #18
    8544:	00009f00 	andeq	r9, r0, r0, lsl #30
    8548:	00009aa8 	andeq	r9, r0, r8, lsr #21

0000854c <rpi_thread_start>:
/*
 * starts the thread system.  
 * note: our caller is not a thread!  so you have to figure
 * out how to handle this.
 */
void rpi_thread_start(void) {
    854c:	e92d4010 	push	{r4, lr}
    AssertNow(offsetof(rpi_thread_t, stack) % 8 == 0);
    // statically check that the register save area is at offset 0.
    AssertNow(offsetof(rpi_thread_t, reg_save_area) == 0);

    // no other runnable thread: return.
    if(Q_empty(&runq))
    8550:	e59f003c 	ldr	r0, [pc, #60]	; 8594 <rpi_thread_start+0x48>
    8554:	ebffff34 	bl	822c <Q_empty>
    8558:	e3500000 	cmp	r0, #0
    855c:	18bd8010 	popne	{r4, pc}
        return;
    rpi_internal_check();
    8560:	ebffffd5 	bl	84bc <rpi_internal_check>
    //unimplemented();
    //  1. create a new fake thread 
    //  2. dequeue a thread from the runq
    //  3. context switch to it, saving current state in
    //	    <scheduler_thread>
    scheduler_thread = th_alloc();
    8564:	ebffff73 	bl	8338 <th_alloc>
    8568:	e59f4028 	ldr	r4, [pc, #40]	; 8598 <rpi_thread_start+0x4c>
    856c:	e5840020 	str	r0, [r4, #32]
	cur_thread = Q_pop(&runq);
    8570:	e2840014 	add	r0, r4, #20
    8574:	ebffff4b 	bl	82a8 <Q_pop>
    8578:	e1a01000 	mov	r1, r0
    857c:	e5840010 	str	r0, [r4, #16]
	rpi_cswitch(scheduler_thread->reg_save_area, cur_thread->reg_save_area);
    8580:	e5940020 	ldr	r0, [r4, #32]
    8584:	eb000024 	bl	861c <rpi_cswitch>
	//unimplemented();
    printk("rpithreads: done with all threads! returning\n");
    8588:	e59f000c 	ldr	r0, [pc, #12]	; 859c <rpi_thread_start+0x50>
    858c:	eb0001ba 	bl	8c7c <printk>
    8590:	e8bd8010 	pop	{r4, pc}
    8594:	00009f00 	andeq	r9, r0, r0, lsl #30
    8598:	00009eec 	andeq	r9, r0, ip, ror #29
    859c:	00009ac8 	andeq	r9, r0, r8, asr #21

000085a0 <rpi_stack_check>:
    }
    printk("thread: internal check passed\n");
}

// check the current thread stack.
void rpi_stack_check(void) {
    85a0:	e92d4008 	push	{r3, lr}
    unimplemented();
    85a4:	e59f0010 	ldr	r0, [pc, #16]	; 85bc <rpi_stack_check+0x1c>
    85a8:	e59f1010 	ldr	r1, [pc, #16]	; 85c0 <rpi_stack_check+0x20>
    85ac:	e59f2010 	ldr	r2, [pc, #16]	; 85c4 <rpi_stack_check+0x24>
    85b0:	e3a030a4 	mov	r3, #164	; 0xa4
    85b4:	eb0001b0 	bl	8c7c <printk>
    85b8:	eb000330 	bl	9280 <rpi_reboot>
    85bc:	00009af8 	strdeq	r9, [r0], -r8
    85c0:	00009a40 	andeq	r9, r0, r0, asr #20
    85c4:	0000991c 	andeq	r9, r0, ip, lsl r9

000085c8 <rpi_join>:
/********************************************************************
 * save for homework.
 */

// block caller until thread <th> completes.
void rpi_join(rpi_thread_t *th) {
    85c8:	e92d4008 	push	{r3, lr}
    unimplemented();
    85cc:	e59f0010 	ldr	r0, [pc, #16]	; 85e4 <rpi_join+0x1c>
    85d0:	e59f1010 	ldr	r1, [pc, #16]	; 85e8 <rpi_join+0x20>
    85d4:	e59f2010 	ldr	r2, [pc, #16]	; 85ec <rpi_join+0x24>
    85d8:	e3a030ad 	mov	r3, #173	; 0xad
    85dc:	eb0001a6 	bl	8c7c <printk>
    85e0:	eb000326 	bl	9280 <rpi_reboot>
    85e4:	00009af8 	strdeq	r9, [r0], -r8
    85e8:	00009a40 	andeq	r9, r0, r0, asr #20
    85ec:	0000992c 	andeq	r9, r0, ip, lsr #18

000085f0 <rpi_exact_sleep>:
}

// put the current thread on a blocked queue: resume in 
// exactly // <usec> micro-seconds.  not before, not after.
// should give low-error resumption times.
void rpi_exact_sleep(uint32_t usec) {
    85f0:	e92d4008 	push	{r3, lr}
    unimplemented();
    85f4:	e59f0010 	ldr	r0, [pc, #16]	; 860c <rpi_exact_sleep+0x1c>
    85f8:	e59f1010 	ldr	r1, [pc, #16]	; 8610 <rpi_exact_sleep+0x20>
    85fc:	e59f2010 	ldr	r2, [pc, #16]	; 8614 <rpi_exact_sleep+0x24>
    8600:	e3a030b4 	mov	r3, #180	; 0xb4
    8604:	eb00019c 	bl	8c7c <printk>
    8608:	eb00031c 	bl	9280 <rpi_reboot>
    860c:	00009af8 	strdeq	r9, [r0], -r8
    8610:	00009a40 	andeq	r9, r0, r0, asr #20
    8614:	00009938 	andeq	r9, r0, r8, lsr r9

00008618 <rpi_get_sp>:
    8618:	e12fff1e 	bx	lr

0000861c <rpi_cswitch>:
    861c:	e5804000 	str	r4, [r0]
    8620:	e5805004 	str	r5, [r0, #4]
    8624:	e5806008 	str	r6, [r0, #8]
    8628:	e580700c 	str	r7, [r0, #12]
    862c:	e5808010 	str	r8, [r0, #16]
    8630:	e5809014 	str	r9, [r0, #20]
    8634:	e580a018 	str	sl, [r0, #24]
    8638:	e580b01c 	str	fp, [r0, #28]
    863c:	e580c020 	str	ip, [r0, #32]
    8640:	e580e024 	str	lr, [r0, #36]	; 0x24
    8644:	e580d028 	str	sp, [r0, #40]	; 0x28
    8648:	e5914000 	ldr	r4, [r1]
    864c:	e5915004 	ldr	r5, [r1, #4]
    8650:	e5916008 	ldr	r6, [r1, #8]
    8654:	e591700c 	ldr	r7, [r1, #12]
    8658:	e5918010 	ldr	r8, [r1, #16]
    865c:	e5919014 	ldr	r9, [r1, #20]
    8660:	e591a018 	ldr	sl, [r1, #24]
    8664:	e591b01c 	ldr	fp, [r1, #28]
    8668:	e591c020 	ldr	ip, [r1, #32]
    866c:	e591e024 	ldr	lr, [r1, #36]	; 0x24
    8670:	e591d028 	ldr	sp, [r1, #40]	; 0x28
    8674:	e12fff1e 	bx	lr

00008678 <rpi_init_trampoline>:
    8678:	e1a00005 	mov	r0, r5
    867c:	e12fff34 	blx	r4
    8680:	ebffff63 	bl	8414 <rpi_exit>

00008684 <cq_print>:
#ifdef LINUX
#   include <string.h>
#endif
#include "circular.h"

void cq_print(cq_t *c) {
    8684:	e92d4010 	push	{r4, lr}
    8688:	e24dd010 	sub	sp, sp, #16
    debug("cq print: head=%d, tail=%d, nelem=%d, empty=%d\n", 
    868c:	e59f205c 	ldr	r2, [pc, #92]	; 86f0 <cq_print+0x6c>
    8690:	e790e002 	ldr	lr, [r0, r2]
    8694:	e59f3058 	ldr	r3, [pc, #88]	; 86f4 <cq_print+0x70>
    8698:	e790c003 	ldr	ip, [r0, r3]
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }

// if adding 1 to head = tail, then we have no space.
static inline int cq_full(cq_t *q) { return (q->head+1) % CQ_N == q->tail; }

static inline unsigned cq_nelem(cq_t *q) { return (q->head - q->tail) % CQ_N; }
    869c:	e7904002 	ldr	r4, [r0, r2]
    86a0:	e7901003 	ldr	r1, [r0, r3]
    86a4:	e0611004 	rsb	r1, r1, r4
    86a8:	e1a01981 	lsl	r1, r1, #19
    86ac:	e1a019a1 	lsr	r1, r1, #19
void cq_print(cq_t *c);

/*************************************************************************************
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }
    86b0:	e7902002 	ldr	r2, [r0, r2]
    86b4:	e7903003 	ldr	r3, [r0, r3]
    86b8:	e1520003 	cmp	r2, r3
    86bc:	13a03000 	movne	r3, #0
    86c0:	03a03001 	moveq	r3, #1
    86c4:	e58de000 	str	lr, [sp]
    86c8:	e58dc004 	str	ip, [sp, #4]
    86cc:	e58d1008 	str	r1, [sp, #8]
    86d0:	e58d300c 	str	r3, [sp, #12]
    86d4:	e59f001c 	ldr	r0, [pc, #28]	; 86f8 <cq_print+0x74>
    86d8:	e59f101c 	ldr	r1, [pc, #28]	; 86fc <cq_print+0x78>
    86dc:	e59f201c 	ldr	r2, [pc, #28]	; 8700 <cq_print+0x7c>
    86e0:	e3a0300a 	mov	r3, #10
    86e4:	eb000164 	bl	8c7c <printk>
                c->head, c->tail, cq_nelem(c), cq_empty(c));
}
    86e8:	e28dd010 	add	sp, sp, #16
    86ec:	e8bd8010 	pop	{r4, pc}
    86f0:	00002004 	andeq	r2, r0, r4
    86f4:	00002008 	andeq	r2, r0, r8
    86f8:	00009b58 	andeq	r9, r0, r8, asr fp
    86fc:	00009b94 	muleq	r0, r4, fp
    8700:	00009b24 	andeq	r9, r0, r4, lsr #22

00008704 <cq_ok>:

void cq_ok(cq_t *c) {
    8704:	e92d4008 	push	{r3, lr}
    if(c->fence != 0x12345678)
    8708:	e3a03a02 	mov	r3, #8192	; 0x2000
    870c:	e7902003 	ldr	r2, [r0, r3]
    8710:	e59f301c 	ldr	r3, [pc, #28]	; 8734 <cq_ok+0x30>
    8714:	e1520003 	cmp	r2, r3
    8718:	08bd8008 	popeq	{r3, pc}
        panic("fence is corrupted\n");
    871c:	e59f0014 	ldr	r0, [pc, #20]	; 8738 <cq_ok+0x34>
    8720:	e59f1014 	ldr	r1, [pc, #20]	; 873c <cq_ok+0x38>
    8724:	e59f2014 	ldr	r2, [pc, #20]	; 8740 <cq_ok+0x3c>
    8728:	e3a0300f 	mov	r3, #15
    872c:	eb000152 	bl	8c7c <printk>
    8730:	eb0002d2 	bl	9280 <rpi_reboot>
    8734:	12345678 	eorsne	r5, r4, #120, 12	; 0x7800000
    8738:	00009ba0 	andeq	r9, r0, r0, lsr #23
    873c:	00009b94 	muleq	r0, r4, fp
    8740:	00009b30 	andeq	r9, r0, r0, lsr fp

00008744 <cq_init>:
}

void cq_init(cq_t *c, unsigned errors_fatal_p) {
    8744:	e92d4038 	push	{r3, r4, r5, lr}
    8748:	e1a04000 	mov	r4, r0
    874c:	e1a05001 	mov	r5, r1
    memset(c, 0, sizeof *c);
    8750:	e3a01000 	mov	r1, #0
    8754:	e59f215c 	ldr	r2, [pc, #348]	; 88b8 <cq_init+0x174>
    8758:	eb00013f 	bl	8c5c <memset>
    c->fence = 0x12345678;
    875c:	e59f2158 	ldr	r2, [pc, #344]	; 88bc <cq_init+0x178>
    8760:	e3a03a02 	mov	r3, #8192	; 0x2000
    8764:	e7842003 	str	r2, [r4, r3]
    c->head = c->tail = 0;
    8768:	e59f2150 	ldr	r2, [pc, #336]	; 88c0 <cq_init+0x17c>
    876c:	e3a03000 	mov	r3, #0
    8770:	e7843002 	str	r3, [r4, r2]
    8774:	e59f0148 	ldr	r0, [pc, #328]	; 88c4 <cq_init+0x180>
    8778:	e7843000 	str	r3, [r4, r0]
    c->overflow = 0;
    877c:	e59f1144 	ldr	r1, [pc, #324]	; 88c8 <cq_init+0x184>
    8780:	e7843001 	str	r3, [r4, r1]
    c->errors_fatal_p = errors_fatal_p;
    8784:	e59f3140 	ldr	r3, [pc, #320]	; 88cc <cq_init+0x188>
    8788:	e7d41003 	ldrb	r1, [r4, r3]
    878c:	e2055001 	and	r5, r5, #1
    8790:	e3c11001 	bic	r1, r1, #1
    8794:	e1855001 	orr	r5, r5, r1
    8798:	e7c45003 	strb	r5, [r4, r3]
    879c:	e7941000 	ldr	r1, [r4, r0]
    87a0:	e7943002 	ldr	r3, [r4, r2]
    assert(cq_empty(c));
    87a4:	e1510003 	cmp	r1, r3
    87a8:	0a000005 	beq	87c4 <cq_init+0x80>
    87ac:	e59f011c 	ldr	r0, [pc, #284]	; 88d0 <cq_init+0x18c>
    87b0:	e59f111c 	ldr	r1, [pc, #284]	; 88d4 <cq_init+0x190>
    87b4:	e59f211c 	ldr	r2, [pc, #284]	; 88d8 <cq_init+0x194>
    87b8:	e3a03018 	mov	r3, #24
    87bc:	eb00012e 	bl	8c7c <printk>
    87c0:	eb0002ae 	bl	9280 <rpi_reboot>

// if adding 1 to head = tail, then we have no space.
static inline int cq_full(cq_t *q) { return (q->head+1) % CQ_N == q->tail; }
    87c4:	e59f30f8 	ldr	r3, [pc, #248]	; 88c4 <cq_init+0x180>
    87c8:	e7942003 	ldr	r2, [r4, r3]
    87cc:	e2822001 	add	r2, r2, #1
    87d0:	e1a02982 	lsl	r2, r2, #19
    87d4:	e2833004 	add	r3, r3, #4
    87d8:	e7943003 	ldr	r3, [r4, r3]
    assert(!cq_full(c));
    87dc:	e15309a2 	cmp	r3, r2, lsr #19
    87e0:	1a000005 	bne	87fc <cq_init+0xb8>
    87e4:	e59f00f0 	ldr	r0, [pc, #240]	; 88dc <cq_init+0x198>
    87e8:	e59f10e4 	ldr	r1, [pc, #228]	; 88d4 <cq_init+0x190>
    87ec:	e59f20e4 	ldr	r2, [pc, #228]	; 88d8 <cq_init+0x194>
    87f0:	e3a03019 	mov	r3, #25
    87f4:	eb000120 	bl	8c7c <printk>
    87f8:	eb0002a0 	bl	9280 <rpi_reboot>

static inline unsigned cq_nelem(cq_t *q) { return (q->head - q->tail) % CQ_N; }
    87fc:	e59f30c0 	ldr	r3, [pc, #192]	; 88c4 <cq_init+0x180>
    8800:	e7942003 	ldr	r2, [r4, r3]
    8804:	e2833004 	add	r3, r3, #4
    8808:	e7943003 	ldr	r3, [r4, r3]
    880c:	e0633002 	rsb	r3, r3, r2
    assert(cq_nelem(c) == 0);
    8810:	e1b03983 	lsls	r3, r3, #19
    8814:	0a000005 	beq	8830 <cq_init+0xec>
    8818:	e59f00c0 	ldr	r0, [pc, #192]	; 88e0 <cq_init+0x19c>
    881c:	e59f10b0 	ldr	r1, [pc, #176]	; 88d4 <cq_init+0x190>
    8820:	e59f20b0 	ldr	r2, [pc, #176]	; 88d8 <cq_init+0x194>
    8824:	e3a0301a 	mov	r3, #26
    8828:	eb000113 	bl	8c7c <printk>
    882c:	eb000293 	bl	9280 <rpi_reboot>
void cq_print(cq_t *c);

/*************************************************************************************
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }
    8830:	e59f308c 	ldr	r3, [pc, #140]	; 88c4 <cq_init+0x180>
    8834:	e7942003 	ldr	r2, [r4, r3]
    8838:	e2833004 	add	r3, r3, #4
    883c:	e7943003 	ldr	r3, [r4, r3]
static inline unsigned cq_nelem(cq_t *q) { return (q->head - q->tail) % CQ_N; }
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }

// not blocking: wait: this never calls getc?
static inline int cq_pop_nonblock(cq_t *c, cqe_t *e) {
    if(cq_empty(c))
    8840:	e1520003 	cmp	r2, r3
    8844:	0a000009 	beq	8870 <cq_init+0x12c>
        return 0;
    unsigned tail = c->tail;
    8848:	e59f3070 	ldr	r3, [pc, #112]	; 88c0 <cq_init+0x17c>
    884c:	e7942003 	ldr	r2, [r4, r3]
    *e = c->c_buf[tail];
    8850:	e7d41002 	ldrb	r1, [r4, r2]
    8854:	e6ef1071 	uxtb	r1, r1
    c->tail = (tail+1)%CQ_N;
    8858:	e2822001 	add	r2, r2, #1
    885c:	e1a02982 	lsl	r2, r2, #19
    8860:	e1a029a2 	lsr	r2, r2, #19
    8864:	e7842003 	str	r2, [r4, r3]
    return 1;
    8868:	e3a03001 	mov	r3, #1
    886c:	ea000001 	b	8878 <cq_init+0x134>
    cqe_t e = 0x12;
    8870:	e3a01012 	mov	r1, #18
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }

// not blocking: wait: this never calls getc?
static inline int cq_pop_nonblock(cq_t *c, cqe_t *e) {
    if(cq_empty(c))
        return 0;
    8874:	e3a03000 	mov	r3, #0
    assert(cq_pop_nonblock(c,&e) == 0 && e == 0x12);
    8878:	e3530000 	cmp	r3, #0
    887c:	1a000002 	bne	888c <cq_init+0x148>
    8880:	e3510012 	cmp	r1, #18
    8884:	0a000002 	beq	8894 <cq_init+0x150>
    8888:	ea000002 	b	8898 <cq_init+0x154>
    888c:	e3a03000 	mov	r3, #0
    8890:	ea000000 	b	8898 <cq_init+0x154>
    8894:	e3a03001 	mov	r3, #1
    8898:	e3530000 	cmp	r3, #0
    889c:	18bd8038 	popne	{r3, r4, r5, pc}
    88a0:	e59f003c 	ldr	r0, [pc, #60]	; 88e4 <cq_init+0x1a0>
    88a4:	e59f1028 	ldr	r1, [pc, #40]	; 88d4 <cq_init+0x190>
    88a8:	e59f2028 	ldr	r2, [pc, #40]	; 88d8 <cq_init+0x194>
    88ac:	e3a0301c 	mov	r3, #28
    88b0:	eb0000f1 	bl	8c7c <printk>
    88b4:	eb000271 	bl	9280 <rpi_reboot>
    88b8:	00002014 	andeq	r2, r0, r4, lsl r0
    88bc:	12345678 	eorsne	r5, r4, #120, 12	; 0x7800000
    88c0:	00002008 	andeq	r2, r0, r8
    88c4:	00002004 	andeq	r2, r0, r4
    88c8:	0000200c 	andeq	r2, r0, ip
    88cc:	00002010 	andeq	r2, r0, r0, lsl r0
    88d0:	00009bc4 	andeq	r9, r0, r4, asr #23
    88d4:	00009b94 	muleq	r0, r4, fp
    88d8:	00009b38 	andeq	r9, r0, r8, lsr fp
    88dc:	00009be0 	andeq	r9, r0, r0, ror #23
    88e0:	00009bfc 	strdeq	r9, [r0], -ip
    88e4:	00009c20 	andeq	r9, r0, r0, lsr #24

000088e8 <cq_pop>:
    assert(sz == cq_nelem(c));
    return 1;
}

// called from user space.
cqe_t cq_pop(cq_t *c) {
    88e8:	e92d0070 	push	{r4, r5, r6}
    88ec:	e1a03000 	mov	r3, r0
void cq_print(cq_t *c);

/*************************************************************************************
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }
    88f0:	e59f4054 	ldr	r4, [pc, #84]	; 894c <cq_pop+0x64>
    88f4:	e59f2054 	ldr	r2, [pc, #84]	; 8950 <cq_pop+0x68>
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }

// not blocking: wait: this never calls getc?
static inline int cq_pop_nonblock(cq_t *c, cqe_t *e) {
    if(cq_empty(c))
        return 0;
    88f8:	e3a06000 	mov	r6, #0
    unsigned tail = c->tail;
    *e = c->c_buf[tail];
    c->tail = (tail+1)%CQ_N;
    return 1;
    88fc:	e3a00001 	mov	r0, #1
void cq_print(cq_t *c);

/*************************************************************************************
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }
    8900:	e793c004 	ldr	ip, [r3, r4]
    8904:	e7931002 	ldr	r1, [r3, r2]
static inline unsigned cq_nelem(cq_t *q) { return (q->head - q->tail) % CQ_N; }
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }

// not blocking: wait: this never calls getc?
static inline int cq_pop_nonblock(cq_t *c, cqe_t *e) {
    if(cq_empty(c))
    8908:	e15c0001 	cmp	ip, r1
    890c:	0a000008 	beq	8934 <cq_pop+0x4c>
        return 0;
    unsigned tail = c->tail;
    8910:	e7931002 	ldr	r1, [r3, r2]
    *e = c->c_buf[tail];
    8914:	e7d35001 	ldrb	r5, [r3, r1]
    8918:	e6ef5075 	uxtb	r5, r5
    c->tail = (tail+1)%CQ_N;
    891c:	e2811001 	add	r1, r1, #1
    8920:	e1a01981 	lsl	r1, r1, #19
    8924:	e1a019a1 	lsr	r1, r1, #19
    8928:	e7831002 	str	r1, [r3, r2]
    return 1;
    892c:	e1a01000 	mov	r1, r0
    8930:	ea000000 	b	8938 <cq_pop+0x50>
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }

// not blocking: wait: this never calls getc?
static inline int cq_pop_nonblock(cq_t *c, cqe_t *e) {
    if(cq_empty(c))
        return 0;
    8934:	e1a01006 	mov	r1, r6
    cqe_t e;

	// wait til interrupt puts something here: if interrupts not enabled,
    // this will deadlock.
    while(!cq_pop_nonblock(c,&e))
    8938:	e3510000 	cmp	r1, #0
    893c:	0affffef 	beq	8900 <cq_pop+0x18>
        ;
        // panic("will deadlock: interrupts not enabled [FIXME]\n");
    return e;
}
    8940:	e1a00005 	mov	r0, r5
    8944:	e8bd0070 	pop	{r4, r5, r6}
    8948:	e12fff1e 	bx	lr
    894c:	00002004 	andeq	r2, r0, r4
    8950:	00002008 	andeq	r2, r0, r8

00008954 <cq_pop_n>:

void cq_pop_n(cq_t *c, void *data, unsigned n) {
    8954:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    8958:	e1a07000 	mov	r7, r0
    895c:	e1a06001 	mov	r6, r1
    8960:	e1a05002 	mov	r5, r2
    cqe_t *p = data;

    for(int i = 0; i < n; i++)
    8964:	e3a04000 	mov	r4, #0
    8968:	ea000003 	b	897c <cq_pop_n+0x28>
        p[i] = cq_pop(c);
    896c:	e1a00007 	mov	r0, r7
    8970:	ebffffdc 	bl	88e8 <cq_pop>
    8974:	e7c60004 	strb	r0, [r6, r4]
}

void cq_pop_n(cq_t *c, void *data, unsigned n) {
    cqe_t *p = data;

    for(int i = 0; i < n; i++)
    8978:	e2844001 	add	r4, r4, #1
    897c:	e1540005 	cmp	r4, r5
    8980:	3afffff9 	bcc	896c <cq_pop_n+0x18>
        p[i] = cq_pop(c);
}
    8984:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

00008988 <cq_pop_n_noblk>:
    assert(cq_nelem(c) == 0);
    cqe_t e = 0x12;
    assert(cq_pop_nonblock(c,&e) == 0 && e == 0x12);
}

int cq_pop_n_noblk(cq_t *q, void *data, unsigned n) {
    8988:	e92d4070 	push	{r4, r5, r6, lr}
    898c:	e1a04000 	mov	r4, r0
    8990:	e1a06001 	mov	r6, r1
    8994:	e1a05002 	mov	r5, r2
    cq_ok(q);
    8998:	ebffff59 	bl	8704 <cq_ok>
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }

// if adding 1 to head = tail, then we have no space.
static inline int cq_full(cq_t *q) { return (q->head+1) % CQ_N == q->tail; }

static inline unsigned cq_nelem(cq_t *q) { return (q->head - q->tail) % CQ_N; }
    899c:	e59f3038 	ldr	r3, [pc, #56]	; 89dc <cq_pop_n_noblk+0x54>
    89a0:	e7942003 	ldr	r2, [r4, r3]
    89a4:	e2833004 	add	r3, r3, #4
    89a8:	e7943003 	ldr	r3, [r4, r3]
    89ac:	e0633002 	rsb	r3, r3, r2
    89b0:	e1a03983 	lsl	r3, r3, #19
    if(cq_nelem(q) < n)
    89b4:	e15509a3 	cmp	r5, r3, lsr #19
    89b8:	8a000005 	bhi	89d4 <cq_pop_n_noblk+0x4c>
        return 0;
    cq_pop_n(q,data,n);
    89bc:	e1a00004 	mov	r0, r4
    89c0:	e1a01006 	mov	r1, r6
    89c4:	e1a02005 	mov	r2, r5
    89c8:	ebffffe1 	bl	8954 <cq_pop_n>
    return 1;
    89cc:	e3a00001 	mov	r0, #1
    89d0:	e8bd8070 	pop	{r4, r5, r6, pc}
}

int cq_pop_n_noblk(cq_t *q, void *data, unsigned n) {
    cq_ok(q);
    if(cq_nelem(q) < n)
        return 0;
    89d4:	e3a00000 	mov	r0, #0
    cq_pop_n(q,data,n);
    return 1;
}
    89d8:	e8bd8070 	pop	{r4, r5, r6, pc}
    89dc:	00002004 	andeq	r2, r0, r4

000089e0 <cq_peek_n>:

// non-destructively peek ahead <n> entries.
int cq_peek_n(cq_t *c, cqe_t *v, unsigned n) {
    89e0:	e92d4070 	push	{r4, r5, r6, lr}
    89e4:	e1a04000 	mov	r4, r0
    89e8:	e59f307c 	ldr	r3, [pc, #124]	; 8a6c <cq_peek_n+0x8c>
    89ec:	e7905003 	ldr	r5, [r0, r3]
    89f0:	e2833004 	add	r3, r3, #4
    89f4:	e7903003 	ldr	r3, [r0, r3]
    89f8:	e0635005 	rsb	r5, r3, r5
    89fc:	e1a05985 	lsl	r5, r5, #19
    8a00:	e1a059a5 	lsr	r5, r5, #19
    int sz = cq_nelem(c);
    if(n > sz)
    8a04:	e1520005 	cmp	r2, r5
    8a08:	8a000013 	bhi	8a5c <cq_peek_n+0x7c>
        return 0;
    unsigned tail = c->tail;
    8a0c:	e59f305c 	ldr	r3, [pc, #92]	; 8a70 <cq_peek_n+0x90>
    8a10:	e7906003 	ldr	r6, [r0, r3]
    if(!cq_pop_n_noblk(c, v, n))
    8a14:	ebffffdb 	bl	8988 <cq_pop_n_noblk>
    8a18:	e3500000 	cmp	r0, #0
    8a1c:	08bd8070 	popeq	{r4, r5, r6, pc}
        return 0;
    c->tail = tail;
    8a20:	e59f3048 	ldr	r3, [pc, #72]	; 8a70 <cq_peek_n+0x90>
    8a24:	e7846003 	str	r6, [r4, r3]
    8a28:	e59f203c 	ldr	r2, [pc, #60]	; 8a6c <cq_peek_n+0x8c>
    8a2c:	e7942002 	ldr	r2, [r4, r2]
    8a30:	e7943003 	ldr	r3, [r4, r3]
    8a34:	e0633002 	rsb	r3, r3, r2
    8a38:	e1a03983 	lsl	r3, r3, #19
    assert(sz == cq_nelem(c));
    8a3c:	e15509a3 	cmp	r5, r3, lsr #19
    8a40:	0a000007 	beq	8a64 <cq_peek_n+0x84>
    8a44:	e59f0028 	ldr	r0, [pc, #40]	; 8a74 <cq_peek_n+0x94>
    8a48:	e59f1028 	ldr	r1, [pc, #40]	; 8a78 <cq_peek_n+0x98>
    8a4c:	e59f2028 	ldr	r2, [pc, #40]	; 8a7c <cq_peek_n+0x9c>
    8a50:	e3a03030 	mov	r3, #48	; 0x30
    8a54:	eb000088 	bl	8c7c <printk>
    8a58:	eb000208 	bl	9280 <rpi_reboot>

// non-destructively peek ahead <n> entries.
int cq_peek_n(cq_t *c, cqe_t *v, unsigned n) {
    int sz = cq_nelem(c);
    if(n > sz)
        return 0;
    8a5c:	e3a00000 	mov	r0, #0
    8a60:	e8bd8070 	pop	{r4, r5, r6, pc}
    unsigned tail = c->tail;
    if(!cq_pop_n_noblk(c, v, n))
        return 0;
    c->tail = tail;
    assert(sz == cq_nelem(c));
    return 1;
    8a64:	e3a00001 	mov	r0, #1
}
    8a68:	e8bd8070 	pop	{r4, r5, r6, pc}
    8a6c:	00002004 	andeq	r2, r0, r4
    8a70:	00002008 	andeq	r2, r0, r8
    8a74:	00009c58 	andeq	r9, r0, r8, asr ip
    8a78:	00009b94 	muleq	r0, r4, fp
    8a7c:	00009b40 	andeq	r9, r0, r0, asr #22

00008a80 <cq_push_n>:

    for(int i = 0; i < n; i++)
        p[i] = cq_pop(c);
}

int cq_push_n(cq_t *c, void *data, unsigned n) {
    8a80:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8a84:	e59f30f8 	ldr	r3, [pc, #248]	; 8b84 <cq_push_n+0x104>
    8a88:	e790c003 	ldr	ip, [r0, r3]
    8a8c:	e2833004 	add	r3, r3, #4
    8a90:	e7903003 	ldr	r3, [r0, r3]
    8a94:	e063300c 	rsb	r3, r3, ip
    8a98:	e1a03983 	lsl	r3, r3, #19
    8a9c:	e1a039a3 	lsr	r3, r3, #19
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }
    8aa0:	e2633a02 	rsb	r3, r3, #8192	; 0x2000
    cqe_t *p = data;

    if(cq_nspace(c) < n)
    8aa4:	e1520003 	cmp	r2, r3
    8aa8:	8a00002f 	bhi	8b6c <cq_push_n+0xec>
    8aac:	e3a03000 	mov	r3, #0
    return 1;
}

// non-blocking push.
static inline int cq_push(cq_t *c, cqe_t x) {
    unsigned head = c->head;
    8ab0:	e59fc0cc 	ldr	ip, [pc, #204]	; 8b84 <cq_push_n+0x104>
    unsigned tail = c->tail;
    8ab4:	e59f50cc 	ldr	r5, [pc, #204]	; 8b88 <cq_push_n+0x108>
    if(cq_full(c)) 
        return 0;
    8ab8:	e1a09003 	mov	r9, r3
    c->c_buf[head] = x;
    c->head = (head + 1) % CQ_N;
    return 1;
    8abc:	e3a08001 	mov	r8, #1
    8ac0:	ea000019 	b	8b2c <cq_push_n+0xac>
        return 0;
    for(int i = 0; i < n; i++)
        if(!cq_push(c, p[i]))
    8ac4:	e7d1a003 	ldrb	sl, [r1, r3]
    return 1;
}

// non-blocking push.
static inline int cq_push(cq_t *c, cqe_t x) {
    unsigned head = c->head;
    8ac8:	e790400c 	ldr	r4, [r0, ip]
    unsigned tail = c->tail;
    8acc:	e7906005 	ldr	r6, [r0, r5]
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }

// if adding 1 to head = tail, then we have no space.
static inline int cq_full(cq_t *q) { return (q->head+1) % CQ_N == q->tail; }
    8ad0:	e790700c 	ldr	r7, [r0, ip]
    8ad4:	e2877001 	add	r7, r7, #1
    8ad8:	e1a07987 	lsl	r7, r7, #19
    8adc:	e7906005 	ldr	r6, [r0, r5]

// non-blocking push.
static inline int cq_push(cq_t *c, cqe_t x) {
    unsigned head = c->head;
    unsigned tail = c->tail;
    if(cq_full(c)) 
    8ae0:	e15609a7 	cmp	r6, r7, lsr #19
    8ae4:	0a000006 	beq	8b04 <cq_push_n+0x84>
        return 0;
    c->c_buf[head] = x;
    8ae8:	e7c0a004 	strb	sl, [r0, r4]
    c->head = (head + 1) % CQ_N;
    8aec:	e2844001 	add	r4, r4, #1
    8af0:	e1a04984 	lsl	r4, r4, #19
    8af4:	e1a049a4 	lsr	r4, r4, #19
    8af8:	e780400c 	str	r4, [r0, ip]
    return 1;
    8afc:	e1a04008 	mov	r4, r8
    8b00:	ea000000 	b	8b08 <cq_push_n+0x88>
// non-blocking push.
static inline int cq_push(cq_t *c, cqe_t x) {
    unsigned head = c->head;
    unsigned tail = c->tail;
    if(cq_full(c)) 
        return 0;
    8b04:	e1a04009 	mov	r4, r9
    8b08:	e3540000 	cmp	r4, #0
    8b0c:	1a000005 	bne	8b28 <cq_push_n+0xa8>
            panic("not handling this\n");
    8b10:	e59f0074 	ldr	r0, [pc, #116]	; 8b8c <cq_push_n+0x10c>
    8b14:	e59f1074 	ldr	r1, [pc, #116]	; 8b90 <cq_push_n+0x110>
    8b18:	e59f2074 	ldr	r2, [pc, #116]	; 8b94 <cq_push_n+0x114>
    8b1c:	e3a0304e 	mov	r3, #78	; 0x4e
    8b20:	eb000055 	bl	8c7c <printk>
    8b24:	eb0001d5 	bl	9280 <rpi_reboot>
int cq_push_n(cq_t *c, void *data, unsigned n) {
    cqe_t *p = data;

    if(cq_nspace(c) < n)
        return 0;
    for(int i = 0; i < n; i++)
    8b28:	e2833001 	add	r3, r3, #1
    8b2c:	e1530002 	cmp	r3, r2
    8b30:	3affffe3 	bcc	8ac4 <cq_push_n+0x44>
        if(!cq_push(c, p[i]))
            panic("not handling this\n");
    if(n)
    8b34:	e3520000 	cmp	r2, #0
    8b38:	0a00000d 	beq	8b74 <cq_push_n+0xf4>
void cq_print(cq_t *c);

/*************************************************************************************
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }
    8b3c:	e59f3040 	ldr	r3, [pc, #64]	; 8b84 <cq_push_n+0x104>
    8b40:	e7902003 	ldr	r2, [r0, r3]
    8b44:	e2833004 	add	r3, r3, #4
    8b48:	e7903003 	ldr	r3, [r0, r3]
        assert(!cq_empty(c));
    8b4c:	e1520003 	cmp	r2, r3
    8b50:	1a000009 	bne	8b7c <cq_push_n+0xfc>
    8b54:	e59f003c 	ldr	r0, [pc, #60]	; 8b98 <cq_push_n+0x118>
    8b58:	e59f1030 	ldr	r1, [pc, #48]	; 8b90 <cq_push_n+0x110>
    8b5c:	e59f2030 	ldr	r2, [pc, #48]	; 8b94 <cq_push_n+0x114>
    8b60:	e3a03050 	mov	r3, #80	; 0x50
    8b64:	eb000044 	bl	8c7c <printk>
    8b68:	eb0001c4 	bl	9280 <rpi_reboot>

int cq_push_n(cq_t *c, void *data, unsigned n) {
    cqe_t *p = data;

    if(cq_nspace(c) < n)
        return 0;
    8b6c:	e3a00000 	mov	r0, #0
    8b70:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    for(int i = 0; i < n; i++)
        if(!cq_push(c, p[i]))
            panic("not handling this\n");
    if(n)
        assert(!cq_empty(c));
    return 1;
    8b74:	e3a00001 	mov	r0, #1
    8b78:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8b7c:	e3a00001 	mov	r0, #1
}
    8b80:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8b84:	00002004 	andeq	r2, r0, r4
    8b88:	00002008 	andeq	r2, r0, r8
    8b8c:	00009c7c 	andeq	r9, r0, ip, ror ip
    8b90:	00009b94 	muleq	r0, r4, fp
    8b94:	00009b4c 	andeq	r9, r0, ip, asr #22
    8b98:	00009ca0 	andeq	r9, r0, r0, lsr #25

00008b9c <callee_save>:
    8b9c:	e12fff1e 	bx	lr

00008ba0 <store_one_asm>:
    8ba0:	e5801000 	str	r1, [r0]
    8ba4:	e12fff1e 	bx	lr

00008ba8 <check_callee_save>:
    8ba8:	e3a04004 	mov	r4, #4
    8bac:	e3a05005 	mov	r5, #5
    8bb0:	e3a06006 	mov	r6, #6
    8bb4:	e3a07007 	mov	r7, #7
    8bb8:	e3a08008 	mov	r8, #8
    8bbc:	e3a09009 	mov	r9, #9
    8bc0:	e3a0a00a 	mov	sl, #10
    8bc4:	e3a0b00b 	mov	fp, #11
    8bc8:	e3a0c00c 	mov	ip, #12
    8bcc:	e9202000 	stmdb	r0!, {sp}
    8bd0:	e9204ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00008bd4 <cswitch>:
    8bd4:	e5804000 	str	r4, [r0]
    8bd8:	e5805004 	str	r5, [r0, #4]
    8bdc:	e5806008 	str	r6, [r0, #8]
    8be0:	e580700c 	str	r7, [r0, #12]
    8be4:	e5808010 	str	r8, [r0, #16]
    8be8:	e5809014 	str	r9, [r0, #20]
    8bec:	e580a018 	str	sl, [r0, #24]
    8bf0:	e580b01c 	str	fp, [r0, #28]
    8bf4:	e580c020 	str	ip, [r0, #32]
    8bf8:	e580e024 	str	lr, [r0, #36]	; 0x24
    8bfc:	e580d028 	str	sp, [r0, #40]	; 0x28
    8c00:	e3a04004 	mov	r4, #4
    8c04:	e3a05005 	mov	r5, #5
    8c08:	e3a06006 	mov	r6, #6
    8c0c:	e3a07007 	mov	r7, #7
    8c10:	e3a08008 	mov	r8, #8
    8c14:	e3a09009 	mov	r9, #9
    8c18:	e3a0a00a 	mov	sl, #10
    8c1c:	e3a0b00b 	mov	fp, #11
    8c20:	e3a0c00c 	mov	ip, #12
    8c24:	e3a0d00d 	mov	sp, #13
    8c28:	e3a0e00e 	mov	lr, #14
    8c2c:	e5914000 	ldr	r4, [r1]
    8c30:	e5915004 	ldr	r5, [r1, #4]
    8c34:	e5916008 	ldr	r6, [r1, #8]
    8c38:	e591700c 	ldr	r7, [r1, #12]
    8c3c:	e5918010 	ldr	r8, [r1, #16]
    8c40:	e5919014 	ldr	r9, [r1, #20]
    8c44:	e591a018 	ldr	sl, [r1, #24]
    8c48:	e591b01c 	ldr	fp, [r1, #28]
    8c4c:	e591c020 	ldr	ip, [r1, #32]
    8c50:	e591e024 	ldr	lr, [r1, #36]	; 0x24
    8c54:	e591d028 	ldr	sp, [r1, #40]	; 0x28
    8c58:	e12fff1e 	bx	lr

00008c5c <memset>:
#include <string.h>

void *memset(void *_p, int c, size_t n) {
    char *p = _p, *e = p + n;
    8c5c:	e0802002 	add	r2, r0, r2
    8c60:	e1a03000 	mov	r3, r0

    while(p < e)
    8c64:	ea000001 	b	8c70 <memset+0x14>
        *p++ = c;
    8c68:	e5c31000 	strb	r1, [r3]
    8c6c:	e2833001 	add	r3, r3, #1
#include <string.h>

void *memset(void *_p, int c, size_t n) {
    char *p = _p, *e = p + n;

    while(p < e)
    8c70:	e1530002 	cmp	r3, r2
    8c74:	3afffffb 	bcc	8c68 <memset+0xc>
        *p++ = c;
    return _p;
}
    8c78:	e12fff1e 	bx	lr

00008c7c <printk>:
#include <stdarg.h>

#include "rpi.h"
#include "va-printk.h"

int printk(const char *fmt, ...) {
    8c7c:	e92d000f 	push	{r0, r1, r2, r3}
    8c80:	e92d4030 	push	{r4, r5, lr}
    8c84:	e24dd00c 	sub	sp, sp, #12
    // this is a really huge buffer for a pi.   could do this better.
    static char buf[1024];
    va_list args;

    va_start(args, fmt);
    8c88:	e28d301c 	add	r3, sp, #28
    8c8c:	e58d3004 	str	r3, [sp, #4]
        int sz = va_printk(buf, sizeof buf, fmt, args);
    8c90:	e59f4034 	ldr	r4, [pc, #52]	; 8ccc <printk+0x50>
    8c94:	e1a00004 	mov	r0, r4
    8c98:	e3a01b01 	mov	r1, #1024	; 0x400
    8c9c:	e59d2018 	ldr	r2, [sp, #24]
    8ca0:	eb0000b2 	bl	8f70 <va_printk>
    8ca4:	e1a05000 	mov	r5, r0
    va_end(args);


#if 1
    putk(buf);
    8ca8:	e59f3020 	ldr	r3, [pc, #32]	; 8cd0 <printk+0x54>
    8cac:	e5933000 	ldr	r3, [r3]
    8cb0:	e1a00004 	mov	r0, r4
    8cb4:	e12fff33 	blx	r3
    int i;
    for(i = 0; buf[i]; i++)
        rpi_putchar(buf[i]);
#endif
    return sz;
}
    8cb8:	e1a00005 	mov	r0, r5
    8cbc:	e28dd00c 	add	sp, sp, #12
    8cc0:	e8bd4030 	pop	{r4, r5, lr}
    8cc4:	e28dd010 	add	sp, sp, #16
    8cc8:	e12fff1e 	bx	lr
    8ccc:	00009f10 	andeq	r9, r0, r0, lsl pc
    8cd0:	000097c4 	andeq	r9, r0, r4, asr #15

00008cd4 <internal_putk>:
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    8cd4:	e92d4038 	push	{r3, r4, r5, lr}
    8cd8:	e1a04000 	mov	r4, r0
    for(; *p; p++)
        rpi_putchar(*p);
    8cdc:	e59f5020 	ldr	r5, [pc, #32]	; 8d04 <internal_putk+0x30>
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    8ce0:	ea000002 	b	8cf0 <internal_putk+0x1c>
        rpi_putchar(*p);
    8ce4:	e5953000 	ldr	r3, [r5]
    8ce8:	e12fff33 	blx	r3
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    8cec:	e2844001 	add	r4, r4, #1
    8cf0:	e5d40000 	ldrb	r0, [r4]
    8cf4:	e3500000 	cmp	r0, #0
    8cf8:	1afffff9 	bne	8ce4 <internal_putk+0x10>
        rpi_putchar(*p);
//  we were adding this.
//  rpi_putchar('\n');
    return 1;
}
    8cfc:	e3a00001 	mov	r0, #1
    8d00:	e8bd8038 	pop	{r3, r4, r5, pc}
    8d04:	000097c8 	andeq	r9, r0, r8, asr #15

00008d08 <isdigit>:
    if(puts_fp)
        putk = puts_fp;
}

// XXX: check sign promotion.
static int isdigit(int c) { return c >= '0' && c <= '9'; }
    8d08:	e2400030 	sub	r0, r0, #48	; 0x30
    8d0c:	e3500009 	cmp	r0, #9
    8d10:	83a00000 	movhi	r0, #0
    8d14:	93a00001 	movls	r0, #1
    8d18:	e12fff1e 	bx	lr

00008d1c <pad>:

// don't move: can't be inlined, gcc seems to have a bug.
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
    8d1c:	e0611000 	rsb	r1, r1, r0
	// pad with leading spaces
	for(; len < width; len++)
		*p++ = ' ';
    8d20:	e3a03020 	mov	r3, #32
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8d24:	ea000002 	b	8d34 <pad+0x18>
		*p++ = ' ';
    8d28:	e5c03000 	strb	r3, [r0]
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8d2c:	e2811001 	add	r1, r1, #1
		*p++ = ' ';
    8d30:	e2800001 	add	r0, r0, #1
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8d34:	e1510002 	cmp	r1, r2
    8d38:	bafffffa 	blt	8d28 <pad+0xc>
		*p++ = ' ';
	*p = 0;
    8d3c:	e3a03000 	mov	r3, #0
    8d40:	e5c03000 	strb	r3, [r0]
	return p;
}
    8d44:	e12fff1e 	bx	lr

00008d48 <reverse>:

static char* reverse(char *dst, int n, char *p, char *start) {
	// drop the lower chars if the string is too big.
	int len = p - start + 1; // include \0
    8d48:	e063c002 	rsb	ip, r3, r2
    8d4c:	e28cc001 	add	ip, ip, #1
	if(len > n)
    8d50:	e15c0001 	cmp	ip, r1
		start += (len - n);
    8d54:	c061100c 	rsbgt	r1, r1, ip
    8d58:	c0833001 	addgt	r3, r3, r1

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    8d5c:	e2422001 	sub	r2, r2, #1
    8d60:	e1a01000 	mov	r1, r0
    8d64:	ea000002 	b	8d74 <reverse+0x2c>
		*dst++ = *p;
    8d68:	e452c001 	ldrb	ip, [r2], #-1
    8d6c:	e5c1c000 	strb	ip, [r1]
    8d70:	e2811001 	add	r1, r1, #1
		start += (len - n);

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    8d74:	e1520003 	cmp	r2, r3
    8d78:	2afffffa 	bcs	8d68 <reverse+0x20>
		*dst++ = *p;
	*dst++ = 0;
    8d7c:	e3a03000 	mov	r3, #0
    8d80:	e5c13000 	strb	r3, [r1]

	return s;
}
    8d84:	e12fff1e 	bx	lr

00008d88 <emit>:

static char* emit(unsigned base, char *dst, int n, int val, int width, int signed_p) {
    8d88:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8d8c:	e24dd040 	sub	sp, sp, #64	; 0x40
    8d90:	e1a05001 	mov	r5, r1
    8d94:	e1a04002 	mov	r4, r2
    8d98:	e59d2058 	ldr	r2, [sp, #88]	; 0x58
	// XXX: constrain width to be >= bit size: can change this.
	if(width > n)
    8d9c:	e1520004 	cmp	r2, r4
		width = n - 1;
    8da0:	c2442001 	subgt	r2, r4, #1

	char buf[64], *p = buf; 
	unsigned u = val;
    8da4:	e1a0c003 	mov	ip, r3

	switch(base) { 
    8da8:	e2400002 	sub	r0, r0, #2
    8dac:	e350000e 	cmp	r0, #14
    8db0:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
    8db4:	ea000042 	b	8ec4 <emit+0x13c>
    8db8:	00008e9c 	muleq	r0, ip, lr
    8dbc:	00008ec4 	andeq	r8, r0, r4, asr #29
    8dc0:	00008ec4 	andeq	r8, r0, r4, asr #29
    8dc4:	00008ec4 	andeq	r8, r0, r4, asr #29
    8dc8:	00008ec4 	andeq	r8, r0, r4, asr #29
    8dcc:	00008ec4 	andeq	r8, r0, r4, asr #29
    8dd0:	00008e90 	muleq	r0, r0, lr
    8dd4:	00008ec4 	andeq	r8, r0, r4, asr #29
    8dd8:	00008df4 	strdeq	r8, [r0], -r4
    8ddc:	00008ec4 	andeq	r8, r0, r4, asr #29
    8de0:	00008ec4 	andeq	r8, r0, r4, asr #29
    8de4:	00008ec4 	andeq	r8, r0, r4, asr #29
    8de8:	00008ec4 	andeq	r8, r0, r4, asr #29
    8dec:	00008ec4 	andeq	r8, r0, r4, asr #29
    8df0:	00008e68 	andeq	r8, r0, r8, ror #28
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
    8df4:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
    8df8:	e2911000 	adds	r1, r1, #0
    8dfc:	13a01001 	movne	r1, #1
    8e00:	e0111fa3 	ands	r1, r1, r3, lsr #31
				neg_p = 1;
				val = -val;
    8e04:	1263c000 	rsbne	ip, r3, #0
	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
				neg_p = 1;
    8e08:	13a08001 	movne	r8, #1
	unsigned u = val;

	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
    8e0c:	03a08000 	moveq	r8, #0
			if(val < 0 && signed_p) {
				neg_p = 1;
    8e10:	e1a0100d 	mov	r1, sp
				val = -val;
				u = val;
			}
			do { 
				*p++ = "0123456789"[u % 10];
    8e14:	e59f70e8 	ldr	r7, [pc, #232]	; 8f04 <emit+0x17c>
    8e18:	e59f60e8 	ldr	r6, [pc, #232]	; 8f08 <emit+0x180>
    8e1c:	ea000000 	b	8e24 <emit+0x9c>
    8e20:	e1a01003 	mov	r1, r3
    8e24:	e2813001 	add	r3, r1, #1
    8e28:	e08e0c97 	umull	r0, lr, r7, ip
    8e2c:	e1a0e1ae 	lsr	lr, lr, #3
    8e30:	e1a0000e 	mov	r0, lr
    8e34:	e08ee10e 	add	lr, lr, lr, lsl #2
    8e38:	e1a0e08e 	lsl	lr, lr, #1
    8e3c:	e06ee00c 	rsb	lr, lr, ip
    8e40:	e7d6c00e 	ldrb	ip, [r6, lr]
    8e44:	e5c1c000 	strb	ip, [r1]
			} while(u /= 10); 
    8e48:	e1a0c000 	mov	ip, r0
    8e4c:	e3500000 	cmp	r0, #0
    8e50:	1afffff2 	bne	8e20 <emit+0x98>
			if(neg_p)
    8e54:	e3580000 	cmp	r8, #0
				*p++ = '-';
    8e58:	12813002 	addne	r3, r1, #2
    8e5c:	13a0002d 	movne	r0, #45	; 0x2d
    8e60:	15c10001 	strbne	r0, [r1, #1]
    8e64:	ea00001c 	b	8edc <emit+0x154>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    8e68:	e1a0e00d 	mov	lr, sp
			break;
		}
		case 16:
			u = val;
                        do {
                                *p++ = "0123456789abcdef"[u % 16];
    8e6c:	e59f0098 	ldr	r0, [pc, #152]	; 8f0c <emit+0x184>
    8e70:	e28e3001 	add	r3, lr, #1
    8e74:	e20c100f 	and	r1, ip, #15
    8e78:	e7d01001 	ldrb	r1, [r0, r1]
    8e7c:	e5ce1000 	strb	r1, [lr]
    8e80:	e1a0e003 	mov	lr, r3
                        } while(u /= 16);
    8e84:	e1b0c22c 	lsrs	ip, ip, #4
    8e88:	1afffff8 	bne	8e70 <emit+0xe8>
    8e8c:	ea000012 	b	8edc <emit+0x154>
                        break;
		// just a single char
		case 8:
			*p++ = val;
    8e90:	e5cd3000 	strb	r3, [sp]
    8e94:	e28d3001 	add	r3, sp, #1
			break;
    8e98:	ea00000f 	b	8edc <emit+0x154>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    8e9c:	e1a0e00d 	mov	lr, sp
#if 0
			for(int i = 0; i < 32; i++)
				*p++ = "01"[(u & (1<<i)) != 0];
#else
                        do {
                        	*p++ = "01"[u % 2];
    8ea0:	e59f0068 	ldr	r0, [pc, #104]	; 8f10 <emit+0x188>
    8ea4:	e28e3001 	add	r3, lr, #1
    8ea8:	e20c1001 	and	r1, ip, #1
    8eac:	e7d01001 	ldrb	r1, [r0, r1]
    8eb0:	e5ce1000 	strb	r1, [lr]
    8eb4:	e1a0e003 	mov	lr, r3
			} while(u /= 2);
    8eb8:	e1b0c0ac 	lsrs	ip, ip, #1
    8ebc:	1afffff8 	bne	8ea4 <emit+0x11c>
    8ec0:	ea000005 	b	8edc <emit+0x154>
#endif
			break;
		default:
			assert(0);
    8ec4:	e59f0048 	ldr	r0, [pc, #72]	; 8f14 <emit+0x18c>
    8ec8:	e59f1048 	ldr	r1, [pc, #72]	; 8f18 <emit+0x190>
    8ecc:	e59f2048 	ldr	r2, [pc, #72]	; 8f1c <emit+0x194>
    8ed0:	e3a03075 	mov	r3, #117	; 0x75
    8ed4:	ebffff68 	bl	8c7c <printk>
    8ed8:	eb0000e8 	bl	9280 <rpi_reboot>
	}
	// number string is reversed, so re-reverse it.
	return reverse(dst, n, pad(p, buf, width), buf);
    8edc:	e1a00003 	mov	r0, r3
    8ee0:	e1a0100d 	mov	r1, sp
    8ee4:	ebffff8c 	bl	8d1c <pad>
    8ee8:	e1a02000 	mov	r2, r0
    8eec:	e1a00005 	mov	r0, r5
    8ef0:	e1a01004 	mov	r1, r4
    8ef4:	e1a0300d 	mov	r3, sp
    8ef8:	ebffff92 	bl	8d48 <reverse>
}
    8efc:	e28dd040 	add	sp, sp, #64	; 0x40
    8f00:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8f04:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    8f08:	00009d0c 	andeq	r9, r0, ip, lsl #26
    8f0c:	00009d18 	andeq	r9, r0, r8, lsl sp
    8f10:	00009d2c 	andeq	r9, r0, ip, lsr #26
    8f14:	00009ce4 	andeq	r9, r0, r4, ror #25
    8f18:	00009cf8 	strdeq	r9, [r0], -r8
    8f1c:	00009cc0 	andeq	r9, r0, r0, asr #25

00008f20 <rpi_set_output>:
// override this is going through the network.
int (*rpi_putchar)(int c) = internal_putchar;
#endif


void rpi_set_output(int (*putc_fp)(int), int (*puts_fp)(const char *)) {
    8f20:	e92d4008 	push	{r3, lr}
    assert(putc_fp);
    8f24:	e3500000 	cmp	r0, #0
    8f28:	1a000005 	bne	8f44 <rpi_set_output+0x24>
    8f2c:	e59f0028 	ldr	r0, [pc, #40]	; 8f5c <rpi_set_output+0x3c>
    8f30:	e59f1028 	ldr	r1, [pc, #40]	; 8f60 <rpi_set_output+0x40>
    8f34:	e59f2028 	ldr	r2, [pc, #40]	; 8f64 <rpi_set_output+0x44>
    8f38:	e3a03020 	mov	r3, #32
    8f3c:	ebffff4e 	bl	8c7c <printk>
    8f40:	eb0000ce 	bl	9280 <rpi_reboot>
    rpi_putchar = putc_fp;
    8f44:	e59f301c 	ldr	r3, [pc, #28]	; 8f68 <rpi_set_output+0x48>
    8f48:	e5830000 	str	r0, [r3]
    if(puts_fp)
    8f4c:	e3510000 	cmp	r1, #0
        putk = puts_fp;
    8f50:	159f3014 	ldrne	r3, [pc, #20]	; 8f6c <rpi_set_output+0x4c>
    8f54:	15831000 	strne	r1, [r3]
    8f58:	e8bd8008 	pop	{r3, pc}
    8f5c:	00009d30 	andeq	r9, r0, r0, lsr sp
    8f60:	00009cf8 	strdeq	r9, [r0], -r8
    8f64:	00009cc8 	andeq	r9, r0, r8, asr #25
    8f68:	000097c8 	andeq	r9, r0, r8, asr #15
    8f6c:	000097c4 	andeq	r9, r0, r4, asr #15

00008f70 <va_printk>:
	return reverse(dst, n, pad(p, buf, width), buf);
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
    8f70:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f74:	e24dd08c 	sub	sp, sp, #140	; 0x8c
    8f78:	e1a0b000 	mov	fp, r0
    8f7c:	e1a0a003 	mov	sl, r3
	char *p = buf, *e = buf + n - 1;
    8f80:	e2411001 	sub	r1, r1, #1
    8f84:	e0808001 	add	r8, r0, r1

	buf[0] = 0;
    8f88:	e3a03000 	mov	r3, #0
    8f8c:	e5c03000 	strb	r3, [r0]
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;
    8f90:	e1a04000 	mov	r4, r0

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    8f94:	ea000087 	b	91b8 <va_printk+0x248>
		if(*fmt != '%')
    8f98:	e3530025 	cmp	r3, #37	; 0x25
			*p++ = *fmt++;
    8f9c:	12822001 	addne	r2, r2, #1
    8fa0:	15c43000 	strbne	r3, [r4]
    8fa4:	12844001 	addne	r4, r4, #1
    8fa8:	1a000082 	bne	91b8 <va_printk+0x248>
		
		else if(fmt[1] == '%') {
    8fac:	e5d21001 	ldrb	r1, [r2, #1]
    8fb0:	e3510025 	cmp	r1, #37	; 0x25
			*p++ = *fmt;
    8fb4:	05c43000 	strbeq	r3, [r4]
			fmt+=2;
    8fb8:	02822002 	addeq	r2, r2, #2
	for(; *fmt && p < e; ) {
		if(*fmt != '%')
			*p++ = *fmt++;
		
		else if(fmt[1] == '%') {
			*p++ = *fmt;
    8fbc:	02844001 	addeq	r4, r4, #1
    8fc0:	0a00007c 	beq	91b8 <va_printk+0x248>
			fmt+=2;
		} else {	
			fmt++;
    8fc4:	e2826001 	add	r6, r2, #1

			char *s, num[128];
			unsigned width = 0;
    8fc8:	e3a07000 	mov	r7, #0

			while(isdigit(*fmt)) {
    8fcc:	ea000004 	b	8fe4 <va_printk+0x74>
				width = width*10 + *fmt - '0';
    8fd0:	e0877107 	add	r7, r7, r7, lsl #2
    8fd4:	e1a07087 	lsl	r7, r7, #1
    8fd8:	e0877005 	add	r7, r7, r5
    8fdc:	e2477030 	sub	r7, r7, #48	; 0x30
				fmt++;
    8fe0:	e2866001 	add	r6, r6, #1
			fmt++;

			char *s, num[128];
			unsigned width = 0;

			while(isdigit(*fmt)) {
    8fe4:	e5d65000 	ldrb	r5, [r6]
    8fe8:	e1a09005 	mov	r9, r5
    8fec:	e1a00005 	mov	r0, r5
    8ff0:	ebffff44 	bl	8d08 <isdigit>
    8ff4:	e3500000 	cmp	r0, #0
    8ff8:	1afffff4 	bne	8fd0 <va_printk+0x60>
				width = width*10 + *fmt - '0';
				fmt++;
			}
			assert(width < 32);
    8ffc:	e357001f 	cmp	r7, #31
    9000:	9a000005 	bls	901c <va_printk+0xac>
    9004:	e59f01d8 	ldr	r0, [pc, #472]	; 91e4 <va_printk+0x274>
    9008:	e59f11d8 	ldr	r1, [pc, #472]	; 91e8 <va_printk+0x278>
    900c:	e59f21d8 	ldr	r2, [pc, #472]	; 91ec <va_printk+0x27c>
    9010:	e3a03092 	mov	r3, #146	; 0x92
    9014:	ebffff18 	bl	8c7c <printk>
    9018:	eb000098 	bl	9280 <rpi_reboot>
			
			switch(*fmt) {
    901c:	e2455062 	sub	r5, r5, #98	; 0x62
    9020:	e3550016 	cmp	r5, #22
    9024:	979ff105 	ldrls	pc, [pc, r5, lsl #2]
    9028:	ea000051 	b	9174 <va_printk+0x204>
    902c:	00009118 	andeq	r9, r0, r8, lsl r1
    9030:	0000914c 	andeq	r9, r0, ip, asr #2
    9034:	000090a0 	andeq	r9, r0, r0, lsr #1
    9038:	00009174 	andeq	r9, r0, r4, ror r1
    903c:	00009088 	andeq	r9, r0, r8, lsl #1
    9040:	00009174 	andeq	r9, r0, r4, ror r1
    9044:	00009174 	andeq	r9, r0, r4, ror r1
    9048:	00009174 	andeq	r9, r0, r4, ror r1
    904c:	00009174 	andeq	r9, r0, r4, ror r1
    9050:	00009174 	andeq	r9, r0, r4, ror r1
    9054:	00009174 	andeq	r9, r0, r4, ror r1
    9058:	00009174 	andeq	r9, r0, r4, ror r1
    905c:	00009174 	andeq	r9, r0, r4, ror r1
    9060:	00009174 	andeq	r9, r0, r4, ror r1
    9064:	000090f0 	strdeq	r9, [r0], -r0
    9068:	00009174 	andeq	r9, r0, r4, ror r1
    906c:	00009174 	andeq	r9, r0, r4, ror r1
    9070:	00009140 	andeq	r9, r0, r0, asr #2
    9074:	00009174 	andeq	r9, r0, r4, ror r1
    9078:	000090c8 	andeq	r9, r0, r8, asr #1
    907c:	00009174 	andeq	r9, r0, r4, ror r1
    9080:	00009174 	andeq	r9, r0, r4, ror r1
    9084:	000090f0 	strdeq	r9, [r0], -r0
			case 'f':
			{
#ifndef RPI_FP_ENABLED
				panic("float not enabled!!!");
    9088:	e59f0160 	ldr	r0, [pc, #352]	; 91f0 <va_printk+0x280>
    908c:	e59f1154 	ldr	r1, [pc, #340]	; 91e8 <va_printk+0x278>
    9090:	e59f2154 	ldr	r2, [pc, #340]	; 91ec <va_printk+0x27c>
    9094:	e3a03098 	mov	r3, #152	; 0x98
    9098:	ebfffef7 	bl	8c7c <printk>
    909c:	eb000077 	bl	9280 <rpi_reboot>

				break;
#endif
			}
			case 'd':
				s = emit(10, num, 128, va_arg(args, int), width, 1);
    90a0:	e59a3000 	ldr	r3, [sl]
    90a4:	e28aa004 	add	sl, sl, #4
    90a8:	e58d7000 	str	r7, [sp]
    90ac:	e3a02001 	mov	r2, #1
    90b0:	e58d2004 	str	r2, [sp, #4]
    90b4:	e3a0000a 	mov	r0, #10
    90b8:	e28d1008 	add	r1, sp, #8
    90bc:	e3a02080 	mov	r2, #128	; 0x80
    90c0:	ebffff30 	bl	8d88 <emit>
				break;
    90c4:	ea000031 	b	9190 <va_printk+0x220>
			case 'u':
				s = emit(10, num, 128, va_arg(args, unsigned), width, 0);
    90c8:	e59a3000 	ldr	r3, [sl]
    90cc:	e28aa004 	add	sl, sl, #4
    90d0:	e58d7000 	str	r7, [sp]
    90d4:	e3a02000 	mov	r2, #0
    90d8:	e58d2004 	str	r2, [sp, #4]
    90dc:	e3a0000a 	mov	r0, #10
    90e0:	e28d1008 	add	r1, sp, #8
    90e4:	e3a02080 	mov	r2, #128	; 0x80
    90e8:	ebffff26 	bl	8d88 <emit>
				break;
    90ec:	ea000027 	b	9190 <va_printk+0x220>
			case 'p':
			case 'x':
				s = emit(16, num, 128, va_arg(args, unsigned), width, 0);
    90f0:	e59a3000 	ldr	r3, [sl]
    90f4:	e28aa004 	add	sl, sl, #4
    90f8:	e58d7000 	str	r7, [sp]
    90fc:	e3a02000 	mov	r2, #0
    9100:	e58d2004 	str	r2, [sp, #4]
    9104:	e3a00010 	mov	r0, #16
    9108:	e28d1008 	add	r1, sp, #8
    910c:	e3a02080 	mov	r2, #128	; 0x80
    9110:	ebffff1c 	bl	8d88 <emit>
				break;
    9114:	ea00001d 	b	9190 <va_printk+0x220>
			case 'b':
				s = emit(2, num, 128, va_arg(args, unsigned), width, 0);
    9118:	e59a3000 	ldr	r3, [sl]
    911c:	e28aa004 	add	sl, sl, #4
    9120:	e58d7000 	str	r7, [sp]
    9124:	e3a02000 	mov	r2, #0
    9128:	e58d2004 	str	r2, [sp, #4]
    912c:	e3a00002 	mov	r0, #2
    9130:	e28d1008 	add	r1, sp, #8
    9134:	e3a02080 	mov	r2, #128	; 0x80
    9138:	ebffff12 	bl	8d88 <emit>
				break;
    913c:	ea000013 	b	9190 <va_printk+0x220>
			case 's':
				s = va_arg(args, char *);
    9140:	e59a0000 	ldr	r0, [sl]
    9144:	e28aa004 	add	sl, sl, #4
				break;
    9148:	ea000010 	b	9190 <va_printk+0x220>
			case 'c':
				s = emit(8, num, 128, va_arg(args, int),width,0);
    914c:	e59a3000 	ldr	r3, [sl]
    9150:	e28aa004 	add	sl, sl, #4
    9154:	e58d7000 	str	r7, [sp]
    9158:	e3a02000 	mov	r2, #0
    915c:	e58d2004 	str	r2, [sp, #4]
    9160:	e3a00008 	mov	r0, #8
    9164:	e08d1000 	add	r1, sp, r0
    9168:	e3a02080 	mov	r2, #128	; 0x80
    916c:	ebffff05 	bl	8d88 <emit>
				break;
    9170:	ea000006 	b	9190 <va_printk+0x220>
			default: 
				panic("printk: not handling specifier '%c'\n", *fmt);
    9174:	e58d9000 	str	r9, [sp]
    9178:	e59f0074 	ldr	r0, [pc, #116]	; 91f4 <va_printk+0x284>
    917c:	e59f1064 	ldr	r1, [pc, #100]	; 91e8 <va_printk+0x278>
    9180:	e59f2064 	ldr	r2, [pc, #100]	; 91ec <va_printk+0x27c>
    9184:	e3a030b9 	mov	r3, #185	; 0xb9
    9188:	ebfffebb 	bl	8c7c <printk>
    918c:	eb00003b 	bl	9280 <rpi_reboot>
				return 0;   // ugh
			}
			fmt++;
    9190:	e2862001 	add	r2, r6, #1

			// safe string copy
			for(; p < e && *s; )
    9194:	ea000002 	b	91a4 <va_printk+0x234>
				*p++ = *s++;
    9198:	e2800001 	add	r0, r0, #1
    919c:	e5c43000 	strb	r3, [r4]
    91a0:	e2844001 	add	r4, r4, #1
				return 0;   // ugh
			}
			fmt++;

			// safe string copy
			for(; p < e && *s; )
    91a4:	e1540008 	cmp	r4, r8
    91a8:	2a000002 	bcs	91b8 <va_printk+0x248>
    91ac:	e5d03000 	ldrb	r3, [r0]
    91b0:	e3530000 	cmp	r3, #0
    91b4:	1afffff7 	bne	9198 <va_printk+0x228>

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    91b8:	e5d23000 	ldrb	r3, [r2]
    91bc:	e3530000 	cmp	r3, #0
    91c0:	0a000001 	beq	91cc <va_printk+0x25c>
    91c4:	e1540008 	cmp	r4, r8
    91c8:	3affff72 	bcc	8f98 <va_printk+0x28>
			// safe string copy
			for(; p < e && *s; )
				*p++ = *s++;
		}
	}
	*p++ = 0;
    91cc:	e2840001 	add	r0, r4, #1
    91d0:	e3a03000 	mov	r3, #0
    91d4:	e5c43000 	strb	r3, [r4]
	return p - buf;
}
    91d8:	e06b0000 	rsb	r0, fp, r0
    91dc:	e28dd08c 	add	sp, sp, #140	; 0x8c
    91e0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    91e4:	00009d48 	andeq	r9, r0, r8, asr #26
    91e8:	00009cf8 	strdeq	r9, [r0], -r8
    91ec:	00009cd8 	ldrdeq	r9, [r0], -r8
    91f0:	00009d64 	andeq	r9, r0, r4, ror #26
    91f4:	00009d8c 	andeq	r9, r0, ip, lsl #27

000091f8 <clean_reboot>:
#include "rpi.h"

// print out a special message so bootloader exits
void clean_reboot(void) {
    91f8:	e92d4008 	push	{r3, lr}
    putk("DONE!!!\n");
    91fc:	e59f3014 	ldr	r3, [pc, #20]	; 9218 <clean_reboot+0x20>
    9200:	e5933000 	ldr	r3, [r3]
    9204:	e59f0010 	ldr	r0, [pc, #16]	; 921c <clean_reboot+0x24>
    9208:	e12fff33 	blx	r3
    delay_ms(100);       // (hopefully) enough time for message to get flushed.
    920c:	e3a00064 	mov	r0, #100	; 0x64
    9210:	eb000041 	bl	931c <delay_ms>
    rpi_reboot();
    9214:	eb000019 	bl	9280 <rpi_reboot>
    9218:	000097c4 	andeq	r9, r0, r4, asr #15
    921c:	00009dc4 	andeq	r9, r0, r4, asr #27

00009220 <_cstart>:
#include "rpi.h"

void _cstart() {
    9220:	e92d4008 	push	{r3, lr}
    extern int __bss_start__, __bss_end__;
	void notmain();

    int* bss = &__bss_start__;
    9224:	e59f3020 	ldr	r3, [pc, #32]	; 924c <_cstart+0x2c>
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    9228:	e59f2020 	ldr	r2, [pc, #32]	; 9250 <_cstart+0x30>
        *bss++ = 0;
    922c:	e3a01000 	mov	r1, #0
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    9230:	ea000001 	b	923c <_cstart+0x1c>
        *bss++ = 0;
    9234:	e5831000 	str	r1, [r3]
    9238:	e2833004 	add	r3, r3, #4
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    923c:	e1530002 	cmp	r3, r2
    9240:	3afffffb 	bcc	9234 <_cstart+0x14>
        *bss++ = 0;

    notmain(); 
    9244:	ebfffb9c 	bl	80bc <notmain>
	rpi_reboot();
    9248:	eb00000c 	bl	9280 <rpi_reboot>
    924c:	00009ee4 	andeq	r9, r0, r4, ror #29
    9250:	0000a318 	andeq	sl, r0, r8, lsl r3

00009254 <at_user_level>:
 * works if we have a trashed stack pointer?
 */
static unsigned user_level = 0b10000;
int at_user_level(void) {
    unsigned cpsr = 0;
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    9254:	e10f0000 	mrs	r0, CPSR

    // user level = lower 5 bits = 0b10000);
    return (cpsr  & 0b11111)  == user_level;
    9258:	e200001f 	and	r0, r0, #31
}
    925c:	e3500010 	cmp	r0, #16
    9260:	13a00000 	movne	r0, #0
    9264:	03a00001 	moveq	r0, #1
    9268:	e12fff1e 	bx	lr

0000926c <set_user_level>:

// this is just used by the reboot code.
void set_user_level(void) {
    unsigned cpsr = 0;
    // XXX: shouldn't we just set the one bit?
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    926c:	e10f3000 	mrs	r3, CPSR
        cpsr = (cpsr & ~0b11111) | user_level;
    9270:	e3c3301f 	bic	r3, r3, #31
    9274:	e3833010 	orr	r3, r3, #16
    asm volatile("msr cpsr, %0" :: "r"(cpsr));
    9278:	e129f003 	msr	CPSR_fc, r3
    927c:	e12fff1e 	bx	lr

00009280 <rpi_reboot>:
}

void rpi_reboot(void) {
    9280:	e92d4008 	push	{r3, lr}
    if(at_user_level()) {
    9284:	ebfffff2 	bl	9254 <at_user_level>
    9288:	e3500000 	cmp	r0, #0
    928c:	0a000000 	beq	9294 <rpi_reboot+0x14>
        set_user_level();
    9290:	ebfffff5 	bl	926c <set_user_level>
        // of stuff.
        // assert(!at_user_level());
    }

    // gives uart time to flush: should just call flush directly.
    delay_ms(30);
    9294:	e3a0001e 	mov	r0, #30
    9298:	eb00001f 	bl	931c <delay_ms>
    const int PM_WDOG = 0x20100024;
    const int PM_PASSWORD = 0x5a000000;
    const int PM_RSTC_WRCFG_FULL_RESET = 0x00000020;

    // timeout = 1/16th of a second? (whatever)
    PUT32(PM_WDOG, PM_PASSWORD | 1);
    929c:	e59f0014 	ldr	r0, [pc, #20]	; 92b8 <rpi_reboot+0x38>
    92a0:	e59f1014 	ldr	r1, [pc, #20]	; 92bc <rpi_reboot+0x3c>
    92a4:	eb000028 	bl	934c <PUT32>
    PUT32(PM_RSTC, PM_PASSWORD | PM_RSTC_WRCFG_FULL_RESET);
    92a8:	e59f0010 	ldr	r0, [pc, #16]	; 92c0 <rpi_reboot+0x40>
    92ac:	e59f1010 	ldr	r1, [pc, #16]	; 92c4 <rpi_reboot+0x44>
    92b0:	eb000025 	bl	934c <PUT32>
    92b4:	eafffffe 	b	92b4 <rpi_reboot+0x34>
    92b8:	20100024 	andscs	r0, r0, r4, lsr #32
    92bc:	5a000001 	bpl	92c8 <delay_cycles>
    92c0:	2010001c 	andscs	r0, r0, ip, lsl r0
    92c4:	5a000020 	bpl	934c <PUT32>

000092c8 <delay_cycles>:
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    92c8:	ea000001 	b	92d4 <delay_cycles+0xc>
        asm("add r1, r1, #0");
    92cc:	e2811000 	add	r1, r1, #0
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    92d0:	e1a00003 	mov	r0, r3
    92d4:	e2403001 	sub	r3, r0, #1
    92d8:	e3500000 	cmp	r0, #0
    92dc:	1afffffa 	bne	92cc <delay_cycles+0x4>
        asm("add r1, r1, #0");
}
    92e0:	e12fff1e 	bx	lr

000092e4 <timer_get_usec>:

// in usec
unsigned timer_get_usec(void) {
    92e4:	e92d4008 	push	{r3, lr}
    return GET32(0x20003004);
    92e8:	e59f0004 	ldr	r0, [pc, #4]	; 92f4 <timer_get_usec+0x10>
    92ec:	eb000022 	bl	937c <GET32>
}
    92f0:	e8bd8008 	pop	{r3, pc}
    92f4:	20003004 	andcs	r3, r0, r4

000092f8 <delay_us>:

void delay_us(unsigned us) {
    92f8:	e92d4038 	push	{r3, r4, r5, lr}
    92fc:	e1a05000 	mov	r5, r0
    unsigned rb = timer_get_usec();
    9300:	ebfffff7 	bl	92e4 <timer_get_usec>
    9304:	e1a04000 	mov	r4, r0
    while (1) {
        unsigned ra = timer_get_usec();
    9308:	ebfffff5 	bl	92e4 <timer_get_usec>
        if ((ra - rb) >= us) {
    930c:	e0640000 	rsb	r0, r4, r0
    9310:	e1500005 	cmp	r0, r5
    9314:	3afffffb 	bcc	9308 <delay_us+0x10>
            break;
        }
    }
}
    9318:	e8bd8038 	pop	{r3, r4, r5, pc}

0000931c <delay_ms>:
void delay_ms(unsigned ms) {
    931c:	e92d4008 	push	{r3, lr}
    delay_us(ms*1000);
    9320:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    9324:	e0000093 	mul	r0, r3, r0
    9328:	ebfffff2 	bl	92f8 <delay_us>
    932c:	e8bd8008 	pop	{r3, pc}

00009330 <delay_sec>:
}
void delay_sec(unsigned sec) {
    9330:	e92d4008 	push	{r3, lr}
    delay_ms(sec*1000);
    9334:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    9338:	e0000093 	mul	r0, r3, r0
    933c:	ebfffff6 	bl	931c <delay_ms>
    9340:	e8bd8008 	pop	{r3, pc}

00009344 <put32>:
    9344:	e5801000 	str	r1, [r0]
    9348:	e12fff1e 	bx	lr

0000934c <PUT32>:
    934c:	e5801000 	str	r1, [r0]
    9350:	e12fff1e 	bx	lr

00009354 <put16>:
    9354:	e1c010b0 	strh	r1, [r0]
    9358:	e12fff1e 	bx	lr

0000935c <PUT16>:
    935c:	e1c010b0 	strh	r1, [r0]
    9360:	e12fff1e 	bx	lr

00009364 <put8>:
    9364:	e5c01000 	strb	r1, [r0]
    9368:	e12fff1e 	bx	lr

0000936c <PUT8>:
    936c:	e5c01000 	strb	r1, [r0]
    9370:	e12fff1e 	bx	lr

00009374 <get32>:
    9374:	e5900000 	ldr	r0, [r0]
    9378:	e12fff1e 	bx	lr

0000937c <GET32>:
    937c:	e5900000 	ldr	r0, [r0]
    9380:	e12fff1e 	bx	lr

00009384 <GETPC>:
    9384:	e1a0000e 	mov	r0, lr
    9388:	e12fff1e 	bx	lr

0000938c <dummy>:
    938c:	e12fff1e 	bx	lr

00009390 <or_in32>:
    9390:	e92d4070 	push	{r4, r5, r6, lr}
    9394:	e1a04000 	mov	r4, r0
    9398:	e1a05001 	mov	r5, r1
    939c:	ebfffff4 	bl	9374 <get32>
    93a0:	e1801005 	orr	r1, r0, r5
    93a4:	e1a00004 	mov	r0, r4
    93a8:	ebffffe5 	bl	9344 <put32>
    93ac:	e8bd8070 	pop	{r4, r5, r6, pc}

000093b0 <uart_get>:
    93b0:	e59f0000 	ldr	r0, [pc]	; 93b8 <uart_get+0x8>
    93b4:	e12fff1e 	bx	lr
    93b8:	20215040 	eorcs	r5, r1, r0, asr #32

000093bc <uart_init>:
    93bc:	e92d4010 	push	{r4, lr}
    93c0:	e3a01002 	mov	r1, #2
    93c4:	e3a0000e 	mov	r0, #14
    93c8:	eb00004b 	bl	94fc <gpio_set_function>
    93cc:	e3a01002 	mov	r1, #2
    93d0:	e3a0000f 	mov	r0, #15
    93d4:	eb000048 	bl	94fc <gpio_set_function>
    93d8:	eb0000f2 	bl	97a8 <dev_barrier>
    93dc:	e3a01001 	mov	r1, #1
    93e0:	e59f0064 	ldr	r0, [pc, #100]	; 944c <uart_init+0x90>
    93e4:	ebffffe9 	bl	9390 <or_in32>
    93e8:	eb0000ee 	bl	97a8 <dev_barrier>
    93ec:	e59f405c 	ldr	r4, [pc, #92]	; 9450 <uart_init+0x94>
    93f0:	e3a01000 	mov	r1, #0
    93f4:	e1a00004 	mov	r0, r4
    93f8:	ebffffd1 	bl	9344 <put32>
    93fc:	e3a01000 	mov	r1, #0
    9400:	e59f004c 	ldr	r0, [pc, #76]	; 9454 <uart_init+0x98>
    9404:	ebffffce 	bl	9344 <put32>
    9408:	e3a01003 	mov	r1, #3
    940c:	e59f0044 	ldr	r0, [pc, #68]	; 9458 <uart_init+0x9c>
    9410:	ebffffcb 	bl	9344 <put32>
    9414:	e3a01000 	mov	r1, #0
    9418:	e59f003c 	ldr	r0, [pc, #60]	; 945c <uart_init+0xa0>
    941c:	ebffffc8 	bl	9344 <put32>
    9420:	e3a010c7 	mov	r1, #199	; 0xc7
    9424:	e59f0034 	ldr	r0, [pc, #52]	; 9460 <uart_init+0xa4>
    9428:	ebffffc5 	bl	9344 <put32>
    942c:	e59f1030 	ldr	r1, [pc, #48]	; 9464 <uart_init+0xa8>
    9430:	e59f0030 	ldr	r0, [pc, #48]	; 9468 <uart_init+0xac>
    9434:	ebffffc2 	bl	9344 <put32>
    9438:	e3a01003 	mov	r1, #3
    943c:	e1a00004 	mov	r0, r4
    9440:	ebffffbf 	bl	9344 <put32>
    9444:	eb0000d7 	bl	97a8 <dev_barrier>
    9448:	e8bd8010 	pop	{r4, pc}
    944c:	20215004 	eorcs	r5, r1, r4
    9450:	20215060 	eorcs	r5, r1, r0, rrx
    9454:	20215044 	eorcs	r5, r1, r4, asr #32
    9458:	2021504c 	eorcs	r5, r1, ip, asr #32
    945c:	20215050 	eorcs	r5, r1, r0, asr r0
    9460:	20215048 	eorcs	r5, r1, r8, asr #32
    9464:	0000010e 	andeq	r0, r0, lr, lsl #2
    9468:	20215068 	eorcs	r5, r1, r8, rrx

0000946c <uart_can_getc>:
    946c:	e92d4010 	push	{r4, lr}
    9470:	e59f0008 	ldr	r0, [pc, #8]	; 9480 <uart_can_getc+0x14>
    9474:	ebffffbe 	bl	9374 <get32>
    9478:	e2000001 	and	r0, r0, #1
    947c:	e8bd8010 	pop	{r4, pc}
    9480:	20215064 	eorcs	r5, r1, r4, rrx

00009484 <uart_can_putc>:
    9484:	e92d4010 	push	{r4, lr}
    9488:	e59f0010 	ldr	r0, [pc, #16]	; 94a0 <uart_can_putc+0x1c>
    948c:	ebffffb8 	bl	9374 <get32>
    9490:	e3100002 	tst	r0, #2
    9494:	13a00001 	movne	r0, #1
    9498:	03a00000 	moveq	r0, #0
    949c:	e8bd8010 	pop	{r4, pc}
    94a0:	20215064 	eorcs	r5, r1, r4, rrx

000094a4 <uart_getc>:
    94a4:	e92d4010 	push	{r4, lr}
    94a8:	ebffffef 	bl	946c <uart_can_getc>
    94ac:	e3500000 	cmp	r0, #0
    94b0:	0afffffc 	beq	94a8 <uart_getc+0x4>
    94b4:	e59f0008 	ldr	r0, [pc, #8]	; 94c4 <uart_getc+0x20>
    94b8:	ebffffad 	bl	9374 <get32>
    94bc:	e6ef0070 	uxtb	r0, r0
    94c0:	e8bd8010 	pop	{r4, pc}
    94c4:	20215040 	eorcs	r5, r1, r0, asr #32

000094c8 <uart_putc>:
    94c8:	e92d4010 	push	{r4, lr}
    94cc:	e1a04000 	mov	r4, r0
    94d0:	ebffffeb 	bl	9484 <uart_can_putc>
    94d4:	e3500000 	cmp	r0, #0
    94d8:	0afffffc 	beq	94d0 <uart_putc+0x8>
    94dc:	e6ef1074 	uxtb	r1, r4
    94e0:	e59f0004 	ldr	r0, [pc, #4]	; 94ec <uart_putc+0x24>
    94e4:	ebffff96 	bl	9344 <put32>
    94e8:	e8bd8010 	pop	{r4, pc}
    94ec:	20215040 	eorcs	r5, r1, r0, asr #32

000094f0 <uart_has_data>:
    94f0:	e92d4010 	push	{r4, lr}
    94f4:	ebffffdc 	bl	946c <uart_can_getc>
    94f8:	e8bd8010 	pop	{r4, pc}

000094fc <gpio_set_function>:
    94fc:	e350001f 	cmp	r0, #31
    9500:	812fff1e 	bxhi	lr
    9504:	e3d13007 	bics	r3, r1, #7
    9508:	112fff1e 	bxne	lr
    950c:	e92d4070 	push	{r4, r5, r6, lr}
    9510:	e1a04001 	mov	r4, r1
    9514:	e59f2044 	ldr	r2, [pc, #68]	; 9560 <gpio_set_function+0x64>
    9518:	e0832290 	umull	r2, r3, r0, r2
    951c:	e1a031a3 	lsr	r3, r3, #3
    9520:	e1a06003 	mov	r6, r3
    9524:	e0833103 	add	r3, r3, r3, lsl #2
    9528:	e1a02083 	lsl	r2, r3, #1
    952c:	e0403002 	sub	r3, r0, r2
    9530:	e0835083 	add	r5, r3, r3, lsl #1
    9534:	e1a06106 	lsl	r6, r6, #2
    9538:	e2866202 	add	r6, r6, #536870912	; 0x20000000
    953c:	e2866602 	add	r6, r6, #2097152	; 0x200000
    9540:	e1a00006 	mov	r0, r6
    9544:	ebffff8a 	bl	9374 <get32>
    9548:	e3a01007 	mov	r1, #7
    954c:	e1c01511 	bic	r1, r0, r1, lsl r5
    9550:	e1811514 	orr	r1, r1, r4, lsl r5
    9554:	e1a00006 	mov	r0, r6
    9558:	ebffff79 	bl	9344 <put32>
    955c:	e8bd8070 	pop	{r4, r5, r6, pc}
    9560:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd

00009564 <gpio_set_output>:
    9564:	e92d4010 	push	{r4, lr}
    9568:	e3a01001 	mov	r1, #1
    956c:	ebffffe2 	bl	94fc <gpio_set_function>
    9570:	e8bd8010 	pop	{r4, pc}

00009574 <gpio_set_on>:
    9574:	e350001f 	cmp	r0, #31
    9578:	812fff1e 	bxhi	lr
    957c:	e92d4010 	push	{r4, lr}
    9580:	e3a01001 	mov	r1, #1
    9584:	e1a01011 	lsl	r1, r1, r0
    9588:	e59f0004 	ldr	r0, [pc, #4]	; 9594 <gpio_set_on+0x20>
    958c:	ebffff6e 	bl	934c <PUT32>
    9590:	e8bd8010 	pop	{r4, pc}
    9594:	2020001c 	eorcs	r0, r0, ip, lsl r0

00009598 <gpio_set_off>:
    9598:	e350001f 	cmp	r0, #31
    959c:	812fff1e 	bxhi	lr
    95a0:	e92d4010 	push	{r4, lr}
    95a4:	e3a01001 	mov	r1, #1
    95a8:	e1a01011 	lsl	r1, r1, r0
    95ac:	e59f0004 	ldr	r0, [pc, #4]	; 95b8 <gpio_set_off+0x20>
    95b0:	ebffff65 	bl	934c <PUT32>
    95b4:	e8bd8010 	pop	{r4, pc}
    95b8:	20200028 	eorcs	r0, r0, r8, lsr #32

000095bc <gpio_set_input>:
    95bc:	e92d4010 	push	{r4, lr}
    95c0:	e3a01000 	mov	r1, #0
    95c4:	ebffffcc 	bl	94fc <gpio_set_function>
    95c8:	e8bd8010 	pop	{r4, pc}

000095cc <gpio_write>:
    95cc:	e92d4010 	push	{r4, lr}
    95d0:	e3510000 	cmp	r1, #0
    95d4:	1a000001 	bne	95e0 <gpio_write+0x14>
    95d8:	ebffffee 	bl	9598 <gpio_set_off>
    95dc:	e8bd8010 	pop	{r4, pc}
    95e0:	ebffffe3 	bl	9574 <gpio_set_on>
    95e4:	e8bd8010 	pop	{r4, pc}

000095e8 <gpio_read>:
    95e8:	e350001f 	cmp	r0, #31
    95ec:	8a000007 	bhi	9610 <gpio_read+0x28>
    95f0:	e92d4010 	push	{r4, lr}
    95f4:	e200401f 	and	r4, r0, #31
    95f8:	e59f3018 	ldr	r3, [pc, #24]	; 9618 <gpio_read+0x30>
    95fc:	e08302a0 	add	r0, r3, r0, lsr #5
    9600:	ebffff5d 	bl	937c <GET32>
    9604:	e1a00430 	lsr	r0, r0, r4
    9608:	e2000001 	and	r0, r0, #1
    960c:	e8bd8010 	pop	{r4, pc}
    9610:	e3e00000 	mvn	r0, #0
    9614:	e12fff1e 	bx	lr
    9618:	20200034 	eorcs	r0, r0, r4, lsr r0

0000961c <kmalloc>:
 *  - The returned pointer should always be 4-byte aligned.  
 *    Easiest way is to make sure the heap pointer starts 4-byte
 *    and you always round up the number of bytes.  Make sure
 *    you put an assertion in.  
 */
void *kmalloc(unsigned nbytes) {
    961c:	e92d4010 	push	{r4, lr}
    demand(init_p, calling before initialized);
    9620:	e59f3048 	ldr	r3, [pc, #72]	; 9670 <kmalloc+0x54>
    9624:	e5933000 	ldr	r3, [r3]
    9628:	e3530000 	cmp	r3, #0
    962c:	1a000005 	bne	9648 <kmalloc+0x2c>
    9630:	e59f003c 	ldr	r0, [pc, #60]	; 9674 <kmalloc+0x58>
    9634:	e59f103c 	ldr	r1, [pc, #60]	; 9678 <kmalloc+0x5c>
    9638:	e59f203c 	ldr	r2, [pc, #60]	; 967c <kmalloc+0x60>
    963c:	e3a0301a 	mov	r3, #26
    9640:	ebfffd8d 	bl	8c7c <printk>
    9644:	ebffff0d 	bl	9280 <rpi_reboot>
    
    void* to_allocate = heap_ptr;
    9648:	e59f3020 	ldr	r3, [pc, #32]	; 9670 <kmalloc+0x54>
    964c:	e5934004 	ldr	r4, [r3, #4]
    unsigned rounded_nbytes = roundup(nbytes, 4);
    9650:	e2802003 	add	r2, r0, #3
    9654:	e3c22003 	bic	r2, r2, #3
    heap_ptr += rounded_nbytes;
    9658:	e0840002 	add	r0, r4, r2
    965c:	e5830004 	str	r0, [r3, #4]
    memset(heap_ptr, 0, rounded_nbytes);
    9660:	e3a01000 	mov	r1, #0
    9664:	ebfffd7c 	bl	8c5c <memset>
    return to_allocate;

}
    9668:	e1a00004 	mov	r0, r4
    966c:	e8bd8010 	pop	{r4, pc}
    9670:	0000a310 	andeq	sl, r0, r0, lsl r3
    9674:	00009df8 	strdeq	r9, [r0], -r8
    9678:	00009e38 	andeq	r9, r0, r8, lsr lr
    967c:	00009dd0 	ldrdeq	r9, [r0], -r0

00009680 <kmalloc_aligned>:

// address of returned pointer should be a multiple of
// alignment.
void *kmalloc_aligned(unsigned nbytes, unsigned alignment) {
    9680:	e92d4008 	push	{r3, lr}
    demand(init_p, calling before initialized);
    9684:	e59f3074 	ldr	r3, [pc, #116]	; 9700 <kmalloc_aligned+0x80>
    9688:	e5933000 	ldr	r3, [r3]
    968c:	e3530000 	cmp	r3, #0
    9690:	1a000005 	bne	96ac <kmalloc_aligned+0x2c>
    9694:	e59f0068 	ldr	r0, [pc, #104]	; 9704 <kmalloc_aligned+0x84>
    9698:	e59f1068 	ldr	r1, [pc, #104]	; 9708 <kmalloc_aligned+0x88>
    969c:	e59f2068 	ldr	r2, [pc, #104]	; 970c <kmalloc_aligned+0x8c>
    96a0:	e3a03027 	mov	r3, #39	; 0x27
    96a4:	ebfffd74 	bl	8c7c <printk>
    96a8:	ebfffef4 	bl	9280 <rpi_reboot>

    if(alignment <= 4)
    96ac:	e3510004 	cmp	r1, #4
    96b0:	8a000001 	bhi	96bc <kmalloc_aligned+0x3c>
        return kmalloc(nbytes);
    96b4:	ebffffd8 	bl	961c <kmalloc>
    96b8:	e8bd8008 	pop	{r3, pc}
    demand(alignment % 4 == 0, "weird alignment: not a multiple of 4!");
    96bc:	e3110003 	tst	r1, #3
    96c0:	0a000005 	beq	96dc <kmalloc_aligned+0x5c>
    96c4:	e59f0044 	ldr	r0, [pc, #68]	; 9710 <kmalloc_aligned+0x90>
    96c8:	e59f1038 	ldr	r1, [pc, #56]	; 9708 <kmalloc_aligned+0x88>
    96cc:	e59f2038 	ldr	r2, [pc, #56]	; 970c <kmalloc_aligned+0x8c>
    96d0:	e3a0302b 	mov	r3, #43	; 0x2b
    96d4:	ebfffd68 	bl	8c7c <printk>
    96d8:	ebfffee8 	bl	9280 <rpi_reboot>
    unsigned aligned_heap_ptr = (unsigned) heap_ptr;
    96dc:	e59f301c 	ldr	r3, [pc, #28]	; 9700 <kmalloc_aligned+0x80>
    96e0:	e5932004 	ldr	r2, [r3, #4]
	aligned_heap_ptr = roundup(aligned_heap_ptr, alignment);
    96e4:	e0812002 	add	r2, r1, r2
    96e8:	e2422001 	sub	r2, r2, #1
    96ec:	e2611000 	rsb	r1, r1, #0
    96f0:	e0021001 	and	r1, r2, r1
	heap_ptr = (void*) aligned_heap_ptr;
    96f4:	e5831004 	str	r1, [r3, #4]

	return kmalloc(nbytes);
    96f8:	ebffffc7 	bl	961c <kmalloc>
}
    96fc:	e8bd8008 	pop	{r3, pc}
    9700:	0000a310 	andeq	sl, r0, r0, lsl r3
    9704:	00009df8 	strdeq	r9, [r0], -r8
    9708:	00009e38 	andeq	r9, r0, r8, lsr lr
    970c:	00009dd8 	ldrdeq	r9, [r0], -r8
    9710:	00009e4c 	andeq	r9, r0, ip, asr #28

00009714 <kmalloc_init>:
 *    - should be just a few lines of code.
 *    - sets heap pointer to the location of 
 *      __heap_start__.   print this to make sure
 *      it makes sense!
 */
void kmalloc_init(void) {
    9714:	e92d4008 	push	{r3, lr}
    demand(!init_p, cannot initialize twice!\n);
    9718:	e59f3038 	ldr	r3, [pc, #56]	; 9758 <kmalloc_init+0x44>
    971c:	e5933000 	ldr	r3, [r3]
    9720:	e3530000 	cmp	r3, #0
    9724:	0a000005 	beq	9740 <kmalloc_init+0x2c>
    9728:	e59f002c 	ldr	r0, [pc, #44]	; 975c <kmalloc_init+0x48>
    972c:	e59f102c 	ldr	r1, [pc, #44]	; 9760 <kmalloc_init+0x4c>
    9730:	e59f202c 	ldr	r2, [pc, #44]	; 9764 <kmalloc_init+0x50>
    9734:	e3a0303c 	mov	r3, #60	; 0x3c
    9738:	ebfffd4f 	bl	8c7c <printk>
    973c:	ebfffecf 	bl	9280 <rpi_reboot>
    init_p = 1;
    9740:	e59f3010 	ldr	r3, [pc, #16]	; 9758 <kmalloc_init+0x44>
    9744:	e3a02001 	mov	r2, #1
    9748:	e5832000 	str	r2, [r3]
    heap_ptr = &__heap_start__;
    974c:	e59f2014 	ldr	r2, [pc, #20]	; 9768 <kmalloc_init+0x54>
    9750:	e5832004 	str	r2, [r3, #4]
    9754:	e8bd8008 	pop	{r3, pc}
    9758:	0000a310 	andeq	sl, r0, r0, lsl r3
    975c:	00009ea4 	andeq	r9, r0, r4, lsr #29
    9760:	00009e38 	andeq	r9, r0, r8, lsr lr
    9764:	00009de8 	andeq	r9, r0, r8, ror #27
    9768:	0000a318 	andeq	sl, r0, r8, lsl r3

0000976c <kfree_all>:
/* 
 * free all allocated memory: reset the heap 
 * pointer back to the beginning.
 */
void kfree_all(void) {
    heap_ptr = &__heap_start__;
    976c:	e59f2008 	ldr	r2, [pc, #8]	; 977c <kfree_all+0x10>
    9770:	e59f3008 	ldr	r3, [pc, #8]	; 9780 <kfree_all+0x14>
    9774:	e5832004 	str	r2, [r3, #4]
    9778:	e12fff1e 	bx	lr
    977c:	0000a318 	andeq	sl, r0, r8, lsl r3
    9780:	0000a310 	andeq	sl, r0, r0, lsl r3

00009784 <kmalloc_heap_ptr>:
// allocated block satisfies: 
//    assert(<addr> < kmalloc_heap_ptr());
// 
void *kmalloc_heap_ptr(void) {
    return (void*) heap_ptr;
}
    9784:	e59f3004 	ldr	r3, [pc, #4]	; 9790 <kmalloc_heap_ptr+0xc>
    9788:	e5930004 	ldr	r0, [r3, #4]
    978c:	e12fff1e 	bx	lr
    9790:	0000a310 	andeq	sl, r0, r0, lsl r3

00009794 <internal_putchar>:
#include "rpi.h"

static int internal_putchar(int c) { uart_putc(c); return c; }
    9794:	e92d4010 	push	{r4, lr}
    9798:	e1a04000 	mov	r4, r0
    979c:	ebffff49 	bl	94c8 <uart_putc>
    97a0:	e1a00004 	mov	r0, r4
    97a4:	e8bd8010 	pop	{r4, pc}

000097a8 <dev_barrier>:
    97a8:	ea000002 	b	97b8 <dsb>

000097ac <dmb>:
    97ac:	e3a00000 	mov	r0, #0
    97b0:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
    97b4:	e12fff1e 	bx	lr

000097b8 <dsb>:
    97b8:	ee070f9a 	mcr	15, 0, r0, cr7, cr10, {4}
    97bc:	e12fff1e 	bx	lr

Disassembly of section .data:

000097c0 <tid>:
    97c0:	00000001 	andeq	r0, r0, r1

000097c4 <putk>:
    97c4:	00008cd4 	ldrdeq	r8, [r0], -r4

000097c8 <rpi_putchar>:
    97c8:	00009794 	muleq	r0, r4, r7

Disassembly of section .rodata:

000097cc <__FUNCTION__.4162>:
    97cc:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
    97d0:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
    97d4:	0065646f 	rsbeq	r6, r5, pc, ror #8

000097d8 <__FUNCTION__.4172>:
    97d8:	6d746f6e 	ldclvs	15, cr6, [r4, #-440]!	; 0xfffffe48
    97dc:	006e6961 	rsbeq	r6, lr, r1, ror #18
    97e0:	74206e69 	strtvc	r6, [r0], #-3689	; 0xe69
    97e4:	61657268 	cmnvs	r5, r8, ror #4
    97e8:	70252064 	eorvc	r2, r5, r4, rrx
    97ec:	6977202c 	ldmdbvs	r7!, {r2, r3, r5, sp}^
    97f0:	25206874 	strcs	r6, [r0, #-2164]!	; 0x874
    97f4:	00000a78 	andeq	r0, r0, r8, ror sl
    97f8:	4f525245 	svcmi	0x00525245
    97fc:	73253a52 	teqvc	r5, #335872	; 0x52000
    9800:	3a73253a 	bcc	1cd2cf0 <__bss_end__+0x1cc89d8>
    9804:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9808:	534c4146 	movtpl	r4, #49478	; 0xc146
    980c:	723c2845 	eorsvc	r2, ip, #4521984	; 0x450000
    9810:	635f6970 	cmpvs	pc, #112, 18	; 0x1c0000
    9814:	745f7275 	ldrbvc	r7, [pc], #-629	; 981c <__FUNCTION__.4172+0x44>
    9818:	61657268 	cmnvs	r5, r8, ror #4
    981c:	2d292864 	stccs	8, cr2, [r9, #-400]!	; 0xfffffe70
    9820:	6469743e 	strbtvs	r7, [r9], #-1086	; 0x43e
    9824:	203d3d20 	eorscs	r3, sp, r0, lsr #26
    9828:	312b782a 	teqcc	fp, sl, lsr #16
    982c:	203a293e 	eorscs	r2, sl, lr, lsr r9
    9830:	70786522 	rsbsvc	r6, r8, r2, lsr #10
    9834:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0x365
    9838:	64252064 	strtvs	r2, [r5], #-100	; 0x64
    983c:	6168202c 	cmnvs	r8, ip, lsr #32
    9840:	25206576 	strcs	r6, [r0, #-1398]!	; 0x576
    9844:	226e5c64 	rsbcs	r5, lr, #100, 24	; 0x6400
    9848:	0000000a 	andeq	r0, r0, sl
    984c:	65742d31 	ldrbvs	r2, [r4, #-3377]!	; 0xd31
    9850:	742d7473 	strtvc	r7, [sp], #-1139	; 0x473
    9854:	61657268 	cmnvs	r5, r8, ror #4
    9858:	00632e64 	rsbeq	r2, r3, r4, ror #28
    985c:	756f6261 	strbvc	r6, [pc, #-609]!	; 9603 <gpio_read+0x1b>
    9860:	6f742074 	svcvs	0x00742074
    9864:	73657420 	cmnvc	r5, #32, 8	; 0x20000000
    9868:	75732074 	ldrbvc	r2, [r3, #-116]!	; 0x74
    986c:	6e696d6d 	cdpvs	13, 6, cr6, cr9, cr13, {3}
    9870:	666f2067 	strbtvs	r2, [pc], -r7, rrx
    9874:	20303320 	eorscs	r3, r0, r0, lsr #6
    9878:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
    987c:	0a736461 	beq	1ce2a08 <__bss_end__+0x1cd86f0>
    9880:	00000000 	andeq	r0, r0, r0
    9884:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    9888:	203d2074 	eorscs	r2, sp, r4, ror r0
    988c:	202c6425 	eorcs	r6, ip, r5, lsr #8
    9890:	3d6d7573 	cfstr64cc	mvdx7, [sp, #-460]!	; 0xfffffe34
    9894:	000a6425 	andeq	r6, sl, r5, lsr #8
    9898:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    989c:	73253a43 	teqvc	r5, #274432	; 0x43000
    98a0:	3a73253a 	bcc	1cd2d90 <__bss_end__+0x1cc8a78>
    98a4:	743a6425 	ldrtvc	r6, [sl], #-1061	; 0x425
    98a8:	61657268 	cmnvs	r5, r8, ror #4
    98ac:	6f635f64 	svcvs	0x00635f64
    98b0:	20746e75 	rsbscs	r6, r4, r5, ror lr
    98b4:	6e203d3d 	mcrvs	13, 1, r3, cr0, cr13, {1}
    98b8:	0000000a 	andeq	r0, r0, sl
    98bc:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    98c0:	73253a43 	teqvc	r5, #274432	; 0x43000
    98c4:	3a73253a 	bcc	1cd2db4 <__bss_end__+0x1cc8a9c>
    98c8:	743a6425 	ldrtvc	r6, [sl], #-1061	; 0x425
    98cc:	61657268 	cmnvs	r5, r8, ror #4
    98d0:	75735f64 	ldrbvc	r5, [r3, #-3940]!	; 0xf64
    98d4:	3d3d206d 	ldccc	0, cr2, [sp, #-436]!	; 0xfffffe4c
    98d8:	6d757320 	ldclvs	3, cr7, [r5, #-128]!	; 0xffffff80
    98dc:	0000000a 	andeq	r0, r0, sl
    98e0:	43435553 	movtmi	r5, #13651	; 0x3553
    98e4:	21535345 	cmpcs	r3, r5, asr #6
    98e8:	0000000a 	andeq	r0, r0, sl

000098ec <__FUNCTION__.4172>:
    98ec:	6d655f51 	stclvs	15, cr5, [r5, #-324]!	; 0xfffffebc
    98f0:	00797470 	rsbseq	r7, r9, r0, ror r4

000098f4 <__FUNCTION__.4176>:
    98f4:	6f705f51 	svcvs	0x00705f51
    98f8:	00000070 	andeq	r0, r0, r0, ror r0

000098fc <__FUNCTION__.4204>:
    98fc:	615f6874 	cmpvs	pc, r4, ror r8	; <UNPREDICTABLE>
    9900:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    9904:	00000000 	andeq	r0, r0, r0

00009908 <__FUNCTION__.4239>:
    9908:	5f697072 	svcpl	0x00697072
    990c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    9910:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    9914:	6568635f 	strbvs	r6, [r8, #-863]!	; 0x35f
    9918:	00006b63 	andeq	r6, r0, r3, ror #22

0000991c <__FUNCTION__.4243>:
    991c:	5f697072 	svcpl	0x00697072
    9920:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    9924:	68635f6b 	stmdavs	r3!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    9928:	006b6365 	rsbeq	r6, fp, r5, ror #6

0000992c <__FUNCTION__.4247>:
    992c:	5f697072 	svcpl	0x00697072
    9930:	6e696f6a 	cdpvs	15, 6, cr6, cr9, cr10, {3}
    9934:	00000000 	andeq	r0, r0, r0

00009938 <__FUNCTION__.4251>:
    9938:	5f697072 	svcpl	0x00697072
    993c:	63617865 	cmnvs	r1, #6619136	; 0x650000
    9940:	6c735f74 	ldclvs	15, cr5, [r3], #-464	; 0xfffffe30
    9944:	00706565 	rsbseq	r6, r0, r5, ror #10
    9948:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    994c:	73253a43 	teqvc	r5, #274432	; 0x43000
    9950:	3a73253a 	bcc	1cd2e40 <__bss_end__+0x1cc8b28>
    9954:	513a6425 	teqpl	sl, r5, lsr #8
    9958:	6c656e5f 	stclvs	14, cr6, [r5], #-380	; 0xfffffe84
    995c:	71286d65 	teqvc	r8, r5, ror #26
    9960:	3d3d2029 	ldccc	0, cr2, [sp, #-164]!	; 0xffffff5c
    9964:	000a3020 	andeq	r3, sl, r0, lsr #32
    9968:	00682e51 	rsbeq	r2, r8, r1, asr lr
    996c:	4f525245 	svcmi	0x00525245
    9970:	73253a52 	teqvc	r5, #335872	; 0x52000
    9974:	3a73253a 	bcc	1cd2e64 <__bss_end__+0x1cc8b4c>
    9978:	203a6425 	eorscs	r6, sl, r5, lsr #8
    997c:	534c4146 	movtpl	r4, #49478	; 0xc146
    9980:	213c2845 	teqcs	ip, r5, asr #16
    9984:	743e2d71 	ldrtvc	r2, [lr], #-3441	; 0xd71
    9988:	3e6c6961 	cdpcc	9, 6, cr6, cr12, cr1, {3}
    998c:	69203a29 	stmdbvs	r0!, {r0, r3, r5, r9, fp, ip, sp}
    9990:	6c61766e 	stclvs	6, cr7, [r1], #-440	; 0xfffffe48
    9994:	51206469 	teqpl	r0, r9, ror #8
    9998:	0000000a 	andeq	r0, r0, sl
    999c:	4f525245 	svcmi	0x00525245
    99a0:	73253a52 	teqvc	r5, #335872	; 0x52000
    99a4:	3a73253a 	bcc	1cd2e94 <__bss_end__+0x1cc8b7c>
    99a8:	203a6425 	eorscs	r6, sl, r5, lsr #8
    99ac:	534c4146 	movtpl	r4, #49478	; 0xc146
    99b0:	713c2845 	teqvc	ip, r5, asr #16
    99b4:	203a293e 	eorscs	r2, sl, lr, lsr r9
    99b8:	20646162 	rsbcs	r6, r4, r2, ror #2
    99bc:	75706e69 	ldrbvc	r6, [r0, #-3689]!	; 0xe69
    99c0:	00000a74 	andeq	r0, r0, r4, ror sl
    99c4:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    99c8:	73253a43 	teqvc	r5, #274432	; 0x43000
    99cc:	3a73253a 	bcc	1cd2ebc <__bss_end__+0x1cc8ba4>
    99d0:	513a6425 	teqpl	sl, r5, lsr #8
    99d4:	706d655f 	rsbvc	r6, sp, pc, asr r5
    99d8:	71287974 	teqvc	r8, r4, ror r9
    99dc:	00000a29 	andeq	r0, r0, r9, lsr #20
    99e0:	4f525245 	svcmi	0x00525245
    99e4:	73253a52 	teqvc	r5, #335872	; 0x52000
    99e8:	3a73253a 	bcc	1cd2ed8 <__bss_end__+0x1cc8bc0>
    99ec:	203a6425 	eorscs	r6, sl, r5, lsr #8
    99f0:	534c4146 	movtpl	r4, #49478	; 0xc146
    99f4:	283c2845 	ldmdacs	ip!, {r0, r2, r6, fp, sp}
    99f8:	6e752828 	cdpvs	8, 7, cr2, cr5, cr8, {1}
    99fc:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
    9a00:	28296465 	stmdacs	r9!, {r0, r2, r5, r6, sl, sp, lr}
    9a04:	3e2d7426 	cdpcc	4, 2, cr7, cr13, cr6, {1}
    9a08:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    9a0c:	5d305b6b 	fldmdbxpl	r0!, {d5-d57}	;@ Deprecated
    9a10:	28252929 	stmdacs	r5!, {r0, r3, r5, r8, fp, sp}
    9a14:	3d202938 	stccc	9, cr2, [r0, #-224]!	; 0xffffff20
    9a18:	2930203d 	ldmdbcs	r0!, {r0, r2, r3, r4, r5, sp}
    9a1c:	203a293e 	eorscs	r2, sl, lr, lsr r9
    9a20:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    9a24:	756d206b 	strbvc	r2, [sp, #-107]!	; 0x6b
    9a28:	62207473 	eorvs	r7, r0, #1929379840	; 0x73000000
    9a2c:	2d382065 	ldccs	0, cr2, [r8, #-404]!	; 0xfffffe6c
    9a30:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
    9a34:	696c6120 	stmdbvs	ip!, {r5, r8, sp, lr}^
    9a38:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
    9a3c:	00000a21 	andeq	r0, r0, r1, lsr #20
    9a40:	2d697072 	stclcs	0, cr7, [r9, #-456]!	; 0xfffffe38
    9a44:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
    9a48:	632e6461 	teqvs	lr, #1627389952	; 0x61000000
    9a4c:	00000000 	andeq	r0, r0, r0
    9a50:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9a54:	73253a43 	teqvc	r5, #274432	; 0x43000
    9a58:	3a73253a 	bcc	1cd2f48 <__bss_end__+0x1cc8c30>
    9a5c:	733a6425 	teqvc	sl, #620756992	; 0x25000000
    9a60:	61726f74 	cmnvs	r2, r4, ror pc
    9a64:	6c206567 	cfstr32vs	mvfx6, [r0], #-412	; 0xfffffe64
    9a68:	3a6b6165 	bcc	1ae2004 <__bss_end__+0x1ad7cec>
    9a6c:	6f687320 	svcvs	0x00687320
    9a70:	20646c75 	rsbcs	r6, r4, r5, ror ip
    9a74:	65766168 	ldrbvs	r6, [r6, #-360]!	; 0x168
    9a78:	20642520 	rsbcs	r2, r4, r0, lsr #10
    9a7c:	65657266 	strbvs	r7, [r5, #-614]!	; 0x266
    9a80:	6f6c6220 	svcvs	0x006c6220
    9a84:	2c736b63 	ldclcs	11, cr6, [r3], #-396	; 0xfffffe74
    9a88:	76616820 	strbtvc	r6, [r1], -r0, lsr #16
    9a8c:	64252065 	strtvs	r2, [r5], #-101	; 0x65
    9a90:	75722820 	ldrbvc	r2, [r2, #-2080]!	; 0x820
    9a94:	253d716e 	ldrcs	r7, [sp, #-366]!	; 0x16e
    9a98:	66202c64 	strtvs	r2, [r0], -r4, ror #24
    9a9c:	71656572 	smcvc	22098	; 0x5652
    9aa0:	2964253d 	stmdbcs	r4!, {r0, r2, r3, r4, r5, r8, sl, sp}^
    9aa4:	00000a0a 	andeq	r0, r0, sl, lsl #20
    9aa8:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
    9aac:	203a6461 	eorscs	r6, sl, r1, ror #8
    9ab0:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    9ab4:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    9ab8:	65686320 	strbvs	r6, [r8, #-800]!	; 0x320
    9abc:	70206b63 	eorvc	r6, r0, r3, ror #22
    9ac0:	65737361 	ldrbvs	r7, [r3, #-865]!	; 0x361
    9ac4:	00000a64 	andeq	r0, r0, r4, ror #20
    9ac8:	74697072 	strbtvc	r7, [r9], #-114	; 0x72
    9acc:	61657268 	cmnvs	r5, r8, ror #4
    9ad0:	203a7364 	eorscs	r7, sl, r4, ror #6
    9ad4:	656e6f64 	strbvs	r6, [lr, #-3940]!	; 0xf64
    9ad8:	74697720 	strbtvc	r7, [r9], #-1824	; 0x720
    9adc:	6c612068 	stclvs	0, cr2, [r1], #-416	; 0xfffffe60
    9ae0:	6874206c 	ldmdavs	r4!, {r2, r3, r5, r6, sp}^
    9ae4:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
    9ae8:	72202173 	eorvc	r2, r0, #-1073741796	; 0xc000001c
    9aec:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
    9af0:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
    9af4:	0000000a 	andeq	r0, r0, sl
    9af8:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9afc:	73253a43 	teqvc	r5, #274432	; 0x43000
    9b00:	3a73253a 	bcc	1cd2ff0 <__bss_end__+0x1cc8cd8>
    9b04:	693a6425 	ldmdbvs	sl!, {r0, r2, r5, sl, sp, lr}
    9b08:	656c706d 	strbvs	r7, [ip, #-109]!	; 0x6d
    9b0c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
    9b10:	69687420 	stmdbvs	r8!, {r5, sl, ip, sp, lr}^
    9b14:	75662073 	strbvc	r2, [r6, #-115]!	; 0x73
    9b18:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    9b1c:	0a216e6f 	beq	8654e0 <__bss_end__+0x85b1c8>
    9b20:	0000000a 	andeq	r0, r0, sl

00009b24 <__FUNCTION__.4202>:
    9b24:	705f7163 	subsvc	r7, pc, r3, ror #2
    9b28:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    9b2c:	00000000 	andeq	r0, r0, r0

00009b30 <__FUNCTION__.4206>:
    9b30:	6f5f7163 	svcvs	0x005f7163
    9b34:	0000006b 	andeq	r0, r0, fp, rrx

00009b38 <__FUNCTION__.4211>:
    9b38:	695f7163 	ldmdbvs	pc, {r0, r1, r5, r6, r8, ip, sp, lr}^	; <UNPREDICTABLE>
    9b3c:	0074696e 	rsbseq	r6, r4, lr, ror #18

00009b40 <__FUNCTION__.4225>:
    9b40:	705f7163 	subsvc	r7, pc, r3, ror #2
    9b44:	5f6b6565 	svcpl	0x006b6565
    9b48:	0000006e 	andeq	r0, r0, lr, rrx

00009b4c <__FUNCTION__.4250>:
    9b4c:	705f7163 	subsvc	r7, pc, r3, ror #2
    9b50:	5f687375 	svcpl	0x00687375
    9b54:	0000006e 	andeq	r0, r0, lr, rrx
    9b58:	253a7325 	ldrcs	r7, [sl, #-805]!	; 0x325
    9b5c:	64253a73 	strtvs	r3, [r5], #-2675	; 0xa73
    9b60:	2071633a 	rsbscs	r6, r1, sl, lsr r3
    9b64:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    9b68:	68203a74 	stmdavs	r0!, {r2, r4, r5, r6, r9, fp, ip, sp}
    9b6c:	3d646165 	stfcce	f6, [r4, #-404]!	; 0xfffffe6c
    9b70:	202c6425 	eorcs	r6, ip, r5, lsr #8
    9b74:	6c696174 	stfvse	f6, [r9], #-464	; 0xfffffe30
    9b78:	2c64253d 	cfstr64cs	mvdx2, [r4], #-244	; 0xffffff0c
    9b7c:	6c656e20 	stclvs	14, cr6, [r5], #-128	; 0xffffff80
    9b80:	253d6d65 	ldrcs	r6, [sp, #-3429]!	; 0xd65
    9b84:	65202c64 	strvs	r2, [r0, #-3172]!	; 0xc64
    9b88:	7974706d 	ldmdbvc	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    9b8c:	0a64253d 	beq	1913088 <__bss_end__+0x1908d70>
    9b90:	00000000 	andeq	r0, r0, r0
    9b94:	63726963 	cmnvs	r2, #1622016	; 0x18c000
    9b98:	72616c75 	rsbvc	r6, r1, #29952	; 0x7500
    9b9c:	0000632e 	andeq	r6, r0, lr, lsr #6
    9ba0:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9ba4:	73253a43 	teqvc	r5, #274432	; 0x43000
    9ba8:	3a73253a 	bcc	1cd3098 <__bss_end__+0x1cc8d80>
    9bac:	663a6425 	ldrtvs	r6, [sl], -r5, lsr #8
    9bb0:	65636e65 	strbvs	r6, [r3, #-3685]!	; 0xe65
    9bb4:	20736920 	rsbscs	r6, r3, r0, lsr #18
    9bb8:	72726f63 	rsbsvc	r6, r2, #396	; 0x18c
    9bbc:	65747075 	ldrbvs	r7, [r4, #-117]!	; 0x75
    9bc0:	000a0a64 	andeq	r0, sl, r4, ror #20
    9bc4:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9bc8:	73253a43 	teqvc	r5, #274432	; 0x43000
    9bcc:	3a73253a 	bcc	1cd30bc <__bss_end__+0x1cc8da4>
    9bd0:	633a6425 	teqvs	sl, #620756992	; 0x25000000
    9bd4:	6d655f71 	stclvs	15, cr5, [r5, #-452]!	; 0xfffffe3c
    9bd8:	28797470 	ldmdacs	r9!, {r4, r5, r6, sl, ip, sp, lr}^
    9bdc:	000a2963 	andeq	r2, sl, r3, ror #18
    9be0:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9be4:	73253a43 	teqvc	r5, #274432	; 0x43000
    9be8:	3a73253a 	bcc	1cd30d8 <__bss_end__+0x1cc8dc0>
    9bec:	213a6425 	teqcs	sl, r5, lsr #8
    9bf0:	665f7163 	ldrbvs	r7, [pc], -r3, ror #2
    9bf4:	286c6c75 	stmdacs	ip!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    9bf8:	000a2963 	andeq	r2, sl, r3, ror #18
    9bfc:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9c00:	73253a43 	teqvc	r5, #274432	; 0x43000
    9c04:	3a73253a 	bcc	1cd30f4 <__bss_end__+0x1cc8ddc>
    9c08:	633a6425 	teqvs	sl, #620756992	; 0x25000000
    9c0c:	656e5f71 	strbvs	r5, [lr, #-3953]!	; 0xf71
    9c10:	286d656c 	stmdacs	sp!, {r2, r3, r5, r6, r8, sl, sp, lr}^
    9c14:	3d202963 	stccc	9, cr2, [r0, #-396]!	; 0xfffffe74
    9c18:	0a30203d 	beq	c11d14 <__bss_end__+0xc079fc>
    9c1c:	00000000 	andeq	r0, r0, r0
    9c20:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9c24:	73253a43 	teqvc	r5, #274432	; 0x43000
    9c28:	3a73253a 	bcc	1cd3118 <__bss_end__+0x1cc8e00>
    9c2c:	633a6425 	teqvs	sl, #620756992	; 0x25000000
    9c30:	6f705f71 	svcvs	0x00705f71
    9c34:	6f6e5f70 	svcvs	0x006e5f70
    9c38:	6f6c626e 	svcvs	0x006c626e
    9c3c:	63286b63 	teqvs	r8, #101376	; 0x18c00
    9c40:	2965262c 	stmdbcs	r5!, {r2, r3, r5, r9, sl, sp}^
    9c44:	203d3d20 	eorscs	r3, sp, r0, lsr #26
    9c48:	26262030 			; <UNDEFINED> instruction: 0x26262030
    9c4c:	3d206520 	cfstr32cc	mvfx6, [r0, #-128]!	; 0xffffff80
    9c50:	7830203d 	ldmdavc	r0!, {r0, r2, r3, r4, r5, sp}
    9c54:	000a3231 	andeq	r3, sl, r1, lsr r2
    9c58:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9c5c:	73253a43 	teqvc	r5, #274432	; 0x43000
    9c60:	3a73253a 	bcc	1cd3150 <__bss_end__+0x1cc8e38>
    9c64:	733a6425 	teqvc	sl, #620756992	; 0x25000000
    9c68:	3d3d207a 	ldccc	0, cr2, [sp, #-488]!	; 0xfffffe18
    9c6c:	5f716320 	svcpl	0x00716320
    9c70:	656c656e 	strbvs	r6, [ip, #-1390]!	; 0x56e
    9c74:	2963286d 	stmdbcs	r3!, {r0, r2, r3, r5, r6, fp, sp}^
    9c78:	0000000a 	andeq	r0, r0, sl
    9c7c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9c80:	73253a43 	teqvc	r5, #274432	; 0x43000
    9c84:	3a73253a 	bcc	1cd3174 <__bss_end__+0x1cc8e5c>
    9c88:	6e3a6425 	cdpvs	4, 3, cr6, cr10, cr5, {1}
    9c8c:	6820746f 	stmdavs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
    9c90:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    9c94:	20676e69 	rsbcs	r6, r7, r9, ror #28
    9c98:	73696874 	cmnvc	r9, #116, 16	; 0x740000
    9c9c:	00000a0a 	andeq	r0, r0, sl, lsl #20
    9ca0:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9ca4:	73253a43 	teqvc	r5, #274432	; 0x43000
    9ca8:	3a73253a 	bcc	1cd3198 <__bss_end__+0x1cc8e80>
    9cac:	213a6425 	teqcs	sl, r5, lsr #8
    9cb0:	655f7163 	ldrbvs	r7, [pc, #-355]	; 9b55 <__FUNCTION__.4250+0x9>
    9cb4:	7974706d 	ldmdbvc	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    9cb8:	0a296328 	beq	a62960 <__bss_end__+0xa58648>
    9cbc:	00000000 	andeq	r0, r0, r0

00009cc0 <__FUNCTION__.4185>:
    9cc0:	74696d65 	strbtvc	r6, [r9], #-3429	; 0xd65
    9cc4:	00000000 	andeq	r0, r0, r0

00009cc8 <__FUNCTION__.4133>:
    9cc8:	5f697072 	svcpl	0x00697072
    9ccc:	5f746573 	svcpl	0x00746573
    9cd0:	7074756f 	rsbsvc	r7, r4, pc, ror #10
    9cd4:	00007475 	andeq	r7, r0, r5, ror r4

00009cd8 <__FUNCTION__.4207>:
    9cd8:	705f6176 	subsvc	r6, pc, r6, ror r1	; <UNPREDICTABLE>
    9cdc:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    9ce0:	0000006b 	andeq	r0, r0, fp, rrx
    9ce4:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9ce8:	73253a43 	teqvc	r5, #274432	; 0x43000
    9cec:	3a73253a 	bcc	1cd31dc <__bss_end__+0x1cc8ec4>
    9cf0:	303a6425 	eorscc	r6, sl, r5, lsr #8
    9cf4:	0000000a 	andeq	r0, r0, sl
    9cf8:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    9cfc:	2d61762f 	stclcs	6, cr7, [r1, #-188]!	; 0xffffff44
    9d00:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    9d04:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
    9d08:	00000000 	andeq	r0, r0, r0
    9d0c:	33323130 	teqcc	r2, #48, 2
    9d10:	37363534 			; <UNDEFINED> instruction: 0x37363534
    9d14:	00003938 	andeq	r3, r0, r8, lsr r9
    9d18:	33323130 	teqcc	r2, #48, 2
    9d1c:	37363534 			; <UNDEFINED> instruction: 0x37363534
    9d20:	62613938 	rsbvs	r3, r1, #56, 18	; 0xe0000
    9d24:	66656463 	strbtvs	r6, [r5], -r3, ror #8
    9d28:	00000000 	andeq	r0, r0, r0
    9d2c:	00003130 	andeq	r3, r0, r0, lsr r1
    9d30:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9d34:	73253a43 	teqvc	r5, #274432	; 0x43000
    9d38:	3a73253a 	bcc	1cd3228 <__bss_end__+0x1cc8f10>
    9d3c:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    9d40:	5f637475 	svcpl	0x00637475
    9d44:	000a7066 	andeq	r7, sl, r6, rrx
    9d48:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9d4c:	73253a43 	teqvc	r5, #274432	; 0x43000
    9d50:	3a73253a 	bcc	1cd3240 <__bss_end__+0x1cc8f28>
    9d54:	773a6425 	ldrvc	r6, [sl, -r5, lsr #8]!
    9d58:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
    9d5c:	33203c20 	teqcc	r0, #32, 24	; 0x2000
    9d60:	00000a32 	andeq	r0, r0, r2, lsr sl
    9d64:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9d68:	73253a43 	teqvc	r5, #274432	; 0x43000
    9d6c:	3a73253a 	bcc	1cd325c <__bss_end__+0x1cc8f44>
    9d70:	663a6425 	ldrtvs	r6, [sl], -r5, lsr #8
    9d74:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xf6c
    9d78:	746f6e20 	strbtvc	r6, [pc], #-3616	; 9d80 <__FUNCTION__.4207+0xa8>
    9d7c:	616e6520 	cmnvs	lr, r0, lsr #10
    9d80:	64656c62 	strbtvs	r6, [r5], #-3170	; 0xc62
    9d84:	0a212121 	beq	852210 <__bss_end__+0x847ef8>
    9d88:	00000000 	andeq	r0, r0, r0
    9d8c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9d90:	73253a43 	teqvc	r5, #274432	; 0x43000
    9d94:	3a73253a 	bcc	1cd3284 <__bss_end__+0x1cc8f6c>
    9d98:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    9d9c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    9da0:	6e203a6b 	vnmulvs.f32	s6, s0, s23
    9da4:	6820746f 	stmdavs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
    9da8:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    9dac:	20676e69 	rsbcs	r6, r7, r9, ror #28
    9db0:	63657073 	cmnvs	r5, #115	; 0x73
    9db4:	65696669 	strbvs	r6, [r9, #-1641]!	; 0x669
    9db8:	25272072 	strcs	r2, [r7, #-114]!	; 0x72
    9dbc:	0a0a2763 	beq	293b50 <__bss_end__+0x289838>
    9dc0:	00000000 	andeq	r0, r0, r0
    9dc4:	454e4f44 	strbmi	r4, [lr, #-3908]	; 0xf44
    9dc8:	0a212121 	beq	852254 <__bss_end__+0x847f3c>
    9dcc:	00000000 	andeq	r0, r0, r0

00009dd0 <__FUNCTION__.4129>:
    9dd0:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    9dd4:	00636f6c 	rsbeq	r6, r3, ip, ror #30

00009dd8 <__FUNCTION__.4136>:
    9dd8:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    9ddc:	5f636f6c 	svcpl	0x00636f6c
    9de0:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    9de4:	0064656e 	rsbeq	r6, r4, lr, ror #10

00009de8 <__FUNCTION__.4141>:
    9de8:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    9dec:	5f636f6c 	svcpl	0x00636f6c
    9df0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    9df4:	00000000 	andeq	r0, r0, r0
    9df8:	4f525245 	svcmi	0x00525245
    9dfc:	73253a52 	teqvc	r5, #335872	; 0x52000
    9e00:	3a73253a 	bcc	1cd32f0 <__bss_end__+0x1cc8fd8>
    9e04:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9e08:	534c4146 	movtpl	r4, #49478	; 0xc146
    9e0c:	693c2845 	ldmdbvs	ip!, {r0, r2, r6, fp, sp}
    9e10:	5f74696e 	svcpl	0x0074696e
    9e14:	3a293e70 	bcc	a597dc <__bss_end__+0xa4f4c4>
    9e18:	6c616320 	stclvs	3, cr6, [r1], #-128	; 0xffffff80
    9e1c:	676e696c 	strbvs	r6, [lr, -ip, ror #18]!
    9e20:	66656220 	strbtvs	r6, [r5], -r0, lsr #4
    9e24:	2065726f 	rsbcs	r7, r5, pc, ror #4
    9e28:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    9e2c:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    9e30:	0a64657a 	beq	1923420 <__bss_end__+0x1919108>
    9e34:	00000000 	andeq	r0, r0, r0
    9e38:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
    9e3c:	6b2f6372 	blvs	be2c0c <__bss_end__+0xbd88f4>
    9e40:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    9e44:	632e636f 	teqvs	lr, #-1140850687	; 0xbc000001
    9e48:	00000000 	andeq	r0, r0, r0
    9e4c:	4f525245 	svcmi	0x00525245
    9e50:	73253a52 	teqvc	r5, #335872	; 0x52000
    9e54:	3a73253a 	bcc	1cd3344 <__bss_end__+0x1cc902c>
    9e58:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9e5c:	534c4146 	movtpl	r4, #49478	; 0xc146
    9e60:	613c2845 	teqvs	ip, r5, asr #16
    9e64:	6e67696c 	cdpvs	9, 6, cr6, cr7, cr12, {3}
    9e68:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
    9e6c:	34202520 	strtcc	r2, [r0], #-1312	; 0x520
    9e70:	203d3d20 	eorscs	r3, sp, r0, lsr #26
    9e74:	3a293e30 	bcc	a5973c <__bss_end__+0xa4f424>
    9e78:	65772220 	ldrbvs	r2, [r7, #-544]!	; 0x220
    9e7c:	20647269 	rsbcs	r7, r4, r9, ror #4
    9e80:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    9e84:	6e656d6e 	cdpvs	13, 6, cr6, cr5, cr14, {3}
    9e88:	6e203a74 	mcrvs	10, 1, r3, cr0, cr4, {3}
    9e8c:	6120746f 	teqvs	r0, pc, ror #8
    9e90:	6c756d20 	ldclvs	13, cr6, [r5], #-128	; 0xffffff80
    9e94:	6c706974 	ldclvs	9, cr6, [r0], #-464	; 0xfffffe30
    9e98:	666f2065 	strbtvs	r2, [pc], -r5, rrx
    9e9c:	22213420 	eorcs	r3, r1, #32, 8	; 0x20000000
    9ea0:	0000000a 	andeq	r0, r0, sl
    9ea4:	4f525245 	svcmi	0x00525245
    9ea8:	73253a52 	teqvc	r5, #335872	; 0x52000
    9eac:	3a73253a 	bcc	1cd339c <__bss_end__+0x1cc9084>
    9eb0:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9eb4:	534c4146 	movtpl	r4, #49478	; 0xc146
    9eb8:	213c2845 	teqcs	ip, r5, asr #16
    9ebc:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    9ec0:	293e705f 	ldmdbcs	lr!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}
    9ec4:	6163203a 	cmnvs	r3, sl, lsr r0
    9ec8:	746f6e6e 	strbtvc	r6, [pc], #-3694	; 9ed0 <__FUNCTION__.4141+0xe8>
    9ecc:	696e6920 	stmdbvs	lr!, {r5, r8, fp, sp, lr}^
    9ed0:	6c616974 	stclvs	9, cr6, [r1], #-464	; 0xfffffe30
    9ed4:	20657a69 	rsbcs	r7, r5, r9, ror #20
    9ed8:	63697774 	cmnvs	r9, #116, 14	; 0x1d00000
    9edc:	0a0a2165 	beq	292478 <__bss_end__+0x288160>
    9ee0:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss:

00009ee4 <__bss_start__>:
    9ee4:	00000000 	andeq	r0, r0, r0

00009ee8 <thread_sum>:
    9ee8:	00000000 	andeq	r0, r0, r0

00009eec <freeq>:
	...

00009ef8 <nalloced>:
    9ef8:	00000000 	andeq	r0, r0, r0

00009efc <cur_thread>:
    9efc:	00000000 	andeq	r0, r0, r0

00009f00 <runq>:
	...

00009f0c <scheduler_thread>:
    9f0c:	00000000 	andeq	r0, r0, r0

00009f10 <buf.4133>:
	...

0000a310 <init_p>:
    a310:	00000000 	andeq	r0, r0, r0

0000a314 <heap_ptr>:
    a314:	00000000 	andeq	r0, r0, r0

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4b5a3605 	blmi	168d82c <__bss_end__+0x1683514>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	12010901 	andne	r0, r1, #16384	; 0x4000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0x404
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	22011a01 	andcs	r1, r1, #4096	; 0x1000
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__bss_end__+0x10c6a0c>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	34202955 	strtcc	r2, [r0], #-2389	; 0x955
   c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
  10:	43434700 	movtmi	r4, #14080	; 0x3700
  14:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
  18:	5420554e 	strtpl	r5, [r0], #-1358	; 0x54e
  1c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  20:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
  24:	6d724120 	ldfvse	f4, [r2, #-128]!	; 0xffffff80
  28:	626d4520 	rsbvs	r4, sp, #32, 10	; 0x8000000
  2c:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
  30:	72502064 	subsvc	r2, r0, #100	; 0x64
  34:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
  38:	73726f73 	cmnvc	r2, #460	; 0x1cc
  3c:	322d3720 	eorcc	r3, sp, #32, 14	; 0x800000
  40:	2d383130 	ldfcss	f3, [r8, #-192]!	; 0xffffff40
  44:	752d3371 	strvc	r3, [sp, #-881]!	; 0x371
  48:	74616470 	strbtvc	r6, [r1], #-1136	; 0x470
  4c:	37202965 	strcc	r2, [r0, -r5, ror #18]!
  50:	312e332e 	teqcc	lr, lr, lsr #6
  54:	31303220 	teqcc	r0, r0, lsr #4
  58:	32363038 	eorscc	r3, r6, #56	; 0x38
  5c:	72282032 	eorvc	r2, r8, #50	; 0x32
  60:	61656c65 	cmnvs	r5, r5, ror #24
  64:	20296573 	eorcs	r6, r9, r3, ror r5
  68:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  6c:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
  70:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
  74:	2d372d64 	ldccs	13, cr2, [r7, #-400]!	; 0xfffffe70
  78:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  7c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  80:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  84:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  88:	39313632 	ldmdbcc	r1!, {r1, r4, r5, r9, sl, ip, sp}
  8c:	005d3730 	subseq	r3, sp, r0, lsr r7

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000045f 	andeq	r0, r0, pc, asr r4
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000010 	andeq	r0, r0, r0, lsl r0
      10:	00012a01 	andeq	r2, r1, r1, lsl #20
      14:	0000a300 	andeq	sl, r0, r0, lsl #6
      18:	00801000 	addeq	r1, r0, r0
      1c:	00019c00 	andeq	r9, r1, r0, lsl #24
      20:	00000000 	andeq	r0, r0, r0
      24:	05040200 	streq	r0, [r4, #-512]	; 0x200
      28:	00746e69 	rsbseq	r6, r4, r9, ror #28
      2c:	81070403 	tsthi	r7, r3, lsl #8
      30:	03000001 	movweq	r0, #1
      34:	00810601 	addeq	r0, r1, r1, lsl #12
      38:	02030000 	andeq	r0, r3, #0
      3c:	0001d205 	andeq	sp, r1, r5, lsl #4
      40:	05040300 	streq	r0, [r4, #-768]	; 0x300
      44:	000001be 			; <UNDEFINED> instruction: 0x000001be
      48:	b9050803 	stmdblt	r5, {r0, r1, fp}
      4c:	03000001 	movweq	r0, #1
      50:	007f0801 	rsbseq	r0, pc, r1, lsl #16
      54:	02030000 	andeq	r0, r3, #0
      58:	0000fe07 	andeq	pc, r0, r7, lsl #28
      5c:	01dc0400 	bicseq	r0, ip, r0, lsl #8
      60:	34030000 	strcc	r0, [r3], #-0
      64:	00000068 	andeq	r0, r0, r8, rrx
      68:	7c070403 	cfstrsvc	mvf0, [r7], {3}
      6c:	03000001 	movweq	r0, #1
      70:	01770708 	cmneq	r7, r8, lsl #14
      74:	04030000 	streq	r0, [r3], #-0
      78:	0001b007 	andeq	fp, r1, r7
      7c:	03040500 	movweq	r0, #17664	; 0x4500
      80:	00880801 	addeq	r0, r8, r1, lsl #16
      84:	04060000 	streq	r0, [r6], #-0
      88:	0000008c 	andeq	r0, r0, ip, lsl #1
      8c:	00007f07 	andeq	r7, r0, r7, lsl #30
      90:	007f0800 	rsbseq	r0, pc, r0, lsl #16
      94:	00a10000 	adceq	r0, r1, r0
      98:	76090000 	strvc	r0, [r9], -r0
      9c:	07000000 	streq	r0, [r0, -r0]
      a0:	01c70a00 	biceq	r0, r7, r0, lsl #20
      a4:	20500000 	subscs	r0, r0, r0
      a8:	00f62502 	rscseq	r2, r6, r2, lsl #10
      ac:	690b0000 	stmdbvs	fp, {}	; <UNPREDICTABLE>
      b0:	02000001 	andeq	r0, r0, #1
      b4:	0000f627 	andeq	pc, r0, r7, lsr #12
      b8:	000b0000 	andeq	r0, fp, r0
      bc:	02000000 	andeq	r0, r0, #0
      c0:	00010629 	andeq	r0, r1, r9, lsr #12
      c4:	740c4000 	strvc	r4, [ip], #-0
      c8:	02006469 	andeq	r6, r0, #1761607680	; 0x69000000
      cc:	00005d2a 	andeq	r5, r0, sl, lsr #26
      d0:	660c4400 	strvs	r4, [ip], -r0, lsl #8
      d4:	2c02006e 	stccs	0, cr0, [r2], {110}	; 0x6e
      d8:	00000117 	andeq	r0, r0, r7, lsl r1
      dc:	72610c48 	rsbvc	r0, r1, #72, 24	; 0x4800
      e0:	2d020067 	stccs	0, cr0, [r2, #-412]	; 0xfffffe64
      e4:	0000007d 	andeq	r0, r0, sp, ror r0
      e8:	006f0b4c 	rsbeq	r0, pc, ip, asr #22
      ec:	2f020000 	svccs	0x00020000
      f0:	0000011d 	andeq	r0, r0, sp, lsl r1
      f4:	5d080050 	stcpl	0, cr0, [r8, #-320]	; 0xfffffec0
      f8:	06000000 	streq	r0, [r0], -r0
      fc:	09000001 	stmdbeq	r0, {r0}
     100:	00000076 	andeq	r0, r0, r6, ror r0
     104:	0406000f 	streq	r0, [r6], #-15
     108:	000000a1 	andeq	r0, r0, r1, lsr #1
     10c:	0001170d 	andeq	r1, r1, sp, lsl #14
     110:	007d0e00 	rsbseq	r0, sp, r0, lsl #28
     114:	06000000 	streq	r0, [r0], -r0
     118:	00010c04 	andeq	r0, r1, r4, lsl #24
     11c:	005d0800 	subseq	r0, sp, r0, lsl #16
     120:	012e0000 	teqeq	lr, r0
     124:	760f0000 	strvc	r0, [pc], -r0
     128:	ff000000 			; <UNDEFINED> instruction: 0xff000000
     12c:	8e040007 	cdphi	0, 0, cr0, cr4, cr7, {0}
     130:	02000001 	andeq	r0, r0, #1
     134:	0000a130 	andeq	sl, r0, r0, lsr r1
     138:	013a1000 	teqeq	sl, r0
     13c:	13010000 	movwne	r0, #4096	; 0x1000
     140:	00008010 	andeq	r8, r0, r0, lsl r0
     144:	000000ac 	andeq	r0, r0, ip, lsr #1
     148:	02209c01 	eoreq	r9, r0, #256	; 0x100
     14c:	61110000 	tstvs	r1, r0
     150:	01006772 	tsteq	r0, r2, ror r7
     154:	00007d13 	andeq	r7, r0, r3, lsl sp
     158:	00000000 	andeq	r0, r0, r0
     15c:	00781200 	rsbseq	r1, r8, r0, lsl #4
     160:	02201401 	eoreq	r1, r0, #16777216	; 0x1000000
     164:	002c0000 	eoreq	r0, ip, r0
     168:	74120000 	ldrvc	r0, [r2], #-0
     16c:	01006469 	tsteq	r0, r9, ror #8
     170:	00002c17 	andeq	r2, r0, r7, lsl ip
     174:	00005800 	andeq	r5, r0, r0, lsl #16
     178:	01461300 	mrseq	r1, SPSR_und
     17c:	02360000 	eorseq	r0, r6, #0
     180:	03050000 	movweq	r0, #20480	; 0x5000
     184:	000097cc 	andeq	r9, r0, ip, asr #15
     188:	00802014 	addeq	r2, r0, r4, lsl r0
     18c:	0003d100 	andeq	sp, r3, r0, lsl #2
     190:	80341500 	eorshi	r1, r4, r0, lsl #10
     194:	03e20000 	mvneq	r0, #0
     198:	01ae0000 			; <UNDEFINED> instruction: 0x01ae0000
     19c:	01160000 	tsteq	r6, r0
     1a0:	00740251 	rsbseq	r0, r4, r1, asr r2
     1a4:	05500116 	ldrbeq	r0, [r0, #-278]	; 0x116
     1a8:	0097e003 	addseq	lr, r7, r3
     1ac:	38140000 	ldmdacc	r4, {}	; <UNPREDICTABLE>
     1b0:	d1000080 	smlabble	r0, r0, r0, r0
     1b4:	15000003 	strne	r0, [r0, #-3]
     1b8:	00008068 	andeq	r8, r0, r8, rrx
     1bc:	000003e2 	andeq	r0, r0, r2, ror #7
     1c0:	000001ec 	andeq	r0, r0, ip, ror #3
     1c4:	01530116 	cmpeq	r3, r6, lsl r1
     1c8:	5201164a 	andpl	r1, r1, #77594624	; 0x4a00000
     1cc:	97cc0305 	strbls	r0, [ip, r5, lsl #6]
     1d0:	01160000 	tsteq	r6, r0
     1d4:	4c030551 	cfstr32mi	mvfx0, [r3], {81}	; 0x51
     1d8:	16000098 			; <UNDEFINED> instruction: 0x16000098
     1dc:	03055001 	movweq	r5, #20481	; 0x5001
     1e0:	000097f8 	strdeq	r9, [r0], -r8
     1e4:	007d0216 	rsbseq	r0, sp, r6, lsl r2
     1e8:	00007402 	andeq	r7, r0, r2, lsl #8
     1ec:	00806c14 	addeq	r6, r0, r4, lsl ip
     1f0:	0003f800 	andeq	pc, r3, r0, lsl #16
     1f4:	80701400 	rsbshi	r1, r0, r0, lsl #8
     1f8:	03ff0000 	mvnseq	r0, #0
     1fc:	84140000 	ldrhi	r0, [r4], #-0
     200:	ff000080 			; <UNDEFINED> instruction: 0xff000080
     204:	14000003 	strne	r0, [r0], #-3
     208:	00008098 	muleq	r0, r8, r0
     20c:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     210:	0080a017 	addeq	sl, r0, r7, lsl r0
     214:	00040600 	andeq	r0, r4, r0, lsl #12
     218:	50011600 	andpl	r1, r1, r0, lsl #12
     21c:	00003001 	andeq	r3, r0, r1
     220:	002c0406 	eoreq	r0, ip, r6, lsl #8
     224:	7f080000 	svcvc	0x00080000
     228:	36000000 	strcc	r0, [r0], -r0
     22c:	09000002 	stmdbeq	r0, {r1}
     230:	00000076 	andeq	r0, r0, r6, ror r0
     234:	2607000b 	strcs	r0, [r7], -fp
     238:	18000002 	stmdane	r0, {r1}
     23c:	00000067 	andeq	r0, r0, r7, rrx
     240:	80bc2601 	adcshi	r2, ip, r1, lsl #12
     244:	00f00000 	rscseq	r0, r0, r0
     248:	9c010000 	stcls	0, cr0, [r1], {-0}
     24c:	000003a4 	andeq	r0, r0, r4, lsr #7
     250:	01006e19 	tsteq	r0, r9, lsl lr
     254:	0000252d 	andeq	r2, r0, sp, lsr #10
     258:	73121e00 	tstvc	r2, #0, 28
     25c:	01006d75 	tsteq	r0, r5, ror sp
     260:	00002c30 	andeq	r2, r0, r0, lsr ip
     264:	00006b00 	andeq	r6, r0, r0, lsl #22
     268:	01461300 	mrseq	r1, SPSR_und
     26c:	03a40000 			; <UNDEFINED> instruction: 0x03a40000
     270:	03050000 	movweq	r0, #20480	; 0x5000
     274:	000097d8 	ldrdeq	r9, [r0], -r8
     278:	0080e01a 	addeq	lr, r0, sl, lsl r0
     27c:	00003800 	andeq	r3, r0, r0, lsl #16
     280:	0002ca00 	andeq	ip, r2, r0, lsl #20
     284:	00691200 	rsbeq	r1, r9, r0, lsl #4
     288:	00253101 	eoreq	r3, r5, r1, lsl #2
     28c:	008a0000 	addeq	r0, sl, r0
     290:	001b0000 	andseq	r0, fp, r0
     294:	12000000 	andne	r0, r0, #0
     298:	32010078 	andcc	r0, r1, #120	; 0x78
     29c:	000003a9 	andeq	r0, r0, r9, lsr #7
     2a0:	000000a9 	andeq	r0, r0, r9, lsr #1
     2a4:	0080f815 	addeq	pc, r0, r5, lsl r8	; <UNPREDICTABLE>
     2a8:	00041700 	andeq	r1, r4, r0, lsl #14
     2ac:	0002b800 	andeq	fp, r2, r0, lsl #16
     2b0:	50011600 	andpl	r1, r1, r0, lsl #12
     2b4:	00007702 	andeq	r7, r0, r2, lsl #14
     2b8:	00810c17 	addeq	r0, r1, r7, lsl ip
     2bc:	00042c00 	andeq	r2, r4, r0, lsl #24
     2c0:	50011600 	andpl	r1, r1, r0, lsl #12
     2c4:	00007602 	andeq	r7, r0, r2, lsl #12
     2c8:	c4140000 	ldrgt	r0, [r4], #-0
     2cc:	46000080 	strmi	r0, [r0], -r0, lsl #1
     2d0:	14000004 	strne	r0, [r0], #-4
     2d4:	000080c8 	andeq	r8, r0, r8, asr #1
     2d8:	0000044d 	andeq	r0, r0, sp, asr #8
     2dc:	0080d015 	addeq	sp, r0, r5, lsl r0
     2e0:	0003e200 	andeq	lr, r3, r0, lsl #4
     2e4:	0002f300 	andeq	pc, r2, r0, lsl #6
     2e8:	50011600 	andpl	r1, r1, r0, lsl #12
     2ec:	985c0305 	ldmdals	ip, {r0, r2, r8, r9}^
     2f0:	14000000 	strne	r0, [r0], #-0
     2f4:	0000811c 	andeq	r8, r0, ip, lsl r1
     2f8:	00000454 	andeq	r0, r0, r4, asr r4
     2fc:	00813015 	addeq	r3, r1, r5, lsl r0
     300:	0003e200 	andeq	lr, r3, r0, lsl #4
     304:	00031300 	andeq	r1, r3, r0, lsl #6
     308:	50011600 	andpl	r1, r1, r0, lsl #12
     30c:	98840305 	stmls	r4, {r0, r2, r8, r9}
     310:	15000000 	strne	r0, [r0, #-0]
     314:	00008150 	andeq	r8, r0, r0, asr r1
     318:	000003e2 	andeq	r0, r0, r2, ror #7
     31c:	00000342 	andeq	r0, r0, r2, asr #6
     320:	02530116 	subseq	r0, r3, #-2147483643	; 0x80000005
     324:	01163a08 	tsteq	r6, r8, lsl #20
     328:	d8030552 	stmdale	r3, {r1, r4, r6, r8, sl}
     32c:	16000097 			; <UNDEFINED> instruction: 0x16000097
     330:	03055101 	movweq	r5, #20737	; 0x5101
     334:	0000984c 	andeq	r9, r0, ip, asr #16
     338:	05500116 	ldrbeq	r0, [r0, #-278]	; 0x116
     33c:	00989803 	addseq	r9, r8, r3, lsl #16
     340:	54140000 	ldrpl	r0, [r4], #-0
     344:	f8000081 			; <UNDEFINED> instruction: 0xf8000081
     348:	15000003 	strne	r0, [r0, #-3]
     34c:	00008178 	andeq	r8, r0, r8, ror r1
     350:	000003e2 	andeq	r0, r0, r2, ror #7
     354:	0000037a 	andeq	r0, r0, sl, ror r3
     358:	02530116 	subseq	r0, r3, #-2147483643	; 0x80000005
     35c:	01163b08 	tsteq	r6, r8, lsl #22
     360:	d8030552 	stmdale	r3, {r1, r4, r6, r8, sl}
     364:	16000097 			; <UNDEFINED> instruction: 0x16000097
     368:	03055101 	movweq	r5, #20737	; 0x5101
     36c:	0000984c 	andeq	r9, r0, ip, asr #16
     370:	05500116 	ldrbeq	r0, [r0, #-278]	; 0x116
     374:	0098bc03 	addseq	fp, r8, r3, lsl #24
     378:	7c140000 	ldcvc	0, cr0, [r4], {-0}
     37c:	f8000081 			; <UNDEFINED> instruction: 0xf8000081
     380:	15000003 	strne	r0, [r0, #-3]
     384:	00008184 	andeq	r8, r0, r4, lsl #3
     388:	000003e2 	andeq	r0, r0, r2, ror #7
     38c:	0000039a 	muleq	r0, sl, r3
     390:	05500116 	ldrbeq	r0, [r0, #-278]	; 0x116
     394:	0098e003 	addseq	lr, r8, r3
     398:	88140000 	ldmdahi	r4, {}	; <UNPREDICTABLE>
     39c:	5b000081 	blpl	5a8 <_start-0x7a58>
     3a0:	00000004 	andeq	r0, r0, r4
     3a4:	00009107 	andeq	r9, r0, r7, lsl #2
     3a8:	25040600 	strcs	r0, [r4, #-1536]	; 0x600
     3ac:	1c000000 	stcne	0, cr0, [r0], {-0}
     3b0:	00000153 	andeq	r0, r0, r3, asr r1
     3b4:	002c1001 	eoreq	r1, ip, r1
     3b8:	03050000 	movweq	r0, #20480	; 0x5000
     3bc:	00009ee4 	andeq	r9, r0, r4, ror #29
     3c0:	00019b1c 	andeq	r9, r1, ip, lsl fp
     3c4:	2c100100 	ldfcss	f0, [r0], {-0}
     3c8:	05000000 	streq	r0, [r0, #-0]
     3cc:	009ee803 	addseq	lr, lr, r3, lsl #16
     3d0:	01e51d00 	mvneq	r1, r0, lsl #26
     3d4:	40020000 	andmi	r0, r2, r0
     3d8:	000003dc 	ldrdeq	r0, [r0], -ip
     3dc:	012e0406 	teqeq	lr, r6, lsl #8
     3e0:	521e0000 	andspl	r0, lr, #0
     3e4:	04000004 	streq	r0, [r0], #-4
     3e8:	00002527 	andeq	r2, r0, r7, lsr #10
     3ec:	0003f800 	andeq	pc, r3, r0, lsl #16
     3f0:	00860e00 	addeq	r0, r6, r0, lsl #28
     3f4:	001f0000 	andseq	r0, pc, r0
     3f8:	00000520 	andeq	r0, r0, r0, lsr #10
     3fc:	205c0400 	subscs	r0, ip, r0, lsl #8
     400:	000001a6 	andeq	r0, r0, r6, lsr #3
     404:	60213902 	eorvs	r3, r1, r2, lsl #18
     408:	02000001 	andeq	r0, r0, #1
     40c:	00041736 	andeq	r1, r4, r6, lsr r7
     410:	00250e00 	eoreq	r0, r5, r0, lsl #28
     414:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     418:	00000111 	andeq	r0, r0, r1, lsl r1
     41c:	007d6604 	rsbseq	r6, sp, r4, lsl #12
     420:	042c0000 	strteq	r0, [ip], #-0
     424:	2c0e0000 	stccs	0, cr0, [lr], {-0}
     428:	00000000 	andeq	r0, r0, r0
     42c:	00009a1e 	andeq	r9, r0, lr, lsl sl
     430:	dc330200 	lfmle	f0, 4, [r3], #-0
     434:	46000003 	strmi	r0, [r0], -r3
     438:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
     43c:	00000117 	andeq	r0, r0, r7, lsl r1
     440:	00007d0e 	andeq	r7, r0, lr, lsl #26
     444:	75200000 	strvc	r0, [r0, #-0]!
     448:	04000000 	streq	r0, [r0], #-0
     44c:	01f42038 	mvnseq	r2, r8, lsr r0
     450:	6a040000 	bvs	100458 <__bss_end__+0xf6140>
     454:	00011920 	andeq	r1, r1, r0, lsr #18
     458:	203d0200 	eorscs	r0, sp, r0, lsl #4
     45c:	0000008d 	andeq	r0, r0, sp, lsl #1
     460:	85005f04 	strhi	r5, [r0, #-3844]	; 0xf04
     464:	04000009 	streq	r0, [r0], #-9
     468:	0001b100 	andeq	fp, r1, r0, lsl #2
     46c:	10010400 	andne	r0, r1, r0, lsl #8
     470:	01000000 	mrseq	r0, (UNDEF: 0)
     474:	00000208 	andeq	r0, r0, r8, lsl #4
     478:	000000a3 	andeq	r0, r0, r3, lsr #1
     47c:	000081ac 	andeq	r8, r0, ip, lsr #3
     480:	0000046c 	andeq	r0, r0, ip, ror #8
     484:	00000146 	andeq	r0, r0, r6, asr #2
     488:	69050402 	stmdbvs	r5, {r1, sl}
     48c:	0300746e 	movweq	r7, #1134	; 0x46e
     490:	01810704 	orreq	r0, r1, r4, lsl #14
     494:	01030000 	mrseq	r0, (UNDEF: 3)
     498:	00008106 	andeq	r8, r0, r6, lsl #2
     49c:	05020300 	streq	r0, [r2, #-768]	; 0x300
     4a0:	000001d2 	ldrdeq	r0, [r0], -r2
     4a4:	be050403 	cdplt	4, 0, cr0, cr5, cr3, {0}
     4a8:	03000001 	movweq	r0, #1
     4ac:	01b90508 			; <UNDEFINED> instruction: 0x01b90508
     4b0:	01030000 	mrseq	r0, (UNDEF: 3)
     4b4:	00007f08 	andeq	r7, r0, r8, lsl #30
     4b8:	07020300 	streq	r0, [r2, -r0, lsl #6]
     4bc:	000000fe 	strdeq	r0, [r0], -lr
     4c0:	0001dc04 	andeq	sp, r1, r4, lsl #24
     4c4:	68340400 	ldmdavs	r4!, {sl}
     4c8:	03000000 	movweq	r0, #0
     4cc:	017c0704 	cmneq	ip, r4, lsl #14
     4d0:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     4d4:	00017707 	andeq	r7, r1, r7, lsl #14
     4d8:	07040300 	streq	r0, [r4, -r0, lsl #6]
     4dc:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
     4e0:	01030405 	tsteq	r3, r5, lsl #8
     4e4:	00008808 	andeq	r8, r0, r8, lsl #16
     4e8:	8c040600 	stchi	6, cr0, [r4], {-0}
     4ec:	07000000 	streq	r0, [r0, -r0]
     4f0:	0000007f 	andeq	r0, r0, pc, ror r0
     4f4:	00007f08 	andeq	r7, r0, r8, lsl #30
     4f8:	0000a100 	andeq	sl, r0, r0, lsl #2
     4fc:	00760900 	rsbseq	r0, r6, r0, lsl #18
     500:	00070000 	andeq	r0, r7, r0
     504:	0001c70a 	andeq	ip, r1, sl, lsl #14
     508:	03205000 	teqeq	r0, #0
     50c:	0000f625 	andeq	pc, r0, r5, lsr #12
     510:	01690b00 	cmneq	r9, r0, lsl #22
     514:	27030000 	strcs	r0, [r3, -r0]
     518:	000000f6 	strdeq	r0, [r0], -r6
     51c:	00000b00 	andeq	r0, r0, r0, lsl #22
     520:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
     524:	00000106 	andeq	r0, r0, r6, lsl #2
     528:	69740c40 	ldmdbvs	r4!, {r6, sl, fp}^
     52c:	2a030064 	bcs	c06c4 <__bss_end__+0xb63ac>
     530:	0000005d 	andeq	r0, r0, sp, asr r0
     534:	6e660c44 	cdpvs	12, 6, cr0, cr6, cr4, {2}
     538:	172c0300 	strne	r0, [ip, -r0, lsl #6]!
     53c:	48000001 	stmdami	r0, {r0}
     540:	6772610c 	ldrbvs	r6, [r2, -ip, lsl #2]!
     544:	7d2d0300 	stcvc	3, cr0, [sp, #-0]
     548:	4c000000 	stcmi	0, cr0, [r0], {-0}
     54c:	00006f0b 	andeq	r6, r0, fp, lsl #30
     550:	1d2f0300 	stcne	3, cr0, [pc, #-0]	; 558 <_start-0x7aa8>
     554:	50000001 	andpl	r0, r0, r1
     558:	005d0800 	subseq	r0, sp, r0, lsl #16
     55c:	01060000 	mrseq	r0, (UNDEF: 6)
     560:	76090000 	strvc	r0, [r9], -r0
     564:	0f000000 	svceq	0x00000000
     568:	a1040600 	tstge	r4, r0, lsl #12
     56c:	0d000000 	stceq	0, cr0, [r0, #-0]
     570:	00000117 	andeq	r0, r0, r7, lsl r1
     574:	00007d0e 	andeq	r7, r0, lr, lsl #26
     578:	04060000 	streq	r0, [r6], #-0
     57c:	0000010c 	andeq	r0, r0, ip, lsl #2
     580:	00005d08 	andeq	r5, r0, r8, lsl #26
     584:	00012e00 	andeq	r2, r1, r0, lsl #28
     588:	00760f00 	rsbseq	r0, r6, r0, lsl #30
     58c:	07ff0000 	ldrbeq	r0, [pc, r0]!
     590:	018e0400 	orreq	r0, lr, r0, lsl #8
     594:	30030000 	andcc	r0, r3, r0
     598:	000000a1 	andeq	r0, r0, r1, lsr #1
     59c:	0c005110 	stfeqs	f5, [r0], {16}
     5a0:	01680801 	cmneq	r8, r1, lsl #16
     5a4:	e30b0000 	movw	r0, #45056	; 0xb000
     5a8:	01000002 	tsteq	r0, r2
     5ac:	00016809 	andeq	r6, r1, r9, lsl #16
     5b0:	c40b0000 	strgt	r0, [fp], #-0
     5b4:	01000002 	tsteq	r0, r2
     5b8:	00016809 	andeq	r6, r1, r9, lsl #16
     5bc:	630c0400 	movwvs	r0, #50176	; 0xc400
     5c0:	0100746e 	tsteq	r0, lr, ror #8
     5c4:	00002c0a 	andeq	r2, r0, sl, lsl #24
     5c8:	06000800 	streq	r0, [r0], -r0, lsl #16
     5cc:	00012e04 	andeq	r2, r1, r4, lsl #28
     5d0:	5f511100 	svcpl	0x00511100
     5d4:	0b010074 	bleq	407ac <__bss_end__+0x36494>
     5d8:	00000139 	andeq	r0, r0, r9, lsr r1
     5dc:	00025312 	andeq	r5, r2, r2, lsl r3
     5e0:	2c100100 	ldfcss	f0, [r0], {-0}
     5e4:	ac000000 	stcge	0, cr0, [r0], {-0}
     5e8:	08000081 	stmdaeq	r0, {r0, r7}
     5ec:	01000000 	mrseq	r0, (UNDEF: 0)
     5f0:	0001a09c 	muleq	r1, ip, r0
     5f4:	00711300 	rsbseq	r1, r1, r0, lsl #6
     5f8:	01a01001 	moveq	r1, r1
     5fc:	00c70000 	sbceq	r0, r7, r0
     600:	06000000 	streq	r0, [r0], -r0
     604:	00016e04 	andeq	r6, r1, r4, lsl #28
     608:	02da1400 	sbcseq	r1, sl, #0, 8
     60c:	2b010000 	blcs	40614 <__bss_end__+0x362fc>
     610:	000081b4 			; <UNDEFINED> instruction: 0x000081b4
     614:	00000038 	andeq	r0, r0, r8, lsr r0
     618:	01d29c01 	bicseq	r9, r2, r1, lsl #24
     61c:	71150000 	tstvc	r5, r0
     620:	a02b0100 	eorge	r0, fp, r0, lsl #2
     624:	01000001 	tsteq	r0, r1
     628:	00651550 	rsbeq	r1, r5, r0, asr r5
     62c:	01682b01 	cmneq	r8, r1, lsl #22
     630:	51010000 	mrspl	r0, (UNDEF: 1)
     634:	02011400 	andeq	r1, r1, #0, 8
     638:	37010000 	strcc	r0, [r1, -r0]
     63c:	000081ec 	andeq	r8, r0, ip, ror #3
     640:	00000028 	andeq	r0, r0, r8, lsr #32
     644:	01fe9c01 	mvnseq	r9, r1, lsl #24
     648:	71150000 	tstvc	r5, r0
     64c:	a0370100 	eorsge	r0, r7, r0, lsl #2
     650:	01000001 	tsteq	r0, r1
     654:	00651550 	rsbeq	r1, r5, r0, asr r5
     658:	01683701 	cmneq	r8, r1, lsl #14
     65c:	51010000 	mrspl	r0, (UNDEF: 1)
     660:	02d21400 	sbcseq	r1, r2, #0, 8
     664:	29020000 	stmdbcs	r2, {}	; <UNPREDICTABLE>
     668:	00008214 	andeq	r8, r0, r4, lsl r2
     66c:	00000018 	andeq	r0, r0, r8, lsl r0
     670:	023c9c01 	eorseq	r9, ip, #256	; 0x100
     674:	74130000 	ldrvc	r0, [r3], #-0
     678:	29020068 	stmdbcs	r2, {r3, r5, r6}
     67c:	00000168 	andeq	r0, r0, r8, ror #2
     680:	000000e8 	andeq	r0, r0, r8, ror #1
     684:	00822416 	addeq	r2, r2, r6, lsl r4
     688:	0001d200 	andeq	sp, r1, r0, lsl #4
     68c:	51011700 	tstpl	r1, r0, lsl #14
     690:	5001f303 	andpl	pc, r1, r3, lsl #6
     694:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     698:	009eec03 	addseq	lr, lr, r3, lsl #24
     69c:	12000000 	andne	r0, r0, #0
     6a0:	000002a5 	andeq	r0, r0, r5, lsr #5
     6a4:	00251201 	eoreq	r1, r5, r1, lsl #4
     6a8:	822c0000 	eorhi	r0, ip, #0
     6ac:	007c0000 	rsbseq	r0, ip, r0
     6b0:	9c010000 	stcls	0, cr0, [r1], {-0}
     6b4:	000002f4 	strdeq	r0, [r0], -r4
     6b8:	01007113 	tsteq	r0, r3, lsl r1
     6bc:	0001a012 	andeq	sl, r1, r2, lsl r0
     6c0:	00011400 	andeq	r1, r1, r0, lsl #8
     6c4:	01461800 	cmpeq	r6, r0, lsl #16
     6c8:	02f40000 	rscseq	r0, r4, #0
     6cc:	03050000 	movweq	r0, #20480	; 0x5000
     6d0:	000098ec 	andeq	r9, r0, ip, ror #17
     6d4:	00824419 	addeq	r4, r2, r9, lsl r4
     6d8:	00017900 	andeq	r7, r1, r0, lsl #18
     6dc:	00028500 	andeq	r8, r2, r0, lsl #10
     6e0:	50011700 	andpl	r1, r1, r0, lsl #14
     6e4:	00007402 	andeq	r7, r0, r2, lsl #8
     6e8:	00826019 	addeq	r6, r2, r9, lsl r0
     6ec:	00093500 	andeq	r3, r9, r0, lsl #10
     6f0:	0002b300 	andeq	fp, r2, r0, lsl #6
     6f4:	53011700 	movwpl	r1, #5888	; 0x1700
     6f8:	01174501 	tsteq	r7, r1, lsl #10
     6fc:	ec030552 	cfstr32	mvfx0, [r3], {82}	; 0x52
     700:	17000098 			; <UNDEFINED> instruction: 0x17000098
     704:	03055101 	movweq	r5, #20737	; 0x5101
     708:	00009968 	andeq	r9, r0, r8, ror #18
     70c:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     710:	00994803 	addseq	r4, r9, r3, lsl #16
     714:	641a0000 	ldrvs	r0, [sl], #-0
     718:	4b000082 	blmi	928 <_start-0x76d8>
     71c:	19000009 	stmdbne	r0, {r0, r3}
     720:	00008284 	andeq	r8, r0, r4, lsl #5
     724:	00000935 	andeq	r0, r0, r5, lsr r9
     728:	000002ea 	andeq	r0, r0, sl, ror #5
     72c:	01530117 	cmpeq	r3, r7, lsl r1
     730:	52011746 	andpl	r1, r1, #18350080	; 0x1180000
     734:	98ec0305 	stmials	ip!, {r0, r2, r8, r9}^
     738:	01170000 	tsteq	r7, r0
     73c:	68030551 	stmdavs	r3, {r0, r4, r6, r8, sl}
     740:	17000099 			; <UNDEFINED> instruction: 0x17000099
     744:	03055001 	movweq	r5, #20481	; 0x5001
     748:	0000996c 	andeq	r9, r0, ip, ror #18
     74c:	82881a00 	addhi	r1, r8, #0, 20
     750:	094b0000 	stmdbeq	fp, {}^	; <UNPREDICTABLE>
     754:	07000000 	streq	r0, [r0, -r0]
     758:	00000091 	muleq	r0, r1, r0
     75c:	0002ad12 	andeq	sl, r2, r2, lsl sp
     760:	681b0100 	ldmdavs	fp, {r8}
     764:	a8000001 	stmdage	r0, {r0}
     768:	90000082 	andls	r0, r0, r2, lsl #1
     76c:	01000000 	mrseq	r0, (UNDEF: 0)
     770:	0003c09c 	muleq	r3, ip, r0
     774:	00711300 	rsbseq	r1, r1, r0, lsl #6
     778:	01a01b01 	lsleq	r1, r1, #22
     77c:	01480000 	mrseq	r0, (UNDEF: 72)
     780:	46180000 	ldrmi	r0, [r8], -r0
     784:	d0000001 	andle	r0, r0, r1
     788:	05000003 	streq	r0, [r0, #-3]
     78c:	0098f403 	addseq	pc, r8, r3, lsl #8
     790:	00651b00 	rsbeq	r1, r5, r0, lsl #22
     794:	01681e01 	cmneq	r8, r1, lsl #28
     798:	019b0000 	orrseq	r0, fp, r0
     79c:	c8190000 	ldmdagt	r9, {}	; <UNPREDICTABLE>
     7a0:	35000082 	strcc	r0, [r0, #-130]	; 0x82
     7a4:	69000009 	stmdbvs	r0, {r0, r3}
     7a8:	17000003 	strne	r0, [r0, -r3]
     7ac:	4c015301 	stcmi	3, cr5, [r1], {1}
     7b0:	05520117 	ldrbeq	r0, [r2, #-279]	; 0x117
     7b4:	0098f403 	addseq	pc, r8, r3, lsl #8
     7b8:	51011700 	tstpl	r1, r0, lsl #14
     7bc:	99680305 	stmdbls	r8!, {r0, r2, r8, r9}^
     7c0:	01170000 	tsteq	r7, r0
     7c4:	9c030550 	cfstr32ls	mvfx0, [r3], {80}	; 0x50
     7c8:	00000099 	muleq	r0, r9, r0
     7cc:	0082cc1a 	addeq	ip, r2, sl, lsl ip
     7d0:	00094b00 	andeq	r4, r9, r0, lsl #22
     7d4:	82dc1900 	sbcshi	r1, ip, #0, 18
     7d8:	023c0000 	eorseq	r0, ip, #0
     7dc:	03870000 	orreq	r0, r7, #0
     7e0:	01170000 	tsteq	r7, r0
     7e4:	01f30350 	mvnseq	r0, r0, asr r3
     7e8:	f8190050 			; <UNDEFINED> instruction: 0xf8190050
     7ec:	35000082 	strcc	r0, [r0, #-130]	; 0x82
     7f0:	b6000009 	strlt	r0, [r0], -r9
     7f4:	17000003 	strne	r0, [r0, -r3]
     7f8:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     7fc:	52011720 	andpl	r1, r1, #32, 14	; 0x800000
     800:	98f40305 	ldmls	r4!, {r0, r2, r8, r9}^
     804:	01170000 	tsteq	r7, r0
     808:	68030551 	stmdavs	r3, {r0, r4, r6, r8, sl}
     80c:	17000099 			; <UNDEFINED> instruction: 0x17000099
     810:	03055001 	movweq	r5, #20481	; 0x5001
     814:	000099c4 	andeq	r9, r0, r4, asr #19
     818:	82fc1a00 	rscshi	r1, ip, #0, 20
     81c:	094b0000 	stmdbeq	fp, {}^	; <UNPREDICTABLE>
     820:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     824:	0000007f 	andeq	r0, r0, pc, ror r0
     828:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     82c:	00007609 	andeq	r7, r0, r9, lsl #12
     830:	07000500 	streq	r0, [r0, -r0, lsl #10]
     834:	000003c0 	andeq	r0, r0, r0, asr #7
     838:	0002c912 	andeq	ip, r2, r2, lsl r9
     83c:	681c0200 	ldmdavs	ip, {r9}
     840:	38000001 	stmdacc	r0, {r0}
     844:	80000083 	andhi	r0, r0, r3, lsl #1
     848:	01000000 	mrseq	r0, (UNDEF: 0)
     84c:	0004749c 	muleq	r4, ip, r4
     850:	00741b00 	rsbseq	r1, r4, r0, lsl #22
     854:	01681d02 	cmneq	r8, r2, lsl #26
     858:	01b90000 			; <UNDEFINED> instruction: 0x01b90000
     85c:	46180000 	ldrmi	r0, [r8], -r0
     860:	84000001 	strhi	r0, [r0], #-1
     864:	05000004 	streq	r0, [r0, #-4]
     868:	0098fc03 	addseq	pc, r8, r3, lsl #24
     86c:	83441900 	movthi	r1, #18688	; 0x4900
     870:	02f90000 	rscseq	r0, r9, #0
     874:	04210000 	strteq	r0, [r1], #-0
     878:	01170000 	tsteq	r7, r0
     87c:	ec030550 	cfstr32	mvfx0, [r3], {80}	; 0x50
     880:	0000009e 	muleq	r0, lr, r0
     884:	00835819 	addeq	r5, r3, r9, lsl r8
     888:	00095200 	andeq	r5, r9, r0, lsl #4
     88c:	00043b00 	andeq	r3, r4, r0, lsl #22
     890:	51011700 	tstpl	r1, r0, lsl #14
     894:	01173801 	tsteq	r7, r1, lsl #16
     898:	500a0350 	andpl	r0, sl, r0, asr r3
     89c:	84190020 	ldrhi	r0, [r9], #-32
     8a0:	35000083 	strcc	r0, [r0, #-131]	; 0x83
     8a4:	6a000009 	bvs	8d0 <_start-0x7730>
     8a8:	17000004 	strne	r0, [r0, -r4]
     8ac:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     8b0:	52011724 	andpl	r1, r1, #36, 14	; 0x900000
     8b4:	98fc0305 	ldmls	ip!, {r0, r2, r8, r9}^
     8b8:	01170000 	tsteq	r7, r0
     8bc:	40030551 	andmi	r0, r3, r1, asr r5
     8c0:	1700009a 			; <UNDEFINED> instruction: 0x1700009a
     8c4:	03055001 	movweq	r5, #20481	; 0x5001
     8c8:	000099e0 	andeq	r9, r0, r0, ror #19
     8cc:	83881a00 	orrhi	r1, r8, #0, 20
     8d0:	094b0000 	stmdbeq	fp, {}^	; <UNPREDICTABLE>
     8d4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     8d8:	0000007f 	andeq	r0, r0, pc, ror r0
     8dc:	00000484 	andeq	r0, r0, r4, lsl #9
     8e0:	00007609 	andeq	r7, r0, r9, lsl #12
     8e4:	07000800 	streq	r0, [r0, -r0, lsl #16]
     8e8:	00000474 	andeq	r0, r0, r4, ror r4
     8ec:	0001e51c 	andeq	lr, r1, ip, lsl r5
     8f0:	68150200 	ldmdavs	r5, {r9}
     8f4:	b8000001 	stmdalt	r0, {r0}
     8f8:	10000083 	andne	r0, r0, r3, lsl #1
     8fc:	01000000 	mrseq	r0, (UNDEF: 0)
     900:	009a1d9c 	umullseq	r1, sl, ip, sp
     904:	33020000 	movwcc	r0, #8192	; 0x2000
     908:	00000168 	andeq	r0, r0, r8, ror #2
     90c:	000083c8 	andeq	r8, r0, r8, asr #7
     910:	0000004c 	andeq	r0, r0, ip, asr #32
     914:	050c9c01 	streq	r9, [ip, #-3073]	; 0xc01
     918:	411e0000 	tstmi	lr, r0
     91c:	02000001 	andeq	r0, r0, #1
     920:	00011733 	andeq	r1, r1, r3, lsr r7
     924:	0001e200 	andeq	lr, r1, r0, lsl #4
     928:	72611300 	rsbvc	r1, r1, #0, 6
     92c:	33020067 	movwcc	r0, #8295	; 0x2067
     930:	0000007d 	andeq	r0, r0, sp, ror r0
     934:	00000200 	andeq	r0, r0, r0, lsl #4
     938:	0200741b 	andeq	r7, r0, #452984832	; 0x1b000000
     93c:	00016834 	andeq	r6, r1, r4, lsr r8
     940:	00021e00 	andeq	r1, r2, r0, lsl #28
     944:	025b1f00 	subseq	r1, fp, #0, 30
     948:	3d020000 	stccc	0, cr0, [r2, #-0]
     94c:	0083d81a 	addeq	sp, r3, sl, lsl r8
     950:	0003d500 	andeq	sp, r3, r0, lsl #10
     954:	84041600 	strhi	r1, [r4], #-1536	; 0x600
     958:	01a60000 			; <UNDEFINED> instruction: 0x01a60000
     95c:	01170000 	tsteq	r7, r0
     960:	00740251 	rsbseq	r0, r4, r1, asr r2
     964:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     968:	009f0003 	addseq	r0, pc, r3
     96c:	20000000 	andcs	r0, r0, r0
     970:	00000160 	andeq	r0, r0, r0, ror #2
     974:	84144602 	ldrhi	r4, [r4], #-1538	; 0x602
     978:	00580000 	subseq	r0, r8, r0
     97c:	9c010000 	stcls	0, cr0, [r1], {-0}
     980:	0000058a 	andeq	r0, r0, sl, lsl #11
     984:	00021e1e 	andeq	r1, r2, lr, lsl lr
     988:	25460200 	strbcs	r0, [r6, #-512]	; 0x200
     98c:	3c000000 	stccc	0, cr0, [r0], {-0}
     990:	21000002 	tstcs	r0, r2
     994:	000002f9 	strdeq	r0, [r0], -r9
     998:	01685002 	cmneq	r8, r2
     99c:	54010000 	strpl	r0, [r1], #-0
     9a0:	00842819 	addeq	r2, r4, r9, lsl r8
     9a4:	0001fe00 	andeq	pc, r1, r0, lsl #28
     9a8:	00055100 	andeq	r5, r5, r0, lsl #2
     9ac:	50011700 	andpl	r1, r1, r0, lsl #14
     9b0:	00007402 	andeq	r7, r0, r2, lsl #8
     9b4:	00843019 	addeq	r3, r4, r9, lsl r0
     9b8:	00023c00 	andeq	r3, r2, r0, lsl #24
     9bc:	00056500 	andeq	r6, r5, r0, lsl #10
     9c0:	50011700 	andpl	r1, r1, r0, lsl #14
     9c4:	00147502 	andseq	r7, r4, r2, lsl #10
     9c8:	00844019 	addeq	r4, r4, r9, lsl r0
     9cc:	0002f900 	andeq	pc, r2, r0, lsl #18
     9d0:	00057900 	andeq	r7, r5, r0, lsl #18
     9d4:	50011700 	andpl	r1, r1, r0, lsl #14
     9d8:	00147502 	andseq	r7, r4, r2, lsl #10
     9dc:	00846416 	addeq	r6, r4, r6, lsl r4
     9e0:	00096c00 	andeq	r6, r9, r0, lsl #24
     9e4:	50011700 	andpl	r1, r1, r0, lsl #14
     9e8:	00007402 	andeq	r7, r0, r2, lsl #8
     9ec:	01a62000 			; <UNDEFINED> instruction: 0x01a62000
     9f0:	5d020000 	stcpl	0, cr0, [r2, #-0]
     9f4:	0000846c 	andeq	r8, r0, ip, ror #8
     9f8:	00000050 	andeq	r0, r0, r0, asr r0
     9fc:	06179c01 	ldreq	r9, [r7], -r1, lsl #24
     a00:	27220000 	strcs	r0, [r2, -r0]!
     a04:	02000002 	andeq	r0, r0, #2
     a08:	00016863 	andeq	r6, r1, r3, ror #16
     a0c:	84802300 	strhi	r2, [r0], #768	; 0x300
     a10:	003c0000 	eorseq	r0, ip, r0
     a14:	06030000 	streq	r0, [r3], -r0
     a18:	f9210000 			; <UNDEFINED> instruction: 0xf9210000
     a1c:	02000002 	andeq	r0, r0, #2
     a20:	00016867 	andeq	r6, r1, r7, ror #16
     a24:	19550100 	ldmdbne	r5, {r8}^
     a28:	00008498 	muleq	r0, r8, r4
     a2c:	000001a6 	andeq	r0, r0, r6, lsr #3
     a30:	000005de 	ldrdeq	r0, [r0], -lr
     a34:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
     a38:	01170075 	tsteq	r7, r5, ror r0
     a3c:	00760250 	rsbseq	r0, r6, r0, asr r2
     a40:	84a01900 	strthi	r1, [r0], #2304	; 0x900
     a44:	02f90000 	rscseq	r0, r9, #0
     a48:	05f20000 	ldrbeq	r0, [r2, #0]!
     a4c:	01170000 	tsteq	r7, r0
     a50:	00760250 	rsbseq	r0, r6, r0, asr r2
     a54:	84b01600 	ldrthi	r1, [r0], #1536	; 0x600
     a58:	096c0000 	stmdbeq	ip!, {}^	; <UNPREDICTABLE>
     a5c:	01170000 	tsteq	r7, r0
     a60:	00750250 	rsbseq	r0, r5, r0, asr r2
     a64:	78160000 	ldmdavc	r6, {}	; <UNPREDICTABLE>
     a68:	3c000084 	stccc	0, cr0, [r0], {132}	; 0x84
     a6c:	17000002 	strne	r0, [r0, -r2]
     a70:	03055001 	movweq	r5, #20481	; 0x5001
     a74:	00009f00 	andeq	r9, r0, r0, lsl #30
     a78:	40200000 	eormi	r0, r0, r0
     a7c:	02000002 	andeq	r0, r0, #2
     a80:	0084bc8d 	addeq	fp, r4, sp, lsl #25
     a84:	00009000 	andeq	r9, r0, r0
     a88:	f89c0100 			; <UNDEFINED> instruction: 0xf89c0100
     a8c:	24000006 	strcs	r0, [r0], #-6
     a90:	00000239 	andeq	r0, r0, r9, lsr r2
     a94:	002c9002 	eoreq	r9, ip, r2
     a98:	025d0000 	subseq	r0, sp, #0
     a9c:	33240000 	teqcc	r4, #0
     aa0:	02000002 	andeq	r0, r0, #2
     aa4:	00002c91 	muleq	r0, r1, ip
     aa8:	00027b00 	andeq	r7, r2, r0, lsl #22
     aac:	006e1b00 	rsbeq	r1, lr, r0, lsl #22
     ab0:	002c9202 	eoreq	r9, ip, r2, lsl #4
     ab4:	02a50000 	adceq	r0, r5, #0
     ab8:	46180000 	ldrmi	r0, [r8], -r0
     abc:	08000001 	stmdaeq	r0, {r0}
     ac0:	05000007 	streq	r0, [r0, #-7]
     ac4:	00990803 	addseq	r0, r9, r3, lsl #16
     ac8:	84d01900 	ldrbhi	r1, [r0], #2304	; 0x900
     acc:	01790000 	cmneq	r9, r0
     ad0:	067a0000 	ldrbteq	r0, [sl], -r0
     ad4:	01170000 	tsteq	r7, r0
     ad8:	00740250 	rsbseq	r0, r4, r0, asr r2
     adc:	84dc1900 	ldrbhi	r1, [ip], #2304	; 0x900
     ae0:	01790000 	cmneq	r9, r0
     ae4:	068e0000 	streq	r0, [lr], r0
     ae8:	01170000 	tsteq	r7, r0
     aec:	14740250 	ldrbtne	r0, [r4], #-592	; 0x250
     af0:	85101900 	ldrhi	r1, [r0, #-2304]	; 0x900
     af4:	09350000 	ldmdbeq	r5!, {}	; <UNPREDICTABLE>
     af8:	06c40000 	strbeq	r0, [r4], r0
     afc:	01170000 	tsteq	r7, r0
     b00:	96080253 			; <UNDEFINED> instruction: 0x96080253
     b04:	05520117 	ldrbeq	r0, [r2, #-279]	; 0x117
     b08:	00990803 	addseq	r0, r9, r3, lsl #16
     b0c:	51011700 	tstpl	r1, r0, lsl #14
     b10:	9a400305 	bls	100172c <__bss_end__+0xff7414>
     b14:	01170000 	tsteq	r7, r0
     b18:	50030550 	andpl	r0, r3, r0, asr r5
     b1c:	1700009a 			; <UNDEFINED> instruction: 0x1700009a
     b20:	02087d02 	andeq	r7, r8, #2, 26	; 0x80
     b24:	1a000075 	bne	d00 <_start-0x7300>
     b28:	00008514 	andeq	r8, r0, r4, lsl r5
     b2c:	0000094b 	andeq	r0, r0, fp, asr #18
     b30:	00851c19 	addeq	r1, r5, r9, lsl ip
     b34:	00023c00 	andeq	r3, r2, r0, lsl #24
     b38:	0006e400 	andeq	lr, r6, r0, lsl #8
     b3c:	50011700 	andpl	r1, r1, r0, lsl #14
     b40:	9f000305 	svcls	0x00000305
     b44:	16000000 	strne	r0, [r0], -r0
     b48:	0000852c 	andeq	r8, r0, ip, lsr #10
     b4c:	00000935 	andeq	r0, r0, r5, lsr r9
     b50:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     b54:	009aa803 	addseq	sl, sl, r3, lsl #16
     b58:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     b5c:	0000007f 	andeq	r0, r0, pc, ror r0
     b60:	00000708 	andeq	r0, r0, r8, lsl #14
     b64:	00007609 	andeq	r7, r0, r9, lsl #12
     b68:	07001200 	streq	r1, [r0, -r0, lsl #4]
     b6c:	000006f8 	strdeq	r0, [r0], -r8
     b70:	00011920 	andeq	r1, r1, r0, lsr #18
     b74:	4c740200 	lfmmi	f0, 2, [r4], #-0
     b78:	54000085 	strpl	r0, [r0], #-133	; 0x85
     b7c:	01000000 	mrseq	r0, (UNDEF: 0)
     b80:	00077c9c 	muleq	r7, ip, ip
     b84:	85581900 	ldrbhi	r1, [r8, #-2304]	; 0x900
     b88:	023c0000 	eorseq	r0, ip, #0
     b8c:	07390000 	ldreq	r0, [r9, -r0]!
     b90:	01170000 	tsteq	r7, r0
     b94:	00030550 	andeq	r0, r3, r0, asr r5
     b98:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     b9c:	0085641a 	addeq	r6, r5, sl, lsl r4
     ba0:	00061700 	andeq	r1, r6, r0, lsl #14
     ba4:	85681a00 	strbhi	r1, [r8, #-2560]!	; 0xa00
     ba8:	03d50000 	bicseq	r0, r5, #0
     bac:	78190000 	ldmdavc	r9, {}	; <UNPREDICTABLE>
     bb0:	f9000085 			; <UNDEFINED> instruction: 0xf9000085
     bb4:	5f000002 	svcpl	0x00000002
     bb8:	17000007 	strne	r0, [r0, -r7]
     bbc:	74025001 	strvc	r5, [r2], #-1
     bc0:	881a0014 	ldmdahi	sl, {r2, r4}
     bc4:	6c000085 	stcvs	0, cr0, [r0], {133}	; 0x85
     bc8:	16000009 	strne	r0, [r0], -r9
     bcc:	00008590 	muleq	r0, r0, r5
     bd0:	00000935 	andeq	r0, r0, r5, lsr r9
     bd4:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     bd8:	009ac803 	addseq	ip, sl, r3, lsl #16
     bdc:	20000000 	andcs	r0, r0, r0
     be0:	0000027f 	andeq	r0, r0, pc, ror r2
     be4:	85a0a302 	strhi	sl, [r0, #770]!	; 0x302
     be8:	00280000 	eoreq	r0, r8, r0
     bec:	9c010000 	stcls	0, cr0, [r1], {-0}
     bf0:	000007d9 	ldrdeq	r0, [r0], -r9
     bf4:	00014618 	andeq	r4, r1, r8, lsl r6
     bf8:	0007e900 	andeq	lr, r7, r0, lsl #18
     bfc:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
     c00:	19000099 	stmdbne	r0, {r0, r3, r4, r7}
     c04:	000085b8 			; <UNDEFINED> instruction: 0x000085b8
     c08:	00000935 	andeq	r0, r0, r5, lsr r9
     c0c:	000007cf 	andeq	r0, r0, pc, asr #15
     c10:	02530117 	subseq	r0, r3, #-1073741819	; 0xc0000005
     c14:	0117a408 	tsteq	r7, r8, lsl #8
     c18:	1c030552 	cfstr32ne	mvfx0, [r3], {82}	; 0x52
     c1c:	17000099 			; <UNDEFINED> instruction: 0x17000099
     c20:	03055101 	movweq	r5, #20737	; 0x5101
     c24:	00009a40 	andeq	r9, r0, r0, asr #20
     c28:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     c2c:	009af803 	addseq	pc, sl, r3, lsl #16
     c30:	bc1a0000 	ldclt	0, cr0, [sl], {-0}
     c34:	4b000085 	blmi	e50 <_start-0x71b0>
     c38:	00000009 	andeq	r0, r0, r9
     c3c:	00007f08 	andeq	r7, r0, r8, lsl #30
     c40:	0007e900 	andeq	lr, r7, r0, lsl #18
     c44:	00760900 	rsbseq	r0, r6, r0, lsl #18
     c48:	000f0000 	andeq	r0, pc, r0
     c4c:	0007d907 	andeq	sp, r7, r7, lsl #18
     c50:	02152000 	andseq	r2, r5, #0
     c54:	ac020000 	stcge	0, cr0, [r2], {-0}
     c58:	000085c8 	andeq	r8, r0, r8, asr #11
     c5c:	00000028 	andeq	r0, r0, r8, lsr #32
     c60:	08599c01 	ldmdaeq	r9, {r0, sl, fp, ip, pc}^
     c64:	74130000 	ldrvc	r0, [r3], #-0
     c68:	ac020068 	stcge	0, cr0, [r2], {104}	; 0x68
     c6c:	00000168 	andeq	r0, r0, r8, ror #2
     c70:	000002cf 	andeq	r0, r0, pc, asr #5
     c74:	00014618 	andeq	r4, r1, r8, lsl r6
     c78:	00085900 	andeq	r5, r8, r0, lsl #18
     c7c:	2c030500 	cfstr32cs	mvfx0, [r3], {-0}
     c80:	19000099 	stmdbne	r0, {r0, r3, r4, r7}
     c84:	000085e0 	andeq	r8, r0, r0, ror #11
     c88:	00000935 	andeq	r0, r0, r5, lsr r9
     c8c:	0000084f 	andeq	r0, r0, pc, asr #16
     c90:	02530117 	subseq	r0, r3, #-1073741819	; 0xc0000005
     c94:	0117ad08 	tsteq	r7, r8, lsl #26
     c98:	2c030552 	cfstr32cs	mvfx0, [r3], {82}	; 0x52
     c9c:	17000099 			; <UNDEFINED> instruction: 0x17000099
     ca0:	03055101 	movweq	r5, #20737	; 0x5101
     ca4:	00009a40 	andeq	r9, r0, r0, asr #20
     ca8:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     cac:	009af803 	addseq	pc, sl, r3, lsl #16
     cb0:	e41a0000 	ldr	r0, [sl], #-0
     cb4:	4b000085 	blmi	ed0 <_start-0x7130>
     cb8:	00000009 	andeq	r0, r0, r9
     cbc:	00047407 	andeq	r7, r4, r7, lsl #8
     cc0:	02952000 	addseq	r2, r5, #0
     cc4:	b3020000 	movwlt	r0, #8192	; 0x2000
     cc8:	000085f0 	strdeq	r8, [r0], -r0
     ccc:	00000028 	andeq	r0, r0, r8, lsr #32
     cd0:	08ca9c01 	stmiaeq	sl, {r0, sl, fp, ip, pc}^
     cd4:	0d1e0000 	ldceq	0, cr0, [lr, #-0]
     cd8:	02000006 	andeq	r0, r0, #6
     cdc:	00005db3 			; <UNDEFINED> instruction: 0x00005db3
     ce0:	0002f000 	andeq	pc, r2, r0
     ce4:	01461800 	cmpeq	r6, r0, lsl #16
     ce8:	08ca0000 	stmiaeq	sl, {}^	; <UNPREDICTABLE>
     cec:	03050000 	movweq	r0, #20480	; 0x5000
     cf0:	00009938 	andeq	r9, r0, r8, lsr r9
     cf4:	00860819 	addeq	r0, r6, r9, lsl r8
     cf8:	00093500 	andeq	r3, r9, r0, lsl #10
     cfc:	0008c000 	andeq	ip, r8, r0
     d00:	53011700 	movwpl	r1, #5888	; 0x1700
     d04:	17b40802 	ldrne	r0, [r4, r2, lsl #16]!
     d08:	03055201 	movweq	r5, #20993	; 0x5201
     d0c:	00009938 	andeq	r9, r0, r8, lsr r9
     d10:	05510117 	ldrbeq	r0, [r1, #-279]	; 0x117
     d14:	009a4003 	addseq	r4, sl, r3
     d18:	50011700 	andpl	r1, r1, r0, lsl #14
     d1c:	9af80305 	bls	ffe01938 <__bss_end__+0xffdf7620>
     d20:	1a000000 	bne	d28 <_start-0x72d8>
     d24:	0000860c 	andeq	r8, r0, ip, lsl #12
     d28:	0000094b 	andeq	r0, r0, fp, asr #18
     d2c:	07d90700 	ldrbeq	r0, [r9, r0, lsl #14]
     d30:	e8210000 	stmda	r1!, {}	; <UNPREDICTABLE>
     d34:	02000002 	andeq	r0, r0, #2
     d38:	00016e0a 	andeq	r6, r1, sl, lsl #28
     d3c:	00030500 	andeq	r0, r3, r0, lsl #10
     d40:	2100009f 	swpcs	r0, pc, [r0]	; <UNPREDICTABLE>
     d44:	0000028f 	andeq	r0, r0, pc, lsl #5
     d48:	016e0a02 	cmneq	lr, r2, lsl #20
     d4c:	03050000 	movweq	r0, #20480	; 0x5000
     d50:	00009eec 	andeq	r9, r0, ip, ror #29
     d54:	0001e921 	andeq	lr, r1, r1, lsr #18
     d58:	680c0200 	stmdavs	ip, {r9}
     d5c:	05000001 	streq	r0, [r0, #-1]
     d60:	009efc03 	addseq	pc, lr, r3, lsl #24
     d64:	02b32100 	adcseq	r2, r3, #0, 2
     d68:	0d020000 	stceq	0, cr0, [r2, #-0]
     d6c:	00000168 	andeq	r0, r0, r8, ror #2
     d70:	9f0c0305 	svcls	0x000c0305
     d74:	74250000 	strtvc	r0, [r5], #-0
     d78:	02006469 	andeq	r6, r0, #1761607680	; 0x69000000
     d7c:	00002c10 	andeq	r2, r0, r0, lsl ip
     d80:	c0030500 	andgt	r0, r3, r0, lsl #10
     d84:	21000097 	swpcs	r0, r7, [r0]	; <UNPREDICTABLE>
     d88:	00000304 	andeq	r0, r0, r4, lsl #6
     d8c:	002c1202 	eoreq	r1, ip, r2, lsl #4
     d90:	03050000 	movweq	r0, #20480	; 0x5000
     d94:	00009ef8 	strdeq	r9, [r0], -r8
     d98:	00045226 	andeq	r5, r4, r6, lsr #4
     d9c:	25270500 	strcs	r0, [r7, #-1280]!	; 0x500
     da0:	4b000000 	blmi	da8 <_start-0x7258>
     da4:	0e000009 	cdpeq	0, 0, cr0, cr0, cr9, {0}
     da8:	00000086 	andeq	r0, r0, r6, lsl #1
     dac:	051f0027 	ldreq	r0, [pc, #-39]	; d8d <_start-0x7273>
     db0:	05000000 	streq	r0, [r0, #-0]
     db4:	026f265c 	rsbeq	r2, pc, #92, 12	; 0x5c00000
     db8:	67050000 	strvs	r0, [r5, -r0]
     dbc:	0000007d 	andeq	r0, r0, sp, ror r0
     dc0:	0000096c 	andeq	r0, r0, ip, ror #18
     dc4:	00002c0e 	andeq	r2, r0, lr, lsl #24
     dc8:	002c0e00 	eoreq	r0, ip, r0, lsl #28
     dcc:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     dd0:	000002ed 	andeq	r0, r0, sp, ror #5
     dd4:	09824603 	stmibeq	r2, {r0, r1, r9, sl, lr}
     dd8:	820e0000 	andhi	r0, lr, #0
     ddc:	0e000009 	cdpeq	0, 0, cr0, cr0, cr9, {0}
     de0:	00000982 	andeq	r0, r0, r2, lsl #19
     de4:	5d040600 	stcpl	6, cr0, [r4, #-0]
     de8:	00000000 	andeq	r0, r0, r0
     dec:	0000097f 	andeq	r0, r0, pc, ror r9
     df0:	03f00004 	mvnseq	r0, #4
     df4:	01040000 	mrseq	r0, (UNDEF: 4)
     df8:	00000010 	andeq	r0, r0, r0, lsl r0
     dfc:	00030d01 	andeq	r0, r3, r1, lsl #26
     e00:	0000a300 	andeq	sl, r0, r0, lsl #6
     e04:	00868400 	addeq	r8, r6, r0, lsl #8
     e08:	00051800 	andeq	r1, r5, r0, lsl #16
     e0c:	0002e100 	andeq	lr, r2, r0, lsl #2
     e10:	05040200 	streq	r0, [r4, #-512]	; 0x200
     e14:	00746e69 	rsbseq	r6, r4, r9, ror #28
     e18:	00034b03 	andeq	r4, r3, r3, lsl #22
     e1c:	37d40300 	ldrbcc	r0, [r4, r0, lsl #6]
     e20:	04000000 	streq	r0, [r0], #-0
     e24:	01810704 	orreq	r0, r1, r4, lsl #14
     e28:	01040000 	mrseq	r0, (UNDEF: 4)
     e2c:	00008106 	andeq	r8, r0, r6, lsl #2
     e30:	05020400 	streq	r0, [r2, #-1024]	; 0x400
     e34:	000001d2 	ldrdeq	r0, [r0], -r2
     e38:	be050404 	cdplt	4, 0, cr0, cr5, cr4, {0}
     e3c:	04000001 	streq	r0, [r0], #-1
     e40:	01b90508 			; <UNDEFINED> instruction: 0x01b90508
     e44:	01040000 	mrseq	r0, (UNDEF: 4)
     e48:	00007f08 	andeq	r7, r0, r8, lsl #30
     e4c:	07020400 	streq	r0, [r2, -r0, lsl #8]
     e50:	000000fe 	strdeq	r0, [r0], -lr
     e54:	7c070404 	cfstrsvc	mvf0, [r7], {4}
     e58:	04000001 	streq	r0, [r0], #-1
     e5c:	01770708 	cmneq	r7, r8, lsl #14
     e60:	04040000 	streq	r0, [r4], #-0
     e64:	0001b007 	andeq	fp, r1, r7
     e68:	04040500 	streq	r0, [r4], #-1280	; 0x500
     e6c:	00880801 	addeq	r0, r8, r1, lsl #16
     e70:	04060000 	streq	r0, [r6], #-0
     e74:	0000008c 	andeq	r0, r0, ip, lsl #1
     e78:	00007f07 	andeq	r7, r0, r7, lsl #30
     e7c:	007f0800 	rsbseq	r0, pc, r0, lsl #16
     e80:	00a10000 	adceq	r0, r1, r0
     e84:	76090000 	strvc	r0, [r9], -r0
     e88:	07000000 	streq	r0, [r0, -r0]
     e8c:	03450300 	movteq	r0, #21248	; 0x5300
     e90:	1b020000 	blne	80e98 <__bss_end__+0x76b80>
     e94:	0000005a 	andeq	r0, r0, sl, asr r0
     e98:	0220140a 	eoreq	r1, r0, #167772160	; 0xa000000
     e9c:	00010627 	andeq	r0, r1, r7, lsr #12
     ea0:	03be0b00 			; <UNDEFINED> instruction: 0x03be0b00
     ea4:	29020000 	stmdbcs	r2, {}	; <UNPREDICTABLE>
     ea8:	00000117 	andeq	r0, r0, r7, lsl r1
     eac:	03af0c00 			; <UNDEFINED> instruction: 0x03af0c00
     eb0:	2a020000 	bcs	80eb8 <__bss_end__+0x76ba0>
     eb4:	00000037 	andeq	r0, r0, r7, lsr r0
     eb8:	e30c2000 	movw	r2, #49152	; 0xc000
     ebc:	02000002 	andeq	r0, r0, #2
     ec0:	00011c2b 	andeq	r1, r1, fp, lsr #24
     ec4:	0c200400 	cfstrseq	mvf0, [r0], #-0
     ec8:	000002c4 	andeq	r0, r0, r4, asr #5
     ecc:	011c2b02 	tsteq	ip, r2, lsl #22
     ed0:	20080000 	andcs	r0, r8, r0
     ed4:	0003370c 	andeq	r3, r3, ip, lsl #14
     ed8:	1c2e0200 	sfmne	f0, 4, [lr], #-0
     edc:	0c000001 	stceq	0, cr0, [r0], {1}
     ee0:	035c0d20 	cmpeq	ip, #32, 26	; 0x800
     ee4:	30020000 	andcc	r0, r2, r0
     ee8:	00000037 	andeq	r0, r0, r7, lsr r0
     eec:	101f0104 	andsne	r0, pc, r4, lsl #2
     ef0:	a1080020 	tstge	r8, r0, lsr #32
     ef4:	17000000 	strne	r0, [r0, -r0]
     ef8:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     efc:	00000076 	andeq	r0, r0, r6, ror r0
     f00:	0f001fff 	svceq	0x00001fff
     f04:	00000106 	andeq	r0, r0, r6, lsl #2
     f08:	0000370f 	andeq	r3, r0, pc, lsl #14
     f0c:	03db0300 	bicseq	r0, fp, #0, 6
     f10:	31020000 	mrscc	r0, (UNDEF: 2)
     f14:	000000ac 	andeq	r0, r0, ip, lsr #1
     f18:	0003b510 	andeq	fp, r3, r0, lsl r5
     f1c:	37560200 	ldrbcc	r0, [r6, -r0, lsl #4]
     f20:	03000000 	movweq	r0, #0
     f24:	00000146 	andeq	r0, r0, r6, asr #2
     f28:	02007111 	andeq	r7, r0, #1073741828	; 0x40000004
     f2c:	00014656 	andeq	r4, r1, r6, asr r6
     f30:	04060000 	streq	r0, [r6], #-0
     f34:	00000121 	andeq	r0, r0, r1, lsr #2
     f38:	0003a610 	andeq	sl, r3, r0, lsl r6
     f3c:	25510200 	ldrbcs	r0, [r1, #-512]	; 0x200
     f40:	03000000 	movweq	r0, #0
     f44:	00000166 	andeq	r0, r0, r6, ror #2
     f48:	02007111 	andeq	r7, r0, #1073741828	; 0x40000004
     f4c:	00014651 	andeq	r4, r1, r1, asr r6
     f50:	c4100000 	ldrgt	r0, [r0], #-0
     f54:	02000003 	andeq	r0, r0, #3
     f58:	00002554 	andeq	r2, r0, r4, asr r5
     f5c:	01800300 	orreq	r0, r0, r0, lsl #6
     f60:	71110000 	tstvc	r1, r0
     f64:	46540200 	ldrbmi	r0, [r4], -r0, lsl #4
     f68:	00000001 	andeq	r0, r0, r1
     f6c:	00031810 	andeq	r1, r3, r0, lsl r8
     f70:	255a0200 	ldrbcs	r0, [sl, #-512]	; 0x200
     f74:	03000000 	movweq	r0, #0
     f78:	000001ae 	andeq	r0, r0, lr, lsr #3
     f7c:	02006311 	andeq	r6, r0, #1140850688	; 0x44000000
     f80:	0001465a 	andeq	r4, r1, sl, asr r6
     f84:	00651100 	rsbeq	r1, r5, r0, lsl #2
     f88:	01ae5a02 			; <UNDEFINED> instruction: 0x01ae5a02
     f8c:	c4120000 	ldrgt	r0, [r2], #-0
     f90:	02000002 	andeq	r0, r0, #2
     f94:	0000375d 	andeq	r3, r0, sp, asr r7
     f98:	04060000 	streq	r0, [r6], #-0
     f9c:	000000a1 	andeq	r0, r0, r1, lsr #1
     fa0:	00037910 	andeq	r7, r3, r0, lsl r9
     fa4:	37570200 	ldrbcc	r0, [r7, -r0, lsl #4]
     fa8:	03000000 	movweq	r0, #0
     fac:	000001ce 	andeq	r0, r0, lr, asr #3
     fb0:	02007111 	andeq	r7, r0, #1073741828	; 0x40000004
     fb4:	00014657 	andeq	r4, r1, r7, asr r6
     fb8:	94100000 	ldrls	r0, [r0], #-0
     fbc:	02000003 	andeq	r0, r0, #3
     fc0:	00002564 	andeq	r2, r0, r4, ror #10
     fc4:	02070300 	andeq	r0, r7, #0, 6
     fc8:	63110000 	tstvs	r1, #0
     fcc:	46640200 	strbtmi	r0, [r4], -r0, lsl #4
     fd0:	11000001 	tstne	r0, r1
     fd4:	64020078 	strvs	r0, [r2], #-120	; 0x78
     fd8:	000000a1 	andeq	r0, r0, r1, lsr #1
     fdc:	0002e312 	andeq	lr, r2, r2, lsl r3
     fe0:	37650200 	strbcc	r0, [r5, -r0, lsl #4]!
     fe4:	12000000 	andne	r0, r0, #0
     fe8:	000002c4 	andeq	r0, r0, r4, asr #5
     fec:	00376602 	eorseq	r6, r7, r2, lsl #12
     ff0:	13000000 	movwne	r0, #0
     ff4:	000003cc 	andeq	r0, r0, ip, asr #7
     ff8:	86840801 	strhi	r0, [r4], r1, lsl #16
     ffc:	00800000 	addeq	r0, r0, r0
    1000:	9c010000 	stcls	0, cr0, [r1], {-0}
    1004:	0000029d 	muleq	r0, sp, r2
    1008:	01006314 	tsteq	r0, r4, lsl r3
    100c:	00014608 	andeq	r4, r1, r8, lsl #12
    1010:	00031100 	andeq	r1, r3, r0, lsl #2
    1014:	01461500 	cmpeq	r6, r0, lsl #10
    1018:	02ad0000 	adceq	r0, sp, #0
    101c:	03050000 	movweq	r0, #20480	; 0x5000
    1020:	00009b24 	andeq	r9, r0, r4, lsr #22
    1024:	00012c16 	andeq	r2, r1, r6, lsl ip
    1028:	00869c00 	addeq	r9, r6, r0, lsl #24
    102c:	00001400 	andeq	r1, r0, r0, lsl #8
    1030:	55090100 	strpl	r0, [r9, #-256]	; 0x100
    1034:	17000002 	strne	r0, [r0, -r2]
    1038:	0000013c 	andeq	r0, r0, ip, lsr r1
    103c:	00000332 	andeq	r0, r0, r2, lsr r3
    1040:	014c1600 	cmpeq	ip, r0, lsl #12
    1044:	86b00000 	ldrthi	r0, [r0], r0
    1048:	00140000 	andseq	r0, r4, r0
    104c:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1050:	00000272 	andeq	r0, r0, r2, ror r2
    1054:	00015c17 	andeq	r5, r1, r7, lsl ip
    1058:	00035300 	andeq	r5, r3, r0, lsl #6
    105c:	e8180000 	ldmda	r8, {}	; <UNPREDICTABLE>
    1060:	4a000086 	bmi	1280 <_start-0x6d80>
    1064:	19000009 	stmdbne	r0, {r0, r3}
    1068:	3a015301 	bcc	55c74 <__bss_end__+0x4b95c>
    106c:	05520119 	ldrbeq	r0, [r2, #-281]	; 0x119
    1070:	009b2403 	addseq	r2, fp, r3, lsl #8
    1074:	51011900 	tstpl	r1, r0, lsl #18
    1078:	9b940305 	blls	fe501c94 <__bss_end__+0xfe4f797c>
    107c:	01190000 	tsteq	r9, r0
    1080:	58030550 	stmdapl	r3, {r4, r6, r8, sl}
    1084:	0000009b 	muleq	r0, fp, r0
    1088:	007f0800 	rsbseq	r0, pc, r0, lsl #16
    108c:	02ad0000 	adceq	r0, sp, #0
    1090:	76090000 	strvc	r0, [r9], -r0
    1094:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1098:	029d0700 	addseq	r0, sp, #0, 14
    109c:	d5130000 	ldrle	r0, [r3, #-0]
    10a0:	01000003 	tsteq	r0, r3
    10a4:	0087040d 	addeq	r0, r7, sp, lsl #8
    10a8:	00004000 	andeq	r4, r0, r0
    10ac:	1b9c0100 	blne	fe7014b4 <__bss_end__+0xfe6f719c>
    10b0:	14000003 	strne	r0, [r0], #-3
    10b4:	0d010063 	stceq	0, cr0, [r1, #-396]	; 0xfffffe74
    10b8:	00000146 	andeq	r0, r0, r6, asr #2
    10bc:	00000374 	andeq	r0, r0, r4, ror r3
    10c0:	00014615 	andeq	r4, r1, r5, lsl r6
    10c4:	00032b00 	andeq	r2, r3, r0, lsl #22
    10c8:	30030500 	andcc	r0, r3, r0, lsl #10
    10cc:	1a00009b 	bne	1340 <_start-0x6cc0>
    10d0:	00008730 	andeq	r8, r0, r0, lsr r7
    10d4:	0000094a 	andeq	r0, r0, sl, asr #18
    10d8:	00000311 	andeq	r0, r0, r1, lsl r3
    10dc:	01530119 	cmpeq	r3, r9, lsl r1
    10e0:	5201193f 	andpl	r1, r1, #1032192	; 0xfc000
    10e4:	9b300305 	blls	c01d00 <__bss_end__+0xbf79e8>
    10e8:	01190000 	tsteq	r9, r0
    10ec:	94030551 	strls	r0, [r3], #-1361	; 0x551
    10f0:	1900009b 	stmdbne	r0, {r0, r1, r3, r4, r7}
    10f4:	03055001 	movweq	r5, #20481	; 0x5001
    10f8:	00009ba0 	andeq	r9, r0, r0, lsr #23
    10fc:	87341b00 	ldrhi	r1, [r4, -r0, lsl #22]!
    1100:	09600000 	stmdbeq	r0!, {}^	; <UNPREDICTABLE>
    1104:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1108:	0000007f 	andeq	r0, r0, pc, ror r0
    110c:	0000032b 	andeq	r0, r0, fp, lsr #6
    1110:	00007609 	andeq	r7, r0, r9, lsl #12
    1114:	07000500 	streq	r0, [r0, -r0, lsl #10]
    1118:	0000031b 	andeq	r0, r0, fp, lsl r3
    111c:	00038313 	andeq	r8, r3, r3, lsl r3
    1120:	44120100 	ldrmi	r0, [r2], #-256	; 0x100
    1124:	a4000087 	strge	r0, [r0], #-135	; 0x87
    1128:	01000001 	tsteq	r0, r1
    112c:	0005189c 	muleq	r5, ip, r8
    1130:	00631400 	rsbeq	r1, r3, r0, lsl #8
    1134:	01461201 	cmpeq	r6, r1, lsl #4
    1138:	03950000 	orrseq	r0, r5, #0
    113c:	5c1c0000 	ldcpl	0, cr0, [ip], {-0}
    1140:	01000003 	tsteq	r0, r3
    1144:	00003712 	andeq	r3, r0, r2, lsl r7
    1148:	0003b300 	andeq	fp, r3, r0, lsl #6
    114c:	01461500 	cmpeq	r6, r0, lsl #10
    1150:	05180000 	ldreq	r0, [r8, #-0]
    1154:	03050000 	movweq	r0, #20480	; 0x5000
    1158:	00009b38 	andeq	r9, r0, r8, lsr fp
    115c:	0100651d 	tsteq	r0, sp, lsl r5
    1160:	0000a11b 	andeq	sl, r0, fp, lsl r1
    1164:	0003df00 	andeq	sp, r3, r0, lsl #30
    1168:	014c1600 	cmpeq	ip, r0, lsl #12
    116c:	879c0000 	ldrhi	r0, [ip, r0]
    1170:	00080000 	andeq	r0, r8, r0
    1174:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    1178:	00000398 	muleq	r0, r8, r3
    117c:	00015c1e 	andeq	r5, r1, lr, lsl ip
    1180:	00540100 	subseq	r0, r4, r0, lsl #2
    1184:	00016616 	andeq	r6, r1, r6, lsl r6
    1188:	0087c400 	addeq	ip, r7, r0, lsl #8
    118c:	00001800 	andeq	r1, r0, r0, lsl #16
    1190:	b3190100 	tstlt	r9, #0, 2
    1194:	1e000003 	cdpne	0, 0, cr0, cr0, cr3, {0}
    1198:	00000176 	andeq	r0, r0, r6, ror r1
    119c:	16005401 	strne	r5, [r0], -r1, lsl #8
    11a0:	0000012c 	andeq	r0, r0, ip, lsr #2
    11a4:	000087fc 	strdeq	r8, [r0], -ip
    11a8:	00000014 	andeq	r0, r0, r4, lsl r0
    11ac:	03ce1a01 	biceq	r1, lr, #4096	; 0x1000
    11b0:	3c1e0000 	ldccc	0, cr0, [lr], {-0}
    11b4:	01000001 	tsteq	r0, r1
    11b8:	801f0054 	andshi	r0, pc, r4, asr r0	; <UNPREDICTABLE>
    11bc:	30000001 	andcc	r0, r0, r1
    11c0:	18000088 	stmdane	r0, {r3, r7}
    11c4:	01000000 	mrseq	r0, (UNDEF: 0)
    11c8:	00041b1c 	andeq	r1, r4, ip, lsl fp
    11cc:	01991e00 	orrseq	r1, r9, r0, lsl #28
    11d0:	f2060000 	vhadd.s8	d0, d6, d0
    11d4:	0000115c 	andeq	r1, r0, ip, asr r1
    11d8:	01901e00 	orrseq	r1, r0, r0, lsl #28
    11dc:	54010000 	strpl	r0, [r1], #-0
    11e0:	00001820 	andeq	r1, r0, r0, lsr #16
    11e4:	01a22100 			; <UNDEFINED> instruction: 0x01a22100
    11e8:	04150000 	ldreq	r0, [r5], #-0
    11ec:	4c220000 	stcmi	0, cr0, [r2], #-0
    11f0:	30000001 	andcc	r0, r0, r1
    11f4:	10000088 	andne	r0, r0, r8, lsl #1
    11f8:	02000000 	andeq	r0, r0, #0
    11fc:	015c1e5b 	cmpeq	ip, fp, asr lr
    1200:	54010000 	strpl	r0, [r1], #-0
    1204:	1a000000 	bne	120c <_start-0x6df4>
    1208:	0000875c 	andeq	r8, r0, ip, asr r7
    120c:	00000967 	andeq	r0, r0, r7, ror #18
    1210:	0000043b 	andeq	r0, r0, fp, lsr r4
    1214:	03520119 	cmpeq	r2, #1073741830	; 0x40000006
    1218:	1920140a 	stmdbne	r0!, {r1, r3, sl, ip}
    121c:	30015101 	andcc	r5, r1, r1, lsl #2
    1220:	02500119 	subseq	r0, r0, #1073741830	; 0x40000006
    1224:	1a000074 	bne	13fc <_start-0x6c04>
    1228:	000087c0 	andeq	r8, r0, r0, asr #15
    122c:	0000094a 	andeq	r0, r0, sl, asr #18
    1230:	00000469 	andeq	r0, r0, r9, ror #8
    1234:	01530119 	cmpeq	r3, r9, lsl r1
    1238:	52011948 	andpl	r1, r1, #72, 18	; 0x120000
    123c:	9b380305 	blls	e01e58 <__bss_end__+0xdf7b40>
    1240:	01190000 	tsteq	r9, r0
    1244:	94030551 	strls	r0, [r3], #-1361	; 0x551
    1248:	1900009b 	stmdbne	r0, {r0, r1, r3, r4, r7}
    124c:	03055001 	movweq	r5, #20481	; 0x5001
    1250:	00009bc4 	andeq	r9, r0, r4, asr #23
    1254:	87c41b00 	strbhi	r1, [r4, r0, lsl #22]
    1258:	09600000 	stmdbeq	r0!, {}^	; <UNPREDICTABLE>
    125c:	f81a0000 			; <UNDEFINED> instruction: 0xf81a0000
    1260:	4a000087 	bmi	1484 <_start-0x6b7c>
    1264:	a0000009 	andge	r0, r0, r9
    1268:	19000004 	stmdbne	r0, {r2}
    126c:	49015301 	stmdbmi	r1, {r0, r8, r9, ip, lr}
    1270:	05520119 	ldrbeq	r0, [r2, #-281]	; 0x119
    1274:	009b3803 	addseq	r3, fp, r3, lsl #16
    1278:	51011900 	tstpl	r1, r0, lsl #18
    127c:	9b940305 	blls	fe501e98 <__bss_end__+0xfe4f7b80>
    1280:	01190000 	tsteq	r9, r0
    1284:	e0030550 	and	r0, r3, r0, asr r5
    1288:	0000009b 	muleq	r0, fp, r0
    128c:	0087fc1b 	addeq	pc, r7, fp, lsl ip	; <UNPREDICTABLE>
    1290:	00096000 	andeq	r6, r9, r0
    1294:	882c1a00 	stmdahi	ip!, {r9, fp, ip}
    1298:	094a0000 	stmdbeq	sl, {}^	; <UNPREDICTABLE>
    129c:	04d70000 	ldrbeq	r0, [r7], #0
    12a0:	01190000 	tsteq	r9, r0
    12a4:	194a0153 	stmdbne	sl, {r0, r1, r4, r6, r8}^
    12a8:	03055201 	movweq	r5, #20993	; 0x5201
    12ac:	00009b38 	andeq	r9, r0, r8, lsr fp
    12b0:	05510119 	ldrbeq	r0, [r1, #-281]	; 0x119
    12b4:	009b9403 	addseq	r9, fp, r3, lsl #8
    12b8:	50011900 	andpl	r1, r1, r0, lsl #18
    12bc:	9bfc0305 	blls	fff01ed8 <__bss_end__+0xffef7bc0>
    12c0:	1b000000 	blne	12c8 <_start-0x6d38>
    12c4:	00008830 	andeq	r8, r0, r0, lsr r8
    12c8:	00000960 	andeq	r0, r0, r0, ror #18
    12cc:	0088b41a 	addeq	fp, r8, sl, lsl r4
    12d0:	00094a00 	andeq	r4, r9, r0, lsl #20
    12d4:	00050e00 	andeq	r0, r5, r0, lsl #28
    12d8:	53011900 	movwpl	r1, #6400	; 0x1900
    12dc:	01194c01 	tsteq	r9, r1, lsl #24
    12e0:	38030552 	stmdacc	r3, {r1, r4, r6, r8, sl}
    12e4:	1900009b 	stmdbne	r0, {r0, r1, r3, r4, r7}
    12e8:	03055101 	movweq	r5, #20737	; 0x5101
    12ec:	00009b94 	muleq	r0, r4, fp
    12f0:	05500119 	ldrbeq	r0, [r0, #-281]	; 0x119
    12f4:	009c2003 	addseq	r2, ip, r3
    12f8:	b81b0000 	ldmdalt	fp, {}	; <UNPREDICTABLE>
    12fc:	60000088 	andvs	r0, r0, r8, lsl #1
    1300:	00000009 	andeq	r0, r0, r9
    1304:	00009107 	andeq	r9, r0, r7, lsl #2
    1308:	036b2300 	cmneq	fp, #0, 6
    130c:	35010000 	strcc	r0, [r1, #-0]
    1310:	000000a1 	andeq	r0, r0, r1, lsr #1
    1314:	000088e8 	andeq	r8, r0, r8, ror #17
    1318:	0000006c 	andeq	r0, r0, ip, rrx
    131c:	059e9c01 	ldreq	r9, [lr, #3073]	; 0xc01
    1320:	63140000 	tstvs	r4, #0
    1324:	46350100 	ldrtmi	r0, [r5], -r0, lsl #2
    1328:	35000001 	strcc	r0, [r0, #-1]
    132c:	1d000004 	stcne	0, cr0, [r0, #-16]
    1330:	36010065 	strcc	r0, [r1], -r5, rrx
    1334:	000000a1 	andeq	r0, r0, r1, lsr #1
    1338:	00000453 	andeq	r0, r0, r3, asr r4
    133c:	00018022 	andeq	r8, r1, r2, lsr #32
    1340:	0088f000 	addeq	pc, r8, r0
    1344:	00004800 	andeq	r4, r0, r0, lsl #16
    1348:	1e3a0100 	rsfnee	f0, f2, f0
    134c:	00000199 	muleq	r0, r9, r1
    1350:	132ff206 	msrne	CPSR_fsxc, #1610612736	; 0x60000000
    1354:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1358:	00000190 	muleq	r0, r0, r1
    135c:	f0245301 			; <UNDEFINED> instruction: 0xf0245301
    1360:	48000088 	stmdami	r0, {r3, r7}
    1364:	21000000 	mrscs	r0, (UNDEF: 0)
    1368:	000001a2 	andeq	r0, r0, r2, lsr #3
    136c:	00000466 	andeq	r0, r0, r6, ror #8
    1370:	00014c25 	andeq	r4, r1, r5, lsr #24
    1374:	0088f000 	addeq	pc, r8, r0
    1378:	00003000 	andeq	r3, r0, r0
    137c:	1e5b0200 	cdpne	2, 5, cr0, cr11, cr0, {0}
    1380:	0000015c 	andeq	r0, r0, ip, asr r1
    1384:	00005301 	andeq	r5, r0, r1, lsl #6
    1388:	8b130000 	blhi	4c1390 <__bss_end__+0x4b7078>
    138c:	01000003 	tsteq	r0, r3
    1390:	00895440 	addeq	r5, r9, r0, asr #8
    1394:	00003400 	andeq	r3, r0, r0, lsl #8
    1398:	119c0100 	orrsne	r0, ip, r0, lsl #2
    139c:	14000006 	strne	r0, [r0], #-6
    13a0:	40010063 	andmi	r0, r1, r3, rrx
    13a4:	00000146 	andeq	r0, r0, r6, asr #2
    13a8:	00000486 	andeq	r0, r0, r6, lsl #9
    13ac:	0003401c 	andeq	r4, r3, ip, lsl r0
    13b0:	7d400100 	stfvce	f0, [r0, #-0]
    13b4:	a4000000 	strge	r0, [r0], #-0
    13b8:	14000004 	strne	r0, [r0], #-4
    13bc:	4001006e 	andmi	r0, r1, lr, rrx
    13c0:	00000037 	andeq	r0, r0, r7, lsr r0
    13c4:	000004c2 	andeq	r0, r0, r2, asr #9
    13c8:	0100701d 	tsteq	r0, sp, lsl r0
    13cc:	0001ae41 	andeq	sl, r1, r1, asr #28
    13d0:	0004e000 	andeq	lr, r4, r0
    13d4:	89642400 	stmdbhi	r4!, {sl, sp}^
    13d8:	00200000 	eoreq	r0, r0, r0
    13dc:	691d0000 	ldmdbvs	sp, {}	; <UNPREDICTABLE>
    13e0:	25430100 	strbcs	r0, [r3, #-256]	; 0x100
    13e4:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
    13e8:	18000004 	stmdane	r0, {r2}
    13ec:	00008974 	andeq	r8, r0, r4, ror r9
    13f0:	0000051d 	andeq	r0, r0, sp, lsl r5
    13f4:	02500119 	subseq	r0, r0, #1073741830	; 0x40000006
    13f8:	00000077 	andeq	r0, r0, r7, ror r0
    13fc:	03282300 	teqeq	r8, #0, 6
    1400:	1f010000 	svcne	0x00010000
    1404:	00000025 	andeq	r0, r0, r5, lsr #32
    1408:	00008988 	andeq	r8, r0, r8, lsl #19
    140c:	00000058 	andeq	r0, r0, r8, asr r0
    1410:	069f9c01 	ldreq	r9, [pc], r1, lsl #24
    1414:	71140000 	tstvc	r4, r0
    1418:	461f0100 	ldrmi	r0, [pc], -r0, lsl #2
    141c:	1d000001 	stcne	0, cr0, [r0, #-4]
    1420:	1c000005 	stcne	0, cr0, [r0], {5}
    1424:	00000340 	andeq	r0, r0, r0, asr #6
    1428:	007d1f01 	rsbseq	r1, sp, r1, lsl #30
    142c:	053b0000 	ldreq	r0, [fp, #-0]!
    1430:	6e140000 	cdpvs	0, 1, cr0, cr4, cr0, {0}
    1434:	371f0100 	ldrcc	r0, [pc, -r0, lsl #2]
    1438:	59000000 	stmdbpl	r0, {}	; <UNPREDICTABLE>
    143c:	16000005 	strne	r0, [r0], -r5
    1440:	0000012c 	andeq	r0, r0, ip, lsr #2
    1444:	0000899c 	muleq	r0, ip, r9
    1448:	00000018 	andeq	r0, r0, r8, lsl r0
    144c:	066e2101 	strbteq	r2, [lr], -r1, lsl #2
    1450:	3c1e0000 	ldccc	0, cr0, [lr], {-0}
    1454:	01000001 	tsteq	r0, r1
    1458:	9c1a0054 	ldcls	0, cr0, [sl], {84}	; 0x54
    145c:	b2000089 	andlt	r0, r0, #137	; 0x89
    1460:	82000002 	andhi	r0, r0, #2
    1464:	19000006 	stmdbne	r0, {r1, r2}
    1468:	74025001 	strvc	r5, [r2], #-1
    146c:	cc180000 	ldcgt	0, cr0, [r8], {-0}
    1470:	9e000089 	cdpls	0, 0, cr0, cr0, cr9, {4}
    1474:	19000005 	stmdbne	r0, {r0, r2}
    1478:	75025201 	strvc	r5, [r2, #-513]	; 0x201
    147c:	51011900 	tstpl	r1, r0, lsl #18
    1480:	19007602 	stmdbne	r0, {r1, r9, sl, ip, sp, lr}
    1484:	74025001 	strvc	r5, [r2], #-1
    1488:	23000000 	movwcs	r0, #0
    148c:	00000352 	andeq	r0, r0, r2, asr r3
    1490:	00252801 	eoreq	r2, r5, r1, lsl #16
    1494:	89e00000 	stmibhi	r0!, {}^	; <UNPREDICTABLE>
    1498:	00a00000 	adceq	r0, r0, r0
    149c:	9c010000 	stcls	0, cr0, [r1], {-0}
    14a0:	0000079e 	muleq	r0, lr, r7
    14a4:	01006314 	tsteq	r0, r4, lsl r3
    14a8:	00014628 	andeq	r4, r1, r8, lsr #12
    14ac:	00057700 	andeq	r7, r5, r0, lsl #14
    14b0:	00761400 	rsbseq	r1, r6, r0, lsl #8
    14b4:	01ae2801 			; <UNDEFINED> instruction: 0x01ae2801
    14b8:	05ab0000 	streq	r0, [fp, #0]!
    14bc:	6e140000 	cdpvs	0, 1, cr0, cr4, cr0, {0}
    14c0:	37280100 	strcc	r0, [r8, -r0, lsl #2]!
    14c4:	e5000000 	str	r0, [r0, #-0]
    14c8:	26000005 	strcs	r0, [r0], -r5
    14cc:	01007a73 	tsteq	r0, r3, ror sl
    14d0:	00002529 	andeq	r2, r0, r9, lsr #10
    14d4:	27550100 	ldrbcs	r0, [r5, -r0, lsl #2]
    14d8:	000002c4 	andeq	r0, r0, r4, asr #5
    14dc:	00372c01 	eorseq	r2, r7, r1, lsl #24
    14e0:	061f0000 	ldreq	r0, [pc], -r0
    14e4:	46150000 	ldrmi	r0, [r5], -r0
    14e8:	ae000001 	cdpge	0, 0, cr0, cr0, cr1, {0}
    14ec:	05000007 	streq	r0, [r0, #-7]
    14f0:	009b4003 	addseq	r4, fp, r3
    14f4:	012c1600 	teqeq	ip, r0, lsl #12
    14f8:	89e80000 	stmibhi	r8!, {}^	; <UNPREDICTABLE>
    14fc:	001c0000 	andseq	r0, ip, r0
    1500:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    1504:	00000726 	andeq	r0, r0, r6, lsr #14
    1508:	00013c17 	andeq	r3, r1, r7, lsl ip
    150c:	00063d00 	andeq	r3, r6, r0, lsl #26
    1510:	2c160000 	ldccs	0, cr0, [r6], {-0}
    1514:	28000001 	stmdacs	r0, {r0}
    1518:	1400008a 	strne	r0, [r0], #-138	; 0x8a
    151c:	01000000 	mrseq	r0, (UNDEF: 0)
    1520:	00074330 	andeq	r4, r7, r0, lsr r3
    1524:	013c1700 	teqeq	ip, r0, lsl #14
    1528:	06710000 	ldrbteq	r0, [r1], -r0
    152c:	1a000000 	bne	1534 <_start-0x6acc>
    1530:	00008a18 	andeq	r8, r0, r8, lsl sl
    1534:	00000611 	andeq	r0, r0, r1, lsl r6
    1538:	00000765 	andeq	r0, r0, r5, ror #14
    153c:	03520119 	cmpeq	r2, #1073741830	; 0x40000006
    1540:	195201f3 	ldmdbne	r2, {r0, r1, r4, r5, r6, r7, r8}^
    1544:	f3035101 	vrhadd.u8	d5, d3, d1
    1548:	01195101 	tsteq	r9, r1, lsl #2
    154c:	00740250 	rsbseq	r0, r4, r0, asr r2
    1550:	8a581a00 	bhi	1607d58 <__bss_end__+0x15fda40>
    1554:	094a0000 	stmdbeq	sl, {}^	; <UNPREDICTABLE>
    1558:	07940000 	ldreq	r0, [r4, r0]
    155c:	01190000 	tsteq	r9, r0
    1560:	30080253 	andcc	r0, r8, r3, asr r2
    1564:	05520119 	ldrbeq	r0, [r2, #-281]	; 0x119
    1568:	009b4003 	addseq	r4, fp, r3
    156c:	51011900 	tstpl	r1, r0, lsl #18
    1570:	9b940305 	blls	fe50218c <__bss_end__+0xfe4f7e74>
    1574:	01190000 	tsteq	r9, r0
    1578:	58030550 	stmdapl	r3, {r4, r6, r8, sl}
    157c:	0000009c 	muleq	r0, ip, r0
    1580:	008a5c1b 	addeq	r5, sl, fp, lsl ip
    1584:	00096000 	andeq	r6, r9, r0
    1588:	7f080000 	svcvc	0x00080000
    158c:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    1590:	09000007 	stmdbeq	r0, {r0, r1, r2}
    1594:	00000076 	andeq	r0, r0, r6, ror r0
    1598:	9e070009 	cdpls	0, 0, cr0, cr7, cr9, {0}
    159c:	23000007 	movwcs	r0, #7
    15a0:	0000039c 	muleq	r0, ip, r3
    15a4:	00254701 	eoreq	r4, r5, r1, lsl #14
    15a8:	8a800000 	bhi	fe0015b0 <__bss_end__+0xfdff7298>
    15ac:	011c0000 	tsteq	ip, r0
    15b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    15b4:	00000945 	andeq	r0, r0, r5, asr #18
    15b8:	01006314 	tsteq	r0, r4, lsl r3
    15bc:	00014647 	andeq	r4, r1, r7, asr #12
    15c0:	00068f00 	andeq	r8, r6, r0, lsl #30
    15c4:	03401c00 	movteq	r1, #3072	; 0xc00
    15c8:	47010000 	strmi	r0, [r1, -r0]
    15cc:	0000007d 	andeq	r0, r0, sp, ror r0
    15d0:	00000714 	andeq	r0, r0, r4, lsl r7
    15d4:	01006e14 	tsteq	r0, r4, lsl lr
    15d8:	00003747 	andeq	r3, r0, r7, asr #14
    15dc:	00075900 	andeq	r5, r7, r0, lsl #18
    15e0:	00701d00 	rsbseq	r1, r0, r0, lsl #26
    15e4:	01ae4801 			; <UNDEFINED> instruction: 0x01ae4801
    15e8:	07ac0000 	streq	r0, [ip, r0]!
    15ec:	46150000 	ldrmi	r0, [r5], -r0
    15f0:	45000001 	strmi	r0, [r0, #-1]
    15f4:	05000009 	streq	r0, [r0, #-9]
    15f8:	009b4c03 	addseq	r4, fp, r3, lsl #24
    15fc:	01b41600 			; <UNDEFINED> instruction: 0x01b41600
    1600:	8a840000 	bhi	fe101608 <__bss_end__+0xfe0f72f0>
    1604:	00200000 	eoreq	r0, r0, r0
    1608:	4a010000 	bmi	41610 <__bss_end__+0x372f8>
    160c:	00000847 	andeq	r0, r0, r7, asr #16
    1610:	0001c417 	andeq	ip, r1, r7, lsl r4
    1614:	0007f100 	andeq	pc, r7, r0, lsl #2
    1618:	012c2200 	teqeq	ip, r0, lsl #4
    161c:	8a840000 	bhi	fe101624 <__bss_end__+0xfe0f730c>
    1620:	001c0000 	andseq	r0, ip, r0
    1624:	57020000 	strpl	r0, [r2, -r0]
    1628:	00013c17 	andeq	r3, r1, r7, lsl ip
    162c:	0007f100 	andeq	pc, r7, r0, lsl #2
    1630:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    1634:	00008ab0 			; <UNDEFINED> instruction: 0x00008ab0
    1638:	00000084 	andeq	r0, r0, r4, lsl #1
    163c:	000008ef 	andeq	r0, r0, pc, ror #17
    1640:	0100691d 	tsteq	r0, sp, lsl r9
    1644:	0000254c 	andeq	r2, r0, ip, asr #10
    1648:	00087600 	andeq	r7, r8, r0, lsl #12
    164c:	01ce1f00 	biceq	r1, lr, r0, lsl #30
    1650:	8ab00000 	bhi	fec01658 <__bss_end__+0xfebf7340>
    1654:	00480000 	subeq	r0, r8, r0
    1658:	4d010000 	stcmi	0, cr0, [r1, #-0]
    165c:	000008b6 			; <UNDEFINED> instruction: 0x000008b6
    1660:	0001e717 	andeq	lr, r1, r7, lsl r7
    1664:	00089f00 	andeq	r9, r8, r0, lsl #30
    1668:	01de1700 	bicseq	r1, lr, r0, lsl #14
    166c:	08db0000 	ldmeq	fp, {}^	; <UNPREDICTABLE>
    1670:	48200000 	stmdami	r0!, {}	; <UNPREDICTABLE>
    1674:	21000000 	mrscs	r0, (UNDEF: 0)
    1678:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    167c:	00000907 	andeq	r0, r0, r7, lsl #18
    1680:	0001fb29 	andeq	pc, r1, r9, lsr #22
    1684:	22560100 	subscs	r0, r6, #0, 2
    1688:	00000166 	andeq	r0, r0, r6, ror #2
    168c:	00008ad0 	ldrdeq	r8, [r0], -r0
    1690:	00000010 	andeq	r0, r0, r0, lsl r0
    1694:	76176702 	ldrvc	r6, [r7], -r2, lsl #14
    1698:	32000001 	andcc	r0, r0, #1
    169c:	00000009 	andeq	r0, r0, r9
    16a0:	241a0000 	ldrcs	r0, [sl], #-0
    16a4:	4a00008b 	bmi	18d8 <_start-0x6728>
    16a8:	e5000009 	str	r0, [r0, #-9]
    16ac:	19000008 	stmdbne	r0, {r3}
    16b0:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    16b4:	5201194e 	andpl	r1, r1, #1277952	; 0x138000
    16b8:	9b4c0305 	blls	13022d4 <__bss_end__+0x12f7fbc>
    16bc:	01190000 	tsteq	r9, r0
    16c0:	94030551 	strls	r0, [r3], #-1361	; 0x551
    16c4:	1900009b 	stmdbne	r0, {r0, r1, r3, r4, r7}
    16c8:	03055001 	movweq	r5, #20481	; 0x5001
    16cc:	00009c7c 	andeq	r9, r0, ip, ror ip
    16d0:	8b281b00 	blhi	a082d8 <__bss_end__+0x9fdfc0>
    16d4:	09600000 	stmdbeq	r0!, {}^	; <UNPREDICTABLE>
    16d8:	16000000 	strne	r0, [r0], -r0
    16dc:	0000014c 	andeq	r0, r0, ip, asr #2
    16e0:	00008b3c 	andeq	r8, r0, ip, lsr fp
    16e4:	00000010 	andeq	r0, r0, r0, lsl r0
    16e8:	090c5001 	stmdbeq	ip, {r0, ip, lr}
    16ec:	5c170000 	ldcpl	0, cr0, [r7], {-0}
    16f0:	5e000001 	cdppl	0, 0, cr0, cr0, cr1, {0}
    16f4:	00000009 	andeq	r0, r0, r9
    16f8:	008b681a 	addeq	r6, fp, sl, lsl r8
    16fc:	00094a00 	andeq	r4, r9, r0, lsl #20
    1700:	00093b00 	andeq	r3, r9, r0, lsl #22
    1704:	53011900 	movwpl	r1, #6400	; 0x1900
    1708:	19500802 	ldmdbne	r0, {r1, fp}^
    170c:	03055201 	movweq	r5, #20993	; 0x5201
    1710:	00009b4c 	andeq	r9, r0, ip, asr #22
    1714:	05510119 	ldrbeq	r0, [r1, #-281]	; 0x119
    1718:	009b9403 	addseq	r9, fp, r3, lsl #8
    171c:	50011900 	andpl	r1, r1, r0, lsl #18
    1720:	9ca00305 	stcls	3, cr0, [r0], #20
    1724:	1b000000 	blne	172c <_start-0x68d4>
    1728:	00008b6c 	andeq	r8, r0, ip, ror #22
    172c:	00000960 	andeq	r0, r0, r0, ror #18
    1730:	079e0700 	ldreq	r0, [lr, r0, lsl #14]
    1734:	522a0000 	eorpl	r0, sl, #0
    1738:	04000004 	streq	r0, [r0], #-4
    173c:	00002527 	andeq	r2, r0, r7, lsr #10
    1740:	00096000 	andeq	r6, r9, r0
    1744:	00862b00 	addeq	r2, r6, r0, lsl #22
    1748:	002c0000 	eoreq	r0, ip, r0
    174c:	0000052d 	andeq	r0, r0, sp, lsr #10
    1750:	2e5c0400 	cdpcs	4, 5, cr0, cr12, cr0, {0}
    1754:	00000372 	andeq	r0, r0, r2, ror r3
    1758:	007d1b05 	rsbseq	r1, sp, r5, lsl #22
    175c:	7d2b0000 	stcvc	0, cr0, [fp, #-0]
    1760:	2b000000 	blcs	1768 <_start-0x6898>
    1764:	00000025 	andeq	r0, r0, r5, lsr #32
    1768:	00002c2b 	andeq	r2, r0, fp, lsr #24
    176c:	db000000 	blle	1774 <_start-0x688c>
    1770:	04000000 	streq	r0, [r0], #-0
    1774:	00064e00 	andeq	r4, r6, r0, lsl #28
    1778:	10010400 	andne	r0, r1, r0, lsl #8
    177c:	01000000 	mrseq	r0, (UNDEF: 0)
    1780:	000003e0 	andeq	r0, r0, r0, ror #7
    1784:	000003ee 	andeq	r0, r0, lr, ror #7
    1788:	00008c5c 	andeq	r8, r0, ip, asr ip
    178c:	00000020 	andeq	r0, r0, r0, lsr #32
    1790:	00000555 	andeq	r0, r0, r5, asr r5
    1794:	81060102 	tsthi	r6, r2, lsl #2
    1798:	02000000 	andeq	r0, r0, #0
    179c:	007f0801 	rsbseq	r0, pc, r1, lsl #16
    17a0:	02020000 	andeq	r0, r2, #0
    17a4:	0001d205 	andeq	sp, r1, r5, lsl #4
    17a8:	07020200 	streq	r0, [r2, -r0, lsl #4]
    17ac:	000000fe 	strdeq	r0, [r0], -lr
    17b0:	69050403 	stmdbvs	r5, {r0, r1, sl}
    17b4:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    17b8:	01810704 	orreq	r0, r1, r4, lsl #14
    17bc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    17c0:	0001b905 	andeq	fp, r1, r5, lsl #18
    17c4:	07080200 	streq	r0, [r8, -r0, lsl #4]
    17c8:	00000177 	andeq	r0, r0, r7, ror r1
    17cc:	be050402 	cdplt	4, 0, cr0, cr5, cr2, {0}
    17d0:	02000001 	andeq	r0, r0, #1
    17d4:	01b00704 	lslseq	r0, r4, #14
    17d8:	04040000 	streq	r0, [r4], #-0
    17dc:	7c070402 	cfstrsvc	mvf0, [r7], {2}
    17e0:	05000001 	streq	r0, [r0, #-1]
    17e4:	00007a04 	andeq	r7, r0, r4, lsl #20
    17e8:	08010200 	stmdaeq	r1, {r9}
    17ec:	00000088 	andeq	r0, r0, r8, lsl #1
    17f0:	00034b06 	andeq	r4, r3, r6, lsl #22
    17f4:	48d40200 	ldmmi	r4, {r9}^
    17f8:	07000000 	streq	r0, [r0, -r0]
    17fc:	00000372 	andeq	r0, r0, r2, ror r3
    1800:	006b1b03 	rsbeq	r1, fp, r3, lsl #22
    1804:	8c5c0000 	mrahi	r0, ip, acc0
    1808:	00200000 	eoreq	r0, r0, r0
    180c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1810:	00705f08 	rsbseq	r5, r0, r8, lsl #30
    1814:	006b0301 	rsbeq	r0, fp, r1, lsl #6
    1818:	50010000 	andpl	r0, r1, r0
    181c:	01006308 	tsteq	r0, r8, lsl #6
    1820:	00004103 	andeq	r4, r0, r3, lsl #2
    1824:	09510100 	ldmdbeq	r1, {r8}^
    1828:	0301006e 	movweq	r0, #4206	; 0x106e
    182c:	00000081 	andeq	r0, r0, r1, lsl #1
    1830:	00000998 	muleq	r0, r8, r9
    1834:	0100700a 	tsteq	r0, sl
    1838:	00007404 	andeq	r7, r0, r4, lsl #8
    183c:	0009b900 	andeq	fp, r9, r0, lsl #18
    1840:	00650b00 	rsbeq	r0, r5, r0, lsl #22
    1844:	00740401 	rsbseq	r0, r4, r1, lsl #8
    1848:	52010000 	andpl	r0, r1, #0
    184c:	01910000 	orrseq	r0, r1, r0
    1850:	00040000 	andeq	r0, r4, r0
    1854:	000006eb 	andeq	r0, r0, fp, ror #13
    1858:	00100104 	andseq	r0, r0, r4, lsl #2
    185c:	41010000 	mrsmi	r0, (UNDEF: 1)
    1860:	ee000004 	cdp	0, 0, cr0, cr0, cr4, {0}
    1864:	7c000003 	stcvc	0, cr0, [r0], {3}
    1868:	5800008c 	stmdapl	r0, {r2, r3, r7}
    186c:	45000000 	strmi	r0, [r0, #-0]
    1870:	02000006 	andeq	r0, r0, #6
    1874:	00000432 	andeq	r0, r0, r2, lsr r4
    1878:	00302802 	eorseq	r2, r0, r2, lsl #16
    187c:	59030000 	stmdbpl	r3, {}	; <UNPREDICTABLE>
    1880:	04000004 	streq	r0, [r0], #-4
    1884:	00470003 	subeq	r0, r7, r3
    1888:	68040000 	stmdavs	r4, {}	; <UNPREDICTABLE>
    188c:	47000004 	strmi	r0, [r0, -r4]
    1890:	00000000 	andeq	r0, r0, r0
    1894:	02040500 	andeq	r0, r4, #0, 10
    1898:	0000045b 	andeq	r0, r0, fp, asr r4
    189c:	00256202 	eoreq	r6, r5, r2, lsl #4
    18a0:	04060000 	streq	r0, [r6], #-0
    18a4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    18a8:	07040700 	streq	r0, [r4, -r0, lsl #14]
    18ac:	00000181 	andeq	r0, r0, r1, lsl #3
    18b0:	81060107 	tsthi	r6, r7, lsl #2
    18b4:	07000000 	streq	r0, [r0, -r0]
    18b8:	01d20502 	bicseq	r0, r2, r2, lsl #10
    18bc:	04070000 	streq	r0, [r7], #-0
    18c0:	0001be05 	andeq	fp, r1, r5, lsl #28
    18c4:	05080700 	streq	r0, [r8, #-1792]	; 0x700
    18c8:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
    18cc:	7f080107 	svcvc	0x00080107
    18d0:	07000000 	streq	r0, [r0, -r0]
    18d4:	00fe0702 	rscseq	r0, lr, r2, lsl #14
    18d8:	04070000 	streq	r0, [r7], #-0
    18dc:	00017c07 	andeq	r7, r1, r7, lsl #24
    18e0:	07080700 	streq	r0, [r8, -r0, lsl #14]
    18e4:	00000177 	andeq	r0, r0, r7, ror r1
    18e8:	b0070407 	andlt	r0, r7, r7, lsl #8
    18ec:	08000001 	stmdaeq	r0, {r0}
    18f0:	0000a704 	andeq	sl, r0, r4, lsl #14
    18f4:	08010700 	stmdaeq	r1, {r8, r9, sl}
    18f8:	00000088 	andeq	r0, r0, r8, lsl #1
    18fc:	00b40408 	adcseq	r0, r4, r8, lsl #8
    1900:	a7090000 	strge	r0, [r9, -r0]
    1904:	0a000000 	beq	190c <_start-0x66f4>
    1908:	00000452 	andeq	r0, r0, r2, asr r4
    190c:	00540601 	subseq	r0, r4, r1, lsl #12
    1910:	8c7c0000 	ldclhi	0, cr0, [ip], #-0
    1914:	00580000 	subseq	r0, r8, r0
    1918:	9c010000 	stcls	0, cr0, [r1], {-0}
    191c:	00000143 	andeq	r0, r0, r3, asr #2
    1920:	746d660b 	strbtvc	r6, [sp], #-1547	; 0x60b
    1924:	ae060100 	adfges	f0, f6, f0
    1928:	02000000 	andeq	r0, r0, #0
    192c:	0d0c7091 	stceq	0, cr7, [ip, #-580]	; 0xfffffdbc
    1930:	00667562 	rsbeq	r7, r6, r2, ror #10
    1934:	01430801 	cmpeq	r3, r1, lsl #16
    1938:	03050000 	movweq	r0, #20480	; 0x5000
    193c:	00009f10 	andeq	r9, r0, r0, lsl pc
    1940:	0004630e 	andeq	r6, r4, lr, lsl #6
    1944:	49090100 	stmdbmi	r9, {r8}
    1948:	02000000 	andeq	r0, r0, #0
    194c:	730f5c91 	movwvc	r5, #64657	; 0xfc91
    1950:	0c01007a 	stceq	0, cr0, [r1], {122}	; 0x7a
    1954:	00000054 	andeq	r0, r0, r4, asr r0
    1958:	000009e4 	andeq	r0, r0, r4, ror #19
    195c:	008ca410 	addeq	sl, ip, r0, lsl r4
    1960:	00017400 	andeq	r7, r1, r0, lsl #8
    1964:	00013600 	andeq	r3, r1, r0, lsl #12
    1968:	53011100 	movwpl	r1, #4352	; 0x1100
    196c:	114c9102 	cmpne	ip, r2, lsl #2
    1970:	91035201 	tstls	r3, r1, lsl #4
    1974:	01110648 	tsteq	r1, r8, asr #12
    1978:	000a0351 	andeq	r0, sl, r1, asr r3
    197c:	50011104 	andpl	r1, r1, r4, lsl #2
    1980:	00007402 	andeq	r7, r0, r2, lsl #8
    1984:	008cb812 	addeq	fp, ip, r2, lsl r8
    1988:	50011100 	andpl	r1, r1, r0, lsl #2
    198c:	00007402 	andeq	r7, r0, r2, lsl #8
    1990:	00a71300 	adceq	r1, r7, r0, lsl #6
    1994:	01540000 	cmpeq	r4, r0
    1998:	9a140000 	bls	5019a0 <__bss_end__+0x4f7688>
    199c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    19a0:	54150003 	ldrpl	r0, [r5], #-3
    19a4:	63000000 	movwvs	r0, #0
    19a8:	16000001 	strne	r0, [r0], -r1
    19ac:	000000ae 	andeq	r0, r0, lr, lsr #1
    19b0:	04821700 	streq	r1, [r2], #1792	; 0x700
    19b4:	20040000 	andcs	r0, r4, r0
    19b8:	0000016e 	andeq	r0, r0, lr, ror #2
    19bc:	01540408 	cmpeq	r4, r8, lsl #8
    19c0:	4f180000 	svcmi	0x00180000
    19c4:	05000004 	streq	r0, [r0, #-4]
    19c8:	00005402 	andeq	r5, r0, r2, lsl #8
    19cc:	00a11600 	adceq	r1, r1, r0, lsl #12
    19d0:	54160000 	ldrpl	r0, [r6], #-0
    19d4:	16000000 	strne	r0, [r0], -r0
    19d8:	000000ae 	andeq	r0, r0, lr, lsr #1
    19dc:	00004916 	andeq	r4, r0, r6, lsl r9
    19e0:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
    19e4:	04000000 	streq	r0, [r0], #-0
    19e8:	00081c00 	andeq	r1, r8, r0, lsl #24
    19ec:	10010400 	andne	r0, r1, r0, lsl #8
    19f0:	01000000 	mrseq	r0, (UNDEF: 0)
    19f4:	0000046d 	andeq	r0, r0, sp, ror #8
    19f8:	000003ee 	andeq	r0, r0, lr, ror #7
    19fc:	00008cd4 	ldrdeq	r8, [r0], -r4
    1a00:	00000034 	andeq	r0, r0, r4, lsr r0
    1a04:	0000074b 	andeq	r0, r0, fp, asr #14
    1a08:	69050402 	stmdbvs	r5, {r1, sl}
    1a0c:	0300746e 	movweq	r7, #1134	; 0x46e
    1a10:	01810704 	orreq	r0, r1, r4, lsl #14
    1a14:	01030000 	mrseq	r0, (UNDEF: 3)
    1a18:	00008106 	andeq	r8, r0, r6, lsl #2
    1a1c:	05020300 	streq	r0, [r2, #-768]	; 0x300
    1a20:	000001d2 	ldrdeq	r0, [r0], -r2
    1a24:	be050403 	cdplt	4, 0, cr0, cr5, cr3, {0}
    1a28:	03000001 	movweq	r0, #1
    1a2c:	01b90508 			; <UNDEFINED> instruction: 0x01b90508
    1a30:	01030000 	mrseq	r0, (UNDEF: 3)
    1a34:	00007f08 	andeq	r7, r0, r8, lsl #30
    1a38:	07020300 	streq	r0, [r2, -r0, lsl #6]
    1a3c:	000000fe 	strdeq	r0, [r0], -lr
    1a40:	7c070403 	cfstrsvc	mvf0, [r7], {3}
    1a44:	03000001 	movweq	r0, #1
    1a48:	01770708 	cmneq	r7, r8, lsl #14
    1a4c:	04030000 	streq	r0, [r3], #-0
    1a50:	0001b007 	andeq	fp, r1, r7
    1a54:	08010300 	stmdaeq	r1, {r8, r9}
    1a58:	00000088 	andeq	r0, r0, r8, lsl #1
    1a5c:	007f0404 	rsbseq	r0, pc, r4, lsl #8
    1a60:	72050000 	andvc	r0, r5, #0
    1a64:	06000000 	streq	r0, [r0], -r0
    1a68:	00000479 	andeq	r0, r0, r9, ror r4
    1a6c:	00250401 	eoreq	r0, r5, r1, lsl #8
    1a70:	8cd40000 	ldclhi	0, cr0, [r4], {0}
    1a74:	00340000 	eorseq	r0, r4, r0
    1a78:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a7c:	000000ab 	andeq	r0, r0, fp, lsr #1
    1a80:	01007007 	tsteq	r0, r7
    1a84:	00007904 	andeq	r7, r0, r4, lsl #18
    1a88:	000a0d00 	andeq	r0, sl, r0, lsl #26
    1a8c:	25080000 	strcs	r0, [r8, #-0]
    1a90:	ba000000 	blt	1a98 <_start-0x6568>
    1a94:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1a98:	00000025 	andeq	r0, r0, r5, lsr #32
    1a9c:	04870a00 	streq	r0, [r7], #2560	; 0xa00
    1aa0:	1d020000 	stcne	0, cr0, [r2, #-0]
    1aa4:	000000c5 	andeq	r0, r0, r5, asr #1
    1aa8:	00ab0404 	adceq	r0, fp, r4, lsl #8
    1aac:	25080000 	strcs	r0, [r8, #-0]
    1ab0:	da000000 	ble	1ab8 <_start-0x6548>
    1ab4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1ab8:	00000079 	andeq	r0, r0, r9, ror r0
    1abc:	04820b00 	streq	r0, [r2], #2816	; 0xb00
    1ac0:	0c010000 	stceq	0, cr0, [r1], {-0}
    1ac4:	000000eb 	andeq	r0, r0, fp, ror #1
    1ac8:	97c40305 	strbls	r0, [r4, r5, lsl #6]
    1acc:	04040000 	streq	r0, [r4], #-0
    1ad0:	000000cb 	andeq	r0, r0, fp, asr #1
    1ad4:	00065400 	andeq	r5, r6, r0, lsl #8
    1ad8:	b5000400 	strlt	r0, [r0, #-1024]	; 0x400
    1adc:	04000008 	streq	r0, [r0], #-8
    1ae0:	00001001 	andeq	r1, r0, r1
    1ae4:	04bf0100 	ldrteq	r0, [pc], #256	; 1aec <_start-0x6514>
    1ae8:	03ee0000 	mvneq	r0, #0
    1aec:	8d080000 	stchi	0, cr0, [r8, #-0]
    1af0:	04f00000 	ldrbteq	r0, [r0], #0
    1af4:	07e50000 	strbeq	r0, [r5, r0]!
    1af8:	04020000 	streq	r0, [r2], #-0
    1afc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    1b00:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1b04:	00000181 	andeq	r0, r0, r1, lsl #3
    1b08:	81060103 	tsthi	r6, r3, lsl #2
    1b0c:	03000000 	movweq	r0, #0
    1b10:	01d20502 	bicseq	r0, r2, r2, lsl #10
    1b14:	04030000 	streq	r0, [r3], #-0
    1b18:	0001be05 	andeq	fp, r1, r5, lsl #28
    1b1c:	05080300 	streq	r0, [r8, #-768]	; 0x300
    1b20:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
    1b24:	7f080103 	svcvc	0x00080103
    1b28:	03000000 	movweq	r0, #0
    1b2c:	00fe0702 	rscseq	r0, lr, r2, lsl #14
    1b30:	04030000 	streq	r0, [r3], #-0
    1b34:	00017c07 	andeq	r7, r1, r7, lsl #24
    1b38:	07080300 	streq	r0, [r8, -r0, lsl #6]
    1b3c:	00000177 	andeq	r0, r0, r7, ror r1
    1b40:	b0070403 	andlt	r0, r7, r3, lsl #8
    1b44:	04000001 	streq	r0, [r0], #-1
    1b48:	7a040504 	bvc	102f60 <__bss_end__+0xf8c48>
    1b4c:	03000000 	movweq	r0, #0
    1b50:	00880801 	addeq	r0, r8, r1, lsl #16
    1b54:	04050000 	streq	r0, [r5], #-0
    1b58:	00000087 	andeq	r0, r0, r7, lsl #1
    1b5c:	00007a06 	andeq	r7, r0, r6, lsl #20
    1b60:	04320700 	ldrteq	r0, [r2], #-1792	; 0x700
    1b64:	28020000 	stmdacs	r2, {}	; <UNPREDICTABLE>
    1b68:	00000097 	muleq	r0, r7, r0
    1b6c:	00045908 	andeq	r5, r4, r8, lsl #18
    1b70:	00040400 	andeq	r0, r4, r0, lsl #8
    1b74:	000000ae 	andeq	r0, r0, lr, lsr #1
    1b78:	00046809 	andeq	r6, r4, r9, lsl #16
    1b7c:	00007200 	andeq	r7, r0, r0, lsl #4
    1b80:	07000000 	streq	r0, [r0, -r0]
    1b84:	0000045b 	andeq	r0, r0, fp, asr r4
    1b88:	008c6202 	addeq	r6, ip, r2, lsl #4
    1b8c:	a10a0000 	mrsge	r0, (UNDEF: 10)
    1b90:	01000004 	tsteq	r0, r4
    1b94:	00002527 	andeq	r2, r0, r7, lsr #10
    1b98:	008d0800 	addeq	r0, sp, r0, lsl #16
    1b9c:	00001400 	andeq	r1, r0, r0, lsl #8
    1ba0:	e09c0100 	adds	r0, ip, r0, lsl #2
    1ba4:	0b000000 	bleq	1bac <_start-0x6454>
    1ba8:	27010063 	strcs	r0, [r1, -r3, rrx]
    1bac:	00000025 	andeq	r0, r0, r5, lsr #32
    1bb0:	00000a2b 	andeq	r0, r0, fp, lsr #20
    1bb4:	61700c00 	cmnvs	r0, r0, lsl #24
    1bb8:	2e010064 	cdpcs	0, 0, cr0, cr1, cr4, {3}
    1bbc:	00000074 	andeq	r0, r0, r4, ror r0
    1bc0:	00008d1c 	andeq	r8, r0, ip, lsl sp
    1bc4:	0000002c 	andeq	r0, r0, ip, lsr #32
    1bc8:	01309c01 	teqeq	r0, r1, lsl #24
    1bcc:	700b0000 	andvc	r0, fp, r0
    1bd0:	742e0100 	strtvc	r0, [lr], #-256	; 0x100
    1bd4:	59000000 	stmdbpl	r0, {}	; <UNPREDICTABLE>
    1bd8:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
    1bdc:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
    1be0:	00742e01 	rsbseq	r2, r4, r1, lsl #28
    1be4:	0a840000 	beq	fe101bec <__bss_end__+0xfe0f78d4>
    1be8:	df0e0000 	svcle	0x000e0000
    1bec:	01000004 	tsteq	r0, r4
    1bf0:	0000252e 	andeq	r2, r0, lr, lsr #10
    1bf4:	0f520100 	svceq	0x00520100
    1bf8:	006e656c 	rsbeq	r6, lr, ip, ror #10
    1bfc:	00252f01 	eoreq	r2, r5, r1, lsl #30
    1c00:	51010000 	mrspl	r0, (UNDEF: 1)
    1c04:	04990a00 	ldreq	r0, [r9], #2560	; 0xa00
    1c08:	37010000 	strcc	r0, [r1, -r0]
    1c0c:	00000074 	andeq	r0, r0, r4, ror r0
    1c10:	00008d48 	andeq	r8, r0, r8, asr #26
    1c14:	00000040 	andeq	r0, r0, r0, asr #32
    1c18:	019c9c01 	orrseq	r9, ip, r1, lsl #24
    1c1c:	640b0000 	strvs	r0, [fp], #-0
    1c20:	01007473 	tsteq	r0, r3, ror r4
    1c24:	00007437 	andeq	r7, r0, r7, lsr r4
    1c28:	000aa500 	andeq	sl, sl, r0, lsl #10
    1c2c:	006e0b00 	rsbeq	r0, lr, r0, lsl #22
    1c30:	00253701 	eoreq	r3, r5, r1, lsl #14
    1c34:	0add0000 	beq	ff741c3c <__bss_end__+0xff737924>
    1c38:	700b0000 	andvc	r0, fp, r0
    1c3c:	74370100 	ldrtvc	r0, [r7], #-256	; 0x100
    1c40:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
    1c44:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
    1c48:	00000124 	andeq	r0, r0, r4, lsr #2
    1c4c:	00743701 	rsbseq	r3, r4, r1, lsl #14
    1c50:	0b340000 	bleq	d01c58 <__bss_end__+0xcf7940>
    1c54:	6c100000 	ldcvs	0, cr0, [r0], {-0}
    1c58:	01006e65 	tsteq	r0, r5, ror #28
    1c5c:	00002539 	andeq	r2, r0, r9, lsr r5
    1c60:	000b5200 	andeq	r5, fp, r0, lsl #4
    1c64:	00730f00 	rsbseq	r0, r3, r0, lsl #30
    1c68:	00743d01 	rsbseq	r3, r4, r1, lsl #26
    1c6c:	50010000 	andpl	r0, r1, r0
    1c70:	04ed0a00 	strbteq	r0, [sp], #2560	; 0xa00
    1c74:	47010000 	strmi	r0, [r1, -r0]
    1c78:	00000074 	andeq	r0, r0, r4, ror r0
    1c7c:	00008d88 	andeq	r8, r0, r8, lsl #27
    1c80:	00000198 	muleq	r0, r8, r1
    1c84:	02ca9c01 	sbceq	r9, sl, #256	; 0x100
    1c88:	b10d0000 	mrslt	r0, (UNDEF: 13)
    1c8c:	01000004 	tsteq	r0, r4
    1c90:	00002c47 	andeq	r2, r0, r7, asr #24
    1c94:	000b7900 	andeq	r7, fp, r0, lsl #18
    1c98:	73640b00 	cmnvc	r4, #0, 22
    1c9c:	47010074 	smlsdxmi	r1, r4, r0, r0
    1ca0:	00000074 	andeq	r0, r0, r4, ror r0
    1ca4:	00000ba7 	andeq	r0, r0, r7, lsr #23
    1ca8:	01006e0b 	tsteq	r0, fp, lsl #28
    1cac:	00002547 	andeq	r2, r0, r7, asr #10
    1cb0:	000c1500 	andeq	r1, ip, r0, lsl #10
    1cb4:	61760b00 	cmnvs	r6, r0, lsl #22
    1cb8:	4701006c 	strmi	r0, [r1, -ip, rrx]
    1cbc:	00000025 	andeq	r0, r0, r5, lsr #32
    1cc0:	00000c41 	andeq	r0, r0, r1, asr #24
    1cc4:	0004df0d 	andeq	sp, r4, sp, lsl #30
    1cc8:	25470100 	strbcs	r0, [r7, #-256]	; 0x100
    1ccc:	cb000000 	blgt	1cd4 <_start-0x632c>
    1cd0:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
    1cd4:	000004b6 			; <UNDEFINED> instruction: 0x000004b6
    1cd8:	00254701 	eoreq	r4, r5, r1, lsl #14
    1cdc:	91020000 	mrsls	r0, (UNDEF: 2)
    1ce0:	75620f04 	strbvc	r0, [r2, #-3844]!	; 0xf04
    1ce4:	4c010066 	stcmi	0, cr0, [r1], {102}	; 0x66
    1ce8:	000002ca 	andeq	r0, r0, sl, asr #5
    1cec:	7fa89103 	svcvc	0x00a89103
    1cf0:	01007010 	tsteq	r0, r0, lsl r0
    1cf4:	0000744c 	andeq	r7, r0, ip, asr #8
    1cf8:	000cf500 	andeq	pc, ip, r0, lsl #10
    1cfc:	00751000 	rsbseq	r1, r5, r0
    1d00:	002c4d01 	eoreq	r4, ip, r1, lsl #26
    1d04:	0d9a0000 	ldceq	0, cr0, [sl]
    1d08:	46110000 	ldrmi	r0, [r1], -r0
    1d0c:	ea000001 	b	1d18 <_start-0x62e8>
    1d10:	05000002 	streq	r0, [r0, #-2]
    1d14:	009cc003 	addseq	ip, ip, r3
    1d18:	8df41200 	lfmhi	f1, 2, [r4]
    1d1c:	00740000 	rsbseq	r0, r4, r0
    1d20:	02610000 	rsbeq	r0, r1, #0
    1d24:	93130000 	tstls	r3, #0
    1d28:	01000004 	tsteq	r0, r4
    1d2c:	00002c52 	andeq	r2, r0, r2, asr ip
    1d30:	000eaa00 	andeq	sl, lr, r0, lsl #20
    1d34:	d8140000 	ldmdale	r4, {}	; <UNPREDICTABLE>
    1d38:	3a00008e 	bcc	1f78 <_start-0x6088>
    1d3c:	90000006 	andls	r0, r0, r6
    1d40:	15000002 	strne	r0, [r0, #-2]
    1d44:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    1d48:	52011575 	andpl	r1, r1, #490733568	; 0x1d400000
    1d4c:	9cc00305 	stclls	3, cr0, [r0], {5}
    1d50:	01150000 	tsteq	r5, r0
    1d54:	f8030551 			; <UNDEFINED> instruction: 0xf8030551
    1d58:	1500009c 	strne	r0, [r0, #-156]	; 0x9c
    1d5c:	03055001 	movweq	r5, #20481	; 0x5001
    1d60:	00009ce4 	andeq	r9, r0, r4, ror #25
    1d64:	8edc1600 	cdphi	6, 13, cr1, cr12, cr0, {0}
    1d68:	06500000 	ldrbeq	r0, [r0], -r0
    1d6c:	e8140000 	ldmda	r4, {}	; <UNPREDICTABLE>
    1d70:	e000008e 	and	r0, r0, lr, lsl #1
    1d74:	ad000000 	stcge	0, cr0, [r0, #-0]
    1d78:	15000002 	strne	r0, [r0, #-2]
    1d7c:	7d025101 	stfvcs	f5, [r2, #-4]
    1d80:	fc170000 	ldc2	0, cr0, [r7], {-0}
    1d84:	3000008e 	andcc	r0, r0, lr, lsl #1
    1d88:	15000001 	strne	r0, [r0, #-1]
    1d8c:	7d025301 	stcvc	3, cr5, [r2, #-4]
    1d90:	51011500 	tstpl	r1, r0, lsl #10
    1d94:	15007402 	strne	r7, [r0, #-1026]	; 0x402
    1d98:	75025001 	strvc	r5, [r2, #-1]
    1d9c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1da0:	0000007a 	andeq	r0, r0, sl, ror r0
    1da4:	000002da 	ldrdeq	r0, [r0], -sl
    1da8:	00006b19 	andeq	r6, r0, r9, lsl fp
    1dac:	18003f00 	stmdane	r0, {r8, r9, sl, fp, ip, sp}
    1db0:	0000007a 	andeq	r0, r0, sl, ror r0
    1db4:	000002ea 	andeq	r0, r0, sl, ror #5
    1db8:	00006b19 	andeq	r6, r0, r9, lsl fp
    1dbc:	06000400 	streq	r0, [r0], -r0, lsl #8
    1dc0:	000002da 	ldrdeq	r0, [r0], -sl
    1dc4:	0004d01a 	andeq	sp, r4, sl, lsl r0
    1dc8:	201f0100 	andscs	r0, pc, r0, lsl #2
    1dcc:	5000008f 	andpl	r0, r0, pc, lsl #1
    1dd0:	01000000 	mrseq	r0, (UNDEF: 0)
    1dd4:	00036a9c 	muleq	r3, ip, sl
    1dd8:	04e50d00 	strbteq	r0, [r5], #3328	; 0xd00
    1ddc:	1f010000 	svcne	0x00010000
    1de0:	00000379 	andeq	r0, r0, r9, ror r3
    1de4:	00000ed6 	ldrdeq	r0, [r0], -r6
    1de8:	0004a90d 	andeq	sl, r4, sp, lsl #18
    1dec:	8e1f0100 	mufhie	f0, f7, f0
    1df0:	02000003 	andeq	r0, r0, #3
    1df4:	1100000f 	tstne	r0, pc
    1df8:	00000146 	andeq	r0, r0, r6, asr #2
    1dfc:	000003a4 	andeq	r0, r0, r4, lsr #7
    1e00:	9cc80305 	stclls	3, cr0, [r8], {5}
    1e04:	40140000 	andsmi	r0, r4, r0
    1e08:	3a00008f 	bcc	204c <_start-0x5fb4>
    1e0c:	60000006 	andvs	r0, r0, r6
    1e10:	15000003 	strne	r0, [r0, #-3]
    1e14:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    1e18:	52011520 	andpl	r1, r1, #32, 10	; 0x8000000
    1e1c:	9cc80305 	stclls	3, cr0, [r8], {5}
    1e20:	01150000 	tsteq	r5, r0
    1e24:	f8030551 			; <UNDEFINED> instruction: 0xf8030551
    1e28:	1500009c 	strne	r0, [r0, #-156]	; 0x9c
    1e2c:	03055001 	movweq	r5, #20481	; 0x5001
    1e30:	00009d30 	andeq	r9, r0, r0, lsr sp
    1e34:	8f441600 	svchi	0x00441600
    1e38:	06500000 	ldrbeq	r0, [r0], -r0
    1e3c:	1b000000 	blne	1e44 <_start-0x61bc>
    1e40:	00000025 	andeq	r0, r0, r5, lsr #32
    1e44:	00000379 	andeq	r0, r0, r9, ror r3
    1e48:	0000251c 	andeq	r2, r0, ip, lsl r5
    1e4c:	04050000 	streq	r0, [r5], #-0
    1e50:	0000036a 	andeq	r0, r0, sl, ror #6
    1e54:	0000251b 	andeq	r2, r0, fp, lsl r5
    1e58:	00038e00 	andeq	r8, r3, r0, lsl #28
    1e5c:	00811c00 	addeq	r1, r1, r0, lsl #24
    1e60:	05000000 	streq	r0, [r0, #-0]
    1e64:	00037f04 	andeq	r7, r3, r4, lsl #30
    1e68:	007a1800 	rsbseq	r1, sl, r0, lsl #16
    1e6c:	03a40000 			; <UNDEFINED> instruction: 0x03a40000
    1e70:	6b190000 	blvs	641e78 <__bss_end__+0x637b60>
    1e74:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1e78:	03940600 	orrseq	r0, r4, #0, 12
    1e7c:	4f1d0000 	svcmi	0x001d0000
    1e80:	01000004 	tsteq	r0, r4
    1e84:	0000257d 	andeq	r2, r0, sp, ror r5
    1e88:	008f7000 	addeq	r7, pc, r0
    1e8c:	00028800 	andeq	r8, r2, r0, lsl #16
    1e90:	ff9c0100 			; <UNDEFINED> instruction: 0xff9c0100
    1e94:	0b000005 	bleq	1eb0 <_start-0x6150>
    1e98:	00667562 	rsbeq	r7, r6, r2, ror #10
    1e9c:	00747d01 	rsbseq	r7, r4, r1, lsl #26
    1ea0:	0f2e0000 	svceq	0x002e0000
    1ea4:	6e0b0000 	cdpvs	0, 0, cr0, cr11, cr0, {0}
    1ea8:	257d0100 	ldrbcs	r0, [sp, #-256]!	; 0x100
    1eac:	5a000000 	bpl	1eb4 <_start-0x614c>
    1eb0:	0b00000f 	bleq	1ef4 <_start-0x610c>
    1eb4:	00746d66 	rsbseq	r6, r4, r6, ror #26
    1eb8:	00817d01 	addeq	r7, r1, r1, lsl #26
    1ebc:	0f880000 	svceq	0x00880000
    1ec0:	630d0000 	movwvs	r0, #53248	; 0xd000
    1ec4:	01000004 	tsteq	r0, r4
    1ec8:	0000ae7d 	andeq	sl, r0, sp, ror lr
    1ecc:	000fbc00 	andeq	fp, pc, r0, lsl #24
    1ed0:	00701000 	rsbseq	r1, r0, r0
    1ed4:	00747e01 	rsbseq	r7, r4, r1, lsl #28
    1ed8:	0fcf0000 	svceq	0x00cf0000
    1edc:	65100000 	ldrvs	r0, [r0, #-0]
    1ee0:	747e0100 	ldrbtvc	r0, [lr], #-256	; 0x100
    1ee4:	4d000000 	stcmi	0, cr0, [r0, #-0]
    1ee8:	11000010 	tstne	r0, r0, lsl r0
    1eec:	00000146 	andeq	r0, r0, r6, asr #2
    1ef0:	0000060f 	andeq	r0, r0, pc, lsl #12
    1ef4:	9cd80305 	ldclls	3, cr0, [r8], {5}
    1ef8:	c41e0000 	ldrgt	r0, [lr], #-0
    1efc:	f400008f 	vst4.32	{d0-d3}, [r0]
    1f00:	10000001 	andne	r0, r0, r1
    1f04:	8b010073 	blhi	420d8 <__bss_end__+0x37dc0>
    1f08:	00000074 	andeq	r0, r0, r4, ror r0
    1f0c:	00001074 	andeq	r1, r0, r4, ror r0
    1f10:	6d756e0f 	ldclvs	14, cr6, [r5, #-60]!	; 0xffffffc4
    1f14:	148b0100 	strne	r0, [fp], #256	; 0x100
    1f18:	03000006 	movweq	r0, #6
    1f1c:	137ed891 	cmnne	lr, #9502720	; 0x910000
    1f20:	000004df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1f24:	002c8c01 	eoreq	r8, ip, r1, lsl #24
    1f28:	10c90000 	sbcne	r0, r9, r0
    1f2c:	f4140000 			; <UNDEFINED> instruction: 0xf4140000
    1f30:	b900008f 	stmdblt	r0, {r0, r1, r2, r3, r7}
    1f34:	6d000000 	stcvs	0, cr0, [r0, #-0]
    1f38:	15000004 	strne	r0, [r0, #-4]
    1f3c:	75025001 	strvc	r5, [r2, #-1]
    1f40:	18140000 	ldmdane	r4, {}	; <UNPREDICTABLE>
    1f44:	3a000090 	bcc	218c <_start-0x5e74>
    1f48:	9c000006 	stcls	0, cr0, [r0], {6}
    1f4c:	15000004 	strne	r0, [r0, #-4]
    1f50:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    1f54:	52011592 	andpl	r1, r1, #612368384	; 0x24800000
    1f58:	9cd80305 	ldclls	3, cr0, [r8], {5}
    1f5c:	01150000 	tsteq	r5, r0
    1f60:	f8030551 			; <UNDEFINED> instruction: 0xf8030551
    1f64:	1500009c 	strne	r0, [r0, #-156]	; 0x9c
    1f68:	03055001 	movweq	r5, #20481	; 0x5001
    1f6c:	00009d48 	andeq	r9, r0, r8, asr #26
    1f70:	901c1600 	andsls	r1, ip, r0, lsl #12
    1f74:	06500000 	ldrbeq	r0, [r0], -r0
    1f78:	9c140000 	ldcls	0, cr0, [r4], {-0}
    1f7c:	3a000090 	bcc	21c4 <_start-0x5e3c>
    1f80:	d4000006 	strle	r0, [r0], #-6
    1f84:	15000004 	strne	r0, [r0, #-4]
    1f88:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    1f8c:	52011598 	andpl	r1, r1, #152, 10	; 0x26000000
    1f90:	9cd80305 	ldclls	3, cr0, [r8], {5}
    1f94:	01150000 	tsteq	r5, r0
    1f98:	f8030551 			; <UNDEFINED> instruction: 0xf8030551
    1f9c:	1500009c 	strne	r0, [r0, #-156]	; 0x9c
    1fa0:	03055001 	movweq	r5, #20481	; 0x5001
    1fa4:	00009d64 	andeq	r9, r0, r4, ror #26
    1fa8:	90a01600 	adcls	r1, r0, r0, lsl #12
    1fac:	06500000 	ldrbeq	r0, [r0], -r0
    1fb0:	c4140000 	ldrgt	r0, [r4], #-0
    1fb4:	9c000090 	stcls	0, cr0, [r0], {144}	; 0x90
    1fb8:	0a000001 	beq	1fc4 <_start-0x603c>
    1fbc:	15000005 	strne	r0, [r0, #-5]
    1fc0:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    1fc4:	51011580 	smlabbpl	r1, r0, r5, r1
    1fc8:	7ed09103 	atnvcs	f1, f3
    1fcc:	01500115 	cmpeq	r0, r5, lsl r1
    1fd0:	7d02153a 	cfstr32vc	mvfx1, [r2, #-232]	; 0xffffff18
    1fd4:	15310104 	ldrne	r0, [r1, #-260]!	; 0x104
    1fd8:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    1fdc:	14000077 	strne	r0, [r0], #-119	; 0x77
    1fe0:	000090ec 	andeq	r9, r0, ip, ror #1
    1fe4:	0000019c 	muleq	r0, ip, r1
    1fe8:	00000537 	andeq	r0, r0, r7, lsr r5
    1fec:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    1ff0:	01158008 	tsteq	r5, r8
    1ff4:	d0910351 	addsle	r0, r1, r1, asr r3
    1ff8:	5001157e 	andpl	r1, r1, lr, ror r5
    1ffc:	02153a01 	andseq	r3, r5, #4096	; 0x1000
    2000:	3001047d 	andcc	r0, r1, sp, ror r4
    2004:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    2008:	00007702 	andeq	r7, r0, r2, lsl #14
    200c:	00911414 	addseq	r1, r1, r4, lsl r4
    2010:	00019c00 	andeq	r9, r1, r0, lsl #24
    2014:	00056400 	andeq	r6, r5, r0, lsl #8
    2018:	52011500 	andpl	r1, r1, #0, 10
    201c:	15800802 	strne	r0, [r0, #2050]	; 0x802
    2020:	91035101 	tstls	r3, r1, lsl #2
    2024:	01157ed0 			; <UNDEFINED> instruction: 0x01157ed0
    2028:	15400150 	strbne	r0, [r0, #-336]	; 0x150
    202c:	01047d02 	tsteq	r4, r2, lsl #26
    2030:	7d021530 	cfstr32vc	mvfx1, [r2, #-192]	; 0xffffff40
    2034:	00770200 	rsbseq	r0, r7, r0, lsl #4
    2038:	913c1400 	teqls	ip, r0, lsl #8
    203c:	019c0000 	orrseq	r0, ip, r0
    2040:	05910000 	ldreq	r0, [r1]
    2044:	01150000 	tsteq	r5, r0
    2048:	80080252 	andhi	r0, r8, r2, asr r2
    204c:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    2050:	157ed091 	ldrbne	sp, [lr, #-145]!	; 0x91
    2054:	32015001 	andcc	r5, r1, #1
    2058:	047d0215 	ldrbteq	r0, [sp], #-533	; 0x215
    205c:	02153001 	andseq	r3, r5, #1
    2060:	7702007d 	smlsdxvc	r2, sp, r0, r0
    2064:	70140000 	andsvc	r0, r4, r0
    2068:	9c000091 	stcls	0, cr0, [r0], {145}	; 0x91
    206c:	be000001 	cdplt	0, 0, cr0, cr0, cr1, {0}
    2070:	15000005 	strne	r0, [r0, #-5]
    2074:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    2078:	51011580 	smlabbpl	r1, r0, r5, r1
    207c:	7ed09103 	atnvcs	f1, f3
    2080:	01500115 	cmpeq	r0, r5, lsl r1
    2084:	7d021538 	cfstr32vc	mvfx1, [r2, #-224]	; 0xffffff20
    2088:	15300104 	ldrne	r0, [r0, #-260]!	; 0x104
    208c:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    2090:	14000077 	strne	r0, [r0], #-119	; 0x77
    2094:	0000918c 	andeq	r9, r0, ip, lsl #3
    2098:	0000063a 	andeq	r0, r0, sl, lsr r6
    209c:	000005f4 	strdeq	r0, [r0], -r4
    20a0:	02530115 	subseq	r0, r3, #1073741829	; 0x40000005
    20a4:	0115b908 	tsteq	r5, r8, lsl #18
    20a8:	d8030552 	stmdale	r3, {r1, r4, r6, r8, sl}
    20ac:	1500009c 	strne	r0, [r0, #-156]	; 0x9c
    20b0:	03055101 	movweq	r5, #20737	; 0x5101
    20b4:	00009cf8 	strdeq	r9, [r0], -r8
    20b8:	05500115 	ldrbeq	r0, [r0, #-277]	; 0x115
    20bc:	009d8c03 	addseq	r8, sp, r3, lsl #24
    20c0:	7d021500 	cfstr32vc	mvfx1, [r2, #-0]
    20c4:	00790200 	rsbseq	r0, r9, r0, lsl #4
    20c8:	91901600 	orrsls	r1, r0, r0, lsl #12
    20cc:	06500000 	ldrbeq	r0, [r0], -r0
    20d0:	00000000 	andeq	r0, r0, r0
    20d4:	00007a18 	andeq	r7, r0, r8, lsl sl
    20d8:	00060f00 	andeq	r0, r6, r0, lsl #30
    20dc:	006b1900 	rsbeq	r1, fp, r0, lsl #18
    20e0:	00090000 	andeq	r0, r9, r0
    20e4:	0005ff06 	andeq	pc, r5, r6, lsl #30
    20e8:	007a1800 	rsbseq	r1, sl, r0, lsl #16
    20ec:	06240000 	strteq	r0, [r4], -r0
    20f0:	6b190000 	blvs	6420f8 <__bss_end__+0x637de0>
    20f4:	7f000000 	svcvc	0x00000000
    20f8:	04871f00 	streq	r1, [r7], #3840	; 0xf00
    20fc:	1d030000 	stcne	0, cr0, [r3, #-0]
    2100:	00000379 	andeq	r0, r0, r9, ror r3
    2104:	0004821f 	andeq	r8, r4, pc, lsl r2
    2108:	8e200300 	cdphi	3, 2, cr0, cr0, cr0, {0}
    210c:	20000003 	andcs	r0, r0, r3
    2110:	00000452 	andeq	r0, r0, r2, asr r4
    2114:	00252703 	eoreq	r2, r5, r3, lsl #14
    2118:	06500000 	ldrbeq	r0, [r0], -r0
    211c:	811c0000 	tsthi	ip, r0
    2120:	21000000 	mrscs	r0, (UNDEF: 0)
    2124:	00052200 	andeq	r2, r5, r0, lsl #4
    2128:	5c030000 	stcpl	0, cr0, [r3], {-0}
    212c:	0000ff00 	andeq	pc, r0, r0, lsl #30
    2130:	93000400 	movwls	r0, #1024	; 0x400
    2134:	0400000a 	streq	r0, [r0], #-10
    2138:	00001001 	andeq	r1, r0, r1
    213c:	04f20100 	ldrbteq	r0, [r2], #256	; 0x100
    2140:	03ee0000 	mvneq	r0, #0
    2144:	91f80000 	mvnsls	r0, r0
    2148:	00280000 	eoreq	r0, r8, r0
    214c:	09c50000 	stmibeq	r5, {}^	; <UNPREDICTABLE>
    2150:	04020000 	streq	r0, [r2], #-0
    2154:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    2158:	07040300 	streq	r0, [r4, -r0, lsl #6]
    215c:	00000181 	andeq	r0, r0, r1, lsl #3
    2160:	81060103 	tsthi	r6, r3, lsl #2
    2164:	03000000 	movweq	r0, #0
    2168:	01d20502 	bicseq	r0, r2, r2, lsl #10
    216c:	04030000 	streq	r0, [r3], #-0
    2170:	0001be05 	andeq	fp, r1, r5, lsl #28
    2174:	05080300 	streq	r0, [r8, #-768]	; 0x300
    2178:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
    217c:	7f080103 	svcvc	0x00080103
    2180:	03000000 	movweq	r0, #0
    2184:	00fe0702 	rscseq	r0, lr, r2, lsl #14
    2188:	04030000 	streq	r0, [r3], #-0
    218c:	00017c07 	andeq	r7, r1, r7, lsl #24
    2190:	07080300 	streq	r0, [r8, -r0, lsl #6]
    2194:	00000177 	andeq	r0, r0, r7, ror r1
    2198:	b0070403 	andlt	r0, r7, r3, lsl #8
    219c:	03000001 	movweq	r0, #1
    21a0:	00880801 	addeq	r0, r8, r1, lsl #16
    21a4:	04040000 	streq	r0, [r4], #-0
    21a8:	0000007f 	andeq	r0, r0, pc, ror r0
    21ac:	00007205 	andeq	r7, r0, r5, lsl #4
    21b0:	008d0600 	addeq	r0, sp, r0, lsl #12
    21b4:	04010000 	streq	r0, [r1], #-0
    21b8:	000091f8 	strdeq	r9, [r0], -r8
    21bc:	00000028 	andeq	r0, r0, r8, lsr #32
    21c0:	00ca9c01 	sbceq	r9, sl, r1, lsl #24
    21c4:	0c070000 	stceq	0, cr0, [r7], {-0}
    21c8:	ac000092 	stcge	0, cr0, [r0], {146}	; 0x92
    21cc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    21d0:	03055001 	movweq	r5, #20481	; 0x5001
    21d4:	00009dc4 	andeq	r9, r0, r4, asr #27
    21d8:	92140900 	andsls	r0, r4, #0, 18
    21dc:	00ea0000 	rsceq	r0, sl, r0
    21e0:	00c00000 	sbceq	r0, r0, r0
    21e4:	01080000 	mrseq	r0, (UNDEF: 8)
    21e8:	64080250 	strvs	r0, [r8], #-592	; 0x250
    21ec:	92180a00 	andsls	r0, r8, #0, 20
    21f0:	00fb0000 	rscseq	r0, fp, r0
    21f4:	0b000000 	bleq	21fc <_start-0x5e04>
    21f8:	00000025 	andeq	r0, r0, r5, lsr #32
    21fc:	000000d9 	ldrdeq	r0, [r0], -r9
    2200:	0000790c 	andeq	r7, r0, ip, lsl #18
    2204:	820d0000 	andhi	r0, sp, #0
    2208:	02000004 	andeq	r0, r0, #4
    220c:	0000e420 	andeq	lr, r0, r0, lsr #8
    2210:	ca040400 	bgt	103218 <__bss_end__+0xf8f00>
    2214:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2218:	0000050c 	andeq	r0, r0, ip, lsl #10
    221c:	00fb4d02 	rscseq	r4, fp, r2, lsl #26
    2220:	2c0c0000 	stccs	0, cr0, [ip], {-0}
    2224:	00000000 	andeq	r0, r0, r0
    2228:	0000050f 	andeq	r0, r0, pc, lsl #10
    222c:	005c0200 	subseq	r0, ip, r0, lsl #4
    2230:	0000010b 	andeq	r0, r0, fp, lsl #2
    2234:	0b5d0004 	bleq	174224c <__bss_end__+0x1737f34>
    2238:	01040000 	mrseq	r0, (UNDEF: 4)
    223c:	00000010 	andeq	r0, r0, r0, lsl r0
    2240:	00051501 	andeq	r1, r5, r1, lsl #10
    2244:	0003ee00 	andeq	lr, r3, r0, lsl #28
    2248:	00922000 	addseq	r2, r2, r0
    224c:	00003400 	andeq	r3, r0, r0, lsl #8
    2250:	000a5c00 	andeq	r5, sl, r0, lsl #24
    2254:	05040200 	streq	r0, [r4, #-512]	; 0x200
    2258:	00746e69 	rsbseq	r6, r4, r9, ror #28
    225c:	81070403 	tsthi	r7, r3, lsl #8
    2260:	03000001 	movweq	r0, #1
    2264:	00810601 	addeq	r0, r1, r1, lsl #12
    2268:	02030000 	andeq	r0, r3, #0
    226c:	0001d205 	andeq	sp, r1, r5, lsl #4
    2270:	05040300 	streq	r0, [r4, #-768]	; 0x300
    2274:	000001be 			; <UNDEFINED> instruction: 0x000001be
    2278:	b9050803 	stmdblt	r5, {r0, r1, fp}
    227c:	03000001 	movweq	r0, #1
    2280:	007f0801 	rsbseq	r0, pc, r1, lsl #16
    2284:	02030000 	andeq	r0, r3, #0
    2288:	0000fe07 	andeq	pc, r0, r7, lsl #28
    228c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2290:	0000017c 	andeq	r0, r0, ip, ror r1
    2294:	77070803 	strvc	r0, [r7, -r3, lsl #16]
    2298:	03000001 	movweq	r0, #1
    229c:	01b00704 	lslseq	r0, r4, #14
    22a0:	01030000 	mrseq	r0, (UNDEF: 3)
    22a4:	00008808 	andeq	r8, r0, r8, lsl #16
    22a8:	054b0400 	strbeq	r0, [fp, #-1024]	; 0x400
    22ac:	03010000 	movweq	r0, #4096	; 0x1000
    22b0:	00009220 	andeq	r9, r0, r0, lsr #4
    22b4:	00000034 	andeq	r0, r0, r4, lsr r0
    22b8:	00de9c01 	sbcseq	r9, lr, r1, lsl #24
    22bc:	29050000 	stmdbcs	r5, {}	; <UNPREDICTABLE>
    22c0:	01000005 	tsteq	r0, r5
    22c4:	00002504 	andeq	r2, r0, r4, lsl #10
    22c8:	05370500 	ldreq	r0, [r7, #-1280]!	; 0x500
    22cc:	04010000 	streq	r0, [r1], #-0
    22d0:	00000025 	andeq	r0, r0, r5, lsr #32
    22d4:	00006706 	andeq	r6, r0, r6, lsl #14
    22d8:	b1050100 	mrslt	r0, (UNDEF: 21)
    22dc:	07000000 	streq	r0, [r0, -r0]
    22e0:	73620800 	cmnvc	r2, #0, 16
    22e4:	07010073 	smlsdxeq	r1, r3, r0, r0
    22e8:	000000de 	ldrdeq	r0, [r0], -lr
    22ec:	000010f3 	strdeq	r1, [r0], -r3
    22f0:	00054309 	andeq	r4, r5, r9, lsl #6
    22f4:	de080100 	adflee	f0, f0, f0
    22f8:	0a000000 	beq	2300 <_start-0x5d00>
    22fc:	00009248 	andeq	r9, r0, r8, asr #4
    2300:	000000fa 	strdeq	r0, [r0], -sl
    2304:	00924c0a 	addseq	r4, r2, sl, lsl #24
    2308:	00010700 	andeq	r0, r1, r0, lsl #14
    230c:	040b0000 	streq	r0, [fp], #-0
    2310:	00000025 	andeq	r0, r0, r5, lsr #32
    2314:	00052905 	andeq	r2, r5, r5, lsl #18
    2318:	25040100 	strcs	r0, [r4, #-256]	; 0x100
    231c:	05000000 	streq	r0, [r0, #-0]
    2320:	00000537 	andeq	r0, r0, r7, lsr r5
    2324:	00250401 	eoreq	r0, r5, r1, lsl #8
    2328:	67060000 	strvs	r0, [r6, -r0]
    232c:	01000000 	mrseq	r0, (UNDEF: 0)
    2330:	00010705 	andeq	r0, r1, r5, lsl #14
    2334:	0c000700 	stceq	7, cr0, [r0], {-0}
    2338:	00000005 	andeq	r0, r0, r5
    233c:	ad005c02 	stcge	12, cr5, [r0, #-8]
    2340:	04000001 	streq	r0, [r0], #-1
    2344:	000c0700 	andeq	r0, ip, r0, lsl #14
    2348:	10010400 	andne	r0, r1, r0, lsl #8
    234c:	01000000 	mrseq	r0, (UNDEF: 0)
    2350:	0000056d 	andeq	r0, r0, sp, ror #10
    2354:	000003ee 	andeq	r0, r0, lr, ror #7
    2358:	00000060 	andeq	r0, r0, r0, rrx
    235c:	00000000 	andeq	r0, r0, r0
    2360:	00000af6 	strdeq	r0, [r0], -r6
    2364:	69050402 	stmdbvs	r5, {r1, sl}
    2368:	0300746e 	movweq	r7, #1134	; 0x46e
    236c:	01810704 	orreq	r0, r1, r4, lsl #14
    2370:	01030000 	mrseq	r0, (UNDEF: 3)
    2374:	00008106 	andeq	r8, r0, r6, lsl #2
    2378:	05020300 	streq	r0, [r2, #-768]	; 0x300
    237c:	000001d2 	ldrdeq	r0, [r0], -r2
    2380:	be050403 	cdplt	4, 0, cr0, cr5, cr3, {0}
    2384:	03000001 	movweq	r0, #1
    2388:	01b90508 			; <UNDEFINED> instruction: 0x01b90508
    238c:	01030000 	mrseq	r0, (UNDEF: 3)
    2390:	00007f08 	andeq	r7, r0, r8, lsl #30
    2394:	07020300 	streq	r0, [r2, -r0, lsl #6]
    2398:	000000fe 	strdeq	r0, [r0], -lr
    239c:	7c070403 	cfstrsvc	mvf0, [r7], {3}
    23a0:	03000001 	movweq	r0, #1
    23a4:	01770708 	cmneq	r7, r8, lsl #14
    23a8:	04030000 	streq	r0, [r3], #-0
    23ac:	0001b007 	andeq	fp, r1, r7
    23b0:	08010300 	stmdaeq	r1, {r8, r9}
    23b4:	00000088 	andeq	r0, r0, r8, lsl #1
    23b8:	00055304 	andeq	r5, r5, r4, lsl #6
    23bc:	250e0100 	strcs	r0, [lr, #-256]	; 0x100
    23c0:	54000000 	strpl	r0, [r0], #-0
    23c4:	18000092 	stmdane	r0, {r1, r4, r7}
    23c8:	01000000 	mrseq	r0, (UNDEF: 0)
    23cc:	0000a29c 	muleq	r0, ip, r2
    23d0:	05bf0500 	ldreq	r0, [pc, #1280]!	; 28d8 <_start-0x5728>
    23d4:	0f010000 	svceq	0x00010000
    23d8:	0000002c 	andeq	r0, r0, ip, lsr #32
    23dc:	00001113 	andeq	r1, r0, r3, lsl r1
    23e0:	05a20600 	streq	r0, [r2, #1536]!	; 0x600
    23e4:	17010000 	strne	r0, [r1, -r0]
    23e8:	0000926c 	andeq	r9, r0, ip, ror #4
    23ec:	00000014 	andeq	r0, r0, r4, lsl r0
    23f0:	00c79c01 	sbceq	r9, r7, r1, lsl #24
    23f4:	bf050000 	svclt	0x00050000
    23f8:	01000005 	tsteq	r0, r5
    23fc:	00002c18 	andeq	r2, r0, r8, lsl ip
    2400:	00113200 	andseq	r3, r1, r0, lsl #4
    2404:	05060000 	streq	r0, [r6, #-0]
    2408:	01000000 	mrseq	r0, (UNDEF: 0)
    240c:	0092801f 	addseq	r8, r2, pc, lsl r0
    2410:	00004800 	andeq	r4, r0, r0, lsl #16
    2414:	779c0100 	ldrvc	r0, [ip, r0, lsl #2]
    2418:	07000001 	streq	r0, [r0, -r1]
    241c:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
    2420:	01772a01 	cmneq	r7, r1, lsl #20
    2424:	001c0000 	andseq	r0, ip, r0
    2428:	9a072010 	bls	1ca470 <__bss_end__+0x1c0158>
    242c:	01000005 	tsteq	r0, r5
    2430:	0001772b 	andeq	r7, r1, fp, lsr #14
    2434:	10002400 	andne	r2, r0, r0, lsl #8
    2438:	05610720 	strbeq	r0, [r1, #-1824]!	; 0x720
    243c:	2c010000 	stccs	0, cr0, [r1], {-0}
    2440:	00000177 	andeq	r0, r0, r7, ror r1
    2444:	5a000000 	bpl	244c <_start-0x5bb4>
    2448:	00058108 	andeq	r8, r5, r8, lsl #2
    244c:	772d0100 	strvc	r0, [sp, -r0, lsl #2]!
    2450:	20000001 	andcs	r0, r0, r1
    2454:	00928809 	addseq	r8, r2, r9, lsl #16
    2458:	00007900 	andeq	r7, r0, r0, lsl #18
    245c:	92940900 	addsls	r0, r4, #0, 18
    2460:	00a20000 	adceq	r0, r2, r0
    2464:	9c0a0000 	stcls	0, cr0, [sl], {-0}
    2468:	8d000092 	stchi	0, cr0, [r0, #-584]	; 0xfffffdb8
    246c:	3a000001 	bcc	2478 <_start-0x5b88>
    2470:	0b000001 	bleq	247c <_start-0x5b84>
    2474:	4e015001 	cdpmi	0, 0, cr5, cr1, cr1, {0}
    2478:	92a80a00 	adcls	r0, r8, #0, 20
    247c:	019e0000 	orrseq	r0, lr, r0
    2480:	015a0000 	cmpeq	sl, r0
    2484:	010b0000 	mrseq	r0, (UNDEF: 11)
    2488:	010c0551 	tsteq	ip, r1, asr r5
    248c:	0b5a0000 	bleq	1682494 <__bss_end__+0x167817c>
    2490:	0c055001 	stceq	0, cr5, [r5], {1}
    2494:	20100024 	andscs	r0, r0, r4, lsr #32
    2498:	92b40c00 	adcsls	r0, r4, #0, 24
    249c:	019e0000 	orrseq	r0, lr, r0
    24a0:	010b0000 	mrseq	r0, (UNDEF: 11)
    24a4:	200c0551 	andcs	r0, ip, r1, asr r5
    24a8:	0b5a0000 	bleq	16824b0 <__bss_end__+0x1678198>
    24ac:	0c055001 	stceq	0, cr5, [r5], {1}
    24b0:	2010001c 	andscs	r0, r0, ip, lsl r0
    24b4:	250d0000 	strcs	r0, [sp, #-0]
    24b8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    24bc:	00000556 	andeq	r0, r0, r6, asr r5
    24c0:	01880d01 	orreq	r0, r8, r1, lsl #26
    24c4:	0d100000 	ldceq	0, cr0, [r0, #-0]
    24c8:	0000002c 	andeq	r0, r0, ip, lsr #32
    24cc:	00050c0e 	andeq	r0, r5, lr, lsl #24
    24d0:	9e4d0200 	cdpls	2, 4, cr0, cr13, cr0, {0}
    24d4:	0f000001 	svceq	0x00000001
    24d8:	0000002c 	andeq	r0, r0, ip, lsr #32
    24dc:	05b11000 	ldreq	r1, [r1, #0]!
    24e0:	90020000 	andls	r0, r2, r0
    24e4:	00002c0f 	andeq	r2, r0, pc, lsl #24
    24e8:	002c0f00 	eoreq	r0, ip, r0, lsl #30
    24ec:	00000000 	andeq	r0, r0, r0
    24f0:	000001aa 	andeq	r0, r0, sl, lsr #3
    24f4:	0cf50004 	ldcleq	0, cr0, [r5], #16
    24f8:	01040000 	mrseq	r0, (UNDEF: 4)
    24fc:	00000010 	andeq	r0, r0, r0, lsl r0
    2500:	0005ce01 	andeq	ip, r5, r1, lsl #28
    2504:	0003ee00 	andeq	lr, r3, r0, lsl #28
    2508:	0092c800 	addseq	ip, r2, r0, lsl #16
    250c:	00007c00 	andeq	r7, r0, r0, lsl #24
    2510:	000b9300 	andeq	r9, fp, r0, lsl #6
    2514:	05040200 	streq	r0, [r4, #-512]	; 0x200
    2518:	00746e69 	rsbseq	r6, r4, r9, ror #28
    251c:	81070403 	tsthi	r7, r3, lsl #8
    2520:	03000001 	movweq	r0, #1
    2524:	00810601 	addeq	r0, r1, r1, lsl #12
    2528:	02030000 	andeq	r0, r3, #0
    252c:	0001d205 	andeq	sp, r1, r5, lsl #4
    2530:	05040300 	streq	r0, [r4, #-768]	; 0x300
    2534:	000001be 			; <UNDEFINED> instruction: 0x000001be
    2538:	b9050803 	stmdblt	r5, {r0, r1, fp}
    253c:	03000001 	movweq	r0, #1
    2540:	007f0801 	rsbseq	r0, pc, r1, lsl #16
    2544:	02030000 	andeq	r0, r3, #0
    2548:	0000fe07 	andeq	pc, r0, r7, lsl #28
    254c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2550:	0000017c 	andeq	r0, r0, ip, ror r1
    2554:	77070803 	strvc	r0, [r7, -r3, lsl #16]
    2558:	03000001 	movweq	r0, #1
    255c:	01b00704 	lslseq	r0, r4, #14
    2560:	01030000 	mrseq	r0, (UNDEF: 3)
    2564:	00008808 	andeq	r8, r0, r8, lsl #16
    2568:	05ed0400 	strbeq	r0, [sp, #1024]!	; 0x400
    256c:	05010000 	streq	r0, [r1, #-0]
    2570:	000092c8 	andeq	r9, r0, r8, asr #5
    2574:	0000001c 	andeq	r0, r0, ip, lsl r0
    2578:	009e9c01 	addseq	r9, lr, r1, lsl #24
    257c:	e7050000 	str	r0, [r5, -r0]
    2580:	01000005 	tsteq	r0, r5
    2584:	00002c05 	andeq	r2, r0, r5, lsl #24
    2588:	00115c00 	andseq	r5, r1, r0, lsl #24
    258c:	03060000 	movweq	r0, #24576	; 0x6000
    2590:	01000006 	tsteq	r0, r6
    2594:	00002c0b 	andeq	r2, r0, fp, lsl #24
    2598:	0092e400 	addseq	lr, r2, r0, lsl #8
    259c:	00001400 	andeq	r1, r0, r0, lsl #8
    25a0:	cb9c0100 	blgt	fe7029a8 <__bss_end__+0xfe6f8690>
    25a4:	07000000 	streq	r0, [r0, -r0]
    25a8:	000092f0 	strdeq	r9, [r0], -r0
    25ac:	0000019c 	muleq	r0, ip, r1
    25b0:	05500108 	ldrbeq	r0, [r0, #-264]	; 0x108
    25b4:	0030040c 	eorseq	r0, r0, ip, lsl #8
    25b8:	04000020 	streq	r0, [r0], #-32
    25bc:	000005fa 	strdeq	r0, [r0], -sl
    25c0:	92f80f01 	rscsls	r0, r8, #1, 30
    25c4:	00240000 	eoreq	r0, r4, r0
    25c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    25cc:	00000129 	andeq	r0, r0, r9, lsr #2
    25d0:	00737509 	rsbseq	r7, r3, r9, lsl #10
    25d4:	002c0f01 	eoreq	r0, ip, r1, lsl #30
    25d8:	11900000 	orrsne	r0, r0, r0
    25dc:	720a0000 	andvc	r0, sl, #0
    25e0:	10010062 	andne	r0, r1, r2, rrx
    25e4:	0000002c 	andeq	r0, r0, ip, lsr #32
    25e8:	080b5401 	stmdaeq	fp, {r0, sl, ip, lr}
    25ec:	10000093 	mulne	r0, r3, r0
    25f0:	1f000000 	svcne	0x00000000
    25f4:	0c000001 	stceq	0, cr0, [r0], {1}
    25f8:	01006172 	tsteq	r0, r2, ror r1
    25fc:	00002c12 	andeq	r2, r0, r2, lsl ip
    2600:	0011ae00 	andseq	sl, r1, r0, lsl #28
    2604:	930c0d00 	movwls	r0, #52480	; 0xcd00
    2608:	009e0000 	addseq	r0, lr, r0
    260c:	0d000000 	stceq	0, cr0, [r0, #-0]
    2610:	00009304 	andeq	r9, r0, r4, lsl #6
    2614:	0000009e 	muleq	r0, lr, r0
    2618:	050c0400 	streq	r0, [ip, #-1024]	; 0x400
    261c:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    2620:	0000931c 	andeq	r9, r0, ip, lsl r3
    2624:	00000014 	andeq	r0, r0, r4, lsl r0
    2628:	01629c01 	cmneq	r2, r1, lsl #24
    262c:	6d090000 	stcvs	0, cr0, [r9, #-0]
    2630:	18010073 	stmdane	r1, {r0, r1, r4, r5, r6}
    2634:	0000002c 	andeq	r0, r0, ip, lsr #32
    2638:	000011c1 	andeq	r1, r0, r1, asr #3
    263c:	00932c07 	addseq	r2, r3, r7, lsl #24
    2640:	0000cb00 	andeq	ip, r0, r0, lsl #22
    2644:	50010800 	andpl	r0, r1, r0, lsl #16
    2648:	5001f307 	andpl	pc, r1, r7, lsl #6
    264c:	1e03e80a 	cdpne	8, 0, cr14, cr3, cr10, {0}
    2650:	c4040000 	strgt	r0, [r4], #-0
    2654:	01000005 	tsteq	r0, r5
    2658:	0093301b 	addseq	r3, r3, fp, lsl r0
    265c:	00001400 	andeq	r1, r0, r0, lsl #8
    2660:	9c9c0100 	ldflss	f0, [ip], {0}
    2664:	09000001 	stmdbeq	r0, {r0}
    2668:	00636573 	rsbeq	r6, r3, r3, ror r5
    266c:	002c1b01 	eoreq	r1, ip, r1, lsl #22
    2670:	11e20000 	mvnne	r0, r0
    2674:	40070000 	andmi	r0, r7, r0
    2678:	29000093 	stmdbcs	r0, {r0, r1, r4, r7}
    267c:	08000001 	stmdaeq	r0, {r0}
    2680:	f3075001 	vhadd.u8	d5, d7, d1
    2684:	e80a5001 	stmda	sl, {r0, ip, lr}
    2688:	00001e03 	andeq	r1, r0, r3, lsl #28
    268c:	0005e10e 	andeq	lr, r5, lr, lsl #2
    2690:	2c9c0200 	lfmcs	f0, 4, [ip], {0}
    2694:	0f000000 	svceq	0x00000000
    2698:	0000002c 	andeq	r0, r0, ip, lsr #32
    269c:	03480000 	movteq	r0, #32768	; 0x8000
    26a0:	00040000 	andeq	r0, r4, r0
    26a4:	00000dd8 	ldrdeq	r0, [r0], -r8
    26a8:	00100104 	andseq	r0, r0, r4, lsl #2
    26ac:	2d010000 	stccs	0, cr0, [r1, #-0]
    26b0:	ee000006 	cdp	0, 0, cr0, cr0, cr6, {0}
    26b4:	1c000003 	stcne	0, cr0, [r0], {3}
    26b8:	78000096 	stmdavc	r0, {r1, r2, r4, r7}
    26bc:	37000001 	strcc	r0, [r0, -r1]
    26c0:	0200000c 	andeq	r0, r0, #12
    26c4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    26c8:	4b030074 	blmi	c28a0 <__bss_end__+0xb8588>
    26cc:	02000003 	andeq	r0, r0, #3
    26d0:	000037d4 	ldrdeq	r3, [r0], -r4
    26d4:	07040400 	streq	r0, [r4, -r0, lsl #8]
    26d8:	00000181 	andeq	r0, r0, r1, lsl #3
    26dc:	81060104 	tsthi	r6, r4, lsl #2
    26e0:	04000000 	streq	r0, [r0], #-0
    26e4:	01d20502 	bicseq	r0, r2, r2, lsl #10
    26e8:	04040000 	streq	r0, [r4], #-0
    26ec:	0001be05 	andeq	fp, r1, r5, lsl #28
    26f0:	05080400 	streq	r0, [r8, #-1024]	; 0x400
    26f4:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
    26f8:	7f080104 	svcvc	0x00080104
    26fc:	04000000 	streq	r0, [r0], #-0
    2700:	00fe0702 	rscseq	r0, lr, r2, lsl #14
    2704:	04040000 	streq	r0, [r4], #-0
    2708:	00017c07 	andeq	r7, r1, r7, lsl #24
    270c:	07080400 	streq	r0, [r8, -r0, lsl #8]
    2710:	00000177 	andeq	r0, r0, r7, ror r1
    2714:	b0070404 	andlt	r0, r7, r4, lsl #8
    2718:	05000001 	streq	r0, [r0, #-1]
    271c:	85040604 	strhi	r0, [r4, #-1540]	; 0x604
    2720:	04000000 	streq	r0, [r0], #-0
    2724:	00880801 	addeq	r0, r8, r1, lsl #16
    2728:	04060000 	streq	r0, [r6], #-0
    272c:	00000092 	muleq	r0, r2, r0
    2730:	00008507 	andeq	r8, r0, r7, lsl #10
    2734:	00850800 	addeq	r0, r5, r0, lsl #16
    2738:	00a70000 	adceq	r0, r7, r0
    273c:	76090000 	strvc	r0, [r9], -r0
    2740:	07000000 	streq	r0, [r0, -r0]
    2744:	01110a00 	tsteq	r1, r0, lsl #20
    2748:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    274c:	0000007d 	andeq	r0, r0, sp, ror r0
    2750:	0000961c 	andeq	r9, r0, ip, lsl r6
    2754:	00000064 	andeq	r0, r0, r4, rrx
    2758:	015c9c01 	cmpeq	ip, r1, lsl #24
    275c:	570b0000 	strpl	r0, [fp, -r0]
    2760:	01000006 	tsteq	r0, r6
    2764:	00003719 	andeq	r3, r0, r9, lsl r7
    2768:	00120300 	andseq	r0, r2, r0, lsl #6
    276c:	01460c00 	cmpeq	r6, r0, lsl #24
    2770:	015c0000 	cmpeq	ip, r0
    2774:	03050000 	movweq	r0, #20480	; 0x5000
    2778:	00009dd0 	ldrdeq	r9, [r0], -r0
    277c:	00067e0d 	andeq	r7, r6, sp, lsl #28
    2780:	7d1c0100 	ldfvcs	f0, [ip, #-0]
    2784:	01000000 	mrseq	r0, (UNDEF: 0)
    2788:	064f0e54 			; <UNDEFINED> instruction: 0x064f0e54
    278c:	1d010000 	stcne	0, cr0, [r1, #-0]
    2790:	00000037 	andeq	r0, r0, r7, lsr r0
    2794:	0000123d 	andeq	r1, r0, sp, lsr r2
    2798:	0096440f 	addseq	r4, r6, pc, lsl #8
    279c:	00031300 	andeq	r1, r3, r0, lsl #6
    27a0:	00012800 	andeq	r2, r1, r0, lsl #16
    27a4:	53011000 	movwpl	r1, #4096	; 0x1000
    27a8:	01104a01 	tsteq	r0, r1, lsl #20
    27ac:	d0030552 	andle	r0, r3, r2, asr r5
    27b0:	1000009d 	mulne	r0, sp, r0
    27b4:	03055101 	movweq	r5, #20737	; 0x5101
    27b8:	00009e38 	andeq	r9, r0, r8, lsr lr
    27bc:	05500110 	ldrbeq	r0, [r0, #-272]	; 0x110
    27c0:	009df803 	addseq	pc, sp, r3, lsl #16
    27c4:	48110000 	ldmdami	r1, {}	; <UNPREDICTABLE>
    27c8:	29000096 	stmdbcs	r0, {r1, r2, r4, r7}
    27cc:	12000003 	andne	r0, r0, #3
    27d0:	00009668 	andeq	r9, r0, r8, ror #12
    27d4:	00000330 	andeq	r0, r0, r0, lsr r3
    27d8:	08520110 	ldmdaeq	r2, {r4, r8}^
    27dc:	235001f3 	cmpcs	r0, #-1073741764	; 0xc000003c
    27e0:	1afc0903 	bne	fff04bf4 <__bss_end__+0xffefa8dc>
    27e4:	01510110 	cmpeq	r1, r0, lsl r1
    27e8:	50011030 	andpl	r1, r1, r0, lsr r0
    27ec:	5001f30b 	andpl	pc, r1, fp, lsl #6
    27f0:	fc090323 	stc2	3, cr0, [r9], {35}	; 0x23
    27f4:	2200741a 	andcs	r7, r0, #436207616	; 0x1a000000
    27f8:	97070000 	strls	r0, [r7, -r0]
    27fc:	0a000000 	beq	2804 <_start-0x57fc>
    2800:	0000026f 	andeq	r0, r0, pc, ror #4
    2804:	007d2601 	rsbseq	r2, sp, r1, lsl #12
    2808:	96800000 	strls	r0, [r0], r0
    280c:	00940000 	addseq	r0, r4, r0
    2810:	9c010000 	stcls	0, cr0, [r1], {-0}
    2814:	00000239 	andeq	r0, r0, r9, lsr r2
    2818:	0006570b 	andeq	r5, r6, fp, lsl #14
    281c:	37260100 	strcc	r0, [r6, -r0, lsl #2]!
    2820:	63000000 	movwvs	r0, #0
    2824:	0b000012 	bleq	2874 <_start-0x578c>
    2828:	00000645 	andeq	r0, r0, r5, asr #12
    282c:	00372601 	eorseq	r2, r7, r1, lsl #12
    2830:	12cf0000 	sbcne	r0, pc, #0
    2834:	460c0000 	strmi	r0, [ip], -r0
    2838:	49000001 	stmdbmi	r0, {r0}
    283c:	05000002 	streq	r0, [r0, #-2]
    2840:	009dd803 	addseq	sp, sp, r3, lsl #16
    2844:	061c0e00 	ldreq	r0, [ip], -r0, lsl #28
    2848:	2c010000 	stccs	0, cr0, [r1], {-0}
    284c:	00000037 	andeq	r0, r0, r7, lsr r0
    2850:	00001349 	andeq	r1, r0, r9, asr #6
    2854:	0096a80f 	addseq	sl, r6, pc, lsl #16
    2858:	00031300 	andeq	r1, r3, r0, lsl #6
    285c:	0001e500 	andeq	lr, r1, r0, lsl #10
    2860:	53011000 	movwpl	r1, #4096	; 0x1000
    2864:	10270802 	eorne	r0, r7, r2, lsl #16
    2868:	03055201 	movweq	r5, #20993	; 0x5201
    286c:	00009dd8 	ldrdeq	r9, [r0], -r8
    2870:	05510110 	ldrbeq	r0, [r1, #-272]	; 0x110
    2874:	009e3803 	addseq	r3, lr, r3, lsl #16
    2878:	50011000 	andpl	r1, r1, r0
    287c:	9df80305 	ldclls	3, cr0, [r8, #20]!
    2880:	11000000 	mrsne	r0, (UNDEF: 0)
    2884:	000096ac 	andeq	r9, r0, ip, lsr #13
    2888:	00000329 	andeq	r0, r0, r9, lsr #6
    288c:	0096b811 	addseq	fp, r6, r1, lsl r8
    2890:	0000a700 	andeq	sl, r0, r0, lsl #14
    2894:	96d80f00 	ldrbls	r0, [r8], r0, lsl #30
    2898:	03130000 	tsteq	r3, #0
    289c:	02260000 	eoreq	r0, r6, #0
    28a0:	01100000 	tsteq	r0, r0
    28a4:	2b080253 	blcs	2031f8 <__bss_end__+0x1f8ee0>
    28a8:	05520110 	ldrbeq	r0, [r2, #-272]	; 0x110
    28ac:	009dd803 	addseq	sp, sp, r3, lsl #16
    28b0:	51011000 	mrspl	r1, (UNDEF: 1)
    28b4:	9e380305 	cdpls	3, 3, cr0, cr8, cr5, {0}
    28b8:	01100000 	tsteq	r0, r0
    28bc:	4c030550 	cfstr32mi	mvfx0, [r3], {80}	; 0x50
    28c0:	0000009e 	muleq	r0, lr, r0
    28c4:	0096dc11 	addseq	sp, r6, r1, lsl ip
    28c8:	00032900 	andeq	r2, r3, r0, lsl #18
    28cc:	96fc1100 	ldrbtls	r1, [ip], r0, lsl #2
    28d0:	00a70000 	adceq	r0, r7, r0
    28d4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    28d8:	00000085 	andeq	r0, r0, r5, lsl #1
    28dc:	00000249 	andeq	r0, r0, r9, asr #4
    28e0:	00007609 	andeq	r7, r0, r9, lsl #12
    28e4:	07000f00 	streq	r0, [r0, -r0, lsl #30]
    28e8:	00000239 	andeq	r0, r0, r9, lsr r2
    28ec:	0001f413 	andeq	pc, r1, r3, lsl r4	; <UNPREDICTABLE>
    28f0:	143b0100 	ldrtne	r0, [fp], #-256	; 0x100
    28f4:	58000097 	stmdapl	r0, {r0, r1, r2, r4, r7}
    28f8:	01000000 	mrseq	r0, (UNDEF: 0)
    28fc:	0002ab9c 	muleq	r2, ip, fp
    2900:	01460c00 	cmpeq	r6, r0, lsl #24
    2904:	02bb0000 	adcseq	r0, fp, #0
    2908:	03050000 	movweq	r0, #20480	; 0x5000
    290c:	00009de8 	andeq	r9, r0, r8, ror #27
    2910:	00973c0f 	addseq	r3, r7, pc, lsl #24
    2914:	00031300 	andeq	r1, r3, r0, lsl #6
    2918:	0002a100 	andeq	sl, r2, r0, lsl #2
    291c:	53011000 	movwpl	r1, #4096	; 0x1000
    2920:	103c0802 	eorsne	r0, ip, r2, lsl #16
    2924:	03055201 	movweq	r5, #20993	; 0x5201
    2928:	00009de8 	andeq	r9, r0, r8, ror #27
    292c:	05510110 	ldrbeq	r0, [r1, #-272]	; 0x110
    2930:	009e3803 	addseq	r3, lr, r3, lsl #16
    2934:	50011000 	andpl	r1, r1, r0
    2938:	9ea40305 	cdpls	3, 10, cr0, cr4, cr5, {0}
    293c:	11000000 	mrsne	r0, (UNDEF: 0)
    2940:	00009740 	andeq	r9, r0, r0, asr #14
    2944:	00000329 	andeq	r0, r0, r9, lsr #6
    2948:	00850800 	addeq	r0, r5, r0, lsl #16
    294c:	02bb0000 	adcseq	r0, fp, #0
    2950:	76090000 	strvc	r0, [r9], -r0
    2954:	0c000000 	stceq	0, cr0, [r0], {-0}
    2958:	02ab0700 	adceq	r0, fp, #0, 14
    295c:	12140000 	andsne	r0, r4, #0
    2960:	01000006 	tsteq	r0, r6
    2964:	00976c45 	addseq	r6, r7, r5, asr #24
    2968:	00001800 	andeq	r1, r0, r0, lsl #16
    296c:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    2970:	0000065e 	andeq	r0, r0, lr, asr r6
    2974:	007d4e01 	rsbseq	r4, sp, r1, lsl #28
    2978:	97840000 	strls	r0, [r4, r0]
    297c:	00100000 	andseq	r0, r0, r0
    2980:	9c010000 	stcls	0, cr0, [r1], {-0}
    2984:	00063e0d 	andeq	r3, r6, sp, lsl #28
    2988:	25080100 	strcs	r0, [r8, #-256]	; 0x100
    298c:	05000000 	streq	r0, [r0, #-0]
    2990:	00a31003 	adceq	r1, r3, r3
    2994:	06660d00 	strbteq	r0, [r6], -r0, lsl #26
    2998:	0b010000 	bleq	429a0 <__bss_end__+0x38688>
    299c:	0000007f 	andeq	r0, r0, pc, ror r0
    29a0:	a3140305 	tstge	r4, #335544320	; 0x14000000
    29a4:	6f160000 	svcvs	0x00160000
    29a8:	01000006 	tsteq	r0, r6
    29ac:	00008505 	andeq	r8, r0, r5, lsl #10
    29b0:	04521700 	ldrbeq	r1, [r2], #-1792	; 0x700
    29b4:	27030000 	strcs	r0, [r3, -r0]
    29b8:	00000025 	andeq	r0, r0, r5, lsr #32
    29bc:	00000329 	andeq	r0, r0, r9, lsr #6
    29c0:	00008c18 	andeq	r8, r0, r8, lsl ip
    29c4:	1a001900 	bne	8dcc <emit+0x44>
    29c8:	00000005 	andeq	r0, r0, r5
    29cc:	721b5c03 	andsvc	r5, fp, #768	; 0x300
    29d0:	04000003 	streq	r0, [r0], #-3
    29d4:	00007d1b 	andeq	r7, r0, fp, lsl sp
    29d8:	007d1800 	rsbseq	r1, sp, r0, lsl #16
    29dc:	25180000 	ldrcs	r0, [r8, #-0]
    29e0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    29e4:	0000002c 	andeq	r0, r0, ip, lsr #32
    29e8:	00e00000 	rsceq	r0, r0, r0
    29ec:	00040000 	andeq	r0, r4, r0
    29f0:	00000f5f 	andeq	r0, r0, pc, asr pc
    29f4:	00100104 	andseq	r0, r0, r4, lsl #2
    29f8:	a5010000 	strge	r0, [r1, #-0]
    29fc:	ee000006 	cdp	0, 0, cr0, cr0, cr6, {0}
    2a00:	94000003 	strls	r0, [r0], #-3
    2a04:	14000097 	strne	r0, [r0], #-151	; 0x97
    2a08:	a6000000 	strge	r0, [r0], -r0
    2a0c:	0200000d 	andeq	r0, r0, #13
    2a10:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2a14:	04030074 	streq	r0, [r3], #-116	; 0x74
    2a18:	00018107 	andeq	r8, r1, r7, lsl #2
    2a1c:	06010300 	streq	r0, [r1], -r0, lsl #6
    2a20:	00000081 	andeq	r0, r0, r1, lsl #1
    2a24:	d2050203 	andle	r0, r5, #805306368	; 0x30000000
    2a28:	03000001 	movweq	r0, #1
    2a2c:	01be0504 			; <UNDEFINED> instruction: 0x01be0504
    2a30:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2a34:	0001b905 	andeq	fp, r1, r5, lsl #18
    2a38:	08010300 	stmdaeq	r1, {r8, r9}
    2a3c:	0000007f 	andeq	r0, r0, pc, ror r0
    2a40:	fe070203 	cdp2	2, 0, cr0, cr7, cr3, {0}
    2a44:	03000000 	movweq	r0, #0
    2a48:	017c0704 	cmneq	ip, r4, lsl #14
    2a4c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2a50:	00017707 	andeq	r7, r1, r7, lsl #14
    2a54:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2a58:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    2a5c:	88080103 	stmdahi	r8, {r0, r1, r8}
    2a60:	04000000 	streq	r0, [r0], #-0
    2a64:	00000694 	muleq	r0, r4, r6
    2a68:	00250301 	eoreq	r0, r5, r1, lsl #6
    2a6c:	97940000 	ldrls	r0, [r4, r0]
    2a70:	00140000 	andseq	r0, r4, r0
    2a74:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a78:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    2a7c:	01006305 	tsteq	r0, r5, lsl #6
    2a80:	00002503 	andeq	r2, r0, r3, lsl #10
    2a84:	00137600 	andseq	r7, r3, r0, lsl #12
    2a88:	97a00600 	strls	r0, [r0, r0, lsl #12]!
    2a8c:	00d60000 	sbcseq	r0, r6, r0
    2a90:	01070000 	mrseq	r0, (UNDEF: 7)
    2a94:	00740250 	rsbseq	r0, r4, r0, asr r2
    2a98:	25080000 	strcs	r0, [r8, #-0]
    2a9c:	bf000000 	svclt	0x00000000
    2aa0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2aa4:	00000025 	andeq	r0, r0, r5, lsr #32
    2aa8:	04870a00 	streq	r0, [r7], #2560	; 0xa00
    2aac:	06010000 	streq	r0, [r1], -r0
    2ab0:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2ab4:	97c80305 	strbls	r0, [r8, r5, lsl #6]
    2ab8:	040b0000 	streq	r0, [fp], #-0
    2abc:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    2ac0:	00068a0c 	andeq	r8, r6, ip, lsl #20
    2ac4:	093a0200 	ldmdbeq	sl!, {r9}
    2ac8:	0000002c 	andeq	r0, r0, ip, lsr #32
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	110e1b0e 	tstne	lr, lr, lsl #22
       c:	10061201 	andne	r1, r6, r1, lsl #4
      10:	02000017 	andeq	r0, r0, #23
      14:	0b0b0024 	bleq	2c00ac <__bss_end__+0x2b5d94>
      18:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
      1c:	24030000 	strcs	r0, [r3], #-0
      20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
      24:	000e030b 	andeq	r0, lr, fp, lsl #6
      28:	00160400 	andseq	r0, r6, r0, lsl #8
      2c:	0b3a0e03 	bleq	e83840 <__bss_end__+0xe79528>
      30:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      34:	0f050000 	svceq	0x00050000
      38:	000b0b00 	andeq	r0, fp, r0, lsl #22
      3c:	000f0600 	andeq	r0, pc, r0, lsl #12
      40:	13490b0b 	movtne	r0, #39691	; 0x9b0b
      44:	26070000 	strcs	r0, [r7], -r0
      48:	00134900 	andseq	r4, r3, r0, lsl #18
      4c:	01010800 	tsteq	r1, r0, lsl #16
      50:	13011349 	movwne	r1, #4937	; 0x1349
      54:	21090000 	mrscs	r0, (UNDEF: 9)
      58:	2f134900 	svccs	0x00134900
      5c:	0a00000b 	beq	90 <_start-0x7f70>
      60:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
      64:	0b3a050b 	bleq	e81498 <__bss_end__+0xe77180>
      68:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      6c:	0d0b0000 	stceq	0, cr0, [fp, #-0]
      70:	3a0e0300 	bcc	380c78 <__bss_end__+0x376960>
      74:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      78:	000b3813 	andeq	r3, fp, r3, lsl r8
      7c:	000d0c00 	andeq	r0, sp, r0, lsl #24
      80:	0b3a0803 	bleq	e82094 <__bss_end__+0xe77d7c>
      84:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      88:	00000b38 	andeq	r0, r0, r8, lsr fp
      8c:	2701150d 	strcs	r1, [r1, -sp, lsl #10]
      90:	00130119 	andseq	r0, r3, r9, lsl r1
      94:	00050e00 	andeq	r0, r5, r0, lsl #28
      98:	00001349 	andeq	r1, r0, r9, asr #6
      9c:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
      a0:	00052f13 	andeq	r2, r5, r3, lsl pc
      a4:	012e1000 	teqeq	lr, r0
      a8:	0b3a0e03 	bleq	e838bc <__bss_end__+0xe795a4>
      ac:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
      b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
      b4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
      b8:	00130119 	andseq	r0, r3, r9, lsl r1
      bc:	00051100 	andeq	r1, r5, r0, lsl #2
      c0:	0b3a0803 	bleq	e820d4 <__bss_end__+0xe77dbc>
      c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      c8:	00001702 	andeq	r1, r0, r2, lsl #14
      cc:	03003412 	movweq	r3, #1042	; 0x412
      d0:	3b0b3a08 	blcc	2ce8f8 <__bss_end__+0x2c45e0>
      d4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
      d8:	13000017 	movwne	r0, #23
      dc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
      e0:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
      e4:	00001802 	andeq	r1, r0, r2, lsl #16
      e8:	01828914 	orreq	r8, r2, r4, lsl r9
      ec:	31011100 	mrscc	r1, (UNDEF: 17)
      f0:	15000013 	strne	r0, [r0, #-19]
      f4:	01018289 	smlabbeq	r1, r9, r2, r8
      f8:	13310111 	teqne	r1, #1073741828	; 0x40000004
      fc:	00001301 	andeq	r1, r0, r1, lsl #6
     100:	01828a16 	orreq	r8, r2, r6, lsl sl
     104:	91180200 	tstls	r8, r0, lsl #4
     108:	00001842 	andeq	r1, r0, r2, asr #16
     10c:	01828917 	orreq	r8, r2, r7, lsl r9
     110:	31011101 	tstcc	r1, r1, lsl #2
     114:	18000013 	stmdane	r0, {r0, r1, r4}
     118:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     11c:	0b3a0e03 	bleq	e83930 <__bss_end__+0xe79618>
     120:	01110b3b 	tsteq	r1, fp, lsr fp
     124:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     128:	01194297 			; <UNDEFINED> instruction: 0x01194297
     12c:	19000013 	stmdbne	r0, {r0, r1, r4}
     130:	08030034 	stmdaeq	r3, {r2, r4, r5}
     134:	0b3b0b3a 	bleq	ec2e24 <__bss_end__+0xeb8b0c>
     138:	0b1c1349 	bleq	704e64 <__bss_end__+0x6fab4c>
     13c:	0b1a0000 	bleq	680144 <__bss_end__+0x675e2c>
     140:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     144:	00130106 	andseq	r0, r3, r6, lsl #2
     148:	010b1b00 	tsteq	fp, r0, lsl #22
     14c:	00001755 	andeq	r1, r0, r5, asr r7
     150:	0300341c 	movweq	r3, #1052	; 0x41c
     154:	3b0b3a0e 	blcc	2ce994 <__bss_end__+0x2c467c>
     158:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     15c:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
     160:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     164:	0b3a0e03 	bleq	e83978 <__bss_end__+0xe79660>
     168:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     16c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     170:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
     174:	03193f01 	tsteq	r9, #1, 30
     178:	3b0b3a0e 	blcc	2ce9b8 <__bss_end__+0x2c46a0>
     17c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     180:	01193c13 	tsteq	r9, r3, lsl ip
     184:	1f000013 	svcne	0x00000013
     188:	00000018 	andeq	r0, r0, r8, lsl r0
     18c:	3f002e20 	svccc	0x00002e20
     190:	3a0e0319 	bcc	380dfc <__bss_end__+0x376ae4>
     194:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     198:	00193c19 	andseq	r3, r9, r9, lsl ip
     19c:	012e2100 	teqeq	lr, r0, lsl #2
     1a0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     1a4:	0b3b0b3a 	bleq	ec2e94 <__bss_end__+0xeb8b7c>
     1a8:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     1ac:	00001301 	andeq	r1, r0, r1, lsl #6
     1b0:	01110100 	tsteq	r1, r0, lsl #2
     1b4:	0b130e25 	bleq	4c3a50 <__bss_end__+0x4b9738>
     1b8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     1bc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     1c0:	00001710 	andeq	r1, r0, r0, lsl r7
     1c4:	0b002402 	bleq	91d4 <va_printk+0x264>
     1c8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     1cc:	03000008 	movweq	r0, #8
     1d0:	0b0b0024 	bleq	2c0268 <__bss_end__+0x2b5f50>
     1d4:	0e030b3e 	vmoveq.16	d3[0], r0
     1d8:	16040000 	strne	r0, [r4], -r0
     1dc:	3a0e0300 	bcc	380de4 <__bss_end__+0x376acc>
     1e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     1e4:	05000013 	streq	r0, [r0, #-19]
     1e8:	0b0b000f 	bleq	2c022c <__bss_end__+0x2b5f14>
     1ec:	0f060000 	svceq	0x00060000
     1f0:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     1f4:	07000013 	smladeq	r0, r3, r0, r0
     1f8:	13490026 	movtne	r0, #36902	; 0x9026
     1fc:	01080000 	mrseq	r0, (UNDEF: 8)
     200:	01134901 	tsteq	r3, r1, lsl #18
     204:	09000013 	stmdbeq	r0, {r0, r1, r4}
     208:	13490021 	movtne	r0, #36897	; 0x9021
     20c:	00000b2f 	andeq	r0, r0, pc, lsr #22
     210:	0301130a 	movweq	r1, #4874	; 0x130a
     214:	3a050b0e 	bcc	142e54 <__bss_end__+0x138b3c>
     218:	010b3b0b 	tsteq	fp, fp, lsl #22
     21c:	0b000013 	bleq	270 <_start-0x7d90>
     220:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     224:	0b3b0b3a 	bleq	ec2f14 <__bss_end__+0xeb8bfc>
     228:	0b381349 	bleq	e04f54 <__bss_end__+0xdfac3c>
     22c:	0d0c0000 	stceq	0, cr0, [ip, #-0]
     230:	3a080300 	bcc	200e38 <__bss_end__+0x1f6b20>
     234:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     238:	000b3813 	andeq	r3, fp, r3, lsl r8
     23c:	01150d00 	tsteq	r5, r0, lsl #26
     240:	13011927 	movwne	r1, #6439	; 0x1927
     244:	050e0000 	streq	r0, [lr, #-0]
     248:	00134900 	andseq	r4, r3, r0, lsl #18
     24c:	00210f00 	eoreq	r0, r1, r0, lsl #30
     250:	052f1349 	streq	r1, [pc, #-841]!	; ffffff0f <__bss_end__+0xffff5bf7>
     254:	13100000 	tstne	r0, #0
     258:	0b080301 	bleq	200e64 <__bss_end__+0x1f6b4c>
     25c:	3b0b3a0b 	blcc	2cea90 <__bss_end__+0x2c4778>
     260:	0013010b 	andseq	r0, r3, fp, lsl #2
     264:	00161100 	andseq	r1, r6, r0, lsl #2
     268:	0b3a0803 	bleq	e8227c <__bss_end__+0xe77f64>
     26c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     270:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
     274:	3a0e0301 	bcc	380e80 <__bss_end__+0x376b68>
     278:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     27c:	11134919 	tstne	r3, r9, lsl r9
     280:	40061201 	andmi	r1, r6, r1, lsl #4
     284:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     288:	00001301 	andeq	r1, r0, r1, lsl #6
     28c:	03000513 	movweq	r0, #1299	; 0x513
     290:	3b0b3a08 	blcc	2ceab8 <__bss_end__+0x2c47a0>
     294:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     298:	14000017 	strne	r0, [r0], #-23
     29c:	0e03012e 	adfeqsp	f0, f3, #0.5
     2a0:	0b3b0b3a 	bleq	ec2f90 <__bss_end__+0xeb8c78>
     2a4:	01111927 	tsteq	r1, r7, lsr #18
     2a8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     2ac:	01194297 			; <UNDEFINED> instruction: 0x01194297
     2b0:	15000013 	strne	r0, [r0, #-19]
     2b4:	08030005 	stmdaeq	r3, {r0, r2}
     2b8:	0b3b0b3a 	bleq	ec2fa8 <__bss_end__+0xeb8c90>
     2bc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     2c0:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
     2c4:	11010182 	smlabbne	r1, r2, r1, r0
     2c8:	00133101 	andseq	r3, r3, r1, lsl #2
     2cc:	828a1700 	addhi	r1, sl, #0, 14
     2d0:	18020001 	stmdane	r2, {r0}
     2d4:	00184291 	mulseq	r8, r1, r2
     2d8:	00341800 	eorseq	r1, r4, r0, lsl #16
     2dc:	13490e03 	movtne	r0, #40451	; 0x9e03
     2e0:	18021934 	stmdane	r2, {r2, r4, r5, r8, fp, ip}
     2e4:	89190000 	ldmdbhi	r9, {}	; <UNPREDICTABLE>
     2e8:	11010182 	smlabbne	r1, r2, r1, r0
     2ec:	01133101 	tsteq	r3, r1, lsl #2
     2f0:	1a000013 	bne	344 <_start-0x7cbc>
     2f4:	00018289 	andeq	r8, r1, r9, lsl #5
     2f8:	13310111 	teqne	r1, #1073741828	; 0x40000004
     2fc:	341b0000 	ldrcc	r0, [fp], #-0
     300:	3a080300 	bcc	200f08 <__bss_end__+0x1f6bf0>
     304:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     308:	00170213 	andseq	r0, r7, r3, lsl r2
     30c:	002e1c00 	eoreq	r1, lr, r0, lsl #24
     310:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     314:	0b3b0b3a 	bleq	ec3004 <__bss_end__+0xeb8cec>
     318:	13491927 	movtne	r1, #39207	; 0x9927
     31c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     320:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     324:	1d000019 	stcne	0, cr0, [r0, #-100]	; 0xffffff9c
     328:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     32c:	0b3a0e03 	bleq	e83b40 <__bss_end__+0xe79828>
     330:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     334:	01111349 	tsteq	r1, r9, asr #6
     338:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     33c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     340:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     344:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     348:	0b3b0b3a 	bleq	ec3038 <__bss_end__+0xeb8d20>
     34c:	17021349 	strne	r1, [r2, -r9, asr #6]
     350:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
     354:	03193f00 	tsteq	r9, #0, 30
     358:	3b0b3a0e 	blcc	2ceb98 <__bss_end__+0x2c4880>
     35c:	3c19270b 	ldccc	7, cr2, [r9], {11}
     360:	20000019 	andcs	r0, r0, r9, lsl r0
     364:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     368:	0b3a0e03 	bleq	e83b7c <__bss_end__+0xe79864>
     36c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     370:	06120111 			; <UNDEFINED> instruction: 0x06120111
     374:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     378:	00130119 	andseq	r0, r3, r9, lsl r1
     37c:	00342100 	eorseq	r2, r4, r0, lsl #2
     380:	0b3a0e03 	bleq	e83b94 <__bss_end__+0xe7987c>
     384:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     388:	00001802 	andeq	r1, r0, r2, lsl #16
     38c:	03003422 	movweq	r3, #1058	; 0x422
     390:	3b0b3a0e 	blcc	2cebd0 <__bss_end__+0x2c48b8>
     394:	0013490b 	andseq	r4, r3, fp, lsl #18
     398:	010b2300 	mrseq	r2, (UNDEF: 59)
     39c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     3a0:	00001301 	andeq	r1, r0, r1, lsl #6
     3a4:	03003424 	movweq	r3, #1060	; 0x424
     3a8:	3b0b3a0e 	blcc	2cebe8 <__bss_end__+0x2c48d0>
     3ac:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     3b0:	25000017 	strcs	r0, [r0, #-23]
     3b4:	08030034 	stmdaeq	r3, {r2, r4, r5}
     3b8:	0b3b0b3a 	bleq	ec30a8 <__bss_end__+0xeb8d90>
     3bc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     3c0:	2e260000 	cdpcs	0, 2, cr0, cr6, cr0, {0}
     3c4:	03193f01 	tsteq	r9, #1, 30
     3c8:	3b0b3a0e 	blcc	2cec08 <__bss_end__+0x2c48f0>
     3cc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     3d0:	01193c13 	tsteq	r9, r3, lsl ip
     3d4:	27000013 	smladcs	r0, r3, r0, r0
     3d8:	00000018 	andeq	r0, r0, r8, lsl r0
     3dc:	3f012e28 	svccc	0x00012e28
     3e0:	3a0e0319 	bcc	38104c <__bss_end__+0x376d34>
     3e4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     3e8:	01193c19 	tsteq	r9, r9, lsl ip
     3ec:	00000013 	andeq	r0, r0, r3, lsl r0
     3f0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     3f4:	030b130e 	movweq	r1, #45838	; 0xb30e
     3f8:	110e1b0e 	tstne	lr, lr, lsl #22
     3fc:	10061201 	andne	r1, r6, r1, lsl #4
     400:	02000017 	andeq	r0, r0, #23
     404:	0b0b0024 	bleq	2c049c <__bss_end__+0x2b6184>
     408:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     40c:	16030000 	strne	r0, [r3], -r0
     410:	3a0e0300 	bcc	381018 <__bss_end__+0x376d00>
     414:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     418:	04000013 	streq	r0, [r0], #-19
     41c:	0b0b0024 	bleq	2c04b4 <__bss_end__+0x2b619c>
     420:	0e030b3e 	vmoveq.16	d3[0], r0
     424:	0f050000 	svceq	0x00050000
     428:	000b0b00 	andeq	r0, fp, r0, lsl #22
     42c:	000f0600 	andeq	r0, pc, r0, lsl #12
     430:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     434:	26070000 	strcs	r0, [r7], -r0
     438:	00134900 	andseq	r4, r3, r0, lsl #18
     43c:	01010800 	tsteq	r1, r0, lsl #16
     440:	13011349 	movwne	r1, #4937	; 0x1349
     444:	21090000 	mrscs	r0, (UNDEF: 9)
     448:	2f134900 	svccs	0x00134900
     44c:	0a00000b 	beq	480 <_start-0x7b80>
     450:	050b0113 	streq	r0, [fp, #-275]	; 0x113
     454:	0b3b0b3a 	bleq	ec3144 <__bss_end__+0xeb8e2c>
     458:	00001301 	andeq	r1, r0, r1, lsl #6
     45c:	03000d0b 	movweq	r0, #3339	; 0xd0b
     460:	3b0b3a0e 	blcc	2ceca0 <__bss_end__+0x2c4988>
     464:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     468:	0c00000b 	stceq	0, cr0, [r0], {11}
     46c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     470:	0b3b0b3a 	bleq	ec3160 <__bss_end__+0xeb8e48>
     474:	05381349 	ldreq	r1, [r8, #-841]!	; 0x349
     478:	0d0d0000 	stceq	0, cr0, [sp, #-0]
     47c:	3a0e0300 	bcc	381084 <__bss_end__+0x376d6c>
     480:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     484:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
     488:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
     48c:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
     490:	13490021 	movtne	r0, #36897	; 0x9021
     494:	0000052f 	andeq	r0, r0, pc, lsr #10
     498:	4900350f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sl, ip, sp}
     49c:	10000013 	andne	r0, r0, r3, lsl r0
     4a0:	0e03012e 	adfeqsp	f0, f3, #0.5
     4a4:	0b3b0b3a 	bleq	ec3194 <__bss_end__+0xeb8e7c>
     4a8:	13491927 	movtne	r1, #39207	; 0x9927
     4ac:	13010b20 	movwne	r0, #6944	; 0x1b20
     4b0:	05110000 	ldreq	r0, [r1, #-0]
     4b4:	3a080300 	bcc	2010bc <__bss_end__+0x1f6da4>
     4b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4bc:	12000013 	andne	r0, r0, #19
     4c0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     4c4:	0b3b0b3a 	bleq	ec31b4 <__bss_end__+0xeb8e9c>
     4c8:	00001349 	andeq	r1, r0, r9, asr #6
     4cc:	3f012e13 	svccc	0x00012e13
     4d0:	3a0e0319 	bcc	38113c <__bss_end__+0x376e24>
     4d4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     4d8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     4dc:	97184006 	ldrls	r4, [r8, -r6]
     4e0:	13011942 	movwne	r1, #6466	; 0x1942
     4e4:	05140000 	ldreq	r0, [r4, #-0]
     4e8:	3a080300 	bcc	2010f0 <__bss_end__+0x1f6dd8>
     4ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4f0:	00170213 	andseq	r0, r7, r3, lsl r2
     4f4:	00341500 	eorseq	r1, r4, r0, lsl #10
     4f8:	13490e03 	movtne	r0, #40451	; 0x9e03
     4fc:	18021934 	stmdane	r2, {r2, r4, r5, r8, fp, ip}
     500:	1d160000 	ldcne	0, cr0, [r6, #-0]
     504:	11133101 	tstne	r3, r1, lsl #2
     508:	58061201 	stmdapl	r6, {r0, r9, ip}
     50c:	010b590b 	tsteq	fp, fp, lsl #18
     510:	17000013 	smladne	r0, r3, r0, r0
     514:	13310005 	teqne	r1, #5
     518:	00001702 	andeq	r1, r0, r2, lsl #14
     51c:	01828918 	orreq	r8, r2, r8, lsl r9
     520:	31011101 	tstcc	r1, r1, lsl #2
     524:	19000013 	stmdbne	r0, {r0, r1, r4}
     528:	0001828a 	andeq	r8, r1, sl, lsl #5
     52c:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     530:	1a000018 	bne	598 <_start-0x7a68>
     534:	01018289 	smlabbeq	r1, r9, r2, r8
     538:	13310111 	teqne	r1, #1073741828	; 0x40000004
     53c:	00001301 	andeq	r1, r0, r1, lsl #6
     540:	0182891b 	orreq	r8, r2, fp, lsl r9
     544:	31011100 	mrscc	r1, (UNDEF: 17)
     548:	1c000013 	stcne	0, cr0, [r0], {19}
     54c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     550:	0b3b0b3a 	bleq	ec3240 <__bss_end__+0xeb8f28>
     554:	17021349 	strne	r1, [r2, -r9, asr #6]
     558:	341d0000 	ldrcc	r0, [sp], #-0
     55c:	3a080300 	bcc	201164 <__bss_end__+0x1f6e4c>
     560:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     564:	00170213 	andseq	r0, r7, r3, lsl r2
     568:	00051e00 	andeq	r1, r5, r0, lsl #28
     56c:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
     570:	1d1f0000 	ldcne	0, cr0, [pc, #-0]	; 578 <_start-0x7a88>
     574:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     578:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
     57c:	010b590b 	tsteq	fp, fp, lsl #18
     580:	20000013 	andcs	r0, r0, r3, lsl r0
     584:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
     588:	34210000 	strtcc	r0, [r1], #-0
     58c:	02133100 	andseq	r3, r3, #0, 2
     590:	22000017 	andcs	r0, r0, #23
     594:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     598:	06120111 			; <UNDEFINED> instruction: 0x06120111
     59c:	0b590b58 	bleq	1643304 <__bss_end__+0x1638fec>
     5a0:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
     5a4:	03193f01 	tsteq	r9, #1, 30
     5a8:	3b0b3a0e 	blcc	2cede8 <__bss_end__+0x2c4ad0>
     5ac:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     5b0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     5b4:	97184006 	ldrls	r4, [r8, -r6]
     5b8:	13011942 	movwne	r1, #6466	; 0x1942
     5bc:	0b240000 	bleq	9005c4 <__bss_end__+0x8f62ac>
     5c0:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     5c4:	25000006 	strcs	r0, [r0, #-6]
     5c8:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     5cc:	17550152 			; <UNDEFINED> instruction: 0x17550152
     5d0:	0b590b58 	bleq	1643338 <__bss_end__+0x1639020>
     5d4:	34260000 	strtcc	r0, [r6], #-0
     5d8:	3a080300 	bcc	2011e0 <__bss_end__+0x1f6ec8>
     5dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     5e0:	00180213 	andseq	r0, r8, r3, lsl r2
     5e4:	00342700 	eorseq	r2, r4, r0, lsl #14
     5e8:	0b3a0e03 	bleq	e83dfc <__bss_end__+0xe79ae4>
     5ec:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     5f0:	00001702 	andeq	r1, r0, r2, lsl #14
     5f4:	11010b28 	tstne	r1, r8, lsr #22
     5f8:	01061201 	tsteq	r6, r1, lsl #4
     5fc:	29000013 	stmdbcs	r0, {r0, r1, r4}
     600:	13310034 	teqne	r1, #52	; 0x34
     604:	00001802 	andeq	r1, r0, r2, lsl #16
     608:	3f012e2a 	svccc	0x00012e2a
     60c:	3a0e0319 	bcc	381278 <__bss_end__+0x376f60>
     610:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     614:	3c134919 	ldccc	9, cr4, [r3], {25}
     618:	00130119 	andseq	r0, r3, r9, lsl r1
     61c:	00052b00 	andeq	r2, r5, r0, lsl #22
     620:	00001349 	andeq	r1, r0, r9, asr #6
     624:	0000182c 	andeq	r1, r0, ip, lsr #16
     628:	002e2d00 	eoreq	r2, lr, r0, lsl #26
     62c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     630:	0b3b0b3a 	bleq	ec3320 <__bss_end__+0xeb9008>
     634:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     638:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
     63c:	03193f01 	tsteq	r9, #1, 30
     640:	3b0b3a0e 	blcc	2cee80 <__bss_end__+0x2c4b68>
     644:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     648:	00193c13 	andseq	r3, r9, r3, lsl ip
     64c:	11010000 	mrsne	r0, (UNDEF: 1)
     650:	130e2501 	movwne	r2, #58625	; 0xe501
     654:	1b0e030b 	blne	381288 <__bss_end__+0x376f70>
     658:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     65c:	00171006 	andseq	r1, r7, r6
     660:	00240200 	eoreq	r0, r4, r0, lsl #4
     664:	0b3e0b0b 	bleq	f83298 <__bss_end__+0xf78f80>
     668:	00000e03 	andeq	r0, r0, r3, lsl #28
     66c:	0b002403 	bleq	9680 <kmalloc_aligned>
     670:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     674:	04000008 	streq	r0, [r0], #-8
     678:	0b0b000f 	bleq	2c06bc <__bss_end__+0x2b63a4>
     67c:	0f050000 	svceq	0x00050000
     680:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     684:	06000013 			; <UNDEFINED> instruction: 0x06000013
     688:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     68c:	0b3b0b3a 	bleq	ec337c <__bss_end__+0xeb9064>
     690:	00001349 	andeq	r1, r0, r9, asr #6
     694:	3f012e07 	svccc	0x00012e07
     698:	3a0e0319 	bcc	381304 <__bss_end__+0x376fec>
     69c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     6a0:	11134919 	tstne	r3, r9, lsl r9
     6a4:	40061201 	andmi	r1, r6, r1, lsl #4
     6a8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     6ac:	05080000 	streq	r0, [r8, #-0]
     6b0:	3a080300 	bcc	2012b8 <__bss_end__+0x1f6fa0>
     6b4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     6b8:	00180213 	andseq	r0, r8, r3, lsl r2
     6bc:	00050900 	andeq	r0, r5, r0, lsl #18
     6c0:	0b3a0803 	bleq	e826d4 <__bss_end__+0xe783bc>
     6c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     6c8:	00001702 	andeq	r1, r0, r2, lsl #14
     6cc:	0300340a 	movweq	r3, #1034	; 0x40a
     6d0:	3b0b3a08 	blcc	2ceef8 <__bss_end__+0x2c4be0>
     6d4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     6d8:	0b000017 	bleq	73c <_start-0x78c4>
     6dc:	08030034 	stmdaeq	r3, {r2, r4, r5}
     6e0:	0b3b0b3a 	bleq	ec33d0 <__bss_end__+0xeb90b8>
     6e4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     6e8:	01000000 	mrseq	r0, (UNDEF: 0)
     6ec:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     6f0:	0e030b13 	vmoveq.32	d3[0], r0
     6f4:	01110e1b 	tsteq	r1, fp, lsl lr
     6f8:	17100612 			; <UNDEFINED> instruction: 0x17100612
     6fc:	16020000 	strne	r0, [r2], -r0
     700:	3a0e0300 	bcc	381308 <__bss_end__+0x376ff0>
     704:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     708:	03000013 	movweq	r0, #19
     70c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     710:	0b3a0b0b 	bleq	e83344 <__bss_end__+0xe7902c>
     714:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     718:	0d040000 	stceq	0, cr0, [r4, #-0]
     71c:	490e0300 	stmdbmi	lr, {r8, r9}
     720:	340b3813 	strcc	r3, [fp], #-2067	; 0x813
     724:	05000019 	streq	r0, [r0, #-25]
     728:	0b0b000f 	bleq	2c076c <__bss_end__+0x2b6454>
     72c:	24060000 	strcs	r0, [r6], #-0
     730:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     734:	0008030b 	andeq	r0, r8, fp, lsl #6
     738:	00240700 	eoreq	r0, r4, r0, lsl #14
     73c:	0b3e0b0b 	bleq	f83370 <__bss_end__+0xf79058>
     740:	00000e03 	andeq	r0, r0, r3, lsl #28
     744:	0b000f08 	bleq	436c <_start-0x3c94>
     748:	0013490b 	andseq	r4, r3, fp, lsl #18
     74c:	00260900 	eoreq	r0, r6, r0, lsl #18
     750:	00001349 	andeq	r1, r0, r9, asr #6
     754:	3f012e0a 	svccc	0x00012e0a
     758:	3a0e0319 	bcc	3813c4 <__bss_end__+0x3770ac>
     75c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     760:	11134919 	tstne	r3, r9, lsl r9
     764:	40061201 	andmi	r1, r6, r1, lsl #4
     768:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     76c:	00001301 	andeq	r1, r0, r1, lsl #6
     770:	0300050b 	movweq	r0, #1291	; 0x50b
     774:	3b0b3a08 	blcc	2cef9c <__bss_end__+0x2c4c84>
     778:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     77c:	0c000018 	stceq	0, cr0, [r0], {24}
     780:	00000018 	andeq	r0, r0, r8, lsl r0
     784:	0300340d 	movweq	r3, #1037	; 0x40d
     788:	3b0b3a08 	blcc	2cefb0 <__bss_end__+0x2c4c98>
     78c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     790:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
     794:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     798:	0b3b0b3a 	bleq	ec3488 <__bss_end__+0xeb9170>
     79c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     7a0:	340f0000 	strcc	r0, [pc], #-0	; 7a8 <_start-0x7858>
     7a4:	3a080300 	bcc	2013ac <__bss_end__+0x1f7094>
     7a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     7ac:	00170213 	andseq	r0, r7, r3, lsl r2
     7b0:	82891000 	addhi	r1, r9, #0
     7b4:	01110101 	tsteq	r1, r1, lsl #2
     7b8:	13011331 	movwne	r1, #4913	; 0x1331
     7bc:	8a110000 	bhi	4407c4 <__bss_end__+0x4364ac>
     7c0:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     7c4:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     7c8:	89120000 	ldmdbhi	r2, {}	; <UNPREDICTABLE>
     7cc:	11010182 	smlabbne	r1, r2, r1, r0
     7d0:	13000001 	movwne	r0, #1
     7d4:	13490101 	movtne	r0, #37121	; 0x9101
     7d8:	00001301 	andeq	r1, r0, r1, lsl #6
     7dc:	49002114 	stmdbmi	r0, {r2, r4, r8, sp}
     7e0:	00052f13 	andeq	r2, r5, r3, lsl pc
     7e4:	01151500 	tsteq	r5, r0, lsl #10
     7e8:	13491927 	movtne	r1, #39207	; 0x9927
     7ec:	00001301 	andeq	r1, r0, r1, lsl #6
     7f0:	49000516 	stmdbmi	r0, {r1, r2, r4, r8, sl}
     7f4:	17000013 	smladne	r0, r3, r0, r0
     7f8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     7fc:	0b3b0b3a 	bleq	ec34ec <__bss_end__+0xeb91d4>
     800:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     804:	0000193c 	andeq	r1, r0, ip, lsr r9
     808:	3f012e18 	svccc	0x00012e18
     80c:	3a0e0319 	bcc	381478 <__bss_end__+0x377160>
     810:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     814:	3c134919 	ldccc	9, cr4, [r3], {25}
     818:	00000019 	andeq	r0, r0, r9, lsl r0
     81c:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     820:	030b130e 	movweq	r1, #45838	; 0xb30e
     824:	110e1b0e 	tstne	lr, lr, lsl #22
     828:	10061201 	andne	r1, r6, r1, lsl #4
     82c:	02000017 	andeq	r0, r0, #23
     830:	0b0b0024 	bleq	2c08c8 <__bss_end__+0x2b65b0>
     834:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     838:	24030000 	strcs	r0, [r3], #-0
     83c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     840:	000e030b 	andeq	r0, lr, fp, lsl #6
     844:	000f0400 	andeq	r0, pc, r0, lsl #8
     848:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     84c:	26050000 	strcs	r0, [r5], -r0
     850:	00134900 	andseq	r4, r3, r0, lsl #18
     854:	012e0600 	teqeq	lr, r0, lsl #12
     858:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     85c:	0b3b0b3a 	bleq	ec354c <__bss_end__+0xeb9234>
     860:	13491927 	movtne	r1, #39207	; 0x9927
     864:	06120111 			; <UNDEFINED> instruction: 0x06120111
     868:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     86c:	00130119 	andseq	r0, r3, r9, lsl r1
     870:	00050700 	andeq	r0, r5, r0, lsl #14
     874:	0b3a0803 	bleq	e82888 <__bss_end__+0xe78570>
     878:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     87c:	00001702 	andeq	r1, r0, r2, lsl #14
     880:	27011508 	strcs	r1, [r1, -r8, lsl #10]
     884:	01134919 	tsteq	r3, r9, lsl r9
     888:	09000013 	stmdbeq	r0, {r0, r1, r4}
     88c:	13490005 	movtne	r0, #36869	; 0x9005
     890:	340a0000 	strcc	r0, [sl], #-0
     894:	3a0e0300 	bcc	38149c <__bss_end__+0x377184>
     898:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     89c:	3c193f13 	ldccc	15, cr3, [r9], {19}
     8a0:	0b000019 	bleq	90c <_start-0x76f4>
     8a4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     8a8:	0b3b0b3a 	bleq	ec3598 <__bss_end__+0xeb9280>
     8ac:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     8b0:	00001802 	andeq	r1, r0, r2, lsl #16
     8b4:	01110100 	tsteq	r1, r0, lsl #2
     8b8:	0b130e25 	bleq	4c4154 <__bss_end__+0x4b9e3c>
     8bc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     8c0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     8c4:	00001710 	andeq	r1, r0, r0, lsl r7
     8c8:	0b002402 	bleq	98d8 <__FUNCTION__.4172+0x100>
     8cc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     8d0:	03000008 	movweq	r0, #8
     8d4:	0b0b0024 	bleq	2c096c <__bss_end__+0x2b6654>
     8d8:	0e030b3e 	vmoveq.16	d3[0], r0
     8dc:	0f040000 	svceq	0x00040000
     8e0:	000b0b00 	andeq	r0, fp, r0, lsl #22
     8e4:	000f0500 	andeq	r0, pc, r0, lsl #10
     8e8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     8ec:	26060000 	strcs	r0, [r6], -r0
     8f0:	00134900 	andseq	r4, r3, r0, lsl #18
     8f4:	00160700 	andseq	r0, r6, r0, lsl #14
     8f8:	0b3a0e03 	bleq	e8410c <__bss_end__+0xe79df4>
     8fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     900:	13080000 	movwne	r0, #32768	; 0x8000
     904:	0b0e0301 	bleq	381510 <__bss_end__+0x3771f8>
     908:	3b0b3a0b 	blcc	2cf13c <__bss_end__+0x2c4e24>
     90c:	0013010b 	andseq	r0, r3, fp, lsl #2
     910:	000d0900 	andeq	r0, sp, r0, lsl #18
     914:	13490e03 	movtne	r0, #40451	; 0x9e03
     918:	19340b38 	ldmdbne	r4!, {r3, r4, r5, r8, r9, fp}
     91c:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
     920:	3a0e0301 	bcc	38152c <__bss_end__+0x377214>
     924:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     928:	11134919 	tstne	r3, r9, lsl r9
     92c:	40061201 	andmi	r1, r6, r1, lsl #4
     930:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     934:	00001301 	andeq	r1, r0, r1, lsl #6
     938:	0300050b 	movweq	r0, #1291	; 0x50b
     93c:	3b0b3a08 	blcc	2cf164 <__bss_end__+0x2c4e4c>
     940:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     944:	0c000017 	stceq	0, cr0, [r0], {23}
     948:	0803012e 	stmdaeq	r3, {r1, r2, r3, r5, r8}
     94c:	0b3b0b3a 	bleq	ec363c <__bss_end__+0xeb9324>
     950:	13491927 	movtne	r1, #39207	; 0x9927
     954:	06120111 			; <UNDEFINED> instruction: 0x06120111
     958:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     95c:	00130119 	andseq	r0, r3, r9, lsl r1
     960:	00050d00 	andeq	r0, r5, r0, lsl #26
     964:	0b3a0e03 	bleq	e84178 <__bss_end__+0xe79e60>
     968:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     96c:	00001702 	andeq	r1, r0, r2, lsl #14
     970:	0300050e 	movweq	r0, #1294	; 0x50e
     974:	3b0b3a0e 	blcc	2cf1b4 <__bss_end__+0x2c4e9c>
     978:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     97c:	0f000018 	svceq	0x00000018
     980:	08030034 	stmdaeq	r3, {r2, r4, r5}
     984:	0b3b0b3a 	bleq	ec3674 <__bss_end__+0xeb935c>
     988:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     98c:	34100000 	ldrcc	r0, [r0], #-0
     990:	3a080300 	bcc	201598 <__bss_end__+0x1f7280>
     994:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     998:	00170213 	andseq	r0, r7, r3, lsl r2
     99c:	00341100 	eorseq	r1, r4, r0, lsl #2
     9a0:	13490e03 	movtne	r0, #40451	; 0x9e03
     9a4:	18021934 	stmdane	r2, {r2, r4, r5, r8, fp, ip}
     9a8:	0b120000 	bleq	4809b0 <__bss_end__+0x476698>
     9ac:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     9b0:	00130106 	andseq	r0, r3, r6, lsl #2
     9b4:	00341300 	eorseq	r1, r4, r0, lsl #6
     9b8:	0b3a0e03 	bleq	e841cc <__bss_end__+0xe79eb4>
     9bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     9c0:	00001702 	andeq	r1, r0, r2, lsl #14
     9c4:	01828914 	orreq	r8, r2, r4, lsl r9
     9c8:	31011101 	tstcc	r1, r1, lsl #2
     9cc:	00130113 	andseq	r0, r3, r3, lsl r1
     9d0:	828a1500 	addhi	r1, sl, #0, 10
     9d4:	18020001 	stmdane	r2, {r0}
     9d8:	00184291 	mulseq	r8, r1, r2
     9dc:	82891600 	addhi	r1, r9, #0, 12
     9e0:	01110001 	tsteq	r1, r1
     9e4:	00001331 	andeq	r1, r0, r1, lsr r3
     9e8:	01828917 	orreq	r8, r2, r7, lsl r9
     9ec:	31011101 	tstcc	r1, r1, lsl #2
     9f0:	18000013 	stmdane	r0, {r0, r1, r4}
     9f4:	13490101 	movtne	r0, #37121	; 0x9101
     9f8:	00001301 	andeq	r1, r0, r1, lsl #6
     9fc:	49002119 	stmdbmi	r0, {r0, r3, r4, r8, sp}
     a00:	000b2f13 	andeq	r2, fp, r3, lsl pc
     a04:	012e1a00 	teqeq	lr, r0, lsl #20
     a08:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     a0c:	0b3b0b3a 	bleq	ec36fc <__bss_end__+0xeb93e4>
     a10:	01111927 	tsteq	r1, r7, lsr #18
     a14:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a18:	01194297 			; <UNDEFINED> instruction: 0x01194297
     a1c:	1b000013 	blne	a70 <_start-0x7590>
     a20:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     a24:	13011349 	movwne	r1, #4937	; 0x1349
     a28:	051c0000 	ldreq	r0, [ip, #-0]
     a2c:	00134900 	andseq	r4, r3, r0, lsl #18
     a30:	012e1d00 	teqeq	lr, r0, lsl #26
     a34:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     a38:	0b3b0b3a 	bleq	ec3728 <__bss_end__+0xeb9410>
     a3c:	13491927 	movtne	r1, #39207	; 0x9927
     a40:	06120111 			; <UNDEFINED> instruction: 0x06120111
     a44:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     a48:	00130119 	andseq	r0, r3, r9, lsl r1
     a4c:	010b1e00 	tsteq	fp, r0, lsl #28
     a50:	06120111 			; <UNDEFINED> instruction: 0x06120111
     a54:	341f0000 	ldrcc	r0, [pc], #-0	; a5c <_start-0x75a4>
     a58:	3a0e0300 	bcc	381660 <__bss_end__+0x377348>
     a5c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a60:	3c193f13 	ldccc	15, cr3, [r9], {19}
     a64:	20000019 	andcs	r0, r0, r9, lsl r0
     a68:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     a6c:	0b3a0e03 	bleq	e84280 <__bss_end__+0xe79f68>
     a70:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     a74:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     a78:	00001301 	andeq	r1, r0, r1, lsl #6
     a7c:	00001821 	andeq	r1, r0, r1, lsr #16
     a80:	002e2200 	eoreq	r2, lr, r0, lsl #4
     a84:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     a88:	0b3b0b3a 	bleq	ec3778 <__bss_end__+0xeb9460>
     a8c:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     a90:	01000000 	mrseq	r0, (UNDEF: 0)
     a94:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     a98:	0e030b13 	vmoveq.32	d3[0], r0
     a9c:	01110e1b 	tsteq	r1, fp, lsl lr
     aa0:	17100612 			; <UNDEFINED> instruction: 0x17100612
     aa4:	24020000 	strcs	r0, [r2], #-0
     aa8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     aac:	0008030b 	andeq	r0, r8, fp, lsl #6
     ab0:	00240300 	eoreq	r0, r4, r0, lsl #6
     ab4:	0b3e0b0b 	bleq	f836e8 <__bss_end__+0xf793d0>
     ab8:	00000e03 	andeq	r0, r0, r3, lsl #28
     abc:	0b000f04 	bleq	46d4 <_start-0x392c>
     ac0:	0013490b 	andseq	r4, r3, fp, lsl #18
     ac4:	00260500 	eoreq	r0, r6, r0, lsl #10
     ac8:	00001349 	andeq	r1, r0, r9, asr #6
     acc:	3f012e06 	svccc	0x00012e06
     ad0:	3a0e0319 	bcc	38173c <__bss_end__+0x377424>
     ad4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     ad8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     adc:	97184006 	ldrls	r4, [r8, -r6]
     ae0:	13011942 	movwne	r1, #6466	; 0x1942
     ae4:	89070000 	stmdbhi	r7, {}	; <UNPREDICTABLE>
     ae8:	11010182 	smlabbne	r1, r2, r1, r0
     aec:	00130101 	andseq	r0, r3, r1, lsl #2
     af0:	828a0800 	addhi	r0, sl, #0, 16
     af4:	18020001 	stmdane	r2, {r0}
     af8:	00184291 	mulseq	r8, r1, r2
     afc:	82890900 	addhi	r0, r9, #0, 18
     b00:	01110101 	tsteq	r1, r1, lsl #2
     b04:	13011331 	movwne	r1, #4913	; 0x1331
     b08:	890a0000 	stmdbhi	sl, {}	; <UNPREDICTABLE>
     b0c:	11000182 	smlabbne	r0, r2, r1, r0
     b10:	00133101 	andseq	r3, r3, r1, lsl #2
     b14:	01150b00 	tsteq	r5, r0, lsl #22
     b18:	13491927 	movtne	r1, #39207	; 0x9927
     b1c:	00001301 	andeq	r1, r0, r1, lsl #6
     b20:	4900050c 	stmdbmi	r0, {r2, r3, r8, sl}
     b24:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     b28:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     b2c:	0b3b0b3a 	bleq	ec381c <__bss_end__+0xeb9504>
     b30:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     b34:	0000193c 	andeq	r1, r0, ip, lsr r9
     b38:	3f012e0e 	svccc	0x00012e0e
     b3c:	3a0e0319 	bcc	3817a8 <__bss_end__+0x377490>
     b40:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     b44:	01193c19 	tsteq	r9, r9, lsl ip
     b48:	0f000013 	svceq	0x00000013
     b4c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     b50:	0b3a0e03 	bleq	e84364 <__bss_end__+0xe7a04c>
     b54:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     b58:	0000193c 	andeq	r1, r0, ip, lsr r9
     b5c:	01110100 	tsteq	r1, r0, lsl #2
     b60:	0b130e25 	bleq	4c43fc <__bss_end__+0x4ba0e4>
     b64:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     b68:	06120111 			; <UNDEFINED> instruction: 0x06120111
     b6c:	00001710 	andeq	r1, r0, r0, lsl r7
     b70:	0b002402 	bleq	9b80 <__FUNCTION__.4250+0x34>
     b74:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     b78:	03000008 	movweq	r0, #8
     b7c:	0b0b0024 	bleq	2c0c14 <__bss_end__+0x2b68fc>
     b80:	0e030b3e 	vmoveq.16	d3[0], r0
     b84:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
     b88:	03193f01 	tsteq	r9, #1, 30
     b8c:	3b0b3a0e 	blcc	2cf3cc <__bss_end__+0x2c50b4>
     b90:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
     b94:	97184006 	ldrls	r4, [r8, -r6]
     b98:	13011942 	movwne	r1, #6466	; 0x1942
     b9c:	34050000 	strcc	r0, [r5], #-0
     ba0:	3a0e0300 	bcc	3817a8 <__bss_end__+0x377490>
     ba4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ba8:	3c193f13 	ldccc	15, cr3, [r9], {19}
     bac:	06000019 			; <UNDEFINED> instruction: 0x06000019
     bb0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     bb4:	0b3a0e03 	bleq	e843c8 <__bss_end__+0xe7a0b0>
     bb8:	193c0b3b 	ldmdbne	ip!, {r0, r1, r3, r4, r5, r8, r9, fp}
     bbc:	00001301 	andeq	r1, r0, r1, lsl #6
     bc0:	00001807 	andeq	r1, r0, r7, lsl #16
     bc4:	00340800 	eorseq	r0, r4, r0, lsl #16
     bc8:	0b3a0803 	bleq	e82bdc <__bss_end__+0xe788c4>
     bcc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     bd0:	00001702 	andeq	r1, r0, r2, lsl #14
     bd4:	03003409 	movweq	r3, #1033	; 0x409
     bd8:	3b0b3a0e 	blcc	2cf418 <__bss_end__+0x2c5100>
     bdc:	0013490b 	andseq	r4, r3, fp, lsl #18
     be0:	82890a00 	addhi	r0, r9, #0, 20
     be4:	01110001 	tsteq	r1, r1
     be8:	00001331 	andeq	r1, r0, r1, lsr r3
     bec:	0b000f0b 	bleq	4820 <_start-0x37e0>
     bf0:	0013490b 	andseq	r4, r3, fp, lsl #18
     bf4:	002e0c00 	eoreq	r0, lr, r0, lsl #24
     bf8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     bfc:	0b3b0b3a 	bleq	ec38ec <__bss_end__+0xeb95d4>
     c00:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     c04:	01000000 	mrseq	r0, (UNDEF: 0)
     c08:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     c0c:	0e030b13 	vmoveq.32	d3[0], r0
     c10:	17550e1b 	smmlane	r5, fp, lr, r0
     c14:	17100111 			; <UNDEFINED> instruction: 0x17100111
     c18:	24020000 	strcs	r0, [r2], #-0
     c1c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     c20:	0008030b 	andeq	r0, r8, fp, lsl #6
     c24:	00240300 	eoreq	r0, r4, r0, lsl #6
     c28:	0b3e0b0b 	bleq	f8385c <__bss_end__+0xf79544>
     c2c:	00000e03 	andeq	r0, r0, r3, lsl #28
     c30:	3f012e04 	svccc	0x00012e04
     c34:	3a0e0319 	bcc	3818a0 <__bss_end__+0x377588>
     c38:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     c3c:	11134919 	tstne	r3, r9, lsl r9
     c40:	40061201 	andmi	r1, r6, r1, lsl #4
     c44:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     c48:	00001301 	andeq	r1, r0, r1, lsl #6
     c4c:	03003405 	movweq	r3, #1029	; 0x405
     c50:	3b0b3a0e 	blcc	2cf490 <__bss_end__+0x2c5178>
     c54:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     c58:	06000017 			; <UNDEFINED> instruction: 0x06000017
     c5c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     c60:	0b3a0e03 	bleq	e84474 <__bss_end__+0xe7a15c>
     c64:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     c68:	06120111 			; <UNDEFINED> instruction: 0x06120111
     c6c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     c70:	00130119 	andseq	r0, r3, r9, lsl r1
     c74:	00340700 	eorseq	r0, r4, r0, lsl #14
     c78:	0b3a0e03 	bleq	e8448c <__bss_end__+0xe7a174>
     c7c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     c80:	0000061c 	andeq	r0, r0, ip, lsl r6
     c84:	03003408 	movweq	r3, #1032	; 0x408
     c88:	3b0b3a0e 	blcc	2cf4c8 <__bss_end__+0x2c51b0>
     c8c:	1c13490b 	ldcne	9, cr4, [r3], {11}
     c90:	0900000b 	stmdbeq	r0, {r0, r1, r3}
     c94:	00018289 	andeq	r8, r1, r9, lsl #5
     c98:	13310111 	teqne	r1, #1073741828	; 0x40000004
     c9c:	890a0000 	stmdbhi	sl, {}	; <UNPREDICTABLE>
     ca0:	11010182 	smlabbne	r1, r2, r1, r0
     ca4:	01133101 	tsteq	r3, r1, lsl #2
     ca8:	0b000013 	bleq	cfc <_start-0x7304>
     cac:	0001828a 	andeq	r8, r1, sl, lsl #5
     cb0:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     cb4:	0c000018 	stceq	0, cr0, [r0], {24}
     cb8:	01018289 	smlabbeq	r1, r9, r2, r8
     cbc:	13310111 	teqne	r1, #1073741828	; 0x40000004
     cc0:	260d0000 	strcs	r0, [sp], -r0
     cc4:	00134900 	andseq	r4, r3, r0, lsl #18
     cc8:	012e0e00 	teqeq	lr, r0, lsl #28
     ccc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     cd0:	0b3b0b3a 	bleq	ec39c0 <__bss_end__+0xeb96a8>
     cd4:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     cd8:	00001301 	andeq	r1, r0, r1, lsl #6
     cdc:	4900050f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sl}
     ce0:	10000013 	andne	r0, r0, r3, lsl r0
     ce4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     ce8:	0b3a0e03 	bleq	e844fc <__bss_end__+0xe7a1e4>
     cec:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     cf0:	0000193c 	andeq	r1, r0, ip, lsr r9
     cf4:	01110100 	tsteq	r1, r0, lsl #2
     cf8:	0b130e25 	bleq	4c4594 <__bss_end__+0x4ba27c>
     cfc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     d00:	06120111 			; <UNDEFINED> instruction: 0x06120111
     d04:	00001710 	andeq	r1, r0, r0, lsl r7
     d08:	0b002402 	bleq	9d18 <__FUNCTION__.4207+0x40>
     d0c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     d10:	03000008 	movweq	r0, #8
     d14:	0b0b0024 	bleq	2c0dac <__bss_end__+0x2b6a94>
     d18:	0e030b3e 	vmoveq.16	d3[0], r0
     d1c:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
     d20:	03193f01 	tsteq	r9, #1, 30
     d24:	3b0b3a0e 	blcc	2cf564 <__bss_end__+0x2c524c>
     d28:	1119270b 	tstne	r9, fp, lsl #14
     d2c:	40061201 	andmi	r1, r6, r1, lsl #4
     d30:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     d34:	00001301 	andeq	r1, r0, r1, lsl #6
     d38:	03000505 	movweq	r0, #1285	; 0x505
     d3c:	3b0b3a0e 	blcc	2cf57c <__bss_end__+0x2c5264>
     d40:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     d44:	06000017 			; <UNDEFINED> instruction: 0x06000017
     d48:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     d4c:	0b3a0e03 	bleq	e84560 <__bss_end__+0xe7a248>
     d50:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     d54:	01111349 	tsteq	r1, r9, asr #6
     d58:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     d5c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     d60:	07000013 	smladeq	r0, r3, r0, r0
     d64:	01018289 	smlabbeq	r1, r9, r2, r8
     d68:	13310111 	teqne	r1, #1073741828	; 0x40000004
     d6c:	8a080000 	bhi	200d74 <__bss_end__+0x1f6a5c>
     d70:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     d74:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     d78:	05090000 	streq	r0, [r9, #-0]
     d7c:	3a080300 	bcc	201984 <__bss_end__+0x1f766c>
     d80:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d84:	00170213 	andseq	r0, r7, r3, lsl r2
     d88:	00340a00 	eorseq	r0, r4, r0, lsl #20
     d8c:	0b3a0803 	bleq	e82da0 <__bss_end__+0xe78a88>
     d90:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     d94:	00001802 	andeq	r1, r0, r2, lsl #16
     d98:	11010b0b 	tstne	r1, fp, lsl #22
     d9c:	01061201 	tsteq	r6, r1, lsl #4
     da0:	0c000013 	stceq	0, cr0, [r0], {19}
     da4:	08030034 	stmdaeq	r3, {r2, r4, r5}
     da8:	0b3b0b3a 	bleq	ec3a98 <__bss_end__+0xeb9780>
     dac:	17021349 	strne	r1, [r2, -r9, asr #6]
     db0:	890d0000 	stmdbhi	sp, {}	; <UNPREDICTABLE>
     db4:	11000182 	smlabbne	r0, r2, r1, r0
     db8:	00133101 	andseq	r3, r3, r1, lsl #2
     dbc:	012e0e00 	teqeq	lr, r0, lsl #28
     dc0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     dc4:	0b3b0b3a 	bleq	ec3ab4 <__bss_end__+0xeb979c>
     dc8:	13491927 	movtne	r1, #39207	; 0x9927
     dcc:	0000193c 	andeq	r1, r0, ip, lsr r9
     dd0:	4900050f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sl}
     dd4:	00000013 	andeq	r0, r0, r3, lsl r0
     dd8:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     ddc:	030b130e 	movweq	r1, #45838	; 0xb30e
     de0:	110e1b0e 	tstne	lr, lr, lsl #22
     de4:	10061201 	andne	r1, r6, r1, lsl #4
     de8:	02000017 	andeq	r0, r0, #23
     dec:	0b0b0024 	bleq	2c0e84 <__bss_end__+0x2b6b6c>
     df0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     df4:	16030000 	strne	r0, [r3], -r0
     df8:	3a0e0300 	bcc	381a00 <__bss_end__+0x3776e8>
     dfc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e00:	04000013 	streq	r0, [r0], #-19
     e04:	0b0b0024 	bleq	2c0e9c <__bss_end__+0x2b6b84>
     e08:	0e030b3e 	vmoveq.16	d3[0], r0
     e0c:	0f050000 	svceq	0x00050000
     e10:	000b0b00 	andeq	r0, fp, r0, lsl #22
     e14:	000f0600 	andeq	r0, pc, r0, lsl #12
     e18:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     e1c:	26070000 	strcs	r0, [r7], -r0
     e20:	00134900 	andseq	r4, r3, r0, lsl #18
     e24:	01010800 	tsteq	r1, r0, lsl #16
     e28:	13011349 	movwne	r1, #4937	; 0x1349
     e2c:	21090000 	mrscs	r0, (UNDEF: 9)
     e30:	2f134900 	svccs	0x00134900
     e34:	0a00000b 	beq	e68 <_start-0x7198>
     e38:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     e3c:	0b3a0e03 	bleq	e84650 <__bss_end__+0xe7a338>
     e40:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     e44:	01111349 	tsteq	r1, r9, asr #6
     e48:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     e4c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     e50:	0b000013 	bleq	ea4 <_start-0x715c>
     e54:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     e58:	0b3b0b3a 	bleq	ec3b48 <__bss_end__+0xeb9830>
     e5c:	17021349 	strne	r1, [r2, -r9, asr #6]
     e60:	340c0000 	strcc	r0, [ip], #-0
     e64:	490e0300 	stmdbmi	lr, {r8, r9}
     e68:	02193413 	andseq	r3, r9, #318767104	; 0x13000000
     e6c:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
     e70:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     e74:	0b3b0b3a 	bleq	ec3b64 <__bss_end__+0xeb984c>
     e78:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     e7c:	340e0000 	strcc	r0, [lr], #-0
     e80:	3a0e0300 	bcc	381a88 <__bss_end__+0x377770>
     e84:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e88:	00170213 	andseq	r0, r7, r3, lsl r2
     e8c:	82890f00 	addhi	r0, r9, #0, 30
     e90:	01110101 	tsteq	r1, r1, lsl #2
     e94:	13011331 	movwne	r1, #4913	; 0x1331
     e98:	8a100000 	bhi	400ea0 <__bss_end__+0x3f6b88>
     e9c:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     ea0:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     ea4:	89110000 	ldmdbhi	r1, {}	; <UNPREDICTABLE>
     ea8:	11000182 	smlabbne	r0, r2, r1, r0
     eac:	00133101 	andseq	r3, r3, r1, lsl #2
     eb0:	82891200 	addhi	r1, r9, #0, 4
     eb4:	01110101 	tsteq	r1, r1, lsl #2
     eb8:	00001331 	andeq	r1, r0, r1, lsr r3
     ebc:	3f012e13 	svccc	0x00012e13
     ec0:	3a0e0319 	bcc	381b2c <__bss_end__+0x377814>
     ec4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     ec8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     ecc:	97184006 	ldrls	r4, [r8, -r6]
     ed0:	13011942 	movwne	r1, #6466	; 0x1942
     ed4:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
     ed8:	03193f00 	tsteq	r9, #0, 30
     edc:	3b0b3a0e 	blcc	2cf71c <__bss_end__+0x2c5404>
     ee0:	1119270b 	tstne	r9, fp, lsl #14
     ee4:	40061201 	andmi	r1, r6, r1, lsl #4
     ee8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     eec:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
     ef0:	03193f00 	tsteq	r9, #0, 30
     ef4:	3b0b3a0e 	blcc	2cf734 <__bss_end__+0x2c541c>
     ef8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     efc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     f00:	97184006 	ldrls	r4, [r8, -r6]
     f04:	00001942 	andeq	r1, r0, r2, asr #18
     f08:	03003416 	movweq	r3, #1046	; 0x416
     f0c:	3b0b3a0e 	blcc	2cf74c <__bss_end__+0x2c5434>
     f10:	3f13490b 	svccc	0x0013490b
     f14:	00193c19 	andseq	r3, r9, r9, lsl ip
     f18:	012e1700 	teqeq	lr, r0, lsl #14
     f1c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     f20:	0b3b0b3a 	bleq	ec3c10 <__bss_end__+0xeb98f8>
     f24:	13491927 	movtne	r1, #39207	; 0x9927
     f28:	1301193c 	movwne	r1, #6460	; 0x193c
     f2c:	05180000 	ldreq	r0, [r8, #-0]
     f30:	00134900 	andseq	r4, r3, r0, lsl #18
     f34:	00181900 	andseq	r1, r8, r0, lsl #18
     f38:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
     f3c:	03193f00 	tsteq	r9, #0, 30
     f40:	3b0b3a0e 	blcc	2cf780 <__bss_end__+0x2c5468>
     f44:	3c19270b 	ldccc	7, cr2, [r9], {11}
     f48:	1b000019 	blne	fb4 <_start-0x704c>
     f4c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     f50:	0b3a0e03 	bleq	e84764 <__bss_end__+0xe7a44c>
     f54:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     f58:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     f5c:	01000000 	mrseq	r0, (UNDEF: 0)
     f60:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     f64:	0e030b13 	vmoveq.32	d3[0], r0
     f68:	01110e1b 	tsteq	r1, fp, lsl lr
     f6c:	17100612 			; <UNDEFINED> instruction: 0x17100612
     f70:	24020000 	strcs	r0, [r2], #-0
     f74:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     f78:	0008030b 	andeq	r0, r8, fp, lsl #6
     f7c:	00240300 	eoreq	r0, r4, r0, lsl #6
     f80:	0b3e0b0b 	bleq	f83bb4 <__bss_end__+0xf7989c>
     f84:	00000e03 	andeq	r0, r0, r3, lsl #28
     f88:	03012e04 	movweq	r2, #7684	; 0x1e04
     f8c:	3b0b3a0e 	blcc	2cf7cc <__bss_end__+0x2c54b4>
     f90:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     f94:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     f98:	97184006 	ldrls	r4, [r8, -r6]
     f9c:	13011942 	movwne	r1, #6466	; 0x1942
     fa0:	05050000 	streq	r0, [r5, #-0]
     fa4:	3a080300 	bcc	201bac <__bss_end__+0x1f7894>
     fa8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fac:	00170213 	andseq	r0, r7, r3, lsl r2
     fb0:	82890600 	addhi	r0, r9, #0, 12
     fb4:	01110101 	tsteq	r1, r1, lsl #2
     fb8:	00001331 	andeq	r1, r0, r1, lsr r3
     fbc:	01828a07 	orreq	r8, r2, r7, lsl #20
     fc0:	91180200 	tstls	r8, r0, lsl #4
     fc4:	00001842 	andeq	r1, r0, r2, asr #16
     fc8:	27011508 	strcs	r1, [r1, -r8, lsl #10]
     fcc:	01134919 	tsteq	r3, r9, lsl r9
     fd0:	09000013 	stmdbeq	r0, {r0, r1, r4}
     fd4:	13490005 	movtne	r0, #36869	; 0x9005
     fd8:	340a0000 	strcc	r0, [sl], #-0
     fdc:	3a0e0300 	bcc	381be4 <__bss_end__+0x3778cc>
     fe0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fe4:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     fe8:	0b000018 	bleq	1050 <_start-0x6fb0>
     fec:	0b0b000f 	bleq	2c1030 <__bss_end__+0x2b6d18>
     ff0:	00001349 	andeq	r1, r0, r9, asr #6
     ff4:	3f012e0c 	svccc	0x00012e0c
     ff8:	3a0e0319 	bcc	381c64 <__bss_end__+0x37794c>
     ffc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1000:	00193c19 	andseq	r3, r9, r9, lsl ip
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	00000000 	andeq	r0, r0, r0
       4:	0000000f 	andeq	r0, r0, pc
       8:	0f500001 	svceq	0x00500001
       c:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
      10:	01000000 	mrseq	r0, (UNDEF: 0)
      14:	00985500 	addseq	r5, r8, r0, lsl #10
      18:	00ac0000 	adceq	r0, ip, r0
      1c:	00040000 	andeq	r0, r4, r0
      20:	9f5001f3 	svcls	0x005001f3
	...
      2c:	0000000c 	andeq	r0, r0, ip
      30:	0000000f 	andeq	r0, r0, pc
      34:	0f500001 	svceq	0x00500001
      38:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
      3c:	01000000 	mrseq	r0, (UNDEF: 0)
      40:	00985500 	addseq	r5, r8, r0, lsl #10
      44:	00ac0000 	adceq	r0, ip, r0
      48:	00040000 	andeq	r0, r4, r0
      4c:	9f5001f3 	svcls	0x005001f3
	...
      58:	00000014 	andeq	r0, r0, r4, lsl r0
      5c:	00000064 	andeq	r0, r0, r4, rrx
      60:	00540001 	subseq	r0, r4, r1
      64:	00000000 	andeq	r0, r0, r0
      68:	d0000000 	andle	r0, r0, r0
      6c:	e0000000 	and	r0, r0, r0
      70:	02000000 	andeq	r0, r0, #0
      74:	e09f3000 	adds	r3, pc, r0
      78:	9c000000 	stcls	0, cr0, [r0], {-0}
      7c:	01000001 	tsteq	r0, r1
      80:	00005500 	andeq	r5, r0, r0, lsl #10
      84:	00000000 	andeq	r0, r0, r0
      88:	00d00000 	sbcseq	r0, r0, r0
      8c:	00e00000 	rsceq	r0, r0, r0
      90:	00020000 	andeq	r0, r2, r0
      94:	00e09f30 	rsceq	r9, r0, r0, lsr pc
      98:	01100000 	tsteq	r0, r0
      9c:	00010000 	andeq	r0, r1, r0
      a0:	00000054 	andeq	r0, r0, r4, asr r0
      a4:	00000000 	andeq	r0, r0, r0
      a8:	0000ec00 	andeq	lr, r0, r0, lsl #24
      ac:	0000f800 	andeq	pc, r0, r0, lsl #16
      b0:	50000100 	andpl	r0, r0, r0, lsl #2
      b4:	000000f8 	strdeq	r0, [r0], -r8
      b8:	000000fb 	strdeq	r0, [r0], -fp
      bc:	00510001 	subseq	r0, r1, r1
	...
      c8:	04000000 	streq	r0, [r0], #-0
      cc:	01000000 	mrseq	r0, (UNDEF: 0)
      d0:	00045000 	andeq	r5, r4, r0
      d4:	00080000 	andeq	r0, r8, r0
      d8:	00040000 	andeq	r0, r4, r0
      dc:	9f5001f3 	svcls	0x005001f3
	...
      e8:	00000068 	andeq	r0, r0, r8, rrx
      ec:	00000074 	andeq	r0, r0, r4, ror r0
      f0:	74500001 	ldrbvc	r0, [r0], #-1
      f4:	77000000 	strvc	r0, [r0, -r0]
      f8:	01000000 	mrseq	r0, (UNDEF: 0)
      fc:	00775100 	rsbseq	r5, r7, r0, lsl #2
     100:	00800000 	addeq	r0, r0, r0
     104:	00040000 	andeq	r0, r4, r0
     108:	9f5001f3 	svcls	0x005001f3
	...
     114:	00000080 	andeq	r0, r0, r0, lsl #1
     118:	00000097 	muleq	r0, r7, r0
     11c:	97500001 	ldrbls	r0, [r0, -r1]
     120:	dc000000 	stcle	0, cr0, [r0], {-0}
     124:	01000000 	mrseq	r0, (UNDEF: 0)
     128:	00dc5400 	sbcseq	r5, ip, r0, lsl #8
     12c:	00e00000 	rsceq	r0, r0, r0
     130:	00010000 	andeq	r0, r1, r0
     134:	0000e050 	andeq	lr, r0, r0, asr r0
     138:	0000fc00 	andeq	pc, r0, r0, lsl #24
     13c:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     148:	000000fc 	strdeq	r0, [r0], -ip
     14c:	0000010c 	andeq	r0, r0, ip, lsl #2
     150:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     154:	20000001 	andcs	r0, r0, r1
     158:	04000001 	streq	r0, [r0], #-1
     15c:	5001f300 	andpl	pc, r1, r0, lsl #6
     160:	0001209f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
     164:	00012f00 	andeq	r2, r1, r0, lsl #30
     168:	50000100 	andpl	r0, r0, r0, lsl #2
     16c:	0000012f 	andeq	r0, r0, pc, lsr #2
     170:	00000150 	andeq	r0, r0, r0, asr r1
     174:	01f30004 	mvnseq	r0, r4
     178:	01509f50 	cmpeq	r0, r0, asr pc
     17c:	01700000 	cmneq	r0, r0
     180:	00010000 	andeq	r0, r1, r0
     184:	00017050 	andeq	r7, r1, r0, asr r0
     188:	00018c00 	andeq	r8, r1, r0, lsl #24
     18c:	f3000400 	vshl.u8	d0, d0, d0
     190:	009f5001 	addseq	r5, pc, r1
     194:	00000000 	andeq	r0, r0, r0
     198:	24000000 	strcs	r0, [r0], #-0
     19c:	2f000001 	svccs	0x00000001
     1a0:	01000001 	tsteq	r0, r1
     1a4:	01505300 	cmpeq	r0, r0, lsl #6
     1a8:	01740000 	cmneq	r4, r0
     1ac:	00010000 	andeq	r0, r1, r0
     1b0:	00000053 	andeq	r0, r0, r3, asr r0
     1b4:	00000000 	andeq	r0, r0, r0
     1b8:	00019800 	andeq	r9, r1, r0, lsl #16
     1bc:	0001a400 	andeq	sl, r1, r0, lsl #8
     1c0:	50000100 	andpl	r0, r0, r0, lsl #2
     1c4:	000001ac 	andeq	r0, r0, ip, lsr #3
     1c8:	000001c8 	andeq	r0, r0, r8, asr #3
     1cc:	dc500001 	mrrcle	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     1d0:	0c000001 	stceq	0, cr0, [r0], {1}
     1d4:	01000002 	tsteq	r0, r2
     1d8:	00005000 	andeq	r5, r0, r0
     1dc:	00000000 	andeq	r0, r0, r0
     1e0:	021c0000 	andseq	r0, ip, #0
     1e4:	022b0000 	eoreq	r0, fp, #0
     1e8:	00010000 	andeq	r0, r1, r0
     1ec:	00022b50 	andeq	r2, r2, r0, asr fp
     1f0:	00026800 	andeq	r6, r2, r0, lsl #16
     1f4:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     200:	0000021c 	andeq	r0, r0, ip, lsl r2
     204:	0000022b 	andeq	r0, r0, fp, lsr #4
     208:	2b510001 	blcs	1440214 <__bss_end__+0x1435efc>
     20c:	68000002 	stmdavs	r0, {r1}
     210:	01000002 	tsteq	r0, r2
     214:	00005500 	andeq	r5, r0, r0, lsl #10
     218:	00000000 	andeq	r0, r0, r0
     21c:	02300000 	eorseq	r0, r0, #0
     220:	02500000 	subseq	r0, r0, #0
     224:	00010000 	andeq	r0, r1, r0
     228:	00025050 	andeq	r5, r2, r0, asr r0
     22c:	00026800 	andeq	r6, r2, r0, lsl #16
     230:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     23c:	00000268 	andeq	r0, r0, r8, ror #4
     240:	00000278 	andeq	r0, r0, r8, ror r2
     244:	78500001 	ldmdavc	r0, {r0}^
     248:	c0000002 	andgt	r0, r0, r2
     24c:	04000002 	streq	r0, [r0], #-2
     250:	5001f300 	andpl	pc, r1, r0, lsl #6
     254:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     258:	00000000 	andeq	r0, r0, r0
     25c:	00032800 	andeq	r2, r3, r0, lsl #16
     260:	00032c00 	andeq	r2, r3, r0, lsl #24
     264:	50000100 	andpl	r0, r0, r0, lsl #2
     268:	0000032c 	andeq	r0, r0, ip, lsr #6
     26c:	00000388 	andeq	r0, r0, r8, lsl #7
     270:	00550001 	subseq	r0, r5, r1
     274:	00000000 	andeq	r0, r0, r0
     278:	30000000 	andcc	r0, r0, r0
     27c:	54000003 	strpl	r0, [r0], #-3
     280:	01000003 	tsteq	r0, r3
     284:	03545000 	cmpeq	r4, #0
     288:	03630000 	cmneq	r3, #0
     28c:	00020000 	andeq	r0, r2, r0
     290:	03686491 	cmneq	r8, #-1862270976	; 0x91000000
     294:	036c0000 	cmneq	ip, #0
     298:	00010000 	andeq	r0, r1, r0
     29c:	00000050 	andeq	r0, r0, r0, asr r0
     2a0:	00000000 	andeq	r0, r0, r0
     2a4:	00033400 	andeq	r3, r3, r0, lsl #8
     2a8:	00036000 	andeq	r6, r3, r0
     2ac:	53000100 	movwpl	r0, #256	; 0x100
     2b0:	00000360 	andeq	r0, r0, r0, ror #6
     2b4:	00000363 	andeq	r0, r0, r3, ror #6
     2b8:	5c910002 	ldcpl	0, cr0, [r1], {2}
     2bc:	00000368 	andeq	r0, r0, r8, ror #6
     2c0:	0000036f 	andeq	r0, r0, pc, ror #6
     2c4:	00530001 	subseq	r0, r3, r1
     2c8:	00000000 	andeq	r0, r0, r0
     2cc:	1c000000 	stcne	0, cr0, [r0], {-0}
     2d0:	24000004 	strcs	r0, [r0], #-4
     2d4:	01000004 	tsteq	r0, r4
     2d8:	04245000 	strteq	r5, [r4], #-0
     2dc:	04440000 	strbeq	r0, [r4], #-0
     2e0:	00040000 	andeq	r0, r4, r0
     2e4:	9f5001f3 	svcls	0x005001f3
	...
     2f0:	00000444 	andeq	r0, r0, r4, asr #8
     2f4:	0000044c 	andeq	r0, r0, ip, asr #8
     2f8:	4c500001 	mrrcmi	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     2fc:	6c000004 	stcvs	0, cr0, [r0], {4}
     300:	04000004 	streq	r0, [r0], #-4
     304:	5001f300 	andpl	pc, r1, r0, lsl #6
     308:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     314:	00005400 	andeq	r5, r0, r0, lsl #8
     318:	50000100 	andpl	r0, r0, r0, lsl #2
     31c:	00000054 	andeq	r0, r0, r4, asr r0
     320:	00000080 	andeq	r0, r0, r0, lsl #1
     324:	01f30004 	mvnseq	r0, r4
     328:	00009f50 	andeq	r9, r0, r0, asr pc
     32c:	00000000 	andeq	r0, r0, r0
     330:	00180000 	andseq	r0, r8, r0
     334:	00540000 	subseq	r0, r4, r0
     338:	00010000 	andeq	r0, r1, r0
     33c:	00005450 	andeq	r5, r0, r0, asr r4
     340:	00008000 	andeq	r8, r0, r0
     344:	f3000400 	vshl.u8	d0, d0, d0
     348:	009f5001 	addseq	r5, pc, r1
     34c:	00000000 	andeq	r0, r0, r0
     350:	2c000000 	stccs	0, cr0, [r0], {-0}
     354:	54000000 	strpl	r0, [r0], #-0
     358:	01000000 	mrseq	r0, (UNDEF: 0)
     35c:	00545000 	subseq	r5, r4, r0
     360:	00800000 	addeq	r0, r0, r0
     364:	00040000 	andeq	r0, r4, r0
     368:	9f5001f3 	svcls	0x005001f3
	...
     374:	00000080 	andeq	r0, r0, r0, lsl #1
     378:	0000009c 	muleq	r0, ip, r0
     37c:	9c500001 	mrrcls	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     380:	c0000000 	andgt	r0, r0, r0
     384:	04000000 	streq	r0, [r0], #-0
     388:	5001f300 	andpl	pc, r1, r0, lsl #6
     38c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     390:	00000000 	andeq	r0, r0, r0
     394:	0000c000 	andeq	ip, r0, r0
     398:	0000d700 	andeq	sp, r0, r0, lsl #14
     39c:	50000100 	andpl	r0, r0, r0, lsl #2
     3a0:	000000d7 	ldrdeq	r0, [r0], -r7
     3a4:	00000264 	andeq	r0, r0, r4, ror #4
     3a8:	00540001 	subseq	r0, r4, r1
     3ac:	00000000 	andeq	r0, r0, r0
     3b0:	c0000000 	andgt	r0, r0, r0
     3b4:	d0000000 	andle	r0, r0, r0
     3b8:	01000000 	mrseq	r0, (UNDEF: 0)
     3bc:	00d05100 	sbcseq	r5, r0, r0, lsl #2
     3c0:	010c0000 	mrseq	r0, (UNDEF: 12)
     3c4:	00010000 	andeq	r0, r1, r0
     3c8:	00010c55 	andeq	r0, r1, r5, asr ip
     3cc:	00026400 	andeq	r6, r2, r0, lsl #8
     3d0:	f3000400 	vshl.u8	d0, d0, d0
     3d4:	009f5101 	addseq	r5, pc, r1, lsl #2
     3d8:	00000000 	andeq	r0, r0, r0
     3dc:	ac000000 	stcge	0, cr0, [r0], {-0}
     3e0:	d4000001 	strle	r0, [r0], #-1
     3e4:	02000001 	andeq	r0, r0, #1
     3e8:	d49f4200 	ldrle	r4, [pc], #512	; 3f0 <_start-0x7c10>
     3ec:	ec000001 	stc	0, cr0, [r0], {1}
     3f0:	01000001 	tsteq	r0, r1
     3f4:	01ec5100 	mvneq	r5, r0, lsl #2
     3f8:	01f40000 	mvnseq	r0, r0
     3fc:	00020000 	andeq	r0, r2, r0
     400:	01f49f42 	mvnseq	r9, r2, asr #30
     404:	02240000 	eoreq	r0, r4, #0
     408:	00010000 	andeq	r0, r1, r0
     40c:	00000051 	andeq	r0, r0, r1, asr r0
     410:	00000000 	andeq	r0, r0, r0
     414:	0001cc00 	andeq	ip, r1, r0, lsl #24
     418:	0001d800 	andeq	sp, r1, r0, lsl #16
     41c:	52000100 	andpl	r0, r0, #0, 2
     420:	000001d8 	ldrdeq	r0, [r0], -r8
     424:	000001dc 	ldrdeq	r0, [r0], -ip
     428:	7f720003 	svcvc	0x00720003
     42c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     430:	00000000 	andeq	r0, r0, r0
     434:	00026400 	andeq	r6, r2, r0, lsl #8
     438:	00027c00 	andeq	r7, r2, r0, lsl #24
     43c:	50000100 	andpl	r0, r0, r0, lsl #2
     440:	0000027c 	andeq	r0, r0, ip, ror r2
     444:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     448:	00530001 	subseq	r0, r3, r1
     44c:	00000000 	andeq	r0, r0, r0
     450:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
     454:	b0000002 	andlt	r0, r0, r2
     458:	01000002 	tsteq	r0, r2
     45c:	00005500 	andeq	r5, r0, r0, lsl #10
     460:	00000000 	andeq	r0, r0, r0
     464:	02900000 	addseq	r0, r0, #0
     468:	029c0000 	addseq	r0, ip, #0
     46c:	00010000 	andeq	r0, r1, r0
     470:	00029c51 	andeq	r9, r2, r1, asr ip
     474:	0002a000 	andeq	sl, r2, r0
     478:	71000300 	mrsvc	r0, LR_irq
     47c:	00009f7f 	andeq	r9, r0, pc, ror pc
     480:	00000000 	andeq	r0, r0, r0
     484:	02d00000 	sbcseq	r0, r0, #0
     488:	02e80000 	rsceq	r0, r8, #0
     48c:	00010000 	andeq	r0, r1, r0
     490:	0002e850 	andeq	lr, r2, r0, asr r8
     494:	00030400 	andeq	r0, r3, r0, lsl #8
     498:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
     4a4:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     4a8:	000002e8 	andeq	r0, r0, r8, ror #5
     4ac:	e8510001 	ldmda	r1, {r0}^
     4b0:	04000002 	streq	r0, [r0], #-2
     4b4:	01000003 	tsteq	r0, r3
     4b8:	00005600 	andeq	r5, r0, r0, lsl #12
     4bc:	00000000 	andeq	r0, r0, r0
     4c0:	02d00000 	sbcseq	r0, r0, #0
     4c4:	02e80000 	rsceq	r0, r8, #0
     4c8:	00010000 	andeq	r0, r1, r0
     4cc:	0002e852 	andeq	lr, r2, r2, asr r8
     4d0:	00030400 	andeq	r0, r3, r0, lsl #8
     4d4:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
     4e0:	000002e0 	andeq	r0, r0, r0, ror #5
     4e4:	000002e8 	andeq	r0, r0, r8, ror #5
     4e8:	e8510001 	ldmda	r1, {r0}^
     4ec:	04000002 	streq	r0, [r0], #-2
     4f0:	01000003 	tsteq	r0, r3
     4f4:	00005600 	andeq	r5, r0, r0, lsl #12
     4f8:	00000000 	andeq	r0, r0, r0
     4fc:	02e00000 	rsceq	r0, r0, #0
     500:	02e80000 	rsceq	r0, r8, #0
     504:	00020000 	andeq	r0, r2, r0
     508:	02e89f30 	rsceq	r9, r8, #48, 30	; 0xc0
     50c:	03040000 	movweq	r0, #16384	; 0x4000
     510:	00010000 	andeq	r0, r1, r0
     514:	00000054 	andeq	r0, r0, r4, asr r0
     518:	00000000 	andeq	r0, r0, r0
     51c:	00030400 	andeq	r0, r3, r0, lsl #8
     520:	00031700 	andeq	r1, r3, r0, lsl #14
     524:	50000100 	andpl	r0, r0, r0, lsl #2
     528:	00000317 	andeq	r0, r0, r7, lsl r3
     52c:	0000035c 	andeq	r0, r0, ip, asr r3
     530:	00540001 	subseq	r0, r4, r1
     534:	00000000 	andeq	r0, r0, r0
     538:	04000000 	streq	r0, [r0], #-0
     53c:	17000003 	strne	r0, [r0, -r3]
     540:	01000003 	tsteq	r0, r3
     544:	03175100 	tsteq	r7, #0, 2
     548:	035c0000 	cmpeq	ip, #0
     54c:	00010000 	andeq	r0, r1, r0
     550:	00000056 	andeq	r0, r0, r6, asr r0
     554:	00000000 	andeq	r0, r0, r0
     558:	00030400 	andeq	r0, r3, r0, lsl #8
     55c:	00031700 	andeq	r1, r3, r0, lsl #14
     560:	52000100 	andpl	r0, r0, #0, 2
     564:	00000317 	andeq	r0, r0, r7, lsl r3
     568:	0000035c 	andeq	r0, r0, ip, asr r3
     56c:	00550001 	subseq	r0, r5, r1
     570:	00000000 	andeq	r0, r0, r0
     574:	5c000000 	stcpl	0, cr0, [r0], {-0}
     578:	93000003 	movwls	r0, #3
     57c:	01000003 	tsteq	r0, r3
     580:	03935000 	orrseq	r5, r3, #0
     584:	03d80000 	bicseq	r0, r8, #0
     588:	00010000 	andeq	r0, r1, r0
     58c:	0003d854 	andeq	sp, r3, r4, asr r8
     590:	0003dc00 	andeq	sp, r3, r0, lsl #24
     594:	50000100 	andpl	r0, r0, r0, lsl #2
     598:	000003dc 	ldrdeq	r0, [r0], -ip
     59c:	000003fc 	strdeq	r0, [r0], -ip
     5a0:	00540001 	subseq	r0, r4, r1
     5a4:	00000000 	andeq	r0, r0, r0
     5a8:	5c000000 	stcpl	0, cr0, [r0], {-0}
     5ac:	93000003 	movwls	r0, #3
     5b0:	01000003 	tsteq	r0, r3
     5b4:	03935100 	orrseq	r5, r3, #0, 2
     5b8:	03d80000 	bicseq	r0, r8, #0
     5bc:	00040000 	andeq	r0, r4, r0
     5c0:	9f5101f3 	svcls	0x005101f3
     5c4:	000003d8 	ldrdeq	r0, [r0], -r8
     5c8:	000003e0 	andeq	r0, r0, r0, ror #7
     5cc:	e0510001 	subs	r0, r1, r1
     5d0:	fc000003 	stc2	0, cr0, [r0], {3}
     5d4:	04000003 	streq	r0, [r0], #-3
     5d8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     5dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     5e0:	00000000 	andeq	r0, r0, r0
     5e4:	00035c00 	andeq	r5, r3, r0, lsl #24
     5e8:	00039300 	andeq	r9, r3, r0, lsl #6
     5ec:	52000100 	andpl	r0, r0, #0, 2
     5f0:	00000393 	muleq	r0, r3, r3
     5f4:	000003d8 	ldrdeq	r0, [r0], -r8
     5f8:	01f30004 	mvnseq	r0, r4
     5fc:	03d89f52 	bicseq	r9, r8, #328	; 0x148
     600:	03e00000 	mvneq	r0, #0
     604:	00010000 	andeq	r0, r1, r0
     608:	0003e052 	andeq	lr, r3, r2, asr r0
     60c:	0003fc00 	andeq	pc, r3, r0, lsl #24
     610:	f3000400 	vshl.u8	d0, d0, d0
     614:	009f5201 	addseq	r5, pc, r1, lsl #4
     618:	00000000 	andeq	r0, r0, r0
     61c:	90000000 	andls	r0, r0, r0
     620:	d8000003 	stmdale	r0, {r0, r1}
     624:	01000003 	tsteq	r0, r3
     628:	03e05600 	mvneq	r5, #0, 12
     62c:	03fc0000 	mvnseq	r0, #0
     630:	00010000 	andeq	r0, r1, r0
     634:	00000056 	andeq	r0, r0, r6, asr r0
     638:	00000000 	andeq	r0, r0, r0
     63c:	00036400 	andeq	r6, r3, r0, lsl #8
     640:	00039300 	andeq	r9, r3, r0, lsl #6
     644:	50000100 	andpl	r0, r0, r0, lsl #2
     648:	00000393 	muleq	r0, r3, r3
     64c:	000003d8 	ldrdeq	r0, [r0], -r8
     650:	d8540001 	ldmdale	r4, {r0}^
     654:	dc000003 	stcle	0, cr0, [r0], {3}
     658:	01000003 	tsteq	r0, r3
     65c:	03dc5000 	bicseq	r5, ip, #0
     660:	03fc0000 	mvnseq	r0, #0
     664:	00010000 	andeq	r0, r1, r0
     668:	00000054 	andeq	r0, r0, r4, asr r0
     66c:	00000000 	andeq	r0, r0, r0
     670:	0003a400 	andeq	sl, r3, r0, lsl #8
     674:	0003d800 	andeq	sp, r3, r0, lsl #16
     678:	54000100 	strpl	r0, [r0], #-256	; 0x100
     67c:	000003e0 	andeq	r0, r0, r0, ror #7
     680:	000003fc 	strdeq	r0, [r0], -ip
     684:	00540001 	subseq	r0, r4, r1
     688:	00000000 	andeq	r0, r0, r0
     68c:	fc000000 	stc2	0, cr0, [r0], {-0}
     690:	90000003 	andls	r0, r0, r3
     694:	01000004 	tsteq	r0, r4
     698:	04905000 	ldreq	r5, [r0], #0
     69c:	04a40000 	strteq	r0, [r4], #0
     6a0:	00040000 	andeq	r0, r4, r0
     6a4:	9f5001f3 	svcls	0x005001f3
     6a8:	000004a4 	andeq	r0, r0, r4, lsr #9
     6ac:	000004d4 	ldrdeq	r0, [r0], -r4
     6b0:	d4500001 	ldrble	r0, [r0], #-1
     6b4:	e8000004 	stmda	r0, {r2}
     6b8:	04000004 	streq	r0, [r0], #-4
     6bc:	5001f300 	andpl	pc, r1, r0, lsl #6
     6c0:	0004e89f 	muleq	r4, pc, r8	; <UNPREDICTABLE>
     6c4:	0004ec00 	andeq	lr, r4, r0, lsl #24
     6c8:	50000100 	andpl	r0, r0, r0, lsl #2
     6cc:	000004ec 	andeq	r0, r0, ip, ror #9
     6d0:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     6d4:	01f30004 	mvnseq	r0, r4
     6d8:	04f09f50 	ldrbteq	r9, [r0], #3920	; 0xf50
     6dc:	04f40000 	ldrbteq	r0, [r4], #0
     6e0:	00010000 	andeq	r0, r1, r0
     6e4:	0004f450 	andeq	pc, r4, r0, asr r4	; <UNPREDICTABLE>
     6e8:	0004f800 	andeq	pc, r4, r0, lsl #16
     6ec:	f3000400 	vshl.u8	d0, d0, d0
     6f0:	f89f5001 			; <UNDEFINED> instruction: 0xf89f5001
     6f4:	fc000004 	stc2	0, cr0, [r0], {4}
     6f8:	01000004 	tsteq	r0, r4
     6fc:	04fc5000 	ldrbteq	r5, [ip], #0
     700:	05180000 	ldreq	r0, [r8, #-0]
     704:	00040000 	andeq	r0, r4, r0
     708:	9f5001f3 	svcls	0x005001f3
	...
     714:	000003fc 	strdeq	r0, [r0], -ip
     718:	00000494 	muleq	r0, r4, r4
     71c:	94510001 	ldrbls	r0, [r1], #-1
     720:	a4000004 	strge	r0, [r0], #-4
     724:	04000004 	streq	r0, [r0], #-4
     728:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     72c:	0004a49f 	muleq	r4, pc, r4	; <UNPREDICTABLE>
     730:	0004d800 	andeq	sp, r4, r0, lsl #16
     734:	51000100 	mrspl	r0, (UNDEF: 16)
     738:	000004d8 	ldrdeq	r0, [r0], -r8
     73c:	000004e8 	andeq	r0, r0, r8, ror #9
     740:	01f30004 	mvnseq	r0, r4
     744:	04e89f51 	strbteq	r9, [r8], #3921	; 0xf51
     748:	05180000 	ldreq	r0, [r8, #-0]
     74c:	00010000 	andeq	r0, r1, r0
     750:	00000051 	andeq	r0, r0, r1, asr r0
     754:	00000000 	andeq	r0, r0, r0
     758:	0003fc00 	andeq	pc, r3, r0, lsl #24
     75c:	00049800 	andeq	r9, r4, r0, lsl #16
     760:	52000100 	andpl	r0, r0, #0, 2
     764:	00000498 	muleq	r0, r8, r4
     768:	000004a4 	andeq	r0, r0, r4, lsr #9
     76c:	01f30004 	mvnseq	r0, r4
     770:	04a49f52 	strteq	r9, [r4], #3922	; 0xf52
     774:	04c00000 	strbeq	r0, [r0], #0
     778:	00010000 	andeq	r0, r1, r0
     77c:	0004c052 	andeq	ip, r4, r2, asr r0
     780:	0004e800 	andeq	lr, r4, r0, lsl #16
     784:	f3000400 	vshl.u8	d0, d0, d0
     788:	e89f5201 	ldm	pc, {r0, r9, ip, lr}	; <UNPREDICTABLE>
     78c:	f8000004 			; <UNDEFINED> instruction: 0xf8000004
     790:	01000004 	tsteq	r0, r4
     794:	04f85200 	ldrbteq	r5, [r8], #512	; 0x200
     798:	05180000 	ldreq	r0, [r8, #-0]
     79c:	00040000 	andeq	r0, r4, r0
     7a0:	9f5201f3 	svcls	0x005201f3
	...
     7ac:	00000400 	andeq	r0, r0, r0, lsl #8
     7b0:	00000494 	muleq	r0, r4, r4
     7b4:	94510001 	ldrbls	r0, [r1], #-1
     7b8:	a4000004 	strge	r0, [r0], #-4
     7bc:	04000004 	streq	r0, [r0], #-4
     7c0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     7c4:	0004a49f 	muleq	r4, pc, r4	; <UNPREDICTABLE>
     7c8:	0004d800 	andeq	sp, r4, r0, lsl #16
     7cc:	51000100 	mrspl	r0, (UNDEF: 16)
     7d0:	000004d8 	ldrdeq	r0, [r0], -r8
     7d4:	000004e8 	andeq	r0, r0, r8, ror #9
     7d8:	01f30004 	mvnseq	r0, r4
     7dc:	04e89f51 	strbteq	r9, [r8], #3921	; 0xf51
     7e0:	05180000 	ldreq	r0, [r8, #-0]
     7e4:	00010000 	andeq	r0, r1, r0
     7e8:	00000051 	andeq	r0, r0, r1, asr r0
     7ec:	00000000 	andeq	r0, r0, r0
     7f0:	00040000 	andeq	r0, r4, r0
     7f4:	00049000 	andeq	r9, r4, r0
     7f8:	50000100 	andpl	r0, r0, r0, lsl #2
     7fc:	00000490 	muleq	r0, r0, r4
     800:	000004a4 	andeq	r0, r0, r4, lsr #9
     804:	01f30004 	mvnseq	r0, r4
     808:	04a49f50 	strteq	r9, [r4], #3920	; 0xf50
     80c:	04d40000 	ldrbeq	r0, [r4], #0
     810:	00010000 	andeq	r0, r1, r0
     814:	0004d450 	andeq	sp, r4, r0, asr r4
     818:	0004e800 	andeq	lr, r4, r0, lsl #16
     81c:	f3000400 	vshl.u8	d0, d0, d0
     820:	e89f5001 	ldm	pc, {r0, ip, lr}	; <UNPREDICTABLE>
     824:	ec000004 	stc	0, cr0, [r0], {4}
     828:	01000004 	tsteq	r0, r4
     82c:	04ec5000 	strbteq	r5, [ip], #0
     830:	04f00000 	ldrbteq	r0, [r0], #0
     834:	00040000 	andeq	r0, r4, r0
     838:	9f5001f3 	svcls	0x005001f3
     83c:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     840:	000004f4 	strdeq	r0, [r0], -r4
     844:	f4500001 			; <UNDEFINED> instruction: 0xf4500001
     848:	f8000004 			; <UNDEFINED> instruction: 0xf8000004
     84c:	04000004 	streq	r0, [r0], #-4
     850:	5001f300 	andpl	pc, r1, r0, lsl #6
     854:	0004f89f 	muleq	r4, pc, r8	; <UNPREDICTABLE>
     858:	0004fc00 	andeq	pc, r4, r0, lsl #24
     85c:	50000100 	andpl	r0, r0, r0, lsl #2
     860:	000004fc 	strdeq	r0, [r0], -ip
     864:	00000518 	andeq	r0, r0, r8, lsl r5
     868:	01f30004 	mvnseq	r0, r4
     86c:	00009f50 	andeq	r9, r0, r0, asr pc
     870:	00000000 	andeq	r0, r0, r0
     874:	04400000 	strbeq	r0, [r0], #-0
     878:	049c0000 	ldreq	r0, [ip], #0
     87c:	00010000 	andeq	r0, r1, r0
     880:	0004a453 	andeq	sl, r4, r3, asr r4
     884:	0004bc00 	andeq	fp, r4, r0, lsl #24
     888:	53000100 	movwpl	r0, #256	; 0x100
     88c:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     890:	000004f8 	strdeq	r0, [r0], -r8
     894:	00530001 	subseq	r0, r3, r1
     898:	00000000 	andeq	r0, r0, r0
     89c:	44000000 	strmi	r0, [r0], #-0
     8a0:	68000004 	stmdavs	r0, {r2}
     8a4:	05000004 	streq	r0, [r0, #-4]
     8a8:	73007100 	movwvc	r7, #256	; 0x100
     8ac:	04682200 	strbteq	r2, [r8], #-512	; 0x200
     8b0:	04800000 	streq	r0, [r0], #0
     8b4:	00010000 	andeq	r0, r1, r0
     8b8:	0004805a 	andeq	r8, r4, sl, asr r0
     8bc:	00048400 	andeq	r8, r4, r0, lsl #8
     8c0:	71000500 	tstvc	r0, r0, lsl #10
     8c4:	22007300 	andcs	r7, r0, #0, 6
     8c8:	00000484 	andeq	r0, r0, r4, lsl #9
     8cc:	000004a8 	andeq	r0, r0, r8, lsr #9
     8d0:	005a0001 	subseq	r0, sl, r1
     8d4:	00000000 	andeq	r0, r0, r0
     8d8:	44000000 	strmi	r0, [r0], #-0
     8dc:	90000004 	andls	r0, r0, r4
     8e0:	01000004 	tsteq	r0, r4
     8e4:	04905000 	ldreq	r5, [r0], #0
     8e8:	04a40000 	strteq	r0, [r4], #0
     8ec:	00040000 	andeq	r0, r4, r0
     8f0:	9f5001f3 	svcls	0x005001f3
     8f4:	000004a4 	andeq	r0, r0, r4, lsr #9
     8f8:	000004a8 	andeq	r0, r0, r8, lsr #9
     8fc:	00500001 	subseq	r0, r0, r1
     900:	00000000 	andeq	r0, r0, r0
     904:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     908:	6c000004 	stcvs	0, cr0, [r0], {4}
     90c:	01000004 	tsteq	r0, r4
     910:	046c5400 	strbteq	r5, [ip], #-1024	; 0x400
     914:	04700000 	ldrbteq	r0, [r0], #-0
     918:	00030000 	andeq	r0, r3, r0
     91c:	809f7f74 	addshi	r7, pc, r4, ror pc	; <UNPREDICTABLE>
     920:	84000004 	strhi	r0, [r0], #-4
     924:	01000004 	tsteq	r0, r4
     928:	00005400 	andeq	r5, r0, r0, lsl #8
     92c:	00000000 	andeq	r0, r0, r0
     930:	044c0000 	strbeq	r0, [ip], #-0
     934:	04900000 	ldreq	r0, [r0], #0
     938:	00010000 	andeq	r0, r1, r0
     93c:	00049050 	andeq	r9, r4, r0, asr r0
     940:	0004a400 	andeq	sl, r4, r0, lsl #8
     944:	f3000400 	vshl.u8	d0, d0, d0
     948:	a49f5001 	ldrge	r5, [pc], #1	; 950 <_start-0x76b0>
     94c:	a8000004 	stmdage	r0, {r2}
     950:	01000004 	tsteq	r0, r4
     954:	00005000 	andeq	r5, r0, r0
     958:	00000000 	andeq	r0, r0, r0
     95c:	04b80000 	ldrteq	r0, [r8], #0
     960:	04d40000 	ldrbeq	r0, [r4], #0
     964:	00010000 	andeq	r0, r1, r0
     968:	0004d450 	andeq	sp, r4, r0, asr r4
     96c:	0004e800 	andeq	lr, r4, r0, lsl #16
     970:	f3000400 	vshl.u8	d0, d0, d0
     974:	f89f5001 			; <UNDEFINED> instruction: 0xf89f5001
     978:	fc000004 	stc2	0, cr0, [r0], {4}
     97c:	01000004 	tsteq	r0, r4
     980:	04fc5000 	ldrbteq	r5, [ip], #0
     984:	05180000 	ldreq	r0, [r8, #-0]
     988:	00040000 	andeq	r0, r4, r0
     98c:	9f5001f3 	svcls	0x005001f3
	...
     99c:	00000004 	andeq	r0, r0, r4
     9a0:	04520001 	ldrbeq	r0, [r2], #-1
     9a4:	20000000 	andcs	r0, r0, r0
     9a8:	04000000 	streq	r0, [r0], #-0
     9ac:	5201f300 	andpl	pc, r1, #0, 6
     9b0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     9bc:	00000c00 	andeq	r0, r0, r0, lsl #24
     9c0:	50000100 	andpl	r0, r0, r0, lsl #2
     9c4:	0000000c 	andeq	r0, r0, ip
     9c8:	00000014 	andeq	r0, r0, r4, lsl r0
     9cc:	01730003 	cmneq	r3, r3
     9d0:	0000149f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
     9d4:	00002000 	andeq	r2, r0, r0
     9d8:	53000100 	movwpl	r0, #256	; 0x100
	...
     9e4:	0000002c 	andeq	r0, r0, ip, lsr #32
     9e8:	00000038 	andeq	r0, r0, r8, lsr r0
     9ec:	38500001 	ldmdacc	r0, {r0}^
     9f0:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     9f4:	01000000 	mrseq	r0, (UNDEF: 0)
     9f8:	00485500 	subeq	r5, r8, r0, lsl #10
     9fc:	00580000 	subseq	r0, r8, r0
     a00:	00010000 	andeq	r0, r1, r0
     a04:	00000050 	andeq	r0, r0, r0, asr r0
	...
     a10:	00001000 	andeq	r1, r0, r0
     a14:	50000100 	andpl	r0, r0, r0, lsl #2
     a18:	00000010 	andeq	r0, r0, r0, lsl r0
     a1c:	00000034 	andeq	r0, r0, r4, lsr r0
     a20:	00540001 	subseq	r0, r4, r1
	...
     a2c:	04000000 	streq	r0, [r0], #-0
     a30:	01000000 	mrseq	r0, (UNDEF: 0)
     a34:	00045000 	andeq	r5, r4, r0
     a38:	000c0000 	andeq	r0, ip, r0
     a3c:	00030000 	andeq	r0, r3, r0
     a40:	0c9f3070 	ldceq	0, cr3, [pc], {112}	; 0x70
     a44:	14000000 	strne	r0, [r0], #-0
     a48:	04000000 	streq	r0, [r0], #-0
     a4c:	5001f300 	andpl	pc, r1, r0, lsl #6
     a50:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     a54:	00000000 	andeq	r0, r0, r0
     a58:	00001400 	andeq	r1, r0, r0, lsl #8
     a5c:	00002000 	andeq	r2, r0, r0
     a60:	50000100 	andpl	r0, r0, r0, lsl #2
     a64:	00000020 	andeq	r0, r0, r0, lsr #32
     a68:	0000002c 	andeq	r0, r0, ip, lsr #32
     a6c:	01700003 	cmneq	r0, r3
     a70:	00002c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
     a74:	00004000 	andeq	r4, r0, r0
     a78:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     a84:	00000014 	andeq	r0, r0, r4, lsl r0
     a88:	00000018 	andeq	r0, r0, r8, lsl r0
     a8c:	18510001 	ldmdane	r1, {r0}^
     a90:	40000000 	andmi	r0, r0, r0
     a94:	04000000 	streq	r0, [r0], #-0
     a98:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     a9c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     aa0:	00000000 	andeq	r0, r0, r0
     aa4:	00004000 	andeq	r4, r0, r0
     aa8:	00006000 	andeq	r6, r0, r0
     aac:	50000100 	andpl	r0, r0, r0, lsl #2
     ab0:	00000060 	andeq	r0, r0, r0, rrx
     ab4:	0000006c 	andeq	r0, r0, ip, rrx
     ab8:	01710003 	cmneq	r1, r3
     abc:	00006c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
     ac0:	00007400 	andeq	r7, r0, r0, lsl #8
     ac4:	51000100 	mrspl	r0, (UNDEF: 16)
     ac8:	00000074 	andeq	r0, r0, r4, ror r0
     acc:	00000080 	andeq	r0, r0, r0, lsl #1
     ad0:	01710003 	cmneq	r1, r3
     ad4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     ad8:	00000000 	andeq	r0, r0, r0
     adc:	00004000 	andeq	r4, r0, r0
     ae0:	00005000 	andeq	r5, r0, r0
     ae4:	51000100 	mrspl	r0, (UNDEF: 16)
     ae8:	00000050 	andeq	r0, r0, r0, asr r0
     aec:	00000080 	andeq	r0, r0, r0, lsl #1
     af0:	01f30004 	mvnseq	r0, r4
     af4:	00009f51 	andeq	r9, r0, r1, asr pc
     af8:	00000000 	andeq	r0, r0, r0
     afc:	00400000 	subeq	r0, r0, r0
     b00:	00580000 	subseq	r0, r8, r0
     b04:	00010000 	andeq	r0, r1, r0
     b08:	00005852 	andeq	r5, r0, r2, asr r8
     b0c:	00006400 	andeq	r6, r0, r0, lsl #8
     b10:	52000100 	andpl	r0, r0, #0, 2
     b14:	00000064 	andeq	r0, r0, r4, rrx
     b18:	00000068 	andeq	r0, r0, r8, rrx
     b1c:	01720003 	cmneq	r2, r3
     b20:	0000689f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
     b24:	00008000 	andeq	r8, r0, r0
     b28:	52000100 	andpl	r0, r0, #0, 2
	...
     b34:	00000040 	andeq	r0, r0, r0, asr #32
     b38:	00000054 	andeq	r0, r0, r4, asr r0
     b3c:	54530001 	ldrbpl	r0, [r3], #-1
     b40:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
     b44:	01000000 	mrseq	r0, (UNDEF: 0)
     b48:	00005300 	andeq	r5, r0, r0, lsl #6
     b4c:	00000000 	andeq	r0, r0, r0
     b50:	00480000 	subeq	r0, r8, r0
     b54:	00600000 	rsbeq	r0, r0, r0
     b58:	00010000 	andeq	r0, r1, r0
     b5c:	0000605c 	andeq	r6, r0, ip, asr r0
     b60:	00008000 	andeq	r8, r0, r0
     b64:	f3000a00 	vpmax.u8	d0, d0, d0
     b68:	01f35201 	mvnseq	r5, r1, lsl #4
     b6c:	01231c53 	teqeq	r3, r3, asr ip
     b70:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     b74:	00000000 	andeq	r0, r0, r0
     b78:	00008000 	andeq	r8, r0, r0
     b7c:	0000a400 	andeq	sl, r0, r0, lsl #8
     b80:	50000100 	andpl	r0, r0, r0, lsl #2
     b84:	000000a4 	andeq	r0, r0, r4, lsr #1
     b88:	00000118 	andeq	r0, r0, r8, lsl r1
     b8c:	02700003 	rsbseq	r0, r0, #3
     b90:	0001189f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
     b94:	00021800 	andeq	r1, r2, r0, lsl #16
     b98:	f3000400 	vshl.u8	d0, d0, d0
     b9c:	009f5001 	addseq	r5, pc, r1
     ba0:	00000000 	andeq	r0, r0, r0
     ba4:	80000000 	andhi	r0, r0, r0
     ba8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
     bac:	01000000 	mrseq	r0, (UNDEF: 0)
     bb0:	00f05100 	rscseq	r5, r0, r0, lsl #2
     bb4:	01600000 	cmneq	r0, r0
     bb8:	00010000 	andeq	r0, r1, r0
     bbc:	00016055 	andeq	r6, r1, r5, asr r0
     bc0:	00016800 	andeq	r6, r1, r0, lsl #16
     bc4:	51000100 	mrspl	r0, (UNDEF: 16)
     bc8:	00000168 	andeq	r0, r0, r8, ror #2
     bcc:	00000188 	andeq	r0, r0, r8, lsl #3
     bd0:	88550001 	ldmdahi	r5, {r0}^
     bd4:	9c000001 	stcls	0, cr0, [r0], {1}
     bd8:	01000001 	tsteq	r0, r1
     bdc:	019c5100 	orrseq	r5, ip, r0, lsl #2
     be0:	01bc0000 			; <UNDEFINED> instruction: 0x01bc0000
     be4:	00010000 	andeq	r0, r1, r0
     be8:	0001bc55 	andeq	fp, r1, r5, asr ip
     bec:	0001c400 	andeq	ip, r1, r0, lsl #8
     bf0:	51000100 	mrspl	r0, (UNDEF: 16)
     bf4:	000001c4 	andeq	r0, r0, r4, asr #3
     bf8:	000001fc 	strdeq	r0, [r0], -ip
     bfc:	fc550001 	mrrc2	0, 0, r0, r5, cr1
     c00:	18000001 	stmdane	r0, {r0}
     c04:	04000002 	streq	r0, [r0], #-2
     c08:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     c0c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     c10:	00000000 	andeq	r0, r0, r0
     c14:	00008000 	andeq	r8, r0, r0
     c18:	00009400 	andeq	r9, r0, r0, lsl #8
     c1c:	52000100 	andpl	r0, r0, #0, 2
     c20:	00000094 	muleq	r0, r4, r0
     c24:	000001fc 	strdeq	r0, [r0], -ip
     c28:	fc540001 	mrrc2	0, 0, r0, r4, cr1
     c2c:	18000001 	stmdane	r0, {r0}
     c30:	04000002 	streq	r0, [r0], #-2
     c34:	5201f300 	andpl	pc, r1, #0, 6
     c38:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     c3c:	00000000 	andeq	r0, r0, r0
     c40:	00008000 	andeq	r8, r0, r0
     c44:	00010000 	andeq	r0, r1, r0
     c48:	53000100 	movwpl	r0, #256	; 0x100
     c4c:	00000104 	andeq	r0, r0, r4, lsl #2
     c50:	00000108 	andeq	r0, r0, r8, lsl #2
     c54:	60530001 	subsvs	r0, r3, r1
     c58:	68000001 	stmdavs	r0, {r0}
     c5c:	01000001 	tsteq	r0, r1
     c60:	01685300 	cmneq	r8, r0, lsl #6
     c64:	01880000 	orreq	r0, r8, r0
     c68:	00040000 	andeq	r0, r4, r0
     c6c:	9f5301f3 	svcls	0x005301f3
     c70:	00000188 	andeq	r0, r0, r8, lsl #3
     c74:	00000190 	muleq	r0, r0, r1
     c78:	90530001 	subsls	r0, r3, r1
     c7c:	94000001 	strls	r0, [r0], #-1
     c80:	01000001 	tsteq	r0, r1
     c84:	01945c00 	orrseq	r5, r4, r0, lsl #24
     c88:	019c0000 	orrseq	r0, ip, r0
     c8c:	00010000 	andeq	r0, r1, r0
     c90:	00019c53 	andeq	r9, r1, r3, asr ip
     c94:	0001bc00 	andeq	fp, r1, r0, lsl #24
     c98:	f3000400 	vshl.u8	d0, d0, d0
     c9c:	bc9f5301 	ldclt	3, cr5, [pc], {1}
     ca0:	cc000001 	stcgt	0, cr0, [r0], {1}
     ca4:	01000001 	tsteq	r0, r1
     ca8:	01cc5300 	biceq	r5, ip, r0, lsl #6
     cac:	01cf0000 	biceq	r0, pc, r0
     cb0:	00010000 	andeq	r0, r1, r0
     cb4:	0001cf5c 	andeq	ip, r1, ip, asr pc
     cb8:	0001d400 	andeq	sp, r1, r0, lsl #8
     cbc:	f3000400 	vshl.u8	d0, d0, d0
     cc0:	009f5301 	addseq	r5, pc, r1, lsl #6
     cc4:	00000000 	andeq	r0, r0, r0
     cc8:	80000000 	andhi	r0, r0, r0
     ccc:	9c000000 	stcls	0, cr0, [r0], {-0}
     cd0:	02000000 	andeq	r0, r0, #0
     cd4:	9c009100 	stflsd	f1, [r0], {-0}
     cd8:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
     cdc:	01000001 	tsteq	r0, r1
     ce0:	01d45200 	bicseq	r5, r4, r0, lsl #4
     ce4:	01df0000 	bicseq	r0, pc, r0
     ce8:	00010000 	andeq	r0, r1, r0
     cec:	00000052 	andeq	r0, r0, r2, asr r0
     cf0:	00000000 	andeq	r0, r0, r0
     cf4:	00009c00 	andeq	r9, r0, r0, lsl #24
     cf8:	00011800 	andeq	r1, r1, r0, lsl #16
     cfc:	5d000100 	stfpls	f0, [r0, #-0]
     d00:	00000118 	andeq	r0, r0, r8, lsl r1
     d04:	0000011c 	andeq	r0, r0, ip, lsl r1
     d08:	1c530001 	mrrcne	0, 0, r0, r3, cr1
     d0c:	20000001 	andcs	r0, r0, r1
     d10:	01000001 	tsteq	r0, r1
     d14:	01205100 	teqeq	r0, r0, lsl #2
     d18:	01600000 	cmneq	r0, r0
     d1c:	00010000 	andeq	r0, r1, r0
     d20:	00016053 	andeq	r6, r1, r3, asr r0
     d24:	00016800 	andeq	r6, r1, r0, lsl #16
     d28:	5d000100 	stfpls	f0, [r0, #-0]
     d2c:	00000168 	andeq	r0, r0, r8, ror #2
     d30:	0000016c 	andeq	r0, r0, ip, ror #2
     d34:	6c5e0001 	mrrcvs	0, 0, r0, lr, cr1
     d38:	88000001 	stmdahi	r0, {r0}
     d3c:	01000001 	tsteq	r0, r1
     d40:	01885300 	orreq	r5, r8, r0, lsl #6
     d44:	01900000 	orrseq	r0, r0, r0
     d48:	00040000 	andeq	r0, r4, r0
     d4c:	9f7fa191 	svcls	0x007fa191
     d50:	00000190 	muleq	r0, r0, r1
     d54:	00000194 	muleq	r0, r4, r1
     d58:	94530001 	ldrbls	r0, [r3], #-1
     d5c:	9c000001 	stcls	0, cr0, [r0], {1}
     d60:	01000001 	tsteq	r0, r1
     d64:	019c5d00 	orrseq	r5, ip, r0, lsl #26
     d68:	01a00000 	moveq	r0, r0
     d6c:	00010000 	andeq	r0, r1, r0
     d70:	0001a05e 	andeq	sl, r1, lr, asr r0
     d74:	0001bc00 	andeq	fp, r1, r0, lsl #24
     d78:	53000100 	movwpl	r0, #256	; 0x100
     d7c:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     d80:	000001d4 	ldrdeq	r0, [r0], -r4
     d84:	d45d0001 	ldrble	r0, [sp], #-1
     d88:	df000001 	svcle	0x00000001
     d8c:	01000001 	tsteq	r0, r1
     d90:	00005300 	andeq	r5, r0, r0, lsl #6
     d94:	00000000 	andeq	r0, r0, r0
     d98:	00a00000 	adceq	r0, r0, r0
     d9c:	00ec0000 	rsceq	r0, ip, r0
     da0:	00010000 	andeq	r0, r1, r0
     da4:	0000ec5c 	andeq	lr, r0, ip, asr ip
     da8:	00010000 	andeq	r0, r1, r0
     dac:	53000100 	movwpl	r0, #256	; 0x100
     db0:	00000100 	andeq	r0, r0, r0, lsl #2
     db4:	00000104 	andeq	r0, r0, r4, lsl #2
     db8:	045c0001 	ldrbeq	r0, [ip], #-1
     dbc:	08000001 	stmdaeq	r0, {r0}
     dc0:	01000001 	tsteq	r0, r1
     dc4:	01085300 	mrseq	r5, (UNDEF: 56)
     dc8:	01180000 	tsteq	r8, r0
     dcc:	00010000 	andeq	r0, r1, r0
     dd0:	0001185c 	andeq	r1, r1, ip, asr r8
     dd4:	00011c00 	andeq	r1, r1, r0, lsl #24
     dd8:	50000100 	andpl	r0, r0, r0, lsl #2
     ddc:	0000011c 	andeq	r0, r0, ip, lsl r1
     de0:	0000013c 	andeq	r0, r0, ip, lsr r1
     de4:	445c0001 	ldrbmi	r0, [ip], #-1
     de8:	58000001 	stmdapl	r0, {r0}
     dec:	01000001 	tsteq	r0, r1
     df0:	01585000 	cmpeq	r8, r0
     df4:	01600000 	cmneq	r0, r0
     df8:	00010000 	andeq	r0, r1, r0
     dfc:	0001605c 	andeq	r6, r1, ip, asr r0
     e00:	00016800 	andeq	r6, r1, r0, lsl #16
     e04:	53000100 	movwpl	r0, #256	; 0x100
     e08:	00000168 	andeq	r0, r0, r8, ror #2
     e0c:	00000178 	andeq	r0, r0, r8, ror r1
     e10:	785c0001 	ldmdavc	ip, {r0}^
     e14:	80000001 	andhi	r0, r0, r1
     e18:	05000001 	streq	r0, [r0, #-1]
     e1c:	34007c00 	strcc	r7, [r0], #-3072	; 0xc00
     e20:	01809f25 	orreq	r9, r0, r5, lsr #30
     e24:	01880000 	orreq	r0, r8, r0
     e28:	00010000 	andeq	r0, r1, r0
     e2c:	0001885c 	andeq	r8, r1, ip, asr r8
     e30:	00019000 	andeq	r9, r1, r0
     e34:	53000100 	movwpl	r0, #256	; 0x100
     e38:	00000190 	muleq	r0, r0, r1
     e3c:	00000194 	muleq	r0, r4, r1
     e40:	945c0001 	ldrbls	r0, [ip], #-1
     e44:	9c000001 	stcls	0, cr0, [r0], {1}
     e48:	01000001 	tsteq	r0, r1
     e4c:	019c5300 	orrseq	r5, ip, r0, lsl #6
     e50:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
     e54:	00010000 	andeq	r0, r1, r0
     e58:	0001ac5c 	andeq	sl, r1, ip, asr ip
     e5c:	0001b400 	andeq	fp, r1, r0, lsl #8
     e60:	7c000500 	cfstr32vc	mvfx0, [r0], {-0}
     e64:	9f253100 	svcls	0x00253100
     e68:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
     e6c:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     e70:	bc5c0001 	mrrclt	0, 0, r0, ip, cr1
     e74:	cc000001 	stcgt	0, cr0, [r0], {1}
     e78:	01000001 	tsteq	r0, r1
     e7c:	01cc5300 	biceq	r5, ip, r0, lsl #6
     e80:	01cf0000 	biceq	r0, pc, r0
     e84:	00010000 	andeq	r0, r1, r0
     e88:	0001cf5c 	andeq	ip, r1, ip, asr pc
     e8c:	0001d400 	andeq	sp, r1, r0, lsl #8
     e90:	f3000400 	vshl.u8	d0, d0, d0
     e94:	d49f5301 	ldrle	r5, [pc], #769	; e9c <_start-0x7164>
     e98:	df000001 	svcle	0x00000001
     e9c:	01000001 	tsteq	r0, r1
     ea0:	00005c00 	andeq	r5, r0, r0, lsl #24
     ea4:	00000000 	andeq	r0, r0, r0
     ea8:	00ec0000 	rsceq	r0, ip, r0
     eac:	00fc0000 	rscseq	r0, ip, r0
     eb0:	00020000 	andeq	r0, r2, r0
     eb4:	00fc9f30 	rscseq	r9, ip, r0, lsr pc
     eb8:	01040000 	mrseq	r0, (UNDEF: 4)
     ebc:	00020000 	andeq	r0, r2, r0
     ec0:	01049f31 	tsteq	r4, r1, lsr pc
     ec4:	01080000 	mrseq	r0, (UNDEF: 8)
     ec8:	00020000 	andeq	r0, r2, r0
     ecc:	00009f30 	andeq	r9, r0, r0, lsr pc
     ed0:	00000000 	andeq	r0, r0, r0
     ed4:	02180000 	andseq	r0, r8, #0
     ed8:	02280000 	eoreq	r0, r8, #0
     edc:	00010000 	andeq	r0, r1, r0
     ee0:	00022850 	andeq	r2, r2, r0, asr r8
     ee4:	00023c00 	andeq	r3, r2, r0, lsl #24
     ee8:	f3000400 	vshl.u8	d0, d0, d0
     eec:	3c9f5001 	ldccc	0, cr5, [pc], {1}
     ef0:	68000002 	stmdavs	r0, {r1}
     ef4:	01000002 	tsteq	r0, r2
     ef8:	00005000 	andeq	r5, r0, r0
     efc:	00000000 	andeq	r0, r0, r0
     f00:	02180000 	andseq	r0, r8, #0
     f04:	022c0000 	eoreq	r0, ip, #0
     f08:	00010000 	andeq	r0, r1, r0
     f0c:	00022c51 	andeq	r2, r2, r1, asr ip
     f10:	00023c00 	andeq	r3, r2, r0, lsl #24
     f14:	f3000400 	vshl.u8	d0, d0, d0
     f18:	3c9f5101 	ldfccs	f5, [pc], {1}
     f1c:	68000002 	stmdavs	r0, {r1}
     f20:	01000002 	tsteq	r0, r2
     f24:	00005100 	andeq	r5, r0, r0, lsl #2
     f28:	00000000 	andeq	r0, r0, r0
     f2c:	02680000 	rsbeq	r0, r8, #0
     f30:	02900000 	addseq	r0, r0, #0
     f34:	00010000 	andeq	r0, r1, r0
     f38:	00029050 	andeq	r9, r2, r0, asr r0
     f3c:	0004dc00 	andeq	sp, r4, r0, lsl #24
     f40:	5b000100 	blpl	1348 <_start-0x6cb8>
     f44:	000004dc 	ldrdeq	r0, [r0], -ip
     f48:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     f4c:	01f30004 	mvnseq	r0, r4
     f50:	00009f50 	andeq	r9, r0, r0, asr pc
     f54:	00000000 	andeq	r0, r0, r0
     f58:	02680000 	rsbeq	r0, r8, #0
     f5c:	027c0000 	rsbseq	r0, ip, #0
     f60:	00010000 	andeq	r0, r1, r0
     f64:	00027c51 	andeq	r7, r2, r1, asr ip
     f68:	00029000 	andeq	r9, r2, r0
     f6c:	71000300 	mrsvc	r0, LR_irq
     f70:	02909f01 	addseq	r9, r0, #1, 30
     f74:	04f00000 	ldrbteq	r0, [r0], #0
     f78:	00040000 	andeq	r0, r4, r0
     f7c:	9f5101f3 	svcls	0x005101f3
	...
     f88:	00000268 	andeq	r0, r0, r8, ror #4
     f8c:	00000298 	muleq	r0, r8, r2
     f90:	98520001 	ldmdals	r2, {r0}^
     f94:	c0000002 	andgt	r0, r0, r2
     f98:	01000002 	tsteq	r0, r2
     f9c:	02c05200 	sbceq	r5, r0, #0, 4
     fa0:	048c0000 	streq	r0, [ip], #0
     fa4:	00010000 	andeq	r0, r1, r0
     fa8:	00048c56 	andeq	r8, r4, r6, asr ip
     fac:	0004f000 	andeq	pc, r4, r0
     fb0:	52000100 	andpl	r0, r0, #0, 2
	...
     fbc:	00000268 	andeq	r0, r0, r8, ror #4
     fc0:	00000284 	andeq	r0, r0, r4, lsl #5
     fc4:	00530001 	subseq	r0, r3, r1
     fc8:	00000000 	andeq	r0, r0, r0
     fcc:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
     fd0:	90000002 	andls	r0, r0, r2
     fd4:	01000002 	tsteq	r0, r2
     fd8:	02905000 	addseq	r5, r0, #0
     fdc:	02940000 	addseq	r0, r4, #0
     fe0:	00010000 	andeq	r0, r1, r0
     fe4:	00029454 	andeq	r9, r2, r4, asr r4
     fe8:	0002a000 	andeq	sl, r2, r0
     fec:	74000300 	strvc	r0, [r0], #-768	; 0x300
     ff0:	02a09f01 	adceq	r9, r0, #1, 30
     ff4:	02ac0000 	adceq	r0, ip, #0
     ff8:	00010000 	andeq	r0, r1, r0
     ffc:	0002ac54 	andeq	sl, r2, r4, asr ip
    1000:	0002b800 	andeq	fp, r2, r0, lsl #16
    1004:	74000300 	strvc	r0, [r0], #-768	; 0x300
    1008:	02b89f01 	adcseq	r9, r8, #1, 30
    100c:	04900000 	ldreq	r0, [r0], #0
    1010:	00010000 	andeq	r0, r1, r0
    1014:	00049054 	andeq	r9, r4, r4, asr r0
    1018:	00049c00 	andeq	r9, r4, r0, lsl #24
    101c:	74000300 	strvc	r0, [r0], #-768	; 0x300
    1020:	049c9f01 	ldreq	r9, [ip], #3841	; 0xf01
    1024:	04c80000 	strbeq	r0, [r8], #0
    1028:	00010000 	andeq	r0, r1, r0
    102c:	0004c854 	andeq	ip, r4, r4, asr r8
    1030:	0004d400 	andeq	sp, r4, r0, lsl #8
    1034:	50000100 	andpl	r0, r0, r0, lsl #2
    1038:	000004d4 	ldrdeq	r0, [r0], -r4
    103c:	000004dc 	ldrdeq	r0, [r0], -ip
    1040:	01740003 	cmneq	r4, r3
    1044:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1048:	00000000 	andeq	r0, r0, r0
    104c:	00028000 	andeq	r8, r2, r0
    1050:	0004dc00 	andeq	sp, r4, r0, lsl #24
    1054:	58000100 	stmdapl	r0, {r8}
    1058:	000004dc 	ldrdeq	r0, [r0], -ip
    105c:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1060:	01f3000a 	mvnseq	r0, sl
    1064:	5001f351 	andpl	pc, r1, r1, asr r3	; <UNPREDICTABLE>
    1068:	9f1c3122 	svcls	0x001c3122
	...
    1074:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
    1078:	000003c0 	andeq	r0, r0, r0, asr #7
    107c:	e4500001 	ldrb	r0, [r0], #-1
    1080:	e8000003 	stmda	r0, {r0, r1}
    1084:	01000003 	tsteq	r0, r3
    1088:	040c5000 	streq	r5, [ip], #-0
    108c:	04100000 	ldreq	r0, [r0], #-0
    1090:	00010000 	andeq	r0, r1, r0
    1094:	00043450 	andeq	r3, r4, r0, asr r4
    1098:	00043800 	andeq	r3, r4, r0, lsl #16
    109c:	50000100 	andpl	r0, r0, r0, lsl #2
    10a0:	00000440 	andeq	r0, r0, r0, asr #8
    10a4:	00000444 	andeq	r0, r0, r4, asr #8
    10a8:	68500001 	ldmdavs	r0, {r0}^
    10ac:	6c000004 	stcvs	0, cr0, [r0], {4}
    10b0:	01000004 	tsteq	r0, r4
    10b4:	04885000 	streq	r5, [r8], #0
    10b8:	04b00000 	ldrteq	r0, [r0], #0
    10bc:	00010000 	andeq	r0, r1, r0
    10c0:	00000050 	andeq	r0, r0, r0, asr r0
    10c4:	00000000 	andeq	r0, r0, r0
    10c8:	0002c000 	andeq	ip, r2, r0
    10cc:	0002c800 	andeq	ip, r2, r0, lsl #16
    10d0:	30000200 	andcc	r0, r0, r0, lsl #4
    10d4:	0002c89f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
    10d8:	0002cc00 	andeq	ip, r2, r0, lsl #24
    10dc:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    10e0:	000002d8 	ldrdeq	r0, [r0], -r8
    10e4:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
    10e8:	00570001 	subseq	r0, r7, r1
    10ec:	00000000 	andeq	r0, r0, r0
    10f0:	14000000 	strne	r0, [r0], #-0
    10f4:	1c000000 	stcne	0, cr0, [r0], {-0}
    10f8:	03000000 	movweq	r0, #0
    10fc:	9f047300 	svcls	0x00047300
    1100:	0000001c 	andeq	r0, r0, ip, lsl r0
    1104:	00000027 	andeq	r0, r0, r7, lsr #32
    1108:	00530001 	subseq	r0, r3, r1
    110c:	00000000 	andeq	r0, r0, r0
    1110:	54000000 	strpl	r0, [r0], #-0
    1114:	58000092 	stmdapl	r0, {r1, r4, r7}
    1118:	02000092 	andeq	r0, r0, #146	; 0x92
    111c:	589f3000 	ldmpl	pc, {ip, sp}	; <UNPREDICTABLE>
    1120:	5c000092 	stcpl	0, cr0, [r0], {146}	; 0x92
    1124:	01000092 	swpeq	r0, r2, [r0]	; <UNPREDICTABLE>
    1128:	00005000 	andeq	r5, r0, r0
    112c:	00000000 	andeq	r0, r0, r0
    1130:	926c0000 	rsbls	r0, ip, #0
    1134:	92700000 	rsbsls	r0, r0, #0
    1138:	00020000 	andeq	r0, r2, r0
    113c:	92709f30 	rsbsls	r9, r0, #48, 30	; 0xc0
    1140:	92740000 	rsbsls	r0, r4, #0
    1144:	00010000 	andeq	r0, r1, r0
    1148:	00927853 	addseq	r7, r2, r3, asr r8
    114c:	00928000 	addseq	r8, r2, r0
    1150:	53000100 	movwpl	r0, #256	; 0x100
	...
    1160:	00000004 	andeq	r0, r0, r4
    1164:	04500001 	ldrbeq	r0, [r0], #-1
    1168:	0c000000 	stceq	0, cr0, [r0], {-0}
    116c:	01000000 	mrseq	r0, (UNDEF: 0)
    1170:	000c5300 	andeq	r5, ip, r0, lsl #6
    1174:	00100000 	andseq	r0, r0, r0
    1178:	00010000 	andeq	r0, r1, r0
    117c:	00001050 	andeq	r1, r0, r0, asr r0
    1180:	00001c00 	andeq	r1, r0, r0, lsl #24
    1184:	53000100 	movwpl	r0, #256	; 0x100
	...
    1190:	00000030 	andeq	r0, r0, r0, lsr r0
    1194:	0000003b 	andeq	r0, r0, fp, lsr r0
    1198:	3b500001 	blcc	14011a4 <__bss_end__+0x13f6e8c>
    119c:	54000000 	strpl	r0, [r0], #-0
    11a0:	01000000 	mrseq	r0, (UNDEF: 0)
    11a4:	00005500 	andeq	r5, r0, r0, lsl #10
    11a8:	00000000 	andeq	r0, r0, r0
    11ac:	00440000 	subeq	r0, r4, r0
    11b0:	00480000 	subeq	r0, r8, r0
    11b4:	00010000 	andeq	r0, r1, r0
    11b8:	00000050 	andeq	r0, r0, r0, asr r0
    11bc:	00000000 	andeq	r0, r0, r0
    11c0:	00005400 	andeq	r5, r0, r0, lsl #8
    11c4:	00006000 	andeq	r6, r0, r0
    11c8:	50000100 	andpl	r0, r0, r0, lsl #2
    11cc:	00000060 	andeq	r0, r0, r0, rrx
    11d0:	00000068 	andeq	r0, r0, r8, rrx
    11d4:	01f30004 	mvnseq	r0, r4
    11d8:	00009f50 	andeq	r9, r0, r0, asr pc
    11dc:	00000000 	andeq	r0, r0, r0
    11e0:	00680000 	rsbeq	r0, r8, r0
    11e4:	00740000 	rsbseq	r0, r4, r0
    11e8:	00010000 	andeq	r0, r1, r0
    11ec:	00007450 	andeq	r7, r0, r0, asr r4
    11f0:	00007c00 	andeq	r7, r0, r0, lsl #24
    11f4:	f3000400 	vshl.u8	d0, d0, d0
    11f8:	009f5001 	addseq	r5, pc, r1
	...
    1204:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1208:	01000000 	mrseq	r0, (UNDEF: 0)
    120c:	00185000 	andseq	r5, r8, r0
    1210:	002c0000 	eoreq	r0, ip, r0
    1214:	00040000 	andeq	r0, r4, r0
    1218:	9f5001f3 	svcls	0x005001f3
    121c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1220:	00000040 	andeq	r0, r0, r0, asr #32
    1224:	40500001 	subsmi	r0, r0, r1
    1228:	64000000 	strvs	r0, [r0], #-0
    122c:	04000000 	streq	r0, [r0], #-0
    1230:	5001f300 	andpl	pc, r1, r0, lsl #6
    1234:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1238:	00000000 	andeq	r0, r0, r0
    123c:	00003c00 	andeq	r3, r0, r0, lsl #24
    1240:	00004b00 	andeq	r4, r0, r0, lsl #22
    1244:	52000100 	andpl	r0, r0, #0, 2
    1248:	0000004b 	andeq	r0, r0, fp, asr #32
    124c:	00000064 	andeq	r0, r0, r4, rrx
    1250:	01f30009 	mvnseq	r0, r9
    1254:	09032350 	stmdbeq	r3, {r4, r6, r8, r9, sp}
    1258:	009f1afc 			; <UNDEFINED> instruction: 0x009f1afc
    125c:	00000000 	andeq	r0, r0, r0
    1260:	64000000 	strvs	r0, [r0], #-0
    1264:	7c000000 	stcvc	0, cr0, [r0], {-0}
    1268:	01000000 	mrseq	r0, (UNDEF: 0)
    126c:	007c5000 	rsbseq	r5, ip, r0
    1270:	00900000 	addseq	r0, r0, r0
    1274:	00040000 	andeq	r0, r4, r0
    1278:	9f5001f3 	svcls	0x005001f3
    127c:	00000090 	muleq	r0, r0, r0
    1280:	0000009b 	muleq	r0, fp, r0
    1284:	9b500001 	blls	1401290 <__bss_end__+0x13f6f78>
    1288:	a0000000 	andge	r0, r0, r0
    128c:	04000000 	streq	r0, [r0], #-0
    1290:	5001f300 	andpl	pc, r1, r0, lsl #6
    1294:	0000a09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1298:	0000ac00 	andeq	sl, r0, r0, lsl #24
    129c:	50000100 	andpl	r0, r0, r0, lsl #2
    12a0:	000000ac 	andeq	r0, r0, ip, lsr #1
    12a4:	000000c0 	andeq	r0, r0, r0, asr #1
    12a8:	01f30004 	mvnseq	r0, r4
    12ac:	00c09f50 	sbceq	r9, r0, r0, asr pc
    12b0:	00df0000 	sbcseq	r0, pc, r0
    12b4:	00010000 	andeq	r0, r1, r0
    12b8:	0000df50 	andeq	sp, r0, r0, asr pc
    12bc:	0000f800 	andeq	pc, r0, r0, lsl #16
    12c0:	f3000400 	vshl.u8	d0, d0, d0
    12c4:	009f5001 	addseq	r5, pc, r1
    12c8:	00000000 	andeq	r0, r0, r0
    12cc:	64000000 	strvs	r0, [r0], #-0
    12d0:	80000000 	andhi	r0, r0, r0
    12d4:	01000000 	mrseq	r0, (UNDEF: 0)
    12d8:	00805100 	addeq	r5, r0, r0, lsl #2
    12dc:	00900000 	addseq	r0, r0, r0
    12e0:	00040000 	andeq	r0, r4, r0
    12e4:	9f5101f3 	svcls	0x005101f3
    12e8:	00000090 	muleq	r0, r0, r0
    12ec:	0000009b 	muleq	r0, fp, r0
    12f0:	9b510001 	blls	14412fc <__bss_end__+0x1436fe4>
    12f4:	a0000000 	andge	r0, r0, r0
    12f8:	04000000 	streq	r0, [r0], #-0
    12fc:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1300:	0000a09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1304:	0000b000 	andeq	fp, r0, r0
    1308:	51000100 	mrspl	r0, (UNDEF: 16)
    130c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    1310:	000000c0 	andeq	r0, r0, r0, asr #1
    1314:	01f30004 	mvnseq	r0, r4
    1318:	00c09f51 	sbceq	r9, r0, r1, asr pc
    131c:	00d40000 	sbcseq	r0, r4, r0
    1320:	00010000 	andeq	r0, r1, r0
    1324:	0000d451 	andeq	sp, r0, r1, asr r4
    1328:	0000d800 	andeq	sp, r0, r0, lsl #16
    132c:	71000400 	tstvc	r0, r0, lsl #8
    1330:	d89f1f00 	ldmle	pc, {r8, r9, sl, fp, ip}	; <UNPREDICTABLE>
    1334:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    1338:	04000000 	streq	r0, [r0], #-0
    133c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1340:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1344:	00000000 	andeq	r0, r0, r0
    1348:	0000c800 	andeq	ip, r0, r0, lsl #16
    134c:	0000cc00 	andeq	ip, r0, r0, lsl #24
    1350:	52000100 	andpl	r0, r0, #0, 2
    1354:	000000cc 	andeq	r0, r0, ip, asr #1
    1358:	000000d8 	ldrdeq	r0, [r0], -r8
    135c:	14030005 	strne	r0, [r3], #-5
    1360:	d80000a3 	stmdale	r0, {r0, r1, r5, r7}
    1364:	df000000 	svcle	0x00000000
    1368:	01000000 	mrseq	r0, (UNDEF: 0)
    136c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    1378:	000b0000 	andeq	r0, fp, r0
    137c:	00010000 	andeq	r0, r1, r0
    1380:	00000b50 	andeq	r0, r0, r0, asr fp
    1384:	00001400 	andeq	r1, r0, r0, lsl #8
    1388:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	00008010 	andeq	r8, r0, r0, lsl r0
  14:	0000019c 	muleq	r0, ip, r1
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	04630002 	strbteq	r0, [r3], #-2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	000081ac 	andeq	r8, r0, ip, lsr #3
  34:	0000046c 	andeq	r0, r0, ip, ror #8
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	0dec0002 	stcleq	0, cr0, [ip, #8]!
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	00008684 	andeq	r8, r0, r4, lsl #13
  54:	00000518 	andeq	r0, r0, r8, lsl r5
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	176f0002 	strbne	r0, [pc, -r2]!
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	00008c5c 	andeq	r8, r0, ip, asr ip
  74:	00000020 	andeq	r0, r0, r0, lsr #32
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	184e0002 	stmdane	lr, {r1}^
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	00008c7c 	andeq	r8, r0, ip, ror ip
  94:	00000058 	andeq	r0, r0, r8, asr r0
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	19e30002 	stmibne	r3!, {r1}^
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	00008cd4 	ldrdeq	r8, [r0], -r4
  b4:	00000034 	andeq	r0, r0, r4, lsr r0
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	1ad50002 	bne	ff5400d4 <__bss_end__+0xff535dbc>
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	00008d08 	andeq	r8, r0, r8, lsl #26
  d4:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	212d0002 	teqcs	sp, r2
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	000091f8 	strdeq	r9, [r0], -r8
  f4:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	22300002 	eorscs	r0, r0, #2
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	00009220 	andeq	r9, r0, r0, lsr #4
 114:	00000034 	andeq	r0, r0, r4, lsr r0
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	233f0002 	teqcs	pc, #2
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	00009254 	andeq	r9, r0, r4, asr r2
 134:	00000074 	andeq	r0, r0, r4, ror r0
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	24f00002 	ldrbtcs	r0, [r0], #2
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	000092c8 	andeq	r9, r0, r8, asr #5
 154:	0000007c 	andeq	r0, r0, ip, ror r0
	...
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	269e0002 	ldrcs	r0, [lr], r2
 168:	00040000 	andeq	r0, r4, r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	0000961c 	andeq	r9, r0, ip, lsl r6
 174:	00000178 	andeq	r0, r0, r8, ror r1
	...
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	29ea0002 	stmibcs	sl!, {r1}^
 188:	00040000 	andeq	r0, r4, r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	00009794 	muleq	r0, r4, r7
 194:	00000014 	andeq	r0, r0, r4, lsl r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	000000d4 	ldrdeq	r0, [r0], -r4
   4:	000000dc 	ldrdeq	r0, [r0], -ip
   8:	000000e0 	andeq	r0, r0, r0, ror #1
   c:	000000fc 	strdeq	r0, [r0], -ip
	...
  18:	000001ac 	andeq	r0, r0, ip, lsr #3
  1c:	000001ec 	andeq	r0, r0, ip, ror #3
  20:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  24:	000001f4 	strdeq	r0, [r0], -r4
	...
  30:	0000026c 	andeq	r0, r0, ip, ror #4
  34:	00000274 	andeq	r0, r0, r4, ror r2
  38:	0000027c 	andeq	r0, r0, ip, ror r2
  3c:	00000284 	andeq	r0, r0, r4, lsl #5
	...
  48:	0000042c 	andeq	r0, r0, ip, lsr #8
  4c:	00000440 	andeq	r0, r0, r0, asr #8
  50:	00000444 	andeq	r0, r0, r4, asr #8
  54:	00000484 	andeq	r0, r0, r4, lsl #9
	...
  60:	00009254 	andeq	r9, r0, r4, asr r2
  64:	000092c8 	andeq	r9, r0, r8, asr #5
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000142 	andeq	r0, r0, r2, asr #2
   4:	00e40002 	rsceq	r0, r4, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2f010000 	svccs	0x00010000
  1c:	2f727375 	svccs	0x00727375
  20:	61636f6c 	cmnvs	r3, ip, ror #30
  24:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
  28:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
  2c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
  30:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
  34:	61652d65 	cmnvs	r5, r5, ror #26
  38:	342f6962 	strtcc	r6, [pc], #-2402	; 40 <_start-0x7fc0>
  3c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
  40:	3173632d 	cmncc	r3, sp, lsr #6
  44:	2f653037 	svccs	0x00653037
  48:	2f62696c 	svccs	0x0062696c
  4c:	2f636367 	svccs	0x00636367
  50:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
  54:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
  58:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
  5c:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
  60:	2f332e38 	svccs	0x00332e38
  64:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  68:	00656475 	rsbeq	r6, r5, r5, ror r4
  6c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
  70:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
  74:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
  78:	2f6e756a 	svccs	0x006e756a
  7c:	6b736544 	blvs	1cd9594 <__bss_end__+0x1ccf27c>
  80:	2f706f74 	svccs	0x00706f74
  84:	6f686373 	svcvs	0x00686373
  88:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
  8c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
  90:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
  94:	53432f30 	movtpl	r2, #16176	; 0x3f30
  98:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
  9c:	3173632f 	cmncc	r3, pc, lsr #6
  a0:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
  a4:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
  a8:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
  ac:	00697062 	rsbeq	r7, r9, r2, rrx
  b0:	742d3100 	strtvc	r3, [sp], #-256	; 0x100
  b4:	2d747365 	ldclcs	3, cr7, [r4, #-404]!	; 0xfffffe6c
  b8:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
  bc:	632e6461 	teqvs	lr, #1627389952	; 0x61000000
  c0:	00000000 	andeq	r0, r0, r0
  c4:	2d697072 	stclcs	0, cr7, [r9, #-456]!	; 0xfffffe38
  c8:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
  cc:	682e6461 	stmdavs	lr!, {r0, r5, r6, sl, sp, lr}
  d0:	00000000 	andeq	r0, r0, r0
  d4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
  d8:	672d746e 	strvs	r7, [sp, -lr, ror #8]!
  dc:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
  e0:	00000100 	andeq	r0, r0, r0, lsl #2
  e4:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
  e8:	00020068 	andeq	r0, r2, r8, rrx
  ec:	05000000 	streq	r0, [r0, #-0]
  f0:	00801002 	addeq	r1, r0, r2
  f4:	01120300 	tsteq	r2, r0, lsl #6
  f8:	00834b6a 	addeq	r4, r3, sl, ror #22
  fc:	06010402 	streq	r0, [r1], -r2, lsl #8
 100:	2ff606ba 	svccs	0x00f606ba
 104:	30832f83 	addcc	r2, r3, r3, lsl #31
 108:	2f2fd84b 	svccs	0x002fd84b
 10c:	2f854e30 	svccs	0x00854e30
 110:	02002b30 	andeq	r2, r0, #48, 22	; 0xc000
 114:	002f0204 	eoreq	r0, pc, r4, lsl #4
 118:	67020402 	strvs	r0, [r2, -r2, lsl #8]
 11c:	02040200 	andeq	r0, r4, #0, 4
 120:	0402004b 	streq	r0, [r2], #-75	; 0x4b
 124:	02004702 	andeq	r4, r0, #524288	; 0x80000
 128:	2e060104 	adfcss	f0, f6, f4
 12c:	9f314f06 	svcls	0x00314f06
 130:	01040200 	mrseq	r0, R12_usr
 134:	bb066606 	bllt	199954 <__bss_end__+0x18f63c>
 138:	01040200 	mrseq	r0, R12_usr
 13c:	bb068206 	bllt	1a095c <__bss_end__+0x196644>
 140:	0014024b 	andseq	r0, r4, fp, asr #4
 144:	01970101 	orrseq	r0, r7, r1, lsl #2
 148:	00020000 	andeq	r0, r2, r0
 14c:	000000e8 	andeq	r0, r0, r8, ror #1
 150:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 154:	0101000d 	tsteq	r1, sp
 158:	00000101 	andeq	r0, r0, r1, lsl #2
 15c:	00000100 	andeq	r0, r0, r0, lsl #2
 160:	73752f01 	cmnvc	r5, #1, 30
 164:	6f6c2f72 	svcvs	0x006c2f72
 168:	2f6c6163 	svccs	0x006c6163
 16c:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
 170:	612f7261 	teqvs	pc, r1, ror #4
 174:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 178:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 17c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 180:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 184:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
 188:	30373173 	eorscc	r3, r7, r3, ror r1
 18c:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 190:	63672f62 	cmnvs	r7, #392	; 0x188
 194:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
 198:	6f6e2d6d 	svcvs	0x006e2d6d
 19c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 1a0:	2f696261 	svccs	0x00696261
 1a4:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 1a8:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
 1ac:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
 1b0:	552f0065 	strpl	r0, [pc, #-101]!	; 153 <_start-0x7ead>
 1b4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 1b8:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 1bc:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 1c0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 1c4:	6f746b73 	svcvs	0x00746b73
 1c8:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 1cc:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 34 <_start-0x7fcc>
 1d0:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 1d4:	31726574 	cmncc	r2, r4, ror r5
 1d8:	2f303239 	svccs	0x00303239
 1dc:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 1e0:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 1e4:	30343173 	eorscc	r3, r4, r3, ror r1
 1e8:	30322d65 	eorscc	r2, r2, r5, ror #26
 1ec:	2f6e6977 	svccs	0x006e6977
 1f0:	7062696c 	rsbvc	r6, r2, ip, ror #18
 1f4:	51000069 	tstpl	r0, r9, rrx
 1f8:	0000682e 	andeq	r6, r0, lr, lsr #16
 1fc:	70720000 	rsbsvc	r0, r2, r0
 200:	68742d69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, sl, fp, sp}^
 204:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 208:	0000632e 	andeq	r6, r0, lr, lsr #6
 20c:	70720000 	rsbsvc	r0, r2, r0
 210:	68742d69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, sl, fp, sp}^
 214:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 218:	0000682e 	andeq	r6, r0, lr, lsr #16
 21c:	74730000 	ldrbtvc	r0, [r3], #-0
 220:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
 224:	6363672d 	cmnvs	r3, #11796480	; 0xb40000
 228:	0100682e 	tsteq	r0, lr, lsr #16
 22c:	70720000 	rsbsvc	r0, r2, r0
 230:	00682e69 	rsbeq	r2, r8, r9, ror #28
 234:	00000002 	andeq	r0, r0, r2
 238:	ac020500 	cfstr32ge	mvfx0, [r2], {-0}
 23c:	03000081 	movweq	r0, #129	; 0x81
 240:	0301010f 	movweq	r0, #4367	; 0x110f
 244:	4b134a1b 	blmi	4d2ab8 <__bss_end__+0x4c87a0>
 248:	2f686767 	svccs	0x00686767
 24c:	4b67134f 	blmi	19c4f90 <__bss_end__+0x19bac78>
 250:	02044b2f 	andeq	r4, r4, #48128	; 0xbc00
 254:	4c4a6d03 	mcrrmi	13, 0, r6, sl, cr3
 258:	67030104 	strvs	r0, [r3, -r4, lsl #2]
 25c:	00684b82 	rsbeq	r4, r8, r2, lsl #23
 260:	06010402 	streq	r0, [r1], -r2, lsl #8
 264:	00bb0666 	adcseq	r0, fp, r6, ror #12
 268:	06010402 	streq	r0, [r1], -r2, lsl #8
 26c:	4db80666 	ldcmi	6, cr0, [r8, #408]!	; 0x198
 270:	002fa12f 	eoreq	sl, pc, pc, lsr #2
 274:	06010402 	streq	r0, [r1], -r2, lsl #8
 278:	2fbc064a 	svccs	0x00bc064a
 27c:	0402004b 	streq	r0, [r2], #-75	; 0x4b
 280:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 284:	2f4b67bd 	svccs	0x004b67bd
 288:	4a7a032f 	bmi	1e80f4c <__bss_end__+0x1e76c34>
 28c:	03020435 	movweq	r0, #9269	; 0x2435
 290:	4d2f9e74 	stcmi	14, cr9, [pc, #-464]!	; c8 <_start-0x7f38>
 294:	0084674b 	addeq	r6, r4, fp, asr #14
 298:	06010402 	streq	r0, [r1], -r2, lsl #8
 29c:	a0bb064a 	adcsge	r0, fp, sl, asr #12
 2a0:	14d66e03 	ldrbne	r6, [r6], #3587	; 0xe03
 2a4:	67821c03 	strvs	r1, [r2, r3, lsl #24]
 2a8:	4b302f51 	blmi	c0bff4 <__bss_end__+0xc01cdc>
 2ac:	03856868 	orreq	r6, r5, #104, 16	; 0x680000
 2b0:	4c4b2e0a 	mcrrmi	14, 0, r2, fp, cr10
 2b4:	bf688483 	svclt	0x00688483
 2b8:	834b8535 	movthi	r8, #46389	; 0xb535
 2bc:	9e230383 	cdpls	3, 2, cr0, cr3, cr3, {4}
 2c0:	304b834d 	subcc	r8, fp, sp, asr #6
 2c4:	86420867 	strbhi	r0, [r2], -r7, ror #16
 2c8:	f254034b 	vcgt.s16	q8, q2, <illegal reg q5.5>
 2cc:	67358435 			; <UNDEFINED> instruction: 0x67358435
 2d0:	1b034c83 	blne	d34e4 <__bss_end__+0xc91cc>
 2d4:	28082fba 	stmdacs	r8, {r1, r3, r4, r5, r7, r8, r9, sl, fp, sp}
 2d8:	2f26082f 	svccs	0x0026082f
 2dc:	01001202 	tsteq	r0, r2, lsl #4
 2e0:	00027001 	andeq	r7, r2, r1
 2e4:	28000200 	stmdacs	r0, {r9}
 2e8:	02000001 	andeq	r0, r0, #1
 2ec:	0d0efb01 	vstreq	d15, [lr, #-4]
 2f0:	01010100 	mrseq	r0, (UNDEF: 17)
 2f4:	00000001 	andeq	r0, r0, r1
 2f8:	01000001 	tsteq	r0, r1
 2fc:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 300:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
 304:	432f6c61 	teqmi	pc, #24832	; 0x6100
 308:	616c6c65 	cmnvs	ip, r5, ror #24
 30c:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 310:	6f6e2d6d 	svcvs	0x006e2d6d
 314:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 318:	2f696261 	svccs	0x00696261
 31c:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 320:	73632d33 	cmnvc	r3, #3264	; 0xcc0
 324:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
 328:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 32c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
 330:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 334:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 338:	61652d65 	cmnvs	r5, r5, ror #26
 33c:	342f6962 	strtcc	r6, [pc], #-2402	; 344 <_start-0x7cbc>
 340:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 344:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 348:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
 34c:	73552f00 	cmpvc	r5, #0, 30
 350:	2f737265 	svccs	0x00737265
 354:	61697262 	cmnvs	r9, r2, ror #4
 358:	6e756a6e 	vsubvs.f32	s13, s10, s29
 35c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 360:	706f746b 	rsbvc	r7, pc, fp, ror #8
 364:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 368:	2f6c6f6f 	svccs	0x006c6f6f
 36c:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 370:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 374:	432f3032 	teqmi	pc, #50	; 0x32
 378:	30343153 	eorscc	r3, r4, r3, asr r1
 37c:	73632f45 	cmnvc	r3, #276	; 0x114
 380:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 384:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 388:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 1ec <_start-0x7e14>
 38c:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 390:	73752f00 	cmnvc	r5, #0, 30
 394:	6f6c2f72 	svcvs	0x006c2f72
 398:	2f6c6163 	svccs	0x006c6163
 39c:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
 3a0:	612f7261 	teqvs	pc, r1, ror #4
 3a4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 3a8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 3ac:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 3b0:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 3b4:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
 3b8:	30373173 	eorscc	r3, r7, r3, ror r1
 3bc:	72612f65 	rsbvc	r2, r1, #404	; 0x194
 3c0:	6f6e2d6d 	svcvs	0x006e2d6d
 3c4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 3c8:	2f696261 	svccs	0x00696261
 3cc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 3d0:	00656475 	rsbeq	r6, r5, r5, ror r4
 3d4:	72696300 	rsbvc	r6, r9, #0, 6
 3d8:	616c7563 	cmnvs	ip, r3, ror #10
 3dc:	00632e72 	rsbeq	r2, r3, r2, ror lr
 3e0:	63000000 	movwvs	r0, #0
 3e4:	75637269 	strbvc	r7, [r3, #-617]!	; 0x269
 3e8:	2e72616c 	rpwcssz	f6, f2, #4.0
 3ec:	00000068 	andeq	r0, r0, r8, rrx
 3f0:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
 3f4:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
 3f8:	00010068 	andeq	r0, r1, r8, rrx
 3fc:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 400:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 404:	74730000 	ldrbtvc	r0, [r3], #-0
 408:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
 40c:	0300682e 	movweq	r6, #2094	; 0x82e
 410:	00000000 	andeq	r0, r0, r0
 414:	86840205 	strhi	r0, [r4], r5, lsl #4
 418:	4b190000 	blmi	640420 <__bss_end__+0x636108>
 41c:	cd030204 	sfmgt	f0, 4, [r3, #-16]
 420:	04998200 	ldreq	r8, [r9], #512	; 0x200
 424:	7fb80301 	svcvc	0x00b80301
 428:	d822089e 	stmdale	r2!, {r1, r2, r3, r4, r7, fp}
 42c:	3f089f2f 	svccc	0x00089f2f
 430:	9f676767 	svcls	0x00676767
 434:	0302044b 	movweq	r0, #9291	; 0x244b
 438:	0104ba3a 	tsteq	r4, sl, lsr sl
 43c:	004a4703 	subeq	r4, sl, r3, lsl #14
 440:	06010402 	streq	r0, [r1], -r2, lsl #8
 444:	0602044a 	streq	r0, [r2], -sl, asr #8
 448:	04ba3c03 	ldrteq	r3, [sl], #3075	; 0xc03
 44c:	ba450301 	blt	1141058 <__bss_end__+0x1136d40>
 450:	01040200 	mrseq	r0, R12_usr
 454:	02044a06 	andeq	r4, r4, #24576	; 0x6000
 458:	ba3d0306 	blt	f41078 <__bss_end__+0xf36d60>
 45c:	44030104 	strmi	r0, [r3], #-260	; 0x104
 460:	0402009e 	streq	r0, [r2], #-158	; 0x9e
 464:	044a0601 	strbeq	r0, [sl], #-1537	; 0x601
 468:	37030602 	strcc	r0, [r3, -r2, lsl #12]
 46c:	820a03ba 	andhi	r0, sl, #-402653182	; 0xe8000002
 470:	834b4b4c 	movthi	r4, #47948	; 0xbb4c
 474:	bb030104 	bllt	c088c <__bss_end__+0xb6574>
 478:	02044a7f 	andeq	r4, r4, #520192	; 0x7f000
 47c:	2e00c103 	mvfcss	f4, f3
 480:	40030104 	andmi	r0, r3, r4, lsl #2
 484:	0402002e 	streq	r0, [r2], #-46	; 0x2e
 488:	664a0601 	strbvs	r0, [sl], -r1, lsl #12
 48c:	04040200 	streq	r0, [r4], #-512	; 0x200
 490:	04020066 	streq	r0, [r2], #-102	; 0x66
 494:	03064a01 	movweq	r4, #27137	; 0x6a01
 498:	01240219 	teqeq	r4, r9, lsl r2
 49c:	1c030204 	sfmne	f0, 4, [r3], {4}
 4a0:	4a0b034a 	bmi	2c11d0 <__bss_end__+0x2b6eb8>
 4a4:	04020032 	streq	r0, [r2], #-50	; 0x32
 4a8:	2e710301 	cdpcs	3, 7, cr0, cr1, cr1, {0}
 4ac:	01040200 	mrseq	r0, R12_usr
 4b0:	4c4a0a03 	mcrrmi	10, 0, r0, sl, cr3
 4b4:	46834b2f 	strmi	r4, [r3], pc, lsr #22
 4b8:	5e030104 	adfpls	f0, f3, f4
 4bc:	85a04e2e 	strhi	r4, [r0, #3630]!	; 0xe2e
 4c0:	02040200 	andeq	r0, r4, #0, 4
 4c4:	0402004b 	streq	r0, [r2], #-75	; 0x4b
 4c8:	02006502 	andeq	r6, r0, #8388608	; 0x800000
 4cc:	2e060104 	adfcss	f0, f6, f4
 4d0:	5a034c06 	bpl	d34f0 <__bss_end__+0xc91d8>
 4d4:	0204832e 	andeq	r8, r4, #-1207959552	; 0xb8000000
 4d8:	042e3603 	strteq	r3, [lr], #-1539	; 0x603
 4dc:	ba4b0301 	blt	12c10e8 <__bss_end__+0x12b6dd0>
 4e0:	3148834c 	cmpcc	r8, ip, asr #6
 4e4:	0302044d 	movweq	r0, #9293	; 0x244d
 4e8:	01044a2e 	tsteq	r4, lr, lsr #20
 4ec:	4cd65403 	cfldrdmi	mvd5, [r6], {3}
 4f0:	0204684b 	andeq	r6, r4, #4915200	; 0x4b0000
 4f4:	044a2703 	strbeq	r2, [sl], #-1795	; 0x703
 4f8:	9e5a0301 	cdpls	3, 5, cr0, cr10, cr1, {0}
 4fc:	01040200 	mrseq	r0, R12_usr
 500:	b5064a06 	strlt	r4, [r6, #-2566]	; 0xa06
 504:	15032f50 	strne	r2, [r3, #-3920]	; 0xf50
 508:	030204ba 	movweq	r0, #9402	; 0x24ba
 50c:	04d72e0f 	ldrbeq	r2, [r7], #3599	; 0xe0f
 510:	2e730301 	cdpcs	3, 7, cr0, cr3, cr1, {0}
 514:	1b030204 	blne	c0d2c <__bss_end__+0xb6a14>
 518:	31302f66 	teqcc	r0, r6, ror #30
 51c:	62030104 	andvs	r0, r3, #4, 2
 520:	0302044a 	movweq	r0, #9290	; 0x244a
 524:	032f2e18 	teqeq	pc, #24, 28	; 0x180
 528:	13032e6e 	movwne	r2, #15982	; 0x3e6e
 52c:	832f4c82 	teqhi	pc, #33280	; 0x8200
 530:	03010447 	movweq	r0, #5191	; 0x1447
 534:	b84b2e65 	stmdalt	fp, {r0, r2, r5, r6, r9, sl, fp, sp}^
 538:	01040200 	mrseq	r0, R12_usr
 53c:	4d062e06 	stcmi	14, cr2, [r6, #-24]	; 0xffffffe8
 540:	044c0204 	strbeq	r0, [ip], #-516	; 0x204
 544:	02008101 	andeq	r8, r0, #1073741824	; 0x40000000
 548:	4a060104 	bmi	180960 <__bss_end__+0x176648>
 54c:	6750b506 	ldrbvs	fp, [r0, -r6, lsl #10]
 550:	01000e02 	tsteq	r0, r2, lsl #28
 554:	0000ec01 	andeq	lr, r0, r1, lsl #24
 558:	d0000200 	andle	r0, r0, r0, lsl #4
 55c:	02000000 	andeq	r0, r0, #0
 560:	0d0efb01 	vstreq	d15, [lr, #-4]
 564:	01010100 	mrseq	r0, (UNDEF: 17)
 568:	00000001 	andeq	r0, r0, r1
 56c:	01000001 	tsteq	r0, r1
 570:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 574:	73752f00 	cmnvc	r5, #0, 30
 578:	6f6c2f72 	svcvs	0x006c2f72
 57c:	2f6c6163 	svccs	0x006c6163
 580:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
 584:	612f7261 	teqvs	pc, r1, ror #4
 588:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 58c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 590:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 594:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 598:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
 59c:	30373173 	eorscc	r3, r7, r3, ror r1
 5a0:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 5a4:	63672f62 	cmnvs	r7, #392	; 0x188
 5a8:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
 5ac:	6f6e2d6d 	svcvs	0x006e2d6d
 5b0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 5b4:	2f696261 	svccs	0x00696261
 5b8:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 5bc:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
 5c0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
 5c4:	752f0065 	strvc	r0, [pc, #-101]!	; 567 <_start-0x7a99>
 5c8:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 404 <_start-0x7bfc>
 5cc:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 5d0:	6c65432f 	stclvs	3, cr4, [r5], #-188	; 0xffffff44
 5d4:	2f72616c 	svccs	0x0072616c
 5d8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 5dc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 5e0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 5e4:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 5e8:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
 5ec:	37317363 	ldrcc	r7, [r1, -r3, ror #6]!
 5f0:	612f6530 	teqvs	pc, r0, lsr r5	; <UNPREDICTABLE>
 5f4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 5f8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 5fc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 600:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 604:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
 608:	656d0000 	strbvs	r0, [sp, #-0]!
 60c:	7465736d 	strbtvc	r7, [r5], #-877	; 0x36d
 610:	0100632e 	tsteq	r0, lr, lsr #6
 614:	74730000 	ldrbtvc	r0, [r3], #-0
 618:	66656464 	strbtvs	r6, [r5], -r4, ror #8
 61c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 620:	74730000 	ldrbtvc	r0, [r3], #-0
 624:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
 628:	0300682e 	movweq	r6, #2094	; 0x82e
 62c:	00000000 	andeq	r0, r0, r0
 630:	8c5c0205 	lfmhi	f0, 2, [ip], {5}
 634:	13140000 	tstne	r4, #0
 638:	02002f4c 	andeq	r2, r0, #76, 30	; 0x130
 63c:	4d490104 	stfmie	f0, [r9, #-16]
 640:	01000202 	tsteq	r0, r2, lsl #4
 644:	00010201 	andeq	r0, r1, r1, lsl #4
 648:	eb000200 	bl	e50 <_start-0x71b0>
 64c:	02000000 	andeq	r0, r0, #0
 650:	0d0efb01 	vstreq	d15, [lr, #-4]
 654:	01010100 	mrseq	r0, (UNDEF: 17)
 658:	00000001 	andeq	r0, r0, r1
 65c:	01000001 	tsteq	r0, r1
 660:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 664:	73752f00 	cmnvc	r5, #0, 30
 668:	6f6c2f72 	svcvs	0x006c2f72
 66c:	2f6c6163 	svccs	0x006c6163
 670:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
 674:	612f7261 	teqvs	pc, r1, ror #4
 678:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 67c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 680:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 684:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 688:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
 68c:	30373173 	eorscc	r3, r7, r3, ror r1
 690:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 694:	63672f62 	cmnvs	r7, #392	; 0x188
 698:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
 69c:	6f6e2d6d 	svcvs	0x006e2d6d
 6a0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 6a4:	2f696261 	svccs	0x00696261
 6a8:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 6ac:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
 6b0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
 6b4:	552f0065 	strpl	r0, [pc, #-101]!	; 657 <_start-0x79a9>
 6b8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 6bc:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 6c0:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 6c4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 6c8:	6f746b73 	svcvs	0x00746b73
 6cc:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 6d0:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 538 <_start-0x7ac8>
 6d4:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 6d8:	31726574 	cmncc	r2, r4, ror r5
 6dc:	2f303239 	svccs	0x00303239
 6e0:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 6e4:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 6e8:	30343173 	eorscc	r3, r4, r3, ror r1
 6ec:	30322d65 	eorscc	r2, r2, r5, ror #26
 6f0:	2f6e6977 	svccs	0x006e6977
 6f4:	7062696c 	rsbvc	r6, r2, ip, ror #18
 6f8:	70000069 	andvc	r0, r0, r9, rrx
 6fc:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 700:	00632e6b 	rsbeq	r2, r3, fp, ror #28
 704:	73000001 	movwvc	r0, #1
 708:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
 70c:	00682e67 	rsbeq	r2, r8, r7, ror #28
 710:	3c000002 	stccc	0, cr0, [r0], {2}
 714:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 718:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
 71c:	0000003e 	andeq	r0, r0, lr, lsr r0
 720:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 724:	0300682e 	movweq	r6, #2094	; 0x82e
 728:	61760000 	cmnvs	r6, r0
 72c:	6972702d 	ldmdbvs	r2!, {r0, r2, r3, r5, ip, sp, lr}^
 730:	2e6b746e 	cdpcs	4, 6, cr7, cr11, cr14, {3}
 734:	00010068 	andeq	r0, r1, r8, rrx
 738:	05000000 	streq	r0, [r0, #-0]
 73c:	008c7c02 	addeq	r7, ip, r2, lsl #24
 740:	4b6b1700 	blmi	1ac6348 <__bss_end__+0x1abc030>
 744:	0e0289bf 	mcreq	9, 0, r8, cr2, cr15, {5}
 748:	96010100 	strls	r0, [r1], -r0, lsl #2
 74c:	02000000 	andeq	r0, r0, #0
 750:	00006f00 	andeq	r6, r0, r0, lsl #30
 754:	fb010200 	blx	40f5e <__bss_end__+0x36c46>
 758:	01000d0e 	tsteq	r0, lr, lsl #26
 75c:	00010101 	andeq	r0, r1, r1, lsl #2
 760:	00010000 	andeq	r0, r1, r0
 764:	696c0100 	stmdbvs	ip!, {r8}^
 768:	2f006362 	svccs	0x00006362
 76c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 770:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 774:	6a6e6169 	bvs	1b98d20 <__bss_end__+0x1b8ea08>
 778:	442f6e75 	strtmi	r6, [pc], #-3701	; 780 <_start-0x7880>
 77c:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 780:	732f706f 	teqvc	pc, #111	; 0x6f
 784:	6f6f6863 	svcvs	0x006f6863
 788:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 78c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 790:	30323931 	eorscc	r3, r2, r1, lsr r9
 794:	3153432f 	cmpcc	r3, pc, lsr #6
 798:	2f453034 	svccs	0x00453034
 79c:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 7a0:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 7a4:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 7a8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 7ac:	00006970 	andeq	r6, r0, r0, ror r9
 7b0:	6b747570 	blvs	1d1dd78 <__bss_end__+0x1d13a60>
 7b4:	0100632e 	tsteq	r0, lr, lsr #6
 7b8:	70720000 	rsbsvc	r0, r2, r0
 7bc:	00682e69 	rsbeq	r2, r8, r9, ror #28
 7c0:	00000002 	andeq	r0, r0, r2
 7c4:	d4020500 	strle	r0, [r2], #-1280	; 0x500
 7c8:	1500008c 	strne	r0, [r0, #-140]	; 0x8c
 7cc:	02002d4c 	andeq	r2, r0, #76, 26	; 0x1300
 7d0:	002f0204 	eoreq	r0, pc, r4, lsl #4
 7d4:	49020402 	stmdbmi	r2, {r1, sl}
 7d8:	01040200 	mrseq	r0, R12_usr
 7dc:	6b062e06 	blvs	18bffc <__bss_end__+0x181ce4>
 7e0:	01000602 	tsteq	r0, r2, lsl #12
 7e4:	0001dc01 	andeq	sp, r1, r1, lsl #24
 7e8:	df000200 	svcle	0x00000200
 7ec:	02000000 	andeq	r0, r0, #0
 7f0:	0d0efb01 	vstreq	d15, [lr, #-4]
 7f4:	01010100 	mrseq	r0, (UNDEF: 17)
 7f8:	00000001 	andeq	r0, r0, r1
 7fc:	01000001 	tsteq	r0, r1
 800:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 804:	73752f00 	cmnvc	r5, #0, 30
 808:	6f6c2f72 	svcvs	0x006c2f72
 80c:	2f6c6163 	svccs	0x006c6163
 810:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
 814:	612f7261 	teqvs	pc, r1, ror #4
 818:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 81c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 820:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 824:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 828:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
 82c:	30373173 	eorscc	r3, r7, r3, ror r1
 830:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 834:	63672f62 	cmnvs	r7, #392	; 0x188
 838:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
 83c:	6f6e2d6d 	svcvs	0x006e2d6d
 840:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 844:	2f696261 	svccs	0x00696261
 848:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 84c:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
 850:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
 854:	552f0065 	strpl	r0, [pc, #-101]!	; 7f7 <_start-0x7809>
 858:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 85c:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 860:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 864:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 868:	6f746b73 	svcvs	0x00746b73
 86c:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 870:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 6d8 <_start-0x7928>
 874:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 878:	31726574 	cmncc	r2, r4, ror r5
 87c:	2f303239 	svccs	0x00303239
 880:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 884:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 888:	30343173 	eorscc	r3, r4, r3, ror r1
 88c:	30322d65 	eorscc	r2, r2, r5, ror #26
 890:	2f6e6977 	svccs	0x006e6977
 894:	7062696c 	rsbvc	r6, r2, ip, ror #18
 898:	76000069 	strvc	r0, [r0], -r9, rrx
 89c:	72702d61 	rsbsvc	r2, r0, #6208	; 0x1840
 8a0:	6b746e69 	blvs	1d1c24c <__bss_end__+0x1d11f34>
 8a4:	0100632e 	tsteq	r0, lr, lsr #6
 8a8:	74730000 	ldrbtvc	r0, [r3], #-0
 8ac:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
 8b0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 8b4:	70720000 	rsbsvc	r0, r2, r0
 8b8:	00682e69 	rsbeq	r2, r8, r9, ror #28
 8bc:	3c000003 	stccc	0, cr0, [r0], {3}
 8c0:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 8c4:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
 8c8:	0000003e 	andeq	r0, r0, lr, lsr r0
 8cc:	05000000 	streq	r0, [r0, #-0]
 8d0:	008d0802 	addeq	r0, sp, r2, lsl #16
 8d4:	01260300 	teqeq	r6, r0, lsl #6
 8d8:	3113a501 	tstcc	r3, r1, lsl #10
 8dc:	0402002d 	streq	r0, [r2], #-45	; 0x2d
 8e0:	02002f02 	andeq	r2, r0, #2, 30
 8e4:	002d0204 	eoreq	r0, sp, r4, lsl #4
 8e8:	2f020402 	svccs	0x00020402
 8ec:	01040200 	mrseq	r0, R12_usr
 8f0:	304c4c2d 	subcc	r4, ip, sp, lsr #24
 8f4:	4f2f4b14 	svcmi	0x002f4b14
 8f8:	02040200 	andeq	r0, r4, #0, 4
 8fc:	04020067 	streq	r0, [r2], #-103	; 0x67
 900:	4d4c6501 	cfstr64mi	mvdx6, [ip, #-4]
 904:	312fa030 	teqcc	pc, r0, lsr r0	; <UNPREDICTABLE>
 908:	16260230 			; <UNDEFINED> instruction: 0x16260230
 90c:	002c2d84 	eoreq	r2, ip, r4, lsl #27
 910:	30010402 	andcc	r0, r1, r2, lsl #8
 914:	01040200 	mrseq	r0, R12_usr
 918:	00660633 	rsbeq	r0, r6, r3, lsr r6
 91c:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 920:	01040200 	mrseq	r0, R12_usr
 924:	67210806 	strvs	r0, [r1, -r6, lsl #16]!
 928:	8273032f 	rsbshi	r0, r3, #-1140850688	; 0xbc000000
 92c:	002e1303 	eoreq	r1, lr, r3, lsl #6
 930:	06010402 	streq	r0, [r1], -r2, lsl #8
 934:	0402002e 	streq	r0, [r2], #-46	; 0x2e
 938:	6a9f0601 	bvs	fe7c2144 <__bss_end__+0xfe7b7e2c>
 93c:	2e67034b 	cdpcs	3, 6, cr0, cr7, cr11, {2}
 940:	002e2103 	eoreq	r2, lr, r3, lsl #2
 944:	06010402 	streq	r0, [r1], -r2, lsl #8
 948:	0402002e 	streq	r0, [r2], #-46	; 0x2e
 94c:	009f0601 	addseq	r0, pc, r1, lsl #12
 950:	6a010402 	bvs	41960 <__bss_end__+0x37648>
 954:	a603f3bd 			; <UNDEFINED> instruction: 0xa603f3bd
 958:	2f20087f 	svccs	0x0020087f
 95c:	01040200 	mrseq	r0, R12_usr
 960:	bb064a06 	bllt	193180 <__bss_end__+0x188e68>
 964:	da032f4b 	ble	cc698 <__bss_end__+0xc2380>
 968:	4c83f200 	sfmmi	f7, 1, [r3], {0}
 96c:	2f2f3148 	svccs	0x002f3148
 970:	2d2f4b84 	vstmdbcs	pc!, {d4-d5}
 974:	2f30314d 	svccs	0x0030314d
 978:	04020083 	streq	r0, [r2], #-131	; 0x83
 97c:	00be2c01 	adcseq	r2, lr, r1, lsl #24
 980:	06010402 	streq	r0, [r1], -r2, lsl #8
 984:	02bc064a 	adcseq	r0, ip, #77594624	; 0x4a00000
 988:	0e031636 	mcreq	6, 0, r1, cr3, cr6, {1}
 98c:	302108ba 	strhtcc	r0, [r1], -sl
 990:	08312108 	ldmdaeq	r1!, {r3, r8, sp}
 994:	21083021 	tstcs	r8, r1, lsr #32
 998:	08304b30 	ldmdaeq	r0!, {r4, r5, r8, r9, fp, lr}
 99c:	31d93021 	bicscc	r3, r9, r1, lsr #32
 9a0:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 9a4:	02006501 	andeq	r6, r0, #4194304	; 0x400000
 9a8:	4a060204 	bmi	1811c0 <__bss_end__+0x176ea8>
 9ac:	01040200 	mrseq	r0, R12_usr
 9b0:	66420306 	strbvs	r0, [r2], -r6, lsl #6
 9b4:	02040200 	andeq	r0, r4, #0, 4
 9b8:	03066606 	movweq	r6, #26118	; 0x6606
 9bc:	684a00c2 	stmdavs	sl, {r1, r6, r7}^
 9c0:	01001002 	tsteq	r0, r2
 9c4:	00009301 	andeq	r9, r0, r1, lsl #6
 9c8:	7d000200 	sfmvc	f0, 4, [r0, #-0]
 9cc:	02000000 	andeq	r0, r0, #0
 9d0:	0d0efb01 	vstreq	d15, [lr, #-4]
 9d4:	01010100 	mrseq	r0, (UNDEF: 17)
 9d8:	00000001 	andeq	r0, r0, r1
 9dc:	01000001 	tsteq	r0, r1
 9e0:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 9e4:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
 9e8:	2f006372 	svccs	0x00006372
 9ec:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 9f0:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 9f4:	6a6e6169 	bvs	1b98fa0 <__bss_end__+0x1b8ec88>
 9f8:	442f6e75 	strtmi	r6, [pc], #-3701	; a00 <_start-0x7600>
 9fc:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 a00:	732f706f 	teqvc	pc, #111	; 0x6f
 a04:	6f6f6863 	svcvs	0x006f6863
 a08:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 a0c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 a10:	30323931 	eorscc	r3, r2, r1, lsr r9
 a14:	3153432f 	cmpcc	r3, pc, lsr #6
 a18:	2f453034 	svccs	0x00453034
 a1c:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 a20:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 a24:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 a28:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 a2c:	00006970 	andeq	r6, r0, r0, ror r9
 a30:	61656c63 	cmnvs	r5, r3, ror #24
 a34:	65722d6e 	ldrbvs	r2, [r2, #-3438]!	; 0xd6e
 a38:	746f6f62 	strbtvc	r6, [pc], #-3938	; a40 <_start-0x75c0>
 a3c:	0100632e 	tsteq	r0, lr, lsr #6
 a40:	70720000 	rsbsvc	r0, r2, r0
 a44:	00682e69 	rsbeq	r2, r8, r9, ror #28
 a48:	00000002 	andeq	r0, r0, r2
 a4c:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
 a50:	15000091 	strne	r0, [r0, #-145]	; 0x91
 a54:	024b832f 	subeq	r8, fp, #-1140850688	; 0xbc000000
 a58:	01010006 	tsteq	r1, r6
 a5c:	00000096 	muleq	r0, r6, r0
 a60:	00770002 	rsbseq	r0, r7, r2
 a64:	01020000 	mrseq	r0, (UNDEF: 2)
 a68:	000d0efb 	strdeq	r0, [sp], -fp
 a6c:	01010101 	tsteq	r1, r1, lsl #2
 a70:	01000000 	mrseq	r0, (UNDEF: 0)
 a74:	63010000 	movwvs	r0, #4096	; 0x1000
 a78:	30343173 	eorscc	r3, r4, r3, ror r1
 a7c:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 a80:	552f0063 	strpl	r0, [pc, #-99]!	; a25 <_start-0x75db>
 a84:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 a88:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 a8c:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 a90:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 a94:	6f746b73 	svcvs	0x00746b73
 a98:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 a9c:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 904 <_start-0x76fc>
 aa0:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 aa4:	31726574 	cmncc	r2, r4, ror r5
 aa8:	2f303239 	svccs	0x00303239
 aac:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 ab0:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 ab4:	30343173 	eorscc	r3, r4, r3, ror r1
 ab8:	30322d65 	eorscc	r2, r2, r5, ror #26
 abc:	2f6e6977 	svccs	0x006e6977
 ac0:	7062696c 	rsbvc	r6, r2, ip, ror #18
 ac4:	63000069 	movwvs	r0, #105	; 0x69
 ac8:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 acc:	00632e74 	rsbeq	r2, r3, r4, ror lr
 ad0:	72000001 	andvc	r0, r0, #1
 ad4:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 ad8:	00000200 	andeq	r0, r0, r0, lsl #4
 adc:	02050000 	andeq	r0, r5, #0
 ae0:	00009220 	andeq	r9, r0, r0, lsr #4
 ae4:	2f313214 	svccs	0x00313214
 ae8:	02002f2d 	andeq	r2, r0, #45, 30	; 0xb4
 aec:	4d490104 	stfmie	f0, [r9, #-16]
 af0:	0006022f 	andeq	r0, r6, pc, lsr #4
 af4:	00990101 	addseq	r0, r9, r1, lsl #2
 af8:	00020000 	andeq	r0, r2, r0
 afc:	00000077 	andeq	r0, r0, r7, ror r0
 b00:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 b04:	0101000d 	tsteq	r1, sp
 b08:	00000101 	andeq	r0, r0, r1, lsl #2
 b0c:	00000100 	andeq	r0, r0, r0, lsl #2
 b10:	31736301 	cmncc	r3, r1, lsl #6
 b14:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 b18:	00637273 	rsbeq	r7, r3, r3, ror r2
 b1c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 b20:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 b24:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 b28:	2f6e756a 	svccs	0x006e756a
 b2c:	6b736544 	blvs	1cda044 <__bss_end__+0x1ccfd2c>
 b30:	2f706f74 	svccs	0x00706f74
 b34:	6f686373 	svcvs	0x00686373
 b38:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 b3c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 b40:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 b44:	53432f30 	movtpl	r2, #16176	; 0x3f30
 b48:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 b4c:	3173632f 	cmncc	r3, pc, lsr #6
 b50:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 b54:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 b58:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 b5c:	00697062 	rsbeq	r7, r9, r2, rrx
 b60:	62657200 	rsbvs	r7, r5, #0, 4
 b64:	2e746f6f 	cdpcs	15, 7, cr6, cr4, cr15, {3}
 b68:	00010063 	andeq	r0, r1, r3, rrx
 b6c:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 b70:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 b74:	00000000 	andeq	r0, r0, r0
 b78:	92540205 	subsls	r0, r4, #1342177280	; 0x50000000
 b7c:	0d030000 	stceq	0, cr0, [r3, #-0]
 b80:	2f311401 	svccs	0x00311401
 b84:	4b2f1585 	blmi	bc61a0 <__bss_end__+0xbbbe88>
 b88:	35672f4d 	strbcc	r2, [r7, #-3917]!	; 0xf4d
 b8c:	10026752 	andne	r6, r2, r2, asr r7
 b90:	a0010100 	andge	r0, r1, r0, lsl #2
 b94:	02000000 	andeq	r0, r0, #0
 b98:	00007600 	andeq	r7, r0, r0, lsl #12
 b9c:	fb010200 	blx	413a6 <__bss_end__+0x3708e>
 ba0:	01000d0e 	tsteq	r0, lr, lsl #26
 ba4:	00010101 	andeq	r0, r1, r1, lsl #2
 ba8:	00010000 	andeq	r0, r1, r0
 bac:	73630100 	cmnvc	r3, #0, 2
 bb0:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 bb4:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 bb8:	73552f00 	cmpvc	r5, #0, 30
 bbc:	2f737265 	svccs	0x00737265
 bc0:	61697262 	cmnvs	r9, r2, ror #4
 bc4:	6e756a6e 	vsubvs.f32	s13, s10, s29
 bc8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 bcc:	706f746b 	rsbvc	r7, pc, fp, ror #8
 bd0:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 bd4:	2f6c6f6f 	svccs	0x006c6f6f
 bd8:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 bdc:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 be0:	432f3032 	teqmi	pc, #50	; 0x32
 be4:	30343153 	eorscc	r3, r4, r3, asr r1
 be8:	73632f45 	cmnvc	r3, #276	; 0x114
 bec:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 bf0:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 bf4:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; a58 <_start-0x75a8>
 bf8:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 bfc:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
 c00:	2e72656d 	cdpcs	5, 7, cr6, cr2, cr13, {3}
 c04:	00010063 	andeq	r0, r1, r3, rrx
 c08:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 c0c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 c10:	00000000 	andeq	r0, r0, r0
 c14:	92c80205 	sbcls	r0, r8, #1342177280	; 0x50000000
 c18:	13160000 	tstne	r6, #0
 c1c:	02002d2f 	andeq	r2, r0, #3008	; 0xbc0
 c20:	2e060104 	adfcss	f0, f6, f4
 c24:	2f316806 	svccs	0x00316806
 c28:	4c4b4c4b 	mcrrmi	12, 4, r4, fp, cr11
 c2c:	2f2f6a2f 	svccs	0x002f6a2f
 c30:	08022f84 	stmdaeq	r2, {r2, r7, r8, r9, sl, fp, sp}
 c34:	6b010100 	blvs	4103c <__bss_end__+0x36d24>
 c38:	02000001 	andeq	r0, r0, #1
 c3c:	00012000 	andeq	r2, r1, r0
 c40:	fb010200 	blx	4144a <__bss_end__+0x37132>
 c44:	01000d0e 	tsteq	r0, lr, lsl #26
 c48:	00010101 	andeq	r0, r1, r1, lsl #2
 c4c:	00010000 	andeq	r0, r1, r0
 c50:	796d0100 	stmdbvc	sp!, {r8}^
 c54:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 c58:	73752f00 	cmnvc	r5, #0, 30
 c5c:	6f6c2f72 	svcvs	0x006c2f72
 c60:	2f6c6163 	svccs	0x006c6163
 c64:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
 c68:	612f7261 	teqvs	pc, r1, ror #4
 c6c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 c70:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 c74:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 c78:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 c7c:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
 c80:	30373173 	eorscc	r3, r7, r3, ror r1
 c84:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 c88:	63672f62 	cmnvs	r7, #392	; 0x188
 c8c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
 c90:	6f6e2d6d 	svcvs	0x006e2d6d
 c94:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 c98:	2f696261 	svccs	0x00696261
 c9c:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 ca0:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
 ca4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
 ca8:	552f0065 	strpl	r0, [pc, #-101]!	; c4b <_start-0x73b5>
 cac:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 cb0:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 cb4:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 cb8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 cbc:	6f746b73 	svcvs	0x00746b73
 cc0:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 cc4:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; b2c <_start-0x74d4>
 cc8:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 ccc:	31726574 	cmncc	r2, r4, ror r5
 cd0:	2f303239 	svccs	0x00303239
 cd4:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 cd8:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 cdc:	30343173 	eorscc	r3, r4, r3, ror r1
 ce0:	30322d65 	eorscc	r2, r2, r5, ror #26
 ce4:	2f6e6977 	svccs	0x006e6977
 ce8:	7062696c 	rsbvc	r6, r2, ip, ror #18
 cec:	752f0069 	strvc	r0, [pc, #-105]!	; c8b <_start-0x7375>
 cf0:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; b2c <_start-0x74d4>
 cf4:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 cf8:	6c65432f 	stclvs	3, cr4, [r5], #-188	; 0xffffff44
 cfc:	2f72616c 	svccs	0x0072616c
 d00:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 d04:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 d08:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 d0c:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 d10:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
 d14:	37317363 	ldrcc	r7, [r1, -r3, ror #6]!
 d18:	612f6530 	teqvs	pc, r0, lsr r5	; <UNPREDICTABLE>
 d1c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 d20:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 d24:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 d28:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 d2c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
 d30:	6d6b0000 	stclvs	0, cr0, [fp, #-0]
 d34:	6f6c6c61 	svcvs	0x006c6c61
 d38:	00632e63 	rsbeq	r2, r3, r3, ror #28
 d3c:	73000001 	movwvc	r0, #1
 d40:	65646474 	strbvs	r6, [r4, #-1140]!	; 0x474
 d44:	00682e66 	rsbeq	r2, r8, r6, ror #28
 d48:	72000002 	andvc	r0, r0, #2
 d4c:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 d50:	00000300 	andeq	r0, r0, r0, lsl #6
 d54:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 d58:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 d5c:	00000400 	andeq	r0, r0, r0, lsl #8
 d60:	02050000 	andeq	r0, r5, #0
 d64:	0000961c 	andeq	r9, r0, ip, lsl r6
 d68:	2f011803 	svccs	0x00011803
 d6c:	01040200 	mrseq	r0, R12_usr
 d70:	bc068206 	sfmlt	f0, 1, [r6], {6}
 d74:	4d4b4b4b 	vstrmi	d20, [fp, #-300]	; 0xfffffed4
 d78:	02002fbe 	andeq	r2, r0, #760	; 0x2f8
 d7c:	82060104 	andhi	r0, r6, #4, 2
 d80:	4b4bbc06 	blmi	12efda0 <__bss_end__+0x12e5a88>
 d84:	01040200 	mrseq	r0, R12_usr
 d88:	bb064a06 	bllt	1935a8 <__bss_end__+0x189290>
 d8c:	2f30834b 	svccs	0x0030834b
 d90:	2fba0a03 	svccs	0x00ba0a03
 d94:	01040200 	mrseq	r0, R12_usr
 d98:	bb068206 	bllt	1a15b8 <__bss_end__+0x1972a0>
 d9c:	c213f967 	andsgt	pc, r3, #1687552	; 0x19c000
 da0:	00080214 	andeq	r0, r8, r4, lsl r2
 da4:	00860101 	addeq	r0, r6, r1, lsl #2
 da8:	00020000 	andeq	r0, r2, r0
 dac:	00000072 	andeq	r0, r0, r2, ror r0
 db0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 db4:	0101000d 	tsteq	r1, sp
 db8:	00000101 	andeq	r0, r0, r1, lsl #2
 dbc:	00000100 	andeq	r0, r0, r0, lsl #2
 dc0:	62696c01 	rsbvs	r6, r9, #256	; 0x100
 dc4:	552f0063 	strpl	r0, [pc, #-99]!	; d69 <_start-0x7297>
 dc8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 dcc:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 dd0:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 dd4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 dd8:	6f746b73 	svcvs	0x00746b73
 ddc:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 de0:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; c48 <_start-0x73b8>
 de4:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 de8:	31726574 	cmncc	r2, r4, ror r5
 dec:	2f303239 	svccs	0x00303239
 df0:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 df4:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 df8:	30343173 	eorscc	r3, r4, r3, ror r1
 dfc:	30322d65 	eorscc	r2, r2, r5, ror #26
 e00:	2f6e6977 	svccs	0x006e6977
 e04:	7062696c 	rsbvc	r6, r2, ip, ror #18
 e08:	70000069 	andvc	r0, r0, r9, rrx
 e0c:	68637475 	stmdavs	r3!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
 e10:	632e7261 	teqvs	lr, #268435462	; 0x10000006
 e14:	00000100 	andeq	r0, r0, r0, lsl #2
 e18:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 e1c:	00020068 	andeq	r0, r2, r8, rrx
 e20:	05000000 	streq	r0, [r0, #-0]
 e24:	00979402 	addseq	r9, r7, r2, lsl #8
 e28:	024a1400 	subeq	r1, sl, #0, 8
 e2c:	01010006 	tsteq	r1, r6

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0x56e
   4:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
   8:	6265725f 	rsbvs	r7, r5, #-268435451	; 0xf0000005
   c:	00746f6f 	rsbseq	r6, r4, pc, ror #30
  10:	20554e47 	subscs	r4, r5, r7, asr #28
  14:	2e342043 	cdpcs	0, 3, cr2, cr4, cr3, {2}
  18:	20332e38 	eorscs	r2, r3, r8, lsr lr
  1c:	70636d2d 	rsbvc	r6, r3, sp, lsr #26
  20:	72613d75 	rsbvc	r3, r1, #7488	; 0x1d40
  24:	3731316d 	ldrcc	r3, [r1, -sp, ror #2]!
  28:	667a6a36 			; <UNDEFINED> instruction: 0x667a6a36
  2c:	2d20732d 	stccs	3, cr7, [r0, #-180]!	; 0xffffff4c
  30:	6e75746d 	cdpvs	4, 7, cr7, cr5, cr13, {3}
  34:	72613d65 	rsbvc	r3, r1, #6464	; 0x1940
  38:	3731316d 	ldrcc	r3, [r1, -sp, ror #2]!
  3c:	667a6a36 			; <UNDEFINED> instruction: 0x667a6a36
  40:	2d20732d 	stccs	3, cr7, [r0, #-180]!	; 0xffffff4c
  44:	62646767 	rsbvs	r6, r4, #27000832	; 0x19c0000
  48:	674f2d20 	strbvs	r2, [pc, -r0, lsr #26]
  4c:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xd20
  50:	6e673d64 	cdpvs	13, 6, cr3, cr7, cr4, {3}
  54:	20393975 	eorscs	r3, r9, r5, ror r9
  58:	7266662d 	rsbvc	r6, r6, #47185920	; 0x2d00000
  5c:	74736565 	ldrbtvc	r6, [r3], #-1381	; 0x565
  60:	69646e61 	stmdbvs	r4!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  64:	6e00676e 	cdpvs	7, 0, cr6, cr0, cr14, {3}
  68:	616d746f 	cmnvs	sp, pc, ror #8
  6c:	73006e69 	movwvc	r6, #3689	; 0xe69
  70:	6b636174 	blvs	18d8648 <__bss_end__+0x18ce330>
  74:	72617500 	rsbvc	r7, r1, #0, 10
  78:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
  7c:	75007469 	strvc	r7, [r0, #-1129]	; 0x469
  80:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  84:	2064656e 	rsbcs	r6, r4, lr, ror #10
  88:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
  8c:	656c6300 	strbvs	r6, [ip, #-768]!	; 0x300
  90:	725f6e61 	subsvc	r6, pc, #1552	; 0x610
  94:	6f6f6265 	svcvs	0x006f6265
  98:	70720074 	rsbsvc	r0, r2, r4, ror r0
  9c:	6f665f69 	svcvs	0x00665f69
  a0:	2f006b72 	svccs	0x00006b72
  a4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  a8:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
  ac:	6a6e6169 	bvs	1b98658 <__bss_end__+0x1b8e340>
  b0:	442f6e75 	strtmi	r6, [pc], #-3701	; b8 <_start-0x7f48>
  b4:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
  b8:	732f706f 	teqvc	pc, #111	; 0x6f
  bc:	6f6f6863 	svcvs	0x006f6863
  c0:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
  c4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
  c8:	30323931 	eorscc	r3, r2, r1, lsr r9
  cc:	3153432f 	cmpcc	r3, pc, lsr #6
  d0:	2f453034 	svccs	0x00453034
  d4:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
  d8:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
  dc:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
  e0:	62616c2f 	rsbvs	r6, r1, #12032	; 0x2f00
  e4:	2d362f73 	ldccs	15, cr2, [r6, #-460]!	; 0xfffffe34
  e8:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
  ec:	2f736461 	svccs	0x00736461
  f0:	68742d32 	ldmdavs	r4!, {r1, r4, r5, r8, sl, fp, sp}^
  f4:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
  f8:	656e2e73 	strbvs	r2, [lr, #-3699]!	; 0xe73
  fc:	68730077 	ldmdavs	r3!, {r0, r1, r2, r4, r5, r6}^
 100:	2074726f 	rsbscs	r7, r4, pc, ror #4
 104:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 108:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
 10c:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
 110:	616d6b00 	cmnvs	sp, r0, lsl #22
 114:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 118:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 11c:	7268745f 	rsbvc	r7, r8, #1593835520	; 0x5f000000
 120:	5f646165 	svcpl	0x00646165
 124:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 128:	2d310074 	ldccs	0, cr0, [r1, #-464]!	; 0xfffffe30
 12c:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0x574
 130:	7268742d 	rsbvc	r7, r8, #754974720	; 0x2d000000
 134:	2e646165 	powcssz	f6, f4, f5
 138:	68740063 	ldmdavs	r4!, {r0, r1, r5, r6}^
 13c:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 140:	646f635f 	strbtvs	r6, [pc], #-863	; 148 <_start-0x7eb8>
 144:	5f5f0065 	svcpl	0x005f0065
 148:	434e5546 	movtmi	r5, #58694	; 0xe546
 14c:	4e4f4954 	mcrmi	9, 2, r4, cr15, cr4, {2}
 150:	74005f5f 	strvc	r5, [r0], #-3935	; 0xf5f
 154:	61657268 	cmnvs	r5, r8, ror #4
 158:	6f635f64 	svcvs	0x00635f64
 15c:	00746e75 	rsbseq	r6, r4, r5, ror lr
 160:	5f697072 	svcpl	0x00697072
 164:	74697865 	strbtvc	r7, [r9], #-2149	; 0x865
 168:	67657200 	strbvs	r7, [r5, -r0, lsl #4]!
 16c:	7661735f 			; <UNDEFINED> instruction: 0x7661735f
 170:	72615f65 	rsbvc	r5, r1, #404	; 0x194
 174:	6c006165 	stfvss	f6, [r0], {101}	; 0x65
 178:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 17c:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 180:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 184:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
 188:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 18c:	70720074 	rsbsvc	r0, r2, r4, ror r0
 190:	68745f69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 194:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 198:	7400745f 	strvc	r7, [r0], #-1119	; 0x45f
 19c:	61657268 	cmnvs	r5, r8, ror #4
 1a0:	75735f64 	ldrbvc	r5, [r3, #-3940]!	; 0xf64
 1a4:	7072006d 	rsbsvc	r0, r2, sp, rrx
 1a8:	69795f69 	ldmdbvs	r9!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 1ac:	00646c65 	rsbeq	r6, r4, r5, ror #24
 1b0:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
 1b4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
 1b8:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
 1bc:	6f6c2067 	svcvs	0x006c2067
 1c0:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 1c4:	7200746e 	andvc	r7, r0, #1845493760	; 0x6e000000
 1c8:	745f6970 	ldrbvc	r6, [pc], #-2416	; 1d0 <_start-0x7e30>
 1cc:	61657268 	cmnvs	r5, r8, ror #4
 1d0:	68730064 	ldmdavs	r3!, {r2, r5, r6}^
 1d4:	2074726f 	rsbscs	r7, r4, pc, ror #4
 1d8:	00746e69 	rsbseq	r6, r4, r9, ror #28
 1dc:	746e6975 	strbtvc	r6, [lr], #-2421	; 0x975
 1e0:	745f3233 	ldrbvc	r3, [pc], #-563	; 1e8 <_start-0x7e18>
 1e4:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 1e8:	7275635f 	rsbsvc	r6, r5, #2080374785	; 0x7c000001
 1ec:	7268745f 	rsbvc	r7, r8, #1593835520	; 0x5f000000
 1f0:	00646165 	rsbeq	r6, r4, r5, ror #2
 1f4:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
 1f8:	5f636f6c 	svcpl	0x00636f6c
 1fc:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
 200:	705f5100 	subsvc	r5, pc, r0, lsl #2
 204:	00687375 	rsbeq	r7, r8, r5, ror r3
 208:	2d697072 	stclcs	0, cr7, [r9, #-456]!	; 0xfffffe38
 20c:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 210:	632e6461 	teqvs	lr, #1627389952	; 0x61000000
 214:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 218:	696f6a5f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, r9, fp, sp, lr}^	; <UNPREDICTABLE>
 21c:	7865006e 	stmdavc	r5!, {r1, r2, r3, r5, r6}^
 220:	6f637469 	svcvs	0x00637469
 224:	6e006564 	cfsh32vs	mvfx6, mvfx0, #52
 228:	5f747865 	svcpl	0x00747865
 22c:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 230:	6e006461 	cdpvs	4, 0, cr6, cr0, cr1, {3}
 234:	6e75725f 	mrcvs	2, 3, r7, cr5, cr15, {2}
 238:	665f6e00 	ldrbvs	r6, [pc], -r0, lsl #28
 23c:	00656572 	rsbeq	r6, r5, r2, ror r5
 240:	5f697072 	svcpl	0x00697072
 244:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 248:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
 24c:	6568635f 	strbvs	r6, [r8, #-863]!	; 0x35f
 250:	51006b63 	tstpl	r0, r3, ror #22
 254:	6c656e5f 	stclvs	14, cr6, [r5], #-380	; 0xfffffe84
 258:	72006d65 	andvc	r6, r0, #6464	; 0x1940
 25c:	695f6970 	ldmdbvs	pc, {r4, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
 260:	5f74696e 	svcpl	0x0074696e
 264:	6d617274 	sfmvs	f7, 2, [r1, #-464]!	; 0xfffffe30
 268:	696c6f70 	stmdbvs	ip!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 26c:	6b00656e 	blvs	1982c <__bss_end__+0xf514>
 270:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 274:	615f636f 	cmpvs	pc, pc, ror #6
 278:	6e67696c 	cdpvs	9, 6, cr6, cr7, cr12, {3}
 27c:	72006465 	andvc	r6, r0, #1694498816	; 0x65000000
 280:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
 284:	6b636174 	blvs	18d885c <__bss_end__+0x18ce544>
 288:	6568635f 	strbvs	r6, [r8, #-863]!	; 0x35f
 28c:	66006b63 	strvs	r6, [r0], -r3, ror #22
 290:	71656572 	smcvc	22098	; 0x5652
 294:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 298:	6178655f 	cmnvs	r8, pc, asr r5
 29c:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 2a0:	7065656c 	rsbvc	r6, r5, ip, ror #10
 2a4:	655f5100 	ldrbvs	r5, [pc, #-256]	; 1ac <_start-0x7e54>
 2a8:	7974706d 	ldmdbvc	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
 2ac:	705f5100 	subsvc	r5, pc, r0, lsl #2
 2b0:	7300706f 	movwvc	r7, #111	; 0x6f
 2b4:	64656863 	strbtvs	r6, [r5], #-2147	; 0x863
 2b8:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
 2bc:	7268745f 	rsbvc	r7, r8, #1593835520	; 0x5f000000
 2c0:	00646165 	rsbeq	r6, r4, r5, ror #2
 2c4:	6c696174 	stfvse	f6, [r9], #-464	; 0xfffffe30
 2c8:	5f687400 	svcpl	0x00687400
 2cc:	6f6c6c61 	svcvs	0x006c6c61
 2d0:	68740063 	ldmdavs	r4!, {r0, r1, r5, r6}^
 2d4:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0x65f
 2d8:	5f510065 	svcpl	0x00510065
 2dc:	65707061 	ldrbvs	r7, [r0, #-97]!	; 0x61
 2e0:	6800646e 	stmdavs	r0, {r1, r2, r3, r5, r6, sl, sp, lr}
 2e4:	00646165 	rsbeq	r6, r4, r5, ror #2
 2e8:	716e7572 	smcvc	59218	; 0xe752
 2ec:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 2f0:	7773635f 			; <UNDEFINED> instruction: 0x7773635f
 2f4:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
 2f8:	646c6f00 	strbtvs	r6, [ip], #-3840	; 0xf00
 2fc:	7268745f 	rsbvc	r7, r8, #1593835520	; 0x5f000000
 300:	00646165 	rsbeq	r6, r4, r5, ror #2
 304:	6c6c616e 	stfvse	f6, [ip], #-440	; 0xfffffe48
 308:	6465636f 	strbtvs	r6, [r5], #-879	; 0x36f
 30c:	72696300 	rsbvc	r6, r9, #0, 6
 310:	616c7563 	cmnvs	ip, r3, ror #10
 314:	00632e72 	rsbeq	r2, r3, r2, ror lr
 318:	705f7163 	subsvc	r7, pc, r3, ror #2
 31c:	6e5f706f 	cdpvs	0, 5, cr7, cr15, cr15, {3}
 320:	6c626e6f 	stclvs	14, cr6, [r2], #-444	; 0xfffffe44
 324:	006b636f 	rsbeq	r6, fp, pc, ror #6
 328:	705f7163 	subsvc	r7, pc, r3, ror #2
 32c:	6e5f706f 	cdpvs	0, 5, cr7, cr15, cr15, {3}
 330:	626f6e5f 	rsbvs	r6, pc, #1520	; 0x5f0
 334:	6f006b6c 	svcvs	0x00006b6c
 338:	66726576 			; <UNDEFINED> instruction: 0x66726576
 33c:	00776f6c 	rsbseq	r6, r7, ip, ror #30
 340:	61746164 	cmnvs	r4, r4, ror #2
 344:	65716300 	ldrbvs	r6, [r1, #-768]!	; 0x300
 348:	7300745f 	movwvc	r7, #1119	; 0x45f
 34c:	5f657a69 	svcpl	0x00657a69
 350:	71630074 	smcvc	12292	; 0x3004
 354:	6565705f 	strbvs	r7, [r5, #-95]!	; 0x5f
 358:	006e5f6b 	rsbeq	r5, lr, fp, ror #30
 35c:	6f727265 	svcvs	0x00727265
 360:	665f7372 			; <UNDEFINED> instruction: 0x665f7372
 364:	6c617461 	cfstrdvs	mvd7, [r1], #-388	; 0xfffffe7c
 368:	6300705f 	movwvs	r7, #95	; 0x5f
 36c:	6f705f71 	svcvs	0x00705f71
 370:	656d0070 	strbvs	r0, [sp, #-112]!	; 0x70
 374:	7465736d 	strbtvc	r7, [r5], #-877	; 0x36d
 378:	5f716300 	svcpl	0x00716300
 37c:	6170736e 	cmnvs	r0, lr, ror #6
 380:	63006563 	movwvs	r6, #1379	; 0x563
 384:	6e695f71 	mcrvs	15, 3, r5, cr9, cr1, {3}
 388:	63007469 	movwvs	r7, #1129	; 0x469
 38c:	6f705f71 	svcvs	0x00705f71
 390:	006e5f70 	rsbeq	r5, lr, r0, ror pc
 394:	705f7163 	subsvc	r7, pc, r3, ror #2
 398:	00687375 	rsbeq	r7, r8, r5, ror r3
 39c:	705f7163 	subsvc	r7, pc, r3, ror #2
 3a0:	5f687375 	svcpl	0x00687375
 3a4:	7163006e 	cmnvc	r3, lr, rrx
 3a8:	706d655f 	rsbvc	r6, sp, pc, asr r5
 3ac:	66007974 			; <UNDEFINED> instruction: 0x66007974
 3b0:	65636e65 	strbvs	r6, [r3, #-3685]!	; 0xe65
 3b4:	5f716300 	svcpl	0x00716300
 3b8:	656c656e 	strbvs	r6, [ip, #-1390]!	; 0x56e
 3bc:	5f63006d 	svcpl	0x0063006d
 3c0:	00667562 	rsbeq	r7, r6, r2, ror #10
 3c4:	665f7163 	ldrbvs	r7, [pc], -r3, ror #2
 3c8:	006c6c75 	rsbeq	r6, ip, r5, ror ip
 3cc:	705f7163 	subsvc	r7, pc, r3, ror #2
 3d0:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 3d4:	5f716300 	svcpl	0x00716300
 3d8:	63006b6f 	movwvs	r6, #2927	; 0xb6f
 3dc:	00745f71 	rsbseq	r5, r4, r1, ror pc
 3e0:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 3e4:	6d656d2f 	stclvs	13, cr6, [r5, #-188]!	; 0xffffff44
 3e8:	2e746573 	mrccs	5, 3, r6, cr4, cr3, {3}
 3ec:	552f0063 	strpl	r0, [pc, #-99]!	; 391 <_start-0x7c6f>
 3f0:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 3f4:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 3f8:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 3fc:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 400:	6f746b73 	svcvs	0x00746b73
 404:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 408:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 270 <_start-0x7d90>
 40c:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 410:	31726574 	cmncc	r2, r4, ror r5
 414:	2f303239 	svccs	0x00303239
 418:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 41c:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 420:	30343173 	eorscc	r3, r4, r3, ror r1
 424:	30322d65 	eorscc	r2, r2, r5, ror #26
 428:	2f6e6977 	svccs	0x006e6977
 42c:	7062696c 	rsbvc	r6, r2, ip, ror #18
 430:	5f5f0069 	svcpl	0x005f0069
 434:	63756e67 	cmnvs	r5, #1648	; 0x670
 438:	5f61765f 	svcpl	0x0061765f
 43c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
 440:	62696c00 	rsbvs	r6, r9, #0, 24
 444:	72702f63 	rsbsvc	r2, r0, #396	; 0x18c
 448:	6b746e69 	blvs	1d1bdf4 <__bss_end__+0x1d11adc>
 44c:	7600632e 	strvc	r6, [r0], -lr, lsr #6
 450:	72705f61 	rsbsvc	r5, r0, #388	; 0x184
 454:	6b746e69 	blvs	1d1be00 <__bss_end__+0x1d11ae8>
 458:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
 45c:	696c5f61 	stmdbvs	ip!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
 460:	61007473 	tstvs	r0, r3, ror r4
 464:	00736772 	rsbseq	r6, r3, r2, ror r7
 468:	70615f5f 	rsbvc	r5, r1, pc, asr pc
 46c:	62696c00 	rsbvs	r6, r9, #0, 24
 470:	75702f63 	ldrbvc	r2, [r0, #-3939]!	; 0xf63
 474:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
 478:	746e6900 	strbtvc	r6, [lr], #-2304	; 0x900
 47c:	616e7265 	cmnvs	lr, r5, ror #4
 480:	75705f6c 	ldrbvc	r5, [r0, #-3948]!	; 0xf6c
 484:	72006b74 	andvc	r6, r0, #116, 22	; 0x1d000
 488:	705f6970 	subsvc	r6, pc, r0, ror r9	; <UNPREDICTABLE>
 48c:	68637475 	stmdavs	r3!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
 490:	6e007261 	cdpvs	2, 0, cr7, cr0, cr1, {3}
 494:	705f6765 	subsvc	r6, pc, r5, ror #14
 498:	76657200 	strbtvc	r7, [r5], -r0, lsl #4
 49c:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0x265
 4a0:	64736900 	ldrbtvs	r6, [r3], #-2304	; 0x900
 4a4:	74696769 	strbtvc	r6, [r9], #-1897	; 0x769
 4a8:	74757000 	ldrbtvc	r7, [r5], #-0
 4ac:	70665f73 	rsbvc	r5, r6, r3, ror pc
 4b0:	73616200 	cmnvc	r1, #0, 4
 4b4:	69730065 	ldmdbvs	r3!, {r0, r2, r5, r6}^
 4b8:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
 4bc:	6c00705f 	stcvs	0, cr7, [r0], {95}	; 0x5f
 4c0:	2f636269 	svccs	0x00636269
 4c4:	702d6176 	eorvc	r6, sp, r6, ror r1
 4c8:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 4cc:	00632e6b 	rsbeq	r2, r3, fp, ror #28
 4d0:	5f697072 	svcpl	0x00697072
 4d4:	5f746573 	svcpl	0x00746573
 4d8:	7074756f 	rsbsvc	r7, r4, pc, ror #10
 4dc:	77007475 	smlsdxvc	r0, r5, r4, r7
 4e0:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
 4e4:	74757000 	ldrbtvc	r7, [r5], #-0
 4e8:	70665f63 	rsbvc	r5, r6, r3, ror #30
 4ec:	696d6500 	stmdbvs	sp!, {r8, sl, sp, lr}^
 4f0:	73630074 	cmnvc	r3, #116	; 0x74
 4f4:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 4f8:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 4fc:	656c632f 	strbvs	r6, [ip, #-815]!	; 0x32f
 500:	722d6e61 	eorvc	r6, sp, #1552	; 0x610
 504:	6f6f6265 	svcvs	0x006f6265
 508:	00632e74 	rsbeq	r2, r3, r4, ror lr
 50c:	616c6564 	cmnvs	ip, r4, ror #10
 510:	736d5f79 	cmnvc	sp, #484	; 0x1e4
 514:	31736300 	cmncc	r3, r0, lsl #6
 518:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 51c:	2f637273 	svccs	0x00637273
 520:	61747363 	cmnvs	r4, r3, ror #6
 524:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
 528:	625f5f00 	subsvs	r5, pc, #0, 30
 52c:	735f7373 	cmpvc	pc, #-872415231	; 0xcc000001
 530:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
 534:	5f005f5f 	svcpl	0x00005f5f
 538:	7373625f 	cmnvc	r3, #-268435451	; 0xf0000005
 53c:	646e655f 	strbtvs	r6, [lr], #-1375	; 0x55f
 540:	62005f5f 	andvs	r5, r0, #380	; 0x17c
 544:	655f7373 	ldrbvs	r7, [pc, #-883]	; 1d9 <_start-0x7e27>
 548:	5f00646e 	svcpl	0x0000646e
 54c:	61747363 	cmnvs	r4, r3, ror #6
 550:	61007472 	tstvs	r0, r2, ror r4
 554:	73755f74 	cmnvc	r5, #116, 30	; 0x1d0
 558:	6c5f7265 	lfmvs	f7, 2, [pc], {101}	; 0x65
 55c:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
 560:	5f4d5000 	svcpl	0x004d5000
 564:	53534150 	cmppl	r3, #80, 2
 568:	44524f57 	ldrbmi	r4, [r2], #-3927	; 0xf57
 56c:	31736300 	cmncc	r3, r0, lsl #6
 570:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 574:	2f637273 	svccs	0x00637273
 578:	6f626572 	svcvs	0x00626572
 57c:	632e746f 	teqvs	lr, #1862270976	; 0x6f000000
 580:	5f4d5000 	svcpl	0x004d5000
 584:	43545352 	cmpmi	r4, #1207959553	; 0x48000001
 588:	4352575f 	cmpmi	r2, #24903680	; 0x17c0000
 58c:	465f4746 	ldrbmi	r4, [pc], -r6, asr #14
 590:	5f4c4c55 	svcpl	0x004c4c55
 594:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
 598:	4d500054 	ldclmi	0, cr0, [r0, #-336]	; 0xfffffeb0
 59c:	4f44575f 	svcmi	0x0044575f
 5a0:	65730047 	ldrbvs	r0, [r3, #-71]!	; 0x47
 5a4:	73755f74 	cmnvc	r5, #116, 30	; 0x1d0
 5a8:	6c5f7265 	lfmvs	f7, 2, [pc], {101}	; 0x65
 5ac:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
 5b0:	54555000 	ldrbpl	r5, [r5], #-0
 5b4:	50003233 	andpl	r3, r0, r3, lsr r2
 5b8:	53525f4d 	cmppl	r2, #308	; 0x134
 5bc:	63004354 	movwvs	r4, #852	; 0x354
 5c0:	00727370 	rsbseq	r7, r2, r0, ror r3
 5c4:	616c6564 	cmnvs	ip, r4, ror #10
 5c8:	65735f79 	ldrbvs	r5, [r3, #-3961]!	; 0xf79
 5cc:	73630063 	cmnvc	r3, #99	; 0x63
 5d0:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 5d4:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 5d8:	6d69742f 	cfstrdvs	mvd7, [r9, #-188]!	; 0xffffff44
 5dc:	632e7265 	teqvs	lr, #1342177286	; 0x50000006
 5e0:	54454700 	strbpl	r4, [r5], #-1792	; 0x700
 5e4:	74003233 	strvc	r3, [r0], #-563	; 0x233
 5e8:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
 5ec:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 5f0:	635f7961 	cmpvs	pc, #1589248	; 0x184000
 5f4:	656c6379 	strbvs	r6, [ip, #-889]!	; 0x379
 5f8:	65640073 	strbvs	r0, [r4, #-115]!	; 0x73
 5fc:	5f79616c 	svcpl	0x0079616c
 600:	74007375 	strvc	r7, [r0], #-885	; 0x375
 604:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 608:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 60c:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0x55f
 610:	666b0063 	strbtvs	r0, [fp], -r3, rrx
 614:	5f656572 	svcpl	0x00656572
 618:	006c6c61 	rsbeq	r6, ip, r1, ror #24
 61c:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
 620:	5f64656e 	svcpl	0x0064656e
 624:	70616568 	rsbvc	r6, r1, r8, ror #10
 628:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
 62c:	2d796d00 	ldclcs	13, cr6, [r9, #-0]
 630:	2f637273 	svccs	0x00637273
 634:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
 638:	2e636f6c 	cdpcs	15, 6, cr6, cr3, cr12, {3}
 63c:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
 640:	705f7469 	subsvc	r7, pc, r9, ror #8
 644:	696c6100 	stmdbvs	ip!, {r8, sp, lr}^
 648:	656d6e67 	strbvs	r6, [sp, #-3687]!	; 0xe67
 64c:	7200746e 	andvc	r7, r0, #1845493760	; 0x6e000000
 650:	646e756f 	strbtvs	r7, [lr], #-1391	; 0x56f
 654:	6e5f6465 	cdpvs	4, 5, cr6, cr15, cr5, {3}
 658:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
 65c:	6d6b0073 	stclvs	0, cr0, [fp, #-460]!	; 0xfffffe34
 660:	6f6c6c61 	svcvs	0x006c6c61
 664:	65685f63 	strbvs	r5, [r8, #-3939]!	; 0xf63
 668:	705f7061 	subsvc	r7, pc, r1, rrx
 66c:	5f007274 	svcpl	0x00007274
 670:	6165685f 	cmnvs	r5, pc, asr r8
 674:	74735f70 	ldrbtvc	r5, [r3], #-3952	; 0xf70
 678:	5f747261 	svcpl	0x00747261
 67c:	6f74005f 	svcvs	0x0074005f
 680:	6c6c615f 	stfvse	f6, [ip], #-380	; 0xfffffe84
 684:	7461636f 	strbtvc	r6, [r1], #-879	; 0x36f
 688:	61750065 	cmnvs	r5, r5, rrx
 68c:	705f7472 	subsvc	r7, pc, r2, ror r4	; <UNPREDICTABLE>
 690:	00637475 	rsbeq	r7, r3, r5, ror r4
 694:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 698:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
 69c:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
 6a0:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 6a4:	62696c00 	rsbvs	r6, r9, #0, 24
 6a8:	75702f63 	ldrbvc	r2, [r0, #-3939]!	; 0xf63
 6ac:	61686374 	smcvs	34356	; 0x8634
 6b0:	00632e72 	rsbeq	r2, r3, r2, ror lr

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	00008010 	andeq	r8, r0, r0, lsl r0
  1c:	000000ac 	andeq	r0, r0, ip, lsr #1
  20:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
  24:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
  28:	180e4201 	stmdane	lr, {r0, r9, lr}
  2c:	0000001c 	andeq	r0, r0, ip, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	000080bc 	strheq	r8, [r0], -ip
  38:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  3c:	83180e42 	tsthi	r8, #1056	; 0x420
  40:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
  44:	87038604 	strhi	r8, [r3, -r4, lsl #12]
  48:	00018e02 	andeq	r8, r1, r2, lsl #28
  4c:	0000000c 	andeq	r0, r0, ip
  50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  54:	7c020001 	stcvc	0, cr0, [r2], {1}
  58:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  5c:	0000000c 	andeq	r0, r0, ip
  60:	0000004c 	andeq	r0, r0, ip, asr #32
  64:	000081ac 	andeq	r8, r0, ip, lsr #3
  68:	00000008 	andeq	r0, r0, r8
  6c:	0000000c 	andeq	r0, r0, ip
  70:	0000004c 	andeq	r0, r0, ip, asr #32
  74:	000081b4 			; <UNDEFINED> instruction: 0x000081b4
  78:	00000038 	andeq	r0, r0, r8, lsr r0
  7c:	0000000c 	andeq	r0, r0, ip
  80:	0000004c 	andeq	r0, r0, ip, asr #32
  84:	000081ec 	andeq	r8, r0, ip, ror #3
  88:	00000028 	andeq	r0, r0, r8, lsr #32
  8c:	00000014 	andeq	r0, r0, r4, lsl r0
  90:	0000004c 	andeq	r0, r0, ip, asr #32
  94:	00008214 	andeq	r8, r0, r4, lsl r2
  98:	00000018 	andeq	r0, r0, r8, lsl r0
  9c:	83080e42 	movwhi	r0, #36418	; 0x8e42
  a0:	00018e02 	andeq	r8, r1, r2, lsl #28
  a4:	00000014 	andeq	r0, r0, r4, lsl r0
  a8:	0000004c 	andeq	r0, r0, ip, asr #32
  ac:	0000822c 	andeq	r8, r0, ip, lsr #4
  b0:	0000007c 	andeq	r0, r0, ip, ror r0
  b4:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
  b8:	00018e02 	andeq	r8, r1, r2, lsl #28
  bc:	00000014 	andeq	r0, r0, r4, lsl r0
  c0:	0000004c 	andeq	r0, r0, ip, asr #32
  c4:	000082a8 	andeq	r8, r0, r8, lsr #5
  c8:	00000090 	muleq	r0, r0, r0
  cc:	83080e42 	movwhi	r0, #36418	; 0x8e42
  d0:	00018e02 	andeq	r8, r1, r2, lsl #28
  d4:	00000014 	andeq	r0, r0, r4, lsl r0
  d8:	0000004c 	andeq	r0, r0, ip, asr #32
  dc:	00008338 	andeq	r8, r0, r8, lsr r3
  e0:	00000080 	andeq	r0, r0, r0, lsl #1
  e4:	83080e42 	movwhi	r0, #36418	; 0x8e42
  e8:	00018e02 	andeq	r8, r1, r2, lsl #28
  ec:	0000000c 	andeq	r0, r0, ip
  f0:	0000004c 	andeq	r0, r0, ip, asr #32
  f4:	000083b8 			; <UNDEFINED> instruction: 0x000083b8
  f8:	00000010 	andeq	r0, r0, r0, lsl r0
  fc:	00000018 	andeq	r0, r0, r8, lsl r0
 100:	0000004c 	andeq	r0, r0, ip, asr #32
 104:	000083c8 	andeq	r8, r0, r8, asr #7
 108:	0000004c 	andeq	r0, r0, ip, asr #32
 10c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 110:	86038504 	strhi	r8, [r3], -r4, lsl #10
 114:	00018e02 	andeq	r8, r1, r2, lsl #28
 118:	00000018 	andeq	r0, r0, r8, lsl r0
 11c:	0000004c 	andeq	r0, r0, ip, asr #32
 120:	00008414 	andeq	r8, r0, r4, lsl r4
 124:	00000058 	andeq	r0, r0, r8, asr r0
 128:	83100e42 	tsthi	r0, #1056	; 0x420
 12c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 130:	00018e02 	andeq	r8, r1, r2, lsl #28
 134:	00000018 	andeq	r0, r0, r8, lsl r0
 138:	0000004c 	andeq	r0, r0, ip, asr #32
 13c:	0000846c 	andeq	r8, r0, ip, ror #8
 140:	00000050 	andeq	r0, r0, r0, asr r0
 144:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 148:	86038504 	strhi	r8, [r3], -r4, lsl #10
 14c:	00018e02 	andeq	r8, r1, r2, lsl #28
 150:	00000018 	andeq	r0, r0, r8, lsl r0
 154:	0000004c 	andeq	r0, r0, ip, asr #32
 158:	000084bc 			; <UNDEFINED> instruction: 0x000084bc
 15c:	00000090 	muleq	r0, r0, r0
 160:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
 164:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
 168:	200e4201 	andcs	r4, lr, r1, lsl #4
 16c:	00000014 	andeq	r0, r0, r4, lsl r0
 170:	0000004c 	andeq	r0, r0, ip, asr #32
 174:	0000854c 	andeq	r8, r0, ip, asr #10
 178:	00000054 	andeq	r0, r0, r4, asr r0
 17c:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 180:	00018e02 	andeq	r8, r1, r2, lsl #28
 184:	00000014 	andeq	r0, r0, r4, lsl r0
 188:	0000004c 	andeq	r0, r0, ip, asr #32
 18c:	000085a0 	andeq	r8, r0, r0, lsr #11
 190:	00000028 	andeq	r0, r0, r8, lsr #32
 194:	83080e42 	movwhi	r0, #36418	; 0x8e42
 198:	00018e02 	andeq	r8, r1, r2, lsl #28
 19c:	00000014 	andeq	r0, r0, r4, lsl r0
 1a0:	0000004c 	andeq	r0, r0, ip, asr #32
 1a4:	000085c8 	andeq	r8, r0, r8, asr #11
 1a8:	00000028 	andeq	r0, r0, r8, lsr #32
 1ac:	83080e42 	movwhi	r0, #36418	; 0x8e42
 1b0:	00018e02 	andeq	r8, r1, r2, lsl #28
 1b4:	00000014 	andeq	r0, r0, r4, lsl r0
 1b8:	0000004c 	andeq	r0, r0, ip, asr #32
 1bc:	000085f0 	strdeq	r8, [r0], -r0
 1c0:	00000028 	andeq	r0, r0, r8, lsr #32
 1c4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 1c8:	00018e02 	andeq	r8, r1, r2, lsl #28
 1cc:	0000000c 	andeq	r0, r0, ip
 1d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1d4:	7c020001 	stcvc	0, cr0, [r2], {1}
 1d8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1dc:	00000018 	andeq	r0, r0, r8, lsl r0
 1e0:	000001cc 	andeq	r0, r0, ip, asr #3
 1e4:	00008684 	andeq	r8, r0, r4, lsl #13
 1e8:	00000080 	andeq	r0, r0, r0, lsl #1
 1ec:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 1f0:	42018e02 	andmi	r8, r1, #2, 28
 1f4:	0000180e 	andeq	r1, r0, lr, lsl #16
 1f8:	00000014 	andeq	r0, r0, r4, lsl r0
 1fc:	000001cc 	andeq	r0, r0, ip, asr #3
 200:	00008704 	andeq	r8, r0, r4, lsl #14
 204:	00000040 	andeq	r0, r0, r0, asr #32
 208:	83080e42 	movwhi	r0, #36418	; 0x8e42
 20c:	00018e02 	andeq	r8, r1, r2, lsl #28
 210:	00000018 	andeq	r0, r0, r8, lsl r0
 214:	000001cc 	andeq	r0, r0, ip, asr #3
 218:	00008744 	andeq	r8, r0, r4, asr #14
 21c:	000001a4 	andeq	r0, r0, r4, lsr #3
 220:	83100e42 	tsthi	r0, #1056	; 0x420
 224:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 228:	00018e02 	andeq	r8, r1, r2, lsl #28
 22c:	00000018 	andeq	r0, r0, r8, lsl r0
 230:	000001cc 	andeq	r0, r0, ip, asr #3
 234:	000088e8 	andeq	r8, r0, r8, ror #17
 238:	0000006c 	andeq	r0, r0, ip, rrx
 23c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
 240:	86028503 	strhi	r8, [r2], -r3, lsl #10
 244:	00000001 	andeq	r0, r0, r1
 248:	0000001c 	andeq	r0, r0, ip, lsl r0
 24c:	000001cc 	andeq	r0, r0, ip, asr #3
 250:	00008954 	andeq	r8, r0, r4, asr r9
 254:	00000034 	andeq	r0, r0, r4, lsr r0
 258:	83180e42 	tsthi	r8, #1056	; 0x420
 25c:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
 260:	87038604 	strhi	r8, [r3, -r4, lsl #12]
 264:	00018e02 	andeq	r8, r1, r2, lsl #28
 268:	00000018 	andeq	r0, r0, r8, lsl r0
 26c:	000001cc 	andeq	r0, r0, ip, asr #3
 270:	00008988 	andeq	r8, r0, r8, lsl #19
 274:	00000058 	andeq	r0, r0, r8, asr r0
 278:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 27c:	86038504 	strhi	r8, [r3], -r4, lsl #10
 280:	00018e02 	andeq	r8, r1, r2, lsl #28
 284:	00000018 	andeq	r0, r0, r8, lsl r0
 288:	000001cc 	andeq	r0, r0, ip, asr #3
 28c:	000089e0 	andeq	r8, r0, r0, ror #19
 290:	000000a0 	andeq	r0, r0, r0, lsr #1
 294:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 298:	86038504 	strhi	r8, [r3], -r4, lsl #10
 29c:	00018e02 	andeq	r8, r1, r2, lsl #28
 2a0:	00000020 	andeq	r0, r0, r0, lsr #32
 2a4:	000001cc 	andeq	r0, r0, ip, asr #3
 2a8:	00008a80 	andeq	r8, r0, r0, lsl #21
 2ac:	0000011c 	andeq	r0, r0, ip, lsl r1
 2b0:	84200e42 	strthi	r0, [r0], #-3650	; 0xe42
 2b4:	86078508 	strhi	r8, [r7], -r8, lsl #10
 2b8:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
 2bc:	8a038904 	bhi	e26d4 <__bss_end__+0xd83bc>
 2c0:	00018e02 	andeq	r8, r1, r2, lsl #28
 2c4:	0000000c 	andeq	r0, r0, ip
 2c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2cc:	7c020001 	stcvc	0, cr0, [r2], {1}
 2d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2d4:	0000000c 	andeq	r0, r0, ip
 2d8:	000002c4 	andeq	r0, r0, r4, asr #5
 2dc:	00008c5c 	andeq	r8, r0, ip, asr ip
 2e0:	00000020 	andeq	r0, r0, r0, lsr #32
 2e4:	0000000c 	andeq	r0, r0, ip
 2e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2ec:	7c020001 	stcvc	0, cr0, [r2], {1}
 2f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2f4:	00000024 	andeq	r0, r0, r4, lsr #32
 2f8:	000002e4 	andeq	r0, r0, r4, ror #5
 2fc:	00008c7c 	andeq	r8, r0, ip, ror ip
 300:	00000058 	andeq	r0, r0, r8, asr r0
 304:	80100e42 	andshi	r0, r0, r2, asr #28
 308:	82038104 	andhi	r8, r3, #4, 2
 30c:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
 310:	07841c0e 	streq	r1, [r4, lr, lsl #24]
 314:	058e0685 	streq	r0, [lr, #1669]	; 0x685
 318:	00280e42 	eoreq	r0, r8, r2, asr #28
 31c:	0000000c 	andeq	r0, r0, ip
 320:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 324:	7c020001 	stcvc	0, cr0, [r2], {1}
 328:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 32c:	00000018 	andeq	r0, r0, r8, lsl r0
 330:	0000031c 	andeq	r0, r0, ip, lsl r3
 334:	00008cd4 	ldrdeq	r8, [r0], -r4
 338:	00000034 	andeq	r0, r0, r4, lsr r0
 33c:	83100e42 	tsthi	r0, #1056	; 0x420
 340:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 344:	00018e02 	andeq	r8, r1, r2, lsl #28
 348:	0000000c 	andeq	r0, r0, ip
 34c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 350:	7c020001 	stcvc	0, cr0, [r2], {1}
 354:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 358:	0000000c 	andeq	r0, r0, ip
 35c:	00000348 	andeq	r0, r0, r8, asr #6
 360:	00008d08 	andeq	r8, r0, r8, lsl #26
 364:	00000014 	andeq	r0, r0, r4, lsl r0
 368:	0000000c 	andeq	r0, r0, ip
 36c:	00000348 	andeq	r0, r0, r8, asr #6
 370:	00008d1c 	andeq	r8, r0, ip, lsl sp
 374:	0000002c 	andeq	r0, r0, ip, lsr #32
 378:	0000000c 	andeq	r0, r0, ip
 37c:	00000348 	andeq	r0, r0, r8, asr #6
 380:	00008d48 	andeq	r8, r0, r8, asr #26
 384:	00000040 	andeq	r0, r0, r0, asr #32
 388:	00000020 	andeq	r0, r0, r0, lsr #32
 38c:	00000348 	andeq	r0, r0, r8, asr #6
 390:	00008d88 	andeq	r8, r0, r8, lsl #27
 394:	00000198 	muleq	r0, r8, r1
 398:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 39c:	86058506 	strhi	r8, [r5], -r6, lsl #10
 3a0:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 3a4:	42018e02 	andmi	r8, r1, #2, 28
 3a8:	0000580e 	andeq	r5, r0, lr, lsl #16
 3ac:	00000014 	andeq	r0, r0, r4, lsl r0
 3b0:	00000348 	andeq	r0, r0, r8, asr #6
 3b4:	00008f20 	andeq	r8, r0, r0, lsr #30
 3b8:	00000050 	andeq	r0, r0, r0, asr r0
 3bc:	83080e42 	movwhi	r0, #36418	; 0x8e42
 3c0:	00018e02 	andeq	r8, r1, r2, lsl #28
 3c4:	00000028 	andeq	r0, r0, r8, lsr #32
 3c8:	00000348 	andeq	r0, r0, r8, asr #6
 3cc:	00008f70 	andeq	r8, r0, r0, ror pc
 3d0:	00000288 	andeq	r0, r0, r8, lsl #5
 3d4:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
 3d8:	86088509 	strhi	r8, [r8], -r9, lsl #10
 3dc:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
 3e0:	8a048905 	bhi	1227fc <__bss_end__+0x1184e4>
 3e4:	8e028b03 	vmlahi.f64	d8, d2, d3
 3e8:	b00e4201 	andlt	r4, lr, r1, lsl #4
 3ec:	00000001 	andeq	r0, r0, r1
 3f0:	0000000c 	andeq	r0, r0, ip
 3f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3f8:	7c020001 	stcvc	0, cr0, [r2], {1}
 3fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 400:	00000014 	andeq	r0, r0, r4, lsl r0
 404:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 408:	000091f8 	strdeq	r9, [r0], -r8
 40c:	00000028 	andeq	r0, r0, r8, lsr #32
 410:	83080e42 	movwhi	r0, #36418	; 0x8e42
 414:	00018e02 	andeq	r8, r1, r2, lsl #28
 418:	0000000c 	andeq	r0, r0, ip
 41c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 420:	7c020001 	stcvc	0, cr0, [r2], {1}
 424:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 428:	00000014 	andeq	r0, r0, r4, lsl r0
 42c:	00000418 	andeq	r0, r0, r8, lsl r4
 430:	00009220 	andeq	r9, r0, r0, lsr #4
 434:	00000034 	andeq	r0, r0, r4, lsr r0
 438:	83080e42 	movwhi	r0, #36418	; 0x8e42
 43c:	00018e02 	andeq	r8, r1, r2, lsl #28
 440:	0000000c 	andeq	r0, r0, ip
 444:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 448:	7c020001 	stcvc	0, cr0, [r2], {1}
 44c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 450:	0000000c 	andeq	r0, r0, ip
 454:	00000440 	andeq	r0, r0, r0, asr #8
 458:	00009254 	andeq	r9, r0, r4, asr r2
 45c:	00000018 	andeq	r0, r0, r8, lsl r0
 460:	0000000c 	andeq	r0, r0, ip
 464:	00000440 	andeq	r0, r0, r0, asr #8
 468:	0000926c 	andeq	r9, r0, ip, ror #4
 46c:	00000014 	andeq	r0, r0, r4, lsl r0
 470:	00000014 	andeq	r0, r0, r4, lsl r0
 474:	00000440 	andeq	r0, r0, r0, asr #8
 478:	00009280 	andeq	r9, r0, r0, lsl #5
 47c:	00000048 	andeq	r0, r0, r8, asr #32
 480:	83080e42 	movwhi	r0, #36418	; 0x8e42
 484:	00018e02 	andeq	r8, r1, r2, lsl #28
 488:	0000000c 	andeq	r0, r0, ip
 48c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 490:	7c020001 	stcvc	0, cr0, [r2], {1}
 494:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 498:	0000000c 	andeq	r0, r0, ip
 49c:	00000488 	andeq	r0, r0, r8, lsl #9
 4a0:	000092c8 	andeq	r9, r0, r8, asr #5
 4a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4a8:	00000014 	andeq	r0, r0, r4, lsl r0
 4ac:	00000488 	andeq	r0, r0, r8, lsl #9
 4b0:	000092e4 	andeq	r9, r0, r4, ror #5
 4b4:	00000014 	andeq	r0, r0, r4, lsl r0
 4b8:	83080e42 	movwhi	r0, #36418	; 0x8e42
 4bc:	00018e02 	andeq	r8, r1, r2, lsl #28
 4c0:	00000018 	andeq	r0, r0, r8, lsl r0
 4c4:	00000488 	andeq	r0, r0, r8, lsl #9
 4c8:	000092f8 	strdeq	r9, [r0], -r8
 4cc:	00000024 	andeq	r0, r0, r4, lsr #32
 4d0:	83100e42 	tsthi	r0, #1056	; 0x420
 4d4:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 4d8:	00018e02 	andeq	r8, r1, r2, lsl #28
 4dc:	00000014 	andeq	r0, r0, r4, lsl r0
 4e0:	00000488 	andeq	r0, r0, r8, lsl #9
 4e4:	0000931c 	andeq	r9, r0, ip, lsl r3
 4e8:	00000014 	andeq	r0, r0, r4, lsl r0
 4ec:	83080e42 	movwhi	r0, #36418	; 0x8e42
 4f0:	00018e02 	andeq	r8, r1, r2, lsl #28
 4f4:	00000014 	andeq	r0, r0, r4, lsl r0
 4f8:	00000488 	andeq	r0, r0, r8, lsl #9
 4fc:	00009330 	andeq	r9, r0, r0, lsr r3
 500:	00000014 	andeq	r0, r0, r4, lsl r0
 504:	83080e42 	movwhi	r0, #36418	; 0x8e42
 508:	00018e02 	andeq	r8, r1, r2, lsl #28
 50c:	0000000c 	andeq	r0, r0, ip
 510:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 514:	7c020001 	stcvc	0, cr0, [r2], {1}
 518:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 51c:	00000014 	andeq	r0, r0, r4, lsl r0
 520:	0000050c 	andeq	r0, r0, ip, lsl #10
 524:	0000961c 	andeq	r9, r0, ip, lsl r6
 528:	00000064 	andeq	r0, r0, r4, rrx
 52c:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 530:	00018e02 	andeq	r8, r1, r2, lsl #28
 534:	00000014 	andeq	r0, r0, r4, lsl r0
 538:	0000050c 	andeq	r0, r0, ip, lsl #10
 53c:	00009680 	andeq	r9, r0, r0, lsl #13
 540:	00000094 	muleq	r0, r4, r0
 544:	83080e42 	movwhi	r0, #36418	; 0x8e42
 548:	00018e02 	andeq	r8, r1, r2, lsl #28
 54c:	00000014 	andeq	r0, r0, r4, lsl r0
 550:	0000050c 	andeq	r0, r0, ip, lsl #10
 554:	00009714 	andeq	r9, r0, r4, lsl r7
 558:	00000058 	andeq	r0, r0, r8, asr r0
 55c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 560:	00018e02 	andeq	r8, r1, r2, lsl #28
 564:	0000000c 	andeq	r0, r0, ip
 568:	0000050c 	andeq	r0, r0, ip, lsl #10
 56c:	0000976c 	andeq	r9, r0, ip, ror #14
 570:	00000018 	andeq	r0, r0, r8, lsl r0
 574:	0000000c 	andeq	r0, r0, ip
 578:	0000050c 	andeq	r0, r0, ip, lsl #10
 57c:	00009784 	andeq	r9, r0, r4, lsl #15
 580:	00000010 	andeq	r0, r0, r0, lsl r0
 584:	0000000c 	andeq	r0, r0, ip
 588:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 58c:	7c020001 	stcvc	0, cr0, [r2], {1}
 590:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 594:	00000014 	andeq	r0, r0, r4, lsl r0
 598:	00000584 	andeq	r0, r0, r4, lsl #11
 59c:	00009794 	muleq	r0, r4, r7
 5a0:	00000014 	andeq	r0, r0, r4, lsl r0
 5a4:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 5a8:	00018e02 	andeq	r8, r1, r2, lsl #28
