
1-test-thread.bin.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e3a0d302 	mov	sp, #134217728	; 0x8000000
    8004:	e3a0b000 	mov	fp, #0
    8008:	eb000423 	bl	909c <_cstart>
    800c:	eb00043a 	bl	90fc <rpi_reboot>

00008010 <thread_code>:
#include "rpi-thread.h"

static unsigned thread_count, thread_sum;

// trivial first thread: does not block, explicitly calls exit.
static void thread_code(void *arg) {
    8010:	e92d4030 	push	{r4, r5, lr}
    8014:	e24dd00c 	sub	sp, sp, #12
    8018:	e1a05000 	mov	r5, r0
    unsigned *x = arg;

    // check tid
    unsigned tid = rpi_cur_thread()->tid;
    801c:	eb0000e5 	bl	83b8 <rpi_cur_thread>
    8020:	e5904044 	ldr	r4, [r0, #68]	; 0x44
	printk("in thread %p, with %x\n", tid, *x);
    8024:	e59f007c 	ldr	r0, [pc, #124]	; 80a8 <thread_code+0x98>
    8028:	e1a01004 	mov	r1, r4
    802c:	e5952000 	ldr	r2, [r5]
    8030:	eb0002b0 	bl	8af8 <printk>
    demand(rpi_cur_thread()->tid == *x+1, 
    8034:	eb0000df 	bl	83b8 <rpi_cur_thread>
    8038:	e5902044 	ldr	r2, [r0, #68]	; 0x44
    803c:	e5953000 	ldr	r3, [r5]
    8040:	e2833001 	add	r3, r3, #1
    8044:	e1520003 	cmp	r2, r3
    8048:	0a000007 	beq	806c <thread_code+0x5c>
    804c:	e58d4000 	str	r4, [sp]
    8050:	e58d3004 	str	r3, [sp, #4]
    8054:	e59f0050 	ldr	r0, [pc, #80]	; 80ac <thread_code+0x9c>
    8058:	e59f1050 	ldr	r1, [pc, #80]	; 80b0 <thread_code+0xa0>
    805c:	e59f2050 	ldr	r2, [pc, #80]	; 80b4 <thread_code+0xa4>
    8060:	e3a0301a 	mov	r3, #26
    8064:	eb0002a3 	bl	8af8 <printk>
    8068:	eb000423 	bl	90fc <rpi_reboot>
                "expected %d, have %d\n", tid,*x+1);

    // check yield.
    rpi_yield();
    806c:	eb0000e3 	bl	8400 <rpi_yield>
	thread_count ++;
    8070:	e59f4040 	ldr	r4, [pc, #64]	; 80b8 <thread_code+0xa8>
    8074:	e5943000 	ldr	r3, [r4]
    8078:	e2833001 	add	r3, r3, #1
    807c:	e5843000 	str	r3, [r4]
    rpi_yield();
    8080:	eb0000de 	bl	8400 <rpi_yield>
	thread_sum += *x;
    8084:	e5952000 	ldr	r2, [r5]
    8088:	e5943004 	ldr	r3, [r4, #4]
    808c:	e0823003 	add	r3, r2, r3
    8090:	e5843004 	str	r3, [r4, #4]
    rpi_yield();
    8094:	eb0000d9 	bl	8400 <rpi_yield>
    // check exit
    rpi_exit(0);
    8098:	e3a00000 	mov	r0, #0
    809c:	eb0000d6 	bl	83fc <rpi_exit>
}
    80a0:	e28dd00c 	add	sp, sp, #12
    80a4:	e8bd8030 	pop	{r4, r5, pc}
    80a8:	0000965c 	andeq	r9, r0, ip, asr r6
    80ac:	00009674 	andeq	r9, r0, r4, ror r6
    80b0:	000096c8 	andeq	r9, r0, r8, asr #13
    80b4:	00009648 	andeq	r9, r0, r8, asr #12
    80b8:	00009d60 	andeq	r9, r0, r0, ror #26

000080bc <notmain>:

void notmain() {
    80bc:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    uart_init();
    80c0:	eb00045c 	bl	9238 <uart_init>
    kmalloc_init();
    80c4:	eb000531 	bl	9590 <kmalloc_init>

    printk("about to test summing of 30 threads\n");
    80c8:	e59f00b8 	ldr	r0, [pc, #184]	; 8188 <notmain+0xcc>
    80cc:	eb000289 	bl	8af8 <printk>

    // change this to increase the number of threads.
	int n = 30;
	thread_sum = thread_count = 0;
    80d0:	e59f30b4 	ldr	r3, [pc, #180]	; 818c <notmain+0xd0>
    80d4:	e3a05000 	mov	r5, #0
    80d8:	e5835000 	str	r5, [r3]
    80dc:	e5835004 	str	r5, [r3, #4]

    unsigned sum = 0;
	for(int i = 0; i < n; i++)  {
    80e0:	e1a04005 	mov	r4, r5
        int *x = kmalloc(sizeof *x);
    80e4:	e3a07004 	mov	r7, #4
        sum += *x = i;
		rpi_fork(thread_code, x);
    80e8:	e59f60a0 	ldr	r6, [pc, #160]	; 8190 <notmain+0xd4>
    // change this to increase the number of threads.
	int n = 30;
	thread_sum = thread_count = 0;

    unsigned sum = 0;
	for(int i = 0; i < n; i++)  {
    80ec:	ea000007 	b	8110 <notmain+0x54>
        int *x = kmalloc(sizeof *x);
    80f0:	e1a00007 	mov	r0, r7
    80f4:	eb0004e7 	bl	9498 <kmalloc>
    80f8:	e1a01000 	mov	r1, r0
        sum += *x = i;
    80fc:	e5804000 	str	r4, [r0]
    8100:	e0855004 	add	r5, r5, r4
		rpi_fork(thread_code, x);
    8104:	e1a00006 	mov	r0, r6
    8108:	eb0000ae 	bl	83c8 <rpi_fork>
    // change this to increase the number of threads.
	int n = 30;
	thread_sum = thread_count = 0;

    unsigned sum = 0;
	for(int i = 0; i < n; i++)  {
    810c:	e2844001 	add	r4, r4, #1
    8110:	e354001d 	cmp	r4, #29
    8114:	dafffff5 	ble	80f0 <notmain+0x34>
        int *x = kmalloc(sizeof *x);
        sum += *x = i;
		rpi_fork(thread_code, x);
    }
	rpi_thread_start();
    8118:	eb0000dd 	bl	8494 <rpi_thread_start>

	// no more threads: check.
	printk("count = %d, sum=%d\n", thread_count, thread_sum);
    811c:	e59f4068 	ldr	r4, [pc, #104]	; 818c <notmain+0xd0>
    8120:	e59f006c 	ldr	r0, [pc, #108]	; 8194 <notmain+0xd8>
    8124:	e5941000 	ldr	r1, [r4]
    8128:	e5942004 	ldr	r2, [r4, #4]
    812c:	eb000271 	bl	8af8 <printk>
	assert(thread_count == n);
    8130:	e5943000 	ldr	r3, [r4]
    8134:	e353001e 	cmp	r3, #30
    8138:	0a000005 	beq	8154 <notmain+0x98>
    813c:	e59f0054 	ldr	r0, [pc, #84]	; 8198 <notmain+0xdc>
    8140:	e59f1054 	ldr	r1, [pc, #84]	; 819c <notmain+0xe0>
    8144:	e59f2054 	ldr	r2, [pc, #84]	; 81a0 <notmain+0xe4>
    8148:	e3a0303a 	mov	r3, #58	; 0x3a
    814c:	eb000269 	bl	8af8 <printk>
    8150:	eb0003e9 	bl	90fc <rpi_reboot>
	assert(thread_sum == sum);
    8154:	e59f3030 	ldr	r3, [pc, #48]	; 818c <notmain+0xd0>
    8158:	e5933004 	ldr	r3, [r3, #4]
    815c:	e1530005 	cmp	r3, r5
    8160:	0a000005 	beq	817c <notmain+0xc0>
    8164:	e59f0038 	ldr	r0, [pc, #56]	; 81a4 <notmain+0xe8>
    8168:	e59f102c 	ldr	r1, [pc, #44]	; 819c <notmain+0xe0>
    816c:	e59f202c 	ldr	r2, [pc, #44]	; 81a0 <notmain+0xe4>
    8170:	e3a0303b 	mov	r3, #59	; 0x3b
    8174:	eb00025f 	bl	8af8 <printk>
    8178:	eb0003df 	bl	90fc <rpi_reboot>
    printk("SUCCESS!\n");
    817c:	e59f0024 	ldr	r0, [pc, #36]	; 81a8 <notmain+0xec>
    8180:	eb00025c 	bl	8af8 <printk>
	clean_reboot();
    8184:	eb0003ba 	bl	9074 <clean_reboot>
    8188:	000096d8 	ldrdeq	r9, [r0], -r8
    818c:	00009d60 	andeq	r9, r0, r0, ror #26
    8190:	00008010 	andeq	r8, r0, r0, lsl r0
    8194:	00009700 	andeq	r9, r0, r0, lsl #14
    8198:	00009714 	andeq	r9, r0, r4, lsl r7
    819c:	000096c8 	andeq	r9, r0, r8, asr #13
    81a0:	00009654 	andeq	r9, r0, r4, asr r6
    81a4:	00009738 	andeq	r9, r0, r8, lsr r7
    81a8:	0000975c 	andeq	r9, r0, ip, asr r7

000081ac <Q_nelem>:
} Q_t;

// used for iteration.
static E *Q_start(Q_t *q)   { return q->head; }
static E *Q_next(E *e)      { return e->next; }
static unsigned Q_nelem(Q_t *q) { return q->cnt; }
    81ac:	e5900008 	ldr	r0, [r0, #8]
    81b0:	e12fff1e 	bx	lr

000081b4 <Q_append>:
    return e;
}

// insert at tail. (for FIFO)
static void Q_append(Q_t *q, E *e) {
    e->next = 0;
    81b4:	e3a03000 	mov	r3, #0
    81b8:	e5813040 	str	r3, [r1, #64]	; 0x40
    q->cnt++;
    81bc:	e5903008 	ldr	r3, [r0, #8]
    81c0:	e2833001 	add	r3, r3, #1
    81c4:	e5803008 	str	r3, [r0, #8]
    if(!q->tail) 
    81c8:	e5903004 	ldr	r3, [r0, #4]
    81cc:	e3530000 	cmp	r3, #0
    81d0:	1a000002 	bne	81e0 <Q_append+0x2c>
        q->head = q->tail = e;
    81d4:	e5801004 	str	r1, [r0, #4]
    81d8:	e5801000 	str	r1, [r0]
    81dc:	e12fff1e 	bx	lr
    else {
        q->tail->next = e;
    81e0:	e5831040 	str	r1, [r3, #64]	; 0x40
        q->tail = e;
    81e4:	e5801004 	str	r1, [r0, #4]
    81e8:	e12fff1e 	bx	lr

000081ec <Q_push>:
    }
}

// insert at head (for LIFO)
static void Q_push(Q_t *q, E *e) {
    q->cnt++;
    81ec:	e5903008 	ldr	r3, [r0, #8]
    81f0:	e2833001 	add	r3, r3, #1
    81f4:	e5803008 	str	r3, [r0, #8]
    e->next = q->head;
    81f8:	e5903000 	ldr	r3, [r0]
    81fc:	e5813040 	str	r3, [r1, #64]	; 0x40
    q->head = e;
    8200:	e5801000 	str	r1, [r0]
    if(!q->tail)
    8204:	e5903004 	ldr	r3, [r0, #4]
    8208:	e3530000 	cmp	r3, #0
        q->tail = e;
    820c:	05801004 	streq	r1, [r0, #4]
    8210:	e12fff1e 	bx	lr

00008214 <th_free>:
    demand(is_aligned(&t->stack[0],8), stack must be 8-byte aligned!);
    t->tid = tid++;
    return t;
}

static void th_free(rpi_thread_t *th) {
    8214:	e92d4008 	push	{r3, lr}
    8218:	e1a01000 	mov	r1, r0
    // push on the front in case helps with caching.
    Q_push(&freeq, th);
    821c:	e59f0004 	ldr	r0, [pc, #4]	; 8228 <th_free+0x14>
    8220:	ebfffff1 	bl	81ec <Q_push>
    8224:	e8bd8008 	pop	{r3, pc}
    8228:	00009d68 	andeq	r9, r0, r8, ror #26

0000822c <Q_empty>:
// used for iteration.
static E *Q_start(Q_t *q)   { return q->head; }
static E *Q_next(E *e)      { return e->next; }
static unsigned Q_nelem(Q_t *q) { return q->cnt; }

static int Q_empty(Q_t *q)  { 
    822c:	e92d4010 	push	{r4, lr}
    8230:	e1a04000 	mov	r4, r0
    if(q->head)
    8234:	e5903000 	ldr	r3, [r0]
    8238:	e3530000 	cmp	r3, #0
    823c:	1a000011 	bne	8288 <Q_empty+0x5c>
        return 0;
    assert(Q_nelem(q) == 0);
    8240:	ebffffd9 	bl	81ac <Q_nelem>
    8244:	e3500000 	cmp	r0, #0
    8248:	0a000005 	beq	8264 <Q_empty+0x38>
    824c:	e59f0044 	ldr	r0, [pc, #68]	; 8298 <Q_empty+0x6c>
    8250:	e59f1044 	ldr	r1, [pc, #68]	; 829c <Q_empty+0x70>
    8254:	e59f2044 	ldr	r2, [pc, #68]	; 82a0 <Q_empty+0x74>
    8258:	e3a03015 	mov	r3, #21
    825c:	eb000225 	bl	8af8 <printk>
    8260:	eb0003a5 	bl	90fc <rpi_reboot>
    demand(!q->tail, invalid Q);
    8264:	e5943004 	ldr	r3, [r4, #4]
    8268:	e3530000 	cmp	r3, #0
    826c:	0a000007 	beq	8290 <Q_empty+0x64>
    8270:	e59f002c 	ldr	r0, [pc, #44]	; 82a4 <Q_empty+0x78>
    8274:	e59f1020 	ldr	r1, [pc, #32]	; 829c <Q_empty+0x70>
    8278:	e59f2020 	ldr	r2, [pc, #32]	; 82a0 <Q_empty+0x74>
    827c:	e3a03016 	mov	r3, #22
    8280:	eb00021c 	bl	8af8 <printk>
    8284:	eb00039c 	bl	90fc <rpi_reboot>
static E *Q_next(E *e)      { return e->next; }
static unsigned Q_nelem(Q_t *q) { return q->cnt; }

static int Q_empty(Q_t *q)  { 
    if(q->head)
        return 0;
    8288:	e3a00000 	mov	r0, #0
    828c:	e8bd8010 	pop	{r4, pc}
    assert(Q_nelem(q) == 0);
    demand(!q->tail, invalid Q);
    return 1;
    8290:	e3a00001 	mov	r0, #1
}
    8294:	e8bd8010 	pop	{r4, pc}
    8298:	000097c4 	andeq	r9, r0, r4, asr #15
    829c:	000097e4 	andeq	r9, r0, r4, ror #15
    82a0:	00009768 	andeq	r9, r0, r8, ror #14
    82a4:	000097e8 	andeq	r9, r0, r8, ror #15

000082a8 <Q_pop>:

// remove from front of list.
static E *Q_pop(Q_t *q) {
    82a8:	e92d4008 	push	{r3, lr}
    demand(q, bad input);
    82ac:	e3500000 	cmp	r0, #0
    82b0:	1a000005 	bne	82cc <Q_pop+0x24>
    82b4:	e59f006c 	ldr	r0, [pc, #108]	; 8328 <Q_pop+0x80>
    82b8:	e59f106c 	ldr	r1, [pc, #108]	; 832c <Q_pop+0x84>
    82bc:	e59f206c 	ldr	r2, [pc, #108]	; 8330 <Q_pop+0x88>
    82c0:	e3a0301c 	mov	r3, #28
    82c4:	eb00020b 	bl	8af8 <printk>
    82c8:	eb00038b 	bl	90fc <rpi_reboot>

    E *e = q->head;
    82cc:	e5903000 	ldr	r3, [r0]
    if(!e) {
    82d0:	e3530000 	cmp	r3, #0
    82d4:	1a000008 	bne	82fc <Q_pop+0x54>
        assert(Q_empty(q));
    82d8:	ebffffd3 	bl	822c <Q_empty>
    82dc:	e3500000 	cmp	r0, #0
    82e0:	1a00000e 	bne	8320 <Q_pop+0x78>
    82e4:	e59f0048 	ldr	r0, [pc, #72]	; 8334 <Q_pop+0x8c>
    82e8:	e59f103c 	ldr	r1, [pc, #60]	; 832c <Q_pop+0x84>
    82ec:	e59f203c 	ldr	r2, [pc, #60]	; 8330 <Q_pop+0x88>
    82f0:	e3a03020 	mov	r3, #32
    82f4:	eb0001ff 	bl	8af8 <printk>
    82f8:	eb00037f 	bl	90fc <rpi_reboot>
        return 0;
    }
    q->cnt--;
    82fc:	e5902008 	ldr	r2, [r0, #8]
    8300:	e2422001 	sub	r2, r2, #1
    8304:	e5802008 	str	r2, [r0, #8]
    q->head = e->next;
    8308:	e5932040 	ldr	r2, [r3, #64]	; 0x40
    830c:	e5802000 	str	r2, [r0]
    if(!q->head)
    8310:	e3520000 	cmp	r2, #0
        q->tail = 0;
    8314:	05802004 	streq	r2, [r0, #4]
    return e;
    8318:	e1a00003 	mov	r0, r3
    831c:	e8bd8008 	pop	{r3, pc}
    demand(q, bad input);

    E *e = q->head;
    if(!e) {
        assert(Q_empty(q));
        return 0;
    8320:	e3a00000 	mov	r0, #0
    q->cnt--;
    q->head = e->next;
    if(!q->head)
        q->tail = 0;
    return e;
}
    8324:	e8bd8008 	pop	{r3, pc}
    8328:	00009818 	andeq	r9, r0, r8, lsl r8
    832c:	000097e4 	andeq	r9, r0, r4, ror #15
    8330:	00009770 	andeq	r9, r0, r0, ror r7
    8334:	00009840 	andeq	r9, r0, r0, asr #16

00008338 <th_alloc>:
}

#define is_aligned(_p,_n) (((unsigned)(_p))%(_n) == 0)

// keep a cache of freed thread blocks.  call kmalloc if run out.
static rpi_thread_t *th_alloc(void) {
    8338:	e92d4008 	push	{r3, lr}
    rpi_thread_t *t = Q_pop(&freeq);
    833c:	e59f005c 	ldr	r0, [pc, #92]	; 83a0 <th_alloc+0x68>
    8340:	ebffffd8 	bl	82a8 <Q_pop>

    // stack has to be 8-byte aligned.
    if(!t) {
    8344:	e3500000 	cmp	r0, #0
    8348:	1a000006 	bne	8368 <th_alloc+0x30>
        t = kmalloc_aligned(sizeof *t, 8);
    834c:	e59f0050 	ldr	r0, [pc, #80]	; 83a4 <th_alloc+0x6c>
    8350:	e3a01008 	mov	r1, #8
    8354:	eb000468 	bl	94fc <kmalloc_aligned>
        nalloced++;
    8358:	e59f3040 	ldr	r3, [pc, #64]	; 83a0 <th_alloc+0x68>
    835c:	e593200c 	ldr	r2, [r3, #12]
    8360:	e2822001 	add	r2, r2, #1
    8364:	e583200c 	str	r2, [r3, #12]
    }
    demand(is_aligned(&t->stack[0],8), stack must be 8-byte aligned!);
    8368:	e3100007 	tst	r0, #7
    836c:	0a000005 	beq	8388 <th_alloc+0x50>
    8370:	e59f0030 	ldr	r0, [pc, #48]	; 83a8 <th_alloc+0x70>
    8374:	e59f1030 	ldr	r1, [pc, #48]	; 83ac <th_alloc+0x74>
    8378:	e59f2030 	ldr	r2, [pc, #48]	; 83b0 <th_alloc+0x78>
    837c:	e3a03024 	mov	r3, #36	; 0x24
    8380:	eb0001dc 	bl	8af8 <printk>
    8384:	eb00035c 	bl	90fc <rpi_reboot>
    t->tid = tid++;
    8388:	e59f2024 	ldr	r2, [pc, #36]	; 83b4 <th_alloc+0x7c>
    838c:	e5923000 	ldr	r3, [r2]
    8390:	e2831001 	add	r1, r3, #1
    8394:	e5821000 	str	r1, [r2]
    8398:	e5803044 	str	r3, [r0, #68]	; 0x44
    return t;
}
    839c:	e8bd8008 	pop	{r3, pc}
    83a0:	00009d68 	andeq	r9, r0, r8, ror #26
    83a4:	00002050 	andeq	r2, r0, r0, asr r0
    83a8:	0000985c 	andeq	r9, r0, ip, asr r8
    83ac:	000098bc 			; <UNDEFINED> instruction: 0x000098bc
    83b0:	00009778 	andeq	r9, r0, r8, ror r7
    83b4:	0000963c 	andeq	r9, r0, ip, lsr r6

000083b8 <rpi_cur_thread>:
static unsigned nalloced = 0;

// return pointer to the current thread.  
rpi_thread_t *rpi_cur_thread(void) {
    return cur_thread;
}
    83b8:	e59f3004 	ldr	r3, [pc, #4]	; 83c4 <rpi_cur_thread+0xc>
    83bc:	e5930010 	ldr	r0, [r3, #16]
    83c0:	e12fff1e 	bx	lr
    83c4:	00009d68 	andeq	r9, r0, r8, ror #26

000083c8 <rpi_fork>:
/***********************************************************************
 * implement the code below.
 */

// create a new thread.
rpi_thread_t *rpi_fork(void (*code)(void *arg), void *arg) {
    83c8:	e92d4070 	push	{r4, r5, r6, lr}
    83cc:	e1a06000 	mov	r6, r0
    83d0:	e1a05001 	mov	r5, r1
    rpi_thread_t *t = th_alloc();
    83d4:	ebffffd7 	bl	8338 <th_alloc>
    83d8:	e1a04000 	mov	r4, r0
     *  - set LR, SP, and store <code> and <arg> where trampoline can get it.
     */
    void rpi_init_trampoline(void);

    //unimplemented();
	t->fn = code;
    83dc:	e5806048 	str	r6, [r0, #72]	; 0x48
	t->arg = arg;
    83e0:	e580504c 	str	r5, [r0, #76]	; 0x4c
    Q_append(&runq, t);
    83e4:	e59f000c 	ldr	r0, [pc, #12]	; 83f8 <rpi_fork+0x30>
    83e8:	e1a01004 	mov	r1, r4
    83ec:	ebffff70 	bl	81b4 <Q_append>
    return t;
}
    83f0:	e1a00004 	mov	r0, r4
    83f4:	e8bd8070 	pop	{r4, r5, r6, pc}
    83f8:	00009d7c 	andeq	r9, r0, ip, ror sp

000083fc <rpi_exit>:

// exit current thread.
void rpi_exit(int exitcode) {
    83fc:	e12fff1e 	bx	lr

00008400 <rpi_yield>:
	 */
	return;
}

// yield the current thread.
void rpi_yield(void) {
    8400:	e12fff1e 	bx	lr

00008404 <rpi_internal_check>:
    printk("rpithreads: done with all threads! returning\n");
}


// internal consistency checks.
void rpi_internal_check(void) {
    8404:	e92d4030 	push	{r4, r5, lr}
    8408:	e24dd014 	sub	sp, sp, #20
    // the blocks on the runq + freeq must equal the total ever allocated
    // or we have leaked storage.
    unsigned n_free = Q_nelem(&freeq),
    840c:	e59f4068 	ldr	r4, [pc, #104]	; 847c <rpi_internal_check+0x78>
    8410:	e1a00004 	mov	r0, r4
    8414:	ebffff64 	bl	81ac <Q_nelem>
    8418:	e1a05000 	mov	r5, r0
             n_run = Q_nelem(&runq),
    841c:	e2840014 	add	r0, r4, #20
    8420:	ebffff61 	bl	81ac <Q_nelem>
             n = n_free + n_run;
    8424:	e0853000 	add	r3, r5, r0

    if(nalloced != n)
    8428:	e594200c 	ldr	r2, [r4, #12]
    842c:	e1520003 	cmp	r2, r3
    8430:	0a000009 	beq	845c <rpi_internal_check+0x58>
        panic("storage leak: should have %d free blocks, have %d (runq=%d, freeq=%d)\n", 
    8434:	e58d2000 	str	r2, [sp]
    8438:	e58d3004 	str	r3, [sp, #4]
    843c:	e58d5008 	str	r5, [sp, #8]
    8440:	e58d000c 	str	r0, [sp, #12]
    8444:	e59f0034 	ldr	r0, [pc, #52]	; 8480 <rpi_internal_check+0x7c>
    8448:	e59f1034 	ldr	r1, [pc, #52]	; 8484 <rpi_internal_check+0x80>
    844c:	e59f2034 	ldr	r2, [pc, #52]	; 8488 <rpi_internal_check+0x84>
    8450:	e3a03088 	mov	r3, #136	; 0x88
    8454:	eb0001a7 	bl	8af8 <printk>
    8458:	eb000327 	bl	90fc <rpi_reboot>
            nalloced, n, n_free,n_run);

    // active thread system: 
    //      walk through the run queue making sure the stack pointer
    //     and ra pointer makes sense.
    if(!Q_empty(&runq)) {
    845c:	e59f0028 	ldr	r0, [pc, #40]	; 848c <rpi_internal_check+0x88>
    8460:	ebffff71 	bl	822c <Q_empty>
    8464:	e3500000 	cmp	r0, #0
    8468:	0a000001 	beq	8474 <rpi_internal_check+0x70>
        //unimplemented();
        return;
    }
    printk("thread: internal check passed\n");
    846c:	e59f001c 	ldr	r0, [pc, #28]	; 8490 <rpi_internal_check+0x8c>
    8470:	eb0001a0 	bl	8af8 <printk>
}
    8474:	e28dd014 	add	sp, sp, #20
    8478:	e8bd8030 	pop	{r4, r5, pc}
    847c:	00009d68 	andeq	r9, r0, r8, ror #26
    8480:	000098cc 	andeq	r9, r0, ip, asr #17
    8484:	000098bc 			; <UNDEFINED> instruction: 0x000098bc
    8488:	00009784 	andeq	r9, r0, r4, lsl #15
    848c:	00009d7c 	andeq	r9, r0, ip, ror sp
    8490:	00009924 	andeq	r9, r0, r4, lsr #18

00008494 <rpi_thread_start>:
/*
 * starts the thread system.  
 * note: our caller is not a thread!  so you have to figure
 * out how to handle this.
 */
void rpi_thread_start(void) {
    8494:	e92d4038 	push	{r3, r4, r5, lr}
    AssertNow(offsetof(rpi_thread_t, stack) % 8 == 0);
    // statically check that the register save area is at offset 0.
    AssertNow(offsetof(rpi_thread_t, reg_save_area) == 0);

    // no other runnable thread: return.
    if(Q_empty(&runq))
    8498:	e59f0058 	ldr	r0, [pc, #88]	; 84f8 <rpi_thread_start+0x64>
    849c:	ebffff62 	bl	822c <Q_empty>
    84a0:	e3500000 	cmp	r0, #0
    84a4:	18bd8038 	popne	{r3, r4, r5, pc}
        return;
    rpi_internal_check();
    84a8:	ebffffd5 	bl	8404 <rpi_internal_check>

    //  1. create a new fake thread 
    //  2. dequeue a thread from the runq
    //  3. context switch to it, saving current state in
    //	    <scheduler_thread>
    scheduler_thread = th_alloc();
    84ac:	ebffffa1 	bl	8338 <th_alloc>
    84b0:	e59f3044 	ldr	r3, [pc, #68]	; 84fc <rpi_thread_start+0x68>
    84b4:	e5830020 	str	r0, [r3, #32]
    rpi_thread_t* next_thread;
	while(cur_thread = Q_pop(&runq)) {
    84b8:	e1a04003 	mov	r4, r3
    84bc:	e2835014 	add	r5, r3, #20
    84c0:	ea000004 	b	84d8 <rpi_thread_start+0x44>
		(*cur_thread->fn)(cur_thread->arg);
    84c4:	e5903048 	ldr	r3, [r0, #72]	; 0x48
    84c8:	e590004c 	ldr	r0, [r0, #76]	; 0x4c
    84cc:	e12fff33 	blx	r3
		th_free(next_thread);
    84d0:	e3a00000 	mov	r0, #0
    84d4:	ebffff4e 	bl	8214 <th_free>
    //  2. dequeue a thread from the runq
    //  3. context switch to it, saving current state in
    //	    <scheduler_thread>
    scheduler_thread = th_alloc();
    rpi_thread_t* next_thread;
	while(cur_thread = Q_pop(&runq)) {
    84d8:	e1a00005 	mov	r0, r5
    84dc:	ebffff71 	bl	82a8 <Q_pop>
    84e0:	e5840010 	str	r0, [r4, #16]
    84e4:	e3500000 	cmp	r0, #0
    84e8:	1afffff5 	bne	84c4 <rpi_thread_start+0x30>
		(*cur_thread->fn)(cur_thread->arg);
		th_free(next_thread);
	}
	//unimplemented();
    printk("rpithreads: done with all threads! returning\n");
    84ec:	e59f000c 	ldr	r0, [pc, #12]	; 8500 <rpi_thread_start+0x6c>
    84f0:	eb000180 	bl	8af8 <printk>
    84f4:	e8bd8038 	pop	{r3, r4, r5, pc}
    84f8:	00009d7c 	andeq	r9, r0, ip, ror sp
    84fc:	00009d68 	andeq	r9, r0, r8, ror #26
    8500:	00009944 	andeq	r9, r0, r4, asr #18

00008504 <rpi_stack_check>:
    }
    printk("thread: internal check passed\n");
}

// check the current thread stack.
void rpi_stack_check(void) {
    8504:	e92d4008 	push	{r3, lr}
    unimplemented();
    8508:	e59f0010 	ldr	r0, [pc, #16]	; 8520 <rpi_stack_check+0x1c>
    850c:	e59f1010 	ldr	r1, [pc, #16]	; 8524 <rpi_stack_check+0x20>
    8510:	e59f2010 	ldr	r2, [pc, #16]	; 8528 <rpi_stack_check+0x24>
    8514:	e3a03096 	mov	r3, #150	; 0x96
    8518:	eb000176 	bl	8af8 <printk>
    851c:	eb0002f6 	bl	90fc <rpi_reboot>
    8520:	00009974 	andeq	r9, r0, r4, ror r9
    8524:	000098bc 			; <UNDEFINED> instruction: 0x000098bc
    8528:	00009798 	muleq	r0, r8, r7

0000852c <rpi_join>:
/********************************************************************
 * save for homework.
 */

// block caller until thread <th> completes.
void rpi_join(rpi_thread_t *th) {
    852c:	e92d4008 	push	{r3, lr}
    unimplemented();
    8530:	e59f0010 	ldr	r0, [pc, #16]	; 8548 <rpi_join+0x1c>
    8534:	e59f1010 	ldr	r1, [pc, #16]	; 854c <rpi_join+0x20>
    8538:	e59f2010 	ldr	r2, [pc, #16]	; 8550 <rpi_join+0x24>
    853c:	e3a0309f 	mov	r3, #159	; 0x9f
    8540:	eb00016c 	bl	8af8 <printk>
    8544:	eb0002ec 	bl	90fc <rpi_reboot>
    8548:	00009974 	andeq	r9, r0, r4, ror r9
    854c:	000098bc 			; <UNDEFINED> instruction: 0x000098bc
    8550:	000097a8 	andeq	r9, r0, r8, lsr #15

00008554 <rpi_exact_sleep>:
}

// put the current thread on a blocked queue: resume in 
// exactly // <usec> micro-seconds.  not before, not after.
// should give low-error resumption times.
void rpi_exact_sleep(uint32_t usec) {
    8554:	e92d4008 	push	{r3, lr}
    unimplemented();
    8558:	e59f0010 	ldr	r0, [pc, #16]	; 8570 <rpi_exact_sleep+0x1c>
    855c:	e59f1010 	ldr	r1, [pc, #16]	; 8574 <rpi_exact_sleep+0x20>
    8560:	e59f2010 	ldr	r2, [pc, #16]	; 8578 <rpi_exact_sleep+0x24>
    8564:	e3a030a6 	mov	r3, #166	; 0xa6
    8568:	eb000162 	bl	8af8 <printk>
    856c:	eb0002e2 	bl	90fc <rpi_reboot>
    8570:	00009974 	andeq	r9, r0, r4, ror r9
    8574:	000098bc 			; <UNDEFINED> instruction: 0x000098bc
    8578:	000097b4 			; <UNDEFINED> instruction: 0x000097b4

0000857c <rpi_get_sp>:
    857c:	e12fff1e 	bx	lr

00008580 <rpi_cswitch>:
    8580:	e12fff1e 	bx	lr

00008584 <rpi_init_trampoline>:
    8584:	e12fff1e 	bx	lr

00008588 <cq_print>:
#ifdef LINUX
#   include <string.h>
#endif
#include "circular.h"

void cq_print(cq_t *c) {
    8588:	e92d4010 	push	{r4, lr}
    858c:	e24dd010 	sub	sp, sp, #16
    debug("cq print: head=%d, tail=%d, nelem=%d, empty=%d\n", 
    8590:	e59f205c 	ldr	r2, [pc, #92]	; 85f4 <cq_print+0x6c>
    8594:	e790e002 	ldr	lr, [r0, r2]
    8598:	e59f3058 	ldr	r3, [pc, #88]	; 85f8 <cq_print+0x70>
    859c:	e790c003 	ldr	ip, [r0, r3]
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }

// if adding 1 to head = tail, then we have no space.
static inline int cq_full(cq_t *q) { return (q->head+1) % CQ_N == q->tail; }

static inline unsigned cq_nelem(cq_t *q) { return (q->head - q->tail) % CQ_N; }
    85a0:	e7904002 	ldr	r4, [r0, r2]
    85a4:	e7901003 	ldr	r1, [r0, r3]
    85a8:	e0611004 	rsb	r1, r1, r4
    85ac:	e1a01981 	lsl	r1, r1, #19
    85b0:	e1a019a1 	lsr	r1, r1, #19
void cq_print(cq_t *c);

/*************************************************************************************
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }
    85b4:	e7902002 	ldr	r2, [r0, r2]
    85b8:	e7903003 	ldr	r3, [r0, r3]
    85bc:	e1520003 	cmp	r2, r3
    85c0:	13a03000 	movne	r3, #0
    85c4:	03a03001 	moveq	r3, #1
    85c8:	e58de000 	str	lr, [sp]
    85cc:	e58dc004 	str	ip, [sp, #4]
    85d0:	e58d1008 	str	r1, [sp, #8]
    85d4:	e58d300c 	str	r3, [sp, #12]
    85d8:	e59f001c 	ldr	r0, [pc, #28]	; 85fc <cq_print+0x74>
    85dc:	e59f101c 	ldr	r1, [pc, #28]	; 8600 <cq_print+0x78>
    85e0:	e59f201c 	ldr	r2, [pc, #28]	; 8604 <cq_print+0x7c>
    85e4:	e3a0300a 	mov	r3, #10
    85e8:	eb000142 	bl	8af8 <printk>
                c->head, c->tail, cq_nelem(c), cq_empty(c));
}
    85ec:	e28dd010 	add	sp, sp, #16
    85f0:	e8bd8010 	pop	{r4, pc}
    85f4:	00002004 	andeq	r2, r0, r4
    85f8:	00002008 	andeq	r2, r0, r8
    85fc:	000099d4 	ldrdeq	r9, [r0], -r4
    8600:	00009a10 	andeq	r9, r0, r0, lsl sl
    8604:	000099a0 	andeq	r9, r0, r0, lsr #19

00008608 <cq_ok>:

void cq_ok(cq_t *c) {
    8608:	e92d4008 	push	{r3, lr}
    if(c->fence != 0x12345678)
    860c:	e3a03a02 	mov	r3, #8192	; 0x2000
    8610:	e7902003 	ldr	r2, [r0, r3]
    8614:	e59f301c 	ldr	r3, [pc, #28]	; 8638 <cq_ok+0x30>
    8618:	e1520003 	cmp	r2, r3
    861c:	08bd8008 	popeq	{r3, pc}
        panic("fence is corrupted\n");
    8620:	e59f0014 	ldr	r0, [pc, #20]	; 863c <cq_ok+0x34>
    8624:	e59f1014 	ldr	r1, [pc, #20]	; 8640 <cq_ok+0x38>
    8628:	e59f2014 	ldr	r2, [pc, #20]	; 8644 <cq_ok+0x3c>
    862c:	e3a0300f 	mov	r3, #15
    8630:	eb000130 	bl	8af8 <printk>
    8634:	eb0002b0 	bl	90fc <rpi_reboot>
    8638:	12345678 	eorsne	r5, r4, #120, 12	; 0x7800000
    863c:	00009a1c 	andeq	r9, r0, ip, lsl sl
    8640:	00009a10 	andeq	r9, r0, r0, lsl sl
    8644:	000099ac 	andeq	r9, r0, ip, lsr #19

00008648 <cq_init>:
}

void cq_init(cq_t *c, unsigned errors_fatal_p) {
    8648:	e92d4038 	push	{r3, r4, r5, lr}
    864c:	e1a04000 	mov	r4, r0
    8650:	e1a05001 	mov	r5, r1
    memset(c, 0, sizeof *c);
    8654:	e3a01000 	mov	r1, #0
    8658:	e59f215c 	ldr	r2, [pc, #348]	; 87bc <cq_init+0x174>
    865c:	eb00011d 	bl	8ad8 <memset>
    c->fence = 0x12345678;
    8660:	e59f2158 	ldr	r2, [pc, #344]	; 87c0 <cq_init+0x178>
    8664:	e3a03a02 	mov	r3, #8192	; 0x2000
    8668:	e7842003 	str	r2, [r4, r3]
    c->head = c->tail = 0;
    866c:	e59f2150 	ldr	r2, [pc, #336]	; 87c4 <cq_init+0x17c>
    8670:	e3a03000 	mov	r3, #0
    8674:	e7843002 	str	r3, [r4, r2]
    8678:	e59f0148 	ldr	r0, [pc, #328]	; 87c8 <cq_init+0x180>
    867c:	e7843000 	str	r3, [r4, r0]
    c->overflow = 0;
    8680:	e59f1144 	ldr	r1, [pc, #324]	; 87cc <cq_init+0x184>
    8684:	e7843001 	str	r3, [r4, r1]
    c->errors_fatal_p = errors_fatal_p;
    8688:	e59f3140 	ldr	r3, [pc, #320]	; 87d0 <cq_init+0x188>
    868c:	e7d41003 	ldrb	r1, [r4, r3]
    8690:	e2055001 	and	r5, r5, #1
    8694:	e3c11001 	bic	r1, r1, #1
    8698:	e1855001 	orr	r5, r5, r1
    869c:	e7c45003 	strb	r5, [r4, r3]
    86a0:	e7941000 	ldr	r1, [r4, r0]
    86a4:	e7943002 	ldr	r3, [r4, r2]
    assert(cq_empty(c));
    86a8:	e1510003 	cmp	r1, r3
    86ac:	0a000005 	beq	86c8 <cq_init+0x80>
    86b0:	e59f011c 	ldr	r0, [pc, #284]	; 87d4 <cq_init+0x18c>
    86b4:	e59f111c 	ldr	r1, [pc, #284]	; 87d8 <cq_init+0x190>
    86b8:	e59f211c 	ldr	r2, [pc, #284]	; 87dc <cq_init+0x194>
    86bc:	e3a03018 	mov	r3, #24
    86c0:	eb00010c 	bl	8af8 <printk>
    86c4:	eb00028c 	bl	90fc <rpi_reboot>

// if adding 1 to head = tail, then we have no space.
static inline int cq_full(cq_t *q) { return (q->head+1) % CQ_N == q->tail; }
    86c8:	e59f30f8 	ldr	r3, [pc, #248]	; 87c8 <cq_init+0x180>
    86cc:	e7942003 	ldr	r2, [r4, r3]
    86d0:	e2822001 	add	r2, r2, #1
    86d4:	e1a02982 	lsl	r2, r2, #19
    86d8:	e2833004 	add	r3, r3, #4
    86dc:	e7943003 	ldr	r3, [r4, r3]
    assert(!cq_full(c));
    86e0:	e15309a2 	cmp	r3, r2, lsr #19
    86e4:	1a000005 	bne	8700 <cq_init+0xb8>
    86e8:	e59f00f0 	ldr	r0, [pc, #240]	; 87e0 <cq_init+0x198>
    86ec:	e59f10e4 	ldr	r1, [pc, #228]	; 87d8 <cq_init+0x190>
    86f0:	e59f20e4 	ldr	r2, [pc, #228]	; 87dc <cq_init+0x194>
    86f4:	e3a03019 	mov	r3, #25
    86f8:	eb0000fe 	bl	8af8 <printk>
    86fc:	eb00027e 	bl	90fc <rpi_reboot>

static inline unsigned cq_nelem(cq_t *q) { return (q->head - q->tail) % CQ_N; }
    8700:	e59f30c0 	ldr	r3, [pc, #192]	; 87c8 <cq_init+0x180>
    8704:	e7942003 	ldr	r2, [r4, r3]
    8708:	e2833004 	add	r3, r3, #4
    870c:	e7943003 	ldr	r3, [r4, r3]
    8710:	e0633002 	rsb	r3, r3, r2
    assert(cq_nelem(c) == 0);
    8714:	e1b03983 	lsls	r3, r3, #19
    8718:	0a000005 	beq	8734 <cq_init+0xec>
    871c:	e59f00c0 	ldr	r0, [pc, #192]	; 87e4 <cq_init+0x19c>
    8720:	e59f10b0 	ldr	r1, [pc, #176]	; 87d8 <cq_init+0x190>
    8724:	e59f20b0 	ldr	r2, [pc, #176]	; 87dc <cq_init+0x194>
    8728:	e3a0301a 	mov	r3, #26
    872c:	eb0000f1 	bl	8af8 <printk>
    8730:	eb000271 	bl	90fc <rpi_reboot>
void cq_print(cq_t *c);

/*************************************************************************************
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }
    8734:	e59f308c 	ldr	r3, [pc, #140]	; 87c8 <cq_init+0x180>
    8738:	e7942003 	ldr	r2, [r4, r3]
    873c:	e2833004 	add	r3, r3, #4
    8740:	e7943003 	ldr	r3, [r4, r3]
static inline unsigned cq_nelem(cq_t *q) { return (q->head - q->tail) % CQ_N; }
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }

// not blocking: wait: this never calls getc?
static inline int cq_pop_nonblock(cq_t *c, cqe_t *e) {
    if(cq_empty(c))
    8744:	e1520003 	cmp	r2, r3
    8748:	0a000009 	beq	8774 <cq_init+0x12c>
        return 0;
    unsigned tail = c->tail;
    874c:	e59f3070 	ldr	r3, [pc, #112]	; 87c4 <cq_init+0x17c>
    8750:	e7942003 	ldr	r2, [r4, r3]
    *e = c->c_buf[tail];
    8754:	e7d41002 	ldrb	r1, [r4, r2]
    8758:	e6ef1071 	uxtb	r1, r1
    c->tail = (tail+1)%CQ_N;
    875c:	e2822001 	add	r2, r2, #1
    8760:	e1a02982 	lsl	r2, r2, #19
    8764:	e1a029a2 	lsr	r2, r2, #19
    8768:	e7842003 	str	r2, [r4, r3]
    return 1;
    876c:	e3a03001 	mov	r3, #1
    8770:	ea000001 	b	877c <cq_init+0x134>
    cqe_t e = 0x12;
    8774:	e3a01012 	mov	r1, #18
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }

// not blocking: wait: this never calls getc?
static inline int cq_pop_nonblock(cq_t *c, cqe_t *e) {
    if(cq_empty(c))
        return 0;
    8778:	e3a03000 	mov	r3, #0
    assert(cq_pop_nonblock(c,&e) == 0 && e == 0x12);
    877c:	e3530000 	cmp	r3, #0
    8780:	1a000002 	bne	8790 <cq_init+0x148>
    8784:	e3510012 	cmp	r1, #18
    8788:	0a000002 	beq	8798 <cq_init+0x150>
    878c:	ea000002 	b	879c <cq_init+0x154>
    8790:	e3a03000 	mov	r3, #0
    8794:	ea000000 	b	879c <cq_init+0x154>
    8798:	e3a03001 	mov	r3, #1
    879c:	e3530000 	cmp	r3, #0
    87a0:	18bd8038 	popne	{r3, r4, r5, pc}
    87a4:	e59f003c 	ldr	r0, [pc, #60]	; 87e8 <cq_init+0x1a0>
    87a8:	e59f1028 	ldr	r1, [pc, #40]	; 87d8 <cq_init+0x190>
    87ac:	e59f2028 	ldr	r2, [pc, #40]	; 87dc <cq_init+0x194>
    87b0:	e3a0301c 	mov	r3, #28
    87b4:	eb0000cf 	bl	8af8 <printk>
    87b8:	eb00024f 	bl	90fc <rpi_reboot>
    87bc:	00002014 	andeq	r2, r0, r4, lsl r0
    87c0:	12345678 	eorsne	r5, r4, #120, 12	; 0x7800000
    87c4:	00002008 	andeq	r2, r0, r8
    87c8:	00002004 	andeq	r2, r0, r4
    87cc:	0000200c 	andeq	r2, r0, ip
    87d0:	00002010 	andeq	r2, r0, r0, lsl r0
    87d4:	00009a40 	andeq	r9, r0, r0, asr #20
    87d8:	00009a10 	andeq	r9, r0, r0, lsl sl
    87dc:	000099b4 			; <UNDEFINED> instruction: 0x000099b4
    87e0:	00009a5c 	andeq	r9, r0, ip, asr sl
    87e4:	00009a78 	andeq	r9, r0, r8, ror sl
    87e8:	00009a9c 	muleq	r0, ip, sl

000087ec <cq_pop>:
    assert(sz == cq_nelem(c));
    return 1;
}

// called from user space.
cqe_t cq_pop(cq_t *c) {
    87ec:	e92d0070 	push	{r4, r5, r6}
    87f0:	e1a03000 	mov	r3, r0
void cq_print(cq_t *c);

/*************************************************************************************
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }
    87f4:	e59f4054 	ldr	r4, [pc, #84]	; 8850 <cq_pop+0x64>
    87f8:	e59f2054 	ldr	r2, [pc, #84]	; 8854 <cq_pop+0x68>
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }

// not blocking: wait: this never calls getc?
static inline int cq_pop_nonblock(cq_t *c, cqe_t *e) {
    if(cq_empty(c))
        return 0;
    87fc:	e3a06000 	mov	r6, #0
    unsigned tail = c->tail;
    *e = c->c_buf[tail];
    c->tail = (tail+1)%CQ_N;
    return 1;
    8800:	e3a00001 	mov	r0, #1
void cq_print(cq_t *c);

/*************************************************************************************
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }
    8804:	e793c004 	ldr	ip, [r3, r4]
    8808:	e7931002 	ldr	r1, [r3, r2]
static inline unsigned cq_nelem(cq_t *q) { return (q->head - q->tail) % CQ_N; }
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }

// not blocking: wait: this never calls getc?
static inline int cq_pop_nonblock(cq_t *c, cqe_t *e) {
    if(cq_empty(c))
    880c:	e15c0001 	cmp	ip, r1
    8810:	0a000008 	beq	8838 <cq_pop+0x4c>
        return 0;
    unsigned tail = c->tail;
    8814:	e7931002 	ldr	r1, [r3, r2]
    *e = c->c_buf[tail];
    8818:	e7d35001 	ldrb	r5, [r3, r1]
    881c:	e6ef5075 	uxtb	r5, r5
    c->tail = (tail+1)%CQ_N;
    8820:	e2811001 	add	r1, r1, #1
    8824:	e1a01981 	lsl	r1, r1, #19
    8828:	e1a019a1 	lsr	r1, r1, #19
    882c:	e7831002 	str	r1, [r3, r2]
    return 1;
    8830:	e1a01000 	mov	r1, r0
    8834:	ea000000 	b	883c <cq_pop+0x50>
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }

// not blocking: wait: this never calls getc?
static inline int cq_pop_nonblock(cq_t *c, cqe_t *e) {
    if(cq_empty(c))
        return 0;
    8838:	e1a01006 	mov	r1, r6
    cqe_t e;

	// wait til interrupt puts something here: if interrupts not enabled,
    // this will deadlock.
    while(!cq_pop_nonblock(c,&e))
    883c:	e3510000 	cmp	r1, #0
    8840:	0affffef 	beq	8804 <cq_pop+0x18>
        ;
        // panic("will deadlock: interrupts not enabled [FIXME]\n");
    return e;
}
    8844:	e1a00005 	mov	r0, r5
    8848:	e8bd0070 	pop	{r4, r5, r6}
    884c:	e12fff1e 	bx	lr
    8850:	00002004 	andeq	r2, r0, r4
    8854:	00002008 	andeq	r2, r0, r8

00008858 <cq_pop_n>:

void cq_pop_n(cq_t *c, void *data, unsigned n) {
    8858:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    885c:	e1a07000 	mov	r7, r0
    8860:	e1a06001 	mov	r6, r1
    8864:	e1a05002 	mov	r5, r2
    cqe_t *p = data;

    for(int i = 0; i < n; i++)
    8868:	e3a04000 	mov	r4, #0
    886c:	ea000003 	b	8880 <cq_pop_n+0x28>
        p[i] = cq_pop(c);
    8870:	e1a00007 	mov	r0, r7
    8874:	ebffffdc 	bl	87ec <cq_pop>
    8878:	e7c60004 	strb	r0, [r6, r4]
}

void cq_pop_n(cq_t *c, void *data, unsigned n) {
    cqe_t *p = data;

    for(int i = 0; i < n; i++)
    887c:	e2844001 	add	r4, r4, #1
    8880:	e1540005 	cmp	r4, r5
    8884:	3afffff9 	bcc	8870 <cq_pop_n+0x18>
        p[i] = cq_pop(c);
}
    8888:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

0000888c <cq_pop_n_noblk>:
    assert(cq_nelem(c) == 0);
    cqe_t e = 0x12;
    assert(cq_pop_nonblock(c,&e) == 0 && e == 0x12);
}

int cq_pop_n_noblk(cq_t *q, void *data, unsigned n) {
    888c:	e92d4070 	push	{r4, r5, r6, lr}
    8890:	e1a04000 	mov	r4, r0
    8894:	e1a06001 	mov	r6, r1
    8898:	e1a05002 	mov	r5, r2
    cq_ok(q);
    889c:	ebffff59 	bl	8608 <cq_ok>
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }

// if adding 1 to head = tail, then we have no space.
static inline int cq_full(cq_t *q) { return (q->head+1) % CQ_N == q->tail; }

static inline unsigned cq_nelem(cq_t *q) { return (q->head - q->tail) % CQ_N; }
    88a0:	e59f3038 	ldr	r3, [pc, #56]	; 88e0 <cq_pop_n_noblk+0x54>
    88a4:	e7942003 	ldr	r2, [r4, r3]
    88a8:	e2833004 	add	r3, r3, #4
    88ac:	e7943003 	ldr	r3, [r4, r3]
    88b0:	e0633002 	rsb	r3, r3, r2
    88b4:	e1a03983 	lsl	r3, r3, #19
    if(cq_nelem(q) < n)
    88b8:	e15509a3 	cmp	r5, r3, lsr #19
    88bc:	8a000005 	bhi	88d8 <cq_pop_n_noblk+0x4c>
        return 0;
    cq_pop_n(q,data,n);
    88c0:	e1a00004 	mov	r0, r4
    88c4:	e1a01006 	mov	r1, r6
    88c8:	e1a02005 	mov	r2, r5
    88cc:	ebffffe1 	bl	8858 <cq_pop_n>
    return 1;
    88d0:	e3a00001 	mov	r0, #1
    88d4:	e8bd8070 	pop	{r4, r5, r6, pc}
}

int cq_pop_n_noblk(cq_t *q, void *data, unsigned n) {
    cq_ok(q);
    if(cq_nelem(q) < n)
        return 0;
    88d8:	e3a00000 	mov	r0, #0
    cq_pop_n(q,data,n);
    return 1;
}
    88dc:	e8bd8070 	pop	{r4, r5, r6, pc}
    88e0:	00002004 	andeq	r2, r0, r4

000088e4 <cq_peek_n>:

// non-destructively peek ahead <n> entries.
int cq_peek_n(cq_t *c, cqe_t *v, unsigned n) {
    88e4:	e92d4070 	push	{r4, r5, r6, lr}
    88e8:	e1a04000 	mov	r4, r0
    88ec:	e59f307c 	ldr	r3, [pc, #124]	; 8970 <cq_peek_n+0x8c>
    88f0:	e7905003 	ldr	r5, [r0, r3]
    88f4:	e2833004 	add	r3, r3, #4
    88f8:	e7903003 	ldr	r3, [r0, r3]
    88fc:	e0635005 	rsb	r5, r3, r5
    8900:	e1a05985 	lsl	r5, r5, #19
    8904:	e1a059a5 	lsr	r5, r5, #19
    int sz = cq_nelem(c);
    if(n > sz)
    8908:	e1520005 	cmp	r2, r5
    890c:	8a000013 	bhi	8960 <cq_peek_n+0x7c>
        return 0;
    unsigned tail = c->tail;
    8910:	e59f305c 	ldr	r3, [pc, #92]	; 8974 <cq_peek_n+0x90>
    8914:	e7906003 	ldr	r6, [r0, r3]
    if(!cq_pop_n_noblk(c, v, n))
    8918:	ebffffdb 	bl	888c <cq_pop_n_noblk>
    891c:	e3500000 	cmp	r0, #0
    8920:	08bd8070 	popeq	{r4, r5, r6, pc}
        return 0;
    c->tail = tail;
    8924:	e59f3048 	ldr	r3, [pc, #72]	; 8974 <cq_peek_n+0x90>
    8928:	e7846003 	str	r6, [r4, r3]
    892c:	e59f203c 	ldr	r2, [pc, #60]	; 8970 <cq_peek_n+0x8c>
    8930:	e7942002 	ldr	r2, [r4, r2]
    8934:	e7943003 	ldr	r3, [r4, r3]
    8938:	e0633002 	rsb	r3, r3, r2
    893c:	e1a03983 	lsl	r3, r3, #19
    assert(sz == cq_nelem(c));
    8940:	e15509a3 	cmp	r5, r3, lsr #19
    8944:	0a000007 	beq	8968 <cq_peek_n+0x84>
    8948:	e59f0028 	ldr	r0, [pc, #40]	; 8978 <cq_peek_n+0x94>
    894c:	e59f1028 	ldr	r1, [pc, #40]	; 897c <cq_peek_n+0x98>
    8950:	e59f2028 	ldr	r2, [pc, #40]	; 8980 <cq_peek_n+0x9c>
    8954:	e3a03030 	mov	r3, #48	; 0x30
    8958:	eb000066 	bl	8af8 <printk>
    895c:	eb0001e6 	bl	90fc <rpi_reboot>

// non-destructively peek ahead <n> entries.
int cq_peek_n(cq_t *c, cqe_t *v, unsigned n) {
    int sz = cq_nelem(c);
    if(n > sz)
        return 0;
    8960:	e3a00000 	mov	r0, #0
    8964:	e8bd8070 	pop	{r4, r5, r6, pc}
    unsigned tail = c->tail;
    if(!cq_pop_n_noblk(c, v, n))
        return 0;
    c->tail = tail;
    assert(sz == cq_nelem(c));
    return 1;
    8968:	e3a00001 	mov	r0, #1
}
    896c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8970:	00002004 	andeq	r2, r0, r4
    8974:	00002008 	andeq	r2, r0, r8
    8978:	00009ad4 	ldrdeq	r9, [r0], -r4
    897c:	00009a10 	andeq	r9, r0, r0, lsl sl
    8980:	000099bc 			; <UNDEFINED> instruction: 0x000099bc

00008984 <cq_push_n>:

    for(int i = 0; i < n; i++)
        p[i] = cq_pop(c);
}

int cq_push_n(cq_t *c, void *data, unsigned n) {
    8984:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8988:	e59f30f8 	ldr	r3, [pc, #248]	; 8a88 <cq_push_n+0x104>
    898c:	e790c003 	ldr	ip, [r0, r3]
    8990:	e2833004 	add	r3, r3, #4
    8994:	e7903003 	ldr	r3, [r0, r3]
    8998:	e063300c 	rsb	r3, r3, ip
    899c:	e1a03983 	lsl	r3, r3, #19
    89a0:	e1a039a3 	lsr	r3, r3, #19
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }
    89a4:	e2633a02 	rsb	r3, r3, #8192	; 0x2000
    cqe_t *p = data;

    if(cq_nspace(c) < n)
    89a8:	e1520003 	cmp	r2, r3
    89ac:	8a00002f 	bhi	8a70 <cq_push_n+0xec>
    89b0:	e3a03000 	mov	r3, #0
    return 1;
}

// non-blocking push.
static inline int cq_push(cq_t *c, cqe_t x) {
    unsigned head = c->head;
    89b4:	e59fc0cc 	ldr	ip, [pc, #204]	; 8a88 <cq_push_n+0x104>
    unsigned tail = c->tail;
    89b8:	e59f50cc 	ldr	r5, [pc, #204]	; 8a8c <cq_push_n+0x108>
    if(cq_full(c)) 
        return 0;
    89bc:	e1a09003 	mov	r9, r3
    c->c_buf[head] = x;
    c->head = (head + 1) % CQ_N;
    return 1;
    89c0:	e3a08001 	mov	r8, #1
    89c4:	ea000019 	b	8a30 <cq_push_n+0xac>
        return 0;
    for(int i = 0; i < n; i++)
        if(!cq_push(c, p[i]))
    89c8:	e7d1a003 	ldrb	sl, [r1, r3]
    return 1;
}

// non-blocking push.
static inline int cq_push(cq_t *c, cqe_t x) {
    unsigned head = c->head;
    89cc:	e790400c 	ldr	r4, [r0, ip]
    unsigned tail = c->tail;
    89d0:	e7906005 	ldr	r6, [r0, r5]
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }

// if adding 1 to head = tail, then we have no space.
static inline int cq_full(cq_t *q) { return (q->head+1) % CQ_N == q->tail; }
    89d4:	e790700c 	ldr	r7, [r0, ip]
    89d8:	e2877001 	add	r7, r7, #1
    89dc:	e1a07987 	lsl	r7, r7, #19
    89e0:	e7906005 	ldr	r6, [r0, r5]

// non-blocking push.
static inline int cq_push(cq_t *c, cqe_t x) {
    unsigned head = c->head;
    unsigned tail = c->tail;
    if(cq_full(c)) 
    89e4:	e15609a7 	cmp	r6, r7, lsr #19
    89e8:	0a000006 	beq	8a08 <cq_push_n+0x84>
        return 0;
    c->c_buf[head] = x;
    89ec:	e7c0a004 	strb	sl, [r0, r4]
    c->head = (head + 1) % CQ_N;
    89f0:	e2844001 	add	r4, r4, #1
    89f4:	e1a04984 	lsl	r4, r4, #19
    89f8:	e1a049a4 	lsr	r4, r4, #19
    89fc:	e780400c 	str	r4, [r0, ip]
    return 1;
    8a00:	e1a04008 	mov	r4, r8
    8a04:	ea000000 	b	8a0c <cq_push_n+0x88>
// non-blocking push.
static inline int cq_push(cq_t *c, cqe_t x) {
    unsigned head = c->head;
    unsigned tail = c->tail;
    if(cq_full(c)) 
        return 0;
    8a08:	e1a04009 	mov	r4, r9
    8a0c:	e3540000 	cmp	r4, #0
    8a10:	1a000005 	bne	8a2c <cq_push_n+0xa8>
            panic("not handling this\n");
    8a14:	e59f0074 	ldr	r0, [pc, #116]	; 8a90 <cq_push_n+0x10c>
    8a18:	e59f1074 	ldr	r1, [pc, #116]	; 8a94 <cq_push_n+0x110>
    8a1c:	e59f2074 	ldr	r2, [pc, #116]	; 8a98 <cq_push_n+0x114>
    8a20:	e3a0304e 	mov	r3, #78	; 0x4e
    8a24:	eb000033 	bl	8af8 <printk>
    8a28:	eb0001b3 	bl	90fc <rpi_reboot>
int cq_push_n(cq_t *c, void *data, unsigned n) {
    cqe_t *p = data;

    if(cq_nspace(c) < n)
        return 0;
    for(int i = 0; i < n; i++)
    8a2c:	e2833001 	add	r3, r3, #1
    8a30:	e1530002 	cmp	r3, r2
    8a34:	3affffe3 	bcc	89c8 <cq_push_n+0x44>
        if(!cq_push(c, p[i]))
            panic("not handling this\n");
    if(n)
    8a38:	e3520000 	cmp	r2, #0
    8a3c:	0a00000d 	beq	8a78 <cq_push_n+0xf4>
void cq_print(cq_t *c);

/*************************************************************************************
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }
    8a40:	e59f3040 	ldr	r3, [pc, #64]	; 8a88 <cq_push_n+0x104>
    8a44:	e7902003 	ldr	r2, [r0, r3]
    8a48:	e2833004 	add	r3, r3, #4
    8a4c:	e7903003 	ldr	r3, [r0, r3]
        assert(!cq_empty(c));
    8a50:	e1520003 	cmp	r2, r3
    8a54:	1a000009 	bne	8a80 <cq_push_n+0xfc>
    8a58:	e59f003c 	ldr	r0, [pc, #60]	; 8a9c <cq_push_n+0x118>
    8a5c:	e59f1030 	ldr	r1, [pc, #48]	; 8a94 <cq_push_n+0x110>
    8a60:	e59f2030 	ldr	r2, [pc, #48]	; 8a98 <cq_push_n+0x114>
    8a64:	e3a03050 	mov	r3, #80	; 0x50
    8a68:	eb000022 	bl	8af8 <printk>
    8a6c:	eb0001a2 	bl	90fc <rpi_reboot>

int cq_push_n(cq_t *c, void *data, unsigned n) {
    cqe_t *p = data;

    if(cq_nspace(c) < n)
        return 0;
    8a70:	e3a00000 	mov	r0, #0
    8a74:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    for(int i = 0; i < n; i++)
        if(!cq_push(c, p[i]))
            panic("not handling this\n");
    if(n)
        assert(!cq_empty(c));
    return 1;
    8a78:	e3a00001 	mov	r0, #1
    8a7c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8a80:	e3a00001 	mov	r0, #1
}
    8a84:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8a88:	00002004 	andeq	r2, r0, r4
    8a8c:	00002008 	andeq	r2, r0, r8
    8a90:	00009af8 	strdeq	r9, [r0], -r8
    8a94:	00009a10 	andeq	r9, r0, r0, lsl sl
    8a98:	000099c8 	andeq	r9, r0, r8, asr #19
    8a9c:	00009b1c 	andeq	r9, r0, ip, lsl fp

00008aa0 <callee_save>:
    8aa0:	e12fff1e 	bx	lr

00008aa4 <store_one_asm>:
    8aa4:	e12fff1e 	bx	lr

00008aa8 <check_callee_save>:
    8aa8:	e3a04004 	mov	r4, #4
    8aac:	e3a05005 	mov	r5, #5
    8ab0:	e3a06006 	mov	r6, #6
    8ab4:	e3a07007 	mov	r7, #7
    8ab8:	e3a08008 	mov	r8, #8
    8abc:	e3a09009 	mov	r9, #9
    8ac0:	e3a0a00a 	mov	sl, #10
    8ac4:	e3a0b00b 	mov	fp, #11
    8ac8:	e3a0c00c 	mov	ip, #12
    8acc:	e3a0d00d 	mov	sp, #13
    8ad0:	e3a0e00e 	mov	lr, #14
    8ad4:	e12fff1e 	bx	lr

00008ad8 <memset>:
#include <string.h>

void *memset(void *_p, int c, size_t n) {
    char *p = _p, *e = p + n;
    8ad8:	e0802002 	add	r2, r0, r2
    8adc:	e1a03000 	mov	r3, r0

    while(p < e)
    8ae0:	ea000001 	b	8aec <memset+0x14>
        *p++ = c;
    8ae4:	e5c31000 	strb	r1, [r3]
    8ae8:	e2833001 	add	r3, r3, #1
#include <string.h>

void *memset(void *_p, int c, size_t n) {
    char *p = _p, *e = p + n;

    while(p < e)
    8aec:	e1530002 	cmp	r3, r2
    8af0:	3afffffb 	bcc	8ae4 <memset+0xc>
        *p++ = c;
    return _p;
}
    8af4:	e12fff1e 	bx	lr

00008af8 <printk>:
#include <stdarg.h>

#include "rpi.h"
#include "va-printk.h"

int printk(const char *fmt, ...) {
    8af8:	e92d000f 	push	{r0, r1, r2, r3}
    8afc:	e92d4030 	push	{r4, r5, lr}
    8b00:	e24dd00c 	sub	sp, sp, #12
    // this is a really huge buffer for a pi.   could do this better.
    static char buf[1024];
    va_list args;

    va_start(args, fmt);
    8b04:	e28d301c 	add	r3, sp, #28
    8b08:	e58d3004 	str	r3, [sp, #4]
        int sz = va_printk(buf, sizeof buf, fmt, args);
    8b0c:	e59f4034 	ldr	r4, [pc, #52]	; 8b48 <printk+0x50>
    8b10:	e1a00004 	mov	r0, r4
    8b14:	e3a01b01 	mov	r1, #1024	; 0x400
    8b18:	e59d2018 	ldr	r2, [sp, #24]
    8b1c:	eb0000b2 	bl	8dec <va_printk>
    8b20:	e1a05000 	mov	r5, r0
    va_end(args);


#if 1
    putk(buf);
    8b24:	e59f3020 	ldr	r3, [pc, #32]	; 8b4c <printk+0x54>
    8b28:	e5933000 	ldr	r3, [r3]
    8b2c:	e1a00004 	mov	r0, r4
    8b30:	e12fff33 	blx	r3
    int i;
    for(i = 0; buf[i]; i++)
        rpi_putchar(buf[i]);
#endif
    return sz;
}
    8b34:	e1a00005 	mov	r0, r5
    8b38:	e28dd00c 	add	sp, sp, #12
    8b3c:	e8bd4030 	pop	{r4, r5, lr}
    8b40:	e28dd010 	add	sp, sp, #16
    8b44:	e12fff1e 	bx	lr
    8b48:	00009d8c 	andeq	r9, r0, ip, lsl #27
    8b4c:	00009640 	andeq	r9, r0, r0, asr #12

00008b50 <internal_putk>:
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    8b50:	e92d4038 	push	{r3, r4, r5, lr}
    8b54:	e1a04000 	mov	r4, r0
    for(; *p; p++)
        rpi_putchar(*p);
    8b58:	e59f5020 	ldr	r5, [pc, #32]	; 8b80 <internal_putk+0x30>
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    8b5c:	ea000002 	b	8b6c <internal_putk+0x1c>
        rpi_putchar(*p);
    8b60:	e5953000 	ldr	r3, [r5]
    8b64:	e12fff33 	blx	r3
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    8b68:	e2844001 	add	r4, r4, #1
    8b6c:	e5d40000 	ldrb	r0, [r4]
    8b70:	e3500000 	cmp	r0, #0
    8b74:	1afffff9 	bne	8b60 <internal_putk+0x10>
        rpi_putchar(*p);
//  we were adding this.
//  rpi_putchar('\n');
    return 1;
}
    8b78:	e3a00001 	mov	r0, #1
    8b7c:	e8bd8038 	pop	{r3, r4, r5, pc}
    8b80:	00009644 	andeq	r9, r0, r4, asr #12

00008b84 <isdigit>:
    if(puts_fp)
        putk = puts_fp;
}

// XXX: check sign promotion.
static int isdigit(int c) { return c >= '0' && c <= '9'; }
    8b84:	e2400030 	sub	r0, r0, #48	; 0x30
    8b88:	e3500009 	cmp	r0, #9
    8b8c:	83a00000 	movhi	r0, #0
    8b90:	93a00001 	movls	r0, #1
    8b94:	e12fff1e 	bx	lr

00008b98 <pad>:

// don't move: can't be inlined, gcc seems to have a bug.
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
    8b98:	e0611000 	rsb	r1, r1, r0
	// pad with leading spaces
	for(; len < width; len++)
		*p++ = ' ';
    8b9c:	e3a03020 	mov	r3, #32
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8ba0:	ea000002 	b	8bb0 <pad+0x18>
		*p++ = ' ';
    8ba4:	e5c03000 	strb	r3, [r0]
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8ba8:	e2811001 	add	r1, r1, #1
		*p++ = ' ';
    8bac:	e2800001 	add	r0, r0, #1
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8bb0:	e1510002 	cmp	r1, r2
    8bb4:	bafffffa 	blt	8ba4 <pad+0xc>
		*p++ = ' ';
	*p = 0;
    8bb8:	e3a03000 	mov	r3, #0
    8bbc:	e5c03000 	strb	r3, [r0]
	return p;
}
    8bc0:	e12fff1e 	bx	lr

00008bc4 <reverse>:

static char* reverse(char *dst, int n, char *p, char *start) {
	// drop the lower chars if the string is too big.
	int len = p - start + 1; // include \0
    8bc4:	e063c002 	rsb	ip, r3, r2
    8bc8:	e28cc001 	add	ip, ip, #1
	if(len > n)
    8bcc:	e15c0001 	cmp	ip, r1
		start += (len - n);
    8bd0:	c061100c 	rsbgt	r1, r1, ip
    8bd4:	c0833001 	addgt	r3, r3, r1

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    8bd8:	e2422001 	sub	r2, r2, #1
    8bdc:	e1a01000 	mov	r1, r0
    8be0:	ea000002 	b	8bf0 <reverse+0x2c>
		*dst++ = *p;
    8be4:	e452c001 	ldrb	ip, [r2], #-1
    8be8:	e5c1c000 	strb	ip, [r1]
    8bec:	e2811001 	add	r1, r1, #1
		start += (len - n);

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    8bf0:	e1520003 	cmp	r2, r3
    8bf4:	2afffffa 	bcs	8be4 <reverse+0x20>
		*dst++ = *p;
	*dst++ = 0;
    8bf8:	e3a03000 	mov	r3, #0
    8bfc:	e5c13000 	strb	r3, [r1]

	return s;
}
    8c00:	e12fff1e 	bx	lr

00008c04 <emit>:

static char* emit(unsigned base, char *dst, int n, int val, int width, int signed_p) {
    8c04:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8c08:	e24dd040 	sub	sp, sp, #64	; 0x40
    8c0c:	e1a05001 	mov	r5, r1
    8c10:	e1a04002 	mov	r4, r2
    8c14:	e59d2058 	ldr	r2, [sp, #88]	; 0x58
	// XXX: constrain width to be >= bit size: can change this.
	if(width > n)
    8c18:	e1520004 	cmp	r2, r4
		width = n - 1;
    8c1c:	c2442001 	subgt	r2, r4, #1

	char buf[64], *p = buf; 
	unsigned u = val;
    8c20:	e1a0c003 	mov	ip, r3

	switch(base) { 
    8c24:	e2400002 	sub	r0, r0, #2
    8c28:	e350000e 	cmp	r0, #14
    8c2c:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
    8c30:	ea000042 	b	8d40 <emit+0x13c>
    8c34:	00008d18 	andeq	r8, r0, r8, lsl sp
    8c38:	00008d40 	andeq	r8, r0, r0, asr #26
    8c3c:	00008d40 	andeq	r8, r0, r0, asr #26
    8c40:	00008d40 	andeq	r8, r0, r0, asr #26
    8c44:	00008d40 	andeq	r8, r0, r0, asr #26
    8c48:	00008d40 	andeq	r8, r0, r0, asr #26
    8c4c:	00008d0c 	andeq	r8, r0, ip, lsl #26
    8c50:	00008d40 	andeq	r8, r0, r0, asr #26
    8c54:	00008c70 	andeq	r8, r0, r0, ror ip
    8c58:	00008d40 	andeq	r8, r0, r0, asr #26
    8c5c:	00008d40 	andeq	r8, r0, r0, asr #26
    8c60:	00008d40 	andeq	r8, r0, r0, asr #26
    8c64:	00008d40 	andeq	r8, r0, r0, asr #26
    8c68:	00008d40 	andeq	r8, r0, r0, asr #26
    8c6c:	00008ce4 	andeq	r8, r0, r4, ror #25
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
    8c70:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
    8c74:	e2911000 	adds	r1, r1, #0
    8c78:	13a01001 	movne	r1, #1
    8c7c:	e0111fa3 	ands	r1, r1, r3, lsr #31
				neg_p = 1;
				val = -val;
    8c80:	1263c000 	rsbne	ip, r3, #0
	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
				neg_p = 1;
    8c84:	13a08001 	movne	r8, #1
	unsigned u = val;

	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
    8c88:	03a08000 	moveq	r8, #0
			if(val < 0 && signed_p) {
				neg_p = 1;
    8c8c:	e1a0100d 	mov	r1, sp
				val = -val;
				u = val;
			}
			do { 
				*p++ = "0123456789"[u % 10];
    8c90:	e59f70e8 	ldr	r7, [pc, #232]	; 8d80 <emit+0x17c>
    8c94:	e59f60e8 	ldr	r6, [pc, #232]	; 8d84 <emit+0x180>
    8c98:	ea000000 	b	8ca0 <emit+0x9c>
    8c9c:	e1a01003 	mov	r1, r3
    8ca0:	e2813001 	add	r3, r1, #1
    8ca4:	e08e0c97 	umull	r0, lr, r7, ip
    8ca8:	e1a0e1ae 	lsr	lr, lr, #3
    8cac:	e1a0000e 	mov	r0, lr
    8cb0:	e08ee10e 	add	lr, lr, lr, lsl #2
    8cb4:	e1a0e08e 	lsl	lr, lr, #1
    8cb8:	e06ee00c 	rsb	lr, lr, ip
    8cbc:	e7d6c00e 	ldrb	ip, [r6, lr]
    8cc0:	e5c1c000 	strb	ip, [r1]
			} while(u /= 10); 
    8cc4:	e1a0c000 	mov	ip, r0
    8cc8:	e3500000 	cmp	r0, #0
    8ccc:	1afffff2 	bne	8c9c <emit+0x98>
			if(neg_p)
    8cd0:	e3580000 	cmp	r8, #0
				*p++ = '-';
    8cd4:	12813002 	addne	r3, r1, #2
    8cd8:	13a0002d 	movne	r0, #45	; 0x2d
    8cdc:	15c10001 	strbne	r0, [r1, #1]
    8ce0:	ea00001c 	b	8d58 <emit+0x154>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    8ce4:	e1a0e00d 	mov	lr, sp
			break;
		}
		case 16:
			u = val;
                        do {
                                *p++ = "0123456789abcdef"[u % 16];
    8ce8:	e59f0098 	ldr	r0, [pc, #152]	; 8d88 <emit+0x184>
    8cec:	e28e3001 	add	r3, lr, #1
    8cf0:	e20c100f 	and	r1, ip, #15
    8cf4:	e7d01001 	ldrb	r1, [r0, r1]
    8cf8:	e5ce1000 	strb	r1, [lr]
    8cfc:	e1a0e003 	mov	lr, r3
                        } while(u /= 16);
    8d00:	e1b0c22c 	lsrs	ip, ip, #4
    8d04:	1afffff8 	bne	8cec <emit+0xe8>
    8d08:	ea000012 	b	8d58 <emit+0x154>
                        break;
		// just a single char
		case 8:
			*p++ = val;
    8d0c:	e5cd3000 	strb	r3, [sp]
    8d10:	e28d3001 	add	r3, sp, #1
			break;
    8d14:	ea00000f 	b	8d58 <emit+0x154>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    8d18:	e1a0e00d 	mov	lr, sp
#if 0
			for(int i = 0; i < 32; i++)
				*p++ = "01"[(u & (1<<i)) != 0];
#else
                        do {
                        	*p++ = "01"[u % 2];
    8d1c:	e59f0068 	ldr	r0, [pc, #104]	; 8d8c <emit+0x188>
    8d20:	e28e3001 	add	r3, lr, #1
    8d24:	e20c1001 	and	r1, ip, #1
    8d28:	e7d01001 	ldrb	r1, [r0, r1]
    8d2c:	e5ce1000 	strb	r1, [lr]
    8d30:	e1a0e003 	mov	lr, r3
			} while(u /= 2);
    8d34:	e1b0c0ac 	lsrs	ip, ip, #1
    8d38:	1afffff8 	bne	8d20 <emit+0x11c>
    8d3c:	ea000005 	b	8d58 <emit+0x154>
#endif
			break;
		default:
			assert(0);
    8d40:	e59f0048 	ldr	r0, [pc, #72]	; 8d90 <emit+0x18c>
    8d44:	e59f1048 	ldr	r1, [pc, #72]	; 8d94 <emit+0x190>
    8d48:	e59f2048 	ldr	r2, [pc, #72]	; 8d98 <emit+0x194>
    8d4c:	e3a03075 	mov	r3, #117	; 0x75
    8d50:	ebffff68 	bl	8af8 <printk>
    8d54:	eb0000e8 	bl	90fc <rpi_reboot>
	}
	// number string is reversed, so re-reverse it.
	return reverse(dst, n, pad(p, buf, width), buf);
    8d58:	e1a00003 	mov	r0, r3
    8d5c:	e1a0100d 	mov	r1, sp
    8d60:	ebffff8c 	bl	8b98 <pad>
    8d64:	e1a02000 	mov	r2, r0
    8d68:	e1a00005 	mov	r0, r5
    8d6c:	e1a01004 	mov	r1, r4
    8d70:	e1a0300d 	mov	r3, sp
    8d74:	ebffff92 	bl	8bc4 <reverse>
}
    8d78:	e28dd040 	add	sp, sp, #64	; 0x40
    8d7c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8d80:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    8d84:	00009b88 	andeq	r9, r0, r8, lsl #23
    8d88:	00009b94 	muleq	r0, r4, fp
    8d8c:	00009ba8 	andeq	r9, r0, r8, lsr #23
    8d90:	00009b60 	andeq	r9, r0, r0, ror #22
    8d94:	00009b74 	andeq	r9, r0, r4, ror fp
    8d98:	00009b3c 	andeq	r9, r0, ip, lsr fp

00008d9c <rpi_set_output>:
// override this is going through the network.
int (*rpi_putchar)(int c) = internal_putchar;
#endif


void rpi_set_output(int (*putc_fp)(int), int (*puts_fp)(const char *)) {
    8d9c:	e92d4008 	push	{r3, lr}
    assert(putc_fp);
    8da0:	e3500000 	cmp	r0, #0
    8da4:	1a000005 	bne	8dc0 <rpi_set_output+0x24>
    8da8:	e59f0028 	ldr	r0, [pc, #40]	; 8dd8 <rpi_set_output+0x3c>
    8dac:	e59f1028 	ldr	r1, [pc, #40]	; 8ddc <rpi_set_output+0x40>
    8db0:	e59f2028 	ldr	r2, [pc, #40]	; 8de0 <rpi_set_output+0x44>
    8db4:	e3a03020 	mov	r3, #32
    8db8:	ebffff4e 	bl	8af8 <printk>
    8dbc:	eb0000ce 	bl	90fc <rpi_reboot>
    rpi_putchar = putc_fp;
    8dc0:	e59f301c 	ldr	r3, [pc, #28]	; 8de4 <rpi_set_output+0x48>
    8dc4:	e5830000 	str	r0, [r3]
    if(puts_fp)
    8dc8:	e3510000 	cmp	r1, #0
        putk = puts_fp;
    8dcc:	159f3014 	ldrne	r3, [pc, #20]	; 8de8 <rpi_set_output+0x4c>
    8dd0:	15831000 	strne	r1, [r3]
    8dd4:	e8bd8008 	pop	{r3, pc}
    8dd8:	00009bac 	andeq	r9, r0, ip, lsr #23
    8ddc:	00009b74 	andeq	r9, r0, r4, ror fp
    8de0:	00009b44 	andeq	r9, r0, r4, asr #22
    8de4:	00009644 	andeq	r9, r0, r4, asr #12
    8de8:	00009640 	andeq	r9, r0, r0, asr #12

00008dec <va_printk>:
	return reverse(dst, n, pad(p, buf, width), buf);
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
    8dec:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8df0:	e24dd08c 	sub	sp, sp, #140	; 0x8c
    8df4:	e1a0b000 	mov	fp, r0
    8df8:	e1a0a003 	mov	sl, r3
	char *p = buf, *e = buf + n - 1;
    8dfc:	e2411001 	sub	r1, r1, #1
    8e00:	e0808001 	add	r8, r0, r1

	buf[0] = 0;
    8e04:	e3a03000 	mov	r3, #0
    8e08:	e5c03000 	strb	r3, [r0]
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;
    8e0c:	e1a04000 	mov	r4, r0

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    8e10:	ea000087 	b	9034 <va_printk+0x248>
		if(*fmt != '%')
    8e14:	e3530025 	cmp	r3, #37	; 0x25
			*p++ = *fmt++;
    8e18:	12822001 	addne	r2, r2, #1
    8e1c:	15c43000 	strbne	r3, [r4]
    8e20:	12844001 	addne	r4, r4, #1
    8e24:	1a000082 	bne	9034 <va_printk+0x248>
		
		else if(fmt[1] == '%') {
    8e28:	e5d21001 	ldrb	r1, [r2, #1]
    8e2c:	e3510025 	cmp	r1, #37	; 0x25
			*p++ = *fmt;
    8e30:	05c43000 	strbeq	r3, [r4]
			fmt+=2;
    8e34:	02822002 	addeq	r2, r2, #2
	for(; *fmt && p < e; ) {
		if(*fmt != '%')
			*p++ = *fmt++;
		
		else if(fmt[1] == '%') {
			*p++ = *fmt;
    8e38:	02844001 	addeq	r4, r4, #1
    8e3c:	0a00007c 	beq	9034 <va_printk+0x248>
			fmt+=2;
		} else {	
			fmt++;
    8e40:	e2826001 	add	r6, r2, #1

			char *s, num[128];
			unsigned width = 0;
    8e44:	e3a07000 	mov	r7, #0

			while(isdigit(*fmt)) {
    8e48:	ea000004 	b	8e60 <va_printk+0x74>
				width = width*10 + *fmt - '0';
    8e4c:	e0877107 	add	r7, r7, r7, lsl #2
    8e50:	e1a07087 	lsl	r7, r7, #1
    8e54:	e0877005 	add	r7, r7, r5
    8e58:	e2477030 	sub	r7, r7, #48	; 0x30
				fmt++;
    8e5c:	e2866001 	add	r6, r6, #1
			fmt++;

			char *s, num[128];
			unsigned width = 0;

			while(isdigit(*fmt)) {
    8e60:	e5d65000 	ldrb	r5, [r6]
    8e64:	e1a09005 	mov	r9, r5
    8e68:	e1a00005 	mov	r0, r5
    8e6c:	ebffff44 	bl	8b84 <isdigit>
    8e70:	e3500000 	cmp	r0, #0
    8e74:	1afffff4 	bne	8e4c <va_printk+0x60>
				width = width*10 + *fmt - '0';
				fmt++;
			}
			assert(width < 32);
    8e78:	e357001f 	cmp	r7, #31
    8e7c:	9a000005 	bls	8e98 <va_printk+0xac>
    8e80:	e59f01d8 	ldr	r0, [pc, #472]	; 9060 <va_printk+0x274>
    8e84:	e59f11d8 	ldr	r1, [pc, #472]	; 9064 <va_printk+0x278>
    8e88:	e59f21d8 	ldr	r2, [pc, #472]	; 9068 <va_printk+0x27c>
    8e8c:	e3a03092 	mov	r3, #146	; 0x92
    8e90:	ebffff18 	bl	8af8 <printk>
    8e94:	eb000098 	bl	90fc <rpi_reboot>
			
			switch(*fmt) {
    8e98:	e2455062 	sub	r5, r5, #98	; 0x62
    8e9c:	e3550016 	cmp	r5, #22
    8ea0:	979ff105 	ldrls	pc, [pc, r5, lsl #2]
    8ea4:	ea000051 	b	8ff0 <va_printk+0x204>
    8ea8:	00008f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
    8eac:	00008fc8 	andeq	r8, r0, r8, asr #31
    8eb0:	00008f1c 	andeq	r8, r0, ip, lsl pc
    8eb4:	00008ff0 	strdeq	r8, [r0], -r0
    8eb8:	00008f04 	andeq	r8, r0, r4, lsl #30
    8ebc:	00008ff0 	strdeq	r8, [r0], -r0
    8ec0:	00008ff0 	strdeq	r8, [r0], -r0
    8ec4:	00008ff0 	strdeq	r8, [r0], -r0
    8ec8:	00008ff0 	strdeq	r8, [r0], -r0
    8ecc:	00008ff0 	strdeq	r8, [r0], -r0
    8ed0:	00008ff0 	strdeq	r8, [r0], -r0
    8ed4:	00008ff0 	strdeq	r8, [r0], -r0
    8ed8:	00008ff0 	strdeq	r8, [r0], -r0
    8edc:	00008ff0 	strdeq	r8, [r0], -r0
    8ee0:	00008f6c 	andeq	r8, r0, ip, ror #30
    8ee4:	00008ff0 	strdeq	r8, [r0], -r0
    8ee8:	00008ff0 	strdeq	r8, [r0], -r0
    8eec:	00008fbc 			; <UNDEFINED> instruction: 0x00008fbc
    8ef0:	00008ff0 	strdeq	r8, [r0], -r0
    8ef4:	00008f44 	andeq	r8, r0, r4, asr #30
    8ef8:	00008ff0 	strdeq	r8, [r0], -r0
    8efc:	00008ff0 	strdeq	r8, [r0], -r0
    8f00:	00008f6c 	andeq	r8, r0, ip, ror #30
			case 'f':
			{
#ifndef RPI_FP_ENABLED
				panic("float not enabled!!!");
    8f04:	e59f0160 	ldr	r0, [pc, #352]	; 906c <va_printk+0x280>
    8f08:	e59f1154 	ldr	r1, [pc, #340]	; 9064 <va_printk+0x278>
    8f0c:	e59f2154 	ldr	r2, [pc, #340]	; 9068 <va_printk+0x27c>
    8f10:	e3a03098 	mov	r3, #152	; 0x98
    8f14:	ebfffef7 	bl	8af8 <printk>
    8f18:	eb000077 	bl	90fc <rpi_reboot>

				break;
#endif
			}
			case 'd':
				s = emit(10, num, 128, va_arg(args, int), width, 1);
    8f1c:	e59a3000 	ldr	r3, [sl]
    8f20:	e28aa004 	add	sl, sl, #4
    8f24:	e58d7000 	str	r7, [sp]
    8f28:	e3a02001 	mov	r2, #1
    8f2c:	e58d2004 	str	r2, [sp, #4]
    8f30:	e3a0000a 	mov	r0, #10
    8f34:	e28d1008 	add	r1, sp, #8
    8f38:	e3a02080 	mov	r2, #128	; 0x80
    8f3c:	ebffff30 	bl	8c04 <emit>
				break;
    8f40:	ea000031 	b	900c <va_printk+0x220>
			case 'u':
				s = emit(10, num, 128, va_arg(args, unsigned), width, 0);
    8f44:	e59a3000 	ldr	r3, [sl]
    8f48:	e28aa004 	add	sl, sl, #4
    8f4c:	e58d7000 	str	r7, [sp]
    8f50:	e3a02000 	mov	r2, #0
    8f54:	e58d2004 	str	r2, [sp, #4]
    8f58:	e3a0000a 	mov	r0, #10
    8f5c:	e28d1008 	add	r1, sp, #8
    8f60:	e3a02080 	mov	r2, #128	; 0x80
    8f64:	ebffff26 	bl	8c04 <emit>
				break;
    8f68:	ea000027 	b	900c <va_printk+0x220>
			case 'p':
			case 'x':
				s = emit(16, num, 128, va_arg(args, unsigned), width, 0);
    8f6c:	e59a3000 	ldr	r3, [sl]
    8f70:	e28aa004 	add	sl, sl, #4
    8f74:	e58d7000 	str	r7, [sp]
    8f78:	e3a02000 	mov	r2, #0
    8f7c:	e58d2004 	str	r2, [sp, #4]
    8f80:	e3a00010 	mov	r0, #16
    8f84:	e28d1008 	add	r1, sp, #8
    8f88:	e3a02080 	mov	r2, #128	; 0x80
    8f8c:	ebffff1c 	bl	8c04 <emit>
				break;
    8f90:	ea00001d 	b	900c <va_printk+0x220>
			case 'b':
				s = emit(2, num, 128, va_arg(args, unsigned), width, 0);
    8f94:	e59a3000 	ldr	r3, [sl]
    8f98:	e28aa004 	add	sl, sl, #4
    8f9c:	e58d7000 	str	r7, [sp]
    8fa0:	e3a02000 	mov	r2, #0
    8fa4:	e58d2004 	str	r2, [sp, #4]
    8fa8:	e3a00002 	mov	r0, #2
    8fac:	e28d1008 	add	r1, sp, #8
    8fb0:	e3a02080 	mov	r2, #128	; 0x80
    8fb4:	ebffff12 	bl	8c04 <emit>
				break;
    8fb8:	ea000013 	b	900c <va_printk+0x220>
			case 's':
				s = va_arg(args, char *);
    8fbc:	e59a0000 	ldr	r0, [sl]
    8fc0:	e28aa004 	add	sl, sl, #4
				break;
    8fc4:	ea000010 	b	900c <va_printk+0x220>
			case 'c':
				s = emit(8, num, 128, va_arg(args, int),width,0);
    8fc8:	e59a3000 	ldr	r3, [sl]
    8fcc:	e28aa004 	add	sl, sl, #4
    8fd0:	e58d7000 	str	r7, [sp]
    8fd4:	e3a02000 	mov	r2, #0
    8fd8:	e58d2004 	str	r2, [sp, #4]
    8fdc:	e3a00008 	mov	r0, #8
    8fe0:	e08d1000 	add	r1, sp, r0
    8fe4:	e3a02080 	mov	r2, #128	; 0x80
    8fe8:	ebffff05 	bl	8c04 <emit>
				break;
    8fec:	ea000006 	b	900c <va_printk+0x220>
			default: 
				panic("printk: not handling specifier '%c'\n", *fmt);
    8ff0:	e58d9000 	str	r9, [sp]
    8ff4:	e59f0074 	ldr	r0, [pc, #116]	; 9070 <va_printk+0x284>
    8ff8:	e59f1064 	ldr	r1, [pc, #100]	; 9064 <va_printk+0x278>
    8ffc:	e59f2064 	ldr	r2, [pc, #100]	; 9068 <va_printk+0x27c>
    9000:	e3a030b9 	mov	r3, #185	; 0xb9
    9004:	ebfffebb 	bl	8af8 <printk>
    9008:	eb00003b 	bl	90fc <rpi_reboot>
				return 0;   // ugh
			}
			fmt++;
    900c:	e2862001 	add	r2, r6, #1

			// safe string copy
			for(; p < e && *s; )
    9010:	ea000002 	b	9020 <va_printk+0x234>
				*p++ = *s++;
    9014:	e2800001 	add	r0, r0, #1
    9018:	e5c43000 	strb	r3, [r4]
    901c:	e2844001 	add	r4, r4, #1
				return 0;   // ugh
			}
			fmt++;

			// safe string copy
			for(; p < e && *s; )
    9020:	e1540008 	cmp	r4, r8
    9024:	2a000002 	bcs	9034 <va_printk+0x248>
    9028:	e5d03000 	ldrb	r3, [r0]
    902c:	e3530000 	cmp	r3, #0
    9030:	1afffff7 	bne	9014 <va_printk+0x228>

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    9034:	e5d23000 	ldrb	r3, [r2]
    9038:	e3530000 	cmp	r3, #0
    903c:	0a000001 	beq	9048 <va_printk+0x25c>
    9040:	e1540008 	cmp	r4, r8
    9044:	3affff72 	bcc	8e14 <va_printk+0x28>
			// safe string copy
			for(; p < e && *s; )
				*p++ = *s++;
		}
	}
	*p++ = 0;
    9048:	e2840001 	add	r0, r4, #1
    904c:	e3a03000 	mov	r3, #0
    9050:	e5c43000 	strb	r3, [r4]
	return p - buf;
}
    9054:	e06b0000 	rsb	r0, fp, r0
    9058:	e28dd08c 	add	sp, sp, #140	; 0x8c
    905c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9060:	00009bc4 	andeq	r9, r0, r4, asr #23
    9064:	00009b74 	andeq	r9, r0, r4, ror fp
    9068:	00009b54 	andeq	r9, r0, r4, asr fp
    906c:	00009be0 	andeq	r9, r0, r0, ror #23
    9070:	00009c08 	andeq	r9, r0, r8, lsl #24

00009074 <clean_reboot>:
#include "rpi.h"

// print out a special message so bootloader exits
void clean_reboot(void) {
    9074:	e92d4008 	push	{r3, lr}
    putk("DONE!!!\n");
    9078:	e59f3014 	ldr	r3, [pc, #20]	; 9094 <clean_reboot+0x20>
    907c:	e5933000 	ldr	r3, [r3]
    9080:	e59f0010 	ldr	r0, [pc, #16]	; 9098 <clean_reboot+0x24>
    9084:	e12fff33 	blx	r3
    delay_ms(100);       // (hopefully) enough time for message to get flushed.
    9088:	e3a00064 	mov	r0, #100	; 0x64
    908c:	eb000041 	bl	9198 <delay_ms>
    rpi_reboot();
    9090:	eb000019 	bl	90fc <rpi_reboot>
    9094:	00009640 	andeq	r9, r0, r0, asr #12
    9098:	00009c40 	andeq	r9, r0, r0, asr #24

0000909c <_cstart>:
#include "rpi.h"

void _cstart() {
    909c:	e92d4008 	push	{r3, lr}
    extern int __bss_start__, __bss_end__;
	void notmain();

    int* bss = &__bss_start__;
    90a0:	e59f3020 	ldr	r3, [pc, #32]	; 90c8 <_cstart+0x2c>
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    90a4:	e59f2020 	ldr	r2, [pc, #32]	; 90cc <_cstart+0x30>
        *bss++ = 0;
    90a8:	e3a01000 	mov	r1, #0
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    90ac:	ea000001 	b	90b8 <_cstart+0x1c>
        *bss++ = 0;
    90b0:	e5831000 	str	r1, [r3]
    90b4:	e2833004 	add	r3, r3, #4
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    90b8:	e1530002 	cmp	r3, r2
    90bc:	3afffffb 	bcc	90b0 <_cstart+0x14>
        *bss++ = 0;

    notmain(); 
    90c0:	ebfffbfd 	bl	80bc <notmain>
	rpi_reboot();
    90c4:	eb00000c 	bl	90fc <rpi_reboot>
    90c8:	00009d60 	andeq	r9, r0, r0, ror #26
    90cc:	0000a198 	muleq	r0, r8, r1

000090d0 <at_user_level>:
 * works if we have a trashed stack pointer?
 */
static unsigned user_level = 0b10000;
int at_user_level(void) {
    unsigned cpsr = 0;
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    90d0:	e10f0000 	mrs	r0, CPSR

    // user level = lower 5 bits = 0b10000);
    return (cpsr  & 0b11111)  == user_level;
    90d4:	e200001f 	and	r0, r0, #31
}
    90d8:	e3500010 	cmp	r0, #16
    90dc:	13a00000 	movne	r0, #0
    90e0:	03a00001 	moveq	r0, #1
    90e4:	e12fff1e 	bx	lr

000090e8 <set_user_level>:

// this is just used by the reboot code.
void set_user_level(void) {
    unsigned cpsr = 0;
    // XXX: shouldn't we just set the one bit?
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    90e8:	e10f3000 	mrs	r3, CPSR
        cpsr = (cpsr & ~0b11111) | user_level;
    90ec:	e3c3301f 	bic	r3, r3, #31
    90f0:	e3833010 	orr	r3, r3, #16
    asm volatile("msr cpsr, %0" :: "r"(cpsr));
    90f4:	e129f003 	msr	CPSR_fc, r3
    90f8:	e12fff1e 	bx	lr

000090fc <rpi_reboot>:
}

void rpi_reboot(void) {
    90fc:	e92d4008 	push	{r3, lr}
    if(at_user_level()) {
    9100:	ebfffff2 	bl	90d0 <at_user_level>
    9104:	e3500000 	cmp	r0, #0
    9108:	0a000000 	beq	9110 <rpi_reboot+0x14>
        set_user_level();
    910c:	ebfffff5 	bl	90e8 <set_user_level>
        // of stuff.
        // assert(!at_user_level());
    }

    // gives uart time to flush: should just call flush directly.
    delay_ms(30);
    9110:	e3a0001e 	mov	r0, #30
    9114:	eb00001f 	bl	9198 <delay_ms>
    const int PM_WDOG = 0x20100024;
    const int PM_PASSWORD = 0x5a000000;
    const int PM_RSTC_WRCFG_FULL_RESET = 0x00000020;

    // timeout = 1/16th of a second? (whatever)
    PUT32(PM_WDOG, PM_PASSWORD | 1);
    9118:	e59f0014 	ldr	r0, [pc, #20]	; 9134 <rpi_reboot+0x38>
    911c:	e59f1014 	ldr	r1, [pc, #20]	; 9138 <rpi_reboot+0x3c>
    9120:	eb000028 	bl	91c8 <PUT32>
    PUT32(PM_RSTC, PM_PASSWORD | PM_RSTC_WRCFG_FULL_RESET);
    9124:	e59f0010 	ldr	r0, [pc, #16]	; 913c <rpi_reboot+0x40>
    9128:	e59f1010 	ldr	r1, [pc, #16]	; 9140 <rpi_reboot+0x44>
    912c:	eb000025 	bl	91c8 <PUT32>
    9130:	eafffffe 	b	9130 <rpi_reboot+0x34>
    9134:	20100024 	andscs	r0, r0, r4, lsr #32
    9138:	5a000001 	bpl	9144 <delay_cycles>
    913c:	2010001c 	andscs	r0, r0, ip, lsl r0
    9140:	5a000020 	bpl	91c8 <PUT32>

00009144 <delay_cycles>:
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    9144:	ea000001 	b	9150 <delay_cycles+0xc>
        asm("add r1, r1, #0");
    9148:	e2811000 	add	r1, r1, #0
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    914c:	e1a00003 	mov	r0, r3
    9150:	e2403001 	sub	r3, r0, #1
    9154:	e3500000 	cmp	r0, #0
    9158:	1afffffa 	bne	9148 <delay_cycles+0x4>
        asm("add r1, r1, #0");
}
    915c:	e12fff1e 	bx	lr

00009160 <timer_get_usec>:

// in usec
unsigned timer_get_usec(void) {
    9160:	e92d4008 	push	{r3, lr}
    return GET32(0x20003004);
    9164:	e59f0004 	ldr	r0, [pc, #4]	; 9170 <timer_get_usec+0x10>
    9168:	eb000022 	bl	91f8 <GET32>
}
    916c:	e8bd8008 	pop	{r3, pc}
    9170:	20003004 	andcs	r3, r0, r4

00009174 <delay_us>:

void delay_us(unsigned us) {
    9174:	e92d4038 	push	{r3, r4, r5, lr}
    9178:	e1a05000 	mov	r5, r0
    unsigned rb = timer_get_usec();
    917c:	ebfffff7 	bl	9160 <timer_get_usec>
    9180:	e1a04000 	mov	r4, r0
    while (1) {
        unsigned ra = timer_get_usec();
    9184:	ebfffff5 	bl	9160 <timer_get_usec>
        if ((ra - rb) >= us) {
    9188:	e0640000 	rsb	r0, r4, r0
    918c:	e1500005 	cmp	r0, r5
    9190:	3afffffb 	bcc	9184 <delay_us+0x10>
            break;
        }
    }
}
    9194:	e8bd8038 	pop	{r3, r4, r5, pc}

00009198 <delay_ms>:
void delay_ms(unsigned ms) {
    9198:	e92d4008 	push	{r3, lr}
    delay_us(ms*1000);
    919c:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    91a0:	e0000093 	mul	r0, r3, r0
    91a4:	ebfffff2 	bl	9174 <delay_us>
    91a8:	e8bd8008 	pop	{r3, pc}

000091ac <delay_sec>:
}
void delay_sec(unsigned sec) {
    91ac:	e92d4008 	push	{r3, lr}
    delay_ms(sec*1000);
    91b0:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    91b4:	e0000093 	mul	r0, r3, r0
    91b8:	ebfffff6 	bl	9198 <delay_ms>
    91bc:	e8bd8008 	pop	{r3, pc}

000091c0 <put32>:
    91c0:	e5801000 	str	r1, [r0]
    91c4:	e12fff1e 	bx	lr

000091c8 <PUT32>:
    91c8:	e5801000 	str	r1, [r0]
    91cc:	e12fff1e 	bx	lr

000091d0 <put16>:
    91d0:	e1c010b0 	strh	r1, [r0]
    91d4:	e12fff1e 	bx	lr

000091d8 <PUT16>:
    91d8:	e1c010b0 	strh	r1, [r0]
    91dc:	e12fff1e 	bx	lr

000091e0 <put8>:
    91e0:	e5c01000 	strb	r1, [r0]
    91e4:	e12fff1e 	bx	lr

000091e8 <PUT8>:
    91e8:	e5c01000 	strb	r1, [r0]
    91ec:	e12fff1e 	bx	lr

000091f0 <get32>:
    91f0:	e5900000 	ldr	r0, [r0]
    91f4:	e12fff1e 	bx	lr

000091f8 <GET32>:
    91f8:	e5900000 	ldr	r0, [r0]
    91fc:	e12fff1e 	bx	lr

00009200 <GETPC>:
    9200:	e1a0000e 	mov	r0, lr
    9204:	e12fff1e 	bx	lr

00009208 <dummy>:
    9208:	e12fff1e 	bx	lr

0000920c <or_in32>:
    920c:	e92d4070 	push	{r4, r5, r6, lr}
    9210:	e1a04000 	mov	r4, r0
    9214:	e1a05001 	mov	r5, r1
    9218:	ebfffff4 	bl	91f0 <get32>
    921c:	e1801005 	orr	r1, r0, r5
    9220:	e1a00004 	mov	r0, r4
    9224:	ebffffe5 	bl	91c0 <put32>
    9228:	e8bd8070 	pop	{r4, r5, r6, pc}

0000922c <uart_get>:
    922c:	e59f0000 	ldr	r0, [pc]	; 9234 <uart_get+0x8>
    9230:	e12fff1e 	bx	lr
    9234:	20215040 	eorcs	r5, r1, r0, asr #32

00009238 <uart_init>:
    9238:	e92d4010 	push	{r4, lr}
    923c:	e3a01002 	mov	r1, #2
    9240:	e3a0000e 	mov	r0, #14
    9244:	eb00004b 	bl	9378 <gpio_set_function>
    9248:	e3a01002 	mov	r1, #2
    924c:	e3a0000f 	mov	r0, #15
    9250:	eb000048 	bl	9378 <gpio_set_function>
    9254:	eb0000f2 	bl	9624 <dev_barrier>
    9258:	e3a01001 	mov	r1, #1
    925c:	e59f0064 	ldr	r0, [pc, #100]	; 92c8 <uart_init+0x90>
    9260:	ebffffe9 	bl	920c <or_in32>
    9264:	eb0000ee 	bl	9624 <dev_barrier>
    9268:	e59f405c 	ldr	r4, [pc, #92]	; 92cc <uart_init+0x94>
    926c:	e3a01000 	mov	r1, #0
    9270:	e1a00004 	mov	r0, r4
    9274:	ebffffd1 	bl	91c0 <put32>
    9278:	e3a01000 	mov	r1, #0
    927c:	e59f004c 	ldr	r0, [pc, #76]	; 92d0 <uart_init+0x98>
    9280:	ebffffce 	bl	91c0 <put32>
    9284:	e3a01003 	mov	r1, #3
    9288:	e59f0044 	ldr	r0, [pc, #68]	; 92d4 <uart_init+0x9c>
    928c:	ebffffcb 	bl	91c0 <put32>
    9290:	e3a01000 	mov	r1, #0
    9294:	e59f003c 	ldr	r0, [pc, #60]	; 92d8 <uart_init+0xa0>
    9298:	ebffffc8 	bl	91c0 <put32>
    929c:	e3a010c7 	mov	r1, #199	; 0xc7
    92a0:	e59f0034 	ldr	r0, [pc, #52]	; 92dc <uart_init+0xa4>
    92a4:	ebffffc5 	bl	91c0 <put32>
    92a8:	e59f1030 	ldr	r1, [pc, #48]	; 92e0 <uart_init+0xa8>
    92ac:	e59f0030 	ldr	r0, [pc, #48]	; 92e4 <uart_init+0xac>
    92b0:	ebffffc2 	bl	91c0 <put32>
    92b4:	e3a01003 	mov	r1, #3
    92b8:	e1a00004 	mov	r0, r4
    92bc:	ebffffbf 	bl	91c0 <put32>
    92c0:	eb0000d7 	bl	9624 <dev_barrier>
    92c4:	e8bd8010 	pop	{r4, pc}
    92c8:	20215004 	eorcs	r5, r1, r4
    92cc:	20215060 	eorcs	r5, r1, r0, rrx
    92d0:	20215044 	eorcs	r5, r1, r4, asr #32
    92d4:	2021504c 	eorcs	r5, r1, ip, asr #32
    92d8:	20215050 	eorcs	r5, r1, r0, asr r0
    92dc:	20215048 	eorcs	r5, r1, r8, asr #32
    92e0:	0000010e 	andeq	r0, r0, lr, lsl #2
    92e4:	20215068 	eorcs	r5, r1, r8, rrx

000092e8 <uart_can_getc>:
    92e8:	e92d4010 	push	{r4, lr}
    92ec:	e59f0008 	ldr	r0, [pc, #8]	; 92fc <uart_can_getc+0x14>
    92f0:	ebffffbe 	bl	91f0 <get32>
    92f4:	e2000001 	and	r0, r0, #1
    92f8:	e8bd8010 	pop	{r4, pc}
    92fc:	20215064 	eorcs	r5, r1, r4, rrx

00009300 <uart_can_putc>:
    9300:	e92d4010 	push	{r4, lr}
    9304:	e59f0010 	ldr	r0, [pc, #16]	; 931c <uart_can_putc+0x1c>
    9308:	ebffffb8 	bl	91f0 <get32>
    930c:	e3100002 	tst	r0, #2
    9310:	13a00001 	movne	r0, #1
    9314:	03a00000 	moveq	r0, #0
    9318:	e8bd8010 	pop	{r4, pc}
    931c:	20215064 	eorcs	r5, r1, r4, rrx

00009320 <uart_getc>:
    9320:	e92d4010 	push	{r4, lr}
    9324:	ebffffef 	bl	92e8 <uart_can_getc>
    9328:	e3500000 	cmp	r0, #0
    932c:	0afffffc 	beq	9324 <uart_getc+0x4>
    9330:	e59f0008 	ldr	r0, [pc, #8]	; 9340 <uart_getc+0x20>
    9334:	ebffffad 	bl	91f0 <get32>
    9338:	e6ef0070 	uxtb	r0, r0
    933c:	e8bd8010 	pop	{r4, pc}
    9340:	20215040 	eorcs	r5, r1, r0, asr #32

00009344 <uart_putc>:
    9344:	e92d4010 	push	{r4, lr}
    9348:	e1a04000 	mov	r4, r0
    934c:	ebffffeb 	bl	9300 <uart_can_putc>
    9350:	e3500000 	cmp	r0, #0
    9354:	0afffffc 	beq	934c <uart_putc+0x8>
    9358:	e6ef1074 	uxtb	r1, r4
    935c:	e59f0004 	ldr	r0, [pc, #4]	; 9368 <uart_putc+0x24>
    9360:	ebffff96 	bl	91c0 <put32>
    9364:	e8bd8010 	pop	{r4, pc}
    9368:	20215040 	eorcs	r5, r1, r0, asr #32

0000936c <uart_has_data>:
    936c:	e92d4010 	push	{r4, lr}
    9370:	ebffffdc 	bl	92e8 <uart_can_getc>
    9374:	e8bd8010 	pop	{r4, pc}

00009378 <gpio_set_function>:
    9378:	e350001f 	cmp	r0, #31
    937c:	812fff1e 	bxhi	lr
    9380:	e3d13007 	bics	r3, r1, #7
    9384:	112fff1e 	bxne	lr
    9388:	e92d4070 	push	{r4, r5, r6, lr}
    938c:	e1a04001 	mov	r4, r1
    9390:	e59f2044 	ldr	r2, [pc, #68]	; 93dc <gpio_set_function+0x64>
    9394:	e0832290 	umull	r2, r3, r0, r2
    9398:	e1a031a3 	lsr	r3, r3, #3
    939c:	e1a06003 	mov	r6, r3
    93a0:	e0833103 	add	r3, r3, r3, lsl #2
    93a4:	e1a02083 	lsl	r2, r3, #1
    93a8:	e0403002 	sub	r3, r0, r2
    93ac:	e0835083 	add	r5, r3, r3, lsl #1
    93b0:	e1a06106 	lsl	r6, r6, #2
    93b4:	e2866202 	add	r6, r6, #536870912	; 0x20000000
    93b8:	e2866602 	add	r6, r6, #2097152	; 0x200000
    93bc:	e1a00006 	mov	r0, r6
    93c0:	ebffff8a 	bl	91f0 <get32>
    93c4:	e3a01007 	mov	r1, #7
    93c8:	e1c01511 	bic	r1, r0, r1, lsl r5
    93cc:	e1811514 	orr	r1, r1, r4, lsl r5
    93d0:	e1a00006 	mov	r0, r6
    93d4:	ebffff79 	bl	91c0 <put32>
    93d8:	e8bd8070 	pop	{r4, r5, r6, pc}
    93dc:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd

000093e0 <gpio_set_output>:
    93e0:	e92d4010 	push	{r4, lr}
    93e4:	e3a01001 	mov	r1, #1
    93e8:	ebffffe2 	bl	9378 <gpio_set_function>
    93ec:	e8bd8010 	pop	{r4, pc}

000093f0 <gpio_set_on>:
    93f0:	e350001f 	cmp	r0, #31
    93f4:	812fff1e 	bxhi	lr
    93f8:	e92d4010 	push	{r4, lr}
    93fc:	e3a01001 	mov	r1, #1
    9400:	e1a01011 	lsl	r1, r1, r0
    9404:	e59f0004 	ldr	r0, [pc, #4]	; 9410 <gpio_set_on+0x20>
    9408:	ebffff6e 	bl	91c8 <PUT32>
    940c:	e8bd8010 	pop	{r4, pc}
    9410:	2020001c 	eorcs	r0, r0, ip, lsl r0

00009414 <gpio_set_off>:
    9414:	e350001f 	cmp	r0, #31
    9418:	812fff1e 	bxhi	lr
    941c:	e92d4010 	push	{r4, lr}
    9420:	e3a01001 	mov	r1, #1
    9424:	e1a01011 	lsl	r1, r1, r0
    9428:	e59f0004 	ldr	r0, [pc, #4]	; 9434 <gpio_set_off+0x20>
    942c:	ebffff65 	bl	91c8 <PUT32>
    9430:	e8bd8010 	pop	{r4, pc}
    9434:	20200028 	eorcs	r0, r0, r8, lsr #32

00009438 <gpio_set_input>:
    9438:	e92d4010 	push	{r4, lr}
    943c:	e3a01000 	mov	r1, #0
    9440:	ebffffcc 	bl	9378 <gpio_set_function>
    9444:	e8bd8010 	pop	{r4, pc}

00009448 <gpio_write>:
    9448:	e92d4010 	push	{r4, lr}
    944c:	e3510000 	cmp	r1, #0
    9450:	1a000001 	bne	945c <gpio_write+0x14>
    9454:	ebffffee 	bl	9414 <gpio_set_off>
    9458:	e8bd8010 	pop	{r4, pc}
    945c:	ebffffe3 	bl	93f0 <gpio_set_on>
    9460:	e8bd8010 	pop	{r4, pc}

00009464 <gpio_read>:
    9464:	e350001f 	cmp	r0, #31
    9468:	8a000007 	bhi	948c <gpio_read+0x28>
    946c:	e92d4010 	push	{r4, lr}
    9470:	e200401f 	and	r4, r0, #31
    9474:	e59f3018 	ldr	r3, [pc, #24]	; 9494 <gpio_read+0x30>
    9478:	e08302a0 	add	r0, r3, r0, lsr #5
    947c:	ebffff5d 	bl	91f8 <GET32>
    9480:	e1a00430 	lsr	r0, r0, r4
    9484:	e2000001 	and	r0, r0, #1
    9488:	e8bd8010 	pop	{r4, pc}
    948c:	e3e00000 	mvn	r0, #0
    9490:	e12fff1e 	bx	lr
    9494:	20200034 	eorcs	r0, r0, r4, lsr r0

00009498 <kmalloc>:
 *  - The returned pointer should always be 4-byte aligned.  
 *    Easiest way is to make sure the heap pointer starts 4-byte
 *    and you always round up the number of bytes.  Make sure
 *    you put an assertion in.  
 */
void *kmalloc(unsigned nbytes) {
    9498:	e92d4010 	push	{r4, lr}
    demand(init_p, calling before initialized);
    949c:	e59f3048 	ldr	r3, [pc, #72]	; 94ec <kmalloc+0x54>
    94a0:	e5933000 	ldr	r3, [r3]
    94a4:	e3530000 	cmp	r3, #0
    94a8:	1a000005 	bne	94c4 <kmalloc+0x2c>
    94ac:	e59f003c 	ldr	r0, [pc, #60]	; 94f0 <kmalloc+0x58>
    94b0:	e59f103c 	ldr	r1, [pc, #60]	; 94f4 <kmalloc+0x5c>
    94b4:	e59f203c 	ldr	r2, [pc, #60]	; 94f8 <kmalloc+0x60>
    94b8:	e3a0301a 	mov	r3, #26
    94bc:	ebfffd8d 	bl	8af8 <printk>
    94c0:	ebffff0d 	bl	90fc <rpi_reboot>
    
    void* to_allocate = heap_ptr;
    94c4:	e59f3020 	ldr	r3, [pc, #32]	; 94ec <kmalloc+0x54>
    94c8:	e5934004 	ldr	r4, [r3, #4]
    unsigned rounded_nbytes = roundup(nbytes, 4);
    94cc:	e2802003 	add	r2, r0, #3
    94d0:	e3c22003 	bic	r2, r2, #3
    heap_ptr += rounded_nbytes;
    94d4:	e0840002 	add	r0, r4, r2
    94d8:	e5830004 	str	r0, [r3, #4]
    memset(heap_ptr, 0, rounded_nbytes);
    94dc:	e3a01000 	mov	r1, #0
    94e0:	ebfffd7c 	bl	8ad8 <memset>
    return to_allocate;

}
    94e4:	e1a00004 	mov	r0, r4
    94e8:	e8bd8010 	pop	{r4, pc}
    94ec:	0000a18c 	andeq	sl, r0, ip, lsl #3
    94f0:	00009c74 	andeq	r9, r0, r4, ror ip
    94f4:	00009cb4 			; <UNDEFINED> instruction: 0x00009cb4
    94f8:	00009c4c 	andeq	r9, r0, ip, asr #24

000094fc <kmalloc_aligned>:

// address of returned pointer should be a multiple of
// alignment.
void *kmalloc_aligned(unsigned nbytes, unsigned alignment) {
    94fc:	e92d4008 	push	{r3, lr}
    demand(init_p, calling before initialized);
    9500:	e59f3074 	ldr	r3, [pc, #116]	; 957c <kmalloc_aligned+0x80>
    9504:	e5933000 	ldr	r3, [r3]
    9508:	e3530000 	cmp	r3, #0
    950c:	1a000005 	bne	9528 <kmalloc_aligned+0x2c>
    9510:	e59f0068 	ldr	r0, [pc, #104]	; 9580 <kmalloc_aligned+0x84>
    9514:	e59f1068 	ldr	r1, [pc, #104]	; 9584 <kmalloc_aligned+0x88>
    9518:	e59f2068 	ldr	r2, [pc, #104]	; 9588 <kmalloc_aligned+0x8c>
    951c:	e3a03027 	mov	r3, #39	; 0x27
    9520:	ebfffd74 	bl	8af8 <printk>
    9524:	ebfffef4 	bl	90fc <rpi_reboot>

    if(alignment <= 4)
    9528:	e3510004 	cmp	r1, #4
    952c:	8a000001 	bhi	9538 <kmalloc_aligned+0x3c>
        return kmalloc(nbytes);
    9530:	ebffffd8 	bl	9498 <kmalloc>
    9534:	e8bd8008 	pop	{r3, pc}
    demand(alignment % 4 == 0, "weird alignment: not a multiple of 4!");
    9538:	e3110003 	tst	r1, #3
    953c:	0a000005 	beq	9558 <kmalloc_aligned+0x5c>
    9540:	e59f0044 	ldr	r0, [pc, #68]	; 958c <kmalloc_aligned+0x90>
    9544:	e59f1038 	ldr	r1, [pc, #56]	; 9584 <kmalloc_aligned+0x88>
    9548:	e59f2038 	ldr	r2, [pc, #56]	; 9588 <kmalloc_aligned+0x8c>
    954c:	e3a0302b 	mov	r3, #43	; 0x2b
    9550:	ebfffd68 	bl	8af8 <printk>
    9554:	ebfffee8 	bl	90fc <rpi_reboot>
    unsigned aligned_heap_ptr = (unsigned) heap_ptr;
    9558:	e59f301c 	ldr	r3, [pc, #28]	; 957c <kmalloc_aligned+0x80>
    955c:	e5932004 	ldr	r2, [r3, #4]
	aligned_heap_ptr = roundup(aligned_heap_ptr, alignment);
    9560:	e0812002 	add	r2, r1, r2
    9564:	e2422001 	sub	r2, r2, #1
    9568:	e2611000 	rsb	r1, r1, #0
    956c:	e0021001 	and	r1, r2, r1
	heap_ptr = (void*) aligned_heap_ptr;
    9570:	e5831004 	str	r1, [r3, #4]

	return kmalloc(nbytes);
    9574:	ebffffc7 	bl	9498 <kmalloc>
}
    9578:	e8bd8008 	pop	{r3, pc}
    957c:	0000a18c 	andeq	sl, r0, ip, lsl #3
    9580:	00009c74 	andeq	r9, r0, r4, ror ip
    9584:	00009cb4 			; <UNDEFINED> instruction: 0x00009cb4
    9588:	00009c54 	andeq	r9, r0, r4, asr ip
    958c:	00009cc8 	andeq	r9, r0, r8, asr #25

00009590 <kmalloc_init>:
 *    - should be just a few lines of code.
 *    - sets heap pointer to the location of 
 *      __heap_start__.   print this to make sure
 *      it makes sense!
 */
void kmalloc_init(void) {
    9590:	e92d4008 	push	{r3, lr}
    demand(!init_p, cannot initialize twice!\n);
    9594:	e59f3038 	ldr	r3, [pc, #56]	; 95d4 <kmalloc_init+0x44>
    9598:	e5933000 	ldr	r3, [r3]
    959c:	e3530000 	cmp	r3, #0
    95a0:	0a000005 	beq	95bc <kmalloc_init+0x2c>
    95a4:	e59f002c 	ldr	r0, [pc, #44]	; 95d8 <kmalloc_init+0x48>
    95a8:	e59f102c 	ldr	r1, [pc, #44]	; 95dc <kmalloc_init+0x4c>
    95ac:	e59f202c 	ldr	r2, [pc, #44]	; 95e0 <kmalloc_init+0x50>
    95b0:	e3a0303c 	mov	r3, #60	; 0x3c
    95b4:	ebfffd4f 	bl	8af8 <printk>
    95b8:	ebfffecf 	bl	90fc <rpi_reboot>
    init_p = 1;
    95bc:	e59f3010 	ldr	r3, [pc, #16]	; 95d4 <kmalloc_init+0x44>
    95c0:	e3a02001 	mov	r2, #1
    95c4:	e5832000 	str	r2, [r3]
    heap_ptr = &__heap_start__;
    95c8:	e59f2014 	ldr	r2, [pc, #20]	; 95e4 <kmalloc_init+0x54>
    95cc:	e5832004 	str	r2, [r3, #4]
    95d0:	e8bd8008 	pop	{r3, pc}
    95d4:	0000a18c 	andeq	sl, r0, ip, lsl #3
    95d8:	00009d20 	andeq	r9, r0, r0, lsr #26
    95dc:	00009cb4 			; <UNDEFINED> instruction: 0x00009cb4
    95e0:	00009c64 	andeq	r9, r0, r4, ror #24
    95e4:	0000a198 	muleq	r0, r8, r1

000095e8 <kfree_all>:
/* 
 * free all allocated memory: reset the heap 
 * pointer back to the beginning.
 */
void kfree_all(void) {
    heap_ptr = &__heap_start__;
    95e8:	e59f2008 	ldr	r2, [pc, #8]	; 95f8 <kfree_all+0x10>
    95ec:	e59f3008 	ldr	r3, [pc, #8]	; 95fc <kfree_all+0x14>
    95f0:	e5832004 	str	r2, [r3, #4]
    95f4:	e12fff1e 	bx	lr
    95f8:	0000a198 	muleq	r0, r8, r1
    95fc:	0000a18c 	andeq	sl, r0, ip, lsl #3

00009600 <kmalloc_heap_ptr>:
// allocated block satisfies: 
//    assert(<addr> < kmalloc_heap_ptr());
// 
void *kmalloc_heap_ptr(void) {
    return (void*) heap_ptr;
}
    9600:	e59f3004 	ldr	r3, [pc, #4]	; 960c <kmalloc_heap_ptr+0xc>
    9604:	e5930004 	ldr	r0, [r3, #4]
    9608:	e12fff1e 	bx	lr
    960c:	0000a18c 	andeq	sl, r0, ip, lsl #3

00009610 <internal_putchar>:
#include "rpi.h"

static int internal_putchar(int c) { uart_putc(c); return c; }
    9610:	e92d4010 	push	{r4, lr}
    9614:	e1a04000 	mov	r4, r0
    9618:	ebffff49 	bl	9344 <uart_putc>
    961c:	e1a00004 	mov	r0, r4
    9620:	e8bd8010 	pop	{r4, pc}

00009624 <dev_barrier>:
    9624:	ea000002 	b	9634 <dsb>

00009628 <dmb>:
    9628:	e3a00000 	mov	r0, #0
    962c:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
    9630:	e12fff1e 	bx	lr

00009634 <dsb>:
    9634:	ee070f9a 	mcr	15, 0, r0, cr7, cr10, {4}
    9638:	e12fff1e 	bx	lr

Disassembly of section .data:

0000963c <tid>:
    963c:	00000001 	andeq	r0, r0, r1

00009640 <putk>:
    9640:	00008b50 	andeq	r8, r0, r0, asr fp

00009644 <rpi_putchar>:
    9644:	00009610 	andeq	r9, r0, r0, lsl r6

Disassembly of section .rodata:

00009648 <__FUNCTION__.4162>:
    9648:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
    964c:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
    9650:	0065646f 	rsbeq	r6, r5, pc, ror #8

00009654 <__FUNCTION__.4172>:
    9654:	6d746f6e 	ldclvs	15, cr6, [r4, #-440]!	; 0xfffffe48
    9658:	006e6961 	rsbeq	r6, lr, r1, ror #18
    965c:	74206e69 	strtvc	r6, [r0], #-3689	; 0xe69
    9660:	61657268 	cmnvs	r5, r8, ror #4
    9664:	70252064 	eorvc	r2, r5, r4, rrx
    9668:	6977202c 	ldmdbvs	r7!, {r2, r3, r5, sp}^
    966c:	25206874 	strcs	r6, [r0, #-2164]!	; 0x874
    9670:	00000a78 	andeq	r0, r0, r8, ror sl
    9674:	4f525245 	svcmi	0x00525245
    9678:	73253a52 	teqvc	r5, #335872	; 0x52000
    967c:	3a73253a 	bcc	1cd2b6c <__bss_end__+0x1cc89d4>
    9680:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9684:	534c4146 	movtpl	r4, #49478	; 0xc146
    9688:	723c2845 	eorsvc	r2, ip, #4521984	; 0x450000
    968c:	635f6970 	cmpvs	pc, #112, 18	; 0x1c0000
    9690:	745f7275 	ldrbvc	r7, [pc], #-629	; 9698 <__FUNCTION__.4172+0x44>
    9694:	61657268 	cmnvs	r5, r8, ror #4
    9698:	2d292864 	stccs	8, cr2, [r9, #-400]!	; 0xfffffe70
    969c:	6469743e 	strbtvs	r7, [r9], #-1086	; 0x43e
    96a0:	203d3d20 	eorscs	r3, sp, r0, lsr #26
    96a4:	312b782a 	teqcc	fp, sl, lsr #16
    96a8:	203a293e 	eorscs	r2, sl, lr, lsr r9
    96ac:	70786522 	rsbsvc	r6, r8, r2, lsr #10
    96b0:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0x365
    96b4:	64252064 	strtvs	r2, [r5], #-100	; 0x64
    96b8:	6168202c 	cmnvs	r8, ip, lsr #32
    96bc:	25206576 	strcs	r6, [r0, #-1398]!	; 0x576
    96c0:	226e5c64 	rsbcs	r5, lr, #100, 24	; 0x6400
    96c4:	0000000a 	andeq	r0, r0, sl
    96c8:	65742d31 	ldrbvs	r2, [r4, #-3377]!	; 0xd31
    96cc:	742d7473 	strtvc	r7, [sp], #-1139	; 0x473
    96d0:	61657268 	cmnvs	r5, r8, ror #4
    96d4:	00632e64 	rsbeq	r2, r3, r4, ror #28
    96d8:	756f6261 	strbvc	r6, [pc, #-609]!	; 947f <gpio_read+0x1b>
    96dc:	6f742074 	svcvs	0x00742074
    96e0:	73657420 	cmnvc	r5, #32, 8	; 0x20000000
    96e4:	75732074 	ldrbvc	r2, [r3, #-116]!	; 0x74
    96e8:	6e696d6d 	cdpvs	13, 6, cr6, cr9, cr13, {3}
    96ec:	666f2067 	strbtvs	r2, [pc], -r7, rrx
    96f0:	20303320 	eorscs	r3, r0, r0, lsr #6
    96f4:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
    96f8:	0a736461 	beq	1ce2884 <__bss_end__+0x1cd86ec>
    96fc:	00000000 	andeq	r0, r0, r0
    9700:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    9704:	203d2074 	eorscs	r2, sp, r4, ror r0
    9708:	202c6425 	eorcs	r6, ip, r5, lsr #8
    970c:	3d6d7573 	cfstr64cc	mvdx7, [sp, #-460]!	; 0xfffffe34
    9710:	000a6425 	andeq	r6, sl, r5, lsr #8
    9714:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9718:	73253a43 	teqvc	r5, #274432	; 0x43000
    971c:	3a73253a 	bcc	1cd2c0c <__bss_end__+0x1cc8a74>
    9720:	743a6425 	ldrtvc	r6, [sl], #-1061	; 0x425
    9724:	61657268 	cmnvs	r5, r8, ror #4
    9728:	6f635f64 	svcvs	0x00635f64
    972c:	20746e75 	rsbscs	r6, r4, r5, ror lr
    9730:	6e203d3d 	mcrvs	13, 1, r3, cr0, cr13, {1}
    9734:	0000000a 	andeq	r0, r0, sl
    9738:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    973c:	73253a43 	teqvc	r5, #274432	; 0x43000
    9740:	3a73253a 	bcc	1cd2c30 <__bss_end__+0x1cc8a98>
    9744:	743a6425 	ldrtvc	r6, [sl], #-1061	; 0x425
    9748:	61657268 	cmnvs	r5, r8, ror #4
    974c:	75735f64 	ldrbvc	r5, [r3, #-3940]!	; 0xf64
    9750:	3d3d206d 	ldccc	0, cr2, [sp, #-436]!	; 0xfffffe4c
    9754:	6d757320 	ldclvs	3, cr7, [r5, #-128]!	; 0xffffff80
    9758:	0000000a 	andeq	r0, r0, sl
    975c:	43435553 	movtmi	r5, #13651	; 0x3553
    9760:	21535345 	cmpcs	r3, r5, asr #6
    9764:	0000000a 	andeq	r0, r0, sl

00009768 <__FUNCTION__.4172>:
    9768:	6d655f51 	stclvs	15, cr5, [r5, #-324]!	; 0xfffffebc
    976c:	00797470 	rsbseq	r7, r9, r0, ror r4

00009770 <__FUNCTION__.4176>:
    9770:	6f705f51 	svcvs	0x00705f51
    9774:	00000070 	andeq	r0, r0, r0, ror r0

00009778 <__FUNCTION__.4204>:
    9778:	615f6874 	cmpvs	pc, r4, ror r8	; <UNPREDICTABLE>
    977c:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    9780:	00000000 	andeq	r0, r0, r0

00009784 <__FUNCTION__.4240>:
    9784:	5f697072 	svcpl	0x00697072
    9788:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    978c:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    9790:	6568635f 	strbvs	r6, [r8, #-863]!	; 0x35f
    9794:	00006b63 	andeq	r6, r0, r3, ror #22

00009798 <__FUNCTION__.4244>:
    9798:	5f697072 	svcpl	0x00697072
    979c:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    97a0:	68635f6b 	stmdavs	r3!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    97a4:	006b6365 	rsbeq	r6, fp, r5, ror #6

000097a8 <__FUNCTION__.4248>:
    97a8:	5f697072 	svcpl	0x00697072
    97ac:	6e696f6a 	cdpvs	15, 6, cr6, cr9, cr10, {3}
    97b0:	00000000 	andeq	r0, r0, r0

000097b4 <__FUNCTION__.4252>:
    97b4:	5f697072 	svcpl	0x00697072
    97b8:	63617865 	cmnvs	r1, #6619136	; 0x650000
    97bc:	6c735f74 	ldclvs	15, cr5, [r3], #-464	; 0xfffffe30
    97c0:	00706565 	rsbseq	r6, r0, r5, ror #10
    97c4:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    97c8:	73253a43 	teqvc	r5, #274432	; 0x43000
    97cc:	3a73253a 	bcc	1cd2cbc <__bss_end__+0x1cc8b24>
    97d0:	513a6425 	teqpl	sl, r5, lsr #8
    97d4:	6c656e5f 	stclvs	14, cr6, [r5], #-380	; 0xfffffe84
    97d8:	71286d65 	teqvc	r8, r5, ror #26
    97dc:	3d3d2029 	ldccc	0, cr2, [sp, #-164]!	; 0xffffff5c
    97e0:	000a3020 	andeq	r3, sl, r0, lsr #32
    97e4:	00682e51 	rsbeq	r2, r8, r1, asr lr
    97e8:	4f525245 	svcmi	0x00525245
    97ec:	73253a52 	teqvc	r5, #335872	; 0x52000
    97f0:	3a73253a 	bcc	1cd2ce0 <__bss_end__+0x1cc8b48>
    97f4:	203a6425 	eorscs	r6, sl, r5, lsr #8
    97f8:	534c4146 	movtpl	r4, #49478	; 0xc146
    97fc:	213c2845 	teqcs	ip, r5, asr #16
    9800:	743e2d71 	ldrtvc	r2, [lr], #-3441	; 0xd71
    9804:	3e6c6961 	cdpcc	9, 6, cr6, cr12, cr1, {3}
    9808:	69203a29 	stmdbvs	r0!, {r0, r3, r5, r9, fp, ip, sp}
    980c:	6c61766e 	stclvs	6, cr7, [r1], #-440	; 0xfffffe48
    9810:	51206469 	teqpl	r0, r9, ror #8
    9814:	0000000a 	andeq	r0, r0, sl
    9818:	4f525245 	svcmi	0x00525245
    981c:	73253a52 	teqvc	r5, #335872	; 0x52000
    9820:	3a73253a 	bcc	1cd2d10 <__bss_end__+0x1cc8b78>
    9824:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9828:	534c4146 	movtpl	r4, #49478	; 0xc146
    982c:	713c2845 	teqvc	ip, r5, asr #16
    9830:	203a293e 	eorscs	r2, sl, lr, lsr r9
    9834:	20646162 	rsbcs	r6, r4, r2, ror #2
    9838:	75706e69 	ldrbvc	r6, [r0, #-3689]!	; 0xe69
    983c:	00000a74 	andeq	r0, r0, r4, ror sl
    9840:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9844:	73253a43 	teqvc	r5, #274432	; 0x43000
    9848:	3a73253a 	bcc	1cd2d38 <__bss_end__+0x1cc8ba0>
    984c:	513a6425 	teqpl	sl, r5, lsr #8
    9850:	706d655f 	rsbvc	r6, sp, pc, asr r5
    9854:	71287974 	teqvc	r8, r4, ror r9
    9858:	00000a29 	andeq	r0, r0, r9, lsr #20
    985c:	4f525245 	svcmi	0x00525245
    9860:	73253a52 	teqvc	r5, #335872	; 0x52000
    9864:	3a73253a 	bcc	1cd2d54 <__bss_end__+0x1cc8bbc>
    9868:	203a6425 	eorscs	r6, sl, r5, lsr #8
    986c:	534c4146 	movtpl	r4, #49478	; 0xc146
    9870:	283c2845 	ldmdacs	ip!, {r0, r2, r6, fp, sp}
    9874:	6e752828 	cdpvs	8, 7, cr2, cr5, cr8, {1}
    9878:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
    987c:	28296465 	stmdacs	r9!, {r0, r2, r5, r6, sl, sp, lr}
    9880:	3e2d7426 	cdpcc	4, 2, cr7, cr13, cr6, {1}
    9884:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    9888:	5d305b6b 	fldmdbxpl	r0!, {d5-d57}	;@ Deprecated
    988c:	28252929 	stmdacs	r5!, {r0, r3, r5, r8, fp, sp}
    9890:	3d202938 	stccc	9, cr2, [r0, #-224]!	; 0xffffff20
    9894:	2930203d 	ldmdbcs	r0!, {r0, r2, r3, r4, r5, sp}
    9898:	203a293e 	eorscs	r2, sl, lr, lsr r9
    989c:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    98a0:	756d206b 	strbvc	r2, [sp, #-107]!	; 0x6b
    98a4:	62207473 	eorvs	r7, r0, #1929379840	; 0x73000000
    98a8:	2d382065 	ldccs	0, cr2, [r8, #-404]!	; 0xfffffe6c
    98ac:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
    98b0:	696c6120 	stmdbvs	ip!, {r5, r8, sp, lr}^
    98b4:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
    98b8:	00000a21 	andeq	r0, r0, r1, lsr #20
    98bc:	2d697072 	stclcs	0, cr7, [r9, #-456]!	; 0xfffffe38
    98c0:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
    98c4:	632e6461 	teqvs	lr, #1627389952	; 0x61000000
    98c8:	00000000 	andeq	r0, r0, r0
    98cc:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    98d0:	73253a43 	teqvc	r5, #274432	; 0x43000
    98d4:	3a73253a 	bcc	1cd2dc4 <__bss_end__+0x1cc8c2c>
    98d8:	733a6425 	teqvc	sl, #620756992	; 0x25000000
    98dc:	61726f74 	cmnvs	r2, r4, ror pc
    98e0:	6c206567 	cfstr32vs	mvfx6, [r0], #-412	; 0xfffffe64
    98e4:	3a6b6165 	bcc	1ae1e80 <__bss_end__+0x1ad7ce8>
    98e8:	6f687320 	svcvs	0x00687320
    98ec:	20646c75 	rsbcs	r6, r4, r5, ror ip
    98f0:	65766168 	ldrbvs	r6, [r6, #-360]!	; 0x168
    98f4:	20642520 	rsbcs	r2, r4, r0, lsr #10
    98f8:	65657266 	strbvs	r7, [r5, #-614]!	; 0x266
    98fc:	6f6c6220 	svcvs	0x006c6220
    9900:	2c736b63 	ldclcs	11, cr6, [r3], #-396	; 0xfffffe74
    9904:	76616820 	strbtvc	r6, [r1], -r0, lsr #16
    9908:	64252065 	strtvs	r2, [r5], #-101	; 0x65
    990c:	75722820 	ldrbvc	r2, [r2, #-2080]!	; 0x820
    9910:	253d716e 	ldrcs	r7, [sp, #-366]!	; 0x16e
    9914:	66202c64 	strtvs	r2, [r0], -r4, ror #24
    9918:	71656572 	smcvc	22098	; 0x5652
    991c:	2964253d 	stmdbcs	r4!, {r0, r2, r3, r4, r5, r8, sl, sp}^
    9920:	00000a0a 	andeq	r0, r0, sl, lsl #20
    9924:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
    9928:	203a6461 	eorscs	r6, sl, r1, ror #8
    992c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    9930:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    9934:	65686320 	strbvs	r6, [r8, #-800]!	; 0x320
    9938:	70206b63 	eorvc	r6, r0, r3, ror #22
    993c:	65737361 	ldrbvs	r7, [r3, #-865]!	; 0x361
    9940:	00000a64 	andeq	r0, r0, r4, ror #20
    9944:	74697072 	strbtvc	r7, [r9], #-114	; 0x72
    9948:	61657268 	cmnvs	r5, r8, ror #4
    994c:	203a7364 	eorscs	r7, sl, r4, ror #6
    9950:	656e6f64 	strbvs	r6, [lr, #-3940]!	; 0xf64
    9954:	74697720 	strbtvc	r7, [r9], #-1824	; 0x720
    9958:	6c612068 	stclvs	0, cr2, [r1], #-416	; 0xfffffe60
    995c:	6874206c 	ldmdavs	r4!, {r2, r3, r5, r6, sp}^
    9960:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
    9964:	72202173 	eorvc	r2, r0, #-1073741796	; 0xc000001c
    9968:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
    996c:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
    9970:	0000000a 	andeq	r0, r0, sl
    9974:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9978:	73253a43 	teqvc	r5, #274432	; 0x43000
    997c:	3a73253a 	bcc	1cd2e6c <__bss_end__+0x1cc8cd4>
    9980:	693a6425 	ldmdbvs	sl!, {r0, r2, r5, sl, sp, lr}
    9984:	656c706d 	strbvs	r7, [ip, #-109]!	; 0x6d
    9988:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
    998c:	69687420 	stmdbvs	r8!, {r5, sl, ip, sp, lr}^
    9990:	75662073 	strbvc	r2, [r6, #-115]!	; 0x73
    9994:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    9998:	0a216e6f 	beq	86535c <__bss_end__+0x85b1c4>
    999c:	0000000a 	andeq	r0, r0, sl

000099a0 <__FUNCTION__.4202>:
    99a0:	705f7163 	subsvc	r7, pc, r3, ror #2
    99a4:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    99a8:	00000000 	andeq	r0, r0, r0

000099ac <__FUNCTION__.4206>:
    99ac:	6f5f7163 	svcvs	0x005f7163
    99b0:	0000006b 	andeq	r0, r0, fp, rrx

000099b4 <__FUNCTION__.4211>:
    99b4:	695f7163 	ldmdbvs	pc, {r0, r1, r5, r6, r8, ip, sp, lr}^	; <UNPREDICTABLE>
    99b8:	0074696e 	rsbseq	r6, r4, lr, ror #18

000099bc <__FUNCTION__.4225>:
    99bc:	705f7163 	subsvc	r7, pc, r3, ror #2
    99c0:	5f6b6565 	svcpl	0x006b6565
    99c4:	0000006e 	andeq	r0, r0, lr, rrx

000099c8 <__FUNCTION__.4250>:
    99c8:	705f7163 	subsvc	r7, pc, r3, ror #2
    99cc:	5f687375 	svcpl	0x00687375
    99d0:	0000006e 	andeq	r0, r0, lr, rrx
    99d4:	253a7325 	ldrcs	r7, [sl, #-805]!	; 0x325
    99d8:	64253a73 	strtvs	r3, [r5], #-2675	; 0xa73
    99dc:	2071633a 	rsbscs	r6, r1, sl, lsr r3
    99e0:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    99e4:	68203a74 	stmdavs	r0!, {r2, r4, r5, r6, r9, fp, ip, sp}
    99e8:	3d646165 	stfcce	f6, [r4, #-404]!	; 0xfffffe6c
    99ec:	202c6425 	eorcs	r6, ip, r5, lsr #8
    99f0:	6c696174 	stfvse	f6, [r9], #-464	; 0xfffffe30
    99f4:	2c64253d 	cfstr64cs	mvdx2, [r4], #-244	; 0xffffff0c
    99f8:	6c656e20 	stclvs	14, cr6, [r5], #-128	; 0xffffff80
    99fc:	253d6d65 	ldrcs	r6, [sp, #-3429]!	; 0xd65
    9a00:	65202c64 	strvs	r2, [r0, #-3172]!	; 0xc64
    9a04:	7974706d 	ldmdbvc	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    9a08:	0a64253d 	beq	1912f04 <__bss_end__+0x1908d6c>
    9a0c:	00000000 	andeq	r0, r0, r0
    9a10:	63726963 	cmnvs	r2, #1622016	; 0x18c000
    9a14:	72616c75 	rsbvc	r6, r1, #29952	; 0x7500
    9a18:	0000632e 	andeq	r6, r0, lr, lsr #6
    9a1c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9a20:	73253a43 	teqvc	r5, #274432	; 0x43000
    9a24:	3a73253a 	bcc	1cd2f14 <__bss_end__+0x1cc8d7c>
    9a28:	663a6425 	ldrtvs	r6, [sl], -r5, lsr #8
    9a2c:	65636e65 	strbvs	r6, [r3, #-3685]!	; 0xe65
    9a30:	20736920 	rsbscs	r6, r3, r0, lsr #18
    9a34:	72726f63 	rsbsvc	r6, r2, #396	; 0x18c
    9a38:	65747075 	ldrbvs	r7, [r4, #-117]!	; 0x75
    9a3c:	000a0a64 	andeq	r0, sl, r4, ror #20
    9a40:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9a44:	73253a43 	teqvc	r5, #274432	; 0x43000
    9a48:	3a73253a 	bcc	1cd2f38 <__bss_end__+0x1cc8da0>
    9a4c:	633a6425 	teqvs	sl, #620756992	; 0x25000000
    9a50:	6d655f71 	stclvs	15, cr5, [r5, #-452]!	; 0xfffffe3c
    9a54:	28797470 	ldmdacs	r9!, {r4, r5, r6, sl, ip, sp, lr}^
    9a58:	000a2963 	andeq	r2, sl, r3, ror #18
    9a5c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9a60:	73253a43 	teqvc	r5, #274432	; 0x43000
    9a64:	3a73253a 	bcc	1cd2f54 <__bss_end__+0x1cc8dbc>
    9a68:	213a6425 	teqcs	sl, r5, lsr #8
    9a6c:	665f7163 	ldrbvs	r7, [pc], -r3, ror #2
    9a70:	286c6c75 	stmdacs	ip!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    9a74:	000a2963 	andeq	r2, sl, r3, ror #18
    9a78:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9a7c:	73253a43 	teqvc	r5, #274432	; 0x43000
    9a80:	3a73253a 	bcc	1cd2f70 <__bss_end__+0x1cc8dd8>
    9a84:	633a6425 	teqvs	sl, #620756992	; 0x25000000
    9a88:	656e5f71 	strbvs	r5, [lr, #-3953]!	; 0xf71
    9a8c:	286d656c 	stmdacs	sp!, {r2, r3, r5, r6, r8, sl, sp, lr}^
    9a90:	3d202963 	stccc	9, cr2, [r0, #-396]!	; 0xfffffe74
    9a94:	0a30203d 	beq	c11b90 <__bss_end__+0xc079f8>
    9a98:	00000000 	andeq	r0, r0, r0
    9a9c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9aa0:	73253a43 	teqvc	r5, #274432	; 0x43000
    9aa4:	3a73253a 	bcc	1cd2f94 <__bss_end__+0x1cc8dfc>
    9aa8:	633a6425 	teqvs	sl, #620756992	; 0x25000000
    9aac:	6f705f71 	svcvs	0x00705f71
    9ab0:	6f6e5f70 	svcvs	0x006e5f70
    9ab4:	6f6c626e 	svcvs	0x006c626e
    9ab8:	63286b63 	teqvs	r8, #101376	; 0x18c00
    9abc:	2965262c 	stmdbcs	r5!, {r2, r3, r5, r9, sl, sp}^
    9ac0:	203d3d20 	eorscs	r3, sp, r0, lsr #26
    9ac4:	26262030 			; <UNDEFINED> instruction: 0x26262030
    9ac8:	3d206520 	cfstr32cc	mvfx6, [r0, #-128]!	; 0xffffff80
    9acc:	7830203d 	ldmdavc	r0!, {r0, r2, r3, r4, r5, sp}
    9ad0:	000a3231 	andeq	r3, sl, r1, lsr r2
    9ad4:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9ad8:	73253a43 	teqvc	r5, #274432	; 0x43000
    9adc:	3a73253a 	bcc	1cd2fcc <__bss_end__+0x1cc8e34>
    9ae0:	733a6425 	teqvc	sl, #620756992	; 0x25000000
    9ae4:	3d3d207a 	ldccc	0, cr2, [sp, #-488]!	; 0xfffffe18
    9ae8:	5f716320 	svcpl	0x00716320
    9aec:	656c656e 	strbvs	r6, [ip, #-1390]!	; 0x56e
    9af0:	2963286d 	stmdbcs	r3!, {r0, r2, r3, r5, r6, fp, sp}^
    9af4:	0000000a 	andeq	r0, r0, sl
    9af8:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9afc:	73253a43 	teqvc	r5, #274432	; 0x43000
    9b00:	3a73253a 	bcc	1cd2ff0 <__bss_end__+0x1cc8e58>
    9b04:	6e3a6425 	cdpvs	4, 3, cr6, cr10, cr5, {1}
    9b08:	6820746f 	stmdavs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
    9b0c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    9b10:	20676e69 	rsbcs	r6, r7, r9, ror #28
    9b14:	73696874 	cmnvc	r9, #116, 16	; 0x740000
    9b18:	00000a0a 	andeq	r0, r0, sl, lsl #20
    9b1c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9b20:	73253a43 	teqvc	r5, #274432	; 0x43000
    9b24:	3a73253a 	bcc	1cd3014 <__bss_end__+0x1cc8e7c>
    9b28:	213a6425 	teqcs	sl, r5, lsr #8
    9b2c:	655f7163 	ldrbvs	r7, [pc, #-355]	; 99d1 <__FUNCTION__.4250+0x9>
    9b30:	7974706d 	ldmdbvc	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    9b34:	0a296328 	beq	a627dc <__bss_end__+0xa58644>
    9b38:	00000000 	andeq	r0, r0, r0

00009b3c <__FUNCTION__.4185>:
    9b3c:	74696d65 	strbtvc	r6, [r9], #-3429	; 0xd65
    9b40:	00000000 	andeq	r0, r0, r0

00009b44 <__FUNCTION__.4133>:
    9b44:	5f697072 	svcpl	0x00697072
    9b48:	5f746573 	svcpl	0x00746573
    9b4c:	7074756f 	rsbsvc	r7, r4, pc, ror #10
    9b50:	00007475 	andeq	r7, r0, r5, ror r4

00009b54 <__FUNCTION__.4207>:
    9b54:	705f6176 	subsvc	r6, pc, r6, ror r1	; <UNPREDICTABLE>
    9b58:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    9b5c:	0000006b 	andeq	r0, r0, fp, rrx
    9b60:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9b64:	73253a43 	teqvc	r5, #274432	; 0x43000
    9b68:	3a73253a 	bcc	1cd3058 <__bss_end__+0x1cc8ec0>
    9b6c:	303a6425 	eorscc	r6, sl, r5, lsr #8
    9b70:	0000000a 	andeq	r0, r0, sl
    9b74:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    9b78:	2d61762f 	stclcs	6, cr7, [r1, #-188]!	; 0xffffff44
    9b7c:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    9b80:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
    9b84:	00000000 	andeq	r0, r0, r0
    9b88:	33323130 	teqcc	r2, #48, 2
    9b8c:	37363534 			; <UNDEFINED> instruction: 0x37363534
    9b90:	00003938 	andeq	r3, r0, r8, lsr r9
    9b94:	33323130 	teqcc	r2, #48, 2
    9b98:	37363534 			; <UNDEFINED> instruction: 0x37363534
    9b9c:	62613938 	rsbvs	r3, r1, #56, 18	; 0xe0000
    9ba0:	66656463 	strbtvs	r6, [r5], -r3, ror #8
    9ba4:	00000000 	andeq	r0, r0, r0
    9ba8:	00003130 	andeq	r3, r0, r0, lsr r1
    9bac:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9bb0:	73253a43 	teqvc	r5, #274432	; 0x43000
    9bb4:	3a73253a 	bcc	1cd30a4 <__bss_end__+0x1cc8f0c>
    9bb8:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    9bbc:	5f637475 	svcpl	0x00637475
    9bc0:	000a7066 	andeq	r7, sl, r6, rrx
    9bc4:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9bc8:	73253a43 	teqvc	r5, #274432	; 0x43000
    9bcc:	3a73253a 	bcc	1cd30bc <__bss_end__+0x1cc8f24>
    9bd0:	773a6425 	ldrvc	r6, [sl, -r5, lsr #8]!
    9bd4:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
    9bd8:	33203c20 	teqcc	r0, #32, 24	; 0x2000
    9bdc:	00000a32 	andeq	r0, r0, r2, lsr sl
    9be0:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9be4:	73253a43 	teqvc	r5, #274432	; 0x43000
    9be8:	3a73253a 	bcc	1cd30d8 <__bss_end__+0x1cc8f40>
    9bec:	663a6425 	ldrtvs	r6, [sl], -r5, lsr #8
    9bf0:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xf6c
    9bf4:	746f6e20 	strbtvc	r6, [pc], #-3616	; 9bfc <__FUNCTION__.4207+0xa8>
    9bf8:	616e6520 	cmnvs	lr, r0, lsr #10
    9bfc:	64656c62 	strbtvs	r6, [r5], #-3170	; 0xc62
    9c00:	0a212121 	beq	85208c <__bss_end__+0x847ef4>
    9c04:	00000000 	andeq	r0, r0, r0
    9c08:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9c0c:	73253a43 	teqvc	r5, #274432	; 0x43000
    9c10:	3a73253a 	bcc	1cd3100 <__bss_end__+0x1cc8f68>
    9c14:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    9c18:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    9c1c:	6e203a6b 	vnmulvs.f32	s6, s0, s23
    9c20:	6820746f 	stmdavs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
    9c24:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    9c28:	20676e69 	rsbcs	r6, r7, r9, ror #28
    9c2c:	63657073 	cmnvs	r5, #115	; 0x73
    9c30:	65696669 	strbvs	r6, [r9, #-1641]!	; 0x669
    9c34:	25272072 	strcs	r2, [r7, #-114]!	; 0x72
    9c38:	0a0a2763 	beq	2939cc <__bss_end__+0x289834>
    9c3c:	00000000 	andeq	r0, r0, r0
    9c40:	454e4f44 	strbmi	r4, [lr, #-3908]	; 0xf44
    9c44:	0a212121 	beq	8520d0 <__bss_end__+0x847f38>
    9c48:	00000000 	andeq	r0, r0, r0

00009c4c <__FUNCTION__.4129>:
    9c4c:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    9c50:	00636f6c 	rsbeq	r6, r3, ip, ror #30

00009c54 <__FUNCTION__.4136>:
    9c54:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    9c58:	5f636f6c 	svcpl	0x00636f6c
    9c5c:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    9c60:	0064656e 	rsbeq	r6, r4, lr, ror #10

00009c64 <__FUNCTION__.4141>:
    9c64:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    9c68:	5f636f6c 	svcpl	0x00636f6c
    9c6c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    9c70:	00000000 	andeq	r0, r0, r0
    9c74:	4f525245 	svcmi	0x00525245
    9c78:	73253a52 	teqvc	r5, #335872	; 0x52000
    9c7c:	3a73253a 	bcc	1cd316c <__bss_end__+0x1cc8fd4>
    9c80:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9c84:	534c4146 	movtpl	r4, #49478	; 0xc146
    9c88:	693c2845 	ldmdbvs	ip!, {r0, r2, r6, fp, sp}
    9c8c:	5f74696e 	svcpl	0x0074696e
    9c90:	3a293e70 	bcc	a59658 <__bss_end__+0xa4f4c0>
    9c94:	6c616320 	stclvs	3, cr6, [r1], #-128	; 0xffffff80
    9c98:	676e696c 	strbvs	r6, [lr, -ip, ror #18]!
    9c9c:	66656220 	strbtvs	r6, [r5], -r0, lsr #4
    9ca0:	2065726f 	rsbcs	r7, r5, pc, ror #4
    9ca4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    9ca8:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    9cac:	0a64657a 	beq	192329c <__bss_end__+0x1919104>
    9cb0:	00000000 	andeq	r0, r0, r0
    9cb4:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
    9cb8:	6b2f6372 	blvs	be2a88 <__bss_end__+0xbd88f0>
    9cbc:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    9cc0:	632e636f 	teqvs	lr, #-1140850687	; 0xbc000001
    9cc4:	00000000 	andeq	r0, r0, r0
    9cc8:	4f525245 	svcmi	0x00525245
    9ccc:	73253a52 	teqvc	r5, #335872	; 0x52000
    9cd0:	3a73253a 	bcc	1cd31c0 <__bss_end__+0x1cc9028>
    9cd4:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9cd8:	534c4146 	movtpl	r4, #49478	; 0xc146
    9cdc:	613c2845 	teqvs	ip, r5, asr #16
    9ce0:	6e67696c 	cdpvs	9, 6, cr6, cr7, cr12, {3}
    9ce4:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
    9ce8:	34202520 	strtcc	r2, [r0], #-1312	; 0x520
    9cec:	203d3d20 	eorscs	r3, sp, r0, lsr #26
    9cf0:	3a293e30 	bcc	a595b8 <__bss_end__+0xa4f420>
    9cf4:	65772220 	ldrbvs	r2, [r7, #-544]!	; 0x220
    9cf8:	20647269 	rsbcs	r7, r4, r9, ror #4
    9cfc:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    9d00:	6e656d6e 	cdpvs	13, 6, cr6, cr5, cr14, {3}
    9d04:	6e203a74 	mcrvs	10, 1, r3, cr0, cr4, {3}
    9d08:	6120746f 	teqvs	r0, pc, ror #8
    9d0c:	6c756d20 	ldclvs	13, cr6, [r5], #-128	; 0xffffff80
    9d10:	6c706974 	ldclvs	9, cr6, [r0], #-464	; 0xfffffe30
    9d14:	666f2065 	strbtvs	r2, [pc], -r5, rrx
    9d18:	22213420 	eorcs	r3, r1, #32, 8	; 0x20000000
    9d1c:	0000000a 	andeq	r0, r0, sl
    9d20:	4f525245 	svcmi	0x00525245
    9d24:	73253a52 	teqvc	r5, #335872	; 0x52000
    9d28:	3a73253a 	bcc	1cd3218 <__bss_end__+0x1cc9080>
    9d2c:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9d30:	534c4146 	movtpl	r4, #49478	; 0xc146
    9d34:	213c2845 	teqcs	ip, r5, asr #16
    9d38:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    9d3c:	293e705f 	ldmdbcs	lr!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}
    9d40:	6163203a 	cmnvs	r3, sl, lsr r0
    9d44:	746f6e6e 	strbtvc	r6, [pc], #-3694	; 9d4c <__FUNCTION__.4141+0xe8>
    9d48:	696e6920 	stmdbvs	lr!, {r5, r8, fp, sp, lr}^
    9d4c:	6c616974 	stclvs	9, cr6, [r1], #-464	; 0xfffffe30
    9d50:	20657a69 	rsbcs	r7, r5, r9, ror #20
    9d54:	63697774 	cmnvs	r9, #116, 14	; 0x1d00000
    9d58:	0a0a2165 	beq	2922f4 <__bss_end__+0x28815c>
    9d5c:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss:

00009d60 <__bss_start__>:
    9d60:	00000000 	andeq	r0, r0, r0

00009d64 <thread_sum>:
    9d64:	00000000 	andeq	r0, r0, r0

00009d68 <freeq>:
	...

00009d74 <nalloced>:
    9d74:	00000000 	andeq	r0, r0, r0

00009d78 <cur_thread>:
    9d78:	00000000 	andeq	r0, r0, r0

00009d7c <runq>:
	...

00009d88 <scheduler_thread>:
    9d88:	00000000 	andeq	r0, r0, r0

00009d8c <buf.4133>:
	...

0000a18c <init_p>:
    a18c:	00000000 	andeq	r0, r0, r0

0000a190 <heap_ptr>:
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4b5a3605 	blmi	168d82c <__bss_end__+0x1683694>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	12010901 	andne	r0, r1, #16384	; 0x4000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0x404
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	22011a01 	andcs	r1, r1, #4096	; 0x1000
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__bss_end__+0x10c6b8c>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	34202955 	strtcc	r2, [r0], #-2389	; 0x955
   c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
  10:	43434700 	movtmi	r4, #14080	; 0x3700
  14:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
  18:	5420554e 	strtpl	r5, [r0], #-1358	; 0x54e
  1c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  20:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
  24:	6d724120 	ldfvse	f4, [r2, #-128]!	; 0xffffff80
  28:	626d4520 	rsbvs	r4, sp, #32, 10	; 0x8000000
  2c:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
  30:	72502064 	subsvc	r2, r0, #100	; 0x64
  34:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
  38:	73726f73 	cmnvc	r2, #460	; 0x1cc
  3c:	322d3720 	eorcc	r3, sp, #32, 14	; 0x800000
  40:	2d383130 	ldfcss	f3, [r8, #-192]!	; 0xffffff40
  44:	752d3371 	strvc	r3, [sp, #-881]!	; 0x371
  48:	74616470 	strbtvc	r6, [r1], #-1136	; 0x470
  4c:	37202965 	strcc	r2, [r0, -r5, ror #18]!
  50:	312e332e 	teqcc	lr, lr, lsr #6
  54:	31303220 	teqcc	r0, r0, lsr #4
  58:	32363038 	eorscc	r3, r6, #56	; 0x38
  5c:	72282032 	eorvc	r2, r8, #50	; 0x32
  60:	61656c65 	cmnvs	r5, r5, ror #24
  64:	20296573 	eorcs	r6, r9, r3, ror r5
  68:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  6c:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
  70:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
  74:	2d372d64 	ldccs	13, cr2, [r7, #-400]!	; 0xfffffe70
  78:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  7c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  80:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  84:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  88:	39313632 	ldmdbcc	r1!, {r1, r4, r5, r9, sl, ip, sp}
  8c:	005d3730 	subseq	r3, sp, r0, lsr r7

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000045f 	andeq	r0, r0, pc, asr r4
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000010 	andeq	r0, r0, r0, lsl r0
      10:	00012a01 	andeq	r2, r1, r1, lsl #20
      14:	0000a300 	andeq	sl, r0, r0, lsl #6
      18:	00801000 	addeq	r1, r0, r0
      1c:	00019c00 	andeq	r9, r1, r0, lsl #24
      20:	00000000 	andeq	r0, r0, r0
      24:	05040200 	streq	r0, [r4, #-512]	; 0x200
      28:	00746e69 	rsbseq	r6, r4, r9, ror #28
      2c:	81070403 	tsthi	r7, r3, lsl #8
      30:	03000001 	movweq	r0, #1
      34:	00810601 	addeq	r0, r1, r1, lsl #12
      38:	02030000 	andeq	r0, r3, #0
      3c:	0001d205 	andeq	sp, r1, r5, lsl #4
      40:	05040300 	streq	r0, [r4, #-768]	; 0x300
      44:	000001be 			; <UNDEFINED> instruction: 0x000001be
      48:	b9050803 	stmdblt	r5, {r0, r1, fp}
      4c:	03000001 	movweq	r0, #1
      50:	007f0801 	rsbseq	r0, pc, r1, lsl #16
      54:	02030000 	andeq	r0, r3, #0
      58:	0000fe07 	andeq	pc, r0, r7, lsl #28
      5c:	01dc0400 	bicseq	r0, ip, r0, lsl #8
      60:	34030000 	strcc	r0, [r3], #-0
      64:	00000068 	andeq	r0, r0, r8, rrx
      68:	7c070403 	cfstrsvc	mvf0, [r7], {3}
      6c:	03000001 	movweq	r0, #1
      70:	01770708 	cmneq	r7, r8, lsl #14
      74:	04030000 	streq	r0, [r3], #-0
      78:	0001b007 	andeq	fp, r1, r7
      7c:	03040500 	movweq	r0, #17664	; 0x4500
      80:	00880801 	addeq	r0, r8, r1, lsl #16
      84:	04060000 	streq	r0, [r6], #-0
      88:	0000008c 	andeq	r0, r0, ip, lsl #1
      8c:	00007f07 	andeq	r7, r0, r7, lsl #30
      90:	007f0800 	rsbseq	r0, pc, r0, lsl #16
      94:	00a10000 	adceq	r0, r1, r0
      98:	76090000 	strvc	r0, [r9], -r0
      9c:	07000000 	streq	r0, [r0, -r0]
      a0:	01c70a00 	biceq	r0, r7, r0, lsl #20
      a4:	20500000 	subscs	r0, r0, r0
      a8:	00f62502 	rscseq	r2, r6, r2, lsl #10
      ac:	690b0000 	stmdbvs	fp, {}	; <UNPREDICTABLE>
      b0:	02000001 	andeq	r0, r0, #1
      b4:	0000f627 	andeq	pc, r0, r7, lsr #12
      b8:	000b0000 	andeq	r0, fp, r0
      bc:	02000000 	andeq	r0, r0, #0
      c0:	00010629 	andeq	r0, r1, r9, lsr #12
      c4:	740c4000 	strvc	r4, [ip], #-0
      c8:	02006469 	andeq	r6, r0, #1761607680	; 0x69000000
      cc:	00005d2a 	andeq	r5, r0, sl, lsr #26
      d0:	660c4400 	strvs	r4, [ip], -r0, lsl #8
      d4:	2c02006e 	stccs	0, cr0, [r2], {110}	; 0x6e
      d8:	00000117 	andeq	r0, r0, r7, lsl r1
      dc:	72610c48 	rsbvc	r0, r1, #72, 24	; 0x4800
      e0:	2d020067 	stccs	0, cr0, [r2, #-412]	; 0xfffffe64
      e4:	0000007d 	andeq	r0, r0, sp, ror r0
      e8:	006f0b4c 	rsbeq	r0, pc, ip, asr #22
      ec:	2f020000 	svccs	0x00020000
      f0:	0000011d 	andeq	r0, r0, sp, lsl r1
      f4:	5d080050 	stcpl	0, cr0, [r8, #-320]	; 0xfffffec0
      f8:	06000000 	streq	r0, [r0], -r0
      fc:	09000001 	stmdbeq	r0, {r0}
     100:	00000076 	andeq	r0, r0, r6, ror r0
     104:	0406000f 	streq	r0, [r6], #-15
     108:	000000a1 	andeq	r0, r0, r1, lsr #1
     10c:	0001170d 	andeq	r1, r1, sp, lsl #14
     110:	007d0e00 	rsbseq	r0, sp, r0, lsl #28
     114:	06000000 	streq	r0, [r0], -r0
     118:	00010c04 	andeq	r0, r1, r4, lsl #24
     11c:	005d0800 	subseq	r0, sp, r0, lsl #16
     120:	012e0000 	teqeq	lr, r0
     124:	760f0000 	strvc	r0, [pc], -r0
     128:	ff000000 			; <UNDEFINED> instruction: 0xff000000
     12c:	8e040007 	cdphi	0, 0, cr0, cr4, cr7, {0}
     130:	02000001 	andeq	r0, r0, #1
     134:	0000a130 	andeq	sl, r0, r0, lsr r1
     138:	013a1000 	teqeq	sl, r0
     13c:	13010000 	movwne	r0, #4096	; 0x1000
     140:	00008010 	andeq	r8, r0, r0, lsl r0
     144:	000000ac 	andeq	r0, r0, ip, lsr #1
     148:	02209c01 	eoreq	r9, r0, #256	; 0x100
     14c:	61110000 	tstvs	r1, r0
     150:	01006772 	tsteq	r0, r2, ror r7
     154:	00007d13 	andeq	r7, r0, r3, lsl sp
     158:	00000000 	andeq	r0, r0, r0
     15c:	00781200 	rsbseq	r1, r8, r0, lsl #4
     160:	02201401 	eoreq	r1, r0, #16777216	; 0x1000000
     164:	002c0000 	eoreq	r0, ip, r0
     168:	74120000 	ldrvc	r0, [r2], #-0
     16c:	01006469 	tsteq	r0, r9, ror #8
     170:	00002c17 	andeq	r2, r0, r7, lsl ip
     174:	00005800 	andeq	r5, r0, r0, lsl #16
     178:	01461300 	mrseq	r1, SPSR_und
     17c:	02360000 	eorseq	r0, r6, #0
     180:	03050000 	movweq	r0, #20480	; 0x5000
     184:	00009648 	andeq	r9, r0, r8, asr #12
     188:	00802014 	addeq	r2, r0, r4, lsl r0
     18c:	0003d100 	andeq	sp, r3, r0, lsl #2
     190:	80341500 	eorshi	r1, r4, r0, lsl #10
     194:	03e20000 	mvneq	r0, #0
     198:	01ae0000 			; <UNDEFINED> instruction: 0x01ae0000
     19c:	01160000 	tsteq	r6, r0
     1a0:	00740251 	rsbseq	r0, r4, r1, asr r2
     1a4:	05500116 	ldrbeq	r0, [r0, #-278]	; 0x116
     1a8:	00965c03 	addseq	r5, r6, r3, lsl #24
     1ac:	38140000 	ldmdacc	r4, {}	; <UNPREDICTABLE>
     1b0:	d1000080 	smlabble	r0, r0, r0, r0
     1b4:	15000003 	strne	r0, [r0, #-3]
     1b8:	00008068 	andeq	r8, r0, r8, rrx
     1bc:	000003e2 	andeq	r0, r0, r2, ror #7
     1c0:	000001ec 	andeq	r0, r0, ip, ror #3
     1c4:	01530116 	cmpeq	r3, r6, lsl r1
     1c8:	5201164a 	andpl	r1, r1, #77594624	; 0x4a00000
     1cc:	96480305 	strbls	r0, [r8], -r5, lsl #6
     1d0:	01160000 	tsteq	r6, r0
     1d4:	c8030551 	stmdagt	r3, {r0, r4, r6, r8, sl}
     1d8:	16000096 			; <UNDEFINED> instruction: 0x16000096
     1dc:	03055001 	movweq	r5, #20481	; 0x5001
     1e0:	00009674 	andeq	r9, r0, r4, ror r6
     1e4:	007d0216 	rsbseq	r0, sp, r6, lsl r2
     1e8:	00007402 	andeq	r7, r0, r2, lsl #8
     1ec:	00806c14 	addeq	r6, r0, r4, lsl ip
     1f0:	0003f800 	andeq	pc, r3, r0, lsl #16
     1f4:	80701400 	rsbshi	r1, r0, r0, lsl #8
     1f8:	03ff0000 	mvnseq	r0, #0
     1fc:	84140000 	ldrhi	r0, [r4], #-0
     200:	ff000080 			; <UNDEFINED> instruction: 0xff000080
     204:	14000003 	strne	r0, [r0], #-3
     208:	00008098 	muleq	r0, r8, r0
     20c:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     210:	0080a017 	addeq	sl, r0, r7, lsl r0
     214:	00040600 	andeq	r0, r4, r0, lsl #12
     218:	50011600 	andpl	r1, r1, r0, lsl #12
     21c:	00003001 	andeq	r3, r0, r1
     220:	002c0406 	eoreq	r0, ip, r6, lsl #8
     224:	7f080000 	svcvc	0x00080000
     228:	36000000 	strcc	r0, [r0], -r0
     22c:	09000002 	stmdbeq	r0, {r1}
     230:	00000076 	andeq	r0, r0, r6, ror r0
     234:	2607000b 	strcs	r0, [r7], -fp
     238:	18000002 	stmdane	r0, {r1}
     23c:	00000067 	andeq	r0, r0, r7, rrx
     240:	80bc2601 	adcshi	r2, ip, r1, lsl #12
     244:	00f00000 	rscseq	r0, r0, r0
     248:	9c010000 	stcls	0, cr0, [r1], {-0}
     24c:	000003a4 	andeq	r0, r0, r4, lsr #7
     250:	01006e19 	tsteq	r0, r9, lsl lr
     254:	0000252d 	andeq	r2, r0, sp, lsr #10
     258:	73121e00 	tstvc	r2, #0, 28
     25c:	01006d75 	tsteq	r0, r5, ror sp
     260:	00002c30 	andeq	r2, r0, r0, lsr ip
     264:	00006b00 	andeq	r6, r0, r0, lsl #22
     268:	01461300 	mrseq	r1, SPSR_und
     26c:	03a40000 			; <UNDEFINED> instruction: 0x03a40000
     270:	03050000 	movweq	r0, #20480	; 0x5000
     274:	00009654 	andeq	r9, r0, r4, asr r6
     278:	0080e01a 	addeq	lr, r0, sl, lsl r0
     27c:	00003800 	andeq	r3, r0, r0, lsl #16
     280:	0002ca00 	andeq	ip, r2, r0, lsl #20
     284:	00691200 	rsbeq	r1, r9, r0, lsl #4
     288:	00253101 	eoreq	r3, r5, r1, lsl #2
     28c:	008a0000 	addeq	r0, sl, r0
     290:	001b0000 	andseq	r0, fp, r0
     294:	12000000 	andne	r0, r0, #0
     298:	32010078 	andcc	r0, r1, #120	; 0x78
     29c:	000003a9 	andeq	r0, r0, r9, lsr #7
     2a0:	000000a9 	andeq	r0, r0, r9, lsr #1
     2a4:	0080f815 	addeq	pc, r0, r5, lsl r8	; <UNPREDICTABLE>
     2a8:	00041700 	andeq	r1, r4, r0, lsl #14
     2ac:	0002b800 	andeq	fp, r2, r0, lsl #16
     2b0:	50011600 	andpl	r1, r1, r0, lsl #12
     2b4:	00007702 	andeq	r7, r0, r2, lsl #14
     2b8:	00810c17 	addeq	r0, r1, r7, lsl ip
     2bc:	00042c00 	andeq	r2, r4, r0, lsl #24
     2c0:	50011600 	andpl	r1, r1, r0, lsl #12
     2c4:	00007602 	andeq	r7, r0, r2, lsl #12
     2c8:	c4140000 	ldrgt	r0, [r4], #-0
     2cc:	46000080 	strmi	r0, [r0], -r0, lsl #1
     2d0:	14000004 	strne	r0, [r0], #-4
     2d4:	000080c8 	andeq	r8, r0, r8, asr #1
     2d8:	0000044d 	andeq	r0, r0, sp, asr #8
     2dc:	0080d015 	addeq	sp, r0, r5, lsl r0
     2e0:	0003e200 	andeq	lr, r3, r0, lsl #4
     2e4:	0002f300 	andeq	pc, r2, r0, lsl #6
     2e8:	50011600 	andpl	r1, r1, r0, lsl #12
     2ec:	96d80305 	ldrbls	r0, [r8], r5, lsl #6
     2f0:	14000000 	strne	r0, [r0], #-0
     2f4:	0000811c 	andeq	r8, r0, ip, lsl r1
     2f8:	00000454 	andeq	r0, r0, r4, asr r4
     2fc:	00813015 	addeq	r3, r1, r5, lsl r0
     300:	0003e200 	andeq	lr, r3, r0, lsl #4
     304:	00031300 	andeq	r1, r3, r0, lsl #6
     308:	50011600 	andpl	r1, r1, r0, lsl #12
     30c:	97000305 	strls	r0, [r0, -r5, lsl #6]
     310:	15000000 	strne	r0, [r0, #-0]
     314:	00008150 	andeq	r8, r0, r0, asr r1
     318:	000003e2 	andeq	r0, r0, r2, ror #7
     31c:	00000342 	andeq	r0, r0, r2, asr #6
     320:	02530116 	subseq	r0, r3, #-2147483643	; 0x80000005
     324:	01163a08 	tsteq	r6, r8, lsl #20
     328:	54030552 	strpl	r0, [r3], #-1362	; 0x552
     32c:	16000096 			; <UNDEFINED> instruction: 0x16000096
     330:	03055101 	movweq	r5, #20737	; 0x5101
     334:	000096c8 	andeq	r9, r0, r8, asr #13
     338:	05500116 	ldrbeq	r0, [r0, #-278]	; 0x116
     33c:	00971403 	addseq	r1, r7, r3, lsl #8
     340:	54140000 	ldrpl	r0, [r4], #-0
     344:	f8000081 			; <UNDEFINED> instruction: 0xf8000081
     348:	15000003 	strne	r0, [r0, #-3]
     34c:	00008178 	andeq	r8, r0, r8, ror r1
     350:	000003e2 	andeq	r0, r0, r2, ror #7
     354:	0000037a 	andeq	r0, r0, sl, ror r3
     358:	02530116 	subseq	r0, r3, #-2147483643	; 0x80000005
     35c:	01163b08 	tsteq	r6, r8, lsl #22
     360:	54030552 	strpl	r0, [r3], #-1362	; 0x552
     364:	16000096 			; <UNDEFINED> instruction: 0x16000096
     368:	03055101 	movweq	r5, #20737	; 0x5101
     36c:	000096c8 	andeq	r9, r0, r8, asr #13
     370:	05500116 	ldrbeq	r0, [r0, #-278]	; 0x116
     374:	00973803 	addseq	r3, r7, r3, lsl #16
     378:	7c140000 	ldcvc	0, cr0, [r4], {-0}
     37c:	f8000081 			; <UNDEFINED> instruction: 0xf8000081
     380:	15000003 	strne	r0, [r0, #-3]
     384:	00008184 	andeq	r8, r0, r4, lsl #3
     388:	000003e2 	andeq	r0, r0, r2, ror #7
     38c:	0000039a 	muleq	r0, sl, r3
     390:	05500116 	ldrbeq	r0, [r0, #-278]	; 0x116
     394:	00975c03 	addseq	r5, r7, r3, lsl #24
     398:	88140000 	ldmdahi	r4, {}	; <UNPREDICTABLE>
     39c:	5b000081 	blpl	5a8 <_start-0x7a58>
     3a0:	00000004 	andeq	r0, r0, r4
     3a4:	00009107 	andeq	r9, r0, r7, lsl #2
     3a8:	25040600 	strcs	r0, [r4, #-1536]	; 0x600
     3ac:	1c000000 	stcne	0, cr0, [r0], {-0}
     3b0:	00000153 	andeq	r0, r0, r3, asr r1
     3b4:	002c1001 	eoreq	r1, ip, r1
     3b8:	03050000 	movweq	r0, #20480	; 0x5000
     3bc:	00009d60 	andeq	r9, r0, r0, ror #26
     3c0:	00019b1c 	andeq	r9, r1, ip, lsl fp
     3c4:	2c100100 	ldfcss	f0, [r0], {-0}
     3c8:	05000000 	streq	r0, [r0, #-0]
     3cc:	009d6403 	addseq	r6, sp, r3, lsl #8
     3d0:	01e51d00 	mvneq	r1, r0, lsl #26
     3d4:	40020000 	andmi	r0, r2, r0
     3d8:	000003dc 	ldrdeq	r0, [r0], -ip
     3dc:	012e0406 	teqeq	lr, r6, lsl #8
     3e0:	3b1e0000 	blcc	7803e8 <__bss_end__+0x776250>
     3e4:	04000004 	streq	r0, [r0], #-4
     3e8:	00002527 	andeq	r2, r0, r7, lsr #10
     3ec:	0003f800 	andeq	pc, r3, r0, lsl #16
     3f0:	00860e00 	addeq	r0, r6, r0, lsl #28
     3f4:	001f0000 	andseq	r0, pc, r0
     3f8:	00000520 	andeq	r0, r0, r0, lsr #10
     3fc:	205c0400 	subscs	r0, ip, r0, lsl #8
     400:	000001a6 	andeq	r0, r0, r6, lsr #3
     404:	60213902 	eorvs	r3, r1, r2, lsl #18
     408:	02000001 	andeq	r0, r0, #1
     40c:	00041736 	andeq	r1, r4, r6, lsr r7
     410:	00250e00 	eoreq	r0, r5, r0, lsl #28
     414:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     418:	00000111 	andeq	r0, r0, r1, lsl r1
     41c:	007d6604 	rsbseq	r6, sp, r4, lsl #12
     420:	042c0000 	strteq	r0, [ip], #-0
     424:	2c0e0000 	stccs	0, cr0, [lr], {-0}
     428:	00000000 	andeq	r0, r0, r0
     42c:	00009a1e 	andeq	r9, r0, lr, lsl sl
     430:	dc330200 	lfmle	f0, 4, [r3], #-0
     434:	46000003 	strmi	r0, [r0], -r3
     438:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
     43c:	00000117 	andeq	r0, r0, r7, lsl r1
     440:	00007d0e 	andeq	r7, r0, lr, lsl #26
     444:	75200000 	strvc	r0, [r0, #-0]!
     448:	04000000 	streq	r0, [r0], #-0
     44c:	01f42038 	mvnseq	r2, r8, lsr r0
     450:	6a040000 	bvs	100458 <__bss_end__+0xf62c0>
     454:	00011920 	andeq	r1, r1, r0, lsr #18
     458:	203d0200 	eorscs	r0, sp, r0, lsl #4
     45c:	0000008d 	andeq	r0, r0, sp, lsl #1
     460:	a3005f04 	movwge	r5, #3844	; 0xf04
     464:	04000008 	streq	r0, [r0], #-8
     468:	0001b100 	andeq	fp, r1, r0, lsl #2
     46c:	10010400 	andne	r0, r1, r0, lsl #8
     470:	01000000 	mrseq	r0, (UNDEF: 0)
     474:	00000208 	andeq	r0, r0, r8, lsl #4
     478:	000000a3 	andeq	r0, r0, r3, lsr #1
     47c:	000081ac 	andeq	r8, r0, ip, lsr #3
     480:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     484:	00000146 	andeq	r0, r0, r6, asr #2
     488:	69050402 	stmdbvs	r5, {r1, sl}
     48c:	0300746e 	movweq	r7, #1134	; 0x46e
     490:	01810704 	orreq	r0, r1, r4, lsl #14
     494:	01030000 	mrseq	r0, (UNDEF: 3)
     498:	00008106 	andeq	r8, r0, r6, lsl #2
     49c:	05020300 	streq	r0, [r2, #-768]	; 0x300
     4a0:	000001d2 	ldrdeq	r0, [r0], -r2
     4a4:	be050403 	cdplt	4, 0, cr0, cr5, cr3, {0}
     4a8:	03000001 	movweq	r0, #1
     4ac:	01b90508 			; <UNDEFINED> instruction: 0x01b90508
     4b0:	01030000 	mrseq	r0, (UNDEF: 3)
     4b4:	00007f08 	andeq	r7, r0, r8, lsl #30
     4b8:	07020300 	streq	r0, [r2, -r0, lsl #6]
     4bc:	000000fe 	strdeq	r0, [r0], -lr
     4c0:	0001dc04 	andeq	sp, r1, r4, lsl #24
     4c4:	68340400 	ldmdavs	r4!, {sl}
     4c8:	03000000 	movweq	r0, #0
     4cc:	017c0704 	cmneq	ip, r4, lsl #14
     4d0:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     4d4:	00017707 	andeq	r7, r1, r7, lsl #14
     4d8:	07040300 	streq	r0, [r4, -r0, lsl #6]
     4dc:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
     4e0:	01030405 	tsteq	r3, r5, lsl #8
     4e4:	00008808 	andeq	r8, r0, r8, lsl #16
     4e8:	8c040600 	stchi	6, cr0, [r4], {-0}
     4ec:	07000000 	streq	r0, [r0, -r0]
     4f0:	0000007f 	andeq	r0, r0, pc, ror r0
     4f4:	00007f08 	andeq	r7, r0, r8, lsl #30
     4f8:	0000a100 	andeq	sl, r0, r0, lsl #2
     4fc:	00760900 	rsbseq	r0, r6, r0, lsl #18
     500:	00070000 	andeq	r0, r7, r0
     504:	0001c70a 	andeq	ip, r1, sl, lsl #14
     508:	03205000 	teqeq	r0, #0
     50c:	0000f625 	andeq	pc, r0, r5, lsr #12
     510:	01690b00 	cmneq	r9, r0, lsl #22
     514:	27030000 	strcs	r0, [r3, -r0]
     518:	000000f6 	strdeq	r0, [r0], -r6
     51c:	00000b00 	andeq	r0, r0, r0, lsl #22
     520:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
     524:	00000106 	andeq	r0, r0, r6, lsl #2
     528:	69740c40 	ldmdbvs	r4!, {r6, sl, fp}^
     52c:	2a030064 	bcs	c06c4 <__bss_end__+0xb652c>
     530:	0000005d 	andeq	r0, r0, sp, asr r0
     534:	6e660c44 	cdpvs	12, 6, cr0, cr6, cr4, {2}
     538:	172c0300 	strne	r0, [ip, -r0, lsl #6]!
     53c:	48000001 	stmdami	r0, {r0}
     540:	6772610c 	ldrbvs	r6, [r2, -ip, lsl #2]!
     544:	7d2d0300 	stcvc	3, cr0, [sp, #-0]
     548:	4c000000 	stcmi	0, cr0, [r0], {-0}
     54c:	00006f0b 	andeq	r6, r0, fp, lsl #30
     550:	1d2f0300 	stcne	3, cr0, [pc, #-0]	; 558 <_start-0x7aa8>
     554:	50000001 	andpl	r0, r0, r1
     558:	005d0800 	subseq	r0, sp, r0, lsl #16
     55c:	01060000 	mrseq	r0, (UNDEF: 6)
     560:	76090000 	strvc	r0, [r9], -r0
     564:	0f000000 	svceq	0x00000000
     568:	a1040600 	tstge	r4, r0, lsl #12
     56c:	0d000000 	stceq	0, cr0, [r0, #-0]
     570:	00000117 	andeq	r0, r0, r7, lsl r1
     574:	00007d0e 	andeq	r7, r0, lr, lsl #26
     578:	04060000 	streq	r0, [r6], #-0
     57c:	0000010c 	andeq	r0, r0, ip, lsl #2
     580:	00005d08 	andeq	r5, r0, r8, lsl #26
     584:	00012e00 	andeq	r2, r1, r0, lsl #28
     588:	00760f00 	rsbseq	r0, r6, r0, lsl #30
     58c:	07ff0000 	ldrbeq	r0, [pc, r0]!
     590:	018e0400 	orreq	r0, lr, r0, lsl #8
     594:	30030000 	andcc	r0, r3, r0
     598:	000000a1 	andeq	r0, r0, r1, lsr #1
     59c:	0c005110 	stfeqs	f5, [r0], {16}
     5a0:	01680801 	cmneq	r8, r1, lsl #16
     5a4:	e30b0000 	movw	r0, #45056	; 0xb000
     5a8:	01000002 	tsteq	r0, r2
     5ac:	00016809 	andeq	r6, r1, r9, lsl #16
     5b0:	c40b0000 	strgt	r0, [fp], #-0
     5b4:	01000002 	tsteq	r0, r2
     5b8:	00016809 	andeq	r6, r1, r9, lsl #16
     5bc:	630c0400 	movwvs	r0, #50176	; 0xc400
     5c0:	0100746e 	tsteq	r0, lr, ror #8
     5c4:	00002c0a 	andeq	r2, r0, sl, lsl #24
     5c8:	06000800 	streq	r0, [r0], -r0, lsl #16
     5cc:	00012e04 	andeq	r2, r1, r4, lsl #28
     5d0:	5f511100 	svcpl	0x00511100
     5d4:	0b010074 	bleq	407ac <__bss_end__+0x36614>
     5d8:	00000139 	andeq	r0, r0, r9, lsr r1
     5dc:	00025312 	andeq	r5, r2, r2, lsl r3
     5e0:	2c100100 	ldfcss	f0, [r0], {-0}
     5e4:	ac000000 	stcge	0, cr0, [r0], {-0}
     5e8:	08000081 	stmdaeq	r0, {r0, r7}
     5ec:	01000000 	mrseq	r0, (UNDEF: 0)
     5f0:	0001a09c 	muleq	r1, ip, r0
     5f4:	00711300 	rsbseq	r1, r1, r0, lsl #6
     5f8:	01a01001 	moveq	r1, r1
     5fc:	00c70000 	sbceq	r0, r7, r0
     600:	06000000 	streq	r0, [r0], -r0
     604:	00016e04 	andeq	r6, r1, r4, lsl #28
     608:	02da1400 	sbcseq	r1, sl, #0, 8
     60c:	2b010000 	blcs	40614 <__bss_end__+0x3647c>
     610:	000081b4 			; <UNDEFINED> instruction: 0x000081b4
     614:	00000038 	andeq	r0, r0, r8, lsr r0
     618:	01d29c01 	bicseq	r9, r2, r1, lsl #24
     61c:	71150000 	tstvc	r5, r0
     620:	a02b0100 	eorge	r0, fp, r0, lsl #2
     624:	01000001 	tsteq	r0, r1
     628:	00651550 	rsbeq	r1, r5, r0, asr r5
     62c:	01682b01 	cmneq	r8, r1, lsl #22
     630:	51010000 	mrspl	r0, (UNDEF: 1)
     634:	02011400 	andeq	r1, r1, #0, 8
     638:	37010000 	strcc	r0, [r1, -r0]
     63c:	000081ec 	andeq	r8, r0, ip, ror #3
     640:	00000028 	andeq	r0, r0, r8, lsr #32
     644:	01fe9c01 	mvnseq	r9, r1, lsl #24
     648:	71150000 	tstvc	r5, r0
     64c:	a0370100 	eorsge	r0, r7, r0, lsl #2
     650:	01000001 	tsteq	r0, r1
     654:	00651550 	rsbeq	r1, r5, r0, asr r5
     658:	01683701 	cmneq	r8, r1, lsl #14
     65c:	51010000 	mrspl	r0, (UNDEF: 1)
     660:	02d21400 	sbcseq	r1, r2, #0, 8
     664:	29020000 	stmdbcs	r2, {}	; <UNPREDICTABLE>
     668:	00008214 	andeq	r8, r0, r4, lsl r2
     66c:	00000018 	andeq	r0, r0, r8, lsl r0
     670:	023c9c01 	eorseq	r9, ip, #256	; 0x100
     674:	74130000 	ldrvc	r0, [r3], #-0
     678:	29020068 	stmdbcs	r2, {r3, r5, r6}
     67c:	00000168 	andeq	r0, r0, r8, ror #2
     680:	000000e8 	andeq	r0, r0, r8, ror #1
     684:	00822416 	addeq	r2, r2, r6, lsl r4
     688:	0001d200 	andeq	sp, r1, r0, lsl #4
     68c:	51011700 	tstpl	r1, r0, lsl #14
     690:	5001f303 	andpl	pc, r1, r3, lsl #6
     694:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     698:	009d6803 	addseq	r6, sp, r3, lsl #16
     69c:	12000000 	andne	r0, r0, #0
     6a0:	000002a5 	andeq	r0, r0, r5, lsr #5
     6a4:	00251201 	eoreq	r1, r5, r1, lsl #4
     6a8:	822c0000 	eorhi	r0, ip, #0
     6ac:	007c0000 	rsbseq	r0, ip, r0
     6b0:	9c010000 	stcls	0, cr0, [r1], {-0}
     6b4:	000002f4 	strdeq	r0, [r0], -r4
     6b8:	01007113 	tsteq	r0, r3, lsl r1
     6bc:	0001a012 	andeq	sl, r1, r2, lsl r0
     6c0:	00011400 	andeq	r1, r1, r0, lsl #8
     6c4:	01461800 	cmpeq	r6, r0, lsl #16
     6c8:	02f40000 	rscseq	r0, r4, #0
     6cc:	03050000 	movweq	r0, #20480	; 0x5000
     6d0:	00009768 	andeq	r9, r0, r8, ror #14
     6d4:	00824419 	addeq	r4, r2, r9, lsl r4
     6d8:	00017900 	andeq	r7, r1, r0, lsl #18
     6dc:	00028500 	andeq	r8, r2, r0, lsl #10
     6e0:	50011700 	andpl	r1, r1, r0, lsl #14
     6e4:	00007402 	andeq	r7, r0, r2, lsl #8
     6e8:	00826019 	addeq	r6, r2, r9, lsl r0
     6ec:	00087300 	andeq	r7, r8, r0, lsl #6
     6f0:	0002b300 	andeq	fp, r2, r0, lsl #6
     6f4:	53011700 	movwpl	r1, #5888	; 0x1700
     6f8:	01174501 	tsteq	r7, r1, lsl #10
     6fc:	68030552 	stmdavs	r3, {r1, r4, r6, r8, sl}
     700:	17000097 			; <UNDEFINED> instruction: 0x17000097
     704:	03055101 	movweq	r5, #20737	; 0x5101
     708:	000097e4 	andeq	r9, r0, r4, ror #15
     70c:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     710:	0097c403 	addseq	ip, r7, r3, lsl #8
     714:	641a0000 	ldrvs	r0, [sl], #-0
     718:	89000082 	stmdbhi	r0, {r1, r7}
     71c:	19000008 	stmdbne	r0, {r3}
     720:	00008284 	andeq	r8, r0, r4, lsl #5
     724:	00000873 	andeq	r0, r0, r3, ror r8
     728:	000002ea 	andeq	r0, r0, sl, ror #5
     72c:	01530117 	cmpeq	r3, r7, lsl r1
     730:	52011746 	andpl	r1, r1, #18350080	; 0x1180000
     734:	97680305 	strbls	r0, [r8, -r5, lsl #6]!
     738:	01170000 	tsteq	r7, r0
     73c:	e4030551 	str	r0, [r3], #-1361	; 0x551
     740:	17000097 			; <UNDEFINED> instruction: 0x17000097
     744:	03055001 	movweq	r5, #20481	; 0x5001
     748:	000097e8 	andeq	r9, r0, r8, ror #15
     74c:	82881a00 	addhi	r1, r8, #0, 20
     750:	08890000 	stmeq	r9, {}	; <UNPREDICTABLE>
     754:	07000000 	streq	r0, [r0, -r0]
     758:	00000091 	muleq	r0, r1, r0
     75c:	0002ad12 	andeq	sl, r2, r2, lsl sp
     760:	681b0100 	ldmdavs	fp, {r8}
     764:	a8000001 	stmdage	r0, {r0}
     768:	90000082 	andls	r0, r0, r2, lsl #1
     76c:	01000000 	mrseq	r0, (UNDEF: 0)
     770:	0003c09c 	muleq	r3, ip, r0
     774:	00711300 	rsbseq	r1, r1, r0, lsl #6
     778:	01a01b01 	lsleq	r1, r1, #22
     77c:	01480000 	mrseq	r0, (UNDEF: 72)
     780:	46180000 	ldrmi	r0, [r8], -r0
     784:	d0000001 	andle	r0, r0, r1
     788:	05000003 	streq	r0, [r0, #-3]
     78c:	00977003 	addseq	r7, r7, r3
     790:	00651b00 	rsbeq	r1, r5, r0, lsl #22
     794:	01681e01 	cmneq	r8, r1, lsl #28
     798:	019b0000 	orrseq	r0, fp, r0
     79c:	c8190000 	ldmdagt	r9, {}	; <UNPREDICTABLE>
     7a0:	73000082 	movwvc	r0, #130	; 0x82
     7a4:	69000008 	stmdbvs	r0, {r3}
     7a8:	17000003 	strne	r0, [r0, -r3]
     7ac:	4c015301 	stcmi	3, cr5, [r1], {1}
     7b0:	05520117 	ldrbeq	r0, [r2, #-279]	; 0x117
     7b4:	00977003 	addseq	r7, r7, r3
     7b8:	51011700 	tstpl	r1, r0, lsl #14
     7bc:	97e40305 	strbls	r0, [r4, r5, lsl #6]!
     7c0:	01170000 	tsteq	r7, r0
     7c4:	18030550 	stmdane	r3, {r4, r6, r8, sl}
     7c8:	00000098 	muleq	r0, r8, r0
     7cc:	0082cc1a 	addeq	ip, r2, sl, lsl ip
     7d0:	00088900 	andeq	r8, r8, r0, lsl #18
     7d4:	82dc1900 	sbcshi	r1, ip, #0, 18
     7d8:	023c0000 	eorseq	r0, ip, #0
     7dc:	03870000 	orreq	r0, r7, #0
     7e0:	01170000 	tsteq	r7, r0
     7e4:	01f30350 	mvnseq	r0, r0, asr r3
     7e8:	f8190050 			; <UNDEFINED> instruction: 0xf8190050
     7ec:	73000082 	movwvc	r0, #130	; 0x82
     7f0:	b6000008 	strlt	r0, [r0], -r8
     7f4:	17000003 	strne	r0, [r0, -r3]
     7f8:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     7fc:	52011720 	andpl	r1, r1, #32, 14	; 0x800000
     800:	97700305 	ldrbls	r0, [r0, -r5, lsl #6]!
     804:	01170000 	tsteq	r7, r0
     808:	e4030551 	str	r0, [r3], #-1361	; 0x551
     80c:	17000097 			; <UNDEFINED> instruction: 0x17000097
     810:	03055001 	movweq	r5, #20481	; 0x5001
     814:	00009840 	andeq	r9, r0, r0, asr #16
     818:	82fc1a00 	rscshi	r1, ip, #0, 20
     81c:	08890000 	stmeq	r9, {}	; <UNPREDICTABLE>
     820:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     824:	0000007f 	andeq	r0, r0, pc, ror r0
     828:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     82c:	00007609 	andeq	r7, r0, r9, lsl #12
     830:	07000500 	streq	r0, [r0, -r0, lsl #10]
     834:	000003c0 	andeq	r0, r0, r0, asr #7
     838:	0002c912 	andeq	ip, r2, r2, lsl r9
     83c:	681c0200 	ldmdavs	ip, {r9}
     840:	38000001 	stmdacc	r0, {r0}
     844:	80000083 	andhi	r0, r0, r3, lsl #1
     848:	01000000 	mrseq	r0, (UNDEF: 0)
     84c:	0004749c 	muleq	r4, ip, r4
     850:	00741b00 	rsbseq	r1, r4, r0, lsl #22
     854:	01681d02 	cmneq	r8, r2, lsl #26
     858:	01b90000 			; <UNDEFINED> instruction: 0x01b90000
     85c:	46180000 	ldrmi	r0, [r8], -r0
     860:	84000001 	strhi	r0, [r0], #-1
     864:	05000004 	streq	r0, [r0, #-4]
     868:	00977803 	addseq	r7, r7, r3, lsl #16
     86c:	83441900 	movthi	r1, #18688	; 0x4900
     870:	02f90000 	rscseq	r0, r9, #0
     874:	04210000 	strteq	r0, [r1], #-0
     878:	01170000 	tsteq	r7, r0
     87c:	68030550 	stmdavs	r3, {r4, r6, r8, sl}
     880:	0000009d 	muleq	r0, sp, r0
     884:	00835819 	addeq	r5, r3, r9, lsl r8
     888:	00089000 	andeq	r9, r8, r0
     88c:	00043b00 	andeq	r3, r4, r0, lsl #22
     890:	51011700 	tstpl	r1, r0, lsl #14
     894:	01173801 	tsteq	r7, r1, lsl #16
     898:	500a0350 	andpl	r0, sl, r0, asr r3
     89c:	84190020 	ldrhi	r0, [r9], #-32
     8a0:	73000083 	movwvc	r0, #131	; 0x83
     8a4:	6a000008 	bvs	8cc <_start-0x7734>
     8a8:	17000004 	strne	r0, [r0, -r4]
     8ac:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     8b0:	52011724 	andpl	r1, r1, #36, 14	; 0x900000
     8b4:	97780305 	ldrbls	r0, [r8, -r5, lsl #6]!
     8b8:	01170000 	tsteq	r7, r0
     8bc:	bc030551 	cfstr32lt	mvfx0, [r3], {81}	; 0x51
     8c0:	17000098 			; <UNDEFINED> instruction: 0x17000098
     8c4:	03055001 	movweq	r5, #20481	; 0x5001
     8c8:	0000985c 	andeq	r9, r0, ip, asr r8
     8cc:	83881a00 	orrhi	r1, r8, #0, 20
     8d0:	08890000 	stmeq	r9, {}	; <UNPREDICTABLE>
     8d4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     8d8:	0000007f 	andeq	r0, r0, pc, ror r0
     8dc:	00000484 	andeq	r0, r0, r4, lsl #9
     8e0:	00007609 	andeq	r7, r0, r9, lsl #12
     8e4:	07000800 	streq	r0, [r0, -r0, lsl #16]
     8e8:	00000474 	andeq	r0, r0, r4, ror r4
     8ec:	0001e51c 	andeq	lr, r1, ip, lsl r5
     8f0:	68150200 	ldmdavs	r5, {r9}
     8f4:	b8000001 	stmdalt	r0, {r0}
     8f8:	10000083 	andne	r0, r0, r3, lsl #1
     8fc:	01000000 	mrseq	r0, (UNDEF: 0)
     900:	009a1d9c 	umullseq	r1, sl, ip, sp
     904:	33020000 	movwcc	r0, #8192	; 0x2000
     908:	00000168 	andeq	r0, r0, r8, ror #2
     90c:	000083c8 	andeq	r8, r0, r8, asr #7
     910:	00000034 	andeq	r0, r0, r4, lsr r0
     914:	050c9c01 	streq	r9, [ip, #-3073]	; 0xc01
     918:	411e0000 	tstmi	lr, r0
     91c:	02000001 	andeq	r0, r0, #1
     920:	00011733 	andeq	r1, r1, r3, lsr r7
     924:	0001e200 	andeq	lr, r1, r0, lsl #4
     928:	72611300 	rsbvc	r1, r1, #0, 6
     92c:	33020067 	movwcc	r0, #8295	; 0x2067
     930:	0000007d 	andeq	r0, r0, sp, ror r0
     934:	00000200 	andeq	r0, r0, r0, lsl #4
     938:	0200741b 	andeq	r7, r0, #452984832	; 0x1b000000
     93c:	00016834 	andeq	r6, r1, r4, lsr r8
     940:	00021e00 	andeq	r1, r2, r0, lsl #28
     944:	025b1f00 	subseq	r1, fp, #0, 30
     948:	3b020000 	blcc	80950 <__bss_end__+0x767b8>
     94c:	0083d81a 	addeq	sp, r3, sl, lsl r8
     950:	0003d500 	andeq	sp, r3, r0, lsl #10
     954:	83f01600 	mvnshi	r1, #0, 12
     958:	01a60000 			; <UNDEFINED> instruction: 0x01a60000
     95c:	01170000 	tsteq	r7, r0
     960:	00740251 	rsbseq	r0, r4, r1, asr r2
     964:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     968:	009d7c03 	addseq	r7, sp, r3, lsl #24
     96c:	20000000 	andcs	r0, r0, r0
     970:	00000160 	andeq	r0, r0, r0, ror #2
     974:	83fc4502 	mvnshi	r4, #8388608	; 0x800000
     978:	00040000 	andeq	r0, r4, r0
     97c:	9c010000 	stcls	0, cr0, [r1], {-0}
     980:	0000052f 	andeq	r0, r0, pc, lsr #10
     984:	00021e21 	andeq	r1, r2, r1, lsr #28
     988:	25450200 	strbcs	r0, [r5, #-512]	; 0x200
     98c:	01000000 	mrseq	r0, (UNDEF: 0)
     990:	a6220050 			; <UNDEFINED> instruction: 0xa6220050
     994:	02000001 	andeq	r0, r0, #1
     998:	00840053 	addeq	r0, r4, r3, asr r0
     99c:	00000400 	andeq	r0, r0, r0, lsl #8
     9a0:	209c0100 	addscs	r0, ip, r0, lsl #2
     9a4:	00000240 	andeq	r0, r0, r0, asr #4
     9a8:	84047f02 	strhi	r7, [r4], #-3842	; 0xf02
     9ac:	00900000 	addseq	r0, r0, r0
     9b0:	9c010000 	stcls	0, cr0, [r1], {-0}
     9b4:	00000621 	andeq	r0, r0, r1, lsr #12
     9b8:	00023923 	andeq	r3, r2, r3, lsr #18
     9bc:	2c820200 	sfmcs	f0, 4, [r2], {0}
     9c0:	3c000000 	stccc	0, cr0, [r0], {-0}
     9c4:	23000002 	movwcs	r0, #2
     9c8:	00000233 	andeq	r0, r0, r3, lsr r2
     9cc:	002c8302 	eoreq	r8, ip, r2, lsl #6
     9d0:	025a0000 	subseq	r0, sl, #0
     9d4:	6e1b0000 	cdpvs	0, 1, cr0, cr11, cr0, {0}
     9d8:	2c840200 	sfmcs	f0, 4, [r4], {0}
     9dc:	84000000 	strhi	r0, [r0], #-0
     9e0:	18000002 	stmdane	r0, {r1}
     9e4:	00000146 	andeq	r0, r0, r6, asr #2
     9e8:	00000631 	andeq	r0, r0, r1, lsr r6
     9ec:	97840305 	strls	r0, [r4, r5, lsl #6]
     9f0:	18190000 	ldmdane	r9, {}	; <UNPREDICTABLE>
     9f4:	79000084 	stmdbvc	r0, {r2, r7}
     9f8:	a3000001 	movwge	r0, #1
     9fc:	17000005 	strne	r0, [r0, -r5]
     a00:	74025001 	strvc	r5, [r2], #-1
     a04:	24190000 	ldrcs	r0, [r9], #-0
     a08:	79000084 	stmdbvc	r0, {r2, r7}
     a0c:	b7000001 	strlt	r0, [r0, -r1]
     a10:	17000005 	strne	r0, [r0, -r5]
     a14:	74025001 	strvc	r5, [r2], #-1
     a18:	58190014 	ldmdapl	r9, {r2, r4}
     a1c:	73000084 	movwvc	r0, #132	; 0x84
     a20:	ed000008 	stc	0, cr0, [r0, #-32]	; 0xffffffe0
     a24:	17000005 	strne	r0, [r0, -r5]
     a28:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     a2c:	52011788 	andpl	r1, r1, #136, 14	; 0x2200000
     a30:	97840305 	strls	r0, [r4, r5, lsl #6]
     a34:	01170000 	tsteq	r7, r0
     a38:	bc030551 	cfstr32lt	mvfx0, [r3], {81}	; 0x51
     a3c:	17000098 			; <UNDEFINED> instruction: 0x17000098
     a40:	03055001 	movweq	r5, #20481	; 0x5001
     a44:	000098cc 	andeq	r9, r0, ip, asr #17
     a48:	087d0217 	ldmdaeq	sp!, {r0, r1, r2, r4, r9}^
     a4c:	00007502 	andeq	r7, r0, r2, lsl #10
     a50:	00845c1a 	addeq	r5, r4, sl, lsl ip
     a54:	00088900 	andeq	r8, r8, r0, lsl #18
     a58:	84641900 	strbthi	r1, [r4], #-2304	; 0x900
     a5c:	023c0000 	eorseq	r0, ip, #0
     a60:	060d0000 	streq	r0, [sp], -r0
     a64:	01170000 	tsteq	r7, r0
     a68:	7c030550 	cfstr32vc	mvfx0, [r3], {80}	; 0x50
     a6c:	0000009d 	muleq	r0, sp, r0
     a70:	00847416 	addeq	r7, r4, r6, lsl r4
     a74:	00087300 	andeq	r7, r8, r0, lsl #6
     a78:	50011700 	andpl	r1, r1, r0, lsl #14
     a7c:	99240305 	stmdbls	r4!, {r0, r2, r8, r9}
     a80:	00000000 	andeq	r0, r0, r0
     a84:	00007f08 	andeq	r7, r0, r8, lsl #30
     a88:	00063100 	andeq	r3, r6, r0, lsl #2
     a8c:	00760900 	rsbseq	r0, r6, r0, lsl #18
     a90:	00120000 	andseq	r0, r2, r0
     a94:	00062107 	andeq	r2, r6, r7, lsl #2
     a98:	01192400 	tsteq	r9, r0, lsl #8
     a9c:	61020000 	mrsvs	r0, (UNDEF: 2)
     aa0:	00008494 	muleq	r0, r4, r4
     aa4:	00000070 	andeq	r0, r0, r0, ror r0
     aa8:	06ba9c01 	ldrteq	r9, [sl], r1, lsl #24
     aac:	27250000 	strcs	r0, [r5, -r0]!
     ab0:	02000002 	andeq	r0, r0, #2
     ab4:	00016874 	andeq	r6, r1, r4, ror r8
     ab8:	84a01900 	strthi	r1, [r0], #2304	; 0x900
     abc:	023c0000 	eorseq	r0, ip, #0
     ac0:	066d0000 	strbteq	r0, [sp], -r0
     ac4:	01170000 	tsteq	r7, r0
     ac8:	7c030550 	cfstr32vc	mvfx0, [r3], {80}	; 0x50
     acc:	0000009d 	muleq	r0, sp, r0
     ad0:	0084ac1a 	addeq	sl, r4, sl, lsl ip
     ad4:	00054000 	andeq	r4, r5, r0
     ad8:	84b01a00 	ldrthi	r1, [r0], #2560	; 0xa00
     adc:	03d50000 	bicseq	r0, r5, #0
     ae0:	d8190000 	ldmdale	r9, {}	; <UNPREDICTABLE>
     ae4:	fe000084 	cdp2	0, 0, cr0, cr0, cr4, {4}
     ae8:	92000001 	andls	r0, r0, #1
     aec:	17000006 	strne	r0, [r0, -r6]
     af0:	30015001 	andcc	r5, r1, r1
     af4:	84e01900 	strbthi	r1, [r0], #2304	; 0x900
     af8:	02f90000 	rscseq	r0, r9, #0
     afc:	06a60000 	strteq	r0, [r6], r0
     b00:	01170000 	tsteq	r7, r0
     b04:	00750250 	rsbseq	r0, r5, r0, asr r2
     b08:	84f41600 	ldrbthi	r1, [r4], #1536	; 0x600
     b0c:	08730000 	ldmdaeq	r3!, {}^	; <UNPREDICTABLE>
     b10:	01170000 	tsteq	r7, r0
     b14:	44030550 	strmi	r0, [r3], #-1360	; 0x550
     b18:	00000099 	muleq	r0, r9, r0
     b1c:	027f2000 	rsbseq	r2, pc, #0
     b20:	95020000 	strls	r0, [r2, #-0]
     b24:	00008504 	andeq	r8, r0, r4, lsl #10
     b28:	00000028 	andeq	r0, r0, r8, lsr #32
     b2c:	07179c01 	ldreq	r9, [r7, -r1, lsl #24]
     b30:	46180000 	ldrmi	r0, [r8], -r0
     b34:	27000001 	strcs	r0, [r0, -r1]
     b38:	05000007 	streq	r0, [r0, #-7]
     b3c:	00979803 	addseq	r9, r7, r3, lsl #16
     b40:	851c1900 	ldrhi	r1, [ip, #-2304]	; 0x900
     b44:	08730000 	ldmdaeq	r3!, {}^	; <UNPREDICTABLE>
     b48:	070d0000 	streq	r0, [sp, -r0]
     b4c:	01170000 	tsteq	r7, r0
     b50:	96080253 			; <UNDEFINED> instruction: 0x96080253
     b54:	05520117 	ldrbeq	r0, [r2, #-279]	; 0x117
     b58:	00979803 	addseq	r9, r7, r3, lsl #16
     b5c:	51011700 	tstpl	r1, r0, lsl #14
     b60:	98bc0305 	ldmls	ip!, {r0, r2, r8, r9}
     b64:	01170000 	tsteq	r7, r0
     b68:	74030550 	strvc	r0, [r3], #-1360	; 0x550
     b6c:	00000099 	muleq	r0, r9, r0
     b70:	0085201a 	addeq	r2, r5, sl, lsl r0
     b74:	00088900 	andeq	r8, r8, r0, lsl #18
     b78:	7f080000 	svcvc	0x00080000
     b7c:	27000000 	strcs	r0, [r0, -r0]
     b80:	09000007 	stmdbeq	r0, {r0, r1, r2}
     b84:	00000076 	andeq	r0, r0, r6, ror r0
     b88:	1707000f 	strne	r0, [r7, -pc]
     b8c:	20000007 	andcs	r0, r0, r7
     b90:	00000215 	andeq	r0, r0, r5, lsl r2
     b94:	852c9e02 	strhi	r9, [ip, #-3586]!	; 0xe02
     b98:	00280000 	eoreq	r0, r8, r0
     b9c:	9c010000 	stcls	0, cr0, [r1], {-0}
     ba0:	00000797 	muleq	r0, r7, r7
     ba4:	00687413 	rsbeq	r7, r8, r3, lsl r4
     ba8:	01689e02 	cmneq	r8, r2, lsl #28
     bac:	02ae0000 	adceq	r0, lr, #0
     bb0:	46180000 	ldrmi	r0, [r8], -r0
     bb4:	97000001 	strls	r0, [r0, -r1]
     bb8:	05000007 	streq	r0, [r0, #-7]
     bbc:	0097a803 	addseq	sl, r7, r3, lsl #16
     bc0:	85441900 	strbhi	r1, [r4, #-2304]	; 0x900
     bc4:	08730000 	ldmdaeq	r3!, {}^	; <UNPREDICTABLE>
     bc8:	078d0000 	streq	r0, [sp, r0]
     bcc:	01170000 	tsteq	r7, r0
     bd0:	9f080253 	svcls	0x00080253
     bd4:	05520117 	ldrbeq	r0, [r2, #-279]	; 0x117
     bd8:	0097a803 	addseq	sl, r7, r3, lsl #16
     bdc:	51011700 	tstpl	r1, r0, lsl #14
     be0:	98bc0305 	ldmls	ip!, {r0, r2, r8, r9}
     be4:	01170000 	tsteq	r7, r0
     be8:	74030550 	strvc	r0, [r3], #-1360	; 0x550
     bec:	00000099 	muleq	r0, r9, r0
     bf0:	0085481a 	addeq	r4, r5, sl, lsl r8
     bf4:	00088900 	andeq	r8, r8, r0, lsl #18
     bf8:	74070000 	strvc	r0, [r7], #-0
     bfc:	20000004 	andcs	r0, r0, r4
     c00:	00000295 	muleq	r0, r5, r2
     c04:	8554a502 	ldrbhi	sl, [r4, #-1282]	; 0x502
     c08:	00280000 	eoreq	r0, r8, r0
     c0c:	9c010000 	stcls	0, cr0, [r1], {-0}
     c10:	00000808 	andeq	r0, r0, r8, lsl #16
     c14:	0005f61e 	andeq	pc, r5, lr, lsl r6	; <UNPREDICTABLE>
     c18:	5da50200 	sfmpl	f0, 4, [r5]
     c1c:	cf000000 	svcgt	0x00000000
     c20:	18000002 	stmdane	r0, {r1}
     c24:	00000146 	andeq	r0, r0, r6, asr #2
     c28:	00000808 	andeq	r0, r0, r8, lsl #16
     c2c:	97b40305 	ldrls	r0, [r4, r5, lsl #6]!
     c30:	6c190000 	ldcvs	0, cr0, [r9], {-0}
     c34:	73000085 	movwvc	r0, #133	; 0x85
     c38:	fe000008 	cdp2	0, 0, cr0, cr0, cr8, {0}
     c3c:	17000007 	strne	r0, [r0, -r7]
     c40:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     c44:	520117a6 	andpl	r1, r1, #43515904	; 0x2980000
     c48:	97b40305 	ldrls	r0, [r4, r5, lsl #6]!
     c4c:	01170000 	tsteq	r7, r0
     c50:	bc030551 	cfstr32lt	mvfx0, [r3], {81}	; 0x51
     c54:	17000098 			; <UNDEFINED> instruction: 0x17000098
     c58:	03055001 	movweq	r5, #20481	; 0x5001
     c5c:	00009974 	andeq	r9, r0, r4, ror r9
     c60:	85701a00 	ldrbhi	r1, [r0, #-2560]!	; 0xa00
     c64:	08890000 	stmeq	r9, {}	; <UNPREDICTABLE>
     c68:	07000000 	streq	r0, [r0, -r0]
     c6c:	00000717 	andeq	r0, r0, r7, lsl r7
     c70:	0002e826 	andeq	lr, r2, r6, lsr #16
     c74:	6e0a0200 	cdpvs	2, 0, cr0, cr10, cr0, {0}
     c78:	05000001 	streq	r0, [r0, #-1]
     c7c:	009d7c03 	addseq	r7, sp, r3, lsl #24
     c80:	028f2600 	addeq	r2, pc, #0, 12
     c84:	0a020000 	beq	80c8c <__bss_end__+0x76af4>
     c88:	0000016e 	andeq	r0, r0, lr, ror #2
     c8c:	9d680305 	stclls	3, cr0, [r8, #-20]!	; 0xffffffec
     c90:	e9260000 	stmdb	r6!, {}	; <UNPREDICTABLE>
     c94:	02000001 	andeq	r0, r0, #1
     c98:	0001680c 	andeq	r6, r1, ip, lsl #16
     c9c:	78030500 	stmdavc	r3, {r8, sl}
     ca0:	2600009d 			; <UNDEFINED> instruction: 0x2600009d
     ca4:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
     ca8:	01680d02 	cmneq	r8, r2, lsl #26
     cac:	03050000 	movweq	r0, #20480	; 0x5000
     cb0:	00009d88 	andeq	r9, r0, r8, lsl #27
     cb4:	64697427 	strbtvs	r7, [r9], #-1063	; 0x427
     cb8:	2c100200 	lfmcs	f0, 4, [r0], {-0}
     cbc:	05000000 	streq	r0, [r0, #-0]
     cc0:	00963c03 	addseq	r3, r6, r3, lsl #24
     cc4:	02ed2600 	rsceq	r2, sp, #0, 12
     cc8:	12020000 	andne	r0, r2, #0
     ccc:	0000002c 	andeq	r0, r0, ip, lsr #32
     cd0:	9d740305 	ldclls	3, cr0, [r4, #-20]!	; 0xffffffec
     cd4:	3b280000 	blcc	a00cdc <__bss_end__+0x9f6b44>
     cd8:	05000004 	streq	r0, [r0, #-4]
     cdc:	00002527 	andeq	r2, r0, r7, lsr #10
     ce0:	00088900 	andeq	r8, r8, r0, lsl #18
     ce4:	00860e00 	addeq	r0, r6, r0, lsl #28
     ce8:	00290000 	eoreq	r0, r9, r0
     cec:	0000051f 	andeq	r0, r0, pc, lsl r5
     cf0:	2a5c0500 	bcs	17020f8 <__bss_end__+0x16f7f60>
     cf4:	0000026f 	andeq	r0, r0, pc, ror #4
     cf8:	007d6705 	rsbseq	r6, sp, r5, lsl #14
     cfc:	2c0e0000 	stccs	0, cr0, [lr], {-0}
     d00:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     d04:	0000002c 	andeq	r0, r0, ip, lsr #32
     d08:	097f0000 	ldmdbeq	pc!, {}^	; <UNPREDICTABLE>
     d0c:	00040000 	andeq	r0, r4, r0
     d10:	00000426 	andeq	r0, r0, r6, lsr #8
     d14:	00100104 	andseq	r0, r0, r4, lsl #2
     d18:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
     d1c:	a3000002 	movwge	r0, #2
     d20:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
     d24:	18000085 	stmdane	r0, {r0, r2, r7}
     d28:	df000005 	svcle	0x00000005
     d2c:	02000002 	andeq	r0, r0, #2
     d30:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     d34:	34030074 	strcc	r0, [r3], #-116	; 0x74
     d38:	03000003 	movweq	r0, #3
     d3c:	000037d4 	ldrdeq	r3, [r0], -r4
     d40:	07040400 	streq	r0, [r4, -r0, lsl #8]
     d44:	00000181 	andeq	r0, r0, r1, lsl #3
     d48:	81060104 	tsthi	r6, r4, lsl #2
     d4c:	04000000 	streq	r0, [r0], #-0
     d50:	01d20502 	bicseq	r0, r2, r2, lsl #10
     d54:	04040000 	streq	r0, [r4], #-0
     d58:	0001be05 	andeq	fp, r1, r5, lsl #28
     d5c:	05080400 	streq	r0, [r8, #-1024]	; 0x400
     d60:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
     d64:	7f080104 	svcvc	0x00080104
     d68:	04000000 	streq	r0, [r0], #-0
     d6c:	00fe0702 	rscseq	r0, lr, r2, lsl #14
     d70:	04040000 	streq	r0, [r4], #-0
     d74:	00017c07 	andeq	r7, r1, r7, lsl #24
     d78:	07080400 	streq	r0, [r8, -r0, lsl #8]
     d7c:	00000177 	andeq	r0, r0, r7, ror r1
     d80:	b0070404 	andlt	r0, r7, r4, lsl #8
     d84:	05000001 	streq	r0, [r0, #-1]
     d88:	08010404 	stmdaeq	r1, {r2, sl}
     d8c:	00000088 	andeq	r0, r0, r8, lsl #1
     d90:	008c0406 	addeq	r0, ip, r6, lsl #8
     d94:	7f070000 	svcvc	0x00070000
     d98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     d9c:	0000007f 	andeq	r0, r0, pc, ror r0
     da0:	000000a1 	andeq	r0, r0, r1, lsr #1
     da4:	00007609 	andeq	r7, r0, r9, lsl #12
     da8:	03000700 	movweq	r0, #1792	; 0x700
     dac:	0000032e 	andeq	r0, r0, lr, lsr #6
     db0:	005a1b02 	subseq	r1, sl, r2, lsl #22
     db4:	140a0000 	strne	r0, [sl], #-0
     db8:	06270220 	strteq	r0, [r7], -r0, lsr #4
     dbc:	0b000001 	bleq	dc8 <_start-0x7238>
     dc0:	000003a7 	andeq	r0, r0, r7, lsr #7
     dc4:	01172902 	tsteq	r7, r2, lsl #18
     dc8:	0c000000 	stceq	0, cr0, [r0], {-0}
     dcc:	00000398 	muleq	r0, r8, r3
     dd0:	00372a02 	eorseq	r2, r7, r2, lsl #20
     dd4:	20000000 	andcs	r0, r0, r0
     dd8:	0002e30c 	andeq	lr, r2, ip, lsl #6
     ddc:	1c2b0200 	sfmne	f0, 4, [fp], #-0
     de0:	04000001 	streq	r0, [r0], #-1
     de4:	02c40c20 	sbceq	r0, r4, #32, 24	; 0x2000
     de8:	2b020000 	blcs	80df0 <__bss_end__+0x76c58>
     dec:	0000011c 	andeq	r0, r0, ip, lsl r1
     df0:	200c2008 	andcs	r2, ip, r8
     df4:	02000003 	andeq	r0, r0, #3
     df8:	00011c2e 	andeq	r1, r1, lr, lsr #24
     dfc:	0d200c00 	stceq	12, cr0, [r0, #-0]
     e00:	00000345 	andeq	r0, r0, r5, asr #6
     e04:	00373002 	eorseq	r3, r7, r2
     e08:	01040000 	mrseq	r0, (UNDEF: 4)
     e0c:	0020101f 	eoreq	r1, r0, pc, lsl r0
     e10:	0000a108 	andeq	sl, r0, r8, lsl #2
     e14:	00011700 	andeq	r1, r1, r0, lsl #14
     e18:	00760e00 	rsbseq	r0, r6, r0, lsl #28
     e1c:	1fff0000 	svcne	0x00ff0000
     e20:	01060f00 	tsteq	r6, r0, lsl #30
     e24:	370f0000 	strcc	r0, [pc, -r0]
     e28:	03000000 	movweq	r0, #0
     e2c:	000003c4 	andeq	r0, r0, r4, asr #7
     e30:	00ac3102 	adceq	r3, ip, r2, lsl #2
     e34:	9e100000 	cdpls	0, 1, cr0, cr0, cr0, {0}
     e38:	02000003 	andeq	r0, r0, #3
     e3c:	00003756 	andeq	r3, r0, r6, asr r7
     e40:	01460300 	mrseq	r0, SPSR_und
     e44:	71110000 	tstvc	r1, r0
     e48:	46560200 	ldrbmi	r0, [r6], -r0, lsl #4
     e4c:	00000001 	andeq	r0, r0, r1
     e50:	01210406 	teqeq	r1, r6, lsl #8
     e54:	8f100000 	svchi	0x00100000
     e58:	02000003 	andeq	r0, r0, #3
     e5c:	00002551 	andeq	r2, r0, r1, asr r5
     e60:	01660300 	cmneq	r6, r0, lsl #6
     e64:	71110000 	tstvc	r1, r0
     e68:	46510200 	ldrbmi	r0, [r1], -r0, lsl #4
     e6c:	00000001 	andeq	r0, r0, r1
     e70:	0003ad10 	andeq	sl, r3, r0, lsl sp
     e74:	25540200 	ldrbcs	r0, [r4, #-512]	; 0x200
     e78:	03000000 	movweq	r0, #0
     e7c:	00000180 	andeq	r0, r0, r0, lsl #3
     e80:	02007111 	andeq	r7, r0, #1073741828	; 0x40000004
     e84:	00014654 	andeq	r4, r1, r4, asr r6
     e88:	01100000 	tsteq	r0, r0
     e8c:	02000003 	andeq	r0, r0, #3
     e90:	0000255a 	andeq	r2, r0, sl, asr r5
     e94:	01ae0300 			; <UNDEFINED> instruction: 0x01ae0300
     e98:	63110000 	tstvs	r1, #0
     e9c:	465a0200 	ldrbmi	r0, [sl], -r0, lsl #4
     ea0:	11000001 	tstne	r0, r1
     ea4:	5a020065 	bpl	81040 <__bss_end__+0x76ea8>
     ea8:	000001ae 	andeq	r0, r0, lr, lsr #3
     eac:	0002c412 	andeq	ip, r2, r2, lsl r4
     eb0:	375d0200 	ldrbcc	r0, [sp, -r0, lsl #4]
     eb4:	00000000 	andeq	r0, r0, r0
     eb8:	00a10406 	adceq	r0, r1, r6, lsl #8
     ebc:	62100000 	andsvs	r0, r0, #0
     ec0:	02000003 	andeq	r0, r0, #3
     ec4:	00003757 	andeq	r3, r0, r7, asr r7
     ec8:	01ce0300 	biceq	r0, lr, r0, lsl #6
     ecc:	71110000 	tstvc	r1, r0
     ed0:	46570200 	ldrbmi	r0, [r7], -r0, lsl #4
     ed4:	00000001 	andeq	r0, r0, r1
     ed8:	00037d10 	andeq	r7, r3, r0, lsl sp
     edc:	25640200 	strbcs	r0, [r4, #-512]!	; 0x200
     ee0:	03000000 	movweq	r0, #0
     ee4:	00000207 	andeq	r0, r0, r7, lsl #4
     ee8:	02006311 	andeq	r6, r0, #1140850688	; 0x44000000
     eec:	00014664 	andeq	r4, r1, r4, ror #12
     ef0:	00781100 	rsbseq	r1, r8, r0, lsl #2
     ef4:	00a16402 	adceq	r6, r1, r2, lsl #8
     ef8:	e3120000 	tst	r2, #0
     efc:	02000002 	andeq	r0, r0, #2
     f00:	00003765 	andeq	r3, r0, r5, ror #14
     f04:	02c41200 	sbceq	r1, r4, #0, 4
     f08:	66020000 	strvs	r0, [r2], -r0
     f0c:	00000037 	andeq	r0, r0, r7, lsr r0
     f10:	03b51300 			; <UNDEFINED> instruction: 0x03b51300
     f14:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
     f18:	00008588 	andeq	r8, r0, r8, lsl #11
     f1c:	00000080 	andeq	r0, r0, r0, lsl #1
     f20:	029d9c01 	addseq	r9, sp, #256	; 0x100
     f24:	63140000 	tstvs	r4, #0
     f28:	46080100 	strmi	r0, [r8], -r0, lsl #2
     f2c:	f0000001 			; <UNDEFINED> instruction: 0xf0000001
     f30:	15000002 	strne	r0, [r0, #-2]
     f34:	00000146 	andeq	r0, r0, r6, asr #2
     f38:	000002ad 	andeq	r0, r0, sp, lsr #5
     f3c:	99a00305 	stmibls	r0!, {r0, r2, r8, r9}
     f40:	2c160000 	ldccs	0, cr0, [r6], {-0}
     f44:	a0000001 	andge	r0, r0, r1
     f48:	14000085 	strne	r0, [r0], #-133	; 0x85
     f4c:	01000000 	mrseq	r0, (UNDEF: 0)
     f50:	00025509 	andeq	r5, r2, r9, lsl #10
     f54:	013c1700 	teqeq	ip, r0, lsl #14
     f58:	03110000 	tsteq	r1, #0
     f5c:	16000000 	strne	r0, [r0], -r0
     f60:	0000014c 	andeq	r0, r0, ip, asr #2
     f64:	000085b4 			; <UNDEFINED> instruction: 0x000085b4
     f68:	00000014 	andeq	r0, r0, r4, lsl r0
     f6c:	02720901 	rsbseq	r0, r2, #16384	; 0x4000
     f70:	5c170000 	ldcpl	0, cr0, [r7], {-0}
     f74:	32000001 	andcc	r0, r0, #1
     f78:	00000003 	andeq	r0, r0, r3
     f7c:	0085ec18 	addeq	lr, r5, r8, lsl ip
     f80:	00094a00 	andeq	r4, r9, r0, lsl #20
     f84:	53011900 	movwpl	r1, #6400	; 0x1900
     f88:	01193a01 	tsteq	r9, r1, lsl #20
     f8c:	a0030552 	andge	r0, r3, r2, asr r5
     f90:	19000099 	stmdbne	r0, {r0, r3, r4, r7}
     f94:	03055101 	movweq	r5, #20737	; 0x5101
     f98:	00009a10 	andeq	r9, r0, r0, lsl sl
     f9c:	05500119 	ldrbeq	r0, [r0, #-281]	; 0x119
     fa0:	0099d403 	addseq	sp, r9, r3, lsl #8
     fa4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     fa8:	0000007f 	andeq	r0, r0, pc, ror r0
     fac:	000002ad 	andeq	r0, r0, sp, lsr #5
     fb0:	00007609 	andeq	r7, r0, r9, lsl #12
     fb4:	07000800 	streq	r0, [r0, -r0, lsl #16]
     fb8:	0000029d 	muleq	r0, sp, r2
     fbc:	0003be13 	andeq	fp, r3, r3, lsl lr
     fc0:	080d0100 	stmdaeq	sp, {r8}
     fc4:	40000086 	andmi	r0, r0, r6, lsl #1
     fc8:	01000000 	mrseq	r0, (UNDEF: 0)
     fcc:	00031b9c 	muleq	r3, ip, fp
     fd0:	00631400 	rsbeq	r1, r3, r0, lsl #8
     fd4:	01460d01 	cmpeq	r6, r1, lsl #26
     fd8:	03530000 	cmpeq	r3, #0
     fdc:	46150000 	ldrmi	r0, [r5], -r0
     fe0:	2b000001 	blcs	fec <_start-0x7014>
     fe4:	05000003 	streq	r0, [r0, #-3]
     fe8:	0099ac03 	addseq	sl, r9, r3, lsl #24
     fec:	86341a00 	ldrthi	r1, [r4], -r0, lsl #20
     ff0:	094a0000 	stmdbeq	sl, {}^	; <UNPREDICTABLE>
     ff4:	03110000 	tsteq	r1, #0
     ff8:	01190000 	tsteq	r9, r0
     ffc:	193f0153 	ldmdbne	pc!, {r0, r1, r4, r6, r8}	; <UNPREDICTABLE>
    1000:	03055201 	movweq	r5, #20993	; 0x5201
    1004:	000099ac 	andeq	r9, r0, ip, lsr #19
    1008:	05510119 	ldrbeq	r0, [r1, #-281]	; 0x119
    100c:	009a1003 	addseq	r1, sl, r3
    1010:	50011900 	andpl	r1, r1, r0, lsl #18
    1014:	9a1c0305 	bls	701c30 <__bss_end__+0x6f7a98>
    1018:	1b000000 	blne	1020 <_start-0x6fe0>
    101c:	00008638 	andeq	r8, r0, r8, lsr r6
    1020:	00000960 	andeq	r0, r0, r0, ror #18
    1024:	007f0800 	rsbseq	r0, pc, r0, lsl #16
    1028:	032b0000 	teqeq	fp, #0
    102c:	76090000 	strvc	r0, [r9], -r0
    1030:	05000000 	streq	r0, [r0, #-0]
    1034:	031b0700 	tsteq	fp, #0, 14
    1038:	6c130000 	ldcvs	0, cr0, [r3], {-0}
    103c:	01000003 	tsteq	r0, r3
    1040:	00864812 	addeq	r4, r6, r2, lsl r8
    1044:	0001a400 	andeq	sl, r1, r0, lsl #8
    1048:	189c0100 	ldmne	ip, {r8}
    104c:	14000005 	strne	r0, [r0], #-5
    1050:	12010063 	andne	r0, r1, #99	; 0x63
    1054:	00000146 	andeq	r0, r0, r6, asr #2
    1058:	00000374 	andeq	r0, r0, r4, ror r3
    105c:	0003451c 	andeq	r4, r3, ip, lsl r5
    1060:	37120100 	ldrcc	r0, [r2, -r0, lsl #2]
    1064:	92000000 	andls	r0, r0, #0
    1068:	15000003 	strne	r0, [r0, #-3]
    106c:	00000146 	andeq	r0, r0, r6, asr #2
    1070:	00000518 	andeq	r0, r0, r8, lsl r5
    1074:	99b40305 	ldmibls	r4!, {r0, r2, r8, r9}
    1078:	651d0000 	ldrvs	r0, [sp, #-0]
    107c:	a11b0100 	tstge	fp, r0, lsl #2
    1080:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    1084:	16000003 	strne	r0, [r0], -r3
    1088:	0000014c 	andeq	r0, r0, ip, asr #2
    108c:	000086a0 	andeq	r8, r0, r0, lsr #13
    1090:	00000008 	andeq	r0, r0, r8
    1094:	03981801 	orrseq	r1, r8, #65536	; 0x10000
    1098:	5c1e0000 	ldcpl	0, cr0, [lr], {-0}
    109c:	01000001 	tsteq	r0, r1
    10a0:	66160054 			; <UNDEFINED> instruction: 0x66160054
    10a4:	c8000001 	stmdagt	r0, {r0}
    10a8:	18000086 	stmdane	r0, {r1, r2, r7}
    10ac:	01000000 	mrseq	r0, (UNDEF: 0)
    10b0:	0003b319 	andeq	fp, r3, r9, lsl r3
    10b4:	01761e00 	cmneq	r6, r0, lsl #28
    10b8:	54010000 	strpl	r0, [r1], #-0
    10bc:	012c1600 	teqeq	ip, r0, lsl #12
    10c0:	87000000 	strhi	r0, [r0, -r0]
    10c4:	00140000 	andseq	r0, r4, r0
    10c8:	1a010000 	bne	410d0 <__bss_end__+0x36f38>
    10cc:	000003ce 	andeq	r0, r0, lr, asr #7
    10d0:	00013c1e 	andeq	r3, r1, lr, lsl ip
    10d4:	00540100 	subseq	r0, r4, r0, lsl #2
    10d8:	0001801f 	andeq	r8, r1, pc, lsl r0
    10dc:	00873400 	addeq	r3, r7, r0, lsl #8
    10e0:	00001800 	andeq	r1, r0, r0, lsl #16
    10e4:	1b1c0100 	blne	7014ec <__bss_end__+0x6f7354>
    10e8:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    10ec:	00000199 	muleq	r0, r9, r1
    10f0:	107af206 	rsbsne	pc, sl, r6, lsl #4
    10f4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    10f8:	00000190 	muleq	r0, r0, r1
    10fc:	18205401 	stmdane	r0!, {r0, sl, ip, lr}
    1100:	21000000 	mrscs	r0, (UNDEF: 0)
    1104:	000001a2 	andeq	r0, r0, r2, lsr #3
    1108:	000003f4 	strdeq	r0, [r0], -r4
    110c:	00014c22 	andeq	r4, r1, r2, lsr #24
    1110:	00873400 	addeq	r3, r7, r0, lsl #8
    1114:	00001000 	andeq	r1, r0, r0
    1118:	1e5b0200 	cdpne	2, 5, cr0, cr11, cr0, {0}
    111c:	0000015c 	andeq	r0, r0, ip, asr r1
    1120:	00005401 	andeq	r5, r0, r1, lsl #8
    1124:	86601a00 	strbthi	r1, [r0], -r0, lsl #20
    1128:	09670000 	stmdbeq	r7!, {}^	; <UNPREDICTABLE>
    112c:	043b0000 	ldrteq	r0, [fp], #-0
    1130:	01190000 	tsteq	r9, r0
    1134:	140a0352 	strne	r0, [sl], #-850	; 0x352
    1138:	51011920 	tstpl	r1, r0, lsr #18
    113c:	01193001 	tsteq	r9, r1
    1140:	00740250 	rsbseq	r0, r4, r0, asr r2
    1144:	86c41a00 	strbhi	r1, [r4], r0, lsl #20
    1148:	094a0000 	stmdbeq	sl, {}^	; <UNPREDICTABLE>
    114c:	04690000 	strbteq	r0, [r9], #-0
    1150:	01190000 	tsteq	r9, r0
    1154:	19480153 	stmdbne	r8, {r0, r1, r4, r6, r8}^
    1158:	03055201 	movweq	r5, #20993	; 0x5201
    115c:	000099b4 			; <UNDEFINED> instruction: 0x000099b4
    1160:	05510119 	ldrbeq	r0, [r1, #-281]	; 0x119
    1164:	009a1003 	addseq	r1, sl, r3
    1168:	50011900 	andpl	r1, r1, r0, lsl #18
    116c:	9a400305 	bls	1001d88 <__bss_end__+0xff7bf0>
    1170:	1b000000 	blne	1178 <_start-0x6e88>
    1174:	000086c8 	andeq	r8, r0, r8, asr #13
    1178:	00000960 	andeq	r0, r0, r0, ror #18
    117c:	0086fc1a 	addeq	pc, r6, sl, lsl ip	; <UNPREDICTABLE>
    1180:	00094a00 	andeq	r4, r9, r0, lsl #20
    1184:	0004a000 	andeq	sl, r4, r0
    1188:	53011900 	movwpl	r1, #6400	; 0x1900
    118c:	01194901 	tsteq	r9, r1, lsl #18
    1190:	b4030552 	strlt	r0, [r3], #-1362	; 0x552
    1194:	19000099 	stmdbne	r0, {r0, r3, r4, r7}
    1198:	03055101 	movweq	r5, #20737	; 0x5101
    119c:	00009a10 	andeq	r9, r0, r0, lsl sl
    11a0:	05500119 	ldrbeq	r0, [r0, #-281]	; 0x119
    11a4:	009a5c03 	addseq	r5, sl, r3, lsl #24
    11a8:	001b0000 	andseq	r0, fp, r0
    11ac:	60000087 	andvs	r0, r0, r7, lsl #1
    11b0:	1a000009 	bne	11dc <_start-0x6e24>
    11b4:	00008730 	andeq	r8, r0, r0, lsr r7
    11b8:	0000094a 	andeq	r0, r0, sl, asr #18
    11bc:	000004d7 	ldrdeq	r0, [r0], -r7
    11c0:	01530119 	cmpeq	r3, r9, lsl r1
    11c4:	5201194a 	andpl	r1, r1, #1212416	; 0x128000
    11c8:	99b40305 	ldmibls	r4!, {r0, r2, r8, r9}
    11cc:	01190000 	tsteq	r9, r0
    11d0:	10030551 	andne	r0, r3, r1, asr r5
    11d4:	1900009a 	stmdbne	r0, {r1, r3, r4, r7}
    11d8:	03055001 	movweq	r5, #20481	; 0x5001
    11dc:	00009a78 	andeq	r9, r0, r8, ror sl
    11e0:	87341b00 	ldrhi	r1, [r4, -r0, lsl #22]!
    11e4:	09600000 	stmdbeq	r0!, {}^	; <UNPREDICTABLE>
    11e8:	b81a0000 	ldmdalt	sl, {}	; <UNPREDICTABLE>
    11ec:	4a000087 	bmi	1410 <_start-0x6bf0>
    11f0:	0e000009 	cdpeq	0, 0, cr0, cr0, cr9, {0}
    11f4:	19000005 	stmdbne	r0, {r0, r2}
    11f8:	4c015301 	stcmi	3, cr5, [r1], {1}
    11fc:	05520119 	ldrbeq	r0, [r2, #-281]	; 0x119
    1200:	0099b403 	addseq	fp, r9, r3, lsl #8
    1204:	51011900 	tstpl	r1, r0, lsl #18
    1208:	9a100305 	bls	401e24 <__bss_end__+0x3f7c8c>
    120c:	01190000 	tsteq	r9, r0
    1210:	9c030550 	cfstr32ls	mvfx0, [r3], {80}	; 0x50
    1214:	0000009a 	muleq	r0, sl, r0
    1218:	0087bc1b 	addeq	fp, r7, fp, lsl ip
    121c:	00096000 	andeq	r6, r9, r0
    1220:	91070000 	mrsls	r0, (UNDEF: 7)
    1224:	23000000 	movwcs	r0, #0
    1228:	00000354 	andeq	r0, r0, r4, asr r3
    122c:	00a13501 	adceq	r3, r1, r1, lsl #10
    1230:	87ec0000 	strbhi	r0, [ip, r0]!
    1234:	006c0000 	rsbeq	r0, ip, r0
    1238:	9c010000 	stcls	0, cr0, [r1], {-0}
    123c:	0000059e 	muleq	r0, lr, r5
    1240:	01006314 	tsteq	r0, r4, lsl r3
    1244:	00014635 	andeq	r4, r1, r5, lsr r6
    1248:	00041400 	andeq	r1, r4, r0, lsl #8
    124c:	00651d00 	rsbeq	r1, r5, r0, lsl #26
    1250:	00a13601 	adceq	r3, r1, r1, lsl #12
    1254:	04320000 	ldrteq	r0, [r2], #-0
    1258:	80220000 	eorhi	r0, r2, r0
    125c:	f4000001 	vst4.8	{d0-d3}, [r0], r1
    1260:	48000087 	stmdami	r0, {r0, r1, r2, r7}
    1264:	01000000 	mrseq	r0, (UNDEF: 0)
    1268:	01991e3a 	orrseq	r1, r9, sl, lsr lr
    126c:	f2060000 	vhadd.s8	d0, d6, d0
    1270:	0000124d 	andeq	r1, r0, sp, asr #4
    1274:	01901e00 	orrseq	r1, r0, r0, lsl #28
    1278:	53010000 	movwpl	r0, #4096	; 0x1000
    127c:	0087f424 	addeq	pc, r7, r4, lsr #8
    1280:	00004800 	andeq	r4, r0, r0, lsl #16
    1284:	01a22100 			; <UNDEFINED> instruction: 0x01a22100
    1288:	04450000 	strbeq	r0, [r5], #-0
    128c:	4c250000 	stcmi	0, cr0, [r5], #-0
    1290:	f4000001 	vst4.8	{d0-d3}, [r0], r1
    1294:	30000087 	andcc	r0, r0, r7, lsl #1
    1298:	02000000 	andeq	r0, r0, #0
    129c:	015c1e5b 	cmpeq	ip, fp, asr lr
    12a0:	53010000 	movwpl	r0, #4096	; 0x1000
    12a4:	00000000 	andeq	r0, r0, r0
    12a8:	00037413 	andeq	r7, r3, r3, lsl r4
    12ac:	58400100 	stmdapl	r0, {r8}^
    12b0:	34000088 	strcc	r0, [r0], #-136	; 0x88
    12b4:	01000000 	mrseq	r0, (UNDEF: 0)
    12b8:	0006119c 	muleq	r6, ip, r1
    12bc:	00631400 	rsbeq	r1, r3, r0, lsl #8
    12c0:	01464001 	cmpeq	r6, r1
    12c4:	04650000 	strbteq	r0, [r5], #-0
    12c8:	291c0000 	ldmdbcs	ip, {}	; <UNPREDICTABLE>
    12cc:	01000003 	tsteq	r0, r3
    12d0:	00007d40 	andeq	r7, r0, r0, asr #26
    12d4:	00048300 	andeq	r8, r4, r0, lsl #6
    12d8:	006e1400 	rsbeq	r1, lr, r0, lsl #8
    12dc:	00374001 	eorseq	r4, r7, r1
    12e0:	04a10000 	strteq	r0, [r1], #0
    12e4:	701d0000 	andsvc	r0, sp, r0
    12e8:	ae410100 	dvfges	f0, f1, f0
    12ec:	bf000001 	svclt	0x00000001
    12f0:	24000004 	strcs	r0, [r0], #-4
    12f4:	00008868 	andeq	r8, r0, r8, ror #16
    12f8:	00000020 	andeq	r0, r0, r0, lsr #32
    12fc:	0100691d 	tsteq	r0, sp, lsl r9
    1300:	00002543 	andeq	r2, r0, r3, asr #10
    1304:	0004dd00 	andeq	sp, r4, r0, lsl #26
    1308:	88781800 	ldmdahi	r8!, {fp, ip}^
    130c:	051d0000 	ldreq	r0, [sp, #-0]
    1310:	01190000 	tsteq	r9, r0
    1314:	00770250 	rsbseq	r0, r7, r0, asr r2
    1318:	23000000 	movwcs	r0, #0
    131c:	00000311 	andeq	r0, r0, r1, lsl r3
    1320:	00251f01 	eoreq	r1, r5, r1, lsl #30
    1324:	888c0000 	stmhi	ip, {}	; <UNPREDICTABLE>
    1328:	00580000 	subseq	r0, r8, r0
    132c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1330:	0000069f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    1334:	01007114 	tsteq	r0, r4, lsl r1
    1338:	0001461f 	andeq	r4, r1, pc, lsl r6
    133c:	0004fc00 	andeq	pc, r4, r0, lsl #24
    1340:	03291c00 	teqeq	r9, #0, 24
    1344:	1f010000 	svcne	0x00010000
    1348:	0000007d 	andeq	r0, r0, sp, ror r0
    134c:	0000051a 	andeq	r0, r0, sl, lsl r5
    1350:	01006e14 	tsteq	r0, r4, lsl lr
    1354:	0000371f 	andeq	r3, r0, pc, lsl r7
    1358:	00053800 	andeq	r3, r5, r0, lsl #16
    135c:	012c1600 	teqeq	ip, r0, lsl #12
    1360:	88a00000 	stmiahi	r0!, {}	; <UNPREDICTABLE>
    1364:	00180000 	andseq	r0, r8, r0
    1368:	21010000 	mrscs	r0, (UNDEF: 1)
    136c:	0000066e 	andeq	r0, r0, lr, ror #12
    1370:	00013c1e 	andeq	r3, r1, lr, lsl ip
    1374:	00540100 	subseq	r0, r4, r0, lsl #2
    1378:	0088a01a 	addeq	sl, r8, sl, lsl r0
    137c:	0002b200 	andeq	fp, r2, r0, lsl #4
    1380:	00068200 	andeq	r8, r6, r0, lsl #4
    1384:	50011900 	andpl	r1, r1, r0, lsl #18
    1388:	00007402 	andeq	r7, r0, r2, lsl #8
    138c:	0088d018 	addeq	sp, r8, r8, lsl r0
    1390:	00059e00 	andeq	r9, r5, r0, lsl #28
    1394:	52011900 	andpl	r1, r1, #0, 18
    1398:	19007502 	stmdbne	r0, {r1, r8, sl, ip, sp, lr}
    139c:	76025101 	strvc	r5, [r2], -r1, lsl #2
    13a0:	50011900 	andpl	r1, r1, r0, lsl #18
    13a4:	00007402 	andeq	r7, r0, r2, lsl #8
    13a8:	033b2300 	teqeq	fp, #0, 6
    13ac:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    13b0:	00000025 	andeq	r0, r0, r5, lsr #32
    13b4:	000088e4 	andeq	r8, r0, r4, ror #17
    13b8:	000000a0 	andeq	r0, r0, r0, lsr #1
    13bc:	079e9c01 	ldreq	r9, [lr, r1, lsl #24]
    13c0:	63140000 	tstvs	r4, #0
    13c4:	46280100 	strtmi	r0, [r8], -r0, lsl #2
    13c8:	56000001 	strpl	r0, [r0], -r1
    13cc:	14000005 	strne	r0, [r0], #-5
    13d0:	28010076 	stmdacs	r1, {r1, r2, r4, r5, r6}
    13d4:	000001ae 	andeq	r0, r0, lr, lsr #3
    13d8:	0000058a 	andeq	r0, r0, sl, lsl #11
    13dc:	01006e14 	tsteq	r0, r4, lsl lr
    13e0:	00003728 	andeq	r3, r0, r8, lsr #14
    13e4:	0005c400 	andeq	ip, r5, r0, lsl #8
    13e8:	7a732600 	bvc	1ccabf0 <__bss_end__+0x1cc0a58>
    13ec:	25290100 	strcs	r0, [r9, #-256]!	; 0x100
    13f0:	01000000 	mrseq	r0, (UNDEF: 0)
    13f4:	02c42755 	sbceq	r2, r4, #22282240	; 0x1540000
    13f8:	2c010000 	stccs	0, cr0, [r1], {-0}
    13fc:	00000037 	andeq	r0, r0, r7, lsr r0
    1400:	000005fe 	strdeq	r0, [r0], -lr
    1404:	00014615 	andeq	r4, r1, r5, lsl r6
    1408:	0007ae00 	andeq	sl, r7, r0, lsl #28
    140c:	bc030500 	cfstr32lt	mvfx0, [r3], {-0}
    1410:	16000099 			; <UNDEFINED> instruction: 0x16000099
    1414:	0000012c 	andeq	r0, r0, ip, lsr #2
    1418:	000088ec 	andeq	r8, r0, ip, ror #17
    141c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1420:	07262901 	streq	r2, [r6, -r1, lsl #18]!
    1424:	3c170000 	ldccc	0, cr0, [r7], {-0}
    1428:	1c000001 	stcne	0, cr0, [r0], {1}
    142c:	00000006 	andeq	r0, r0, r6
    1430:	00012c16 	andeq	r2, r1, r6, lsl ip
    1434:	00892c00 	addeq	r2, r9, r0, lsl #24
    1438:	00001400 	andeq	r1, r0, r0, lsl #8
    143c:	43300100 	teqmi	r0, #0, 2
    1440:	17000007 	strne	r0, [r0, -r7]
    1444:	0000013c 	andeq	r0, r0, ip, lsr r1
    1448:	00000650 	andeq	r0, r0, r0, asr r6
    144c:	891c1a00 	ldmdbhi	ip, {r9, fp, ip}
    1450:	06110000 	ldreq	r0, [r1], -r0
    1454:	07650000 	strbeq	r0, [r5, -r0]!
    1458:	01190000 	tsteq	r9, r0
    145c:	01f30352 	mvnseq	r0, r2, asr r3
    1460:	51011952 	tstpl	r1, r2, asr r9
    1464:	5101f303 	tstpl	r1, r3, lsl #6
    1468:	02500119 	subseq	r0, r0, #1073741830	; 0x40000006
    146c:	1a000074 	bne	1644 <_start-0x69bc>
    1470:	0000895c 	andeq	r8, r0, ip, asr r9
    1474:	0000094a 	andeq	r0, r0, sl, asr #18
    1478:	00000794 	muleq	r0, r4, r7
    147c:	02530119 	subseq	r0, r3, #1073741830	; 0x40000006
    1480:	01193008 	tsteq	r9, r8
    1484:	bc030552 	cfstr32lt	mvfx0, [r3], {82}	; 0x52
    1488:	19000099 	stmdbne	r0, {r0, r3, r4, r7}
    148c:	03055101 	movweq	r5, #20737	; 0x5101
    1490:	00009a10 	andeq	r9, r0, r0, lsl sl
    1494:	05500119 	ldrbeq	r0, [r0, #-281]	; 0x119
    1498:	009ad403 	addseq	sp, sl, r3, lsl #8
    149c:	601b0000 	andsvs	r0, fp, r0
    14a0:	60000089 	andvs	r0, r0, r9, lsl #1
    14a4:	00000009 	andeq	r0, r0, r9
    14a8:	00007f08 	andeq	r7, r0, r8, lsl #30
    14ac:	0007ae00 	andeq	sl, r7, r0, lsl #28
    14b0:	00760900 	rsbseq	r0, r6, r0, lsl #18
    14b4:	00090000 	andeq	r0, r9, r0
    14b8:	00079e07 	andeq	r9, r7, r7, lsl #28
    14bc:	03852300 	orreq	r2, r5, #0, 6
    14c0:	47010000 	strmi	r0, [r1, -r0]
    14c4:	00000025 	andeq	r0, r0, r5, lsr #32
    14c8:	00008984 	andeq	r8, r0, r4, lsl #19
    14cc:	0000011c 	andeq	r0, r0, ip, lsl r1
    14d0:	09459c01 	stmdbeq	r5, {r0, sl, fp, ip, pc}^
    14d4:	63140000 	tstvs	r4, #0
    14d8:	46470100 	strbmi	r0, [r7], -r0, lsl #2
    14dc:	6e000001 	cdpvs	0, 0, cr0, cr0, cr1, {0}
    14e0:	1c000006 	stcne	0, cr0, [r0], {6}
    14e4:	00000329 	andeq	r0, r0, r9, lsr #6
    14e8:	007d4701 	rsbseq	r4, sp, r1, lsl #14
    14ec:	06f30000 	ldrbteq	r0, [r3], r0
    14f0:	6e140000 	cdpvs	0, 1, cr0, cr4, cr0, {0}
    14f4:	37470100 	strbcc	r0, [r7, -r0, lsl #2]
    14f8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    14fc:	1d000007 	stcne	0, cr0, [r0, #-28]	; 0xffffffe4
    1500:	48010070 	stmdami	r1, {r4, r5, r6}
    1504:	000001ae 	andeq	r0, r0, lr, lsr #3
    1508:	0000078b 	andeq	r0, r0, fp, lsl #15
    150c:	00014615 	andeq	r4, r1, r5, lsl r6
    1510:	00094500 	andeq	r4, r9, r0, lsl #10
    1514:	c8030500 	stmdagt	r3, {r8, sl}
    1518:	16000099 			; <UNDEFINED> instruction: 0x16000099
    151c:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
    1520:	00008988 	andeq	r8, r0, r8, lsl #19
    1524:	00000020 	andeq	r0, r0, r0, lsr #32
    1528:	08474a01 	stmdaeq	r7, {r0, r9, fp, lr}^
    152c:	c4170000 	ldrgt	r0, [r7], #-0
    1530:	d0000001 	andle	r0, r0, r1
    1534:	22000007 	andcs	r0, r0, #7
    1538:	0000012c 	andeq	r0, r0, ip, lsr #2
    153c:	00008988 	andeq	r8, r0, r8, lsl #19
    1540:	0000001c 	andeq	r0, r0, ip, lsl r0
    1544:	3c175702 	ldccc	7, cr5, [r7], {2}
    1548:	d0000001 	andle	r0, r0, r1
    154c:	00000007 	andeq	r0, r0, r7
    1550:	89b42800 	ldmibhi	r4!, {fp, sp}
    1554:	00840000 	addeq	r0, r4, r0
    1558:	08ef0000 	stmiaeq	pc!, {}^	; <UNPREDICTABLE>
    155c:	691d0000 	ldmdbvs	sp, {}	; <UNPREDICTABLE>
    1560:	254c0100 	strbcs	r0, [ip, #-256]	; 0x100
    1564:	55000000 	strpl	r0, [r0, #-0]
    1568:	1f000008 	svcne	0x00000008
    156c:	000001ce 	andeq	r0, r0, lr, asr #3
    1570:	000089b4 			; <UNDEFINED> instruction: 0x000089b4
    1574:	00000048 	andeq	r0, r0, r8, asr #32
    1578:	08b64d01 	ldmeq	r6!, {r0, r8, sl, fp, lr}
    157c:	e7170000 	ldr	r0, [r7, -r0]
    1580:	7e000001 	cdpvc	0, 0, cr0, cr0, cr1, {0}
    1584:	17000008 	strne	r0, [r0, -r8]
    1588:	000001de 	ldrdeq	r0, [r0], -lr
    158c:	000008ba 			; <UNDEFINED> instruction: 0x000008ba
    1590:	00004820 	andeq	r4, r0, r0, lsr #16
    1594:	01f02100 	mvnseq	r2, r0, lsl #2
    1598:	08e60000 	stmiaeq	r6!, {}^	; <UNPREDICTABLE>
    159c:	fb290000 	blx	a415a6 <__bss_end__+0xa3740e>
    15a0:	01000001 	tsteq	r0, r1
    15a4:	01662256 	cmneq	r6, r6, asr r2
    15a8:	89d40000 	ldmibhi	r4, {}^	; <UNPREDICTABLE>
    15ac:	00100000 	andseq	r0, r0, r0
    15b0:	67020000 	strvs	r0, [r2, -r0]
    15b4:	00017617 	andeq	r7, r1, r7, lsl r6
    15b8:	00091100 	andeq	r1, r9, r0, lsl #2
    15bc:	00000000 	andeq	r0, r0, r0
    15c0:	008a281a 	addeq	r2, sl, sl, lsl r8
    15c4:	00094a00 	andeq	r4, r9, r0, lsl #20
    15c8:	0008e500 	andeq	lr, r8, r0, lsl #10
    15cc:	53011900 	movwpl	r1, #6400	; 0x1900
    15d0:	194e0802 	stmdbne	lr, {r1, fp}^
    15d4:	03055201 	movweq	r5, #20993	; 0x5201
    15d8:	000099c8 	andeq	r9, r0, r8, asr #19
    15dc:	05510119 	ldrbeq	r0, [r1, #-281]	; 0x119
    15e0:	009a1003 	addseq	r1, sl, r3
    15e4:	50011900 	andpl	r1, r1, r0, lsl #18
    15e8:	9af80305 	bls	ffe02204 <__bss_end__+0xffdf806c>
    15ec:	1b000000 	blne	15f4 <_start-0x6a0c>
    15f0:	00008a2c 	andeq	r8, r0, ip, lsr #20
    15f4:	00000960 	andeq	r0, r0, r0, ror #18
    15f8:	014c1600 	cmpeq	ip, r0, lsl #12
    15fc:	8a400000 	bhi	1001604 <__bss_end__+0xff746c>
    1600:	00100000 	andseq	r0, r0, r0
    1604:	50010000 	andpl	r0, r1, r0
    1608:	0000090c 	andeq	r0, r0, ip, lsl #18
    160c:	00015c17 	andeq	r5, r1, r7, lsl ip
    1610:	00093d00 	andeq	r3, r9, r0, lsl #26
    1614:	6c1a0000 	ldcvs	0, cr0, [sl], {-0}
    1618:	4a00008a 	bmi	1848 <_start-0x67b8>
    161c:	3b000009 	blcc	1648 <_start-0x69b8>
    1620:	19000009 	stmdbne	r0, {r0, r3}
    1624:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    1628:	52011950 	andpl	r1, r1, #80, 18	; 0x140000
    162c:	99c80305 	stmibls	r8, {r0, r2, r8, r9}^
    1630:	01190000 	tsteq	r9, r0
    1634:	10030551 	andne	r0, r3, r1, asr r5
    1638:	1900009a 	stmdbne	r0, {r1, r3, r4, r7}
    163c:	03055001 	movweq	r5, #20481	; 0x5001
    1640:	00009b1c 	andeq	r9, r0, ip, lsl fp
    1644:	8a701b00 	bhi	1c0824c <__bss_end__+0x1bfe0b4>
    1648:	09600000 	stmdbeq	r0!, {}^	; <UNPREDICTABLE>
    164c:	07000000 	streq	r0, [r0, -r0]
    1650:	0000079e 	muleq	r0, lr, r7
    1654:	00043b2a 	andeq	r3, r4, sl, lsr #22
    1658:	25270400 	strcs	r0, [r7, #-1024]!	; 0x400
    165c:	60000000 	andvs	r0, r0, r0
    1660:	2b000009 	blcs	168c <_start-0x6974>
    1664:	00000086 	andeq	r0, r0, r6, lsl #1
    1668:	052d002c 	streq	r0, [sp, #-44]!	; 0x2c
    166c:	04000000 	streq	r0, [r0], #-0
    1670:	035b2e5c 	cmpeq	fp, #92, 28	; 0x5c0
    1674:	1b050000 	blne	14167c <__bss_end__+0x1374e4>
    1678:	0000007d 	andeq	r0, r0, sp, ror r0
    167c:	00007d2b 	andeq	r7, r0, fp, lsr #26
    1680:	00252b00 	eoreq	r2, r5, r0, lsl #22
    1684:	2c2b0000 	stccs	0, cr0, [fp], #-0
    1688:	00000000 	andeq	r0, r0, r0
    168c:	0000db00 	andeq	sp, r0, r0, lsl #22
    1690:	84000400 	strhi	r0, [r0], #-1024	; 0x400
    1694:	04000006 	streq	r0, [r0], #-6
    1698:	00001001 	andeq	r1, r0, r1
    169c:	03c90100 	biceq	r0, r9, #0, 2
    16a0:	03d70000 	bicseq	r0, r7, #0
    16a4:	8ad80000 	bhi	ff6016ac <__bss_end__+0xff5f7514>
    16a8:	00200000 	eoreq	r0, r0, r0
    16ac:	05530000 	ldrbeq	r0, [r3, #-0]
    16b0:	01020000 	mrseq	r0, (UNDEF: 2)
    16b4:	00008106 	andeq	r8, r0, r6, lsl #2
    16b8:	08010200 	stmdaeq	r1, {r9}
    16bc:	0000007f 	andeq	r0, r0, pc, ror r0
    16c0:	d2050202 	andle	r0, r5, #536870912	; 0x20000000
    16c4:	02000001 	andeq	r0, r0, #1
    16c8:	00fe0702 	rscseq	r0, lr, r2, lsl #14
    16cc:	04030000 	streq	r0, [r3], #-0
    16d0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    16d4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    16d8:	00000181 	andeq	r0, r0, r1, lsl #3
    16dc:	b9050802 	stmdblt	r5, {r1, fp}
    16e0:	02000001 	andeq	r0, r0, #1
    16e4:	01770708 	cmneq	r7, r8, lsl #14
    16e8:	04020000 	streq	r0, [r2], #-0
    16ec:	0001be05 	andeq	fp, r1, r5, lsl #28
    16f0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    16f4:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    16f8:	04020404 	streq	r0, [r2], #-1028	; 0x404
    16fc:	00017c07 	andeq	r7, r1, r7, lsl #24
    1700:	7a040500 	bvc	102b08 <__bss_end__+0xf8970>
    1704:	02000000 	andeq	r0, r0, #0
    1708:	00880801 	addeq	r0, r8, r1, lsl #16
    170c:	34060000 	strcc	r0, [r6], #-0
    1710:	02000003 	andeq	r0, r0, #3
    1714:	000048d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    1718:	035b0700 	cmpeq	fp, #0, 14
    171c:	1b030000 	blne	c1724 <__bss_end__+0xb758c>
    1720:	0000006b 	andeq	r0, r0, fp, rrx
    1724:	00008ad8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    1728:	00000020 	andeq	r0, r0, r0, lsr #32
    172c:	5f089c01 	svcpl	0x00089c01
    1730:	03010070 	movweq	r0, #4208	; 0x1070
    1734:	0000006b 	andeq	r0, r0, fp, rrx
    1738:	63085001 	movwvs	r5, #32769	; 0x8001
    173c:	41030100 	mrsmi	r0, (UNDEF: 19)
    1740:	01000000 	mrseq	r0, (UNDEF: 0)
    1744:	006e0951 	rsbeq	r0, lr, r1, asr r9
    1748:	00810301 	addeq	r0, r1, r1, lsl #6
    174c:	09770000 	ldmdbeq	r7!, {}^	; <UNPREDICTABLE>
    1750:	700a0000 	andvc	r0, sl, r0
    1754:	74040100 	strvc	r0, [r4], #-256	; 0x100
    1758:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    175c:	0b000009 	bleq	1788 <_start-0x6878>
    1760:	04010065 	streq	r0, [r1], #-101	; 0x65
    1764:	00000074 	andeq	r0, r0, r4, ror r0
    1768:	00005201 	andeq	r5, r0, r1, lsl #4
    176c:	00000191 	muleq	r0, r1, r1
    1770:	07210004 	streq	r0, [r1, -r4]!
    1774:	01040000 	mrseq	r0, (UNDEF: 4)
    1778:	00000010 	andeq	r0, r0, r0, lsl r0
    177c:	00042a01 	andeq	r2, r4, r1, lsl #20
    1780:	0003d700 	andeq	sp, r3, r0, lsl #14
    1784:	008af800 	addeq	pc, sl, r0, lsl #16
    1788:	00005800 	andeq	r5, r0, r0, lsl #16
    178c:	00064300 	andeq	r4, r6, r0, lsl #6
    1790:	041b0200 	ldreq	r0, [fp], #-512	; 0x200
    1794:	28020000 	stmdacs	r2, {}	; <UNPREDICTABLE>
    1798:	00000030 	andeq	r0, r0, r0, lsr r0
    179c:	00044203 	andeq	r4, r4, r3, lsl #4
    17a0:	00030400 	andeq	r0, r3, r0, lsl #8
    17a4:	00000047 	andeq	r0, r0, r7, asr #32
    17a8:	00045104 	andeq	r5, r4, r4, lsl #2
    17ac:	00004700 	andeq	r4, r0, r0, lsl #14
    17b0:	05000000 	streq	r0, [r0, #-0]
    17b4:	04440204 	strbeq	r0, [r4], #-516	; 0x204
    17b8:	62020000 	andvs	r0, r2, #0
    17bc:	00000025 	andeq	r0, r0, r5, lsr #32
    17c0:	69050406 	stmdbvs	r5, {r1, r2, sl}
    17c4:	0700746e 	streq	r7, [r0, -lr, ror #8]
    17c8:	01810704 	orreq	r0, r1, r4, lsl #14
    17cc:	01070000 	mrseq	r0, (UNDEF: 7)
    17d0:	00008106 	andeq	r8, r0, r6, lsl #2
    17d4:	05020700 	streq	r0, [r2, #-1792]	; 0x700
    17d8:	000001d2 	ldrdeq	r0, [r0], -r2
    17dc:	be050407 	cdplt	4, 0, cr0, cr5, cr7, {0}
    17e0:	07000001 	streq	r0, [r0, -r1]
    17e4:	01b90508 			; <UNDEFINED> instruction: 0x01b90508
    17e8:	01070000 	mrseq	r0, (UNDEF: 7)
    17ec:	00007f08 	andeq	r7, r0, r8, lsl #30
    17f0:	07020700 	streq	r0, [r2, -r0, lsl #14]
    17f4:	000000fe 	strdeq	r0, [r0], -lr
    17f8:	7c070407 	cfstrsvc	mvf0, [r7], {7}
    17fc:	07000001 	streq	r0, [r0, -r1]
    1800:	01770708 	cmneq	r7, r8, lsl #14
    1804:	04070000 	streq	r0, [r7], #-0
    1808:	0001b007 	andeq	fp, r1, r7
    180c:	a7040800 	strge	r0, [r4, -r0, lsl #16]
    1810:	07000000 	streq	r0, [r0, -r0]
    1814:	00880801 	addeq	r0, r8, r1, lsl #16
    1818:	04080000 	streq	r0, [r8], #-0
    181c:	000000b4 	strheq	r0, [r0], -r4
    1820:	0000a709 	andeq	sl, r0, r9, lsl #14
    1824:	043b0a00 	ldrteq	r0, [fp], #-2560	; 0xa00
    1828:	06010000 	streq	r0, [r1], -r0
    182c:	00000054 	andeq	r0, r0, r4, asr r0
    1830:	00008af8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    1834:	00000058 	andeq	r0, r0, r8, asr r0
    1838:	01439c01 	cmpeq	r3, r1, lsl #24
    183c:	660b0000 	strvs	r0, [fp], -r0
    1840:	0100746d 	tsteq	r0, sp, ror #8
    1844:	0000ae06 	andeq	sl, r0, r6, lsl #28
    1848:	70910200 	addsvc	r0, r1, r0, lsl #4
    184c:	75620d0c 	strbvc	r0, [r2, #-3340]!	; 0xd0c
    1850:	08010066 	stmdaeq	r1, {r1, r2, r5, r6}
    1854:	00000143 	andeq	r0, r0, r3, asr #2
    1858:	9d8c0305 	stcls	3, cr0, [ip, #20]
    185c:	4c0e0000 	stcmi	0, cr0, [lr], {-0}
    1860:	01000004 	tsteq	r0, r4
    1864:	00004909 	andeq	r4, r0, r9, lsl #18
    1868:	5c910200 	lfmpl	f0, 4, [r1], {0}
    186c:	007a730f 	rsbseq	r7, sl, pc, lsl #6
    1870:	00540c01 	subseq	r0, r4, r1, lsl #24
    1874:	09c30000 	stmibeq	r3, {}^	; <UNPREDICTABLE>
    1878:	20100000 	andscs	r0, r0, r0
    187c:	7400008b 	strvc	r0, [r0], #-139	; 0x8b
    1880:	36000001 	strcc	r0, [r0], -r1
    1884:	11000001 	tstne	r0, r1
    1888:	91025301 	tstls	r2, r1, lsl #6
    188c:	5201114c 	andpl	r1, r1, #76, 2
    1890:	06489103 	strbeq	r9, [r8], -r3, lsl #2
    1894:	03510111 	cmpeq	r1, #1073741828	; 0x40000004
    1898:	1104000a 	tstne	r4, sl
    189c:	74025001 	strvc	r5, [r2], #-1
    18a0:	34120000 	ldrcc	r0, [r2], #-0
    18a4:	1100008b 	smlabbne	r0, fp, r0, r0
    18a8:	74025001 	strvc	r5, [r2], #-1
    18ac:	13000000 	movwne	r0, #0
    18b0:	000000a7 	andeq	r0, r0, r7, lsr #1
    18b4:	00000154 	andeq	r0, r0, r4, asr r1
    18b8:	00009a14 	andeq	r9, r0, r4, lsl sl
    18bc:	0003ff00 	andeq	pc, r3, r0, lsl #30
    18c0:	00005415 	andeq	r5, r0, r5, lsl r4
    18c4:	00016300 	andeq	r6, r1, r0, lsl #6
    18c8:	00ae1600 	adceq	r1, lr, r0, lsl #12
    18cc:	17000000 	strne	r0, [r0, -r0]
    18d0:	0000046b 	andeq	r0, r0, fp, ror #8
    18d4:	016e2004 	cmneq	lr, r4
    18d8:	04080000 	streq	r0, [r8], #-0
    18dc:	00000154 	andeq	r0, r0, r4, asr r1
    18e0:	00043818 	andeq	r3, r4, r8, lsl r8
    18e4:	54020500 	strpl	r0, [r2], #-1280	; 0x500
    18e8:	16000000 	strne	r0, [r0], -r0
    18ec:	000000a1 	andeq	r0, r0, r1, lsr #1
    18f0:	00005416 	andeq	r5, r0, r6, lsl r4
    18f4:	00ae1600 	adceq	r1, lr, r0, lsl #12
    18f8:	49160000 	ldmdbmi	r6, {}	; <UNPREDICTABLE>
    18fc:	00000000 	andeq	r0, r0, r0
    1900:	0000ee00 	andeq	lr, r0, r0, lsl #28
    1904:	52000400 	andpl	r0, r0, #0, 8
    1908:	04000008 	streq	r0, [r0], #-8
    190c:	00001001 	andeq	r1, r0, r1
    1910:	04560100 	ldrbeq	r0, [r6], #-256	; 0x100
    1914:	03d70000 	bicseq	r0, r7, #0
    1918:	8b500000 	blhi	1401920 <__bss_end__+0x13f7788>
    191c:	00340000 	eorseq	r0, r4, r0
    1920:	07490000 	strbeq	r0, [r9, -r0]
    1924:	04020000 	streq	r0, [r2], #-0
    1928:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    192c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1930:	00000181 	andeq	r0, r0, r1, lsl #3
    1934:	81060103 	tsthi	r6, r3, lsl #2
    1938:	03000000 	movweq	r0, #0
    193c:	01d20502 	bicseq	r0, r2, r2, lsl #10
    1940:	04030000 	streq	r0, [r3], #-0
    1944:	0001be05 	andeq	fp, r1, r5, lsl #28
    1948:	05080300 	streq	r0, [r8, #-768]	; 0x300
    194c:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
    1950:	7f080103 	svcvc	0x00080103
    1954:	03000000 	movweq	r0, #0
    1958:	00fe0702 	rscseq	r0, lr, r2, lsl #14
    195c:	04030000 	streq	r0, [r3], #-0
    1960:	00017c07 	andeq	r7, r1, r7, lsl #24
    1964:	07080300 	streq	r0, [r8, -r0, lsl #6]
    1968:	00000177 	andeq	r0, r0, r7, ror r1
    196c:	b0070403 	andlt	r0, r7, r3, lsl #8
    1970:	03000001 	movweq	r0, #1
    1974:	00880801 	addeq	r0, r8, r1, lsl #16
    1978:	04040000 	streq	r0, [r4], #-0
    197c:	0000007f 	andeq	r0, r0, pc, ror r0
    1980:	00007205 	andeq	r7, r0, r5, lsl #4
    1984:	04620600 	strbteq	r0, [r2], #-1536	; 0x600
    1988:	04010000 	streq	r0, [r1], #-0
    198c:	00000025 	andeq	r0, r0, r5, lsr #32
    1990:	00008b50 	andeq	r8, r0, r0, asr fp
    1994:	00000034 	andeq	r0, r0, r4, lsr r0
    1998:	00ab9c01 	adceq	r9, fp, r1, lsl #24
    199c:	70070000 	andvc	r0, r7, r0
    19a0:	79040100 	stmdbvc	r4, {r8}
    19a4:	ec000000 	stc	0, cr0, [r0], {-0}
    19a8:	00000009 	andeq	r0, r0, r9
    19ac:	00002508 	andeq	r2, r0, r8, lsl #10
    19b0:	0000ba00 	andeq	fp, r0, r0, lsl #20
    19b4:	00250900 	eoreq	r0, r5, r0, lsl #18
    19b8:	0a000000 	beq	19c0 <_start-0x6640>
    19bc:	00000470 	andeq	r0, r0, r0, ror r4
    19c0:	00c51d02 	sbceq	r1, r5, r2, lsl #26
    19c4:	04040000 	streq	r0, [r4], #-0
    19c8:	000000ab 	andeq	r0, r0, fp, lsr #1
    19cc:	00002508 	andeq	r2, r0, r8, lsl #10
    19d0:	0000da00 	andeq	sp, r0, r0, lsl #20
    19d4:	00790900 	rsbseq	r0, r9, r0, lsl #18
    19d8:	0b000000 	bleq	19e0 <_start-0x6620>
    19dc:	0000046b 	andeq	r0, r0, fp, ror #8
    19e0:	00eb0c01 	rsceq	r0, fp, r1, lsl #24
    19e4:	03050000 	movweq	r0, #20480	; 0x5000
    19e8:	00009640 	andeq	r9, r0, r0, asr #12
    19ec:	00cb0404 	sbceq	r0, fp, r4, lsl #8
    19f0:	54000000 	strpl	r0, [r0], #-0
    19f4:	04000006 	streq	r0, [r0], #-6
    19f8:	0008eb00 	andeq	lr, r8, r0, lsl #22
    19fc:	10010400 	andne	r0, r1, r0, lsl #8
    1a00:	01000000 	mrseq	r0, (UNDEF: 0)
    1a04:	000004a8 	andeq	r0, r0, r8, lsr #9
    1a08:	000003d7 	ldrdeq	r0, [r0], -r7
    1a0c:	00008b84 	andeq	r8, r0, r4, lsl #23
    1a10:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1a14:	000007e3 	andeq	r0, r0, r3, ror #15
    1a18:	69050402 	stmdbvs	r5, {r1, sl}
    1a1c:	0300746e 	movweq	r7, #1134	; 0x46e
    1a20:	01810704 	orreq	r0, r1, r4, lsl #14
    1a24:	01030000 	mrseq	r0, (UNDEF: 3)
    1a28:	00008106 	andeq	r8, r0, r6, lsl #2
    1a2c:	05020300 	streq	r0, [r2, #-768]	; 0x300
    1a30:	000001d2 	ldrdeq	r0, [r0], -r2
    1a34:	be050403 	cdplt	4, 0, cr0, cr5, cr3, {0}
    1a38:	03000001 	movweq	r0, #1
    1a3c:	01b90508 			; <UNDEFINED> instruction: 0x01b90508
    1a40:	01030000 	mrseq	r0, (UNDEF: 3)
    1a44:	00007f08 	andeq	r7, r0, r8, lsl #30
    1a48:	07020300 	streq	r0, [r2, -r0, lsl #6]
    1a4c:	000000fe 	strdeq	r0, [r0], -lr
    1a50:	7c070403 	cfstrsvc	mvf0, [r7], {3}
    1a54:	03000001 	movweq	r0, #1
    1a58:	01770708 	cmneq	r7, r8, lsl #14
    1a5c:	04030000 	streq	r0, [r3], #-0
    1a60:	0001b007 	andeq	fp, r1, r7
    1a64:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    1a68:	00007a04 	andeq	r7, r0, r4, lsl #20
    1a6c:	08010300 	stmdaeq	r1, {r8, r9}
    1a70:	00000088 	andeq	r0, r0, r8, lsl #1
    1a74:	00870405 	addeq	r0, r7, r5, lsl #8
    1a78:	7a060000 	bvc	181a80 <__bss_end__+0x1778e8>
    1a7c:	07000000 	streq	r0, [r0, -r0]
    1a80:	0000041b 	andeq	r0, r0, fp, lsl r4
    1a84:	00972802 	addseq	r2, r7, r2, lsl #16
    1a88:	42080000 	andmi	r0, r8, #0
    1a8c:	04000004 	streq	r0, [r0], #-4
    1a90:	00ae0004 	adceq	r0, lr, r4
    1a94:	51090000 	mrspl	r0, (UNDEF: 9)
    1a98:	72000004 	andvc	r0, r0, #4
    1a9c:	00000000 	andeq	r0, r0, r0
    1aa0:	04440700 	strbeq	r0, [r4], #-1792	; 0x700
    1aa4:	62020000 	andvs	r0, r2, #0
    1aa8:	0000008c 	andeq	r0, r0, ip, lsl #1
    1aac:	00048a0a 	andeq	r8, r4, sl, lsl #20
    1ab0:	25270100 	strcs	r0, [r7, #-256]!	; 0x100
    1ab4:	84000000 	strhi	r0, [r0], #-0
    1ab8:	1400008b 	strne	r0, [r0], #-139	; 0x8b
    1abc:	01000000 	mrseq	r0, (UNDEF: 0)
    1ac0:	0000e09c 	muleq	r0, ip, r0
    1ac4:	00630b00 	rsbeq	r0, r3, r0, lsl #22
    1ac8:	00252701 	eoreq	r2, r5, r1, lsl #14
    1acc:	0a0a0000 	beq	281ad4 <__bss_end__+0x27793c>
    1ad0:	0c000000 	stceq	0, cr0, [r0], {-0}
    1ad4:	00646170 	rsbeq	r6, r4, r0, ror r1
    1ad8:	00742e01 	rsbseq	r2, r4, r1, lsl #28
    1adc:	8b980000 	blhi	fe601ae4 <__bss_end__+0xfe5f794c>
    1ae0:	002c0000 	eoreq	r0, ip, r0
    1ae4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ae8:	00000130 	andeq	r0, r0, r0, lsr r1
    1aec:	0100700b 	tsteq	r0, fp
    1af0:	0000742e 	andeq	r7, r0, lr, lsr #8
    1af4:	000a3800 	andeq	r3, sl, r0, lsl #16
    1af8:	049a0d00 	ldreq	r0, [sl], #3328	; 0xd00
    1afc:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    1b00:	00000074 	andeq	r0, r0, r4, ror r0
    1b04:	00000a63 	andeq	r0, r0, r3, ror #20
    1b08:	0004c80e 	andeq	ip, r4, lr, lsl #16
    1b0c:	252e0100 	strcs	r0, [lr, #-256]!	; 0x100
    1b10:	01000000 	mrseq	r0, (UNDEF: 0)
    1b14:	656c0f52 	strbvs	r0, [ip, #-3922]!	; 0xf52
    1b18:	2f01006e 	svccs	0x0001006e
    1b1c:	00000025 	andeq	r0, r0, r5, lsr #32
    1b20:	0a005101 	beq	15f2c <__bss_end__+0xbd94>
    1b24:	00000482 	andeq	r0, r0, r2, lsl #9
    1b28:	00743701 	rsbseq	r3, r4, r1, lsl #14
    1b2c:	8bc40000 	blhi	ff101b34 <__bss_end__+0xff0f799c>
    1b30:	00400000 	subeq	r0, r0, r0
    1b34:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b38:	0000019c 	muleq	r0, ip, r1
    1b3c:	7473640b 	ldrbtvc	r6, [r3], #-1035	; 0x40b
    1b40:	74370100 	ldrtvc	r0, [r7], #-256	; 0x100
    1b44:	84000000 	strhi	r0, [r0], #-0
    1b48:	0b00000a 	bleq	1b78 <_start-0x6488>
    1b4c:	3701006e 	strcc	r0, [r1, -lr, rrx]
    1b50:	00000025 	andeq	r0, r0, r5, lsr #32
    1b54:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
    1b58:	0100700b 	tsteq	r0, fp
    1b5c:	00007437 	andeq	r7, r0, r7, lsr r4
    1b60:	000add00 	andeq	sp, sl, r0, lsl #26
    1b64:	01240d00 	teqeq	r4, r0, lsl #26
    1b68:	37010000 	strcc	r0, [r1, -r0]
    1b6c:	00000074 	andeq	r0, r0, r4, ror r0
    1b70:	00000b13 	andeq	r0, r0, r3, lsl fp
    1b74:	6e656c10 	mcrvs	12, 3, r6, cr5, cr0, {0}
    1b78:	25390100 	ldrcs	r0, [r9, #-256]!	; 0x100
    1b7c:	31000000 	mrscc	r0, (UNDEF: 0)
    1b80:	0f00000b 	svceq	0x0000000b
    1b84:	3d010073 	stccc	0, cr0, [r1, #-460]	; 0xfffffe34
    1b88:	00000074 	andeq	r0, r0, r4, ror r0
    1b8c:	0a005001 	beq	15b98 <__bss_end__+0xba00>
    1b90:	000004d6 	ldrdeq	r0, [r0], -r6
    1b94:	00744701 	rsbseq	r4, r4, r1, lsl #14
    1b98:	8c040000 	stchi	0, cr0, [r4], {-0}
    1b9c:	01980000 	orrseq	r0, r8, r0
    1ba0:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ba4:	000002ca 	andeq	r0, r0, sl, asr #5
    1ba8:	00049a0d 	andeq	r9, r4, sp, lsl #20
    1bac:	2c470100 	stfcse	f0, [r7], {-0}
    1bb0:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    1bb4:	0b00000b 	bleq	1be8 <_start-0x6418>
    1bb8:	00747364 	rsbseq	r7, r4, r4, ror #6
    1bbc:	00744701 	rsbseq	r4, r4, r1, lsl #14
    1bc0:	0b860000 	bleq	fe181bc8 <__bss_end__+0xfe177a30>
    1bc4:	6e0b0000 	cdpvs	0, 0, cr0, cr11, cr0, {0}
    1bc8:	25470100 	strbcs	r0, [r7, #-256]	; 0x100
    1bcc:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    1bd0:	0b00000b 	bleq	1c04 <_start-0x63fc>
    1bd4:	006c6176 	rsbeq	r6, ip, r6, ror r1
    1bd8:	00254701 	eoreq	r4, r5, r1, lsl #14
    1bdc:	0c200000 	stceq	0, cr0, [r0], #-0
    1be0:	c80d0000 	stmdagt	sp, {}	; <UNPREDICTABLE>
    1be4:	01000004 	tsteq	r0, r4
    1be8:	00002547 	andeq	r2, r0, r7, asr #10
    1bec:	000caa00 	andeq	sl, ip, r0, lsl #20
    1bf0:	049f0e00 	ldreq	r0, [pc], #3584	; 1bf8 <_start-0x6408>
    1bf4:	47010000 	strmi	r0, [r1, -r0]
    1bf8:	00000025 	andeq	r0, r0, r5, lsr #32
    1bfc:	0f049102 	svceq	0x00049102
    1c00:	00667562 	rsbeq	r7, r6, r2, ror #10
    1c04:	02ca4c01 	sbceq	r4, sl, #256	; 0x100
    1c08:	91030000 	mrsls	r0, (UNDEF: 3)
    1c0c:	70107fa8 	andsvc	r7, r0, r8, lsr #31
    1c10:	744c0100 	strbvc	r0, [ip], #-256	; 0x100
    1c14:	d4000000 	strle	r0, [r0], #-0
    1c18:	1000000c 	andne	r0, r0, ip
    1c1c:	4d010075 	stcmi	0, cr0, [r1, #-468]	; 0xfffffe2c
    1c20:	0000002c 	andeq	r0, r0, ip, lsr #32
    1c24:	00000d79 	andeq	r0, r0, r9, ror sp
    1c28:	00014611 	andeq	r4, r1, r1, lsl r6
    1c2c:	0002ea00 	andeq	lr, r2, r0, lsl #20
    1c30:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
    1c34:	1200009b 	andne	r0, r0, #155	; 0x9b
    1c38:	00008c70 	andeq	r8, r0, r0, ror ip
    1c3c:	00000074 	andeq	r0, r0, r4, ror r0
    1c40:	00000261 	andeq	r0, r0, r1, ror #4
    1c44:	00047c13 	andeq	r7, r4, r3, lsl ip
    1c48:	2c520100 	ldfcse	f0, [r2], {-0}
    1c4c:	89000000 	stmdbhi	r0, {}	; <UNPREDICTABLE>
    1c50:	0000000e 	andeq	r0, r0, lr
    1c54:	008d5414 	addeq	r5, sp, r4, lsl r4
    1c58:	00063a00 	andeq	r3, r6, r0, lsl #20
    1c5c:	00029000 	andeq	r9, r2, r0
    1c60:	53011500 	movwpl	r1, #5376	; 0x1500
    1c64:	15750802 	ldrbne	r0, [r5, #-2050]!	; 0x802
    1c68:	03055201 	movweq	r5, #20993	; 0x5201
    1c6c:	00009b3c 	andeq	r9, r0, ip, lsr fp
    1c70:	05510115 	ldrbeq	r0, [r1, #-277]	; 0x115
    1c74:	009b7403 	addseq	r7, fp, r3, lsl #8
    1c78:	50011500 	andpl	r1, r1, r0, lsl #10
    1c7c:	9b600305 	blls	1802898 <__bss_end__+0x17f8700>
    1c80:	16000000 	strne	r0, [r0], -r0
    1c84:	00008d58 	andeq	r8, r0, r8, asr sp
    1c88:	00000650 	andeq	r0, r0, r0, asr r6
    1c8c:	008d6414 	addeq	r6, sp, r4, lsl r4
    1c90:	0000e000 	andeq	lr, r0, r0
    1c94:	0002ad00 	andeq	sl, r2, r0, lsl #26
    1c98:	51011500 	tstpl	r1, r0, lsl #10
    1c9c:	00007d02 	andeq	r7, r0, r2, lsl #26
    1ca0:	008d7817 	addeq	r7, sp, r7, lsl r8
    1ca4:	00013000 	andeq	r3, r1, r0
    1ca8:	53011500 	movwpl	r1, #5376	; 0x1500
    1cac:	15007d02 	strne	r7, [r0, #-3330]	; 0xd02
    1cb0:	74025101 	strvc	r5, [r2], #-257	; 0x101
    1cb4:	50011500 	andpl	r1, r1, r0, lsl #10
    1cb8:	00007502 	andeq	r7, r0, r2, lsl #10
    1cbc:	007a1800 	rsbseq	r1, sl, r0, lsl #16
    1cc0:	02da0000 	sbcseq	r0, sl, #0
    1cc4:	6b190000 	blvs	641ccc <__bss_end__+0x637b34>
    1cc8:	3f000000 	svccc	0x00000000
    1ccc:	007a1800 	rsbseq	r1, sl, r0, lsl #16
    1cd0:	02ea0000 	rsceq	r0, sl, #0
    1cd4:	6b190000 	blvs	641cdc <__bss_end__+0x637b44>
    1cd8:	04000000 	streq	r0, [r0], #-0
    1cdc:	02da0600 	sbcseq	r0, sl, #0, 12
    1ce0:	b91a0000 	ldmdblt	sl, {}	; <UNPREDICTABLE>
    1ce4:	01000004 	tsteq	r0, r4
    1ce8:	008d9c1f 	addeq	r9, sp, pc, lsl ip
    1cec:	00005000 	andeq	r5, r0, r0
    1cf0:	6a9c0100 	bvs	fe7020f8 <__bss_end__+0xfe6f7f60>
    1cf4:	0d000003 	stceq	0, cr0, [r0, #-12]
    1cf8:	000004ce 	andeq	r0, r0, lr, asr #9
    1cfc:	03791f01 	cmneq	r9, #1, 30
    1d00:	0eb50000 	cdpeq	0, 11, cr0, cr5, cr0, {0}
    1d04:	920d0000 	andls	r0, sp, #0
    1d08:	01000004 	tsteq	r0, r4
    1d0c:	00038e1f 	andeq	r8, r3, pc, lsl lr
    1d10:	000ee100 	andeq	lr, lr, r0, lsl #2
    1d14:	01461100 	mrseq	r1, (UNDEF: 86)
    1d18:	03a40000 			; <UNDEFINED> instruction: 0x03a40000
    1d1c:	03050000 	movweq	r0, #20480	; 0x5000
    1d20:	00009b44 	andeq	r9, r0, r4, asr #22
    1d24:	008dbc14 	addeq	fp, sp, r4, lsl ip
    1d28:	00063a00 	andeq	r3, r6, r0, lsl #20
    1d2c:	00036000 	andeq	r6, r3, r0
    1d30:	53011500 	movwpl	r1, #5376	; 0x1500
    1d34:	15200802 	strne	r0, [r0, #-2050]!	; 0x802
    1d38:	03055201 	movweq	r5, #20993	; 0x5201
    1d3c:	00009b44 	andeq	r9, r0, r4, asr #22
    1d40:	05510115 	ldrbeq	r0, [r1, #-277]	; 0x115
    1d44:	009b7403 	addseq	r7, fp, r3, lsl #8
    1d48:	50011500 	andpl	r1, r1, r0, lsl #10
    1d4c:	9bac0305 	blls	feb02968 <__bss_end__+0xfeaf87d0>
    1d50:	16000000 	strne	r0, [r0], -r0
    1d54:	00008dc0 	andeq	r8, r0, r0, asr #27
    1d58:	00000650 	andeq	r0, r0, r0, asr r6
    1d5c:	00251b00 	eoreq	r1, r5, r0, lsl #22
    1d60:	03790000 	cmneq	r9, #0
    1d64:	251c0000 	ldrcs	r0, [ip, #-0]
    1d68:	00000000 	andeq	r0, r0, r0
    1d6c:	036a0405 	cmneq	sl, #83886080	; 0x5000000
    1d70:	251b0000 	ldrcs	r0, [fp, #-0]
    1d74:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    1d78:	1c000003 	stcne	0, cr0, [r0], {3}
    1d7c:	00000081 	andeq	r0, r0, r1, lsl #1
    1d80:	7f040500 	svcvc	0x00040500
    1d84:	18000003 	stmdane	r0, {r0, r1}
    1d88:	0000007a 	andeq	r0, r0, sl, ror r0
    1d8c:	000003a4 	andeq	r0, r0, r4, lsr #7
    1d90:	00006b19 	andeq	r6, r0, r9, lsl fp
    1d94:	06000e00 	streq	r0, [r0], -r0, lsl #28
    1d98:	00000394 	muleq	r0, r4, r3
    1d9c:	0004381d 	andeq	r3, r4, sp, lsl r8
    1da0:	257d0100 	ldrbcs	r0, [sp, #-256]!	; 0x100
    1da4:	ec000000 	stc	0, cr0, [r0], {-0}
    1da8:	8800008d 	stmdahi	r0, {r0, r2, r3, r7}
    1dac:	01000002 	tsteq	r0, r2
    1db0:	0005ff9c 	muleq	r5, ip, pc	; <UNPREDICTABLE>
    1db4:	75620b00 	strbvc	r0, [r2, #-2816]!	; 0xb00
    1db8:	7d010066 	stcvc	0, cr0, [r1, #-408]	; 0xfffffe68
    1dbc:	00000074 	andeq	r0, r0, r4, ror r0
    1dc0:	00000f0d 	andeq	r0, r0, sp, lsl #30
    1dc4:	01006e0b 	tsteq	r0, fp, lsl #28
    1dc8:	0000257d 	andeq	r2, r0, sp, ror r5
    1dcc:	000f3900 	andeq	r3, pc, r0, lsl #18
    1dd0:	6d660b00 	vstmdbvs	r6!, {d16-d15}
    1dd4:	7d010074 	stcvc	0, cr0, [r1, #-464]	; 0xfffffe30
    1dd8:	00000081 	andeq	r0, r0, r1, lsl #1
    1ddc:	00000f67 	andeq	r0, r0, r7, ror #30
    1de0:	00044c0d 	andeq	r4, r4, sp, lsl #24
    1de4:	ae7d0100 	rpwgee	f0, f5, f0
    1de8:	9b000000 	blls	1df0 <_start-0x6210>
    1dec:	1000000f 	andne	r0, r0, pc
    1df0:	7e010070 	mcrvc	0, 0, r0, cr1, cr0, {3}
    1df4:	00000074 	andeq	r0, r0, r4, ror r0
    1df8:	00000fae 	andeq	r0, r0, lr, lsr #31
    1dfc:	01006510 	tsteq	r0, r0, lsl r5
    1e00:	0000747e 	andeq	r7, r0, lr, ror r4
    1e04:	00102c00 	andseq	r2, r0, r0, lsl #24
    1e08:	01461100 	mrseq	r1, (UNDEF: 86)
    1e0c:	060f0000 	streq	r0, [pc], -r0
    1e10:	03050000 	movweq	r0, #20480	; 0x5000
    1e14:	00009b54 	andeq	r9, r0, r4, asr fp
    1e18:	008e401e 	addeq	r4, lr, lr, lsl r0
    1e1c:	0001f400 	andeq	pc, r1, r0, lsl #8
    1e20:	00731000 	rsbseq	r1, r3, r0
    1e24:	00748b01 	rsbseq	r8, r4, r1, lsl #22
    1e28:	10530000 	subsne	r0, r3, r0
    1e2c:	6e0f0000 	cdpvs	0, 0, cr0, cr15, cr0, {0}
    1e30:	01006d75 	tsteq	r0, r5, ror sp
    1e34:	0006148b 	andeq	r1, r6, fp, lsl #9
    1e38:	d8910300 	ldmle	r1, {r8, r9}
    1e3c:	04c8137e 	strbeq	r1, [r8], #894	; 0x37e
    1e40:	8c010000 	stchi	0, cr0, [r1], {-0}
    1e44:	0000002c 	andeq	r0, r0, ip, lsr #32
    1e48:	000010a8 	andeq	r1, r0, r8, lsr #1
    1e4c:	008e7014 	addeq	r7, lr, r4, lsl r0
    1e50:	0000b900 	andeq	fp, r0, r0, lsl #18
    1e54:	00046d00 	andeq	r6, r4, r0, lsl #26
    1e58:	50011500 	andpl	r1, r1, r0, lsl #10
    1e5c:	00007502 	andeq	r7, r0, r2, lsl #10
    1e60:	008e9414 	addeq	r9, lr, r4, lsl r4
    1e64:	00063a00 	andeq	r3, r6, r0, lsl #20
    1e68:	00049c00 	andeq	r9, r4, r0, lsl #24
    1e6c:	53011500 	movwpl	r1, #5376	; 0x1500
    1e70:	15920802 	ldrne	r0, [r2, #2050]	; 0x802
    1e74:	03055201 	movweq	r5, #20993	; 0x5201
    1e78:	00009b54 	andeq	r9, r0, r4, asr fp
    1e7c:	05510115 	ldrbeq	r0, [r1, #-277]	; 0x115
    1e80:	009b7403 	addseq	r7, fp, r3, lsl #8
    1e84:	50011500 	andpl	r1, r1, r0, lsl #10
    1e88:	9bc40305 	blls	ff102aa4 <__bss_end__+0xff0f890c>
    1e8c:	16000000 	strne	r0, [r0], -r0
    1e90:	00008e98 	muleq	r0, r8, lr
    1e94:	00000650 	andeq	r0, r0, r0, asr r6
    1e98:	008f1814 	addeq	r1, pc, r4, lsl r8	; <UNPREDICTABLE>
    1e9c:	00063a00 	andeq	r3, r6, r0, lsl #20
    1ea0:	0004d400 	andeq	sp, r4, r0, lsl #8
    1ea4:	53011500 	movwpl	r1, #5376	; 0x1500
    1ea8:	15980802 	ldrne	r0, [r8, #2050]	; 0x802
    1eac:	03055201 	movweq	r5, #20993	; 0x5201
    1eb0:	00009b54 	andeq	r9, r0, r4, asr fp
    1eb4:	05510115 	ldrbeq	r0, [r1, #-277]	; 0x115
    1eb8:	009b7403 	addseq	r7, fp, r3, lsl #8
    1ebc:	50011500 	andpl	r1, r1, r0, lsl #10
    1ec0:	9be00305 	blls	ff802adc <__bss_end__+0xff7f8944>
    1ec4:	16000000 	strne	r0, [r0], -r0
    1ec8:	00008f1c 	andeq	r8, r0, ip, lsl pc
    1ecc:	00000650 	andeq	r0, r0, r0, asr r6
    1ed0:	008f4014 	addeq	r4, pc, r4, lsl r0	; <UNPREDICTABLE>
    1ed4:	00019c00 	andeq	r9, r1, r0, lsl #24
    1ed8:	00050a00 	andeq	r0, r5, r0, lsl #20
    1edc:	52011500 	andpl	r1, r1, #0, 10
    1ee0:	15800802 	strne	r0, [r0, #2050]	; 0x802
    1ee4:	91035101 	tstls	r3, r1, lsl #2
    1ee8:	01157ed0 			; <UNDEFINED> instruction: 0x01157ed0
    1eec:	153a0150 	ldrne	r0, [sl, #-336]!	; 0x150
    1ef0:	01047d02 	tsteq	r4, r2, lsl #26
    1ef4:	7d021531 	cfstr32vc	mvfx1, [r2, #-196]	; 0xffffff3c
    1ef8:	00770200 	rsbseq	r0, r7, r0, lsl #4
    1efc:	8f681400 	svchi	0x00681400
    1f00:	019c0000 	orrseq	r0, ip, r0
    1f04:	05370000 	ldreq	r0, [r7, #-0]!
    1f08:	01150000 	tsteq	r5, r0
    1f0c:	80080252 	andhi	r0, r8, r2, asr r2
    1f10:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    1f14:	157ed091 	ldrbne	sp, [lr, #-145]!	; 0x91
    1f18:	3a015001 	bcc	55f24 <__bss_end__+0x4bd8c>
    1f1c:	047d0215 	ldrbteq	r0, [sp], #-533	; 0x215
    1f20:	02153001 	andseq	r3, r5, #1
    1f24:	7702007d 	smlsdxvc	r2, sp, r0, r0
    1f28:	90140000 	andsls	r0, r4, r0
    1f2c:	9c00008f 	stcls	0, cr0, [r0], {143}	; 0x8f
    1f30:	64000001 	strvs	r0, [r0], #-1
    1f34:	15000005 	strne	r0, [r0, #-5]
    1f38:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    1f3c:	51011580 	smlabbpl	r1, r0, r5, r1
    1f40:	7ed09103 	atnvcs	f1, f3
    1f44:	01500115 	cmpeq	r0, r5, lsl r1
    1f48:	7d021540 	cfstr32vc	mvfx1, [r2, #-256]	; 0xffffff00
    1f4c:	15300104 	ldrne	r0, [r0, #-260]!	; 0x104
    1f50:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    1f54:	14000077 	strne	r0, [r0], #-119	; 0x77
    1f58:	00008fb8 			; <UNDEFINED> instruction: 0x00008fb8
    1f5c:	0000019c 	muleq	r0, ip, r1
    1f60:	00000591 	muleq	r0, r1, r5
    1f64:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    1f68:	01158008 	tsteq	r5, r8
    1f6c:	d0910351 	addsle	r0, r1, r1, asr r3
    1f70:	5001157e 	andpl	r1, r1, lr, ror r5
    1f74:	02153201 	andseq	r3, r5, #268435456	; 0x10000000
    1f78:	3001047d 	andcc	r0, r1, sp, ror r4
    1f7c:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    1f80:	00007702 	andeq	r7, r0, r2, lsl #14
    1f84:	008fec14 	addeq	lr, pc, r4, lsl ip	; <UNPREDICTABLE>
    1f88:	00019c00 	andeq	r9, r1, r0, lsl #24
    1f8c:	0005be00 	andeq	fp, r5, r0, lsl #28
    1f90:	52011500 	andpl	r1, r1, #0, 10
    1f94:	15800802 	strne	r0, [r0, #2050]	; 0x802
    1f98:	91035101 	tstls	r3, r1, lsl #2
    1f9c:	01157ed0 			; <UNDEFINED> instruction: 0x01157ed0
    1fa0:	15380150 	ldrne	r0, [r8, #-336]!	; 0x150
    1fa4:	01047d02 	tsteq	r4, r2, lsl #26
    1fa8:	7d021530 	cfstr32vc	mvfx1, [r2, #-192]	; 0xffffff40
    1fac:	00770200 	rsbseq	r0, r7, r0, lsl #4
    1fb0:	90081400 	andls	r1, r8, r0, lsl #8
    1fb4:	063a0000 	ldrteq	r0, [sl], -r0
    1fb8:	05f40000 	ldrbeq	r0, [r4, #0]!
    1fbc:	01150000 	tsteq	r5, r0
    1fc0:	b9080253 	stmdblt	r8, {r0, r1, r4, r6, r9}
    1fc4:	05520115 	ldrbeq	r0, [r2, #-277]	; 0x115
    1fc8:	009b5403 	addseq	r5, fp, r3, lsl #8
    1fcc:	51011500 	tstpl	r1, r0, lsl #10
    1fd0:	9b740305 	blls	1d02bec <__bss_end__+0x1cf8a54>
    1fd4:	01150000 	tsteq	r5, r0
    1fd8:	08030550 	stmdaeq	r3, {r4, r6, r8, sl}
    1fdc:	1500009c 	strne	r0, [r0, #-156]	; 0x9c
    1fe0:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    1fe4:	16000079 			; <UNDEFINED> instruction: 0x16000079
    1fe8:	0000900c 	andeq	r9, r0, ip
    1fec:	00000650 	andeq	r0, r0, r0, asr r6
    1ff0:	7a180000 	bvc	601ff8 <__bss_end__+0x5f7e60>
    1ff4:	0f000000 	svceq	0x00000000
    1ff8:	19000006 	stmdbne	r0, {r1, r2}
    1ffc:	0000006b 	andeq	r0, r0, fp, rrx
    2000:	ff060009 			; <UNDEFINED> instruction: 0xff060009
    2004:	18000005 	stmdane	r0, {r0, r2}
    2008:	0000007a 	andeq	r0, r0, sl, ror r0
    200c:	00000624 	andeq	r0, r0, r4, lsr #12
    2010:	00006b19 	andeq	r6, r0, r9, lsl fp
    2014:	1f007f00 	svcne	0x00007f00
    2018:	00000470 	andeq	r0, r0, r0, ror r4
    201c:	03791d03 	cmneq	r9, #3, 26	; 0xc0
    2020:	6b1f0000 	blvs	7c2028 <__bss_end__+0x7b7e90>
    2024:	03000004 	movweq	r0, #4
    2028:	00038e20 	andeq	r8, r3, r0, lsr #28
    202c:	043b2000 	ldrteq	r2, [fp], #-0
    2030:	27030000 	strcs	r0, [r3, -r0]
    2034:	00000025 	andeq	r0, r0, r5, lsr #32
    2038:	00000650 	andeq	r0, r0, r0, asr r6
    203c:	0000811c 	andeq	r8, r0, ip, lsl r1
    2040:	22002100 	andcs	r2, r0, #0, 2
    2044:	00000005 	andeq	r0, r0, r5
    2048:	ff005c03 			; <UNDEFINED> instruction: 0xff005c03
    204c:	04000000 	streq	r0, [r0], #-0
    2050:	000ac900 	andeq	ip, sl, r0, lsl #18
    2054:	10010400 	andne	r0, r1, r0, lsl #8
    2058:	01000000 	mrseq	r0, (UNDEF: 0)
    205c:	000004db 	ldrdeq	r0, [r0], -fp
    2060:	000003d7 	ldrdeq	r0, [r0], -r7
    2064:	00009074 	andeq	r9, r0, r4, ror r0
    2068:	00000028 	andeq	r0, r0, r8, lsr #32
    206c:	000009c3 	andeq	r0, r0, r3, asr #19
    2070:	69050402 	stmdbvs	r5, {r1, sl}
    2074:	0300746e 	movweq	r7, #1134	; 0x46e
    2078:	01810704 	orreq	r0, r1, r4, lsl #14
    207c:	01030000 	mrseq	r0, (UNDEF: 3)
    2080:	00008106 	andeq	r8, r0, r6, lsl #2
    2084:	05020300 	streq	r0, [r2, #-768]	; 0x300
    2088:	000001d2 	ldrdeq	r0, [r0], -r2
    208c:	be050403 	cdplt	4, 0, cr0, cr5, cr3, {0}
    2090:	03000001 	movweq	r0, #1
    2094:	01b90508 			; <UNDEFINED> instruction: 0x01b90508
    2098:	01030000 	mrseq	r0, (UNDEF: 3)
    209c:	00007f08 	andeq	r7, r0, r8, lsl #30
    20a0:	07020300 	streq	r0, [r2, -r0, lsl #6]
    20a4:	000000fe 	strdeq	r0, [r0], -lr
    20a8:	7c070403 	cfstrsvc	mvf0, [r7], {3}
    20ac:	03000001 	movweq	r0, #1
    20b0:	01770708 	cmneq	r7, r8, lsl #14
    20b4:	04030000 	streq	r0, [r3], #-0
    20b8:	0001b007 	andeq	fp, r1, r7
    20bc:	08010300 	stmdaeq	r1, {r8, r9}
    20c0:	00000088 	andeq	r0, r0, r8, lsl #1
    20c4:	007f0404 	rsbseq	r0, pc, r4, lsl #8
    20c8:	72050000 	andvc	r0, r5, #0
    20cc:	06000000 	streq	r0, [r0], -r0
    20d0:	0000008d 	andeq	r0, r0, sp, lsl #1
    20d4:	90740401 	rsbsls	r0, r4, r1, lsl #8
    20d8:	00280000 	eoreq	r0, r8, r0
    20dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    20e0:	000000ca 	andeq	r0, r0, sl, asr #1
    20e4:	00908807 	addseq	r8, r0, r7, lsl #16
    20e8:	0000ac00 	andeq	sl, r0, r0, lsl #24
    20ec:	50010800 	andpl	r0, r1, r0, lsl #16
    20f0:	9c400305 	mcrrls	3, 0, r0, r0, cr5
    20f4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    20f8:	00009090 	muleq	r0, r0, r0
    20fc:	000000ea 	andeq	r0, r0, sl, ror #1
    2100:	000000c0 	andeq	r0, r0, r0, asr #1
    2104:	02500108 	subseq	r0, r0, #8, 2
    2108:	0a006408 	beq	1b130 <__bss_end__+0x10f98>
    210c:	00009094 	muleq	r0, r4, r0
    2110:	000000fb 	strdeq	r0, [r0], -fp
    2114:	00250b00 	eoreq	r0, r5, r0, lsl #22
    2118:	00d90000 	sbcseq	r0, r9, r0
    211c:	790c0000 	stmdbvc	ip, {}	; <UNPREDICTABLE>
    2120:	00000000 	andeq	r0, r0, r0
    2124:	00046b0d 	andeq	r6, r4, sp, lsl #22
    2128:	e4200200 	strt	r0, [r0], #-512	; 0x200
    212c:	04000000 	streq	r0, [r0], #-0
    2130:	0000ca04 	andeq	ip, r0, r4, lsl #20
    2134:	04f50e00 	ldrbteq	r0, [r5], #3584	; 0xe00
    2138:	4d020000 	stcmi	0, cr0, [r2, #-0]
    213c:	000000fb 	strdeq	r0, [r0], -fp
    2140:	00002c0c 	andeq	r2, r0, ip, lsl #24
    2144:	050f0000 	streq	r0, [pc, #-0]	; 214c <_start-0x5eb4>
    2148:	02000000 	andeq	r0, r0, #0
    214c:	010b005c 	qaddeq	r0, ip, fp
    2150:	00040000 	andeq	r0, r4, r0
    2154:	00000b93 	muleq	r0, r3, fp
    2158:	00100104 	andseq	r0, r0, r4, lsl #2
    215c:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    2160:	d7000004 	strle	r0, [r0, -r4]
    2164:	9c000003 	stcls	0, cr0, [r0], {3}
    2168:	34000090 	strcc	r0, [r0], #-144	; 0x90
    216c:	5a000000 	bpl	2174 <_start-0x5e8c>
    2170:	0200000a 	andeq	r0, r0, #10
    2174:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2178:	04030074 	streq	r0, [r3], #-116	; 0x74
    217c:	00018107 	andeq	r8, r1, r7, lsl #2
    2180:	06010300 	streq	r0, [r1], -r0, lsl #6
    2184:	00000081 	andeq	r0, r0, r1, lsl #1
    2188:	d2050203 	andle	r0, r5, #805306368	; 0x30000000
    218c:	03000001 	movweq	r0, #1
    2190:	01be0504 			; <UNDEFINED> instruction: 0x01be0504
    2194:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2198:	0001b905 	andeq	fp, r1, r5, lsl #18
    219c:	08010300 	stmdaeq	r1, {r8, r9}
    21a0:	0000007f 	andeq	r0, r0, pc, ror r0
    21a4:	fe070203 	cdp2	2, 0, cr0, cr7, cr3, {0}
    21a8:	03000000 	movweq	r0, #0
    21ac:	017c0704 	cmneq	ip, r4, lsl #14
    21b0:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    21b4:	00017707 	andeq	r7, r1, r7, lsl #14
    21b8:	07040300 	streq	r0, [r4, -r0, lsl #6]
    21bc:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    21c0:	88080103 	stmdahi	r8, {r0, r1, r8}
    21c4:	04000000 	streq	r0, [r0], #-0
    21c8:	00000534 	andeq	r0, r0, r4, lsr r5
    21cc:	909c0301 	addsls	r0, ip, r1, lsl #6
    21d0:	00340000 	eorseq	r0, r4, r0
    21d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    21d8:	000000de 	ldrdeq	r0, [r0], -lr
    21dc:	00051205 	andeq	r1, r5, r5, lsl #4
    21e0:	25040100 	strcs	r0, [r4, #-256]	; 0x100
    21e4:	05000000 	streq	r0, [r0, #-0]
    21e8:	00000520 	andeq	r0, r0, r0, lsr #10
    21ec:	00250401 	eoreq	r0, r5, r1, lsl #8
    21f0:	67060000 	strvs	r0, [r6, -r0]
    21f4:	01000000 	mrseq	r0, (UNDEF: 0)
    21f8:	0000b105 	andeq	fp, r0, r5, lsl #2
    21fc:	08000700 	stmdaeq	r0, {r8, r9, sl}
    2200:	00737362 	rsbseq	r7, r3, r2, ror #6
    2204:	00de0701 	sbcseq	r0, lr, r1, lsl #14
    2208:	10d20000 	sbcsne	r0, r2, r0
    220c:	2c090000 	stccs	0, cr0, [r9], {-0}
    2210:	01000005 	tsteq	r0, r5
    2214:	0000de08 	andeq	sp, r0, r8, lsl #28
    2218:	90c40a00 	sbcls	r0, r4, r0, lsl #20
    221c:	00fa0000 	rscseq	r0, sl, r0
    2220:	c80a0000 	stmdagt	sl, {}	; <UNPREDICTABLE>
    2224:	07000090 			; <UNDEFINED> instruction: 0x07000090
    2228:	00000001 	andeq	r0, r0, r1
    222c:	0025040b 	eoreq	r0, r5, fp, lsl #8
    2230:	12050000 	andne	r0, r5, #0
    2234:	01000005 	tsteq	r0, r5
    2238:	00002504 	andeq	r2, r0, r4, lsl #10
    223c:	05200500 	streq	r0, [r0, #-1280]!	; 0x500
    2240:	04010000 	streq	r0, [r1], #-0
    2244:	00000025 	andeq	r0, r0, r5, lsr #32
    2248:	00006706 	andeq	r6, r0, r6, lsl #14
    224c:	07050100 	streq	r0, [r5, -r0, lsl #2]
    2250:	07000001 	streq	r0, [r0, -r1]
    2254:	00050c00 	andeq	r0, r5, r0, lsl #24
    2258:	5c020000 	stcpl	0, cr0, [r2], {-0}
    225c:	0001ad00 	andeq	sl, r1, r0, lsl #26
    2260:	3d000400 	cfstrscc	mvf0, [r0, #-0]
    2264:	0400000c 	streq	r0, [r0], #-12
    2268:	00001001 	andeq	r1, r0, r1
    226c:	05560100 	ldrbeq	r0, [r6, #-256]	; 0x100
    2270:	03d70000 	bicseq	r0, r7, #0
    2274:	00600000 	rsbeq	r0, r0, r0
    2278:	00000000 	andeq	r0, r0, r0
    227c:	0af40000 	beq	ffd02284 <__bss_end__+0xffcf80ec>
    2280:	04020000 	streq	r0, [r2], #-0
    2284:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    2288:	07040300 	streq	r0, [r4, -r0, lsl #6]
    228c:	00000181 	andeq	r0, r0, r1, lsl #3
    2290:	81060103 	tsthi	r6, r3, lsl #2
    2294:	03000000 	movweq	r0, #0
    2298:	01d20502 	bicseq	r0, r2, r2, lsl #10
    229c:	04030000 	streq	r0, [r3], #-0
    22a0:	0001be05 	andeq	fp, r1, r5, lsl #28
    22a4:	05080300 	streq	r0, [r8, #-768]	; 0x300
    22a8:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
    22ac:	7f080103 	svcvc	0x00080103
    22b0:	03000000 	movweq	r0, #0
    22b4:	00fe0702 	rscseq	r0, lr, r2, lsl #14
    22b8:	04030000 	streq	r0, [r3], #-0
    22bc:	00017c07 	andeq	r7, r1, r7, lsl #24
    22c0:	07080300 	streq	r0, [r8, -r0, lsl #6]
    22c4:	00000177 	andeq	r0, r0, r7, ror r1
    22c8:	b0070403 	andlt	r0, r7, r3, lsl #8
    22cc:	03000001 	movweq	r0, #1
    22d0:	00880801 	addeq	r0, r8, r1, lsl #16
    22d4:	3c040000 	stccc	0, cr0, [r4], {-0}
    22d8:	01000005 	tsteq	r0, r5
    22dc:	0000250e 	andeq	r2, r0, lr, lsl #10
    22e0:	0090d000 	addseq	sp, r0, r0
    22e4:	00001800 	andeq	r1, r0, r0, lsl #16
    22e8:	a29c0100 	addsge	r0, ip, #0, 2
    22ec:	05000000 	streq	r0, [r0, #-0]
    22f0:	000005a8 	andeq	r0, r0, r8, lsr #11
    22f4:	002c0f01 	eoreq	r0, ip, r1, lsl #30
    22f8:	10f20000 	rscsne	r0, r2, r0
    22fc:	06000000 	streq	r0, [r0], -r0
    2300:	0000058b 	andeq	r0, r0, fp, lsl #11
    2304:	90e81701 	rscls	r1, r8, r1, lsl #14
    2308:	00140000 	andseq	r0, r4, r0
    230c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2310:	000000c7 	andeq	r0, r0, r7, asr #1
    2314:	0005a805 	andeq	sl, r5, r5, lsl #16
    2318:	2c180100 	ldfcss	f0, [r8], {-0}
    231c:	11000000 	mrsne	r0, (UNDEF: 0)
    2320:	00000011 	andeq	r0, r0, r1, lsl r0
    2324:	00000506 	andeq	r0, r0, r6, lsl #10
    2328:	fc1f0100 	ldc2	1, cr0, [pc], {-0}
    232c:	48000090 	stmdami	r0, {r4, r7}
    2330:	01000000 	mrseq	r0, (UNDEF: 0)
    2334:	0001779c 	muleq	r1, ip, r7
    2338:	05a00700 	streq	r0, [r0, #1792]!	; 0x700
    233c:	2a010000 	bcs	42344 <__bss_end__+0x381ac>
    2340:	00000177 	andeq	r0, r0, r7, ror r1
    2344:	2010001c 	andscs	r0, r0, ip, lsl r0
    2348:	00058307 	andeq	r8, r5, r7, lsl #6
    234c:	772b0100 	strvc	r0, [fp, -r0, lsl #2]!
    2350:	24000001 	strcs	r0, [r0], #-1
    2354:	07201000 	streq	r1, [r0, -r0]!
    2358:	0000054a 	andeq	r0, r0, sl, asr #10
    235c:	01772c01 	cmneq	r7, r1, lsl #24
    2360:	00000000 	andeq	r0, r0, r0
    2364:	6a085a00 	bvs	218b6c <__bss_end__+0x20e9d4>
    2368:	01000005 	tsteq	r0, r5
    236c:	0001772d 	andeq	r7, r1, sp, lsr #14
    2370:	04092000 	streq	r2, [r9], #-0
    2374:	79000091 	stmdbvc	r0, {r0, r4, r7}
    2378:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    237c:	00009110 	andeq	r9, r0, r0, lsl r1
    2380:	000000a2 	andeq	r0, r0, r2, lsr #1
    2384:	0091180a 	addseq	r1, r1, sl, lsl #16
    2388:	00018d00 	andeq	r8, r1, r0, lsl #26
    238c:	00013a00 	andeq	r3, r1, r0, lsl #20
    2390:	50010b00 	andpl	r0, r1, r0, lsl #22
    2394:	0a004e01 	beq	15ba0 <__bss_end__+0xba08>
    2398:	00009124 	andeq	r9, r0, r4, lsr #2
    239c:	0000019e 	muleq	r0, lr, r1
    23a0:	0000015a 	andeq	r0, r0, sl, asr r1
    23a4:	0551010b 	ldrbeq	r0, [r1, #-267]	; 0x10b
    23a8:	0000010c 	andeq	r0, r0, ip, lsl #2
    23ac:	50010b5a 	andpl	r0, r1, sl, asr fp
    23b0:	00240c05 	eoreq	r0, r4, r5, lsl #24
    23b4:	0c002010 	stceq	0, cr2, [r0], {16}
    23b8:	00009130 	andeq	r9, r0, r0, lsr r1
    23bc:	0000019e 	muleq	r0, lr, r1
    23c0:	0551010b 	ldrbeq	r0, [r1, #-267]	; 0x10b
    23c4:	0000200c 	andeq	r2, r0, ip
    23c8:	50010b5a 	andpl	r0, r1, sl, asr fp
    23cc:	001c0c05 	andseq	r0, ip, r5, lsl #24
    23d0:	00002010 	andeq	r2, r0, r0, lsl r0
    23d4:	0000250d 	andeq	r2, r0, sp, lsl #10
    23d8:	053f0800 	ldreq	r0, [pc, #-2048]!	; 1be0 <_start-0x6420>
    23dc:	0d010000 	stceq	0, cr0, [r1, #-0]
    23e0:	00000188 	andeq	r0, r0, r8, lsl #3
    23e4:	002c0d10 	eoreq	r0, ip, r0, lsl sp
    23e8:	f50e0000 			; <UNDEFINED> instruction: 0xf50e0000
    23ec:	02000004 	andeq	r0, r0, #4
    23f0:	00019e4d 	andeq	r9, r1, sp, asr #28
    23f4:	002c0f00 	eoreq	r0, ip, r0, lsl #30
    23f8:	10000000 	andne	r0, r0, r0
    23fc:	0000059a 	muleq	r0, sl, r5
    2400:	2c0f9002 	stccs	0, cr9, [pc], {2}
    2404:	0f000000 	svceq	0x00000000
    2408:	0000002c 	andeq	r0, r0, ip, lsr #32
    240c:	01aa0000 			; <UNDEFINED> instruction: 0x01aa0000
    2410:	00040000 	andeq	r0, r4, r0
    2414:	00000d2b 	andeq	r0, r0, fp, lsr #26
    2418:	00100104 	andseq	r0, r0, r4, lsl #2
    241c:	b7010000 	strlt	r0, [r1, -r0]
    2420:	d7000005 	strle	r0, [r0, -r5]
    2424:	44000003 	strmi	r0, [r0], #-3
    2428:	7c000091 	stcvc	0, cr0, [r0], {145}	; 0x91
    242c:	91000000 	mrsls	r0, (UNDEF: 0)
    2430:	0200000b 	andeq	r0, r0, #11
    2434:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2438:	04030074 	streq	r0, [r3], #-116	; 0x74
    243c:	00018107 	andeq	r8, r1, r7, lsl #2
    2440:	06010300 	streq	r0, [r1], -r0, lsl #6
    2444:	00000081 	andeq	r0, r0, r1, lsl #1
    2448:	d2050203 	andle	r0, r5, #805306368	; 0x30000000
    244c:	03000001 	movweq	r0, #1
    2450:	01be0504 			; <UNDEFINED> instruction: 0x01be0504
    2454:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2458:	0001b905 	andeq	fp, r1, r5, lsl #18
    245c:	08010300 	stmdaeq	r1, {r8, r9}
    2460:	0000007f 	andeq	r0, r0, pc, ror r0
    2464:	fe070203 	cdp2	2, 0, cr0, cr7, cr3, {0}
    2468:	03000000 	movweq	r0, #0
    246c:	017c0704 	cmneq	ip, r4, lsl #14
    2470:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2474:	00017707 	andeq	r7, r1, r7, lsl #14
    2478:	07040300 	streq	r0, [r4, -r0, lsl #6]
    247c:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    2480:	88080103 	stmdahi	r8, {r0, r1, r8}
    2484:	04000000 	streq	r0, [r0], #-0
    2488:	000005d6 	ldrdeq	r0, [r0], -r6
    248c:	91440501 	cmpls	r4, r1, lsl #10
    2490:	001c0000 	andseq	r0, ip, r0
    2494:	9c010000 	stcls	0, cr0, [r1], {-0}
    2498:	0000009e 	muleq	r0, lr, r0
    249c:	0005d005 	andeq	sp, r5, r5
    24a0:	2c050100 	stfcss	f0, [r5], {-0}
    24a4:	3b000000 	blcc	24ac <_start-0x5b54>
    24a8:	00000011 	andeq	r0, r0, r1, lsl r0
    24ac:	0005ec06 	andeq	lr, r5, r6, lsl #24
    24b0:	2c0b0100 	stfcss	f0, [fp], {-0}
    24b4:	60000000 	andvs	r0, r0, r0
    24b8:	14000091 	strne	r0, [r0], #-145	; 0x91
    24bc:	01000000 	mrseq	r0, (UNDEF: 0)
    24c0:	0000cb9c 	muleq	r0, ip, fp
    24c4:	916c0700 	cmnls	ip, r0, lsl #14
    24c8:	019c0000 	orrseq	r0, ip, r0
    24cc:	01080000 	mrseq	r0, (UNDEF: 8)
    24d0:	040c0550 	streq	r0, [ip], #-1360	; 0x550
    24d4:	00200030 	eoreq	r0, r0, r0, lsr r0
    24d8:	05e30400 	strbeq	r0, [r3, #1024]!	; 0x400
    24dc:	0f010000 	svceq	0x00010000
    24e0:	00009174 	andeq	r9, r0, r4, ror r1
    24e4:	00000024 	andeq	r0, r0, r4, lsr #32
    24e8:	01299c01 	teqeq	r9, r1, lsl #24
    24ec:	75090000 	strvc	r0, [r9, #-0]
    24f0:	0f010073 	svceq	0x00010073
    24f4:	0000002c 	andeq	r0, r0, ip, lsr #32
    24f8:	0000116f 	andeq	r1, r0, pc, ror #2
    24fc:	0062720a 	rsbeq	r7, r2, sl, lsl #4
    2500:	002c1001 	eoreq	r1, ip, r1
    2504:	54010000 	strpl	r0, [r1], #-0
    2508:	0091840b 	addseq	r8, r1, fp, lsl #8
    250c:	00001000 	andeq	r1, r0, r0
    2510:	00011f00 	andeq	r1, r1, r0, lsl #30
    2514:	61720c00 	cmnvs	r2, r0, lsl #24
    2518:	2c120100 	ldfcss	f0, [r2], {-0}
    251c:	8d000000 	stchi	0, cr0, [r0, #-0]
    2520:	0d000011 	stceq	0, cr0, [r0, #-68]	; 0xffffffbc
    2524:	00009188 	andeq	r9, r0, r8, lsl #3
    2528:	0000009e 	muleq	r0, lr, r0
    252c:	91800d00 	orrls	r0, r0, r0, lsl #26
    2530:	009e0000 	addseq	r0, lr, r0
    2534:	04000000 	streq	r0, [r0], #-0
    2538:	000004f5 	strdeq	r0, [r0], -r5
    253c:	91981801 	orrsls	r1, r8, r1, lsl #16
    2540:	00140000 	andseq	r0, r4, r0
    2544:	9c010000 	stcls	0, cr0, [r1], {-0}
    2548:	00000162 	andeq	r0, r0, r2, ror #2
    254c:	00736d09 	rsbseq	r6, r3, r9, lsl #26
    2550:	002c1801 	eoreq	r1, ip, r1, lsl #16
    2554:	11a00000 	movne	r0, r0
    2558:	a8070000 	stmdage	r7, {}	; <UNPREDICTABLE>
    255c:	cb000091 	blgt	27a8 <_start-0x5858>
    2560:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2564:	f3075001 	vhadd.u8	d5, d7, d1
    2568:	e80a5001 	stmda	sl, {r0, ip, lr}
    256c:	00001e03 	andeq	r1, r0, r3, lsl #28
    2570:	0005ad04 	andeq	sl, r5, r4, lsl #26
    2574:	ac1b0100 	ldfges	f0, [fp], {-0}
    2578:	14000091 	strne	r0, [r0], #-145	; 0x91
    257c:	01000000 	mrseq	r0, (UNDEF: 0)
    2580:	00019c9c 	muleq	r1, ip, ip
    2584:	65730900 	ldrbvs	r0, [r3, #-2304]!	; 0x900
    2588:	1b010063 	blne	4271c <__bss_end__+0x38584>
    258c:	0000002c 	andeq	r0, r0, ip, lsr #32
    2590:	000011c1 	andeq	r1, r0, r1, asr #3
    2594:	0091bc07 	addseq	fp, r1, r7, lsl #24
    2598:	00012900 	andeq	r2, r1, r0, lsl #18
    259c:	50010800 	andpl	r0, r1, r0, lsl #16
    25a0:	5001f307 	andpl	pc, r1, r7, lsl #6
    25a4:	1e03e80a 	cdpne	8, 0, cr14, cr3, cr10, {0}
    25a8:	ca0e0000 	bgt	3825b0 <__bss_end__+0x378418>
    25ac:	02000005 	andeq	r0, r0, #5
    25b0:	00002c9c 	muleq	r0, ip, ip
    25b4:	002c0f00 	eoreq	r0, ip, r0, lsl #30
    25b8:	00000000 	andeq	r0, r0, r0
    25bc:	00000348 	andeq	r0, r0, r8, asr #6
    25c0:	0e0e0004 	cdpeq	0, 0, cr0, cr14, cr4, {0}
    25c4:	01040000 	mrseq	r0, (UNDEF: 4)
    25c8:	00000010 	andeq	r0, r0, r0, lsl r0
    25cc:	00061601 	andeq	r1, r6, r1, lsl #12
    25d0:	0003d700 	andeq	sp, r3, r0, lsl #14
    25d4:	00949800 	addseq	r9, r4, r0, lsl #16
    25d8:	00017800 	andeq	r7, r1, r0, lsl #16
    25dc:	000c3500 	andeq	r3, ip, r0, lsl #10
    25e0:	05040200 	streq	r0, [r4, #-512]	; 0x200
    25e4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    25e8:	00033403 	andeq	r3, r3, r3, lsl #8
    25ec:	37d40200 	ldrbcc	r0, [r4, r0, lsl #4]
    25f0:	04000000 	streq	r0, [r0], #-0
    25f4:	01810704 	orreq	r0, r1, r4, lsl #14
    25f8:	01040000 	mrseq	r0, (UNDEF: 4)
    25fc:	00008106 	andeq	r8, r0, r6, lsl #2
    2600:	05020400 	streq	r0, [r2, #-1024]	; 0x400
    2604:	000001d2 	ldrdeq	r0, [r0], -r2
    2608:	be050404 	cdplt	4, 0, cr0, cr5, cr4, {0}
    260c:	04000001 	streq	r0, [r0], #-1
    2610:	01b90508 			; <UNDEFINED> instruction: 0x01b90508
    2614:	01040000 	mrseq	r0, (UNDEF: 4)
    2618:	00007f08 	andeq	r7, r0, r8, lsl #30
    261c:	07020400 	streq	r0, [r2, -r0, lsl #8]
    2620:	000000fe 	strdeq	r0, [r0], -lr
    2624:	7c070404 	cfstrsvc	mvf0, [r7], {4}
    2628:	04000001 	streq	r0, [r0], #-1
    262c:	01770708 	cmneq	r7, r8, lsl #14
    2630:	04040000 	streq	r0, [r4], #-0
    2634:	0001b007 	andeq	fp, r1, r7
    2638:	06040500 	streq	r0, [r4], -r0, lsl #10
    263c:	00008504 	andeq	r8, r0, r4, lsl #10
    2640:	08010400 	stmdaeq	r1, {sl}
    2644:	00000088 	andeq	r0, r0, r8, lsl #1
    2648:	00920406 	addseq	r0, r2, r6, lsl #8
    264c:	85070000 	strhi	r0, [r7, #-0]
    2650:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2654:	00000085 	andeq	r0, r0, r5, lsl #1
    2658:	000000a7 	andeq	r0, r0, r7, lsr #1
    265c:	00007609 	andeq	r7, r0, r9, lsl #12
    2660:	0a000700 	beq	4268 <_start-0x3d98>
    2664:	00000111 	andeq	r0, r0, r1, lsl r1
    2668:	007d1901 	rsbseq	r1, sp, r1, lsl #18
    266c:	94980000 	ldrls	r0, [r8], #0
    2670:	00640000 	rsbeq	r0, r4, r0
    2674:	9c010000 	stcls	0, cr0, [r1], {-0}
    2678:	0000015c 	andeq	r0, r0, ip, asr r1
    267c:	0006400b 	andeq	r4, r6, fp
    2680:	37190100 	ldrcc	r0, [r9, -r0, lsl #2]
    2684:	e2000000 	and	r0, r0, #0
    2688:	0c000011 	stceq	0, cr0, [r0], {17}
    268c:	00000146 	andeq	r0, r0, r6, asr #2
    2690:	0000015c 	andeq	r0, r0, ip, asr r1
    2694:	9c4c0305 	mcrrls	3, 0, r0, ip, cr5
    2698:	670d0000 	strvs	r0, [sp, -r0]
    269c:	01000006 	tsteq	r0, r6
    26a0:	00007d1c 	andeq	r7, r0, ip, lsl sp
    26a4:	0e540100 	rdfeqs	f0, f4, f0
    26a8:	00000638 	andeq	r0, r0, r8, lsr r6
    26ac:	00371d01 	eorseq	r1, r7, r1, lsl #26
    26b0:	121c0000 	andsne	r0, ip, #0
    26b4:	c00f0000 	andgt	r0, pc, r0
    26b8:	13000094 	movwne	r0, #148	; 0x94
    26bc:	28000003 	stmdacs	r0, {r0, r1}
    26c0:	10000001 	andne	r0, r0, r1
    26c4:	4a015301 	bmi	572d0 <__bss_end__+0x4d138>
    26c8:	05520110 	ldrbeq	r0, [r2, #-272]	; 0x110
    26cc:	009c4c03 	addseq	r4, ip, r3, lsl #24
    26d0:	51011000 	mrspl	r1, (UNDEF: 1)
    26d4:	9cb40305 	ldcls	3, cr0, [r4], #20
    26d8:	01100000 	tsteq	r0, r0
    26dc:	74030550 	strvc	r0, [r3], #-1360	; 0x550
    26e0:	0000009c 	muleq	r0, ip, r0
    26e4:	0094c411 	addseq	ip, r4, r1, lsl r4
    26e8:	00032900 	andeq	r2, r3, r0, lsl #18
    26ec:	94e41200 	strbtls	r1, [r4], #512	; 0x200
    26f0:	03300000 	teqeq	r0, #0
    26f4:	01100000 	tsteq	r0, r0
    26f8:	01f30852 	mvnseq	r0, r2, asr r8
    26fc:	09032350 	stmdbeq	r3, {r4, r6, r8, r9, sp}
    2700:	01101afc 			; <UNDEFINED> instruction: 0x01101afc
    2704:	10300151 	eorsne	r0, r0, r1, asr r1
    2708:	f30b5001 	vhadd.u8	d5, d11, d1
    270c:	03235001 	teqeq	r3, #1
    2710:	741afc09 	ldrvc	pc, [sl], #-3081	; 0xc09
    2714:	00002200 	andeq	r2, r0, r0, lsl #4
    2718:	00009707 	andeq	r9, r0, r7, lsl #14
    271c:	026f0a00 	rsbeq	r0, pc, #0, 20
    2720:	26010000 	strcs	r0, [r1], -r0
    2724:	0000007d 	andeq	r0, r0, sp, ror r0
    2728:	000094fc 	strdeq	r9, [r0], -ip
    272c:	00000094 	muleq	r0, r4, r0
    2730:	02399c01 	eorseq	r9, r9, #256	; 0x100
    2734:	400b0000 	andmi	r0, fp, r0
    2738:	01000006 	tsteq	r0, r6
    273c:	00003726 	andeq	r3, r0, r6, lsr #14
    2740:	00124200 	andseq	r4, r2, r0, lsl #4
    2744:	062e0b00 	strteq	r0, [lr], -r0, lsl #22
    2748:	26010000 	strcs	r0, [r1], -r0
    274c:	00000037 	andeq	r0, r0, r7, lsr r0
    2750:	000012ae 	andeq	r1, r0, lr, lsr #5
    2754:	0001460c 	andeq	r4, r1, ip, lsl #12
    2758:	00024900 	andeq	r4, r2, r0, lsl #18
    275c:	54030500 	strpl	r0, [r3], #-1280	; 0x500
    2760:	0e00009c 	mcreq	0, 0, r0, cr0, cr12, {4}
    2764:	00000605 	andeq	r0, r0, r5, lsl #12
    2768:	00372c01 	eorseq	r2, r7, r1, lsl #24
    276c:	13280000 	teqne	r8, #0
    2770:	240f0000 	strcs	r0, [pc], #-0	; 2778 <_start-0x5888>
    2774:	13000095 	movwne	r0, #149	; 0x95
    2778:	e5000003 	str	r0, [r0, #-3]
    277c:	10000001 	andne	r0, r0, r1
    2780:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    2784:	52011027 	andpl	r1, r1, #39	; 0x27
    2788:	9c540305 	mrrcls	3, 0, r0, r4, cr5
    278c:	01100000 	tsteq	r0, r0
    2790:	b4030551 	strlt	r0, [r3], #-1361	; 0x551
    2794:	1000009c 	mulne	r0, ip, r0
    2798:	03055001 	movweq	r5, #20481	; 0x5001
    279c:	00009c74 	andeq	r9, r0, r4, ror ip
    27a0:	95281100 	strls	r1, [r8, #-256]!	; 0x100
    27a4:	03290000 	teqeq	r9, #0
    27a8:	34110000 	ldrcc	r0, [r1], #-0
    27ac:	a7000095 			; <UNDEFINED> instruction: 0xa7000095
    27b0:	0f000000 	svceq	0x00000000
    27b4:	00009554 	andeq	r9, r0, r4, asr r5
    27b8:	00000313 	andeq	r0, r0, r3, lsl r3
    27bc:	00000226 	andeq	r0, r0, r6, lsr #4
    27c0:	02530110 	subseq	r0, r3, #16, 2
    27c4:	01102b08 	tsteq	r0, r8, lsl #22
    27c8:	54030552 	strpl	r0, [r3], #-1362	; 0x552
    27cc:	1000009c 	mulne	r0, ip, r0
    27d0:	03055101 	movweq	r5, #20737	; 0x5101
    27d4:	00009cb4 			; <UNDEFINED> instruction: 0x00009cb4
    27d8:	05500110 	ldrbeq	r0, [r0, #-272]	; 0x110
    27dc:	009cc803 	addseq	ip, ip, r3, lsl #16
    27e0:	58110000 	ldmdapl	r1, {}	; <UNPREDICTABLE>
    27e4:	29000095 	stmdbcs	r0, {r0, r2, r4, r7}
    27e8:	11000003 	tstne	r0, r3
    27ec:	00009578 	andeq	r9, r0, r8, ror r5
    27f0:	000000a7 	andeq	r0, r0, r7, lsr #1
    27f4:	00850800 	addeq	r0, r5, r0, lsl #16
    27f8:	02490000 	subeq	r0, r9, #0
    27fc:	76090000 	strvc	r0, [r9], -r0
    2800:	0f000000 	svceq	0x00000000
    2804:	02390700 	eorseq	r0, r9, #0, 14
    2808:	f4130000 			; <UNDEFINED> instruction: 0xf4130000
    280c:	01000001 	tsteq	r0, r1
    2810:	0095903b 	addseq	r9, r5, fp, lsr r0
    2814:	00005800 	andeq	r5, r0, r0, lsl #16
    2818:	ab9c0100 	blge	fe702c20 <__bss_end__+0xfe6f8a88>
    281c:	0c000002 	stceq	0, cr0, [r0], {2}
    2820:	00000146 	andeq	r0, r0, r6, asr #2
    2824:	000002bb 			; <UNDEFINED> instruction: 0x000002bb
    2828:	9c640305 	stclls	3, cr0, [r4], #-20	; 0xffffffec
    282c:	b80f0000 	stmdalt	pc, {}	; <UNPREDICTABLE>
    2830:	13000095 	movwne	r0, #149	; 0x95
    2834:	a1000003 	tstge	r0, r3
    2838:	10000002 	andne	r0, r0, r2
    283c:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    2840:	5201103c 	andpl	r1, r1, #60	; 0x3c
    2844:	9c640305 	stclls	3, cr0, [r4], #-20	; 0xffffffec
    2848:	01100000 	tsteq	r0, r0
    284c:	b4030551 	strlt	r0, [r3], #-1361	; 0x551
    2850:	1000009c 	mulne	r0, ip, r0
    2854:	03055001 	movweq	r5, #20481	; 0x5001
    2858:	00009d20 	andeq	r9, r0, r0, lsr #26
    285c:	95bc1100 	ldrls	r1, [ip, #256]!	; 0x100
    2860:	03290000 	teqeq	r9, #0
    2864:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2868:	00000085 	andeq	r0, r0, r5, lsl #1
    286c:	000002bb 			; <UNDEFINED> instruction: 0x000002bb
    2870:	00007609 	andeq	r7, r0, r9, lsl #12
    2874:	07000c00 	streq	r0, [r0, -r0, lsl #24]
    2878:	000002ab 	andeq	r0, r0, fp, lsr #5
    287c:	0005fb14 	andeq	pc, r5, r4, lsl fp	; <UNPREDICTABLE>
    2880:	e8450100 	stmda	r5, {r8}^
    2884:	18000095 	stmdane	r0, {r0, r2, r4, r7}
    2888:	01000000 	mrseq	r0, (UNDEF: 0)
    288c:	0647159c 			; <UNDEFINED> instruction: 0x0647159c
    2890:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    2894:	0000007d 	andeq	r0, r0, sp, ror r0
    2898:	00009600 	andeq	r9, r0, r0, lsl #12
    289c:	00000010 	andeq	r0, r0, r0, lsl r0
    28a0:	270d9c01 	strcs	r9, [sp, -r1, lsl #24]
    28a4:	01000006 	tsteq	r0, r6
    28a8:	00002508 	andeq	r2, r0, r8, lsl #10
    28ac:	8c030500 	cfstr32hi	mvfx0, [r3], {-0}
    28b0:	0d0000a1 	stceq	0, cr0, [r0, #-644]	; 0xfffffd7c
    28b4:	0000064f 	andeq	r0, r0, pc, asr #12
    28b8:	007f0b01 	rsbseq	r0, pc, r1, lsl #22
    28bc:	03050000 	movweq	r0, #20480	; 0x5000
    28c0:	0000a190 	muleq	r0, r0, r1
    28c4:	00065816 	andeq	r5, r6, r6, lsl r8
    28c8:	85050100 	strhi	r0, [r5, #-256]	; 0x100
    28cc:	17000000 	strne	r0, [r0, -r0]
    28d0:	0000043b 	andeq	r0, r0, fp, lsr r4
    28d4:	00252703 	eoreq	r2, r5, r3, lsl #14
    28d8:	03290000 	teqeq	r9, #0
    28dc:	8c180000 	ldchi	0, cr0, [r8], {-0}
    28e0:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    28e4:	00051a00 	andeq	r1, r5, r0, lsl #20
    28e8:	5c030000 	stcpl	0, cr0, [r3], {-0}
    28ec:	00035b1b 	andeq	r5, r3, fp, lsl fp
    28f0:	7d1b0400 	cfldrsvc	mvf0, [fp, #-0]
    28f4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    28f8:	0000007d 	andeq	r0, r0, sp, ror r0
    28fc:	00002518 	andeq	r2, r0, r8, lsl r5
    2900:	002c1800 	eoreq	r1, ip, r0, lsl #16
    2904:	00000000 	andeq	r0, r0, r0
    2908:	000000e0 	andeq	r0, r0, r0, ror #1
    290c:	0f950004 	svceq	0x00950004
    2910:	01040000 	mrseq	r0, (UNDEF: 4)
    2914:	00000010 	andeq	r0, r0, r0, lsl r0
    2918:	00068e01 	andeq	r8, r6, r1, lsl #28
    291c:	0003d700 	andeq	sp, r3, r0, lsl #14
    2920:	00961000 	addseq	r1, r6, r0
    2924:	00001400 	andeq	r1, r0, r0, lsl #8
    2928:	000da400 	andeq	sl, sp, r0, lsl #8
    292c:	05040200 	streq	r0, [r4, #-512]	; 0x200
    2930:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2934:	81070403 	tsthi	r7, r3, lsl #8
    2938:	03000001 	movweq	r0, #1
    293c:	00810601 	addeq	r0, r1, r1, lsl #12
    2940:	02030000 	andeq	r0, r3, #0
    2944:	0001d205 	andeq	sp, r1, r5, lsl #4
    2948:	05040300 	streq	r0, [r4, #-768]	; 0x300
    294c:	000001be 			; <UNDEFINED> instruction: 0x000001be
    2950:	b9050803 	stmdblt	r5, {r0, r1, fp}
    2954:	03000001 	movweq	r0, #1
    2958:	007f0801 	rsbseq	r0, pc, r1, lsl #16
    295c:	02030000 	andeq	r0, r3, #0
    2960:	0000fe07 	andeq	pc, r0, r7, lsl #28
    2964:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2968:	0000017c 	andeq	r0, r0, ip, ror r1
    296c:	77070803 	strvc	r0, [r7, -r3, lsl #16]
    2970:	03000001 	movweq	r0, #1
    2974:	01b00704 	lslseq	r0, r4, #14
    2978:	01030000 	mrseq	r0, (UNDEF: 3)
    297c:	00008808 	andeq	r8, r0, r8, lsl #16
    2980:	067d0400 	ldrbteq	r0, [sp], -r0, lsl #8
    2984:	03010000 	movweq	r0, #4096	; 0x1000
    2988:	00000025 	andeq	r0, r0, r5, lsr #32
    298c:	00009610 	andeq	r9, r0, r0, lsl r6
    2990:	00000014 	andeq	r0, r0, r4, lsl r0
    2994:	00b09c01 	adcseq	r9, r0, r1, lsl #24
    2998:	63050000 	movwvs	r0, #20480	; 0x5000
    299c:	25030100 	strcs	r0, [r3, #-256]	; 0x100
    29a0:	55000000 	strpl	r0, [r0, #-0]
    29a4:	06000013 			; <UNDEFINED> instruction: 0x06000013
    29a8:	0000961c 	andeq	r9, r0, ip, lsl r6
    29ac:	000000d6 	ldrdeq	r0, [r0], -r6
    29b0:	02500107 	subseq	r0, r0, #-1073741823	; 0xc0000001
    29b4:	00000074 	andeq	r0, r0, r4, ror r0
    29b8:	00002508 	andeq	r2, r0, r8, lsl #10
    29bc:	0000bf00 	andeq	fp, r0, r0, lsl #30
    29c0:	00250900 	eoreq	r0, r5, r0, lsl #18
    29c4:	0a000000 	beq	29cc <_start-0x5634>
    29c8:	00000470 	andeq	r0, r0, r0, ror r4
    29cc:	00d00601 	sbcseq	r0, r0, r1, lsl #12
    29d0:	03050000 	movweq	r0, #20480	; 0x5000
    29d4:	00009644 	andeq	r9, r0, r4, asr #12
    29d8:	00b0040b 	adcseq	r0, r0, fp, lsl #8
    29dc:	730c0000 	movwvc	r0, #49152	; 0xc000
    29e0:	02000006 	andeq	r0, r0, #6
    29e4:	002c093a 	eoreq	r0, ip, sl, lsr r9
    29e8:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	110e1b0e 	tstne	lr, lr, lsl #22
       c:	10061201 	andne	r1, r6, r1, lsl #4
      10:	02000017 	andeq	r0, r0, #23
      14:	0b0b0024 	bleq	2c00ac <__bss_end__+0x2b5f14>
      18:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
      1c:	24030000 	strcs	r0, [r3], #-0
      20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
      24:	000e030b 	andeq	r0, lr, fp, lsl #6
      28:	00160400 	andseq	r0, r6, r0, lsl #8
      2c:	0b3a0e03 	bleq	e83840 <__bss_end__+0xe796a8>
      30:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      34:	0f050000 	svceq	0x00050000
      38:	000b0b00 	andeq	r0, fp, r0, lsl #22
      3c:	000f0600 	andeq	r0, pc, r0, lsl #12
      40:	13490b0b 	movtne	r0, #39691	; 0x9b0b
      44:	26070000 	strcs	r0, [r7], -r0
      48:	00134900 	andseq	r4, r3, r0, lsl #18
      4c:	01010800 	tsteq	r1, r0, lsl #16
      50:	13011349 	movwne	r1, #4937	; 0x1349
      54:	21090000 	mrscs	r0, (UNDEF: 9)
      58:	2f134900 	svccs	0x00134900
      5c:	0a00000b 	beq	90 <_start-0x7f70>
      60:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
      64:	0b3a050b 	bleq	e81498 <__bss_end__+0xe77300>
      68:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      6c:	0d0b0000 	stceq	0, cr0, [fp, #-0]
      70:	3a0e0300 	bcc	380c78 <__bss_end__+0x376ae0>
      74:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      78:	000b3813 	andeq	r3, fp, r3, lsl r8
      7c:	000d0c00 	andeq	r0, sp, r0, lsl #24
      80:	0b3a0803 	bleq	e82094 <__bss_end__+0xe77efc>
      84:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      88:	00000b38 	andeq	r0, r0, r8, lsr fp
      8c:	2701150d 	strcs	r1, [r1, -sp, lsl #10]
      90:	00130119 	andseq	r0, r3, r9, lsl r1
      94:	00050e00 	andeq	r0, r5, r0, lsl #28
      98:	00001349 	andeq	r1, r0, r9, asr #6
      9c:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
      a0:	00052f13 	andeq	r2, r5, r3, lsl pc
      a4:	012e1000 	teqeq	lr, r0
      a8:	0b3a0e03 	bleq	e838bc <__bss_end__+0xe79724>
      ac:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
      b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
      b4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
      b8:	00130119 	andseq	r0, r3, r9, lsl r1
      bc:	00051100 	andeq	r1, r5, r0, lsl #2
      c0:	0b3a0803 	bleq	e820d4 <__bss_end__+0xe77f3c>
      c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      c8:	00001702 	andeq	r1, r0, r2, lsl #14
      cc:	03003412 	movweq	r3, #1042	; 0x412
      d0:	3b0b3a08 	blcc	2ce8f8 <__bss_end__+0x2c4760>
      d4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
      d8:	13000017 	movwne	r0, #23
      dc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
      e0:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
      e4:	00001802 	andeq	r1, r0, r2, lsl #16
      e8:	01828914 	orreq	r8, r2, r4, lsl r9
      ec:	31011100 	mrscc	r1, (UNDEF: 17)
      f0:	15000013 	strne	r0, [r0, #-19]
      f4:	01018289 	smlabbeq	r1, r9, r2, r8
      f8:	13310111 	teqne	r1, #1073741828	; 0x40000004
      fc:	00001301 	andeq	r1, r0, r1, lsl #6
     100:	01828a16 	orreq	r8, r2, r6, lsl sl
     104:	91180200 	tstls	r8, r0, lsl #4
     108:	00001842 	andeq	r1, r0, r2, asr #16
     10c:	01828917 	orreq	r8, r2, r7, lsl r9
     110:	31011101 	tstcc	r1, r1, lsl #2
     114:	18000013 	stmdane	r0, {r0, r1, r4}
     118:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     11c:	0b3a0e03 	bleq	e83930 <__bss_end__+0xe79798>
     120:	01110b3b 	tsteq	r1, fp, lsr fp
     124:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     128:	01194297 			; <UNDEFINED> instruction: 0x01194297
     12c:	19000013 	stmdbne	r0, {r0, r1, r4}
     130:	08030034 	stmdaeq	r3, {r2, r4, r5}
     134:	0b3b0b3a 	bleq	ec2e24 <__bss_end__+0xeb8c8c>
     138:	0b1c1349 	bleq	704e64 <__bss_end__+0x6faccc>
     13c:	0b1a0000 	bleq	680144 <__bss_end__+0x675fac>
     140:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     144:	00130106 	andseq	r0, r3, r6, lsl #2
     148:	010b1b00 	tsteq	fp, r0, lsl #22
     14c:	00001755 	andeq	r1, r0, r5, asr r7
     150:	0300341c 	movweq	r3, #1052	; 0x41c
     154:	3b0b3a0e 	blcc	2ce994 <__bss_end__+0x2c47fc>
     158:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     15c:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
     160:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     164:	0b3a0e03 	bleq	e83978 <__bss_end__+0xe797e0>
     168:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     16c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     170:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
     174:	03193f01 	tsteq	r9, #1, 30
     178:	3b0b3a0e 	blcc	2ce9b8 <__bss_end__+0x2c4820>
     17c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     180:	01193c13 	tsteq	r9, r3, lsl ip
     184:	1f000013 	svcne	0x00000013
     188:	00000018 	andeq	r0, r0, r8, lsl r0
     18c:	3f002e20 	svccc	0x00002e20
     190:	3a0e0319 	bcc	380dfc <__bss_end__+0x376c64>
     194:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     198:	00193c19 	andseq	r3, r9, r9, lsl ip
     19c:	012e2100 	teqeq	lr, r0, lsl #2
     1a0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     1a4:	0b3b0b3a 	bleq	ec2e94 <__bss_end__+0xeb8cfc>
     1a8:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     1ac:	00001301 	andeq	r1, r0, r1, lsl #6
     1b0:	01110100 	tsteq	r1, r0, lsl #2
     1b4:	0b130e25 	bleq	4c3a50 <__bss_end__+0x4b98b8>
     1b8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     1bc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     1c0:	00001710 	andeq	r1, r0, r0, lsl r7
     1c4:	0b002402 	bleq	91d4 <put16+0x4>
     1c8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     1cc:	03000008 	movweq	r0, #8
     1d0:	0b0b0024 	bleq	2c0268 <__bss_end__+0x2b60d0>
     1d4:	0e030b3e 	vmoveq.16	d3[0], r0
     1d8:	16040000 	strne	r0, [r4], -r0
     1dc:	3a0e0300 	bcc	380de4 <__bss_end__+0x376c4c>
     1e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     1e4:	05000013 	streq	r0, [r0, #-19]
     1e8:	0b0b000f 	bleq	2c022c <__bss_end__+0x2b6094>
     1ec:	0f060000 	svceq	0x00060000
     1f0:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     1f4:	07000013 	smladeq	r0, r3, r0, r0
     1f8:	13490026 	movtne	r0, #36902	; 0x9026
     1fc:	01080000 	mrseq	r0, (UNDEF: 8)
     200:	01134901 	tsteq	r3, r1, lsl #18
     204:	09000013 	stmdbeq	r0, {r0, r1, r4}
     208:	13490021 	movtne	r0, #36897	; 0x9021
     20c:	00000b2f 	andeq	r0, r0, pc, lsr #22
     210:	0301130a 	movweq	r1, #4874	; 0x130a
     214:	3a050b0e 	bcc	142e54 <__bss_end__+0x138cbc>
     218:	010b3b0b 	tsteq	fp, fp, lsl #22
     21c:	0b000013 	bleq	270 <_start-0x7d90>
     220:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     224:	0b3b0b3a 	bleq	ec2f14 <__bss_end__+0xeb8d7c>
     228:	0b381349 	bleq	e04f54 <__bss_end__+0xdfadbc>
     22c:	0d0c0000 	stceq	0, cr0, [ip, #-0]
     230:	3a080300 	bcc	200e38 <__bss_end__+0x1f6ca0>
     234:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     238:	000b3813 	andeq	r3, fp, r3, lsl r8
     23c:	01150d00 	tsteq	r5, r0, lsl #26
     240:	13011927 	movwne	r1, #6439	; 0x1927
     244:	050e0000 	streq	r0, [lr, #-0]
     248:	00134900 	andseq	r4, r3, r0, lsl #18
     24c:	00210f00 	eoreq	r0, r1, r0, lsl #30
     250:	052f1349 	streq	r1, [pc, #-841]!	; ffffff0f <__bss_end__+0xffff5d77>
     254:	13100000 	tstne	r0, #0
     258:	0b080301 	bleq	200e64 <__bss_end__+0x1f6ccc>
     25c:	3b0b3a0b 	blcc	2cea90 <__bss_end__+0x2c48f8>
     260:	0013010b 	andseq	r0, r3, fp, lsl #2
     264:	00161100 	andseq	r1, r6, r0, lsl #2
     268:	0b3a0803 	bleq	e8227c <__bss_end__+0xe780e4>
     26c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     270:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
     274:	3a0e0301 	bcc	380e80 <__bss_end__+0x376ce8>
     278:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     27c:	11134919 	tstne	r3, r9, lsl r9
     280:	40061201 	andmi	r1, r6, r1, lsl #4
     284:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     288:	00001301 	andeq	r1, r0, r1, lsl #6
     28c:	03000513 	movweq	r0, #1299	; 0x513
     290:	3b0b3a08 	blcc	2ceab8 <__bss_end__+0x2c4920>
     294:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     298:	14000017 	strne	r0, [r0], #-23
     29c:	0e03012e 	adfeqsp	f0, f3, #0.5
     2a0:	0b3b0b3a 	bleq	ec2f90 <__bss_end__+0xeb8df8>
     2a4:	01111927 	tsteq	r1, r7, lsr #18
     2a8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     2ac:	01194297 			; <UNDEFINED> instruction: 0x01194297
     2b0:	15000013 	strne	r0, [r0, #-19]
     2b4:	08030005 	stmdaeq	r3, {r0, r2}
     2b8:	0b3b0b3a 	bleq	ec2fa8 <__bss_end__+0xeb8e10>
     2bc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     2c0:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
     2c4:	11010182 	smlabbne	r1, r2, r1, r0
     2c8:	00133101 	andseq	r3, r3, r1, lsl #2
     2cc:	828a1700 	addhi	r1, sl, #0, 14
     2d0:	18020001 	stmdane	r2, {r0}
     2d4:	00184291 	mulseq	r8, r1, r2
     2d8:	00341800 	eorseq	r1, r4, r0, lsl #16
     2dc:	13490e03 	movtne	r0, #40451	; 0x9e03
     2e0:	18021934 	stmdane	r2, {r2, r4, r5, r8, fp, ip}
     2e4:	89190000 	ldmdbhi	r9, {}	; <UNPREDICTABLE>
     2e8:	11010182 	smlabbne	r1, r2, r1, r0
     2ec:	01133101 	tsteq	r3, r1, lsl #2
     2f0:	1a000013 	bne	344 <_start-0x7cbc>
     2f4:	00018289 	andeq	r8, r1, r9, lsl #5
     2f8:	13310111 	teqne	r1, #1073741828	; 0x40000004
     2fc:	341b0000 	ldrcc	r0, [fp], #-0
     300:	3a080300 	bcc	200f08 <__bss_end__+0x1f6d70>
     304:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     308:	00170213 	andseq	r0, r7, r3, lsl r2
     30c:	002e1c00 	eoreq	r1, lr, r0, lsl #24
     310:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     314:	0b3b0b3a 	bleq	ec3004 <__bss_end__+0xeb8e6c>
     318:	13491927 	movtne	r1, #39207	; 0x9927
     31c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     320:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     324:	1d000019 	stcne	0, cr0, [r0, #-100]	; 0xffffff9c
     328:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     32c:	0b3a0e03 	bleq	e83b40 <__bss_end__+0xe799a8>
     330:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     334:	01111349 	tsteq	r1, r9, asr #6
     338:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     33c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     340:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     344:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     348:	0b3b0b3a 	bleq	ec3038 <__bss_end__+0xeb8ea0>
     34c:	17021349 	strne	r1, [r2, -r9, asr #6]
     350:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
     354:	03193f00 	tsteq	r9, #0, 30
     358:	3b0b3a0e 	blcc	2ceb98 <__bss_end__+0x2c4a00>
     35c:	3c19270b 	ldccc	7, cr2, [r9], {11}
     360:	20000019 	andcs	r0, r0, r9, lsl r0
     364:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     368:	0b3a0e03 	bleq	e83b7c <__bss_end__+0xe799e4>
     36c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     370:	06120111 			; <UNDEFINED> instruction: 0x06120111
     374:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     378:	00130119 	andseq	r0, r3, r9, lsl r1
     37c:	00052100 	andeq	r2, r5, r0, lsl #2
     380:	0b3a0e03 	bleq	e83b94 <__bss_end__+0xe799fc>
     384:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     388:	00001802 	andeq	r1, r0, r2, lsl #16
     38c:	3f002e22 	svccc	0x00002e22
     390:	3a0e0319 	bcc	380ffc <__bss_end__+0x376e64>
     394:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     398:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     39c:	97184006 	ldrls	r4, [r8, -r6]
     3a0:	00001942 	andeq	r1, r0, r2, asr #18
     3a4:	03003423 	movweq	r3, #1059	; 0x423
     3a8:	3b0b3a0e 	blcc	2cebe8 <__bss_end__+0x2c4a50>
     3ac:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     3b0:	24000017 	strcs	r0, [r0], #-23
     3b4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     3b8:	0b3a0e03 	bleq	e83bcc <__bss_end__+0xe79a34>
     3bc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     3c0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     3c4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     3c8:	00130119 	andseq	r0, r3, r9, lsl r1
     3cc:	00342500 	eorseq	r2, r4, r0, lsl #10
     3d0:	0b3a0e03 	bleq	e83be4 <__bss_end__+0xe79a4c>
     3d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     3d8:	34260000 	strtcc	r0, [r6], #-0
     3dc:	3a0e0300 	bcc	380fe4 <__bss_end__+0x376e4c>
     3e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3e4:	00180213 	andseq	r0, r8, r3, lsl r2
     3e8:	00342700 	eorseq	r2, r4, r0, lsl #14
     3ec:	0b3a0803 	bleq	e82400 <__bss_end__+0xe78268>
     3f0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     3f4:	00001802 	andeq	r1, r0, r2, lsl #16
     3f8:	3f012e28 	svccc	0x00012e28
     3fc:	3a0e0319 	bcc	381068 <__bss_end__+0x376ed0>
     400:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     404:	3c134919 	ldccc	9, cr4, [r3], {25}
     408:	00130119 	andseq	r0, r3, r9, lsl r1
     40c:	00182900 	andseq	r2, r8, r0, lsl #18
     410:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
     414:	03193f01 	tsteq	r9, #1, 30
     418:	3b0b3a0e 	blcc	2cec58 <__bss_end__+0x2c4ac0>
     41c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     420:	00193c13 	andseq	r3, r9, r3, lsl ip
     424:	11010000 	mrsne	r0, (UNDEF: 1)
     428:	130e2501 	movwne	r2, #58625	; 0xe501
     42c:	1b0e030b 	blne	381060 <__bss_end__+0x376ec8>
     430:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     434:	00171006 	andseq	r1, r7, r6
     438:	00240200 	eoreq	r0, r4, r0, lsl #4
     43c:	0b3e0b0b 	bleq	f83070 <__bss_end__+0xf78ed8>
     440:	00000803 	andeq	r0, r0, r3, lsl #16
     444:	03001603 	movweq	r1, #1539	; 0x603
     448:	3b0b3a0e 	blcc	2cec88 <__bss_end__+0x2c4af0>
     44c:	0013490b 	andseq	r4, r3, fp, lsl #18
     450:	00240400 	eoreq	r0, r4, r0, lsl #8
     454:	0b3e0b0b 	bleq	f83088 <__bss_end__+0xf78ef0>
     458:	00000e03 	andeq	r0, r0, r3, lsl #28
     45c:	0b000f05 	bleq	4078 <_start-0x3f88>
     460:	0600000b 	streq	r0, [r0], -fp
     464:	0b0b000f 	bleq	2c04a8 <__bss_end__+0x2b6310>
     468:	00001349 	andeq	r1, r0, r9, asr #6
     46c:	49002607 	stmdbmi	r0, {r0, r1, r2, r9, sl, sp}
     470:	08000013 	stmdaeq	r0, {r0, r1, r4}
     474:	13490101 	movtne	r0, #37121	; 0x9101
     478:	00001301 	andeq	r1, r0, r1, lsl #6
     47c:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
     480:	000b2f13 	andeq	r2, fp, r3, lsl pc
     484:	01130a00 	tsteq	r3, r0, lsl #20
     488:	0b3a050b 	bleq	e818bc <__bss_end__+0xe77724>
     48c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     490:	0d0b0000 	stceq	0, cr0, [fp, #-0]
     494:	3a0e0300 	bcc	38109c <__bss_end__+0x376f04>
     498:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     49c:	000b3813 	andeq	r3, fp, r3, lsl r8
     4a0:	000d0c00 	andeq	r0, sp, r0, lsl #24
     4a4:	0b3a0e03 	bleq	e83cb8 <__bss_end__+0xe79b20>
     4a8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     4ac:	00000538 	andeq	r0, r0, r8, lsr r5
     4b0:	03000d0d 	movweq	r0, #3341	; 0xd0d
     4b4:	3b0b3a0e 	blcc	2cecf4 <__bss_end__+0x2c4b5c>
     4b8:	0b13490b 	bleq	4d28ec <__bss_end__+0x4c8754>
     4bc:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
     4c0:	0005380b 	andeq	r3, r5, fp, lsl #16
     4c4:	00210e00 	eoreq	r0, r1, r0, lsl #28
     4c8:	052f1349 	streq	r1, [pc, #-841]!	; 187 <_start-0x7e79>
     4cc:	350f0000 	strcc	r0, [pc, #-0]	; 4d4 <_start-0x7b2c>
     4d0:	00134900 	andseq	r4, r3, r0, lsl #18
     4d4:	012e1000 	teqeq	lr, r0
     4d8:	0b3a0e03 	bleq	e83cec <__bss_end__+0xe79b54>
     4dc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     4e0:	0b201349 	bleq	80520c <__bss_end__+0x7fb074>
     4e4:	00001301 	andeq	r1, r0, r1, lsl #6
     4e8:	03000511 	movweq	r0, #1297	; 0x511
     4ec:	3b0b3a08 	blcc	2ced14 <__bss_end__+0x2c4b7c>
     4f0:	0013490b 	andseq	r4, r3, fp, lsl #18
     4f4:	00341200 	eorseq	r1, r4, r0, lsl #4
     4f8:	0b3a0e03 	bleq	e83d0c <__bss_end__+0xe79b74>
     4fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     500:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
     504:	03193f01 	tsteq	r9, #1, 30
     508:	3b0b3a0e 	blcc	2ced48 <__bss_end__+0x2c4bb0>
     50c:	1119270b 	tstne	r9, fp, lsl #14
     510:	40061201 	andmi	r1, r6, r1, lsl #4
     514:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     518:	00001301 	andeq	r1, r0, r1, lsl #6
     51c:	03000514 	movweq	r0, #1300	; 0x514
     520:	3b0b3a08 	blcc	2ced48 <__bss_end__+0x2c4bb0>
     524:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     528:	15000017 	strne	r0, [r0, #-23]
     52c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     530:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
     534:	00001802 	andeq	r1, r0, r2, lsl #16
     538:	31011d16 	tstcc	r1, r6, lsl sp
     53c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     540:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     544:	0013010b 	andseq	r0, r3, fp, lsl #2
     548:	00051700 	andeq	r1, r5, r0, lsl #14
     54c:	17021331 	smladxne	r2, r1, r3, r1
     550:	89180000 	ldmdbhi	r8, {}	; <UNPREDICTABLE>
     554:	11010182 	smlabbne	r1, r2, r1, r0
     558:	00133101 	andseq	r3, r3, r1, lsl #2
     55c:	828a1900 	addhi	r1, sl, #0, 18
     560:	18020001 	stmdane	r2, {r0}
     564:	00184291 	mulseq	r8, r1, r2
     568:	82891a00 	addhi	r1, r9, #0, 20
     56c:	01110101 	tsteq	r1, r1, lsl #2
     570:	13011331 	movwne	r1, #4913	; 0x1331
     574:	891b0000 	ldmdbhi	fp, {}	; <UNPREDICTABLE>
     578:	11000182 	smlabbne	r0, r2, r1, r0
     57c:	00133101 	andseq	r3, r3, r1, lsl #2
     580:	00051c00 	andeq	r1, r5, r0, lsl #24
     584:	0b3a0e03 	bleq	e83d98 <__bss_end__+0xe79c00>
     588:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     58c:	00001702 	andeq	r1, r0, r2, lsl #14
     590:	0300341d 	movweq	r3, #1053	; 0x41d
     594:	3b0b3a08 	blcc	2cedbc <__bss_end__+0x2c4c24>
     598:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     59c:	1e000017 	mcrne	0, 0, r0, cr0, cr7, {0}
     5a0:	13310005 	teqne	r1, #5
     5a4:	00001802 	andeq	r1, r0, r2, lsl #16
     5a8:	31011d1f 	tstcc	r1, pc, lsl sp
     5ac:	55015213 	strpl	r5, [r1, #-531]	; 0x213
     5b0:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
     5b4:	0013010b 	andseq	r0, r3, fp, lsl #2
     5b8:	010b2000 	mrseq	r2, (UNDEF: 11)
     5bc:	00001755 	andeq	r1, r0, r5, asr r7
     5c0:	31003421 	tstcc	r0, r1, lsr #8
     5c4:	00170213 	andseq	r0, r7, r3, lsl r2
     5c8:	011d2200 	tsteq	sp, r0, lsl #4
     5cc:	01111331 	tsteq	r1, r1, lsr r3
     5d0:	0b580612 	bleq	1601e20 <__bss_end__+0x15f7c88>
     5d4:	00000b59 	andeq	r0, r0, r9, asr fp
     5d8:	3f012e23 	svccc	0x00012e23
     5dc:	3a0e0319 	bcc	381248 <__bss_end__+0x3770b0>
     5e0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     5e4:	11134919 	tstne	r3, r9, lsl r9
     5e8:	40061201 	andmi	r1, r6, r1, lsl #4
     5ec:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     5f0:	00001301 	andeq	r1, r0, r1, lsl #6
     5f4:	11010b24 	tstne	r1, r4, lsr #22
     5f8:	00061201 	andeq	r1, r6, r1, lsl #4
     5fc:	011d2500 	tsteq	sp, r0, lsl #10
     600:	01521331 	cmpeq	r2, r1, lsr r3
     604:	0b581755 	bleq	1606360 <__bss_end__+0x15fc1c8>
     608:	00000b59 	andeq	r0, r0, r9, asr fp
     60c:	03003426 	movweq	r3, #1062	; 0x426
     610:	3b0b3a08 	blcc	2cee38 <__bss_end__+0x2c4ca0>
     614:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     618:	27000018 	smladcs	r0, r8, r0, r0
     61c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     620:	0b3b0b3a 	bleq	ec3310 <__bss_end__+0xeb9178>
     624:	17021349 	strne	r1, [r2, -r9, asr #6]
     628:	0b280000 	bleq	a00630 <__bss_end__+0x9f6498>
     62c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     630:	00130106 	andseq	r0, r3, r6, lsl #2
     634:	00342900 	eorseq	r2, r4, r0, lsl #18
     638:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
     63c:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
     640:	03193f01 	tsteq	r9, #1, 30
     644:	3b0b3a0e 	blcc	2cee84 <__bss_end__+0x2c4cec>
     648:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     64c:	01193c13 	tsteq	r9, r3, lsl ip
     650:	2b000013 	blcs	6a4 <_start-0x795c>
     654:	13490005 	movtne	r0, #36869	; 0x9005
     658:	182c0000 	stmdane	ip!, {}	; <UNPREDICTABLE>
     65c:	2d000000 	stccs	0, cr0, [r0, #-0]
     660:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     664:	0b3a0e03 	bleq	e83e78 <__bss_end__+0xe79ce0>
     668:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     66c:	0000193c 	andeq	r1, r0, ip, lsr r9
     670:	3f012e2e 	svccc	0x00012e2e
     674:	3a0e0319 	bcc	3812e0 <__bss_end__+0x377148>
     678:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     67c:	3c134919 	ldccc	9, cr4, [r3], {25}
     680:	00000019 	andeq	r0, r0, r9, lsl r0
     684:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     688:	030b130e 	movweq	r1, #45838	; 0xb30e
     68c:	110e1b0e 	tstne	lr, lr, lsl #22
     690:	10061201 	andne	r1, r6, r1, lsl #4
     694:	02000017 	andeq	r0, r0, #23
     698:	0b0b0024 	bleq	2c0730 <__bss_end__+0x2b6598>
     69c:	0e030b3e 	vmoveq.16	d3[0], r0
     6a0:	24030000 	strcs	r0, [r3], #-0
     6a4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     6a8:	0008030b 	andeq	r0, r8, fp, lsl #6
     6ac:	000f0400 	andeq	r0, pc, r0, lsl #8
     6b0:	00000b0b 	andeq	r0, r0, fp, lsl #22
     6b4:	0b000f05 	bleq	42d0 <_start-0x3d30>
     6b8:	0013490b 	andseq	r4, r3, fp, lsl #18
     6bc:	00160600 	andseq	r0, r6, r0, lsl #12
     6c0:	0b3a0e03 	bleq	e83ed4 <__bss_end__+0xe79d3c>
     6c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     6c8:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
     6cc:	03193f01 	tsteq	r9, #1, 30
     6d0:	3b0b3a0e 	blcc	2cef10 <__bss_end__+0x2c4d78>
     6d4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     6d8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     6dc:	97184006 	ldrls	r4, [r8, -r6]
     6e0:	00001942 	andeq	r1, r0, r2, asr #18
     6e4:	03000508 	movweq	r0, #1288	; 0x508
     6e8:	3b0b3a08 	blcc	2cef10 <__bss_end__+0x2c4d78>
     6ec:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     6f0:	09000018 	stmdbeq	r0, {r3, r4}
     6f4:	08030005 	stmdaeq	r3, {r0, r2}
     6f8:	0b3b0b3a 	bleq	ec33e8 <__bss_end__+0xeb9250>
     6fc:	17021349 	strne	r1, [r2, -r9, asr #6]
     700:	340a0000 	strcc	r0, [sl], #-0
     704:	3a080300 	bcc	20130c <__bss_end__+0x1f7174>
     708:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     70c:	00170213 	andseq	r0, r7, r3, lsl r2
     710:	00340b00 	eorseq	r0, r4, r0, lsl #22
     714:	0b3a0803 	bleq	e82728 <__bss_end__+0xe78590>
     718:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     71c:	00001802 	andeq	r1, r0, r2, lsl #16
     720:	01110100 	tsteq	r1, r0, lsl #2
     724:	0b130e25 	bleq	4c3fc0 <__bss_end__+0x4b9e28>
     728:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     72c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     730:	00001710 	andeq	r1, r0, r0, lsl r7
     734:	03001602 	movweq	r1, #1538	; 0x602
     738:	3b0b3a0e 	blcc	2cef78 <__bss_end__+0x2c4de0>
     73c:	0013490b 	andseq	r4, r3, fp, lsl #18
     740:	01130300 	tsteq	r3, r0, lsl #6
     744:	0b0b0e03 	bleq	2c3f58 <__bss_end__+0x2b9dc0>
     748:	0b3b0b3a 	bleq	ec3438 <__bss_end__+0xeb92a0>
     74c:	00001301 	andeq	r1, r0, r1, lsl #6
     750:	03000d04 	movweq	r0, #3332	; 0xd04
     754:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
     758:	0019340b 	andseq	r3, r9, fp, lsl #8
     75c:	000f0500 	andeq	r0, pc, r0, lsl #10
     760:	00000b0b 	andeq	r0, r0, fp, lsl #22
     764:	0b002406 	bleq	9784 <__FUNCTION__.4240>
     768:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     76c:	07000008 	streq	r0, [r0, -r8]
     770:	0b0b0024 	bleq	2c0808 <__bss_end__+0x2b6670>
     774:	0e030b3e 	vmoveq.16	d3[0], r0
     778:	0f080000 	svceq	0x00080000
     77c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     780:	09000013 	stmdbeq	r0, {r0, r1, r4}
     784:	13490026 	movtne	r0, #36902	; 0x9026
     788:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
     78c:	03193f01 	tsteq	r9, #1, 30
     790:	3b0b3a0e 	blcc	2cefd0 <__bss_end__+0x2c4e38>
     794:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     798:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     79c:	97184006 	ldrls	r4, [r8, -r6]
     7a0:	13011942 	movwne	r1, #6466	; 0x1942
     7a4:	050b0000 	streq	r0, [fp, #-0]
     7a8:	3a080300 	bcc	2013b0 <__bss_end__+0x1f7218>
     7ac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     7b0:	00180213 	andseq	r0, r8, r3, lsl r2
     7b4:	00180c00 	andseq	r0, r8, r0, lsl #24
     7b8:	340d0000 	strcc	r0, [sp], #-0
     7bc:	3a080300 	bcc	2013c4 <__bss_end__+0x1f722c>
     7c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     7c4:	00180213 	andseq	r0, r8, r3, lsl r2
     7c8:	00340e00 	eorseq	r0, r4, r0, lsl #28
     7cc:	0b3a0e03 	bleq	e83fe0 <__bss_end__+0xe79e48>
     7d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     7d4:	00001802 	andeq	r1, r0, r2, lsl #16
     7d8:	0300340f 	movweq	r3, #1039	; 0x40f
     7dc:	3b0b3a08 	blcc	2cf004 <__bss_end__+0x2c4e6c>
     7e0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     7e4:	10000017 	andne	r0, r0, r7, lsl r0
     7e8:	01018289 	smlabbeq	r1, r9, r2, r8
     7ec:	13310111 	teqne	r1, #1073741828	; 0x40000004
     7f0:	00001301 	andeq	r1, r0, r1, lsl #6
     7f4:	01828a11 	orreq	r8, r2, r1, lsl sl
     7f8:	91180200 	tstls	r8, r0, lsl #4
     7fc:	00001842 	andeq	r1, r0, r2, asr #16
     800:	01828912 	orreq	r8, r2, r2, lsl r9
     804:	00011101 	andeq	r1, r1, r1, lsl #2
     808:	01011300 	mrseq	r1, SP_irq
     80c:	13011349 	movwne	r1, #4937	; 0x1349
     810:	21140000 	tstcs	r4, r0
     814:	2f134900 	svccs	0x00134900
     818:	15000005 	strne	r0, [r0, #-5]
     81c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     820:	13011349 	movwne	r1, #4937	; 0x1349
     824:	05160000 	ldreq	r0, [r6, #-0]
     828:	00134900 	andseq	r4, r3, r0, lsl #18
     82c:	00341700 	eorseq	r1, r4, r0, lsl #14
     830:	0b3a0e03 	bleq	e84044 <__bss_end__+0xe79eac>
     834:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     838:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     83c:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
     840:	03193f01 	tsteq	r9, #1, 30
     844:	3b0b3a0e 	blcc	2cf084 <__bss_end__+0x2c4eec>
     848:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     84c:	00193c13 	andseq	r3, r9, r3, lsl ip
     850:	11010000 	mrsne	r0, (UNDEF: 1)
     854:	130e2501 	movwne	r2, #58625	; 0xe501
     858:	1b0e030b 	blne	38148c <__bss_end__+0x3772f4>
     85c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     860:	00171006 	andseq	r1, r7, r6
     864:	00240200 	eoreq	r0, r4, r0, lsl #4
     868:	0b3e0b0b 	bleq	f8349c <__bss_end__+0xf79304>
     86c:	00000803 	andeq	r0, r0, r3, lsl #16
     870:	0b002403 	bleq	9884 <__FUNCTION__.4252+0xd0>
     874:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     878:	0400000e 	streq	r0, [r0], #-14
     87c:	0b0b000f 	bleq	2c08c0 <__bss_end__+0x2b6728>
     880:	00001349 	andeq	r1, r0, r9, asr #6
     884:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
     888:	06000013 			; <UNDEFINED> instruction: 0x06000013
     88c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     890:	0b3a0e03 	bleq	e840a4 <__bss_end__+0xe79f0c>
     894:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     898:	01111349 	tsteq	r1, r9, asr #6
     89c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     8a0:	01194296 			; <UNDEFINED> instruction: 0x01194296
     8a4:	07000013 	smladeq	r0, r3, r0, r0
     8a8:	08030005 	stmdaeq	r3, {r0, r2}
     8ac:	0b3b0b3a 	bleq	ec359c <__bss_end__+0xeb9404>
     8b0:	17021349 	strne	r1, [r2, -r9, asr #6]
     8b4:	15080000 	strne	r0, [r8, #-0]
     8b8:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
     8bc:	00130113 	andseq	r0, r3, r3, lsl r1
     8c0:	00050900 	andeq	r0, r5, r0, lsl #18
     8c4:	00001349 	andeq	r1, r0, r9, asr #6
     8c8:	0300340a 	movweq	r3, #1034	; 0x40a
     8cc:	3b0b3a0e 	blcc	2cf10c <__bss_end__+0x2c4f74>
     8d0:	3f13490b 	svccc	0x0013490b
     8d4:	00193c19 	andseq	r3, r9, r9, lsl ip
     8d8:	00340b00 	eorseq	r0, r4, r0, lsl #22
     8dc:	0b3a0e03 	bleq	e840f0 <__bss_end__+0xe79f58>
     8e0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     8e4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     8e8:	01000000 	mrseq	r0, (UNDEF: 0)
     8ec:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     8f0:	0e030b13 	vmoveq.32	d3[0], r0
     8f4:	01110e1b 	tsteq	r1, fp, lsl lr
     8f8:	17100612 			; <UNDEFINED> instruction: 0x17100612
     8fc:	24020000 	strcs	r0, [r2], #-0
     900:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     904:	0008030b 	andeq	r0, r8, fp, lsl #6
     908:	00240300 	eoreq	r0, r4, r0, lsl #6
     90c:	0b3e0b0b 	bleq	f83540 <__bss_end__+0xf793a8>
     910:	00000e03 	andeq	r0, r0, r3, lsl #28
     914:	0b000f04 	bleq	452c <_start-0x3ad4>
     918:	0500000b 	streq	r0, [r0, #-11]
     91c:	0b0b000f 	bleq	2c0960 <__bss_end__+0x2b67c8>
     920:	00001349 	andeq	r1, r0, r9, asr #6
     924:	49002606 	stmdbmi	r0, {r1, r2, r9, sl, sp}
     928:	07000013 	smladeq	r0, r3, r0, r0
     92c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     930:	0b3b0b3a 	bleq	ec3620 <__bss_end__+0xeb9488>
     934:	00001349 	andeq	r1, r0, r9, asr #6
     938:	03011308 	movweq	r1, #4872	; 0x1308
     93c:	3a0b0b0e 	bcc	2c357c <__bss_end__+0x2b93e4>
     940:	010b3b0b 	tsteq	fp, fp, lsl #22
     944:	09000013 	stmdbeq	r0, {r0, r1, r4}
     948:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     94c:	0b381349 	bleq	e05678 <__bss_end__+0xdfb4e0>
     950:	00001934 	andeq	r1, r0, r4, lsr r9
     954:	03012e0a 	movweq	r2, #7690	; 0x1e0a
     958:	3b0b3a0e 	blcc	2cf198 <__bss_end__+0x2c5000>
     95c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     960:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     964:	97184006 	ldrls	r4, [r8, -r6]
     968:	13011942 	movwne	r1, #6466	; 0x1942
     96c:	050b0000 	streq	r0, [fp, #-0]
     970:	3a080300 	bcc	201578 <__bss_end__+0x1f73e0>
     974:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     978:	00170213 	andseq	r0, r7, r3, lsl r2
     97c:	012e0c00 	teqeq	lr, r0, lsl #24
     980:	0b3a0803 	bleq	e82994 <__bss_end__+0xe787fc>
     984:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     988:	01111349 	tsteq	r1, r9, asr #6
     98c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     990:	01194297 			; <UNDEFINED> instruction: 0x01194297
     994:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     998:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     99c:	0b3b0b3a 	bleq	ec368c <__bss_end__+0xeb94f4>
     9a0:	17021349 	strne	r1, [r2, -r9, asr #6]
     9a4:	050e0000 	streq	r0, [lr, #-0]
     9a8:	3a0e0300 	bcc	3815b0 <__bss_end__+0x377418>
     9ac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     9b0:	00180213 	andseq	r0, r8, r3, lsl r2
     9b4:	00340f00 	eorseq	r0, r4, r0, lsl #30
     9b8:	0b3a0803 	bleq	e829cc <__bss_end__+0xe78834>
     9bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     9c0:	00001802 	andeq	r1, r0, r2, lsl #16
     9c4:	03003410 	movweq	r3, #1040	; 0x410
     9c8:	3b0b3a08 	blcc	2cf1f0 <__bss_end__+0x2c5058>
     9cc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     9d0:	11000017 	tstne	r0, r7, lsl r0
     9d4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     9d8:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
     9dc:	00001802 	andeq	r1, r0, r2, lsl #16
     9e0:	11010b12 	tstne	r1, r2, lsl fp
     9e4:	01061201 	tsteq	r6, r1, lsl #4
     9e8:	13000013 	movwne	r0, #19
     9ec:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     9f0:	0b3b0b3a 	bleq	ec36e0 <__bss_end__+0xeb9548>
     9f4:	17021349 	strne	r1, [r2, -r9, asr #6]
     9f8:	89140000 	ldmdbhi	r4, {}	; <UNPREDICTABLE>
     9fc:	11010182 	smlabbne	r1, r2, r1, r0
     a00:	01133101 	tsteq	r3, r1, lsl #2
     a04:	15000013 	strne	r0, [r0, #-19]
     a08:	0001828a 	andeq	r8, r1, sl, lsl #5
     a0c:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     a10:	16000018 			; <UNDEFINED> instruction: 0x16000018
     a14:	00018289 	andeq	r8, r1, r9, lsl #5
     a18:	13310111 	teqne	r1, #1073741828	; 0x40000004
     a1c:	89170000 	ldmdbhi	r7, {}	; <UNPREDICTABLE>
     a20:	11010182 	smlabbne	r1, r2, r1, r0
     a24:	00133101 	andseq	r3, r3, r1, lsl #2
     a28:	01011800 	tsteq	r1, r0, lsl #16
     a2c:	13011349 	movwne	r1, #4937	; 0x1349
     a30:	21190000 	tstcs	r9, r0
     a34:	2f134900 	svccs	0x00134900
     a38:	1a00000b 	bne	a6c <_start-0x7594>
     a3c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     a40:	0b3a0e03 	bleq	e84254 <__bss_end__+0xe7a0bc>
     a44:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     a48:	06120111 			; <UNDEFINED> instruction: 0x06120111
     a4c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     a50:	00130119 	andseq	r0, r3, r9, lsl r1
     a54:	01151b00 	tsteq	r5, r0, lsl #22
     a58:	13491927 	movtne	r1, #39207	; 0x9927
     a5c:	00001301 	andeq	r1, r0, r1, lsl #6
     a60:	4900051c 	stmdbmi	r0, {r2, r3, r4, r8, sl}
     a64:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
     a68:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     a6c:	0b3a0e03 	bleq	e84280 <__bss_end__+0xe7a0e8>
     a70:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     a74:	01111349 	tsteq	r1, r9, asr #6
     a78:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a7c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     a80:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     a84:	0111010b 	tsteq	r1, fp, lsl #2
     a88:	00000612 	andeq	r0, r0, r2, lsl r6
     a8c:	0300341f 	movweq	r3, #1055	; 0x41f
     a90:	3b0b3a0e 	blcc	2cf2d0 <__bss_end__+0x2c5138>
     a94:	3f13490b 	svccc	0x0013490b
     a98:	00193c19 	andseq	r3, r9, r9, lsl ip
     a9c:	012e2000 	teqeq	lr, r0
     aa0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     aa4:	0b3b0b3a 	bleq	ec3794 <__bss_end__+0xeb95fc>
     aa8:	13491927 	movtne	r1, #39207	; 0x9927
     aac:	1301193c 	movwne	r1, #6460	; 0x193c
     ab0:	18210000 	stmdane	r1!, {}	; <UNPREDICTABLE>
     ab4:	22000000 	andcs	r0, r0, #0
     ab8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     abc:	0b3a0e03 	bleq	e842d0 <__bss_end__+0xe7a138>
     ac0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     ac4:	0000193c 	andeq	r1, r0, ip, lsr r9
     ac8:	01110100 	tsteq	r1, r0, lsl #2
     acc:	0b130e25 	bleq	4c4368 <__bss_end__+0x4ba1d0>
     ad0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     ad4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     ad8:	00001710 	andeq	r1, r0, r0, lsl r7
     adc:	0b002402 	bleq	9aec <__FUNCTION__.4250+0x124>
     ae0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     ae4:	03000008 	movweq	r0, #8
     ae8:	0b0b0024 	bleq	2c0b80 <__bss_end__+0x2b69e8>
     aec:	0e030b3e 	vmoveq.16	d3[0], r0
     af0:	0f040000 	svceq	0x00040000
     af4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     af8:	05000013 	streq	r0, [r0, #-19]
     afc:	13490026 	movtne	r0, #36902	; 0x9026
     b00:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
     b04:	03193f01 	tsteq	r9, #1, 30
     b08:	3b0b3a0e 	blcc	2cf348 <__bss_end__+0x2c51b0>
     b0c:	1119270b 	tstne	r9, fp, lsl #14
     b10:	40061201 	andmi	r1, r6, r1, lsl #4
     b14:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     b18:	00001301 	andeq	r1, r0, r1, lsl #6
     b1c:	01828907 	orreq	r8, r2, r7, lsl #18
     b20:	01011101 	tsteq	r1, r1, lsl #2
     b24:	08000013 	stmdaeq	r0, {r0, r1, r4}
     b28:	0001828a 	andeq	r8, r1, sl, lsl #5
     b2c:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     b30:	09000018 	stmdbeq	r0, {r3, r4}
     b34:	01018289 	smlabbeq	r1, r9, r2, r8
     b38:	13310111 	teqne	r1, #1073741828	; 0x40000004
     b3c:	00001301 	andeq	r1, r0, r1, lsl #6
     b40:	0182890a 	orreq	r8, r2, sl, lsl #18
     b44:	31011100 	mrscc	r1, (UNDEF: 17)
     b48:	0b000013 	bleq	b9c <_start-0x7464>
     b4c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     b50:	13011349 	movwne	r1, #4937	; 0x1349
     b54:	050c0000 	streq	r0, [ip, #-0]
     b58:	00134900 	andseq	r4, r3, r0, lsl #18
     b5c:	00340d00 	eorseq	r0, r4, r0, lsl #26
     b60:	0b3a0e03 	bleq	e84374 <__bss_end__+0xe7a1dc>
     b64:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     b68:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     b6c:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
     b70:	03193f01 	tsteq	r9, #1, 30
     b74:	3b0b3a0e 	blcc	2cf3b4 <__bss_end__+0x2c521c>
     b78:	3c19270b 	ldccc	7, cr2, [r9], {11}
     b7c:	00130119 	andseq	r0, r3, r9, lsl r1
     b80:	002e0f00 	eoreq	r0, lr, r0, lsl #30
     b84:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     b88:	0b3b0b3a 	bleq	ec3878 <__bss_end__+0xeb96e0>
     b8c:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     b90:	01000000 	mrseq	r0, (UNDEF: 0)
     b94:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     b98:	0e030b13 	vmoveq.32	d3[0], r0
     b9c:	01110e1b 	tsteq	r1, fp, lsl lr
     ba0:	17100612 			; <UNDEFINED> instruction: 0x17100612
     ba4:	24020000 	strcs	r0, [r2], #-0
     ba8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     bac:	0008030b 	andeq	r0, r8, fp, lsl #6
     bb0:	00240300 	eoreq	r0, r4, r0, lsl #6
     bb4:	0b3e0b0b 	bleq	f837e8 <__bss_end__+0xf79650>
     bb8:	00000e03 	andeq	r0, r0, r3, lsl #28
     bbc:	3f012e04 	svccc	0x00012e04
     bc0:	3a0e0319 	bcc	38182c <__bss_end__+0x377694>
     bc4:	110b3b0b 	tstne	fp, fp, lsl #22
     bc8:	40061201 	andmi	r1, r6, r1, lsl #4
     bcc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     bd0:	00001301 	andeq	r1, r0, r1, lsl #6
     bd4:	03003405 	movweq	r3, #1029	; 0x405
     bd8:	3b0b3a0e 	blcc	2cf418 <__bss_end__+0x2c5280>
     bdc:	3f13490b 	svccc	0x0013490b
     be0:	00193c19 	andseq	r3, r9, r9, lsl ip
     be4:	012e0600 	teqeq	lr, r0, lsl #12
     be8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     bec:	0b3b0b3a 	bleq	ec38dc <__bss_end__+0xeb9744>
     bf0:	1301193c 	movwne	r1, #6460	; 0x193c
     bf4:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
     bf8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     bfc:	08030034 	stmdaeq	r3, {r2, r4, r5}
     c00:	0b3b0b3a 	bleq	ec38f0 <__bss_end__+0xeb9758>
     c04:	17021349 	strne	r1, [r2, -r9, asr #6]
     c08:	34090000 	strcc	r0, [r9], #-0
     c0c:	3a0e0300 	bcc	381814 <__bss_end__+0x37767c>
     c10:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c14:	0a000013 	beq	c68 <_start-0x7398>
     c18:	00018289 	andeq	r8, r1, r9, lsl #5
     c1c:	13310111 	teqne	r1, #1073741828	; 0x40000004
     c20:	0f0b0000 	svceq	0x000b0000
     c24:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     c28:	0c000013 	stceq	0, cr0, [r0], {19}
     c2c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     c30:	0b3a0e03 	bleq	e84444 <__bss_end__+0xe7a2ac>
     c34:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     c38:	0000193c 	andeq	r1, r0, ip, lsr r9
     c3c:	01110100 	tsteq	r1, r0, lsl #2
     c40:	0b130e25 	bleq	4c44dc <__bss_end__+0x4ba344>
     c44:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     c48:	01111755 	tsteq	r1, r5, asr r7
     c4c:	00001710 	andeq	r1, r0, r0, lsl r7
     c50:	0b002402 	bleq	9c60 <__FUNCTION__.4136+0xc>
     c54:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     c58:	03000008 	movweq	r0, #8
     c5c:	0b0b0024 	bleq	2c0cf4 <__bss_end__+0x2b6b5c>
     c60:	0e030b3e 	vmoveq.16	d3[0], r0
     c64:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
     c68:	03193f01 	tsteq	r9, #1, 30
     c6c:	3b0b3a0e 	blcc	2cf4ac <__bss_end__+0x2c5314>
     c70:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     c74:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     c78:	97184006 	ldrls	r4, [r8, -r6]
     c7c:	13011942 	movwne	r1, #6466	; 0x1942
     c80:	34050000 	strcc	r0, [r5], #-0
     c84:	3a0e0300 	bcc	38188c <__bss_end__+0x3776f4>
     c88:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c8c:	00170213 	andseq	r0, r7, r3, lsl r2
     c90:	012e0600 	teqeq	lr, r0, lsl #12
     c94:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     c98:	0b3b0b3a 	bleq	ec3988 <__bss_end__+0xeb97f0>
     c9c:	01111927 	tsteq	r1, r7, lsr #18
     ca0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     ca4:	01194297 			; <UNDEFINED> instruction: 0x01194297
     ca8:	07000013 	smladeq	r0, r3, r0, r0
     cac:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     cb0:	0b3b0b3a 	bleq	ec39a0 <__bss_end__+0xeb9808>
     cb4:	061c1349 	ldreq	r1, [ip], -r9, asr #6
     cb8:	34080000 	strcc	r0, [r8], #-0
     cbc:	3a0e0300 	bcc	3818c4 <__bss_end__+0x37772c>
     cc0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     cc4:	000b1c13 	andeq	r1, fp, r3, lsl ip
     cc8:	82890900 	addhi	r0, r9, #0, 18
     ccc:	01110001 	tsteq	r1, r1
     cd0:	00001331 	andeq	r1, r0, r1, lsr r3
     cd4:	0182890a 	orreq	r8, r2, sl, lsl #18
     cd8:	31011101 	tstcc	r1, r1, lsl #2
     cdc:	00130113 	andseq	r0, r3, r3, lsl r1
     ce0:	828a0b00 	addhi	r0, sl, #0, 22
     ce4:	18020001 	stmdane	r2, {r0}
     ce8:	00184291 	mulseq	r8, r1, r2
     cec:	82890c00 	addhi	r0, r9, #0, 24
     cf0:	01110101 	tsteq	r1, r1, lsl #2
     cf4:	00001331 	andeq	r1, r0, r1, lsr r3
     cf8:	4900260d 	stmdbmi	r0, {r0, r2, r3, r9, sl, sp}
     cfc:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     d00:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     d04:	0b3a0e03 	bleq	e84518 <__bss_end__+0xe7a380>
     d08:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     d0c:	1301193c 	movwne	r1, #6460	; 0x193c
     d10:	050f0000 	streq	r0, [pc, #-0]	; d18 <_start-0x72e8>
     d14:	00134900 	andseq	r4, r3, r0, lsl #18
     d18:	012e1000 	teqeq	lr, r0
     d1c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     d20:	0b3b0b3a 	bleq	ec3a10 <__bss_end__+0xeb9878>
     d24:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     d28:	01000000 	mrseq	r0, (UNDEF: 0)
     d2c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     d30:	0e030b13 	vmoveq.32	d3[0], r0
     d34:	01110e1b 	tsteq	r1, fp, lsl lr
     d38:	17100612 			; <UNDEFINED> instruction: 0x17100612
     d3c:	24020000 	strcs	r0, [r2], #-0
     d40:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     d44:	0008030b 	andeq	r0, r8, fp, lsl #6
     d48:	00240300 	eoreq	r0, r4, r0, lsl #6
     d4c:	0b3e0b0b 	bleq	f83980 <__bss_end__+0xf797e8>
     d50:	00000e03 	andeq	r0, r0, r3, lsl #28
     d54:	3f012e04 	svccc	0x00012e04
     d58:	3a0e0319 	bcc	3819c4 <__bss_end__+0x37782c>
     d5c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     d60:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     d64:	97184006 	ldrls	r4, [r8, -r6]
     d68:	13011942 	movwne	r1, #6466	; 0x1942
     d6c:	05050000 	streq	r0, [r5, #-0]
     d70:	3a0e0300 	bcc	381978 <__bss_end__+0x3777e0>
     d74:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d78:	00170213 	andseq	r0, r7, r3, lsl r2
     d7c:	012e0600 	teqeq	lr, r0, lsl #12
     d80:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     d84:	0b3b0b3a 	bleq	ec3a74 <__bss_end__+0xeb98dc>
     d88:	13491927 	movtne	r1, #39207	; 0x9927
     d8c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     d90:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     d94:	00130119 	andseq	r0, r3, r9, lsl r1
     d98:	82890700 	addhi	r0, r9, #0, 14
     d9c:	01110101 	tsteq	r1, r1, lsl #2
     da0:	00001331 	andeq	r1, r0, r1, lsr r3
     da4:	01828a08 	orreq	r8, r2, r8, lsl #20
     da8:	91180200 	tstls	r8, r0, lsl #4
     dac:	00001842 	andeq	r1, r0, r2, asr #16
     db0:	03000509 	movweq	r0, #1289	; 0x509
     db4:	3b0b3a08 	blcc	2cf5dc <__bss_end__+0x2c5444>
     db8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     dbc:	0a000017 	beq	e20 <_start-0x71e0>
     dc0:	08030034 	stmdaeq	r3, {r2, r4, r5}
     dc4:	0b3b0b3a 	bleq	ec3ab4 <__bss_end__+0xeb991c>
     dc8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     dcc:	0b0b0000 	bleq	2c0dd4 <__bss_end__+0x2b6c3c>
     dd0:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     dd4:	00130106 	andseq	r0, r3, r6, lsl #2
     dd8:	00340c00 	eorseq	r0, r4, r0, lsl #24
     ddc:	0b3a0803 	bleq	e82df0 <__bss_end__+0xe78c58>
     de0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     de4:	00001702 	andeq	r1, r0, r2, lsl #14
     de8:	0182890d 	orreq	r8, r2, sp, lsl #18
     dec:	31011100 	mrscc	r1, (UNDEF: 17)
     df0:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     df4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     df8:	0b3a0e03 	bleq	e8460c <__bss_end__+0xe7a474>
     dfc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     e00:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     e04:	050f0000 	streq	r0, [pc, #-0]	; e0c <_start-0x71f4>
     e08:	00134900 	andseq	r4, r3, r0, lsl #18
     e0c:	11010000 	mrsne	r0, (UNDEF: 1)
     e10:	130e2501 	movwne	r2, #58625	; 0xe501
     e14:	1b0e030b 	blne	381a48 <__bss_end__+0x3778b0>
     e18:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     e1c:	00171006 	andseq	r1, r7, r6
     e20:	00240200 	eoreq	r0, r4, r0, lsl #4
     e24:	0b3e0b0b 	bleq	f83a58 <__bss_end__+0xf798c0>
     e28:	00000803 	andeq	r0, r0, r3, lsl #16
     e2c:	03001603 	movweq	r1, #1539	; 0x603
     e30:	3b0b3a0e 	blcc	2cf670 <__bss_end__+0x2c54d8>
     e34:	0013490b 	andseq	r4, r3, fp, lsl #18
     e38:	00240400 	eoreq	r0, r4, r0, lsl #8
     e3c:	0b3e0b0b 	bleq	f83a70 <__bss_end__+0xf798d8>
     e40:	00000e03 	andeq	r0, r0, r3, lsl #28
     e44:	0b000f05 	bleq	4a60 <_start-0x35a0>
     e48:	0600000b 	streq	r0, [r0], -fp
     e4c:	0b0b000f 	bleq	2c0e90 <__bss_end__+0x2b6cf8>
     e50:	00001349 	andeq	r1, r0, r9, asr #6
     e54:	49002607 	stmdbmi	r0, {r0, r1, r2, r9, sl, sp}
     e58:	08000013 	stmdaeq	r0, {r0, r1, r4}
     e5c:	13490101 	movtne	r0, #37121	; 0x9101
     e60:	00001301 	andeq	r1, r0, r1, lsl #6
     e64:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
     e68:	000b2f13 	andeq	r2, fp, r3, lsl pc
     e6c:	012e0a00 	teqeq	lr, r0, lsl #20
     e70:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     e74:	0b3b0b3a 	bleq	ec3b64 <__bss_end__+0xeb99cc>
     e78:	13491927 	movtne	r1, #39207	; 0x9927
     e7c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     e80:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     e84:	00130119 	andseq	r0, r3, r9, lsl r1
     e88:	00050b00 	andeq	r0, r5, r0, lsl #22
     e8c:	0b3a0e03 	bleq	e846a0 <__bss_end__+0xe7a508>
     e90:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e94:	00001702 	andeq	r1, r0, r2, lsl #14
     e98:	0300340c 	movweq	r3, #1036	; 0x40c
     e9c:	3413490e 	ldrcc	r4, [r3], #-2318	; 0x90e
     ea0:	00180219 	andseq	r0, r8, r9, lsl r2
     ea4:	00340d00 	eorseq	r0, r4, r0, lsl #26
     ea8:	0b3a0e03 	bleq	e846bc <__bss_end__+0xe7a524>
     eac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     eb0:	00001802 	andeq	r1, r0, r2, lsl #16
     eb4:	0300340e 	movweq	r3, #1038	; 0x40e
     eb8:	3b0b3a0e 	blcc	2cf6f8 <__bss_end__+0x2c5560>
     ebc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     ec0:	0f000017 	svceq	0x00000017
     ec4:	01018289 	smlabbeq	r1, r9, r2, r8
     ec8:	13310111 	teqne	r1, #1073741828	; 0x40000004
     ecc:	00001301 	andeq	r1, r0, r1, lsl #6
     ed0:	01828a10 	orreq	r8, r2, r0, lsl sl
     ed4:	91180200 	tstls	r8, r0, lsl #4
     ed8:	00001842 	andeq	r1, r0, r2, asr #16
     edc:	01828911 	orreq	r8, r2, r1, lsl r9
     ee0:	31011100 	mrscc	r1, (UNDEF: 17)
     ee4:	12000013 	andne	r0, r0, #19
     ee8:	01018289 	smlabbeq	r1, r9, r2, r8
     eec:	13310111 	teqne	r1, #1073741828	; 0x40000004
     ef0:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
     ef4:	03193f01 	tsteq	r9, #1, 30
     ef8:	3b0b3a0e 	blcc	2cf738 <__bss_end__+0x2c55a0>
     efc:	1119270b 	tstne	r9, fp, lsl #14
     f00:	40061201 	andmi	r1, r6, r1, lsl #4
     f04:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     f08:	00001301 	andeq	r1, r0, r1, lsl #6
     f0c:	3f002e14 	svccc	0x00002e14
     f10:	3a0e0319 	bcc	381b7c <__bss_end__+0x3779e4>
     f14:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     f18:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     f1c:	97184006 	ldrls	r4, [r8, -r6]
     f20:	00001942 	andeq	r1, r0, r2, asr #18
     f24:	3f002e15 	svccc	0x00002e15
     f28:	3a0e0319 	bcc	381b94 <__bss_end__+0x3779fc>
     f2c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     f30:	11134919 	tstne	r3, r9, lsl r9
     f34:	40061201 	andmi	r1, r6, r1, lsl #4
     f38:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     f3c:	34160000 	ldrcc	r0, [r6], #-0
     f40:	3a0e0300 	bcc	381b48 <__bss_end__+0x3779b0>
     f44:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f48:	3c193f13 	ldccc	15, cr3, [r9], {19}
     f4c:	17000019 	smladne	r0, r9, r0, r0
     f50:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     f54:	0b3a0e03 	bleq	e84768 <__bss_end__+0xe7a5d0>
     f58:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     f5c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     f60:	00001301 	andeq	r1, r0, r1, lsl #6
     f64:	49000518 	stmdbmi	r0, {r3, r4, r8, sl}
     f68:	19000013 	stmdbne	r0, {r0, r1, r4}
     f6c:	00000018 	andeq	r0, r0, r8, lsl r0
     f70:	3f002e1a 	svccc	0x00002e1a
     f74:	3a0e0319 	bcc	381be0 <__bss_end__+0x377a48>
     f78:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     f7c:	00193c19 	andseq	r3, r9, r9, lsl ip
     f80:	012e1b00 	teqeq	lr, r0, lsl #22
     f84:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     f88:	0b3b0b3a 	bleq	ec3c78 <__bss_end__+0xeb9ae0>
     f8c:	13491927 	movtne	r1, #39207	; 0x9927
     f90:	0000193c 	andeq	r1, r0, ip, lsr r9
     f94:	01110100 	tsteq	r1, r0, lsl #2
     f98:	0b130e25 	bleq	4c4834 <__bss_end__+0x4ba69c>
     f9c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     fa0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     fa4:	00001710 	andeq	r1, r0, r0, lsl r7
     fa8:	0b002402 	bleq	9fb8 <buf.4133+0x22c>
     fac:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     fb0:	03000008 	movweq	r0, #8
     fb4:	0b0b0024 	bleq	2c104c <__bss_end__+0x2b6eb4>
     fb8:	0e030b3e 	vmoveq.16	d3[0], r0
     fbc:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
     fc0:	3a0e0301 	bcc	381bcc <__bss_end__+0x377a34>
     fc4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     fc8:	11134919 	tstne	r3, r9, lsl r9
     fcc:	40061201 	andmi	r1, r6, r1, lsl #4
     fd0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     fd4:	00001301 	andeq	r1, r0, r1, lsl #6
     fd8:	03000505 	movweq	r0, #1285	; 0x505
     fdc:	3b0b3a08 	blcc	2cf804 <__bss_end__+0x2c566c>
     fe0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     fe4:	06000017 			; <UNDEFINED> instruction: 0x06000017
     fe8:	01018289 	smlabbeq	r1, r9, r2, r8
     fec:	13310111 	teqne	r1, #1073741828	; 0x40000004
     ff0:	8a070000 	bhi	1c0ff8 <__bss_end__+0x1b6e60>
     ff4:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     ff8:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     ffc:	15080000 	strne	r0, [r8, #-0]
    1000:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    1004:	00130113 	andseq	r0, r3, r3, lsl r1
    1008:	00050900 	andeq	r0, r5, r0, lsl #18
    100c:	00001349 	andeq	r1, r0, r9, asr #6
    1010:	0300340a 	movweq	r3, #1034	; 0x40a
    1014:	3b0b3a0e 	blcc	2cf854 <__bss_end__+0x2c56bc>
    1018:	3f13490b 	svccc	0x0013490b
    101c:	00180219 	andseq	r0, r8, r9, lsl r2
    1020:	000f0b00 	andeq	r0, pc, r0, lsl #22
    1024:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1028:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
    102c:	03193f01 	tsteq	r9, #1, 30
    1030:	3b0b3a0e 	blcc	2cf870 <__bss_end__+0x2c56d8>
    1034:	3c19270b 	ldccc	7, cr2, [r9], {11}
    1038:	00000019 	andeq	r0, r0, r9, lsl r0

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	00000000 	andeq	r0, r0, r0
       4:	0000000f 	andeq	r0, r0, pc
       8:	0f500001 	svceq	0x00500001
       c:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
      10:	01000000 	mrseq	r0, (UNDEF: 0)
      14:	00985500 	addseq	r5, r8, r0, lsl #10
      18:	00ac0000 	adceq	r0, ip, r0
      1c:	00040000 	andeq	r0, r4, r0
      20:	9f5001f3 	svcls	0x005001f3
	...
      2c:	0000000c 	andeq	r0, r0, ip
      30:	0000000f 	andeq	r0, r0, pc
      34:	0f500001 	svceq	0x00500001
      38:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
      3c:	01000000 	mrseq	r0, (UNDEF: 0)
      40:	00985500 	addseq	r5, r8, r0, lsl #10
      44:	00ac0000 	adceq	r0, ip, r0
      48:	00040000 	andeq	r0, r4, r0
      4c:	9f5001f3 	svcls	0x005001f3
	...
      58:	00000014 	andeq	r0, r0, r4, lsl r0
      5c:	00000064 	andeq	r0, r0, r4, rrx
      60:	00540001 	subseq	r0, r4, r1
      64:	00000000 	andeq	r0, r0, r0
      68:	d0000000 	andle	r0, r0, r0
      6c:	e0000000 	and	r0, r0, r0
      70:	02000000 	andeq	r0, r0, #0
      74:	e09f3000 	adds	r3, pc, r0
      78:	9c000000 	stcls	0, cr0, [r0], {-0}
      7c:	01000001 	tsteq	r0, r1
      80:	00005500 	andeq	r5, r0, r0, lsl #10
      84:	00000000 	andeq	r0, r0, r0
      88:	00d00000 	sbcseq	r0, r0, r0
      8c:	00e00000 	rsceq	r0, r0, r0
      90:	00020000 	andeq	r0, r2, r0
      94:	00e09f30 	rsceq	r9, r0, r0, lsr pc
      98:	01100000 	tsteq	r0, r0
      9c:	00010000 	andeq	r0, r1, r0
      a0:	00000054 	andeq	r0, r0, r4, asr r0
      a4:	00000000 	andeq	r0, r0, r0
      a8:	0000ec00 	andeq	lr, r0, r0, lsl #24
      ac:	0000f800 	andeq	pc, r0, r0, lsl #16
      b0:	50000100 	andpl	r0, r0, r0, lsl #2
      b4:	000000f8 	strdeq	r0, [r0], -r8
      b8:	000000fb 	strdeq	r0, [r0], -fp
      bc:	00510001 	subseq	r0, r1, r1
	...
      c8:	04000000 	streq	r0, [r0], #-0
      cc:	01000000 	mrseq	r0, (UNDEF: 0)
      d0:	00045000 	andeq	r5, r4, r0
      d4:	00080000 	andeq	r0, r8, r0
      d8:	00040000 	andeq	r0, r4, r0
      dc:	9f5001f3 	svcls	0x005001f3
	...
      e8:	00000068 	andeq	r0, r0, r8, rrx
      ec:	00000074 	andeq	r0, r0, r4, ror r0
      f0:	74500001 	ldrbvc	r0, [r0], #-1
      f4:	77000000 	strvc	r0, [r0, -r0]
      f8:	01000000 	mrseq	r0, (UNDEF: 0)
      fc:	00775100 	rsbseq	r5, r7, r0, lsl #2
     100:	00800000 	addeq	r0, r0, r0
     104:	00040000 	andeq	r0, r4, r0
     108:	9f5001f3 	svcls	0x005001f3
	...
     114:	00000080 	andeq	r0, r0, r0, lsl #1
     118:	00000097 	muleq	r0, r7, r0
     11c:	97500001 	ldrbls	r0, [r0, -r1]
     120:	dc000000 	stcle	0, cr0, [r0], {-0}
     124:	01000000 	mrseq	r0, (UNDEF: 0)
     128:	00dc5400 	sbcseq	r5, ip, r0, lsl #8
     12c:	00e00000 	rsceq	r0, r0, r0
     130:	00010000 	andeq	r0, r1, r0
     134:	0000e050 	andeq	lr, r0, r0, asr r0
     138:	0000fc00 	andeq	pc, r0, r0, lsl #24
     13c:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     148:	000000fc 	strdeq	r0, [r0], -ip
     14c:	0000010c 	andeq	r0, r0, ip, lsl #2
     150:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     154:	20000001 	andcs	r0, r0, r1
     158:	04000001 	streq	r0, [r0], #-1
     15c:	5001f300 	andpl	pc, r1, r0, lsl #6
     160:	0001209f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
     164:	00012f00 	andeq	r2, r1, r0, lsl #30
     168:	50000100 	andpl	r0, r0, r0, lsl #2
     16c:	0000012f 	andeq	r0, r0, pc, lsr #2
     170:	00000150 	andeq	r0, r0, r0, asr r1
     174:	01f30004 	mvnseq	r0, r4
     178:	01509f50 	cmpeq	r0, r0, asr pc
     17c:	01700000 	cmneq	r0, r0
     180:	00010000 	andeq	r0, r1, r0
     184:	00017050 	andeq	r7, r1, r0, asr r0
     188:	00018c00 	andeq	r8, r1, r0, lsl #24
     18c:	f3000400 	vshl.u8	d0, d0, d0
     190:	009f5001 	addseq	r5, pc, r1
     194:	00000000 	andeq	r0, r0, r0
     198:	24000000 	strcs	r0, [r0], #-0
     19c:	2f000001 	svccs	0x00000001
     1a0:	01000001 	tsteq	r0, r1
     1a4:	01505300 	cmpeq	r0, r0, lsl #6
     1a8:	01740000 	cmneq	r4, r0
     1ac:	00010000 	andeq	r0, r1, r0
     1b0:	00000053 	andeq	r0, r0, r3, asr r0
     1b4:	00000000 	andeq	r0, r0, r0
     1b8:	00019800 	andeq	r9, r1, r0, lsl #16
     1bc:	0001a400 	andeq	sl, r1, r0, lsl #8
     1c0:	50000100 	andpl	r0, r0, r0, lsl #2
     1c4:	000001ac 	andeq	r0, r0, ip, lsr #3
     1c8:	000001c8 	andeq	r0, r0, r8, asr #3
     1cc:	dc500001 	mrrcle	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     1d0:	0c000001 	stceq	0, cr0, [r0], {1}
     1d4:	01000002 	tsteq	r0, r2
     1d8:	00005000 	andeq	r5, r0, r0
     1dc:	00000000 	andeq	r0, r0, r0
     1e0:	021c0000 	andseq	r0, ip, #0
     1e4:	022b0000 	eoreq	r0, fp, #0
     1e8:	00010000 	andeq	r0, r1, r0
     1ec:	00022b50 	andeq	r2, r2, r0, asr fp
     1f0:	00025000 	andeq	r5, r2, r0
     1f4:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     200:	0000021c 	andeq	r0, r0, ip, lsl r2
     204:	0000022b 	andeq	r0, r0, fp, lsr #4
     208:	2b510001 	blcs	1440214 <__bss_end__+0x143607c>
     20c:	50000002 	andpl	r0, r0, r2
     210:	01000002 	tsteq	r0, r2
     214:	00005500 	andeq	r5, r0, r0, lsl #10
     218:	00000000 	andeq	r0, r0, r0
     21c:	02300000 	eorseq	r0, r0, #0
     220:	023c0000 	eorseq	r0, ip, #0
     224:	00010000 	andeq	r0, r1, r0
     228:	00023c50 	andeq	r3, r2, r0, asr ip
     22c:	00025000 	andeq	r5, r2, r0
     230:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     23c:	00000270 	andeq	r0, r0, r0, ror r2
     240:	00000274 	andeq	r0, r0, r4, ror r2
     244:	74500001 	ldrbvc	r0, [r0], #-1
     248:	d0000002 	andle	r0, r0, r2
     24c:	01000002 	tsteq	r0, r2
     250:	00005500 	andeq	r5, r0, r0, lsl #10
     254:	00000000 	andeq	r0, r0, r0
     258:	02780000 	rsbseq	r0, r8, #0
     25c:	029c0000 	addseq	r0, ip, #0
     260:	00010000 	andeq	r0, r1, r0
     264:	00029c50 	andeq	r9, r2, r0, asr ip
     268:	0002ab00 	andeq	sl, r2, r0, lsl #22
     26c:	91000200 	mrsls	r0, R8_usr
     270:	0002b064 	andeq	fp, r2, r4, rrx
     274:	0002b400 	andeq	fp, r2, r0, lsl #8
     278:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     284:	0000027c 	andeq	r0, r0, ip, ror r2
     288:	000002a8 	andeq	r0, r0, r8, lsr #5
     28c:	a8530001 	ldmdage	r3, {r0}^
     290:	ab000002 	blge	2a0 <_start-0x7d60>
     294:	02000002 	andeq	r0, r0, #2
     298:	b05c9100 	subslt	r9, ip, r0, lsl #2
     29c:	b7000002 	strlt	r0, [r0, -r2]
     2a0:	01000002 	tsteq	r0, r2
     2a4:	00005300 	andeq	r5, r0, r0, lsl #6
     2a8:	00000000 	andeq	r0, r0, r0
     2ac:	03800000 	orreq	r0, r0, #0
     2b0:	03880000 	orreq	r0, r8, #0
     2b4:	00010000 	andeq	r0, r1, r0
     2b8:	00038850 	andeq	r8, r3, r0, asr r8
     2bc:	0003a800 	andeq	sl, r3, r0, lsl #16
     2c0:	f3000400 	vshl.u8	d0, d0, d0
     2c4:	009f5001 	addseq	r5, pc, r1
     2c8:	00000000 	andeq	r0, r0, r0
     2cc:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
     2d0:	b0000003 	andlt	r0, r0, r3
     2d4:	01000003 	tsteq	r0, r3
     2d8:	03b05000 	movseq	r5, #0
     2dc:	03d00000 	bicseq	r0, r0, #0
     2e0:	00040000 	andeq	r0, r4, r0
     2e4:	9f5001f3 	svcls	0x005001f3
	...
     2f4:	00000054 	andeq	r0, r0, r4, asr r0
     2f8:	54500001 	ldrbpl	r0, [r0], #-1
     2fc:	80000000 	andhi	r0, r0, r0
     300:	04000000 	streq	r0, [r0], #-0
     304:	5001f300 	andpl	pc, r1, r0, lsl #6
     308:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     30c:	00000000 	andeq	r0, r0, r0
     310:	00001800 	andeq	r1, r0, r0, lsl #16
     314:	00005400 	andeq	r5, r0, r0, lsl #8
     318:	50000100 	andpl	r0, r0, r0, lsl #2
     31c:	00000054 	andeq	r0, r0, r4, asr r0
     320:	00000080 	andeq	r0, r0, r0, lsl #1
     324:	01f30004 	mvnseq	r0, r4
     328:	00009f50 	andeq	r9, r0, r0, asr pc
     32c:	00000000 	andeq	r0, r0, r0
     330:	002c0000 	eoreq	r0, ip, r0
     334:	00540000 	subseq	r0, r4, r0
     338:	00010000 	andeq	r0, r1, r0
     33c:	00005450 	andeq	r5, r0, r0, asr r4
     340:	00008000 	andeq	r8, r0, r0
     344:	f3000400 	vshl.u8	d0, d0, d0
     348:	009f5001 	addseq	r5, pc, r1
     34c:	00000000 	andeq	r0, r0, r0
     350:	80000000 	andhi	r0, r0, r0
     354:	9c000000 	stcls	0, cr0, [r0], {-0}
     358:	01000000 	mrseq	r0, (UNDEF: 0)
     35c:	009c5000 	addseq	r5, ip, r0
     360:	00c00000 	sbceq	r0, r0, r0
     364:	00040000 	andeq	r0, r4, r0
     368:	9f5001f3 	svcls	0x005001f3
	...
     374:	000000c0 	andeq	r0, r0, r0, asr #1
     378:	000000d7 	ldrdeq	r0, [r0], -r7
     37c:	d7500001 	ldrble	r0, [r0, -r1]
     380:	64000000 	strvs	r0, [r0], #-0
     384:	01000002 	tsteq	r0, r2
     388:	00005400 	andeq	r5, r0, r0, lsl #8
     38c:	00000000 	andeq	r0, r0, r0
     390:	00c00000 	sbceq	r0, r0, r0
     394:	00d00000 	sbcseq	r0, r0, r0
     398:	00010000 	andeq	r0, r1, r0
     39c:	0000d051 	andeq	sp, r0, r1, asr r0
     3a0:	00010c00 	andeq	r0, r1, r0, lsl #24
     3a4:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     3a8:	0000010c 	andeq	r0, r0, ip, lsl #2
     3ac:	00000264 	andeq	r0, r0, r4, ror #4
     3b0:	01f30004 	mvnseq	r0, r4
     3b4:	00009f51 	andeq	r9, r0, r1, asr pc
     3b8:	00000000 	andeq	r0, r0, r0
     3bc:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
     3c0:	01d40000 	bicseq	r0, r4, r0
     3c4:	00020000 	andeq	r0, r2, r0
     3c8:	01d49f42 	bicseq	r9, r4, r2, asr #30
     3cc:	01ec0000 	mvneq	r0, r0
     3d0:	00010000 	andeq	r0, r1, r0
     3d4:	0001ec51 	andeq	lr, r1, r1, asr ip
     3d8:	0001f400 	andeq	pc, r1, r0, lsl #8
     3dc:	42000200 	andmi	r0, r0, #0, 4
     3e0:	0001f49f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
     3e4:	00022400 	andeq	r2, r2, r0, lsl #8
     3e8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     3f4:	000001cc 	andeq	r0, r0, ip, asr #3
     3f8:	000001d8 	ldrdeq	r0, [r0], -r8
     3fc:	d8520001 	ldmdale	r2, {r0}^
     400:	dc000001 	stcle	0, cr0, [r0], {1}
     404:	03000001 	movweq	r0, #1
     408:	9f7f7200 	svcls	0x007f7200
	...
     414:	00000264 	andeq	r0, r0, r4, ror #4
     418:	0000027c 	andeq	r0, r0, ip, ror r2
     41c:	7c500001 	mrrcvc	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     420:	d0000002 	andle	r0, r0, r2
     424:	01000002 	tsteq	r0, r2
     428:	00005300 	andeq	r5, r0, r0, lsl #6
     42c:	00000000 	andeq	r0, r0, r0
     430:	02980000 	addseq	r0, r8, #0
     434:	02b00000 	adcseq	r0, r0, #0
     438:	00010000 	andeq	r0, r1, r0
     43c:	00000055 	andeq	r0, r0, r5, asr r0
     440:	00000000 	andeq	r0, r0, r0
     444:	00029000 	andeq	r9, r2, r0
     448:	00029c00 	andeq	r9, r2, r0, lsl #24
     44c:	51000100 	mrspl	r0, (UNDEF: 16)
     450:	0000029c 	muleq	r0, ip, r2
     454:	000002a0 	andeq	r0, r0, r0, lsr #5
     458:	7f710003 	svcvc	0x00710003
     45c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     460:	00000000 	andeq	r0, r0, r0
     464:	0002d000 	andeq	sp, r2, r0
     468:	0002e800 	andeq	lr, r2, r0, lsl #16
     46c:	50000100 	andpl	r0, r0, r0, lsl #2
     470:	000002e8 	andeq	r0, r0, r8, ror #5
     474:	00000304 	andeq	r0, r0, r4, lsl #6
     478:	00570001 	subseq	r0, r7, r1
     47c:	00000000 	andeq	r0, r0, r0
     480:	d0000000 	andle	r0, r0, r0
     484:	e8000002 	stmda	r0, {r1}
     488:	01000002 	tsteq	r0, r2
     48c:	02e85100 	rsceq	r5, r8, #0, 2
     490:	03040000 	movweq	r0, #16384	; 0x4000
     494:	00010000 	andeq	r0, r1, r0
     498:	00000056 	andeq	r0, r0, r6, asr r0
     49c:	00000000 	andeq	r0, r0, r0
     4a0:	0002d000 	andeq	sp, r2, r0
     4a4:	0002e800 	andeq	lr, r2, r0, lsl #16
     4a8:	52000100 	andpl	r0, r0, #0, 2
     4ac:	000002e8 	andeq	r0, r0, r8, ror #5
     4b0:	00000304 	andeq	r0, r0, r4, lsl #6
     4b4:	00550001 	subseq	r0, r5, r1
     4b8:	00000000 	andeq	r0, r0, r0
     4bc:	e0000000 	and	r0, r0, r0
     4c0:	e8000002 	stmda	r0, {r1}
     4c4:	01000002 	tsteq	r0, r2
     4c8:	02e85100 	rsceq	r5, r8, #0, 2
     4cc:	03040000 	movweq	r0, #16384	; 0x4000
     4d0:	00010000 	andeq	r0, r1, r0
     4d4:	00000056 	andeq	r0, r0, r6, asr r0
     4d8:	00000000 	andeq	r0, r0, r0
     4dc:	0002e000 	andeq	lr, r2, r0
     4e0:	0002e800 	andeq	lr, r2, r0, lsl #16
     4e4:	30000200 	andcc	r0, r0, r0, lsl #4
     4e8:	0002e89f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
     4ec:	00030400 	andeq	r0, r3, r0, lsl #8
     4f0:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     4fc:	00000304 	andeq	r0, r0, r4, lsl #6
     500:	00000317 	andeq	r0, r0, r7, lsl r3
     504:	17500001 	ldrbne	r0, [r0, -r1]
     508:	5c000003 	stcpl	0, cr0, [r0], {3}
     50c:	01000003 	tsteq	r0, r3
     510:	00005400 	andeq	r5, r0, r0, lsl #8
     514:	00000000 	andeq	r0, r0, r0
     518:	03040000 	movweq	r0, #16384	; 0x4000
     51c:	03170000 	tsteq	r7, #0
     520:	00010000 	andeq	r0, r1, r0
     524:	00031751 	andeq	r1, r3, r1, asr r7
     528:	00035c00 	andeq	r5, r3, r0, lsl #24
     52c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     538:	00000304 	andeq	r0, r0, r4, lsl #6
     53c:	00000317 	andeq	r0, r0, r7, lsl r3
     540:	17520001 	ldrbne	r0, [r2, -r1]
     544:	5c000003 	stcpl	0, cr0, [r0], {3}
     548:	01000003 	tsteq	r0, r3
     54c:	00005500 	andeq	r5, r0, r0, lsl #10
     550:	00000000 	andeq	r0, r0, r0
     554:	035c0000 	cmpeq	ip, #0
     558:	03930000 	orrseq	r0, r3, #0
     55c:	00010000 	andeq	r0, r1, r0
     560:	00039350 	andeq	r9, r3, r0, asr r3
     564:	0003d800 	andeq	sp, r3, r0, lsl #16
     568:	54000100 	strpl	r0, [r0], #-256	; 0x100
     56c:	000003d8 	ldrdeq	r0, [r0], -r8
     570:	000003dc 	ldrdeq	r0, [r0], -ip
     574:	dc500001 	mrrcle	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     578:	fc000003 	stc2	0, cr0, [r0], {3}
     57c:	01000003 	tsteq	r0, r3
     580:	00005400 	andeq	r5, r0, r0, lsl #8
     584:	00000000 	andeq	r0, r0, r0
     588:	035c0000 	cmpeq	ip, #0
     58c:	03930000 	orrseq	r0, r3, #0
     590:	00010000 	andeq	r0, r1, r0
     594:	00039351 	andeq	r9, r3, r1, asr r3
     598:	0003d800 	andeq	sp, r3, r0, lsl #16
     59c:	f3000400 	vshl.u8	d0, d0, d0
     5a0:	d89f5101 	ldmle	pc, {r0, r8, ip, lr}	; <UNPREDICTABLE>
     5a4:	e0000003 	and	r0, r0, r3
     5a8:	01000003 	tsteq	r0, r3
     5ac:	03e05100 	mvneq	r5, #0, 2
     5b0:	03fc0000 	mvnseq	r0, #0
     5b4:	00040000 	andeq	r0, r4, r0
     5b8:	9f5101f3 	svcls	0x005101f3
	...
     5c4:	0000035c 	andeq	r0, r0, ip, asr r3
     5c8:	00000393 	muleq	r0, r3, r3
     5cc:	93520001 	cmpls	r2, #1
     5d0:	d8000003 	stmdale	r0, {r0, r1}
     5d4:	04000003 	streq	r0, [r0], #-3
     5d8:	5201f300 	andpl	pc, r1, #0, 6
     5dc:	0003d89f 	muleq	r3, pc, r8	; <UNPREDICTABLE>
     5e0:	0003e000 	andeq	lr, r3, r0
     5e4:	52000100 	andpl	r0, r0, #0, 2
     5e8:	000003e0 	andeq	r0, r0, r0, ror #7
     5ec:	000003fc 	strdeq	r0, [r0], -ip
     5f0:	01f30004 	mvnseq	r0, r4
     5f4:	00009f52 	andeq	r9, r0, r2, asr pc
     5f8:	00000000 	andeq	r0, r0, r0
     5fc:	03900000 	orrseq	r0, r0, #0
     600:	03d80000 	bicseq	r0, r8, #0
     604:	00010000 	andeq	r0, r1, r0
     608:	0003e056 	andeq	lr, r3, r6, asr r0
     60c:	0003fc00 	andeq	pc, r3, r0, lsl #24
     610:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     61c:	00000364 	andeq	r0, r0, r4, ror #6
     620:	00000393 	muleq	r0, r3, r3
     624:	93500001 	cmpls	r0, #1
     628:	d8000003 	stmdale	r0, {r0, r1}
     62c:	01000003 	tsteq	r0, r3
     630:	03d85400 	bicseq	r5, r8, #0, 8
     634:	03dc0000 	bicseq	r0, ip, #0
     638:	00010000 	andeq	r0, r1, r0
     63c:	0003dc50 	andeq	sp, r3, r0, asr ip
     640:	0003fc00 	andeq	pc, r3, r0, lsl #24
     644:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     650:	000003a4 	andeq	r0, r0, r4, lsr #7
     654:	000003d8 	ldrdeq	r0, [r0], -r8
     658:	e0540001 	subs	r0, r4, r1
     65c:	fc000003 	stc2	0, cr0, [r0], {3}
     660:	01000003 	tsteq	r0, r3
     664:	00005400 	andeq	r5, r0, r0, lsl #8
     668:	00000000 	andeq	r0, r0, r0
     66c:	03fc0000 	mvnseq	r0, #0
     670:	04900000 	ldreq	r0, [r0], #0
     674:	00010000 	andeq	r0, r1, r0
     678:	00049050 	andeq	r9, r4, r0, asr r0
     67c:	0004a400 	andeq	sl, r4, r0, lsl #8
     680:	f3000400 	vshl.u8	d0, d0, d0
     684:	a49f5001 	ldrge	r5, [pc], #1	; 68c <_start-0x7974>
     688:	d4000004 	strle	r0, [r0], #-4
     68c:	01000004 	tsteq	r0, r4
     690:	04d45000 	ldrbeq	r5, [r4], #0
     694:	04e80000 	strbteq	r0, [r8], #0
     698:	00040000 	andeq	r0, r4, r0
     69c:	9f5001f3 	svcls	0x005001f3
     6a0:	000004e8 	andeq	r0, r0, r8, ror #9
     6a4:	000004ec 	andeq	r0, r0, ip, ror #9
     6a8:	ec500001 	mrrc	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     6ac:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
     6b0:	04000004 	streq	r0, [r0], #-4
     6b4:	5001f300 	andpl	pc, r1, r0, lsl #6
     6b8:	0004f09f 	muleq	r4, pc, r0	; <UNPREDICTABLE>
     6bc:	0004f400 	andeq	pc, r4, r0, lsl #8
     6c0:	50000100 	andpl	r0, r0, r0, lsl #2
     6c4:	000004f4 	strdeq	r0, [r0], -r4
     6c8:	000004f8 	strdeq	r0, [r0], -r8
     6cc:	01f30004 	mvnseq	r0, r4
     6d0:	04f89f50 	ldrbteq	r9, [r8], #3920	; 0xf50
     6d4:	04fc0000 	ldrbteq	r0, [ip], #0
     6d8:	00010000 	andeq	r0, r1, r0
     6dc:	0004fc50 	andeq	pc, r4, r0, asr ip	; <UNPREDICTABLE>
     6e0:	00051800 	andeq	r1, r5, r0, lsl #16
     6e4:	f3000400 	vshl.u8	d0, d0, d0
     6e8:	009f5001 	addseq	r5, pc, r1
     6ec:	00000000 	andeq	r0, r0, r0
     6f0:	fc000000 	stc2	0, cr0, [r0], {-0}
     6f4:	94000003 	strls	r0, [r0], #-3
     6f8:	01000004 	tsteq	r0, r4
     6fc:	04945100 	ldreq	r5, [r4], #256	; 0x100
     700:	04a40000 	strteq	r0, [r4], #0
     704:	00040000 	andeq	r0, r4, r0
     708:	9f5101f3 	svcls	0x005101f3
     70c:	000004a4 	andeq	r0, r0, r4, lsr #9
     710:	000004d8 	ldrdeq	r0, [r0], -r8
     714:	d8510001 	ldmdale	r1, {r0}^
     718:	e8000004 	stmda	r0, {r2}
     71c:	04000004 	streq	r0, [r0], #-4
     720:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     724:	0004e89f 	muleq	r4, pc, r8	; <UNPREDICTABLE>
     728:	00051800 	andeq	r1, r5, r0, lsl #16
     72c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     738:	000003fc 	strdeq	r0, [r0], -ip
     73c:	00000498 	muleq	r0, r8, r4
     740:	98520001 	ldmdals	r2, {r0}^
     744:	a4000004 	strge	r0, [r0], #-4
     748:	04000004 	streq	r0, [r0], #-4
     74c:	5201f300 	andpl	pc, r1, #0, 6
     750:	0004a49f 	muleq	r4, pc, r4	; <UNPREDICTABLE>
     754:	0004c000 	andeq	ip, r4, r0
     758:	52000100 	andpl	r0, r0, #0, 2
     75c:	000004c0 	andeq	r0, r0, r0, asr #9
     760:	000004e8 	andeq	r0, r0, r8, ror #9
     764:	01f30004 	mvnseq	r0, r4
     768:	04e89f52 	strbteq	r9, [r8], #3922	; 0xf52
     76c:	04f80000 	ldrbteq	r0, [r8], #0
     770:	00010000 	andeq	r0, r1, r0
     774:	0004f852 	andeq	pc, r4, r2, asr r8	; <UNPREDICTABLE>
     778:	00051800 	andeq	r1, r5, r0, lsl #16
     77c:	f3000400 	vshl.u8	d0, d0, d0
     780:	009f5201 	addseq	r5, pc, r1, lsl #4
	...
     78c:	94000004 	strls	r0, [r0], #-4
     790:	01000004 	tsteq	r0, r4
     794:	04945100 	ldreq	r5, [r4], #256	; 0x100
     798:	04a40000 	strteq	r0, [r4], #0
     79c:	00040000 	andeq	r0, r4, r0
     7a0:	9f5101f3 	svcls	0x005101f3
     7a4:	000004a4 	andeq	r0, r0, r4, lsr #9
     7a8:	000004d8 	ldrdeq	r0, [r0], -r8
     7ac:	d8510001 	ldmdale	r1, {r0}^
     7b0:	e8000004 	stmda	r0, {r2}
     7b4:	04000004 	streq	r0, [r0], #-4
     7b8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     7bc:	0004e89f 	muleq	r4, pc, r8	; <UNPREDICTABLE>
     7c0:	00051800 	andeq	r1, r5, r0, lsl #16
     7c4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     7d0:	00000400 	andeq	r0, r0, r0, lsl #8
     7d4:	00000490 	muleq	r0, r0, r4
     7d8:	90500001 	subsls	r0, r0, r1
     7dc:	a4000004 	strge	r0, [r0], #-4
     7e0:	04000004 	streq	r0, [r0], #-4
     7e4:	5001f300 	andpl	pc, r1, r0, lsl #6
     7e8:	0004a49f 	muleq	r4, pc, r4	; <UNPREDICTABLE>
     7ec:	0004d400 	andeq	sp, r4, r0, lsl #8
     7f0:	50000100 	andpl	r0, r0, r0, lsl #2
     7f4:	000004d4 	ldrdeq	r0, [r0], -r4
     7f8:	000004e8 	andeq	r0, r0, r8, ror #9
     7fc:	01f30004 	mvnseq	r0, r4
     800:	04e89f50 	strbteq	r9, [r8], #3920	; 0xf50
     804:	04ec0000 	strbteq	r0, [ip], #0
     808:	00010000 	andeq	r0, r1, r0
     80c:	0004ec50 	andeq	lr, r4, r0, asr ip
     810:	0004f000 	andeq	pc, r4, r0
     814:	f3000400 	vshl.u8	d0, d0, d0
     818:	f09f5001 			; <UNDEFINED> instruction: 0xf09f5001
     81c:	f4000004 	vst4.8	{d0-d3}, [r0], r4
     820:	01000004 	tsteq	r0, r4
     824:	04f45000 	ldrbteq	r5, [r4], #0
     828:	04f80000 	ldrbteq	r0, [r8], #0
     82c:	00040000 	andeq	r0, r4, r0
     830:	9f5001f3 	svcls	0x005001f3
     834:	000004f8 	strdeq	r0, [r0], -r8
     838:	000004fc 	strdeq	r0, [r0], -ip
     83c:	fc500001 	mrrc2	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     840:	18000004 	stmdane	r0, {r2}
     844:	04000005 	streq	r0, [r0], #-5
     848:	5001f300 	andpl	pc, r1, r0, lsl #6
     84c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     850:	00000000 	andeq	r0, r0, r0
     854:	00044000 	andeq	r4, r4, r0
     858:	00049c00 	andeq	r9, r4, r0, lsl #24
     85c:	53000100 	movwpl	r0, #256	; 0x100
     860:	000004a4 	andeq	r0, r0, r4, lsr #9
     864:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
     868:	f0530001 			; <UNDEFINED> instruction: 0xf0530001
     86c:	f8000004 			; <UNDEFINED> instruction: 0xf8000004
     870:	01000004 	tsteq	r0, r4
     874:	00005300 	andeq	r5, r0, r0, lsl #6
     878:	00000000 	andeq	r0, r0, r0
     87c:	04440000 	strbeq	r0, [r4], #-0
     880:	04680000 	strbteq	r0, [r8], #-0
     884:	00050000 	andeq	r0, r5, r0
     888:	00730071 	rsbseq	r0, r3, r1, ror r0
     88c:	00046822 	andeq	r6, r4, r2, lsr #16
     890:	00048000 	andeq	r8, r4, r0
     894:	5a000100 	bpl	c9c <_start-0x7364>
     898:	00000480 	andeq	r0, r0, r0, lsl #9
     89c:	00000484 	andeq	r0, r0, r4, lsl #9
     8a0:	00710005 	rsbseq	r0, r1, r5
     8a4:	84220073 	strthi	r0, [r2], #-115	; 0x73
     8a8:	a8000004 	stmdage	r0, {r2}
     8ac:	01000004 	tsteq	r0, r4
     8b0:	00005a00 	andeq	r5, r0, r0, lsl #20
     8b4:	00000000 	andeq	r0, r0, r0
     8b8:	04440000 	strbeq	r0, [r4], #-0
     8bc:	04900000 	ldreq	r0, [r0], #0
     8c0:	00010000 	andeq	r0, r1, r0
     8c4:	00049050 	andeq	r9, r4, r0, asr r0
     8c8:	0004a400 	andeq	sl, r4, r0, lsl #8
     8cc:	f3000400 	vshl.u8	d0, d0, d0
     8d0:	a49f5001 	ldrge	r5, [pc], #1	; 8d8 <_start-0x7728>
     8d4:	a8000004 	stmdage	r0, {r2}
     8d8:	01000004 	tsteq	r0, r4
     8dc:	00005000 	andeq	r5, r0, r0
     8e0:	00000000 	andeq	r0, r0, r0
     8e4:	04480000 	strbeq	r0, [r8], #-0
     8e8:	046c0000 	strbteq	r0, [ip], #-0
     8ec:	00010000 	andeq	r0, r1, r0
     8f0:	00046c54 	andeq	r6, r4, r4, asr ip
     8f4:	00047000 	andeq	r7, r4, r0
     8f8:	74000300 	strvc	r0, [r0], #-768	; 0x300
     8fc:	04809f7f 	streq	r9, [r0], #3967	; 0xf7f
     900:	04840000 	streq	r0, [r4], #0
     904:	00010000 	andeq	r0, r1, r0
     908:	00000054 	andeq	r0, r0, r4, asr r0
     90c:	00000000 	andeq	r0, r0, r0
     910:	00044c00 	andeq	r4, r4, r0, lsl #24
     914:	00049000 	andeq	r9, r4, r0
     918:	50000100 	andpl	r0, r0, r0, lsl #2
     91c:	00000490 	muleq	r0, r0, r4
     920:	000004a4 	andeq	r0, r0, r4, lsr #9
     924:	01f30004 	mvnseq	r0, r4
     928:	04a49f50 	strteq	r9, [r4], #3920	; 0xf50
     92c:	04a80000 	strteq	r0, [r8], #0
     930:	00010000 	andeq	r0, r1, r0
     934:	00000050 	andeq	r0, r0, r0, asr r0
     938:	00000000 	andeq	r0, r0, r0
     93c:	0004b800 	andeq	fp, r4, r0, lsl #16
     940:	0004d400 	andeq	sp, r4, r0, lsl #8
     944:	50000100 	andpl	r0, r0, r0, lsl #2
     948:	000004d4 	ldrdeq	r0, [r0], -r4
     94c:	000004e8 	andeq	r0, r0, r8, ror #9
     950:	01f30004 	mvnseq	r0, r4
     954:	04f89f50 	ldrbteq	r9, [r8], #3920	; 0xf50
     958:	04fc0000 	ldrbteq	r0, [ip], #0
     95c:	00010000 	andeq	r0, r1, r0
     960:	0004fc50 	andeq	pc, r4, r0, asr ip	; <UNPREDICTABLE>
     964:	00051800 	andeq	r1, r5, r0, lsl #16
     968:	f3000400 	vshl.u8	d0, d0, d0
     96c:	009f5001 	addseq	r5, pc, r1
	...
     978:	04000000 	streq	r0, [r0], #-0
     97c:	01000000 	mrseq	r0, (UNDEF: 0)
     980:	00045200 	andeq	r5, r4, r0, lsl #4
     984:	00200000 	eoreq	r0, r0, r0
     988:	00040000 	andeq	r0, r4, r0
     98c:	9f5201f3 	svcls	0x005201f3
	...
     99c:	0000000c 	andeq	r0, r0, ip
     9a0:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     9a4:	14000000 	strne	r0, [r0], #-0
     9a8:	03000000 	movweq	r0, #0
     9ac:	9f017300 	svcls	0x00017300
     9b0:	00000014 	andeq	r0, r0, r4, lsl r0
     9b4:	00000020 	andeq	r0, r0, r0, lsr #32
     9b8:	00530001 	subseq	r0, r3, r1
     9bc:	00000000 	andeq	r0, r0, r0
     9c0:	2c000000 	stccs	0, cr0, [r0], {-0}
     9c4:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     9c8:	01000000 	mrseq	r0, (UNDEF: 0)
     9cc:	00385000 	eorseq	r5, r8, r0
     9d0:	00480000 	subeq	r0, r8, r0
     9d4:	00010000 	andeq	r0, r1, r0
     9d8:	00004855 	andeq	r4, r0, r5, asr r8
     9dc:	00005800 	andeq	r5, r0, r0, lsl #16
     9e0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     9f0:	00000010 	andeq	r0, r0, r0, lsl r0
     9f4:	10500001 	subsne	r0, r0, r1
     9f8:	34000000 	strcc	r0, [r0], #-0
     9fc:	01000000 	mrseq	r0, (UNDEF: 0)
     a00:	00005400 	andeq	r5, r0, r0, lsl #8
	...
     a0c:	00040000 	andeq	r0, r4, r0
     a10:	00010000 	andeq	r0, r1, r0
     a14:	00000450 	andeq	r0, r0, r0, asr r4
     a18:	00000c00 	andeq	r0, r0, r0, lsl #24
     a1c:	70000300 	andvc	r0, r0, r0, lsl #6
     a20:	000c9f30 	andeq	r9, ip, r0, lsr pc
     a24:	00140000 	andseq	r0, r4, r0
     a28:	00040000 	andeq	r0, r4, r0
     a2c:	9f5001f3 	svcls	0x005001f3
	...
     a38:	00000014 	andeq	r0, r0, r4, lsl r0
     a3c:	00000020 	andeq	r0, r0, r0, lsr #32
     a40:	20500001 	subscs	r0, r0, r1
     a44:	2c000000 	stccs	0, cr0, [r0], {-0}
     a48:	03000000 	movweq	r0, #0
     a4c:	9f017000 	svcls	0x00017000
     a50:	0000002c 	andeq	r0, r0, ip, lsr #32
     a54:	00000040 	andeq	r0, r0, r0, asr #32
     a58:	00500001 	subseq	r0, r0, r1
     a5c:	00000000 	andeq	r0, r0, r0
     a60:	14000000 	strne	r0, [r0], #-0
     a64:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     a68:	01000000 	mrseq	r0, (UNDEF: 0)
     a6c:	00185100 	andseq	r5, r8, r0, lsl #2
     a70:	00400000 	subeq	r0, r0, r0
     a74:	00040000 	andeq	r0, r4, r0
     a78:	9f5101f3 	svcls	0x005101f3
	...
     a84:	00000040 	andeq	r0, r0, r0, asr #32
     a88:	00000060 	andeq	r0, r0, r0, rrx
     a8c:	60500001 	subsvs	r0, r0, r1
     a90:	6c000000 	stcvs	0, cr0, [r0], {-0}
     a94:	03000000 	movweq	r0, #0
     a98:	9f017100 	svcls	0x00017100
     a9c:	0000006c 	andeq	r0, r0, ip, rrx
     aa0:	00000074 	andeq	r0, r0, r4, ror r0
     aa4:	74510001 	ldrbvc	r0, [r1], #-1
     aa8:	80000000 	andhi	r0, r0, r0
     aac:	03000000 	movweq	r0, #0
     ab0:	9f017100 	svcls	0x00017100
	...
     abc:	00000040 	andeq	r0, r0, r0, asr #32
     ac0:	00000050 	andeq	r0, r0, r0, asr r0
     ac4:	50510001 	subspl	r0, r1, r1
     ac8:	80000000 	andhi	r0, r0, r0
     acc:	04000000 	streq	r0, [r0], #-0
     ad0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     ad4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     ad8:	00000000 	andeq	r0, r0, r0
     adc:	00004000 	andeq	r4, r0, r0
     ae0:	00005800 	andeq	r5, r0, r0, lsl #16
     ae4:	52000100 	andpl	r0, r0, #0, 2
     ae8:	00000058 	andeq	r0, r0, r8, asr r0
     aec:	00000064 	andeq	r0, r0, r4, rrx
     af0:	64520001 	ldrbvs	r0, [r2], #-1
     af4:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     af8:	03000000 	movweq	r0, #0
     afc:	9f017200 	svcls	0x00017200
     b00:	00000068 	andeq	r0, r0, r8, rrx
     b04:	00000080 	andeq	r0, r0, r0, lsl #1
     b08:	00520001 	subseq	r0, r2, r1
     b0c:	00000000 	andeq	r0, r0, r0
     b10:	40000000 	andmi	r0, r0, r0
     b14:	54000000 	strpl	r0, [r0], #-0
     b18:	01000000 	mrseq	r0, (UNDEF: 0)
     b1c:	00545300 	subseq	r5, r4, r0, lsl #6
     b20:	00780000 	rsbseq	r0, r8, r0
     b24:	00010000 	andeq	r0, r1, r0
     b28:	00000053 	andeq	r0, r0, r3, asr r0
     b2c:	00000000 	andeq	r0, r0, r0
     b30:	00004800 	andeq	r4, r0, r0, lsl #16
     b34:	00006000 	andeq	r6, r0, r0
     b38:	5c000100 	stfpls	f0, [r0], {-0}
     b3c:	00000060 	andeq	r0, r0, r0, rrx
     b40:	00000080 	andeq	r0, r0, r0, lsl #1
     b44:	01f3000a 	mvnseq	r0, sl
     b48:	5301f352 	movwpl	pc, #4946	; 0x1352	; <UNPREDICTABLE>
     b4c:	9f01231c 	svcls	0x0001231c
	...
     b58:	00000080 	andeq	r0, r0, r0, lsl #1
     b5c:	000000a4 	andeq	r0, r0, r4, lsr #1
     b60:	a4500001 	ldrbge	r0, [r0], #-1
     b64:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     b68:	03000001 	movweq	r0, #1
     b6c:	9f027000 	svcls	0x00027000
     b70:	00000118 	andeq	r0, r0, r8, lsl r1
     b74:	00000218 	andeq	r0, r0, r8, lsl r2
     b78:	01f30004 	mvnseq	r0, r4
     b7c:	00009f50 	andeq	r9, r0, r0, asr pc
     b80:	00000000 	andeq	r0, r0, r0
     b84:	00800000 	addeq	r0, r0, r0
     b88:	00f00000 	rscseq	r0, r0, r0
     b8c:	00010000 	andeq	r0, r1, r0
     b90:	0000f051 	andeq	pc, r0, r1, asr r0	; <UNPREDICTABLE>
     b94:	00016000 	andeq	r6, r1, r0
     b98:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     b9c:	00000160 	andeq	r0, r0, r0, ror #2
     ba0:	00000168 	andeq	r0, r0, r8, ror #2
     ba4:	68510001 	ldmdavs	r1, {r0}^
     ba8:	88000001 	stmdahi	r0, {r0}
     bac:	01000001 	tsteq	r0, r1
     bb0:	01885500 	orreq	r5, r8, r0, lsl #10
     bb4:	019c0000 	orrseq	r0, ip, r0
     bb8:	00010000 	andeq	r0, r1, r0
     bbc:	00019c51 	andeq	r9, r1, r1, asr ip
     bc0:	0001bc00 	andeq	fp, r1, r0, lsl #24
     bc4:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     bc8:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     bcc:	000001c4 	andeq	r0, r0, r4, asr #3
     bd0:	c4510001 	ldrbgt	r0, [r1], #-1
     bd4:	fc000001 	stc2	0, cr0, [r0], {1}
     bd8:	01000001 	tsteq	r0, r1
     bdc:	01fc5500 	mvnseq	r5, r0, lsl #10
     be0:	02180000 	andseq	r0, r8, #0
     be4:	00040000 	andeq	r0, r4, r0
     be8:	9f5101f3 	svcls	0x005101f3
	...
     bf4:	00000080 	andeq	r0, r0, r0, lsl #1
     bf8:	00000094 	muleq	r0, r4, r0
     bfc:	94520001 	ldrbls	r0, [r2], #-1
     c00:	fc000000 	stc2	0, cr0, [r0], {-0}
     c04:	01000001 	tsteq	r0, r1
     c08:	01fc5400 	mvnseq	r5, r0, lsl #8
     c0c:	02180000 	andseq	r0, r8, #0
     c10:	00040000 	andeq	r0, r4, r0
     c14:	9f5201f3 	svcls	0x005201f3
	...
     c20:	00000080 	andeq	r0, r0, r0, lsl #1
     c24:	00000100 	andeq	r0, r0, r0, lsl #2
     c28:	04530001 	ldrbeq	r0, [r3], #-1
     c2c:	08000001 	stmdaeq	r0, {r0}
     c30:	01000001 	tsteq	r0, r1
     c34:	01605300 	cmneq	r0, r0, lsl #6
     c38:	01680000 	cmneq	r8, r0
     c3c:	00010000 	andeq	r0, r1, r0
     c40:	00016853 	andeq	r6, r1, r3, asr r8
     c44:	00018800 	andeq	r8, r1, r0, lsl #16
     c48:	f3000400 	vshl.u8	d0, d0, d0
     c4c:	889f5301 	ldmhi	pc, {r0, r8, r9, ip, lr}	; <UNPREDICTABLE>
     c50:	90000001 	andls	r0, r0, r1
     c54:	01000001 	tsteq	r0, r1
     c58:	01905300 	orrseq	r5, r0, r0, lsl #6
     c5c:	01940000 	orrseq	r0, r4, r0
     c60:	00010000 	andeq	r0, r1, r0
     c64:	0001945c 	andeq	r9, r1, ip, asr r4
     c68:	00019c00 	andeq	r9, r1, r0, lsl #24
     c6c:	53000100 	movwpl	r0, #256	; 0x100
     c70:	0000019c 	muleq	r0, ip, r1
     c74:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     c78:	01f30004 	mvnseq	r0, r4
     c7c:	01bc9f53 			; <UNDEFINED> instruction: 0x01bc9f53
     c80:	01cc0000 	biceq	r0, ip, r0
     c84:	00010000 	andeq	r0, r1, r0
     c88:	0001cc53 	andeq	ip, r1, r3, asr ip
     c8c:	0001cf00 	andeq	ip, r1, r0, lsl #30
     c90:	5c000100 	stfpls	f0, [r0], {-0}
     c94:	000001cf 	andeq	r0, r0, pc, asr #3
     c98:	000001d4 	ldrdeq	r0, [r0], -r4
     c9c:	01f30004 	mvnseq	r0, r4
     ca0:	00009f53 	andeq	r9, r0, r3, asr pc
     ca4:	00000000 	andeq	r0, r0, r0
     ca8:	00800000 	addeq	r0, r0, r0
     cac:	009c0000 	addseq	r0, ip, r0
     cb0:	00020000 	andeq	r0, r2, r0
     cb4:	009c0091 	umullseq	r0, ip, r1, r0
     cb8:	01c80000 	biceq	r0, r8, r0
     cbc:	00010000 	andeq	r0, r1, r0
     cc0:	0001d452 	andeq	sp, r1, r2, asr r4
     cc4:	0001df00 	andeq	sp, r1, r0, lsl #30
     cc8:	52000100 	andpl	r0, r0, #0, 2
	...
     cd4:	0000009c 	muleq	r0, ip, r0
     cd8:	00000118 	andeq	r0, r0, r8, lsl r1
     cdc:	185d0001 	ldmdane	sp, {r0}^
     ce0:	1c000001 	stcne	0, cr0, [r0], {1}
     ce4:	01000001 	tsteq	r0, r1
     ce8:	011c5300 	tsteq	ip, r0, lsl #6
     cec:	01200000 	teqeq	r0, r0
     cf0:	00010000 	andeq	r0, r1, r0
     cf4:	00012051 	andeq	r2, r1, r1, asr r0
     cf8:	00016000 	andeq	r6, r1, r0
     cfc:	53000100 	movwpl	r0, #256	; 0x100
     d00:	00000160 	andeq	r0, r0, r0, ror #2
     d04:	00000168 	andeq	r0, r0, r8, ror #2
     d08:	685d0001 	ldmdavs	sp, {r0}^
     d0c:	6c000001 	stcvs	0, cr0, [r0], {1}
     d10:	01000001 	tsteq	r0, r1
     d14:	016c5e00 	cmneq	ip, r0, lsl #28
     d18:	01880000 	orreq	r0, r8, r0
     d1c:	00010000 	andeq	r0, r1, r0
     d20:	00018853 	andeq	r8, r1, r3, asr r8
     d24:	00019000 	andeq	r9, r1, r0
     d28:	91000400 	tstls	r0, r0, lsl #8
     d2c:	909f7fa1 	addsls	r7, pc, r1, lsr #31
     d30:	94000001 	strls	r0, [r0], #-1
     d34:	01000001 	tsteq	r0, r1
     d38:	01945300 	orrseq	r5, r4, r0, lsl #6
     d3c:	019c0000 	orrseq	r0, ip, r0
     d40:	00010000 	andeq	r0, r1, r0
     d44:	00019c5d 	andeq	r9, r1, sp, asr ip
     d48:	0001a000 	andeq	sl, r1, r0
     d4c:	5e000100 	adfpls	f0, f0, f0
     d50:	000001a0 	andeq	r0, r0, r0, lsr #3
     d54:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     d58:	bc530001 	mrrclt	0, 0, r0, r3, cr1
     d5c:	d4000001 	strle	r0, [r0], #-1
     d60:	01000001 	tsteq	r0, r1
     d64:	01d45d00 	bicseq	r5, r4, r0, lsl #26
     d68:	01df0000 	bicseq	r0, pc, r0
     d6c:	00010000 	andeq	r0, r1, r0
     d70:	00000053 	andeq	r0, r0, r3, asr r0
     d74:	00000000 	andeq	r0, r0, r0
     d78:	0000a000 	andeq	sl, r0, r0
     d7c:	0000ec00 	andeq	lr, r0, r0, lsl #24
     d80:	5c000100 	stfpls	f0, [r0], {-0}
     d84:	000000ec 	andeq	r0, r0, ip, ror #1
     d88:	00000100 	andeq	r0, r0, r0, lsl #2
     d8c:	00530001 	subseq	r0, r3, r1
     d90:	04000001 	streq	r0, [r0], #-1
     d94:	01000001 	tsteq	r0, r1
     d98:	01045c00 	tsteq	r4, r0, lsl #24
     d9c:	01080000 	mrseq	r0, (UNDEF: 8)
     da0:	00010000 	andeq	r0, r1, r0
     da4:	00010853 	andeq	r0, r1, r3, asr r8
     da8:	00011800 	andeq	r1, r1, r0, lsl #16
     dac:	5c000100 	stfpls	f0, [r0], {-0}
     db0:	00000118 	andeq	r0, r0, r8, lsl r1
     db4:	0000011c 	andeq	r0, r0, ip, lsl r1
     db8:	1c500001 	mrrcne	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     dbc:	3c000001 	stccc	0, cr0, [r0], {1}
     dc0:	01000001 	tsteq	r0, r1
     dc4:	01445c00 	cmpeq	r4, r0, lsl #24
     dc8:	01580000 	cmpeq	r8, r0
     dcc:	00010000 	andeq	r0, r1, r0
     dd0:	00015850 	andeq	r5, r1, r0, asr r8
     dd4:	00016000 	andeq	r6, r1, r0
     dd8:	5c000100 	stfpls	f0, [r0], {-0}
     ddc:	00000160 	andeq	r0, r0, r0, ror #2
     de0:	00000168 	andeq	r0, r0, r8, ror #2
     de4:	68530001 	ldmdavs	r3, {r0}^
     de8:	78000001 	stmdavc	r0, {r0}
     dec:	01000001 	tsteq	r0, r1
     df0:	01785c00 	cmneq	r8, r0, lsl #24
     df4:	01800000 	orreq	r0, r0, r0
     df8:	00050000 	andeq	r0, r5, r0
     dfc:	2534007c 	ldrcs	r0, [r4, #-124]!	; 0x7c
     e00:	0001809f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
     e04:	00018800 	andeq	r8, r1, r0, lsl #16
     e08:	5c000100 	stfpls	f0, [r0], {-0}
     e0c:	00000188 	andeq	r0, r0, r8, lsl #3
     e10:	00000190 	muleq	r0, r0, r1
     e14:	90530001 	subsls	r0, r3, r1
     e18:	94000001 	strls	r0, [r0], #-1
     e1c:	01000001 	tsteq	r0, r1
     e20:	01945c00 	orrseq	r5, r4, r0, lsl #24
     e24:	019c0000 	orrseq	r0, ip, r0
     e28:	00010000 	andeq	r0, r1, r0
     e2c:	00019c53 	andeq	r9, r1, r3, asr ip
     e30:	0001ac00 	andeq	sl, r1, r0, lsl #24
     e34:	5c000100 	stfpls	f0, [r0], {-0}
     e38:	000001ac 	andeq	r0, r0, ip, lsr #3
     e3c:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
     e40:	007c0005 	rsbseq	r0, ip, r5
     e44:	b49f2531 	ldrlt	r2, [pc], #1329	; e4c <_start-0x71b4>
     e48:	bc000001 	stclt	0, cr0, [r0], {1}
     e4c:	01000001 	tsteq	r0, r1
     e50:	01bc5c00 			; <UNDEFINED> instruction: 0x01bc5c00
     e54:	01cc0000 	biceq	r0, ip, r0
     e58:	00010000 	andeq	r0, r1, r0
     e5c:	0001cc53 	andeq	ip, r1, r3, asr ip
     e60:	0001cf00 	andeq	ip, r1, r0, lsl #30
     e64:	5c000100 	stfpls	f0, [r0], {-0}
     e68:	000001cf 	andeq	r0, r0, pc, asr #3
     e6c:	000001d4 	ldrdeq	r0, [r0], -r4
     e70:	01f30004 	mvnseq	r0, r4
     e74:	01d49f53 	bicseq	r9, r4, r3, asr pc
     e78:	01df0000 	bicseq	r0, pc, r0
     e7c:	00010000 	andeq	r0, r1, r0
     e80:	0000005c 	andeq	r0, r0, ip, asr r0
     e84:	00000000 	andeq	r0, r0, r0
     e88:	0000ec00 	andeq	lr, r0, r0, lsl #24
     e8c:	0000fc00 	andeq	pc, r0, r0, lsl #24
     e90:	30000200 	andcc	r0, r0, r0, lsl #4
     e94:	0000fc9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
     e98:	00010400 	andeq	r0, r1, r0, lsl #8
     e9c:	31000200 	mrscc	r0, R8_usr
     ea0:	0001049f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
     ea4:	00010800 	andeq	r0, r1, r0, lsl #16
     ea8:	30000200 	andcc	r0, r0, r0, lsl #4
     eac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     eb0:	00000000 	andeq	r0, r0, r0
     eb4:	00021800 	andeq	r1, r2, r0, lsl #16
     eb8:	00022800 	andeq	r2, r2, r0, lsl #16
     ebc:	50000100 	andpl	r0, r0, r0, lsl #2
     ec0:	00000228 	andeq	r0, r0, r8, lsr #4
     ec4:	0000023c 	andeq	r0, r0, ip, lsr r2
     ec8:	01f30004 	mvnseq	r0, r4
     ecc:	023c9f50 	eorseq	r9, ip, #80, 30	; 0x140
     ed0:	02680000 	rsbeq	r0, r8, #0
     ed4:	00010000 	andeq	r0, r1, r0
     ed8:	00000050 	andeq	r0, r0, r0, asr r0
     edc:	00000000 	andeq	r0, r0, r0
     ee0:	00021800 	andeq	r1, r2, r0, lsl #16
     ee4:	00022c00 	andeq	r2, r2, r0, lsl #24
     ee8:	51000100 	mrspl	r0, (UNDEF: 16)
     eec:	0000022c 	andeq	r0, r0, ip, lsr #4
     ef0:	0000023c 	andeq	r0, r0, ip, lsr r2
     ef4:	01f30004 	mvnseq	r0, r4
     ef8:	023c9f51 	eorseq	r9, ip, #324	; 0x144
     efc:	02680000 	rsbeq	r0, r8, #0
     f00:	00010000 	andeq	r0, r1, r0
     f04:	00000051 	andeq	r0, r0, r1, asr r0
     f08:	00000000 	andeq	r0, r0, r0
     f0c:	00026800 	andeq	r6, r2, r0, lsl #16
     f10:	00029000 	andeq	r9, r2, r0
     f14:	50000100 	andpl	r0, r0, r0, lsl #2
     f18:	00000290 	muleq	r0, r0, r2
     f1c:	000004dc 	ldrdeq	r0, [r0], -ip
     f20:	dc5b0001 	mrrcle	0, 0, r0, fp, cr1
     f24:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
     f28:	04000004 	streq	r0, [r0], #-4
     f2c:	5001f300 	andpl	pc, r1, r0, lsl #6
     f30:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     f34:	00000000 	andeq	r0, r0, r0
     f38:	00026800 	andeq	r6, r2, r0, lsl #16
     f3c:	00027c00 	andeq	r7, r2, r0, lsl #24
     f40:	51000100 	mrspl	r0, (UNDEF: 16)
     f44:	0000027c 	andeq	r0, r0, ip, ror r2
     f48:	00000290 	muleq	r0, r0, r2
     f4c:	01710003 	cmneq	r1, r3
     f50:	0002909f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
     f54:	0004f000 	andeq	pc, r4, r0
     f58:	f3000400 	vshl.u8	d0, d0, d0
     f5c:	009f5101 	addseq	r5, pc, r1, lsl #2
     f60:	00000000 	andeq	r0, r0, r0
     f64:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     f68:	98000002 	stmdals	r0, {r1}
     f6c:	01000002 	tsteq	r0, r2
     f70:	02985200 	addseq	r5, r8, #0, 4
     f74:	02c00000 	sbceq	r0, r0, #0
     f78:	00010000 	andeq	r0, r1, r0
     f7c:	0002c052 	andeq	ip, r2, r2, asr r0
     f80:	00048c00 	andeq	r8, r4, r0, lsl #24
     f84:	56000100 	strpl	r0, [r0], -r0, lsl #2
     f88:	0000048c 	andeq	r0, r0, ip, lsl #9
     f8c:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     f90:	00520001 	subseq	r0, r2, r1
     f94:	00000000 	andeq	r0, r0, r0
     f98:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     f9c:	84000002 	strhi	r0, [r0], #-2
     fa0:	01000002 	tsteq	r0, r2
     fa4:	00005300 	andeq	r5, r0, r0, lsl #6
     fa8:	00000000 	andeq	r0, r0, r0
     fac:	02780000 	rsbseq	r0, r8, #0
     fb0:	02900000 	addseq	r0, r0, #0
     fb4:	00010000 	andeq	r0, r1, r0
     fb8:	00029050 	andeq	r9, r2, r0, asr r0
     fbc:	00029400 	andeq	r9, r2, r0, lsl #8
     fc0:	54000100 	strpl	r0, [r0], #-256	; 0x100
     fc4:	00000294 	muleq	r0, r4, r2
     fc8:	000002a0 	andeq	r0, r0, r0, lsr #5
     fcc:	01740003 	cmneq	r4, r3
     fd0:	0002a09f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
     fd4:	0002ac00 	andeq	sl, r2, r0, lsl #24
     fd8:	54000100 	strpl	r0, [r0], #-256	; 0x100
     fdc:	000002ac 	andeq	r0, r0, ip, lsr #5
     fe0:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
     fe4:	01740003 	cmneq	r4, r3
     fe8:	0002b89f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
     fec:	00049000 	andeq	r9, r4, r0
     ff0:	54000100 	strpl	r0, [r0], #-256	; 0x100
     ff4:	00000490 	muleq	r0, r0, r4
     ff8:	0000049c 	muleq	r0, ip, r4
     ffc:	01740003 	cmneq	r4, r3
    1000:	00049c9f 	muleq	r4, pc, ip	; <UNPREDICTABLE>
    1004:	0004c800 	andeq	ip, r4, r0, lsl #16
    1008:	54000100 	strpl	r0, [r0], #-256	; 0x100
    100c:	000004c8 	andeq	r0, r0, r8, asr #9
    1010:	000004d4 	ldrdeq	r0, [r0], -r4
    1014:	d4500001 	ldrble	r0, [r0], #-1
    1018:	dc000004 	stcle	0, cr0, [r0], {4}
    101c:	03000004 	movweq	r0, #4
    1020:	9f017400 	svcls	0x00017400
	...
    102c:	00000280 	andeq	r0, r0, r0, lsl #5
    1030:	000004dc 	ldrdeq	r0, [r0], -ip
    1034:	dc580001 	mrrcle	0, 0, r0, r8, cr1
    1038:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
    103c:	0a000004 	beq	1054 <_start-0x6fac>
    1040:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1044:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    1048:	009f1c31 	addseq	r1, pc, r1, lsr ip	; <UNPREDICTABLE>
    104c:	00000000 	andeq	r0, r0, r0
    1050:	bc000000 	stclt	0, cr0, [r0], {-0}
    1054:	c0000003 	andgt	r0, r0, r3
    1058:	01000003 	tsteq	r0, r3
    105c:	03e45000 	mvneq	r5, #0
    1060:	03e80000 	mvneq	r0, #0
    1064:	00010000 	andeq	r0, r1, r0
    1068:	00040c50 	andeq	r0, r4, r0, asr ip
    106c:	00041000 	andeq	r1, r4, r0
    1070:	50000100 	andpl	r0, r0, r0, lsl #2
    1074:	00000434 	andeq	r0, r0, r4, lsr r4
    1078:	00000438 	andeq	r0, r0, r8, lsr r4
    107c:	40500001 	subsmi	r0, r0, r1
    1080:	44000004 	strmi	r0, [r0], #-4
    1084:	01000004 	tsteq	r0, r4
    1088:	04685000 	strbteq	r5, [r8], #-0
    108c:	046c0000 	strbteq	r0, [ip], #-0
    1090:	00010000 	andeq	r0, r1, r0
    1094:	00048850 	andeq	r8, r4, r0, asr r8
    1098:	0004b000 	andeq	fp, r4, r0
    109c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    10a8:	000002c0 	andeq	r0, r0, r0, asr #5
    10ac:	000002c8 	andeq	r0, r0, r8, asr #5
    10b0:	9f300002 	svcls	0x00300002
    10b4:	000002c8 	andeq	r0, r0, r8, asr #5
    10b8:	000002cc 	andeq	r0, r0, ip, asr #5
    10bc:	d8570001 	ldmdale	r7, {r0}^
    10c0:	b0000002 	andlt	r0, r0, r2
    10c4:	01000004 	tsteq	r0, r4
    10c8:	00005700 	andeq	r5, r0, r0, lsl #14
    10cc:	00000000 	andeq	r0, r0, r0
    10d0:	00140000 	andseq	r0, r4, r0
    10d4:	001c0000 	andseq	r0, ip, r0
    10d8:	00030000 	andeq	r0, r3, r0
    10dc:	1c9f0473 	cfldrsne	mvf0, [pc], {115}	; 0x73
    10e0:	27000000 	strcs	r0, [r0, -r0]
    10e4:	01000000 	mrseq	r0, (UNDEF: 0)
    10e8:	00005300 	andeq	r5, r0, r0, lsl #6
    10ec:	00000000 	andeq	r0, r0, r0
    10f0:	90d00000 	sbcsls	r0, r0, r0
    10f4:	90d40000 	sbcsls	r0, r4, r0
    10f8:	00020000 	andeq	r0, r2, r0
    10fc:	90d49f30 	sbcsls	r9, r4, r0, lsr pc
    1100:	90d80000 	sbcsls	r0, r8, r0
    1104:	00010000 	andeq	r0, r1, r0
    1108:	00000050 	andeq	r0, r0, r0, asr r0
    110c:	00000000 	andeq	r0, r0, r0
    1110:	0090e800 	addseq	lr, r0, r0, lsl #16
    1114:	0090ec00 	addseq	lr, r0, r0, lsl #24
    1118:	30000200 	andcc	r0, r0, r0, lsl #4
    111c:	0090ec9f 	umullseq	lr, r0, pc, ip	; <UNPREDICTABLE>
    1120:	0090f000 	addseq	pc, r0, r0
    1124:	53000100 	movwpl	r0, #256	; 0x100
    1128:	000090f4 	strdeq	r9, [r0], -r4
    112c:	000090fc 	strdeq	r9, [r0], -ip
    1130:	00530001 	subseq	r0, r3, r1
	...
    113c:	04000000 	streq	r0, [r0], #-0
    1140:	01000000 	mrseq	r0, (UNDEF: 0)
    1144:	00045000 	andeq	r5, r4, r0
    1148:	000c0000 	andeq	r0, ip, r0
    114c:	00010000 	andeq	r0, r1, r0
    1150:	00000c53 	andeq	r0, r0, r3, asr ip
    1154:	00001000 	andeq	r1, r0, r0
    1158:	50000100 	andpl	r0, r0, r0, lsl #2
    115c:	00000010 	andeq	r0, r0, r0, lsl r0
    1160:	0000001c 	andeq	r0, r0, ip, lsl r0
    1164:	00530001 	subseq	r0, r3, r1
    1168:	00000000 	andeq	r0, r0, r0
    116c:	30000000 	andcc	r0, r0, r0
    1170:	3b000000 	blcc	1178 <_start-0x6e88>
    1174:	01000000 	mrseq	r0, (UNDEF: 0)
    1178:	003b5000 	eorseq	r5, fp, r0
    117c:	00540000 	subseq	r0, r4, r0
    1180:	00010000 	andeq	r0, r1, r0
    1184:	00000055 	andeq	r0, r0, r5, asr r0
    1188:	00000000 	andeq	r0, r0, r0
    118c:	00004400 	andeq	r4, r0, r0, lsl #8
    1190:	00004800 	andeq	r4, r0, r0, lsl #16
    1194:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    11a0:	00000054 	andeq	r0, r0, r4, asr r0
    11a4:	00000060 	andeq	r0, r0, r0, rrx
    11a8:	60500001 	subsvs	r0, r0, r1
    11ac:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    11b0:	04000000 	streq	r0, [r0], #-0
    11b4:	5001f300 	andpl	pc, r1, r0, lsl #6
    11b8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    11bc:	00000000 	andeq	r0, r0, r0
    11c0:	00006800 	andeq	r6, r0, r0, lsl #16
    11c4:	00007400 	andeq	r7, r0, r0, lsl #8
    11c8:	50000100 	andpl	r0, r0, r0, lsl #2
    11cc:	00000074 	andeq	r0, r0, r4, ror r0
    11d0:	0000007c 	andeq	r0, r0, ip, ror r0
    11d4:	01f30004 	mvnseq	r0, r4
    11d8:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    11e4:	00180000 	andseq	r0, r8, r0
    11e8:	00010000 	andeq	r0, r1, r0
    11ec:	00001850 	andeq	r1, r0, r0, asr r8
    11f0:	00002c00 	andeq	r2, r0, r0, lsl #24
    11f4:	f3000400 	vshl.u8	d0, d0, d0
    11f8:	2c9f5001 	ldccs	0, cr5, [pc], {1}
    11fc:	40000000 	andmi	r0, r0, r0
    1200:	01000000 	mrseq	r0, (UNDEF: 0)
    1204:	00405000 	subeq	r5, r0, r0
    1208:	00640000 	rsbeq	r0, r4, r0
    120c:	00040000 	andeq	r0, r4, r0
    1210:	9f5001f3 	svcls	0x005001f3
	...
    121c:	0000003c 	andeq	r0, r0, ip, lsr r0
    1220:	0000004b 	andeq	r0, r0, fp, asr #32
    1224:	4b520001 	blmi	1481230 <__bss_end__+0x1477098>
    1228:	64000000 	strvs	r0, [r0], #-0
    122c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1230:	5001f300 	andpl	pc, r1, r0, lsl #6
    1234:	fc090323 	stc2	3, cr0, [r9], {35}	; 0x23
    1238:	00009f1a 	andeq	r9, r0, sl, lsl pc
    123c:	00000000 	andeq	r0, r0, r0
    1240:	00640000 	rsbeq	r0, r4, r0
    1244:	007c0000 	rsbseq	r0, ip, r0
    1248:	00010000 	andeq	r0, r1, r0
    124c:	00007c50 	andeq	r7, r0, r0, asr ip
    1250:	00009000 	andeq	r9, r0, r0
    1254:	f3000400 	vshl.u8	d0, d0, d0
    1258:	909f5001 	addsls	r5, pc, r1
    125c:	9b000000 	blls	1264 <_start-0x6d9c>
    1260:	01000000 	mrseq	r0, (UNDEF: 0)
    1264:	009b5000 	addseq	r5, fp, r0
    1268:	00a00000 	adceq	r0, r0, r0
    126c:	00040000 	andeq	r0, r4, r0
    1270:	9f5001f3 	svcls	0x005001f3
    1274:	000000a0 	andeq	r0, r0, r0, lsr #1
    1278:	000000ac 	andeq	r0, r0, ip, lsr #1
    127c:	ac500001 	mrrcge	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    1280:	c0000000 	andgt	r0, r0, r0
    1284:	04000000 	streq	r0, [r0], #-0
    1288:	5001f300 	andpl	pc, r1, r0, lsl #6
    128c:	0000c09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1290:	0000df00 	andeq	sp, r0, r0, lsl #30
    1294:	50000100 	andpl	r0, r0, r0, lsl #2
    1298:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    129c:	000000f8 	strdeq	r0, [r0], -r8
    12a0:	01f30004 	mvnseq	r0, r4
    12a4:	00009f50 	andeq	r9, r0, r0, asr pc
    12a8:	00000000 	andeq	r0, r0, r0
    12ac:	00640000 	rsbeq	r0, r4, r0
    12b0:	00800000 	addeq	r0, r0, r0
    12b4:	00010000 	andeq	r0, r1, r0
    12b8:	00008051 	andeq	r8, r0, r1, asr r0
    12bc:	00009000 	andeq	r9, r0, r0
    12c0:	f3000400 	vshl.u8	d0, d0, d0
    12c4:	909f5101 	addsls	r5, pc, r1, lsl #2
    12c8:	9b000000 	blls	12d0 <_start-0x6d30>
    12cc:	01000000 	mrseq	r0, (UNDEF: 0)
    12d0:	009b5100 	addseq	r5, fp, r0, lsl #2
    12d4:	00a00000 	adceq	r0, r0, r0
    12d8:	00040000 	andeq	r0, r4, r0
    12dc:	9f5101f3 	svcls	0x005101f3
    12e0:	000000a0 	andeq	r0, r0, r0, lsr #1
    12e4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    12e8:	b0510001 	subslt	r0, r1, r1
    12ec:	c0000000 	andgt	r0, r0, r0
    12f0:	04000000 	streq	r0, [r0], #-0
    12f4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    12f8:	0000c09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    12fc:	0000d400 	andeq	sp, r0, r0, lsl #8
    1300:	51000100 	mrspl	r0, (UNDEF: 16)
    1304:	000000d4 	ldrdeq	r0, [r0], -r4
    1308:	000000d8 	ldrdeq	r0, [r0], -r8
    130c:	00710004 	rsbseq	r0, r1, r4
    1310:	00d89f1f 	sbcseq	r9, r8, pc, lsl pc
    1314:	00f80000 	rscseq	r0, r8, r0
    1318:	00040000 	andeq	r0, r4, r0
    131c:	9f5101f3 	svcls	0x005101f3
	...
    1328:	000000c8 	andeq	r0, r0, r8, asr #1
    132c:	000000cc 	andeq	r0, r0, ip, asr #1
    1330:	cc520001 	mrrcgt	0, 0, r0, r2, cr1
    1334:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    1338:	05000000 	streq	r0, [r0, #-0]
    133c:	a1900300 	orrsge	r0, r0, r0, lsl #6
    1340:	00d80000 	sbcseq	r0, r8, r0
    1344:	00df0000 	sbcseq	r0, pc, r0
    1348:	00010000 	andeq	r0, r1, r0
    134c:	00000051 	andeq	r0, r0, r1, asr r0
	...
    1358:	00000b00 	andeq	r0, r0, r0, lsl #22
    135c:	50000100 	andpl	r0, r0, r0, lsl #2
    1360:	0000000b 	andeq	r0, r0, fp
    1364:	00000014 	andeq	r0, r0, r4, lsl r0
    1368:	00540001 	subseq	r0, r4, r1
    136c:	00000000 	andeq	r0, r0, r0
    1370:	Address 0x0000000000001370 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	00008010 	andeq	r8, r0, r0, lsl r0
  14:	0000019c 	muleq	r0, ip, r1
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	04630002 	strbteq	r0, [r3], #-2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	000081ac 	andeq	r8, r0, ip, lsr #3
  34:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	0d0a0002 	stceq	0, cr0, [sl, #-8]
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	00008588 	andeq	r8, r0, r8, lsl #11
  54:	00000518 	andeq	r0, r0, r8, lsl r5
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	168d0002 	strne	r0, [sp], r2
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	00008ad8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
  74:	00000020 	andeq	r0, r0, r0, lsr #32
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	176c0002 	strbne	r0, [ip, -r2]!
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	00008af8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
  94:	00000058 	andeq	r0, r0, r8, asr r0
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	19010002 	stmdbne	r1, {r1}
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	00008b50 	andeq	r8, r0, r0, asr fp
  b4:	00000034 	andeq	r0, r0, r4, lsr r0
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	19f30002 	ldmibne	r3!, {r1}^
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	00008b84 	andeq	r8, r0, r4, lsl #23
  d4:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	204b0002 	subcs	r0, fp, r2
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	00009074 	andeq	r9, r0, r4, ror r0
  f4:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	214e0002 	cmpcs	lr, r2
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	0000909c 	muleq	r0, ip, r0
 114:	00000034 	andeq	r0, r0, r4, lsr r0
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	225d0002 	subscs	r0, sp, #2
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	000090d0 	ldrdeq	r9, [r0], -r0
 134:	00000074 	andeq	r0, r0, r4, ror r0
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	240e0002 	strcs	r0, [lr], #-2
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	00009144 	andeq	r9, r0, r4, asr #2
 154:	0000007c 	andeq	r0, r0, ip, ror r0
	...
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	25bc0002 	ldrcs	r0, [ip, #2]!
 168:	00040000 	andeq	r0, r4, r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	00009498 	muleq	r0, r8, r4
 174:	00000178 	andeq	r0, r0, r8, ror r1
	...
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	29080002 	stmdbcs	r8, {r1}
 188:	00040000 	andeq	r0, r4, r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	00009610 	andeq	r9, r0, r0, lsl r6
 194:	00000014 	andeq	r0, r0, r4, lsl r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	000000d4 	ldrdeq	r0, [r0], -r4
   4:	000000dc 	ldrdeq	r0, [r0], -ip
   8:	000000e0 	andeq	r0, r0, r0, ror #1
   c:	000000fc 	strdeq	r0, [r0], -ip
	...
  18:	000001ac 	andeq	r0, r0, ip, lsr #3
  1c:	000001ec 	andeq	r0, r0, ip, ror #3
  20:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  24:	000001f4 	strdeq	r0, [r0], -r4
	...
  30:	0000026c 	andeq	r0, r0, ip, ror #4
  34:	00000274 	andeq	r0, r0, r4, ror r2
  38:	0000027c 	andeq	r0, r0, ip, ror r2
  3c:	00000284 	andeq	r0, r0, r4, lsl #5
	...
  48:	0000042c 	andeq	r0, r0, ip, lsr #8
  4c:	00000440 	andeq	r0, r0, r0, asr #8
  50:	00000444 	andeq	r0, r0, r4, asr #8
  54:	00000484 	andeq	r0, r0, r4, lsl #9
	...
  60:	000090d0 	ldrdeq	r9, [r0], -r0
  64:	00009144 	andeq	r9, r0, r4, asr #2
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000142 	andeq	r0, r0, r2, asr #2
   4:	00e40002 	rsceq	r0, r4, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2f010000 	svccs	0x00010000
  1c:	2f727375 	svccs	0x00727375
  20:	61636f6c 	cmnvs	r3, ip, ror #30
  24:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
  28:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
  2c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
  30:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
  34:	61652d65 	cmnvs	r5, r5, ror #26
  38:	342f6962 	strtcc	r6, [pc], #-2402	; 40 <_start-0x7fc0>
  3c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
  40:	3173632d 	cmncc	r3, sp, lsr #6
  44:	2f653037 	svccs	0x00653037
  48:	2f62696c 	svccs	0x0062696c
  4c:	2f636367 	svccs	0x00636367
  50:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
  54:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
  58:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
  5c:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
  60:	2f332e38 	svccs	0x00332e38
  64:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  68:	00656475 	rsbeq	r6, r5, r5, ror r4
  6c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
  70:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
  74:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
  78:	2f6e756a 	svccs	0x006e756a
  7c:	6b736544 	blvs	1cd9594 <__bss_end__+0x1ccf3fc>
  80:	2f706f74 	svccs	0x00706f74
  84:	6f686373 	svcvs	0x00686373
  88:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
  8c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
  90:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
  94:	53432f30 	movtpl	r2, #16176	; 0x3f30
  98:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
  9c:	3173632f 	cmncc	r3, pc, lsr #6
  a0:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
  a4:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
  a8:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
  ac:	00697062 	rsbeq	r7, r9, r2, rrx
  b0:	742d3100 	strtvc	r3, [sp], #-256	; 0x100
  b4:	2d747365 	ldclcs	3, cr7, [r4, #-404]!	; 0xfffffe6c
  b8:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
  bc:	632e6461 	teqvs	lr, #1627389952	; 0x61000000
  c0:	00000000 	andeq	r0, r0, r0
  c4:	2d697072 	stclcs	0, cr7, [r9, #-456]!	; 0xfffffe38
  c8:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
  cc:	682e6461 	stmdavs	lr!, {r0, r5, r6, sl, sp, lr}
  d0:	00000000 	andeq	r0, r0, r0
  d4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
  d8:	672d746e 	strvs	r7, [sp, -lr, ror #8]!
  dc:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
  e0:	00000100 	andeq	r0, r0, r0, lsl #2
  e4:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
  e8:	00020068 	andeq	r0, r2, r8, rrx
  ec:	05000000 	streq	r0, [r0, #-0]
  f0:	00801002 	addeq	r1, r0, r2
  f4:	01120300 	tsteq	r2, r0, lsl #6
  f8:	00834b6a 	addeq	r4, r3, sl, ror #22
  fc:	06010402 	streq	r0, [r1], -r2, lsl #8
 100:	2ff606ba 	svccs	0x00f606ba
 104:	30832f83 	addcc	r2, r3, r3, lsl #31
 108:	2f2fd84b 	svccs	0x002fd84b
 10c:	2f854e30 	svccs	0x00854e30
 110:	02002b30 	andeq	r2, r0, #48, 22	; 0xc000
 114:	002f0204 	eoreq	r0, pc, r4, lsl #4
 118:	67020402 	strvs	r0, [r2, -r2, lsl #8]
 11c:	02040200 	andeq	r0, r4, #0, 4
 120:	0402004b 	streq	r0, [r2], #-75	; 0x4b
 124:	02004702 	andeq	r4, r0, #524288	; 0x80000
 128:	2e060104 	adfcss	f0, f6, f4
 12c:	9f314f06 	svcls	0x00314f06
 130:	01040200 	mrseq	r0, R12_usr
 134:	bb066606 	bllt	199954 <__bss_end__+0x18f7bc>
 138:	01040200 	mrseq	r0, R12_usr
 13c:	bb068206 	bllt	1a095c <__bss_end__+0x1967c4>
 140:	0014024b 	andseq	r0, r4, fp, asr #4
 144:	01950101 	orrseq	r0, r5, r1, lsl #2
 148:	00020000 	andeq	r0, r2, r0
 14c:	000000e8 	andeq	r0, r0, r8, ror #1
 150:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 154:	0101000d 	tsteq	r1, sp
 158:	00000101 	andeq	r0, r0, r1, lsl #2
 15c:	00000100 	andeq	r0, r0, r0, lsl #2
 160:	73752f01 	cmnvc	r5, #1, 30
 164:	6f6c2f72 	svcvs	0x006c2f72
 168:	2f6c6163 	svccs	0x006c6163
 16c:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
 170:	612f7261 	teqvs	pc, r1, ror #4
 174:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 178:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 17c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 180:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 184:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
 188:	30373173 	eorscc	r3, r7, r3, ror r1
 18c:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 190:	63672f62 	cmnvs	r7, #392	; 0x188
 194:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
 198:	6f6e2d6d 	svcvs	0x006e2d6d
 19c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 1a0:	2f696261 	svccs	0x00696261
 1a4:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 1a8:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
 1ac:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
 1b0:	552f0065 	strpl	r0, [pc, #-101]!	; 153 <_start-0x7ead>
 1b4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 1b8:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 1bc:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 1c0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 1c4:	6f746b73 	svcvs	0x00746b73
 1c8:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 1cc:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 34 <_start-0x7fcc>
 1d0:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 1d4:	31726574 	cmncc	r2, r4, ror r5
 1d8:	2f303239 	svccs	0x00303239
 1dc:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 1e0:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 1e4:	30343173 	eorscc	r3, r4, r3, ror r1
 1e8:	30322d65 	eorscc	r2, r2, r5, ror #26
 1ec:	2f6e6977 	svccs	0x006e6977
 1f0:	7062696c 	rsbvc	r6, r2, ip, ror #18
 1f4:	51000069 	tstpl	r0, r9, rrx
 1f8:	0000682e 	andeq	r6, r0, lr, lsr #16
 1fc:	70720000 	rsbsvc	r0, r2, r0
 200:	68742d69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, sl, fp, sp}^
 204:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 208:	0000632e 	andeq	r6, r0, lr, lsr #6
 20c:	70720000 	rsbsvc	r0, r2, r0
 210:	68742d69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, sl, fp, sp}^
 214:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 218:	0000682e 	andeq	r6, r0, lr, lsr #16
 21c:	74730000 	ldrbtvc	r0, [r3], #-0
 220:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
 224:	6363672d 	cmnvs	r3, #11796480	; 0xb40000
 228:	0100682e 	tsteq	r0, lr, lsr #16
 22c:	70720000 	rsbsvc	r0, r2, r0
 230:	00682e69 	rsbeq	r2, r8, r9, ror #28
 234:	00000002 	andeq	r0, r0, r2
 238:	ac020500 	cfstr32ge	mvfx0, [r2], {-0}
 23c:	03000081 	movweq	r0, #129	; 0x81
 240:	0301010f 	movweq	r0, #4367	; 0x110f
 244:	4b134a1b 	blmi	4d2ab8 <__bss_end__+0x4c8920>
 248:	2f686767 	svccs	0x00686767
 24c:	4b67134f 	blmi	19c4f90 <__bss_end__+0x19badf8>
 250:	02044b2f 	andeq	r4, r4, #48128	; 0xbc00
 254:	4c4a6d03 	mcrrmi	13, 0, r6, sl, cr3
 258:	67030104 	strvs	r0, [r3, -r4, lsl #2]
 25c:	00684b82 	rsbeq	r4, r8, r2, lsl #23
 260:	06010402 	streq	r0, [r1], -r2, lsl #8
 264:	00bb0666 	adcseq	r0, fp, r6, ror #12
 268:	06010402 	streq	r0, [r1], -r2, lsl #8
 26c:	4db80666 	ldcmi	6, cr0, [r8, #408]!	; 0x198
 270:	002fa12f 	eoreq	sl, pc, pc, lsr #2
 274:	06010402 	streq	r0, [r1], -r2, lsl #8
 278:	2fbc064a 	svccs	0x00bc064a
 27c:	0402004b 	streq	r0, [r2], #-75	; 0x4b
 280:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 284:	2f4b67bd 	svccs	0x004b67bd
 288:	4a7a032f 	bmi	1e80f4c <__bss_end__+0x1e76db4>
 28c:	03020435 	movweq	r0, #9269	; 0x2435
 290:	4d2f9e74 	stcmi	14, cr9, [pc, #-464]!	; c8 <_start-0x7f38>
 294:	0084674b 	addeq	r6, r4, fp, asr #14
 298:	06010402 	streq	r0, [r1], -r2, lsl #8
 29c:	a0bb064a 	adcsge	r0, fp, sl, asr #12
 2a0:	14d66e03 	ldrbne	r6, [r6], #3587	; 0xe03
 2a4:	67821c03 	strvs	r1, [r2, r3, lsl #24]
 2a8:	2f4a0a03 	svccs	0x004a0a03
 2ac:	0369682f 	cmneq	r9, #3080192	; 0x2f0000
 2b0:	2c032e0e 	stccs	14, cr2, [r3], {14}
 2b4:	834d012e 	movthi	r0, #53550	; 0xd12e
 2b8:	0867304b 	stmdaeq	r7!, {r0, r1, r3, r6, ip, sp}^
 2bc:	034b8642 	movteq	r8, #46658	; 0xb642
 2c0:	8435f24f 	ldrthi	pc, [r5], #-591	; 0x24f	; <UNPREDICTABLE>
 2c4:	682e0903 	stmdavs	lr!, {r0, r1, r8, fp}
 2c8:	02006767 	andeq	r6, r0, #27000832	; 0x19c0000
 2cc:	a3480104 	movtge	r0, #33028	; 0x8104
 2d0:	2fba1b03 	svccs	0x00ba1b03
 2d4:	082f2808 	stmdaeq	pc!, {r3, fp, sp}	; <UNPREDICTABLE>
 2d8:	12022f26 	andne	r2, r2, #38, 30	; 0x98
 2dc:	70010100 	andvc	r0, r1, r0, lsl #2
 2e0:	02000002 	andeq	r0, r0, #2
 2e4:	00012800 	andeq	r2, r1, r0, lsl #16
 2e8:	fb010200 	blx	40af2 <__bss_end__+0x3695a>
 2ec:	01000d0e 	tsteq	r0, lr, lsl #26
 2f0:	00010101 	andeq	r0, r1, r1, lsl #2
 2f4:	00010000 	andeq	r0, r1, r0
 2f8:	752f0100 	strvc	r0, [pc, #-256]!	; 200 <_start-0x7e00>
 2fc:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 138 <_start-0x7ec8>
 300:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 304:	6c65432f 	stclvs	3, cr4, [r5], #-188	; 0xffffff44
 308:	2f72616c 	svccs	0x0072616c
 30c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 310:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 314:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 318:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 31c:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
 320:	37317363 	ldrcc	r7, [r1, -r3, ror #6]!
 324:	6c2f6530 	cfstr32vs	mvfx6, [pc], #-192	; 26c <_start-0x7d94>
 328:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
 32c:	612f6363 	teqvs	pc, r3, ror #6
 330:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 334:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 338:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 33c:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 340:	692f332e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, r9, ip, sp}	; <UNPREDICTABLE>
 344:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
 348:	2f006564 	svccs	0x00006564
 34c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 350:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 354:	6a6e6169 	bvs	1b98900 <__bss_end__+0x1b8e768>
 358:	442f6e75 	strtmi	r6, [pc], #-3701	; 360 <_start-0x7ca0>
 35c:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 360:	732f706f 	teqvc	pc, #111	; 0x6f
 364:	6f6f6863 	svcvs	0x006f6863
 368:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 36c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 370:	30323931 	eorscc	r3, r2, r1, lsr r9
 374:	3153432f 	cmpcc	r3, pc, lsr #6
 378:	2f453034 	svccs	0x00453034
 37c:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 380:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 384:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 388:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 38c:	2f006970 	svccs	0x00006970
 390:	2f727375 	svccs	0x00727375
 394:	61636f6c 	cmnvs	r3, ip, ror #30
 398:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
 39c:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
 3a0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 3a4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 3a8:	61652d65 	cmnvs	r5, r5, ror #26
 3ac:	342f6962 	strtcc	r6, [pc], #-2402	; 3b4 <_start-0x7c4c>
 3b0:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 3b4:	3173632d 	cmncc	r3, sp, lsr #6
 3b8:	2f653037 	svccs	0x00653037
 3bc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 3c0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 3c4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 3c8:	6e692f69 	cdpvs	15, 6, cr2, cr9, cr9, {3}
 3cc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
 3d0:	63000065 	movwvs	r0, #101	; 0x65
 3d4:	75637269 	strbvc	r7, [r3, #-617]!	; 0x269
 3d8:	2e72616c 	rpwcssz	f6, f2, #4.0
 3dc:	00000063 	andeq	r0, r0, r3, rrx
 3e0:	72696300 	rsbvc	r6, r9, #0, 6
 3e4:	616c7563 	cmnvs	ip, r3, ror #10
 3e8:	00682e72 	rsbeq	r2, r8, r2, ror lr
 3ec:	73000000 	movwvc	r0, #0
 3f0:	65646474 	strbvs	r6, [r4, #-1140]!	; 0x474
 3f4:	00682e66 	rsbeq	r2, r8, r6, ror #28
 3f8:	72000001 	andvc	r0, r0, #1
 3fc:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 400:	00000200 	andeq	r0, r0, r0, lsl #4
 404:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 408:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 40c:	00000300 	andeq	r0, r0, r0, lsl #6
 410:	02050000 	andeq	r0, r5, #0
 414:	00008588 	andeq	r8, r0, r8, lsl #11
 418:	02044b19 	andeq	r4, r4, #25600	; 0x6400
 41c:	8200cd03 	andhi	ip, r0, #3, 26	; 0xc0
 420:	03010499 	movweq	r0, #5273	; 0x1499
 424:	089e7fb8 	ldmeq	lr, {r3, r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}
 428:	9f2fd822 	svcls	0x002fd822
 42c:	67673f08 	strbvs	r3, [r7, -r8, lsl #30]!
 430:	044b9f67 	strbeq	r9, [fp], #-3943	; 0xf67
 434:	ba3a0302 	blt	e81044 <__bss_end__+0xe76eac>
 438:	47030104 	strmi	r0, [r3, -r4, lsl #2]
 43c:	0402004a 	streq	r0, [r2], #-74	; 0x4a
 440:	044a0601 	strbeq	r0, [sl], #-1537	; 0x601
 444:	3c030602 	stccc	6, cr0, [r3], {2}
 448:	030104ba 	movweq	r0, #5306	; 0x14ba
 44c:	0200ba45 	andeq	fp, r0, #282624	; 0x45000
 450:	4a060104 	bmi	180868 <__bss_end__+0x1766d0>
 454:	03060204 	movweq	r0, #25092	; 0x6204
 458:	0104ba3d 	tsteq	r4, sp, lsr sl
 45c:	009e4403 	addseq	r4, lr, r3, lsl #8
 460:	06010402 	streq	r0, [r1], -r2, lsl #8
 464:	0602044a 	streq	r0, [r2], -sl, asr #8
 468:	03ba3703 			; <UNDEFINED> instruction: 0x03ba3703
 46c:	4b4c820a 	blmi	1320c9c <__bss_end__+0x1316b04>
 470:	0104834b 	tsteq	r4, fp, asr #6
 474:	4a7fbb03 	bmi	1fef088 <__bss_end__+0x1fe4ef0>
 478:	c1030204 	tstgt	r3, r4, lsl #4
 47c:	01042e00 	tsteq	r4, r0, lsl #28
 480:	002e4003 	eoreq	r4, lr, r3
 484:	06010402 	streq	r0, [r1], -r2, lsl #8
 488:	0200664a 	andeq	r6, r0, #77594624	; 0x4a00000
 48c:	00660404 	rsbeq	r0, r6, r4, lsl #8
 490:	4a010402 	bmi	414a0 <__bss_end__+0x37308>
 494:	02190306 	andseq	r0, r9, #402653184	; 0x18000000
 498:	02040124 	andeq	r0, r4, #36, 2
 49c:	034a1c03 	movteq	r1, #44035	; 0xac03
 4a0:	00324a0b 	eorseq	r4, r2, fp, lsl #20
 4a4:	03010402 	movweq	r0, #5122	; 0x1402
 4a8:	02002e71 	andeq	r2, r0, #1808	; 0x710
 4ac:	0a030104 	beq	c08c4 <__bss_end__+0xb672c>
 4b0:	4b2f4c4a 	blmi	bd35e0 <__bss_end__+0xbc9448>
 4b4:	01044683 	smlabbeq	r4, r3, r6, r4
 4b8:	4e2e5e03 	cdpmi	14, 2, cr5, cr14, cr3, {0}
 4bc:	020085a0 	andeq	r8, r0, #160, 10	; 0x28000000
 4c0:	004b0204 	subeq	r0, fp, r4, lsl #4
 4c4:	65020402 	strvs	r0, [r2, #-1026]	; 0x402
 4c8:	01040200 	mrseq	r0, R12_usr
 4cc:	4c062e06 	stcmi	14, cr2, [r6], {6}
 4d0:	832e5a03 	teqhi	lr, #12288	; 0x3000
 4d4:	36030204 	strcc	r0, [r3], -r4, lsl #4
 4d8:	0301042e 	movweq	r0, #5166	; 0x142e
 4dc:	834cba4b 	movthi	fp, #51787	; 0xca4b
 4e0:	044d3148 	strbeq	r3, [sp], #-328	; 0x148
 4e4:	4a2e0302 	bmi	b810f4 <__bss_end__+0xb76f5c>
 4e8:	54030104 	strpl	r0, [r3], #-260	; 0x104
 4ec:	684b4cd6 	stmdavs	fp, {r1, r2, r4, r6, r7, sl, fp, lr}^
 4f0:	27030204 	strcs	r0, [r3, -r4, lsl #4]
 4f4:	0301044a 	movweq	r0, #5194	; 0x144a
 4f8:	02009e5a 	andeq	r9, r0, #1440	; 0x5a0
 4fc:	4a060104 	bmi	180914 <__bss_end__+0x17677c>
 500:	2f50b506 	svccs	0x0050b506
 504:	04ba1503 	ldrteq	r1, [sl], #1283	; 0x503
 508:	2e0f0302 	cdpcs	3, 0, cr0, cr15, cr2, {0}
 50c:	030104d7 	movweq	r0, #5335	; 0x14d7
 510:	02042e73 	andeq	r2, r4, #1840	; 0x730
 514:	2f661b03 	svccs	0x00661b03
 518:	01043130 	tsteq	r4, r0, lsr r1
 51c:	044a6203 	strbeq	r6, [sl], #-515	; 0x203
 520:	2e180302 	cdpcs	3, 1, cr0, cr8, cr2, {0}
 524:	2e6e032f 	cdpcs	3, 6, cr0, cr14, cr15, {1}
 528:	4c821303 	stcmi	3, cr1, [r2], {3}
 52c:	0447832f 	strbeq	r8, [r7], #-815	; 0x32f
 530:	2e650301 	cdpcs	3, 6, cr0, cr5, cr1, {0}
 534:	0200b84b 	andeq	fp, r0, #4915200	; 0x4b0000
 538:	2e060104 	adfcss	f0, f6, f4
 53c:	02044d06 	andeq	r4, r4, #384	; 0x180
 540:	8101044c 	tsthi	r1, ip, asr #8
 544:	01040200 	mrseq	r0, R12_usr
 548:	b5064a06 	strlt	r4, [r6, #-2566]	; 0xa06
 54c:	0e026750 	mcreq	7, 0, r6, cr2, cr0, {2}
 550:	ec010100 	stfs	f0, [r1], {-0}
 554:	02000000 	andeq	r0, r0, #0
 558:	0000d000 	andeq	sp, r0, r0
 55c:	fb010200 	blx	40d66 <__bss_end__+0x36bce>
 560:	01000d0e 	tsteq	r0, lr, lsl #26
 564:	00010101 	andeq	r0, r1, r1, lsl #2
 568:	00010000 	andeq	r0, r1, r0
 56c:	696c0100 	stmdbvs	ip!, {r8}^
 570:	2f006362 	svccs	0x00006362
 574:	2f727375 	svccs	0x00727375
 578:	61636f6c 	cmnvs	r3, ip, ror #30
 57c:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
 580:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
 584:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 588:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 58c:	61652d65 	cmnvs	r5, r5, ror #26
 590:	342f6962 	strtcc	r6, [pc], #-2402	; 598 <_start-0x7a68>
 594:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 598:	3173632d 	cmncc	r3, sp, lsr #6
 59c:	2f653037 	svccs	0x00653037
 5a0:	2f62696c 	svccs	0x0062696c
 5a4:	2f636367 	svccs	0x00636367
 5a8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 5ac:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 5b0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 5b4:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 5b8:	2f332e38 	svccs	0x00332e38
 5bc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 5c0:	00656475 	rsbeq	r6, r5, r5, ror r4
 5c4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 5c8:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
 5cc:	432f6c61 	teqmi	pc, #24832	; 0x6100
 5d0:	616c6c65 	cmnvs	ip, r5, ror #24
 5d4:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 5d8:	6f6e2d6d 	svcvs	0x006e2d6d
 5dc:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 5e0:	2f696261 	svccs	0x00696261
 5e4:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 5e8:	73632d33 	cmnvc	r3, #3264	; 0xcc0
 5ec:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
 5f0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 5f4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 5f8:	61652d65 	cmnvs	r5, r5, ror #26
 5fc:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
 600:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
 604:	00006564 	andeq	r6, r0, r4, ror #10
 608:	736d656d 	cmnvc	sp, #457179136	; 0x1b400000
 60c:	632e7465 	teqvs	lr, #1694498816	; 0x65000000
 610:	00000100 	andeq	r0, r0, r0, lsl #2
 614:	64647473 	strbtvs	r7, [r4], #-1139	; 0x473
 618:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
 61c:	00000200 	andeq	r0, r0, r0, lsl #4
 620:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 624:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 628:	00000300 	andeq	r0, r0, r0, lsl #6
 62c:	02050000 	andeq	r0, r5, #0
 630:	00008ad8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
 634:	2f4c1314 	svccs	0x004c1314
 638:	01040200 	mrseq	r0, R12_usr
 63c:	02024d49 	andeq	r4, r2, #4672	; 0x1240
 640:	02010100 	andeq	r0, r1, #0, 2
 644:	02000001 	andeq	r0, r0, #1
 648:	0000eb00 	andeq	lr, r0, r0, lsl #22
 64c:	fb010200 	blx	40e56 <__bss_end__+0x36cbe>
 650:	01000d0e 	tsteq	r0, lr, lsl #26
 654:	00010101 	andeq	r0, r1, r1, lsl #2
 658:	00010000 	andeq	r0, r1, r0
 65c:	696c0100 	stmdbvs	ip!, {r8}^
 660:	2f006362 	svccs	0x00006362
 664:	2f727375 	svccs	0x00727375
 668:	61636f6c 	cmnvs	r3, ip, ror #30
 66c:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
 670:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
 674:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 678:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 67c:	61652d65 	cmnvs	r5, r5, ror #26
 680:	342f6962 	strtcc	r6, [pc], #-2402	; 688 <_start-0x7978>
 684:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 688:	3173632d 	cmncc	r3, sp, lsr #6
 68c:	2f653037 	svccs	0x00653037
 690:	2f62696c 	svccs	0x0062696c
 694:	2f636367 	svccs	0x00636367
 698:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 69c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 6a0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 6a4:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 6a8:	2f332e38 	svccs	0x00332e38
 6ac:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 6b0:	00656475 	rsbeq	r6, r5, r5, ror r4
 6b4:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 6b8:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 6bc:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 6c0:	2f6e756a 	svccs	0x006e756a
 6c4:	6b736544 	blvs	1cd9bdc <__bss_end__+0x1ccfa44>
 6c8:	2f706f74 	svccs	0x00706f74
 6cc:	6f686373 	svcvs	0x00686373
 6d0:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 6d4:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 6d8:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 6dc:	53432f30 	movtpl	r2, #16176	; 0x3f30
 6e0:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 6e4:	3173632f 	cmncc	r3, pc, lsr #6
 6e8:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 6ec:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 6f0:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 6f4:	00697062 	rsbeq	r7, r9, r2, rrx
 6f8:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
 6fc:	2e6b746e 	cdpcs	4, 6, cr7, cr11, cr14, {3}
 700:	00010063 	andeq	r0, r1, r3, rrx
 704:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
 708:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
 70c:	00020068 	andeq	r0, r2, r8, rrx
 710:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xc00
 714:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
 718:	003e6e69 	eorseq	r6, lr, r9, ror #28
 71c:	72000000 	andvc	r0, r0, #0
 720:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 724:	00000300 	andeq	r0, r0, r0, lsl #6
 728:	702d6176 	eorvc	r6, sp, r6, ror r1
 72c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 730:	00682e6b 	rsbeq	r2, r8, fp, ror #28
 734:	00000001 	andeq	r0, r0, r1
 738:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
 73c:	1700008a 	strne	r0, [r0, -sl, lsl #1]
 740:	89bf4b6b 	ldmibhi	pc!, {r0, r1, r3, r5, r6, r8, r9, fp, lr}	; <UNPREDICTABLE>
 744:	01000e02 	tsteq	r0, r2, lsl #28
 748:	00009601 	andeq	r9, r0, r1, lsl #12
 74c:	6f000200 	svcvs	0x00000200
 750:	02000000 	andeq	r0, r0, #0
 754:	0d0efb01 	vstreq	d15, [lr, #-4]
 758:	01010100 	mrseq	r0, (UNDEF: 17)
 75c:	00000001 	andeq	r0, r0, r1
 760:	01000001 	tsteq	r0, r1
 764:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 768:	73552f00 	cmpvc	r5, #0, 30
 76c:	2f737265 	svccs	0x00737265
 770:	61697262 	cmnvs	r9, r2, ror #4
 774:	6e756a6e 	vsubvs.f32	s13, s10, s29
 778:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 77c:	706f746b 	rsbvc	r7, pc, fp, ror #8
 780:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 784:	2f6c6f6f 	svccs	0x006c6f6f
 788:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 78c:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 790:	432f3032 	teqmi	pc, #50	; 0x32
 794:	30343153 	eorscc	r3, r4, r3, asr r1
 798:	73632f45 	cmnvc	r3, #276	; 0x114
 79c:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 7a0:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 7a4:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 608 <_start-0x79f8>
 7a8:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 7ac:	75700000 	ldrbvc	r0, [r0, #-0]!
 7b0:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
 7b4:	00000100 	andeq	r0, r0, r0, lsl #2
 7b8:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 7bc:	00020068 	andeq	r0, r2, r8, rrx
 7c0:	05000000 	streq	r0, [r0, #-0]
 7c4:	008b5002 	addeq	r5, fp, r2
 7c8:	2d4c1500 	cfstr64cs	mvdx1, [ip, #-0]
 7cc:	02040200 	andeq	r0, r4, #0, 4
 7d0:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 7d4:	02004902 	andeq	r4, r0, #32768	; 0x8000
 7d8:	2e060104 	adfcss	f0, f6, f4
 7dc:	06026b06 	streq	r6, [r2], -r6, lsl #22
 7e0:	dc010100 	stfles	f0, [r1], {-0}
 7e4:	02000001 	andeq	r0, r0, #1
 7e8:	0000df00 	andeq	sp, r0, r0, lsl #30
 7ec:	fb010200 	blx	40ff6 <__bss_end__+0x36e5e>
 7f0:	01000d0e 	tsteq	r0, lr, lsl #26
 7f4:	00010101 	andeq	r0, r1, r1, lsl #2
 7f8:	00010000 	andeq	r0, r1, r0
 7fc:	696c0100 	stmdbvs	ip!, {r8}^
 800:	2f006362 	svccs	0x00006362
 804:	2f727375 	svccs	0x00727375
 808:	61636f6c 	cmnvs	r3, ip, ror #30
 80c:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
 810:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
 814:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 818:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 81c:	61652d65 	cmnvs	r5, r5, ror #26
 820:	342f6962 	strtcc	r6, [pc], #-2402	; 828 <_start-0x77d8>
 824:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 828:	3173632d 	cmncc	r3, sp, lsr #6
 82c:	2f653037 	svccs	0x00653037
 830:	2f62696c 	svccs	0x0062696c
 834:	2f636367 	svccs	0x00636367
 838:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 83c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 840:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 844:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 848:	2f332e38 	svccs	0x00332e38
 84c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 850:	00656475 	rsbeq	r6, r5, r5, ror r4
 854:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 858:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 85c:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 860:	2f6e756a 	svccs	0x006e756a
 864:	6b736544 	blvs	1cd9d7c <__bss_end__+0x1ccfbe4>
 868:	2f706f74 	svccs	0x00706f74
 86c:	6f686373 	svcvs	0x00686373
 870:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 874:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 878:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 87c:	53432f30 	movtpl	r2, #16176	; 0x3f30
 880:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 884:	3173632f 	cmncc	r3, pc, lsr #6
 888:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 88c:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 890:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 894:	00697062 	rsbeq	r7, r9, r2, rrx
 898:	2d617600 	stclcs	6, cr7, [r1, #-0]
 89c:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 8a0:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
 8a4:	00000100 	andeq	r0, r0, r0, lsl #2
 8a8:	61647473 	smcvs	18243	; 0x4743
 8ac:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
 8b0:	00000200 	andeq	r0, r0, r0, lsl #4
 8b4:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 8b8:	00030068 	andeq	r0, r3, r8, rrx
 8bc:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xc00
 8c0:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
 8c4:	003e6e69 	eorseq	r6, lr, r9, ror #28
 8c8:	00000000 	andeq	r0, r0, r0
 8cc:	84020500 	strhi	r0, [r2], #-1280	; 0x500
 8d0:	0300008b 	movweq	r0, #139	; 0x8b
 8d4:	a5010126 	strge	r0, [r1, #-294]	; 0x126
 8d8:	002d3113 	eoreq	r3, sp, r3, lsl r1
 8dc:	2f020402 	svccs	0x00020402
 8e0:	02040200 	andeq	r0, r4, #0, 4
 8e4:	0402002d 	streq	r0, [r2], #-45	; 0x2d
 8e8:	02002f02 	andeq	r2, r0, #2, 30
 8ec:	4c2d0104 	stfmis	f0, [sp], #-16
 8f0:	4b14304c 	blmi	50ca28 <__bss_end__+0x502890>
 8f4:	02004f2f 	andeq	r4, r0, #47, 30	; 0xbc
 8f8:	00670204 	rsbeq	r0, r7, r4, lsl #4
 8fc:	65010402 	strvs	r0, [r1, #-1026]	; 0x402
 900:	a0304d4c 	eorsge	r4, r0, ip, asr #26
 904:	0230312f 	eorseq	r3, r0, #-1073741813	; 0xc000000b
 908:	2d841626 	stccs	6, cr1, [r4, #152]	; 0x98
 90c:	0402002c 	streq	r0, [r2], #-44	; 0x2c
 910:	02003001 	andeq	r3, r0, #1
 914:	06330104 	ldrteq	r0, [r3], -r4, lsl #2
 918:	04020066 	streq	r0, [r2], #-102	; 0x66
 91c:	02002e01 	andeq	r2, r0, #1, 28
 920:	08060104 	stmdaeq	r6, {r2, r8}
 924:	032f6721 	teqeq	pc, #8650752	; 0x840000
 928:	13038273 	movwne	r8, #12915	; 0x3273
 92c:	0402002e 	streq	r0, [r2], #-46	; 0x2e
 930:	002e0601 	eoreq	r0, lr, r1, lsl #12
 934:	06010402 	streq	r0, [r1], -r2, lsl #8
 938:	034b6a9f 	movteq	r6, #47775	; 0xba9f
 93c:	21032e67 	tstcs	r3, r7, ror #28
 940:	0402002e 	streq	r0, [r2], #-46	; 0x2e
 944:	002e0601 	eoreq	r0, lr, r1, lsl #12
 948:	06010402 	streq	r0, [r1], -r2, lsl #8
 94c:	0402009f 	streq	r0, [r2], #-159	; 0x9f
 950:	f3bd6a01 	vtbl.8	d6, {d13-d15}, d1
 954:	087fa603 	ldmdaeq	pc!, {r0, r1, r9, sl, sp, pc}^	; <UNPREDICTABLE>
 958:	02002f20 	andeq	r2, r0, #32, 30	; 0x80
 95c:	4a060104 	bmi	180d74 <__bss_end__+0x176bdc>
 960:	2f4bbb06 	svccs	0x004bbb06
 964:	f200da03 	vpmax.s8	d13, d0, d3
 968:	31484c83 	smlalbbcc	r4, r8, r3, ip
 96c:	4b842f2f 	blmi	fe10c630 <__bss_end__+0xfe102498>
 970:	314d2d2f 	cmpcc	sp, pc, lsr #26
 974:	00832f30 	addeq	r2, r3, r0, lsr pc
 978:	2c010402 	cfstrscs	mvf0, [r1], {2}
 97c:	040200be 	streq	r0, [r2], #-190	; 0xbe
 980:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 984:	163602bc 			; <UNDEFINED> instruction: 0x163602bc
 988:	08ba0e03 	ldmeq	sl!, {r0, r1, r9, sl, fp}
 98c:	21083021 	tstcs	r8, r1, lsr #32
 990:	30210831 	eorcc	r0, r1, r1, lsr r8
 994:	4b302108 	blmi	c08dbc <__bss_end__+0xbfec24>
 998:	30210830 	eorcc	r0, r1, r0, lsr r8
 99c:	002f31d9 	ldrdeq	r3, [pc], -r9	; <UNPREDICTABLE>
 9a0:	65010402 	strvs	r0, [r1, #-1026]	; 0x402
 9a4:	02040200 	andeq	r0, r4, #0, 4
 9a8:	02004a06 	andeq	r4, r0, #24576	; 0x6000
 9ac:	03060104 	movweq	r0, #24836	; 0x6104
 9b0:	02006642 	andeq	r6, r0, #69206016	; 0x4200000
 9b4:	66060204 	strvs	r0, [r6], -r4, lsl #4
 9b8:	00c20306 	sbceq	r0, r2, r6, lsl #6
 9bc:	1002684a 	andne	r6, r2, sl, asr #16
 9c0:	93010100 	movwls	r0, #4352	; 0x1100
 9c4:	02000000 	andeq	r0, r0, #0
 9c8:	00007d00 	andeq	r7, r0, r0, lsl #26
 9cc:	fb010200 	blx	411d6 <__bss_end__+0x3703e>
 9d0:	01000d0e 	tsteq	r0, lr, lsl #26
 9d4:	00010101 	andeq	r0, r1, r1, lsl #2
 9d8:	00010000 	andeq	r0, r1, r0
 9dc:	73630100 	cmnvc	r3, #0, 2
 9e0:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 9e4:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 9e8:	73552f00 	cmpvc	r5, #0, 30
 9ec:	2f737265 	svccs	0x00737265
 9f0:	61697262 	cmnvs	r9, r2, ror #4
 9f4:	6e756a6e 	vsubvs.f32	s13, s10, s29
 9f8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 9fc:	706f746b 	rsbvc	r7, pc, fp, ror #8
 a00:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 a04:	2f6c6f6f 	svccs	0x006c6f6f
 a08:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 a0c:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 a10:	432f3032 	teqmi	pc, #50	; 0x32
 a14:	30343153 	eorscc	r3, r4, r3, asr r1
 a18:	73632f45 	cmnvc	r3, #276	; 0x114
 a1c:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 a20:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 a24:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 888 <_start-0x7778>
 a28:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 a2c:	6c630000 	stclvs	0, cr0, [r3], #-0
 a30:	2d6e6165 	stfcse	f6, [lr, #-404]!	; 0xfffffe6c
 a34:	6f626572 	svcvs	0x00626572
 a38:	632e746f 	teqvs	lr, #1862270976	; 0x6f000000
 a3c:	00000100 	andeq	r0, r0, r0, lsl #2
 a40:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 a44:	00020068 	andeq	r0, r2, r8, rrx
 a48:	05000000 	streq	r0, [r0, #-0]
 a4c:	00907402 	addseq	r7, r0, r2, lsl #8
 a50:	832f1500 	teqhi	pc, #0, 10
 a54:	0006024b 	andeq	r0, r6, fp, asr #4
 a58:	00960101 	addseq	r0, r6, r1, lsl #2
 a5c:	00020000 	andeq	r0, r2, r0
 a60:	00000077 	andeq	r0, r0, r7, ror r0
 a64:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 a68:	0101000d 	tsteq	r1, sp
 a6c:	00000101 	andeq	r0, r0, r1, lsl #2
 a70:	00000100 	andeq	r0, r0, r0, lsl #2
 a74:	31736301 	cmncc	r3, r1, lsl #6
 a78:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 a7c:	00637273 	rsbeq	r7, r3, r3, ror r2
 a80:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 a84:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 a88:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 a8c:	2f6e756a 	svccs	0x006e756a
 a90:	6b736544 	blvs	1cd9fa8 <__bss_end__+0x1ccfe10>
 a94:	2f706f74 	svccs	0x00706f74
 a98:	6f686373 	svcvs	0x00686373
 a9c:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 aa0:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 aa4:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 aa8:	53432f30 	movtpl	r2, #16176	; 0x3f30
 aac:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 ab0:	3173632f 	cmncc	r3, pc, lsr #6
 ab4:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 ab8:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 abc:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 ac0:	00697062 	rsbeq	r7, r9, r2, rrx
 ac4:	74736300 	ldrbtvc	r6, [r3], #-768	; 0x300
 ac8:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
 acc:	00010063 	andeq	r0, r1, r3, rrx
 ad0:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 ad4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 ad8:	00000000 	andeq	r0, r0, r0
 adc:	909c0205 	addsls	r0, ip, r5, lsl #4
 ae0:	32140000 	andscc	r0, r4, #0
 ae4:	2f2d2f31 	svccs	0x002d2f31
 ae8:	01040200 	mrseq	r0, R12_usr
 aec:	022f4d49 	eoreq	r4, pc, #4672	; 0x1240
 af0:	01010006 	tsteq	r1, r6
 af4:	00000099 	muleq	r0, r9, r0
 af8:	00770002 	rsbseq	r0, r7, r2
 afc:	01020000 	mrseq	r0, (UNDEF: 2)
 b00:	000d0efb 	strdeq	r0, [sp], -fp
 b04:	01010101 	tsteq	r1, r1, lsl #2
 b08:	01000000 	mrseq	r0, (UNDEF: 0)
 b0c:	63010000 	movwvs	r0, #4096	; 0x1000
 b10:	30343173 	eorscc	r3, r4, r3, ror r1
 b14:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 b18:	552f0063 	strpl	r0, [pc, #-99]!	; abd <_start-0x7543>
 b1c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 b20:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 b24:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 b28:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 b2c:	6f746b73 	svcvs	0x00746b73
 b30:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 b34:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 99c <_start-0x7664>
 b38:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 b3c:	31726574 	cmncc	r2, r4, ror r5
 b40:	2f303239 	svccs	0x00303239
 b44:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 b48:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 b4c:	30343173 	eorscc	r3, r4, r3, ror r1
 b50:	30322d65 	eorscc	r2, r2, r5, ror #26
 b54:	2f6e6977 	svccs	0x006e6977
 b58:	7062696c 	rsbvc	r6, r2, ip, ror #18
 b5c:	72000069 	andvc	r0, r0, #105	; 0x69
 b60:	6f6f6265 	svcvs	0x006f6265
 b64:	00632e74 	rsbeq	r2, r3, r4, ror lr
 b68:	72000001 	andvc	r0, r0, #1
 b6c:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 b70:	00000200 	andeq	r0, r0, r0, lsl #4
 b74:	02050000 	andeq	r0, r5, #0
 b78:	000090d0 	ldrdeq	r9, [r0], -r0
 b7c:	14010d03 	strne	r0, [r1], #-3331	; 0xd03
 b80:	15852f31 	strne	r2, [r5, #3889]	; 0xf31
 b84:	2f4d4b2f 	svccs	0x004d4b2f
 b88:	67523567 	ldrbvs	r3, [r2, -r7, ror #10]
 b8c:	01001002 	tsteq	r0, r2
 b90:	0000a001 	andeq	sl, r0, r1
 b94:	76000200 	strvc	r0, [r0], -r0, lsl #4
 b98:	02000000 	andeq	r0, r0, #0
 b9c:	0d0efb01 	vstreq	d15, [lr, #-4]
 ba0:	01010100 	mrseq	r0, (UNDEF: 17)
 ba4:	00000001 	andeq	r0, r0, r1
 ba8:	01000001 	tsteq	r0, r1
 bac:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 bb0:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
 bb4:	2f006372 	svccs	0x00006372
 bb8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 bbc:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 bc0:	6a6e6169 	bvs	1b9916c <__bss_end__+0x1b8efd4>
 bc4:	442f6e75 	strtmi	r6, [pc], #-3701	; bcc <_start-0x7434>
 bc8:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 bcc:	732f706f 	teqvc	pc, #111	; 0x6f
 bd0:	6f6f6863 	svcvs	0x006f6863
 bd4:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 bd8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 bdc:	30323931 	eorscc	r3, r2, r1, lsr r9
 be0:	3153432f 	cmpcc	r3, pc, lsr #6
 be4:	2f453034 	svccs	0x00453034
 be8:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 bec:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 bf0:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 bf4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 bf8:	00006970 	andeq	r6, r0, r0, ror r9
 bfc:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 c00:	00632e72 	rsbeq	r2, r3, r2, ror lr
 c04:	72000001 	andvc	r0, r0, #1
 c08:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 c0c:	00000200 	andeq	r0, r0, r0, lsl #4
 c10:	02050000 	andeq	r0, r5, #0
 c14:	00009144 	andeq	r9, r0, r4, asr #2
 c18:	2d2f1316 	stccs	3, cr1, [pc, #-88]!	; bc8 <_start-0x7438>
 c1c:	01040200 	mrseq	r0, R12_usr
 c20:	68062e06 	stmdavs	r6, {r1, r2, r9, sl, fp, sp}
 c24:	4c4b2f31 	mcrrmi	15, 3, r2, fp, cr1
 c28:	6a2f4c4b 	bvs	bd3d5c <__bss_end__+0xbc9bc4>
 c2c:	2f842f2f 	svccs	0x00842f2f
 c30:	01000802 	tsteq	r0, r2, lsl #16
 c34:	00016b01 	andeq	r6, r1, r1, lsl #22
 c38:	20000200 	andcs	r0, r0, r0, lsl #4
 c3c:	02000001 	andeq	r0, r0, #1
 c40:	0d0efb01 	vstreq	d15, [lr, #-4]
 c44:	01010100 	mrseq	r0, (UNDEF: 17)
 c48:	00000001 	andeq	r0, r0, r1
 c4c:	01000001 	tsteq	r0, r1
 c50:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
 c54:	2f006372 	svccs	0x00006372
 c58:	2f727375 	svccs	0x00727375
 c5c:	61636f6c 	cmnvs	r3, ip, ror #30
 c60:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
 c64:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
 c68:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 c6c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 c70:	61652d65 	cmnvs	r5, r5, ror #26
 c74:	342f6962 	strtcc	r6, [pc], #-2402	; c7c <_start-0x7384>
 c78:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 c7c:	3173632d 	cmncc	r3, sp, lsr #6
 c80:	2f653037 	svccs	0x00653037
 c84:	2f62696c 	svccs	0x0062696c
 c88:	2f636367 	svccs	0x00636367
 c8c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 c90:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 c94:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 c98:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 c9c:	2f332e38 	svccs	0x00332e38
 ca0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 ca4:	00656475 	rsbeq	r6, r5, r5, ror r4
 ca8:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 cac:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 cb0:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 cb4:	2f6e756a 	svccs	0x006e756a
 cb8:	6b736544 	blvs	1cda1d0 <__bss_end__+0x1cd0038>
 cbc:	2f706f74 	svccs	0x00706f74
 cc0:	6f686373 	svcvs	0x00686373
 cc4:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 cc8:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 ccc:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 cd0:	53432f30 	movtpl	r2, #16176	; 0x3f30
 cd4:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 cd8:	3173632f 	cmncc	r3, pc, lsr #6
 cdc:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 ce0:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 ce4:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 ce8:	00697062 	rsbeq	r7, r9, r2, rrx
 cec:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 cf0:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
 cf4:	432f6c61 	teqmi	pc, #24832	; 0x6100
 cf8:	616c6c65 	cmnvs	ip, r5, ror #24
 cfc:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 d00:	6f6e2d6d 	svcvs	0x006e2d6d
 d04:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 d08:	2f696261 	svccs	0x00696261
 d0c:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 d10:	73632d33 	cmnvc	r3, #3264	; 0xcc0
 d14:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
 d18:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 d1c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 d20:	61652d65 	cmnvs	r5, r5, ror #26
 d24:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
 d28:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
 d2c:	00006564 	andeq	r6, r0, r4, ror #10
 d30:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
 d34:	2e636f6c 	cdpcs	15, 6, cr6, cr3, cr12, {3}
 d38:	00010063 	andeq	r0, r1, r3, rrx
 d3c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
 d40:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
 d44:	00020068 	andeq	r0, r2, r8, rrx
 d48:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 d4c:	0300682e 	movweq	r6, #2094	; 0x82e
 d50:	74730000 	ldrbtvc	r0, [r3], #-0
 d54:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
 d58:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
 d5c:	00000000 	andeq	r0, r0, r0
 d60:	94980205 	ldrls	r0, [r8], #517	; 0x205
 d64:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
 d68:	02002f01 	andeq	r2, r0, #1, 30
 d6c:	82060104 	andhi	r0, r6, #4, 2
 d70:	4b4bbc06 	blmi	12efd90 <__bss_end__+0x12e5bf8>
 d74:	2fbe4d4b 	svccs	0x00be4d4b
 d78:	01040200 	mrseq	r0, R12_usr
 d7c:	bc068206 	sfmlt	f0, 1, [r6], {6}
 d80:	02004b4b 	andeq	r4, r0, #76800	; 0x12c00
 d84:	4a060104 	bmi	18119c <__bss_end__+0x177004>
 d88:	834bbb06 	movthi	fp, #47878	; 0xbb06
 d8c:	0a032f30 	beq	cca54 <__bss_end__+0xc28bc>
 d90:	02002fba 	andeq	r2, r0, #744	; 0x2e8
 d94:	82060104 	andhi	r0, r6, #4, 2
 d98:	f967bb06 			; <UNDEFINED> instruction: 0xf967bb06
 d9c:	0214c213 	andseq	ip, r4, #805306369	; 0x30000001
 da0:	01010008 	tsteq	r1, r8
 da4:	00000086 	andeq	r0, r0, r6, lsl #1
 da8:	00720002 	rsbseq	r0, r2, r2
 dac:	01020000 	mrseq	r0, (UNDEF: 2)
 db0:	000d0efb 	strdeq	r0, [sp], -fp
 db4:	01010101 	tsteq	r1, r1, lsl #2
 db8:	01000000 	mrseq	r0, (UNDEF: 0)
 dbc:	6c010000 	stcvs	0, cr0, [r1], {-0}
 dc0:	00636269 	rsbeq	r6, r3, r9, ror #4
 dc4:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 dc8:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 dcc:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 dd0:	2f6e756a 	svccs	0x006e756a
 dd4:	6b736544 	blvs	1cda2ec <__bss_end__+0x1cd0154>
 dd8:	2f706f74 	svccs	0x00706f74
 ddc:	6f686373 	svcvs	0x00686373
 de0:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 de4:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 de8:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 dec:	53432f30 	movtpl	r2, #16176	; 0x3f30
 df0:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 df4:	3173632f 	cmncc	r3, pc, lsr #6
 df8:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 dfc:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 e00:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 e04:	00697062 	rsbeq	r7, r9, r2, rrx
 e08:	74757000 	ldrbtvc	r7, [r5], #-0
 e0c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 e10:	0100632e 	tsteq	r0, lr, lsr #6
 e14:	70720000 	rsbsvc	r0, r2, r0
 e18:	00682e69 	rsbeq	r2, r8, r9, ror #28
 e1c:	00000002 	andeq	r0, r0, r2
 e20:	10020500 	andne	r0, r2, r0, lsl #10
 e24:	14000096 	strne	r0, [r0], #-150	; 0x96
 e28:	0006024a 	andeq	r0, r6, sl, asr #4
 e2c:	Address 0x0000000000000e2c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0x56e
   4:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
   8:	6265725f 	rsbvs	r7, r5, #-268435451	; 0xf0000005
   c:	00746f6f 	rsbseq	r6, r4, pc, ror #30
  10:	20554e47 	subscs	r4, r5, r7, asr #28
  14:	2e342043 	cdpcs	0, 3, cr2, cr4, cr3, {2}
  18:	20332e38 	eorscs	r2, r3, r8, lsr lr
  1c:	70636d2d 	rsbvc	r6, r3, sp, lsr #26
  20:	72613d75 	rsbvc	r3, r1, #7488	; 0x1d40
  24:	3731316d 	ldrcc	r3, [r1, -sp, ror #2]!
  28:	667a6a36 			; <UNDEFINED> instruction: 0x667a6a36
  2c:	2d20732d 	stccs	3, cr7, [r0, #-180]!	; 0xffffff4c
  30:	6e75746d 	cdpvs	4, 7, cr7, cr5, cr13, {3}
  34:	72613d65 	rsbvc	r3, r1, #6464	; 0x1940
  38:	3731316d 	ldrcc	r3, [r1, -sp, ror #2]!
  3c:	667a6a36 			; <UNDEFINED> instruction: 0x667a6a36
  40:	2d20732d 	stccs	3, cr7, [r0, #-180]!	; 0xffffff4c
  44:	62646767 	rsbvs	r6, r4, #27000832	; 0x19c0000
  48:	674f2d20 	strbvs	r2, [pc, -r0, lsr #26]
  4c:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xd20
  50:	6e673d64 	cdpvs	13, 6, cr3, cr7, cr4, {3}
  54:	20393975 	eorscs	r3, r9, r5, ror r9
  58:	7266662d 	rsbvc	r6, r6, #47185920	; 0x2d00000
  5c:	74736565 	ldrbtvc	r6, [r3], #-1381	; 0x565
  60:	69646e61 	stmdbvs	r4!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  64:	6e00676e 	cdpvs	7, 0, cr6, cr0, cr14, {3}
  68:	616d746f 	cmnvs	sp, pc, ror #8
  6c:	73006e69 	movwvc	r6, #3689	; 0xe69
  70:	6b636174 	blvs	18d8648 <__bss_end__+0x18ce4b0>
  74:	72617500 	rsbvc	r7, r1, #0, 10
  78:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
  7c:	75007469 	strvc	r7, [r0, #-1129]	; 0x469
  80:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  84:	2064656e 	rsbcs	r6, r4, lr, ror #10
  88:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
  8c:	656c6300 	strbvs	r6, [ip, #-768]!	; 0x300
  90:	725f6e61 	subsvc	r6, pc, #1552	; 0x610
  94:	6f6f6265 	svcvs	0x006f6265
  98:	70720074 	rsbsvc	r0, r2, r4, ror r0
  9c:	6f665f69 	svcvs	0x00665f69
  a0:	2f006b72 	svccs	0x00006b72
  a4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  a8:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
  ac:	6a6e6169 	bvs	1b98658 <__bss_end__+0x1b8e4c0>
  b0:	442f6e75 	strtmi	r6, [pc], #-3701	; b8 <_start-0x7f48>
  b4:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
  b8:	732f706f 	teqvc	pc, #111	; 0x6f
  bc:	6f6f6863 	svcvs	0x006f6863
  c0:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
  c4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
  c8:	30323931 	eorscc	r3, r2, r1, lsr r9
  cc:	3153432f 	cmpcc	r3, pc, lsr #6
  d0:	2f453034 	svccs	0x00453034
  d4:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
  d8:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
  dc:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
  e0:	62616c2f 	rsbvs	r6, r1, #12032	; 0x2f00
  e4:	2d362f73 	ldccs	15, cr2, [r6, #-460]!	; 0xfffffe34
  e8:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
  ec:	2f736461 	svccs	0x00736461
  f0:	68742d32 	ldmdavs	r4!, {r1, r4, r5, r8, sl, fp, sp}^
  f4:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
  f8:	656e2e73 	strbvs	r2, [lr, #-3699]!	; 0xe73
  fc:	68730077 	ldmdavs	r3!, {r0, r1, r2, r4, r5, r6}^
 100:	2074726f 	rsbscs	r7, r4, pc, ror #4
 104:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 108:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
 10c:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
 110:	616d6b00 	cmnvs	sp, r0, lsl #22
 114:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 118:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 11c:	7268745f 	rsbvc	r7, r8, #1593835520	; 0x5f000000
 120:	5f646165 	svcpl	0x00646165
 124:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 128:	2d310074 	ldccs	0, cr0, [r1, #-464]!	; 0xfffffe30
 12c:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0x574
 130:	7268742d 	rsbvc	r7, r8, #754974720	; 0x2d000000
 134:	2e646165 	powcssz	f6, f4, f5
 138:	68740063 	ldmdavs	r4!, {r0, r1, r5, r6}^
 13c:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 140:	646f635f 	strbtvs	r6, [pc], #-863	; 148 <_start-0x7eb8>
 144:	5f5f0065 	svcpl	0x005f0065
 148:	434e5546 	movtmi	r5, #58694	; 0xe546
 14c:	4e4f4954 	mcrmi	9, 2, r4, cr15, cr4, {2}
 150:	74005f5f 	strvc	r5, [r0], #-3935	; 0xf5f
 154:	61657268 	cmnvs	r5, r8, ror #4
 158:	6f635f64 	svcvs	0x00635f64
 15c:	00746e75 	rsbseq	r6, r4, r5, ror lr
 160:	5f697072 	svcpl	0x00697072
 164:	74697865 	strbtvc	r7, [r9], #-2149	; 0x865
 168:	67657200 	strbvs	r7, [r5, -r0, lsl #4]!
 16c:	7661735f 			; <UNDEFINED> instruction: 0x7661735f
 170:	72615f65 	rsbvc	r5, r1, #404	; 0x194
 174:	6c006165 	stfvss	f6, [r0], {101}	; 0x65
 178:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 17c:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 180:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 184:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
 188:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 18c:	70720074 	rsbsvc	r0, r2, r4, ror r0
 190:	68745f69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 194:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 198:	7400745f 	strvc	r7, [r0], #-1119	; 0x45f
 19c:	61657268 	cmnvs	r5, r8, ror #4
 1a0:	75735f64 	ldrbvc	r5, [r3, #-3940]!	; 0xf64
 1a4:	7072006d 	rsbsvc	r0, r2, sp, rrx
 1a8:	69795f69 	ldmdbvs	r9!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 1ac:	00646c65 	rsbeq	r6, r4, r5, ror #24
 1b0:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
 1b4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
 1b8:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
 1bc:	6f6c2067 	svcvs	0x006c2067
 1c0:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 1c4:	7200746e 	andvc	r7, r0, #1845493760	; 0x6e000000
 1c8:	745f6970 	ldrbvc	r6, [pc], #-2416	; 1d0 <_start-0x7e30>
 1cc:	61657268 	cmnvs	r5, r8, ror #4
 1d0:	68730064 	ldmdavs	r3!, {r2, r5, r6}^
 1d4:	2074726f 	rsbscs	r7, r4, pc, ror #4
 1d8:	00746e69 	rsbseq	r6, r4, r9, ror #28
 1dc:	746e6975 	strbtvc	r6, [lr], #-2421	; 0x975
 1e0:	745f3233 	ldrbvc	r3, [pc], #-563	; 1e8 <_start-0x7e18>
 1e4:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 1e8:	7275635f 	rsbsvc	r6, r5, #2080374785	; 0x7c000001
 1ec:	7268745f 	rsbvc	r7, r8, #1593835520	; 0x5f000000
 1f0:	00646165 	rsbeq	r6, r4, r5, ror #2
 1f4:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
 1f8:	5f636f6c 	svcpl	0x00636f6c
 1fc:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
 200:	705f5100 	subsvc	r5, pc, r0, lsl #2
 204:	00687375 	rsbeq	r7, r8, r5, ror r3
 208:	2d697072 	stclcs	0, cr7, [r9, #-456]!	; 0xfffffe38
 20c:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 210:	632e6461 	teqvs	lr, #1627389952	; 0x61000000
 214:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 218:	696f6a5f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, r9, fp, sp, lr}^	; <UNPREDICTABLE>
 21c:	7865006e 	stmdavc	r5!, {r1, r2, r3, r5, r6}^
 220:	6f637469 	svcvs	0x00637469
 224:	6e006564 	cfsh32vs	mvfx6, mvfx0, #52
 228:	5f747865 	svcpl	0x00747865
 22c:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 230:	6e006461 	cdpvs	4, 0, cr6, cr0, cr1, {3}
 234:	6e75725f 	mrcvs	2, 3, r7, cr5, cr15, {2}
 238:	665f6e00 	ldrbvs	r6, [pc], -r0, lsl #28
 23c:	00656572 	rsbeq	r6, r5, r2, ror r5
 240:	5f697072 	svcpl	0x00697072
 244:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 248:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
 24c:	6568635f 	strbvs	r6, [r8, #-863]!	; 0x35f
 250:	51006b63 	tstpl	r0, r3, ror #22
 254:	6c656e5f 	stclvs	14, cr6, [r5], #-380	; 0xfffffe84
 258:	72006d65 	andvc	r6, r0, #6464	; 0x1940
 25c:	695f6970 	ldmdbvs	pc, {r4, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
 260:	5f74696e 	svcpl	0x0074696e
 264:	6d617274 	sfmvs	f7, 2, [r1, #-464]!	; 0xfffffe30
 268:	696c6f70 	stmdbvs	ip!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 26c:	6b00656e 	blvs	1982c <__bss_end__+0xf694>
 270:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 274:	615f636f 	cmpvs	pc, pc, ror #6
 278:	6e67696c 	cdpvs	9, 6, cr6, cr7, cr12, {3}
 27c:	72006465 	andvc	r6, r0, #1694498816	; 0x65000000
 280:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
 284:	6b636174 	blvs	18d885c <__bss_end__+0x18ce6c4>
 288:	6568635f 	strbvs	r6, [r8, #-863]!	; 0x35f
 28c:	66006b63 	strvs	r6, [r0], -r3, ror #22
 290:	71656572 	smcvc	22098	; 0x5652
 294:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 298:	6178655f 	cmnvs	r8, pc, asr r5
 29c:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 2a0:	7065656c 	rsbvc	r6, r5, ip, ror #10
 2a4:	655f5100 	ldrbvs	r5, [pc, #-256]	; 1ac <_start-0x7e54>
 2a8:	7974706d 	ldmdbvc	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
 2ac:	705f5100 	subsvc	r5, pc, r0, lsl #2
 2b0:	7300706f 	movwvc	r7, #111	; 0x6f
 2b4:	64656863 	strbtvs	r6, [r5], #-2147	; 0x863
 2b8:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
 2bc:	7268745f 	rsbvc	r7, r8, #1593835520	; 0x5f000000
 2c0:	00646165 	rsbeq	r6, r4, r5, ror #2
 2c4:	6c696174 	stfvse	f6, [r9], #-464	; 0xfffffe30
 2c8:	5f687400 	svcpl	0x00687400
 2cc:	6f6c6c61 	svcvs	0x006c6c61
 2d0:	68740063 	ldmdavs	r4!, {r0, r1, r5, r6}^
 2d4:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0x65f
 2d8:	5f510065 	svcpl	0x00510065
 2dc:	65707061 	ldrbvs	r7, [r0, #-97]!	; 0x61
 2e0:	6800646e 	stmdavs	r0, {r1, r2, r3, r5, r6, sl, sp, lr}
 2e4:	00646165 	rsbeq	r6, r4, r5, ror #2
 2e8:	716e7572 	smcvc	59218	; 0xe752
 2ec:	6c616e00 	stclvs	14, cr6, [r1], #-0
 2f0:	65636f6c 	strbvs	r6, [r3, #-3948]!	; 0xf6c
 2f4:	69630064 	stmdbvs	r3!, {r2, r5, r6}^
 2f8:	6c756372 	ldclvs	3, cr6, [r5], #-456	; 0xfffffe38
 2fc:	632e7261 	teqvs	lr, #268435462	; 0x10000006
 300:	5f716300 	svcpl	0x00716300
 304:	5f706f70 	svcpl	0x00706f70
 308:	626e6f6e 	rsbvs	r6, lr, #440	; 0x1b8
 30c:	6b636f6c 	blvs	18dc0c4 <__bss_end__+0x18d1f2c>
 310:	5f716300 	svcpl	0x00716300
 314:	5f706f70 	svcpl	0x00706f70
 318:	6f6e5f6e 	svcvs	0x006e5f6e
 31c:	006b6c62 	rsbeq	r6, fp, r2, ror #24
 320:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
 324:	776f6c66 	strbvc	r6, [pc, -r6, ror #24]!
 328:	74616400 	strbtvc	r6, [r1], #-1024	; 0x400
 32c:	71630061 	cmnvc	r3, r1, rrx
 330:	00745f65 	rsbseq	r5, r4, r5, ror #30
 334:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
 338:	6300745f 	movwvs	r7, #1119	; 0x45f
 33c:	65705f71 	ldrbvs	r5, [r0, #-3953]!	; 0xf71
 340:	6e5f6b65 	vnmlavs.f64	d22, d15, d21
 344:	72726500 	rsbsvc	r6, r2, #0, 10
 348:	5f73726f 	svcpl	0x0073726f
 34c:	61746166 	cmnvs	r4, r6, ror #2
 350:	00705f6c 	rsbseq	r5, r0, ip, ror #30
 354:	705f7163 	subsvc	r7, pc, r3, ror #2
 358:	6d00706f 	stcvs	0, cr7, [r0, #-444]	; 0xfffffe44
 35c:	65736d65 	ldrbvs	r6, [r3, #-3429]!	; 0xd65
 360:	71630074 	smcvc	12292	; 0x3004
 364:	70736e5f 	rsbsvc	r6, r3, pc, asr lr
 368:	00656361 	rsbeq	r6, r5, r1, ror #6
 36c:	695f7163 	ldmdbvs	pc, {r0, r1, r5, r6, r8, ip, sp, lr}^	; <UNPREDICTABLE>
 370:	0074696e 	rsbseq	r6, r4, lr, ror #18
 374:	705f7163 	subsvc	r7, pc, r3, ror #2
 378:	6e5f706f 	cdpvs	0, 5, cr7, cr15, cr15, {3}
 37c:	5f716300 	svcpl	0x00716300
 380:	68737570 	ldmdavs	r3!, {r4, r5, r6, r8, sl, ip, sp, lr}^
 384:	5f716300 	svcpl	0x00716300
 388:	68737570 	ldmdavs	r3!, {r4, r5, r6, r8, sl, ip, sp, lr}^
 38c:	63006e5f 	movwvs	r6, #3679	; 0xe5f
 390:	6d655f71 	stclvs	15, cr5, [r5, #-452]!	; 0xfffffe3c
 394:	00797470 	rsbseq	r7, r9, r0, ror r4
 398:	636e6566 	cmnvs	lr, #427819008	; 0x19800000
 39c:	71630065 	cmnvc	r3, r5, rrx
 3a0:	6c656e5f 	stclvs	14, cr6, [r5], #-380	; 0xfffffe84
 3a4:	63006d65 	movwvs	r6, #3429	; 0xd65
 3a8:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
 3ac:	5f716300 	svcpl	0x00716300
 3b0:	6c6c7566 	cfstr64vs	mvdx7, [ip], #-408	; 0xfffffe68
 3b4:	5f716300 	svcpl	0x00716300
 3b8:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 3bc:	71630074 	smcvc	12292	; 0x3004
 3c0:	006b6f5f 	rsbeq	r6, fp, pc, asr pc
 3c4:	745f7163 	ldrbvc	r7, [pc], #-355	; 3cc <_start-0x7c34>
 3c8:	62696c00 	rsbvs	r6, r9, #0, 24
 3cc:	656d2f63 	strbvs	r2, [sp, #-3939]!	; 0xf63
 3d0:	7465736d 	strbtvc	r7, [r5], #-877	; 0x36d
 3d4:	2f00632e 	svccs	0x0000632e
 3d8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 3dc:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 3e0:	6a6e6169 	bvs	1b9898c <__bss_end__+0x1b8e7f4>
 3e4:	442f6e75 	strtmi	r6, [pc], #-3701	; 3ec <_start-0x7c14>
 3e8:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 3ec:	732f706f 	teqvc	pc, #111	; 0x6f
 3f0:	6f6f6863 	svcvs	0x006f6863
 3f4:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 3f8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 3fc:	30323931 	eorscc	r3, r2, r1, lsr r9
 400:	3153432f 	cmpcc	r3, pc, lsr #6
 404:	2f453034 	svccs	0x00453034
 408:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 40c:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 410:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 414:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 418:	5f006970 	svcpl	0x00006970
 41c:	756e675f 	strbvc	r6, [lr, #-1887]!	; 0x75f
 420:	61765f63 	cmnvs	r6, r3, ror #30
 424:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
 428:	696c0074 	stmdbvs	ip!, {r2, r4, r5, r6}^
 42c:	702f6362 	eorvc	r6, pc, r2, ror #6
 430:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 434:	00632e6b 	rsbeq	r2, r3, fp, ror #28
 438:	705f6176 	subsvc	r6, pc, r6, ror r1	; <UNPREDICTABLE>
 43c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 440:	5f5f006b 	svcpl	0x005f006b
 444:	6c5f6176 	ldfvse	f6, [pc], {118}	; 0x76
 448:	00747369 	rsbseq	r7, r4, r9, ror #6
 44c:	73677261 	cmnvc	r7, #268435462	; 0x10000006
 450:	615f5f00 	cmpvs	pc, r0, lsl #30
 454:	696c0070 	stmdbvs	ip!, {r4, r5, r6}^
 458:	702f6362 	eorvc	r6, pc, r2, ror #6
 45c:	2e6b7475 	mcrcs	4, 3, r7, cr11, cr5, {3}
 460:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
 464:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
 468:	705f6c61 	subsvc	r6, pc, r1, ror #24
 46c:	006b7475 	rsbeq	r7, fp, r5, ror r4
 470:	5f697072 	svcpl	0x00697072
 474:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 478:	00726168 	rsbseq	r6, r2, r8, ror #2
 47c:	5f67656e 	svcpl	0x0067656e
 480:	65720070 	ldrbvs	r0, [r2, #-112]!	; 0x70
 484:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 488:	73690065 	cmnvc	r9, #101	; 0x65
 48c:	69676964 	stmdbvs	r7!, {r2, r5, r6, r8, fp, sp, lr}^
 490:	75700074 	ldrbvc	r0, [r0, #-116]!	; 0x74
 494:	665f7374 			; <UNDEFINED> instruction: 0x665f7374
 498:	61620070 	smcvs	8192	; 0x2000
 49c:	73006573 	movwvc	r6, #1395	; 0x573
 4a0:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
 4a4:	00705f64 	rsbseq	r5, r0, r4, ror #30
 4a8:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 4ac:	2d61762f 	stclcs	6, cr7, [r1, #-188]!	; 0xffffff44
 4b0:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 4b4:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
 4b8:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 4bc:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
 4c0:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xf5f
 4c4:	00747570 	rsbseq	r7, r4, r0, ror r5
 4c8:	74646977 	strbtvc	r6, [r4], #-2423	; 0x977
 4cc:	75700068 	ldrbvc	r0, [r0, #-104]!	; 0x68
 4d0:	665f6374 			; <UNDEFINED> instruction: 0x665f6374
 4d4:	6d650070 	stclvs	0, cr0, [r5, #-448]!	; 0xfffffe40
 4d8:	63007469 	movwvs	r7, #1129	; 0x469
 4dc:	30343173 	eorscc	r3, r4, r3, ror r1
 4e0:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 4e4:	6c632f63 	stclvs	15, cr2, [r3], #-396	; 0xfffffe74
 4e8:	2d6e6165 	stfcse	f6, [lr, #-404]!	; 0xfffffe6c
 4ec:	6f626572 	svcvs	0x00626572
 4f0:	632e746f 	teqvs	lr, #1862270976	; 0x6f000000
 4f4:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 4f8:	6d5f7961 	ldclvs	9, cr7, [pc, #-388]	; 37c <_start-0x7c84>
 4fc:	73630073 	cmnvc	r3, #115	; 0x73
 500:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 504:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 508:	7473632f 	ldrbtvc	r6, [r3], #-815	; 0x32f
 50c:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
 510:	5f5f0063 	svcpl	0x005f0063
 514:	5f737362 	svcpl	0x00737362
 518:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 51c:	005f5f74 	subseq	r5, pc, r4, ror pc	; <UNPREDICTABLE>
 520:	73625f5f 	cmnvc	r2, #380	; 0x17c
 524:	6e655f73 	mcrvs	15, 3, r5, cr5, cr3, {3}
 528:	005f5f64 	subseq	r5, pc, r4, ror #30
 52c:	5f737362 	svcpl	0x00737362
 530:	00646e65 	rsbeq	r6, r4, r5, ror #28
 534:	7473635f 	ldrbtvc	r6, [r3], #-863	; 0x35f
 538:	00747261 	rsbseq	r7, r4, r1, ror #4
 53c:	755f7461 	ldrbvc	r7, [pc, #-1121]	; e3 <_start-0x7f1d>
 540:	5f726573 	svcpl	0x00726573
 544:	6576656c 	ldrbvs	r6, [r6, #-1388]!	; 0x56c
 548:	4d50006c 	ldclmi	0, cr0, [r0, #-432]	; 0xfffffe50
 54c:	5341505f 	movtpl	r5, #4191	; 0x105f
 550:	524f5753 	subpl	r5, pc, #21757952	; 0x14c0000
 554:	73630044 	cmnvc	r3, #68	; 0x44
 558:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 55c:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 560:	6265722f 	rsbvs	r7, r5, #-268435454	; 0xf0000002
 564:	2e746f6f 	cdpcs	15, 7, cr6, cr4, cr15, {3}
 568:	4d500063 	ldclmi	0, cr0, [r0, #-396]	; 0xfffffe74
 56c:	5453525f 	ldrbpl	r5, [r3], #-607	; 0x25f
 570:	52575f43 	subspl	r5, r7, #268	; 0x10c
 574:	5f474643 	svcpl	0x00474643
 578:	4c4c5546 	cfstr64mi	mvdx5, [ip], {70}	; 0x46
 57c:	5345525f 	movtpl	r5, #21087	; 0x525f
 580:	50005445 	andpl	r5, r0, r5, asr #8
 584:	44575f4d 	ldrbmi	r5, [r7], #-3917	; 0xf4d
 588:	7300474f 	movwvc	r4, #1871	; 0x74f
 58c:	755f7465 	ldrbvc	r7, [pc, #-1125]	; 12f <_start-0x7ed1>
 590:	5f726573 	svcpl	0x00726573
 594:	6576656c 	ldrbvs	r6, [r6, #-1388]!	; 0x56c
 598:	5550006c 	ldrbpl	r0, [r0, #-108]	; 0x6c
 59c:	00323354 	eorseq	r3, r2, r4, asr r3
 5a0:	525f4d50 	subspl	r4, pc, #80, 26	; 0x1400
 5a4:	00435453 	subeq	r5, r3, r3, asr r4
 5a8:	72737063 	rsbsvc	r7, r3, #99	; 0x63
 5ac:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 5b0:	735f7961 	cmpvc	pc, #1589248	; 0x184000
 5b4:	63006365 	movwvs	r6, #869	; 0x365
 5b8:	30343173 	eorscc	r3, r4, r3, ror r1
 5bc:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 5c0:	69742f63 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
 5c4:	2e72656d 	cdpcs	5, 7, cr6, cr2, cr13, {3}
 5c8:	45470063 	strbmi	r0, [r7, #-99]	; 0x63
 5cc:	00323354 	eorseq	r3, r2, r4, asr r3
 5d0:	6b636974 	blvs	18daba8 <__bss_end__+0x18d0a10>
 5d4:	65640073 	strbvs	r0, [r4, #-115]!	; 0x73
 5d8:	5f79616c 	svcpl	0x0079616c
 5dc:	6c637963 	stclvs	9, cr7, [r3], #-396	; 0xfffffe74
 5e0:	64007365 	strvs	r7, [r0], #-869	; 0x365
 5e4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 5e8:	0073755f 	rsbseq	r7, r3, pc, asr r5
 5ec:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 5f0:	65675f72 	strbvs	r5, [r7, #-3954]!	; 0xf72
 5f4:	73755f74 	cmnvc	r5, #116, 30	; 0x1d0
 5f8:	6b006365 	blvs	19394 <__bss_end__+0xf1fc>
 5fc:	65657266 	strbvs	r7, [r5, #-614]!	; 0x266
 600:	6c6c615f 	stfvse	f6, [ip], #-380	; 0xfffffe84
 604:	696c6100 	stmdbvs	ip!, {r8, sp, lr}^
 608:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
 60c:	6165685f 	cmnvs	r5, pc, asr r8
 610:	74705f70 	ldrbtvc	r5, [r0], #-3952	; 0xf70
 614:	796d0072 	stmdbvc	sp!, {r1, r4, r5, r6}^
 618:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 61c:	616d6b2f 	cmnvs	sp, pc, lsr #22
 620:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 624:	6900632e 	stmdbvs	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
 628:	5f74696e 	svcpl	0x0074696e
 62c:	6c610070 	stclvs	0, cr0, [r1], #-448	; 0xfffffe40
 630:	6d6e6769 	stclvs	7, cr6, [lr, #-420]!	; 0xfffffe5c
 634:	00746e65 	rsbseq	r6, r4, r5, ror #28
 638:	6e756f72 	mrcvs	15, 3, r6, cr5, cr2, {3}
 63c:	5f646564 	svcpl	0x00646564
 640:	7479626e 	ldrbtvc	r6, [r9], #-622	; 0x26e
 644:	6b007365 	blvs	1d3e0 <__bss_end__+0x13248>
 648:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 64c:	685f636f 	ldmdavs	pc, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 650:	5f706165 	svcpl	0x00706165
 654:	00727470 	rsbseq	r7, r2, r0, ror r4
 658:	65685f5f 	strbvs	r5, [r8, #-3935]!	; 0xf5f
 65c:	735f7061 	cmpvc	pc, #97	; 0x61
 660:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
 664:	74005f5f 	strvc	r5, [r0], #-3935	; 0xf5f
 668:	6c615f6f 	stclvs	15, cr5, [r1], #-444	; 0xfffffe44
 66c:	61636f6c 	cmnvs	r3, ip, ror #30
 670:	75006574 	strvc	r6, [r0, #-1396]	; 0x574
 674:	5f747261 	svcpl	0x00747261
 678:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 67c:	746e6900 	strbtvc	r6, [lr], #-2304	; 0x900
 680:	616e7265 	cmnvs	lr, r5, ror #4
 684:	75705f6c 	ldrbvc	r5, [r0, #-3948]!	; 0xf6c
 688:	61686374 	smcvs	34356	; 0x8634
 68c:	696c0072 	stmdbvs	ip!, {r1, r4, r5, r6}^
 690:	702f6362 	eorvc	r6, pc, r2, ror #6
 694:	68637475 	stmdavs	r3!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
 698:	632e7261 	teqvs	lr, #268435462	; 0x10000006
	...

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	00008010 	andeq	r8, r0, r0, lsl r0
  1c:	000000ac 	andeq	r0, r0, ip, lsr #1
  20:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
  24:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
  28:	180e4201 	stmdane	lr, {r0, r9, lr}
  2c:	0000001c 	andeq	r0, r0, ip, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	000080bc 	strheq	r8, [r0], -ip
  38:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  3c:	83180e42 	tsthi	r8, #1056	; 0x420
  40:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
  44:	87038604 	strhi	r8, [r3, -r4, lsl #12]
  48:	00018e02 	andeq	r8, r1, r2, lsl #28
  4c:	0000000c 	andeq	r0, r0, ip
  50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  54:	7c020001 	stcvc	0, cr0, [r2], {1}
  58:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  5c:	0000000c 	andeq	r0, r0, ip
  60:	0000004c 	andeq	r0, r0, ip, asr #32
  64:	000081ac 	andeq	r8, r0, ip, lsr #3
  68:	00000008 	andeq	r0, r0, r8
  6c:	0000000c 	andeq	r0, r0, ip
  70:	0000004c 	andeq	r0, r0, ip, asr #32
  74:	000081b4 			; <UNDEFINED> instruction: 0x000081b4
  78:	00000038 	andeq	r0, r0, r8, lsr r0
  7c:	0000000c 	andeq	r0, r0, ip
  80:	0000004c 	andeq	r0, r0, ip, asr #32
  84:	000081ec 	andeq	r8, r0, ip, ror #3
  88:	00000028 	andeq	r0, r0, r8, lsr #32
  8c:	00000014 	andeq	r0, r0, r4, lsl r0
  90:	0000004c 	andeq	r0, r0, ip, asr #32
  94:	00008214 	andeq	r8, r0, r4, lsl r2
  98:	00000018 	andeq	r0, r0, r8, lsl r0
  9c:	83080e42 	movwhi	r0, #36418	; 0x8e42
  a0:	00018e02 	andeq	r8, r1, r2, lsl #28
  a4:	00000014 	andeq	r0, r0, r4, lsl r0
  a8:	0000004c 	andeq	r0, r0, ip, asr #32
  ac:	0000822c 	andeq	r8, r0, ip, lsr #4
  b0:	0000007c 	andeq	r0, r0, ip, ror r0
  b4:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
  b8:	00018e02 	andeq	r8, r1, r2, lsl #28
  bc:	00000014 	andeq	r0, r0, r4, lsl r0
  c0:	0000004c 	andeq	r0, r0, ip, asr #32
  c4:	000082a8 	andeq	r8, r0, r8, lsr #5
  c8:	00000090 	muleq	r0, r0, r0
  cc:	83080e42 	movwhi	r0, #36418	; 0x8e42
  d0:	00018e02 	andeq	r8, r1, r2, lsl #28
  d4:	00000014 	andeq	r0, r0, r4, lsl r0
  d8:	0000004c 	andeq	r0, r0, ip, asr #32
  dc:	00008338 	andeq	r8, r0, r8, lsr r3
  e0:	00000080 	andeq	r0, r0, r0, lsl #1
  e4:	83080e42 	movwhi	r0, #36418	; 0x8e42
  e8:	00018e02 	andeq	r8, r1, r2, lsl #28
  ec:	0000000c 	andeq	r0, r0, ip
  f0:	0000004c 	andeq	r0, r0, ip, asr #32
  f4:	000083b8 			; <UNDEFINED> instruction: 0x000083b8
  f8:	00000010 	andeq	r0, r0, r0, lsl r0
  fc:	00000018 	andeq	r0, r0, r8, lsl r0
 100:	0000004c 	andeq	r0, r0, ip, asr #32
 104:	000083c8 	andeq	r8, r0, r8, asr #7
 108:	00000034 	andeq	r0, r0, r4, lsr r0
 10c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 110:	86038504 	strhi	r8, [r3], -r4, lsl #10
 114:	00018e02 	andeq	r8, r1, r2, lsl #28
 118:	0000000c 	andeq	r0, r0, ip
 11c:	0000004c 	andeq	r0, r0, ip, asr #32
 120:	000083fc 	strdeq	r8, [r0], -ip
 124:	00000004 	andeq	r0, r0, r4
 128:	0000000c 	andeq	r0, r0, ip
 12c:	0000004c 	andeq	r0, r0, ip, asr #32
 130:	00008400 	andeq	r8, r0, r0, lsl #8
 134:	00000004 	andeq	r0, r0, r4
 138:	00000018 	andeq	r0, r0, r8, lsl r0
 13c:	0000004c 	andeq	r0, r0, ip, asr #32
 140:	00008404 	andeq	r8, r0, r4, lsl #8
 144:	00000090 	muleq	r0, r0, r0
 148:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
 14c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
 150:	200e4201 	andcs	r4, lr, r1, lsl #4
 154:	00000018 	andeq	r0, r0, r8, lsl r0
 158:	0000004c 	andeq	r0, r0, ip, asr #32
 15c:	00008494 	muleq	r0, r4, r4
 160:	00000070 	andeq	r0, r0, r0, ror r0
 164:	83100e42 	tsthi	r0, #1056	; 0x420
 168:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 16c:	00018e02 	andeq	r8, r1, r2, lsl #28
 170:	00000014 	andeq	r0, r0, r4, lsl r0
 174:	0000004c 	andeq	r0, r0, ip, asr #32
 178:	00008504 	andeq	r8, r0, r4, lsl #10
 17c:	00000028 	andeq	r0, r0, r8, lsr #32
 180:	83080e42 	movwhi	r0, #36418	; 0x8e42
 184:	00018e02 	andeq	r8, r1, r2, lsl #28
 188:	00000014 	andeq	r0, r0, r4, lsl r0
 18c:	0000004c 	andeq	r0, r0, ip, asr #32
 190:	0000852c 	andeq	r8, r0, ip, lsr #10
 194:	00000028 	andeq	r0, r0, r8, lsr #32
 198:	83080e42 	movwhi	r0, #36418	; 0x8e42
 19c:	00018e02 	andeq	r8, r1, r2, lsl #28
 1a0:	00000014 	andeq	r0, r0, r4, lsl r0
 1a4:	0000004c 	andeq	r0, r0, ip, asr #32
 1a8:	00008554 	andeq	r8, r0, r4, asr r5
 1ac:	00000028 	andeq	r0, r0, r8, lsr #32
 1b0:	83080e42 	movwhi	r0, #36418	; 0x8e42
 1b4:	00018e02 	andeq	r8, r1, r2, lsl #28
 1b8:	0000000c 	andeq	r0, r0, ip
 1bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1c0:	7c020001 	stcvc	0, cr0, [r2], {1}
 1c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1c8:	00000018 	andeq	r0, r0, r8, lsl r0
 1cc:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
 1d0:	00008588 	andeq	r8, r0, r8, lsl #11
 1d4:	00000080 	andeq	r0, r0, r0, lsl #1
 1d8:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 1dc:	42018e02 	andmi	r8, r1, #2, 28
 1e0:	0000180e 	andeq	r1, r0, lr, lsl #16
 1e4:	00000014 	andeq	r0, r0, r4, lsl r0
 1e8:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
 1ec:	00008608 	andeq	r8, r0, r8, lsl #12
 1f0:	00000040 	andeq	r0, r0, r0, asr #32
 1f4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 1f8:	00018e02 	andeq	r8, r1, r2, lsl #28
 1fc:	00000018 	andeq	r0, r0, r8, lsl r0
 200:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
 204:	00008648 	andeq	r8, r0, r8, asr #12
 208:	000001a4 	andeq	r0, r0, r4, lsr #3
 20c:	83100e42 	tsthi	r0, #1056	; 0x420
 210:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 214:	00018e02 	andeq	r8, r1, r2, lsl #28
 218:	00000018 	andeq	r0, r0, r8, lsl r0
 21c:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
 220:	000087ec 	andeq	r8, r0, ip, ror #15
 224:	0000006c 	andeq	r0, r0, ip, rrx
 228:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
 22c:	86028503 	strhi	r8, [r2], -r3, lsl #10
 230:	00000001 	andeq	r0, r0, r1
 234:	0000001c 	andeq	r0, r0, ip, lsl r0
 238:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
 23c:	00008858 	andeq	r8, r0, r8, asr r8
 240:	00000034 	andeq	r0, r0, r4, lsr r0
 244:	83180e42 	tsthi	r8, #1056	; 0x420
 248:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
 24c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
 250:	00018e02 	andeq	r8, r1, r2, lsl #28
 254:	00000018 	andeq	r0, r0, r8, lsl r0
 258:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
 25c:	0000888c 	andeq	r8, r0, ip, lsl #17
 260:	00000058 	andeq	r0, r0, r8, asr r0
 264:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 268:	86038504 	strhi	r8, [r3], -r4, lsl #10
 26c:	00018e02 	andeq	r8, r1, r2, lsl #28
 270:	00000018 	andeq	r0, r0, r8, lsl r0
 274:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
 278:	000088e4 	andeq	r8, r0, r4, ror #17
 27c:	000000a0 	andeq	r0, r0, r0, lsr #1
 280:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 284:	86038504 	strhi	r8, [r3], -r4, lsl #10
 288:	00018e02 	andeq	r8, r1, r2, lsl #28
 28c:	00000020 	andeq	r0, r0, r0, lsr #32
 290:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
 294:	00008984 	andeq	r8, r0, r4, lsl #19
 298:	0000011c 	andeq	r0, r0, ip, lsl r1
 29c:	84200e42 	strthi	r0, [r0], #-3650	; 0xe42
 2a0:	86078508 	strhi	r8, [r7], -r8, lsl #10
 2a4:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
 2a8:	8a038904 	bhi	e26c0 <__bss_end__+0xd8528>
 2ac:	00018e02 	andeq	r8, r1, r2, lsl #28
 2b0:	0000000c 	andeq	r0, r0, ip
 2b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2b8:	7c020001 	stcvc	0, cr0, [r2], {1}
 2bc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2c0:	0000000c 	andeq	r0, r0, ip
 2c4:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 2c8:	00008ad8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
 2cc:	00000020 	andeq	r0, r0, r0, lsr #32
 2d0:	0000000c 	andeq	r0, r0, ip
 2d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2d8:	7c020001 	stcvc	0, cr0, [r2], {1}
 2dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2e0:	00000024 	andeq	r0, r0, r4, lsr #32
 2e4:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 2e8:	00008af8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
 2ec:	00000058 	andeq	r0, r0, r8, asr r0
 2f0:	80100e42 	andshi	r0, r0, r2, asr #28
 2f4:	82038104 	andhi	r8, r3, #4, 2
 2f8:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
 2fc:	07841c0e 	streq	r1, [r4, lr, lsl #24]
 300:	058e0685 	streq	r0, [lr, #1669]	; 0x685
 304:	00280e42 	eoreq	r0, r8, r2, asr #28
 308:	0000000c 	andeq	r0, r0, ip
 30c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 310:	7c020001 	stcvc	0, cr0, [r2], {1}
 314:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 318:	00000018 	andeq	r0, r0, r8, lsl r0
 31c:	00000308 	andeq	r0, r0, r8, lsl #6
 320:	00008b50 	andeq	r8, r0, r0, asr fp
 324:	00000034 	andeq	r0, r0, r4, lsr r0
 328:	83100e42 	tsthi	r0, #1056	; 0x420
 32c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 330:	00018e02 	andeq	r8, r1, r2, lsl #28
 334:	0000000c 	andeq	r0, r0, ip
 338:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 33c:	7c020001 	stcvc	0, cr0, [r2], {1}
 340:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 344:	0000000c 	andeq	r0, r0, ip
 348:	00000334 	andeq	r0, r0, r4, lsr r3
 34c:	00008b84 	andeq	r8, r0, r4, lsl #23
 350:	00000014 	andeq	r0, r0, r4, lsl r0
 354:	0000000c 	andeq	r0, r0, ip
 358:	00000334 	andeq	r0, r0, r4, lsr r3
 35c:	00008b98 	muleq	r0, r8, fp
 360:	0000002c 	andeq	r0, r0, ip, lsr #32
 364:	0000000c 	andeq	r0, r0, ip
 368:	00000334 	andeq	r0, r0, r4, lsr r3
 36c:	00008bc4 	andeq	r8, r0, r4, asr #23
 370:	00000040 	andeq	r0, r0, r0, asr #32
 374:	00000020 	andeq	r0, r0, r0, lsr #32
 378:	00000334 	andeq	r0, r0, r4, lsr r3
 37c:	00008c04 	andeq	r8, r0, r4, lsl #24
 380:	00000198 	muleq	r0, r8, r1
 384:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 388:	86058506 	strhi	r8, [r5], -r6, lsl #10
 38c:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 390:	42018e02 	andmi	r8, r1, #2, 28
 394:	0000580e 	andeq	r5, r0, lr, lsl #16
 398:	00000014 	andeq	r0, r0, r4, lsl r0
 39c:	00000334 	andeq	r0, r0, r4, lsr r3
 3a0:	00008d9c 	muleq	r0, ip, sp
 3a4:	00000050 	andeq	r0, r0, r0, asr r0
 3a8:	83080e42 	movwhi	r0, #36418	; 0x8e42
 3ac:	00018e02 	andeq	r8, r1, r2, lsl #28
 3b0:	00000028 	andeq	r0, r0, r8, lsr #32
 3b4:	00000334 	andeq	r0, r0, r4, lsr r3
 3b8:	00008dec 	andeq	r8, r0, ip, ror #27
 3bc:	00000288 	andeq	r0, r0, r8, lsl #5
 3c0:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
 3c4:	86088509 	strhi	r8, [r8], -r9, lsl #10
 3c8:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
 3cc:	8a048905 	bhi	1227e8 <__bss_end__+0x118650>
 3d0:	8e028b03 	vmlahi.f64	d8, d2, d3
 3d4:	b00e4201 	andlt	r4, lr, r1, lsl #4
 3d8:	00000001 	andeq	r0, r0, r1
 3dc:	0000000c 	andeq	r0, r0, ip
 3e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3e4:	7c020001 	stcvc	0, cr0, [r2], {1}
 3e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3ec:	00000014 	andeq	r0, r0, r4, lsl r0
 3f0:	000003dc 	ldrdeq	r0, [r0], -ip
 3f4:	00009074 	andeq	r9, r0, r4, ror r0
 3f8:	00000028 	andeq	r0, r0, r8, lsr #32
 3fc:	83080e42 	movwhi	r0, #36418	; 0x8e42
 400:	00018e02 	andeq	r8, r1, r2, lsl #28
 404:	0000000c 	andeq	r0, r0, ip
 408:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 40c:	7c020001 	stcvc	0, cr0, [r2], {1}
 410:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 414:	00000014 	andeq	r0, r0, r4, lsl r0
 418:	00000404 	andeq	r0, r0, r4, lsl #8
 41c:	0000909c 	muleq	r0, ip, r0
 420:	00000034 	andeq	r0, r0, r4, lsr r0
 424:	83080e42 	movwhi	r0, #36418	; 0x8e42
 428:	00018e02 	andeq	r8, r1, r2, lsl #28
 42c:	0000000c 	andeq	r0, r0, ip
 430:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 434:	7c020001 	stcvc	0, cr0, [r2], {1}
 438:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 43c:	0000000c 	andeq	r0, r0, ip
 440:	0000042c 	andeq	r0, r0, ip, lsr #8
 444:	000090d0 	ldrdeq	r9, [r0], -r0
 448:	00000018 	andeq	r0, r0, r8, lsl r0
 44c:	0000000c 	andeq	r0, r0, ip
 450:	0000042c 	andeq	r0, r0, ip, lsr #8
 454:	000090e8 	andeq	r9, r0, r8, ror #1
 458:	00000014 	andeq	r0, r0, r4, lsl r0
 45c:	00000014 	andeq	r0, r0, r4, lsl r0
 460:	0000042c 	andeq	r0, r0, ip, lsr #8
 464:	000090fc 	strdeq	r9, [r0], -ip
 468:	00000048 	andeq	r0, r0, r8, asr #32
 46c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 470:	00018e02 	andeq	r8, r1, r2, lsl #28
 474:	0000000c 	andeq	r0, r0, ip
 478:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 47c:	7c020001 	stcvc	0, cr0, [r2], {1}
 480:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 484:	0000000c 	andeq	r0, r0, ip
 488:	00000474 	andeq	r0, r0, r4, ror r4
 48c:	00009144 	andeq	r9, r0, r4, asr #2
 490:	0000001c 	andeq	r0, r0, ip, lsl r0
 494:	00000014 	andeq	r0, r0, r4, lsl r0
 498:	00000474 	andeq	r0, r0, r4, ror r4
 49c:	00009160 	andeq	r9, r0, r0, ror #2
 4a0:	00000014 	andeq	r0, r0, r4, lsl r0
 4a4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 4a8:	00018e02 	andeq	r8, r1, r2, lsl #28
 4ac:	00000018 	andeq	r0, r0, r8, lsl r0
 4b0:	00000474 	andeq	r0, r0, r4, ror r4
 4b4:	00009174 	andeq	r9, r0, r4, ror r1
 4b8:	00000024 	andeq	r0, r0, r4, lsr #32
 4bc:	83100e42 	tsthi	r0, #1056	; 0x420
 4c0:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 4c4:	00018e02 	andeq	r8, r1, r2, lsl #28
 4c8:	00000014 	andeq	r0, r0, r4, lsl r0
 4cc:	00000474 	andeq	r0, r0, r4, ror r4
 4d0:	00009198 	muleq	r0, r8, r1
 4d4:	00000014 	andeq	r0, r0, r4, lsl r0
 4d8:	83080e42 	movwhi	r0, #36418	; 0x8e42
 4dc:	00018e02 	andeq	r8, r1, r2, lsl #28
 4e0:	00000014 	andeq	r0, r0, r4, lsl r0
 4e4:	00000474 	andeq	r0, r0, r4, ror r4
 4e8:	000091ac 	andeq	r9, r0, ip, lsr #3
 4ec:	00000014 	andeq	r0, r0, r4, lsl r0
 4f0:	83080e42 	movwhi	r0, #36418	; 0x8e42
 4f4:	00018e02 	andeq	r8, r1, r2, lsl #28
 4f8:	0000000c 	andeq	r0, r0, ip
 4fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 500:	7c020001 	stcvc	0, cr0, [r2], {1}
 504:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 508:	00000014 	andeq	r0, r0, r4, lsl r0
 50c:	000004f8 	strdeq	r0, [r0], -r8
 510:	00009498 	muleq	r0, r8, r4
 514:	00000064 	andeq	r0, r0, r4, rrx
 518:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 51c:	00018e02 	andeq	r8, r1, r2, lsl #28
 520:	00000014 	andeq	r0, r0, r4, lsl r0
 524:	000004f8 	strdeq	r0, [r0], -r8
 528:	000094fc 	strdeq	r9, [r0], -ip
 52c:	00000094 	muleq	r0, r4, r0
 530:	83080e42 	movwhi	r0, #36418	; 0x8e42
 534:	00018e02 	andeq	r8, r1, r2, lsl #28
 538:	00000014 	andeq	r0, r0, r4, lsl r0
 53c:	000004f8 	strdeq	r0, [r0], -r8
 540:	00009590 	muleq	r0, r0, r5
 544:	00000058 	andeq	r0, r0, r8, asr r0
 548:	83080e42 	movwhi	r0, #36418	; 0x8e42
 54c:	00018e02 	andeq	r8, r1, r2, lsl #28
 550:	0000000c 	andeq	r0, r0, ip
 554:	000004f8 	strdeq	r0, [r0], -r8
 558:	000095e8 	andeq	r9, r0, r8, ror #11
 55c:	00000018 	andeq	r0, r0, r8, lsl r0
 560:	0000000c 	andeq	r0, r0, ip
 564:	000004f8 	strdeq	r0, [r0], -r8
 568:	00009600 	andeq	r9, r0, r0, lsl #12
 56c:	00000010 	andeq	r0, r0, r0, lsl r0
 570:	0000000c 	andeq	r0, r0, ip
 574:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 578:	7c020001 	stcvc	0, cr0, [r2], {1}
 57c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 580:	00000014 	andeq	r0, r0, r4, lsl r0
 584:	00000570 	andeq	r0, r0, r0, ror r5
 588:	00009610 	andeq	r9, r0, r0, lsl r6
 58c:	00000014 	andeq	r0, r0, r4, lsl r0
 590:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 594:	00018e02 	andeq	r8, r1, r2, lsl #28
