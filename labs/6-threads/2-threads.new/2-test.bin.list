
2-test.bin.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e3a0d302 	mov	sp, #134217728	; 0x8000000
    8004:	e3a0b000 	mov	fp, #0
    8008:	eb00043f 	bl	910c <_cstart>
    800c:	eb000456 	bl	916c <rpi_reboot>

00008010 <print_reg_save>:
void store_one_asm(unsigned *u, unsigned x);
void check_callee_save(uint32_t *save);
void cswitch(uint32_t *old, uint32_t *new);

// change so that it prints out which registers are sp and lr.
void print_reg_save(uint32_t *regs) {
    8010:	e92d4070 	push	{r4, r5, r6, lr}
    8014:	e24dd010 	sub	sp, sp, #16
    8018:	e1a05000 	mov	r5, r0
    demand(REG_SP_OFF != 0, you should fix this value!);
    demand(REG_LR_OFF != 0, you should fix this value!);

    unsigned off = 0;
    801c:	e3a03000 	mov	r3, #0
    8020:	e58d300c 	str	r3, [sp, #12]
    for(int r = 4; r <= 12; r++, off++)
    8024:	e3a04004 	mov	r4, #4
        printk("offset=%d, r%d = 0x%x [%d]\n",  off, r, regs[off],regs[off]);
    8028:	e59f6070 	ldr	r6, [pc, #112]	; 80a0 <print_reg_save+0x90>
void print_reg_save(uint32_t *regs) {
    demand(REG_SP_OFF != 0, you should fix this value!);
    demand(REG_LR_OFF != 0, you should fix this value!);

    unsigned off = 0;
    for(int r = 4; r <= 12; r++, off++)
    802c:	ea000009 	b	8058 <print_reg_save+0x48>
        printk("offset=%d, r%d = 0x%x [%d]\n",  off, r, regs[off],regs[off]);
    8030:	e59d100c 	ldr	r1, [sp, #12]
    8034:	e7953101 	ldr	r3, [r5, r1, lsl #2]
    8038:	e58d3000 	str	r3, [sp]
    803c:	e1a00006 	mov	r0, r6
    8040:	e1a02004 	mov	r2, r4
    8044:	eb0002c7 	bl	8b68 <printk>
void print_reg_save(uint32_t *regs) {
    demand(REG_SP_OFF != 0, you should fix this value!);
    demand(REG_LR_OFF != 0, you should fix this value!);

    unsigned off = 0;
    for(int r = 4; r <= 12; r++, off++)
    8048:	e2844001 	add	r4, r4, #1
    804c:	e59d300c 	ldr	r3, [sp, #12]
    8050:	e2833001 	add	r3, r3, #1
    8054:	e58d300c 	str	r3, [sp, #12]
    8058:	e354000c 	cmp	r4, #12
    805c:	dafffff3 	ble	8030 <print_reg_save+0x20>
        printk("offset=%d, r%d = 0x%x [%d]\n",  off, r, regs[off],regs[off]);
    printk("offset=%d, r13/sp = 0x%x [%d]\n", REG_SP_OFF, regs[REG_SP_OFF],regs[REG_SP_OFF]);
    8060:	e5953028 	ldr	r3, [r5, #40]	; 0x28
    8064:	e59f0038 	ldr	r0, [pc, #56]	; 80a4 <print_reg_save+0x94>
    8068:	e3a0100a 	mov	r1, #10
    806c:	e1a02003 	mov	r2, r3
    8070:	eb0002bc 	bl	8b68 <printk>
    printk("stack value should be around 0x%x, is 0x%x\n", &off, regs[REG_SP_OFF]);
    8074:	e59f002c 	ldr	r0, [pc, #44]	; 80a8 <print_reg_save+0x98>
    8078:	e28d100c 	add	r1, sp, #12
    807c:	e5952028 	ldr	r2, [r5, #40]	; 0x28
    8080:	eb0002b8 	bl	8b68 <printk>
    printk("offset=%d, r14/lr = 0x%x [%d]\n", REG_LR_OFF, regs[REG_LR_OFF],regs[REG_LR_OFF]);
    8084:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    8088:	e59f001c 	ldr	r0, [pc, #28]	; 80ac <print_reg_save+0x9c>
    808c:	e3a01009 	mov	r1, #9
    8090:	e1a02003 	mov	r2, r3
    8094:	eb0002b3 	bl	8b68 <printk>
}
    8098:	e28dd010 	add	sp, sp, #16
    809c:	e8bd8070 	pop	{r4, r5, r6, pc}
    80a0:	000096c0 	andeq	r9, r0, r0, asr #13
    80a4:	000096dc 	ldrdeq	r9, [r0], -ip
    80a8:	000096fc 	strdeq	r9, [r0], -ip
    80ac:	00009728 	andeq	r9, r0, r8, lsr #14

000080b0 <print_and_die>:

void print_and_die(uint32_t *save) {
    80b0:	e92d4008 	push	{r3, lr}
    80b4:	e1a04000 	mov	r4, r0
    printk("in print and die: about to dump registers from %x\n", save);
    80b8:	e59f0018 	ldr	r0, [pc, #24]	; 80d8 <print_and_die+0x28>
    80bc:	e1a01004 	mov	r1, r4
    80c0:	eb0002a8 	bl	8b68 <printk>
    printk("each register value except <sp> should hold its reg number (r4 holds 4, etc)\n");
    80c4:	e59f0010 	ldr	r0, [pc, #16]	; 80dc <print_and_die+0x2c>
    80c8:	eb0002a6 	bl	8b68 <printk>
    print_reg_save(save);
    80cc:	e1a00004 	mov	r0, r4
    80d0:	ebffffce 	bl	8010 <print_reg_save>
    clean_reboot();
    80d4:	eb000402 	bl	90e4 <clean_reboot>
    80d8:	00009748 	andeq	r9, r0, r8, asr #14
    80dc:	0000977c 	andeq	r9, r0, ip, ror r7

000080e0 <notmain>:
}

void notmain() {
    80e0:	e92d4010 	push	{r4, lr}
    80e4:	e24dd008 	sub	sp, sp, #8
    uart_init();
    80e8:	eb00046e 	bl	92a8 <uart_init>
    kmalloc_init();
    80ec:	eb000543 	bl	9600 <kmalloc_init>

    /*
     * part 0
     */
    printk("-----------------------------------------------------\n");
    80f0:	e59f00c0 	ldr	r0, [pc, #192]	; 81b8 <notmain+0xd8>
    80f4:	eb00029b 	bl	8b68 <printk>
    printk("part 0: write a value into a pointer in assembly\n");
    80f8:	e59f00bc 	ldr	r0, [pc, #188]	; 81bc <notmain+0xdc>
    80fc:	eb000299 	bl	8b68 <printk>
    unsigned u;
    store_one_asm(&u, 12);
    8100:	e28d0004 	add	r0, sp, #4
    8104:	e3a0100c 	mov	r1, #12
    8108:	eb000273 	bl	8adc <store_one_asm>
    printk("u=%d\n", u);
    810c:	e59f00ac 	ldr	r0, [pc, #172]	; 81c0 <notmain+0xe0>
    8110:	e59d1004 	ldr	r1, [sp, #4]
    8114:	eb000293 	bl	8b68 <printk>
    assert(u==12);
    8118:	e59d3004 	ldr	r3, [sp, #4]
    811c:	e353000c 	cmp	r3, #12
    8120:	0a000005 	beq	813c <notmain+0x5c>
    8124:	e59f0098 	ldr	r0, [pc, #152]	; 81c4 <notmain+0xe4>
    8128:	e59f1098 	ldr	r1, [pc, #152]	; 81c8 <notmain+0xe8>
    812c:	e59f2098 	ldr	r2, [pc, #152]	; 81cc <notmain+0xec>
    8130:	e3a03030 	mov	r3, #48	; 0x30
    8134:	eb00028b 	bl	8b68 <printk>
    8138:	eb00040b 	bl	916c <rpi_reboot>
    store_one_asm(&u, 0xfeedface);
    813c:	e59f408c 	ldr	r4, [pc, #140]	; 81d0 <notmain+0xf0>
    8140:	e28d0004 	add	r0, sp, #4
    8144:	e1a01004 	mov	r1, r4
    8148:	eb000263 	bl	8adc <store_one_asm>
    assert(u==0xfeedface);
    814c:	e59d3004 	ldr	r3, [sp, #4]
    8150:	e1530004 	cmp	r3, r4
    8154:	0a000005 	beq	8170 <notmain+0x90>
    8158:	e59f0074 	ldr	r0, [pc, #116]	; 81d4 <notmain+0xf4>
    815c:	e59f1064 	ldr	r1, [pc, #100]	; 81c8 <notmain+0xe8>
    8160:	e59f2064 	ldr	r2, [pc, #100]	; 81cc <notmain+0xec>
    8164:	e3a03032 	mov	r3, #50	; 0x32
    8168:	eb00027e 	bl	8b68 <printk>
    816c:	eb0003fe 	bl	916c <rpi_reboot>
    printk("part0: SUCCESS!\n");
    8170:	e59f0060 	ldr	r0, [pc, #96]	; 81d8 <notmain+0xf8>
    8174:	eb00027b 	bl	8b68 <printk>

    printk("-----------------------------------------------------\n");
    8178:	e59f0038 	ldr	r0, [pc, #56]	; 81b8 <notmain+0xd8>
    817c:	eb000279 	bl	8b68 <printk>
    // sizeof save area
    unsigned nbytes = sizeof ((rpi_thread_t*)0)->reg_save_area;
    uint32_t *save = kmalloc_aligned(nbytes, 8);
    8180:	e3a00040 	mov	r0, #64	; 0x40
    8184:	e3a01008 	mov	r1, #8
    8188:	eb0004f7 	bl	956c <kmalloc_aligned>
    818c:	e1a04000 	mov	r4, r0
     * part 1: check that you can save callee registers with known values.
     * prints and dies.
     *
     * comment this out to do the next one.
     */
    printk("part1: about to test register saving\n");
    8190:	e59f0044 	ldr	r0, [pc, #68]	; 81dc <notmain+0xfc>
    8194:	eb000273 	bl	8b68 <printk>
    check_callee_save(save);
    8198:	e1a00004 	mov	r0, r4
    819c:	eb000250 	bl	8ae4 <check_callee_save>
    panic("Should not return\n");
    81a0:	e59f0038 	ldr	r0, [pc, #56]	; 81e0 <notmain+0x100>
    81a4:	e59f101c 	ldr	r1, [pc, #28]	; 81c8 <notmain+0xe8>
    81a8:	e59f201c 	ldr	r2, [pc, #28]	; 81cc <notmain+0xec>
    81ac:	e3a03042 	mov	r3, #66	; 0x42
    81b0:	eb00026c 	bl	8b68 <printk>
    81b4:	eb0003ec 	bl	916c <rpi_reboot>
    81b8:	000097cc 	andeq	r9, r0, ip, asr #15
    81bc:	00009804 	andeq	r9, r0, r4, lsl #16
    81c0:	00009838 	andeq	r9, r0, r8, lsr r8
    81c4:	00009840 	andeq	r9, r0, r0, asr #16
    81c8:	00009858 	andeq	r9, r0, r8, asr r8
    81cc:	000096b8 			; <UNDEFINED> instruction: 0x000096b8
    81d0:	feedface 	cdp2	10, 14, cr15, cr13, cr14, {6}
    81d4:	00009864 	andeq	r9, r0, r4, ror #16
    81d8:	00009884 	andeq	r9, r0, r4, lsl #17
    81dc:	00009898 	muleq	r0, r8, r8
    81e0:	000098c0 	andeq	r9, r0, r0, asr #17

000081e4 <Q_nelem>:
} Q_t;

// used for iteration.
static E *Q_start(Q_t *q)   { return q->head; }
static E *Q_next(E *e)      { return e->next; }
static unsigned Q_nelem(Q_t *q) { return q->cnt; }
    81e4:	e5900008 	ldr	r0, [r0, #8]
    81e8:	e12fff1e 	bx	lr

000081ec <Q_append>:
    return e;
}

// insert at tail. (for FIFO)
static void Q_append(Q_t *q, E *e) {
    e->next = 0;
    81ec:	e3a03000 	mov	r3, #0
    81f0:	e5813040 	str	r3, [r1, #64]	; 0x40
    q->cnt++;
    81f4:	e5903008 	ldr	r3, [r0, #8]
    81f8:	e2833001 	add	r3, r3, #1
    81fc:	e5803008 	str	r3, [r0, #8]
    if(!q->tail) 
    8200:	e5903004 	ldr	r3, [r0, #4]
    8204:	e3530000 	cmp	r3, #0
    8208:	1a000002 	bne	8218 <Q_append+0x2c>
        q->head = q->tail = e;
    820c:	e5801004 	str	r1, [r0, #4]
    8210:	e5801000 	str	r1, [r0]
    8214:	e12fff1e 	bx	lr
    else {
        q->tail->next = e;
    8218:	e5831040 	str	r1, [r3, #64]	; 0x40
        q->tail = e;
    821c:	e5801004 	str	r1, [r0, #4]
    8220:	e12fff1e 	bx	lr

00008224 <Q_push>:
    }
}

// insert at head (for LIFO)
static void Q_push(Q_t *q, E *e) {
    q->cnt++;
    8224:	e5903008 	ldr	r3, [r0, #8]
    8228:	e2833001 	add	r3, r3, #1
    822c:	e5803008 	str	r3, [r0, #8]
    e->next = q->head;
    8230:	e5903000 	ldr	r3, [r0]
    8234:	e5813040 	str	r3, [r1, #64]	; 0x40
    q->head = e;
    8238:	e5801000 	str	r1, [r0]
    if(!q->tail)
    823c:	e5903004 	ldr	r3, [r0, #4]
    8240:	e3530000 	cmp	r3, #0
        q->tail = e;
    8244:	05801004 	streq	r1, [r0, #4]
    8248:	e12fff1e 	bx	lr

0000824c <th_free>:
    demand(is_aligned(&t->stack[0],8), stack must be 8-byte aligned!);
    t->tid = tid++;
    return t;
}

static void th_free(rpi_thread_t *th) {
    824c:	e92d4008 	push	{r3, lr}
    8250:	e1a01000 	mov	r1, r0
    // push on the front in case helps with caching.
    Q_push(&freeq, th);
    8254:	e59f0004 	ldr	r0, [pc, #4]	; 8260 <th_free+0x14>
    8258:	ebfffff1 	bl	8224 <Q_push>
    825c:	e8bd8008 	pop	{r3, pc}
    8260:	00009edc 	ldrdeq	r9, [r0], -ip

00008264 <Q_empty>:
// used for iteration.
static E *Q_start(Q_t *q)   { return q->head; }
static E *Q_next(E *e)      { return e->next; }
static unsigned Q_nelem(Q_t *q) { return q->cnt; }

static int Q_empty(Q_t *q)  { 
    8264:	e92d4010 	push	{r4, lr}
    8268:	e1a04000 	mov	r4, r0
    if(q->head)
    826c:	e5903000 	ldr	r3, [r0]
    8270:	e3530000 	cmp	r3, #0
    8274:	1a000011 	bne	82c0 <Q_empty+0x5c>
        return 0;
    assert(Q_nelem(q) == 0);
    8278:	ebffffd9 	bl	81e4 <Q_nelem>
    827c:	e3500000 	cmp	r0, #0
    8280:	0a000005 	beq	829c <Q_empty+0x38>
    8284:	e59f0044 	ldr	r0, [pc, #68]	; 82d0 <Q_empty+0x6c>
    8288:	e59f1044 	ldr	r1, [pc, #68]	; 82d4 <Q_empty+0x70>
    828c:	e59f2044 	ldr	r2, [pc, #68]	; 82d8 <Q_empty+0x74>
    8290:	e3a03015 	mov	r3, #21
    8294:	eb000233 	bl	8b68 <printk>
    8298:	eb0003b3 	bl	916c <rpi_reboot>
    demand(!q->tail, invalid Q);
    829c:	e5943004 	ldr	r3, [r4, #4]
    82a0:	e3530000 	cmp	r3, #0
    82a4:	0a000007 	beq	82c8 <Q_empty+0x64>
    82a8:	e59f002c 	ldr	r0, [pc, #44]	; 82dc <Q_empty+0x78>
    82ac:	e59f1020 	ldr	r1, [pc, #32]	; 82d4 <Q_empty+0x70>
    82b0:	e59f2020 	ldr	r2, [pc, #32]	; 82d8 <Q_empty+0x74>
    82b4:	e3a03016 	mov	r3, #22
    82b8:	eb00022a 	bl	8b68 <printk>
    82bc:	eb0003aa 	bl	916c <rpi_reboot>
static E *Q_next(E *e)      { return e->next; }
static unsigned Q_nelem(Q_t *q) { return q->cnt; }

static int Q_empty(Q_t *q)  { 
    if(q->head)
        return 0;
    82c0:	e3a00000 	mov	r0, #0
    82c4:	e8bd8010 	pop	{r4, pc}
    assert(Q_nelem(q) == 0);
    demand(!q->tail, invalid Q);
    return 1;
    82c8:	e3a00001 	mov	r0, #1
}
    82cc:	e8bd8010 	pop	{r4, pc}
    82d0:	00009940 	andeq	r9, r0, r0, asr #18
    82d4:	00009960 	andeq	r9, r0, r0, ror #18
    82d8:	000098e4 	andeq	r9, r0, r4, ror #17
    82dc:	00009964 	andeq	r9, r0, r4, ror #18

000082e0 <Q_pop>:

// remove from front of list.
static E *Q_pop(Q_t *q) {
    82e0:	e92d4008 	push	{r3, lr}
    demand(q, bad input);
    82e4:	e3500000 	cmp	r0, #0
    82e8:	1a000005 	bne	8304 <Q_pop+0x24>
    82ec:	e59f006c 	ldr	r0, [pc, #108]	; 8360 <Q_pop+0x80>
    82f0:	e59f106c 	ldr	r1, [pc, #108]	; 8364 <Q_pop+0x84>
    82f4:	e59f206c 	ldr	r2, [pc, #108]	; 8368 <Q_pop+0x88>
    82f8:	e3a0301c 	mov	r3, #28
    82fc:	eb000219 	bl	8b68 <printk>
    8300:	eb000399 	bl	916c <rpi_reboot>

    E *e = q->head;
    8304:	e5903000 	ldr	r3, [r0]
    if(!e) {
    8308:	e3530000 	cmp	r3, #0
    830c:	1a000008 	bne	8334 <Q_pop+0x54>
        assert(Q_empty(q));
    8310:	ebffffd3 	bl	8264 <Q_empty>
    8314:	e3500000 	cmp	r0, #0
    8318:	1a00000e 	bne	8358 <Q_pop+0x78>
    831c:	e59f0048 	ldr	r0, [pc, #72]	; 836c <Q_pop+0x8c>
    8320:	e59f103c 	ldr	r1, [pc, #60]	; 8364 <Q_pop+0x84>
    8324:	e59f203c 	ldr	r2, [pc, #60]	; 8368 <Q_pop+0x88>
    8328:	e3a03020 	mov	r3, #32
    832c:	eb00020d 	bl	8b68 <printk>
    8330:	eb00038d 	bl	916c <rpi_reboot>
        return 0;
    }
    q->cnt--;
    8334:	e5902008 	ldr	r2, [r0, #8]
    8338:	e2422001 	sub	r2, r2, #1
    833c:	e5802008 	str	r2, [r0, #8]
    q->head = e->next;
    8340:	e5932040 	ldr	r2, [r3, #64]	; 0x40
    8344:	e5802000 	str	r2, [r0]
    if(!q->head)
    8348:	e3520000 	cmp	r2, #0
        q->tail = 0;
    834c:	05802004 	streq	r2, [r0, #4]
    return e;
    8350:	e1a00003 	mov	r0, r3
    8354:	e8bd8008 	pop	{r3, pc}
    demand(q, bad input);

    E *e = q->head;
    if(!e) {
        assert(Q_empty(q));
        return 0;
    8358:	e3a00000 	mov	r0, #0
    q->cnt--;
    q->head = e->next;
    if(!q->head)
        q->tail = 0;
    return e;
}
    835c:	e8bd8008 	pop	{r3, pc}
    8360:	00009994 	muleq	r0, r4, r9
    8364:	00009960 	andeq	r9, r0, r0, ror #18
    8368:	000098ec 	andeq	r9, r0, ip, ror #17
    836c:	000099bc 			; <UNDEFINED> instruction: 0x000099bc

00008370 <th_alloc>:
}

#define is_aligned(_p,_n) (((unsigned)(_p))%(_n) == 0)

// keep a cache of freed thread blocks.  call kmalloc if run out.
static rpi_thread_t *th_alloc(void) {
    8370:	e92d4008 	push	{r3, lr}
    rpi_thread_t *t = Q_pop(&freeq);
    8374:	e59f005c 	ldr	r0, [pc, #92]	; 83d8 <th_alloc+0x68>
    8378:	ebffffd8 	bl	82e0 <Q_pop>

    // stack has to be 8-byte aligned.
    if(!t) {
    837c:	e3500000 	cmp	r0, #0
    8380:	1a000006 	bne	83a0 <th_alloc+0x30>
        t = kmalloc_aligned(sizeof *t, 8);
    8384:	e59f0050 	ldr	r0, [pc, #80]	; 83dc <th_alloc+0x6c>
    8388:	e3a01008 	mov	r1, #8
    838c:	eb000476 	bl	956c <kmalloc_aligned>
        nalloced++;
    8390:	e59f3040 	ldr	r3, [pc, #64]	; 83d8 <th_alloc+0x68>
    8394:	e593200c 	ldr	r2, [r3, #12]
    8398:	e2822001 	add	r2, r2, #1
    839c:	e583200c 	str	r2, [r3, #12]
    }
    demand(is_aligned(&t->stack[0],8), stack must be 8-byte aligned!);
    83a0:	e3100007 	tst	r0, #7
    83a4:	0a000005 	beq	83c0 <th_alloc+0x50>
    83a8:	e59f0030 	ldr	r0, [pc, #48]	; 83e0 <th_alloc+0x70>
    83ac:	e59f1030 	ldr	r1, [pc, #48]	; 83e4 <th_alloc+0x74>
    83b0:	e59f2030 	ldr	r2, [pc, #48]	; 83e8 <th_alloc+0x78>
    83b4:	e3a03024 	mov	r3, #36	; 0x24
    83b8:	eb0001ea 	bl	8b68 <printk>
    83bc:	eb00036a 	bl	916c <rpi_reboot>
    t->tid = tid++;
    83c0:	e59f2024 	ldr	r2, [pc, #36]	; 83ec <th_alloc+0x7c>
    83c4:	e5923000 	ldr	r3, [r2]
    83c8:	e2831001 	add	r1, r3, #1
    83cc:	e5821000 	str	r1, [r2]
    83d0:	e5803044 	str	r3, [r0, #68]	; 0x44
    return t;
}
    83d4:	e8bd8008 	pop	{r3, pc}
    83d8:	00009edc 	ldrdeq	r9, [r0], -ip
    83dc:	00002050 	andeq	r2, r0, r0, asr r0
    83e0:	000099d8 	ldrdeq	r9, [r0], -r8
    83e4:	00009a38 	andeq	r9, r0, r8, lsr sl
    83e8:	000098f4 	strdeq	r9, [r0], -r4
    83ec:	000096ac 	andeq	r9, r0, ip, lsr #13

000083f0 <rpi_cur_thread>:
static unsigned nalloced = 0;

// return pointer to the current thread.  
rpi_thread_t *rpi_cur_thread(void) {
    return cur_thread;
}
    83f0:	e59f3004 	ldr	r3, [pc, #4]	; 83fc <rpi_cur_thread+0xc>
    83f4:	e5930010 	ldr	r0, [r3, #16]
    83f8:	e12fff1e 	bx	lr
    83fc:	00009edc 	ldrdeq	r9, [r0], -ip

00008400 <rpi_fork>:
/***********************************************************************
 * implement the code below.
 */

// create a new thread.
rpi_thread_t *rpi_fork(void (*code)(void *arg), void *arg) {
    8400:	e92d4070 	push	{r4, r5, r6, lr}
    8404:	e1a06000 	mov	r6, r0
    8408:	e1a05001 	mov	r5, r1
    rpi_thread_t *t = th_alloc();
    840c:	ebffffd7 	bl	8370 <th_alloc>
    8410:	e1a04000 	mov	r4, r0
     *  - set LR, SP, and store <code> and <arg> where trampoline can get it.
     */
    void rpi_init_trampoline(void);

    //unimplemented();
	t->fn = code;
    8414:	e5806048 	str	r6, [r0, #72]	; 0x48
	t->arg = arg;
    8418:	e580504c 	str	r5, [r0, #76]	; 0x4c
    Q_append(&runq, t);
    841c:	e59f000c 	ldr	r0, [pc, #12]	; 8430 <rpi_fork+0x30>
    8420:	e1a01004 	mov	r1, r4
    8424:	ebffff70 	bl	81ec <Q_append>
    return t;
}
    8428:	e1a00004 	mov	r0, r4
    842c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8430:	00009ef0 	strdeq	r9, [r0], -r0

00008434 <rpi_exit>:

// exit current thread.
void rpi_exit(int exitcode) {
    8434:	e12fff1e 	bx	lr

00008438 <rpi_yield>:
	 */
	return;
}

// yield the current thread.
void rpi_yield(void) {
    8438:	e12fff1e 	bx	lr

0000843c <rpi_internal_check>:
    printk("rpithreads: done with all threads! returning\n");
}


// internal consistency checks.
void rpi_internal_check(void) {
    843c:	e92d4030 	push	{r4, r5, lr}
    8440:	e24dd014 	sub	sp, sp, #20
    // the blocks on the runq + freeq must equal the total ever allocated
    // or we have leaked storage.
    unsigned n_free = Q_nelem(&freeq),
    8444:	e59f4068 	ldr	r4, [pc, #104]	; 84b4 <rpi_internal_check+0x78>
    8448:	e1a00004 	mov	r0, r4
    844c:	ebffff64 	bl	81e4 <Q_nelem>
    8450:	e1a05000 	mov	r5, r0
             n_run = Q_nelem(&runq),
    8454:	e2840014 	add	r0, r4, #20
    8458:	ebffff61 	bl	81e4 <Q_nelem>
             n = n_free + n_run;
    845c:	e0853000 	add	r3, r5, r0

    if(nalloced != n)
    8460:	e594200c 	ldr	r2, [r4, #12]
    8464:	e1520003 	cmp	r2, r3
    8468:	0a000009 	beq	8494 <rpi_internal_check+0x58>
        panic("storage leak: should have %d free blocks, have %d (runq=%d, freeq=%d)\n", 
    846c:	e58d2000 	str	r2, [sp]
    8470:	e58d3004 	str	r3, [sp, #4]
    8474:	e58d5008 	str	r5, [sp, #8]
    8478:	e58d000c 	str	r0, [sp, #12]
    847c:	e59f0034 	ldr	r0, [pc, #52]	; 84b8 <rpi_internal_check+0x7c>
    8480:	e59f1034 	ldr	r1, [pc, #52]	; 84bc <rpi_internal_check+0x80>
    8484:	e59f2034 	ldr	r2, [pc, #52]	; 84c0 <rpi_internal_check+0x84>
    8488:	e3a03087 	mov	r3, #135	; 0x87
    848c:	eb0001b5 	bl	8b68 <printk>
    8490:	eb000335 	bl	916c <rpi_reboot>
            nalloced, n, n_free,n_run);

    // active thread system: 
    //      walk through the run queue making sure the stack pointer
    //     and ra pointer makes sense.
    if(!Q_empty(&runq)) {
    8494:	e59f0028 	ldr	r0, [pc, #40]	; 84c4 <rpi_internal_check+0x88>
    8498:	ebffff71 	bl	8264 <Q_empty>
    849c:	e3500000 	cmp	r0, #0
    84a0:	0a000001 	beq	84ac <rpi_internal_check+0x70>
        //unimplemented();
        return;
    }
    printk("thread: internal check passed\n");
    84a4:	e59f001c 	ldr	r0, [pc, #28]	; 84c8 <rpi_internal_check+0x8c>
    84a8:	eb0001ae 	bl	8b68 <printk>
}
    84ac:	e28dd014 	add	sp, sp, #20
    84b0:	e8bd8030 	pop	{r4, r5, pc}
    84b4:	00009edc 	ldrdeq	r9, [r0], -ip
    84b8:	00009a48 	andeq	r9, r0, r8, asr #20
    84bc:	00009a38 	andeq	r9, r0, r8, lsr sl
    84c0:	00009900 	andeq	r9, r0, r0, lsl #18
    84c4:	00009ef0 	strdeq	r9, [r0], -r0
    84c8:	00009aa0 	andeq	r9, r0, r0, lsr #21

000084cc <rpi_thread_start>:
/*
 * starts the thread system.  
 * note: our caller is not a thread!  so you have to figure
 * out how to handle this.
 */
void rpi_thread_start(void) {
    84cc:	e92d4038 	push	{r3, r4, r5, lr}
    AssertNow(offsetof(rpi_thread_t, stack) % 8 == 0);
    // statically check that the register save area is at offset 0.
    AssertNow(offsetof(rpi_thread_t, reg_save_area) == 0);

    // no other runnable thread: return.
    if(Q_empty(&runq))
    84d0:	e59f0058 	ldr	r0, [pc, #88]	; 8530 <rpi_thread_start+0x64>
    84d4:	ebffff62 	bl	8264 <Q_empty>
    84d8:	e3500000 	cmp	r0, #0
    84dc:	18bd8038 	popne	{r3, r4, r5, pc}
        return;
    rpi_internal_check();
    84e0:	ebffffd5 	bl	843c <rpi_internal_check>

    //  1. create a new fake thread 
    //  2. dequeue a thread from the runq
    //  3. context switch to it, saving current state in
    //	    <scheduler_thread>
    scheduler_thread = th_alloc();
    84e4:	ebffffa1 	bl	8370 <th_alloc>
    84e8:	e59f3044 	ldr	r3, [pc, #68]	; 8534 <rpi_thread_start+0x68>
    84ec:	e5830020 	str	r0, [r3, #32]
	while(cur_thread = Q_pop(&runq)) {
    84f0:	e1a04003 	mov	r4, r3
    84f4:	e2835014 	add	r5, r3, #20
    84f8:	ea000004 	b	8510 <rpi_thread_start+0x44>
		(*cur_thread->fn)(cur_thread->arg);
    84fc:	e5903048 	ldr	r3, [r0, #72]	; 0x48
    8500:	e590004c 	ldr	r0, [r0, #76]	; 0x4c
    8504:	e12fff33 	blx	r3
		th_free(cur_thread);
    8508:	e5940010 	ldr	r0, [r4, #16]
    850c:	ebffff4e 	bl	824c <th_free>
    //  1. create a new fake thread 
    //  2. dequeue a thread from the runq
    //  3. context switch to it, saving current state in
    //	    <scheduler_thread>
    scheduler_thread = th_alloc();
	while(cur_thread = Q_pop(&runq)) {
    8510:	e1a00005 	mov	r0, r5
    8514:	ebffff71 	bl	82e0 <Q_pop>
    8518:	e5840010 	str	r0, [r4, #16]
    851c:	e3500000 	cmp	r0, #0
    8520:	1afffff5 	bne	84fc <rpi_thread_start+0x30>
		(*cur_thread->fn)(cur_thread->arg);
		th_free(cur_thread);
	}
	//unimplemented();
    printk("rpithreads: done with all threads! returning\n");
    8524:	e59f000c 	ldr	r0, [pc, #12]	; 8538 <rpi_thread_start+0x6c>
    8528:	eb00018e 	bl	8b68 <printk>
    852c:	e8bd8038 	pop	{r3, r4, r5, pc}
    8530:	00009ef0 	strdeq	r9, [r0], -r0
    8534:	00009edc 	ldrdeq	r9, [r0], -ip
    8538:	00009ac0 	andeq	r9, r0, r0, asr #21

0000853c <rpi_stack_check>:
    }
    printk("thread: internal check passed\n");
}

// check the current thread stack.
void rpi_stack_check(void) {
    853c:	e92d4008 	push	{r3, lr}
    unimplemented();
    8540:	e59f0010 	ldr	r0, [pc, #16]	; 8558 <rpi_stack_check+0x1c>
    8544:	e59f1010 	ldr	r1, [pc, #16]	; 855c <rpi_stack_check+0x20>
    8548:	e59f2010 	ldr	r2, [pc, #16]	; 8560 <rpi_stack_check+0x24>
    854c:	e3a03095 	mov	r3, #149	; 0x95
    8550:	eb000184 	bl	8b68 <printk>
    8554:	eb000304 	bl	916c <rpi_reboot>
    8558:	00009af0 	strdeq	r9, [r0], -r0
    855c:	00009a38 	andeq	r9, r0, r8, lsr sl
    8560:	00009914 	andeq	r9, r0, r4, lsl r9

00008564 <rpi_join>:
/********************************************************************
 * save for homework.
 */

// block caller until thread <th> completes.
void rpi_join(rpi_thread_t *th) {
    8564:	e92d4008 	push	{r3, lr}
    unimplemented();
    8568:	e59f0010 	ldr	r0, [pc, #16]	; 8580 <rpi_join+0x1c>
    856c:	e59f1010 	ldr	r1, [pc, #16]	; 8584 <rpi_join+0x20>
    8570:	e59f2010 	ldr	r2, [pc, #16]	; 8588 <rpi_join+0x24>
    8574:	e3a0309e 	mov	r3, #158	; 0x9e
    8578:	eb00017a 	bl	8b68 <printk>
    857c:	eb0002fa 	bl	916c <rpi_reboot>
    8580:	00009af0 	strdeq	r9, [r0], -r0
    8584:	00009a38 	andeq	r9, r0, r8, lsr sl
    8588:	00009924 	andeq	r9, r0, r4, lsr #18

0000858c <rpi_exact_sleep>:
}

// put the current thread on a blocked queue: resume in 
// exactly // <usec> micro-seconds.  not before, not after.
// should give low-error resumption times.
void rpi_exact_sleep(uint32_t usec) {
    858c:	e92d4008 	push	{r3, lr}
    unimplemented();
    8590:	e59f0010 	ldr	r0, [pc, #16]	; 85a8 <rpi_exact_sleep+0x1c>
    8594:	e59f1010 	ldr	r1, [pc, #16]	; 85ac <rpi_exact_sleep+0x20>
    8598:	e59f2010 	ldr	r2, [pc, #16]	; 85b0 <rpi_exact_sleep+0x24>
    859c:	e3a030a5 	mov	r3, #165	; 0xa5
    85a0:	eb000170 	bl	8b68 <printk>
    85a4:	eb0002f0 	bl	916c <rpi_reboot>
    85a8:	00009af0 	strdeq	r9, [r0], -r0
    85ac:	00009a38 	andeq	r9, r0, r8, lsr sl
    85b0:	00009930 	andeq	r9, r0, r0, lsr r9

000085b4 <rpi_get_sp>:
    85b4:	e12fff1e 	bx	lr

000085b8 <rpi_cswitch>:
    85b8:	e12fff1e 	bx	lr

000085bc <rpi_init_trampoline>:
    85bc:	e12fff1e 	bx	lr

000085c0 <cq_print>:
#ifdef LINUX
#   include <string.h>
#endif
#include "circular.h"

void cq_print(cq_t *c) {
    85c0:	e92d4010 	push	{r4, lr}
    85c4:	e24dd010 	sub	sp, sp, #16
    debug("cq print: head=%d, tail=%d, nelem=%d, empty=%d\n", 
    85c8:	e59f205c 	ldr	r2, [pc, #92]	; 862c <cq_print+0x6c>
    85cc:	e790e002 	ldr	lr, [r0, r2]
    85d0:	e59f3058 	ldr	r3, [pc, #88]	; 8630 <cq_print+0x70>
    85d4:	e790c003 	ldr	ip, [r0, r3]
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }

// if adding 1 to head = tail, then we have no space.
static inline int cq_full(cq_t *q) { return (q->head+1) % CQ_N == q->tail; }

static inline unsigned cq_nelem(cq_t *q) { return (q->head - q->tail) % CQ_N; }
    85d8:	e7904002 	ldr	r4, [r0, r2]
    85dc:	e7901003 	ldr	r1, [r0, r3]
    85e0:	e0611004 	rsb	r1, r1, r4
    85e4:	e1a01981 	lsl	r1, r1, #19
    85e8:	e1a019a1 	lsr	r1, r1, #19
void cq_print(cq_t *c);

/*************************************************************************************
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }
    85ec:	e7902002 	ldr	r2, [r0, r2]
    85f0:	e7903003 	ldr	r3, [r0, r3]
    85f4:	e1520003 	cmp	r2, r3
    85f8:	13a03000 	movne	r3, #0
    85fc:	03a03001 	moveq	r3, #1
    8600:	e58de000 	str	lr, [sp]
    8604:	e58dc004 	str	ip, [sp, #4]
    8608:	e58d1008 	str	r1, [sp, #8]
    860c:	e58d300c 	str	r3, [sp, #12]
    8610:	e59f001c 	ldr	r0, [pc, #28]	; 8634 <cq_print+0x74>
    8614:	e59f101c 	ldr	r1, [pc, #28]	; 8638 <cq_print+0x78>
    8618:	e59f201c 	ldr	r2, [pc, #28]	; 863c <cq_print+0x7c>
    861c:	e3a0300a 	mov	r3, #10
    8620:	eb000150 	bl	8b68 <printk>
                c->head, c->tail, cq_nelem(c), cq_empty(c));
}
    8624:	e28dd010 	add	sp, sp, #16
    8628:	e8bd8010 	pop	{r4, pc}
    862c:	00002004 	andeq	r2, r0, r4
    8630:	00002008 	andeq	r2, r0, r8
    8634:	00009b50 	andeq	r9, r0, r0, asr fp
    8638:	00009b8c 	andeq	r9, r0, ip, lsl #23
    863c:	00009b1c 	andeq	r9, r0, ip, lsl fp

00008640 <cq_ok>:

void cq_ok(cq_t *c) {
    8640:	e92d4008 	push	{r3, lr}
    if(c->fence != 0x12345678)
    8644:	e3a03a02 	mov	r3, #8192	; 0x2000
    8648:	e7902003 	ldr	r2, [r0, r3]
    864c:	e59f301c 	ldr	r3, [pc, #28]	; 8670 <cq_ok+0x30>
    8650:	e1520003 	cmp	r2, r3
    8654:	08bd8008 	popeq	{r3, pc}
        panic("fence is corrupted\n");
    8658:	e59f0014 	ldr	r0, [pc, #20]	; 8674 <cq_ok+0x34>
    865c:	e59f1014 	ldr	r1, [pc, #20]	; 8678 <cq_ok+0x38>
    8660:	e59f2014 	ldr	r2, [pc, #20]	; 867c <cq_ok+0x3c>
    8664:	e3a0300f 	mov	r3, #15
    8668:	eb00013e 	bl	8b68 <printk>
    866c:	eb0002be 	bl	916c <rpi_reboot>
    8670:	12345678 	eorsne	r5, r4, #120, 12	; 0x7800000
    8674:	00009b98 	muleq	r0, r8, fp
    8678:	00009b8c 	andeq	r9, r0, ip, lsl #23
    867c:	00009b28 	andeq	r9, r0, r8, lsr #22

00008680 <cq_init>:
}

void cq_init(cq_t *c, unsigned errors_fatal_p) {
    8680:	e92d4038 	push	{r3, r4, r5, lr}
    8684:	e1a04000 	mov	r4, r0
    8688:	e1a05001 	mov	r5, r1
    memset(c, 0, sizeof *c);
    868c:	e3a01000 	mov	r1, #0
    8690:	e59f215c 	ldr	r2, [pc, #348]	; 87f4 <cq_init+0x174>
    8694:	eb00012b 	bl	8b48 <memset>
    c->fence = 0x12345678;
    8698:	e59f2158 	ldr	r2, [pc, #344]	; 87f8 <cq_init+0x178>
    869c:	e3a03a02 	mov	r3, #8192	; 0x2000
    86a0:	e7842003 	str	r2, [r4, r3]
    c->head = c->tail = 0;
    86a4:	e59f2150 	ldr	r2, [pc, #336]	; 87fc <cq_init+0x17c>
    86a8:	e3a03000 	mov	r3, #0
    86ac:	e7843002 	str	r3, [r4, r2]
    86b0:	e59f0148 	ldr	r0, [pc, #328]	; 8800 <cq_init+0x180>
    86b4:	e7843000 	str	r3, [r4, r0]
    c->overflow = 0;
    86b8:	e59f1144 	ldr	r1, [pc, #324]	; 8804 <cq_init+0x184>
    86bc:	e7843001 	str	r3, [r4, r1]
    c->errors_fatal_p = errors_fatal_p;
    86c0:	e59f3140 	ldr	r3, [pc, #320]	; 8808 <cq_init+0x188>
    86c4:	e7d41003 	ldrb	r1, [r4, r3]
    86c8:	e2055001 	and	r5, r5, #1
    86cc:	e3c11001 	bic	r1, r1, #1
    86d0:	e1855001 	orr	r5, r5, r1
    86d4:	e7c45003 	strb	r5, [r4, r3]
    86d8:	e7941000 	ldr	r1, [r4, r0]
    86dc:	e7943002 	ldr	r3, [r4, r2]
    assert(cq_empty(c));
    86e0:	e1510003 	cmp	r1, r3
    86e4:	0a000005 	beq	8700 <cq_init+0x80>
    86e8:	e59f011c 	ldr	r0, [pc, #284]	; 880c <cq_init+0x18c>
    86ec:	e59f111c 	ldr	r1, [pc, #284]	; 8810 <cq_init+0x190>
    86f0:	e59f211c 	ldr	r2, [pc, #284]	; 8814 <cq_init+0x194>
    86f4:	e3a03018 	mov	r3, #24
    86f8:	eb00011a 	bl	8b68 <printk>
    86fc:	eb00029a 	bl	916c <rpi_reboot>

// if adding 1 to head = tail, then we have no space.
static inline int cq_full(cq_t *q) { return (q->head+1) % CQ_N == q->tail; }
    8700:	e59f30f8 	ldr	r3, [pc, #248]	; 8800 <cq_init+0x180>
    8704:	e7942003 	ldr	r2, [r4, r3]
    8708:	e2822001 	add	r2, r2, #1
    870c:	e1a02982 	lsl	r2, r2, #19
    8710:	e2833004 	add	r3, r3, #4
    8714:	e7943003 	ldr	r3, [r4, r3]
    assert(!cq_full(c));
    8718:	e15309a2 	cmp	r3, r2, lsr #19
    871c:	1a000005 	bne	8738 <cq_init+0xb8>
    8720:	e59f00f0 	ldr	r0, [pc, #240]	; 8818 <cq_init+0x198>
    8724:	e59f10e4 	ldr	r1, [pc, #228]	; 8810 <cq_init+0x190>
    8728:	e59f20e4 	ldr	r2, [pc, #228]	; 8814 <cq_init+0x194>
    872c:	e3a03019 	mov	r3, #25
    8730:	eb00010c 	bl	8b68 <printk>
    8734:	eb00028c 	bl	916c <rpi_reboot>

static inline unsigned cq_nelem(cq_t *q) { return (q->head - q->tail) % CQ_N; }
    8738:	e59f30c0 	ldr	r3, [pc, #192]	; 8800 <cq_init+0x180>
    873c:	e7942003 	ldr	r2, [r4, r3]
    8740:	e2833004 	add	r3, r3, #4
    8744:	e7943003 	ldr	r3, [r4, r3]
    8748:	e0633002 	rsb	r3, r3, r2
    assert(cq_nelem(c) == 0);
    874c:	e1b03983 	lsls	r3, r3, #19
    8750:	0a000005 	beq	876c <cq_init+0xec>
    8754:	e59f00c0 	ldr	r0, [pc, #192]	; 881c <cq_init+0x19c>
    8758:	e59f10b0 	ldr	r1, [pc, #176]	; 8810 <cq_init+0x190>
    875c:	e59f20b0 	ldr	r2, [pc, #176]	; 8814 <cq_init+0x194>
    8760:	e3a0301a 	mov	r3, #26
    8764:	eb0000ff 	bl	8b68 <printk>
    8768:	eb00027f 	bl	916c <rpi_reboot>
void cq_print(cq_t *c);

/*************************************************************************************
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }
    876c:	e59f308c 	ldr	r3, [pc, #140]	; 8800 <cq_init+0x180>
    8770:	e7942003 	ldr	r2, [r4, r3]
    8774:	e2833004 	add	r3, r3, #4
    8778:	e7943003 	ldr	r3, [r4, r3]
static inline unsigned cq_nelem(cq_t *q) { return (q->head - q->tail) % CQ_N; }
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }

// not blocking: wait: this never calls getc?
static inline int cq_pop_nonblock(cq_t *c, cqe_t *e) {
    if(cq_empty(c))
    877c:	e1520003 	cmp	r2, r3
    8780:	0a000009 	beq	87ac <cq_init+0x12c>
        return 0;
    unsigned tail = c->tail;
    8784:	e59f3070 	ldr	r3, [pc, #112]	; 87fc <cq_init+0x17c>
    8788:	e7942003 	ldr	r2, [r4, r3]
    *e = c->c_buf[tail];
    878c:	e7d41002 	ldrb	r1, [r4, r2]
    8790:	e6ef1071 	uxtb	r1, r1
    c->tail = (tail+1)%CQ_N;
    8794:	e2822001 	add	r2, r2, #1
    8798:	e1a02982 	lsl	r2, r2, #19
    879c:	e1a029a2 	lsr	r2, r2, #19
    87a0:	e7842003 	str	r2, [r4, r3]
    return 1;
    87a4:	e3a03001 	mov	r3, #1
    87a8:	ea000001 	b	87b4 <cq_init+0x134>
    cqe_t e = 0x12;
    87ac:	e3a01012 	mov	r1, #18
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }

// not blocking: wait: this never calls getc?
static inline int cq_pop_nonblock(cq_t *c, cqe_t *e) {
    if(cq_empty(c))
        return 0;
    87b0:	e3a03000 	mov	r3, #0
    assert(cq_pop_nonblock(c,&e) == 0 && e == 0x12);
    87b4:	e3530000 	cmp	r3, #0
    87b8:	1a000002 	bne	87c8 <cq_init+0x148>
    87bc:	e3510012 	cmp	r1, #18
    87c0:	0a000002 	beq	87d0 <cq_init+0x150>
    87c4:	ea000002 	b	87d4 <cq_init+0x154>
    87c8:	e3a03000 	mov	r3, #0
    87cc:	ea000000 	b	87d4 <cq_init+0x154>
    87d0:	e3a03001 	mov	r3, #1
    87d4:	e3530000 	cmp	r3, #0
    87d8:	18bd8038 	popne	{r3, r4, r5, pc}
    87dc:	e59f003c 	ldr	r0, [pc, #60]	; 8820 <cq_init+0x1a0>
    87e0:	e59f1028 	ldr	r1, [pc, #40]	; 8810 <cq_init+0x190>
    87e4:	e59f2028 	ldr	r2, [pc, #40]	; 8814 <cq_init+0x194>
    87e8:	e3a0301c 	mov	r3, #28
    87ec:	eb0000dd 	bl	8b68 <printk>
    87f0:	eb00025d 	bl	916c <rpi_reboot>
    87f4:	00002014 	andeq	r2, r0, r4, lsl r0
    87f8:	12345678 	eorsne	r5, r4, #120, 12	; 0x7800000
    87fc:	00002008 	andeq	r2, r0, r8
    8800:	00002004 	andeq	r2, r0, r4
    8804:	0000200c 	andeq	r2, r0, ip
    8808:	00002010 	andeq	r2, r0, r0, lsl r0
    880c:	00009bbc 			; <UNDEFINED> instruction: 0x00009bbc
    8810:	00009b8c 	andeq	r9, r0, ip, lsl #23
    8814:	00009b30 	andeq	r9, r0, r0, lsr fp
    8818:	00009bd8 	ldrdeq	r9, [r0], -r8
    881c:	00009bf4 	strdeq	r9, [r0], -r4
    8820:	00009c18 	andeq	r9, r0, r8, lsl ip

00008824 <cq_pop>:
    assert(sz == cq_nelem(c));
    return 1;
}

// called from user space.
cqe_t cq_pop(cq_t *c) {
    8824:	e92d0070 	push	{r4, r5, r6}
    8828:	e1a03000 	mov	r3, r0
void cq_print(cq_t *c);

/*************************************************************************************
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }
    882c:	e59f4054 	ldr	r4, [pc, #84]	; 8888 <cq_pop+0x64>
    8830:	e59f2054 	ldr	r2, [pc, #84]	; 888c <cq_pop+0x68>
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }

// not blocking: wait: this never calls getc?
static inline int cq_pop_nonblock(cq_t *c, cqe_t *e) {
    if(cq_empty(c))
        return 0;
    8834:	e3a06000 	mov	r6, #0
    unsigned tail = c->tail;
    *e = c->c_buf[tail];
    c->tail = (tail+1)%CQ_N;
    return 1;
    8838:	e3a00001 	mov	r0, #1
void cq_print(cq_t *c);

/*************************************************************************************
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }
    883c:	e793c004 	ldr	ip, [r3, r4]
    8840:	e7931002 	ldr	r1, [r3, r2]
static inline unsigned cq_nelem(cq_t *q) { return (q->head - q->tail) % CQ_N; }
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }

// not blocking: wait: this never calls getc?
static inline int cq_pop_nonblock(cq_t *c, cqe_t *e) {
    if(cq_empty(c))
    8844:	e15c0001 	cmp	ip, r1
    8848:	0a000008 	beq	8870 <cq_pop+0x4c>
        return 0;
    unsigned tail = c->tail;
    884c:	e7931002 	ldr	r1, [r3, r2]
    *e = c->c_buf[tail];
    8850:	e7d35001 	ldrb	r5, [r3, r1]
    8854:	e6ef5075 	uxtb	r5, r5
    c->tail = (tail+1)%CQ_N;
    8858:	e2811001 	add	r1, r1, #1
    885c:	e1a01981 	lsl	r1, r1, #19
    8860:	e1a019a1 	lsr	r1, r1, #19
    8864:	e7831002 	str	r1, [r3, r2]
    return 1;
    8868:	e1a01000 	mov	r1, r0
    886c:	ea000000 	b	8874 <cq_pop+0x50>
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }

// not blocking: wait: this never calls getc?
static inline int cq_pop_nonblock(cq_t *c, cqe_t *e) {
    if(cq_empty(c))
        return 0;
    8870:	e1a01006 	mov	r1, r6
    cqe_t e;

	// wait til interrupt puts something here: if interrupts not enabled,
    // this will deadlock.
    while(!cq_pop_nonblock(c,&e))
    8874:	e3510000 	cmp	r1, #0
    8878:	0affffef 	beq	883c <cq_pop+0x18>
        ;
        // panic("will deadlock: interrupts not enabled [FIXME]\n");
    return e;
}
    887c:	e1a00005 	mov	r0, r5
    8880:	e8bd0070 	pop	{r4, r5, r6}
    8884:	e12fff1e 	bx	lr
    8888:	00002004 	andeq	r2, r0, r4
    888c:	00002008 	andeq	r2, r0, r8

00008890 <cq_pop_n>:

void cq_pop_n(cq_t *c, void *data, unsigned n) {
    8890:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    8894:	e1a07000 	mov	r7, r0
    8898:	e1a06001 	mov	r6, r1
    889c:	e1a05002 	mov	r5, r2
    cqe_t *p = data;

    for(int i = 0; i < n; i++)
    88a0:	e3a04000 	mov	r4, #0
    88a4:	ea000003 	b	88b8 <cq_pop_n+0x28>
        p[i] = cq_pop(c);
    88a8:	e1a00007 	mov	r0, r7
    88ac:	ebffffdc 	bl	8824 <cq_pop>
    88b0:	e7c60004 	strb	r0, [r6, r4]
}

void cq_pop_n(cq_t *c, void *data, unsigned n) {
    cqe_t *p = data;

    for(int i = 0; i < n; i++)
    88b4:	e2844001 	add	r4, r4, #1
    88b8:	e1540005 	cmp	r4, r5
    88bc:	3afffff9 	bcc	88a8 <cq_pop_n+0x18>
        p[i] = cq_pop(c);
}
    88c0:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

000088c4 <cq_pop_n_noblk>:
    assert(cq_nelem(c) == 0);
    cqe_t e = 0x12;
    assert(cq_pop_nonblock(c,&e) == 0 && e == 0x12);
}

int cq_pop_n_noblk(cq_t *q, void *data, unsigned n) {
    88c4:	e92d4070 	push	{r4, r5, r6, lr}
    88c8:	e1a04000 	mov	r4, r0
    88cc:	e1a06001 	mov	r6, r1
    88d0:	e1a05002 	mov	r5, r2
    cq_ok(q);
    88d4:	ebffff59 	bl	8640 <cq_ok>
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }

// if adding 1 to head = tail, then we have no space.
static inline int cq_full(cq_t *q) { return (q->head+1) % CQ_N == q->tail; }

static inline unsigned cq_nelem(cq_t *q) { return (q->head - q->tail) % CQ_N; }
    88d8:	e59f3038 	ldr	r3, [pc, #56]	; 8918 <cq_pop_n_noblk+0x54>
    88dc:	e7942003 	ldr	r2, [r4, r3]
    88e0:	e2833004 	add	r3, r3, #4
    88e4:	e7943003 	ldr	r3, [r4, r3]
    88e8:	e0633002 	rsb	r3, r3, r2
    88ec:	e1a03983 	lsl	r3, r3, #19
    if(cq_nelem(q) < n)
    88f0:	e15509a3 	cmp	r5, r3, lsr #19
    88f4:	8a000005 	bhi	8910 <cq_pop_n_noblk+0x4c>
        return 0;
    cq_pop_n(q,data,n);
    88f8:	e1a00004 	mov	r0, r4
    88fc:	e1a01006 	mov	r1, r6
    8900:	e1a02005 	mov	r2, r5
    8904:	ebffffe1 	bl	8890 <cq_pop_n>
    return 1;
    8908:	e3a00001 	mov	r0, #1
    890c:	e8bd8070 	pop	{r4, r5, r6, pc}
}

int cq_pop_n_noblk(cq_t *q, void *data, unsigned n) {
    cq_ok(q);
    if(cq_nelem(q) < n)
        return 0;
    8910:	e3a00000 	mov	r0, #0
    cq_pop_n(q,data,n);
    return 1;
}
    8914:	e8bd8070 	pop	{r4, r5, r6, pc}
    8918:	00002004 	andeq	r2, r0, r4

0000891c <cq_peek_n>:

// non-destructively peek ahead <n> entries.
int cq_peek_n(cq_t *c, cqe_t *v, unsigned n) {
    891c:	e92d4070 	push	{r4, r5, r6, lr}
    8920:	e1a04000 	mov	r4, r0
    8924:	e59f307c 	ldr	r3, [pc, #124]	; 89a8 <cq_peek_n+0x8c>
    8928:	e7905003 	ldr	r5, [r0, r3]
    892c:	e2833004 	add	r3, r3, #4
    8930:	e7903003 	ldr	r3, [r0, r3]
    8934:	e0635005 	rsb	r5, r3, r5
    8938:	e1a05985 	lsl	r5, r5, #19
    893c:	e1a059a5 	lsr	r5, r5, #19
    int sz = cq_nelem(c);
    if(n > sz)
    8940:	e1520005 	cmp	r2, r5
    8944:	8a000013 	bhi	8998 <cq_peek_n+0x7c>
        return 0;
    unsigned tail = c->tail;
    8948:	e59f305c 	ldr	r3, [pc, #92]	; 89ac <cq_peek_n+0x90>
    894c:	e7906003 	ldr	r6, [r0, r3]
    if(!cq_pop_n_noblk(c, v, n))
    8950:	ebffffdb 	bl	88c4 <cq_pop_n_noblk>
    8954:	e3500000 	cmp	r0, #0
    8958:	08bd8070 	popeq	{r4, r5, r6, pc}
        return 0;
    c->tail = tail;
    895c:	e59f3048 	ldr	r3, [pc, #72]	; 89ac <cq_peek_n+0x90>
    8960:	e7846003 	str	r6, [r4, r3]
    8964:	e59f203c 	ldr	r2, [pc, #60]	; 89a8 <cq_peek_n+0x8c>
    8968:	e7942002 	ldr	r2, [r4, r2]
    896c:	e7943003 	ldr	r3, [r4, r3]
    8970:	e0633002 	rsb	r3, r3, r2
    8974:	e1a03983 	lsl	r3, r3, #19
    assert(sz == cq_nelem(c));
    8978:	e15509a3 	cmp	r5, r3, lsr #19
    897c:	0a000007 	beq	89a0 <cq_peek_n+0x84>
    8980:	e59f0028 	ldr	r0, [pc, #40]	; 89b0 <cq_peek_n+0x94>
    8984:	e59f1028 	ldr	r1, [pc, #40]	; 89b4 <cq_peek_n+0x98>
    8988:	e59f2028 	ldr	r2, [pc, #40]	; 89b8 <cq_peek_n+0x9c>
    898c:	e3a03030 	mov	r3, #48	; 0x30
    8990:	eb000074 	bl	8b68 <printk>
    8994:	eb0001f4 	bl	916c <rpi_reboot>

// non-destructively peek ahead <n> entries.
int cq_peek_n(cq_t *c, cqe_t *v, unsigned n) {
    int sz = cq_nelem(c);
    if(n > sz)
        return 0;
    8998:	e3a00000 	mov	r0, #0
    899c:	e8bd8070 	pop	{r4, r5, r6, pc}
    unsigned tail = c->tail;
    if(!cq_pop_n_noblk(c, v, n))
        return 0;
    c->tail = tail;
    assert(sz == cq_nelem(c));
    return 1;
    89a0:	e3a00001 	mov	r0, #1
}
    89a4:	e8bd8070 	pop	{r4, r5, r6, pc}
    89a8:	00002004 	andeq	r2, r0, r4
    89ac:	00002008 	andeq	r2, r0, r8
    89b0:	00009c50 	andeq	r9, r0, r0, asr ip
    89b4:	00009b8c 	andeq	r9, r0, ip, lsl #23
    89b8:	00009b38 	andeq	r9, r0, r8, lsr fp

000089bc <cq_push_n>:

    for(int i = 0; i < n; i++)
        p[i] = cq_pop(c);
}

int cq_push_n(cq_t *c, void *data, unsigned n) {
    89bc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    89c0:	e59f30f8 	ldr	r3, [pc, #248]	; 8ac0 <cq_push_n+0x104>
    89c4:	e790c003 	ldr	ip, [r0, r3]
    89c8:	e2833004 	add	r3, r3, #4
    89cc:	e7903003 	ldr	r3, [r0, r3]
    89d0:	e063300c 	rsb	r3, r3, ip
    89d4:	e1a03983 	lsl	r3, r3, #19
    89d8:	e1a039a3 	lsr	r3, r3, #19
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }
    89dc:	e2633a02 	rsb	r3, r3, #8192	; 0x2000
    cqe_t *p = data;

    if(cq_nspace(c) < n)
    89e0:	e1520003 	cmp	r2, r3
    89e4:	8a00002f 	bhi	8aa8 <cq_push_n+0xec>
    89e8:	e3a03000 	mov	r3, #0
    return 1;
}

// non-blocking push.
static inline int cq_push(cq_t *c, cqe_t x) {
    unsigned head = c->head;
    89ec:	e59fc0cc 	ldr	ip, [pc, #204]	; 8ac0 <cq_push_n+0x104>
    unsigned tail = c->tail;
    89f0:	e59f50cc 	ldr	r5, [pc, #204]	; 8ac4 <cq_push_n+0x108>
    if(cq_full(c)) 
        return 0;
    89f4:	e1a09003 	mov	r9, r3
    c->c_buf[head] = x;
    c->head = (head + 1) % CQ_N;
    return 1;
    89f8:	e3a08001 	mov	r8, #1
    89fc:	ea000019 	b	8a68 <cq_push_n+0xac>
        return 0;
    for(int i = 0; i < n; i++)
        if(!cq_push(c, p[i]))
    8a00:	e7d1a003 	ldrb	sl, [r1, r3]
    return 1;
}

// non-blocking push.
static inline int cq_push(cq_t *c, cqe_t x) {
    unsigned head = c->head;
    8a04:	e790400c 	ldr	r4, [r0, ip]
    unsigned tail = c->tail;
    8a08:	e7906005 	ldr	r6, [r0, r5]
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }

// if adding 1 to head = tail, then we have no space.
static inline int cq_full(cq_t *q) { return (q->head+1) % CQ_N == q->tail; }
    8a0c:	e790700c 	ldr	r7, [r0, ip]
    8a10:	e2877001 	add	r7, r7, #1
    8a14:	e1a07987 	lsl	r7, r7, #19
    8a18:	e7906005 	ldr	r6, [r0, r5]

// non-blocking push.
static inline int cq_push(cq_t *c, cqe_t x) {
    unsigned head = c->head;
    unsigned tail = c->tail;
    if(cq_full(c)) 
    8a1c:	e15609a7 	cmp	r6, r7, lsr #19
    8a20:	0a000006 	beq	8a40 <cq_push_n+0x84>
        return 0;
    c->c_buf[head] = x;
    8a24:	e7c0a004 	strb	sl, [r0, r4]
    c->head = (head + 1) % CQ_N;
    8a28:	e2844001 	add	r4, r4, #1
    8a2c:	e1a04984 	lsl	r4, r4, #19
    8a30:	e1a049a4 	lsr	r4, r4, #19
    8a34:	e780400c 	str	r4, [r0, ip]
    return 1;
    8a38:	e1a04008 	mov	r4, r8
    8a3c:	ea000000 	b	8a44 <cq_push_n+0x88>
// non-blocking push.
static inline int cq_push(cq_t *c, cqe_t x) {
    unsigned head = c->head;
    unsigned tail = c->tail;
    if(cq_full(c)) 
        return 0;
    8a40:	e1a04009 	mov	r4, r9
    8a44:	e3540000 	cmp	r4, #0
    8a48:	1a000005 	bne	8a64 <cq_push_n+0xa8>
            panic("not handling this\n");
    8a4c:	e59f0074 	ldr	r0, [pc, #116]	; 8ac8 <cq_push_n+0x10c>
    8a50:	e59f1074 	ldr	r1, [pc, #116]	; 8acc <cq_push_n+0x110>
    8a54:	e59f2074 	ldr	r2, [pc, #116]	; 8ad0 <cq_push_n+0x114>
    8a58:	e3a0304e 	mov	r3, #78	; 0x4e
    8a5c:	eb000041 	bl	8b68 <printk>
    8a60:	eb0001c1 	bl	916c <rpi_reboot>
int cq_push_n(cq_t *c, void *data, unsigned n) {
    cqe_t *p = data;

    if(cq_nspace(c) < n)
        return 0;
    for(int i = 0; i < n; i++)
    8a64:	e2833001 	add	r3, r3, #1
    8a68:	e1530002 	cmp	r3, r2
    8a6c:	3affffe3 	bcc	8a00 <cq_push_n+0x44>
        if(!cq_push(c, p[i]))
            panic("not handling this\n");
    if(n)
    8a70:	e3520000 	cmp	r2, #0
    8a74:	0a00000d 	beq	8ab0 <cq_push_n+0xf4>
void cq_print(cq_t *c);

/*************************************************************************************
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }
    8a78:	e59f3040 	ldr	r3, [pc, #64]	; 8ac0 <cq_push_n+0x104>
    8a7c:	e7902003 	ldr	r2, [r0, r3]
    8a80:	e2833004 	add	r3, r3, #4
    8a84:	e7903003 	ldr	r3, [r0, r3]
        assert(!cq_empty(c));
    8a88:	e1520003 	cmp	r2, r3
    8a8c:	1a000009 	bne	8ab8 <cq_push_n+0xfc>
    8a90:	e59f003c 	ldr	r0, [pc, #60]	; 8ad4 <cq_push_n+0x118>
    8a94:	e59f1030 	ldr	r1, [pc, #48]	; 8acc <cq_push_n+0x110>
    8a98:	e59f2030 	ldr	r2, [pc, #48]	; 8ad0 <cq_push_n+0x114>
    8a9c:	e3a03050 	mov	r3, #80	; 0x50
    8aa0:	eb000030 	bl	8b68 <printk>
    8aa4:	eb0001b0 	bl	916c <rpi_reboot>

int cq_push_n(cq_t *c, void *data, unsigned n) {
    cqe_t *p = data;

    if(cq_nspace(c) < n)
        return 0;
    8aa8:	e3a00000 	mov	r0, #0
    8aac:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    for(int i = 0; i < n; i++)
        if(!cq_push(c, p[i]))
            panic("not handling this\n");
    if(n)
        assert(!cq_empty(c));
    return 1;
    8ab0:	e3a00001 	mov	r0, #1
    8ab4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8ab8:	e3a00001 	mov	r0, #1
}
    8abc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8ac0:	00002004 	andeq	r2, r0, r4
    8ac4:	00002008 	andeq	r2, r0, r8
    8ac8:	00009c74 	andeq	r9, r0, r4, ror ip
    8acc:	00009b8c 	andeq	r9, r0, ip, lsl #23
    8ad0:	00009b44 	andeq	r9, r0, r4, asr #22
    8ad4:	00009c98 	muleq	r0, r8, ip

00008ad8 <callee_save>:
    8ad8:	e12fff1e 	bx	lr

00008adc <store_one_asm>:
    8adc:	e5801000 	str	r1, [r0]
    8ae0:	e12fff1e 	bx	lr

00008ae4 <check_callee_save>:
    8ae4:	e3a04004 	mov	r4, #4
    8ae8:	e3a05005 	mov	r5, #5
    8aec:	e3a06006 	mov	r6, #6
    8af0:	e3a07007 	mov	r7, #7
    8af4:	e3a08008 	mov	r8, #8
    8af8:	e3a09009 	mov	r9, #9
    8afc:	e3a0a00a 	mov	sl, #10
    8b00:	e3a0b00b 	mov	fp, #11
    8b04:	e3a0c00c 	mov	ip, #12
    8b08:	e9202000 	stmdb	r0!, {sp}
    8b0c:	e9205ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    8b10:	e5804000 	str	r4, [r0]
    8b14:	ebfffd65 	bl	80b0 <print_and_die>

00008b18 <cswitch>:
    8b18:	e3a04004 	mov	r4, #4
    8b1c:	e3a05005 	mov	r5, #5
    8b20:	e3a06006 	mov	r6, #6
    8b24:	e3a07007 	mov	r7, #7
    8b28:	e3a08008 	mov	r8, #8
    8b2c:	e3a09009 	mov	r9, #9
    8b30:	e3a0a00a 	mov	sl, #10
    8b34:	e3a0b00b 	mov	fp, #11
    8b38:	e3a0c00c 	mov	ip, #12
    8b3c:	e3a0d00d 	mov	sp, #13
    8b40:	e3a0e00e 	mov	lr, #14
    8b44:	e12fff1e 	bx	lr

00008b48 <memset>:
#include <string.h>

void *memset(void *_p, int c, size_t n) {
    char *p = _p, *e = p + n;
    8b48:	e0802002 	add	r2, r0, r2
    8b4c:	e1a03000 	mov	r3, r0

    while(p < e)
    8b50:	ea000001 	b	8b5c <memset+0x14>
        *p++ = c;
    8b54:	e5c31000 	strb	r1, [r3]
    8b58:	e2833001 	add	r3, r3, #1
#include <string.h>

void *memset(void *_p, int c, size_t n) {
    char *p = _p, *e = p + n;

    while(p < e)
    8b5c:	e1530002 	cmp	r3, r2
    8b60:	3afffffb 	bcc	8b54 <memset+0xc>
        *p++ = c;
    return _p;
}
    8b64:	e12fff1e 	bx	lr

00008b68 <printk>:
#include <stdarg.h>

#include "rpi.h"
#include "va-printk.h"

int printk(const char *fmt, ...) {
    8b68:	e92d000f 	push	{r0, r1, r2, r3}
    8b6c:	e92d4030 	push	{r4, r5, lr}
    8b70:	e24dd00c 	sub	sp, sp, #12
    // this is a really huge buffer for a pi.   could do this better.
    static char buf[1024];
    va_list args;

    va_start(args, fmt);
    8b74:	e28d301c 	add	r3, sp, #28
    8b78:	e58d3004 	str	r3, [sp, #4]
        int sz = va_printk(buf, sizeof buf, fmt, args);
    8b7c:	e59f4034 	ldr	r4, [pc, #52]	; 8bb8 <printk+0x50>
    8b80:	e1a00004 	mov	r0, r4
    8b84:	e3a01b01 	mov	r1, #1024	; 0x400
    8b88:	e59d2018 	ldr	r2, [sp, #24]
    8b8c:	eb0000b2 	bl	8e5c <va_printk>
    8b90:	e1a05000 	mov	r5, r0
    va_end(args);


#if 1
    putk(buf);
    8b94:	e59f3020 	ldr	r3, [pc, #32]	; 8bbc <printk+0x54>
    8b98:	e5933000 	ldr	r3, [r3]
    8b9c:	e1a00004 	mov	r0, r4
    8ba0:	e12fff33 	blx	r3
    int i;
    for(i = 0; buf[i]; i++)
        rpi_putchar(buf[i]);
#endif
    return sz;
}
    8ba4:	e1a00005 	mov	r0, r5
    8ba8:	e28dd00c 	add	sp, sp, #12
    8bac:	e8bd4030 	pop	{r4, r5, lr}
    8bb0:	e28dd010 	add	sp, sp, #16
    8bb4:	e12fff1e 	bx	lr
    8bb8:	00009f00 	andeq	r9, r0, r0, lsl #30
    8bbc:	000096b0 			; <UNDEFINED> instruction: 0x000096b0

00008bc0 <internal_putk>:
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    8bc0:	e92d4038 	push	{r3, r4, r5, lr}
    8bc4:	e1a04000 	mov	r4, r0
    for(; *p; p++)
        rpi_putchar(*p);
    8bc8:	e59f5020 	ldr	r5, [pc, #32]	; 8bf0 <internal_putk+0x30>
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    8bcc:	ea000002 	b	8bdc <internal_putk+0x1c>
        rpi_putchar(*p);
    8bd0:	e5953000 	ldr	r3, [r5]
    8bd4:	e12fff33 	blx	r3
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    8bd8:	e2844001 	add	r4, r4, #1
    8bdc:	e5d40000 	ldrb	r0, [r4]
    8be0:	e3500000 	cmp	r0, #0
    8be4:	1afffff9 	bne	8bd0 <internal_putk+0x10>
        rpi_putchar(*p);
//  we were adding this.
//  rpi_putchar('\n');
    return 1;
}
    8be8:	e3a00001 	mov	r0, #1
    8bec:	e8bd8038 	pop	{r3, r4, r5, pc}
    8bf0:	000096b4 			; <UNDEFINED> instruction: 0x000096b4

00008bf4 <isdigit>:
    if(puts_fp)
        putk = puts_fp;
}

// XXX: check sign promotion.
static int isdigit(int c) { return c >= '0' && c <= '9'; }
    8bf4:	e2400030 	sub	r0, r0, #48	; 0x30
    8bf8:	e3500009 	cmp	r0, #9
    8bfc:	83a00000 	movhi	r0, #0
    8c00:	93a00001 	movls	r0, #1
    8c04:	e12fff1e 	bx	lr

00008c08 <pad>:

// don't move: can't be inlined, gcc seems to have a bug.
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
    8c08:	e0611000 	rsb	r1, r1, r0
	// pad with leading spaces
	for(; len < width; len++)
		*p++ = ' ';
    8c0c:	e3a03020 	mov	r3, #32
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8c10:	ea000002 	b	8c20 <pad+0x18>
		*p++ = ' ';
    8c14:	e5c03000 	strb	r3, [r0]
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8c18:	e2811001 	add	r1, r1, #1
		*p++ = ' ';
    8c1c:	e2800001 	add	r0, r0, #1
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8c20:	e1510002 	cmp	r1, r2
    8c24:	bafffffa 	blt	8c14 <pad+0xc>
		*p++ = ' ';
	*p = 0;
    8c28:	e3a03000 	mov	r3, #0
    8c2c:	e5c03000 	strb	r3, [r0]
	return p;
}
    8c30:	e12fff1e 	bx	lr

00008c34 <reverse>:

static char* reverse(char *dst, int n, char *p, char *start) {
	// drop the lower chars if the string is too big.
	int len = p - start + 1; // include \0
    8c34:	e063c002 	rsb	ip, r3, r2
    8c38:	e28cc001 	add	ip, ip, #1
	if(len > n)
    8c3c:	e15c0001 	cmp	ip, r1
		start += (len - n);
    8c40:	c061100c 	rsbgt	r1, r1, ip
    8c44:	c0833001 	addgt	r3, r3, r1

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    8c48:	e2422001 	sub	r2, r2, #1
    8c4c:	e1a01000 	mov	r1, r0
    8c50:	ea000002 	b	8c60 <reverse+0x2c>
		*dst++ = *p;
    8c54:	e452c001 	ldrb	ip, [r2], #-1
    8c58:	e5c1c000 	strb	ip, [r1]
    8c5c:	e2811001 	add	r1, r1, #1
		start += (len - n);

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    8c60:	e1520003 	cmp	r2, r3
    8c64:	2afffffa 	bcs	8c54 <reverse+0x20>
		*dst++ = *p;
	*dst++ = 0;
    8c68:	e3a03000 	mov	r3, #0
    8c6c:	e5c13000 	strb	r3, [r1]

	return s;
}
    8c70:	e12fff1e 	bx	lr

00008c74 <emit>:

static char* emit(unsigned base, char *dst, int n, int val, int width, int signed_p) {
    8c74:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8c78:	e24dd040 	sub	sp, sp, #64	; 0x40
    8c7c:	e1a05001 	mov	r5, r1
    8c80:	e1a04002 	mov	r4, r2
    8c84:	e59d2058 	ldr	r2, [sp, #88]	; 0x58
	// XXX: constrain width to be >= bit size: can change this.
	if(width > n)
    8c88:	e1520004 	cmp	r2, r4
		width = n - 1;
    8c8c:	c2442001 	subgt	r2, r4, #1

	char buf[64], *p = buf; 
	unsigned u = val;
    8c90:	e1a0c003 	mov	ip, r3

	switch(base) { 
    8c94:	e2400002 	sub	r0, r0, #2
    8c98:	e350000e 	cmp	r0, #14
    8c9c:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
    8ca0:	ea000042 	b	8db0 <emit+0x13c>
    8ca4:	00008d88 	andeq	r8, r0, r8, lsl #27
    8ca8:	00008db0 			; <UNDEFINED> instruction: 0x00008db0
    8cac:	00008db0 			; <UNDEFINED> instruction: 0x00008db0
    8cb0:	00008db0 			; <UNDEFINED> instruction: 0x00008db0
    8cb4:	00008db0 			; <UNDEFINED> instruction: 0x00008db0
    8cb8:	00008db0 			; <UNDEFINED> instruction: 0x00008db0
    8cbc:	00008d7c 	andeq	r8, r0, ip, ror sp
    8cc0:	00008db0 			; <UNDEFINED> instruction: 0x00008db0
    8cc4:	00008ce0 	andeq	r8, r0, r0, ror #25
    8cc8:	00008db0 			; <UNDEFINED> instruction: 0x00008db0
    8ccc:	00008db0 			; <UNDEFINED> instruction: 0x00008db0
    8cd0:	00008db0 			; <UNDEFINED> instruction: 0x00008db0
    8cd4:	00008db0 			; <UNDEFINED> instruction: 0x00008db0
    8cd8:	00008db0 			; <UNDEFINED> instruction: 0x00008db0
    8cdc:	00008d54 	andeq	r8, r0, r4, asr sp
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
    8ce0:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
    8ce4:	e2911000 	adds	r1, r1, #0
    8ce8:	13a01001 	movne	r1, #1
    8cec:	e0111fa3 	ands	r1, r1, r3, lsr #31
				neg_p = 1;
				val = -val;
    8cf0:	1263c000 	rsbne	ip, r3, #0
	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
				neg_p = 1;
    8cf4:	13a08001 	movne	r8, #1
	unsigned u = val;

	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
    8cf8:	03a08000 	moveq	r8, #0
			if(val < 0 && signed_p) {
				neg_p = 1;
    8cfc:	e1a0100d 	mov	r1, sp
				val = -val;
				u = val;
			}
			do { 
				*p++ = "0123456789"[u % 10];
    8d00:	e59f70e8 	ldr	r7, [pc, #232]	; 8df0 <emit+0x17c>
    8d04:	e59f60e8 	ldr	r6, [pc, #232]	; 8df4 <emit+0x180>
    8d08:	ea000000 	b	8d10 <emit+0x9c>
    8d0c:	e1a01003 	mov	r1, r3
    8d10:	e2813001 	add	r3, r1, #1
    8d14:	e08e0c97 	umull	r0, lr, r7, ip
    8d18:	e1a0e1ae 	lsr	lr, lr, #3
    8d1c:	e1a0000e 	mov	r0, lr
    8d20:	e08ee10e 	add	lr, lr, lr, lsl #2
    8d24:	e1a0e08e 	lsl	lr, lr, #1
    8d28:	e06ee00c 	rsb	lr, lr, ip
    8d2c:	e7d6c00e 	ldrb	ip, [r6, lr]
    8d30:	e5c1c000 	strb	ip, [r1]
			} while(u /= 10); 
    8d34:	e1a0c000 	mov	ip, r0
    8d38:	e3500000 	cmp	r0, #0
    8d3c:	1afffff2 	bne	8d0c <emit+0x98>
			if(neg_p)
    8d40:	e3580000 	cmp	r8, #0
				*p++ = '-';
    8d44:	12813002 	addne	r3, r1, #2
    8d48:	13a0002d 	movne	r0, #45	; 0x2d
    8d4c:	15c10001 	strbne	r0, [r1, #1]
    8d50:	ea00001c 	b	8dc8 <emit+0x154>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    8d54:	e1a0e00d 	mov	lr, sp
			break;
		}
		case 16:
			u = val;
                        do {
                                *p++ = "0123456789abcdef"[u % 16];
    8d58:	e59f0098 	ldr	r0, [pc, #152]	; 8df8 <emit+0x184>
    8d5c:	e28e3001 	add	r3, lr, #1
    8d60:	e20c100f 	and	r1, ip, #15
    8d64:	e7d01001 	ldrb	r1, [r0, r1]
    8d68:	e5ce1000 	strb	r1, [lr]
    8d6c:	e1a0e003 	mov	lr, r3
                        } while(u /= 16);
    8d70:	e1b0c22c 	lsrs	ip, ip, #4
    8d74:	1afffff8 	bne	8d5c <emit+0xe8>
    8d78:	ea000012 	b	8dc8 <emit+0x154>
                        break;
		// just a single char
		case 8:
			*p++ = val;
    8d7c:	e5cd3000 	strb	r3, [sp]
    8d80:	e28d3001 	add	r3, sp, #1
			break;
    8d84:	ea00000f 	b	8dc8 <emit+0x154>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    8d88:	e1a0e00d 	mov	lr, sp
#if 0
			for(int i = 0; i < 32; i++)
				*p++ = "01"[(u & (1<<i)) != 0];
#else
                        do {
                        	*p++ = "01"[u % 2];
    8d8c:	e59f0068 	ldr	r0, [pc, #104]	; 8dfc <emit+0x188>
    8d90:	e28e3001 	add	r3, lr, #1
    8d94:	e20c1001 	and	r1, ip, #1
    8d98:	e7d01001 	ldrb	r1, [r0, r1]
    8d9c:	e5ce1000 	strb	r1, [lr]
    8da0:	e1a0e003 	mov	lr, r3
			} while(u /= 2);
    8da4:	e1b0c0ac 	lsrs	ip, ip, #1
    8da8:	1afffff8 	bne	8d90 <emit+0x11c>
    8dac:	ea000005 	b	8dc8 <emit+0x154>
#endif
			break;
		default:
			assert(0);
    8db0:	e59f0048 	ldr	r0, [pc, #72]	; 8e00 <emit+0x18c>
    8db4:	e59f1048 	ldr	r1, [pc, #72]	; 8e04 <emit+0x190>
    8db8:	e59f2048 	ldr	r2, [pc, #72]	; 8e08 <emit+0x194>
    8dbc:	e3a03075 	mov	r3, #117	; 0x75
    8dc0:	ebffff68 	bl	8b68 <printk>
    8dc4:	eb0000e8 	bl	916c <rpi_reboot>
	}
	// number string is reversed, so re-reverse it.
	return reverse(dst, n, pad(p, buf, width), buf);
    8dc8:	e1a00003 	mov	r0, r3
    8dcc:	e1a0100d 	mov	r1, sp
    8dd0:	ebffff8c 	bl	8c08 <pad>
    8dd4:	e1a02000 	mov	r2, r0
    8dd8:	e1a00005 	mov	r0, r5
    8ddc:	e1a01004 	mov	r1, r4
    8de0:	e1a0300d 	mov	r3, sp
    8de4:	ebffff92 	bl	8c34 <reverse>
}
    8de8:	e28dd040 	add	sp, sp, #64	; 0x40
    8dec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8df0:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    8df4:	00009d04 	andeq	r9, r0, r4, lsl #26
    8df8:	00009d10 	andeq	r9, r0, r0, lsl sp
    8dfc:	00009d24 	andeq	r9, r0, r4, lsr #26
    8e00:	00009cdc 	ldrdeq	r9, [r0], -ip
    8e04:	00009cf0 	strdeq	r9, [r0], -r0
    8e08:	00009cb8 			; <UNDEFINED> instruction: 0x00009cb8

00008e0c <rpi_set_output>:
// override this is going through the network.
int (*rpi_putchar)(int c) = internal_putchar;
#endif


void rpi_set_output(int (*putc_fp)(int), int (*puts_fp)(const char *)) {
    8e0c:	e92d4008 	push	{r3, lr}
    assert(putc_fp);
    8e10:	e3500000 	cmp	r0, #0
    8e14:	1a000005 	bne	8e30 <rpi_set_output+0x24>
    8e18:	e59f0028 	ldr	r0, [pc, #40]	; 8e48 <rpi_set_output+0x3c>
    8e1c:	e59f1028 	ldr	r1, [pc, #40]	; 8e4c <rpi_set_output+0x40>
    8e20:	e59f2028 	ldr	r2, [pc, #40]	; 8e50 <rpi_set_output+0x44>
    8e24:	e3a03020 	mov	r3, #32
    8e28:	ebffff4e 	bl	8b68 <printk>
    8e2c:	eb0000ce 	bl	916c <rpi_reboot>
    rpi_putchar = putc_fp;
    8e30:	e59f301c 	ldr	r3, [pc, #28]	; 8e54 <rpi_set_output+0x48>
    8e34:	e5830000 	str	r0, [r3]
    if(puts_fp)
    8e38:	e3510000 	cmp	r1, #0
        putk = puts_fp;
    8e3c:	159f3014 	ldrne	r3, [pc, #20]	; 8e58 <rpi_set_output+0x4c>
    8e40:	15831000 	strne	r1, [r3]
    8e44:	e8bd8008 	pop	{r3, pc}
    8e48:	00009d28 	andeq	r9, r0, r8, lsr #26
    8e4c:	00009cf0 	strdeq	r9, [r0], -r0
    8e50:	00009cc0 	andeq	r9, r0, r0, asr #25
    8e54:	000096b4 			; <UNDEFINED> instruction: 0x000096b4
    8e58:	000096b0 			; <UNDEFINED> instruction: 0x000096b0

00008e5c <va_printk>:
	return reverse(dst, n, pad(p, buf, width), buf);
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
    8e5c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8e60:	e24dd08c 	sub	sp, sp, #140	; 0x8c
    8e64:	e1a0b000 	mov	fp, r0
    8e68:	e1a0a003 	mov	sl, r3
	char *p = buf, *e = buf + n - 1;
    8e6c:	e2411001 	sub	r1, r1, #1
    8e70:	e0808001 	add	r8, r0, r1

	buf[0] = 0;
    8e74:	e3a03000 	mov	r3, #0
    8e78:	e5c03000 	strb	r3, [r0]
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;
    8e7c:	e1a04000 	mov	r4, r0

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    8e80:	ea000087 	b	90a4 <va_printk+0x248>
		if(*fmt != '%')
    8e84:	e3530025 	cmp	r3, #37	; 0x25
			*p++ = *fmt++;
    8e88:	12822001 	addne	r2, r2, #1
    8e8c:	15c43000 	strbne	r3, [r4]
    8e90:	12844001 	addne	r4, r4, #1
    8e94:	1a000082 	bne	90a4 <va_printk+0x248>
		
		else if(fmt[1] == '%') {
    8e98:	e5d21001 	ldrb	r1, [r2, #1]
    8e9c:	e3510025 	cmp	r1, #37	; 0x25
			*p++ = *fmt;
    8ea0:	05c43000 	strbeq	r3, [r4]
			fmt+=2;
    8ea4:	02822002 	addeq	r2, r2, #2
	for(; *fmt && p < e; ) {
		if(*fmt != '%')
			*p++ = *fmt++;
		
		else if(fmt[1] == '%') {
			*p++ = *fmt;
    8ea8:	02844001 	addeq	r4, r4, #1
    8eac:	0a00007c 	beq	90a4 <va_printk+0x248>
			fmt+=2;
		} else {	
			fmt++;
    8eb0:	e2826001 	add	r6, r2, #1

			char *s, num[128];
			unsigned width = 0;
    8eb4:	e3a07000 	mov	r7, #0

			while(isdigit(*fmt)) {
    8eb8:	ea000004 	b	8ed0 <va_printk+0x74>
				width = width*10 + *fmt - '0';
    8ebc:	e0877107 	add	r7, r7, r7, lsl #2
    8ec0:	e1a07087 	lsl	r7, r7, #1
    8ec4:	e0877005 	add	r7, r7, r5
    8ec8:	e2477030 	sub	r7, r7, #48	; 0x30
				fmt++;
    8ecc:	e2866001 	add	r6, r6, #1
			fmt++;

			char *s, num[128];
			unsigned width = 0;

			while(isdigit(*fmt)) {
    8ed0:	e5d65000 	ldrb	r5, [r6]
    8ed4:	e1a09005 	mov	r9, r5
    8ed8:	e1a00005 	mov	r0, r5
    8edc:	ebffff44 	bl	8bf4 <isdigit>
    8ee0:	e3500000 	cmp	r0, #0
    8ee4:	1afffff4 	bne	8ebc <va_printk+0x60>
				width = width*10 + *fmt - '0';
				fmt++;
			}
			assert(width < 32);
    8ee8:	e357001f 	cmp	r7, #31
    8eec:	9a000005 	bls	8f08 <va_printk+0xac>
    8ef0:	e59f01d8 	ldr	r0, [pc, #472]	; 90d0 <va_printk+0x274>
    8ef4:	e59f11d8 	ldr	r1, [pc, #472]	; 90d4 <va_printk+0x278>
    8ef8:	e59f21d8 	ldr	r2, [pc, #472]	; 90d8 <va_printk+0x27c>
    8efc:	e3a03092 	mov	r3, #146	; 0x92
    8f00:	ebffff18 	bl	8b68 <printk>
    8f04:	eb000098 	bl	916c <rpi_reboot>
			
			switch(*fmt) {
    8f08:	e2455062 	sub	r5, r5, #98	; 0x62
    8f0c:	e3550016 	cmp	r5, #22
    8f10:	979ff105 	ldrls	pc, [pc, r5, lsl #2]
    8f14:	ea000051 	b	9060 <va_printk+0x204>
    8f18:	00009004 	andeq	r9, r0, r4
    8f1c:	00009038 	andeq	r9, r0, r8, lsr r0
    8f20:	00008f8c 	andeq	r8, r0, ip, lsl #31
    8f24:	00009060 	andeq	r9, r0, r0, rrx
    8f28:	00008f74 	andeq	r8, r0, r4, ror pc
    8f2c:	00009060 	andeq	r9, r0, r0, rrx
    8f30:	00009060 	andeq	r9, r0, r0, rrx
    8f34:	00009060 	andeq	r9, r0, r0, rrx
    8f38:	00009060 	andeq	r9, r0, r0, rrx
    8f3c:	00009060 	andeq	r9, r0, r0, rrx
    8f40:	00009060 	andeq	r9, r0, r0, rrx
    8f44:	00009060 	andeq	r9, r0, r0, rrx
    8f48:	00009060 	andeq	r9, r0, r0, rrx
    8f4c:	00009060 	andeq	r9, r0, r0, rrx
    8f50:	00008fdc 	ldrdeq	r8, [r0], -ip
    8f54:	00009060 	andeq	r9, r0, r0, rrx
    8f58:	00009060 	andeq	r9, r0, r0, rrx
    8f5c:	0000902c 	andeq	r9, r0, ip, lsr #32
    8f60:	00009060 	andeq	r9, r0, r0, rrx
    8f64:	00008fb4 			; <UNDEFINED> instruction: 0x00008fb4
    8f68:	00009060 	andeq	r9, r0, r0, rrx
    8f6c:	00009060 	andeq	r9, r0, r0, rrx
    8f70:	00008fdc 	ldrdeq	r8, [r0], -ip
			case 'f':
			{
#ifndef RPI_FP_ENABLED
				panic("float not enabled!!!");
    8f74:	e59f0160 	ldr	r0, [pc, #352]	; 90dc <va_printk+0x280>
    8f78:	e59f1154 	ldr	r1, [pc, #340]	; 90d4 <va_printk+0x278>
    8f7c:	e59f2154 	ldr	r2, [pc, #340]	; 90d8 <va_printk+0x27c>
    8f80:	e3a03098 	mov	r3, #152	; 0x98
    8f84:	ebfffef7 	bl	8b68 <printk>
    8f88:	eb000077 	bl	916c <rpi_reboot>

				break;
#endif
			}
			case 'd':
				s = emit(10, num, 128, va_arg(args, int), width, 1);
    8f8c:	e59a3000 	ldr	r3, [sl]
    8f90:	e28aa004 	add	sl, sl, #4
    8f94:	e58d7000 	str	r7, [sp]
    8f98:	e3a02001 	mov	r2, #1
    8f9c:	e58d2004 	str	r2, [sp, #4]
    8fa0:	e3a0000a 	mov	r0, #10
    8fa4:	e28d1008 	add	r1, sp, #8
    8fa8:	e3a02080 	mov	r2, #128	; 0x80
    8fac:	ebffff30 	bl	8c74 <emit>
				break;
    8fb0:	ea000031 	b	907c <va_printk+0x220>
			case 'u':
				s = emit(10, num, 128, va_arg(args, unsigned), width, 0);
    8fb4:	e59a3000 	ldr	r3, [sl]
    8fb8:	e28aa004 	add	sl, sl, #4
    8fbc:	e58d7000 	str	r7, [sp]
    8fc0:	e3a02000 	mov	r2, #0
    8fc4:	e58d2004 	str	r2, [sp, #4]
    8fc8:	e3a0000a 	mov	r0, #10
    8fcc:	e28d1008 	add	r1, sp, #8
    8fd0:	e3a02080 	mov	r2, #128	; 0x80
    8fd4:	ebffff26 	bl	8c74 <emit>
				break;
    8fd8:	ea000027 	b	907c <va_printk+0x220>
			case 'p':
			case 'x':
				s = emit(16, num, 128, va_arg(args, unsigned), width, 0);
    8fdc:	e59a3000 	ldr	r3, [sl]
    8fe0:	e28aa004 	add	sl, sl, #4
    8fe4:	e58d7000 	str	r7, [sp]
    8fe8:	e3a02000 	mov	r2, #0
    8fec:	e58d2004 	str	r2, [sp, #4]
    8ff0:	e3a00010 	mov	r0, #16
    8ff4:	e28d1008 	add	r1, sp, #8
    8ff8:	e3a02080 	mov	r2, #128	; 0x80
    8ffc:	ebffff1c 	bl	8c74 <emit>
				break;
    9000:	ea00001d 	b	907c <va_printk+0x220>
			case 'b':
				s = emit(2, num, 128, va_arg(args, unsigned), width, 0);
    9004:	e59a3000 	ldr	r3, [sl]
    9008:	e28aa004 	add	sl, sl, #4
    900c:	e58d7000 	str	r7, [sp]
    9010:	e3a02000 	mov	r2, #0
    9014:	e58d2004 	str	r2, [sp, #4]
    9018:	e3a00002 	mov	r0, #2
    901c:	e28d1008 	add	r1, sp, #8
    9020:	e3a02080 	mov	r2, #128	; 0x80
    9024:	ebffff12 	bl	8c74 <emit>
				break;
    9028:	ea000013 	b	907c <va_printk+0x220>
			case 's':
				s = va_arg(args, char *);
    902c:	e59a0000 	ldr	r0, [sl]
    9030:	e28aa004 	add	sl, sl, #4
				break;
    9034:	ea000010 	b	907c <va_printk+0x220>
			case 'c':
				s = emit(8, num, 128, va_arg(args, int),width,0);
    9038:	e59a3000 	ldr	r3, [sl]
    903c:	e28aa004 	add	sl, sl, #4
    9040:	e58d7000 	str	r7, [sp]
    9044:	e3a02000 	mov	r2, #0
    9048:	e58d2004 	str	r2, [sp, #4]
    904c:	e3a00008 	mov	r0, #8
    9050:	e08d1000 	add	r1, sp, r0
    9054:	e3a02080 	mov	r2, #128	; 0x80
    9058:	ebffff05 	bl	8c74 <emit>
				break;
    905c:	ea000006 	b	907c <va_printk+0x220>
			default: 
				panic("printk: not handling specifier '%c'\n", *fmt);
    9060:	e58d9000 	str	r9, [sp]
    9064:	e59f0074 	ldr	r0, [pc, #116]	; 90e0 <va_printk+0x284>
    9068:	e59f1064 	ldr	r1, [pc, #100]	; 90d4 <va_printk+0x278>
    906c:	e59f2064 	ldr	r2, [pc, #100]	; 90d8 <va_printk+0x27c>
    9070:	e3a030b9 	mov	r3, #185	; 0xb9
    9074:	ebfffebb 	bl	8b68 <printk>
    9078:	eb00003b 	bl	916c <rpi_reboot>
				return 0;   // ugh
			}
			fmt++;
    907c:	e2862001 	add	r2, r6, #1

			// safe string copy
			for(; p < e && *s; )
    9080:	ea000002 	b	9090 <va_printk+0x234>
				*p++ = *s++;
    9084:	e2800001 	add	r0, r0, #1
    9088:	e5c43000 	strb	r3, [r4]
    908c:	e2844001 	add	r4, r4, #1
				return 0;   // ugh
			}
			fmt++;

			// safe string copy
			for(; p < e && *s; )
    9090:	e1540008 	cmp	r4, r8
    9094:	2a000002 	bcs	90a4 <va_printk+0x248>
    9098:	e5d03000 	ldrb	r3, [r0]
    909c:	e3530000 	cmp	r3, #0
    90a0:	1afffff7 	bne	9084 <va_printk+0x228>

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    90a4:	e5d23000 	ldrb	r3, [r2]
    90a8:	e3530000 	cmp	r3, #0
    90ac:	0a000001 	beq	90b8 <va_printk+0x25c>
    90b0:	e1540008 	cmp	r4, r8
    90b4:	3affff72 	bcc	8e84 <va_printk+0x28>
			// safe string copy
			for(; p < e && *s; )
				*p++ = *s++;
		}
	}
	*p++ = 0;
    90b8:	e2840001 	add	r0, r4, #1
    90bc:	e3a03000 	mov	r3, #0
    90c0:	e5c43000 	strb	r3, [r4]
	return p - buf;
}
    90c4:	e06b0000 	rsb	r0, fp, r0
    90c8:	e28dd08c 	add	sp, sp, #140	; 0x8c
    90cc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    90d0:	00009d40 	andeq	r9, r0, r0, asr #26
    90d4:	00009cf0 	strdeq	r9, [r0], -r0
    90d8:	00009cd0 	ldrdeq	r9, [r0], -r0
    90dc:	00009d5c 	andeq	r9, r0, ip, asr sp
    90e0:	00009d84 	andeq	r9, r0, r4, lsl #27

000090e4 <clean_reboot>:
#include "rpi.h"

// print out a special message so bootloader exits
void clean_reboot(void) {
    90e4:	e92d4008 	push	{r3, lr}
    putk("DONE!!!\n");
    90e8:	e59f3014 	ldr	r3, [pc, #20]	; 9104 <clean_reboot+0x20>
    90ec:	e5933000 	ldr	r3, [r3]
    90f0:	e59f0010 	ldr	r0, [pc, #16]	; 9108 <clean_reboot+0x24>
    90f4:	e12fff33 	blx	r3
    delay_ms(100);       // (hopefully) enough time for message to get flushed.
    90f8:	e3a00064 	mov	r0, #100	; 0x64
    90fc:	eb000041 	bl	9208 <delay_ms>
    rpi_reboot();
    9100:	eb000019 	bl	916c <rpi_reboot>
    9104:	000096b0 			; <UNDEFINED> instruction: 0x000096b0
    9108:	00009dbc 			; <UNDEFINED> instruction: 0x00009dbc

0000910c <_cstart>:
#include "rpi.h"

void _cstart() {
    910c:	e92d4008 	push	{r3, lr}
    extern int __bss_start__, __bss_end__;
	void notmain();

    int* bss = &__bss_start__;
    9110:	e59f3020 	ldr	r3, [pc, #32]	; 9138 <_cstart+0x2c>
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    9114:	e59f2020 	ldr	r2, [pc, #32]	; 913c <_cstart+0x30>
        *bss++ = 0;
    9118:	e3a01000 	mov	r1, #0
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    911c:	ea000001 	b	9128 <_cstart+0x1c>
        *bss++ = 0;
    9120:	e5831000 	str	r1, [r3]
    9124:	e2833004 	add	r3, r3, #4
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    9128:	e1530002 	cmp	r3, r2
    912c:	3afffffb 	bcc	9120 <_cstart+0x14>
        *bss++ = 0;

    notmain(); 
    9130:	ebfffbea 	bl	80e0 <notmain>
	rpi_reboot();
    9134:	eb00000c 	bl	916c <rpi_reboot>
    9138:	00009edc 	ldrdeq	r9, [r0], -ip
    913c:	0000a308 	andeq	sl, r0, r8, lsl #6

00009140 <at_user_level>:
 * works if we have a trashed stack pointer?
 */
static unsigned user_level = 0b10000;
int at_user_level(void) {
    unsigned cpsr = 0;
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    9140:	e10f0000 	mrs	r0, CPSR

    // user level = lower 5 bits = 0b10000);
    return (cpsr  & 0b11111)  == user_level;
    9144:	e200001f 	and	r0, r0, #31
}
    9148:	e3500010 	cmp	r0, #16
    914c:	13a00000 	movne	r0, #0
    9150:	03a00001 	moveq	r0, #1
    9154:	e12fff1e 	bx	lr

00009158 <set_user_level>:

// this is just used by the reboot code.
void set_user_level(void) {
    unsigned cpsr = 0;
    // XXX: shouldn't we just set the one bit?
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    9158:	e10f3000 	mrs	r3, CPSR
        cpsr = (cpsr & ~0b11111) | user_level;
    915c:	e3c3301f 	bic	r3, r3, #31
    9160:	e3833010 	orr	r3, r3, #16
    asm volatile("msr cpsr, %0" :: "r"(cpsr));
    9164:	e129f003 	msr	CPSR_fc, r3
    9168:	e12fff1e 	bx	lr

0000916c <rpi_reboot>:
}

void rpi_reboot(void) {
    916c:	e92d4008 	push	{r3, lr}
    if(at_user_level()) {
    9170:	ebfffff2 	bl	9140 <at_user_level>
    9174:	e3500000 	cmp	r0, #0
    9178:	0a000000 	beq	9180 <rpi_reboot+0x14>
        set_user_level();
    917c:	ebfffff5 	bl	9158 <set_user_level>
        // of stuff.
        // assert(!at_user_level());
    }

    // gives uart time to flush: should just call flush directly.
    delay_ms(30);
    9180:	e3a0001e 	mov	r0, #30
    9184:	eb00001f 	bl	9208 <delay_ms>
    const int PM_WDOG = 0x20100024;
    const int PM_PASSWORD = 0x5a000000;
    const int PM_RSTC_WRCFG_FULL_RESET = 0x00000020;

    // timeout = 1/16th of a second? (whatever)
    PUT32(PM_WDOG, PM_PASSWORD | 1);
    9188:	e59f0014 	ldr	r0, [pc, #20]	; 91a4 <rpi_reboot+0x38>
    918c:	e59f1014 	ldr	r1, [pc, #20]	; 91a8 <rpi_reboot+0x3c>
    9190:	eb000028 	bl	9238 <PUT32>
    PUT32(PM_RSTC, PM_PASSWORD | PM_RSTC_WRCFG_FULL_RESET);
    9194:	e59f0010 	ldr	r0, [pc, #16]	; 91ac <rpi_reboot+0x40>
    9198:	e59f1010 	ldr	r1, [pc, #16]	; 91b0 <rpi_reboot+0x44>
    919c:	eb000025 	bl	9238 <PUT32>
    91a0:	eafffffe 	b	91a0 <rpi_reboot+0x34>
    91a4:	20100024 	andscs	r0, r0, r4, lsr #32
    91a8:	5a000001 	bpl	91b4 <delay_cycles>
    91ac:	2010001c 	andscs	r0, r0, ip, lsl r0
    91b0:	5a000020 	bpl	9238 <PUT32>

000091b4 <delay_cycles>:
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    91b4:	ea000001 	b	91c0 <delay_cycles+0xc>
        asm("add r1, r1, #0");
    91b8:	e2811000 	add	r1, r1, #0
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    91bc:	e1a00003 	mov	r0, r3
    91c0:	e2403001 	sub	r3, r0, #1
    91c4:	e3500000 	cmp	r0, #0
    91c8:	1afffffa 	bne	91b8 <delay_cycles+0x4>
        asm("add r1, r1, #0");
}
    91cc:	e12fff1e 	bx	lr

000091d0 <timer_get_usec>:

// in usec
unsigned timer_get_usec(void) {
    91d0:	e92d4008 	push	{r3, lr}
    return GET32(0x20003004);
    91d4:	e59f0004 	ldr	r0, [pc, #4]	; 91e0 <timer_get_usec+0x10>
    91d8:	eb000022 	bl	9268 <GET32>
}
    91dc:	e8bd8008 	pop	{r3, pc}
    91e0:	20003004 	andcs	r3, r0, r4

000091e4 <delay_us>:

void delay_us(unsigned us) {
    91e4:	e92d4038 	push	{r3, r4, r5, lr}
    91e8:	e1a05000 	mov	r5, r0
    unsigned rb = timer_get_usec();
    91ec:	ebfffff7 	bl	91d0 <timer_get_usec>
    91f0:	e1a04000 	mov	r4, r0
    while (1) {
        unsigned ra = timer_get_usec();
    91f4:	ebfffff5 	bl	91d0 <timer_get_usec>
        if ((ra - rb) >= us) {
    91f8:	e0640000 	rsb	r0, r4, r0
    91fc:	e1500005 	cmp	r0, r5
    9200:	3afffffb 	bcc	91f4 <delay_us+0x10>
            break;
        }
    }
}
    9204:	e8bd8038 	pop	{r3, r4, r5, pc}

00009208 <delay_ms>:
void delay_ms(unsigned ms) {
    9208:	e92d4008 	push	{r3, lr}
    delay_us(ms*1000);
    920c:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    9210:	e0000093 	mul	r0, r3, r0
    9214:	ebfffff2 	bl	91e4 <delay_us>
    9218:	e8bd8008 	pop	{r3, pc}

0000921c <delay_sec>:
}
void delay_sec(unsigned sec) {
    921c:	e92d4008 	push	{r3, lr}
    delay_ms(sec*1000);
    9220:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    9224:	e0000093 	mul	r0, r3, r0
    9228:	ebfffff6 	bl	9208 <delay_ms>
    922c:	e8bd8008 	pop	{r3, pc}

00009230 <put32>:
    9230:	e5801000 	str	r1, [r0]
    9234:	e12fff1e 	bx	lr

00009238 <PUT32>:
    9238:	e5801000 	str	r1, [r0]
    923c:	e12fff1e 	bx	lr

00009240 <put16>:
    9240:	e1c010b0 	strh	r1, [r0]
    9244:	e12fff1e 	bx	lr

00009248 <PUT16>:
    9248:	e1c010b0 	strh	r1, [r0]
    924c:	e12fff1e 	bx	lr

00009250 <put8>:
    9250:	e5c01000 	strb	r1, [r0]
    9254:	e12fff1e 	bx	lr

00009258 <PUT8>:
    9258:	e5c01000 	strb	r1, [r0]
    925c:	e12fff1e 	bx	lr

00009260 <get32>:
    9260:	e5900000 	ldr	r0, [r0]
    9264:	e12fff1e 	bx	lr

00009268 <GET32>:
    9268:	e5900000 	ldr	r0, [r0]
    926c:	e12fff1e 	bx	lr

00009270 <GETPC>:
    9270:	e1a0000e 	mov	r0, lr
    9274:	e12fff1e 	bx	lr

00009278 <dummy>:
    9278:	e12fff1e 	bx	lr

0000927c <or_in32>:
    927c:	e92d4070 	push	{r4, r5, r6, lr}
    9280:	e1a04000 	mov	r4, r0
    9284:	e1a05001 	mov	r5, r1
    9288:	ebfffff4 	bl	9260 <get32>
    928c:	e1801005 	orr	r1, r0, r5
    9290:	e1a00004 	mov	r0, r4
    9294:	ebffffe5 	bl	9230 <put32>
    9298:	e8bd8070 	pop	{r4, r5, r6, pc}

0000929c <uart_get>:
    929c:	e59f0000 	ldr	r0, [pc]	; 92a4 <uart_get+0x8>
    92a0:	e12fff1e 	bx	lr
    92a4:	20215040 	eorcs	r5, r1, r0, asr #32

000092a8 <uart_init>:
    92a8:	e92d4010 	push	{r4, lr}
    92ac:	e3a01002 	mov	r1, #2
    92b0:	e3a0000e 	mov	r0, #14
    92b4:	eb00004b 	bl	93e8 <gpio_set_function>
    92b8:	e3a01002 	mov	r1, #2
    92bc:	e3a0000f 	mov	r0, #15
    92c0:	eb000048 	bl	93e8 <gpio_set_function>
    92c4:	eb0000f2 	bl	9694 <dev_barrier>
    92c8:	e3a01001 	mov	r1, #1
    92cc:	e59f0064 	ldr	r0, [pc, #100]	; 9338 <uart_init+0x90>
    92d0:	ebffffe9 	bl	927c <or_in32>
    92d4:	eb0000ee 	bl	9694 <dev_barrier>
    92d8:	e59f405c 	ldr	r4, [pc, #92]	; 933c <uart_init+0x94>
    92dc:	e3a01000 	mov	r1, #0
    92e0:	e1a00004 	mov	r0, r4
    92e4:	ebffffd1 	bl	9230 <put32>
    92e8:	e3a01000 	mov	r1, #0
    92ec:	e59f004c 	ldr	r0, [pc, #76]	; 9340 <uart_init+0x98>
    92f0:	ebffffce 	bl	9230 <put32>
    92f4:	e3a01003 	mov	r1, #3
    92f8:	e59f0044 	ldr	r0, [pc, #68]	; 9344 <uart_init+0x9c>
    92fc:	ebffffcb 	bl	9230 <put32>
    9300:	e3a01000 	mov	r1, #0
    9304:	e59f003c 	ldr	r0, [pc, #60]	; 9348 <uart_init+0xa0>
    9308:	ebffffc8 	bl	9230 <put32>
    930c:	e3a010c7 	mov	r1, #199	; 0xc7
    9310:	e59f0034 	ldr	r0, [pc, #52]	; 934c <uart_init+0xa4>
    9314:	ebffffc5 	bl	9230 <put32>
    9318:	e59f1030 	ldr	r1, [pc, #48]	; 9350 <uart_init+0xa8>
    931c:	e59f0030 	ldr	r0, [pc, #48]	; 9354 <uart_init+0xac>
    9320:	ebffffc2 	bl	9230 <put32>
    9324:	e3a01003 	mov	r1, #3
    9328:	e1a00004 	mov	r0, r4
    932c:	ebffffbf 	bl	9230 <put32>
    9330:	eb0000d7 	bl	9694 <dev_barrier>
    9334:	e8bd8010 	pop	{r4, pc}
    9338:	20215004 	eorcs	r5, r1, r4
    933c:	20215060 	eorcs	r5, r1, r0, rrx
    9340:	20215044 	eorcs	r5, r1, r4, asr #32
    9344:	2021504c 	eorcs	r5, r1, ip, asr #32
    9348:	20215050 	eorcs	r5, r1, r0, asr r0
    934c:	20215048 	eorcs	r5, r1, r8, asr #32
    9350:	0000010e 	andeq	r0, r0, lr, lsl #2
    9354:	20215068 	eorcs	r5, r1, r8, rrx

00009358 <uart_can_getc>:
    9358:	e92d4010 	push	{r4, lr}
    935c:	e59f0008 	ldr	r0, [pc, #8]	; 936c <uart_can_getc+0x14>
    9360:	ebffffbe 	bl	9260 <get32>
    9364:	e2000001 	and	r0, r0, #1
    9368:	e8bd8010 	pop	{r4, pc}
    936c:	20215064 	eorcs	r5, r1, r4, rrx

00009370 <uart_can_putc>:
    9370:	e92d4010 	push	{r4, lr}
    9374:	e59f0010 	ldr	r0, [pc, #16]	; 938c <uart_can_putc+0x1c>
    9378:	ebffffb8 	bl	9260 <get32>
    937c:	e3100002 	tst	r0, #2
    9380:	13a00001 	movne	r0, #1
    9384:	03a00000 	moveq	r0, #0
    9388:	e8bd8010 	pop	{r4, pc}
    938c:	20215064 	eorcs	r5, r1, r4, rrx

00009390 <uart_getc>:
    9390:	e92d4010 	push	{r4, lr}
    9394:	ebffffef 	bl	9358 <uart_can_getc>
    9398:	e3500000 	cmp	r0, #0
    939c:	0afffffc 	beq	9394 <uart_getc+0x4>
    93a0:	e59f0008 	ldr	r0, [pc, #8]	; 93b0 <uart_getc+0x20>
    93a4:	ebffffad 	bl	9260 <get32>
    93a8:	e6ef0070 	uxtb	r0, r0
    93ac:	e8bd8010 	pop	{r4, pc}
    93b0:	20215040 	eorcs	r5, r1, r0, asr #32

000093b4 <uart_putc>:
    93b4:	e92d4010 	push	{r4, lr}
    93b8:	e1a04000 	mov	r4, r0
    93bc:	ebffffeb 	bl	9370 <uart_can_putc>
    93c0:	e3500000 	cmp	r0, #0
    93c4:	0afffffc 	beq	93bc <uart_putc+0x8>
    93c8:	e6ef1074 	uxtb	r1, r4
    93cc:	e59f0004 	ldr	r0, [pc, #4]	; 93d8 <uart_putc+0x24>
    93d0:	ebffff96 	bl	9230 <put32>
    93d4:	e8bd8010 	pop	{r4, pc}
    93d8:	20215040 	eorcs	r5, r1, r0, asr #32

000093dc <uart_has_data>:
    93dc:	e92d4010 	push	{r4, lr}
    93e0:	ebffffdc 	bl	9358 <uart_can_getc>
    93e4:	e8bd8010 	pop	{r4, pc}

000093e8 <gpio_set_function>:
    93e8:	e350001f 	cmp	r0, #31
    93ec:	812fff1e 	bxhi	lr
    93f0:	e3d13007 	bics	r3, r1, #7
    93f4:	112fff1e 	bxne	lr
    93f8:	e92d4070 	push	{r4, r5, r6, lr}
    93fc:	e1a04001 	mov	r4, r1
    9400:	e59f2044 	ldr	r2, [pc, #68]	; 944c <gpio_set_function+0x64>
    9404:	e0832290 	umull	r2, r3, r0, r2
    9408:	e1a031a3 	lsr	r3, r3, #3
    940c:	e1a06003 	mov	r6, r3
    9410:	e0833103 	add	r3, r3, r3, lsl #2
    9414:	e1a02083 	lsl	r2, r3, #1
    9418:	e0403002 	sub	r3, r0, r2
    941c:	e0835083 	add	r5, r3, r3, lsl #1
    9420:	e1a06106 	lsl	r6, r6, #2
    9424:	e2866202 	add	r6, r6, #536870912	; 0x20000000
    9428:	e2866602 	add	r6, r6, #2097152	; 0x200000
    942c:	e1a00006 	mov	r0, r6
    9430:	ebffff8a 	bl	9260 <get32>
    9434:	e3a01007 	mov	r1, #7
    9438:	e1c01511 	bic	r1, r0, r1, lsl r5
    943c:	e1811514 	orr	r1, r1, r4, lsl r5
    9440:	e1a00006 	mov	r0, r6
    9444:	ebffff79 	bl	9230 <put32>
    9448:	e8bd8070 	pop	{r4, r5, r6, pc}
    944c:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd

00009450 <gpio_set_output>:
    9450:	e92d4010 	push	{r4, lr}
    9454:	e3a01001 	mov	r1, #1
    9458:	ebffffe2 	bl	93e8 <gpio_set_function>
    945c:	e8bd8010 	pop	{r4, pc}

00009460 <gpio_set_on>:
    9460:	e350001f 	cmp	r0, #31
    9464:	812fff1e 	bxhi	lr
    9468:	e92d4010 	push	{r4, lr}
    946c:	e3a01001 	mov	r1, #1
    9470:	e1a01011 	lsl	r1, r1, r0
    9474:	e59f0004 	ldr	r0, [pc, #4]	; 9480 <gpio_set_on+0x20>
    9478:	ebffff6e 	bl	9238 <PUT32>
    947c:	e8bd8010 	pop	{r4, pc}
    9480:	2020001c 	eorcs	r0, r0, ip, lsl r0

00009484 <gpio_set_off>:
    9484:	e350001f 	cmp	r0, #31
    9488:	812fff1e 	bxhi	lr
    948c:	e92d4010 	push	{r4, lr}
    9490:	e3a01001 	mov	r1, #1
    9494:	e1a01011 	lsl	r1, r1, r0
    9498:	e59f0004 	ldr	r0, [pc, #4]	; 94a4 <gpio_set_off+0x20>
    949c:	ebffff65 	bl	9238 <PUT32>
    94a0:	e8bd8010 	pop	{r4, pc}
    94a4:	20200028 	eorcs	r0, r0, r8, lsr #32

000094a8 <gpio_set_input>:
    94a8:	e92d4010 	push	{r4, lr}
    94ac:	e3a01000 	mov	r1, #0
    94b0:	ebffffcc 	bl	93e8 <gpio_set_function>
    94b4:	e8bd8010 	pop	{r4, pc}

000094b8 <gpio_write>:
    94b8:	e92d4010 	push	{r4, lr}
    94bc:	e3510000 	cmp	r1, #0
    94c0:	1a000001 	bne	94cc <gpio_write+0x14>
    94c4:	ebffffee 	bl	9484 <gpio_set_off>
    94c8:	e8bd8010 	pop	{r4, pc}
    94cc:	ebffffe3 	bl	9460 <gpio_set_on>
    94d0:	e8bd8010 	pop	{r4, pc}

000094d4 <gpio_read>:
    94d4:	e350001f 	cmp	r0, #31
    94d8:	8a000007 	bhi	94fc <gpio_read+0x28>
    94dc:	e92d4010 	push	{r4, lr}
    94e0:	e200401f 	and	r4, r0, #31
    94e4:	e59f3018 	ldr	r3, [pc, #24]	; 9504 <gpio_read+0x30>
    94e8:	e08302a0 	add	r0, r3, r0, lsr #5
    94ec:	ebffff5d 	bl	9268 <GET32>
    94f0:	e1a00430 	lsr	r0, r0, r4
    94f4:	e2000001 	and	r0, r0, #1
    94f8:	e8bd8010 	pop	{r4, pc}
    94fc:	e3e00000 	mvn	r0, #0
    9500:	e12fff1e 	bx	lr
    9504:	20200034 	eorcs	r0, r0, r4, lsr r0

00009508 <kmalloc>:
 *  - The returned pointer should always be 4-byte aligned.  
 *    Easiest way is to make sure the heap pointer starts 4-byte
 *    and you always round up the number of bytes.  Make sure
 *    you put an assertion in.  
 */
void *kmalloc(unsigned nbytes) {
    9508:	e92d4010 	push	{r4, lr}
    demand(init_p, calling before initialized);
    950c:	e59f3048 	ldr	r3, [pc, #72]	; 955c <kmalloc+0x54>
    9510:	e5933000 	ldr	r3, [r3]
    9514:	e3530000 	cmp	r3, #0
    9518:	1a000005 	bne	9534 <kmalloc+0x2c>
    951c:	e59f003c 	ldr	r0, [pc, #60]	; 9560 <kmalloc+0x58>
    9520:	e59f103c 	ldr	r1, [pc, #60]	; 9564 <kmalloc+0x5c>
    9524:	e59f203c 	ldr	r2, [pc, #60]	; 9568 <kmalloc+0x60>
    9528:	e3a0301a 	mov	r3, #26
    952c:	ebfffd8d 	bl	8b68 <printk>
    9530:	ebffff0d 	bl	916c <rpi_reboot>
    
    void* to_allocate = heap_ptr;
    9534:	e59f3020 	ldr	r3, [pc, #32]	; 955c <kmalloc+0x54>
    9538:	e5934004 	ldr	r4, [r3, #4]
    unsigned rounded_nbytes = roundup(nbytes, 4);
    953c:	e2802003 	add	r2, r0, #3
    9540:	e3c22003 	bic	r2, r2, #3
    heap_ptr += rounded_nbytes;
    9544:	e0840002 	add	r0, r4, r2
    9548:	e5830004 	str	r0, [r3, #4]
    memset(heap_ptr, 0, rounded_nbytes);
    954c:	e3a01000 	mov	r1, #0
    9550:	ebfffd7c 	bl	8b48 <memset>
    return to_allocate;

}
    9554:	e1a00004 	mov	r0, r4
    9558:	e8bd8010 	pop	{r4, pc}
    955c:	0000a300 	andeq	sl, r0, r0, lsl #6
    9560:	00009df0 	strdeq	r9, [r0], -r0
    9564:	00009e30 	andeq	r9, r0, r0, lsr lr
    9568:	00009dc8 	andeq	r9, r0, r8, asr #27

0000956c <kmalloc_aligned>:

// address of returned pointer should be a multiple of
// alignment.
void *kmalloc_aligned(unsigned nbytes, unsigned alignment) {
    956c:	e92d4008 	push	{r3, lr}
    demand(init_p, calling before initialized);
    9570:	e59f3074 	ldr	r3, [pc, #116]	; 95ec <kmalloc_aligned+0x80>
    9574:	e5933000 	ldr	r3, [r3]
    9578:	e3530000 	cmp	r3, #0
    957c:	1a000005 	bne	9598 <kmalloc_aligned+0x2c>
    9580:	e59f0068 	ldr	r0, [pc, #104]	; 95f0 <kmalloc_aligned+0x84>
    9584:	e59f1068 	ldr	r1, [pc, #104]	; 95f4 <kmalloc_aligned+0x88>
    9588:	e59f2068 	ldr	r2, [pc, #104]	; 95f8 <kmalloc_aligned+0x8c>
    958c:	e3a03027 	mov	r3, #39	; 0x27
    9590:	ebfffd74 	bl	8b68 <printk>
    9594:	ebfffef4 	bl	916c <rpi_reboot>

    if(alignment <= 4)
    9598:	e3510004 	cmp	r1, #4
    959c:	8a000001 	bhi	95a8 <kmalloc_aligned+0x3c>
        return kmalloc(nbytes);
    95a0:	ebffffd8 	bl	9508 <kmalloc>
    95a4:	e8bd8008 	pop	{r3, pc}
    demand(alignment % 4 == 0, "weird alignment: not a multiple of 4!");
    95a8:	e3110003 	tst	r1, #3
    95ac:	0a000005 	beq	95c8 <kmalloc_aligned+0x5c>
    95b0:	e59f0044 	ldr	r0, [pc, #68]	; 95fc <kmalloc_aligned+0x90>
    95b4:	e59f1038 	ldr	r1, [pc, #56]	; 95f4 <kmalloc_aligned+0x88>
    95b8:	e59f2038 	ldr	r2, [pc, #56]	; 95f8 <kmalloc_aligned+0x8c>
    95bc:	e3a0302b 	mov	r3, #43	; 0x2b
    95c0:	ebfffd68 	bl	8b68 <printk>
    95c4:	ebfffee8 	bl	916c <rpi_reboot>
    unsigned aligned_heap_ptr = (unsigned) heap_ptr;
    95c8:	e59f301c 	ldr	r3, [pc, #28]	; 95ec <kmalloc_aligned+0x80>
    95cc:	e5932004 	ldr	r2, [r3, #4]
	aligned_heap_ptr = roundup(aligned_heap_ptr, alignment);
    95d0:	e0812002 	add	r2, r1, r2
    95d4:	e2422001 	sub	r2, r2, #1
    95d8:	e2611000 	rsb	r1, r1, #0
    95dc:	e0021001 	and	r1, r2, r1
	heap_ptr = (void*) aligned_heap_ptr;
    95e0:	e5831004 	str	r1, [r3, #4]

	return kmalloc(nbytes);
    95e4:	ebffffc7 	bl	9508 <kmalloc>
}
    95e8:	e8bd8008 	pop	{r3, pc}
    95ec:	0000a300 	andeq	sl, r0, r0, lsl #6
    95f0:	00009df0 	strdeq	r9, [r0], -r0
    95f4:	00009e30 	andeq	r9, r0, r0, lsr lr
    95f8:	00009dd0 	ldrdeq	r9, [r0], -r0
    95fc:	00009e44 	andeq	r9, r0, r4, asr #28

00009600 <kmalloc_init>:
 *    - should be just a few lines of code.
 *    - sets heap pointer to the location of 
 *      __heap_start__.   print this to make sure
 *      it makes sense!
 */
void kmalloc_init(void) {
    9600:	e92d4008 	push	{r3, lr}
    demand(!init_p, cannot initialize twice!\n);
    9604:	e59f3038 	ldr	r3, [pc, #56]	; 9644 <kmalloc_init+0x44>
    9608:	e5933000 	ldr	r3, [r3]
    960c:	e3530000 	cmp	r3, #0
    9610:	0a000005 	beq	962c <kmalloc_init+0x2c>
    9614:	e59f002c 	ldr	r0, [pc, #44]	; 9648 <kmalloc_init+0x48>
    9618:	e59f102c 	ldr	r1, [pc, #44]	; 964c <kmalloc_init+0x4c>
    961c:	e59f202c 	ldr	r2, [pc, #44]	; 9650 <kmalloc_init+0x50>
    9620:	e3a0303c 	mov	r3, #60	; 0x3c
    9624:	ebfffd4f 	bl	8b68 <printk>
    9628:	ebfffecf 	bl	916c <rpi_reboot>
    init_p = 1;
    962c:	e59f3010 	ldr	r3, [pc, #16]	; 9644 <kmalloc_init+0x44>
    9630:	e3a02001 	mov	r2, #1
    9634:	e5832000 	str	r2, [r3]
    heap_ptr = &__heap_start__;
    9638:	e59f2014 	ldr	r2, [pc, #20]	; 9654 <kmalloc_init+0x54>
    963c:	e5832004 	str	r2, [r3, #4]
    9640:	e8bd8008 	pop	{r3, pc}
    9644:	0000a300 	andeq	sl, r0, r0, lsl #6
    9648:	00009e9c 	muleq	r0, ip, lr
    964c:	00009e30 	andeq	r9, r0, r0, lsr lr
    9650:	00009de0 	andeq	r9, r0, r0, ror #27
    9654:	0000a308 	andeq	sl, r0, r8, lsl #6

00009658 <kfree_all>:
/* 
 * free all allocated memory: reset the heap 
 * pointer back to the beginning.
 */
void kfree_all(void) {
    heap_ptr = &__heap_start__;
    9658:	e59f2008 	ldr	r2, [pc, #8]	; 9668 <kfree_all+0x10>
    965c:	e59f3008 	ldr	r3, [pc, #8]	; 966c <kfree_all+0x14>
    9660:	e5832004 	str	r2, [r3, #4]
    9664:	e12fff1e 	bx	lr
    9668:	0000a308 	andeq	sl, r0, r8, lsl #6
    966c:	0000a300 	andeq	sl, r0, r0, lsl #6

00009670 <kmalloc_heap_ptr>:
// allocated block satisfies: 
//    assert(<addr> < kmalloc_heap_ptr());
// 
void *kmalloc_heap_ptr(void) {
    return (void*) heap_ptr;
}
    9670:	e59f3004 	ldr	r3, [pc, #4]	; 967c <kmalloc_heap_ptr+0xc>
    9674:	e5930004 	ldr	r0, [r3, #4]
    9678:	e12fff1e 	bx	lr
    967c:	0000a300 	andeq	sl, r0, r0, lsl #6

00009680 <internal_putchar>:
#include "rpi.h"

static int internal_putchar(int c) { uart_putc(c); return c; }
    9680:	e92d4010 	push	{r4, lr}
    9684:	e1a04000 	mov	r4, r0
    9688:	ebffff49 	bl	93b4 <uart_putc>
    968c:	e1a00004 	mov	r0, r4
    9690:	e8bd8010 	pop	{r4, pc}

00009694 <dev_barrier>:
    9694:	ea000002 	b	96a4 <dsb>

00009698 <dmb>:
    9698:	e3a00000 	mov	r0, #0
    969c:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
    96a0:	e12fff1e 	bx	lr

000096a4 <dsb>:
    96a4:	ee070f9a 	mcr	15, 0, r0, cr7, cr10, {4}
    96a8:	e12fff1e 	bx	lr

Disassembly of section .data:

000096ac <tid>:
    96ac:	00000001 	andeq	r0, r0, r1

000096b0 <putk>:
    96b0:	00008bc0 	andeq	r8, r0, r0, asr #23

000096b4 <rpi_putchar>:
    96b4:	00009680 	andeq	r9, r0, r0, lsl #13

Disassembly of section .rodata:

000096b8 <__FUNCTION__.4178>:
    96b8:	6d746f6e 	ldclvs	15, cr6, [r4, #-440]!	; 0xfffffe48
    96bc:	006e6961 	rsbeq	r6, lr, r1, ror #18
    96c0:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
    96c4:	253d7465 	ldrcs	r7, [sp, #-1125]!	; 0x465
    96c8:	72202c64 	eorvc	r2, r0, #100, 24	; 0x6400
    96cc:	3d206425 	cfstrscc	mvf6, [r0, #-148]!	; 0xffffff6c
    96d0:	25783020 	ldrbcs	r3, [r8, #-32]!
    96d4:	255b2078 	ldrbcs	r2, [fp, #-120]	; 0x78
    96d8:	000a5d64 	andeq	r5, sl, r4, ror #26
    96dc:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
    96e0:	253d7465 	ldrcs	r7, [sp, #-1125]!	; 0x465
    96e4:	72202c64 	eorvc	r2, r0, #100, 24	; 0x6400
    96e8:	732f3331 	teqvc	pc, #-1006632960	; 0xc4000000
    96ec:	203d2070 	eorscs	r2, sp, r0, ror r0
    96f0:	78257830 	stmdavc	r5!, {r4, r5, fp, ip, sp, lr}
    96f4:	64255b20 	strtvs	r5, [r5], #-2848	; 0xb20
    96f8:	00000a5d 	andeq	r0, r0, sp, asr sl
    96fc:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    9700:	6176206b 	cmnvs	r6, fp, rrx
    9704:	2065756c 	rsbcs	r7, r5, ip, ror #10
    9708:	756f6873 	strbvc	r6, [pc, #-2163]!	; 8e9d <va_printk+0x41>
    970c:	6220646c 	eorvs	r6, r0, #108, 8	; 0x6c000000
    9710:	72612065 	rsbvc	r2, r1, #101	; 0x65
    9714:	646e756f 	strbtvs	r7, [lr], #-1391	; 0x56f
    9718:	25783020 	ldrbcs	r3, [r8, #-32]!
    971c:	69202c78 	stmdbvs	r0!, {r3, r4, r5, r6, sl, fp, sp}
    9720:	78302073 	ldmdavc	r0!, {r0, r1, r4, r5, r6, sp}
    9724:	000a7825 	andeq	r7, sl, r5, lsr #16
    9728:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
    972c:	253d7465 	ldrcs	r7, [sp, #-1125]!	; 0x465
    9730:	72202c64 	eorvc	r2, r0, #100, 24	; 0x6400
    9734:	6c2f3431 	cfstrsvs	mvf3, [pc], #-196	; 9678 <kmalloc_heap_ptr+0x8>
    9738:	203d2072 	eorscs	r2, sp, r2, ror r0
    973c:	78257830 	stmdavc	r5!, {r4, r5, fp, ip, sp, lr}
    9740:	64255b20 	strtvs	r5, [r5], #-2848	; 0xb20
    9744:	00000a5d 	andeq	r0, r0, sp, asr sl
    9748:	70206e69 	eorvc	r6, r0, r9, ror #28
    974c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    9750:	646e6120 	strbtvs	r6, [lr], #-288	; 0x120
    9754:	65696420 	strbvs	r6, [r9, #-1056]!	; 0x420
    9758:	6261203a 	rsbvs	r2, r1, #58	; 0x3a
    975c:	2074756f 	rsbscs	r7, r4, pc, ror #10
    9760:	64206f74 	strtvs	r6, [r0], #-3956	; 0xf74
    9764:	20706d75 	rsbscs	r6, r0, r5, ror sp
    9768:	69676572 	stmdbvs	r7!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    976c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    9770:	72662073 	rsbvc	r2, r6, #115	; 0x73
    9774:	25206d6f 	strcs	r6, [r0, #-3439]!	; 0xd6f
    9778:	00000a78 	andeq	r0, r0, r8, ror sl
    977c:	68636165 	stmdavs	r3!, {r0, r2, r5, r6, r8, sp, lr}^
    9780:	67657220 	strbvs	r7, [r5, -r0, lsr #4]!
    9784:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0x369
    9788:	61762072 	cmnvs	r6, r2, ror r0
    978c:	2065756c 	rsbcs	r7, r5, ip, ror #10
    9790:	65637865 	strbvs	r7, [r3, #-2149]!	; 0x865
    9794:	3c207470 	cfstrscc	mvf7, [r0], #-448	; 0xfffffe40
    9798:	203e7073 	eorscs	r7, lr, r3, ror r0
    979c:	756f6873 	strbvc	r6, [pc, #-2163]!	; 8f31 <va_printk+0xd5>
    97a0:	6820646c 	stmdavs	r0!, {r2, r3, r5, r6, sl, sp, lr}
    97a4:	20646c6f 	rsbcs	r6, r4, pc, ror #24
    97a8:	20737469 	rsbscs	r7, r3, r9, ror #8
    97ac:	20676572 	rsbcs	r6, r7, r2, ror r5
    97b0:	626d756e 	rsbvs	r7, sp, #461373440	; 0x1b800000
    97b4:	28207265 	stmdacs	r0!, {r0, r2, r5, r6, r9, ip, sp, lr}
    97b8:	68203472 	stmdavs	r0!, {r1, r4, r5, r6, sl, ip, sp}
    97bc:	73646c6f 	cmnvc	r4, #28416	; 0x6f00
    97c0:	202c3420 	eorcs	r3, ip, r0, lsr #8
    97c4:	29637465 	stmdbcs	r3!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    97c8:	0000000a 	andeq	r0, r0, sl
    97cc:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    97d0:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    97d4:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    97d8:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    97dc:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    97e0:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    97e4:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    97e8:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    97ec:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    97f0:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    97f4:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    97f8:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    97fc:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    9800:	00000a2d 	andeq	r0, r0, sp, lsr #20
    9804:	74726170 	ldrbtvc	r6, [r2], #-368	; 0x170
    9808:	203a3020 	eorscs	r3, sl, r0, lsr #32
    980c:	74697277 	strbtvc	r7, [r9], #-631	; 0x277
    9810:	20612065 	rsbcs	r2, r1, r5, rrx
    9814:	756c6176 	strbvc	r6, [ip, #-374]!	; 0x176
    9818:	6e692065 	cdpvs	0, 6, cr2, cr9, cr5, {3}
    981c:	61206f74 	teqvs	r0, r4, ror pc
    9820:	696f7020 	stmdbvs	pc!, {r5, ip, sp, lr}^	; <UNPREDICTABLE>
    9824:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    9828:	206e6920 	rsbcs	r6, lr, r0, lsr #18
    982c:	65737361 	ldrbvs	r7, [r3, #-865]!	; 0x361
    9830:	796c626d 	stmdbvc	ip!, {r0, r2, r3, r5, r6, r9, sp, lr}^
    9834:	0000000a 	andeq	r0, r0, sl
    9838:	64253d75 	strtvs	r3, [r5], #-3445	; 0xd75
    983c:	0000000a 	andeq	r0, r0, sl
    9840:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9844:	73253a43 	teqvc	r5, #274432	; 0x43000
    9848:	3a73253a 	bcc	1cd2d38 <__bss_end__+0x1cc8a30>
    984c:	753a6425 	ldrvc	r6, [sl, #-1061]!	; 0x425
    9850:	32313d3d 	eorscc	r3, r1, #3904	; 0xf40
    9854:	0000000a 	andeq	r0, r0, sl
    9858:	65742d32 	ldrbvs	r2, [r4, #-3378]!	; 0xd32
    985c:	632e7473 	teqvs	lr, #1929379840	; 0x73000000
    9860:	00000000 	andeq	r0, r0, r0
    9864:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9868:	73253a43 	teqvc	r5, #274432	; 0x43000
    986c:	3a73253a 	bcc	1cd2d5c <__bss_end__+0x1cc8a54>
    9870:	753a6425 	ldrvc	r6, [sl, #-1061]!	; 0x425
    9874:	78303d3d 	ldmdavc	r0!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
    9878:	64656566 	strbtvs	r6, [r5], #-1382	; 0x566
    987c:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
    9880:	0000000a 	andeq	r0, r0, sl
    9884:	74726170 	ldrbtvc	r6, [r2], #-368	; 0x170
    9888:	53203a30 	teqpl	r0, #48, 20	; 0x30000
    988c:	45434355 	strbmi	r4, [r3, #-853]	; 0x355
    9890:	0a215353 	beq	85e5e4 <__bss_end__+0x8542dc>
    9894:	00000000 	andeq	r0, r0, r0
    9898:	74726170 	ldrbtvc	r6, [r2], #-368	; 0x170
    989c:	61203a31 	teqvs	r0, r1, lsr sl
    98a0:	74756f62 	ldrbtvc	r6, [r5], #-3938	; 0xf62
    98a4:	206f7420 	rsbcs	r7, pc, r0, lsr #8
    98a8:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0x574
    98ac:	67657220 	strbvs	r7, [r5, -r0, lsr #4]!
    98b0:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0x369
    98b4:	61732072 	cmnvs	r3, r2, ror r0
    98b8:	676e6976 			; <UNDEFINED> instruction: 0x676e6976
    98bc:	0000000a 	andeq	r0, r0, sl
    98c0:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    98c4:	73253a43 	teqvc	r5, #274432	; 0x43000
    98c8:	3a73253a 	bcc	1cd2db8 <__bss_end__+0x1cc8ab0>
    98cc:	533a6425 	teqpl	sl, #620756992	; 0x25000000
    98d0:	6c756f68 	ldclvs	15, cr6, [r5], #-416	; 0xfffffe60
    98d4:	6f6e2064 	svcvs	0x006e2064
    98d8:	65722074 	ldrbvs	r2, [r2, #-116]!	; 0x74
    98dc:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
    98e0:	00000a0a 	andeq	r0, r0, sl, lsl #20

000098e4 <__FUNCTION__.4172>:
    98e4:	6d655f51 	stclvs	15, cr5, [r5, #-324]!	; 0xfffffebc
    98e8:	00797470 	rsbseq	r7, r9, r0, ror r4

000098ec <__FUNCTION__.4176>:
    98ec:	6f705f51 	svcvs	0x00705f51
    98f0:	00000070 	andeq	r0, r0, r0, ror r0

000098f4 <__FUNCTION__.4204>:
    98f4:	615f6874 	cmpvs	pc, r4, ror r8	; <UNPREDICTABLE>
    98f8:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    98fc:	00000000 	andeq	r0, r0, r0

00009900 <__FUNCTION__.4239>:
    9900:	5f697072 	svcpl	0x00697072
    9904:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    9908:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    990c:	6568635f 	strbvs	r6, [r8, #-863]!	; 0x35f
    9910:	00006b63 	andeq	r6, r0, r3, ror #22

00009914 <__FUNCTION__.4243>:
    9914:	5f697072 	svcpl	0x00697072
    9918:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    991c:	68635f6b 	stmdavs	r3!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    9920:	006b6365 	rsbeq	r6, fp, r5, ror #6

00009924 <__FUNCTION__.4247>:
    9924:	5f697072 	svcpl	0x00697072
    9928:	6e696f6a 	cdpvs	15, 6, cr6, cr9, cr10, {3}
    992c:	00000000 	andeq	r0, r0, r0

00009930 <__FUNCTION__.4251>:
    9930:	5f697072 	svcpl	0x00697072
    9934:	63617865 	cmnvs	r1, #6619136	; 0x650000
    9938:	6c735f74 	ldclvs	15, cr5, [r3], #-464	; 0xfffffe30
    993c:	00706565 	rsbseq	r6, r0, r5, ror #10
    9940:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9944:	73253a43 	teqvc	r5, #274432	; 0x43000
    9948:	3a73253a 	bcc	1cd2e38 <__bss_end__+0x1cc8b30>
    994c:	513a6425 	teqpl	sl, r5, lsr #8
    9950:	6c656e5f 	stclvs	14, cr6, [r5], #-380	; 0xfffffe84
    9954:	71286d65 	teqvc	r8, r5, ror #26
    9958:	3d3d2029 	ldccc	0, cr2, [sp, #-164]!	; 0xffffff5c
    995c:	000a3020 	andeq	r3, sl, r0, lsr #32
    9960:	00682e51 	rsbeq	r2, r8, r1, asr lr
    9964:	4f525245 	svcmi	0x00525245
    9968:	73253a52 	teqvc	r5, #335872	; 0x52000
    996c:	3a73253a 	bcc	1cd2e5c <__bss_end__+0x1cc8b54>
    9970:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9974:	534c4146 	movtpl	r4, #49478	; 0xc146
    9978:	213c2845 	teqcs	ip, r5, asr #16
    997c:	743e2d71 	ldrtvc	r2, [lr], #-3441	; 0xd71
    9980:	3e6c6961 	cdpcc	9, 6, cr6, cr12, cr1, {3}
    9984:	69203a29 	stmdbvs	r0!, {r0, r3, r5, r9, fp, ip, sp}
    9988:	6c61766e 	stclvs	6, cr7, [r1], #-440	; 0xfffffe48
    998c:	51206469 	teqpl	r0, r9, ror #8
    9990:	0000000a 	andeq	r0, r0, sl
    9994:	4f525245 	svcmi	0x00525245
    9998:	73253a52 	teqvc	r5, #335872	; 0x52000
    999c:	3a73253a 	bcc	1cd2e8c <__bss_end__+0x1cc8b84>
    99a0:	203a6425 	eorscs	r6, sl, r5, lsr #8
    99a4:	534c4146 	movtpl	r4, #49478	; 0xc146
    99a8:	713c2845 	teqvc	ip, r5, asr #16
    99ac:	203a293e 	eorscs	r2, sl, lr, lsr r9
    99b0:	20646162 	rsbcs	r6, r4, r2, ror #2
    99b4:	75706e69 	ldrbvc	r6, [r0, #-3689]!	; 0xe69
    99b8:	00000a74 	andeq	r0, r0, r4, ror sl
    99bc:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    99c0:	73253a43 	teqvc	r5, #274432	; 0x43000
    99c4:	3a73253a 	bcc	1cd2eb4 <__bss_end__+0x1cc8bac>
    99c8:	513a6425 	teqpl	sl, r5, lsr #8
    99cc:	706d655f 	rsbvc	r6, sp, pc, asr r5
    99d0:	71287974 	teqvc	r8, r4, ror r9
    99d4:	00000a29 	andeq	r0, r0, r9, lsr #20
    99d8:	4f525245 	svcmi	0x00525245
    99dc:	73253a52 	teqvc	r5, #335872	; 0x52000
    99e0:	3a73253a 	bcc	1cd2ed0 <__bss_end__+0x1cc8bc8>
    99e4:	203a6425 	eorscs	r6, sl, r5, lsr #8
    99e8:	534c4146 	movtpl	r4, #49478	; 0xc146
    99ec:	283c2845 	ldmdacs	ip!, {r0, r2, r6, fp, sp}
    99f0:	6e752828 	cdpvs	8, 7, cr2, cr5, cr8, {1}
    99f4:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
    99f8:	28296465 	stmdacs	r9!, {r0, r2, r5, r6, sl, sp, lr}
    99fc:	3e2d7426 	cdpcc	4, 2, cr7, cr13, cr6, {1}
    9a00:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    9a04:	5d305b6b 	fldmdbxpl	r0!, {d5-d57}	;@ Deprecated
    9a08:	28252929 	stmdacs	r5!, {r0, r3, r5, r8, fp, sp}
    9a0c:	3d202938 	stccc	9, cr2, [r0, #-224]!	; 0xffffff20
    9a10:	2930203d 	ldmdbcs	r0!, {r0, r2, r3, r4, r5, sp}
    9a14:	203a293e 	eorscs	r2, sl, lr, lsr r9
    9a18:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    9a1c:	756d206b 	strbvc	r2, [sp, #-107]!	; 0x6b
    9a20:	62207473 	eorvs	r7, r0, #1929379840	; 0x73000000
    9a24:	2d382065 	ldccs	0, cr2, [r8, #-404]!	; 0xfffffe6c
    9a28:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
    9a2c:	696c6120 	stmdbvs	ip!, {r5, r8, sp, lr}^
    9a30:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
    9a34:	00000a21 	andeq	r0, r0, r1, lsr #20
    9a38:	2d697072 	stclcs	0, cr7, [r9, #-456]!	; 0xfffffe38
    9a3c:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
    9a40:	632e6461 	teqvs	lr, #1627389952	; 0x61000000
    9a44:	00000000 	andeq	r0, r0, r0
    9a48:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9a4c:	73253a43 	teqvc	r5, #274432	; 0x43000
    9a50:	3a73253a 	bcc	1cd2f40 <__bss_end__+0x1cc8c38>
    9a54:	733a6425 	teqvc	sl, #620756992	; 0x25000000
    9a58:	61726f74 	cmnvs	r2, r4, ror pc
    9a5c:	6c206567 	cfstr32vs	mvfx6, [r0], #-412	; 0xfffffe64
    9a60:	3a6b6165 	bcc	1ae1ffc <__bss_end__+0x1ad7cf4>
    9a64:	6f687320 	svcvs	0x00687320
    9a68:	20646c75 	rsbcs	r6, r4, r5, ror ip
    9a6c:	65766168 	ldrbvs	r6, [r6, #-360]!	; 0x168
    9a70:	20642520 	rsbcs	r2, r4, r0, lsr #10
    9a74:	65657266 	strbvs	r7, [r5, #-614]!	; 0x266
    9a78:	6f6c6220 	svcvs	0x006c6220
    9a7c:	2c736b63 	ldclcs	11, cr6, [r3], #-396	; 0xfffffe74
    9a80:	76616820 	strbtvc	r6, [r1], -r0, lsr #16
    9a84:	64252065 	strtvs	r2, [r5], #-101	; 0x65
    9a88:	75722820 	ldrbvc	r2, [r2, #-2080]!	; 0x820
    9a8c:	253d716e 	ldrcs	r7, [sp, #-366]!	; 0x16e
    9a90:	66202c64 	strtvs	r2, [r0], -r4, ror #24
    9a94:	71656572 	smcvc	22098	; 0x5652
    9a98:	2964253d 	stmdbcs	r4!, {r0, r2, r3, r4, r5, r8, sl, sp}^
    9a9c:	00000a0a 	andeq	r0, r0, sl, lsl #20
    9aa0:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
    9aa4:	203a6461 	eorscs	r6, sl, r1, ror #8
    9aa8:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    9aac:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    9ab0:	65686320 	strbvs	r6, [r8, #-800]!	; 0x320
    9ab4:	70206b63 	eorvc	r6, r0, r3, ror #22
    9ab8:	65737361 	ldrbvs	r7, [r3, #-865]!	; 0x361
    9abc:	00000a64 	andeq	r0, r0, r4, ror #20
    9ac0:	74697072 	strbtvc	r7, [r9], #-114	; 0x72
    9ac4:	61657268 	cmnvs	r5, r8, ror #4
    9ac8:	203a7364 	eorscs	r7, sl, r4, ror #6
    9acc:	656e6f64 	strbvs	r6, [lr, #-3940]!	; 0xf64
    9ad0:	74697720 	strbtvc	r7, [r9], #-1824	; 0x720
    9ad4:	6c612068 	stclvs	0, cr2, [r1], #-416	; 0xfffffe60
    9ad8:	6874206c 	ldmdavs	r4!, {r2, r3, r5, r6, sp}^
    9adc:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
    9ae0:	72202173 	eorvc	r2, r0, #-1073741796	; 0xc000001c
    9ae4:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
    9ae8:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
    9aec:	0000000a 	andeq	r0, r0, sl
    9af0:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9af4:	73253a43 	teqvc	r5, #274432	; 0x43000
    9af8:	3a73253a 	bcc	1cd2fe8 <__bss_end__+0x1cc8ce0>
    9afc:	693a6425 	ldmdbvs	sl!, {r0, r2, r5, sl, sp, lr}
    9b00:	656c706d 	strbvs	r7, [ip, #-109]!	; 0x6d
    9b04:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
    9b08:	69687420 	stmdbvs	r8!, {r5, sl, ip, sp, lr}^
    9b0c:	75662073 	strbvc	r2, [r6, #-115]!	; 0x73
    9b10:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    9b14:	0a216e6f 	beq	8654d8 <__bss_end__+0x85b1d0>
    9b18:	0000000a 	andeq	r0, r0, sl

00009b1c <__FUNCTION__.4202>:
    9b1c:	705f7163 	subsvc	r7, pc, r3, ror #2
    9b20:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    9b24:	00000000 	andeq	r0, r0, r0

00009b28 <__FUNCTION__.4206>:
    9b28:	6f5f7163 	svcvs	0x005f7163
    9b2c:	0000006b 	andeq	r0, r0, fp, rrx

00009b30 <__FUNCTION__.4211>:
    9b30:	695f7163 	ldmdbvs	pc, {r0, r1, r5, r6, r8, ip, sp, lr}^	; <UNPREDICTABLE>
    9b34:	0074696e 	rsbseq	r6, r4, lr, ror #18

00009b38 <__FUNCTION__.4225>:
    9b38:	705f7163 	subsvc	r7, pc, r3, ror #2
    9b3c:	5f6b6565 	svcpl	0x006b6565
    9b40:	0000006e 	andeq	r0, r0, lr, rrx

00009b44 <__FUNCTION__.4250>:
    9b44:	705f7163 	subsvc	r7, pc, r3, ror #2
    9b48:	5f687375 	svcpl	0x00687375
    9b4c:	0000006e 	andeq	r0, r0, lr, rrx
    9b50:	253a7325 	ldrcs	r7, [sl, #-805]!	; 0x325
    9b54:	64253a73 	strtvs	r3, [r5], #-2675	; 0xa73
    9b58:	2071633a 	rsbscs	r6, r1, sl, lsr r3
    9b5c:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    9b60:	68203a74 	stmdavs	r0!, {r2, r4, r5, r6, r9, fp, ip, sp}
    9b64:	3d646165 	stfcce	f6, [r4, #-404]!	; 0xfffffe6c
    9b68:	202c6425 	eorcs	r6, ip, r5, lsr #8
    9b6c:	6c696174 	stfvse	f6, [r9], #-464	; 0xfffffe30
    9b70:	2c64253d 	cfstr64cs	mvdx2, [r4], #-244	; 0xffffff0c
    9b74:	6c656e20 	stclvs	14, cr6, [r5], #-128	; 0xffffff80
    9b78:	253d6d65 	ldrcs	r6, [sp, #-3429]!	; 0xd65
    9b7c:	65202c64 	strvs	r2, [r0, #-3172]!	; 0xc64
    9b80:	7974706d 	ldmdbvc	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    9b84:	0a64253d 	beq	1913080 <__bss_end__+0x1908d78>
    9b88:	00000000 	andeq	r0, r0, r0
    9b8c:	63726963 	cmnvs	r2, #1622016	; 0x18c000
    9b90:	72616c75 	rsbvc	r6, r1, #29952	; 0x7500
    9b94:	0000632e 	andeq	r6, r0, lr, lsr #6
    9b98:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9b9c:	73253a43 	teqvc	r5, #274432	; 0x43000
    9ba0:	3a73253a 	bcc	1cd3090 <__bss_end__+0x1cc8d88>
    9ba4:	663a6425 	ldrtvs	r6, [sl], -r5, lsr #8
    9ba8:	65636e65 	strbvs	r6, [r3, #-3685]!	; 0xe65
    9bac:	20736920 	rsbscs	r6, r3, r0, lsr #18
    9bb0:	72726f63 	rsbsvc	r6, r2, #396	; 0x18c
    9bb4:	65747075 	ldrbvs	r7, [r4, #-117]!	; 0x75
    9bb8:	000a0a64 	andeq	r0, sl, r4, ror #20
    9bbc:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9bc0:	73253a43 	teqvc	r5, #274432	; 0x43000
    9bc4:	3a73253a 	bcc	1cd30b4 <__bss_end__+0x1cc8dac>
    9bc8:	633a6425 	teqvs	sl, #620756992	; 0x25000000
    9bcc:	6d655f71 	stclvs	15, cr5, [r5, #-452]!	; 0xfffffe3c
    9bd0:	28797470 	ldmdacs	r9!, {r4, r5, r6, sl, ip, sp, lr}^
    9bd4:	000a2963 	andeq	r2, sl, r3, ror #18
    9bd8:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9bdc:	73253a43 	teqvc	r5, #274432	; 0x43000
    9be0:	3a73253a 	bcc	1cd30d0 <__bss_end__+0x1cc8dc8>
    9be4:	213a6425 	teqcs	sl, r5, lsr #8
    9be8:	665f7163 	ldrbvs	r7, [pc], -r3, ror #2
    9bec:	286c6c75 	stmdacs	ip!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    9bf0:	000a2963 	andeq	r2, sl, r3, ror #18
    9bf4:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9bf8:	73253a43 	teqvc	r5, #274432	; 0x43000
    9bfc:	3a73253a 	bcc	1cd30ec <__bss_end__+0x1cc8de4>
    9c00:	633a6425 	teqvs	sl, #620756992	; 0x25000000
    9c04:	656e5f71 	strbvs	r5, [lr, #-3953]!	; 0xf71
    9c08:	286d656c 	stmdacs	sp!, {r2, r3, r5, r6, r8, sl, sp, lr}^
    9c0c:	3d202963 	stccc	9, cr2, [r0, #-396]!	; 0xfffffe74
    9c10:	0a30203d 	beq	c11d0c <__bss_end__+0xc07a04>
    9c14:	00000000 	andeq	r0, r0, r0
    9c18:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9c1c:	73253a43 	teqvc	r5, #274432	; 0x43000
    9c20:	3a73253a 	bcc	1cd3110 <__bss_end__+0x1cc8e08>
    9c24:	633a6425 	teqvs	sl, #620756992	; 0x25000000
    9c28:	6f705f71 	svcvs	0x00705f71
    9c2c:	6f6e5f70 	svcvs	0x006e5f70
    9c30:	6f6c626e 	svcvs	0x006c626e
    9c34:	63286b63 	teqvs	r8, #101376	; 0x18c00
    9c38:	2965262c 	stmdbcs	r5!, {r2, r3, r5, r9, sl, sp}^
    9c3c:	203d3d20 	eorscs	r3, sp, r0, lsr #26
    9c40:	26262030 			; <UNDEFINED> instruction: 0x26262030
    9c44:	3d206520 	cfstr32cc	mvfx6, [r0, #-128]!	; 0xffffff80
    9c48:	7830203d 	ldmdavc	r0!, {r0, r2, r3, r4, r5, sp}
    9c4c:	000a3231 	andeq	r3, sl, r1, lsr r2
    9c50:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9c54:	73253a43 	teqvc	r5, #274432	; 0x43000
    9c58:	3a73253a 	bcc	1cd3148 <__bss_end__+0x1cc8e40>
    9c5c:	733a6425 	teqvc	sl, #620756992	; 0x25000000
    9c60:	3d3d207a 	ldccc	0, cr2, [sp, #-488]!	; 0xfffffe18
    9c64:	5f716320 	svcpl	0x00716320
    9c68:	656c656e 	strbvs	r6, [ip, #-1390]!	; 0x56e
    9c6c:	2963286d 	stmdbcs	r3!, {r0, r2, r3, r5, r6, fp, sp}^
    9c70:	0000000a 	andeq	r0, r0, sl
    9c74:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9c78:	73253a43 	teqvc	r5, #274432	; 0x43000
    9c7c:	3a73253a 	bcc	1cd316c <__bss_end__+0x1cc8e64>
    9c80:	6e3a6425 	cdpvs	4, 3, cr6, cr10, cr5, {1}
    9c84:	6820746f 	stmdavs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
    9c88:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    9c8c:	20676e69 	rsbcs	r6, r7, r9, ror #28
    9c90:	73696874 	cmnvc	r9, #116, 16	; 0x740000
    9c94:	00000a0a 	andeq	r0, r0, sl, lsl #20
    9c98:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9c9c:	73253a43 	teqvc	r5, #274432	; 0x43000
    9ca0:	3a73253a 	bcc	1cd3190 <__bss_end__+0x1cc8e88>
    9ca4:	213a6425 	teqcs	sl, r5, lsr #8
    9ca8:	655f7163 	ldrbvs	r7, [pc, #-355]	; 9b4d <__FUNCTION__.4250+0x9>
    9cac:	7974706d 	ldmdbvc	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    9cb0:	0a296328 	beq	a62958 <__bss_end__+0xa58650>
    9cb4:	00000000 	andeq	r0, r0, r0

00009cb8 <__FUNCTION__.4185>:
    9cb8:	74696d65 	strbtvc	r6, [r9], #-3429	; 0xd65
    9cbc:	00000000 	andeq	r0, r0, r0

00009cc0 <__FUNCTION__.4133>:
    9cc0:	5f697072 	svcpl	0x00697072
    9cc4:	5f746573 	svcpl	0x00746573
    9cc8:	7074756f 	rsbsvc	r7, r4, pc, ror #10
    9ccc:	00007475 	andeq	r7, r0, r5, ror r4

00009cd0 <__FUNCTION__.4207>:
    9cd0:	705f6176 	subsvc	r6, pc, r6, ror r1	; <UNPREDICTABLE>
    9cd4:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    9cd8:	0000006b 	andeq	r0, r0, fp, rrx
    9cdc:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9ce0:	73253a43 	teqvc	r5, #274432	; 0x43000
    9ce4:	3a73253a 	bcc	1cd31d4 <__bss_end__+0x1cc8ecc>
    9ce8:	303a6425 	eorscc	r6, sl, r5, lsr #8
    9cec:	0000000a 	andeq	r0, r0, sl
    9cf0:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    9cf4:	2d61762f 	stclcs	6, cr7, [r1, #-188]!	; 0xffffff44
    9cf8:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    9cfc:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
    9d00:	00000000 	andeq	r0, r0, r0
    9d04:	33323130 	teqcc	r2, #48, 2
    9d08:	37363534 			; <UNDEFINED> instruction: 0x37363534
    9d0c:	00003938 	andeq	r3, r0, r8, lsr r9
    9d10:	33323130 	teqcc	r2, #48, 2
    9d14:	37363534 			; <UNDEFINED> instruction: 0x37363534
    9d18:	62613938 	rsbvs	r3, r1, #56, 18	; 0xe0000
    9d1c:	66656463 	strbtvs	r6, [r5], -r3, ror #8
    9d20:	00000000 	andeq	r0, r0, r0
    9d24:	00003130 	andeq	r3, r0, r0, lsr r1
    9d28:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9d2c:	73253a43 	teqvc	r5, #274432	; 0x43000
    9d30:	3a73253a 	bcc	1cd3220 <__bss_end__+0x1cc8f18>
    9d34:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    9d38:	5f637475 	svcpl	0x00637475
    9d3c:	000a7066 	andeq	r7, sl, r6, rrx
    9d40:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9d44:	73253a43 	teqvc	r5, #274432	; 0x43000
    9d48:	3a73253a 	bcc	1cd3238 <__bss_end__+0x1cc8f30>
    9d4c:	773a6425 	ldrvc	r6, [sl, -r5, lsr #8]!
    9d50:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
    9d54:	33203c20 	teqcc	r0, #32, 24	; 0x2000
    9d58:	00000a32 	andeq	r0, r0, r2, lsr sl
    9d5c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9d60:	73253a43 	teqvc	r5, #274432	; 0x43000
    9d64:	3a73253a 	bcc	1cd3254 <__bss_end__+0x1cc8f4c>
    9d68:	663a6425 	ldrtvs	r6, [sl], -r5, lsr #8
    9d6c:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xf6c
    9d70:	746f6e20 	strbtvc	r6, [pc], #-3616	; 9d78 <__FUNCTION__.4207+0xa8>
    9d74:	616e6520 	cmnvs	lr, r0, lsr #10
    9d78:	64656c62 	strbtvs	r6, [r5], #-3170	; 0xc62
    9d7c:	0a212121 	beq	852208 <__bss_end__+0x847f00>
    9d80:	00000000 	andeq	r0, r0, r0
    9d84:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9d88:	73253a43 	teqvc	r5, #274432	; 0x43000
    9d8c:	3a73253a 	bcc	1cd327c <__bss_end__+0x1cc8f74>
    9d90:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    9d94:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    9d98:	6e203a6b 	vnmulvs.f32	s6, s0, s23
    9d9c:	6820746f 	stmdavs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
    9da0:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    9da4:	20676e69 	rsbcs	r6, r7, r9, ror #28
    9da8:	63657073 	cmnvs	r5, #115	; 0x73
    9dac:	65696669 	strbvs	r6, [r9, #-1641]!	; 0x669
    9db0:	25272072 	strcs	r2, [r7, #-114]!	; 0x72
    9db4:	0a0a2763 	beq	293b48 <__bss_end__+0x289840>
    9db8:	00000000 	andeq	r0, r0, r0
    9dbc:	454e4f44 	strbmi	r4, [lr, #-3908]	; 0xf44
    9dc0:	0a212121 	beq	85224c <__bss_end__+0x847f44>
    9dc4:	00000000 	andeq	r0, r0, r0

00009dc8 <__FUNCTION__.4129>:
    9dc8:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    9dcc:	00636f6c 	rsbeq	r6, r3, ip, ror #30

00009dd0 <__FUNCTION__.4136>:
    9dd0:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    9dd4:	5f636f6c 	svcpl	0x00636f6c
    9dd8:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    9ddc:	0064656e 	rsbeq	r6, r4, lr, ror #10

00009de0 <__FUNCTION__.4141>:
    9de0:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    9de4:	5f636f6c 	svcpl	0x00636f6c
    9de8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    9dec:	00000000 	andeq	r0, r0, r0
    9df0:	4f525245 	svcmi	0x00525245
    9df4:	73253a52 	teqvc	r5, #335872	; 0x52000
    9df8:	3a73253a 	bcc	1cd32e8 <__bss_end__+0x1cc8fe0>
    9dfc:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9e00:	534c4146 	movtpl	r4, #49478	; 0xc146
    9e04:	693c2845 	ldmdbvs	ip!, {r0, r2, r6, fp, sp}
    9e08:	5f74696e 	svcpl	0x0074696e
    9e0c:	3a293e70 	bcc	a597d4 <__bss_end__+0xa4f4cc>
    9e10:	6c616320 	stclvs	3, cr6, [r1], #-128	; 0xffffff80
    9e14:	676e696c 	strbvs	r6, [lr, -ip, ror #18]!
    9e18:	66656220 	strbtvs	r6, [r5], -r0, lsr #4
    9e1c:	2065726f 	rsbcs	r7, r5, pc, ror #4
    9e20:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    9e24:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    9e28:	0a64657a 	beq	1923418 <__bss_end__+0x1919110>
    9e2c:	00000000 	andeq	r0, r0, r0
    9e30:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
    9e34:	6b2f6372 	blvs	be2c04 <__bss_end__+0xbd88fc>
    9e38:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    9e3c:	632e636f 	teqvs	lr, #-1140850687	; 0xbc000001
    9e40:	00000000 	andeq	r0, r0, r0
    9e44:	4f525245 	svcmi	0x00525245
    9e48:	73253a52 	teqvc	r5, #335872	; 0x52000
    9e4c:	3a73253a 	bcc	1cd333c <__bss_end__+0x1cc9034>
    9e50:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9e54:	534c4146 	movtpl	r4, #49478	; 0xc146
    9e58:	613c2845 	teqvs	ip, r5, asr #16
    9e5c:	6e67696c 	cdpvs	9, 6, cr6, cr7, cr12, {3}
    9e60:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
    9e64:	34202520 	strtcc	r2, [r0], #-1312	; 0x520
    9e68:	203d3d20 	eorscs	r3, sp, r0, lsr #26
    9e6c:	3a293e30 	bcc	a59734 <__bss_end__+0xa4f42c>
    9e70:	65772220 	ldrbvs	r2, [r7, #-544]!	; 0x220
    9e74:	20647269 	rsbcs	r7, r4, r9, ror #4
    9e78:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    9e7c:	6e656d6e 	cdpvs	13, 6, cr6, cr5, cr14, {3}
    9e80:	6e203a74 	mcrvs	10, 1, r3, cr0, cr4, {3}
    9e84:	6120746f 	teqvs	r0, pc, ror #8
    9e88:	6c756d20 	ldclvs	13, cr6, [r5], #-128	; 0xffffff80
    9e8c:	6c706974 	ldclvs	9, cr6, [r0], #-464	; 0xfffffe30
    9e90:	666f2065 	strbtvs	r2, [pc], -r5, rrx
    9e94:	22213420 	eorcs	r3, r1, #32, 8	; 0x20000000
    9e98:	0000000a 	andeq	r0, r0, sl
    9e9c:	4f525245 	svcmi	0x00525245
    9ea0:	73253a52 	teqvc	r5, #335872	; 0x52000
    9ea4:	3a73253a 	bcc	1cd3394 <__bss_end__+0x1cc908c>
    9ea8:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9eac:	534c4146 	movtpl	r4, #49478	; 0xc146
    9eb0:	213c2845 	teqcs	ip, r5, asr #16
    9eb4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    9eb8:	293e705f 	ldmdbcs	lr!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}
    9ebc:	6163203a 	cmnvs	r3, sl, lsr r0
    9ec0:	746f6e6e 	strbtvc	r6, [pc], #-3694	; 9ec8 <__FUNCTION__.4141+0xe8>
    9ec4:	696e6920 	stmdbvs	lr!, {r5, r8, fp, sp, lr}^
    9ec8:	6c616974 	stclvs	9, cr6, [r1], #-464	; 0xfffffe30
    9ecc:	20657a69 	rsbcs	r7, r5, r9, ror #20
    9ed0:	63697774 	cmnvs	r9, #116, 14	; 0x1d00000
    9ed4:	0a0a2165 	beq	292470 <__bss_end__+0x288168>
    9ed8:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss:

00009edc <__bss_start__>:
	...

00009ee8 <nalloced>:
    9ee8:	00000000 	andeq	r0, r0, r0

00009eec <cur_thread>:
    9eec:	00000000 	andeq	r0, r0, r0

00009ef0 <runq>:
	...

00009efc <scheduler_thread>:
    9efc:	00000000 	andeq	r0, r0, r0

00009f00 <buf.4133>:
	...

0000a300 <init_p>:
    a300:	00000000 	andeq	r0, r0, r0

0000a304 <heap_ptr>:
    a304:	00000000 	andeq	r0, r0, r0

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4b5a3605 	blmi	168d82c <__bss_end__+0x1683524>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	12010901 	andne	r0, r1, #16384	; 0x4000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0x404
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	22011a01 	andcs	r1, r1, #4096	; 0x1000
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__bss_end__+0x10c6a1c>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	34202955 	strtcc	r2, [r0], #-2389	; 0x955
   c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
  10:	43434700 	movtmi	r4, #14080	; 0x3700
  14:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
  18:	5420554e 	strtpl	r5, [r0], #-1358	; 0x54e
  1c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  20:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
  24:	6d724120 	ldfvse	f4, [r2, #-128]!	; 0xffffff80
  28:	626d4520 	rsbvs	r4, sp, #32, 10	; 0x8000000
  2c:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
  30:	72502064 	subsvc	r2, r0, #100	; 0x64
  34:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
  38:	73726f73 	cmnvc	r2, #460	; 0x1cc
  3c:	322d3720 	eorcc	r3, sp, #32, 14	; 0x800000
  40:	2d383130 	ldfcss	f3, [r8, #-192]!	; 0xffffff40
  44:	752d3371 	strvc	r3, [sp, #-881]!	; 0x371
  48:	74616470 	strbtvc	r6, [r1], #-1136	; 0x470
  4c:	37202965 	strcc	r2, [r0, -r5, ror #18]!
  50:	312e332e 	teqcc	lr, lr, lsr #6
  54:	31303220 	teqcc	r0, r0, lsr #4
  58:	32363038 	eorscc	r3, r6, #56	; 0x38
  5c:	72282032 	eorvc	r2, r8, #50	; 0x32
  60:	61656c65 	cmnvs	r5, r5, ror #24
  64:	20296573 	eorcs	r6, r9, r3, ror r5
  68:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  6c:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
  70:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
  74:	2d372d64 	ldccs	13, cr2, [r7, #-400]!	; 0xfffffe70
  78:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  7c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  80:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  84:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  88:	39313632 	ldmdbcc	r1!, {r1, r4, r5, r9, sl, ip, sp}
  8c:	005d3730 	subseq	r3, sp, r0, lsr r7

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000004ef 	andeq	r0, r0, pc, ror #9
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000029 	andeq	r0, r0, r9, lsr #32
      10:	00000001 	andeq	r0, r0, r1
      14:	0000b300 	andeq	fp, r0, r0, lsl #6
      18:	00801000 	addeq	r1, r0, r0
      1c:	0001d400 	andeq	sp, r1, r0, lsl #8
      20:	00000000 	andeq	r0, r0, r0
      24:	05040200 	streq	r0, [r4, #-512]	; 0x200
      28:	00746e69 	rsbseq	r6, r4, r9, ror #28
      2c:	54070403 	strpl	r0, [r7], #-1027	; 0x403
      30:	03000001 	movweq	r0, #1
      34:	009a0601 	addseq	r0, sl, r1, lsl #12
      38:	02030000 	andeq	r0, r3, #0
      3c:	00019505 	andeq	r9, r1, r5, lsl #10
      40:	05040300 	streq	r0, [r4, #-768]	; 0x300
      44:	0000017c 	andeq	r0, r0, ip, ror r1
      48:	77050803 	strvc	r0, [r5, -r3, lsl #16]
      4c:	03000001 	movweq	r0, #1
      50:	00980801 	addseq	r0, r8, r1, lsl #16
      54:	02030000 	andeq	r0, r3, #0
      58:	00010e07 	andeq	r0, r1, r7, lsl #28
      5c:	01ce0400 	biceq	r0, lr, r0, lsl #8
      60:	34030000 	strcc	r0, [r3], #-0
      64:	00000068 	andeq	r0, r0, r8, rrx
      68:	4f070403 	svcmi	0x00070403
      6c:	03000001 	movweq	r0, #1
      70:	014a0708 	cmpeq	sl, r8, lsl #14
      74:	04030000 	streq	r0, [r3], #-0
      78:	00016e07 	andeq	r6, r1, r7, lsl #28
      7c:	03040500 	movweq	r0, #17664	; 0x4500
      80:	00a10801 	adceq	r0, r1, r1, lsl #16
      84:	04060000 	streq	r0, [r6], #-0
      88:	0000008c 	andeq	r0, r0, ip, lsl #1
      8c:	00007f07 	andeq	r7, r0, r7, lsl #30
      90:	007f0800 	rsbseq	r0, pc, r0, lsl #16
      94:	00a10000 	adceq	r0, r1, r0
      98:	76090000 	strvc	r0, [r9], -r0
      9c:	07000000 	streq	r0, [r0, -r0]
      a0:	01850a00 	orreq	r0, r5, r0, lsl #20
      a4:	20500000 	subscs	r0, r0, r0
      a8:	00f62502 	rscseq	r2, r6, r2, lsl #10
      ac:	3c0b0000 	stccc	0, cr0, [fp], {-0}
      b0:	02000001 	andeq	r0, r0, #1
      b4:	0000f627 	andeq	pc, r0, r7, lsr #12
      b8:	090b0000 	stmdbeq	fp, {}	; <UNPREDICTABLE>
      bc:	02000000 	andeq	r0, r0, #0
      c0:	00010629 	andeq	r0, r1, r9, lsr #12
      c4:	740c4000 	strvc	r4, [ip], #-0
      c8:	02006469 	andeq	r6, r0, #1761607680	; 0x69000000
      cc:	00005d2a 	andeq	r5, r0, sl, lsr #26
      d0:	660c4400 	strvs	r4, [ip], -r0, lsl #8
      d4:	2c02006e 	stccs	0, cr0, [r2], {110}	; 0x6e
      d8:	00000117 	andeq	r0, r0, r7, lsl r1
      dc:	72610c48 	rsbvc	r0, r1, #72, 24	; 0x4800
      e0:	2d020067 	stccs	0, cr0, [r2, #-412]	; 0xfffffe64
      e4:	0000007d 	andeq	r0, r0, sp, ror r0
      e8:	00880b4c 	addeq	r0, r8, ip, asr #22
      ec:	2f020000 	svccs	0x00020000
      f0:	0000011d 	andeq	r0, r0, sp, lsl r1
      f4:	5d080050 	stcpl	0, cr0, [r8, #-320]	; 0xfffffec0
      f8:	06000000 	streq	r0, [r0], -r0
      fc:	09000001 	stmdbeq	r0, {r0}
     100:	00000076 	andeq	r0, r0, r6, ror r0
     104:	0406000f 	streq	r0, [r6], #-15
     108:	000000a1 	andeq	r0, r0, r1, lsr #1
     10c:	0001170d 	andeq	r1, r1, sp, lsl #14
     110:	007d0e00 	rsbseq	r0, sp, r0, lsl #28
     114:	06000000 	streq	r0, [r0], -r0
     118:	00010c04 	andeq	r0, r1, r4, lsl #24
     11c:	005d0800 	subseq	r0, sp, r0, lsl #16
     120:	012e0000 	teqeq	lr, r0
     124:	760f0000 	strvc	r0, [pc], -r0
     128:	ff000000 			; <UNDEFINED> instruction: 0xff000000
     12c:	61040007 	tstvs	r4, r7
     130:	02000001 	andeq	r0, r0, #1
     134:	0000a130 	andeq	sl, r0, r0, lsr r1
     138:	01b11000 			; <UNDEFINED> instruction: 0x01b11000
     13c:	11010000 	mrsne	r0, (UNDEF: 1)
     140:	00008010 	andeq	r8, r0, r0, lsl r0
     144:	000000a0 	andeq	r0, r0, r0, lsr #1
     148:	01f79c01 	mvnseq	r9, r1, lsl #24
     14c:	90110000 	andsls	r0, r1, r0
     150:	01000001 	tsteq	r0, r1
     154:	0001f711 	andeq	pc, r1, r1, lsl r7	; <UNPREDICTABLE>
     158:	00000000 	andeq	r0, r0, r0
     15c:	01211200 	teqeq	r1, r0, lsl #4
     160:	020d0000 	andeq	r0, sp, #0
     164:	6f130000 	svcvs	0x00130000
     168:	01006666 	tsteq	r0, r6, ror #12
     16c:	00002c15 	andeq	r2, r0, r5, lsl ip
     170:	6c910200 	lfmvs	f0, 4, [r1], {0}
     174:	00802414 	addeq	r2, r0, r4, lsl r4
     178:	00003c00 	andeq	r3, r0, r0, lsl #24
     17c:	0001a500 	andeq	sl, r1, r0, lsl #10
     180:	00721500 	rsbseq	r1, r2, r0, lsl #10
     184:	00251601 	eoreq	r1, r5, r1, lsl #12
     188:	002c0000 	eoreq	r0, ip, r0
     18c:	48160000 	ldmdami	r6, {}	; <UNPREDICTABLE>
     190:	7d000080 	stcvc	0, cr0, [r0, #-512]	; 0xfffffe00
     194:	17000004 	strne	r0, [r0, -r4]
     198:	74025201 	strvc	r5, [r2], #-513	; 0x201
     19c:	50011700 	andpl	r1, r1, r0, lsl #14
     1a0:	00007602 	andeq	r7, r0, r2, lsl #12
     1a4:	80741800 	rsbshi	r1, r4, r0, lsl #16
     1a8:	047d0000 	ldrbteq	r0, [sp], #-0
     1ac:	01c10000 	biceq	r0, r1, r0
     1b0:	01170000 	tsteq	r7, r0
     1b4:	173a0151 			; <UNDEFINED> instruction: 0x173a0151
     1b8:	03055001 	movweq	r5, #20481	; 0x5001
     1bc:	000096dc 	ldrdeq	r9, [r0], -ip
     1c0:	80841800 	addhi	r1, r4, r0, lsl #16
     1c4:	047d0000 	ldrbteq	r0, [sp], #-0
     1c8:	01de0000 	bicseq	r0, lr, r0
     1cc:	01170000 	tsteq	r7, r0
     1d0:	64910251 	ldrvs	r0, [r1], #593	; 0x251
     1d4:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     1d8:	0096fc03 	addseq	pc, r6, r3, lsl #24
     1dc:	98160000 	ldmdals	r6, {}	; <UNPREDICTABLE>
     1e0:	7d000080 	stcvc	0, cr0, [r0, #-512]	; 0xfffffe00
     1e4:	17000004 	strne	r0, [r0, -r4]
     1e8:	39015101 	stmdbcc	r1, {r0, r8, ip, lr}
     1ec:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     1f0:	00972803 	addseq	r2, r7, r3, lsl #16
     1f4:	06000000 	streq	r0, [r0], -r0
     1f8:	00005d04 	andeq	r5, r0, r4, lsl #26
     1fc:	007f0800 	rsbseq	r0, pc, r0, lsl #16
     200:	020d0000 	andeq	r0, sp, #0
     204:	76090000 	strvc	r0, [r9], -r0
     208:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     20c:	01fd0700 	mvnseq	r0, r0, lsl #14
     210:	c0100000 	andsgt	r0, r0, r0
     214:	01000001 	tsteq	r0, r1
     218:	0080b01d 	addeq	fp, r0, sp, lsl r0
     21c:	00003000 	andeq	r3, r0, r0
     220:	889c0100 	ldmhi	ip, {r8}
     224:	11000002 	tstne	r0, r2
     228:	000001ac 	andeq	r0, r0, ip, lsr #3
     22c:	01f71d01 	mvnseq	r1, r1, lsl #26
     230:	004b0000 	subeq	r0, fp, r0
     234:	c4180000 	ldrgt	r0, [r8], #-0
     238:	7d000080 	stcvc	0, cr0, [r0, #-512]	; 0xfffffe00
     23c:	53000004 	movwpl	r0, #4
     240:	17000002 	strne	r0, [r0, -r2]
     244:	74025101 	strvc	r5, [r2], #-257	; 0x101
     248:	50011700 	andpl	r1, r1, r0, lsl #14
     24c:	97480305 	strbls	r0, [r8, -r5, lsl #6]
     250:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     254:	000080cc 	andeq	r8, r0, ip, asr #1
     258:	0000047d 	andeq	r0, r0, sp, ror r4
     25c:	0000026a 	andeq	r0, r0, sl, ror #4
     260:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     264:	00977c03 	addseq	r7, r7, r3, lsl #24
     268:	d4180000 	ldrle	r0, [r8], #-0
     26c:	39000080 	stmdbcc	r0, {r7}
     270:	7e000001 	cdpvc	0, 0, cr0, cr0, cr1, {0}
     274:	17000002 	strne	r0, [r0, -r2]
     278:	74025001 	strvc	r5, [r2], #-1
     27c:	d8190000 	ldmdale	r9, {}	; <UNPREDICTABLE>
     280:	93000080 	movwls	r0, #128	; 0x80
     284:	00000004 	andeq	r0, r0, r4
     288:	0000801a 	andeq	r8, r0, sl, lsl r0
     28c:	e0240100 	eor	r0, r4, r0, lsl #2
     290:	04000080 	streq	r0, [r0], #-128	; 0x80
     294:	01000001 	tsteq	r0, r1
     298:	0004789c 	muleq	r4, ip, r8
     29c:	00751300 	rsbseq	r1, r5, r0, lsl #6
     2a0:	002c2d01 	eoreq	r2, ip, r1, lsl #26
     2a4:	91020000 	mrsls	r0, (UNDEF: 2)
     2a8:	01211b74 	teqeq	r1, r4, ror fp
     2ac:	04780000 	ldrbteq	r0, [r8], #-0
     2b0:	03050000 	movweq	r0, #20480	; 0x5000
     2b4:	000096b8 			; <UNDEFINED> instruction: 0x000096b8
     2b8:	00064b1c 	andeq	r4, r6, ip, lsl fp
     2bc:	2c370100 	ldfcss	f0, [r7], #-0
     2c0:	40000000 	andmi	r0, r0, r0
     2c4:	0001ac1d 	andeq	sl, r1, sp, lsl ip
     2c8:	f7380100 			; <UNDEFINED> instruction: 0xf7380100
     2cc:	69000001 	stmdbvs	r0, {r0}
     2d0:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     2d4:	000080ec 	andeq	r8, r0, ip, ror #1
     2d8:	0000049a 	muleq	r0, sl, r4
     2dc:	0080f019 	addeq	pc, r0, r9, lsl r0	; <UNPREDICTABLE>
     2e0:	0004a100 	andeq	sl, r4, r0, lsl #2
     2e4:	80f81800 	rscshi	r1, r8, r0, lsl #16
     2e8:	047d0000 	ldrbteq	r0, [sp], #-0
     2ec:	02fc0000 	rscseq	r0, ip, #0
     2f0:	01170000 	tsteq	r7, r0
     2f4:	cc030550 	cfstr32gt	mvfx0, [r3], {80}	; 0x50
     2f8:	00000097 	muleq	r0, r7, r0
     2fc:	00810018 	addeq	r0, r1, r8, lsl r0
     300:	00047d00 	andeq	r7, r4, r0, lsl #26
     304:	00031300 	andeq	r1, r3, r0, lsl #6
     308:	50011700 	andpl	r1, r1, r0, lsl #14
     30c:	98040305 	stmdals	r4, {r0, r2, r8, r9}
     310:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     314:	0000810c 	andeq	r8, r0, ip, lsl #2
     318:	000004a8 	andeq	r0, r0, r8, lsr #9
     31c:	0000032c 	andeq	r0, r0, ip, lsr #6
     320:	01510117 	cmpeq	r1, r7, lsl r1
     324:	5001173c 	andpl	r1, r1, ip, lsr r7
     328:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     32c:	00811818 	addeq	r1, r1, r8, lsl r8
     330:	00047d00 	andeq	r7, r4, r0, lsl #26
     334:	00034300 	andeq	r4, r3, r0, lsl #6
     338:	50011700 	andpl	r1, r1, r0, lsl #14
     33c:	98380305 	ldmdals	r8!, {r0, r2, r8, r9}
     340:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     344:	00008138 	andeq	r8, r0, r8, lsr r1
     348:	0000047d 	andeq	r0, r0, sp, ror r4
     34c:	00000372 	andeq	r0, r0, r2, ror r3
     350:	02530117 	subseq	r0, r3, #-1073741819	; 0xc0000005
     354:	01173008 	tsteq	r7, r8
     358:	b8030552 	stmdalt	r3, {r1, r4, r6, r8, sl}
     35c:	17000096 			; <UNDEFINED> instruction: 0x17000096
     360:	03055101 	movweq	r5, #20737	; 0x5101
     364:	00009858 	andeq	r9, r0, r8, asr r8
     368:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     36c:	00984003 	addseq	r4, r8, r3
     370:	3c190000 	ldccc	0, cr0, [r9], {-0}
     374:	c4000081 	strgt	r0, [r0], #-129	; 0x81
     378:	18000004 	stmdane	r0, {r2}
     37c:	0000814c 	andeq	r8, r0, ip, asr #2
     380:	000004a8 	andeq	r0, r0, r8, lsr #9
     384:	00000395 	muleq	r0, r5, r3
     388:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
     38c:	01170074 	tsteq	r7, r4, ror r0
     390:	6c910250 	lfmvs	f0, 4, [r1], {80}	; 0x50
     394:	816c1800 	cmnhi	ip, r0, lsl #16
     398:	047d0000 	ldrbteq	r0, [sp], #-0
     39c:	03c40000 	biceq	r0, r4, #0
     3a0:	01170000 	tsteq	r7, r0
     3a4:	32080253 	andcc	r0, r8, #805306373	; 0x30000005
     3a8:	05520117 	ldrbeq	r0, [r2, #-279]	; 0x117
     3ac:	0096b803 	addseq	fp, r6, r3, lsl #16
     3b0:	51011700 	tstpl	r1, r0, lsl #14
     3b4:	98580305 	ldmdals	r8, {r0, r2, r8, r9}^
     3b8:	01170000 	tsteq	r7, r0
     3bc:	64030550 	strvs	r0, [r3], #-1360	; 0x550
     3c0:	00000098 	muleq	r0, r8, r0
     3c4:	00817019 	addeq	r7, r1, r9, lsl r0
     3c8:	0004c400 	andeq	ip, r4, r0, lsl #8
     3cc:	81781800 	cmnhi	r8, r0, lsl #16
     3d0:	047d0000 	ldrbteq	r0, [sp], #-0
     3d4:	03e40000 	mvneq	r0, #0
     3d8:	01170000 	tsteq	r7, r0
     3dc:	84030550 	strhi	r0, [r3], #-1360	; 0x550
     3e0:	00000098 	muleq	r0, r8, r0
     3e4:	00818018 	addeq	r8, r1, r8, lsl r0
     3e8:	00047d00 	andeq	r7, r4, r0, lsl #26
     3ec:	0003fb00 	andeq	pc, r3, r0, lsl #22
     3f0:	50011700 	andpl	r1, r1, r0, lsl #14
     3f4:	97cc0305 	strbls	r0, [ip, r5, lsl #6]
     3f8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     3fc:	0000818c 	andeq	r8, r0, ip, lsl #3
     400:	000004cb 	andeq	r0, r0, fp, asr #9
     404:	00000414 	andeq	r0, r0, r4, lsl r4
     408:	01510117 	cmpeq	r1, r7, lsl r1
     40c:	50011738 	andpl	r1, r1, r8, lsr r7
     410:	00400802 	subeq	r0, r0, r2, lsl #16
     414:	00819818 	addeq	r9, r1, r8, lsl r8
     418:	00047d00 	andeq	r7, r4, r0, lsl #26
     41c:	00042b00 	andeq	r2, r4, r0, lsl #22
     420:	50011700 	andpl	r1, r1, r0, lsl #14
     424:	98980305 	ldmls	r8, {r0, r2, r8, r9}
     428:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     42c:	000081a0 	andeq	r8, r0, r0, lsr #3
     430:	000004e5 	andeq	r0, r0, r5, ror #9
     434:	0000043f 	andeq	r0, r0, pc, lsr r4
     438:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     43c:	18000074 	stmdane	r0, {r2, r4, r5, r6}
     440:	000081b4 			; <UNDEFINED> instruction: 0x000081b4
     444:	0000047d 	andeq	r0, r0, sp, ror r4
     448:	0000046e 	andeq	r0, r0, lr, ror #8
     44c:	02530117 	subseq	r0, r3, #-1073741819	; 0xc0000005
     450:	01174208 	tsteq	r7, r8, lsl #4
     454:	b8030552 	stmdalt	r3, {r1, r4, r6, r8, sl}
     458:	17000096 			; <UNDEFINED> instruction: 0x17000096
     45c:	03055101 	movweq	r5, #20737	; 0x5101
     460:	00009858 	andeq	r9, r0, r8, asr r8
     464:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     468:	0098c003 	addseq	ip, r8, r3
     46c:	b8190000 	ldmdalt	r9, {}	; <UNPREDICTABLE>
     470:	c4000081 	strgt	r0, [r0], #-129	; 0x81
     474:	00000004 	andeq	r0, r0, r4
     478:	00009107 	andeq	r9, r0, r7, lsl #2
     47c:	043e1e00 	ldrteq	r1, [lr], #-3584	; 0xe00
     480:	27040000 	strcs	r0, [r4, -r0]
     484:	00000025 	andeq	r0, r0, r5, lsr #32
     488:	00000493 	muleq	r0, r3, r4
     48c:	0000860e 	andeq	r8, r0, lr, lsl #12
     490:	20001f00 	andcs	r1, r0, r0, lsl #30
     494:	000000a6 	andeq	r0, r0, r6, lsr #1
     498:	8e205f04 	cdphi	15, 2, cr5, cr0, cr4, {0}
     49c:	04000000 	streq	r0, [r0], #-0
     4a0:	01d72038 	bicseq	r2, r7, r8, lsr r0
     4a4:	6a040000 	bvs	1004ac <__bss_end__+0xf61a4>
     4a8:	00012e21 	andeq	r2, r1, r1, lsr #28
     4ac:	be0c0100 	adflte	f0, f4, f0
     4b0:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
     4b4:	000004be 			; <UNDEFINED> instruction: 0x000004be
     4b8:	00002c0e 	andeq	r2, r0, lr, lsl #24
     4bc:	04060000 	streq	r0, [r6], #-0
     4c0:	0000002c 	andeq	r0, r0, ip, lsr #32
     4c4:	00001e20 	andeq	r1, r0, r0, lsr #28
     4c8:	1e5c0400 	cdpne	4, 5, cr0, cr12, cr0, {0}
     4cc:	0000000e 	andeq	r0, r0, lr
     4d0:	007d6704 	rsbseq	r6, sp, r4, lsl #14
     4d4:	04e50000 	strbteq	r0, [r5], #0
     4d8:	2c0e0000 	stccs	0, cr0, [lr], {-0}
     4dc:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     4e0:	0000002c 	andeq	r0, r0, ip, lsr #32
     4e4:	019f2200 	orrseq	r2, pc, r0, lsl #4
     4e8:	0d010000 	stceq	0, cr0, [r1, #-0]
     4ec:	0001f70e 	andeq	pc, r1, lr, lsl #14
     4f0:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
     4f4:	04000008 	streq	r0, [r0], #-8
     4f8:	0001c400 	andeq	ip, r1, r0, lsl #8
     4fc:	29010400 	stmdbcs	r1, {sl}
     500:	01000000 	mrseq	r0, (UNDEF: 0)
     504:	000001fa 	strdeq	r0, [r0], -sl
     508:	000000b3 	strheq	r0, [r0], -r3
     50c:	000081e4 	andeq	r8, r0, r4, ror #3
     510:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     514:	00000132 	andeq	r0, r0, r2, lsr r1
     518:	69050402 	stmdbvs	r5, {r1, sl}
     51c:	0300746e 	movweq	r7, #1134	; 0x46e
     520:	01540704 	cmpeq	r4, r4, lsl #14
     524:	01030000 	mrseq	r0, (UNDEF: 3)
     528:	00009a06 	andeq	r9, r0, r6, lsl #20
     52c:	05020300 	streq	r0, [r2, #-768]	; 0x300
     530:	00000195 	muleq	r0, r5, r1
     534:	7c050403 	cfstrsvc	mvf0, [r5], {3}
     538:	03000001 	movweq	r0, #1
     53c:	01770508 	cmneq	r7, r8, lsl #10
     540:	01030000 	mrseq	r0, (UNDEF: 3)
     544:	00009808 	andeq	r9, r0, r8, lsl #16
     548:	07020300 	streq	r0, [r2, -r0, lsl #6]
     54c:	0000010e 	andeq	r0, r0, lr, lsl #2
     550:	0001ce04 	andeq	ip, r1, r4, lsl #28
     554:	68340400 	ldmdavs	r4!, {sl}
     558:	03000000 	movweq	r0, #0
     55c:	014f0704 	cmpeq	pc, r4, lsl #14
     560:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     564:	00014a07 	andeq	r4, r1, r7, lsl #20
     568:	07040300 	streq	r0, [r4, -r0, lsl #6]
     56c:	0000016e 	andeq	r0, r0, lr, ror #2
     570:	01030405 	tsteq	r3, r5, lsl #8
     574:	0000a108 	andeq	sl, r0, r8, lsl #2
     578:	8c040600 	stchi	6, cr0, [r4], {-0}
     57c:	07000000 	streq	r0, [r0, -r0]
     580:	0000007f 	andeq	r0, r0, pc, ror r0
     584:	00007f08 	andeq	r7, r0, r8, lsl #30
     588:	0000a100 	andeq	sl, r0, r0, lsl #2
     58c:	00760900 	rsbseq	r0, r6, r0, lsl #18
     590:	00070000 	andeq	r0, r7, r0
     594:	0001850a 	andeq	r8, r1, sl, lsl #10
     598:	03205000 	teqeq	r0, #0
     59c:	0000f625 	andeq	pc, r0, r5, lsr #12
     5a0:	013c0b00 	teqeq	ip, r0, lsl #22
     5a4:	27030000 	strcs	r0, [r3, -r0]
     5a8:	000000f6 	strdeq	r0, [r0], -r6
     5ac:	00090b00 	andeq	r0, r9, r0, lsl #22
     5b0:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
     5b4:	00000106 	andeq	r0, r0, r6, lsl #2
     5b8:	69740c40 	ldmdbvs	r4!, {r6, sl, fp}^
     5bc:	2a030064 	bcs	c0754 <__bss_end__+0xb644c>
     5c0:	0000005d 	andeq	r0, r0, sp, asr r0
     5c4:	6e660c44 	cdpvs	12, 6, cr0, cr6, cr4, {2}
     5c8:	172c0300 	strne	r0, [ip, -r0, lsl #6]!
     5cc:	48000001 	stmdami	r0, {r0}
     5d0:	6772610c 	ldrbvs	r6, [r2, -ip, lsl #2]!
     5d4:	7d2d0300 	stcvc	3, cr0, [sp, #-0]
     5d8:	4c000000 	stcmi	0, cr0, [r0], {-0}
     5dc:	0000880b 	andeq	r8, r0, fp, lsl #16
     5e0:	1d2f0300 	stcne	3, cr0, [pc, #-0]	; 5e8 <_start-0x7a18>
     5e4:	50000001 	andpl	r0, r0, r1
     5e8:	005d0800 	subseq	r0, sp, r0, lsl #16
     5ec:	01060000 	mrseq	r0, (UNDEF: 6)
     5f0:	76090000 	strvc	r0, [r9], -r0
     5f4:	0f000000 	svceq	0x00000000
     5f8:	a1040600 	tstge	r4, r0, lsl #12
     5fc:	0d000000 	stceq	0, cr0, [r0, #-0]
     600:	00000117 	andeq	r0, r0, r7, lsl r1
     604:	00007d0e 	andeq	r7, r0, lr, lsl #26
     608:	04060000 	streq	r0, [r6], #-0
     60c:	0000010c 	andeq	r0, r0, ip, lsl #2
     610:	00005d08 	andeq	r5, r0, r8, lsl #26
     614:	00012e00 	andeq	r2, r1, r0, lsl #28
     618:	00760f00 	rsbseq	r0, r6, r0, lsl #30
     61c:	07ff0000 	ldrbeq	r0, [pc, r0]!
     620:	01610400 	cmneq	r1, r0, lsl #8
     624:	30030000 	andcc	r0, r3, r0
     628:	000000a1 	andeq	r0, r0, r1, lsr #1
     62c:	0c005110 	stfeqs	f5, [r0], {16}
     630:	01680801 	cmneq	r8, r1, lsl #16
     634:	cc0b0000 	stcgt	0, cr0, [fp], {-0}
     638:	01000002 	tsteq	r0, r2
     63c:	00016809 	andeq	r6, r1, r9, lsl #16
     640:	a40b0000 	strge	r0, [fp], #-0
     644:	01000002 	tsteq	r0, r2
     648:	00016809 	andeq	r6, r1, r9, lsl #16
     64c:	630c0400 	movwvs	r0, #50176	; 0xc400
     650:	0100746e 	tsteq	r0, lr, ror #8
     654:	00002c0a 	andeq	r2, r0, sl, lsl #24
     658:	06000800 	streq	r0, [r0], -r0, lsl #16
     65c:	00012e04 	andeq	r2, r1, r4, lsl #28
     660:	5f511100 	svcpl	0x00511100
     664:	0b010074 	bleq	4083c <__bss_end__+0x36534>
     668:	00000139 	andeq	r0, r0, r9, lsr r1
     66c:	00023912 	andeq	r3, r2, r2, lsl r9
     670:	2c100100 	ldfcss	f0, [r0], {-0}
     674:	e4000000 	str	r0, [r0], #-0
     678:	08000081 	stmdaeq	r0, {r0, r7}
     67c:	01000000 	mrseq	r0, (UNDEF: 0)
     680:	0001a09c 	muleq	r1, ip, r0
     684:	00711300 	rsbseq	r1, r1, r0, lsl #6
     688:	01a01001 	moveq	r1, r1
     68c:	00870000 	addeq	r0, r7, r0
     690:	06000000 	streq	r0, [r0], -r0
     694:	00016e04 	andeq	r6, r1, r4, lsl #28
     698:	02ba1400 	adcseq	r1, sl, #0, 8
     69c:	2b010000 	blcs	406a4 <__bss_end__+0x3639c>
     6a0:	000081ec 	andeq	r8, r0, ip, ror #3
     6a4:	00000038 	andeq	r0, r0, r8, lsr r0
     6a8:	01d29c01 	bicseq	r9, r2, r1, lsl #24
     6ac:	71150000 	tstvc	r5, r0
     6b0:	a02b0100 	eorge	r0, fp, r0, lsl #2
     6b4:	01000001 	tsteq	r0, r1
     6b8:	00651550 	rsbeq	r1, r5, r0, asr r5
     6bc:	01682b01 	cmneq	r8, r1, lsl #22
     6c0:	51010000 	mrspl	r0, (UNDEF: 1)
     6c4:	01e41400 	mvneq	r1, r0, lsl #8
     6c8:	37010000 	strcc	r0, [r1, -r0]
     6cc:	00008224 	andeq	r8, r0, r4, lsr #4
     6d0:	00000028 	andeq	r0, r0, r8, lsr #32
     6d4:	01fe9c01 	mvnseq	r9, r1, lsl #24
     6d8:	71150000 	tstvc	r5, r0
     6dc:	a0370100 	eorsge	r0, r7, r0, lsl #2
     6e0:	01000001 	tsteq	r0, r1
     6e4:	00651550 	rsbeq	r1, r5, r0, asr r5
     6e8:	01683701 	cmneq	r8, r1, lsl #14
     6ec:	51010000 	mrspl	r0, (UNDEF: 1)
     6f0:	02b21400 	adcseq	r1, r2, #0, 8
     6f4:	29020000 	stmdbcs	r2, {}	; <UNPREDICTABLE>
     6f8:	0000824c 	andeq	r8, r0, ip, asr #4
     6fc:	00000018 	andeq	r0, r0, r8, lsl r0
     700:	023c9c01 	eorseq	r9, ip, #256	; 0x100
     704:	74130000 	ldrvc	r0, [r3], #-0
     708:	29020068 	stmdbcs	r2, {r3, r5, r6}
     70c:	00000168 	andeq	r0, r0, r8, ror #2
     710:	000000a8 	andeq	r0, r0, r8, lsr #1
     714:	00825c16 	addeq	r5, r2, r6, lsl ip
     718:	0001d200 	andeq	sp, r1, r0, lsl #4
     71c:	51011700 	tstpl	r1, r0, lsl #14
     720:	5001f303 	andpl	pc, r1, r3, lsl #6
     724:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     728:	009edc03 	addseq	sp, lr, r3, lsl #24
     72c:	12000000 	andne	r0, r0, #0
     730:	0000027b 	andeq	r0, r0, fp, ror r2
     734:	00251201 	eoreq	r1, r5, r1, lsl #4
     738:	82640000 	rsbhi	r0, r4, #0
     73c:	007c0000 	rsbseq	r0, ip, r0
     740:	9c010000 	stcls	0, cr0, [r1], {-0}
     744:	000002f4 	strdeq	r0, [r0], -r4
     748:	01007113 	tsteq	r0, r3, lsl r1
     74c:	0001a012 	andeq	sl, r1, r2, lsl r0
     750:	0000d400 	andeq	sp, r0, r0, lsl #8
     754:	01211800 	teqeq	r1, r0, lsl #16
     758:	02f40000 	rscseq	r0, r4, #0
     75c:	03050000 	movweq	r0, #20480	; 0x5000
     760:	000098e4 	andeq	r9, r0, r4, ror #17
     764:	00827c19 	addeq	r7, r2, r9, lsl ip
     768:	00017900 	andeq	r7, r1, r0, lsl #18
     76c:	00028500 	andeq	r8, r2, r0, lsl #10
     770:	50011700 	andpl	r1, r1, r0, lsl #14
     774:	00007402 	andeq	r7, r0, r2, lsl #8
     778:	00829819 	addeq	r9, r2, r9, lsl r8
     77c:	00085e00 	andeq	r5, r8, r0, lsl #28
     780:	0002b300 	andeq	fp, r2, r0, lsl #6
     784:	53011700 	movwpl	r1, #5888	; 0x1700
     788:	01174501 	tsteq	r7, r1, lsl #10
     78c:	e4030552 	str	r0, [r3], #-1362	; 0x552
     790:	17000098 			; <UNDEFINED> instruction: 0x17000098
     794:	03055101 	movweq	r5, #20737	; 0x5101
     798:	00009960 	andeq	r9, r0, r0, ror #18
     79c:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     7a0:	00994003 	addseq	r4, r9, r3
     7a4:	9c1a0000 	ldcls	0, cr0, [sl], {-0}
     7a8:	74000082 	strvc	r0, [r0], #-130	; 0x82
     7ac:	19000008 	stmdbne	r0, {r3}
     7b0:	000082bc 			; <UNDEFINED> instruction: 0x000082bc
     7b4:	0000085e 	andeq	r0, r0, lr, asr r8
     7b8:	000002ea 	andeq	r0, r0, sl, ror #5
     7bc:	01530117 	cmpeq	r3, r7, lsl r1
     7c0:	52011746 	andpl	r1, r1, #18350080	; 0x1180000
     7c4:	98e40305 	stmials	r4!, {r0, r2, r8, r9}^
     7c8:	01170000 	tsteq	r7, r0
     7cc:	60030551 	andvs	r0, r3, r1, asr r5
     7d0:	17000099 			; <UNDEFINED> instruction: 0x17000099
     7d4:	03055001 	movweq	r5, #20481	; 0x5001
     7d8:	00009964 	andeq	r9, r0, r4, ror #18
     7dc:	82c01a00 	sbchi	r1, r0, #0, 20
     7e0:	08740000 	ldmdaeq	r4!, {}^	; <UNPREDICTABLE>
     7e4:	07000000 	streq	r0, [r0, -r0]
     7e8:	00000091 	muleq	r0, r1, r0
     7ec:	00028d12 	andeq	r8, r2, r2, lsl sp
     7f0:	681b0100 	ldmdavs	fp, {r8}
     7f4:	e0000001 	and	r0, r0, r1
     7f8:	90000082 	andls	r0, r0, r2, lsl #1
     7fc:	01000000 	mrseq	r0, (UNDEF: 0)
     800:	0003c09c 	muleq	r3, ip, r0
     804:	00711300 	rsbseq	r1, r1, r0, lsl #6
     808:	01a01b01 	lsleq	r1, r1, #22
     80c:	01080000 	mrseq	r0, (UNDEF: 8)
     810:	21180000 	tstcs	r8, r0
     814:	d0000001 	andle	r0, r0, r1
     818:	05000003 	streq	r0, [r0, #-3]
     81c:	0098ec03 	addseq	lr, r8, r3, lsl #24
     820:	00651b00 	rsbeq	r1, r5, r0, lsl #22
     824:	01681e01 	cmneq	r8, r1, lsl #28
     828:	015b0000 	cmpeq	fp, r0
     82c:	00190000 	andseq	r0, r9, r0
     830:	5e000083 	cdppl	0, 0, cr0, cr0, cr3, {4}
     834:	69000008 	stmdbvs	r0, {r3}
     838:	17000003 	strne	r0, [r0, -r3]
     83c:	4c015301 	stcmi	3, cr5, [r1], {1}
     840:	05520117 	ldrbeq	r0, [r2, #-279]	; 0x117
     844:	0098ec03 	addseq	lr, r8, r3, lsl #24
     848:	51011700 	tstpl	r1, r0, lsl #14
     84c:	99600305 	stmdbls	r0!, {r0, r2, r8, r9}^
     850:	01170000 	tsteq	r7, r0
     854:	94030550 	strls	r0, [r3], #-1360	; 0x550
     858:	00000099 	muleq	r0, r9, r0
     85c:	0083041a 	addeq	r0, r3, sl, lsl r4
     860:	00087400 	andeq	r7, r8, r0, lsl #8
     864:	83141900 	tsthi	r4, #0, 18
     868:	023c0000 	eorseq	r0, ip, #0
     86c:	03870000 	orreq	r0, r7, #0
     870:	01170000 	tsteq	r7, r0
     874:	01f30350 	mvnseq	r0, r0, asr r3
     878:	30190050 	andscc	r0, r9, r0, asr r0
     87c:	5e000083 	cdppl	0, 0, cr0, cr0, cr3, {4}
     880:	b6000008 	strlt	r0, [r0], -r8
     884:	17000003 	strne	r0, [r0, -r3]
     888:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     88c:	52011720 	andpl	r1, r1, #32, 14	; 0x800000
     890:	98ec0305 	stmials	ip!, {r0, r2, r8, r9}^
     894:	01170000 	tsteq	r7, r0
     898:	60030551 	andvs	r0, r3, r1, asr r5
     89c:	17000099 			; <UNDEFINED> instruction: 0x17000099
     8a0:	03055001 	movweq	r5, #20481	; 0x5001
     8a4:	000099bc 			; <UNDEFINED> instruction: 0x000099bc
     8a8:	83341a00 	teqhi	r4, #0, 20
     8ac:	08740000 	ldmdaeq	r4!, {}^	; <UNPREDICTABLE>
     8b0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     8b4:	0000007f 	andeq	r0, r0, pc, ror r0
     8b8:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     8bc:	00007609 	andeq	r7, r0, r9, lsl #12
     8c0:	07000500 	streq	r0, [r0, -r0, lsl #10]
     8c4:	000003c0 	andeq	r0, r0, r0, asr #7
     8c8:	0002a912 	andeq	sl, r2, r2, lsl r9
     8cc:	681c0200 	ldmdavs	ip, {r9}
     8d0:	70000001 	andvc	r0, r0, r1
     8d4:	80000083 	andhi	r0, r0, r3, lsl #1
     8d8:	01000000 	mrseq	r0, (UNDEF: 0)
     8dc:	0004749c 	muleq	r4, ip, r4
     8e0:	00741b00 	rsbseq	r1, r4, r0, lsl #22
     8e4:	01681d02 	cmneq	r8, r2, lsl #26
     8e8:	01790000 	cmneq	r9, r0
     8ec:	21180000 	tstcs	r8, r0
     8f0:	84000001 	strhi	r0, [r0], #-1
     8f4:	05000004 	streq	r0, [r0, #-4]
     8f8:	0098f403 	addseq	pc, r8, r3, lsl #8
     8fc:	837c1900 	cmnhi	ip, #0, 18
     900:	02f90000 	rscseq	r0, r9, #0
     904:	04210000 	strteq	r0, [r1], #-0
     908:	01170000 	tsteq	r7, r0
     90c:	dc030550 	cfstr32le	mvfx0, [r3], {80}	; 0x50
     910:	0000009e 	muleq	r0, lr, r0
     914:	00839019 	addeq	r9, r3, r9, lsl r0
     918:	00087b00 	andeq	r7, r8, r0, lsl #22
     91c:	00043b00 	andeq	r3, r4, r0, lsl #22
     920:	51011700 	tstpl	r1, r0, lsl #14
     924:	01173801 	tsteq	r7, r1, lsl #16
     928:	500a0350 	andpl	r0, sl, r0, asr r3
     92c:	bc190020 	ldclt	0, cr0, [r9], {32}
     930:	5e000083 	cdppl	0, 0, cr0, cr0, cr3, {4}
     934:	6a000008 	bvs	95c <_start-0x76a4>
     938:	17000004 	strne	r0, [r0, -r4]
     93c:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     940:	52011724 	andpl	r1, r1, #36, 14	; 0x900000
     944:	98f40305 	ldmls	r4!, {r0, r2, r8, r9}^
     948:	01170000 	tsteq	r7, r0
     94c:	38030551 	stmdacc	r3, {r0, r4, r6, r8, sl}
     950:	1700009a 			; <UNDEFINED> instruction: 0x1700009a
     954:	03055001 	movweq	r5, #20481	; 0x5001
     958:	000099d8 	ldrdeq	r9, [r0], -r8
     95c:	83c01a00 	bichi	r1, r0, #0, 20
     960:	08740000 	ldmdaeq	r4!, {}^	; <UNPREDICTABLE>
     964:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     968:	0000007f 	andeq	r0, r0, pc, ror r0
     96c:	00000484 	andeq	r0, r0, r4, lsl #9
     970:	00007609 	andeq	r7, r0, r9, lsl #12
     974:	07000800 	streq	r0, [r0, -r0, lsl #16]
     978:	00000474 	andeq	r0, r0, r4, ror r4
     97c:	0001eb1c 	andeq	lr, r1, ip, lsl fp
     980:	68150200 	ldmdavs	r5, {r9}
     984:	f0000001 			; <UNDEFINED> instruction: 0xf0000001
     988:	10000083 	andne	r0, r0, r3, lsl #1
     98c:	01000000 	mrseq	r0, (UNDEF: 0)
     990:	02c31d9c 	sbceq	r1, r3, #156, 26	; 0x2700
     994:	33020000 	movwcc	r0, #8192	; 0x2000
     998:	00000168 	andeq	r0, r0, r8, ror #2
     99c:	00008400 	andeq	r8, r0, r0, lsl #8
     9a0:	00000034 	andeq	r0, r0, r4, lsr r0
     9a4:	050c9c01 	streq	r9, [ip, #-3073]	; 0xc01
     9a8:	141e0000 	ldrne	r0, [lr], #-0
     9ac:	02000002 	andeq	r0, r0, #2
     9b0:	00011733 	andeq	r1, r1, r3, lsr r7
     9b4:	0001a200 	andeq	sl, r1, r0, lsl #4
     9b8:	72611300 	rsbvc	r1, r1, #0, 6
     9bc:	33020067 	movwcc	r0, #8295	; 0x2067
     9c0:	0000007d 	andeq	r0, r0, sp, ror r0
     9c4:	000001c0 	andeq	r0, r0, r0, asr #3
     9c8:	0200741b 	andeq	r7, r0, #452984832	; 0x1b000000
     9cc:	00016834 	andeq	r6, r1, r4, lsr r8
     9d0:	0001de00 	andeq	sp, r1, r0, lsl #28
     9d4:	02411f00 	subeq	r1, r1, #0, 30
     9d8:	3b020000 	blcc	809e0 <__bss_end__+0x766d8>
     9dc:	0084101a 	addeq	r1, r4, sl, lsl r0
     9e0:	0003d500 	andeq	sp, r3, r0, lsl #10
     9e4:	84281600 	strthi	r1, [r8], #-1536	; 0x600
     9e8:	01a60000 			; <UNDEFINED> instruction: 0x01a60000
     9ec:	01170000 	tsteq	r7, r0
     9f0:	00740251 	rsbseq	r0, r4, r1, asr r2
     9f4:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     9f8:	009ef003 	addseq	pc, lr, r3
     9fc:	20000000 	andcs	r0, r0, r0
     a00:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     a04:	84344502 	ldrthi	r4, [r4], #-1282	; 0x502
     a08:	00040000 	andeq	r0, r4, r0
     a0c:	9c010000 	stcls	0, cr0, [r1], {-0}
     a10:	0000052f 	andeq	r0, r0, pc, lsr #10
     a14:	00021021 	andeq	r1, r2, r1, lsr #32
     a18:	25450200 	strbcs	r0, [r5, #-512]	; 0x200
     a1c:	01000000 	mrseq	r0, (UNDEF: 0)
     a20:	83220050 	teqhi	r2, #80	; 0x50
     a24:	02000002 	andeq	r0, r0, #2
     a28:	00843853 	addeq	r3, r4, r3, asr r8
     a2c:	00000400 	andeq	r0, r0, r0, lsl #8
     a30:	209c0100 	addscs	r0, ip, r0, lsl #2
     a34:	00000226 	andeq	r0, r0, r6, lsr #4
     a38:	843c7e02 	ldrthi	r7, [ip], #-3586	; 0xe02
     a3c:	00900000 	addseq	r0, r0, r0
     a40:	9c010000 	stcls	0, cr0, [r1], {-0}
     a44:	00000621 	andeq	r0, r0, r1, lsr #12
     a48:	00021f23 	andeq	r1, r2, r3, lsr #30
     a4c:	2c810200 	sfmcs	f0, 4, [r1], {0}
     a50:	fc000000 	stc2	0, cr0, [r0], {-0}
     a54:	23000001 	movwcs	r0, #1
     a58:	00000219 	andeq	r0, r0, r9, lsl r2
     a5c:	002c8202 	eoreq	r8, ip, r2, lsl #4
     a60:	021a0000 	andseq	r0, sl, #0
     a64:	6e1b0000 	cdpvs	0, 1, cr0, cr11, cr0, {0}
     a68:	2c830200 	sfmcs	f0, 4, [r3], {0}
     a6c:	44000000 	strmi	r0, [r0], #-0
     a70:	18000002 	stmdane	r0, {r1}
     a74:	00000121 	andeq	r0, r0, r1, lsr #2
     a78:	00000631 	andeq	r0, r0, r1, lsr r6
     a7c:	99000305 	stmdbls	r0, {r0, r2, r8, r9}
     a80:	50190000 	andspl	r0, r9, r0
     a84:	79000084 	stmdbvc	r0, {r2, r7}
     a88:	a3000001 	movwge	r0, #1
     a8c:	17000005 	strne	r0, [r0, -r5]
     a90:	74025001 	strvc	r5, [r2], #-1
     a94:	5c190000 	ldcpl	0, cr0, [r9], {-0}
     a98:	79000084 	stmdbvc	r0, {r2, r7}
     a9c:	b7000001 	strlt	r0, [r0, -r1]
     aa0:	17000005 	strne	r0, [r0, -r5]
     aa4:	74025001 	strvc	r5, [r2], #-1
     aa8:	90190014 	andsls	r0, r9, r4, lsl r0
     aac:	5e000084 	cdppl	0, 0, cr0, cr0, cr4, {4}
     ab0:	ed000008 	stc	0, cr0, [r0, #-32]	; 0xffffffe0
     ab4:	17000005 	strne	r0, [r0, -r5]
     ab8:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     abc:	52011787 	andpl	r1, r1, #35389440	; 0x21c0000
     ac0:	99000305 	stmdbls	r0, {r0, r2, r8, r9}
     ac4:	01170000 	tsteq	r7, r0
     ac8:	38030551 	stmdacc	r3, {r0, r4, r6, r8, sl}
     acc:	1700009a 			; <UNDEFINED> instruction: 0x1700009a
     ad0:	03055001 	movweq	r5, #20481	; 0x5001
     ad4:	00009a48 	andeq	r9, r0, r8, asr #20
     ad8:	087d0217 	ldmdaeq	sp!, {r0, r1, r2, r4, r9}^
     adc:	00007502 	andeq	r7, r0, r2, lsl #10
     ae0:	0084941a 	addeq	r9, r4, sl, lsl r4
     ae4:	00087400 	andeq	r7, r8, r0, lsl #8
     ae8:	849c1900 	ldrhi	r1, [ip], #2304	; 0x900
     aec:	023c0000 	eorseq	r0, ip, #0
     af0:	060d0000 	streq	r0, [sp], -r0
     af4:	01170000 	tsteq	r7, r0
     af8:	f0030550 			; <UNDEFINED> instruction: 0xf0030550
     afc:	0000009e 	muleq	r0, lr, r0
     b00:	0084ac16 	addeq	sl, r4, r6, lsl ip
     b04:	00085e00 	andeq	r5, r8, r0, lsl #28
     b08:	50011700 	andpl	r1, r1, r0, lsl #14
     b0c:	9aa00305 	bls	fe801728 <__bss_end__+0xfe7f7420>
     b10:	00000000 	andeq	r0, r0, r0
     b14:	00007f08 	andeq	r7, r0, r8, lsl #30
     b18:	00063100 	andeq	r3, r6, r0, lsl #2
     b1c:	00760900 	rsbseq	r0, r6, r0, lsl #18
     b20:	00120000 	andseq	r0, r2, r0
     b24:	00062107 	andeq	r2, r6, r7, lsl #2
     b28:	02d62400 	sbcseq	r2, r6, #0, 8
     b2c:	61020000 	mrsvs	r0, (UNDEF: 2)
     b30:	000084cc 	andeq	r8, r0, ip, asr #9
     b34:	00000070 	andeq	r0, r0, r0, ror r0
     b38:	06a59c01 	strteq	r9, [r5], r1, lsl #24
     b3c:	d8190000 	ldmdale	r9, {}	; <UNPREDICTABLE>
     b40:	3c000084 	stccc	0, cr0, [r0], {132}	; 0x84
     b44:	62000002 	andvs	r0, r0, #2
     b48:	17000006 	strne	r0, [r0, -r6]
     b4c:	03055001 	movweq	r5, #20481	; 0x5001
     b50:	00009ef0 	strdeq	r9, [r0], -r0
     b54:	84e41a00 	strbthi	r1, [r4], #2560	; 0xa00
     b58:	05400000 	strbeq	r0, [r0, #-0]
     b5c:	e81a0000 	ldmda	sl, {}	; <UNPREDICTABLE>
     b60:	d5000084 	strle	r0, [r0, #-132]	; 0x84
     b64:	1a000003 	bne	b78 <_start-0x7488>
     b68:	00008510 	andeq	r8, r0, r0, lsl r5
     b6c:	000001fe 	strdeq	r0, [r0], -lr
     b70:	00851819 	addeq	r1, r5, r9, lsl r8
     b74:	0002f900 	andeq	pc, r2, r0, lsl #18
     b78:	00069100 	andeq	r9, r6, r0, lsl #2
     b7c:	50011700 	andpl	r1, r1, r0, lsl #14
     b80:	00007502 	andeq	r7, r0, r2, lsl #10
     b84:	00852c16 	addeq	r2, r5, r6, lsl ip
     b88:	00085e00 	andeq	r5, r8, r0, lsl #28
     b8c:	50011700 	andpl	r1, r1, r0, lsl #14
     b90:	9ac00305 	bls	ff0017ac <__bss_end__+0xfeff74a4>
     b94:	00000000 	andeq	r0, r0, r0
     b98:	00025520 	andeq	r5, r2, r0, lsr #10
     b9c:	3c940200 	lfmcc	f0, 4, [r4], {0}
     ba0:	28000085 	stmdacs	r0, {r0, r2, r7}
     ba4:	01000000 	mrseq	r0, (UNDEF: 0)
     ba8:	0007029c 	muleq	r7, ip, r2
     bac:	01211800 	teqeq	r1, r0, lsl #16
     bb0:	07120000 	ldreq	r0, [r2, -r0]
     bb4:	03050000 	movweq	r0, #20480	; 0x5000
     bb8:	00009914 	andeq	r9, r0, r4, lsl r9
     bbc:	00855419 	addeq	r5, r5, r9, lsl r4
     bc0:	00085e00 	andeq	r5, r8, r0, lsl #28
     bc4:	0006f800 	andeq	pc, r6, r0, lsl #16
     bc8:	53011700 	movwpl	r1, #5888	; 0x1700
     bcc:	17950802 	ldrne	r0, [r5, r2, lsl #16]
     bd0:	03055201 	movweq	r5, #20993	; 0x5201
     bd4:	00009914 	andeq	r9, r0, r4, lsl r9
     bd8:	05510117 	ldrbeq	r0, [r1, #-279]	; 0x117
     bdc:	009a3803 	addseq	r3, sl, r3, lsl #16
     be0:	50011700 	andpl	r1, r1, r0, lsl #14
     be4:	9af00305 	bls	ffc01800 <__bss_end__+0xffbf74f8>
     be8:	1a000000 	bne	bf0 <_start-0x7410>
     bec:	00008558 	andeq	r8, r0, r8, asr r5
     bf0:	00000874 	andeq	r0, r0, r4, ror r8
     bf4:	007f0800 	rsbseq	r0, pc, r0, lsl #16
     bf8:	07120000 	ldreq	r0, [r2, -r0]
     bfc:	76090000 	strvc	r0, [r9], -r0
     c00:	0f000000 	svceq	0x00000000
     c04:	07020700 	streq	r0, [r2, -r0, lsl #14]
     c08:	07200000 	streq	r0, [r0, -r0]!
     c0c:	02000002 	andeq	r0, r0, #2
     c10:	0085649d 	umulleq	r6, r5, sp, r4
     c14:	00002800 	andeq	r2, r0, r0, lsl #16
     c18:	829c0100 	addshi	r0, ip, #0, 2
     c1c:	13000007 	movwne	r0, #7
     c20:	02006874 	andeq	r6, r0, #116, 16	; 0x740000
     c24:	0001689d 	muleq	r1, sp, r8
     c28:	00026e00 	andeq	r6, r2, r0, lsl #28
     c2c:	01211800 	teqeq	r1, r0, lsl #16
     c30:	07820000 	streq	r0, [r2, r0]
     c34:	03050000 	movweq	r0, #20480	; 0x5000
     c38:	00009924 	andeq	r9, r0, r4, lsr #18
     c3c:	00857c19 	addeq	r7, r5, r9, lsl ip
     c40:	00085e00 	andeq	r5, r8, r0, lsl #28
     c44:	00077800 	andeq	r7, r7, r0, lsl #16
     c48:	53011700 	movwpl	r1, #5888	; 0x1700
     c4c:	179e0802 	ldrne	r0, [lr, r2, lsl #16]
     c50:	03055201 	movweq	r5, #20993	; 0x5201
     c54:	00009924 	andeq	r9, r0, r4, lsr #18
     c58:	05510117 	ldrbeq	r0, [r1, #-279]	; 0x117
     c5c:	009a3803 	addseq	r3, sl, r3, lsl #16
     c60:	50011700 	andpl	r1, r1, r0, lsl #14
     c64:	9af00305 	bls	ffc01880 <__bss_end__+0xffbf7578>
     c68:	1a000000 	bne	c70 <_start-0x7390>
     c6c:	00008580 	andeq	r8, r0, r0, lsl #11
     c70:	00000874 	andeq	r0, r0, r4, ror r8
     c74:	04740700 	ldrbteq	r0, [r4], #-1792	; 0x700
     c78:	6b200000 	blvs	800c80 <__bss_end__+0x7f6978>
     c7c:	02000002 	andeq	r0, r0, #2
     c80:	00858ca4 	addeq	r8, r5, r4, lsr #25
     c84:	00002800 	andeq	r2, r0, r0, lsl #16
     c88:	f39c0100 	vaddw.u16	q0, q6, d0
     c8c:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
     c90:	000005f9 	strdeq	r0, [r0], -r9
     c94:	005da402 	subseq	sl, sp, r2, lsl #8
     c98:	028f0000 	addeq	r0, pc, #0
     c9c:	21180000 	tstcs	r8, r0
     ca0:	f3000001 	vhadd.u8	d0, d0, d1
     ca4:	05000007 	streq	r0, [r0, #-7]
     ca8:	00993003 	addseq	r3, r9, r3
     cac:	85a41900 	strhi	r1, [r4, #2304]!	; 0x900
     cb0:	085e0000 	ldmdaeq	lr, {}^	; <UNPREDICTABLE>
     cb4:	07e90000 	strbeq	r0, [r9, r0]!
     cb8:	01170000 	tsteq	r7, r0
     cbc:	a5080253 	strge	r0, [r8, #-595]	; 0x253
     cc0:	05520117 	ldrbeq	r0, [r2, #-279]	; 0x117
     cc4:	00993003 	addseq	r3, r9, r3
     cc8:	51011700 	tstpl	r1, r0, lsl #14
     ccc:	9a380305 	bls	e018e8 <__bss_end__+0xdf75e0>
     cd0:	01170000 	tsteq	r7, r0
     cd4:	f0030550 			; <UNDEFINED> instruction: 0xf0030550
     cd8:	0000009a 	muleq	r0, sl, r0
     cdc:	0085a81a 	addeq	sl, r5, sl, lsl r8
     ce0:	00087400 	andeq	r7, r8, r0, lsl #8
     ce4:	02070000 	andeq	r0, r7, #0
     ce8:	25000007 	strcs	r0, [r0, #-7]
     cec:	000002d1 	ldrdeq	r0, [r0], -r1
     cf0:	016e0a02 	cmneq	lr, r2, lsl #20
     cf4:	03050000 	movweq	r0, #20480	; 0x5000
     cf8:	00009ef0 	strdeq	r9, [r0], -r0
     cfc:	00026525 	andeq	r6, r2, r5, lsr #10
     d00:	6e0a0200 	cdpvs	2, 0, cr0, cr10, cr0, {0}
     d04:	05000001 	streq	r0, [r0, #-1]
     d08:	009edc03 	addseq	sp, lr, r3, lsl #24
     d0c:	01ef2500 	mvneq	r2, r0, lsl #10
     d10:	0c020000 	stceq	0, cr0, [r2], {-0}
     d14:	00000168 	andeq	r0, r0, r8, ror #2
     d18:	9eec0305 	cdpls	3, 14, cr0, cr12, cr5, {0}
     d1c:	93250000 	teqls	r5, #0
     d20:	02000002 	andeq	r0, r0, #2
     d24:	0001680d 	andeq	r6, r1, sp, lsl #16
     d28:	fc030500 	stc2	5, cr0, [r3], {-0}
     d2c:	2600009e 			; <UNDEFINED> instruction: 0x2600009e
     d30:	00646974 	rsbeq	r6, r4, r4, ror r9
     d34:	002c1002 	eoreq	r1, ip, r2
     d38:	03050000 	movweq	r0, #20480	; 0x5000
     d3c:	000096ac 	andeq	r9, r0, ip, lsr #13
     d40:	0002e725 	andeq	lr, r2, r5, lsr #14
     d44:	2c120200 	lfmcs	f0, 4, [r2], {-0}
     d48:	05000000 	streq	r0, [r0, #-0]
     d4c:	009ee803 	addseq	lr, lr, r3, lsl #16
     d50:	043e2700 	ldrteq	r2, [lr], #-1792	; 0x700
     d54:	27050000 	strcs	r0, [r5, -r0]
     d58:	00000025 	andeq	r0, r0, r5, lsr #32
     d5c:	00000874 	andeq	r0, r0, r4, ror r8
     d60:	0000860e 	andeq	r8, r0, lr, lsl #12
     d64:	1f002800 	svcne	0x00002800
     d68:	0000001e 	andeq	r0, r0, lr, lsl r0
     d6c:	0e295c05 	cdpeq	12, 2, cr5, cr9, cr5, {0}
     d70:	05000000 	streq	r0, [r0, #-0]
     d74:	00007d67 	andeq	r7, r0, r7, ror #26
     d78:	002c0e00 	eoreq	r0, ip, r0, lsl #28
     d7c:	2c0e0000 	stccs	0, cr0, [lr], {-0}
     d80:	00000000 	andeq	r0, r0, r0
     d84:	00097f00 	andeq	r7, r9, r0, lsl #30
     d88:	2c000400 	cfstrscs	mvf0, [r0], {-0}
     d8c:	04000004 	streq	r0, [r0], #-4
     d90:	00002901 	andeq	r2, r0, r1, lsl #18
     d94:	02f90100 	rscseq	r0, r9, #0, 2
     d98:	00b30000 	adcseq	r0, r3, r0
     d9c:	85c00000 	strbhi	r0, [r0]
     da0:	05180000 	ldreq	r0, [r8, #-0]
     da4:	02cb0000 	sbceq	r0, fp, #0
     da8:	04020000 	streq	r0, [r2], #-0
     dac:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
     db0:	03370300 	teqeq	r7, #0, 6
     db4:	d4030000 	strle	r0, [r3], #-0
     db8:	00000037 	andeq	r0, r0, r7, lsr r0
     dbc:	54070404 	strpl	r0, [r7], #-1028	; 0x404
     dc0:	04000001 	streq	r0, [r0], #-1
     dc4:	009a0601 	addseq	r0, sl, r1, lsl #12
     dc8:	02040000 	andeq	r0, r4, #0
     dcc:	00019505 	andeq	r9, r1, r5, lsl #10
     dd0:	05040400 	streq	r0, [r4, #-1024]	; 0x400
     dd4:	0000017c 	andeq	r0, r0, ip, ror r1
     dd8:	77050804 	strvc	r0, [r5, -r4, lsl #16]
     ddc:	04000001 	streq	r0, [r0], #-1
     de0:	00980801 	addseq	r0, r8, r1, lsl #16
     de4:	02040000 	andeq	r0, r4, #0
     de8:	00010e07 	andeq	r0, r1, r7, lsl #28
     dec:	07040400 	streq	r0, [r4, -r0, lsl #8]
     df0:	0000014f 	andeq	r0, r0, pc, asr #2
     df4:	4a070804 	bmi	1c2e0c <__bss_end__+0x1b8b04>
     df8:	04000001 	streq	r0, [r0], #-1
     dfc:	016e0704 	cmneq	lr, r4, lsl #14
     e00:	04050000 	streq	r0, [r5], #-0
     e04:	a1080104 	tstge	r8, r4, lsl #2
     e08:	06000000 	streq	r0, [r0], -r0
     e0c:	00008c04 	andeq	r8, r0, r4, lsl #24
     e10:	007f0700 	rsbseq	r0, pc, r0, lsl #14
     e14:	7f080000 	svcvc	0x00080000
     e18:	a1000000 	mrsge	r0, (UNDEF: 0)
     e1c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     e20:	00000076 	andeq	r0, r0, r6, ror r0
     e24:	31030007 	tstcc	r3, r7
     e28:	02000003 	andeq	r0, r0, #3
     e2c:	00005a1b 	andeq	r5, r0, fp, lsl sl
     e30:	20140a00 	andscs	r0, r4, r0, lsl #20
     e34:	01062702 	tsteq	r6, r2, lsl #14
     e38:	aa0b0000 	bge	2c0e40 <__bss_end__+0x2b6b38>
     e3c:	02000003 	andeq	r0, r0, #3
     e40:	00011729 	andeq	r1, r1, r9, lsr #14
     e44:	9b0c0000 	blls	300e4c <__bss_end__+0x2f6b44>
     e48:	02000003 	andeq	r0, r0, #3
     e4c:	0000372a 	andeq	r3, r0, sl, lsr #14
     e50:	0c200000 	stceq	0, cr0, [r0], #-0
     e54:	000002cc 	andeq	r0, r0, ip, asr #5
     e58:	011c2b02 	tsteq	ip, r2, lsl #22
     e5c:	20040000 	andcs	r0, r4, r0
     e60:	0002a40c 	andeq	sl, r2, ip, lsl #8
     e64:	1c2b0200 	sfmne	f0, 4, [fp], #-0
     e68:	08000001 	stmdaeq	r0, {r0}
     e6c:	03230c20 	teqeq	r3, #32, 24	; 0x2000
     e70:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
     e74:	0000011c 	andeq	r0, r0, ip, lsl r1
     e78:	480d200c 	stmdami	sp, {r2, r3, sp}
     e7c:	02000003 	andeq	r0, r0, #3
     e80:	00003730 	andeq	r3, r0, r0, lsr r7
     e84:	1f010400 	svcne	0x00010400
     e88:	08002010 	stmdaeq	r0, {r4, sp}
     e8c:	000000a1 	andeq	r0, r0, r1, lsr #1
     e90:	00000117 	andeq	r0, r0, r7, lsl r1
     e94:	0000760e 	andeq	r7, r0, lr, lsl #12
     e98:	001fff00 	andseq	pc, pc, r0, lsl #30
     e9c:	0001060f 	andeq	r0, r1, pc, lsl #12
     ea0:	00370f00 	eorseq	r0, r7, r0, lsl #30
     ea4:	c7030000 	strgt	r0, [r3, -r0]
     ea8:	02000003 	andeq	r0, r0, #3
     eac:	0000ac31 	andeq	sl, r0, r1, lsr ip
     eb0:	03a11000 			; <UNDEFINED> instruction: 0x03a11000
     eb4:	56020000 	strpl	r0, [r2], -r0
     eb8:	00000037 	andeq	r0, r0, r7, lsr r0
     ebc:	00014603 	andeq	r4, r1, r3, lsl #12
     ec0:	00711100 	rsbseq	r1, r1, r0, lsl #2
     ec4:	01465602 	cmpeq	r6, r2, lsl #12
     ec8:	06000000 	streq	r0, [r0], -r0
     ecc:	00012104 	andeq	r2, r1, r4, lsl #2
     ed0:	03921000 	orrseq	r1, r2, #0
     ed4:	51020000 	mrspl	r0, (UNDEF: 2)
     ed8:	00000025 	andeq	r0, r0, r5, lsr #32
     edc:	00016603 	andeq	r6, r1, r3, lsl #12
     ee0:	00711100 	rsbseq	r1, r1, r0, lsl #2
     ee4:	01465102 	cmpeq	r6, r2, lsl #2
     ee8:	10000000 	andne	r0, r0, r0
     eec:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
     ef0:	00255402 	eoreq	r5, r5, r2, lsl #8
     ef4:	80030000 	andhi	r0, r3, r0
     ef8:	11000001 	tstne	r0, r1
     efc:	54020071 	strpl	r0, [r2], #-113	; 0x71
     f00:	00000146 	andeq	r0, r0, r6, asr #2
     f04:	03041000 	movweq	r1, #16384	; 0x4000
     f08:	5a020000 	bpl	80f10 <__bss_end__+0x76c08>
     f0c:	00000025 	andeq	r0, r0, r5, lsr #32
     f10:	0001ae03 	andeq	sl, r1, r3, lsl #28
     f14:	00631100 	rsbeq	r1, r3, r0, lsl #2
     f18:	01465a02 	cmpeq	r6, r2, lsl #20
     f1c:	65110000 	ldrvs	r0, [r1, #-0]
     f20:	ae5a0200 	cdpge	2, 5, cr0, cr10, cr0, {0}
     f24:	12000001 	andne	r0, r0, #1
     f28:	000002a4 	andeq	r0, r0, r4, lsr #5
     f2c:	00375d02 	eorseq	r5, r7, r2, lsl #26
     f30:	06000000 	streq	r0, [r0], -r0
     f34:	0000a104 	andeq	sl, r0, r4, lsl #2
     f38:	03651000 	cmneq	r5, #0
     f3c:	57020000 	strpl	r0, [r2, -r0]
     f40:	00000037 	andeq	r0, r0, r7, lsr r0
     f44:	0001ce03 	andeq	ip, r1, r3, lsl #28
     f48:	00711100 	rsbseq	r1, r1, r0, lsl #2
     f4c:	01465702 	cmpeq	r6, r2, lsl #14
     f50:	10000000 	andne	r0, r0, r0
     f54:	00000380 	andeq	r0, r0, r0, lsl #7
     f58:	00256402 	eoreq	r6, r5, r2, lsl #8
     f5c:	07030000 	streq	r0, [r3, -r0]
     f60:	11000002 	tstne	r0, r2
     f64:	64020063 	strvs	r0, [r2], #-99	; 0x63
     f68:	00000146 	andeq	r0, r0, r6, asr #2
     f6c:	02007811 	andeq	r7, r0, #1114112	; 0x110000
     f70:	0000a164 	andeq	sl, r0, r4, ror #2
     f74:	02cc1200 	sbceq	r1, ip, #0, 4
     f78:	65020000 	strvs	r0, [r2, #-0]
     f7c:	00000037 	andeq	r0, r0, r7, lsr r0
     f80:	0002a412 	andeq	sl, r2, r2, lsl r4
     f84:	37660200 	strbcc	r0, [r6, -r0, lsl #4]!
     f88:	00000000 	andeq	r0, r0, r0
     f8c:	0003b813 	andeq	fp, r3, r3, lsl r8
     f90:	c0080100 	andgt	r0, r8, r0, lsl #2
     f94:	80000085 	andhi	r0, r0, r5, lsl #1
     f98:	01000000 	mrseq	r0, (UNDEF: 0)
     f9c:	00029d9c 	muleq	r2, ip, sp
     fa0:	00631400 	rsbeq	r1, r3, r0, lsl #8
     fa4:	01460801 	cmpeq	r6, r1, lsl #16
     fa8:	02b00000 	adcseq	r0, r0, #0
     fac:	21150000 	tstcs	r5, r0
     fb0:	ad000001 	stcge	0, cr0, [r0, #-4]
     fb4:	05000002 	streq	r0, [r0, #-2]
     fb8:	009b1c03 	addseq	r1, fp, r3, lsl #24
     fbc:	012c1600 	teqeq	ip, r0, lsl #12
     fc0:	85d80000 	ldrbhi	r0, [r8]
     fc4:	00140000 	andseq	r0, r4, r0
     fc8:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
     fcc:	00000255 	andeq	r0, r0, r5, asr r2
     fd0:	00013c17 	andeq	r3, r1, r7, lsl ip
     fd4:	0002d100 	andeq	sp, r2, r0, lsl #2
     fd8:	4c160000 	ldcmi	0, cr0, [r6], {-0}
     fdc:	ec000001 	stc	0, cr0, [r0], {1}
     fe0:	14000085 	strne	r0, [r0], #-133	; 0x85
     fe4:	01000000 	mrseq	r0, (UNDEF: 0)
     fe8:	00027209 	andeq	r7, r2, r9, lsl #4
     fec:	015c1700 	cmpeq	ip, r0, lsl #14
     ff0:	02f20000 	rscseq	r0, r2, #0
     ff4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     ff8:	00008624 	andeq	r8, r0, r4, lsr #12
     ffc:	0000094a 	andeq	r0, r0, sl, asr #18
    1000:	01530119 	cmpeq	r3, r9, lsl r1
    1004:	5201193a 	andpl	r1, r1, #950272	; 0xe8000
    1008:	9b1c0305 	blls	701c24 <__bss_end__+0x6f791c>
    100c:	01190000 	tsteq	r9, r0
    1010:	8c030551 	cfstr32hi	mvfx0, [r3], {81}	; 0x51
    1014:	1900009b 	stmdbne	r0, {r0, r1, r3, r4, r7}
    1018:	03055001 	movweq	r5, #20481	; 0x5001
    101c:	00009b50 	andeq	r9, r0, r0, asr fp
    1020:	7f080000 	svcvc	0x00080000
    1024:	ad000000 	stcge	0, cr0, [r0, #-0]
    1028:	09000002 	stmdbeq	r0, {r1}
    102c:	00000076 	andeq	r0, r0, r6, ror r0
    1030:	9d070008 	stcls	0, cr0, [r7, #-32]	; 0xffffffe0
    1034:	13000002 	movwne	r0, #2
    1038:	000003c1 	andeq	r0, r0, r1, asr #7
    103c:	86400d01 	strbhi	r0, [r0], -r1, lsl #26
    1040:	00400000 	subeq	r0, r0, r0
    1044:	9c010000 	stcls	0, cr0, [r1], {-0}
    1048:	0000031b 	andeq	r0, r0, fp, lsl r3
    104c:	01006314 	tsteq	r0, r4, lsl r3
    1050:	0001460d 	andeq	r4, r1, sp, lsl #12
    1054:	00031300 	andeq	r1, r3, r0, lsl #6
    1058:	01211500 	teqeq	r1, r0, lsl #10
    105c:	032b0000 	teqeq	fp, #0
    1060:	03050000 	movweq	r0, #20480	; 0x5000
    1064:	00009b28 	andeq	r9, r0, r8, lsr #22
    1068:	00866c1a 	addeq	r6, r6, sl, lsl ip
    106c:	00094a00 	andeq	r4, r9, r0, lsl #20
    1070:	00031100 	andeq	r1, r3, r0, lsl #2
    1074:	53011900 	movwpl	r1, #6400	; 0x1900
    1078:	01193f01 	tsteq	r9, r1, lsl #30
    107c:	28030552 	stmdacs	r3, {r1, r4, r6, r8, sl}
    1080:	1900009b 	stmdbne	r0, {r0, r1, r3, r4, r7}
    1084:	03055101 	movweq	r5, #20737	; 0x5101
    1088:	00009b8c 	andeq	r9, r0, ip, lsl #23
    108c:	05500119 	ldrbeq	r0, [r0, #-281]	; 0x119
    1090:	009b9803 	addseq	r9, fp, r3, lsl #16
    1094:	701b0000 	andsvc	r0, fp, r0
    1098:	60000086 	andvs	r0, r0, r6, lsl #1
    109c:	00000009 	andeq	r0, r0, r9
    10a0:	00007f08 	andeq	r7, r0, r8, lsl #30
    10a4:	00032b00 	andeq	r2, r3, r0, lsl #22
    10a8:	00760900 	rsbseq	r0, r6, r0, lsl #18
    10ac:	00050000 	andeq	r0, r5, r0
    10b0:	00031b07 	andeq	r1, r3, r7, lsl #22
    10b4:	036f1300 	cmneq	pc, #0, 6
    10b8:	12010000 	andne	r0, r1, #0
    10bc:	00008680 	andeq	r8, r0, r0, lsl #13
    10c0:	000001a4 	andeq	r0, r0, r4, lsr #3
    10c4:	05189c01 	ldreq	r9, [r8, #-3073]	; 0xc01
    10c8:	63140000 	tstvs	r4, #0
    10cc:	46120100 	ldrmi	r0, [r2], -r0, lsl #2
    10d0:	34000001 	strcc	r0, [r0], #-1
    10d4:	1c000003 	stcne	0, cr0, [r0], {3}
    10d8:	00000348 	andeq	r0, r0, r8, asr #6
    10dc:	00371201 	eorseq	r1, r7, r1, lsl #4
    10e0:	03520000 	cmpeq	r2, #0
    10e4:	21150000 	tstcs	r5, r0
    10e8:	18000001 	stmdane	r0, {r0}
    10ec:	05000005 	streq	r0, [r0, #-5]
    10f0:	009b3003 	addseq	r3, fp, r3
    10f4:	00651d00 	rsbeq	r1, r5, r0, lsl #26
    10f8:	00a11b01 	adceq	r1, r1, r1, lsl #22
    10fc:	037e0000 	cmneq	lr, #0
    1100:	4c160000 	ldcmi	0, cr0, [r6], {-0}
    1104:	d8000001 	stmdale	r0, {r0}
    1108:	08000086 	stmdaeq	r0, {r1, r2, r7}
    110c:	01000000 	mrseq	r0, (UNDEF: 0)
    1110:	00039818 	andeq	r9, r3, r8, lsl r8
    1114:	015c1e00 	cmpeq	ip, r0, lsl #28
    1118:	54010000 	strpl	r0, [r1], #-0
    111c:	01661600 	cmneq	r6, r0, lsl #12
    1120:	87000000 	strhi	r0, [r0, -r0]
    1124:	00180000 	andseq	r0, r8, r0
    1128:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    112c:	000003b3 			; <UNDEFINED> instruction: 0x000003b3
    1130:	0001761e 	andeq	r7, r1, lr, lsl r6
    1134:	00540100 	subseq	r0, r4, r0, lsl #2
    1138:	00012c16 	andeq	r2, r1, r6, lsl ip
    113c:	00873800 	addeq	r3, r7, r0, lsl #16
    1140:	00001400 	andeq	r1, r0, r0, lsl #8
    1144:	ce1a0100 	mufgte	f0, f2, f0
    1148:	1e000003 	cdpne	0, 0, cr0, cr0, cr3, {0}
    114c:	0000013c 	andeq	r0, r0, ip, lsr r1
    1150:	1f005401 	svcne	0x00005401
    1154:	00000180 	andeq	r0, r0, r0, lsl #3
    1158:	0000876c 	andeq	r8, r0, ip, ror #14
    115c:	00000000 	andeq	r0, r0, r0
    1160:	041b1c01 	ldreq	r1, [fp], #-3073	; 0xc01
    1164:	991e0000 	ldmdbls	lr, {}	; <UNPREDICTABLE>
    1168:	06000001 	streq	r0, [r0], -r1
    116c:	0010f5f2 			; <UNDEFINED> instruction: 0x0010f5f2
    1170:	901e0000 	andsls	r0, lr, r0
    1174:	01000001 	tsteq	r0, r1
    1178:	00002054 	andeq	r2, r0, r4, asr r0
    117c:	a2210000 	eorge	r0, r1, #0
    1180:	b4000001 	strlt	r0, [r0], #-1
    1184:	22000003 	andcs	r0, r0, #3
    1188:	0000014c 	andeq	r0, r0, ip, asr #2
    118c:	0000876c 	andeq	r8, r0, ip, ror #14
    1190:	00000010 	andeq	r0, r0, r0, lsl r0
    1194:	5c1e5b02 	ldcpl	11, cr5, [lr], {2}
    1198:	01000001 	tsteq	r0, r1
    119c:	00000054 	andeq	r0, r0, r4, asr r0
    11a0:	0086981a 	addeq	r9, r6, sl, lsl r8
    11a4:	00096700 	andeq	r6, r9, r0, lsl #14
    11a8:	00043b00 	andeq	r3, r4, r0, lsl #22
    11ac:	52011900 	andpl	r1, r1, #0, 18
    11b0:	20140a03 	andscs	r0, r4, r3, lsl #20
    11b4:	01510119 	cmpeq	r1, r9, lsl r1
    11b8:	50011930 	andpl	r1, r1, r0, lsr r9
    11bc:	00007402 	andeq	r7, r0, r2, lsl #8
    11c0:	0086fc1a 	addeq	pc, r6, sl, lsl ip	; <UNPREDICTABLE>
    11c4:	00094a00 	andeq	r4, r9, r0, lsl #20
    11c8:	00046900 	andeq	r6, r4, r0, lsl #18
    11cc:	53011900 	movwpl	r1, #6400	; 0x1900
    11d0:	01194801 	tsteq	r9, r1, lsl #16
    11d4:	30030552 	andcc	r0, r3, r2, asr r5
    11d8:	1900009b 	stmdbne	r0, {r0, r1, r3, r4, r7}
    11dc:	03055101 	movweq	r5, #20737	; 0x5101
    11e0:	00009b8c 	andeq	r9, r0, ip, lsl #23
    11e4:	05500119 	ldrbeq	r0, [r0, #-281]	; 0x119
    11e8:	009bbc03 	addseq	fp, fp, r3, lsl #24
    11ec:	001b0000 	andseq	r0, fp, r0
    11f0:	60000087 	andvs	r0, r0, r7, lsl #1
    11f4:	1a000009 	bne	1220 <_start-0x6de0>
    11f8:	00008734 	andeq	r8, r0, r4, lsr r7
    11fc:	0000094a 	andeq	r0, r0, sl, asr #18
    1200:	000004a0 	andeq	r0, r0, r0, lsr #9
    1204:	01530119 	cmpeq	r3, r9, lsl r1
    1208:	52011949 	andpl	r1, r1, #1196032	; 0x124000
    120c:	9b300305 	blls	c01e28 <__bss_end__+0xbf7b20>
    1210:	01190000 	tsteq	r9, r0
    1214:	8c030551 	cfstr32hi	mvfx0, [r3], {81}	; 0x51
    1218:	1900009b 	stmdbne	r0, {r0, r1, r3, r4, r7}
    121c:	03055001 	movweq	r5, #20481	; 0x5001
    1220:	00009bd8 	ldrdeq	r9, [r0], -r8
    1224:	87381b00 	ldrhi	r1, [r8, -r0, lsl #22]!
    1228:	09600000 	stmdbeq	r0!, {}^	; <UNPREDICTABLE>
    122c:	681a0000 	ldmdavs	sl, {}	; <UNPREDICTABLE>
    1230:	4a000087 	bmi	1454 <_start-0x6bac>
    1234:	d7000009 	strle	r0, [r0, -r9]
    1238:	19000004 	stmdbne	r0, {r2}
    123c:	4a015301 	bmi	55e48 <__bss_end__+0x4bb40>
    1240:	05520119 	ldrbeq	r0, [r2, #-281]	; 0x119
    1244:	009b3003 	addseq	r3, fp, r3
    1248:	51011900 	tstpl	r1, r0, lsl #18
    124c:	9b8c0305 	blls	fe301e68 <__bss_end__+0xfe2f7b60>
    1250:	01190000 	tsteq	r9, r0
    1254:	f4030550 	vst3.16	{d0,d2,d4}, [r3 :64], r0
    1258:	0000009b 	muleq	r0, fp, r0
    125c:	00876c1b 	addeq	r6, r7, fp, lsl ip
    1260:	00096000 	andeq	r6, r9, r0
    1264:	87f01a00 	ldrbhi	r1, [r0, r0, lsl #20]!
    1268:	094a0000 	stmdbeq	sl, {}^	; <UNPREDICTABLE>
    126c:	050e0000 	streq	r0, [lr, #-0]
    1270:	01190000 	tsteq	r9, r0
    1274:	194c0153 	stmdbne	ip, {r0, r1, r4, r6, r8}^
    1278:	03055201 	movweq	r5, #20993	; 0x5201
    127c:	00009b30 	andeq	r9, r0, r0, lsr fp
    1280:	05510119 	ldrbeq	r0, [r1, #-281]	; 0x119
    1284:	009b8c03 	addseq	r8, fp, r3, lsl #24
    1288:	50011900 	andpl	r1, r1, r0, lsl #18
    128c:	9c180305 	ldcls	3, cr0, [r8], {5}
    1290:	1b000000 	blne	1298 <_start-0x6d68>
    1294:	000087f4 	strdeq	r8, [r0], -r4
    1298:	00000960 	andeq	r0, r0, r0, ror #18
    129c:	00910700 	addseq	r0, r1, r0, lsl #14
    12a0:	57230000 	strpl	r0, [r3, -r0]!
    12a4:	01000003 	tsteq	r0, r3
    12a8:	0000a135 	andeq	sl, r0, r5, lsr r1
    12ac:	00882400 	addeq	r2, r8, r0, lsl #8
    12b0:	00006c00 	andeq	r6, r0, r0, lsl #24
    12b4:	9e9c0100 	fmllse	f0, f4, f0
    12b8:	14000005 	strne	r0, [r0], #-5
    12bc:	35010063 	strcc	r0, [r1, #-99]	; 0x63
    12c0:	00000146 	andeq	r0, r0, r6, asr #2
    12c4:	000003d4 	ldrdeq	r0, [r0], -r4
    12c8:	0100651d 	tsteq	r0, sp, lsl r5
    12cc:	0000a136 	andeq	sl, r0, r6, lsr r1
    12d0:	0003f200 	andeq	pc, r3, r0, lsl #4
    12d4:	01802200 	orreq	r2, r0, r0, lsl #4
    12d8:	882c0000 	stmdahi	ip!, {}	; <UNPREDICTABLE>
    12dc:	00480000 	subeq	r0, r8, r0
    12e0:	3a010000 	bcc	412e8 <__bss_end__+0x36fe0>
    12e4:	0001991e 	andeq	r9, r1, lr, lsl r9
    12e8:	c8f20600 	ldmgt	r2!, {r9, sl}^
    12ec:	00000012 	andeq	r0, r0, r2, lsl r0
    12f0:	0001901e 	andeq	r9, r1, lr, lsl r0
    12f4:	24530100 	ldrbcs	r0, [r3], #-256	; 0x100
    12f8:	0000882c 	andeq	r8, r0, ip, lsr #16
    12fc:	00000048 	andeq	r0, r0, r8, asr #32
    1300:	0001a221 	andeq	sl, r1, r1, lsr #4
    1304:	00040500 	andeq	r0, r4, r0, lsl #10
    1308:	014c2500 	cmpeq	ip, r0, lsl #10
    130c:	882c0000 	stmdahi	ip!, {}	; <UNPREDICTABLE>
    1310:	00180000 	andseq	r0, r8, r0
    1314:	5b020000 	blpl	8131c <__bss_end__+0x77014>
    1318:	00015c1e 	andeq	r5, r1, lr, lsl ip
    131c:	00530100 	subseq	r0, r3, r0, lsl #2
    1320:	13000000 	movwne	r0, #0
    1324:	00000377 	andeq	r0, r0, r7, ror r3
    1328:	88904001 	ldmhi	r0, {r0, lr}
    132c:	00340000 	eorseq	r0, r4, r0
    1330:	9c010000 	stcls	0, cr0, [r1], {-0}
    1334:	00000611 	andeq	r0, r0, r1, lsl r6
    1338:	01006314 	tsteq	r0, r4, lsl r3
    133c:	00014640 	andeq	r4, r1, r0, asr #12
    1340:	00042500 	andeq	r2, r4, r0, lsl #10
    1344:	032c1c00 	teqeq	ip, #0, 24
    1348:	40010000 	andmi	r0, r1, r0
    134c:	0000007d 	andeq	r0, r0, sp, ror r0
    1350:	00000443 	andeq	r0, r0, r3, asr #8
    1354:	01006e14 	tsteq	r0, r4, lsl lr
    1358:	00003740 	andeq	r3, r0, r0, asr #14
    135c:	00046100 	andeq	r6, r4, r0, lsl #2
    1360:	00701d00 	rsbseq	r1, r0, r0, lsl #26
    1364:	01ae4101 			; <UNDEFINED> instruction: 0x01ae4101
    1368:	047f0000 	ldrbteq	r0, [pc], #-0	; 1370 <_start-0x6c90>
    136c:	a0240000 	eorge	r0, r4, r0
    1370:	20000088 	andcs	r0, r0, r8, lsl #1
    1374:	1d000000 	stcne	0, cr0, [r0, #-0]
    1378:	43010069 	movwmi	r0, #4201	; 0x1069
    137c:	00000025 	andeq	r0, r0, r5, lsr #32
    1380:	0000049d 	muleq	r0, sp, r4
    1384:	0088b018 	addeq	fp, r8, r8, lsl r0
    1388:	00051d00 	andeq	r1, r5, r0, lsl #26
    138c:	50011900 	andpl	r1, r1, r0, lsl #18
    1390:	00007702 	andeq	r7, r0, r2, lsl #14
    1394:	14230000 	strtne	r0, [r3], #-0
    1398:	01000003 	tsteq	r0, r3
    139c:	0000251f 	andeq	r2, r0, pc, lsl r5
    13a0:	0088c400 	addeq	ip, r8, r0, lsl #8
    13a4:	00005800 	andeq	r5, r0, r0, lsl #16
    13a8:	9f9c0100 	svcls	0x009c0100
    13ac:	14000006 	strne	r0, [r0], #-6
    13b0:	1f010071 	svcne	0x00010071
    13b4:	00000146 	andeq	r0, r0, r6, asr #2
    13b8:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
    13bc:	00032c1c 	andeq	r2, r3, ip, lsl ip
    13c0:	7d1f0100 	ldfvcs	f0, [pc, #-0]	; 13c8 <_start-0x6c38>
    13c4:	da000000 	ble	13cc <_start-0x6c34>
    13c8:	14000004 	strne	r0, [r0], #-4
    13cc:	1f01006e 	svcne	0x0001006e
    13d0:	00000037 	andeq	r0, r0, r7, lsr r0
    13d4:	000004f8 	strdeq	r0, [r0], -r8
    13d8:	00012c16 	andeq	r2, r1, r6, lsl ip
    13dc:	0088d800 	addeq	sp, r8, r0, lsl #16
    13e0:	00001800 	andeq	r1, r0, r0, lsl #16
    13e4:	6e210100 	sufvss	f0, f1, f0
    13e8:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
    13ec:	0000013c 	andeq	r0, r0, ip, lsr r1
    13f0:	1a005401 	bne	163fc <__bss_end__+0xc0f4>
    13f4:	000088d8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    13f8:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
    13fc:	00000682 	andeq	r0, r0, r2, lsl #13
    1400:	02500119 	subseq	r0, r0, #1073741830	; 0x40000006
    1404:	18000074 	stmdane	r0, {r2, r4, r5, r6}
    1408:	00008908 	andeq	r8, r0, r8, lsl #18
    140c:	0000059e 	muleq	r0, lr, r5
    1410:	02520119 	subseq	r0, r2, #1073741830	; 0x40000006
    1414:	01190075 	tsteq	r9, r5, ror r0
    1418:	00760251 	rsbseq	r0, r6, r1, asr r2
    141c:	02500119 	subseq	r0, r0, #1073741830	; 0x40000006
    1420:	00000074 	andeq	r0, r0, r4, ror r0
    1424:	00033e23 	andeq	r3, r3, r3, lsr #28
    1428:	25280100 	strcs	r0, [r8, #-256]!	; 0x100
    142c:	1c000000 	stcne	0, cr0, [r0], {-0}
    1430:	a0000089 	andge	r0, r0, r9, lsl #1
    1434:	01000000 	mrseq	r0, (UNDEF: 0)
    1438:	00079e9c 	muleq	r7, ip, lr
    143c:	00631400 	rsbeq	r1, r3, r0, lsl #8
    1440:	01462801 	cmpeq	r6, r1, lsl #16
    1444:	05160000 	ldreq	r0, [r6, #-0]
    1448:	76140000 	ldrvc	r0, [r4], -r0
    144c:	ae280100 	sufgee	f0, f0, f0
    1450:	4a000001 	bmi	145c <_start-0x6ba4>
    1454:	14000005 	strne	r0, [r0], #-5
    1458:	2801006e 	stmdacs	r1, {r1, r2, r3, r5, r6}
    145c:	00000037 	andeq	r0, r0, r7, lsr r0
    1460:	00000584 	andeq	r0, r0, r4, lsl #11
    1464:	007a7326 	rsbseq	r7, sl, r6, lsr #6
    1468:	00252901 	eoreq	r2, r5, r1, lsl #18
    146c:	55010000 	strpl	r0, [r1, #-0]
    1470:	0002a427 	andeq	sl, r2, r7, lsr #8
    1474:	372c0100 	strcc	r0, [ip, -r0, lsl #2]!
    1478:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    147c:	15000005 	strne	r0, [r0, #-5]
    1480:	00000121 	andeq	r0, r0, r1, lsr #2
    1484:	000007ae 	andeq	r0, r0, lr, lsr #15
    1488:	9b380305 	blls	e020a4 <__bss_end__+0xdf7d9c>
    148c:	2c160000 	ldccs	0, cr0, [r6], {-0}
    1490:	24000001 	strcs	r0, [r0], #-1
    1494:	1c000089 	stcne	0, cr0, [r0], {137}	; 0x89
    1498:	01000000 	mrseq	r0, (UNDEF: 0)
    149c:	00072629 	andeq	r2, r7, r9, lsr #12
    14a0:	013c1700 	teqeq	ip, r0, lsl #14
    14a4:	05dc0000 	ldrbeq	r0, [ip]
    14a8:	16000000 	strne	r0, [r0], -r0
    14ac:	0000012c 	andeq	r0, r0, ip, lsr #2
    14b0:	00008964 	andeq	r8, r0, r4, ror #18
    14b4:	00000014 	andeq	r0, r0, r4, lsl r0
    14b8:	07433001 	strbeq	r3, [r3, -r1]
    14bc:	3c170000 	ldccc	0, cr0, [r7], {-0}
    14c0:	10000001 	andne	r0, r0, r1
    14c4:	00000006 	andeq	r0, r0, r6
    14c8:	0089541a 	addeq	r5, r9, sl, lsl r4
    14cc:	00061100 	andeq	r1, r6, r0, lsl #2
    14d0:	00076500 	andeq	r6, r7, r0, lsl #10
    14d4:	52011900 	andpl	r1, r1, #0, 18
    14d8:	5201f303 	andpl	pc, r1, #201326592	; 0xc000000
    14dc:	03510119 	cmpeq	r1, #1073741830	; 0x40000006
    14e0:	195101f3 	ldmdbne	r1, {r0, r1, r4, r5, r6, r7, r8}^
    14e4:	74025001 	strvc	r5, [r2], #-1
    14e8:	941a0000 	ldrls	r0, [sl], #-0
    14ec:	4a000089 	bmi	1718 <_start-0x68e8>
    14f0:	94000009 	strls	r0, [r0], #-9
    14f4:	19000007 	stmdbne	r0, {r0, r1, r2}
    14f8:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    14fc:	52011930 	andpl	r1, r1, #48, 18	; 0xc0000
    1500:	9b380305 	blls	e0211c <__bss_end__+0xdf7e14>
    1504:	01190000 	tsteq	r9, r0
    1508:	8c030551 	cfstr32hi	mvfx0, [r3], {81}	; 0x51
    150c:	1900009b 	stmdbne	r0, {r0, r1, r3, r4, r7}
    1510:	03055001 	movweq	r5, #20481	; 0x5001
    1514:	00009c50 	andeq	r9, r0, r0, asr ip
    1518:	89981b00 	ldmibhi	r8, {r8, r9, fp, ip}
    151c:	09600000 	stmdbeq	r0!, {}^	; <UNPREDICTABLE>
    1520:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1524:	0000007f 	andeq	r0, r0, pc, ror r0
    1528:	000007ae 	andeq	r0, r0, lr, lsr #15
    152c:	00007609 	andeq	r7, r0, r9, lsl #12
    1530:	07000900 	streq	r0, [r0, -r0, lsl #18]
    1534:	0000079e 	muleq	r0, lr, r7
    1538:	00038823 	andeq	r8, r3, r3, lsr #16
    153c:	25470100 	strbcs	r0, [r7, #-256]	; 0x100
    1540:	bc000000 	stclt	0, cr0, [r0], {-0}
    1544:	1c000089 	stcne	0, cr0, [r0], {137}	; 0x89
    1548:	01000001 	tsteq	r0, r1
    154c:	0009459c 	muleq	r9, ip, r5
    1550:	00631400 	rsbeq	r1, r3, r0, lsl #8
    1554:	01464701 	cmpeq	r6, r1, lsl #14
    1558:	062e0000 	strteq	r0, [lr], -r0
    155c:	2c1c0000 	ldccs	0, cr0, [ip], {-0}
    1560:	01000003 	tsteq	r0, r3
    1564:	00007d47 	andeq	r7, r0, r7, asr #26
    1568:	0006b300 	andeq	fp, r6, r0, lsl #6
    156c:	006e1400 	rsbeq	r1, lr, r0, lsl #8
    1570:	00374701 	eorseq	r4, r7, r1, lsl #14
    1574:	06f80000 	ldrbteq	r0, [r8], r0
    1578:	701d0000 	andsvc	r0, sp, r0
    157c:	ae480100 	dvfgee	f0, f0, f0
    1580:	4b000001 	blmi	158c <_start-0x6a74>
    1584:	15000007 	strne	r0, [r0, #-7]
    1588:	00000121 	andeq	r0, r0, r1, lsr #2
    158c:	00000945 	andeq	r0, r0, r5, asr #18
    1590:	9b440305 	blls	11021ac <__bss_end__+0x10f7ea4>
    1594:	b4160000 	ldrlt	r0, [r6], #-0
    1598:	c0000001 	andgt	r0, r0, r1
    159c:	20000089 	andcs	r0, r0, r9, lsl #1
    15a0:	01000000 	mrseq	r0, (UNDEF: 0)
    15a4:	0008474a 	andeq	r4, r8, sl, asr #14
    15a8:	01c41700 	biceq	r1, r4, r0, lsl #14
    15ac:	07900000 	ldreq	r0, [r0, r0]
    15b0:	2c220000 	stccs	0, cr0, [r2], #-0
    15b4:	c0000001 	andgt	r0, r0, r1
    15b8:	1c000089 	stcne	0, cr0, [r0], {137}	; 0x89
    15bc:	02000000 	andeq	r0, r0, #0
    15c0:	013c1757 	teqeq	ip, r7, asr r7
    15c4:	07900000 	ldreq	r0, [r0, r0]
    15c8:	00000000 	andeq	r0, r0, r0
    15cc:	0089ec28 	addeq	lr, r9, r8, lsr #24
    15d0:	00008400 	andeq	r8, r0, r0, lsl #8
    15d4:	0008ef00 	andeq	lr, r8, r0, lsl #30
    15d8:	00691d00 	rsbeq	r1, r9, r0, lsl #26
    15dc:	00254c01 	eoreq	r4, r5, r1, lsl #24
    15e0:	08150000 	ldmdaeq	r5, {}	; <UNPREDICTABLE>
    15e4:	ce1f0000 	cdpgt	0, 1, cr0, cr15, cr0, {0}
    15e8:	ec000001 	stc	0, cr0, [r0], {1}
    15ec:	30000089 	andcc	r0, r0, r9, lsl #1
    15f0:	01000000 	mrseq	r0, (UNDEF: 0)
    15f4:	0008b64d 	andeq	fp, r8, sp, asr #12
    15f8:	01e71700 	mvneq	r1, r0, lsl #14
    15fc:	083e0000 	ldmdaeq	lr!, {}	; <UNPREDICTABLE>
    1600:	de170000 	cdple	0, 1, cr0, cr7, cr0, {0}
    1604:	7a000001 	bvc	1610 <_start-0x69f0>
    1608:	20000008 	andcs	r0, r0, r8
    160c:	00000030 	andeq	r0, r0, r0, lsr r0
    1610:	0001f021 	andeq	pc, r1, r1, lsr #32
    1614:	0008a600 	andeq	sl, r8, r0, lsl #12
    1618:	01fb2900 	mvnseq	r2, r0, lsl #18
    161c:	56010000 	strpl	r0, [r1], -r0
    1620:	00016622 	andeq	r6, r1, r2, lsr #12
    1624:	008a0c00 	addeq	r0, sl, r0, lsl #24
    1628:	00001000 	andeq	r1, r0, r0
    162c:	17670200 	strbne	r0, [r7, -r0, lsl #4]!
    1630:	00000176 	andeq	r0, r0, r6, ror r1
    1634:	000008d1 	ldrdeq	r0, [r0], -r1
    1638:	1a000000 	bne	1640 <_start-0x69c0>
    163c:	00008a60 	andeq	r8, r0, r0, ror #20
    1640:	0000094a 	andeq	r0, r0, sl, asr #18
    1644:	000008e5 	andeq	r0, r0, r5, ror #17
    1648:	02530119 	subseq	r0, r3, #1073741830	; 0x40000006
    164c:	01194e08 	tsteq	r9, r8, lsl #28
    1650:	44030552 	strmi	r0, [r3], #-1362	; 0x552
    1654:	1900009b 	stmdbne	r0, {r0, r1, r3, r4, r7}
    1658:	03055101 	movweq	r5, #20737	; 0x5101
    165c:	00009b8c 	andeq	r9, r0, ip, lsl #23
    1660:	05500119 	ldrbeq	r0, [r0, #-281]	; 0x119
    1664:	009c7403 	addseq	r7, ip, r3, lsl #8
    1668:	641b0000 	ldrvs	r0, [fp], #-0
    166c:	6000008a 	andvs	r0, r0, sl, lsl #1
    1670:	00000009 	andeq	r0, r0, r9
    1674:	00014c16 	andeq	r4, r1, r6, lsl ip
    1678:	008a7800 	addeq	r7, sl, r0, lsl #16
    167c:	00001000 	andeq	r1, r0, r0
    1680:	0c500100 	ldfeqe	f0, [r0], {-0}
    1684:	17000009 	strne	r0, [r0, -r9]
    1688:	0000015c 	andeq	r0, r0, ip, asr r1
    168c:	000008fd 	strdeq	r0, [r0], -sp
    1690:	8aa41a00 	bhi	fe907e98 <__bss_end__+0xfe8fdb90>
    1694:	094a0000 	stmdbeq	sl, {}^	; <UNPREDICTABLE>
    1698:	093b0000 	ldmdbeq	fp!, {}	; <UNPREDICTABLE>
    169c:	01190000 	tsteq	r9, r0
    16a0:	50080253 	andpl	r0, r8, r3, asr r2
    16a4:	05520119 	ldrbeq	r0, [r2, #-281]	; 0x119
    16a8:	009b4403 	addseq	r4, fp, r3, lsl #8
    16ac:	51011900 	tstpl	r1, r0, lsl #18
    16b0:	9b8c0305 	blls	fe3022cc <__bss_end__+0xfe2f7fc4>
    16b4:	01190000 	tsteq	r9, r0
    16b8:	98030550 	stmdals	r3, {r4, r6, r8, sl}
    16bc:	0000009c 	muleq	r0, ip, r0
    16c0:	008aa81b 	addeq	sl, sl, fp, lsl r8
    16c4:	00096000 	andeq	r6, r9, r0
    16c8:	9e070000 	cdpls	0, 0, cr0, cr7, cr0, {0}
    16cc:	2a000007 	bcs	16f0 <_start-0x6910>
    16d0:	0000043e 	andeq	r0, r0, lr, lsr r4
    16d4:	00252704 	eoreq	r2, r5, r4, lsl #14
    16d8:	09600000 	stmdbeq	r0!, {}^	; <UNPREDICTABLE>
    16dc:	862b0000 	strthi	r0, [fp], -r0
    16e0:	2c000000 	stccs	0, cr0, [r0], {-0}
    16e4:	001e2d00 	andseq	r2, lr, r0, lsl #26
    16e8:	5c040000 	stcpl	0, cr0, [r4], {-0}
    16ec:	00035e2e 	andeq	r5, r3, lr, lsr #28
    16f0:	7d1b0500 	cfldr32vc	mvfx0, [fp, #-0]
    16f4:	2b000000 	blcs	16fc <_start-0x6904>
    16f8:	0000007d 	andeq	r0, r0, sp, ror r0
    16fc:	0000252b 	andeq	r2, r0, fp, lsr #10
    1700:	002c2b00 	eoreq	r2, ip, r0, lsl #22
    1704:	00000000 	andeq	r0, r0, r0
    1708:	000000db 	ldrdeq	r0, [r0], -fp
    170c:	068a0004 	streq	r0, [sl], r4
    1710:	01040000 	mrseq	r0, (UNDEF: 4)
    1714:	00000029 	andeq	r0, r0, r9, lsr #32
    1718:	0003cc01 	andeq	ip, r3, r1, lsl #24
    171c:	0003da00 	andeq	sp, r3, r0, lsl #20
    1720:	008b4800 	addeq	r4, fp, r0, lsl #16
    1724:	00002000 	andeq	r2, r0, r0
    1728:	00053f00 	andeq	r3, r5, r0, lsl #30
    172c:	06010200 	streq	r0, [r1], -r0, lsl #4
    1730:	0000009a 	muleq	r0, sl, r0
    1734:	98080102 	stmdals	r8, {r1, r8}
    1738:	02000000 	andeq	r0, r0, #0
    173c:	01950502 	orrseq	r0, r5, r2, lsl #10
    1740:	02020000 	andeq	r0, r2, #0
    1744:	00010e07 	andeq	r0, r1, r7, lsl #28
    1748:	05040300 	streq	r0, [r4, #-768]	; 0x300
    174c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1750:	54070402 	strpl	r0, [r7], #-1026	; 0x402
    1754:	02000001 	andeq	r0, r0, #1
    1758:	01770508 	cmneq	r7, r8, lsl #10
    175c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1760:	00014a07 	andeq	r4, r1, r7, lsl #20
    1764:	05040200 	streq	r0, [r4, #-512]	; 0x200
    1768:	0000017c 	andeq	r0, r0, ip, ror r1
    176c:	6e070402 	cdpvs	4, 0, cr0, cr7, cr2, {0}
    1770:	04000001 	streq	r0, [r0], #-1
    1774:	07040204 	streq	r0, [r4, -r4, lsl #4]
    1778:	0000014f 	andeq	r0, r0, pc, asr #2
    177c:	007a0405 	rsbseq	r0, sl, r5, lsl #8
    1780:	01020000 	mrseq	r0, (UNDEF: 2)
    1784:	0000a108 	andeq	sl, r0, r8, lsl #2
    1788:	03370600 	teqeq	r7, #0, 12
    178c:	d4020000 	strle	r0, [r2], #-0
    1790:	00000048 	andeq	r0, r0, r8, asr #32
    1794:	00035e07 	andeq	r5, r3, r7, lsl #28
    1798:	6b1b0300 	blvs	6c23a0 <__bss_end__+0x6b8098>
    179c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    17a0:	2000008b 	andcs	r0, r0, fp, lsl #1
    17a4:	01000000 	mrseq	r0, (UNDEF: 0)
    17a8:	705f089c 			; <UNDEFINED> instruction: 0x705f089c
    17ac:	6b030100 	blvs	c1bb4 <__bss_end__+0xb78ac>
    17b0:	01000000 	mrseq	r0, (UNDEF: 0)
    17b4:	00630850 	rsbeq	r0, r3, r0, asr r8
    17b8:	00410301 	subeq	r0, r1, r1, lsl #6
    17bc:	51010000 	mrspl	r0, (UNDEF: 1)
    17c0:	01006e09 	tsteq	r0, r9, lsl #28
    17c4:	00008103 	andeq	r8, r0, r3, lsl #2
    17c8:	00093700 	andeq	r3, r9, r0, lsl #14
    17cc:	00700a00 	rsbseq	r0, r0, r0, lsl #20
    17d0:	00740401 	rsbseq	r0, r4, r1, lsl #8
    17d4:	09580000 	ldmdbeq	r8, {}^	; <UNPREDICTABLE>
    17d8:	650b0000 	strvs	r0, [fp, #-0]
    17dc:	74040100 	strvc	r0, [r4], #-256	; 0x100
    17e0:	01000000 	mrseq	r0, (UNDEF: 0)
    17e4:	91000052 	qaddls	r0, r2, r0
    17e8:	04000001 	streq	r0, [r0], #-1
    17ec:	00072700 	andeq	r2, r7, r0, lsl #14
    17f0:	29010400 	stmdbcs	r1, {sl}
    17f4:	01000000 	mrseq	r0, (UNDEF: 0)
    17f8:	0000042d 	andeq	r0, r0, sp, lsr #8
    17fc:	000003da 	ldrdeq	r0, [r0], -sl
    1800:	00008b68 	andeq	r8, r0, r8, ror #22
    1804:	00000058 	andeq	r0, r0, r8, asr r0
    1808:	0000062f 	andeq	r0, r0, pc, lsr #12
    180c:	00041e02 	andeq	r1, r4, r2, lsl #28
    1810:	30280200 	eorcc	r0, r8, r0, lsl #4
    1814:	03000000 	movweq	r0, #0
    1818:	00000445 	andeq	r0, r0, r5, asr #8
    181c:	47000304 	strmi	r0, [r0, -r4, lsl #6]
    1820:	04000000 	streq	r0, [r0], #-0
    1824:	00000454 	andeq	r0, r0, r4, asr r4
    1828:	00000047 	andeq	r0, r0, r7, asr #32
    182c:	04050000 	streq	r0, [r5], #-0
    1830:	00044702 	andeq	r4, r4, r2, lsl #14
    1834:	25620200 	strbcs	r0, [r2, #-512]!	; 0x200
    1838:	06000000 	streq	r0, [r0], -r0
    183c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1840:	04070074 	streq	r0, [r7], #-116	; 0x74
    1844:	00015407 	andeq	r5, r1, r7, lsl #8
    1848:	06010700 	streq	r0, [r1], -r0, lsl #14
    184c:	0000009a 	muleq	r0, sl, r0
    1850:	95050207 	strls	r0, [r5, #-519]	; 0x207
    1854:	07000001 	streq	r0, [r0, -r1]
    1858:	017c0504 	cmneq	ip, r4, lsl #10
    185c:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    1860:	00017705 	andeq	r7, r1, r5, lsl #14
    1864:	08010700 	stmdaeq	r1, {r8, r9, sl}
    1868:	00000098 	muleq	r0, r8, r0
    186c:	0e070207 	cdpeq	2, 0, cr0, cr7, cr7, {0}
    1870:	07000001 	streq	r0, [r0, -r1]
    1874:	014f0704 	cmpeq	pc, r4, lsl #14
    1878:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    187c:	00014a07 	andeq	r4, r1, r7, lsl #20
    1880:	07040700 	streq	r0, [r4, -r0, lsl #14]
    1884:	0000016e 	andeq	r0, r0, lr, ror #2
    1888:	00a70408 	adceq	r0, r7, r8, lsl #8
    188c:	01070000 	mrseq	r0, (UNDEF: 7)
    1890:	0000a108 	andeq	sl, r0, r8, lsl #2
    1894:	b4040800 	strlt	r0, [r4], #-2048	; 0x800
    1898:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    189c:	000000a7 	andeq	r0, r0, r7, lsr #1
    18a0:	00043e0a 	andeq	r3, r4, sl, lsl #28
    18a4:	54060100 	strpl	r0, [r6], #-256	; 0x100
    18a8:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    18ac:	5800008b 	stmdapl	r0, {r0, r1, r3, r7}
    18b0:	01000000 	mrseq	r0, (UNDEF: 0)
    18b4:	0001439c 	muleq	r1, ip, r3
    18b8:	6d660b00 	vstmdbvs	r6!, {d16-d15}
    18bc:	06010074 			; <UNDEFINED> instruction: 0x06010074
    18c0:	000000ae 	andeq	r0, r0, lr, lsr #1
    18c4:	0c709102 	ldfeqp	f1, [r0], #-8
    18c8:	6675620d 	ldrbtvs	r6, [r5], -sp, lsl #4
    18cc:	43080100 	movwmi	r0, #33024	; 0x8100
    18d0:	05000001 	streq	r0, [r0, #-1]
    18d4:	009f0003 	addseq	r0, pc, r3
    18d8:	044f0e00 	strbeq	r0, [pc], #-3584	; 18e0 <_start-0x6720>
    18dc:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    18e0:	00000049 	andeq	r0, r0, r9, asr #32
    18e4:	0f5c9102 	svceq	0x005c9102
    18e8:	01007a73 	tsteq	r0, r3, ror sl
    18ec:	0000540c 	andeq	r5, r0, ip, lsl #8
    18f0:	00098300 	andeq	r8, r9, r0, lsl #6
    18f4:	8b901000 	blhi	fe4058fc <__bss_end__+0xfe3fb5f4>
    18f8:	01740000 	cmneq	r4, r0
    18fc:	01360000 	teqeq	r6, r0
    1900:	01110000 	tsteq	r1, r0
    1904:	4c910253 	lfmmi	f0, 4, [r1], {83}	; 0x53
    1908:	03520111 	cmpeq	r2, #1073741828	; 0x40000004
    190c:	11064891 			; <UNDEFINED> instruction: 0x11064891
    1910:	0a035101 	beq	d5d1c <__bss_end__+0xcba14>
    1914:	01110400 	tsteq	r1, r0, lsl #8
    1918:	00740250 	rsbseq	r0, r4, r0, asr r2
    191c:	8ba41200 	blhi	fe906124 <__bss_end__+0xfe8fbe1c>
    1920:	01110000 	tsteq	r1, r0
    1924:	00740250 	rsbseq	r0, r4, r0, asr r2
    1928:	a7130000 	ldrge	r0, [r3, -r0]
    192c:	54000000 	strpl	r0, [r0], #-0
    1930:	14000001 	strne	r0, [r0], #-1
    1934:	0000009a 	muleq	r0, sl, r0
    1938:	150003ff 	strne	r0, [r0, #-1023]	; 0x3ff
    193c:	00000054 	andeq	r0, r0, r4, asr r0
    1940:	00000163 	andeq	r0, r0, r3, ror #2
    1944:	0000ae16 	andeq	sl, r0, r6, lsl lr
    1948:	6e170000 	cdpvs	0, 1, cr0, cr7, cr0, {0}
    194c:	04000004 	streq	r0, [r0], #-4
    1950:	00016e20 	andeq	r6, r1, r0, lsr #28
    1954:	54040800 	strpl	r0, [r4], #-2048	; 0x800
    1958:	18000001 	stmdane	r0, {r0}
    195c:	0000043b 	andeq	r0, r0, fp, lsr r4
    1960:	00540205 	subseq	r0, r4, r5, lsl #4
    1964:	a1160000 	tstge	r6, r0
    1968:	16000000 	strne	r0, [r0], -r0
    196c:	00000054 	andeq	r0, r0, r4, asr r0
    1970:	0000ae16 	andeq	sl, r0, r6, lsl lr
    1974:	00491600 	subeq	r1, r9, r0, lsl #12
    1978:	00000000 	andeq	r0, r0, r0
    197c:	000000ee 	andeq	r0, r0, lr, ror #1
    1980:	08580004 	ldmdaeq	r8, {r2}^
    1984:	01040000 	mrseq	r0, (UNDEF: 4)
    1988:	00000029 	andeq	r0, r0, r9, lsr #32
    198c:	00045901 	andeq	r5, r4, r1, lsl #18
    1990:	0003da00 	andeq	sp, r3, r0, lsl #20
    1994:	008bc000 	addeq	ip, fp, r0
    1998:	00003400 	andeq	r3, r0, r0, lsl #8
    199c:	00073500 	andeq	r3, r7, r0, lsl #10
    19a0:	05040200 	streq	r0, [r4, #-512]	; 0x200
    19a4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    19a8:	54070403 	strpl	r0, [r7], #-1027	; 0x403
    19ac:	03000001 	movweq	r0, #1
    19b0:	009a0601 	addseq	r0, sl, r1, lsl #12
    19b4:	02030000 	andeq	r0, r3, #0
    19b8:	00019505 	andeq	r9, r1, r5, lsl #10
    19bc:	05040300 	streq	r0, [r4, #-768]	; 0x300
    19c0:	0000017c 	andeq	r0, r0, ip, ror r1
    19c4:	77050803 	strvc	r0, [r5, -r3, lsl #16]
    19c8:	03000001 	movweq	r0, #1
    19cc:	00980801 	addseq	r0, r8, r1, lsl #16
    19d0:	02030000 	andeq	r0, r3, #0
    19d4:	00010e07 	andeq	r0, r1, r7, lsl #28
    19d8:	07040300 	streq	r0, [r4, -r0, lsl #6]
    19dc:	0000014f 	andeq	r0, r0, pc, asr #2
    19e0:	4a070803 	bmi	1c39f4 <__bss_end__+0x1b96ec>
    19e4:	03000001 	movweq	r0, #1
    19e8:	016e0704 	cmneq	lr, r4, lsl #14
    19ec:	01030000 	mrseq	r0, (UNDEF: 3)
    19f0:	0000a108 	andeq	sl, r0, r8, lsl #2
    19f4:	7f040400 	svcvc	0x00040400
    19f8:	05000000 	streq	r0, [r0, #-0]
    19fc:	00000072 	andeq	r0, r0, r2, ror r0
    1a00:	00046506 	andeq	r6, r4, r6, lsl #10
    1a04:	25040100 	strcs	r0, [r4, #-256]	; 0x100
    1a08:	c0000000 	andgt	r0, r0, r0
    1a0c:	3400008b 	strcc	r0, [r0], #-139	; 0x8b
    1a10:	01000000 	mrseq	r0, (UNDEF: 0)
    1a14:	0000ab9c 	muleq	r0, ip, fp
    1a18:	00700700 	rsbseq	r0, r0, r0, lsl #14
    1a1c:	00790401 	rsbseq	r0, r9, r1, lsl #8
    1a20:	09ac0000 	stmibeq	ip!, {}	; <UNPREDICTABLE>
    1a24:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1a28:	00000025 	andeq	r0, r0, r5, lsr #32
    1a2c:	000000ba 	strheq	r0, [r0], -sl
    1a30:	00002509 	andeq	r2, r0, r9, lsl #10
    1a34:	730a0000 	movwvc	r0, #40960	; 0xa000
    1a38:	02000004 	andeq	r0, r0, #4
    1a3c:	0000c51d 	andeq	ip, r0, sp, lsl r5
    1a40:	ab040400 	blge	102a48 <__bss_end__+0xf8740>
    1a44:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1a48:	00000025 	andeq	r0, r0, r5, lsr #32
    1a4c:	000000da 	ldrdeq	r0, [r0], -sl
    1a50:	00007909 	andeq	r7, r0, r9, lsl #18
    1a54:	6e0b0000 	cdpvs	0, 0, cr0, cr11, cr0, {0}
    1a58:	01000004 	tsteq	r0, r4
    1a5c:	0000eb0c 	andeq	lr, r0, ip, lsl #22
    1a60:	b0030500 	andlt	r0, r3, r0, lsl #10
    1a64:	04000096 	streq	r0, [r0], #-150	; 0x96
    1a68:	0000cb04 	andeq	ip, r0, r4, lsl #22
    1a6c:	06540000 	ldrbeq	r0, [r4], -r0
    1a70:	00040000 	andeq	r0, r4, r0
    1a74:	000008f1 	strdeq	r0, [r0], -r1
    1a78:	00290104 	eoreq	r0, r9, r4, lsl #2
    1a7c:	ab010000 	blge	41a84 <__bss_end__+0x3777c>
    1a80:	da000004 	ble	1a98 <_start-0x6568>
    1a84:	f4000003 	vst4.8	{d0-d3}, [r0], r3
    1a88:	f000008b 			; <UNDEFINED> instruction: 0xf000008b
    1a8c:	cf000004 	svcgt	0x00000004
    1a90:	02000007 	andeq	r0, r0, #7
    1a94:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1a98:	04030074 	streq	r0, [r3], #-116	; 0x74
    1a9c:	00015407 	andeq	r5, r1, r7, lsl #8
    1aa0:	06010300 	streq	r0, [r1], -r0, lsl #6
    1aa4:	0000009a 	muleq	r0, sl, r0
    1aa8:	95050203 	strls	r0, [r5, #-515]	; 0x203
    1aac:	03000001 	movweq	r0, #1
    1ab0:	017c0504 	cmneq	ip, r4, lsl #10
    1ab4:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1ab8:	00017705 	andeq	r7, r1, r5, lsl #14
    1abc:	08010300 	stmdaeq	r1, {r8, r9}
    1ac0:	00000098 	muleq	r0, r8, r0
    1ac4:	0e070203 	cdpeq	2, 0, cr0, cr7, cr3, {0}
    1ac8:	03000001 	movweq	r0, #1
    1acc:	014f0704 	cmpeq	pc, r4, lsl #14
    1ad0:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1ad4:	00014a07 	andeq	r4, r1, r7, lsl #20
    1ad8:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1adc:	0000016e 	andeq	r0, r0, lr, ror #2
    1ae0:	04050404 	streq	r0, [r5], #-1028	; 0x404
    1ae4:	0000007a 	andeq	r0, r0, sl, ror r0
    1ae8:	a1080103 	tstge	r8, r3, lsl #2
    1aec:	05000000 	streq	r0, [r0, #-0]
    1af0:	00008704 	andeq	r8, r0, r4, lsl #14
    1af4:	007a0600 	rsbseq	r0, sl, r0, lsl #12
    1af8:	1e070000 	cdpne	0, 0, cr0, cr7, cr0, {0}
    1afc:	02000004 	andeq	r0, r0, #4
    1b00:	00009728 	andeq	r9, r0, r8, lsr #14
    1b04:	04450800 	strbeq	r0, [r5], #-2048	; 0x800
    1b08:	04040000 	streq	r0, [r4], #-0
    1b0c:	0000ae00 	andeq	sl, r0, r0, lsl #28
    1b10:	04540900 	ldrbeq	r0, [r4], #-2304	; 0x900
    1b14:	00720000 	rsbseq	r0, r2, r0
    1b18:	00000000 	andeq	r0, r0, r0
    1b1c:	00044707 	andeq	r4, r4, r7, lsl #14
    1b20:	8c620200 	sfmhi	f0, 2, [r2], #-0
    1b24:	0a000000 	beq	1b2c <_start-0x64d4>
    1b28:	0000048d 	andeq	r0, r0, sp, lsl #9
    1b2c:	00252701 	eoreq	r2, r5, r1, lsl #14
    1b30:	8bf40000 	blhi	ffd01b38 <__bss_end__+0xffcf7830>
    1b34:	00140000 	andseq	r0, r4, r0
    1b38:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b3c:	000000e0 	andeq	r0, r0, r0, ror #1
    1b40:	0100630b 	tsteq	r0, fp, lsl #6
    1b44:	00002527 	andeq	r2, r0, r7, lsr #10
    1b48:	0009ca00 	andeq	ip, r9, r0, lsl #20
    1b4c:	700c0000 	andvc	r0, ip, r0
    1b50:	01006461 	tsteq	r0, r1, ror #8
    1b54:	0000742e 	andeq	r7, r0, lr, lsr #8
    1b58:	008c0800 	addeq	r0, ip, r0, lsl #16
    1b5c:	00002c00 	andeq	r2, r0, r0, lsl #24
    1b60:	309c0100 	addscc	r0, ip, r0, lsl #2
    1b64:	0b000001 	bleq	1b70 <_start-0x6490>
    1b68:	2e010070 	mcrcs	0, 0, r0, cr1, cr0, {3}
    1b6c:	00000074 	andeq	r0, r0, r4, ror r0
    1b70:	000009f8 	strdeq	r0, [r0], -r8
    1b74:	00049d0d 	andeq	r9, r4, sp, lsl #26
    1b78:	742e0100 	strtvc	r0, [lr], #-256	; 0x100
    1b7c:	23000000 	movwcs	r0, #0
    1b80:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
    1b84:	000004cb 	andeq	r0, r0, fp, asr #9
    1b88:	00252e01 	eoreq	r2, r5, r1, lsl #28
    1b8c:	52010000 	andpl	r0, r1, #0
    1b90:	6e656c0f 	cdpvs	12, 6, cr6, cr5, cr15, {0}
    1b94:	252f0100 	strcs	r0, [pc, #-256]!	; 1a9c <_start-0x6564>
    1b98:	01000000 	mrseq	r0, (UNDEF: 0)
    1b9c:	850a0051 	strhi	r0, [sl, #-81]	; 0x51
    1ba0:	01000004 	tsteq	r0, r4
    1ba4:	00007437 	andeq	r7, r0, r7, lsr r4
    1ba8:	008c3400 	addeq	r3, ip, r0, lsl #8
    1bac:	00004000 	andeq	r4, r0, r0
    1bb0:	9c9c0100 	ldflss	f0, [ip], {0}
    1bb4:	0b000001 	bleq	1bc0 <_start-0x6440>
    1bb8:	00747364 	rsbseq	r7, r4, r4, ror #6
    1bbc:	00743701 	rsbseq	r3, r4, r1, lsl #14
    1bc0:	0a440000 	beq	1101bc8 <__bss_end__+0x10f78c0>
    1bc4:	6e0b0000 	cdpvs	0, 0, cr0, cr11, cr0, {0}
    1bc8:	25370100 	ldrcs	r0, [r7, #-256]!	; 0x100
    1bcc:	7c000000 	stcvc	0, cr0, [r0], {-0}
    1bd0:	0b00000a 	bleq	1c00 <_start-0x6400>
    1bd4:	37010070 	smlsdxcc	r1, r0, r0, r0
    1bd8:	00000074 	andeq	r0, r0, r4, ror r0
    1bdc:	00000a9d 	muleq	r0, sp, sl
    1be0:	0002e10d 	andeq	lr, r2, sp, lsl #2
    1be4:	74370100 	ldrtvc	r0, [r7], #-256	; 0x100
    1be8:	d3000000 	movwle	r0, #0
    1bec:	1000000a 	andne	r0, r0, sl
    1bf0:	006e656c 	rsbeq	r6, lr, ip, ror #10
    1bf4:	00253901 	eoreq	r3, r5, r1, lsl #18
    1bf8:	0af10000 	beq	ffc41c00 <__bss_end__+0xffc378f8>
    1bfc:	730f0000 	movwvc	r0, #61440	; 0xf000
    1c00:	743d0100 	ldrtvc	r0, [sp], #-256	; 0x100
    1c04:	01000000 	mrseq	r0, (UNDEF: 0)
    1c08:	d90a0050 	stmdble	sl, {r4, r6}
    1c0c:	01000004 	tsteq	r0, r4
    1c10:	00007447 	andeq	r7, r0, r7, asr #8
    1c14:	008c7400 	addeq	r7, ip, r0, lsl #8
    1c18:	00019800 	andeq	r9, r1, r0, lsl #16
    1c1c:	ca9c0100 	bgt	fe702024 <__bss_end__+0xfe6f7d1c>
    1c20:	0d000002 	stceq	0, cr0, [r0, #-8]
    1c24:	0000049d 	muleq	r0, sp, r4
    1c28:	002c4701 	eoreq	r4, ip, r1, lsl #14
    1c2c:	0b180000 	bleq	601c34 <__bss_end__+0x5f792c>
    1c30:	640b0000 	strvs	r0, [fp], #-0
    1c34:	01007473 	tsteq	r0, r3, ror r4
    1c38:	00007447 	andeq	r7, r0, r7, asr #8
    1c3c:	000b4600 	andeq	r4, fp, r0, lsl #12
    1c40:	006e0b00 	rsbeq	r0, lr, r0, lsl #22
    1c44:	00254701 	eoreq	r4, r5, r1, lsl #14
    1c48:	0bb40000 	bleq	fed01c50 <__bss_end__+0xfecf7948>
    1c4c:	760b0000 	strvc	r0, [fp], -r0
    1c50:	01006c61 	tsteq	r0, r1, ror #24
    1c54:	00002547 	andeq	r2, r0, r7, asr #10
    1c58:	000be000 	andeq	lr, fp, r0
    1c5c:	04cb0d00 	strbeq	r0, [fp], #3328	; 0xd00
    1c60:	47010000 	strmi	r0, [r1, -r0]
    1c64:	00000025 	andeq	r0, r0, r5, lsr #32
    1c68:	00000c6a 	andeq	r0, r0, sl, ror #24
    1c6c:	0004a20e 	andeq	sl, r4, lr, lsl #4
    1c70:	25470100 	strbcs	r0, [r7, #-256]	; 0x100
    1c74:	02000000 	andeq	r0, r0, #0
    1c78:	620f0491 	andvs	r0, pc, #-1862270976	; 0x91000000
    1c7c:	01006675 	tsteq	r0, r5, ror r6
    1c80:	0002ca4c 	andeq	ip, r2, ip, asr #20
    1c84:	a8910300 	ldmge	r1, {r8, r9}
    1c88:	0070107f 	rsbseq	r1, r0, pc, ror r0
    1c8c:	00744c01 	rsbseq	r4, r4, r1, lsl #24
    1c90:	0c940000 	ldceq	0, cr0, [r4], {0}
    1c94:	75100000 	ldrvc	r0, [r0, #-0]
    1c98:	2c4d0100 	stfcse	f0, [sp], {-0}
    1c9c:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
    1ca0:	1100000d 	tstne	r0, sp
    1ca4:	00000121 	andeq	r0, r0, r1, lsr #2
    1ca8:	000002ea 	andeq	r0, r0, sl, ror #5
    1cac:	9cb80305 	ldcls	3, cr0, [r8], #20
    1cb0:	e0120000 	ands	r0, r2, r0
    1cb4:	7400008c 	strvc	r0, [r0], #-140	; 0x8c
    1cb8:	61000000 	mrsvs	r0, (UNDEF: 0)
    1cbc:	13000002 	movwne	r0, #2
    1cc0:	0000047f 	andeq	r0, r0, pc, ror r4
    1cc4:	002c5201 	eoreq	r5, ip, r1, lsl #4
    1cc8:	0e490000 	cdpeq	0, 4, cr0, cr9, cr0, {0}
    1ccc:	14000000 	strne	r0, [r0], #-0
    1cd0:	00008dc4 	andeq	r8, r0, r4, asr #27
    1cd4:	0000063a 	andeq	r0, r0, sl, lsr r6
    1cd8:	00000290 	muleq	r0, r0, r2
    1cdc:	02530115 	subseq	r0, r3, #1073741829	; 0x40000005
    1ce0:	01157508 	tsteq	r5, r8, lsl #10
    1ce4:	b8030552 	stmdalt	r3, {r1, r4, r6, r8, sl}
    1ce8:	1500009c 	strne	r0, [r0, #-156]	; 0x9c
    1cec:	03055101 	movweq	r5, #20737	; 0x5101
    1cf0:	00009cf0 	strdeq	r9, [r0], -r0
    1cf4:	05500115 	ldrbeq	r0, [r0, #-277]	; 0x115
    1cf8:	009cdc03 	addseq	sp, ip, r3, lsl #24
    1cfc:	c8160000 	ldmdagt	r6, {}	; <UNPREDICTABLE>
    1d00:	5000008d 	andpl	r0, r0, sp, lsl #1
    1d04:	14000006 	strne	r0, [r0], #-6
    1d08:	00008dd4 	ldrdeq	r8, [r0], -r4
    1d0c:	000000e0 	andeq	r0, r0, r0, ror #1
    1d10:	000002ad 	andeq	r0, r0, sp, lsr #5
    1d14:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    1d18:	1700007d 	smlsdxne	r0, sp, r0, r0
    1d1c:	00008de8 	andeq	r8, r0, r8, ror #27
    1d20:	00000130 	andeq	r0, r0, r0, lsr r1
    1d24:	02530115 	subseq	r0, r3, #1073741829	; 0x40000005
    1d28:	0115007d 	tsteq	r5, sp, ror r0
    1d2c:	00740251 	rsbseq	r0, r4, r1, asr r2
    1d30:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    1d34:	00000075 	andeq	r0, r0, r5, ror r0
    1d38:	00007a18 	andeq	r7, r0, r8, lsl sl
    1d3c:	0002da00 	andeq	sp, r2, r0, lsl #20
    1d40:	006b1900 	rsbeq	r1, fp, r0, lsl #18
    1d44:	003f0000 	eorseq	r0, pc, r0
    1d48:	00007a18 	andeq	r7, r0, r8, lsl sl
    1d4c:	0002ea00 	andeq	lr, r2, r0, lsl #20
    1d50:	006b1900 	rsbeq	r1, fp, r0, lsl #18
    1d54:	00040000 	andeq	r0, r4, r0
    1d58:	0002da06 	andeq	sp, r2, r6, lsl #20
    1d5c:	04bc1a00 	ldrteq	r1, [ip], #2560	; 0xa00
    1d60:	1f010000 	svcne	0x00010000
    1d64:	00008e0c 	andeq	r8, r0, ip, lsl #28
    1d68:	00000050 	andeq	r0, r0, r0, asr r0
    1d6c:	036a9c01 	cmneq	sl, #256	; 0x100
    1d70:	d10d0000 	mrsle	r0, (UNDEF: 13)
    1d74:	01000004 	tsteq	r0, r4
    1d78:	0003791f 	andeq	r7, r3, pc, lsl r9
    1d7c:	000e7500 	andeq	r7, lr, r0, lsl #10
    1d80:	04950d00 	ldreq	r0, [r5], #3328	; 0xd00
    1d84:	1f010000 	svcne	0x00010000
    1d88:	0000038e 	andeq	r0, r0, lr, lsl #7
    1d8c:	00000ea1 	andeq	r0, r0, r1, lsr #29
    1d90:	00012111 	andeq	r2, r1, r1, lsl r1
    1d94:	0003a400 	andeq	sl, r3, r0, lsl #8
    1d98:	c0030500 	andgt	r0, r3, r0, lsl #10
    1d9c:	1400009c 	strne	r0, [r0], #-156	; 0x9c
    1da0:	00008e2c 	andeq	r8, r0, ip, lsr #28
    1da4:	0000063a 	andeq	r0, r0, sl, lsr r6
    1da8:	00000360 	andeq	r0, r0, r0, ror #6
    1dac:	02530115 	subseq	r0, r3, #1073741829	; 0x40000005
    1db0:	01152008 	tsteq	r5, r8
    1db4:	c0030552 	andgt	r0, r3, r2, asr r5
    1db8:	1500009c 	strne	r0, [r0, #-156]	; 0x9c
    1dbc:	03055101 	movweq	r5, #20737	; 0x5101
    1dc0:	00009cf0 	strdeq	r9, [r0], -r0
    1dc4:	05500115 	ldrbeq	r0, [r0, #-277]	; 0x115
    1dc8:	009d2803 	addseq	r2, sp, r3, lsl #16
    1dcc:	30160000 	andscc	r0, r6, r0
    1dd0:	5000008e 	andpl	r0, r0, lr, lsl #1
    1dd4:	00000006 	andeq	r0, r0, r6
    1dd8:	0000251b 	andeq	r2, r0, fp, lsl r5
    1ddc:	00037900 	andeq	r7, r3, r0, lsl #18
    1de0:	00251c00 	eoreq	r1, r5, r0, lsl #24
    1de4:	05000000 	streq	r0, [r0, #-0]
    1de8:	00036a04 	andeq	r6, r3, r4, lsl #20
    1dec:	00251b00 	eoreq	r1, r5, r0, lsl #22
    1df0:	038e0000 	orreq	r0, lr, #0
    1df4:	811c0000 	tsthi	ip, r0
    1df8:	00000000 	andeq	r0, r0, r0
    1dfc:	037f0405 	cmneq	pc, #83886080	; 0x5000000
    1e00:	7a180000 	bvc	601e08 <__bss_end__+0x5f7b00>
    1e04:	a4000000 	strge	r0, [r0], #-0
    1e08:	19000003 	stmdbne	r0, {r0, r1}
    1e0c:	0000006b 	andeq	r0, r0, fp, rrx
    1e10:	9406000e 	strls	r0, [r6], #-14
    1e14:	1d000003 	stcne	0, cr0, [r0, #-12]
    1e18:	0000043b 	andeq	r0, r0, fp, lsr r4
    1e1c:	00257d01 	eoreq	r7, r5, r1, lsl #26
    1e20:	8e5c0000 	cdphi	0, 5, cr0, cr12, cr0, {0}
    1e24:	02880000 	addeq	r0, r8, #0
    1e28:	9c010000 	stcls	0, cr0, [r1], {-0}
    1e2c:	000005ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1e30:	6675620b 	ldrbtvs	r6, [r5], -fp, lsl #4
    1e34:	747d0100 	ldrbtvc	r0, [sp], #-256	; 0x100
    1e38:	cd000000 	stcgt	0, cr0, [r0, #-0]
    1e3c:	0b00000e 	bleq	1e7c <_start-0x6184>
    1e40:	7d01006e 	stcvc	0, cr0, [r1, #-440]	; 0xfffffe48
    1e44:	00000025 	andeq	r0, r0, r5, lsr #32
    1e48:	00000ef9 	strdeq	r0, [r0], -r9
    1e4c:	746d660b 	strbtvc	r6, [sp], #-1547	; 0x60b
    1e50:	817d0100 	cmnhi	sp, r0, lsl #2
    1e54:	27000000 	strcs	r0, [r0, -r0]
    1e58:	0d00000f 	stceq	0, cr0, [r0, #-60]	; 0xffffffc4
    1e5c:	0000044f 	andeq	r0, r0, pc, asr #8
    1e60:	00ae7d01 	adceq	r7, lr, r1, lsl #26
    1e64:	0f5b0000 	svceq	0x005b0000
    1e68:	70100000 	andsvc	r0, r0, r0
    1e6c:	747e0100 	ldrbtvc	r0, [lr], #-256	; 0x100
    1e70:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
    1e74:	1000000f 	andne	r0, r0, pc
    1e78:	7e010065 	cdpvc	0, 0, cr0, cr1, cr5, {3}
    1e7c:	00000074 	andeq	r0, r0, r4, ror r0
    1e80:	00000fec 	andeq	r0, r0, ip, ror #31
    1e84:	00012111 	andeq	r2, r1, r1, lsl r1
    1e88:	00060f00 	andeq	r0, r6, r0, lsl #30
    1e8c:	d0030500 	andle	r0, r3, r0, lsl #10
    1e90:	1e00009c 	mcrne	0, 0, r0, cr0, cr12, {4}
    1e94:	00008eb0 			; <UNDEFINED> instruction: 0x00008eb0
    1e98:	000001f4 	strdeq	r0, [r0], -r4
    1e9c:	01007310 	tsteq	r0, r0, lsl r3
    1ea0:	0000748b 	andeq	r7, r0, fp, lsl #9
    1ea4:	00101300 	andseq	r1, r0, r0, lsl #6
    1ea8:	756e0f00 	strbvc	r0, [lr, #-3840]!	; 0xf00
    1eac:	8b01006d 	blhi	42068 <__bss_end__+0x37d60>
    1eb0:	00000614 	andeq	r0, r0, r4, lsl r6
    1eb4:	7ed89103 	atnvce	f1, f3
    1eb8:	0004cb13 	andeq	ip, r4, r3, lsl fp
    1ebc:	2c8c0100 	stfcss	f0, [ip], {0}
    1ec0:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    1ec4:	14000010 	strne	r0, [r0], #-16
    1ec8:	00008ee0 	andeq	r8, r0, r0, ror #29
    1ecc:	000000b9 	strheq	r0, [r0], -r9
    1ed0:	0000046d 	andeq	r0, r0, sp, ror #8
    1ed4:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    1ed8:	14000075 	strne	r0, [r0], #-117	; 0x75
    1edc:	00008f04 	andeq	r8, r0, r4, lsl #30
    1ee0:	0000063a 	andeq	r0, r0, sl, lsr r6
    1ee4:	0000049c 	muleq	r0, ip, r4
    1ee8:	02530115 	subseq	r0, r3, #1073741829	; 0x40000005
    1eec:	01159208 	tsteq	r5, r8, lsl #4
    1ef0:	d0030552 	andle	r0, r3, r2, asr r5
    1ef4:	1500009c 	strne	r0, [r0, #-156]	; 0x9c
    1ef8:	03055101 	movweq	r5, #20737	; 0x5101
    1efc:	00009cf0 	strdeq	r9, [r0], -r0
    1f00:	05500115 	ldrbeq	r0, [r0, #-277]	; 0x115
    1f04:	009d4003 	addseq	r4, sp, r3
    1f08:	08160000 	ldmdaeq	r6, {}	; <UNPREDICTABLE>
    1f0c:	5000008f 	andpl	r0, r0, pc, lsl #1
    1f10:	14000006 	strne	r0, [r0], #-6
    1f14:	00008f88 	andeq	r8, r0, r8, lsl #31
    1f18:	0000063a 	andeq	r0, r0, sl, lsr r6
    1f1c:	000004d4 	ldrdeq	r0, [r0], -r4
    1f20:	02530115 	subseq	r0, r3, #1073741829	; 0x40000005
    1f24:	01159808 	tsteq	r5, r8, lsl #16
    1f28:	d0030552 	andle	r0, r3, r2, asr r5
    1f2c:	1500009c 	strne	r0, [r0, #-156]	; 0x9c
    1f30:	03055101 	movweq	r5, #20737	; 0x5101
    1f34:	00009cf0 	strdeq	r9, [r0], -r0
    1f38:	05500115 	ldrbeq	r0, [r0, #-277]	; 0x115
    1f3c:	009d5c03 	addseq	r5, sp, r3, lsl #24
    1f40:	8c160000 	ldchi	0, cr0, [r6], {-0}
    1f44:	5000008f 	andpl	r0, r0, pc, lsl #1
    1f48:	14000006 	strne	r0, [r0], #-6
    1f4c:	00008fb0 			; <UNDEFINED> instruction: 0x00008fb0
    1f50:	0000019c 	muleq	r0, ip, r1
    1f54:	0000050a 	andeq	r0, r0, sl, lsl #10
    1f58:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    1f5c:	01158008 	tsteq	r5, r8
    1f60:	d0910351 	addsle	r0, r1, r1, asr r3
    1f64:	5001157e 	andpl	r1, r1, lr, ror r5
    1f68:	02153a01 	andseq	r3, r5, #4096	; 0x1000
    1f6c:	3101047d 	tstcc	r1, sp, ror r4
    1f70:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    1f74:	00007702 	andeq	r7, r0, r2, lsl #14
    1f78:	008fd814 	addeq	sp, pc, r4, lsl r8	; <UNPREDICTABLE>
    1f7c:	00019c00 	andeq	r9, r1, r0, lsl #24
    1f80:	00053700 	andeq	r3, r5, r0, lsl #14
    1f84:	52011500 	andpl	r1, r1, #0, 10
    1f88:	15800802 	strne	r0, [r0, #2050]	; 0x802
    1f8c:	91035101 	tstls	r3, r1, lsl #2
    1f90:	01157ed0 			; <UNDEFINED> instruction: 0x01157ed0
    1f94:	153a0150 	ldrne	r0, [sl, #-336]!	; 0x150
    1f98:	01047d02 	tsteq	r4, r2, lsl #26
    1f9c:	7d021530 	cfstr32vc	mvfx1, [r2, #-192]	; 0xffffff40
    1fa0:	00770200 	rsbseq	r0, r7, r0, lsl #4
    1fa4:	90001400 	andls	r1, r0, r0, lsl #8
    1fa8:	019c0000 	orrseq	r0, ip, r0
    1fac:	05640000 	strbeq	r0, [r4, #-0]!
    1fb0:	01150000 	tsteq	r5, r0
    1fb4:	80080252 	andhi	r0, r8, r2, asr r2
    1fb8:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    1fbc:	157ed091 	ldrbne	sp, [lr, #-145]!	; 0x91
    1fc0:	40015001 	andmi	r5, r1, r1
    1fc4:	047d0215 	ldrbteq	r0, [sp], #-533	; 0x215
    1fc8:	02153001 	andseq	r3, r5, #1
    1fcc:	7702007d 	smlsdxvc	r2, sp, r0, r0
    1fd0:	28140000 	ldmdacs	r4, {}	; <UNPREDICTABLE>
    1fd4:	9c000090 	stcls	0, cr0, [r0], {144}	; 0x90
    1fd8:	91000001 	tstls	r0, r1
    1fdc:	15000005 	strne	r0, [r0, #-5]
    1fe0:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    1fe4:	51011580 	smlabbpl	r1, r0, r5, r1
    1fe8:	7ed09103 	atnvcs	f1, f3
    1fec:	01500115 	cmpeq	r0, r5, lsl r1
    1ff0:	7d021532 	cfstr32vc	mvfx1, [r2, #-200]	; 0xffffff38
    1ff4:	15300104 	ldrne	r0, [r0, #-260]!	; 0x104
    1ff8:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    1ffc:	14000077 	strne	r0, [r0], #-119	; 0x77
    2000:	0000905c 	andeq	r9, r0, ip, asr r0
    2004:	0000019c 	muleq	r0, ip, r1
    2008:	000005be 			; <UNDEFINED> instruction: 0x000005be
    200c:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    2010:	01158008 	tsteq	r5, r8
    2014:	d0910351 	addsle	r0, r1, r1, asr r3
    2018:	5001157e 	andpl	r1, r1, lr, ror r5
    201c:	02153801 	andseq	r3, r5, #65536	; 0x10000
    2020:	3001047d 	andcc	r0, r1, sp, ror r4
    2024:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    2028:	00007702 	andeq	r7, r0, r2, lsl #14
    202c:	00907814 	addseq	r7, r0, r4, lsl r8
    2030:	00063a00 	andeq	r3, r6, r0, lsl #20
    2034:	0005f400 	andeq	pc, r5, r0, lsl #8
    2038:	53011500 	movwpl	r1, #5376	; 0x1500
    203c:	15b90802 	ldrne	r0, [r9, #2050]!	; 0x802
    2040:	03055201 	movweq	r5, #20993	; 0x5201
    2044:	00009cd0 	ldrdeq	r9, [r0], -r0
    2048:	05510115 	ldrbeq	r0, [r1, #-277]	; 0x115
    204c:	009cf003 	addseq	pc, ip, r3
    2050:	50011500 	andpl	r1, r1, r0, lsl #10
    2054:	9d840305 	stcls	3, cr0, [r4, #20]
    2058:	02150000 	andseq	r0, r5, #0
    205c:	7902007d 	stmdbvc	r2, {r0, r2, r3, r4, r5, r6}
    2060:	7c160000 	ldcvc	0, cr0, [r6], {-0}
    2064:	50000090 	mulpl	r0, r0, r0
    2068:	00000006 	andeq	r0, r0, r6
    206c:	007a1800 	rsbseq	r1, sl, r0, lsl #16
    2070:	060f0000 	streq	r0, [pc], -r0
    2074:	6b190000 	blvs	64207c <__bss_end__+0x637d74>
    2078:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    207c:	05ff0600 	ldrbeq	r0, [pc, #1536]!	; 2684 <_start-0x597c>
    2080:	7a180000 	bvc	602088 <__bss_end__+0x5f7d80>
    2084:	24000000 	strcs	r0, [r0], #-0
    2088:	19000006 	stmdbne	r0, {r1, r2}
    208c:	0000006b 	andeq	r0, r0, fp, rrx
    2090:	731f007f 	tstvc	pc, #127	; 0x7f
    2094:	03000004 	movweq	r0, #4
    2098:	0003791d 	andeq	r7, r3, sp, lsl r9
    209c:	046e1f00 	strbteq	r1, [lr], #-3840	; 0xf00
    20a0:	20030000 	andcs	r0, r3, r0
    20a4:	0000038e 	andeq	r0, r0, lr, lsl #7
    20a8:	00043e20 	andeq	r3, r4, r0, lsr #28
    20ac:	25270300 	strcs	r0, [r7, #-768]!	; 0x300
    20b0:	50000000 	andpl	r0, r0, r0
    20b4:	1c000006 	stcne	0, cr0, [r0], {6}
    20b8:	00000081 	andeq	r0, r0, r1, lsl #1
    20bc:	1e220021 	cdpne	0, 2, cr0, cr2, cr1, {1}
    20c0:	03000000 	movweq	r0, #0
    20c4:	00ff005c 	rscseq	r0, pc, ip, asr r0	; <UNPREDICTABLE>
    20c8:	00040000 	andeq	r0, r4, r0
    20cc:	00000acf 	andeq	r0, r0, pc, asr #21
    20d0:	00290104 	eoreq	r0, r9, r4, lsl #2
    20d4:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    20d8:	da000004 	ble	20f0 <_start-0x5f10>
    20dc:	e4000003 	str	r0, [r0], #-3
    20e0:	28000090 	stmdacs	r0, {r4, r7}
    20e4:	af000000 	svcge	0x00000000
    20e8:	02000009 	andeq	r0, r0, #9
    20ec:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    20f0:	04030074 	streq	r0, [r3], #-116	; 0x74
    20f4:	00015407 	andeq	r5, r1, r7, lsl #8
    20f8:	06010300 	streq	r0, [r1], -r0, lsl #6
    20fc:	0000009a 	muleq	r0, sl, r0
    2100:	95050203 	strls	r0, [r5, #-515]	; 0x203
    2104:	03000001 	movweq	r0, #1
    2108:	017c0504 	cmneq	ip, r4, lsl #10
    210c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2110:	00017705 	andeq	r7, r1, r5, lsl #14
    2114:	08010300 	stmdaeq	r1, {r8, r9}
    2118:	00000098 	muleq	r0, r8, r0
    211c:	0e070203 	cdpeq	2, 0, cr0, cr7, cr3, {0}
    2120:	03000001 	movweq	r0, #1
    2124:	014f0704 	cmpeq	pc, r4, lsl #14
    2128:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    212c:	00014a07 	andeq	r4, r1, r7, lsl #20
    2130:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2134:	0000016e 	andeq	r0, r0, lr, ror #2
    2138:	a1080103 	tstge	r8, r3, lsl #2
    213c:	04000000 	streq	r0, [r0], #-0
    2140:	00007f04 	andeq	r7, r0, r4, lsl #30
    2144:	00720500 	rsbseq	r0, r2, r0, lsl #10
    2148:	a6060000 	strge	r0, [r6], -r0
    214c:	01000000 	mrseq	r0, (UNDEF: 0)
    2150:	0090e404 	addseq	lr, r0, r4, lsl #8
    2154:	00002800 	andeq	r2, r0, r0, lsl #16
    2158:	ca9c0100 	bgt	fe702560 <__bss_end__+0xfe6f8258>
    215c:	07000000 	streq	r0, [r0, -r0]
    2160:	000090f8 	strdeq	r9, [r0], -r8
    2164:	000000ac 	andeq	r0, r0, ip, lsr #1
    2168:	05500108 	ldrbeq	r0, [r0, #-264]	; 0x108
    216c:	009dbc03 	addseq	fp, sp, r3, lsl #24
    2170:	00090000 	andeq	r0, r9, r0
    2174:	ea000091 	b	23c0 <_start-0x5c40>
    2178:	c0000000 	andgt	r0, r0, r0
    217c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2180:	08025001 	stmdaeq	r2, {r0, ip, lr}
    2184:	040a0064 	streq	r0, [sl], #-100	; 0x64
    2188:	fb000091 	blx	23d6 <_start-0x5c2a>
    218c:	00000000 	andeq	r0, r0, r0
    2190:	0000250b 	andeq	r2, r0, fp, lsl #10
    2194:	0000d900 	andeq	sp, r0, r0, lsl #18
    2198:	00790c00 	rsbseq	r0, r9, r0, lsl #24
    219c:	0d000000 	stceq	0, cr0, [r0, #-0]
    21a0:	0000046e 	andeq	r0, r0, lr, ror #8
    21a4:	00e42002 	rsceq	r2, r4, r2
    21a8:	04040000 	streq	r0, [r4], #-0
    21ac:	000000ca 	andeq	r0, r0, sl, asr #1
    21b0:	0004f80e 	andeq	pc, r4, lr, lsl #16
    21b4:	fb4d0200 	blx	13429be <__bss_end__+0x13386b6>
    21b8:	0c000000 	stceq	0, cr0, [r0], {-0}
    21bc:	0000002c 	andeq	r0, r0, ip, lsr #32
    21c0:	001e0f00 	andseq	r0, lr, r0, lsl #30
    21c4:	5c020000 	stcpl	0, cr0, [r2], {-0}
    21c8:	00010b00 	andeq	r0, r1, r0, lsl #22
    21cc:	99000400 	stmdbls	r0, {sl}
    21d0:	0400000b 	streq	r0, [r0], #-11
    21d4:	00002901 	andeq	r2, r0, r1, lsl #18
    21d8:	05010100 	streq	r0, [r1, #-256]	; 0x100
    21dc:	03da0000 	bicseq	r0, sl, #0
    21e0:	910c0000 	mrsls	r0, (UNDEF: 12)
    21e4:	00340000 	eorseq	r0, r4, r0
    21e8:	0a460000 	beq	11821f0 <__bss_end__+0x1177ee8>
    21ec:	04020000 	streq	r0, [r2], #-0
    21f0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    21f4:	07040300 	streq	r0, [r4, -r0, lsl #6]
    21f8:	00000154 	andeq	r0, r0, r4, asr r1
    21fc:	9a060103 	bls	182610 <__bss_end__+0x178308>
    2200:	03000000 	movweq	r0, #0
    2204:	01950502 	orrseq	r0, r5, r2, lsl #10
    2208:	04030000 	streq	r0, [r3], #-0
    220c:	00017c05 	andeq	r7, r1, r5, lsl #24
    2210:	05080300 	streq	r0, [r8, #-768]	; 0x300
    2214:	00000177 	andeq	r0, r0, r7, ror r1
    2218:	98080103 	stmdals	r8, {r0, r1, r8}
    221c:	03000000 	movweq	r0, #0
    2220:	010e0702 	tsteq	lr, r2, lsl #14
    2224:	04030000 	streq	r0, [r3], #-0
    2228:	00014f07 	andeq	r4, r1, r7, lsl #30
    222c:	07080300 	streq	r0, [r8, -r0, lsl #6]
    2230:	0000014a 	andeq	r0, r0, sl, asr #2
    2234:	6e070403 	cdpvs	4, 0, cr0, cr7, cr3, {0}
    2238:	03000001 	movweq	r0, #1
    223c:	00a10801 	adceq	r0, r1, r1, lsl #16
    2240:	37040000 	strcc	r0, [r4, -r0]
    2244:	01000005 	tsteq	r0, r5
    2248:	00910c03 	addseq	r0, r1, r3, lsl #24
    224c:	00003400 	andeq	r3, r0, r0, lsl #8
    2250:	de9c0100 	fmllee	f0, f4, f0
    2254:	05000000 	streq	r0, [r0, #-0]
    2258:	00000515 	andeq	r0, r0, r5, lsl r5
    225c:	00250401 	eoreq	r0, r5, r1, lsl #8
    2260:	23050000 	movwcs	r0, #20480	; 0x5000
    2264:	01000005 	tsteq	r0, r5
    2268:	00002504 	andeq	r2, r0, r4, lsl #10
    226c:	00800600 	addeq	r0, r0, r0, lsl #12
    2270:	05010000 	streq	r0, [r1, #-0]
    2274:	000000b1 	strheq	r0, [r0], -r1
    2278:	62080007 	andvs	r0, r8, #7
    227c:	01007373 	tsteq	r0, r3, ror r3
    2280:	0000de07 	andeq	sp, r0, r7, lsl #28
    2284:	00109200 	andseq	r9, r0, r0, lsl #4
    2288:	052f0900 	streq	r0, [pc, #-2304]!	; 1990 <_start-0x6670>
    228c:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    2290:	000000de 	ldrdeq	r0, [r0], -lr
    2294:	0091340a 	addseq	r3, r1, sl, lsl #8
    2298:	0000fa00 	andeq	pc, r0, r0, lsl #20
    229c:	91380a00 	teqls	r8, r0, lsl #20
    22a0:	01070000 	mrseq	r0, (UNDEF: 7)
    22a4:	0b000000 	bleq	22ac <_start-0x5d54>
    22a8:	00002504 	andeq	r2, r0, r4, lsl #10
    22ac:	05150500 	ldreq	r0, [r5, #-1280]	; 0x500
    22b0:	04010000 	streq	r0, [r1], #-0
    22b4:	00000025 	andeq	r0, r0, r5, lsr #32
    22b8:	00052305 	andeq	r2, r5, r5, lsl #6
    22bc:	25040100 	strcs	r0, [r4, #-256]	; 0x100
    22c0:	06000000 	streq	r0, [r0], -r0
    22c4:	00000080 	andeq	r0, r0, r0, lsl #1
    22c8:	01070501 	tsteq	r7, r1, lsl #10
    22cc:	00070000 	andeq	r0, r7, r0
    22d0:	00001e0c 	andeq	r1, r0, ip, lsl #28
    22d4:	005c0200 	subseq	r0, ip, r0, lsl #4
    22d8:	000001ad 	andeq	r0, r0, sp, lsr #3
    22dc:	0c430004 	mcrreq	0, 0, r0, r3, cr4
    22e0:	01040000 	mrseq	r0, (UNDEF: 4)
    22e4:	00000029 	andeq	r0, r0, r9, lsr #32
    22e8:	00055901 	andeq	r5, r5, r1, lsl #18
    22ec:	0003da00 	andeq	sp, r3, r0, lsl #20
    22f0:	00004800 	andeq	r4, r0, r0, lsl #16
    22f4:	00000000 	andeq	r0, r0, r0
    22f8:	000ae000 	andeq	lr, sl, r0
    22fc:	05040200 	streq	r0, [r4, #-512]	; 0x200
    2300:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2304:	54070403 	strpl	r0, [r7], #-1027	; 0x403
    2308:	03000001 	movweq	r0, #1
    230c:	009a0601 	addseq	r0, sl, r1, lsl #12
    2310:	02030000 	andeq	r0, r3, #0
    2314:	00019505 	andeq	r9, r1, r5, lsl #10
    2318:	05040300 	streq	r0, [r4, #-768]	; 0x300
    231c:	0000017c 	andeq	r0, r0, ip, ror r1
    2320:	77050803 	strvc	r0, [r5, -r3, lsl #16]
    2324:	03000001 	movweq	r0, #1
    2328:	00980801 	addseq	r0, r8, r1, lsl #16
    232c:	02030000 	andeq	r0, r3, #0
    2330:	00010e07 	andeq	r0, r1, r7, lsl #28
    2334:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2338:	0000014f 	andeq	r0, r0, pc, asr #2
    233c:	4a070803 	bmi	1c4350 <__bss_end__+0x1ba048>
    2340:	03000001 	movweq	r0, #1
    2344:	016e0704 	cmneq	lr, r4, lsl #14
    2348:	01030000 	mrseq	r0, (UNDEF: 3)
    234c:	0000a108 	andeq	sl, r0, r8, lsl #2
    2350:	053f0400 	ldreq	r0, [pc, #-1024]!	; 1f58 <_start-0x60a8>
    2354:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    2358:	00000025 	andeq	r0, r0, r5, lsr #32
    235c:	00009140 	andeq	r9, r0, r0, asr #2
    2360:	00000018 	andeq	r0, r0, r8, lsl r0
    2364:	00a29c01 	adceq	r9, r2, r1, lsl #24
    2368:	ab050000 	blge	142370 <__bss_end__+0x138068>
    236c:	01000005 	tsteq	r0, r5
    2370:	00002c0f 	andeq	r2, r0, pc, lsl #24
    2374:	0010b200 	andseq	fp, r0, r0, lsl #4
    2378:	8e060000 	cdphi	0, 0, cr0, cr6, cr0, {0}
    237c:	01000005 	tsteq	r0, r5
    2380:	00915817 	addseq	r5, r1, r7, lsl r8
    2384:	00001400 	andeq	r1, r0, r0, lsl #8
    2388:	c79c0100 	ldrgt	r0, [ip, r0, lsl #2]
    238c:	05000000 	streq	r0, [r0, #-0]
    2390:	000005ab 	andeq	r0, r0, fp, lsr #11
    2394:	002c1801 	eoreq	r1, ip, r1, lsl #16
    2398:	10d10000 	sbcsne	r0, r1, r0
    239c:	06000000 	streq	r0, [r0], -r0
    23a0:	0000001e 	andeq	r0, r0, lr, lsl r0
    23a4:	916c1f01 	cmnls	ip, r1, lsl #30
    23a8:	00480000 	subeq	r0, r8, r0
    23ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    23b0:	00000177 	andeq	r0, r0, r7, ror r1
    23b4:	0005a307 	andeq	sl, r5, r7, lsl #6
    23b8:	772a0100 	strvc	r0, [sl, -r0, lsl #2]!
    23bc:	1c000001 	stcne	0, cr0, [r0], {1}
    23c0:	07201000 	streq	r1, [r0, -r0]!
    23c4:	00000586 	andeq	r0, r0, r6, lsl #11
    23c8:	01772b01 	cmneq	r7, r1, lsl #22
    23cc:	00240000 	eoreq	r0, r4, r0
    23d0:	4d072010 	stcmi	0, cr2, [r7, #-64]	; 0xffffffc0
    23d4:	01000005 	tsteq	r0, r5
    23d8:	0001772c 	andeq	r7, r1, ip, lsr #14
    23dc:	00000000 	andeq	r0, r0, r0
    23e0:	056d085a 	strbeq	r0, [sp, #-2138]!	; 0x85a
    23e4:	2d010000 	stccs	0, cr0, [r1, #-0]
    23e8:	00000177 	andeq	r0, r0, r7, ror r1
    23ec:	91740920 	cmnls	r4, r0, lsr #18
    23f0:	00790000 	rsbseq	r0, r9, r0
    23f4:	80090000 	andhi	r0, r9, r0
    23f8:	a2000091 	andge	r0, r0, #145	; 0x91
    23fc:	0a000000 	beq	2404 <_start-0x5bfc>
    2400:	00009188 	andeq	r9, r0, r8, lsl #3
    2404:	0000018d 	andeq	r0, r0, sp, lsl #3
    2408:	0000013a 	andeq	r0, r0, sl, lsr r1
    240c:	0150010b 	cmpeq	r0, fp, lsl #2
    2410:	940a004e 	strls	r0, [sl], #-78	; 0x4e
    2414:	9e000091 	mcrls	0, 0, r0, cr0, cr1, {4}
    2418:	5a000001 	bpl	2424 <_start-0x5bdc>
    241c:	0b000001 	bleq	2428 <_start-0x5bd8>
    2420:	0c055101 	stfeqs	f5, [r5], {1}
    2424:	5a000001 	bpl	2430 <_start-0x5bd0>
    2428:	0550010b 	ldrbeq	r0, [r0, #-267]	; 0x10b
    242c:	1000240c 	andne	r2, r0, ip, lsl #8
    2430:	a00c0020 	andge	r0, ip, r0, lsr #32
    2434:	9e000091 	mcrls	0, 0, r0, cr0, cr1, {4}
    2438:	0b000001 	bleq	2444 <_start-0x5bbc>
    243c:	0c055101 	stfeqs	f5, [r5], {1}
    2440:	5a000020 	bpl	24c8 <_start-0x5b38>
    2444:	0550010b 	ldrbeq	r0, [r0, #-267]	; 0x10b
    2448:	10001c0c 	andne	r1, r0, ip, lsl #24
    244c:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    2450:	00000025 	andeq	r0, r0, r5, lsr #32
    2454:	00054208 	andeq	r4, r5, r8, lsl #4
    2458:	880d0100 	stmdahi	sp, {r8}
    245c:	10000001 	andne	r0, r0, r1
    2460:	00002c0d 	andeq	r2, r0, sp, lsl #24
    2464:	04f80e00 	ldrbteq	r0, [r8], #3584	; 0xe00
    2468:	4d020000 	stcmi	0, cr0, [r2, #-0]
    246c:	0000019e 	muleq	r0, lr, r1
    2470:	00002c0f 	andeq	r2, r0, pc, lsl #24
    2474:	9d100000 	ldcls	0, cr0, [r0, #-0]
    2478:	02000005 	andeq	r0, r0, #5
    247c:	002c0f90 	mlaeq	ip, r0, pc, r0	; <UNPREDICTABLE>
    2480:	2c0f0000 	stccs	0, cr0, [pc], {-0}
    2484:	00000000 	andeq	r0, r0, r0
    2488:	0001aa00 	andeq	sl, r1, r0, lsl #20
    248c:	31000400 	tstcc	r0, r0, lsl #8
    2490:	0400000d 	streq	r0, [r0], #-13
    2494:	00002901 	andeq	r2, r0, r1, lsl #18
    2498:	05ba0100 	ldreq	r0, [sl, #256]!	; 0x100
    249c:	03da0000 	bicseq	r0, sl, #0
    24a0:	91b40000 			; <UNDEFINED> instruction: 0x91b40000
    24a4:	007c0000 	rsbseq	r0, ip, r0
    24a8:	0b7d0000 	bleq	1f424b0 <__bss_end__+0x1f381a8>
    24ac:	04020000 	streq	r0, [r2], #-0
    24b0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    24b4:	07040300 	streq	r0, [r4, -r0, lsl #6]
    24b8:	00000154 	andeq	r0, r0, r4, asr r1
    24bc:	9a060103 	bls	1828d0 <__bss_end__+0x1785c8>
    24c0:	03000000 	movweq	r0, #0
    24c4:	01950502 	orrseq	r0, r5, r2, lsl #10
    24c8:	04030000 	streq	r0, [r3], #-0
    24cc:	00017c05 	andeq	r7, r1, r5, lsl #24
    24d0:	05080300 	streq	r0, [r8, #-768]	; 0x300
    24d4:	00000177 	andeq	r0, r0, r7, ror r1
    24d8:	98080103 	stmdals	r8, {r0, r1, r8}
    24dc:	03000000 	movweq	r0, #0
    24e0:	010e0702 	tsteq	lr, r2, lsl #14
    24e4:	04030000 	streq	r0, [r3], #-0
    24e8:	00014f07 	andeq	r4, r1, r7, lsl #30
    24ec:	07080300 	streq	r0, [r8, -r0, lsl #6]
    24f0:	0000014a 	andeq	r0, r0, sl, asr #2
    24f4:	6e070403 	cdpvs	4, 0, cr0, cr7, cr3, {0}
    24f8:	03000001 	movweq	r0, #1
    24fc:	00a10801 	adceq	r0, r1, r1, lsl #16
    2500:	d9040000 	stmdble	r4, {}	; <UNPREDICTABLE>
    2504:	01000005 	tsteq	r0, r5
    2508:	0091b405 	addseq	fp, r1, r5, lsl #8
    250c:	00001c00 	andeq	r1, r0, r0, lsl #24
    2510:	9e9c0100 	fmllse	f0, f4, f0
    2514:	05000000 	streq	r0, [r0, #-0]
    2518:	000005d3 	ldrdeq	r0, [r0], -r3
    251c:	002c0501 	eoreq	r0, ip, r1, lsl #10
    2520:	10fb0000 	rscsne	r0, fp, r0
    2524:	06000000 	streq	r0, [r0], -r0
    2528:	000005ef 	andeq	r0, r0, pc, ror #11
    252c:	002c0b01 	eoreq	r0, ip, r1, lsl #22
    2530:	91d00000 	bicsls	r0, r0, r0
    2534:	00140000 	andseq	r0, r4, r0
    2538:	9c010000 	stcls	0, cr0, [r1], {-0}
    253c:	000000cb 	andeq	r0, r0, fp, asr #1
    2540:	0091dc07 	addseq	sp, r1, r7, lsl #24
    2544:	00019c00 	andeq	r9, r1, r0, lsl #24
    2548:	50010800 	andpl	r0, r1, r0, lsl #16
    254c:	30040c05 	andcc	r0, r4, r5, lsl #24
    2550:	00002000 	andeq	r2, r0, r0
    2554:	0005e604 	andeq	lr, r5, r4, lsl #12
    2558:	e40f0100 	str	r0, [pc], #-256	; 2560 <_start-0x5aa0>
    255c:	24000091 	strcs	r0, [r0], #-145	; 0x91
    2560:	01000000 	mrseq	r0, (UNDEF: 0)
    2564:	0001299c 	muleq	r1, ip, r9
    2568:	73750900 	cmnvc	r5, #0, 18
    256c:	2c0f0100 	stfcss	f0, [pc], {-0}
    2570:	2f000000 	svccs	0x00000000
    2574:	0a000011 	beq	25c0 <_start-0x5a40>
    2578:	01006272 	tsteq	r0, r2, ror r2
    257c:	00002c10 	andeq	r2, r0, r0, lsl ip
    2580:	0b540100 	bleq	1502988 <__bss_end__+0x14f8680>
    2584:	000091f4 	strdeq	r9, [r0], -r4
    2588:	00000010 	andeq	r0, r0, r0, lsl r0
    258c:	0000011f 	andeq	r0, r0, pc, lsl r1
    2590:	0061720c 	rsbeq	r7, r1, ip, lsl #4
    2594:	002c1201 	eoreq	r1, ip, r1, lsl #4
    2598:	114d0000 	mrsne	r0, (UNDEF: 77)
    259c:	f80d0000 			; <UNDEFINED> instruction: 0xf80d0000
    25a0:	9e000091 	mcrls	0, 0, r0, cr0, cr1, {4}
    25a4:	00000000 	andeq	r0, r0, r0
    25a8:	0091f00d 	addseq	pc, r1, sp
    25ac:	00009e00 	andeq	r9, r0, r0, lsl #28
    25b0:	f8040000 			; <UNDEFINED> instruction: 0xf8040000
    25b4:	01000004 	tsteq	r0, r4
    25b8:	00920818 	addseq	r0, r2, r8, lsl r8
    25bc:	00001400 	andeq	r1, r0, r0, lsl #8
    25c0:	629c0100 	addsvs	r0, ip, #0, 2
    25c4:	09000001 	stmdbeq	r0, {r0}
    25c8:	0100736d 	tsteq	r0, sp, ror #6
    25cc:	00002c18 	andeq	r2, r0, r8, lsl ip
    25d0:	00116000 	andseq	r6, r1, r0
    25d4:	92180700 	andsls	r0, r8, #0, 14
    25d8:	00cb0000 	sbceq	r0, fp, r0
    25dc:	01080000 	mrseq	r0, (UNDEF: 8)
    25e0:	01f30750 	mvnseq	r0, r0, asr r7
    25e4:	03e80a50 	mvneq	r0, #80, 20	; 0x50000
    25e8:	0400001e 	streq	r0, [r0], #-30
    25ec:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
    25f0:	921c1b01 	andsls	r1, ip, #1024	; 0x400
    25f4:	00140000 	andseq	r0, r4, r0
    25f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    25fc:	0000019c 	muleq	r0, ip, r1
    2600:	63657309 	cmnvs	r5, #603979776	; 0x24000000
    2604:	2c1b0100 	ldfcss	f0, [fp], {-0}
    2608:	81000000 	mrshi	r0, (UNDEF: 0)
    260c:	07000011 	smladeq	r0, r1, r0, r0
    2610:	0000922c 	andeq	r9, r0, ip, lsr #4
    2614:	00000129 	andeq	r0, r0, r9, lsr #2
    2618:	07500108 	ldrbeq	r0, [r0, -r8, lsl #2]
    261c:	0a5001f3 	beq	1402df0 <__bss_end__+0x13f8ae8>
    2620:	001e03e8 	andseq	r0, lr, r8, ror #7
    2624:	05cd0e00 	strbeq	r0, [sp, #3584]	; 0xe00
    2628:	9c020000 	stcls	0, cr0, [r2], {-0}
    262c:	0000002c 	andeq	r0, r0, ip, lsr #32
    2630:	00002c0f 	andeq	r2, r0, pc, lsl #24
    2634:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    2638:	04000003 	streq	r0, [r0], #-3
    263c:	000e1400 	andeq	r1, lr, r0, lsl #8
    2640:	29010400 	stmdbcs	r1, {sl}
    2644:	01000000 	mrseq	r0, (UNDEF: 0)
    2648:	00000621 	andeq	r0, r0, r1, lsr #12
    264c:	000003da 	ldrdeq	r0, [r0], -sl
    2650:	00009508 	andeq	r9, r0, r8, lsl #10
    2654:	00000178 	andeq	r0, r0, r8, ror r1
    2658:	00000c21 	andeq	r0, r0, r1, lsr #24
    265c:	69050402 	stmdbvs	r5, {r1, sl}
    2660:	0300746e 	movweq	r7, #1134	; 0x46e
    2664:	00000337 	andeq	r0, r0, r7, lsr r3
    2668:	0037d402 	eorseq	sp, r7, r2, lsl #8
    266c:	04040000 	streq	r0, [r4], #-0
    2670:	00015407 	andeq	r5, r1, r7, lsl #8
    2674:	06010400 	streq	r0, [r1], -r0, lsl #8
    2678:	0000009a 	muleq	r0, sl, r0
    267c:	95050204 	strls	r0, [r5, #-516]	; 0x204
    2680:	04000001 	streq	r0, [r0], #-1
    2684:	017c0504 	cmneq	ip, r4, lsl #10
    2688:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    268c:	00017705 	andeq	r7, r1, r5, lsl #14
    2690:	08010400 	stmdaeq	r1, {sl}
    2694:	00000098 	muleq	r0, r8, r0
    2698:	0e070204 	cdpeq	2, 0, cr0, cr7, cr4, {0}
    269c:	04000001 	streq	r0, [r0], #-1
    26a0:	014f0704 	cmpeq	pc, r4, lsl #14
    26a4:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    26a8:	00014a07 	andeq	r4, r1, r7, lsl #20
    26ac:	07040400 	streq	r0, [r4, -r0, lsl #8]
    26b0:	0000016e 	andeq	r0, r0, lr, ror #2
    26b4:	04060405 	streq	r0, [r6], #-1029	; 0x405
    26b8:	00000085 	andeq	r0, r0, r5, lsl #1
    26bc:	a1080104 	tstge	r8, r4, lsl #2
    26c0:	06000000 	streq	r0, [r0], -r0
    26c4:	00009204 	andeq	r9, r0, r4, lsl #4
    26c8:	00850700 	addeq	r0, r5, r0, lsl #14
    26cc:	85080000 	strhi	r0, [r8, #-0]
    26d0:	a7000000 	strge	r0, [r0, -r0]
    26d4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    26d8:	00000076 	andeq	r0, r0, r6, ror r0
    26dc:	190a0007 	stmdbne	sl, {r0, r1, r2}
    26e0:	01000006 	tsteq	r0, r6
    26e4:	00007d19 	andeq	r7, r0, r9, lsl sp
    26e8:	00950800 	addseq	r0, r5, r0, lsl #16
    26ec:	00006400 	andeq	r6, r0, r0, lsl #8
    26f0:	5c9c0100 	ldfpls	f0, [ip], {0}
    26f4:	0b000001 	bleq	2700 <_start-0x5900>
    26f8:	0000064b 	andeq	r0, r0, fp, asr #12
    26fc:	00371901 	eorseq	r1, r7, r1, lsl #18
    2700:	11a20000 			; <UNDEFINED> instruction: 0x11a20000
    2704:	210c0000 	mrscs	r0, (UNDEF: 12)
    2708:	5c000001 	stcpl	0, cr0, [r0], {1}
    270c:	05000001 	streq	r0, [r0, #-1]
    2710:	009dc803 	addseq	ip, sp, r3, lsl #16
    2714:	06720d00 	ldrbteq	r0, [r2], -r0, lsl #26
    2718:	1c010000 	stcne	0, cr0, [r1], {-0}
    271c:	0000007d 	andeq	r0, r0, sp, ror r0
    2720:	430e5401 	movwmi	r5, #58369	; 0xe401
    2724:	01000006 	tsteq	r0, r6
    2728:	0000371d 	andeq	r3, r0, sp, lsl r7
    272c:	0011dc00 	andseq	sp, r1, r0, lsl #24
    2730:	95300f00 	ldrls	r0, [r0, #-3840]!	; 0xf00
    2734:	03130000 	tsteq	r3, #0
    2738:	01280000 	teqeq	r8, r0
    273c:	01100000 	tsteq	r0, r0
    2740:	104a0153 	subne	r0, sl, r3, asr r1
    2744:	03055201 	movweq	r5, #20993	; 0x5201
    2748:	00009dc8 	andeq	r9, r0, r8, asr #27
    274c:	05510110 	ldrbeq	r0, [r1, #-272]	; 0x110
    2750:	009e3003 	addseq	r3, lr, r3
    2754:	50011000 	andpl	r1, r1, r0
    2758:	9df00305 	ldclls	3, cr0, [r0, #20]!
    275c:	11000000 	mrsne	r0, (UNDEF: 0)
    2760:	00009534 	andeq	r9, r0, r4, lsr r5
    2764:	00000329 	andeq	r0, r0, r9, lsr #6
    2768:	00955412 	addseq	r5, r5, r2, lsl r4
    276c:	00033000 	andeq	r3, r3, r0
    2770:	52011000 	andpl	r1, r1, #0
    2774:	5001f308 	andpl	pc, r1, r8, lsl #6
    2778:	fc090323 	stc2	3, cr0, [r9], {35}	; 0x23
    277c:	5101101a 	tstpl	r1, sl, lsl r0
    2780:	01103001 	tsteq	r0, r1
    2784:	01f30b50 	mvnseq	r0, r0, asr fp
    2788:	09032350 	stmdbeq	r3, {r4, r6, r8, r9, sp}
    278c:	00741afc 	ldrshteq	r1, [r4], #-172	; 0xffffff54
    2790:	07000022 	streq	r0, [r0, -r2, lsr #32]
    2794:	00000097 	muleq	r0, r7, r0
    2798:	00000e0a 	andeq	r0, r0, sl, lsl #28
    279c:	7d260100 	stfvcs	f0, [r6, #-0]
    27a0:	6c000000 	stcvs	0, cr0, [r0], {-0}
    27a4:	94000095 	strls	r0, [r0], #-149	; 0x95
    27a8:	01000000 	mrseq	r0, (UNDEF: 0)
    27ac:	0002399c 	muleq	r2, ip, r9
    27b0:	064b0b00 	strbeq	r0, [fp], -r0, lsl #22
    27b4:	26010000 	strcs	r0, [r1], -r0
    27b8:	00000037 	andeq	r0, r0, r7, lsr r0
    27bc:	00001202 	andeq	r1, r0, r2, lsl #4
    27c0:	0006390b 	andeq	r3, r6, fp, lsl #18
    27c4:	37260100 	strcc	r0, [r6, -r0, lsl #2]!
    27c8:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
    27cc:	0c000012 	stceq	0, cr0, [r0], {18}
    27d0:	00000121 	andeq	r0, r0, r1, lsr #2
    27d4:	00000249 	andeq	r0, r0, r9, asr #4
    27d8:	9dd00305 	ldclls	3, cr0, [r0, #20]
    27dc:	080e0000 	stmdaeq	lr, {}	; <UNPREDICTABLE>
    27e0:	01000006 	tsteq	r0, r6
    27e4:	0000372c 	andeq	r3, r0, ip, lsr #14
    27e8:	0012e800 	andseq	lr, r2, r0, lsl #16
    27ec:	95940f00 	ldrls	r0, [r4, #3840]	; 0xf00
    27f0:	03130000 	tsteq	r3, #0
    27f4:	01e50000 	mvneq	r0, r0
    27f8:	01100000 	tsteq	r0, r0
    27fc:	27080253 	smlsdcs	r8, r3, r2, r0
    2800:	05520110 	ldrbeq	r0, [r2, #-272]	; 0x110
    2804:	009dd003 	addseq	sp, sp, r3
    2808:	51011000 	mrspl	r1, (UNDEF: 1)
    280c:	9e300305 	cdpls	3, 3, cr0, cr0, cr5, {0}
    2810:	01100000 	tsteq	r0, r0
    2814:	f0030550 			; <UNDEFINED> instruction: 0xf0030550
    2818:	0000009d 	muleq	r0, sp, r0
    281c:	00959811 	addseq	r9, r5, r1, lsl r8
    2820:	00032900 	andeq	r2, r3, r0, lsl #18
    2824:	95a41100 	strls	r1, [r4, #256]!	; 0x100
    2828:	00a70000 	adceq	r0, r7, r0
    282c:	c40f0000 	strgt	r0, [pc], #-0	; 2834 <_start-0x57cc>
    2830:	13000095 	movwne	r0, #149	; 0x95
    2834:	26000003 	strcs	r0, [r0], -r3
    2838:	10000002 	andne	r0, r0, r2
    283c:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    2840:	5201102b 	andpl	r1, r1, #43	; 0x2b
    2844:	9dd00305 	ldclls	3, cr0, [r0, #20]
    2848:	01100000 	tsteq	r0, r0
    284c:	30030551 	andcc	r0, r3, r1, asr r5
    2850:	1000009e 	mulne	r0, lr, r0
    2854:	03055001 	movweq	r5, #20481	; 0x5001
    2858:	00009e44 	andeq	r9, r0, r4, asr #28
    285c:	95c81100 	strbls	r1, [r8, #256]	; 0x100
    2860:	03290000 	teqeq	r9, #0
    2864:	e8110000 	ldmda	r1, {}	; <UNPREDICTABLE>
    2868:	a7000095 			; <UNDEFINED> instruction: 0xa7000095
    286c:	00000000 	andeq	r0, r0, r0
    2870:	00008508 	andeq	r8, r0, r8, lsl #10
    2874:	00024900 	andeq	r4, r2, r0, lsl #18
    2878:	00760900 	rsbseq	r0, r6, r0, lsl #18
    287c:	000f0000 	andeq	r0, pc, r0
    2880:	00023907 	andeq	r3, r2, r7, lsl #18
    2884:	01d71300 	bicseq	r1, r7, r0, lsl #6
    2888:	3b010000 	blcc	42890 <__bss_end__+0x38588>
    288c:	00009600 	andeq	r9, r0, r0, lsl #12
    2890:	00000058 	andeq	r0, r0, r8, asr r0
    2894:	02ab9c01 	adceq	r9, fp, #256	; 0x100
    2898:	210c0000 	mrscs	r0, (UNDEF: 12)
    289c:	bb000001 	bllt	28a8 <_start-0x5758>
    28a0:	05000002 	streq	r0, [r0, #-2]
    28a4:	009de003 	addseq	lr, sp, r3
    28a8:	96280f00 	strtls	r0, [r8], -r0, lsl #30
    28ac:	03130000 	tsteq	r3, #0
    28b0:	02a10000 	adceq	r0, r1, #0
    28b4:	01100000 	tsteq	r0, r0
    28b8:	3c080253 	sfmcc	f0, 4, [r8], {83}	; 0x53
    28bc:	05520110 	ldrbeq	r0, [r2, #-272]	; 0x110
    28c0:	009de003 	addseq	lr, sp, r3
    28c4:	51011000 	mrspl	r1, (UNDEF: 1)
    28c8:	9e300305 	cdpls	3, 3, cr0, cr0, cr5, {0}
    28cc:	01100000 	tsteq	r0, r0
    28d0:	9c030550 	cfstr32ls	mvfx0, [r3], {80}	; 0x50
    28d4:	0000009e 	muleq	r0, lr, r0
    28d8:	00962c11 	addseq	r2, r6, r1, lsl ip
    28dc:	00032900 	andeq	r2, r3, r0, lsl #18
    28e0:	85080000 	strhi	r0, [r8, #-0]
    28e4:	bb000000 	bllt	28ec <_start-0x5714>
    28e8:	09000002 	stmdbeq	r0, {r1}
    28ec:	00000076 	andeq	r0, r0, r6, ror r0
    28f0:	ab07000c 	blge	1c2928 <__bss_end__+0x1b8620>
    28f4:	14000002 	strne	r0, [r0], #-2
    28f8:	000005fe 	strdeq	r0, [r0], -lr
    28fc:	96584501 	ldrbls	r4, [r8], -r1, lsl #10
    2900:	00180000 	andseq	r0, r8, r0
    2904:	9c010000 	stcls	0, cr0, [r1], {-0}
    2908:	00065215 	andeq	r5, r6, r5, lsl r2
    290c:	7d4e0100 	stfvce	f0, [lr, #-0]
    2910:	70000000 	andvc	r0, r0, r0
    2914:	10000096 	mulne	r0, r6, r0
    2918:	01000000 	mrseq	r0, (UNDEF: 0)
    291c:	06320d9c 			; <UNDEFINED> instruction: 0x06320d9c
    2920:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    2924:	00000025 	andeq	r0, r0, r5, lsr #32
    2928:	a3000305 	movwge	r0, #773	; 0x305
    292c:	5a0d0000 	bpl	342934 <__bss_end__+0x33862c>
    2930:	01000006 	tsteq	r0, r6
    2934:	00007f0b 	andeq	r7, r0, fp, lsl #30
    2938:	04030500 	streq	r0, [r3], #-1280	; 0x500
    293c:	160000a3 	strne	r0, [r0], -r3, lsr #1
    2940:	00000663 	andeq	r0, r0, r3, ror #12
    2944:	00850501 	addeq	r0, r5, r1, lsl #10
    2948:	3e170000 	cdpcc	0, 1, cr0, cr7, cr0, {0}
    294c:	03000004 	movweq	r0, #4
    2950:	00002527 	andeq	r2, r0, r7, lsr #10
    2954:	00032900 	andeq	r2, r3, r0, lsl #18
    2958:	008c1800 	addeq	r1, ip, r0, lsl #16
    295c:	00190000 	andseq	r0, r9, r0
    2960:	00001e1a 	andeq	r1, r0, sl, lsl lr
    2964:	1b5c0300 	blne	170356c <__bss_end__+0x16f9264>
    2968:	0000035e 	andeq	r0, r0, lr, asr r3
    296c:	007d1b04 	rsbseq	r1, sp, r4, lsl #22
    2970:	7d180000 	ldcvc	0, cr0, [r8, #-0]
    2974:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    2978:	00000025 	andeq	r0, r0, r5, lsr #32
    297c:	00002c18 	andeq	r2, r0, r8, lsl ip
    2980:	e0000000 	and	r0, r0, r0
    2984:	04000000 	streq	r0, [r0], #-0
    2988:	000f9b00 	andeq	r9, pc, r0, lsl #22
    298c:	29010400 	stmdbcs	r1, {sl}
    2990:	01000000 	mrseq	r0, (UNDEF: 0)
    2994:	00000699 	muleq	r0, r9, r6
    2998:	000003da 	ldrdeq	r0, [r0], -sl
    299c:	00009680 	andeq	r9, r0, r0, lsl #13
    29a0:	00000014 	andeq	r0, r0, r4, lsl r0
    29a4:	00000d90 	muleq	r0, r0, sp
    29a8:	69050402 	stmdbvs	r5, {r1, sl}
    29ac:	0300746e 	movweq	r7, #1134	; 0x46e
    29b0:	01540704 	cmpeq	r4, r4, lsl #14
    29b4:	01030000 	mrseq	r0, (UNDEF: 3)
    29b8:	00009a06 	andeq	r9, r0, r6, lsl #20
    29bc:	05020300 	streq	r0, [r2, #-768]	; 0x300
    29c0:	00000195 	muleq	r0, r5, r1
    29c4:	7c050403 	cfstrsvc	mvf0, [r5], {3}
    29c8:	03000001 	movweq	r0, #1
    29cc:	01770508 	cmneq	r7, r8, lsl #10
    29d0:	01030000 	mrseq	r0, (UNDEF: 3)
    29d4:	00009808 	andeq	r9, r0, r8, lsl #16
    29d8:	07020300 	streq	r0, [r2, -r0, lsl #6]
    29dc:	0000010e 	andeq	r0, r0, lr, lsl #2
    29e0:	4f070403 	svcmi	0x00070403
    29e4:	03000001 	movweq	r0, #1
    29e8:	014a0708 	cmpeq	sl, r8, lsl #14
    29ec:	04030000 	streq	r0, [r3], #-0
    29f0:	00016e07 	andeq	r6, r1, r7, lsl #28
    29f4:	08010300 	stmdaeq	r1, {r8, r9}
    29f8:	000000a1 	andeq	r0, r0, r1, lsr #1
    29fc:	00068804 	andeq	r8, r6, r4, lsl #16
    2a00:	25030100 	strcs	r0, [r3, #-256]	; 0x100
    2a04:	80000000 	andhi	r0, r0, r0
    2a08:	14000096 	strne	r0, [r0], #-150	; 0x96
    2a0c:	01000000 	mrseq	r0, (UNDEF: 0)
    2a10:	0000b09c 	muleq	r0, ip, r0
    2a14:	00630500 	rsbeq	r0, r3, r0, lsl #10
    2a18:	00250301 	eoreq	r0, r5, r1, lsl #6
    2a1c:	13150000 	tstne	r5, #0
    2a20:	8c060000 	stchi	0, cr0, [r6], {-0}
    2a24:	d6000096 			; <UNDEFINED> instruction: 0xd6000096
    2a28:	07000000 	streq	r0, [r0, -r0]
    2a2c:	74025001 	strvc	r5, [r2], #-1
    2a30:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2a34:	00000025 	andeq	r0, r0, r5, lsr #32
    2a38:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    2a3c:	00002509 	andeq	r2, r0, r9, lsl #10
    2a40:	730a0000 	movwvc	r0, #40960	; 0xa000
    2a44:	01000004 	tsteq	r0, r4
    2a48:	0000d006 	andeq	sp, r0, r6
    2a4c:	b4030500 	strlt	r0, [r3], #-1280	; 0x500
    2a50:	0b000096 	bleq	2cb0 <_start-0x5350>
    2a54:	0000b004 	andeq	fp, r0, r4
    2a58:	067e0c00 	ldrbteq	r0, [lr], -r0, lsl #24
    2a5c:	3a020000 	bcc	82a64 <__bss_end__+0x7875c>
    2a60:	00002c09 	andeq	r2, r0, r9, lsl #24
    2a64:	Address 0x0000000000002a64 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	110e1b0e 	tstne	lr, lr, lsl #22
       c:	10061201 	andne	r1, r6, r1, lsl #4
      10:	02000017 	andeq	r0, r0, #23
      14:	0b0b0024 	bleq	2c00ac <__bss_end__+0x2b5da4>
      18:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
      1c:	24030000 	strcs	r0, [r3], #-0
      20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
      24:	000e030b 	andeq	r0, lr, fp, lsl #6
      28:	00160400 	andseq	r0, r6, r0, lsl #8
      2c:	0b3a0e03 	bleq	e83840 <__bss_end__+0xe79538>
      30:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      34:	0f050000 	svceq	0x00050000
      38:	000b0b00 	andeq	r0, fp, r0, lsl #22
      3c:	000f0600 	andeq	r0, pc, r0, lsl #12
      40:	13490b0b 	movtne	r0, #39691	; 0x9b0b
      44:	26070000 	strcs	r0, [r7], -r0
      48:	00134900 	andseq	r4, r3, r0, lsl #18
      4c:	01010800 	tsteq	r1, r0, lsl #16
      50:	13011349 	movwne	r1, #4937	; 0x1349
      54:	21090000 	mrscs	r0, (UNDEF: 9)
      58:	2f134900 	svccs	0x00134900
      5c:	0a00000b 	beq	90 <_start-0x7f70>
      60:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
      64:	0b3a050b 	bleq	e81498 <__bss_end__+0xe77190>
      68:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      6c:	0d0b0000 	stceq	0, cr0, [fp, #-0]
      70:	3a0e0300 	bcc	380c78 <__bss_end__+0x376970>
      74:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      78:	000b3813 	andeq	r3, fp, r3, lsl r8
      7c:	000d0c00 	andeq	r0, sp, r0, lsl #24
      80:	0b3a0803 	bleq	e82094 <__bss_end__+0xe77d8c>
      84:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      88:	00000b38 	andeq	r0, r0, r8, lsr fp
      8c:	2701150d 	strcs	r1, [r1, -sp, lsl #10]
      90:	00130119 	andseq	r0, r3, r9, lsl r1
      94:	00050e00 	andeq	r0, r5, r0, lsl #28
      98:	00001349 	andeq	r1, r0, r9, asr #6
      9c:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
      a0:	00052f13 	andeq	r2, r5, r3, lsl pc
      a4:	012e1000 	teqeq	lr, r0
      a8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
      ac:	0b3b0b3a 	bleq	ec2d9c <__bss_end__+0xeb8a94>
      b0:	01111927 	tsteq	r1, r7, lsr #18
      b4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
      b8:	01194297 			; <UNDEFINED> instruction: 0x01194297
      bc:	11000013 	tstne	r0, r3, lsl r0
      c0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
      c4:	0b3b0b3a 	bleq	ec2db4 <__bss_end__+0xeb8aac>
      c8:	17021349 	strne	r1, [r2, -r9, asr #6]
      cc:	34120000 	ldrcc	r0, [r2], #-0
      d0:	490e0300 	stmdbmi	lr, {r8, r9}
      d4:	00193413 	andseq	r3, r9, r3, lsl r4
      d8:	00341300 	eorseq	r1, r4, r0, lsl #6
      dc:	0b3a0803 	bleq	e820f0 <__bss_end__+0xe77de8>
      e0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      e4:	00001802 	andeq	r1, r0, r2, lsl #16
      e8:	11010b14 	tstne	r1, r4, lsl fp
      ec:	01061201 	tsteq	r6, r1, lsl #4
      f0:	15000013 	strne	r0, [r0, #-19]
      f4:	08030034 	stmdaeq	r3, {r2, r4, r5}
      f8:	0b3b0b3a 	bleq	ec2de8 <__bss_end__+0xeb8ae0>
      fc:	17021349 	strne	r1, [r2, -r9, asr #6]
     100:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
     104:	11010182 	smlabbne	r1, r2, r1, r0
     108:	00133101 	andseq	r3, r3, r1, lsl #2
     10c:	828a1700 	addhi	r1, sl, #0, 14
     110:	18020001 	stmdane	r2, {r0}
     114:	00184291 	mulseq	r8, r1, r2
     118:	82891800 	addhi	r1, r9, #0, 16
     11c:	01110101 	tsteq	r1, r1, lsl #2
     120:	13011331 	movwne	r1, #4913	; 0x1331
     124:	89190000 	ldmdbhi	r9, {}	; <UNPREDICTABLE>
     128:	11000182 	smlabbne	r0, r2, r1, r0
     12c:	00133101 	andseq	r3, r3, r1, lsl #2
     130:	012e1a00 	teqeq	lr, r0, lsl #20
     134:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     138:	0b3b0b3a 	bleq	ec2e28 <__bss_end__+0xeb8b20>
     13c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     140:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     144:	00130119 	andseq	r0, r3, r9, lsl r1
     148:	00341b00 	eorseq	r1, r4, r0, lsl #22
     14c:	13490e03 	movtne	r0, #40451	; 0x9e03
     150:	18021934 	stmdane	r2, {r2, r4, r5, r8, fp, ip}
     154:	341c0000 	ldrcc	r0, [ip], #-0
     158:	3a0e0300 	bcc	380d60 <__bss_end__+0x376a58>
     15c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     160:	000b1c13 	andeq	r1, fp, r3, lsl ip
     164:	00341d00 	eorseq	r1, r4, r0, lsl #26
     168:	0b3a0e03 	bleq	e8397c <__bss_end__+0xe79674>
     16c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     170:	00001702 	andeq	r1, r0, r2, lsl #14
     174:	3f012e1e 	svccc	0x00012e1e
     178:	3a0e0319 	bcc	380de4 <__bss_end__+0x376adc>
     17c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     180:	3c134919 	ldccc	9, cr4, [r3], {25}
     184:	00130119 	andseq	r0, r3, r9, lsl r1
     188:	00181f00 	andseq	r1, r8, r0, lsl #30
     18c:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
     190:	03193f00 	tsteq	r9, #0, 30
     194:	3b0b3a0e 	blcc	2ce9d4 <__bss_end__+0x2c46cc>
     198:	3c19270b 	ldccc	7, cr2, [r9], {11}
     19c:	21000019 	tstcs	r0, r9, lsl r0
     1a0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     1a4:	0b3a0e03 	bleq	e839b8 <__bss_end__+0xe796b0>
     1a8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     1ac:	1301193c 	movwne	r1, #6460	; 0x193c
     1b0:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
     1b4:	03193f01 	tsteq	r9, #1, 30
     1b8:	3b0b3a0e 	blcc	2ce9f8 <__bss_end__+0x2c46f0>
     1bc:	3c19270b 	ldccc	7, cr2, [r9], {11}
     1c0:	00000019 	andeq	r0, r0, r9, lsl r0
     1c4:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     1c8:	030b130e 	movweq	r1, #45838	; 0xb30e
     1cc:	110e1b0e 	tstne	lr, lr, lsl #22
     1d0:	10061201 	andne	r1, r6, r1, lsl #4
     1d4:	02000017 	andeq	r0, r0, #23
     1d8:	0b0b0024 	bleq	2c0270 <__bss_end__+0x2b5f68>
     1dc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     1e0:	24030000 	strcs	r0, [r3], #-0
     1e4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     1e8:	000e030b 	andeq	r0, lr, fp, lsl #6
     1ec:	00160400 	andseq	r0, r6, r0, lsl #8
     1f0:	0b3a0e03 	bleq	e83a04 <__bss_end__+0xe796fc>
     1f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     1f8:	0f050000 	svceq	0x00050000
     1fc:	000b0b00 	andeq	r0, fp, r0, lsl #22
     200:	000f0600 	andeq	r0, pc, r0, lsl #12
     204:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     208:	26070000 	strcs	r0, [r7], -r0
     20c:	00134900 	andseq	r4, r3, r0, lsl #18
     210:	01010800 	tsteq	r1, r0, lsl #16
     214:	13011349 	movwne	r1, #4937	; 0x1349
     218:	21090000 	mrscs	r0, (UNDEF: 9)
     21c:	2f134900 	svccs	0x00134900
     220:	0a00000b 	beq	254 <_start-0x7dac>
     224:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     228:	0b3a050b 	bleq	e8165c <__bss_end__+0xe77354>
     22c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     230:	0d0b0000 	stceq	0, cr0, [fp, #-0]
     234:	3a0e0300 	bcc	380e3c <__bss_end__+0x376b34>
     238:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     23c:	000b3813 	andeq	r3, fp, r3, lsl r8
     240:	000d0c00 	andeq	r0, sp, r0, lsl #24
     244:	0b3a0803 	bleq	e82258 <__bss_end__+0xe77f50>
     248:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     24c:	00000b38 	andeq	r0, r0, r8, lsr fp
     250:	2701150d 	strcs	r1, [r1, -sp, lsl #10]
     254:	00130119 	andseq	r0, r3, r9, lsl r1
     258:	00050e00 	andeq	r0, r5, r0, lsl #28
     25c:	00001349 	andeq	r1, r0, r9, asr #6
     260:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
     264:	00052f13 	andeq	r2, r5, r3, lsl pc
     268:	01131000 	tsteq	r3, r0
     26c:	0b0b0803 	bleq	2c2280 <__bss_end__+0x2b7f78>
     270:	0b3b0b3a 	bleq	ec2f60 <__bss_end__+0xeb8c58>
     274:	00001301 	andeq	r1, r0, r1, lsl #6
     278:	03001611 	movweq	r1, #1553	; 0x611
     27c:	3b0b3a08 	blcc	2ceaa4 <__bss_end__+0x2c479c>
     280:	0013490b 	andseq	r4, r3, fp, lsl #18
     284:	012e1200 	teqeq	lr, r0, lsl #4
     288:	0b3a0e03 	bleq	e83a9c <__bss_end__+0xe79794>
     28c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     290:	01111349 	tsteq	r1, r9, asr #6
     294:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     298:	01194297 			; <UNDEFINED> instruction: 0x01194297
     29c:	13000013 	movwne	r0, #19
     2a0:	08030005 	stmdaeq	r3, {r0, r2}
     2a4:	0b3b0b3a 	bleq	ec2f94 <__bss_end__+0xeb8c8c>
     2a8:	17021349 	strne	r1, [r2, -r9, asr #6]
     2ac:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
     2b0:	3a0e0301 	bcc	380ebc <__bss_end__+0x376bb4>
     2b4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     2b8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     2bc:	97184006 	ldrls	r4, [r8, -r6]
     2c0:	13011942 	movwne	r1, #6466	; 0x1942
     2c4:	05150000 	ldreq	r0, [r5, #-0]
     2c8:	3a080300 	bcc	200ed0 <__bss_end__+0x1f6bc8>
     2cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2d0:	00180213 	andseq	r0, r8, r3, lsl r2
     2d4:	82891600 	addhi	r1, r9, #0, 12
     2d8:	01110101 	tsteq	r1, r1, lsl #2
     2dc:	00001331 	andeq	r1, r0, r1, lsr r3
     2e0:	01828a17 	orreq	r8, r2, r7, lsl sl
     2e4:	91180200 	tstls	r8, r0, lsl #4
     2e8:	00001842 	andeq	r1, r0, r2, asr #16
     2ec:	03003418 	movweq	r3, #1048	; 0x418
     2f0:	3413490e 	ldrcc	r4, [r3], #-2318	; 0x90e
     2f4:	00180219 	andseq	r0, r8, r9, lsl r2
     2f8:	82891900 	addhi	r1, r9, #0, 18
     2fc:	01110101 	tsteq	r1, r1, lsl #2
     300:	13011331 	movwne	r1, #4913	; 0x1331
     304:	891a0000 	ldmdbhi	sl, {}	; <UNPREDICTABLE>
     308:	11000182 	smlabbne	r0, r2, r1, r0
     30c:	00133101 	andseq	r3, r3, r1, lsl #2
     310:	00341b00 	eorseq	r1, r4, r0, lsl #22
     314:	0b3a0803 	bleq	e82328 <__bss_end__+0xe78020>
     318:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     31c:	00001702 	andeq	r1, r0, r2, lsl #14
     320:	3f002e1c 	svccc	0x00002e1c
     324:	3a0e0319 	bcc	380f90 <__bss_end__+0x376c88>
     328:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     32c:	11134919 	tstne	r3, r9, lsl r9
     330:	40061201 	andmi	r1, r6, r1, lsl #4
     334:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     338:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
     33c:	03193f01 	tsteq	r9, #1, 30
     340:	3b0b3a0e 	blcc	2ceb80 <__bss_end__+0x2c4878>
     344:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     348:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     34c:	97184006 	ldrls	r4, [r8, -r6]
     350:	13011942 	movwne	r1, #6466	; 0x1942
     354:	051e0000 	ldreq	r0, [lr, #-0]
     358:	3a0e0300 	bcc	380f60 <__bss_end__+0x376c58>
     35c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     360:	00170213 	andseq	r0, r7, r3, lsl r2
     364:	002e1f00 	eoreq	r1, lr, r0, lsl #30
     368:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     36c:	0b3b0b3a 	bleq	ec305c <__bss_end__+0xeb8d54>
     370:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     374:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
     378:	03193f01 	tsteq	r9, #1, 30
     37c:	3b0b3a0e 	blcc	2cebbc <__bss_end__+0x2c48b4>
     380:	1119270b 	tstne	r9, fp, lsl #14
     384:	40061201 	andmi	r1, r6, r1, lsl #4
     388:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     38c:	00001301 	andeq	r1, r0, r1, lsl #6
     390:	03000521 	movweq	r0, #1313	; 0x521
     394:	3b0b3a0e 	blcc	2cebd4 <__bss_end__+0x2c48cc>
     398:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     39c:	22000018 	andcs	r0, r0, #24
     3a0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     3a4:	0b3a0e03 	bleq	e83bb8 <__bss_end__+0xe798b0>
     3a8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     3ac:	06120111 			; <UNDEFINED> instruction: 0x06120111
     3b0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     3b4:	23000019 	movwcs	r0, #25
     3b8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     3bc:	0b3b0b3a 	bleq	ec30ac <__bss_end__+0xeb8da4>
     3c0:	17021349 	strne	r1, [r2, -r9, asr #6]
     3c4:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
     3c8:	03193f01 	tsteq	r9, #1, 30
     3cc:	3b0b3a0e 	blcc	2cec0c <__bss_end__+0x2c4904>
     3d0:	1119270b 	tstne	r9, fp, lsl #14
     3d4:	40061201 	andmi	r1, r6, r1, lsl #4
     3d8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     3dc:	00001301 	andeq	r1, r0, r1, lsl #6
     3e0:	03003425 	movweq	r3, #1061	; 0x425
     3e4:	3b0b3a0e 	blcc	2cec24 <__bss_end__+0x2c491c>
     3e8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     3ec:	26000018 			; <UNDEFINED> instruction: 0x26000018
     3f0:	08030034 	stmdaeq	r3, {r2, r4, r5}
     3f4:	0b3b0b3a 	bleq	ec30e4 <__bss_end__+0xeb8ddc>
     3f8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     3fc:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
     400:	03193f01 	tsteq	r9, #1, 30
     404:	3b0b3a0e 	blcc	2cec44 <__bss_end__+0x2c493c>
     408:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     40c:	01193c13 	tsteq	r9, r3, lsl ip
     410:	28000013 	stmdacs	r0, {r0, r1, r4}
     414:	00000018 	andeq	r0, r0, r8, lsl r0
     418:	3f012e29 	svccc	0x00012e29
     41c:	3a0e0319 	bcc	381088 <__bss_end__+0x376d80>
     420:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     424:	3c134919 	ldccc	9, cr4, [r3], {25}
     428:	00000019 	andeq	r0, r0, r9, lsl r0
     42c:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     430:	030b130e 	movweq	r1, #45838	; 0xb30e
     434:	110e1b0e 	tstne	lr, lr, lsl #22
     438:	10061201 	andne	r1, r6, r1, lsl #4
     43c:	02000017 	andeq	r0, r0, #23
     440:	0b0b0024 	bleq	2c04d8 <__bss_end__+0x2b61d0>
     444:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     448:	16030000 	strne	r0, [r3], -r0
     44c:	3a0e0300 	bcc	381054 <__bss_end__+0x376d4c>
     450:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     454:	04000013 	streq	r0, [r0], #-19
     458:	0b0b0024 	bleq	2c04f0 <__bss_end__+0x2b61e8>
     45c:	0e030b3e 	vmoveq.16	d3[0], r0
     460:	0f050000 	svceq	0x00050000
     464:	000b0b00 	andeq	r0, fp, r0, lsl #22
     468:	000f0600 	andeq	r0, pc, r0, lsl #12
     46c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     470:	26070000 	strcs	r0, [r7], -r0
     474:	00134900 	andseq	r4, r3, r0, lsl #18
     478:	01010800 	tsteq	r1, r0, lsl #16
     47c:	13011349 	movwne	r1, #4937	; 0x1349
     480:	21090000 	mrscs	r0, (UNDEF: 9)
     484:	2f134900 	svccs	0x00134900
     488:	0a00000b 	beq	4bc <_start-0x7b44>
     48c:	050b0113 	streq	r0, [fp, #-275]	; 0x113
     490:	0b3b0b3a 	bleq	ec3180 <__bss_end__+0xeb8e78>
     494:	00001301 	andeq	r1, r0, r1, lsl #6
     498:	03000d0b 	movweq	r0, #3339	; 0xd0b
     49c:	3b0b3a0e 	blcc	2cecdc <__bss_end__+0x2c49d4>
     4a0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     4a4:	0c00000b 	stceq	0, cr0, [r0], {11}
     4a8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     4ac:	0b3b0b3a 	bleq	ec319c <__bss_end__+0xeb8e94>
     4b0:	05381349 	ldreq	r1, [r8, #-841]!	; 0x349
     4b4:	0d0d0000 	stceq	0, cr0, [sp, #-0]
     4b8:	3a0e0300 	bcc	3810c0 <__bss_end__+0x376db8>
     4bc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4c0:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
     4c4:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
     4c8:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
     4cc:	13490021 	movtne	r0, #36897	; 0x9021
     4d0:	0000052f 	andeq	r0, r0, pc, lsr #10
     4d4:	4900350f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sl, ip, sp}
     4d8:	10000013 	andne	r0, r0, r3, lsl r0
     4dc:	0e03012e 	adfeqsp	f0, f3, #0.5
     4e0:	0b3b0b3a 	bleq	ec31d0 <__bss_end__+0xeb8ec8>
     4e4:	13491927 	movtne	r1, #39207	; 0x9927
     4e8:	13010b20 	movwne	r0, #6944	; 0x1b20
     4ec:	05110000 	ldreq	r0, [r1, #-0]
     4f0:	3a080300 	bcc	2010f8 <__bss_end__+0x1f6df0>
     4f4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4f8:	12000013 	andne	r0, r0, #19
     4fc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     500:	0b3b0b3a 	bleq	ec31f0 <__bss_end__+0xeb8ee8>
     504:	00001349 	andeq	r1, r0, r9, asr #6
     508:	3f012e13 	svccc	0x00012e13
     50c:	3a0e0319 	bcc	381178 <__bss_end__+0x376e70>
     510:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     514:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     518:	97184006 	ldrls	r4, [r8, -r6]
     51c:	13011942 	movwne	r1, #6466	; 0x1942
     520:	05140000 	ldreq	r0, [r4, #-0]
     524:	3a080300 	bcc	20112c <__bss_end__+0x1f6e24>
     528:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     52c:	00170213 	andseq	r0, r7, r3, lsl r2
     530:	00341500 	eorseq	r1, r4, r0, lsl #10
     534:	13490e03 	movtne	r0, #40451	; 0x9e03
     538:	18021934 	stmdane	r2, {r2, r4, r5, r8, fp, ip}
     53c:	1d160000 	ldcne	0, cr0, [r6, #-0]
     540:	11133101 	tstne	r3, r1, lsl #2
     544:	58061201 	stmdapl	r6, {r0, r9, ip}
     548:	010b590b 	tsteq	fp, fp, lsl #18
     54c:	17000013 	smladne	r0, r3, r0, r0
     550:	13310005 	teqne	r1, #5
     554:	00001702 	andeq	r1, r0, r2, lsl #14
     558:	01828918 	orreq	r8, r2, r8, lsl r9
     55c:	31011101 	tstcc	r1, r1, lsl #2
     560:	19000013 	stmdbne	r0, {r0, r1, r4}
     564:	0001828a 	andeq	r8, r1, sl, lsl #5
     568:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     56c:	1a000018 	bne	5d4 <_start-0x7a2c>
     570:	01018289 	smlabbeq	r1, r9, r2, r8
     574:	13310111 	teqne	r1, #1073741828	; 0x40000004
     578:	00001301 	andeq	r1, r0, r1, lsl #6
     57c:	0182891b 	orreq	r8, r2, fp, lsl r9
     580:	31011100 	mrscc	r1, (UNDEF: 17)
     584:	1c000013 	stcne	0, cr0, [r0], {19}
     588:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     58c:	0b3b0b3a 	bleq	ec327c <__bss_end__+0xeb8f74>
     590:	17021349 	strne	r1, [r2, -r9, asr #6]
     594:	341d0000 	ldrcc	r0, [sp], #-0
     598:	3a080300 	bcc	2011a0 <__bss_end__+0x1f6e98>
     59c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     5a0:	00170213 	andseq	r0, r7, r3, lsl r2
     5a4:	00051e00 	andeq	r1, r5, r0, lsl #28
     5a8:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
     5ac:	1d1f0000 	ldcne	0, cr0, [pc, #-0]	; 5b4 <_start-0x7a4c>
     5b0:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     5b4:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
     5b8:	010b590b 	tsteq	fp, fp, lsl #18
     5bc:	20000013 	andcs	r0, r0, r3, lsl r0
     5c0:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
     5c4:	34210000 	strtcc	r0, [r1], #-0
     5c8:	02133100 	andseq	r3, r3, #0, 2
     5cc:	22000017 	andcs	r0, r0, #23
     5d0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     5d4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     5d8:	0b590b58 	bleq	1643340 <__bss_end__+0x1639038>
     5dc:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
     5e0:	03193f01 	tsteq	r9, #1, 30
     5e4:	3b0b3a0e 	blcc	2cee24 <__bss_end__+0x2c4b1c>
     5e8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     5ec:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     5f0:	97184006 	ldrls	r4, [r8, -r6]
     5f4:	13011942 	movwne	r1, #6466	; 0x1942
     5f8:	0b240000 	bleq	900600 <__bss_end__+0x8f62f8>
     5fc:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     600:	25000006 	strcs	r0, [r0, #-6]
     604:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     608:	17550152 			; <UNDEFINED> instruction: 0x17550152
     60c:	0b590b58 	bleq	1643374 <__bss_end__+0x163906c>
     610:	34260000 	strtcc	r0, [r6], #-0
     614:	3a080300 	bcc	20121c <__bss_end__+0x1f6f14>
     618:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     61c:	00180213 	andseq	r0, r8, r3, lsl r2
     620:	00342700 	eorseq	r2, r4, r0, lsl #14
     624:	0b3a0e03 	bleq	e83e38 <__bss_end__+0xe79b30>
     628:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     62c:	00001702 	andeq	r1, r0, r2, lsl #14
     630:	11010b28 	tstne	r1, r8, lsr #22
     634:	01061201 	tsteq	r6, r1, lsl #4
     638:	29000013 	stmdbcs	r0, {r0, r1, r4}
     63c:	13310034 	teqne	r1, #52	; 0x34
     640:	00001802 	andeq	r1, r0, r2, lsl #16
     644:	3f012e2a 	svccc	0x00012e2a
     648:	3a0e0319 	bcc	3812b4 <__bss_end__+0x376fac>
     64c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     650:	3c134919 	ldccc	9, cr4, [r3], {25}
     654:	00130119 	andseq	r0, r3, r9, lsl r1
     658:	00052b00 	andeq	r2, r5, r0, lsl #22
     65c:	00001349 	andeq	r1, r0, r9, asr #6
     660:	0000182c 	andeq	r1, r0, ip, lsr #16
     664:	002e2d00 	eoreq	r2, lr, r0, lsl #26
     668:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     66c:	0b3b0b3a 	bleq	ec335c <__bss_end__+0xeb9054>
     670:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     674:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
     678:	03193f01 	tsteq	r9, #1, 30
     67c:	3b0b3a0e 	blcc	2ceebc <__bss_end__+0x2c4bb4>
     680:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     684:	00193c13 	andseq	r3, r9, r3, lsl ip
     688:	11010000 	mrsne	r0, (UNDEF: 1)
     68c:	130e2501 	movwne	r2, #58625	; 0xe501
     690:	1b0e030b 	blne	3812c4 <__bss_end__+0x376fbc>
     694:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     698:	00171006 	andseq	r1, r7, r6
     69c:	00240200 	eoreq	r0, r4, r0, lsl #4
     6a0:	0b3e0b0b 	bleq	f832d4 <__bss_end__+0xf78fcc>
     6a4:	00000e03 	andeq	r0, r0, r3, lsl #28
     6a8:	0b002403 	bleq	96bc <__FUNCTION__.4178+0x4>
     6ac:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     6b0:	04000008 	streq	r0, [r0], #-8
     6b4:	0b0b000f 	bleq	2c06f8 <__bss_end__+0x2b63f0>
     6b8:	0f050000 	svceq	0x00050000
     6bc:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     6c0:	06000013 			; <UNDEFINED> instruction: 0x06000013
     6c4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     6c8:	0b3b0b3a 	bleq	ec33b8 <__bss_end__+0xeb90b0>
     6cc:	00001349 	andeq	r1, r0, r9, asr #6
     6d0:	3f012e07 	svccc	0x00012e07
     6d4:	3a0e0319 	bcc	381340 <__bss_end__+0x377038>
     6d8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     6dc:	11134919 	tstne	r3, r9, lsl r9
     6e0:	40061201 	andmi	r1, r6, r1, lsl #4
     6e4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     6e8:	05080000 	streq	r0, [r8, #-0]
     6ec:	3a080300 	bcc	2012f4 <__bss_end__+0x1f6fec>
     6f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     6f4:	00180213 	andseq	r0, r8, r3, lsl r2
     6f8:	00050900 	andeq	r0, r5, r0, lsl #18
     6fc:	0b3a0803 	bleq	e82710 <__bss_end__+0xe78408>
     700:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     704:	00001702 	andeq	r1, r0, r2, lsl #14
     708:	0300340a 	movweq	r3, #1034	; 0x40a
     70c:	3b0b3a08 	blcc	2cef34 <__bss_end__+0x2c4c2c>
     710:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     714:	0b000017 	bleq	778 <_start-0x7888>
     718:	08030034 	stmdaeq	r3, {r2, r4, r5}
     71c:	0b3b0b3a 	bleq	ec340c <__bss_end__+0xeb9104>
     720:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     724:	01000000 	mrseq	r0, (UNDEF: 0)
     728:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     72c:	0e030b13 	vmoveq.32	d3[0], r0
     730:	01110e1b 	tsteq	r1, fp, lsl lr
     734:	17100612 			; <UNDEFINED> instruction: 0x17100612
     738:	16020000 	strne	r0, [r2], -r0
     73c:	3a0e0300 	bcc	381344 <__bss_end__+0x37703c>
     740:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     744:	03000013 	movweq	r0, #19
     748:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     74c:	0b3a0b0b 	bleq	e83380 <__bss_end__+0xe79078>
     750:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     754:	0d040000 	stceq	0, cr0, [r4, #-0]
     758:	490e0300 	stmdbmi	lr, {r8, r9}
     75c:	340b3813 	strcc	r3, [fp], #-2067	; 0x813
     760:	05000019 	streq	r0, [r0, #-25]
     764:	0b0b000f 	bleq	2c07a8 <__bss_end__+0x2b64a0>
     768:	24060000 	strcs	r0, [r6], #-0
     76c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     770:	0008030b 	andeq	r0, r8, fp, lsl #6
     774:	00240700 	eoreq	r0, r4, r0, lsl #14
     778:	0b3e0b0b 	bleq	f833ac <__bss_end__+0xf790a4>
     77c:	00000e03 	andeq	r0, r0, r3, lsl #28
     780:	0b000f08 	bleq	43a8 <_start-0x3c58>
     784:	0013490b 	andseq	r4, r3, fp, lsl #18
     788:	00260900 	eoreq	r0, r6, r0, lsl #18
     78c:	00001349 	andeq	r1, r0, r9, asr #6
     790:	3f012e0a 	svccc	0x00012e0a
     794:	3a0e0319 	bcc	381400 <__bss_end__+0x3770f8>
     798:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     79c:	11134919 	tstne	r3, r9, lsl r9
     7a0:	40061201 	andmi	r1, r6, r1, lsl #4
     7a4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     7a8:	00001301 	andeq	r1, r0, r1, lsl #6
     7ac:	0300050b 	movweq	r0, #1291	; 0x50b
     7b0:	3b0b3a08 	blcc	2cefd8 <__bss_end__+0x2c4cd0>
     7b4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     7b8:	0c000018 	stceq	0, cr0, [r0], {24}
     7bc:	00000018 	andeq	r0, r0, r8, lsl r0
     7c0:	0300340d 	movweq	r3, #1037	; 0x40d
     7c4:	3b0b3a08 	blcc	2cefec <__bss_end__+0x2c4ce4>
     7c8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     7cc:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
     7d0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     7d4:	0b3b0b3a 	bleq	ec34c4 <__bss_end__+0xeb91bc>
     7d8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     7dc:	340f0000 	strcc	r0, [pc], #-0	; 7e4 <_start-0x781c>
     7e0:	3a080300 	bcc	2013e8 <__bss_end__+0x1f70e0>
     7e4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     7e8:	00170213 	andseq	r0, r7, r3, lsl r2
     7ec:	82891000 	addhi	r1, r9, #0
     7f0:	01110101 	tsteq	r1, r1, lsl #2
     7f4:	13011331 	movwne	r1, #4913	; 0x1331
     7f8:	8a110000 	bhi	440800 <__bss_end__+0x4364f8>
     7fc:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     800:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     804:	89120000 	ldmdbhi	r2, {}	; <UNPREDICTABLE>
     808:	11010182 	smlabbne	r1, r2, r1, r0
     80c:	13000001 	movwne	r0, #1
     810:	13490101 	movtne	r0, #37121	; 0x9101
     814:	00001301 	andeq	r1, r0, r1, lsl #6
     818:	49002114 	stmdbmi	r0, {r2, r4, r8, sp}
     81c:	00052f13 	andeq	r2, r5, r3, lsl pc
     820:	01151500 	tsteq	r5, r0, lsl #10
     824:	13491927 	movtne	r1, #39207	; 0x9927
     828:	00001301 	andeq	r1, r0, r1, lsl #6
     82c:	49000516 	stmdbmi	r0, {r1, r2, r4, r8, sl}
     830:	17000013 	smladne	r0, r3, r0, r0
     834:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     838:	0b3b0b3a 	bleq	ec3528 <__bss_end__+0xeb9220>
     83c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     840:	0000193c 	andeq	r1, r0, ip, lsr r9
     844:	3f012e18 	svccc	0x00012e18
     848:	3a0e0319 	bcc	3814b4 <__bss_end__+0x3771ac>
     84c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     850:	3c134919 	ldccc	9, cr4, [r3], {25}
     854:	00000019 	andeq	r0, r0, r9, lsl r0
     858:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     85c:	030b130e 	movweq	r1, #45838	; 0xb30e
     860:	110e1b0e 	tstne	lr, lr, lsl #22
     864:	10061201 	andne	r1, r6, r1, lsl #4
     868:	02000017 	andeq	r0, r0, #23
     86c:	0b0b0024 	bleq	2c0904 <__bss_end__+0x2b65fc>
     870:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     874:	24030000 	strcs	r0, [r3], #-0
     878:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     87c:	000e030b 	andeq	r0, lr, fp, lsl #6
     880:	000f0400 	andeq	r0, pc, r0, lsl #8
     884:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     888:	26050000 	strcs	r0, [r5], -r0
     88c:	00134900 	andseq	r4, r3, r0, lsl #18
     890:	012e0600 	teqeq	lr, r0, lsl #12
     894:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     898:	0b3b0b3a 	bleq	ec3588 <__bss_end__+0xeb9280>
     89c:	13491927 	movtne	r1, #39207	; 0x9927
     8a0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     8a4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     8a8:	00130119 	andseq	r0, r3, r9, lsl r1
     8ac:	00050700 	andeq	r0, r5, r0, lsl #14
     8b0:	0b3a0803 	bleq	e828c4 <__bss_end__+0xe785bc>
     8b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     8b8:	00001702 	andeq	r1, r0, r2, lsl #14
     8bc:	27011508 	strcs	r1, [r1, -r8, lsl #10]
     8c0:	01134919 	tsteq	r3, r9, lsl r9
     8c4:	09000013 	stmdbeq	r0, {r0, r1, r4}
     8c8:	13490005 	movtne	r0, #36869	; 0x9005
     8cc:	340a0000 	strcc	r0, [sl], #-0
     8d0:	3a0e0300 	bcc	3814d8 <__bss_end__+0x3771d0>
     8d4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8d8:	3c193f13 	ldccc	15, cr3, [r9], {19}
     8dc:	0b000019 	bleq	948 <_start-0x76b8>
     8e0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     8e4:	0b3b0b3a 	bleq	ec35d4 <__bss_end__+0xeb92cc>
     8e8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     8ec:	00001802 	andeq	r1, r0, r2, lsl #16
     8f0:	01110100 	tsteq	r1, r0, lsl #2
     8f4:	0b130e25 	bleq	4c4190 <__bss_end__+0x4b9e88>
     8f8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     8fc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     900:	00001710 	andeq	r1, r0, r0, lsl r7
     904:	0b002402 	bleq	9914 <__FUNCTION__.4243>
     908:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     90c:	03000008 	movweq	r0, #8
     910:	0b0b0024 	bleq	2c09a8 <__bss_end__+0x2b66a0>
     914:	0e030b3e 	vmoveq.16	d3[0], r0
     918:	0f040000 	svceq	0x00040000
     91c:	000b0b00 	andeq	r0, fp, r0, lsl #22
     920:	000f0500 	andeq	r0, pc, r0, lsl #10
     924:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     928:	26060000 	strcs	r0, [r6], -r0
     92c:	00134900 	andseq	r4, r3, r0, lsl #18
     930:	00160700 	andseq	r0, r6, r0, lsl #14
     934:	0b3a0e03 	bleq	e84148 <__bss_end__+0xe79e40>
     938:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     93c:	13080000 	movwne	r0, #32768	; 0x8000
     940:	0b0e0301 	bleq	38154c <__bss_end__+0x377244>
     944:	3b0b3a0b 	blcc	2cf178 <__bss_end__+0x2c4e70>
     948:	0013010b 	andseq	r0, r3, fp, lsl #2
     94c:	000d0900 	andeq	r0, sp, r0, lsl #18
     950:	13490e03 	movtne	r0, #40451	; 0x9e03
     954:	19340b38 	ldmdbne	r4!, {r3, r4, r5, r8, r9, fp}
     958:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
     95c:	3a0e0301 	bcc	381568 <__bss_end__+0x377260>
     960:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     964:	11134919 	tstne	r3, r9, lsl r9
     968:	40061201 	andmi	r1, r6, r1, lsl #4
     96c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     970:	00001301 	andeq	r1, r0, r1, lsl #6
     974:	0300050b 	movweq	r0, #1291	; 0x50b
     978:	3b0b3a08 	blcc	2cf1a0 <__bss_end__+0x2c4e98>
     97c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     980:	0c000017 	stceq	0, cr0, [r0], {23}
     984:	0803012e 	stmdaeq	r3, {r1, r2, r3, r5, r8}
     988:	0b3b0b3a 	bleq	ec3678 <__bss_end__+0xeb9370>
     98c:	13491927 	movtne	r1, #39207	; 0x9927
     990:	06120111 			; <UNDEFINED> instruction: 0x06120111
     994:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     998:	00130119 	andseq	r0, r3, r9, lsl r1
     99c:	00050d00 	andeq	r0, r5, r0, lsl #26
     9a0:	0b3a0e03 	bleq	e841b4 <__bss_end__+0xe79eac>
     9a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     9a8:	00001702 	andeq	r1, r0, r2, lsl #14
     9ac:	0300050e 	movweq	r0, #1294	; 0x50e
     9b0:	3b0b3a0e 	blcc	2cf1f0 <__bss_end__+0x2c4ee8>
     9b4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     9b8:	0f000018 	svceq	0x00000018
     9bc:	08030034 	stmdaeq	r3, {r2, r4, r5}
     9c0:	0b3b0b3a 	bleq	ec36b0 <__bss_end__+0xeb93a8>
     9c4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     9c8:	34100000 	ldrcc	r0, [r0], #-0
     9cc:	3a080300 	bcc	2015d4 <__bss_end__+0x1f72cc>
     9d0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     9d4:	00170213 	andseq	r0, r7, r3, lsl r2
     9d8:	00341100 	eorseq	r1, r4, r0, lsl #2
     9dc:	13490e03 	movtne	r0, #40451	; 0x9e03
     9e0:	18021934 	stmdane	r2, {r2, r4, r5, r8, fp, ip}
     9e4:	0b120000 	bleq	4809ec <__bss_end__+0x4766e4>
     9e8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     9ec:	00130106 	andseq	r0, r3, r6, lsl #2
     9f0:	00341300 	eorseq	r1, r4, r0, lsl #6
     9f4:	0b3a0e03 	bleq	e84208 <__bss_end__+0xe79f00>
     9f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     9fc:	00001702 	andeq	r1, r0, r2, lsl #14
     a00:	01828914 	orreq	r8, r2, r4, lsl r9
     a04:	31011101 	tstcc	r1, r1, lsl #2
     a08:	00130113 	andseq	r0, r3, r3, lsl r1
     a0c:	828a1500 	addhi	r1, sl, #0, 10
     a10:	18020001 	stmdane	r2, {r0}
     a14:	00184291 	mulseq	r8, r1, r2
     a18:	82891600 	addhi	r1, r9, #0, 12
     a1c:	01110001 	tsteq	r1, r1
     a20:	00001331 	andeq	r1, r0, r1, lsr r3
     a24:	01828917 	orreq	r8, r2, r7, lsl r9
     a28:	31011101 	tstcc	r1, r1, lsl #2
     a2c:	18000013 	stmdane	r0, {r0, r1, r4}
     a30:	13490101 	movtne	r0, #37121	; 0x9101
     a34:	00001301 	andeq	r1, r0, r1, lsl #6
     a38:	49002119 	stmdbmi	r0, {r0, r3, r4, r8, sp}
     a3c:	000b2f13 	andeq	r2, fp, r3, lsl pc
     a40:	012e1a00 	teqeq	lr, r0, lsl #20
     a44:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     a48:	0b3b0b3a 	bleq	ec3738 <__bss_end__+0xeb9430>
     a4c:	01111927 	tsteq	r1, r7, lsr #18
     a50:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a54:	01194297 			; <UNDEFINED> instruction: 0x01194297
     a58:	1b000013 	blne	aac <_start-0x7554>
     a5c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     a60:	13011349 	movwne	r1, #4937	; 0x1349
     a64:	051c0000 	ldreq	r0, [ip, #-0]
     a68:	00134900 	andseq	r4, r3, r0, lsl #18
     a6c:	012e1d00 	teqeq	lr, r0, lsl #26
     a70:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     a74:	0b3b0b3a 	bleq	ec3764 <__bss_end__+0xeb945c>
     a78:	13491927 	movtne	r1, #39207	; 0x9927
     a7c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     a80:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     a84:	00130119 	andseq	r0, r3, r9, lsl r1
     a88:	010b1e00 	tsteq	fp, r0, lsl #28
     a8c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     a90:	341f0000 	ldrcc	r0, [pc], #-0	; a98 <_start-0x7568>
     a94:	3a0e0300 	bcc	38169c <__bss_end__+0x377394>
     a98:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a9c:	3c193f13 	ldccc	15, cr3, [r9], {19}
     aa0:	20000019 	andcs	r0, r0, r9, lsl r0
     aa4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     aa8:	0b3a0e03 	bleq	e842bc <__bss_end__+0xe79fb4>
     aac:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     ab0:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     ab4:	00001301 	andeq	r1, r0, r1, lsl #6
     ab8:	00001821 	andeq	r1, r0, r1, lsr #16
     abc:	002e2200 	eoreq	r2, lr, r0, lsl #4
     ac0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     ac4:	0b3b0b3a 	bleq	ec37b4 <__bss_end__+0xeb94ac>
     ac8:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     acc:	01000000 	mrseq	r0, (UNDEF: 0)
     ad0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     ad4:	0e030b13 	vmoveq.32	d3[0], r0
     ad8:	01110e1b 	tsteq	r1, fp, lsl lr
     adc:	17100612 			; <UNDEFINED> instruction: 0x17100612
     ae0:	24020000 	strcs	r0, [r2], #-0
     ae4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     ae8:	0008030b 	andeq	r0, r8, fp, lsl #6
     aec:	00240300 	eoreq	r0, r4, r0, lsl #6
     af0:	0b3e0b0b 	bleq	f83724 <__bss_end__+0xf7941c>
     af4:	00000e03 	andeq	r0, r0, r3, lsl #28
     af8:	0b000f04 	bleq	4710 <_start-0x38f0>
     afc:	0013490b 	andseq	r4, r3, fp, lsl #18
     b00:	00260500 	eoreq	r0, r6, r0, lsl #10
     b04:	00001349 	andeq	r1, r0, r9, asr #6
     b08:	3f012e06 	svccc	0x00012e06
     b0c:	3a0e0319 	bcc	381778 <__bss_end__+0x377470>
     b10:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     b14:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     b18:	97184006 	ldrls	r4, [r8, -r6]
     b1c:	13011942 	movwne	r1, #6466	; 0x1942
     b20:	89070000 	stmdbhi	r7, {}	; <UNPREDICTABLE>
     b24:	11010182 	smlabbne	r1, r2, r1, r0
     b28:	00130101 	andseq	r0, r3, r1, lsl #2
     b2c:	828a0800 	addhi	r0, sl, #0, 16
     b30:	18020001 	stmdane	r2, {r0}
     b34:	00184291 	mulseq	r8, r1, r2
     b38:	82890900 	addhi	r0, r9, #0, 18
     b3c:	01110101 	tsteq	r1, r1, lsl #2
     b40:	13011331 	movwne	r1, #4913	; 0x1331
     b44:	890a0000 	stmdbhi	sl, {}	; <UNPREDICTABLE>
     b48:	11000182 	smlabbne	r0, r2, r1, r0
     b4c:	00133101 	andseq	r3, r3, r1, lsl #2
     b50:	01150b00 	tsteq	r5, r0, lsl #22
     b54:	13491927 	movtne	r1, #39207	; 0x9927
     b58:	00001301 	andeq	r1, r0, r1, lsl #6
     b5c:	4900050c 	stmdbmi	r0, {r2, r3, r8, sl}
     b60:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     b64:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     b68:	0b3b0b3a 	bleq	ec3858 <__bss_end__+0xeb9550>
     b6c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     b70:	0000193c 	andeq	r1, r0, ip, lsr r9
     b74:	3f012e0e 	svccc	0x00012e0e
     b78:	3a0e0319 	bcc	3817e4 <__bss_end__+0x3774dc>
     b7c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     b80:	01193c19 	tsteq	r9, r9, lsl ip
     b84:	0f000013 	svceq	0x00000013
     b88:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     b8c:	0b3a0e03 	bleq	e843a0 <__bss_end__+0xe7a098>
     b90:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     b94:	0000193c 	andeq	r1, r0, ip, lsr r9
     b98:	01110100 	tsteq	r1, r0, lsl #2
     b9c:	0b130e25 	bleq	4c4438 <__bss_end__+0x4ba130>
     ba0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     ba4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     ba8:	00001710 	andeq	r1, r0, r0, lsl r7
     bac:	0b002402 	bleq	9bbc <__FUNCTION__.4250+0x78>
     bb0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     bb4:	03000008 	movweq	r0, #8
     bb8:	0b0b0024 	bleq	2c0c50 <__bss_end__+0x2b6948>
     bbc:	0e030b3e 	vmoveq.16	d3[0], r0
     bc0:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
     bc4:	03193f01 	tsteq	r9, #1, 30
     bc8:	3b0b3a0e 	blcc	2cf408 <__bss_end__+0x2c5100>
     bcc:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
     bd0:	97184006 	ldrls	r4, [r8, -r6]
     bd4:	13011942 	movwne	r1, #6466	; 0x1942
     bd8:	34050000 	strcc	r0, [r5], #-0
     bdc:	3a0e0300 	bcc	3817e4 <__bss_end__+0x3774dc>
     be0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     be4:	3c193f13 	ldccc	15, cr3, [r9], {19}
     be8:	06000019 			; <UNDEFINED> instruction: 0x06000019
     bec:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     bf0:	0b3a0e03 	bleq	e84404 <__bss_end__+0xe7a0fc>
     bf4:	193c0b3b 	ldmdbne	ip!, {r0, r1, r3, r4, r5, r8, r9, fp}
     bf8:	00001301 	andeq	r1, r0, r1, lsl #6
     bfc:	00001807 	andeq	r1, r0, r7, lsl #16
     c00:	00340800 	eorseq	r0, r4, r0, lsl #16
     c04:	0b3a0803 	bleq	e82c18 <__bss_end__+0xe78910>
     c08:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     c0c:	00001702 	andeq	r1, r0, r2, lsl #14
     c10:	03003409 	movweq	r3, #1033	; 0x409
     c14:	3b0b3a0e 	blcc	2cf454 <__bss_end__+0x2c514c>
     c18:	0013490b 	andseq	r4, r3, fp, lsl #18
     c1c:	82890a00 	addhi	r0, r9, #0, 20
     c20:	01110001 	tsteq	r1, r1
     c24:	00001331 	andeq	r1, r0, r1, lsr r3
     c28:	0b000f0b 	bleq	485c <_start-0x37a4>
     c2c:	0013490b 	andseq	r4, r3, fp, lsl #18
     c30:	002e0c00 	eoreq	r0, lr, r0, lsl #24
     c34:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     c38:	0b3b0b3a 	bleq	ec3928 <__bss_end__+0xeb9620>
     c3c:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     c40:	01000000 	mrseq	r0, (UNDEF: 0)
     c44:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     c48:	0e030b13 	vmoveq.32	d3[0], r0
     c4c:	17550e1b 	smmlane	r5, fp, lr, r0
     c50:	17100111 			; <UNDEFINED> instruction: 0x17100111
     c54:	24020000 	strcs	r0, [r2], #-0
     c58:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     c5c:	0008030b 	andeq	r0, r8, fp, lsl #6
     c60:	00240300 	eoreq	r0, r4, r0, lsl #6
     c64:	0b3e0b0b 	bleq	f83898 <__bss_end__+0xf79590>
     c68:	00000e03 	andeq	r0, r0, r3, lsl #28
     c6c:	3f012e04 	svccc	0x00012e04
     c70:	3a0e0319 	bcc	3818dc <__bss_end__+0x3775d4>
     c74:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     c78:	11134919 	tstne	r3, r9, lsl r9
     c7c:	40061201 	andmi	r1, r6, r1, lsl #4
     c80:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     c84:	00001301 	andeq	r1, r0, r1, lsl #6
     c88:	03003405 	movweq	r3, #1029	; 0x405
     c8c:	3b0b3a0e 	blcc	2cf4cc <__bss_end__+0x2c51c4>
     c90:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     c94:	06000017 			; <UNDEFINED> instruction: 0x06000017
     c98:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     c9c:	0b3a0e03 	bleq	e844b0 <__bss_end__+0xe7a1a8>
     ca0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     ca4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     ca8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     cac:	00130119 	andseq	r0, r3, r9, lsl r1
     cb0:	00340700 	eorseq	r0, r4, r0, lsl #14
     cb4:	0b3a0e03 	bleq	e844c8 <__bss_end__+0xe7a1c0>
     cb8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     cbc:	0000061c 	andeq	r0, r0, ip, lsl r6
     cc0:	03003408 	movweq	r3, #1032	; 0x408
     cc4:	3b0b3a0e 	blcc	2cf504 <__bss_end__+0x2c51fc>
     cc8:	1c13490b 	ldcne	9, cr4, [r3], {11}
     ccc:	0900000b 	stmdbeq	r0, {r0, r1, r3}
     cd0:	00018289 	andeq	r8, r1, r9, lsl #5
     cd4:	13310111 	teqne	r1, #1073741828	; 0x40000004
     cd8:	890a0000 	stmdbhi	sl, {}	; <UNPREDICTABLE>
     cdc:	11010182 	smlabbne	r1, r2, r1, r0
     ce0:	01133101 	tsteq	r3, r1, lsl #2
     ce4:	0b000013 	bleq	d38 <_start-0x72c8>
     ce8:	0001828a 	andeq	r8, r1, sl, lsl #5
     cec:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     cf0:	0c000018 	stceq	0, cr0, [r0], {24}
     cf4:	01018289 	smlabbeq	r1, r9, r2, r8
     cf8:	13310111 	teqne	r1, #1073741828	; 0x40000004
     cfc:	260d0000 	strcs	r0, [sp], -r0
     d00:	00134900 	andseq	r4, r3, r0, lsl #18
     d04:	012e0e00 	teqeq	lr, r0, lsl #28
     d08:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     d0c:	0b3b0b3a 	bleq	ec39fc <__bss_end__+0xeb96f4>
     d10:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     d14:	00001301 	andeq	r1, r0, r1, lsl #6
     d18:	4900050f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sl}
     d1c:	10000013 	andne	r0, r0, r3, lsl r0
     d20:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     d24:	0b3a0e03 	bleq	e84538 <__bss_end__+0xe7a230>
     d28:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     d2c:	0000193c 	andeq	r1, r0, ip, lsr r9
     d30:	01110100 	tsteq	r1, r0, lsl #2
     d34:	0b130e25 	bleq	4c45d0 <__bss_end__+0x4ba2c8>
     d38:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     d3c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     d40:	00001710 	andeq	r1, r0, r0, lsl r7
     d44:	0b002402 	bleq	9d54 <__FUNCTION__.4207+0x84>
     d48:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     d4c:	03000008 	movweq	r0, #8
     d50:	0b0b0024 	bleq	2c0de8 <__bss_end__+0x2b6ae0>
     d54:	0e030b3e 	vmoveq.16	d3[0], r0
     d58:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
     d5c:	03193f01 	tsteq	r9, #1, 30
     d60:	3b0b3a0e 	blcc	2cf5a0 <__bss_end__+0x2c5298>
     d64:	1119270b 	tstne	r9, fp, lsl #14
     d68:	40061201 	andmi	r1, r6, r1, lsl #4
     d6c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     d70:	00001301 	andeq	r1, r0, r1, lsl #6
     d74:	03000505 	movweq	r0, #1285	; 0x505
     d78:	3b0b3a0e 	blcc	2cf5b8 <__bss_end__+0x2c52b0>
     d7c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     d80:	06000017 			; <UNDEFINED> instruction: 0x06000017
     d84:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     d88:	0b3a0e03 	bleq	e8459c <__bss_end__+0xe7a294>
     d8c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     d90:	01111349 	tsteq	r1, r9, asr #6
     d94:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     d98:	01194297 			; <UNDEFINED> instruction: 0x01194297
     d9c:	07000013 	smladeq	r0, r3, r0, r0
     da0:	01018289 	smlabbeq	r1, r9, r2, r8
     da4:	13310111 	teqne	r1, #1073741828	; 0x40000004
     da8:	8a080000 	bhi	200db0 <__bss_end__+0x1f6aa8>
     dac:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     db0:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     db4:	05090000 	streq	r0, [r9, #-0]
     db8:	3a080300 	bcc	2019c0 <__bss_end__+0x1f76b8>
     dbc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     dc0:	00170213 	andseq	r0, r7, r3, lsl r2
     dc4:	00340a00 	eorseq	r0, r4, r0, lsl #20
     dc8:	0b3a0803 	bleq	e82ddc <__bss_end__+0xe78ad4>
     dcc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     dd0:	00001802 	andeq	r1, r0, r2, lsl #16
     dd4:	11010b0b 	tstne	r1, fp, lsl #22
     dd8:	01061201 	tsteq	r6, r1, lsl #4
     ddc:	0c000013 	stceq	0, cr0, [r0], {19}
     de0:	08030034 	stmdaeq	r3, {r2, r4, r5}
     de4:	0b3b0b3a 	bleq	ec3ad4 <__bss_end__+0xeb97cc>
     de8:	17021349 	strne	r1, [r2, -r9, asr #6]
     dec:	890d0000 	stmdbhi	sp, {}	; <UNPREDICTABLE>
     df0:	11000182 	smlabbne	r0, r2, r1, r0
     df4:	00133101 	andseq	r3, r3, r1, lsl #2
     df8:	012e0e00 	teqeq	lr, r0, lsl #28
     dfc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     e00:	0b3b0b3a 	bleq	ec3af0 <__bss_end__+0xeb97e8>
     e04:	13491927 	movtne	r1, #39207	; 0x9927
     e08:	0000193c 	andeq	r1, r0, ip, lsr r9
     e0c:	4900050f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sl}
     e10:	00000013 	andeq	r0, r0, r3, lsl r0
     e14:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     e18:	030b130e 	movweq	r1, #45838	; 0xb30e
     e1c:	110e1b0e 	tstne	lr, lr, lsl #22
     e20:	10061201 	andne	r1, r6, r1, lsl #4
     e24:	02000017 	andeq	r0, r0, #23
     e28:	0b0b0024 	bleq	2c0ec0 <__bss_end__+0x2b6bb8>
     e2c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     e30:	16030000 	strne	r0, [r3], -r0
     e34:	3a0e0300 	bcc	381a3c <__bss_end__+0x377734>
     e38:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e3c:	04000013 	streq	r0, [r0], #-19
     e40:	0b0b0024 	bleq	2c0ed8 <__bss_end__+0x2b6bd0>
     e44:	0e030b3e 	vmoveq.16	d3[0], r0
     e48:	0f050000 	svceq	0x00050000
     e4c:	000b0b00 	andeq	r0, fp, r0, lsl #22
     e50:	000f0600 	andeq	r0, pc, r0, lsl #12
     e54:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     e58:	26070000 	strcs	r0, [r7], -r0
     e5c:	00134900 	andseq	r4, r3, r0, lsl #18
     e60:	01010800 	tsteq	r1, r0, lsl #16
     e64:	13011349 	movwne	r1, #4937	; 0x1349
     e68:	21090000 	mrscs	r0, (UNDEF: 9)
     e6c:	2f134900 	svccs	0x00134900
     e70:	0a00000b 	beq	ea4 <_start-0x715c>
     e74:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     e78:	0b3a0e03 	bleq	e8468c <__bss_end__+0xe7a384>
     e7c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     e80:	01111349 	tsteq	r1, r9, asr #6
     e84:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     e88:	01194297 			; <UNDEFINED> instruction: 0x01194297
     e8c:	0b000013 	bleq	ee0 <_start-0x7120>
     e90:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     e94:	0b3b0b3a 	bleq	ec3b84 <__bss_end__+0xeb987c>
     e98:	17021349 	strne	r1, [r2, -r9, asr #6]
     e9c:	340c0000 	strcc	r0, [ip], #-0
     ea0:	490e0300 	stmdbmi	lr, {r8, r9}
     ea4:	02193413 	andseq	r3, r9, #318767104	; 0x13000000
     ea8:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
     eac:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     eb0:	0b3b0b3a 	bleq	ec3ba0 <__bss_end__+0xeb9898>
     eb4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     eb8:	340e0000 	strcc	r0, [lr], #-0
     ebc:	3a0e0300 	bcc	381ac4 <__bss_end__+0x3777bc>
     ec0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ec4:	00170213 	andseq	r0, r7, r3, lsl r2
     ec8:	82890f00 	addhi	r0, r9, #0, 30
     ecc:	01110101 	tsteq	r1, r1, lsl #2
     ed0:	13011331 	movwne	r1, #4913	; 0x1331
     ed4:	8a100000 	bhi	400edc <__bss_end__+0x3f6bd4>
     ed8:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     edc:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     ee0:	89110000 	ldmdbhi	r1, {}	; <UNPREDICTABLE>
     ee4:	11000182 	smlabbne	r0, r2, r1, r0
     ee8:	00133101 	andseq	r3, r3, r1, lsl #2
     eec:	82891200 	addhi	r1, r9, #0, 4
     ef0:	01110101 	tsteq	r1, r1, lsl #2
     ef4:	00001331 	andeq	r1, r0, r1, lsr r3
     ef8:	3f012e13 	svccc	0x00012e13
     efc:	3a0e0319 	bcc	381b68 <__bss_end__+0x377860>
     f00:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     f04:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     f08:	97184006 	ldrls	r4, [r8, -r6]
     f0c:	13011942 	movwne	r1, #6466	; 0x1942
     f10:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
     f14:	03193f00 	tsteq	r9, #0, 30
     f18:	3b0b3a0e 	blcc	2cf758 <__bss_end__+0x2c5450>
     f1c:	1119270b 	tstne	r9, fp, lsl #14
     f20:	40061201 	andmi	r1, r6, r1, lsl #4
     f24:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     f28:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
     f2c:	03193f00 	tsteq	r9, #0, 30
     f30:	3b0b3a0e 	blcc	2cf770 <__bss_end__+0x2c5468>
     f34:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     f38:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     f3c:	97184006 	ldrls	r4, [r8, -r6]
     f40:	00001942 	andeq	r1, r0, r2, asr #18
     f44:	03003416 	movweq	r3, #1046	; 0x416
     f48:	3b0b3a0e 	blcc	2cf788 <__bss_end__+0x2c5480>
     f4c:	3f13490b 	svccc	0x0013490b
     f50:	00193c19 	andseq	r3, r9, r9, lsl ip
     f54:	012e1700 	teqeq	lr, r0, lsl #14
     f58:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     f5c:	0b3b0b3a 	bleq	ec3c4c <__bss_end__+0xeb9944>
     f60:	13491927 	movtne	r1, #39207	; 0x9927
     f64:	1301193c 	movwne	r1, #6460	; 0x193c
     f68:	05180000 	ldreq	r0, [r8, #-0]
     f6c:	00134900 	andseq	r4, r3, r0, lsl #18
     f70:	00181900 	andseq	r1, r8, r0, lsl #18
     f74:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
     f78:	03193f00 	tsteq	r9, #0, 30
     f7c:	3b0b3a0e 	blcc	2cf7bc <__bss_end__+0x2c54b4>
     f80:	3c19270b 	ldccc	7, cr2, [r9], {11}
     f84:	1b000019 	blne	ff0 <_start-0x7010>
     f88:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     f8c:	0b3a0e03 	bleq	e847a0 <__bss_end__+0xe7a498>
     f90:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     f94:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     f98:	01000000 	mrseq	r0, (UNDEF: 0)
     f9c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     fa0:	0e030b13 	vmoveq.32	d3[0], r0
     fa4:	01110e1b 	tsteq	r1, fp, lsl lr
     fa8:	17100612 			; <UNDEFINED> instruction: 0x17100612
     fac:	24020000 	strcs	r0, [r2], #-0
     fb0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     fb4:	0008030b 	andeq	r0, r8, fp, lsl #6
     fb8:	00240300 	eoreq	r0, r4, r0, lsl #6
     fbc:	0b3e0b0b 	bleq	f83bf0 <__bss_end__+0xf798e8>
     fc0:	00000e03 	andeq	r0, r0, r3, lsl #28
     fc4:	03012e04 	movweq	r2, #7684	; 0x1e04
     fc8:	3b0b3a0e 	blcc	2cf808 <__bss_end__+0x2c5500>
     fcc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     fd0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     fd4:	97184006 	ldrls	r4, [r8, -r6]
     fd8:	13011942 	movwne	r1, #6466	; 0x1942
     fdc:	05050000 	streq	r0, [r5, #-0]
     fe0:	3a080300 	bcc	201be8 <__bss_end__+0x1f78e0>
     fe4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fe8:	00170213 	andseq	r0, r7, r3, lsl r2
     fec:	82890600 	addhi	r0, r9, #0, 12
     ff0:	01110101 	tsteq	r1, r1, lsl #2
     ff4:	00001331 	andeq	r1, r0, r1, lsr r3
     ff8:	01828a07 	orreq	r8, r2, r7, lsl #20
     ffc:	91180200 	tstls	r8, r0, lsl #4
    1000:	00001842 	andeq	r1, r0, r2, asr #16
    1004:	27011508 	strcs	r1, [r1, -r8, lsl #10]
    1008:	01134919 	tsteq	r3, r9, lsl r9
    100c:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1010:	13490005 	movtne	r0, #36869	; 0x9005
    1014:	340a0000 	strcc	r0, [sl], #-0
    1018:	3a0e0300 	bcc	381c20 <__bss_end__+0x377918>
    101c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1020:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    1024:	0b000018 	bleq	108c <_start-0x6f74>
    1028:	0b0b000f 	bleq	2c106c <__bss_end__+0x2b6d64>
    102c:	00001349 	andeq	r1, r0, r9, asr #6
    1030:	3f012e0c 	svccc	0x00012e0c
    1034:	3a0e0319 	bcc	381ca0 <__bss_end__+0x377998>
    1038:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    103c:	00193c19 	andseq	r3, r9, r9, lsl ip
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	00000000 	andeq	r0, r0, r0
       4:	00000020 	andeq	r0, r0, r0, lsr #32
       8:	20500001 	subscs	r0, r0, r1
       c:	90000000 	andls	r0, r0, r0
      10:	01000000 	mrseq	r0, (UNDEF: 0)
      14:	00905500 	addseq	r5, r0, r0, lsl #10
      18:	00a00000 	adceq	r0, r0, r0
      1c:	00040000 	andeq	r0, r4, r0
      20:	9f5001f3 	svcls	0x005001f3
	...
      2c:	00000014 	andeq	r0, r0, r4, lsl r0
      30:	00000020 	andeq	r0, r0, r0, lsr #32
      34:	9f340002 	svcls	0x00340002
      38:	00000020 	andeq	r0, r0, r0, lsr #32
      3c:	00000090 	muleq	r0, r0, r0
      40:	00540001 	subseq	r0, r4, r1
      44:	00000000 	andeq	r0, r0, r0
      48:	a0000000 	andge	r0, r0, r0
      4c:	ac000000 	stcge	0, cr0, [r0], {-0}
      50:	01000000 	mrseq	r0, (UNDEF: 0)
      54:	00ac5000 	adceq	r5, ip, r0
      58:	00d00000 	sbcseq	r0, r0, r0
      5c:	00010000 	andeq	r0, r1, r0
      60:	00000054 	andeq	r0, r0, r4, asr r0
      64:	00000000 	andeq	r0, r0, r0
      68:	00018000 	andeq	r8, r1, r0
      6c:	00018400 	andeq	r8, r1, r0, lsl #8
      70:	50000100 	andpl	r0, r0, r0, lsl #2
      74:	00000184 	andeq	r0, r0, r4, lsl #3
      78:	000001d4 	ldrdeq	r0, [r0], -r4
      7c:	00540001 	subseq	r0, r4, r1
	...
      88:	04000000 	streq	r0, [r0], #-0
      8c:	01000000 	mrseq	r0, (UNDEF: 0)
      90:	00045000 	andeq	r5, r4, r0
      94:	00080000 	andeq	r0, r8, r0
      98:	00040000 	andeq	r0, r4, r0
      9c:	9f5001f3 	svcls	0x005001f3
	...
      a8:	00000068 	andeq	r0, r0, r8, rrx
      ac:	00000074 	andeq	r0, r0, r4, ror r0
      b0:	74500001 	ldrbvc	r0, [r0], #-1
      b4:	77000000 	strvc	r0, [r0, -r0]
      b8:	01000000 	mrseq	r0, (UNDEF: 0)
      bc:	00775100 	rsbseq	r5, r7, r0, lsl #2
      c0:	00800000 	addeq	r0, r0, r0
      c4:	00040000 	andeq	r0, r4, r0
      c8:	9f5001f3 	svcls	0x005001f3
	...
      d4:	00000080 	andeq	r0, r0, r0, lsl #1
      d8:	00000097 	muleq	r0, r7, r0
      dc:	97500001 	ldrbls	r0, [r0, -r1]
      e0:	dc000000 	stcle	0, cr0, [r0], {-0}
      e4:	01000000 	mrseq	r0, (UNDEF: 0)
      e8:	00dc5400 	sbcseq	r5, ip, r0, lsl #8
      ec:	00e00000 	rsceq	r0, r0, r0
      f0:	00010000 	andeq	r0, r1, r0
      f4:	0000e050 	andeq	lr, r0, r0, asr r0
      f8:	0000fc00 	andeq	pc, r0, r0, lsl #24
      fc:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     108:	000000fc 	strdeq	r0, [r0], -ip
     10c:	0000010c 	andeq	r0, r0, ip, lsl #2
     110:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     114:	20000001 	andcs	r0, r0, r1
     118:	04000001 	streq	r0, [r0], #-1
     11c:	5001f300 	andpl	pc, r1, r0, lsl #6
     120:	0001209f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
     124:	00012f00 	andeq	r2, r1, r0, lsl #30
     128:	50000100 	andpl	r0, r0, r0, lsl #2
     12c:	0000012f 	andeq	r0, r0, pc, lsr #2
     130:	00000150 	andeq	r0, r0, r0, asr r1
     134:	01f30004 	mvnseq	r0, r4
     138:	01509f50 	cmpeq	r0, r0, asr pc
     13c:	01700000 	cmneq	r0, r0
     140:	00010000 	andeq	r0, r1, r0
     144:	00017050 	andeq	r7, r1, r0, asr r0
     148:	00018c00 	andeq	r8, r1, r0, lsl #24
     14c:	f3000400 	vshl.u8	d0, d0, d0
     150:	009f5001 	addseq	r5, pc, r1
     154:	00000000 	andeq	r0, r0, r0
     158:	24000000 	strcs	r0, [r0], #-0
     15c:	2f000001 	svccs	0x00000001
     160:	01000001 	tsteq	r0, r1
     164:	01505300 	cmpeq	r0, r0, lsl #6
     168:	01740000 	cmneq	r4, r0
     16c:	00010000 	andeq	r0, r1, r0
     170:	00000053 	andeq	r0, r0, r3, asr r0
     174:	00000000 	andeq	r0, r0, r0
     178:	00019800 	andeq	r9, r1, r0, lsl #16
     17c:	0001a400 	andeq	sl, r1, r0, lsl #8
     180:	50000100 	andpl	r0, r0, r0, lsl #2
     184:	000001ac 	andeq	r0, r0, ip, lsr #3
     188:	000001c8 	andeq	r0, r0, r8, asr #3
     18c:	dc500001 	mrrcle	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     190:	0c000001 	stceq	0, cr0, [r0], {1}
     194:	01000002 	tsteq	r0, r2
     198:	00005000 	andeq	r5, r0, r0
     19c:	00000000 	andeq	r0, r0, r0
     1a0:	021c0000 	andseq	r0, ip, #0
     1a4:	022b0000 	eoreq	r0, fp, #0
     1a8:	00010000 	andeq	r0, r1, r0
     1ac:	00022b50 	andeq	r2, r2, r0, asr fp
     1b0:	00025000 	andeq	r5, r2, r0
     1b4:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     1c0:	0000021c 	andeq	r0, r0, ip, lsl r2
     1c4:	0000022b 	andeq	r0, r0, fp, lsr #4
     1c8:	2b510001 	blcs	14401d4 <__bss_end__+0x1435ecc>
     1cc:	50000002 	andpl	r0, r0, r2
     1d0:	01000002 	tsteq	r0, r2
     1d4:	00005500 	andeq	r5, r0, r0, lsl #10
     1d8:	00000000 	andeq	r0, r0, r0
     1dc:	02300000 	eorseq	r0, r0, #0
     1e0:	023c0000 	eorseq	r0, ip, #0
     1e4:	00010000 	andeq	r0, r1, r0
     1e8:	00023c50 	andeq	r3, r2, r0, asr ip
     1ec:	00025000 	andeq	r5, r2, r0
     1f0:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     1fc:	00000270 	andeq	r0, r0, r0, ror r2
     200:	00000274 	andeq	r0, r0, r4, ror r2
     204:	74500001 	ldrbvc	r0, [r0], #-1
     208:	d0000002 	andle	r0, r0, r2
     20c:	01000002 	tsteq	r0, r2
     210:	00005500 	andeq	r5, r0, r0, lsl #10
     214:	00000000 	andeq	r0, r0, r0
     218:	02780000 	rsbseq	r0, r8, #0
     21c:	029c0000 	addseq	r0, ip, #0
     220:	00010000 	andeq	r0, r1, r0
     224:	00029c50 	andeq	r9, r2, r0, asr ip
     228:	0002ab00 	andeq	sl, r2, r0, lsl #22
     22c:	91000200 	mrsls	r0, R8_usr
     230:	0002b064 	andeq	fp, r2, r4, rrx
     234:	0002b400 	andeq	fp, r2, r0, lsl #8
     238:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     244:	0000027c 	andeq	r0, r0, ip, ror r2
     248:	000002a8 	andeq	r0, r0, r8, lsr #5
     24c:	a8530001 	ldmdage	r3, {r0}^
     250:	ab000002 	blge	260 <_start-0x7da0>
     254:	02000002 	andeq	r0, r0, #2
     258:	b05c9100 	subslt	r9, ip, r0, lsl #2
     25c:	b7000002 	strlt	r0, [r0, -r2]
     260:	01000002 	tsteq	r0, r2
     264:	00005300 	andeq	r5, r0, r0, lsl #6
     268:	00000000 	andeq	r0, r0, r0
     26c:	03800000 	orreq	r0, r0, #0
     270:	03880000 	orreq	r0, r8, #0
     274:	00010000 	andeq	r0, r1, r0
     278:	00038850 	andeq	r8, r3, r0, asr r8
     27c:	0003a800 	andeq	sl, r3, r0, lsl #16
     280:	f3000400 	vshl.u8	d0, d0, d0
     284:	009f5001 	addseq	r5, pc, r1
     288:	00000000 	andeq	r0, r0, r0
     28c:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
     290:	b0000003 	andlt	r0, r0, r3
     294:	01000003 	tsteq	r0, r3
     298:	03b05000 	movseq	r5, #0
     29c:	03d00000 	bicseq	r0, r0, #0
     2a0:	00040000 	andeq	r0, r4, r0
     2a4:	9f5001f3 	svcls	0x005001f3
	...
     2b4:	00000054 	andeq	r0, r0, r4, asr r0
     2b8:	54500001 	ldrbpl	r0, [r0], #-1
     2bc:	80000000 	andhi	r0, r0, r0
     2c0:	04000000 	streq	r0, [r0], #-0
     2c4:	5001f300 	andpl	pc, r1, r0, lsl #6
     2c8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     2cc:	00000000 	andeq	r0, r0, r0
     2d0:	00001800 	andeq	r1, r0, r0, lsl #16
     2d4:	00005400 	andeq	r5, r0, r0, lsl #8
     2d8:	50000100 	andpl	r0, r0, r0, lsl #2
     2dc:	00000054 	andeq	r0, r0, r4, asr r0
     2e0:	00000080 	andeq	r0, r0, r0, lsl #1
     2e4:	01f30004 	mvnseq	r0, r4
     2e8:	00009f50 	andeq	r9, r0, r0, asr pc
     2ec:	00000000 	andeq	r0, r0, r0
     2f0:	002c0000 	eoreq	r0, ip, r0
     2f4:	00540000 	subseq	r0, r4, r0
     2f8:	00010000 	andeq	r0, r1, r0
     2fc:	00005450 	andeq	r5, r0, r0, asr r4
     300:	00008000 	andeq	r8, r0, r0
     304:	f3000400 	vshl.u8	d0, d0, d0
     308:	009f5001 	addseq	r5, pc, r1
     30c:	00000000 	andeq	r0, r0, r0
     310:	80000000 	andhi	r0, r0, r0
     314:	9c000000 	stcls	0, cr0, [r0], {-0}
     318:	01000000 	mrseq	r0, (UNDEF: 0)
     31c:	009c5000 	addseq	r5, ip, r0
     320:	00c00000 	sbceq	r0, r0, r0
     324:	00040000 	andeq	r0, r4, r0
     328:	9f5001f3 	svcls	0x005001f3
	...
     334:	000000c0 	andeq	r0, r0, r0, asr #1
     338:	000000d7 	ldrdeq	r0, [r0], -r7
     33c:	d7500001 	ldrble	r0, [r0, -r1]
     340:	64000000 	strvs	r0, [r0], #-0
     344:	01000002 	tsteq	r0, r2
     348:	00005400 	andeq	r5, r0, r0, lsl #8
     34c:	00000000 	andeq	r0, r0, r0
     350:	00c00000 	sbceq	r0, r0, r0
     354:	00d00000 	sbcseq	r0, r0, r0
     358:	00010000 	andeq	r0, r1, r0
     35c:	0000d051 	andeq	sp, r0, r1, asr r0
     360:	00010c00 	andeq	r0, r1, r0, lsl #24
     364:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     368:	0000010c 	andeq	r0, r0, ip, lsl #2
     36c:	00000264 	andeq	r0, r0, r4, ror #4
     370:	01f30004 	mvnseq	r0, r4
     374:	00009f51 	andeq	r9, r0, r1, asr pc
     378:	00000000 	andeq	r0, r0, r0
     37c:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
     380:	01d40000 	bicseq	r0, r4, r0
     384:	00020000 	andeq	r0, r2, r0
     388:	01d49f42 	bicseq	r9, r4, r2, asr #30
     38c:	01ec0000 	mvneq	r0, r0
     390:	00010000 	andeq	r0, r1, r0
     394:	0001ec51 	andeq	lr, r1, r1, asr ip
     398:	0001f400 	andeq	pc, r1, r0, lsl #8
     39c:	42000200 	andmi	r0, r0, #0, 4
     3a0:	0001f49f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
     3a4:	00022400 	andeq	r2, r2, r0, lsl #8
     3a8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     3b4:	000001cc 	andeq	r0, r0, ip, asr #3
     3b8:	000001d8 	ldrdeq	r0, [r0], -r8
     3bc:	d8520001 	ldmdale	r2, {r0}^
     3c0:	dc000001 	stcle	0, cr0, [r0], {1}
     3c4:	03000001 	movweq	r0, #1
     3c8:	9f7f7200 	svcls	0x007f7200
	...
     3d4:	00000264 	andeq	r0, r0, r4, ror #4
     3d8:	0000027c 	andeq	r0, r0, ip, ror r2
     3dc:	7c500001 	mrrcvc	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     3e0:	d0000002 	andle	r0, r0, r2
     3e4:	01000002 	tsteq	r0, r2
     3e8:	00005300 	andeq	r5, r0, r0, lsl #6
     3ec:	00000000 	andeq	r0, r0, r0
     3f0:	02980000 	addseq	r0, r8, #0
     3f4:	02b00000 	adcseq	r0, r0, #0
     3f8:	00010000 	andeq	r0, r1, r0
     3fc:	00000055 	andeq	r0, r0, r5, asr r0
     400:	00000000 	andeq	r0, r0, r0
     404:	00029000 	andeq	r9, r2, r0
     408:	00029c00 	andeq	r9, r2, r0, lsl #24
     40c:	51000100 	mrspl	r0, (UNDEF: 16)
     410:	0000029c 	muleq	r0, ip, r2
     414:	000002a0 	andeq	r0, r0, r0, lsr #5
     418:	7f710003 	svcvc	0x00710003
     41c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     420:	00000000 	andeq	r0, r0, r0
     424:	0002d000 	andeq	sp, r2, r0
     428:	0002e800 	andeq	lr, r2, r0, lsl #16
     42c:	50000100 	andpl	r0, r0, r0, lsl #2
     430:	000002e8 	andeq	r0, r0, r8, ror #5
     434:	00000304 	andeq	r0, r0, r4, lsl #6
     438:	00570001 	subseq	r0, r7, r1
     43c:	00000000 	andeq	r0, r0, r0
     440:	d0000000 	andle	r0, r0, r0
     444:	e8000002 	stmda	r0, {r1}
     448:	01000002 	tsteq	r0, r2
     44c:	02e85100 	rsceq	r5, r8, #0, 2
     450:	03040000 	movweq	r0, #16384	; 0x4000
     454:	00010000 	andeq	r0, r1, r0
     458:	00000056 	andeq	r0, r0, r6, asr r0
     45c:	00000000 	andeq	r0, r0, r0
     460:	0002d000 	andeq	sp, r2, r0
     464:	0002e800 	andeq	lr, r2, r0, lsl #16
     468:	52000100 	andpl	r0, r0, #0, 2
     46c:	000002e8 	andeq	r0, r0, r8, ror #5
     470:	00000304 	andeq	r0, r0, r4, lsl #6
     474:	00550001 	subseq	r0, r5, r1
     478:	00000000 	andeq	r0, r0, r0
     47c:	e0000000 	and	r0, r0, r0
     480:	e8000002 	stmda	r0, {r1}
     484:	01000002 	tsteq	r0, r2
     488:	02e85100 	rsceq	r5, r8, #0, 2
     48c:	03040000 	movweq	r0, #16384	; 0x4000
     490:	00010000 	andeq	r0, r1, r0
     494:	00000056 	andeq	r0, r0, r6, asr r0
     498:	00000000 	andeq	r0, r0, r0
     49c:	0002e000 	andeq	lr, r2, r0
     4a0:	0002e800 	andeq	lr, r2, r0, lsl #16
     4a4:	30000200 	andcc	r0, r0, r0, lsl #4
     4a8:	0002e89f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
     4ac:	00030400 	andeq	r0, r3, r0, lsl #8
     4b0:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     4bc:	00000304 	andeq	r0, r0, r4, lsl #6
     4c0:	00000317 	andeq	r0, r0, r7, lsl r3
     4c4:	17500001 	ldrbne	r0, [r0, -r1]
     4c8:	5c000003 	stcpl	0, cr0, [r0], {3}
     4cc:	01000003 	tsteq	r0, r3
     4d0:	00005400 	andeq	r5, r0, r0, lsl #8
     4d4:	00000000 	andeq	r0, r0, r0
     4d8:	03040000 	movweq	r0, #16384	; 0x4000
     4dc:	03170000 	tsteq	r7, #0
     4e0:	00010000 	andeq	r0, r1, r0
     4e4:	00031751 	andeq	r1, r3, r1, asr r7
     4e8:	00035c00 	andeq	r5, r3, r0, lsl #24
     4ec:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     4f8:	00000304 	andeq	r0, r0, r4, lsl #6
     4fc:	00000317 	andeq	r0, r0, r7, lsl r3
     500:	17520001 	ldrbne	r0, [r2, -r1]
     504:	5c000003 	stcpl	0, cr0, [r0], {3}
     508:	01000003 	tsteq	r0, r3
     50c:	00005500 	andeq	r5, r0, r0, lsl #10
     510:	00000000 	andeq	r0, r0, r0
     514:	035c0000 	cmpeq	ip, #0
     518:	03930000 	orrseq	r0, r3, #0
     51c:	00010000 	andeq	r0, r1, r0
     520:	00039350 	andeq	r9, r3, r0, asr r3
     524:	0003d800 	andeq	sp, r3, r0, lsl #16
     528:	54000100 	strpl	r0, [r0], #-256	; 0x100
     52c:	000003d8 	ldrdeq	r0, [r0], -r8
     530:	000003dc 	ldrdeq	r0, [r0], -ip
     534:	dc500001 	mrrcle	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     538:	fc000003 	stc2	0, cr0, [r0], {3}
     53c:	01000003 	tsteq	r0, r3
     540:	00005400 	andeq	r5, r0, r0, lsl #8
     544:	00000000 	andeq	r0, r0, r0
     548:	035c0000 	cmpeq	ip, #0
     54c:	03930000 	orrseq	r0, r3, #0
     550:	00010000 	andeq	r0, r1, r0
     554:	00039351 	andeq	r9, r3, r1, asr r3
     558:	0003d800 	andeq	sp, r3, r0, lsl #16
     55c:	f3000400 	vshl.u8	d0, d0, d0
     560:	d89f5101 	ldmle	pc, {r0, r8, ip, lr}	; <UNPREDICTABLE>
     564:	e0000003 	and	r0, r0, r3
     568:	01000003 	tsteq	r0, r3
     56c:	03e05100 	mvneq	r5, #0, 2
     570:	03fc0000 	mvnseq	r0, #0
     574:	00040000 	andeq	r0, r4, r0
     578:	9f5101f3 	svcls	0x005101f3
	...
     584:	0000035c 	andeq	r0, r0, ip, asr r3
     588:	00000393 	muleq	r0, r3, r3
     58c:	93520001 	cmpls	r2, #1
     590:	d8000003 	stmdale	r0, {r0, r1}
     594:	04000003 	streq	r0, [r0], #-3
     598:	5201f300 	andpl	pc, r1, #0, 6
     59c:	0003d89f 	muleq	r3, pc, r8	; <UNPREDICTABLE>
     5a0:	0003e000 	andeq	lr, r3, r0
     5a4:	52000100 	andpl	r0, r0, #0, 2
     5a8:	000003e0 	andeq	r0, r0, r0, ror #7
     5ac:	000003fc 	strdeq	r0, [r0], -ip
     5b0:	01f30004 	mvnseq	r0, r4
     5b4:	00009f52 	andeq	r9, r0, r2, asr pc
     5b8:	00000000 	andeq	r0, r0, r0
     5bc:	03900000 	orrseq	r0, r0, #0
     5c0:	03d80000 	bicseq	r0, r8, #0
     5c4:	00010000 	andeq	r0, r1, r0
     5c8:	0003e056 	andeq	lr, r3, r6, asr r0
     5cc:	0003fc00 	andeq	pc, r3, r0, lsl #24
     5d0:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     5dc:	00000364 	andeq	r0, r0, r4, ror #6
     5e0:	00000393 	muleq	r0, r3, r3
     5e4:	93500001 	cmpls	r0, #1
     5e8:	d8000003 	stmdale	r0, {r0, r1}
     5ec:	01000003 	tsteq	r0, r3
     5f0:	03d85400 	bicseq	r5, r8, #0, 8
     5f4:	03dc0000 	bicseq	r0, ip, #0
     5f8:	00010000 	andeq	r0, r1, r0
     5fc:	0003dc50 	andeq	sp, r3, r0, asr ip
     600:	0003fc00 	andeq	pc, r3, r0, lsl #24
     604:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     610:	000003a4 	andeq	r0, r0, r4, lsr #7
     614:	000003d8 	ldrdeq	r0, [r0], -r8
     618:	e0540001 	subs	r0, r4, r1
     61c:	fc000003 	stc2	0, cr0, [r0], {3}
     620:	01000003 	tsteq	r0, r3
     624:	00005400 	andeq	r5, r0, r0, lsl #8
     628:	00000000 	andeq	r0, r0, r0
     62c:	03fc0000 	mvnseq	r0, #0
     630:	04900000 	ldreq	r0, [r0], #0
     634:	00010000 	andeq	r0, r1, r0
     638:	00049050 	andeq	r9, r4, r0, asr r0
     63c:	0004a400 	andeq	sl, r4, r0, lsl #8
     640:	f3000400 	vshl.u8	d0, d0, d0
     644:	a49f5001 	ldrge	r5, [pc], #1	; 64c <_start-0x79b4>
     648:	d4000004 	strle	r0, [r0], #-4
     64c:	01000004 	tsteq	r0, r4
     650:	04d45000 	ldrbeq	r5, [r4], #0
     654:	04e80000 	strbteq	r0, [r8], #0
     658:	00040000 	andeq	r0, r4, r0
     65c:	9f5001f3 	svcls	0x005001f3
     660:	000004e8 	andeq	r0, r0, r8, ror #9
     664:	000004ec 	andeq	r0, r0, ip, ror #9
     668:	ec500001 	mrrc	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     66c:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
     670:	04000004 	streq	r0, [r0], #-4
     674:	5001f300 	andpl	pc, r1, r0, lsl #6
     678:	0004f09f 	muleq	r4, pc, r0	; <UNPREDICTABLE>
     67c:	0004f400 	andeq	pc, r4, r0, lsl #8
     680:	50000100 	andpl	r0, r0, r0, lsl #2
     684:	000004f4 	strdeq	r0, [r0], -r4
     688:	000004f8 	strdeq	r0, [r0], -r8
     68c:	01f30004 	mvnseq	r0, r4
     690:	04f89f50 	ldrbteq	r9, [r8], #3920	; 0xf50
     694:	04fc0000 	ldrbteq	r0, [ip], #0
     698:	00010000 	andeq	r0, r1, r0
     69c:	0004fc50 	andeq	pc, r4, r0, asr ip	; <UNPREDICTABLE>
     6a0:	00051800 	andeq	r1, r5, r0, lsl #16
     6a4:	f3000400 	vshl.u8	d0, d0, d0
     6a8:	009f5001 	addseq	r5, pc, r1
     6ac:	00000000 	andeq	r0, r0, r0
     6b0:	fc000000 	stc2	0, cr0, [r0], {-0}
     6b4:	94000003 	strls	r0, [r0], #-3
     6b8:	01000004 	tsteq	r0, r4
     6bc:	04945100 	ldreq	r5, [r4], #256	; 0x100
     6c0:	04a40000 	strteq	r0, [r4], #0
     6c4:	00040000 	andeq	r0, r4, r0
     6c8:	9f5101f3 	svcls	0x005101f3
     6cc:	000004a4 	andeq	r0, r0, r4, lsr #9
     6d0:	000004d8 	ldrdeq	r0, [r0], -r8
     6d4:	d8510001 	ldmdale	r1, {r0}^
     6d8:	e8000004 	stmda	r0, {r2}
     6dc:	04000004 	streq	r0, [r0], #-4
     6e0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     6e4:	0004e89f 	muleq	r4, pc, r8	; <UNPREDICTABLE>
     6e8:	00051800 	andeq	r1, r5, r0, lsl #16
     6ec:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     6f8:	000003fc 	strdeq	r0, [r0], -ip
     6fc:	00000498 	muleq	r0, r8, r4
     700:	98520001 	ldmdals	r2, {r0}^
     704:	a4000004 	strge	r0, [r0], #-4
     708:	04000004 	streq	r0, [r0], #-4
     70c:	5201f300 	andpl	pc, r1, #0, 6
     710:	0004a49f 	muleq	r4, pc, r4	; <UNPREDICTABLE>
     714:	0004c000 	andeq	ip, r4, r0
     718:	52000100 	andpl	r0, r0, #0, 2
     71c:	000004c0 	andeq	r0, r0, r0, asr #9
     720:	000004e8 	andeq	r0, r0, r8, ror #9
     724:	01f30004 	mvnseq	r0, r4
     728:	04e89f52 	strbteq	r9, [r8], #3922	; 0xf52
     72c:	04f80000 	ldrbteq	r0, [r8], #0
     730:	00010000 	andeq	r0, r1, r0
     734:	0004f852 	andeq	pc, r4, r2, asr r8	; <UNPREDICTABLE>
     738:	00051800 	andeq	r1, r5, r0, lsl #16
     73c:	f3000400 	vshl.u8	d0, d0, d0
     740:	009f5201 	addseq	r5, pc, r1, lsl #4
	...
     74c:	94000004 	strls	r0, [r0], #-4
     750:	01000004 	tsteq	r0, r4
     754:	04945100 	ldreq	r5, [r4], #256	; 0x100
     758:	04a40000 	strteq	r0, [r4], #0
     75c:	00040000 	andeq	r0, r4, r0
     760:	9f5101f3 	svcls	0x005101f3
     764:	000004a4 	andeq	r0, r0, r4, lsr #9
     768:	000004d8 	ldrdeq	r0, [r0], -r8
     76c:	d8510001 	ldmdale	r1, {r0}^
     770:	e8000004 	stmda	r0, {r2}
     774:	04000004 	streq	r0, [r0], #-4
     778:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     77c:	0004e89f 	muleq	r4, pc, r8	; <UNPREDICTABLE>
     780:	00051800 	andeq	r1, r5, r0, lsl #16
     784:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     790:	00000400 	andeq	r0, r0, r0, lsl #8
     794:	00000490 	muleq	r0, r0, r4
     798:	90500001 	subsls	r0, r0, r1
     79c:	a4000004 	strge	r0, [r0], #-4
     7a0:	04000004 	streq	r0, [r0], #-4
     7a4:	5001f300 	andpl	pc, r1, r0, lsl #6
     7a8:	0004a49f 	muleq	r4, pc, r4	; <UNPREDICTABLE>
     7ac:	0004d400 	andeq	sp, r4, r0, lsl #8
     7b0:	50000100 	andpl	r0, r0, r0, lsl #2
     7b4:	000004d4 	ldrdeq	r0, [r0], -r4
     7b8:	000004e8 	andeq	r0, r0, r8, ror #9
     7bc:	01f30004 	mvnseq	r0, r4
     7c0:	04e89f50 	strbteq	r9, [r8], #3920	; 0xf50
     7c4:	04ec0000 	strbteq	r0, [ip], #0
     7c8:	00010000 	andeq	r0, r1, r0
     7cc:	0004ec50 	andeq	lr, r4, r0, asr ip
     7d0:	0004f000 	andeq	pc, r4, r0
     7d4:	f3000400 	vshl.u8	d0, d0, d0
     7d8:	f09f5001 			; <UNDEFINED> instruction: 0xf09f5001
     7dc:	f4000004 	vst4.8	{d0-d3}, [r0], r4
     7e0:	01000004 	tsteq	r0, r4
     7e4:	04f45000 	ldrbteq	r5, [r4], #0
     7e8:	04f80000 	ldrbteq	r0, [r8], #0
     7ec:	00040000 	andeq	r0, r4, r0
     7f0:	9f5001f3 	svcls	0x005001f3
     7f4:	000004f8 	strdeq	r0, [r0], -r8
     7f8:	000004fc 	strdeq	r0, [r0], -ip
     7fc:	fc500001 	mrrc2	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     800:	18000004 	stmdane	r0, {r2}
     804:	04000005 	streq	r0, [r0], #-5
     808:	5001f300 	andpl	pc, r1, r0, lsl #6
     80c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     810:	00000000 	andeq	r0, r0, r0
     814:	00044000 	andeq	r4, r4, r0
     818:	00049c00 	andeq	r9, r4, r0, lsl #24
     81c:	53000100 	movwpl	r0, #256	; 0x100
     820:	000004a4 	andeq	r0, r0, r4, lsr #9
     824:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
     828:	f0530001 			; <UNDEFINED> instruction: 0xf0530001
     82c:	f8000004 			; <UNDEFINED> instruction: 0xf8000004
     830:	01000004 	tsteq	r0, r4
     834:	00005300 	andeq	r5, r0, r0, lsl #6
     838:	00000000 	andeq	r0, r0, r0
     83c:	04440000 	strbeq	r0, [r4], #-0
     840:	04680000 	strbteq	r0, [r8], #-0
     844:	00050000 	andeq	r0, r5, r0
     848:	00730071 	rsbseq	r0, r3, r1, ror r0
     84c:	00046822 	andeq	r6, r4, r2, lsr #16
     850:	00048000 	andeq	r8, r4, r0
     854:	5a000100 	bpl	c5c <_start-0x73a4>
     858:	00000480 	andeq	r0, r0, r0, lsl #9
     85c:	00000484 	andeq	r0, r0, r4, lsl #9
     860:	00710005 	rsbseq	r0, r1, r5
     864:	84220073 	strthi	r0, [r2], #-115	; 0x73
     868:	a8000004 	stmdage	r0, {r2}
     86c:	01000004 	tsteq	r0, r4
     870:	00005a00 	andeq	r5, r0, r0, lsl #20
     874:	00000000 	andeq	r0, r0, r0
     878:	04440000 	strbeq	r0, [r4], #-0
     87c:	04900000 	ldreq	r0, [r0], #0
     880:	00010000 	andeq	r0, r1, r0
     884:	00049050 	andeq	r9, r4, r0, asr r0
     888:	0004a400 	andeq	sl, r4, r0, lsl #8
     88c:	f3000400 	vshl.u8	d0, d0, d0
     890:	a49f5001 	ldrge	r5, [pc], #1	; 898 <_start-0x7768>
     894:	a8000004 	stmdage	r0, {r2}
     898:	01000004 	tsteq	r0, r4
     89c:	00005000 	andeq	r5, r0, r0
     8a0:	00000000 	andeq	r0, r0, r0
     8a4:	04480000 	strbeq	r0, [r8], #-0
     8a8:	046c0000 	strbteq	r0, [ip], #-0
     8ac:	00010000 	andeq	r0, r1, r0
     8b0:	00046c54 	andeq	r6, r4, r4, asr ip
     8b4:	00047000 	andeq	r7, r4, r0
     8b8:	74000300 	strvc	r0, [r0], #-768	; 0x300
     8bc:	04809f7f 	streq	r9, [r0], #3967	; 0xf7f
     8c0:	04840000 	streq	r0, [r4], #0
     8c4:	00010000 	andeq	r0, r1, r0
     8c8:	00000054 	andeq	r0, r0, r4, asr r0
     8cc:	00000000 	andeq	r0, r0, r0
     8d0:	00044c00 	andeq	r4, r4, r0, lsl #24
     8d4:	00049000 	andeq	r9, r4, r0
     8d8:	50000100 	andpl	r0, r0, r0, lsl #2
     8dc:	00000490 	muleq	r0, r0, r4
     8e0:	000004a4 	andeq	r0, r0, r4, lsr #9
     8e4:	01f30004 	mvnseq	r0, r4
     8e8:	04a49f50 	strteq	r9, [r4], #3920	; 0xf50
     8ec:	04a80000 	strteq	r0, [r8], #0
     8f0:	00010000 	andeq	r0, r1, r0
     8f4:	00000050 	andeq	r0, r0, r0, asr r0
     8f8:	00000000 	andeq	r0, r0, r0
     8fc:	0004b800 	andeq	fp, r4, r0, lsl #16
     900:	0004d400 	andeq	sp, r4, r0, lsl #8
     904:	50000100 	andpl	r0, r0, r0, lsl #2
     908:	000004d4 	ldrdeq	r0, [r0], -r4
     90c:	000004e8 	andeq	r0, r0, r8, ror #9
     910:	01f30004 	mvnseq	r0, r4
     914:	04f89f50 	ldrbteq	r9, [r8], #3920	; 0xf50
     918:	04fc0000 	ldrbteq	r0, [ip], #0
     91c:	00010000 	andeq	r0, r1, r0
     920:	0004fc50 	andeq	pc, r4, r0, asr ip	; <UNPREDICTABLE>
     924:	00051800 	andeq	r1, r5, r0, lsl #16
     928:	f3000400 	vshl.u8	d0, d0, d0
     92c:	009f5001 	addseq	r5, pc, r1
	...
     938:	04000000 	streq	r0, [r0], #-0
     93c:	01000000 	mrseq	r0, (UNDEF: 0)
     940:	00045200 	andeq	r5, r4, r0, lsl #4
     944:	00200000 	eoreq	r0, r0, r0
     948:	00040000 	andeq	r0, r4, r0
     94c:	9f5201f3 	svcls	0x005201f3
	...
     95c:	0000000c 	andeq	r0, r0, ip
     960:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     964:	14000000 	strne	r0, [r0], #-0
     968:	03000000 	movweq	r0, #0
     96c:	9f017300 	svcls	0x00017300
     970:	00000014 	andeq	r0, r0, r4, lsl r0
     974:	00000020 	andeq	r0, r0, r0, lsr #32
     978:	00530001 	subseq	r0, r3, r1
     97c:	00000000 	andeq	r0, r0, r0
     980:	2c000000 	stccs	0, cr0, [r0], {-0}
     984:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     988:	01000000 	mrseq	r0, (UNDEF: 0)
     98c:	00385000 	eorseq	r5, r8, r0
     990:	00480000 	subeq	r0, r8, r0
     994:	00010000 	andeq	r0, r1, r0
     998:	00004855 	andeq	r4, r0, r5, asr r8
     99c:	00005800 	andeq	r5, r0, r0, lsl #16
     9a0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     9b0:	00000010 	andeq	r0, r0, r0, lsl r0
     9b4:	10500001 	subsne	r0, r0, r1
     9b8:	34000000 	strcc	r0, [r0], #-0
     9bc:	01000000 	mrseq	r0, (UNDEF: 0)
     9c0:	00005400 	andeq	r5, r0, r0, lsl #8
	...
     9cc:	00040000 	andeq	r0, r4, r0
     9d0:	00010000 	andeq	r0, r1, r0
     9d4:	00000450 	andeq	r0, r0, r0, asr r4
     9d8:	00000c00 	andeq	r0, r0, r0, lsl #24
     9dc:	70000300 	andvc	r0, r0, r0, lsl #6
     9e0:	000c9f30 	andeq	r9, ip, r0, lsr pc
     9e4:	00140000 	andseq	r0, r4, r0
     9e8:	00040000 	andeq	r0, r4, r0
     9ec:	9f5001f3 	svcls	0x005001f3
	...
     9f8:	00000014 	andeq	r0, r0, r4, lsl r0
     9fc:	00000020 	andeq	r0, r0, r0, lsr #32
     a00:	20500001 	subscs	r0, r0, r1
     a04:	2c000000 	stccs	0, cr0, [r0], {-0}
     a08:	03000000 	movweq	r0, #0
     a0c:	9f017000 	svcls	0x00017000
     a10:	0000002c 	andeq	r0, r0, ip, lsr #32
     a14:	00000040 	andeq	r0, r0, r0, asr #32
     a18:	00500001 	subseq	r0, r0, r1
     a1c:	00000000 	andeq	r0, r0, r0
     a20:	14000000 	strne	r0, [r0], #-0
     a24:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     a28:	01000000 	mrseq	r0, (UNDEF: 0)
     a2c:	00185100 	andseq	r5, r8, r0, lsl #2
     a30:	00400000 	subeq	r0, r0, r0
     a34:	00040000 	andeq	r0, r4, r0
     a38:	9f5101f3 	svcls	0x005101f3
	...
     a44:	00000040 	andeq	r0, r0, r0, asr #32
     a48:	00000060 	andeq	r0, r0, r0, rrx
     a4c:	60500001 	subsvs	r0, r0, r1
     a50:	6c000000 	stcvs	0, cr0, [r0], {-0}
     a54:	03000000 	movweq	r0, #0
     a58:	9f017100 	svcls	0x00017100
     a5c:	0000006c 	andeq	r0, r0, ip, rrx
     a60:	00000074 	andeq	r0, r0, r4, ror r0
     a64:	74510001 	ldrbvc	r0, [r1], #-1
     a68:	80000000 	andhi	r0, r0, r0
     a6c:	03000000 	movweq	r0, #0
     a70:	9f017100 	svcls	0x00017100
	...
     a7c:	00000040 	andeq	r0, r0, r0, asr #32
     a80:	00000050 	andeq	r0, r0, r0, asr r0
     a84:	50510001 	subspl	r0, r1, r1
     a88:	80000000 	andhi	r0, r0, r0
     a8c:	04000000 	streq	r0, [r0], #-0
     a90:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     a94:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     a98:	00000000 	andeq	r0, r0, r0
     a9c:	00004000 	andeq	r4, r0, r0
     aa0:	00005800 	andeq	r5, r0, r0, lsl #16
     aa4:	52000100 	andpl	r0, r0, #0, 2
     aa8:	00000058 	andeq	r0, r0, r8, asr r0
     aac:	00000064 	andeq	r0, r0, r4, rrx
     ab0:	64520001 	ldrbvs	r0, [r2], #-1
     ab4:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     ab8:	03000000 	movweq	r0, #0
     abc:	9f017200 	svcls	0x00017200
     ac0:	00000068 	andeq	r0, r0, r8, rrx
     ac4:	00000080 	andeq	r0, r0, r0, lsl #1
     ac8:	00520001 	subseq	r0, r2, r1
     acc:	00000000 	andeq	r0, r0, r0
     ad0:	40000000 	andmi	r0, r0, r0
     ad4:	54000000 	strpl	r0, [r0], #-0
     ad8:	01000000 	mrseq	r0, (UNDEF: 0)
     adc:	00545300 	subseq	r5, r4, r0, lsl #6
     ae0:	00780000 	rsbseq	r0, r8, r0
     ae4:	00010000 	andeq	r0, r1, r0
     ae8:	00000053 	andeq	r0, r0, r3, asr r0
     aec:	00000000 	andeq	r0, r0, r0
     af0:	00004800 	andeq	r4, r0, r0, lsl #16
     af4:	00006000 	andeq	r6, r0, r0
     af8:	5c000100 	stfpls	f0, [r0], {-0}
     afc:	00000060 	andeq	r0, r0, r0, rrx
     b00:	00000080 	andeq	r0, r0, r0, lsl #1
     b04:	01f3000a 	mvnseq	r0, sl
     b08:	5301f352 	movwpl	pc, #4946	; 0x1352	; <UNPREDICTABLE>
     b0c:	9f01231c 	svcls	0x0001231c
	...
     b18:	00000080 	andeq	r0, r0, r0, lsl #1
     b1c:	000000a4 	andeq	r0, r0, r4, lsr #1
     b20:	a4500001 	ldrbge	r0, [r0], #-1
     b24:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     b28:	03000001 	movweq	r0, #1
     b2c:	9f027000 	svcls	0x00027000
     b30:	00000118 	andeq	r0, r0, r8, lsl r1
     b34:	00000218 	andeq	r0, r0, r8, lsl r2
     b38:	01f30004 	mvnseq	r0, r4
     b3c:	00009f50 	andeq	r9, r0, r0, asr pc
     b40:	00000000 	andeq	r0, r0, r0
     b44:	00800000 	addeq	r0, r0, r0
     b48:	00f00000 	rscseq	r0, r0, r0
     b4c:	00010000 	andeq	r0, r1, r0
     b50:	0000f051 	andeq	pc, r0, r1, asr r0	; <UNPREDICTABLE>
     b54:	00016000 	andeq	r6, r1, r0
     b58:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     b5c:	00000160 	andeq	r0, r0, r0, ror #2
     b60:	00000168 	andeq	r0, r0, r8, ror #2
     b64:	68510001 	ldmdavs	r1, {r0}^
     b68:	88000001 	stmdahi	r0, {r0}
     b6c:	01000001 	tsteq	r0, r1
     b70:	01885500 	orreq	r5, r8, r0, lsl #10
     b74:	019c0000 	orrseq	r0, ip, r0
     b78:	00010000 	andeq	r0, r1, r0
     b7c:	00019c51 	andeq	r9, r1, r1, asr ip
     b80:	0001bc00 	andeq	fp, r1, r0, lsl #24
     b84:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     b88:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     b8c:	000001c4 	andeq	r0, r0, r4, asr #3
     b90:	c4510001 	ldrbgt	r0, [r1], #-1
     b94:	fc000001 	stc2	0, cr0, [r0], {1}
     b98:	01000001 	tsteq	r0, r1
     b9c:	01fc5500 	mvnseq	r5, r0, lsl #10
     ba0:	02180000 	andseq	r0, r8, #0
     ba4:	00040000 	andeq	r0, r4, r0
     ba8:	9f5101f3 	svcls	0x005101f3
	...
     bb4:	00000080 	andeq	r0, r0, r0, lsl #1
     bb8:	00000094 	muleq	r0, r4, r0
     bbc:	94520001 	ldrbls	r0, [r2], #-1
     bc0:	fc000000 	stc2	0, cr0, [r0], {-0}
     bc4:	01000001 	tsteq	r0, r1
     bc8:	01fc5400 	mvnseq	r5, r0, lsl #8
     bcc:	02180000 	andseq	r0, r8, #0
     bd0:	00040000 	andeq	r0, r4, r0
     bd4:	9f5201f3 	svcls	0x005201f3
	...
     be0:	00000080 	andeq	r0, r0, r0, lsl #1
     be4:	00000100 	andeq	r0, r0, r0, lsl #2
     be8:	04530001 	ldrbeq	r0, [r3], #-1
     bec:	08000001 	stmdaeq	r0, {r0}
     bf0:	01000001 	tsteq	r0, r1
     bf4:	01605300 	cmneq	r0, r0, lsl #6
     bf8:	01680000 	cmneq	r8, r0
     bfc:	00010000 	andeq	r0, r1, r0
     c00:	00016853 	andeq	r6, r1, r3, asr r8
     c04:	00018800 	andeq	r8, r1, r0, lsl #16
     c08:	f3000400 	vshl.u8	d0, d0, d0
     c0c:	889f5301 	ldmhi	pc, {r0, r8, r9, ip, lr}	; <UNPREDICTABLE>
     c10:	90000001 	andls	r0, r0, r1
     c14:	01000001 	tsteq	r0, r1
     c18:	01905300 	orrseq	r5, r0, r0, lsl #6
     c1c:	01940000 	orrseq	r0, r4, r0
     c20:	00010000 	andeq	r0, r1, r0
     c24:	0001945c 	andeq	r9, r1, ip, asr r4
     c28:	00019c00 	andeq	r9, r1, r0, lsl #24
     c2c:	53000100 	movwpl	r0, #256	; 0x100
     c30:	0000019c 	muleq	r0, ip, r1
     c34:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     c38:	01f30004 	mvnseq	r0, r4
     c3c:	01bc9f53 			; <UNDEFINED> instruction: 0x01bc9f53
     c40:	01cc0000 	biceq	r0, ip, r0
     c44:	00010000 	andeq	r0, r1, r0
     c48:	0001cc53 	andeq	ip, r1, r3, asr ip
     c4c:	0001cf00 	andeq	ip, r1, r0, lsl #30
     c50:	5c000100 	stfpls	f0, [r0], {-0}
     c54:	000001cf 	andeq	r0, r0, pc, asr #3
     c58:	000001d4 	ldrdeq	r0, [r0], -r4
     c5c:	01f30004 	mvnseq	r0, r4
     c60:	00009f53 	andeq	r9, r0, r3, asr pc
     c64:	00000000 	andeq	r0, r0, r0
     c68:	00800000 	addeq	r0, r0, r0
     c6c:	009c0000 	addseq	r0, ip, r0
     c70:	00020000 	andeq	r0, r2, r0
     c74:	009c0091 	umullseq	r0, ip, r1, r0
     c78:	01c80000 	biceq	r0, r8, r0
     c7c:	00010000 	andeq	r0, r1, r0
     c80:	0001d452 	andeq	sp, r1, r2, asr r4
     c84:	0001df00 	andeq	sp, r1, r0, lsl #30
     c88:	52000100 	andpl	r0, r0, #0, 2
	...
     c94:	0000009c 	muleq	r0, ip, r0
     c98:	00000118 	andeq	r0, r0, r8, lsl r1
     c9c:	185d0001 	ldmdane	sp, {r0}^
     ca0:	1c000001 	stcne	0, cr0, [r0], {1}
     ca4:	01000001 	tsteq	r0, r1
     ca8:	011c5300 	tsteq	ip, r0, lsl #6
     cac:	01200000 	teqeq	r0, r0
     cb0:	00010000 	andeq	r0, r1, r0
     cb4:	00012051 	andeq	r2, r1, r1, asr r0
     cb8:	00016000 	andeq	r6, r1, r0
     cbc:	53000100 	movwpl	r0, #256	; 0x100
     cc0:	00000160 	andeq	r0, r0, r0, ror #2
     cc4:	00000168 	andeq	r0, r0, r8, ror #2
     cc8:	685d0001 	ldmdavs	sp, {r0}^
     ccc:	6c000001 	stcvs	0, cr0, [r0], {1}
     cd0:	01000001 	tsteq	r0, r1
     cd4:	016c5e00 	cmneq	ip, r0, lsl #28
     cd8:	01880000 	orreq	r0, r8, r0
     cdc:	00010000 	andeq	r0, r1, r0
     ce0:	00018853 	andeq	r8, r1, r3, asr r8
     ce4:	00019000 	andeq	r9, r1, r0
     ce8:	91000400 	tstls	r0, r0, lsl #8
     cec:	909f7fa1 	addsls	r7, pc, r1, lsr #31
     cf0:	94000001 	strls	r0, [r0], #-1
     cf4:	01000001 	tsteq	r0, r1
     cf8:	01945300 	orrseq	r5, r4, r0, lsl #6
     cfc:	019c0000 	orrseq	r0, ip, r0
     d00:	00010000 	andeq	r0, r1, r0
     d04:	00019c5d 	andeq	r9, r1, sp, asr ip
     d08:	0001a000 	andeq	sl, r1, r0
     d0c:	5e000100 	adfpls	f0, f0, f0
     d10:	000001a0 	andeq	r0, r0, r0, lsr #3
     d14:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     d18:	bc530001 	mrrclt	0, 0, r0, r3, cr1
     d1c:	d4000001 	strle	r0, [r0], #-1
     d20:	01000001 	tsteq	r0, r1
     d24:	01d45d00 	bicseq	r5, r4, r0, lsl #26
     d28:	01df0000 	bicseq	r0, pc, r0
     d2c:	00010000 	andeq	r0, r1, r0
     d30:	00000053 	andeq	r0, r0, r3, asr r0
     d34:	00000000 	andeq	r0, r0, r0
     d38:	0000a000 	andeq	sl, r0, r0
     d3c:	0000ec00 	andeq	lr, r0, r0, lsl #24
     d40:	5c000100 	stfpls	f0, [r0], {-0}
     d44:	000000ec 	andeq	r0, r0, ip, ror #1
     d48:	00000100 	andeq	r0, r0, r0, lsl #2
     d4c:	00530001 	subseq	r0, r3, r1
     d50:	04000001 	streq	r0, [r0], #-1
     d54:	01000001 	tsteq	r0, r1
     d58:	01045c00 	tsteq	r4, r0, lsl #24
     d5c:	01080000 	mrseq	r0, (UNDEF: 8)
     d60:	00010000 	andeq	r0, r1, r0
     d64:	00010853 	andeq	r0, r1, r3, asr r8
     d68:	00011800 	andeq	r1, r1, r0, lsl #16
     d6c:	5c000100 	stfpls	f0, [r0], {-0}
     d70:	00000118 	andeq	r0, r0, r8, lsl r1
     d74:	0000011c 	andeq	r0, r0, ip, lsl r1
     d78:	1c500001 	mrrcne	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     d7c:	3c000001 	stccc	0, cr0, [r0], {1}
     d80:	01000001 	tsteq	r0, r1
     d84:	01445c00 	cmpeq	r4, r0, lsl #24
     d88:	01580000 	cmpeq	r8, r0
     d8c:	00010000 	andeq	r0, r1, r0
     d90:	00015850 	andeq	r5, r1, r0, asr r8
     d94:	00016000 	andeq	r6, r1, r0
     d98:	5c000100 	stfpls	f0, [r0], {-0}
     d9c:	00000160 	andeq	r0, r0, r0, ror #2
     da0:	00000168 	andeq	r0, r0, r8, ror #2
     da4:	68530001 	ldmdavs	r3, {r0}^
     da8:	78000001 	stmdavc	r0, {r0}
     dac:	01000001 	tsteq	r0, r1
     db0:	01785c00 	cmneq	r8, r0, lsl #24
     db4:	01800000 	orreq	r0, r0, r0
     db8:	00050000 	andeq	r0, r5, r0
     dbc:	2534007c 	ldrcs	r0, [r4, #-124]!	; 0x7c
     dc0:	0001809f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
     dc4:	00018800 	andeq	r8, r1, r0, lsl #16
     dc8:	5c000100 	stfpls	f0, [r0], {-0}
     dcc:	00000188 	andeq	r0, r0, r8, lsl #3
     dd0:	00000190 	muleq	r0, r0, r1
     dd4:	90530001 	subsls	r0, r3, r1
     dd8:	94000001 	strls	r0, [r0], #-1
     ddc:	01000001 	tsteq	r0, r1
     de0:	01945c00 	orrseq	r5, r4, r0, lsl #24
     de4:	019c0000 	orrseq	r0, ip, r0
     de8:	00010000 	andeq	r0, r1, r0
     dec:	00019c53 	andeq	r9, r1, r3, asr ip
     df0:	0001ac00 	andeq	sl, r1, r0, lsl #24
     df4:	5c000100 	stfpls	f0, [r0], {-0}
     df8:	000001ac 	andeq	r0, r0, ip, lsr #3
     dfc:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
     e00:	007c0005 	rsbseq	r0, ip, r5
     e04:	b49f2531 	ldrlt	r2, [pc], #1329	; e0c <_start-0x71f4>
     e08:	bc000001 	stclt	0, cr0, [r0], {1}
     e0c:	01000001 	tsteq	r0, r1
     e10:	01bc5c00 			; <UNDEFINED> instruction: 0x01bc5c00
     e14:	01cc0000 	biceq	r0, ip, r0
     e18:	00010000 	andeq	r0, r1, r0
     e1c:	0001cc53 	andeq	ip, r1, r3, asr ip
     e20:	0001cf00 	andeq	ip, r1, r0, lsl #30
     e24:	5c000100 	stfpls	f0, [r0], {-0}
     e28:	000001cf 	andeq	r0, r0, pc, asr #3
     e2c:	000001d4 	ldrdeq	r0, [r0], -r4
     e30:	01f30004 	mvnseq	r0, r4
     e34:	01d49f53 	bicseq	r9, r4, r3, asr pc
     e38:	01df0000 	bicseq	r0, pc, r0
     e3c:	00010000 	andeq	r0, r1, r0
     e40:	0000005c 	andeq	r0, r0, ip, asr r0
     e44:	00000000 	andeq	r0, r0, r0
     e48:	0000ec00 	andeq	lr, r0, r0, lsl #24
     e4c:	0000fc00 	andeq	pc, r0, r0, lsl #24
     e50:	30000200 	andcc	r0, r0, r0, lsl #4
     e54:	0000fc9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
     e58:	00010400 	andeq	r0, r1, r0, lsl #8
     e5c:	31000200 	mrscc	r0, R8_usr
     e60:	0001049f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
     e64:	00010800 	andeq	r0, r1, r0, lsl #16
     e68:	30000200 	andcc	r0, r0, r0, lsl #4
     e6c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     e70:	00000000 	andeq	r0, r0, r0
     e74:	00021800 	andeq	r1, r2, r0, lsl #16
     e78:	00022800 	andeq	r2, r2, r0, lsl #16
     e7c:	50000100 	andpl	r0, r0, r0, lsl #2
     e80:	00000228 	andeq	r0, r0, r8, lsr #4
     e84:	0000023c 	andeq	r0, r0, ip, lsr r2
     e88:	01f30004 	mvnseq	r0, r4
     e8c:	023c9f50 	eorseq	r9, ip, #80, 30	; 0x140
     e90:	02680000 	rsbeq	r0, r8, #0
     e94:	00010000 	andeq	r0, r1, r0
     e98:	00000050 	andeq	r0, r0, r0, asr r0
     e9c:	00000000 	andeq	r0, r0, r0
     ea0:	00021800 	andeq	r1, r2, r0, lsl #16
     ea4:	00022c00 	andeq	r2, r2, r0, lsl #24
     ea8:	51000100 	mrspl	r0, (UNDEF: 16)
     eac:	0000022c 	andeq	r0, r0, ip, lsr #4
     eb0:	0000023c 	andeq	r0, r0, ip, lsr r2
     eb4:	01f30004 	mvnseq	r0, r4
     eb8:	023c9f51 	eorseq	r9, ip, #324	; 0x144
     ebc:	02680000 	rsbeq	r0, r8, #0
     ec0:	00010000 	andeq	r0, r1, r0
     ec4:	00000051 	andeq	r0, r0, r1, asr r0
     ec8:	00000000 	andeq	r0, r0, r0
     ecc:	00026800 	andeq	r6, r2, r0, lsl #16
     ed0:	00029000 	andeq	r9, r2, r0
     ed4:	50000100 	andpl	r0, r0, r0, lsl #2
     ed8:	00000290 	muleq	r0, r0, r2
     edc:	000004dc 	ldrdeq	r0, [r0], -ip
     ee0:	dc5b0001 	mrrcle	0, 0, r0, fp, cr1
     ee4:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
     ee8:	04000004 	streq	r0, [r0], #-4
     eec:	5001f300 	andpl	pc, r1, r0, lsl #6
     ef0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     ef4:	00000000 	andeq	r0, r0, r0
     ef8:	00026800 	andeq	r6, r2, r0, lsl #16
     efc:	00027c00 	andeq	r7, r2, r0, lsl #24
     f00:	51000100 	mrspl	r0, (UNDEF: 16)
     f04:	0000027c 	andeq	r0, r0, ip, ror r2
     f08:	00000290 	muleq	r0, r0, r2
     f0c:	01710003 	cmneq	r1, r3
     f10:	0002909f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
     f14:	0004f000 	andeq	pc, r4, r0
     f18:	f3000400 	vshl.u8	d0, d0, d0
     f1c:	009f5101 	addseq	r5, pc, r1, lsl #2
     f20:	00000000 	andeq	r0, r0, r0
     f24:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     f28:	98000002 	stmdals	r0, {r1}
     f2c:	01000002 	tsteq	r0, r2
     f30:	02985200 	addseq	r5, r8, #0, 4
     f34:	02c00000 	sbceq	r0, r0, #0
     f38:	00010000 	andeq	r0, r1, r0
     f3c:	0002c052 	andeq	ip, r2, r2, asr r0
     f40:	00048c00 	andeq	r8, r4, r0, lsl #24
     f44:	56000100 	strpl	r0, [r0], -r0, lsl #2
     f48:	0000048c 	andeq	r0, r0, ip, lsl #9
     f4c:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     f50:	00520001 	subseq	r0, r2, r1
     f54:	00000000 	andeq	r0, r0, r0
     f58:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     f5c:	84000002 	strhi	r0, [r0], #-2
     f60:	01000002 	tsteq	r0, r2
     f64:	00005300 	andeq	r5, r0, r0, lsl #6
     f68:	00000000 	andeq	r0, r0, r0
     f6c:	02780000 	rsbseq	r0, r8, #0
     f70:	02900000 	addseq	r0, r0, #0
     f74:	00010000 	andeq	r0, r1, r0
     f78:	00029050 	andeq	r9, r2, r0, asr r0
     f7c:	00029400 	andeq	r9, r2, r0, lsl #8
     f80:	54000100 	strpl	r0, [r0], #-256	; 0x100
     f84:	00000294 	muleq	r0, r4, r2
     f88:	000002a0 	andeq	r0, r0, r0, lsr #5
     f8c:	01740003 	cmneq	r4, r3
     f90:	0002a09f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
     f94:	0002ac00 	andeq	sl, r2, r0, lsl #24
     f98:	54000100 	strpl	r0, [r0], #-256	; 0x100
     f9c:	000002ac 	andeq	r0, r0, ip, lsr #5
     fa0:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
     fa4:	01740003 	cmneq	r4, r3
     fa8:	0002b89f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
     fac:	00049000 	andeq	r9, r4, r0
     fb0:	54000100 	strpl	r0, [r0], #-256	; 0x100
     fb4:	00000490 	muleq	r0, r0, r4
     fb8:	0000049c 	muleq	r0, ip, r4
     fbc:	01740003 	cmneq	r4, r3
     fc0:	00049c9f 	muleq	r4, pc, ip	; <UNPREDICTABLE>
     fc4:	0004c800 	andeq	ip, r4, r0, lsl #16
     fc8:	54000100 	strpl	r0, [r0], #-256	; 0x100
     fcc:	000004c8 	andeq	r0, r0, r8, asr #9
     fd0:	000004d4 	ldrdeq	r0, [r0], -r4
     fd4:	d4500001 	ldrble	r0, [r0], #-1
     fd8:	dc000004 	stcle	0, cr0, [r0], {4}
     fdc:	03000004 	movweq	r0, #4
     fe0:	9f017400 	svcls	0x00017400
	...
     fec:	00000280 	andeq	r0, r0, r0, lsl #5
     ff0:	000004dc 	ldrdeq	r0, [r0], -ip
     ff4:	dc580001 	mrrcle	0, 0, r0, r8, cr1
     ff8:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
     ffc:	0a000004 	beq	1014 <_start-0x6fec>
    1000:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1004:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    1008:	009f1c31 	addseq	r1, pc, r1, lsr ip	; <UNPREDICTABLE>
    100c:	00000000 	andeq	r0, r0, r0
    1010:	bc000000 	stclt	0, cr0, [r0], {-0}
    1014:	c0000003 	andgt	r0, r0, r3
    1018:	01000003 	tsteq	r0, r3
    101c:	03e45000 	mvneq	r5, #0
    1020:	03e80000 	mvneq	r0, #0
    1024:	00010000 	andeq	r0, r1, r0
    1028:	00040c50 	andeq	r0, r4, r0, asr ip
    102c:	00041000 	andeq	r1, r4, r0
    1030:	50000100 	andpl	r0, r0, r0, lsl #2
    1034:	00000434 	andeq	r0, r0, r4, lsr r4
    1038:	00000438 	andeq	r0, r0, r8, lsr r4
    103c:	40500001 	subsmi	r0, r0, r1
    1040:	44000004 	strmi	r0, [r0], #-4
    1044:	01000004 	tsteq	r0, r4
    1048:	04685000 	strbteq	r5, [r8], #-0
    104c:	046c0000 	strbteq	r0, [ip], #-0
    1050:	00010000 	andeq	r0, r1, r0
    1054:	00048850 	andeq	r8, r4, r0, asr r8
    1058:	0004b000 	andeq	fp, r4, r0
    105c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1068:	000002c0 	andeq	r0, r0, r0, asr #5
    106c:	000002c8 	andeq	r0, r0, r8, asr #5
    1070:	9f300002 	svcls	0x00300002
    1074:	000002c8 	andeq	r0, r0, r8, asr #5
    1078:	000002cc 	andeq	r0, r0, ip, asr #5
    107c:	d8570001 	ldmdale	r7, {r0}^
    1080:	b0000002 	andlt	r0, r0, r2
    1084:	01000004 	tsteq	r0, r4
    1088:	00005700 	andeq	r5, r0, r0, lsl #14
    108c:	00000000 	andeq	r0, r0, r0
    1090:	00140000 	andseq	r0, r4, r0
    1094:	001c0000 	andseq	r0, ip, r0
    1098:	00030000 	andeq	r0, r3, r0
    109c:	1c9f0473 	cfldrsne	mvf0, [pc], {115}	; 0x73
    10a0:	27000000 	strcs	r0, [r0, -r0]
    10a4:	01000000 	mrseq	r0, (UNDEF: 0)
    10a8:	00005300 	andeq	r5, r0, r0, lsl #6
    10ac:	00000000 	andeq	r0, r0, r0
    10b0:	91400000 	mrsls	r0, (UNDEF: 64)
    10b4:	91440000 	mrsls	r0, (UNDEF: 68)
    10b8:	00020000 	andeq	r0, r2, r0
    10bc:	91449f30 	cmpls	r4, r0, lsr pc
    10c0:	91480000 	mrsls	r0, (UNDEF: 72)
    10c4:	00010000 	andeq	r0, r1, r0
    10c8:	00000050 	andeq	r0, r0, r0, asr r0
    10cc:	00000000 	andeq	r0, r0, r0
    10d0:	00915800 	addseq	r5, r1, r0, lsl #16
    10d4:	00915c00 	addseq	r5, r1, r0, lsl #24
    10d8:	30000200 	andcc	r0, r0, r0, lsl #4
    10dc:	00915c9f 	umullseq	r5, r1, pc, ip	; <UNPREDICTABLE>
    10e0:	00916000 	addseq	r6, r1, r0
    10e4:	53000100 	movwpl	r0, #256	; 0x100
    10e8:	00009164 	andeq	r9, r0, r4, ror #2
    10ec:	0000916c 	andeq	r9, r0, ip, ror #2
    10f0:	00530001 	subseq	r0, r3, r1
	...
    10fc:	04000000 	streq	r0, [r0], #-0
    1100:	01000000 	mrseq	r0, (UNDEF: 0)
    1104:	00045000 	andeq	r5, r4, r0
    1108:	000c0000 	andeq	r0, ip, r0
    110c:	00010000 	andeq	r0, r1, r0
    1110:	00000c53 	andeq	r0, r0, r3, asr ip
    1114:	00001000 	andeq	r1, r0, r0
    1118:	50000100 	andpl	r0, r0, r0, lsl #2
    111c:	00000010 	andeq	r0, r0, r0, lsl r0
    1120:	0000001c 	andeq	r0, r0, ip, lsl r0
    1124:	00530001 	subseq	r0, r3, r1
    1128:	00000000 	andeq	r0, r0, r0
    112c:	30000000 	andcc	r0, r0, r0
    1130:	3b000000 	blcc	1138 <_start-0x6ec8>
    1134:	01000000 	mrseq	r0, (UNDEF: 0)
    1138:	003b5000 	eorseq	r5, fp, r0
    113c:	00540000 	subseq	r0, r4, r0
    1140:	00010000 	andeq	r0, r1, r0
    1144:	00000055 	andeq	r0, r0, r5, asr r0
    1148:	00000000 	andeq	r0, r0, r0
    114c:	00004400 	andeq	r4, r0, r0, lsl #8
    1150:	00004800 	andeq	r4, r0, r0, lsl #16
    1154:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1160:	00000054 	andeq	r0, r0, r4, asr r0
    1164:	00000060 	andeq	r0, r0, r0, rrx
    1168:	60500001 	subsvs	r0, r0, r1
    116c:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    1170:	04000000 	streq	r0, [r0], #-0
    1174:	5001f300 	andpl	pc, r1, r0, lsl #6
    1178:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    117c:	00000000 	andeq	r0, r0, r0
    1180:	00006800 	andeq	r6, r0, r0, lsl #16
    1184:	00007400 	andeq	r7, r0, r0, lsl #8
    1188:	50000100 	andpl	r0, r0, r0, lsl #2
    118c:	00000074 	andeq	r0, r0, r4, ror r0
    1190:	0000007c 	andeq	r0, r0, ip, ror r0
    1194:	01f30004 	mvnseq	r0, r4
    1198:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    11a4:	00180000 	andseq	r0, r8, r0
    11a8:	00010000 	andeq	r0, r1, r0
    11ac:	00001850 	andeq	r1, r0, r0, asr r8
    11b0:	00002c00 	andeq	r2, r0, r0, lsl #24
    11b4:	f3000400 	vshl.u8	d0, d0, d0
    11b8:	2c9f5001 	ldccs	0, cr5, [pc], {1}
    11bc:	40000000 	andmi	r0, r0, r0
    11c0:	01000000 	mrseq	r0, (UNDEF: 0)
    11c4:	00405000 	subeq	r5, r0, r0
    11c8:	00640000 	rsbeq	r0, r4, r0
    11cc:	00040000 	andeq	r0, r4, r0
    11d0:	9f5001f3 	svcls	0x005001f3
	...
    11dc:	0000003c 	andeq	r0, r0, ip, lsr r0
    11e0:	0000004b 	andeq	r0, r0, fp, asr #32
    11e4:	4b520001 	blmi	14811f0 <__bss_end__+0x1476ee8>
    11e8:	64000000 	strvs	r0, [r0], #-0
    11ec:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    11f0:	5001f300 	andpl	pc, r1, r0, lsl #6
    11f4:	fc090323 	stc2	3, cr0, [r9], {35}	; 0x23
    11f8:	00009f1a 	andeq	r9, r0, sl, lsl pc
    11fc:	00000000 	andeq	r0, r0, r0
    1200:	00640000 	rsbeq	r0, r4, r0
    1204:	007c0000 	rsbseq	r0, ip, r0
    1208:	00010000 	andeq	r0, r1, r0
    120c:	00007c50 	andeq	r7, r0, r0, asr ip
    1210:	00009000 	andeq	r9, r0, r0
    1214:	f3000400 	vshl.u8	d0, d0, d0
    1218:	909f5001 	addsls	r5, pc, r1
    121c:	9b000000 	blls	1224 <_start-0x6ddc>
    1220:	01000000 	mrseq	r0, (UNDEF: 0)
    1224:	009b5000 	addseq	r5, fp, r0
    1228:	00a00000 	adceq	r0, r0, r0
    122c:	00040000 	andeq	r0, r4, r0
    1230:	9f5001f3 	svcls	0x005001f3
    1234:	000000a0 	andeq	r0, r0, r0, lsr #1
    1238:	000000ac 	andeq	r0, r0, ip, lsr #1
    123c:	ac500001 	mrrcge	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    1240:	c0000000 	andgt	r0, r0, r0
    1244:	04000000 	streq	r0, [r0], #-0
    1248:	5001f300 	andpl	pc, r1, r0, lsl #6
    124c:	0000c09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1250:	0000df00 	andeq	sp, r0, r0, lsl #30
    1254:	50000100 	andpl	r0, r0, r0, lsl #2
    1258:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    125c:	000000f8 	strdeq	r0, [r0], -r8
    1260:	01f30004 	mvnseq	r0, r4
    1264:	00009f50 	andeq	r9, r0, r0, asr pc
    1268:	00000000 	andeq	r0, r0, r0
    126c:	00640000 	rsbeq	r0, r4, r0
    1270:	00800000 	addeq	r0, r0, r0
    1274:	00010000 	andeq	r0, r1, r0
    1278:	00008051 	andeq	r8, r0, r1, asr r0
    127c:	00009000 	andeq	r9, r0, r0
    1280:	f3000400 	vshl.u8	d0, d0, d0
    1284:	909f5101 	addsls	r5, pc, r1, lsl #2
    1288:	9b000000 	blls	1290 <_start-0x6d70>
    128c:	01000000 	mrseq	r0, (UNDEF: 0)
    1290:	009b5100 	addseq	r5, fp, r0, lsl #2
    1294:	00a00000 	adceq	r0, r0, r0
    1298:	00040000 	andeq	r0, r4, r0
    129c:	9f5101f3 	svcls	0x005101f3
    12a0:	000000a0 	andeq	r0, r0, r0, lsr #1
    12a4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    12a8:	b0510001 	subslt	r0, r1, r1
    12ac:	c0000000 	andgt	r0, r0, r0
    12b0:	04000000 	streq	r0, [r0], #-0
    12b4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    12b8:	0000c09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    12bc:	0000d400 	andeq	sp, r0, r0, lsl #8
    12c0:	51000100 	mrspl	r0, (UNDEF: 16)
    12c4:	000000d4 	ldrdeq	r0, [r0], -r4
    12c8:	000000d8 	ldrdeq	r0, [r0], -r8
    12cc:	00710004 	rsbseq	r0, r1, r4
    12d0:	00d89f1f 	sbcseq	r9, r8, pc, lsl pc
    12d4:	00f80000 	rscseq	r0, r8, r0
    12d8:	00040000 	andeq	r0, r4, r0
    12dc:	9f5101f3 	svcls	0x005101f3
	...
    12e8:	000000c8 	andeq	r0, r0, r8, asr #1
    12ec:	000000cc 	andeq	r0, r0, ip, asr #1
    12f0:	cc520001 	mrrcgt	0, 0, r0, r2, cr1
    12f4:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    12f8:	05000000 	streq	r0, [r0, #-0]
    12fc:	a3040300 	movwge	r0, #17152	; 0x4300
    1300:	00d80000 	sbcseq	r0, r8, r0
    1304:	00df0000 	sbcseq	r0, pc, r0
    1308:	00010000 	andeq	r0, r1, r0
    130c:	00000051 	andeq	r0, r0, r1, asr r0
	...
    1318:	00000b00 	andeq	r0, r0, r0, lsl #22
    131c:	50000100 	andpl	r0, r0, r0, lsl #2
    1320:	0000000b 	andeq	r0, r0, fp
    1324:	00000014 	andeq	r0, r0, r4, lsl r0
    1328:	00540001 	subseq	r0, r4, r1
    132c:	00000000 	andeq	r0, r0, r0
    1330:	Address 0x0000000000001330 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	00008010 	andeq	r8, r0, r0, lsl r0
  14:	000001d4 	ldrdeq	r0, [r0], -r4
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	04f30002 	ldrbteq	r0, [r3], #2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	000081e4 	andeq	r8, r0, r4, ror #3
  34:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	0d850002 	stceq	0, cr0, [r5, #8]
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	000085c0 	andeq	r8, r0, r0, asr #11
  54:	00000518 	andeq	r0, r0, r8, lsl r5
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	17080002 	strne	r0, [r8, -r2]
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	00008b48 	andeq	r8, r0, r8, asr #22
  74:	00000020 	andeq	r0, r0, r0, lsr #32
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	17e70002 	strbne	r0, [r7, r2]!
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	00008b68 	andeq	r8, r0, r8, ror #22
  94:	00000058 	andeq	r0, r0, r8, asr r0
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	197c0002 	ldmdbne	ip!, {r1}^
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	00008bc0 	andeq	r8, r0, r0, asr #23
  b4:	00000034 	andeq	r0, r0, r4, lsr r0
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	1a6e0002 	bne	1b800d4 <__bss_end__+0x1b75dcc>
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	00008bf4 	strdeq	r8, [r0], -r4
  d4:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	20c60002 	sbccs	r0, r6, r2
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	000090e4 	andeq	r9, r0, r4, ror #1
  f4:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	21c90002 	biccs	r0, r9, r2
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	0000910c 	andeq	r9, r0, ip, lsl #2
 114:	00000034 	andeq	r0, r0, r4, lsr r0
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	22d80002 	sbcscs	r0, r8, #2
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	00009140 	andeq	r9, r0, r0, asr #2
 134:	00000074 	andeq	r0, r0, r4, ror r0
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	24890002 	strcs	r0, [r9], #2
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	000091b4 			; <UNDEFINED> instruction: 0x000091b4
 154:	0000007c 	andeq	r0, r0, ip, ror r0
	...
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	26370002 	ldrtcs	r0, [r7], -r2
 168:	00040000 	andeq	r0, r4, r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	00009508 	andeq	r9, r0, r8, lsl #10
 174:	00000178 	andeq	r0, r0, r8, ror r1
	...
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	29830002 	stmibcs	r3, {r1}
 188:	00040000 	andeq	r0, r4, r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	00009680 	andeq	r9, r0, r0, lsl #13
 194:	00000014 	andeq	r0, r0, r4, lsl r0
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000012e 	andeq	r0, r0, lr, lsr #2
   4:	00dd0002 	sbcseq	r0, sp, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2f010000 	svccs	0x00010000
  1c:	2f727375 	svccs	0x00727375
  20:	61636f6c 	cmnvs	r3, ip, ror #30
  24:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
  28:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
  2c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
  30:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
  34:	61652d65 	cmnvs	r5, r5, ror #26
  38:	342f6962 	strtcc	r6, [pc], #-2402	; 40 <_start-0x7fc0>
  3c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
  40:	3173632d 	cmncc	r3, sp, lsr #6
  44:	2f653037 	svccs	0x00653037
  48:	2f62696c 	svccs	0x0062696c
  4c:	2f636367 	svccs	0x00636367
  50:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
  54:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
  58:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
  5c:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
  60:	2f332e38 	svccs	0x00332e38
  64:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  68:	00656475 	rsbeq	r6, r5, r5, ror r4
  6c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
  70:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
  74:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
  78:	2f6e756a 	svccs	0x006e756a
  7c:	6b736544 	blvs	1cd9594 <__bss_end__+0x1ccf28c>
  80:	2f706f74 	svccs	0x00706f74
  84:	6f686373 	svcvs	0x00686373
  88:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
  8c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
  90:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
  94:	53432f30 	movtpl	r2, #16176	; 0x3f30
  98:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
  9c:	3173632f 	cmncc	r3, pc, lsr #6
  a0:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
  a4:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
  a8:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
  ac:	00697062 	rsbeq	r7, r9, r2, rrx
  b0:	742d3200 	strtvc	r3, [sp], #-512	; 0x200
  b4:	2e747365 	cdpcs	3, 7, cr7, cr4, cr5, {3}
  b8:	00000063 	andeq	r0, r0, r3, rrx
  bc:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
  c0:	7268742d 	rsbvc	r7, r8, #754974720	; 0x2d000000
  c4:	2e646165 	powcssz	f6, f4, f5
  c8:	00000068 	andeq	r0, r0, r8, rrx
  cc:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
  d0:	2d746e69 	ldclcs	14, cr6, [r4, #-420]!	; 0xfffffe5c
  d4:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
  d8:	00010068 	andeq	r0, r1, r8, rrx
  dc:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
  e0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
  e4:	00000000 	andeq	r0, r0, r0
  e8:	80100205 	andshi	r0, r0, r5, lsl #4
  ec:	10030000 	andne	r0, r3, r0
  f0:	2f4b6a01 	svccs	0x004b6a01
  f4:	0402002d 	streq	r0, [r2], #-45	; 0x2d
  f8:	02002f02 	andeq	r2, r0, #2, 30
  fc:	00b90204 	adcseq	r0, r9, r4, lsl #4
 100:	06010402 	streq	r0, [r1], -r2, lsl #8
 104:	9f4c0682 	svcls	0x004c0682
 108:	4bbc9f83 	blmi	fef27f1c <__bss_end__+0xfef1dc14>
 10c:	694b4b67 	stmdbvs	fp, {r0, r1, r2, r5, r6, r8, r9, fp, lr}^
 110:	4b332f4b 	blmi	ccbe44 <__bss_end__+0xcc1b3c>
 114:	0067674c 	rsbeq	r6, r7, ip, asr #14
 118:	06010402 	streq	r0, [r1], -r2, lsl #8
 11c:	83bb0666 			; <UNDEFINED> instruction: 0x83bb0666
 120:	01040200 	mrseq	r0, R12_usr
 124:	bb066606 	bllt	199944 <__bss_end__+0x18f63c>
 128:	4b8a4d4c 	blmi	fe293660 <__bss_end__+0xfe289358>
 12c:	0022024b 	eoreq	r0, r2, fp, asr #4
 130:	01950101 	orrseq	r0, r5, r1, lsl #2
 134:	00020000 	andeq	r0, r2, r0
 138:	000000e8 	andeq	r0, r0, r8, ror #1
 13c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 140:	0101000d 	tsteq	r1, sp
 144:	00000101 	andeq	r0, r0, r1, lsl #2
 148:	00000100 	andeq	r0, r0, r0, lsl #2
 14c:	73752f01 	cmnvc	r5, #1, 30
 150:	6f6c2f72 	svcvs	0x006c2f72
 154:	2f6c6163 	svccs	0x006c6163
 158:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
 15c:	612f7261 	teqvs	pc, r1, ror #4
 160:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 164:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 168:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 16c:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 170:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
 174:	30373173 	eorscc	r3, r7, r3, ror r1
 178:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 17c:	63672f62 	cmnvs	r7, #392	; 0x188
 180:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
 184:	6f6e2d6d 	svcvs	0x006e2d6d
 188:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 18c:	2f696261 	svccs	0x00696261
 190:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 194:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
 198:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
 19c:	552f0065 	strpl	r0, [pc, #-101]!	; 13f <_start-0x7ec1>
 1a0:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 1a4:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 1a8:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 1ac:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 1b0:	6f746b73 	svcvs	0x00746b73
 1b4:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 1b8:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 20 <_start-0x7fe0>
 1bc:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 1c0:	31726574 	cmncc	r2, r4, ror r5
 1c4:	2f303239 	svccs	0x00303239
 1c8:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 1cc:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 1d0:	30343173 	eorscc	r3, r4, r3, ror r1
 1d4:	30322d65 	eorscc	r2, r2, r5, ror #26
 1d8:	2f6e6977 	svccs	0x006e6977
 1dc:	7062696c 	rsbvc	r6, r2, ip, ror #18
 1e0:	51000069 	tstpl	r0, r9, rrx
 1e4:	0000682e 	andeq	r6, r0, lr, lsr #16
 1e8:	70720000 	rsbsvc	r0, r2, r0
 1ec:	68742d69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, sl, fp, sp}^
 1f0:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 1f4:	0000632e 	andeq	r6, r0, lr, lsr #6
 1f8:	70720000 	rsbsvc	r0, r2, r0
 1fc:	68742d69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, sl, fp, sp}^
 200:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 204:	0000682e 	andeq	r6, r0, lr, lsr #16
 208:	74730000 	ldrbtvc	r0, [r3], #-0
 20c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
 210:	6363672d 	cmnvs	r3, #11796480	; 0xb40000
 214:	0100682e 	tsteq	r0, lr, lsr #16
 218:	70720000 	rsbsvc	r0, r2, r0
 21c:	00682e69 	rsbeq	r2, r8, r9, ror #28
 220:	00000002 	andeq	r0, r0, r2
 224:	e4020500 	str	r0, [r2], #-1280	; 0x500
 228:	03000081 	movweq	r0, #129	; 0x81
 22c:	0301010f 	movweq	r0, #4367	; 0x110f
 230:	4b134a1b 	blmi	4d2aa4 <__bss_end__+0x4c879c>
 234:	2f686767 	svccs	0x00686767
 238:	4b67134f 	blmi	19c4f7c <__bss_end__+0x19bac74>
 23c:	02044b2f 	andeq	r4, r4, #48128	; 0xbc00
 240:	4c4a6d03 	mcrrmi	13, 0, r6, sl, cr3
 244:	67030104 	strvs	r0, [r3, -r4, lsl #2]
 248:	00684b82 	rsbeq	r4, r8, r2, lsl #23
 24c:	06010402 	streq	r0, [r1], -r2, lsl #8
 250:	00bb0666 	adcseq	r0, fp, r6, ror #12
 254:	06010402 	streq	r0, [r1], -r2, lsl #8
 258:	4db80666 	ldcmi	6, cr0, [r8, #408]!	; 0x198
 25c:	002fa12f 	eoreq	sl, pc, pc, lsr #2
 260:	06010402 	streq	r0, [r1], -r2, lsl #8
 264:	2fbc064a 	svccs	0x00bc064a
 268:	0402004b 	streq	r0, [r2], #-75	; 0x4b
 26c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 270:	2f4b67bd 	svccs	0x004b67bd
 274:	4a7a032f 	bmi	1e80f38 <__bss_end__+0x1e76c30>
 278:	03020435 	movweq	r0, #9269	; 0x2435
 27c:	4d2f9e74 	stcmi	14, cr9, [pc, #-464]!	; b4 <_start-0x7f4c>
 280:	0084674b 	addeq	r6, r4, fp, asr #14
 284:	06010402 	streq	r0, [r1], -r2, lsl #8
 288:	a0bb064a 	adcsge	r0, fp, sl, asr #12
 28c:	14d66e03 	ldrbne	r6, [r6], #3587	; 0xe03
 290:	67821c03 	strvs	r1, [r2, r3, lsl #24]
 294:	2f4a0a03 	svccs	0x004a0a03
 298:	0369682f 	cmneq	r9, #3080192	; 0x2f0000
 29c:	2b032e0e 	blcs	cbadc <__bss_end__+0xc17d4>
 2a0:	834d012e 	movthi	r0, #53550	; 0xd12e
 2a4:	0867304b 	stmdaeq	r7!, {r0, r1, r3, r6, ip, sp}^
 2a8:	034b8642 	movteq	r8, #46658	; 0xb642
 2ac:	8435f250 	ldrthi	pc, [r5], #-592	; 0x250	; <UNPREDICTABLE>
 2b0:	672e0903 	strvs	r0, [lr, -r3, lsl #18]!
 2b4:	02006767 	andeq	r6, r0, #27000832	; 0x19c0000
 2b8:	a3480104 	movtge	r0, #33028	; 0x8104
 2bc:	2fba1b03 	svccs	0x00ba1b03
 2c0:	082f2808 	stmdaeq	pc!, {r3, fp, sp}	; <UNPREDICTABLE>
 2c4:	12022f26 	andne	r2, r2, #38, 30	; 0x98
 2c8:	70010100 	andvc	r0, r1, r0, lsl #2
 2cc:	02000002 	andeq	r0, r0, #2
 2d0:	00012800 	andeq	r2, r1, r0, lsl #16
 2d4:	fb010200 	blx	40ade <__bss_end__+0x367d6>
 2d8:	01000d0e 	tsteq	r0, lr, lsl #26
 2dc:	00010101 	andeq	r0, r1, r1, lsl #2
 2e0:	00010000 	andeq	r0, r1, r0
 2e4:	752f0100 	strvc	r0, [pc, #-256]!	; 1ec <_start-0x7e14>
 2e8:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 124 <_start-0x7edc>
 2ec:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 2f0:	6c65432f 	stclvs	3, cr4, [r5], #-188	; 0xffffff44
 2f4:	2f72616c 	svccs	0x0072616c
 2f8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 2fc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 300:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 304:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 308:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
 30c:	37317363 	ldrcc	r7, [r1, -r3, ror #6]!
 310:	6c2f6530 	cfstr32vs	mvfx6, [pc], #-192	; 258 <_start-0x7da8>
 314:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
 318:	612f6363 	teqvs	pc, r3, ror #6
 31c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 320:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 324:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 328:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 32c:	692f332e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, r9, ip, sp}	; <UNPREDICTABLE>
 330:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
 334:	2f006564 	svccs	0x00006564
 338:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 33c:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 340:	6a6e6169 	bvs	1b988ec <__bss_end__+0x1b8e5e4>
 344:	442f6e75 	strtmi	r6, [pc], #-3701	; 34c <_start-0x7cb4>
 348:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 34c:	732f706f 	teqvc	pc, #111	; 0x6f
 350:	6f6f6863 	svcvs	0x006f6863
 354:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 358:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 35c:	30323931 	eorscc	r3, r2, r1, lsr r9
 360:	3153432f 	cmpcc	r3, pc, lsr #6
 364:	2f453034 	svccs	0x00453034
 368:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 36c:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 370:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 374:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 378:	2f006970 	svccs	0x00006970
 37c:	2f727375 	svccs	0x00727375
 380:	61636f6c 	cmnvs	r3, ip, ror #30
 384:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
 388:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
 38c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 390:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 394:	61652d65 	cmnvs	r5, r5, ror #26
 398:	342f6962 	strtcc	r6, [pc], #-2402	; 3a0 <_start-0x7c60>
 39c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 3a0:	3173632d 	cmncc	r3, sp, lsr #6
 3a4:	2f653037 	svccs	0x00653037
 3a8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 3ac:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 3b0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 3b4:	6e692f69 	cdpvs	15, 6, cr2, cr9, cr9, {3}
 3b8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
 3bc:	63000065 	movwvs	r0, #101	; 0x65
 3c0:	75637269 	strbvc	r7, [r3, #-617]!	; 0x269
 3c4:	2e72616c 	rpwcssz	f6, f2, #4.0
 3c8:	00000063 	andeq	r0, r0, r3, rrx
 3cc:	72696300 	rsbvc	r6, r9, #0, 6
 3d0:	616c7563 	cmnvs	ip, r3, ror #10
 3d4:	00682e72 	rsbeq	r2, r8, r2, ror lr
 3d8:	73000000 	movwvc	r0, #0
 3dc:	65646474 	strbvs	r6, [r4, #-1140]!	; 0x474
 3e0:	00682e66 	rsbeq	r2, r8, r6, ror #28
 3e4:	72000001 	andvc	r0, r0, #1
 3e8:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 3ec:	00000200 	andeq	r0, r0, r0, lsl #4
 3f0:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 3f4:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 3f8:	00000300 	andeq	r0, r0, r0, lsl #6
 3fc:	02050000 	andeq	r0, r5, #0
 400:	000085c0 	andeq	r8, r0, r0, asr #11
 404:	02044b19 	andeq	r4, r4, #25600	; 0x6400
 408:	8200cd03 	andhi	ip, r0, #3, 26	; 0xc0
 40c:	03010499 	movweq	r0, #5273	; 0x1499
 410:	089e7fb8 	ldmeq	lr, {r3, r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}
 414:	9f2fd822 	svcls	0x002fd822
 418:	67673f08 	strbvs	r3, [r7, -r8, lsl #30]!
 41c:	044b9f67 	strbeq	r9, [fp], #-3943	; 0xf67
 420:	ba3a0302 	blt	e81030 <__bss_end__+0xe76d28>
 424:	47030104 	strmi	r0, [r3, -r4, lsl #2]
 428:	0402004a 	streq	r0, [r2], #-74	; 0x4a
 42c:	044a0601 	strbeq	r0, [sl], #-1537	; 0x601
 430:	3c030602 	stccc	6, cr0, [r3], {2}
 434:	030104ba 	movweq	r0, #5306	; 0x14ba
 438:	0200ba45 	andeq	fp, r0, #282624	; 0x45000
 43c:	4a060104 	bmi	180854 <__bss_end__+0x17654c>
 440:	03060204 	movweq	r0, #25092	; 0x6204
 444:	0104ba3d 	tsteq	r4, sp, lsr sl
 448:	009e4403 	addseq	r4, lr, r3, lsl #8
 44c:	06010402 	streq	r0, [r1], -r2, lsl #8
 450:	0602044a 	streq	r0, [r2], -sl, asr #8
 454:	03ba3703 			; <UNDEFINED> instruction: 0x03ba3703
 458:	4b4c820a 	blmi	1320c88 <__bss_end__+0x1316980>
 45c:	0104834b 	tsteq	r4, fp, asr #6
 460:	4a7fbb03 	bmi	1fef074 <__bss_end__+0x1fe4d6c>
 464:	c1030204 	tstgt	r3, r4, lsl #4
 468:	01042e00 	tsteq	r4, r0, lsl #28
 46c:	002e4003 	eoreq	r4, lr, r3
 470:	06010402 	streq	r0, [r1], -r2, lsl #8
 474:	0200664a 	andeq	r6, r0, #77594624	; 0x4a00000
 478:	00660404 	rsbeq	r0, r6, r4, lsl #8
 47c:	4a010402 	bmi	4148c <__bss_end__+0x37184>
 480:	02190306 	andseq	r0, r9, #402653184	; 0x18000000
 484:	02040124 	andeq	r0, r4, #36, 2
 488:	034a1c03 	movteq	r1, #44035	; 0xac03
 48c:	00324a0b 	eorseq	r4, r2, fp, lsl #20
 490:	03010402 	movweq	r0, #5122	; 0x1402
 494:	02002e71 	andeq	r2, r0, #1808	; 0x710
 498:	0a030104 	beq	c08b0 <__bss_end__+0xb65a8>
 49c:	4b2f4c4a 	blmi	bd35cc <__bss_end__+0xbc92c4>
 4a0:	01044683 	smlabbeq	r4, r3, r6, r4
 4a4:	4e2e5e03 	cdpmi	14, 2, cr5, cr14, cr3, {0}
 4a8:	020085a0 	andeq	r8, r0, #160, 10	; 0x28000000
 4ac:	004b0204 	subeq	r0, fp, r4, lsl #4
 4b0:	65020402 	strvs	r0, [r2, #-1026]	; 0x402
 4b4:	01040200 	mrseq	r0, R12_usr
 4b8:	4c062e06 	stcmi	14, cr2, [r6], {6}
 4bc:	832e5a03 	teqhi	lr, #12288	; 0x3000
 4c0:	36030204 	strcc	r0, [r3], -r4, lsl #4
 4c4:	0301042e 	movweq	r0, #5166	; 0x142e
 4c8:	834cba4b 	movthi	fp, #51787	; 0xca4b
 4cc:	044d3148 	strbeq	r3, [sp], #-328	; 0x148
 4d0:	4a2e0302 	bmi	b810e0 <__bss_end__+0xb76dd8>
 4d4:	54030104 	strpl	r0, [r3], #-260	; 0x104
 4d8:	684b4cd6 	stmdavs	fp, {r1, r2, r4, r6, r7, sl, fp, lr}^
 4dc:	27030204 	strcs	r0, [r3, -r4, lsl #4]
 4e0:	0301044a 	movweq	r0, #5194	; 0x144a
 4e4:	02009e5a 	andeq	r9, r0, #1440	; 0x5a0
 4e8:	4a060104 	bmi	180900 <__bss_end__+0x1765f8>
 4ec:	2f50b506 	svccs	0x0050b506
 4f0:	04ba1503 	ldrteq	r1, [sl], #1283	; 0x503
 4f4:	2e0f0302 	cdpcs	3, 0, cr0, cr15, cr2, {0}
 4f8:	030104d7 	movweq	r0, #5335	; 0x14d7
 4fc:	02042e73 	andeq	r2, r4, #1840	; 0x730
 500:	2f661b03 	svccs	0x00661b03
 504:	01043130 	tsteq	r4, r0, lsr r1
 508:	044a6203 	strbeq	r6, [sl], #-515	; 0x203
 50c:	2e180302 	cdpcs	3, 1, cr0, cr8, cr2, {0}
 510:	2e6e032f 	cdpcs	3, 6, cr0, cr14, cr15, {1}
 514:	4c821303 	stcmi	3, cr1, [r2], {3}
 518:	0447832f 	strbeq	r8, [r7], #-815	; 0x32f
 51c:	2e650301 	cdpcs	3, 6, cr0, cr5, cr1, {0}
 520:	0200b84b 	andeq	fp, r0, #4915200	; 0x4b0000
 524:	2e060104 	adfcss	f0, f6, f4
 528:	02044d06 	andeq	r4, r4, #384	; 0x180
 52c:	8101044c 	tsthi	r1, ip, asr #8
 530:	01040200 	mrseq	r0, R12_usr
 534:	b5064a06 	strlt	r4, [r6, #-2566]	; 0xa06
 538:	0e026750 	mcreq	7, 0, r6, cr2, cr0, {2}
 53c:	ec010100 	stfs	f0, [r1], {-0}
 540:	02000000 	andeq	r0, r0, #0
 544:	0000d000 	andeq	sp, r0, r0
 548:	fb010200 	blx	40d52 <__bss_end__+0x36a4a>
 54c:	01000d0e 	tsteq	r0, lr, lsl #26
 550:	00010101 	andeq	r0, r1, r1, lsl #2
 554:	00010000 	andeq	r0, r1, r0
 558:	696c0100 	stmdbvs	ip!, {r8}^
 55c:	2f006362 	svccs	0x00006362
 560:	2f727375 	svccs	0x00727375
 564:	61636f6c 	cmnvs	r3, ip, ror #30
 568:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
 56c:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
 570:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 574:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 578:	61652d65 	cmnvs	r5, r5, ror #26
 57c:	342f6962 	strtcc	r6, [pc], #-2402	; 584 <_start-0x7a7c>
 580:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 584:	3173632d 	cmncc	r3, sp, lsr #6
 588:	2f653037 	svccs	0x00653037
 58c:	2f62696c 	svccs	0x0062696c
 590:	2f636367 	svccs	0x00636367
 594:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 598:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 59c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 5a0:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 5a4:	2f332e38 	svccs	0x00332e38
 5a8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 5ac:	00656475 	rsbeq	r6, r5, r5, ror r4
 5b0:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 5b4:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
 5b8:	432f6c61 	teqmi	pc, #24832	; 0x6100
 5bc:	616c6c65 	cmnvs	ip, r5, ror #24
 5c0:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 5c4:	6f6e2d6d 	svcvs	0x006e2d6d
 5c8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 5cc:	2f696261 	svccs	0x00696261
 5d0:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 5d4:	73632d33 	cmnvc	r3, #3264	; 0xcc0
 5d8:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
 5dc:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 5e0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 5e4:	61652d65 	cmnvs	r5, r5, ror #26
 5e8:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
 5ec:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
 5f0:	00006564 	andeq	r6, r0, r4, ror #10
 5f4:	736d656d 	cmnvc	sp, #457179136	; 0x1b400000
 5f8:	632e7465 	teqvs	lr, #1694498816	; 0x65000000
 5fc:	00000100 	andeq	r0, r0, r0, lsl #2
 600:	64647473 	strbtvs	r7, [r4], #-1139	; 0x473
 604:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
 608:	00000200 	andeq	r0, r0, r0, lsl #4
 60c:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 610:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 614:	00000300 	andeq	r0, r0, r0, lsl #6
 618:	02050000 	andeq	r0, r5, #0
 61c:	00008b48 	andeq	r8, r0, r8, asr #22
 620:	2f4c1314 	svccs	0x004c1314
 624:	01040200 	mrseq	r0, R12_usr
 628:	02024d49 	andeq	r4, r2, #4672	; 0x1240
 62c:	02010100 	andeq	r0, r1, #0, 2
 630:	02000001 	andeq	r0, r0, #1
 634:	0000eb00 	andeq	lr, r0, r0, lsl #22
 638:	fb010200 	blx	40e42 <__bss_end__+0x36b3a>
 63c:	01000d0e 	tsteq	r0, lr, lsl #26
 640:	00010101 	andeq	r0, r1, r1, lsl #2
 644:	00010000 	andeq	r0, r1, r0
 648:	696c0100 	stmdbvs	ip!, {r8}^
 64c:	2f006362 	svccs	0x00006362
 650:	2f727375 	svccs	0x00727375
 654:	61636f6c 	cmnvs	r3, ip, ror #30
 658:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
 65c:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
 660:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 664:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 668:	61652d65 	cmnvs	r5, r5, ror #26
 66c:	342f6962 	strtcc	r6, [pc], #-2402	; 674 <_start-0x798c>
 670:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 674:	3173632d 	cmncc	r3, sp, lsr #6
 678:	2f653037 	svccs	0x00653037
 67c:	2f62696c 	svccs	0x0062696c
 680:	2f636367 	svccs	0x00636367
 684:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 688:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 68c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 690:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 694:	2f332e38 	svccs	0x00332e38
 698:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 69c:	00656475 	rsbeq	r6, r5, r5, ror r4
 6a0:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 6a4:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 6a8:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 6ac:	2f6e756a 	svccs	0x006e756a
 6b0:	6b736544 	blvs	1cd9bc8 <__bss_end__+0x1ccf8c0>
 6b4:	2f706f74 	svccs	0x00706f74
 6b8:	6f686373 	svcvs	0x00686373
 6bc:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 6c0:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 6c4:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 6c8:	53432f30 	movtpl	r2, #16176	; 0x3f30
 6cc:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 6d0:	3173632f 	cmncc	r3, pc, lsr #6
 6d4:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 6d8:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 6dc:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 6e0:	00697062 	rsbeq	r7, r9, r2, rrx
 6e4:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
 6e8:	2e6b746e 	cdpcs	4, 6, cr7, cr11, cr14, {3}
 6ec:	00010063 	andeq	r0, r1, r3, rrx
 6f0:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
 6f4:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
 6f8:	00020068 	andeq	r0, r2, r8, rrx
 6fc:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xc00
 700:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
 704:	003e6e69 	eorseq	r6, lr, r9, ror #28
 708:	72000000 	andvc	r0, r0, #0
 70c:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 710:	00000300 	andeq	r0, r0, r0, lsl #6
 714:	702d6176 	eorvc	r6, sp, r6, ror r1
 718:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 71c:	00682e6b 	rsbeq	r2, r8, fp, ror #28
 720:	00000001 	andeq	r0, r0, r1
 724:	68020500 	stmdavs	r2, {r8, sl}
 728:	1700008b 	strne	r0, [r0, -fp, lsl #1]
 72c:	89bf4b6b 	ldmibhi	pc!, {r0, r1, r3, r5, r6, r8, r9, fp, lr}	; <UNPREDICTABLE>
 730:	01000e02 	tsteq	r0, r2, lsl #28
 734:	00009601 	andeq	r9, r0, r1, lsl #12
 738:	6f000200 	svcvs	0x00000200
 73c:	02000000 	andeq	r0, r0, #0
 740:	0d0efb01 	vstreq	d15, [lr, #-4]
 744:	01010100 	mrseq	r0, (UNDEF: 17)
 748:	00000001 	andeq	r0, r0, r1
 74c:	01000001 	tsteq	r0, r1
 750:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 754:	73552f00 	cmpvc	r5, #0, 30
 758:	2f737265 	svccs	0x00737265
 75c:	61697262 	cmnvs	r9, r2, ror #4
 760:	6e756a6e 	vsubvs.f32	s13, s10, s29
 764:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 768:	706f746b 	rsbvc	r7, pc, fp, ror #8
 76c:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 770:	2f6c6f6f 	svccs	0x006c6f6f
 774:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 778:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 77c:	432f3032 	teqmi	pc, #50	; 0x32
 780:	30343153 	eorscc	r3, r4, r3, asr r1
 784:	73632f45 	cmnvc	r3, #276	; 0x114
 788:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 78c:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 790:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 5f4 <_start-0x7a0c>
 794:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 798:	75700000 	ldrbvc	r0, [r0, #-0]!
 79c:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
 7a0:	00000100 	andeq	r0, r0, r0, lsl #2
 7a4:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 7a8:	00020068 	andeq	r0, r2, r8, rrx
 7ac:	05000000 	streq	r0, [r0, #-0]
 7b0:	008bc002 	addeq	ip, fp, r2
 7b4:	2d4c1500 	cfstr64cs	mvdx1, [ip, #-0]
 7b8:	02040200 	andeq	r0, r4, #0, 4
 7bc:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 7c0:	02004902 	andeq	r4, r0, #32768	; 0x8000
 7c4:	2e060104 	adfcss	f0, f6, f4
 7c8:	06026b06 	streq	r6, [r2], -r6, lsl #22
 7cc:	dc010100 	stfles	f0, [r1], {-0}
 7d0:	02000001 	andeq	r0, r0, #1
 7d4:	0000df00 	andeq	sp, r0, r0, lsl #30
 7d8:	fb010200 	blx	40fe2 <__bss_end__+0x36cda>
 7dc:	01000d0e 	tsteq	r0, lr, lsl #26
 7e0:	00010101 	andeq	r0, r1, r1, lsl #2
 7e4:	00010000 	andeq	r0, r1, r0
 7e8:	696c0100 	stmdbvs	ip!, {r8}^
 7ec:	2f006362 	svccs	0x00006362
 7f0:	2f727375 	svccs	0x00727375
 7f4:	61636f6c 	cmnvs	r3, ip, ror #30
 7f8:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
 7fc:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
 800:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 804:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 808:	61652d65 	cmnvs	r5, r5, ror #26
 80c:	342f6962 	strtcc	r6, [pc], #-2402	; 814 <_start-0x77ec>
 810:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 814:	3173632d 	cmncc	r3, sp, lsr #6
 818:	2f653037 	svccs	0x00653037
 81c:	2f62696c 	svccs	0x0062696c
 820:	2f636367 	svccs	0x00636367
 824:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 828:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 82c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 830:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 834:	2f332e38 	svccs	0x00332e38
 838:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 83c:	00656475 	rsbeq	r6, r5, r5, ror r4
 840:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 844:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 848:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 84c:	2f6e756a 	svccs	0x006e756a
 850:	6b736544 	blvs	1cd9d68 <__bss_end__+0x1ccfa60>
 854:	2f706f74 	svccs	0x00706f74
 858:	6f686373 	svcvs	0x00686373
 85c:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 860:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 864:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 868:	53432f30 	movtpl	r2, #16176	; 0x3f30
 86c:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 870:	3173632f 	cmncc	r3, pc, lsr #6
 874:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 878:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 87c:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 880:	00697062 	rsbeq	r7, r9, r2, rrx
 884:	2d617600 	stclcs	6, cr7, [r1, #-0]
 888:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 88c:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
 890:	00000100 	andeq	r0, r0, r0, lsl #2
 894:	61647473 	smcvs	18243	; 0x4743
 898:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
 89c:	00000200 	andeq	r0, r0, r0, lsl #4
 8a0:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 8a4:	00030068 	andeq	r0, r3, r8, rrx
 8a8:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xc00
 8ac:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
 8b0:	003e6e69 	eorseq	r6, lr, r9, ror #28
 8b4:	00000000 	andeq	r0, r0, r0
 8b8:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
 8bc:	0300008b 	movweq	r0, #139	; 0x8b
 8c0:	a5010126 	strge	r0, [r1, #-294]	; 0x126
 8c4:	002d3113 	eoreq	r3, sp, r3, lsl r1
 8c8:	2f020402 	svccs	0x00020402
 8cc:	02040200 	andeq	r0, r4, #0, 4
 8d0:	0402002d 	streq	r0, [r2], #-45	; 0x2d
 8d4:	02002f02 	andeq	r2, r0, #2, 30
 8d8:	4c2d0104 	stfmis	f0, [sp], #-16
 8dc:	4b14304c 	blmi	50ca14 <__bss_end__+0x50270c>
 8e0:	02004f2f 	andeq	r4, r0, #47, 30	; 0xbc
 8e4:	00670204 	rsbeq	r0, r7, r4, lsl #4
 8e8:	65010402 	strvs	r0, [r1, #-1026]	; 0x402
 8ec:	a0304d4c 	eorsge	r4, r0, ip, asr #26
 8f0:	0230312f 	eorseq	r3, r0, #-1073741813	; 0xc000000b
 8f4:	2d841626 	stccs	6, cr1, [r4, #152]	; 0x98
 8f8:	0402002c 	streq	r0, [r2], #-44	; 0x2c
 8fc:	02003001 	andeq	r3, r0, #1
 900:	06330104 	ldrteq	r0, [r3], -r4, lsl #2
 904:	04020066 	streq	r0, [r2], #-102	; 0x66
 908:	02002e01 	andeq	r2, r0, #1, 28
 90c:	08060104 	stmdaeq	r6, {r2, r8}
 910:	032f6721 	teqeq	pc, #8650752	; 0x840000
 914:	13038273 	movwne	r8, #12915	; 0x3273
 918:	0402002e 	streq	r0, [r2], #-46	; 0x2e
 91c:	002e0601 	eoreq	r0, lr, r1, lsl #12
 920:	06010402 	streq	r0, [r1], -r2, lsl #8
 924:	034b6a9f 	movteq	r6, #47775	; 0xba9f
 928:	21032e67 	tstcs	r3, r7, ror #28
 92c:	0402002e 	streq	r0, [r2], #-46	; 0x2e
 930:	002e0601 	eoreq	r0, lr, r1, lsl #12
 934:	06010402 	streq	r0, [r1], -r2, lsl #8
 938:	0402009f 	streq	r0, [r2], #-159	; 0x9f
 93c:	f3bd6a01 	vtbl.8	d6, {d13-d15}, d1
 940:	087fa603 	ldmdaeq	pc!, {r0, r1, r9, sl, sp, pc}^	; <UNPREDICTABLE>
 944:	02002f20 	andeq	r2, r0, #32, 30	; 0x80
 948:	4a060104 	bmi	180d60 <__bss_end__+0x176a58>
 94c:	2f4bbb06 	svccs	0x004bbb06
 950:	f200da03 	vpmax.s8	d13, d0, d3
 954:	31484c83 	smlalbbcc	r4, r8, r3, ip
 958:	4b842f2f 	blmi	fe10c61c <__bss_end__+0xfe102314>
 95c:	314d2d2f 	cmpcc	sp, pc, lsr #26
 960:	00832f30 	addeq	r2, r3, r0, lsr pc
 964:	2c010402 	cfstrscs	mvf0, [r1], {2}
 968:	040200be 	streq	r0, [r2], #-190	; 0xbe
 96c:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 970:	163602bc 			; <UNDEFINED> instruction: 0x163602bc
 974:	08ba0e03 	ldmeq	sl!, {r0, r1, r9, sl, fp}
 978:	21083021 	tstcs	r8, r1, lsr #32
 97c:	30210831 	eorcc	r0, r1, r1, lsr r8
 980:	4b302108 	blmi	c08da8 <__bss_end__+0xbfeaa0>
 984:	30210830 	eorcc	r0, r1, r0, lsr r8
 988:	002f31d9 	ldrdeq	r3, [pc], -r9	; <UNPREDICTABLE>
 98c:	65010402 	strvs	r0, [r1, #-1026]	; 0x402
 990:	02040200 	andeq	r0, r4, #0, 4
 994:	02004a06 	andeq	r4, r0, #24576	; 0x6000
 998:	03060104 	movweq	r0, #24836	; 0x6104
 99c:	02006642 	andeq	r6, r0, #69206016	; 0x4200000
 9a0:	66060204 	strvs	r0, [r6], -r4, lsl #4
 9a4:	00c20306 	sbceq	r0, r2, r6, lsl #6
 9a8:	1002684a 	andne	r6, r2, sl, asr #16
 9ac:	93010100 	movwls	r0, #4352	; 0x1100
 9b0:	02000000 	andeq	r0, r0, #0
 9b4:	00007d00 	andeq	r7, r0, r0, lsl #26
 9b8:	fb010200 	blx	411c2 <__bss_end__+0x36eba>
 9bc:	01000d0e 	tsteq	r0, lr, lsl #26
 9c0:	00010101 	andeq	r0, r1, r1, lsl #2
 9c4:	00010000 	andeq	r0, r1, r0
 9c8:	73630100 	cmnvc	r3, #0, 2
 9cc:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 9d0:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 9d4:	73552f00 	cmpvc	r5, #0, 30
 9d8:	2f737265 	svccs	0x00737265
 9dc:	61697262 	cmnvs	r9, r2, ror #4
 9e0:	6e756a6e 	vsubvs.f32	s13, s10, s29
 9e4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 9e8:	706f746b 	rsbvc	r7, pc, fp, ror #8
 9ec:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 9f0:	2f6c6f6f 	svccs	0x006c6f6f
 9f4:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 9f8:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 9fc:	432f3032 	teqmi	pc, #50	; 0x32
 a00:	30343153 	eorscc	r3, r4, r3, asr r1
 a04:	73632f45 	cmnvc	r3, #276	; 0x114
 a08:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 a0c:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 a10:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 874 <_start-0x778c>
 a14:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 a18:	6c630000 	stclvs	0, cr0, [r3], #-0
 a1c:	2d6e6165 	stfcse	f6, [lr, #-404]!	; 0xfffffe6c
 a20:	6f626572 	svcvs	0x00626572
 a24:	632e746f 	teqvs	lr, #1862270976	; 0x6f000000
 a28:	00000100 	andeq	r0, r0, r0, lsl #2
 a2c:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 a30:	00020068 	andeq	r0, r2, r8, rrx
 a34:	05000000 	streq	r0, [r0, #-0]
 a38:	0090e402 	addseq	lr, r0, r2, lsl #8
 a3c:	832f1500 	teqhi	pc, #0, 10
 a40:	0006024b 	andeq	r0, r6, fp, asr #4
 a44:	00960101 	addseq	r0, r6, r1, lsl #2
 a48:	00020000 	andeq	r0, r2, r0
 a4c:	00000077 	andeq	r0, r0, r7, ror r0
 a50:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 a54:	0101000d 	tsteq	r1, sp
 a58:	00000101 	andeq	r0, r0, r1, lsl #2
 a5c:	00000100 	andeq	r0, r0, r0, lsl #2
 a60:	31736301 	cmncc	r3, r1, lsl #6
 a64:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 a68:	00637273 	rsbeq	r7, r3, r3, ror r2
 a6c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 a70:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 a74:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 a78:	2f6e756a 	svccs	0x006e756a
 a7c:	6b736544 	blvs	1cd9f94 <__bss_end__+0x1ccfc8c>
 a80:	2f706f74 	svccs	0x00706f74
 a84:	6f686373 	svcvs	0x00686373
 a88:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 a8c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 a90:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 a94:	53432f30 	movtpl	r2, #16176	; 0x3f30
 a98:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 a9c:	3173632f 	cmncc	r3, pc, lsr #6
 aa0:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 aa4:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 aa8:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 aac:	00697062 	rsbeq	r7, r9, r2, rrx
 ab0:	74736300 	ldrbtvc	r6, [r3], #-768	; 0x300
 ab4:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
 ab8:	00010063 	andeq	r0, r1, r3, rrx
 abc:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 ac0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 ac4:	00000000 	andeq	r0, r0, r0
 ac8:	910c0205 	tstls	ip, r5, lsl #4
 acc:	32140000 	andscc	r0, r4, #0
 ad0:	2f2d2f31 	svccs	0x002d2f31
 ad4:	01040200 	mrseq	r0, R12_usr
 ad8:	022f4d49 	eoreq	r4, pc, #4672	; 0x1240
 adc:	01010006 	tsteq	r1, r6
 ae0:	00000099 	muleq	r0, r9, r0
 ae4:	00770002 	rsbseq	r0, r7, r2
 ae8:	01020000 	mrseq	r0, (UNDEF: 2)
 aec:	000d0efb 	strdeq	r0, [sp], -fp
 af0:	01010101 	tsteq	r1, r1, lsl #2
 af4:	01000000 	mrseq	r0, (UNDEF: 0)
 af8:	63010000 	movwvs	r0, #4096	; 0x1000
 afc:	30343173 	eorscc	r3, r4, r3, ror r1
 b00:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 b04:	552f0063 	strpl	r0, [pc, #-99]!	; aa9 <_start-0x7557>
 b08:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 b0c:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 b10:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 b14:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 b18:	6f746b73 	svcvs	0x00746b73
 b1c:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 b20:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 988 <_start-0x7678>
 b24:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 b28:	31726574 	cmncc	r2, r4, ror r5
 b2c:	2f303239 	svccs	0x00303239
 b30:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 b34:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 b38:	30343173 	eorscc	r3, r4, r3, ror r1
 b3c:	30322d65 	eorscc	r2, r2, r5, ror #26
 b40:	2f6e6977 	svccs	0x006e6977
 b44:	7062696c 	rsbvc	r6, r2, ip, ror #18
 b48:	72000069 	andvc	r0, r0, #105	; 0x69
 b4c:	6f6f6265 	svcvs	0x006f6265
 b50:	00632e74 	rsbeq	r2, r3, r4, ror lr
 b54:	72000001 	andvc	r0, r0, #1
 b58:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 b5c:	00000200 	andeq	r0, r0, r0, lsl #4
 b60:	02050000 	andeq	r0, r5, #0
 b64:	00009140 	andeq	r9, r0, r0, asr #2
 b68:	14010d03 	strne	r0, [r1], #-3331	; 0xd03
 b6c:	15852f31 	strne	r2, [r5, #3889]	; 0xf31
 b70:	2f4d4b2f 	svccs	0x004d4b2f
 b74:	67523567 	ldrbvs	r3, [r2, -r7, ror #10]
 b78:	01001002 	tsteq	r0, r2
 b7c:	0000a001 	andeq	sl, r0, r1
 b80:	76000200 	strvc	r0, [r0], -r0, lsl #4
 b84:	02000000 	andeq	r0, r0, #0
 b88:	0d0efb01 	vstreq	d15, [lr, #-4]
 b8c:	01010100 	mrseq	r0, (UNDEF: 17)
 b90:	00000001 	andeq	r0, r0, r1
 b94:	01000001 	tsteq	r0, r1
 b98:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 b9c:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
 ba0:	2f006372 	svccs	0x00006372
 ba4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 ba8:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 bac:	6a6e6169 	bvs	1b99158 <__bss_end__+0x1b8ee50>
 bb0:	442f6e75 	strtmi	r6, [pc], #-3701	; bb8 <_start-0x7448>
 bb4:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 bb8:	732f706f 	teqvc	pc, #111	; 0x6f
 bbc:	6f6f6863 	svcvs	0x006f6863
 bc0:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 bc4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 bc8:	30323931 	eorscc	r3, r2, r1, lsr r9
 bcc:	3153432f 	cmpcc	r3, pc, lsr #6
 bd0:	2f453034 	svccs	0x00453034
 bd4:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 bd8:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 bdc:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 be0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 be4:	00006970 	andeq	r6, r0, r0, ror r9
 be8:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 bec:	00632e72 	rsbeq	r2, r3, r2, ror lr
 bf0:	72000001 	andvc	r0, r0, #1
 bf4:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 bf8:	00000200 	andeq	r0, r0, r0, lsl #4
 bfc:	02050000 	andeq	r0, r5, #0
 c00:	000091b4 			; <UNDEFINED> instruction: 0x000091b4
 c04:	2d2f1316 	stccs	3, cr1, [pc, #-88]!	; bb4 <_start-0x744c>
 c08:	01040200 	mrseq	r0, R12_usr
 c0c:	68062e06 	stmdavs	r6, {r1, r2, r9, sl, fp, sp}
 c10:	4c4b2f31 	mcrrmi	15, 3, r2, fp, cr1
 c14:	6a2f4c4b 	bvs	bd3d48 <__bss_end__+0xbc9a40>
 c18:	2f842f2f 	svccs	0x00842f2f
 c1c:	01000802 	tsteq	r0, r2, lsl #16
 c20:	00016b01 	andeq	r6, r1, r1, lsl #22
 c24:	20000200 	andcs	r0, r0, r0, lsl #4
 c28:	02000001 	andeq	r0, r0, #1
 c2c:	0d0efb01 	vstreq	d15, [lr, #-4]
 c30:	01010100 	mrseq	r0, (UNDEF: 17)
 c34:	00000001 	andeq	r0, r0, r1
 c38:	01000001 	tsteq	r0, r1
 c3c:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
 c40:	2f006372 	svccs	0x00006372
 c44:	2f727375 	svccs	0x00727375
 c48:	61636f6c 	cmnvs	r3, ip, ror #30
 c4c:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
 c50:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
 c54:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 c58:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 c5c:	61652d65 	cmnvs	r5, r5, ror #26
 c60:	342f6962 	strtcc	r6, [pc], #-2402	; c68 <_start-0x7398>
 c64:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 c68:	3173632d 	cmncc	r3, sp, lsr #6
 c6c:	2f653037 	svccs	0x00653037
 c70:	2f62696c 	svccs	0x0062696c
 c74:	2f636367 	svccs	0x00636367
 c78:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 c7c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 c80:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 c84:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 c88:	2f332e38 	svccs	0x00332e38
 c8c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 c90:	00656475 	rsbeq	r6, r5, r5, ror r4
 c94:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 c98:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 c9c:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 ca0:	2f6e756a 	svccs	0x006e756a
 ca4:	6b736544 	blvs	1cda1bc <__bss_end__+0x1ccfeb4>
 ca8:	2f706f74 	svccs	0x00706f74
 cac:	6f686373 	svcvs	0x00686373
 cb0:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 cb4:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 cb8:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 cbc:	53432f30 	movtpl	r2, #16176	; 0x3f30
 cc0:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 cc4:	3173632f 	cmncc	r3, pc, lsr #6
 cc8:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 ccc:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 cd0:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 cd4:	00697062 	rsbeq	r7, r9, r2, rrx
 cd8:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 cdc:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
 ce0:	432f6c61 	teqmi	pc, #24832	; 0x6100
 ce4:	616c6c65 	cmnvs	ip, r5, ror #24
 ce8:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 cec:	6f6e2d6d 	svcvs	0x006e2d6d
 cf0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 cf4:	2f696261 	svccs	0x00696261
 cf8:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 cfc:	73632d33 	cmnvc	r3, #3264	; 0xcc0
 d00:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
 d04:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 d08:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 d0c:	61652d65 	cmnvs	r5, r5, ror #26
 d10:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
 d14:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
 d18:	00006564 	andeq	r6, r0, r4, ror #10
 d1c:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
 d20:	2e636f6c 	cdpcs	15, 6, cr6, cr3, cr12, {3}
 d24:	00010063 	andeq	r0, r1, r3, rrx
 d28:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
 d2c:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
 d30:	00020068 	andeq	r0, r2, r8, rrx
 d34:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 d38:	0300682e 	movweq	r6, #2094	; 0x82e
 d3c:	74730000 	ldrbtvc	r0, [r3], #-0
 d40:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
 d44:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
 d48:	00000000 	andeq	r0, r0, r0
 d4c:	95080205 	strls	r0, [r8, #-517]	; 0x205
 d50:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
 d54:	02002f01 	andeq	r2, r0, #1, 30
 d58:	82060104 	andhi	r0, r6, #4, 2
 d5c:	4b4bbc06 	blmi	12efd7c <__bss_end__+0x12e5a74>
 d60:	2fbe4d4b 	svccs	0x00be4d4b
 d64:	01040200 	mrseq	r0, R12_usr
 d68:	bc068206 	sfmlt	f0, 1, [r6], {6}
 d6c:	02004b4b 	andeq	r4, r0, #76800	; 0x12c00
 d70:	4a060104 	bmi	181188 <__bss_end__+0x176e80>
 d74:	834bbb06 	movthi	fp, #47878	; 0xbb06
 d78:	0a032f30 	beq	cca40 <__bss_end__+0xc2738>
 d7c:	02002fba 	andeq	r2, r0, #744	; 0x2e8
 d80:	82060104 	andhi	r0, r6, #4, 2
 d84:	f967bb06 			; <UNDEFINED> instruction: 0xf967bb06
 d88:	0214c213 	andseq	ip, r4, #805306369	; 0x30000001
 d8c:	01010008 	tsteq	r1, r8
 d90:	00000086 	andeq	r0, r0, r6, lsl #1
 d94:	00720002 	rsbseq	r0, r2, r2
 d98:	01020000 	mrseq	r0, (UNDEF: 2)
 d9c:	000d0efb 	strdeq	r0, [sp], -fp
 da0:	01010101 	tsteq	r1, r1, lsl #2
 da4:	01000000 	mrseq	r0, (UNDEF: 0)
 da8:	6c010000 	stcvs	0, cr0, [r1], {-0}
 dac:	00636269 	rsbeq	r6, r3, r9, ror #4
 db0:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 db4:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 db8:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 dbc:	2f6e756a 	svccs	0x006e756a
 dc0:	6b736544 	blvs	1cda2d8 <__bss_end__+0x1ccffd0>
 dc4:	2f706f74 	svccs	0x00706f74
 dc8:	6f686373 	svcvs	0x00686373
 dcc:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 dd0:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 dd4:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 dd8:	53432f30 	movtpl	r2, #16176	; 0x3f30
 ddc:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 de0:	3173632f 	cmncc	r3, pc, lsr #6
 de4:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 de8:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 dec:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 df0:	00697062 	rsbeq	r7, r9, r2, rrx
 df4:	74757000 	ldrbtvc	r7, [r5], #-0
 df8:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 dfc:	0100632e 	tsteq	r0, lr, lsr #6
 e00:	70720000 	rsbsvc	r0, r2, r0
 e04:	00682e69 	rsbeq	r2, r8, r9, ror #28
 e08:	00000002 	andeq	r0, r0, r2
 e0c:	80020500 	andhi	r0, r2, r0, lsl #10
 e10:	14000096 	strne	r0, [r0], #-150	; 0x96
 e14:	0006024a 	andeq	r0, r6, sl, asr #4
 e18:	Address 0x0000000000000e18 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	65742d32 	ldrbvs	r2, [r4, #-3378]!	; 0xd32
   4:	632e7473 	teqvs	lr, #1929379840	; 0x73000000
   8:	78656e00 	stmdavc	r5!, {r9, sl, fp, sp, lr}^
   c:	6d6b0074 	stclvs	0, cr0, [fp, #-464]!	; 0xfffffe30
  10:	6f6c6c61 	svcvs	0x006c6c61
  14:	6c615f63 	stclvs	15, cr5, [r1], #-396	; 0xfffffe74
  18:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
  1c:	70720064 	rsbsvc	r0, r2, r4, rrx
  20:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xf69
  24:	746f6f62 	strbtvc	r6, [pc], #-3938	; 2c <_start-0x7fd4>
  28:	554e4700 	strbpl	r4, [lr, #-1792]	; 0x700
  2c:	34204320 	strtcc	r4, [r0], #-800	; 0x320
  30:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
  34:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
  38:	613d7570 	teqvs	sp, r0, ror r5
  3c:	31316d72 	teqcc	r1, r2, ror sp
  40:	7a6a3637 	bvc	1a8d924 <__bss_end__+0x1a8361c>
  44:	20732d66 	rsbscs	r2, r3, r6, ror #26
  48:	75746d2d 	ldrbvc	r6, [r4, #-3373]!	; 0xd2d
  4c:	613d656e 	teqvs	sp, lr, ror #10
  50:	31316d72 	teqcc	r1, r2, ror sp
  54:	7a6a3637 	bvc	1a8d938 <__bss_end__+0x1a83630>
  58:	20732d66 	rsbscs	r2, r3, r6, ror #26
  5c:	6467672d 	strbtvs	r6, [r7], #-1837	; 0x72d
  60:	4f2d2062 	svcmi	0x002d2062
  64:	732d2067 	teqvc	sp, #103	; 0x67
  68:	673d6474 			; <UNDEFINED> instruction: 0x673d6474
  6c:	3939756e 	ldmdbcc	r9!, {r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}
  70:	66662d20 	strbtvs	r2, [r6], -r0, lsr #26
  74:	73656572 	cmnvc	r5, #478150656	; 0x1c800000
  78:	646e6174 	strbtvs	r6, [lr], #-372	; 0x174
  7c:	00676e69 	rsbeq	r6, r7, r9, ror #28
  80:	6d746f6e 	ldclvs	15, cr6, [r4, #-440]!	; 0xfffffe48
  84:	006e6961 	rsbeq	r6, lr, r1, ror #18
  88:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
  8c:	6175006b 	cmnvs	r5, fp, rrx
  90:	695f7472 	ldmdbvs	pc, {r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
  94:	0074696e 	rsbseq	r6, r4, lr, ror #18
  98:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  9c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
  a0:	61686320 	cmnvs	r8, r0, lsr #6
  a4:	6c630072 	stclvs	0, cr0, [r3], #-456	; 0xfffffe38
  a8:	5f6e6165 	svcpl	0x006e6165
  ac:	6f626572 	svcvs	0x00626572
  b0:	2f00746f 	svccs	0x0000746f
  b4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  b8:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
  bc:	6a6e6169 	bvs	1b98668 <__bss_end__+0x1b8e360>
  c0:	442f6e75 	strtmi	r6, [pc], #-3701	; c8 <_start-0x7f38>
  c4:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
  c8:	732f706f 	teqvc	pc, #111	; 0x6f
  cc:	6f6f6863 	svcvs	0x006f6863
  d0:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
  d4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
  d8:	30323931 	eorscc	r3, r2, r1, lsr r9
  dc:	3153432f 	cmpcc	r3, pc, lsr #6
  e0:	2f453034 	svccs	0x00453034
  e4:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
  e8:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
  ec:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
  f0:	62616c2f 	rsbvs	r6, r1, #12032	; 0x2f00
  f4:	2d362f73 	ldccs	15, cr2, [r6, #-460]!	; 0xfffffe34
  f8:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
  fc:	2f736461 	svccs	0x00736461
 100:	68742d32 	ldmdavs	r4!, {r1, r4, r5, r8, sl, fp, sp}^
 104:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 108:	656e2e73 	strbvs	r2, [lr, #-3699]!	; 0xe73
 10c:	68730077 	ldmdavs	r3!, {r0, r1, r2, r4, r5, r6}^
 110:	2074726f 	rsbscs	r7, r4, pc, ror #4
 114:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 118:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
 11c:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
 120:	465f5f00 	ldrbmi	r5, [pc], -r0, lsl #30
 124:	54434e55 	strbpl	r4, [r3], #-3669	; 0xe55
 128:	5f4e4f49 	svcpl	0x004e4f49
 12c:	7473005f 	ldrbtvc	r0, [r3], #-95	; 0x5f
 130:	5f65726f 	svcpl	0x0065726f
 134:	5f656e6f 	svcpl	0x00656e6f
 138:	006d7361 	rsbeq	r7, sp, r1, ror #6
 13c:	5f676572 	svcpl	0x00676572
 140:	65766173 	ldrbvs	r6, [r6, #-371]!	; 0x173
 144:	6572615f 	ldrbvs	r6, [r2, #-351]!	; 0x15f
 148:	6f6c0061 	svcvs	0x006c0061
 14c:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
 150:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 154:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 158:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
 15c:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
 160:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 164:	7268745f 	rsbvc	r7, r8, #1593835520	; 0x5f000000
 168:	5f646165 	svcpl	0x00646165
 16c:	69730074 	ldmdbvs	r3!, {r2, r4, r5, r6}^
 170:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
 174:	6c006570 	cfstr32vs	mvfx6, [r0], {112}	; 0x70
 178:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 17c:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 180:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
 184:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 188:	7268745f 	rsbvc	r7, r8, #1593835520	; 0x5f000000
 18c:	00646165 	rsbeq	r6, r4, r5, ror #2
 190:	73676572 	cmnvc	r7, #478150656	; 0x1c800000
 194:	6f687300 	svcvs	0x00687300
 198:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
 19c:	6300746e 	movwvs	r7, #1134	; 0x46e
 1a0:	6b636568 	blvs	18d9748 <__bss_end__+0x18cf440>
 1a4:	6c61635f 	stclvs	3, cr6, [r1], #-380	; 0xfffffe84
 1a8:	5f65656c 	svcpl	0x0065656c
 1ac:	65766173 	ldrbvs	r6, [r6, #-371]!	; 0x173
 1b0:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
 1b4:	725f746e 	subsvc	r7, pc, #1845493760	; 0x6e000000
 1b8:	735f6765 	cmpvc	pc, #26476544	; 0x1940000
 1bc:	00657661 	rsbeq	r7, r5, r1, ror #12
 1c0:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 1c4:	6e615f74 	mcrvs	15, 3, r5, cr1, cr4, {3}
 1c8:	69645f64 	stmdbvs	r4!, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 1cc:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
 1d0:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
 1d4:	6b00745f 	blvs	1d358 <__bss_end__+0x13050>
 1d8:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 1dc:	695f636f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 1e0:	0074696e 	rsbseq	r6, r4, lr, ror #18
 1e4:	75705f51 	ldrbvc	r5, [r0, #-3921]!	; 0xf51
 1e8:	72006873 	andvc	r6, r0, #7536640	; 0x730000
 1ec:	635f6970 	cmpvs	pc, #112, 18	; 0x1c0000
 1f0:	745f7275 	ldrbvc	r7, [pc], #-629	; 1f8 <_start-0x7e08>
 1f4:	61657268 	cmnvs	r5, r8, ror #4
 1f8:	70720064 	rsbsvc	r0, r2, r4, rrx
 1fc:	68742d69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, sl, fp, sp}^
 200:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 204:	7200632e 	andvc	r6, r0, #-1207959552	; 0xb8000000
 208:	6a5f6970 	bvs	17da7d0 <__bss_end__+0x17d04c8>
 20c:	006e696f 	rsbeq	r6, lr, pc, ror #18
 210:	74697865 	strbtvc	r7, [r9], #-2149	; 0x865
 214:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xf63
 218:	725f6e00 	subsvc	r6, pc, #0, 28
 21c:	6e006e75 	mcrvs	14, 0, r6, cr0, cr5, {3}
 220:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0x65f
 224:	70720065 	rsbsvc	r0, r2, r5, rrx
 228:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
 22c:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
 230:	635f6c61 	cmpvs	pc, #24832	; 0x6100
 234:	6b636568 	blvs	18d97dc <__bss_end__+0x18cf4d4>
 238:	6e5f5100 	rdfvse	f5, f7, f0
 23c:	6d656c65 	stclvs	12, cr6, [r5, #-404]!	; 0xfffffe6c
 240:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 244:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 248:	72745f74 	rsbsvc	r5, r4, #116, 30	; 0x1d0
 24c:	6f706d61 	svcvs	0x00706d61
 250:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0x96c
 254:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 258:	6174735f 	cmnvs	r4, pc, asr r3
 25c:	635f6b63 	cmpvs	pc, #101376	; 0x18c00
 260:	6b636568 	blvs	18d9808 <__bss_end__+0x18cf500>
 264:	65726600 	ldrbvs	r6, [r2, #-1536]!	; 0x600
 268:	72007165 	andvc	r7, r0, #1073741849	; 0x40000019
 26c:	655f6970 	ldrbvs	r6, [pc, #-2416]	; fffff904 <__bss_end__+0xffff55fc>
 270:	74636178 	strbtvc	r6, [r3], #-376	; 0x178
 274:	656c735f 	strbvs	r7, [ip, #-863]!	; 0x35f
 278:	51007065 	tstpl	r0, r5, rrx
 27c:	706d655f 	rsbvc	r6, sp, pc, asr r5
 280:	72007974 	andvc	r7, r0, #116, 18	; 0x1d0000
 284:	795f6970 	ldmdbvc	pc, {r4, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
 288:	646c6569 	strbtvs	r6, [ip], #-1385	; 0x569
 28c:	705f5100 	subsvc	r5, pc, r0, lsl #2
 290:	7300706f 	movwvc	r7, #111	; 0x6f
 294:	64656863 	strbtvs	r6, [r5], #-2147	; 0x863
 298:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
 29c:	7268745f 	rsbvc	r7, r8, #1593835520	; 0x5f000000
 2a0:	00646165 	rsbeq	r6, r4, r5, ror #2
 2a4:	6c696174 	stfvse	f6, [r9], #-464	; 0xfffffe30
 2a8:	5f687400 	svcpl	0x00687400
 2ac:	6f6c6c61 	svcvs	0x006c6c61
 2b0:	68740063 	ldmdavs	r4!, {r0, r1, r5, r6}^
 2b4:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0x65f
 2b8:	5f510065 	svcpl	0x00510065
 2bc:	65707061 	ldrbvs	r7, [r0, #-97]!	; 0x61
 2c0:	7200646e 	andvc	r6, r0, #1845493760	; 0x6e000000
 2c4:	665f6970 			; <UNDEFINED> instruction: 0x665f6970
 2c8:	006b726f 	rsbeq	r7, fp, pc, ror #4
 2cc:	64616568 	strbtvs	r6, [r1], #-1384	; 0x568
 2d0:	6e757200 	cdpvs	2, 7, cr7, cr5, cr0, {0}
 2d4:	70720071 	rsbsvc	r0, r2, r1, ror r0
 2d8:	68745f69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 2dc:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 2e0:	6174735f 	cmnvs	r4, pc, asr r3
 2e4:	6e007472 	mcrvs	4, 0, r7, cr0, cr2, {3}
 2e8:	6f6c6c61 	svcvs	0x006c6c61
 2ec:	00646563 	rsbeq	r6, r4, r3, ror #10
 2f0:	5f697072 	svcpl	0x00697072
 2f4:	74697865 	strbtvc	r7, [r9], #-2149	; 0x865
 2f8:	72696300 	rsbvc	r6, r9, #0, 6
 2fc:	616c7563 	cmnvs	ip, r3, ror #10
 300:	00632e72 	rsbeq	r2, r3, r2, ror lr
 304:	705f7163 	subsvc	r7, pc, r3, ror #2
 308:	6e5f706f 	cdpvs	0, 5, cr7, cr15, cr15, {3}
 30c:	6c626e6f 	stclvs	14, cr6, [r2], #-444	; 0xfffffe44
 310:	006b636f 	rsbeq	r6, fp, pc, ror #6
 314:	705f7163 	subsvc	r7, pc, r3, ror #2
 318:	6e5f706f 	cdpvs	0, 5, cr7, cr15, cr15, {3}
 31c:	626f6e5f 	rsbvs	r6, pc, #1520	; 0x5f0
 320:	6f006b6c 	svcvs	0x00006b6c
 324:	66726576 			; <UNDEFINED> instruction: 0x66726576
 328:	00776f6c 	rsbseq	r6, r7, ip, ror #30
 32c:	61746164 	cmnvs	r4, r4, ror #2
 330:	65716300 	ldrbvs	r6, [r1, #-768]!	; 0x300
 334:	7300745f 	movwvc	r7, #1119	; 0x45f
 338:	5f657a69 	svcpl	0x00657a69
 33c:	71630074 	smcvc	12292	; 0x3004
 340:	6565705f 	strbvs	r7, [r5, #-95]!	; 0x5f
 344:	006e5f6b 	rsbeq	r5, lr, fp, ror #30
 348:	6f727265 	svcvs	0x00727265
 34c:	665f7372 			; <UNDEFINED> instruction: 0x665f7372
 350:	6c617461 	cfstrdvs	mvd7, [r1], #-388	; 0xfffffe7c
 354:	6300705f 	movwvs	r7, #95	; 0x5f
 358:	6f705f71 	svcvs	0x00705f71
 35c:	656d0070 	strbvs	r0, [sp, #-112]!	; 0x70
 360:	7465736d 	strbtvc	r7, [r5], #-877	; 0x36d
 364:	5f716300 	svcpl	0x00716300
 368:	6170736e 	cmnvs	r0, lr, ror #6
 36c:	63006563 	movwvs	r6, #1379	; 0x563
 370:	6e695f71 	mcrvs	15, 3, r5, cr9, cr1, {3}
 374:	63007469 	movwvs	r7, #1129	; 0x469
 378:	6f705f71 	svcvs	0x00705f71
 37c:	006e5f70 	rsbeq	r5, lr, r0, ror pc
 380:	705f7163 	subsvc	r7, pc, r3, ror #2
 384:	00687375 	rsbeq	r7, r8, r5, ror r3
 388:	705f7163 	subsvc	r7, pc, r3, ror #2
 38c:	5f687375 	svcpl	0x00687375
 390:	7163006e 	cmnvc	r3, lr, rrx
 394:	706d655f 	rsbvc	r6, sp, pc, asr r5
 398:	66007974 			; <UNDEFINED> instruction: 0x66007974
 39c:	65636e65 	strbvs	r6, [r3, #-3685]!	; 0xe65
 3a0:	5f716300 	svcpl	0x00716300
 3a4:	656c656e 	strbvs	r6, [ip, #-1390]!	; 0x56e
 3a8:	5f63006d 	svcpl	0x0063006d
 3ac:	00667562 	rsbeq	r7, r6, r2, ror #10
 3b0:	665f7163 	ldrbvs	r7, [pc], -r3, ror #2
 3b4:	006c6c75 	rsbeq	r6, ip, r5, ror ip
 3b8:	705f7163 	subsvc	r7, pc, r3, ror #2
 3bc:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 3c0:	5f716300 	svcpl	0x00716300
 3c4:	63006b6f 	movwvs	r6, #2927	; 0xb6f
 3c8:	00745f71 	rsbseq	r5, r4, r1, ror pc
 3cc:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 3d0:	6d656d2f 	stclvs	13, cr6, [r5, #-188]!	; 0xffffff44
 3d4:	2e746573 	mrccs	5, 3, r6, cr4, cr3, {3}
 3d8:	552f0063 	strpl	r0, [pc, #-99]!	; 37d <_start-0x7c83>
 3dc:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 3e0:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 3e4:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 3e8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 3ec:	6f746b73 	svcvs	0x00746b73
 3f0:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 3f4:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 25c <_start-0x7da4>
 3f8:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 3fc:	31726574 	cmncc	r2, r4, ror r5
 400:	2f303239 	svccs	0x00303239
 404:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 408:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 40c:	30343173 	eorscc	r3, r4, r3, ror r1
 410:	30322d65 	eorscc	r2, r2, r5, ror #26
 414:	2f6e6977 	svccs	0x006e6977
 418:	7062696c 	rsbvc	r6, r2, ip, ror #18
 41c:	5f5f0069 	svcpl	0x005f0069
 420:	63756e67 	cmnvs	r5, #1648	; 0x670
 424:	5f61765f 	svcpl	0x0061765f
 428:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
 42c:	62696c00 	rsbvs	r6, r9, #0, 24
 430:	72702f63 	rsbsvc	r2, r0, #396	; 0x18c
 434:	6b746e69 	blvs	1d1bde0 <__bss_end__+0x1d11ad8>
 438:	7600632e 	strvc	r6, [r0], -lr, lsr #6
 43c:	72705f61 	rsbsvc	r5, r0, #388	; 0x184
 440:	6b746e69 	blvs	1d1bdec <__bss_end__+0x1d11ae4>
 444:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
 448:	696c5f61 	stmdbvs	ip!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
 44c:	61007473 	tstvs	r0, r3, ror r4
 450:	00736772 	rsbseq	r6, r3, r2, ror r7
 454:	70615f5f 	rsbvc	r5, r1, pc, asr pc
 458:	62696c00 	rsbvs	r6, r9, #0, 24
 45c:	75702f63 	ldrbvc	r2, [r0, #-3939]!	; 0xf63
 460:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
 464:	746e6900 	strbtvc	r6, [lr], #-2304	; 0x900
 468:	616e7265 	cmnvs	lr, r5, ror #4
 46c:	75705f6c 	ldrbvc	r5, [r0, #-3948]!	; 0xf6c
 470:	72006b74 	andvc	r6, r0, #116, 22	; 0x1d000
 474:	705f6970 	subsvc	r6, pc, r0, ror r9	; <UNPREDICTABLE>
 478:	68637475 	stmdavs	r3!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
 47c:	6e007261 	cdpvs	2, 0, cr7, cr0, cr1, {3}
 480:	705f6765 	subsvc	r6, pc, r5, ror #14
 484:	76657200 	strbtvc	r7, [r5], -r0, lsl #4
 488:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0x265
 48c:	64736900 	ldrbtvs	r6, [r3], #-2304	; 0x900
 490:	74696769 	strbtvc	r6, [r9], #-1897	; 0x769
 494:	74757000 	ldrbtvc	r7, [r5], #-0
 498:	70665f73 	rsbvc	r5, r6, r3, ror pc
 49c:	73616200 	cmnvc	r1, #0, 4
 4a0:	69730065 	ldmdbvs	r3!, {r0, r2, r5, r6}^
 4a4:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
 4a8:	6c00705f 	stcvs	0, cr7, [r0], {95}	; 0x5f
 4ac:	2f636269 	svccs	0x00636269
 4b0:	702d6176 	eorvc	r6, sp, r6, ror r1
 4b4:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 4b8:	00632e6b 	rsbeq	r2, r3, fp, ror #28
 4bc:	5f697072 	svcpl	0x00697072
 4c0:	5f746573 	svcpl	0x00746573
 4c4:	7074756f 	rsbsvc	r7, r4, pc, ror #10
 4c8:	77007475 	smlsdxvc	r0, r5, r4, r7
 4cc:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
 4d0:	74757000 	ldrbtvc	r7, [r5], #-0
 4d4:	70665f63 	rsbvc	r5, r6, r3, ror #30
 4d8:	696d6500 	stmdbvs	sp!, {r8, sl, sp, lr}^
 4dc:	73630074 	cmnvc	r3, #116	; 0x74
 4e0:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 4e4:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 4e8:	656c632f 	strbvs	r6, [ip, #-815]!	; 0x32f
 4ec:	722d6e61 	eorvc	r6, sp, #1552	; 0x610
 4f0:	6f6f6265 	svcvs	0x006f6265
 4f4:	00632e74 	rsbeq	r2, r3, r4, ror lr
 4f8:	616c6564 	cmnvs	ip, r4, ror #10
 4fc:	736d5f79 	cmnvc	sp, #484	; 0x1e4
 500:	31736300 	cmncc	r3, r0, lsl #6
 504:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 508:	2f637273 	svccs	0x00637273
 50c:	61747363 	cmnvs	r4, r3, ror #6
 510:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
 514:	625f5f00 	subsvs	r5, pc, #0, 30
 518:	735f7373 	cmpvc	pc, #-872415231	; 0xcc000001
 51c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
 520:	5f005f5f 	svcpl	0x00005f5f
 524:	7373625f 	cmnvc	r3, #-268435451	; 0xf0000005
 528:	646e655f 	strbtvs	r6, [lr], #-1375	; 0x55f
 52c:	62005f5f 	andvs	r5, r0, #380	; 0x17c
 530:	655f7373 	ldrbvs	r7, [pc, #-883]	; 1c5 <_start-0x7e3b>
 534:	5f00646e 	svcpl	0x0000646e
 538:	61747363 	cmnvs	r4, r3, ror #6
 53c:	61007472 	tstvs	r0, r2, ror r4
 540:	73755f74 	cmnvc	r5, #116, 30	; 0x1d0
 544:	6c5f7265 	lfmvs	f7, 2, [pc], {101}	; 0x65
 548:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
 54c:	5f4d5000 	svcpl	0x004d5000
 550:	53534150 	cmppl	r3, #80, 2
 554:	44524f57 	ldrbmi	r4, [r2], #-3927	; 0xf57
 558:	31736300 	cmncc	r3, r0, lsl #6
 55c:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 560:	2f637273 	svccs	0x00637273
 564:	6f626572 	svcvs	0x00626572
 568:	632e746f 	teqvs	lr, #1862270976	; 0x6f000000
 56c:	5f4d5000 	svcpl	0x004d5000
 570:	43545352 	cmpmi	r4, #1207959553	; 0x48000001
 574:	4352575f 	cmpmi	r2, #24903680	; 0x17c0000
 578:	465f4746 	ldrbmi	r4, [pc], -r6, asr #14
 57c:	5f4c4c55 	svcpl	0x004c4c55
 580:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
 584:	4d500054 	ldclmi	0, cr0, [r0, #-336]	; 0xfffffeb0
 588:	4f44575f 	svcmi	0x0044575f
 58c:	65730047 	ldrbvs	r0, [r3, #-71]!	; 0x47
 590:	73755f74 	cmnvc	r5, #116, 30	; 0x1d0
 594:	6c5f7265 	lfmvs	f7, 2, [pc], {101}	; 0x65
 598:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
 59c:	54555000 	ldrbpl	r5, [r5], #-0
 5a0:	50003233 	andpl	r3, r0, r3, lsr r2
 5a4:	53525f4d 	cmppl	r2, #308	; 0x134
 5a8:	63004354 	movwvs	r4, #852	; 0x354
 5ac:	00727370 	rsbseq	r7, r2, r0, ror r3
 5b0:	616c6564 	cmnvs	ip, r4, ror #10
 5b4:	65735f79 	ldrbvs	r5, [r3, #-3961]!	; 0xf79
 5b8:	73630063 	cmnvc	r3, #99	; 0x63
 5bc:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 5c0:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 5c4:	6d69742f 	cfstrdvs	mvd7, [r9, #-188]!	; 0xffffff44
 5c8:	632e7265 	teqvs	lr, #1342177286	; 0x50000006
 5cc:	54454700 	strbpl	r4, [r5], #-1792	; 0x700
 5d0:	74003233 	strvc	r3, [r0], #-563	; 0x233
 5d4:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
 5d8:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 5dc:	635f7961 	cmpvs	pc, #1589248	; 0x184000
 5e0:	656c6379 	strbvs	r6, [ip, #-889]!	; 0x379
 5e4:	65640073 	strbvs	r0, [r4, #-115]!	; 0x73
 5e8:	5f79616c 	svcpl	0x0079616c
 5ec:	74007375 	strvc	r7, [r0], #-885	; 0x375
 5f0:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 5f4:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 5f8:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0x55f
 5fc:	666b0063 	strbtvs	r0, [fp], -r3, rrx
 600:	5f656572 	svcpl	0x00656572
 604:	006c6c61 	rsbeq	r6, ip, r1, ror #24
 608:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
 60c:	5f64656e 	svcpl	0x0064656e
 610:	70616568 	rsbvc	r6, r1, r8, ror #10
 614:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
 618:	616d6b00 	cmnvs	sp, r0, lsl #22
 61c:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 620:	2d796d00 	ldclcs	13, cr6, [r9, #-0]
 624:	2f637273 	svccs	0x00637273
 628:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
 62c:	2e636f6c 	cdpcs	15, 6, cr6, cr3, cr12, {3}
 630:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
 634:	705f7469 	subsvc	r7, pc, r9, ror #8
 638:	696c6100 	stmdbvs	ip!, {r8, sp, lr}^
 63c:	656d6e67 	strbvs	r6, [sp, #-3687]!	; 0xe67
 640:	7200746e 	andvc	r7, r0, #1845493760	; 0x6e000000
 644:	646e756f 	strbtvs	r7, [lr], #-1391	; 0x56f
 648:	6e5f6465 	cdpvs	4, 5, cr6, cr15, cr5, {3}
 64c:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
 650:	6d6b0073 	stclvs	0, cr0, [fp, #-460]!	; 0xfffffe34
 654:	6f6c6c61 	svcvs	0x006c6c61
 658:	65685f63 	strbvs	r5, [r8, #-3939]!	; 0xf63
 65c:	705f7061 	subsvc	r7, pc, r1, rrx
 660:	5f007274 	svcpl	0x00007274
 664:	6165685f 	cmnvs	r5, pc, asr r8
 668:	74735f70 	ldrbtvc	r5, [r3], #-3952	; 0xf70
 66c:	5f747261 	svcpl	0x00747261
 670:	6f74005f 	svcvs	0x0074005f
 674:	6c6c615f 	stfvse	f6, [ip], #-380	; 0xfffffe84
 678:	7461636f 	strbtvc	r6, [r1], #-879	; 0x36f
 67c:	61750065 	cmnvs	r5, r5, rrx
 680:	705f7472 	subsvc	r7, pc, r2, ror r4	; <UNPREDICTABLE>
 684:	00637475 	rsbeq	r7, r3, r5, ror r4
 688:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 68c:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
 690:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
 694:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 698:	62696c00 	rsbvs	r6, r9, #0, 24
 69c:	75702f63 	ldrbvc	r2, [r0, #-3939]!	; 0xf63
 6a0:	61686374 	smcvs	34356	; 0x8634
 6a4:	00632e72 	rsbeq	r2, r3, r2, ror lr

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	00008010 	andeq	r8, r0, r0, lsl r0
  1c:	000000a0 	andeq	r0, r0, r0, lsr #1
  20:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
  24:	86038504 	strhi	r8, [r3], -r4, lsl #10
  28:	42018e02 	andmi	r8, r1, #2, 28
  2c:	0000200e 	andeq	r2, r0, lr
  30:	00000014 	andeq	r0, r0, r4, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	000080b0 	strheq	r8, [r0], -r0
  3c:	00000030 	andeq	r0, r0, r0, lsr r0
  40:	83080e42 	movwhi	r0, #36418	; 0x8e42
  44:	00018e02 	andeq	r8, r1, r2, lsl #28
  48:	00000018 	andeq	r0, r0, r8, lsl r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	000080e0 	andeq	r8, r0, r0, ror #1
  54:	00000104 	andeq	r0, r0, r4, lsl #2
  58:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
  5c:	42018e02 	andmi	r8, r1, #2, 28
  60:	0000100e 	andeq	r1, r0, lr
  64:	0000000c 	andeq	r0, r0, ip
  68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  6c:	7c020001 	stcvc	0, cr0, [r2], {1}
  70:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  74:	0000000c 	andeq	r0, r0, ip
  78:	00000064 	andeq	r0, r0, r4, rrx
  7c:	000081e4 	andeq	r8, r0, r4, ror #3
  80:	00000008 	andeq	r0, r0, r8
  84:	0000000c 	andeq	r0, r0, ip
  88:	00000064 	andeq	r0, r0, r4, rrx
  8c:	000081ec 	andeq	r8, r0, ip, ror #3
  90:	00000038 	andeq	r0, r0, r8, lsr r0
  94:	0000000c 	andeq	r0, r0, ip
  98:	00000064 	andeq	r0, r0, r4, rrx
  9c:	00008224 	andeq	r8, r0, r4, lsr #4
  a0:	00000028 	andeq	r0, r0, r8, lsr #32
  a4:	00000014 	andeq	r0, r0, r4, lsl r0
  a8:	00000064 	andeq	r0, r0, r4, rrx
  ac:	0000824c 	andeq	r8, r0, ip, asr #4
  b0:	00000018 	andeq	r0, r0, r8, lsl r0
  b4:	83080e42 	movwhi	r0, #36418	; 0x8e42
  b8:	00018e02 	andeq	r8, r1, r2, lsl #28
  bc:	00000014 	andeq	r0, r0, r4, lsl r0
  c0:	00000064 	andeq	r0, r0, r4, rrx
  c4:	00008264 	andeq	r8, r0, r4, ror #4
  c8:	0000007c 	andeq	r0, r0, ip, ror r0
  cc:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
  d0:	00018e02 	andeq	r8, r1, r2, lsl #28
  d4:	00000014 	andeq	r0, r0, r4, lsl r0
  d8:	00000064 	andeq	r0, r0, r4, rrx
  dc:	000082e0 	andeq	r8, r0, r0, ror #5
  e0:	00000090 	muleq	r0, r0, r0
  e4:	83080e42 	movwhi	r0, #36418	; 0x8e42
  e8:	00018e02 	andeq	r8, r1, r2, lsl #28
  ec:	00000014 	andeq	r0, r0, r4, lsl r0
  f0:	00000064 	andeq	r0, r0, r4, rrx
  f4:	00008370 	andeq	r8, r0, r0, ror r3
  f8:	00000080 	andeq	r0, r0, r0, lsl #1
  fc:	83080e42 	movwhi	r0, #36418	; 0x8e42
 100:	00018e02 	andeq	r8, r1, r2, lsl #28
 104:	0000000c 	andeq	r0, r0, ip
 108:	00000064 	andeq	r0, r0, r4, rrx
 10c:	000083f0 	strdeq	r8, [r0], -r0
 110:	00000010 	andeq	r0, r0, r0, lsl r0
 114:	00000018 	andeq	r0, r0, r8, lsl r0
 118:	00000064 	andeq	r0, r0, r4, rrx
 11c:	00008400 	andeq	r8, r0, r0, lsl #8
 120:	00000034 	andeq	r0, r0, r4, lsr r0
 124:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 128:	86038504 	strhi	r8, [r3], -r4, lsl #10
 12c:	00018e02 	andeq	r8, r1, r2, lsl #28
 130:	0000000c 	andeq	r0, r0, ip
 134:	00000064 	andeq	r0, r0, r4, rrx
 138:	00008434 	andeq	r8, r0, r4, lsr r4
 13c:	00000004 	andeq	r0, r0, r4
 140:	0000000c 	andeq	r0, r0, ip
 144:	00000064 	andeq	r0, r0, r4, rrx
 148:	00008438 	andeq	r8, r0, r8, lsr r4
 14c:	00000004 	andeq	r0, r0, r4
 150:	00000018 	andeq	r0, r0, r8, lsl r0
 154:	00000064 	andeq	r0, r0, r4, rrx
 158:	0000843c 	andeq	r8, r0, ip, lsr r4
 15c:	00000090 	muleq	r0, r0, r0
 160:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
 164:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
 168:	200e4201 	andcs	r4, lr, r1, lsl #4
 16c:	00000018 	andeq	r0, r0, r8, lsl r0
 170:	00000064 	andeq	r0, r0, r4, rrx
 174:	000084cc 	andeq	r8, r0, ip, asr #9
 178:	00000070 	andeq	r0, r0, r0, ror r0
 17c:	83100e42 	tsthi	r0, #1056	; 0x420
 180:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 184:	00018e02 	andeq	r8, r1, r2, lsl #28
 188:	00000014 	andeq	r0, r0, r4, lsl r0
 18c:	00000064 	andeq	r0, r0, r4, rrx
 190:	0000853c 	andeq	r8, r0, ip, lsr r5
 194:	00000028 	andeq	r0, r0, r8, lsr #32
 198:	83080e42 	movwhi	r0, #36418	; 0x8e42
 19c:	00018e02 	andeq	r8, r1, r2, lsl #28
 1a0:	00000014 	andeq	r0, r0, r4, lsl r0
 1a4:	00000064 	andeq	r0, r0, r4, rrx
 1a8:	00008564 	andeq	r8, r0, r4, ror #10
 1ac:	00000028 	andeq	r0, r0, r8, lsr #32
 1b0:	83080e42 	movwhi	r0, #36418	; 0x8e42
 1b4:	00018e02 	andeq	r8, r1, r2, lsl #28
 1b8:	00000014 	andeq	r0, r0, r4, lsl r0
 1bc:	00000064 	andeq	r0, r0, r4, rrx
 1c0:	0000858c 	andeq	r8, r0, ip, lsl #11
 1c4:	00000028 	andeq	r0, r0, r8, lsr #32
 1c8:	83080e42 	movwhi	r0, #36418	; 0x8e42
 1cc:	00018e02 	andeq	r8, r1, r2, lsl #28
 1d0:	0000000c 	andeq	r0, r0, ip
 1d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1d8:	7c020001 	stcvc	0, cr0, [r2], {1}
 1dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1e0:	00000018 	andeq	r0, r0, r8, lsl r0
 1e4:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 1e8:	000085c0 	andeq	r8, r0, r0, asr #11
 1ec:	00000080 	andeq	r0, r0, r0, lsl #1
 1f0:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 1f4:	42018e02 	andmi	r8, r1, #2, 28
 1f8:	0000180e 	andeq	r1, r0, lr, lsl #16
 1fc:	00000014 	andeq	r0, r0, r4, lsl r0
 200:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 204:	00008640 	andeq	r8, r0, r0, asr #12
 208:	00000040 	andeq	r0, r0, r0, asr #32
 20c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 210:	00018e02 	andeq	r8, r1, r2, lsl #28
 214:	00000018 	andeq	r0, r0, r8, lsl r0
 218:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 21c:	00008680 	andeq	r8, r0, r0, lsl #13
 220:	000001a4 	andeq	r0, r0, r4, lsr #3
 224:	83100e42 	tsthi	r0, #1056	; 0x420
 228:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 22c:	00018e02 	andeq	r8, r1, r2, lsl #28
 230:	00000018 	andeq	r0, r0, r8, lsl r0
 234:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 238:	00008824 	andeq	r8, r0, r4, lsr #16
 23c:	0000006c 	andeq	r0, r0, ip, rrx
 240:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
 244:	86028503 	strhi	r8, [r2], -r3, lsl #10
 248:	00000001 	andeq	r0, r0, r1
 24c:	0000001c 	andeq	r0, r0, ip, lsl r0
 250:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 254:	00008890 	muleq	r0, r0, r8
 258:	00000034 	andeq	r0, r0, r4, lsr r0
 25c:	83180e42 	tsthi	r8, #1056	; 0x420
 260:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
 264:	87038604 	strhi	r8, [r3, -r4, lsl #12]
 268:	00018e02 	andeq	r8, r1, r2, lsl #28
 26c:	00000018 	andeq	r0, r0, r8, lsl r0
 270:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 274:	000088c4 	andeq	r8, r0, r4, asr #17
 278:	00000058 	andeq	r0, r0, r8, asr r0
 27c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 280:	86038504 	strhi	r8, [r3], -r4, lsl #10
 284:	00018e02 	andeq	r8, r1, r2, lsl #28
 288:	00000018 	andeq	r0, r0, r8, lsl r0
 28c:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 290:	0000891c 	andeq	r8, r0, ip, lsl r9
 294:	000000a0 	andeq	r0, r0, r0, lsr #1
 298:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 29c:	86038504 	strhi	r8, [r3], -r4, lsl #10
 2a0:	00018e02 	andeq	r8, r1, r2, lsl #28
 2a4:	00000020 	andeq	r0, r0, r0, lsr #32
 2a8:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 2ac:	000089bc 			; <UNDEFINED> instruction: 0x000089bc
 2b0:	0000011c 	andeq	r0, r0, ip, lsl r1
 2b4:	84200e42 	strthi	r0, [r0], #-3650	; 0xe42
 2b8:	86078508 	strhi	r8, [r7], -r8, lsl #10
 2bc:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
 2c0:	8a038904 	bhi	e26d8 <__bss_end__+0xd83d0>
 2c4:	00018e02 	andeq	r8, r1, r2, lsl #28
 2c8:	0000000c 	andeq	r0, r0, ip
 2cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2d0:	7c020001 	stcvc	0, cr0, [r2], {1}
 2d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2d8:	0000000c 	andeq	r0, r0, ip
 2dc:	000002c8 	andeq	r0, r0, r8, asr #5
 2e0:	00008b48 	andeq	r8, r0, r8, asr #22
 2e4:	00000020 	andeq	r0, r0, r0, lsr #32
 2e8:	0000000c 	andeq	r0, r0, ip
 2ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2f0:	7c020001 	stcvc	0, cr0, [r2], {1}
 2f4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2f8:	00000024 	andeq	r0, r0, r4, lsr #32
 2fc:	000002e8 	andeq	r0, r0, r8, ror #5
 300:	00008b68 	andeq	r8, r0, r8, ror #22
 304:	00000058 	andeq	r0, r0, r8, asr r0
 308:	80100e42 	andshi	r0, r0, r2, asr #28
 30c:	82038104 	andhi	r8, r3, #4, 2
 310:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
 314:	07841c0e 	streq	r1, [r4, lr, lsl #24]
 318:	058e0685 	streq	r0, [lr, #1669]	; 0x685
 31c:	00280e42 	eoreq	r0, r8, r2, asr #28
 320:	0000000c 	andeq	r0, r0, ip
 324:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 328:	7c020001 	stcvc	0, cr0, [r2], {1}
 32c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 330:	00000018 	andeq	r0, r0, r8, lsl r0
 334:	00000320 	andeq	r0, r0, r0, lsr #6
 338:	00008bc0 	andeq	r8, r0, r0, asr #23
 33c:	00000034 	andeq	r0, r0, r4, lsr r0
 340:	83100e42 	tsthi	r0, #1056	; 0x420
 344:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 348:	00018e02 	andeq	r8, r1, r2, lsl #28
 34c:	0000000c 	andeq	r0, r0, ip
 350:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 354:	7c020001 	stcvc	0, cr0, [r2], {1}
 358:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 35c:	0000000c 	andeq	r0, r0, ip
 360:	0000034c 	andeq	r0, r0, ip, asr #6
 364:	00008bf4 	strdeq	r8, [r0], -r4
 368:	00000014 	andeq	r0, r0, r4, lsl r0
 36c:	0000000c 	andeq	r0, r0, ip
 370:	0000034c 	andeq	r0, r0, ip, asr #6
 374:	00008c08 	andeq	r8, r0, r8, lsl #24
 378:	0000002c 	andeq	r0, r0, ip, lsr #32
 37c:	0000000c 	andeq	r0, r0, ip
 380:	0000034c 	andeq	r0, r0, ip, asr #6
 384:	00008c34 	andeq	r8, r0, r4, lsr ip
 388:	00000040 	andeq	r0, r0, r0, asr #32
 38c:	00000020 	andeq	r0, r0, r0, lsr #32
 390:	0000034c 	andeq	r0, r0, ip, asr #6
 394:	00008c74 	andeq	r8, r0, r4, ror ip
 398:	00000198 	muleq	r0, r8, r1
 39c:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 3a0:	86058506 	strhi	r8, [r5], -r6, lsl #10
 3a4:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 3a8:	42018e02 	andmi	r8, r1, #2, 28
 3ac:	0000580e 	andeq	r5, r0, lr, lsl #16
 3b0:	00000014 	andeq	r0, r0, r4, lsl r0
 3b4:	0000034c 	andeq	r0, r0, ip, asr #6
 3b8:	00008e0c 	andeq	r8, r0, ip, lsl #28
 3bc:	00000050 	andeq	r0, r0, r0, asr r0
 3c0:	83080e42 	movwhi	r0, #36418	; 0x8e42
 3c4:	00018e02 	andeq	r8, r1, r2, lsl #28
 3c8:	00000028 	andeq	r0, r0, r8, lsr #32
 3cc:	0000034c 	andeq	r0, r0, ip, asr #6
 3d0:	00008e5c 	andeq	r8, r0, ip, asr lr
 3d4:	00000288 	andeq	r0, r0, r8, lsl #5
 3d8:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
 3dc:	86088509 	strhi	r8, [r8], -r9, lsl #10
 3e0:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
 3e4:	8a048905 	bhi	122800 <__bss_end__+0x1184f8>
 3e8:	8e028b03 	vmlahi.f64	d8, d2, d3
 3ec:	b00e4201 	andlt	r4, lr, r1, lsl #4
 3f0:	00000001 	andeq	r0, r0, r1
 3f4:	0000000c 	andeq	r0, r0, ip
 3f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3fc:	7c020001 	stcvc	0, cr0, [r2], {1}
 400:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 404:	00000014 	andeq	r0, r0, r4, lsl r0
 408:	000003f4 	strdeq	r0, [r0], -r4
 40c:	000090e4 	andeq	r9, r0, r4, ror #1
 410:	00000028 	andeq	r0, r0, r8, lsr #32
 414:	83080e42 	movwhi	r0, #36418	; 0x8e42
 418:	00018e02 	andeq	r8, r1, r2, lsl #28
 41c:	0000000c 	andeq	r0, r0, ip
 420:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 424:	7c020001 	stcvc	0, cr0, [r2], {1}
 428:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 42c:	00000014 	andeq	r0, r0, r4, lsl r0
 430:	0000041c 	andeq	r0, r0, ip, lsl r4
 434:	0000910c 	andeq	r9, r0, ip, lsl #2
 438:	00000034 	andeq	r0, r0, r4, lsr r0
 43c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 440:	00018e02 	andeq	r8, r1, r2, lsl #28
 444:	0000000c 	andeq	r0, r0, ip
 448:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 44c:	7c020001 	stcvc	0, cr0, [r2], {1}
 450:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 454:	0000000c 	andeq	r0, r0, ip
 458:	00000444 	andeq	r0, r0, r4, asr #8
 45c:	00009140 	andeq	r9, r0, r0, asr #2
 460:	00000018 	andeq	r0, r0, r8, lsl r0
 464:	0000000c 	andeq	r0, r0, ip
 468:	00000444 	andeq	r0, r0, r4, asr #8
 46c:	00009158 	andeq	r9, r0, r8, asr r1
 470:	00000014 	andeq	r0, r0, r4, lsl r0
 474:	00000014 	andeq	r0, r0, r4, lsl r0
 478:	00000444 	andeq	r0, r0, r4, asr #8
 47c:	0000916c 	andeq	r9, r0, ip, ror #2
 480:	00000048 	andeq	r0, r0, r8, asr #32
 484:	83080e42 	movwhi	r0, #36418	; 0x8e42
 488:	00018e02 	andeq	r8, r1, r2, lsl #28
 48c:	0000000c 	andeq	r0, r0, ip
 490:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 494:	7c020001 	stcvc	0, cr0, [r2], {1}
 498:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 49c:	0000000c 	andeq	r0, r0, ip
 4a0:	0000048c 	andeq	r0, r0, ip, lsl #9
 4a4:	000091b4 			; <UNDEFINED> instruction: 0x000091b4
 4a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4ac:	00000014 	andeq	r0, r0, r4, lsl r0
 4b0:	0000048c 	andeq	r0, r0, ip, lsl #9
 4b4:	000091d0 	ldrdeq	r9, [r0], -r0
 4b8:	00000014 	andeq	r0, r0, r4, lsl r0
 4bc:	83080e42 	movwhi	r0, #36418	; 0x8e42
 4c0:	00018e02 	andeq	r8, r1, r2, lsl #28
 4c4:	00000018 	andeq	r0, r0, r8, lsl r0
 4c8:	0000048c 	andeq	r0, r0, ip, lsl #9
 4cc:	000091e4 	andeq	r9, r0, r4, ror #3
 4d0:	00000024 	andeq	r0, r0, r4, lsr #32
 4d4:	83100e42 	tsthi	r0, #1056	; 0x420
 4d8:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 4dc:	00018e02 	andeq	r8, r1, r2, lsl #28
 4e0:	00000014 	andeq	r0, r0, r4, lsl r0
 4e4:	0000048c 	andeq	r0, r0, ip, lsl #9
 4e8:	00009208 	andeq	r9, r0, r8, lsl #4
 4ec:	00000014 	andeq	r0, r0, r4, lsl r0
 4f0:	83080e42 	movwhi	r0, #36418	; 0x8e42
 4f4:	00018e02 	andeq	r8, r1, r2, lsl #28
 4f8:	00000014 	andeq	r0, r0, r4, lsl r0
 4fc:	0000048c 	andeq	r0, r0, ip, lsl #9
 500:	0000921c 	andeq	r9, r0, ip, lsl r2
 504:	00000014 	andeq	r0, r0, r4, lsl r0
 508:	83080e42 	movwhi	r0, #36418	; 0x8e42
 50c:	00018e02 	andeq	r8, r1, r2, lsl #28
 510:	0000000c 	andeq	r0, r0, ip
 514:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 518:	7c020001 	stcvc	0, cr0, [r2], {1}
 51c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 520:	00000014 	andeq	r0, r0, r4, lsl r0
 524:	00000510 	andeq	r0, r0, r0, lsl r5
 528:	00009508 	andeq	r9, r0, r8, lsl #10
 52c:	00000064 	andeq	r0, r0, r4, rrx
 530:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 534:	00018e02 	andeq	r8, r1, r2, lsl #28
 538:	00000014 	andeq	r0, r0, r4, lsl r0
 53c:	00000510 	andeq	r0, r0, r0, lsl r5
 540:	0000956c 	andeq	r9, r0, ip, ror #10
 544:	00000094 	muleq	r0, r4, r0
 548:	83080e42 	movwhi	r0, #36418	; 0x8e42
 54c:	00018e02 	andeq	r8, r1, r2, lsl #28
 550:	00000014 	andeq	r0, r0, r4, lsl r0
 554:	00000510 	andeq	r0, r0, r0, lsl r5
 558:	00009600 	andeq	r9, r0, r0, lsl #12
 55c:	00000058 	andeq	r0, r0, r8, asr r0
 560:	83080e42 	movwhi	r0, #36418	; 0x8e42
 564:	00018e02 	andeq	r8, r1, r2, lsl #28
 568:	0000000c 	andeq	r0, r0, ip
 56c:	00000510 	andeq	r0, r0, r0, lsl r5
 570:	00009658 	andeq	r9, r0, r8, asr r6
 574:	00000018 	andeq	r0, r0, r8, lsl r0
 578:	0000000c 	andeq	r0, r0, ip
 57c:	00000510 	andeq	r0, r0, r0, lsl r5
 580:	00009670 	andeq	r9, r0, r0, ror r6
 584:	00000010 	andeq	r0, r0, r0, lsl r0
 588:	0000000c 	andeq	r0, r0, ip
 58c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 590:	7c020001 	stcvc	0, cr0, [r2], {1}
 594:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 598:	00000014 	andeq	r0, r0, r4, lsl r0
 59c:	00000588 	andeq	r0, r0, r8, lsl #11
 5a0:	00009680 	andeq	r9, r0, r0, lsl #13
 5a4:	00000014 	andeq	r0, r0, r4, lsl r0
 5a8:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 5ac:	00018e02 	andeq	r8, r1, r2, lsl #28

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	000001ac 	andeq	r0, r0, ip, lsr #3
   4:	000001ec 	andeq	r0, r0, ip, ror #3
   8:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   c:	000001f4 	strdeq	r0, [r0], -r4
	...
  18:	0000026c 	andeq	r0, r0, ip, ror #4
  1c:	00000274 	andeq	r0, r0, r4, ror r2
  20:	0000027c 	andeq	r0, r0, ip, ror r2
  24:	00000284 	andeq	r0, r0, r4, lsl #5
	...
  30:	0000042c 	andeq	r0, r0, ip, lsr #8
  34:	00000440 	andeq	r0, r0, r0, asr #8
  38:	00000444 	andeq	r0, r0, r4, asr #8
  3c:	00000484 	andeq	r0, r0, r4, lsl #9
	...
  48:	00009140 	andeq	r9, r0, r0, asr #2
  4c:	000091b4 			; <UNDEFINED> instruction: 0x000091b4
	...
