
4-test-exit.bin.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e3a0d302 	mov	sp, #134217728	; 0x8000000
    8004:	e3a0b000 	mov	fp, #0
    8008:	eb000446 	bl	9128 <_cstart>
    800c:	eb00045d 	bl	9188 <rpi_reboot>

00008010 <trivial>:
#include "rpi.h"
#include "rpi-thread.h"


void trivial(void* arg) {
    8010:	e92d4008 	push	{r3, lr}
    8014:	e1a01000 	mov	r1, r0
    printk("trivial thread: arg=%d\n", (unsigned)arg);
    8018:	e59f0020 	ldr	r0, [pc, #32]	; 8040 <trivial+0x30>
    801c:	eb0002d8 	bl	8b84 <printk>
    // clean_reboot();
    // comment this out to test your implicit exit
    rpi_yield();
    8020:	eb0000d3 	bl	8374 <rpi_yield>
	rpi_yield();
    8024:	eb0000d2 	bl	8374 <rpi_yield>
	rpi_yield();
    8028:	eb0000d1 	bl	8374 <rpi_yield>
	rpi_yield();
    802c:	eb0000d0 	bl	8374 <rpi_yield>
	rpi_yield();
    8030:	eb0000cf 	bl	8374 <rpi_yield>
	rpi_yield();
    8034:	eb0000ce 	bl	8374 <rpi_yield>
	rpi_yield();
    8038:	eb0000cd 	bl	8374 <rpi_yield>
    803c:	e8bd8008 	pop	{r3, pc}
    8040:	000096e4 	andeq	r9, r0, r4, ror #13

00008044 <notmain>:
	//rpi_exit(0);
}

void notmain(void) {
    8044:	e92d4038 	push	{r3, r4, r5, lr}
    uart_init();
    8048:	eb00049d 	bl	92c4 <uart_init>
    kmalloc_init();
    804c:	eb000572 	bl	961c <kmalloc_init>

    // make this > 1 to test
    int n = 100;
    for(int i = 0; i < n; i++)
    8050:	e3a04000 	mov	r4, #0
        rpi_fork(trivial, (void*)i);
    8054:	e59f5028 	ldr	r5, [pc, #40]	; 8084 <notmain+0x40>
    uart_init();
    kmalloc_init();

    // make this > 1 to test
    int n = 100;
    for(int i = 0; i < n; i++)
    8058:	ea000003 	b	806c <notmain+0x28>
        rpi_fork(trivial, (void*)i);
    805c:	e1a00005 	mov	r0, r5
    8060:	e1a01004 	mov	r1, r4
    8064:	eb000099 	bl	82d0 <rpi_fork>
    uart_init();
    kmalloc_init();

    // make this > 1 to test
    int n = 100;
    for(int i = 0; i < n; i++)
    8068:	e2844001 	add	r4, r4, #1
    806c:	e3540063 	cmp	r4, #99	; 0x63
    8070:	dafffff9 	ble	805c <notmain+0x18>
        rpi_fork(trivial, (void*)i);
    rpi_thread_start();
    8074:	eb0000f6 	bl	8454 <rpi_thread_start>
    printk("SUCCESS\n");
    8078:	e59f0008 	ldr	r0, [pc, #8]	; 8088 <notmain+0x44>
    807c:	eb0002c0 	bl	8b84 <printk>
    clean_reboot();
    8080:	eb00041e 	bl	9100 <clean_reboot>
    8084:	00008010 	andeq	r8, r0, r0, lsl r0
    8088:	000096fc 	strdeq	r9, [r0], -ip

0000808c <print_and_die>:
}

void print_and_die(void) { panic("should not call\n"); }
    808c:	e92d4008 	push	{r3, lr}
    8090:	e59f0010 	ldr	r0, [pc, #16]	; 80a8 <print_and_die+0x1c>
    8094:	e59f1010 	ldr	r1, [pc, #16]	; 80ac <print_and_die+0x20>
    8098:	e59f2010 	ldr	r2, [pc, #16]	; 80b0 <print_and_die+0x24>
    809c:	e3a03020 	mov	r3, #32
    80a0:	eb0002b7 	bl	8b84 <printk>
    80a4:	eb000437 	bl	9188 <rpi_reboot>
    80a8:	00009708 	andeq	r9, r0, r8, lsl #14
    80ac:	0000972c 	andeq	r9, r0, ip, lsr #14
    80b0:	000096d4 	ldrdeq	r9, [r0], -r4

000080b4 <Q_nelem>:
} Q_t;

// used for iteration.
static E *Q_start(Q_t *q)   { return q->head; }
static E *Q_next(E *e)      { return e->next; }
static unsigned Q_nelem(Q_t *q) { return q->cnt; }
    80b4:	e5900008 	ldr	r0, [r0, #8]
    80b8:	e12fff1e 	bx	lr

000080bc <Q_append>:
    return e;
}

// insert at tail. (for FIFO)
static void Q_append(Q_t *q, E *e) {
    e->next = 0;
    80bc:	e3a03000 	mov	r3, #0
    80c0:	e5813040 	str	r3, [r1, #64]	; 0x40
    q->cnt++;
    80c4:	e5903008 	ldr	r3, [r0, #8]
    80c8:	e2833001 	add	r3, r3, #1
    80cc:	e5803008 	str	r3, [r0, #8]
    if(!q->tail) 
    80d0:	e5903004 	ldr	r3, [r0, #4]
    80d4:	e3530000 	cmp	r3, #0
    80d8:	1a000002 	bne	80e8 <Q_append+0x2c>
        q->head = q->tail = e;
    80dc:	e5801004 	str	r1, [r0, #4]
    80e0:	e5801000 	str	r1, [r0]
    80e4:	e12fff1e 	bx	lr
    else {
        q->tail->next = e;
    80e8:	e5831040 	str	r1, [r3, #64]	; 0x40
        q->tail = e;
    80ec:	e5801004 	str	r1, [r0, #4]
    80f0:	e12fff1e 	bx	lr

000080f4 <Q_push>:
    }
}

// insert at head (for LIFO)
static void Q_push(Q_t *q, E *e) {
    q->cnt++;
    80f4:	e5903008 	ldr	r3, [r0, #8]
    80f8:	e2833001 	add	r3, r3, #1
    80fc:	e5803008 	str	r3, [r0, #8]
    e->next = q->head;
    8100:	e5903000 	ldr	r3, [r0]
    8104:	e5813040 	str	r3, [r1, #64]	; 0x40
    q->head = e;
    8108:	e5801000 	str	r1, [r0]
    if(!q->tail)
    810c:	e5903004 	ldr	r3, [r0, #4]
    8110:	e3530000 	cmp	r3, #0
        q->tail = e;
    8114:	05801004 	streq	r1, [r0, #4]
    8118:	e12fff1e 	bx	lr

0000811c <th_free>:
    demand(is_aligned(&t->stack[0],8), stack must be 8-byte aligned!);
    t->tid = tid++;
    return t;
}

static void th_free(rpi_thread_t *th) {
    811c:	e92d4008 	push	{r3, lr}
    8120:	e1a01000 	mov	r1, r0
    // push on the front in case helps with caching.
    Q_push(&freeq, th);
    8124:	e59f0004 	ldr	r0, [pc, #4]	; 8130 <th_free+0x14>
    8128:	ebfffff1 	bl	80f4 <Q_push>
    812c:	e8bd8008 	pop	{r3, pc}
    8130:	00009d34 	andeq	r9, r0, r4, lsr sp

00008134 <Q_empty>:
// used for iteration.
static E *Q_start(Q_t *q)   { return q->head; }
static E *Q_next(E *e)      { return e->next; }
static unsigned Q_nelem(Q_t *q) { return q->cnt; }

static int Q_empty(Q_t *q)  { 
    8134:	e92d4010 	push	{r4, lr}
    8138:	e1a04000 	mov	r4, r0
    if(q->head)
    813c:	e5903000 	ldr	r3, [r0]
    8140:	e3530000 	cmp	r3, #0
    8144:	1a000011 	bne	8190 <Q_empty+0x5c>
        return 0;
    assert(Q_nelem(q) == 0);
    8148:	ebffffd9 	bl	80b4 <Q_nelem>
    814c:	e3500000 	cmp	r0, #0
    8150:	0a000005 	beq	816c <Q_empty+0x38>
    8154:	e59f0044 	ldr	r0, [pc, #68]	; 81a0 <Q_empty+0x6c>
    8158:	e59f1044 	ldr	r1, [pc, #68]	; 81a4 <Q_empty+0x70>
    815c:	e59f2044 	ldr	r2, [pc, #68]	; 81a8 <Q_empty+0x74>
    8160:	e3a03015 	mov	r3, #21
    8164:	eb000286 	bl	8b84 <printk>
    8168:	eb000406 	bl	9188 <rpi_reboot>
    demand(!q->tail, invalid Q);
    816c:	e5943004 	ldr	r3, [r4, #4]
    8170:	e3530000 	cmp	r3, #0
    8174:	0a000007 	beq	8198 <Q_empty+0x64>
    8178:	e59f002c 	ldr	r0, [pc, #44]	; 81ac <Q_empty+0x78>
    817c:	e59f1020 	ldr	r1, [pc, #32]	; 81a4 <Q_empty+0x70>
    8180:	e59f2020 	ldr	r2, [pc, #32]	; 81a8 <Q_empty+0x74>
    8184:	e3a03016 	mov	r3, #22
    8188:	eb00027d 	bl	8b84 <printk>
    818c:	eb0003fd 	bl	9188 <rpi_reboot>
static E *Q_next(E *e)      { return e->next; }
static unsigned Q_nelem(Q_t *q) { return q->cnt; }

static int Q_empty(Q_t *q)  { 
    if(q->head)
        return 0;
    8190:	e3a00000 	mov	r0, #0
    8194:	e8bd8010 	pop	{r4, pc}
    assert(Q_nelem(q) == 0);
    demand(!q->tail, invalid Q);
    return 1;
    8198:	e3a00001 	mov	r0, #1
}
    819c:	e8bd8010 	pop	{r4, pc}
    81a0:	00009798 	muleq	r0, r8, r7
    81a4:	000097b8 			; <UNDEFINED> instruction: 0x000097b8
    81a8:	0000973c 	andeq	r9, r0, ip, lsr r7
    81ac:	000097bc 			; <UNDEFINED> instruction: 0x000097bc

000081b0 <Q_pop>:

// remove from front of list.
static E *Q_pop(Q_t *q) {
    81b0:	e92d4008 	push	{r3, lr}
    demand(q, bad input);
    81b4:	e3500000 	cmp	r0, #0
    81b8:	1a000005 	bne	81d4 <Q_pop+0x24>
    81bc:	e59f006c 	ldr	r0, [pc, #108]	; 8230 <Q_pop+0x80>
    81c0:	e59f106c 	ldr	r1, [pc, #108]	; 8234 <Q_pop+0x84>
    81c4:	e59f206c 	ldr	r2, [pc, #108]	; 8238 <Q_pop+0x88>
    81c8:	e3a0301c 	mov	r3, #28
    81cc:	eb00026c 	bl	8b84 <printk>
    81d0:	eb0003ec 	bl	9188 <rpi_reboot>

    E *e = q->head;
    81d4:	e5903000 	ldr	r3, [r0]
    if(!e) {
    81d8:	e3530000 	cmp	r3, #0
    81dc:	1a000008 	bne	8204 <Q_pop+0x54>
        assert(Q_empty(q));
    81e0:	ebffffd3 	bl	8134 <Q_empty>
    81e4:	e3500000 	cmp	r0, #0
    81e8:	1a00000e 	bne	8228 <Q_pop+0x78>
    81ec:	e59f0048 	ldr	r0, [pc, #72]	; 823c <Q_pop+0x8c>
    81f0:	e59f103c 	ldr	r1, [pc, #60]	; 8234 <Q_pop+0x84>
    81f4:	e59f203c 	ldr	r2, [pc, #60]	; 8238 <Q_pop+0x88>
    81f8:	e3a03020 	mov	r3, #32
    81fc:	eb000260 	bl	8b84 <printk>
    8200:	eb0003e0 	bl	9188 <rpi_reboot>
        return 0;
    }
    q->cnt--;
    8204:	e5902008 	ldr	r2, [r0, #8]
    8208:	e2422001 	sub	r2, r2, #1
    820c:	e5802008 	str	r2, [r0, #8]
    q->head = e->next;
    8210:	e5932040 	ldr	r2, [r3, #64]	; 0x40
    8214:	e5802000 	str	r2, [r0]
    if(!q->head)
    8218:	e3520000 	cmp	r2, #0
        q->tail = 0;
    821c:	05802004 	streq	r2, [r0, #4]
    return e;
    8220:	e1a00003 	mov	r0, r3
    8224:	e8bd8008 	pop	{r3, pc}
    demand(q, bad input);

    E *e = q->head;
    if(!e) {
        assert(Q_empty(q));
        return 0;
    8228:	e3a00000 	mov	r0, #0
    q->cnt--;
    q->head = e->next;
    if(!q->head)
        q->tail = 0;
    return e;
}
    822c:	e8bd8008 	pop	{r3, pc}
    8230:	000097ec 	andeq	r9, r0, ip, ror #15
    8234:	000097b8 			; <UNDEFINED> instruction: 0x000097b8
    8238:	00009744 	andeq	r9, r0, r4, asr #14
    823c:	00009814 	andeq	r9, r0, r4, lsl r8

00008240 <th_alloc>:
}

#define is_aligned(_p,_n) (((unsigned)(_p))%(_n) == 0)

// keep a cache of freed thread blocks.  call kmalloc if run out.
static rpi_thread_t *th_alloc(void) {
    8240:	e92d4008 	push	{r3, lr}
    rpi_thread_t *t = Q_pop(&freeq);
    8244:	e59f005c 	ldr	r0, [pc, #92]	; 82a8 <th_alloc+0x68>
    8248:	ebffffd8 	bl	81b0 <Q_pop>

    // stack has to be 8-byte aligned.
    if(!t) {
    824c:	e3500000 	cmp	r0, #0
    8250:	1a000006 	bne	8270 <th_alloc+0x30>
        t = kmalloc_aligned(sizeof *t, 8);
    8254:	e59f0050 	ldr	r0, [pc, #80]	; 82ac <th_alloc+0x6c>
    8258:	e3a01008 	mov	r1, #8
    825c:	eb0004c9 	bl	9588 <kmalloc_aligned>
        nalloced++;
    8260:	e59f3040 	ldr	r3, [pc, #64]	; 82a8 <th_alloc+0x68>
    8264:	e593200c 	ldr	r2, [r3, #12]
    8268:	e2822001 	add	r2, r2, #1
    826c:	e583200c 	str	r2, [r3, #12]
    }
    demand(is_aligned(&t->stack[0],8), stack must be 8-byte aligned!);
    8270:	e3100007 	tst	r0, #7
    8274:	0a000005 	beq	8290 <th_alloc+0x50>
    8278:	e59f0030 	ldr	r0, [pc, #48]	; 82b0 <th_alloc+0x70>
    827c:	e59f1030 	ldr	r1, [pc, #48]	; 82b4 <th_alloc+0x74>
    8280:	e59f2030 	ldr	r2, [pc, #48]	; 82b8 <th_alloc+0x78>
    8284:	e3a03024 	mov	r3, #36	; 0x24
    8288:	eb00023d 	bl	8b84 <printk>
    828c:	eb0003bd 	bl	9188 <rpi_reboot>
    t->tid = tid++;
    8290:	e59f2024 	ldr	r2, [pc, #36]	; 82bc <th_alloc+0x7c>
    8294:	e5923000 	ldr	r3, [r2]
    8298:	e2831001 	add	r1, r3, #1
    829c:	e5821000 	str	r1, [r2]
    82a0:	e5803044 	str	r3, [r0, #68]	; 0x44
    return t;
}
    82a4:	e8bd8008 	pop	{r3, pc}
    82a8:	00009d34 	andeq	r9, r0, r4, lsr sp
    82ac:	00002050 	andeq	r2, r0, r0, asr r0
    82b0:	00009830 	andeq	r9, r0, r0, lsr r8
    82b4:	00009890 	muleq	r0, r0, r8
    82b8:	0000974c 	andeq	r9, r0, ip, asr #14
    82bc:	000096c8 	andeq	r9, r0, r8, asr #13

000082c0 <rpi_cur_thread>:
static unsigned nalloced = 0;

// return pointer to the current thread.  
rpi_thread_t *rpi_cur_thread(void) {
    return cur_thread;
}
    82c0:	e59f3004 	ldr	r3, [pc, #4]	; 82cc <rpi_cur_thread+0xc>
    82c4:	e5930010 	ldr	r0, [r3, #16]
    82c8:	e12fff1e 	bx	lr
    82cc:	00009d34 	andeq	r9, r0, r4, lsr sp

000082d0 <rpi_fork>:
/***********************************************************************
 * implement the code below.
 */

// create a new thread.
rpi_thread_t *rpi_fork(void (*code)(void *arg), void *arg) {
    82d0:	e92d4070 	push	{r4, r5, r6, lr}
    82d4:	e1a06000 	mov	r6, r0
    82d8:	e1a05001 	mov	r5, r1
    rpi_thread_t *t = th_alloc();
    82dc:	ebffffd7 	bl	8240 <th_alloc>
    82e0:	e1a04000 	mov	r4, r0
    /*
     * do the brain-surgery on the new thread stack here.
     * must set up initial stack: 
     *  - set LR, SP, and store <code> and <arg> where trampoline can get it.
     */
    t->reg_save_area[0] = (unsigned) code;
    82e4:	e5806000 	str	r6, [r0]
	t->reg_save_area[1] = (unsigned) arg;
    82e8:	e5805004 	str	r5, [r0, #4]
	void rpi_init_trampoline(void);
	t->reg_save_area[REG_LR_OFF] = (unsigned) &rpi_init_trampoline;
    82ec:	e59f3020 	ldr	r3, [pc, #32]	; 8314 <rpi_fork+0x44>
    82f0:	e5803024 	str	r3, [r0, #36]	; 0x24
	t->reg_save_area[REG_SP_OFF] = (unsigned) &t->stack[THREAD_MAXSTACK - 2];
    82f4:	e2803d81 	add	r3, r0, #8256	; 0x2040
    82f8:	e2833008 	add	r3, r3, #8
    82fc:	e5803028 	str	r3, [r0, #40]	; 0x28
    //unimplemented();
    Q_append(&runq, t);
    8300:	e59f0010 	ldr	r0, [pc, #16]	; 8318 <rpi_fork+0x48>
    8304:	e1a01004 	mov	r1, r4
    8308:	ebffff6b 	bl	80bc <Q_append>
    return t;
}
    830c:	e1a00004 	mov	r0, r4
    8310:	e8bd8070 	pop	{r4, r5, r6, pc}
    8314:	00008580 	andeq	r8, r0, r0, lsl #11
    8318:	00009d48 	andeq	r9, r0, r8, asr #26

0000831c <rpi_exit>:

// exit current thread.
void rpi_exit(int exitcode) {
    831c:	e92d4038 	push	{r3, r4, r5, lr}
 	 * switch to it.
	 
	 * 3. otherwise we are done, switch to the scheduler thread 
	 * so we call back into the client code.
	 */
	rpi_thread_t* old_thread = cur_thread;
    8320:	e59f5048 	ldr	r5, [pc, #72]	; 8370 <rpi_exit+0x54>
    8324:	e5954010 	ldr	r4, [r5, #16]
	th_free(cur_thread);
    8328:	e1a00004 	mov	r0, r4
    832c:	ebffff7a 	bl	811c <th_free>

	if(!Q_empty(&runq)) {
    8330:	e2850014 	add	r0, r5, #20
    8334:	ebffff7e 	bl	8134 <Q_empty>
    8338:	e3500000 	cmp	r0, #0
    833c:	1a000003 	bne	8350 <rpi_exit+0x34>
		cur_thread = Q_pop(&runq);
    8340:	e2850014 	add	r0, r5, #20
    8344:	ebffff99 	bl	81b0 <Q_pop>
    8348:	e5850010 	str	r0, [r5, #16]
    834c:	ea000002 	b	835c <rpi_exit+0x40>
	} else {
		cur_thread = scheduler_thread;
    8350:	e59f3018 	ldr	r3, [pc, #24]	; 8370 <rpi_exit+0x54>
    8354:	e5932020 	ldr	r2, [r3, #32]
    8358:	e5832010 	str	r2, [r3, #16]
	}
	rpi_cswitch(old_thread->reg_save_area, cur_thread->reg_save_area);
    835c:	e1a00004 	mov	r0, r4
    8360:	e59f3008 	ldr	r3, [pc, #8]	; 8370 <rpi_exit+0x54>
    8364:	e5931010 	ldr	r1, [r3, #16]
    8368:	eb00006d 	bl	8524 <rpi_cswitch>
    836c:	e8bd8038 	pop	{r3, r4, r5, pc}
    8370:	00009d34 	andeq	r9, r0, r4, lsr sp

00008374 <rpi_yield>:
	return;
}

// yield the current thread.
void rpi_yield(void) {
    8374:	e92d4070 	push	{r4, r5, r6, lr}
	//	- there are no more runnable threads, return.  
	// otherwise: 
	//	1. put current thread on runq.
	// 	2. context switch to the new thread.
	rpi_thread_t* next_thread;
	if(Q_empty(&runq)) {
    8378:	e59f003c 	ldr	r0, [pc, #60]	; 83bc <rpi_yield+0x48>
    837c:	ebffff6c 	bl	8134 <Q_empty>
    8380:	e3500000 	cmp	r0, #0
    8384:	18bd8070 	popne	{r4, r5, r6, pc}
		return;
	} else {
		rpi_thread_t* old_thread = cur_thread;
    8388:	e59f4030 	ldr	r4, [pc, #48]	; 83c0 <rpi_yield+0x4c>
    838c:	e5945010 	ldr	r5, [r4, #16]
		Q_append(&runq, cur_thread);
    8390:	e2846014 	add	r6, r4, #20
    8394:	e1a00006 	mov	r0, r6
    8398:	e1a01005 	mov	r1, r5
    839c:	ebffff46 	bl	80bc <Q_append>
		cur_thread = Q_pop(&runq);
    83a0:	e1a00006 	mov	r0, r6
    83a4:	ebffff81 	bl	81b0 <Q_pop>
    83a8:	e1a01000 	mov	r1, r0
    83ac:	e5840010 	str	r0, [r4, #16]
		rpi_cswitch(old_thread->reg_save_area, cur_thread->reg_save_area);
    83b0:	e1a00005 	mov	r0, r5
    83b4:	eb00005a 	bl	8524 <rpi_cswitch>
    83b8:	e8bd8070 	pop	{r4, r5, r6, pc}
    83bc:	00009d48 	andeq	r9, r0, r8, asr #26
    83c0:	00009d34 	andeq	r9, r0, r4, lsr sp

000083c4 <rpi_internal_check>:
    printk("rpithreads: done with all threads! returning\n");
}


// internal consistency checks.
void rpi_internal_check(void) {
    83c4:	e92d4030 	push	{r4, r5, lr}
    83c8:	e24dd014 	sub	sp, sp, #20
    // the blocks on the runq + freeq must equal the total ever allocated
    // or we have leaked storage.
    unsigned n_free = Q_nelem(&freeq),
    83cc:	e59f4068 	ldr	r4, [pc, #104]	; 843c <rpi_internal_check+0x78>
    83d0:	e1a00004 	mov	r0, r4
    83d4:	ebffff36 	bl	80b4 <Q_nelem>
    83d8:	e1a05000 	mov	r5, r0
             n_run = Q_nelem(&runq),
    83dc:	e2840014 	add	r0, r4, #20
    83e0:	ebffff33 	bl	80b4 <Q_nelem>
             n = n_free + n_run;
    83e4:	e0853000 	add	r3, r5, r0

    if(nalloced != n)
    83e8:	e594200c 	ldr	r2, [r4, #12]
    83ec:	e1520003 	cmp	r2, r3
    83f0:	0a000009 	beq	841c <rpi_internal_check+0x58>
        panic("storage leak: should have %d free blocks, have %d (runq=%d, freeq=%d)\n", 
    83f4:	e58d2000 	str	r2, [sp]
    83f8:	e58d3004 	str	r3, [sp, #4]
    83fc:	e58d5008 	str	r5, [sp, #8]
    8400:	e58d000c 	str	r0, [sp, #12]
    8404:	e59f0034 	ldr	r0, [pc, #52]	; 8440 <rpi_internal_check+0x7c>
    8408:	e59f1034 	ldr	r1, [pc, #52]	; 8444 <rpi_internal_check+0x80>
    840c:	e59f2034 	ldr	r2, [pc, #52]	; 8448 <rpi_internal_check+0x84>
    8410:	e3a03096 	mov	r3, #150	; 0x96
    8414:	eb0001da 	bl	8b84 <printk>
    8418:	eb00035a 	bl	9188 <rpi_reboot>
            nalloced, n, n_free,n_run);

    // active thread system: 
    //      walk through the run queue making sure the stack pointer
    //     and ra pointer makes sense.
    if(!Q_empty(&runq)) {
    841c:	e59f0028 	ldr	r0, [pc, #40]	; 844c <rpi_internal_check+0x88>
    8420:	ebffff43 	bl	8134 <Q_empty>
    8424:	e3500000 	cmp	r0, #0
    8428:	0a000001 	beq	8434 <rpi_internal_check+0x70>
        //unimplemented();
        return;
    }
    printk("thread: internal check passed\n");
    842c:	e59f001c 	ldr	r0, [pc, #28]	; 8450 <rpi_internal_check+0x8c>
    8430:	eb0001d3 	bl	8b84 <printk>
}
    8434:	e28dd014 	add	sp, sp, #20
    8438:	e8bd8030 	pop	{r4, r5, pc}
    843c:	00009d34 	andeq	r9, r0, r4, lsr sp
    8440:	000098a0 	andeq	r9, r0, r0, lsr #17
    8444:	00009890 	muleq	r0, r0, r8
    8448:	00009758 	andeq	r9, r0, r8, asr r7
    844c:	00009d48 	andeq	r9, r0, r8, asr #26
    8450:	000098f8 	strdeq	r9, [r0], -r8

00008454 <rpi_thread_start>:
/*
 * starts the thread system.  
 * note: our caller is not a thread!  so you have to figure
 * out how to handle this.
 */
void rpi_thread_start(void) {
    8454:	e92d4010 	push	{r4, lr}
    AssertNow(offsetof(rpi_thread_t, stack) % 8 == 0);
    // statically check that the register save area is at offset 0.
    AssertNow(offsetof(rpi_thread_t, reg_save_area) == 0);

    // no other runnable thread: return.
    if(Q_empty(&runq))
    8458:	e59f003c 	ldr	r0, [pc, #60]	; 849c <rpi_thread_start+0x48>
    845c:	ebffff34 	bl	8134 <Q_empty>
    8460:	e3500000 	cmp	r0, #0
    8464:	18bd8010 	popne	{r4, pc}
        return;
    rpi_internal_check();
    8468:	ebffffd5 	bl	83c4 <rpi_internal_check>
    //unimplemented();
    //  1. create a new fake thread 
    //  2. dequeue a thread from the runq
    //  3. context switch to it, saving current state in
    //	    <scheduler_thread>
    scheduler_thread = th_alloc();
    846c:	ebffff73 	bl	8240 <th_alloc>
    8470:	e59f4028 	ldr	r4, [pc, #40]	; 84a0 <rpi_thread_start+0x4c>
    8474:	e5840020 	str	r0, [r4, #32]
	cur_thread = Q_pop(&runq);
    8478:	e2840014 	add	r0, r4, #20
    847c:	ebffff4b 	bl	81b0 <Q_pop>
    8480:	e1a01000 	mov	r1, r0
    8484:	e5840010 	str	r0, [r4, #16]
	rpi_cswitch(scheduler_thread->reg_save_area, cur_thread->reg_save_area);
    8488:	e5940020 	ldr	r0, [r4, #32]
    848c:	eb000024 	bl	8524 <rpi_cswitch>
	//unimplemented();
    printk("rpithreads: done with all threads! returning\n");
    8490:	e59f000c 	ldr	r0, [pc, #12]	; 84a4 <rpi_thread_start+0x50>
    8494:	eb0001ba 	bl	8b84 <printk>
    8498:	e8bd8010 	pop	{r4, pc}
    849c:	00009d48 	andeq	r9, r0, r8, asr #26
    84a0:	00009d34 	andeq	r9, r0, r4, lsr sp
    84a4:	00009918 	andeq	r9, r0, r8, lsl r9

000084a8 <rpi_stack_check>:
    }
    printk("thread: internal check passed\n");
}

// check the current thread stack.
void rpi_stack_check(void) {
    84a8:	e92d4008 	push	{r3, lr}
    unimplemented();
    84ac:	e59f0010 	ldr	r0, [pc, #16]	; 84c4 <rpi_stack_check+0x1c>
    84b0:	e59f1010 	ldr	r1, [pc, #16]	; 84c8 <rpi_stack_check+0x20>
    84b4:	e59f2010 	ldr	r2, [pc, #16]	; 84cc <rpi_stack_check+0x24>
    84b8:	e3a030a4 	mov	r3, #164	; 0xa4
    84bc:	eb0001b0 	bl	8b84 <printk>
    84c0:	eb000330 	bl	9188 <rpi_reboot>
    84c4:	00009948 	andeq	r9, r0, r8, asr #18
    84c8:	00009890 	muleq	r0, r0, r8
    84cc:	0000976c 	andeq	r9, r0, ip, ror #14

000084d0 <rpi_join>:
/********************************************************************
 * save for homework.
 */

// block caller until thread <th> completes.
void rpi_join(rpi_thread_t *th) {
    84d0:	e92d4008 	push	{r3, lr}
    unimplemented();
    84d4:	e59f0010 	ldr	r0, [pc, #16]	; 84ec <rpi_join+0x1c>
    84d8:	e59f1010 	ldr	r1, [pc, #16]	; 84f0 <rpi_join+0x20>
    84dc:	e59f2010 	ldr	r2, [pc, #16]	; 84f4 <rpi_join+0x24>
    84e0:	e3a030ad 	mov	r3, #173	; 0xad
    84e4:	eb0001a6 	bl	8b84 <printk>
    84e8:	eb000326 	bl	9188 <rpi_reboot>
    84ec:	00009948 	andeq	r9, r0, r8, asr #18
    84f0:	00009890 	muleq	r0, r0, r8
    84f4:	0000977c 	andeq	r9, r0, ip, ror r7

000084f8 <rpi_exact_sleep>:
}

// put the current thread on a blocked queue: resume in 
// exactly // <usec> micro-seconds.  not before, not after.
// should give low-error resumption times.
void rpi_exact_sleep(uint32_t usec) {
    84f8:	e92d4008 	push	{r3, lr}
    unimplemented();
    84fc:	e59f0010 	ldr	r0, [pc, #16]	; 8514 <rpi_exact_sleep+0x1c>
    8500:	e59f1010 	ldr	r1, [pc, #16]	; 8518 <rpi_exact_sleep+0x20>
    8504:	e59f2010 	ldr	r2, [pc, #16]	; 851c <rpi_exact_sleep+0x24>
    8508:	e3a030b4 	mov	r3, #180	; 0xb4
    850c:	eb00019c 	bl	8b84 <printk>
    8510:	eb00031c 	bl	9188 <rpi_reboot>
    8514:	00009948 	andeq	r9, r0, r8, asr #18
    8518:	00009890 	muleq	r0, r0, r8
    851c:	00009788 	andeq	r9, r0, r8, lsl #15

00008520 <rpi_get_sp>:
    8520:	e12fff1e 	bx	lr

00008524 <rpi_cswitch>:
    8524:	e5804000 	str	r4, [r0]
    8528:	e5805004 	str	r5, [r0, #4]
    852c:	e5806008 	str	r6, [r0, #8]
    8530:	e580700c 	str	r7, [r0, #12]
    8534:	e5808010 	str	r8, [r0, #16]
    8538:	e5809014 	str	r9, [r0, #20]
    853c:	e580a018 	str	sl, [r0, #24]
    8540:	e580b01c 	str	fp, [r0, #28]
    8544:	e580c020 	str	ip, [r0, #32]
    8548:	e580e024 	str	lr, [r0, #36]	; 0x24
    854c:	e580d028 	str	sp, [r0, #40]	; 0x28
    8550:	e5914000 	ldr	r4, [r1]
    8554:	e5915004 	ldr	r5, [r1, #4]
    8558:	e5916008 	ldr	r6, [r1, #8]
    855c:	e591700c 	ldr	r7, [r1, #12]
    8560:	e5918010 	ldr	r8, [r1, #16]
    8564:	e5919014 	ldr	r9, [r1, #20]
    8568:	e591a018 	ldr	sl, [r1, #24]
    856c:	e591b01c 	ldr	fp, [r1, #28]
    8570:	e591c020 	ldr	ip, [r1, #32]
    8574:	e591e024 	ldr	lr, [r1, #36]	; 0x24
    8578:	e591d028 	ldr	sp, [r1, #40]	; 0x28
    857c:	e12fff1e 	bx	lr

00008580 <rpi_init_trampoline>:
    8580:	e1a00005 	mov	r0, r5
    8584:	e12fff34 	blx	r4
    8588:	ebffff63 	bl	831c <rpi_exit>

0000858c <cq_print>:
#ifdef LINUX
#   include <string.h>
#endif
#include "circular.h"

void cq_print(cq_t *c) {
    858c:	e92d4010 	push	{r4, lr}
    8590:	e24dd010 	sub	sp, sp, #16
    debug("cq print: head=%d, tail=%d, nelem=%d, empty=%d\n", 
    8594:	e59f205c 	ldr	r2, [pc, #92]	; 85f8 <cq_print+0x6c>
    8598:	e790e002 	ldr	lr, [r0, r2]
    859c:	e59f3058 	ldr	r3, [pc, #88]	; 85fc <cq_print+0x70>
    85a0:	e790c003 	ldr	ip, [r0, r3]
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }

// if adding 1 to head = tail, then we have no space.
static inline int cq_full(cq_t *q) { return (q->head+1) % CQ_N == q->tail; }

static inline unsigned cq_nelem(cq_t *q) { return (q->head - q->tail) % CQ_N; }
    85a4:	e7904002 	ldr	r4, [r0, r2]
    85a8:	e7901003 	ldr	r1, [r0, r3]
    85ac:	e0611004 	rsb	r1, r1, r4
    85b0:	e1a01981 	lsl	r1, r1, #19
    85b4:	e1a019a1 	lsr	r1, r1, #19
void cq_print(cq_t *c);

/*************************************************************************************
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }
    85b8:	e7902002 	ldr	r2, [r0, r2]
    85bc:	e7903003 	ldr	r3, [r0, r3]
    85c0:	e1520003 	cmp	r2, r3
    85c4:	13a03000 	movne	r3, #0
    85c8:	03a03001 	moveq	r3, #1
    85cc:	e58de000 	str	lr, [sp]
    85d0:	e58dc004 	str	ip, [sp, #4]
    85d4:	e58d1008 	str	r1, [sp, #8]
    85d8:	e58d300c 	str	r3, [sp, #12]
    85dc:	e59f001c 	ldr	r0, [pc, #28]	; 8600 <cq_print+0x74>
    85e0:	e59f101c 	ldr	r1, [pc, #28]	; 8604 <cq_print+0x78>
    85e4:	e59f201c 	ldr	r2, [pc, #28]	; 8608 <cq_print+0x7c>
    85e8:	e3a0300a 	mov	r3, #10
    85ec:	eb000164 	bl	8b84 <printk>
                c->head, c->tail, cq_nelem(c), cq_empty(c));
}
    85f0:	e28dd010 	add	sp, sp, #16
    85f4:	e8bd8010 	pop	{r4, pc}
    85f8:	00002004 	andeq	r2, r0, r4
    85fc:	00002008 	andeq	r2, r0, r8
    8600:	000099a8 	andeq	r9, r0, r8, lsr #19
    8604:	000099e4 	andeq	r9, r0, r4, ror #19
    8608:	00009974 	andeq	r9, r0, r4, ror r9

0000860c <cq_ok>:

void cq_ok(cq_t *c) {
    860c:	e92d4008 	push	{r3, lr}
    if(c->fence != 0x12345678)
    8610:	e3a03a02 	mov	r3, #8192	; 0x2000
    8614:	e7902003 	ldr	r2, [r0, r3]
    8618:	e59f301c 	ldr	r3, [pc, #28]	; 863c <cq_ok+0x30>
    861c:	e1520003 	cmp	r2, r3
    8620:	08bd8008 	popeq	{r3, pc}
        panic("fence is corrupted\n");
    8624:	e59f0014 	ldr	r0, [pc, #20]	; 8640 <cq_ok+0x34>
    8628:	e59f1014 	ldr	r1, [pc, #20]	; 8644 <cq_ok+0x38>
    862c:	e59f2014 	ldr	r2, [pc, #20]	; 8648 <cq_ok+0x3c>
    8630:	e3a0300f 	mov	r3, #15
    8634:	eb000152 	bl	8b84 <printk>
    8638:	eb0002d2 	bl	9188 <rpi_reboot>
    863c:	12345678 	eorsne	r5, r4, #120, 12	; 0x7800000
    8640:	000099f0 	strdeq	r9, [r0], -r0
    8644:	000099e4 	andeq	r9, r0, r4, ror #19
    8648:	00009980 	andeq	r9, r0, r0, lsl #19

0000864c <cq_init>:
}

void cq_init(cq_t *c, unsigned errors_fatal_p) {
    864c:	e92d4038 	push	{r3, r4, r5, lr}
    8650:	e1a04000 	mov	r4, r0
    8654:	e1a05001 	mov	r5, r1
    memset(c, 0, sizeof *c);
    8658:	e3a01000 	mov	r1, #0
    865c:	e59f215c 	ldr	r2, [pc, #348]	; 87c0 <cq_init+0x174>
    8660:	eb00013f 	bl	8b64 <memset>
    c->fence = 0x12345678;
    8664:	e59f2158 	ldr	r2, [pc, #344]	; 87c4 <cq_init+0x178>
    8668:	e3a03a02 	mov	r3, #8192	; 0x2000
    866c:	e7842003 	str	r2, [r4, r3]
    c->head = c->tail = 0;
    8670:	e59f2150 	ldr	r2, [pc, #336]	; 87c8 <cq_init+0x17c>
    8674:	e3a03000 	mov	r3, #0
    8678:	e7843002 	str	r3, [r4, r2]
    867c:	e59f0148 	ldr	r0, [pc, #328]	; 87cc <cq_init+0x180>
    8680:	e7843000 	str	r3, [r4, r0]
    c->overflow = 0;
    8684:	e59f1144 	ldr	r1, [pc, #324]	; 87d0 <cq_init+0x184>
    8688:	e7843001 	str	r3, [r4, r1]
    c->errors_fatal_p = errors_fatal_p;
    868c:	e59f3140 	ldr	r3, [pc, #320]	; 87d4 <cq_init+0x188>
    8690:	e7d41003 	ldrb	r1, [r4, r3]
    8694:	e2055001 	and	r5, r5, #1
    8698:	e3c11001 	bic	r1, r1, #1
    869c:	e1855001 	orr	r5, r5, r1
    86a0:	e7c45003 	strb	r5, [r4, r3]
    86a4:	e7941000 	ldr	r1, [r4, r0]
    86a8:	e7943002 	ldr	r3, [r4, r2]
    assert(cq_empty(c));
    86ac:	e1510003 	cmp	r1, r3
    86b0:	0a000005 	beq	86cc <cq_init+0x80>
    86b4:	e59f011c 	ldr	r0, [pc, #284]	; 87d8 <cq_init+0x18c>
    86b8:	e59f111c 	ldr	r1, [pc, #284]	; 87dc <cq_init+0x190>
    86bc:	e59f211c 	ldr	r2, [pc, #284]	; 87e0 <cq_init+0x194>
    86c0:	e3a03018 	mov	r3, #24
    86c4:	eb00012e 	bl	8b84 <printk>
    86c8:	eb0002ae 	bl	9188 <rpi_reboot>

// if adding 1 to head = tail, then we have no space.
static inline int cq_full(cq_t *q) { return (q->head+1) % CQ_N == q->tail; }
    86cc:	e59f30f8 	ldr	r3, [pc, #248]	; 87cc <cq_init+0x180>
    86d0:	e7942003 	ldr	r2, [r4, r3]
    86d4:	e2822001 	add	r2, r2, #1
    86d8:	e1a02982 	lsl	r2, r2, #19
    86dc:	e2833004 	add	r3, r3, #4
    86e0:	e7943003 	ldr	r3, [r4, r3]
    assert(!cq_full(c));
    86e4:	e15309a2 	cmp	r3, r2, lsr #19
    86e8:	1a000005 	bne	8704 <cq_init+0xb8>
    86ec:	e59f00f0 	ldr	r0, [pc, #240]	; 87e4 <cq_init+0x198>
    86f0:	e59f10e4 	ldr	r1, [pc, #228]	; 87dc <cq_init+0x190>
    86f4:	e59f20e4 	ldr	r2, [pc, #228]	; 87e0 <cq_init+0x194>
    86f8:	e3a03019 	mov	r3, #25
    86fc:	eb000120 	bl	8b84 <printk>
    8700:	eb0002a0 	bl	9188 <rpi_reboot>

static inline unsigned cq_nelem(cq_t *q) { return (q->head - q->tail) % CQ_N; }
    8704:	e59f30c0 	ldr	r3, [pc, #192]	; 87cc <cq_init+0x180>
    8708:	e7942003 	ldr	r2, [r4, r3]
    870c:	e2833004 	add	r3, r3, #4
    8710:	e7943003 	ldr	r3, [r4, r3]
    8714:	e0633002 	rsb	r3, r3, r2
    assert(cq_nelem(c) == 0);
    8718:	e1b03983 	lsls	r3, r3, #19
    871c:	0a000005 	beq	8738 <cq_init+0xec>
    8720:	e59f00c0 	ldr	r0, [pc, #192]	; 87e8 <cq_init+0x19c>
    8724:	e59f10b0 	ldr	r1, [pc, #176]	; 87dc <cq_init+0x190>
    8728:	e59f20b0 	ldr	r2, [pc, #176]	; 87e0 <cq_init+0x194>
    872c:	e3a0301a 	mov	r3, #26
    8730:	eb000113 	bl	8b84 <printk>
    8734:	eb000293 	bl	9188 <rpi_reboot>
void cq_print(cq_t *c);

/*************************************************************************************
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }
    8738:	e59f308c 	ldr	r3, [pc, #140]	; 87cc <cq_init+0x180>
    873c:	e7942003 	ldr	r2, [r4, r3]
    8740:	e2833004 	add	r3, r3, #4
    8744:	e7943003 	ldr	r3, [r4, r3]
static inline unsigned cq_nelem(cq_t *q) { return (q->head - q->tail) % CQ_N; }
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }

// not blocking: wait: this never calls getc?
static inline int cq_pop_nonblock(cq_t *c, cqe_t *e) {
    if(cq_empty(c))
    8748:	e1520003 	cmp	r2, r3
    874c:	0a000009 	beq	8778 <cq_init+0x12c>
        return 0;
    unsigned tail = c->tail;
    8750:	e59f3070 	ldr	r3, [pc, #112]	; 87c8 <cq_init+0x17c>
    8754:	e7942003 	ldr	r2, [r4, r3]
    *e = c->c_buf[tail];
    8758:	e7d41002 	ldrb	r1, [r4, r2]
    875c:	e6ef1071 	uxtb	r1, r1
    c->tail = (tail+1)%CQ_N;
    8760:	e2822001 	add	r2, r2, #1
    8764:	e1a02982 	lsl	r2, r2, #19
    8768:	e1a029a2 	lsr	r2, r2, #19
    876c:	e7842003 	str	r2, [r4, r3]
    return 1;
    8770:	e3a03001 	mov	r3, #1
    8774:	ea000001 	b	8780 <cq_init+0x134>
    cqe_t e = 0x12;
    8778:	e3a01012 	mov	r1, #18
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }

// not blocking: wait: this never calls getc?
static inline int cq_pop_nonblock(cq_t *c, cqe_t *e) {
    if(cq_empty(c))
        return 0;
    877c:	e3a03000 	mov	r3, #0
    assert(cq_pop_nonblock(c,&e) == 0 && e == 0x12);
    8780:	e3530000 	cmp	r3, #0
    8784:	1a000002 	bne	8794 <cq_init+0x148>
    8788:	e3510012 	cmp	r1, #18
    878c:	0a000002 	beq	879c <cq_init+0x150>
    8790:	ea000002 	b	87a0 <cq_init+0x154>
    8794:	e3a03000 	mov	r3, #0
    8798:	ea000000 	b	87a0 <cq_init+0x154>
    879c:	e3a03001 	mov	r3, #1
    87a0:	e3530000 	cmp	r3, #0
    87a4:	18bd8038 	popne	{r3, r4, r5, pc}
    87a8:	e59f003c 	ldr	r0, [pc, #60]	; 87ec <cq_init+0x1a0>
    87ac:	e59f1028 	ldr	r1, [pc, #40]	; 87dc <cq_init+0x190>
    87b0:	e59f2028 	ldr	r2, [pc, #40]	; 87e0 <cq_init+0x194>
    87b4:	e3a0301c 	mov	r3, #28
    87b8:	eb0000f1 	bl	8b84 <printk>
    87bc:	eb000271 	bl	9188 <rpi_reboot>
    87c0:	00002014 	andeq	r2, r0, r4, lsl r0
    87c4:	12345678 	eorsne	r5, r4, #120, 12	; 0x7800000
    87c8:	00002008 	andeq	r2, r0, r8
    87cc:	00002004 	andeq	r2, r0, r4
    87d0:	0000200c 	andeq	r2, r0, ip
    87d4:	00002010 	andeq	r2, r0, r0, lsl r0
    87d8:	00009a14 	andeq	r9, r0, r4, lsl sl
    87dc:	000099e4 	andeq	r9, r0, r4, ror #19
    87e0:	00009988 	andeq	r9, r0, r8, lsl #19
    87e4:	00009a30 	andeq	r9, r0, r0, lsr sl
    87e8:	00009a4c 	andeq	r9, r0, ip, asr #20
    87ec:	00009a70 	andeq	r9, r0, r0, ror sl

000087f0 <cq_pop>:
    assert(sz == cq_nelem(c));
    return 1;
}

// called from user space.
cqe_t cq_pop(cq_t *c) {
    87f0:	e92d0070 	push	{r4, r5, r6}
    87f4:	e1a03000 	mov	r3, r0
void cq_print(cq_t *c);

/*************************************************************************************
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }
    87f8:	e59f4054 	ldr	r4, [pc, #84]	; 8854 <cq_pop+0x64>
    87fc:	e59f2054 	ldr	r2, [pc, #84]	; 8858 <cq_pop+0x68>
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }

// not blocking: wait: this never calls getc?
static inline int cq_pop_nonblock(cq_t *c, cqe_t *e) {
    if(cq_empty(c))
        return 0;
    8800:	e3a06000 	mov	r6, #0
    unsigned tail = c->tail;
    *e = c->c_buf[tail];
    c->tail = (tail+1)%CQ_N;
    return 1;
    8804:	e3a00001 	mov	r0, #1
void cq_print(cq_t *c);

/*************************************************************************************
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }
    8808:	e793c004 	ldr	ip, [r3, r4]
    880c:	e7931002 	ldr	r1, [r3, r2]
static inline unsigned cq_nelem(cq_t *q) { return (q->head - q->tail) % CQ_N; }
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }

// not blocking: wait: this never calls getc?
static inline int cq_pop_nonblock(cq_t *c, cqe_t *e) {
    if(cq_empty(c))
    8810:	e15c0001 	cmp	ip, r1
    8814:	0a000008 	beq	883c <cq_pop+0x4c>
        return 0;
    unsigned tail = c->tail;
    8818:	e7931002 	ldr	r1, [r3, r2]
    *e = c->c_buf[tail];
    881c:	e7d35001 	ldrb	r5, [r3, r1]
    8820:	e6ef5075 	uxtb	r5, r5
    c->tail = (tail+1)%CQ_N;
    8824:	e2811001 	add	r1, r1, #1
    8828:	e1a01981 	lsl	r1, r1, #19
    882c:	e1a019a1 	lsr	r1, r1, #19
    8830:	e7831002 	str	r1, [r3, r2]
    return 1;
    8834:	e1a01000 	mov	r1, r0
    8838:	ea000000 	b	8840 <cq_pop+0x50>
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }

// not blocking: wait: this never calls getc?
static inline int cq_pop_nonblock(cq_t *c, cqe_t *e) {
    if(cq_empty(c))
        return 0;
    883c:	e1a01006 	mov	r1, r6
    cqe_t e;

	// wait til interrupt puts something here: if interrupts not enabled,
    // this will deadlock.
    while(!cq_pop_nonblock(c,&e))
    8840:	e3510000 	cmp	r1, #0
    8844:	0affffef 	beq	8808 <cq_pop+0x18>
        ;
        // panic("will deadlock: interrupts not enabled [FIXME]\n");
    return e;
}
    8848:	e1a00005 	mov	r0, r5
    884c:	e8bd0070 	pop	{r4, r5, r6}
    8850:	e12fff1e 	bx	lr
    8854:	00002004 	andeq	r2, r0, r4
    8858:	00002008 	andeq	r2, r0, r8

0000885c <cq_pop_n>:

void cq_pop_n(cq_t *c, void *data, unsigned n) {
    885c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    8860:	e1a07000 	mov	r7, r0
    8864:	e1a06001 	mov	r6, r1
    8868:	e1a05002 	mov	r5, r2
    cqe_t *p = data;

    for(int i = 0; i < n; i++)
    886c:	e3a04000 	mov	r4, #0
    8870:	ea000003 	b	8884 <cq_pop_n+0x28>
        p[i] = cq_pop(c);
    8874:	e1a00007 	mov	r0, r7
    8878:	ebffffdc 	bl	87f0 <cq_pop>
    887c:	e7c60004 	strb	r0, [r6, r4]
}

void cq_pop_n(cq_t *c, void *data, unsigned n) {
    cqe_t *p = data;

    for(int i = 0; i < n; i++)
    8880:	e2844001 	add	r4, r4, #1
    8884:	e1540005 	cmp	r4, r5
    8888:	3afffff9 	bcc	8874 <cq_pop_n+0x18>
        p[i] = cq_pop(c);
}
    888c:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

00008890 <cq_pop_n_noblk>:
    assert(cq_nelem(c) == 0);
    cqe_t e = 0x12;
    assert(cq_pop_nonblock(c,&e) == 0 && e == 0x12);
}

int cq_pop_n_noblk(cq_t *q, void *data, unsigned n) {
    8890:	e92d4070 	push	{r4, r5, r6, lr}
    8894:	e1a04000 	mov	r4, r0
    8898:	e1a06001 	mov	r6, r1
    889c:	e1a05002 	mov	r5, r2
    cq_ok(q);
    88a0:	ebffff59 	bl	860c <cq_ok>
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }

// if adding 1 to head = tail, then we have no space.
static inline int cq_full(cq_t *q) { return (q->head+1) % CQ_N == q->tail; }

static inline unsigned cq_nelem(cq_t *q) { return (q->head - q->tail) % CQ_N; }
    88a4:	e59f3038 	ldr	r3, [pc, #56]	; 88e4 <cq_pop_n_noblk+0x54>
    88a8:	e7942003 	ldr	r2, [r4, r3]
    88ac:	e2833004 	add	r3, r3, #4
    88b0:	e7943003 	ldr	r3, [r4, r3]
    88b4:	e0633002 	rsb	r3, r3, r2
    88b8:	e1a03983 	lsl	r3, r3, #19
    if(cq_nelem(q) < n)
    88bc:	e15509a3 	cmp	r5, r3, lsr #19
    88c0:	8a000005 	bhi	88dc <cq_pop_n_noblk+0x4c>
        return 0;
    cq_pop_n(q,data,n);
    88c4:	e1a00004 	mov	r0, r4
    88c8:	e1a01006 	mov	r1, r6
    88cc:	e1a02005 	mov	r2, r5
    88d0:	ebffffe1 	bl	885c <cq_pop_n>
    return 1;
    88d4:	e3a00001 	mov	r0, #1
    88d8:	e8bd8070 	pop	{r4, r5, r6, pc}
}

int cq_pop_n_noblk(cq_t *q, void *data, unsigned n) {
    cq_ok(q);
    if(cq_nelem(q) < n)
        return 0;
    88dc:	e3a00000 	mov	r0, #0
    cq_pop_n(q,data,n);
    return 1;
}
    88e0:	e8bd8070 	pop	{r4, r5, r6, pc}
    88e4:	00002004 	andeq	r2, r0, r4

000088e8 <cq_peek_n>:

// non-destructively peek ahead <n> entries.
int cq_peek_n(cq_t *c, cqe_t *v, unsigned n) {
    88e8:	e92d4070 	push	{r4, r5, r6, lr}
    88ec:	e1a04000 	mov	r4, r0
    88f0:	e59f307c 	ldr	r3, [pc, #124]	; 8974 <cq_peek_n+0x8c>
    88f4:	e7905003 	ldr	r5, [r0, r3]
    88f8:	e2833004 	add	r3, r3, #4
    88fc:	e7903003 	ldr	r3, [r0, r3]
    8900:	e0635005 	rsb	r5, r3, r5
    8904:	e1a05985 	lsl	r5, r5, #19
    8908:	e1a059a5 	lsr	r5, r5, #19
    int sz = cq_nelem(c);
    if(n > sz)
    890c:	e1520005 	cmp	r2, r5
    8910:	8a000013 	bhi	8964 <cq_peek_n+0x7c>
        return 0;
    unsigned tail = c->tail;
    8914:	e59f305c 	ldr	r3, [pc, #92]	; 8978 <cq_peek_n+0x90>
    8918:	e7906003 	ldr	r6, [r0, r3]
    if(!cq_pop_n_noblk(c, v, n))
    891c:	ebffffdb 	bl	8890 <cq_pop_n_noblk>
    8920:	e3500000 	cmp	r0, #0
    8924:	08bd8070 	popeq	{r4, r5, r6, pc}
        return 0;
    c->tail = tail;
    8928:	e59f3048 	ldr	r3, [pc, #72]	; 8978 <cq_peek_n+0x90>
    892c:	e7846003 	str	r6, [r4, r3]
    8930:	e59f203c 	ldr	r2, [pc, #60]	; 8974 <cq_peek_n+0x8c>
    8934:	e7942002 	ldr	r2, [r4, r2]
    8938:	e7943003 	ldr	r3, [r4, r3]
    893c:	e0633002 	rsb	r3, r3, r2
    8940:	e1a03983 	lsl	r3, r3, #19
    assert(sz == cq_nelem(c));
    8944:	e15509a3 	cmp	r5, r3, lsr #19
    8948:	0a000007 	beq	896c <cq_peek_n+0x84>
    894c:	e59f0028 	ldr	r0, [pc, #40]	; 897c <cq_peek_n+0x94>
    8950:	e59f1028 	ldr	r1, [pc, #40]	; 8980 <cq_peek_n+0x98>
    8954:	e59f2028 	ldr	r2, [pc, #40]	; 8984 <cq_peek_n+0x9c>
    8958:	e3a03030 	mov	r3, #48	; 0x30
    895c:	eb000088 	bl	8b84 <printk>
    8960:	eb000208 	bl	9188 <rpi_reboot>

// non-destructively peek ahead <n> entries.
int cq_peek_n(cq_t *c, cqe_t *v, unsigned n) {
    int sz = cq_nelem(c);
    if(n > sz)
        return 0;
    8964:	e3a00000 	mov	r0, #0
    8968:	e8bd8070 	pop	{r4, r5, r6, pc}
    unsigned tail = c->tail;
    if(!cq_pop_n_noblk(c, v, n))
        return 0;
    c->tail = tail;
    assert(sz == cq_nelem(c));
    return 1;
    896c:	e3a00001 	mov	r0, #1
}
    8970:	e8bd8070 	pop	{r4, r5, r6, pc}
    8974:	00002004 	andeq	r2, r0, r4
    8978:	00002008 	andeq	r2, r0, r8
    897c:	00009aa8 	andeq	r9, r0, r8, lsr #21
    8980:	000099e4 	andeq	r9, r0, r4, ror #19
    8984:	00009990 	muleq	r0, r0, r9

00008988 <cq_push_n>:

    for(int i = 0; i < n; i++)
        p[i] = cq_pop(c);
}

int cq_push_n(cq_t *c, void *data, unsigned n) {
    8988:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    898c:	e59f30f8 	ldr	r3, [pc, #248]	; 8a8c <cq_push_n+0x104>
    8990:	e790c003 	ldr	ip, [r0, r3]
    8994:	e2833004 	add	r3, r3, #4
    8998:	e7903003 	ldr	r3, [r0, r3]
    899c:	e063300c 	rsb	r3, r3, ip
    89a0:	e1a03983 	lsl	r3, r3, #19
    89a4:	e1a039a3 	lsr	r3, r3, #19
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }
    89a8:	e2633a02 	rsb	r3, r3, #8192	; 0x2000
    cqe_t *p = data;

    if(cq_nspace(c) < n)
    89ac:	e1520003 	cmp	r2, r3
    89b0:	8a00002f 	bhi	8a74 <cq_push_n+0xec>
    89b4:	e3a03000 	mov	r3, #0
    return 1;
}

// non-blocking push.
static inline int cq_push(cq_t *c, cqe_t x) {
    unsigned head = c->head;
    89b8:	e59fc0cc 	ldr	ip, [pc, #204]	; 8a8c <cq_push_n+0x104>
    unsigned tail = c->tail;
    89bc:	e59f50cc 	ldr	r5, [pc, #204]	; 8a90 <cq_push_n+0x108>
    if(cq_full(c)) 
        return 0;
    89c0:	e1a09003 	mov	r9, r3
    c->c_buf[head] = x;
    c->head = (head + 1) % CQ_N;
    return 1;
    89c4:	e3a08001 	mov	r8, #1
    89c8:	ea000019 	b	8a34 <cq_push_n+0xac>
        return 0;
    for(int i = 0; i < n; i++)
        if(!cq_push(c, p[i]))
    89cc:	e7d1a003 	ldrb	sl, [r1, r3]
    return 1;
}

// non-blocking push.
static inline int cq_push(cq_t *c, cqe_t x) {
    unsigned head = c->head;
    89d0:	e790400c 	ldr	r4, [r0, ip]
    unsigned tail = c->tail;
    89d4:	e7906005 	ldr	r6, [r0, r5]
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }

// if adding 1 to head = tail, then we have no space.
static inline int cq_full(cq_t *q) { return (q->head+1) % CQ_N == q->tail; }
    89d8:	e790700c 	ldr	r7, [r0, ip]
    89dc:	e2877001 	add	r7, r7, #1
    89e0:	e1a07987 	lsl	r7, r7, #19
    89e4:	e7906005 	ldr	r6, [r0, r5]

// non-blocking push.
static inline int cq_push(cq_t *c, cqe_t x) {
    unsigned head = c->head;
    unsigned tail = c->tail;
    if(cq_full(c)) 
    89e8:	e15609a7 	cmp	r6, r7, lsr #19
    89ec:	0a000006 	beq	8a0c <cq_push_n+0x84>
        return 0;
    c->c_buf[head] = x;
    89f0:	e7c0a004 	strb	sl, [r0, r4]
    c->head = (head + 1) % CQ_N;
    89f4:	e2844001 	add	r4, r4, #1
    89f8:	e1a04984 	lsl	r4, r4, #19
    89fc:	e1a049a4 	lsr	r4, r4, #19
    8a00:	e780400c 	str	r4, [r0, ip]
    return 1;
    8a04:	e1a04008 	mov	r4, r8
    8a08:	ea000000 	b	8a10 <cq_push_n+0x88>
// non-blocking push.
static inline int cq_push(cq_t *c, cqe_t x) {
    unsigned head = c->head;
    unsigned tail = c->tail;
    if(cq_full(c)) 
        return 0;
    8a0c:	e1a04009 	mov	r4, r9
    8a10:	e3540000 	cmp	r4, #0
    8a14:	1a000005 	bne	8a30 <cq_push_n+0xa8>
            panic("not handling this\n");
    8a18:	e59f0074 	ldr	r0, [pc, #116]	; 8a94 <cq_push_n+0x10c>
    8a1c:	e59f1074 	ldr	r1, [pc, #116]	; 8a98 <cq_push_n+0x110>
    8a20:	e59f2074 	ldr	r2, [pc, #116]	; 8a9c <cq_push_n+0x114>
    8a24:	e3a0304e 	mov	r3, #78	; 0x4e
    8a28:	eb000055 	bl	8b84 <printk>
    8a2c:	eb0001d5 	bl	9188 <rpi_reboot>
int cq_push_n(cq_t *c, void *data, unsigned n) {
    cqe_t *p = data;

    if(cq_nspace(c) < n)
        return 0;
    for(int i = 0; i < n; i++)
    8a30:	e2833001 	add	r3, r3, #1
    8a34:	e1530002 	cmp	r3, r2
    8a38:	3affffe3 	bcc	89cc <cq_push_n+0x44>
        if(!cq_push(c, p[i]))
            panic("not handling this\n");
    if(n)
    8a3c:	e3520000 	cmp	r2, #0
    8a40:	0a00000d 	beq	8a7c <cq_push_n+0xf4>
void cq_print(cq_t *c);

/*************************************************************************************
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }
    8a44:	e59f3040 	ldr	r3, [pc, #64]	; 8a8c <cq_push_n+0x104>
    8a48:	e7902003 	ldr	r2, [r0, r3]
    8a4c:	e2833004 	add	r3, r3, #4
    8a50:	e7903003 	ldr	r3, [r0, r3]
        assert(!cq_empty(c));
    8a54:	e1520003 	cmp	r2, r3
    8a58:	1a000009 	bne	8a84 <cq_push_n+0xfc>
    8a5c:	e59f003c 	ldr	r0, [pc, #60]	; 8aa0 <cq_push_n+0x118>
    8a60:	e59f1030 	ldr	r1, [pc, #48]	; 8a98 <cq_push_n+0x110>
    8a64:	e59f2030 	ldr	r2, [pc, #48]	; 8a9c <cq_push_n+0x114>
    8a68:	e3a03050 	mov	r3, #80	; 0x50
    8a6c:	eb000044 	bl	8b84 <printk>
    8a70:	eb0001c4 	bl	9188 <rpi_reboot>

int cq_push_n(cq_t *c, void *data, unsigned n) {
    cqe_t *p = data;

    if(cq_nspace(c) < n)
        return 0;
    8a74:	e3a00000 	mov	r0, #0
    8a78:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    for(int i = 0; i < n; i++)
        if(!cq_push(c, p[i]))
            panic("not handling this\n");
    if(n)
        assert(!cq_empty(c));
    return 1;
    8a7c:	e3a00001 	mov	r0, #1
    8a80:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8a84:	e3a00001 	mov	r0, #1
}
    8a88:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8a8c:	00002004 	andeq	r2, r0, r4
    8a90:	00002008 	andeq	r2, r0, r8
    8a94:	00009acc 	andeq	r9, r0, ip, asr #21
    8a98:	000099e4 	andeq	r9, r0, r4, ror #19
    8a9c:	0000999c 	muleq	r0, ip, r9
    8aa0:	00009af0 	strdeq	r9, [r0], -r0

00008aa4 <callee_save>:
    8aa4:	e12fff1e 	bx	lr

00008aa8 <store_one_asm>:
    8aa8:	e5801000 	str	r1, [r0]
    8aac:	e12fff1e 	bx	lr

00008ab0 <check_callee_save>:
    8ab0:	e3a04004 	mov	r4, #4
    8ab4:	e3a05005 	mov	r5, #5
    8ab8:	e3a06006 	mov	r6, #6
    8abc:	e3a07007 	mov	r7, #7
    8ac0:	e3a08008 	mov	r8, #8
    8ac4:	e3a09009 	mov	r9, #9
    8ac8:	e3a0a00a 	mov	sl, #10
    8acc:	e3a0b00b 	mov	fp, #11
    8ad0:	e3a0c00c 	mov	ip, #12
    8ad4:	e9202000 	stmdb	r0!, {sp}
    8ad8:	e9204ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00008adc <cswitch>:
    8adc:	e5804000 	str	r4, [r0]
    8ae0:	e5805004 	str	r5, [r0, #4]
    8ae4:	e5806008 	str	r6, [r0, #8]
    8ae8:	e580700c 	str	r7, [r0, #12]
    8aec:	e5808010 	str	r8, [r0, #16]
    8af0:	e5809014 	str	r9, [r0, #20]
    8af4:	e580a018 	str	sl, [r0, #24]
    8af8:	e580b01c 	str	fp, [r0, #28]
    8afc:	e580c020 	str	ip, [r0, #32]
    8b00:	e580e024 	str	lr, [r0, #36]	; 0x24
    8b04:	e580d028 	str	sp, [r0, #40]	; 0x28
    8b08:	e3a04004 	mov	r4, #4
    8b0c:	e3a05005 	mov	r5, #5
    8b10:	e3a06006 	mov	r6, #6
    8b14:	e3a07007 	mov	r7, #7
    8b18:	e3a08008 	mov	r8, #8
    8b1c:	e3a09009 	mov	r9, #9
    8b20:	e3a0a00a 	mov	sl, #10
    8b24:	e3a0b00b 	mov	fp, #11
    8b28:	e3a0c00c 	mov	ip, #12
    8b2c:	e3a0d00d 	mov	sp, #13
    8b30:	e3a0e00e 	mov	lr, #14
    8b34:	e5914000 	ldr	r4, [r1]
    8b38:	e5915004 	ldr	r5, [r1, #4]
    8b3c:	e5916008 	ldr	r6, [r1, #8]
    8b40:	e591700c 	ldr	r7, [r1, #12]
    8b44:	e5918010 	ldr	r8, [r1, #16]
    8b48:	e5919014 	ldr	r9, [r1, #20]
    8b4c:	e591a018 	ldr	sl, [r1, #24]
    8b50:	e591b01c 	ldr	fp, [r1, #28]
    8b54:	e591c020 	ldr	ip, [r1, #32]
    8b58:	e591e024 	ldr	lr, [r1, #36]	; 0x24
    8b5c:	e591d028 	ldr	sp, [r1, #40]	; 0x28
    8b60:	e12fff1e 	bx	lr

00008b64 <memset>:
#include <string.h>

void *memset(void *_p, int c, size_t n) {
    char *p = _p, *e = p + n;
    8b64:	e0802002 	add	r2, r0, r2
    8b68:	e1a03000 	mov	r3, r0

    while(p < e)
    8b6c:	ea000001 	b	8b78 <memset+0x14>
        *p++ = c;
    8b70:	e5c31000 	strb	r1, [r3]
    8b74:	e2833001 	add	r3, r3, #1
#include <string.h>

void *memset(void *_p, int c, size_t n) {
    char *p = _p, *e = p + n;

    while(p < e)
    8b78:	e1530002 	cmp	r3, r2
    8b7c:	3afffffb 	bcc	8b70 <memset+0xc>
        *p++ = c;
    return _p;
}
    8b80:	e12fff1e 	bx	lr

00008b84 <printk>:
#include <stdarg.h>

#include "rpi.h"
#include "va-printk.h"

int printk(const char *fmt, ...) {
    8b84:	e92d000f 	push	{r0, r1, r2, r3}
    8b88:	e92d4030 	push	{r4, r5, lr}
    8b8c:	e24dd00c 	sub	sp, sp, #12
    // this is a really huge buffer for a pi.   could do this better.
    static char buf[1024];
    va_list args;

    va_start(args, fmt);
    8b90:	e28d301c 	add	r3, sp, #28
    8b94:	e58d3004 	str	r3, [sp, #4]
        int sz = va_printk(buf, sizeof buf, fmt, args);
    8b98:	e59f4034 	ldr	r4, [pc, #52]	; 8bd4 <printk+0x50>
    8b9c:	e1a00004 	mov	r0, r4
    8ba0:	e3a01b01 	mov	r1, #1024	; 0x400
    8ba4:	e59d2018 	ldr	r2, [sp, #24]
    8ba8:	eb0000b2 	bl	8e78 <va_printk>
    8bac:	e1a05000 	mov	r5, r0
    va_end(args);


#if 1
    putk(buf);
    8bb0:	e59f3020 	ldr	r3, [pc, #32]	; 8bd8 <printk+0x54>
    8bb4:	e5933000 	ldr	r3, [r3]
    8bb8:	e1a00004 	mov	r0, r4
    8bbc:	e12fff33 	blx	r3
    int i;
    for(i = 0; buf[i]; i++)
        rpi_putchar(buf[i]);
#endif
    return sz;
}
    8bc0:	e1a00005 	mov	r0, r5
    8bc4:	e28dd00c 	add	sp, sp, #12
    8bc8:	e8bd4030 	pop	{r4, r5, lr}
    8bcc:	e28dd010 	add	sp, sp, #16
    8bd0:	e12fff1e 	bx	lr
    8bd4:	00009d58 	andeq	r9, r0, r8, asr sp
    8bd8:	000096cc 	andeq	r9, r0, ip, asr #13

00008bdc <internal_putk>:
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    8bdc:	e92d4038 	push	{r3, r4, r5, lr}
    8be0:	e1a04000 	mov	r4, r0
    for(; *p; p++)
        rpi_putchar(*p);
    8be4:	e59f5020 	ldr	r5, [pc, #32]	; 8c0c <internal_putk+0x30>
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    8be8:	ea000002 	b	8bf8 <internal_putk+0x1c>
        rpi_putchar(*p);
    8bec:	e5953000 	ldr	r3, [r5]
    8bf0:	e12fff33 	blx	r3
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    8bf4:	e2844001 	add	r4, r4, #1
    8bf8:	e5d40000 	ldrb	r0, [r4]
    8bfc:	e3500000 	cmp	r0, #0
    8c00:	1afffff9 	bne	8bec <internal_putk+0x10>
        rpi_putchar(*p);
//  we were adding this.
//  rpi_putchar('\n');
    return 1;
}
    8c04:	e3a00001 	mov	r0, #1
    8c08:	e8bd8038 	pop	{r3, r4, r5, pc}
    8c0c:	000096d0 	ldrdeq	r9, [r0], -r0

00008c10 <isdigit>:
    if(puts_fp)
        putk = puts_fp;
}

// XXX: check sign promotion.
static int isdigit(int c) { return c >= '0' && c <= '9'; }
    8c10:	e2400030 	sub	r0, r0, #48	; 0x30
    8c14:	e3500009 	cmp	r0, #9
    8c18:	83a00000 	movhi	r0, #0
    8c1c:	93a00001 	movls	r0, #1
    8c20:	e12fff1e 	bx	lr

00008c24 <pad>:

// don't move: can't be inlined, gcc seems to have a bug.
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
    8c24:	e0611000 	rsb	r1, r1, r0
	// pad with leading spaces
	for(; len < width; len++)
		*p++ = ' ';
    8c28:	e3a03020 	mov	r3, #32
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8c2c:	ea000002 	b	8c3c <pad+0x18>
		*p++ = ' ';
    8c30:	e5c03000 	strb	r3, [r0]
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8c34:	e2811001 	add	r1, r1, #1
		*p++ = ' ';
    8c38:	e2800001 	add	r0, r0, #1
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8c3c:	e1510002 	cmp	r1, r2
    8c40:	bafffffa 	blt	8c30 <pad+0xc>
		*p++ = ' ';
	*p = 0;
    8c44:	e3a03000 	mov	r3, #0
    8c48:	e5c03000 	strb	r3, [r0]
	return p;
}
    8c4c:	e12fff1e 	bx	lr

00008c50 <reverse>:

static char* reverse(char *dst, int n, char *p, char *start) {
	// drop the lower chars if the string is too big.
	int len = p - start + 1; // include \0
    8c50:	e063c002 	rsb	ip, r3, r2
    8c54:	e28cc001 	add	ip, ip, #1
	if(len > n)
    8c58:	e15c0001 	cmp	ip, r1
		start += (len - n);
    8c5c:	c061100c 	rsbgt	r1, r1, ip
    8c60:	c0833001 	addgt	r3, r3, r1

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    8c64:	e2422001 	sub	r2, r2, #1
    8c68:	e1a01000 	mov	r1, r0
    8c6c:	ea000002 	b	8c7c <reverse+0x2c>
		*dst++ = *p;
    8c70:	e452c001 	ldrb	ip, [r2], #-1
    8c74:	e5c1c000 	strb	ip, [r1]
    8c78:	e2811001 	add	r1, r1, #1
		start += (len - n);

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    8c7c:	e1520003 	cmp	r2, r3
    8c80:	2afffffa 	bcs	8c70 <reverse+0x20>
		*dst++ = *p;
	*dst++ = 0;
    8c84:	e3a03000 	mov	r3, #0
    8c88:	e5c13000 	strb	r3, [r1]

	return s;
}
    8c8c:	e12fff1e 	bx	lr

00008c90 <emit>:

static char* emit(unsigned base, char *dst, int n, int val, int width, int signed_p) {
    8c90:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8c94:	e24dd040 	sub	sp, sp, #64	; 0x40
    8c98:	e1a05001 	mov	r5, r1
    8c9c:	e1a04002 	mov	r4, r2
    8ca0:	e59d2058 	ldr	r2, [sp, #88]	; 0x58
	// XXX: constrain width to be >= bit size: can change this.
	if(width > n)
    8ca4:	e1520004 	cmp	r2, r4
		width = n - 1;
    8ca8:	c2442001 	subgt	r2, r4, #1

	char buf[64], *p = buf; 
	unsigned u = val;
    8cac:	e1a0c003 	mov	ip, r3

	switch(base) { 
    8cb0:	e2400002 	sub	r0, r0, #2
    8cb4:	e350000e 	cmp	r0, #14
    8cb8:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
    8cbc:	ea000042 	b	8dcc <emit+0x13c>
    8cc0:	00008da4 	andeq	r8, r0, r4, lsr #27
    8cc4:	00008dcc 	andeq	r8, r0, ip, asr #27
    8cc8:	00008dcc 	andeq	r8, r0, ip, asr #27
    8ccc:	00008dcc 	andeq	r8, r0, ip, asr #27
    8cd0:	00008dcc 	andeq	r8, r0, ip, asr #27
    8cd4:	00008dcc 	andeq	r8, r0, ip, asr #27
    8cd8:	00008d98 	muleq	r0, r8, sp
    8cdc:	00008dcc 	andeq	r8, r0, ip, asr #27
    8ce0:	00008cfc 	strdeq	r8, [r0], -ip
    8ce4:	00008dcc 	andeq	r8, r0, ip, asr #27
    8ce8:	00008dcc 	andeq	r8, r0, ip, asr #27
    8cec:	00008dcc 	andeq	r8, r0, ip, asr #27
    8cf0:	00008dcc 	andeq	r8, r0, ip, asr #27
    8cf4:	00008dcc 	andeq	r8, r0, ip, asr #27
    8cf8:	00008d70 	andeq	r8, r0, r0, ror sp
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
    8cfc:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
    8d00:	e2911000 	adds	r1, r1, #0
    8d04:	13a01001 	movne	r1, #1
    8d08:	e0111fa3 	ands	r1, r1, r3, lsr #31
				neg_p = 1;
				val = -val;
    8d0c:	1263c000 	rsbne	ip, r3, #0
	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
				neg_p = 1;
    8d10:	13a08001 	movne	r8, #1
	unsigned u = val;

	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
    8d14:	03a08000 	moveq	r8, #0
			if(val < 0 && signed_p) {
				neg_p = 1;
    8d18:	e1a0100d 	mov	r1, sp
				val = -val;
				u = val;
			}
			do { 
				*p++ = "0123456789"[u % 10];
    8d1c:	e59f70e8 	ldr	r7, [pc, #232]	; 8e0c <emit+0x17c>
    8d20:	e59f60e8 	ldr	r6, [pc, #232]	; 8e10 <emit+0x180>
    8d24:	ea000000 	b	8d2c <emit+0x9c>
    8d28:	e1a01003 	mov	r1, r3
    8d2c:	e2813001 	add	r3, r1, #1
    8d30:	e08e0c97 	umull	r0, lr, r7, ip
    8d34:	e1a0e1ae 	lsr	lr, lr, #3
    8d38:	e1a0000e 	mov	r0, lr
    8d3c:	e08ee10e 	add	lr, lr, lr, lsl #2
    8d40:	e1a0e08e 	lsl	lr, lr, #1
    8d44:	e06ee00c 	rsb	lr, lr, ip
    8d48:	e7d6c00e 	ldrb	ip, [r6, lr]
    8d4c:	e5c1c000 	strb	ip, [r1]
			} while(u /= 10); 
    8d50:	e1a0c000 	mov	ip, r0
    8d54:	e3500000 	cmp	r0, #0
    8d58:	1afffff2 	bne	8d28 <emit+0x98>
			if(neg_p)
    8d5c:	e3580000 	cmp	r8, #0
				*p++ = '-';
    8d60:	12813002 	addne	r3, r1, #2
    8d64:	13a0002d 	movne	r0, #45	; 0x2d
    8d68:	15c10001 	strbne	r0, [r1, #1]
    8d6c:	ea00001c 	b	8de4 <emit+0x154>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    8d70:	e1a0e00d 	mov	lr, sp
			break;
		}
		case 16:
			u = val;
                        do {
                                *p++ = "0123456789abcdef"[u % 16];
    8d74:	e59f0098 	ldr	r0, [pc, #152]	; 8e14 <emit+0x184>
    8d78:	e28e3001 	add	r3, lr, #1
    8d7c:	e20c100f 	and	r1, ip, #15
    8d80:	e7d01001 	ldrb	r1, [r0, r1]
    8d84:	e5ce1000 	strb	r1, [lr]
    8d88:	e1a0e003 	mov	lr, r3
                        } while(u /= 16);
    8d8c:	e1b0c22c 	lsrs	ip, ip, #4
    8d90:	1afffff8 	bne	8d78 <emit+0xe8>
    8d94:	ea000012 	b	8de4 <emit+0x154>
                        break;
		// just a single char
		case 8:
			*p++ = val;
    8d98:	e5cd3000 	strb	r3, [sp]
    8d9c:	e28d3001 	add	r3, sp, #1
			break;
    8da0:	ea00000f 	b	8de4 <emit+0x154>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    8da4:	e1a0e00d 	mov	lr, sp
#if 0
			for(int i = 0; i < 32; i++)
				*p++ = "01"[(u & (1<<i)) != 0];
#else
                        do {
                        	*p++ = "01"[u % 2];
    8da8:	e59f0068 	ldr	r0, [pc, #104]	; 8e18 <emit+0x188>
    8dac:	e28e3001 	add	r3, lr, #1
    8db0:	e20c1001 	and	r1, ip, #1
    8db4:	e7d01001 	ldrb	r1, [r0, r1]
    8db8:	e5ce1000 	strb	r1, [lr]
    8dbc:	e1a0e003 	mov	lr, r3
			} while(u /= 2);
    8dc0:	e1b0c0ac 	lsrs	ip, ip, #1
    8dc4:	1afffff8 	bne	8dac <emit+0x11c>
    8dc8:	ea000005 	b	8de4 <emit+0x154>
#endif
			break;
		default:
			assert(0);
    8dcc:	e59f0048 	ldr	r0, [pc, #72]	; 8e1c <emit+0x18c>
    8dd0:	e59f1048 	ldr	r1, [pc, #72]	; 8e20 <emit+0x190>
    8dd4:	e59f2048 	ldr	r2, [pc, #72]	; 8e24 <emit+0x194>
    8dd8:	e3a03075 	mov	r3, #117	; 0x75
    8ddc:	ebffff68 	bl	8b84 <printk>
    8de0:	eb0000e8 	bl	9188 <rpi_reboot>
	}
	// number string is reversed, so re-reverse it.
	return reverse(dst, n, pad(p, buf, width), buf);
    8de4:	e1a00003 	mov	r0, r3
    8de8:	e1a0100d 	mov	r1, sp
    8dec:	ebffff8c 	bl	8c24 <pad>
    8df0:	e1a02000 	mov	r2, r0
    8df4:	e1a00005 	mov	r0, r5
    8df8:	e1a01004 	mov	r1, r4
    8dfc:	e1a0300d 	mov	r3, sp
    8e00:	ebffff92 	bl	8c50 <reverse>
}
    8e04:	e28dd040 	add	sp, sp, #64	; 0x40
    8e08:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8e0c:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    8e10:	00009b5c 	andeq	r9, r0, ip, asr fp
    8e14:	00009b68 	andeq	r9, r0, r8, ror #22
    8e18:	00009b7c 	andeq	r9, r0, ip, ror fp
    8e1c:	00009b34 	andeq	r9, r0, r4, lsr fp
    8e20:	00009b48 	andeq	r9, r0, r8, asr #22
    8e24:	00009b10 	andeq	r9, r0, r0, lsl fp

00008e28 <rpi_set_output>:
// override this is going through the network.
int (*rpi_putchar)(int c) = internal_putchar;
#endif


void rpi_set_output(int (*putc_fp)(int), int (*puts_fp)(const char *)) {
    8e28:	e92d4008 	push	{r3, lr}
    assert(putc_fp);
    8e2c:	e3500000 	cmp	r0, #0
    8e30:	1a000005 	bne	8e4c <rpi_set_output+0x24>
    8e34:	e59f0028 	ldr	r0, [pc, #40]	; 8e64 <rpi_set_output+0x3c>
    8e38:	e59f1028 	ldr	r1, [pc, #40]	; 8e68 <rpi_set_output+0x40>
    8e3c:	e59f2028 	ldr	r2, [pc, #40]	; 8e6c <rpi_set_output+0x44>
    8e40:	e3a03020 	mov	r3, #32
    8e44:	ebffff4e 	bl	8b84 <printk>
    8e48:	eb0000ce 	bl	9188 <rpi_reboot>
    rpi_putchar = putc_fp;
    8e4c:	e59f301c 	ldr	r3, [pc, #28]	; 8e70 <rpi_set_output+0x48>
    8e50:	e5830000 	str	r0, [r3]
    if(puts_fp)
    8e54:	e3510000 	cmp	r1, #0
        putk = puts_fp;
    8e58:	159f3014 	ldrne	r3, [pc, #20]	; 8e74 <rpi_set_output+0x4c>
    8e5c:	15831000 	strne	r1, [r3]
    8e60:	e8bd8008 	pop	{r3, pc}
    8e64:	00009b80 	andeq	r9, r0, r0, lsl #23
    8e68:	00009b48 	andeq	r9, r0, r8, asr #22
    8e6c:	00009b18 	andeq	r9, r0, r8, lsl fp
    8e70:	000096d0 	ldrdeq	r9, [r0], -r0
    8e74:	000096cc 	andeq	r9, r0, ip, asr #13

00008e78 <va_printk>:
	return reverse(dst, n, pad(p, buf, width), buf);
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
    8e78:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8e7c:	e24dd08c 	sub	sp, sp, #140	; 0x8c
    8e80:	e1a0b000 	mov	fp, r0
    8e84:	e1a0a003 	mov	sl, r3
	char *p = buf, *e = buf + n - 1;
    8e88:	e2411001 	sub	r1, r1, #1
    8e8c:	e0808001 	add	r8, r0, r1

	buf[0] = 0;
    8e90:	e3a03000 	mov	r3, #0
    8e94:	e5c03000 	strb	r3, [r0]
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;
    8e98:	e1a04000 	mov	r4, r0

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    8e9c:	ea000087 	b	90c0 <va_printk+0x248>
		if(*fmt != '%')
    8ea0:	e3530025 	cmp	r3, #37	; 0x25
			*p++ = *fmt++;
    8ea4:	12822001 	addne	r2, r2, #1
    8ea8:	15c43000 	strbne	r3, [r4]
    8eac:	12844001 	addne	r4, r4, #1
    8eb0:	1a000082 	bne	90c0 <va_printk+0x248>
		
		else if(fmt[1] == '%') {
    8eb4:	e5d21001 	ldrb	r1, [r2, #1]
    8eb8:	e3510025 	cmp	r1, #37	; 0x25
			*p++ = *fmt;
    8ebc:	05c43000 	strbeq	r3, [r4]
			fmt+=2;
    8ec0:	02822002 	addeq	r2, r2, #2
	for(; *fmt && p < e; ) {
		if(*fmt != '%')
			*p++ = *fmt++;
		
		else if(fmt[1] == '%') {
			*p++ = *fmt;
    8ec4:	02844001 	addeq	r4, r4, #1
    8ec8:	0a00007c 	beq	90c0 <va_printk+0x248>
			fmt+=2;
		} else {	
			fmt++;
    8ecc:	e2826001 	add	r6, r2, #1

			char *s, num[128];
			unsigned width = 0;
    8ed0:	e3a07000 	mov	r7, #0

			while(isdigit(*fmt)) {
    8ed4:	ea000004 	b	8eec <va_printk+0x74>
				width = width*10 + *fmt - '0';
    8ed8:	e0877107 	add	r7, r7, r7, lsl #2
    8edc:	e1a07087 	lsl	r7, r7, #1
    8ee0:	e0877005 	add	r7, r7, r5
    8ee4:	e2477030 	sub	r7, r7, #48	; 0x30
				fmt++;
    8ee8:	e2866001 	add	r6, r6, #1
			fmt++;

			char *s, num[128];
			unsigned width = 0;

			while(isdigit(*fmt)) {
    8eec:	e5d65000 	ldrb	r5, [r6]
    8ef0:	e1a09005 	mov	r9, r5
    8ef4:	e1a00005 	mov	r0, r5
    8ef8:	ebffff44 	bl	8c10 <isdigit>
    8efc:	e3500000 	cmp	r0, #0
    8f00:	1afffff4 	bne	8ed8 <va_printk+0x60>
				width = width*10 + *fmt - '0';
				fmt++;
			}
			assert(width < 32);
    8f04:	e357001f 	cmp	r7, #31
    8f08:	9a000005 	bls	8f24 <va_printk+0xac>
    8f0c:	e59f01d8 	ldr	r0, [pc, #472]	; 90ec <va_printk+0x274>
    8f10:	e59f11d8 	ldr	r1, [pc, #472]	; 90f0 <va_printk+0x278>
    8f14:	e59f21d8 	ldr	r2, [pc, #472]	; 90f4 <va_printk+0x27c>
    8f18:	e3a03092 	mov	r3, #146	; 0x92
    8f1c:	ebffff18 	bl	8b84 <printk>
    8f20:	eb000098 	bl	9188 <rpi_reboot>
			
			switch(*fmt) {
    8f24:	e2455062 	sub	r5, r5, #98	; 0x62
    8f28:	e3550016 	cmp	r5, #22
    8f2c:	979ff105 	ldrls	pc, [pc, r5, lsl #2]
    8f30:	ea000051 	b	907c <va_printk+0x204>
    8f34:	00009020 	andeq	r9, r0, r0, lsr #32
    8f38:	00009054 	andeq	r9, r0, r4, asr r0
    8f3c:	00008fa8 	andeq	r8, r0, r8, lsr #31
    8f40:	0000907c 	andeq	r9, r0, ip, ror r0
    8f44:	00008f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
    8f48:	0000907c 	andeq	r9, r0, ip, ror r0
    8f4c:	0000907c 	andeq	r9, r0, ip, ror r0
    8f50:	0000907c 	andeq	r9, r0, ip, ror r0
    8f54:	0000907c 	andeq	r9, r0, ip, ror r0
    8f58:	0000907c 	andeq	r9, r0, ip, ror r0
    8f5c:	0000907c 	andeq	r9, r0, ip, ror r0
    8f60:	0000907c 	andeq	r9, r0, ip, ror r0
    8f64:	0000907c 	andeq	r9, r0, ip, ror r0
    8f68:	0000907c 	andeq	r9, r0, ip, ror r0
    8f6c:	00008ff8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    8f70:	0000907c 	andeq	r9, r0, ip, ror r0
    8f74:	0000907c 	andeq	r9, r0, ip, ror r0
    8f78:	00009048 	andeq	r9, r0, r8, asr #32
    8f7c:	0000907c 	andeq	r9, r0, ip, ror r0
    8f80:	00008fd0 	ldrdeq	r8, [r0], -r0
    8f84:	0000907c 	andeq	r9, r0, ip, ror r0
    8f88:	0000907c 	andeq	r9, r0, ip, ror r0
    8f8c:	00008ff8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
			case 'f':
			{
#ifndef RPI_FP_ENABLED
				panic("float not enabled!!!");
    8f90:	e59f0160 	ldr	r0, [pc, #352]	; 90f8 <va_printk+0x280>
    8f94:	e59f1154 	ldr	r1, [pc, #340]	; 90f0 <va_printk+0x278>
    8f98:	e59f2154 	ldr	r2, [pc, #340]	; 90f4 <va_printk+0x27c>
    8f9c:	e3a03098 	mov	r3, #152	; 0x98
    8fa0:	ebfffef7 	bl	8b84 <printk>
    8fa4:	eb000077 	bl	9188 <rpi_reboot>

				break;
#endif
			}
			case 'd':
				s = emit(10, num, 128, va_arg(args, int), width, 1);
    8fa8:	e59a3000 	ldr	r3, [sl]
    8fac:	e28aa004 	add	sl, sl, #4
    8fb0:	e58d7000 	str	r7, [sp]
    8fb4:	e3a02001 	mov	r2, #1
    8fb8:	e58d2004 	str	r2, [sp, #4]
    8fbc:	e3a0000a 	mov	r0, #10
    8fc0:	e28d1008 	add	r1, sp, #8
    8fc4:	e3a02080 	mov	r2, #128	; 0x80
    8fc8:	ebffff30 	bl	8c90 <emit>
				break;
    8fcc:	ea000031 	b	9098 <va_printk+0x220>
			case 'u':
				s = emit(10, num, 128, va_arg(args, unsigned), width, 0);
    8fd0:	e59a3000 	ldr	r3, [sl]
    8fd4:	e28aa004 	add	sl, sl, #4
    8fd8:	e58d7000 	str	r7, [sp]
    8fdc:	e3a02000 	mov	r2, #0
    8fe0:	e58d2004 	str	r2, [sp, #4]
    8fe4:	e3a0000a 	mov	r0, #10
    8fe8:	e28d1008 	add	r1, sp, #8
    8fec:	e3a02080 	mov	r2, #128	; 0x80
    8ff0:	ebffff26 	bl	8c90 <emit>
				break;
    8ff4:	ea000027 	b	9098 <va_printk+0x220>
			case 'p':
			case 'x':
				s = emit(16, num, 128, va_arg(args, unsigned), width, 0);
    8ff8:	e59a3000 	ldr	r3, [sl]
    8ffc:	e28aa004 	add	sl, sl, #4
    9000:	e58d7000 	str	r7, [sp]
    9004:	e3a02000 	mov	r2, #0
    9008:	e58d2004 	str	r2, [sp, #4]
    900c:	e3a00010 	mov	r0, #16
    9010:	e28d1008 	add	r1, sp, #8
    9014:	e3a02080 	mov	r2, #128	; 0x80
    9018:	ebffff1c 	bl	8c90 <emit>
				break;
    901c:	ea00001d 	b	9098 <va_printk+0x220>
			case 'b':
				s = emit(2, num, 128, va_arg(args, unsigned), width, 0);
    9020:	e59a3000 	ldr	r3, [sl]
    9024:	e28aa004 	add	sl, sl, #4
    9028:	e58d7000 	str	r7, [sp]
    902c:	e3a02000 	mov	r2, #0
    9030:	e58d2004 	str	r2, [sp, #4]
    9034:	e3a00002 	mov	r0, #2
    9038:	e28d1008 	add	r1, sp, #8
    903c:	e3a02080 	mov	r2, #128	; 0x80
    9040:	ebffff12 	bl	8c90 <emit>
				break;
    9044:	ea000013 	b	9098 <va_printk+0x220>
			case 's':
				s = va_arg(args, char *);
    9048:	e59a0000 	ldr	r0, [sl]
    904c:	e28aa004 	add	sl, sl, #4
				break;
    9050:	ea000010 	b	9098 <va_printk+0x220>
			case 'c':
				s = emit(8, num, 128, va_arg(args, int),width,0);
    9054:	e59a3000 	ldr	r3, [sl]
    9058:	e28aa004 	add	sl, sl, #4
    905c:	e58d7000 	str	r7, [sp]
    9060:	e3a02000 	mov	r2, #0
    9064:	e58d2004 	str	r2, [sp, #4]
    9068:	e3a00008 	mov	r0, #8
    906c:	e08d1000 	add	r1, sp, r0
    9070:	e3a02080 	mov	r2, #128	; 0x80
    9074:	ebffff05 	bl	8c90 <emit>
				break;
    9078:	ea000006 	b	9098 <va_printk+0x220>
			default: 
				panic("printk: not handling specifier '%c'\n", *fmt);
    907c:	e58d9000 	str	r9, [sp]
    9080:	e59f0074 	ldr	r0, [pc, #116]	; 90fc <va_printk+0x284>
    9084:	e59f1064 	ldr	r1, [pc, #100]	; 90f0 <va_printk+0x278>
    9088:	e59f2064 	ldr	r2, [pc, #100]	; 90f4 <va_printk+0x27c>
    908c:	e3a030b9 	mov	r3, #185	; 0xb9
    9090:	ebfffebb 	bl	8b84 <printk>
    9094:	eb00003b 	bl	9188 <rpi_reboot>
				return 0;   // ugh
			}
			fmt++;
    9098:	e2862001 	add	r2, r6, #1

			// safe string copy
			for(; p < e && *s; )
    909c:	ea000002 	b	90ac <va_printk+0x234>
				*p++ = *s++;
    90a0:	e2800001 	add	r0, r0, #1
    90a4:	e5c43000 	strb	r3, [r4]
    90a8:	e2844001 	add	r4, r4, #1
				return 0;   // ugh
			}
			fmt++;

			// safe string copy
			for(; p < e && *s; )
    90ac:	e1540008 	cmp	r4, r8
    90b0:	2a000002 	bcs	90c0 <va_printk+0x248>
    90b4:	e5d03000 	ldrb	r3, [r0]
    90b8:	e3530000 	cmp	r3, #0
    90bc:	1afffff7 	bne	90a0 <va_printk+0x228>

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    90c0:	e5d23000 	ldrb	r3, [r2]
    90c4:	e3530000 	cmp	r3, #0
    90c8:	0a000001 	beq	90d4 <va_printk+0x25c>
    90cc:	e1540008 	cmp	r4, r8
    90d0:	3affff72 	bcc	8ea0 <va_printk+0x28>
			// safe string copy
			for(; p < e && *s; )
				*p++ = *s++;
		}
	}
	*p++ = 0;
    90d4:	e2840001 	add	r0, r4, #1
    90d8:	e3a03000 	mov	r3, #0
    90dc:	e5c43000 	strb	r3, [r4]
	return p - buf;
}
    90e0:	e06b0000 	rsb	r0, fp, r0
    90e4:	e28dd08c 	add	sp, sp, #140	; 0x8c
    90e8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    90ec:	00009b98 	muleq	r0, r8, fp
    90f0:	00009b48 	andeq	r9, r0, r8, asr #22
    90f4:	00009b28 	andeq	r9, r0, r8, lsr #22
    90f8:	00009bb4 			; <UNDEFINED> instruction: 0x00009bb4
    90fc:	00009bdc 	ldrdeq	r9, [r0], -ip

00009100 <clean_reboot>:
#include "rpi.h"

// print out a special message so bootloader exits
void clean_reboot(void) {
    9100:	e92d4008 	push	{r3, lr}
    putk("DONE!!!\n");
    9104:	e59f3014 	ldr	r3, [pc, #20]	; 9120 <clean_reboot+0x20>
    9108:	e5933000 	ldr	r3, [r3]
    910c:	e59f0010 	ldr	r0, [pc, #16]	; 9124 <clean_reboot+0x24>
    9110:	e12fff33 	blx	r3
    delay_ms(100);       // (hopefully) enough time for message to get flushed.
    9114:	e3a00064 	mov	r0, #100	; 0x64
    9118:	eb000041 	bl	9224 <delay_ms>
    rpi_reboot();
    911c:	eb000019 	bl	9188 <rpi_reboot>
    9120:	000096cc 	andeq	r9, r0, ip, asr #13
    9124:	00009c14 	andeq	r9, r0, r4, lsl ip

00009128 <_cstart>:
#include "rpi.h"

void _cstart() {
    9128:	e92d4008 	push	{r3, lr}
    extern int __bss_start__, __bss_end__;
	void notmain();

    int* bss = &__bss_start__;
    912c:	e59f3020 	ldr	r3, [pc, #32]	; 9154 <_cstart+0x2c>
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    9130:	e59f2020 	ldr	r2, [pc, #32]	; 9158 <_cstart+0x30>
        *bss++ = 0;
    9134:	e3a01000 	mov	r1, #0
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    9138:	ea000001 	b	9144 <_cstart+0x1c>
        *bss++ = 0;
    913c:	e5831000 	str	r1, [r3]
    9140:	e2833004 	add	r3, r3, #4
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    9144:	e1530002 	cmp	r3, r2
    9148:	3afffffb 	bcc	913c <_cstart+0x14>
        *bss++ = 0;

    notmain(); 
    914c:	ebfffbbc 	bl	8044 <notmain>
	rpi_reboot();
    9150:	eb00000c 	bl	9188 <rpi_reboot>
    9154:	00009d34 	andeq	r9, r0, r4, lsr sp
    9158:	0000a160 	andeq	sl, r0, r0, ror #2

0000915c <at_user_level>:
 * works if we have a trashed stack pointer?
 */
static unsigned user_level = 0b10000;
int at_user_level(void) {
    unsigned cpsr = 0;
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    915c:	e10f0000 	mrs	r0, CPSR

    // user level = lower 5 bits = 0b10000);
    return (cpsr  & 0b11111)  == user_level;
    9160:	e200001f 	and	r0, r0, #31
}
    9164:	e3500010 	cmp	r0, #16
    9168:	13a00000 	movne	r0, #0
    916c:	03a00001 	moveq	r0, #1
    9170:	e12fff1e 	bx	lr

00009174 <set_user_level>:

// this is just used by the reboot code.
void set_user_level(void) {
    unsigned cpsr = 0;
    // XXX: shouldn't we just set the one bit?
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    9174:	e10f3000 	mrs	r3, CPSR
        cpsr = (cpsr & ~0b11111) | user_level;
    9178:	e3c3301f 	bic	r3, r3, #31
    917c:	e3833010 	orr	r3, r3, #16
    asm volatile("msr cpsr, %0" :: "r"(cpsr));
    9180:	e129f003 	msr	CPSR_fc, r3
    9184:	e12fff1e 	bx	lr

00009188 <rpi_reboot>:
}

void rpi_reboot(void) {
    9188:	e92d4008 	push	{r3, lr}
    if(at_user_level()) {
    918c:	ebfffff2 	bl	915c <at_user_level>
    9190:	e3500000 	cmp	r0, #0
    9194:	0a000000 	beq	919c <rpi_reboot+0x14>
        set_user_level();
    9198:	ebfffff5 	bl	9174 <set_user_level>
        // of stuff.
        // assert(!at_user_level());
    }

    // gives uart time to flush: should just call flush directly.
    delay_ms(30);
    919c:	e3a0001e 	mov	r0, #30
    91a0:	eb00001f 	bl	9224 <delay_ms>
    const int PM_WDOG = 0x20100024;
    const int PM_PASSWORD = 0x5a000000;
    const int PM_RSTC_WRCFG_FULL_RESET = 0x00000020;

    // timeout = 1/16th of a second? (whatever)
    PUT32(PM_WDOG, PM_PASSWORD | 1);
    91a4:	e59f0014 	ldr	r0, [pc, #20]	; 91c0 <rpi_reboot+0x38>
    91a8:	e59f1014 	ldr	r1, [pc, #20]	; 91c4 <rpi_reboot+0x3c>
    91ac:	eb000028 	bl	9254 <PUT32>
    PUT32(PM_RSTC, PM_PASSWORD | PM_RSTC_WRCFG_FULL_RESET);
    91b0:	e59f0010 	ldr	r0, [pc, #16]	; 91c8 <rpi_reboot+0x40>
    91b4:	e59f1010 	ldr	r1, [pc, #16]	; 91cc <rpi_reboot+0x44>
    91b8:	eb000025 	bl	9254 <PUT32>
    91bc:	eafffffe 	b	91bc <rpi_reboot+0x34>
    91c0:	20100024 	andscs	r0, r0, r4, lsr #32
    91c4:	5a000001 	bpl	91d0 <delay_cycles>
    91c8:	2010001c 	andscs	r0, r0, ip, lsl r0
    91cc:	5a000020 	bpl	9254 <PUT32>

000091d0 <delay_cycles>:
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    91d0:	ea000001 	b	91dc <delay_cycles+0xc>
        asm("add r1, r1, #0");
    91d4:	e2811000 	add	r1, r1, #0
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    91d8:	e1a00003 	mov	r0, r3
    91dc:	e2403001 	sub	r3, r0, #1
    91e0:	e3500000 	cmp	r0, #0
    91e4:	1afffffa 	bne	91d4 <delay_cycles+0x4>
        asm("add r1, r1, #0");
}
    91e8:	e12fff1e 	bx	lr

000091ec <timer_get_usec>:

// in usec
unsigned timer_get_usec(void) {
    91ec:	e92d4008 	push	{r3, lr}
    return GET32(0x20003004);
    91f0:	e59f0004 	ldr	r0, [pc, #4]	; 91fc <timer_get_usec+0x10>
    91f4:	eb000022 	bl	9284 <GET32>
}
    91f8:	e8bd8008 	pop	{r3, pc}
    91fc:	20003004 	andcs	r3, r0, r4

00009200 <delay_us>:

void delay_us(unsigned us) {
    9200:	e92d4038 	push	{r3, r4, r5, lr}
    9204:	e1a05000 	mov	r5, r0
    unsigned rb = timer_get_usec();
    9208:	ebfffff7 	bl	91ec <timer_get_usec>
    920c:	e1a04000 	mov	r4, r0
    while (1) {
        unsigned ra = timer_get_usec();
    9210:	ebfffff5 	bl	91ec <timer_get_usec>
        if ((ra - rb) >= us) {
    9214:	e0640000 	rsb	r0, r4, r0
    9218:	e1500005 	cmp	r0, r5
    921c:	3afffffb 	bcc	9210 <delay_us+0x10>
            break;
        }
    }
}
    9220:	e8bd8038 	pop	{r3, r4, r5, pc}

00009224 <delay_ms>:
void delay_ms(unsigned ms) {
    9224:	e92d4008 	push	{r3, lr}
    delay_us(ms*1000);
    9228:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    922c:	e0000093 	mul	r0, r3, r0
    9230:	ebfffff2 	bl	9200 <delay_us>
    9234:	e8bd8008 	pop	{r3, pc}

00009238 <delay_sec>:
}
void delay_sec(unsigned sec) {
    9238:	e92d4008 	push	{r3, lr}
    delay_ms(sec*1000);
    923c:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    9240:	e0000093 	mul	r0, r3, r0
    9244:	ebfffff6 	bl	9224 <delay_ms>
    9248:	e8bd8008 	pop	{r3, pc}

0000924c <put32>:
    924c:	e5801000 	str	r1, [r0]
    9250:	e12fff1e 	bx	lr

00009254 <PUT32>:
    9254:	e5801000 	str	r1, [r0]
    9258:	e12fff1e 	bx	lr

0000925c <put16>:
    925c:	e1c010b0 	strh	r1, [r0]
    9260:	e12fff1e 	bx	lr

00009264 <PUT16>:
    9264:	e1c010b0 	strh	r1, [r0]
    9268:	e12fff1e 	bx	lr

0000926c <put8>:
    926c:	e5c01000 	strb	r1, [r0]
    9270:	e12fff1e 	bx	lr

00009274 <PUT8>:
    9274:	e5c01000 	strb	r1, [r0]
    9278:	e12fff1e 	bx	lr

0000927c <get32>:
    927c:	e5900000 	ldr	r0, [r0]
    9280:	e12fff1e 	bx	lr

00009284 <GET32>:
    9284:	e5900000 	ldr	r0, [r0]
    9288:	e12fff1e 	bx	lr

0000928c <GETPC>:
    928c:	e1a0000e 	mov	r0, lr
    9290:	e12fff1e 	bx	lr

00009294 <dummy>:
    9294:	e12fff1e 	bx	lr

00009298 <or_in32>:
    9298:	e92d4070 	push	{r4, r5, r6, lr}
    929c:	e1a04000 	mov	r4, r0
    92a0:	e1a05001 	mov	r5, r1
    92a4:	ebfffff4 	bl	927c <get32>
    92a8:	e1801005 	orr	r1, r0, r5
    92ac:	e1a00004 	mov	r0, r4
    92b0:	ebffffe5 	bl	924c <put32>
    92b4:	e8bd8070 	pop	{r4, r5, r6, pc}

000092b8 <uart_get>:
    92b8:	e59f0000 	ldr	r0, [pc]	; 92c0 <uart_get+0x8>
    92bc:	e12fff1e 	bx	lr
    92c0:	20215040 	eorcs	r5, r1, r0, asr #32

000092c4 <uart_init>:
    92c4:	e92d4010 	push	{r4, lr}
    92c8:	e3a01002 	mov	r1, #2
    92cc:	e3a0000e 	mov	r0, #14
    92d0:	eb00004b 	bl	9404 <gpio_set_function>
    92d4:	e3a01002 	mov	r1, #2
    92d8:	e3a0000f 	mov	r0, #15
    92dc:	eb000048 	bl	9404 <gpio_set_function>
    92e0:	eb0000f2 	bl	96b0 <dev_barrier>
    92e4:	e3a01001 	mov	r1, #1
    92e8:	e59f0064 	ldr	r0, [pc, #100]	; 9354 <uart_init+0x90>
    92ec:	ebffffe9 	bl	9298 <or_in32>
    92f0:	eb0000ee 	bl	96b0 <dev_barrier>
    92f4:	e59f405c 	ldr	r4, [pc, #92]	; 9358 <uart_init+0x94>
    92f8:	e3a01000 	mov	r1, #0
    92fc:	e1a00004 	mov	r0, r4
    9300:	ebffffd1 	bl	924c <put32>
    9304:	e3a01000 	mov	r1, #0
    9308:	e59f004c 	ldr	r0, [pc, #76]	; 935c <uart_init+0x98>
    930c:	ebffffce 	bl	924c <put32>
    9310:	e3a01003 	mov	r1, #3
    9314:	e59f0044 	ldr	r0, [pc, #68]	; 9360 <uart_init+0x9c>
    9318:	ebffffcb 	bl	924c <put32>
    931c:	e3a01000 	mov	r1, #0
    9320:	e59f003c 	ldr	r0, [pc, #60]	; 9364 <uart_init+0xa0>
    9324:	ebffffc8 	bl	924c <put32>
    9328:	e3a010c7 	mov	r1, #199	; 0xc7
    932c:	e59f0034 	ldr	r0, [pc, #52]	; 9368 <uart_init+0xa4>
    9330:	ebffffc5 	bl	924c <put32>
    9334:	e59f1030 	ldr	r1, [pc, #48]	; 936c <uart_init+0xa8>
    9338:	e59f0030 	ldr	r0, [pc, #48]	; 9370 <uart_init+0xac>
    933c:	ebffffc2 	bl	924c <put32>
    9340:	e3a01003 	mov	r1, #3
    9344:	e1a00004 	mov	r0, r4
    9348:	ebffffbf 	bl	924c <put32>
    934c:	eb0000d7 	bl	96b0 <dev_barrier>
    9350:	e8bd8010 	pop	{r4, pc}
    9354:	20215004 	eorcs	r5, r1, r4
    9358:	20215060 	eorcs	r5, r1, r0, rrx
    935c:	20215044 	eorcs	r5, r1, r4, asr #32
    9360:	2021504c 	eorcs	r5, r1, ip, asr #32
    9364:	20215050 	eorcs	r5, r1, r0, asr r0
    9368:	20215048 	eorcs	r5, r1, r8, asr #32
    936c:	0000010e 	andeq	r0, r0, lr, lsl #2
    9370:	20215068 	eorcs	r5, r1, r8, rrx

00009374 <uart_can_getc>:
    9374:	e92d4010 	push	{r4, lr}
    9378:	e59f0008 	ldr	r0, [pc, #8]	; 9388 <uart_can_getc+0x14>
    937c:	ebffffbe 	bl	927c <get32>
    9380:	e2000001 	and	r0, r0, #1
    9384:	e8bd8010 	pop	{r4, pc}
    9388:	20215064 	eorcs	r5, r1, r4, rrx

0000938c <uart_can_putc>:
    938c:	e92d4010 	push	{r4, lr}
    9390:	e59f0010 	ldr	r0, [pc, #16]	; 93a8 <uart_can_putc+0x1c>
    9394:	ebffffb8 	bl	927c <get32>
    9398:	e3100002 	tst	r0, #2
    939c:	13a00001 	movne	r0, #1
    93a0:	03a00000 	moveq	r0, #0
    93a4:	e8bd8010 	pop	{r4, pc}
    93a8:	20215064 	eorcs	r5, r1, r4, rrx

000093ac <uart_getc>:
    93ac:	e92d4010 	push	{r4, lr}
    93b0:	ebffffef 	bl	9374 <uart_can_getc>
    93b4:	e3500000 	cmp	r0, #0
    93b8:	0afffffc 	beq	93b0 <uart_getc+0x4>
    93bc:	e59f0008 	ldr	r0, [pc, #8]	; 93cc <uart_getc+0x20>
    93c0:	ebffffad 	bl	927c <get32>
    93c4:	e6ef0070 	uxtb	r0, r0
    93c8:	e8bd8010 	pop	{r4, pc}
    93cc:	20215040 	eorcs	r5, r1, r0, asr #32

000093d0 <uart_putc>:
    93d0:	e92d4010 	push	{r4, lr}
    93d4:	e1a04000 	mov	r4, r0
    93d8:	ebffffeb 	bl	938c <uart_can_putc>
    93dc:	e3500000 	cmp	r0, #0
    93e0:	0afffffc 	beq	93d8 <uart_putc+0x8>
    93e4:	e6ef1074 	uxtb	r1, r4
    93e8:	e59f0004 	ldr	r0, [pc, #4]	; 93f4 <uart_putc+0x24>
    93ec:	ebffff96 	bl	924c <put32>
    93f0:	e8bd8010 	pop	{r4, pc}
    93f4:	20215040 	eorcs	r5, r1, r0, asr #32

000093f8 <uart_has_data>:
    93f8:	e92d4010 	push	{r4, lr}
    93fc:	ebffffdc 	bl	9374 <uart_can_getc>
    9400:	e8bd8010 	pop	{r4, pc}

00009404 <gpio_set_function>:
    9404:	e350001f 	cmp	r0, #31
    9408:	812fff1e 	bxhi	lr
    940c:	e3d13007 	bics	r3, r1, #7
    9410:	112fff1e 	bxne	lr
    9414:	e92d4070 	push	{r4, r5, r6, lr}
    9418:	e1a04001 	mov	r4, r1
    941c:	e59f2044 	ldr	r2, [pc, #68]	; 9468 <gpio_set_function+0x64>
    9420:	e0832290 	umull	r2, r3, r0, r2
    9424:	e1a031a3 	lsr	r3, r3, #3
    9428:	e1a06003 	mov	r6, r3
    942c:	e0833103 	add	r3, r3, r3, lsl #2
    9430:	e1a02083 	lsl	r2, r3, #1
    9434:	e0403002 	sub	r3, r0, r2
    9438:	e0835083 	add	r5, r3, r3, lsl #1
    943c:	e1a06106 	lsl	r6, r6, #2
    9440:	e2866202 	add	r6, r6, #536870912	; 0x20000000
    9444:	e2866602 	add	r6, r6, #2097152	; 0x200000
    9448:	e1a00006 	mov	r0, r6
    944c:	ebffff8a 	bl	927c <get32>
    9450:	e3a01007 	mov	r1, #7
    9454:	e1c01511 	bic	r1, r0, r1, lsl r5
    9458:	e1811514 	orr	r1, r1, r4, lsl r5
    945c:	e1a00006 	mov	r0, r6
    9460:	ebffff79 	bl	924c <put32>
    9464:	e8bd8070 	pop	{r4, r5, r6, pc}
    9468:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd

0000946c <gpio_set_output>:
    946c:	e92d4010 	push	{r4, lr}
    9470:	e3a01001 	mov	r1, #1
    9474:	ebffffe2 	bl	9404 <gpio_set_function>
    9478:	e8bd8010 	pop	{r4, pc}

0000947c <gpio_set_on>:
    947c:	e350001f 	cmp	r0, #31
    9480:	812fff1e 	bxhi	lr
    9484:	e92d4010 	push	{r4, lr}
    9488:	e3a01001 	mov	r1, #1
    948c:	e1a01011 	lsl	r1, r1, r0
    9490:	e59f0004 	ldr	r0, [pc, #4]	; 949c <gpio_set_on+0x20>
    9494:	ebffff6e 	bl	9254 <PUT32>
    9498:	e8bd8010 	pop	{r4, pc}
    949c:	2020001c 	eorcs	r0, r0, ip, lsl r0

000094a0 <gpio_set_off>:
    94a0:	e350001f 	cmp	r0, #31
    94a4:	812fff1e 	bxhi	lr
    94a8:	e92d4010 	push	{r4, lr}
    94ac:	e3a01001 	mov	r1, #1
    94b0:	e1a01011 	lsl	r1, r1, r0
    94b4:	e59f0004 	ldr	r0, [pc, #4]	; 94c0 <gpio_set_off+0x20>
    94b8:	ebffff65 	bl	9254 <PUT32>
    94bc:	e8bd8010 	pop	{r4, pc}
    94c0:	20200028 	eorcs	r0, r0, r8, lsr #32

000094c4 <gpio_set_input>:
    94c4:	e92d4010 	push	{r4, lr}
    94c8:	e3a01000 	mov	r1, #0
    94cc:	ebffffcc 	bl	9404 <gpio_set_function>
    94d0:	e8bd8010 	pop	{r4, pc}

000094d4 <gpio_write>:
    94d4:	e92d4010 	push	{r4, lr}
    94d8:	e3510000 	cmp	r1, #0
    94dc:	1a000001 	bne	94e8 <gpio_write+0x14>
    94e0:	ebffffee 	bl	94a0 <gpio_set_off>
    94e4:	e8bd8010 	pop	{r4, pc}
    94e8:	ebffffe3 	bl	947c <gpio_set_on>
    94ec:	e8bd8010 	pop	{r4, pc}

000094f0 <gpio_read>:
    94f0:	e350001f 	cmp	r0, #31
    94f4:	8a000007 	bhi	9518 <gpio_read+0x28>
    94f8:	e92d4010 	push	{r4, lr}
    94fc:	e200401f 	and	r4, r0, #31
    9500:	e59f3018 	ldr	r3, [pc, #24]	; 9520 <gpio_read+0x30>
    9504:	e08302a0 	add	r0, r3, r0, lsr #5
    9508:	ebffff5d 	bl	9284 <GET32>
    950c:	e1a00430 	lsr	r0, r0, r4
    9510:	e2000001 	and	r0, r0, #1
    9514:	e8bd8010 	pop	{r4, pc}
    9518:	e3e00000 	mvn	r0, #0
    951c:	e12fff1e 	bx	lr
    9520:	20200034 	eorcs	r0, r0, r4, lsr r0

00009524 <kmalloc>:
 *  - The returned pointer should always be 4-byte aligned.  
 *    Easiest way is to make sure the heap pointer starts 4-byte
 *    and you always round up the number of bytes.  Make sure
 *    you put an assertion in.  
 */
void *kmalloc(unsigned nbytes) {
    9524:	e92d4010 	push	{r4, lr}
    demand(init_p, calling before initialized);
    9528:	e59f3048 	ldr	r3, [pc, #72]	; 9578 <kmalloc+0x54>
    952c:	e5933000 	ldr	r3, [r3]
    9530:	e3530000 	cmp	r3, #0
    9534:	1a000005 	bne	9550 <kmalloc+0x2c>
    9538:	e59f003c 	ldr	r0, [pc, #60]	; 957c <kmalloc+0x58>
    953c:	e59f103c 	ldr	r1, [pc, #60]	; 9580 <kmalloc+0x5c>
    9540:	e59f203c 	ldr	r2, [pc, #60]	; 9584 <kmalloc+0x60>
    9544:	e3a0301a 	mov	r3, #26
    9548:	ebfffd8d 	bl	8b84 <printk>
    954c:	ebffff0d 	bl	9188 <rpi_reboot>
    
    void* to_allocate = heap_ptr;
    9550:	e59f3020 	ldr	r3, [pc, #32]	; 9578 <kmalloc+0x54>
    9554:	e5934004 	ldr	r4, [r3, #4]
    unsigned rounded_nbytes = roundup(nbytes, 4);
    9558:	e2802003 	add	r2, r0, #3
    955c:	e3c22003 	bic	r2, r2, #3
    heap_ptr += rounded_nbytes;
    9560:	e0840002 	add	r0, r4, r2
    9564:	e5830004 	str	r0, [r3, #4]
    memset(heap_ptr, 0, rounded_nbytes);
    9568:	e3a01000 	mov	r1, #0
    956c:	ebfffd7c 	bl	8b64 <memset>
    return to_allocate;

}
    9570:	e1a00004 	mov	r0, r4
    9574:	e8bd8010 	pop	{r4, pc}
    9578:	0000a158 	andeq	sl, r0, r8, asr r1
    957c:	00009c48 	andeq	r9, r0, r8, asr #24
    9580:	00009c88 	andeq	r9, r0, r8, lsl #25
    9584:	00009c20 	andeq	r9, r0, r0, lsr #24

00009588 <kmalloc_aligned>:

// address of returned pointer should be a multiple of
// alignment.
void *kmalloc_aligned(unsigned nbytes, unsigned alignment) {
    9588:	e92d4008 	push	{r3, lr}
    demand(init_p, calling before initialized);
    958c:	e59f3074 	ldr	r3, [pc, #116]	; 9608 <kmalloc_aligned+0x80>
    9590:	e5933000 	ldr	r3, [r3]
    9594:	e3530000 	cmp	r3, #0
    9598:	1a000005 	bne	95b4 <kmalloc_aligned+0x2c>
    959c:	e59f0068 	ldr	r0, [pc, #104]	; 960c <kmalloc_aligned+0x84>
    95a0:	e59f1068 	ldr	r1, [pc, #104]	; 9610 <kmalloc_aligned+0x88>
    95a4:	e59f2068 	ldr	r2, [pc, #104]	; 9614 <kmalloc_aligned+0x8c>
    95a8:	e3a03027 	mov	r3, #39	; 0x27
    95ac:	ebfffd74 	bl	8b84 <printk>
    95b0:	ebfffef4 	bl	9188 <rpi_reboot>

    if(alignment <= 4)
    95b4:	e3510004 	cmp	r1, #4
    95b8:	8a000001 	bhi	95c4 <kmalloc_aligned+0x3c>
        return kmalloc(nbytes);
    95bc:	ebffffd8 	bl	9524 <kmalloc>
    95c0:	e8bd8008 	pop	{r3, pc}
    demand(alignment % 4 == 0, "weird alignment: not a multiple of 4!");
    95c4:	e3110003 	tst	r1, #3
    95c8:	0a000005 	beq	95e4 <kmalloc_aligned+0x5c>
    95cc:	e59f0044 	ldr	r0, [pc, #68]	; 9618 <kmalloc_aligned+0x90>
    95d0:	e59f1038 	ldr	r1, [pc, #56]	; 9610 <kmalloc_aligned+0x88>
    95d4:	e59f2038 	ldr	r2, [pc, #56]	; 9614 <kmalloc_aligned+0x8c>
    95d8:	e3a0302b 	mov	r3, #43	; 0x2b
    95dc:	ebfffd68 	bl	8b84 <printk>
    95e0:	ebfffee8 	bl	9188 <rpi_reboot>
    unsigned aligned_heap_ptr = (unsigned) heap_ptr;
    95e4:	e59f301c 	ldr	r3, [pc, #28]	; 9608 <kmalloc_aligned+0x80>
    95e8:	e5932004 	ldr	r2, [r3, #4]
	aligned_heap_ptr = roundup(aligned_heap_ptr, alignment);
    95ec:	e0812002 	add	r2, r1, r2
    95f0:	e2422001 	sub	r2, r2, #1
    95f4:	e2611000 	rsb	r1, r1, #0
    95f8:	e0021001 	and	r1, r2, r1
	heap_ptr = (void*) aligned_heap_ptr;
    95fc:	e5831004 	str	r1, [r3, #4]

	return kmalloc(nbytes);
    9600:	ebffffc7 	bl	9524 <kmalloc>
}
    9604:	e8bd8008 	pop	{r3, pc}
    9608:	0000a158 	andeq	sl, r0, r8, asr r1
    960c:	00009c48 	andeq	r9, r0, r8, asr #24
    9610:	00009c88 	andeq	r9, r0, r8, lsl #25
    9614:	00009c28 	andeq	r9, r0, r8, lsr #24
    9618:	00009c9c 	muleq	r0, ip, ip

0000961c <kmalloc_init>:
 *    - should be just a few lines of code.
 *    - sets heap pointer to the location of 
 *      __heap_start__.   print this to make sure
 *      it makes sense!
 */
void kmalloc_init(void) {
    961c:	e92d4008 	push	{r3, lr}
    demand(!init_p, cannot initialize twice!\n);
    9620:	e59f3038 	ldr	r3, [pc, #56]	; 9660 <kmalloc_init+0x44>
    9624:	e5933000 	ldr	r3, [r3]
    9628:	e3530000 	cmp	r3, #0
    962c:	0a000005 	beq	9648 <kmalloc_init+0x2c>
    9630:	e59f002c 	ldr	r0, [pc, #44]	; 9664 <kmalloc_init+0x48>
    9634:	e59f102c 	ldr	r1, [pc, #44]	; 9668 <kmalloc_init+0x4c>
    9638:	e59f202c 	ldr	r2, [pc, #44]	; 966c <kmalloc_init+0x50>
    963c:	e3a0303c 	mov	r3, #60	; 0x3c
    9640:	ebfffd4f 	bl	8b84 <printk>
    9644:	ebfffecf 	bl	9188 <rpi_reboot>
    init_p = 1;
    9648:	e59f3010 	ldr	r3, [pc, #16]	; 9660 <kmalloc_init+0x44>
    964c:	e3a02001 	mov	r2, #1
    9650:	e5832000 	str	r2, [r3]
    heap_ptr = &__heap_start__;
    9654:	e59f2014 	ldr	r2, [pc, #20]	; 9670 <kmalloc_init+0x54>
    9658:	e5832004 	str	r2, [r3, #4]
    965c:	e8bd8008 	pop	{r3, pc}
    9660:	0000a158 	andeq	sl, r0, r8, asr r1
    9664:	00009cf4 	strdeq	r9, [r0], -r4
    9668:	00009c88 	andeq	r9, r0, r8, lsl #25
    966c:	00009c38 	andeq	r9, r0, r8, lsr ip
    9670:	0000a160 	andeq	sl, r0, r0, ror #2

00009674 <kfree_all>:
/* 
 * free all allocated memory: reset the heap 
 * pointer back to the beginning.
 */
void kfree_all(void) {
    heap_ptr = &__heap_start__;
    9674:	e59f2008 	ldr	r2, [pc, #8]	; 9684 <kfree_all+0x10>
    9678:	e59f3008 	ldr	r3, [pc, #8]	; 9688 <kfree_all+0x14>
    967c:	e5832004 	str	r2, [r3, #4]
    9680:	e12fff1e 	bx	lr
    9684:	0000a160 	andeq	sl, r0, r0, ror #2
    9688:	0000a158 	andeq	sl, r0, r8, asr r1

0000968c <kmalloc_heap_ptr>:
// allocated block satisfies: 
//    assert(<addr> < kmalloc_heap_ptr());
// 
void *kmalloc_heap_ptr(void) {
    return (void*) heap_ptr;
}
    968c:	e59f3004 	ldr	r3, [pc, #4]	; 9698 <kmalloc_heap_ptr+0xc>
    9690:	e5930004 	ldr	r0, [r3, #4]
    9694:	e12fff1e 	bx	lr
    9698:	0000a158 	andeq	sl, r0, r8, asr r1

0000969c <internal_putchar>:
#include "rpi.h"

static int internal_putchar(int c) { uart_putc(c); return c; }
    969c:	e92d4010 	push	{r4, lr}
    96a0:	e1a04000 	mov	r4, r0
    96a4:	ebffff49 	bl	93d0 <uart_putc>
    96a8:	e1a00004 	mov	r0, r4
    96ac:	e8bd8010 	pop	{r4, pc}

000096b0 <dev_barrier>:
    96b0:	ea000002 	b	96c0 <dsb>

000096b4 <dmb>:
    96b4:	e3a00000 	mov	r0, #0
    96b8:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
    96bc:	e12fff1e 	bx	lr

000096c0 <dsb>:
    96c0:	ee070f9a 	mcr	15, 0, r0, cr7, cr10, {4}
    96c4:	e12fff1e 	bx	lr

Disassembly of section .data:

000096c8 <tid>:
    96c8:	00000001 	andeq	r0, r0, r1

000096cc <putk>:
    96cc:	00008bdc 	ldrdeq	r8, [r0], -ip

000096d0 <rpi_putchar>:
    96d0:	0000969c 	muleq	r0, ip, r6

Disassembly of section .rodata:

000096d4 <__FUNCTION__.4169>:
    96d4:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    96d8:	6e615f74 	mcrvs	15, 3, r5, cr1, cr4, {3}
    96dc:	69645f64 	stmdbvs	r4!, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    96e0:	00000065 	andeq	r0, r0, r5, rrx
    96e4:	76697274 			; <UNDEFINED> instruction: 0x76697274
    96e8:	206c6169 	rsbcs	r6, ip, r9, ror #2
    96ec:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
    96f0:	203a6461 	eorscs	r6, sl, r1, ror #8
    96f4:	3d677261 	sfmcc	f7, 2, [r7, #-388]!	; 0xfffffe7c
    96f8:	000a6425 	andeq	r6, sl, r5, lsr #8
    96fc:	43435553 	movtmi	r5, #13651	; 0x3553
    9700:	0a535345 	beq	14de41c <__bss_end__+0x14d42bc>
    9704:	00000000 	andeq	r0, r0, r0
    9708:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    970c:	73253a43 	teqvc	r5, #274432	; 0x43000
    9710:	3a73253a 	bcc	1cd2c00 <__bss_end__+0x1cc8aa0>
    9714:	733a6425 	teqvc	sl, #620756992	; 0x25000000
    9718:	6c756f68 	ldclvs	15, cr6, [r5], #-416	; 0xfffffe60
    971c:	6f6e2064 	svcvs	0x006e2064
    9720:	61632074 	smcvs	12804	; 0x3204
    9724:	0a0a6c6c 	beq	2a48dc <__bss_end__+0x29a77c>
    9728:	00000000 	andeq	r0, r0, r0
    972c:	65742d34 	ldrbvs	r2, [r4, #-3380]!	; 0xd34
    9730:	652d7473 	strvs	r7, [sp, #-1139]!	; 0x473
    9734:	2e746978 	mrccs	9, 3, r6, cr4, cr8, {3}
    9738:	00000063 	andeq	r0, r0, r3, rrx

0000973c <__FUNCTION__.4172>:
    973c:	6d655f51 	stclvs	15, cr5, [r5, #-324]!	; 0xfffffebc
    9740:	00797470 	rsbseq	r7, r9, r0, ror r4

00009744 <__FUNCTION__.4176>:
    9744:	6f705f51 	svcvs	0x00705f51
    9748:	00000070 	andeq	r0, r0, r0, ror r0

0000974c <__FUNCTION__.4204>:
    974c:	615f6874 	cmpvs	pc, r4, ror r8	; <UNPREDICTABLE>
    9750:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    9754:	00000000 	andeq	r0, r0, r0

00009758 <__FUNCTION__.4239>:
    9758:	5f697072 	svcpl	0x00697072
    975c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    9760:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    9764:	6568635f 	strbvs	r6, [r8, #-863]!	; 0x35f
    9768:	00006b63 	andeq	r6, r0, r3, ror #22

0000976c <__FUNCTION__.4243>:
    976c:	5f697072 	svcpl	0x00697072
    9770:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    9774:	68635f6b 	stmdavs	r3!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    9778:	006b6365 	rsbeq	r6, fp, r5, ror #6

0000977c <__FUNCTION__.4247>:
    977c:	5f697072 	svcpl	0x00697072
    9780:	6e696f6a 	cdpvs	15, 6, cr6, cr9, cr10, {3}
    9784:	00000000 	andeq	r0, r0, r0

00009788 <__FUNCTION__.4251>:
    9788:	5f697072 	svcpl	0x00697072
    978c:	63617865 	cmnvs	r1, #6619136	; 0x650000
    9790:	6c735f74 	ldclvs	15, cr5, [r3], #-464	; 0xfffffe30
    9794:	00706565 	rsbseq	r6, r0, r5, ror #10
    9798:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    979c:	73253a43 	teqvc	r5, #274432	; 0x43000
    97a0:	3a73253a 	bcc	1cd2c90 <__bss_end__+0x1cc8b30>
    97a4:	513a6425 	teqpl	sl, r5, lsr #8
    97a8:	6c656e5f 	stclvs	14, cr6, [r5], #-380	; 0xfffffe84
    97ac:	71286d65 	teqvc	r8, r5, ror #26
    97b0:	3d3d2029 	ldccc	0, cr2, [sp, #-164]!	; 0xffffff5c
    97b4:	000a3020 	andeq	r3, sl, r0, lsr #32
    97b8:	00682e51 	rsbeq	r2, r8, r1, asr lr
    97bc:	4f525245 	svcmi	0x00525245
    97c0:	73253a52 	teqvc	r5, #335872	; 0x52000
    97c4:	3a73253a 	bcc	1cd2cb4 <__bss_end__+0x1cc8b54>
    97c8:	203a6425 	eorscs	r6, sl, r5, lsr #8
    97cc:	534c4146 	movtpl	r4, #49478	; 0xc146
    97d0:	213c2845 	teqcs	ip, r5, asr #16
    97d4:	743e2d71 	ldrtvc	r2, [lr], #-3441	; 0xd71
    97d8:	3e6c6961 	cdpcc	9, 6, cr6, cr12, cr1, {3}
    97dc:	69203a29 	stmdbvs	r0!, {r0, r3, r5, r9, fp, ip, sp}
    97e0:	6c61766e 	stclvs	6, cr7, [r1], #-440	; 0xfffffe48
    97e4:	51206469 	teqpl	r0, r9, ror #8
    97e8:	0000000a 	andeq	r0, r0, sl
    97ec:	4f525245 	svcmi	0x00525245
    97f0:	73253a52 	teqvc	r5, #335872	; 0x52000
    97f4:	3a73253a 	bcc	1cd2ce4 <__bss_end__+0x1cc8b84>
    97f8:	203a6425 	eorscs	r6, sl, r5, lsr #8
    97fc:	534c4146 	movtpl	r4, #49478	; 0xc146
    9800:	713c2845 	teqvc	ip, r5, asr #16
    9804:	203a293e 	eorscs	r2, sl, lr, lsr r9
    9808:	20646162 	rsbcs	r6, r4, r2, ror #2
    980c:	75706e69 	ldrbvc	r6, [r0, #-3689]!	; 0xe69
    9810:	00000a74 	andeq	r0, r0, r4, ror sl
    9814:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9818:	73253a43 	teqvc	r5, #274432	; 0x43000
    981c:	3a73253a 	bcc	1cd2d0c <__bss_end__+0x1cc8bac>
    9820:	513a6425 	teqpl	sl, r5, lsr #8
    9824:	706d655f 	rsbvc	r6, sp, pc, asr r5
    9828:	71287974 	teqvc	r8, r4, ror r9
    982c:	00000a29 	andeq	r0, r0, r9, lsr #20
    9830:	4f525245 	svcmi	0x00525245
    9834:	73253a52 	teqvc	r5, #335872	; 0x52000
    9838:	3a73253a 	bcc	1cd2d28 <__bss_end__+0x1cc8bc8>
    983c:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9840:	534c4146 	movtpl	r4, #49478	; 0xc146
    9844:	283c2845 	ldmdacs	ip!, {r0, r2, r6, fp, sp}
    9848:	6e752828 	cdpvs	8, 7, cr2, cr5, cr8, {1}
    984c:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
    9850:	28296465 	stmdacs	r9!, {r0, r2, r5, r6, sl, sp, lr}
    9854:	3e2d7426 	cdpcc	4, 2, cr7, cr13, cr6, {1}
    9858:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    985c:	5d305b6b 	fldmdbxpl	r0!, {d5-d57}	;@ Deprecated
    9860:	28252929 	stmdacs	r5!, {r0, r3, r5, r8, fp, sp}
    9864:	3d202938 	stccc	9, cr2, [r0, #-224]!	; 0xffffff20
    9868:	2930203d 	ldmdbcs	r0!, {r0, r2, r3, r4, r5, sp}
    986c:	203a293e 	eorscs	r2, sl, lr, lsr r9
    9870:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    9874:	756d206b 	strbvc	r2, [sp, #-107]!	; 0x6b
    9878:	62207473 	eorvs	r7, r0, #1929379840	; 0x73000000
    987c:	2d382065 	ldccs	0, cr2, [r8, #-404]!	; 0xfffffe6c
    9880:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
    9884:	696c6120 	stmdbvs	ip!, {r5, r8, sp, lr}^
    9888:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
    988c:	00000a21 	andeq	r0, r0, r1, lsr #20
    9890:	2d697072 	stclcs	0, cr7, [r9, #-456]!	; 0xfffffe38
    9894:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
    9898:	632e6461 	teqvs	lr, #1627389952	; 0x61000000
    989c:	00000000 	andeq	r0, r0, r0
    98a0:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    98a4:	73253a43 	teqvc	r5, #274432	; 0x43000
    98a8:	3a73253a 	bcc	1cd2d98 <__bss_end__+0x1cc8c38>
    98ac:	733a6425 	teqvc	sl, #620756992	; 0x25000000
    98b0:	61726f74 	cmnvs	r2, r4, ror pc
    98b4:	6c206567 	cfstr32vs	mvfx6, [r0], #-412	; 0xfffffe64
    98b8:	3a6b6165 	bcc	1ae1e54 <__bss_end__+0x1ad7cf4>
    98bc:	6f687320 	svcvs	0x00687320
    98c0:	20646c75 	rsbcs	r6, r4, r5, ror ip
    98c4:	65766168 	ldrbvs	r6, [r6, #-360]!	; 0x168
    98c8:	20642520 	rsbcs	r2, r4, r0, lsr #10
    98cc:	65657266 	strbvs	r7, [r5, #-614]!	; 0x266
    98d0:	6f6c6220 	svcvs	0x006c6220
    98d4:	2c736b63 	ldclcs	11, cr6, [r3], #-396	; 0xfffffe74
    98d8:	76616820 	strbtvc	r6, [r1], -r0, lsr #16
    98dc:	64252065 	strtvs	r2, [r5], #-101	; 0x65
    98e0:	75722820 	ldrbvc	r2, [r2, #-2080]!	; 0x820
    98e4:	253d716e 	ldrcs	r7, [sp, #-366]!	; 0x16e
    98e8:	66202c64 	strtvs	r2, [r0], -r4, ror #24
    98ec:	71656572 	smcvc	22098	; 0x5652
    98f0:	2964253d 	stmdbcs	r4!, {r0, r2, r3, r4, r5, r8, sl, sp}^
    98f4:	00000a0a 	andeq	r0, r0, sl, lsl #20
    98f8:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
    98fc:	203a6461 	eorscs	r6, sl, r1, ror #8
    9900:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    9904:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    9908:	65686320 	strbvs	r6, [r8, #-800]!	; 0x320
    990c:	70206b63 	eorvc	r6, r0, r3, ror #22
    9910:	65737361 	ldrbvs	r7, [r3, #-865]!	; 0x361
    9914:	00000a64 	andeq	r0, r0, r4, ror #20
    9918:	74697072 	strbtvc	r7, [r9], #-114	; 0x72
    991c:	61657268 	cmnvs	r5, r8, ror #4
    9920:	203a7364 	eorscs	r7, sl, r4, ror #6
    9924:	656e6f64 	strbvs	r6, [lr, #-3940]!	; 0xf64
    9928:	74697720 	strbtvc	r7, [r9], #-1824	; 0x720
    992c:	6c612068 	stclvs	0, cr2, [r1], #-416	; 0xfffffe60
    9930:	6874206c 	ldmdavs	r4!, {r2, r3, r5, r6, sp}^
    9934:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
    9938:	72202173 	eorvc	r2, r0, #-1073741796	; 0xc000001c
    993c:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
    9940:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
    9944:	0000000a 	andeq	r0, r0, sl
    9948:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    994c:	73253a43 	teqvc	r5, #274432	; 0x43000
    9950:	3a73253a 	bcc	1cd2e40 <__bss_end__+0x1cc8ce0>
    9954:	693a6425 	ldmdbvs	sl!, {r0, r2, r5, sl, sp, lr}
    9958:	656c706d 	strbvs	r7, [ip, #-109]!	; 0x6d
    995c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
    9960:	69687420 	stmdbvs	r8!, {r5, sl, ip, sp, lr}^
    9964:	75662073 	strbvc	r2, [r6, #-115]!	; 0x73
    9968:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    996c:	0a216e6f 	beq	865330 <__bss_end__+0x85b1d0>
    9970:	0000000a 	andeq	r0, r0, sl

00009974 <__FUNCTION__.4202>:
    9974:	705f7163 	subsvc	r7, pc, r3, ror #2
    9978:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    997c:	00000000 	andeq	r0, r0, r0

00009980 <__FUNCTION__.4206>:
    9980:	6f5f7163 	svcvs	0x005f7163
    9984:	0000006b 	andeq	r0, r0, fp, rrx

00009988 <__FUNCTION__.4211>:
    9988:	695f7163 	ldmdbvs	pc, {r0, r1, r5, r6, r8, ip, sp, lr}^	; <UNPREDICTABLE>
    998c:	0074696e 	rsbseq	r6, r4, lr, ror #18

00009990 <__FUNCTION__.4225>:
    9990:	705f7163 	subsvc	r7, pc, r3, ror #2
    9994:	5f6b6565 	svcpl	0x006b6565
    9998:	0000006e 	andeq	r0, r0, lr, rrx

0000999c <__FUNCTION__.4250>:
    999c:	705f7163 	subsvc	r7, pc, r3, ror #2
    99a0:	5f687375 	svcpl	0x00687375
    99a4:	0000006e 	andeq	r0, r0, lr, rrx
    99a8:	253a7325 	ldrcs	r7, [sl, #-805]!	; 0x325
    99ac:	64253a73 	strtvs	r3, [r5], #-2675	; 0xa73
    99b0:	2071633a 	rsbscs	r6, r1, sl, lsr r3
    99b4:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    99b8:	68203a74 	stmdavs	r0!, {r2, r4, r5, r6, r9, fp, ip, sp}
    99bc:	3d646165 	stfcce	f6, [r4, #-404]!	; 0xfffffe6c
    99c0:	202c6425 	eorcs	r6, ip, r5, lsr #8
    99c4:	6c696174 	stfvse	f6, [r9], #-464	; 0xfffffe30
    99c8:	2c64253d 	cfstr64cs	mvdx2, [r4], #-244	; 0xffffff0c
    99cc:	6c656e20 	stclvs	14, cr6, [r5], #-128	; 0xffffff80
    99d0:	253d6d65 	ldrcs	r6, [sp, #-3429]!	; 0xd65
    99d4:	65202c64 	strvs	r2, [r0, #-3172]!	; 0xc64
    99d8:	7974706d 	ldmdbvc	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    99dc:	0a64253d 	beq	1912ed8 <__bss_end__+0x1908d78>
    99e0:	00000000 	andeq	r0, r0, r0
    99e4:	63726963 	cmnvs	r2, #1622016	; 0x18c000
    99e8:	72616c75 	rsbvc	r6, r1, #29952	; 0x7500
    99ec:	0000632e 	andeq	r6, r0, lr, lsr #6
    99f0:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    99f4:	73253a43 	teqvc	r5, #274432	; 0x43000
    99f8:	3a73253a 	bcc	1cd2ee8 <__bss_end__+0x1cc8d88>
    99fc:	663a6425 	ldrtvs	r6, [sl], -r5, lsr #8
    9a00:	65636e65 	strbvs	r6, [r3, #-3685]!	; 0xe65
    9a04:	20736920 	rsbscs	r6, r3, r0, lsr #18
    9a08:	72726f63 	rsbsvc	r6, r2, #396	; 0x18c
    9a0c:	65747075 	ldrbvs	r7, [r4, #-117]!	; 0x75
    9a10:	000a0a64 	andeq	r0, sl, r4, ror #20
    9a14:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9a18:	73253a43 	teqvc	r5, #274432	; 0x43000
    9a1c:	3a73253a 	bcc	1cd2f0c <__bss_end__+0x1cc8dac>
    9a20:	633a6425 	teqvs	sl, #620756992	; 0x25000000
    9a24:	6d655f71 	stclvs	15, cr5, [r5, #-452]!	; 0xfffffe3c
    9a28:	28797470 	ldmdacs	r9!, {r4, r5, r6, sl, ip, sp, lr}^
    9a2c:	000a2963 	andeq	r2, sl, r3, ror #18
    9a30:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9a34:	73253a43 	teqvc	r5, #274432	; 0x43000
    9a38:	3a73253a 	bcc	1cd2f28 <__bss_end__+0x1cc8dc8>
    9a3c:	213a6425 	teqcs	sl, r5, lsr #8
    9a40:	665f7163 	ldrbvs	r7, [pc], -r3, ror #2
    9a44:	286c6c75 	stmdacs	ip!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    9a48:	000a2963 	andeq	r2, sl, r3, ror #18
    9a4c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9a50:	73253a43 	teqvc	r5, #274432	; 0x43000
    9a54:	3a73253a 	bcc	1cd2f44 <__bss_end__+0x1cc8de4>
    9a58:	633a6425 	teqvs	sl, #620756992	; 0x25000000
    9a5c:	656e5f71 	strbvs	r5, [lr, #-3953]!	; 0xf71
    9a60:	286d656c 	stmdacs	sp!, {r2, r3, r5, r6, r8, sl, sp, lr}^
    9a64:	3d202963 	stccc	9, cr2, [r0, #-396]!	; 0xfffffe74
    9a68:	0a30203d 	beq	c11b64 <__bss_end__+0xc07a04>
    9a6c:	00000000 	andeq	r0, r0, r0
    9a70:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9a74:	73253a43 	teqvc	r5, #274432	; 0x43000
    9a78:	3a73253a 	bcc	1cd2f68 <__bss_end__+0x1cc8e08>
    9a7c:	633a6425 	teqvs	sl, #620756992	; 0x25000000
    9a80:	6f705f71 	svcvs	0x00705f71
    9a84:	6f6e5f70 	svcvs	0x006e5f70
    9a88:	6f6c626e 	svcvs	0x006c626e
    9a8c:	63286b63 	teqvs	r8, #101376	; 0x18c00
    9a90:	2965262c 	stmdbcs	r5!, {r2, r3, r5, r9, sl, sp}^
    9a94:	203d3d20 	eorscs	r3, sp, r0, lsr #26
    9a98:	26262030 			; <UNDEFINED> instruction: 0x26262030
    9a9c:	3d206520 	cfstr32cc	mvfx6, [r0, #-128]!	; 0xffffff80
    9aa0:	7830203d 	ldmdavc	r0!, {r0, r2, r3, r4, r5, sp}
    9aa4:	000a3231 	andeq	r3, sl, r1, lsr r2
    9aa8:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9aac:	73253a43 	teqvc	r5, #274432	; 0x43000
    9ab0:	3a73253a 	bcc	1cd2fa0 <__bss_end__+0x1cc8e40>
    9ab4:	733a6425 	teqvc	sl, #620756992	; 0x25000000
    9ab8:	3d3d207a 	ldccc	0, cr2, [sp, #-488]!	; 0xfffffe18
    9abc:	5f716320 	svcpl	0x00716320
    9ac0:	656c656e 	strbvs	r6, [ip, #-1390]!	; 0x56e
    9ac4:	2963286d 	stmdbcs	r3!, {r0, r2, r3, r5, r6, fp, sp}^
    9ac8:	0000000a 	andeq	r0, r0, sl
    9acc:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9ad0:	73253a43 	teqvc	r5, #274432	; 0x43000
    9ad4:	3a73253a 	bcc	1cd2fc4 <__bss_end__+0x1cc8e64>
    9ad8:	6e3a6425 	cdpvs	4, 3, cr6, cr10, cr5, {1}
    9adc:	6820746f 	stmdavs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
    9ae0:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    9ae4:	20676e69 	rsbcs	r6, r7, r9, ror #28
    9ae8:	73696874 	cmnvc	r9, #116, 16	; 0x740000
    9aec:	00000a0a 	andeq	r0, r0, sl, lsl #20
    9af0:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9af4:	73253a43 	teqvc	r5, #274432	; 0x43000
    9af8:	3a73253a 	bcc	1cd2fe8 <__bss_end__+0x1cc8e88>
    9afc:	213a6425 	teqcs	sl, r5, lsr #8
    9b00:	655f7163 	ldrbvs	r7, [pc, #-355]	; 99a5 <__FUNCTION__.4250+0x9>
    9b04:	7974706d 	ldmdbvc	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    9b08:	0a296328 	beq	a627b0 <__bss_end__+0xa58650>
    9b0c:	00000000 	andeq	r0, r0, r0

00009b10 <__FUNCTION__.4185>:
    9b10:	74696d65 	strbtvc	r6, [r9], #-3429	; 0xd65
    9b14:	00000000 	andeq	r0, r0, r0

00009b18 <__FUNCTION__.4133>:
    9b18:	5f697072 	svcpl	0x00697072
    9b1c:	5f746573 	svcpl	0x00746573
    9b20:	7074756f 	rsbsvc	r7, r4, pc, ror #10
    9b24:	00007475 	andeq	r7, r0, r5, ror r4

00009b28 <__FUNCTION__.4207>:
    9b28:	705f6176 	subsvc	r6, pc, r6, ror r1	; <UNPREDICTABLE>
    9b2c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    9b30:	0000006b 	andeq	r0, r0, fp, rrx
    9b34:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9b38:	73253a43 	teqvc	r5, #274432	; 0x43000
    9b3c:	3a73253a 	bcc	1cd302c <__bss_end__+0x1cc8ecc>
    9b40:	303a6425 	eorscc	r6, sl, r5, lsr #8
    9b44:	0000000a 	andeq	r0, r0, sl
    9b48:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    9b4c:	2d61762f 	stclcs	6, cr7, [r1, #-188]!	; 0xffffff44
    9b50:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    9b54:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
    9b58:	00000000 	andeq	r0, r0, r0
    9b5c:	33323130 	teqcc	r2, #48, 2
    9b60:	37363534 			; <UNDEFINED> instruction: 0x37363534
    9b64:	00003938 	andeq	r3, r0, r8, lsr r9
    9b68:	33323130 	teqcc	r2, #48, 2
    9b6c:	37363534 			; <UNDEFINED> instruction: 0x37363534
    9b70:	62613938 	rsbvs	r3, r1, #56, 18	; 0xe0000
    9b74:	66656463 	strbtvs	r6, [r5], -r3, ror #8
    9b78:	00000000 	andeq	r0, r0, r0
    9b7c:	00003130 	andeq	r3, r0, r0, lsr r1
    9b80:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9b84:	73253a43 	teqvc	r5, #274432	; 0x43000
    9b88:	3a73253a 	bcc	1cd3078 <__bss_end__+0x1cc8f18>
    9b8c:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    9b90:	5f637475 	svcpl	0x00637475
    9b94:	000a7066 	andeq	r7, sl, r6, rrx
    9b98:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9b9c:	73253a43 	teqvc	r5, #274432	; 0x43000
    9ba0:	3a73253a 	bcc	1cd3090 <__bss_end__+0x1cc8f30>
    9ba4:	773a6425 	ldrvc	r6, [sl, -r5, lsr #8]!
    9ba8:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
    9bac:	33203c20 	teqcc	r0, #32, 24	; 0x2000
    9bb0:	00000a32 	andeq	r0, r0, r2, lsr sl
    9bb4:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9bb8:	73253a43 	teqvc	r5, #274432	; 0x43000
    9bbc:	3a73253a 	bcc	1cd30ac <__bss_end__+0x1cc8f4c>
    9bc0:	663a6425 	ldrtvs	r6, [sl], -r5, lsr #8
    9bc4:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xf6c
    9bc8:	746f6e20 	strbtvc	r6, [pc], #-3616	; 9bd0 <__FUNCTION__.4207+0xa8>
    9bcc:	616e6520 	cmnvs	lr, r0, lsr #10
    9bd0:	64656c62 	strbtvs	r6, [r5], #-3170	; 0xc62
    9bd4:	0a212121 	beq	852060 <__bss_end__+0x847f00>
    9bd8:	00000000 	andeq	r0, r0, r0
    9bdc:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9be0:	73253a43 	teqvc	r5, #274432	; 0x43000
    9be4:	3a73253a 	bcc	1cd30d4 <__bss_end__+0x1cc8f74>
    9be8:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    9bec:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    9bf0:	6e203a6b 	vnmulvs.f32	s6, s0, s23
    9bf4:	6820746f 	stmdavs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
    9bf8:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    9bfc:	20676e69 	rsbcs	r6, r7, r9, ror #28
    9c00:	63657073 	cmnvs	r5, #115	; 0x73
    9c04:	65696669 	strbvs	r6, [r9, #-1641]!	; 0x669
    9c08:	25272072 	strcs	r2, [r7, #-114]!	; 0x72
    9c0c:	0a0a2763 	beq	2939a0 <__bss_end__+0x289840>
    9c10:	00000000 	andeq	r0, r0, r0
    9c14:	454e4f44 	strbmi	r4, [lr, #-3908]	; 0xf44
    9c18:	0a212121 	beq	8520a4 <__bss_end__+0x847f44>
    9c1c:	00000000 	andeq	r0, r0, r0

00009c20 <__FUNCTION__.4129>:
    9c20:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    9c24:	00636f6c 	rsbeq	r6, r3, ip, ror #30

00009c28 <__FUNCTION__.4136>:
    9c28:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    9c2c:	5f636f6c 	svcpl	0x00636f6c
    9c30:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    9c34:	0064656e 	rsbeq	r6, r4, lr, ror #10

00009c38 <__FUNCTION__.4141>:
    9c38:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    9c3c:	5f636f6c 	svcpl	0x00636f6c
    9c40:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    9c44:	00000000 	andeq	r0, r0, r0
    9c48:	4f525245 	svcmi	0x00525245
    9c4c:	73253a52 	teqvc	r5, #335872	; 0x52000
    9c50:	3a73253a 	bcc	1cd3140 <__bss_end__+0x1cc8fe0>
    9c54:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9c58:	534c4146 	movtpl	r4, #49478	; 0xc146
    9c5c:	693c2845 	ldmdbvs	ip!, {r0, r2, r6, fp, sp}
    9c60:	5f74696e 	svcpl	0x0074696e
    9c64:	3a293e70 	bcc	a5962c <__bss_end__+0xa4f4cc>
    9c68:	6c616320 	stclvs	3, cr6, [r1], #-128	; 0xffffff80
    9c6c:	676e696c 	strbvs	r6, [lr, -ip, ror #18]!
    9c70:	66656220 	strbtvs	r6, [r5], -r0, lsr #4
    9c74:	2065726f 	rsbcs	r7, r5, pc, ror #4
    9c78:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    9c7c:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    9c80:	0a64657a 	beq	1923270 <__bss_end__+0x1919110>
    9c84:	00000000 	andeq	r0, r0, r0
    9c88:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
    9c8c:	6b2f6372 	blvs	be2a5c <__bss_end__+0xbd88fc>
    9c90:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    9c94:	632e636f 	teqvs	lr, #-1140850687	; 0xbc000001
    9c98:	00000000 	andeq	r0, r0, r0
    9c9c:	4f525245 	svcmi	0x00525245
    9ca0:	73253a52 	teqvc	r5, #335872	; 0x52000
    9ca4:	3a73253a 	bcc	1cd3194 <__bss_end__+0x1cc9034>
    9ca8:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9cac:	534c4146 	movtpl	r4, #49478	; 0xc146
    9cb0:	613c2845 	teqvs	ip, r5, asr #16
    9cb4:	6e67696c 	cdpvs	9, 6, cr6, cr7, cr12, {3}
    9cb8:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
    9cbc:	34202520 	strtcc	r2, [r0], #-1312	; 0x520
    9cc0:	203d3d20 	eorscs	r3, sp, r0, lsr #26
    9cc4:	3a293e30 	bcc	a5958c <__bss_end__+0xa4f42c>
    9cc8:	65772220 	ldrbvs	r2, [r7, #-544]!	; 0x220
    9ccc:	20647269 	rsbcs	r7, r4, r9, ror #4
    9cd0:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    9cd4:	6e656d6e 	cdpvs	13, 6, cr6, cr5, cr14, {3}
    9cd8:	6e203a74 	mcrvs	10, 1, r3, cr0, cr4, {3}
    9cdc:	6120746f 	teqvs	r0, pc, ror #8
    9ce0:	6c756d20 	ldclvs	13, cr6, [r5], #-128	; 0xffffff80
    9ce4:	6c706974 	ldclvs	9, cr6, [r0], #-464	; 0xfffffe30
    9ce8:	666f2065 	strbtvs	r2, [pc], -r5, rrx
    9cec:	22213420 	eorcs	r3, r1, #32, 8	; 0x20000000
    9cf0:	0000000a 	andeq	r0, r0, sl
    9cf4:	4f525245 	svcmi	0x00525245
    9cf8:	73253a52 	teqvc	r5, #335872	; 0x52000
    9cfc:	3a73253a 	bcc	1cd31ec <__bss_end__+0x1cc908c>
    9d00:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9d04:	534c4146 	movtpl	r4, #49478	; 0xc146
    9d08:	213c2845 	teqcs	ip, r5, asr #16
    9d0c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    9d10:	293e705f 	ldmdbcs	lr!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}
    9d14:	6163203a 	cmnvs	r3, sl, lsr r0
    9d18:	746f6e6e 	strbtvc	r6, [pc], #-3694	; 9d20 <__FUNCTION__.4141+0xe8>
    9d1c:	696e6920 	stmdbvs	lr!, {r5, r8, fp, sp, lr}^
    9d20:	6c616974 	stclvs	9, cr6, [r1], #-464	; 0xfffffe30
    9d24:	20657a69 	rsbcs	r7, r5, r9, ror #20
    9d28:	63697774 	cmnvs	r9, #116, 14	; 0x1d00000
    9d2c:	0a0a2165 	beq	2922c8 <__bss_end__+0x288168>
    9d30:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss:

00009d34 <__bss_start__>:
	...

00009d40 <nalloced>:
    9d40:	00000000 	andeq	r0, r0, r0

00009d44 <cur_thread>:
    9d44:	00000000 	andeq	r0, r0, r0

00009d48 <runq>:
	...

00009d54 <scheduler_thread>:
    9d54:	00000000 	andeq	r0, r0, r0

00009d58 <buf.4133>:
	...

0000a158 <init_p>:
    a158:	00000000 	andeq	r0, r0, r0

0000a15c <heap_ptr>:
    a15c:	00000000 	andeq	r0, r0, r0

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4b5a3605 	blmi	168d82c <__bss_end__+0x16836cc>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	12010901 	andne	r0, r1, #16384	; 0x4000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0x404
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	22011a01 	andcs	r1, r1, #4096	; 0x1000
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__bss_end__+0x10c6bc4>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	34202955 	strtcc	r2, [r0], #-2389	; 0x955
   c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
  10:	43434700 	movtmi	r4, #14080	; 0x3700
  14:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
  18:	5420554e 	strtpl	r5, [r0], #-1358	; 0x54e
  1c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  20:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
  24:	6d724120 	ldfvse	f4, [r2, #-128]!	; 0xffffff80
  28:	626d4520 	rsbvs	r4, sp, #32, 10	; 0x8000000
  2c:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
  30:	72502064 	subsvc	r2, r0, #100	; 0x64
  34:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
  38:	73726f73 	cmnvc	r2, #460	; 0x1cc
  3c:	322d3720 	eorcc	r3, sp, #32, 14	; 0x800000
  40:	2d383130 	ldfcss	f3, [r8, #-192]!	; 0xffffff40
  44:	752d3371 	strvc	r3, [sp, #-881]!	; 0x371
  48:	74616470 	strbtvc	r6, [r1], #-1136	; 0x470
  4c:	37202965 	strcc	r2, [r0, -r5, ror #18]!
  50:	312e332e 	teqcc	lr, lr, lsr #6
  54:	31303220 	teqcc	r0, r0, lsr #4
  58:	32363038 	eorscc	r3, r6, #56	; 0x38
  5c:	72282032 	eorvc	r2, r8, #50	; 0x32
  60:	61656c65 	cmnvs	r5, r5, ror #24
  64:	20296573 	eorcs	r6, r9, r3, ror r5
  68:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  6c:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
  70:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
  74:	2d372d64 	ldccs	13, cr2, [r7, #-400]!	; 0xfffffe70
  78:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  7c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  80:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  84:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  88:	39313632 	ldmdbcc	r1!, {r1, r4, r5, r9, sl, ip, sp}
  8c:	005d3730 	subseq	r3, sp, r0, lsr r7

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000306 	andeq	r0, r0, r6, lsl #6
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000010 	andeq	r0, r0, r0, lsl r0
      10:	00006701 	andeq	r6, r0, r1, lsl #14
      14:	0000b100 	andeq	fp, r0, r0, lsl #2
      18:	00801000 	addeq	r1, r0, r0
      1c:	0000a400 	andeq	sl, r0, r0, lsl #8
      20:	00000000 	andeq	r0, r0, r0
      24:	05040200 	streq	r0, [r4, #-512]	; 0x200
      28:	00746e69 	rsbseq	r6, r4, r9, ror #28
      2c:	5d070403 	cfstrspl	mvf0, [r7, #-12]
      30:	03000001 	movweq	r0, #1
      34:	008f0601 	addeq	r0, pc, r1, lsl #12
      38:	02030000 	andeq	r0, r3, #0
      3c:	0001a305 	andeq	sl, r1, r5, lsl #6
      40:	05040300 	streq	r0, [r4, #-768]	; 0x300
      44:	0000018f 	andeq	r0, r0, pc, lsl #3
      48:	8a050803 	bhi	14205c <__bss_end__+0x137efc>
      4c:	03000001 	movweq	r0, #1
      50:	008d0801 	addeq	r0, sp, r1, lsl #16
      54:	02030000 	andeq	r0, r3, #0
      58:	00010c07 	andeq	r0, r1, r7, lsl #24
      5c:	01ad0400 			; <UNDEFINED> instruction: 0x01ad0400
      60:	34030000 	strcc	r0, [r3], #-0
      64:	00000068 	andeq	r0, r0, r8, rrx
      68:	58070403 	stmdapl	r7, {r0, r1, sl}
      6c:	03000001 	movweq	r0, #1
      70:	01530708 	cmpeq	r3, r8, lsl #14
      74:	04030000 	streq	r0, [r3], #-0
      78:	00018107 	andeq	r8, r1, r7, lsl #2
      7c:	03040500 	movweq	r0, #17664	; 0x4500
      80:	00960801 	addseq	r0, r6, r1, lsl #16
      84:	04060000 	streq	r0, [r6], #-0
      88:	0000008c 	andeq	r0, r0, ip, lsl #1
      8c:	00007f07 	andeq	r7, r0, r7, lsl #30
      90:	01980800 	orrseq	r0, r8, r0, lsl #16
      94:	20500000 	subscs	r0, r0, r0
      98:	00e62502 	rsceq	r2, r6, r2, lsl #10
      9c:	45090000 	strmi	r0, [r9, #-0]
      a0:	02000001 	andeq	r0, r0, #1
      a4:	0000e627 	andeq	lr, r0, r7, lsr #12
      a8:	00090000 	andeq	r0, r9, r0
      ac:	02000000 	andeq	r0, r0, #0
      b0:	0000f629 	andeq	pc, r0, r9, lsr #12
      b4:	740a4000 	strvc	r4, [sl], #-0
      b8:	02006469 	andeq	r6, r0, #1761607680	; 0x69000000
      bc:	00005d2a 	andeq	r5, r0, sl, lsr #26
      c0:	660a4400 	strvs	r4, [sl], -r0, lsl #8
      c4:	2c02006e 	stccs	0, cr0, [r2], {110}	; 0x6e
      c8:	00000107 	andeq	r0, r0, r7, lsl #2
      cc:	72610a48 	rsbvc	r0, r1, #72, 20	; 0x48000
      d0:	2d020067 	stccs	0, cr0, [r2, #-412]	; 0xfffffe64
      d4:	0000007d 	andeq	r0, r0, sp, ror r0
      d8:	007d094c 	rsbseq	r0, sp, ip, asr #18
      dc:	2f020000 	svccs	0x00020000
      e0:	0000010d 	andeq	r0, r0, sp, lsl #2
      e4:	5d0b0050 	stcpl	0, cr0, [fp, #-320]	; 0xfffffec0
      e8:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
      ec:	0c000000 	stceq	0, cr0, [r0], {-0}
      f0:	00000076 	andeq	r0, r0, r6, ror r0
      f4:	0406000f 	streq	r0, [r6], #-15
      f8:	00000091 	muleq	r0, r1, r0
      fc:	0001070d 	andeq	r0, r1, sp, lsl #14
     100:	007d0e00 	rsbseq	r0, sp, r0, lsl #28
     104:	06000000 	streq	r0, [r0], -r0
     108:	0000fc04 	andeq	pc, r0, r4, lsl #24
     10c:	005d0b00 	subseq	r0, sp, r0, lsl #22
     110:	011e0000 	tsteq	lr, r0
     114:	760f0000 	strvc	r0, [pc], -r0
     118:	ff000000 			; <UNDEFINED> instruction: 0xff000000
     11c:	6a040007 	bvs	100140 <__bss_end__+0xf5fe0>
     120:	02000001 	andeq	r0, r0, #1
     124:	00009130 	andeq	r9, r0, r0, lsr r1
     128:	01301000 	teqeq	r0, r0
     12c:	05010000 	streq	r0, [r1, #-0]
     130:	00008010 	andeq	r8, r0, r0, lsl r0
     134:	00000034 	andeq	r0, r0, r4, lsr r0
     138:	01ab9c01 			; <UNDEFINED> instruction: 0x01ab9c01
     13c:	61110000 	tstvs	r1, r0
     140:	01006772 	tsteq	r0, r2, ror r7
     144:	00007d05 	andeq	r7, r0, r5, lsl #26
     148:	00000000 	andeq	r0, r0, r0
     14c:	80201200 	eorhi	r1, r0, r0, lsl #4
     150:	02a90000 	adceq	r0, r9, #0
     154:	016b0000 	cmneq	fp, r0
     158:	01130000 	tsteq	r3, r0
     15c:	01f30351 	mvnseq	r0, r1, asr r3
     160:	50011350 	andpl	r1, r1, r0, asr r3
     164:	96e40305 	strbtls	r0, [r4], r5, lsl #6
     168:	14000000 	strne	r0, [r0], #-0
     16c:	00008024 	andeq	r8, r0, r4, lsr #32
     170:	000002bf 			; <UNDEFINED> instruction: 0x000002bf
     174:	00802814 	addeq	r2, r0, r4, lsl r8
     178:	0002bf00 	andeq	fp, r2, r0, lsl #30
     17c:	802c1400 	eorhi	r1, ip, r0, lsl #8
     180:	02bf0000 	adcseq	r0, pc, #0
     184:	30140000 	andscc	r0, r4, r0
     188:	bf000080 	svclt	0x00000080
     18c:	14000002 	strne	r0, [r0], #-2
     190:	00008034 	andeq	r8, r0, r4, lsr r0
     194:	000002bf 			; <UNDEFINED> instruction: 0x000002bf
     198:	00803814 	addeq	r3, r0, r4, lsl r8
     19c:	0002bf00 	andeq	fp, r2, r0, lsl #30
     1a0:	803c1400 	eorshi	r1, ip, r0, lsl #8
     1a4:	02bf0000 	adcseq	r0, pc, #0
     1a8:	10000000 	andne	r0, r0, r0
     1ac:	00000075 	andeq	r0, r0, r5, ror r0
     1b0:	80441301 	subhi	r1, r4, r1, lsl #6
     1b4:	00480000 	subeq	r0, r8, r0
     1b8:	9c010000 	stcls	0, cr0, [r1], {-0}
     1bc:	00000237 	andeq	r0, r0, r7, lsr r2
     1c0:	01006e15 	tsteq	r0, r5, lsl lr
     1c4:	00002518 	andeq	r2, r0, r8, lsl r5
     1c8:	50166400 	andspl	r6, r6, r0, lsl #8
     1cc:	24000080 	strcs	r0, [r0], #-128	; 0x80
     1d0:	fb000000 	blx	1da <_start-0x7e26>
     1d4:	17000001 	strne	r0, [r0, -r1]
     1d8:	19010069 	stmdbne	r1, {r0, r3, r5, r6}
     1dc:	00000025 	andeq	r0, r0, r5, lsr #32
     1e0:	0000002c 	andeq	r0, r0, ip, lsr #32
     1e4:	00806818 	addeq	r6, r0, r8, lsl r8
     1e8:	0002c600 	andeq	ip, r2, r0, lsl #12
     1ec:	51011300 	mrspl	r1, SP_irq
     1f0:	13007402 	movwne	r7, #1026	; 0x402
     1f4:	75025001 	strvc	r5, [r2, #-1]
     1f8:	14000000 	strne	r0, [r0], #-0
     1fc:	0000804c 	andeq	r8, r0, ip, asr #32
     200:	000002e6 	andeq	r0, r0, r6, ror #5
     204:	00805014 	addeq	r5, r0, r4, lsl r0
     208:	0002ed00 	andeq	lr, r2, r0, lsl #26
     20c:	80781400 	rsbshi	r1, r8, r0, lsl #8
     210:	02f40000 	rscseq	r0, r4, #0
     214:	80120000 	andshi	r0, r2, r0
     218:	a9000080 	stmdbge	r0, {r7}
     21c:	2d000002 	stccs	0, cr0, [r0, #-8]
     220:	13000002 	movwne	r0, #2
     224:	03055001 	movweq	r5, #20481	; 0x5001
     228:	000096fc 	strdeq	r9, [r0], -ip
     22c:	80841400 	addhi	r1, r4, r0, lsl #8
     230:	02fb0000 	rscseq	r0, fp, #0
     234:	10000000 	andne	r0, r0, r0
     238:	000001c3 	andeq	r0, r0, r3, asr #3
     23c:	808c2001 	addhi	r2, ip, r1
     240:	00280000 	eoreq	r0, r8, r0
     244:	9c010000 	stcls	0, cr0, [r1], {-0}
     248:	00000294 	muleq	r0, r4, r2
     24c:	00013819 	andeq	r3, r1, r9, lsl r8
     250:	0002a400 	andeq	sl, r2, r0, lsl #8
     254:	d4030500 	strle	r0, [r3], #-1280	; 0x500
     258:	12000096 	andne	r0, r0, #150	; 0x96
     25c:	000080a4 	andeq	r8, r0, r4, lsr #1
     260:	000002a9 	andeq	r0, r0, r9, lsr #5
     264:	0000028a 	andeq	r0, r0, sl, lsl #5
     268:	02530113 	subseq	r0, r3, #-1073741820	; 0xc0000004
     26c:	01132008 	tsteq	r3, r8
     270:	d4030552 	strle	r0, [r3], #-1362	; 0x552
     274:	13000096 	movwne	r0, #150	; 0x96
     278:	03055101 	movweq	r5, #20737	; 0x5101
     27c:	0000972c 	andeq	r9, r0, ip, lsr #14
     280:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
     284:	00970803 	addseq	r0, r7, r3, lsl #16
     288:	a8140000 	ldmdage	r4, {}	; <UNPREDICTABLE>
     28c:	02000080 	andeq	r0, r0, #128	; 0x80
     290:	00000003 	andeq	r0, r0, r3
     294:	00007f0b 	andeq	r7, r0, fp, lsl #30
     298:	0002a400 	andeq	sl, r2, r0, lsl #8
     29c:	00760c00 	rsbseq	r0, r6, r0, lsl #24
     2a0:	000d0000 	andeq	r0, sp, r0
     2a4:	00029407 	andeq	r9, r2, r7, lsl #8
     2a8:	043a1a00 	ldrteq	r1, [sl], #-2560	; 0xa00
     2ac:	27040000 	strcs	r0, [r4, -r0]
     2b0:	00000025 	andeq	r0, r0, r5, lsr #32
     2b4:	000002bf 			; <UNDEFINED> instruction: 0x000002bf
     2b8:	0000860e 	andeq	r8, r0, lr, lsl #12
     2bc:	1c001b00 	stcne	11, cr1, [r0], {-0}
     2c0:	00000177 	andeq	r0, r0, r7, ror r1
     2c4:	a81a3902 	ldmdage	sl, {r1, r8, fp, ip, sp}
     2c8:	02000000 	andeq	r0, r0, #0
     2cc:	0002e033 	andeq	lr, r2, r3, lsr r0
     2d0:	0002e000 	andeq	lr, r2, r0
     2d4:	01070e00 	tsteq	r7, r0, lsl #28
     2d8:	7d0e0000 	stcvc	0, cr0, [lr, #-0]
     2dc:	00000000 	andeq	r0, r0, r0
     2e0:	011e0406 	tsteq	lr, r6, lsl #8
     2e4:	831c0000 	tsthi	ip, #0
     2e8:	04000000 	streq	r0, [r0], #-0
     2ec:	01b61c38 			; <UNDEFINED> instruction: 0x01b61c38
     2f0:	6a040000 	bvs	1002f8 <__bss_end__+0xf6198>
     2f4:	00011f1c 	andeq	r1, r1, ip, lsl pc
     2f8:	1c3d0200 	lfmne	f0, 4, [sp], #-0
     2fc:	0000009b 	muleq	r0, fp, r0
     300:	051c5f04 	ldreq	r5, [ip, #-3844]	; 0xf04
     304:	04000000 	streq	r0, [r0], #-0
     308:	0985005c 	stmibeq	r5, {r2, r3, r4, r6}
     30c:	00040000 	andeq	r0, r4, r0
     310:	0000015f 	andeq	r0, r0, pc, asr r1
     314:	00100104 	andseq	r0, r0, r4, lsl #2
     318:	e7010000 	str	r0, [r1, -r0]
     31c:	b1000001 	tstlt	r0, r1
     320:	b4000000 	strlt	r0, [r0], #-0
     324:	6c000080 	stcvs	0, cr0, [r0], {128}	; 0x80
     328:	1d000004 	stcne	0, cr0, [r0, #-16]
     32c:	02000001 	andeq	r0, r0, #1
     330:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     334:	04030074 	streq	r0, [r3], #-116	; 0x74
     338:	00015d07 	andeq	r5, r1, r7, lsl #26
     33c:	06010300 	streq	r0, [r1], -r0, lsl #6
     340:	0000008f 	andeq	r0, r0, pc, lsl #1
     344:	a3050203 	movwge	r0, #20995	; 0x5203
     348:	03000001 	movweq	r0, #1
     34c:	018f0504 	orreq	r0, pc, r4, lsl #10
     350:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     354:	00018a05 	andeq	r8, r1, r5, lsl #20
     358:	08010300 	stmdaeq	r1, {r8, r9}
     35c:	0000008d 	andeq	r0, r0, sp, lsl #1
     360:	0c070203 	sfmeq	f0, 4, [r7], {3}
     364:	04000001 	streq	r0, [r0], #-1
     368:	000001ad 	andeq	r0, r0, sp, lsr #3
     36c:	00683404 	rsbeq	r3, r8, r4, lsl #8
     370:	04030000 	streq	r0, [r3], #-0
     374:	00015807 	andeq	r5, r1, r7, lsl #16
     378:	07080300 	streq	r0, [r8, -r0, lsl #6]
     37c:	00000153 	andeq	r0, r0, r3, asr r1
     380:	81070403 	tsthi	r7, r3, lsl #8
     384:	05000001 	streq	r0, [r0, #-1]
     388:	08010304 	stmdaeq	r1, {r2, r8, r9}
     38c:	00000096 	muleq	r0, r6, r0
     390:	008c0406 	addeq	r0, ip, r6, lsl #8
     394:	7f070000 	svcvc	0x00070000
     398:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     39c:	0000007f 	andeq	r0, r0, pc, ror r0
     3a0:	000000a1 	andeq	r0, r0, r1, lsr #1
     3a4:	00007609 	andeq	r7, r0, r9, lsl #12
     3a8:	0a000700 	beq	1fb0 <_start-0x6050>
     3ac:	00000198 	muleq	r0, r8, r1
     3b0:	25032050 	strcs	r2, [r3, #-80]	; 0x50
     3b4:	000000f6 	strdeq	r0, [r0], -r6
     3b8:	0001450b 	andeq	r4, r1, fp, lsl #10
     3bc:	f6270300 			; <UNDEFINED> instruction: 0xf6270300
     3c0:	00000000 	andeq	r0, r0, r0
     3c4:	0000000b 	andeq	r0, r0, fp
     3c8:	06290300 	strteq	r0, [r9], -r0, lsl #6
     3cc:	40000001 	andmi	r0, r0, r1
     3d0:	6469740c 	strbtvs	r7, [r9], #-1036	; 0x40c
     3d4:	5d2a0300 	stcpl	3, cr0, [sl, #-0]
     3d8:	44000000 	strmi	r0, [r0], #-0
     3dc:	006e660c 	rsbeq	r6, lr, ip, lsl #12
     3e0:	01172c03 	tsteq	r7, r3, lsl #24
     3e4:	0c480000 	mareq	acc0, r0, r8
     3e8:	00677261 	rsbeq	r7, r7, r1, ror #4
     3ec:	007d2d03 	rsbseq	r2, sp, r3, lsl #26
     3f0:	0b4c0000 	bleq	13003f8 <__bss_end__+0x12f6298>
     3f4:	0000007d 	andeq	r0, r0, sp, ror r0
     3f8:	011d2f03 	tsteq	sp, r3, lsl #30
     3fc:	00500000 	subseq	r0, r0, r0
     400:	00005d08 	andeq	r5, r0, r8, lsl #26
     404:	00010600 	andeq	r0, r1, r0, lsl #12
     408:	00760900 	rsbseq	r0, r6, r0, lsl #18
     40c:	000f0000 	andeq	r0, pc, r0
     410:	00a10406 	adceq	r0, r1, r6, lsl #8
     414:	170d0000 	strne	r0, [sp, -r0]
     418:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     41c:	0000007d 	andeq	r0, r0, sp, ror r0
     420:	0c040600 	stceq	6, cr0, [r4], {-0}
     424:	08000001 	stmdaeq	r0, {r0}
     428:	0000005d 	andeq	r0, r0, sp, asr r0
     42c:	0000012e 	andeq	r0, r0, lr, lsr #2
     430:	0000760f 	andeq	r7, r0, pc, lsl #12
     434:	0007ff00 	andeq	pc, r7, r0, lsl #30
     438:	00016a04 	andeq	r6, r1, r4, lsl #20
     43c:	a1300300 	teqge	r0, r0, lsl #6
     440:	10000000 	andne	r0, r0, r0
     444:	010c0051 	qaddeq	r0, r1, ip
     448:	00016808 	andeq	r6, r1, r8, lsl #16
     44c:	02c20b00 	sbceq	r0, r2, #0, 22
     450:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
     454:	00000168 	andeq	r0, r0, r8, ror #2
     458:	02a30b00 	adceq	r0, r3, #0, 22
     45c:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
     460:	00000168 	andeq	r0, r0, r8, ror #2
     464:	6e630c04 	cdpvs	12, 6, cr0, cr3, cr4, {0}
     468:	0a010074 	beq	40640 <__bss_end__+0x364e0>
     46c:	0000002c 	andeq	r0, r0, ip, lsr #32
     470:	04060008 	streq	r0, [r6], #-8
     474:	0000012e 	andeq	r0, r0, lr, lsr #2
     478:	745f5111 	ldrbvc	r5, [pc], #-273	; 480 <_start-0x7b80>
     47c:	390b0100 	stmdbcc	fp, {r8}
     480:	12000001 	andne	r0, r0, #1
     484:	00000232 	andeq	r0, r0, r2, lsr r2
     488:	002c1001 	eoreq	r1, ip, r1
     48c:	80b40000 	adcshi	r0, r4, r0
     490:	00080000 	andeq	r0, r8, r0
     494:	9c010000 	stcls	0, cr0, [r1], {-0}
     498:	000001a0 	andeq	r0, r0, r0, lsr #3
     49c:	01007113 	tsteq	r0, r3, lsl r1
     4a0:	0001a010 	andeq	sl, r1, r0, lsl r0
     4a4:	00004b00 	andeq	r4, r0, r0, lsl #22
     4a8:	04060000 	streq	r0, [r6], #-0
     4ac:	0000016e 	andeq	r0, r0, lr, ror #2
     4b0:	0002b914 	andeq	fp, r2, r4, lsl r9
     4b4:	bc2b0100 	stflts	f0, [fp], #-0
     4b8:	38000080 	stmdacc	r0, {r7}
     4bc:	01000000 	mrseq	r0, (UNDEF: 0)
     4c0:	0001d29c 	muleq	r1, ip, r2
     4c4:	00711500 	rsbseq	r1, r1, r0, lsl #10
     4c8:	01a02b01 	lsleq	r2, r1, #22
     4cc:	50010000 	andpl	r0, r1, r0
     4d0:	01006515 	tsteq	r0, r5, lsl r5
     4d4:	0001682b 	andeq	r6, r1, fp, lsr #16
     4d8:	00510100 	subseq	r0, r1, r0, lsl #2
     4dc:	0001d114 	andeq	sp, r1, r4, lsl r1
     4e0:	f4370100 			; <UNDEFINED> instruction: 0xf4370100
     4e4:	28000080 	stmdacs	r0, {r7}
     4e8:	01000000 	mrseq	r0, (UNDEF: 0)
     4ec:	0001fe9c 	muleq	r1, ip, lr
     4f0:	00711500 	rsbseq	r1, r1, r0, lsl #10
     4f4:	01a03701 	lsleq	r3, r1, #14
     4f8:	50010000 	andpl	r0, r1, r0
     4fc:	01006515 	tsteq	r0, r5, lsl r5
     500:	00016837 	andeq	r6, r1, r7, lsr r8
     504:	00510100 	subseq	r0, r1, r0, lsl #2
     508:	0002b114 	andeq	fp, r2, r4, lsl r1
     50c:	1c290200 	sfmne	f0, 4, [r9], #-0
     510:	18000081 	stmdane	r0, {r0, r7}
     514:	01000000 	mrseq	r0, (UNDEF: 0)
     518:	00023c9c 	muleq	r2, ip, ip
     51c:	68741300 	ldmdavs	r4!, {r8, r9, ip}^
     520:	68290200 	stmdavs	r9!, {r9}
     524:	6c000001 	stcvs	0, cr0, [r0], {1}
     528:	16000000 	strne	r0, [r0], -r0
     52c:	0000812c 	andeq	r8, r0, ip, lsr #2
     530:	000001d2 	ldrdeq	r0, [r0], -r2
     534:	03510117 	cmpeq	r1, #-1073741819	; 0xc0000005
     538:	175001f3 	smmlsrne	r0, r3, r1, r0
     53c:	03055001 	movweq	r5, #20481	; 0x5001
     540:	00009d34 	andeq	r9, r0, r4, lsr sp
     544:	84120000 	ldrhi	r0, [r2], #-0
     548:	01000002 	tsteq	r0, r2
     54c:	00002512 	andeq	r2, r0, r2, lsl r5
     550:	00813400 	addeq	r3, r1, r0, lsl #8
     554:	00007c00 	andeq	r7, r0, r0, lsl #24
     558:	f49c0100 			; <UNDEFINED> instruction: 0xf49c0100
     55c:	13000002 	movwne	r0, #2
     560:	12010071 	andne	r0, r1, #113	; 0x71
     564:	000001a0 	andeq	r0, r0, r0, lsr #3
     568:	00000098 	muleq	r0, r8, r0
     56c:	00013818 	andeq	r3, r1, r8, lsl r8
     570:	0002f400 	andeq	pc, r2, r0, lsl #8
     574:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
     578:	19000097 	stmdbne	r0, {r0, r1, r2, r4, r7}
     57c:	0000814c 	andeq	r8, r0, ip, asr #2
     580:	00000179 	andeq	r0, r0, r9, ror r1
     584:	00000285 	andeq	r0, r0, r5, lsl #5
     588:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     58c:	19000074 	stmdbne	r0, {r2, r4, r5, r6}
     590:	00008168 	andeq	r8, r0, r8, ror #2
     594:	00000935 	andeq	r0, r0, r5, lsr r9
     598:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
     59c:	01530117 	cmpeq	r3, r7, lsl r1
     5a0:	52011745 	andpl	r1, r1, #18087936	; 0x1140000
     5a4:	973c0305 	ldrls	r0, [ip, -r5, lsl #6]!
     5a8:	01170000 	tsteq	r7, r0
     5ac:	b8030551 	stmdalt	r3, {r0, r4, r6, r8, sl}
     5b0:	17000097 			; <UNDEFINED> instruction: 0x17000097
     5b4:	03055001 	movweq	r5, #20481	; 0x5001
     5b8:	00009798 	muleq	r0, r8, r7
     5bc:	816c1a00 	cmnhi	ip, r0, lsl #20
     5c0:	094b0000 	stmdbeq	fp, {}^	; <UNPREDICTABLE>
     5c4:	8c190000 	ldchi	0, cr0, [r9], {-0}
     5c8:	35000081 	strcc	r0, [r0, #-129]	; 0x81
     5cc:	ea000009 	b	5f8 <_start-0x7a08>
     5d0:	17000002 	strne	r0, [r0, -r2]
     5d4:	46015301 	strmi	r5, [r1], -r1, lsl #6
     5d8:	05520117 	ldrbeq	r0, [r2, #-279]	; 0x117
     5dc:	00973c03 	addseq	r3, r7, r3, lsl #24
     5e0:	51011700 	tstpl	r1, r0, lsl #14
     5e4:	97b80305 	ldrls	r0, [r8, r5, lsl #6]!
     5e8:	01170000 	tsteq	r7, r0
     5ec:	bc030550 	cfstr32lt	mvfx0, [r3], {80}	; 0x50
     5f0:	00000097 	muleq	r0, r7, r0
     5f4:	0081901a 	addeq	r9, r1, sl, lsl r0
     5f8:	00094b00 	andeq	r4, r9, r0, lsl #22
     5fc:	91070000 	mrsls	r0, (UNDEF: 7)
     600:	12000000 	andne	r0, r0, #0
     604:	0000028c 	andeq	r0, r0, ip, lsl #5
     608:	01681b01 	cmneq	r8, r1, lsl #22
     60c:	81b00000 	movshi	r0, r0
     610:	00900000 	addseq	r0, r0, r0
     614:	9c010000 	stcls	0, cr0, [r1], {-0}
     618:	000003c0 	andeq	r0, r0, r0, asr #7
     61c:	01007113 	tsteq	r0, r3, lsl r1
     620:	0001a01b 	andeq	sl, r1, fp, lsl r0
     624:	0000cc00 	andeq	ip, r0, r0, lsl #24
     628:	01381800 	teqeq	r8, r0, lsl #16
     62c:	03d00000 	bicseq	r0, r0, #0
     630:	03050000 	movweq	r0, #20480	; 0x5000
     634:	00009744 	andeq	r9, r0, r4, asr #14
     638:	0100651b 	tsteq	r0, fp, lsl r5
     63c:	0001681e 	andeq	r6, r1, lr, lsl r8
     640:	00011f00 	andeq	r1, r1, r0, lsl #30
     644:	81d01900 	bicshi	r1, r0, r0, lsl #18
     648:	09350000 	ldmdbeq	r5!, {}	; <UNPREDICTABLE>
     64c:	03690000 	cmneq	r9, #0
     650:	01170000 	tsteq	r7, r0
     654:	174c0153 	smlsldne	r0, ip, r3, r1
     658:	03055201 	movweq	r5, #20993	; 0x5201
     65c:	00009744 	andeq	r9, r0, r4, asr #14
     660:	05510117 	ldrbeq	r0, [r1, #-279]	; 0x117
     664:	0097b803 	addseq	fp, r7, r3, lsl #16
     668:	50011700 	andpl	r1, r1, r0, lsl #14
     66c:	97ec0305 	strbls	r0, [ip, r5, lsl #6]!
     670:	1a000000 	bne	678 <_start-0x7988>
     674:	000081d4 	ldrdeq	r8, [r0], -r4
     678:	0000094b 	andeq	r0, r0, fp, asr #18
     67c:	0081e419 	addeq	lr, r1, r9, lsl r4
     680:	00023c00 	andeq	r3, r2, r0, lsl #24
     684:	00038700 	andeq	r8, r3, r0, lsl #14
     688:	50011700 	andpl	r1, r1, r0, lsl #14
     68c:	5001f303 	andpl	pc, r1, r3, lsl #6
     690:	82001900 	andhi	r1, r0, #0, 18
     694:	09350000 	ldmdbeq	r5!, {}	; <UNPREDICTABLE>
     698:	03b60000 			; <UNDEFINED> instruction: 0x03b60000
     69c:	01170000 	tsteq	r7, r0
     6a0:	20080253 	andcs	r0, r8, r3, asr r2
     6a4:	05520117 	ldrbeq	r0, [r2, #-279]	; 0x117
     6a8:	00974403 	addseq	r4, r7, r3, lsl #8
     6ac:	51011700 	tstpl	r1, r0, lsl #14
     6b0:	97b80305 	ldrls	r0, [r8, r5, lsl #6]!
     6b4:	01170000 	tsteq	r7, r0
     6b8:	14030550 	strne	r0, [r3], #-1360	; 0x550
     6bc:	00000098 	muleq	r0, r8, r0
     6c0:	0082041a 	addeq	r0, r2, sl, lsl r4
     6c4:	00094b00 	andeq	r4, r9, r0, lsl #22
     6c8:	7f080000 	svcvc	0x00080000
     6cc:	d0000000 	andle	r0, r0, r0
     6d0:	09000003 	stmdbeq	r0, {r0, r1}
     6d4:	00000076 	andeq	r0, r0, r6, ror r0
     6d8:	c0070005 	andgt	r0, r7, r5
     6dc:	12000003 	andne	r0, r0, #3
     6e0:	000002a8 	andeq	r0, r0, r8, lsr #5
     6e4:	01681c02 	cmneq	r8, r2, lsl #24
     6e8:	82400000 	subhi	r0, r0, #0
     6ec:	00800000 	addeq	r0, r0, r0
     6f0:	9c010000 	stcls	0, cr0, [r1], {-0}
     6f4:	00000474 	andeq	r0, r0, r4, ror r4
     6f8:	0200741b 	andeq	r7, r0, #452984832	; 0x1b000000
     6fc:	0001681d 	andeq	r6, r1, sp, lsl r8
     700:	00013d00 	andeq	r3, r1, r0, lsl #26
     704:	01381800 	teqeq	r8, r0, lsl #16
     708:	04840000 	streq	r0, [r4], #0
     70c:	03050000 	movweq	r0, #20480	; 0x5000
     710:	0000974c 	andeq	r9, r0, ip, asr #14
     714:	00824c19 	addeq	r4, r2, r9, lsl ip
     718:	0002f900 	andeq	pc, r2, r0, lsl #18
     71c:	00042100 	andeq	r2, r4, r0, lsl #2
     720:	50011700 	andpl	r1, r1, r0, lsl #14
     724:	9d340305 	ldcls	3, cr0, [r4, #-20]!	; 0xffffffec
     728:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     72c:	00008260 	andeq	r8, r0, r0, ror #4
     730:	00000952 	andeq	r0, r0, r2, asr r9
     734:	0000043b 	andeq	r0, r0, fp, lsr r4
     738:	01510117 	cmpeq	r1, r7, lsl r1
     73c:	50011738 	andpl	r1, r1, r8, lsr r7
     740:	20500a03 	subscs	r0, r0, r3, lsl #20
     744:	828c1900 	addhi	r1, ip, #0, 18
     748:	09350000 	ldmdbeq	r5!, {}	; <UNPREDICTABLE>
     74c:	046a0000 	strbteq	r0, [sl], #-0
     750:	01170000 	tsteq	r7, r0
     754:	24080253 	strcs	r0, [r8], #-595	; 0x253
     758:	05520117 	ldrbeq	r0, [r2, #-279]	; 0x117
     75c:	00974c03 	addseq	r4, r7, r3, lsl #24
     760:	51011700 	tstpl	r1, r0, lsl #14
     764:	98900305 	ldmls	r0, {r0, r2, r8, r9}
     768:	01170000 	tsteq	r7, r0
     76c:	30030550 	andcc	r0, r3, r0, asr r5
     770:	00000098 	muleq	r0, r8, r0
     774:	0082901a 	addeq	r9, r2, sl, lsl r0
     778:	00094b00 	andeq	r4, r9, r0, lsl #22
     77c:	7f080000 	svcvc	0x00080000
     780:	84000000 	strhi	r0, [r0], #-0
     784:	09000004 	stmdbeq	r0, {r2}
     788:	00000076 	andeq	r0, r0, r6, ror r0
     78c:	74070008 	strvc	r0, [r7], #-8
     790:	1c000004 	stcne	0, cr0, [r0], {4}
     794:	000001d8 	ldrdeq	r0, [r0], -r8
     798:	01681502 	cmneq	r8, r2, lsl #10
     79c:	82c00000 	sbchi	r0, r0, #0
     7a0:	00100000 	andseq	r0, r0, r0
     7a4:	9c010000 	stcls	0, cr0, [r1], {-0}
     7a8:	0000a81d 	andeq	sl, r0, sp, lsl r8
     7ac:	68330200 	ldmdavs	r3!, {r9}
     7b0:	d0000001 	andle	r0, r0, r1
     7b4:	4c000082 	stcmi	0, cr0, [r0], {130}	; 0x82
     7b8:	01000000 	mrseq	r0, (UNDEF: 0)
     7bc:	00050c9c 	muleq	r5, ip, ip
     7c0:	02011e00 	andeq	r1, r1, #0, 28
     7c4:	33020000 	movwcc	r0, #8192	; 0x2000
     7c8:	00000117 	andeq	r0, r0, r7, lsl r1
     7cc:	00000166 	andeq	r0, r0, r6, ror #2
     7d0:	67726113 			; <UNDEFINED> instruction: 0x67726113
     7d4:	7d330200 	lfmvc	f0, 4, [r3, #-0]
     7d8:	84000000 	strhi	r0, [r0], #-0
     7dc:	1b000001 	blne	7e8 <_start-0x7818>
     7e0:	34020074 	strcc	r0, [r2], #-116	; 0x74
     7e4:	00000168 	andeq	r0, r0, r8, ror #2
     7e8:	000001a2 	andeq	r0, r0, r2, lsr #3
     7ec:	00023a1f 	andeq	r3, r2, pc, lsl sl
     7f0:	1a3d0200 	bne	f40ff8 <__bss_end__+0xf36e98>
     7f4:	000082e0 	andeq	r8, r0, r0, ror #5
     7f8:	000003d5 	ldrdeq	r0, [r0], -r5
     7fc:	00830c16 	addeq	r0, r3, r6, lsl ip
     800:	0001a600 	andeq	sl, r1, r0, lsl #12
     804:	51011700 	tstpl	r1, r0, lsl #14
     808:	17007402 	strne	r7, [r0, -r2, lsl #8]
     80c:	03055001 	movweq	r5, #20481	; 0x5001
     810:	00009d48 	andeq	r9, r0, r8, asr #26
     814:	ec200000 	stc	0, cr0, [r0], #-0
     818:	02000002 	andeq	r0, r0, #2
     81c:	00831c46 	addeq	r1, r3, r6, asr #24
     820:	00005800 	andeq	r5, r0, r0, lsl #16
     824:	8a9c0100 	bhi	fe700c2c <__bss_end__+0xfe6f6acc>
     828:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
     82c:	000001fd 	strdeq	r0, [r0], -sp
     830:	00254602 	eoreq	r4, r5, r2, lsl #12
     834:	01c00000 	biceq	r0, r0, r0
     838:	d8210000 	stmdale	r1!, {}	; <UNPREDICTABLE>
     83c:	02000002 	andeq	r0, r0, #2
     840:	00016850 	andeq	r6, r1, r0, asr r8
     844:	19540100 	ldmdbne	r4, {r8}^
     848:	00008330 	andeq	r8, r0, r0, lsr r3
     84c:	000001fe 	strdeq	r0, [r0], -lr
     850:	00000551 	andeq	r0, r0, r1, asr r5
     854:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     858:	19000074 	stmdbne	r0, {r2, r4, r5, r6}
     85c:	00008338 	andeq	r8, r0, r8, lsr r3
     860:	0000023c 	andeq	r0, r0, ip, lsr r2
     864:	00000565 	andeq	r0, r0, r5, ror #10
     868:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     86c:	19001475 	stmdbne	r0, {r0, r2, r4, r5, r6, sl, ip}
     870:	00008348 	andeq	r8, r0, r8, asr #6
     874:	000002f9 	strdeq	r0, [r0], -r9
     878:	00000579 	andeq	r0, r0, r9, ror r5
     87c:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     880:	16001475 			; <UNDEFINED> instruction: 0x16001475
     884:	0000836c 	andeq	r8, r0, ip, ror #6
     888:	0000096c 	andeq	r0, r0, ip, ror #18
     88c:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     890:	00000074 	andeq	r0, r0, r4, ror r0
     894:	00017720 	andeq	r7, r1, r0, lsr #14
     898:	745d0200 	ldrbvc	r0, [sp], #-512	; 0x200
     89c:	50000083 	andpl	r0, r0, r3, lsl #1
     8a0:	01000000 	mrseq	r0, (UNDEF: 0)
     8a4:	0006179c 	muleq	r6, ip, r7
     8a8:	02062200 	andeq	r2, r6, #0, 4
     8ac:	63020000 	movwvs	r0, #8192	; 0x2000
     8b0:	00000168 	andeq	r0, r0, r8, ror #2
     8b4:	00838823 	addeq	r8, r3, r3, lsr #16
     8b8:	00003c00 	andeq	r3, r0, r0, lsl #24
     8bc:	00060300 	andeq	r0, r6, r0, lsl #6
     8c0:	02d82100 	sbcseq	r2, r8, #0, 2
     8c4:	67020000 	strvs	r0, [r2, -r0]
     8c8:	00000168 	andeq	r0, r0, r8, ror #2
     8cc:	a0195501 	andsge	r5, r9, r1, lsl #10
     8d0:	a6000083 	strge	r0, [r0], -r3, lsl #1
     8d4:	de000001 	cdple	0, 0, cr0, cr0, cr1, {0}
     8d8:	17000005 	strne	r0, [r0, -r5]
     8dc:	75025101 	strvc	r5, [r2, #-257]	; 0x101
     8e0:	50011700 	andpl	r1, r1, r0, lsl #14
     8e4:	00007602 	andeq	r7, r0, r2, lsl #12
     8e8:	0083a819 	addeq	sl, r3, r9, lsl r8
     8ec:	0002f900 	andeq	pc, r2, r0, lsl #18
     8f0:	0005f200 	andeq	pc, r5, r0, lsl #4
     8f4:	50011700 	andpl	r1, r1, r0, lsl #14
     8f8:	00007602 	andeq	r7, r0, r2, lsl #12
     8fc:	0083b816 	addeq	fp, r3, r6, lsl r8
     900:	00096c00 	andeq	r6, r9, r0, lsl #24
     904:	50011700 	andpl	r1, r1, r0, lsl #14
     908:	00007502 	andeq	r7, r0, r2, lsl #10
     90c:	83801600 	orrhi	r1, r0, #0, 12
     910:	023c0000 	eorseq	r0, ip, #0
     914:	01170000 	tsteq	r7, r0
     918:	48030550 	stmdami	r3, {r4, r6, r8, sl}
     91c:	0000009d 	muleq	r0, sp, r0
     920:	021f2000 	andseq	r2, pc, #0
     924:	8d020000 	stchi	0, cr0, [r2, #-0]
     928:	000083c4 	andeq	r8, r0, r4, asr #7
     92c:	00000090 	muleq	r0, r0, r0
     930:	06f89c01 	ldrbteq	r9, [r8], r1, lsl #24
     934:	18240000 	stmdane	r4!, {}	; <UNPREDICTABLE>
     938:	02000002 	andeq	r0, r0, #2
     93c:	00002c90 	muleq	r0, r0, ip
     940:	0001e100 	andeq	lr, r1, r0, lsl #2
     944:	02122400 	andseq	r2, r2, #0, 8
     948:	91020000 	mrsls	r0, (UNDEF: 2)
     94c:	0000002c 	andeq	r0, r0, ip, lsr #32
     950:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     954:	02006e1b 	andeq	r6, r0, #432	; 0x1b0
     958:	00002c92 	muleq	r0, r2, ip
     95c:	00022900 	andeq	r2, r2, r0, lsl #18
     960:	01381800 	teqeq	r8, r0, lsl #16
     964:	07080000 	streq	r0, [r8, -r0]
     968:	03050000 	movweq	r0, #20480	; 0x5000
     96c:	00009758 	andeq	r9, r0, r8, asr r7
     970:	0083d819 	addeq	sp, r3, r9, lsl r8
     974:	00017900 	andeq	r7, r1, r0, lsl #18
     978:	00067a00 	andeq	r7, r6, r0, lsl #20
     97c:	50011700 	andpl	r1, r1, r0, lsl #14
     980:	00007402 	andeq	r7, r0, r2, lsl #8
     984:	0083e419 	addeq	lr, r3, r9, lsl r4
     988:	00017900 	andeq	r7, r1, r0, lsl #18
     98c:	00068e00 	andeq	r8, r6, r0, lsl #28
     990:	50011700 	andpl	r1, r1, r0, lsl #14
     994:	00147402 	andseq	r7, r4, r2, lsl #8
     998:	00841819 	addeq	r1, r4, r9, lsl r8
     99c:	00093500 	andeq	r3, r9, r0, lsl #10
     9a0:	0006c400 	andeq	ip, r6, r0, lsl #8
     9a4:	53011700 	movwpl	r1, #5888	; 0x1700
     9a8:	17960802 	ldrne	r0, [r6, r2, lsl #16]
     9ac:	03055201 	movweq	r5, #20993	; 0x5201
     9b0:	00009758 	andeq	r9, r0, r8, asr r7
     9b4:	05510117 	ldrbeq	r0, [r1, #-279]	; 0x117
     9b8:	00989003 	addseq	r9, r8, r3
     9bc:	50011700 	andpl	r1, r1, r0, lsl #14
     9c0:	98a00305 	stmials	r0!, {r0, r2, r8, r9}
     9c4:	02170000 	andseq	r0, r7, #0
     9c8:	7502087d 	strvc	r0, [r2, #-2173]	; 0x87d
     9cc:	1c1a0000 	ldcne	0, cr0, [sl], {-0}
     9d0:	4b000084 	blmi	be8 <_start-0x7418>
     9d4:	19000009 	stmdbne	r0, {r0, r3}
     9d8:	00008424 	andeq	r8, r0, r4, lsr #8
     9dc:	0000023c 	andeq	r0, r0, ip, lsr r2
     9e0:	000006e4 	andeq	r0, r0, r4, ror #13
     9e4:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     9e8:	009d4803 	addseq	r4, sp, r3, lsl #16
     9ec:	34160000 	ldrcc	r0, [r6], #-0
     9f0:	35000084 	strcc	r0, [r0, #-132]	; 0x84
     9f4:	17000009 	strne	r0, [r0, -r9]
     9f8:	03055001 	movweq	r5, #20481	; 0x5001
     9fc:	000098f8 	strdeq	r9, [r0], -r8
     a00:	7f080000 	svcvc	0x00080000
     a04:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     a08:	09000007 	stmdbeq	r0, {r0, r1, r2}
     a0c:	00000076 	andeq	r0, r0, r6, ror r0
     a10:	f8070012 			; <UNDEFINED> instruction: 0xf8070012
     a14:	20000006 	andcs	r0, r0, r6
     a18:	0000011f 	andeq	r0, r0, pc, lsl r1
     a1c:	84547402 	ldrbhi	r7, [r4], #-1026	; 0x402
     a20:	00540000 	subseq	r0, r4, r0
     a24:	9c010000 	stcls	0, cr0, [r1], {-0}
     a28:	0000077c 	andeq	r0, r0, ip, ror r7
     a2c:	00846019 	addeq	r6, r4, r9, lsl r0
     a30:	00023c00 	andeq	r3, r2, r0, lsl #24
     a34:	00073900 	andeq	r3, r7, r0, lsl #18
     a38:	50011700 	andpl	r1, r1, r0, lsl #14
     a3c:	9d480305 	stclls	3, cr0, [r8, #-20]	; 0xffffffec
     a40:	1a000000 	bne	a48 <_start-0x75b8>
     a44:	0000846c 	andeq	r8, r0, ip, ror #8
     a48:	00000617 	andeq	r0, r0, r7, lsl r6
     a4c:	0084701a 	addeq	r7, r4, sl, lsl r0
     a50:	0003d500 	andeq	sp, r3, r0, lsl #10
     a54:	84801900 	strhi	r1, [r0], #2304	; 0x900
     a58:	02f90000 	rscseq	r0, r9, #0
     a5c:	075f0000 	ldrbeq	r0, [pc, -r0]
     a60:	01170000 	tsteq	r7, r0
     a64:	14740250 	ldrbtne	r0, [r4], #-592	; 0x250
     a68:	84901a00 	ldrhi	r1, [r0], #2560	; 0xa00
     a6c:	096c0000 	stmdbeq	ip!, {}^	; <UNPREDICTABLE>
     a70:	98160000 	ldmdals	r6, {}	; <UNPREDICTABLE>
     a74:	35000084 	strcc	r0, [r0, #-132]	; 0x84
     a78:	17000009 	strne	r0, [r0, -r9]
     a7c:	03055001 	movweq	r5, #20481	; 0x5001
     a80:	00009918 	andeq	r9, r0, r8, lsl r9
     a84:	5e200000 	cdppl	0, 2, cr0, cr0, cr0, {0}
     a88:	02000002 	andeq	r0, r0, #2
     a8c:	0084a8a3 	addeq	sl, r4, r3, lsr #17
     a90:	00002800 	andeq	r2, r0, r0, lsl #16
     a94:	d99c0100 	ldmible	ip, {r8}
     a98:	18000007 	stmdane	r0, {r0, r1, r2}
     a9c:	00000138 	andeq	r0, r0, r8, lsr r1
     aa0:	000007e9 	andeq	r0, r0, r9, ror #15
     aa4:	976c0305 	strbls	r0, [ip, -r5, lsl #6]!
     aa8:	c0190000 	andsgt	r0, r9, r0
     aac:	35000084 	strcc	r0, [r0, #-132]	; 0x84
     ab0:	cf000009 	svcgt	0x00000009
     ab4:	17000007 	strne	r0, [r0, -r7]
     ab8:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     abc:	520117a4 	andpl	r1, r1, #164, 14	; 0x2900000
     ac0:	976c0305 	strbls	r0, [ip, -r5, lsl #6]!
     ac4:	01170000 	tsteq	r7, r0
     ac8:	90030551 	andls	r0, r3, r1, asr r5
     acc:	17000098 			; <UNDEFINED> instruction: 0x17000098
     ad0:	03055001 	movweq	r5, #20481	; 0x5001
     ad4:	00009948 	andeq	r9, r0, r8, asr #18
     ad8:	84c41a00 	strbhi	r1, [r4], #2560	; 0xa00
     adc:	094b0000 	stmdbeq	fp, {}^	; <UNPREDICTABLE>
     ae0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     ae4:	0000007f 	andeq	r0, r0, pc, ror r0
     ae8:	000007e9 	andeq	r0, r0, r9, ror #15
     aec:	00007609 	andeq	r7, r0, r9, lsl #12
     af0:	07000f00 	streq	r0, [r0, -r0, lsl #30]
     af4:	000007d9 	ldrdeq	r0, [r0], -r9
     af8:	0001f420 	andeq	pc, r1, r0, lsr #8
     afc:	d0ac0200 	adcle	r0, ip, r0, lsl #4
     b00:	28000084 	stmdacs	r0, {r2, r7}
     b04:	01000000 	mrseq	r0, (UNDEF: 0)
     b08:	0008599c 	muleq	r8, ip, r9
     b0c:	68741300 	ldmdavs	r4!, {r8, r9, ip}^
     b10:	68ac0200 	stmiavs	ip!, {r9}
     b14:	53000001 	movwpl	r0, #1
     b18:	18000002 	stmdane	r0, {r1}
     b1c:	00000138 	andeq	r0, r0, r8, lsr r1
     b20:	00000859 	andeq	r0, r0, r9, asr r8
     b24:	977c0305 	ldrbls	r0, [ip, -r5, lsl #6]!
     b28:	e8190000 	ldmda	r9, {}	; <UNPREDICTABLE>
     b2c:	35000084 	strcc	r0, [r0, #-132]	; 0x84
     b30:	4f000009 	svcmi	0x00000009
     b34:	17000008 	strne	r0, [r0, -r8]
     b38:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     b3c:	520117ad 	andpl	r1, r1, #45350912	; 0x2b40000
     b40:	977c0305 	ldrbls	r0, [ip, -r5, lsl #6]!
     b44:	01170000 	tsteq	r7, r0
     b48:	90030551 	andls	r0, r3, r1, asr r5
     b4c:	17000098 			; <UNDEFINED> instruction: 0x17000098
     b50:	03055001 	movweq	r5, #20481	; 0x5001
     b54:	00009948 	andeq	r9, r0, r8, asr #18
     b58:	84ec1a00 	strbthi	r1, [ip], #2560	; 0xa00
     b5c:	094b0000 	stmdbeq	fp, {}^	; <UNPREDICTABLE>
     b60:	07000000 	streq	r0, [r0, -r0]
     b64:	00000474 	andeq	r0, r0, r4, ror r4
     b68:	00027420 	andeq	r7, r2, r0, lsr #8
     b6c:	f8b30200 			; <UNDEFINED> instruction: 0xf8b30200
     b70:	28000084 	stmdacs	r0, {r2, r7}
     b74:	01000000 	mrseq	r0, (UNDEF: 0)
     b78:	0008ca9c 	muleq	r8, ip, sl
     b7c:	05f51e00 	ldrbeq	r1, [r5, #3584]!	; 0xe00
     b80:	b3020000 	movwlt	r0, #8192	; 0x2000
     b84:	0000005d 	andeq	r0, r0, sp, asr r0
     b88:	00000274 	andeq	r0, r0, r4, ror r2
     b8c:	00013818 	andeq	r3, r1, r8, lsl r8
     b90:	0008ca00 	andeq	ip, r8, r0, lsl #20
     b94:	88030500 	stmdahi	r3, {r8, sl}
     b98:	19000097 	stmdbne	r0, {r0, r1, r2, r4, r7}
     b9c:	00008510 	andeq	r8, r0, r0, lsl r5
     ba0:	00000935 	andeq	r0, r0, r5, lsr r9
     ba4:	000008c0 	andeq	r0, r0, r0, asr #17
     ba8:	02530117 	subseq	r0, r3, #-1073741819	; 0xc0000005
     bac:	0117b408 	tsteq	r7, r8, lsl #8
     bb0:	88030552 	stmdahi	r3, {r1, r4, r6, r8, sl}
     bb4:	17000097 			; <UNDEFINED> instruction: 0x17000097
     bb8:	03055101 	movweq	r5, #20737	; 0x5101
     bbc:	00009890 	muleq	r0, r0, r8
     bc0:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     bc4:	00994803 	addseq	r4, r9, r3, lsl #16
     bc8:	141a0000 	ldrne	r0, [sl], #-0
     bcc:	4b000085 	blmi	de8 <_start-0x7218>
     bd0:	00000009 	andeq	r0, r0, r9
     bd4:	0007d907 	andeq	sp, r7, r7, lsl #18
     bd8:	02c72100 	sbceq	r2, r7, #0, 2
     bdc:	0a020000 	beq	80be4 <__bss_end__+0x76a84>
     be0:	0000016e 	andeq	r0, r0, lr, ror #2
     be4:	9d480305 	stclls	3, cr0, [r8, #-20]	; 0xffffffec
     be8:	6e210000 	cdpvs	0, 2, cr0, cr1, cr0, {0}
     bec:	02000002 	andeq	r0, r0, #2
     bf0:	00016e0a 	andeq	r6, r1, sl, lsl #28
     bf4:	34030500 	strcc	r0, [r3], #-1280	; 0x500
     bf8:	2100009d 	swpcs	r0, sp, [r0]	; <UNPREDICTABLE>
     bfc:	000001dc 	ldrdeq	r0, [r0], -ip
     c00:	01680c02 	cmneq	r8, r2, lsl #24
     c04:	03050000 	movweq	r0, #20480	; 0x5000
     c08:	00009d44 	andeq	r9, r0, r4, asr #26
     c0c:	00029221 	andeq	r9, r2, r1, lsr #4
     c10:	680d0200 	stmdavs	sp, {r9}
     c14:	05000001 	streq	r0, [r0, #-1]
     c18:	009d5403 	addseq	r5, sp, r3, lsl #8
     c1c:	69742500 	ldmdbvs	r4!, {r8, sl, sp}^
     c20:	10020064 	andne	r0, r2, r4, rrx
     c24:	0000002c 	andeq	r0, r0, ip, lsr #32
     c28:	96c80305 	strbls	r0, [r8], r5, lsl #6
     c2c:	e3210000 	teq	r1, #0
     c30:	02000002 	andeq	r0, r0, #2
     c34:	00002c12 	andeq	r2, r0, r2, lsl ip
     c38:	40030500 	andmi	r0, r3, r0, lsl #10
     c3c:	2600009d 			; <UNDEFINED> instruction: 0x2600009d
     c40:	0000043a 	andeq	r0, r0, sl, lsr r4
     c44:	00252705 	eoreq	r2, r5, r5, lsl #14
     c48:	094b0000 	stmdbeq	fp, {}^	; <UNPREDICTABLE>
     c4c:	860e0000 	strhi	r0, [lr], -r0
     c50:	27000000 	strcs	r0, [r0, -r0]
     c54:	00051f00 	andeq	r1, r5, r0, lsl #30
     c58:	5c050000 	stcpl	0, cr0, [r5], {-0}
     c5c:	00024e26 	andeq	r4, r2, r6, lsr #28
     c60:	7d670500 	cfstr64vc	mvdx0, [r7, #-0]
     c64:	6c000000 	stcvs	0, cr0, [r0], {-0}
     c68:	0e000009 	cdpeq	0, 0, cr0, cr0, cr9, {0}
     c6c:	0000002c 	andeq	r0, r0, ip, lsr #32
     c70:	00002c0e 	andeq	r2, r0, lr, lsl #24
     c74:	cc280000 	stcgt	0, cr0, [r8], #-0
     c78:	03000002 	movweq	r0, #2
     c7c:	00098246 	andeq	r8, r9, r6, asr #4
     c80:	09820e00 	stmibeq	r2, {r9, sl, fp}
     c84:	820e0000 	andhi	r0, lr, #0
     c88:	00000009 	andeq	r0, r0, r9
     c8c:	005d0406 	subseq	r0, sp, r6, lsl #8
     c90:	7f000000 	svcvc	0x00000000
     c94:	04000009 	streq	r0, [r0], #-9
     c98:	00039e00 	andeq	r9, r3, r0, lsl #28
     c9c:	10010400 	andne	r0, r1, r0, lsl #8
     ca0:	01000000 	mrseq	r0, (UNDEF: 0)
     ca4:	000002f5 	strdeq	r0, [r0], -r5
     ca8:	000000b1 	strheq	r0, [r0], -r1
     cac:	0000858c 	andeq	r8, r0, ip, lsl #11
     cb0:	00000518 	andeq	r0, r0, r8, lsl r5
     cb4:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
     cb8:	69050402 	stmdbvs	r5, {r1, sl}
     cbc:	0300746e 	movweq	r7, #1134	; 0x46e
     cc0:	00000333 	andeq	r0, r0, r3, lsr r3
     cc4:	0037d403 	eorseq	sp, r7, r3, lsl #8
     cc8:	04040000 	streq	r0, [r4], #-0
     ccc:	00015d07 	andeq	r5, r1, r7, lsl #26
     cd0:	06010400 	streq	r0, [r1], -r0, lsl #8
     cd4:	0000008f 	andeq	r0, r0, pc, lsl #1
     cd8:	a3050204 	movwge	r0, #20996	; 0x5204
     cdc:	04000001 	streq	r0, [r0], #-1
     ce0:	018f0504 	orreq	r0, pc, r4, lsl #10
     ce4:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     ce8:	00018a05 	andeq	r8, r1, r5, lsl #20
     cec:	08010400 	stmdaeq	r1, {sl}
     cf0:	0000008d 	andeq	r0, r0, sp, lsl #1
     cf4:	0c070204 	sfmeq	f0, 4, [r7], {4}
     cf8:	04000001 	streq	r0, [r0], #-1
     cfc:	01580704 	cmpeq	r8, r4, lsl #14
     d00:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     d04:	00015307 	andeq	r5, r1, r7, lsl #6
     d08:	07040400 	streq	r0, [r4, -r0, lsl #8]
     d0c:	00000181 	andeq	r0, r0, r1, lsl #3
     d10:	01040405 	tsteq	r4, r5, lsl #8
     d14:	00009608 	andeq	r9, r0, r8, lsl #12
     d18:	8c040600 	stchi	6, cr0, [r4], {-0}
     d1c:	07000000 	streq	r0, [r0, -r0]
     d20:	0000007f 	andeq	r0, r0, pc, ror r0
     d24:	00007f08 	andeq	r7, r0, r8, lsl #30
     d28:	0000a100 	andeq	sl, r0, r0, lsl #2
     d2c:	00760900 	rsbseq	r0, r6, r0, lsl #18
     d30:	00070000 	andeq	r0, r7, r0
     d34:	00032d03 	andeq	r2, r3, r3, lsl #26
     d38:	5a1b0200 	bpl	6c1540 <__bss_end__+0x6b73e0>
     d3c:	0a000000 	beq	d44 <_start-0x72bc>
     d40:	27022014 	smladcs	r2, r4, r0, r2
     d44:	00000106 	andeq	r0, r0, r6, lsl #2
     d48:	0003a60b 	andeq	sl, r3, fp, lsl #12
     d4c:	17290200 	strne	r0, [r9, -r0, lsl #4]!
     d50:	00000001 	andeq	r0, r0, r1
     d54:	0003970c 	andeq	r9, r3, ip, lsl #14
     d58:	372a0200 	strcc	r0, [sl, -r0, lsl #4]!
     d5c:	00000000 	andeq	r0, r0, r0
     d60:	02c20c20 	sbceq	r0, r2, #32, 24	; 0x2000
     d64:	2b020000 	blcs	80d6c <__bss_end__+0x76c0c>
     d68:	0000011c 	andeq	r0, r0, ip, lsl r1
     d6c:	a30c2004 	movwge	r2, #49156	; 0xc004
     d70:	02000002 	andeq	r0, r0, #2
     d74:	00011c2b 	andeq	r1, r1, fp, lsr #24
     d78:	0c200800 	stceq	8, cr0, [r0], #-0
     d7c:	0000031f 	andeq	r0, r0, pc, lsl r3
     d80:	011c2e02 	tsteq	ip, r2, lsl #28
     d84:	200c0000 	andcs	r0, ip, r0
     d88:	0003440d 	andeq	r4, r3, sp, lsl #8
     d8c:	37300200 	ldrcc	r0, [r0, -r0, lsl #4]!
     d90:	04000000 	streq	r0, [r0], #-0
     d94:	20101f01 	andscs	r1, r0, r1, lsl #30
     d98:	00a10800 	adceq	r0, r1, r0, lsl #16
     d9c:	01170000 	tsteq	r7, r0
     da0:	760e0000 	strvc	r0, [lr], -r0
     da4:	ff000000 			; <UNDEFINED> instruction: 0xff000000
     da8:	060f001f 			; <UNDEFINED> instruction: 0x060f001f
     dac:	0f000001 	svceq	0x00000001
     db0:	00000037 	andeq	r0, r0, r7, lsr r0
     db4:	0003c303 	andeq	ip, r3, r3, lsl #6
     db8:	ac310200 	lfmge	f0, 4, [r1], #-0
     dbc:	10000000 	andne	r0, r0, r0
     dc0:	0000039d 	muleq	r0, sp, r3
     dc4:	00375602 	eorseq	r5, r7, r2, lsl #12
     dc8:	46030000 	strmi	r0, [r3], -r0
     dcc:	11000001 	tstne	r0, r1
     dd0:	56020071 			; <UNDEFINED> instruction: 0x56020071
     dd4:	00000146 	andeq	r0, r0, r6, asr #2
     dd8:	21040600 	tstcs	r4, r0, lsl #12
     ddc:	10000001 	andne	r0, r0, r1
     de0:	0000038e 	andeq	r0, r0, lr, lsl #7
     de4:	00255102 	eoreq	r5, r5, r2, lsl #2
     de8:	66030000 	strvs	r0, [r3], -r0
     dec:	11000001 	tstne	r0, r1
     df0:	51020071 	tstpl	r2, r1, ror r0
     df4:	00000146 	andeq	r0, r0, r6, asr #2
     df8:	03ac1000 			; <UNDEFINED> instruction: 0x03ac1000
     dfc:	54020000 	strpl	r0, [r2], #-0
     e00:	00000025 	andeq	r0, r0, r5, lsr #32
     e04:	00018003 	andeq	r8, r1, r3
     e08:	00711100 	rsbseq	r1, r1, r0, lsl #2
     e0c:	01465402 	cmpeq	r6, r2, lsl #8
     e10:	10000000 	andne	r0, r0, r0
     e14:	00000300 	andeq	r0, r0, r0, lsl #6
     e18:	00255a02 	eoreq	r5, r5, r2, lsl #20
     e1c:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
     e20:	11000001 	tstne	r0, r1
     e24:	5a020063 	bpl	80fb8 <__bss_end__+0x76e58>
     e28:	00000146 	andeq	r0, r0, r6, asr #2
     e2c:	02006511 	andeq	r6, r0, #71303168	; 0x4400000
     e30:	0001ae5a 	andeq	sl, r1, sl, asr lr
     e34:	02a31200 	adceq	r1, r3, #0, 4
     e38:	5d020000 	stcpl	0, cr0, [r2, #-0]
     e3c:	00000037 	andeq	r0, r0, r7, lsr r0
     e40:	a1040600 	tstge	r4, r0, lsl #12
     e44:	10000000 	andne	r0, r0, r0
     e48:	00000361 	andeq	r0, r0, r1, ror #6
     e4c:	00375702 	eorseq	r5, r7, r2, lsl #14
     e50:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
     e54:	11000001 	tstne	r0, r1
     e58:	57020071 	smlsdxpl	r2, r1, r0, r0
     e5c:	00000146 	andeq	r0, r0, r6, asr #2
     e60:	037c1000 	cmneq	ip, #0
     e64:	64020000 	strvs	r0, [r2], #-0
     e68:	00000025 	andeq	r0, r0, r5, lsr #32
     e6c:	00020703 	andeq	r0, r2, r3, lsl #14
     e70:	00631100 	rsbeq	r1, r3, r0, lsl #2
     e74:	01466402 	cmpeq	r6, r2, lsl #8
     e78:	78110000 	ldmdavc	r1, {}	; <UNPREDICTABLE>
     e7c:	a1640200 	cmnge	r4, r0, lsl #4
     e80:	12000000 	andne	r0, r0, #0
     e84:	000002c2 	andeq	r0, r0, r2, asr #5
     e88:	00376502 	eorseq	r6, r7, r2, lsl #10
     e8c:	a3120000 	tstge	r2, #0
     e90:	02000002 	andeq	r0, r0, #2
     e94:	00003766 	andeq	r3, r0, r6, ror #14
     e98:	b4130000 	ldrlt	r0, [r3], #-0
     e9c:	01000003 	tsteq	r0, r3
     ea0:	00858c08 	addeq	r8, r5, r8, lsl #24
     ea4:	00008000 	andeq	r8, r0, r0
     ea8:	9d9c0100 	ldflss	f0, [ip]
     eac:	14000002 	strne	r0, [r0], #-2
     eb0:	08010063 	stmdaeq	r1, {r0, r1, r5, r6}
     eb4:	00000146 	andeq	r0, r0, r6, asr #2
     eb8:	00000295 	muleq	r0, r5, r2
     ebc:	00013815 	andeq	r3, r1, r5, lsl r8
     ec0:	0002ad00 	andeq	sl, r2, r0, lsl #26
     ec4:	74030500 	strvc	r0, [r3], #-1280	; 0x500
     ec8:	16000099 			; <UNDEFINED> instruction: 0x16000099
     ecc:	0000012c 	andeq	r0, r0, ip, lsr #2
     ed0:	000085a4 	andeq	r8, r0, r4, lsr #11
     ed4:	00000014 	andeq	r0, r0, r4, lsl r0
     ed8:	02550901 	subseq	r0, r5, #16384	; 0x4000
     edc:	3c170000 	ldccc	0, cr0, [r7], {-0}
     ee0:	b6000001 	strlt	r0, [r0], -r1
     ee4:	00000002 	andeq	r0, r0, r2
     ee8:	00014c16 	andeq	r4, r1, r6, lsl ip
     eec:	0085b800 	addeq	fp, r5, r0, lsl #16
     ef0:	00001400 	andeq	r1, r0, r0, lsl #8
     ef4:	72090100 	andvc	r0, r9, #0, 2
     ef8:	17000002 	strne	r0, [r0, -r2]
     efc:	0000015c 	andeq	r0, r0, ip, asr r1
     f00:	000002d7 	ldrdeq	r0, [r0], -r7
     f04:	85f01800 	ldrbhi	r1, [r0, #2048]!	; 0x800
     f08:	094a0000 	stmdbeq	sl, {}^	; <UNPREDICTABLE>
     f0c:	01190000 	tsteq	r9, r0
     f10:	193a0153 	ldmdbne	sl!, {r0, r1, r4, r6, r8}
     f14:	03055201 	movweq	r5, #20993	; 0x5201
     f18:	00009974 	andeq	r9, r0, r4, ror r9
     f1c:	05510119 	ldrbeq	r0, [r1, #-281]	; 0x119
     f20:	0099e403 	addseq	lr, r9, r3, lsl #8
     f24:	50011900 	andpl	r1, r1, r0, lsl #18
     f28:	99a80305 	stmibls	r8!, {r0, r2, r8, r9}
     f2c:	00000000 	andeq	r0, r0, r0
     f30:	00007f08 	andeq	r7, r0, r8, lsl #30
     f34:	0002ad00 	andeq	sl, r2, r0, lsl #26
     f38:	00760900 	rsbseq	r0, r6, r0, lsl #18
     f3c:	00080000 	andeq	r0, r8, r0
     f40:	00029d07 	andeq	r9, r2, r7, lsl #26
     f44:	03bd1300 			; <UNDEFINED> instruction: 0x03bd1300
     f48:	0d010000 	stceq	0, cr0, [r1, #-0]
     f4c:	0000860c 	andeq	r8, r0, ip, lsl #12
     f50:	00000040 	andeq	r0, r0, r0, asr #32
     f54:	031b9c01 	tsteq	fp, #256	; 0x100
     f58:	63140000 	tstvs	r4, #0
     f5c:	460d0100 	strmi	r0, [sp], -r0, lsl #2
     f60:	f8000001 			; <UNDEFINED> instruction: 0xf8000001
     f64:	15000002 	strne	r0, [r0, #-2]
     f68:	00000138 	andeq	r0, r0, r8, lsr r1
     f6c:	0000032b 	andeq	r0, r0, fp, lsr #6
     f70:	99800305 	stmibls	r0, {r0, r2, r8, r9}
     f74:	381a0000 	ldmdacc	sl, {}	; <UNPREDICTABLE>
     f78:	4a000086 	bmi	1198 <_start-0x6e68>
     f7c:	11000009 	tstne	r0, r9
     f80:	19000003 	stmdbne	r0, {r0, r1}
     f84:	3f015301 	svccc	0x00015301
     f88:	05520119 	ldrbeq	r0, [r2, #-281]	; 0x119
     f8c:	00998003 	addseq	r8, r9, r3
     f90:	51011900 	tstpl	r1, r0, lsl #18
     f94:	99e40305 	stmibls	r4!, {r0, r2, r8, r9}^
     f98:	01190000 	tsteq	r9, r0
     f9c:	f0030550 			; <UNDEFINED> instruction: 0xf0030550
     fa0:	00000099 	muleq	r0, r9, r0
     fa4:	00863c1b 	addeq	r3, r6, fp, lsl ip
     fa8:	00096000 	andeq	r6, r9, r0
     fac:	7f080000 	svcvc	0x00080000
     fb0:	2b000000 	blcs	fb8 <_start-0x7048>
     fb4:	09000003 	stmdbeq	r0, {r0, r1}
     fb8:	00000076 	andeq	r0, r0, r6, ror r0
     fbc:	1b070005 	blne	1c0fd8 <__bss_end__+0x1b6e78>
     fc0:	13000003 	movwne	r0, #3
     fc4:	0000036b 	andeq	r0, r0, fp, ror #6
     fc8:	864c1201 	strbhi	r1, [ip], -r1, lsl #4
     fcc:	01a40000 			; <UNDEFINED> instruction: 0x01a40000
     fd0:	9c010000 	stcls	0, cr0, [r1], {-0}
     fd4:	00000518 	andeq	r0, r0, r8, lsl r5
     fd8:	01006314 	tsteq	r0, r4, lsl r3
     fdc:	00014612 	andeq	r4, r1, r2, lsl r6
     fe0:	00031900 	andeq	r1, r3, r0, lsl #18
     fe4:	03441c00 	movteq	r1, #19456	; 0x4c00
     fe8:	12010000 	andne	r0, r1, #0
     fec:	00000037 	andeq	r0, r0, r7, lsr r0
     ff0:	00000337 	andeq	r0, r0, r7, lsr r3
     ff4:	00013815 	andeq	r3, r1, r5, lsl r8
     ff8:	00051800 	andeq	r1, r5, r0, lsl #16
     ffc:	88030500 	stmdahi	r3, {r8, sl}
    1000:	1d000099 	stcne	0, cr0, [r0, #-612]	; 0xfffffd9c
    1004:	1b010065 	blne	411a0 <__bss_end__+0x37040>
    1008:	000000a1 	andeq	r0, r0, r1, lsr #1
    100c:	00000363 	andeq	r0, r0, r3, ror #6
    1010:	00014c16 	andeq	r4, r1, r6, lsl ip
    1014:	0086a400 	addeq	sl, r6, r0, lsl #8
    1018:	00000800 	andeq	r0, r0, r0, lsl #16
    101c:	98180100 	ldmdals	r8, {r8}
    1020:	1e000003 	cdpne	0, 0, cr0, cr0, cr3, {0}
    1024:	0000015c 	andeq	r0, r0, ip, asr r1
    1028:	16005401 	strne	r5, [r0], -r1, lsl #8
    102c:	00000166 	andeq	r0, r0, r6, ror #2
    1030:	000086cc 	andeq	r8, r0, ip, asr #13
    1034:	00000018 	andeq	r0, r0, r8, lsl r0
    1038:	03b31901 			; <UNDEFINED> instruction: 0x03b31901
    103c:	761e0000 	ldrvc	r0, [lr], -r0
    1040:	01000001 	tsteq	r0, r1
    1044:	2c160054 	ldccs	0, cr0, [r6], {84}	; 0x54
    1048:	04000001 	streq	r0, [r0], #-1
    104c:	14000087 	strne	r0, [r0], #-135	; 0x87
    1050:	01000000 	mrseq	r0, (UNDEF: 0)
    1054:	0003ce1a 	andeq	ip, r3, sl, lsl lr
    1058:	013c1e00 	teqeq	ip, r0, lsl #28
    105c:	54010000 	strpl	r0, [r1], #-0
    1060:	01801f00 	orreq	r1, r0, r0, lsl #30
    1064:	87380000 	ldrhi	r0, [r8, -r0]!
    1068:	00000000 	andeq	r0, r0, r0
    106c:	1c010000 	stcne	0, cr0, [r1], {-0}
    1070:	0000041b 	andeq	r0, r0, fp, lsl r4
    1074:	0001991e 	andeq	r9, r1, lr, lsl r9
    1078:	03f20600 	mvnseq	r0, #0, 12
    107c:	00000010 	andeq	r0, r0, r0, lsl r0
    1080:	0001901e 	andeq	r9, r1, lr, lsl r0
    1084:	20540100 	subscs	r0, r4, r0, lsl #2
    1088:	00000000 	andeq	r0, r0, r0
    108c:	0001a221 	andeq	sl, r1, r1, lsr #4
    1090:	00039900 	andeq	r9, r3, r0, lsl #18
    1094:	014c2200 	mrseq	r2, (UNDEF: 108)
    1098:	87380000 	ldrhi	r0, [r8, -r0]!
    109c:	00100000 	andseq	r0, r0, r0
    10a0:	5b020000 	blpl	810a8 <__bss_end__+0x76f48>
    10a4:	00015c1e 	andeq	r5, r1, lr, lsl ip
    10a8:	00540100 	subseq	r0, r4, r0, lsl #2
    10ac:	641a0000 	ldrvs	r0, [sl], #-0
    10b0:	67000086 	strvs	r0, [r0, -r6, lsl #1]
    10b4:	3b000009 	blcc	10e0 <_start-0x6f20>
    10b8:	19000004 	stmdbne	r0, {r2}
    10bc:	0a035201 	beq	d58c8 <__bss_end__+0xcb768>
    10c0:	01192014 	tsteq	r9, r4, lsl r0
    10c4:	19300151 	ldmdbne	r0!, {r0, r4, r6, r8}
    10c8:	74025001 	strvc	r5, [r2], #-1
    10cc:	c81a0000 	ldmdagt	sl, {}	; <UNPREDICTABLE>
    10d0:	4a000086 	bmi	12f0 <_start-0x6d10>
    10d4:	69000009 	stmdbvs	r0, {r0, r3}
    10d8:	19000004 	stmdbne	r0, {r2}
    10dc:	48015301 	stmdami	r1, {r0, r8, r9, ip, lr}
    10e0:	05520119 	ldrbeq	r0, [r2, #-281]	; 0x119
    10e4:	00998803 	addseq	r8, r9, r3, lsl #16
    10e8:	51011900 	tstpl	r1, r0, lsl #18
    10ec:	99e40305 	stmibls	r4!, {r0, r2, r8, r9}^
    10f0:	01190000 	tsteq	r9, r0
    10f4:	14030550 	strne	r0, [r3], #-1360	; 0x550
    10f8:	0000009a 	muleq	r0, sl, r0
    10fc:	0086cc1b 	addeq	ip, r6, fp, lsl ip
    1100:	00096000 	andeq	r6, r9, r0
    1104:	87001a00 	strhi	r1, [r0, -r0, lsl #20]
    1108:	094a0000 	stmdbeq	sl, {}^	; <UNPREDICTABLE>
    110c:	04a00000 	strteq	r0, [r0], #0
    1110:	01190000 	tsteq	r9, r0
    1114:	19490153 	stmdbne	r9, {r0, r1, r4, r6, r8}^
    1118:	03055201 	movweq	r5, #20993	; 0x5201
    111c:	00009988 	andeq	r9, r0, r8, lsl #19
    1120:	05510119 	ldrbeq	r0, [r1, #-281]	; 0x119
    1124:	0099e403 	addseq	lr, r9, r3, lsl #8
    1128:	50011900 	andpl	r1, r1, r0, lsl #18
    112c:	9a300305 	bls	c01d48 <__bss_end__+0xbf7be8>
    1130:	1b000000 	blne	1138 <_start-0x6ec8>
    1134:	00008704 	andeq	r8, r0, r4, lsl #14
    1138:	00000960 	andeq	r0, r0, r0, ror #18
    113c:	0087341a 	addeq	r3, r7, sl, lsl r4
    1140:	00094a00 	andeq	r4, r9, r0, lsl #20
    1144:	0004d700 	andeq	sp, r4, r0, lsl #14
    1148:	53011900 	movwpl	r1, #6400	; 0x1900
    114c:	01194a01 	tsteq	r9, r1, lsl #20
    1150:	88030552 	stmdahi	r3, {r1, r4, r6, r8, sl}
    1154:	19000099 	stmdbne	r0, {r0, r3, r4, r7}
    1158:	03055101 	movweq	r5, #20737	; 0x5101
    115c:	000099e4 	andeq	r9, r0, r4, ror #19
    1160:	05500119 	ldrbeq	r0, [r0, #-281]	; 0x119
    1164:	009a4c03 	addseq	r4, sl, r3, lsl #24
    1168:	381b0000 	ldmdacc	fp, {}	; <UNPREDICTABLE>
    116c:	60000087 	andvs	r0, r0, r7, lsl #1
    1170:	1a000009 	bne	119c <_start-0x6e64>
    1174:	000087bc 			; <UNDEFINED> instruction: 0x000087bc
    1178:	0000094a 	andeq	r0, r0, sl, asr #18
    117c:	0000050e 	andeq	r0, r0, lr, lsl #10
    1180:	01530119 	cmpeq	r3, r9, lsl r1
    1184:	5201194c 	andpl	r1, r1, #76, 18	; 0x130000
    1188:	99880305 	stmibls	r8, {r0, r2, r8, r9}
    118c:	01190000 	tsteq	r9, r0
    1190:	e4030551 	str	r0, [r3], #-1361	; 0x551
    1194:	19000099 	stmdbne	r0, {r0, r3, r4, r7}
    1198:	03055001 	movweq	r5, #20481	; 0x5001
    119c:	00009a70 	andeq	r9, r0, r0, ror sl
    11a0:	87c01b00 	strbhi	r1, [r0, r0, lsl #22]
    11a4:	09600000 	stmdbeq	r0!, {}^	; <UNPREDICTABLE>
    11a8:	07000000 	streq	r0, [r0, -r0]
    11ac:	00000091 	muleq	r0, r1, r0
    11b0:	00035323 	andeq	r5, r3, r3, lsr #6
    11b4:	a1350100 	teqge	r5, r0, lsl #2
    11b8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    11bc:	6c000087 	stcvs	0, cr0, [r0], {135}	; 0x87
    11c0:	01000000 	mrseq	r0, (UNDEF: 0)
    11c4:	00059e9c 	muleq	r5, ip, lr
    11c8:	00631400 	rsbeq	r1, r3, r0, lsl #8
    11cc:	01463501 	cmpeq	r6, r1, lsl #10
    11d0:	03b90000 			; <UNDEFINED> instruction: 0x03b90000
    11d4:	651d0000 	ldrvs	r0, [sp, #-0]
    11d8:	a1360100 	teqge	r6, r0, lsl #2
    11dc:	d7000000 	strle	r0, [r0, -r0]
    11e0:	22000003 	andcs	r0, r0, #3
    11e4:	00000180 	andeq	r0, r0, r0, lsl #3
    11e8:	000087f8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    11ec:	00000048 	andeq	r0, r0, r8, asr #32
    11f0:	991e3a01 	ldmdbls	lr, {r0, r9, fp, ip, sp}
    11f4:	06000001 	streq	r0, [r0], -r1
    11f8:	0011d6f2 			; <UNDEFINED> instruction: 0x0011d6f2
    11fc:	901e0000 	andsls	r0, lr, r0
    1200:	01000001 	tsteq	r0, r1
    1204:	87f82453 	ubfxhi	r2, r3, #8, #25
    1208:	00480000 	subeq	r0, r8, r0
    120c:	a2210000 	eorge	r0, r1, #0
    1210:	ea000001 	b	121c <_start-0x6de4>
    1214:	25000003 	strcs	r0, [r0, #-3]
    1218:	0000014c 	andeq	r0, r0, ip, asr #2
    121c:	000087f8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    1220:	00000018 	andeq	r0, r0, r8, lsl r0
    1224:	5c1e5b02 	ldcpl	11, cr5, [lr], {2}
    1228:	01000001 	tsteq	r0, r1
    122c:	00000053 	andeq	r0, r0, r3, asr r0
    1230:	03731300 	cmneq	r3, #0, 6
    1234:	40010000 	andmi	r0, r1, r0
    1238:	0000885c 	andeq	r8, r0, ip, asr r8
    123c:	00000034 	andeq	r0, r0, r4, lsr r0
    1240:	06119c01 	ldreq	r9, [r1], -r1, lsl #24
    1244:	63140000 	tstvs	r4, #0
    1248:	46400100 	strbmi	r0, [r0], -r0, lsl #2
    124c:	0a000001 	beq	1258 <_start-0x6da8>
    1250:	1c000004 	stcne	0, cr0, [r0], {4}
    1254:	00000328 	andeq	r0, r0, r8, lsr #6
    1258:	007d4001 	rsbseq	r4, sp, r1
    125c:	04280000 	strteq	r0, [r8], #-0
    1260:	6e140000 	cdpvs	0, 1, cr0, cr4, cr0, {0}
    1264:	37400100 	strbcc	r0, [r0, -r0, lsl #2]
    1268:	46000000 	strmi	r0, [r0], -r0
    126c:	1d000004 	stcne	0, cr0, [r0, #-16]
    1270:	41010070 	tstmi	r1, r0, ror r0
    1274:	000001ae 	andeq	r0, r0, lr, lsr #3
    1278:	00000464 	andeq	r0, r0, r4, ror #8
    127c:	00886c24 	addeq	r6, r8, r4, lsr #24
    1280:	00002000 	andeq	r2, r0, r0
    1284:	00691d00 	rsbeq	r1, r9, r0, lsl #26
    1288:	00254301 	eoreq	r4, r5, r1, lsl #6
    128c:	04820000 	streq	r0, [r2], #0
    1290:	7c180000 	ldcvc	0, cr0, [r8], {-0}
    1294:	1d000088 	stcne	0, cr0, [r0, #-544]	; 0xfffffde0
    1298:	19000005 	stmdbne	r0, {r0, r2}
    129c:	77025001 	strvc	r5, [r2, -r1]
    12a0:	00000000 	andeq	r0, r0, r0
    12a4:	00031023 	andeq	r1, r3, r3, lsr #32
    12a8:	251f0100 	ldrcs	r0, [pc, #-256]	; 11b0 <_start-0x6e50>
    12ac:	90000000 	andls	r0, r0, r0
    12b0:	58000088 	stmdapl	r0, {r3, r7}
    12b4:	01000000 	mrseq	r0, (UNDEF: 0)
    12b8:	00069f9c 	muleq	r6, ip, pc	; <UNPREDICTABLE>
    12bc:	00711400 	rsbseq	r1, r1, r0, lsl #8
    12c0:	01461f01 	cmpeq	r6, r1, lsl #30
    12c4:	04a10000 	strteq	r0, [r1], #0
    12c8:	281c0000 	ldmdacs	ip, {}	; <UNPREDICTABLE>
    12cc:	01000003 	tsteq	r0, r3
    12d0:	00007d1f 	andeq	r7, r0, pc, lsl sp
    12d4:	0004bf00 	andeq	fp, r4, r0, lsl #30
    12d8:	006e1400 	rsbeq	r1, lr, r0, lsl #8
    12dc:	00371f01 	eorseq	r1, r7, r1, lsl #30
    12e0:	04dd0000 	ldrbeq	r0, [sp], #0
    12e4:	2c160000 	ldccs	0, cr0, [r6], {-0}
    12e8:	a4000001 	strge	r0, [r0], #-1
    12ec:	18000088 	stmdane	r0, {r3, r7}
    12f0:	01000000 	mrseq	r0, (UNDEF: 0)
    12f4:	00066e21 	andeq	r6, r6, r1, lsr #28
    12f8:	013c1e00 	teqeq	ip, r0, lsl #28
    12fc:	54010000 	strpl	r0, [r1], #-0
    1300:	88a41a00 	stmiahi	r4!, {r9, fp, ip}
    1304:	02b20000 	adcseq	r0, r2, #0
    1308:	06820000 	streq	r0, [r2], r0
    130c:	01190000 	tsteq	r9, r0
    1310:	00740250 	rsbseq	r0, r4, r0, asr r2
    1314:	88d41800 	ldmhi	r4, {fp, ip}^
    1318:	059e0000 	ldreq	r0, [lr]
    131c:	01190000 	tsteq	r9, r0
    1320:	00750252 	rsbseq	r0, r5, r2, asr r2
    1324:	02510119 	subseq	r0, r1, #1073741830	; 0x40000006
    1328:	01190076 	tsteq	r9, r6, ror r0
    132c:	00740250 	rsbseq	r0, r4, r0, asr r2
    1330:	3a230000 	bcc	8c1338 <__bss_end__+0x8b71d8>
    1334:	01000003 	tsteq	r0, r3
    1338:	00002528 	andeq	r2, r0, r8, lsr #10
    133c:	0088e800 	addeq	lr, r8, r0, lsl #16
    1340:	0000a000 	andeq	sl, r0, r0
    1344:	9e9c0100 	fmllse	f0, f4, f0
    1348:	14000007 	strne	r0, [r0], #-7
    134c:	28010063 	stmdacs	r1, {r0, r1, r5, r6}
    1350:	00000146 	andeq	r0, r0, r6, asr #2
    1354:	000004fb 	strdeq	r0, [r0], -fp
    1358:	01007614 	tsteq	r0, r4, lsl r6
    135c:	0001ae28 	andeq	sl, r1, r8, lsr #28
    1360:	00052f00 	andeq	r2, r5, r0, lsl #30
    1364:	006e1400 	rsbeq	r1, lr, r0, lsl #8
    1368:	00372801 	eorseq	r2, r7, r1, lsl #16
    136c:	05690000 	strbeq	r0, [r9, #-0]!
    1370:	73260000 	teqvc	r6, #0
    1374:	2901007a 	stmdbcs	r1, {r1, r3, r4, r5, r6}
    1378:	00000025 	andeq	r0, r0, r5, lsr #32
    137c:	a3275501 	teqge	r7, #4194304	; 0x400000
    1380:	01000002 	tsteq	r0, r2
    1384:	0000372c 	andeq	r3, r0, ip, lsr #14
    1388:	0005a300 	andeq	sl, r5, r0, lsl #6
    138c:	01381500 	teqeq	r8, r0, lsl #10
    1390:	07ae0000 	streq	r0, [lr, r0]!
    1394:	03050000 	movweq	r0, #20480	; 0x5000
    1398:	00009990 	muleq	r0, r0, r9
    139c:	00012c16 	andeq	r2, r1, r6, lsl ip
    13a0:	0088f000 	addeq	pc, r8, r0
    13a4:	00001c00 	andeq	r1, r0, r0, lsl #24
    13a8:	26290100 	strtcs	r0, [r9], -r0, lsl #2
    13ac:	17000007 	strne	r0, [r0, -r7]
    13b0:	0000013c 	andeq	r0, r0, ip, lsr r1
    13b4:	000005c1 	andeq	r0, r0, r1, asr #11
    13b8:	012c1600 	teqeq	ip, r0, lsl #12
    13bc:	89300000 	ldmdbhi	r0!, {}	; <UNPREDICTABLE>
    13c0:	00140000 	andseq	r0, r4, r0
    13c4:	30010000 	andcc	r0, r1, r0
    13c8:	00000743 	andeq	r0, r0, r3, asr #14
    13cc:	00013c17 	andeq	r3, r1, r7, lsl ip
    13d0:	0005f500 	andeq	pc, r5, r0, lsl #10
    13d4:	201a0000 	andscs	r0, sl, r0
    13d8:	11000089 	smlabbne	r0, r9, r0, r0
    13dc:	65000006 	strvs	r0, [r0, #-6]
    13e0:	19000007 	stmdbne	r0, {r0, r1, r2}
    13e4:	f3035201 	vhsub.u8	d5, d3, d1
    13e8:	01195201 	tsteq	r9, r1, lsl #4
    13ec:	01f30351 	mvnseq	r0, r1, asr r3
    13f0:	50011951 	andpl	r1, r1, r1, asr r9
    13f4:	00007402 	andeq	r7, r0, r2, lsl #8
    13f8:	0089601a 	addeq	r6, r9, sl, lsl r0
    13fc:	00094a00 	andeq	r4, r9, r0, lsl #20
    1400:	00079400 	andeq	r9, r7, r0, lsl #8
    1404:	53011900 	movwpl	r1, #6400	; 0x1900
    1408:	19300802 	ldmdbne	r0!, {r1, fp}
    140c:	03055201 	movweq	r5, #20993	; 0x5201
    1410:	00009990 	muleq	r0, r0, r9
    1414:	05510119 	ldrbeq	r0, [r1, #-281]	; 0x119
    1418:	0099e403 	addseq	lr, r9, r3, lsl #8
    141c:	50011900 	andpl	r1, r1, r0, lsl #18
    1420:	9aa80305 	bls	fea0203c <__bss_end__+0xfe9f7edc>
    1424:	1b000000 	blne	142c <_start-0x6bd4>
    1428:	00008964 	andeq	r8, r0, r4, ror #18
    142c:	00000960 	andeq	r0, r0, r0, ror #18
    1430:	007f0800 	rsbseq	r0, pc, r0, lsl #16
    1434:	07ae0000 	streq	r0, [lr, r0]!
    1438:	76090000 	strvc	r0, [r9], -r0
    143c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1440:	079e0700 	ldreq	r0, [lr, r0, lsl #14]
    1444:	84230000 	strthi	r0, [r3], #-0
    1448:	01000003 	tsteq	r0, r3
    144c:	00002547 	andeq	r2, r0, r7, asr #10
    1450:	00898800 	addeq	r8, r9, r0, lsl #16
    1454:	00011c00 	andeq	r1, r1, r0, lsl #24
    1458:	459c0100 	ldrmi	r0, [ip, #256]	; 0x100
    145c:	14000009 	strne	r0, [r0], #-9
    1460:	47010063 	strmi	r0, [r1, -r3, rrx]
    1464:	00000146 	andeq	r0, r0, r6, asr #2
    1468:	00000613 	andeq	r0, r0, r3, lsl r6
    146c:	0003281c 	andeq	r2, r3, ip, lsl r8
    1470:	7d470100 	stfvce	f0, [r7, #-0]
    1474:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    1478:	14000006 	strne	r0, [r0], #-6
    147c:	4701006e 	strmi	r0, [r1, -lr, rrx]
    1480:	00000037 	andeq	r0, r0, r7, lsr r0
    1484:	000006dd 	ldrdeq	r0, [r0], -sp
    1488:	0100701d 	tsteq	r0, sp, lsl r0
    148c:	0001ae48 	andeq	sl, r1, r8, asr #28
    1490:	00073000 	andeq	r3, r7, r0
    1494:	01381500 	teqeq	r8, r0, lsl #10
    1498:	09450000 	stmdbeq	r5, {}^	; <UNPREDICTABLE>
    149c:	03050000 	movweq	r0, #20480	; 0x5000
    14a0:	0000999c 	muleq	r0, ip, r9
    14a4:	0001b416 	andeq	fp, r1, r6, lsl r4
    14a8:	00898c00 	addeq	r8, r9, r0, lsl #24
    14ac:	00002000 	andeq	r2, r0, r0
    14b0:	474a0100 	strbmi	r0, [sl, -r0, lsl #2]
    14b4:	17000008 	strne	r0, [r0, -r8]
    14b8:	000001c4 	andeq	r0, r0, r4, asr #3
    14bc:	00000775 	andeq	r0, r0, r5, ror r7
    14c0:	00012c22 	andeq	r2, r1, r2, lsr #24
    14c4:	00898c00 	addeq	r8, r9, r0, lsl #24
    14c8:	00001c00 	andeq	r1, r0, r0, lsl #24
    14cc:	17570200 	ldrbne	r0, [r7, -r0, lsl #4]
    14d0:	0000013c 	andeq	r0, r0, ip, lsr r1
    14d4:	00000775 	andeq	r0, r0, r5, ror r7
    14d8:	b8280000 	stmdalt	r8!, {}	; <UNPREDICTABLE>
    14dc:	84000089 	strhi	r0, [r0], #-137	; 0x89
    14e0:	ef000000 	svc	0x00000000
    14e4:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    14e8:	4c010069 	stcmi	0, cr0, [r1], {105}	; 0x69
    14ec:	00000025 	andeq	r0, r0, r5, lsr #32
    14f0:	000007fa 	strdeq	r0, [r0], -sl
    14f4:	0001ce1f 	andeq	ip, r1, pc, lsl lr
    14f8:	0089b800 	addeq	fp, r9, r0, lsl #16
    14fc:	00003000 	andeq	r3, r0, r0
    1500:	b64d0100 	strblt	r0, [sp], -r0, lsl #2
    1504:	17000008 	strne	r0, [r0, -r8]
    1508:	000001e7 	andeq	r0, r0, r7, ror #3
    150c:	00000823 	andeq	r0, r0, r3, lsr #16
    1510:	0001de17 	andeq	sp, r1, r7, lsl lr
    1514:	00085f00 	andeq	r5, r8, r0, lsl #30
    1518:	00302000 	eorseq	r2, r0, r0
    151c:	f0210000 			; <UNDEFINED> instruction: 0xf0210000
    1520:	8b000001 	blhi	152c <_start-0x6ad4>
    1524:	29000008 	stmdbcs	r0, {r3}
    1528:	000001fb 	strdeq	r0, [r0], -fp
    152c:	66225601 	strtvs	r5, [r2], -r1, lsl #12
    1530:	d8000001 	stmdale	r0, {r0}
    1534:	10000089 	andne	r0, r0, r9, lsl #1
    1538:	02000000 	andeq	r0, r0, #0
    153c:	01761767 	cmneq	r6, r7, ror #14
    1540:	08b60000 	ldmeq	r6!, {}	; <UNPREDICTABLE>
    1544:	00000000 	andeq	r0, r0, r0
    1548:	8a2c1a00 	bhi	b07d50 <__bss_end__+0xafdbf0>
    154c:	094a0000 	stmdbeq	sl, {}^	; <UNPREDICTABLE>
    1550:	08e50000 	stmiaeq	r5!, {}^	; <UNPREDICTABLE>
    1554:	01190000 	tsteq	r9, r0
    1558:	4e080253 	mcrmi	2, 0, r0, cr8, cr3, {2}
    155c:	05520119 	ldrbeq	r0, [r2, #-281]	; 0x119
    1560:	00999c03 	addseq	r9, r9, r3, lsl #24
    1564:	51011900 	tstpl	r1, r0, lsl #18
    1568:	99e40305 	stmibls	r4!, {r0, r2, r8, r9}^
    156c:	01190000 	tsteq	r9, r0
    1570:	cc030550 	cfstr32gt	mvfx0, [r3], {80}	; 0x50
    1574:	0000009a 	muleq	r0, sl, r0
    1578:	008a301b 	addeq	r3, sl, fp, lsl r0
    157c:	00096000 	andeq	r6, r9, r0
    1580:	4c160000 	ldcmi	0, cr0, [r6], {-0}
    1584:	44000001 	strmi	r0, [r0], #-1
    1588:	1000008a 	andne	r0, r0, sl, lsl #1
    158c:	01000000 	mrseq	r0, (UNDEF: 0)
    1590:	00090c50 	andeq	r0, r9, r0, asr ip
    1594:	015c1700 	cmpeq	ip, r0, lsl #14
    1598:	08e20000 	stmiaeq	r2!, {}^	; <UNPREDICTABLE>
    159c:	1a000000 	bne	15a4 <_start-0x6a5c>
    15a0:	00008a70 	andeq	r8, r0, r0, ror sl
    15a4:	0000094a 	andeq	r0, r0, sl, asr #18
    15a8:	0000093b 	andeq	r0, r0, fp, lsr r9
    15ac:	02530119 	subseq	r0, r3, #1073741830	; 0x40000006
    15b0:	01195008 	tsteq	r9, r8
    15b4:	9c030552 	cfstr32ls	mvfx0, [r3], {82}	; 0x52
    15b8:	19000099 	stmdbne	r0, {r0, r3, r4, r7}
    15bc:	03055101 	movweq	r5, #20737	; 0x5101
    15c0:	000099e4 	andeq	r9, r0, r4, ror #19
    15c4:	05500119 	ldrbeq	r0, [r0, #-281]	; 0x119
    15c8:	009af003 	addseq	pc, sl, r3
    15cc:	741b0000 	ldrvc	r0, [fp], #-0
    15d0:	6000008a 	andvs	r0, r0, sl, lsl #1
    15d4:	00000009 	andeq	r0, r0, r9
    15d8:	00079e07 	andeq	r9, r7, r7, lsl #28
    15dc:	043a2a00 	ldrteq	r2, [sl], #-2560	; 0xa00
    15e0:	27040000 	strcs	r0, [r4, -r0]
    15e4:	00000025 	andeq	r0, r0, r5, lsr #32
    15e8:	00000960 	andeq	r0, r0, r0, ror #18
    15ec:	0000862b 	andeq	r8, r0, fp, lsr #12
    15f0:	2d002c00 	stccs	12, cr2, [r0, #-0]
    15f4:	00000005 	andeq	r0, r0, r5
    15f8:	5a2e5c04 	bpl	b98610 <__bss_end__+0xb8e4b0>
    15fc:	05000003 	streq	r0, [r0, #-3]
    1600:	00007d1b 	andeq	r7, r0, fp, lsl sp
    1604:	007d2b00 	rsbseq	r2, sp, r0, lsl #22
    1608:	252b0000 	strcs	r0, [fp, #-0]!
    160c:	2b000000 	blcs	1614 <_start-0x69ec>
    1610:	0000002c 	andeq	r0, r0, ip, lsr #32
    1614:	00db0000 	sbcseq	r0, fp, r0
    1618:	00040000 	andeq	r0, r4, r0
    161c:	000005fc 	strdeq	r0, [r0], -ip
    1620:	00100104 	andseq	r0, r0, r4, lsl #2
    1624:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    1628:	d6000003 	strle	r0, [r0], -r3
    162c:	64000003 	strvs	r0, [r0], #-3
    1630:	2000008b 	andcs	r0, r0, fp, lsl #1
    1634:	2c000000 	stccs	0, cr0, [r0], {-0}
    1638:	02000005 	andeq	r0, r0, #5
    163c:	008f0601 	addeq	r0, pc, r1, lsl #12
    1640:	01020000 	mrseq	r0, (UNDEF: 2)
    1644:	00008d08 	andeq	r8, r0, r8, lsl #26
    1648:	05020200 	streq	r0, [r2, #-512]	; 0x200
    164c:	000001a3 	andeq	r0, r0, r3, lsr #3
    1650:	0c070202 	sfmeq	f0, 4, [r7], {2}
    1654:	03000001 	movweq	r0, #1
    1658:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    165c:	04020074 	streq	r0, [r2], #-116	; 0x74
    1660:	00015d07 	andeq	r5, r1, r7, lsl #26
    1664:	05080200 	streq	r0, [r8, #-512]	; 0x200
    1668:	0000018a 	andeq	r0, r0, sl, lsl #3
    166c:	53070802 	movwpl	r0, #30722	; 0x7802
    1670:	02000001 	andeq	r0, r0, #1
    1674:	018f0504 	orreq	r0, pc, r4, lsl #10
    1678:	04020000 	streq	r0, [r2], #-0
    167c:	00018107 	andeq	r8, r1, r7, lsl #2
    1680:	02040400 	andeq	r0, r4, #0, 8
    1684:	01580704 	cmpeq	r8, r4, lsl #14
    1688:	04050000 	streq	r0, [r5], #-0
    168c:	0000007a 	andeq	r0, r0, sl, ror r0
    1690:	96080102 	strls	r0, [r8], -r2, lsl #2
    1694:	06000000 	streq	r0, [r0], -r0
    1698:	00000333 	andeq	r0, r0, r3, lsr r3
    169c:	0048d402 	subeq	sp, r8, r2, lsl #8
    16a0:	5a070000 	bpl	1c16a8 <__bss_end__+0x1b7548>
    16a4:	03000003 	movweq	r0, #3
    16a8:	00006b1b 	andeq	r6, r0, fp, lsl fp
    16ac:	008b6400 	addeq	r6, fp, r0, lsl #8
    16b0:	00002000 	andeq	r2, r0, r0
    16b4:	089c0100 	ldmeq	ip, {r8}
    16b8:	0100705f 	qaddeq	r7, pc, r0	; <UNPREDICTABLE>
    16bc:	00006b03 	andeq	r6, r0, r3, lsl #22
    16c0:	08500100 	ldmdaeq	r0, {r8}^
    16c4:	03010063 	movweq	r0, #4195	; 0x1063
    16c8:	00000041 	andeq	r0, r0, r1, asr #32
    16cc:	6e095101 	adfvse	f5, f1, f1
    16d0:	81030100 	mrshi	r0, (UNDEF: 19)
    16d4:	1c000000 	stcne	0, cr0, [r0], {-0}
    16d8:	0a000009 	beq	1704 <_start-0x68fc>
    16dc:	04010070 	streq	r0, [r1], #-112	; 0x70
    16e0:	00000074 	andeq	r0, r0, r4, ror r0
    16e4:	0000093d 	andeq	r0, r0, sp, lsr r9
    16e8:	0100650b 	tsteq	r0, fp, lsl #10
    16ec:	00007404 	andeq	r7, r0, r4, lsl #8
    16f0:	00520100 	subseq	r0, r2, r0, lsl #2
    16f4:	00019100 	andeq	r9, r1, r0, lsl #2
    16f8:	99000400 	stmdbls	r0, {sl}
    16fc:	04000006 	streq	r0, [r0], #-6
    1700:	00001001 	andeq	r1, r0, r1
    1704:	04290100 	strteq	r0, [r9], #-256	; 0x100
    1708:	03d60000 	bicseq	r0, r6, #0
    170c:	8b840000 	blhi	fe101714 <__bss_end__+0xfe0f75b4>
    1710:	00580000 	subseq	r0, r8, r0
    1714:	061c0000 	ldreq	r0, [ip], -r0
    1718:	1a020000 	bne	81720 <__bss_end__+0x775c0>
    171c:	02000004 	andeq	r0, r0, #4
    1720:	00003028 	andeq	r3, r0, r8, lsr #32
    1724:	04410300 	strbeq	r0, [r1], #-768	; 0x300
    1728:	03040000 	movweq	r0, #16384	; 0x4000
    172c:	00004700 	andeq	r4, r0, r0, lsl #14
    1730:	04500400 	ldrbeq	r0, [r0], #-1024	; 0x400
    1734:	00470000 	subeq	r0, r7, r0
    1738:	00000000 	andeq	r0, r0, r0
    173c:	43020405 	movwmi	r0, #9221	; 0x2405
    1740:	02000004 	andeq	r0, r0, #4
    1744:	00002562 	andeq	r2, r0, r2, ror #10
    1748:	05040600 	streq	r0, [r4, #-1536]	; 0x600
    174c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1750:	5d070407 	cfstrspl	mvf0, [r7, #-28]	; 0xffffffe4
    1754:	07000001 	streq	r0, [r0, -r1]
    1758:	008f0601 	addeq	r0, pc, r1, lsl #12
    175c:	02070000 	andeq	r0, r7, #0
    1760:	0001a305 	andeq	sl, r1, r5, lsl #6
    1764:	05040700 	streq	r0, [r4, #-1792]	; 0x700
    1768:	0000018f 	andeq	r0, r0, pc, lsl #3
    176c:	8a050807 	bhi	143790 <__bss_end__+0x139630>
    1770:	07000001 	streq	r0, [r0, -r1]
    1774:	008d0801 	addeq	r0, sp, r1, lsl #16
    1778:	02070000 	andeq	r0, r7, #0
    177c:	00010c07 	andeq	r0, r1, r7, lsl #24
    1780:	07040700 	streq	r0, [r4, -r0, lsl #14]
    1784:	00000158 	andeq	r0, r0, r8, asr r1
    1788:	53070807 	movwpl	r0, #30727	; 0x7807
    178c:	07000001 	streq	r0, [r0, -r1]
    1790:	01810704 	orreq	r0, r1, r4, lsl #14
    1794:	04080000 	streq	r0, [r8], #-0
    1798:	000000a7 	andeq	r0, r0, r7, lsr #1
    179c:	96080107 	strls	r0, [r8], -r7, lsl #2
    17a0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    17a4:	0000b404 	andeq	fp, r0, r4, lsl #8
    17a8:	00a70900 	adceq	r0, r7, r0, lsl #18
    17ac:	3a0a0000 	bcc	2817b4 <__bss_end__+0x277654>
    17b0:	01000004 	tsteq	r0, r4
    17b4:	00005406 	andeq	r5, r0, r6, lsl #8
    17b8:	008b8400 	addeq	r8, fp, r0, lsl #8
    17bc:	00005800 	andeq	r5, r0, r0, lsl #16
    17c0:	439c0100 	orrsmi	r0, ip, #0, 2
    17c4:	0b000001 	bleq	17d0 <_start-0x6830>
    17c8:	00746d66 	rsbseq	r6, r4, r6, ror #26
    17cc:	00ae0601 	adceq	r0, lr, r1, lsl #12
    17d0:	91020000 	mrsls	r0, (UNDEF: 2)
    17d4:	620d0c70 	andvs	r0, sp, #112, 24	; 0x7000
    17d8:	01006675 	tsteq	r0, r5, ror r6
    17dc:	00014308 	andeq	r4, r1, r8, lsl #6
    17e0:	58030500 	stmdapl	r3, {r8, sl}
    17e4:	0e00009d 	mcreq	0, 0, r0, cr0, cr13, {4}
    17e8:	0000044b 	andeq	r0, r0, fp, asr #8
    17ec:	00490901 	subeq	r0, r9, r1, lsl #18
    17f0:	91020000 	mrsls	r0, (UNDEF: 2)
    17f4:	7a730f5c 	bvc	1cc556c <__bss_end__+0x1cbb40c>
    17f8:	540c0100 	strpl	r0, [ip], #-256	; 0x100
    17fc:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    1800:	10000009 	andne	r0, r0, r9
    1804:	00008bac 	andeq	r8, r0, ip, lsr #23
    1808:	00000174 	andeq	r0, r0, r4, ror r1
    180c:	00000136 	andeq	r0, r0, r6, lsr r1
    1810:	02530111 	subseq	r0, r3, #1073741828	; 0x40000004
    1814:	01114c91 			; <UNDEFINED> instruction: 0x01114c91
    1818:	48910352 	ldmmi	r1, {r1, r4, r6, r8, r9}
    181c:	51011106 	tstpl	r1, r6, lsl #2
    1820:	04000a03 	streq	r0, [r0], #-2563	; 0xa03
    1824:	02500111 	subseq	r0, r0, #1073741828	; 0x40000004
    1828:	12000074 	andne	r0, r0, #116	; 0x74
    182c:	00008bc0 	andeq	r8, r0, r0, asr #23
    1830:	02500111 	subseq	r0, r0, #1073741828	; 0x40000004
    1834:	00000074 	andeq	r0, r0, r4, ror r0
    1838:	0000a713 	andeq	sl, r0, r3, lsl r7
    183c:	00015400 	andeq	r5, r1, r0, lsl #8
    1840:	009a1400 	addseq	r1, sl, r0, lsl #8
    1844:	03ff0000 	mvnseq	r0, #0
    1848:	00541500 	subseq	r1, r4, r0, lsl #10
    184c:	01630000 	cmneq	r3, r0
    1850:	ae160000 	cdpge	0, 1, cr0, cr6, cr0, {0}
    1854:	00000000 	andeq	r0, r0, r0
    1858:	00046a17 	andeq	r6, r4, r7, lsl sl
    185c:	6e200400 	cdpvs	4, 2, cr0, cr0, cr0, {0}
    1860:	08000001 	stmdaeq	r0, {r0}
    1864:	00015404 	andeq	r5, r1, r4, lsl #8
    1868:	04371800 	ldrteq	r1, [r7], #-2048	; 0x800
    186c:	02050000 	andeq	r0, r5, #0
    1870:	00000054 	andeq	r0, r0, r4, asr r0
    1874:	0000a116 	andeq	sl, r0, r6, lsl r1
    1878:	00541600 	subseq	r1, r4, r0, lsl #12
    187c:	ae160000 	cdpge	0, 1, cr0, cr6, cr0, {0}
    1880:	16000000 	strne	r0, [r0], -r0
    1884:	00000049 	andeq	r0, r0, r9, asr #32
    1888:	00ee0000 	rsceq	r0, lr, r0
    188c:	00040000 	andeq	r0, r4, r0
    1890:	000007ca 	andeq	r0, r0, sl, asr #15
    1894:	00100104 	andseq	r0, r0, r4, lsl #2
    1898:	55010000 	strpl	r0, [r1, #-0]
    189c:	d6000004 	strle	r0, [r0], -r4
    18a0:	dc000003 	stcle	0, cr0, [r0], {3}
    18a4:	3400008b 	strcc	r0, [r0], #-139	; 0x8b
    18a8:	22000000 	andcs	r0, r0, #0
    18ac:	02000007 	andeq	r0, r0, #7
    18b0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    18b4:	04030074 	streq	r0, [r3], #-116	; 0x74
    18b8:	00015d07 	andeq	r5, r1, r7, lsl #26
    18bc:	06010300 	streq	r0, [r1], -r0, lsl #6
    18c0:	0000008f 	andeq	r0, r0, pc, lsl #1
    18c4:	a3050203 	movwge	r0, #20995	; 0x5203
    18c8:	03000001 	movweq	r0, #1
    18cc:	018f0504 	orreq	r0, pc, r4, lsl #10
    18d0:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    18d4:	00018a05 	andeq	r8, r1, r5, lsl #20
    18d8:	08010300 	stmdaeq	r1, {r8, r9}
    18dc:	0000008d 	andeq	r0, r0, sp, lsl #1
    18e0:	0c070203 	sfmeq	f0, 4, [r7], {3}
    18e4:	03000001 	movweq	r0, #1
    18e8:	01580704 	cmpeq	r8, r4, lsl #14
    18ec:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    18f0:	00015307 	andeq	r5, r1, r7, lsl #6
    18f4:	07040300 	streq	r0, [r4, -r0, lsl #6]
    18f8:	00000181 	andeq	r0, r0, r1, lsl #3
    18fc:	96080103 	strls	r0, [r8], -r3, lsl #2
    1900:	04000000 	streq	r0, [r0], #-0
    1904:	00007f04 	andeq	r7, r0, r4, lsl #30
    1908:	00720500 	rsbseq	r0, r2, r0, lsl #10
    190c:	61060000 	mrsvs	r0, (UNDEF: 6)
    1910:	01000004 	tsteq	r0, r4
    1914:	00002504 	andeq	r2, r0, r4, lsl #10
    1918:	008bdc00 	addeq	sp, fp, r0, lsl #24
    191c:	00003400 	andeq	r3, r0, r0, lsl #8
    1920:	ab9c0100 	blge	fe701d28 <__bss_end__+0xfe6f7bc8>
    1924:	07000000 	streq	r0, [r0, -r0]
    1928:	04010070 	streq	r0, [r1], #-112	; 0x70
    192c:	00000079 	andeq	r0, r0, r9, ror r0
    1930:	00000991 	muleq	r0, r1, r9
    1934:	00250800 	eoreq	r0, r5, r0, lsl #16
    1938:	00ba0000 	adcseq	r0, sl, r0
    193c:	25090000 	strcs	r0, [r9, #-0]
    1940:	00000000 	andeq	r0, r0, r0
    1944:	00046f0a 	andeq	r6, r4, sl, lsl #30
    1948:	c51d0200 	ldrgt	r0, [sp, #-512]	; 0x200
    194c:	04000000 	streq	r0, [r0], #-0
    1950:	0000ab04 	andeq	sl, r0, r4, lsl #22
    1954:	00250800 	eoreq	r0, r5, r0, lsl #16
    1958:	00da0000 	sbcseq	r0, sl, r0
    195c:	79090000 	stmdbvc	r9, {}	; <UNPREDICTABLE>
    1960:	00000000 	andeq	r0, r0, r0
    1964:	00046a0b 	andeq	r6, r4, fp, lsl #20
    1968:	eb0c0100 	bl	301d70 <__bss_end__+0x2f7c10>
    196c:	05000000 	streq	r0, [r0, #-0]
    1970:	0096cc03 	addseq	ip, r6, r3, lsl #24
    1974:	cb040400 	blgt	10297c <__bss_end__+0xf881c>
    1978:	00000000 	andeq	r0, r0, r0
    197c:	00000654 	andeq	r0, r0, r4, asr r6
    1980:	08630004 	stmdaeq	r3!, {r2}^
    1984:	01040000 	mrseq	r0, (UNDEF: 4)
    1988:	00000010 	andeq	r0, r0, r0, lsl r0
    198c:	0004a701 	andeq	sl, r4, r1, lsl #14
    1990:	0003d600 	andeq	sp, r3, r0, lsl #12
    1994:	008c1000 	addeq	r1, ip, r0
    1998:	0004f000 	andeq	pc, r4, r0
    199c:	0007bc00 	andeq	fp, r7, r0, lsl #24
    19a0:	05040200 	streq	r0, [r4, #-512]	; 0x200
    19a4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    19a8:	5d070403 	cfstrspl	mvf0, [r7, #-12]
    19ac:	03000001 	movweq	r0, #1
    19b0:	008f0601 	addeq	r0, pc, r1, lsl #12
    19b4:	02030000 	andeq	r0, r3, #0
    19b8:	0001a305 	andeq	sl, r1, r5, lsl #6
    19bc:	05040300 	streq	r0, [r4, #-768]	; 0x300
    19c0:	0000018f 	andeq	r0, r0, pc, lsl #3
    19c4:	8a050803 	bhi	1439d8 <__bss_end__+0x139878>
    19c8:	03000001 	movweq	r0, #1
    19cc:	008d0801 	addeq	r0, sp, r1, lsl #16
    19d0:	02030000 	andeq	r0, r3, #0
    19d4:	00010c07 	andeq	r0, r1, r7, lsl #24
    19d8:	07040300 	streq	r0, [r4, -r0, lsl #6]
    19dc:	00000158 	andeq	r0, r0, r8, asr r1
    19e0:	53070803 	movwpl	r0, #30723	; 0x7803
    19e4:	03000001 	movweq	r0, #1
    19e8:	01810704 	orreq	r0, r1, r4, lsl #14
    19ec:	04040000 	streq	r0, [r4], #-0
    19f0:	007a0405 	rsbseq	r0, sl, r5, lsl #8
    19f4:	01030000 	mrseq	r0, (UNDEF: 3)
    19f8:	00009608 	andeq	r9, r0, r8, lsl #12
    19fc:	87040500 	strhi	r0, [r4, -r0, lsl #10]
    1a00:	06000000 	streq	r0, [r0], -r0
    1a04:	0000007a 	andeq	r0, r0, sl, ror r0
    1a08:	00041a07 	andeq	r1, r4, r7, lsl #20
    1a0c:	97280200 	strls	r0, [r8, -r0, lsl #4]!
    1a10:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1a14:	00000441 	andeq	r0, r0, r1, asr #8
    1a18:	ae000404 	cdpge	4, 0, cr0, cr0, cr4, {0}
    1a1c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1a20:	00000450 	andeq	r0, r0, r0, asr r4
    1a24:	00000072 	andeq	r0, r0, r2, ror r0
    1a28:	43070000 	movwmi	r0, #28672	; 0x7000
    1a2c:	02000004 	andeq	r0, r0, #4
    1a30:	00008c62 	andeq	r8, r0, r2, ror #24
    1a34:	04890a00 	streq	r0, [r9], #2560	; 0xa00
    1a38:	27010000 	strcs	r0, [r1, -r0]
    1a3c:	00000025 	andeq	r0, r0, r5, lsr #32
    1a40:	00008c10 	andeq	r8, r0, r0, lsl ip
    1a44:	00000014 	andeq	r0, r0, r4, lsl r0
    1a48:	00e09c01 	rsceq	r9, r0, r1, lsl #24
    1a4c:	630b0000 	movwvs	r0, #45056	; 0xb000
    1a50:	25270100 	strcs	r0, [r7, #-256]!	; 0x100
    1a54:	af000000 	svcge	0x00000000
    1a58:	00000009 	andeq	r0, r0, r9
    1a5c:	6461700c 	strbtvs	r7, [r1], #-12
    1a60:	742e0100 	strtvc	r0, [lr], #-256	; 0x100
    1a64:	24000000 	strcs	r0, [r0], #-0
    1a68:	2c00008c 	stccs	0, cr0, [r0], {140}	; 0x8c
    1a6c:	01000000 	mrseq	r0, (UNDEF: 0)
    1a70:	0001309c 	muleq	r1, ip, r0
    1a74:	00700b00 	rsbseq	r0, r0, r0, lsl #22
    1a78:	00742e01 	rsbseq	r2, r4, r1, lsl #28
    1a7c:	09dd0000 	ldmibeq	sp, {}^	; <UNPREDICTABLE>
    1a80:	990d0000 	stmdbls	sp, {}	; <UNPREDICTABLE>
    1a84:	01000004 	tsteq	r0, r4
    1a88:	0000742e 	andeq	r7, r0, lr, lsr #8
    1a8c:	000a0800 	andeq	r0, sl, r0, lsl #16
    1a90:	04c70e00 	strbeq	r0, [r7], #3584	; 0xe00
    1a94:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    1a98:	00000025 	andeq	r0, r0, r5, lsr #32
    1a9c:	6c0f5201 	sfmvs	f5, 4, [pc], {1}
    1aa0:	01006e65 	tsteq	r0, r5, ror #28
    1aa4:	0000252f 	andeq	r2, r0, pc, lsr #10
    1aa8:	00510100 	subseq	r0, r1, r0, lsl #2
    1aac:	0004810a 	andeq	r8, r4, sl, lsl #2
    1ab0:	74370100 	ldrtvc	r0, [r7], #-256	; 0x100
    1ab4:	50000000 	andpl	r0, r0, r0
    1ab8:	4000008c 	andmi	r0, r0, ip, lsl #1
    1abc:	01000000 	mrseq	r0, (UNDEF: 0)
    1ac0:	00019c9c 	muleq	r1, ip, ip
    1ac4:	73640b00 	cmnvc	r4, #0, 22
    1ac8:	37010074 	smlsdxcc	r1, r4, r0, r0
    1acc:	00000074 	andeq	r0, r0, r4, ror r0
    1ad0:	00000a29 	andeq	r0, r0, r9, lsr #20
    1ad4:	01006e0b 	tsteq	r0, fp, lsl #28
    1ad8:	00002537 	andeq	r2, r0, r7, lsr r5
    1adc:	000a6100 	andeq	r6, sl, r0, lsl #2
    1ae0:	00700b00 	rsbseq	r0, r0, r0, lsl #22
    1ae4:	00743701 	rsbseq	r3, r4, r1, lsl #14
    1ae8:	0a820000 	beq	fe081af0 <__bss_end__+0xfe077990>
    1aec:	2a0d0000 	bcs	341af4 <__bss_end__+0x337994>
    1af0:	01000001 	tsteq	r0, r1
    1af4:	00007437 	andeq	r7, r0, r7, lsr r4
    1af8:	000ab800 	andeq	fp, sl, r0, lsl #16
    1afc:	656c1000 	strbvs	r1, [ip, #-0]!
    1b00:	3901006e 	stmdbcc	r1, {r1, r2, r3, r5, r6}
    1b04:	00000025 	andeq	r0, r0, r5, lsr #32
    1b08:	00000ad6 	ldrdeq	r0, [r0], -r6
    1b0c:	0100730f 	tsteq	r0, pc, lsl #6
    1b10:	0000743d 	andeq	r7, r0, sp, lsr r4
    1b14:	00500100 	subseq	r0, r0, r0, lsl #2
    1b18:	0004d50a 	andeq	sp, r4, sl, lsl #10
    1b1c:	74470100 	strbvc	r0, [r7], #-256	; 0x100
    1b20:	90000000 	andls	r0, r0, r0
    1b24:	9800008c 	stmdals	r0, {r2, r3, r7}
    1b28:	01000001 	tsteq	r0, r1
    1b2c:	0002ca9c 	muleq	r2, ip, sl
    1b30:	04990d00 	ldreq	r0, [r9], #3328	; 0xd00
    1b34:	47010000 	strmi	r0, [r1, -r0]
    1b38:	0000002c 	andeq	r0, r0, ip, lsr #32
    1b3c:	00000afd 	strdeq	r0, [r0], -sp
    1b40:	7473640b 	ldrbtvc	r6, [r3], #-1035	; 0x40b
    1b44:	74470100 	strbvc	r0, [r7], #-256	; 0x100
    1b48:	2b000000 	blcs	1b50 <_start-0x64b0>
    1b4c:	0b00000b 	bleq	1b80 <_start-0x6480>
    1b50:	4701006e 	strmi	r0, [r1, -lr, rrx]
    1b54:	00000025 	andeq	r0, r0, r5, lsr #32
    1b58:	00000b99 	muleq	r0, r9, fp
    1b5c:	6c61760b 	stclvs	6, cr7, [r1], #-44	; 0xffffffd4
    1b60:	25470100 	strbcs	r0, [r7, #-256]	; 0x100
    1b64:	c5000000 	strgt	r0, [r0, #-0]
    1b68:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    1b6c:	000004c7 	andeq	r0, r0, r7, asr #9
    1b70:	00254701 	eoreq	r4, r5, r1, lsl #14
    1b74:	0c4f0000 	mareq	acc0, r0, pc
    1b78:	9e0e0000 	cdpls	0, 0, cr0, cr14, cr0, {0}
    1b7c:	01000004 	tsteq	r0, r4
    1b80:	00002547 	andeq	r2, r0, r7, asr #10
    1b84:	04910200 	ldreq	r0, [r1], #512	; 0x200
    1b88:	6675620f 	ldrbtvs	r6, [r5], -pc, lsl #4
    1b8c:	ca4c0100 	bgt	1301f94 <__bss_end__+0x12f7e34>
    1b90:	03000002 	movweq	r0, #2
    1b94:	107fa891 			; <UNDEFINED> instruction: 0x107fa891
    1b98:	4c010070 	stcmi	0, cr0, [r1], {112}	; 0x70
    1b9c:	00000074 	andeq	r0, r0, r4, ror r0
    1ba0:	00000c79 	andeq	r0, r0, r9, ror ip
    1ba4:	01007510 	tsteq	r0, r0, lsl r5
    1ba8:	00002c4d 	andeq	r2, r0, sp, asr #24
    1bac:	000d1e00 	andeq	r1, sp, r0, lsl #28
    1bb0:	01381100 	teqeq	r8, r0, lsl #2
    1bb4:	02ea0000 	rsceq	r0, sl, #0
    1bb8:	03050000 	movweq	r0, #20480	; 0x5000
    1bbc:	00009b10 	andeq	r9, r0, r0, lsl fp
    1bc0:	008cfc12 	addeq	pc, ip, r2, lsl ip	; <UNPREDICTABLE>
    1bc4:	00007400 	andeq	r7, r0, r0, lsl #8
    1bc8:	00026100 	andeq	r6, r2, r0, lsl #2
    1bcc:	047b1300 	ldrbteq	r1, [fp], #-768	; 0x300
    1bd0:	52010000 	andpl	r0, r1, #0
    1bd4:	0000002c 	andeq	r0, r0, ip, lsr #32
    1bd8:	00000e2e 	andeq	r0, r0, lr, lsr #28
    1bdc:	8de01400 	cfstrdhi	mvd1, [r0]
    1be0:	063a0000 	ldrteq	r0, [sl], -r0
    1be4:	02900000 	addseq	r0, r0, #0
    1be8:	01150000 	tsteq	r5, r0
    1bec:	75080253 	strvc	r0, [r8, #-595]	; 0x253
    1bf0:	05520115 	ldrbeq	r0, [r2, #-277]	; 0x115
    1bf4:	009b1003 	addseq	r1, fp, r3
    1bf8:	51011500 	tstpl	r1, r0, lsl #10
    1bfc:	9b480305 	blls	1202818 <__bss_end__+0x11f86b8>
    1c00:	01150000 	tsteq	r5, r0
    1c04:	34030550 	strcc	r0, [r3], #-1360	; 0x550
    1c08:	0000009b 	muleq	r0, fp, r0
    1c0c:	008de416 	addeq	lr, sp, r6, lsl r4
    1c10:	00065000 	andeq	r5, r6, r0
    1c14:	8df01400 	cfldrdhi	mvd1, [r0]
    1c18:	00e00000 	rsceq	r0, r0, r0
    1c1c:	02ad0000 	adceq	r0, sp, #0
    1c20:	01150000 	tsteq	r5, r0
    1c24:	007d0251 	rsbseq	r0, sp, r1, asr r2
    1c28:	8e041700 	cdphi	7, 0, cr1, cr4, cr0, {0}
    1c2c:	01300000 	teqeq	r0, r0
    1c30:	01150000 	tsteq	r5, r0
    1c34:	007d0253 	rsbseq	r0, sp, r3, asr r2
    1c38:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    1c3c:	01150074 	tsteq	r5, r4, ror r0
    1c40:	00750250 	rsbseq	r0, r5, r0, asr r2
    1c44:	7a180000 	bvc	601c4c <__bss_end__+0x5f7aec>
    1c48:	da000000 	ble	1c50 <_start-0x63b0>
    1c4c:	19000002 	stmdbne	r0, {r1}
    1c50:	0000006b 	andeq	r0, r0, fp, rrx
    1c54:	7a18003f 	bvc	601d58 <__bss_end__+0x5f7bf8>
    1c58:	ea000000 	b	1c60 <_start-0x63a0>
    1c5c:	19000002 	stmdbne	r0, {r1}
    1c60:	0000006b 	andeq	r0, r0, fp, rrx
    1c64:	da060004 	ble	181c7c <__bss_end__+0x177b1c>
    1c68:	1a000002 	bne	1c78 <_start-0x6388>
    1c6c:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
    1c70:	8e281f01 	cdphi	15, 2, cr1, cr8, cr1, {0}
    1c74:	00500000 	subseq	r0, r0, r0
    1c78:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c7c:	0000036a 	andeq	r0, r0, sl, ror #6
    1c80:	0004cd0d 	andeq	ip, r4, sp, lsl #26
    1c84:	791f0100 	ldmdbvc	pc, {r8}	; <UNPREDICTABLE>
    1c88:	5a000003 	bpl	1c9c <_start-0x6364>
    1c8c:	0d00000e 	stceq	0, cr0, [r0, #-56]	; 0xffffffc8
    1c90:	00000491 	muleq	r0, r1, r4
    1c94:	038e1f01 	orreq	r1, lr, #1, 30
    1c98:	0e860000 	cdpeq	0, 8, cr0, cr6, cr0, {0}
    1c9c:	38110000 	ldmdacc	r1, {}	; <UNPREDICTABLE>
    1ca0:	a4000001 	strge	r0, [r0], #-1
    1ca4:	05000003 	streq	r0, [r0, #-3]
    1ca8:	009b1803 	addseq	r1, fp, r3, lsl #16
    1cac:	8e481400 	cdphi	4, 4, cr1, cr8, cr0, {0}
    1cb0:	063a0000 	ldrteq	r0, [sl], -r0
    1cb4:	03600000 	cmneq	r0, #0
    1cb8:	01150000 	tsteq	r5, r0
    1cbc:	20080253 	andcs	r0, r8, r3, asr r2
    1cc0:	05520115 	ldrbeq	r0, [r2, #-277]	; 0x115
    1cc4:	009b1803 	addseq	r1, fp, r3, lsl #16
    1cc8:	51011500 	tstpl	r1, r0, lsl #10
    1ccc:	9b480305 	blls	12028e8 <__bss_end__+0x11f8788>
    1cd0:	01150000 	tsteq	r5, r0
    1cd4:	80030550 	andhi	r0, r3, r0, asr r5
    1cd8:	0000009b 	muleq	r0, fp, r0
    1cdc:	008e4c16 	addeq	r4, lr, r6, lsl ip
    1ce0:	00065000 	andeq	r5, r6, r0
    1ce4:	251b0000 	ldrcs	r0, [fp, #-0]
    1ce8:	79000000 	stmdbvc	r0, {}	; <UNPREDICTABLE>
    1cec:	1c000003 	stcne	0, cr0, [r0], {3}
    1cf0:	00000025 	andeq	r0, r0, r5, lsr #32
    1cf4:	6a040500 	bvs	1030fc <__bss_end__+0xf8f9c>
    1cf8:	1b000003 	blne	1d0c <_start-0x62f4>
    1cfc:	00000025 	andeq	r0, r0, r5, lsr #32
    1d00:	0000038e 	andeq	r0, r0, lr, lsl #7
    1d04:	0000811c 	andeq	r8, r0, ip, lsl r1
    1d08:	04050000 	streq	r0, [r5], #-0
    1d0c:	0000037f 	andeq	r0, r0, pc, ror r3
    1d10:	00007a18 	andeq	r7, r0, r8, lsl sl
    1d14:	0003a400 	andeq	sl, r3, r0, lsl #8
    1d18:	006b1900 	rsbeq	r1, fp, r0, lsl #18
    1d1c:	000e0000 	andeq	r0, lr, r0
    1d20:	00039406 	andeq	r9, r3, r6, lsl #8
    1d24:	04371d00 	ldrteq	r1, [r7], #-3328	; 0xd00
    1d28:	7d010000 	stcvc	0, cr0, [r1, #-0]
    1d2c:	00000025 	andeq	r0, r0, r5, lsr #32
    1d30:	00008e78 	andeq	r8, r0, r8, ror lr
    1d34:	00000288 	andeq	r0, r0, r8, lsl #5
    1d38:	05ff9c01 	ldrbeq	r9, [pc, #3073]!	; 2941 <_start-0x56bf>
    1d3c:	620b0000 	andvs	r0, fp, #0
    1d40:	01006675 	tsteq	r0, r5, ror r6
    1d44:	0000747d 	andeq	r7, r0, sp, ror r4
    1d48:	000eb200 	andeq	fp, lr, r0, lsl #4
    1d4c:	006e0b00 	rsbeq	r0, lr, r0, lsl #22
    1d50:	00257d01 	eoreq	r7, r5, r1, lsl #26
    1d54:	0ede0000 	cdpeq	0, 13, cr0, cr14, cr0, {0}
    1d58:	660b0000 	strvs	r0, [fp], -r0
    1d5c:	0100746d 	tsteq	r0, sp, ror #8
    1d60:	0000817d 	andeq	r8, r0, sp, ror r1
    1d64:	000f0c00 	andeq	r0, pc, r0, lsl #24
    1d68:	044b0d00 	strbeq	r0, [fp], #-3328	; 0xd00
    1d6c:	7d010000 	stcvc	0, cr0, [r1, #-0]
    1d70:	000000ae 	andeq	r0, r0, lr, lsr #1
    1d74:	00000f40 	andeq	r0, r0, r0, asr #30
    1d78:	01007010 	tsteq	r0, r0, lsl r0
    1d7c:	0000747e 	andeq	r7, r0, lr, ror r4
    1d80:	000f5300 	andeq	r5, pc, r0, lsl #6
    1d84:	00651000 	rsbeq	r1, r5, r0
    1d88:	00747e01 	rsbseq	r7, r4, r1, lsl #28
    1d8c:	0fd10000 	svceq	0x00d10000
    1d90:	38110000 	ldmdacc	r1, {}	; <UNPREDICTABLE>
    1d94:	0f000001 	svceq	0x00000001
    1d98:	05000006 	streq	r0, [r0, #-6]
    1d9c:	009b2803 	addseq	r2, fp, r3, lsl #16
    1da0:	8ecc1e00 	cdphi	14, 12, cr1, cr12, cr0, {0}
    1da4:	01f40000 	mvnseq	r0, r0
    1da8:	73100000 	tstvc	r0, #0
    1dac:	748b0100 	strvc	r0, [fp], #256	; 0x100
    1db0:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    1db4:	0f00000f 	svceq	0x0000000f
    1db8:	006d756e 	rsbeq	r7, sp, lr, ror #10
    1dbc:	06148b01 	ldreq	r8, [r4], -r1, lsl #22
    1dc0:	91030000 	mrsls	r0, (UNDEF: 3)
    1dc4:	c7137ed8 			; <UNDEFINED> instruction: 0xc7137ed8
    1dc8:	01000004 	tsteq	r0, r4
    1dcc:	00002c8c 	andeq	r2, r0, ip, lsl #25
    1dd0:	00104d00 	andseq	r4, r0, r0, lsl #26
    1dd4:	8efc1400 	cdphi	4, 15, cr1, cr12, cr0, {0}
    1dd8:	00b90000 	adcseq	r0, r9, r0
    1ddc:	046d0000 	strbteq	r0, [sp], #-0
    1de0:	01150000 	tsteq	r5, r0
    1de4:	00750250 	rsbseq	r0, r5, r0, asr r2
    1de8:	8f201400 	svchi	0x00201400
    1dec:	063a0000 	ldrteq	r0, [sl], -r0
    1df0:	049c0000 	ldreq	r0, [ip], #0
    1df4:	01150000 	tsteq	r5, r0
    1df8:	92080253 	andls	r0, r8, #805306373	; 0x30000005
    1dfc:	05520115 	ldrbeq	r0, [r2, #-277]	; 0x115
    1e00:	009b2803 	addseq	r2, fp, r3, lsl #16
    1e04:	51011500 	tstpl	r1, r0, lsl #10
    1e08:	9b480305 	blls	1202a24 <__bss_end__+0x11f88c4>
    1e0c:	01150000 	tsteq	r5, r0
    1e10:	98030550 	stmdals	r3, {r4, r6, r8, sl}
    1e14:	0000009b 	muleq	r0, fp, r0
    1e18:	008f2416 	addeq	r2, pc, r6, lsl r4	; <UNPREDICTABLE>
    1e1c:	00065000 	andeq	r5, r6, r0
    1e20:	8fa41400 	svchi	0x00a41400
    1e24:	063a0000 	ldrteq	r0, [sl], -r0
    1e28:	04d40000 	ldrbeq	r0, [r4], #0
    1e2c:	01150000 	tsteq	r5, r0
    1e30:	98080253 	stmdals	r8, {r0, r1, r4, r6, r9}
    1e34:	05520115 	ldrbeq	r0, [r2, #-277]	; 0x115
    1e38:	009b2803 	addseq	r2, fp, r3, lsl #16
    1e3c:	51011500 	tstpl	r1, r0, lsl #10
    1e40:	9b480305 	blls	1202a5c <__bss_end__+0x11f88fc>
    1e44:	01150000 	tsteq	r5, r0
    1e48:	b4030550 	strlt	r0, [r3], #-1360	; 0x550
    1e4c:	0000009b 	muleq	r0, fp, r0
    1e50:	008fa816 	addeq	sl, pc, r6, lsl r8	; <UNPREDICTABLE>
    1e54:	00065000 	andeq	r5, r6, r0
    1e58:	8fcc1400 	svchi	0x00cc1400
    1e5c:	019c0000 	orrseq	r0, ip, r0
    1e60:	050a0000 	streq	r0, [sl, #-0]
    1e64:	01150000 	tsteq	r5, r0
    1e68:	80080252 	andhi	r0, r8, r2, asr r2
    1e6c:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    1e70:	157ed091 	ldrbne	sp, [lr, #-145]!	; 0x91
    1e74:	3a015001 	bcc	55e80 <__bss_end__+0x4bd20>
    1e78:	047d0215 	ldrbteq	r0, [sp], #-533	; 0x215
    1e7c:	02153101 	andseq	r3, r5, #1073741824	; 0x40000000
    1e80:	7702007d 	smlsdxvc	r2, sp, r0, r0
    1e84:	f4140000 			; <UNDEFINED> instruction: 0xf4140000
    1e88:	9c00008f 	stcls	0, cr0, [r0], {143}	; 0x8f
    1e8c:	37000001 	strcc	r0, [r0, -r1]
    1e90:	15000005 	strne	r0, [r0, #-5]
    1e94:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    1e98:	51011580 	smlabbpl	r1, r0, r5, r1
    1e9c:	7ed09103 	atnvcs	f1, f3
    1ea0:	01500115 	cmpeq	r0, r5, lsl r1
    1ea4:	7d02153a 	cfstr32vc	mvfx1, [r2, #-232]	; 0xffffff18
    1ea8:	15300104 	ldrne	r0, [r0, #-260]!	; 0x104
    1eac:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    1eb0:	14000077 	strne	r0, [r0], #-119	; 0x77
    1eb4:	0000901c 	andeq	r9, r0, ip, lsl r0
    1eb8:	0000019c 	muleq	r0, ip, r1
    1ebc:	00000564 	andeq	r0, r0, r4, ror #10
    1ec0:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    1ec4:	01158008 	tsteq	r5, r8
    1ec8:	d0910351 	addsle	r0, r1, r1, asr r3
    1ecc:	5001157e 	andpl	r1, r1, lr, ror r5
    1ed0:	02154001 	andseq	r4, r5, #1
    1ed4:	3001047d 	andcc	r0, r1, sp, ror r4
    1ed8:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    1edc:	00007702 	andeq	r7, r0, r2, lsl #14
    1ee0:	00904414 	addseq	r4, r0, r4, lsl r4
    1ee4:	00019c00 	andeq	r9, r1, r0, lsl #24
    1ee8:	00059100 	andeq	r9, r5, r0, lsl #2
    1eec:	52011500 	andpl	r1, r1, #0, 10
    1ef0:	15800802 	strne	r0, [r0, #2050]	; 0x802
    1ef4:	91035101 	tstls	r3, r1, lsl #2
    1ef8:	01157ed0 			; <UNDEFINED> instruction: 0x01157ed0
    1efc:	15320150 	ldrne	r0, [r2, #-336]!	; 0x150
    1f00:	01047d02 	tsteq	r4, r2, lsl #26
    1f04:	7d021530 	cfstr32vc	mvfx1, [r2, #-192]	; 0xffffff40
    1f08:	00770200 	rsbseq	r0, r7, r0, lsl #4
    1f0c:	90781400 	rsbsls	r1, r8, r0, lsl #8
    1f10:	019c0000 	orrseq	r0, ip, r0
    1f14:	05be0000 	ldreq	r0, [lr, #0]!
    1f18:	01150000 	tsteq	r5, r0
    1f1c:	80080252 	andhi	r0, r8, r2, asr r2
    1f20:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    1f24:	157ed091 	ldrbne	sp, [lr, #-145]!	; 0x91
    1f28:	38015001 	stmdacc	r1, {r0, ip, lr}
    1f2c:	047d0215 	ldrbteq	r0, [sp], #-533	; 0x215
    1f30:	02153001 	andseq	r3, r5, #1
    1f34:	7702007d 	smlsdxvc	r2, sp, r0, r0
    1f38:	94140000 	ldrls	r0, [r4], #-0
    1f3c:	3a000090 	bcc	2184 <_start-0x5e7c>
    1f40:	f4000006 	vst4.8	{d0-d3}, [r0], r6
    1f44:	15000005 	strne	r0, [r0, #-5]
    1f48:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    1f4c:	520115b9 	andpl	r1, r1, #775946240	; 0x2e400000
    1f50:	9b280305 	blls	a02b6c <__bss_end__+0x9f8a0c>
    1f54:	01150000 	tsteq	r5, r0
    1f58:	48030551 	stmdami	r3, {r0, r4, r6, r8, sl}
    1f5c:	1500009b 	strne	r0, [r0, #-155]	; 0x9b
    1f60:	03055001 	movweq	r5, #20481	; 0x5001
    1f64:	00009bdc 	ldrdeq	r9, [r0], -ip
    1f68:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    1f6c:	00007902 	andeq	r7, r0, r2, lsl #18
    1f70:	00909816 	addseq	r9, r0, r6, lsl r8
    1f74:	00065000 	andeq	r5, r6, r0
    1f78:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1f7c:	0000007a 	andeq	r0, r0, sl, ror r0
    1f80:	0000060f 	andeq	r0, r0, pc, lsl #12
    1f84:	00006b19 	andeq	r6, r0, r9, lsl fp
    1f88:	06000900 	streq	r0, [r0], -r0, lsl #18
    1f8c:	000005ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1f90:	00007a18 	andeq	r7, r0, r8, lsl sl
    1f94:	00062400 	andeq	r2, r6, r0, lsl #8
    1f98:	006b1900 	rsbeq	r1, fp, r0, lsl #18
    1f9c:	007f0000 	rsbseq	r0, pc, r0
    1fa0:	00046f1f 	andeq	r6, r4, pc, lsl pc
    1fa4:	791d0300 	ldmdbvc	sp, {r8, r9}
    1fa8:	1f000003 	svcne	0x00000003
    1fac:	0000046a 	andeq	r0, r0, sl, ror #8
    1fb0:	038e2003 	orreq	r2, lr, #3
    1fb4:	3a200000 	bcc	801fbc <__bss_end__+0x7f7e5c>
    1fb8:	03000004 	movweq	r0, #4
    1fbc:	00002527 	andeq	r2, r0, r7, lsr #10
    1fc0:	00065000 	andeq	r5, r6, r0
    1fc4:	00811c00 	addeq	r1, r1, r0, lsl #24
    1fc8:	00210000 	eoreq	r0, r1, r0
    1fcc:	00000522 	andeq	r0, r0, r2, lsr #10
    1fd0:	005c0300 	subseq	r0, ip, r0, lsl #6
    1fd4:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1fd8:	0a410004 	beq	1041ff0 <__bss_end__+0x1037e90>
    1fdc:	01040000 	mrseq	r0, (UNDEF: 4)
    1fe0:	00000010 	andeq	r0, r0, r0, lsl r0
    1fe4:	0004da01 	andeq	sp, r4, r1, lsl #20
    1fe8:	0003d600 	andeq	sp, r3, r0, lsl #12
    1fec:	00910000 	addseq	r0, r1, r0
    1ff0:	00002800 	andeq	r2, r0, r0, lsl #16
    1ff4:	00099c00 	andeq	r9, r9, r0, lsl #24
    1ff8:	05040200 	streq	r0, [r4, #-512]	; 0x200
    1ffc:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2000:	5d070403 	cfstrspl	mvf0, [r7, #-12]
    2004:	03000001 	movweq	r0, #1
    2008:	008f0601 	addeq	r0, pc, r1, lsl #12
    200c:	02030000 	andeq	r0, r3, #0
    2010:	0001a305 	andeq	sl, r1, r5, lsl #6
    2014:	05040300 	streq	r0, [r4, #-768]	; 0x300
    2018:	0000018f 	andeq	r0, r0, pc, lsl #3
    201c:	8a050803 	bhi	144030 <__bss_end__+0x139ed0>
    2020:	03000001 	movweq	r0, #1
    2024:	008d0801 	addeq	r0, sp, r1, lsl #16
    2028:	02030000 	andeq	r0, r3, #0
    202c:	00010c07 	andeq	r0, r1, r7, lsl #24
    2030:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2034:	00000158 	andeq	r0, r0, r8, asr r1
    2038:	53070803 	movwpl	r0, #30723	; 0x7803
    203c:	03000001 	movweq	r0, #1
    2040:	01810704 	orreq	r0, r1, r4, lsl #14
    2044:	01030000 	mrseq	r0, (UNDEF: 3)
    2048:	00009608 	andeq	r9, r0, r8, lsl #12
    204c:	7f040400 	svcvc	0x00040400
    2050:	05000000 	streq	r0, [r0, #-0]
    2054:	00000072 	andeq	r0, r0, r2, ror r0
    2058:	00009b06 	andeq	r9, r0, r6, lsl #22
    205c:	00040100 	andeq	r0, r4, r0, lsl #2
    2060:	28000091 	stmdacs	r0, {r0, r4, r7}
    2064:	01000000 	mrseq	r0, (UNDEF: 0)
    2068:	0000ca9c 	muleq	r0, ip, sl
    206c:	91140700 	tstls	r4, r0, lsl #14
    2070:	00ac0000 	adceq	r0, ip, r0
    2074:	01080000 	mrseq	r0, (UNDEF: 8)
    2078:	14030550 	strne	r0, [r3], #-1360	; 0x550
    207c:	0000009c 	muleq	r0, ip, r0
    2080:	00911c09 	addseq	r1, r1, r9, lsl #24
    2084:	0000ea00 	andeq	lr, r0, r0, lsl #20
    2088:	0000c000 	andeq	ip, r0, r0
    208c:	50010800 	andpl	r0, r1, r0, lsl #16
    2090:	00640802 	rsbeq	r0, r4, r2, lsl #16
    2094:	0091200a 	addseq	r2, r1, sl
    2098:	0000fb00 	andeq	pc, r0, r0, lsl #22
    209c:	250b0000 	strcs	r0, [fp, #-0]
    20a0:	d9000000 	stmdble	r0, {}	; <UNPREDICTABLE>
    20a4:	0c000000 	stceq	0, cr0, [r0], {-0}
    20a8:	00000079 	andeq	r0, r0, r9, ror r0
    20ac:	046a0d00 	strbteq	r0, [sl], #-3328	; 0xd00
    20b0:	20020000 	andcs	r0, r2, r0
    20b4:	000000e4 	andeq	r0, r0, r4, ror #1
    20b8:	00ca0404 	sbceq	r0, sl, r4, lsl #8
    20bc:	f40e0000 	vst4.8	{d0-d3}, [lr], r0
    20c0:	02000004 	andeq	r0, r0, #4
    20c4:	0000fb4d 	andeq	pc, r0, sp, asr #22
    20c8:	002c0c00 	eoreq	r0, ip, r0, lsl #24
    20cc:	0f000000 	svceq	0x00000000
    20d0:	00000005 	andeq	r0, r0, r5
    20d4:	0b005c02 	bleq	190e4 <__bss_end__+0xef84>
    20d8:	04000001 	streq	r0, [r0], #-1
    20dc:	000b0b00 	andeq	r0, fp, r0, lsl #22
    20e0:	10010400 	andne	r0, r1, r0, lsl #8
    20e4:	01000000 	mrseq	r0, (UNDEF: 0)
    20e8:	000004fd 	strdeq	r0, [r0], -sp
    20ec:	000003d6 	ldrdeq	r0, [r0], -r6
    20f0:	00009128 	andeq	r9, r0, r8, lsr #2
    20f4:	00000034 	andeq	r0, r0, r4, lsr r0
    20f8:	00000a33 	andeq	r0, r0, r3, lsr sl
    20fc:	69050402 	stmdbvs	r5, {r1, sl}
    2100:	0300746e 	movweq	r7, #1134	; 0x46e
    2104:	015d0704 	cmpeq	sp, r4, lsl #14
    2108:	01030000 	mrseq	r0, (UNDEF: 3)
    210c:	00008f06 	andeq	r8, r0, r6, lsl #30
    2110:	05020300 	streq	r0, [r2, #-768]	; 0x300
    2114:	000001a3 	andeq	r0, r0, r3, lsr #3
    2118:	8f050403 	svchi	0x00050403
    211c:	03000001 	movweq	r0, #1
    2120:	018a0508 	orreq	r0, sl, r8, lsl #10
    2124:	01030000 	mrseq	r0, (UNDEF: 3)
    2128:	00008d08 	andeq	r8, r0, r8, lsl #26
    212c:	07020300 	streq	r0, [r2, -r0, lsl #6]
    2130:	0000010c 	andeq	r0, r0, ip, lsl #2
    2134:	58070403 	stmdapl	r7, {r0, r1, sl}
    2138:	03000001 	movweq	r0, #1
    213c:	01530708 	cmpeq	r3, r8, lsl #14
    2140:	04030000 	streq	r0, [r3], #-0
    2144:	00018107 	andeq	r8, r1, r7, lsl #2
    2148:	08010300 	stmdaeq	r1, {r8, r9}
    214c:	00000096 	muleq	r0, r6, r0
    2150:	00053304 	andeq	r3, r5, r4, lsl #6
    2154:	28030100 	stmdacs	r3, {r8}
    2158:	34000091 	strcc	r0, [r0], #-145	; 0x91
    215c:	01000000 	mrseq	r0, (UNDEF: 0)
    2160:	0000de9c 	muleq	r0, ip, lr
    2164:	05110500 	ldreq	r0, [r1, #-1280]	; 0x500
    2168:	04010000 	streq	r0, [r1], #-0
    216c:	00000025 	andeq	r0, r0, r5, lsr #32
    2170:	00051f05 	andeq	r1, r5, r5, lsl #30
    2174:	25040100 	strcs	r0, [r4, #-256]	; 0x100
    2178:	06000000 	streq	r0, [r0], -r0
    217c:	00000075 	andeq	r0, r0, r5, ror r0
    2180:	00b10501 	adcseq	r0, r1, r1, lsl #10
    2184:	00070000 	andeq	r0, r7, r0
    2188:	73736208 	cmnvc	r3, #8, 4	; 0x80000000
    218c:	de070100 	adfles	f0, f7, f0
    2190:	77000000 	strvc	r0, [r0, -r0]
    2194:	09000010 	stmdbeq	r0, {r4}
    2198:	0000052b 	andeq	r0, r0, fp, lsr #10
    219c:	00de0801 	sbcseq	r0, lr, r1, lsl #16
    21a0:	500a0000 	andpl	r0, sl, r0
    21a4:	fa000091 	blx	23f0 <_start-0x5c10>
    21a8:	0a000000 	beq	21b0 <_start-0x5e50>
    21ac:	00009154 	andeq	r9, r0, r4, asr r1
    21b0:	00000107 	andeq	r0, r0, r7, lsl #2
    21b4:	25040b00 	strcs	r0, [r4, #-2816]	; 0xb00
    21b8:	05000000 	streq	r0, [r0, #-0]
    21bc:	00000511 	andeq	r0, r0, r1, lsl r5
    21c0:	00250401 	eoreq	r0, r5, r1, lsl #8
    21c4:	1f050000 	svcne	0x00050000
    21c8:	01000005 	tsteq	r0, r5
    21cc:	00002504 	andeq	r2, r0, r4, lsl #10
    21d0:	00750600 	rsbseq	r0, r5, r0, lsl #12
    21d4:	05010000 	streq	r0, [r1, #-0]
    21d8:	00000107 	andeq	r0, r0, r7, lsl #2
    21dc:	050c0007 	streq	r0, [ip, #-7]
    21e0:	02000000 	andeq	r0, r0, #0
    21e4:	01ad005c 			; <UNDEFINED> instruction: 0x01ad005c
    21e8:	00040000 	andeq	r0, r4, r0
    21ec:	00000bb5 			; <UNDEFINED> instruction: 0x00000bb5
    21f0:	00100104 	andseq	r0, r0, r4, lsl #2
    21f4:	55010000 	strpl	r0, [r1, #-0]
    21f8:	d6000005 	strle	r0, [r0], -r5
    21fc:	48000003 	stmdami	r0, {r0, r1}
    2200:	00000000 	andeq	r0, r0, r0
    2204:	cd000000 	stcgt	0, cr0, [r0, #-0]
    2208:	0200000a 	andeq	r0, r0, #10
    220c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2210:	04030074 	streq	r0, [r3], #-116	; 0x74
    2214:	00015d07 	andeq	r5, r1, r7, lsl #26
    2218:	06010300 	streq	r0, [r1], -r0, lsl #6
    221c:	0000008f 	andeq	r0, r0, pc, lsl #1
    2220:	a3050203 	movwge	r0, #20995	; 0x5203
    2224:	03000001 	movweq	r0, #1
    2228:	018f0504 	orreq	r0, pc, r4, lsl #10
    222c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2230:	00018a05 	andeq	r8, r1, r5, lsl #20
    2234:	08010300 	stmdaeq	r1, {r8, r9}
    2238:	0000008d 	andeq	r0, r0, sp, lsl #1
    223c:	0c070203 	sfmeq	f0, 4, [r7], {3}
    2240:	03000001 	movweq	r0, #1
    2244:	01580704 	cmpeq	r8, r4, lsl #14
    2248:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    224c:	00015307 	andeq	r5, r1, r7, lsl #6
    2250:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2254:	00000181 	andeq	r0, r0, r1, lsl #3
    2258:	96080103 	strls	r0, [r8], -r3, lsl #2
    225c:	04000000 	streq	r0, [r0], #-0
    2260:	0000053b 	andeq	r0, r0, fp, lsr r5
    2264:	00250e01 	eoreq	r0, r5, r1, lsl #28
    2268:	915c0000 	cmpls	ip, r0
    226c:	00180000 	andseq	r0, r8, r0
    2270:	9c010000 	stcls	0, cr0, [r1], {-0}
    2274:	000000a2 	andeq	r0, r0, r2, lsr #1
    2278:	0005a705 	andeq	sl, r5, r5, lsl #14
    227c:	2c0f0100 	stfcss	f0, [pc], {-0}
    2280:	97000000 	strls	r0, [r0, -r0]
    2284:	00000010 	andeq	r0, r0, r0, lsl r0
    2288:	00058a06 	andeq	r8, r5, r6, lsl #20
    228c:	74170100 	ldrvc	r0, [r7], #-256	; 0x100
    2290:	14000091 	strne	r0, [r0], #-145	; 0x91
    2294:	01000000 	mrseq	r0, (UNDEF: 0)
    2298:	0000c79c 	muleq	r0, ip, r7
    229c:	05a70500 	streq	r0, [r7, #1280]!	; 0x500
    22a0:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    22a4:	0000002c 	andeq	r0, r0, ip, lsr #32
    22a8:	000010b6 	strheq	r1, [r0], -r6
    22ac:	00050600 	andeq	r0, r5, r0, lsl #12
    22b0:	1f010000 	svcne	0x00010000
    22b4:	00009188 	andeq	r9, r0, r8, lsl #3
    22b8:	00000048 	andeq	r0, r0, r8, asr #32
    22bc:	01779c01 	cmneq	r7, r1, lsl #24
    22c0:	9f070000 	svcls	0x00070000
    22c4:	01000005 	tsteq	r0, r5
    22c8:	0001772a 	andeq	r7, r1, sl, lsr #14
    22cc:	10001c00 	andne	r1, r0, r0, lsl #24
    22d0:	05820720 	streq	r0, [r2, #1824]	; 0x720
    22d4:	2b010000 	blcs	422dc <__bss_end__+0x3817c>
    22d8:	00000177 	andeq	r0, r0, r7, ror r1
    22dc:	20100024 	andscs	r0, r0, r4, lsr #32
    22e0:	00054907 	andeq	r4, r5, r7, lsl #18
    22e4:	772c0100 	strvc	r0, [ip, -r0, lsl #2]!
    22e8:	00000001 	andeq	r0, r0, r1
    22ec:	085a0000 	ldmdaeq	sl, {}^	; <UNPREDICTABLE>
    22f0:	00000569 	andeq	r0, r0, r9, ror #10
    22f4:	01772d01 	cmneq	r7, r1, lsl #26
    22f8:	09200000 	stmdbeq	r0!, {}	; <UNPREDICTABLE>
    22fc:	00009190 	muleq	r0, r0, r1
    2300:	00000079 	andeq	r0, r0, r9, ror r0
    2304:	00919c09 	addseq	r9, r1, r9, lsl #24
    2308:	0000a200 	andeq	sl, r0, r0, lsl #4
    230c:	91a40a00 			; <UNDEFINED> instruction: 0x91a40a00
    2310:	018d0000 	orreq	r0, sp, r0
    2314:	013a0000 	teqeq	sl, r0
    2318:	010b0000 	mrseq	r0, (UNDEF: 11)
    231c:	004e0150 	subeq	r0, lr, r0, asr r1
    2320:	0091b00a 	addseq	fp, r1, sl
    2324:	00019e00 	andeq	r9, r1, r0, lsl #28
    2328:	00015a00 	andeq	r5, r1, r0, lsl #20
    232c:	51010b00 	tstpl	r1, r0, lsl #22
    2330:	00010c05 	andeq	r0, r1, r5, lsl #24
    2334:	010b5a00 	tsteq	fp, r0, lsl #20
    2338:	240c0550 	strcs	r0, [ip], #-1360	; 0x550
    233c:	00201000 	eoreq	r1, r0, r0
    2340:	0091bc0c 	addseq	fp, r1, ip, lsl #24
    2344:	00019e00 	andeq	r9, r1, r0, lsl #28
    2348:	51010b00 	tstpl	r1, r0, lsl #22
    234c:	00200c05 	eoreq	r0, r0, r5, lsl #24
    2350:	010b5a00 	tsteq	fp, r0, lsl #20
    2354:	1c0c0550 	cfstr32ne	mvfx0, [ip], {80}	; 0x50
    2358:	00201000 	eoreq	r1, r0, r0
    235c:	00250d00 	eoreq	r0, r5, r0, lsl #26
    2360:	3e080000 	cdpcc	0, 0, cr0, cr8, cr0, {0}
    2364:	01000005 	tsteq	r0, r5
    2368:	0001880d 	andeq	r8, r1, sp, lsl #16
    236c:	2c0d1000 	stccs	0, cr1, [sp], {-0}
    2370:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2374:	000004f4 	strdeq	r0, [r0], -r4
    2378:	019e4d02 	orrseq	r4, lr, r2, lsl #26
    237c:	2c0f0000 	stccs	0, cr0, [pc], {-0}
    2380:	00000000 	andeq	r0, r0, r0
    2384:	00059910 	andeq	r9, r5, r0, lsl r9
    2388:	0f900200 	svceq	0x00900200
    238c:	0000002c 	andeq	r0, r0, ip, lsr #32
    2390:	00002c0f 	andeq	r2, r0, pc, lsl #24
    2394:	aa000000 	bge	239c <_start-0x5c64>
    2398:	04000001 	streq	r0, [r0], #-1
    239c:	000ca300 	andeq	sl, ip, r0, lsl #6
    23a0:	10010400 	andne	r0, r1, r0, lsl #8
    23a4:	01000000 	mrseq	r0, (UNDEF: 0)
    23a8:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
    23ac:	000003d6 	ldrdeq	r0, [r0], -r6
    23b0:	000091d0 	ldrdeq	r9, [r0], -r0
    23b4:	0000007c 	andeq	r0, r0, ip, ror r0
    23b8:	00000b6a 	andeq	r0, r0, sl, ror #22
    23bc:	69050402 	stmdbvs	r5, {r1, sl}
    23c0:	0300746e 	movweq	r7, #1134	; 0x46e
    23c4:	015d0704 	cmpeq	sp, r4, lsl #14
    23c8:	01030000 	mrseq	r0, (UNDEF: 3)
    23cc:	00008f06 	andeq	r8, r0, r6, lsl #30
    23d0:	05020300 	streq	r0, [r2, #-768]	; 0x300
    23d4:	000001a3 	andeq	r0, r0, r3, lsr #3
    23d8:	8f050403 	svchi	0x00050403
    23dc:	03000001 	movweq	r0, #1
    23e0:	018a0508 	orreq	r0, sl, r8, lsl #10
    23e4:	01030000 	mrseq	r0, (UNDEF: 3)
    23e8:	00008d08 	andeq	r8, r0, r8, lsl #26
    23ec:	07020300 	streq	r0, [r2, -r0, lsl #6]
    23f0:	0000010c 	andeq	r0, r0, ip, lsl #2
    23f4:	58070403 	stmdapl	r7, {r0, r1, sl}
    23f8:	03000001 	movweq	r0, #1
    23fc:	01530708 	cmpeq	r3, r8, lsl #14
    2400:	04030000 	streq	r0, [r3], #-0
    2404:	00018107 	andeq	r8, r1, r7, lsl #2
    2408:	08010300 	stmdaeq	r1, {r8, r9}
    240c:	00000096 	muleq	r0, r6, r0
    2410:	0005d504 	andeq	sp, r5, r4, lsl #10
    2414:	d0050100 	andle	r0, r5, r0, lsl #2
    2418:	1c000091 	stcne	0, cr0, [r0], {145}	; 0x91
    241c:	01000000 	mrseq	r0, (UNDEF: 0)
    2420:	00009e9c 	muleq	r0, ip, lr
    2424:	05cf0500 	strbeq	r0, [pc, #1280]	; 292c <_start-0x56d4>
    2428:	05010000 	streq	r0, [r1, #-0]
    242c:	0000002c 	andeq	r0, r0, ip, lsr #32
    2430:	000010e0 	andeq	r1, r0, r0, ror #1
    2434:	05eb0600 	strbeq	r0, [fp, #1536]!	; 0x600
    2438:	0b010000 	bleq	42440 <__bss_end__+0x382e0>
    243c:	0000002c 	andeq	r0, r0, ip, lsr #32
    2440:	000091ec 	andeq	r9, r0, ip, ror #3
    2444:	00000014 	andeq	r0, r0, r4, lsl r0
    2448:	00cb9c01 	sbceq	r9, fp, r1, lsl #24
    244c:	f8070000 			; <UNDEFINED> instruction: 0xf8070000
    2450:	9c000091 	stcls	0, cr0, [r0], {145}	; 0x91
    2454:	08000001 	stmdaeq	r0, {r0}
    2458:	0c055001 	stceq	0, cr5, [r5], {1}
    245c:	20003004 	andcs	r3, r0, r4
    2460:	e2040000 	and	r0, r4, #0
    2464:	01000005 	tsteq	r0, r5
    2468:	0092000f 	addseq	r0, r2, pc
    246c:	00002400 	andeq	r2, r0, r0, lsl #8
    2470:	299c0100 	ldmibcs	ip, {r8}
    2474:	09000001 	stmdbeq	r0, {r0}
    2478:	01007375 	tsteq	r0, r5, ror r3
    247c:	00002c0f 	andeq	r2, r0, pc, lsl #24
    2480:	00111400 	andseq	r1, r1, r0, lsl #8
    2484:	62720a00 	rsbsvs	r0, r2, #0, 20
    2488:	2c100100 	ldfcss	f0, [r0], {-0}
    248c:	01000000 	mrseq	r0, (UNDEF: 0)
    2490:	92100b54 	andsls	r0, r0, #84, 22	; 0x15000
    2494:	00100000 	andseq	r0, r0, r0
    2498:	011f0000 	tsteq	pc, r0
    249c:	720c0000 	andvc	r0, ip, #0
    24a0:	12010061 	andne	r0, r1, #97	; 0x61
    24a4:	0000002c 	andeq	r0, r0, ip, lsr #32
    24a8:	00001132 	andeq	r1, r0, r2, lsr r1
    24ac:	0092140d 	addseq	r1, r2, sp, lsl #8
    24b0:	00009e00 	andeq	r9, r0, r0, lsl #28
    24b4:	0c0d0000 	stceq	0, cr0, [sp], {-0}
    24b8:	9e000092 	mcrls	0, 0, r0, cr0, cr2, {4}
    24bc:	00000000 	andeq	r0, r0, r0
    24c0:	0004f404 	andeq	pc, r4, r4, lsl #8
    24c4:	24180100 	ldrcs	r0, [r8], #-256	; 0x100
    24c8:	14000092 	strne	r0, [r0], #-146	; 0x92
    24cc:	01000000 	mrseq	r0, (UNDEF: 0)
    24d0:	0001629c 	muleq	r1, ip, r2
    24d4:	736d0900 	cmnvc	sp, #0, 18
    24d8:	2c180100 	ldfcss	f0, [r8], {-0}
    24dc:	45000000 	strmi	r0, [r0, #-0]
    24e0:	07000011 	smladeq	r0, r1, r0, r0
    24e4:	00009234 	andeq	r9, r0, r4, lsr r2
    24e8:	000000cb 	andeq	r0, r0, fp, asr #1
    24ec:	07500108 	ldrbeq	r0, [r0, -r8, lsl #2]
    24f0:	0a5001f3 	beq	1402cc4 <__bss_end__+0x13f8b64>
    24f4:	001e03e8 	andseq	r0, lr, r8, ror #7
    24f8:	05ac0400 	streq	r0, [ip, #1024]!	; 0x400
    24fc:	1b010000 	blne	42504 <__bss_end__+0x383a4>
    2500:	00009238 	andeq	r9, r0, r8, lsr r2
    2504:	00000014 	andeq	r0, r0, r4, lsl r0
    2508:	019c9c01 	orrseq	r9, ip, r1, lsl #24
    250c:	73090000 	movwvc	r0, #36864	; 0x9000
    2510:	01006365 	tsteq	r0, r5, ror #6
    2514:	00002c1b 	andeq	r2, r0, fp, lsl ip
    2518:	00116600 	andseq	r6, r1, r0, lsl #12
    251c:	92480700 	subls	r0, r8, #0, 14
    2520:	01290000 	teqeq	r9, r0
    2524:	01080000 	mrseq	r0, (UNDEF: 8)
    2528:	01f30750 	mvnseq	r0, r0, asr r7
    252c:	03e80a50 	mvneq	r0, #80, 20	; 0x50000
    2530:	0e00001e 	mcreq	0, 0, r0, cr0, cr14, {0}
    2534:	000005c9 	andeq	r0, r0, r9, asr #11
    2538:	002c9c02 	eoreq	r9, ip, r2, lsl #24
    253c:	2c0f0000 	stccs	0, cr0, [pc], {-0}
    2540:	00000000 	andeq	r0, r0, r0
    2544:	00034800 	andeq	r4, r3, r0, lsl #16
    2548:	86000400 	strhi	r0, [r0], -r0, lsl #8
    254c:	0400000d 	streq	r0, [r0], #-13
    2550:	00001001 	andeq	r1, r0, r1
    2554:	061d0100 	ldreq	r0, [sp], -r0, lsl #2
    2558:	03d60000 	bicseq	r0, r6, #0
    255c:	95240000 	strls	r0, [r4, #-0]!
    2560:	01780000 	cmneq	r8, r0
    2564:	0c0e0000 	stceq	0, cr0, [lr], {-0}
    2568:	04020000 	streq	r0, [r2], #-0
    256c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    2570:	03330300 	teqeq	r3, #0, 6
    2574:	d4020000 	strle	r0, [r2], #-0
    2578:	00000037 	andeq	r0, r0, r7, lsr r0
    257c:	5d070404 	cfstrspl	mvf0, [r7, #-16]
    2580:	04000001 	streq	r0, [r0], #-1
    2584:	008f0601 	addeq	r0, pc, r1, lsl #12
    2588:	02040000 	andeq	r0, r4, #0
    258c:	0001a305 	andeq	sl, r1, r5, lsl #6
    2590:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    2594:	0000018f 	andeq	r0, r0, pc, lsl #3
    2598:	8a050804 	bhi	1445b0 <__bss_end__+0x13a450>
    259c:	04000001 	streq	r0, [r0], #-1
    25a0:	008d0801 	addeq	r0, sp, r1, lsl #16
    25a4:	02040000 	andeq	r0, r4, #0
    25a8:	00010c07 	andeq	r0, r1, r7, lsl #24
    25ac:	07040400 	streq	r0, [r4, -r0, lsl #8]
    25b0:	00000158 	andeq	r0, r0, r8, asr r1
    25b4:	53070804 	movwpl	r0, #30724	; 0x7804
    25b8:	04000001 	streq	r0, [r0], #-1
    25bc:	01810704 	orreq	r0, r1, r4, lsl #14
    25c0:	04050000 	streq	r0, [r5], #-0
    25c4:	00850406 	addeq	r0, r5, r6, lsl #8
    25c8:	01040000 	mrseq	r0, (UNDEF: 4)
    25cc:	00009608 	andeq	r9, r0, r8, lsl #12
    25d0:	92040600 	andls	r0, r4, #0, 12
    25d4:	07000000 	streq	r0, [r0, -r0]
    25d8:	00000085 	andeq	r0, r0, r5, lsl #1
    25dc:	00008508 	andeq	r8, r0, r8, lsl #10
    25e0:	0000a700 	andeq	sl, r0, r0, lsl #14
    25e4:	00760900 	rsbseq	r0, r6, r0, lsl #18
    25e8:	00070000 	andeq	r0, r7, r0
    25ec:	0006150a 	andeq	r1, r6, sl, lsl #10
    25f0:	7d190100 	ldfvcs	f0, [r9, #-0]
    25f4:	24000000 	strcs	r0, [r0], #-0
    25f8:	64000095 	strvs	r0, [r0], #-149	; 0x95
    25fc:	01000000 	mrseq	r0, (UNDEF: 0)
    2600:	00015c9c 	muleq	r1, ip, ip
    2604:	06470b00 	strbeq	r0, [r7], -r0, lsl #22
    2608:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    260c:	00000037 	andeq	r0, r0, r7, lsr r0
    2610:	00001187 	andeq	r1, r0, r7, lsl #3
    2614:	0001380c 	andeq	r3, r1, ip, lsl #16
    2618:	00015c00 	andeq	r5, r1, r0, lsl #24
    261c:	20030500 	andcs	r0, r3, r0, lsl #10
    2620:	0d00009c 	stceq	0, cr0, [r0, #-624]	; 0xfffffd90
    2624:	0000066e 	andeq	r0, r0, lr, ror #12
    2628:	007d1c01 	rsbseq	r1, sp, r1, lsl #24
    262c:	54010000 	strpl	r0, [r1], #-0
    2630:	00063f0e 	andeq	r3, r6, lr, lsl #30
    2634:	371d0100 	ldrcc	r0, [sp, -r0, lsl #2]
    2638:	c1000000 	mrsgt	r0, (UNDEF: 0)
    263c:	0f000011 	svceq	0x00000011
    2640:	0000954c 	andeq	r9, r0, ip, asr #10
    2644:	00000313 	andeq	r0, r0, r3, lsl r3
    2648:	00000128 	andeq	r0, r0, r8, lsr #2
    264c:	01530110 	cmpeq	r3, r0, lsl r1
    2650:	5201104a 	andpl	r1, r1, #74	; 0x4a
    2654:	9c200305 	stcls	3, cr0, [r0], #-20	; 0xffffffec
    2658:	01100000 	tsteq	r0, r0
    265c:	88030551 	stmdahi	r3, {r0, r4, r6, r8, sl}
    2660:	1000009c 	mulne	r0, ip, r0
    2664:	03055001 	movweq	r5, #20481	; 0x5001
    2668:	00009c48 	andeq	r9, r0, r8, asr #24
    266c:	95501100 	ldrbls	r1, [r0, #-256]	; 0x100
    2670:	03290000 	teqeq	r9, #0
    2674:	70120000 	andsvc	r0, r2, r0
    2678:	30000095 	mulcc	r0, r5, r0
    267c:	10000003 	andne	r0, r0, r3
    2680:	f3085201 	vhsub.u8	d5, d8, d1
    2684:	03235001 	teqeq	r3, #1
    2688:	101afc09 	andsne	pc, sl, r9, lsl #24
    268c:	30015101 	andcc	r5, r1, r1, lsl #2
    2690:	0b500110 	bleq	1402ad8 <__bss_end__+0x13f8978>
    2694:	235001f3 	cmpcs	r0, #-1073741764	; 0xc000003c
    2698:	1afc0903 	bne	fff04aac <__bss_end__+0xffefa94c>
    269c:	00220074 	eoreq	r0, r2, r4, ror r0
    26a0:	00970700 	addseq	r0, r7, r0, lsl #14
    26a4:	4e0a0000 	cdpmi	0, 0, cr0, cr10, cr0, {0}
    26a8:	01000002 	tsteq	r0, r2
    26ac:	00007d26 	andeq	r7, r0, r6, lsr #26
    26b0:	00958800 	addseq	r8, r5, r0, lsl #16
    26b4:	00009400 	andeq	r9, r0, r0, lsl #8
    26b8:	399c0100 	ldmibcc	ip, {r8}
    26bc:	0b000002 	bleq	26cc <_start-0x5934>
    26c0:	00000647 	andeq	r0, r0, r7, asr #12
    26c4:	00372601 	eorseq	r2, r7, r1, lsl #12
    26c8:	11e70000 	mvnne	r0, r0
    26cc:	350b0000 	strcc	r0, [fp, #-0]
    26d0:	01000006 	tsteq	r0, r6
    26d4:	00003726 	andeq	r3, r0, r6, lsr #14
    26d8:	00125300 	andseq	r5, r2, r0, lsl #6
    26dc:	01380c00 	teqeq	r8, r0, lsl #24
    26e0:	02490000 	subeq	r0, r9, #0
    26e4:	03050000 	movweq	r0, #20480	; 0x5000
    26e8:	00009c28 	andeq	r9, r0, r8, lsr #24
    26ec:	0006040e 	andeq	r0, r6, lr, lsl #8
    26f0:	372c0100 	strcc	r0, [ip, -r0, lsl #2]!
    26f4:	cd000000 	stcgt	0, cr0, [r0, #-0]
    26f8:	0f000012 	svceq	0x00000012
    26fc:	000095b0 			; <UNDEFINED> instruction: 0x000095b0
    2700:	00000313 	andeq	r0, r0, r3, lsl r3
    2704:	000001e5 	andeq	r0, r0, r5, ror #3
    2708:	02530110 	subseq	r0, r3, #16, 2
    270c:	01102708 	tsteq	r0, r8, lsl #14
    2710:	28030552 	stmdacs	r3, {r1, r4, r6, r8, sl}
    2714:	1000009c 	mulne	r0, ip, r0
    2718:	03055101 	movweq	r5, #20737	; 0x5101
    271c:	00009c88 	andeq	r9, r0, r8, lsl #25
    2720:	05500110 	ldrbeq	r0, [r0, #-272]	; 0x110
    2724:	009c4803 	addseq	r4, ip, r3, lsl #16
    2728:	b4110000 	ldrlt	r0, [r1], #-0
    272c:	29000095 	stmdbcs	r0, {r0, r2, r4, r7}
    2730:	11000003 	tstne	r0, r3
    2734:	000095c0 	andeq	r9, r0, r0, asr #11
    2738:	000000a7 	andeq	r0, r0, r7, lsr #1
    273c:	0095e00f 	addseq	lr, r5, pc
    2740:	00031300 	andeq	r1, r3, r0, lsl #6
    2744:	00022600 	andeq	r2, r2, r0, lsl #12
    2748:	53011000 	movwpl	r1, #4096	; 0x1000
    274c:	102b0802 	eorne	r0, fp, r2, lsl #16
    2750:	03055201 	movweq	r5, #20993	; 0x5201
    2754:	00009c28 	andeq	r9, r0, r8, lsr #24
    2758:	05510110 	ldrbeq	r0, [r1, #-272]	; 0x110
    275c:	009c8803 	addseq	r8, ip, r3, lsl #16
    2760:	50011000 	andpl	r1, r1, r0
    2764:	9c9c0305 	ldcls	3, cr0, [ip], {5}
    2768:	11000000 	mrsne	r0, (UNDEF: 0)
    276c:	000095e4 	andeq	r9, r0, r4, ror #11
    2770:	00000329 	andeq	r0, r0, r9, lsr #6
    2774:	00960411 	addseq	r0, r6, r1, lsl r4
    2778:	0000a700 	andeq	sl, r0, r0, lsl #14
    277c:	85080000 	strhi	r0, [r8, #-0]
    2780:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
    2784:	09000002 	stmdbeq	r0, {r1}
    2788:	00000076 	andeq	r0, r0, r6, ror r0
    278c:	3907000f 	stmdbcc	r7, {r0, r1, r2, r3}
    2790:	13000002 	movwne	r0, #2
    2794:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
    2798:	961c3b01 	ldrls	r3, [ip], -r1, lsl #22
    279c:	00580000 	subseq	r0, r8, r0
    27a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    27a4:	000002ab 	andeq	r0, r0, fp, lsr #5
    27a8:	0001380c 	andeq	r3, r1, ip, lsl #16
    27ac:	0002bb00 	andeq	fp, r2, r0, lsl #22
    27b0:	38030500 	stmdacc	r3, {r8, sl}
    27b4:	0f00009c 	svceq	0x0000009c
    27b8:	00009644 	andeq	r9, r0, r4, asr #12
    27bc:	00000313 	andeq	r0, r0, r3, lsl r3
    27c0:	000002a1 	andeq	r0, r0, r1, lsr #5
    27c4:	02530110 	subseq	r0, r3, #16, 2
    27c8:	01103c08 	tsteq	r0, r8, lsl #24
    27cc:	38030552 	stmdacc	r3, {r1, r4, r6, r8, sl}
    27d0:	1000009c 	mulne	r0, ip, r0
    27d4:	03055101 	movweq	r5, #20737	; 0x5101
    27d8:	00009c88 	andeq	r9, r0, r8, lsl #25
    27dc:	05500110 	ldrbeq	r0, [r0, #-272]	; 0x110
    27e0:	009cf403 	addseq	pc, ip, r3, lsl #8
    27e4:	48110000 	ldmdami	r1, {}	; <UNPREDICTABLE>
    27e8:	29000096 	stmdbcs	r0, {r1, r2, r4, r7}
    27ec:	00000003 	andeq	r0, r0, r3
    27f0:	00008508 	andeq	r8, r0, r8, lsl #10
    27f4:	0002bb00 	andeq	fp, r2, r0, lsl #22
    27f8:	00760900 	rsbseq	r0, r6, r0, lsl #18
    27fc:	000c0000 	andeq	r0, ip, r0
    2800:	0002ab07 	andeq	sl, r2, r7, lsl #22
    2804:	05fa1400 	ldrbeq	r1, [sl, #1024]!	; 0x400
    2808:	45010000 	strmi	r0, [r1, #-0]
    280c:	00009674 	andeq	r9, r0, r4, ror r6
    2810:	00000018 	andeq	r0, r0, r8, lsl r0
    2814:	4e159c01 	cdpmi	12, 1, cr9, cr5, cr1, {0}
    2818:	01000006 	tsteq	r0, r6
    281c:	00007d4e 	andeq	r7, r0, lr, asr #26
    2820:	00968c00 	addseq	r8, r6, r0, lsl #24
    2824:	00001000 	andeq	r1, r0, r0
    2828:	0d9c0100 	ldfeqs	f0, [ip]
    282c:	0000062e 	andeq	r0, r0, lr, lsr #12
    2830:	00250801 	eoreq	r0, r5, r1, lsl #16
    2834:	03050000 	movweq	r0, #20480	; 0x5000
    2838:	0000a158 	andeq	sl, r0, r8, asr r1
    283c:	0006560d 	andeq	r5, r6, sp, lsl #12
    2840:	7f0b0100 	svcvc	0x000b0100
    2844:	05000000 	streq	r0, [r0, #-0]
    2848:	00a15c03 	adceq	r5, r1, r3, lsl #24
    284c:	065f1600 	ldrbeq	r1, [pc], -r0, lsl #12
    2850:	05010000 	streq	r0, [r1, #-0]
    2854:	00000085 	andeq	r0, r0, r5, lsl #1
    2858:	00043a17 	andeq	r3, r4, r7, lsl sl
    285c:	25270300 	strcs	r0, [r7, #-768]!	; 0x300
    2860:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    2864:	18000003 	stmdane	r0, {r0, r1}
    2868:	0000008c 	andeq	r0, r0, ip, lsl #1
    286c:	051a0019 	ldreq	r0, [sl, #-25]
    2870:	03000000 	movweq	r0, #0
    2874:	035a1b5c 	cmpeq	sl, #92, 22	; 0x17000
    2878:	1b040000 	blne	102880 <__bss_end__+0xf8720>
    287c:	0000007d 	andeq	r0, r0, sp, ror r0
    2880:	00007d18 	andeq	r7, r0, r8, lsl sp
    2884:	00251800 	eoreq	r1, r5, r0, lsl #16
    2888:	2c180000 	ldccs	0, cr0, [r8], {-0}
    288c:	00000000 	andeq	r0, r0, r0
    2890:	0000e000 	andeq	lr, r0, r0
    2894:	0d000400 	cfstrseq	mvf0, [r0, #-0]
    2898:	0400000f 	streq	r0, [r0], #-15
    289c:	00001001 	andeq	r1, r0, r1
    28a0:	06950100 	ldreq	r0, [r5], r0, lsl #2
    28a4:	03d60000 	bicseq	r0, r6, #0
    28a8:	969c0000 	ldrls	r0, [ip], r0
    28ac:	00140000 	andseq	r0, r4, r0
    28b0:	0d7d0000 	ldcleq	0, cr0, [sp, #-0]
    28b4:	04020000 	streq	r0, [r2], #-0
    28b8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    28bc:	07040300 	streq	r0, [r4, -r0, lsl #6]
    28c0:	0000015d 	andeq	r0, r0, sp, asr r1
    28c4:	8f060103 	svchi	0x00060103
    28c8:	03000000 	movweq	r0, #0
    28cc:	01a30502 			; <UNDEFINED> instruction: 0x01a30502
    28d0:	04030000 	streq	r0, [r3], #-0
    28d4:	00018f05 	andeq	r8, r1, r5, lsl #30
    28d8:	05080300 	streq	r0, [r8, #-768]	; 0x300
    28dc:	0000018a 	andeq	r0, r0, sl, lsl #3
    28e0:	8d080103 	stfhis	f0, [r8, #-12]
    28e4:	03000000 	movweq	r0, #0
    28e8:	010c0702 	tsteq	ip, r2, lsl #14
    28ec:	04030000 	streq	r0, [r3], #-0
    28f0:	00015807 	andeq	r5, r1, r7, lsl #16
    28f4:	07080300 	streq	r0, [r8, -r0, lsl #6]
    28f8:	00000153 	andeq	r0, r0, r3, asr r1
    28fc:	81070403 	tsthi	r7, r3, lsl #8
    2900:	03000001 	movweq	r0, #1
    2904:	00960801 	addseq	r0, r6, r1, lsl #16
    2908:	84040000 	strhi	r0, [r4], #-0
    290c:	01000006 	tsteq	r0, r6
    2910:	00002503 	andeq	r2, r0, r3, lsl #10
    2914:	00969c00 	addseq	r9, r6, r0, lsl #24
    2918:	00001400 	andeq	r1, r0, r0, lsl #8
    291c:	b09c0100 	addslt	r0, ip, r0, lsl #2
    2920:	05000000 	streq	r0, [r0, #-0]
    2924:	03010063 	movweq	r0, #4195	; 0x1063
    2928:	00000025 	andeq	r0, r0, r5, lsr #32
    292c:	000012fa 	strdeq	r1, [r0], -sl
    2930:	0096a806 	addseq	sl, r6, r6, lsl #16
    2934:	0000d600 	andeq	sp, r0, r0, lsl #12
    2938:	50010700 	andpl	r0, r1, r0, lsl #14
    293c:	00007402 	andeq	r7, r0, r2, lsl #8
    2940:	00250800 	eoreq	r0, r5, r0, lsl #16
    2944:	00bf0000 	adcseq	r0, pc, r0
    2948:	25090000 	strcs	r0, [r9, #-0]
    294c:	00000000 	andeq	r0, r0, r0
    2950:	00046f0a 	andeq	r6, r4, sl, lsl #30
    2954:	d0060100 	andle	r0, r6, r0, lsl #2
    2958:	05000000 	streq	r0, [r0, #-0]
    295c:	0096d003 	addseq	sp, r6, r3
    2960:	b0040b00 	andlt	r0, r4, r0, lsl #22
    2964:	0c000000 	stceq	0, cr0, [r0], {-0}
    2968:	0000067a 	andeq	r0, r0, sl, ror r6
    296c:	2c093a02 	stccs	10, cr3, [r9], {2}
    2970:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <__bss_end__+0x2b5f4c>
  18:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  1c:	24030000 	strcs	r0, [r3], #-0
  20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  24:	000e030b 	andeq	r0, lr, fp, lsl #6
  28:	00160400 	andseq	r0, r6, r0, lsl #8
  2c:	0b3a0e03 	bleq	e83840 <__bss_end__+0xe796e0>
  30:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  34:	0f050000 	svceq	0x00050000
  38:	000b0b00 	andeq	r0, fp, r0, lsl #22
  3c:	000f0600 	andeq	r0, pc, r0, lsl #12
  40:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  44:	26070000 	strcs	r0, [r7], -r0
  48:	00134900 	andseq	r4, r3, r0, lsl #18
  4c:	01130800 	tsteq	r3, r0, lsl #16
  50:	050b0e03 	streq	r0, [fp, #-3587]	; 0xe03
  54:	0b3b0b3a 	bleq	ec2d44 <__bss_end__+0xeb8be4>
  58:	00001301 	andeq	r1, r0, r1, lsl #6
  5c:	03000d09 	movweq	r0, #3337	; 0xd09
  60:	3b0b3a0e 	blcc	2ce8a0 <__bss_end__+0x2c4740>
  64:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  68:	0a00000b 	beq	9c <_start-0x7f64>
  6c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  70:	0b3b0b3a 	bleq	ec2d60 <__bss_end__+0xeb8c00>
  74:	0b381349 	bleq	e04da0 <__bss_end__+0xdfac40>
  78:	010b0000 	mrseq	r0, (UNDEF: 11)
  7c:	01134901 	tsteq	r3, r1, lsl #18
  80:	0c000013 	stceq	0, cr0, [r0], {19}
  84:	13490021 	movtne	r0, #36897	; 0x9021
  88:	00000b2f 	andeq	r0, r0, pc, lsr #22
  8c:	2701150d 	strcs	r1, [r1, -sp, lsl #10]
  90:	00130119 	andseq	r0, r3, r9, lsl r1
  94:	00050e00 	andeq	r0, r5, r0, lsl #28
  98:	00001349 	andeq	r1, r0, r9, asr #6
  9c:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
  a0:	00052f13 	andeq	r2, r5, r3, lsl pc
  a4:	012e1000 	teqeq	lr, r0
  a8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
  ac:	0b3b0b3a 	bleq	ec2d9c <__bss_end__+0xeb8c3c>
  b0:	01111927 	tsteq	r1, r7, lsr #18
  b4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  b8:	01194297 			; <UNDEFINED> instruction: 0x01194297
  bc:	11000013 	tstne	r0, r3, lsl r0
  c0:	08030005 	stmdaeq	r3, {r0, r2}
  c4:	0b3b0b3a 	bleq	ec2db4 <__bss_end__+0xeb8c54>
  c8:	17021349 	strne	r1, [r2, -r9, asr #6]
  cc:	89120000 	ldmdbhi	r2, {}	; <UNPREDICTABLE>
  d0:	11010182 	smlabbne	r1, r2, r1, r0
  d4:	01133101 	tsteq	r3, r1, lsl #2
  d8:	13000013 	movwne	r0, #19
  dc:	0001828a 	andeq	r8, r1, sl, lsl #5
  e0:	42911802 	addsmi	r1, r1, #131072	; 0x20000
  e4:	14000018 	strne	r0, [r0], #-24
  e8:	00018289 	andeq	r8, r1, r9, lsl #5
  ec:	13310111 	teqne	r1, #1073741828	; 0x40000004
  f0:	34150000 	ldrcc	r0, [r5], #-0
  f4:	3a080300 	bcc	200cfc <__bss_end__+0x1f6b9c>
  f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  fc:	000b1c13 	andeq	r1, fp, r3, lsl ip
 100:	010b1600 	tsteq	fp, r0, lsl #12
 104:	06120111 			; <UNDEFINED> instruction: 0x06120111
 108:	00001301 	andeq	r1, r0, r1, lsl #6
 10c:	03003417 	movweq	r3, #1047	; 0x417
 110:	3b0b3a08 	blcc	2ce938 <__bss_end__+0x2c47d8>
 114:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 118:	18000017 	stmdane	r0, {r0, r1, r2, r4}
 11c:	01018289 	smlabbeq	r1, r9, r2, r8
 120:	13310111 	teqne	r1, #1073741828	; 0x40000004
 124:	34190000 	ldrcc	r0, [r9], #-0
 128:	490e0300 	stmdbmi	lr, {r8, r9}
 12c:	02193413 	andseq	r3, r9, #318767104	; 0x13000000
 130:	1a000018 	bne	198 <_start-0x7e68>
 134:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 138:	0b3a0e03 	bleq	e8394c <__bss_end__+0xe797ec>
 13c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 140:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 144:	00001301 	andeq	r1, r0, r1, lsl #6
 148:	0000181b 	andeq	r1, r0, fp, lsl r8
 14c:	002e1c00 	eoreq	r1, lr, r0, lsl #24
 150:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 154:	0b3b0b3a 	bleq	ec2e44 <__bss_end__+0xeb8ce4>
 158:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 15c:	01000000 	mrseq	r0, (UNDEF: 0)
 160:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 164:	0e030b13 	vmoveq.32	d3[0], r0
 168:	01110e1b 	tsteq	r1, fp, lsl lr
 16c:	17100612 			; <UNDEFINED> instruction: 0x17100612
 170:	24020000 	strcs	r0, [r2], #-0
 174:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 178:	0008030b 	andeq	r0, r8, fp, lsl #6
 17c:	00240300 	eoreq	r0, r4, r0, lsl #6
 180:	0b3e0b0b 	bleq	f82db4 <__bss_end__+0xf78c54>
 184:	00000e03 	andeq	r0, r0, r3, lsl #28
 188:	03001604 	movweq	r1, #1540	; 0x604
 18c:	3b0b3a0e 	blcc	2ce9cc <__bss_end__+0x2c486c>
 190:	0013490b 	andseq	r4, r3, fp, lsl #18
 194:	000f0500 	andeq	r0, pc, r0, lsl #10
 198:	00000b0b 	andeq	r0, r0, fp, lsl #22
 19c:	0b000f06 	bleq	3dbc <_start-0x4244>
 1a0:	0013490b 	andseq	r4, r3, fp, lsl #18
 1a4:	00260700 	eoreq	r0, r6, r0, lsl #14
 1a8:	00001349 	andeq	r1, r0, r9, asr #6
 1ac:	49010108 	stmdbmi	r1, {r3, r8}
 1b0:	00130113 	andseq	r0, r3, r3, lsl r1
 1b4:	00210900 	eoreq	r0, r1, r0, lsl #18
 1b8:	0b2f1349 	bleq	bc4ee4 <__bss_end__+0xbbad84>
 1bc:	130a0000 	movwne	r0, #40960	; 0xa000
 1c0:	0b0e0301 	bleq	380dcc <__bss_end__+0x376c6c>
 1c4:	3b0b3a05 	blcc	2ce9e0 <__bss_end__+0x2c4880>
 1c8:	0013010b 	andseq	r0, r3, fp, lsl #2
 1cc:	000d0b00 	andeq	r0, sp, r0, lsl #22
 1d0:	0b3a0e03 	bleq	e839e4 <__bss_end__+0xe79884>
 1d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1d8:	00000b38 	andeq	r0, r0, r8, lsr fp
 1dc:	03000d0c 	movweq	r0, #3340	; 0xd0c
 1e0:	3b0b3a08 	blcc	2cea08 <__bss_end__+0x2c48a8>
 1e4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 1e8:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
 1ec:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 1f0:	00001301 	andeq	r1, r0, r1, lsl #6
 1f4:	4900050e 	stmdbmi	r0, {r1, r2, r3, r8, sl}
 1f8:	0f000013 	svceq	0x00000013
 1fc:	13490021 	movtne	r0, #36897	; 0x9021
 200:	0000052f 	andeq	r0, r0, pc, lsr #10
 204:	03011310 	movweq	r1, #4880	; 0x1310
 208:	3a0b0b08 	bcc	2c2e30 <__bss_end__+0x2b8cd0>
 20c:	010b3b0b 	tsteq	fp, fp, lsl #22
 210:	11000013 	tstne	r0, r3, lsl r0
 214:	08030016 	stmdaeq	r3, {r1, r2, r4}
 218:	0b3b0b3a 	bleq	ec2f08 <__bss_end__+0xeb8da8>
 21c:	00001349 	andeq	r1, r0, r9, asr #6
 220:	03012e12 	movweq	r2, #7698	; 0x1e12
 224:	3b0b3a0e 	blcc	2cea64 <__bss_end__+0x2c4904>
 228:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 22c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 230:	97184006 	ldrls	r4, [r8, -r6]
 234:	13011942 	movwne	r1, #6466	; 0x1942
 238:	05130000 	ldreq	r0, [r3, #-0]
 23c:	3a080300 	bcc	200e44 <__bss_end__+0x1f6ce4>
 240:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 244:	00170213 	andseq	r0, r7, r3, lsl r2
 248:	012e1400 	teqeq	lr, r0, lsl #8
 24c:	0b3a0e03 	bleq	e83a60 <__bss_end__+0xe79900>
 250:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 254:	06120111 			; <UNDEFINED> instruction: 0x06120111
 258:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 25c:	00130119 	andseq	r0, r3, r9, lsl r1
 260:	00051500 	andeq	r1, r5, r0, lsl #10
 264:	0b3a0803 	bleq	e82278 <__bss_end__+0xe78118>
 268:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 26c:	00001802 	andeq	r1, r0, r2, lsl #16
 270:	01828916 	orreq	r8, r2, r6, lsl r9
 274:	31011101 	tstcc	r1, r1, lsl #2
 278:	17000013 	smladne	r0, r3, r0, r0
 27c:	0001828a 	andeq	r8, r1, sl, lsl #5
 280:	42911802 	addsmi	r1, r1, #131072	; 0x20000
 284:	18000018 	stmdane	r0, {r3, r4}
 288:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 28c:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
 290:	00001802 	andeq	r1, r0, r2, lsl #16
 294:	01828919 	orreq	r8, r2, r9, lsl r9
 298:	31011101 	tstcc	r1, r1, lsl #2
 29c:	00130113 	andseq	r0, r3, r3, lsl r1
 2a0:	82891a00 	addhi	r1, r9, #0, 20
 2a4:	01110001 	tsteq	r1, r1
 2a8:	00001331 	andeq	r1, r0, r1, lsr r3
 2ac:	0300341b 	movweq	r3, #1051	; 0x41b
 2b0:	3b0b3a08 	blcc	2cead8 <__bss_end__+0x2c4978>
 2b4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 2b8:	1c000017 	stcne	0, cr0, [r0], {23}
 2bc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 2c0:	0b3a0e03 	bleq	e83ad4 <__bss_end__+0xe79974>
 2c4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 2c8:	01111349 	tsteq	r1, r9, asr #6
 2cc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2d0:	00194297 	mulseq	r9, r7, r2
 2d4:	012e1d00 	teqeq	lr, r0, lsl #26
 2d8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 2dc:	0b3b0b3a 	bleq	ec2fcc <__bss_end__+0xeb8e6c>
 2e0:	13491927 	movtne	r1, #39207	; 0x9927
 2e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2e8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2ec:	00130119 	andseq	r0, r3, r9, lsl r1
 2f0:	00051e00 	andeq	r1, r5, r0, lsl #28
 2f4:	0b3a0e03 	bleq	e83b08 <__bss_end__+0xe799a8>
 2f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2fc:	00001702 	andeq	r1, r0, r2, lsl #14
 300:	3f002e1f 	svccc	0x00002e1f
 304:	3a0e0319 	bcc	380f70 <__bss_end__+0x376e10>
 308:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 30c:	00193c19 	andseq	r3, r9, r9, lsl ip
 310:	012e2000 	teqeq	lr, r0
 314:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 318:	0b3b0b3a 	bleq	ec3008 <__bss_end__+0xeb8ea8>
 31c:	01111927 	tsteq	r1, r7, lsr #18
 320:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 324:	01194297 			; <UNDEFINED> instruction: 0x01194297
 328:	21000013 	tstcs	r0, r3, lsl r0
 32c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 330:	0b3b0b3a 	bleq	ec3020 <__bss_end__+0xeb8ec0>
 334:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 338:	34220000 	strtcc	r0, [r2], #-0
 33c:	3a0e0300 	bcc	380f44 <__bss_end__+0x376de4>
 340:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 344:	23000013 	movwcs	r0, #19
 348:	0111010b 	tsteq	r1, fp, lsl #2
 34c:	13010612 	movwne	r0, #5650	; 0x1612
 350:	34240000 	strtcc	r0, [r4], #-0
 354:	3a0e0300 	bcc	380f5c <__bss_end__+0x376dfc>
 358:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 35c:	00170213 	andseq	r0, r7, r3, lsl r2
 360:	00342500 	eorseq	r2, r4, r0, lsl #10
 364:	0b3a0803 	bleq	e82378 <__bss_end__+0xe78218>
 368:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 36c:	00001802 	andeq	r1, r0, r2, lsl #16
 370:	3f012e26 	svccc	0x00012e26
 374:	3a0e0319 	bcc	380fe0 <__bss_end__+0x376e80>
 378:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 37c:	3c134919 	ldccc	9, cr4, [r3], {25}
 380:	00130119 	andseq	r0, r3, r9, lsl r1
 384:	00182700 	andseq	r2, r8, r0, lsl #14
 388:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
 38c:	03193f01 	tsteq	r9, #1, 30
 390:	3b0b3a0e 	blcc	2cebd0 <__bss_end__+0x2c4a70>
 394:	3c19270b 	ldccc	7, cr2, [r9], {11}
 398:	00130119 	andseq	r0, r3, r9, lsl r1
 39c:	11010000 	mrsne	r0, (UNDEF: 1)
 3a0:	130e2501 	movwne	r2, #58625	; 0xe501
 3a4:	1b0e030b 	blne	380fd8 <__bss_end__+0x376e78>
 3a8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 3ac:	00171006 	andseq	r1, r7, r6
 3b0:	00240200 	eoreq	r0, r4, r0, lsl #4
 3b4:	0b3e0b0b 	bleq	f82fe8 <__bss_end__+0xf78e88>
 3b8:	00000803 	andeq	r0, r0, r3, lsl #16
 3bc:	03001603 	movweq	r1, #1539	; 0x603
 3c0:	3b0b3a0e 	blcc	2cec00 <__bss_end__+0x2c4aa0>
 3c4:	0013490b 	andseq	r4, r3, fp, lsl #18
 3c8:	00240400 	eoreq	r0, r4, r0, lsl #8
 3cc:	0b3e0b0b 	bleq	f83000 <__bss_end__+0xf78ea0>
 3d0:	00000e03 	andeq	r0, r0, r3, lsl #28
 3d4:	0b000f05 	bleq	3ff0 <_start-0x4010>
 3d8:	0600000b 	streq	r0, [r0], -fp
 3dc:	0b0b000f 	bleq	2c0420 <__bss_end__+0x2b62c0>
 3e0:	00001349 	andeq	r1, r0, r9, asr #6
 3e4:	49002607 	stmdbmi	r0, {r0, r1, r2, r9, sl, sp}
 3e8:	08000013 	stmdaeq	r0, {r0, r1, r4}
 3ec:	13490101 	movtne	r0, #37121	; 0x9101
 3f0:	00001301 	andeq	r1, r0, r1, lsl #6
 3f4:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
 3f8:	000b2f13 	andeq	r2, fp, r3, lsl pc
 3fc:	01130a00 	tsteq	r3, r0, lsl #20
 400:	0b3a050b 	bleq	e81834 <__bss_end__+0xe776d4>
 404:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 408:	0d0b0000 	stceq	0, cr0, [fp, #-0]
 40c:	3a0e0300 	bcc	381014 <__bss_end__+0x376eb4>
 410:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 414:	000b3813 	andeq	r3, fp, r3, lsl r8
 418:	000d0c00 	andeq	r0, sp, r0, lsl #24
 41c:	0b3a0e03 	bleq	e83c30 <__bss_end__+0xe79ad0>
 420:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 424:	00000538 	andeq	r0, r0, r8, lsr r5
 428:	03000d0d 	movweq	r0, #3341	; 0xd0d
 42c:	3b0b3a0e 	blcc	2cec6c <__bss_end__+0x2c4b0c>
 430:	0b13490b 	bleq	4d2864 <__bss_end__+0x4c8704>
 434:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
 438:	0005380b 	andeq	r3, r5, fp, lsl #16
 43c:	00210e00 	eoreq	r0, r1, r0, lsl #28
 440:	052f1349 	streq	r1, [pc, #-841]!	; ff <_start-0x7f01>
 444:	350f0000 	strcc	r0, [pc, #-0]	; 44c <_start-0x7bb4>
 448:	00134900 	andseq	r4, r3, r0, lsl #18
 44c:	012e1000 	teqeq	lr, r0
 450:	0b3a0e03 	bleq	e83c64 <__bss_end__+0xe79b04>
 454:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 458:	0b201349 	bleq	805184 <__bss_end__+0x7fb024>
 45c:	00001301 	andeq	r1, r0, r1, lsl #6
 460:	03000511 	movweq	r0, #1297	; 0x511
 464:	3b0b3a08 	blcc	2cec8c <__bss_end__+0x2c4b2c>
 468:	0013490b 	andseq	r4, r3, fp, lsl #18
 46c:	00341200 	eorseq	r1, r4, r0, lsl #4
 470:	0b3a0e03 	bleq	e83c84 <__bss_end__+0xe79b24>
 474:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 478:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 47c:	03193f01 	tsteq	r9, #1, 30
 480:	3b0b3a0e 	blcc	2cecc0 <__bss_end__+0x2c4b60>
 484:	1119270b 	tstne	r9, fp, lsl #14
 488:	40061201 	andmi	r1, r6, r1, lsl #4
 48c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 490:	00001301 	andeq	r1, r0, r1, lsl #6
 494:	03000514 	movweq	r0, #1300	; 0x514
 498:	3b0b3a08 	blcc	2cecc0 <__bss_end__+0x2c4b60>
 49c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 4a0:	15000017 	strne	r0, [r0, #-23]
 4a4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 4a8:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
 4ac:	00001802 	andeq	r1, r0, r2, lsl #16
 4b0:	31011d16 	tstcc	r1, r6, lsl sp
 4b4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 4b8:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
 4bc:	0013010b 	andseq	r0, r3, fp, lsl #2
 4c0:	00051700 	andeq	r1, r5, r0, lsl #14
 4c4:	17021331 	smladxne	r2, r1, r3, r1
 4c8:	89180000 	ldmdbhi	r8, {}	; <UNPREDICTABLE>
 4cc:	11010182 	smlabbne	r1, r2, r1, r0
 4d0:	00133101 	andseq	r3, r3, r1, lsl #2
 4d4:	828a1900 	addhi	r1, sl, #0, 18
 4d8:	18020001 	stmdane	r2, {r0}
 4dc:	00184291 	mulseq	r8, r1, r2
 4e0:	82891a00 	addhi	r1, r9, #0, 20
 4e4:	01110101 	tsteq	r1, r1, lsl #2
 4e8:	13011331 	movwne	r1, #4913	; 0x1331
 4ec:	891b0000 	ldmdbhi	fp, {}	; <UNPREDICTABLE>
 4f0:	11000182 	smlabbne	r0, r2, r1, r0
 4f4:	00133101 	andseq	r3, r3, r1, lsl #2
 4f8:	00051c00 	andeq	r1, r5, r0, lsl #24
 4fc:	0b3a0e03 	bleq	e83d10 <__bss_end__+0xe79bb0>
 500:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 504:	00001702 	andeq	r1, r0, r2, lsl #14
 508:	0300341d 	movweq	r3, #1053	; 0x41d
 50c:	3b0b3a08 	blcc	2ced34 <__bss_end__+0x2c4bd4>
 510:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 514:	1e000017 	mcrne	0, 0, r0, cr0, cr7, {0}
 518:	13310005 	teqne	r1, #5
 51c:	00001802 	andeq	r1, r0, r2, lsl #16
 520:	31011d1f 	tstcc	r1, pc, lsl sp
 524:	55015213 	strpl	r5, [r1, #-531]	; 0x213
 528:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
 52c:	0013010b 	andseq	r0, r3, fp, lsl #2
 530:	010b2000 	mrseq	r2, (UNDEF: 11)
 534:	00001755 	andeq	r1, r0, r5, asr r7
 538:	31003421 	tstcc	r0, r1, lsr #8
 53c:	00170213 	andseq	r0, r7, r3, lsl r2
 540:	011d2200 	tsteq	sp, r0, lsl #4
 544:	01111331 	tsteq	r1, r1, lsr r3
 548:	0b580612 	bleq	1601d98 <__bss_end__+0x15f7c38>
 54c:	00000b59 	andeq	r0, r0, r9, asr fp
 550:	3f012e23 	svccc	0x00012e23
 554:	3a0e0319 	bcc	3811c0 <__bss_end__+0x377060>
 558:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 55c:	11134919 	tstne	r3, r9, lsl r9
 560:	40061201 	andmi	r1, r6, r1, lsl #4
 564:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 568:	00001301 	andeq	r1, r0, r1, lsl #6
 56c:	11010b24 	tstne	r1, r4, lsr #22
 570:	00061201 	andeq	r1, r6, r1, lsl #4
 574:	011d2500 	tsteq	sp, r0, lsl #10
 578:	01521331 	cmpeq	r2, r1, lsr r3
 57c:	0b581755 	bleq	16062d8 <__bss_end__+0x15fc178>
 580:	00000b59 	andeq	r0, r0, r9, asr fp
 584:	03003426 	movweq	r3, #1062	; 0x426
 588:	3b0b3a08 	blcc	2cedb0 <__bss_end__+0x2c4c50>
 58c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 590:	27000018 	smladcs	r0, r8, r0, r0
 594:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 598:	0b3b0b3a 	bleq	ec3288 <__bss_end__+0xeb9128>
 59c:	17021349 	strne	r1, [r2, -r9, asr #6]
 5a0:	0b280000 	bleq	a005a8 <__bss_end__+0x9f6448>
 5a4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 5a8:	00130106 	andseq	r0, r3, r6, lsl #2
 5ac:	00342900 	eorseq	r2, r4, r0, lsl #18
 5b0:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
 5b4:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
 5b8:	03193f01 	tsteq	r9, #1, 30
 5bc:	3b0b3a0e 	blcc	2cedfc <__bss_end__+0x2c4c9c>
 5c0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 5c4:	01193c13 	tsteq	r9, r3, lsl ip
 5c8:	2b000013 	blcs	61c <_start-0x79e4>
 5cc:	13490005 	movtne	r0, #36869	; 0x9005
 5d0:	182c0000 	stmdane	ip!, {}	; <UNPREDICTABLE>
 5d4:	2d000000 	stccs	0, cr0, [r0, #-0]
 5d8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 5dc:	0b3a0e03 	bleq	e83df0 <__bss_end__+0xe79c90>
 5e0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 5e4:	0000193c 	andeq	r1, r0, ip, lsr r9
 5e8:	3f012e2e 	svccc	0x00012e2e
 5ec:	3a0e0319 	bcc	381258 <__bss_end__+0x3770f8>
 5f0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 5f4:	3c134919 	ldccc	9, cr4, [r3], {25}
 5f8:	00000019 	andeq	r0, r0, r9, lsl r0
 5fc:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 600:	030b130e 	movweq	r1, #45838	; 0xb30e
 604:	110e1b0e 	tstne	lr, lr, lsl #22
 608:	10061201 	andne	r1, r6, r1, lsl #4
 60c:	02000017 	andeq	r0, r0, #23
 610:	0b0b0024 	bleq	2c06a8 <__bss_end__+0x2b6548>
 614:	0e030b3e 	vmoveq.16	d3[0], r0
 618:	24030000 	strcs	r0, [r3], #-0
 61c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 620:	0008030b 	andeq	r0, r8, fp, lsl #6
 624:	000f0400 	andeq	r0, pc, r0, lsl #8
 628:	00000b0b 	andeq	r0, r0, fp, lsl #22
 62c:	0b000f05 	bleq	4248 <_start-0x3db8>
 630:	0013490b 	andseq	r4, r3, fp, lsl #18
 634:	00160600 	andseq	r0, r6, r0, lsl #12
 638:	0b3a0e03 	bleq	e83e4c <__bss_end__+0xe79cec>
 63c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 640:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
 644:	03193f01 	tsteq	r9, #1, 30
 648:	3b0b3a0e 	blcc	2cee88 <__bss_end__+0x2c4d28>
 64c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 650:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 654:	97184006 	ldrls	r4, [r8, -r6]
 658:	00001942 	andeq	r1, r0, r2, asr #18
 65c:	03000508 	movweq	r0, #1288	; 0x508
 660:	3b0b3a08 	blcc	2cee88 <__bss_end__+0x2c4d28>
 664:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 668:	09000018 	stmdbeq	r0, {r3, r4}
 66c:	08030005 	stmdaeq	r3, {r0, r2}
 670:	0b3b0b3a 	bleq	ec3360 <__bss_end__+0xeb9200>
 674:	17021349 	strne	r1, [r2, -r9, asr #6]
 678:	340a0000 	strcc	r0, [sl], #-0
 67c:	3a080300 	bcc	201284 <__bss_end__+0x1f7124>
 680:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 684:	00170213 	andseq	r0, r7, r3, lsl r2
 688:	00340b00 	eorseq	r0, r4, r0, lsl #22
 68c:	0b3a0803 	bleq	e826a0 <__bss_end__+0xe78540>
 690:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 694:	00001802 	andeq	r1, r0, r2, lsl #16
 698:	01110100 	tsteq	r1, r0, lsl #2
 69c:	0b130e25 	bleq	4c3f38 <__bss_end__+0x4b9dd8>
 6a0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 6a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 6a8:	00001710 	andeq	r1, r0, r0, lsl r7
 6ac:	03001602 	movweq	r1, #1538	; 0x602
 6b0:	3b0b3a0e 	blcc	2ceef0 <__bss_end__+0x2c4d90>
 6b4:	0013490b 	andseq	r4, r3, fp, lsl #18
 6b8:	01130300 	tsteq	r3, r0, lsl #6
 6bc:	0b0b0e03 	bleq	2c3ed0 <__bss_end__+0x2b9d70>
 6c0:	0b3b0b3a 	bleq	ec33b0 <__bss_end__+0xeb9250>
 6c4:	00001301 	andeq	r1, r0, r1, lsl #6
 6c8:	03000d04 	movweq	r0, #3332	; 0xd04
 6cc:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
 6d0:	0019340b 	andseq	r3, r9, fp, lsl #8
 6d4:	000f0500 	andeq	r0, pc, r0, lsl #10
 6d8:	00000b0b 	andeq	r0, r0, fp, lsl #22
 6dc:	0b002406 	bleq	96fc <__FUNCTION__.4169+0x28>
 6e0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 6e4:	07000008 	streq	r0, [r0, -r8]
 6e8:	0b0b0024 	bleq	2c0780 <__bss_end__+0x2b6620>
 6ec:	0e030b3e 	vmoveq.16	d3[0], r0
 6f0:	0f080000 	svceq	0x00080000
 6f4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 6f8:	09000013 	stmdbeq	r0, {r0, r1, r4}
 6fc:	13490026 	movtne	r0, #36902	; 0x9026
 700:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
 704:	03193f01 	tsteq	r9, #1, 30
 708:	3b0b3a0e 	blcc	2cef48 <__bss_end__+0x2c4de8>
 70c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 710:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 714:	97184006 	ldrls	r4, [r8, -r6]
 718:	13011942 	movwne	r1, #6466	; 0x1942
 71c:	050b0000 	streq	r0, [fp, #-0]
 720:	3a080300 	bcc	201328 <__bss_end__+0x1f71c8>
 724:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 728:	00180213 	andseq	r0, r8, r3, lsl r2
 72c:	00180c00 	andseq	r0, r8, r0, lsl #24
 730:	340d0000 	strcc	r0, [sp], #-0
 734:	3a080300 	bcc	20133c <__bss_end__+0x1f71dc>
 738:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 73c:	00180213 	andseq	r0, r8, r3, lsl r2
 740:	00340e00 	eorseq	r0, r4, r0, lsl #28
 744:	0b3a0e03 	bleq	e83f58 <__bss_end__+0xe79df8>
 748:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 74c:	00001802 	andeq	r1, r0, r2, lsl #16
 750:	0300340f 	movweq	r3, #1039	; 0x40f
 754:	3b0b3a08 	blcc	2cef7c <__bss_end__+0x2c4e1c>
 758:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 75c:	10000017 	andne	r0, r0, r7, lsl r0
 760:	01018289 	smlabbeq	r1, r9, r2, r8
 764:	13310111 	teqne	r1, #1073741828	; 0x40000004
 768:	00001301 	andeq	r1, r0, r1, lsl #6
 76c:	01828a11 	orreq	r8, r2, r1, lsl sl
 770:	91180200 	tstls	r8, r0, lsl #4
 774:	00001842 	andeq	r1, r0, r2, asr #16
 778:	01828912 	orreq	r8, r2, r2, lsl r9
 77c:	00011101 	andeq	r1, r1, r1, lsl #2
 780:	01011300 	mrseq	r1, SP_irq
 784:	13011349 	movwne	r1, #4937	; 0x1349
 788:	21140000 	tstcs	r4, r0
 78c:	2f134900 	svccs	0x00134900
 790:	15000005 	strne	r0, [r0, #-5]
 794:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 798:	13011349 	movwne	r1, #4937	; 0x1349
 79c:	05160000 	ldreq	r0, [r6, #-0]
 7a0:	00134900 	andseq	r4, r3, r0, lsl #18
 7a4:	00341700 	eorseq	r1, r4, r0, lsl #14
 7a8:	0b3a0e03 	bleq	e83fbc <__bss_end__+0xe79e5c>
 7ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 7b0:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 7b4:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
 7b8:	03193f01 	tsteq	r9, #1, 30
 7bc:	3b0b3a0e 	blcc	2ceffc <__bss_end__+0x2c4e9c>
 7c0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 7c4:	00193c13 	andseq	r3, r9, r3, lsl ip
 7c8:	11010000 	mrsne	r0, (UNDEF: 1)
 7cc:	130e2501 	movwne	r2, #58625	; 0xe501
 7d0:	1b0e030b 	blne	381404 <__bss_end__+0x3772a4>
 7d4:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 7d8:	00171006 	andseq	r1, r7, r6
 7dc:	00240200 	eoreq	r0, r4, r0, lsl #4
 7e0:	0b3e0b0b 	bleq	f83414 <__bss_end__+0xf792b4>
 7e4:	00000803 	andeq	r0, r0, r3, lsl #16
 7e8:	0b002403 	bleq	97fc <__FUNCTION__.4251+0x74>
 7ec:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 7f0:	0400000e 	streq	r0, [r0], #-14
 7f4:	0b0b000f 	bleq	2c0838 <__bss_end__+0x2b66d8>
 7f8:	00001349 	andeq	r1, r0, r9, asr #6
 7fc:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
 800:	06000013 			; <UNDEFINED> instruction: 0x06000013
 804:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 808:	0b3a0e03 	bleq	e8401c <__bss_end__+0xe79ebc>
 80c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 810:	01111349 	tsteq	r1, r9, asr #6
 814:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 818:	01194296 			; <UNDEFINED> instruction: 0x01194296
 81c:	07000013 	smladeq	r0, r3, r0, r0
 820:	08030005 	stmdaeq	r3, {r0, r2}
 824:	0b3b0b3a 	bleq	ec3514 <__bss_end__+0xeb93b4>
 828:	17021349 	strne	r1, [r2, -r9, asr #6]
 82c:	15080000 	strne	r0, [r8, #-0]
 830:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
 834:	00130113 	andseq	r0, r3, r3, lsl r1
 838:	00050900 	andeq	r0, r5, r0, lsl #18
 83c:	00001349 	andeq	r1, r0, r9, asr #6
 840:	0300340a 	movweq	r3, #1034	; 0x40a
 844:	3b0b3a0e 	blcc	2cf084 <__bss_end__+0x2c4f24>
 848:	3f13490b 	svccc	0x0013490b
 84c:	00193c19 	andseq	r3, r9, r9, lsl ip
 850:	00340b00 	eorseq	r0, r4, r0, lsl #22
 854:	0b3a0e03 	bleq	e84068 <__bss_end__+0xe79f08>
 858:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 85c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 860:	01000000 	mrseq	r0, (UNDEF: 0)
 864:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 868:	0e030b13 	vmoveq.32	d3[0], r0
 86c:	01110e1b 	tsteq	r1, fp, lsl lr
 870:	17100612 			; <UNDEFINED> instruction: 0x17100612
 874:	24020000 	strcs	r0, [r2], #-0
 878:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 87c:	0008030b 	andeq	r0, r8, fp, lsl #6
 880:	00240300 	eoreq	r0, r4, r0, lsl #6
 884:	0b3e0b0b 	bleq	f834b8 <__bss_end__+0xf79358>
 888:	00000e03 	andeq	r0, r0, r3, lsl #28
 88c:	0b000f04 	bleq	44a4 <_start-0x3b5c>
 890:	0500000b 	streq	r0, [r0, #-11]
 894:	0b0b000f 	bleq	2c08d8 <__bss_end__+0x2b6778>
 898:	00001349 	andeq	r1, r0, r9, asr #6
 89c:	49002606 	stmdbmi	r0, {r1, r2, r9, sl, sp}
 8a0:	07000013 	smladeq	r0, r3, r0, r0
 8a4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 8a8:	0b3b0b3a 	bleq	ec3598 <__bss_end__+0xeb9438>
 8ac:	00001349 	andeq	r1, r0, r9, asr #6
 8b0:	03011308 	movweq	r1, #4872	; 0x1308
 8b4:	3a0b0b0e 	bcc	2c34f4 <__bss_end__+0x2b9394>
 8b8:	010b3b0b 	tsteq	fp, fp, lsl #22
 8bc:	09000013 	stmdbeq	r0, {r0, r1, r4}
 8c0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 8c4:	0b381349 	bleq	e055f0 <__bss_end__+0xdfb490>
 8c8:	00001934 	andeq	r1, r0, r4, lsr r9
 8cc:	03012e0a 	movweq	r2, #7690	; 0x1e0a
 8d0:	3b0b3a0e 	blcc	2cf110 <__bss_end__+0x2c4fb0>
 8d4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 8d8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 8dc:	97184006 	ldrls	r4, [r8, -r6]
 8e0:	13011942 	movwne	r1, #6466	; 0x1942
 8e4:	050b0000 	streq	r0, [fp, #-0]
 8e8:	3a080300 	bcc	2014f0 <__bss_end__+0x1f7390>
 8ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 8f0:	00170213 	andseq	r0, r7, r3, lsl r2
 8f4:	012e0c00 	teqeq	lr, r0, lsl #24
 8f8:	0b3a0803 	bleq	e8290c <__bss_end__+0xe787ac>
 8fc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 900:	01111349 	tsteq	r1, r9, asr #6
 904:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 908:	01194297 			; <UNDEFINED> instruction: 0x01194297
 90c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 910:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 914:	0b3b0b3a 	bleq	ec3604 <__bss_end__+0xeb94a4>
 918:	17021349 	strne	r1, [r2, -r9, asr #6]
 91c:	050e0000 	streq	r0, [lr, #-0]
 920:	3a0e0300 	bcc	381528 <__bss_end__+0x3773c8>
 924:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 928:	00180213 	andseq	r0, r8, r3, lsl r2
 92c:	00340f00 	eorseq	r0, r4, r0, lsl #30
 930:	0b3a0803 	bleq	e82944 <__bss_end__+0xe787e4>
 934:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 938:	00001802 	andeq	r1, r0, r2, lsl #16
 93c:	03003410 	movweq	r3, #1040	; 0x410
 940:	3b0b3a08 	blcc	2cf168 <__bss_end__+0x2c5008>
 944:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 948:	11000017 	tstne	r0, r7, lsl r0
 94c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 950:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
 954:	00001802 	andeq	r1, r0, r2, lsl #16
 958:	11010b12 	tstne	r1, r2, lsl fp
 95c:	01061201 	tsteq	r6, r1, lsl #4
 960:	13000013 	movwne	r0, #19
 964:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 968:	0b3b0b3a 	bleq	ec3658 <__bss_end__+0xeb94f8>
 96c:	17021349 	strne	r1, [r2, -r9, asr #6]
 970:	89140000 	ldmdbhi	r4, {}	; <UNPREDICTABLE>
 974:	11010182 	smlabbne	r1, r2, r1, r0
 978:	01133101 	tsteq	r3, r1, lsl #2
 97c:	15000013 	strne	r0, [r0, #-19]
 980:	0001828a 	andeq	r8, r1, sl, lsl #5
 984:	42911802 	addsmi	r1, r1, #131072	; 0x20000
 988:	16000018 			; <UNDEFINED> instruction: 0x16000018
 98c:	00018289 	andeq	r8, r1, r9, lsl #5
 990:	13310111 	teqne	r1, #1073741828	; 0x40000004
 994:	89170000 	ldmdbhi	r7, {}	; <UNPREDICTABLE>
 998:	11010182 	smlabbne	r1, r2, r1, r0
 99c:	00133101 	andseq	r3, r3, r1, lsl #2
 9a0:	01011800 	tsteq	r1, r0, lsl #16
 9a4:	13011349 	movwne	r1, #4937	; 0x1349
 9a8:	21190000 	tstcs	r9, r0
 9ac:	2f134900 	svccs	0x00134900
 9b0:	1a00000b 	bne	9e4 <_start-0x761c>
 9b4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 9b8:	0b3a0e03 	bleq	e841cc <__bss_end__+0xe7a06c>
 9bc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 9c0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 9c4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 9c8:	00130119 	andseq	r0, r3, r9, lsl r1
 9cc:	01151b00 	tsteq	r5, r0, lsl #22
 9d0:	13491927 	movtne	r1, #39207	; 0x9927
 9d4:	00001301 	andeq	r1, r0, r1, lsl #6
 9d8:	4900051c 	stmdbmi	r0, {r2, r3, r4, r8, sl}
 9dc:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
 9e0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 9e4:	0b3a0e03 	bleq	e841f8 <__bss_end__+0xe7a098>
 9e8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 9ec:	01111349 	tsteq	r1, r9, asr #6
 9f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 9f4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 9f8:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
 9fc:	0111010b 	tsteq	r1, fp, lsl #2
 a00:	00000612 	andeq	r0, r0, r2, lsl r6
 a04:	0300341f 	movweq	r3, #1055	; 0x41f
 a08:	3b0b3a0e 	blcc	2cf248 <__bss_end__+0x2c50e8>
 a0c:	3f13490b 	svccc	0x0013490b
 a10:	00193c19 	andseq	r3, r9, r9, lsl ip
 a14:	012e2000 	teqeq	lr, r0
 a18:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 a1c:	0b3b0b3a 	bleq	ec370c <__bss_end__+0xeb95ac>
 a20:	13491927 	movtne	r1, #39207	; 0x9927
 a24:	1301193c 	movwne	r1, #6460	; 0x193c
 a28:	18210000 	stmdane	r1!, {}	; <UNPREDICTABLE>
 a2c:	22000000 	andcs	r0, r0, #0
 a30:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 a34:	0b3a0e03 	bleq	e84248 <__bss_end__+0xe7a0e8>
 a38:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 a3c:	0000193c 	andeq	r1, r0, ip, lsr r9
 a40:	01110100 	tsteq	r1, r0, lsl #2
 a44:	0b130e25 	bleq	4c42e0 <__bss_end__+0x4ba180>
 a48:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 a4c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 a50:	00001710 	andeq	r1, r0, r0, lsl r7
 a54:	0b002402 	bleq	9a64 <__FUNCTION__.4250+0xc8>
 a58:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 a5c:	03000008 	movweq	r0, #8
 a60:	0b0b0024 	bleq	2c0af8 <__bss_end__+0x2b6998>
 a64:	0e030b3e 	vmoveq.16	d3[0], r0
 a68:	0f040000 	svceq	0x00040000
 a6c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 a70:	05000013 	streq	r0, [r0, #-19]
 a74:	13490026 	movtne	r0, #36902	; 0x9026
 a78:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
 a7c:	03193f01 	tsteq	r9, #1, 30
 a80:	3b0b3a0e 	blcc	2cf2c0 <__bss_end__+0x2c5160>
 a84:	1119270b 	tstne	r9, fp, lsl #14
 a88:	40061201 	andmi	r1, r6, r1, lsl #4
 a8c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 a90:	00001301 	andeq	r1, r0, r1, lsl #6
 a94:	01828907 	orreq	r8, r2, r7, lsl #18
 a98:	01011101 	tsteq	r1, r1, lsl #2
 a9c:	08000013 	stmdaeq	r0, {r0, r1, r4}
 aa0:	0001828a 	andeq	r8, r1, sl, lsl #5
 aa4:	42911802 	addsmi	r1, r1, #131072	; 0x20000
 aa8:	09000018 	stmdbeq	r0, {r3, r4}
 aac:	01018289 	smlabbeq	r1, r9, r2, r8
 ab0:	13310111 	teqne	r1, #1073741828	; 0x40000004
 ab4:	00001301 	andeq	r1, r0, r1, lsl #6
 ab8:	0182890a 	orreq	r8, r2, sl, lsl #18
 abc:	31011100 	mrscc	r1, (UNDEF: 17)
 ac0:	0b000013 	bleq	b14 <_start-0x74ec>
 ac4:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 ac8:	13011349 	movwne	r1, #4937	; 0x1349
 acc:	050c0000 	streq	r0, [ip, #-0]
 ad0:	00134900 	andseq	r4, r3, r0, lsl #18
 ad4:	00340d00 	eorseq	r0, r4, r0, lsl #26
 ad8:	0b3a0e03 	bleq	e842ec <__bss_end__+0xe7a18c>
 adc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 ae0:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 ae4:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
 ae8:	03193f01 	tsteq	r9, #1, 30
 aec:	3b0b3a0e 	blcc	2cf32c <__bss_end__+0x2c51cc>
 af0:	3c19270b 	ldccc	7, cr2, [r9], {11}
 af4:	00130119 	andseq	r0, r3, r9, lsl r1
 af8:	002e0f00 	eoreq	r0, lr, r0, lsl #30
 afc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 b00:	0b3b0b3a 	bleq	ec37f0 <__bss_end__+0xeb9690>
 b04:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 b08:	01000000 	mrseq	r0, (UNDEF: 0)
 b0c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 b10:	0e030b13 	vmoveq.32	d3[0], r0
 b14:	01110e1b 	tsteq	r1, fp, lsl lr
 b18:	17100612 			; <UNDEFINED> instruction: 0x17100612
 b1c:	24020000 	strcs	r0, [r2], #-0
 b20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 b24:	0008030b 	andeq	r0, r8, fp, lsl #6
 b28:	00240300 	eoreq	r0, r4, r0, lsl #6
 b2c:	0b3e0b0b 	bleq	f83760 <__bss_end__+0xf79600>
 b30:	00000e03 	andeq	r0, r0, r3, lsl #28
 b34:	3f012e04 	svccc	0x00012e04
 b38:	3a0e0319 	bcc	3817a4 <__bss_end__+0x377644>
 b3c:	110b3b0b 	tstne	fp, fp, lsl #22
 b40:	40061201 	andmi	r1, r6, r1, lsl #4
 b44:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 b48:	00001301 	andeq	r1, r0, r1, lsl #6
 b4c:	03003405 	movweq	r3, #1029	; 0x405
 b50:	3b0b3a0e 	blcc	2cf390 <__bss_end__+0x2c5230>
 b54:	3f13490b 	svccc	0x0013490b
 b58:	00193c19 	andseq	r3, r9, r9, lsl ip
 b5c:	012e0600 	teqeq	lr, r0, lsl #12
 b60:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 b64:	0b3b0b3a 	bleq	ec3854 <__bss_end__+0xeb96f4>
 b68:	1301193c 	movwne	r1, #6460	; 0x193c
 b6c:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
 b70:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 b74:	08030034 	stmdaeq	r3, {r2, r4, r5}
 b78:	0b3b0b3a 	bleq	ec3868 <__bss_end__+0xeb9708>
 b7c:	17021349 	strne	r1, [r2, -r9, asr #6]
 b80:	34090000 	strcc	r0, [r9], #-0
 b84:	3a0e0300 	bcc	38178c <__bss_end__+0x37762c>
 b88:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 b8c:	0a000013 	beq	be0 <_start-0x7420>
 b90:	00018289 	andeq	r8, r1, r9, lsl #5
 b94:	13310111 	teqne	r1, #1073741828	; 0x40000004
 b98:	0f0b0000 	svceq	0x000b0000
 b9c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 ba0:	0c000013 	stceq	0, cr0, [r0], {19}
 ba4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 ba8:	0b3a0e03 	bleq	e843bc <__bss_end__+0xe7a25c>
 bac:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 bb0:	0000193c 	andeq	r1, r0, ip, lsr r9
 bb4:	01110100 	tsteq	r1, r0, lsl #2
 bb8:	0b130e25 	bleq	4c4454 <__bss_end__+0x4ba2f4>
 bbc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 bc0:	01111755 	tsteq	r1, r5, asr r7
 bc4:	00001710 	andeq	r1, r0, r0, lsl r7
 bc8:	0b002402 	bleq	9bd8 <__FUNCTION__.4207+0xb0>
 bcc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 bd0:	03000008 	movweq	r0, #8
 bd4:	0b0b0024 	bleq	2c0c6c <__bss_end__+0x2b6b0c>
 bd8:	0e030b3e 	vmoveq.16	d3[0], r0
 bdc:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
 be0:	03193f01 	tsteq	r9, #1, 30
 be4:	3b0b3a0e 	blcc	2cf424 <__bss_end__+0x2c52c4>
 be8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 bec:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 bf0:	97184006 	ldrls	r4, [r8, -r6]
 bf4:	13011942 	movwne	r1, #6466	; 0x1942
 bf8:	34050000 	strcc	r0, [r5], #-0
 bfc:	3a0e0300 	bcc	381804 <__bss_end__+0x3776a4>
 c00:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 c04:	00170213 	andseq	r0, r7, r3, lsl r2
 c08:	012e0600 	teqeq	lr, r0, lsl #12
 c0c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 c10:	0b3b0b3a 	bleq	ec3900 <__bss_end__+0xeb97a0>
 c14:	01111927 	tsteq	r1, r7, lsr #18
 c18:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 c1c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 c20:	07000013 	smladeq	r0, r3, r0, r0
 c24:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 c28:	0b3b0b3a 	bleq	ec3918 <__bss_end__+0xeb97b8>
 c2c:	061c1349 	ldreq	r1, [ip], -r9, asr #6
 c30:	34080000 	strcc	r0, [r8], #-0
 c34:	3a0e0300 	bcc	38183c <__bss_end__+0x3776dc>
 c38:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 c3c:	000b1c13 	andeq	r1, fp, r3, lsl ip
 c40:	82890900 	addhi	r0, r9, #0, 18
 c44:	01110001 	tsteq	r1, r1
 c48:	00001331 	andeq	r1, r0, r1, lsr r3
 c4c:	0182890a 	orreq	r8, r2, sl, lsl #18
 c50:	31011101 	tstcc	r1, r1, lsl #2
 c54:	00130113 	andseq	r0, r3, r3, lsl r1
 c58:	828a0b00 	addhi	r0, sl, #0, 22
 c5c:	18020001 	stmdane	r2, {r0}
 c60:	00184291 	mulseq	r8, r1, r2
 c64:	82890c00 	addhi	r0, r9, #0, 24
 c68:	01110101 	tsteq	r1, r1, lsl #2
 c6c:	00001331 	andeq	r1, r0, r1, lsr r3
 c70:	4900260d 	stmdbmi	r0, {r0, r2, r3, r9, sl, sp}
 c74:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 c78:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 c7c:	0b3a0e03 	bleq	e84490 <__bss_end__+0xe7a330>
 c80:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 c84:	1301193c 	movwne	r1, #6460	; 0x193c
 c88:	050f0000 	streq	r0, [pc, #-0]	; c90 <_start-0x7370>
 c8c:	00134900 	andseq	r4, r3, r0, lsl #18
 c90:	012e1000 	teqeq	lr, r0
 c94:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 c98:	0b3b0b3a 	bleq	ec3988 <__bss_end__+0xeb9828>
 c9c:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 ca0:	01000000 	mrseq	r0, (UNDEF: 0)
 ca4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 ca8:	0e030b13 	vmoveq.32	d3[0], r0
 cac:	01110e1b 	tsteq	r1, fp, lsl lr
 cb0:	17100612 			; <UNDEFINED> instruction: 0x17100612
 cb4:	24020000 	strcs	r0, [r2], #-0
 cb8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 cbc:	0008030b 	andeq	r0, r8, fp, lsl #6
 cc0:	00240300 	eoreq	r0, r4, r0, lsl #6
 cc4:	0b3e0b0b 	bleq	f838f8 <__bss_end__+0xf79798>
 cc8:	00000e03 	andeq	r0, r0, r3, lsl #28
 ccc:	3f012e04 	svccc	0x00012e04
 cd0:	3a0e0319 	bcc	38193c <__bss_end__+0x3777dc>
 cd4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 cd8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 cdc:	97184006 	ldrls	r4, [r8, -r6]
 ce0:	13011942 	movwne	r1, #6466	; 0x1942
 ce4:	05050000 	streq	r0, [r5, #-0]
 ce8:	3a0e0300 	bcc	3818f0 <__bss_end__+0x377790>
 cec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 cf0:	00170213 	andseq	r0, r7, r3, lsl r2
 cf4:	012e0600 	teqeq	lr, r0, lsl #12
 cf8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 cfc:	0b3b0b3a 	bleq	ec39ec <__bss_end__+0xeb988c>
 d00:	13491927 	movtne	r1, #39207	; 0x9927
 d04:	06120111 			; <UNDEFINED> instruction: 0x06120111
 d08:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 d0c:	00130119 	andseq	r0, r3, r9, lsl r1
 d10:	82890700 	addhi	r0, r9, #0, 14
 d14:	01110101 	tsteq	r1, r1, lsl #2
 d18:	00001331 	andeq	r1, r0, r1, lsr r3
 d1c:	01828a08 	orreq	r8, r2, r8, lsl #20
 d20:	91180200 	tstls	r8, r0, lsl #4
 d24:	00001842 	andeq	r1, r0, r2, asr #16
 d28:	03000509 	movweq	r0, #1289	; 0x509
 d2c:	3b0b3a08 	blcc	2cf554 <__bss_end__+0x2c53f4>
 d30:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 d34:	0a000017 	beq	d98 <_start-0x7268>
 d38:	08030034 	stmdaeq	r3, {r2, r4, r5}
 d3c:	0b3b0b3a 	bleq	ec3a2c <__bss_end__+0xeb98cc>
 d40:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 d44:	0b0b0000 	bleq	2c0d4c <__bss_end__+0x2b6bec>
 d48:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 d4c:	00130106 	andseq	r0, r3, r6, lsl #2
 d50:	00340c00 	eorseq	r0, r4, r0, lsl #24
 d54:	0b3a0803 	bleq	e82d68 <__bss_end__+0xe78c08>
 d58:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 d5c:	00001702 	andeq	r1, r0, r2, lsl #14
 d60:	0182890d 	orreq	r8, r2, sp, lsl #18
 d64:	31011100 	mrscc	r1, (UNDEF: 17)
 d68:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 d6c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 d70:	0b3a0e03 	bleq	e84584 <__bss_end__+0xe7a424>
 d74:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 d78:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 d7c:	050f0000 	streq	r0, [pc, #-0]	; d84 <_start-0x727c>
 d80:	00134900 	andseq	r4, r3, r0, lsl #18
 d84:	11010000 	mrsne	r0, (UNDEF: 1)
 d88:	130e2501 	movwne	r2, #58625	; 0xe501
 d8c:	1b0e030b 	blne	3819c0 <__bss_end__+0x377860>
 d90:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 d94:	00171006 	andseq	r1, r7, r6
 d98:	00240200 	eoreq	r0, r4, r0, lsl #4
 d9c:	0b3e0b0b 	bleq	f839d0 <__bss_end__+0xf79870>
 da0:	00000803 	andeq	r0, r0, r3, lsl #16
 da4:	03001603 	movweq	r1, #1539	; 0x603
 da8:	3b0b3a0e 	blcc	2cf5e8 <__bss_end__+0x2c5488>
 dac:	0013490b 	andseq	r4, r3, fp, lsl #18
 db0:	00240400 	eoreq	r0, r4, r0, lsl #8
 db4:	0b3e0b0b 	bleq	f839e8 <__bss_end__+0xf79888>
 db8:	00000e03 	andeq	r0, r0, r3, lsl #28
 dbc:	0b000f05 	bleq	49d8 <_start-0x3628>
 dc0:	0600000b 	streq	r0, [r0], -fp
 dc4:	0b0b000f 	bleq	2c0e08 <__bss_end__+0x2b6ca8>
 dc8:	00001349 	andeq	r1, r0, r9, asr #6
 dcc:	49002607 	stmdbmi	r0, {r0, r1, r2, r9, sl, sp}
 dd0:	08000013 	stmdaeq	r0, {r0, r1, r4}
 dd4:	13490101 	movtne	r0, #37121	; 0x9101
 dd8:	00001301 	andeq	r1, r0, r1, lsl #6
 ddc:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
 de0:	000b2f13 	andeq	r2, fp, r3, lsl pc
 de4:	012e0a00 	teqeq	lr, r0, lsl #20
 de8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 dec:	0b3b0b3a 	bleq	ec3adc <__bss_end__+0xeb997c>
 df0:	13491927 	movtne	r1, #39207	; 0x9927
 df4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 df8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 dfc:	00130119 	andseq	r0, r3, r9, lsl r1
 e00:	00050b00 	andeq	r0, r5, r0, lsl #22
 e04:	0b3a0e03 	bleq	e84618 <__bss_end__+0xe7a4b8>
 e08:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 e0c:	00001702 	andeq	r1, r0, r2, lsl #14
 e10:	0300340c 	movweq	r3, #1036	; 0x40c
 e14:	3413490e 	ldrcc	r4, [r3], #-2318	; 0x90e
 e18:	00180219 	andseq	r0, r8, r9, lsl r2
 e1c:	00340d00 	eorseq	r0, r4, r0, lsl #26
 e20:	0b3a0e03 	bleq	e84634 <__bss_end__+0xe7a4d4>
 e24:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 e28:	00001802 	andeq	r1, r0, r2, lsl #16
 e2c:	0300340e 	movweq	r3, #1038	; 0x40e
 e30:	3b0b3a0e 	blcc	2cf670 <__bss_end__+0x2c5510>
 e34:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 e38:	0f000017 	svceq	0x00000017
 e3c:	01018289 	smlabbeq	r1, r9, r2, r8
 e40:	13310111 	teqne	r1, #1073741828	; 0x40000004
 e44:	00001301 	andeq	r1, r0, r1, lsl #6
 e48:	01828a10 	orreq	r8, r2, r0, lsl sl
 e4c:	91180200 	tstls	r8, r0, lsl #4
 e50:	00001842 	andeq	r1, r0, r2, asr #16
 e54:	01828911 	orreq	r8, r2, r1, lsl r9
 e58:	31011100 	mrscc	r1, (UNDEF: 17)
 e5c:	12000013 	andne	r0, r0, #19
 e60:	01018289 	smlabbeq	r1, r9, r2, r8
 e64:	13310111 	teqne	r1, #1073741828	; 0x40000004
 e68:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 e6c:	03193f01 	tsteq	r9, #1, 30
 e70:	3b0b3a0e 	blcc	2cf6b0 <__bss_end__+0x2c5550>
 e74:	1119270b 	tstne	r9, fp, lsl #14
 e78:	40061201 	andmi	r1, r6, r1, lsl #4
 e7c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 e80:	00001301 	andeq	r1, r0, r1, lsl #6
 e84:	3f002e14 	svccc	0x00002e14
 e88:	3a0e0319 	bcc	381af4 <__bss_end__+0x377994>
 e8c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 e90:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 e94:	97184006 	ldrls	r4, [r8, -r6]
 e98:	00001942 	andeq	r1, r0, r2, asr #18
 e9c:	3f002e15 	svccc	0x00002e15
 ea0:	3a0e0319 	bcc	381b0c <__bss_end__+0x3779ac>
 ea4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 ea8:	11134919 	tstne	r3, r9, lsl r9
 eac:	40061201 	andmi	r1, r6, r1, lsl #4
 eb0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 eb4:	34160000 	ldrcc	r0, [r6], #-0
 eb8:	3a0e0300 	bcc	381ac0 <__bss_end__+0x377960>
 ebc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 ec0:	3c193f13 	ldccc	15, cr3, [r9], {19}
 ec4:	17000019 	smladne	r0, r9, r0, r0
 ec8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 ecc:	0b3a0e03 	bleq	e846e0 <__bss_end__+0xe7a580>
 ed0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 ed4:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 ed8:	00001301 	andeq	r1, r0, r1, lsl #6
 edc:	49000518 	stmdbmi	r0, {r3, r4, r8, sl}
 ee0:	19000013 	stmdbne	r0, {r0, r1, r4}
 ee4:	00000018 	andeq	r0, r0, r8, lsl r0
 ee8:	3f002e1a 	svccc	0x00002e1a
 eec:	3a0e0319 	bcc	381b58 <__bss_end__+0x3779f8>
 ef0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 ef4:	00193c19 	andseq	r3, r9, r9, lsl ip
 ef8:	012e1b00 	teqeq	lr, r0, lsl #22
 efc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 f00:	0b3b0b3a 	bleq	ec3bf0 <__bss_end__+0xeb9a90>
 f04:	13491927 	movtne	r1, #39207	; 0x9927
 f08:	0000193c 	andeq	r1, r0, ip, lsr r9
 f0c:	01110100 	tsteq	r1, r0, lsl #2
 f10:	0b130e25 	bleq	4c47ac <__bss_end__+0x4ba64c>
 f14:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 f18:	06120111 			; <UNDEFINED> instruction: 0x06120111
 f1c:	00001710 	andeq	r1, r0, r0, lsl r7
 f20:	0b002402 	bleq	9f30 <buf.4133+0x1d8>
 f24:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 f28:	03000008 	movweq	r0, #8
 f2c:	0b0b0024 	bleq	2c0fc4 <__bss_end__+0x2b6e64>
 f30:	0e030b3e 	vmoveq.16	d3[0], r0
 f34:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
 f38:	3a0e0301 	bcc	381b44 <__bss_end__+0x3779e4>
 f3c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 f40:	11134919 	tstne	r3, r9, lsl r9
 f44:	40061201 	andmi	r1, r6, r1, lsl #4
 f48:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 f4c:	00001301 	andeq	r1, r0, r1, lsl #6
 f50:	03000505 	movweq	r0, #1285	; 0x505
 f54:	3b0b3a08 	blcc	2cf77c <__bss_end__+0x2c561c>
 f58:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 f5c:	06000017 			; <UNDEFINED> instruction: 0x06000017
 f60:	01018289 	smlabbeq	r1, r9, r2, r8
 f64:	13310111 	teqne	r1, #1073741828	; 0x40000004
 f68:	8a070000 	bhi	1c0f70 <__bss_end__+0x1b6e10>
 f6c:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
 f70:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
 f74:	15080000 	strne	r0, [r8, #-0]
 f78:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
 f7c:	00130113 	andseq	r0, r3, r3, lsl r1
 f80:	00050900 	andeq	r0, r5, r0, lsl #18
 f84:	00001349 	andeq	r1, r0, r9, asr #6
 f88:	0300340a 	movweq	r3, #1034	; 0x40a
 f8c:	3b0b3a0e 	blcc	2cf7cc <__bss_end__+0x2c566c>
 f90:	3f13490b 	svccc	0x0013490b
 f94:	00180219 	andseq	r0, r8, r9, lsl r2
 f98:	000f0b00 	andeq	r0, pc, r0, lsl #22
 f9c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 fa0:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
 fa4:	03193f01 	tsteq	r9, #1, 30
 fa8:	3b0b3a0e 	blcc	2cf7e8 <__bss_end__+0x2c5688>
 fac:	3c19270b 	ldccc	7, cr2, [r9], {11}
 fb0:	00000019 	andeq	r0, r0, r9, lsl r0

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	00000000 	andeq	r0, r0, r0
       4:	0000000c 	andeq	r0, r0, ip
       8:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
       c:	0f000000 	svceq	0x00000000
      10:	01000000 	mrseq	r0, (UNDEF: 0)
      14:	000f5100 	andeq	r5, pc, r0, lsl #2
      18:	00340000 	eorseq	r0, r4, r0
      1c:	00040000 	andeq	r0, r4, r0
      20:	9f5001f3 	svcls	0x005001f3
	...
      2c:	00000040 	andeq	r0, r0, r0, asr #32
      30:	0000004c 	andeq	r0, r0, ip, asr #32
      34:	9f300002 	svcls	0x00300002
      38:	0000004c 	andeq	r0, r0, ip, asr #32
      3c:	0000007c 	andeq	r0, r0, ip, ror r0
      40:	00540001 	subseq	r0, r4, r1
	...
      4c:	04000000 	streq	r0, [r0], #-0
      50:	01000000 	mrseq	r0, (UNDEF: 0)
      54:	00045000 	andeq	r5, r4, r0
      58:	00080000 	andeq	r0, r8, r0
      5c:	00040000 	andeq	r0, r4, r0
      60:	9f5001f3 	svcls	0x005001f3
	...
      6c:	00000068 	andeq	r0, r0, r8, rrx
      70:	00000074 	andeq	r0, r0, r4, ror r0
      74:	74500001 	ldrbvc	r0, [r0], #-1
      78:	77000000 	strvc	r0, [r0, -r0]
      7c:	01000000 	mrseq	r0, (UNDEF: 0)
      80:	00775100 	rsbseq	r5, r7, r0, lsl #2
      84:	00800000 	addeq	r0, r0, r0
      88:	00040000 	andeq	r0, r4, r0
      8c:	9f5001f3 	svcls	0x005001f3
	...
      98:	00000080 	andeq	r0, r0, r0, lsl #1
      9c:	00000097 	muleq	r0, r7, r0
      a0:	97500001 	ldrbls	r0, [r0, -r1]
      a4:	dc000000 	stcle	0, cr0, [r0], {-0}
      a8:	01000000 	mrseq	r0, (UNDEF: 0)
      ac:	00dc5400 	sbcseq	r5, ip, r0, lsl #8
      b0:	00e00000 	rsceq	r0, r0, r0
      b4:	00010000 	andeq	r0, r1, r0
      b8:	0000e050 	andeq	lr, r0, r0, asr r0
      bc:	0000fc00 	andeq	pc, r0, r0, lsl #24
      c0:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
      cc:	000000fc 	strdeq	r0, [r0], -ip
      d0:	0000010c 	andeq	r0, r0, ip, lsl #2
      d4:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
      d8:	20000001 	andcs	r0, r0, r1
      dc:	04000001 	streq	r0, [r0], #-1
      e0:	5001f300 	andpl	pc, r1, r0, lsl #6
      e4:	0001209f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
      e8:	00012f00 	andeq	r2, r1, r0, lsl #30
      ec:	50000100 	andpl	r0, r0, r0, lsl #2
      f0:	0000012f 	andeq	r0, r0, pc, lsr #2
      f4:	00000150 	andeq	r0, r0, r0, asr r1
      f8:	01f30004 	mvnseq	r0, r4
      fc:	01509f50 	cmpeq	r0, r0, asr pc
     100:	01700000 	cmneq	r0, r0
     104:	00010000 	andeq	r0, r1, r0
     108:	00017050 	andeq	r7, r1, r0, asr r0
     10c:	00018c00 	andeq	r8, r1, r0, lsl #24
     110:	f3000400 	vshl.u8	d0, d0, d0
     114:	009f5001 	addseq	r5, pc, r1
     118:	00000000 	andeq	r0, r0, r0
     11c:	24000000 	strcs	r0, [r0], #-0
     120:	2f000001 	svccs	0x00000001
     124:	01000001 	tsteq	r0, r1
     128:	01505300 	cmpeq	r0, r0, lsl #6
     12c:	01740000 	cmneq	r4, r0
     130:	00010000 	andeq	r0, r1, r0
     134:	00000053 	andeq	r0, r0, r3, asr r0
     138:	00000000 	andeq	r0, r0, r0
     13c:	00019800 	andeq	r9, r1, r0, lsl #16
     140:	0001a400 	andeq	sl, r1, r0, lsl #8
     144:	50000100 	andpl	r0, r0, r0, lsl #2
     148:	000001ac 	andeq	r0, r0, ip, lsr #3
     14c:	000001c8 	andeq	r0, r0, r8, asr #3
     150:	dc500001 	mrrcle	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     154:	0c000001 	stceq	0, cr0, [r0], {1}
     158:	01000002 	tsteq	r0, r2
     15c:	00005000 	andeq	r5, r0, r0
     160:	00000000 	andeq	r0, r0, r0
     164:	021c0000 	andseq	r0, ip, #0
     168:	022b0000 	eoreq	r0, fp, #0
     16c:	00010000 	andeq	r0, r1, r0
     170:	00022b50 	andeq	r2, r2, r0, asr fp
     174:	00026800 	andeq	r6, r2, r0, lsl #16
     178:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     184:	0000021c 	andeq	r0, r0, ip, lsl r2
     188:	0000022b 	andeq	r0, r0, fp, lsr #4
     18c:	2b510001 	blcs	1440198 <__bss_end__+0x1436038>
     190:	68000002 	stmdavs	r0, {r1}
     194:	01000002 	tsteq	r0, r2
     198:	00005500 	andeq	r5, r0, r0, lsl #10
     19c:	00000000 	andeq	r0, r0, r0
     1a0:	02300000 	eorseq	r0, r0, #0
     1a4:	02500000 	subseq	r0, r0, #0
     1a8:	00010000 	andeq	r0, r1, r0
     1ac:	00025050 	andeq	r5, r2, r0, asr r0
     1b0:	00026800 	andeq	r6, r2, r0, lsl #16
     1b4:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     1c0:	00000268 	andeq	r0, r0, r8, ror #4
     1c4:	00000278 	andeq	r0, r0, r8, ror r2
     1c8:	78500001 	ldmdavc	r0, {r0}^
     1cc:	c0000002 	andgt	r0, r0, r2
     1d0:	04000002 	streq	r0, [r0], #-2
     1d4:	5001f300 	andpl	pc, r1, r0, lsl #6
     1d8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     1dc:	00000000 	andeq	r0, r0, r0
     1e0:	00032800 	andeq	r2, r3, r0, lsl #16
     1e4:	00032c00 	andeq	r2, r3, r0, lsl #24
     1e8:	50000100 	andpl	r0, r0, r0, lsl #2
     1ec:	0000032c 	andeq	r0, r0, ip, lsr #6
     1f0:	00000388 	andeq	r0, r0, r8, lsl #7
     1f4:	00550001 	subseq	r0, r5, r1
     1f8:	00000000 	andeq	r0, r0, r0
     1fc:	30000000 	andcc	r0, r0, r0
     200:	54000003 	strpl	r0, [r0], #-3
     204:	01000003 	tsteq	r0, r3
     208:	03545000 	cmpeq	r4, #0
     20c:	03630000 	cmneq	r3, #0
     210:	00020000 	andeq	r0, r2, r0
     214:	03686491 	cmneq	r8, #-1862270976	; 0x91000000
     218:	036c0000 	cmneq	ip, #0
     21c:	00010000 	andeq	r0, r1, r0
     220:	00000050 	andeq	r0, r0, r0, asr r0
     224:	00000000 	andeq	r0, r0, r0
     228:	00033400 	andeq	r3, r3, r0, lsl #8
     22c:	00036000 	andeq	r6, r3, r0
     230:	53000100 	movwpl	r0, #256	; 0x100
     234:	00000360 	andeq	r0, r0, r0, ror #6
     238:	00000363 	andeq	r0, r0, r3, ror #6
     23c:	5c910002 	ldcpl	0, cr0, [r1], {2}
     240:	00000368 	andeq	r0, r0, r8, ror #6
     244:	0000036f 	andeq	r0, r0, pc, ror #6
     248:	00530001 	subseq	r0, r3, r1
     24c:	00000000 	andeq	r0, r0, r0
     250:	1c000000 	stcne	0, cr0, [r0], {-0}
     254:	24000004 	strcs	r0, [r0], #-4
     258:	01000004 	tsteq	r0, r4
     25c:	04245000 	strteq	r5, [r4], #-0
     260:	04440000 	strbeq	r0, [r4], #-0
     264:	00040000 	andeq	r0, r4, r0
     268:	9f5001f3 	svcls	0x005001f3
	...
     274:	00000444 	andeq	r0, r0, r4, asr #8
     278:	0000044c 	andeq	r0, r0, ip, asr #8
     27c:	4c500001 	mrrcmi	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     280:	6c000004 	stcvs	0, cr0, [r0], {4}
     284:	04000004 	streq	r0, [r0], #-4
     288:	5001f300 	andpl	pc, r1, r0, lsl #6
     28c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     298:	00005400 	andeq	r5, r0, r0, lsl #8
     29c:	50000100 	andpl	r0, r0, r0, lsl #2
     2a0:	00000054 	andeq	r0, r0, r4, asr r0
     2a4:	00000080 	andeq	r0, r0, r0, lsl #1
     2a8:	01f30004 	mvnseq	r0, r4
     2ac:	00009f50 	andeq	r9, r0, r0, asr pc
     2b0:	00000000 	andeq	r0, r0, r0
     2b4:	00180000 	andseq	r0, r8, r0
     2b8:	00540000 	subseq	r0, r4, r0
     2bc:	00010000 	andeq	r0, r1, r0
     2c0:	00005450 	andeq	r5, r0, r0, asr r4
     2c4:	00008000 	andeq	r8, r0, r0
     2c8:	f3000400 	vshl.u8	d0, d0, d0
     2cc:	009f5001 	addseq	r5, pc, r1
     2d0:	00000000 	andeq	r0, r0, r0
     2d4:	2c000000 	stccs	0, cr0, [r0], {-0}
     2d8:	54000000 	strpl	r0, [r0], #-0
     2dc:	01000000 	mrseq	r0, (UNDEF: 0)
     2e0:	00545000 	subseq	r5, r4, r0
     2e4:	00800000 	addeq	r0, r0, r0
     2e8:	00040000 	andeq	r0, r4, r0
     2ec:	9f5001f3 	svcls	0x005001f3
	...
     2f8:	00000080 	andeq	r0, r0, r0, lsl #1
     2fc:	0000009c 	muleq	r0, ip, r0
     300:	9c500001 	mrrcls	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     304:	c0000000 	andgt	r0, r0, r0
     308:	04000000 	streq	r0, [r0], #-0
     30c:	5001f300 	andpl	pc, r1, r0, lsl #6
     310:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     314:	00000000 	andeq	r0, r0, r0
     318:	0000c000 	andeq	ip, r0, r0
     31c:	0000d700 	andeq	sp, r0, r0, lsl #14
     320:	50000100 	andpl	r0, r0, r0, lsl #2
     324:	000000d7 	ldrdeq	r0, [r0], -r7
     328:	00000264 	andeq	r0, r0, r4, ror #4
     32c:	00540001 	subseq	r0, r4, r1
     330:	00000000 	andeq	r0, r0, r0
     334:	c0000000 	andgt	r0, r0, r0
     338:	d0000000 	andle	r0, r0, r0
     33c:	01000000 	mrseq	r0, (UNDEF: 0)
     340:	00d05100 	sbcseq	r5, r0, r0, lsl #2
     344:	010c0000 	mrseq	r0, (UNDEF: 12)
     348:	00010000 	andeq	r0, r1, r0
     34c:	00010c55 	andeq	r0, r1, r5, asr ip
     350:	00026400 	andeq	r6, r2, r0, lsl #8
     354:	f3000400 	vshl.u8	d0, d0, d0
     358:	009f5101 	addseq	r5, pc, r1, lsl #2
     35c:	00000000 	andeq	r0, r0, r0
     360:	ac000000 	stcge	0, cr0, [r0], {-0}
     364:	d4000001 	strle	r0, [r0], #-1
     368:	02000001 	andeq	r0, r0, #1
     36c:	d49f4200 	ldrle	r4, [pc], #512	; 374 <_start-0x7c8c>
     370:	ec000001 	stc	0, cr0, [r0], {1}
     374:	01000001 	tsteq	r0, r1
     378:	01ec5100 	mvneq	r5, r0, lsl #2
     37c:	01f40000 	mvnseq	r0, r0
     380:	00020000 	andeq	r0, r2, r0
     384:	01f49f42 	mvnseq	r9, r2, asr #30
     388:	02240000 	eoreq	r0, r4, #0
     38c:	00010000 	andeq	r0, r1, r0
     390:	00000051 	andeq	r0, r0, r1, asr r0
     394:	00000000 	andeq	r0, r0, r0
     398:	0001cc00 	andeq	ip, r1, r0, lsl #24
     39c:	0001d800 	andeq	sp, r1, r0, lsl #16
     3a0:	52000100 	andpl	r0, r0, #0, 2
     3a4:	000001d8 	ldrdeq	r0, [r0], -r8
     3a8:	000001dc 	ldrdeq	r0, [r0], -ip
     3ac:	7f720003 	svcvc	0x00720003
     3b0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     3b4:	00000000 	andeq	r0, r0, r0
     3b8:	00026400 	andeq	r6, r2, r0, lsl #8
     3bc:	00027c00 	andeq	r7, r2, r0, lsl #24
     3c0:	50000100 	andpl	r0, r0, r0, lsl #2
     3c4:	0000027c 	andeq	r0, r0, ip, ror r2
     3c8:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     3cc:	00530001 	subseq	r0, r3, r1
     3d0:	00000000 	andeq	r0, r0, r0
     3d4:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
     3d8:	b0000002 	andlt	r0, r0, r2
     3dc:	01000002 	tsteq	r0, r2
     3e0:	00005500 	andeq	r5, r0, r0, lsl #10
     3e4:	00000000 	andeq	r0, r0, r0
     3e8:	02900000 	addseq	r0, r0, #0
     3ec:	029c0000 	addseq	r0, ip, #0
     3f0:	00010000 	andeq	r0, r1, r0
     3f4:	00029c51 	andeq	r9, r2, r1, asr ip
     3f8:	0002a000 	andeq	sl, r2, r0
     3fc:	71000300 	mrsvc	r0, LR_irq
     400:	00009f7f 	andeq	r9, r0, pc, ror pc
     404:	00000000 	andeq	r0, r0, r0
     408:	02d00000 	sbcseq	r0, r0, #0
     40c:	02e80000 	rsceq	r0, r8, #0
     410:	00010000 	andeq	r0, r1, r0
     414:	0002e850 	andeq	lr, r2, r0, asr r8
     418:	00030400 	andeq	r0, r3, r0, lsl #8
     41c:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
     428:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     42c:	000002e8 	andeq	r0, r0, r8, ror #5
     430:	e8510001 	ldmda	r1, {r0}^
     434:	04000002 	streq	r0, [r0], #-2
     438:	01000003 	tsteq	r0, r3
     43c:	00005600 	andeq	r5, r0, r0, lsl #12
     440:	00000000 	andeq	r0, r0, r0
     444:	02d00000 	sbcseq	r0, r0, #0
     448:	02e80000 	rsceq	r0, r8, #0
     44c:	00010000 	andeq	r0, r1, r0
     450:	0002e852 	andeq	lr, r2, r2, asr r8
     454:	00030400 	andeq	r0, r3, r0, lsl #8
     458:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
     464:	000002e0 	andeq	r0, r0, r0, ror #5
     468:	000002e8 	andeq	r0, r0, r8, ror #5
     46c:	e8510001 	ldmda	r1, {r0}^
     470:	04000002 	streq	r0, [r0], #-2
     474:	01000003 	tsteq	r0, r3
     478:	00005600 	andeq	r5, r0, r0, lsl #12
     47c:	00000000 	andeq	r0, r0, r0
     480:	02e00000 	rsceq	r0, r0, #0
     484:	02e80000 	rsceq	r0, r8, #0
     488:	00020000 	andeq	r0, r2, r0
     48c:	02e89f30 	rsceq	r9, r8, #48, 30	; 0xc0
     490:	03040000 	movweq	r0, #16384	; 0x4000
     494:	00010000 	andeq	r0, r1, r0
     498:	00000054 	andeq	r0, r0, r4, asr r0
     49c:	00000000 	andeq	r0, r0, r0
     4a0:	00030400 	andeq	r0, r3, r0, lsl #8
     4a4:	00031700 	andeq	r1, r3, r0, lsl #14
     4a8:	50000100 	andpl	r0, r0, r0, lsl #2
     4ac:	00000317 	andeq	r0, r0, r7, lsl r3
     4b0:	0000035c 	andeq	r0, r0, ip, asr r3
     4b4:	00540001 	subseq	r0, r4, r1
     4b8:	00000000 	andeq	r0, r0, r0
     4bc:	04000000 	streq	r0, [r0], #-0
     4c0:	17000003 	strne	r0, [r0, -r3]
     4c4:	01000003 	tsteq	r0, r3
     4c8:	03175100 	tsteq	r7, #0, 2
     4cc:	035c0000 	cmpeq	ip, #0
     4d0:	00010000 	andeq	r0, r1, r0
     4d4:	00000056 	andeq	r0, r0, r6, asr r0
     4d8:	00000000 	andeq	r0, r0, r0
     4dc:	00030400 	andeq	r0, r3, r0, lsl #8
     4e0:	00031700 	andeq	r1, r3, r0, lsl #14
     4e4:	52000100 	andpl	r0, r0, #0, 2
     4e8:	00000317 	andeq	r0, r0, r7, lsl r3
     4ec:	0000035c 	andeq	r0, r0, ip, asr r3
     4f0:	00550001 	subseq	r0, r5, r1
     4f4:	00000000 	andeq	r0, r0, r0
     4f8:	5c000000 	stcpl	0, cr0, [r0], {-0}
     4fc:	93000003 	movwls	r0, #3
     500:	01000003 	tsteq	r0, r3
     504:	03935000 	orrseq	r5, r3, #0
     508:	03d80000 	bicseq	r0, r8, #0
     50c:	00010000 	andeq	r0, r1, r0
     510:	0003d854 	andeq	sp, r3, r4, asr r8
     514:	0003dc00 	andeq	sp, r3, r0, lsl #24
     518:	50000100 	andpl	r0, r0, r0, lsl #2
     51c:	000003dc 	ldrdeq	r0, [r0], -ip
     520:	000003fc 	strdeq	r0, [r0], -ip
     524:	00540001 	subseq	r0, r4, r1
     528:	00000000 	andeq	r0, r0, r0
     52c:	5c000000 	stcpl	0, cr0, [r0], {-0}
     530:	93000003 	movwls	r0, #3
     534:	01000003 	tsteq	r0, r3
     538:	03935100 	orrseq	r5, r3, #0, 2
     53c:	03d80000 	bicseq	r0, r8, #0
     540:	00040000 	andeq	r0, r4, r0
     544:	9f5101f3 	svcls	0x005101f3
     548:	000003d8 	ldrdeq	r0, [r0], -r8
     54c:	000003e0 	andeq	r0, r0, r0, ror #7
     550:	e0510001 	subs	r0, r1, r1
     554:	fc000003 	stc2	0, cr0, [r0], {3}
     558:	04000003 	streq	r0, [r0], #-3
     55c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     560:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     564:	00000000 	andeq	r0, r0, r0
     568:	00035c00 	andeq	r5, r3, r0, lsl #24
     56c:	00039300 	andeq	r9, r3, r0, lsl #6
     570:	52000100 	andpl	r0, r0, #0, 2
     574:	00000393 	muleq	r0, r3, r3
     578:	000003d8 	ldrdeq	r0, [r0], -r8
     57c:	01f30004 	mvnseq	r0, r4
     580:	03d89f52 	bicseq	r9, r8, #328	; 0x148
     584:	03e00000 	mvneq	r0, #0
     588:	00010000 	andeq	r0, r1, r0
     58c:	0003e052 	andeq	lr, r3, r2, asr r0
     590:	0003fc00 	andeq	pc, r3, r0, lsl #24
     594:	f3000400 	vshl.u8	d0, d0, d0
     598:	009f5201 	addseq	r5, pc, r1, lsl #4
     59c:	00000000 	andeq	r0, r0, r0
     5a0:	90000000 	andls	r0, r0, r0
     5a4:	d8000003 	stmdale	r0, {r0, r1}
     5a8:	01000003 	tsteq	r0, r3
     5ac:	03e05600 	mvneq	r5, #0, 12
     5b0:	03fc0000 	mvnseq	r0, #0
     5b4:	00010000 	andeq	r0, r1, r0
     5b8:	00000056 	andeq	r0, r0, r6, asr r0
     5bc:	00000000 	andeq	r0, r0, r0
     5c0:	00036400 	andeq	r6, r3, r0, lsl #8
     5c4:	00039300 	andeq	r9, r3, r0, lsl #6
     5c8:	50000100 	andpl	r0, r0, r0, lsl #2
     5cc:	00000393 	muleq	r0, r3, r3
     5d0:	000003d8 	ldrdeq	r0, [r0], -r8
     5d4:	d8540001 	ldmdale	r4, {r0}^
     5d8:	dc000003 	stcle	0, cr0, [r0], {3}
     5dc:	01000003 	tsteq	r0, r3
     5e0:	03dc5000 	bicseq	r5, ip, #0
     5e4:	03fc0000 	mvnseq	r0, #0
     5e8:	00010000 	andeq	r0, r1, r0
     5ec:	00000054 	andeq	r0, r0, r4, asr r0
     5f0:	00000000 	andeq	r0, r0, r0
     5f4:	0003a400 	andeq	sl, r3, r0, lsl #8
     5f8:	0003d800 	andeq	sp, r3, r0, lsl #16
     5fc:	54000100 	strpl	r0, [r0], #-256	; 0x100
     600:	000003e0 	andeq	r0, r0, r0, ror #7
     604:	000003fc 	strdeq	r0, [r0], -ip
     608:	00540001 	subseq	r0, r4, r1
     60c:	00000000 	andeq	r0, r0, r0
     610:	fc000000 	stc2	0, cr0, [r0], {-0}
     614:	90000003 	andls	r0, r0, r3
     618:	01000004 	tsteq	r0, r4
     61c:	04905000 	ldreq	r5, [r0], #0
     620:	04a40000 	strteq	r0, [r4], #0
     624:	00040000 	andeq	r0, r4, r0
     628:	9f5001f3 	svcls	0x005001f3
     62c:	000004a4 	andeq	r0, r0, r4, lsr #9
     630:	000004d4 	ldrdeq	r0, [r0], -r4
     634:	d4500001 	ldrble	r0, [r0], #-1
     638:	e8000004 	stmda	r0, {r2}
     63c:	04000004 	streq	r0, [r0], #-4
     640:	5001f300 	andpl	pc, r1, r0, lsl #6
     644:	0004e89f 	muleq	r4, pc, r8	; <UNPREDICTABLE>
     648:	0004ec00 	andeq	lr, r4, r0, lsl #24
     64c:	50000100 	andpl	r0, r0, r0, lsl #2
     650:	000004ec 	andeq	r0, r0, ip, ror #9
     654:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     658:	01f30004 	mvnseq	r0, r4
     65c:	04f09f50 	ldrbteq	r9, [r0], #3920	; 0xf50
     660:	04f40000 	ldrbteq	r0, [r4], #0
     664:	00010000 	andeq	r0, r1, r0
     668:	0004f450 	andeq	pc, r4, r0, asr r4	; <UNPREDICTABLE>
     66c:	0004f800 	andeq	pc, r4, r0, lsl #16
     670:	f3000400 	vshl.u8	d0, d0, d0
     674:	f89f5001 			; <UNDEFINED> instruction: 0xf89f5001
     678:	fc000004 	stc2	0, cr0, [r0], {4}
     67c:	01000004 	tsteq	r0, r4
     680:	04fc5000 	ldrbteq	r5, [ip], #0
     684:	05180000 	ldreq	r0, [r8, #-0]
     688:	00040000 	andeq	r0, r4, r0
     68c:	9f5001f3 	svcls	0x005001f3
	...
     698:	000003fc 	strdeq	r0, [r0], -ip
     69c:	00000494 	muleq	r0, r4, r4
     6a0:	94510001 	ldrbls	r0, [r1], #-1
     6a4:	a4000004 	strge	r0, [r0], #-4
     6a8:	04000004 	streq	r0, [r0], #-4
     6ac:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     6b0:	0004a49f 	muleq	r4, pc, r4	; <UNPREDICTABLE>
     6b4:	0004d800 	andeq	sp, r4, r0, lsl #16
     6b8:	51000100 	mrspl	r0, (UNDEF: 16)
     6bc:	000004d8 	ldrdeq	r0, [r0], -r8
     6c0:	000004e8 	andeq	r0, r0, r8, ror #9
     6c4:	01f30004 	mvnseq	r0, r4
     6c8:	04e89f51 	strbteq	r9, [r8], #3921	; 0xf51
     6cc:	05180000 	ldreq	r0, [r8, #-0]
     6d0:	00010000 	andeq	r0, r1, r0
     6d4:	00000051 	andeq	r0, r0, r1, asr r0
     6d8:	00000000 	andeq	r0, r0, r0
     6dc:	0003fc00 	andeq	pc, r3, r0, lsl #24
     6e0:	00049800 	andeq	r9, r4, r0, lsl #16
     6e4:	52000100 	andpl	r0, r0, #0, 2
     6e8:	00000498 	muleq	r0, r8, r4
     6ec:	000004a4 	andeq	r0, r0, r4, lsr #9
     6f0:	01f30004 	mvnseq	r0, r4
     6f4:	04a49f52 	strteq	r9, [r4], #3922	; 0xf52
     6f8:	04c00000 	strbeq	r0, [r0], #0
     6fc:	00010000 	andeq	r0, r1, r0
     700:	0004c052 	andeq	ip, r4, r2, asr r0
     704:	0004e800 	andeq	lr, r4, r0, lsl #16
     708:	f3000400 	vshl.u8	d0, d0, d0
     70c:	e89f5201 	ldm	pc, {r0, r9, ip, lr}	; <UNPREDICTABLE>
     710:	f8000004 			; <UNDEFINED> instruction: 0xf8000004
     714:	01000004 	tsteq	r0, r4
     718:	04f85200 	ldrbteq	r5, [r8], #512	; 0x200
     71c:	05180000 	ldreq	r0, [r8, #-0]
     720:	00040000 	andeq	r0, r4, r0
     724:	9f5201f3 	svcls	0x005201f3
	...
     730:	00000400 	andeq	r0, r0, r0, lsl #8
     734:	00000494 	muleq	r0, r4, r4
     738:	94510001 	ldrbls	r0, [r1], #-1
     73c:	a4000004 	strge	r0, [r0], #-4
     740:	04000004 	streq	r0, [r0], #-4
     744:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     748:	0004a49f 	muleq	r4, pc, r4	; <UNPREDICTABLE>
     74c:	0004d800 	andeq	sp, r4, r0, lsl #16
     750:	51000100 	mrspl	r0, (UNDEF: 16)
     754:	000004d8 	ldrdeq	r0, [r0], -r8
     758:	000004e8 	andeq	r0, r0, r8, ror #9
     75c:	01f30004 	mvnseq	r0, r4
     760:	04e89f51 	strbteq	r9, [r8], #3921	; 0xf51
     764:	05180000 	ldreq	r0, [r8, #-0]
     768:	00010000 	andeq	r0, r1, r0
     76c:	00000051 	andeq	r0, r0, r1, asr r0
     770:	00000000 	andeq	r0, r0, r0
     774:	00040000 	andeq	r0, r4, r0
     778:	00049000 	andeq	r9, r4, r0
     77c:	50000100 	andpl	r0, r0, r0, lsl #2
     780:	00000490 	muleq	r0, r0, r4
     784:	000004a4 	andeq	r0, r0, r4, lsr #9
     788:	01f30004 	mvnseq	r0, r4
     78c:	04a49f50 	strteq	r9, [r4], #3920	; 0xf50
     790:	04d40000 	ldrbeq	r0, [r4], #0
     794:	00010000 	andeq	r0, r1, r0
     798:	0004d450 	andeq	sp, r4, r0, asr r4
     79c:	0004e800 	andeq	lr, r4, r0, lsl #16
     7a0:	f3000400 	vshl.u8	d0, d0, d0
     7a4:	e89f5001 	ldm	pc, {r0, ip, lr}	; <UNPREDICTABLE>
     7a8:	ec000004 	stc	0, cr0, [r0], {4}
     7ac:	01000004 	tsteq	r0, r4
     7b0:	04ec5000 	strbteq	r5, [ip], #0
     7b4:	04f00000 	ldrbteq	r0, [r0], #0
     7b8:	00040000 	andeq	r0, r4, r0
     7bc:	9f5001f3 	svcls	0x005001f3
     7c0:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     7c4:	000004f4 	strdeq	r0, [r0], -r4
     7c8:	f4500001 			; <UNDEFINED> instruction: 0xf4500001
     7cc:	f8000004 			; <UNDEFINED> instruction: 0xf8000004
     7d0:	04000004 	streq	r0, [r0], #-4
     7d4:	5001f300 	andpl	pc, r1, r0, lsl #6
     7d8:	0004f89f 	muleq	r4, pc, r8	; <UNPREDICTABLE>
     7dc:	0004fc00 	andeq	pc, r4, r0, lsl #24
     7e0:	50000100 	andpl	r0, r0, r0, lsl #2
     7e4:	000004fc 	strdeq	r0, [r0], -ip
     7e8:	00000518 	andeq	r0, r0, r8, lsl r5
     7ec:	01f30004 	mvnseq	r0, r4
     7f0:	00009f50 	andeq	r9, r0, r0, asr pc
     7f4:	00000000 	andeq	r0, r0, r0
     7f8:	04400000 	strbeq	r0, [r0], #-0
     7fc:	049c0000 	ldreq	r0, [ip], #0
     800:	00010000 	andeq	r0, r1, r0
     804:	0004a453 	andeq	sl, r4, r3, asr r4
     808:	0004bc00 	andeq	fp, r4, r0, lsl #24
     80c:	53000100 	movwpl	r0, #256	; 0x100
     810:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     814:	000004f8 	strdeq	r0, [r0], -r8
     818:	00530001 	subseq	r0, r3, r1
     81c:	00000000 	andeq	r0, r0, r0
     820:	44000000 	strmi	r0, [r0], #-0
     824:	68000004 	stmdavs	r0, {r2}
     828:	05000004 	streq	r0, [r0, #-4]
     82c:	73007100 	movwvc	r7, #256	; 0x100
     830:	04682200 	strbteq	r2, [r8], #-512	; 0x200
     834:	04800000 	streq	r0, [r0], #0
     838:	00010000 	andeq	r0, r1, r0
     83c:	0004805a 	andeq	r8, r4, sl, asr r0
     840:	00048400 	andeq	r8, r4, r0, lsl #8
     844:	71000500 	tstvc	r0, r0, lsl #10
     848:	22007300 	andcs	r7, r0, #0, 6
     84c:	00000484 	andeq	r0, r0, r4, lsl #9
     850:	000004a8 	andeq	r0, r0, r8, lsr #9
     854:	005a0001 	subseq	r0, sl, r1
     858:	00000000 	andeq	r0, r0, r0
     85c:	44000000 	strmi	r0, [r0], #-0
     860:	90000004 	andls	r0, r0, r4
     864:	01000004 	tsteq	r0, r4
     868:	04905000 	ldreq	r5, [r0], #0
     86c:	04a40000 	strteq	r0, [r4], #0
     870:	00040000 	andeq	r0, r4, r0
     874:	9f5001f3 	svcls	0x005001f3
     878:	000004a4 	andeq	r0, r0, r4, lsr #9
     87c:	000004a8 	andeq	r0, r0, r8, lsr #9
     880:	00500001 	subseq	r0, r0, r1
     884:	00000000 	andeq	r0, r0, r0
     888:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     88c:	6c000004 	stcvs	0, cr0, [r0], {4}
     890:	01000004 	tsteq	r0, r4
     894:	046c5400 	strbteq	r5, [ip], #-1024	; 0x400
     898:	04700000 	ldrbteq	r0, [r0], #-0
     89c:	00030000 	andeq	r0, r3, r0
     8a0:	809f7f74 	addshi	r7, pc, r4, ror pc	; <UNPREDICTABLE>
     8a4:	84000004 	strhi	r0, [r0], #-4
     8a8:	01000004 	tsteq	r0, r4
     8ac:	00005400 	andeq	r5, r0, r0, lsl #8
     8b0:	00000000 	andeq	r0, r0, r0
     8b4:	044c0000 	strbeq	r0, [ip], #-0
     8b8:	04900000 	ldreq	r0, [r0], #0
     8bc:	00010000 	andeq	r0, r1, r0
     8c0:	00049050 	andeq	r9, r4, r0, asr r0
     8c4:	0004a400 	andeq	sl, r4, r0, lsl #8
     8c8:	f3000400 	vshl.u8	d0, d0, d0
     8cc:	a49f5001 	ldrge	r5, [pc], #1	; 8d4 <_start-0x772c>
     8d0:	a8000004 	stmdage	r0, {r2}
     8d4:	01000004 	tsteq	r0, r4
     8d8:	00005000 	andeq	r5, r0, r0
     8dc:	00000000 	andeq	r0, r0, r0
     8e0:	04b80000 	ldrteq	r0, [r8], #0
     8e4:	04d40000 	ldrbeq	r0, [r4], #0
     8e8:	00010000 	andeq	r0, r1, r0
     8ec:	0004d450 	andeq	sp, r4, r0, asr r4
     8f0:	0004e800 	andeq	lr, r4, r0, lsl #16
     8f4:	f3000400 	vshl.u8	d0, d0, d0
     8f8:	f89f5001 			; <UNDEFINED> instruction: 0xf89f5001
     8fc:	fc000004 	stc2	0, cr0, [r0], {4}
     900:	01000004 	tsteq	r0, r4
     904:	04fc5000 	ldrbteq	r5, [ip], #0
     908:	05180000 	ldreq	r0, [r8, #-0]
     90c:	00040000 	andeq	r0, r4, r0
     910:	9f5001f3 	svcls	0x005001f3
	...
     920:	00000004 	andeq	r0, r0, r4
     924:	04520001 	ldrbeq	r0, [r2], #-1
     928:	20000000 	andcs	r0, r0, r0
     92c:	04000000 	streq	r0, [r0], #-0
     930:	5201f300 	andpl	pc, r1, #0, 6
     934:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     940:	00000c00 	andeq	r0, r0, r0, lsl #24
     944:	50000100 	andpl	r0, r0, r0, lsl #2
     948:	0000000c 	andeq	r0, r0, ip
     94c:	00000014 	andeq	r0, r0, r4, lsl r0
     950:	01730003 	cmneq	r3, r3
     954:	0000149f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
     958:	00002000 	andeq	r2, r0, r0
     95c:	53000100 	movwpl	r0, #256	; 0x100
	...
     968:	0000002c 	andeq	r0, r0, ip, lsr #32
     96c:	00000038 	andeq	r0, r0, r8, lsr r0
     970:	38500001 	ldmdacc	r0, {r0}^
     974:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     978:	01000000 	mrseq	r0, (UNDEF: 0)
     97c:	00485500 	subeq	r5, r8, r0, lsl #10
     980:	00580000 	subseq	r0, r8, r0
     984:	00010000 	andeq	r0, r1, r0
     988:	00000050 	andeq	r0, r0, r0, asr r0
	...
     994:	00001000 	andeq	r1, r0, r0
     998:	50000100 	andpl	r0, r0, r0, lsl #2
     99c:	00000010 	andeq	r0, r0, r0, lsl r0
     9a0:	00000034 	andeq	r0, r0, r4, lsr r0
     9a4:	00540001 	subseq	r0, r4, r1
	...
     9b0:	04000000 	streq	r0, [r0], #-0
     9b4:	01000000 	mrseq	r0, (UNDEF: 0)
     9b8:	00045000 	andeq	r5, r4, r0
     9bc:	000c0000 	andeq	r0, ip, r0
     9c0:	00030000 	andeq	r0, r3, r0
     9c4:	0c9f3070 	ldceq	0, cr3, [pc], {112}	; 0x70
     9c8:	14000000 	strne	r0, [r0], #-0
     9cc:	04000000 	streq	r0, [r0], #-0
     9d0:	5001f300 	andpl	pc, r1, r0, lsl #6
     9d4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     9d8:	00000000 	andeq	r0, r0, r0
     9dc:	00001400 	andeq	r1, r0, r0, lsl #8
     9e0:	00002000 	andeq	r2, r0, r0
     9e4:	50000100 	andpl	r0, r0, r0, lsl #2
     9e8:	00000020 	andeq	r0, r0, r0, lsr #32
     9ec:	0000002c 	andeq	r0, r0, ip, lsr #32
     9f0:	01700003 	cmneq	r0, r3
     9f4:	00002c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
     9f8:	00004000 	andeq	r4, r0, r0
     9fc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     a08:	00000014 	andeq	r0, r0, r4, lsl r0
     a0c:	00000018 	andeq	r0, r0, r8, lsl r0
     a10:	18510001 	ldmdane	r1, {r0}^
     a14:	40000000 	andmi	r0, r0, r0
     a18:	04000000 	streq	r0, [r0], #-0
     a1c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     a20:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     a24:	00000000 	andeq	r0, r0, r0
     a28:	00004000 	andeq	r4, r0, r0
     a2c:	00006000 	andeq	r6, r0, r0
     a30:	50000100 	andpl	r0, r0, r0, lsl #2
     a34:	00000060 	andeq	r0, r0, r0, rrx
     a38:	0000006c 	andeq	r0, r0, ip, rrx
     a3c:	01710003 	cmneq	r1, r3
     a40:	00006c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
     a44:	00007400 	andeq	r7, r0, r0, lsl #8
     a48:	51000100 	mrspl	r0, (UNDEF: 16)
     a4c:	00000074 	andeq	r0, r0, r4, ror r0
     a50:	00000080 	andeq	r0, r0, r0, lsl #1
     a54:	01710003 	cmneq	r1, r3
     a58:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     a5c:	00000000 	andeq	r0, r0, r0
     a60:	00004000 	andeq	r4, r0, r0
     a64:	00005000 	andeq	r5, r0, r0
     a68:	51000100 	mrspl	r0, (UNDEF: 16)
     a6c:	00000050 	andeq	r0, r0, r0, asr r0
     a70:	00000080 	andeq	r0, r0, r0, lsl #1
     a74:	01f30004 	mvnseq	r0, r4
     a78:	00009f51 	andeq	r9, r0, r1, asr pc
     a7c:	00000000 	andeq	r0, r0, r0
     a80:	00400000 	subeq	r0, r0, r0
     a84:	00580000 	subseq	r0, r8, r0
     a88:	00010000 	andeq	r0, r1, r0
     a8c:	00005852 	andeq	r5, r0, r2, asr r8
     a90:	00006400 	andeq	r6, r0, r0, lsl #8
     a94:	52000100 	andpl	r0, r0, #0, 2
     a98:	00000064 	andeq	r0, r0, r4, rrx
     a9c:	00000068 	andeq	r0, r0, r8, rrx
     aa0:	01720003 	cmneq	r2, r3
     aa4:	0000689f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
     aa8:	00008000 	andeq	r8, r0, r0
     aac:	52000100 	andpl	r0, r0, #0, 2
	...
     ab8:	00000040 	andeq	r0, r0, r0, asr #32
     abc:	00000054 	andeq	r0, r0, r4, asr r0
     ac0:	54530001 	ldrbpl	r0, [r3], #-1
     ac4:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
     ac8:	01000000 	mrseq	r0, (UNDEF: 0)
     acc:	00005300 	andeq	r5, r0, r0, lsl #6
     ad0:	00000000 	andeq	r0, r0, r0
     ad4:	00480000 	subeq	r0, r8, r0
     ad8:	00600000 	rsbeq	r0, r0, r0
     adc:	00010000 	andeq	r0, r1, r0
     ae0:	0000605c 	andeq	r6, r0, ip, asr r0
     ae4:	00008000 	andeq	r8, r0, r0
     ae8:	f3000a00 	vpmax.u8	d0, d0, d0
     aec:	01f35201 	mvnseq	r5, r1, lsl #4
     af0:	01231c53 	teqeq	r3, r3, asr ip
     af4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     af8:	00000000 	andeq	r0, r0, r0
     afc:	00008000 	andeq	r8, r0, r0
     b00:	0000a400 	andeq	sl, r0, r0, lsl #8
     b04:	50000100 	andpl	r0, r0, r0, lsl #2
     b08:	000000a4 	andeq	r0, r0, r4, lsr #1
     b0c:	00000118 	andeq	r0, r0, r8, lsl r1
     b10:	02700003 	rsbseq	r0, r0, #3
     b14:	0001189f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
     b18:	00021800 	andeq	r1, r2, r0, lsl #16
     b1c:	f3000400 	vshl.u8	d0, d0, d0
     b20:	009f5001 	addseq	r5, pc, r1
     b24:	00000000 	andeq	r0, r0, r0
     b28:	80000000 	andhi	r0, r0, r0
     b2c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
     b30:	01000000 	mrseq	r0, (UNDEF: 0)
     b34:	00f05100 	rscseq	r5, r0, r0, lsl #2
     b38:	01600000 	cmneq	r0, r0
     b3c:	00010000 	andeq	r0, r1, r0
     b40:	00016055 	andeq	r6, r1, r5, asr r0
     b44:	00016800 	andeq	r6, r1, r0, lsl #16
     b48:	51000100 	mrspl	r0, (UNDEF: 16)
     b4c:	00000168 	andeq	r0, r0, r8, ror #2
     b50:	00000188 	andeq	r0, r0, r8, lsl #3
     b54:	88550001 	ldmdahi	r5, {r0}^
     b58:	9c000001 	stcls	0, cr0, [r0], {1}
     b5c:	01000001 	tsteq	r0, r1
     b60:	019c5100 	orrseq	r5, ip, r0, lsl #2
     b64:	01bc0000 			; <UNDEFINED> instruction: 0x01bc0000
     b68:	00010000 	andeq	r0, r1, r0
     b6c:	0001bc55 	andeq	fp, r1, r5, asr ip
     b70:	0001c400 	andeq	ip, r1, r0, lsl #8
     b74:	51000100 	mrspl	r0, (UNDEF: 16)
     b78:	000001c4 	andeq	r0, r0, r4, asr #3
     b7c:	000001fc 	strdeq	r0, [r0], -ip
     b80:	fc550001 	mrrc2	0, 0, r0, r5, cr1
     b84:	18000001 	stmdane	r0, {r0}
     b88:	04000002 	streq	r0, [r0], #-2
     b8c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     b90:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     b94:	00000000 	andeq	r0, r0, r0
     b98:	00008000 	andeq	r8, r0, r0
     b9c:	00009400 	andeq	r9, r0, r0, lsl #8
     ba0:	52000100 	andpl	r0, r0, #0, 2
     ba4:	00000094 	muleq	r0, r4, r0
     ba8:	000001fc 	strdeq	r0, [r0], -ip
     bac:	fc540001 	mrrc2	0, 0, r0, r4, cr1
     bb0:	18000001 	stmdane	r0, {r0}
     bb4:	04000002 	streq	r0, [r0], #-2
     bb8:	5201f300 	andpl	pc, r1, #0, 6
     bbc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     bc0:	00000000 	andeq	r0, r0, r0
     bc4:	00008000 	andeq	r8, r0, r0
     bc8:	00010000 	andeq	r0, r1, r0
     bcc:	53000100 	movwpl	r0, #256	; 0x100
     bd0:	00000104 	andeq	r0, r0, r4, lsl #2
     bd4:	00000108 	andeq	r0, r0, r8, lsl #2
     bd8:	60530001 	subsvs	r0, r3, r1
     bdc:	68000001 	stmdavs	r0, {r0}
     be0:	01000001 	tsteq	r0, r1
     be4:	01685300 	cmneq	r8, r0, lsl #6
     be8:	01880000 	orreq	r0, r8, r0
     bec:	00040000 	andeq	r0, r4, r0
     bf0:	9f5301f3 	svcls	0x005301f3
     bf4:	00000188 	andeq	r0, r0, r8, lsl #3
     bf8:	00000190 	muleq	r0, r0, r1
     bfc:	90530001 	subsls	r0, r3, r1
     c00:	94000001 	strls	r0, [r0], #-1
     c04:	01000001 	tsteq	r0, r1
     c08:	01945c00 	orrseq	r5, r4, r0, lsl #24
     c0c:	019c0000 	orrseq	r0, ip, r0
     c10:	00010000 	andeq	r0, r1, r0
     c14:	00019c53 	andeq	r9, r1, r3, asr ip
     c18:	0001bc00 	andeq	fp, r1, r0, lsl #24
     c1c:	f3000400 	vshl.u8	d0, d0, d0
     c20:	bc9f5301 	ldclt	3, cr5, [pc], {1}
     c24:	cc000001 	stcgt	0, cr0, [r0], {1}
     c28:	01000001 	tsteq	r0, r1
     c2c:	01cc5300 	biceq	r5, ip, r0, lsl #6
     c30:	01cf0000 	biceq	r0, pc, r0
     c34:	00010000 	andeq	r0, r1, r0
     c38:	0001cf5c 	andeq	ip, r1, ip, asr pc
     c3c:	0001d400 	andeq	sp, r1, r0, lsl #8
     c40:	f3000400 	vshl.u8	d0, d0, d0
     c44:	009f5301 	addseq	r5, pc, r1, lsl #6
     c48:	00000000 	andeq	r0, r0, r0
     c4c:	80000000 	andhi	r0, r0, r0
     c50:	9c000000 	stcls	0, cr0, [r0], {-0}
     c54:	02000000 	andeq	r0, r0, #0
     c58:	9c009100 	stflsd	f1, [r0], {-0}
     c5c:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
     c60:	01000001 	tsteq	r0, r1
     c64:	01d45200 	bicseq	r5, r4, r0, lsl #4
     c68:	01df0000 	bicseq	r0, pc, r0
     c6c:	00010000 	andeq	r0, r1, r0
     c70:	00000052 	andeq	r0, r0, r2, asr r0
     c74:	00000000 	andeq	r0, r0, r0
     c78:	00009c00 	andeq	r9, r0, r0, lsl #24
     c7c:	00011800 	andeq	r1, r1, r0, lsl #16
     c80:	5d000100 	stfpls	f0, [r0, #-0]
     c84:	00000118 	andeq	r0, r0, r8, lsl r1
     c88:	0000011c 	andeq	r0, r0, ip, lsl r1
     c8c:	1c530001 	mrrcne	0, 0, r0, r3, cr1
     c90:	20000001 	andcs	r0, r0, r1
     c94:	01000001 	tsteq	r0, r1
     c98:	01205100 	teqeq	r0, r0, lsl #2
     c9c:	01600000 	cmneq	r0, r0
     ca0:	00010000 	andeq	r0, r1, r0
     ca4:	00016053 	andeq	r6, r1, r3, asr r0
     ca8:	00016800 	andeq	r6, r1, r0, lsl #16
     cac:	5d000100 	stfpls	f0, [r0, #-0]
     cb0:	00000168 	andeq	r0, r0, r8, ror #2
     cb4:	0000016c 	andeq	r0, r0, ip, ror #2
     cb8:	6c5e0001 	mrrcvs	0, 0, r0, lr, cr1
     cbc:	88000001 	stmdahi	r0, {r0}
     cc0:	01000001 	tsteq	r0, r1
     cc4:	01885300 	orreq	r5, r8, r0, lsl #6
     cc8:	01900000 	orrseq	r0, r0, r0
     ccc:	00040000 	andeq	r0, r4, r0
     cd0:	9f7fa191 	svcls	0x007fa191
     cd4:	00000190 	muleq	r0, r0, r1
     cd8:	00000194 	muleq	r0, r4, r1
     cdc:	94530001 	ldrbls	r0, [r3], #-1
     ce0:	9c000001 	stcls	0, cr0, [r0], {1}
     ce4:	01000001 	tsteq	r0, r1
     ce8:	019c5d00 	orrseq	r5, ip, r0, lsl #26
     cec:	01a00000 	moveq	r0, r0
     cf0:	00010000 	andeq	r0, r1, r0
     cf4:	0001a05e 	andeq	sl, r1, lr, asr r0
     cf8:	0001bc00 	andeq	fp, r1, r0, lsl #24
     cfc:	53000100 	movwpl	r0, #256	; 0x100
     d00:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     d04:	000001d4 	ldrdeq	r0, [r0], -r4
     d08:	d45d0001 	ldrble	r0, [sp], #-1
     d0c:	df000001 	svcle	0x00000001
     d10:	01000001 	tsteq	r0, r1
     d14:	00005300 	andeq	r5, r0, r0, lsl #6
     d18:	00000000 	andeq	r0, r0, r0
     d1c:	00a00000 	adceq	r0, r0, r0
     d20:	00ec0000 	rsceq	r0, ip, r0
     d24:	00010000 	andeq	r0, r1, r0
     d28:	0000ec5c 	andeq	lr, r0, ip, asr ip
     d2c:	00010000 	andeq	r0, r1, r0
     d30:	53000100 	movwpl	r0, #256	; 0x100
     d34:	00000100 	andeq	r0, r0, r0, lsl #2
     d38:	00000104 	andeq	r0, r0, r4, lsl #2
     d3c:	045c0001 	ldrbeq	r0, [ip], #-1
     d40:	08000001 	stmdaeq	r0, {r0}
     d44:	01000001 	tsteq	r0, r1
     d48:	01085300 	mrseq	r5, (UNDEF: 56)
     d4c:	01180000 	tsteq	r8, r0
     d50:	00010000 	andeq	r0, r1, r0
     d54:	0001185c 	andeq	r1, r1, ip, asr r8
     d58:	00011c00 	andeq	r1, r1, r0, lsl #24
     d5c:	50000100 	andpl	r0, r0, r0, lsl #2
     d60:	0000011c 	andeq	r0, r0, ip, lsl r1
     d64:	0000013c 	andeq	r0, r0, ip, lsr r1
     d68:	445c0001 	ldrbmi	r0, [ip], #-1
     d6c:	58000001 	stmdapl	r0, {r0}
     d70:	01000001 	tsteq	r0, r1
     d74:	01585000 	cmpeq	r8, r0
     d78:	01600000 	cmneq	r0, r0
     d7c:	00010000 	andeq	r0, r1, r0
     d80:	0001605c 	andeq	r6, r1, ip, asr r0
     d84:	00016800 	andeq	r6, r1, r0, lsl #16
     d88:	53000100 	movwpl	r0, #256	; 0x100
     d8c:	00000168 	andeq	r0, r0, r8, ror #2
     d90:	00000178 	andeq	r0, r0, r8, ror r1
     d94:	785c0001 	ldmdavc	ip, {r0}^
     d98:	80000001 	andhi	r0, r0, r1
     d9c:	05000001 	streq	r0, [r0, #-1]
     da0:	34007c00 	strcc	r7, [r0], #-3072	; 0xc00
     da4:	01809f25 	orreq	r9, r0, r5, lsr #30
     da8:	01880000 	orreq	r0, r8, r0
     dac:	00010000 	andeq	r0, r1, r0
     db0:	0001885c 	andeq	r8, r1, ip, asr r8
     db4:	00019000 	andeq	r9, r1, r0
     db8:	53000100 	movwpl	r0, #256	; 0x100
     dbc:	00000190 	muleq	r0, r0, r1
     dc0:	00000194 	muleq	r0, r4, r1
     dc4:	945c0001 	ldrbls	r0, [ip], #-1
     dc8:	9c000001 	stcls	0, cr0, [r0], {1}
     dcc:	01000001 	tsteq	r0, r1
     dd0:	019c5300 	orrseq	r5, ip, r0, lsl #6
     dd4:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
     dd8:	00010000 	andeq	r0, r1, r0
     ddc:	0001ac5c 	andeq	sl, r1, ip, asr ip
     de0:	0001b400 	andeq	fp, r1, r0, lsl #8
     de4:	7c000500 	cfstr32vc	mvfx0, [r0], {-0}
     de8:	9f253100 	svcls	0x00253100
     dec:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
     df0:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     df4:	bc5c0001 	mrrclt	0, 0, r0, ip, cr1
     df8:	cc000001 	stcgt	0, cr0, [r0], {1}
     dfc:	01000001 	tsteq	r0, r1
     e00:	01cc5300 	biceq	r5, ip, r0, lsl #6
     e04:	01cf0000 	biceq	r0, pc, r0
     e08:	00010000 	andeq	r0, r1, r0
     e0c:	0001cf5c 	andeq	ip, r1, ip, asr pc
     e10:	0001d400 	andeq	sp, r1, r0, lsl #8
     e14:	f3000400 	vshl.u8	d0, d0, d0
     e18:	d49f5301 	ldrle	r5, [pc], #769	; e20 <_start-0x71e0>
     e1c:	df000001 	svcle	0x00000001
     e20:	01000001 	tsteq	r0, r1
     e24:	00005c00 	andeq	r5, r0, r0, lsl #24
     e28:	00000000 	andeq	r0, r0, r0
     e2c:	00ec0000 	rsceq	r0, ip, r0
     e30:	00fc0000 	rscseq	r0, ip, r0
     e34:	00020000 	andeq	r0, r2, r0
     e38:	00fc9f30 	rscseq	r9, ip, r0, lsr pc
     e3c:	01040000 	mrseq	r0, (UNDEF: 4)
     e40:	00020000 	andeq	r0, r2, r0
     e44:	01049f31 	tsteq	r4, r1, lsr pc
     e48:	01080000 	mrseq	r0, (UNDEF: 8)
     e4c:	00020000 	andeq	r0, r2, r0
     e50:	00009f30 	andeq	r9, r0, r0, lsr pc
     e54:	00000000 	andeq	r0, r0, r0
     e58:	02180000 	andseq	r0, r8, #0
     e5c:	02280000 	eoreq	r0, r8, #0
     e60:	00010000 	andeq	r0, r1, r0
     e64:	00022850 	andeq	r2, r2, r0, asr r8
     e68:	00023c00 	andeq	r3, r2, r0, lsl #24
     e6c:	f3000400 	vshl.u8	d0, d0, d0
     e70:	3c9f5001 	ldccc	0, cr5, [pc], {1}
     e74:	68000002 	stmdavs	r0, {r1}
     e78:	01000002 	tsteq	r0, r2
     e7c:	00005000 	andeq	r5, r0, r0
     e80:	00000000 	andeq	r0, r0, r0
     e84:	02180000 	andseq	r0, r8, #0
     e88:	022c0000 	eoreq	r0, ip, #0
     e8c:	00010000 	andeq	r0, r1, r0
     e90:	00022c51 	andeq	r2, r2, r1, asr ip
     e94:	00023c00 	andeq	r3, r2, r0, lsl #24
     e98:	f3000400 	vshl.u8	d0, d0, d0
     e9c:	3c9f5101 	ldfccs	f5, [pc], {1}
     ea0:	68000002 	stmdavs	r0, {r1}
     ea4:	01000002 	tsteq	r0, r2
     ea8:	00005100 	andeq	r5, r0, r0, lsl #2
     eac:	00000000 	andeq	r0, r0, r0
     eb0:	02680000 	rsbeq	r0, r8, #0
     eb4:	02900000 	addseq	r0, r0, #0
     eb8:	00010000 	andeq	r0, r1, r0
     ebc:	00029050 	andeq	r9, r2, r0, asr r0
     ec0:	0004dc00 	andeq	sp, r4, r0, lsl #24
     ec4:	5b000100 	blpl	12cc <_start-0x6d34>
     ec8:	000004dc 	ldrdeq	r0, [r0], -ip
     ecc:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     ed0:	01f30004 	mvnseq	r0, r4
     ed4:	00009f50 	andeq	r9, r0, r0, asr pc
     ed8:	00000000 	andeq	r0, r0, r0
     edc:	02680000 	rsbeq	r0, r8, #0
     ee0:	027c0000 	rsbseq	r0, ip, #0
     ee4:	00010000 	andeq	r0, r1, r0
     ee8:	00027c51 	andeq	r7, r2, r1, asr ip
     eec:	00029000 	andeq	r9, r2, r0
     ef0:	71000300 	mrsvc	r0, LR_irq
     ef4:	02909f01 	addseq	r9, r0, #1, 30
     ef8:	04f00000 	ldrbteq	r0, [r0], #0
     efc:	00040000 	andeq	r0, r4, r0
     f00:	9f5101f3 	svcls	0x005101f3
	...
     f0c:	00000268 	andeq	r0, r0, r8, ror #4
     f10:	00000298 	muleq	r0, r8, r2
     f14:	98520001 	ldmdals	r2, {r0}^
     f18:	c0000002 	andgt	r0, r0, r2
     f1c:	01000002 	tsteq	r0, r2
     f20:	02c05200 	sbceq	r5, r0, #0, 4
     f24:	048c0000 	streq	r0, [ip], #0
     f28:	00010000 	andeq	r0, r1, r0
     f2c:	00048c56 	andeq	r8, r4, r6, asr ip
     f30:	0004f000 	andeq	pc, r4, r0
     f34:	52000100 	andpl	r0, r0, #0, 2
	...
     f40:	00000268 	andeq	r0, r0, r8, ror #4
     f44:	00000284 	andeq	r0, r0, r4, lsl #5
     f48:	00530001 	subseq	r0, r3, r1
     f4c:	00000000 	andeq	r0, r0, r0
     f50:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
     f54:	90000002 	andls	r0, r0, r2
     f58:	01000002 	tsteq	r0, r2
     f5c:	02905000 	addseq	r5, r0, #0
     f60:	02940000 	addseq	r0, r4, #0
     f64:	00010000 	andeq	r0, r1, r0
     f68:	00029454 	andeq	r9, r2, r4, asr r4
     f6c:	0002a000 	andeq	sl, r2, r0
     f70:	74000300 	strvc	r0, [r0], #-768	; 0x300
     f74:	02a09f01 	adceq	r9, r0, #1, 30
     f78:	02ac0000 	adceq	r0, ip, #0
     f7c:	00010000 	andeq	r0, r1, r0
     f80:	0002ac54 	andeq	sl, r2, r4, asr ip
     f84:	0002b800 	andeq	fp, r2, r0, lsl #16
     f88:	74000300 	strvc	r0, [r0], #-768	; 0x300
     f8c:	02b89f01 	adcseq	r9, r8, #1, 30
     f90:	04900000 	ldreq	r0, [r0], #0
     f94:	00010000 	andeq	r0, r1, r0
     f98:	00049054 	andeq	r9, r4, r4, asr r0
     f9c:	00049c00 	andeq	r9, r4, r0, lsl #24
     fa0:	74000300 	strvc	r0, [r0], #-768	; 0x300
     fa4:	049c9f01 	ldreq	r9, [ip], #3841	; 0xf01
     fa8:	04c80000 	strbeq	r0, [r8], #0
     fac:	00010000 	andeq	r0, r1, r0
     fb0:	0004c854 	andeq	ip, r4, r4, asr r8
     fb4:	0004d400 	andeq	sp, r4, r0, lsl #8
     fb8:	50000100 	andpl	r0, r0, r0, lsl #2
     fbc:	000004d4 	ldrdeq	r0, [r0], -r4
     fc0:	000004dc 	ldrdeq	r0, [r0], -ip
     fc4:	01740003 	cmneq	r4, r3
     fc8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     fcc:	00000000 	andeq	r0, r0, r0
     fd0:	00028000 	andeq	r8, r2, r0
     fd4:	0004dc00 	andeq	sp, r4, r0, lsl #24
     fd8:	58000100 	stmdapl	r0, {r8}
     fdc:	000004dc 	ldrdeq	r0, [r0], -ip
     fe0:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     fe4:	01f3000a 	mvnseq	r0, sl
     fe8:	5001f351 	andpl	pc, r1, r1, asr r3	; <UNPREDICTABLE>
     fec:	9f1c3122 	svcls	0x001c3122
	...
     ff8:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
     ffc:	000003c0 	andeq	r0, r0, r0, asr #7
    1000:	e4500001 	ldrb	r0, [r0], #-1
    1004:	e8000003 	stmda	r0, {r0, r1}
    1008:	01000003 	tsteq	r0, r3
    100c:	040c5000 	streq	r5, [ip], #-0
    1010:	04100000 	ldreq	r0, [r0], #-0
    1014:	00010000 	andeq	r0, r1, r0
    1018:	00043450 	andeq	r3, r4, r0, asr r4
    101c:	00043800 	andeq	r3, r4, r0, lsl #16
    1020:	50000100 	andpl	r0, r0, r0, lsl #2
    1024:	00000440 	andeq	r0, r0, r0, asr #8
    1028:	00000444 	andeq	r0, r0, r4, asr #8
    102c:	68500001 	ldmdavs	r0, {r0}^
    1030:	6c000004 	stcvs	0, cr0, [r0], {4}
    1034:	01000004 	tsteq	r0, r4
    1038:	04885000 	streq	r5, [r8], #0
    103c:	04b00000 	ldrteq	r0, [r0], #0
    1040:	00010000 	andeq	r0, r1, r0
    1044:	00000050 	andeq	r0, r0, r0, asr r0
    1048:	00000000 	andeq	r0, r0, r0
    104c:	0002c000 	andeq	ip, r2, r0
    1050:	0002c800 	andeq	ip, r2, r0, lsl #16
    1054:	30000200 	andcc	r0, r0, r0, lsl #4
    1058:	0002c89f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
    105c:	0002cc00 	andeq	ip, r2, r0, lsl #24
    1060:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    1064:	000002d8 	ldrdeq	r0, [r0], -r8
    1068:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
    106c:	00570001 	subseq	r0, r7, r1
    1070:	00000000 	andeq	r0, r0, r0
    1074:	14000000 	strne	r0, [r0], #-0
    1078:	1c000000 	stcne	0, cr0, [r0], {-0}
    107c:	03000000 	movweq	r0, #0
    1080:	9f047300 	svcls	0x00047300
    1084:	0000001c 	andeq	r0, r0, ip, lsl r0
    1088:	00000027 	andeq	r0, r0, r7, lsr #32
    108c:	00530001 	subseq	r0, r3, r1
    1090:	00000000 	andeq	r0, r0, r0
    1094:	5c000000 	stcpl	0, cr0, [r0], {-0}
    1098:	60000091 	mulvs	r0, r1, r0
    109c:	02000091 	andeq	r0, r0, #145	; 0x91
    10a0:	609f3000 	addsvs	r3, pc, r0
    10a4:	64000091 	strvs	r0, [r0], #-145	; 0x91
    10a8:	01000091 	swpeq	r0, r1, [r0]	; <UNPREDICTABLE>
    10ac:	00005000 	andeq	r5, r0, r0
    10b0:	00000000 	andeq	r0, r0, r0
    10b4:	91740000 	cmnls	r4, r0
    10b8:	91780000 	cmnls	r8, r0
    10bc:	00020000 	andeq	r0, r2, r0
    10c0:	91789f30 	cmnls	r8, r0, lsr pc
    10c4:	917c0000 	cmnls	ip, r0
    10c8:	00010000 	andeq	r0, r1, r0
    10cc:	00918053 	addseq	r8, r1, r3, asr r0
    10d0:	00918800 	addseq	r8, r1, r0, lsl #16
    10d4:	53000100 	movwpl	r0, #256	; 0x100
	...
    10e4:	00000004 	andeq	r0, r0, r4
    10e8:	04500001 	ldrbeq	r0, [r0], #-1
    10ec:	0c000000 	stceq	0, cr0, [r0], {-0}
    10f0:	01000000 	mrseq	r0, (UNDEF: 0)
    10f4:	000c5300 	andeq	r5, ip, r0, lsl #6
    10f8:	00100000 	andseq	r0, r0, r0
    10fc:	00010000 	andeq	r0, r1, r0
    1100:	00001050 	andeq	r1, r0, r0, asr r0
    1104:	00001c00 	andeq	r1, r0, r0, lsl #24
    1108:	53000100 	movwpl	r0, #256	; 0x100
	...
    1114:	00000030 	andeq	r0, r0, r0, lsr r0
    1118:	0000003b 	andeq	r0, r0, fp, lsr r0
    111c:	3b500001 	blcc	1401128 <__bss_end__+0x13f6fc8>
    1120:	54000000 	strpl	r0, [r0], #-0
    1124:	01000000 	mrseq	r0, (UNDEF: 0)
    1128:	00005500 	andeq	r5, r0, r0, lsl #10
    112c:	00000000 	andeq	r0, r0, r0
    1130:	00440000 	subeq	r0, r4, r0
    1134:	00480000 	subeq	r0, r8, r0
    1138:	00010000 	andeq	r0, r1, r0
    113c:	00000050 	andeq	r0, r0, r0, asr r0
    1140:	00000000 	andeq	r0, r0, r0
    1144:	00005400 	andeq	r5, r0, r0, lsl #8
    1148:	00006000 	andeq	r6, r0, r0
    114c:	50000100 	andpl	r0, r0, r0, lsl #2
    1150:	00000060 	andeq	r0, r0, r0, rrx
    1154:	00000068 	andeq	r0, r0, r8, rrx
    1158:	01f30004 	mvnseq	r0, r4
    115c:	00009f50 	andeq	r9, r0, r0, asr pc
    1160:	00000000 	andeq	r0, r0, r0
    1164:	00680000 	rsbeq	r0, r8, r0
    1168:	00740000 	rsbseq	r0, r4, r0
    116c:	00010000 	andeq	r0, r1, r0
    1170:	00007450 	andeq	r7, r0, r0, asr r4
    1174:	00007c00 	andeq	r7, r0, r0, lsl #24
    1178:	f3000400 	vshl.u8	d0, d0, d0
    117c:	009f5001 	addseq	r5, pc, r1
	...
    1188:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    118c:	01000000 	mrseq	r0, (UNDEF: 0)
    1190:	00185000 	andseq	r5, r8, r0
    1194:	002c0000 	eoreq	r0, ip, r0
    1198:	00040000 	andeq	r0, r4, r0
    119c:	9f5001f3 	svcls	0x005001f3
    11a0:	0000002c 	andeq	r0, r0, ip, lsr #32
    11a4:	00000040 	andeq	r0, r0, r0, asr #32
    11a8:	40500001 	subsmi	r0, r0, r1
    11ac:	64000000 	strvs	r0, [r0], #-0
    11b0:	04000000 	streq	r0, [r0], #-0
    11b4:	5001f300 	andpl	pc, r1, r0, lsl #6
    11b8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    11bc:	00000000 	andeq	r0, r0, r0
    11c0:	00003c00 	andeq	r3, r0, r0, lsl #24
    11c4:	00004b00 	andeq	r4, r0, r0, lsl #22
    11c8:	52000100 	andpl	r0, r0, #0, 2
    11cc:	0000004b 	andeq	r0, r0, fp, asr #32
    11d0:	00000064 	andeq	r0, r0, r4, rrx
    11d4:	01f30009 	mvnseq	r0, r9
    11d8:	09032350 	stmdbeq	r3, {r4, r6, r8, r9, sp}
    11dc:	009f1afc 			; <UNDEFINED> instruction: 0x009f1afc
    11e0:	00000000 	andeq	r0, r0, r0
    11e4:	64000000 	strvs	r0, [r0], #-0
    11e8:	7c000000 	stcvc	0, cr0, [r0], {-0}
    11ec:	01000000 	mrseq	r0, (UNDEF: 0)
    11f0:	007c5000 	rsbseq	r5, ip, r0
    11f4:	00900000 	addseq	r0, r0, r0
    11f8:	00040000 	andeq	r0, r4, r0
    11fc:	9f5001f3 	svcls	0x005001f3
    1200:	00000090 	muleq	r0, r0, r0
    1204:	0000009b 	muleq	r0, fp, r0
    1208:	9b500001 	blls	1401214 <__bss_end__+0x13f70b4>
    120c:	a0000000 	andge	r0, r0, r0
    1210:	04000000 	streq	r0, [r0], #-0
    1214:	5001f300 	andpl	pc, r1, r0, lsl #6
    1218:	0000a09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    121c:	0000ac00 	andeq	sl, r0, r0, lsl #24
    1220:	50000100 	andpl	r0, r0, r0, lsl #2
    1224:	000000ac 	andeq	r0, r0, ip, lsr #1
    1228:	000000c0 	andeq	r0, r0, r0, asr #1
    122c:	01f30004 	mvnseq	r0, r4
    1230:	00c09f50 	sbceq	r9, r0, r0, asr pc
    1234:	00df0000 	sbcseq	r0, pc, r0
    1238:	00010000 	andeq	r0, r1, r0
    123c:	0000df50 	andeq	sp, r0, r0, asr pc
    1240:	0000f800 	andeq	pc, r0, r0, lsl #16
    1244:	f3000400 	vshl.u8	d0, d0, d0
    1248:	009f5001 	addseq	r5, pc, r1
    124c:	00000000 	andeq	r0, r0, r0
    1250:	64000000 	strvs	r0, [r0], #-0
    1254:	80000000 	andhi	r0, r0, r0
    1258:	01000000 	mrseq	r0, (UNDEF: 0)
    125c:	00805100 	addeq	r5, r0, r0, lsl #2
    1260:	00900000 	addseq	r0, r0, r0
    1264:	00040000 	andeq	r0, r4, r0
    1268:	9f5101f3 	svcls	0x005101f3
    126c:	00000090 	muleq	r0, r0, r0
    1270:	0000009b 	muleq	r0, fp, r0
    1274:	9b510001 	blls	1441280 <__bss_end__+0x1437120>
    1278:	a0000000 	andge	r0, r0, r0
    127c:	04000000 	streq	r0, [r0], #-0
    1280:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1284:	0000a09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1288:	0000b000 	andeq	fp, r0, r0
    128c:	51000100 	mrspl	r0, (UNDEF: 16)
    1290:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    1294:	000000c0 	andeq	r0, r0, r0, asr #1
    1298:	01f30004 	mvnseq	r0, r4
    129c:	00c09f51 	sbceq	r9, r0, r1, asr pc
    12a0:	00d40000 	sbcseq	r0, r4, r0
    12a4:	00010000 	andeq	r0, r1, r0
    12a8:	0000d451 	andeq	sp, r0, r1, asr r4
    12ac:	0000d800 	andeq	sp, r0, r0, lsl #16
    12b0:	71000400 	tstvc	r0, r0, lsl #8
    12b4:	d89f1f00 	ldmle	pc, {r8, r9, sl, fp, ip}	; <UNPREDICTABLE>
    12b8:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    12bc:	04000000 	streq	r0, [r0], #-0
    12c0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    12c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    12c8:	00000000 	andeq	r0, r0, r0
    12cc:	0000c800 	andeq	ip, r0, r0, lsl #16
    12d0:	0000cc00 	andeq	ip, r0, r0, lsl #24
    12d4:	52000100 	andpl	r0, r0, #0, 2
    12d8:	000000cc 	andeq	r0, r0, ip, asr #1
    12dc:	000000d8 	ldrdeq	r0, [r0], -r8
    12e0:	5c030005 	stcpl	0, cr0, [r3], {5}
    12e4:	d80000a1 	stmdale	r0, {r0, r5, r7}
    12e8:	df000000 	svcle	0x00000000
    12ec:	01000000 	mrseq	r0, (UNDEF: 0)
    12f0:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    12fc:	000b0000 	andeq	r0, fp, r0
    1300:	00010000 	andeq	r0, r1, r0
    1304:	00000b50 	andeq	r0, r0, r0, asr fp
    1308:	00001400 	andeq	r1, r0, r0, lsl #8
    130c:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	00008010 	andeq	r8, r0, r0, lsl r0
  14:	000000a4 	andeq	r0, r0, r4, lsr #1
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	030a0002 	movweq	r0, #40962	; 0xa002
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	000080b4 	strheq	r8, [r0], -r4
  34:	0000046c 	andeq	r0, r0, ip, ror #8
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	0c930002 	ldceq	0, cr0, [r3], {2}
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	0000858c 	andeq	r8, r0, ip, lsl #11
  54:	00000518 	andeq	r0, r0, r8, lsl r5
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	16160002 	ldrne	r0, [r6], -r2
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	00008b64 	andeq	r8, r0, r4, ror #22
  74:	00000020 	andeq	r0, r0, r0, lsr #32
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	16f50002 	ldrbtne	r0, [r5], r2
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	00008b84 	andeq	r8, r0, r4, lsl #23
  94:	00000058 	andeq	r0, r0, r8, asr r0
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	188a0002 	stmne	sl, {r1}
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	00008bdc 	ldrdeq	r8, [r0], -ip
  b4:	00000034 	andeq	r0, r0, r4, lsr r0
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	197c0002 	ldmdbne	ip!, {r1}^
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	00008c10 	andeq	r8, r0, r0, lsl ip
  d4:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	1fd40002 	svcne	0x00d40002
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	00009100 	andeq	r9, r0, r0, lsl #2
  f4:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	20d70002 	sbcscs	r0, r7, r2
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	00009128 	andeq	r9, r0, r8, lsr #2
 114:	00000034 	andeq	r0, r0, r4, lsr r0
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	21e60002 	mvncs	r0, r2
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	0000915c 	andeq	r9, r0, ip, asr r1
 134:	00000074 	andeq	r0, r0, r4, ror r0
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	23970002 	orrscs	r0, r7, #2
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	000091d0 	ldrdeq	r9, [r0], -r0
 154:	0000007c 	andeq	r0, r0, ip, ror r0
	...
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	25450002 	strbcs	r0, [r5, #-2]
 168:	00040000 	andeq	r0, r4, r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	00009524 	andeq	r9, r0, r4, lsr #10
 174:	00000178 	andeq	r0, r0, r8, ror r1
	...
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	28910002 	ldmcs	r1, {r1}
 188:	00040000 	andeq	r0, r4, r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	0000969c 	muleq	r0, ip, r6
 194:	00000014 	andeq	r0, r0, r4, lsl r0
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000119 	andeq	r0, r0, r9, lsl r1
   4:	00e20002 	rsceq	r0, r2, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2f010000 	svccs	0x00010000
  1c:	2f727375 	svccs	0x00727375
  20:	61636f6c 	cmnvs	r3, ip, ror #30
  24:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
  28:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
  2c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
  30:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
  34:	61652d65 	cmnvs	r5, r5, ror #26
  38:	342f6962 	strtcc	r6, [pc], #-2402	; 40 <_start-0x7fc0>
  3c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
  40:	3173632d 	cmncc	r3, sp, lsr #6
  44:	2f653037 	svccs	0x00653037
  48:	2f62696c 	svccs	0x0062696c
  4c:	2f636367 	svccs	0x00636367
  50:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
  54:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
  58:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
  5c:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
  60:	2f332e38 	svccs	0x00332e38
  64:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  68:	00656475 	rsbeq	r6, r5, r5, ror r4
  6c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
  70:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
  74:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
  78:	2f6e756a 	svccs	0x006e756a
  7c:	6b736544 	blvs	1cd9594 <__bss_end__+0x1ccf434>
  80:	2f706f74 	svccs	0x00706f74
  84:	6f686373 	svcvs	0x00686373
  88:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
  8c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
  90:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
  94:	53432f30 	movtpl	r2, #16176	; 0x3f30
  98:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
  9c:	3173632f 	cmncc	r3, pc, lsr #6
  a0:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
  a4:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
  a8:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
  ac:	00697062 	rsbeq	r7, r9, r2, rrx
  b0:	742d3400 	strtvc	r3, [sp], #-1024	; 0x400
  b4:	2d747365 	ldclcs	3, cr7, [r4, #-404]!	; 0xfffffe6c
  b8:	74697865 	strbtvc	r7, [r9], #-2149	; 0x865
  bc:	0000632e 	andeq	r6, r0, lr, lsr #6
  c0:	70720000 	rsbsvc	r0, r2, r0
  c4:	68742d69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, sl, fp, sp}^
  c8:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
  cc:	0000682e 	andeq	r6, r0, lr, lsr #16
  d0:	74730000 	ldrbtvc	r0, [r3], #-0
  d4:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
  d8:	6363672d 	cmnvs	r3, #11796480	; 0xb40000
  dc:	0100682e 	tsteq	r0, lr, lsr #16
  e0:	70720000 	rsbsvc	r0, r2, r0
  e4:	00682e69 	rsbeq	r2, r8, r9, ror #28
  e8:	00000002 	andeq	r0, r0, r2
  ec:	10020500 	andne	r0, r2, r0, lsl #10
  f0:	16000080 	strne	r0, [r0], -r0, lsl #1
  f4:	2f2f4d4b 	svccs	0x002f4d4b
  f8:	2f2f2f2f 	svccs	0x002f2f2f
  fc:	322f2f6a 	eorcc	r2, pc, #424	; 0x1a8
 100:	02002d2f 	andeq	r2, r0, #3008	; 0xbc0
 104:	002f0204 	eoreq	r0, pc, r4, lsl #4
 108:	65020402 	strvs	r0, [r2, #-1026]	; 0x402
 10c:	01040200 	mrseq	r0, R12_usr
 110:	4c062e06 	stcmi	14, cr2, [r6], {6}
 114:	2e694b2f 	vmulcs.f64	d20, d9, d31
 118:	01001202 	tsteq	r0, r2, lsl #4
 11c:	00019701 	andeq	r9, r1, r1, lsl #14
 120:	e8000200 	stmda	r0, {r9}
 124:	02000000 	andeq	r0, r0, #0
 128:	0d0efb01 	vstreq	d15, [lr, #-4]
 12c:	01010100 	mrseq	r0, (UNDEF: 17)
 130:	00000001 	andeq	r0, r0, r1
 134:	01000001 	tsteq	r0, r1
 138:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 13c:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
 140:	432f6c61 	teqmi	pc, #24832	; 0x6100
 144:	616c6c65 	cmnvs	ip, r5, ror #24
 148:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 14c:	6f6e2d6d 	svcvs	0x006e2d6d
 150:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 154:	2f696261 	svccs	0x00696261
 158:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 15c:	73632d33 	cmnvc	r3, #3264	; 0xcc0
 160:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
 164:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 168:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
 16c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 170:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 174:	61652d65 	cmnvs	r5, r5, ror #26
 178:	342f6962 	strtcc	r6, [pc], #-2402	; 180 <_start-0x7e80>
 17c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 180:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 184:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
 188:	73552f00 	cmpvc	r5, #0, 30
 18c:	2f737265 	svccs	0x00737265
 190:	61697262 	cmnvs	r9, r2, ror #4
 194:	6e756a6e 	vsubvs.f32	s13, s10, s29
 198:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 19c:	706f746b 	rsbvc	r7, pc, fp, ror #8
 1a0:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 1a4:	2f6c6f6f 	svccs	0x006c6f6f
 1a8:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 1ac:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 1b0:	432f3032 	teqmi	pc, #50	; 0x32
 1b4:	30343153 	eorscc	r3, r4, r3, asr r1
 1b8:	73632f45 	cmnvc	r3, #276	; 0x114
 1bc:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 1c0:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 1c4:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 28 <_start-0x7fd8>
 1c8:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 1cc:	2e510000 	cdpcs	0, 5, cr0, cr1, cr0, {0}
 1d0:	00000068 	andeq	r0, r0, r8, rrx
 1d4:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 1d8:	7268742d 	rsbvc	r7, r8, #754974720	; 0x2d000000
 1dc:	2e646165 	powcssz	f6, f4, f5
 1e0:	00000063 	andeq	r0, r0, r3, rrx
 1e4:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 1e8:	7268742d 	rsbvc	r7, r8, #754974720	; 0x2d000000
 1ec:	2e646165 	powcssz	f6, f4, f5
 1f0:	00000068 	andeq	r0, r0, r8, rrx
 1f4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
 1f8:	2d746e69 	ldclcs	14, cr6, [r4, #-420]!	; 0xfffffe5c
 1fc:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
 200:	00010068 	andeq	r0, r1, r8, rrx
 204:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 208:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 20c:	00000000 	andeq	r0, r0, r0
 210:	80b40205 	adcshi	r0, r4, r5, lsl #4
 214:	0f030000 	svceq	0x00030000
 218:	1b030101 	blne	c0624 <__bss_end__+0xb64c4>
 21c:	674b134a 	strbvs	r1, [fp, -sl, asr #6]
 220:	4f2f6867 	svcmi	0x002f6867
 224:	2f4b6713 	svccs	0x004b6713
 228:	0302044b 	movweq	r0, #9291	; 0x244b
 22c:	044c4a6d 	strbeq	r4, [ip], #-2669	; 0xa6d
 230:	82670301 	rsbhi	r0, r7, #67108864	; 0x4000000
 234:	0200684b 	andeq	r6, r0, #4915200	; 0x4b0000
 238:	66060104 	strvs	r0, [r6], -r4, lsl #2
 23c:	0200bb06 	andeq	fp, r0, #6144	; 0x1800
 240:	66060104 	strvs	r0, [r6], -r4, lsl #2
 244:	2f4db806 	svccs	0x004db806
 248:	02002fa1 	andeq	r2, r0, #644	; 0x284
 24c:	4a060104 	bmi	180664 <__bss_end__+0x176504>
 250:	4b2fbc06 	blmi	bef270 <__bss_end__+0xbe5110>
 254:	01040200 	mrseq	r0, R12_usr
 258:	bd066606 	stclt	6, cr6, [r6, #-24]	; 0xffffffe8
 25c:	2f2f4b67 	svccs	0x002f4b67
 260:	354a7a03 	strbcc	r7, [sl, #-2563]	; 0xa03
 264:	74030204 	strvc	r0, [r3], #-516	; 0x204
 268:	4b4d2f9e 	blmi	134c0e8 <__bss_end__+0x1341f88>
 26c:	02008467 	andeq	r8, r0, #1728053248	; 0x67000000
 270:	4a060104 	bmi	180688 <__bss_end__+0x176528>
 274:	03a0bb06 	moveq	fp, #6144	; 0x1800
 278:	0314d66e 	tsteq	r4, #115343360	; 0x6e00000
 27c:	5167821c 	cmnpl	r7, ip, lsl r2
 280:	684b302f 	stmdavs	fp, {r0, r1, r2, r3, r5, ip, sp}^
 284:	0a038568 	beq	e182c <__bss_end__+0xd76cc>
 288:	834c4b2e 	movthi	r4, #52014	; 0xcb2e
 28c:	35bf6884 	ldrcc	r6, [pc, #2180]!	; b18 <_start-0x74e8>
 290:	83834b85 	orrhi	r4, r3, #136192	; 0x21400
 294:	4d9e2303 	ldcmi	3, cr2, [lr, #12]
 298:	67304b83 	ldrvs	r4, [r0, -r3, lsl #23]!
 29c:	4b864208 	blmi	fe190ac4 <__bss_end__+0xfe186964>
 2a0:	35f25403 	ldrbcc	r5, [r2, #1027]!	; 0x403
 2a4:	83673584 	cmnhi	r7, #132, 10	; 0x21000000
 2a8:	ba1b034c 	blt	6c0fe0 <__bss_end__+0x6b6e80>
 2ac:	2f28082f 	svccs	0x0028082f
 2b0:	022f2608 	eoreq	r2, pc, #8, 12	; 0x800000
 2b4:	01010012 	tsteq	r1, r2, lsl r0
 2b8:	00000270 	andeq	r0, r0, r0, ror r2
 2bc:	01280002 	teqeq	r8, r2
 2c0:	01020000 	mrseq	r0, (UNDEF: 2)
 2c4:	000d0efb 	strdeq	r0, [sp], -fp
 2c8:	01010101 	tsteq	r1, r1, lsl #2
 2cc:	01000000 	mrseq	r0, (UNDEF: 0)
 2d0:	2f010000 	svccs	0x00010000
 2d4:	2f727375 	svccs	0x00727375
 2d8:	61636f6c 	cmnvs	r3, ip, ror #30
 2dc:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
 2e0:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
 2e4:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 2e8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 2ec:	61652d65 	cmnvs	r5, r5, ror #26
 2f0:	342f6962 	strtcc	r6, [pc], #-2402	; 2f8 <_start-0x7d08>
 2f4:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 2f8:	3173632d 	cmncc	r3, sp, lsr #6
 2fc:	2f653037 	svccs	0x00653037
 300:	2f62696c 	svccs	0x0062696c
 304:	2f636367 	svccs	0x00636367
 308:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 30c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 310:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 314:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 318:	2f332e38 	svccs	0x00332e38
 31c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 320:	00656475 	rsbeq	r6, r5, r5, ror r4
 324:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 328:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 32c:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 330:	2f6e756a 	svccs	0x006e756a
 334:	6b736544 	blvs	1cd984c <__bss_end__+0x1ccf6ec>
 338:	2f706f74 	svccs	0x00706f74
 33c:	6f686373 	svcvs	0x00686373
 340:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 344:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 348:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 34c:	53432f30 	movtpl	r2, #16176	; 0x3f30
 350:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 354:	3173632f 	cmncc	r3, pc, lsr #6
 358:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 35c:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 360:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 364:	00697062 	rsbeq	r7, r9, r2, rrx
 368:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 36c:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
 370:	432f6c61 	teqmi	pc, #24832	; 0x6100
 374:	616c6c65 	cmnvs	ip, r5, ror #24
 378:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 37c:	6f6e2d6d 	svcvs	0x006e2d6d
 380:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 384:	2f696261 	svccs	0x00696261
 388:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 38c:	73632d33 	cmnvc	r3, #3264	; 0xcc0
 390:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
 394:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 398:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 39c:	61652d65 	cmnvs	r5, r5, ror #26
 3a0:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
 3a4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
 3a8:	00006564 	andeq	r6, r0, r4, ror #10
 3ac:	63726963 	cmnvs	r2, #1622016	; 0x18c000
 3b0:	72616c75 	rsbvc	r6, r1, #29952	; 0x7500
 3b4:	0000632e 	andeq	r6, r0, lr, lsr #6
 3b8:	69630000 	stmdbvs	r3!, {}^	; <UNPREDICTABLE>
 3bc:	6c756372 	ldclvs	3, cr6, [r5], #-456	; 0xfffffe38
 3c0:	682e7261 	stmdavs	lr!, {r0, r5, r6, r9, ip, sp, lr}
 3c4:	00000000 	andeq	r0, r0, r0
 3c8:	64647473 	strbtvs	r7, [r4], #-1139	; 0x473
 3cc:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
 3d0:	00000100 	andeq	r0, r0, r0, lsl #2
 3d4:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 3d8:	00020068 	andeq	r0, r2, r8, rrx
 3dc:	72747300 	rsbsvc	r7, r4, #0, 6
 3e0:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
 3e4:	00030068 	andeq	r0, r3, r8, rrx
 3e8:	05000000 	streq	r0, [r0, #-0]
 3ec:	00858c02 	addeq	r8, r5, r2, lsl #24
 3f0:	044b1900 	strbeq	r1, [fp], #-2304	; 0x900
 3f4:	00cd0302 	sbceq	r0, sp, r2, lsl #6
 3f8:	01049982 	smlabbeq	r4, r2, r9, r9
 3fc:	9e7fb803 	cdpls	8, 7, cr11, cr15, cr3, {0}
 400:	2fd82208 	svccs	0x00d82208
 404:	673f089f 			; <UNDEFINED> instruction: 0x673f089f
 408:	4b9f6767 	blmi	fe7da1ac <__bss_end__+0xfe7d004c>
 40c:	3a030204 	bcc	c0c24 <__bss_end__+0xb6ac4>
 410:	030104ba 	movweq	r0, #5306	; 0x14ba
 414:	02004a47 	andeq	r4, r0, #290816	; 0x47000
 418:	4a060104 	bmi	180830 <__bss_end__+0x1766d0>
 41c:	03060204 	movweq	r0, #25092	; 0x6204
 420:	0104ba3c 	tsteq	r4, ip, lsr sl
 424:	00ba4503 	adcseq	r4, sl, r3, lsl #10
 428:	06010402 	streq	r0, [r1], -r2, lsl #8
 42c:	0602044a 	streq	r0, [r2], -sl, asr #8
 430:	04ba3d03 	ldrteq	r3, [sl], #3331	; 0xd03
 434:	9e440301 	cdpls	3, 4, cr0, cr4, cr1, {0}
 438:	01040200 	mrseq	r0, R12_usr
 43c:	02044a06 	andeq	r4, r4, #24576	; 0x6000
 440:	ba370306 	blt	dc1060 <__bss_end__+0xdb6f00>
 444:	4c820a03 	vstmiami	r2, {s0-s2}
 448:	04834b4b 	streq	r4, [r3], #2891	; 0xb4b
 44c:	7fbb0301 	svcvc	0x00bb0301
 450:	0302044a 	movweq	r0, #9290	; 0x244a
 454:	042e00c1 	strteq	r0, [lr], #-193	; 0xc1
 458:	2e400301 	cdpcs	3, 4, cr0, cr0, cr1, {0}
 45c:	01040200 	mrseq	r0, R12_usr
 460:	00664a06 	rsbeq	r4, r6, r6, lsl #20
 464:	66040402 	strvs	r0, [r4], -r2, lsl #8
 468:	01040200 	mrseq	r0, R12_usr
 46c:	1903064a 	stmdbne	r3, {r1, r3, r6, r9, sl}
 470:	04012402 	streq	r2, [r1], #-1026	; 0x402
 474:	4a1c0302 	bmi	701084 <__bss_end__+0x6f6f24>
 478:	324a0b03 	subcc	r0, sl, #3072	; 0xc00
 47c:	01040200 	mrseq	r0, R12_usr
 480:	002e7103 	eoreq	r7, lr, r3, lsl #2
 484:	03010402 	movweq	r0, #5122	; 0x1402
 488:	2f4c4a0a 	svccs	0x004c4a0a
 48c:	0446834b 	strbeq	r8, [r6], #-843	; 0x34b
 490:	2e5e0301 	cdpcs	3, 5, cr0, cr14, cr1, {0}
 494:	0085a04e 	addeq	sl, r5, lr, asr #32
 498:	4b020402 	blmi	814a8 <__bss_end__+0x77348>
 49c:	02040200 	andeq	r0, r4, #0, 4
 4a0:	04020065 	streq	r0, [r2], #-101	; 0x65
 4a4:	062e0601 	strteq	r0, [lr], -r1, lsl #12
 4a8:	2e5a034c 	cdpcs	3, 5, cr0, cr10, cr12, {2}
 4ac:	03020483 	movweq	r0, #9347	; 0x2483
 4b0:	01042e36 	tsteq	r4, r6, lsr lr
 4b4:	4cba4b03 	fldmiaxmi	sl!, {d4}	;@ Deprecated
 4b8:	4d314883 	ldcmi	8, cr4, [r1, #-524]!	; 0xfffffdf4
 4bc:	2e030204 	cdpcs	2, 0, cr0, cr3, cr4, {0}
 4c0:	0301044a 	movweq	r0, #5194	; 0x144a
 4c4:	4b4cd654 	blmi	1335e1c <__bss_end__+0x132bcbc>
 4c8:	03020468 	movweq	r0, #9320	; 0x2468
 4cc:	01044a27 	tsteq	r4, r7, lsr #20
 4d0:	009e5a03 	addseq	r5, lr, r3, lsl #20
 4d4:	06010402 	streq	r0, [r1], -r2, lsl #8
 4d8:	50b5064a 	adcspl	r0, r5, sl, asr #12
 4dc:	ba15032f 	blt	5411a0 <__bss_end__+0x537040>
 4e0:	0f030204 	svceq	0x00030204
 4e4:	0104d72e 	tsteq	r4, lr, lsr #14
 4e8:	042e7303 	strteq	r7, [lr], #-771	; 0x303
 4ec:	661b0302 	ldrvs	r0, [fp], -r2, lsl #6
 4f0:	0431302f 	ldrteq	r3, [r1], #-47	; 0x2f
 4f4:	4a620301 	bmi	1881100 <__bss_end__+0x1876fa0>
 4f8:	18030204 	stmdane	r3, {r2, r9}
 4fc:	6e032f2e 	cdpvs	15, 0, cr2, cr3, cr14, {1}
 500:	8213032e 	andshi	r0, r3, #-1207959552	; 0xb8000000
 504:	47832f4c 	strmi	r2, [r3, ip, asr #30]
 508:	65030104 	strvs	r0, [r3, #-260]	; 0x104
 50c:	00b84b2e 	adcseq	r4, r8, lr, lsr #22
 510:	06010402 	streq	r0, [r1], -r2, lsl #8
 514:	044d062e 	strbeq	r0, [sp], #-1582	; 0x62e
 518:	01044c02 	tsteq	r4, r2, lsl #24
 51c:	04020081 	streq	r0, [r2], #-129	; 0x81
 520:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 524:	026750b5 	rsbeq	r5, r7, #181	; 0xb5
 528:	0101000e 	tsteq	r1, lr
 52c:	000000ec 	andeq	r0, r0, ip, ror #1
 530:	00d00002 	sbcseq	r0, r0, r2
 534:	01020000 	mrseq	r0, (UNDEF: 2)
 538:	000d0efb 	strdeq	r0, [sp], -fp
 53c:	01010101 	tsteq	r1, r1, lsl #2
 540:	01000000 	mrseq	r0, (UNDEF: 0)
 544:	6c010000 	stcvs	0, cr0, [r1], {-0}
 548:	00636269 	rsbeq	r6, r3, r9, ror #4
 54c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 550:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
 554:	432f6c61 	teqmi	pc, #24832	; 0x6100
 558:	616c6c65 	cmnvs	ip, r5, ror #24
 55c:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 560:	6f6e2d6d 	svcvs	0x006e2d6d
 564:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 568:	2f696261 	svccs	0x00696261
 56c:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 570:	73632d33 	cmnvc	r3, #3264	; 0xcc0
 574:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
 578:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 57c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
 580:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 584:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 588:	61652d65 	cmnvs	r5, r5, ror #26
 58c:	342f6962 	strtcc	r6, [pc], #-2402	; 594 <_start-0x7a6c>
 590:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 594:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 598:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
 59c:	73752f00 	cmnvc	r5, #0, 30
 5a0:	6f6c2f72 	svcvs	0x006c2f72
 5a4:	2f6c6163 	svccs	0x006c6163
 5a8:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
 5ac:	612f7261 	teqvs	pc, r1, ror #4
 5b0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 5b4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 5b8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 5bc:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 5c0:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
 5c4:	30373173 	eorscc	r3, r7, r3, ror r1
 5c8:	72612f65 	rsbvc	r2, r1, #404	; 0x194
 5cc:	6f6e2d6d 	svcvs	0x006e2d6d
 5d0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 5d4:	2f696261 	svccs	0x00696261
 5d8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 5dc:	00656475 	rsbeq	r6, r5, r5, ror r4
 5e0:	6d656d00 	stclvs	13, cr6, [r5, #-0]
 5e4:	2e746573 	mrccs	5, 3, r6, cr4, cr3, {3}
 5e8:	00010063 	andeq	r0, r1, r3, rrx
 5ec:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
 5f0:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
 5f4:	00020068 	andeq	r0, r2, r8, rrx
 5f8:	72747300 	rsbsvc	r7, r4, #0, 6
 5fc:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
 600:	00030068 	andeq	r0, r3, r8, rrx
 604:	05000000 	streq	r0, [r0, #-0]
 608:	008b6402 	addeq	r6, fp, r2, lsl #8
 60c:	4c131400 	cfldrsmi	mvf1, [r3], {-0}
 610:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 614:	024d4901 	subeq	r4, sp, #16384	; 0x4000
 618:	01010002 	tsteq	r1, r2
 61c:	00000102 	andeq	r0, r0, r2, lsl #2
 620:	00eb0002 	rsceq	r0, fp, r2
 624:	01020000 	mrseq	r0, (UNDEF: 2)
 628:	000d0efb 	strdeq	r0, [sp], -fp
 62c:	01010101 	tsteq	r1, r1, lsl #2
 630:	01000000 	mrseq	r0, (UNDEF: 0)
 634:	6c010000 	stcvs	0, cr0, [r1], {-0}
 638:	00636269 	rsbeq	r6, r3, r9, ror #4
 63c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 640:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
 644:	432f6c61 	teqmi	pc, #24832	; 0x6100
 648:	616c6c65 	cmnvs	ip, r5, ror #24
 64c:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 650:	6f6e2d6d 	svcvs	0x006e2d6d
 654:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 658:	2f696261 	svccs	0x00696261
 65c:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 660:	73632d33 	cmnvc	r3, #3264	; 0xcc0
 664:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
 668:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 66c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
 670:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 674:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 678:	61652d65 	cmnvs	r5, r5, ror #26
 67c:	342f6962 	strtcc	r6, [pc], #-2402	; 684 <_start-0x797c>
 680:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 684:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 688:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
 68c:	73552f00 	cmpvc	r5, #0, 30
 690:	2f737265 	svccs	0x00737265
 694:	61697262 	cmnvs	r9, r2, ror #4
 698:	6e756a6e 	vsubvs.f32	s13, s10, s29
 69c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 6a0:	706f746b 	rsbvc	r7, pc, fp, ror #8
 6a4:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 6a8:	2f6c6f6f 	svccs	0x006c6f6f
 6ac:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 6b0:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 6b4:	432f3032 	teqmi	pc, #50	; 0x32
 6b8:	30343153 	eorscc	r3, r4, r3, asr r1
 6bc:	73632f45 	cmnvc	r3, #276	; 0x114
 6c0:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 6c4:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 6c8:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 52c <_start-0x7ad4>
 6cc:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 6d0:	72700000 	rsbsvc	r0, r0, #0
 6d4:	6b746e69 	blvs	1d1c080 <__bss_end__+0x1d11f20>
 6d8:	0100632e 	tsteq	r0, lr, lsr #6
 6dc:	74730000 	ldrbtvc	r0, [r3], #-0
 6e0:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
 6e4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 6e8:	623c0000 	eorsvs	r0, ip, #0
 6ec:	746c6975 	strbtvc	r6, [ip], #-2421	; 0x975
 6f0:	3e6e692d 	cdpcc	9, 6, cr6, cr14, cr13, {1}
 6f4:	00000000 	andeq	r0, r0, r0
 6f8:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 6fc:	00030068 	andeq	r0, r3, r8, rrx
 700:	2d617600 	stclcs	6, cr7, [r1, #-0]
 704:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 708:	682e6b74 	stmdavs	lr!, {r2, r4, r5, r6, r8, r9, fp, sp, lr}
 70c:	00000100 	andeq	r0, r0, r0, lsl #2
 710:	02050000 	andeq	r0, r5, #0
 714:	00008b84 	andeq	r8, r0, r4, lsl #23
 718:	bf4b6b17 	svclt	0x004b6b17
 71c:	000e0289 	andeq	r0, lr, r9, lsl #5
 720:	00960101 	addseq	r0, r6, r1, lsl #2
 724:	00020000 	andeq	r0, r2, r0
 728:	0000006f 	andeq	r0, r0, pc, rrx
 72c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 730:	0101000d 	tsteq	r1, sp
 734:	00000101 	andeq	r0, r0, r1, lsl #2
 738:	00000100 	andeq	r0, r0, r0, lsl #2
 73c:	62696c01 	rsbvs	r6, r9, #256	; 0x100
 740:	552f0063 	strpl	r0, [pc, #-99]!	; 6e5 <_start-0x791b>
 744:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 748:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 74c:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 750:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 754:	6f746b73 	svcvs	0x00746b73
 758:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 75c:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 5c4 <_start-0x7a3c>
 760:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 764:	31726574 	cmncc	r2, r4, ror r5
 768:	2f303239 	svccs	0x00303239
 76c:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 770:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 774:	30343173 	eorscc	r3, r4, r3, ror r1
 778:	30322d65 	eorscc	r2, r2, r5, ror #26
 77c:	2f6e6977 	svccs	0x006e6977
 780:	7062696c 	rsbvc	r6, r2, ip, ror #18
 784:	70000069 	andvc	r0, r0, r9, rrx
 788:	2e6b7475 	mcrcs	4, 3, r7, cr11, cr5, {3}
 78c:	00010063 	andeq	r0, r1, r3, rrx
 790:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 794:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 798:	00000000 	andeq	r0, r0, r0
 79c:	8bdc0205 	blhi	ff700fb8 <__bss_end__+0xff6f6e58>
 7a0:	4c150000 	ldcmi	0, cr0, [r5], {-0}
 7a4:	0402002d 	streq	r0, [r2], #-45	; 0x2d
 7a8:	02002f02 	andeq	r2, r0, #2, 30
 7ac:	00490204 	subeq	r0, r9, r4, lsl #4
 7b0:	06010402 	streq	r0, [r1], -r2, lsl #8
 7b4:	026b062e 	rsbeq	r0, fp, #48234496	; 0x2e00000
 7b8:	01010006 	tsteq	r1, r6
 7bc:	000001dc 	ldrdeq	r0, [r0], -ip
 7c0:	00df0002 	sbcseq	r0, pc, r2
 7c4:	01020000 	mrseq	r0, (UNDEF: 2)
 7c8:	000d0efb 	strdeq	r0, [sp], -fp
 7cc:	01010101 	tsteq	r1, r1, lsl #2
 7d0:	01000000 	mrseq	r0, (UNDEF: 0)
 7d4:	6c010000 	stcvs	0, cr0, [r1], {-0}
 7d8:	00636269 	rsbeq	r6, r3, r9, ror #4
 7dc:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 7e0:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
 7e4:	432f6c61 	teqmi	pc, #24832	; 0x6100
 7e8:	616c6c65 	cmnvs	ip, r5, ror #24
 7ec:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 7f0:	6f6e2d6d 	svcvs	0x006e2d6d
 7f4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 7f8:	2f696261 	svccs	0x00696261
 7fc:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 800:	73632d33 	cmnvc	r3, #3264	; 0xcc0
 804:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
 808:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 80c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
 810:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 814:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 818:	61652d65 	cmnvs	r5, r5, ror #26
 81c:	342f6962 	strtcc	r6, [pc], #-2402	; 824 <_start-0x77dc>
 820:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 824:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 828:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
 82c:	73552f00 	cmpvc	r5, #0, 30
 830:	2f737265 	svccs	0x00737265
 834:	61697262 	cmnvs	r9, r2, ror #4
 838:	6e756a6e 	vsubvs.f32	s13, s10, s29
 83c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 840:	706f746b 	rsbvc	r7, pc, fp, ror #8
 844:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 848:	2f6c6f6f 	svccs	0x006c6f6f
 84c:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 850:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 854:	432f3032 	teqmi	pc, #50	; 0x32
 858:	30343153 	eorscc	r3, r4, r3, asr r1
 85c:	73632f45 	cmnvc	r3, #276	; 0x114
 860:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 864:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 868:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 6cc <_start-0x7934>
 86c:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 870:	61760000 	cmnvs	r6, r0
 874:	6972702d 	ldmdbvs	r2!, {r0, r2, r3, r5, ip, sp, lr}^
 878:	2e6b746e 	cdpcs	4, 6, cr7, cr11, cr14, {3}
 87c:	00010063 	andeq	r0, r1, r3, rrx
 880:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
 884:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
 888:	00020068 	andeq	r0, r2, r8, rrx
 88c:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 890:	0300682e 	movweq	r6, #2094	; 0x82e
 894:	623c0000 	eorsvs	r0, ip, #0
 898:	746c6975 	strbtvc	r6, [ip], #-2421	; 0x975
 89c:	3e6e692d 	cdpcc	9, 6, cr6, cr14, cr13, {1}
 8a0:	00000000 	andeq	r0, r0, r0
 8a4:	02050000 	andeq	r0, r5, #0
 8a8:	00008c10 	andeq	r8, r0, r0, lsl ip
 8ac:	01012603 	tsteq	r1, r3, lsl #12
 8b0:	2d3113a5 	ldccs	3, cr1, [r1, #-660]!	; 0xfffffd6c
 8b4:	02040200 	andeq	r0, r4, #0, 4
 8b8:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 8bc:	02002d02 	andeq	r2, r0, #2, 26	; 0x80
 8c0:	002f0204 	eoreq	r0, pc, r4, lsl #4
 8c4:	2d010402 	cfstrscs	mvf0, [r1, #-8]
 8c8:	14304c4c 	ldrtne	r4, [r0], #-3148	; 0xc4c
 8cc:	004f2f4b 	subeq	r2, pc, fp, asr #30
 8d0:	67020402 	strvs	r0, [r2, -r2, lsl #8]
 8d4:	01040200 	mrseq	r0, R12_usr
 8d8:	304d4c65 	subcc	r4, sp, r5, ror #24
 8dc:	30312fa0 	eorscc	r2, r1, r0, lsr #31
 8e0:	84162602 	ldrhi	r2, [r6], #-1538	; 0x602
 8e4:	02002c2d 	andeq	r2, r0, #11520	; 0x2d00
 8e8:	00300104 	eorseq	r0, r0, r4, lsl #2
 8ec:	33010402 	movwcc	r0, #5122	; 0x1402
 8f0:	02006606 	andeq	r6, r0, #6291456	; 0x600000
 8f4:	002e0104 	eoreq	r0, lr, r4, lsl #2
 8f8:	06010402 	streq	r0, [r1], -r2, lsl #8
 8fc:	2f672108 	svccs	0x00672108
 900:	03827303 	orreq	r7, r2, #201326592	; 0xc000000
 904:	02002e13 	andeq	r2, r0, #304	; 0x130
 908:	2e060104 	adfcss	f0, f6, f4
 90c:	01040200 	mrseq	r0, R12_usr
 910:	4b6a9f06 	blmi	1aa8530 <__bss_end__+0x1a9e3d0>
 914:	032e6703 	teqeq	lr, #786432	; 0xc0000
 918:	02002e21 	andeq	r2, r0, #528	; 0x210
 91c:	2e060104 	adfcss	f0, f6, f4
 920:	01040200 	mrseq	r0, R12_usr
 924:	02009f06 	andeq	r9, r0, #6, 30
 928:	bd6a0104 	stflte	f0, [sl, #-16]!
 92c:	7fa603f3 	svcvc	0x00a603f3
 930:	002f2008 	eoreq	r2, pc, r8
 934:	06010402 	streq	r0, [r1], -r2, lsl #8
 938:	4bbb064a 	blmi	feec2268 <__bss_end__+0xfeeb8108>
 93c:	00da032f 	sbcseq	r0, sl, pc, lsr #6
 940:	484c83f2 	stmdami	ip, {r1, r4, r5, r6, r7, r8, r9, pc}^
 944:	842f2f31 	strthi	r2, [pc], #-3889	; 94c <_start-0x76b4>
 948:	4d2d2f4b 	stcmi	15, cr2, [sp, #-300]!	; 0xfffffed4
 94c:	832f3031 	teqhi	pc, #49	; 0x31
 950:	01040200 	mrseq	r0, R12_usr
 954:	0200be2c 	andeq	fp, r0, #44, 28	; 0x2c0
 958:	4a060104 	bmi	180d70 <__bss_end__+0x176c10>
 95c:	3602bc06 	strcc	fp, [r2], -r6, lsl #24
 960:	ba0e0316 	blt	3815c0 <__bss_end__+0x377460>
 964:	08302108 	ldmdaeq	r0!, {r3, r8, sp}
 968:	21083121 	tstcs	r8, r1, lsr #2
 96c:	30210830 	eorcc	r0, r1, r0, lsr r8
 970:	2108304b 	tstcs	r8, fp, asr #32
 974:	2f31d930 	svccs	0x0031d930
 978:	01040200 	mrseq	r0, R12_usr
 97c:	04020065 	streq	r0, [r2], #-101	; 0x65
 980:	004a0602 	subeq	r0, sl, r2, lsl #12
 984:	06010402 	streq	r0, [r1], -r2, lsl #8
 988:	00664203 	rsbeq	r4, r6, r3, lsl #4
 98c:	06020402 	streq	r0, [r2], -r2, lsl #8
 990:	c2030666 	andgt	r0, r3, #106954752	; 0x6600000
 994:	02684a00 	rsbeq	r4, r8, #0, 20
 998:	01010010 	tsteq	r1, r0, lsl r0
 99c:	00000093 	muleq	r0, r3, r0
 9a0:	007d0002 	rsbseq	r0, sp, r2
 9a4:	01020000 	mrseq	r0, (UNDEF: 2)
 9a8:	000d0efb 	strdeq	r0, [sp], -fp
 9ac:	01010101 	tsteq	r1, r1, lsl #2
 9b0:	01000000 	mrseq	r0, (UNDEF: 0)
 9b4:	63010000 	movwvs	r0, #4096	; 0x1000
 9b8:	30343173 	eorscc	r3, r4, r3, ror r1
 9bc:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 9c0:	552f0063 	strpl	r0, [pc, #-99]!	; 965 <_start-0x769b>
 9c4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 9c8:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 9cc:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 9d0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 9d4:	6f746b73 	svcvs	0x00746b73
 9d8:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 9dc:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 844 <_start-0x77bc>
 9e0:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 9e4:	31726574 	cmncc	r2, r4, ror r5
 9e8:	2f303239 	svccs	0x00303239
 9ec:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 9f0:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 9f4:	30343173 	eorscc	r3, r4, r3, ror r1
 9f8:	30322d65 	eorscc	r2, r2, r5, ror #26
 9fc:	2f6e6977 	svccs	0x006e6977
 a00:	7062696c 	rsbvc	r6, r2, ip, ror #18
 a04:	63000069 	movwvs	r0, #105	; 0x69
 a08:	6e61656c 	cdpvs	5, 6, cr6, cr1, cr12, {3}
 a0c:	6265722d 	rsbvs	r7, r5, #-805306366	; 0xd0000002
 a10:	2e746f6f 	cdpcs	15, 7, cr6, cr4, cr15, {3}
 a14:	00010063 	andeq	r0, r1, r3, rrx
 a18:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 a1c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 a20:	00000000 	andeq	r0, r0, r0
 a24:	91000205 	tstls	r0, r5, lsl #4
 a28:	2f150000 	svccs	0x00150000
 a2c:	06024b83 	streq	r4, [r2], -r3, lsl #23
 a30:	96010100 	strls	r0, [r1], -r0, lsl #2
 a34:	02000000 	andeq	r0, r0, #0
 a38:	00007700 	andeq	r7, r0, r0, lsl #14
 a3c:	fb010200 	blx	41246 <__bss_end__+0x370e6>
 a40:	01000d0e 	tsteq	r0, lr, lsl #26
 a44:	00010101 	andeq	r0, r1, r1, lsl #2
 a48:	00010000 	andeq	r0, r1, r0
 a4c:	73630100 	cmnvc	r3, #0, 2
 a50:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 a54:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 a58:	73552f00 	cmpvc	r5, #0, 30
 a5c:	2f737265 	svccs	0x00737265
 a60:	61697262 	cmnvs	r9, r2, ror #4
 a64:	6e756a6e 	vsubvs.f32	s13, s10, s29
 a68:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 a6c:	706f746b 	rsbvc	r7, pc, fp, ror #8
 a70:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 a74:	2f6c6f6f 	svccs	0x006c6f6f
 a78:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 a7c:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 a80:	432f3032 	teqmi	pc, #50	; 0x32
 a84:	30343153 	eorscc	r3, r4, r3, asr r1
 a88:	73632f45 	cmnvc	r3, #276	; 0x114
 a8c:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 a90:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 a94:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 8f8 <_start-0x7708>
 a98:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 a9c:	73630000 	cmnvc	r3, #0
 aa0:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
 aa4:	0100632e 	tsteq	r0, lr, lsr #6
 aa8:	70720000 	rsbsvc	r0, r2, r0
 aac:	00682e69 	rsbeq	r2, r8, r9, ror #28
 ab0:	00000002 	andeq	r0, r0, r2
 ab4:	28020500 	stmdacs	r2, {r8, sl}
 ab8:	14000091 	strne	r0, [r0], #-145	; 0x91
 abc:	2d2f3132 	stfcss	f3, [pc, #-200]!	; 9fc <_start-0x7604>
 ac0:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 ac4:	2f4d4901 	svccs	0x004d4901
 ac8:	01000602 	tsteq	r0, r2, lsl #12
 acc:	00009901 	andeq	r9, r0, r1, lsl #18
 ad0:	77000200 	strvc	r0, [r0, -r0, lsl #4]
 ad4:	02000000 	andeq	r0, r0, #0
 ad8:	0d0efb01 	vstreq	d15, [lr, #-4]
 adc:	01010100 	mrseq	r0, (UNDEF: 17)
 ae0:	00000001 	andeq	r0, r0, r1
 ae4:	01000001 	tsteq	r0, r1
 ae8:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 aec:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
 af0:	2f006372 	svccs	0x00006372
 af4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 af8:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 afc:	6a6e6169 	bvs	1b990a8 <__bss_end__+0x1b8ef48>
 b00:	442f6e75 	strtmi	r6, [pc], #-3701	; b08 <_start-0x74f8>
 b04:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 b08:	732f706f 	teqvc	pc, #111	; 0x6f
 b0c:	6f6f6863 	svcvs	0x006f6863
 b10:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 b14:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 b18:	30323931 	eorscc	r3, r2, r1, lsr r9
 b1c:	3153432f 	cmpcc	r3, pc, lsr #6
 b20:	2f453034 	svccs	0x00453034
 b24:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 b28:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 b2c:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 b30:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 b34:	00006970 	andeq	r6, r0, r0, ror r9
 b38:	6f626572 	svcvs	0x00626572
 b3c:	632e746f 	teqvs	lr, #1862270976	; 0x6f000000
 b40:	00000100 	andeq	r0, r0, r0, lsl #2
 b44:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 b48:	00020068 	andeq	r0, r2, r8, rrx
 b4c:	05000000 	streq	r0, [r0, #-0]
 b50:	00915c02 	addseq	r5, r1, r2, lsl #24
 b54:	010d0300 	mrseq	r0, SP_mon
 b58:	852f3114 	strhi	r3, [pc, #-276]!	; a4c <_start-0x75b4>
 b5c:	4d4b2f15 	stclmi	15, cr2, [fp, #-84]	; 0xffffffac
 b60:	5235672f 	eorspl	r6, r5, #12320768	; 0xbc0000
 b64:	00100267 	andseq	r0, r0, r7, ror #4
 b68:	00a00101 	adceq	r0, r0, r1, lsl #2
 b6c:	00020000 	andeq	r0, r2, r0
 b70:	00000076 	andeq	r0, r0, r6, ror r0
 b74:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 b78:	0101000d 	tsteq	r1, sp
 b7c:	00000101 	andeq	r0, r0, r1, lsl #2
 b80:	00000100 	andeq	r0, r0, r0, lsl #2
 b84:	31736301 	cmncc	r3, r1, lsl #6
 b88:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 b8c:	00637273 	rsbeq	r7, r3, r3, ror r2
 b90:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 b94:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 b98:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 b9c:	2f6e756a 	svccs	0x006e756a
 ba0:	6b736544 	blvs	1cda0b8 <__bss_end__+0x1ccff58>
 ba4:	2f706f74 	svccs	0x00706f74
 ba8:	6f686373 	svcvs	0x00686373
 bac:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 bb0:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 bb4:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 bb8:	53432f30 	movtpl	r2, #16176	; 0x3f30
 bbc:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 bc0:	3173632f 	cmncc	r3, pc, lsr #6
 bc4:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 bc8:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 bcc:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 bd0:	00697062 	rsbeq	r7, r9, r2, rrx
 bd4:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
 bd8:	632e7265 	teqvs	lr, #1342177286	; 0x50000006
 bdc:	00000100 	andeq	r0, r0, r0, lsl #2
 be0:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 be4:	00020068 	andeq	r0, r2, r8, rrx
 be8:	05000000 	streq	r0, [r0, #-0]
 bec:	0091d002 	addseq	sp, r1, r2
 bf0:	2f131600 	svccs	0x00131600
 bf4:	0402002d 	streq	r0, [r2], #-45	; 0x2d
 bf8:	062e0601 	strteq	r0, [lr], -r1, lsl #12
 bfc:	4b2f3168 	blmi	bcd1a4 <__bss_end__+0xbc3044>
 c00:	2f4c4b4c 	svccs	0x004c4b4c
 c04:	842f2f6a 	strthi	r2, [pc], #-3946	; c0c <_start-0x73f4>
 c08:	0008022f 	andeq	r0, r8, pc, lsr #4
 c0c:	016b0101 	cmneq	fp, r1, lsl #2
 c10:	00020000 	andeq	r0, r2, r0
 c14:	00000120 	andeq	r0, r0, r0, lsr #2
 c18:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 c1c:	0101000d 	tsteq	r1, sp
 c20:	00000101 	andeq	r0, r0, r1, lsl #2
 c24:	00000100 	andeq	r0, r0, r0, lsl #2
 c28:	2d796d01 	ldclcs	13, cr6, [r9, #-4]!
 c2c:	00637273 	rsbeq	r7, r3, r3, ror r2
 c30:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 c34:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
 c38:	432f6c61 	teqmi	pc, #24832	; 0x6100
 c3c:	616c6c65 	cmnvs	ip, r5, ror #24
 c40:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 c44:	6f6e2d6d 	svcvs	0x006e2d6d
 c48:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 c4c:	2f696261 	svccs	0x00696261
 c50:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 c54:	73632d33 	cmnvc	r3, #3264	; 0xcc0
 c58:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
 c5c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 c60:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
 c64:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 c68:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 c6c:	61652d65 	cmnvs	r5, r5, ror #26
 c70:	342f6962 	strtcc	r6, [pc], #-2402	; c78 <_start-0x7388>
 c74:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 c78:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 c7c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
 c80:	73552f00 	cmpvc	r5, #0, 30
 c84:	2f737265 	svccs	0x00737265
 c88:	61697262 	cmnvs	r9, r2, ror #4
 c8c:	6e756a6e 	vsubvs.f32	s13, s10, s29
 c90:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 c94:	706f746b 	rsbvc	r7, pc, fp, ror #8
 c98:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 c9c:	2f6c6f6f 	svccs	0x006c6f6f
 ca0:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 ca4:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 ca8:	432f3032 	teqmi	pc, #50	; 0x32
 cac:	30343153 	eorscc	r3, r4, r3, asr r1
 cb0:	73632f45 	cmnvc	r3, #276	; 0x114
 cb4:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 cb8:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 cbc:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; b20 <_start-0x74e0>
 cc0:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 cc4:	73752f00 	cmnvc	r5, #0, 30
 cc8:	6f6c2f72 	svcvs	0x006c2f72
 ccc:	2f6c6163 	svccs	0x006c6163
 cd0:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
 cd4:	612f7261 	teqvs	pc, r1, ror #4
 cd8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 cdc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 ce0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 ce4:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 ce8:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
 cec:	30373173 	eorscc	r3, r7, r3, ror r1
 cf0:	72612f65 	rsbvc	r2, r1, #404	; 0x194
 cf4:	6f6e2d6d 	svcvs	0x006e2d6d
 cf8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 cfc:	2f696261 	svccs	0x00696261
 d00:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 d04:	00656475 	rsbeq	r6, r5, r5, ror r4
 d08:	616d6b00 	cmnvs	sp, r0, lsl #22
 d0c:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 d10:	0100632e 	tsteq	r0, lr, lsr #6
 d14:	74730000 	ldrbtvc	r0, [r3], #-0
 d18:	66656464 	strbtvs	r6, [r5], -r4, ror #8
 d1c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 d20:	70720000 	rsbsvc	r0, r2, r0
 d24:	00682e69 	rsbeq	r2, r8, r9, ror #28
 d28:	73000003 	movwvc	r0, #3
 d2c:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
 d30:	00682e67 	rsbeq	r2, r8, r7, ror #28
 d34:	00000004 	andeq	r0, r0, r4
 d38:	24020500 	strcs	r0, [r2], #-1280	; 0x500
 d3c:	03000095 	movweq	r0, #149	; 0x95
 d40:	002f0118 	eoreq	r0, pc, r8, lsl r1	; <UNPREDICTABLE>
 d44:	06010402 	streq	r0, [r1], -r2, lsl #8
 d48:	4bbc0682 	blmi	fef02758 <__bss_end__+0xfeef85f8>
 d4c:	be4d4b4b 	vmlslt.f64	d20, d13, d11
 d50:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 d54:	06820601 	streq	r0, [r2], r1, lsl #12
 d58:	004b4bbc 	strheq	r4, [fp], #-188	; 0xffffff44
 d5c:	06010402 	streq	r0, [r1], -r2, lsl #8
 d60:	4bbb064a 	blmi	feec2690 <__bss_end__+0xfeeb8530>
 d64:	032f3083 	teqeq	pc, #131	; 0x83
 d68:	002fba0a 	eoreq	fp, pc, sl, lsl #20
 d6c:	06010402 	streq	r0, [r1], -r2, lsl #8
 d70:	67bb0682 	ldrvs	r0, [fp, r2, lsl #13]!
 d74:	14c213f9 	strbne	r1, [r2], #1017	; 0x3f9
 d78:	01000802 	tsteq	r0, r2, lsl #16
 d7c:	00008601 	andeq	r8, r0, r1, lsl #12
 d80:	72000200 	andvc	r0, r0, #0, 4
 d84:	02000000 	andeq	r0, r0, #0
 d88:	0d0efb01 	vstreq	d15, [lr, #-4]
 d8c:	01010100 	mrseq	r0, (UNDEF: 17)
 d90:	00000001 	andeq	r0, r0, r1
 d94:	01000001 	tsteq	r0, r1
 d98:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 d9c:	73552f00 	cmpvc	r5, #0, 30
 da0:	2f737265 	svccs	0x00737265
 da4:	61697262 	cmnvs	r9, r2, ror #4
 da8:	6e756a6e 	vsubvs.f32	s13, s10, s29
 dac:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 db0:	706f746b 	rsbvc	r7, pc, fp, ror #8
 db4:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 db8:	2f6c6f6f 	svccs	0x006c6f6f
 dbc:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 dc0:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 dc4:	432f3032 	teqmi	pc, #50	; 0x32
 dc8:	30343153 	eorscc	r3, r4, r3, asr r1
 dcc:	73632f45 	cmnvc	r3, #276	; 0x114
 dd0:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 dd4:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 dd8:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; c3c <_start-0x73c4>
 ddc:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 de0:	75700000 	ldrbvc	r0, [r0, #-0]!
 de4:	61686374 	smcvs	34356	; 0x8634
 de8:	00632e72 	rsbeq	r2, r3, r2, ror lr
 dec:	72000001 	andvc	r0, r0, #1
 df0:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 df4:	00000200 	andeq	r0, r0, r0, lsl #4
 df8:	02050000 	andeq	r0, r5, #0
 dfc:	0000969c 	muleq	r0, ip, r6
 e00:	06024a14 			; <UNDEFINED> instruction: 0x06024a14
 e04:	Address 0x0000000000000e04 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0x56e
   4:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
   8:	6265725f 	rsbvs	r7, r5, #-268435451	; 0xf0000005
   c:	00746f6f 	rsbseq	r6, r4, pc, ror #30
  10:	20554e47 	subscs	r4, r5, r7, asr #28
  14:	2e342043 	cdpcs	0, 3, cr2, cr4, cr3, {2}
  18:	20332e38 	eorscs	r2, r3, r8, lsr lr
  1c:	70636d2d 	rsbvc	r6, r3, sp, lsr #26
  20:	72613d75 	rsbvc	r3, r1, #7488	; 0x1d40
  24:	3731316d 	ldrcc	r3, [r1, -sp, ror #2]!
  28:	667a6a36 			; <UNDEFINED> instruction: 0x667a6a36
  2c:	2d20732d 	stccs	3, cr7, [r0, #-180]!	; 0xffffff4c
  30:	6e75746d 	cdpvs	4, 7, cr7, cr5, cr13, {3}
  34:	72613d65 	rsbvc	r3, r1, #6464	; 0x1940
  38:	3731316d 	ldrcc	r3, [r1, -sp, ror #2]!
  3c:	667a6a36 			; <UNDEFINED> instruction: 0x667a6a36
  40:	2d20732d 	stccs	3, cr7, [r0, #-180]!	; 0xffffff4c
  44:	62646767 	rsbvs	r6, r4, #27000832	; 0x19c0000
  48:	674f2d20 	strbvs	r2, [pc, -r0, lsr #26]
  4c:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xd20
  50:	6e673d64 	cdpvs	13, 6, cr3, cr7, cr4, {3}
  54:	20393975 	eorscs	r3, r9, r5, ror r9
  58:	7266662d 	rsbvc	r6, r6, #47185920	; 0x2d00000
  5c:	74736565 	ldrbtvc	r6, [r3], #-1381	; 0x565
  60:	69646e61 	stmdbvs	r4!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  64:	3400676e 	strcc	r6, [r0], #-1902	; 0x76e
  68:	7365742d 	cmnvc	r5, #754974720	; 0x2d000000
  6c:	78652d74 	stmdavc	r5!, {r2, r4, r5, r6, r8, sl, fp, sp}^
  70:	632e7469 	teqvs	lr, #1761607680	; 0x69000000
  74:	746f6e00 	strbtvc	r6, [pc], #-3584	; 7c <_start-0x7f84>
  78:	6e69616d 	powvsez	f6, f1, #5.0
  7c:	61747300 	cmnvs	r4, r0, lsl #6
  80:	75006b63 	strvc	r6, [r0, #-2915]	; 0xb63
  84:	5f747261 	svcpl	0x00747261
  88:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
  8c:	736e7500 	cmnvc	lr, #0, 10
  90:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
  94:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
  98:	63007261 	movwvs	r7, #609	; 0x261
  9c:	6e61656c 	cdpvs	5, 6, cr6, cr1, cr12, {3}
  a0:	6265725f 	rsbvs	r7, r5, #-268435451	; 0xf0000005
  a4:	00746f6f 	rsbseq	r6, r4, pc, ror #30
  a8:	5f697072 	svcpl	0x00697072
  ac:	6b726f66 	blvs	1c9be4c <__bss_end__+0x1c91cec>
  b0:	73552f00 	cmpvc	r5, #0, 30
  b4:	2f737265 	svccs	0x00737265
  b8:	61697262 	cmnvs	r9, r2, ror #4
  bc:	6e756a6e 	vsubvs.f32	s13, s10, s29
  c0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
  c4:	706f746b 	rsbvc	r7, pc, fp, ror #8
  c8:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
  cc:	2f6c6f6f 	svccs	0x006c6f6f
  d0:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
  d4:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
  d8:	432f3032 	teqmi	pc, #50	; 0x32
  dc:	30343153 	eorscc	r3, r4, r3, asr r1
  e0:	73632f45 	cmnvc	r3, #276	; 0x114
  e4:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
  e8:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
  ec:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; ffffff50 <__bss_end__+0xffff5df0>
  f0:	2f736261 	svccs	0x00736261
  f4:	68742d36 	ldmdavs	r4!, {r1, r2, r4, r5, r8, sl, fp, sp}^
  f8:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
  fc:	2d322f73 	ldccs	15, cr2, [r2, #-460]!	; 0xfffffe34
 100:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 104:	2e736461 	cdpcs	4, 7, cr6, cr3, cr1, {3}
 108:	0077656e 	rsbseq	r6, r7, lr, ror #10
 10c:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 110:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
 114:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
 118:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 11c:	7200746e 	andvc	r7, r0, #1845493760	; 0x6e000000
 120:	745f6970 	ldrbvc	r6, [pc], #-2416	; 128 <_start-0x7ed8>
 124:	61657268 	cmnvs	r5, r8, ror #4
 128:	74735f64 	ldrbtvc	r5, [r3], #-3940	; 0xf64
 12c:	00747261 	rsbseq	r7, r4, r1, ror #4
 130:	76697274 			; <UNDEFINED> instruction: 0x76697274
 134:	006c6169 	rsbeq	r6, ip, r9, ror #2
 138:	55465f5f 	strbpl	r5, [r6, #-3935]	; 0xf5f
 13c:	4954434e 	ldmdbmi	r4, {r1, r2, r3, r6, r8, r9, lr}^
 140:	5f5f4e4f 	svcpl	0x005f4e4f
 144:	67657200 	strbvs	r7, [r5, -r0, lsl #4]!
 148:	7661735f 			; <UNDEFINED> instruction: 0x7661735f
 14c:	72615f65 	rsbvc	r5, r1, #404	; 0x194
 150:	6c006165 	stfvss	f6, [r0], {101}	; 0x65
 154:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 158:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 15c:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 160:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
 164:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 168:	70720074 	rsbsvc	r0, r2, r4, ror r0
 16c:	68745f69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 170:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 174:	7200745f 	andvc	r7, r0, #1593835520	; 0x5f000000
 178:	795f6970 	ldmdbvc	pc, {r4, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
 17c:	646c6569 	strbtvs	r6, [ip], #-1385	; 0x569
 180:	7a697300 	bvc	1a5cd88 <__bss_end__+0x1a52c28>
 184:	70797465 	rsbsvc	r7, r9, r5, ror #8
 188:	6f6c0065 	svcvs	0x006c0065
 18c:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
 190:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 194:	00746e69 	rsbseq	r6, r4, r9, ror #28
 198:	5f697072 	svcpl	0x00697072
 19c:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 1a0:	73006461 	movwvc	r6, #1121	; 0x461
 1a4:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xf68
 1a8:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
 1ac:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 1b0:	5f323374 	svcpl	0x00323374
 1b4:	6d6b0074 	stclvs	0, cr0, [fp, #-464]!	; 0xfffffe30
 1b8:	6f6c6c61 	svcvs	0x006c6c61
 1bc:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 1c0:	70007469 	andvc	r7, r0, r9, ror #8
 1c4:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 1c8:	646e615f 	strbtvs	r6, [lr], #-351	; 0x15f
 1cc:	6569645f 	strbvs	r6, [r9, #-1119]!	; 0x45f
 1d0:	705f5100 	subsvc	r5, pc, r0, lsl #2
 1d4:	00687375 	rsbeq	r7, r8, r5, ror r3
 1d8:	5f697072 	svcpl	0x00697072
 1dc:	5f727563 	svcpl	0x00727563
 1e0:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 1e4:	72006461 	andvc	r6, r0, #1627389952	; 0x61000000
 1e8:	742d6970 	strtvc	r6, [sp], #-2416	; 0x970
 1ec:	61657268 	cmnvs	r5, r8, ror #4
 1f0:	00632e64 	rsbeq	r2, r3, r4, ror #28
 1f4:	5f697072 	svcpl	0x00697072
 1f8:	6e696f6a 	cdpvs	15, 6, cr6, cr9, cr10, {3}
 1fc:	69786500 	ldmdbvs	r8!, {r8, sl, sp, lr}^
 200:	646f6374 	strbtvs	r6, [pc], #-884	; 208 <_start-0x7df8>
 204:	656e0065 	strbvs	r0, [lr, #-101]!	; 0x65
 208:	745f7478 	ldrbvc	r7, [pc], #-1144	; 210 <_start-0x7df0>
 20c:	61657268 	cmnvs	r5, r8, ror #4
 210:	5f6e0064 	svcpl	0x006e0064
 214:	006e7572 	rsbeq	r7, lr, r2, ror r5
 218:	72665f6e 	rsbvc	r5, r6, #440	; 0x1b8
 21c:	72006565 	andvc	r6, r0, #423624704	; 0x19400000
 220:	695f6970 	ldmdbvs	pc, {r4, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
 224:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 228:	5f6c616e 	svcpl	0x006c616e
 22c:	63656863 	cmnvs	r5, #6488064	; 0x630000
 230:	5f51006b 	svcpl	0x0051006b
 234:	656c656e 	strbvs	r6, [ip, #-1390]!	; 0x56e
 238:	7072006d 	rsbsvc	r0, r2, sp, rrx
 23c:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
 240:	745f7469 	ldrbvc	r7, [pc], #-1129	; 248 <_start-0x7db8>
 244:	706d6172 	rsbvc	r6, sp, r2, ror r1
 248:	6e696c6f 	cdpvs	12, 6, cr6, cr9, cr15, {3}
 24c:	6d6b0065 	stclvs	0, cr0, [fp, #-404]!	; 0xfffffe6c
 250:	6f6c6c61 	svcvs	0x006c6c61
 254:	6c615f63 	stclvs	15, cr5, [r1], #-396	; 0xfffffe74
 258:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
 25c:	70720064 	rsbsvc	r0, r2, r4, rrx
 260:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xf69
 264:	5f6b6361 	svcpl	0x006b6361
 268:	63656863 	cmnvs	r5, #6488064	; 0x630000
 26c:	7266006b 	rsbvc	r0, r6, #107	; 0x6b
 270:	00716565 	rsbseq	r6, r1, r5, ror #10
 274:	5f697072 	svcpl	0x00697072
 278:	63617865 	cmnvs	r1, #6619136	; 0x650000
 27c:	6c735f74 	ldclvs	15, cr5, [r3], #-464	; 0xfffffe30
 280:	00706565 	rsbseq	r6, r0, r5, ror #10
 284:	6d655f51 	stclvs	15, cr5, [r5, #-324]!	; 0xfffffebc
 288:	00797470 	rsbseq	r7, r9, r0, ror r4
 28c:	6f705f51 	svcvs	0x00705f51
 290:	63730070 	cmnvs	r3, #112	; 0x70
 294:	75646568 	strbvc	r6, [r4, #-1384]!	; 0x568
 298:	5f72656c 	svcpl	0x0072656c
 29c:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 2a0:	74006461 	strvc	r6, [r0], #-1121	; 0x461
 2a4:	006c6961 	rsbeq	r6, ip, r1, ror #18
 2a8:	615f6874 	cmpvs	pc, r4, ror r8	; <UNPREDICTABLE>
 2ac:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 2b0:	5f687400 	svcpl	0x00687400
 2b4:	65657266 	strbvs	r7, [r5, #-614]!	; 0x266
 2b8:	615f5100 	cmpvs	pc, r0, lsl #2
 2bc:	6e657070 	mcrvs	0, 3, r7, cr5, cr0, {3}
 2c0:	65680064 	strbvs	r0, [r8, #-100]!	; 0x64
 2c4:	72006461 	andvc	r6, r0, #1627389952	; 0x61000000
 2c8:	00716e75 	rsbseq	r6, r1, r5, ror lr
 2cc:	5f697072 	svcpl	0x00697072
 2d0:	69777363 	ldmdbvs	r7!, {r0, r1, r5, r6, r8, r9, ip, sp, lr}^
 2d4:	00686374 	rsbeq	r6, r8, r4, ror r3
 2d8:	5f646c6f 	svcpl	0x00646c6f
 2dc:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 2e0:	6e006461 	cdpvs	4, 0, cr6, cr0, cr1, {3}
 2e4:	6f6c6c61 	svcvs	0x006c6c61
 2e8:	00646563 	rsbeq	r6, r4, r3, ror #10
 2ec:	5f697072 	svcpl	0x00697072
 2f0:	74697865 	strbtvc	r7, [r9], #-2149	; 0x865
 2f4:	72696300 	rsbvc	r6, r9, #0, 6
 2f8:	616c7563 	cmnvs	ip, r3, ror #10
 2fc:	00632e72 	rsbeq	r2, r3, r2, ror lr
 300:	705f7163 	subsvc	r7, pc, r3, ror #2
 304:	6e5f706f 	cdpvs	0, 5, cr7, cr15, cr15, {3}
 308:	6c626e6f 	stclvs	14, cr6, [r2], #-444	; 0xfffffe44
 30c:	006b636f 	rsbeq	r6, fp, pc, ror #6
 310:	705f7163 	subsvc	r7, pc, r3, ror #2
 314:	6e5f706f 	cdpvs	0, 5, cr7, cr15, cr15, {3}
 318:	626f6e5f 	rsbvs	r6, pc, #1520	; 0x5f0
 31c:	6f006b6c 	svcvs	0x00006b6c
 320:	66726576 			; <UNDEFINED> instruction: 0x66726576
 324:	00776f6c 	rsbseq	r6, r7, ip, ror #30
 328:	61746164 	cmnvs	r4, r4, ror #2
 32c:	65716300 	ldrbvs	r6, [r1, #-768]!	; 0x300
 330:	7300745f 	movwvc	r7, #1119	; 0x45f
 334:	5f657a69 	svcpl	0x00657a69
 338:	71630074 	smcvc	12292	; 0x3004
 33c:	6565705f 	strbvs	r7, [r5, #-95]!	; 0x5f
 340:	006e5f6b 	rsbeq	r5, lr, fp, ror #30
 344:	6f727265 	svcvs	0x00727265
 348:	665f7372 			; <UNDEFINED> instruction: 0x665f7372
 34c:	6c617461 	cfstrdvs	mvd7, [r1], #-388	; 0xfffffe7c
 350:	6300705f 	movwvs	r7, #95	; 0x5f
 354:	6f705f71 	svcvs	0x00705f71
 358:	656d0070 	strbvs	r0, [sp, #-112]!	; 0x70
 35c:	7465736d 	strbtvc	r7, [r5], #-877	; 0x36d
 360:	5f716300 	svcpl	0x00716300
 364:	6170736e 	cmnvs	r0, lr, ror #6
 368:	63006563 	movwvs	r6, #1379	; 0x563
 36c:	6e695f71 	mcrvs	15, 3, r5, cr9, cr1, {3}
 370:	63007469 	movwvs	r7, #1129	; 0x469
 374:	6f705f71 	svcvs	0x00705f71
 378:	006e5f70 	rsbeq	r5, lr, r0, ror pc
 37c:	705f7163 	subsvc	r7, pc, r3, ror #2
 380:	00687375 	rsbeq	r7, r8, r5, ror r3
 384:	705f7163 	subsvc	r7, pc, r3, ror #2
 388:	5f687375 	svcpl	0x00687375
 38c:	7163006e 	cmnvc	r3, lr, rrx
 390:	706d655f 	rsbvc	r6, sp, pc, asr r5
 394:	66007974 			; <UNDEFINED> instruction: 0x66007974
 398:	65636e65 	strbvs	r6, [r3, #-3685]!	; 0xe65
 39c:	5f716300 	svcpl	0x00716300
 3a0:	656c656e 	strbvs	r6, [ip, #-1390]!	; 0x56e
 3a4:	5f63006d 	svcpl	0x0063006d
 3a8:	00667562 	rsbeq	r7, r6, r2, ror #10
 3ac:	665f7163 	ldrbvs	r7, [pc], -r3, ror #2
 3b0:	006c6c75 	rsbeq	r6, ip, r5, ror ip
 3b4:	705f7163 	subsvc	r7, pc, r3, ror #2
 3b8:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 3bc:	5f716300 	svcpl	0x00716300
 3c0:	63006b6f 	movwvs	r6, #2927	; 0xb6f
 3c4:	00745f71 	rsbseq	r5, r4, r1, ror pc
 3c8:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 3cc:	6d656d2f 	stclvs	13, cr6, [r5, #-188]!	; 0xffffff44
 3d0:	2e746573 	mrccs	5, 3, r6, cr4, cr3, {3}
 3d4:	552f0063 	strpl	r0, [pc, #-99]!	; 379 <_start-0x7c87>
 3d8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 3dc:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 3e0:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 3e4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 3e8:	6f746b73 	svcvs	0x00746b73
 3ec:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 3f0:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 258 <_start-0x7da8>
 3f4:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 3f8:	31726574 	cmncc	r2, r4, ror r5
 3fc:	2f303239 	svccs	0x00303239
 400:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 404:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 408:	30343173 	eorscc	r3, r4, r3, ror r1
 40c:	30322d65 	eorscc	r2, r2, r5, ror #26
 410:	2f6e6977 	svccs	0x006e6977
 414:	7062696c 	rsbvc	r6, r2, ip, ror #18
 418:	5f5f0069 	svcpl	0x005f0069
 41c:	63756e67 	cmnvs	r5, #1648	; 0x670
 420:	5f61765f 	svcpl	0x0061765f
 424:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
 428:	62696c00 	rsbvs	r6, r9, #0, 24
 42c:	72702f63 	rsbsvc	r2, r0, #396	; 0x18c
 430:	6b746e69 	blvs	1d1bddc <__bss_end__+0x1d11c7c>
 434:	7600632e 	strvc	r6, [r0], -lr, lsr #6
 438:	72705f61 	rsbsvc	r5, r0, #388	; 0x184
 43c:	6b746e69 	blvs	1d1bde8 <__bss_end__+0x1d11c88>
 440:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
 444:	696c5f61 	stmdbvs	ip!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
 448:	61007473 	tstvs	r0, r3, ror r4
 44c:	00736772 	rsbseq	r6, r3, r2, ror r7
 450:	70615f5f 	rsbvc	r5, r1, pc, asr pc
 454:	62696c00 	rsbvs	r6, r9, #0, 24
 458:	75702f63 	ldrbvc	r2, [r0, #-3939]!	; 0xf63
 45c:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
 460:	746e6900 	strbtvc	r6, [lr], #-2304	; 0x900
 464:	616e7265 	cmnvs	lr, r5, ror #4
 468:	75705f6c 	ldrbvc	r5, [r0, #-3948]!	; 0xf6c
 46c:	72006b74 	andvc	r6, r0, #116, 22	; 0x1d000
 470:	705f6970 	subsvc	r6, pc, r0, ror r9	; <UNPREDICTABLE>
 474:	68637475 	stmdavs	r3!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
 478:	6e007261 	cdpvs	2, 0, cr7, cr0, cr1, {3}
 47c:	705f6765 	subsvc	r6, pc, r5, ror #14
 480:	76657200 	strbtvc	r7, [r5], -r0, lsl #4
 484:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0x265
 488:	64736900 	ldrbtvs	r6, [r3], #-2304	; 0x900
 48c:	74696769 	strbtvc	r6, [r9], #-1897	; 0x769
 490:	74757000 	ldrbtvc	r7, [r5], #-0
 494:	70665f73 	rsbvc	r5, r6, r3, ror pc
 498:	73616200 	cmnvc	r1, #0, 4
 49c:	69730065 	ldmdbvs	r3!, {r0, r2, r5, r6}^
 4a0:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
 4a4:	6c00705f 	stcvs	0, cr7, [r0], {95}	; 0x5f
 4a8:	2f636269 	svccs	0x00636269
 4ac:	702d6176 	eorvc	r6, sp, r6, ror r1
 4b0:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 4b4:	00632e6b 	rsbeq	r2, r3, fp, ror #28
 4b8:	5f697072 	svcpl	0x00697072
 4bc:	5f746573 	svcpl	0x00746573
 4c0:	7074756f 	rsbsvc	r7, r4, pc, ror #10
 4c4:	77007475 	smlsdxvc	r0, r5, r4, r7
 4c8:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
 4cc:	74757000 	ldrbtvc	r7, [r5], #-0
 4d0:	70665f63 	rsbvc	r5, r6, r3, ror #30
 4d4:	696d6500 	stmdbvs	sp!, {r8, sl, sp, lr}^
 4d8:	73630074 	cmnvc	r3, #116	; 0x74
 4dc:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 4e0:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 4e4:	656c632f 	strbvs	r6, [ip, #-815]!	; 0x32f
 4e8:	722d6e61 	eorvc	r6, sp, #1552	; 0x610
 4ec:	6f6f6265 	svcvs	0x006f6265
 4f0:	00632e74 	rsbeq	r2, r3, r4, ror lr
 4f4:	616c6564 	cmnvs	ip, r4, ror #10
 4f8:	736d5f79 	cmnvc	sp, #484	; 0x1e4
 4fc:	31736300 	cmncc	r3, r0, lsl #6
 500:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 504:	2f637273 	svccs	0x00637273
 508:	61747363 	cmnvs	r4, r3, ror #6
 50c:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
 510:	625f5f00 	subsvs	r5, pc, #0, 30
 514:	735f7373 	cmpvc	pc, #-872415231	; 0xcc000001
 518:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
 51c:	5f005f5f 	svcpl	0x00005f5f
 520:	7373625f 	cmnvc	r3, #-268435451	; 0xf0000005
 524:	646e655f 	strbtvs	r6, [lr], #-1375	; 0x55f
 528:	62005f5f 	andvs	r5, r0, #380	; 0x17c
 52c:	655f7373 	ldrbvs	r7, [pc, #-883]	; 1c1 <_start-0x7e3f>
 530:	5f00646e 	svcpl	0x0000646e
 534:	61747363 	cmnvs	r4, r3, ror #6
 538:	61007472 	tstvs	r0, r2, ror r4
 53c:	73755f74 	cmnvc	r5, #116, 30	; 0x1d0
 540:	6c5f7265 	lfmvs	f7, 2, [pc], {101}	; 0x65
 544:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
 548:	5f4d5000 	svcpl	0x004d5000
 54c:	53534150 	cmppl	r3, #80, 2
 550:	44524f57 	ldrbmi	r4, [r2], #-3927	; 0xf57
 554:	31736300 	cmncc	r3, r0, lsl #6
 558:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 55c:	2f637273 	svccs	0x00637273
 560:	6f626572 	svcvs	0x00626572
 564:	632e746f 	teqvs	lr, #1862270976	; 0x6f000000
 568:	5f4d5000 	svcpl	0x004d5000
 56c:	43545352 	cmpmi	r4, #1207959553	; 0x48000001
 570:	4352575f 	cmpmi	r2, #24903680	; 0x17c0000
 574:	465f4746 	ldrbmi	r4, [pc], -r6, asr #14
 578:	5f4c4c55 	svcpl	0x004c4c55
 57c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
 580:	4d500054 	ldclmi	0, cr0, [r0, #-336]	; 0xfffffeb0
 584:	4f44575f 	svcmi	0x0044575f
 588:	65730047 	ldrbvs	r0, [r3, #-71]!	; 0x47
 58c:	73755f74 	cmnvc	r5, #116, 30	; 0x1d0
 590:	6c5f7265 	lfmvs	f7, 2, [pc], {101}	; 0x65
 594:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
 598:	54555000 	ldrbpl	r5, [r5], #-0
 59c:	50003233 	andpl	r3, r0, r3, lsr r2
 5a0:	53525f4d 	cmppl	r2, #308	; 0x134
 5a4:	63004354 	movwvs	r4, #852	; 0x354
 5a8:	00727370 	rsbseq	r7, r2, r0, ror r3
 5ac:	616c6564 	cmnvs	ip, r4, ror #10
 5b0:	65735f79 	ldrbvs	r5, [r3, #-3961]!	; 0xf79
 5b4:	73630063 	cmnvc	r3, #99	; 0x63
 5b8:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 5bc:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 5c0:	6d69742f 	cfstrdvs	mvd7, [r9, #-188]!	; 0xffffff44
 5c4:	632e7265 	teqvs	lr, #1342177286	; 0x50000006
 5c8:	54454700 	strbpl	r4, [r5], #-1792	; 0x700
 5cc:	74003233 	strvc	r3, [r0], #-563	; 0x233
 5d0:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
 5d4:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 5d8:	635f7961 	cmpvs	pc, #1589248	; 0x184000
 5dc:	656c6379 	strbvs	r6, [ip, #-889]!	; 0x379
 5e0:	65640073 	strbvs	r0, [r4, #-115]!	; 0x73
 5e4:	5f79616c 	svcpl	0x0079616c
 5e8:	74007375 	strvc	r7, [r0], #-885	; 0x375
 5ec:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 5f0:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 5f4:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0x55f
 5f8:	666b0063 	strbtvs	r0, [fp], -r3, rrx
 5fc:	5f656572 	svcpl	0x00656572
 600:	006c6c61 	rsbeq	r6, ip, r1, ror #24
 604:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
 608:	5f64656e 	svcpl	0x0064656e
 60c:	70616568 	rsbvc	r6, r1, r8, ror #10
 610:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
 614:	616d6b00 	cmnvs	sp, r0, lsl #22
 618:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 61c:	2d796d00 	ldclcs	13, cr6, [r9, #-0]
 620:	2f637273 	svccs	0x00637273
 624:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
 628:	2e636f6c 	cdpcs	15, 6, cr6, cr3, cr12, {3}
 62c:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
 630:	705f7469 	subsvc	r7, pc, r9, ror #8
 634:	696c6100 	stmdbvs	ip!, {r8, sp, lr}^
 638:	656d6e67 	strbvs	r6, [sp, #-3687]!	; 0xe67
 63c:	7200746e 	andvc	r7, r0, #1845493760	; 0x6e000000
 640:	646e756f 	strbtvs	r7, [lr], #-1391	; 0x56f
 644:	6e5f6465 	cdpvs	4, 5, cr6, cr15, cr5, {3}
 648:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
 64c:	6d6b0073 	stclvs	0, cr0, [fp, #-460]!	; 0xfffffe34
 650:	6f6c6c61 	svcvs	0x006c6c61
 654:	65685f63 	strbvs	r5, [r8, #-3939]!	; 0xf63
 658:	705f7061 	subsvc	r7, pc, r1, rrx
 65c:	5f007274 	svcpl	0x00007274
 660:	6165685f 	cmnvs	r5, pc, asr r8
 664:	74735f70 	ldrbtvc	r5, [r3], #-3952	; 0xf70
 668:	5f747261 	svcpl	0x00747261
 66c:	6f74005f 	svcvs	0x0074005f
 670:	6c6c615f 	stfvse	f6, [ip], #-380	; 0xfffffe84
 674:	7461636f 	strbtvc	r6, [r1], #-879	; 0x36f
 678:	61750065 	cmnvs	r5, r5, rrx
 67c:	705f7472 	subsvc	r7, pc, r2, ror r4	; <UNPREDICTABLE>
 680:	00637475 	rsbeq	r7, r3, r5, ror r4
 684:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 688:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
 68c:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
 690:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 694:	62696c00 	rsbvs	r6, r9, #0, 24
 698:	75702f63 	ldrbvc	r2, [r0, #-3939]!	; 0xf63
 69c:	61686374 	smcvs	34356	; 0x8634
 6a0:	00632e72 	rsbeq	r2, r3, r2, ror lr

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000014 	andeq	r0, r0, r4, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	00008010 	andeq	r8, r0, r0, lsl r0
  1c:	00000034 	andeq	r0, r0, r4, lsr r0
  20:	83080e42 	movwhi	r0, #36418	; 0x8e42
  24:	00018e02 	andeq	r8, r1, r2, lsl #28
  28:	00000018 	andeq	r0, r0, r8, lsl r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	00008044 	andeq	r8, r0, r4, asr #32
  34:	00000048 	andeq	r0, r0, r8, asr #32
  38:	83100e42 	tsthi	r0, #1056	; 0x420
  3c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
  40:	00018e02 	andeq	r8, r1, r2, lsl #28
  44:	00000014 	andeq	r0, r0, r4, lsl r0
  48:	00000000 	andeq	r0, r0, r0
  4c:	0000808c 	andeq	r8, r0, ip, lsl #1
  50:	00000028 	andeq	r0, r0, r8, lsr #32
  54:	83080e42 	movwhi	r0, #36418	; 0x8e42
  58:	00018e02 	andeq	r8, r1, r2, lsl #28
  5c:	0000000c 	andeq	r0, r0, ip
  60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  64:	7c020001 	stcvc	0, cr0, [r2], {1}
  68:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  6c:	0000000c 	andeq	r0, r0, ip
  70:	0000005c 	andeq	r0, r0, ip, asr r0
  74:	000080b4 	strheq	r8, [r0], -r4
  78:	00000008 	andeq	r0, r0, r8
  7c:	0000000c 	andeq	r0, r0, ip
  80:	0000005c 	andeq	r0, r0, ip, asr r0
  84:	000080bc 	strheq	r8, [r0], -ip
  88:	00000038 	andeq	r0, r0, r8, lsr r0
  8c:	0000000c 	andeq	r0, r0, ip
  90:	0000005c 	andeq	r0, r0, ip, asr r0
  94:	000080f4 	strdeq	r8, [r0], -r4
  98:	00000028 	andeq	r0, r0, r8, lsr #32
  9c:	00000014 	andeq	r0, r0, r4, lsl r0
  a0:	0000005c 	andeq	r0, r0, ip, asr r0
  a4:	0000811c 	andeq	r8, r0, ip, lsl r1
  a8:	00000018 	andeq	r0, r0, r8, lsl r0
  ac:	83080e42 	movwhi	r0, #36418	; 0x8e42
  b0:	00018e02 	andeq	r8, r1, r2, lsl #28
  b4:	00000014 	andeq	r0, r0, r4, lsl r0
  b8:	0000005c 	andeq	r0, r0, ip, asr r0
  bc:	00008134 	andeq	r8, r0, r4, lsr r1
  c0:	0000007c 	andeq	r0, r0, ip, ror r0
  c4:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
  c8:	00018e02 	andeq	r8, r1, r2, lsl #28
  cc:	00000014 	andeq	r0, r0, r4, lsl r0
  d0:	0000005c 	andeq	r0, r0, ip, asr r0
  d4:	000081b0 			; <UNDEFINED> instruction: 0x000081b0
  d8:	00000090 	muleq	r0, r0, r0
  dc:	83080e42 	movwhi	r0, #36418	; 0x8e42
  e0:	00018e02 	andeq	r8, r1, r2, lsl #28
  e4:	00000014 	andeq	r0, r0, r4, lsl r0
  e8:	0000005c 	andeq	r0, r0, ip, asr r0
  ec:	00008240 	andeq	r8, r0, r0, asr #4
  f0:	00000080 	andeq	r0, r0, r0, lsl #1
  f4:	83080e42 	movwhi	r0, #36418	; 0x8e42
  f8:	00018e02 	andeq	r8, r1, r2, lsl #28
  fc:	0000000c 	andeq	r0, r0, ip
 100:	0000005c 	andeq	r0, r0, ip, asr r0
 104:	000082c0 	andeq	r8, r0, r0, asr #5
 108:	00000010 	andeq	r0, r0, r0, lsl r0
 10c:	00000018 	andeq	r0, r0, r8, lsl r0
 110:	0000005c 	andeq	r0, r0, ip, asr r0
 114:	000082d0 	ldrdeq	r8, [r0], -r0
 118:	0000004c 	andeq	r0, r0, ip, asr #32
 11c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 120:	86038504 	strhi	r8, [r3], -r4, lsl #10
 124:	00018e02 	andeq	r8, r1, r2, lsl #28
 128:	00000018 	andeq	r0, r0, r8, lsl r0
 12c:	0000005c 	andeq	r0, r0, ip, asr r0
 130:	0000831c 	andeq	r8, r0, ip, lsl r3
 134:	00000058 	andeq	r0, r0, r8, asr r0
 138:	83100e42 	tsthi	r0, #1056	; 0x420
 13c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 140:	00018e02 	andeq	r8, r1, r2, lsl #28
 144:	00000018 	andeq	r0, r0, r8, lsl r0
 148:	0000005c 	andeq	r0, r0, ip, asr r0
 14c:	00008374 	andeq	r8, r0, r4, ror r3
 150:	00000050 	andeq	r0, r0, r0, asr r0
 154:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 158:	86038504 	strhi	r8, [r3], -r4, lsl #10
 15c:	00018e02 	andeq	r8, r1, r2, lsl #28
 160:	00000018 	andeq	r0, r0, r8, lsl r0
 164:	0000005c 	andeq	r0, r0, ip, asr r0
 168:	000083c4 	andeq	r8, r0, r4, asr #7
 16c:	00000090 	muleq	r0, r0, r0
 170:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
 174:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
 178:	200e4201 	andcs	r4, lr, r1, lsl #4
 17c:	00000014 	andeq	r0, r0, r4, lsl r0
 180:	0000005c 	andeq	r0, r0, ip, asr r0
 184:	00008454 	andeq	r8, r0, r4, asr r4
 188:	00000054 	andeq	r0, r0, r4, asr r0
 18c:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 190:	00018e02 	andeq	r8, r1, r2, lsl #28
 194:	00000014 	andeq	r0, r0, r4, lsl r0
 198:	0000005c 	andeq	r0, r0, ip, asr r0
 19c:	000084a8 	andeq	r8, r0, r8, lsr #9
 1a0:	00000028 	andeq	r0, r0, r8, lsr #32
 1a4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 1a8:	00018e02 	andeq	r8, r1, r2, lsl #28
 1ac:	00000014 	andeq	r0, r0, r4, lsl r0
 1b0:	0000005c 	andeq	r0, r0, ip, asr r0
 1b4:	000084d0 	ldrdeq	r8, [r0], -r0
 1b8:	00000028 	andeq	r0, r0, r8, lsr #32
 1bc:	83080e42 	movwhi	r0, #36418	; 0x8e42
 1c0:	00018e02 	andeq	r8, r1, r2, lsl #28
 1c4:	00000014 	andeq	r0, r0, r4, lsl r0
 1c8:	0000005c 	andeq	r0, r0, ip, asr r0
 1cc:	000084f8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
 1d0:	00000028 	andeq	r0, r0, r8, lsr #32
 1d4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 1d8:	00018e02 	andeq	r8, r1, r2, lsl #28
 1dc:	0000000c 	andeq	r0, r0, ip
 1e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1e4:	7c020001 	stcvc	0, cr0, [r2], {1}
 1e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1ec:	00000018 	andeq	r0, r0, r8, lsl r0
 1f0:	000001dc 	ldrdeq	r0, [r0], -ip
 1f4:	0000858c 	andeq	r8, r0, ip, lsl #11
 1f8:	00000080 	andeq	r0, r0, r0, lsl #1
 1fc:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 200:	42018e02 	andmi	r8, r1, #2, 28
 204:	0000180e 	andeq	r1, r0, lr, lsl #16
 208:	00000014 	andeq	r0, r0, r4, lsl r0
 20c:	000001dc 	ldrdeq	r0, [r0], -ip
 210:	0000860c 	andeq	r8, r0, ip, lsl #12
 214:	00000040 	andeq	r0, r0, r0, asr #32
 218:	83080e42 	movwhi	r0, #36418	; 0x8e42
 21c:	00018e02 	andeq	r8, r1, r2, lsl #28
 220:	00000018 	andeq	r0, r0, r8, lsl r0
 224:	000001dc 	ldrdeq	r0, [r0], -ip
 228:	0000864c 	andeq	r8, r0, ip, asr #12
 22c:	000001a4 	andeq	r0, r0, r4, lsr #3
 230:	83100e42 	tsthi	r0, #1056	; 0x420
 234:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 238:	00018e02 	andeq	r8, r1, r2, lsl #28
 23c:	00000018 	andeq	r0, r0, r8, lsl r0
 240:	000001dc 	ldrdeq	r0, [r0], -ip
 244:	000087f0 	strdeq	r8, [r0], -r0
 248:	0000006c 	andeq	r0, r0, ip, rrx
 24c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
 250:	86028503 	strhi	r8, [r2], -r3, lsl #10
 254:	00000001 	andeq	r0, r0, r1
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	000001dc 	ldrdeq	r0, [r0], -ip
 260:	0000885c 	andeq	r8, r0, ip, asr r8
 264:	00000034 	andeq	r0, r0, r4, lsr r0
 268:	83180e42 	tsthi	r8, #1056	; 0x420
 26c:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
 270:	87038604 	strhi	r8, [r3, -r4, lsl #12]
 274:	00018e02 	andeq	r8, r1, r2, lsl #28
 278:	00000018 	andeq	r0, r0, r8, lsl r0
 27c:	000001dc 	ldrdeq	r0, [r0], -ip
 280:	00008890 	muleq	r0, r0, r8
 284:	00000058 	andeq	r0, r0, r8, asr r0
 288:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 28c:	86038504 	strhi	r8, [r3], -r4, lsl #10
 290:	00018e02 	andeq	r8, r1, r2, lsl #28
 294:	00000018 	andeq	r0, r0, r8, lsl r0
 298:	000001dc 	ldrdeq	r0, [r0], -ip
 29c:	000088e8 	andeq	r8, r0, r8, ror #17
 2a0:	000000a0 	andeq	r0, r0, r0, lsr #1
 2a4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 2a8:	86038504 	strhi	r8, [r3], -r4, lsl #10
 2ac:	00018e02 	andeq	r8, r1, r2, lsl #28
 2b0:	00000020 	andeq	r0, r0, r0, lsr #32
 2b4:	000001dc 	ldrdeq	r0, [r0], -ip
 2b8:	00008988 	andeq	r8, r0, r8, lsl #19
 2bc:	0000011c 	andeq	r0, r0, ip, lsl r1
 2c0:	84200e42 	strthi	r0, [r0], #-3650	; 0xe42
 2c4:	86078508 	strhi	r8, [r7], -r8, lsl #10
 2c8:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
 2cc:	8a038904 	bhi	e26e4 <__bss_end__+0xd8584>
 2d0:	00018e02 	andeq	r8, r1, r2, lsl #28
 2d4:	0000000c 	andeq	r0, r0, ip
 2d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2dc:	7c020001 	stcvc	0, cr0, [r2], {1}
 2e0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2e4:	0000000c 	andeq	r0, r0, ip
 2e8:	000002d4 	ldrdeq	r0, [r0], -r4
 2ec:	00008b64 	andeq	r8, r0, r4, ror #22
 2f0:	00000020 	andeq	r0, r0, r0, lsr #32
 2f4:	0000000c 	andeq	r0, r0, ip
 2f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2fc:	7c020001 	stcvc	0, cr0, [r2], {1}
 300:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 304:	00000024 	andeq	r0, r0, r4, lsr #32
 308:	000002f4 	strdeq	r0, [r0], -r4
 30c:	00008b84 	andeq	r8, r0, r4, lsl #23
 310:	00000058 	andeq	r0, r0, r8, asr r0
 314:	80100e42 	andshi	r0, r0, r2, asr #28
 318:	82038104 	andhi	r8, r3, #4, 2
 31c:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
 320:	07841c0e 	streq	r1, [r4, lr, lsl #24]
 324:	058e0685 	streq	r0, [lr, #1669]	; 0x685
 328:	00280e42 	eoreq	r0, r8, r2, asr #28
 32c:	0000000c 	andeq	r0, r0, ip
 330:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 334:	7c020001 	stcvc	0, cr0, [r2], {1}
 338:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 33c:	00000018 	andeq	r0, r0, r8, lsl r0
 340:	0000032c 	andeq	r0, r0, ip, lsr #6
 344:	00008bdc 	ldrdeq	r8, [r0], -ip
 348:	00000034 	andeq	r0, r0, r4, lsr r0
 34c:	83100e42 	tsthi	r0, #1056	; 0x420
 350:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 354:	00018e02 	andeq	r8, r1, r2, lsl #28
 358:	0000000c 	andeq	r0, r0, ip
 35c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 360:	7c020001 	stcvc	0, cr0, [r2], {1}
 364:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 368:	0000000c 	andeq	r0, r0, ip
 36c:	00000358 	andeq	r0, r0, r8, asr r3
 370:	00008c10 	andeq	r8, r0, r0, lsl ip
 374:	00000014 	andeq	r0, r0, r4, lsl r0
 378:	0000000c 	andeq	r0, r0, ip
 37c:	00000358 	andeq	r0, r0, r8, asr r3
 380:	00008c24 	andeq	r8, r0, r4, lsr #24
 384:	0000002c 	andeq	r0, r0, ip, lsr #32
 388:	0000000c 	andeq	r0, r0, ip
 38c:	00000358 	andeq	r0, r0, r8, asr r3
 390:	00008c50 	andeq	r8, r0, r0, asr ip
 394:	00000040 	andeq	r0, r0, r0, asr #32
 398:	00000020 	andeq	r0, r0, r0, lsr #32
 39c:	00000358 	andeq	r0, r0, r8, asr r3
 3a0:	00008c90 	muleq	r0, r0, ip
 3a4:	00000198 	muleq	r0, r8, r1
 3a8:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 3ac:	86058506 	strhi	r8, [r5], -r6, lsl #10
 3b0:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 3b4:	42018e02 	andmi	r8, r1, #2, 28
 3b8:	0000580e 	andeq	r5, r0, lr, lsl #16
 3bc:	00000014 	andeq	r0, r0, r4, lsl r0
 3c0:	00000358 	andeq	r0, r0, r8, asr r3
 3c4:	00008e28 	andeq	r8, r0, r8, lsr #28
 3c8:	00000050 	andeq	r0, r0, r0, asr r0
 3cc:	83080e42 	movwhi	r0, #36418	; 0x8e42
 3d0:	00018e02 	andeq	r8, r1, r2, lsl #28
 3d4:	00000028 	andeq	r0, r0, r8, lsr #32
 3d8:	00000358 	andeq	r0, r0, r8, asr r3
 3dc:	00008e78 	andeq	r8, r0, r8, ror lr
 3e0:	00000288 	andeq	r0, r0, r8, lsl #5
 3e4:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
 3e8:	86088509 	strhi	r8, [r8], -r9, lsl #10
 3ec:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
 3f0:	8a048905 	bhi	12280c <__bss_end__+0x1186ac>
 3f4:	8e028b03 	vmlahi.f64	d8, d2, d3
 3f8:	b00e4201 	andlt	r4, lr, r1, lsl #4
 3fc:	00000001 	andeq	r0, r0, r1
 400:	0000000c 	andeq	r0, r0, ip
 404:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 408:	7c020001 	stcvc	0, cr0, [r2], {1}
 40c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 410:	00000014 	andeq	r0, r0, r4, lsl r0
 414:	00000400 	andeq	r0, r0, r0, lsl #8
 418:	00009100 	andeq	r9, r0, r0, lsl #2
 41c:	00000028 	andeq	r0, r0, r8, lsr #32
 420:	83080e42 	movwhi	r0, #36418	; 0x8e42
 424:	00018e02 	andeq	r8, r1, r2, lsl #28
 428:	0000000c 	andeq	r0, r0, ip
 42c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 430:	7c020001 	stcvc	0, cr0, [r2], {1}
 434:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 438:	00000014 	andeq	r0, r0, r4, lsl r0
 43c:	00000428 	andeq	r0, r0, r8, lsr #8
 440:	00009128 	andeq	r9, r0, r8, lsr #2
 444:	00000034 	andeq	r0, r0, r4, lsr r0
 448:	83080e42 	movwhi	r0, #36418	; 0x8e42
 44c:	00018e02 	andeq	r8, r1, r2, lsl #28
 450:	0000000c 	andeq	r0, r0, ip
 454:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 458:	7c020001 	stcvc	0, cr0, [r2], {1}
 45c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 460:	0000000c 	andeq	r0, r0, ip
 464:	00000450 	andeq	r0, r0, r0, asr r4
 468:	0000915c 	andeq	r9, r0, ip, asr r1
 46c:	00000018 	andeq	r0, r0, r8, lsl r0
 470:	0000000c 	andeq	r0, r0, ip
 474:	00000450 	andeq	r0, r0, r0, asr r4
 478:	00009174 	andeq	r9, r0, r4, ror r1
 47c:	00000014 	andeq	r0, r0, r4, lsl r0
 480:	00000014 	andeq	r0, r0, r4, lsl r0
 484:	00000450 	andeq	r0, r0, r0, asr r4
 488:	00009188 	andeq	r9, r0, r8, lsl #3
 48c:	00000048 	andeq	r0, r0, r8, asr #32
 490:	83080e42 	movwhi	r0, #36418	; 0x8e42
 494:	00018e02 	andeq	r8, r1, r2, lsl #28
 498:	0000000c 	andeq	r0, r0, ip
 49c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4a0:	7c020001 	stcvc	0, cr0, [r2], {1}
 4a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4a8:	0000000c 	andeq	r0, r0, ip
 4ac:	00000498 	muleq	r0, r8, r4
 4b0:	000091d0 	ldrdeq	r9, [r0], -r0
 4b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b8:	00000014 	andeq	r0, r0, r4, lsl r0
 4bc:	00000498 	muleq	r0, r8, r4
 4c0:	000091ec 	andeq	r9, r0, ip, ror #3
 4c4:	00000014 	andeq	r0, r0, r4, lsl r0
 4c8:	83080e42 	movwhi	r0, #36418	; 0x8e42
 4cc:	00018e02 	andeq	r8, r1, r2, lsl #28
 4d0:	00000018 	andeq	r0, r0, r8, lsl r0
 4d4:	00000498 	muleq	r0, r8, r4
 4d8:	00009200 	andeq	r9, r0, r0, lsl #4
 4dc:	00000024 	andeq	r0, r0, r4, lsr #32
 4e0:	83100e42 	tsthi	r0, #1056	; 0x420
 4e4:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 4e8:	00018e02 	andeq	r8, r1, r2, lsl #28
 4ec:	00000014 	andeq	r0, r0, r4, lsl r0
 4f0:	00000498 	muleq	r0, r8, r4
 4f4:	00009224 	andeq	r9, r0, r4, lsr #4
 4f8:	00000014 	andeq	r0, r0, r4, lsl r0
 4fc:	83080e42 	movwhi	r0, #36418	; 0x8e42
 500:	00018e02 	andeq	r8, r1, r2, lsl #28
 504:	00000014 	andeq	r0, r0, r4, lsl r0
 508:	00000498 	muleq	r0, r8, r4
 50c:	00009238 	andeq	r9, r0, r8, lsr r2
 510:	00000014 	andeq	r0, r0, r4, lsl r0
 514:	83080e42 	movwhi	r0, #36418	; 0x8e42
 518:	00018e02 	andeq	r8, r1, r2, lsl #28
 51c:	0000000c 	andeq	r0, r0, ip
 520:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 524:	7c020001 	stcvc	0, cr0, [r2], {1}
 528:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 52c:	00000014 	andeq	r0, r0, r4, lsl r0
 530:	0000051c 	andeq	r0, r0, ip, lsl r5
 534:	00009524 	andeq	r9, r0, r4, lsr #10
 538:	00000064 	andeq	r0, r0, r4, rrx
 53c:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 540:	00018e02 	andeq	r8, r1, r2, lsl #28
 544:	00000014 	andeq	r0, r0, r4, lsl r0
 548:	0000051c 	andeq	r0, r0, ip, lsl r5
 54c:	00009588 	andeq	r9, r0, r8, lsl #11
 550:	00000094 	muleq	r0, r4, r0
 554:	83080e42 	movwhi	r0, #36418	; 0x8e42
 558:	00018e02 	andeq	r8, r1, r2, lsl #28
 55c:	00000014 	andeq	r0, r0, r4, lsl r0
 560:	0000051c 	andeq	r0, r0, ip, lsl r5
 564:	0000961c 	andeq	r9, r0, ip, lsl r6
 568:	00000058 	andeq	r0, r0, r8, asr r0
 56c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 570:	00018e02 	andeq	r8, r1, r2, lsl #28
 574:	0000000c 	andeq	r0, r0, ip
 578:	0000051c 	andeq	r0, r0, ip, lsl r5
 57c:	00009674 	andeq	r9, r0, r4, ror r6
 580:	00000018 	andeq	r0, r0, r8, lsl r0
 584:	0000000c 	andeq	r0, r0, ip
 588:	0000051c 	andeq	r0, r0, ip, lsl r5
 58c:	0000968c 	andeq	r9, r0, ip, lsl #13
 590:	00000010 	andeq	r0, r0, r0, lsl r0
 594:	0000000c 	andeq	r0, r0, ip
 598:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 59c:	7c020001 	stcvc	0, cr0, [r2], {1}
 5a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 5a4:	00000014 	andeq	r0, r0, r4, lsl r0
 5a8:	00000594 	muleq	r0, r4, r5
 5ac:	0000969c 	muleq	r0, ip, r6
 5b0:	00000014 	andeq	r0, r0, r4, lsl r0
 5b4:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 5b8:	00018e02 	andeq	r8, r1, r2, lsl #28

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	000001ac 	andeq	r0, r0, ip, lsr #3
   4:	000001ec 	andeq	r0, r0, ip, ror #3
   8:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   c:	000001f4 	strdeq	r0, [r0], -r4
	...
  18:	0000026c 	andeq	r0, r0, ip, ror #4
  1c:	00000274 	andeq	r0, r0, r4, ror r2
  20:	0000027c 	andeq	r0, r0, ip, ror r2
  24:	00000284 	andeq	r0, r0, r4, lsl #5
	...
  30:	0000042c 	andeq	r0, r0, ip, lsr #8
  34:	00000440 	andeq	r0, r0, r0, asr #8
  38:	00000444 	andeq	r0, r0, r4, asr #8
  3c:	00000484 	andeq	r0, r0, r4, lsl #9
	...
  48:	0000915c 	andeq	r9, r0, ip, asr r1
  4c:	000091d0 	ldrdeq	r9, [r0], -r0
	...
