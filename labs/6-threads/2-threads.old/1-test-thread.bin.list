
1-test-thread.bin.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e3a0d302 	mov	sp, #134217728	; 0x8000000
    8004:	e3a0b000 	mov	fp, #0
    8008:	eb00024a 	bl	8938 <_cstart>
    800c:	eb000261 	bl	8998 <rpi_reboot>

00008010 <thread_code>:
#include "rpi-thread.h"

static unsigned thread_count, thread_sum;

// trivial first thread: does not block, explicitly calls exit.
static void thread_code(void *arg) {
    8010:	e92d4010 	push	{r4, lr}
    8014:	e1a04000 	mov	r4, r0
    unsigned *x = arg;
	printk("in thread %p, with %x\n", rpi_cur_thread()->tid, *x);
    8018:	eb00007a 	bl	8208 <rpi_cur_thread>
    801c:	e5901044 	ldr	r1, [r0, #68]	; 0x44
    8020:	e59f0030 	ldr	r0, [pc, #48]	; 8058 <thread_code+0x48>
    8024:	e5942000 	ldr	r2, [r4]
    8028:	eb0000d9 	bl	8394 <printk>
	thread_count ++;
    802c:	e59f3028 	ldr	r3, [pc, #40]	; 805c <thread_code+0x4c>
    8030:	e5932000 	ldr	r2, [r3]
    8034:	e2822001 	add	r2, r2, #1
    8038:	e5832000 	str	r2, [r3]
	thread_sum += *x;
    803c:	e5941000 	ldr	r1, [r4]
    8040:	e5932004 	ldr	r2, [r3, #4]
    8044:	e0812002 	add	r2, r1, r2
    8048:	e5832004 	str	r2, [r3, #4]
    rpi_exit(0);
    804c:	e3a00000 	mov	r0, #0
    8050:	eb00007e 	bl	8250 <rpi_exit>
    8054:	e8bd8010 	pop	{r4, pc}
    8058:	00008ee8 	andeq	r8, r0, r8, ror #29
    805c:	00009234 	andeq	r9, r0, r4, lsr r2

00008060 <notmain>:
}

void notmain() {
    8060:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    uart_init();
    8064:	eb00029a 	bl	8ad4 <uart_init>
    kmalloc_init();
    8068:	eb00036f 	bl	8e2c <kmalloc_init>

    printk("about to test summing of 30 threads\n");
    806c:	e59f0090 	ldr	r0, [pc, #144]	; 8104 <notmain+0xa4>
    8070:	eb0000c7 	bl	8394 <printk>
	int n = 30;
	thread_sum = thread_count = 0;
    8074:	e59f308c 	ldr	r3, [pc, #140]	; 8108 <notmain+0xa8>
    8078:	e3a04000 	mov	r4, #0
    807c:	e5834000 	str	r4, [r3]
    8080:	e5834004 	str	r4, [r3, #4]

	for(int i = 0; i < n; i++)  {
    	printk("Index %d\n", i);
    8084:	e59f7080 	ldr	r7, [pc, #128]	; 810c <notmain+0xac>
        int *x = kmalloc(sizeof *x);
    8088:	e3a06004 	mov	r6, #4
        *x = i;
		rpi_fork(thread_code, x);
    808c:	e59f507c 	ldr	r5, [pc, #124]	; 8110 <notmain+0xb0>

    printk("about to test summing of 30 threads\n");
	int n = 30;
	thread_sum = thread_count = 0;

	for(int i = 0; i < n; i++)  {
    8090:	ea000009 	b	80bc <notmain+0x5c>
    	printk("Index %d\n", i);
    8094:	e1a00007 	mov	r0, r7
    8098:	e1a01004 	mov	r1, r4
    809c:	eb0000bc 	bl	8394 <printk>
        int *x = kmalloc(sizeof *x);
    80a0:	e1a00006 	mov	r0, r6
    80a4:	eb000322 	bl	8d34 <kmalloc>
    80a8:	e1a01000 	mov	r1, r0
        *x = i;
    80ac:	e5804000 	str	r4, [r0]
		rpi_fork(thread_code, x);
    80b0:	e1a00005 	mov	r0, r5
    80b4:	eb000057 	bl	8218 <rpi_fork>

    printk("about to test summing of 30 threads\n");
	int n = 30;
	thread_sum = thread_count = 0;

	for(int i = 0; i < n; i++)  {
    80b8:	e2844001 	add	r4, r4, #1
    80bc:	e354001d 	cmp	r4, #29
    80c0:	dafffff3 	ble	8094 <notmain+0x34>
    	printk("Index %d\n", i);
        int *x = kmalloc(sizeof *x);
        *x = i;
		rpi_fork(thread_code, x);
    }
	rpi_thread_start();
    80c4:	eb000089 	bl	82f0 <rpi_thread_start>

	// no more threads: check.
	printk("count = %d, sum=%d\n", thread_count, thread_sum);
    80c8:	e59f4038 	ldr	r4, [pc, #56]	; 8108 <notmain+0xa8>
    80cc:	e59f0040 	ldr	r0, [pc, #64]	; 8114 <notmain+0xb4>
    80d0:	e5941000 	ldr	r1, [r4]
    80d4:	e5942004 	ldr	r2, [r4, #4]
    80d8:	eb0000ad 	bl	8394 <printk>
	assert(thread_count == n);
    80dc:	e5943000 	ldr	r3, [r4]
    80e0:	e353001e 	cmp	r3, #30
    80e4:	0a000005 	beq	8100 <notmain+0xa0>
    80e8:	e59f0028 	ldr	r0, [pc, #40]	; 8118 <notmain+0xb8>
    80ec:	e59f1028 	ldr	r1, [pc, #40]	; 811c <notmain+0xbc>
    80f0:	e59f2028 	ldr	r2, [pc, #40]	; 8120 <notmain+0xc0>
    80f4:	e3a03022 	mov	r3, #34	; 0x22
    80f8:	eb0000a5 	bl	8394 <printk>
    80fc:	eb000225 	bl	8998 <rpi_reboot>
	clean_reboot();
    8100:	eb000202 	bl	8910 <clean_reboot>
    8104:	00008f00 	andeq	r8, r0, r0, lsl #30
    8108:	00009234 	andeq	r9, r0, r4, lsr r2
    810c:	00008f28 	andeq	r8, r0, r8, lsr #30
    8110:	00008010 	andeq	r8, r0, r0, lsl r0
    8114:	00008f34 	andeq	r8, r0, r4, lsr pc
    8118:	00008f48 	andeq	r8, r0, r8, asr #30
    811c:	00008f6c 	andeq	r8, r0, ip, ror #30
    8120:	00008ee0 	andeq	r8, r0, r0, ror #29

00008124 <Q_empty>:
} Q_t;

// used for iteration.
static E *Q_start(Q_t *q)   { return q->head; }
static E *Q_next(E *e)      { return e->next; }
static int Q_empty(Q_t *q)  { return q->head == 0; }
    8124:	e5900000 	ldr	r0, [r0]
    8128:	e2700001 	rsbs	r0, r0, #1
    812c:	33a00000 	movcc	r0, #0
    8130:	e12fff1e 	bx	lr

00008134 <Q_append>:
    return e;
}

// insert at tail. (for FIFO)
static void Q_append(Q_t *q, E *e) {
    e->next = 0;
    8134:	e3a03000 	mov	r3, #0
    8138:	e5813040 	str	r3, [r1, #64]	; 0x40
    if(!q->tail) 
    813c:	e5903004 	ldr	r3, [r0, #4]
    8140:	e3530000 	cmp	r3, #0
    8144:	1a000002 	bne	8154 <Q_append+0x20>
        q->head = q->tail = e;
    8148:	e5801004 	str	r1, [r0, #4]
    814c:	e5801000 	str	r1, [r0]
    8150:	e12fff1e 	bx	lr
    else {
        q->tail->next = e;
    8154:	e5831040 	str	r1, [r3, #64]	; 0x40
        q->tail = e;
    8158:	e5801004 	str	r1, [r0, #4]
    815c:	e12fff1e 	bx	lr

00008160 <Q_pop>:
static E *Q_start(Q_t *q)   { return q->head; }
static E *Q_next(E *e)      { return e->next; }
static int Q_empty(Q_t *q)  { return q->head == 0; }

// remove from front of list.
static E *Q_pop(Q_t *q) {
    8160:	e92d4008 	push	{r3, lr}
    demand(q, bad input);
    8164:	e2503000 	subs	r3, r0, #0
    8168:	1a000005 	bne	8184 <Q_pop+0x24>
    816c:	e59f0058 	ldr	r0, [pc, #88]	; 81cc <Q_pop+0x6c>
    8170:	e59f1058 	ldr	r1, [pc, #88]	; 81d0 <Q_pop+0x70>
    8174:	e59f2058 	ldr	r2, [pc, #88]	; 81d4 <Q_pop+0x74>
    8178:	e3a03013 	mov	r3, #19
    817c:	eb000084 	bl	8394 <printk>
    8180:	eb000204 	bl	8998 <rpi_reboot>
    E *e = q->head;
    8184:	e5930000 	ldr	r0, [r3]

    if(!e) {
    8188:	e3500000 	cmp	r0, #0
    818c:	1a000008 	bne	81b4 <Q_pop+0x54>
        demand(!q->tail, invalid Q);
    8190:	e5930004 	ldr	r0, [r3, #4]
    8194:	e3500000 	cmp	r0, #0
    8198:	08bd8008 	popeq	{r3, pc}
    819c:	e59f0034 	ldr	r0, [pc, #52]	; 81d8 <Q_pop+0x78>
    81a0:	e59f1028 	ldr	r1, [pc, #40]	; 81d0 <Q_pop+0x70>
    81a4:	e59f2028 	ldr	r2, [pc, #40]	; 81d4 <Q_pop+0x74>
    81a8:	e3a03017 	mov	r3, #23
    81ac:	eb000078 	bl	8394 <printk>
    81b0:	eb0001f8 	bl	8998 <rpi_reboot>
        return 0;
    }
    q->head = e->next;
    81b4:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    81b8:	e5832000 	str	r2, [r3]
    if(!q->head)
    81bc:	e3520000 	cmp	r2, #0
    81c0:	18bd8008 	popne	{r3, pc}
        q->tail = 0;
    81c4:	e5832004 	str	r2, [r3, #4]
    return e;
}
    81c8:	e8bd8008 	pop	{r3, pc}
    81cc:	00008f84 	andeq	r8, r0, r4, lsl #31
    81d0:	00008fac 	andeq	r8, r0, ip, lsr #31
    81d4:	00008f7c 	andeq	r8, r0, ip, ror pc
    81d8:	00008fb0 			; <UNDEFINED> instruction: 0x00008fb0

000081dc <th_alloc>:
rpi_thread_t *rpi_cur_thread(void) {
    return cur_thread;
}

// keep a cache of freed thread blocks.  call kmalloc if run out.
static rpi_thread_t *th_alloc(void) {
    81dc:	e92d4008 	push	{r3, lr}
    static Q_t freeq;
    rpi_thread_t *t = Q_pop(&freeq);
    81e0:	e59f0018 	ldr	r0, [pc, #24]	; 8200 <th_alloc+0x24>
    81e4:	ebffffdd 	bl	8160 <Q_pop>
    if(!t)
    81e8:	e3500000 	cmp	r0, #0
    81ec:	18bd8008 	popne	{r3, pc}
        // stack has to be 8-byte aligned.
        t = kmalloc_aligned(sizeof *t, 8);
    81f0:	e59f000c 	ldr	r0, [pc, #12]	; 8204 <th_alloc+0x28>
    81f4:	e3a01008 	mov	r1, #8
    81f8:	eb0002e6 	bl	8d98 <kmalloc_aligned>
    return t;
}
    81fc:	e8bd8008 	pop	{r3, pc}
    8200:	0000923c 	andeq	r9, r0, ip, lsr r2
    8204:	00008048 	andeq	r8, r0, r8, asr #32

00008208 <rpi_cur_thread>:
static rpi_thread_t *scheduler_thread;  // first scheduler thread.

// return pointer to the current thread.  
rpi_thread_t *rpi_cur_thread(void) {
    return cur_thread;
}
    8208:	e59f3004 	ldr	r3, [pc, #4]	; 8214 <rpi_cur_thread+0xc>
    820c:	e5930008 	ldr	r0, [r3, #8]
    8210:	e12fff1e 	bx	lr
    8214:	0000923c 	andeq	r9, r0, ip, lsr r2

00008218 <rpi_fork>:
/***********************************************************************
 * implement the code below.
 */

// create a new thread.
rpi_thread_t *rpi_fork(void (*code)(void *arg), void *arg) {
    8218:	e92d4010 	push	{r4, lr}
    rpi_thread_t *t = th_alloc();
    821c:	ebffffee 	bl	81dc <th_alloc>
    8220:	e1a04000 	mov	r4, r0
		"mov r3, %[thread] \n\t"
		"ldr r2, [r3] \n\t"
		"stmfd r2!, {r0-r15} \n\t"
		"str r0, [r2] \n\t"
		: // output
		:[thread] "r"(&(t->stack))
    8224:	e2803048 	add	r3, r0, #72	; 0x48
// create a new thread.
rpi_thread_t *rpi_fork(void (*code)(void *arg), void *arg) {
    rpi_thread_t *t = th_alloc();

    // do the brain-surgery on the new thread stack here.
	asm volatile (
    8228:	e1a03003 	mov	r3, r3
    822c:	e5932000 	ldr	r2, [r3]
    8230:	e922ffff 	stmdb	r2!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
    8234:	e5820000 	str	r0, [r2]
		:[thread] "r"(&(t->stack))
		 // input
	); 
	

    Q_append(&runq, t);
    8238:	e59f000c 	ldr	r0, [pc, #12]	; 824c <rpi_fork+0x34>
    823c:	e1a01004 	mov	r1, r4
    8240:	ebffffbb 	bl	8134 <Q_append>
    return t;
}
    8244:	e1a00004 	mov	r0, r4
    8248:	e8bd8010 	pop	{r4, pc}
    824c:	00009248 	andeq	r9, r0, r8, asr #4

00008250 <rpi_exit>:

// exit current thread.
void rpi_exit(int exitcode) {
    8250:	e92d4010 	push	{r4, lr}
 	 * switch to it.
	 
	 * 3. otherwise we are done, switch to the scheduler thread 
	 * so we call back into the client code.
	 */
	 memset(cur_thread, 0, sizeof(cur_thread));
    8254:	e59f4050 	ldr	r4, [pc, #80]	; 82ac <rpi_exit+0x5c>
    8258:	e5940008 	ldr	r0, [r4, #8]
    825c:	e3a01000 	mov	r1, #0
    8260:	e3a02004 	mov	r2, #4
    8264:	eb000042 	bl	8374 <memset>
	 if(!Q_empty(&runq)) {
    8268:	e284000c 	add	r0, r4, #12
    826c:	ebffffac 	bl	8124 <Q_empty>
    8270:	e3500000 	cmp	r0, #0
    8274:	1a000007 	bne	8298 <rpi_exit+0x48>
		 rpi_cswitch(cur_thread->reg_save_area, Q_pop(&runq)->reg_save_area);
    8278:	e1a00004 	mov	r0, r4
    827c:	e5944008 	ldr	r4, [r4, #8]
    8280:	e280000c 	add	r0, r0, #12
    8284:	ebffffb5 	bl	8160 <Q_pop>
    8288:	e1a01000 	mov	r1, r0
    828c:	e1a00004 	mov	r0, r4
    8290:	eb00002c 	bl	8348 <rpi_cswitch>
    8294:	e8bd8010 	pop	{r4, pc}
	 } else {
		rpi_cswitch(cur_thread->reg_save_area, scheduler_thread->reg_save_area);
    8298:	e59f300c 	ldr	r3, [pc, #12]	; 82ac <rpi_exit+0x5c>
    829c:	e5930008 	ldr	r0, [r3, #8]
    82a0:	e5931014 	ldr	r1, [r3, #20]
    82a4:	eb000027 	bl	8348 <rpi_cswitch>
    82a8:	e8bd8010 	pop	{r4, pc}
    82ac:	0000923c 	andeq	r9, r0, ip, lsr r2

000082b0 <rpi_yield>:
	 }
}

// yield the current thread.
void rpi_yield(void) {
    82b0:	e92d4038 	push	{r3, r4, r5, lr}
	//	- there are no more runnable threads, return.  
	// otherwise: 
	//	1. put current thread on runq.
	// 	2. context switch to the new thread.
	rpi_thread_t* next_thread;
	if(!(next_thread = Q_pop(&runq))) {
    82b4:	e59f002c 	ldr	r0, [pc, #44]	; 82e8 <rpi_yield+0x38>
    82b8:	ebffffa8 	bl	8160 <Q_pop>
    82bc:	e2505000 	subs	r5, r0, #0
    82c0:	08bd8038 	popeq	{r3, r4, r5, pc}
		return;
	} else {
		Q_append(&runq, cur_thread);
    82c4:	e59f0020 	ldr	r0, [pc, #32]	; 82ec <rpi_yield+0x3c>
    82c8:	e5904008 	ldr	r4, [r0, #8]
    82cc:	e280000c 	add	r0, r0, #12
    82d0:	e1a01004 	mov	r1, r4
    82d4:	ebffff96 	bl	8134 <Q_append>
		rpi_cswitch(cur_thread->reg_save_area, next_thread->reg_save_area); 
    82d8:	e1a00004 	mov	r0, r4
    82dc:	e1a01005 	mov	r1, r5
    82e0:	eb000018 	bl	8348 <rpi_cswitch>
    82e4:	e8bd8038 	pop	{r3, r4, r5, pc}
    82e8:	00009248 	andeq	r9, r0, r8, asr #4
    82ec:	0000923c 	andeq	r9, r0, ip, lsr r2

000082f0 <rpi_thread_start>:
/*
 * starts the thread system.  
 * note: our caller is not a thread!  so you have to figure
 * out how to handle this.
 */
void rpi_thread_start(void) {
    82f0:	e92d4010 	push	{r4, lr}
    AssertNow(offsetof(rpi_thread_t, stack) % 8 == 0);
    // statically check that the register save area is at offset 0.
    AssertNow(offsetof(rpi_thread_t, reg_save_area) == 0);

    // no other runnable thread: return.
    if(Q_empty(&runq))
    82f4:	e59f0038 	ldr	r0, [pc, #56]	; 8334 <rpi_thread_start+0x44>
    82f8:	ebffff89 	bl	8124 <Q_empty>
    82fc:	e3500000 	cmp	r0, #0
    8300:	18bd8010 	popne	{r4, pc}

    //  1. create a new fake thread 
    //  2. dequeue a thread from the runq
    //  3. context switch to it, saving current state in
    //	    <scheduler_thread>
    scheduler_thread = th_alloc();
    8304:	ebffffb4 	bl	81dc <th_alloc>
    8308:	e59f4028 	ldr	r4, [pc, #40]	; 8338 <rpi_thread_start+0x48>
    830c:	e5840014 	str	r0, [r4, #20]
    rpi_thread_t* next_thread = th_alloc();
    8310:	ebffffb1 	bl	81dc <th_alloc>
	next_thread = Q_pop(&runq);
    8314:	e284000c 	add	r0, r4, #12
    8318:	ebffff90 	bl	8160 <Q_pop>
    831c:	e1a01000 	mov	r1, r0
	rpi_cswitch(scheduler_thread->reg_save_area, next_thread->reg_save_area);
    8320:	e5940014 	ldr	r0, [r4, #20]
    8324:	eb000007 	bl	8348 <rpi_cswitch>
    printk("rpithreads: done with all threads! returning\n");
    8328:	e59f000c 	ldr	r0, [pc, #12]	; 833c <rpi_thread_start+0x4c>
    832c:	eb000018 	bl	8394 <printk>
    8330:	e8bd8010 	pop	{r4, pc}
    8334:	00009248 	andeq	r9, r0, r8, asr #4
    8338:	0000923c 	andeq	r9, r0, ip, lsr r2
    833c:	00008fe0 	andeq	r8, r0, r0, ror #31

00008340 <rpi_get_sp>:
    8340:	e1a0000d 	mov	r0, sp
    8344:	e12fff1e 	bx	lr

00008348 <rpi_cswitch>:
    8348:	e9200ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    834c:	e5820000 	str	r0, [r2]
    8350:	e5831000 	str	r1, [r3]
    8354:	e92d4008 	push	{r3, lr}
    8358:	eb000004 	bl	8370 <rpi_init_trampoline>
    835c:	e8bd4008 	pop	{r3, lr}
    8360:	e5931000 	ldr	r1, [r3]
    8364:	e5910000 	ldr	r0, [r1]
    8368:	e8b00ff0 	ldm	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    836c:	e12fff1e 	bx	lr

00008370 <rpi_init_trampoline>:
    8370:	e12fff1e 	bx	lr

00008374 <memset>:
#include <string.h>

void *memset(void *_p, int c, size_t n) {
    char *p = _p, *e = p + n;
    8374:	e0802002 	add	r2, r0, r2
    8378:	e1a03000 	mov	r3, r0

    while(p < e)
    837c:	ea000001 	b	8388 <memset+0x14>
        *p++ = c;
    8380:	e5c31000 	strb	r1, [r3]
    8384:	e2833001 	add	r3, r3, #1
#include <string.h>

void *memset(void *_p, int c, size_t n) {
    char *p = _p, *e = p + n;

    while(p < e)
    8388:	e1530002 	cmp	r3, r2
    838c:	3afffffb 	bcc	8380 <memset+0xc>
        *p++ = c;
    return _p;
}
    8390:	e12fff1e 	bx	lr

00008394 <printk>:
#include <stdarg.h>

#include "rpi.h"
#include "va-printk.h"

int printk(const char *fmt, ...) {
    8394:	e92d000f 	push	{r0, r1, r2, r3}
    8398:	e92d4030 	push	{r4, r5, lr}
    839c:	e24dd00c 	sub	sp, sp, #12
    // this is a really huge buffer for a pi.   could do this better.
    static char buf[1024];
    va_list args;

    va_start(args, fmt);
    83a0:	e28d301c 	add	r3, sp, #28
    83a4:	e58d3004 	str	r3, [sp, #4]
        int sz = va_printk(buf, sizeof buf, fmt, args);
    83a8:	e59f4034 	ldr	r4, [pc, #52]	; 83e4 <printk+0x50>
    83ac:	e1a00004 	mov	r0, r4
    83b0:	e3a01b01 	mov	r1, #1024	; 0x400
    83b4:	e59d2018 	ldr	r2, [sp, #24]
    83b8:	eb0000b2 	bl	8688 <va_printk>
    83bc:	e1a05000 	mov	r5, r0
    va_end(args);


#if 1
    putk(buf);
    83c0:	e59f3020 	ldr	r3, [pc, #32]	; 83e8 <printk+0x54>
    83c4:	e5933000 	ldr	r3, [r3]
    83c8:	e1a00004 	mov	r0, r4
    83cc:	e12fff33 	blx	r3
    int i;
    for(i = 0; buf[i]; i++)
        rpi_putchar(buf[i]);
#endif
    return sz;
}
    83d0:	e1a00005 	mov	r0, r5
    83d4:	e28dd00c 	add	sp, sp, #12
    83d8:	e8bd4030 	pop	{r4, r5, lr}
    83dc:	e28dd010 	add	sp, sp, #16
    83e0:	e12fff1e 	bx	lr
    83e4:	00009254 	andeq	r9, r0, r4, asr r2
    83e8:	00008ed8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>

000083ec <internal_putk>:
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    83ec:	e92d4038 	push	{r3, r4, r5, lr}
    83f0:	e1a04000 	mov	r4, r0
    for(; *p; p++)
        rpi_putchar(*p);
    83f4:	e59f5020 	ldr	r5, [pc, #32]	; 841c <internal_putk+0x30>
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    83f8:	ea000002 	b	8408 <internal_putk+0x1c>
        rpi_putchar(*p);
    83fc:	e5953000 	ldr	r3, [r5]
    8400:	e12fff33 	blx	r3
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    8404:	e2844001 	add	r4, r4, #1
    8408:	e5d40000 	ldrb	r0, [r4]
    840c:	e3500000 	cmp	r0, #0
    8410:	1afffff9 	bne	83fc <internal_putk+0x10>
        rpi_putchar(*p);
//  we were adding this.
//  rpi_putchar('\n');
    return 1;
}
    8414:	e3a00001 	mov	r0, #1
    8418:	e8bd8038 	pop	{r3, r4, r5, pc}
    841c:	00008edc 	ldrdeq	r8, [r0], -ip

00008420 <isdigit>:
    if(puts_fp)
        putk = puts_fp;
}

// XXX: check sign promotion.
static int isdigit(int c) { return c >= '0' && c <= '9'; }
    8420:	e2400030 	sub	r0, r0, #48	; 0x30
    8424:	e3500009 	cmp	r0, #9
    8428:	83a00000 	movhi	r0, #0
    842c:	93a00001 	movls	r0, #1
    8430:	e12fff1e 	bx	lr

00008434 <pad>:

// don't move: can't be inlined, gcc seems to have a bug.
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
    8434:	e0611000 	rsb	r1, r1, r0
	// pad with leading spaces
	for(; len < width; len++)
		*p++ = ' ';
    8438:	e3a03020 	mov	r3, #32
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    843c:	ea000002 	b	844c <pad+0x18>
		*p++ = ' ';
    8440:	e5c03000 	strb	r3, [r0]
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8444:	e2811001 	add	r1, r1, #1
		*p++ = ' ';
    8448:	e2800001 	add	r0, r0, #1
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    844c:	e1510002 	cmp	r1, r2
    8450:	bafffffa 	blt	8440 <pad+0xc>
		*p++ = ' ';
	*p = 0;
    8454:	e3a03000 	mov	r3, #0
    8458:	e5c03000 	strb	r3, [r0]
	return p;
}
    845c:	e12fff1e 	bx	lr

00008460 <reverse>:

static char* reverse(char *dst, int n, char *p, char *start) {
	// drop the lower chars if the string is too big.
	int len = p - start + 1; // include \0
    8460:	e063c002 	rsb	ip, r3, r2
    8464:	e28cc001 	add	ip, ip, #1
	if(len > n)
    8468:	e15c0001 	cmp	ip, r1
		start += (len - n);
    846c:	c061100c 	rsbgt	r1, r1, ip
    8470:	c0833001 	addgt	r3, r3, r1

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    8474:	e2422001 	sub	r2, r2, #1
    8478:	e1a01000 	mov	r1, r0
    847c:	ea000002 	b	848c <reverse+0x2c>
		*dst++ = *p;
    8480:	e452c001 	ldrb	ip, [r2], #-1
    8484:	e5c1c000 	strb	ip, [r1]
    8488:	e2811001 	add	r1, r1, #1
		start += (len - n);

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    848c:	e1520003 	cmp	r2, r3
    8490:	2afffffa 	bcs	8480 <reverse+0x20>
		*dst++ = *p;
	*dst++ = 0;
    8494:	e3a03000 	mov	r3, #0
    8498:	e5c13000 	strb	r3, [r1]

	return s;
}
    849c:	e12fff1e 	bx	lr

000084a0 <emit>:

static char* emit(unsigned base, char *dst, int n, int val, int width, int signed_p) {
    84a0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    84a4:	e24dd040 	sub	sp, sp, #64	; 0x40
    84a8:	e1a05001 	mov	r5, r1
    84ac:	e1a04002 	mov	r4, r2
    84b0:	e59d2058 	ldr	r2, [sp, #88]	; 0x58
	// XXX: constrain width to be >= bit size: can change this.
	if(width > n)
    84b4:	e1520004 	cmp	r2, r4
		width = n - 1;
    84b8:	c2442001 	subgt	r2, r4, #1

	char buf[64], *p = buf; 
	unsigned u = val;
    84bc:	e1a0c003 	mov	ip, r3

	switch(base) { 
    84c0:	e2400002 	sub	r0, r0, #2
    84c4:	e350000e 	cmp	r0, #14
    84c8:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
    84cc:	ea000042 	b	85dc <emit+0x13c>
    84d0:	000085b4 			; <UNDEFINED> instruction: 0x000085b4
    84d4:	000085dc 	ldrdeq	r8, [r0], -ip
    84d8:	000085dc 	ldrdeq	r8, [r0], -ip
    84dc:	000085dc 	ldrdeq	r8, [r0], -ip
    84e0:	000085dc 	ldrdeq	r8, [r0], -ip
    84e4:	000085dc 	ldrdeq	r8, [r0], -ip
    84e8:	000085a8 	andeq	r8, r0, r8, lsr #11
    84ec:	000085dc 	ldrdeq	r8, [r0], -ip
    84f0:	0000850c 	andeq	r8, r0, ip, lsl #10
    84f4:	000085dc 	ldrdeq	r8, [r0], -ip
    84f8:	000085dc 	ldrdeq	r8, [r0], -ip
    84fc:	000085dc 	ldrdeq	r8, [r0], -ip
    8500:	000085dc 	ldrdeq	r8, [r0], -ip
    8504:	000085dc 	ldrdeq	r8, [r0], -ip
    8508:	00008580 	andeq	r8, r0, r0, lsl #11
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
    850c:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
    8510:	e2911000 	adds	r1, r1, #0
    8514:	13a01001 	movne	r1, #1
    8518:	e0111fa3 	ands	r1, r1, r3, lsr #31
				neg_p = 1;
				val = -val;
    851c:	1263c000 	rsbne	ip, r3, #0
	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
				neg_p = 1;
    8520:	13a08001 	movne	r8, #1
	unsigned u = val;

	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
    8524:	03a08000 	moveq	r8, #0
			if(val < 0 && signed_p) {
				neg_p = 1;
    8528:	e1a0100d 	mov	r1, sp
				val = -val;
				u = val;
			}
			do { 
				*p++ = "0123456789"[u % 10];
    852c:	e59f70e8 	ldr	r7, [pc, #232]	; 861c <emit+0x17c>
    8530:	e59f60e8 	ldr	r6, [pc, #232]	; 8620 <emit+0x180>
    8534:	ea000000 	b	853c <emit+0x9c>
    8538:	e1a01003 	mov	r1, r3
    853c:	e2813001 	add	r3, r1, #1
    8540:	e08e0c97 	umull	r0, lr, r7, ip
    8544:	e1a0e1ae 	lsr	lr, lr, #3
    8548:	e1a0000e 	mov	r0, lr
    854c:	e08ee10e 	add	lr, lr, lr, lsl #2
    8550:	e1a0e08e 	lsl	lr, lr, #1
    8554:	e06ee00c 	rsb	lr, lr, ip
    8558:	e7d6c00e 	ldrb	ip, [r6, lr]
    855c:	e5c1c000 	strb	ip, [r1]
			} while(u /= 10); 
    8560:	e1a0c000 	mov	ip, r0
    8564:	e3500000 	cmp	r0, #0
    8568:	1afffff2 	bne	8538 <emit+0x98>
			if(neg_p)
    856c:	e3580000 	cmp	r8, #0
				*p++ = '-';
    8570:	12813002 	addne	r3, r1, #2
    8574:	13a0002d 	movne	r0, #45	; 0x2d
    8578:	15c10001 	strbne	r0, [r1, #1]
    857c:	ea00001c 	b	85f4 <emit+0x154>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    8580:	e1a0e00d 	mov	lr, sp
			break;
		}
		case 16:
			u = val;
                        do {
                                *p++ = "0123456789abcdef"[u % 16];
    8584:	e59f0098 	ldr	r0, [pc, #152]	; 8624 <emit+0x184>
    8588:	e28e3001 	add	r3, lr, #1
    858c:	e20c100f 	and	r1, ip, #15
    8590:	e7d01001 	ldrb	r1, [r0, r1]
    8594:	e5ce1000 	strb	r1, [lr]
    8598:	e1a0e003 	mov	lr, r3
                        } while(u /= 16);
    859c:	e1b0c22c 	lsrs	ip, ip, #4
    85a0:	1afffff8 	bne	8588 <emit+0xe8>
    85a4:	ea000012 	b	85f4 <emit+0x154>
                        break;
		// just a single char
		case 8:
			*p++ = val;
    85a8:	e5cd3000 	strb	r3, [sp]
    85ac:	e28d3001 	add	r3, sp, #1
			break;
    85b0:	ea00000f 	b	85f4 <emit+0x154>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    85b4:	e1a0e00d 	mov	lr, sp
#if 0
			for(int i = 0; i < 32; i++)
				*p++ = "01"[(u & (1<<i)) != 0];
#else
                        do {
                        	*p++ = "01"[u % 2];
    85b8:	e59f0068 	ldr	r0, [pc, #104]	; 8628 <emit+0x188>
    85bc:	e28e3001 	add	r3, lr, #1
    85c0:	e20c1001 	and	r1, ip, #1
    85c4:	e7d01001 	ldrb	r1, [r0, r1]
    85c8:	e5ce1000 	strb	r1, [lr]
    85cc:	e1a0e003 	mov	lr, r3
			} while(u /= 2);
    85d0:	e1b0c0ac 	lsrs	ip, ip, #1
    85d4:	1afffff8 	bne	85bc <emit+0x11c>
    85d8:	ea000005 	b	85f4 <emit+0x154>
#endif
			break;
		default:
			assert(0);
    85dc:	e59f0048 	ldr	r0, [pc, #72]	; 862c <emit+0x18c>
    85e0:	e59f1048 	ldr	r1, [pc, #72]	; 8630 <emit+0x190>
    85e4:	e59f2048 	ldr	r2, [pc, #72]	; 8634 <emit+0x194>
    85e8:	e3a03075 	mov	r3, #117	; 0x75
    85ec:	ebffff68 	bl	8394 <printk>
    85f0:	eb0000e8 	bl	8998 <rpi_reboot>
	}
	// number string is reversed, so re-reverse it.
	return reverse(dst, n, pad(p, buf, width), buf);
    85f4:	e1a00003 	mov	r0, r3
    85f8:	e1a0100d 	mov	r1, sp
    85fc:	ebffff8c 	bl	8434 <pad>
    8600:	e1a02000 	mov	r2, r0
    8604:	e1a00005 	mov	r0, r5
    8608:	e1a01004 	mov	r1, r4
    860c:	e1a0300d 	mov	r3, sp
    8610:	ebffff92 	bl	8460 <reverse>
}
    8614:	e28dd040 	add	sp, sp, #64	; 0x40
    8618:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    861c:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    8620:	0000905c 	andeq	r9, r0, ip, asr r0
    8624:	00009068 	andeq	r9, r0, r8, rrx
    8628:	0000907c 	andeq	r9, r0, ip, ror r0
    862c:	00009034 	andeq	r9, r0, r4, lsr r0
    8630:	00009048 	andeq	r9, r0, r8, asr #32
    8634:	00009010 	andeq	r9, r0, r0, lsl r0

00008638 <rpi_set_output>:
// override this is going through the network.
int (*rpi_putchar)(int c) = internal_putchar;
#endif


void rpi_set_output(int (*putc_fp)(int), int (*puts_fp)(const char *)) {
    8638:	e92d4008 	push	{r3, lr}
    assert(putc_fp);
    863c:	e3500000 	cmp	r0, #0
    8640:	1a000005 	bne	865c <rpi_set_output+0x24>
    8644:	e59f0028 	ldr	r0, [pc, #40]	; 8674 <rpi_set_output+0x3c>
    8648:	e59f1028 	ldr	r1, [pc, #40]	; 8678 <rpi_set_output+0x40>
    864c:	e59f2028 	ldr	r2, [pc, #40]	; 867c <rpi_set_output+0x44>
    8650:	e3a03020 	mov	r3, #32
    8654:	ebffff4e 	bl	8394 <printk>
    8658:	eb0000ce 	bl	8998 <rpi_reboot>
    rpi_putchar = putc_fp;
    865c:	e59f301c 	ldr	r3, [pc, #28]	; 8680 <rpi_set_output+0x48>
    8660:	e5830000 	str	r0, [r3]
    if(puts_fp)
    8664:	e3510000 	cmp	r1, #0
        putk = puts_fp;
    8668:	159f3014 	ldrne	r3, [pc, #20]	; 8684 <rpi_set_output+0x4c>
    866c:	15831000 	strne	r1, [r3]
    8670:	e8bd8008 	pop	{r3, pc}
    8674:	00009080 	andeq	r9, r0, r0, lsl #1
    8678:	00009048 	andeq	r9, r0, r8, asr #32
    867c:	00009018 	andeq	r9, r0, r8, lsl r0
    8680:	00008edc 	ldrdeq	r8, [r0], -ip
    8684:	00008ed8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>

00008688 <va_printk>:
	return reverse(dst, n, pad(p, buf, width), buf);
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
    8688:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    868c:	e24dd08c 	sub	sp, sp, #140	; 0x8c
    8690:	e1a0b000 	mov	fp, r0
    8694:	e1a0a003 	mov	sl, r3
	char *p = buf, *e = buf + n - 1;
    8698:	e2411001 	sub	r1, r1, #1
    869c:	e0808001 	add	r8, r0, r1

	buf[0] = 0;
    86a0:	e3a03000 	mov	r3, #0
    86a4:	e5c03000 	strb	r3, [r0]
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;
    86a8:	e1a04000 	mov	r4, r0

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    86ac:	ea000087 	b	88d0 <va_printk+0x248>
		if(*fmt != '%')
    86b0:	e3530025 	cmp	r3, #37	; 0x25
			*p++ = *fmt++;
    86b4:	12822001 	addne	r2, r2, #1
    86b8:	15c43000 	strbne	r3, [r4]
    86bc:	12844001 	addne	r4, r4, #1
    86c0:	1a000082 	bne	88d0 <va_printk+0x248>
		
		else if(fmt[1] == '%') {
    86c4:	e5d21001 	ldrb	r1, [r2, #1]
    86c8:	e3510025 	cmp	r1, #37	; 0x25
			*p++ = *fmt;
    86cc:	05c43000 	strbeq	r3, [r4]
			fmt+=2;
    86d0:	02822002 	addeq	r2, r2, #2
	for(; *fmt && p < e; ) {
		if(*fmt != '%')
			*p++ = *fmt++;
		
		else if(fmt[1] == '%') {
			*p++ = *fmt;
    86d4:	02844001 	addeq	r4, r4, #1
    86d8:	0a00007c 	beq	88d0 <va_printk+0x248>
			fmt+=2;
		} else {	
			fmt++;
    86dc:	e2826001 	add	r6, r2, #1

			char *s, num[128];
			unsigned width = 0;
    86e0:	e3a07000 	mov	r7, #0

			while(isdigit(*fmt)) {
    86e4:	ea000004 	b	86fc <va_printk+0x74>
				width = width*10 + *fmt - '0';
    86e8:	e0877107 	add	r7, r7, r7, lsl #2
    86ec:	e1a07087 	lsl	r7, r7, #1
    86f0:	e0877005 	add	r7, r7, r5
    86f4:	e2477030 	sub	r7, r7, #48	; 0x30
				fmt++;
    86f8:	e2866001 	add	r6, r6, #1
			fmt++;

			char *s, num[128];
			unsigned width = 0;

			while(isdigit(*fmt)) {
    86fc:	e5d65000 	ldrb	r5, [r6]
    8700:	e1a09005 	mov	r9, r5
    8704:	e1a00005 	mov	r0, r5
    8708:	ebffff44 	bl	8420 <isdigit>
    870c:	e3500000 	cmp	r0, #0
    8710:	1afffff4 	bne	86e8 <va_printk+0x60>
				width = width*10 + *fmt - '0';
				fmt++;
			}
			assert(width < 32);
    8714:	e357001f 	cmp	r7, #31
    8718:	9a000005 	bls	8734 <va_printk+0xac>
    871c:	e59f01d8 	ldr	r0, [pc, #472]	; 88fc <va_printk+0x274>
    8720:	e59f11d8 	ldr	r1, [pc, #472]	; 8900 <va_printk+0x278>
    8724:	e59f21d8 	ldr	r2, [pc, #472]	; 8904 <va_printk+0x27c>
    8728:	e3a03092 	mov	r3, #146	; 0x92
    872c:	ebffff18 	bl	8394 <printk>
    8730:	eb000098 	bl	8998 <rpi_reboot>
			
			switch(*fmt) {
    8734:	e2455062 	sub	r5, r5, #98	; 0x62
    8738:	e3550016 	cmp	r5, #22
    873c:	979ff105 	ldrls	pc, [pc, r5, lsl #2]
    8740:	ea000051 	b	888c <va_printk+0x204>
    8744:	00008830 	andeq	r8, r0, r0, lsr r8
    8748:	00008864 	andeq	r8, r0, r4, ror #16
    874c:	000087b8 			; <UNDEFINED> instruction: 0x000087b8
    8750:	0000888c 	andeq	r8, r0, ip, lsl #17
    8754:	000087a0 	andeq	r8, r0, r0, lsr #15
    8758:	0000888c 	andeq	r8, r0, ip, lsl #17
    875c:	0000888c 	andeq	r8, r0, ip, lsl #17
    8760:	0000888c 	andeq	r8, r0, ip, lsl #17
    8764:	0000888c 	andeq	r8, r0, ip, lsl #17
    8768:	0000888c 	andeq	r8, r0, ip, lsl #17
    876c:	0000888c 	andeq	r8, r0, ip, lsl #17
    8770:	0000888c 	andeq	r8, r0, ip, lsl #17
    8774:	0000888c 	andeq	r8, r0, ip, lsl #17
    8778:	0000888c 	andeq	r8, r0, ip, lsl #17
    877c:	00008808 	andeq	r8, r0, r8, lsl #16
    8780:	0000888c 	andeq	r8, r0, ip, lsl #17
    8784:	0000888c 	andeq	r8, r0, ip, lsl #17
    8788:	00008858 	andeq	r8, r0, r8, asr r8
    878c:	0000888c 	andeq	r8, r0, ip, lsl #17
    8790:	000087e0 	andeq	r8, r0, r0, ror #15
    8794:	0000888c 	andeq	r8, r0, ip, lsl #17
    8798:	0000888c 	andeq	r8, r0, ip, lsl #17
    879c:	00008808 	andeq	r8, r0, r8, lsl #16
			case 'f':
			{
#ifndef RPI_FP_ENABLED
				panic("float not enabled!!!");
    87a0:	e59f0160 	ldr	r0, [pc, #352]	; 8908 <va_printk+0x280>
    87a4:	e59f1154 	ldr	r1, [pc, #340]	; 8900 <va_printk+0x278>
    87a8:	e59f2154 	ldr	r2, [pc, #340]	; 8904 <va_printk+0x27c>
    87ac:	e3a03098 	mov	r3, #152	; 0x98
    87b0:	ebfffef7 	bl	8394 <printk>
    87b4:	eb000077 	bl	8998 <rpi_reboot>

				break;
#endif
			}
			case 'd':
				s = emit(10, num, 128, va_arg(args, int), width, 1);
    87b8:	e59a3000 	ldr	r3, [sl]
    87bc:	e28aa004 	add	sl, sl, #4
    87c0:	e58d7000 	str	r7, [sp]
    87c4:	e3a02001 	mov	r2, #1
    87c8:	e58d2004 	str	r2, [sp, #4]
    87cc:	e3a0000a 	mov	r0, #10
    87d0:	e28d1008 	add	r1, sp, #8
    87d4:	e3a02080 	mov	r2, #128	; 0x80
    87d8:	ebffff30 	bl	84a0 <emit>
				break;
    87dc:	ea000031 	b	88a8 <va_printk+0x220>
			case 'u':
				s = emit(10, num, 128, va_arg(args, unsigned), width, 0);
    87e0:	e59a3000 	ldr	r3, [sl]
    87e4:	e28aa004 	add	sl, sl, #4
    87e8:	e58d7000 	str	r7, [sp]
    87ec:	e3a02000 	mov	r2, #0
    87f0:	e58d2004 	str	r2, [sp, #4]
    87f4:	e3a0000a 	mov	r0, #10
    87f8:	e28d1008 	add	r1, sp, #8
    87fc:	e3a02080 	mov	r2, #128	; 0x80
    8800:	ebffff26 	bl	84a0 <emit>
				break;
    8804:	ea000027 	b	88a8 <va_printk+0x220>
			case 'p':
			case 'x':
				s = emit(16, num, 128, va_arg(args, unsigned), width, 0);
    8808:	e59a3000 	ldr	r3, [sl]
    880c:	e28aa004 	add	sl, sl, #4
    8810:	e58d7000 	str	r7, [sp]
    8814:	e3a02000 	mov	r2, #0
    8818:	e58d2004 	str	r2, [sp, #4]
    881c:	e3a00010 	mov	r0, #16
    8820:	e28d1008 	add	r1, sp, #8
    8824:	e3a02080 	mov	r2, #128	; 0x80
    8828:	ebffff1c 	bl	84a0 <emit>
				break;
    882c:	ea00001d 	b	88a8 <va_printk+0x220>
			case 'b':
				s = emit(2, num, 128, va_arg(args, unsigned), width, 0);
    8830:	e59a3000 	ldr	r3, [sl]
    8834:	e28aa004 	add	sl, sl, #4
    8838:	e58d7000 	str	r7, [sp]
    883c:	e3a02000 	mov	r2, #0
    8840:	e58d2004 	str	r2, [sp, #4]
    8844:	e3a00002 	mov	r0, #2
    8848:	e28d1008 	add	r1, sp, #8
    884c:	e3a02080 	mov	r2, #128	; 0x80
    8850:	ebffff12 	bl	84a0 <emit>
				break;
    8854:	ea000013 	b	88a8 <va_printk+0x220>
			case 's':
				s = va_arg(args, char *);
    8858:	e59a0000 	ldr	r0, [sl]
    885c:	e28aa004 	add	sl, sl, #4
				break;
    8860:	ea000010 	b	88a8 <va_printk+0x220>
			case 'c':
				s = emit(8, num, 128, va_arg(args, int),width,0);
    8864:	e59a3000 	ldr	r3, [sl]
    8868:	e28aa004 	add	sl, sl, #4
    886c:	e58d7000 	str	r7, [sp]
    8870:	e3a02000 	mov	r2, #0
    8874:	e58d2004 	str	r2, [sp, #4]
    8878:	e3a00008 	mov	r0, #8
    887c:	e08d1000 	add	r1, sp, r0
    8880:	e3a02080 	mov	r2, #128	; 0x80
    8884:	ebffff05 	bl	84a0 <emit>
				break;
    8888:	ea000006 	b	88a8 <va_printk+0x220>
			default: 
				panic("printk: not handling specifier '%c'\n", *fmt);
    888c:	e58d9000 	str	r9, [sp]
    8890:	e59f0074 	ldr	r0, [pc, #116]	; 890c <va_printk+0x284>
    8894:	e59f1064 	ldr	r1, [pc, #100]	; 8900 <va_printk+0x278>
    8898:	e59f2064 	ldr	r2, [pc, #100]	; 8904 <va_printk+0x27c>
    889c:	e3a030b9 	mov	r3, #185	; 0xb9
    88a0:	ebfffebb 	bl	8394 <printk>
    88a4:	eb00003b 	bl	8998 <rpi_reboot>
				return 0;   // ugh
			}
			fmt++;
    88a8:	e2862001 	add	r2, r6, #1

			// safe string copy
			for(; p < e && *s; )
    88ac:	ea000002 	b	88bc <va_printk+0x234>
				*p++ = *s++;
    88b0:	e2800001 	add	r0, r0, #1
    88b4:	e5c43000 	strb	r3, [r4]
    88b8:	e2844001 	add	r4, r4, #1
				return 0;   // ugh
			}
			fmt++;

			// safe string copy
			for(; p < e && *s; )
    88bc:	e1540008 	cmp	r4, r8
    88c0:	2a000002 	bcs	88d0 <va_printk+0x248>
    88c4:	e5d03000 	ldrb	r3, [r0]
    88c8:	e3530000 	cmp	r3, #0
    88cc:	1afffff7 	bne	88b0 <va_printk+0x228>

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    88d0:	e5d23000 	ldrb	r3, [r2]
    88d4:	e3530000 	cmp	r3, #0
    88d8:	0a000001 	beq	88e4 <va_printk+0x25c>
    88dc:	e1540008 	cmp	r4, r8
    88e0:	3affff72 	bcc	86b0 <va_printk+0x28>
			// safe string copy
			for(; p < e && *s; )
				*p++ = *s++;
		}
	}
	*p++ = 0;
    88e4:	e2840001 	add	r0, r4, #1
    88e8:	e3a03000 	mov	r3, #0
    88ec:	e5c43000 	strb	r3, [r4]
	return p - buf;
}
    88f0:	e06b0000 	rsb	r0, fp, r0
    88f4:	e28dd08c 	add	sp, sp, #140	; 0x8c
    88f8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    88fc:	00009098 	muleq	r0, r8, r0
    8900:	00009048 	andeq	r9, r0, r8, asr #32
    8904:	00009028 	andeq	r9, r0, r8, lsr #32
    8908:	000090b4 	strheq	r9, [r0], -r4
    890c:	000090dc 	ldrdeq	r9, [r0], -ip

00008910 <clean_reboot>:
#include "rpi.h"

// print out a special message so bootloader exits
void clean_reboot(void) {
    8910:	e92d4008 	push	{r3, lr}
    putk("DONE!!!\n");
    8914:	e59f3014 	ldr	r3, [pc, #20]	; 8930 <clean_reboot+0x20>
    8918:	e5933000 	ldr	r3, [r3]
    891c:	e59f0010 	ldr	r0, [pc, #16]	; 8934 <clean_reboot+0x24>
    8920:	e12fff33 	blx	r3
    delay_ms(100);       // (hopefully) enough time for message to get flushed.
    8924:	e3a00064 	mov	r0, #100	; 0x64
    8928:	eb000041 	bl	8a34 <delay_ms>
    rpi_reboot();
    892c:	eb000019 	bl	8998 <rpi_reboot>
    8930:	00008ed8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    8934:	00009114 	andeq	r9, r0, r4, lsl r1

00008938 <_cstart>:
#include "rpi.h"

void _cstart() {
    8938:	e92d4008 	push	{r3, lr}
    extern int __bss_start__, __bss_end__;
	void notmain();

    int* bss = &__bss_start__;
    893c:	e59f3020 	ldr	r3, [pc, #32]	; 8964 <_cstart+0x2c>
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    8940:	e59f2020 	ldr	r2, [pc, #32]	; 8968 <_cstart+0x30>
        *bss++ = 0;
    8944:	e3a01000 	mov	r1, #0
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    8948:	ea000001 	b	8954 <_cstart+0x1c>
        *bss++ = 0;
    894c:	e5831000 	str	r1, [r3]
    8950:	e2833004 	add	r3, r3, #4
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    8954:	e1530002 	cmp	r3, r2
    8958:	3afffffb 	bcc	894c <_cstart+0x14>
        *bss++ = 0;

    notmain(); 
    895c:	ebfffdbf 	bl	8060 <notmain>
	rpi_reboot();
    8960:	eb00000c 	bl	8998 <rpi_reboot>
    8964:	00009234 	andeq	r9, r0, r4, lsr r2
    8968:	00009660 	andeq	r9, r0, r0, ror #12

0000896c <at_user_level>:
 * works if we have a trashed stack pointer?
 */
static unsigned user_level = 0b10000;
int at_user_level(void) {
    unsigned cpsr = 0;
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    896c:	e10f0000 	mrs	r0, CPSR

    // user level = lower 5 bits = 0b10000);
    return (cpsr  & 0b11111)  == user_level;
    8970:	e200001f 	and	r0, r0, #31
}
    8974:	e3500010 	cmp	r0, #16
    8978:	13a00000 	movne	r0, #0
    897c:	03a00001 	moveq	r0, #1
    8980:	e12fff1e 	bx	lr

00008984 <set_user_level>:

// this is just used by the reboot code.
void set_user_level(void) {
    unsigned cpsr = 0;
    // XXX: shouldn't we just set the one bit?
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    8984:	e10f3000 	mrs	r3, CPSR
        cpsr = (cpsr & ~0b11111) | user_level;
    8988:	e3c3301f 	bic	r3, r3, #31
    898c:	e3833010 	orr	r3, r3, #16
    asm volatile("msr cpsr, %0" :: "r"(cpsr));
    8990:	e129f003 	msr	CPSR_fc, r3
    8994:	e12fff1e 	bx	lr

00008998 <rpi_reboot>:
}

void rpi_reboot(void) {
    8998:	e92d4008 	push	{r3, lr}
    if(at_user_level()) {
    899c:	ebfffff2 	bl	896c <at_user_level>
    89a0:	e3500000 	cmp	r0, #0
    89a4:	0a000000 	beq	89ac <rpi_reboot+0x14>
        set_user_level();
    89a8:	ebfffff5 	bl	8984 <set_user_level>
        // of stuff.
        // assert(!at_user_level());
    }

    // gives uart time to flush: should just call flush directly.
    delay_ms(30);
    89ac:	e3a0001e 	mov	r0, #30
    89b0:	eb00001f 	bl	8a34 <delay_ms>
    const int PM_WDOG = 0x20100024;
    const int PM_PASSWORD = 0x5a000000;
    const int PM_RSTC_WRCFG_FULL_RESET = 0x00000020;

    // timeout = 1/16th of a second? (whatever)
    PUT32(PM_WDOG, PM_PASSWORD | 1);
    89b4:	e59f0014 	ldr	r0, [pc, #20]	; 89d0 <rpi_reboot+0x38>
    89b8:	e59f1014 	ldr	r1, [pc, #20]	; 89d4 <rpi_reboot+0x3c>
    89bc:	eb000028 	bl	8a64 <PUT32>
    PUT32(PM_RSTC, PM_PASSWORD | PM_RSTC_WRCFG_FULL_RESET);
    89c0:	e59f0010 	ldr	r0, [pc, #16]	; 89d8 <rpi_reboot+0x40>
    89c4:	e59f1010 	ldr	r1, [pc, #16]	; 89dc <rpi_reboot+0x44>
    89c8:	eb000025 	bl	8a64 <PUT32>
    89cc:	eafffffe 	b	89cc <rpi_reboot+0x34>
    89d0:	20100024 	andscs	r0, r0, r4, lsr #32
    89d4:	5a000001 	bpl	89e0 <delay_cycles>
    89d8:	2010001c 	andscs	r0, r0, ip, lsl r0
    89dc:	5a000020 	bpl	8a64 <PUT32>

000089e0 <delay_cycles>:
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    89e0:	ea000001 	b	89ec <delay_cycles+0xc>
        asm("add r1, r1, #0");
    89e4:	e2811000 	add	r1, r1, #0
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    89e8:	e1a00003 	mov	r0, r3
    89ec:	e2403001 	sub	r3, r0, #1
    89f0:	e3500000 	cmp	r0, #0
    89f4:	1afffffa 	bne	89e4 <delay_cycles+0x4>
        asm("add r1, r1, #0");
}
    89f8:	e12fff1e 	bx	lr

000089fc <timer_get_usec>:

// in usec
unsigned timer_get_usec(void) {
    89fc:	e92d4008 	push	{r3, lr}
    return GET32(0x20003004);
    8a00:	e59f0004 	ldr	r0, [pc, #4]	; 8a0c <timer_get_usec+0x10>
    8a04:	eb000022 	bl	8a94 <GET32>
}
    8a08:	e8bd8008 	pop	{r3, pc}
    8a0c:	20003004 	andcs	r3, r0, r4

00008a10 <delay_us>:

void delay_us(unsigned us) {
    8a10:	e92d4038 	push	{r3, r4, r5, lr}
    8a14:	e1a05000 	mov	r5, r0
    unsigned rb = timer_get_usec();
    8a18:	ebfffff7 	bl	89fc <timer_get_usec>
    8a1c:	e1a04000 	mov	r4, r0
    while (1) {
        unsigned ra = timer_get_usec();
    8a20:	ebfffff5 	bl	89fc <timer_get_usec>
        if ((ra - rb) >= us) {
    8a24:	e0640000 	rsb	r0, r4, r0
    8a28:	e1500005 	cmp	r0, r5
    8a2c:	3afffffb 	bcc	8a20 <delay_us+0x10>
            break;
        }
    }
}
    8a30:	e8bd8038 	pop	{r3, r4, r5, pc}

00008a34 <delay_ms>:
void delay_ms(unsigned ms) {
    8a34:	e92d4008 	push	{r3, lr}
    delay_us(ms*1000);
    8a38:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    8a3c:	e0000093 	mul	r0, r3, r0
    8a40:	ebfffff2 	bl	8a10 <delay_us>
    8a44:	e8bd8008 	pop	{r3, pc}

00008a48 <delay_sec>:
}
void delay_sec(unsigned sec) {
    8a48:	e92d4008 	push	{r3, lr}
    delay_ms(sec*1000);
    8a4c:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    8a50:	e0000093 	mul	r0, r3, r0
    8a54:	ebfffff6 	bl	8a34 <delay_ms>
    8a58:	e8bd8008 	pop	{r3, pc}

00008a5c <put32>:
    8a5c:	e5801000 	str	r1, [r0]
    8a60:	e12fff1e 	bx	lr

00008a64 <PUT32>:
    8a64:	e5801000 	str	r1, [r0]
    8a68:	e12fff1e 	bx	lr

00008a6c <put16>:
    8a6c:	e1c010b0 	strh	r1, [r0]
    8a70:	e12fff1e 	bx	lr

00008a74 <PUT16>:
    8a74:	e1c010b0 	strh	r1, [r0]
    8a78:	e12fff1e 	bx	lr

00008a7c <put8>:
    8a7c:	e5c01000 	strb	r1, [r0]
    8a80:	e12fff1e 	bx	lr

00008a84 <PUT8>:
    8a84:	e5c01000 	strb	r1, [r0]
    8a88:	e12fff1e 	bx	lr

00008a8c <get32>:
    8a8c:	e5900000 	ldr	r0, [r0]
    8a90:	e12fff1e 	bx	lr

00008a94 <GET32>:
    8a94:	e5900000 	ldr	r0, [r0]
    8a98:	e12fff1e 	bx	lr

00008a9c <GETPC>:
    8a9c:	e1a0000e 	mov	r0, lr
    8aa0:	e12fff1e 	bx	lr

00008aa4 <dummy>:
    8aa4:	e12fff1e 	bx	lr

00008aa8 <or_in32>:
    8aa8:	e92d4070 	push	{r4, r5, r6, lr}
    8aac:	e1a04000 	mov	r4, r0
    8ab0:	e1a05001 	mov	r5, r1
    8ab4:	ebfffff4 	bl	8a8c <get32>
    8ab8:	e1801005 	orr	r1, r0, r5
    8abc:	e1a00004 	mov	r0, r4
    8ac0:	ebffffe5 	bl	8a5c <put32>
    8ac4:	e8bd8070 	pop	{r4, r5, r6, pc}

00008ac8 <uart_get>:
    8ac8:	e59f0000 	ldr	r0, [pc]	; 8ad0 <uart_get+0x8>
    8acc:	e12fff1e 	bx	lr
    8ad0:	20215040 	eorcs	r5, r1, r0, asr #32

00008ad4 <uart_init>:
    8ad4:	e92d4010 	push	{r4, lr}
    8ad8:	e3a01002 	mov	r1, #2
    8adc:	e3a0000e 	mov	r0, #14
    8ae0:	eb00004b 	bl	8c14 <gpio_set_function>
    8ae4:	e3a01002 	mov	r1, #2
    8ae8:	e3a0000f 	mov	r0, #15
    8aec:	eb000048 	bl	8c14 <gpio_set_function>
    8af0:	eb0000f2 	bl	8ec0 <dev_barrier>
    8af4:	e3a01001 	mov	r1, #1
    8af8:	e59f0064 	ldr	r0, [pc, #100]	; 8b64 <uart_init+0x90>
    8afc:	ebffffe9 	bl	8aa8 <or_in32>
    8b00:	eb0000ee 	bl	8ec0 <dev_barrier>
    8b04:	e59f405c 	ldr	r4, [pc, #92]	; 8b68 <uart_init+0x94>
    8b08:	e3a01000 	mov	r1, #0
    8b0c:	e1a00004 	mov	r0, r4
    8b10:	ebffffd1 	bl	8a5c <put32>
    8b14:	e3a01000 	mov	r1, #0
    8b18:	e59f004c 	ldr	r0, [pc, #76]	; 8b6c <uart_init+0x98>
    8b1c:	ebffffce 	bl	8a5c <put32>
    8b20:	e3a01003 	mov	r1, #3
    8b24:	e59f0044 	ldr	r0, [pc, #68]	; 8b70 <uart_init+0x9c>
    8b28:	ebffffcb 	bl	8a5c <put32>
    8b2c:	e3a01000 	mov	r1, #0
    8b30:	e59f003c 	ldr	r0, [pc, #60]	; 8b74 <uart_init+0xa0>
    8b34:	ebffffc8 	bl	8a5c <put32>
    8b38:	e3a010c7 	mov	r1, #199	; 0xc7
    8b3c:	e59f0034 	ldr	r0, [pc, #52]	; 8b78 <uart_init+0xa4>
    8b40:	ebffffc5 	bl	8a5c <put32>
    8b44:	e59f1030 	ldr	r1, [pc, #48]	; 8b7c <uart_init+0xa8>
    8b48:	e59f0030 	ldr	r0, [pc, #48]	; 8b80 <uart_init+0xac>
    8b4c:	ebffffc2 	bl	8a5c <put32>
    8b50:	e3a01003 	mov	r1, #3
    8b54:	e1a00004 	mov	r0, r4
    8b58:	ebffffbf 	bl	8a5c <put32>
    8b5c:	eb0000d7 	bl	8ec0 <dev_barrier>
    8b60:	e8bd8010 	pop	{r4, pc}
    8b64:	20215004 	eorcs	r5, r1, r4
    8b68:	20215060 	eorcs	r5, r1, r0, rrx
    8b6c:	20215044 	eorcs	r5, r1, r4, asr #32
    8b70:	2021504c 	eorcs	r5, r1, ip, asr #32
    8b74:	20215050 	eorcs	r5, r1, r0, asr r0
    8b78:	20215048 	eorcs	r5, r1, r8, asr #32
    8b7c:	0000010e 	andeq	r0, r0, lr, lsl #2
    8b80:	20215068 	eorcs	r5, r1, r8, rrx

00008b84 <uart_can_getc>:
    8b84:	e92d4010 	push	{r4, lr}
    8b88:	e59f0008 	ldr	r0, [pc, #8]	; 8b98 <uart_can_getc+0x14>
    8b8c:	ebffffbe 	bl	8a8c <get32>
    8b90:	e2000001 	and	r0, r0, #1
    8b94:	e8bd8010 	pop	{r4, pc}
    8b98:	20215064 	eorcs	r5, r1, r4, rrx

00008b9c <uart_can_putc>:
    8b9c:	e92d4010 	push	{r4, lr}
    8ba0:	e59f0010 	ldr	r0, [pc, #16]	; 8bb8 <uart_can_putc+0x1c>
    8ba4:	ebffffb8 	bl	8a8c <get32>
    8ba8:	e3100002 	tst	r0, #2
    8bac:	13a00001 	movne	r0, #1
    8bb0:	03a00000 	moveq	r0, #0
    8bb4:	e8bd8010 	pop	{r4, pc}
    8bb8:	20215064 	eorcs	r5, r1, r4, rrx

00008bbc <uart_getc>:
    8bbc:	e92d4010 	push	{r4, lr}
    8bc0:	ebffffef 	bl	8b84 <uart_can_getc>
    8bc4:	e3500000 	cmp	r0, #0
    8bc8:	0afffffc 	beq	8bc0 <uart_getc+0x4>
    8bcc:	e59f0008 	ldr	r0, [pc, #8]	; 8bdc <uart_getc+0x20>
    8bd0:	ebffffad 	bl	8a8c <get32>
    8bd4:	e6ef0070 	uxtb	r0, r0
    8bd8:	e8bd8010 	pop	{r4, pc}
    8bdc:	20215040 	eorcs	r5, r1, r0, asr #32

00008be0 <uart_putc>:
    8be0:	e92d4010 	push	{r4, lr}
    8be4:	e1a04000 	mov	r4, r0
    8be8:	ebffffeb 	bl	8b9c <uart_can_putc>
    8bec:	e3500000 	cmp	r0, #0
    8bf0:	0afffffc 	beq	8be8 <uart_putc+0x8>
    8bf4:	e6ef1074 	uxtb	r1, r4
    8bf8:	e59f0004 	ldr	r0, [pc, #4]	; 8c04 <uart_putc+0x24>
    8bfc:	ebffff96 	bl	8a5c <put32>
    8c00:	e8bd8010 	pop	{r4, pc}
    8c04:	20215040 	eorcs	r5, r1, r0, asr #32

00008c08 <uart_has_data>:
    8c08:	e92d4010 	push	{r4, lr}
    8c0c:	ebffffdc 	bl	8b84 <uart_can_getc>
    8c10:	e8bd8010 	pop	{r4, pc}

00008c14 <gpio_set_function>:
    8c14:	e350001f 	cmp	r0, #31
    8c18:	812fff1e 	bxhi	lr
    8c1c:	e3d13007 	bics	r3, r1, #7
    8c20:	112fff1e 	bxne	lr
    8c24:	e92d4070 	push	{r4, r5, r6, lr}
    8c28:	e1a04001 	mov	r4, r1
    8c2c:	e59f2044 	ldr	r2, [pc, #68]	; 8c78 <gpio_set_function+0x64>
    8c30:	e0832290 	umull	r2, r3, r0, r2
    8c34:	e1a031a3 	lsr	r3, r3, #3
    8c38:	e1a06003 	mov	r6, r3
    8c3c:	e0833103 	add	r3, r3, r3, lsl #2
    8c40:	e1a02083 	lsl	r2, r3, #1
    8c44:	e0403002 	sub	r3, r0, r2
    8c48:	e0835083 	add	r5, r3, r3, lsl #1
    8c4c:	e1a06106 	lsl	r6, r6, #2
    8c50:	e2866202 	add	r6, r6, #536870912	; 0x20000000
    8c54:	e2866602 	add	r6, r6, #2097152	; 0x200000
    8c58:	e1a00006 	mov	r0, r6
    8c5c:	ebffff8a 	bl	8a8c <get32>
    8c60:	e3a01007 	mov	r1, #7
    8c64:	e1c01511 	bic	r1, r0, r1, lsl r5
    8c68:	e1811514 	orr	r1, r1, r4, lsl r5
    8c6c:	e1a00006 	mov	r0, r6
    8c70:	ebffff79 	bl	8a5c <put32>
    8c74:	e8bd8070 	pop	{r4, r5, r6, pc}
    8c78:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd

00008c7c <gpio_set_output>:
    8c7c:	e92d4010 	push	{r4, lr}
    8c80:	e3a01001 	mov	r1, #1
    8c84:	ebffffe2 	bl	8c14 <gpio_set_function>
    8c88:	e8bd8010 	pop	{r4, pc}

00008c8c <gpio_set_on>:
    8c8c:	e350001f 	cmp	r0, #31
    8c90:	812fff1e 	bxhi	lr
    8c94:	e92d4010 	push	{r4, lr}
    8c98:	e3a01001 	mov	r1, #1
    8c9c:	e1a01011 	lsl	r1, r1, r0
    8ca0:	e59f0004 	ldr	r0, [pc, #4]	; 8cac <gpio_set_on+0x20>
    8ca4:	ebffff6e 	bl	8a64 <PUT32>
    8ca8:	e8bd8010 	pop	{r4, pc}
    8cac:	2020001c 	eorcs	r0, r0, ip, lsl r0

00008cb0 <gpio_set_off>:
    8cb0:	e350001f 	cmp	r0, #31
    8cb4:	812fff1e 	bxhi	lr
    8cb8:	e92d4010 	push	{r4, lr}
    8cbc:	e3a01001 	mov	r1, #1
    8cc0:	e1a01011 	lsl	r1, r1, r0
    8cc4:	e59f0004 	ldr	r0, [pc, #4]	; 8cd0 <gpio_set_off+0x20>
    8cc8:	ebffff65 	bl	8a64 <PUT32>
    8ccc:	e8bd8010 	pop	{r4, pc}
    8cd0:	20200028 	eorcs	r0, r0, r8, lsr #32

00008cd4 <gpio_set_input>:
    8cd4:	e92d4010 	push	{r4, lr}
    8cd8:	e3a01000 	mov	r1, #0
    8cdc:	ebffffcc 	bl	8c14 <gpio_set_function>
    8ce0:	e8bd8010 	pop	{r4, pc}

00008ce4 <gpio_write>:
    8ce4:	e92d4010 	push	{r4, lr}
    8ce8:	e3510000 	cmp	r1, #0
    8cec:	1a000001 	bne	8cf8 <gpio_write+0x14>
    8cf0:	ebffffee 	bl	8cb0 <gpio_set_off>
    8cf4:	e8bd8010 	pop	{r4, pc}
    8cf8:	ebffffe3 	bl	8c8c <gpio_set_on>
    8cfc:	e8bd8010 	pop	{r4, pc}

00008d00 <gpio_read>:
    8d00:	e350001f 	cmp	r0, #31
    8d04:	8a000007 	bhi	8d28 <gpio_read+0x28>
    8d08:	e92d4010 	push	{r4, lr}
    8d0c:	e200401f 	and	r4, r0, #31
    8d10:	e59f3018 	ldr	r3, [pc, #24]	; 8d30 <gpio_read+0x30>
    8d14:	e08302a0 	add	r0, r3, r0, lsr #5
    8d18:	ebffff5d 	bl	8a94 <GET32>
    8d1c:	e1a00430 	lsr	r0, r0, r4
    8d20:	e2000001 	and	r0, r0, #1
    8d24:	e8bd8010 	pop	{r4, pc}
    8d28:	e3e00000 	mvn	r0, #0
    8d2c:	e12fff1e 	bx	lr
    8d30:	20200034 	eorcs	r0, r0, r4, lsr r0

00008d34 <kmalloc>:
 *  - The returned pointer should always be 4-byte aligned.  
 *    Easiest way is to make sure the heap pointer starts 4-byte
 *    and you always round up the number of bytes.  Make sure
 *    you put an assertion in.  
 */
void *kmalloc(unsigned nbytes) {
    8d34:	e92d4010 	push	{r4, lr}
    demand(init_p, calling before initialized);
    8d38:	e59f3048 	ldr	r3, [pc, #72]	; 8d88 <kmalloc+0x54>
    8d3c:	e5933000 	ldr	r3, [r3]
    8d40:	e3530000 	cmp	r3, #0
    8d44:	1a000005 	bne	8d60 <kmalloc+0x2c>
    8d48:	e59f003c 	ldr	r0, [pc, #60]	; 8d8c <kmalloc+0x58>
    8d4c:	e59f103c 	ldr	r1, [pc, #60]	; 8d90 <kmalloc+0x5c>
    8d50:	e59f203c 	ldr	r2, [pc, #60]	; 8d94 <kmalloc+0x60>
    8d54:	e3a0301a 	mov	r3, #26
    8d58:	ebfffd8d 	bl	8394 <printk>
    8d5c:	ebffff0d 	bl	8998 <rpi_reboot>
    
    void* to_allocate = heap_ptr;
    8d60:	e59f3020 	ldr	r3, [pc, #32]	; 8d88 <kmalloc+0x54>
    8d64:	e5934004 	ldr	r4, [r3, #4]
    unsigned rounded_nbytes = roundup(nbytes, 4);
    8d68:	e2802003 	add	r2, r0, #3
    8d6c:	e3c22003 	bic	r2, r2, #3
    heap_ptr += rounded_nbytes;
    8d70:	e0840002 	add	r0, r4, r2
    8d74:	e5830004 	str	r0, [r3, #4]
    memset(heap_ptr, 0, rounded_nbytes);
    8d78:	e3a01000 	mov	r1, #0
    8d7c:	ebfffd7c 	bl	8374 <memset>
    return to_allocate;

}
    8d80:	e1a00004 	mov	r0, r4
    8d84:	e8bd8010 	pop	{r4, pc}
    8d88:	00009654 	andeq	r9, r0, r4, asr r6
    8d8c:	00009148 	andeq	r9, r0, r8, asr #2
    8d90:	00009188 	andeq	r9, r0, r8, lsl #3
    8d94:	00009120 	andeq	r9, r0, r0, lsr #2

00008d98 <kmalloc_aligned>:

// address of returned pointer should be a multiple of
// alignment.
void *kmalloc_aligned(unsigned nbytes, unsigned alignment) {
    8d98:	e92d4008 	push	{r3, lr}
    demand(init_p, calling before initialized);
    8d9c:	e59f3074 	ldr	r3, [pc, #116]	; 8e18 <kmalloc_aligned+0x80>
    8da0:	e5933000 	ldr	r3, [r3]
    8da4:	e3530000 	cmp	r3, #0
    8da8:	1a000005 	bne	8dc4 <kmalloc_aligned+0x2c>
    8dac:	e59f0068 	ldr	r0, [pc, #104]	; 8e1c <kmalloc_aligned+0x84>
    8db0:	e59f1068 	ldr	r1, [pc, #104]	; 8e20 <kmalloc_aligned+0x88>
    8db4:	e59f2068 	ldr	r2, [pc, #104]	; 8e24 <kmalloc_aligned+0x8c>
    8db8:	e3a03027 	mov	r3, #39	; 0x27
    8dbc:	ebfffd74 	bl	8394 <printk>
    8dc0:	ebfffef4 	bl	8998 <rpi_reboot>

    if(alignment <= 4)
    8dc4:	e3510004 	cmp	r1, #4
    8dc8:	8a000001 	bhi	8dd4 <kmalloc_aligned+0x3c>
        return kmalloc(nbytes);
    8dcc:	ebffffd8 	bl	8d34 <kmalloc>
    8dd0:	e8bd8008 	pop	{r3, pc}
    demand(alignment % 4 == 0, "weird alignment: not a multiple of 4!");
    8dd4:	e3110003 	tst	r1, #3
    8dd8:	0a000005 	beq	8df4 <kmalloc_aligned+0x5c>
    8ddc:	e59f0044 	ldr	r0, [pc, #68]	; 8e28 <kmalloc_aligned+0x90>
    8de0:	e59f1038 	ldr	r1, [pc, #56]	; 8e20 <kmalloc_aligned+0x88>
    8de4:	e59f2038 	ldr	r2, [pc, #56]	; 8e24 <kmalloc_aligned+0x8c>
    8de8:	e3a0302b 	mov	r3, #43	; 0x2b
    8dec:	ebfffd68 	bl	8394 <printk>
    8df0:	ebfffee8 	bl	8998 <rpi_reboot>
    unsigned aligned_heap_ptr = (unsigned) heap_ptr;
    8df4:	e59f301c 	ldr	r3, [pc, #28]	; 8e18 <kmalloc_aligned+0x80>
    8df8:	e5932004 	ldr	r2, [r3, #4]
	aligned_heap_ptr = roundup(aligned_heap_ptr, alignment);
    8dfc:	e0812002 	add	r2, r1, r2
    8e00:	e2422001 	sub	r2, r2, #1
    8e04:	e2611000 	rsb	r1, r1, #0
    8e08:	e0021001 	and	r1, r2, r1
	heap_ptr = (void*) aligned_heap_ptr;
    8e0c:	e5831004 	str	r1, [r3, #4]

	return kmalloc(nbytes);
    8e10:	ebffffc7 	bl	8d34 <kmalloc>
}
    8e14:	e8bd8008 	pop	{r3, pc}
    8e18:	00009654 	andeq	r9, r0, r4, asr r6
    8e1c:	00009148 	andeq	r9, r0, r8, asr #2
    8e20:	00009188 	andeq	r9, r0, r8, lsl #3
    8e24:	00009128 	andeq	r9, r0, r8, lsr #2
    8e28:	0000919c 	muleq	r0, ip, r1

00008e2c <kmalloc_init>:
 *    - should be just a few lines of code.
 *    - sets heap pointer to the location of 
 *      __heap_start__.   print this to make sure
 *      it makes sense!
 */
void kmalloc_init(void) {
    8e2c:	e92d4008 	push	{r3, lr}
    demand(!init_p, cannot initialize twice!\n);
    8e30:	e59f3038 	ldr	r3, [pc, #56]	; 8e70 <kmalloc_init+0x44>
    8e34:	e5933000 	ldr	r3, [r3]
    8e38:	e3530000 	cmp	r3, #0
    8e3c:	0a000005 	beq	8e58 <kmalloc_init+0x2c>
    8e40:	e59f002c 	ldr	r0, [pc, #44]	; 8e74 <kmalloc_init+0x48>
    8e44:	e59f102c 	ldr	r1, [pc, #44]	; 8e78 <kmalloc_init+0x4c>
    8e48:	e59f202c 	ldr	r2, [pc, #44]	; 8e7c <kmalloc_init+0x50>
    8e4c:	e3a0303c 	mov	r3, #60	; 0x3c
    8e50:	ebfffd4f 	bl	8394 <printk>
    8e54:	ebfffecf 	bl	8998 <rpi_reboot>
    init_p = 1;
    8e58:	e59f3010 	ldr	r3, [pc, #16]	; 8e70 <kmalloc_init+0x44>
    8e5c:	e3a02001 	mov	r2, #1
    8e60:	e5832000 	str	r2, [r3]
    heap_ptr = &__heap_start__;
    8e64:	e59f2014 	ldr	r2, [pc, #20]	; 8e80 <kmalloc_init+0x54>
    8e68:	e5832004 	str	r2, [r3, #4]
    8e6c:	e8bd8008 	pop	{r3, pc}
    8e70:	00009654 	andeq	r9, r0, r4, asr r6
    8e74:	000091f4 	strdeq	r9, [r0], -r4
    8e78:	00009188 	andeq	r9, r0, r8, lsl #3
    8e7c:	00009138 	andeq	r9, r0, r8, lsr r1
    8e80:	00009660 	andeq	r9, r0, r0, ror #12

00008e84 <kfree_all>:
/* 
 * free all allocated memory: reset the heap 
 * pointer back to the beginning.
 */
void kfree_all(void) {
    heap_ptr = &__heap_start__;
    8e84:	e59f2008 	ldr	r2, [pc, #8]	; 8e94 <kfree_all+0x10>
    8e88:	e59f3008 	ldr	r3, [pc, #8]	; 8e98 <kfree_all+0x14>
    8e8c:	e5832004 	str	r2, [r3, #4]
    8e90:	e12fff1e 	bx	lr
    8e94:	00009660 	andeq	r9, r0, r0, ror #12
    8e98:	00009654 	andeq	r9, r0, r4, asr r6

00008e9c <kmalloc_heap_ptr>:
// allocated block satisfies: 
//    assert(<addr> < kmalloc_heap_ptr());
// 
void *kmalloc_heap_ptr(void) {
    return (void*) heap_ptr;
}
    8e9c:	e59f3004 	ldr	r3, [pc, #4]	; 8ea8 <kmalloc_heap_ptr+0xc>
    8ea0:	e5930004 	ldr	r0, [r3, #4]
    8ea4:	e12fff1e 	bx	lr
    8ea8:	00009654 	andeq	r9, r0, r4, asr r6

00008eac <internal_putchar>:
#include "rpi.h"

static int internal_putchar(int c) { uart_putc(c); return c; }
    8eac:	e92d4010 	push	{r4, lr}
    8eb0:	e1a04000 	mov	r4, r0
    8eb4:	ebffff49 	bl	8be0 <uart_putc>
    8eb8:	e1a00004 	mov	r0, r4
    8ebc:	e8bd8010 	pop	{r4, pc}

00008ec0 <dev_barrier>:
    8ec0:	ea000002 	b	8ed0 <dsb>

00008ec4 <dmb>:
    8ec4:	e3a00000 	mov	r0, #0
    8ec8:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
    8ecc:	e12fff1e 	bx	lr

00008ed0 <dsb>:
    8ed0:	ee070f9a 	mcr	15, 0, r0, cr7, cr10, {4}
    8ed4:	e12fff1e 	bx	lr

Disassembly of section .data:

00008ed8 <putk>:
    8ed8:	000083ec 	andeq	r8, r0, ip, ror #7

00008edc <rpi_putchar>:
    8edc:	00008eac 	andeq	r8, r0, ip, lsr #29

Disassembly of section .rodata:

00008ee0 <__FUNCTION__.4164>:
    8ee0:	6d746f6e 	ldclvs	15, cr6, [r4, #-440]!	; 0xfffffe48
    8ee4:	006e6961 	rsbeq	r6, lr, r1, ror #18
    8ee8:	74206e69 	strtvc	r6, [r0], #-3689	; 0xe69
    8eec:	61657268 	cmnvs	r5, r8, ror #4
    8ef0:	70252064 	eorvc	r2, r5, r4, rrx
    8ef4:	6977202c 	ldmdbvs	r7!, {r2, r3, r5, sp}^
    8ef8:	25206874 	strcs	r6, [r0, #-2164]!	; 0x874
    8efc:	00000a78 	andeq	r0, r0, r8, ror sl
    8f00:	756f6261 	strbvc	r6, [pc, #-609]!	; 8ca7 <gpio_set_on+0x1b>
    8f04:	6f742074 	svcvs	0x00742074
    8f08:	73657420 	cmnvc	r5, #32, 8	; 0x20000000
    8f0c:	75732074 	ldrbvc	r2, [r3, #-116]!	; 0x74
    8f10:	6e696d6d 	cdpvs	13, 6, cr6, cr9, cr13, {3}
    8f14:	666f2067 	strbtvs	r2, [pc], -r7, rrx
    8f18:	20303320 	eorscs	r3, r0, r0, lsr #6
    8f1c:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
    8f20:	0a736461 	beq	1ce20ac <__bss_end__+0x1cd8a4c>
    8f24:	00000000 	andeq	r0, r0, r0
    8f28:	65646e49 	strbvs	r6, [r4, #-3657]!	; 0xe49
    8f2c:	64252078 	strtvs	r2, [r5], #-120	; 0x78
    8f30:	0000000a 	andeq	r0, r0, sl
    8f34:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    8f38:	203d2074 	eorscs	r2, sp, r4, ror r0
    8f3c:	202c6425 	eorcs	r6, ip, r5, lsr #8
    8f40:	3d6d7573 	cfstr64cc	mvdx7, [sp, #-460]!	; 0xfffffe34
    8f44:	000a6425 	andeq	r6, sl, r5, lsr #8
    8f48:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    8f4c:	73253a43 	teqvc	r5, #274432	; 0x43000
    8f50:	3a73253a 	bcc	1cd2440 <__bss_end__+0x1cc8de0>
    8f54:	743a6425 	ldrtvc	r6, [sl], #-1061	; 0x425
    8f58:	61657268 	cmnvs	r5, r8, ror #4
    8f5c:	6f635f64 	svcvs	0x00635f64
    8f60:	20746e75 	rsbscs	r6, r4, r5, ror lr
    8f64:	6e203d3d 	mcrvs	13, 1, r3, cr0, cr13, {1}
    8f68:	0000000a 	andeq	r0, r0, sl
    8f6c:	65742d31 	ldrbvs	r2, [r4, #-3377]!	; 0xd31
    8f70:	742d7473 	strtvc	r7, [sp], #-1139	; 0x473
    8f74:	61657268 	cmnvs	r5, r8, ror #4
    8f78:	00632e64 	rsbeq	r2, r3, r4, ror #28

00008f7c <__FUNCTION__.4166>:
    8f7c:	6f705f51 	svcvs	0x00705f51
    8f80:	00000070 	andeq	r0, r0, r0, ror r0
    8f84:	4f525245 	svcmi	0x00525245
    8f88:	73253a52 	teqvc	r5, #335872	; 0x52000
    8f8c:	3a73253a 	bcc	1cd247c <__bss_end__+0x1cc8e1c>
    8f90:	203a6425 	eorscs	r6, sl, r5, lsr #8
    8f94:	534c4146 	movtpl	r4, #49478	; 0xc146
    8f98:	713c2845 	teqvc	ip, r5, asr #16
    8f9c:	203a293e 	eorscs	r2, sl, lr, lsr r9
    8fa0:	20646162 	rsbcs	r6, r4, r2, ror #2
    8fa4:	75706e69 	ldrbvc	r6, [r0, #-3689]!	; 0xe69
    8fa8:	00000a74 	andeq	r0, r0, r4, ror sl
    8fac:	00682e51 	rsbeq	r2, r8, r1, asr lr
    8fb0:	4f525245 	svcmi	0x00525245
    8fb4:	73253a52 	teqvc	r5, #335872	; 0x52000
    8fb8:	3a73253a 	bcc	1cd24a8 <__bss_end__+0x1cc8e48>
    8fbc:	203a6425 	eorscs	r6, sl, r5, lsr #8
    8fc0:	534c4146 	movtpl	r4, #49478	; 0xc146
    8fc4:	213c2845 	teqcs	ip, r5, asr #16
    8fc8:	743e2d71 	ldrtvc	r2, [lr], #-3441	; 0xd71
    8fcc:	3e6c6961 	cdpcc	9, 6, cr6, cr12, cr1, {3}
    8fd0:	69203a29 	stmdbvs	r0!, {r0, r3, r5, r9, fp, ip, sp}
    8fd4:	6c61766e 	stclvs	6, cr7, [r1], #-440	; 0xfffffe48
    8fd8:	51206469 	teqpl	r0, r9, ror #8
    8fdc:	0000000a 	andeq	r0, r0, sl
    8fe0:	74697072 	strbtvc	r7, [r9], #-114	; 0x72
    8fe4:	61657268 	cmnvs	r5, r8, ror #4
    8fe8:	203a7364 	eorscs	r7, sl, r4, ror #6
    8fec:	656e6f64 	strbvs	r6, [lr, #-3940]!	; 0xf64
    8ff0:	74697720 	strbtvc	r7, [r9], #-1824	; 0x720
    8ff4:	6c612068 	stclvs	0, cr2, [r1], #-416	; 0xfffffe60
    8ff8:	6874206c 	ldmdavs	r4!, {r2, r3, r5, r6, sp}^
    8ffc:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
    9000:	72202173 	eorvc	r2, r0, #-1073741796	; 0xc000001c
    9004:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
    9008:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
    900c:	0000000a 	andeq	r0, r0, sl

00009010 <__FUNCTION__.4185>:
    9010:	74696d65 	strbtvc	r6, [r9], #-3429	; 0xd65
    9014:	00000000 	andeq	r0, r0, r0

00009018 <__FUNCTION__.4133>:
    9018:	5f697072 	svcpl	0x00697072
    901c:	5f746573 	svcpl	0x00746573
    9020:	7074756f 	rsbsvc	r7, r4, pc, ror #10
    9024:	00007475 	andeq	r7, r0, r5, ror r4

00009028 <__FUNCTION__.4207>:
    9028:	705f6176 	subsvc	r6, pc, r6, ror r1	; <UNPREDICTABLE>
    902c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    9030:	0000006b 	andeq	r0, r0, fp, rrx
    9034:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9038:	73253a43 	teqvc	r5, #274432	; 0x43000
    903c:	3a73253a 	bcc	1cd252c <__bss_end__+0x1cc8ecc>
    9040:	303a6425 	eorscc	r6, sl, r5, lsr #8
    9044:	0000000a 	andeq	r0, r0, sl
    9048:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    904c:	2d61762f 	stclcs	6, cr7, [r1, #-188]!	; 0xffffff44
    9050:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    9054:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
    9058:	00000000 	andeq	r0, r0, r0
    905c:	33323130 	teqcc	r2, #48, 2
    9060:	37363534 			; <UNDEFINED> instruction: 0x37363534
    9064:	00003938 	andeq	r3, r0, r8, lsr r9
    9068:	33323130 	teqcc	r2, #48, 2
    906c:	37363534 			; <UNDEFINED> instruction: 0x37363534
    9070:	62613938 	rsbvs	r3, r1, #56, 18	; 0xe0000
    9074:	66656463 	strbtvs	r6, [r5], -r3, ror #8
    9078:	00000000 	andeq	r0, r0, r0
    907c:	00003130 	andeq	r3, r0, r0, lsr r1
    9080:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9084:	73253a43 	teqvc	r5, #274432	; 0x43000
    9088:	3a73253a 	bcc	1cd2578 <__bss_end__+0x1cc8f18>
    908c:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    9090:	5f637475 	svcpl	0x00637475
    9094:	000a7066 	andeq	r7, sl, r6, rrx
    9098:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    909c:	73253a43 	teqvc	r5, #274432	; 0x43000
    90a0:	3a73253a 	bcc	1cd2590 <__bss_end__+0x1cc8f30>
    90a4:	773a6425 	ldrvc	r6, [sl, -r5, lsr #8]!
    90a8:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
    90ac:	33203c20 	teqcc	r0, #32, 24	; 0x2000
    90b0:	00000a32 	andeq	r0, r0, r2, lsr sl
    90b4:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    90b8:	73253a43 	teqvc	r5, #274432	; 0x43000
    90bc:	3a73253a 	bcc	1cd25ac <__bss_end__+0x1cc8f4c>
    90c0:	663a6425 	ldrtvs	r6, [sl], -r5, lsr #8
    90c4:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xf6c
    90c8:	746f6e20 	strbtvc	r6, [pc], #-3616	; 90d0 <__FUNCTION__.4207+0xa8>
    90cc:	616e6520 	cmnvs	lr, r0, lsr #10
    90d0:	64656c62 	strbtvs	r6, [r5], #-3170	; 0xc62
    90d4:	0a212121 	beq	851560 <__bss_end__+0x847f00>
    90d8:	00000000 	andeq	r0, r0, r0
    90dc:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    90e0:	73253a43 	teqvc	r5, #274432	; 0x43000
    90e4:	3a73253a 	bcc	1cd25d4 <__bss_end__+0x1cc8f74>
    90e8:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    90ec:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    90f0:	6e203a6b 	vnmulvs.f32	s6, s0, s23
    90f4:	6820746f 	stmdavs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
    90f8:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    90fc:	20676e69 	rsbcs	r6, r7, r9, ror #28
    9100:	63657073 	cmnvs	r5, #115	; 0x73
    9104:	65696669 	strbvs	r6, [r9, #-1641]!	; 0x669
    9108:	25272072 	strcs	r2, [r7, #-114]!	; 0x72
    910c:	0a0a2763 	beq	292ea0 <__bss_end__+0x289840>
    9110:	00000000 	andeq	r0, r0, r0
    9114:	454e4f44 	strbmi	r4, [lr, #-3908]	; 0xf44
    9118:	0a212121 	beq	8515a4 <__bss_end__+0x847f44>
    911c:	00000000 	andeq	r0, r0, r0

00009120 <__FUNCTION__.4129>:
    9120:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    9124:	00636f6c 	rsbeq	r6, r3, ip, ror #30

00009128 <__FUNCTION__.4136>:
    9128:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    912c:	5f636f6c 	svcpl	0x00636f6c
    9130:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    9134:	0064656e 	rsbeq	r6, r4, lr, ror #10

00009138 <__FUNCTION__.4141>:
    9138:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    913c:	5f636f6c 	svcpl	0x00636f6c
    9140:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    9144:	00000000 	andeq	r0, r0, r0
    9148:	4f525245 	svcmi	0x00525245
    914c:	73253a52 	teqvc	r5, #335872	; 0x52000
    9150:	3a73253a 	bcc	1cd2640 <__bss_end__+0x1cc8fe0>
    9154:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9158:	534c4146 	movtpl	r4, #49478	; 0xc146
    915c:	693c2845 	ldmdbvs	ip!, {r0, r2, r6, fp, sp}
    9160:	5f74696e 	svcpl	0x0074696e
    9164:	3a293e70 	bcc	a58b2c <__bss_end__+0xa4f4cc>
    9168:	6c616320 	stclvs	3, cr6, [r1], #-128	; 0xffffff80
    916c:	676e696c 	strbvs	r6, [lr, -ip, ror #18]!
    9170:	66656220 	strbtvs	r6, [r5], -r0, lsr #4
    9174:	2065726f 	rsbcs	r7, r5, pc, ror #4
    9178:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    917c:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    9180:	0a64657a 	beq	1922770 <__bss_end__+0x1919110>
    9184:	00000000 	andeq	r0, r0, r0
    9188:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
    918c:	6b2f6372 	blvs	be1f5c <__bss_end__+0xbd88fc>
    9190:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    9194:	632e636f 	teqvs	lr, #-1140850687	; 0xbc000001
    9198:	00000000 	andeq	r0, r0, r0
    919c:	4f525245 	svcmi	0x00525245
    91a0:	73253a52 	teqvc	r5, #335872	; 0x52000
    91a4:	3a73253a 	bcc	1cd2694 <__bss_end__+0x1cc9034>
    91a8:	203a6425 	eorscs	r6, sl, r5, lsr #8
    91ac:	534c4146 	movtpl	r4, #49478	; 0xc146
    91b0:	613c2845 	teqvs	ip, r5, asr #16
    91b4:	6e67696c 	cdpvs	9, 6, cr6, cr7, cr12, {3}
    91b8:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
    91bc:	34202520 	strtcc	r2, [r0], #-1312	; 0x520
    91c0:	203d3d20 	eorscs	r3, sp, r0, lsr #26
    91c4:	3a293e30 	bcc	a58a8c <__bss_end__+0xa4f42c>
    91c8:	65772220 	ldrbvs	r2, [r7, #-544]!	; 0x220
    91cc:	20647269 	rsbcs	r7, r4, r9, ror #4
    91d0:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    91d4:	6e656d6e 	cdpvs	13, 6, cr6, cr5, cr14, {3}
    91d8:	6e203a74 	mcrvs	10, 1, r3, cr0, cr4, {3}
    91dc:	6120746f 	teqvs	r0, pc, ror #8
    91e0:	6c756d20 	ldclvs	13, cr6, [r5], #-128	; 0xffffff80
    91e4:	6c706974 	ldclvs	9, cr6, [r0], #-464	; 0xfffffe30
    91e8:	666f2065 	strbtvs	r2, [pc], -r5, rrx
    91ec:	22213420 	eorcs	r3, r1, #32, 8	; 0x20000000
    91f0:	0000000a 	andeq	r0, r0, sl
    91f4:	4f525245 	svcmi	0x00525245
    91f8:	73253a52 	teqvc	r5, #335872	; 0x52000
    91fc:	3a73253a 	bcc	1cd26ec <__bss_end__+0x1cc908c>
    9200:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9204:	534c4146 	movtpl	r4, #49478	; 0xc146
    9208:	213c2845 	teqcs	ip, r5, asr #16
    920c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    9210:	293e705f 	ldmdbcs	lr!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}
    9214:	6163203a 	cmnvs	r3, sl, lsr r0
    9218:	746f6e6e 	strbtvc	r6, [pc], #-3694	; 9220 <__FUNCTION__.4141+0xe8>
    921c:	696e6920 	stmdbvs	lr!, {r5, r8, fp, sp, lr}^
    9220:	6c616974 	stclvs	9, cr6, [r1], #-464	; 0xfffffe30
    9224:	20657a69 	rsbcs	r7, r5, r9, ror #20
    9228:	63697774 	cmnvs	r9, #116, 14	; 0x1d00000
    922c:	0a0a2165 	beq	2917c8 <__bss_end__+0x288168>
    9230:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss:

00009234 <__bss_start__>:
    9234:	00000000 	andeq	r0, r0, r0

00009238 <thread_sum>:
    9238:	00000000 	andeq	r0, r0, r0

0000923c <freeq.4190>:
	...

00009244 <cur_thread>:
    9244:	00000000 	andeq	r0, r0, r0

00009248 <runq>:
	...

00009250 <scheduler_thread>:
    9250:	00000000 	andeq	r0, r0, r0

00009254 <buf.4133>:
	...

00009654 <init_p>:
    9654:	00000000 	andeq	r0, r0, r0

00009658 <heap_ptr>:
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4b5a3605 	blmi	168d82c <__bss_end__+0x16841cc>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	12010901 	andne	r0, r1, #16384	; 0x4000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0x404
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	22011a01 	andcs	r1, r1, #4096	; 0x1000
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__bss_end__+0x10c76c4>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	34202955 	strtcc	r2, [r0], #-2389	; 0x955
   c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
  10:	43434700 	movtmi	r4, #14080	; 0x3700
  14:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
  18:	5420554e 	strtpl	r5, [r0], #-1358	; 0x54e
  1c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  20:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
  24:	6d724120 	ldfvse	f4, [r2, #-128]!	; 0xffffff80
  28:	626d4520 	rsbvs	r4, sp, #32, 10	; 0x8000000
  2c:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
  30:	72502064 	subsvc	r2, r0, #100	; 0x64
  34:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
  38:	73726f73 	cmnvc	r2, #460	; 0x1cc
  3c:	322d3720 	eorcc	r3, sp, #32, 14	; 0x800000
  40:	2d383130 	ldfcss	f3, [r8, #-192]!	; 0xffffff40
  44:	752d3371 	strvc	r3, [sp, #-881]!	; 0x371
  48:	74616470 	strbtvc	r6, [r1], #-1136	; 0x470
  4c:	37202965 	strcc	r2, [r0, -r5, ror #18]!
  50:	312e332e 	teqcc	lr, lr, lsr #6
  54:	31303220 	teqcc	r0, r0, lsr #4
  58:	32363038 	eorscc	r3, r6, #56	; 0x38
  5c:	72282032 	eorvc	r2, r8, #50	; 0x32
  60:	61656c65 	cmnvs	r5, r5, ror #24
  64:	20296573 	eorcs	r6, r9, r3, ror r5
  68:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  6c:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
  70:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
  74:	2d372d64 	ldccs	13, cr2, [r7, #-400]!	; 0xfffffe70
  78:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  7c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  80:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  84:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  88:	39313632 	ldmdbcc	r1!, {r1, r4, r5, r9, sl, ip, sp}
  8c:	005d3730 	subseq	r3, sp, r0, lsr r7

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000362 	andeq	r0, r0, r2, ror #6
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000067 	andeq	r0, r0, r7, rrx
      10:	00012601 	andeq	r2, r1, r1, lsl #12
      14:	00000000 	andeq	r0, r0, r0
      18:	00801000 	addeq	r1, r0, r0
      1c:	00011400 	andeq	r1, r1, r0, lsl #8
      20:	00000000 	andeq	r0, r0, r0
      24:	05040200 	streq	r0, [r4, #-512]	; 0x200
      28:	00746e69 	rsbseq	r6, r4, r9, ror #28
      2c:	7d070403 	cfstrsvc	mvf0, [r7, #-12]
      30:	03000001 	movweq	r0, #1
      34:	00d80601 	sbcseq	r0, r8, r1, lsl #12
      38:	02030000 	andeq	r0, r3, #0
      3c:	0001c405 	andeq	ip, r1, r5, lsl #8
      40:	05040300 	streq	r0, [r4, #-768]	; 0x300
      44:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
      48:	ab050803 	blge	14205c <__bss_end__+0x1389fc>
      4c:	03000001 	movweq	r0, #1
      50:	00d60801 	sbcseq	r0, r6, r1, lsl #16
      54:	02030000 	andeq	r0, r3, #0
      58:	0000fa07 	andeq	pc, r0, r7, lsl #20
      5c:	01ce0400 	biceq	r0, lr, r0, lsl #8
      60:	34030000 	strcc	r0, [r3], #-0
      64:	00000068 	andeq	r0, r0, r8, rrx
      68:	78070403 	stmdavc	r7, {r0, r1, sl}
      6c:	03000001 	movweq	r0, #1
      70:	01730708 	cmneq	r3, r8, lsl #14
      74:	04030000 	streq	r0, [r3], #-0
      78:	0001a207 	andeq	sl, r1, r7, lsl #4
      7c:	03040500 	movweq	r0, #17664	; 0x4500
      80:	00df0801 	sbcseq	r0, pc, r1, lsl #16
      84:	04060000 	streq	r0, [r6], #-0
      88:	0000008c 	andeq	r0, r0, ip, lsl #1
      8c:	00007f07 	andeq	r7, r0, r7, lsl #30
      90:	007f0800 	rsbseq	r0, pc, r0, lsl #16
      94:	00a10000 	adceq	r0, r1, r0
      98:	76090000 	strvc	r0, [r9], -r0
      9c:	07000000 	streq	r0, [r0, -r0]
      a0:	01b90a00 			; <UNDEFINED> instruction: 0x01b90a00
      a4:	80480000 	subhi	r0, r8, r0
      a8:	00df1e02 	sbcseq	r1, pc, r2, lsl #28
      ac:	650b0000 	strvs	r0, [fp, #-0]
      b0:	02000001 	andeq	r0, r0, #1
      b4:	0000df20 	andeq	sp, r0, r0, lsr #30
      b8:	570b0000 	strpl	r0, [fp, -r0]
      bc:	02000000 	andeq	r0, r0, #0
      c0:	0000ef22 	andeq	lr, r0, r2, lsr #30
      c4:	740c4000 	strvc	r4, [ip], #-0
      c8:	02006469 	andeq	r6, r0, #1761607680	; 0x69000000
      cc:	00005d23 	andeq	r5, r0, r3, lsr #26
      d0:	c60b4400 	strgt	r4, [fp], -r0, lsl #8
      d4:	02000000 	andeq	r0, r0, #0
      d8:	0000f524 	andeq	pc, r0, r4, lsr #10
      dc:	08004800 	stmdaeq	r0, {fp, lr}
      e0:	0000005d 	andeq	r0, r0, sp, asr r0
      e4:	000000ef 	andeq	r0, r0, pc, ror #1
      e8:	00007609 	andeq	r7, r0, r9, lsl #12
      ec:	06000f00 	streq	r0, [r0], -r0, lsl #30
      f0:	0000a104 	andeq	sl, r0, r4, lsl #2
      f4:	005d0800 	subseq	r0, sp, r0, lsl #16
      f8:	01060000 	mrseq	r0, (UNDEF: 6)
      fc:	760d0000 	strvc	r0, [sp], -r0
     100:	ff000000 			; <UNDEFINED> instruction: 0xff000000
     104:	8a04001f 	bhi	100188 <__bss_end__+0xf6b28>
     108:	02000001 	andeq	r0, r0, #1
     10c:	0000a125 	andeq	sl, r0, r5, lsr #2
     110:	01360e00 	teqeq	r6, r0, lsl #28
     114:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
     118:	00008010 	andeq	r8, r0, r0, lsl r0
     11c:	00000050 	andeq	r0, r0, r0, asr r0
     120:	01729c01 	cmneq	r2, r1, lsl #24
     124:	610f0000 	mrsvs	r0, CPSR
     128:	01006772 	tsteq	r0, r2, ror r7
     12c:	00007d08 	andeq	r7, r0, r8, lsl #26
     130:	00000000 	andeq	r0, r0, r0
     134:	00781000 	rsbseq	r1, r8, r0
     138:	01720901 	cmneq	r2, r1, lsl #18
     13c:	001e0000 	andseq	r0, lr, r0
     140:	1c110000 	ldcne	0, cr0, [r1], {-0}
     144:	ca000080 	bgt	34c <_start-0x7cb4>
     148:	12000002 	andne	r0, r0, #2
     14c:	0000802c 	andeq	r8, r0, ip, lsr #32
     150:	000002db 	ldrdeq	r0, [r0], -fp
     154:	00000162 	andeq	r0, r0, r2, ror #2
     158:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
     15c:	008ee803 	addeq	lr, lr, r3, lsl #16
     160:	54140000 	ldrpl	r0, [r4], #-0
     164:	f1000080 	cps	#0
     168:	13000002 	movwne	r0, #2
     16c:	30015001 	andcc	r5, r1, r1
     170:	04060000 	streq	r0, [r6], #-0
     174:	0000002c 	andeq	r0, r0, ip, lsr #32
     178:	0000be15 	andeq	fp, r0, r5, lsl lr
     17c:	60100100 	andsvs	r0, r0, r0, lsl #2
     180:	c4000080 	strgt	r0, [r0], #-128	; 0x80
     184:	01000000 	mrseq	r0, (UNDEF: 0)
     188:	00029d9c 	muleq	r2, ip, sp
     18c:	006e1600 	rsbeq	r1, lr, r0, lsl #12
     190:	00251501 	eoreq	r1, r5, r1, lsl #10
     194:	171e0000 	ldrne	r0, [lr, -r0]
     198:	00000142 	andeq	r0, r0, r2, asr #2
     19c:	0000029d 	muleq	r0, sp, r2
     1a0:	8ee00305 	cdphi	3, 14, cr0, cr0, cr5, {0}
     1a4:	84180000 	ldrhi	r0, [r8], #-0
     1a8:	40000080 	andmi	r0, r0, r0, lsl #1
     1ac:	12000000 	andne	r0, r0, #0
     1b0:	10000002 	andne	r0, r0, r2
     1b4:	18010069 	stmdane	r1, {r0, r3, r5, r6}
     1b8:	00000025 	andeq	r0, r0, r5, lsr #32
     1bc:	0000003c 	andeq	r0, r0, ip, lsr r0
     1c0:	00000019 	andeq	r0, r0, r9, lsl r0
     1c4:	00781000 	rsbseq	r1, r8, r0
     1c8:	02a21a01 	adceq	r1, r2, #4096	; 0x1000
     1cc:	005b0000 	subseq	r0, fp, r0
     1d0:	a0120000 	andsge	r0, r2, r0
     1d4:	db000080 	blle	3dc <_start-0x7c24>
     1d8:	ec000002 	stc	0, cr0, [r0], {2}
     1dc:	13000001 	movwne	r0, #1
     1e0:	74025101 	strvc	r5, [r2], #-257	; 0x101
     1e4:	50011300 	andpl	r1, r1, r0, lsl #6
     1e8:	00007702 	andeq	r7, r0, r2, lsl #14
     1ec:	0080a812 	addeq	sl, r0, r2, lsl r8
     1f0:	00030200 	andeq	r0, r3, r0, lsl #4
     1f4:	00020000 	andeq	r0, r2, r0
     1f8:	50011300 	andpl	r1, r1, r0, lsl #6
     1fc:	00007602 	andeq	r7, r0, r2, lsl #12
     200:	0080b814 	addeq	fp, r0, r4, lsl r8
     204:	00031700 	andeq	r1, r3, r0, lsl #14
     208:	50011300 	andpl	r1, r1, r0, lsl #6
     20c:	00007502 	andeq	r7, r0, r2, lsl #10
     210:	68110000 	ldmdavs	r1, {}	; <UNPREDICTABLE>
     214:	42000080 	andmi	r0, r0, #128	; 0x80
     218:	11000003 	tstne	r0, r3
     21c:	0000806c 	andeq	r8, r0, ip, rrx
     220:	00000349 	andeq	r0, r0, r9, asr #6
     224:	00807412 	addeq	r7, r0, r2, lsl r4
     228:	0002db00 	andeq	sp, r2, r0, lsl #22
     22c:	00023b00 	andeq	r3, r2, r0, lsl #22
     230:	50011300 	andpl	r1, r1, r0, lsl #6
     234:	8f000305 	svchi	0x00000305
     238:	11000000 	mrsne	r0, (UNDEF: 0)
     23c:	000080c8 	andeq	r8, r0, r8, asr #1
     240:	00000350 	andeq	r0, r0, r0, asr r3
     244:	0080dc12 	addeq	sp, r0, r2, lsl ip
     248:	0002db00 	andeq	sp, r2, r0, lsl #22
     24c:	00025b00 	andeq	r5, r2, r0, lsl #22
     250:	50011300 	andpl	r1, r1, r0, lsl #6
     254:	8f340305 	svchi	0x00340305
     258:	12000000 	andne	r0, r0, #0
     25c:	000080fc 	strdeq	r8, [r0], -ip
     260:	000002db 	ldrdeq	r0, [r0], -fp
     264:	0000028a 	andeq	r0, r0, sl, lsl #5
     268:	02530113 	subseq	r0, r3, #-1073741820	; 0xc0000004
     26c:	01132208 	tsteq	r3, r8, lsl #4
     270:	e0030552 	and	r0, r3, r2, asr r5
     274:	1300008e 	movwne	r0, #142	; 0x8e
     278:	03055101 	movweq	r5, #20737	; 0x5101
     27c:	00008f6c 	andeq	r8, r0, ip, ror #30
     280:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
     284:	008f4803 	addeq	r4, pc, r3, lsl #16
     288:	00110000 	andseq	r0, r1, r0
     28c:	57000081 	strpl	r0, [r0, -r1, lsl #1]
     290:	11000003 	tstne	r0, r3
     294:	00008104 	andeq	r8, r0, r4, lsl #2
     298:	0000035e 	andeq	r0, r0, lr, asr r3
     29c:	00910700 	addseq	r0, r1, r0, lsl #14
     2a0:	04060000 	streq	r0, [r6], #-0
     2a4:	00000025 	andeq	r0, r0, r5, lsr #32
     2a8:	00014f1a 	andeq	r4, r1, sl, lsl pc
     2ac:	2c050100 	stfcss	f0, [r5], {-0}
     2b0:	05000000 	streq	r0, [r0, #-0]
     2b4:	00923403 	addseq	r3, r2, r3, lsl #8
     2b8:	01971a00 	orrseq	r1, r7, r0, lsl #20
     2bc:	05010000 	streq	r0, [r1, #-0]
     2c0:	0000002c 	andeq	r0, r0, ip, lsr #32
     2c4:	92380305 	eorsls	r0, r8, #335544320	; 0x14000000
     2c8:	d71b0000 	ldrle	r0, [fp, -r0]
     2cc:	02000001 	andeq	r0, r0, #1
     2d0:	0002d535 	andeq	sp, r2, r5, lsr r5
     2d4:	06040600 	streq	r0, [r4], -r0, lsl #12
     2d8:	1c000001 	stcne	0, cr0, [r0], {1}
     2dc:	00000301 	andeq	r0, r0, r1, lsl #6
     2e0:	00252704 	eoreq	r2, r5, r4, lsl #14
     2e4:	02f10000 	rscseq	r0, r1, #0
     2e8:	861d0000 	ldrhi	r0, [sp], -r0
     2ec:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     2f0:	015c1f00 	cmpeq	ip, r0, lsl #30
     2f4:	2b020000 	blcs	802fc <__bss_end__+0x76c9c>
     2f8:	00000302 	andeq	r0, r0, r2, lsl #6
     2fc:	0000251d 	andeq	r2, r0, sp, lsl r5
     300:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
     304:	04000001 	streq	r0, [r0], #-1
     308:	00007d66 	andeq	r7, r0, r6, ror #26
     30c:	00031700 	andeq	r1, r3, r0, lsl #14
     310:	002c1d00 	eoreq	r1, ip, r0, lsl #26
     314:	1c000000 	stcne	0, cr0, [r0], {-0}
     318:	000000f1 	strdeq	r0, [r0], -r1
     31c:	02d52802 	sbcseq	r2, r5, #131072	; 0x20000
     320:	03310000 	teqeq	r1, #0
     324:	311d0000 	tstcc	sp, r0
     328:	1d000003 	stcne	0, cr0, [r0, #-12]
     32c:	0000007d 	andeq	r0, r0, sp, ror r0
     330:	37040600 	strcc	r0, [r4, -r0, lsl #12]
     334:	20000003 	andcs	r0, r0, r3
     338:	00000342 	andeq	r0, r0, r2, asr #6
     33c:	00007d1d 	andeq	r7, r0, sp, lsl sp
     340:	cc210000 	stcgt	0, cr0, [r1], #-0
     344:	04000000 	streq	r0, [r0], #-0
     348:	01e62138 	mvneq	r2, r8, lsr r1
     34c:	6a040000 	bvs	100354 <__bss_end__+0xf6cf4>
     350:	00011521 	andeq	r1, r1, r1, lsr #10
     354:	21320200 	teqcs	r2, r0, lsl #4
     358:	0000005c 	andeq	r0, r0, ip, asr r0
     35c:	e4215c04 	strt	r5, [r1], #-3076	; 0xc04
     360:	04000000 	streq	r0, [r0], #-0
     364:	057f005f 	ldrbeq	r0, [pc, #-95]!	; 30d <_start-0x7cf3>
     368:	00040000 	andeq	r0, r4, r0
     36c:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
     370:	00670104 	rsbeq	r0, r7, r4, lsl #2
     374:	42010000 	andmi	r0, r1, #0
     378:	00000002 	andeq	r0, r0, r2
     37c:	24000000 	strcs	r0, [r0], #-0
     380:	1c000081 	stcne	0, cr0, [r0], {129}	; 0x81
     384:	33000002 	movwcc	r0, #2
     388:	02000001 	andeq	r0, r0, #1
     38c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     390:	f8030074 			; <UNDEFINED> instruction: 0xf8030074
     394:	03000001 	movweq	r0, #1
     398:	000037d4 	ldrdeq	r3, [r0], -r4
     39c:	07040400 	streq	r0, [r4, -r0, lsl #8]
     3a0:	0000017d 	andeq	r0, r0, sp, ror r1
     3a4:	d8060104 	stmdale	r6, {r2, r8}
     3a8:	04000000 	streq	r0, [r0], #-0
     3ac:	01c40502 	biceq	r0, r4, r2, lsl #10
     3b0:	04040000 	streq	r0, [r4], #-0
     3b4:	0001b005 	andeq	fp, r1, r5
     3b8:	05080400 	streq	r0, [r8, #-1024]	; 0x400
     3bc:	000001ab 	andeq	r0, r0, fp, lsr #3
     3c0:	d6080104 	strle	r0, [r8], -r4, lsl #2
     3c4:	04000000 	streq	r0, [r0], #-0
     3c8:	00fa0702 	rscseq	r0, sl, r2, lsl #14
     3cc:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
     3d0:	04000001 	streq	r0, [r0], #-1
     3d4:	00007334 	andeq	r7, r0, r4, lsr r3
     3d8:	07040400 	streq	r0, [r4, -r0, lsl #8]
     3dc:	00000178 	andeq	r0, r0, r8, ror r1
     3e0:	73070804 	movwvc	r0, #30724	; 0x7804
     3e4:	04000001 	streq	r0, [r0], #-1
     3e8:	01a20704 			; <UNDEFINED> instruction: 0x01a20704
     3ec:	04050000 	streq	r0, [r5], #-0
     3f0:	df080104 	svcle	0x00080104
     3f4:	06000000 	streq	r0, [r0], -r0
     3f8:	00009704 	andeq	r9, r0, r4, lsl #14
     3fc:	008a0700 	addeq	r0, sl, r0, lsl #14
     400:	b9080000 	stmdblt	r8, {}	; <UNPREDICTABLE>
     404:	48000001 	stmdami	r0, {r0}
     408:	da1e0580 	ble	781a10 <__bss_end__+0x7783b0>
     40c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     410:	00000165 	andeq	r0, r0, r5, ror #2
     414:	00da2005 	sbcseq	r2, sl, r5
     418:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     41c:	00000057 	andeq	r0, r0, r7, asr r0
     420:	00ea2205 	rsceq	r2, sl, r5, lsl #4
     424:	0a400000 	beq	100042c <__bss_end__+0xff6dcc>
     428:	00646974 	rsbeq	r6, r4, r4, ror r9
     42c:	00682305 	rsbeq	r2, r8, r5, lsl #6
     430:	09440000 	stmdbeq	r4, {}^	; <UNPREDICTABLE>
     434:	000000c6 	andeq	r0, r0, r6, asr #1
     438:	00f02405 	rscseq	r2, r0, r5, lsl #8
     43c:	00480000 	subeq	r0, r8, r0
     440:	0000680b 	andeq	r6, r0, fp, lsl #16
     444:	0000ea00 	andeq	lr, r0, r0, lsl #20
     448:	00810c00 	addeq	r0, r1, r0, lsl #24
     44c:	000f0000 	andeq	r0, pc, r0
     450:	009c0406 	addseq	r0, ip, r6, lsl #8
     454:	680b0000 	stmdavs	fp, {}	; <UNPREDICTABLE>
     458:	01000000 	mrseq	r0, (UNDEF: 0)
     45c:	0d000001 	stceq	0, cr0, [r0, #-4]
     460:	00000081 	andeq	r0, r0, r1, lsl #1
     464:	03001fff 	movweq	r1, #4095	; 0xfff
     468:	0000018a 	andeq	r0, r0, sl, lsl #3
     46c:	009c2505 	addseq	r2, ip, r5, lsl #10
     470:	510e0000 	mrspl	r0, (UNDEF: 14)
     474:	08010800 	stmdaeq	r1, {fp}
     478:	0000012f 	andeq	r0, r0, pc, lsr #2
     47c:	00023d09 	andeq	r3, r2, r9, lsl #26
     480:	2f090100 	svccs	0x00090100
     484:	00000001 	andeq	r0, r0, r1
     488:	00027e09 	andeq	r7, r2, r9, lsl #28
     48c:	2f090100 	svccs	0x00090100
     490:	04000001 	streq	r0, [r0], #-1
     494:	01040600 	tsteq	r4, r0, lsl #12
     498:	0f000001 	svceq	0x00000001
     49c:	00745f51 	rsbseq	r5, r4, r1, asr pc
     4a0:	010c0a01 	tsteq	ip, r1, lsl #20
     4a4:	15100000 	ldrne	r0, [r0, #-0]
     4a8:	01000002 	tsteq	r0, r2
     4ac:	0000250f 	andeq	r2, r0, pc, lsl #10
     4b0:	00812400 	addeq	r2, r1, r0, lsl #8
     4b4:	00001000 	andeq	r1, r0, r0
     4b8:	679c0100 	ldrvs	r0, [ip, r0, lsl #2]
     4bc:	11000001 	tstne	r0, r1
     4c0:	0f010071 	svceq	0x00010071
     4c4:	00000167 	andeq	r0, r0, r7, ror #2
     4c8:	00000079 	andeq	r0, r0, r9, ror r0
     4cc:	35040600 	strcc	r0, [r4, #-1536]	; 0x600
     4d0:	12000001 	andne	r0, r0, #1
     4d4:	0000021d 	andeq	r0, r0, sp, lsl r2
     4d8:	81342101 	teqhi	r4, r1, lsl #2
     4dc:	002c0000 	eoreq	r0, ip, r0
     4e0:	9c010000 	stcls	0, cr0, [r1], {-0}
     4e4:	00000199 	muleq	r0, r9, r1
     4e8:	01007113 	tsteq	r0, r3, lsl r1
     4ec:	00016721 	andeq	r6, r1, r1, lsr #14
     4f0:	13500100 	cmpne	r0, #0, 2
     4f4:	21010065 	tstcs	r1, r5, rrx
     4f8:	0000012f 	andeq	r0, r0, pc, lsr #2
     4fc:	10005101 	andne	r5, r0, r1, lsl #2
     500:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     504:	012f1201 	teqeq	pc, r1, lsl #4
     508:	81600000 	cmnhi	r0, r0
     50c:	007c0000 	rsbseq	r0, ip, r0
     510:	9c010000 	stcls	0, cr0, [r1], {-0}
     514:	0000024a 	andeq	r0, r0, sl, asr #4
     518:	01007111 	tsteq	r0, r1, lsl r1
     51c:	00016712 	andeq	r6, r1, r2, lsl r7
     520:	00009a00 	andeq	r9, r0, r0, lsl #20
     524:	01421400 	cmpeq	r2, r0, lsl #8
     528:	025a0000 	subseq	r0, sl, #0
     52c:	03050000 	movweq	r0, #20480	; 0x5000
     530:	00008f7c 	andeq	r8, r0, ip, ror pc
     534:	01006515 	tsteq	r0, r5, lsl r5
     538:	00012f14 	andeq	r2, r1, r4, lsl pc
     53c:	0000f500 	andeq	pc, r0, r0, lsl #10
     540:	81801600 	orrhi	r1, r0, r0, lsl #12
     544:	05100000 	ldreq	r0, [r0, #-0]
     548:	02090000 	andeq	r0, r9, #0
     54c:	01170000 	tsteq	r7, r0
     550:	17430153 	smlsldne	r0, r3, r3, r1
     554:	03055201 	movweq	r5, #20993	; 0x5201
     558:	00008f7c 	andeq	r8, r0, ip, ror pc
     55c:	05510117 	ldrbeq	r0, [r1, #-279]	; 0x117
     560:	008fac03 	addeq	sl, pc, r3, lsl #24
     564:	50011700 	andpl	r1, r1, r0, lsl #14
     568:	8f840305 	svchi	0x00840305
     56c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     570:	00008184 	andeq	r8, r0, r4, lsl #3
     574:	00000526 	andeq	r0, r0, r6, lsr #10
     578:	0081b016 	addeq	fp, r1, r6, lsl r0
     57c:	00051000 	andeq	r1, r5, r0
     580:	00024000 	andeq	r4, r2, r0
     584:	53011700 	movwpl	r1, #5888	; 0x1700
     588:	01174701 	tsteq	r7, r1, lsl #14
     58c:	7c030552 	cfstr32vc	mvfx0, [r3], {82}	; 0x52
     590:	1700008f 	strne	r0, [r0, -pc, lsl #1]
     594:	03055101 	movweq	r5, #20737	; 0x5101
     598:	00008fac 	andeq	r8, r0, ip, lsr #31
     59c:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     5a0:	008fb003 	addeq	fp, pc, r3
     5a4:	b4180000 	ldrlt	r0, [r8], #-0
     5a8:	26000081 	strcs	r0, [r0], -r1, lsl #1
     5ac:	00000005 	andeq	r0, r0, r5
     5b0:	00008a0b 	andeq	r8, r0, fp, lsl #20
     5b4:	00025a00 	andeq	r5, r2, r0, lsl #20
     5b8:	00810c00 	addeq	r0, r1, r0, lsl #24
     5bc:	00050000 	andeq	r0, r5, r0
     5c0:	00024a07 	andeq	r4, r2, r7, lsl #20
     5c4:	026b1000 	rsbeq	r1, fp, #0
     5c8:	15020000 	strne	r0, [r2, #-0]
     5cc:	0000012f 	andeq	r0, r0, pc, lsr #2
     5d0:	000081dc 	ldrdeq	r8, [r0], -ip
     5d4:	0000002c 	andeq	r0, r0, ip, lsr #32
     5d8:	02c49c01 	sbceq	r9, r4, #256	; 0x100
     5dc:	37190000 	ldrcc	r0, [r9, -r0]
     5e0:	02000002 	andeq	r0, r0, #2
     5e4:	00013516 	andeq	r3, r1, r6, lsl r5
     5e8:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
     5ec:	15000092 	strne	r0, [r0, #-146]	; 0x92
     5f0:	17020074 	smlsdxne	r2, r4, r0, r0
     5f4:	0000012f 	andeq	r0, r0, pc, lsr #2
     5f8:	0000012c 	andeq	r0, r0, ip, lsr #2
     5fc:	0081e816 	addeq	lr, r1, r6, lsl r8
     600:	00019900 	andeq	r9, r1, r0, lsl #18
     604:	0002ad00 	andeq	sl, r2, r0, lsl #26
     608:	50011700 	andpl	r1, r1, r0, lsl #14
     60c:	923c0305 	eorsls	r0, ip, #335544320	; 0x14000000
     610:	1a000000 	bne	618 <_start-0x79e8>
     614:	000081fc 	strdeq	r8, [r0], -ip
     618:	0000052d 	andeq	r0, r0, sp, lsr #10
     61c:	01510117 	cmpeq	r1, r7, lsl r1
     620:	50011738 	andpl	r1, r1, r8, lsr r7
     624:	80480a03 	subhi	r0, r8, r3, lsl #20
     628:	d71b0000 	ldrle	r0, [fp, -r0]
     62c:	02000001 	andeq	r0, r0, #1
     630:	00012f10 	andeq	r2, r1, r0, lsl pc
     634:	00820800 	addeq	r0, r2, r0, lsl #16
     638:	00001000 	andeq	r1, r0, r0
     63c:	1c9c0100 	ldfnes	f0, [ip], {0}
     640:	000000f1 	strdeq	r0, [r0], -r1
     644:	012f2302 	teqeq	pc, r2, lsl #6
     648:	82180000 	andshi	r0, r8, #0
     64c:	00380000 	eorseq	r0, r8, r0
     650:	9c010000 	stcls	0, cr0, [r1], {-0}
     654:	00000340 	andeq	r0, r0, r0, asr #6
     658:	00013d1d 	andeq	r3, r1, sp, lsl sp
     65c:	4b230200 	blmi	8c0e64 <__bss_end__+0x8b7804>
     660:	4a000003 	bmi	674 <_start-0x798c>
     664:	11000001 	tstne	r0, r1
     668:	00677261 	rsbeq	r7, r7, r1, ror #4
     66c:	00882302 	addeq	r2, r8, r2, lsl #6
     670:	016b0000 	cmneq	fp, r0
     674:	74150000 	ldrvc	r0, [r5], #-0
     678:	2f240200 	svccs	0x00240200
     67c:	8c000001 	stchi	0, cr0, [r0], {1}
     680:	18000001 	stmdane	r0, {r0}
     684:	00008220 	andeq	r8, r0, r0, lsr #4
     688:	0000025f 	andeq	r0, r0, pc, asr r2
     68c:	0082441a 	addeq	r4, r2, sl, lsl r4
     690:	00016d00 	andeq	r6, r1, r0, lsl #26
     694:	51011700 	tstpl	r1, r0, lsl #14
     698:	17007402 	strne	r7, [r0, -r2, lsl #8]
     69c:	03055001 	movweq	r5, #20481	; 0x5001
     6a0:	00009248 	andeq	r9, r0, r8, asr #4
     6a4:	4b1e0000 	blmi	7806ac <__bss_end__+0x77704c>
     6a8:	1f000003 	svcne	0x00000003
     6ac:	00000088 	andeq	r0, r0, r8, lsl #1
     6b0:	40040600 	andmi	r0, r4, r0, lsl #12
     6b4:	20000003 	andcs	r0, r0, r3
     6b8:	0000015c 	andeq	r0, r0, ip, asr r1
     6bc:	82503702 	subshi	r3, r0, #524288	; 0x80000
     6c0:	00600000 	rsbeq	r0, r0, r0
     6c4:	9c010000 	stcls	0, cr0, [r1], {-0}
     6c8:	000003eb 	andeq	r0, r0, fp, ror #7
     6cc:	0002621d 	andeq	r6, r2, sp, lsl r2
     6d0:	25370200 	ldrcs	r0, [r7, #-512]!	; 0x200
     6d4:	aa000000 	bge	6dc <_start-0x7924>
     6d8:	16000001 	strne	r0, [r0], -r1
     6dc:	00008268 	andeq	r8, r0, r8, ror #4
     6e0:	00000547 	andeq	r0, r0, r7, asr #10
     6e4:	00000397 	muleq	r0, r7, r3
     6e8:	01520117 	cmpeq	r2, r7, lsl r1
     6ec:	51011734 	tstpl	r1, r4, lsr r7
     6f0:	01173001 	tsteq	r7, r1
     6f4:	44030650 	strmi	r0, [r3], #-1616	; 0x650
     6f8:	06000092 			; <UNDEFINED> instruction: 0x06000092
     6fc:	82701600 	rsbshi	r1, r0, #0, 12
     700:	01400000 	mrseq	r0, (UNDEF: 64)
     704:	03ab0000 			; <UNDEFINED> instruction: 0x03ab0000
     708:	01170000 	tsteq	r7, r0
     70c:	0c740250 	lfmeq	f0, 2, [r4], #-320	; 0xfffffec0
     710:	82881600 	addhi	r1, r8, #0, 12
     714:	01990000 	orrseq	r0, r9, r0
     718:	03c20000 	biceq	r0, r2, #0
     71c:	01170000 	tsteq	r7, r0
     720:	48030550 	stmdami	r3, {r4, r6, r8, sl}
     724:	00000092 	muleq	r0, r2, r0
     728:	00829416 	addeq	r9, r2, r6, lsl r4
     72c:	00056600 	andeq	r6, r5, r0, lsl #12
     730:	0003d600 	andeq	sp, r3, r0, lsl #12
     734:	50011700 	andpl	r1, r1, r0, lsl #14
     738:	00007402 	andeq	r7, r0, r2, lsl #8
     73c:	0082a81a 	addeq	sl, r2, sl, lsl r8
     740:	00056600 	andeq	r6, r5, r0, lsl #12
     744:	50011700 	andpl	r1, r1, r0, lsl #14
     748:	92440306 	subls	r0, r4, #402653184	; 0x18000000
     74c:	00060000 	andeq	r0, r6, r0
     750:	02742000 	rsbseq	r2, r4, #0
     754:	4a020000 	bmi	8075c <__bss_end__+0x770fc>
     758:	000082b0 			; <UNDEFINED> instruction: 0x000082b0
     75c:	00000040 	andeq	r0, r0, r0, asr #32
     760:	045a9c01 	ldrbeq	r9, [sl], #-3073	; 0xc01
     764:	56210000 	strtpl	r0, [r1], -r0
     768:	02000002 	andeq	r0, r0, #2
     76c:	00012f50 	andeq	r2, r1, r0, asr pc
     770:	0001cb00 	andeq	ip, r1, r0, lsl #22
     774:	82bc1600 	adcshi	r1, ip, #0, 12
     778:	01990000 	orrseq	r0, r9, r0
     77c:	04260000 	strteq	r0, [r6], #-0
     780:	01170000 	tsteq	r7, r0
     784:	48030550 	stmdami	r3, {r4, r6, r8, sl}
     788:	00000092 	muleq	r0, r2, r0
     78c:	0082d816 	addeq	sp, r2, r6, lsl r8
     790:	00016d00 	andeq	r6, r1, r0, lsl #26
     794:	00044300 	andeq	r4, r4, r0, lsl #6
     798:	51011700 	tstpl	r1, r0, lsl #14
     79c:	17007402 	strne	r7, [r0, -r2, lsl #8]
     7a0:	03055001 	movweq	r5, #20481	; 0x5001
     7a4:	00009248 	andeq	r9, r0, r8, asr #4
     7a8:	82e41a00 	rschi	r1, r4, #0, 20
     7ac:	05660000 	strbeq	r0, [r6, #-0]!
     7b0:	01170000 	tsteq	r7, r0
     7b4:	00750251 	rsbseq	r0, r5, r1, asr r2
     7b8:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     7bc:	00000074 	andeq	r0, r0, r4, ror r0
     7c0:	00011520 	andeq	r1, r1, r0, lsr #10
     7c4:	f05e0200 			; <UNDEFINED> instruction: 0xf05e0200
     7c8:	50000082 	andpl	r0, r0, r2, lsl #1
     7cc:	01000000 	mrseq	r0, (UNDEF: 0)
     7d0:	0004d89c 	muleq	r4, ip, r8
     7d4:	02562100 	subseq	r2, r6, #0, 2
     7d8:	6d020000 	stcvs	0, cr0, [r2, #-0]
     7dc:	0000012f 	andeq	r0, r0, pc, lsr #2
     7e0:	000001e9 	andeq	r0, r0, r9, ror #3
     7e4:	0082fc16 	addeq	pc, r2, r6, lsl ip	; <UNPREDICTABLE>
     7e8:	00014000 	andeq	r4, r1, r0
     7ec:	00049500 	andeq	r9, r4, r0, lsl #10
     7f0:	50011700 	andpl	r1, r1, r0, lsl #14
     7f4:	92480305 	subls	r0, r8, #335544320	; 0x14000000
     7f8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     7fc:	00008308 	andeq	r8, r0, r8, lsl #6
     800:	0000025f 	andeq	r0, r0, pc, asr r2
     804:	00831418 	addeq	r1, r3, r8, lsl r4
     808:	00025f00 	andeq	r5, r2, r0, lsl #30
     80c:	831c1600 	tsthi	ip, #0, 12
     810:	01990000 	orrseq	r0, r9, r0
     814:	04bb0000 	ldrteq	r0, [fp], #0
     818:	01170000 	tsteq	r7, r0
     81c:	0c740250 	lfmeq	f0, 2, [r4], #-320	; 0xfffffec0
     820:	83281800 	teqhi	r8, #0, 16
     824:	05660000 	strbeq	r0, [r6, #-0]!
     828:	301a0000 	andscc	r0, sl, r0
     82c:	10000083 	andne	r0, r0, r3, lsl #1
     830:	17000005 	strne	r0, [r0, -r5]
     834:	03055001 	movweq	r5, #20481	; 0x5001
     838:	00008fe0 	andeq	r8, r0, r0, ror #31
     83c:	f3190000 	vhadd.u16	d0, d9, d0
     840:	02000001 	andeq	r0, r0, #1
     844:	0001350a 	andeq	r3, r1, sl, lsl #10
     848:	48030500 	stmdami	r3, {r8, sl}
     84c:	19000092 	stmdbne	r0, {r1, r4, r7}
     850:	000001db 	ldrdeq	r0, [r0], -fp
     854:	04fa0c02 	ldrbteq	r0, [sl], #3074	; 0xc02
     858:	03050000 	movweq	r0, #20480	; 0x5000
     85c:	00009244 	andeq	r9, r0, r4, asr #4
     860:	00012f07 	andeq	r2, r1, r7, lsl #30
     864:	02261900 	eoreq	r1, r6, #0, 18
     868:	0d020000 	stceq	0, cr0, [r2, #-0]
     86c:	0000012f 	andeq	r0, r0, pc, lsr #2
     870:	92500305 	subsls	r0, r0, #335544320	; 0x14000000
     874:	01220000 	teqeq	r2, r0
     878:	06000003 	streq	r0, [r0], -r3
     87c:	00002527 	andeq	r2, r0, r7, lsr #10
     880:	00052600 	andeq	r2, r5, r0, lsl #12
     884:	00911f00 	addseq	r1, r1, r0, lsl #30
     888:	00230000 	eoreq	r0, r3, r0
     88c:	00005c24 	andeq	r5, r0, r4, lsr #24
     890:	225c0600 	subscs	r0, ip, #0, 12
     894:	00000205 	andeq	r0, r0, r5, lsl #4
     898:	00886706 	addeq	r6, r8, r6, lsl #14
     89c:	05470000 	strbeq	r0, [r7, #-0]
     8a0:	371f0000 	ldrcc	r0, [pc, -r0]
     8a4:	1f000000 	svcne	0x00000000
     8a8:	00000037 	andeq	r0, r0, r7, lsr r0
     8ac:	024f2200 	subeq	r2, pc, #0, 4
     8b0:	1b070000 	blne	1c08b8 <__bss_end__+0x1b7258>
     8b4:	00000088 	andeq	r0, r0, r8, lsl #1
     8b8:	00000566 	andeq	r0, r0, r6, ror #10
     8bc:	0000881f 	andeq	r8, r0, pc, lsl r8
     8c0:	00251f00 	eoreq	r1, r5, r0, lsl #30
     8c4:	2c1f0000 	ldccs	0, cr0, [pc], {-0}
     8c8:	00000000 	andeq	r0, r0, r0
     8cc:	00028325 	andeq	r8, r2, r5, lsr #6
     8d0:	7c3b0500 	cfldr32vc	mvfx0, [fp], #-0
     8d4:	1f000005 	svcne	0x00000005
     8d8:	0000057c 	andeq	r0, r0, ip, ror r5
     8dc:	00057c1f 	andeq	r7, r5, pc, lsl ip
     8e0:	04060000 	streq	r0, [r6], #-0
     8e4:	00000068 	andeq	r0, r0, r8, rrx
     8e8:	0000db00 	andeq	sp, r0, r0, lsl #22
     8ec:	c9000400 	stmdbgt	r0, {sl}
     8f0:	04000003 	streq	r0, [r0], #-3
     8f4:	00006701 	andeq	r6, r0, r1, lsl #14
     8f8:	028f0100 	addeq	r0, pc, #0, 2
     8fc:	029d0000 	addseq	r0, sp, #0
     900:	83740000 	cmnhi	r4, #0
     904:	00200000 	eoreq	r0, r0, r0
     908:	02e00000 	rsceq	r0, r0, #0
     90c:	01020000 	mrseq	r0, (UNDEF: 2)
     910:	0000d806 	andeq	sp, r0, r6, lsl #16
     914:	08010200 	stmdaeq	r1, {r9}
     918:	000000d6 	ldrdeq	r0, [r0], -r6
     91c:	c4050202 	strgt	r0, [r5], #-514	; 0x202
     920:	02000001 	andeq	r0, r0, #1
     924:	00fa0702 	rscseq	r0, sl, r2, lsl #14
     928:	04030000 	streq	r0, [r3], #-0
     92c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
     930:	07040200 	streq	r0, [r4, -r0, lsl #4]
     934:	0000017d 	andeq	r0, r0, sp, ror r1
     938:	ab050802 	blge	142948 <__bss_end__+0x1392e8>
     93c:	02000001 	andeq	r0, r0, #1
     940:	01730708 	cmneq	r3, r8, lsl #14
     944:	04020000 	streq	r0, [r2], #-0
     948:	0001b005 	andeq	fp, r1, r5
     94c:	07040200 	streq	r0, [r4, -r0, lsl #4]
     950:	000001a2 	andeq	r0, r0, r2, lsr #3
     954:	04020404 	streq	r0, [r2], #-1028	; 0x404
     958:	00017807 	andeq	r7, r1, r7, lsl #16
     95c:	7a040500 	bvc	101d64 <__bss_end__+0xf8704>
     960:	02000000 	andeq	r0, r0, #0
     964:	00df0801 	sbcseq	r0, pc, r1, lsl #16
     968:	f8060000 			; <UNDEFINED> instruction: 0xf8060000
     96c:	02000001 	andeq	r0, r0, #1
     970:	000048d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
     974:	024f0700 	subeq	r0, pc, #0, 14
     978:	1b030000 	blne	c0980 <__bss_end__+0xb7320>
     97c:	0000006b 	andeq	r0, r0, fp, rrx
     980:	00008374 	andeq	r8, r0, r4, ror r3
     984:	00000020 	andeq	r0, r0, r0, lsr #32
     988:	5f089c01 	svcpl	0x00089c01
     98c:	03010070 	movweq	r0, #4208	; 0x1070
     990:	0000006b 	andeq	r0, r0, fp, rrx
     994:	63085001 	movwvs	r5, #32769	; 0x8001
     998:	41030100 	mrsmi	r0, (UNDEF: 19)
     99c:	01000000 	mrseq	r0, (UNDEF: 0)
     9a0:	006e0951 	rsbeq	r0, lr, r1, asr r9
     9a4:	00810301 	addeq	r0, r1, r1, lsl #6
     9a8:	02070000 	andeq	r0, r7, #0
     9ac:	700a0000 	andvc	r0, sl, r0
     9b0:	74040100 	strvc	r0, [r4], #-256	; 0x100
     9b4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     9b8:	0b000002 	bleq	9c8 <_start-0x7638>
     9bc:	04010065 	streq	r0, [r1], #-101	; 0x65
     9c0:	00000074 	andeq	r0, r0, r4, ror r0
     9c4:	00005201 	andeq	r5, r0, r1, lsl #4
     9c8:	00000191 	muleq	r0, r1, r1
     9cc:	04660004 	strbteq	r0, [r6], #-4
     9d0:	01040000 	mrseq	r0, (UNDEF: 4)
     9d4:	00000067 	andeq	r0, r0, r7, rrx
     9d8:	0002f001 	andeq	pc, r2, r1
     9dc:	00029d00 	andeq	r9, r2, r0, lsl #26
     9e0:	00839400 	addeq	r9, r3, r0, lsl #8
     9e4:	00005800 	andeq	r5, r0, r0, lsl #16
     9e8:	0003d000 	andeq	sp, r3, r0
     9ec:	02e10200 	rsceq	r0, r1, #0, 4
     9f0:	28020000 	stmdacs	r2, {}	; <UNPREDICTABLE>
     9f4:	00000030 	andeq	r0, r0, r0, lsr r0
     9f8:	00030803 	andeq	r0, r3, r3, lsl #16
     9fc:	00030400 	andeq	r0, r3, r0, lsl #8
     a00:	00000047 	andeq	r0, r0, r7, asr #32
     a04:	00031704 	andeq	r1, r3, r4, lsl #14
     a08:	00004700 	andeq	r4, r0, r0, lsl #14
     a0c:	05000000 	streq	r0, [r0, #-0]
     a10:	030a0204 	movweq	r0, #41476	; 0xa204
     a14:	62020000 	andvs	r0, r2, #0
     a18:	00000025 	andeq	r0, r0, r5, lsr #32
     a1c:	69050406 	stmdbvs	r5, {r1, r2, sl}
     a20:	0700746e 	streq	r7, [r0, -lr, ror #8]
     a24:	017d0704 	cmneq	sp, r4, lsl #14
     a28:	01070000 	mrseq	r0, (UNDEF: 7)
     a2c:	0000d806 	andeq	sp, r0, r6, lsl #16
     a30:	05020700 	streq	r0, [r2, #-1792]	; 0x700
     a34:	000001c4 	andeq	r0, r0, r4, asr #3
     a38:	b0050407 	andlt	r0, r5, r7, lsl #8
     a3c:	07000001 	streq	r0, [r0, -r1]
     a40:	01ab0508 			; <UNDEFINED> instruction: 0x01ab0508
     a44:	01070000 	mrseq	r0, (UNDEF: 7)
     a48:	0000d608 	andeq	sp, r0, r8, lsl #12
     a4c:	07020700 	streq	r0, [r2, -r0, lsl #14]
     a50:	000000fa 	strdeq	r0, [r0], -sl
     a54:	78070407 	stmdavc	r7, {r0, r1, r2, sl}
     a58:	07000001 	streq	r0, [r0, -r1]
     a5c:	01730708 	cmneq	r3, r8, lsl #14
     a60:	04070000 	streq	r0, [r7], #-0
     a64:	0001a207 	andeq	sl, r1, r7, lsl #4
     a68:	a7040800 	strge	r0, [r4, -r0, lsl #16]
     a6c:	07000000 	streq	r0, [r0, -r0]
     a70:	00df0801 	sbcseq	r0, pc, r1, lsl #16
     a74:	04080000 	streq	r0, [r8], #-0
     a78:	000000b4 	strheq	r0, [r0], -r4
     a7c:	0000a709 	andeq	sl, r0, r9, lsl #14
     a80:	03010a00 	movweq	r0, #6656	; 0x1a00
     a84:	06010000 	streq	r0, [r1], -r0
     a88:	00000054 	andeq	r0, r0, r4, asr r0
     a8c:	00008394 	muleq	r0, r4, r3
     a90:	00000058 	andeq	r0, r0, r8, asr r0
     a94:	01439c01 	cmpeq	r3, r1, lsl #24
     a98:	660b0000 	strvs	r0, [fp], -r0
     a9c:	0100746d 	tsteq	r0, sp, ror #8
     aa0:	0000ae06 	andeq	sl, r0, r6, lsl #28
     aa4:	70910200 	addsvc	r0, r1, r0, lsl #4
     aa8:	75620d0c 	strbvc	r0, [r2, #-3340]!	; 0xd0c
     aac:	08010066 	stmdaeq	r1, {r1, r2, r5, r6}
     ab0:	00000143 	andeq	r0, r0, r3, asr #2
     ab4:	92540305 	subsls	r0, r4, #335544320	; 0x14000000
     ab8:	120e0000 	andne	r0, lr, #0
     abc:	01000003 	tsteq	r0, r3
     ac0:	00004909 	andeq	r4, r0, r9, lsl #18
     ac4:	5c910200 	lfmpl	f0, 4, [r1], {0}
     ac8:	007a730f 	rsbseq	r7, sl, pc, lsl #6
     acc:	00540c01 	subseq	r0, r4, r1, lsl #24
     ad0:	02530000 	subseq	r0, r3, #0
     ad4:	bc100000 	ldclt	0, cr0, [r0], {-0}
     ad8:	74000083 	strvc	r0, [r0], #-131	; 0x83
     adc:	36000001 	strcc	r0, [r0], -r1
     ae0:	11000001 	tstne	r0, r1
     ae4:	91025301 	tstls	r2, r1, lsl #6
     ae8:	5201114c 	andpl	r1, r1, #76, 2
     aec:	06489103 	strbeq	r9, [r8], -r3, lsl #2
     af0:	03510111 	cmpeq	r1, #1073741828	; 0x40000004
     af4:	1104000a 	tstne	r4, sl
     af8:	74025001 	strvc	r5, [r2], #-1
     afc:	d0120000 	andsle	r0, r2, r0
     b00:	11000083 	smlabbne	r0, r3, r0, r0
     b04:	74025001 	strvc	r5, [r2], #-1
     b08:	13000000 	movwne	r0, #0
     b0c:	000000a7 	andeq	r0, r0, r7, lsr #1
     b10:	00000154 	andeq	r0, r0, r4, asr r1
     b14:	00009a14 	andeq	r9, r0, r4, lsl sl
     b18:	0003ff00 	andeq	pc, r3, r0, lsl #30
     b1c:	00005415 	andeq	r5, r0, r5, lsl r4
     b20:	00016300 	andeq	r6, r1, r0, lsl #6
     b24:	00ae1600 	adceq	r1, lr, r0, lsl #12
     b28:	17000000 	strne	r0, [r0, -r0]
     b2c:	00000331 	andeq	r0, r0, r1, lsr r3
     b30:	016e2004 	cmneq	lr, r4
     b34:	04080000 	streq	r0, [r8], #-0
     b38:	00000154 	andeq	r0, r0, r4, asr r1
     b3c:	0002fe18 	andeq	pc, r2, r8, lsl lr	; <UNPREDICTABLE>
     b40:	54020500 	strpl	r0, [r2], #-1280	; 0x500
     b44:	16000000 	strne	r0, [r0], -r0
     b48:	000000a1 	andeq	r0, r0, r1, lsr #1
     b4c:	00005416 	andeq	r5, r0, r6, lsl r4
     b50:	00ae1600 	adceq	r1, lr, r0, lsl #12
     b54:	49160000 	ldmdbmi	r6, {}	; <UNPREDICTABLE>
     b58:	00000000 	andeq	r0, r0, r0
     b5c:	0000ee00 	andeq	lr, r0, r0, lsl #28
     b60:	97000400 	strls	r0, [r0, -r0, lsl #8]
     b64:	04000005 	streq	r0, [r0], #-5
     b68:	00006701 	andeq	r6, r0, r1, lsl #14
     b6c:	031c0100 	tsteq	ip, #0, 2
     b70:	029d0000 	addseq	r0, sp, #0
     b74:	83ec0000 	mvnhi	r0, #0
     b78:	00340000 	eorseq	r0, r4, r0
     b7c:	04d60000 	ldrbeq	r0, [r6], #0
     b80:	04020000 	streq	r0, [r2], #-0
     b84:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
     b88:	07040300 	streq	r0, [r4, -r0, lsl #6]
     b8c:	0000017d 	andeq	r0, r0, sp, ror r1
     b90:	d8060103 	stmdale	r6, {r0, r1, r8}
     b94:	03000000 	movweq	r0, #0
     b98:	01c40502 	biceq	r0, r4, r2, lsl #10
     b9c:	04030000 	streq	r0, [r3], #-0
     ba0:	0001b005 	andeq	fp, r1, r5
     ba4:	05080300 	streq	r0, [r8, #-768]	; 0x300
     ba8:	000001ab 	andeq	r0, r0, fp, lsr #3
     bac:	d6080103 	strle	r0, [r8], -r3, lsl #2
     bb0:	03000000 	movweq	r0, #0
     bb4:	00fa0702 	rscseq	r0, sl, r2, lsl #14
     bb8:	04030000 	streq	r0, [r3], #-0
     bbc:	00017807 	andeq	r7, r1, r7, lsl #16
     bc0:	07080300 	streq	r0, [r8, -r0, lsl #6]
     bc4:	00000173 	andeq	r0, r0, r3, ror r1
     bc8:	a2070403 	andge	r0, r7, #50331648	; 0x3000000
     bcc:	03000001 	movweq	r0, #1
     bd0:	00df0801 	sbcseq	r0, pc, r1, lsl #16
     bd4:	04040000 	streq	r0, [r4], #-0
     bd8:	0000007f 	andeq	r0, r0, pc, ror r0
     bdc:	00007205 	andeq	r7, r0, r5, lsl #4
     be0:	03280600 	teqeq	r8, #0, 12
     be4:	04010000 	streq	r0, [r1], #-0
     be8:	00000025 	andeq	r0, r0, r5, lsr #32
     bec:	000083ec 	andeq	r8, r0, ip, ror #7
     bf0:	00000034 	andeq	r0, r0, r4, lsr r0
     bf4:	00ab9c01 	adceq	r9, fp, r1, lsl #24
     bf8:	70070000 	andvc	r0, r7, r0
     bfc:	79040100 	stmdbvc	r4, {r8}
     c00:	7c000000 	stcvc	0, cr0, [r0], {-0}
     c04:	00000002 	andeq	r0, r0, r2
     c08:	00002508 	andeq	r2, r0, r8, lsl #10
     c0c:	0000ba00 	andeq	fp, r0, r0, lsl #20
     c10:	00250900 	eoreq	r0, r5, r0, lsl #18
     c14:	0a000000 	beq	c1c <_start-0x73e4>
     c18:	00000336 	andeq	r0, r0, r6, lsr r3
     c1c:	00c51d02 	sbceq	r1, r5, r2, lsl #26
     c20:	04040000 	streq	r0, [r4], #-0
     c24:	000000ab 	andeq	r0, r0, fp, lsr #1
     c28:	00002508 	andeq	r2, r0, r8, lsl #10
     c2c:	0000da00 	andeq	sp, r0, r0, lsl #20
     c30:	00790900 	rsbseq	r0, r9, r0, lsl #18
     c34:	0b000000 	bleq	c3c <_start-0x73c4>
     c38:	00000331 	andeq	r0, r0, r1, lsr r3
     c3c:	00eb0c01 	rsceq	r0, fp, r1, lsl #24
     c40:	03050000 	movweq	r0, #20480	; 0x5000
     c44:	00008ed8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
     c48:	00cb0404 	sbceq	r0, fp, r4, lsl #8
     c4c:	54000000 	strpl	r0, [r0], #-0
     c50:	04000006 	streq	r0, [r0], #-6
     c54:	00063000 	andeq	r3, r6, r0
     c58:	67010400 	strvs	r0, [r1, -r0, lsl #8]
     c5c:	01000000 	mrseq	r0, (UNDEF: 0)
     c60:	0000036e 	andeq	r0, r0, lr, ror #6
     c64:	0000029d 	muleq	r0, sp, r2
     c68:	00008420 	andeq	r8, r0, r0, lsr #8
     c6c:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     c70:	00000570 	andeq	r0, r0, r0, ror r5
     c74:	69050402 	stmdbvs	r5, {r1, sl}
     c78:	0300746e 	movweq	r7, #1134	; 0x46e
     c7c:	017d0704 	cmneq	sp, r4, lsl #14
     c80:	01030000 	mrseq	r0, (UNDEF: 3)
     c84:	0000d806 	andeq	sp, r0, r6, lsl #16
     c88:	05020300 	streq	r0, [r2, #-768]	; 0x300
     c8c:	000001c4 	andeq	r0, r0, r4, asr #3
     c90:	b0050403 	andlt	r0, r5, r3, lsl #8
     c94:	03000001 	movweq	r0, #1
     c98:	01ab0508 			; <UNDEFINED> instruction: 0x01ab0508
     c9c:	01030000 	mrseq	r0, (UNDEF: 3)
     ca0:	0000d608 	andeq	sp, r0, r8, lsl #12
     ca4:	07020300 	streq	r0, [r2, -r0, lsl #6]
     ca8:	000000fa 	strdeq	r0, [r0], -sl
     cac:	78070403 	stmdavc	r7, {r0, r1, sl}
     cb0:	03000001 	movweq	r0, #1
     cb4:	01730708 	cmneq	r3, r8, lsl #14
     cb8:	04030000 	streq	r0, [r3], #-0
     cbc:	0001a207 	andeq	sl, r1, r7, lsl #4
     cc0:	05040400 	streq	r0, [r4, #-1024]	; 0x400
     cc4:	00007a04 	andeq	r7, r0, r4, lsl #20
     cc8:	08010300 	stmdaeq	r1, {r8, r9}
     ccc:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     cd0:	00870405 	addeq	r0, r7, r5, lsl #8
     cd4:	7a060000 	bvc	180cdc <__bss_end__+0x17767c>
     cd8:	07000000 	streq	r0, [r0, -r0]
     cdc:	000002e1 	andeq	r0, r0, r1, ror #5
     ce0:	00972802 	addseq	r2, r7, r2, lsl #16
     ce4:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
     ce8:	04000003 	streq	r0, [r0], #-3
     cec:	00ae0004 	adceq	r0, lr, r4
     cf0:	17090000 	strne	r0, [r9, -r0]
     cf4:	72000003 	andvc	r0, r0, #3
     cf8:	00000000 	andeq	r0, r0, r0
     cfc:	030a0700 	movweq	r0, #42752	; 0xa700
     d00:	62020000 	andvs	r0, r2, #0
     d04:	0000008c 	andeq	r0, r0, ip, lsl #1
     d08:	0003500a 	andeq	r5, r3, sl
     d0c:	25270100 	strcs	r0, [r7, #-256]!	; 0x100
     d10:	20000000 	andcs	r0, r0, r0
     d14:	14000084 	strne	r0, [r0], #-132	; 0x84
     d18:	01000000 	mrseq	r0, (UNDEF: 0)
     d1c:	0000e09c 	muleq	r0, ip, r0
     d20:	00630b00 	rsbeq	r0, r3, r0, lsl #22
     d24:	00252701 	eoreq	r2, r5, r1, lsl #14
     d28:	029a0000 	addseq	r0, sl, #0
     d2c:	0c000000 	stceq	0, cr0, [r0], {-0}
     d30:	00646170 	rsbeq	r6, r4, r0, ror r1
     d34:	00742e01 	rsbseq	r2, r4, r1, lsl #28
     d38:	84340000 	ldrthi	r0, [r4], #-0
     d3c:	002c0000 	eoreq	r0, ip, r0
     d40:	9c010000 	stcls	0, cr0, [r1], {-0}
     d44:	00000130 	andeq	r0, r0, r0, lsr r1
     d48:	0100700b 	tsteq	r0, fp
     d4c:	0000742e 	andeq	r7, r0, lr, lsr #8
     d50:	0002c800 	andeq	ip, r2, r0, lsl #16
     d54:	03600d00 	cmneq	r0, #0, 26
     d58:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
     d5c:	00000074 	andeq	r0, r0, r4, ror r0
     d60:	000002f3 	strdeq	r0, [r0], -r3
     d64:	00038e0e 	andeq	r8, r3, lr, lsl #28
     d68:	252e0100 	strcs	r0, [lr, #-256]!	; 0x100
     d6c:	01000000 	mrseq	r0, (UNDEF: 0)
     d70:	656c0f52 	strbvs	r0, [ip, #-3922]!	; 0xf52
     d74:	2f01006e 	svccs	0x0001006e
     d78:	00000025 	andeq	r0, r0, r5, lsr #32
     d7c:	0a005101 	beq	15188 <__bss_end__+0xbb28>
     d80:	00000348 	andeq	r0, r0, r8, asr #6
     d84:	00743701 	rsbseq	r3, r4, r1, lsl #14
     d88:	84600000 	strbthi	r0, [r0], #-0
     d8c:	00400000 	subeq	r0, r0, r0
     d90:	9c010000 	stcls	0, cr0, [r1], {-0}
     d94:	0000019c 	muleq	r0, ip, r1
     d98:	7473640b 	ldrbtvc	r6, [r3], #-1035	; 0x40b
     d9c:	74370100 	ldrtvc	r0, [r7], #-256	; 0x100
     da0:	14000000 	strne	r0, [r0], #-0
     da4:	0b000003 	bleq	db8 <_start-0x7248>
     da8:	3701006e 	strcc	r0, [r1, -lr, rrx]
     dac:	00000025 	andeq	r0, r0, r5, lsr #32
     db0:	0000034c 	andeq	r0, r0, ip, asr #6
     db4:	0100700b 	tsteq	r0, fp
     db8:	00007437 	andeq	r7, r0, r7, lsr r4
     dbc:	00036d00 	andeq	r6, r3, r0, lsl #26
     dc0:	01200d00 	teqeq	r0, r0, lsl #26
     dc4:	37010000 	strcc	r0, [r1, -r0]
     dc8:	00000074 	andeq	r0, r0, r4, ror r0
     dcc:	000003a3 	andeq	r0, r0, r3, lsr #7
     dd0:	6e656c10 	mcrvs	12, 3, r6, cr5, cr0, {0}
     dd4:	25390100 	ldrcs	r0, [r9, #-256]!	; 0x100
     dd8:	c1000000 	mrsgt	r0, (UNDEF: 0)
     ddc:	0f000003 	svceq	0x00000003
     de0:	3d010073 	stccc	0, cr0, [r1, #-460]	; 0xfffffe34
     de4:	00000074 	andeq	r0, r0, r4, ror r0
     de8:	0a005001 	beq	14df4 <__bss_end__+0xb794>
     dec:	0000039c 	muleq	r0, ip, r3
     df0:	00744701 	rsbseq	r4, r4, r1, lsl #14
     df4:	84a00000 	strthi	r0, [r0], #0
     df8:	01980000 	orrseq	r0, r8, r0
     dfc:	9c010000 	stcls	0, cr0, [r1], {-0}
     e00:	000002ca 	andeq	r0, r0, sl, asr #5
     e04:	0003600d 	andeq	r6, r3, sp
     e08:	2c470100 	stfcse	f0, [r7], {-0}
     e0c:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
     e10:	0b000003 	bleq	e24 <_start-0x71dc>
     e14:	00747364 	rsbseq	r7, r4, r4, ror #6
     e18:	00744701 	rsbseq	r4, r4, r1, lsl #14
     e1c:	04160000 	ldreq	r0, [r6], #-0
     e20:	6e0b0000 	cdpvs	0, 0, cr0, cr11, cr0, {0}
     e24:	25470100 	strbcs	r0, [r7, #-256]	; 0x100
     e28:	84000000 	strhi	r0, [r0], #-0
     e2c:	0b000004 	bleq	e44 <_start-0x71bc>
     e30:	006c6176 	rsbeq	r6, ip, r6, ror r1
     e34:	00254701 	eoreq	r4, r5, r1, lsl #14
     e38:	04b00000 	ldrteq	r0, [r0], #0
     e3c:	8e0d0000 	cdphi	0, 0, cr0, cr13, cr0, {0}
     e40:	01000003 	tsteq	r0, r3
     e44:	00002547 	andeq	r2, r0, r7, asr #10
     e48:	00053a00 	andeq	r3, r5, r0, lsl #20
     e4c:	03650e00 	cmneq	r5, #0, 28
     e50:	47010000 	strmi	r0, [r1, -r0]
     e54:	00000025 	andeq	r0, r0, r5, lsr #32
     e58:	0f049102 	svceq	0x00049102
     e5c:	00667562 	rsbeq	r7, r6, r2, ror #10
     e60:	02ca4c01 	sbceq	r4, sl, #256	; 0x100
     e64:	91030000 	mrsls	r0, (UNDEF: 3)
     e68:	70107fa8 	andsvc	r7, r0, r8, lsr #31
     e6c:	744c0100 	strbvc	r0, [ip], #-256	; 0x100
     e70:	64000000 	strvs	r0, [r0], #-0
     e74:	10000005 	andne	r0, r0, r5
     e78:	4d010075 	stcmi	0, cr0, [r1, #-468]	; 0xfffffe2c
     e7c:	0000002c 	andeq	r0, r0, ip, lsr #32
     e80:	00000609 	andeq	r0, r0, r9, lsl #12
     e84:	00014211 	andeq	r4, r1, r1, lsl r2
     e88:	0002ea00 	andeq	lr, r2, r0, lsl #20
     e8c:	10030500 	andne	r0, r3, r0, lsl #10
     e90:	12000090 	andne	r0, r0, #144	; 0x90
     e94:	0000850c 	andeq	r8, r0, ip, lsl #10
     e98:	00000074 	andeq	r0, r0, r4, ror r0
     e9c:	00000261 	andeq	r0, r0, r1, ror #4
     ea0:	00034213 	andeq	r4, r3, r3, lsl r2
     ea4:	2c520100 	ldfcse	f0, [r2], {-0}
     ea8:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     eac:	00000007 	andeq	r0, r0, r7
     eb0:	0085f014 	addeq	pc, r5, r4, lsl r0	; <UNPREDICTABLE>
     eb4:	00063a00 	andeq	r3, r6, r0, lsl #20
     eb8:	00029000 	andeq	r9, r2, r0
     ebc:	53011500 	movwpl	r1, #5376	; 0x1500
     ec0:	15750802 	ldrbne	r0, [r5, #-2050]!	; 0x802
     ec4:	03055201 	movweq	r5, #20993	; 0x5201
     ec8:	00009010 	andeq	r9, r0, r0, lsl r0
     ecc:	05510115 	ldrbeq	r0, [r1, #-277]	; 0x115
     ed0:	00904803 	addseq	r4, r0, r3, lsl #16
     ed4:	50011500 	andpl	r1, r1, r0, lsl #10
     ed8:	90340305 	eorsls	r0, r4, r5, lsl #6
     edc:	16000000 	strne	r0, [r0], -r0
     ee0:	000085f4 	strdeq	r8, [r0], -r4
     ee4:	00000650 	andeq	r0, r0, r0, asr r6
     ee8:	00860014 	addeq	r0, r6, r4, lsl r0
     eec:	0000e000 	andeq	lr, r0, r0
     ef0:	0002ad00 	andeq	sl, r2, r0, lsl #26
     ef4:	51011500 	tstpl	r1, r0, lsl #10
     ef8:	00007d02 	andeq	r7, r0, r2, lsl #26
     efc:	00861417 	addeq	r1, r6, r7, lsl r4
     f00:	00013000 	andeq	r3, r1, r0
     f04:	53011500 	movwpl	r1, #5376	; 0x1500
     f08:	15007d02 	strne	r7, [r0, #-3330]	; 0xd02
     f0c:	74025101 	strvc	r5, [r2], #-257	; 0x101
     f10:	50011500 	andpl	r1, r1, r0, lsl #10
     f14:	00007502 	andeq	r7, r0, r2, lsl #10
     f18:	007a1800 	rsbseq	r1, sl, r0, lsl #16
     f1c:	02da0000 	sbcseq	r0, sl, #0
     f20:	6b190000 	blvs	640f28 <__bss_end__+0x6378c8>
     f24:	3f000000 	svccc	0x00000000
     f28:	007a1800 	rsbseq	r1, sl, r0, lsl #16
     f2c:	02ea0000 	rsceq	r0, sl, #0
     f30:	6b190000 	blvs	640f38 <__bss_end__+0x6378d8>
     f34:	04000000 	streq	r0, [r0], #-0
     f38:	02da0600 	sbcseq	r0, sl, #0, 12
     f3c:	7f1a0000 	svcvc	0x001a0000
     f40:	01000003 	tsteq	r0, r3
     f44:	0086381f 	addeq	r3, r6, pc, lsl r8
     f48:	00005000 	andeq	r5, r0, r0
     f4c:	6a9c0100 	bvs	fe701354 <__bss_end__+0xfe6f7cf4>
     f50:	0d000003 	stceq	0, cr0, [r0, #-12]
     f54:	00000394 	muleq	r0, r4, r3
     f58:	03791f01 	cmneq	r9, #1, 30
     f5c:	07450000 	strbeq	r0, [r5, -r0]
     f60:	580d0000 	stmdapl	sp, {}	; <UNPREDICTABLE>
     f64:	01000003 	tsteq	r0, r3
     f68:	00038e1f 	andeq	r8, r3, pc, lsl lr
     f6c:	00077100 	andeq	r7, r7, r0, lsl #2
     f70:	01421100 	mrseq	r1, (UNDEF: 82)
     f74:	03a40000 			; <UNDEFINED> instruction: 0x03a40000
     f78:	03050000 	movweq	r0, #20480	; 0x5000
     f7c:	00009018 	andeq	r9, r0, r8, lsl r0
     f80:	00865814 	addeq	r5, r6, r4, lsl r8
     f84:	00063a00 	andeq	r3, r6, r0, lsl #20
     f88:	00036000 	andeq	r6, r3, r0
     f8c:	53011500 	movwpl	r1, #5376	; 0x1500
     f90:	15200802 	strne	r0, [r0, #-2050]!	; 0x802
     f94:	03055201 	movweq	r5, #20993	; 0x5201
     f98:	00009018 	andeq	r9, r0, r8, lsl r0
     f9c:	05510115 	ldrbeq	r0, [r1, #-277]	; 0x115
     fa0:	00904803 	addseq	r4, r0, r3, lsl #16
     fa4:	50011500 	andpl	r1, r1, r0, lsl #10
     fa8:	90800305 	addls	r0, r0, r5, lsl #6
     fac:	16000000 	strne	r0, [r0], -r0
     fb0:	0000865c 	andeq	r8, r0, ip, asr r6
     fb4:	00000650 	andeq	r0, r0, r0, asr r6
     fb8:	00251b00 	eoreq	r1, r5, r0, lsl #22
     fbc:	03790000 	cmneq	r9, #0
     fc0:	251c0000 	ldrcs	r0, [ip, #-0]
     fc4:	00000000 	andeq	r0, r0, r0
     fc8:	036a0405 	cmneq	sl, #83886080	; 0x5000000
     fcc:	251b0000 	ldrcs	r0, [fp, #-0]
     fd0:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
     fd4:	1c000003 	stcne	0, cr0, [r0], {3}
     fd8:	00000081 	andeq	r0, r0, r1, lsl #1
     fdc:	7f040500 	svcvc	0x00040500
     fe0:	18000003 	stmdane	r0, {r0, r1}
     fe4:	0000007a 	andeq	r0, r0, sl, ror r0
     fe8:	000003a4 	andeq	r0, r0, r4, lsr #7
     fec:	00006b19 	andeq	r6, r0, r9, lsl fp
     ff0:	06000e00 	streq	r0, [r0], -r0, lsl #28
     ff4:	00000394 	muleq	r0, r4, r3
     ff8:	0002fe1d 	andeq	pc, r2, sp, lsl lr	; <UNPREDICTABLE>
     ffc:	257d0100 	ldrbcs	r0, [sp, #-256]!	; 0x100
    1000:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    1004:	88000086 	stmdahi	r0, {r1, r2, r7}
    1008:	01000002 	tsteq	r0, r2
    100c:	0005ff9c 	muleq	r5, ip, pc	; <UNPREDICTABLE>
    1010:	75620b00 	strbvc	r0, [r2, #-2816]!	; 0xb00
    1014:	7d010066 	stcvc	0, cr0, [r1, #-408]	; 0xfffffe68
    1018:	00000074 	andeq	r0, r0, r4, ror r0
    101c:	0000079d 	muleq	r0, sp, r7
    1020:	01006e0b 	tsteq	r0, fp, lsl #28
    1024:	0000257d 	andeq	r2, r0, sp, ror r5
    1028:	0007c900 	andeq	ip, r7, r0, lsl #18
    102c:	6d660b00 	vstmdbvs	r6!, {d16-d15}
    1030:	7d010074 	stcvc	0, cr0, [r1, #-464]	; 0xfffffe30
    1034:	00000081 	andeq	r0, r0, r1, lsl #1
    1038:	000007f7 	strdeq	r0, [r0], -r7
    103c:	0003120d 	andeq	r1, r3, sp, lsl #4
    1040:	ae7d0100 	rpwgee	f0, f5, f0
    1044:	2b000000 	blcs	104c <_start-0x6fb4>
    1048:	10000008 	andne	r0, r0, r8
    104c:	7e010070 	mcrvc	0, 0, r0, cr1, cr0, {3}
    1050:	00000074 	andeq	r0, r0, r4, ror r0
    1054:	0000083e 	andeq	r0, r0, lr, lsr r8
    1058:	01006510 	tsteq	r0, r0, lsl r5
    105c:	0000747e 	andeq	r7, r0, lr, ror r4
    1060:	0008bc00 	andeq	fp, r8, r0, lsl #24
    1064:	01421100 	mrseq	r1, (UNDEF: 82)
    1068:	060f0000 	streq	r0, [pc], -r0
    106c:	03050000 	movweq	r0, #20480	; 0x5000
    1070:	00009028 	andeq	r9, r0, r8, lsr #32
    1074:	0086dc1e 	addeq	sp, r6, lr, lsl ip
    1078:	0001f400 	andeq	pc, r1, r0, lsl #8
    107c:	00731000 	rsbseq	r1, r3, r0
    1080:	00748b01 	rsbseq	r8, r4, r1, lsl #22
    1084:	08e30000 	stmiaeq	r3!, {}^	; <UNPREDICTABLE>
    1088:	6e0f0000 	cdpvs	0, 0, cr0, cr15, cr0, {0}
    108c:	01006d75 	tsteq	r0, r5, ror sp
    1090:	0006148b 	andeq	r1, r6, fp, lsl #9
    1094:	d8910300 	ldmle	r1, {r8, r9}
    1098:	038e137e 	orreq	r1, lr, #-134217727	; 0xf8000001
    109c:	8c010000 	stchi	0, cr0, [r1], {-0}
    10a0:	0000002c 	andeq	r0, r0, ip, lsr #32
    10a4:	00000938 	andeq	r0, r0, r8, lsr r9
    10a8:	00870c14 	addeq	r0, r7, r4, lsl ip
    10ac:	0000b900 	andeq	fp, r0, r0, lsl #18
    10b0:	00046d00 	andeq	r6, r4, r0, lsl #26
    10b4:	50011500 	andpl	r1, r1, r0, lsl #10
    10b8:	00007502 	andeq	r7, r0, r2, lsl #10
    10bc:	00873014 	addeq	r3, r7, r4, lsl r0
    10c0:	00063a00 	andeq	r3, r6, r0, lsl #20
    10c4:	00049c00 	andeq	r9, r4, r0, lsl #24
    10c8:	53011500 	movwpl	r1, #5376	; 0x1500
    10cc:	15920802 	ldrne	r0, [r2, #2050]	; 0x802
    10d0:	03055201 	movweq	r5, #20993	; 0x5201
    10d4:	00009028 	andeq	r9, r0, r8, lsr #32
    10d8:	05510115 	ldrbeq	r0, [r1, #-277]	; 0x115
    10dc:	00904803 	addseq	r4, r0, r3, lsl #16
    10e0:	50011500 	andpl	r1, r1, r0, lsl #10
    10e4:	90980305 	addsls	r0, r8, r5, lsl #6
    10e8:	16000000 	strne	r0, [r0], -r0
    10ec:	00008734 	andeq	r8, r0, r4, lsr r7
    10f0:	00000650 	andeq	r0, r0, r0, asr r6
    10f4:	0087b414 	addeq	fp, r7, r4, lsl r4
    10f8:	00063a00 	andeq	r3, r6, r0, lsl #20
    10fc:	0004d400 	andeq	sp, r4, r0, lsl #8
    1100:	53011500 	movwpl	r1, #5376	; 0x1500
    1104:	15980802 	ldrne	r0, [r8, #2050]	; 0x802
    1108:	03055201 	movweq	r5, #20993	; 0x5201
    110c:	00009028 	andeq	r9, r0, r8, lsr #32
    1110:	05510115 	ldrbeq	r0, [r1, #-277]	; 0x115
    1114:	00904803 	addseq	r4, r0, r3, lsl #16
    1118:	50011500 	andpl	r1, r1, r0, lsl #10
    111c:	90b40305 	adcsls	r0, r4, r5, lsl #6
    1120:	16000000 	strne	r0, [r0], -r0
    1124:	000087b8 			; <UNDEFINED> instruction: 0x000087b8
    1128:	00000650 	andeq	r0, r0, r0, asr r6
    112c:	0087dc14 	addeq	sp, r7, r4, lsl ip
    1130:	00019c00 	andeq	r9, r1, r0, lsl #24
    1134:	00050a00 	andeq	r0, r5, r0, lsl #20
    1138:	52011500 	andpl	r1, r1, #0, 10
    113c:	15800802 	strne	r0, [r0, #2050]	; 0x802
    1140:	91035101 	tstls	r3, r1, lsl #2
    1144:	01157ed0 			; <UNDEFINED> instruction: 0x01157ed0
    1148:	153a0150 	ldrne	r0, [sl, #-336]!	; 0x150
    114c:	01047d02 	tsteq	r4, r2, lsl #26
    1150:	7d021531 	cfstr32vc	mvfx1, [r2, #-196]	; 0xffffff3c
    1154:	00770200 	rsbseq	r0, r7, r0, lsl #4
    1158:	88041400 	stmdahi	r4, {sl, ip}
    115c:	019c0000 	orrseq	r0, ip, r0
    1160:	05370000 	ldreq	r0, [r7, #-0]!
    1164:	01150000 	tsteq	r5, r0
    1168:	80080252 	andhi	r0, r8, r2, asr r2
    116c:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    1170:	157ed091 	ldrbne	sp, [lr, #-145]!	; 0x91
    1174:	3a015001 	bcc	55180 <__bss_end__+0x4bb20>
    1178:	047d0215 	ldrbteq	r0, [sp], #-533	; 0x215
    117c:	02153001 	andseq	r3, r5, #1
    1180:	7702007d 	smlsdxvc	r2, sp, r0, r0
    1184:	2c140000 	ldccs	0, cr0, [r4], {-0}
    1188:	9c000088 	stcls	0, cr0, [r0], {136}	; 0x88
    118c:	64000001 	strvs	r0, [r0], #-1
    1190:	15000005 	strne	r0, [r0, #-5]
    1194:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    1198:	51011580 	smlabbpl	r1, r0, r5, r1
    119c:	7ed09103 	atnvcs	f1, f3
    11a0:	01500115 	cmpeq	r0, r5, lsl r1
    11a4:	7d021540 	cfstr32vc	mvfx1, [r2, #-256]	; 0xffffff00
    11a8:	15300104 	ldrne	r0, [r0, #-260]!	; 0x104
    11ac:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    11b0:	14000077 	strne	r0, [r0], #-119	; 0x77
    11b4:	00008854 	andeq	r8, r0, r4, asr r8
    11b8:	0000019c 	muleq	r0, ip, r1
    11bc:	00000591 	muleq	r0, r1, r5
    11c0:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    11c4:	01158008 	tsteq	r5, r8
    11c8:	d0910351 	addsle	r0, r1, r1, asr r3
    11cc:	5001157e 	andpl	r1, r1, lr, ror r5
    11d0:	02153201 	andseq	r3, r5, #268435456	; 0x10000000
    11d4:	3001047d 	andcc	r0, r1, sp, ror r4
    11d8:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    11dc:	00007702 	andeq	r7, r0, r2, lsl #14
    11e0:	00888814 	addeq	r8, r8, r4, lsl r8
    11e4:	00019c00 	andeq	r9, r1, r0, lsl #24
    11e8:	0005be00 	andeq	fp, r5, r0, lsl #28
    11ec:	52011500 	andpl	r1, r1, #0, 10
    11f0:	15800802 	strne	r0, [r0, #2050]	; 0x802
    11f4:	91035101 	tstls	r3, r1, lsl #2
    11f8:	01157ed0 			; <UNDEFINED> instruction: 0x01157ed0
    11fc:	15380150 	ldrne	r0, [r8, #-336]!	; 0x150
    1200:	01047d02 	tsteq	r4, r2, lsl #26
    1204:	7d021530 	cfstr32vc	mvfx1, [r2, #-192]	; 0xffffff40
    1208:	00770200 	rsbseq	r0, r7, r0, lsl #4
    120c:	88a41400 	stmiahi	r4!, {sl, ip}
    1210:	063a0000 	ldrteq	r0, [sl], -r0
    1214:	05f40000 	ldrbeq	r0, [r4, #0]!
    1218:	01150000 	tsteq	r5, r0
    121c:	b9080253 	stmdblt	r8, {r0, r1, r4, r6, r9}
    1220:	05520115 	ldrbeq	r0, [r2, #-277]	; 0x115
    1224:	00902803 	addseq	r2, r0, r3, lsl #16
    1228:	51011500 	tstpl	r1, r0, lsl #10
    122c:	90480305 	subls	r0, r8, r5, lsl #6
    1230:	01150000 	tsteq	r5, r0
    1234:	dc030550 	cfstr32le	mvfx0, [r3], {80}	; 0x50
    1238:	15000090 	strne	r0, [r0, #-144]	; 0x90
    123c:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    1240:	16000079 			; <UNDEFINED> instruction: 0x16000079
    1244:	000088a8 	andeq	r8, r0, r8, lsr #17
    1248:	00000650 	andeq	r0, r0, r0, asr r6
    124c:	7a180000 	bvc	601254 <__bss_end__+0x5f7bf4>
    1250:	0f000000 	svceq	0x00000000
    1254:	19000006 	stmdbne	r0, {r1, r2}
    1258:	0000006b 	andeq	r0, r0, fp, rrx
    125c:	ff060009 			; <UNDEFINED> instruction: 0xff060009
    1260:	18000005 	stmdane	r0, {r0, r2}
    1264:	0000007a 	andeq	r0, r0, sl, ror r0
    1268:	00000624 	andeq	r0, r0, r4, lsr #12
    126c:	00006b19 	andeq	r6, r0, r9, lsl fp
    1270:	1f007f00 	svcne	0x00007f00
    1274:	00000336 	andeq	r0, r0, r6, lsr r3
    1278:	03791d03 	cmneq	r9, #3, 26	; 0xc0
    127c:	311f0000 	tstcc	pc, r0
    1280:	03000003 	movweq	r0, #3
    1284:	00038e20 	andeq	r8, r3, r0, lsr #28
    1288:	03012000 	movweq	r2, #4096	; 0x1000
    128c:	27030000 	strcs	r0, [r3, -r0]
    1290:	00000025 	andeq	r0, r0, r5, lsr #32
    1294:	00000650 	andeq	r0, r0, r0, asr r6
    1298:	0000811c 	andeq	r8, r0, ip, lsl r1
    129c:	22002100 	andcs	r2, r0, #0, 2
    12a0:	0000005c 	andeq	r0, r0, ip, asr r0
    12a4:	ff005c03 			; <UNDEFINED> instruction: 0xff005c03
    12a8:	04000000 	streq	r0, [r0], #-0
    12ac:	00080e00 	andeq	r0, r8, r0, lsl #28
    12b0:	67010400 	strvs	r0, [r1, -r0, lsl #8]
    12b4:	01000000 	mrseq	r0, (UNDEF: 0)
    12b8:	000003a1 	andeq	r0, r0, r1, lsr #7
    12bc:	0000029d 	muleq	r0, sp, r2
    12c0:	00008910 	andeq	r8, r0, r0, lsl r9
    12c4:	00000028 	andeq	r0, r0, r8, lsr #32
    12c8:	00000750 	andeq	r0, r0, r0, asr r7
    12cc:	69050402 	stmdbvs	r5, {r1, sl}
    12d0:	0300746e 	movweq	r7, #1134	; 0x46e
    12d4:	017d0704 	cmneq	sp, r4, lsl #14
    12d8:	01030000 	mrseq	r0, (UNDEF: 3)
    12dc:	0000d806 	andeq	sp, r0, r6, lsl #16
    12e0:	05020300 	streq	r0, [r2, #-768]	; 0x300
    12e4:	000001c4 	andeq	r0, r0, r4, asr #3
    12e8:	b0050403 	andlt	r0, r5, r3, lsl #8
    12ec:	03000001 	movweq	r0, #1
    12f0:	01ab0508 			; <UNDEFINED> instruction: 0x01ab0508
    12f4:	01030000 	mrseq	r0, (UNDEF: 3)
    12f8:	0000d608 	andeq	sp, r0, r8, lsl #12
    12fc:	07020300 	streq	r0, [r2, -r0, lsl #6]
    1300:	000000fa 	strdeq	r0, [r0], -sl
    1304:	78070403 	stmdavc	r7, {r0, r1, sl}
    1308:	03000001 	movweq	r0, #1
    130c:	01730708 	cmneq	r3, r8, lsl #14
    1310:	04030000 	streq	r0, [r3], #-0
    1314:	0001a207 	andeq	sl, r1, r7, lsl #4
    1318:	08010300 	stmdaeq	r1, {r8, r9}
    131c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1320:	007f0404 	rsbseq	r0, pc, r4, lsl #8
    1324:	72050000 	andvc	r0, r5, #0
    1328:	06000000 	streq	r0, [r0], -r0
    132c:	000000e4 	andeq	r0, r0, r4, ror #1
    1330:	89100401 	ldmdbhi	r0, {r0, sl}
    1334:	00280000 	eoreq	r0, r8, r0
    1338:	9c010000 	stcls	0, cr0, [r1], {-0}
    133c:	000000ca 	andeq	r0, r0, sl, asr #1
    1340:	00892407 	addeq	r2, r9, r7, lsl #8
    1344:	0000ac00 	andeq	sl, r0, r0, lsl #24
    1348:	50010800 	andpl	r0, r1, r0, lsl #16
    134c:	91140305 	tstls	r4, r5, lsl #6
    1350:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1354:	0000892c 	andeq	r8, r0, ip, lsr #18
    1358:	000000ea 	andeq	r0, r0, sl, ror #1
    135c:	000000c0 	andeq	r0, r0, r0, asr #1
    1360:	02500108 	subseq	r0, r0, #8, 2
    1364:	0a006408 	beq	1a38c <__bss_end__+0x10d2c>
    1368:	00008930 	andeq	r8, r0, r0, lsr r9
    136c:	000000fb 	strdeq	r0, [r0], -fp
    1370:	00250b00 	eoreq	r0, r5, r0, lsl #22
    1374:	00d90000 	sbcseq	r0, r9, r0
    1378:	790c0000 	stmdbvc	ip, {}	; <UNPREDICTABLE>
    137c:	00000000 	andeq	r0, r0, r0
    1380:	0003310d 	andeq	r3, r3, sp, lsl #2
    1384:	e4200200 	strt	r0, [r0], #-512	; 0x200
    1388:	04000000 	streq	r0, [r0], #-0
    138c:	0000ca04 	andeq	ip, r0, r4, lsl #20
    1390:	03bb0e00 			; <UNDEFINED> instruction: 0x03bb0e00
    1394:	4d020000 	stcmi	0, cr0, [r2, #-0]
    1398:	000000fb 	strdeq	r0, [r0], -fp
    139c:	00002c0c 	andeq	r2, r0, ip, lsl #24
    13a0:	5c0f0000 	stcpl	0, cr0, [pc], {-0}
    13a4:	02000000 	andeq	r0, r0, #0
    13a8:	010b005c 	qaddeq	r0, ip, fp
    13ac:	00040000 	andeq	r0, r4, r0
    13b0:	000008d8 	ldrdeq	r0, [r0], -r8
    13b4:	00670104 	rsbeq	r0, r7, r4, lsl #2
    13b8:	c4010000 	strgt	r0, [r1], #-0
    13bc:	9d000003 	stcls	0, cr0, [r0, #-12]
    13c0:	38000002 	stmdacc	r0, {r1}
    13c4:	34000089 	strcc	r0, [r0], #-137	; 0x89
    13c8:	e7000000 	str	r0, [r0, -r0]
    13cc:	02000007 	andeq	r0, r0, #7
    13d0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    13d4:	04030074 	streq	r0, [r3], #-116	; 0x74
    13d8:	00017d07 	andeq	r7, r1, r7, lsl #26
    13dc:	06010300 	streq	r0, [r1], -r0, lsl #6
    13e0:	000000d8 	ldrdeq	r0, [r0], -r8
    13e4:	c4050203 	strgt	r0, [r5], #-515	; 0x203
    13e8:	03000001 	movweq	r0, #1
    13ec:	01b00504 	lslseq	r0, r4, #10
    13f0:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    13f4:	0001ab05 	andeq	sl, r1, r5, lsl #22
    13f8:	08010300 	stmdaeq	r1, {r8, r9}
    13fc:	000000d6 	ldrdeq	r0, [r0], -r6
    1400:	fa070203 	blx	1c1c14 <__bss_end__+0x1b85b4>
    1404:	03000000 	movweq	r0, #0
    1408:	01780704 	cmneq	r8, r4, lsl #14
    140c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1410:	00017307 	andeq	r7, r1, r7, lsl #6
    1414:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1418:	000001a2 	andeq	r0, r0, r2, lsr #3
    141c:	df080103 	svcle	0x00080103
    1420:	04000000 	streq	r0, [r0], #-0
    1424:	000003fa 	strdeq	r0, [r0], -sl
    1428:	89380301 	ldmdbhi	r8!, {r0, r8, r9}
    142c:	00340000 	eorseq	r0, r4, r0
    1430:	9c010000 	stcls	0, cr0, [r1], {-0}
    1434:	000000de 	ldrdeq	r0, [r0], -lr
    1438:	0003d805 	andeq	sp, r3, r5, lsl #16
    143c:	25040100 	strcs	r0, [r4, #-256]	; 0x100
    1440:	05000000 	streq	r0, [r0, #-0]
    1444:	000003e6 	andeq	r0, r0, r6, ror #7
    1448:	00250401 	eoreq	r0, r5, r1, lsl #8
    144c:	be060000 	cdplt	0, 0, cr0, cr6, cr0, {0}
    1450:	01000000 	mrseq	r0, (UNDEF: 0)
    1454:	0000b105 	andeq	fp, r0, r5, lsl #2
    1458:	08000700 	stmdaeq	r0, {r8, r9, sl}
    145c:	00737362 	rsbseq	r7, r3, r2, ror #6
    1460:	00de0701 	sbcseq	r0, lr, r1, lsl #14
    1464:	09620000 	stmdbeq	r2!, {}^	; <UNPREDICTABLE>
    1468:	f2090000 	vhadd.s8	d0, d9, d0
    146c:	01000003 	tsteq	r0, r3
    1470:	0000de08 	andeq	sp, r0, r8, lsl #28
    1474:	89600a00 	stmdbhi	r0!, {r9, fp}^
    1478:	00fa0000 	rscseq	r0, sl, r0
    147c:	640a0000 	strvs	r0, [sl], #-0
    1480:	07000089 	streq	r0, [r0, -r9, lsl #1]
    1484:	00000001 	andeq	r0, r0, r1
    1488:	0025040b 	eoreq	r0, r5, fp, lsl #8
    148c:	d8050000 	stmdale	r5, {}	; <UNPREDICTABLE>
    1490:	01000003 	tsteq	r0, r3
    1494:	00002504 	andeq	r2, r0, r4, lsl #10
    1498:	03e60500 	mvneq	r0, #0, 10
    149c:	04010000 	streq	r0, [r1], #-0
    14a0:	00000025 	andeq	r0, r0, r5, lsr #32
    14a4:	0000be06 	andeq	fp, r0, r6, lsl #28
    14a8:	07050100 	streq	r0, [r5, -r0, lsl #2]
    14ac:	07000001 	streq	r0, [r0, -r1]
    14b0:	005c0c00 	subseq	r0, ip, r0, lsl #24
    14b4:	5c020000 	stcpl	0, cr0, [r2], {-0}
    14b8:	0001ad00 	andeq	sl, r1, r0, lsl #26
    14bc:	82000400 	andhi	r0, r0, #0, 8
    14c0:	04000009 	streq	r0, [r0], #-9
    14c4:	00006701 	andeq	r6, r0, r1, lsl #14
    14c8:	041c0100 	ldreq	r0, [ip], #-256	; 0x100
    14cc:	029d0000 	addseq	r0, sp, #0
    14d0:	00180000 	andseq	r0, r8, r0
    14d4:	00000000 	andeq	r0, r0, r0
    14d8:	08810000 	stmeq	r1, {}	; <UNPREDICTABLE>
    14dc:	04020000 	streq	r0, [r2], #-0
    14e0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    14e4:	07040300 	streq	r0, [r4, -r0, lsl #6]
    14e8:	0000017d 	andeq	r0, r0, sp, ror r1
    14ec:	d8060103 	stmdale	r6, {r0, r1, r8}
    14f0:	03000000 	movweq	r0, #0
    14f4:	01c40502 	biceq	r0, r4, r2, lsl #10
    14f8:	04030000 	streq	r0, [r3], #-0
    14fc:	0001b005 	andeq	fp, r1, r5
    1500:	05080300 	streq	r0, [r8, #-768]	; 0x300
    1504:	000001ab 	andeq	r0, r0, fp, lsr #3
    1508:	d6080103 	strle	r0, [r8], -r3, lsl #2
    150c:	03000000 	movweq	r0, #0
    1510:	00fa0702 	rscseq	r0, sl, r2, lsl #14
    1514:	04030000 	streq	r0, [r3], #-0
    1518:	00017807 	andeq	r7, r1, r7, lsl #16
    151c:	07080300 	streq	r0, [r8, -r0, lsl #6]
    1520:	00000173 	andeq	r0, r0, r3, ror r1
    1524:	a2070403 	andge	r0, r7, #50331648	; 0x3000000
    1528:	03000001 	movweq	r0, #1
    152c:	00df0801 	sbcseq	r0, pc, r1, lsl #16
    1530:	02040000 	andeq	r0, r4, #0
    1534:	01000004 	tsteq	r0, r4
    1538:	0000250e 	andeq	r2, r0, lr, lsl #10
    153c:	00896c00 	addeq	r6, r9, r0, lsl #24
    1540:	00001800 	andeq	r1, r0, r0, lsl #16
    1544:	a29c0100 	addsge	r0, ip, #0, 2
    1548:	05000000 	streq	r0, [r0, #-0]
    154c:	0000046e 	andeq	r0, r0, lr, ror #8
    1550:	002c0f01 	eoreq	r0, ip, r1, lsl #30
    1554:	09820000 	stmibeq	r2, {}	; <UNPREDICTABLE>
    1558:	06000000 	streq	r0, [r0], -r0
    155c:	00000451 	andeq	r0, r0, r1, asr r4
    1560:	89841701 	stmibhi	r4, {r0, r8, r9, sl, ip}
    1564:	00140000 	andseq	r0, r4, r0
    1568:	9c010000 	stcls	0, cr0, [r1], {-0}
    156c:	000000c7 	andeq	r0, r0, r7, asr #1
    1570:	00046e05 	andeq	r6, r4, r5, lsl #28
    1574:	2c180100 	ldfcss	f0, [r8], {-0}
    1578:	a1000000 	mrsge	r0, (UNDEF: 0)
    157c:	00000009 	andeq	r0, r0, r9
    1580:	00005c06 	andeq	r5, r0, r6, lsl #24
    1584:	981f0100 	ldmdals	pc, {r8}	; <UNPREDICTABLE>
    1588:	48000089 	stmdami	r0, {r0, r3, r7}
    158c:	01000000 	mrseq	r0, (UNDEF: 0)
    1590:	0001779c 	muleq	r1, ip, r7
    1594:	04660700 	strbteq	r0, [r6], #-1792	; 0x700
    1598:	2a010000 	bcs	415a0 <__bss_end__+0x37f40>
    159c:	00000177 	andeq	r0, r0, r7, ror r1
    15a0:	2010001c 	andscs	r0, r0, ip, lsl r0
    15a4:	00044907 	andeq	r4, r4, r7, lsl #18
    15a8:	772b0100 	strvc	r0, [fp, -r0, lsl #2]!
    15ac:	24000001 	strcs	r0, [r0], #-1
    15b0:	07201000 	streq	r1, [r0, -r0]!
    15b4:	00000410 	andeq	r0, r0, r0, lsl r4
    15b8:	01772c01 	cmneq	r7, r1, lsl #24
    15bc:	00000000 	andeq	r0, r0, r0
    15c0:	30085a00 	andcc	r5, r8, r0, lsl #20
    15c4:	01000004 	tsteq	r0, r4
    15c8:	0001772d 	andeq	r7, r1, sp, lsr #14
    15cc:	a0092000 	andge	r2, r9, r0
    15d0:	79000089 	stmdbvc	r0, {r0, r3, r7}
    15d4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    15d8:	000089ac 	andeq	r8, r0, ip, lsr #19
    15dc:	000000a2 	andeq	r0, r0, r2, lsr #1
    15e0:	0089b40a 	addeq	fp, r9, sl, lsl #8
    15e4:	00018d00 	andeq	r8, r1, r0, lsl #26
    15e8:	00013a00 	andeq	r3, r1, r0, lsl #20
    15ec:	50010b00 	andpl	r0, r1, r0, lsl #22
    15f0:	0a004e01 	beq	14dfc <__bss_end__+0xb79c>
    15f4:	000089c0 	andeq	r8, r0, r0, asr #19
    15f8:	0000019e 	muleq	r0, lr, r1
    15fc:	0000015a 	andeq	r0, r0, sl, asr r1
    1600:	0551010b 	ldrbeq	r0, [r1, #-267]	; 0x10b
    1604:	0000010c 	andeq	r0, r0, ip, lsl #2
    1608:	50010b5a 	andpl	r0, r1, sl, asr fp
    160c:	00240c05 	eoreq	r0, r4, r5, lsl #24
    1610:	0c002010 	stceq	0, cr2, [r0], {16}
    1614:	000089cc 	andeq	r8, r0, ip, asr #19
    1618:	0000019e 	muleq	r0, lr, r1
    161c:	0551010b 	ldrbeq	r0, [r1, #-267]	; 0x10b
    1620:	0000200c 	andeq	r2, r0, ip
    1624:	50010b5a 	andpl	r0, r1, sl, asr fp
    1628:	001c0c05 	andseq	r0, ip, r5, lsl #24
    162c:	00002010 	andeq	r2, r0, r0, lsl r0
    1630:	0000250d 	andeq	r2, r0, sp, lsl #10
    1634:	04050800 	streq	r0, [r5], #-2048	; 0x800
    1638:	0d010000 	stceq	0, cr0, [r1, #-0]
    163c:	00000188 	andeq	r0, r0, r8, lsl #3
    1640:	002c0d10 	eoreq	r0, ip, r0, lsl sp
    1644:	bb0e0000 	bllt	38164c <__bss_end__+0x377fec>
    1648:	02000003 	andeq	r0, r0, #3
    164c:	00019e4d 	andeq	r9, r1, sp, asr #28
    1650:	002c0f00 	eoreq	r0, ip, r0, lsl #30
    1654:	10000000 	andne	r0, r0, r0
    1658:	00000460 	andeq	r0, r0, r0, ror #8
    165c:	2c0f9002 	stccs	0, cr9, [pc], {2}
    1660:	0f000000 	svceq	0x00000000
    1664:	0000002c 	andeq	r0, r0, ip, lsr #32
    1668:	01aa0000 			; <UNDEFINED> instruction: 0x01aa0000
    166c:	00040000 	andeq	r0, r4, r0
    1670:	00000a70 	andeq	r0, r0, r0, ror sl
    1674:	00670104 	rsbeq	r0, r7, r4, lsl #2
    1678:	7d010000 	stcvc	0, cr0, [r1, #-0]
    167c:	9d000004 	stcls	0, cr0, [r0, #-16]
    1680:	e0000002 	and	r0, r0, r2
    1684:	7c000089 	stcvc	0, cr0, [r0], {137}	; 0x89
    1688:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    168c:	02000009 	andeq	r0, r0, #9
    1690:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1694:	04030074 	streq	r0, [r3], #-116	; 0x74
    1698:	00017d07 	andeq	r7, r1, r7, lsl #26
    169c:	06010300 	streq	r0, [r1], -r0, lsl #6
    16a0:	000000d8 	ldrdeq	r0, [r0], -r8
    16a4:	c4050203 	strgt	r0, [r5], #-515	; 0x203
    16a8:	03000001 	movweq	r0, #1
    16ac:	01b00504 	lslseq	r0, r4, #10
    16b0:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    16b4:	0001ab05 	andeq	sl, r1, r5, lsl #22
    16b8:	08010300 	stmdaeq	r1, {r8, r9}
    16bc:	000000d6 	ldrdeq	r0, [r0], -r6
    16c0:	fa070203 	blx	1c1ed4 <__bss_end__+0x1b8874>
    16c4:	03000000 	movweq	r0, #0
    16c8:	01780704 	cmneq	r8, r4, lsl #14
    16cc:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    16d0:	00017307 	andeq	r7, r1, r7, lsl #6
    16d4:	07040300 	streq	r0, [r4, -r0, lsl #6]
    16d8:	000001a2 	andeq	r0, r0, r2, lsr #3
    16dc:	df080103 	svcle	0x00080103
    16e0:	04000000 	streq	r0, [r0], #-0
    16e4:	0000049c 	muleq	r0, ip, r4
    16e8:	89e00501 	stmibhi	r0!, {r0, r8, sl}^
    16ec:	001c0000 	andseq	r0, ip, r0
    16f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    16f4:	0000009e 	muleq	r0, lr, r0
    16f8:	00049605 	andeq	r9, r4, r5, lsl #12
    16fc:	2c050100 	stfcss	f0, [r5], {-0}
    1700:	cb000000 	blgt	1708 <_start-0x68f8>
    1704:	00000009 	andeq	r0, r0, r9
    1708:	0004b206 	andeq	fp, r4, r6, lsl #4
    170c:	2c0b0100 	stfcss	f0, [fp], {-0}
    1710:	fc000000 	stc2	0, cr0, [r0], {-0}
    1714:	14000089 	strne	r0, [r0], #-137	; 0x89
    1718:	01000000 	mrseq	r0, (UNDEF: 0)
    171c:	0000cb9c 	muleq	r0, ip, fp
    1720:	8a080700 	bhi	203328 <__bss_end__+0x1f9cc8>
    1724:	019c0000 	orrseq	r0, ip, r0
    1728:	01080000 	mrseq	r0, (UNDEF: 8)
    172c:	040c0550 	streq	r0, [ip], #-1360	; 0x550
    1730:	00200030 	eoreq	r0, r0, r0, lsr r0
    1734:	04a90400 	strteq	r0, [r9], #1024	; 0x400
    1738:	0f010000 	svceq	0x00010000
    173c:	00008a10 	andeq	r8, r0, r0, lsl sl
    1740:	00000024 	andeq	r0, r0, r4, lsr #32
    1744:	01299c01 	teqeq	r9, r1, lsl #24
    1748:	75090000 	strvc	r0, [r9, #-0]
    174c:	0f010073 	svceq	0x00010073
    1750:	0000002c 	andeq	r0, r0, ip, lsr #32
    1754:	000009ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1758:	0062720a 	rsbeq	r7, r2, sl, lsl #4
    175c:	002c1001 	eoreq	r1, ip, r1
    1760:	54010000 	strpl	r0, [r1], #-0
    1764:	008a200b 	addeq	r2, sl, fp
    1768:	00001000 	andeq	r1, r0, r0
    176c:	00011f00 	andeq	r1, r1, r0, lsl #30
    1770:	61720c00 	cmnvs	r2, r0, lsl #24
    1774:	2c120100 	ldfcss	f0, [r2], {-0}
    1778:	1d000000 	stcne	0, cr0, [r0, #-0]
    177c:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
    1780:	00008a24 	andeq	r8, r0, r4, lsr #20
    1784:	0000009e 	muleq	r0, lr, r0
    1788:	8a1c0d00 	bhi	704b90 <__bss_end__+0x6fb530>
    178c:	009e0000 	addseq	r0, lr, r0
    1790:	04000000 	streq	r0, [r0], #-0
    1794:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    1798:	8a341801 	bhi	d077a4 <__bss_end__+0xcfe144>
    179c:	00140000 	andseq	r0, r4, r0
    17a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    17a4:	00000162 	andeq	r0, r0, r2, ror #2
    17a8:	00736d09 	rsbseq	r6, r3, r9, lsl #26
    17ac:	002c1801 	eoreq	r1, ip, r1, lsl #16
    17b0:	0a300000 	beq	c017b8 <__bss_end__+0xbf8158>
    17b4:	44070000 	strmi	r0, [r7], #-0
    17b8:	cb00008a 	blgt	19e8 <_start-0x6618>
    17bc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    17c0:	f3075001 	vhadd.u8	d5, d7, d1
    17c4:	e80a5001 	stmda	sl, {r0, ip, lr}
    17c8:	00001e03 	andeq	r1, r0, r3, lsl #28
    17cc:	00047304 	andeq	r7, r4, r4, lsl #6
    17d0:	481b0100 	ldmdami	fp, {r8}
    17d4:	1400008a 	strne	r0, [r0], #-138	; 0x8a
    17d8:	01000000 	mrseq	r0, (UNDEF: 0)
    17dc:	00019c9c 	muleq	r1, ip, ip
    17e0:	65730900 	ldrbvs	r0, [r3, #-2304]!	; 0x900
    17e4:	1b010063 	blne	41978 <__bss_end__+0x38318>
    17e8:	0000002c 	andeq	r0, r0, ip, lsr #32
    17ec:	00000a51 	andeq	r0, r0, r1, asr sl
    17f0:	008a5807 	addeq	r5, sl, r7, lsl #16
    17f4:	00012900 	andeq	r2, r1, r0, lsl #18
    17f8:	50010800 	andpl	r0, r1, r0, lsl #16
    17fc:	5001f307 	andpl	pc, r1, r7, lsl #6
    1800:	1e03e80a 	cdpne	8, 0, cr14, cr3, cr10, {0}
    1804:	900e0000 	andls	r0, lr, r0
    1808:	02000004 	andeq	r0, r0, #4
    180c:	00002c9c 	muleq	r0, ip, ip
    1810:	002c0f00 	eoreq	r0, ip, r0, lsl #30
    1814:	00000000 	andeq	r0, r0, r0
    1818:	00000348 	andeq	r0, r0, r8, asr #6
    181c:	0b530004 	bleq	14c1834 <__bss_end__+0x14b81d4>
    1820:	01040000 	mrseq	r0, (UNDEF: 4)
    1824:	00000067 	andeq	r0, r0, r7, rrx
    1828:	0004dc01 	andeq	sp, r4, r1, lsl #24
    182c:	00029d00 	andeq	r9, r2, r0, lsl #26
    1830:	008d3400 	addeq	r3, sp, r0, lsl #8
    1834:	00017800 	andeq	r7, r1, r0, lsl #16
    1838:	0009c200 	andeq	ip, r9, r0, lsl #4
    183c:	05040200 	streq	r0, [r4, #-512]	; 0x200
    1840:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1844:	0001f803 	andeq	pc, r1, r3, lsl #16
    1848:	37d40200 	ldrbcc	r0, [r4, r0, lsl #4]
    184c:	04000000 	streq	r0, [r0], #-0
    1850:	017d0704 	cmneq	sp, r4, lsl #14
    1854:	01040000 	mrseq	r0, (UNDEF: 4)
    1858:	0000d806 	andeq	sp, r0, r6, lsl #16
    185c:	05020400 	streq	r0, [r2, #-1024]	; 0x400
    1860:	000001c4 	andeq	r0, r0, r4, asr #3
    1864:	b0050404 	andlt	r0, r5, r4, lsl #8
    1868:	04000001 	streq	r0, [r0], #-1
    186c:	01ab0508 			; <UNDEFINED> instruction: 0x01ab0508
    1870:	01040000 	mrseq	r0, (UNDEF: 4)
    1874:	0000d608 	andeq	sp, r0, r8, lsl #12
    1878:	07020400 	streq	r0, [r2, -r0, lsl #8]
    187c:	000000fa 	strdeq	r0, [r0], -sl
    1880:	78070404 	stmdavc	r7, {r2, sl}
    1884:	04000001 	streq	r0, [r0], #-1
    1888:	01730708 	cmneq	r3, r8, lsl #14
    188c:	04040000 	streq	r0, [r4], #-0
    1890:	0001a207 	andeq	sl, r1, r7, lsl #4
    1894:	06040500 	streq	r0, [r4], -r0, lsl #10
    1898:	00008504 	andeq	r8, r0, r4, lsl #10
    189c:	08010400 	stmdaeq	r1, {sl}
    18a0:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    18a4:	00920406 	addseq	r0, r2, r6, lsl #8
    18a8:	85070000 	strhi	r0, [r7, #-0]
    18ac:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    18b0:	00000085 	andeq	r0, r0, r5, lsl #1
    18b4:	000000a7 	andeq	r0, r0, r7, lsr #1
    18b8:	00007609 	andeq	r7, r0, r9, lsl #12
    18bc:	0a000700 	beq	34c4 <_start-0x4b3c>
    18c0:	0000010d 	andeq	r0, r0, sp, lsl #2
    18c4:	007d1901 	rsbseq	r1, sp, r1, lsl #18
    18c8:	8d340000 	ldchi	0, cr0, [r4, #-0]
    18cc:	00640000 	rsbeq	r0, r4, r0
    18d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    18d4:	0000015c 	andeq	r0, r0, ip, asr r1
    18d8:	0005060b 	andeq	r0, r5, fp, lsl #12
    18dc:	37190100 	ldrcc	r0, [r9, -r0, lsl #2]
    18e0:	72000000 	andvc	r0, r0, #0
    18e4:	0c00000a 	stceq	0, cr0, [r0], {10}
    18e8:	00000142 	andeq	r0, r0, r2, asr #2
    18ec:	0000015c 	andeq	r0, r0, ip, asr r1
    18f0:	91200305 	teqls	r0, r5, lsl #6
    18f4:	2d0d0000 	stccs	0, cr0, [sp, #-0]
    18f8:	01000005 	tsteq	r0, r5
    18fc:	00007d1c 	andeq	r7, r0, ip, lsl sp
    1900:	0e540100 	rdfeqs	f0, f4, f0
    1904:	000004fe 	strdeq	r0, [r0], -lr
    1908:	00371d01 	eorseq	r1, r7, r1, lsl #26
    190c:	0aac0000 	beq	feb01914 <__bss_end__+0xfeaf82b4>
    1910:	5c0f0000 	stcpl	0, cr0, [pc], {-0}
    1914:	1300008d 	movwne	r0, #141	; 0x8d
    1918:	28000003 	stmdacs	r0, {r0, r1}
    191c:	10000001 	andne	r0, r0, r1
    1920:	4a015301 	bmi	5652c <__bss_end__+0x4cecc>
    1924:	05520110 	ldrbeq	r0, [r2, #-272]	; 0x110
    1928:	00912003 	addseq	r2, r1, r3
    192c:	51011000 	mrspl	r1, (UNDEF: 1)
    1930:	91880305 	orrls	r0, r8, r5, lsl #6
    1934:	01100000 	tsteq	r0, r0
    1938:	48030550 	stmdami	r3, {r4, r6, r8, sl}
    193c:	00000091 	muleq	r0, r1, r0
    1940:	008d6011 	addeq	r6, sp, r1, lsl r0
    1944:	00032900 	andeq	r2, r3, r0, lsl #18
    1948:	8d801200 	sfmhi	f1, 4, [r0]
    194c:	03300000 	teqeq	r0, #0
    1950:	01100000 	tsteq	r0, r0
    1954:	01f30852 	mvnseq	r0, r2, asr r8
    1958:	09032350 	stmdbeq	r3, {r4, r6, r8, r9, sp}
    195c:	01101afc 			; <UNDEFINED> instruction: 0x01101afc
    1960:	10300151 	eorsne	r0, r0, r1, asr r1
    1964:	f30b5001 	vhadd.u8	d5, d11, d1
    1968:	03235001 	teqeq	r3, #1
    196c:	741afc09 	ldrvc	pc, [sl], #-3081	; 0xc09
    1970:	00002200 	andeq	r2, r0, r0, lsl #4
    1974:	00009707 	andeq	r9, r0, r7, lsl #14
    1978:	02050a00 	andeq	r0, r5, #0, 20
    197c:	26010000 	strcs	r0, [r1], -r0
    1980:	0000007d 	andeq	r0, r0, sp, ror r0
    1984:	00008d98 	muleq	r0, r8, sp
    1988:	00000094 	muleq	r0, r4, r0
    198c:	02399c01 	eorseq	r9, r9, #256	; 0x100
    1990:	060b0000 	streq	r0, [fp], -r0
    1994:	01000005 	tsteq	r0, r5
    1998:	00003726 	andeq	r3, r0, r6, lsr #14
    199c:	000ad200 	andeq	sp, sl, r0, lsl #4
    19a0:	04f40b00 	ldrbteq	r0, [r4], #2816	; 0xb00
    19a4:	26010000 	strcs	r0, [r1], -r0
    19a8:	00000037 	andeq	r0, r0, r7, lsr r0
    19ac:	00000b3e 	andeq	r0, r0, lr, lsr fp
    19b0:	0001420c 	andeq	r4, r1, ip, lsl #4
    19b4:	00024900 	andeq	r4, r2, r0, lsl #18
    19b8:	28030500 	stmdacs	r3, {r8, sl}
    19bc:	0e000091 	mcreq	0, 0, r0, cr0, cr1, {4}
    19c0:	000004cb 	andeq	r0, r0, fp, asr #9
    19c4:	00372c01 	eorseq	r2, r7, r1, lsl #24
    19c8:	0bb80000 	bleq	fee019d0 <__bss_end__+0xfedf8370>
    19cc:	c00f0000 	andgt	r0, pc, r0
    19d0:	1300008d 	movwne	r0, #141	; 0x8d
    19d4:	e5000003 	str	r0, [r0, #-3]
    19d8:	10000001 	andne	r0, r0, r1
    19dc:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    19e0:	52011027 	andpl	r1, r1, #39	; 0x27
    19e4:	91280305 	teqls	r8, r5, lsl #6
    19e8:	01100000 	tsteq	r0, r0
    19ec:	88030551 	stmdahi	r3, {r0, r4, r6, r8, sl}
    19f0:	10000091 	mulne	r0, r1, r0
    19f4:	03055001 	movweq	r5, #20481	; 0x5001
    19f8:	00009148 	andeq	r9, r0, r8, asr #2
    19fc:	8dc41100 	stfhie	f1, [r4]
    1a00:	03290000 	teqeq	r9, #0
    1a04:	d0110000 	andsle	r0, r1, r0
    1a08:	a700008d 	strge	r0, [r0, -sp, lsl #1]
    1a0c:	0f000000 	svceq	0x00000000
    1a10:	00008df0 	strdeq	r8, [r0], -r0
    1a14:	00000313 	andeq	r0, r0, r3, lsl r3
    1a18:	00000226 	andeq	r0, r0, r6, lsr #4
    1a1c:	02530110 	subseq	r0, r3, #16, 2
    1a20:	01102b08 	tsteq	r0, r8, lsl #22
    1a24:	28030552 	stmdacs	r3, {r1, r4, r6, r8, sl}
    1a28:	10000091 	mulne	r0, r1, r0
    1a2c:	03055101 	movweq	r5, #20737	; 0x5101
    1a30:	00009188 	andeq	r9, r0, r8, lsl #3
    1a34:	05500110 	ldrbeq	r0, [r0, #-272]	; 0x110
    1a38:	00919c03 	addseq	r9, r1, r3, lsl #24
    1a3c:	f4110000 			; <UNDEFINED> instruction: 0xf4110000
    1a40:	2900008d 	stmdbcs	r0, {r0, r2, r3, r7}
    1a44:	11000003 	tstne	r0, r3
    1a48:	00008e14 	andeq	r8, r0, r4, lsl lr
    1a4c:	000000a7 	andeq	r0, r0, r7, lsr #1
    1a50:	00850800 	addeq	r0, r5, r0, lsl #16
    1a54:	02490000 	subeq	r0, r9, #0
    1a58:	76090000 	strvc	r0, [r9], -r0
    1a5c:	0f000000 	svceq	0x00000000
    1a60:	02390700 	eorseq	r0, r9, #0, 14
    1a64:	e6130000 	ldr	r0, [r3], -r0
    1a68:	01000001 	tsteq	r0, r1
    1a6c:	008e2c3b 	addeq	r2, lr, fp, lsr ip
    1a70:	00005800 	andeq	r5, r0, r0, lsl #16
    1a74:	ab9c0100 	blge	fe701e7c <__bss_end__+0xfe6f881c>
    1a78:	0c000002 	stceq	0, cr0, [r0], {2}
    1a7c:	00000142 	andeq	r0, r0, r2, asr #2
    1a80:	000002bb 			; <UNDEFINED> instruction: 0x000002bb
    1a84:	91380305 	teqls	r8, r5, lsl #6
    1a88:	540f0000 	strpl	r0, [pc], #-0	; 1a90 <_start-0x6570>
    1a8c:	1300008e 	movwne	r0, #142	; 0x8e
    1a90:	a1000003 	tstge	r0, r3
    1a94:	10000002 	andne	r0, r0, r2
    1a98:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    1a9c:	5201103c 	andpl	r1, r1, #60	; 0x3c
    1aa0:	91380305 	teqls	r8, r5, lsl #6
    1aa4:	01100000 	tsteq	r0, r0
    1aa8:	88030551 	stmdahi	r3, {r0, r4, r6, r8, sl}
    1aac:	10000091 	mulne	r0, r1, r0
    1ab0:	03055001 	movweq	r5, #20481	; 0x5001
    1ab4:	000091f4 	strdeq	r9, [r0], -r4
    1ab8:	8e581100 	rdfhie	f1, f0, f0
    1abc:	03290000 	teqeq	r9, #0
    1ac0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1ac4:	00000085 	andeq	r0, r0, r5, lsl #1
    1ac8:	000002bb 			; <UNDEFINED> instruction: 0x000002bb
    1acc:	00007609 	andeq	r7, r0, r9, lsl #12
    1ad0:	07000c00 	streq	r0, [r0, -r0, lsl #24]
    1ad4:	000002ab 	andeq	r0, r0, fp, lsr #5
    1ad8:	0004c114 	andeq	ip, r4, r4, lsl r1
    1adc:	84450100 	strbhi	r0, [r5], #-256	; 0x100
    1ae0:	1800008e 	stmdane	r0, {r1, r2, r3, r7}
    1ae4:	01000000 	mrseq	r0, (UNDEF: 0)
    1ae8:	050d159c 	streq	r1, [sp, #-1436]	; 0x59c
    1aec:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    1af0:	0000007d 	andeq	r0, r0, sp, ror r0
    1af4:	00008e9c 	muleq	r0, ip, lr
    1af8:	00000010 	andeq	r0, r0, r0, lsl r0
    1afc:	ed0d9c01 	stc	12, cr9, [sp, #-4]
    1b00:	01000004 	tsteq	r0, r4
    1b04:	00002508 	andeq	r2, r0, r8, lsl #10
    1b08:	54030500 	strpl	r0, [r3], #-1280	; 0x500
    1b0c:	0d000096 	stceq	0, cr0, [r0, #-600]	; 0xfffffda8
    1b10:	00000515 	andeq	r0, r0, r5, lsl r5
    1b14:	007f0b01 	rsbseq	r0, pc, r1, lsl #22
    1b18:	03050000 	movweq	r0, #20480	; 0x5000
    1b1c:	00009658 	andeq	r9, r0, r8, asr r6
    1b20:	00051e16 	andeq	r1, r5, r6, lsl lr
    1b24:	85050100 	strhi	r0, [r5, #-256]	; 0x100
    1b28:	17000000 	strne	r0, [r0, -r0]
    1b2c:	00000301 	andeq	r0, r0, r1, lsl #6
    1b30:	00252703 	eoreq	r2, r5, r3, lsl #14
    1b34:	03290000 	teqeq	r9, #0
    1b38:	8c180000 	ldchi	0, cr0, [r8], {-0}
    1b3c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    1b40:	005c1a00 	subseq	r1, ip, r0, lsl #20
    1b44:	5c030000 	stcpl	0, cr0, [r3], {-0}
    1b48:	00024f1b 	andeq	r4, r2, fp, lsl pc
    1b4c:	7d1b0400 	cfldrsvc	mvf0, [fp, #-0]
    1b50:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1b54:	0000007d 	andeq	r0, r0, sp, ror r0
    1b58:	00002518 	andeq	r2, r0, r8, lsl r5
    1b5c:	002c1800 	eoreq	r1, ip, r0, lsl #16
    1b60:	00000000 	andeq	r0, r0, r0
    1b64:	000000e0 	andeq	r0, r0, r0, ror #1
    1b68:	0cda0004 	ldcleq	0, cr0, [sl], {4}
    1b6c:	01040000 	mrseq	r0, (UNDEF: 4)
    1b70:	00000067 	andeq	r0, r0, r7, rrx
    1b74:	00055401 	andeq	r5, r5, r1, lsl #8
    1b78:	00029d00 	andeq	r9, r2, r0, lsl #26
    1b7c:	008eac00 	addeq	sl, lr, r0, lsl #24
    1b80:	00001400 	andeq	r1, r0, r0, lsl #8
    1b84:	000b3100 	andeq	r3, fp, r0, lsl #2
    1b88:	05040200 	streq	r0, [r4, #-512]	; 0x200
    1b8c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1b90:	7d070403 	cfstrsvc	mvf0, [r7, #-12]
    1b94:	03000001 	movweq	r0, #1
    1b98:	00d80601 	sbcseq	r0, r8, r1, lsl #12
    1b9c:	02030000 	andeq	r0, r3, #0
    1ba0:	0001c405 	andeq	ip, r1, r5, lsl #8
    1ba4:	05040300 	streq	r0, [r4, #-768]	; 0x300
    1ba8:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    1bac:	ab050803 	blge	143bc0 <__bss_end__+0x13a560>
    1bb0:	03000001 	movweq	r0, #1
    1bb4:	00d60801 	sbcseq	r0, r6, r1, lsl #16
    1bb8:	02030000 	andeq	r0, r3, #0
    1bbc:	0000fa07 	andeq	pc, r0, r7, lsl #20
    1bc0:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1bc4:	00000178 	andeq	r0, r0, r8, ror r1
    1bc8:	73070803 	movwvc	r0, #30723	; 0x7803
    1bcc:	03000001 	movweq	r0, #1
    1bd0:	01a20704 			; <UNDEFINED> instruction: 0x01a20704
    1bd4:	01030000 	mrseq	r0, (UNDEF: 3)
    1bd8:	0000df08 	andeq	sp, r0, r8, lsl #30
    1bdc:	05430400 	strbeq	r0, [r3, #-1024]	; 0x400
    1be0:	03010000 	movweq	r0, #4096	; 0x1000
    1be4:	00000025 	andeq	r0, r0, r5, lsr #32
    1be8:	00008eac 	andeq	r8, r0, ip, lsr #29
    1bec:	00000014 	andeq	r0, r0, r4, lsl r0
    1bf0:	00b09c01 	adcseq	r9, r0, r1, lsl #24
    1bf4:	63050000 	movwvs	r0, #20480	; 0x5000
    1bf8:	25030100 	strcs	r0, [r3, #-256]	; 0x100
    1bfc:	e5000000 	str	r0, [r0, #-0]
    1c00:	0600000b 	streq	r0, [r0], -fp
    1c04:	00008eb8 			; <UNDEFINED> instruction: 0x00008eb8
    1c08:	000000d6 	ldrdeq	r0, [r0], -r6
    1c0c:	02500107 	subseq	r0, r0, #-1073741823	; 0xc0000001
    1c10:	00000074 	andeq	r0, r0, r4, ror r0
    1c14:	00002508 	andeq	r2, r0, r8, lsl #10
    1c18:	0000bf00 	andeq	fp, r0, r0, lsl #30
    1c1c:	00250900 	eoreq	r0, r5, r0, lsl #18
    1c20:	0a000000 	beq	1c28 <_start-0x63d8>
    1c24:	00000336 	andeq	r0, r0, r6, lsr r3
    1c28:	00d00601 	sbcseq	r0, r0, r1, lsl #12
    1c2c:	03050000 	movweq	r0, #20480	; 0x5000
    1c30:	00008edc 	ldrdeq	r8, [r0], -ip
    1c34:	00b0040b 	adcseq	r0, r0, fp, lsl #8
    1c38:	390c0000 	stmdbcc	ip, {}	; <UNPREDICTABLE>
    1c3c:	02000005 	andeq	r0, r0, #5
    1c40:	002c093a 	eoreq	r0, ip, sl, lsr r9
    1c44:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <__bss_end__+0x2b6a4c>
  18:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  1c:	24030000 	strcs	r0, [r3], #-0
  20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  24:	000e030b 	andeq	r0, lr, fp, lsl #6
  28:	00160400 	andseq	r0, r6, r0, lsl #8
  2c:	0b3a0e03 	bleq	e83840 <__bss_end__+0xe7a1e0>
  30:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  34:	0f050000 	svceq	0x00050000
  38:	000b0b00 	andeq	r0, fp, r0, lsl #22
  3c:	000f0600 	andeq	r0, pc, r0, lsl #12
  40:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  44:	26070000 	strcs	r0, [r7], -r0
  48:	00134900 	andseq	r4, r3, r0, lsl #18
  4c:	01010800 	tsteq	r1, r0, lsl #16
  50:	13011349 	movwne	r1, #4937	; 0x1349
  54:	21090000 	mrscs	r0, (UNDEF: 9)
  58:	2f134900 	svccs	0x00134900
  5c:	0a00000b 	beq	90 <_start-0x7f70>
  60:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
  64:	0b3a050b 	bleq	e81498 <__bss_end__+0xe77e38>
  68:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  6c:	0d0b0000 	stceq	0, cr0, [fp, #-0]
  70:	3a0e0300 	bcc	380c78 <__bss_end__+0x377618>
  74:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  78:	000b3813 	andeq	r3, fp, r3, lsl r8
  7c:	000d0c00 	andeq	r0, sp, r0, lsl #24
  80:	0b3a0803 	bleq	e82094 <__bss_end__+0xe78a34>
  84:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  88:	00000b38 	andeq	r0, r0, r8, lsr fp
  8c:	4900210d 	stmdbmi	r0, {r0, r2, r3, r8, sp}
  90:	00052f13 	andeq	r2, r5, r3, lsl pc
  94:	012e0e00 	teqeq	lr, r0, lsl #28
  98:	0b3a0e03 	bleq	e838ac <__bss_end__+0xe7a24c>
  9c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  a0:	06120111 			; <UNDEFINED> instruction: 0x06120111
  a4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  a8:	00130119 	andseq	r0, r3, r9, lsl r1
  ac:	00050f00 	andeq	r0, r5, r0, lsl #30
  b0:	0b3a0803 	bleq	e820c4 <__bss_end__+0xe78a64>
  b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  b8:	00001702 	andeq	r1, r0, r2, lsl #14
  bc:	03003410 	movweq	r3, #1040	; 0x410
  c0:	3b0b3a08 	blcc	2ce8e8 <__bss_end__+0x2c5288>
  c4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  c8:	11000017 	tstne	r0, r7, lsl r0
  cc:	00018289 	andeq	r8, r1, r9, lsl #5
  d0:	13310111 	teqne	r1, #1073741828	; 0x40000004
  d4:	89120000 	ldmdbhi	r2, {}	; <UNPREDICTABLE>
  d8:	11010182 	smlabbne	r1, r2, r1, r0
  dc:	01133101 	tsteq	r3, r1, lsl #2
  e0:	13000013 	movwne	r0, #19
  e4:	0001828a 	andeq	r8, r1, sl, lsl #5
  e8:	42911802 	addsmi	r1, r1, #131072	; 0x20000
  ec:	14000018 	strne	r0, [r0], #-24
  f0:	01018289 	smlabbeq	r1, r9, r2, r8
  f4:	13310111 	teqne	r1, #1073741828	; 0x40000004
  f8:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
  fc:	03193f01 	tsteq	r9, #1, 30
 100:	3b0b3a0e 	blcc	2ce940 <__bss_end__+0x2c52e0>
 104:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 108:	97184006 	ldrls	r4, [r8, -r6]
 10c:	13011942 	movwne	r1, #6466	; 0x1942
 110:	34160000 	ldrcc	r0, [r6], #-0
 114:	3a080300 	bcc	200d1c <__bss_end__+0x1f76bc>
 118:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 11c:	000b1c13 	andeq	r1, fp, r3, lsl ip
 120:	00341700 	eorseq	r1, r4, r0, lsl #14
 124:	13490e03 	movtne	r0, #40451	; 0x9e03
 128:	18021934 	stmdane	r2, {r2, r4, r5, r8, fp, ip}
 12c:	0b180000 	bleq	600134 <__bss_end__+0x5f6ad4>
 130:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 134:	00130106 	andseq	r0, r3, r6, lsl #2
 138:	010b1900 	tsteq	fp, r0, lsl #18
 13c:	00001755 	andeq	r1, r0, r5, asr r7
 140:	0300341a 	movweq	r3, #1050	; 0x41a
 144:	3b0b3a0e 	blcc	2ce984 <__bss_end__+0x2c5324>
 148:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 14c:	1b000018 	blne	1b4 <_start-0x7e4c>
 150:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 154:	0b3a0e03 	bleq	e83968 <__bss_end__+0xe7a308>
 158:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 15c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 160:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
 164:	03193f01 	tsteq	r9, #1, 30
 168:	3b0b3a0e 	blcc	2ce9a8 <__bss_end__+0x2c5348>
 16c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 170:	01193c13 	tsteq	r9, r3, lsl ip
 174:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
 178:	13490005 	movtne	r0, #36869	; 0x9005
 17c:	181e0000 	ldmdane	lr, {}	; <UNPREDICTABLE>
 180:	1f000000 	svcne	0x00000000
 184:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 188:	0b3a0e03 	bleq	e8399c <__bss_end__+0xe7a33c>
 18c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 190:	1301193c 	movwne	r1, #6460	; 0x193c
 194:	15200000 	strne	r0, [r0, #-0]!
 198:	01192701 	tsteq	r9, r1, lsl #14
 19c:	21000013 	tstcs	r0, r3, lsl r0
 1a0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 1a4:	0b3a0e03 	bleq	e839b8 <__bss_end__+0xe7a358>
 1a8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1ac:	0000193c 	andeq	r1, r0, ip, lsr r9
 1b0:	01110100 	tsteq	r1, r0, lsl #2
 1b4:	0b130e25 	bleq	4c3a50 <__bss_end__+0x4ba3f0>
 1b8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 1bc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1c0:	00001710 	andeq	r1, r0, r0, lsl r7
 1c4:	0b002402 	bleq	91d4 <__FUNCTION__.4141+0x9c>
 1c8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 1cc:	03000008 	movweq	r0, #8
 1d0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 1d4:	0b3b0b3a 	bleq	ec2ec4 <__bss_end__+0xeb9864>
 1d8:	00001349 	andeq	r1, r0, r9, asr #6
 1dc:	0b002404 	bleq	91f4 <__FUNCTION__.4141+0xbc>
 1e0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 1e4:	0500000e 	streq	r0, [r0, #-14]
 1e8:	0b0b000f 	bleq	2c022c <__bss_end__+0x2b6bcc>
 1ec:	0f060000 	svceq	0x00060000
 1f0:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 1f4:	07000013 	smladeq	r0, r3, r0, r0
 1f8:	13490026 	movtne	r0, #36902	; 0x9026
 1fc:	13080000 	movwne	r0, #32768	; 0x8000
 200:	0b0e0301 	bleq	380e0c <__bss_end__+0x3777ac>
 204:	3b0b3a05 	blcc	2cea20 <__bss_end__+0x2c53c0>
 208:	0013010b 	andseq	r0, r3, fp, lsl #2
 20c:	000d0900 	andeq	r0, sp, r0, lsl #18
 210:	0b3a0e03 	bleq	e83a24 <__bss_end__+0xe7a3c4>
 214:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 218:	00000b38 	andeq	r0, r0, r8, lsr fp
 21c:	03000d0a 	movweq	r0, #3338	; 0xd0a
 220:	3b0b3a08 	blcc	2cea48 <__bss_end__+0x2c53e8>
 224:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 228:	0b00000b 	bleq	25c <_start-0x7da4>
 22c:	13490101 	movtne	r0, #37121	; 0x9101
 230:	00001301 	andeq	r1, r0, r1, lsl #6
 234:	4900210c 	stmdbmi	r0, {r2, r3, r8, sp}
 238:	000b2f13 	andeq	r2, fp, r3, lsl pc
 23c:	00210d00 	eoreq	r0, r1, r0, lsl #26
 240:	052f1349 	streq	r1, [pc, #-841]!	; fffffeff <__bss_end__+0xffff689f>
 244:	130e0000 	movwne	r0, #57344	; 0xe000
 248:	0b080301 	bleq	200e54 <__bss_end__+0x1f77f4>
 24c:	3b0b3a0b 	blcc	2cea80 <__bss_end__+0x2c5420>
 250:	0013010b 	andseq	r0, r3, fp, lsl #2
 254:	00160f00 	andseq	r0, r6, r0, lsl #30
 258:	0b3a0803 	bleq	e8226c <__bss_end__+0xe78c0c>
 25c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 260:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 264:	3a0e0301 	bcc	380e70 <__bss_end__+0x377810>
 268:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 26c:	11134919 	tstne	r3, r9, lsl r9
 270:	40061201 	andmi	r1, r6, r1, lsl #4
 274:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 278:	00001301 	andeq	r1, r0, r1, lsl #6
 27c:	03000511 	movweq	r0, #1297	; 0x511
 280:	3b0b3a08 	blcc	2ceaa8 <__bss_end__+0x2c5448>
 284:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 288:	12000017 	andne	r0, r0, #23
 28c:	0e03012e 	adfeqsp	f0, f3, #0.5
 290:	0b3b0b3a 	bleq	ec2f80 <__bss_end__+0xeb9920>
 294:	01111927 	tsteq	r1, r7, lsr #18
 298:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 29c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 2a0:	13000013 	movwne	r0, #19
 2a4:	08030005 	stmdaeq	r3, {r0, r2}
 2a8:	0b3b0b3a 	bleq	ec2f98 <__bss_end__+0xeb9938>
 2ac:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 2b0:	34140000 	ldrcc	r0, [r4], #-0
 2b4:	490e0300 	stmdbmi	lr, {r8, r9}
 2b8:	02193413 	andseq	r3, r9, #318767104	; 0x13000000
 2bc:	15000018 	strne	r0, [r0, #-24]
 2c0:	08030034 	stmdaeq	r3, {r2, r4, r5}
 2c4:	0b3b0b3a 	bleq	ec2fb4 <__bss_end__+0xeb9954>
 2c8:	17021349 	strne	r1, [r2, -r9, asr #6]
 2cc:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
 2d0:	11010182 	smlabbne	r1, r2, r1, r0
 2d4:	01133101 	tsteq	r3, r1, lsl #2
 2d8:	17000013 	smladne	r0, r3, r0, r0
 2dc:	0001828a 	andeq	r8, r1, sl, lsl #5
 2e0:	42911802 	addsmi	r1, r1, #131072	; 0x20000
 2e4:	18000018 	stmdane	r0, {r3, r4}
 2e8:	00018289 	andeq	r8, r1, r9, lsl #5
 2ec:	13310111 	teqne	r1, #1073741828	; 0x40000004
 2f0:	34190000 	ldrcc	r0, [r9], #-0
 2f4:	3a0e0300 	bcc	380efc <__bss_end__+0x37789c>
 2f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2fc:	00180213 	andseq	r0, r8, r3, lsl r2
 300:	82891a00 	addhi	r1, r9, #0, 20
 304:	01110101 	tsteq	r1, r1, lsl #2
 308:	00001331 	andeq	r1, r0, r1, lsr r3
 30c:	3f002e1b 	svccc	0x00002e1b
 310:	3a0e0319 	bcc	380f7c <__bss_end__+0x37791c>
 314:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 318:	11134919 	tstne	r3, r9, lsl r9
 31c:	40061201 	andmi	r1, r6, r1, lsl #4
 320:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 324:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
 328:	03193f01 	tsteq	r9, #1, 30
 32c:	3b0b3a0e 	blcc	2ceb6c <__bss_end__+0x2c550c>
 330:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 334:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 338:	97184006 	ldrls	r4, [r8, -r6]
 33c:	13011942 	movwne	r1, #6466	; 0x1942
 340:	051d0000 	ldreq	r0, [sp, #-0]
 344:	3a0e0300 	bcc	380f4c <__bss_end__+0x3778ec>
 348:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 34c:	00170213 	andseq	r0, r7, r3, lsl r2
 350:	01151e00 	tsteq	r5, r0, lsl #28
 354:	13011927 	movwne	r1, #6439	; 0x1927
 358:	051f0000 	ldreq	r0, [pc, #-0]	; 360 <_start-0x7ca0>
 35c:	00134900 	andseq	r4, r3, r0, lsl #18
 360:	012e2000 	teqeq	lr, r0
 364:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 368:	0b3b0b3a 	bleq	ec3058 <__bss_end__+0xeb99f8>
 36c:	01111927 	tsteq	r1, r7, lsr #18
 370:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 374:	01194297 			; <UNDEFINED> instruction: 0x01194297
 378:	21000013 	tstcs	r0, r3, lsl r0
 37c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 380:	0b3b0b3a 	bleq	ec3070 <__bss_end__+0xeb9a10>
 384:	17021349 	strne	r1, [r2, -r9, asr #6]
 388:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
 38c:	03193f01 	tsteq	r9, #1, 30
 390:	3b0b3a0e 	blcc	2cebd0 <__bss_end__+0x2c5570>
 394:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 398:	01193c13 	tsteq	r9, r3, lsl ip
 39c:	23000013 	movwcs	r0, #19
 3a0:	00000018 	andeq	r0, r0, r8, lsl r0
 3a4:	3f002e24 	svccc	0x00002e24
 3a8:	3a0e0319 	bcc	381014 <__bss_end__+0x3779b4>
 3ac:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 3b0:	00193c19 	andseq	r3, r9, r9, lsl ip
 3b4:	012e2500 	teqeq	lr, r0, lsl #10
 3b8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 3bc:	0b3b0b3a 	bleq	ec30ac <__bss_end__+0xeb9a4c>
 3c0:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 3c4:	00001301 	andeq	r1, r0, r1, lsl #6
 3c8:	01110100 	tsteq	r1, r0, lsl #2
 3cc:	0b130e25 	bleq	4c3c68 <__bss_end__+0x4ba608>
 3d0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 3d4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3d8:	00001710 	andeq	r1, r0, r0, lsl r7
 3dc:	0b002402 	bleq	93ec <buf.4133+0x198>
 3e0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 3e4:	0300000e 	movweq	r0, #14
 3e8:	0b0b0024 	bleq	2c0480 <__bss_end__+0x2b6e20>
 3ec:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 3f0:	0f040000 	svceq	0x00040000
 3f4:	000b0b00 	andeq	r0, fp, r0, lsl #22
 3f8:	000f0500 	andeq	r0, pc, r0, lsl #10
 3fc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 400:	16060000 	strne	r0, [r6], -r0
 404:	3a0e0300 	bcc	38100c <__bss_end__+0x3779ac>
 408:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 40c:	07000013 	smladeq	r0, r3, r0, r0
 410:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 414:	0b3a0e03 	bleq	e83c28 <__bss_end__+0xe7a5c8>
 418:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 41c:	01111349 	tsteq	r1, r9, asr #6
 420:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 424:	00194297 	mulseq	r9, r7, r2
 428:	00050800 	andeq	r0, r5, r0, lsl #16
 42c:	0b3a0803 	bleq	e82440 <__bss_end__+0xe78de0>
 430:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 434:	00001802 	andeq	r1, r0, r2, lsl #16
 438:	03000509 	movweq	r0, #1289	; 0x509
 43c:	3b0b3a08 	blcc	2cec64 <__bss_end__+0x2c5604>
 440:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 444:	0a000017 	beq	4a8 <_start-0x7b58>
 448:	08030034 	stmdaeq	r3, {r2, r4, r5}
 44c:	0b3b0b3a 	bleq	ec313c <__bss_end__+0xeb9adc>
 450:	17021349 	strne	r1, [r2, -r9, asr #6]
 454:	340b0000 	strcc	r0, [fp], #-0
 458:	3a080300 	bcc	201060 <__bss_end__+0x1f7a00>
 45c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 460:	00180213 	andseq	r0, r8, r3, lsl r2
 464:	11010000 	mrsne	r0, (UNDEF: 1)
 468:	130e2501 	movwne	r2, #58625	; 0xe501
 46c:	1b0e030b 	blne	3810a0 <__bss_end__+0x377a40>
 470:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 474:	00171006 	andseq	r1, r7, r6
 478:	00160200 	andseq	r0, r6, r0, lsl #4
 47c:	0b3a0e03 	bleq	e83c90 <__bss_end__+0xe7a630>
 480:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 484:	13030000 	movwne	r0, #12288	; 0x3000
 488:	0b0e0301 	bleq	381094 <__bss_end__+0x377a34>
 48c:	3b0b3a0b 	blcc	2cecc0 <__bss_end__+0x2c5660>
 490:	0013010b 	andseq	r0, r3, fp, lsl #2
 494:	000d0400 	andeq	r0, sp, r0, lsl #8
 498:	13490e03 	movtne	r0, #40451	; 0x9e03
 49c:	19340b38 	ldmdbne	r4!, {r3, r4, r5, r8, r9, fp}
 4a0:	0f050000 	svceq	0x00050000
 4a4:	000b0b00 	andeq	r0, fp, r0, lsl #22
 4a8:	00240600 	eoreq	r0, r4, r0, lsl #12
 4ac:	0b3e0b0b 	bleq	f830e0 <__bss_end__+0xf79a80>
 4b0:	00000803 	andeq	r0, r0, r3, lsl #16
 4b4:	0b002407 	bleq	94d8 <buf.4133+0x284>
 4b8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 4bc:	0800000e 	stmdaeq	r0, {r1, r2, r3}
 4c0:	0b0b000f 	bleq	2c0504 <__bss_end__+0x2b6ea4>
 4c4:	00001349 	andeq	r1, r0, r9, asr #6
 4c8:	49002609 	stmdbmi	r0, {r0, r3, r9, sl, sp}
 4cc:	0a000013 	beq	520 <_start-0x7ae0>
 4d0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 4d4:	0b3a0e03 	bleq	e83ce8 <__bss_end__+0xe7a688>
 4d8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 4dc:	01111349 	tsteq	r1, r9, asr #6
 4e0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4e4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 4e8:	0b000013 	bleq	53c <_start-0x7ac4>
 4ec:	08030005 	stmdaeq	r3, {r0, r2}
 4f0:	0b3b0b3a 	bleq	ec31e0 <__bss_end__+0xeb9b80>
 4f4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 4f8:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
 4fc:	0d000000 	stceq	0, cr0, [r0, #-0]
 500:	08030034 	stmdaeq	r3, {r2, r4, r5}
 504:	0b3b0b3a 	bleq	ec31f4 <__bss_end__+0xeb9b94>
 508:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 50c:	340e0000 	strcc	r0, [lr], #-0
 510:	3a0e0300 	bcc	381118 <__bss_end__+0x377ab8>
 514:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 518:	00180213 	andseq	r0, r8, r3, lsl r2
 51c:	00340f00 	eorseq	r0, r4, r0, lsl #30
 520:	0b3a0803 	bleq	e82534 <__bss_end__+0xe78ed4>
 524:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 528:	00001702 	andeq	r1, r0, r2, lsl #14
 52c:	01828910 	orreq	r8, r2, r0, lsl r9
 530:	31011101 	tstcc	r1, r1, lsl #2
 534:	00130113 	andseq	r0, r3, r3, lsl r1
 538:	828a1100 	addhi	r1, sl, #0, 2
 53c:	18020001 	stmdane	r2, {r0}
 540:	00184291 	mulseq	r8, r1, r2
 544:	82891200 	addhi	r1, r9, #0, 4
 548:	01110101 	tsteq	r1, r1, lsl #2
 54c:	01130000 	tsteq	r3, r0
 550:	01134901 	tsteq	r3, r1, lsl #18
 554:	14000013 	strne	r0, [r0], #-19
 558:	13490021 	movtne	r0, #36897	; 0x9021
 55c:	0000052f 	andeq	r0, r0, pc, lsr #10
 560:	27011515 	smladcs	r1, r5, r5, r1
 564:	01134919 	tsteq	r3, r9, lsl r9
 568:	16000013 			; <UNDEFINED> instruction: 0x16000013
 56c:	13490005 	movtne	r0, #36869	; 0x9005
 570:	34170000 	ldrcc	r0, [r7], #-0
 574:	3a0e0300 	bcc	38117c <__bss_end__+0x377b1c>
 578:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 57c:	3c193f13 	ldccc	15, cr3, [r9], {19}
 580:	18000019 	stmdane	r0, {r0, r3, r4}
 584:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 588:	0b3a0e03 	bleq	e83d9c <__bss_end__+0xe7a73c>
 58c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 590:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 594:	01000000 	mrseq	r0, (UNDEF: 0)
 598:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 59c:	0e030b13 	vmoveq.32	d3[0], r0
 5a0:	01110e1b 	tsteq	r1, fp, lsl lr
 5a4:	17100612 			; <UNDEFINED> instruction: 0x17100612
 5a8:	24020000 	strcs	r0, [r2], #-0
 5ac:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 5b0:	0008030b 	andeq	r0, r8, fp, lsl #6
 5b4:	00240300 	eoreq	r0, r4, r0, lsl #6
 5b8:	0b3e0b0b 	bleq	f831ec <__bss_end__+0xf79b8c>
 5bc:	00000e03 	andeq	r0, r0, r3, lsl #28
 5c0:	0b000f04 	bleq	41d8 <_start-0x3e28>
 5c4:	0013490b 	andseq	r4, r3, fp, lsl #18
 5c8:	00260500 	eoreq	r0, r6, r0, lsl #10
 5cc:	00001349 	andeq	r1, r0, r9, asr #6
 5d0:	3f012e06 	svccc	0x00012e06
 5d4:	3a0e0319 	bcc	381240 <__bss_end__+0x377be0>
 5d8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 5dc:	11134919 	tstne	r3, r9, lsl r9
 5e0:	40061201 	andmi	r1, r6, r1, lsl #4
 5e4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 5e8:	00001301 	andeq	r1, r0, r1, lsl #6
 5ec:	03000507 	movweq	r0, #1287	; 0x507
 5f0:	3b0b3a08 	blcc	2cee18 <__bss_end__+0x2c57b8>
 5f4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 5f8:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
 5fc:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 600:	13011349 	movwne	r1, #4937	; 0x1349
 604:	05090000 	streq	r0, [r9, #-0]
 608:	00134900 	andseq	r4, r3, r0, lsl #18
 60c:	00340a00 	eorseq	r0, r4, r0, lsl #20
 610:	0b3a0e03 	bleq	e83e24 <__bss_end__+0xe7a7c4>
 614:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 618:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 61c:	340b0000 	strcc	r0, [fp], #-0
 620:	3a0e0300 	bcc	381228 <__bss_end__+0x377bc8>
 624:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 628:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 62c:	00000018 	andeq	r0, r0, r8, lsl r0
 630:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 634:	030b130e 	movweq	r1, #45838	; 0xb30e
 638:	110e1b0e 	tstne	lr, lr, lsl #22
 63c:	10061201 	andne	r1, r6, r1, lsl #4
 640:	02000017 	andeq	r0, r0, #23
 644:	0b0b0024 	bleq	2c06dc <__bss_end__+0x2b707c>
 648:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 64c:	24030000 	strcs	r0, [r3], #-0
 650:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 654:	000e030b 	andeq	r0, lr, fp, lsl #6
 658:	000f0400 	andeq	r0, pc, r0, lsl #8
 65c:	00000b0b 	andeq	r0, r0, fp, lsl #22
 660:	0b000f05 	bleq	427c <_start-0x3d84>
 664:	0013490b 	andseq	r4, r3, fp, lsl #18
 668:	00260600 	eoreq	r0, r6, r0, lsl #12
 66c:	00001349 	andeq	r1, r0, r9, asr #6
 670:	03001607 	movweq	r1, #1543	; 0x607
 674:	3b0b3a0e 	blcc	2ceeb4 <__bss_end__+0x2c5854>
 678:	0013490b 	andseq	r4, r3, fp, lsl #18
 67c:	01130800 	tsteq	r3, r0, lsl #16
 680:	0b0b0e03 	bleq	2c3e94 <__bss_end__+0x2ba834>
 684:	0b3b0b3a 	bleq	ec3374 <__bss_end__+0xeb9d14>
 688:	00001301 	andeq	r1, r0, r1, lsl #6
 68c:	03000d09 	movweq	r0, #3337	; 0xd09
 690:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
 694:	0019340b 	andseq	r3, r9, fp, lsl #8
 698:	012e0a00 	teqeq	lr, r0, lsl #20
 69c:	0b3a0e03 	bleq	e83eb0 <__bss_end__+0xe7a850>
 6a0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 6a4:	01111349 	tsteq	r1, r9, asr #6
 6a8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 6ac:	01194297 			; <UNDEFINED> instruction: 0x01194297
 6b0:	0b000013 	bleq	704 <_start-0x78fc>
 6b4:	08030005 	stmdaeq	r3, {r0, r2}
 6b8:	0b3b0b3a 	bleq	ec33a8 <__bss_end__+0xeb9d48>
 6bc:	17021349 	strne	r1, [r2, -r9, asr #6]
 6c0:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
 6c4:	3a080301 	bcc	2012d0 <__bss_end__+0x1f7c70>
 6c8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 6cc:	11134919 	tstne	r3, r9, lsl r9
 6d0:	40061201 	andmi	r1, r6, r1, lsl #4
 6d4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 6d8:	00001301 	andeq	r1, r0, r1, lsl #6
 6dc:	0300050d 	movweq	r0, #1293	; 0x50d
 6e0:	3b0b3a0e 	blcc	2cef20 <__bss_end__+0x2c58c0>
 6e4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 6e8:	0e000017 	mcreq	0, 0, r0, cr0, cr7, {0}
 6ec:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 6f0:	0b3b0b3a 	bleq	ec33e0 <__bss_end__+0xeb9d80>
 6f4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 6f8:	340f0000 	strcc	r0, [pc], #-0	; 700 <_start-0x7900>
 6fc:	3a080300 	bcc	201304 <__bss_end__+0x1f7ca4>
 700:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 704:	00180213 	andseq	r0, r8, r3, lsl r2
 708:	00341000 	eorseq	r1, r4, r0
 70c:	0b3a0803 	bleq	e82720 <__bss_end__+0xe790c0>
 710:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 714:	00001702 	andeq	r1, r0, r2, lsl #14
 718:	03003411 	movweq	r3, #1041	; 0x411
 71c:	3413490e 	ldrcc	r4, [r3], #-2318	; 0x90e
 720:	00180219 	andseq	r0, r8, r9, lsl r2
 724:	010b1200 	mrseq	r1, R11_fiq
 728:	06120111 			; <UNDEFINED> instruction: 0x06120111
 72c:	00001301 	andeq	r1, r0, r1, lsl #6
 730:	03003413 	movweq	r3, #1043	; 0x413
 734:	3b0b3a0e 	blcc	2cef74 <__bss_end__+0x2c5914>
 738:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 73c:	14000017 	strne	r0, [r0], #-23
 740:	01018289 	smlabbeq	r1, r9, r2, r8
 744:	13310111 	teqne	r1, #1073741828	; 0x40000004
 748:	00001301 	andeq	r1, r0, r1, lsl #6
 74c:	01828a15 	orreq	r8, r2, r5, lsl sl
 750:	91180200 	tstls	r8, r0, lsl #4
 754:	00001842 	andeq	r1, r0, r2, asr #16
 758:	01828916 	orreq	r8, r2, r6, lsl r9
 75c:	31011100 	mrscc	r1, (UNDEF: 17)
 760:	17000013 	smladne	r0, r3, r0, r0
 764:	01018289 	smlabbeq	r1, r9, r2, r8
 768:	13310111 	teqne	r1, #1073741828	; 0x40000004
 76c:	01180000 	tsteq	r8, r0
 770:	01134901 	tsteq	r3, r1, lsl #18
 774:	19000013 	stmdbne	r0, {r0, r1, r4}
 778:	13490021 	movtne	r0, #36897	; 0x9021
 77c:	00000b2f 	andeq	r0, r0, pc, lsr #22
 780:	3f012e1a 	svccc	0x00012e1a
 784:	3a0e0319 	bcc	3813f0 <__bss_end__+0x377d90>
 788:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 78c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 790:	97184006 	ldrls	r4, [r8, -r6]
 794:	13011942 	movwne	r1, #6466	; 0x1942
 798:	151b0000 	ldrne	r0, [fp, #-0]
 79c:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
 7a0:	00130113 	andseq	r0, r3, r3, lsl r1
 7a4:	00051c00 	andeq	r1, r5, r0, lsl #24
 7a8:	00001349 	andeq	r1, r0, r9, asr #6
 7ac:	3f012e1d 	svccc	0x00012e1d
 7b0:	3a0e0319 	bcc	38141c <__bss_end__+0x377dbc>
 7b4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 7b8:	11134919 	tstne	r3, r9, lsl r9
 7bc:	40061201 	andmi	r1, r6, r1, lsl #4
 7c0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 7c4:	00001301 	andeq	r1, r0, r1, lsl #6
 7c8:	11010b1e 	tstne	r1, lr, lsl fp
 7cc:	00061201 	andeq	r1, r6, r1, lsl #4
 7d0:	00341f00 	eorseq	r1, r4, r0, lsl #30
 7d4:	0b3a0e03 	bleq	e83fe8 <__bss_end__+0xe7a988>
 7d8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 7dc:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 7e0:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
 7e4:	03193f01 	tsteq	r9, #1, 30
 7e8:	3b0b3a0e 	blcc	2cf028 <__bss_end__+0x2c59c8>
 7ec:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 7f0:	01193c13 	tsteq	r9, r3, lsl ip
 7f4:	21000013 	tstcs	r0, r3, lsl r0
 7f8:	00000018 	andeq	r0, r0, r8, lsl r0
 7fc:	3f002e22 	svccc	0x00002e22
 800:	3a0e0319 	bcc	38146c <__bss_end__+0x377e0c>
 804:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 808:	00193c19 	andseq	r3, r9, r9, lsl ip
 80c:	11010000 	mrsne	r0, (UNDEF: 1)
 810:	130e2501 	movwne	r2, #58625	; 0xe501
 814:	1b0e030b 	blne	381448 <__bss_end__+0x377de8>
 818:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 81c:	00171006 	andseq	r1, r7, r6
 820:	00240200 	eoreq	r0, r4, r0, lsl #4
 824:	0b3e0b0b 	bleq	f83458 <__bss_end__+0xf79df8>
 828:	00000803 	andeq	r0, r0, r3, lsl #16
 82c:	0b002403 	bleq	9840 <__bss_end__+0x1e0>
 830:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 834:	0400000e 	streq	r0, [r0], #-14
 838:	0b0b000f 	bleq	2c087c <__bss_end__+0x2b721c>
 83c:	00001349 	andeq	r1, r0, r9, asr #6
 840:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
 844:	06000013 			; <UNDEFINED> instruction: 0x06000013
 848:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 84c:	0b3a0e03 	bleq	e84060 <__bss_end__+0xe7aa00>
 850:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 854:	06120111 			; <UNDEFINED> instruction: 0x06120111
 858:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 85c:	00130119 	andseq	r0, r3, r9, lsl r1
 860:	82890700 	addhi	r0, r9, #0, 14
 864:	01110101 	tsteq	r1, r1, lsl #2
 868:	00001301 	andeq	r1, r0, r1, lsl #6
 86c:	01828a08 	orreq	r8, r2, r8, lsl #20
 870:	91180200 	tstls	r8, r0, lsl #4
 874:	00001842 	andeq	r1, r0, r2, asr #16
 878:	01828909 	orreq	r8, r2, r9, lsl #18
 87c:	31011101 	tstcc	r1, r1, lsl #2
 880:	00130113 	andseq	r0, r3, r3, lsl r1
 884:	82890a00 	addhi	r0, r9, #0, 20
 888:	01110001 	tsteq	r1, r1
 88c:	00001331 	andeq	r1, r0, r1, lsr r3
 890:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
 894:	01134919 	tsteq	r3, r9, lsl r9
 898:	0c000013 	stceq	0, cr0, [r0], {19}
 89c:	13490005 	movtne	r0, #36869	; 0x9005
 8a0:	340d0000 	strcc	r0, [sp], #-0
 8a4:	3a0e0300 	bcc	3814ac <__bss_end__+0x377e4c>
 8a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 8ac:	3c193f13 	ldccc	15, cr3, [r9], {19}
 8b0:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
 8b4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 8b8:	0b3a0e03 	bleq	e840cc <__bss_end__+0xe7aa6c>
 8bc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 8c0:	1301193c 	movwne	r1, #6460	; 0x193c
 8c4:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 8c8:	03193f00 	tsteq	r9, #0, 30
 8cc:	3b0b3a0e 	blcc	2cf10c <__bss_end__+0x2c5aac>
 8d0:	3c19270b 	ldccc	7, cr2, [r9], {11}
 8d4:	00000019 	andeq	r0, r0, r9, lsl r0
 8d8:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 8dc:	030b130e 	movweq	r1, #45838	; 0xb30e
 8e0:	110e1b0e 	tstne	lr, lr, lsl #22
 8e4:	10061201 	andne	r1, r6, r1, lsl #4
 8e8:	02000017 	andeq	r0, r0, #23
 8ec:	0b0b0024 	bleq	2c0984 <__bss_end__+0x2b7324>
 8f0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 8f4:	24030000 	strcs	r0, [r3], #-0
 8f8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 8fc:	000e030b 	andeq	r0, lr, fp, lsl #6
 900:	012e0400 	teqeq	lr, r0, lsl #8
 904:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 908:	0b3b0b3a 	bleq	ec35f8 <__bss_end__+0xeb9f98>
 90c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 910:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 914:	00130119 	andseq	r0, r3, r9, lsl r1
 918:	00340500 	eorseq	r0, r4, r0, lsl #10
 91c:	0b3a0e03 	bleq	e84130 <__bss_end__+0xe7aad0>
 920:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 924:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 928:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
 92c:	03193f01 	tsteq	r9, #1, 30
 930:	3b0b3a0e 	blcc	2cf170 <__bss_end__+0x2c5b10>
 934:	01193c0b 	tsteq	r9, fp, lsl #24
 938:	07000013 	smladeq	r0, r3, r0, r0
 93c:	00000018 	andeq	r0, r0, r8, lsl r0
 940:	03003408 	movweq	r3, #1032	; 0x408
 944:	3b0b3a08 	blcc	2cf16c <__bss_end__+0x2c5b0c>
 948:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 94c:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
 950:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 954:	0b3b0b3a 	bleq	ec3644 <__bss_end__+0xeb9fe4>
 958:	00001349 	andeq	r1, r0, r9, asr #6
 95c:	0182890a 	orreq	r8, r2, sl, lsl #18
 960:	31011100 	mrscc	r1, (UNDEF: 17)
 964:	0b000013 	bleq	9b8 <_start-0x7648>
 968:	0b0b000f 	bleq	2c09ac <__bss_end__+0x2b734c>
 96c:	00001349 	andeq	r1, r0, r9, asr #6
 970:	3f002e0c 	svccc	0x00002e0c
 974:	3a0e0319 	bcc	3815e0 <__bss_end__+0x377f80>
 978:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 97c:	00193c19 	andseq	r3, r9, r9, lsl ip
 980:	11010000 	mrsne	r0, (UNDEF: 1)
 984:	130e2501 	movwne	r2, #58625	; 0xe501
 988:	1b0e030b 	blne	3815bc <__bss_end__+0x377f5c>
 98c:	1117550e 	tstne	r7, lr, lsl #10
 990:	00171001 	andseq	r1, r7, r1
 994:	00240200 	eoreq	r0, r4, r0, lsl #4
 998:	0b3e0b0b 	bleq	f835cc <__bss_end__+0xf79f6c>
 99c:	00000803 	andeq	r0, r0, r3, lsl #16
 9a0:	0b002403 	bleq	99b4 <__bss_end__+0x354>
 9a4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 9a8:	0400000e 	streq	r0, [r0], #-14
 9ac:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 9b0:	0b3a0e03 	bleq	e841c4 <__bss_end__+0xe7ab64>
 9b4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 9b8:	01111349 	tsteq	r1, r9, asr #6
 9bc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 9c0:	01194297 			; <UNDEFINED> instruction: 0x01194297
 9c4:	05000013 	streq	r0, [r0, #-19]
 9c8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 9cc:	0b3b0b3a 	bleq	ec36bc <__bss_end__+0xeba05c>
 9d0:	17021349 	strne	r1, [r2, -r9, asr #6]
 9d4:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
 9d8:	03193f01 	tsteq	r9, #1, 30
 9dc:	3b0b3a0e 	blcc	2cf21c <__bss_end__+0x2c5bbc>
 9e0:	1119270b 	tstne	r9, fp, lsl #14
 9e4:	40061201 	andmi	r1, r6, r1, lsl #4
 9e8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 9ec:	00001301 	andeq	r1, r0, r1, lsl #6
 9f0:	03003407 	movweq	r3, #1031	; 0x407
 9f4:	3b0b3a0e 	blcc	2cf234 <__bss_end__+0x2c5bd4>
 9f8:	1c13490b 	ldcne	9, cr4, [r3], {11}
 9fc:	08000006 	stmdaeq	r0, {r1, r2}
 a00:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 a04:	0b3b0b3a 	bleq	ec36f4 <__bss_end__+0xeba094>
 a08:	0b1c1349 	bleq	705734 <__bss_end__+0x6fc0d4>
 a0c:	89090000 	stmdbhi	r9, {}	; <UNPREDICTABLE>
 a10:	11000182 	smlabbne	r0, r2, r1, r0
 a14:	00133101 	andseq	r3, r3, r1, lsl #2
 a18:	82890a00 	addhi	r0, r9, #0, 20
 a1c:	01110101 	tsteq	r1, r1, lsl #2
 a20:	13011331 	movwne	r1, #4913	; 0x1331
 a24:	8a0b0000 	bhi	2c0a2c <__bss_end__+0x2b73cc>
 a28:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
 a2c:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
 a30:	890c0000 	stmdbhi	ip, {}	; <UNPREDICTABLE>
 a34:	11010182 	smlabbne	r1, r2, r1, r0
 a38:	00133101 	andseq	r3, r3, r1, lsl #2
 a3c:	00260d00 	eoreq	r0, r6, r0, lsl #26
 a40:	00001349 	andeq	r1, r0, r9, asr #6
 a44:	3f012e0e 	svccc	0x00012e0e
 a48:	3a0e0319 	bcc	3816b4 <__bss_end__+0x378054>
 a4c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 a50:	01193c19 	tsteq	r9, r9, lsl ip
 a54:	0f000013 	svceq	0x00000013
 a58:	13490005 	movtne	r0, #36869	; 0x9005
 a5c:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 a60:	03193f01 	tsteq	r9, #1, 30
 a64:	3b0b3a0e 	blcc	2cf2a4 <__bss_end__+0x2c5c44>
 a68:	3c19270b 	ldccc	7, cr2, [r9], {11}
 a6c:	00000019 	andeq	r0, r0, r9, lsl r0
 a70:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 a74:	030b130e 	movweq	r1, #45838	; 0xb30e
 a78:	110e1b0e 	tstne	lr, lr, lsl #22
 a7c:	10061201 	andne	r1, r6, r1, lsl #4
 a80:	02000017 	andeq	r0, r0, #23
 a84:	0b0b0024 	bleq	2c0b1c <__bss_end__+0x2b74bc>
 a88:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 a8c:	24030000 	strcs	r0, [r3], #-0
 a90:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 a94:	000e030b 	andeq	r0, lr, fp, lsl #6
 a98:	012e0400 	teqeq	lr, r0, lsl #8
 a9c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 aa0:	0b3b0b3a 	bleq	ec3790 <__bss_end__+0xeba130>
 aa4:	01111927 	tsteq	r1, r7, lsr #18
 aa8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 aac:	01194297 			; <UNDEFINED> instruction: 0x01194297
 ab0:	05000013 	streq	r0, [r0, #-19]
 ab4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 ab8:	0b3b0b3a 	bleq	ec37a8 <__bss_end__+0xeba148>
 abc:	17021349 	strne	r1, [r2, -r9, asr #6]
 ac0:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
 ac4:	03193f01 	tsteq	r9, #1, 30
 ac8:	3b0b3a0e 	blcc	2cf308 <__bss_end__+0x2c5ca8>
 acc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 ad0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 ad4:	97184006 	ldrls	r4, [r8, -r6]
 ad8:	13011942 	movwne	r1, #6466	; 0x1942
 adc:	89070000 	stmdbhi	r7, {}	; <UNPREDICTABLE>
 ae0:	11010182 	smlabbne	r1, r2, r1, r0
 ae4:	00133101 	andseq	r3, r3, r1, lsl #2
 ae8:	828a0800 	addhi	r0, sl, #0, 16
 aec:	18020001 	stmdane	r2, {r0}
 af0:	00184291 	mulseq	r8, r1, r2
 af4:	00050900 	andeq	r0, r5, r0, lsl #18
 af8:	0b3a0803 	bleq	e82b0c <__bss_end__+0xe794ac>
 afc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 b00:	00001702 	andeq	r1, r0, r2, lsl #14
 b04:	0300340a 	movweq	r3, #1034	; 0x40a
 b08:	3b0b3a08 	blcc	2cf330 <__bss_end__+0x2c5cd0>
 b0c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 b10:	0b000018 	bleq	b78 <_start-0x7488>
 b14:	0111010b 	tsteq	r1, fp, lsl #2
 b18:	13010612 	movwne	r0, #5650	; 0x1612
 b1c:	340c0000 	strcc	r0, [ip], #-0
 b20:	3a080300 	bcc	201728 <__bss_end__+0x1f80c8>
 b24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 b28:	00170213 	andseq	r0, r7, r3, lsl r2
 b2c:	82890d00 	addhi	r0, r9, #0, 26
 b30:	01110001 	tsteq	r1, r1
 b34:	00001331 	andeq	r1, r0, r1, lsr r3
 b38:	3f012e0e 	svccc	0x00012e0e
 b3c:	3a0e0319 	bcc	3817a8 <__bss_end__+0x378148>
 b40:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 b44:	3c134919 	ldccc	9, cr4, [r3], {25}
 b48:	0f000019 	svceq	0x00000019
 b4c:	13490005 	movtne	r0, #36869	; 0x9005
 b50:	01000000 	mrseq	r0, (UNDEF: 0)
 b54:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 b58:	0e030b13 	vmoveq.32	d3[0], r0
 b5c:	01110e1b 	tsteq	r1, fp, lsl lr
 b60:	17100612 			; <UNDEFINED> instruction: 0x17100612
 b64:	24020000 	strcs	r0, [r2], #-0
 b68:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 b6c:	0008030b 	andeq	r0, r8, fp, lsl #6
 b70:	00160300 	andseq	r0, r6, r0, lsl #6
 b74:	0b3a0e03 	bleq	e84388 <__bss_end__+0xe7ad28>
 b78:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 b7c:	24040000 	strcs	r0, [r4], #-0
 b80:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 b84:	000e030b 	andeq	r0, lr, fp, lsl #6
 b88:	000f0500 	andeq	r0, pc, r0, lsl #10
 b8c:	00000b0b 	andeq	r0, r0, fp, lsl #22
 b90:	0b000f06 	bleq	47b0 <_start-0x3850>
 b94:	0013490b 	andseq	r4, r3, fp, lsl #18
 b98:	00260700 	eoreq	r0, r6, r0, lsl #14
 b9c:	00001349 	andeq	r1, r0, r9, asr #6
 ba0:	49010108 	stmdbmi	r1, {r3, r8}
 ba4:	00130113 	andseq	r0, r3, r3, lsl r1
 ba8:	00210900 	eoreq	r0, r1, r0, lsl #18
 bac:	0b2f1349 	bleq	bc58d8 <__bss_end__+0xbbc278>
 bb0:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
 bb4:	03193f01 	tsteq	r9, #1, 30
 bb8:	3b0b3a0e 	blcc	2cf3f8 <__bss_end__+0x2c5d98>
 bbc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 bc0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 bc4:	97184006 	ldrls	r4, [r8, -r6]
 bc8:	13011942 	movwne	r1, #6466	; 0x1942
 bcc:	050b0000 	streq	r0, [fp, #-0]
 bd0:	3a0e0300 	bcc	3817d8 <__bss_end__+0x378178>
 bd4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 bd8:	00170213 	andseq	r0, r7, r3, lsl r2
 bdc:	00340c00 	eorseq	r0, r4, r0, lsl #24
 be0:	13490e03 	movtne	r0, #40451	; 0x9e03
 be4:	18021934 	stmdane	r2, {r2, r4, r5, r8, fp, ip}
 be8:	340d0000 	strcc	r0, [sp], #-0
 bec:	3a0e0300 	bcc	3817f4 <__bss_end__+0x378194>
 bf0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 bf4:	00180213 	andseq	r0, r8, r3, lsl r2
 bf8:	00340e00 	eorseq	r0, r4, r0, lsl #28
 bfc:	0b3a0e03 	bleq	e84410 <__bss_end__+0xe7adb0>
 c00:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 c04:	00001702 	andeq	r1, r0, r2, lsl #14
 c08:	0182890f 	orreq	r8, r2, pc, lsl #18
 c0c:	31011101 	tstcc	r1, r1, lsl #2
 c10:	00130113 	andseq	r0, r3, r3, lsl r1
 c14:	828a1000 	addhi	r1, sl, #0
 c18:	18020001 	stmdane	r2, {r0}
 c1c:	00184291 	mulseq	r8, r1, r2
 c20:	82891100 	addhi	r1, r9, #0, 2
 c24:	01110001 	tsteq	r1, r1
 c28:	00001331 	andeq	r1, r0, r1, lsr r3
 c2c:	01828912 	orreq	r8, r2, r2, lsl r9
 c30:	31011101 	tstcc	r1, r1, lsl #2
 c34:	13000013 	movwne	r0, #19
 c38:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 c3c:	0b3a0e03 	bleq	e84450 <__bss_end__+0xe7adf0>
 c40:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 c44:	06120111 			; <UNDEFINED> instruction: 0x06120111
 c48:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 c4c:	00130119 	andseq	r0, r3, r9, lsl r1
 c50:	002e1400 	eoreq	r1, lr, r0, lsl #8
 c54:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 c58:	0b3b0b3a 	bleq	ec3948 <__bss_end__+0xeba2e8>
 c5c:	01111927 	tsteq	r1, r7, lsr #18
 c60:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 c64:	00194297 	mulseq	r9, r7, r2
 c68:	002e1500 	eoreq	r1, lr, r0, lsl #10
 c6c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 c70:	0b3b0b3a 	bleq	ec3960 <__bss_end__+0xeba300>
 c74:	13491927 	movtne	r1, #39207	; 0x9927
 c78:	06120111 			; <UNDEFINED> instruction: 0x06120111
 c7c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 c80:	16000019 			; <UNDEFINED> instruction: 0x16000019
 c84:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 c88:	0b3b0b3a 	bleq	ec3978 <__bss_end__+0xeba318>
 c8c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 c90:	0000193c 	andeq	r1, r0, ip, lsr r9
 c94:	3f012e17 	svccc	0x00012e17
 c98:	3a0e0319 	bcc	381904 <__bss_end__+0x3782a4>
 c9c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 ca0:	3c134919 	ldccc	9, cr4, [r3], {25}
 ca4:	00130119 	andseq	r0, r3, r9, lsl r1
 ca8:	00051800 	andeq	r1, r5, r0, lsl #16
 cac:	00001349 	andeq	r1, r0, r9, asr #6
 cb0:	00001819 	andeq	r1, r0, r9, lsl r8
 cb4:	002e1a00 	eoreq	r1, lr, r0, lsl #20
 cb8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 cbc:	0b3b0b3a 	bleq	ec39ac <__bss_end__+0xeba34c>
 cc0:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 cc4:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
 cc8:	03193f01 	tsteq	r9, #1, 30
 ccc:	3b0b3a0e 	blcc	2cf50c <__bss_end__+0x2c5eac>
 cd0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 cd4:	00193c13 	andseq	r3, r9, r3, lsl ip
 cd8:	11010000 	mrsne	r0, (UNDEF: 1)
 cdc:	130e2501 	movwne	r2, #58625	; 0xe501
 ce0:	1b0e030b 	blne	381914 <__bss_end__+0x3782b4>
 ce4:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 ce8:	00171006 	andseq	r1, r7, r6
 cec:	00240200 	eoreq	r0, r4, r0, lsl #4
 cf0:	0b3e0b0b 	bleq	f83924 <__bss_end__+0xf7a2c4>
 cf4:	00000803 	andeq	r0, r0, r3, lsl #16
 cf8:	0b002403 	bleq	9d0c <__bss_end__+0x6ac>
 cfc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 d00:	0400000e 	streq	r0, [r0], #-14
 d04:	0e03012e 	adfeqsp	f0, f3, #0.5
 d08:	0b3b0b3a 	bleq	ec39f8 <__bss_end__+0xeba398>
 d0c:	13491927 	movtne	r1, #39207	; 0x9927
 d10:	06120111 			; <UNDEFINED> instruction: 0x06120111
 d14:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 d18:	00130119 	andseq	r0, r3, r9, lsl r1
 d1c:	00050500 	andeq	r0, r5, r0, lsl #10
 d20:	0b3a0803 	bleq	e82d34 <__bss_end__+0xe796d4>
 d24:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 d28:	00001702 	andeq	r1, r0, r2, lsl #14
 d2c:	01828906 	orreq	r8, r2, r6, lsl #18
 d30:	31011101 	tstcc	r1, r1, lsl #2
 d34:	07000013 	smladeq	r0, r3, r0, r0
 d38:	0001828a 	andeq	r8, r1, sl, lsl #5
 d3c:	42911802 	addsmi	r1, r1, #131072	; 0x20000
 d40:	08000018 	stmdaeq	r0, {r3, r4}
 d44:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 d48:	13011349 	movwne	r1, #4937	; 0x1349
 d4c:	05090000 	streq	r0, [r9, #-0]
 d50:	00134900 	andseq	r4, r3, r0, lsl #18
 d54:	00340a00 	eorseq	r0, r4, r0, lsl #20
 d58:	0b3a0e03 	bleq	e8456c <__bss_end__+0xe7af0c>
 d5c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 d60:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 d64:	0f0b0000 	svceq	0x000b0000
 d68:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 d6c:	0c000013 	stceq	0, cr0, [r0], {19}
 d70:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 d74:	0b3a0e03 	bleq	e84588 <__bss_end__+0xe7af28>
 d78:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 d7c:	0000193c 	andeq	r1, r0, ip, lsr r9
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
   0:	00000000 	andeq	r0, r0, r0
   4:	0000000b 	andeq	r0, r0, fp
   8:	0b500001 	bleq	1400014 <__bss_end__+0x13f69b4>
   c:	50000000 	andpl	r0, r0, r0
  10:	01000000 	mrseq	r0, (UNDEF: 0)
  14:	00005400 	andeq	r5, r0, r0, lsl #8
  18:	00000000 	andeq	r0, r0, r0
  1c:	00080000 	andeq	r0, r8, r0
  20:	000b0000 	andeq	r0, fp, r0
  24:	00010000 	andeq	r0, r1, r0
  28:	00000b50 	andeq	r0, r0, r0, asr fp
  2c:	00005000 	andeq	r5, r0, r0
  30:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
  3c:	00000074 	andeq	r0, r0, r4, ror r0
  40:	00000084 	andeq	r0, r0, r4, lsl #1
  44:	9f300002 	svcls	0x00300002
  48:	00000084 	andeq	r0, r0, r4, lsl #1
  4c:	000000bc 	strheq	r0, [r0], -ip
  50:	00540001 	subseq	r0, r4, r1
  54:	00000000 	andeq	r0, r0, r0
  58:	9c000000 	stcls	0, cr0, [r0], {-0}
  5c:	a4000000 	strge	r0, [r0], #-0
  60:	01000000 	mrseq	r0, (UNDEF: 0)
  64:	00a45000 	adceq	r5, r4, r0
  68:	00a70000 	adceq	r0, r7, r0
  6c:	00010000 	andeq	r0, r1, r0
  70:	00000051 	andeq	r0, r0, r1, asr r0
	...
  7c:	00000400 	andeq	r0, r0, r0, lsl #8
  80:	50000100 	andpl	r0, r0, r0, lsl #2
  84:	00000004 	andeq	r0, r0, r4
  88:	00000010 	andeq	r0, r0, r0, lsl r0
  8c:	01f30004 	mvnseq	r0, r4
  90:	00009f50 	andeq	r9, r0, r0, asr pc
  94:	00000000 	andeq	r0, r0, r0
  98:	003c0000 	eorseq	r0, ip, r0
  9c:	004c0000 	subeq	r0, ip, r0
  a0:	00010000 	andeq	r0, r1, r0
  a4:	00004c50 	andeq	r4, r0, r0, asr ip
  a8:	00005800 	andeq	r5, r0, r0, lsl #16
  ac:	53000100 	movwpl	r0, #256	; 0x100
  b0:	00000058 	andeq	r0, r0, r8, asr r0
  b4:	00000060 	andeq	r0, r0, r0, rrx
  b8:	01f30004 	mvnseq	r0, r4
  bc:	00609f50 	rsbeq	r9, r0, r0, asr pc
  c0:	00640000 	rsbeq	r0, r4, r0
  c4:	00010000 	andeq	r0, r1, r0
  c8:	00006450 	andeq	r6, r0, r0, asr r4
  cc:	00008800 	andeq	r8, r0, r0, lsl #16
  d0:	53000100 	movwpl	r0, #256	; 0x100
  d4:	00000088 	andeq	r0, r0, r8, lsl #1
  d8:	00000090 	muleq	r0, r0, r0
  dc:	01f30004 	mvnseq	r0, r4
  e0:	00909f50 	addseq	r9, r0, r0, asr pc
  e4:	00b80000 	adcseq	r0, r8, r0
  e8:	00010000 	andeq	r0, r1, r0
  ec:	00000053 	andeq	r0, r0, r3, asr r0
  f0:	00000000 	andeq	r0, r0, r0
  f4:	00006400 	andeq	r6, r0, r0, lsl #8
  f8:	00007000 	andeq	r7, r0, r0
  fc:	50000100 	andpl	r0, r0, r0, lsl #2
 100:	00000070 	andeq	r0, r0, r0, ror r0
 104:	00000088 	andeq	r0, r0, r8, lsl #1
 108:	00730002 	rsbseq	r0, r3, r2
 10c:	00000088 	andeq	r0, r0, r8, lsl #1
 110:	0000008b 	andeq	r0, r0, fp, lsl #1
 114:	01f30003 	mvnseq	r0, r3
 118:	00009050 	andeq	r9, r0, r0, asr r0
 11c:	0000b800 	andeq	fp, r0, r0, lsl #16
 120:	50000100 	andpl	r0, r0, r0, lsl #2
	...
 12c:	000000c4 	andeq	r0, r0, r4, asr #1
 130:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 134:	d8500001 	ldmdale	r0, {r0}^
 138:	e4000000 	str	r0, [r0], #-0
 13c:	01000000 	mrseq	r0, (UNDEF: 0)
 140:	00005000 	andeq	r5, r0, r0
 144:	00000000 	andeq	r0, r0, r0
 148:	00f40000 	rscseq	r0, r4, r0
 14c:	00fb0000 	rscseq	r0, fp, r0
 150:	00010000 	andeq	r0, r1, r0
 154:	0000fb50 	andeq	pc, r0, r0, asr fp	; <UNPREDICTABLE>
 158:	00012c00 	andeq	r2, r1, r0, lsl #24
 15c:	f3000400 	vshl.u8	d0, d0, d0
 160:	009f5001 	addseq	r5, pc, r1
 164:	00000000 	andeq	r0, r0, r0
 168:	f4000000 	vst4.8	{d0-d3}, [r0], r0
 16c:	fb000000 	blx	176 <_start-0x7e8a>
 170:	01000000 	mrseq	r0, (UNDEF: 0)
 174:	00fb5100 	rscseq	r5, fp, r0, lsl #2
 178:	012c0000 	teqeq	ip, r0
 17c:	00040000 	andeq	r0, r4, r0
 180:	9f5101f3 	svcls	0x005101f3
	...
 18c:	00000100 	andeq	r0, r0, r0, lsl #2
 190:	00000118 	andeq	r0, r0, r8, lsl r1
 194:	18500001 	ldmdane	r0, {r0}^
 198:	2c000001 	stccs	0, cr0, [r0], {1}
 19c:	01000001 	tsteq	r0, r1
 1a0:	00005400 	andeq	r5, r0, r0, lsl #8
 1a4:	00000000 	andeq	r0, r0, r0
 1a8:	012c0000 	teqeq	ip, r0
 1ac:	01380000 	teqeq	r8, r0
 1b0:	00010000 	andeq	r0, r1, r0
 1b4:	00013850 	andeq	r3, r1, r0, asr r8
 1b8:	00018c00 	andeq	r8, r1, r0, lsl #24
 1bc:	f3000400 	vshl.u8	d0, d0, d0
 1c0:	009f5001 	addseq	r5, pc, r1
 1c4:	00000000 	andeq	r0, r0, r0
 1c8:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
 1cc:	a4000001 	strge	r0, [r0], #-1
 1d0:	01000001 	tsteq	r0, r1
 1d4:	01a45000 			; <UNDEFINED> instruction: 0x01a45000
 1d8:	01cc0000 	biceq	r0, ip, r0
 1dc:	00010000 	andeq	r0, r1, r0
 1e0:	00000055 	andeq	r0, r0, r5, asr r0
 1e4:	00000000 	andeq	r0, r0, r0
 1e8:	0001fc00 	andeq	pc, r1, r0, lsl #24
 1ec:	00020000 	andeq	r0, r2, r0
 1f0:	50000100 	andpl	r0, r0, r0, lsl #2
 1f4:	00000200 	andeq	r0, r0, r0, lsl #4
 1f8:	00000203 	andeq	r0, r0, r3, lsl #4
 1fc:	00510001 	subseq	r0, r1, r1
	...
 208:	04000000 	streq	r0, [r0], #-0
 20c:	01000000 	mrseq	r0, (UNDEF: 0)
 210:	00045200 	andeq	r5, r4, r0, lsl #4
 214:	00200000 	eoreq	r0, r0, r0
 218:	00040000 	andeq	r0, r4, r0
 21c:	9f5201f3 	svcls	0x005201f3
	...
 22c:	0000000c 	andeq	r0, r0, ip
 230:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
 234:	14000000 	strne	r0, [r0], #-0
 238:	03000000 	movweq	r0, #0
 23c:	9f017300 	svcls	0x00017300
 240:	00000014 	andeq	r0, r0, r4, lsl r0
 244:	00000020 	andeq	r0, r0, r0, lsr #32
 248:	00530001 	subseq	r0, r3, r1
 24c:	00000000 	andeq	r0, r0, r0
 250:	2c000000 	stccs	0, cr0, [r0], {-0}
 254:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
 258:	01000000 	mrseq	r0, (UNDEF: 0)
 25c:	00385000 	eorseq	r5, r8, r0
 260:	00480000 	subeq	r0, r8, r0
 264:	00010000 	andeq	r0, r1, r0
 268:	00004855 	andeq	r4, r0, r5, asr r8
 26c:	00005800 	andeq	r5, r0, r0, lsl #16
 270:	50000100 	andpl	r0, r0, r0, lsl #2
	...
 280:	00000010 	andeq	r0, r0, r0, lsl r0
 284:	10500001 	subsne	r0, r0, r1
 288:	34000000 	strcc	r0, [r0], #-0
 28c:	01000000 	mrseq	r0, (UNDEF: 0)
 290:	00005400 	andeq	r5, r0, r0, lsl #8
	...
 29c:	00040000 	andeq	r0, r4, r0
 2a0:	00010000 	andeq	r0, r1, r0
 2a4:	00000450 	andeq	r0, r0, r0, asr r4
 2a8:	00000c00 	andeq	r0, r0, r0, lsl #24
 2ac:	70000300 	andvc	r0, r0, r0, lsl #6
 2b0:	000c9f30 	andeq	r9, ip, r0, lsr pc
 2b4:	00140000 	andseq	r0, r4, r0
 2b8:	00040000 	andeq	r0, r4, r0
 2bc:	9f5001f3 	svcls	0x005001f3
	...
 2c8:	00000014 	andeq	r0, r0, r4, lsl r0
 2cc:	00000020 	andeq	r0, r0, r0, lsr #32
 2d0:	20500001 	subscs	r0, r0, r1
 2d4:	2c000000 	stccs	0, cr0, [r0], {-0}
 2d8:	03000000 	movweq	r0, #0
 2dc:	9f017000 	svcls	0x00017000
 2e0:	0000002c 	andeq	r0, r0, ip, lsr #32
 2e4:	00000040 	andeq	r0, r0, r0, asr #32
 2e8:	00500001 	subseq	r0, r0, r1
 2ec:	00000000 	andeq	r0, r0, r0
 2f0:	14000000 	strne	r0, [r0], #-0
 2f4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 2f8:	01000000 	mrseq	r0, (UNDEF: 0)
 2fc:	00185100 	andseq	r5, r8, r0, lsl #2
 300:	00400000 	subeq	r0, r0, r0
 304:	00040000 	andeq	r0, r4, r0
 308:	9f5101f3 	svcls	0x005101f3
	...
 314:	00000040 	andeq	r0, r0, r0, asr #32
 318:	00000060 	andeq	r0, r0, r0, rrx
 31c:	60500001 	subsvs	r0, r0, r1
 320:	6c000000 	stcvs	0, cr0, [r0], {-0}
 324:	03000000 	movweq	r0, #0
 328:	9f017100 	svcls	0x00017100
 32c:	0000006c 	andeq	r0, r0, ip, rrx
 330:	00000074 	andeq	r0, r0, r4, ror r0
 334:	74510001 	ldrbvc	r0, [r1], #-1
 338:	80000000 	andhi	r0, r0, r0
 33c:	03000000 	movweq	r0, #0
 340:	9f017100 	svcls	0x00017100
	...
 34c:	00000040 	andeq	r0, r0, r0, asr #32
 350:	00000050 	andeq	r0, r0, r0, asr r0
 354:	50510001 	subspl	r0, r1, r1
 358:	80000000 	andhi	r0, r0, r0
 35c:	04000000 	streq	r0, [r0], #-0
 360:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
 364:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 368:	00000000 	andeq	r0, r0, r0
 36c:	00004000 	andeq	r4, r0, r0
 370:	00005800 	andeq	r5, r0, r0, lsl #16
 374:	52000100 	andpl	r0, r0, #0, 2
 378:	00000058 	andeq	r0, r0, r8, asr r0
 37c:	00000064 	andeq	r0, r0, r4, rrx
 380:	64520001 	ldrbvs	r0, [r2], #-1
 384:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
 388:	03000000 	movweq	r0, #0
 38c:	9f017200 	svcls	0x00017200
 390:	00000068 	andeq	r0, r0, r8, rrx
 394:	00000080 	andeq	r0, r0, r0, lsl #1
 398:	00520001 	subseq	r0, r2, r1
 39c:	00000000 	andeq	r0, r0, r0
 3a0:	40000000 	andmi	r0, r0, r0
 3a4:	54000000 	strpl	r0, [r0], #-0
 3a8:	01000000 	mrseq	r0, (UNDEF: 0)
 3ac:	00545300 	subseq	r5, r4, r0, lsl #6
 3b0:	00780000 	rsbseq	r0, r8, r0
 3b4:	00010000 	andeq	r0, r1, r0
 3b8:	00000053 	andeq	r0, r0, r3, asr r0
 3bc:	00000000 	andeq	r0, r0, r0
 3c0:	00004800 	andeq	r4, r0, r0, lsl #16
 3c4:	00006000 	andeq	r6, r0, r0
 3c8:	5c000100 	stfpls	f0, [r0], {-0}
 3cc:	00000060 	andeq	r0, r0, r0, rrx
 3d0:	00000080 	andeq	r0, r0, r0, lsl #1
 3d4:	01f3000a 	mvnseq	r0, sl
 3d8:	5301f352 	movwpl	pc, #4946	; 0x1352	; <UNPREDICTABLE>
 3dc:	9f01231c 	svcls	0x0001231c
	...
 3e8:	00000080 	andeq	r0, r0, r0, lsl #1
 3ec:	000000a4 	andeq	r0, r0, r4, lsr #1
 3f0:	a4500001 	ldrbge	r0, [r0], #-1
 3f4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 3f8:	03000001 	movweq	r0, #1
 3fc:	9f027000 	svcls	0x00027000
 400:	00000118 	andeq	r0, r0, r8, lsl r1
 404:	00000218 	andeq	r0, r0, r8, lsl r2
 408:	01f30004 	mvnseq	r0, r4
 40c:	00009f50 	andeq	r9, r0, r0, asr pc
 410:	00000000 	andeq	r0, r0, r0
 414:	00800000 	addeq	r0, r0, r0
 418:	00f00000 	rscseq	r0, r0, r0
 41c:	00010000 	andeq	r0, r1, r0
 420:	0000f051 	andeq	pc, r0, r1, asr r0	; <UNPREDICTABLE>
 424:	00016000 	andeq	r6, r1, r0
 428:	55000100 	strpl	r0, [r0, #-256]	; 0x100
 42c:	00000160 	andeq	r0, r0, r0, ror #2
 430:	00000168 	andeq	r0, r0, r8, ror #2
 434:	68510001 	ldmdavs	r1, {r0}^
 438:	88000001 	stmdahi	r0, {r0}
 43c:	01000001 	tsteq	r0, r1
 440:	01885500 	orreq	r5, r8, r0, lsl #10
 444:	019c0000 	orrseq	r0, ip, r0
 448:	00010000 	andeq	r0, r1, r0
 44c:	00019c51 	andeq	r9, r1, r1, asr ip
 450:	0001bc00 	andeq	fp, r1, r0, lsl #24
 454:	55000100 	strpl	r0, [r0, #-256]	; 0x100
 458:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
 45c:	000001c4 	andeq	r0, r0, r4, asr #3
 460:	c4510001 	ldrbgt	r0, [r1], #-1
 464:	fc000001 	stc2	0, cr0, [r0], {1}
 468:	01000001 	tsteq	r0, r1
 46c:	01fc5500 	mvnseq	r5, r0, lsl #10
 470:	02180000 	andseq	r0, r8, #0
 474:	00040000 	andeq	r0, r4, r0
 478:	9f5101f3 	svcls	0x005101f3
	...
 484:	00000080 	andeq	r0, r0, r0, lsl #1
 488:	00000094 	muleq	r0, r4, r0
 48c:	94520001 	ldrbls	r0, [r2], #-1
 490:	fc000000 	stc2	0, cr0, [r0], {-0}
 494:	01000001 	tsteq	r0, r1
 498:	01fc5400 	mvnseq	r5, r0, lsl #8
 49c:	02180000 	andseq	r0, r8, #0
 4a0:	00040000 	andeq	r0, r4, r0
 4a4:	9f5201f3 	svcls	0x005201f3
	...
 4b0:	00000080 	andeq	r0, r0, r0, lsl #1
 4b4:	00000100 	andeq	r0, r0, r0, lsl #2
 4b8:	04530001 	ldrbeq	r0, [r3], #-1
 4bc:	08000001 	stmdaeq	r0, {r0}
 4c0:	01000001 	tsteq	r0, r1
 4c4:	01605300 	cmneq	r0, r0, lsl #6
 4c8:	01680000 	cmneq	r8, r0
 4cc:	00010000 	andeq	r0, r1, r0
 4d0:	00016853 	andeq	r6, r1, r3, asr r8
 4d4:	00018800 	andeq	r8, r1, r0, lsl #16
 4d8:	f3000400 	vshl.u8	d0, d0, d0
 4dc:	889f5301 	ldmhi	pc, {r0, r8, r9, ip, lr}	; <UNPREDICTABLE>
 4e0:	90000001 	andls	r0, r0, r1
 4e4:	01000001 	tsteq	r0, r1
 4e8:	01905300 	orrseq	r5, r0, r0, lsl #6
 4ec:	01940000 	orrseq	r0, r4, r0
 4f0:	00010000 	andeq	r0, r1, r0
 4f4:	0001945c 	andeq	r9, r1, ip, asr r4
 4f8:	00019c00 	andeq	r9, r1, r0, lsl #24
 4fc:	53000100 	movwpl	r0, #256	; 0x100
 500:	0000019c 	muleq	r0, ip, r1
 504:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
 508:	01f30004 	mvnseq	r0, r4
 50c:	01bc9f53 			; <UNDEFINED> instruction: 0x01bc9f53
 510:	01cc0000 	biceq	r0, ip, r0
 514:	00010000 	andeq	r0, r1, r0
 518:	0001cc53 	andeq	ip, r1, r3, asr ip
 51c:	0001cf00 	andeq	ip, r1, r0, lsl #30
 520:	5c000100 	stfpls	f0, [r0], {-0}
 524:	000001cf 	andeq	r0, r0, pc, asr #3
 528:	000001d4 	ldrdeq	r0, [r0], -r4
 52c:	01f30004 	mvnseq	r0, r4
 530:	00009f53 	andeq	r9, r0, r3, asr pc
 534:	00000000 	andeq	r0, r0, r0
 538:	00800000 	addeq	r0, r0, r0
 53c:	009c0000 	addseq	r0, ip, r0
 540:	00020000 	andeq	r0, r2, r0
 544:	009c0091 	umullseq	r0, ip, r1, r0
 548:	01c80000 	biceq	r0, r8, r0
 54c:	00010000 	andeq	r0, r1, r0
 550:	0001d452 	andeq	sp, r1, r2, asr r4
 554:	0001df00 	andeq	sp, r1, r0, lsl #30
 558:	52000100 	andpl	r0, r0, #0, 2
	...
 564:	0000009c 	muleq	r0, ip, r0
 568:	00000118 	andeq	r0, r0, r8, lsl r1
 56c:	185d0001 	ldmdane	sp, {r0}^
 570:	1c000001 	stcne	0, cr0, [r0], {1}
 574:	01000001 	tsteq	r0, r1
 578:	011c5300 	tsteq	ip, r0, lsl #6
 57c:	01200000 	teqeq	r0, r0
 580:	00010000 	andeq	r0, r1, r0
 584:	00012051 	andeq	r2, r1, r1, asr r0
 588:	00016000 	andeq	r6, r1, r0
 58c:	53000100 	movwpl	r0, #256	; 0x100
 590:	00000160 	andeq	r0, r0, r0, ror #2
 594:	00000168 	andeq	r0, r0, r8, ror #2
 598:	685d0001 	ldmdavs	sp, {r0}^
 59c:	6c000001 	stcvs	0, cr0, [r0], {1}
 5a0:	01000001 	tsteq	r0, r1
 5a4:	016c5e00 	cmneq	ip, r0, lsl #28
 5a8:	01880000 	orreq	r0, r8, r0
 5ac:	00010000 	andeq	r0, r1, r0
 5b0:	00018853 	andeq	r8, r1, r3, asr r8
 5b4:	00019000 	andeq	r9, r1, r0
 5b8:	91000400 	tstls	r0, r0, lsl #8
 5bc:	909f7fa1 	addsls	r7, pc, r1, lsr #31
 5c0:	94000001 	strls	r0, [r0], #-1
 5c4:	01000001 	tsteq	r0, r1
 5c8:	01945300 	orrseq	r5, r4, r0, lsl #6
 5cc:	019c0000 	orrseq	r0, ip, r0
 5d0:	00010000 	andeq	r0, r1, r0
 5d4:	00019c5d 	andeq	r9, r1, sp, asr ip
 5d8:	0001a000 	andeq	sl, r1, r0
 5dc:	5e000100 	adfpls	f0, f0, f0
 5e0:	000001a0 	andeq	r0, r0, r0, lsr #3
 5e4:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
 5e8:	bc530001 	mrrclt	0, 0, r0, r3, cr1
 5ec:	d4000001 	strle	r0, [r0], #-1
 5f0:	01000001 	tsteq	r0, r1
 5f4:	01d45d00 	bicseq	r5, r4, r0, lsl #26
 5f8:	01df0000 	bicseq	r0, pc, r0
 5fc:	00010000 	andeq	r0, r1, r0
 600:	00000053 	andeq	r0, r0, r3, asr r0
 604:	00000000 	andeq	r0, r0, r0
 608:	0000a000 	andeq	sl, r0, r0
 60c:	0000ec00 	andeq	lr, r0, r0, lsl #24
 610:	5c000100 	stfpls	f0, [r0], {-0}
 614:	000000ec 	andeq	r0, r0, ip, ror #1
 618:	00000100 	andeq	r0, r0, r0, lsl #2
 61c:	00530001 	subseq	r0, r3, r1
 620:	04000001 	streq	r0, [r0], #-1
 624:	01000001 	tsteq	r0, r1
 628:	01045c00 	tsteq	r4, r0, lsl #24
 62c:	01080000 	mrseq	r0, (UNDEF: 8)
 630:	00010000 	andeq	r0, r1, r0
 634:	00010853 	andeq	r0, r1, r3, asr r8
 638:	00011800 	andeq	r1, r1, r0, lsl #16
 63c:	5c000100 	stfpls	f0, [r0], {-0}
 640:	00000118 	andeq	r0, r0, r8, lsl r1
 644:	0000011c 	andeq	r0, r0, ip, lsl r1
 648:	1c500001 	mrrcne	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
 64c:	3c000001 	stccc	0, cr0, [r0], {1}
 650:	01000001 	tsteq	r0, r1
 654:	01445c00 	cmpeq	r4, r0, lsl #24
 658:	01580000 	cmpeq	r8, r0
 65c:	00010000 	andeq	r0, r1, r0
 660:	00015850 	andeq	r5, r1, r0, asr r8
 664:	00016000 	andeq	r6, r1, r0
 668:	5c000100 	stfpls	f0, [r0], {-0}
 66c:	00000160 	andeq	r0, r0, r0, ror #2
 670:	00000168 	andeq	r0, r0, r8, ror #2
 674:	68530001 	ldmdavs	r3, {r0}^
 678:	78000001 	stmdavc	r0, {r0}
 67c:	01000001 	tsteq	r0, r1
 680:	01785c00 	cmneq	r8, r0, lsl #24
 684:	01800000 	orreq	r0, r0, r0
 688:	00050000 	andeq	r0, r5, r0
 68c:	2534007c 	ldrcs	r0, [r4, #-124]!	; 0x7c
 690:	0001809f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
 694:	00018800 	andeq	r8, r1, r0, lsl #16
 698:	5c000100 	stfpls	f0, [r0], {-0}
 69c:	00000188 	andeq	r0, r0, r8, lsl #3
 6a0:	00000190 	muleq	r0, r0, r1
 6a4:	90530001 	subsls	r0, r3, r1
 6a8:	94000001 	strls	r0, [r0], #-1
 6ac:	01000001 	tsteq	r0, r1
 6b0:	01945c00 	orrseq	r5, r4, r0, lsl #24
 6b4:	019c0000 	orrseq	r0, ip, r0
 6b8:	00010000 	andeq	r0, r1, r0
 6bc:	00019c53 	andeq	r9, r1, r3, asr ip
 6c0:	0001ac00 	andeq	sl, r1, r0, lsl #24
 6c4:	5c000100 	stfpls	f0, [r0], {-0}
 6c8:	000001ac 	andeq	r0, r0, ip, lsr #3
 6cc:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
 6d0:	007c0005 	rsbseq	r0, ip, r5
 6d4:	b49f2531 	ldrlt	r2, [pc], #1329	; 6dc <_start-0x7924>
 6d8:	bc000001 	stclt	0, cr0, [r0], {1}
 6dc:	01000001 	tsteq	r0, r1
 6e0:	01bc5c00 			; <UNDEFINED> instruction: 0x01bc5c00
 6e4:	01cc0000 	biceq	r0, ip, r0
 6e8:	00010000 	andeq	r0, r1, r0
 6ec:	0001cc53 	andeq	ip, r1, r3, asr ip
 6f0:	0001cf00 	andeq	ip, r1, r0, lsl #30
 6f4:	5c000100 	stfpls	f0, [r0], {-0}
 6f8:	000001cf 	andeq	r0, r0, pc, asr #3
 6fc:	000001d4 	ldrdeq	r0, [r0], -r4
 700:	01f30004 	mvnseq	r0, r4
 704:	01d49f53 	bicseq	r9, r4, r3, asr pc
 708:	01df0000 	bicseq	r0, pc, r0
 70c:	00010000 	andeq	r0, r1, r0
 710:	0000005c 	andeq	r0, r0, ip, asr r0
 714:	00000000 	andeq	r0, r0, r0
 718:	0000ec00 	andeq	lr, r0, r0, lsl #24
 71c:	0000fc00 	andeq	pc, r0, r0, lsl #24
 720:	30000200 	andcc	r0, r0, r0, lsl #4
 724:	0000fc9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
 728:	00010400 	andeq	r0, r1, r0, lsl #8
 72c:	31000200 	mrscc	r0, R8_usr
 730:	0001049f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
 734:	00010800 	andeq	r0, r1, r0, lsl #16
 738:	30000200 	andcc	r0, r0, r0, lsl #4
 73c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 740:	00000000 	andeq	r0, r0, r0
 744:	00021800 	andeq	r1, r2, r0, lsl #16
 748:	00022800 	andeq	r2, r2, r0, lsl #16
 74c:	50000100 	andpl	r0, r0, r0, lsl #2
 750:	00000228 	andeq	r0, r0, r8, lsr #4
 754:	0000023c 	andeq	r0, r0, ip, lsr r2
 758:	01f30004 	mvnseq	r0, r4
 75c:	023c9f50 	eorseq	r9, ip, #80, 30	; 0x140
 760:	02680000 	rsbeq	r0, r8, #0
 764:	00010000 	andeq	r0, r1, r0
 768:	00000050 	andeq	r0, r0, r0, asr r0
 76c:	00000000 	andeq	r0, r0, r0
 770:	00021800 	andeq	r1, r2, r0, lsl #16
 774:	00022c00 	andeq	r2, r2, r0, lsl #24
 778:	51000100 	mrspl	r0, (UNDEF: 16)
 77c:	0000022c 	andeq	r0, r0, ip, lsr #4
 780:	0000023c 	andeq	r0, r0, ip, lsr r2
 784:	01f30004 	mvnseq	r0, r4
 788:	023c9f51 	eorseq	r9, ip, #324	; 0x144
 78c:	02680000 	rsbeq	r0, r8, #0
 790:	00010000 	andeq	r0, r1, r0
 794:	00000051 	andeq	r0, r0, r1, asr r0
 798:	00000000 	andeq	r0, r0, r0
 79c:	00026800 	andeq	r6, r2, r0, lsl #16
 7a0:	00029000 	andeq	r9, r2, r0
 7a4:	50000100 	andpl	r0, r0, r0, lsl #2
 7a8:	00000290 	muleq	r0, r0, r2
 7ac:	000004dc 	ldrdeq	r0, [r0], -ip
 7b0:	dc5b0001 	mrrcle	0, 0, r0, fp, cr1
 7b4:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
 7b8:	04000004 	streq	r0, [r0], #-4
 7bc:	5001f300 	andpl	pc, r1, r0, lsl #6
 7c0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 7c4:	00000000 	andeq	r0, r0, r0
 7c8:	00026800 	andeq	r6, r2, r0, lsl #16
 7cc:	00027c00 	andeq	r7, r2, r0, lsl #24
 7d0:	51000100 	mrspl	r0, (UNDEF: 16)
 7d4:	0000027c 	andeq	r0, r0, ip, ror r2
 7d8:	00000290 	muleq	r0, r0, r2
 7dc:	01710003 	cmneq	r1, r3
 7e0:	0002909f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
 7e4:	0004f000 	andeq	pc, r4, r0
 7e8:	f3000400 	vshl.u8	d0, d0, d0
 7ec:	009f5101 	addseq	r5, pc, r1, lsl #2
 7f0:	00000000 	andeq	r0, r0, r0
 7f4:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
 7f8:	98000002 	stmdals	r0, {r1}
 7fc:	01000002 	tsteq	r0, r2
 800:	02985200 	addseq	r5, r8, #0, 4
 804:	02c00000 	sbceq	r0, r0, #0
 808:	00010000 	andeq	r0, r1, r0
 80c:	0002c052 	andeq	ip, r2, r2, asr r0
 810:	00048c00 	andeq	r8, r4, r0, lsl #24
 814:	56000100 	strpl	r0, [r0], -r0, lsl #2
 818:	0000048c 	andeq	r0, r0, ip, lsl #9
 81c:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 820:	00520001 	subseq	r0, r2, r1
 824:	00000000 	andeq	r0, r0, r0
 828:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
 82c:	84000002 	strhi	r0, [r0], #-2
 830:	01000002 	tsteq	r0, r2
 834:	00005300 	andeq	r5, r0, r0, lsl #6
 838:	00000000 	andeq	r0, r0, r0
 83c:	02780000 	rsbseq	r0, r8, #0
 840:	02900000 	addseq	r0, r0, #0
 844:	00010000 	andeq	r0, r1, r0
 848:	00029050 	andeq	r9, r2, r0, asr r0
 84c:	00029400 	andeq	r9, r2, r0, lsl #8
 850:	54000100 	strpl	r0, [r0], #-256	; 0x100
 854:	00000294 	muleq	r0, r4, r2
 858:	000002a0 	andeq	r0, r0, r0, lsr #5
 85c:	01740003 	cmneq	r4, r3
 860:	0002a09f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
 864:	0002ac00 	andeq	sl, r2, r0, lsl #24
 868:	54000100 	strpl	r0, [r0], #-256	; 0x100
 86c:	000002ac 	andeq	r0, r0, ip, lsr #5
 870:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 874:	01740003 	cmneq	r4, r3
 878:	0002b89f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
 87c:	00049000 	andeq	r9, r4, r0
 880:	54000100 	strpl	r0, [r0], #-256	; 0x100
 884:	00000490 	muleq	r0, r0, r4
 888:	0000049c 	muleq	r0, ip, r4
 88c:	01740003 	cmneq	r4, r3
 890:	00049c9f 	muleq	r4, pc, ip	; <UNPREDICTABLE>
 894:	0004c800 	andeq	ip, r4, r0, lsl #16
 898:	54000100 	strpl	r0, [r0], #-256	; 0x100
 89c:	000004c8 	andeq	r0, r0, r8, asr #9
 8a0:	000004d4 	ldrdeq	r0, [r0], -r4
 8a4:	d4500001 	ldrble	r0, [r0], #-1
 8a8:	dc000004 	stcle	0, cr0, [r0], {4}
 8ac:	03000004 	movweq	r0, #4
 8b0:	9f017400 	svcls	0x00017400
	...
 8bc:	00000280 	andeq	r0, r0, r0, lsl #5
 8c0:	000004dc 	ldrdeq	r0, [r0], -ip
 8c4:	dc580001 	mrrcle	0, 0, r0, r8, cr1
 8c8:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
 8cc:	0a000004 	beq	8e4 <_start-0x771c>
 8d0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
 8d4:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
 8d8:	009f1c31 	addseq	r1, pc, r1, lsr ip	; <UNPREDICTABLE>
 8dc:	00000000 	andeq	r0, r0, r0
 8e0:	bc000000 	stclt	0, cr0, [r0], {-0}
 8e4:	c0000003 	andgt	r0, r0, r3
 8e8:	01000003 	tsteq	r0, r3
 8ec:	03e45000 	mvneq	r5, #0
 8f0:	03e80000 	mvneq	r0, #0
 8f4:	00010000 	andeq	r0, r1, r0
 8f8:	00040c50 	andeq	r0, r4, r0, asr ip
 8fc:	00041000 	andeq	r1, r4, r0
 900:	50000100 	andpl	r0, r0, r0, lsl #2
 904:	00000434 	andeq	r0, r0, r4, lsr r4
 908:	00000438 	andeq	r0, r0, r8, lsr r4
 90c:	40500001 	subsmi	r0, r0, r1
 910:	44000004 	strmi	r0, [r0], #-4
 914:	01000004 	tsteq	r0, r4
 918:	04685000 	strbteq	r5, [r8], #-0
 91c:	046c0000 	strbteq	r0, [ip], #-0
 920:	00010000 	andeq	r0, r1, r0
 924:	00048850 	andeq	r8, r4, r0, asr r8
 928:	0004b000 	andeq	fp, r4, r0
 92c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
 938:	000002c0 	andeq	r0, r0, r0, asr #5
 93c:	000002c8 	andeq	r0, r0, r8, asr #5
 940:	9f300002 	svcls	0x00300002
 944:	000002c8 	andeq	r0, r0, r8, asr #5
 948:	000002cc 	andeq	r0, r0, ip, asr #5
 94c:	d8570001 	ldmdale	r7, {r0}^
 950:	b0000002 	andlt	r0, r0, r2
 954:	01000004 	tsteq	r0, r4
 958:	00005700 	andeq	r5, r0, r0, lsl #14
 95c:	00000000 	andeq	r0, r0, r0
 960:	00140000 	andseq	r0, r4, r0
 964:	001c0000 	andseq	r0, ip, r0
 968:	00030000 	andeq	r0, r3, r0
 96c:	1c9f0473 	cfldrsne	mvf0, [pc], {115}	; 0x73
 970:	27000000 	strcs	r0, [r0, -r0]
 974:	01000000 	mrseq	r0, (UNDEF: 0)
 978:	00005300 	andeq	r5, r0, r0, lsl #6
 97c:	00000000 	andeq	r0, r0, r0
 980:	896c0000 	stmdbhi	ip!, {}^	; <UNPREDICTABLE>
 984:	89700000 	ldmdbhi	r0!, {}^	; <UNPREDICTABLE>
 988:	00020000 	andeq	r0, r2, r0
 98c:	89709f30 	ldmdbhi	r0!, {r4, r5, r8, r9, sl, fp, ip, pc}^
 990:	89740000 	ldmdbhi	r4!, {}^	; <UNPREDICTABLE>
 994:	00010000 	andeq	r0, r1, r0
 998:	00000050 	andeq	r0, r0, r0, asr r0
 99c:	00000000 	andeq	r0, r0, r0
 9a0:	00898400 	addeq	r8, r9, r0, lsl #8
 9a4:	00898800 	addeq	r8, r9, r0, lsl #16
 9a8:	30000200 	andcc	r0, r0, r0, lsl #4
 9ac:	0089889f 	umulleq	r8, r9, pc, r8	; <UNPREDICTABLE>
 9b0:	00898c00 	addeq	r8, r9, r0, lsl #24
 9b4:	53000100 	movwpl	r0, #256	; 0x100
 9b8:	00008990 	muleq	r0, r0, r9
 9bc:	00008998 	muleq	r0, r8, r9
 9c0:	00530001 	subseq	r0, r3, r1
	...
 9cc:	04000000 	streq	r0, [r0], #-0
 9d0:	01000000 	mrseq	r0, (UNDEF: 0)
 9d4:	00045000 	andeq	r5, r4, r0
 9d8:	000c0000 	andeq	r0, ip, r0
 9dc:	00010000 	andeq	r0, r1, r0
 9e0:	00000c53 	andeq	r0, r0, r3, asr ip
 9e4:	00001000 	andeq	r1, r0, r0
 9e8:	50000100 	andpl	r0, r0, r0, lsl #2
 9ec:	00000010 	andeq	r0, r0, r0, lsl r0
 9f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 9f4:	00530001 	subseq	r0, r3, r1
 9f8:	00000000 	andeq	r0, r0, r0
 9fc:	30000000 	andcc	r0, r0, r0
 a00:	3b000000 	blcc	a08 <_start-0x75f8>
 a04:	01000000 	mrseq	r0, (UNDEF: 0)
 a08:	003b5000 	eorseq	r5, fp, r0
 a0c:	00540000 	subseq	r0, r4, r0
 a10:	00010000 	andeq	r0, r1, r0
 a14:	00000055 	andeq	r0, r0, r5, asr r0
 a18:	00000000 	andeq	r0, r0, r0
 a1c:	00004400 	andeq	r4, r0, r0, lsl #8
 a20:	00004800 	andeq	r4, r0, r0, lsl #16
 a24:	50000100 	andpl	r0, r0, r0, lsl #2
	...
 a30:	00000054 	andeq	r0, r0, r4, asr r0
 a34:	00000060 	andeq	r0, r0, r0, rrx
 a38:	60500001 	subsvs	r0, r0, r1
 a3c:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
 a40:	04000000 	streq	r0, [r0], #-0
 a44:	5001f300 	andpl	pc, r1, r0, lsl #6
 a48:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 a4c:	00000000 	andeq	r0, r0, r0
 a50:	00006800 	andeq	r6, r0, r0, lsl #16
 a54:	00007400 	andeq	r7, r0, r0, lsl #8
 a58:	50000100 	andpl	r0, r0, r0, lsl #2
 a5c:	00000074 	andeq	r0, r0, r4, ror r0
 a60:	0000007c 	andeq	r0, r0, ip, ror r0
 a64:	01f30004 	mvnseq	r0, r4
 a68:	00009f50 	andeq	r9, r0, r0, asr pc
	...
 a74:	00180000 	andseq	r0, r8, r0
 a78:	00010000 	andeq	r0, r1, r0
 a7c:	00001850 	andeq	r1, r0, r0, asr r8
 a80:	00002c00 	andeq	r2, r0, r0, lsl #24
 a84:	f3000400 	vshl.u8	d0, d0, d0
 a88:	2c9f5001 	ldccs	0, cr5, [pc], {1}
 a8c:	40000000 	andmi	r0, r0, r0
 a90:	01000000 	mrseq	r0, (UNDEF: 0)
 a94:	00405000 	subeq	r5, r0, r0
 a98:	00640000 	rsbeq	r0, r4, r0
 a9c:	00040000 	andeq	r0, r4, r0
 aa0:	9f5001f3 	svcls	0x005001f3
	...
 aac:	0000003c 	andeq	r0, r0, ip, lsr r0
 ab0:	0000004b 	andeq	r0, r0, fp, asr #32
 ab4:	4b520001 	blmi	1480ac0 <__bss_end__+0x1477460>
 ab8:	64000000 	strvs	r0, [r0], #-0
 abc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 ac0:	5001f300 	andpl	pc, r1, r0, lsl #6
 ac4:	fc090323 	stc2	3, cr0, [r9], {35}	; 0x23
 ac8:	00009f1a 	andeq	r9, r0, sl, lsl pc
 acc:	00000000 	andeq	r0, r0, r0
 ad0:	00640000 	rsbeq	r0, r4, r0
 ad4:	007c0000 	rsbseq	r0, ip, r0
 ad8:	00010000 	andeq	r0, r1, r0
 adc:	00007c50 	andeq	r7, r0, r0, asr ip
 ae0:	00009000 	andeq	r9, r0, r0
 ae4:	f3000400 	vshl.u8	d0, d0, d0
 ae8:	909f5001 	addsls	r5, pc, r1
 aec:	9b000000 	blls	af4 <_start-0x750c>
 af0:	01000000 	mrseq	r0, (UNDEF: 0)
 af4:	009b5000 	addseq	r5, fp, r0
 af8:	00a00000 	adceq	r0, r0, r0
 afc:	00040000 	andeq	r0, r4, r0
 b00:	9f5001f3 	svcls	0x005001f3
 b04:	000000a0 	andeq	r0, r0, r0, lsr #1
 b08:	000000ac 	andeq	r0, r0, ip, lsr #1
 b0c:	ac500001 	mrrcge	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
 b10:	c0000000 	andgt	r0, r0, r0
 b14:	04000000 	streq	r0, [r0], #-0
 b18:	5001f300 	andpl	pc, r1, r0, lsl #6
 b1c:	0000c09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 b20:	0000df00 	andeq	sp, r0, r0, lsl #30
 b24:	50000100 	andpl	r0, r0, r0, lsl #2
 b28:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 b2c:	000000f8 	strdeq	r0, [r0], -r8
 b30:	01f30004 	mvnseq	r0, r4
 b34:	00009f50 	andeq	r9, r0, r0, asr pc
 b38:	00000000 	andeq	r0, r0, r0
 b3c:	00640000 	rsbeq	r0, r4, r0
 b40:	00800000 	addeq	r0, r0, r0
 b44:	00010000 	andeq	r0, r1, r0
 b48:	00008051 	andeq	r8, r0, r1, asr r0
 b4c:	00009000 	andeq	r9, r0, r0
 b50:	f3000400 	vshl.u8	d0, d0, d0
 b54:	909f5101 	addsls	r5, pc, r1, lsl #2
 b58:	9b000000 	blls	b60 <_start-0x74a0>
 b5c:	01000000 	mrseq	r0, (UNDEF: 0)
 b60:	009b5100 	addseq	r5, fp, r0, lsl #2
 b64:	00a00000 	adceq	r0, r0, r0
 b68:	00040000 	andeq	r0, r4, r0
 b6c:	9f5101f3 	svcls	0x005101f3
 b70:	000000a0 	andeq	r0, r0, r0, lsr #1
 b74:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 b78:	b0510001 	subslt	r0, r1, r1
 b7c:	c0000000 	andgt	r0, r0, r0
 b80:	04000000 	streq	r0, [r0], #-0
 b84:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
 b88:	0000c09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 b8c:	0000d400 	andeq	sp, r0, r0, lsl #8
 b90:	51000100 	mrspl	r0, (UNDEF: 16)
 b94:	000000d4 	ldrdeq	r0, [r0], -r4
 b98:	000000d8 	ldrdeq	r0, [r0], -r8
 b9c:	00710004 	rsbseq	r0, r1, r4
 ba0:	00d89f1f 	sbcseq	r9, r8, pc, lsl pc
 ba4:	00f80000 	rscseq	r0, r8, r0
 ba8:	00040000 	andeq	r0, r4, r0
 bac:	9f5101f3 	svcls	0x005101f3
	...
 bb8:	000000c8 	andeq	r0, r0, r8, asr #1
 bbc:	000000cc 	andeq	r0, r0, ip, asr #1
 bc0:	cc520001 	mrrcgt	0, 0, r0, r2, cr1
 bc4:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
 bc8:	05000000 	streq	r0, [r0, #-0]
 bcc:	96580300 	ldrbls	r0, [r8], -r0, lsl #6
 bd0:	00d80000 	sbcseq	r0, r8, r0
 bd4:	00df0000 	sbcseq	r0, pc, r0
 bd8:	00010000 	andeq	r0, r1, r0
 bdc:	00000051 	andeq	r0, r0, r1, asr r0
	...
 be8:	00000b00 	andeq	r0, r0, r0, lsl #22
 bec:	50000100 	andpl	r0, r0, r0, lsl #2
 bf0:	0000000b 	andeq	r0, r0, fp
 bf4:	00000014 	andeq	r0, r0, r4, lsl r0
 bf8:	00540001 	subseq	r0, r4, r1
 bfc:	00000000 	andeq	r0, r0, r0
 c00:	Address 0x0000000000000c00 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	00008010 	andeq	r8, r0, r0, lsl r0
  14:	00000114 	andeq	r0, r0, r4, lsl r1
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	03660002 	cmneq	r6, #2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	00008124 	andeq	r8, r0, r4, lsr #2
  34:	0000021c 	andeq	r0, r0, ip, lsl r2
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	08e90002 	stmiaeq	r9!, {r1}^
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	00008374 	andeq	r8, r0, r4, ror r3
  54:	00000020 	andeq	r0, r0, r0, lsr #32
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	09c80002 	stmibeq	r8, {r1}^
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	00008394 	muleq	r0, r4, r3
  74:	00000058 	andeq	r0, r0, r8, asr r0
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	0b5d0002 	bleq	1740094 <__bss_end__+0x1736a34>
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	000083ec 	andeq	r8, r0, ip, ror #7
  94:	00000034 	andeq	r0, r0, r4, lsr r0
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	0c4f0002 	mcrreq	0, 0, r0, pc, cr2
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	00008420 	andeq	r8, r0, r0, lsr #8
  b4:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	12a70002 	adcne	r0, r7, #2
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	00008910 	andeq	r8, r0, r0, lsl r9
  d4:	00000028 	andeq	r0, r0, r8, lsr #32
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	13aa0002 			; <UNDEFINED> instruction: 0x13aa0002
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	00008938 	andeq	r8, r0, r8, lsr r9
  f4:	00000034 	andeq	r0, r0, r4, lsr r0
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	14b90002 	ldrtne	r0, [r9], #2
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	0000896c 	andeq	r8, r0, ip, ror #18
 114:	00000074 	andeq	r0, r0, r4, ror r0
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	166a0002 	strbtne	r0, [sl], -r2
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	000089e0 	andeq	r8, r0, r0, ror #19
 134:	0000007c 	andeq	r0, r0, ip, ror r0
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	18180002 	ldmdane	r8, {r1}
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	00008d34 	andeq	r8, r0, r4, lsr sp
 154:	00000178 	andeq	r0, r0, r8, ror r1
	...
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	1b640002 	blne	1900174 <__bss_end__+0x18f6b14>
 168:	00040000 	andeq	r0, r4, r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	00008eac 	andeq	r8, r0, ip, lsr #29
 174:	00000014 	andeq	r0, r0, r4, lsl r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	00000074 	andeq	r0, r0, r4, ror r0
   4:	00000080 	andeq	r0, r0, r0, lsl #1
   8:	00000084 	andeq	r0, r0, r4, lsl #1
   c:	000000a8 	andeq	r0, r0, r8, lsr #1
	...
  18:	0000896c 	andeq	r8, r0, ip, ror #18
  1c:	000089e0 	andeq	r8, r0, r0, ror #19
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000012f 	andeq	r0, r0, pc, lsr #2
   4:	00e40002 	rsceq	r0, r4, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2f010000 	svccs	0x00010000
  1c:	2f727375 	svccs	0x00727375
  20:	61636f6c 	cmnvs	r3, ip, ror #30
  24:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
  28:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
  2c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
  30:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
  34:	61652d65 	cmnvs	r5, r5, ror #26
  38:	342f6962 	strtcc	r6, [pc], #-2402	; 40 <_start-0x7fc0>
  3c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
  40:	3173632d 	cmncc	r3, sp, lsr #6
  44:	2f653037 	svccs	0x00653037
  48:	2f62696c 	svccs	0x0062696c
  4c:	2f636367 	svccs	0x00636367
  50:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
  54:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
  58:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
  5c:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
  60:	2f332e38 	svccs	0x00332e38
  64:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  68:	00656475 	rsbeq	r6, r5, r5, ror r4
  6c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
  70:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
  74:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
  78:	2f6e756a 	svccs	0x006e756a
  7c:	6b736544 	blvs	1cd9594 <__bss_end__+0x1ccff34>
  80:	2f706f74 	svccs	0x00706f74
  84:	6f686373 	svcvs	0x00686373
  88:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
  8c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
  90:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
  94:	53432f30 	movtpl	r2, #16176	; 0x3f30
  98:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
  9c:	3173632f 	cmncc	r3, pc, lsr #6
  a0:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
  a4:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
  a8:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
  ac:	00697062 	rsbeq	r7, r9, r2, rrx
  b0:	742d3100 	strtvc	r3, [sp], #-256	; 0x100
  b4:	2d747365 	ldclcs	3, cr7, [r4, #-404]!	; 0xfffffe6c
  b8:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
  bc:	632e6461 	teqvs	lr, #1627389952	; 0x61000000
  c0:	00000000 	andeq	r0, r0, r0
  c4:	2d697072 	stclcs	0, cr7, [r9, #-456]!	; 0xfffffe38
  c8:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
  cc:	682e6461 	stmdavs	lr!, {r0, r5, r6, sl, sp, lr}
  d0:	00000000 	andeq	r0, r0, r0
  d4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
  d8:	672d746e 	strvs	r7, [sp, -lr, ror #8]!
  dc:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
  e0:	00000100 	andeq	r0, r0, r0, lsl #2
  e4:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
  e8:	00020068 	andeq	r0, r2, r8, rrx
  ec:	05000000 	streq	r0, [r0, #-0]
  f0:	00801002 	addeq	r1, r0, r2
  f4:	9f4c1900 	svcls	0x004c1900
  f8:	2fa18383 	svccs	0x00a18383
  fc:	854c302f 	strbhi	r3, [ip, #-47]	; 0x2f
 100:	002a302f 	eoreq	r3, sl, pc, lsr #32
 104:	2f020402 	svccs	0x00020402
 108:	02040200 	andeq	r0, r4, #0, 4
 10c:	04020067 	streq	r0, [r2], #-103	; 0x67
 110:	02006702 	andeq	r6, r0, #524288	; 0x80000
 114:	002f0204 	eoreq	r0, pc, r4, lsl #4
 118:	46020402 	strmi	r0, [r2], -r2, lsl #8
 11c:	01040200 	mrseq	r0, R12_usr
 120:	50062e06 	andpl	r2, r6, r6, lsl #28
 124:	02009f31 	andeq	r9, r0, #49, 30	; 0xc4
 128:	66060104 	strvs	r0, [r6], -r4, lsl #2
 12c:	1202bb06 	andne	fp, r2, #6144	; 0x1800
 130:	a9010100 	stmdbge	r1, {r8}
 134:	02000001 	andeq	r0, r0, #1
 138:	00014300 	andeq	r4, r1, r0, lsl #6
 13c:	fb010200 	blx	40946 <__bss_end__+0x372e6>
 140:	01000d0e 	tsteq	r0, lr, lsl #26
 144:	00010101 	andeq	r0, r1, r1, lsl #2
 148:	00010000 	andeq	r0, r1, r0
 14c:	752f0100 	strvc	r0, [pc, #-256]!	; 54 <_start-0x7fac>
 150:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; ffffff8c <__bss_end__+0xffff692c>
 154:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 158:	6c65432f 	stclvs	3, cr4, [r5], #-188	; 0xffffff44
 15c:	2f72616c 	svccs	0x0072616c
 160:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 164:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 168:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 16c:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 170:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
 174:	37317363 	ldrcc	r7, [r1, -r3, ror #6]!
 178:	6c2f6530 	cfstr32vs	mvfx6, [pc], #-192	; c0 <_start-0x7f40>
 17c:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
 180:	612f6363 	teqvs	pc, r3, ror #6
 184:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 188:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 18c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 190:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 194:	692f332e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, r9, ip, sp}	; <UNPREDICTABLE>
 198:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
 19c:	2f006564 	svccs	0x00006564
 1a0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 1a4:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 1a8:	6a6e6169 	bvs	1b98754 <__bss_end__+0x1b8f0f4>
 1ac:	442f6e75 	strtmi	r6, [pc], #-3701	; 1b4 <_start-0x7e4c>
 1b0:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 1b4:	732f706f 	teqvc	pc, #111	; 0x6f
 1b8:	6f6f6863 	svcvs	0x006f6863
 1bc:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 1c0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 1c4:	30323931 	eorscc	r3, r2, r1, lsr r9
 1c8:	3153432f 	cmpcc	r3, pc, lsr #6
 1cc:	2f453034 	svccs	0x00453034
 1d0:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 1d4:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 1d8:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 1dc:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 1e0:	2f006970 	svccs	0x00006970
 1e4:	2f727375 	svccs	0x00727375
 1e8:	61636f6c 	cmnvs	r3, ip, ror #30
 1ec:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
 1f0:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
 1f4:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 1f8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 1fc:	61652d65 	cmnvs	r5, r5, ror #26
 200:	342f6962 	strtcc	r6, [pc], #-2402	; 208 <_start-0x7df8>
 204:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 208:	3173632d 	cmncc	r3, sp, lsr #6
 20c:	2f653037 	svccs	0x00653037
 210:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 214:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 218:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 21c:	6e692f69 	cdpvs	15, 6, cr2, cr9, cr9, {3}
 220:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
 224:	51000065 	tstpl	r0, r5, rrx
 228:	0000682e 	andeq	r6, r0, lr, lsr #16
 22c:	70720000 	rsbsvc	r0, r2, r0
 230:	68742d69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, sl, fp, sp}^
 234:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 238:	0000632e 	andeq	r6, r0, lr, lsr #6
 23c:	74730000 	ldrbtvc	r0, [r3], #-0
 240:	66656464 	strbtvs	r6, [r5], -r4, ror #8
 244:	0100682e 	tsteq	r0, lr, lsr #16
 248:	74730000 	ldrbtvc	r0, [r3], #-0
 24c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
 250:	6363672d 	cmnvs	r3, #11796480	; 0xb40000
 254:	0100682e 	tsteq	r0, lr, lsr #16
 258:	70720000 	rsbsvc	r0, r2, r0
 25c:	68742d69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, sl, fp, sp}^
 260:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 264:	0000682e 	andeq	r6, r0, lr, lsr #16
 268:	70720000 	rsbsvc	r0, r2, r0
 26c:	00682e69 	rsbeq	r2, r8, r9, ror #28
 270:	73000002 	movwvc	r0, #2
 274:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
 278:	00682e67 	rsbeq	r2, r8, r7, ror #28
 27c:	00000003 	andeq	r0, r0, r3
 280:	24020500 	strcs	r0, [r2], #-1280	; 0x500
 284:	03000081 	movweq	r0, #129	; 0x81
 288:	0301010e 	movweq	r0, #4366	; 0x110e
 28c:	4b138212 	blmi	4e0adc <__bss_end__+0x4d747c>
 290:	032f6867 	teqeq	pc, #6750208	; 0x670000
 294:	002f4a6b 	eoreq	r4, pc, fp, ror #20
 298:	06010402 	streq	r0, [r1], -r2, lsl #8
 29c:	30bb064a 	adcscc	r0, fp, sl, asr #12
 2a0:	0402004b 	streq	r0, [r2], #-75	; 0x4b
 2a4:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 2a8:	304b4bbd 	strhcc	r4, [fp], #-189	; 0xffffff43
 2ac:	77030204 	strvc	r0, [r3, -r4, lsl #4]
 2b0:	4c4b309e 	mcrrmi	0, 9, r3, fp, cr14
 2b4:	66740368 	ldrbtvs	r0, [r4], -r8, ror #6
 2b8:	82110314 	andshi	r0, r1, #20, 6	; 0x50000000
 2bc:	4a09032f 	bmi	240f80 <__bss_end__+0x237920>
 2c0:	032e7a03 	teqeq	lr, #12288	; 0x3000
 2c4:	6968820b 	stmdbvs	r8!, {r0, r1, r3, r9, pc}^
 2c8:	9f2e0a03 	svcls	0x002e0a03
 2cc:	35bff483 	ldrcc	pc, [pc, #1155]!	; 757 <_start-0x78a9>
 2d0:	09039f85 	stmdbeq	r3, {r0, r2, r7, r8, r9, sl, fp, ip, pc}
 2d4:	678935ba 			; <UNDEFINED> instruction: 0x678935ba
 2d8:	024b672f 	subeq	r6, fp, #12320768	; 0xbc0000
 2dc:	0101000c 	tsteq	r1, ip
 2e0:	000000ec 	andeq	r0, r0, ip, ror #1
 2e4:	00d00002 	sbcseq	r0, r0, r2
 2e8:	01020000 	mrseq	r0, (UNDEF: 2)
 2ec:	000d0efb 	strdeq	r0, [sp], -fp
 2f0:	01010101 	tsteq	r1, r1, lsl #2
 2f4:	01000000 	mrseq	r0, (UNDEF: 0)
 2f8:	6c010000 	stcvs	0, cr0, [r1], {-0}
 2fc:	00636269 	rsbeq	r6, r3, r9, ror #4
 300:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 304:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
 308:	432f6c61 	teqmi	pc, #24832	; 0x6100
 30c:	616c6c65 	cmnvs	ip, r5, ror #24
 310:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 314:	6f6e2d6d 	svcvs	0x006e2d6d
 318:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 31c:	2f696261 	svccs	0x00696261
 320:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 324:	73632d33 	cmnvc	r3, #3264	; 0xcc0
 328:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
 32c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 330:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
 334:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 338:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 33c:	61652d65 	cmnvs	r5, r5, ror #26
 340:	342f6962 	strtcc	r6, [pc], #-2402	; 348 <_start-0x7cb8>
 344:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 348:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 34c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
 350:	73752f00 	cmnvc	r5, #0, 30
 354:	6f6c2f72 	svcvs	0x006c2f72
 358:	2f6c6163 	svccs	0x006c6163
 35c:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
 360:	612f7261 	teqvs	pc, r1, ror #4
 364:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 368:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 36c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 370:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 374:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
 378:	30373173 	eorscc	r3, r7, r3, ror r1
 37c:	72612f65 	rsbvc	r2, r1, #404	; 0x194
 380:	6f6e2d6d 	svcvs	0x006e2d6d
 384:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 388:	2f696261 	svccs	0x00696261
 38c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 390:	00656475 	rsbeq	r6, r5, r5, ror r4
 394:	6d656d00 	stclvs	13, cr6, [r5, #-0]
 398:	2e746573 	mrccs	5, 3, r6, cr4, cr3, {3}
 39c:	00010063 	andeq	r0, r1, r3, rrx
 3a0:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
 3a4:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
 3a8:	00020068 	andeq	r0, r2, r8, rrx
 3ac:	72747300 	rsbsvc	r7, r4, #0, 6
 3b0:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
 3b4:	00030068 	andeq	r0, r3, r8, rrx
 3b8:	05000000 	streq	r0, [r0, #-0]
 3bc:	00837402 	addeq	r7, r3, r2, lsl #8
 3c0:	4c131400 	cfldrsmi	mvf1, [r3], {-0}
 3c4:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 3c8:	024d4901 	subeq	r4, sp, #16384	; 0x4000
 3cc:	01010002 	tsteq	r1, r2
 3d0:	00000102 	andeq	r0, r0, r2, lsl #2
 3d4:	00eb0002 	rsceq	r0, fp, r2
 3d8:	01020000 	mrseq	r0, (UNDEF: 2)
 3dc:	000d0efb 	strdeq	r0, [sp], -fp
 3e0:	01010101 	tsteq	r1, r1, lsl #2
 3e4:	01000000 	mrseq	r0, (UNDEF: 0)
 3e8:	6c010000 	stcvs	0, cr0, [r1], {-0}
 3ec:	00636269 	rsbeq	r6, r3, r9, ror #4
 3f0:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 3f4:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
 3f8:	432f6c61 	teqmi	pc, #24832	; 0x6100
 3fc:	616c6c65 	cmnvs	ip, r5, ror #24
 400:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 404:	6f6e2d6d 	svcvs	0x006e2d6d
 408:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 40c:	2f696261 	svccs	0x00696261
 410:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 414:	73632d33 	cmnvc	r3, #3264	; 0xcc0
 418:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
 41c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 420:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
 424:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 428:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 42c:	61652d65 	cmnvs	r5, r5, ror #26
 430:	342f6962 	strtcc	r6, [pc], #-2402	; 438 <_start-0x7bc8>
 434:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 438:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 43c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
 440:	73552f00 	cmpvc	r5, #0, 30
 444:	2f737265 	svccs	0x00737265
 448:	61697262 	cmnvs	r9, r2, ror #4
 44c:	6e756a6e 	vsubvs.f32	s13, s10, s29
 450:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 454:	706f746b 	rsbvc	r7, pc, fp, ror #8
 458:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 45c:	2f6c6f6f 	svccs	0x006c6f6f
 460:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 464:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 468:	432f3032 	teqmi	pc, #50	; 0x32
 46c:	30343153 	eorscc	r3, r4, r3, asr r1
 470:	73632f45 	cmnvc	r3, #276	; 0x114
 474:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 478:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 47c:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 2e0 <_start-0x7d20>
 480:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 484:	72700000 	rsbsvc	r0, r0, #0
 488:	6b746e69 	blvs	1d1be34 <__bss_end__+0x1d127d4>
 48c:	0100632e 	tsteq	r0, lr, lsr #6
 490:	74730000 	ldrbtvc	r0, [r3], #-0
 494:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
 498:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 49c:	623c0000 	eorsvs	r0, ip, #0
 4a0:	746c6975 	strbtvc	r6, [ip], #-2421	; 0x975
 4a4:	3e6e692d 	cdpcc	9, 6, cr6, cr14, cr13, {1}
 4a8:	00000000 	andeq	r0, r0, r0
 4ac:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 4b0:	00030068 	andeq	r0, r3, r8, rrx
 4b4:	2d617600 	stclcs	6, cr7, [r1, #-0]
 4b8:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 4bc:	682e6b74 	stmdavs	lr!, {r2, r4, r5, r6, r8, r9, fp, sp, lr}
 4c0:	00000100 	andeq	r0, r0, r0, lsl #2
 4c4:	02050000 	andeq	r0, r5, #0
 4c8:	00008394 	muleq	r0, r4, r3
 4cc:	bf4b6b17 	svclt	0x004b6b17
 4d0:	000e0289 	andeq	r0, lr, r9, lsl #5
 4d4:	00960101 	addseq	r0, r6, r1, lsl #2
 4d8:	00020000 	andeq	r0, r2, r0
 4dc:	0000006f 	andeq	r0, r0, pc, rrx
 4e0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 4e4:	0101000d 	tsteq	r1, sp
 4e8:	00000101 	andeq	r0, r0, r1, lsl #2
 4ec:	00000100 	andeq	r0, r0, r0, lsl #2
 4f0:	62696c01 	rsbvs	r6, r9, #256	; 0x100
 4f4:	552f0063 	strpl	r0, [pc, #-99]!	; 499 <_start-0x7b67>
 4f8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 4fc:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 500:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 504:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 508:	6f746b73 	svcvs	0x00746b73
 50c:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 510:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 378 <_start-0x7c88>
 514:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 518:	31726574 	cmncc	r2, r4, ror r5
 51c:	2f303239 	svccs	0x00303239
 520:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 524:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 528:	30343173 	eorscc	r3, r4, r3, ror r1
 52c:	30322d65 	eorscc	r2, r2, r5, ror #26
 530:	2f6e6977 	svccs	0x006e6977
 534:	7062696c 	rsbvc	r6, r2, ip, ror #18
 538:	70000069 	andvc	r0, r0, r9, rrx
 53c:	2e6b7475 	mcrcs	4, 3, r7, cr11, cr5, {3}
 540:	00010063 	andeq	r0, r1, r3, rrx
 544:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 548:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 54c:	00000000 	andeq	r0, r0, r0
 550:	83ec0205 	mvnhi	r0, #1342177280	; 0x50000000
 554:	4c150000 	ldcmi	0, cr0, [r5], {-0}
 558:	0402002d 	streq	r0, [r2], #-45	; 0x2d
 55c:	02002f02 	andeq	r2, r0, #2, 30
 560:	00490204 	subeq	r0, r9, r4, lsl #4
 564:	06010402 	streq	r0, [r1], -r2, lsl #8
 568:	026b062e 	rsbeq	r0, fp, #48234496	; 0x2e00000
 56c:	01010006 	tsteq	r1, r6
 570:	000001dc 	ldrdeq	r0, [r0], -ip
 574:	00df0002 	sbcseq	r0, pc, r2
 578:	01020000 	mrseq	r0, (UNDEF: 2)
 57c:	000d0efb 	strdeq	r0, [sp], -fp
 580:	01010101 	tsteq	r1, r1, lsl #2
 584:	01000000 	mrseq	r0, (UNDEF: 0)
 588:	6c010000 	stcvs	0, cr0, [r1], {-0}
 58c:	00636269 	rsbeq	r6, r3, r9, ror #4
 590:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 594:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
 598:	432f6c61 	teqmi	pc, #24832	; 0x6100
 59c:	616c6c65 	cmnvs	ip, r5, ror #24
 5a0:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 5a4:	6f6e2d6d 	svcvs	0x006e2d6d
 5a8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 5ac:	2f696261 	svccs	0x00696261
 5b0:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 5b4:	73632d33 	cmnvc	r3, #3264	; 0xcc0
 5b8:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
 5bc:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 5c0:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
 5c4:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 5c8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 5cc:	61652d65 	cmnvs	r5, r5, ror #26
 5d0:	342f6962 	strtcc	r6, [pc], #-2402	; 5d8 <_start-0x7a28>
 5d4:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 5d8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 5dc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
 5e0:	73552f00 	cmpvc	r5, #0, 30
 5e4:	2f737265 	svccs	0x00737265
 5e8:	61697262 	cmnvs	r9, r2, ror #4
 5ec:	6e756a6e 	vsubvs.f32	s13, s10, s29
 5f0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 5f4:	706f746b 	rsbvc	r7, pc, fp, ror #8
 5f8:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 5fc:	2f6c6f6f 	svccs	0x006c6f6f
 600:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 604:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 608:	432f3032 	teqmi	pc, #50	; 0x32
 60c:	30343153 	eorscc	r3, r4, r3, asr r1
 610:	73632f45 	cmnvc	r3, #276	; 0x114
 614:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 618:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 61c:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 480 <_start-0x7b80>
 620:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 624:	61760000 	cmnvs	r6, r0
 628:	6972702d 	ldmdbvs	r2!, {r0, r2, r3, r5, ip, sp, lr}^
 62c:	2e6b746e 	cdpcs	4, 6, cr7, cr11, cr14, {3}
 630:	00010063 	andeq	r0, r1, r3, rrx
 634:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
 638:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
 63c:	00020068 	andeq	r0, r2, r8, rrx
 640:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 644:	0300682e 	movweq	r6, #2094	; 0x82e
 648:	623c0000 	eorsvs	r0, ip, #0
 64c:	746c6975 	strbtvc	r6, [ip], #-2421	; 0x975
 650:	3e6e692d 	cdpcc	9, 6, cr6, cr14, cr13, {1}
 654:	00000000 	andeq	r0, r0, r0
 658:	02050000 	andeq	r0, r5, #0
 65c:	00008420 	andeq	r8, r0, r0, lsr #8
 660:	01012603 	tsteq	r1, r3, lsl #12
 664:	2d3113a5 	ldccs	3, cr1, [r1, #-660]!	; 0xfffffd6c
 668:	02040200 	andeq	r0, r4, #0, 4
 66c:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 670:	02002d02 	andeq	r2, r0, #2, 26	; 0x80
 674:	002f0204 	eoreq	r0, pc, r4, lsl #4
 678:	2d010402 	cfstrscs	mvf0, [r1, #-8]
 67c:	14304c4c 	ldrtne	r4, [r0], #-3148	; 0xc4c
 680:	004f2f4b 	subeq	r2, pc, fp, asr #30
 684:	67020402 	strvs	r0, [r2, -r2, lsl #8]
 688:	01040200 	mrseq	r0, R12_usr
 68c:	304d4c65 	subcc	r4, sp, r5, ror #24
 690:	30312fa0 	eorscc	r2, r1, r0, lsr #31
 694:	84162602 	ldrhi	r2, [r6], #-1538	; 0x602
 698:	02002c2d 	andeq	r2, r0, #11520	; 0x2d00
 69c:	00300104 	eorseq	r0, r0, r4, lsl #2
 6a0:	33010402 	movwcc	r0, #5122	; 0x1402
 6a4:	02006606 	andeq	r6, r0, #6291456	; 0x600000
 6a8:	002e0104 	eoreq	r0, lr, r4, lsl #2
 6ac:	06010402 	streq	r0, [r1], -r2, lsl #8
 6b0:	2f672108 	svccs	0x00672108
 6b4:	03827303 	orreq	r7, r2, #201326592	; 0xc000000
 6b8:	02002e13 	andeq	r2, r0, #304	; 0x130
 6bc:	2e060104 	adfcss	f0, f6, f4
 6c0:	01040200 	mrseq	r0, R12_usr
 6c4:	4b6a9f06 	blmi	1aa82e4 <__bss_end__+0x1a9ec84>
 6c8:	032e6703 	teqeq	lr, #786432	; 0xc0000
 6cc:	02002e21 	andeq	r2, r0, #528	; 0x210
 6d0:	2e060104 	adfcss	f0, f6, f4
 6d4:	01040200 	mrseq	r0, R12_usr
 6d8:	02009f06 	andeq	r9, r0, #6, 30
 6dc:	bd6a0104 	stflte	f0, [sl, #-16]!
 6e0:	7fa603f3 	svcvc	0x00a603f3
 6e4:	002f2008 	eoreq	r2, pc, r8
 6e8:	06010402 	streq	r0, [r1], -r2, lsl #8
 6ec:	4bbb064a 	blmi	feec201c <__bss_end__+0xfeeb89bc>
 6f0:	00da032f 	sbcseq	r0, sl, pc, lsr #6
 6f4:	484c83f2 	stmdami	ip, {r1, r4, r5, r6, r7, r8, r9, pc}^
 6f8:	842f2f31 	strthi	r2, [pc], #-3889	; 700 <_start-0x7900>
 6fc:	4d2d2f4b 	stcmi	15, cr2, [sp, #-300]!	; 0xfffffed4
 700:	832f3031 	teqhi	pc, #49	; 0x31
 704:	01040200 	mrseq	r0, R12_usr
 708:	0200be2c 	andeq	fp, r0, #44, 28	; 0x2c0
 70c:	4a060104 	bmi	180b24 <__bss_end__+0x1774c4>
 710:	3602bc06 	strcc	fp, [r2], -r6, lsl #24
 714:	ba0e0316 	blt	381374 <__bss_end__+0x377d14>
 718:	08302108 	ldmdaeq	r0!, {r3, r8, sp}
 71c:	21083121 	tstcs	r8, r1, lsr #2
 720:	30210830 	eorcc	r0, r1, r0, lsr r8
 724:	2108304b 	tstcs	r8, fp, asr #32
 728:	2f31d930 	svccs	0x0031d930
 72c:	01040200 	mrseq	r0, R12_usr
 730:	04020065 	streq	r0, [r2], #-101	; 0x65
 734:	004a0602 	subeq	r0, sl, r2, lsl #12
 738:	06010402 	streq	r0, [r1], -r2, lsl #8
 73c:	00664203 	rsbeq	r4, r6, r3, lsl #4
 740:	06020402 	streq	r0, [r2], -r2, lsl #8
 744:	c2030666 	andgt	r0, r3, #106954752	; 0x6600000
 748:	02684a00 	rsbeq	r4, r8, #0, 20
 74c:	01010010 	tsteq	r1, r0, lsl r0
 750:	00000093 	muleq	r0, r3, r0
 754:	007d0002 	rsbseq	r0, sp, r2
 758:	01020000 	mrseq	r0, (UNDEF: 2)
 75c:	000d0efb 	strdeq	r0, [sp], -fp
 760:	01010101 	tsteq	r1, r1, lsl #2
 764:	01000000 	mrseq	r0, (UNDEF: 0)
 768:	63010000 	movwvs	r0, #4096	; 0x1000
 76c:	30343173 	eorscc	r3, r4, r3, ror r1
 770:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 774:	552f0063 	strpl	r0, [pc, #-99]!	; 719 <_start-0x78e7>
 778:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 77c:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 780:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 784:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 788:	6f746b73 	svcvs	0x00746b73
 78c:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 790:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 5f8 <_start-0x7a08>
 794:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 798:	31726574 	cmncc	r2, r4, ror r5
 79c:	2f303239 	svccs	0x00303239
 7a0:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 7a4:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 7a8:	30343173 	eorscc	r3, r4, r3, ror r1
 7ac:	30322d65 	eorscc	r2, r2, r5, ror #26
 7b0:	2f6e6977 	svccs	0x006e6977
 7b4:	7062696c 	rsbvc	r6, r2, ip, ror #18
 7b8:	63000069 	movwvs	r0, #105	; 0x69
 7bc:	6e61656c 	cdpvs	5, 6, cr6, cr1, cr12, {3}
 7c0:	6265722d 	rsbvs	r7, r5, #-805306366	; 0xd0000002
 7c4:	2e746f6f 	cdpcs	15, 7, cr6, cr4, cr15, {3}
 7c8:	00010063 	andeq	r0, r1, r3, rrx
 7cc:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 7d0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 7d4:	00000000 	andeq	r0, r0, r0
 7d8:	89100205 	ldmdbhi	r0, {r0, r2, r9}
 7dc:	2f150000 	svccs	0x00150000
 7e0:	06024b83 	streq	r4, [r2], -r3, lsl #23
 7e4:	96010100 	strls	r0, [r1], -r0, lsl #2
 7e8:	02000000 	andeq	r0, r0, #0
 7ec:	00007700 	andeq	r7, r0, r0, lsl #14
 7f0:	fb010200 	blx	40ffa <__bss_end__+0x3799a>
 7f4:	01000d0e 	tsteq	r0, lr, lsl #26
 7f8:	00010101 	andeq	r0, r1, r1, lsl #2
 7fc:	00010000 	andeq	r0, r1, r0
 800:	73630100 	cmnvc	r3, #0, 2
 804:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 808:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 80c:	73552f00 	cmpvc	r5, #0, 30
 810:	2f737265 	svccs	0x00737265
 814:	61697262 	cmnvs	r9, r2, ror #4
 818:	6e756a6e 	vsubvs.f32	s13, s10, s29
 81c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 820:	706f746b 	rsbvc	r7, pc, fp, ror #8
 824:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 828:	2f6c6f6f 	svccs	0x006c6f6f
 82c:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 830:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 834:	432f3032 	teqmi	pc, #50	; 0x32
 838:	30343153 	eorscc	r3, r4, r3, asr r1
 83c:	73632f45 	cmnvc	r3, #276	; 0x114
 840:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 844:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 848:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 6ac <_start-0x7954>
 84c:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 850:	73630000 	cmnvc	r3, #0
 854:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
 858:	0100632e 	tsteq	r0, lr, lsr #6
 85c:	70720000 	rsbsvc	r0, r2, r0
 860:	00682e69 	rsbeq	r2, r8, r9, ror #28
 864:	00000002 	andeq	r0, r0, r2
 868:	38020500 	stmdacc	r2, {r8, sl}
 86c:	14000089 	strne	r0, [r0], #-137	; 0x89
 870:	2d2f3132 	stfcss	f3, [pc, #-200]!	; 7b0 <_start-0x7850>
 874:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 878:	2f4d4901 	svccs	0x004d4901
 87c:	01000602 	tsteq	r0, r2, lsl #12
 880:	00009901 	andeq	r9, r0, r1, lsl #18
 884:	77000200 	strvc	r0, [r0, -r0, lsl #4]
 888:	02000000 	andeq	r0, r0, #0
 88c:	0d0efb01 	vstreq	d15, [lr, #-4]
 890:	01010100 	mrseq	r0, (UNDEF: 17)
 894:	00000001 	andeq	r0, r0, r1
 898:	01000001 	tsteq	r0, r1
 89c:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 8a0:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
 8a4:	2f006372 	svccs	0x00006372
 8a8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 8ac:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 8b0:	6a6e6169 	bvs	1b98e5c <__bss_end__+0x1b8f7fc>
 8b4:	442f6e75 	strtmi	r6, [pc], #-3701	; 8bc <_start-0x7744>
 8b8:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 8bc:	732f706f 	teqvc	pc, #111	; 0x6f
 8c0:	6f6f6863 	svcvs	0x006f6863
 8c4:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 8c8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 8cc:	30323931 	eorscc	r3, r2, r1, lsr r9
 8d0:	3153432f 	cmpcc	r3, pc, lsr #6
 8d4:	2f453034 	svccs	0x00453034
 8d8:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 8dc:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 8e0:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 8e4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 8e8:	00006970 	andeq	r6, r0, r0, ror r9
 8ec:	6f626572 	svcvs	0x00626572
 8f0:	632e746f 	teqvs	lr, #1862270976	; 0x6f000000
 8f4:	00000100 	andeq	r0, r0, r0, lsl #2
 8f8:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 8fc:	00020068 	andeq	r0, r2, r8, rrx
 900:	05000000 	streq	r0, [r0, #-0]
 904:	00896c02 	addeq	r6, r9, r2, lsl #24
 908:	010d0300 	mrseq	r0, SP_mon
 90c:	852f3114 	strhi	r3, [pc, #-276]!	; 800 <_start-0x7800>
 910:	4d4b2f15 	stclmi	15, cr2, [fp, #-84]	; 0xffffffac
 914:	5235672f 	eorspl	r6, r5, #12320768	; 0xbc0000
 918:	00100267 	andseq	r0, r0, r7, ror #4
 91c:	00a00101 	adceq	r0, r0, r1, lsl #2
 920:	00020000 	andeq	r0, r2, r0
 924:	00000076 	andeq	r0, r0, r6, ror r0
 928:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 92c:	0101000d 	tsteq	r1, sp
 930:	00000101 	andeq	r0, r0, r1, lsl #2
 934:	00000100 	andeq	r0, r0, r0, lsl #2
 938:	31736301 	cmncc	r3, r1, lsl #6
 93c:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 940:	00637273 	rsbeq	r7, r3, r3, ror r2
 944:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 948:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 94c:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 950:	2f6e756a 	svccs	0x006e756a
 954:	6b736544 	blvs	1cd9e6c <__bss_end__+0x1cd080c>
 958:	2f706f74 	svccs	0x00706f74
 95c:	6f686373 	svcvs	0x00686373
 960:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 964:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 968:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 96c:	53432f30 	movtpl	r2, #16176	; 0x3f30
 970:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 974:	3173632f 	cmncc	r3, pc, lsr #6
 978:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 97c:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 980:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 984:	00697062 	rsbeq	r7, r9, r2, rrx
 988:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
 98c:	632e7265 	teqvs	lr, #1342177286	; 0x50000006
 990:	00000100 	andeq	r0, r0, r0, lsl #2
 994:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 998:	00020068 	andeq	r0, r2, r8, rrx
 99c:	05000000 	streq	r0, [r0, #-0]
 9a0:	0089e002 	addeq	lr, r9, r2
 9a4:	2f131600 	svccs	0x00131600
 9a8:	0402002d 	streq	r0, [r2], #-45	; 0x2d
 9ac:	062e0601 	strteq	r0, [lr], -r1, lsl #12
 9b0:	4b2f3168 	blmi	bccf58 <__bss_end__+0xbc38f8>
 9b4:	2f4c4b4c 	svccs	0x004c4b4c
 9b8:	842f2f6a 	strthi	r2, [pc], #-3946	; 9c0 <_start-0x7640>
 9bc:	0008022f 	andeq	r0, r8, pc, lsr #4
 9c0:	016b0101 	cmneq	fp, r1, lsl #2
 9c4:	00020000 	andeq	r0, r2, r0
 9c8:	00000120 	andeq	r0, r0, r0, lsr #2
 9cc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 9d0:	0101000d 	tsteq	r1, sp
 9d4:	00000101 	andeq	r0, r0, r1, lsl #2
 9d8:	00000100 	andeq	r0, r0, r0, lsl #2
 9dc:	2d796d01 	ldclcs	13, cr6, [r9, #-4]!
 9e0:	00637273 	rsbeq	r7, r3, r3, ror r2
 9e4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 9e8:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
 9ec:	432f6c61 	teqmi	pc, #24832	; 0x6100
 9f0:	616c6c65 	cmnvs	ip, r5, ror #24
 9f4:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 9f8:	6f6e2d6d 	svcvs	0x006e2d6d
 9fc:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 a00:	2f696261 	svccs	0x00696261
 a04:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 a08:	73632d33 	cmnvc	r3, #3264	; 0xcc0
 a0c:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
 a10:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 a14:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
 a18:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 a1c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 a20:	61652d65 	cmnvs	r5, r5, ror #26
 a24:	342f6962 	strtcc	r6, [pc], #-2402	; a2c <_start-0x75d4>
 a28:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 a2c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 a30:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
 a34:	73552f00 	cmpvc	r5, #0, 30
 a38:	2f737265 	svccs	0x00737265
 a3c:	61697262 	cmnvs	r9, r2, ror #4
 a40:	6e756a6e 	vsubvs.f32	s13, s10, s29
 a44:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 a48:	706f746b 	rsbvc	r7, pc, fp, ror #8
 a4c:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 a50:	2f6c6f6f 	svccs	0x006c6f6f
 a54:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 a58:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 a5c:	432f3032 	teqmi	pc, #50	; 0x32
 a60:	30343153 	eorscc	r3, r4, r3, asr r1
 a64:	73632f45 	cmnvc	r3, #276	; 0x114
 a68:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 a6c:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 a70:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 8d4 <_start-0x772c>
 a74:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 a78:	73752f00 	cmnvc	r5, #0, 30
 a7c:	6f6c2f72 	svcvs	0x006c2f72
 a80:	2f6c6163 	svccs	0x006c6163
 a84:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
 a88:	612f7261 	teqvs	pc, r1, ror #4
 a8c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 a90:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 a94:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 a98:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 a9c:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
 aa0:	30373173 	eorscc	r3, r7, r3, ror r1
 aa4:	72612f65 	rsbvc	r2, r1, #404	; 0x194
 aa8:	6f6e2d6d 	svcvs	0x006e2d6d
 aac:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 ab0:	2f696261 	svccs	0x00696261
 ab4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 ab8:	00656475 	rsbeq	r6, r5, r5, ror r4
 abc:	616d6b00 	cmnvs	sp, r0, lsl #22
 ac0:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 ac4:	0100632e 	tsteq	r0, lr, lsr #6
 ac8:	74730000 	ldrbtvc	r0, [r3], #-0
 acc:	66656464 	strbtvs	r6, [r5], -r4, ror #8
 ad0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 ad4:	70720000 	rsbsvc	r0, r2, r0
 ad8:	00682e69 	rsbeq	r2, r8, r9, ror #28
 adc:	73000003 	movwvc	r0, #3
 ae0:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
 ae4:	00682e67 	rsbeq	r2, r8, r7, ror #28
 ae8:	00000004 	andeq	r0, r0, r4
 aec:	34020500 	strcc	r0, [r2], #-1280	; 0x500
 af0:	0300008d 	movweq	r0, #141	; 0x8d
 af4:	002f0118 	eoreq	r0, pc, r8, lsl r1	; <UNPREDICTABLE>
 af8:	06010402 	streq	r0, [r1], -r2, lsl #8
 afc:	4bbc0682 	blmi	fef0250c <__bss_end__+0xfeef8eac>
 b00:	be4d4b4b 	vmlslt.f64	d20, d13, d11
 b04:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 b08:	06820601 	streq	r0, [r2], r1, lsl #12
 b0c:	004b4bbc 	strheq	r4, [fp], #-188	; 0xffffff44
 b10:	06010402 	streq	r0, [r1], -r2, lsl #8
 b14:	4bbb064a 	blmi	feec2444 <__bss_end__+0xfeeb8de4>
 b18:	032f3083 	teqeq	pc, #131	; 0x83
 b1c:	002fba0a 	eoreq	fp, pc, sl, lsl #20
 b20:	06010402 	streq	r0, [r1], -r2, lsl #8
 b24:	67bb0682 	ldrvs	r0, [fp, r2, lsl #13]!
 b28:	14c213f9 	strbne	r1, [r2], #1017	; 0x3f9
 b2c:	01000802 	tsteq	r0, r2, lsl #16
 b30:	00008601 	andeq	r8, r0, r1, lsl #12
 b34:	72000200 	andvc	r0, r0, #0, 4
 b38:	02000000 	andeq	r0, r0, #0
 b3c:	0d0efb01 	vstreq	d15, [lr, #-4]
 b40:	01010100 	mrseq	r0, (UNDEF: 17)
 b44:	00000001 	andeq	r0, r0, r1
 b48:	01000001 	tsteq	r0, r1
 b4c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 b50:	73552f00 	cmpvc	r5, #0, 30
 b54:	2f737265 	svccs	0x00737265
 b58:	61697262 	cmnvs	r9, r2, ror #4
 b5c:	6e756a6e 	vsubvs.f32	s13, s10, s29
 b60:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 b64:	706f746b 	rsbvc	r7, pc, fp, ror #8
 b68:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 b6c:	2f6c6f6f 	svccs	0x006c6f6f
 b70:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 b74:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 b78:	432f3032 	teqmi	pc, #50	; 0x32
 b7c:	30343153 	eorscc	r3, r4, r3, asr r1
 b80:	73632f45 	cmnvc	r3, #276	; 0x114
 b84:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 b88:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 b8c:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 9f0 <_start-0x7610>
 b90:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 b94:	75700000 	ldrbvc	r0, [r0, #-0]!
 b98:	61686374 	smcvs	34356	; 0x8634
 b9c:	00632e72 	rsbeq	r2, r3, r2, ror lr
 ba0:	72000001 	andvc	r0, r0, #1
 ba4:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 ba8:	00000200 	andeq	r0, r0, r0, lsl #4
 bac:	02050000 	andeq	r0, r5, #0
 bb0:	00008eac 	andeq	r8, r0, ip, lsr #29
 bb4:	06024a14 			; <UNDEFINED> instruction: 0x06024a14
 bb8:	Address 0x0000000000000bb8 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
   4:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
   8:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
   c:	2f6e756a 	svccs	0x006e756a
  10:	6b736544 	blvs	1cd9528 <__bss_end__+0x1ccfec8>
  14:	2f706f74 	svccs	0x00706f74
  18:	6f686373 	svcvs	0x00686373
  1c:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
  20:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
  24:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
  28:	53432f30 	movtpl	r2, #16176	; 0x3f30
  2c:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
  30:	3173632f 	cmncc	r3, pc, lsr #6
  34:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
  38:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
  3c:	616c2f6e 	cmnvs	ip, lr, ror #30
  40:	362f7362 	strtcc	r7, [pc], -r2, ror #6
  44:	7268742d 	rsbvc	r7, r8, #754974720	; 0x2d000000
  48:	73646165 	cmnvc	r4, #1073741849	; 0x40000019
  4c:	742d322f 	strtvc	r3, [sp], #-559	; 0x22f
  50:	61657268 	cmnvs	r5, r8, ror #4
  54:	6e007364 	cdpvs	3, 0, cr7, cr0, cr4, {3}
  58:	00747865 	rsbseq	r7, r4, r5, ror #16
  5c:	5f697072 	svcpl	0x00697072
  60:	6f626572 	svcvs	0x00626572
  64:	4700746f 	strmi	r7, [r0, -pc, ror #8]
  68:	4320554e 	teqmi	r0, #327155712	; 0x13800000
  6c:	382e3420 	stmdacc	lr!, {r5, sl, ip, sp}
  70:	2d20332e 	stccs	3, cr3, [r0, #-184]!	; 0xffffff48
  74:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0x36d
  78:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  7c:	36373131 			; <UNDEFINED> instruction: 0x36373131
  80:	2d667a6a 	vstmdbcs	r6!, {s15-s120}
  84:	6d2d2073 	stcvs	0, cr2, [sp, #-460]!	; 0xfffffe34
  88:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0x574
  8c:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  90:	36373131 			; <UNDEFINED> instruction: 0x36373131
  94:	2d667a6a 	vstmdbcs	r6!, {s15-s120}
  98:	672d2073 			; <UNDEFINED> instruction: 0x672d2073
  9c:	20626467 	rsbcs	r6, r2, r7, ror #8
  a0:	20674f2d 	rsbcs	r4, r7, sp, lsr #30
  a4:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0x32d
  a8:	756e673d 	strbvc	r6, [lr, #-1853]!	; 0x73d
  ac:	2d203939 	stccs	9, cr3, [r0, #-228]!	; 0xffffff1c
  b0:	65726666 	ldrbvs	r6, [r2, #-1638]!	; 0x666
  b4:	61747365 	cmnvs	r4, r5, ror #6
  b8:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
  bc:	6f6e0067 	svcvs	0x006e0067
  c0:	69616d74 	stmdbvs	r1!, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^
  c4:	7473006e 	ldrbtvc	r0, [r3], #-110	; 0x6e
  c8:	006b6361 	rsbeq	r6, fp, r1, ror #6
  cc:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
  d0:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
  d4:	6e750074 	mrcvs	0, 3, r0, cr5, cr4, {3}
  d8:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
  dc:	63206465 	teqvs	r0, #1694498816	; 0x65000000
  e0:	00726168 	rsbseq	r6, r2, r8, ror #2
  e4:	61656c63 	cmnvs	r5, r3, ror #24
  e8:	65725f6e 	ldrbvs	r5, [r2, #-3950]!	; 0xf6e
  ec:	746f6f62 	strbtvc	r6, [pc], #-3938	; f4 <_start-0x7f0c>
  f0:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
  f4:	726f665f 	rsbvc	r6, pc, #99614720	; 0x5f00000
  f8:	6873006b 	ldmdavs	r3!, {r0, r1, r3, r5, r6}^
  fc:	2074726f 	rsbscs	r7, r4, pc, ror #4
 100:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 104:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
 108:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
 10c:	616d6b00 	cmnvs	sp, r0, lsl #22
 110:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 114:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 118:	7268745f 	rsbvc	r7, r8, #1593835520	; 0x5f000000
 11c:	5f646165 	svcpl	0x00646165
 120:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 124:	2d310074 	ldccs	0, cr0, [r1, #-464]!	; 0xfffffe30
 128:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0x574
 12c:	7268742d 	rsbvc	r7, r8, #754974720	; 0x2d000000
 130:	2e646165 	powcssz	f6, f4, f5
 134:	68740063 	ldmdavs	r4!, {r0, r1, r5, r6}^
 138:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 13c:	646f635f 	strbtvs	r6, [pc], #-863	; 144 <_start-0x7ebc>
 140:	5f5f0065 	svcpl	0x005f0065
 144:	434e5546 	movtmi	r5, #58694	; 0xe546
 148:	4e4f4954 	mcrmi	9, 2, r4, cr15, cr4, {2}
 14c:	74005f5f 	strvc	r5, [r0], #-3935	; 0xf5f
 150:	61657268 	cmnvs	r5, r8, ror #4
 154:	6f635f64 	svcvs	0x00635f64
 158:	00746e75 	rsbseq	r6, r4, r5, ror lr
 15c:	5f697072 	svcpl	0x00697072
 160:	74697865 	strbtvc	r7, [r9], #-2149	; 0x865
 164:	67657200 	strbvs	r7, [r5, -r0, lsl #4]!
 168:	7661735f 			; <UNDEFINED> instruction: 0x7661735f
 16c:	72615f65 	rsbvc	r5, r1, #404	; 0x194
 170:	6c006165 	stfvss	f6, [r0], {101}	; 0x65
 174:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 178:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 17c:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 180:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
 184:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 188:	70720074 	rsbsvc	r0, r2, r4, ror r0
 18c:	68745f69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 190:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 194:	7400745f 	strvc	r7, [r0], #-1119	; 0x45f
 198:	61657268 	cmnvs	r5, r8, ror #4
 19c:	75735f64 	ldrbvc	r5, [r3, #-3940]!	; 0xf64
 1a0:	6973006d 	ldmdbvs	r3!, {r0, r2, r3, r5, r6}^
 1a4:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
 1a8:	6c006570 	cfstr32vs	mvfx6, [r0], {112}	; 0x70
 1ac:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 1b0:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 1b4:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
 1b8:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 1bc:	7268745f 	rsbvc	r7, r8, #1593835520	; 0x5f000000
 1c0:	00646165 	rsbeq	r6, r4, r5, ror #2
 1c4:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 1c8:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
 1cc:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
 1d0:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
 1d4:	7200745f 	andvc	r7, r0, #1593835520	; 0x5f000000
 1d8:	635f6970 	cmpvs	pc, #112, 18	; 0x1c0000
 1dc:	745f7275 	ldrbvc	r7, [pc], #-629	; 1e4 <_start-0x7e1c>
 1e0:	61657268 	cmnvs	r5, r8, ror #4
 1e4:	6d6b0064 	stclvs	0, cr0, [fp, #-400]!	; 0xfffffe70
 1e8:	6f6c6c61 	svcvs	0x006c6c61
 1ec:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 1f0:	72007469 	andvc	r7, r0, #1761607680	; 0x69000000
 1f4:	00716e75 	rsbseq	r6, r1, r5, ror lr
 1f8:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
 1fc:	5100745f 	tstpl	r0, pc, asr r4
 200:	706f705f 	rsbvc	r7, pc, pc, asr r0	; <UNPREDICTABLE>
 204:	616d6b00 	cmnvs	sp, r0, lsl #22
 208:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 20c:	696c615f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r8, sp, lr}^
 210:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
 214:	655f5100 	ldrbvs	r5, [pc, #-256]	; 11c <_start-0x7ee4>
 218:	7974706d 	ldmdbvc	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
 21c:	615f5100 	cmpvs	pc, r0, lsl #2
 220:	6e657070 	mcrvs	0, 3, r7, cr5, cr0, {3}
 224:	63730064 	cmnvs	r3, #100	; 0x64
 228:	75646568 	strbvc	r6, [r4, #-1384]!	; 0x568
 22c:	5f72656c 	svcpl	0x0072656c
 230:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 234:	66006461 	strvs	r6, [r0], -r1, ror #8
 238:	71656572 	smcvc	22098	; 0x5652
 23c:	61656800 	cmnvs	r5, r0, lsl #16
 240:	70720064 	rsbsvc	r0, r2, r4, rrx
 244:	68742d69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, sl, fp, sp}^
 248:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 24c:	6d00632e 	stcvs	3, cr6, [r0, #-184]	; 0xffffff48
 250:	65736d65 	ldrbvs	r6, [r3, #-3429]!	; 0xd65
 254:	656e0074 	strbvs	r0, [lr, #-116]!	; 0x74
 258:	745f7478 	ldrbvc	r7, [pc], #-1144	; 260 <_start-0x7da0>
 25c:	61657268 	cmnvs	r5, r8, ror #4
 260:	78650064 	stmdavc	r5!, {r2, r5, r6}^
 264:	6f637469 	svcvs	0x00637469
 268:	74006564 	strvc	r6, [r0], #-1380	; 0x564
 26c:	6c615f68 	stclvs	15, cr5, [r1], #-416	; 0xfffffe60
 270:	00636f6c 	rsbeq	r6, r3, ip, ror #30
 274:	5f697072 	svcpl	0x00697072
 278:	6c656979 	stclvs	9, cr6, [r5], #-484	; 0xfffffe1c
 27c:	61740064 	cmnvs	r4, r4, rrx
 280:	72006c69 	andvc	r6, r0, #26880	; 0x6900
 284:	635f6970 	cmpvs	pc, #112, 18	; 0x1c0000
 288:	74697773 	strbtvc	r7, [r9], #-1907	; 0x773
 28c:	6c006863 	stcvs	8, cr6, [r0], {99}	; 0x63
 290:	2f636269 	svccs	0x00636269
 294:	736d656d 	cmnvc	sp, #457179136	; 0x1b400000
 298:	632e7465 	teqvs	lr, #1694498816	; 0x65000000
 29c:	73552f00 	cmpvc	r5, #0, 30
 2a0:	2f737265 	svccs	0x00737265
 2a4:	61697262 	cmnvs	r9, r2, ror #4
 2a8:	6e756a6e 	vsubvs.f32	s13, s10, s29
 2ac:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 2b0:	706f746b 	rsbvc	r7, pc, fp, ror #8
 2b4:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 2b8:	2f6c6f6f 	svccs	0x006c6f6f
 2bc:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 2c0:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 2c4:	432f3032 	teqmi	pc, #50	; 0x32
 2c8:	30343153 	eorscc	r3, r4, r3, asr r1
 2cc:	73632f45 	cmnvc	r3, #276	; 0x114
 2d0:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 2d4:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 2d8:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 13c <_start-0x7ec4>
 2dc:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 2e0:	675f5f00 	ldrbvs	r5, [pc, -r0, lsl #30]
 2e4:	5f63756e 	svcpl	0x0063756e
 2e8:	6c5f6176 	ldfvse	f6, [pc], {118}	; 0x76
 2ec:	00747369 	rsbseq	r7, r4, r9, ror #6
 2f0:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 2f4:	6972702f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, ip, sp, lr}^
 2f8:	2e6b746e 	cdpcs	4, 6, cr7, cr11, cr14, {3}
 2fc:	61760063 	cmnvs	r6, r3, rrx
 300:	6972705f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
 304:	006b746e 	rsbeq	r7, fp, lr, ror #8
 308:	61765f5f 	cmnvs	r6, pc, asr pc
 30c:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
 310:	72610074 	rsbvc	r0, r1, #116	; 0x74
 314:	5f007367 	svcpl	0x00007367
 318:	0070615f 	rsbseq	r6, r0, pc, asr r1
 31c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 320:	7475702f 	ldrbtvc	r7, [r5], #-47	; 0x2f
 324:	00632e6b 	rsbeq	r2, r3, fp, ror #28
 328:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 32c:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
 330:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
 334:	7072006b 	rsbsvc	r0, r2, fp, rrx
 338:	75705f69 	ldrbvc	r5, [r0, #-3945]!	; 0xf69
 33c:	61686374 	smcvs	34356	; 0x8634
 340:	656e0072 	strbvs	r0, [lr, #-114]!	; 0x72
 344:	00705f67 	rsbseq	r5, r0, r7, ror #30
 348:	65766572 	ldrbvs	r6, [r6, #-1394]!	; 0x572
 34c:	00657372 	rsbeq	r7, r5, r2, ror r3
 350:	69647369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
 354:	00746967 	rsbseq	r6, r4, r7, ror #18
 358:	73747570 	cmnvc	r4, #112, 10	; 0x1c000000
 35c:	0070665f 	rsbseq	r6, r0, pc, asr r6
 360:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0x162
 364:	67697300 	strbvs	r7, [r9, -r0, lsl #6]!
 368:	5f64656e 	svcpl	0x0064656e
 36c:	696c0070 	stmdbvs	ip!, {r4, r5, r6}^
 370:	762f6362 	strtvc	r6, [pc], -r2, ror #6
 374:	72702d61 	rsbsvc	r2, r0, #6208	; 0x1840
 378:	6b746e69 	blvs	1d1bd24 <__bss_end__+0x1d126c4>
 37c:	7200632e 	andvc	r6, r0, #-1207959552	; 0xb8000000
 380:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
 384:	6f5f7465 	svcvs	0x005f7465
 388:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0x475
 38c:	69770074 	ldmdbvs	r7!, {r2, r4, r5, r6}^
 390:	00687464 	rsbeq	r7, r8, r4, ror #8
 394:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 398:	0070665f 	rsbseq	r6, r0, pc, asr r6
 39c:	74696d65 	strbtvc	r6, [r9], #-3429	; 0xd65
 3a0:	31736300 	cmncc	r3, r0, lsl #6
 3a4:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 3a8:	2f637273 	svccs	0x00637273
 3ac:	61656c63 	cmnvs	r5, r3, ror #24
 3b0:	65722d6e 	ldrbvs	r2, [r2, #-3438]!	; 0xd6e
 3b4:	746f6f62 	strbtvc	r6, [pc], #-3938	; 3bc <_start-0x7c44>
 3b8:	6400632e 	strvs	r6, [r0], #-814	; 0x32e
 3bc:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 3c0:	00736d5f 	rsbseq	r6, r3, pc, asr sp
 3c4:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 3c8:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
 3cc:	632f6372 	teqvs	pc, #-939524095	; 0xc8000001
 3d0:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 3d4:	00632e74 	rsbeq	r2, r3, r4, ror lr
 3d8:	73625f5f 	cmnvc	r2, #380	; 0x17c
 3dc:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xf73
 3e0:	5f747261 	svcpl	0x00747261
 3e4:	5f5f005f 	svcpl	0x005f005f
 3e8:	5f737362 	svcpl	0x00737362
 3ec:	5f646e65 	svcpl	0x00646e65
 3f0:	7362005f 	cmnvc	r2, #95	; 0x5f
 3f4:	6e655f73 	mcrvs	15, 3, r5, cr5, cr3, {3}
 3f8:	635f0064 	cmpvs	pc, #100	; 0x64
 3fc:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 400:	74610074 	strbtvc	r0, [r1], #-116	; 0x74
 404:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0x55f
 408:	656c5f72 	strbvs	r5, [ip, #-3954]!	; 0xf72
 40c:	006c6576 	rsbeq	r6, ip, r6, ror r5
 410:	505f4d50 	subspl	r4, pc, r0, asr sp	; <UNPREDICTABLE>
 414:	57535341 	ldrbpl	r5, [r3, -r1, asr #6]
 418:	0044524f 	subeq	r5, r4, pc, asr #4
 41c:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 420:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
 424:	722f6372 	eorvc	r6, pc, #-939524095	; 0xc8000001
 428:	6f6f6265 	svcvs	0x006f6265
 42c:	00632e74 	rsbeq	r2, r3, r4, ror lr
 430:	525f4d50 	subspl	r4, pc, #80, 26	; 0x1400
 434:	5f435453 	svcpl	0x00435453
 438:	46435257 			; <UNDEFINED> instruction: 0x46435257
 43c:	55465f47 	strbpl	r5, [r6, #-3911]	; 0xf47
 440:	525f4c4c 	subspl	r4, pc, #76, 24	; 0x4c00
 444:	54455345 	strbpl	r5, [r5], #-837	; 0x345
 448:	5f4d5000 	svcpl	0x004d5000
 44c:	474f4457 	smlsldmi	r4, pc, r7, r4	; <UNPREDICTABLE>
 450:	74657300 	strbtvc	r7, [r5], #-768	; 0x300
 454:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0x55f
 458:	656c5f72 	strbvs	r5, [ip, #-3954]!	; 0xf72
 45c:	006c6576 	rsbeq	r6, ip, r6, ror r5
 460:	33545550 	cmpcc	r4, #80, 10	; 0x14000000
 464:	4d500032 	ldclmi	0, cr0, [r0, #-200]	; 0xffffff38
 468:	5453525f 	ldrbpl	r5, [r3], #-607	; 0x25f
 46c:	70630043 	rsbvc	r0, r3, r3, asr #32
 470:	64007273 	strvs	r7, [r0], #-627	; 0x273
 474:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 478:	6365735f 	cmnvs	r5, #2080374785	; 0x7c000001
 47c:	31736300 	cmncc	r3, r0, lsl #6
 480:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 484:	2f637273 	svccs	0x00637273
 488:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 48c:	00632e72 	rsbeq	r2, r3, r2, ror lr
 490:	33544547 	cmpcc	r4, #297795584	; 0x11c00000
 494:	69740032 	ldmdbvs	r4!, {r1, r4, r5}^
 498:	00736b63 	rsbseq	r6, r3, r3, ror #22
 49c:	616c6564 	cmnvs	ip, r4, ror #10
 4a0:	79635f79 	stmdbvc	r3!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 4a4:	73656c63 	cmnvc	r5, #25344	; 0x6300
 4a8:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 4ac:	755f7961 	ldrbvc	r7, [pc, #-2401]	; fffffb53 <__bss_end__+0xffff64f3>
 4b0:	69740073 	ldmdbvs	r4!, {r0, r1, r4, r5, r6}^
 4b4:	5f72656d 	svcpl	0x0072656d
 4b8:	5f746567 	svcpl	0x00746567
 4bc:	63657375 	cmnvs	r5, #-738197503	; 0xd4000001
 4c0:	72666b00 	rsbvc	r6, r6, #0, 22
 4c4:	615f6565 	cmpvs	pc, r5, ror #10
 4c8:	61006c6c 	tstvs	r0, ip, ror #24
 4cc:	6e67696c 	cdpvs	9, 6, cr6, cr7, cr12, {3}
 4d0:	685f6465 	ldmdavs	pc, {r0, r2, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
 4d4:	5f706165 	svcpl	0x00706165
 4d8:	00727470 	rsbseq	r7, r2, r0, ror r4
 4dc:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
 4e0:	6b2f6372 	blvs	bd92b0 <__bss_end__+0xbcfc50>
 4e4:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 4e8:	632e636f 	teqvs	lr, #-1140850687	; 0xbc000001
 4ec:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 4f0:	00705f74 	rsbseq	r5, r0, r4, ror pc
 4f4:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
 4f8:	6e656d6e 	cdpvs	13, 6, cr6, cr5, cr14, {3}
 4fc:	6f720074 	svcvs	0x00720074
 500:	65646e75 	strbvs	r6, [r4, #-3701]!	; 0xe75
 504:	626e5f64 	rsbvs	r5, lr, #100, 30	; 0x190
 508:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
 50c:	616d6b00 	cmnvs	sp, r0, lsl #22
 510:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 514:	6165685f 	cmnvs	r5, pc, asr r8
 518:	74705f70 	ldrbtvc	r5, [r0], #-3952	; 0xf70
 51c:	5f5f0072 	svcpl	0x005f0072
 520:	70616568 	rsbvc	r6, r1, r8, ror #10
 524:	6174735f 	cmnvs	r4, pc, asr r3
 528:	5f5f7472 	svcpl	0x005f7472
 52c:	5f6f7400 	svcpl	0x006f7400
 530:	6f6c6c61 	svcvs	0x006c6c61
 534:	65746163 	ldrbvs	r6, [r4, #-355]!	; 0x163
 538:	72617500 	rsbvc	r7, r1, #0, 10
 53c:	75705f74 	ldrbvc	r5, [r0, #-3956]!	; 0xf74
 540:	69006374 	stmdbvs	r0, {r2, r4, r5, r6, r8, r9, sp, lr}
 544:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 548:	5f6c616e 	svcpl	0x006c616e
 54c:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 550:	00726168 	rsbseq	r6, r2, r8, ror #2
 554:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 558:	7475702f 	ldrbtvc	r7, [r5], #-47	; 0x2f
 55c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 560:	Address 0x0000000000000560 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000014 	andeq	r0, r0, r4, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	00008010 	andeq	r8, r0, r0, lsl r0
  1c:	00000050 	andeq	r0, r0, r0, asr r0
  20:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
  24:	00018e02 	andeq	r8, r1, r2, lsl #28
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	00008060 	andeq	r8, r0, r0, rrx
  34:	000000c4 	andeq	r0, r0, r4, asr #1
  38:	83180e42 	tsthi	r8, #1056	; 0x420
  3c:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
  40:	87038604 	strhi	r8, [r3, -r4, lsl #12]
  44:	00018e02 	andeq	r8, r1, r2, lsl #28
  48:	0000000c 	andeq	r0, r0, ip
  4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  50:	7c020001 	stcvc	0, cr0, [r2], {1}
  54:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  58:	0000000c 	andeq	r0, r0, ip
  5c:	00000048 	andeq	r0, r0, r8, asr #32
  60:	00008124 	andeq	r8, r0, r4, lsr #2
  64:	00000010 	andeq	r0, r0, r0, lsl r0
  68:	0000000c 	andeq	r0, r0, ip
  6c:	00000048 	andeq	r0, r0, r8, asr #32
  70:	00008134 	andeq	r8, r0, r4, lsr r1
  74:	0000002c 	andeq	r0, r0, ip, lsr #32
  78:	00000014 	andeq	r0, r0, r4, lsl r0
  7c:	00000048 	andeq	r0, r0, r8, asr #32
  80:	00008160 	andeq	r8, r0, r0, ror #2
  84:	0000007c 	andeq	r0, r0, ip, ror r0
  88:	83080e42 	movwhi	r0, #36418	; 0x8e42
  8c:	00018e02 	andeq	r8, r1, r2, lsl #28
  90:	00000014 	andeq	r0, r0, r4, lsl r0
  94:	00000048 	andeq	r0, r0, r8, asr #32
  98:	000081dc 	ldrdeq	r8, [r0], -ip
  9c:	0000002c 	andeq	r0, r0, ip, lsr #32
  a0:	83080e42 	movwhi	r0, #36418	; 0x8e42
  a4:	00018e02 	andeq	r8, r1, r2, lsl #28
  a8:	0000000c 	andeq	r0, r0, ip
  ac:	00000048 	andeq	r0, r0, r8, asr #32
  b0:	00008208 	andeq	r8, r0, r8, lsl #4
  b4:	00000010 	andeq	r0, r0, r0, lsl r0
  b8:	00000014 	andeq	r0, r0, r4, lsl r0
  bc:	00000048 	andeq	r0, r0, r8, asr #32
  c0:	00008218 	andeq	r8, r0, r8, lsl r2
  c4:	00000038 	andeq	r0, r0, r8, lsr r0
  c8:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
  cc:	00018e02 	andeq	r8, r1, r2, lsl #28
  d0:	00000014 	andeq	r0, r0, r4, lsl r0
  d4:	00000048 	andeq	r0, r0, r8, asr #32
  d8:	00008250 	andeq	r8, r0, r0, asr r2
  dc:	00000060 	andeq	r0, r0, r0, rrx
  e0:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
  e4:	00018e02 	andeq	r8, r1, r2, lsl #28
  e8:	00000018 	andeq	r0, r0, r8, lsl r0
  ec:	00000048 	andeq	r0, r0, r8, asr #32
  f0:	000082b0 			; <UNDEFINED> instruction: 0x000082b0
  f4:	00000040 	andeq	r0, r0, r0, asr #32
  f8:	83100e42 	tsthi	r0, #1056	; 0x420
  fc:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 100:	00018e02 	andeq	r8, r1, r2, lsl #28
 104:	00000014 	andeq	r0, r0, r4, lsl r0
 108:	00000048 	andeq	r0, r0, r8, asr #32
 10c:	000082f0 	strdeq	r8, [r0], -r0
 110:	00000050 	andeq	r0, r0, r0, asr r0
 114:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 118:	00018e02 	andeq	r8, r1, r2, lsl #28
 11c:	0000000c 	andeq	r0, r0, ip
 120:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 124:	7c020001 	stcvc	0, cr0, [r2], {1}
 128:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 12c:	0000000c 	andeq	r0, r0, ip
 130:	0000011c 	andeq	r0, r0, ip, lsl r1
 134:	00008374 	andeq	r8, r0, r4, ror r3
 138:	00000020 	andeq	r0, r0, r0, lsr #32
 13c:	0000000c 	andeq	r0, r0, ip
 140:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 144:	7c020001 	stcvc	0, cr0, [r2], {1}
 148:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 14c:	00000024 	andeq	r0, r0, r4, lsr #32
 150:	0000013c 	andeq	r0, r0, ip, lsr r1
 154:	00008394 	muleq	r0, r4, r3
 158:	00000058 	andeq	r0, r0, r8, asr r0
 15c:	80100e42 	andshi	r0, r0, r2, asr #28
 160:	82038104 	andhi	r8, r3, #4, 2
 164:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
 168:	07841c0e 	streq	r1, [r4, lr, lsl #24]
 16c:	058e0685 	streq	r0, [lr, #1669]	; 0x685
 170:	00280e42 	eoreq	r0, r8, r2, asr #28
 174:	0000000c 	andeq	r0, r0, ip
 178:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 17c:	7c020001 	stcvc	0, cr0, [r2], {1}
 180:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 184:	00000018 	andeq	r0, r0, r8, lsl r0
 188:	00000174 	andeq	r0, r0, r4, ror r1
 18c:	000083ec 	andeq	r8, r0, ip, ror #7
 190:	00000034 	andeq	r0, r0, r4, lsr r0
 194:	83100e42 	tsthi	r0, #1056	; 0x420
 198:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 19c:	00018e02 	andeq	r8, r1, r2, lsl #28
 1a0:	0000000c 	andeq	r0, r0, ip
 1a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1a8:	7c020001 	stcvc	0, cr0, [r2], {1}
 1ac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1b0:	0000000c 	andeq	r0, r0, ip
 1b4:	000001a0 	andeq	r0, r0, r0, lsr #3
 1b8:	00008420 	andeq	r8, r0, r0, lsr #8
 1bc:	00000014 	andeq	r0, r0, r4, lsl r0
 1c0:	0000000c 	andeq	r0, r0, ip
 1c4:	000001a0 	andeq	r0, r0, r0, lsr #3
 1c8:	00008434 	andeq	r8, r0, r4, lsr r4
 1cc:	0000002c 	andeq	r0, r0, ip, lsr #32
 1d0:	0000000c 	andeq	r0, r0, ip
 1d4:	000001a0 	andeq	r0, r0, r0, lsr #3
 1d8:	00008460 	andeq	r8, r0, r0, ror #8
 1dc:	00000040 	andeq	r0, r0, r0, asr #32
 1e0:	00000020 	andeq	r0, r0, r0, lsr #32
 1e4:	000001a0 	andeq	r0, r0, r0, lsr #3
 1e8:	000084a0 	andeq	r8, r0, r0, lsr #9
 1ec:	00000198 	muleq	r0, r8, r1
 1f0:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 1f4:	86058506 	strhi	r8, [r5], -r6, lsl #10
 1f8:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 1fc:	42018e02 	andmi	r8, r1, #2, 28
 200:	0000580e 	andeq	r5, r0, lr, lsl #16
 204:	00000014 	andeq	r0, r0, r4, lsl r0
 208:	000001a0 	andeq	r0, r0, r0, lsr #3
 20c:	00008638 	andeq	r8, r0, r8, lsr r6
 210:	00000050 	andeq	r0, r0, r0, asr r0
 214:	83080e42 	movwhi	r0, #36418	; 0x8e42
 218:	00018e02 	andeq	r8, r1, r2, lsl #28
 21c:	00000028 	andeq	r0, r0, r8, lsr #32
 220:	000001a0 	andeq	r0, r0, r0, lsr #3
 224:	00008688 	andeq	r8, r0, r8, lsl #13
 228:	00000288 	andeq	r0, r0, r8, lsl #5
 22c:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
 230:	86088509 	strhi	r8, [r8], -r9, lsl #10
 234:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
 238:	8a048905 	bhi	122654 <__bss_end__+0x118ff4>
 23c:	8e028b03 	vmlahi.f64	d8, d2, d3
 240:	b00e4201 	andlt	r4, lr, r1, lsl #4
 244:	00000001 	andeq	r0, r0, r1
 248:	0000000c 	andeq	r0, r0, ip
 24c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 250:	7c020001 	stcvc	0, cr0, [r2], {1}
 254:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 258:	00000014 	andeq	r0, r0, r4, lsl r0
 25c:	00000248 	andeq	r0, r0, r8, asr #4
 260:	00008910 	andeq	r8, r0, r0, lsl r9
 264:	00000028 	andeq	r0, r0, r8, lsr #32
 268:	83080e42 	movwhi	r0, #36418	; 0x8e42
 26c:	00018e02 	andeq	r8, r1, r2, lsl #28
 270:	0000000c 	andeq	r0, r0, ip
 274:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 278:	7c020001 	stcvc	0, cr0, [r2], {1}
 27c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 280:	00000014 	andeq	r0, r0, r4, lsl r0
 284:	00000270 	andeq	r0, r0, r0, ror r2
 288:	00008938 	andeq	r8, r0, r8, lsr r9
 28c:	00000034 	andeq	r0, r0, r4, lsr r0
 290:	83080e42 	movwhi	r0, #36418	; 0x8e42
 294:	00018e02 	andeq	r8, r1, r2, lsl #28
 298:	0000000c 	andeq	r0, r0, ip
 29c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2a0:	7c020001 	stcvc	0, cr0, [r2], {1}
 2a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2a8:	0000000c 	andeq	r0, r0, ip
 2ac:	00000298 	muleq	r0, r8, r2
 2b0:	0000896c 	andeq	r8, r0, ip, ror #18
 2b4:	00000018 	andeq	r0, r0, r8, lsl r0
 2b8:	0000000c 	andeq	r0, r0, ip
 2bc:	00000298 	muleq	r0, r8, r2
 2c0:	00008984 	andeq	r8, r0, r4, lsl #19
 2c4:	00000014 	andeq	r0, r0, r4, lsl r0
 2c8:	00000014 	andeq	r0, r0, r4, lsl r0
 2cc:	00000298 	muleq	r0, r8, r2
 2d0:	00008998 	muleq	r0, r8, r9
 2d4:	00000048 	andeq	r0, r0, r8, asr #32
 2d8:	83080e42 	movwhi	r0, #36418	; 0x8e42
 2dc:	00018e02 	andeq	r8, r1, r2, lsl #28
 2e0:	0000000c 	andeq	r0, r0, ip
 2e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2e8:	7c020001 	stcvc	0, cr0, [r2], {1}
 2ec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2f0:	0000000c 	andeq	r0, r0, ip
 2f4:	000002e0 	andeq	r0, r0, r0, ror #5
 2f8:	000089e0 	andeq	r8, r0, r0, ror #19
 2fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 300:	00000014 	andeq	r0, r0, r4, lsl r0
 304:	000002e0 	andeq	r0, r0, r0, ror #5
 308:	000089fc 	strdeq	r8, [r0], -ip
 30c:	00000014 	andeq	r0, r0, r4, lsl r0
 310:	83080e42 	movwhi	r0, #36418	; 0x8e42
 314:	00018e02 	andeq	r8, r1, r2, lsl #28
 318:	00000018 	andeq	r0, r0, r8, lsl r0
 31c:	000002e0 	andeq	r0, r0, r0, ror #5
 320:	00008a10 	andeq	r8, r0, r0, lsl sl
 324:	00000024 	andeq	r0, r0, r4, lsr #32
 328:	83100e42 	tsthi	r0, #1056	; 0x420
 32c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 330:	00018e02 	andeq	r8, r1, r2, lsl #28
 334:	00000014 	andeq	r0, r0, r4, lsl r0
 338:	000002e0 	andeq	r0, r0, r0, ror #5
 33c:	00008a34 	andeq	r8, r0, r4, lsr sl
 340:	00000014 	andeq	r0, r0, r4, lsl r0
 344:	83080e42 	movwhi	r0, #36418	; 0x8e42
 348:	00018e02 	andeq	r8, r1, r2, lsl #28
 34c:	00000014 	andeq	r0, r0, r4, lsl r0
 350:	000002e0 	andeq	r0, r0, r0, ror #5
 354:	00008a48 	andeq	r8, r0, r8, asr #20
 358:	00000014 	andeq	r0, r0, r4, lsl r0
 35c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 360:	00018e02 	andeq	r8, r1, r2, lsl #28
 364:	0000000c 	andeq	r0, r0, ip
 368:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 36c:	7c020001 	stcvc	0, cr0, [r2], {1}
 370:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 374:	00000014 	andeq	r0, r0, r4, lsl r0
 378:	00000364 	andeq	r0, r0, r4, ror #6
 37c:	00008d34 	andeq	r8, r0, r4, lsr sp
 380:	00000064 	andeq	r0, r0, r4, rrx
 384:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 388:	00018e02 	andeq	r8, r1, r2, lsl #28
 38c:	00000014 	andeq	r0, r0, r4, lsl r0
 390:	00000364 	andeq	r0, r0, r4, ror #6
 394:	00008d98 	muleq	r0, r8, sp
 398:	00000094 	muleq	r0, r4, r0
 39c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 3a0:	00018e02 	andeq	r8, r1, r2, lsl #28
 3a4:	00000014 	andeq	r0, r0, r4, lsl r0
 3a8:	00000364 	andeq	r0, r0, r4, ror #6
 3ac:	00008e2c 	andeq	r8, r0, ip, lsr #28
 3b0:	00000058 	andeq	r0, r0, r8, asr r0
 3b4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 3b8:	00018e02 	andeq	r8, r1, r2, lsl #28
 3bc:	0000000c 	andeq	r0, r0, ip
 3c0:	00000364 	andeq	r0, r0, r4, ror #6
 3c4:	00008e84 	andeq	r8, r0, r4, lsl #29
 3c8:	00000018 	andeq	r0, r0, r8, lsl r0
 3cc:	0000000c 	andeq	r0, r0, ip
 3d0:	00000364 	andeq	r0, r0, r4, ror #6
 3d4:	00008e9c 	muleq	r0, ip, lr
 3d8:	00000010 	andeq	r0, r0, r0, lsl r0
 3dc:	0000000c 	andeq	r0, r0, ip
 3e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3e4:	7c020001 	stcvc	0, cr0, [r2], {1}
 3e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3ec:	00000014 	andeq	r0, r0, r4, lsl r0
 3f0:	000003dc 	ldrdeq	r0, [r0], -ip
 3f4:	00008eac 	andeq	r8, r0, ip, lsr #29
 3f8:	00000014 	andeq	r0, r0, r4, lsl r0
 3fc:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 400:	00018e02 	andeq	r8, r1, r2, lsl #28
