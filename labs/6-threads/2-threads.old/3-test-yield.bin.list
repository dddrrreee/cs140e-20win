
3-test-yield.bin.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e3a0d302 	mov	sp, #134217728	; 0x8000000
    8004:	e3a0b000 	mov	fp, #0
    8008:	eb00024f 	bl	894c <_cstart>
    800c:	eb000266 	bl	89ac <rpi_reboot>

00008010 <wait_usec>:
// wait for <n> from the current time.  we yield
// until enough time passes.  if yield is fast and
// other threads don't run too long, this can be
// accurate real-time, even though we don't have 
// an actual real-time scheduler.
static void wait_usec(unsigned n) {
    8010:	e92d4030 	push	{r4, r5, lr}
    8014:	e24dd00c 	sub	sp, sp, #12
    8018:	e1a04000 	mov	r4, r0
    demand(n < 100000, "unlikely large delay = %dusec!\n", n);
    801c:	e59f3048 	ldr	r3, [pc, #72]	; 806c <wait_usec+0x5c>
    8020:	e1500003 	cmp	r0, r3
    8024:	9a000006 	bls	8044 <wait_usec+0x34>
    8028:	e58d0000 	str	r0, [sp]
    802c:	e59f003c 	ldr	r0, [pc, #60]	; 8070 <wait_usec+0x60>
    8030:	e59f103c 	ldr	r1, [pc, #60]	; 8074 <wait_usec+0x64>
    8034:	e59f203c 	ldr	r2, [pc, #60]	; 8078 <wait_usec+0x68>
    8038:	e3a03010 	mov	r3, #16
    803c:	eb0000e3 	bl	83d0 <printk>
    8040:	eb000259 	bl	89ac <rpi_reboot>
    unsigned start = timer_get_usec();
    8044:	eb000271 	bl	8a10 <timer_get_usec>
    8048:	e1a05000 	mov	r5, r0
    while(1) {
        if((timer_get_usec() - start) < n)
    804c:	eb00026f 	bl	8a10 <timer_get_usec>
    8050:	e0650000 	rsb	r0, r5, r0
    8054:	e1500004 	cmp	r0, r4
    8058:	3a000001 	bcc	8064 <wait_usec+0x54>
            return;
        rpi_yield();
    805c:	eb0000a2 	bl	82ec <rpi_yield>
    }
    8060:	eafffff9 	b	804c <wait_usec+0x3c>
}
    8064:	e28dd00c 	add	sp, sp, #12
    8068:	e8bd8030 	pop	{r4, r5, pc}
    806c:	0001869f 	muleq	r1, pc, r6	; <UNPREDICTABLE>
    8070:	00008f20 	andeq	r8, r0, r0, lsr #30
    8074:	00008f6c 	andeq	r8, r0, ip, ror #30
    8078:	00008ef4 	strdeq	r8, [r0], -r4

0000807c <blink>:

// if our threads are fast enough you can run a bunch of these
// and not see weird flickers.
void blink(void *arg) {
    807c:	e92d4070 	push	{r4, r5, r6, lr}
    8080:	e1a04000 	mov	r4, r0
    struct pwm *p = arg;

    gpio_set_output(p->pin);
    8084:	e5900004 	ldr	r0, [r0, #4]
    8088:	eb000300 	bl	8c90 <gpio_set_output>
    demand(p->duty > 0 && p->duty <= 100, wierd duty cycle!);
    808c:	e5945000 	ldr	r5, [r4]
    8090:	e2453001 	sub	r3, r5, #1
    8094:	e3530063 	cmp	r3, #99	; 0x63
    8098:	9a000005 	bls	80b4 <blink+0x38>
    809c:	e59f0038 	ldr	r0, [pc, #56]	; 80dc <blink+0x60>
    80a0:	e59f1038 	ldr	r1, [pc, #56]	; 80e0 <blink+0x64>
    80a4:	e59f2038 	ldr	r2, [pc, #56]	; 80e4 <blink+0x68>
    80a8:	e3a0301f 	mov	r3, #31
    80ac:	eb0000c7 	bl	83d0 <printk>
    80b0:	eb00023d 	bl	89ac <rpi_reboot>
    
    // how long we should be on out of 100 usec.
    unsigned on_usec = p->duty;
    unsigned off_usec = 100 - p->duty;
    80b4:	e2656064 	rsb	r6, r5, #100	; 0x64
    while(1) {
        gpio_set_on(p->pin);
    80b8:	e5940004 	ldr	r0, [r4, #4]
    80bc:	eb0002f7 	bl	8ca0 <gpio_set_on>
        wait_usec(on_usec);
    80c0:	e1a00005 	mov	r0, r5
    80c4:	ebffffd1 	bl	8010 <wait_usec>
        
        gpio_set_off(p->pin);
    80c8:	e5940004 	ldr	r0, [r4, #4]
    80cc:	eb0002fc 	bl	8cc4 <gpio_set_off>
        wait_usec(off_usec);
    80d0:	e1a00006 	mov	r0, r6
    80d4:	ebffffcd 	bl	8010 <wait_usec>
    80d8:	eafffff6 	b	80b8 <blink+0x3c>
    80dc:	00008f7c 	andeq	r8, r0, ip, ror pc
    80e0:	00008f6c 	andeq	r8, r0, ip, ror #30
    80e4:	00008f00 	andeq	r8, r0, r0, lsl #30

000080e8 <notmain>:
    }
}

void notmain(void) {
    80e8:	e92d4070 	push	{r4, r5, r6, lr}
    80ec:	e24dd010 	sub	sp, sp, #16
    uart_init();
    80f0:	eb00027c 	bl	8ae8 <uart_init>
    kmalloc_init();
    80f4:	eb000351 	bl	8e40 <kmalloc_init>

    struct pwm t_75 = {.duty = 75, .pin = 20 },
    80f8:	e59f4050 	ldr	r4, [pc, #80]	; 8150 <notmain+0x68>
    80fc:	e28d3008 	add	r3, sp, #8
    8100:	e2842014 	add	r2, r4, #20
    8104:	e8920003 	ldm	r2, {r0, r1}
    8108:	e8830003 	stm	r3, {r0, r1}
               t_25 = {.duty = 25, .pin = 21 };
    810c:	e284201c 	add	r2, r4, #28
    8110:	e8920003 	ldm	r2, {r0, r1}
    8114:	e88d0003 	stm	sp, {r0, r1}

    rpi_fork(blink, &t_75);
    8118:	e59f6034 	ldr	r6, [pc, #52]	; 8154 <notmain+0x6c>
    811c:	e1a00006 	mov	r0, r6
    8120:	e1a01003 	mov	r1, r3
    8124:	eb00004a 	bl	8254 <rpi_fork>
    rpi_fork(blink, &t_25);
    8128:	e1a00006 	mov	r0, r6
    812c:	e1a0100d 	mov	r1, sp
    8130:	eb000047 	bl	8254 <rpi_fork>
    rpi_thread_start();
    8134:	eb00007c 	bl	832c <rpi_thread_start>
    panic("should never return!\n");
    8138:	e59f0018 	ldr	r0, [pc, #24]	; 8158 <notmain+0x70>
    813c:	e59f1018 	ldr	r1, [pc, #24]	; 815c <notmain+0x74>
    8140:	e2842024 	add	r2, r4, #36	; 0x24
    8144:	e3a03037 	mov	r3, #55	; 0x37
    8148:	eb0000a0 	bl	83d0 <printk>
    814c:	eb000216 	bl	89ac <rpi_reboot>
    8150:	00008ef4 	strdeq	r8, [r0], -r4
    8154:	0000807c 	andeq	r8, r0, ip, ror r0
    8158:	00008fc8 	andeq	r8, r0, r8, asr #31
    815c:	00008f6c 	andeq	r8, r0, ip, ror #30

00008160 <Q_empty>:
} Q_t;

// used for iteration.
static E *Q_start(Q_t *q)   { return q->head; }
static E *Q_next(E *e)      { return e->next; }
static int Q_empty(Q_t *q)  { return q->head == 0; }
    8160:	e5900000 	ldr	r0, [r0]
    8164:	e2700001 	rsbs	r0, r0, #1
    8168:	33a00000 	movcc	r0, #0
    816c:	e12fff1e 	bx	lr

00008170 <Q_append>:
    return e;
}

// insert at tail. (for FIFO)
static void Q_append(Q_t *q, E *e) {
    e->next = 0;
    8170:	e3a03000 	mov	r3, #0
    8174:	e5813040 	str	r3, [r1, #64]	; 0x40
    if(!q->tail) 
    8178:	e5903004 	ldr	r3, [r0, #4]
    817c:	e3530000 	cmp	r3, #0
    8180:	1a000002 	bne	8190 <Q_append+0x20>
        q->head = q->tail = e;
    8184:	e5801004 	str	r1, [r0, #4]
    8188:	e5801000 	str	r1, [r0]
    818c:	e12fff1e 	bx	lr
    else {
        q->tail->next = e;
    8190:	e5831040 	str	r1, [r3, #64]	; 0x40
        q->tail = e;
    8194:	e5801004 	str	r1, [r0, #4]
    8198:	e12fff1e 	bx	lr

0000819c <Q_pop>:
static E *Q_start(Q_t *q)   { return q->head; }
static E *Q_next(E *e)      { return e->next; }
static int Q_empty(Q_t *q)  { return q->head == 0; }

// remove from front of list.
static E *Q_pop(Q_t *q) {
    819c:	e92d4008 	push	{r3, lr}
    demand(q, bad input);
    81a0:	e2503000 	subs	r3, r0, #0
    81a4:	1a000005 	bne	81c0 <Q_pop+0x24>
    81a8:	e59f0058 	ldr	r0, [pc, #88]	; 8208 <Q_pop+0x6c>
    81ac:	e59f1058 	ldr	r1, [pc, #88]	; 820c <Q_pop+0x70>
    81b0:	e59f2058 	ldr	r2, [pc, #88]	; 8210 <Q_pop+0x74>
    81b4:	e3a03013 	mov	r3, #19
    81b8:	eb000084 	bl	83d0 <printk>
    81bc:	eb0001fa 	bl	89ac <rpi_reboot>
    E *e = q->head;
    81c0:	e5930000 	ldr	r0, [r3]

    if(!e) {
    81c4:	e3500000 	cmp	r0, #0
    81c8:	1a000008 	bne	81f0 <Q_pop+0x54>
        demand(!q->tail, invalid Q);
    81cc:	e5930004 	ldr	r0, [r3, #4]
    81d0:	e3500000 	cmp	r0, #0
    81d4:	08bd8008 	popeq	{r3, pc}
    81d8:	e59f0034 	ldr	r0, [pc, #52]	; 8214 <Q_pop+0x78>
    81dc:	e59f1028 	ldr	r1, [pc, #40]	; 820c <Q_pop+0x70>
    81e0:	e59f2028 	ldr	r2, [pc, #40]	; 8210 <Q_pop+0x74>
    81e4:	e3a03017 	mov	r3, #23
    81e8:	eb000078 	bl	83d0 <printk>
    81ec:	eb0001ee 	bl	89ac <rpi_reboot>
        return 0;
    }
    q->head = e->next;
    81f0:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    81f4:	e5832000 	str	r2, [r3]
    if(!q->head)
    81f8:	e3520000 	cmp	r2, #0
    81fc:	18bd8008 	popne	{r3, pc}
        q->tail = 0;
    8200:	e5832004 	str	r2, [r3, #4]
    return e;
}
    8204:	e8bd8008 	pop	{r3, pc}
    8208:	00008ff8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    820c:	00009020 	andeq	r9, r0, r0, lsr #32
    8210:	00008ff0 	strdeq	r8, [r0], -r0
    8214:	00009024 	andeq	r9, r0, r4, lsr #32

00008218 <th_alloc>:
rpi_thread_t *rpi_cur_thread(void) {
    return cur_thread;
}

// keep a cache of freed thread blocks.  call kmalloc if run out.
static rpi_thread_t *th_alloc(void) {
    8218:	e92d4008 	push	{r3, lr}
    static Q_t freeq;
    rpi_thread_t *t = Q_pop(&freeq);
    821c:	e59f0018 	ldr	r0, [pc, #24]	; 823c <th_alloc+0x24>
    8220:	ebffffdd 	bl	819c <Q_pop>
    if(!t)
    8224:	e3500000 	cmp	r0, #0
    8228:	18bd8008 	popne	{r3, pc}
        // stack has to be 8-byte aligned.
        t = kmalloc_aligned(sizeof *t, 8);
    822c:	e59f000c 	ldr	r0, [pc, #12]	; 8240 <th_alloc+0x28>
    8230:	e3a01008 	mov	r1, #8
    8234:	eb0002dc 	bl	8dac <kmalloc_aligned>
    return t;
}
    8238:	e8bd8008 	pop	{r3, pc}
    823c:	0000929c 	muleq	r0, ip, r2
    8240:	00008048 	andeq	r8, r0, r8, asr #32

00008244 <rpi_cur_thread>:
static rpi_thread_t *scheduler_thread;  // first scheduler thread.

// return pointer to the current thread.  
rpi_thread_t *rpi_cur_thread(void) {
    return cur_thread;
}
    8244:	e59f3004 	ldr	r3, [pc, #4]	; 8250 <rpi_cur_thread+0xc>
    8248:	e5930008 	ldr	r0, [r3, #8]
    824c:	e12fff1e 	bx	lr
    8250:	0000929c 	muleq	r0, ip, r2

00008254 <rpi_fork>:
/***********************************************************************
 * implement the code below.
 */

// create a new thread.
rpi_thread_t *rpi_fork(void (*code)(void *arg), void *arg) {
    8254:	e92d4010 	push	{r4, lr}
    rpi_thread_t *t = th_alloc();
    8258:	ebffffee 	bl	8218 <th_alloc>
    825c:	e1a04000 	mov	r4, r0
		"mov r3, %[thread] \n\t"
		"ldr r2, [r3] \n\t"
		"stmfd r2!, {r0-r15} \n\t"
		"str r0, [r2] \n\t"
		: // output
		:[thread] "r"(&(t->stack))
    8260:	e2803048 	add	r3, r0, #72	; 0x48
// create a new thread.
rpi_thread_t *rpi_fork(void (*code)(void *arg), void *arg) {
    rpi_thread_t *t = th_alloc();

    // do the brain-surgery on the new thread stack here.
	asm volatile (
    8264:	e1a03003 	mov	r3, r3
    8268:	e5932000 	ldr	r2, [r3]
    826c:	e922ffff 	stmdb	r2!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
    8270:	e5820000 	str	r0, [r2]
		:[thread] "r"(&(t->stack))
		 // input
	); 
	

    Q_append(&runq, t);
    8274:	e59f000c 	ldr	r0, [pc, #12]	; 8288 <rpi_fork+0x34>
    8278:	e1a01004 	mov	r1, r4
    827c:	ebffffbb 	bl	8170 <Q_append>
    return t;
}
    8280:	e1a00004 	mov	r0, r4
    8284:	e8bd8010 	pop	{r4, pc}
    8288:	000092a8 	andeq	r9, r0, r8, lsr #5

0000828c <rpi_exit>:

// exit current thread.
void rpi_exit(int exitcode) {
    828c:	e92d4010 	push	{r4, lr}
 	 * switch to it.
	 
	 * 3. otherwise we are done, switch to the scheduler thread 
	 * so we call back into the client code.
	 */
	 memset(cur_thread, 0, sizeof(cur_thread));
    8290:	e59f4050 	ldr	r4, [pc, #80]	; 82e8 <rpi_exit+0x5c>
    8294:	e5940008 	ldr	r0, [r4, #8]
    8298:	e3a01000 	mov	r1, #0
    829c:	e3a02004 	mov	r2, #4
    82a0:	eb000042 	bl	83b0 <memset>
	 if(!Q_empty(&runq)) {
    82a4:	e284000c 	add	r0, r4, #12
    82a8:	ebffffac 	bl	8160 <Q_empty>
    82ac:	e3500000 	cmp	r0, #0
    82b0:	1a000007 	bne	82d4 <rpi_exit+0x48>
		 rpi_cswitch(cur_thread->reg_save_area, Q_pop(&runq)->reg_save_area);
    82b4:	e1a00004 	mov	r0, r4
    82b8:	e5944008 	ldr	r4, [r4, #8]
    82bc:	e280000c 	add	r0, r0, #12
    82c0:	ebffffb5 	bl	819c <Q_pop>
    82c4:	e1a01000 	mov	r1, r0
    82c8:	e1a00004 	mov	r0, r4
    82cc:	eb00002c 	bl	8384 <rpi_cswitch>
    82d0:	e8bd8010 	pop	{r4, pc}
	 } else {
		rpi_cswitch(cur_thread->reg_save_area, scheduler_thread->reg_save_area);
    82d4:	e59f300c 	ldr	r3, [pc, #12]	; 82e8 <rpi_exit+0x5c>
    82d8:	e5930008 	ldr	r0, [r3, #8]
    82dc:	e5931014 	ldr	r1, [r3, #20]
    82e0:	eb000027 	bl	8384 <rpi_cswitch>
    82e4:	e8bd8010 	pop	{r4, pc}
    82e8:	0000929c 	muleq	r0, ip, r2

000082ec <rpi_yield>:
	 }
}

// yield the current thread.
void rpi_yield(void) {
    82ec:	e92d4038 	push	{r3, r4, r5, lr}
	//	- there are no more runnable threads, return.  
	// otherwise: 
	//	1. put current thread on runq.
	// 	2. context switch to the new thread.
	rpi_thread_t* next_thread;
	if(!(next_thread = Q_pop(&runq))) {
    82f0:	e59f002c 	ldr	r0, [pc, #44]	; 8324 <rpi_yield+0x38>
    82f4:	ebffffa8 	bl	819c <Q_pop>
    82f8:	e2505000 	subs	r5, r0, #0
    82fc:	08bd8038 	popeq	{r3, r4, r5, pc}
		return;
	} else {
		Q_append(&runq, cur_thread);
    8300:	e59f0020 	ldr	r0, [pc, #32]	; 8328 <rpi_yield+0x3c>
    8304:	e5904008 	ldr	r4, [r0, #8]
    8308:	e280000c 	add	r0, r0, #12
    830c:	e1a01004 	mov	r1, r4
    8310:	ebffff96 	bl	8170 <Q_append>
		rpi_cswitch(cur_thread->reg_save_area, next_thread->reg_save_area); 
    8314:	e1a00004 	mov	r0, r4
    8318:	e1a01005 	mov	r1, r5
    831c:	eb000018 	bl	8384 <rpi_cswitch>
    8320:	e8bd8038 	pop	{r3, r4, r5, pc}
    8324:	000092a8 	andeq	r9, r0, r8, lsr #5
    8328:	0000929c 	muleq	r0, ip, r2

0000832c <rpi_thread_start>:
/*
 * starts the thread system.  
 * note: our caller is not a thread!  so you have to figure
 * out how to handle this.
 */
void rpi_thread_start(void) {
    832c:	e92d4010 	push	{r4, lr}
    AssertNow(offsetof(rpi_thread_t, stack) % 8 == 0);
    // statically check that the register save area is at offset 0.
    AssertNow(offsetof(rpi_thread_t, reg_save_area) == 0);

    // no other runnable thread: return.
    if(Q_empty(&runq))
    8330:	e59f0038 	ldr	r0, [pc, #56]	; 8370 <rpi_thread_start+0x44>
    8334:	ebffff89 	bl	8160 <Q_empty>
    8338:	e3500000 	cmp	r0, #0
    833c:	18bd8010 	popne	{r4, pc}

    //  1. create a new fake thread 
    //  2. dequeue a thread from the runq
    //  3. context switch to it, saving current state in
    //	    <scheduler_thread>
    scheduler_thread = th_alloc();
    8340:	ebffffb4 	bl	8218 <th_alloc>
    8344:	e59f4028 	ldr	r4, [pc, #40]	; 8374 <rpi_thread_start+0x48>
    8348:	e5840014 	str	r0, [r4, #20]
    rpi_thread_t* next_thread = th_alloc();
    834c:	ebffffb1 	bl	8218 <th_alloc>
	next_thread = Q_pop(&runq);
    8350:	e284000c 	add	r0, r4, #12
    8354:	ebffff90 	bl	819c <Q_pop>
    8358:	e1a01000 	mov	r1, r0
	rpi_cswitch(scheduler_thread->reg_save_area, next_thread->reg_save_area);
    835c:	e5940014 	ldr	r0, [r4, #20]
    8360:	eb000007 	bl	8384 <rpi_cswitch>
    printk("rpithreads: done with all threads! returning\n");
    8364:	e59f000c 	ldr	r0, [pc, #12]	; 8378 <rpi_thread_start+0x4c>
    8368:	eb000018 	bl	83d0 <printk>
    836c:	e8bd8010 	pop	{r4, pc}
    8370:	000092a8 	andeq	r9, r0, r8, lsr #5
    8374:	0000929c 	muleq	r0, ip, r2
    8378:	00009054 	andeq	r9, r0, r4, asr r0

0000837c <rpi_get_sp>:
    837c:	e1a0000d 	mov	r0, sp
    8380:	e12fff1e 	bx	lr

00008384 <rpi_cswitch>:
    8384:	e9200ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    8388:	e5820000 	str	r0, [r2]
    838c:	e5831000 	str	r1, [r3]
    8390:	e92d4008 	push	{r3, lr}
    8394:	eb000004 	bl	83ac <rpi_init_trampoline>
    8398:	e8bd4008 	pop	{r3, lr}
    839c:	e5931000 	ldr	r1, [r3]
    83a0:	e5910000 	ldr	r0, [r1]
    83a4:	e8b00ff0 	ldm	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    83a8:	e12fff1e 	bx	lr

000083ac <rpi_init_trampoline>:
    83ac:	e12fff1e 	bx	lr

000083b0 <memset>:
#include <string.h>

void *memset(void *_p, int c, size_t n) {
    char *p = _p, *e = p + n;
    83b0:	e0802002 	add	r2, r0, r2
    83b4:	e1a03000 	mov	r3, r0

    while(p < e)
    83b8:	ea000001 	b	83c4 <memset+0x14>
        *p++ = c;
    83bc:	e5c31000 	strb	r1, [r3]
    83c0:	e2833001 	add	r3, r3, #1
#include <string.h>

void *memset(void *_p, int c, size_t n) {
    char *p = _p, *e = p + n;

    while(p < e)
    83c4:	e1530002 	cmp	r3, r2
    83c8:	3afffffb 	bcc	83bc <memset+0xc>
        *p++ = c;
    return _p;
}
    83cc:	e12fff1e 	bx	lr

000083d0 <printk>:
#include <stdarg.h>

#include "rpi.h"
#include "va-printk.h"

int printk(const char *fmt, ...) {
    83d0:	e92d000f 	push	{r0, r1, r2, r3}
    83d4:	e92d4030 	push	{r4, r5, lr}
    83d8:	e24dd00c 	sub	sp, sp, #12
    // this is a really huge buffer for a pi.   could do this better.
    static char buf[1024];
    va_list args;

    va_start(args, fmt);
    83dc:	e28d301c 	add	r3, sp, #28
    83e0:	e58d3004 	str	r3, [sp, #4]
        int sz = va_printk(buf, sizeof buf, fmt, args);
    83e4:	e59f4034 	ldr	r4, [pc, #52]	; 8420 <printk+0x50>
    83e8:	e1a00004 	mov	r0, r4
    83ec:	e3a01b01 	mov	r1, #1024	; 0x400
    83f0:	e59d2018 	ldr	r2, [sp, #24]
    83f4:	eb0000b2 	bl	86c4 <va_printk>
    83f8:	e1a05000 	mov	r5, r0
    va_end(args);


#if 1
    putk(buf);
    83fc:	e59f3020 	ldr	r3, [pc, #32]	; 8424 <printk+0x54>
    8400:	e5933000 	ldr	r3, [r3]
    8404:	e1a00004 	mov	r0, r4
    8408:	e12fff33 	blx	r3
    int i;
    for(i = 0; buf[i]; i++)
        rpi_putchar(buf[i]);
#endif
    return sz;
}
    840c:	e1a00005 	mov	r0, r5
    8410:	e28dd00c 	add	sp, sp, #12
    8414:	e8bd4030 	pop	{r4, r5, lr}
    8418:	e28dd010 	add	sp, sp, #16
    841c:	e12fff1e 	bx	lr
    8420:	000092b4 			; <UNDEFINED> instruction: 0x000092b4
    8424:	00008eec 	andeq	r8, r0, ip, ror #29

00008428 <internal_putk>:
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    8428:	e92d4038 	push	{r3, r4, r5, lr}
    842c:	e1a04000 	mov	r4, r0
    for(; *p; p++)
        rpi_putchar(*p);
    8430:	e59f5020 	ldr	r5, [pc, #32]	; 8458 <internal_putk+0x30>
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    8434:	ea000002 	b	8444 <internal_putk+0x1c>
        rpi_putchar(*p);
    8438:	e5953000 	ldr	r3, [r5]
    843c:	e12fff33 	blx	r3
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    8440:	e2844001 	add	r4, r4, #1
    8444:	e5d40000 	ldrb	r0, [r4]
    8448:	e3500000 	cmp	r0, #0
    844c:	1afffff9 	bne	8438 <internal_putk+0x10>
        rpi_putchar(*p);
//  we were adding this.
//  rpi_putchar('\n');
    return 1;
}
    8450:	e3a00001 	mov	r0, #1
    8454:	e8bd8038 	pop	{r3, r4, r5, pc}
    8458:	00008ef0 	strdeq	r8, [r0], -r0

0000845c <isdigit>:
    if(puts_fp)
        putk = puts_fp;
}

// XXX: check sign promotion.
static int isdigit(int c) { return c >= '0' && c <= '9'; }
    845c:	e2400030 	sub	r0, r0, #48	; 0x30
    8460:	e3500009 	cmp	r0, #9
    8464:	83a00000 	movhi	r0, #0
    8468:	93a00001 	movls	r0, #1
    846c:	e12fff1e 	bx	lr

00008470 <pad>:

// don't move: can't be inlined, gcc seems to have a bug.
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
    8470:	e0611000 	rsb	r1, r1, r0
	// pad with leading spaces
	for(; len < width; len++)
		*p++ = ' ';
    8474:	e3a03020 	mov	r3, #32
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8478:	ea000002 	b	8488 <pad+0x18>
		*p++ = ' ';
    847c:	e5c03000 	strb	r3, [r0]
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8480:	e2811001 	add	r1, r1, #1
		*p++ = ' ';
    8484:	e2800001 	add	r0, r0, #1
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8488:	e1510002 	cmp	r1, r2
    848c:	bafffffa 	blt	847c <pad+0xc>
		*p++ = ' ';
	*p = 0;
    8490:	e3a03000 	mov	r3, #0
    8494:	e5c03000 	strb	r3, [r0]
	return p;
}
    8498:	e12fff1e 	bx	lr

0000849c <reverse>:

static char* reverse(char *dst, int n, char *p, char *start) {
	// drop the lower chars if the string is too big.
	int len = p - start + 1; // include \0
    849c:	e063c002 	rsb	ip, r3, r2
    84a0:	e28cc001 	add	ip, ip, #1
	if(len > n)
    84a4:	e15c0001 	cmp	ip, r1
		start += (len - n);
    84a8:	c061100c 	rsbgt	r1, r1, ip
    84ac:	c0833001 	addgt	r3, r3, r1

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    84b0:	e2422001 	sub	r2, r2, #1
    84b4:	e1a01000 	mov	r1, r0
    84b8:	ea000002 	b	84c8 <reverse+0x2c>
		*dst++ = *p;
    84bc:	e452c001 	ldrb	ip, [r2], #-1
    84c0:	e5c1c000 	strb	ip, [r1]
    84c4:	e2811001 	add	r1, r1, #1
		start += (len - n);

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    84c8:	e1520003 	cmp	r2, r3
    84cc:	2afffffa 	bcs	84bc <reverse+0x20>
		*dst++ = *p;
	*dst++ = 0;
    84d0:	e3a03000 	mov	r3, #0
    84d4:	e5c13000 	strb	r3, [r1]

	return s;
}
    84d8:	e12fff1e 	bx	lr

000084dc <emit>:

static char* emit(unsigned base, char *dst, int n, int val, int width, int signed_p) {
    84dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    84e0:	e24dd040 	sub	sp, sp, #64	; 0x40
    84e4:	e1a05001 	mov	r5, r1
    84e8:	e1a04002 	mov	r4, r2
    84ec:	e59d2058 	ldr	r2, [sp, #88]	; 0x58
	// XXX: constrain width to be >= bit size: can change this.
	if(width > n)
    84f0:	e1520004 	cmp	r2, r4
		width = n - 1;
    84f4:	c2442001 	subgt	r2, r4, #1

	char buf[64], *p = buf; 
	unsigned u = val;
    84f8:	e1a0c003 	mov	ip, r3

	switch(base) { 
    84fc:	e2400002 	sub	r0, r0, #2
    8500:	e350000e 	cmp	r0, #14
    8504:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
    8508:	ea000042 	b	8618 <emit+0x13c>
    850c:	000085f0 	strdeq	r8, [r0], -r0
    8510:	00008618 	andeq	r8, r0, r8, lsl r6
    8514:	00008618 	andeq	r8, r0, r8, lsl r6
    8518:	00008618 	andeq	r8, r0, r8, lsl r6
    851c:	00008618 	andeq	r8, r0, r8, lsl r6
    8520:	00008618 	andeq	r8, r0, r8, lsl r6
    8524:	000085e4 	andeq	r8, r0, r4, ror #11
    8528:	00008618 	andeq	r8, r0, r8, lsl r6
    852c:	00008548 	andeq	r8, r0, r8, asr #10
    8530:	00008618 	andeq	r8, r0, r8, lsl r6
    8534:	00008618 	andeq	r8, r0, r8, lsl r6
    8538:	00008618 	andeq	r8, r0, r8, lsl r6
    853c:	00008618 	andeq	r8, r0, r8, lsl r6
    8540:	00008618 	andeq	r8, r0, r8, lsl r6
    8544:	000085bc 			; <UNDEFINED> instruction: 0x000085bc
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
    8548:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
    854c:	e2911000 	adds	r1, r1, #0
    8550:	13a01001 	movne	r1, #1
    8554:	e0111fa3 	ands	r1, r1, r3, lsr #31
				neg_p = 1;
				val = -val;
    8558:	1263c000 	rsbne	ip, r3, #0
	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
				neg_p = 1;
    855c:	13a08001 	movne	r8, #1
	unsigned u = val;

	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
    8560:	03a08000 	moveq	r8, #0
			if(val < 0 && signed_p) {
				neg_p = 1;
    8564:	e1a0100d 	mov	r1, sp
				val = -val;
				u = val;
			}
			do { 
				*p++ = "0123456789"[u % 10];
    8568:	e59f70e8 	ldr	r7, [pc, #232]	; 8658 <emit+0x17c>
    856c:	e59f60e8 	ldr	r6, [pc, #232]	; 865c <emit+0x180>
    8570:	ea000000 	b	8578 <emit+0x9c>
    8574:	e1a01003 	mov	r1, r3
    8578:	e2813001 	add	r3, r1, #1
    857c:	e08e0c97 	umull	r0, lr, r7, ip
    8580:	e1a0e1ae 	lsr	lr, lr, #3
    8584:	e1a0000e 	mov	r0, lr
    8588:	e08ee10e 	add	lr, lr, lr, lsl #2
    858c:	e1a0e08e 	lsl	lr, lr, #1
    8590:	e06ee00c 	rsb	lr, lr, ip
    8594:	e7d6c00e 	ldrb	ip, [r6, lr]
    8598:	e5c1c000 	strb	ip, [r1]
			} while(u /= 10); 
    859c:	e1a0c000 	mov	ip, r0
    85a0:	e3500000 	cmp	r0, #0
    85a4:	1afffff2 	bne	8574 <emit+0x98>
			if(neg_p)
    85a8:	e3580000 	cmp	r8, #0
				*p++ = '-';
    85ac:	12813002 	addne	r3, r1, #2
    85b0:	13a0002d 	movne	r0, #45	; 0x2d
    85b4:	15c10001 	strbne	r0, [r1, #1]
    85b8:	ea00001c 	b	8630 <emit+0x154>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    85bc:	e1a0e00d 	mov	lr, sp
			break;
		}
		case 16:
			u = val;
                        do {
                                *p++ = "0123456789abcdef"[u % 16];
    85c0:	e59f0098 	ldr	r0, [pc, #152]	; 8660 <emit+0x184>
    85c4:	e28e3001 	add	r3, lr, #1
    85c8:	e20c100f 	and	r1, ip, #15
    85cc:	e7d01001 	ldrb	r1, [r0, r1]
    85d0:	e5ce1000 	strb	r1, [lr]
    85d4:	e1a0e003 	mov	lr, r3
                        } while(u /= 16);
    85d8:	e1b0c22c 	lsrs	ip, ip, #4
    85dc:	1afffff8 	bne	85c4 <emit+0xe8>
    85e0:	ea000012 	b	8630 <emit+0x154>
                        break;
		// just a single char
		case 8:
			*p++ = val;
    85e4:	e5cd3000 	strb	r3, [sp]
    85e8:	e28d3001 	add	r3, sp, #1
			break;
    85ec:	ea00000f 	b	8630 <emit+0x154>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    85f0:	e1a0e00d 	mov	lr, sp
#if 0
			for(int i = 0; i < 32; i++)
				*p++ = "01"[(u & (1<<i)) != 0];
#else
                        do {
                        	*p++ = "01"[u % 2];
    85f4:	e59f0068 	ldr	r0, [pc, #104]	; 8664 <emit+0x188>
    85f8:	e28e3001 	add	r3, lr, #1
    85fc:	e20c1001 	and	r1, ip, #1
    8600:	e7d01001 	ldrb	r1, [r0, r1]
    8604:	e5ce1000 	strb	r1, [lr]
    8608:	e1a0e003 	mov	lr, r3
			} while(u /= 2);
    860c:	e1b0c0ac 	lsrs	ip, ip, #1
    8610:	1afffff8 	bne	85f8 <emit+0x11c>
    8614:	ea000005 	b	8630 <emit+0x154>
#endif
			break;
		default:
			assert(0);
    8618:	e59f0048 	ldr	r0, [pc, #72]	; 8668 <emit+0x18c>
    861c:	e59f1048 	ldr	r1, [pc, #72]	; 866c <emit+0x190>
    8620:	e59f2048 	ldr	r2, [pc, #72]	; 8670 <emit+0x194>
    8624:	e3a03075 	mov	r3, #117	; 0x75
    8628:	ebffff68 	bl	83d0 <printk>
    862c:	eb0000de 	bl	89ac <rpi_reboot>
	}
	// number string is reversed, so re-reverse it.
	return reverse(dst, n, pad(p, buf, width), buf);
    8630:	e1a00003 	mov	r0, r3
    8634:	e1a0100d 	mov	r1, sp
    8638:	ebffff8c 	bl	8470 <pad>
    863c:	e1a02000 	mov	r2, r0
    8640:	e1a00005 	mov	r0, r5
    8644:	e1a01004 	mov	r1, r4
    8648:	e1a0300d 	mov	r3, sp
    864c:	ebffff92 	bl	849c <reverse>
}
    8650:	e28dd040 	add	sp, sp, #64	; 0x40
    8654:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8658:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    865c:	000090d0 	ldrdeq	r9, [r0], -r0
    8660:	000090dc 	ldrdeq	r9, [r0], -ip
    8664:	000090f0 	strdeq	r9, [r0], -r0
    8668:	000090a8 	andeq	r9, r0, r8, lsr #1
    866c:	000090bc 	strheq	r9, [r0], -ip
    8670:	00009084 	andeq	r9, r0, r4, lsl #1

00008674 <rpi_set_output>:
// override this is going through the network.
int (*rpi_putchar)(int c) = internal_putchar;
#endif


void rpi_set_output(int (*putc_fp)(int), int (*puts_fp)(const char *)) {
    8674:	e92d4008 	push	{r3, lr}
    assert(putc_fp);
    8678:	e3500000 	cmp	r0, #0
    867c:	1a000005 	bne	8698 <rpi_set_output+0x24>
    8680:	e59f0028 	ldr	r0, [pc, #40]	; 86b0 <rpi_set_output+0x3c>
    8684:	e59f1028 	ldr	r1, [pc, #40]	; 86b4 <rpi_set_output+0x40>
    8688:	e59f2028 	ldr	r2, [pc, #40]	; 86b8 <rpi_set_output+0x44>
    868c:	e3a03020 	mov	r3, #32
    8690:	ebffff4e 	bl	83d0 <printk>
    8694:	eb0000c4 	bl	89ac <rpi_reboot>
    rpi_putchar = putc_fp;
    8698:	e59f301c 	ldr	r3, [pc, #28]	; 86bc <rpi_set_output+0x48>
    869c:	e5830000 	str	r0, [r3]
    if(puts_fp)
    86a0:	e3510000 	cmp	r1, #0
        putk = puts_fp;
    86a4:	159f3014 	ldrne	r3, [pc, #20]	; 86c0 <rpi_set_output+0x4c>
    86a8:	15831000 	strne	r1, [r3]
    86ac:	e8bd8008 	pop	{r3, pc}
    86b0:	000090f4 	strdeq	r9, [r0], -r4
    86b4:	000090bc 	strheq	r9, [r0], -ip
    86b8:	0000908c 	andeq	r9, r0, ip, lsl #1
    86bc:	00008ef0 	strdeq	r8, [r0], -r0
    86c0:	00008eec 	andeq	r8, r0, ip, ror #29

000086c4 <va_printk>:
	return reverse(dst, n, pad(p, buf, width), buf);
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
    86c4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    86c8:	e24dd08c 	sub	sp, sp, #140	; 0x8c
    86cc:	e1a0b000 	mov	fp, r0
    86d0:	e1a0a003 	mov	sl, r3
	char *p = buf, *e = buf + n - 1;
    86d4:	e2411001 	sub	r1, r1, #1
    86d8:	e0808001 	add	r8, r0, r1

	buf[0] = 0;
    86dc:	e3a03000 	mov	r3, #0
    86e0:	e5c03000 	strb	r3, [r0]
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;
    86e4:	e1a04000 	mov	r4, r0

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    86e8:	ea000087 	b	890c <va_printk+0x248>
		if(*fmt != '%')
    86ec:	e3530025 	cmp	r3, #37	; 0x25
			*p++ = *fmt++;
    86f0:	12822001 	addne	r2, r2, #1
    86f4:	15c43000 	strbne	r3, [r4]
    86f8:	12844001 	addne	r4, r4, #1
    86fc:	1a000082 	bne	890c <va_printk+0x248>
		
		else if(fmt[1] == '%') {
    8700:	e5d21001 	ldrb	r1, [r2, #1]
    8704:	e3510025 	cmp	r1, #37	; 0x25
			*p++ = *fmt;
    8708:	05c43000 	strbeq	r3, [r4]
			fmt+=2;
    870c:	02822002 	addeq	r2, r2, #2
	for(; *fmt && p < e; ) {
		if(*fmt != '%')
			*p++ = *fmt++;
		
		else if(fmt[1] == '%') {
			*p++ = *fmt;
    8710:	02844001 	addeq	r4, r4, #1
    8714:	0a00007c 	beq	890c <va_printk+0x248>
			fmt+=2;
		} else {	
			fmt++;
    8718:	e2826001 	add	r6, r2, #1

			char *s, num[128];
			unsigned width = 0;
    871c:	e3a07000 	mov	r7, #0

			while(isdigit(*fmt)) {
    8720:	ea000004 	b	8738 <va_printk+0x74>
				width = width*10 + *fmt - '0';
    8724:	e0877107 	add	r7, r7, r7, lsl #2
    8728:	e1a07087 	lsl	r7, r7, #1
    872c:	e0877005 	add	r7, r7, r5
    8730:	e2477030 	sub	r7, r7, #48	; 0x30
				fmt++;
    8734:	e2866001 	add	r6, r6, #1
			fmt++;

			char *s, num[128];
			unsigned width = 0;

			while(isdigit(*fmt)) {
    8738:	e5d65000 	ldrb	r5, [r6]
    873c:	e1a09005 	mov	r9, r5
    8740:	e1a00005 	mov	r0, r5
    8744:	ebffff44 	bl	845c <isdigit>
    8748:	e3500000 	cmp	r0, #0
    874c:	1afffff4 	bne	8724 <va_printk+0x60>
				width = width*10 + *fmt - '0';
				fmt++;
			}
			assert(width < 32);
    8750:	e357001f 	cmp	r7, #31
    8754:	9a000005 	bls	8770 <va_printk+0xac>
    8758:	e59f01d8 	ldr	r0, [pc, #472]	; 8938 <va_printk+0x274>
    875c:	e59f11d8 	ldr	r1, [pc, #472]	; 893c <va_printk+0x278>
    8760:	e59f21d8 	ldr	r2, [pc, #472]	; 8940 <va_printk+0x27c>
    8764:	e3a03092 	mov	r3, #146	; 0x92
    8768:	ebffff18 	bl	83d0 <printk>
    876c:	eb00008e 	bl	89ac <rpi_reboot>
			
			switch(*fmt) {
    8770:	e2455062 	sub	r5, r5, #98	; 0x62
    8774:	e3550016 	cmp	r5, #22
    8778:	979ff105 	ldrls	pc, [pc, r5, lsl #2]
    877c:	ea000051 	b	88c8 <va_printk+0x204>
    8780:	0000886c 	andeq	r8, r0, ip, ror #16
    8784:	000088a0 	andeq	r8, r0, r0, lsr #17
    8788:	000087f4 	strdeq	r8, [r0], -r4
    878c:	000088c8 	andeq	r8, r0, r8, asr #17
    8790:	000087dc 	ldrdeq	r8, [r0], -ip
    8794:	000088c8 	andeq	r8, r0, r8, asr #17
    8798:	000088c8 	andeq	r8, r0, r8, asr #17
    879c:	000088c8 	andeq	r8, r0, r8, asr #17
    87a0:	000088c8 	andeq	r8, r0, r8, asr #17
    87a4:	000088c8 	andeq	r8, r0, r8, asr #17
    87a8:	000088c8 	andeq	r8, r0, r8, asr #17
    87ac:	000088c8 	andeq	r8, r0, r8, asr #17
    87b0:	000088c8 	andeq	r8, r0, r8, asr #17
    87b4:	000088c8 	andeq	r8, r0, r8, asr #17
    87b8:	00008844 	andeq	r8, r0, r4, asr #16
    87bc:	000088c8 	andeq	r8, r0, r8, asr #17
    87c0:	000088c8 	andeq	r8, r0, r8, asr #17
    87c4:	00008894 	muleq	r0, r4, r8
    87c8:	000088c8 	andeq	r8, r0, r8, asr #17
    87cc:	0000881c 	andeq	r8, r0, ip, lsl r8
    87d0:	000088c8 	andeq	r8, r0, r8, asr #17
    87d4:	000088c8 	andeq	r8, r0, r8, asr #17
    87d8:	00008844 	andeq	r8, r0, r4, asr #16
			case 'f':
			{
#ifndef RPI_FP_ENABLED
				panic("float not enabled!!!");
    87dc:	e59f0160 	ldr	r0, [pc, #352]	; 8944 <va_printk+0x280>
    87e0:	e59f1154 	ldr	r1, [pc, #340]	; 893c <va_printk+0x278>
    87e4:	e59f2154 	ldr	r2, [pc, #340]	; 8940 <va_printk+0x27c>
    87e8:	e3a03098 	mov	r3, #152	; 0x98
    87ec:	ebfffef7 	bl	83d0 <printk>
    87f0:	eb00006d 	bl	89ac <rpi_reboot>

				break;
#endif
			}
			case 'd':
				s = emit(10, num, 128, va_arg(args, int), width, 1);
    87f4:	e59a3000 	ldr	r3, [sl]
    87f8:	e28aa004 	add	sl, sl, #4
    87fc:	e58d7000 	str	r7, [sp]
    8800:	e3a02001 	mov	r2, #1
    8804:	e58d2004 	str	r2, [sp, #4]
    8808:	e3a0000a 	mov	r0, #10
    880c:	e28d1008 	add	r1, sp, #8
    8810:	e3a02080 	mov	r2, #128	; 0x80
    8814:	ebffff30 	bl	84dc <emit>
				break;
    8818:	ea000031 	b	88e4 <va_printk+0x220>
			case 'u':
				s = emit(10, num, 128, va_arg(args, unsigned), width, 0);
    881c:	e59a3000 	ldr	r3, [sl]
    8820:	e28aa004 	add	sl, sl, #4
    8824:	e58d7000 	str	r7, [sp]
    8828:	e3a02000 	mov	r2, #0
    882c:	e58d2004 	str	r2, [sp, #4]
    8830:	e3a0000a 	mov	r0, #10
    8834:	e28d1008 	add	r1, sp, #8
    8838:	e3a02080 	mov	r2, #128	; 0x80
    883c:	ebffff26 	bl	84dc <emit>
				break;
    8840:	ea000027 	b	88e4 <va_printk+0x220>
			case 'p':
			case 'x':
				s = emit(16, num, 128, va_arg(args, unsigned), width, 0);
    8844:	e59a3000 	ldr	r3, [sl]
    8848:	e28aa004 	add	sl, sl, #4
    884c:	e58d7000 	str	r7, [sp]
    8850:	e3a02000 	mov	r2, #0
    8854:	e58d2004 	str	r2, [sp, #4]
    8858:	e3a00010 	mov	r0, #16
    885c:	e28d1008 	add	r1, sp, #8
    8860:	e3a02080 	mov	r2, #128	; 0x80
    8864:	ebffff1c 	bl	84dc <emit>
				break;
    8868:	ea00001d 	b	88e4 <va_printk+0x220>
			case 'b':
				s = emit(2, num, 128, va_arg(args, unsigned), width, 0);
    886c:	e59a3000 	ldr	r3, [sl]
    8870:	e28aa004 	add	sl, sl, #4
    8874:	e58d7000 	str	r7, [sp]
    8878:	e3a02000 	mov	r2, #0
    887c:	e58d2004 	str	r2, [sp, #4]
    8880:	e3a00002 	mov	r0, #2
    8884:	e28d1008 	add	r1, sp, #8
    8888:	e3a02080 	mov	r2, #128	; 0x80
    888c:	ebffff12 	bl	84dc <emit>
				break;
    8890:	ea000013 	b	88e4 <va_printk+0x220>
			case 's':
				s = va_arg(args, char *);
    8894:	e59a0000 	ldr	r0, [sl]
    8898:	e28aa004 	add	sl, sl, #4
				break;
    889c:	ea000010 	b	88e4 <va_printk+0x220>
			case 'c':
				s = emit(8, num, 128, va_arg(args, int),width,0);
    88a0:	e59a3000 	ldr	r3, [sl]
    88a4:	e28aa004 	add	sl, sl, #4
    88a8:	e58d7000 	str	r7, [sp]
    88ac:	e3a02000 	mov	r2, #0
    88b0:	e58d2004 	str	r2, [sp, #4]
    88b4:	e3a00008 	mov	r0, #8
    88b8:	e08d1000 	add	r1, sp, r0
    88bc:	e3a02080 	mov	r2, #128	; 0x80
    88c0:	ebffff05 	bl	84dc <emit>
				break;
    88c4:	ea000006 	b	88e4 <va_printk+0x220>
			default: 
				panic("printk: not handling specifier '%c'\n", *fmt);
    88c8:	e58d9000 	str	r9, [sp]
    88cc:	e59f0074 	ldr	r0, [pc, #116]	; 8948 <va_printk+0x284>
    88d0:	e59f1064 	ldr	r1, [pc, #100]	; 893c <va_printk+0x278>
    88d4:	e59f2064 	ldr	r2, [pc, #100]	; 8940 <va_printk+0x27c>
    88d8:	e3a030b9 	mov	r3, #185	; 0xb9
    88dc:	ebfffebb 	bl	83d0 <printk>
    88e0:	eb000031 	bl	89ac <rpi_reboot>
				return 0;   // ugh
			}
			fmt++;
    88e4:	e2862001 	add	r2, r6, #1

			// safe string copy
			for(; p < e && *s; )
    88e8:	ea000002 	b	88f8 <va_printk+0x234>
				*p++ = *s++;
    88ec:	e2800001 	add	r0, r0, #1
    88f0:	e5c43000 	strb	r3, [r4]
    88f4:	e2844001 	add	r4, r4, #1
				return 0;   // ugh
			}
			fmt++;

			// safe string copy
			for(; p < e && *s; )
    88f8:	e1540008 	cmp	r4, r8
    88fc:	2a000002 	bcs	890c <va_printk+0x248>
    8900:	e5d03000 	ldrb	r3, [r0]
    8904:	e3530000 	cmp	r3, #0
    8908:	1afffff7 	bne	88ec <va_printk+0x228>

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    890c:	e5d23000 	ldrb	r3, [r2]
    8910:	e3530000 	cmp	r3, #0
    8914:	0a000001 	beq	8920 <va_printk+0x25c>
    8918:	e1540008 	cmp	r4, r8
    891c:	3affff72 	bcc	86ec <va_printk+0x28>
			// safe string copy
			for(; p < e && *s; )
				*p++ = *s++;
		}
	}
	*p++ = 0;
    8920:	e2840001 	add	r0, r4, #1
    8924:	e3a03000 	mov	r3, #0
    8928:	e5c43000 	strb	r3, [r4]
	return p - buf;
}
    892c:	e06b0000 	rsb	r0, fp, r0
    8930:	e28dd08c 	add	sp, sp, #140	; 0x8c
    8934:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8938:	0000910c 	andeq	r9, r0, ip, lsl #2
    893c:	000090bc 	strheq	r9, [r0], -ip
    8940:	0000909c 	muleq	r0, ip, r0
    8944:	00009128 	andeq	r9, r0, r8, lsr #2
    8948:	00009150 	andeq	r9, r0, r0, asr r1

0000894c <_cstart>:
#include "rpi.h"

void _cstart() {
    894c:	e92d4008 	push	{r3, lr}
    extern int __bss_start__, __bss_end__;
	void notmain();

    int* bss = &__bss_start__;
    8950:	e59f3020 	ldr	r3, [pc, #32]	; 8978 <_cstart+0x2c>
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    8954:	e59f2020 	ldr	r2, [pc, #32]	; 897c <_cstart+0x30>
        *bss++ = 0;
    8958:	e3a01000 	mov	r1, #0
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    895c:	ea000001 	b	8968 <_cstart+0x1c>
        *bss++ = 0;
    8960:	e5831000 	str	r1, [r3]
    8964:	e2833004 	add	r3, r3, #4
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    8968:	e1530002 	cmp	r3, r2
    896c:	3afffffb 	bcc	8960 <_cstart+0x14>
        *bss++ = 0;

    notmain(); 
    8970:	ebfffddc 	bl	80e8 <notmain>
	rpi_reboot();
    8974:	eb00000c 	bl	89ac <rpi_reboot>
    8978:	0000929c 	muleq	r0, ip, r2
    897c:	000096c0 	andeq	r9, r0, r0, asr #13

00008980 <at_user_level>:
 * works if we have a trashed stack pointer?
 */
static unsigned user_level = 0b10000;
int at_user_level(void) {
    unsigned cpsr = 0;
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    8980:	e10f0000 	mrs	r0, CPSR

    // user level = lower 5 bits = 0b10000);
    return (cpsr  & 0b11111)  == user_level;
    8984:	e200001f 	and	r0, r0, #31
}
    8988:	e3500010 	cmp	r0, #16
    898c:	13a00000 	movne	r0, #0
    8990:	03a00001 	moveq	r0, #1
    8994:	e12fff1e 	bx	lr

00008998 <set_user_level>:

// this is just used by the reboot code.
void set_user_level(void) {
    unsigned cpsr = 0;
    // XXX: shouldn't we just set the one bit?
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    8998:	e10f3000 	mrs	r3, CPSR
        cpsr = (cpsr & ~0b11111) | user_level;
    899c:	e3c3301f 	bic	r3, r3, #31
    89a0:	e3833010 	orr	r3, r3, #16
    asm volatile("msr cpsr, %0" :: "r"(cpsr));
    89a4:	e129f003 	msr	CPSR_fc, r3
    89a8:	e12fff1e 	bx	lr

000089ac <rpi_reboot>:
}

void rpi_reboot(void) {
    89ac:	e92d4008 	push	{r3, lr}
    if(at_user_level()) {
    89b0:	ebfffff2 	bl	8980 <at_user_level>
    89b4:	e3500000 	cmp	r0, #0
    89b8:	0a000000 	beq	89c0 <rpi_reboot+0x14>
        set_user_level();
    89bc:	ebfffff5 	bl	8998 <set_user_level>
        // of stuff.
        // assert(!at_user_level());
    }

    // gives uart time to flush: should just call flush directly.
    delay_ms(30);
    89c0:	e3a0001e 	mov	r0, #30
    89c4:	eb00001f 	bl	8a48 <delay_ms>
    const int PM_WDOG = 0x20100024;
    const int PM_PASSWORD = 0x5a000000;
    const int PM_RSTC_WRCFG_FULL_RESET = 0x00000020;

    // timeout = 1/16th of a second? (whatever)
    PUT32(PM_WDOG, PM_PASSWORD | 1);
    89c8:	e59f0014 	ldr	r0, [pc, #20]	; 89e4 <rpi_reboot+0x38>
    89cc:	e59f1014 	ldr	r1, [pc, #20]	; 89e8 <rpi_reboot+0x3c>
    89d0:	eb000028 	bl	8a78 <PUT32>
    PUT32(PM_RSTC, PM_PASSWORD | PM_RSTC_WRCFG_FULL_RESET);
    89d4:	e59f0010 	ldr	r0, [pc, #16]	; 89ec <rpi_reboot+0x40>
    89d8:	e59f1010 	ldr	r1, [pc, #16]	; 89f0 <rpi_reboot+0x44>
    89dc:	eb000025 	bl	8a78 <PUT32>
    89e0:	eafffffe 	b	89e0 <rpi_reboot+0x34>
    89e4:	20100024 	andscs	r0, r0, r4, lsr #32
    89e8:	5a000001 	bpl	89f4 <delay_cycles>
    89ec:	2010001c 	andscs	r0, r0, ip, lsl r0
    89f0:	5a000020 	bpl	8a78 <PUT32>

000089f4 <delay_cycles>:
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    89f4:	ea000001 	b	8a00 <delay_cycles+0xc>
        asm("add r1, r1, #0");
    89f8:	e2811000 	add	r1, r1, #0
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    89fc:	e1a00003 	mov	r0, r3
    8a00:	e2403001 	sub	r3, r0, #1
    8a04:	e3500000 	cmp	r0, #0
    8a08:	1afffffa 	bne	89f8 <delay_cycles+0x4>
        asm("add r1, r1, #0");
}
    8a0c:	e12fff1e 	bx	lr

00008a10 <timer_get_usec>:

// in usec
unsigned timer_get_usec(void) {
    8a10:	e92d4008 	push	{r3, lr}
    return GET32(0x20003004);
    8a14:	e59f0004 	ldr	r0, [pc, #4]	; 8a20 <timer_get_usec+0x10>
    8a18:	eb000022 	bl	8aa8 <GET32>
}
    8a1c:	e8bd8008 	pop	{r3, pc}
    8a20:	20003004 	andcs	r3, r0, r4

00008a24 <delay_us>:

void delay_us(unsigned us) {
    8a24:	e92d4038 	push	{r3, r4, r5, lr}
    8a28:	e1a05000 	mov	r5, r0
    unsigned rb = timer_get_usec();
    8a2c:	ebfffff7 	bl	8a10 <timer_get_usec>
    8a30:	e1a04000 	mov	r4, r0
    while (1) {
        unsigned ra = timer_get_usec();
    8a34:	ebfffff5 	bl	8a10 <timer_get_usec>
        if ((ra - rb) >= us) {
    8a38:	e0640000 	rsb	r0, r4, r0
    8a3c:	e1500005 	cmp	r0, r5
    8a40:	3afffffb 	bcc	8a34 <delay_us+0x10>
            break;
        }
    }
}
    8a44:	e8bd8038 	pop	{r3, r4, r5, pc}

00008a48 <delay_ms>:
void delay_ms(unsigned ms) {
    8a48:	e92d4008 	push	{r3, lr}
    delay_us(ms*1000);
    8a4c:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    8a50:	e0000093 	mul	r0, r3, r0
    8a54:	ebfffff2 	bl	8a24 <delay_us>
    8a58:	e8bd8008 	pop	{r3, pc}

00008a5c <delay_sec>:
}
void delay_sec(unsigned sec) {
    8a5c:	e92d4008 	push	{r3, lr}
    delay_ms(sec*1000);
    8a60:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    8a64:	e0000093 	mul	r0, r3, r0
    8a68:	ebfffff6 	bl	8a48 <delay_ms>
    8a6c:	e8bd8008 	pop	{r3, pc}

00008a70 <put32>:
    8a70:	e5801000 	str	r1, [r0]
    8a74:	e12fff1e 	bx	lr

00008a78 <PUT32>:
    8a78:	e5801000 	str	r1, [r0]
    8a7c:	e12fff1e 	bx	lr

00008a80 <put16>:
    8a80:	e1c010b0 	strh	r1, [r0]
    8a84:	e12fff1e 	bx	lr

00008a88 <PUT16>:
    8a88:	e1c010b0 	strh	r1, [r0]
    8a8c:	e12fff1e 	bx	lr

00008a90 <put8>:
    8a90:	e5c01000 	strb	r1, [r0]
    8a94:	e12fff1e 	bx	lr

00008a98 <PUT8>:
    8a98:	e5c01000 	strb	r1, [r0]
    8a9c:	e12fff1e 	bx	lr

00008aa0 <get32>:
    8aa0:	e5900000 	ldr	r0, [r0]
    8aa4:	e12fff1e 	bx	lr

00008aa8 <GET32>:
    8aa8:	e5900000 	ldr	r0, [r0]
    8aac:	e12fff1e 	bx	lr

00008ab0 <GETPC>:
    8ab0:	e1a0000e 	mov	r0, lr
    8ab4:	e12fff1e 	bx	lr

00008ab8 <dummy>:
    8ab8:	e12fff1e 	bx	lr

00008abc <or_in32>:
    8abc:	e92d4070 	push	{r4, r5, r6, lr}
    8ac0:	e1a04000 	mov	r4, r0
    8ac4:	e1a05001 	mov	r5, r1
    8ac8:	ebfffff4 	bl	8aa0 <get32>
    8acc:	e1801005 	orr	r1, r0, r5
    8ad0:	e1a00004 	mov	r0, r4
    8ad4:	ebffffe5 	bl	8a70 <put32>
    8ad8:	e8bd8070 	pop	{r4, r5, r6, pc}

00008adc <uart_get>:
    8adc:	e59f0000 	ldr	r0, [pc]	; 8ae4 <uart_get+0x8>
    8ae0:	e12fff1e 	bx	lr
    8ae4:	20215040 	eorcs	r5, r1, r0, asr #32

00008ae8 <uart_init>:
    8ae8:	e92d4010 	push	{r4, lr}
    8aec:	e3a01002 	mov	r1, #2
    8af0:	e3a0000e 	mov	r0, #14
    8af4:	eb00004b 	bl	8c28 <gpio_set_function>
    8af8:	e3a01002 	mov	r1, #2
    8afc:	e3a0000f 	mov	r0, #15
    8b00:	eb000048 	bl	8c28 <gpio_set_function>
    8b04:	eb0000f2 	bl	8ed4 <dev_barrier>
    8b08:	e3a01001 	mov	r1, #1
    8b0c:	e59f0064 	ldr	r0, [pc, #100]	; 8b78 <uart_init+0x90>
    8b10:	ebffffe9 	bl	8abc <or_in32>
    8b14:	eb0000ee 	bl	8ed4 <dev_barrier>
    8b18:	e59f405c 	ldr	r4, [pc, #92]	; 8b7c <uart_init+0x94>
    8b1c:	e3a01000 	mov	r1, #0
    8b20:	e1a00004 	mov	r0, r4
    8b24:	ebffffd1 	bl	8a70 <put32>
    8b28:	e3a01000 	mov	r1, #0
    8b2c:	e59f004c 	ldr	r0, [pc, #76]	; 8b80 <uart_init+0x98>
    8b30:	ebffffce 	bl	8a70 <put32>
    8b34:	e3a01003 	mov	r1, #3
    8b38:	e59f0044 	ldr	r0, [pc, #68]	; 8b84 <uart_init+0x9c>
    8b3c:	ebffffcb 	bl	8a70 <put32>
    8b40:	e3a01000 	mov	r1, #0
    8b44:	e59f003c 	ldr	r0, [pc, #60]	; 8b88 <uart_init+0xa0>
    8b48:	ebffffc8 	bl	8a70 <put32>
    8b4c:	e3a010c7 	mov	r1, #199	; 0xc7
    8b50:	e59f0034 	ldr	r0, [pc, #52]	; 8b8c <uart_init+0xa4>
    8b54:	ebffffc5 	bl	8a70 <put32>
    8b58:	e59f1030 	ldr	r1, [pc, #48]	; 8b90 <uart_init+0xa8>
    8b5c:	e59f0030 	ldr	r0, [pc, #48]	; 8b94 <uart_init+0xac>
    8b60:	ebffffc2 	bl	8a70 <put32>
    8b64:	e3a01003 	mov	r1, #3
    8b68:	e1a00004 	mov	r0, r4
    8b6c:	ebffffbf 	bl	8a70 <put32>
    8b70:	eb0000d7 	bl	8ed4 <dev_barrier>
    8b74:	e8bd8010 	pop	{r4, pc}
    8b78:	20215004 	eorcs	r5, r1, r4
    8b7c:	20215060 	eorcs	r5, r1, r0, rrx
    8b80:	20215044 	eorcs	r5, r1, r4, asr #32
    8b84:	2021504c 	eorcs	r5, r1, ip, asr #32
    8b88:	20215050 	eorcs	r5, r1, r0, asr r0
    8b8c:	20215048 	eorcs	r5, r1, r8, asr #32
    8b90:	0000010e 	andeq	r0, r0, lr, lsl #2
    8b94:	20215068 	eorcs	r5, r1, r8, rrx

00008b98 <uart_can_getc>:
    8b98:	e92d4010 	push	{r4, lr}
    8b9c:	e59f0008 	ldr	r0, [pc, #8]	; 8bac <uart_can_getc+0x14>
    8ba0:	ebffffbe 	bl	8aa0 <get32>
    8ba4:	e2000001 	and	r0, r0, #1
    8ba8:	e8bd8010 	pop	{r4, pc}
    8bac:	20215064 	eorcs	r5, r1, r4, rrx

00008bb0 <uart_can_putc>:
    8bb0:	e92d4010 	push	{r4, lr}
    8bb4:	e59f0010 	ldr	r0, [pc, #16]	; 8bcc <uart_can_putc+0x1c>
    8bb8:	ebffffb8 	bl	8aa0 <get32>
    8bbc:	e3100002 	tst	r0, #2
    8bc0:	13a00001 	movne	r0, #1
    8bc4:	03a00000 	moveq	r0, #0
    8bc8:	e8bd8010 	pop	{r4, pc}
    8bcc:	20215064 	eorcs	r5, r1, r4, rrx

00008bd0 <uart_getc>:
    8bd0:	e92d4010 	push	{r4, lr}
    8bd4:	ebffffef 	bl	8b98 <uart_can_getc>
    8bd8:	e3500000 	cmp	r0, #0
    8bdc:	0afffffc 	beq	8bd4 <uart_getc+0x4>
    8be0:	e59f0008 	ldr	r0, [pc, #8]	; 8bf0 <uart_getc+0x20>
    8be4:	ebffffad 	bl	8aa0 <get32>
    8be8:	e6ef0070 	uxtb	r0, r0
    8bec:	e8bd8010 	pop	{r4, pc}
    8bf0:	20215040 	eorcs	r5, r1, r0, asr #32

00008bf4 <uart_putc>:
    8bf4:	e92d4010 	push	{r4, lr}
    8bf8:	e1a04000 	mov	r4, r0
    8bfc:	ebffffeb 	bl	8bb0 <uart_can_putc>
    8c00:	e3500000 	cmp	r0, #0
    8c04:	0afffffc 	beq	8bfc <uart_putc+0x8>
    8c08:	e6ef1074 	uxtb	r1, r4
    8c0c:	e59f0004 	ldr	r0, [pc, #4]	; 8c18 <uart_putc+0x24>
    8c10:	ebffff96 	bl	8a70 <put32>
    8c14:	e8bd8010 	pop	{r4, pc}
    8c18:	20215040 	eorcs	r5, r1, r0, asr #32

00008c1c <uart_has_data>:
    8c1c:	e92d4010 	push	{r4, lr}
    8c20:	ebffffdc 	bl	8b98 <uart_can_getc>
    8c24:	e8bd8010 	pop	{r4, pc}

00008c28 <gpio_set_function>:
    8c28:	e350001f 	cmp	r0, #31
    8c2c:	812fff1e 	bxhi	lr
    8c30:	e3d13007 	bics	r3, r1, #7
    8c34:	112fff1e 	bxne	lr
    8c38:	e92d4070 	push	{r4, r5, r6, lr}
    8c3c:	e1a04001 	mov	r4, r1
    8c40:	e59f2044 	ldr	r2, [pc, #68]	; 8c8c <gpio_set_function+0x64>
    8c44:	e0832290 	umull	r2, r3, r0, r2
    8c48:	e1a031a3 	lsr	r3, r3, #3
    8c4c:	e1a06003 	mov	r6, r3
    8c50:	e0833103 	add	r3, r3, r3, lsl #2
    8c54:	e1a02083 	lsl	r2, r3, #1
    8c58:	e0403002 	sub	r3, r0, r2
    8c5c:	e0835083 	add	r5, r3, r3, lsl #1
    8c60:	e1a06106 	lsl	r6, r6, #2
    8c64:	e2866202 	add	r6, r6, #536870912	; 0x20000000
    8c68:	e2866602 	add	r6, r6, #2097152	; 0x200000
    8c6c:	e1a00006 	mov	r0, r6
    8c70:	ebffff8a 	bl	8aa0 <get32>
    8c74:	e3a01007 	mov	r1, #7
    8c78:	e1c01511 	bic	r1, r0, r1, lsl r5
    8c7c:	e1811514 	orr	r1, r1, r4, lsl r5
    8c80:	e1a00006 	mov	r0, r6
    8c84:	ebffff79 	bl	8a70 <put32>
    8c88:	e8bd8070 	pop	{r4, r5, r6, pc}
    8c8c:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd

00008c90 <gpio_set_output>:
    8c90:	e92d4010 	push	{r4, lr}
    8c94:	e3a01001 	mov	r1, #1
    8c98:	ebffffe2 	bl	8c28 <gpio_set_function>
    8c9c:	e8bd8010 	pop	{r4, pc}

00008ca0 <gpio_set_on>:
    8ca0:	e350001f 	cmp	r0, #31
    8ca4:	812fff1e 	bxhi	lr
    8ca8:	e92d4010 	push	{r4, lr}
    8cac:	e3a01001 	mov	r1, #1
    8cb0:	e1a01011 	lsl	r1, r1, r0
    8cb4:	e59f0004 	ldr	r0, [pc, #4]	; 8cc0 <gpio_set_on+0x20>
    8cb8:	ebffff6e 	bl	8a78 <PUT32>
    8cbc:	e8bd8010 	pop	{r4, pc}
    8cc0:	2020001c 	eorcs	r0, r0, ip, lsl r0

00008cc4 <gpio_set_off>:
    8cc4:	e350001f 	cmp	r0, #31
    8cc8:	812fff1e 	bxhi	lr
    8ccc:	e92d4010 	push	{r4, lr}
    8cd0:	e3a01001 	mov	r1, #1
    8cd4:	e1a01011 	lsl	r1, r1, r0
    8cd8:	e59f0004 	ldr	r0, [pc, #4]	; 8ce4 <gpio_set_off+0x20>
    8cdc:	ebffff65 	bl	8a78 <PUT32>
    8ce0:	e8bd8010 	pop	{r4, pc}
    8ce4:	20200028 	eorcs	r0, r0, r8, lsr #32

00008ce8 <gpio_set_input>:
    8ce8:	e92d4010 	push	{r4, lr}
    8cec:	e3a01000 	mov	r1, #0
    8cf0:	ebffffcc 	bl	8c28 <gpio_set_function>
    8cf4:	e8bd8010 	pop	{r4, pc}

00008cf8 <gpio_write>:
    8cf8:	e92d4010 	push	{r4, lr}
    8cfc:	e3510000 	cmp	r1, #0
    8d00:	1a000001 	bne	8d0c <gpio_write+0x14>
    8d04:	ebffffee 	bl	8cc4 <gpio_set_off>
    8d08:	e8bd8010 	pop	{r4, pc}
    8d0c:	ebffffe3 	bl	8ca0 <gpio_set_on>
    8d10:	e8bd8010 	pop	{r4, pc}

00008d14 <gpio_read>:
    8d14:	e350001f 	cmp	r0, #31
    8d18:	8a000007 	bhi	8d3c <gpio_read+0x28>
    8d1c:	e92d4010 	push	{r4, lr}
    8d20:	e200401f 	and	r4, r0, #31
    8d24:	e59f3018 	ldr	r3, [pc, #24]	; 8d44 <gpio_read+0x30>
    8d28:	e08302a0 	add	r0, r3, r0, lsr #5
    8d2c:	ebffff5d 	bl	8aa8 <GET32>
    8d30:	e1a00430 	lsr	r0, r0, r4
    8d34:	e2000001 	and	r0, r0, #1
    8d38:	e8bd8010 	pop	{r4, pc}
    8d3c:	e3e00000 	mvn	r0, #0
    8d40:	e12fff1e 	bx	lr
    8d44:	20200034 	eorcs	r0, r0, r4, lsr r0

00008d48 <kmalloc>:
 *  - The returned pointer should always be 4-byte aligned.  
 *    Easiest way is to make sure the heap pointer starts 4-byte
 *    and you always round up the number of bytes.  Make sure
 *    you put an assertion in.  
 */
void *kmalloc(unsigned nbytes) {
    8d48:	e92d4010 	push	{r4, lr}
    demand(init_p, calling before initialized);
    8d4c:	e59f3048 	ldr	r3, [pc, #72]	; 8d9c <kmalloc+0x54>
    8d50:	e5933000 	ldr	r3, [r3]
    8d54:	e3530000 	cmp	r3, #0
    8d58:	1a000005 	bne	8d74 <kmalloc+0x2c>
    8d5c:	e59f003c 	ldr	r0, [pc, #60]	; 8da0 <kmalloc+0x58>
    8d60:	e59f103c 	ldr	r1, [pc, #60]	; 8da4 <kmalloc+0x5c>
    8d64:	e59f203c 	ldr	r2, [pc, #60]	; 8da8 <kmalloc+0x60>
    8d68:	e3a0301a 	mov	r3, #26
    8d6c:	ebfffd97 	bl	83d0 <printk>
    8d70:	ebffff0d 	bl	89ac <rpi_reboot>
    
    void* to_allocate = heap_ptr;
    8d74:	e59f3020 	ldr	r3, [pc, #32]	; 8d9c <kmalloc+0x54>
    8d78:	e5934004 	ldr	r4, [r3, #4]
    unsigned rounded_nbytes = roundup(nbytes, 4);
    8d7c:	e2802003 	add	r2, r0, #3
    8d80:	e3c22003 	bic	r2, r2, #3
    heap_ptr += rounded_nbytes;
    8d84:	e0840002 	add	r0, r4, r2
    8d88:	e5830004 	str	r0, [r3, #4]
    memset(heap_ptr, 0, rounded_nbytes);
    8d8c:	e3a01000 	mov	r1, #0
    8d90:	ebfffd86 	bl	83b0 <memset>
    return to_allocate;

}
    8d94:	e1a00004 	mov	r0, r4
    8d98:	e8bd8010 	pop	{r4, pc}
    8d9c:	000096b4 			; <UNDEFINED> instruction: 0x000096b4
    8da0:	000091b0 			; <UNDEFINED> instruction: 0x000091b0
    8da4:	000091f0 	strdeq	r9, [r0], -r0
    8da8:	00009188 	andeq	r9, r0, r8, lsl #3

00008dac <kmalloc_aligned>:

// address of returned pointer should be a multiple of
// alignment.
void *kmalloc_aligned(unsigned nbytes, unsigned alignment) {
    8dac:	e92d4008 	push	{r3, lr}
    demand(init_p, calling before initialized);
    8db0:	e59f3074 	ldr	r3, [pc, #116]	; 8e2c <kmalloc_aligned+0x80>
    8db4:	e5933000 	ldr	r3, [r3]
    8db8:	e3530000 	cmp	r3, #0
    8dbc:	1a000005 	bne	8dd8 <kmalloc_aligned+0x2c>
    8dc0:	e59f0068 	ldr	r0, [pc, #104]	; 8e30 <kmalloc_aligned+0x84>
    8dc4:	e59f1068 	ldr	r1, [pc, #104]	; 8e34 <kmalloc_aligned+0x88>
    8dc8:	e59f2068 	ldr	r2, [pc, #104]	; 8e38 <kmalloc_aligned+0x8c>
    8dcc:	e3a03027 	mov	r3, #39	; 0x27
    8dd0:	ebfffd7e 	bl	83d0 <printk>
    8dd4:	ebfffef4 	bl	89ac <rpi_reboot>

    if(alignment <= 4)
    8dd8:	e3510004 	cmp	r1, #4
    8ddc:	8a000001 	bhi	8de8 <kmalloc_aligned+0x3c>
        return kmalloc(nbytes);
    8de0:	ebffffd8 	bl	8d48 <kmalloc>
    8de4:	e8bd8008 	pop	{r3, pc}
    demand(alignment % 4 == 0, "weird alignment: not a multiple of 4!");
    8de8:	e3110003 	tst	r1, #3
    8dec:	0a000005 	beq	8e08 <kmalloc_aligned+0x5c>
    8df0:	e59f0044 	ldr	r0, [pc, #68]	; 8e3c <kmalloc_aligned+0x90>
    8df4:	e59f1038 	ldr	r1, [pc, #56]	; 8e34 <kmalloc_aligned+0x88>
    8df8:	e59f2038 	ldr	r2, [pc, #56]	; 8e38 <kmalloc_aligned+0x8c>
    8dfc:	e3a0302b 	mov	r3, #43	; 0x2b
    8e00:	ebfffd72 	bl	83d0 <printk>
    8e04:	ebfffee8 	bl	89ac <rpi_reboot>
    unsigned aligned_heap_ptr = (unsigned) heap_ptr;
    8e08:	e59f301c 	ldr	r3, [pc, #28]	; 8e2c <kmalloc_aligned+0x80>
    8e0c:	e5932004 	ldr	r2, [r3, #4]
	aligned_heap_ptr = roundup(aligned_heap_ptr, alignment);
    8e10:	e0812002 	add	r2, r1, r2
    8e14:	e2422001 	sub	r2, r2, #1
    8e18:	e2611000 	rsb	r1, r1, #0
    8e1c:	e0021001 	and	r1, r2, r1
	heap_ptr = (void*) aligned_heap_ptr;
    8e20:	e5831004 	str	r1, [r3, #4]

	return kmalloc(nbytes);
    8e24:	ebffffc7 	bl	8d48 <kmalloc>
}
    8e28:	e8bd8008 	pop	{r3, pc}
    8e2c:	000096b4 			; <UNDEFINED> instruction: 0x000096b4
    8e30:	000091b0 			; <UNDEFINED> instruction: 0x000091b0
    8e34:	000091f0 	strdeq	r9, [r0], -r0
    8e38:	00009190 	muleq	r0, r0, r1
    8e3c:	00009204 	andeq	r9, r0, r4, lsl #4

00008e40 <kmalloc_init>:
 *    - should be just a few lines of code.
 *    - sets heap pointer to the location of 
 *      __heap_start__.   print this to make sure
 *      it makes sense!
 */
void kmalloc_init(void) {
    8e40:	e92d4008 	push	{r3, lr}
    demand(!init_p, cannot initialize twice!\n);
    8e44:	e59f3038 	ldr	r3, [pc, #56]	; 8e84 <kmalloc_init+0x44>
    8e48:	e5933000 	ldr	r3, [r3]
    8e4c:	e3530000 	cmp	r3, #0
    8e50:	0a000005 	beq	8e6c <kmalloc_init+0x2c>
    8e54:	e59f002c 	ldr	r0, [pc, #44]	; 8e88 <kmalloc_init+0x48>
    8e58:	e59f102c 	ldr	r1, [pc, #44]	; 8e8c <kmalloc_init+0x4c>
    8e5c:	e59f202c 	ldr	r2, [pc, #44]	; 8e90 <kmalloc_init+0x50>
    8e60:	e3a0303c 	mov	r3, #60	; 0x3c
    8e64:	ebfffd59 	bl	83d0 <printk>
    8e68:	ebfffecf 	bl	89ac <rpi_reboot>
    init_p = 1;
    8e6c:	e59f3010 	ldr	r3, [pc, #16]	; 8e84 <kmalloc_init+0x44>
    8e70:	e3a02001 	mov	r2, #1
    8e74:	e5832000 	str	r2, [r3]
    heap_ptr = &__heap_start__;
    8e78:	e59f2014 	ldr	r2, [pc, #20]	; 8e94 <kmalloc_init+0x54>
    8e7c:	e5832004 	str	r2, [r3, #4]
    8e80:	e8bd8008 	pop	{r3, pc}
    8e84:	000096b4 			; <UNDEFINED> instruction: 0x000096b4
    8e88:	0000925c 	andeq	r9, r0, ip, asr r2
    8e8c:	000091f0 	strdeq	r9, [r0], -r0
    8e90:	000091a0 	andeq	r9, r0, r0, lsr #3
    8e94:	000096c0 	andeq	r9, r0, r0, asr #13

00008e98 <kfree_all>:
/* 
 * free all allocated memory: reset the heap 
 * pointer back to the beginning.
 */
void kfree_all(void) {
    heap_ptr = &__heap_start__;
    8e98:	e59f2008 	ldr	r2, [pc, #8]	; 8ea8 <kfree_all+0x10>
    8e9c:	e59f3008 	ldr	r3, [pc, #8]	; 8eac <kfree_all+0x14>
    8ea0:	e5832004 	str	r2, [r3, #4]
    8ea4:	e12fff1e 	bx	lr
    8ea8:	000096c0 	andeq	r9, r0, r0, asr #13
    8eac:	000096b4 			; <UNDEFINED> instruction: 0x000096b4

00008eb0 <kmalloc_heap_ptr>:
// allocated block satisfies: 
//    assert(<addr> < kmalloc_heap_ptr());
// 
void *kmalloc_heap_ptr(void) {
    return (void*) heap_ptr;
}
    8eb0:	e59f3004 	ldr	r3, [pc, #4]	; 8ebc <kmalloc_heap_ptr+0xc>
    8eb4:	e5930004 	ldr	r0, [r3, #4]
    8eb8:	e12fff1e 	bx	lr
    8ebc:	000096b4 			; <UNDEFINED> instruction: 0x000096b4

00008ec0 <internal_putchar>:
#include "rpi.h"

static int internal_putchar(int c) { uart_putc(c); return c; }
    8ec0:	e92d4010 	push	{r4, lr}
    8ec4:	e1a04000 	mov	r4, r0
    8ec8:	ebffff49 	bl	8bf4 <uart_putc>
    8ecc:	e1a00004 	mov	r0, r4
    8ed0:	e8bd8010 	pop	{r4, pc}

00008ed4 <dev_barrier>:
    8ed4:	ea000002 	b	8ee4 <dsb>

00008ed8 <dmb>:
    8ed8:	e3a00000 	mov	r0, #0
    8edc:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
    8ee0:	e12fff1e 	bx	lr

00008ee4 <dsb>:
    8ee4:	ee070f9a 	mcr	15, 0, r0, cr7, cr10, {4}
    8ee8:	e12fff1e 	bx	lr

Disassembly of section .data:

00008eec <putk>:
    8eec:	00008428 	andeq	r8, r0, r8, lsr #8

00008ef0 <rpi_putchar>:
    8ef0:	00008ec0 	andeq	r8, r0, r0, asr #29

Disassembly of section .rodata:

00008ef4 <__FUNCTION__.4156>:
    8ef4:	74696177 	strbtvc	r6, [r9], #-375	; 0x177
    8ef8:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0x55f
    8efc:	00000063 	andeq	r0, r0, r3, rrx

00008f00 <__FUNCTION__.4163>:
    8f00:	6e696c62 	cdpvs	12, 6, cr6, cr9, cr2, {3}
    8f04:	0000006b 	andeq	r0, r0, fp, rrx
    8f08:	0000004b 	andeq	r0, r0, fp, asr #32
    8f0c:	00000014 	andeq	r0, r0, r4, lsl r0
    8f10:	00000019 	andeq	r0, r0, r9, lsl r0
    8f14:	00000015 	andeq	r0, r0, r5, lsl r0

00008f18 <__FUNCTION__.4172>:
    8f18:	6d746f6e 	ldclvs	15, cr6, [r4, #-440]!	; 0xfffffe48
    8f1c:	006e6961 	rsbeq	r6, lr, r1, ror #18
    8f20:	4f525245 	svcmi	0x00525245
    8f24:	73253a52 	teqvc	r5, #335872	; 0x52000
    8f28:	3a73253a 	bcc	1cd2418 <__bss_end__+0x1cc8d58>
    8f2c:	203a6425 	eorscs	r6, sl, r5, lsr #8
    8f30:	534c4146 	movtpl	r4, #49478	; 0xc146
    8f34:	6e3c2845 	cdpvs	8, 3, cr2, cr12, cr5, {2}
    8f38:	31203c20 	teqcc	r0, r0, lsr #24
    8f3c:	30303030 	eorscc	r3, r0, r0, lsr r0
    8f40:	3a293e30 	bcc	a58808 <__bss_end__+0xa4f148>
    8f44:	6e752220 	cdpvs	2, 7, cr2, cr5, cr0, {1}
    8f48:	656b696c 	strbvs	r6, [fp, #-2412]!	; 0x96c
    8f4c:	6c20796c 	stcvs	9, cr7, [r0], #-432	; 0xfffffe50
    8f50:	65677261 	strbvs	r7, [r7, #-609]!	; 0x261
    8f54:	6c656420 	cfstrdvs	mvd6, [r5], #-128	; 0xffffff80
    8f58:	3d207961 	stccc	9, cr7, [r0, #-388]!	; 0xfffffe7c
    8f5c:	75642520 	strbvc	r2, [r4, #-1312]!	; 0x520
    8f60:	21636573 	smccs	13907	; 0x3653
    8f64:	0a226e5c 	beq	8a48dc <__bss_end__+0x89b21c>
    8f68:	00000000 	andeq	r0, r0, r0
    8f6c:	65742d33 	ldrbvs	r2, [r4, #-3379]!	; 0xd33
    8f70:	792d7473 	pushvc	{r0, r1, r4, r5, r6, sl, ip, sp, lr}
    8f74:	646c6569 	strbtvs	r6, [ip], #-1385	; 0x569
    8f78:	0000632e 	andeq	r6, r0, lr, lsr #6
    8f7c:	4f525245 	svcmi	0x00525245
    8f80:	73253a52 	teqvc	r5, #335872	; 0x52000
    8f84:	3a73253a 	bcc	1cd2474 <__bss_end__+0x1cc8db4>
    8f88:	203a6425 	eorscs	r6, sl, r5, lsr #8
    8f8c:	534c4146 	movtpl	r4, #49478	; 0xc146
    8f90:	703c2845 	eorsvc	r2, ip, r5, asr #16
    8f94:	75643e2d 	strbvc	r3, [r4, #-3629]!	; 0xe2d
    8f98:	3e207974 	mcrcc	9, 1, r7, cr0, cr4, {3}
    8f9c:	26203020 	strtcs	r3, [r0], -r0, lsr #32
    8fa0:	2d702026 	ldclcs	0, cr2, [r0, #-152]!	; 0xffffff68
    8fa4:	7475643e 	ldrbtvc	r6, [r5], #-1086	; 0x43e
    8fa8:	3d3c2079 	ldccc	0, cr2, [ip, #-484]!	; 0xfffffe1c
    8fac:	30303120 	eorscc	r3, r0, r0, lsr #2
    8fb0:	203a293e 	eorscs	r2, sl, lr, lsr r9
    8fb4:	72656977 	rsbvc	r6, r5, #1949696	; 0x1dc000
    8fb8:	75642064 	strbvc	r2, [r4, #-100]!	; 0x64
    8fbc:	63207974 	teqvs	r0, #116, 18	; 0x1d0000
    8fc0:	656c6379 	strbvs	r6, [ip, #-889]!	; 0x379
    8fc4:	00000a21 	andeq	r0, r0, r1, lsr #20
    8fc8:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    8fcc:	73253a43 	teqvc	r5, #274432	; 0x43000
    8fd0:	3a73253a 	bcc	1cd24c0 <__bss_end__+0x1cc8e00>
    8fd4:	733a6425 	teqvc	sl, #620756992	; 0x25000000
    8fd8:	6c756f68 	ldclvs	15, cr6, [r5], #-416	; 0xfffffe60
    8fdc:	656e2064 	strbvs	r2, [lr, #-100]!	; 0x64
    8fe0:	20726576 	rsbscs	r6, r2, r6, ror r5
    8fe4:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0x572
    8fe8:	0a216e72 	beq	8649b8 <__bss_end__+0x85b2f8>
    8fec:	0000000a 	andeq	r0, r0, sl

00008ff0 <__FUNCTION__.4166>:
    8ff0:	6f705f51 	svcvs	0x00705f51
    8ff4:	00000070 	andeq	r0, r0, r0, ror r0
    8ff8:	4f525245 	svcmi	0x00525245
    8ffc:	73253a52 	teqvc	r5, #335872	; 0x52000
    9000:	3a73253a 	bcc	1cd24f0 <__bss_end__+0x1cc8e30>
    9004:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9008:	534c4146 	movtpl	r4, #49478	; 0xc146
    900c:	713c2845 	teqvc	ip, r5, asr #16
    9010:	203a293e 	eorscs	r2, sl, lr, lsr r9
    9014:	20646162 	rsbcs	r6, r4, r2, ror #2
    9018:	75706e69 	ldrbvc	r6, [r0, #-3689]!	; 0xe69
    901c:	00000a74 	andeq	r0, r0, r4, ror sl
    9020:	00682e51 	rsbeq	r2, r8, r1, asr lr
    9024:	4f525245 	svcmi	0x00525245
    9028:	73253a52 	teqvc	r5, #335872	; 0x52000
    902c:	3a73253a 	bcc	1cd251c <__bss_end__+0x1cc8e5c>
    9030:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9034:	534c4146 	movtpl	r4, #49478	; 0xc146
    9038:	213c2845 	teqcs	ip, r5, asr #16
    903c:	743e2d71 	ldrtvc	r2, [lr], #-3441	; 0xd71
    9040:	3e6c6961 	cdpcc	9, 6, cr6, cr12, cr1, {3}
    9044:	69203a29 	stmdbvs	r0!, {r0, r3, r5, r9, fp, ip, sp}
    9048:	6c61766e 	stclvs	6, cr7, [r1], #-440	; 0xfffffe48
    904c:	51206469 	teqpl	r0, r9, ror #8
    9050:	0000000a 	andeq	r0, r0, sl
    9054:	74697072 	strbtvc	r7, [r9], #-114	; 0x72
    9058:	61657268 	cmnvs	r5, r8, ror #4
    905c:	203a7364 	eorscs	r7, sl, r4, ror #6
    9060:	656e6f64 	strbvs	r6, [lr, #-3940]!	; 0xf64
    9064:	74697720 	strbtvc	r7, [r9], #-1824	; 0x720
    9068:	6c612068 	stclvs	0, cr2, [r1], #-416	; 0xfffffe60
    906c:	6874206c 	ldmdavs	r4!, {r2, r3, r5, r6, sp}^
    9070:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
    9074:	72202173 	eorvc	r2, r0, #-1073741796	; 0xc000001c
    9078:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
    907c:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
    9080:	0000000a 	andeq	r0, r0, sl

00009084 <__FUNCTION__.4185>:
    9084:	74696d65 	strbtvc	r6, [r9], #-3429	; 0xd65
    9088:	00000000 	andeq	r0, r0, r0

0000908c <__FUNCTION__.4133>:
    908c:	5f697072 	svcpl	0x00697072
    9090:	5f746573 	svcpl	0x00746573
    9094:	7074756f 	rsbsvc	r7, r4, pc, ror #10
    9098:	00007475 	andeq	r7, r0, r5, ror r4

0000909c <__FUNCTION__.4207>:
    909c:	705f6176 	subsvc	r6, pc, r6, ror r1	; <UNPREDICTABLE>
    90a0:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    90a4:	0000006b 	andeq	r0, r0, fp, rrx
    90a8:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    90ac:	73253a43 	teqvc	r5, #274432	; 0x43000
    90b0:	3a73253a 	bcc	1cd25a0 <__bss_end__+0x1cc8ee0>
    90b4:	303a6425 	eorscc	r6, sl, r5, lsr #8
    90b8:	0000000a 	andeq	r0, r0, sl
    90bc:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    90c0:	2d61762f 	stclcs	6, cr7, [r1, #-188]!	; 0xffffff44
    90c4:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    90c8:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
    90cc:	00000000 	andeq	r0, r0, r0
    90d0:	33323130 	teqcc	r2, #48, 2
    90d4:	37363534 			; <UNDEFINED> instruction: 0x37363534
    90d8:	00003938 	andeq	r3, r0, r8, lsr r9
    90dc:	33323130 	teqcc	r2, #48, 2
    90e0:	37363534 			; <UNDEFINED> instruction: 0x37363534
    90e4:	62613938 	rsbvs	r3, r1, #56, 18	; 0xe0000
    90e8:	66656463 	strbtvs	r6, [r5], -r3, ror #8
    90ec:	00000000 	andeq	r0, r0, r0
    90f0:	00003130 	andeq	r3, r0, r0, lsr r1
    90f4:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    90f8:	73253a43 	teqvc	r5, #274432	; 0x43000
    90fc:	3a73253a 	bcc	1cd25ec <__bss_end__+0x1cc8f2c>
    9100:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    9104:	5f637475 	svcpl	0x00637475
    9108:	000a7066 	andeq	r7, sl, r6, rrx
    910c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9110:	73253a43 	teqvc	r5, #274432	; 0x43000
    9114:	3a73253a 	bcc	1cd2604 <__bss_end__+0x1cc8f44>
    9118:	773a6425 	ldrvc	r6, [sl, -r5, lsr #8]!
    911c:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
    9120:	33203c20 	teqcc	r0, #32, 24	; 0x2000
    9124:	00000a32 	andeq	r0, r0, r2, lsr sl
    9128:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    912c:	73253a43 	teqvc	r5, #274432	; 0x43000
    9130:	3a73253a 	bcc	1cd2620 <__bss_end__+0x1cc8f60>
    9134:	663a6425 	ldrtvs	r6, [sl], -r5, lsr #8
    9138:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xf6c
    913c:	746f6e20 	strbtvc	r6, [pc], #-3616	; 9144 <__FUNCTION__.4207+0xa8>
    9140:	616e6520 	cmnvs	lr, r0, lsr #10
    9144:	64656c62 	strbtvs	r6, [r5], #-3170	; 0xc62
    9148:	0a212121 	beq	8515d4 <__bss_end__+0x847f14>
    914c:	00000000 	andeq	r0, r0, r0
    9150:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9154:	73253a43 	teqvc	r5, #274432	; 0x43000
    9158:	3a73253a 	bcc	1cd2648 <__bss_end__+0x1cc8f88>
    915c:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    9160:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    9164:	6e203a6b 	vnmulvs.f32	s6, s0, s23
    9168:	6820746f 	stmdavs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
    916c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    9170:	20676e69 	rsbcs	r6, r7, r9, ror #28
    9174:	63657073 	cmnvs	r5, #115	; 0x73
    9178:	65696669 	strbvs	r6, [r9, #-1641]!	; 0x669
    917c:	25272072 	strcs	r2, [r7, #-114]!	; 0x72
    9180:	0a0a2763 	beq	292f14 <__bss_end__+0x289854>
    9184:	00000000 	andeq	r0, r0, r0

00009188 <__FUNCTION__.4129>:
    9188:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    918c:	00636f6c 	rsbeq	r6, r3, ip, ror #30

00009190 <__FUNCTION__.4136>:
    9190:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    9194:	5f636f6c 	svcpl	0x00636f6c
    9198:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    919c:	0064656e 	rsbeq	r6, r4, lr, ror #10

000091a0 <__FUNCTION__.4141>:
    91a0:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    91a4:	5f636f6c 	svcpl	0x00636f6c
    91a8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    91ac:	00000000 	andeq	r0, r0, r0
    91b0:	4f525245 	svcmi	0x00525245
    91b4:	73253a52 	teqvc	r5, #335872	; 0x52000
    91b8:	3a73253a 	bcc	1cd26a8 <__bss_end__+0x1cc8fe8>
    91bc:	203a6425 	eorscs	r6, sl, r5, lsr #8
    91c0:	534c4146 	movtpl	r4, #49478	; 0xc146
    91c4:	693c2845 	ldmdbvs	ip!, {r0, r2, r6, fp, sp}
    91c8:	5f74696e 	svcpl	0x0074696e
    91cc:	3a293e70 	bcc	a58b94 <__bss_end__+0xa4f4d4>
    91d0:	6c616320 	stclvs	3, cr6, [r1], #-128	; 0xffffff80
    91d4:	676e696c 	strbvs	r6, [lr, -ip, ror #18]!
    91d8:	66656220 	strbtvs	r6, [r5], -r0, lsr #4
    91dc:	2065726f 	rsbcs	r7, r5, pc, ror #4
    91e0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    91e4:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    91e8:	0a64657a 	beq	19227d8 <__bss_end__+0x1919118>
    91ec:	00000000 	andeq	r0, r0, r0
    91f0:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
    91f4:	6b2f6372 	blvs	be1fc4 <__bss_end__+0xbd8904>
    91f8:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    91fc:	632e636f 	teqvs	lr, #-1140850687	; 0xbc000001
    9200:	00000000 	andeq	r0, r0, r0
    9204:	4f525245 	svcmi	0x00525245
    9208:	73253a52 	teqvc	r5, #335872	; 0x52000
    920c:	3a73253a 	bcc	1cd26fc <__bss_end__+0x1cc903c>
    9210:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9214:	534c4146 	movtpl	r4, #49478	; 0xc146
    9218:	613c2845 	teqvs	ip, r5, asr #16
    921c:	6e67696c 	cdpvs	9, 6, cr6, cr7, cr12, {3}
    9220:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
    9224:	34202520 	strtcc	r2, [r0], #-1312	; 0x520
    9228:	203d3d20 	eorscs	r3, sp, r0, lsr #26
    922c:	3a293e30 	bcc	a58af4 <__bss_end__+0xa4f434>
    9230:	65772220 	ldrbvs	r2, [r7, #-544]!	; 0x220
    9234:	20647269 	rsbcs	r7, r4, r9, ror #4
    9238:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    923c:	6e656d6e 	cdpvs	13, 6, cr6, cr5, cr14, {3}
    9240:	6e203a74 	mcrvs	10, 1, r3, cr0, cr4, {3}
    9244:	6120746f 	teqvs	r0, pc, ror #8
    9248:	6c756d20 	ldclvs	13, cr6, [r5], #-128	; 0xffffff80
    924c:	6c706974 	ldclvs	9, cr6, [r0], #-464	; 0xfffffe30
    9250:	666f2065 	strbtvs	r2, [pc], -r5, rrx
    9254:	22213420 	eorcs	r3, r1, #32, 8	; 0x20000000
    9258:	0000000a 	andeq	r0, r0, sl
    925c:	4f525245 	svcmi	0x00525245
    9260:	73253a52 	teqvc	r5, #335872	; 0x52000
    9264:	3a73253a 	bcc	1cd2754 <__bss_end__+0x1cc9094>
    9268:	203a6425 	eorscs	r6, sl, r5, lsr #8
    926c:	534c4146 	movtpl	r4, #49478	; 0xc146
    9270:	213c2845 	teqcs	ip, r5, asr #16
    9274:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    9278:	293e705f 	ldmdbcs	lr!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}
    927c:	6163203a 	cmnvs	r3, sl, lsr r0
    9280:	746f6e6e 	strbtvc	r6, [pc], #-3694	; 9288 <__FUNCTION__.4141+0xe8>
    9284:	696e6920 	stmdbvs	lr!, {r5, r8, fp, sp, lr}^
    9288:	6c616974 	stclvs	9, cr6, [r1], #-464	; 0xfffffe30
    928c:	20657a69 	rsbcs	r7, r5, r9, ror #20
    9290:	63697774 	cmnvs	r9, #116, 14	; 0x1d00000
    9294:	0a0a2165 	beq	291830 <__bss_end__+0x288170>
    9298:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss:

0000929c <__bss_start__>:
	...

000092a4 <cur_thread>:
    92a4:	00000000 	andeq	r0, r0, r0

000092a8 <runq>:
	...

000092b0 <scheduler_thread>:
    92b0:	00000000 	andeq	r0, r0, r0

000092b4 <buf.4133>:
	...

000096b4 <init_p>:
    96b4:	00000000 	andeq	r0, r0, r0

000096b8 <heap_ptr>:
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4b5a3605 	blmi	168d82c <__bss_end__+0x168416c>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	12010901 	andne	r0, r1, #16384	; 0x4000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0x404
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	22011a01 	andcs	r1, r1, #4096	; 0x1000
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__bss_end__+0x10c7664>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	34202955 	strtcc	r2, [r0], #-2389	; 0x955
   c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
  10:	43434700 	movtmi	r4, #14080	; 0x3700
  14:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
  18:	5420554e 	strtpl	r5, [r0], #-1358	; 0x54e
  1c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  20:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
  24:	6d724120 	ldfvse	f4, [r2, #-128]!	; 0xffffff80
  28:	626d4520 	rsbvs	r4, sp, #32, 10	; 0x8000000
  2c:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
  30:	72502064 	subsvc	r2, r0, #100	; 0x64
  34:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
  38:	73726f73 	cmnvc	r2, #460	; 0x1cc
  3c:	322d3720 	eorcc	r3, sp, #32, 14	; 0x800000
  40:	2d383130 	ldfcss	f3, [r8, #-192]!	; 0xffffff40
  44:	752d3371 	strvc	r3, [sp, #-881]!	; 0x371
  48:	74616470 	strbtvc	r6, [r1], #-1136	; 0x470
  4c:	37202965 	strcc	r2, [r0, -r5, ror #18]!
  50:	312e332e 	teqcc	lr, lr, lsr #6
  54:	31303220 	teqcc	r0, r0, lsr #4
  58:	32363038 	eorscc	r3, r6, #56	; 0x38
  5c:	72282032 	eorvc	r2, r8, #50	; 0x32
  60:	61656c65 	cmnvs	r5, r5, ror #24
  64:	20296573 	eorcs	r6, r9, r3, ror r5
  68:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  6c:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
  70:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
  74:	2d372d64 	ldccs	13, cr2, [r7, #-400]!	; 0xfffffe70
  78:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  7c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  80:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  84:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  88:	39313632 	ldmdbcc	r1!, {r1, r4, r5, r9, sl, ip, sp}
  8c:	005d3730 	subseq	r3, sp, r0, lsr r7

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000440 	andeq	r0, r0, r0, asr #8
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000016 	andeq	r0, r0, r6, lsl r0
      10:	00014301 	andeq	r4, r1, r1, lsl #6
      14:	0000e300 	andeq	lr, r0, r0, lsl #6
      18:	00801000 	addeq	r1, r0, r0
      1c:	00015000 	andeq	r5, r1, r0
      20:	00000000 	andeq	r0, r0, r0
      24:	05040200 	streq	r0, [r4, #-512]	; 0x200
      28:	00746e69 	rsbseq	r6, r4, r9, ror #28
      2c:	86070403 	strhi	r0, [r7], -r3, lsl #8
      30:	03000001 	movweq	r0, #1
      34:	00870601 	addeq	r0, r7, r1, lsl #12
      38:	02030000 	andeq	r0, r3, #0
      3c:	0001dd05 	andeq	sp, r1, r5, lsl #26
      40:	05040300 	streq	r0, [r4, #-768]	; 0x300
      44:	000001c0 	andeq	r0, r0, r0, asr #3
      48:	bb050803 	bllt	14205c <__bss_end__+0x13899c>
      4c:	03000001 	movweq	r0, #1
      50:	00850801 	addeq	r0, r5, r1, lsl #16
      54:	02030000 	andeq	r0, r3, #0
      58:	00009d07 	andeq	r9, r0, r7, lsl #26
      5c:	01e70400 	mvneq	r0, r0, lsl #8
      60:	34030000 	strcc	r0, [r3], #-0
      64:	00000068 	andeq	r0, r0, r8, rrx
      68:	81070403 	tsthi	r7, r3, lsl #8
      6c:	03000001 	movweq	r0, #1
      70:	017c0708 	cmneq	ip, r8, lsl #14
      74:	04030000 	streq	r0, [r3], #-0
      78:	0001aa07 	andeq	sl, r1, r7, lsl #20
      7c:	03040500 	movweq	r0, #17664	; 0x4500
      80:	008e0801 	addeq	r0, lr, r1, lsl #16
      84:	04060000 	streq	r0, [r6], #-0
      88:	0000008c 	andeq	r0, r0, ip, lsl #1
      8c:	00007f07 	andeq	r7, r0, r7, lsl #30
      90:	007f0800 	rsbseq	r0, pc, r0, lsl #16
      94:	00a10000 	adceq	r0, r1, r0
      98:	76090000 	strvc	r0, [r9], -r0
      9c:	07000000 	streq	r0, [r0, -r0]
      a0:	01d20a00 	bicseq	r0, r2, r0, lsl #20
      a4:	80480000 	subhi	r0, r8, r0
      a8:	00df1e02 	sbcseq	r1, pc, r2, lsl #28
      ac:	6e0b0000 	cdpvs	0, 0, cr0, cr11, cr0, {0}
      b0:	02000001 	andeq	r0, r0, #1
      b4:	0000df20 	andeq	sp, r0, r0, lsr #30
      b8:	060b0000 	streq	r0, [fp], -r0
      bc:	02000000 	andeq	r0, r0, #0
      c0:	0000ef22 	andeq	lr, r0, r2, lsr #30
      c4:	740c4000 	strvc	r4, [ip], #-0
      c8:	02006469 	andeq	r6, r0, #1761607680	; 0x69000000
      cc:	00005d23 	andeq	r5, r0, r3, lsr #26
      d0:	750b4400 	strvc	r4, [fp, #-1024]	; 0x400
      d4:	02000000 	andeq	r0, r0, #0
      d8:	0000f524 	andeq	pc, r0, r4, lsr #10
      dc:	08004800 	stmdaeq	r0, {fp, lr}
      e0:	0000005d 	andeq	r0, r0, sp, asr r0
      e4:	000000ef 	andeq	r0, r0, pc, ror #1
      e8:	00007609 	andeq	r7, r0, r9, lsl #12
      ec:	06000f00 	streq	r0, [r0], -r0, lsl #30
      f0:	0000a104 	andeq	sl, r0, r4, lsl #2
      f4:	005d0800 	subseq	r0, sp, r0, lsl #16
      f8:	01060000 	mrseq	r0, (UNDEF: 6)
      fc:	760d0000 	strvc	r0, [sp], -r0
     100:	ff000000 			; <UNDEFINED> instruction: 0xff000000
     104:	9304001f 	movwls	r0, #16415	; 0x401f
     108:	02000001 	andeq	r0, r0, #1
     10c:	0000a125 	andeq	sl, r0, r5, lsr #2
     110:	77700e00 	ldrbvc	r0, [r0, -r0, lsl #28]!
     114:	0108006d 	tsteq	r8, sp, rrx
     118:	00013605 	andeq	r3, r1, r5, lsl #12
     11c:	00b00b00 	adcseq	r0, r0, r0, lsl #22
     120:	06010000 	streq	r0, [r1], -r0
     124:	0000002c 	andeq	r0, r0, ip, lsr #32
     128:	69700c00 	ldmdbvs	r0!, {sl, fp}^
     12c:	0701006e 	streq	r0, [r1, -lr, rrx]
     130:	0000002c 	andeq	r0, r0, ip, lsr #32
     134:	fd0f0004 	stc2	0, cr0, [pc, #-16]	; 12c <_start-0x7ed4>
     138:	01000001 	tsteq	r0, r1
     13c:	0080100f 	addeq	r1, r0, pc
     140:	00006c00 	andeq	r6, r0, r0, lsl #24
     144:	d09c0100 	addsle	r0, ip, r0, lsl #2
     148:	10000001 	andne	r0, r0, r1
     14c:	0f01006e 	svceq	0x0001006e
     150:	0000002c 	andeq	r0, r0, ip, lsr #32
     154:	00000000 	andeq	r0, r0, r0
     158:	00015211 	andeq	r5, r1, r1, lsl r2
     15c:	0001e000 	andeq	lr, r1, r0
     160:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
     164:	1200008e 	andne	r0, r0, #142	; 0x8e
     168:	000000cd 	andeq	r0, r0, sp, asr #1
     16c:	002c1101 	eoreq	r1, ip, r1, lsl #2
     170:	00420000 	subeq	r0, r2, r0
     174:	40130000 	andsmi	r0, r3, r0
     178:	9b000080 	blls	380 <_start-0x7c80>
     17c:	ab000003 	blge	190 <_start-0x7e70>
     180:	14000001 	strne	r0, [r0], #-1
     184:	40015301 	andmi	r5, r1, r1, lsl #6
     188:	05520114 	ldrbeq	r0, [r2, #-276]	; 0x114
     18c:	008ef403 	addeq	pc, lr, r3, lsl #8
     190:	51011400 	tstpl	r1, r0, lsl #8
     194:	8f6c0305 	svchi	0x006c0305
     198:	01140000 	tsteq	r4, r0
     19c:	20030550 	andcs	r0, r3, r0, asr r5
     1a0:	1400008f 	strne	r0, [r0], #-143	; 0x8f
     1a4:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
     1a8:	15000074 	strne	r0, [r0, #-116]	; 0x74
     1ac:	00008044 	andeq	r8, r0, r4, asr #32
     1b0:	000003b1 			; <UNDEFINED> instruction: 0x000003b1
     1b4:	00804815 	addeq	r4, r0, r5, lsl r8
     1b8:	0003b800 	andeq	fp, r3, r0, lsl #16
     1bc:	80501500 	subshi	r1, r0, r0, lsl #10
     1c0:	03b80000 			; <UNDEFINED> instruction: 0x03b80000
     1c4:	60150000 	andsvs	r0, r5, r0
     1c8:	c3000080 	movwgt	r0, #128	; 0x80
     1cc:	00000003 	andeq	r0, r0, r3
     1d0:	00007f08 	andeq	r7, r0, r8, lsl #30
     1d4:	0001e000 	andeq	lr, r1, r0
     1d8:	00760900 	rsbseq	r0, r6, r0, lsl #18
     1dc:	00090000 	andeq	r0, r9, r0
     1e0:	0001d007 	andeq	sp, r1, r7
     1e4:	00001600 	andeq	r1, r0, r0, lsl #12
     1e8:	1b010000 	blne	401f0 <__bss_end__+0x36b30>
     1ec:	0000807c 	andeq	r8, r0, ip, ror r0
     1f0:	0000006c 	andeq	r0, r0, ip, rrx
     1f4:	02b69c01 	adcseq	r9, r6, #256	; 0x100
     1f8:	61100000 	tstvs	r0, r0
     1fc:	01006772 	tsteq	r0, r2, ror r7
     200:	00007d1b 	andeq	r7, r0, fp, lsl sp
     204:	00005500 	andeq	r5, r0, r0, lsl #10
     208:	00701700 	rsbseq	r1, r0, r0, lsl #14
     20c:	02b61c01 	adcseq	r1, r6, #256	; 0x100
     210:	00730000 	rsbseq	r0, r3, r0
     214:	52110000 	andspl	r0, r1, #0
     218:	cc000001 	stcgt	0, cr0, [r0], {1}
     21c:	05000002 	streq	r0, [r0, #-2]
     220:	008f0003 	addeq	r0, pc, r3
     224:	01b31800 			; <UNDEFINED> instruction: 0x01b31800
     228:	22010000 	andcs	r0, r1, #0
     22c:	0000002c 	andeq	r0, r0, ip, lsr #32
     230:	c9185501 	ldmdbgt	r8, {r0, r8, sl, ip, lr}
     234:	01000001 	tsteq	r0, r1
     238:	00002c23 	andeq	r2, r0, r3, lsr #24
     23c:	15560100 	ldrbne	r0, [r6, #-256]	; 0x100
     240:	0000808c 	andeq	r8, r0, ip, lsl #1
     244:	000003ca 	andeq	r0, r0, sl, asr #7
     248:	0080b013 	addeq	fp, r0, r3, lsl r0
     24c:	00039b00 	andeq	r9, r3, r0, lsl #22
     250:	00027600 	andeq	r7, r2, r0, lsl #12
     254:	53011400 	movwpl	r1, #5120	; 0x1400
     258:	01144f01 	tsteq	r4, r1, lsl #30
     25c:	00030552 	andeq	r0, r3, r2, asr r5
     260:	1400008f 	strne	r0, [r0], #-143	; 0x8f
     264:	03055101 	movweq	r5, #20737	; 0x5101
     268:	00008f6c 	andeq	r8, r0, ip, ror #30
     26c:	05500114 	ldrbeq	r0, [r0, #-276]	; 0x114
     270:	008f7c03 	addeq	r7, pc, r3, lsl #24
     274:	b4150000 	ldrlt	r0, [r5], #-0
     278:	b1000080 	smlabblt	r0, r0, r0, r0
     27c:	15000003 	strne	r0, [r0, #-3]
     280:	000080c0 	andeq	r8, r0, r0, asr #1
     284:	000003db 	ldrdeq	r0, [r0], -fp
     288:	0080c813 	addeq	ip, r0, r3, lsl r8
     28c:	00013600 	andeq	r3, r1, r0, lsl #12
     290:	00029c00 	andeq	r9, r2, r0, lsl #24
     294:	50011400 	andpl	r1, r1, r0, lsl #8
     298:	00007502 	andeq	r7, r0, r2, lsl #10
     29c:	0080d015 	addeq	sp, r0, r5, lsl r0
     2a0:	0003ec00 	andeq	lr, r3, r0, lsl #24
     2a4:	80d81900 	sbcshi	r1, r8, r0, lsl #18
     2a8:	01360000 	teqeq	r6, r0
     2ac:	01140000 	tsteq	r4, r0
     2b0:	00760250 	rsbseq	r0, r6, r0, asr r2
     2b4:	04060000 	streq	r0, [r6], #-0
     2b8:	00000111 	andeq	r0, r0, r1, lsl r1
     2bc:	00007f08 	andeq	r7, r0, r8, lsl #30
     2c0:	0002cc00 	andeq	ip, r2, r0, lsl #24
     2c4:	00760900 	rsbseq	r0, r6, r0, lsl #18
     2c8:	00050000 	andeq	r0, r5, r0
     2cc:	0002bc07 	andeq	fp, r2, r7, lsl #24
     2d0:	006d1600 	rsbeq	r1, sp, r0, lsl #12
     2d4:	2d010000 	stccs	0, cr0, [r1, #-0]
     2d8:	000080e8 	andeq	r8, r0, r8, ror #1
     2dc:	00000078 	andeq	r0, r0, r8, ror r0
     2e0:	03969c01 	orrseq	r9, r6, #256	; 0x100
     2e4:	93180000 	tstls	r8, #0
     2e8:	01000000 	mrseq	r0, (UNDEF: 0)
     2ec:	00011131 	andeq	r1, r1, r1, lsr r1
     2f0:	68910200 	ldmvs	r1, {r9}
     2f4:	00009818 	andeq	r9, r0, r8, lsl r8
     2f8:	11320100 	teqne	r2, r0, lsl #2
     2fc:	02000001 	andeq	r0, r0, #1
     300:	52116091 	andspl	r6, r1, #145	; 0x91
     304:	96000001 	strls	r0, [r0], -r1
     308:	05000003 	streq	r0, [r0, #-3]
     30c:	008f1803 	addeq	r1, pc, r3, lsl #16
     310:	80f41500 	rscshi	r1, r4, r0, lsl #10
     314:	03fd0000 	mvnseq	r0, #0
     318:	f8150000 			; <UNDEFINED> instruction: 0xf8150000
     31c:	04000080 	streq	r0, [r0], #-128	; 0x80
     320:	13000004 	movwne	r0, #4
     324:	00008128 	andeq	r8, r0, r8, lsr #2
     328:	0000040b 	andeq	r0, r0, fp, lsl #8
     32c:	0000033d 	andeq	r0, r0, sp, lsr r3
     330:	02510114 	subseq	r0, r1, #20, 2
     334:	01146091 			; <UNDEFINED> instruction: 0x01146091
     338:	00760250 	rsbseq	r0, r6, r0, asr r2
     33c:	81341300 	teqhi	r4, r0, lsl #6
     340:	040b0000 	streq	r0, [fp], #-0
     344:	03570000 	cmpeq	r7, #0
     348:	01140000 	tsteq	r4, r0
     34c:	007d0251 	rsbseq	r0, sp, r1, asr r2
     350:	02500114 	subseq	r0, r0, #20, 2
     354:	15000076 	strne	r0, [r0, #-118]	; 0x76
     358:	00008138 	andeq	r8, r0, r8, lsr r1
     35c:	0000043c 	andeq	r0, r0, ip, lsr r4
     360:	00814c13 	addeq	r4, r1, r3, lsl ip
     364:	00039b00 	andeq	r9, r3, r0, lsl #22
     368:	00038c00 	andeq	r8, r3, r0, lsl #24
     36c:	53011400 	movwpl	r1, #5120	; 0x1400
     370:	14370802 	ldrtne	r0, [r7], #-2050	; 0x802
     374:	74025201 	strvc	r5, [r2], #-513	; 0x201
     378:	51011424 	tstpl	r1, r4, lsr #8
     37c:	8f6c0305 	svchi	0x006c0305
     380:	01140000 	tsteq	r4, r0
     384:	c8030550 	stmdagt	r3, {r4, r6, r8, sl}
     388:	0000008f 	andeq	r0, r0, pc, lsl #1
     38c:	00815015 	addeq	r5, r1, r5, lsl r0
     390:	0003b100 	andeq	fp, r3, r0, lsl #2
     394:	91070000 	mrsls	r0, (UNDEF: 7)
     398:	1a000000 	bne	3a0 <_start-0x7c60>
     39c:	0000032f 	andeq	r0, r0, pc, lsr #6
     3a0:	00252704 	eoreq	r2, r5, r4, lsl #14
     3a4:	03b10000 			; <UNDEFINED> instruction: 0x03b10000
     3a8:	861b0000 	ldrhi	r0, [fp], -r0
     3ac:	1c000000 	stcne	0, cr0, [r0], {-0}
     3b0:	000b1d00 	andeq	r1, fp, r0, lsl #26
     3b4:	5c040000 	stcpl	0, cr0, [r4], {-0}
     3b8:	00015f1e 	andeq	r5, r1, lr, lsl pc
     3bc:	2c510400 	cfldrdcs	mvd0, [r1], {-0}
     3c0:	1d000000 	stcne	0, cr0, [r0, #-0]
     3c4:	000001a0 	andeq	r0, r0, r0, lsr #3
     3c8:	d31f2e02 	tstle	pc, #2, 28
     3cc:	05000000 	streq	r0, [r0, #-0]
     3d0:	0003db1d 	andeq	sp, r3, sp, lsl fp
     3d4:	002c1b00 	eoreq	r1, ip, r0, lsl #22
     3d8:	1f000000 	svcne	0x00000000
     3dc:	00000207 	andeq	r0, r0, r7, lsl #4
     3e0:	03ec2705 	mvneq	r2, #1310720	; 0x140000
     3e4:	2c1b0000 	ldccs	0, cr0, [fp], {-0}
     3e8:	00000000 	andeq	r0, r0, r0
     3ec:	0000b51f 	andeq	fp, r0, pc, lsl r5
     3f0:	fd2a0500 	stc2	5, cr0, [sl, #-0]
     3f4:	1b000003 	blne	408 <_start-0x7bf8>
     3f8:	0000002c 	andeq	r0, r0, ip, lsr #32
     3fc:	007b1d00 	rsbseq	r1, fp, r0, lsl #26
     400:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
     404:	0001f01d 	andeq	pc, r1, sp, lsl r0	; <UNPREDICTABLE>
     408:	1a6a0400 	bne	1a81410 <__bss_end__+0x1a77d50>
     40c:	0000013a 	andeq	r0, r0, sl, lsr r1
     410:	04252802 	strteq	r2, [r5], #-2050	; 0x802
     414:	04250000 	strteq	r0, [r5], #-0
     418:	2b1b0000 	blcs	6c0420 <__bss_end__+0x6b6d60>
     41c:	1b000004 	blne	434 <_start-0x7bcc>
     420:	0000007d 	andeq	r0, r0, sp, ror r0
     424:	06040600 	streq	r0, [r4], -r0, lsl #12
     428:	06000001 	streq	r0, [r0], -r1
     42c:	00043104 	andeq	r3, r4, r4, lsl #2
     430:	043c2000 	ldrteq	r2, [ip], #-0
     434:	7d1b0000 	ldcvc	0, cr0, [fp, #-0]
     438:	00000000 	andeq	r0, r0, r0
     43c:	0000c21d 	andeq	ip, r0, sp, lsl r2
     440:	00320200 	eorseq	r0, r2, r0, lsl #4
     444:	0000057f 	andeq	r0, r0, pc, ror r5
     448:	01b00004 	movseq	r0, r4
     44c:	01040000 	mrseq	r0, (UNDEF: 4)
     450:	00000016 	andeq	r0, r0, r6, lsl r0
     454:	00026201 	andeq	r6, r2, r1, lsl #4
     458:	0000e300 	andeq	lr, r0, r0, lsl #6
     45c:	00816000 	addeq	r6, r1, r0
     460:	00021c00 	andeq	r1, r2, r0, lsl #24
     464:	00018a00 	andeq	r8, r1, r0, lsl #20
     468:	05040200 	streq	r0, [r4, #-512]	; 0x200
     46c:	00746e69 	rsbseq	r6, r4, r9, ror #28
     470:	00021803 	andeq	r1, r2, r3, lsl #16
     474:	37d40300 	ldrbcc	r0, [r4, r0, lsl #6]
     478:	04000000 	streq	r0, [r0], #-0
     47c:	01860704 	orreq	r0, r6, r4, lsl #14
     480:	01040000 	mrseq	r0, (UNDEF: 4)
     484:	00008706 	andeq	r8, r0, r6, lsl #14
     488:	05020400 	streq	r0, [r2, #-1024]	; 0x400
     48c:	000001dd 	ldrdeq	r0, [r0], -sp
     490:	c0050404 	andgt	r0, r5, r4, lsl #8
     494:	04000001 	streq	r0, [r0], #-1
     498:	01bb0508 			; <UNDEFINED> instruction: 0x01bb0508
     49c:	01040000 	mrseq	r0, (UNDEF: 4)
     4a0:	00008508 	andeq	r8, r0, r8, lsl #10
     4a4:	07020400 	streq	r0, [r2, -r0, lsl #8]
     4a8:	0000009d 	muleq	r0, sp, r0
     4ac:	0001e703 	andeq	lr, r1, r3, lsl #14
     4b0:	73340400 	teqvc	r4, #0, 8
     4b4:	04000000 	streq	r0, [r0], #-0
     4b8:	01810704 	orreq	r0, r1, r4, lsl #14
     4bc:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     4c0:	00017c07 	andeq	r7, r1, r7, lsl #24
     4c4:	07040400 	streq	r0, [r4, -r0, lsl #8]
     4c8:	000001aa 	andeq	r0, r0, sl, lsr #3
     4cc:	01040405 	tsteq	r4, r5, lsl #8
     4d0:	00008e08 	andeq	r8, r0, r8, lsl #28
     4d4:	97040600 	strls	r0, [r4, -r0, lsl #12]
     4d8:	07000000 	streq	r0, [r0, -r0]
     4dc:	0000008a 	andeq	r0, r0, sl, lsl #1
     4e0:	0001d208 	andeq	sp, r1, r8, lsl #4
     4e4:	05804800 	streq	r4, [r0, #2048]	; 0x800
     4e8:	0000da1e 	andeq	sp, r0, lr, lsl sl
     4ec:	016e0900 	cmneq	lr, r0, lsl #18
     4f0:	20050000 	andcs	r0, r5, r0
     4f4:	000000da 	ldrdeq	r0, [r0], -sl
     4f8:	00060900 	andeq	r0, r6, r0, lsl #18
     4fc:	22050000 	andcs	r0, r5, #0
     500:	000000ea 	andeq	r0, r0, sl, ror #1
     504:	69740a40 	ldmdbvs	r4!, {r6, r9, fp}^
     508:	23050064 	movwcs	r0, #20580	; 0x5064
     50c:	00000068 	andeq	r0, r0, r8, rrx
     510:	00750944 	rsbseq	r0, r5, r4, asr #18
     514:	24050000 	strcs	r0, [r5], #-0
     518:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     51c:	680b0048 	stmdavs	fp, {r3, r6}
     520:	ea000000 	b	528 <_start-0x7ad8>
     524:	0c000000 	stceq	0, cr0, [r0], {-0}
     528:	00000081 	andeq	r0, r0, r1, lsl #1
     52c:	0406000f 	streq	r0, [r6], #-15
     530:	0000009c 	muleq	r0, ip, r0
     534:	0000680b 	andeq	r6, r0, fp, lsl #16
     538:	00010100 	andeq	r0, r1, r0, lsl #2
     53c:	00810d00 	addeq	r0, r1, r0, lsl #26
     540:	1fff0000 	svcne	0x00ff0000
     544:	01930300 	orrseq	r0, r3, r0, lsl #6
     548:	25050000 	strcs	r0, [r5, #-0]
     54c:	0000009c 	muleq	r0, ip, r0
     550:	0800510e 	stmdaeq	r0, {r1, r2, r3, r8, ip, lr}
     554:	012f0801 	teqeq	pc, r1, lsl #16
     558:	5d090000 	stcpl	0, cr0, [r9, #-0]
     55c:	01000002 	tsteq	r0, r2
     560:	00012f09 	andeq	r2, r1, r9, lsl #30
     564:	9d090000 	stcls	0, cr0, [r9, #-0]
     568:	01000002 	tsteq	r0, r2
     56c:	00012f09 	andeq	r2, r1, r9, lsl #30
     570:	06000400 	streq	r0, [r0], -r0, lsl #8
     574:	00010104 	andeq	r0, r1, r4, lsl #2
     578:	5f510f00 	svcpl	0x00510f00
     57c:	0a010074 	beq	40754 <__bss_end__+0x37094>
     580:	0000010c 	andeq	r0, r0, ip, lsl #2
     584:	00023510 	andeq	r3, r2, r0, lsl r5
     588:	250f0100 	strcs	r0, [pc, #-256]	; 490 <_start-0x7b70>
     58c:	60000000 	andvs	r0, r0, r0
     590:	10000081 	andne	r0, r0, r1, lsl #1
     594:	01000000 	mrseq	r0, (UNDEF: 0)
     598:	0001679c 	muleq	r1, ip, r7
     59c:	00711100 	rsbseq	r1, r1, r0, lsl #2
     5a0:	01670f01 	cmneq	r7, r1, lsl #30
     5a4:	00910000 	addseq	r0, r1, r0
     5a8:	06000000 	streq	r0, [r0], -r0
     5ac:	00013504 	andeq	r3, r1, r4, lsl #10
     5b0:	023d1200 	eorseq	r1, sp, #0, 4
     5b4:	21010000 	mrscs	r0, (UNDEF: 1)
     5b8:	00008170 	andeq	r8, r0, r0, ror r1
     5bc:	0000002c 	andeq	r0, r0, ip, lsr #32
     5c0:	01999c01 	orrseq	r9, r9, r1, lsl #24
     5c4:	71130000 	tstvc	r3, r0
     5c8:	67210100 	strvs	r0, [r1, -r0, lsl #2]!
     5cc:	01000001 	tsteq	r0, r1
     5d0:	00651350 	rsbeq	r1, r5, r0, asr r3
     5d4:	012f2101 	teqeq	pc, r1, lsl #2
     5d8:	51010000 	mrspl	r0, (UNDEF: 1)
     5dc:	021f1000 	andseq	r1, pc, #0
     5e0:	12010000 	andne	r0, r1, #0
     5e4:	0000012f 	andeq	r0, r0, pc, lsr #2
     5e8:	0000819c 	muleq	r0, ip, r1
     5ec:	0000007c 	andeq	r0, r0, ip, ror r0
     5f0:	024a9c01 	subeq	r9, sl, #256	; 0x100
     5f4:	71110000 	tstvc	r1, r0
     5f8:	67120100 	ldrvs	r0, [r2, -r0, lsl #2]
     5fc:	b2000001 	andlt	r0, r0, #1
     600:	14000000 	strne	r0, [r0], #-0
     604:	00000152 	andeq	r0, r0, r2, asr r1
     608:	0000025a 	andeq	r0, r0, sl, asr r2
     60c:	8ff00305 	svchi	0x00f00305
     610:	65150000 	ldrvs	r0, [r5, #-0]
     614:	2f140100 	svccs	0x00140100
     618:	0d000001 	stceq	0, cr0, [r0, #-4]
     61c:	16000001 	strne	r0, [r0], -r1
     620:	000081bc 			; <UNDEFINED> instruction: 0x000081bc
     624:	00000510 	andeq	r0, r0, r0, lsl r5
     628:	00000209 	andeq	r0, r0, r9, lsl #4
     62c:	01530117 	cmpeq	r3, r7, lsl r1
     630:	52011743 	andpl	r1, r1, #17563648	; 0x10c0000
     634:	8ff00305 	svchi	0x00f00305
     638:	01170000 	tsteq	r7, r0
     63c:	20030551 	andcs	r0, r3, r1, asr r5
     640:	17000090 			; <UNDEFINED> instruction: 0x17000090
     644:	03055001 	movweq	r5, #20481	; 0x5001
     648:	00008ff8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
     64c:	81c01800 	bichi	r1, r0, r0, lsl #16
     650:	05260000 	streq	r0, [r6, #-0]!
     654:	ec160000 	ldc	0, cr0, [r6], {-0}
     658:	10000081 	andne	r0, r0, r1, lsl #1
     65c:	40000005 	andmi	r0, r0, r5
     660:	17000002 	strne	r0, [r0, -r2]
     664:	47015301 	strmi	r5, [r1, -r1, lsl #6]
     668:	05520117 	ldrbeq	r0, [r2, #-279]	; 0x117
     66c:	008ff003 	addeq	pc, pc, r3
     670:	51011700 	tstpl	r1, r0, lsl #14
     674:	90200305 	eorls	r0, r0, r5, lsl #6
     678:	01170000 	tsteq	r7, r0
     67c:	24030550 	strcs	r0, [r3], #-1360	; 0x550
     680:	00000090 	muleq	r0, r0, r0
     684:	0081f018 	addeq	pc, r1, r8, lsl r0	; <UNPREDICTABLE>
     688:	00052600 	andeq	r2, r5, r0, lsl #12
     68c:	8a0b0000 	bhi	2c0694 <__bss_end__+0x2b6fd4>
     690:	5a000000 	bpl	698 <_start-0x7968>
     694:	0c000002 	stceq	0, cr0, [r0], {2}
     698:	00000081 	andeq	r0, r0, r1, lsl #1
     69c:	4a070005 	bmi	1c06b8 <__bss_end__+0x1b6ff8>
     6a0:	10000002 	andne	r0, r0, r2
     6a4:	00000294 	muleq	r0, r4, r2
     6a8:	012f1502 	teqeq	pc, r2, lsl #10
     6ac:	82180000 	andshi	r0, r8, #0
     6b0:	002c0000 	eoreq	r0, ip, r0
     6b4:	9c010000 	stcls	0, cr0, [r1], {-0}
     6b8:	000002c4 	andeq	r0, r0, r4, asr #5
     6bc:	00025719 	andeq	r5, r2, r9, lsl r7
     6c0:	35160200 	ldrcc	r0, [r6, #-512]	; 0x200
     6c4:	05000001 	streq	r0, [r0, #-1]
     6c8:	00929c03 	addseq	r9, r2, r3, lsl #24
     6cc:	00741500 	rsbseq	r1, r4, r0, lsl #10
     6d0:	012f1702 	teqeq	pc, r2, lsl #14
     6d4:	01440000 	mrseq	r0, (UNDEF: 68)
     6d8:	24160000 	ldrcs	r0, [r6], #-0
     6dc:	99000082 	stmdbls	r0, {r1, r7}
     6e0:	ad000001 	stcge	0, cr0, [r0, #-4]
     6e4:	17000002 	strne	r0, [r0, -r2]
     6e8:	03055001 	movweq	r5, #20481	; 0x5001
     6ec:	0000929c 	muleq	r0, ip, r2
     6f0:	82381a00 	eorshi	r1, r8, #0, 20
     6f4:	052d0000 	streq	r0, [sp, #-0]!
     6f8:	01170000 	tsteq	r7, r0
     6fc:	17380151 			; <UNDEFINED> instruction: 0x17380151
     700:	0a035001 	beq	d470c <__bss_end__+0xcb04c>
     704:	00008048 	andeq	r8, r0, r8, asr #32
     708:	0002ae1b 	andeq	sl, r2, fp, lsl lr
     70c:	2f100200 	svccs	0x00100200
     710:	44000001 	strmi	r0, [r0], #-1
     714:	10000082 	andne	r0, r0, r2, lsl #1
     718:	01000000 	mrseq	r0, (UNDEF: 0)
     71c:	013a1c9c 			; <UNDEFINED> instruction: 0x013a1c9c
     720:	23020000 	movwcs	r0, #8192	; 0x2000
     724:	0000012f 	andeq	r0, r0, pc, lsr #2
     728:	00008254 	andeq	r8, r0, r4, asr r2
     72c:	00000038 	andeq	r0, r0, r8, lsr r0
     730:	03409c01 	movteq	r9, #3073	; 0xc01
     734:	861d0000 	ldrhi	r0, [sp], -r0
     738:	02000002 	andeq	r0, r0, #2
     73c:	00034b23 	andeq	r4, r3, r3, lsr #22
     740:	00016200 	andeq	r6, r1, r0, lsl #4
     744:	72611100 	rsbvc	r1, r1, #0, 2
     748:	23020067 	movwcs	r0, #8295	; 0x2067
     74c:	00000088 	andeq	r0, r0, r8, lsl #1
     750:	00000183 	andeq	r0, r0, r3, lsl #3
     754:	02007415 	andeq	r7, r0, #352321536	; 0x15000000
     758:	00012f24 	andeq	r2, r1, r4, lsr #30
     75c:	0001a400 	andeq	sl, r1, r0, lsl #8
     760:	825c1800 	subshi	r1, ip, #0, 16
     764:	025f0000 	subseq	r0, pc, #0
     768:	801a0000 	andshi	r0, sl, r0
     76c:	6d000082 	stcvs	0, cr0, [r0, #-520]	; 0xfffffdf8
     770:	17000001 	strne	r0, [r0, -r1]
     774:	74025101 	strvc	r5, [r2], #-257	; 0x101
     778:	50011700 	andpl	r1, r1, r0, lsl #14
     77c:	92a80305 	adcls	r0, r8, #335544320	; 0x14000000
     780:	00000000 	andeq	r0, r0, r0
     784:	00034b1e 	andeq	r4, r3, lr, lsl fp
     788:	00881f00 	addeq	r1, r8, r0, lsl #30
     78c:	06000000 	streq	r0, [r0], -r0
     790:	00034004 	andeq	r4, r3, r4
     794:	028b2000 	addeq	r2, fp, #0
     798:	37020000 	strcc	r0, [r2, -r0]
     79c:	0000828c 	andeq	r8, r0, ip, lsl #5
     7a0:	00000060 	andeq	r0, r0, r0, rrx
     7a4:	03eb9c01 	mvneq	r9, #256	; 0x100
     7a8:	821d0000 	andshi	r0, sp, #0
     7ac:	02000002 	andeq	r0, r0, #2
     7b0:	00002537 	andeq	r2, r0, r7, lsr r5
     7b4:	0001c200 	andeq	ip, r1, r0, lsl #4
     7b8:	82a41600 	adchi	r1, r4, #0, 12
     7bc:	05470000 	strbeq	r0, [r7, #-0]
     7c0:	03970000 	orrseq	r0, r7, #0
     7c4:	01170000 	tsteq	r7, r0
     7c8:	17340152 			; <UNDEFINED> instruction: 0x17340152
     7cc:	30015101 	andcc	r5, r1, r1, lsl #2
     7d0:	06500117 			; <UNDEFINED> instruction: 0x06500117
     7d4:	0092a403 	addseq	sl, r2, r3, lsl #8
     7d8:	16000600 	strne	r0, [r0], -r0, lsl #12
     7dc:	000082ac 	andeq	r8, r0, ip, lsr #5
     7e0:	00000140 	andeq	r0, r0, r0, asr #2
     7e4:	000003ab 	andeq	r0, r0, fp, lsr #7
     7e8:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     7ec:	16000c74 			; <UNDEFINED> instruction: 0x16000c74
     7f0:	000082c4 	andeq	r8, r0, r4, asr #5
     7f4:	00000199 	muleq	r0, r9, r1
     7f8:	000003c2 	andeq	r0, r0, r2, asr #7
     7fc:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     800:	0092a803 	addseq	sl, r2, r3, lsl #16
     804:	d0160000 	andsle	r0, r6, r0
     808:	66000082 	strvs	r0, [r0], -r2, lsl #1
     80c:	d6000005 	strle	r0, [r0], -r5
     810:	17000003 	strne	r0, [r0, -r3]
     814:	74025001 	strvc	r5, [r2], #-1
     818:	e41a0000 	ldr	r0, [sl], #-0
     81c:	66000082 	strvs	r0, [r0], -r2, lsl #1
     820:	17000005 	strne	r0, [r0, -r5]
     824:	03065001 	movweq	r5, #24577	; 0x6001
     828:	000092a4 	andeq	r9, r0, r4, lsr #5
     82c:	20000006 	andcs	r0, r0, r6
     830:	000001a0 	andeq	r0, r0, r0, lsr #3
     834:	82ec4a02 	rschi	r4, ip, #8192	; 0x2000
     838:	00400000 	subeq	r0, r0, r0
     83c:	9c010000 	stcls	0, cr0, [r1], {-0}
     840:	0000045a 	andeq	r0, r0, sl, asr r4
     844:	00027621 	andeq	r7, r2, r1, lsr #12
     848:	2f500200 	svccs	0x00500200
     84c:	e3000001 	movw	r0, #1
     850:	16000001 	strne	r0, [r0], -r1
     854:	000082f8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
     858:	00000199 	muleq	r0, r9, r1
     85c:	00000426 	andeq	r0, r0, r6, lsr #8
     860:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     864:	0092a803 	addseq	sl, r2, r3, lsl #16
     868:	14160000 	ldrne	r0, [r6], #-0
     86c:	6d000083 	stcvs	0, cr0, [r0, #-524]	; 0xfffffdf4
     870:	43000001 	movwmi	r0, #1
     874:	17000004 	strne	r0, [r0, -r4]
     878:	74025101 	strvc	r5, [r2], #-257	; 0x101
     87c:	50011700 	andpl	r1, r1, r0, lsl #14
     880:	92a80305 	adcls	r0, r8, #335544320	; 0x14000000
     884:	1a000000 	bne	88c <_start-0x7774>
     888:	00008320 	andeq	r8, r0, r0, lsr #6
     88c:	00000566 	andeq	r0, r0, r6, ror #10
     890:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
     894:	01170075 	tsteq	r7, r5, ror r0
     898:	00740250 	rsbseq	r0, r4, r0, asr r2
     89c:	c2200000 	eorgt	r0, r0, #0
     8a0:	02000000 	andeq	r0, r0, #0
     8a4:	00832c5e 	addeq	r2, r3, lr, asr ip
     8a8:	00005000 	andeq	r5, r0, r0
     8ac:	d89c0100 	ldmle	ip, {r8}
     8b0:	21000004 	tstcs	r0, r4
     8b4:	00000276 	andeq	r0, r0, r6, ror r2
     8b8:	012f6d02 	teqeq	pc, r2, lsl #26
     8bc:	02010000 	andeq	r0, r1, #0
     8c0:	38160000 	ldmdacc	r6, {}	; <UNPREDICTABLE>
     8c4:	40000083 	andmi	r0, r0, r3, lsl #1
     8c8:	95000001 	strls	r0, [r0, #-1]
     8cc:	17000004 	strne	r0, [r0, -r4]
     8d0:	03055001 	movweq	r5, #20481	; 0x5001
     8d4:	000092a8 	andeq	r9, r0, r8, lsr #5
     8d8:	83441800 	movthi	r1, #18432	; 0x4800
     8dc:	025f0000 	subseq	r0, pc, #0
     8e0:	50180000 	andspl	r0, r8, r0
     8e4:	5f000083 	svcpl	0x00000083
     8e8:	16000002 	strne	r0, [r0], -r2
     8ec:	00008358 	andeq	r8, r0, r8, asr r3
     8f0:	00000199 	muleq	r0, r9, r1
     8f4:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
     8f8:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     8fc:	18000c74 	stmdane	r0, {r2, r4, r5, r6, sl, fp}
     900:	00008364 	andeq	r8, r0, r4, ror #6
     904:	00000566 	andeq	r0, r0, r6, ror #10
     908:	00836c1a 	addeq	r6, r3, sl, lsl ip
     90c:	00051000 	andeq	r1, r5, r0
     910:	50011700 	andpl	r1, r1, r0, lsl #14
     914:	90540305 	subsls	r0, r4, r5, lsl #6
     918:	00000000 	andeq	r0, r0, r0
     91c:	00021319 	andeq	r1, r2, r9, lsl r3
     920:	350a0200 	strcc	r0, [sl, #-512]	; 0x200
     924:	05000001 	streq	r0, [r0, #-1]
     928:	0092a803 	addseq	sl, r2, r3, lsl #16
     92c:	02b21900 	adcseq	r1, r2, #0, 18
     930:	0c020000 	stceq	0, cr0, [r2], {-0}
     934:	000004fa 	strdeq	r0, [r0], -sl
     938:	92a40305 	adcls	r0, r4, #335544320	; 0x14000000
     93c:	2f070000 	svccs	0x00070000
     940:	19000001 	stmdbne	r0, {r0}
     944:	00000246 	andeq	r0, r0, r6, asr #4
     948:	012f0d02 	teqeq	pc, r2, lsl #26
     94c:	03050000 	movweq	r0, #20480	; 0x5000
     950:	000092b0 			; <UNDEFINED> instruction: 0x000092b0
     954:	00032f22 	andeq	r2, r3, r2, lsr #30
     958:	25270600 	strcs	r0, [r7, #-1536]!	; 0x600
     95c:	26000000 	strcs	r0, [r0], -r0
     960:	1f000005 	svcne	0x00000005
     964:	00000091 	muleq	r0, r1, r0
     968:	0b240023 	bleq	9009fc <__bss_end__+0x8f733c>
     96c:	06000000 	streq	r0, [r0], -r0
     970:	0225225c 	eoreq	r2, r5, #92, 4	; 0xc0000005
     974:	67060000 	strvs	r0, [r6, -r0]
     978:	00000088 	andeq	r0, r0, r8, lsl #1
     97c:	00000547 	andeq	r0, r0, r7, asr #10
     980:	0000371f 	andeq	r3, r0, pc, lsl r7
     984:	00371f00 	eorseq	r1, r7, r0, lsl #30
     988:	22000000 	andcs	r0, r0, #0
     98c:	0000026f 	andeq	r0, r0, pc, ror #4
     990:	00881b07 	addeq	r1, r8, r7, lsl #22
     994:	05660000 	strbeq	r0, [r6, #-0]!
     998:	881f0000 	ldmdahi	pc, {}	; <UNPREDICTABLE>
     99c:	1f000000 	svcne	0x00000000
     9a0:	00000025 	andeq	r0, r0, r5, lsr #32
     9a4:	00002c1f 	andeq	r2, r0, pc, lsl ip
     9a8:	a2250000 	eorge	r0, r5, #0
     9ac:	05000002 	streq	r0, [r0, #-2]
     9b0:	00057c3b 	andeq	r7, r5, fp, lsr ip
     9b4:	057c1f00 	ldrbeq	r1, [ip, #-3840]!	; 0xf00
     9b8:	7c1f0000 	ldcvc	0, cr0, [pc], {-0}
     9bc:	00000005 	andeq	r0, r0, r5
     9c0:	00680406 	rsbeq	r0, r8, r6, lsl #8
     9c4:	db000000 	blle	9cc <_start-0x7634>
     9c8:	04000000 	streq	r0, [r0], #-0
     9cc:	0003c800 	andeq	ip, r3, r0, lsl #16
     9d0:	16010400 	strne	r0, [r1], -r0, lsl #8
     9d4:	01000000 	mrseq	r0, (UNDEF: 0)
     9d8:	000002bd 			; <UNDEFINED> instruction: 0x000002bd
     9dc:	000002cb 	andeq	r0, r0, fp, asr #5
     9e0:	000083b0 			; <UNDEFINED> instruction: 0x000083b0
     9e4:	00000020 	andeq	r0, r0, r0, lsr #32
     9e8:	00000337 	andeq	r0, r0, r7, lsr r3
     9ec:	87060102 	strhi	r0, [r6, -r2, lsl #2]
     9f0:	02000000 	andeq	r0, r0, #0
     9f4:	00850801 	addeq	r0, r5, r1, lsl #16
     9f8:	02020000 	andeq	r0, r2, #0
     9fc:	0001dd05 	andeq	sp, r1, r5, lsl #26
     a00:	07020200 	streq	r0, [r2, -r0, lsl #4]
     a04:	0000009d 	muleq	r0, sp, r0
     a08:	69050403 	stmdbvs	r5, {r0, r1, sl}
     a0c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
     a10:	01860704 	orreq	r0, r6, r4, lsl #14
     a14:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     a18:	0001bb05 	andeq	fp, r1, r5, lsl #22
     a1c:	07080200 	streq	r0, [r8, -r0, lsl #4]
     a20:	0000017c 	andeq	r0, r0, ip, ror r1
     a24:	c0050402 	andgt	r0, r5, r2, lsl #8
     a28:	02000001 	andeq	r0, r0, #1
     a2c:	01aa0704 			; <UNDEFINED> instruction: 0x01aa0704
     a30:	04040000 	streq	r0, [r4], #-0
     a34:	81070402 	tsthi	r7, r2, lsl #8
     a38:	05000001 	streq	r0, [r0, #-1]
     a3c:	00007a04 	andeq	r7, r0, r4, lsl #20
     a40:	08010200 	stmdaeq	r1, {r9}
     a44:	0000008e 	andeq	r0, r0, lr, lsl #1
     a48:	00021806 	andeq	r1, r2, r6, lsl #16
     a4c:	48d40200 	ldmmi	r4, {r9}^
     a50:	07000000 	streq	r0, [r0, -r0]
     a54:	0000026f 	andeq	r0, r0, pc, ror #4
     a58:	006b1b03 	rsbeq	r1, fp, r3, lsl #22
     a5c:	83b00000 	movshi	r0, #0
     a60:	00200000 	eoreq	r0, r0, r0
     a64:	9c010000 	stcls	0, cr0, [r1], {-0}
     a68:	00705f08 	rsbseq	r5, r0, r8, lsl #30
     a6c:	006b0301 	rsbeq	r0, fp, r1, lsl #6
     a70:	50010000 	andpl	r0, r1, r0
     a74:	01006308 	tsteq	r0, r8, lsl #6
     a78:	00004103 	andeq	r4, r0, r3, lsl #2
     a7c:	09510100 	ldmdbeq	r1, {r8}^
     a80:	0301006e 	movweq	r0, #4206	; 0x106e
     a84:	00000081 	andeq	r0, r0, r1, lsl #1
     a88:	0000021f 	andeq	r0, r0, pc, lsl r2
     a8c:	0100700a 	tsteq	r0, sl
     a90:	00007404 	andeq	r7, r0, r4, lsl #8
     a94:	00024000 	andeq	r4, r2, r0
     a98:	00650b00 	rsbeq	r0, r5, r0, lsl #22
     a9c:	00740401 	rsbseq	r0, r4, r1, lsl #8
     aa0:	52010000 	andpl	r0, r1, #0
     aa4:	01910000 	orrseq	r0, r1, r0
     aa8:	00040000 	andeq	r0, r4, r0
     aac:	00000465 	andeq	r0, r0, r5, ror #8
     ab0:	00160104 	andseq	r0, r6, r4, lsl #2
     ab4:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
     ab8:	cb000003 	blgt	acc <_start-0x7534>
     abc:	d0000002 	andle	r0, r0, r2
     ac0:	58000083 	stmdapl	r0, {r0, r1, r7}
     ac4:	27000000 	strcs	r0, [r0, -r0]
     ac8:	02000004 	andeq	r0, r0, #4
     acc:	0000030f 	andeq	r0, r0, pc, lsl #6
     ad0:	00302802 	eorseq	r2, r0, r2, lsl #16
     ad4:	36030000 	strcc	r0, [r3], -r0
     ad8:	04000003 	streq	r0, [r0], #-3
     adc:	00470003 	subeq	r0, r7, r3
     ae0:	45040000 	strmi	r0, [r4, #-0]
     ae4:	47000003 	strmi	r0, [r0, -r3]
     ae8:	00000000 	andeq	r0, r0, r0
     aec:	02040500 	andeq	r0, r4, #0, 10
     af0:	00000338 	andeq	r0, r0, r8, lsr r3
     af4:	00256202 	eoreq	r6, r5, r2, lsl #4
     af8:	04060000 	streq	r0, [r6], #-0
     afc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
     b00:	07040700 	streq	r0, [r4, -r0, lsl #14]
     b04:	00000186 	andeq	r0, r0, r6, lsl #3
     b08:	87060107 	strhi	r0, [r6, -r7, lsl #2]
     b0c:	07000000 	streq	r0, [r0, -r0]
     b10:	01dd0502 	bicseq	r0, sp, r2, lsl #10
     b14:	04070000 	streq	r0, [r7], #-0
     b18:	0001c005 	andeq	ip, r1, r5
     b1c:	05080700 	streq	r0, [r8, #-1792]	; 0x700
     b20:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
     b24:	85080107 	strhi	r0, [r8, #-263]	; 0x107
     b28:	07000000 	streq	r0, [r0, -r0]
     b2c:	009d0702 	addseq	r0, sp, r2, lsl #14
     b30:	04070000 	streq	r0, [r7], #-0
     b34:	00018107 	andeq	r8, r1, r7, lsl #2
     b38:	07080700 	streq	r0, [r8, -r0, lsl #14]
     b3c:	0000017c 	andeq	r0, r0, ip, ror r1
     b40:	aa070407 	bge	1c1b64 <__bss_end__+0x1b84a4>
     b44:	08000001 	stmdaeq	r0, {r0}
     b48:	0000a704 	andeq	sl, r0, r4, lsl #14
     b4c:	08010700 	stmdaeq	r1, {r8, r9, sl}
     b50:	0000008e 	andeq	r0, r0, lr, lsl #1
     b54:	00b40408 	adcseq	r0, r4, r8, lsl #8
     b58:	a7090000 	strge	r0, [r9, -r0]
     b5c:	0a000000 	beq	b64 <_start-0x749c>
     b60:	0000032f 	andeq	r0, r0, pc, lsr #6
     b64:	00540601 	subseq	r0, r4, r1, lsl #12
     b68:	83d00000 	bicshi	r0, r0, #0
     b6c:	00580000 	subseq	r0, r8, r0
     b70:	9c010000 	stcls	0, cr0, [r1], {-0}
     b74:	00000143 	andeq	r0, r0, r3, asr #2
     b78:	746d660b 	strbtvc	r6, [sp], #-1547	; 0x60b
     b7c:	ae060100 	adfges	f0, f6, f0
     b80:	02000000 	andeq	r0, r0, #0
     b84:	0d0c7091 	stceq	0, cr7, [ip, #-580]	; 0xfffffdbc
     b88:	00667562 	rsbeq	r7, r6, r2, ror #10
     b8c:	01430801 	cmpeq	r3, r1, lsl #16
     b90:	03050000 	movweq	r0, #20480	; 0x5000
     b94:	000092b4 			; <UNDEFINED> instruction: 0x000092b4
     b98:	0003400e 	andeq	r4, r3, lr
     b9c:	49090100 	stmdbmi	r9, {r8}
     ba0:	02000000 	andeq	r0, r0, #0
     ba4:	730f5c91 	movwvc	r5, #64657	; 0xfc91
     ba8:	0c01007a 	stceq	0, cr0, [r1], {122}	; 0x7a
     bac:	00000054 	andeq	r0, r0, r4, asr r0
     bb0:	0000026b 	andeq	r0, r0, fp, ror #4
     bb4:	0083f810 	addeq	pc, r3, r0, lsl r8	; <UNPREDICTABLE>
     bb8:	00017400 	andeq	r7, r1, r0, lsl #8
     bbc:	00013600 	andeq	r3, r1, r0, lsl #12
     bc0:	53011100 	movwpl	r1, #4352	; 0x1100
     bc4:	114c9102 	cmpne	ip, r2, lsl #2
     bc8:	91035201 	tstls	r3, r1, lsl #4
     bcc:	01110648 	tsteq	r1, r8, asr #12
     bd0:	000a0351 	andeq	r0, sl, r1, asr r3
     bd4:	50011104 	andpl	r1, r1, r4, lsl #2
     bd8:	00007402 	andeq	r7, r0, r2, lsl #8
     bdc:	00840c12 	addeq	r0, r4, r2, lsl ip
     be0:	50011100 	andpl	r1, r1, r0, lsl #2
     be4:	00007402 	andeq	r7, r0, r2, lsl #8
     be8:	00a71300 	adceq	r1, r7, r0, lsl #6
     bec:	01540000 	cmpeq	r4, r0
     bf0:	9a140000 	bls	500bf8 <__bss_end__+0x4f7538>
     bf4:	ff000000 			; <UNDEFINED> instruction: 0xff000000
     bf8:	54150003 	ldrpl	r0, [r5], #-3
     bfc:	63000000 	movwvs	r0, #0
     c00:	16000001 	strne	r0, [r0], -r1
     c04:	000000ae 	andeq	r0, r0, lr, lsr #1
     c08:	035f1700 	cmpeq	pc, #0, 14
     c0c:	20040000 	andcs	r0, r4, r0
     c10:	0000016e 	andeq	r0, r0, lr, ror #2
     c14:	01540408 	cmpeq	r4, r8, lsl #8
     c18:	2c180000 	ldccs	0, cr0, [r8], {-0}
     c1c:	05000003 	streq	r0, [r0, #-3]
     c20:	00005402 	andeq	r5, r0, r2, lsl #8
     c24:	00a11600 	adceq	r1, r1, r0, lsl #12
     c28:	54160000 	ldrpl	r0, [r6], #-0
     c2c:	16000000 	strne	r0, [r0], -r0
     c30:	000000ae 	andeq	r0, r0, lr, lsr #1
     c34:	00004916 	andeq	r4, r0, r6, lsl r9
     c38:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
     c3c:	04000000 	streq	r0, [r0], #-0
     c40:	00059600 	andeq	r9, r5, r0, lsl #12
     c44:	16010400 	strne	r0, [r1], -r0, lsl #8
     c48:	01000000 	mrseq	r0, (UNDEF: 0)
     c4c:	0000034a 	andeq	r0, r0, sl, asr #6
     c50:	000002cb 	andeq	r0, r0, fp, asr #5
     c54:	00008428 	andeq	r8, r0, r8, lsr #8
     c58:	00000034 	andeq	r0, r0, r4, lsr r0
     c5c:	0000052d 	andeq	r0, r0, sp, lsr #10
     c60:	69050402 	stmdbvs	r5, {r1, sl}
     c64:	0300746e 	movweq	r7, #1134	; 0x46e
     c68:	01860704 	orreq	r0, r6, r4, lsl #14
     c6c:	01030000 	mrseq	r0, (UNDEF: 3)
     c70:	00008706 	andeq	r8, r0, r6, lsl #14
     c74:	05020300 	streq	r0, [r2, #-768]	; 0x300
     c78:	000001dd 	ldrdeq	r0, [r0], -sp
     c7c:	c0050403 	andgt	r0, r5, r3, lsl #8
     c80:	03000001 	movweq	r0, #1
     c84:	01bb0508 			; <UNDEFINED> instruction: 0x01bb0508
     c88:	01030000 	mrseq	r0, (UNDEF: 3)
     c8c:	00008508 	andeq	r8, r0, r8, lsl #10
     c90:	07020300 	streq	r0, [r2, -r0, lsl #6]
     c94:	0000009d 	muleq	r0, sp, r0
     c98:	81070403 	tsthi	r7, r3, lsl #8
     c9c:	03000001 	movweq	r0, #1
     ca0:	017c0708 	cmneq	ip, r8, lsl #14
     ca4:	04030000 	streq	r0, [r3], #-0
     ca8:	0001aa07 	andeq	sl, r1, r7, lsl #20
     cac:	08010300 	stmdaeq	r1, {r8, r9}
     cb0:	0000008e 	andeq	r0, r0, lr, lsl #1
     cb4:	007f0404 	rsbseq	r0, pc, r4, lsl #8
     cb8:	72050000 	andvc	r0, r5, #0
     cbc:	06000000 	streq	r0, [r0], -r0
     cc0:	00000356 	andeq	r0, r0, r6, asr r3
     cc4:	00250401 	eoreq	r0, r5, r1, lsl #8
     cc8:	84280000 	strthi	r0, [r8], #-0
     ccc:	00340000 	eorseq	r0, r4, r0
     cd0:	9c010000 	stcls	0, cr0, [r1], {-0}
     cd4:	000000ab 	andeq	r0, r0, fp, lsr #1
     cd8:	01007007 	tsteq	r0, r7
     cdc:	00007904 	andeq	r7, r0, r4, lsl #18
     ce0:	00029400 	andeq	r9, r2, r0, lsl #8
     ce4:	25080000 	strcs	r0, [r8, #-0]
     ce8:	ba000000 	blt	cf0 <_start-0x7310>
     cec:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     cf0:	00000025 	andeq	r0, r0, r5, lsr #32
     cf4:	03640a00 	cmneq	r4, #0, 20
     cf8:	1d020000 	stcne	0, cr0, [r2, #-0]
     cfc:	000000c5 	andeq	r0, r0, r5, asr #1
     d00:	00ab0404 	adceq	r0, fp, r4, lsl #8
     d04:	25080000 	strcs	r0, [r8, #-0]
     d08:	da000000 	ble	d10 <_start-0x72f0>
     d0c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     d10:	00000079 	andeq	r0, r0, r9, ror r0
     d14:	035f0b00 	cmpeq	pc, #0, 22
     d18:	0c010000 	stceq	0, cr0, [r1], {-0}
     d1c:	000000eb 	andeq	r0, r0, fp, ror #1
     d20:	8eec0305 	cdphi	3, 14, cr0, cr12, cr5, {0}
     d24:	04040000 	streq	r0, [r4], #-0
     d28:	000000cb 	andeq	r0, r0, fp, asr #1
     d2c:	00065400 	andeq	r5, r6, r0, lsl #8
     d30:	2f000400 	svccs	0x00000400
     d34:	04000006 	streq	r0, [r0], #-6
     d38:	00001601 	andeq	r1, r0, r1, lsl #12
     d3c:	039c0100 	orrseq	r0, ip, #0, 2
     d40:	02cb0000 	sbceq	r0, fp, #0
     d44:	845c0000 	ldrbhi	r0, [ip], #-0
     d48:	04f00000 	ldrbteq	r0, [r0], #0
     d4c:	05c70000 	strbeq	r0, [r7]
     d50:	04020000 	streq	r0, [r2], #-0
     d54:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
     d58:	07040300 	streq	r0, [r4, -r0, lsl #6]
     d5c:	00000186 	andeq	r0, r0, r6, lsl #3
     d60:	87060103 	strhi	r0, [r6, -r3, lsl #2]
     d64:	03000000 	movweq	r0, #0
     d68:	01dd0502 	bicseq	r0, sp, r2, lsl #10
     d6c:	04030000 	streq	r0, [r3], #-0
     d70:	0001c005 	andeq	ip, r1, r5
     d74:	05080300 	streq	r0, [r8, #-768]	; 0x300
     d78:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
     d7c:	85080103 	strhi	r0, [r8, #-259]	; 0x103
     d80:	03000000 	movweq	r0, #0
     d84:	009d0702 	addseq	r0, sp, r2, lsl #14
     d88:	04030000 	streq	r0, [r3], #-0
     d8c:	00018107 	andeq	r8, r1, r7, lsl #2
     d90:	07080300 	streq	r0, [r8, -r0, lsl #6]
     d94:	0000017c 	andeq	r0, r0, ip, ror r1
     d98:	aa070403 	bge	1c1dac <__bss_end__+0x1b86ec>
     d9c:	04000001 	streq	r0, [r0], #-1
     da0:	7a040504 	bvc	1021b8 <__bss_end__+0xf8af8>
     da4:	03000000 	movweq	r0, #0
     da8:	008e0801 	addeq	r0, lr, r1, lsl #16
     dac:	04050000 	streq	r0, [r5], #-0
     db0:	00000087 	andeq	r0, r0, r7, lsl #1
     db4:	00007a06 	andeq	r7, r0, r6, lsl #20
     db8:	030f0700 	movweq	r0, #63232	; 0xf700
     dbc:	28020000 	stmdacs	r2, {}	; <UNPREDICTABLE>
     dc0:	00000097 	muleq	r0, r7, r0
     dc4:	00033608 	andeq	r3, r3, r8, lsl #12
     dc8:	00040400 	andeq	r0, r4, r0, lsl #8
     dcc:	000000ae 	andeq	r0, r0, lr, lsr #1
     dd0:	00034509 	andeq	r4, r3, r9, lsl #10
     dd4:	00007200 	andeq	r7, r0, r0, lsl #4
     dd8:	07000000 	streq	r0, [r0, -r0]
     ddc:	00000338 	andeq	r0, r0, r8, lsr r3
     de0:	008c6202 	addeq	r6, ip, r2, lsl #4
     de4:	7e0a0000 	cdpvc	0, 0, cr0, cr10, cr0, {0}
     de8:	01000003 	tsteq	r0, r3
     dec:	00002527 	andeq	r2, r0, r7, lsr #10
     df0:	00845c00 	addeq	r5, r4, r0, lsl #24
     df4:	00001400 	andeq	r1, r0, r0, lsl #8
     df8:	e09c0100 	adds	r0, ip, r0, lsl #2
     dfc:	0b000000 	bleq	e04 <_start-0x71fc>
     e00:	27010063 	strcs	r0, [r1, -r3, rrx]
     e04:	00000025 	andeq	r0, r0, r5, lsr #32
     e08:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
     e0c:	61700c00 	cmnvs	r0, r0, lsl #24
     e10:	2e010064 	cdpcs	0, 0, cr0, cr1, cr4, {3}
     e14:	00000074 	andeq	r0, r0, r4, ror r0
     e18:	00008470 	andeq	r8, r0, r0, ror r4
     e1c:	0000002c 	andeq	r0, r0, ip, lsr #32
     e20:	01309c01 	teqeq	r0, r1, lsl #24
     e24:	700b0000 	andvc	r0, fp, r0
     e28:	742e0100 	strtvc	r0, [lr], #-256	; 0x100
     e2c:	e0000000 	and	r0, r0, r0
     e30:	0d000002 	stceq	0, cr0, [r0, #-8]
     e34:	0000038e 	andeq	r0, r0, lr, lsl #7
     e38:	00742e01 	rsbseq	r2, r4, r1, lsl #28
     e3c:	030b0000 	movweq	r0, #45056	; 0xb000
     e40:	bc0e0000 	stclt	0, cr0, [lr], {-0}
     e44:	01000003 	tsteq	r0, r3
     e48:	0000252e 	andeq	r2, r0, lr, lsr #10
     e4c:	0f520100 	svceq	0x00520100
     e50:	006e656c 	rsbeq	r6, lr, ip, ror #10
     e54:	00252f01 	eoreq	r2, r5, r1, lsl #30
     e58:	51010000 	mrspl	r0, (UNDEF: 1)
     e5c:	03760a00 	cmneq	r6, #0, 20
     e60:	37010000 	strcc	r0, [r1, -r0]
     e64:	00000074 	andeq	r0, r0, r4, ror r0
     e68:	0000849c 	muleq	r0, ip, r4
     e6c:	00000040 	andeq	r0, r0, r0, asr #32
     e70:	019c9c01 	orrseq	r9, ip, r1, lsl #24
     e74:	640b0000 	strvs	r0, [fp], #-0
     e78:	01007473 	tsteq	r0, r3, ror r4
     e7c:	00007437 	andeq	r7, r0, r7, lsr r4
     e80:	00032c00 	andeq	r2, r3, r0, lsl #24
     e84:	006e0b00 	rsbeq	r0, lr, r0, lsl #22
     e88:	00253701 	eoreq	r3, r5, r1, lsl #14
     e8c:	03640000 	cmneq	r4, #0
     e90:	700b0000 	andvc	r0, fp, r0
     e94:	74370100 	ldrtvc	r0, [r7], #-256	; 0x100
     e98:	85000000 	strhi	r0, [r0, #-0]
     e9c:	0d000003 	stceq	0, cr0, [r0, #-12]
     ea0:	000000cd 	andeq	r0, r0, sp, asr #1
     ea4:	00743701 	rsbseq	r3, r4, r1, lsl #14
     ea8:	03bb0000 			; <UNDEFINED> instruction: 0x03bb0000
     eac:	6c100000 	ldcvs	0, cr0, [r0], {-0}
     eb0:	01006e65 	tsteq	r0, r5, ror #28
     eb4:	00002539 	andeq	r2, r0, r9, lsr r5
     eb8:	0003d900 	andeq	sp, r3, r0, lsl #18
     ebc:	00730f00 	rsbseq	r0, r3, r0, lsl #30
     ec0:	00743d01 	rsbseq	r3, r4, r1, lsl #26
     ec4:	50010000 	andpl	r0, r1, r0
     ec8:	03ca0a00 	biceq	r0, sl, #0, 20
     ecc:	47010000 	strmi	r0, [r1, -r0]
     ed0:	00000074 	andeq	r0, r0, r4, ror r0
     ed4:	000084dc 	ldrdeq	r8, [r0], -ip
     ed8:	00000198 	muleq	r0, r8, r1
     edc:	02ca9c01 	sbceq	r9, sl, #256	; 0x100
     ee0:	8e0d0000 	cdphi	0, 0, cr0, cr13, cr0, {0}
     ee4:	01000003 	tsteq	r0, r3
     ee8:	00002c47 	andeq	r2, r0, r7, asr #24
     eec:	00040000 	andeq	r0, r4, r0
     ef0:	73640b00 	cmnvc	r4, #0, 22
     ef4:	47010074 	smlsdxmi	r1, r4, r0, r0
     ef8:	00000074 	andeq	r0, r0, r4, ror r0
     efc:	0000042e 	andeq	r0, r0, lr, lsr #8
     f00:	01006e0b 	tsteq	r0, fp, lsl #28
     f04:	00002547 	andeq	r2, r0, r7, asr #10
     f08:	00049c00 	andeq	r9, r4, r0, lsl #24
     f0c:	61760b00 	cmnvs	r6, r0, lsl #22
     f10:	4701006c 	strmi	r0, [r1, -ip, rrx]
     f14:	00000025 	andeq	r0, r0, r5, lsr #32
     f18:	000004c8 	andeq	r0, r0, r8, asr #9
     f1c:	0003bc0d 	andeq	fp, r3, sp, lsl #24
     f20:	25470100 	strbcs	r0, [r7, #-256]	; 0x100
     f24:	52000000 	andpl	r0, r0, #0
     f28:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
     f2c:	00000393 	muleq	r0, r3, r3
     f30:	00254701 	eoreq	r4, r5, r1, lsl #14
     f34:	91020000 	mrsls	r0, (UNDEF: 2)
     f38:	75620f04 	strbvc	r0, [r2, #-3844]!	; 0xf04
     f3c:	4c010066 	stcmi	0, cr0, [r1], {102}	; 0x66
     f40:	000002ca 	andeq	r0, r0, sl, asr #5
     f44:	7fa89103 	svcvc	0x00a89103
     f48:	01007010 	tsteq	r0, r0, lsl r0
     f4c:	0000744c 	andeq	r7, r0, ip, asr #8
     f50:	00057c00 	andeq	r7, r5, r0, lsl #24
     f54:	00751000 	rsbseq	r1, r5, r0
     f58:	002c4d01 	eoreq	r4, ip, r1, lsl #26
     f5c:	06210000 	strteq	r0, [r1], -r0
     f60:	52110000 	andspl	r0, r1, #0
     f64:	ea000001 	b	f70 <_start-0x7090>
     f68:	05000002 	streq	r0, [r0, #-2]
     f6c:	00908403 	addseq	r8, r0, r3, lsl #8
     f70:	85481200 	strbhi	r1, [r8, #-512]	; 0x200
     f74:	00740000 	rsbseq	r0, r4, r0
     f78:	02610000 	rsbeq	r0, r1, #0
     f7c:	70130000 	andsvc	r0, r3, r0
     f80:	01000003 	tsteq	r0, r3
     f84:	00002c52 	andeq	r2, r0, r2, asr ip
     f88:	00073100 	andeq	r3, r7, r0, lsl #2
     f8c:	2c140000 	ldccs	0, cr0, [r4], {-0}
     f90:	3a000086 	bcc	11b0 <_start-0x6e50>
     f94:	90000006 	andls	r0, r0, r6
     f98:	15000002 	strne	r0, [r0, #-2]
     f9c:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     fa0:	52011575 	andpl	r1, r1, #490733568	; 0x1d400000
     fa4:	90840305 	addls	r0, r4, r5, lsl #6
     fa8:	01150000 	tsteq	r5, r0
     fac:	bc030551 	cfstr32lt	mvfx0, [r3], {81}	; 0x51
     fb0:	15000090 	strne	r0, [r0, #-144]	; 0x90
     fb4:	03055001 	movweq	r5, #20481	; 0x5001
     fb8:	000090a8 	andeq	r9, r0, r8, lsr #1
     fbc:	86301600 	ldrthi	r1, [r0], -r0, lsl #12
     fc0:	06500000 	ldrbeq	r0, [r0], -r0
     fc4:	3c140000 	ldccc	0, cr0, [r4], {-0}
     fc8:	e0000086 	and	r0, r0, r6, lsl #1
     fcc:	ad000000 	stcge	0, cr0, [r0, #-0]
     fd0:	15000002 	strne	r0, [r0, #-2]
     fd4:	7d025101 	stfvcs	f5, [r2, #-4]
     fd8:	50170000 	andspl	r0, r7, r0
     fdc:	30000086 	andcc	r0, r0, r6, lsl #1
     fe0:	15000001 	strne	r0, [r0, #-1]
     fe4:	7d025301 	stcvc	3, cr5, [r2, #-4]
     fe8:	51011500 	tstpl	r1, r0, lsl #10
     fec:	15007402 	strne	r7, [r0, #-1026]	; 0x402
     ff0:	75025001 	strvc	r5, [r2, #-1]
     ff4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     ff8:	0000007a 	andeq	r0, r0, sl, ror r0
     ffc:	000002da 	ldrdeq	r0, [r0], -sl
    1000:	00006b19 	andeq	r6, r0, r9, lsl fp
    1004:	18003f00 	stmdane	r0, {r8, r9, sl, fp, ip, sp}
    1008:	0000007a 	andeq	r0, r0, sl, ror r0
    100c:	000002ea 	andeq	r0, r0, sl, ror #5
    1010:	00006b19 	andeq	r6, r0, r9, lsl fp
    1014:	06000400 	streq	r0, [r0], -r0, lsl #8
    1018:	000002da 	ldrdeq	r0, [r0], -sl
    101c:	0003ad1a 	andeq	sl, r3, sl, lsl sp
    1020:	741f0100 	ldrvc	r0, [pc], #-256	; 1028 <_start-0x6fd8>
    1024:	50000086 	andpl	r0, r0, r6, lsl #1
    1028:	01000000 	mrseq	r0, (UNDEF: 0)
    102c:	00036a9c 	muleq	r3, ip, sl
    1030:	03c20d00 	biceq	r0, r2, #0, 26
    1034:	1f010000 	svcne	0x00010000
    1038:	00000379 	andeq	r0, r0, r9, ror r3
    103c:	0000075d 	andeq	r0, r0, sp, asr r7
    1040:	0003860d 	andeq	r8, r3, sp, lsl #12
    1044:	8e1f0100 	mufhie	f0, f7, f0
    1048:	89000003 	stmdbhi	r0, {r0, r1}
    104c:	11000007 	tstne	r0, r7
    1050:	00000152 	andeq	r0, r0, r2, asr r1
    1054:	000003a4 	andeq	r0, r0, r4, lsr #7
    1058:	908c0305 	addls	r0, ip, r5, lsl #6
    105c:	94140000 	ldrls	r0, [r4], #-0
    1060:	3a000086 	bcc	1280 <_start-0x6d80>
    1064:	60000006 	andvs	r0, r0, r6
    1068:	15000003 	strne	r0, [r0, #-3]
    106c:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    1070:	52011520 	andpl	r1, r1, #32, 10	; 0x8000000
    1074:	908c0305 	addls	r0, ip, r5, lsl #6
    1078:	01150000 	tsteq	r5, r0
    107c:	bc030551 	cfstr32lt	mvfx0, [r3], {81}	; 0x51
    1080:	15000090 	strne	r0, [r0, #-144]	; 0x90
    1084:	03055001 	movweq	r5, #20481	; 0x5001
    1088:	000090f4 	strdeq	r9, [r0], -r4
    108c:	86981600 	ldrhi	r1, [r8], r0, lsl #12
    1090:	06500000 	ldrbeq	r0, [r0], -r0
    1094:	1b000000 	blne	109c <_start-0x6f64>
    1098:	00000025 	andeq	r0, r0, r5, lsr #32
    109c:	00000379 	andeq	r0, r0, r9, ror r3
    10a0:	0000251c 	andeq	r2, r0, ip, lsl r5
    10a4:	04050000 	streq	r0, [r5], #-0
    10a8:	0000036a 	andeq	r0, r0, sl, ror #6
    10ac:	0000251b 	andeq	r2, r0, fp, lsl r5
    10b0:	00038e00 	andeq	r8, r3, r0, lsl #28
    10b4:	00811c00 	addeq	r1, r1, r0, lsl #24
    10b8:	05000000 	streq	r0, [r0, #-0]
    10bc:	00037f04 	andeq	r7, r3, r4, lsl #30
    10c0:	007a1800 	rsbseq	r1, sl, r0, lsl #16
    10c4:	03a40000 			; <UNDEFINED> instruction: 0x03a40000
    10c8:	6b190000 	blvs	6410d0 <__bss_end__+0x637a10>
    10cc:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    10d0:	03940600 	orrseq	r0, r4, #0, 12
    10d4:	2c1d0000 	ldccs	0, cr0, [sp], {-0}
    10d8:	01000003 	tsteq	r0, r3
    10dc:	0000257d 	andeq	r2, r0, sp, ror r5
    10e0:	0086c400 	addeq	ip, r6, r0, lsl #8
    10e4:	00028800 	andeq	r8, r2, r0, lsl #16
    10e8:	ff9c0100 			; <UNDEFINED> instruction: 0xff9c0100
    10ec:	0b000005 	bleq	1108 <_start-0x6ef8>
    10f0:	00667562 	rsbeq	r7, r6, r2, ror #10
    10f4:	00747d01 	rsbseq	r7, r4, r1, lsl #26
    10f8:	07b50000 	ldreq	r0, [r5, r0]!
    10fc:	6e0b0000 	cdpvs	0, 0, cr0, cr11, cr0, {0}
    1100:	257d0100 	ldrbcs	r0, [sp, #-256]!	; 0x100
    1104:	e1000000 	mrs	r0, (UNDEF: 0)
    1108:	0b000007 	bleq	112c <_start-0x6ed4>
    110c:	00746d66 	rsbseq	r6, r4, r6, ror #26
    1110:	00817d01 	addeq	r7, r1, r1, lsl #26
    1114:	080f0000 	stmdaeq	pc, {}	; <UNPREDICTABLE>
    1118:	400d0000 	andmi	r0, sp, r0
    111c:	01000003 	tsteq	r0, r3
    1120:	0000ae7d 	andeq	sl, r0, sp, ror lr
    1124:	00084300 	andeq	r4, r8, r0, lsl #6
    1128:	00701000 	rsbseq	r1, r0, r0
    112c:	00747e01 	rsbseq	r7, r4, r1, lsl #28
    1130:	08560000 	ldmdaeq	r6, {}^	; <UNPREDICTABLE>
    1134:	65100000 	ldrvs	r0, [r0, #-0]
    1138:	747e0100 	ldrbtvc	r0, [lr], #-256	; 0x100
    113c:	d4000000 	strle	r0, [r0], #-0
    1140:	11000008 	tstne	r0, r8
    1144:	00000152 	andeq	r0, r0, r2, asr r1
    1148:	0000060f 	andeq	r0, r0, pc, lsl #12
    114c:	909c0305 	addsls	r0, ip, r5, lsl #6
    1150:	181e0000 	ldmdane	lr, {}	; <UNPREDICTABLE>
    1154:	f4000087 	vst4.32	{d0-d3}, [r0], r7
    1158:	10000001 	andne	r0, r0, r1
    115c:	8b010073 	blhi	41330 <__bss_end__+0x37c70>
    1160:	00000074 	andeq	r0, r0, r4, ror r0
    1164:	000008fb 	strdeq	r0, [r0], -fp
    1168:	6d756e0f 	ldclvs	14, cr6, [r5, #-60]!	; 0xffffffc4
    116c:	148b0100 	strne	r0, [fp], #256	; 0x100
    1170:	03000006 	movweq	r0, #6
    1174:	137ed891 	cmnne	lr, #9502720	; 0x910000
    1178:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
    117c:	002c8c01 	eoreq	r8, ip, r1, lsl #24
    1180:	09500000 	ldmdbeq	r0, {}^	; <UNPREDICTABLE>
    1184:	48140000 	ldmdami	r4, {}	; <UNPREDICTABLE>
    1188:	b9000087 	stmdblt	r0, {r0, r1, r2, r7}
    118c:	6d000000 	stcvs	0, cr0, [r0, #-0]
    1190:	15000004 	strne	r0, [r0, #-4]
    1194:	75025001 	strvc	r5, [r2, #-1]
    1198:	6c140000 	ldcvs	0, cr0, [r4], {-0}
    119c:	3a000087 	bcc	13c0 <_start-0x6c40>
    11a0:	9c000006 	stcls	0, cr0, [r0], {6}
    11a4:	15000004 	strne	r0, [r0, #-4]
    11a8:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    11ac:	52011592 	andpl	r1, r1, #612368384	; 0x24800000
    11b0:	909c0305 	addsls	r0, ip, r5, lsl #6
    11b4:	01150000 	tsteq	r5, r0
    11b8:	bc030551 	cfstr32lt	mvfx0, [r3], {81}	; 0x51
    11bc:	15000090 	strne	r0, [r0, #-144]	; 0x90
    11c0:	03055001 	movweq	r5, #20481	; 0x5001
    11c4:	0000910c 	andeq	r9, r0, ip, lsl #2
    11c8:	87701600 	ldrbhi	r1, [r0, -r0, lsl #12]!
    11cc:	06500000 	ldrbeq	r0, [r0], -r0
    11d0:	f0140000 			; <UNDEFINED> instruction: 0xf0140000
    11d4:	3a000087 	bcc	13f8 <_start-0x6c08>
    11d8:	d4000006 	strle	r0, [r0], #-6
    11dc:	15000004 	strne	r0, [r0, #-4]
    11e0:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    11e4:	52011598 	andpl	r1, r1, #152, 10	; 0x26000000
    11e8:	909c0305 	addsls	r0, ip, r5, lsl #6
    11ec:	01150000 	tsteq	r5, r0
    11f0:	bc030551 	cfstr32lt	mvfx0, [r3], {81}	; 0x51
    11f4:	15000090 	strne	r0, [r0, #-144]	; 0x90
    11f8:	03055001 	movweq	r5, #20481	; 0x5001
    11fc:	00009128 	andeq	r9, r0, r8, lsr #2
    1200:	87f41600 	ldrbhi	r1, [r4, r0, lsl #12]!
    1204:	06500000 	ldrbeq	r0, [r0], -r0
    1208:	18140000 	ldmdane	r4, {}	; <UNPREDICTABLE>
    120c:	9c000088 	stcls	0, cr0, [r0], {136}	; 0x88
    1210:	0a000001 	beq	121c <_start-0x6de4>
    1214:	15000005 	strne	r0, [r0, #-5]
    1218:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    121c:	51011580 	smlabbpl	r1, r0, r5, r1
    1220:	7ed09103 	atnvcs	f1, f3
    1224:	01500115 	cmpeq	r0, r5, lsl r1
    1228:	7d02153a 	cfstr32vc	mvfx1, [r2, #-232]	; 0xffffff18
    122c:	15310104 	ldrne	r0, [r1, #-260]!	; 0x104
    1230:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    1234:	14000077 	strne	r0, [r0], #-119	; 0x77
    1238:	00008840 	andeq	r8, r0, r0, asr #16
    123c:	0000019c 	muleq	r0, ip, r1
    1240:	00000537 	andeq	r0, r0, r7, lsr r5
    1244:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    1248:	01158008 	tsteq	r5, r8
    124c:	d0910351 	addsle	r0, r1, r1, asr r3
    1250:	5001157e 	andpl	r1, r1, lr, ror r5
    1254:	02153a01 	andseq	r3, r5, #4096	; 0x1000
    1258:	3001047d 	andcc	r0, r1, sp, ror r4
    125c:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    1260:	00007702 	andeq	r7, r0, r2, lsl #14
    1264:	00886814 	addeq	r6, r8, r4, lsl r8
    1268:	00019c00 	andeq	r9, r1, r0, lsl #24
    126c:	00056400 	andeq	r6, r5, r0, lsl #8
    1270:	52011500 	andpl	r1, r1, #0, 10
    1274:	15800802 	strne	r0, [r0, #2050]	; 0x802
    1278:	91035101 	tstls	r3, r1, lsl #2
    127c:	01157ed0 			; <UNDEFINED> instruction: 0x01157ed0
    1280:	15400150 	strbne	r0, [r0, #-336]	; 0x150
    1284:	01047d02 	tsteq	r4, r2, lsl #26
    1288:	7d021530 	cfstr32vc	mvfx1, [r2, #-192]	; 0xffffff40
    128c:	00770200 	rsbseq	r0, r7, r0, lsl #4
    1290:	88901400 	ldmhi	r0, {sl, ip}
    1294:	019c0000 	orrseq	r0, ip, r0
    1298:	05910000 	ldreq	r0, [r1]
    129c:	01150000 	tsteq	r5, r0
    12a0:	80080252 	andhi	r0, r8, r2, asr r2
    12a4:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    12a8:	157ed091 	ldrbne	sp, [lr, #-145]!	; 0x91
    12ac:	32015001 	andcc	r5, r1, #1
    12b0:	047d0215 	ldrbteq	r0, [sp], #-533	; 0x215
    12b4:	02153001 	andseq	r3, r5, #1
    12b8:	7702007d 	smlsdxvc	r2, sp, r0, r0
    12bc:	c4140000 	ldrgt	r0, [r4], #-0
    12c0:	9c000088 	stcls	0, cr0, [r0], {136}	; 0x88
    12c4:	be000001 	cdplt	0, 0, cr0, cr0, cr1, {0}
    12c8:	15000005 	strne	r0, [r0, #-5]
    12cc:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    12d0:	51011580 	smlabbpl	r1, r0, r5, r1
    12d4:	7ed09103 	atnvcs	f1, f3
    12d8:	01500115 	cmpeq	r0, r5, lsl r1
    12dc:	7d021538 	cfstr32vc	mvfx1, [r2, #-224]	; 0xffffff20
    12e0:	15300104 	ldrne	r0, [r0, #-260]!	; 0x104
    12e4:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    12e8:	14000077 	strne	r0, [r0], #-119	; 0x77
    12ec:	000088e0 	andeq	r8, r0, r0, ror #17
    12f0:	0000063a 	andeq	r0, r0, sl, lsr r6
    12f4:	000005f4 	strdeq	r0, [r0], -r4
    12f8:	02530115 	subseq	r0, r3, #1073741829	; 0x40000005
    12fc:	0115b908 	tsteq	r5, r8, lsl #18
    1300:	9c030552 	cfstr32ls	mvfx0, [r3], {82}	; 0x52
    1304:	15000090 	strne	r0, [r0, #-144]	; 0x90
    1308:	03055101 	movweq	r5, #20737	; 0x5101
    130c:	000090bc 	strheq	r9, [r0], -ip
    1310:	05500115 	ldrbeq	r0, [r0, #-277]	; 0x115
    1314:	00915003 	addseq	r5, r1, r3
    1318:	7d021500 	cfstr32vc	mvfx1, [r2, #-0]
    131c:	00790200 	rsbseq	r0, r9, r0, lsl #4
    1320:	88e41600 	stmiahi	r4!, {r9, sl, ip}^
    1324:	06500000 	ldrbeq	r0, [r0], -r0
    1328:	00000000 	andeq	r0, r0, r0
    132c:	00007a18 	andeq	r7, r0, r8, lsl sl
    1330:	00060f00 	andeq	r0, r6, r0, lsl #30
    1334:	006b1900 	rsbeq	r1, fp, r0, lsl #18
    1338:	00090000 	andeq	r0, r9, r0
    133c:	0005ff06 	andeq	pc, r5, r6, lsl #30
    1340:	007a1800 	rsbseq	r1, sl, r0, lsl #16
    1344:	06240000 	strteq	r0, [r4], -r0
    1348:	6b190000 	blvs	641350 <__bss_end__+0x637c90>
    134c:	7f000000 	svcvc	0x00000000
    1350:	03641f00 	cmneq	r4, #0, 30
    1354:	1d030000 	stcne	0, cr0, [r3, #-0]
    1358:	00000379 	andeq	r0, r0, r9, ror r3
    135c:	00035f1f 	andeq	r5, r3, pc, lsl pc
    1360:	8e200300 	cdphi	3, 2, cr0, cr0, cr0, {0}
    1364:	20000003 	andcs	r0, r0, r3
    1368:	0000032f 	andeq	r0, r0, pc, lsr #6
    136c:	00252703 	eoreq	r2, r5, r3, lsl #14
    1370:	06500000 	ldrbeq	r0, [r0], -r0
    1374:	811c0000 	tsthi	ip, r0
    1378:	21000000 	mrscs	r0, (UNDEF: 0)
    137c:	000b2200 	andeq	r2, fp, r0, lsl #4
    1380:	5c030000 	stcpl	0, cr0, [r3], {-0}
    1384:	00010b00 	andeq	r0, r1, r0, lsl #22
    1388:	0d000400 	cfstrseq	mvf0, [r0, #-0]
    138c:	04000008 	streq	r0, [r0], #-8
    1390:	00001601 	andeq	r1, r0, r1, lsl #12
    1394:	03cf0100 	biceq	r0, pc, #0, 2
    1398:	02cb0000 	sbceq	r0, fp, #0
    139c:	894c0000 	stmdbhi	ip, {}^	; <UNPREDICTABLE>
    13a0:	00340000 	eorseq	r0, r4, r0
    13a4:	07a70000 	streq	r0, [r7, r0]!
    13a8:	04020000 	streq	r0, [r2], #-0
    13ac:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    13b0:	07040300 	streq	r0, [r4, -r0, lsl #6]
    13b4:	00000186 	andeq	r0, r0, r6, lsl #3
    13b8:	87060103 	strhi	r0, [r6, -r3, lsl #2]
    13bc:	03000000 	movweq	r0, #0
    13c0:	01dd0502 	bicseq	r0, sp, r2, lsl #10
    13c4:	04030000 	streq	r0, [r3], #-0
    13c8:	0001c005 	andeq	ip, r1, r5
    13cc:	05080300 	streq	r0, [r8, #-768]	; 0x300
    13d0:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    13d4:	85080103 	strhi	r0, [r8, #-259]	; 0x103
    13d8:	03000000 	movweq	r0, #0
    13dc:	009d0702 	addseq	r0, sp, r2, lsl #14
    13e0:	04030000 	streq	r0, [r3], #-0
    13e4:	00018107 	andeq	r8, r1, r7, lsl #2
    13e8:	07080300 	streq	r0, [r8, -r0, lsl #6]
    13ec:	0000017c 	andeq	r0, r0, ip, ror r1
    13f0:	aa070403 	bge	1c2404 <__bss_end__+0x1b8d44>
    13f4:	03000001 	movweq	r0, #1
    13f8:	008e0801 	addeq	r0, lr, r1, lsl #16
    13fc:	05040000 	streq	r0, [r4, #-0]
    1400:	01000004 	tsteq	r0, r4
    1404:	00894c03 	addeq	r4, r9, r3, lsl #24
    1408:	00003400 	andeq	r3, r0, r0, lsl #8
    140c:	de9c0100 	fmllee	f0, f4, f0
    1410:	05000000 	streq	r0, [r0, #-0]
    1414:	000003e3 	andeq	r0, r0, r3, ror #7
    1418:	00250401 	eoreq	r0, r5, r1, lsl #8
    141c:	f1050000 			; <UNDEFINED> instruction: 0xf1050000
    1420:	01000003 	tsteq	r0, r3
    1424:	00002504 	andeq	r2, r0, r4, lsl #10
    1428:	006d0600 	rsbeq	r0, sp, r0, lsl #12
    142c:	05010000 	streq	r0, [r1, #-0]
    1430:	000000b1 	strheq	r0, [r0], -r1
    1434:	62080007 	andvs	r0, r8, #7
    1438:	01007373 	tsteq	r0, r3, ror r3
    143c:	0000de07 	andeq	sp, r0, r7, lsl #28
    1440:	00097a00 	andeq	r7, r9, r0, lsl #20
    1444:	03fd0900 	mvnseq	r0, #0, 18
    1448:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    144c:	000000de 	ldrdeq	r0, [r0], -lr
    1450:	0089740a 	addeq	r7, r9, sl, lsl #8
    1454:	0000fa00 	andeq	pc, r0, r0, lsl #20
    1458:	89780a00 	ldmdbhi	r8!, {r9, fp}^
    145c:	01070000 	mrseq	r0, (UNDEF: 7)
    1460:	0b000000 	bleq	1468 <_start-0x6b98>
    1464:	00002504 	andeq	r2, r0, r4, lsl #10
    1468:	03e30500 	mvneq	r0, #0, 10
    146c:	04010000 	streq	r0, [r1], #-0
    1470:	00000025 	andeq	r0, r0, r5, lsr #32
    1474:	0003f105 	andeq	pc, r3, r5, lsl #2
    1478:	25040100 	strcs	r0, [r4, #-256]	; 0x100
    147c:	06000000 	streq	r0, [r0], -r0
    1480:	0000006d 	andeq	r0, r0, sp, rrx
    1484:	01070501 	tsteq	r7, r1, lsl #10
    1488:	00070000 	andeq	r0, r7, r0
    148c:	00000b0c 	andeq	r0, r0, ip, lsl #22
    1490:	005c0200 	subseq	r0, ip, r0, lsl #4
    1494:	000001ad 	andeq	r0, r0, sp, lsr #3
    1498:	08b70004 	ldmeq	r7!, {r2}
    149c:	01040000 	mrseq	r0, (UNDEF: 4)
    14a0:	00000016 	andeq	r0, r0, r6, lsl r0
    14a4:	00042701 	andeq	r2, r4, r1, lsl #14
    14a8:	0002cb00 	andeq	ip, r2, r0, lsl #22
	...
    14b4:	00084100 	andeq	r4, r8, r0, lsl #2
    14b8:	05040200 	streq	r0, [r4, #-512]	; 0x200
    14bc:	00746e69 	rsbseq	r6, r4, r9, ror #28
    14c0:	86070403 	strhi	r0, [r7], -r3, lsl #8
    14c4:	03000001 	movweq	r0, #1
    14c8:	00870601 	addeq	r0, r7, r1, lsl #12
    14cc:	02030000 	andeq	r0, r3, #0
    14d0:	0001dd05 	andeq	sp, r1, r5, lsl #26
    14d4:	05040300 	streq	r0, [r4, #-768]	; 0x300
    14d8:	000001c0 	andeq	r0, r0, r0, asr #3
    14dc:	bb050803 	bllt	1434f0 <__bss_end__+0x139e30>
    14e0:	03000001 	movweq	r0, #1
    14e4:	00850801 	addeq	r0, r5, r1, lsl #16
    14e8:	02030000 	andeq	r0, r3, #0
    14ec:	00009d07 	andeq	r9, r0, r7, lsl #26
    14f0:	07040300 	streq	r0, [r4, -r0, lsl #6]
    14f4:	00000181 	andeq	r0, r0, r1, lsl #3
    14f8:	7c070803 	stcvc	8, cr0, [r7], {3}
    14fc:	03000001 	movweq	r0, #1
    1500:	01aa0704 			; <UNDEFINED> instruction: 0x01aa0704
    1504:	01030000 	mrseq	r0, (UNDEF: 3)
    1508:	00008e08 	andeq	r8, r0, r8, lsl #28
    150c:	040d0400 	streq	r0, [sp], #-1024	; 0x400
    1510:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    1514:	00000025 	andeq	r0, r0, r5, lsr #32
    1518:	00008980 	andeq	r8, r0, r0, lsl #19
    151c:	00000018 	andeq	r0, r0, r8, lsl r0
    1520:	00a29c01 	adceq	r9, r2, r1, lsl #24
    1524:	82050000 	andhi	r0, r5, #0
    1528:	01000004 	tsteq	r0, r4
    152c:	00002c0f 	andeq	r2, r0, pc, lsl #24
    1530:	00099a00 	andeq	r9, r9, r0, lsl #20
    1534:	5c060000 	stcpl	0, cr0, [r6], {-0}
    1538:	01000004 	tsteq	r0, r4
    153c:	00899817 	addeq	r9, r9, r7, lsl r8
    1540:	00001400 	andeq	r1, r0, r0, lsl #8
    1544:	c79c0100 	ldrgt	r0, [ip, r0, lsl #2]
    1548:	05000000 	streq	r0, [r0, #-0]
    154c:	00000482 	andeq	r0, r0, r2, lsl #9
    1550:	002c1801 	eoreq	r1, ip, r1, lsl #16
    1554:	09b90000 	ldmibeq	r9!, {}	; <UNPREDICTABLE>
    1558:	06000000 	streq	r0, [r0], -r0
    155c:	0000000b 	andeq	r0, r0, fp
    1560:	89ac1f01 	stmibhi	ip!, {r0, r8, r9, sl, fp, ip}
    1564:	00480000 	subeq	r0, r8, r0
    1568:	9c010000 	stcls	0, cr0, [r1], {-0}
    156c:	00000177 	andeq	r0, r0, r7, ror r1
    1570:	00047a07 	andeq	r7, r4, r7, lsl #20
    1574:	772a0100 	strvc	r0, [sl, -r0, lsl #2]!
    1578:	1c000001 	stcne	0, cr0, [r0], {1}
    157c:	07201000 	streq	r1, [r0, -r0]!
    1580:	00000454 	andeq	r0, r0, r4, asr r4
    1584:	01772b01 	cmneq	r7, r1, lsl #22
    1588:	00240000 	eoreq	r0, r4, r0
    158c:	1b072010 	blne	1c95d4 <__bss_end__+0x1bff14>
    1590:	01000004 	tsteq	r0, r4
    1594:	0001772c 	andeq	r7, r1, ip, lsr #14
    1598:	00000000 	andeq	r0, r0, r0
    159c:	043b085a 	ldrteq	r0, [fp], #-2138	; 0x85a
    15a0:	2d010000 	stccs	0, cr0, [r1, #-0]
    15a4:	00000177 	andeq	r0, r0, r7, ror r1
    15a8:	89b40920 	ldmibhi	r4!, {r5, r8, fp}
    15ac:	00790000 	rsbseq	r0, r9, r0
    15b0:	c0090000 	andgt	r0, r9, r0
    15b4:	a2000089 	andge	r0, r0, #137	; 0x89
    15b8:	0a000000 	beq	15c0 <_start-0x6a40>
    15bc:	000089c8 	andeq	r8, r0, r8, asr #19
    15c0:	0000018d 	andeq	r0, r0, sp, lsl #3
    15c4:	0000013a 	andeq	r0, r0, sl, lsr r1
    15c8:	0150010b 	cmpeq	r0, fp, lsl #2
    15cc:	d40a004e 	strle	r0, [sl], #-78	; 0x4e
    15d0:	9e000089 	cdpls	0, 0, cr0, cr0, cr9, {4}
    15d4:	5a000001 	bpl	15e0 <_start-0x6a20>
    15d8:	0b000001 	bleq	15e4 <_start-0x6a1c>
    15dc:	0c055101 	stfeqs	f5, [r5], {1}
    15e0:	5a000001 	bpl	15ec <_start-0x6a14>
    15e4:	0550010b 	ldrbeq	r0, [r0, #-267]	; 0x10b
    15e8:	1000240c 	andne	r2, r0, ip, lsl #8
    15ec:	e00c0020 	and	r0, ip, r0, lsr #32
    15f0:	9e000089 	cdpls	0, 0, cr0, cr0, cr9, {4}
    15f4:	0b000001 	bleq	1600 <_start-0x6a00>
    15f8:	0c055101 	stfeqs	f5, [r5], {1}
    15fc:	5a000020 	bpl	1684 <_start-0x697c>
    1600:	0550010b 	ldrbeq	r0, [r0, #-267]	; 0x10b
    1604:	10001c0c 	andne	r1, r0, ip, lsl #24
    1608:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    160c:	00000025 	andeq	r0, r0, r5, lsr #32
    1610:	00041008 	andeq	r1, r4, r8
    1614:	880d0100 	stmdahi	sp, {r8}
    1618:	10000001 	andne	r0, r0, r1
    161c:	00002c0d 	andeq	r2, r0, sp, lsl #24
    1620:	04710e00 	ldrbteq	r0, [r1], #-3584	; 0xe00
    1624:	4d020000 	stcmi	0, cr0, [r2, #-0]
    1628:	0000019e 	muleq	r0, lr, r1
    162c:	00002c0f 	andeq	r2, r0, pc, lsl #24
    1630:	6b100000 	blvs	401638 <__bss_end__+0x3f7f78>
    1634:	02000004 	andeq	r0, r0, #4
    1638:	002c0f90 	mlaeq	ip, r0, pc, r0	; <UNPREDICTABLE>
    163c:	2c0f0000 	stccs	0, cr0, [pc], {-0}
    1640:	00000000 	andeq	r0, r0, r0
    1644:	0001aa00 	andeq	sl, r1, r0, lsl #20
    1648:	a5000400 	strge	r0, [r0, #-1024]	; 0x400
    164c:	04000009 	streq	r0, [r0], #-9
    1650:	00001601 	andeq	r1, r0, r1, lsl #12
    1654:	04910100 	ldreq	r0, [r1], #256	; 0x100
    1658:	02cb0000 	sbceq	r0, fp, #0
    165c:	89f40000 	ldmibhi	r4!, {}^	; <UNPREDICTABLE>
    1660:	007c0000 	rsbseq	r0, ip, r0
    1664:	08de0000 	ldmeq	lr, {}^	; <UNPREDICTABLE>
    1668:	04020000 	streq	r0, [r2], #-0
    166c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    1670:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1674:	00000186 	andeq	r0, r0, r6, lsl #3
    1678:	87060103 	strhi	r0, [r6, -r3, lsl #2]
    167c:	03000000 	movweq	r0, #0
    1680:	01dd0502 	bicseq	r0, sp, r2, lsl #10
    1684:	04030000 	streq	r0, [r3], #-0
    1688:	0001c005 	andeq	ip, r1, r5
    168c:	05080300 	streq	r0, [r8, #-768]	; 0x300
    1690:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    1694:	85080103 	strhi	r0, [r8, #-259]	; 0x103
    1698:	03000000 	movweq	r0, #0
    169c:	009d0702 	addseq	r0, sp, r2, lsl #14
    16a0:	04030000 	streq	r0, [r3], #-0
    16a4:	00018107 	andeq	r8, r1, r7, lsl #2
    16a8:	07080300 	streq	r0, [r8, -r0, lsl #6]
    16ac:	0000017c 	andeq	r0, r0, ip, ror r1
    16b0:	aa070403 	bge	1c26c4 <__bss_end__+0x1b9004>
    16b4:	03000001 	movweq	r0, #1
    16b8:	008e0801 	addeq	r0, lr, r1, lsl #16
    16bc:	b0040000 	andlt	r0, r4, r0
    16c0:	01000004 	tsteq	r0, r4
    16c4:	0089f405 	addeq	pc, r9, r5, lsl #8
    16c8:	00001c00 	andeq	r1, r0, r0, lsl #24
    16cc:	9e9c0100 	fmllse	f0, f4, f0
    16d0:	05000000 	streq	r0, [r0, #-0]
    16d4:	000004aa 	andeq	r0, r0, sl, lsr #9
    16d8:	002c0501 	eoreq	r0, ip, r1, lsl #10
    16dc:	09e30000 	stmibeq	r3!, {}^	; <UNPREDICTABLE>
    16e0:	06000000 	streq	r0, [r0], -r0
    16e4:	0000015f 	andeq	r0, r0, pc, asr r1
    16e8:	002c0b01 	eoreq	r0, ip, r1, lsl #22
    16ec:	8a100000 	bhi	4016f4 <__bss_end__+0x3f8034>
    16f0:	00140000 	andseq	r0, r4, r0
    16f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    16f8:	000000cb 	andeq	r0, r0, fp, asr #1
    16fc:	008a1c07 	addeq	r1, sl, r7, lsl #24
    1700:	00019c00 	andeq	r9, r1, r0, lsl #24
    1704:	50010800 	andpl	r0, r1, r0, lsl #16
    1708:	30040c05 	andcc	r0, r4, r5, lsl #24
    170c:	00002000 	andeq	r2, r0, r0
    1710:	0004bd04 	andeq	fp, r4, r4, lsl #26
    1714:	240f0100 	strcs	r0, [pc], #-256	; 171c <_start-0x68e4>
    1718:	2400008a 	strcs	r0, [r0], #-138	; 0x8a
    171c:	01000000 	mrseq	r0, (UNDEF: 0)
    1720:	0001299c 	muleq	r1, ip, r9
    1724:	73750900 	cmnvc	r5, #0, 18
    1728:	2c0f0100 	stfcss	f0, [pc], {-0}
    172c:	17000000 	strne	r0, [r0, -r0]
    1730:	0a00000a 	beq	1760 <_start-0x68a0>
    1734:	01006272 	tsteq	r0, r2, ror r2
    1738:	00002c10 	andeq	r2, r0, r0, lsl ip
    173c:	0b540100 	bleq	1501b44 <__bss_end__+0x14f8484>
    1740:	00008a34 	andeq	r8, r0, r4, lsr sl
    1744:	00000010 	andeq	r0, r0, r0, lsl r0
    1748:	0000011f 	andeq	r0, r0, pc, lsl r1
    174c:	0061720c 	rsbeq	r7, r1, ip, lsl #4
    1750:	002c1201 	eoreq	r1, ip, r1, lsl #4
    1754:	0a350000 	beq	d4175c <__bss_end__+0xd3809c>
    1758:	380d0000 	stmdacc	sp, {}	; <UNPREDICTABLE>
    175c:	9e00008a 	cdpls	0, 0, cr0, cr0, cr10, {4}
    1760:	00000000 	andeq	r0, r0, r0
    1764:	008a300d 	addeq	r3, sl, sp
    1768:	00009e00 	andeq	r9, r0, r0, lsl #28
    176c:	71040000 	mrsvc	r0, (UNDEF: 4)
    1770:	01000004 	tsteq	r0, r4
    1774:	008a4818 	addeq	r4, sl, r8, lsl r8
    1778:	00001400 	andeq	r1, r0, r0, lsl #8
    177c:	629c0100 	addsvs	r0, ip, #0, 2
    1780:	09000001 	stmdbeq	r0, {r0}
    1784:	0100736d 	tsteq	r0, sp, ror #6
    1788:	00002c18 	andeq	r2, r0, r8, lsl ip
    178c:	000a4800 	andeq	r4, sl, r0, lsl #16
    1790:	8a580700 	bhi	1603398 <__bss_end__+0x15f9cd8>
    1794:	00cb0000 	sbceq	r0, fp, r0
    1798:	01080000 	mrseq	r0, (UNDEF: 8)
    179c:	01f30750 	mvnseq	r0, r0, asr r7
    17a0:	03e80a50 	mvneq	r0, #80, 20	; 0x50000
    17a4:	0400001e 	streq	r0, [r0], #-30
    17a8:	00000487 	andeq	r0, r0, r7, lsl #9
    17ac:	8a5c1b01 	bhi	17083b8 <__bss_end__+0x16fecf8>
    17b0:	00140000 	andseq	r0, r4, r0
    17b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    17b8:	0000019c 	muleq	r0, ip, r1
    17bc:	63657309 	cmnvs	r5, #603979776	; 0x24000000
    17c0:	2c1b0100 	ldfcss	f0, [fp], {-0}
    17c4:	69000000 	stmdbvs	r0, {}	; <UNPREDICTABLE>
    17c8:	0700000a 	streq	r0, [r0, -sl]
    17cc:	00008a6c 	andeq	r8, r0, ip, ror #20
    17d0:	00000129 	andeq	r0, r0, r9, lsr #2
    17d4:	07500108 	ldrbeq	r0, [r0, -r8, lsl #2]
    17d8:	0a5001f3 	beq	1401fac <__bss_end__+0x13f88ec>
    17dc:	001e03e8 	andseq	r0, lr, r8, ror #7
    17e0:	04a40e00 	strteq	r0, [r4], #3584	; 0xe00
    17e4:	9c020000 	stcls	0, cr0, [r2], {-0}
    17e8:	0000002c 	andeq	r0, r0, ip, lsr #32
    17ec:	00002c0f 	andeq	r2, r0, pc, lsl #24
    17f0:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    17f4:	04000003 	streq	r0, [r0], #-3
    17f8:	000a8800 	andeq	r8, sl, r0, lsl #16
    17fc:	16010400 	strne	r0, [r1], -r0, lsl #8
    1800:	01000000 	mrseq	r0, (UNDEF: 0)
    1804:	000004e9 	andeq	r0, r0, r9, ror #9
    1808:	000002cb 	andeq	r0, r0, fp, asr #5
    180c:	00008d48 	andeq	r8, r0, r8, asr #26
    1810:	00000178 	andeq	r0, r0, r8, ror r1
    1814:	00000982 	andeq	r0, r0, r2, lsl #19
    1818:	69050402 	stmdbvs	r5, {r1, sl}
    181c:	0300746e 	movweq	r7, #1134	; 0x46e
    1820:	00000218 	andeq	r0, r0, r8, lsl r2
    1824:	0037d402 	eorseq	sp, r7, r2, lsl #8
    1828:	04040000 	streq	r0, [r4], #-0
    182c:	00018607 	andeq	r8, r1, r7, lsl #12
    1830:	06010400 	streq	r0, [r1], -r0, lsl #8
    1834:	00000087 	andeq	r0, r0, r7, lsl #1
    1838:	dd050204 	sfmle	f0, 4, [r5, #-16]
    183c:	04000001 	streq	r0, [r0], #-1
    1840:	01c00504 	biceq	r0, r0, r4, lsl #10
    1844:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    1848:	0001bb05 	andeq	fp, r1, r5, lsl #22
    184c:	08010400 	stmdaeq	r1, {sl}
    1850:	00000085 	andeq	r0, r0, r5, lsl #1
    1854:	9d070204 	sfmls	f0, 4, [r7, #-16]
    1858:	04000000 	streq	r0, [r0], #-0
    185c:	01810704 	orreq	r0, r1, r4, lsl #14
    1860:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    1864:	00017c07 	andeq	r7, r1, r7, lsl #24
    1868:	07040400 	streq	r0, [r4, -r0, lsl #8]
    186c:	000001aa 	andeq	r0, r0, sl, lsr #3
    1870:	04060405 	streq	r0, [r6], #-1029	; 0x405
    1874:	00000085 	andeq	r0, r0, r5, lsl #1
    1878:	8e080104 	adfhie	f0, f0, f4
    187c:	06000000 	streq	r0, [r0], -r0
    1880:	00009204 	andeq	r9, r0, r4, lsl #4
    1884:	00850700 	addeq	r0, r5, r0, lsl #14
    1888:	85080000 	strhi	r0, [r8, #-0]
    188c:	a7000000 	strge	r0, [r0, -r0]
    1890:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1894:	00000076 	andeq	r0, r0, r6, ror r0
    1898:	e10a0007 	tst	sl, r7
    189c:	01000004 	tsteq	r0, r4
    18a0:	00007d19 	andeq	r7, r0, r9, lsl sp
    18a4:	008d4800 	addeq	r4, sp, r0, lsl #16
    18a8:	00006400 	andeq	r6, r0, r0, lsl #8
    18ac:	5c9c0100 	ldfpls	f0, [ip], {0}
    18b0:	0b000001 	bleq	18bc <_start-0x6744>
    18b4:	00000513 	andeq	r0, r0, r3, lsl r5
    18b8:	00371901 	eorseq	r1, r7, r1, lsl #18
    18bc:	0a8a0000 	beq	fe2818c4 <__bss_end__+0xfe278204>
    18c0:	520c0000 	andpl	r0, ip, #0
    18c4:	5c000001 	stcpl	0, cr0, [r0], {1}
    18c8:	05000001 	streq	r0, [r0, #-1]
    18cc:	00918803 	addseq	r8, r1, r3, lsl #16
    18d0:	053a0d00 	ldreq	r0, [sl, #-3328]!	; 0xd00
    18d4:	1c010000 	stcne	0, cr0, [r1], {-0}
    18d8:	0000007d 	andeq	r0, r0, sp, ror r0
    18dc:	0b0e5401 	bleq	3968e8 <__bss_end__+0x38d228>
    18e0:	01000005 	tsteq	r0, r5
    18e4:	0000371d 	andeq	r3, r0, sp, lsl r7
    18e8:	000ac400 	andeq	ip, sl, r0, lsl #8
    18ec:	8d700f00 	ldclhi	15, cr0, [r0, #-0]
    18f0:	03130000 	tsteq	r3, #0
    18f4:	01280000 	teqeq	r8, r0
    18f8:	01100000 	tsteq	r0, r0
    18fc:	104a0153 	subne	r0, sl, r3, asr r1
    1900:	03055201 	movweq	r5, #20993	; 0x5201
    1904:	00009188 	andeq	r9, r0, r8, lsl #3
    1908:	05510110 	ldrbeq	r0, [r1, #-272]	; 0x110
    190c:	0091f003 	addseq	pc, r1, r3
    1910:	50011000 	andpl	r1, r1, r0
    1914:	91b00305 	lslsls	r0, r5, #6
    1918:	11000000 	mrsne	r0, (UNDEF: 0)
    191c:	00008d74 	andeq	r8, r0, r4, ror sp
    1920:	00000329 	andeq	r0, r0, r9, lsr #6
    1924:	008d9412 	addeq	r9, sp, r2, lsl r4
    1928:	00033000 	andeq	r3, r3, r0
    192c:	52011000 	andpl	r1, r1, #0
    1930:	5001f308 	andpl	pc, r1, r8, lsl #6
    1934:	fc090323 	stc2	3, cr0, [r9], {35}	; 0x23
    1938:	5101101a 	tstpl	r1, sl, lsl r0
    193c:	01103001 	tsteq	r0, r1
    1940:	01f30b50 	mvnseq	r0, r0, asr fp
    1944:	09032350 	stmdbeq	r3, {r4, r6, r8, r9, sp}
    1948:	00741afc 	ldrshteq	r1, [r4], #-172	; 0xffffff54
    194c:	07000022 	streq	r0, [r0, -r2, lsr #32]
    1950:	00000097 	muleq	r0, r7, r0
    1954:	0002250a 	andeq	r2, r2, sl, lsl #10
    1958:	7d260100 	stfvcs	f0, [r6, #-0]
    195c:	ac000000 	stcge	0, cr0, [r0], {-0}
    1960:	9400008d 	strls	r0, [r0], #-141	; 0x8d
    1964:	01000000 	mrseq	r0, (UNDEF: 0)
    1968:	0002399c 	muleq	r2, ip, r9
    196c:	05130b00 	ldreq	r0, [r3, #-2816]	; 0xb00
    1970:	26010000 	strcs	r0, [r1], -r0
    1974:	00000037 	andeq	r0, r0, r7, lsr r0
    1978:	00000aea 	andeq	r0, r0, sl, ror #21
    197c:	0005010b 	andeq	r0, r5, fp, lsl #2
    1980:	37260100 	strcc	r0, [r6, -r0, lsl #2]!
    1984:	56000000 	strpl	r0, [r0], -r0
    1988:	0c00000b 	stceq	0, cr0, [r0], {11}
    198c:	00000152 	andeq	r0, r0, r2, asr r1
    1990:	00000249 	andeq	r0, r0, r9, asr #4
    1994:	91900305 	orrsls	r0, r0, r5, lsl #6
    1998:	d00e0000 	andle	r0, lr, r0
    199c:	01000004 	tsteq	r0, r4
    19a0:	0000372c 	andeq	r3, r0, ip, lsr #14
    19a4:	000bd000 	andeq	sp, fp, r0
    19a8:	8dd40f00 	ldclhi	15, cr0, [r4]
    19ac:	03130000 	tsteq	r3, #0
    19b0:	01e50000 	mvneq	r0, r0
    19b4:	01100000 	tsteq	r0, r0
    19b8:	27080253 	smlsdcs	r8, r3, r2, r0
    19bc:	05520110 	ldrbeq	r0, [r2, #-272]	; 0x110
    19c0:	00919003 	addseq	r9, r1, r3
    19c4:	51011000 	mrspl	r1, (UNDEF: 1)
    19c8:	91f00305 	mvnsls	r0, r5, lsl #6
    19cc:	01100000 	tsteq	r0, r0
    19d0:	b0030550 	andlt	r0, r3, r0, asr r5
    19d4:	00000091 	muleq	r0, r1, r0
    19d8:	008dd811 	addeq	sp, sp, r1, lsl r8
    19dc:	00032900 	andeq	r2, r3, r0, lsl #18
    19e0:	8de41100 	stfhie	f1, [r4]
    19e4:	00a70000 	adceq	r0, r7, r0
    19e8:	040f0000 	streq	r0, [pc], #-0	; 19f0 <_start-0x6610>
    19ec:	1300008e 	movwne	r0, #142	; 0x8e
    19f0:	26000003 	strcs	r0, [r0], -r3
    19f4:	10000002 	andne	r0, r0, r2
    19f8:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    19fc:	5201102b 	andpl	r1, r1, #43	; 0x2b
    1a00:	91900305 	orrsls	r0, r0, r5, lsl #6
    1a04:	01100000 	tsteq	r0, r0
    1a08:	f0030551 			; <UNDEFINED> instruction: 0xf0030551
    1a0c:	10000091 	mulne	r0, r1, r0
    1a10:	03055001 	movweq	r5, #20481	; 0x5001
    1a14:	00009204 	andeq	r9, r0, r4, lsl #4
    1a18:	8e081100 	adfhie	f1, f0, f0
    1a1c:	03290000 	teqeq	r9, #0
    1a20:	28110000 	ldmdacs	r1, {}	; <UNPREDICTABLE>
    1a24:	a700008e 	strge	r0, [r0, -lr, lsl #1]
    1a28:	00000000 	andeq	r0, r0, r0
    1a2c:	00008508 	andeq	r8, r0, r8, lsl #10
    1a30:	00024900 	andeq	r4, r2, r0, lsl #18
    1a34:	00760900 	rsbseq	r0, r6, r0, lsl #18
    1a38:	000f0000 	andeq	r0, pc, r0
    1a3c:	00023907 	andeq	r3, r2, r7, lsl #18
    1a40:	01f01300 	mvnseq	r1, r0, lsl #6
    1a44:	3b010000 	blcc	41a4c <__bss_end__+0x3838c>
    1a48:	00008e40 	andeq	r8, r0, r0, asr #28
    1a4c:	00000058 	andeq	r0, r0, r8, asr r0
    1a50:	02ab9c01 	adceq	r9, fp, #256	; 0x100
    1a54:	520c0000 	andpl	r0, ip, #0
    1a58:	bb000001 	bllt	1a64 <_start-0x659c>
    1a5c:	05000002 	streq	r0, [r0, #-2]
    1a60:	0091a003 	addseq	sl, r1, r3
    1a64:	8e680f00 	cdphi	15, 6, cr0, cr8, cr0, {0}
    1a68:	03130000 	tsteq	r3, #0
    1a6c:	02a10000 	adceq	r0, r1, #0
    1a70:	01100000 	tsteq	r0, r0
    1a74:	3c080253 	sfmcc	f0, 4, [r8], {83}	; 0x53
    1a78:	05520110 	ldrbeq	r0, [r2, #-272]	; 0x110
    1a7c:	0091a003 	addseq	sl, r1, r3
    1a80:	51011000 	mrspl	r1, (UNDEF: 1)
    1a84:	91f00305 	mvnsls	r0, r5, lsl #6
    1a88:	01100000 	tsteq	r0, r0
    1a8c:	5c030550 	cfstr32pl	mvfx0, [r3], {80}	; 0x50
    1a90:	00000092 	muleq	r0, r2, r0
    1a94:	008e6c11 	addeq	r6, lr, r1, lsl ip
    1a98:	00032900 	andeq	r2, r3, r0, lsl #18
    1a9c:	85080000 	strhi	r0, [r8, #-0]
    1aa0:	bb000000 	bllt	1aa8 <_start-0x6558>
    1aa4:	09000002 	stmdbeq	r0, {r1}
    1aa8:	00000076 	andeq	r0, r0, r6, ror r0
    1aac:	ab07000c 	blge	1c1ae4 <__bss_end__+0x1b8424>
    1ab0:	14000002 	strne	r0, [r0], #-2
    1ab4:	000004c6 	andeq	r0, r0, r6, asr #9
    1ab8:	8e984501 	cdphi	5, 9, cr4, cr8, cr1, {0}
    1abc:	00180000 	andseq	r0, r8, r0
    1ac0:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ac4:	00051a15 	andeq	r1, r5, r5, lsl sl
    1ac8:	7d4e0100 	stfvce	f0, [lr, #-0]
    1acc:	b0000000 	andlt	r0, r0, r0
    1ad0:	1000008e 	andne	r0, r0, lr, lsl #1
    1ad4:	01000000 	mrseq	r0, (UNDEF: 0)
    1ad8:	04fa0d9c 	ldrbteq	r0, [sl], #3484	; 0xd9c
    1adc:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    1ae0:	00000025 	andeq	r0, r0, r5, lsr #32
    1ae4:	96b40305 	ldrtls	r0, [r4], r5, lsl #6
    1ae8:	220d0000 	andcs	r0, sp, #0
    1aec:	01000005 	tsteq	r0, r5
    1af0:	00007f0b 	andeq	r7, r0, fp, lsl #30
    1af4:	b8030500 	stmdalt	r3, {r8, sl}
    1af8:	16000096 			; <UNDEFINED> instruction: 0x16000096
    1afc:	0000052b 	andeq	r0, r0, fp, lsr #10
    1b00:	00850501 	addeq	r0, r5, r1, lsl #10
    1b04:	2f170000 	svccs	0x00170000
    1b08:	03000003 	movweq	r0, #3
    1b0c:	00002527 	andeq	r2, r0, r7, lsr #10
    1b10:	00032900 	andeq	r2, r3, r0, lsl #18
    1b14:	008c1800 	addeq	r1, ip, r0, lsl #16
    1b18:	00190000 	andseq	r0, r9, r0
    1b1c:	00000b1a 	andeq	r0, r0, sl, lsl fp
    1b20:	1b5c0300 	blne	1702728 <__bss_end__+0x16f9068>
    1b24:	0000026f 	andeq	r0, r0, pc, ror #4
    1b28:	007d1b04 	rsbseq	r1, sp, r4, lsl #22
    1b2c:	7d180000 	ldcvc	0, cr0, [r8, #-0]
    1b30:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1b34:	00000025 	andeq	r0, r0, r5, lsr #32
    1b38:	00002c18 	andeq	r2, r0, r8, lsl ip
    1b3c:	e0000000 	and	r0, r0, r0
    1b40:	04000000 	streq	r0, [r0], #-0
    1b44:	000c0f00 	andeq	r0, ip, r0, lsl #30
    1b48:	16010400 	strne	r0, [r1], -r0, lsl #8
    1b4c:	01000000 	mrseq	r0, (UNDEF: 0)
    1b50:	00000561 	andeq	r0, r0, r1, ror #10
    1b54:	000002cb 	andeq	r0, r0, fp, asr #5
    1b58:	00008ec0 	andeq	r8, r0, r0, asr #29
    1b5c:	00000014 	andeq	r0, r0, r4, lsl r0
    1b60:	00000af1 	strdeq	r0, [r0], -r1
    1b64:	69050402 	stmdbvs	r5, {r1, sl}
    1b68:	0300746e 	movweq	r7, #1134	; 0x46e
    1b6c:	01860704 	orreq	r0, r6, r4, lsl #14
    1b70:	01030000 	mrseq	r0, (UNDEF: 3)
    1b74:	00008706 	andeq	r8, r0, r6, lsl #14
    1b78:	05020300 	streq	r0, [r2, #-768]	; 0x300
    1b7c:	000001dd 	ldrdeq	r0, [r0], -sp
    1b80:	c0050403 	andgt	r0, r5, r3, lsl #8
    1b84:	03000001 	movweq	r0, #1
    1b88:	01bb0508 			; <UNDEFINED> instruction: 0x01bb0508
    1b8c:	01030000 	mrseq	r0, (UNDEF: 3)
    1b90:	00008508 	andeq	r8, r0, r8, lsl #10
    1b94:	07020300 	streq	r0, [r2, -r0, lsl #6]
    1b98:	0000009d 	muleq	r0, sp, r0
    1b9c:	81070403 	tsthi	r7, r3, lsl #8
    1ba0:	03000001 	movweq	r0, #1
    1ba4:	017c0708 	cmneq	ip, r8, lsl #14
    1ba8:	04030000 	streq	r0, [r3], #-0
    1bac:	0001aa07 	andeq	sl, r1, r7, lsl #20
    1bb0:	08010300 	stmdaeq	r1, {r8, r9}
    1bb4:	0000008e 	andeq	r0, r0, lr, lsl #1
    1bb8:	00055004 	andeq	r5, r5, r4
    1bbc:	25030100 	strcs	r0, [r3, #-256]	; 0x100
    1bc0:	c0000000 	andgt	r0, r0, r0
    1bc4:	1400008e 	strne	r0, [r0], #-142	; 0x8e
    1bc8:	01000000 	mrseq	r0, (UNDEF: 0)
    1bcc:	0000b09c 	muleq	r0, ip, r0
    1bd0:	00630500 	rsbeq	r0, r3, r0, lsl #10
    1bd4:	00250301 	eoreq	r0, r5, r1, lsl #6
    1bd8:	0bfd0000 	bleq	fff41be0 <__bss_end__+0xfff38520>
    1bdc:	cc060000 	stcgt	0, cr0, [r6], {-0}
    1be0:	d600008e 	strle	r0, [r0], -lr, lsl #1
    1be4:	07000000 	streq	r0, [r0, -r0]
    1be8:	74025001 	strvc	r5, [r2], #-1
    1bec:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1bf0:	00000025 	andeq	r0, r0, r5, lsr #32
    1bf4:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    1bf8:	00002509 	andeq	r2, r0, r9, lsl #10
    1bfc:	640a0000 	strvs	r0, [sl], #-0
    1c00:	01000003 	tsteq	r0, r3
    1c04:	0000d006 	andeq	sp, r0, r6
    1c08:	f0030500 			; <UNDEFINED> instruction: 0xf0030500
    1c0c:	0b00008e 	bleq	1e4c <_start-0x61b4>
    1c10:	0000b004 	andeq	fp, r0, r4
    1c14:	05460c00 	strbeq	r0, [r6, #-3072]	; 0xc00
    1c18:	3a020000 	bcc	81c20 <__bss_end__+0x78560>
    1c1c:	00002c09 	andeq	r2, r0, r9, lsl #24
    1c20:	Address 0x0000000000001c20 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <__bss_end__+0x2b69ec>
  18:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  1c:	24030000 	strcs	r0, [r3], #-0
  20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  24:	000e030b 	andeq	r0, lr, fp, lsl #6
  28:	00160400 	andseq	r0, r6, r0, lsl #8
  2c:	0b3a0e03 	bleq	e83840 <__bss_end__+0xe7a180>
  30:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  34:	0f050000 	svceq	0x00050000
  38:	000b0b00 	andeq	r0, fp, r0, lsl #22
  3c:	000f0600 	andeq	r0, pc, r0, lsl #12
  40:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  44:	26070000 	strcs	r0, [r7], -r0
  48:	00134900 	andseq	r4, r3, r0, lsl #18
  4c:	01010800 	tsteq	r1, r0, lsl #16
  50:	13011349 	movwne	r1, #4937	; 0x1349
  54:	21090000 	mrscs	r0, (UNDEF: 9)
  58:	2f134900 	svccs	0x00134900
  5c:	0a00000b 	beq	90 <_start-0x7f70>
  60:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
  64:	0b3a050b 	bleq	e81498 <__bss_end__+0xe77dd8>
  68:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  6c:	0d0b0000 	stceq	0, cr0, [fp, #-0]
  70:	3a0e0300 	bcc	380c78 <__bss_end__+0x3775b8>
  74:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  78:	000b3813 	andeq	r3, fp, r3, lsl r8
  7c:	000d0c00 	andeq	r0, sp, r0, lsl #24
  80:	0b3a0803 	bleq	e82094 <__bss_end__+0xe789d4>
  84:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  88:	00000b38 	andeq	r0, r0, r8, lsr fp
  8c:	4900210d 	stmdbmi	r0, {r0, r2, r3, r8, sp}
  90:	00052f13 	andeq	r2, r5, r3, lsl pc
  94:	01130e00 	tsteq	r3, r0, lsl #28
  98:	0b0b0803 	bleq	2c20ac <__bss_end__+0x2b89ec>
  9c:	0b3b0b3a 	bleq	ec2d8c <__bss_end__+0xeb96cc>
  a0:	00001301 	andeq	r1, r0, r1, lsl #6
  a4:	03012e0f 	movweq	r2, #7695	; 0x1e0f
  a8:	3b0b3a0e 	blcc	2ce8e8 <__bss_end__+0x2c5228>
  ac:	1119270b 	tstne	r9, fp, lsl #14
  b0:	40061201 	andmi	r1, r6, r1, lsl #4
  b4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  b8:	00001301 	andeq	r1, r0, r1, lsl #6
  bc:	03000510 	movweq	r0, #1296	; 0x510
  c0:	3b0b3a08 	blcc	2ce8e8 <__bss_end__+0x2c5228>
  c4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  c8:	11000017 	tstne	r0, r7, lsl r0
  cc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  d0:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
  d4:	00001802 	andeq	r1, r0, r2, lsl #16
  d8:	03003412 	movweq	r3, #1042	; 0x412
  dc:	3b0b3a0e 	blcc	2ce91c <__bss_end__+0x2c525c>
  e0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  e4:	13000017 	movwne	r0, #23
  e8:	01018289 	smlabbeq	r1, r9, r2, r8
  ec:	13310111 	teqne	r1, #1073741828	; 0x40000004
  f0:	00001301 	andeq	r1, r0, r1, lsl #6
  f4:	01828a14 	orreq	r8, r2, r4, lsl sl
  f8:	91180200 	tstls	r8, r0, lsl #4
  fc:	00001842 	andeq	r1, r0, r2, asr #16
 100:	01828915 	orreq	r8, r2, r5, lsl r9
 104:	31011100 	mrscc	r1, (UNDEF: 17)
 108:	16000013 			; <UNDEFINED> instruction: 0x16000013
 10c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 110:	0b3a0e03 	bleq	e83924 <__bss_end__+0xe7a264>
 114:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 118:	06120111 			; <UNDEFINED> instruction: 0x06120111
 11c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 120:	00130119 	andseq	r0, r3, r9, lsl r1
 124:	00341700 	eorseq	r1, r4, r0, lsl #14
 128:	0b3a0803 	bleq	e8213c <__bss_end__+0xe78a7c>
 12c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 130:	00001702 	andeq	r1, r0, r2, lsl #14
 134:	03003418 	movweq	r3, #1048	; 0x418
 138:	3b0b3a0e 	blcc	2ce978 <__bss_end__+0x2c52b8>
 13c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 140:	19000018 	stmdbne	r0, {r3, r4}
 144:	01018289 	smlabbeq	r1, r9, r2, r8
 148:	13310111 	teqne	r1, #1073741828	; 0x40000004
 14c:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
 150:	03193f01 	tsteq	r9, #1, 30
 154:	3b0b3a0e 	blcc	2ce994 <__bss_end__+0x2c52d4>
 158:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 15c:	01193c13 	tsteq	r9, r3, lsl ip
 160:	1b000013 	blne	1b4 <_start-0x7e4c>
 164:	13490005 	movtne	r0, #36869	; 0x9005
 168:	181c0000 	ldmdane	ip, {}	; <UNPREDICTABLE>
 16c:	1d000000 	stcne	0, cr0, [r0, #-0]
 170:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 174:	0b3a0e03 	bleq	e83988 <__bss_end__+0xe7a2c8>
 178:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 17c:	0000193c 	andeq	r1, r0, ip, lsr r9
 180:	3f002e1e 	svccc	0x00002e1e
 184:	3a0e0319 	bcc	380df0 <__bss_end__+0x377730>
 188:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 18c:	3c134919 	ldccc	9, cr4, [r3], {25}
 190:	1f000019 	svcne	0x00000019
 194:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 198:	0b3a0e03 	bleq	e839ac <__bss_end__+0xe7a2ec>
 19c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1a0:	1301193c 	movwne	r1, #6460	; 0x193c
 1a4:	15200000 	strne	r0, [r0, #-0]!
 1a8:	01192701 	tsteq	r9, r1, lsl #14
 1ac:	00000013 	andeq	r0, r0, r3, lsl r0
 1b0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 1b4:	030b130e 	movweq	r1, #45838	; 0xb30e
 1b8:	110e1b0e 	tstne	lr, lr, lsl #22
 1bc:	10061201 	andne	r1, r6, r1, lsl #4
 1c0:	02000017 	andeq	r0, r0, #23
 1c4:	0b0b0024 	bleq	2c025c <__bss_end__+0x2b6b9c>
 1c8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 1cc:	16030000 	strne	r0, [r3], -r0
 1d0:	3a0e0300 	bcc	380dd8 <__bss_end__+0x377718>
 1d4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1d8:	04000013 	streq	r0, [r0], #-19
 1dc:	0b0b0024 	bleq	2c0274 <__bss_end__+0x2b6bb4>
 1e0:	0e030b3e 	vmoveq.16	d3[0], r0
 1e4:	0f050000 	svceq	0x00050000
 1e8:	000b0b00 	andeq	r0, fp, r0, lsl #22
 1ec:	000f0600 	andeq	r0, pc, r0, lsl #12
 1f0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 1f4:	26070000 	strcs	r0, [r7], -r0
 1f8:	00134900 	andseq	r4, r3, r0, lsl #18
 1fc:	01130800 	tsteq	r3, r0, lsl #16
 200:	050b0e03 	streq	r0, [fp, #-3587]	; 0xe03
 204:	0b3b0b3a 	bleq	ec2ef4 <__bss_end__+0xeb9834>
 208:	00001301 	andeq	r1, r0, r1, lsl #6
 20c:	03000d09 	movweq	r0, #3337	; 0xd09
 210:	3b0b3a0e 	blcc	2cea50 <__bss_end__+0x2c5390>
 214:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 218:	0a00000b 	beq	24c <_start-0x7db4>
 21c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 220:	0b3b0b3a 	bleq	ec2f10 <__bss_end__+0xeb9850>
 224:	0b381349 	bleq	e04f50 <__bss_end__+0xdfb890>
 228:	010b0000 	mrseq	r0, (UNDEF: 11)
 22c:	01134901 	tsteq	r3, r1, lsl #18
 230:	0c000013 	stceq	0, cr0, [r0], {19}
 234:	13490021 	movtne	r0, #36897	; 0x9021
 238:	00000b2f 	andeq	r0, r0, pc, lsr #22
 23c:	4900210d 	stmdbmi	r0, {r0, r2, r3, r8, sp}
 240:	00052f13 	andeq	r2, r5, r3, lsl pc
 244:	01130e00 	tsteq	r3, r0, lsl #28
 248:	0b0b0803 	bleq	2c225c <__bss_end__+0x2b8b9c>
 24c:	0b3b0b3a 	bleq	ec2f3c <__bss_end__+0xeb987c>
 250:	00001301 	andeq	r1, r0, r1, lsl #6
 254:	0300160f 	movweq	r1, #1551	; 0x60f
 258:	3b0b3a08 	blcc	2cea80 <__bss_end__+0x2c53c0>
 25c:	0013490b 	andseq	r4, r3, fp, lsl #18
 260:	012e1000 	teqeq	lr, r0
 264:	0b3a0e03 	bleq	e83a78 <__bss_end__+0xe7a3b8>
 268:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 26c:	01111349 	tsteq	r1, r9, asr #6
 270:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 274:	01194297 			; <UNDEFINED> instruction: 0x01194297
 278:	11000013 	tstne	r0, r3, lsl r0
 27c:	08030005 	stmdaeq	r3, {r0, r2}
 280:	0b3b0b3a 	bleq	ec2f70 <__bss_end__+0xeb98b0>
 284:	17021349 	strne	r1, [r2, -r9, asr #6]
 288:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 28c:	3a0e0301 	bcc	380e98 <__bss_end__+0x3777d8>
 290:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 294:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 298:	97184006 	ldrls	r4, [r8, -r6]
 29c:	13011942 	movwne	r1, #6466	; 0x1942
 2a0:	05130000 	ldreq	r0, [r3, #-0]
 2a4:	3a080300 	bcc	200eac <__bss_end__+0x1f77ec>
 2a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2ac:	00180213 	andseq	r0, r8, r3, lsl r2
 2b0:	00341400 	eorseq	r1, r4, r0, lsl #8
 2b4:	13490e03 	movtne	r0, #40451	; 0x9e03
 2b8:	18021934 	stmdane	r2, {r2, r4, r5, r8, fp, ip}
 2bc:	34150000 	ldrcc	r0, [r5], #-0
 2c0:	3a080300 	bcc	200ec8 <__bss_end__+0x1f7808>
 2c4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2c8:	00170213 	andseq	r0, r7, r3, lsl r2
 2cc:	82891600 	addhi	r1, r9, #0, 12
 2d0:	01110101 	tsteq	r1, r1, lsl #2
 2d4:	13011331 	movwne	r1, #4913	; 0x1331
 2d8:	8a170000 	bhi	5c02e0 <__bss_end__+0x5b6c20>
 2dc:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
 2e0:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
 2e4:	89180000 	ldmdbhi	r8, {}	; <UNPREDICTABLE>
 2e8:	11000182 	smlabbne	r0, r2, r1, r0
 2ec:	00133101 	andseq	r3, r3, r1, lsl #2
 2f0:	00341900 	eorseq	r1, r4, r0, lsl #18
 2f4:	0b3a0e03 	bleq	e83b08 <__bss_end__+0xe7a448>
 2f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2fc:	00001802 	andeq	r1, r0, r2, lsl #16
 300:	0182891a 	orreq	r8, r2, sl, lsl r9
 304:	31011101 	tstcc	r1, r1, lsl #2
 308:	1b000013 	blne	35c <_start-0x7ca4>
 30c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 310:	0b3a0e03 	bleq	e83b24 <__bss_end__+0xe7a464>
 314:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 318:	01111349 	tsteq	r1, r9, asr #6
 31c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 320:	00194297 	mulseq	r9, r7, r2
 324:	012e1c00 	teqeq	lr, r0, lsl #24
 328:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 32c:	0b3b0b3a 	bleq	ec301c <__bss_end__+0xeb995c>
 330:	13491927 	movtne	r1, #39207	; 0x9927
 334:	06120111 			; <UNDEFINED> instruction: 0x06120111
 338:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 33c:	00130119 	andseq	r0, r3, r9, lsl r1
 340:	00051d00 	andeq	r1, r5, r0, lsl #26
 344:	0b3a0e03 	bleq	e83b58 <__bss_end__+0xe7a498>
 348:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 34c:	00001702 	andeq	r1, r0, r2, lsl #14
 350:	2701151e 	smladcs	r1, lr, r5, r1
 354:	00130119 	andseq	r0, r3, r9, lsl r1
 358:	00051f00 	andeq	r1, r5, r0, lsl #30
 35c:	00001349 	andeq	r1, r0, r9, asr #6
 360:	3f012e20 	svccc	0x00012e20
 364:	3a0e0319 	bcc	380fd0 <__bss_end__+0x377910>
 368:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 36c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 370:	97184006 	ldrls	r4, [r8, -r6]
 374:	13011942 	movwne	r1, #6466	; 0x1942
 378:	34210000 	strtcc	r0, [r1], #-0
 37c:	3a0e0300 	bcc	380f84 <__bss_end__+0x3778c4>
 380:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 384:	00170213 	andseq	r0, r7, r3, lsl r2
 388:	012e2200 	teqeq	lr, r0, lsl #4
 38c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 390:	0b3b0b3a 	bleq	ec3080 <__bss_end__+0xeb99c0>
 394:	13491927 	movtne	r1, #39207	; 0x9927
 398:	1301193c 	movwne	r1, #6460	; 0x193c
 39c:	18230000 	stmdane	r3!, {}	; <UNPREDICTABLE>
 3a0:	24000000 	strcs	r0, [r0], #-0
 3a4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 3a8:	0b3a0e03 	bleq	e83bbc <__bss_end__+0xe7a4fc>
 3ac:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 3b0:	0000193c 	andeq	r1, r0, ip, lsr r9
 3b4:	3f012e25 	svccc	0x00012e25
 3b8:	3a0e0319 	bcc	381024 <__bss_end__+0x377964>
 3bc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 3c0:	01193c19 	tsteq	r9, r9, lsl ip
 3c4:	00000013 	andeq	r0, r0, r3, lsl r0
 3c8:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 3cc:	030b130e 	movweq	r1, #45838	; 0xb30e
 3d0:	110e1b0e 	tstne	lr, lr, lsl #22
 3d4:	10061201 	andne	r1, r6, r1, lsl #4
 3d8:	02000017 	andeq	r0, r0, #23
 3dc:	0b0b0024 	bleq	2c0474 <__bss_end__+0x2b6db4>
 3e0:	0e030b3e 	vmoveq.16	d3[0], r0
 3e4:	24030000 	strcs	r0, [r3], #-0
 3e8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 3ec:	0008030b 	andeq	r0, r8, fp, lsl #6
 3f0:	000f0400 	andeq	r0, pc, r0, lsl #8
 3f4:	00000b0b 	andeq	r0, r0, fp, lsl #22
 3f8:	0b000f05 	bleq	4014 <_start-0x3fec>
 3fc:	0013490b 	andseq	r4, r3, fp, lsl #18
 400:	00160600 	andseq	r0, r6, r0, lsl #12
 404:	0b3a0e03 	bleq	e83c18 <__bss_end__+0xe7a558>
 408:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 40c:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
 410:	03193f01 	tsteq	r9, #1, 30
 414:	3b0b3a0e 	blcc	2cec54 <__bss_end__+0x2c5594>
 418:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 41c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 420:	97184006 	ldrls	r4, [r8, -r6]
 424:	00001942 	andeq	r1, r0, r2, asr #18
 428:	03000508 	movweq	r0, #1288	; 0x508
 42c:	3b0b3a08 	blcc	2cec54 <__bss_end__+0x2c5594>
 430:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 434:	09000018 	stmdbeq	r0, {r3, r4}
 438:	08030005 	stmdaeq	r3, {r0, r2}
 43c:	0b3b0b3a 	bleq	ec312c <__bss_end__+0xeb9a6c>
 440:	17021349 	strne	r1, [r2, -r9, asr #6]
 444:	340a0000 	strcc	r0, [sl], #-0
 448:	3a080300 	bcc	201050 <__bss_end__+0x1f7990>
 44c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 450:	00170213 	andseq	r0, r7, r3, lsl r2
 454:	00340b00 	eorseq	r0, r4, r0, lsl #22
 458:	0b3a0803 	bleq	e8246c <__bss_end__+0xe78dac>
 45c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 460:	00001802 	andeq	r1, r0, r2, lsl #16
 464:	01110100 	tsteq	r1, r0, lsl #2
 468:	0b130e25 	bleq	4c3d04 <__bss_end__+0x4ba644>
 46c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 470:	06120111 			; <UNDEFINED> instruction: 0x06120111
 474:	00001710 	andeq	r1, r0, r0, lsl r7
 478:	03001602 	movweq	r1, #1538	; 0x602
 47c:	3b0b3a0e 	blcc	2cecbc <__bss_end__+0x2c55fc>
 480:	0013490b 	andseq	r4, r3, fp, lsl #18
 484:	01130300 	tsteq	r3, r0, lsl #6
 488:	0b0b0e03 	bleq	2c3c9c <__bss_end__+0x2ba5dc>
 48c:	0b3b0b3a 	bleq	ec317c <__bss_end__+0xeb9abc>
 490:	00001301 	andeq	r1, r0, r1, lsl #6
 494:	03000d04 	movweq	r0, #3332	; 0xd04
 498:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
 49c:	0019340b 	andseq	r3, r9, fp, lsl #8
 4a0:	000f0500 	andeq	r0, pc, r0, lsl #10
 4a4:	00000b0b 	andeq	r0, r0, fp, lsl #22
 4a8:	0b002406 	bleq	94c8 <buf.4133+0x214>
 4ac:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 4b0:	07000008 	streq	r0, [r0, -r8]
 4b4:	0b0b0024 	bleq	2c054c <__bss_end__+0x2b6e8c>
 4b8:	0e030b3e 	vmoveq.16	d3[0], r0
 4bc:	0f080000 	svceq	0x00080000
 4c0:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 4c4:	09000013 	stmdbeq	r0, {r0, r1, r4}
 4c8:	13490026 	movtne	r0, #36902	; 0x9026
 4cc:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
 4d0:	03193f01 	tsteq	r9, #1, 30
 4d4:	3b0b3a0e 	blcc	2ced14 <__bss_end__+0x2c5654>
 4d8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 4dc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 4e0:	97184006 	ldrls	r4, [r8, -r6]
 4e4:	13011942 	movwne	r1, #6466	; 0x1942
 4e8:	050b0000 	streq	r0, [fp, #-0]
 4ec:	3a080300 	bcc	2010f4 <__bss_end__+0x1f7a34>
 4f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4f4:	00180213 	andseq	r0, r8, r3, lsl r2
 4f8:	00180c00 	andseq	r0, r8, r0, lsl #24
 4fc:	340d0000 	strcc	r0, [sp], #-0
 500:	3a080300 	bcc	201108 <__bss_end__+0x1f7a48>
 504:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 508:	00180213 	andseq	r0, r8, r3, lsl r2
 50c:	00340e00 	eorseq	r0, r4, r0, lsl #28
 510:	0b3a0e03 	bleq	e83d24 <__bss_end__+0xe7a664>
 514:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 518:	00001802 	andeq	r1, r0, r2, lsl #16
 51c:	0300340f 	movweq	r3, #1039	; 0x40f
 520:	3b0b3a08 	blcc	2ced48 <__bss_end__+0x2c5688>
 524:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 528:	10000017 	andne	r0, r0, r7, lsl r0
 52c:	01018289 	smlabbeq	r1, r9, r2, r8
 530:	13310111 	teqne	r1, #1073741828	; 0x40000004
 534:	00001301 	andeq	r1, r0, r1, lsl #6
 538:	01828a11 	orreq	r8, r2, r1, lsl sl
 53c:	91180200 	tstls	r8, r0, lsl #4
 540:	00001842 	andeq	r1, r0, r2, asr #16
 544:	01828912 	orreq	r8, r2, r2, lsl r9
 548:	00011101 	andeq	r1, r1, r1, lsl #2
 54c:	01011300 	mrseq	r1, SP_irq
 550:	13011349 	movwne	r1, #4937	; 0x1349
 554:	21140000 	tstcs	r4, r0
 558:	2f134900 	svccs	0x00134900
 55c:	15000005 	strne	r0, [r0, #-5]
 560:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 564:	13011349 	movwne	r1, #4937	; 0x1349
 568:	05160000 	ldreq	r0, [r6, #-0]
 56c:	00134900 	andseq	r4, r3, r0, lsl #18
 570:	00341700 	eorseq	r1, r4, r0, lsl #14
 574:	0b3a0e03 	bleq	e83d88 <__bss_end__+0xe7a6c8>
 578:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 57c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 580:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
 584:	03193f01 	tsteq	r9, #1, 30
 588:	3b0b3a0e 	blcc	2cedc8 <__bss_end__+0x2c5708>
 58c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 590:	00193c13 	andseq	r3, r9, r3, lsl ip
 594:	11010000 	mrsne	r0, (UNDEF: 1)
 598:	130e2501 	movwne	r2, #58625	; 0xe501
 59c:	1b0e030b 	blne	3811d0 <__bss_end__+0x377b10>
 5a0:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 5a4:	00171006 	andseq	r1, r7, r6
 5a8:	00240200 	eoreq	r0, r4, r0, lsl #4
 5ac:	0b3e0b0b 	bleq	f831e0 <__bss_end__+0xf79b20>
 5b0:	00000803 	andeq	r0, r0, r3, lsl #16
 5b4:	0b002403 	bleq	95c8 <buf.4133+0x314>
 5b8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 5bc:	0400000e 	streq	r0, [r0], #-14
 5c0:	0b0b000f 	bleq	2c0604 <__bss_end__+0x2b6f44>
 5c4:	00001349 	andeq	r1, r0, r9, asr #6
 5c8:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
 5cc:	06000013 			; <UNDEFINED> instruction: 0x06000013
 5d0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 5d4:	0b3a0e03 	bleq	e83de8 <__bss_end__+0xe7a728>
 5d8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 5dc:	01111349 	tsteq	r1, r9, asr #6
 5e0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 5e4:	01194296 			; <UNDEFINED> instruction: 0x01194296
 5e8:	07000013 	smladeq	r0, r3, r0, r0
 5ec:	08030005 	stmdaeq	r3, {r0, r2}
 5f0:	0b3b0b3a 	bleq	ec32e0 <__bss_end__+0xeb9c20>
 5f4:	17021349 	strne	r1, [r2, -r9, asr #6]
 5f8:	15080000 	strne	r0, [r8, #-0]
 5fc:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
 600:	00130113 	andseq	r0, r3, r3, lsl r1
 604:	00050900 	andeq	r0, r5, r0, lsl #18
 608:	00001349 	andeq	r1, r0, r9, asr #6
 60c:	0300340a 	movweq	r3, #1034	; 0x40a
 610:	3b0b3a0e 	blcc	2cee50 <__bss_end__+0x2c5790>
 614:	3f13490b 	svccc	0x0013490b
 618:	00193c19 	andseq	r3, r9, r9, lsl ip
 61c:	00340b00 	eorseq	r0, r4, r0, lsl #22
 620:	0b3a0e03 	bleq	e83e34 <__bss_end__+0xe7a774>
 624:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 628:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 62c:	01000000 	mrseq	r0, (UNDEF: 0)
 630:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 634:	0e030b13 	vmoveq.32	d3[0], r0
 638:	01110e1b 	tsteq	r1, fp, lsl lr
 63c:	17100612 			; <UNDEFINED> instruction: 0x17100612
 640:	24020000 	strcs	r0, [r2], #-0
 644:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 648:	0008030b 	andeq	r0, r8, fp, lsl #6
 64c:	00240300 	eoreq	r0, r4, r0, lsl #6
 650:	0b3e0b0b 	bleq	f83284 <__bss_end__+0xf79bc4>
 654:	00000e03 	andeq	r0, r0, r3, lsl #28
 658:	0b000f04 	bleq	4270 <_start-0x3d90>
 65c:	0500000b 	streq	r0, [r0, #-11]
 660:	0b0b000f 	bleq	2c06a4 <__bss_end__+0x2b6fe4>
 664:	00001349 	andeq	r1, r0, r9, asr #6
 668:	49002606 	stmdbmi	r0, {r1, r2, r9, sl, sp}
 66c:	07000013 	smladeq	r0, r3, r0, r0
 670:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 674:	0b3b0b3a 	bleq	ec3364 <__bss_end__+0xeb9ca4>
 678:	00001349 	andeq	r1, r0, r9, asr #6
 67c:	03011308 	movweq	r1, #4872	; 0x1308
 680:	3a0b0b0e 	bcc	2c32c0 <__bss_end__+0x2b9c00>
 684:	010b3b0b 	tsteq	fp, fp, lsl #22
 688:	09000013 	stmdbeq	r0, {r0, r1, r4}
 68c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 690:	0b381349 	bleq	e053bc <__bss_end__+0xdfbcfc>
 694:	00001934 	andeq	r1, r0, r4, lsr r9
 698:	03012e0a 	movweq	r2, #7690	; 0x1e0a
 69c:	3b0b3a0e 	blcc	2ceedc <__bss_end__+0x2c581c>
 6a0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 6a4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 6a8:	97184006 	ldrls	r4, [r8, -r6]
 6ac:	13011942 	movwne	r1, #6466	; 0x1942
 6b0:	050b0000 	streq	r0, [fp, #-0]
 6b4:	3a080300 	bcc	2012bc <__bss_end__+0x1f7bfc>
 6b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6bc:	00170213 	andseq	r0, r7, r3, lsl r2
 6c0:	012e0c00 	teqeq	lr, r0, lsl #24
 6c4:	0b3a0803 	bleq	e826d8 <__bss_end__+0xe79018>
 6c8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 6cc:	01111349 	tsteq	r1, r9, asr #6
 6d0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 6d4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 6d8:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 6dc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 6e0:	0b3b0b3a 	bleq	ec33d0 <__bss_end__+0xeb9d10>
 6e4:	17021349 	strne	r1, [r2, -r9, asr #6]
 6e8:	050e0000 	streq	r0, [lr, #-0]
 6ec:	3a0e0300 	bcc	3812f4 <__bss_end__+0x377c34>
 6f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6f4:	00180213 	andseq	r0, r8, r3, lsl r2
 6f8:	00340f00 	eorseq	r0, r4, r0, lsl #30
 6fc:	0b3a0803 	bleq	e82710 <__bss_end__+0xe79050>
 700:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 704:	00001802 	andeq	r1, r0, r2, lsl #16
 708:	03003410 	movweq	r3, #1040	; 0x410
 70c:	3b0b3a08 	blcc	2cef34 <__bss_end__+0x2c5874>
 710:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 714:	11000017 	tstne	r0, r7, lsl r0
 718:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 71c:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
 720:	00001802 	andeq	r1, r0, r2, lsl #16
 724:	11010b12 	tstne	r1, r2, lsl fp
 728:	01061201 	tsteq	r6, r1, lsl #4
 72c:	13000013 	movwne	r0, #19
 730:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 734:	0b3b0b3a 	bleq	ec3424 <__bss_end__+0xeb9d64>
 738:	17021349 	strne	r1, [r2, -r9, asr #6]
 73c:	89140000 	ldmdbhi	r4, {}	; <UNPREDICTABLE>
 740:	11010182 	smlabbne	r1, r2, r1, r0
 744:	01133101 	tsteq	r3, r1, lsl #2
 748:	15000013 	strne	r0, [r0, #-19]
 74c:	0001828a 	andeq	r8, r1, sl, lsl #5
 750:	42911802 	addsmi	r1, r1, #131072	; 0x20000
 754:	16000018 			; <UNDEFINED> instruction: 0x16000018
 758:	00018289 	andeq	r8, r1, r9, lsl #5
 75c:	13310111 	teqne	r1, #1073741828	; 0x40000004
 760:	89170000 	ldmdbhi	r7, {}	; <UNPREDICTABLE>
 764:	11010182 	smlabbne	r1, r2, r1, r0
 768:	00133101 	andseq	r3, r3, r1, lsl #2
 76c:	01011800 	tsteq	r1, r0, lsl #16
 770:	13011349 	movwne	r1, #4937	; 0x1349
 774:	21190000 	tstcs	r9, r0
 778:	2f134900 	svccs	0x00134900
 77c:	1a00000b 	bne	7b0 <_start-0x7850>
 780:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 784:	0b3a0e03 	bleq	e83f98 <__bss_end__+0xe7a8d8>
 788:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 78c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 790:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 794:	00130119 	andseq	r0, r3, r9, lsl r1
 798:	01151b00 	tsteq	r5, r0, lsl #22
 79c:	13491927 	movtne	r1, #39207	; 0x9927
 7a0:	00001301 	andeq	r1, r0, r1, lsl #6
 7a4:	4900051c 	stmdbmi	r0, {r2, r3, r4, r8, sl}
 7a8:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
 7ac:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 7b0:	0b3a0e03 	bleq	e83fc4 <__bss_end__+0xe7a904>
 7b4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 7b8:	01111349 	tsteq	r1, r9, asr #6
 7bc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 7c0:	01194297 			; <UNDEFINED> instruction: 0x01194297
 7c4:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
 7c8:	0111010b 	tsteq	r1, fp, lsl #2
 7cc:	00000612 	andeq	r0, r0, r2, lsl r6
 7d0:	0300341f 	movweq	r3, #1055	; 0x41f
 7d4:	3b0b3a0e 	blcc	2cf014 <__bss_end__+0x2c5954>
 7d8:	3f13490b 	svccc	0x0013490b
 7dc:	00193c19 	andseq	r3, r9, r9, lsl ip
 7e0:	012e2000 	teqeq	lr, r0
 7e4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 7e8:	0b3b0b3a 	bleq	ec34d8 <__bss_end__+0xeb9e18>
 7ec:	13491927 	movtne	r1, #39207	; 0x9927
 7f0:	1301193c 	movwne	r1, #6460	; 0x193c
 7f4:	18210000 	stmdane	r1!, {}	; <UNPREDICTABLE>
 7f8:	22000000 	andcs	r0, r0, #0
 7fc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 800:	0b3a0e03 	bleq	e84014 <__bss_end__+0xe7a954>
 804:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 808:	0000193c 	andeq	r1, r0, ip, lsr r9
 80c:	01110100 	tsteq	r1, r0, lsl #2
 810:	0b130e25 	bleq	4c40ac <__bss_end__+0x4ba9ec>
 814:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 818:	06120111 			; <UNDEFINED> instruction: 0x06120111
 81c:	00001710 	andeq	r1, r0, r0, lsl r7
 820:	0b002402 	bleq	9830 <__bss_end__+0x170>
 824:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 828:	03000008 	movweq	r0, #8
 82c:	0b0b0024 	bleq	2c08c4 <__bss_end__+0x2b7204>
 830:	0e030b3e 	vmoveq.16	d3[0], r0
 834:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
 838:	03193f01 	tsteq	r9, #1, 30
 83c:	3b0b3a0e 	blcc	2cf07c <__bss_end__+0x2c59bc>
 840:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 844:	97184006 	ldrls	r4, [r8, -r6]
 848:	13011942 	movwne	r1, #6466	; 0x1942
 84c:	34050000 	strcc	r0, [r5], #-0
 850:	3a0e0300 	bcc	381458 <__bss_end__+0x377d98>
 854:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 858:	3c193f13 	ldccc	15, cr3, [r9], {19}
 85c:	06000019 			; <UNDEFINED> instruction: 0x06000019
 860:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 864:	0b3a0e03 	bleq	e84078 <__bss_end__+0xe7a9b8>
 868:	193c0b3b 	ldmdbne	ip!, {r0, r1, r3, r4, r5, r8, r9, fp}
 86c:	00001301 	andeq	r1, r0, r1, lsl #6
 870:	00001807 	andeq	r1, r0, r7, lsl #16
 874:	00340800 	eorseq	r0, r4, r0, lsl #16
 878:	0b3a0803 	bleq	e8288c <__bss_end__+0xe791cc>
 87c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 880:	00001702 	andeq	r1, r0, r2, lsl #14
 884:	03003409 	movweq	r3, #1033	; 0x409
 888:	3b0b3a0e 	blcc	2cf0c8 <__bss_end__+0x2c5a08>
 88c:	0013490b 	andseq	r4, r3, fp, lsl #18
 890:	82890a00 	addhi	r0, r9, #0, 20
 894:	01110001 	tsteq	r1, r1
 898:	00001331 	andeq	r1, r0, r1, lsr r3
 89c:	0b000f0b 	bleq	44d0 <_start-0x3b30>
 8a0:	0013490b 	andseq	r4, r3, fp, lsl #18
 8a4:	002e0c00 	eoreq	r0, lr, r0, lsl #24
 8a8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 8ac:	0b3b0b3a 	bleq	ec359c <__bss_end__+0xeb9edc>
 8b0:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 8b4:	01000000 	mrseq	r0, (UNDEF: 0)
 8b8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 8bc:	0e030b13 	vmoveq.32	d3[0], r0
 8c0:	17550e1b 	smmlane	r5, fp, lr, r0
 8c4:	17100111 			; <UNDEFINED> instruction: 0x17100111
 8c8:	24020000 	strcs	r0, [r2], #-0
 8cc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 8d0:	0008030b 	andeq	r0, r8, fp, lsl #6
 8d4:	00240300 	eoreq	r0, r4, r0, lsl #6
 8d8:	0b3e0b0b 	bleq	f8350c <__bss_end__+0xf79e4c>
 8dc:	00000e03 	andeq	r0, r0, r3, lsl #28
 8e0:	3f012e04 	svccc	0x00012e04
 8e4:	3a0e0319 	bcc	381550 <__bss_end__+0x377e90>
 8e8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 8ec:	11134919 	tstne	r3, r9, lsl r9
 8f0:	40061201 	andmi	r1, r6, r1, lsl #4
 8f4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 8f8:	00001301 	andeq	r1, r0, r1, lsl #6
 8fc:	03003405 	movweq	r3, #1029	; 0x405
 900:	3b0b3a0e 	blcc	2cf140 <__bss_end__+0x2c5a80>
 904:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 908:	06000017 			; <UNDEFINED> instruction: 0x06000017
 90c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 910:	0b3a0e03 	bleq	e84124 <__bss_end__+0xe7aa64>
 914:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 918:	06120111 			; <UNDEFINED> instruction: 0x06120111
 91c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 920:	00130119 	andseq	r0, r3, r9, lsl r1
 924:	00340700 	eorseq	r0, r4, r0, lsl #14
 928:	0b3a0e03 	bleq	e8413c <__bss_end__+0xe7aa7c>
 92c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 930:	0000061c 	andeq	r0, r0, ip, lsl r6
 934:	03003408 	movweq	r3, #1032	; 0x408
 938:	3b0b3a0e 	blcc	2cf178 <__bss_end__+0x2c5ab8>
 93c:	1c13490b 	ldcne	9, cr4, [r3], {11}
 940:	0900000b 	stmdbeq	r0, {r0, r1, r3}
 944:	00018289 	andeq	r8, r1, r9, lsl #5
 948:	13310111 	teqne	r1, #1073741828	; 0x40000004
 94c:	890a0000 	stmdbhi	sl, {}	; <UNPREDICTABLE>
 950:	11010182 	smlabbne	r1, r2, r1, r0
 954:	01133101 	tsteq	r3, r1, lsl #2
 958:	0b000013 	bleq	9ac <_start-0x7654>
 95c:	0001828a 	andeq	r8, r1, sl, lsl #5
 960:	42911802 	addsmi	r1, r1, #131072	; 0x20000
 964:	0c000018 	stceq	0, cr0, [r0], {24}
 968:	01018289 	smlabbeq	r1, r9, r2, r8
 96c:	13310111 	teqne	r1, #1073741828	; 0x40000004
 970:	260d0000 	strcs	r0, [sp], -r0
 974:	00134900 	andseq	r4, r3, r0, lsl #18
 978:	012e0e00 	teqeq	lr, r0, lsl #28
 97c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 980:	0b3b0b3a 	bleq	ec3670 <__bss_end__+0xeb9fb0>
 984:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 988:	00001301 	andeq	r1, r0, r1, lsl #6
 98c:	4900050f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sl}
 990:	10000013 	andne	r0, r0, r3, lsl r0
 994:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 998:	0b3a0e03 	bleq	e841ac <__bss_end__+0xe7aaec>
 99c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 9a0:	0000193c 	andeq	r1, r0, ip, lsr r9
 9a4:	01110100 	tsteq	r1, r0, lsl #2
 9a8:	0b130e25 	bleq	4c4244 <__bss_end__+0x4bab84>
 9ac:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 9b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 9b4:	00001710 	andeq	r1, r0, r0, lsl r7
 9b8:	0b002402 	bleq	99c8 <__bss_end__+0x308>
 9bc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 9c0:	03000008 	movweq	r0, #8
 9c4:	0b0b0024 	bleq	2c0a5c <__bss_end__+0x2b739c>
 9c8:	0e030b3e 	vmoveq.16	d3[0], r0
 9cc:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
 9d0:	03193f01 	tsteq	r9, #1, 30
 9d4:	3b0b3a0e 	blcc	2cf214 <__bss_end__+0x2c5b54>
 9d8:	1119270b 	tstne	r9, fp, lsl #14
 9dc:	40061201 	andmi	r1, r6, r1, lsl #4
 9e0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 9e4:	00001301 	andeq	r1, r0, r1, lsl #6
 9e8:	03000505 	movweq	r0, #1285	; 0x505
 9ec:	3b0b3a0e 	blcc	2cf22c <__bss_end__+0x2c5b6c>
 9f0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 9f4:	06000017 			; <UNDEFINED> instruction: 0x06000017
 9f8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 9fc:	0b3a0e03 	bleq	e84210 <__bss_end__+0xe7ab50>
 a00:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 a04:	01111349 	tsteq	r1, r9, asr #6
 a08:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 a0c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 a10:	07000013 	smladeq	r0, r3, r0, r0
 a14:	01018289 	smlabbeq	r1, r9, r2, r8
 a18:	13310111 	teqne	r1, #1073741828	; 0x40000004
 a1c:	8a080000 	bhi	200a24 <__bss_end__+0x1f7364>
 a20:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
 a24:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
 a28:	05090000 	streq	r0, [r9, #-0]
 a2c:	3a080300 	bcc	201634 <__bss_end__+0x1f7f74>
 a30:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 a34:	00170213 	andseq	r0, r7, r3, lsl r2
 a38:	00340a00 	eorseq	r0, r4, r0, lsl #20
 a3c:	0b3a0803 	bleq	e82a50 <__bss_end__+0xe79390>
 a40:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 a44:	00001802 	andeq	r1, r0, r2, lsl #16
 a48:	11010b0b 	tstne	r1, fp, lsl #22
 a4c:	01061201 	tsteq	r6, r1, lsl #4
 a50:	0c000013 	stceq	0, cr0, [r0], {19}
 a54:	08030034 	stmdaeq	r3, {r2, r4, r5}
 a58:	0b3b0b3a 	bleq	ec3748 <__bss_end__+0xeba088>
 a5c:	17021349 	strne	r1, [r2, -r9, asr #6]
 a60:	890d0000 	stmdbhi	sp, {}	; <UNPREDICTABLE>
 a64:	11000182 	smlabbne	r0, r2, r1, r0
 a68:	00133101 	andseq	r3, r3, r1, lsl #2
 a6c:	012e0e00 	teqeq	lr, r0, lsl #28
 a70:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 a74:	0b3b0b3a 	bleq	ec3764 <__bss_end__+0xeba0a4>
 a78:	13491927 	movtne	r1, #39207	; 0x9927
 a7c:	0000193c 	andeq	r1, r0, ip, lsr r9
 a80:	4900050f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sl}
 a84:	00000013 	andeq	r0, r0, r3, lsl r0
 a88:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 a8c:	030b130e 	movweq	r1, #45838	; 0xb30e
 a90:	110e1b0e 	tstne	lr, lr, lsl #22
 a94:	10061201 	andne	r1, r6, r1, lsl #4
 a98:	02000017 	andeq	r0, r0, #23
 a9c:	0b0b0024 	bleq	2c0b34 <__bss_end__+0x2b7474>
 aa0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 aa4:	16030000 	strne	r0, [r3], -r0
 aa8:	3a0e0300 	bcc	3816b0 <__bss_end__+0x377ff0>
 aac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 ab0:	04000013 	streq	r0, [r0], #-19
 ab4:	0b0b0024 	bleq	2c0b4c <__bss_end__+0x2b748c>
 ab8:	0e030b3e 	vmoveq.16	d3[0], r0
 abc:	0f050000 	svceq	0x00050000
 ac0:	000b0b00 	andeq	r0, fp, r0, lsl #22
 ac4:	000f0600 	andeq	r0, pc, r0, lsl #12
 ac8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 acc:	26070000 	strcs	r0, [r7], -r0
 ad0:	00134900 	andseq	r4, r3, r0, lsl #18
 ad4:	01010800 	tsteq	r1, r0, lsl #16
 ad8:	13011349 	movwne	r1, #4937	; 0x1349
 adc:	21090000 	mrscs	r0, (UNDEF: 9)
 ae0:	2f134900 	svccs	0x00134900
 ae4:	0a00000b 	beq	b18 <_start-0x74e8>
 ae8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 aec:	0b3a0e03 	bleq	e84300 <__bss_end__+0xe7ac40>
 af0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 af4:	01111349 	tsteq	r1, r9, asr #6
 af8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 afc:	01194297 			; <UNDEFINED> instruction: 0x01194297
 b00:	0b000013 	bleq	b54 <_start-0x74ac>
 b04:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 b08:	0b3b0b3a 	bleq	ec37f8 <__bss_end__+0xeba138>
 b0c:	17021349 	strne	r1, [r2, -r9, asr #6]
 b10:	340c0000 	strcc	r0, [ip], #-0
 b14:	490e0300 	stmdbmi	lr, {r8, r9}
 b18:	02193413 	andseq	r3, r9, #318767104	; 0x13000000
 b1c:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
 b20:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 b24:	0b3b0b3a 	bleq	ec3814 <__bss_end__+0xeba154>
 b28:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 b2c:	340e0000 	strcc	r0, [lr], #-0
 b30:	3a0e0300 	bcc	381738 <__bss_end__+0x378078>
 b34:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 b38:	00170213 	andseq	r0, r7, r3, lsl r2
 b3c:	82890f00 	addhi	r0, r9, #0, 30
 b40:	01110101 	tsteq	r1, r1, lsl #2
 b44:	13011331 	movwne	r1, #4913	; 0x1331
 b48:	8a100000 	bhi	400b50 <__bss_end__+0x3f7490>
 b4c:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
 b50:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
 b54:	89110000 	ldmdbhi	r1, {}	; <UNPREDICTABLE>
 b58:	11000182 	smlabbne	r0, r2, r1, r0
 b5c:	00133101 	andseq	r3, r3, r1, lsl #2
 b60:	82891200 	addhi	r1, r9, #0, 4
 b64:	01110101 	tsteq	r1, r1, lsl #2
 b68:	00001331 	andeq	r1, r0, r1, lsr r3
 b6c:	3f012e13 	svccc	0x00012e13
 b70:	3a0e0319 	bcc	3817dc <__bss_end__+0x37811c>
 b74:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 b78:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 b7c:	97184006 	ldrls	r4, [r8, -r6]
 b80:	13011942 	movwne	r1, #6466	; 0x1942
 b84:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 b88:	03193f00 	tsteq	r9, #0, 30
 b8c:	3b0b3a0e 	blcc	2cf3cc <__bss_end__+0x2c5d0c>
 b90:	1119270b 	tstne	r9, fp, lsl #14
 b94:	40061201 	andmi	r1, r6, r1, lsl #4
 b98:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 b9c:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 ba0:	03193f00 	tsteq	r9, #0, 30
 ba4:	3b0b3a0e 	blcc	2cf3e4 <__bss_end__+0x2c5d24>
 ba8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 bac:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 bb0:	97184006 	ldrls	r4, [r8, -r6]
 bb4:	00001942 	andeq	r1, r0, r2, asr #18
 bb8:	03003416 	movweq	r3, #1046	; 0x416
 bbc:	3b0b3a0e 	blcc	2cf3fc <__bss_end__+0x2c5d3c>
 bc0:	3f13490b 	svccc	0x0013490b
 bc4:	00193c19 	andseq	r3, r9, r9, lsl ip
 bc8:	012e1700 	teqeq	lr, r0, lsl #14
 bcc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 bd0:	0b3b0b3a 	bleq	ec38c0 <__bss_end__+0xeba200>
 bd4:	13491927 	movtne	r1, #39207	; 0x9927
 bd8:	1301193c 	movwne	r1, #6460	; 0x193c
 bdc:	05180000 	ldreq	r0, [r8, #-0]
 be0:	00134900 	andseq	r4, r3, r0, lsl #18
 be4:	00181900 	andseq	r1, r8, r0, lsl #18
 be8:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
 bec:	03193f00 	tsteq	r9, #0, 30
 bf0:	3b0b3a0e 	blcc	2cf430 <__bss_end__+0x2c5d70>
 bf4:	3c19270b 	ldccc	7, cr2, [r9], {11}
 bf8:	1b000019 	blne	c64 <_start-0x739c>
 bfc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 c00:	0b3a0e03 	bleq	e84414 <__bss_end__+0xe7ad54>
 c04:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 c08:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 c0c:	01000000 	mrseq	r0, (UNDEF: 0)
 c10:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 c14:	0e030b13 	vmoveq.32	d3[0], r0
 c18:	01110e1b 	tsteq	r1, fp, lsl lr
 c1c:	17100612 			; <UNDEFINED> instruction: 0x17100612
 c20:	24020000 	strcs	r0, [r2], #-0
 c24:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 c28:	0008030b 	andeq	r0, r8, fp, lsl #6
 c2c:	00240300 	eoreq	r0, r4, r0, lsl #6
 c30:	0b3e0b0b 	bleq	f83864 <__bss_end__+0xf7a1a4>
 c34:	00000e03 	andeq	r0, r0, r3, lsl #28
 c38:	03012e04 	movweq	r2, #7684	; 0x1e04
 c3c:	3b0b3a0e 	blcc	2cf47c <__bss_end__+0x2c5dbc>
 c40:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 c44:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 c48:	97184006 	ldrls	r4, [r8, -r6]
 c4c:	13011942 	movwne	r1, #6466	; 0x1942
 c50:	05050000 	streq	r0, [r5, #-0]
 c54:	3a080300 	bcc	20185c <__bss_end__+0x1f819c>
 c58:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 c5c:	00170213 	andseq	r0, r7, r3, lsl r2
 c60:	82890600 	addhi	r0, r9, #0, 12
 c64:	01110101 	tsteq	r1, r1, lsl #2
 c68:	00001331 	andeq	r1, r0, r1, lsr r3
 c6c:	01828a07 	orreq	r8, r2, r7, lsl #20
 c70:	91180200 	tstls	r8, r0, lsl #4
 c74:	00001842 	andeq	r1, r0, r2, asr #16
 c78:	27011508 	strcs	r1, [r1, -r8, lsl #10]
 c7c:	01134919 	tsteq	r3, r9, lsl r9
 c80:	09000013 	stmdbeq	r0, {r0, r1, r4}
 c84:	13490005 	movtne	r0, #36869	; 0x9005
 c88:	340a0000 	strcc	r0, [sl], #-0
 c8c:	3a0e0300 	bcc	381894 <__bss_end__+0x3781d4>
 c90:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 c94:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 c98:	0b000018 	bleq	d00 <_start-0x7300>
 c9c:	0b0b000f 	bleq	2c0ce0 <__bss_end__+0x2b7620>
 ca0:	00001349 	andeq	r1, r0, r9, asr #6
 ca4:	3f012e0c 	svccc	0x00012e0c
 ca8:	3a0e0319 	bcc	381914 <__bss_end__+0x378254>
 cac:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 cb0:	00193c19 	andseq	r3, r9, r9, lsl ip
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
   0:	00000000 	andeq	r0, r0, r0
   4:	00000020 	andeq	r0, r0, r0, lsr #32
   8:	20500001 	subscs	r0, r0, r1
   c:	34000000 	strcc	r0, [r0], #-0
  10:	01000000 	mrseq	r0, (UNDEF: 0)
  14:	00345400 	eorseq	r5, r4, r0, lsl #8
  18:	00370000 	eorseq	r0, r7, r0
  1c:	00010000 	andeq	r0, r1, r0
  20:	00003750 	andeq	r3, r0, r0, asr r7
  24:	00005c00 	andeq	r5, r0, r0, lsl #24
  28:	54000100 	strpl	r0, [r0], #-256	; 0x100
  2c:	0000005c 	andeq	r0, r0, ip, asr r0
  30:	0000006c 	andeq	r0, r0, ip, rrx
  34:	01f30004 	mvnseq	r0, r4
  38:	00009f50 	andeq	r9, r0, r0, asr pc
  3c:	00000000 	andeq	r0, r0, r0
  40:	003c0000 	eorseq	r0, ip, r0
  44:	005c0000 	subseq	r0, ip, r0
  48:	00010000 	andeq	r0, r1, r0
  4c:	00000055 	andeq	r0, r0, r5, asr r0
  50:	00000000 	andeq	r0, r0, r0
  54:	00006c00 	andeq	r6, r0, r0, lsl #24
  58:	00007800 	andeq	r7, r0, r0, lsl #16
  5c:	50000100 	andpl	r0, r0, r0, lsl #2
  60:	00000078 	andeq	r0, r0, r8, ror r0
  64:	000000d8 	ldrdeq	r0, [r0], -r8
  68:	00540001 	subseq	r0, r4, r1
  6c:	00000000 	andeq	r0, r0, r0
  70:	74000000 	strvc	r0, [r0], #-0
  74:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
  78:	01000000 	mrseq	r0, (UNDEF: 0)
  7c:	00785000 	rsbseq	r5, r8, r0
  80:	00d80000 	sbcseq	r0, r8, r0
  84:	00010000 	andeq	r0, r1, r0
  88:	00000054 	andeq	r0, r0, r4, asr r0
	...
  94:	00000400 	andeq	r0, r0, r0, lsl #8
  98:	50000100 	andpl	r0, r0, r0, lsl #2
  9c:	00000004 	andeq	r0, r0, r4
  a0:	00000010 	andeq	r0, r0, r0, lsl r0
  a4:	01f30004 	mvnseq	r0, r4
  a8:	00009f50 	andeq	r9, r0, r0, asr pc
  ac:	00000000 	andeq	r0, r0, r0
  b0:	003c0000 	eorseq	r0, ip, r0
  b4:	004c0000 	subeq	r0, ip, r0
  b8:	00010000 	andeq	r0, r1, r0
  bc:	00004c50 	andeq	r4, r0, r0, asr ip
  c0:	00005800 	andeq	r5, r0, r0, lsl #16
  c4:	53000100 	movwpl	r0, #256	; 0x100
  c8:	00000058 	andeq	r0, r0, r8, asr r0
  cc:	00000060 	andeq	r0, r0, r0, rrx
  d0:	01f30004 	mvnseq	r0, r4
  d4:	00609f50 	rsbeq	r9, r0, r0, asr pc
  d8:	00640000 	rsbeq	r0, r4, r0
  dc:	00010000 	andeq	r0, r1, r0
  e0:	00006450 	andeq	r6, r0, r0, asr r4
  e4:	00008800 	andeq	r8, r0, r0, lsl #16
  e8:	53000100 	movwpl	r0, #256	; 0x100
  ec:	00000088 	andeq	r0, r0, r8, lsl #1
  f0:	00000090 	muleq	r0, r0, r0
  f4:	01f30004 	mvnseq	r0, r4
  f8:	00909f50 	addseq	r9, r0, r0, asr pc
  fc:	00b80000 	adcseq	r0, r8, r0
 100:	00010000 	andeq	r0, r1, r0
 104:	00000053 	andeq	r0, r0, r3, asr r0
 108:	00000000 	andeq	r0, r0, r0
 10c:	00006400 	andeq	r6, r0, r0, lsl #8
 110:	00007000 	andeq	r7, r0, r0
 114:	50000100 	andpl	r0, r0, r0, lsl #2
 118:	00000070 	andeq	r0, r0, r0, ror r0
 11c:	00000088 	andeq	r0, r0, r8, lsl #1
 120:	00730002 	rsbseq	r0, r3, r2
 124:	00000088 	andeq	r0, r0, r8, lsl #1
 128:	0000008b 	andeq	r0, r0, fp, lsl #1
 12c:	01f30003 	mvnseq	r0, r3
 130:	00009050 	andeq	r9, r0, r0, asr r0
 134:	0000b800 	andeq	fp, r0, r0, lsl #16
 138:	50000100 	andpl	r0, r0, r0, lsl #2
	...
 144:	000000c4 	andeq	r0, r0, r4, asr #1
 148:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 14c:	d8500001 	ldmdale	r0, {r0}^
 150:	e4000000 	str	r0, [r0], #-0
 154:	01000000 	mrseq	r0, (UNDEF: 0)
 158:	00005000 	andeq	r5, r0, r0
 15c:	00000000 	andeq	r0, r0, r0
 160:	00f40000 	rscseq	r0, r4, r0
 164:	00fb0000 	rscseq	r0, fp, r0
 168:	00010000 	andeq	r0, r1, r0
 16c:	0000fb50 	andeq	pc, r0, r0, asr fp	; <UNPREDICTABLE>
 170:	00012c00 	andeq	r2, r1, r0, lsl #24
 174:	f3000400 	vshl.u8	d0, d0, d0
 178:	009f5001 	addseq	r5, pc, r1
 17c:	00000000 	andeq	r0, r0, r0
 180:	f4000000 	vst4.8	{d0-d3}, [r0], r0
 184:	fb000000 	blx	18e <_start-0x7e72>
 188:	01000000 	mrseq	r0, (UNDEF: 0)
 18c:	00fb5100 	rscseq	r5, fp, r0, lsl #2
 190:	012c0000 	teqeq	ip, r0
 194:	00040000 	andeq	r0, r4, r0
 198:	9f5101f3 	svcls	0x005101f3
	...
 1a4:	00000100 	andeq	r0, r0, r0, lsl #2
 1a8:	00000118 	andeq	r0, r0, r8, lsl r1
 1ac:	18500001 	ldmdane	r0, {r0}^
 1b0:	2c000001 	stccs	0, cr0, [r0], {1}
 1b4:	01000001 	tsteq	r0, r1
 1b8:	00005400 	andeq	r5, r0, r0, lsl #8
 1bc:	00000000 	andeq	r0, r0, r0
 1c0:	012c0000 	teqeq	ip, r0
 1c4:	01380000 	teqeq	r8, r0
 1c8:	00010000 	andeq	r0, r1, r0
 1cc:	00013850 	andeq	r3, r1, r0, asr r8
 1d0:	00018c00 	andeq	r8, r1, r0, lsl #24
 1d4:	f3000400 	vshl.u8	d0, d0, d0
 1d8:	009f5001 	addseq	r5, pc, r1
 1dc:	00000000 	andeq	r0, r0, r0
 1e0:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
 1e4:	a4000001 	strge	r0, [r0], #-1
 1e8:	01000001 	tsteq	r0, r1
 1ec:	01a45000 			; <UNDEFINED> instruction: 0x01a45000
 1f0:	01cc0000 	biceq	r0, ip, r0
 1f4:	00010000 	andeq	r0, r1, r0
 1f8:	00000055 	andeq	r0, r0, r5, asr r0
 1fc:	00000000 	andeq	r0, r0, r0
 200:	0001fc00 	andeq	pc, r1, r0, lsl #24
 204:	00020000 	andeq	r0, r2, r0
 208:	50000100 	andpl	r0, r0, r0, lsl #2
 20c:	00000200 	andeq	r0, r0, r0, lsl #4
 210:	00000203 	andeq	r0, r0, r3, lsl #4
 214:	00510001 	subseq	r0, r1, r1
	...
 220:	04000000 	streq	r0, [r0], #-0
 224:	01000000 	mrseq	r0, (UNDEF: 0)
 228:	00045200 	andeq	r5, r4, r0, lsl #4
 22c:	00200000 	eoreq	r0, r0, r0
 230:	00040000 	andeq	r0, r4, r0
 234:	9f5201f3 	svcls	0x005201f3
	...
 244:	0000000c 	andeq	r0, r0, ip
 248:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
 24c:	14000000 	strne	r0, [r0], #-0
 250:	03000000 	movweq	r0, #0
 254:	9f017300 	svcls	0x00017300
 258:	00000014 	andeq	r0, r0, r4, lsl r0
 25c:	00000020 	andeq	r0, r0, r0, lsr #32
 260:	00530001 	subseq	r0, r3, r1
 264:	00000000 	andeq	r0, r0, r0
 268:	2c000000 	stccs	0, cr0, [r0], {-0}
 26c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
 270:	01000000 	mrseq	r0, (UNDEF: 0)
 274:	00385000 	eorseq	r5, r8, r0
 278:	00480000 	subeq	r0, r8, r0
 27c:	00010000 	andeq	r0, r1, r0
 280:	00004855 	andeq	r4, r0, r5, asr r8
 284:	00005800 	andeq	r5, r0, r0, lsl #16
 288:	50000100 	andpl	r0, r0, r0, lsl #2
	...
 298:	00000010 	andeq	r0, r0, r0, lsl r0
 29c:	10500001 	subsne	r0, r0, r1
 2a0:	34000000 	strcc	r0, [r0], #-0
 2a4:	01000000 	mrseq	r0, (UNDEF: 0)
 2a8:	00005400 	andeq	r5, r0, r0, lsl #8
	...
 2b4:	00040000 	andeq	r0, r4, r0
 2b8:	00010000 	andeq	r0, r1, r0
 2bc:	00000450 	andeq	r0, r0, r0, asr r4
 2c0:	00000c00 	andeq	r0, r0, r0, lsl #24
 2c4:	70000300 	andvc	r0, r0, r0, lsl #6
 2c8:	000c9f30 	andeq	r9, ip, r0, lsr pc
 2cc:	00140000 	andseq	r0, r4, r0
 2d0:	00040000 	andeq	r0, r4, r0
 2d4:	9f5001f3 	svcls	0x005001f3
	...
 2e0:	00000014 	andeq	r0, r0, r4, lsl r0
 2e4:	00000020 	andeq	r0, r0, r0, lsr #32
 2e8:	20500001 	subscs	r0, r0, r1
 2ec:	2c000000 	stccs	0, cr0, [r0], {-0}
 2f0:	03000000 	movweq	r0, #0
 2f4:	9f017000 	svcls	0x00017000
 2f8:	0000002c 	andeq	r0, r0, ip, lsr #32
 2fc:	00000040 	andeq	r0, r0, r0, asr #32
 300:	00500001 	subseq	r0, r0, r1
 304:	00000000 	andeq	r0, r0, r0
 308:	14000000 	strne	r0, [r0], #-0
 30c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 310:	01000000 	mrseq	r0, (UNDEF: 0)
 314:	00185100 	andseq	r5, r8, r0, lsl #2
 318:	00400000 	subeq	r0, r0, r0
 31c:	00040000 	andeq	r0, r4, r0
 320:	9f5101f3 	svcls	0x005101f3
	...
 32c:	00000040 	andeq	r0, r0, r0, asr #32
 330:	00000060 	andeq	r0, r0, r0, rrx
 334:	60500001 	subsvs	r0, r0, r1
 338:	6c000000 	stcvs	0, cr0, [r0], {-0}
 33c:	03000000 	movweq	r0, #0
 340:	9f017100 	svcls	0x00017100
 344:	0000006c 	andeq	r0, r0, ip, rrx
 348:	00000074 	andeq	r0, r0, r4, ror r0
 34c:	74510001 	ldrbvc	r0, [r1], #-1
 350:	80000000 	andhi	r0, r0, r0
 354:	03000000 	movweq	r0, #0
 358:	9f017100 	svcls	0x00017100
	...
 364:	00000040 	andeq	r0, r0, r0, asr #32
 368:	00000050 	andeq	r0, r0, r0, asr r0
 36c:	50510001 	subspl	r0, r1, r1
 370:	80000000 	andhi	r0, r0, r0
 374:	04000000 	streq	r0, [r0], #-0
 378:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
 37c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 380:	00000000 	andeq	r0, r0, r0
 384:	00004000 	andeq	r4, r0, r0
 388:	00005800 	andeq	r5, r0, r0, lsl #16
 38c:	52000100 	andpl	r0, r0, #0, 2
 390:	00000058 	andeq	r0, r0, r8, asr r0
 394:	00000064 	andeq	r0, r0, r4, rrx
 398:	64520001 	ldrbvs	r0, [r2], #-1
 39c:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
 3a0:	03000000 	movweq	r0, #0
 3a4:	9f017200 	svcls	0x00017200
 3a8:	00000068 	andeq	r0, r0, r8, rrx
 3ac:	00000080 	andeq	r0, r0, r0, lsl #1
 3b0:	00520001 	subseq	r0, r2, r1
 3b4:	00000000 	andeq	r0, r0, r0
 3b8:	40000000 	andmi	r0, r0, r0
 3bc:	54000000 	strpl	r0, [r0], #-0
 3c0:	01000000 	mrseq	r0, (UNDEF: 0)
 3c4:	00545300 	subseq	r5, r4, r0, lsl #6
 3c8:	00780000 	rsbseq	r0, r8, r0
 3cc:	00010000 	andeq	r0, r1, r0
 3d0:	00000053 	andeq	r0, r0, r3, asr r0
 3d4:	00000000 	andeq	r0, r0, r0
 3d8:	00004800 	andeq	r4, r0, r0, lsl #16
 3dc:	00006000 	andeq	r6, r0, r0
 3e0:	5c000100 	stfpls	f0, [r0], {-0}
 3e4:	00000060 	andeq	r0, r0, r0, rrx
 3e8:	00000080 	andeq	r0, r0, r0, lsl #1
 3ec:	01f3000a 	mvnseq	r0, sl
 3f0:	5301f352 	movwpl	pc, #4946	; 0x1352	; <UNPREDICTABLE>
 3f4:	9f01231c 	svcls	0x0001231c
	...
 400:	00000080 	andeq	r0, r0, r0, lsl #1
 404:	000000a4 	andeq	r0, r0, r4, lsr #1
 408:	a4500001 	ldrbge	r0, [r0], #-1
 40c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 410:	03000001 	movweq	r0, #1
 414:	9f027000 	svcls	0x00027000
 418:	00000118 	andeq	r0, r0, r8, lsl r1
 41c:	00000218 	andeq	r0, r0, r8, lsl r2
 420:	01f30004 	mvnseq	r0, r4
 424:	00009f50 	andeq	r9, r0, r0, asr pc
 428:	00000000 	andeq	r0, r0, r0
 42c:	00800000 	addeq	r0, r0, r0
 430:	00f00000 	rscseq	r0, r0, r0
 434:	00010000 	andeq	r0, r1, r0
 438:	0000f051 	andeq	pc, r0, r1, asr r0	; <UNPREDICTABLE>
 43c:	00016000 	andeq	r6, r1, r0
 440:	55000100 	strpl	r0, [r0, #-256]	; 0x100
 444:	00000160 	andeq	r0, r0, r0, ror #2
 448:	00000168 	andeq	r0, r0, r8, ror #2
 44c:	68510001 	ldmdavs	r1, {r0}^
 450:	88000001 	stmdahi	r0, {r0}
 454:	01000001 	tsteq	r0, r1
 458:	01885500 	orreq	r5, r8, r0, lsl #10
 45c:	019c0000 	orrseq	r0, ip, r0
 460:	00010000 	andeq	r0, r1, r0
 464:	00019c51 	andeq	r9, r1, r1, asr ip
 468:	0001bc00 	andeq	fp, r1, r0, lsl #24
 46c:	55000100 	strpl	r0, [r0, #-256]	; 0x100
 470:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
 474:	000001c4 	andeq	r0, r0, r4, asr #3
 478:	c4510001 	ldrbgt	r0, [r1], #-1
 47c:	fc000001 	stc2	0, cr0, [r0], {1}
 480:	01000001 	tsteq	r0, r1
 484:	01fc5500 	mvnseq	r5, r0, lsl #10
 488:	02180000 	andseq	r0, r8, #0
 48c:	00040000 	andeq	r0, r4, r0
 490:	9f5101f3 	svcls	0x005101f3
	...
 49c:	00000080 	andeq	r0, r0, r0, lsl #1
 4a0:	00000094 	muleq	r0, r4, r0
 4a4:	94520001 	ldrbls	r0, [r2], #-1
 4a8:	fc000000 	stc2	0, cr0, [r0], {-0}
 4ac:	01000001 	tsteq	r0, r1
 4b0:	01fc5400 	mvnseq	r5, r0, lsl #8
 4b4:	02180000 	andseq	r0, r8, #0
 4b8:	00040000 	andeq	r0, r4, r0
 4bc:	9f5201f3 	svcls	0x005201f3
	...
 4c8:	00000080 	andeq	r0, r0, r0, lsl #1
 4cc:	00000100 	andeq	r0, r0, r0, lsl #2
 4d0:	04530001 	ldrbeq	r0, [r3], #-1
 4d4:	08000001 	stmdaeq	r0, {r0}
 4d8:	01000001 	tsteq	r0, r1
 4dc:	01605300 	cmneq	r0, r0, lsl #6
 4e0:	01680000 	cmneq	r8, r0
 4e4:	00010000 	andeq	r0, r1, r0
 4e8:	00016853 	andeq	r6, r1, r3, asr r8
 4ec:	00018800 	andeq	r8, r1, r0, lsl #16
 4f0:	f3000400 	vshl.u8	d0, d0, d0
 4f4:	889f5301 	ldmhi	pc, {r0, r8, r9, ip, lr}	; <UNPREDICTABLE>
 4f8:	90000001 	andls	r0, r0, r1
 4fc:	01000001 	tsteq	r0, r1
 500:	01905300 	orrseq	r5, r0, r0, lsl #6
 504:	01940000 	orrseq	r0, r4, r0
 508:	00010000 	andeq	r0, r1, r0
 50c:	0001945c 	andeq	r9, r1, ip, asr r4
 510:	00019c00 	andeq	r9, r1, r0, lsl #24
 514:	53000100 	movwpl	r0, #256	; 0x100
 518:	0000019c 	muleq	r0, ip, r1
 51c:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
 520:	01f30004 	mvnseq	r0, r4
 524:	01bc9f53 			; <UNDEFINED> instruction: 0x01bc9f53
 528:	01cc0000 	biceq	r0, ip, r0
 52c:	00010000 	andeq	r0, r1, r0
 530:	0001cc53 	andeq	ip, r1, r3, asr ip
 534:	0001cf00 	andeq	ip, r1, r0, lsl #30
 538:	5c000100 	stfpls	f0, [r0], {-0}
 53c:	000001cf 	andeq	r0, r0, pc, asr #3
 540:	000001d4 	ldrdeq	r0, [r0], -r4
 544:	01f30004 	mvnseq	r0, r4
 548:	00009f53 	andeq	r9, r0, r3, asr pc
 54c:	00000000 	andeq	r0, r0, r0
 550:	00800000 	addeq	r0, r0, r0
 554:	009c0000 	addseq	r0, ip, r0
 558:	00020000 	andeq	r0, r2, r0
 55c:	009c0091 	umullseq	r0, ip, r1, r0
 560:	01c80000 	biceq	r0, r8, r0
 564:	00010000 	andeq	r0, r1, r0
 568:	0001d452 	andeq	sp, r1, r2, asr r4
 56c:	0001df00 	andeq	sp, r1, r0, lsl #30
 570:	52000100 	andpl	r0, r0, #0, 2
	...
 57c:	0000009c 	muleq	r0, ip, r0
 580:	00000118 	andeq	r0, r0, r8, lsl r1
 584:	185d0001 	ldmdane	sp, {r0}^
 588:	1c000001 	stcne	0, cr0, [r0], {1}
 58c:	01000001 	tsteq	r0, r1
 590:	011c5300 	tsteq	ip, r0, lsl #6
 594:	01200000 	teqeq	r0, r0
 598:	00010000 	andeq	r0, r1, r0
 59c:	00012051 	andeq	r2, r1, r1, asr r0
 5a0:	00016000 	andeq	r6, r1, r0
 5a4:	53000100 	movwpl	r0, #256	; 0x100
 5a8:	00000160 	andeq	r0, r0, r0, ror #2
 5ac:	00000168 	andeq	r0, r0, r8, ror #2
 5b0:	685d0001 	ldmdavs	sp, {r0}^
 5b4:	6c000001 	stcvs	0, cr0, [r0], {1}
 5b8:	01000001 	tsteq	r0, r1
 5bc:	016c5e00 	cmneq	ip, r0, lsl #28
 5c0:	01880000 	orreq	r0, r8, r0
 5c4:	00010000 	andeq	r0, r1, r0
 5c8:	00018853 	andeq	r8, r1, r3, asr r8
 5cc:	00019000 	andeq	r9, r1, r0
 5d0:	91000400 	tstls	r0, r0, lsl #8
 5d4:	909f7fa1 	addsls	r7, pc, r1, lsr #31
 5d8:	94000001 	strls	r0, [r0], #-1
 5dc:	01000001 	tsteq	r0, r1
 5e0:	01945300 	orrseq	r5, r4, r0, lsl #6
 5e4:	019c0000 	orrseq	r0, ip, r0
 5e8:	00010000 	andeq	r0, r1, r0
 5ec:	00019c5d 	andeq	r9, r1, sp, asr ip
 5f0:	0001a000 	andeq	sl, r1, r0
 5f4:	5e000100 	adfpls	f0, f0, f0
 5f8:	000001a0 	andeq	r0, r0, r0, lsr #3
 5fc:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
 600:	bc530001 	mrrclt	0, 0, r0, r3, cr1
 604:	d4000001 	strle	r0, [r0], #-1
 608:	01000001 	tsteq	r0, r1
 60c:	01d45d00 	bicseq	r5, r4, r0, lsl #26
 610:	01df0000 	bicseq	r0, pc, r0
 614:	00010000 	andeq	r0, r1, r0
 618:	00000053 	andeq	r0, r0, r3, asr r0
 61c:	00000000 	andeq	r0, r0, r0
 620:	0000a000 	andeq	sl, r0, r0
 624:	0000ec00 	andeq	lr, r0, r0, lsl #24
 628:	5c000100 	stfpls	f0, [r0], {-0}
 62c:	000000ec 	andeq	r0, r0, ip, ror #1
 630:	00000100 	andeq	r0, r0, r0, lsl #2
 634:	00530001 	subseq	r0, r3, r1
 638:	04000001 	streq	r0, [r0], #-1
 63c:	01000001 	tsteq	r0, r1
 640:	01045c00 	tsteq	r4, r0, lsl #24
 644:	01080000 	mrseq	r0, (UNDEF: 8)
 648:	00010000 	andeq	r0, r1, r0
 64c:	00010853 	andeq	r0, r1, r3, asr r8
 650:	00011800 	andeq	r1, r1, r0, lsl #16
 654:	5c000100 	stfpls	f0, [r0], {-0}
 658:	00000118 	andeq	r0, r0, r8, lsl r1
 65c:	0000011c 	andeq	r0, r0, ip, lsl r1
 660:	1c500001 	mrrcne	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
 664:	3c000001 	stccc	0, cr0, [r0], {1}
 668:	01000001 	tsteq	r0, r1
 66c:	01445c00 	cmpeq	r4, r0, lsl #24
 670:	01580000 	cmpeq	r8, r0
 674:	00010000 	andeq	r0, r1, r0
 678:	00015850 	andeq	r5, r1, r0, asr r8
 67c:	00016000 	andeq	r6, r1, r0
 680:	5c000100 	stfpls	f0, [r0], {-0}
 684:	00000160 	andeq	r0, r0, r0, ror #2
 688:	00000168 	andeq	r0, r0, r8, ror #2
 68c:	68530001 	ldmdavs	r3, {r0}^
 690:	78000001 	stmdavc	r0, {r0}
 694:	01000001 	tsteq	r0, r1
 698:	01785c00 	cmneq	r8, r0, lsl #24
 69c:	01800000 	orreq	r0, r0, r0
 6a0:	00050000 	andeq	r0, r5, r0
 6a4:	2534007c 	ldrcs	r0, [r4, #-124]!	; 0x7c
 6a8:	0001809f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
 6ac:	00018800 	andeq	r8, r1, r0, lsl #16
 6b0:	5c000100 	stfpls	f0, [r0], {-0}
 6b4:	00000188 	andeq	r0, r0, r8, lsl #3
 6b8:	00000190 	muleq	r0, r0, r1
 6bc:	90530001 	subsls	r0, r3, r1
 6c0:	94000001 	strls	r0, [r0], #-1
 6c4:	01000001 	tsteq	r0, r1
 6c8:	01945c00 	orrseq	r5, r4, r0, lsl #24
 6cc:	019c0000 	orrseq	r0, ip, r0
 6d0:	00010000 	andeq	r0, r1, r0
 6d4:	00019c53 	andeq	r9, r1, r3, asr ip
 6d8:	0001ac00 	andeq	sl, r1, r0, lsl #24
 6dc:	5c000100 	stfpls	f0, [r0], {-0}
 6e0:	000001ac 	andeq	r0, r0, ip, lsr #3
 6e4:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
 6e8:	007c0005 	rsbseq	r0, ip, r5
 6ec:	b49f2531 	ldrlt	r2, [pc], #1329	; 6f4 <_start-0x790c>
 6f0:	bc000001 	stclt	0, cr0, [r0], {1}
 6f4:	01000001 	tsteq	r0, r1
 6f8:	01bc5c00 			; <UNDEFINED> instruction: 0x01bc5c00
 6fc:	01cc0000 	biceq	r0, ip, r0
 700:	00010000 	andeq	r0, r1, r0
 704:	0001cc53 	andeq	ip, r1, r3, asr ip
 708:	0001cf00 	andeq	ip, r1, r0, lsl #30
 70c:	5c000100 	stfpls	f0, [r0], {-0}
 710:	000001cf 	andeq	r0, r0, pc, asr #3
 714:	000001d4 	ldrdeq	r0, [r0], -r4
 718:	01f30004 	mvnseq	r0, r4
 71c:	01d49f53 	bicseq	r9, r4, r3, asr pc
 720:	01df0000 	bicseq	r0, pc, r0
 724:	00010000 	andeq	r0, r1, r0
 728:	0000005c 	andeq	r0, r0, ip, asr r0
 72c:	00000000 	andeq	r0, r0, r0
 730:	0000ec00 	andeq	lr, r0, r0, lsl #24
 734:	0000fc00 	andeq	pc, r0, r0, lsl #24
 738:	30000200 	andcc	r0, r0, r0, lsl #4
 73c:	0000fc9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
 740:	00010400 	andeq	r0, r1, r0, lsl #8
 744:	31000200 	mrscc	r0, R8_usr
 748:	0001049f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
 74c:	00010800 	andeq	r0, r1, r0, lsl #16
 750:	30000200 	andcc	r0, r0, r0, lsl #4
 754:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 758:	00000000 	andeq	r0, r0, r0
 75c:	00021800 	andeq	r1, r2, r0, lsl #16
 760:	00022800 	andeq	r2, r2, r0, lsl #16
 764:	50000100 	andpl	r0, r0, r0, lsl #2
 768:	00000228 	andeq	r0, r0, r8, lsr #4
 76c:	0000023c 	andeq	r0, r0, ip, lsr r2
 770:	01f30004 	mvnseq	r0, r4
 774:	023c9f50 	eorseq	r9, ip, #80, 30	; 0x140
 778:	02680000 	rsbeq	r0, r8, #0
 77c:	00010000 	andeq	r0, r1, r0
 780:	00000050 	andeq	r0, r0, r0, asr r0
 784:	00000000 	andeq	r0, r0, r0
 788:	00021800 	andeq	r1, r2, r0, lsl #16
 78c:	00022c00 	andeq	r2, r2, r0, lsl #24
 790:	51000100 	mrspl	r0, (UNDEF: 16)
 794:	0000022c 	andeq	r0, r0, ip, lsr #4
 798:	0000023c 	andeq	r0, r0, ip, lsr r2
 79c:	01f30004 	mvnseq	r0, r4
 7a0:	023c9f51 	eorseq	r9, ip, #324	; 0x144
 7a4:	02680000 	rsbeq	r0, r8, #0
 7a8:	00010000 	andeq	r0, r1, r0
 7ac:	00000051 	andeq	r0, r0, r1, asr r0
 7b0:	00000000 	andeq	r0, r0, r0
 7b4:	00026800 	andeq	r6, r2, r0, lsl #16
 7b8:	00029000 	andeq	r9, r2, r0
 7bc:	50000100 	andpl	r0, r0, r0, lsl #2
 7c0:	00000290 	muleq	r0, r0, r2
 7c4:	000004dc 	ldrdeq	r0, [r0], -ip
 7c8:	dc5b0001 	mrrcle	0, 0, r0, fp, cr1
 7cc:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
 7d0:	04000004 	streq	r0, [r0], #-4
 7d4:	5001f300 	andpl	pc, r1, r0, lsl #6
 7d8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 7dc:	00000000 	andeq	r0, r0, r0
 7e0:	00026800 	andeq	r6, r2, r0, lsl #16
 7e4:	00027c00 	andeq	r7, r2, r0, lsl #24
 7e8:	51000100 	mrspl	r0, (UNDEF: 16)
 7ec:	0000027c 	andeq	r0, r0, ip, ror r2
 7f0:	00000290 	muleq	r0, r0, r2
 7f4:	01710003 	cmneq	r1, r3
 7f8:	0002909f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
 7fc:	0004f000 	andeq	pc, r4, r0
 800:	f3000400 	vshl.u8	d0, d0, d0
 804:	009f5101 	addseq	r5, pc, r1, lsl #2
 808:	00000000 	andeq	r0, r0, r0
 80c:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
 810:	98000002 	stmdals	r0, {r1}
 814:	01000002 	tsteq	r0, r2
 818:	02985200 	addseq	r5, r8, #0, 4
 81c:	02c00000 	sbceq	r0, r0, #0
 820:	00010000 	andeq	r0, r1, r0
 824:	0002c052 	andeq	ip, r2, r2, asr r0
 828:	00048c00 	andeq	r8, r4, r0, lsl #24
 82c:	56000100 	strpl	r0, [r0], -r0, lsl #2
 830:	0000048c 	andeq	r0, r0, ip, lsl #9
 834:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 838:	00520001 	subseq	r0, r2, r1
 83c:	00000000 	andeq	r0, r0, r0
 840:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
 844:	84000002 	strhi	r0, [r0], #-2
 848:	01000002 	tsteq	r0, r2
 84c:	00005300 	andeq	r5, r0, r0, lsl #6
 850:	00000000 	andeq	r0, r0, r0
 854:	02780000 	rsbseq	r0, r8, #0
 858:	02900000 	addseq	r0, r0, #0
 85c:	00010000 	andeq	r0, r1, r0
 860:	00029050 	andeq	r9, r2, r0, asr r0
 864:	00029400 	andeq	r9, r2, r0, lsl #8
 868:	54000100 	strpl	r0, [r0], #-256	; 0x100
 86c:	00000294 	muleq	r0, r4, r2
 870:	000002a0 	andeq	r0, r0, r0, lsr #5
 874:	01740003 	cmneq	r4, r3
 878:	0002a09f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
 87c:	0002ac00 	andeq	sl, r2, r0, lsl #24
 880:	54000100 	strpl	r0, [r0], #-256	; 0x100
 884:	000002ac 	andeq	r0, r0, ip, lsr #5
 888:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 88c:	01740003 	cmneq	r4, r3
 890:	0002b89f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
 894:	00049000 	andeq	r9, r4, r0
 898:	54000100 	strpl	r0, [r0], #-256	; 0x100
 89c:	00000490 	muleq	r0, r0, r4
 8a0:	0000049c 	muleq	r0, ip, r4
 8a4:	01740003 	cmneq	r4, r3
 8a8:	00049c9f 	muleq	r4, pc, ip	; <UNPREDICTABLE>
 8ac:	0004c800 	andeq	ip, r4, r0, lsl #16
 8b0:	54000100 	strpl	r0, [r0], #-256	; 0x100
 8b4:	000004c8 	andeq	r0, r0, r8, asr #9
 8b8:	000004d4 	ldrdeq	r0, [r0], -r4
 8bc:	d4500001 	ldrble	r0, [r0], #-1
 8c0:	dc000004 	stcle	0, cr0, [r0], {4}
 8c4:	03000004 	movweq	r0, #4
 8c8:	9f017400 	svcls	0x00017400
	...
 8d4:	00000280 	andeq	r0, r0, r0, lsl #5
 8d8:	000004dc 	ldrdeq	r0, [r0], -ip
 8dc:	dc580001 	mrrcle	0, 0, r0, r8, cr1
 8e0:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
 8e4:	0a000004 	beq	8fc <_start-0x7704>
 8e8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
 8ec:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
 8f0:	009f1c31 	addseq	r1, pc, r1, lsr ip	; <UNPREDICTABLE>
 8f4:	00000000 	andeq	r0, r0, r0
 8f8:	bc000000 	stclt	0, cr0, [r0], {-0}
 8fc:	c0000003 	andgt	r0, r0, r3
 900:	01000003 	tsteq	r0, r3
 904:	03e45000 	mvneq	r5, #0
 908:	03e80000 	mvneq	r0, #0
 90c:	00010000 	andeq	r0, r1, r0
 910:	00040c50 	andeq	r0, r4, r0, asr ip
 914:	00041000 	andeq	r1, r4, r0
 918:	50000100 	andpl	r0, r0, r0, lsl #2
 91c:	00000434 	andeq	r0, r0, r4, lsr r4
 920:	00000438 	andeq	r0, r0, r8, lsr r4
 924:	40500001 	subsmi	r0, r0, r1
 928:	44000004 	strmi	r0, [r0], #-4
 92c:	01000004 	tsteq	r0, r4
 930:	04685000 	strbteq	r5, [r8], #-0
 934:	046c0000 	strbteq	r0, [ip], #-0
 938:	00010000 	andeq	r0, r1, r0
 93c:	00048850 	andeq	r8, r4, r0, asr r8
 940:	0004b000 	andeq	fp, r4, r0
 944:	50000100 	andpl	r0, r0, r0, lsl #2
	...
 950:	000002c0 	andeq	r0, r0, r0, asr #5
 954:	000002c8 	andeq	r0, r0, r8, asr #5
 958:	9f300002 	svcls	0x00300002
 95c:	000002c8 	andeq	r0, r0, r8, asr #5
 960:	000002cc 	andeq	r0, r0, ip, asr #5
 964:	d8570001 	ldmdale	r7, {r0}^
 968:	b0000002 	andlt	r0, r0, r2
 96c:	01000004 	tsteq	r0, r4
 970:	00005700 	andeq	r5, r0, r0, lsl #14
 974:	00000000 	andeq	r0, r0, r0
 978:	00140000 	andseq	r0, r4, r0
 97c:	001c0000 	andseq	r0, ip, r0
 980:	00030000 	andeq	r0, r3, r0
 984:	1c9f0473 	cfldrsne	mvf0, [pc], {115}	; 0x73
 988:	27000000 	strcs	r0, [r0, -r0]
 98c:	01000000 	mrseq	r0, (UNDEF: 0)
 990:	00005300 	andeq	r5, r0, r0, lsl #6
 994:	00000000 	andeq	r0, r0, r0
 998:	89800000 	stmibhi	r0, {}	; <UNPREDICTABLE>
 99c:	89840000 	stmibhi	r4, {}	; <UNPREDICTABLE>
 9a0:	00020000 	andeq	r0, r2, r0
 9a4:	89849f30 	stmibhi	r4, {r4, r5, r8, r9, sl, fp, ip, pc}
 9a8:	89880000 	stmibhi	r8, {}	; <UNPREDICTABLE>
 9ac:	00010000 	andeq	r0, r1, r0
 9b0:	00000050 	andeq	r0, r0, r0, asr r0
 9b4:	00000000 	andeq	r0, r0, r0
 9b8:	00899800 	addeq	r9, r9, r0, lsl #16
 9bc:	00899c00 	addeq	r9, r9, r0, lsl #24
 9c0:	30000200 	andcc	r0, r0, r0, lsl #4
 9c4:	00899c9f 	umulleq	r9, r9, pc, ip	; <UNPREDICTABLE>
 9c8:	0089a000 	addeq	sl, r9, r0
 9cc:	53000100 	movwpl	r0, #256	; 0x100
 9d0:	000089a4 	andeq	r8, r0, r4, lsr #19
 9d4:	000089ac 	andeq	r8, r0, ip, lsr #19
 9d8:	00530001 	subseq	r0, r3, r1
	...
 9e4:	04000000 	streq	r0, [r0], #-0
 9e8:	01000000 	mrseq	r0, (UNDEF: 0)
 9ec:	00045000 	andeq	r5, r4, r0
 9f0:	000c0000 	andeq	r0, ip, r0
 9f4:	00010000 	andeq	r0, r1, r0
 9f8:	00000c53 	andeq	r0, r0, r3, asr ip
 9fc:	00001000 	andeq	r1, r0, r0
 a00:	50000100 	andpl	r0, r0, r0, lsl #2
 a04:	00000010 	andeq	r0, r0, r0, lsl r0
 a08:	0000001c 	andeq	r0, r0, ip, lsl r0
 a0c:	00530001 	subseq	r0, r3, r1
 a10:	00000000 	andeq	r0, r0, r0
 a14:	30000000 	andcc	r0, r0, r0
 a18:	3b000000 	blcc	a20 <_start-0x75e0>
 a1c:	01000000 	mrseq	r0, (UNDEF: 0)
 a20:	003b5000 	eorseq	r5, fp, r0
 a24:	00540000 	subseq	r0, r4, r0
 a28:	00010000 	andeq	r0, r1, r0
 a2c:	00000055 	andeq	r0, r0, r5, asr r0
 a30:	00000000 	andeq	r0, r0, r0
 a34:	00004400 	andeq	r4, r0, r0, lsl #8
 a38:	00004800 	andeq	r4, r0, r0, lsl #16
 a3c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
 a48:	00000054 	andeq	r0, r0, r4, asr r0
 a4c:	00000060 	andeq	r0, r0, r0, rrx
 a50:	60500001 	subsvs	r0, r0, r1
 a54:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
 a58:	04000000 	streq	r0, [r0], #-0
 a5c:	5001f300 	andpl	pc, r1, r0, lsl #6
 a60:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 a64:	00000000 	andeq	r0, r0, r0
 a68:	00006800 	andeq	r6, r0, r0, lsl #16
 a6c:	00007400 	andeq	r7, r0, r0, lsl #8
 a70:	50000100 	andpl	r0, r0, r0, lsl #2
 a74:	00000074 	andeq	r0, r0, r4, ror r0
 a78:	0000007c 	andeq	r0, r0, ip, ror r0
 a7c:	01f30004 	mvnseq	r0, r4
 a80:	00009f50 	andeq	r9, r0, r0, asr pc
	...
 a8c:	00180000 	andseq	r0, r8, r0
 a90:	00010000 	andeq	r0, r1, r0
 a94:	00001850 	andeq	r1, r0, r0, asr r8
 a98:	00002c00 	andeq	r2, r0, r0, lsl #24
 a9c:	f3000400 	vshl.u8	d0, d0, d0
 aa0:	2c9f5001 	ldccs	0, cr5, [pc], {1}
 aa4:	40000000 	andmi	r0, r0, r0
 aa8:	01000000 	mrseq	r0, (UNDEF: 0)
 aac:	00405000 	subeq	r5, r0, r0
 ab0:	00640000 	rsbeq	r0, r4, r0
 ab4:	00040000 	andeq	r0, r4, r0
 ab8:	9f5001f3 	svcls	0x005001f3
	...
 ac4:	0000003c 	andeq	r0, r0, ip, lsr r0
 ac8:	0000004b 	andeq	r0, r0, fp, asr #32
 acc:	4b520001 	blmi	1480ad8 <__bss_end__+0x1477418>
 ad0:	64000000 	strvs	r0, [r0], #-0
 ad4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 ad8:	5001f300 	andpl	pc, r1, r0, lsl #6
 adc:	fc090323 	stc2	3, cr0, [r9], {35}	; 0x23
 ae0:	00009f1a 	andeq	r9, r0, sl, lsl pc
 ae4:	00000000 	andeq	r0, r0, r0
 ae8:	00640000 	rsbeq	r0, r4, r0
 aec:	007c0000 	rsbseq	r0, ip, r0
 af0:	00010000 	andeq	r0, r1, r0
 af4:	00007c50 	andeq	r7, r0, r0, asr ip
 af8:	00009000 	andeq	r9, r0, r0
 afc:	f3000400 	vshl.u8	d0, d0, d0
 b00:	909f5001 	addsls	r5, pc, r1
 b04:	9b000000 	blls	b0c <_start-0x74f4>
 b08:	01000000 	mrseq	r0, (UNDEF: 0)
 b0c:	009b5000 	addseq	r5, fp, r0
 b10:	00a00000 	adceq	r0, r0, r0
 b14:	00040000 	andeq	r0, r4, r0
 b18:	9f5001f3 	svcls	0x005001f3
 b1c:	000000a0 	andeq	r0, r0, r0, lsr #1
 b20:	000000ac 	andeq	r0, r0, ip, lsr #1
 b24:	ac500001 	mrrcge	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
 b28:	c0000000 	andgt	r0, r0, r0
 b2c:	04000000 	streq	r0, [r0], #-0
 b30:	5001f300 	andpl	pc, r1, r0, lsl #6
 b34:	0000c09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 b38:	0000df00 	andeq	sp, r0, r0, lsl #30
 b3c:	50000100 	andpl	r0, r0, r0, lsl #2
 b40:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 b44:	000000f8 	strdeq	r0, [r0], -r8
 b48:	01f30004 	mvnseq	r0, r4
 b4c:	00009f50 	andeq	r9, r0, r0, asr pc
 b50:	00000000 	andeq	r0, r0, r0
 b54:	00640000 	rsbeq	r0, r4, r0
 b58:	00800000 	addeq	r0, r0, r0
 b5c:	00010000 	andeq	r0, r1, r0
 b60:	00008051 	andeq	r8, r0, r1, asr r0
 b64:	00009000 	andeq	r9, r0, r0
 b68:	f3000400 	vshl.u8	d0, d0, d0
 b6c:	909f5101 	addsls	r5, pc, r1, lsl #2
 b70:	9b000000 	blls	b78 <_start-0x7488>
 b74:	01000000 	mrseq	r0, (UNDEF: 0)
 b78:	009b5100 	addseq	r5, fp, r0, lsl #2
 b7c:	00a00000 	adceq	r0, r0, r0
 b80:	00040000 	andeq	r0, r4, r0
 b84:	9f5101f3 	svcls	0x005101f3
 b88:	000000a0 	andeq	r0, r0, r0, lsr #1
 b8c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 b90:	b0510001 	subslt	r0, r1, r1
 b94:	c0000000 	andgt	r0, r0, r0
 b98:	04000000 	streq	r0, [r0], #-0
 b9c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
 ba0:	0000c09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 ba4:	0000d400 	andeq	sp, r0, r0, lsl #8
 ba8:	51000100 	mrspl	r0, (UNDEF: 16)
 bac:	000000d4 	ldrdeq	r0, [r0], -r4
 bb0:	000000d8 	ldrdeq	r0, [r0], -r8
 bb4:	00710004 	rsbseq	r0, r1, r4
 bb8:	00d89f1f 	sbcseq	r9, r8, pc, lsl pc
 bbc:	00f80000 	rscseq	r0, r8, r0
 bc0:	00040000 	andeq	r0, r4, r0
 bc4:	9f5101f3 	svcls	0x005101f3
	...
 bd0:	000000c8 	andeq	r0, r0, r8, asr #1
 bd4:	000000cc 	andeq	r0, r0, ip, asr #1
 bd8:	cc520001 	mrrcgt	0, 0, r0, r2, cr1
 bdc:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
 be0:	05000000 	streq	r0, [r0, #-0]
 be4:	96b80300 	ldrtls	r0, [r8], r0, lsl #6
 be8:	00d80000 	sbcseq	r0, r8, r0
 bec:	00df0000 	sbcseq	r0, pc, r0
 bf0:	00010000 	andeq	r0, r1, r0
 bf4:	00000051 	andeq	r0, r0, r1, asr r0
	...
 c00:	00000b00 	andeq	r0, r0, r0, lsl #22
 c04:	50000100 	andpl	r0, r0, r0, lsl #2
 c08:	0000000b 	andeq	r0, r0, fp
 c0c:	00000014 	andeq	r0, r0, r4, lsl r0
 c10:	00540001 	subseq	r0, r4, r1
 c14:	00000000 	andeq	r0, r0, r0
 c18:	Address 0x0000000000000c18 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	00008010 	andeq	r8, r0, r0, lsl r0
  14:	00000150 	andeq	r0, r0, r0, asr r1
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	04440002 	strbeq	r0, [r4], #-2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	00008160 	andeq	r8, r0, r0, ror #2
  34:	0000021c 	andeq	r0, r0, ip, lsl r2
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	09c70002 	stmibeq	r7, {r1}^
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	000083b0 			; <UNDEFINED> instruction: 0x000083b0
  54:	00000020 	andeq	r0, r0, r0, lsr #32
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	0aa60002 	beq	fe980074 <__bss_end__+0xfe9769b4>
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	000083d0 	ldrdeq	r8, [r0], -r0
  74:	00000058 	andeq	r0, r0, r8, asr r0
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	0c3b0002 	ldceq	0, cr0, [fp], #-8
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	00008428 	andeq	r8, r0, r8, lsr #8
  94:	00000034 	andeq	r0, r0, r4, lsr r0
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	0d2d0002 	stceq	0, cr0, [sp, #-8]!
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	0000845c 	andeq	r8, r0, ip, asr r4
  b4:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	13850002 	orrne	r0, r5, #2
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	0000894c 	andeq	r8, r0, ip, asr #18
  d4:	00000034 	andeq	r0, r0, r4, lsr r0
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	14940002 	ldrne	r0, [r4], #2
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	00008980 	andeq	r8, r0, r0, lsl #19
  f4:	00000074 	andeq	r0, r0, r4, ror r0
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	16450002 	strbne	r0, [r5], -r2
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	000089f4 	strdeq	r8, [r0], -r4
 114:	0000007c 	andeq	r0, r0, ip, ror r0
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	17f30002 	ldrbne	r0, [r3, r2]!
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	00008d48 	andeq	r8, r0, r8, asr #26
 134:	00000178 	andeq	r0, r0, r8, ror r1
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	1b3f0002 	blne	fc0154 <__bss_end__+0xfb6a94>
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	00008ec0 	andeq	r8, r0, r0, asr #29
 154:	00000014 	andeq	r0, r0, r4, lsl r0
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000186 	andeq	r0, r0, r6, lsl #3
   4:	013c0002 	teqeq	ip, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2f010000 	svccs	0x00010000
  1c:	2f727375 	svccs	0x00727375
  20:	61636f6c 	cmnvs	r3, ip, ror #30
  24:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
  28:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
  2c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
  30:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
  34:	61652d65 	cmnvs	r5, r5, ror #26
  38:	342f6962 	strtcc	r6, [pc], #-2402	; 40 <_start-0x7fc0>
  3c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
  40:	3173632d 	cmncc	r3, sp, lsr #6
  44:	2f653037 	svccs	0x00653037
  48:	2f62696c 	svccs	0x0062696c
  4c:	2f636367 	svccs	0x00636367
  50:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
  54:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
  58:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
  5c:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
  60:	2f332e38 	svccs	0x00332e38
  64:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  68:	00656475 	rsbeq	r6, r5, r5, ror r4
  6c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
  70:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
  74:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
  78:	2f6e756a 	svccs	0x006e756a
  7c:	6b736544 	blvs	1cd9594 <__bss_end__+0x1ccfed4>
  80:	2f706f74 	svccs	0x00706f74
  84:	6f686373 	svcvs	0x00686373
  88:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
  8c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
  90:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
  94:	53432f30 	movtpl	r2, #16176	; 0x3f30
  98:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
  9c:	3173632f 	cmncc	r3, pc, lsr #6
  a0:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
  a4:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
  a8:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
  ac:	00697062 	rsbeq	r7, r9, r2, rrx
  b0:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
  b4:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
  b8:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
  bc:	2f6e756a 	svccs	0x006e756a
  c0:	6b736544 	blvs	1cd95d8 <__bss_end__+0x1ccff18>
  c4:	2f706f74 	svccs	0x00706f74
  c8:	6f686373 	svcvs	0x00686373
  cc:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
  d0:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
  d4:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
  d8:	53432f30 	movtpl	r2, #16176	; 0x3f30
  dc:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
  e0:	3173632f 	cmncc	r3, pc, lsr #6
  e4:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
  e8:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
  ec:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
  f0:	2f697062 	svccs	0x00697062
  f4:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
  f8:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
  fc:	00006372 	andeq	r6, r0, r2, ror r3
 100:	65742d33 	ldrbvs	r2, [r4, #-3379]!	; 0xd33
 104:	792d7473 	pushvc	{r0, r1, r4, r5, r6, sl, ip, sp, lr}
 108:	646c6569 	strbtvs	r6, [ip], #-1385	; 0x569
 10c:	0000632e 	andeq	r6, r0, lr, lsr #6
 110:	70720000 	rsbsvc	r0, r2, r0
 114:	68742d69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, sl, fp, sp}^
 118:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 11c:	0000682e 	andeq	r6, r0, lr, lsr #16
 120:	74730000 	ldrbtvc	r0, [r3], #-0
 124:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
 128:	6363672d 	cmnvs	r3, #11796480	; 0xb40000
 12c:	0100682e 	tsteq	r0, lr, lsr #16
 130:	70720000 	rsbsvc	r0, r2, r0
 134:	00682e69 	rsbeq	r2, r8, r9, ror #28
 138:	67000002 	strvs	r0, [r0, -r2]
 13c:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
 140:	00030068 	andeq	r0, r3, r8, rrx
 144:	05000000 	streq	r0, [r0, #-0]
 148:	00801002 	addeq	r1, r0, r2
 14c:	010e0300 	mrseq	r0, ELR_hyp
 150:	04020067 	streq	r0, [r2], #-103	; 0x67
 154:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 158:	2f844cd7 	svccs	0x00844cd7
 15c:	4b4dbe2f 	blmi	136fa20 <__bss_end__+0x1366360>
 160:	01040200 	mrseq	r0, R12_usr
 164:	be068206 	cdplt	2, 0, cr8, cr6, cr6, {0}
 168:	01040200 	mrseq	r0, R12_usr
 16c:	04020030 	streq	r0, [r2], #-48	; 0x30
 170:	02004b01 	andeq	r4, r0, #1024	; 0x400
 174:	004c0104 	subeq	r0, ip, r4, lsl #2
 178:	4b010402 	blmi	41188 <__bss_end__+0x37ac8>
 17c:	302f4bbe 	strhtcc	r4, [pc], -lr
 180:	6783689f 			; <UNDEFINED> instruction: 0x6783689f
 184:	0014022f 	andseq	r0, r4, pc, lsr #4
 188:	01a90101 			; <UNDEFINED> instruction: 0x01a90101
 18c:	00020000 	andeq	r0, r2, r0
 190:	00000143 	andeq	r0, r0, r3, asr #2
 194:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 198:	0101000d 	tsteq	r1, sp
 19c:	00000101 	andeq	r0, r0, r1, lsl #2
 1a0:	00000100 	andeq	r0, r0, r0, lsl #2
 1a4:	73752f01 	cmnvc	r5, #1, 30
 1a8:	6f6c2f72 	svcvs	0x006c2f72
 1ac:	2f6c6163 	svccs	0x006c6163
 1b0:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
 1b4:	612f7261 	teqvs	pc, r1, ror #4
 1b8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 1bc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 1c0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 1c4:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 1c8:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
 1cc:	30373173 	eorscc	r3, r7, r3, ror r1
 1d0:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 1d4:	63672f62 	cmnvs	r7, #392	; 0x188
 1d8:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
 1dc:	6f6e2d6d 	svcvs	0x006e2d6d
 1e0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 1e4:	2f696261 	svccs	0x00696261
 1e8:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 1ec:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
 1f0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
 1f4:	552f0065 	strpl	r0, [pc, #-101]!	; 197 <_start-0x7e69>
 1f8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 1fc:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 200:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 204:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 208:	6f746b73 	svcvs	0x00746b73
 20c:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 210:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 78 <_start-0x7f88>
 214:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 218:	31726574 	cmncc	r2, r4, ror r5
 21c:	2f303239 	svccs	0x00303239
 220:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 224:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 228:	30343173 	eorscc	r3, r4, r3, ror r1
 22c:	30322d65 	eorscc	r2, r2, r5, ror #26
 230:	2f6e6977 	svccs	0x006e6977
 234:	7062696c 	rsbvc	r6, r2, ip, ror #18
 238:	752f0069 	strvc	r0, [pc, #-105]!	; 1d7 <_start-0x7e29>
 23c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 78 <_start-0x7f88>
 240:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 244:	6c65432f 	stclvs	3, cr4, [r5], #-188	; 0xffffff44
 248:	2f72616c 	svccs	0x0072616c
 24c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 250:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 254:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 258:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 25c:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
 260:	37317363 	ldrcc	r7, [r1, -r3, ror #6]!
 264:	612f6530 	teqvs	pc, r0, lsr r5	; <UNPREDICTABLE>
 268:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 26c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 270:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 274:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 278:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
 27c:	2e510000 	cdpcs	0, 5, cr0, cr1, cr0, {0}
 280:	00000068 	andeq	r0, r0, r8, rrx
 284:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 288:	7268742d 	rsbvc	r7, r8, #754974720	; 0x2d000000
 28c:	2e646165 	powcssz	f6, f4, f5
 290:	00000063 	andeq	r0, r0, r3, rrx
 294:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
 298:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
 29c:	00010068 	andeq	r0, r1, r8, rrx
 2a0:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
 2a4:	2d746e69 	ldclcs	14, cr6, [r4, #-420]!	; 0xfffffe5c
 2a8:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
 2ac:	00010068 	andeq	r0, r1, r8, rrx
 2b0:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 2b4:	7268742d 	rsbvc	r7, r8, #754974720	; 0x2d000000
 2b8:	2e646165 	powcssz	f6, f4, f5
 2bc:	00000068 	andeq	r0, r0, r8, rrx
 2c0:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 2c4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 2c8:	74730000 	ldrbtvc	r0, [r3], #-0
 2cc:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
 2d0:	0300682e 	movweq	r6, #2094	; 0x82e
 2d4:	00000000 	andeq	r0, r0, r0
 2d8:	81600205 	cmnhi	r0, r5, lsl #4
 2dc:	0e030000 	cdpeq	0, 0, cr0, cr3, cr0, {0}
 2e0:	12030101 	andne	r0, r3, #1073741824	; 0x40000000
 2e4:	674b1382 	strbvs	r1, [fp, -r2, lsl #7]
 2e8:	6b032f68 	blvs	cc090 <__bss_end__+0xc29d0>
 2ec:	02002f4a 	andeq	r2, r0, #296	; 0x128
 2f0:	4a060104 	bmi	180708 <__bss_end__+0x177048>
 2f4:	4b30bb06 	blmi	c2ef14 <__bss_end__+0xc25854>
 2f8:	01040200 	mrseq	r0, R12_usr
 2fc:	bd066606 	stclt	6, cr6, [r6, #-24]	; 0xffffffe8
 300:	04304b4b 	ldrteq	r4, [r0], #-2891	; 0xb4b
 304:	9e770302 	cdpls	3, 7, cr0, cr7, cr2, {0}
 308:	684c4b30 	stmdavs	ip, {r4, r5, r8, r9, fp, lr}^
 30c:	14667403 	strbtne	r7, [r6], #-1027	; 0x403
 310:	2f821103 	svccs	0x00821103
 314:	034a0903 	movteq	r0, #43267	; 0xa903
 318:	0b032e7a 	bleq	cbd08 <__bss_end__+0xc2648>
 31c:	03696882 	cmneq	r9, #8519680	; 0x820000
 320:	839f2e0a 	orrshi	r2, pc, #10, 28	; 0xa0
 324:	8535bff4 	ldrhi	fp, [r5, #-4084]!	; 0xff4
 328:	ba09039f 	blt	2411ac <__bss_end__+0x237aec>
 32c:	2f678935 	svccs	0x00678935
 330:	0c024b67 	stceq	11, cr4, [r2], {103}	; 0x67
 334:	ec010100 	stfs	f0, [r1], {-0}
 338:	02000000 	andeq	r0, r0, #0
 33c:	0000d000 	andeq	sp, r0, r0
 340:	fb010200 	blx	40b4a <__bss_end__+0x3748a>
 344:	01000d0e 	tsteq	r0, lr, lsl #26
 348:	00010101 	andeq	r0, r1, r1, lsl #2
 34c:	00010000 	andeq	r0, r1, r0
 350:	696c0100 	stmdbvs	ip!, {r8}^
 354:	2f006362 	svccs	0x00006362
 358:	2f727375 	svccs	0x00727375
 35c:	61636f6c 	cmnvs	r3, ip, ror #30
 360:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
 364:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
 368:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 36c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 370:	61652d65 	cmnvs	r5, r5, ror #26
 374:	342f6962 	strtcc	r6, [pc], #-2402	; 37c <_start-0x7c84>
 378:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 37c:	3173632d 	cmncc	r3, sp, lsr #6
 380:	2f653037 	svccs	0x00653037
 384:	2f62696c 	svccs	0x0062696c
 388:	2f636367 	svccs	0x00636367
 38c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 390:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 394:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 398:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 39c:	2f332e38 	svccs	0x00332e38
 3a0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 3a4:	00656475 	rsbeq	r6, r5, r5, ror r4
 3a8:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 3ac:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
 3b0:	432f6c61 	teqmi	pc, #24832	; 0x6100
 3b4:	616c6c65 	cmnvs	ip, r5, ror #24
 3b8:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 3bc:	6f6e2d6d 	svcvs	0x006e2d6d
 3c0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 3c4:	2f696261 	svccs	0x00696261
 3c8:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 3cc:	73632d33 	cmnvc	r3, #3264	; 0xcc0
 3d0:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
 3d4:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 3d8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 3dc:	61652d65 	cmnvs	r5, r5, ror #26
 3e0:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
 3e4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
 3e8:	00006564 	andeq	r6, r0, r4, ror #10
 3ec:	736d656d 	cmnvc	sp, #457179136	; 0x1b400000
 3f0:	632e7465 	teqvs	lr, #1694498816	; 0x65000000
 3f4:	00000100 	andeq	r0, r0, r0, lsl #2
 3f8:	64647473 	strbtvs	r7, [r4], #-1139	; 0x473
 3fc:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
 400:	00000200 	andeq	r0, r0, r0, lsl #4
 404:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 408:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 40c:	00000300 	andeq	r0, r0, r0, lsl #6
 410:	02050000 	andeq	r0, r5, #0
 414:	000083b0 			; <UNDEFINED> instruction: 0x000083b0
 418:	2f4c1314 	svccs	0x004c1314
 41c:	01040200 	mrseq	r0, R12_usr
 420:	02024d49 	andeq	r4, r2, #4672	; 0x1240
 424:	02010100 	andeq	r0, r1, #0, 2
 428:	02000001 	andeq	r0, r0, #1
 42c:	0000eb00 	andeq	lr, r0, r0, lsl #22
 430:	fb010200 	blx	40c3a <__bss_end__+0x3757a>
 434:	01000d0e 	tsteq	r0, lr, lsl #26
 438:	00010101 	andeq	r0, r1, r1, lsl #2
 43c:	00010000 	andeq	r0, r1, r0
 440:	696c0100 	stmdbvs	ip!, {r8}^
 444:	2f006362 	svccs	0x00006362
 448:	2f727375 	svccs	0x00727375
 44c:	61636f6c 	cmnvs	r3, ip, ror #30
 450:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
 454:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
 458:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 45c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 460:	61652d65 	cmnvs	r5, r5, ror #26
 464:	342f6962 	strtcc	r6, [pc], #-2402	; 46c <_start-0x7b94>
 468:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 46c:	3173632d 	cmncc	r3, sp, lsr #6
 470:	2f653037 	svccs	0x00653037
 474:	2f62696c 	svccs	0x0062696c
 478:	2f636367 	svccs	0x00636367
 47c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 480:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 484:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 488:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 48c:	2f332e38 	svccs	0x00332e38
 490:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 494:	00656475 	rsbeq	r6, r5, r5, ror r4
 498:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 49c:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 4a0:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 4a4:	2f6e756a 	svccs	0x006e756a
 4a8:	6b736544 	blvs	1cd99c0 <__bss_end__+0x1cd0300>
 4ac:	2f706f74 	svccs	0x00706f74
 4b0:	6f686373 	svcvs	0x00686373
 4b4:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 4b8:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 4bc:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 4c0:	53432f30 	movtpl	r2, #16176	; 0x3f30
 4c4:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 4c8:	3173632f 	cmncc	r3, pc, lsr #6
 4cc:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 4d0:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 4d4:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 4d8:	00697062 	rsbeq	r7, r9, r2, rrx
 4dc:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
 4e0:	2e6b746e 	cdpcs	4, 6, cr7, cr11, cr14, {3}
 4e4:	00010063 	andeq	r0, r1, r3, rrx
 4e8:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
 4ec:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
 4f0:	00020068 	andeq	r0, r2, r8, rrx
 4f4:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xc00
 4f8:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
 4fc:	003e6e69 	eorseq	r6, lr, r9, ror #28
 500:	72000000 	andvc	r0, r0, #0
 504:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 508:	00000300 	andeq	r0, r0, r0, lsl #6
 50c:	702d6176 	eorvc	r6, sp, r6, ror r1
 510:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 514:	00682e6b 	rsbeq	r2, r8, fp, ror #28
 518:	00000001 	andeq	r0, r0, r1
 51c:	d0020500 	andle	r0, r2, r0, lsl #10
 520:	17000083 	strne	r0, [r0, -r3, lsl #1]
 524:	89bf4b6b 	ldmibhi	pc!, {r0, r1, r3, r5, r6, r8, r9, fp, lr}	; <UNPREDICTABLE>
 528:	01000e02 	tsteq	r0, r2, lsl #28
 52c:	00009601 	andeq	r9, r0, r1, lsl #12
 530:	6f000200 	svcvs	0x00000200
 534:	02000000 	andeq	r0, r0, #0
 538:	0d0efb01 	vstreq	d15, [lr, #-4]
 53c:	01010100 	mrseq	r0, (UNDEF: 17)
 540:	00000001 	andeq	r0, r0, r1
 544:	01000001 	tsteq	r0, r1
 548:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 54c:	73552f00 	cmpvc	r5, #0, 30
 550:	2f737265 	svccs	0x00737265
 554:	61697262 	cmnvs	r9, r2, ror #4
 558:	6e756a6e 	vsubvs.f32	s13, s10, s29
 55c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 560:	706f746b 	rsbvc	r7, pc, fp, ror #8
 564:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 568:	2f6c6f6f 	svccs	0x006c6f6f
 56c:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 570:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 574:	432f3032 	teqmi	pc, #50	; 0x32
 578:	30343153 	eorscc	r3, r4, r3, asr r1
 57c:	73632f45 	cmnvc	r3, #276	; 0x114
 580:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 584:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 588:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 3ec <_start-0x7c14>
 58c:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 590:	75700000 	ldrbvc	r0, [r0, #-0]!
 594:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
 598:	00000100 	andeq	r0, r0, r0, lsl #2
 59c:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 5a0:	00020068 	andeq	r0, r2, r8, rrx
 5a4:	05000000 	streq	r0, [r0, #-0]
 5a8:	00842802 	addeq	r2, r4, r2, lsl #16
 5ac:	2d4c1500 	cfstr64cs	mvdx1, [ip, #-0]
 5b0:	02040200 	andeq	r0, r4, #0, 4
 5b4:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 5b8:	02004902 	andeq	r4, r0, #32768	; 0x8000
 5bc:	2e060104 	adfcss	f0, f6, f4
 5c0:	06026b06 	streq	r6, [r2], -r6, lsl #22
 5c4:	dc010100 	stfles	f0, [r1], {-0}
 5c8:	02000001 	andeq	r0, r0, #1
 5cc:	0000df00 	andeq	sp, r0, r0, lsl #30
 5d0:	fb010200 	blx	40dda <__bss_end__+0x3771a>
 5d4:	01000d0e 	tsteq	r0, lr, lsl #26
 5d8:	00010101 	andeq	r0, r1, r1, lsl #2
 5dc:	00010000 	andeq	r0, r1, r0
 5e0:	696c0100 	stmdbvs	ip!, {r8}^
 5e4:	2f006362 	svccs	0x00006362
 5e8:	2f727375 	svccs	0x00727375
 5ec:	61636f6c 	cmnvs	r3, ip, ror #30
 5f0:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
 5f4:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
 5f8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 5fc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 600:	61652d65 	cmnvs	r5, r5, ror #26
 604:	342f6962 	strtcc	r6, [pc], #-2402	; 60c <_start-0x79f4>
 608:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 60c:	3173632d 	cmncc	r3, sp, lsr #6
 610:	2f653037 	svccs	0x00653037
 614:	2f62696c 	svccs	0x0062696c
 618:	2f636367 	svccs	0x00636367
 61c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 620:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 624:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 628:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 62c:	2f332e38 	svccs	0x00332e38
 630:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 634:	00656475 	rsbeq	r6, r5, r5, ror r4
 638:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 63c:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 640:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 644:	2f6e756a 	svccs	0x006e756a
 648:	6b736544 	blvs	1cd9b60 <__bss_end__+0x1cd04a0>
 64c:	2f706f74 	svccs	0x00706f74
 650:	6f686373 	svcvs	0x00686373
 654:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 658:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 65c:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 660:	53432f30 	movtpl	r2, #16176	; 0x3f30
 664:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 668:	3173632f 	cmncc	r3, pc, lsr #6
 66c:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 670:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 674:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 678:	00697062 	rsbeq	r7, r9, r2, rrx
 67c:	2d617600 	stclcs	6, cr7, [r1, #-0]
 680:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 684:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
 688:	00000100 	andeq	r0, r0, r0, lsl #2
 68c:	61647473 	smcvs	18243	; 0x4743
 690:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
 694:	00000200 	andeq	r0, r0, r0, lsl #4
 698:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 69c:	00030068 	andeq	r0, r3, r8, rrx
 6a0:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xc00
 6a4:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
 6a8:	003e6e69 	eorseq	r6, lr, r9, ror #28
 6ac:	00000000 	andeq	r0, r0, r0
 6b0:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
 6b4:	03000084 	movweq	r0, #132	; 0x84
 6b8:	a5010126 	strge	r0, [r1, #-294]	; 0x126
 6bc:	002d3113 	eoreq	r3, sp, r3, lsl r1
 6c0:	2f020402 	svccs	0x00020402
 6c4:	02040200 	andeq	r0, r4, #0, 4
 6c8:	0402002d 	streq	r0, [r2], #-45	; 0x2d
 6cc:	02002f02 	andeq	r2, r0, #2, 30
 6d0:	4c2d0104 	stfmis	f0, [sp], #-16
 6d4:	4b14304c 	blmi	50c80c <__bss_end__+0x50314c>
 6d8:	02004f2f 	andeq	r4, r0, #47, 30	; 0xbc
 6dc:	00670204 	rsbeq	r0, r7, r4, lsl #4
 6e0:	65010402 	strvs	r0, [r1, #-1026]	; 0x402
 6e4:	a0304d4c 	eorsge	r4, r0, ip, asr #26
 6e8:	0230312f 	eorseq	r3, r0, #-1073741813	; 0xc000000b
 6ec:	2d841626 	stccs	6, cr1, [r4, #152]	; 0x98
 6f0:	0402002c 	streq	r0, [r2], #-44	; 0x2c
 6f4:	02003001 	andeq	r3, r0, #1
 6f8:	06330104 	ldrteq	r0, [r3], -r4, lsl #2
 6fc:	04020066 	streq	r0, [r2], #-102	; 0x66
 700:	02002e01 	andeq	r2, r0, #1, 28
 704:	08060104 	stmdaeq	r6, {r2, r8}
 708:	032f6721 	teqeq	pc, #8650752	; 0x840000
 70c:	13038273 	movwne	r8, #12915	; 0x3273
 710:	0402002e 	streq	r0, [r2], #-46	; 0x2e
 714:	002e0601 	eoreq	r0, lr, r1, lsl #12
 718:	06010402 	streq	r0, [r1], -r2, lsl #8
 71c:	034b6a9f 	movteq	r6, #47775	; 0xba9f
 720:	21032e67 	tstcs	r3, r7, ror #28
 724:	0402002e 	streq	r0, [r2], #-46	; 0x2e
 728:	002e0601 	eoreq	r0, lr, r1, lsl #12
 72c:	06010402 	streq	r0, [r1], -r2, lsl #8
 730:	0402009f 	streq	r0, [r2], #-159	; 0x9f
 734:	f3bd6a01 	vtbl.8	d6, {d13-d15}, d1
 738:	087fa603 	ldmdaeq	pc!, {r0, r1, r9, sl, sp, pc}^	; <UNPREDICTABLE>
 73c:	02002f20 	andeq	r2, r0, #32, 30	; 0x80
 740:	4a060104 	bmi	180b58 <__bss_end__+0x177498>
 744:	2f4bbb06 	svccs	0x004bbb06
 748:	f200da03 	vpmax.s8	d13, d0, d3
 74c:	31484c83 	smlalbbcc	r4, r8, r3, ip
 750:	4b842f2f 	blmi	fe10c414 <__bss_end__+0xfe102d54>
 754:	314d2d2f 	cmpcc	sp, pc, lsr #26
 758:	00832f30 	addeq	r2, r3, r0, lsr pc
 75c:	2c010402 	cfstrscs	mvf0, [r1], {2}
 760:	040200be 	streq	r0, [r2], #-190	; 0xbe
 764:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 768:	163602bc 			; <UNDEFINED> instruction: 0x163602bc
 76c:	08ba0e03 	ldmeq	sl!, {r0, r1, r9, sl, fp}
 770:	21083021 	tstcs	r8, r1, lsr #32
 774:	30210831 	eorcc	r0, r1, r1, lsr r8
 778:	4b302108 	blmi	c08ba0 <__bss_end__+0xbff4e0>
 77c:	30210830 	eorcc	r0, r1, r0, lsr r8
 780:	002f31d9 	ldrdeq	r3, [pc], -r9	; <UNPREDICTABLE>
 784:	65010402 	strvs	r0, [r1, #-1026]	; 0x402
 788:	02040200 	andeq	r0, r4, #0, 4
 78c:	02004a06 	andeq	r4, r0, #24576	; 0x6000
 790:	03060104 	movweq	r0, #24836	; 0x6104
 794:	02006642 	andeq	r6, r0, #69206016	; 0x4200000
 798:	66060204 	strvs	r0, [r6], -r4, lsl #4
 79c:	00c20306 	sbceq	r0, r2, r6, lsl #6
 7a0:	1002684a 	andne	r6, r2, sl, asr #16
 7a4:	96010100 	strls	r0, [r1], -r0, lsl #2
 7a8:	02000000 	andeq	r0, r0, #0
 7ac:	00007700 	andeq	r7, r0, r0, lsl #14
 7b0:	fb010200 	blx	40fba <__bss_end__+0x378fa>
 7b4:	01000d0e 	tsteq	r0, lr, lsl #26
 7b8:	00010101 	andeq	r0, r1, r1, lsl #2
 7bc:	00010000 	andeq	r0, r1, r0
 7c0:	73630100 	cmnvc	r3, #0, 2
 7c4:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 7c8:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 7cc:	73552f00 	cmpvc	r5, #0, 30
 7d0:	2f737265 	svccs	0x00737265
 7d4:	61697262 	cmnvs	r9, r2, ror #4
 7d8:	6e756a6e 	vsubvs.f32	s13, s10, s29
 7dc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 7e0:	706f746b 	rsbvc	r7, pc, fp, ror #8
 7e4:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 7e8:	2f6c6f6f 	svccs	0x006c6f6f
 7ec:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 7f0:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 7f4:	432f3032 	teqmi	pc, #50	; 0x32
 7f8:	30343153 	eorscc	r3, r4, r3, asr r1
 7fc:	73632f45 	cmnvc	r3, #276	; 0x114
 800:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 804:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 808:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 66c <_start-0x7994>
 80c:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 810:	73630000 	cmnvc	r3, #0
 814:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
 818:	0100632e 	tsteq	r0, lr, lsr #6
 81c:	70720000 	rsbsvc	r0, r2, r0
 820:	00682e69 	rsbeq	r2, r8, r9, ror #28
 824:	00000002 	andeq	r0, r0, r2
 828:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
 82c:	14000089 	strne	r0, [r0], #-137	; 0x89
 830:	2d2f3132 	stfcss	f3, [pc, #-200]!	; 770 <_start-0x7890>
 834:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 838:	2f4d4901 	svccs	0x004d4901
 83c:	01000602 	tsteq	r0, r2, lsl #12
 840:	00009901 	andeq	r9, r0, r1, lsl #18
 844:	77000200 	strvc	r0, [r0, -r0, lsl #4]
 848:	02000000 	andeq	r0, r0, #0
 84c:	0d0efb01 	vstreq	d15, [lr, #-4]
 850:	01010100 	mrseq	r0, (UNDEF: 17)
 854:	00000001 	andeq	r0, r0, r1
 858:	01000001 	tsteq	r0, r1
 85c:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 860:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
 864:	2f006372 	svccs	0x00006372
 868:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 86c:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 870:	6a6e6169 	bvs	1b98e1c <__bss_end__+0x1b8f75c>
 874:	442f6e75 	strtmi	r6, [pc], #-3701	; 87c <_start-0x7784>
 878:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 87c:	732f706f 	teqvc	pc, #111	; 0x6f
 880:	6f6f6863 	svcvs	0x006f6863
 884:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 888:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 88c:	30323931 	eorscc	r3, r2, r1, lsr r9
 890:	3153432f 	cmpcc	r3, pc, lsr #6
 894:	2f453034 	svccs	0x00453034
 898:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 89c:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 8a0:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 8a4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 8a8:	00006970 	andeq	r6, r0, r0, ror r9
 8ac:	6f626572 	svcvs	0x00626572
 8b0:	632e746f 	teqvs	lr, #1862270976	; 0x6f000000
 8b4:	00000100 	andeq	r0, r0, r0, lsl #2
 8b8:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 8bc:	00020068 	andeq	r0, r2, r8, rrx
 8c0:	05000000 	streq	r0, [r0, #-0]
 8c4:	00898002 	addeq	r8, r9, r2
 8c8:	010d0300 	mrseq	r0, SP_mon
 8cc:	852f3114 	strhi	r3, [pc, #-276]!	; 7c0 <_start-0x7840>
 8d0:	4d4b2f15 	stclmi	15, cr2, [fp, #-84]	; 0xffffffac
 8d4:	5235672f 	eorspl	r6, r5, #12320768	; 0xbc0000
 8d8:	00100267 	andseq	r0, r0, r7, ror #4
 8dc:	00a00101 	adceq	r0, r0, r1, lsl #2
 8e0:	00020000 	andeq	r0, r2, r0
 8e4:	00000076 	andeq	r0, r0, r6, ror r0
 8e8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 8ec:	0101000d 	tsteq	r1, sp
 8f0:	00000101 	andeq	r0, r0, r1, lsl #2
 8f4:	00000100 	andeq	r0, r0, r0, lsl #2
 8f8:	31736301 	cmncc	r3, r1, lsl #6
 8fc:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 900:	00637273 	rsbeq	r7, r3, r3, ror r2
 904:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 908:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 90c:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 910:	2f6e756a 	svccs	0x006e756a
 914:	6b736544 	blvs	1cd9e2c <__bss_end__+0x1cd076c>
 918:	2f706f74 	svccs	0x00706f74
 91c:	6f686373 	svcvs	0x00686373
 920:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 924:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 928:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 92c:	53432f30 	movtpl	r2, #16176	; 0x3f30
 930:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 934:	3173632f 	cmncc	r3, pc, lsr #6
 938:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 93c:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 940:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 944:	00697062 	rsbeq	r7, r9, r2, rrx
 948:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
 94c:	632e7265 	teqvs	lr, #1342177286	; 0x50000006
 950:	00000100 	andeq	r0, r0, r0, lsl #2
 954:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 958:	00020068 	andeq	r0, r2, r8, rrx
 95c:	05000000 	streq	r0, [r0, #-0]
 960:	0089f402 	addeq	pc, r9, r2, lsl #8
 964:	2f131600 	svccs	0x00131600
 968:	0402002d 	streq	r0, [r2], #-45	; 0x2d
 96c:	062e0601 	strteq	r0, [lr], -r1, lsl #12
 970:	4b2f3168 	blmi	bccf18 <__bss_end__+0xbc3858>
 974:	2f4c4b4c 	svccs	0x004c4b4c
 978:	842f2f6a 	strthi	r2, [pc], #-3946	; 980 <_start-0x7680>
 97c:	0008022f 	andeq	r0, r8, pc, lsr #4
 980:	016b0101 	cmneq	fp, r1, lsl #2
 984:	00020000 	andeq	r0, r2, r0
 988:	00000120 	andeq	r0, r0, r0, lsr #2
 98c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 990:	0101000d 	tsteq	r1, sp
 994:	00000101 	andeq	r0, r0, r1, lsl #2
 998:	00000100 	andeq	r0, r0, r0, lsl #2
 99c:	2d796d01 	ldclcs	13, cr6, [r9, #-4]!
 9a0:	00637273 	rsbeq	r7, r3, r3, ror r2
 9a4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 9a8:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
 9ac:	432f6c61 	teqmi	pc, #24832	; 0x6100
 9b0:	616c6c65 	cmnvs	ip, r5, ror #24
 9b4:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 9b8:	6f6e2d6d 	svcvs	0x006e2d6d
 9bc:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 9c0:	2f696261 	svccs	0x00696261
 9c4:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 9c8:	73632d33 	cmnvc	r3, #3264	; 0xcc0
 9cc:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
 9d0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 9d4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
 9d8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 9dc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 9e0:	61652d65 	cmnvs	r5, r5, ror #26
 9e4:	342f6962 	strtcc	r6, [pc], #-2402	; 9ec <_start-0x7614>
 9e8:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 9ec:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 9f0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
 9f4:	73552f00 	cmpvc	r5, #0, 30
 9f8:	2f737265 	svccs	0x00737265
 9fc:	61697262 	cmnvs	r9, r2, ror #4
 a00:	6e756a6e 	vsubvs.f32	s13, s10, s29
 a04:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 a08:	706f746b 	rsbvc	r7, pc, fp, ror #8
 a0c:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 a10:	2f6c6f6f 	svccs	0x006c6f6f
 a14:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 a18:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 a1c:	432f3032 	teqmi	pc, #50	; 0x32
 a20:	30343153 	eorscc	r3, r4, r3, asr r1
 a24:	73632f45 	cmnvc	r3, #276	; 0x114
 a28:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 a2c:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 a30:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 894 <_start-0x776c>
 a34:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 a38:	73752f00 	cmnvc	r5, #0, 30
 a3c:	6f6c2f72 	svcvs	0x006c2f72
 a40:	2f6c6163 	svccs	0x006c6163
 a44:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
 a48:	612f7261 	teqvs	pc, r1, ror #4
 a4c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 a50:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 a54:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 a58:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 a5c:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
 a60:	30373173 	eorscc	r3, r7, r3, ror r1
 a64:	72612f65 	rsbvc	r2, r1, #404	; 0x194
 a68:	6f6e2d6d 	svcvs	0x006e2d6d
 a6c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 a70:	2f696261 	svccs	0x00696261
 a74:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 a78:	00656475 	rsbeq	r6, r5, r5, ror r4
 a7c:	616d6b00 	cmnvs	sp, r0, lsl #22
 a80:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 a84:	0100632e 	tsteq	r0, lr, lsr #6
 a88:	74730000 	ldrbtvc	r0, [r3], #-0
 a8c:	66656464 	strbtvs	r6, [r5], -r4, ror #8
 a90:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 a94:	70720000 	rsbsvc	r0, r2, r0
 a98:	00682e69 	rsbeq	r2, r8, r9, ror #28
 a9c:	73000003 	movwvc	r0, #3
 aa0:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
 aa4:	00682e67 	rsbeq	r2, r8, r7, ror #28
 aa8:	00000004 	andeq	r0, r0, r4
 aac:	48020500 	stmdami	r2, {r8, sl}
 ab0:	0300008d 	movweq	r0, #141	; 0x8d
 ab4:	002f0118 	eoreq	r0, pc, r8, lsl r1	; <UNPREDICTABLE>
 ab8:	06010402 	streq	r0, [r1], -r2, lsl #8
 abc:	4bbc0682 	blmi	fef024cc <__bss_end__+0xfeef8e0c>
 ac0:	be4d4b4b 	vmlslt.f64	d20, d13, d11
 ac4:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 ac8:	06820601 	streq	r0, [r2], r1, lsl #12
 acc:	004b4bbc 	strheq	r4, [fp], #-188	; 0xffffff44
 ad0:	06010402 	streq	r0, [r1], -r2, lsl #8
 ad4:	4bbb064a 	blmi	feec2404 <__bss_end__+0xfeeb8d44>
 ad8:	032f3083 	teqeq	pc, #131	; 0x83
 adc:	002fba0a 	eoreq	fp, pc, sl, lsl #20
 ae0:	06010402 	streq	r0, [r1], -r2, lsl #8
 ae4:	67bb0682 	ldrvs	r0, [fp, r2, lsl #13]!
 ae8:	14c213f9 	strbne	r1, [r2], #1017	; 0x3f9
 aec:	01000802 	tsteq	r0, r2, lsl #16
 af0:	00008601 	andeq	r8, r0, r1, lsl #12
 af4:	72000200 	andvc	r0, r0, #0, 4
 af8:	02000000 	andeq	r0, r0, #0
 afc:	0d0efb01 	vstreq	d15, [lr, #-4]
 b00:	01010100 	mrseq	r0, (UNDEF: 17)
 b04:	00000001 	andeq	r0, r0, r1
 b08:	01000001 	tsteq	r0, r1
 b0c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 b10:	73552f00 	cmpvc	r5, #0, 30
 b14:	2f737265 	svccs	0x00737265
 b18:	61697262 	cmnvs	r9, r2, ror #4
 b1c:	6e756a6e 	vsubvs.f32	s13, s10, s29
 b20:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 b24:	706f746b 	rsbvc	r7, pc, fp, ror #8
 b28:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 b2c:	2f6c6f6f 	svccs	0x006c6f6f
 b30:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 b34:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 b38:	432f3032 	teqmi	pc, #50	; 0x32
 b3c:	30343153 	eorscc	r3, r4, r3, asr r1
 b40:	73632f45 	cmnvc	r3, #276	; 0x114
 b44:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 b48:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 b4c:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 9b0 <_start-0x7650>
 b50:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 b54:	75700000 	ldrbvc	r0, [r0, #-0]!
 b58:	61686374 	smcvs	34356	; 0x8634
 b5c:	00632e72 	rsbeq	r2, r3, r2, ror lr
 b60:	72000001 	andvc	r0, r0, #1
 b64:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 b68:	00000200 	andeq	r0, r0, r0, lsl #4
 b6c:	02050000 	andeq	r0, r5, #0
 b70:	00008ec0 	andeq	r8, r0, r0, asr #29
 b74:	06024a14 			; <UNDEFINED> instruction: 0x06024a14
 b78:	Address 0x0000000000000b78 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6e696c62 	cdpvs	12, 6, cr6, cr9, cr2, {3}
   4:	656e006b 	strbvs	r0, [lr, #-107]!	; 0x6b
   8:	72007478 	andvc	r7, r0, #120, 8	; 0x78000000
   c:	725f6970 	subsvc	r6, pc, #112, 18	; 0x1c0000
  10:	6f6f6265 	svcvs	0x006f6265
  14:	4e470074 	mcrmi	0, 2, r0, cr7, cr4, {3}
  18:	20432055 	subcs	r2, r3, r5, asr r0
  1c:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
  20:	6d2d2033 	stcvs	0, cr2, [sp, #-204]!	; 0xffffff34
  24:	3d757063 	ldclcc	0, cr7, [r5, #-396]!	; 0xfffffe74
  28:	316d7261 	cmncc	sp, r1, ror #4
  2c:	6a363731 	bvs	d8dcf8 <__bss_end__+0xd84638>
  30:	732d667a 	teqvc	sp, #127926272	; 0x7a00000
  34:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xd20
  38:	3d656e75 	stclcc	14, cr6, [r5, #-468]!	; 0xfffffe2c
  3c:	316d7261 	cmncc	sp, r1, ror #4
  40:	6a363731 	bvs	d8dd0c <__bss_end__+0xd8464c>
  44:	732d667a 	teqvc	sp, #127926272	; 0x7a00000
  48:	67672d20 	strbvs	r2, [r7, -r0, lsr #26]!
  4c:	2d206264 	sfmcs	f6, 4, [r0, #-400]!	; 0xfffffe70
  50:	2d20674f 	stccs	7, cr6, [r0, #-316]!	; 0xfffffec4
  54:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  58:	39756e67 	ldmdbcc	r5!, {r0, r1, r2, r5, r6, r9, sl, fp, sp, lr}^
  5c:	662d2039 			; <UNDEFINED> instruction: 0x662d2039
  60:	65657266 	strbvs	r7, [r5, #-614]!	; 0x266
  64:	6e617473 	mcrvs	4, 3, r7, cr1, cr3, {3}
  68:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
  6c:	746f6e00 	strbtvc	r6, [pc], #-3584	; 74 <_start-0x7f8c>
  70:	6e69616d 	powvsez	f6, f1, #5.0
  74:	61747300 	cmnvs	r4, r0, lsl #6
  78:	75006b63 	strvc	r6, [r0, #-2915]	; 0xb63
  7c:	5f747261 	svcpl	0x00747261
  80:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
  84:	736e7500 	cmnvc	lr, #0, 10
  88:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
  8c:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
  90:	74007261 	strvc	r7, [r0], #-609	; 0x261
  94:	0035375f 	eorseq	r3, r5, pc, asr r7
  98:	35325f74 	ldrcc	r5, [r2, #-3956]!	; 0xf74
  9c:	6f687300 	svcvs	0x00687300
  a0:	75207472 	strvc	r7, [r0, #-1138]!	; 0x472
  a4:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  a8:	2064656e 	rsbcs	r6, r4, lr, ror #10
  ac:	00746e69 	rsbseq	r6, r4, r9, ror #28
  b0:	79747564 	ldmdbvc	r4!, {r2, r5, r6, r8, sl, ip, sp, lr}^
  b4:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
  b8:	65735f6f 	ldrbvs	r5, [r3, #-3951]!	; 0xf6f
  bc:	666f5f74 	uqsub16vs	r5, pc, r4	; <UNPREDICTABLE>
  c0:	70720066 	rsbsvc	r0, r2, r6, rrx
  c4:	68745f69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
  c8:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
  cc:	6174735f 	cmnvs	r4, pc, asr r3
  d0:	67007472 	smlsdxvs	r0, r2, r4, r7
  d4:	5f6f6970 	svcpl	0x006f6970
  d8:	5f746573 	svcpl	0x00746573
  dc:	7074756f 	rsbsvc	r7, r4, pc, ror #10
  e0:	2f007475 	svccs	0x00007475
  e4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  e8:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
  ec:	6a6e6169 	bvs	1b98698 <__bss_end__+0x1b8efd8>
  f0:	442f6e75 	strtmi	r6, [pc], #-3701	; f8 <_start-0x7f08>
  f4:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
  f8:	732f706f 	teqvc	pc, #111	; 0x6f
  fc:	6f6f6863 	svcvs	0x006f6863
 100:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 104:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 108:	30323931 	eorscc	r3, r2, r1, lsr r9
 10c:	3153432f 	cmpcc	r3, pc, lsr #6
 110:	2f453034 	svccs	0x00453034
 114:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 118:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 11c:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 120:	62616c2f 	rsbvs	r6, r1, #12032	; 0x2f00
 124:	2d362f73 	ldccs	15, cr2, [r6, #-460]!	; 0xfffffe34
 128:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 12c:	2f736461 	svccs	0x00736461
 130:	68742d32 	ldmdavs	r4!, {r1, r4, r5, r8, sl, fp, sp}^
 134:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 138:	70720073 	rsbsvc	r0, r2, r3, ror r0
 13c:	6f665f69 	svcvs	0x00665f69
 140:	33006b72 	movwcc	r6, #2930	; 0xb72
 144:	7365742d 	cmnvc	r5, #754974720	; 0x2d000000
 148:	69792d74 	ldmdbvs	r9!, {r2, r4, r5, r6, r8, sl, fp, sp}^
 14c:	2e646c65 	cdpcs	12, 6, cr6, cr4, cr5, {3}
 150:	5f5f0063 	svcpl	0x005f0063
 154:	434e5546 	movtmi	r5, #58694	; 0xe546
 158:	4e4f4954 	mcrmi	9, 2, r4, cr15, cr4, {2}
 15c:	74005f5f 	strvc	r5, [r0], #-3935	; 0xf5f
 160:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 164:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 168:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0x55f
 16c:	65720063 	ldrbvs	r0, [r2, #-99]!	; 0x63
 170:	61735f67 	cmnvs	r3, r7, ror #30
 174:	615f6576 	cmpvs	pc, r6, ror r5	; <UNPREDICTABLE>
 178:	00616572 	rsbeq	r6, r1, r2, ror r5
 17c:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 180:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
 184:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
 188:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
 18c:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 190:	7200746e 	andvc	r7, r0, #1845493760	; 0x6e000000
 194:	745f6970 	ldrbvc	r6, [pc], #-2416	; 19c <_start-0x7e64>
 198:	61657268 	cmnvs	r5, r8, ror #4
 19c:	00745f64 	rsbseq	r5, r4, r4, ror #30
 1a0:	5f697072 	svcpl	0x00697072
 1a4:	6c656979 	stclvs	9, cr6, [r5], #-484	; 0xfffffe1c
 1a8:	69730064 	ldmdbvs	r3!, {r2, r5, r6}^
 1ac:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
 1b0:	6f006570 	svcvs	0x00006570
 1b4:	73755f6e 	cmnvc	r5, #440	; 0x1b8
 1b8:	6c006365 	stcvs	3, cr6, [r0], {101}	; 0x65
 1bc:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 1c0:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 1c4:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
 1c8:	66666f00 	strbtvs	r6, [r6], -r0, lsl #30
 1cc:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0x55f
 1d0:	70720063 	rsbsvc	r0, r2, r3, rrx
 1d4:	68745f69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 1d8:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 1dc:	6f687300 	svcvs	0x00687300
 1e0:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
 1e4:	7500746e 	strvc	r7, [r0, #-1134]	; 0x46e
 1e8:	33746e69 	cmncc	r4, #1680	; 0x690
 1ec:	00745f32 	rsbseq	r5, r4, r2, lsr pc
 1f0:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
 1f4:	5f636f6c 	svcpl	0x00636f6c
 1f8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
 1fc:	69617700 	stmdbvs	r1!, {r8, r9, sl, ip, sp, lr}^
 200:	73755f74 	cmnvc	r5, #116, 30	; 0x1d0
 204:	67006365 	strvs	r6, [r0, -r5, ror #6]
 208:	5f6f6970 	svcpl	0x006f6970
 20c:	5f746573 	svcpl	0x00746573
 210:	72006e6f 	andvc	r6, r0, #1776	; 0x6f0
 214:	00716e75 	rsbseq	r6, r1, r5, ror lr
 218:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
 21c:	5100745f 	tstpl	r0, pc, asr r4
 220:	706f705f 	rsbvc	r7, pc, pc, asr r0	; <UNPREDICTABLE>
 224:	616d6b00 	cmnvs	sp, r0, lsl #22
 228:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 22c:	696c615f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r8, sp, lr}^
 230:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
 234:	655f5100 	ldrbvs	r5, [pc, #-256]	; 13c <_start-0x7ec4>
 238:	7974706d 	ldmdbvc	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
 23c:	615f5100 	cmpvs	pc, r0, lsl #2
 240:	6e657070 	mcrvs	0, 3, r7, cr5, cr0, {3}
 244:	63730064 	cmnvs	r3, #100	; 0x64
 248:	75646568 	strbvc	r6, [r4, #-1384]!	; 0x568
 24c:	5f72656c 	svcpl	0x0072656c
 250:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 254:	66006461 	strvs	r6, [r0], -r1, ror #8
 258:	71656572 	smcvc	22098	; 0x5652
 25c:	61656800 	cmnvs	r5, r0, lsl #16
 260:	70720064 	rsbsvc	r0, r2, r4, rrx
 264:	68742d69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, sl, fp, sp}^
 268:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 26c:	6d00632e 	stcvs	3, cr6, [r0, #-184]	; 0xffffff48
 270:	65736d65 	ldrbvs	r6, [r3, #-3429]!	; 0xd65
 274:	656e0074 	strbvs	r0, [lr, #-116]!	; 0x74
 278:	745f7478 	ldrbvc	r7, [pc], #-1144	; 280 <_start-0x7d80>
 27c:	61657268 	cmnvs	r5, r8, ror #4
 280:	78650064 	stmdavc	r5!, {r2, r5, r6}^
 284:	6f637469 	svcvs	0x00637469
 288:	72006564 	andvc	r6, r0, #100, 10	; 0x19000000
 28c:	655f6970 	ldrbvs	r6, [pc, #-2416]	; fffff924 <__bss_end__+0xffff6264>
 290:	00746978 	rsbseq	r6, r4, r8, ror r9
 294:	615f6874 	cmpvs	pc, r4, ror r8	; <UNPREDICTABLE>
 298:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 29c:	69617400 	stmdbvs	r1!, {sl, ip, sp, lr}^
 2a0:	7072006c 	rsbsvc	r0, r2, ip, rrx
 2a4:	73635f69 	cmnvc	r3, #420	; 0x1a4
 2a8:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
 2ac:	70720068 	rsbsvc	r0, r2, r8, rrx
 2b0:	75635f69 	strbvc	r5, [r3, #-3945]!	; 0xf69
 2b4:	68745f72 	ldmdavs	r4!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 2b8:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 2bc:	62696c00 	rsbvs	r6, r9, #0, 24
 2c0:	656d2f63 	strbvs	r2, [sp, #-3939]!	; 0xf63
 2c4:	7465736d 	strbtvc	r7, [r5], #-877	; 0x36d
 2c8:	2f00632e 	svccs	0x0000632e
 2cc:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 2d0:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 2d4:	6a6e6169 	bvs	1b98880 <__bss_end__+0x1b8f1c0>
 2d8:	442f6e75 	strtmi	r6, [pc], #-3701	; 2e0 <_start-0x7d20>
 2dc:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 2e0:	732f706f 	teqvc	pc, #111	; 0x6f
 2e4:	6f6f6863 	svcvs	0x006f6863
 2e8:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 2ec:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 2f0:	30323931 	eorscc	r3, r2, r1, lsr r9
 2f4:	3153432f 	cmpcc	r3, pc, lsr #6
 2f8:	2f453034 	svccs	0x00453034
 2fc:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 300:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 304:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 308:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 30c:	5f006970 	svcpl	0x00006970
 310:	756e675f 	strbvc	r6, [lr, #-1887]!	; 0x75f
 314:	61765f63 	cmnvs	r6, r3, ror #30
 318:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
 31c:	696c0074 	stmdbvs	ip!, {r2, r4, r5, r6}^
 320:	702f6362 	eorvc	r6, pc, r2, ror #6
 324:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 328:	00632e6b 	rsbeq	r2, r3, fp, ror #28
 32c:	705f6176 	subsvc	r6, pc, r6, ror r1	; <UNPREDICTABLE>
 330:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 334:	5f5f006b 	svcpl	0x005f006b
 338:	6c5f6176 	ldfvse	f6, [pc], {118}	; 0x76
 33c:	00747369 	rsbseq	r7, r4, r9, ror #6
 340:	73677261 	cmnvc	r7, #268435462	; 0x10000006
 344:	615f5f00 	cmpvs	pc, r0, lsl #30
 348:	696c0070 	stmdbvs	ip!, {r4, r5, r6}^
 34c:	702f6362 	eorvc	r6, pc, r2, ror #6
 350:	2e6b7475 	mcrcs	4, 3, r7, cr11, cr5, {3}
 354:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
 358:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
 35c:	705f6c61 	subsvc	r6, pc, r1, ror #24
 360:	006b7475 	rsbeq	r7, fp, r5, ror r4
 364:	5f697072 	svcpl	0x00697072
 368:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 36c:	00726168 	rsbseq	r6, r2, r8, ror #2
 370:	5f67656e 	svcpl	0x0067656e
 374:	65720070 	ldrbvs	r0, [r2, #-112]!	; 0x70
 378:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 37c:	73690065 	cmnvc	r9, #101	; 0x65
 380:	69676964 	stmdbvs	r7!, {r2, r5, r6, r8, fp, sp, lr}^
 384:	75700074 	ldrbvc	r0, [r0, #-116]!	; 0x74
 388:	665f7374 			; <UNDEFINED> instruction: 0x665f7374
 38c:	61620070 	smcvs	8192	; 0x2000
 390:	73006573 	movwvc	r6, #1395	; 0x573
 394:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
 398:	00705f64 	rsbseq	r5, r0, r4, ror #30
 39c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 3a0:	2d61762f 	stclcs	6, cr7, [r1, #-188]!	; 0xffffff44
 3a4:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 3a8:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
 3ac:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 3b0:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
 3b4:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xf5f
 3b8:	00747570 	rsbseq	r7, r4, r0, ror r5
 3bc:	74646977 	strbtvc	r6, [r4], #-2423	; 0x977
 3c0:	75700068 	ldrbvc	r0, [r0, #-104]!	; 0x68
 3c4:	665f6374 			; <UNDEFINED> instruction: 0x665f6374
 3c8:	6d650070 	stclvs	0, cr0, [r5, #-448]!	; 0xfffffe40
 3cc:	63007469 	movwvs	r7, #1129	; 0x469
 3d0:	30343173 	eorscc	r3, r4, r3, ror r1
 3d4:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 3d8:	73632f63 	cmnvc	r3, #396	; 0x18c
 3dc:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
 3e0:	5f00632e 	svcpl	0x0000632e
 3e4:	7373625f 	cmnvc	r3, #-268435451	; 0xf0000005
 3e8:	6174735f 	cmnvs	r4, pc, asr r3
 3ec:	5f5f7472 	svcpl	0x005f7472
 3f0:	625f5f00 	subsvs	r5, pc, #0, 30
 3f4:	655f7373 	ldrbvs	r7, [pc, #-883]	; 89 <_start-0x7f77>
 3f8:	5f5f646e 	svcpl	0x005f646e
 3fc:	73736200 	cmnvc	r3, #0, 4
 400:	646e655f 	strbtvs	r6, [lr], #-1375	; 0x55f
 404:	73635f00 	cmnvc	r3, #0, 30
 408:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
 40c:	5f746100 	svcpl	0x00746100
 410:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
 414:	76656c5f 			; <UNDEFINED> instruction: 0x76656c5f
 418:	50006c65 	andpl	r6, r0, r5, ror #24
 41c:	41505f4d 	cmpmi	r0, sp, asr #30
 420:	4f575353 	svcmi	0x00575353
 424:	63004452 	movwvs	r4, #1106	; 0x452
 428:	30343173 	eorscc	r3, r4, r3, ror r1
 42c:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 430:	65722f63 	ldrbvs	r2, [r2, #-3939]!	; 0xf63
 434:	746f6f62 	strbtvc	r6, [pc], #-3938	; 43c <_start-0x7bc4>
 438:	5000632e 	andpl	r6, r0, lr, lsr #6
 43c:	53525f4d 	cmppl	r2, #308	; 0x134
 440:	575f4354 			; <UNDEFINED> instruction: 0x575f4354
 444:	47464352 	smlsldmi	r4, r6, r2, r3
 448:	4c55465f 	mrrcmi	6, 5, r4, r5, cr15
 44c:	45525f4c 	ldrbmi	r5, [r2, #-3916]	; 0xf4c
 450:	00544553 	subseq	r4, r4, r3, asr r5
 454:	575f4d50 			; <UNDEFINED> instruction: 0x575f4d50
 458:	00474f44 	subeq	r4, r7, r4, asr #30
 45c:	5f746573 	svcpl	0x00746573
 460:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
 464:	76656c5f 			; <UNDEFINED> instruction: 0x76656c5f
 468:	50006c65 	andpl	r6, r0, r5, ror #24
 46c:	32335455 	eorscc	r5, r3, #1426063360	; 0x55000000
 470:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 474:	6d5f7961 	ldclvs	9, cr7, [pc, #-388]	; 2f8 <_start-0x7d08>
 478:	4d500073 	ldclmi	0, cr0, [r0, #-460]	; 0xfffffe34
 47c:	5453525f 	ldrbpl	r5, [r3], #-607	; 0x25f
 480:	70630043 	rsbvc	r0, r3, r3, asr #32
 484:	64007273 	strvs	r7, [r0], #-627	; 0x273
 488:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 48c:	6365735f 	cmnvs	r5, #2080374785	; 0x7c000001
 490:	31736300 	cmncc	r3, r0, lsl #6
 494:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 498:	2f637273 	svccs	0x00637273
 49c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 4a0:	00632e72 	rsbeq	r2, r3, r2, ror lr
 4a4:	33544547 	cmpcc	r4, #297795584	; 0x11c00000
 4a8:	69740032 	ldmdbvs	r4!, {r1, r4, r5}^
 4ac:	00736b63 	rsbseq	r6, r3, r3, ror #22
 4b0:	616c6564 	cmnvs	ip, r4, ror #10
 4b4:	79635f79 	stmdbvc	r3!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 4b8:	73656c63 	cmnvc	r5, #25344	; 0x6300
 4bc:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 4c0:	755f7961 	ldrbvc	r7, [pc, #-2401]	; fffffb67 <__bss_end__+0xffff64a7>
 4c4:	666b0073 			; <UNDEFINED> instruction: 0x666b0073
 4c8:	5f656572 	svcpl	0x00656572
 4cc:	006c6c61 	rsbeq	r6, ip, r1, ror #24
 4d0:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
 4d4:	5f64656e 	svcpl	0x0064656e
 4d8:	70616568 	rsbvc	r6, r1, r8, ror #10
 4dc:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
 4e0:	616d6b00 	cmnvs	sp, r0, lsl #22
 4e4:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 4e8:	2d796d00 	ldclcs	13, cr6, [r9, #-0]
 4ec:	2f637273 	svccs	0x00637273
 4f0:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
 4f4:	2e636f6c 	cdpcs	15, 6, cr6, cr3, cr12, {3}
 4f8:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
 4fc:	705f7469 	subsvc	r7, pc, r9, ror #8
 500:	696c6100 	stmdbvs	ip!, {r8, sp, lr}^
 504:	656d6e67 	strbvs	r6, [sp, #-3687]!	; 0xe67
 508:	7200746e 	andvc	r7, r0, #1845493760	; 0x6e000000
 50c:	646e756f 	strbtvs	r7, [lr], #-1391	; 0x56f
 510:	6e5f6465 	cdpvs	4, 5, cr6, cr15, cr5, {3}
 514:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
 518:	6d6b0073 	stclvs	0, cr0, [fp, #-460]!	; 0xfffffe34
 51c:	6f6c6c61 	svcvs	0x006c6c61
 520:	65685f63 	strbvs	r5, [r8, #-3939]!	; 0xf63
 524:	705f7061 	subsvc	r7, pc, r1, rrx
 528:	5f007274 	svcpl	0x00007274
 52c:	6165685f 	cmnvs	r5, pc, asr r8
 530:	74735f70 	ldrbtvc	r5, [r3], #-3952	; 0xf70
 534:	5f747261 	svcpl	0x00747261
 538:	6f74005f 	svcvs	0x0074005f
 53c:	6c6c615f 	stfvse	f6, [ip], #-380	; 0xfffffe84
 540:	7461636f 	strbtvc	r6, [r1], #-879	; 0x36f
 544:	61750065 	cmnvs	r5, r5, rrx
 548:	705f7472 	subsvc	r7, pc, r2, ror r4	; <UNPREDICTABLE>
 54c:	00637475 	rsbeq	r7, r3, r5, ror r4
 550:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 554:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
 558:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
 55c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 560:	62696c00 	rsbvs	r6, r9, #0, 24
 564:	75702f63 	ldrbvc	r2, [r0, #-3939]!	; 0xf63
 568:	61686374 	smcvs	34356	; 0x8634
 56c:	00632e72 	rsbeq	r2, r3, r2, ror lr

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	00008010 	andeq	r8, r0, r0, lsl r0
  1c:	0000006c 	andeq	r0, r0, ip, rrx
  20:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
  24:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
  28:	180e4201 	stmdane	lr, {r0, r9, lr}
  2c:	00000018 	andeq	r0, r0, r8, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	0000807c 	andeq	r8, r0, ip, ror r0
  38:	0000006c 	andeq	r0, r0, ip, rrx
  3c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
  40:	86038504 	strhi	r8, [r3], -r4, lsl #10
  44:	00018e02 	andeq	r8, r1, r2, lsl #28
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	000080e8 	andeq	r8, r0, r8, ror #1
  54:	00000078 	andeq	r0, r0, r8, ror r0
  58:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
  5c:	86038504 	strhi	r8, [r3], -r4, lsl #10
  60:	42018e02 	andmi	r8, r1, #2, 28
  64:	0000200e 	andeq	r2, r0, lr
  68:	0000000c 	andeq	r0, r0, ip
  6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  70:	7c020001 	stcvc	0, cr0, [r2], {1}
  74:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  78:	0000000c 	andeq	r0, r0, ip
  7c:	00000068 	andeq	r0, r0, r8, rrx
  80:	00008160 	andeq	r8, r0, r0, ror #2
  84:	00000010 	andeq	r0, r0, r0, lsl r0
  88:	0000000c 	andeq	r0, r0, ip
  8c:	00000068 	andeq	r0, r0, r8, rrx
  90:	00008170 	andeq	r8, r0, r0, ror r1
  94:	0000002c 	andeq	r0, r0, ip, lsr #32
  98:	00000014 	andeq	r0, r0, r4, lsl r0
  9c:	00000068 	andeq	r0, r0, r8, rrx
  a0:	0000819c 	muleq	r0, ip, r1
  a4:	0000007c 	andeq	r0, r0, ip, ror r0
  a8:	83080e42 	movwhi	r0, #36418	; 0x8e42
  ac:	00018e02 	andeq	r8, r1, r2, lsl #28
  b0:	00000014 	andeq	r0, r0, r4, lsl r0
  b4:	00000068 	andeq	r0, r0, r8, rrx
  b8:	00008218 	andeq	r8, r0, r8, lsl r2
  bc:	0000002c 	andeq	r0, r0, ip, lsr #32
  c0:	83080e42 	movwhi	r0, #36418	; 0x8e42
  c4:	00018e02 	andeq	r8, r1, r2, lsl #28
  c8:	0000000c 	andeq	r0, r0, ip
  cc:	00000068 	andeq	r0, r0, r8, rrx
  d0:	00008244 	andeq	r8, r0, r4, asr #4
  d4:	00000010 	andeq	r0, r0, r0, lsl r0
  d8:	00000014 	andeq	r0, r0, r4, lsl r0
  dc:	00000068 	andeq	r0, r0, r8, rrx
  e0:	00008254 	andeq	r8, r0, r4, asr r2
  e4:	00000038 	andeq	r0, r0, r8, lsr r0
  e8:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
  ec:	00018e02 	andeq	r8, r1, r2, lsl #28
  f0:	00000014 	andeq	r0, r0, r4, lsl r0
  f4:	00000068 	andeq	r0, r0, r8, rrx
  f8:	0000828c 	andeq	r8, r0, ip, lsl #5
  fc:	00000060 	andeq	r0, r0, r0, rrx
 100:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 104:	00018e02 	andeq	r8, r1, r2, lsl #28
 108:	00000018 	andeq	r0, r0, r8, lsl r0
 10c:	00000068 	andeq	r0, r0, r8, rrx
 110:	000082ec 	andeq	r8, r0, ip, ror #5
 114:	00000040 	andeq	r0, r0, r0, asr #32
 118:	83100e42 	tsthi	r0, #1056	; 0x420
 11c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 120:	00018e02 	andeq	r8, r1, r2, lsl #28
 124:	00000014 	andeq	r0, r0, r4, lsl r0
 128:	00000068 	andeq	r0, r0, r8, rrx
 12c:	0000832c 	andeq	r8, r0, ip, lsr #6
 130:	00000050 	andeq	r0, r0, r0, asr r0
 134:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 138:	00018e02 	andeq	r8, r1, r2, lsl #28
 13c:	0000000c 	andeq	r0, r0, ip
 140:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 144:	7c020001 	stcvc	0, cr0, [r2], {1}
 148:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 14c:	0000000c 	andeq	r0, r0, ip
 150:	0000013c 	andeq	r0, r0, ip, lsr r1
 154:	000083b0 			; <UNDEFINED> instruction: 0x000083b0
 158:	00000020 	andeq	r0, r0, r0, lsr #32
 15c:	0000000c 	andeq	r0, r0, ip
 160:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 164:	7c020001 	stcvc	0, cr0, [r2], {1}
 168:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 16c:	00000024 	andeq	r0, r0, r4, lsr #32
 170:	0000015c 	andeq	r0, r0, ip, asr r1
 174:	000083d0 	ldrdeq	r8, [r0], -r0
 178:	00000058 	andeq	r0, r0, r8, asr r0
 17c:	80100e42 	andshi	r0, r0, r2, asr #28
 180:	82038104 	andhi	r8, r3, #4, 2
 184:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
 188:	07841c0e 	streq	r1, [r4, lr, lsl #24]
 18c:	058e0685 	streq	r0, [lr, #1669]	; 0x685
 190:	00280e42 	eoreq	r0, r8, r2, asr #28
 194:	0000000c 	andeq	r0, r0, ip
 198:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 19c:	7c020001 	stcvc	0, cr0, [r2], {1}
 1a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1a4:	00000018 	andeq	r0, r0, r8, lsl r0
 1a8:	00000194 	muleq	r0, r4, r1
 1ac:	00008428 	andeq	r8, r0, r8, lsr #8
 1b0:	00000034 	andeq	r0, r0, r4, lsr r0
 1b4:	83100e42 	tsthi	r0, #1056	; 0x420
 1b8:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 1bc:	00018e02 	andeq	r8, r1, r2, lsl #28
 1c0:	0000000c 	andeq	r0, r0, ip
 1c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1c8:	7c020001 	stcvc	0, cr0, [r2], {1}
 1cc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1d0:	0000000c 	andeq	r0, r0, ip
 1d4:	000001c0 	andeq	r0, r0, r0, asr #3
 1d8:	0000845c 	andeq	r8, r0, ip, asr r4
 1dc:	00000014 	andeq	r0, r0, r4, lsl r0
 1e0:	0000000c 	andeq	r0, r0, ip
 1e4:	000001c0 	andeq	r0, r0, r0, asr #3
 1e8:	00008470 	andeq	r8, r0, r0, ror r4
 1ec:	0000002c 	andeq	r0, r0, ip, lsr #32
 1f0:	0000000c 	andeq	r0, r0, ip
 1f4:	000001c0 	andeq	r0, r0, r0, asr #3
 1f8:	0000849c 	muleq	r0, ip, r4
 1fc:	00000040 	andeq	r0, r0, r0, asr #32
 200:	00000020 	andeq	r0, r0, r0, lsr #32
 204:	000001c0 	andeq	r0, r0, r0, asr #3
 208:	000084dc 	ldrdeq	r8, [r0], -ip
 20c:	00000198 	muleq	r0, r8, r1
 210:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 214:	86058506 	strhi	r8, [r5], -r6, lsl #10
 218:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 21c:	42018e02 	andmi	r8, r1, #2, 28
 220:	0000580e 	andeq	r5, r0, lr, lsl #16
 224:	00000014 	andeq	r0, r0, r4, lsl r0
 228:	000001c0 	andeq	r0, r0, r0, asr #3
 22c:	00008674 	andeq	r8, r0, r4, ror r6
 230:	00000050 	andeq	r0, r0, r0, asr r0
 234:	83080e42 	movwhi	r0, #36418	; 0x8e42
 238:	00018e02 	andeq	r8, r1, r2, lsl #28
 23c:	00000028 	andeq	r0, r0, r8, lsr #32
 240:	000001c0 	andeq	r0, r0, r0, asr #3
 244:	000086c4 	andeq	r8, r0, r4, asr #13
 248:	00000288 	andeq	r0, r0, r8, lsl #5
 24c:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
 250:	86088509 	strhi	r8, [r8], -r9, lsl #10
 254:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
 258:	8a048905 	bhi	122674 <__bss_end__+0x118fb4>
 25c:	8e028b03 	vmlahi.f64	d8, d2, d3
 260:	b00e4201 	andlt	r4, lr, r1, lsl #4
 264:	00000001 	andeq	r0, r0, r1
 268:	0000000c 	andeq	r0, r0, ip
 26c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 270:	7c020001 	stcvc	0, cr0, [r2], {1}
 274:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 278:	00000014 	andeq	r0, r0, r4, lsl r0
 27c:	00000268 	andeq	r0, r0, r8, ror #4
 280:	0000894c 	andeq	r8, r0, ip, asr #18
 284:	00000034 	andeq	r0, r0, r4, lsr r0
 288:	83080e42 	movwhi	r0, #36418	; 0x8e42
 28c:	00018e02 	andeq	r8, r1, r2, lsl #28
 290:	0000000c 	andeq	r0, r0, ip
 294:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 298:	7c020001 	stcvc	0, cr0, [r2], {1}
 29c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2a0:	0000000c 	andeq	r0, r0, ip
 2a4:	00000290 	muleq	r0, r0, r2
 2a8:	00008980 	andeq	r8, r0, r0, lsl #19
 2ac:	00000018 	andeq	r0, r0, r8, lsl r0
 2b0:	0000000c 	andeq	r0, r0, ip
 2b4:	00000290 	muleq	r0, r0, r2
 2b8:	00008998 	muleq	r0, r8, r9
 2bc:	00000014 	andeq	r0, r0, r4, lsl r0
 2c0:	00000014 	andeq	r0, r0, r4, lsl r0
 2c4:	00000290 	muleq	r0, r0, r2
 2c8:	000089ac 	andeq	r8, r0, ip, lsr #19
 2cc:	00000048 	andeq	r0, r0, r8, asr #32
 2d0:	83080e42 	movwhi	r0, #36418	; 0x8e42
 2d4:	00018e02 	andeq	r8, r1, r2, lsl #28
 2d8:	0000000c 	andeq	r0, r0, ip
 2dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2e0:	7c020001 	stcvc	0, cr0, [r2], {1}
 2e4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2e8:	0000000c 	andeq	r0, r0, ip
 2ec:	000002d8 	ldrdeq	r0, [r0], -r8
 2f0:	000089f4 	strdeq	r8, [r0], -r4
 2f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f8:	00000014 	andeq	r0, r0, r4, lsl r0
 2fc:	000002d8 	ldrdeq	r0, [r0], -r8
 300:	00008a10 	andeq	r8, r0, r0, lsl sl
 304:	00000014 	andeq	r0, r0, r4, lsl r0
 308:	83080e42 	movwhi	r0, #36418	; 0x8e42
 30c:	00018e02 	andeq	r8, r1, r2, lsl #28
 310:	00000018 	andeq	r0, r0, r8, lsl r0
 314:	000002d8 	ldrdeq	r0, [r0], -r8
 318:	00008a24 	andeq	r8, r0, r4, lsr #20
 31c:	00000024 	andeq	r0, r0, r4, lsr #32
 320:	83100e42 	tsthi	r0, #1056	; 0x420
 324:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 328:	00018e02 	andeq	r8, r1, r2, lsl #28
 32c:	00000014 	andeq	r0, r0, r4, lsl r0
 330:	000002d8 	ldrdeq	r0, [r0], -r8
 334:	00008a48 	andeq	r8, r0, r8, asr #20
 338:	00000014 	andeq	r0, r0, r4, lsl r0
 33c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 340:	00018e02 	andeq	r8, r1, r2, lsl #28
 344:	00000014 	andeq	r0, r0, r4, lsl r0
 348:	000002d8 	ldrdeq	r0, [r0], -r8
 34c:	00008a5c 	andeq	r8, r0, ip, asr sl
 350:	00000014 	andeq	r0, r0, r4, lsl r0
 354:	83080e42 	movwhi	r0, #36418	; 0x8e42
 358:	00018e02 	andeq	r8, r1, r2, lsl #28
 35c:	0000000c 	andeq	r0, r0, ip
 360:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 364:	7c020001 	stcvc	0, cr0, [r2], {1}
 368:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 36c:	00000014 	andeq	r0, r0, r4, lsl r0
 370:	0000035c 	andeq	r0, r0, ip, asr r3
 374:	00008d48 	andeq	r8, r0, r8, asr #26
 378:	00000064 	andeq	r0, r0, r4, rrx
 37c:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 380:	00018e02 	andeq	r8, r1, r2, lsl #28
 384:	00000014 	andeq	r0, r0, r4, lsl r0
 388:	0000035c 	andeq	r0, r0, ip, asr r3
 38c:	00008dac 	andeq	r8, r0, ip, lsr #27
 390:	00000094 	muleq	r0, r4, r0
 394:	83080e42 	movwhi	r0, #36418	; 0x8e42
 398:	00018e02 	andeq	r8, r1, r2, lsl #28
 39c:	00000014 	andeq	r0, r0, r4, lsl r0
 3a0:	0000035c 	andeq	r0, r0, ip, asr r3
 3a4:	00008e40 	andeq	r8, r0, r0, asr #28
 3a8:	00000058 	andeq	r0, r0, r8, asr r0
 3ac:	83080e42 	movwhi	r0, #36418	; 0x8e42
 3b0:	00018e02 	andeq	r8, r1, r2, lsl #28
 3b4:	0000000c 	andeq	r0, r0, ip
 3b8:	0000035c 	andeq	r0, r0, ip, asr r3
 3bc:	00008e98 	muleq	r0, r8, lr
 3c0:	00000018 	andeq	r0, r0, r8, lsl r0
 3c4:	0000000c 	andeq	r0, r0, ip
 3c8:	0000035c 	andeq	r0, r0, ip, asr r3
 3cc:	00008eb0 			; <UNDEFINED> instruction: 0x00008eb0
 3d0:	00000010 	andeq	r0, r0, r0, lsl r0
 3d4:	0000000c 	andeq	r0, r0, ip
 3d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3dc:	7c020001 	stcvc	0, cr0, [r2], {1}
 3e0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3e4:	00000014 	andeq	r0, r0, r4, lsl r0
 3e8:	000003d4 	ldrdeq	r0, [r0], -r4
 3ec:	00008ec0 	andeq	r8, r0, r0, asr #29
 3f0:	00000014 	andeq	r0, r0, r4, lsl r0
 3f4:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 3f8:	00018e02 	andeq	r8, r1, r2, lsl #28

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	00008980 	andeq	r8, r0, r0, lsl #19
   4:	000089f4 	strdeq	r8, [r0], -r4
	...
