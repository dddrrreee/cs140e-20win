
1-test-thread.bin.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e3a0d302 	mov	sp, #134217728	; 0x8000000
    8004:	e3a0b000 	mov	fp, #0
    8008:	eb00021e 	bl	8888 <_cstart>
    800c:	eb00024c 	bl	8944 <rpi_reboot>

00008010 <thread_code>:
//#include "rpi-thread.h"

static unsigned thread_count, thread_sum;

// trivial first thread: does not block, explicitly calls exit.
static void thread_code(void *arg) {
    8010:	e92d4030 	push	{r4, r5, lr}
    8014:	e24dd00c 	sub	sp, sp, #12
    8018:	e1a05000 	mov	r5, r0
    unsigned *x = arg;

    // check tid
    unsigned tid = rpi_cur_thread()->tid;
    801c:	eb00037e 	bl	8e1c <rpi_cur_thread>
    8020:	e5904044 	ldr	r4, [r0, #68]	; 0x44
	printk("in thread %p, with %x\n", tid, *x);
    8024:	e59f0088 	ldr	r0, [pc, #136]	; 80b4 <thread_code+0xa4>
    8028:	e1a01004 	mov	r1, r4
    802c:	e5952000 	ldr	r2, [r5]
    8030:	eb000092 	bl	8280 <printk>
    demand(rpi_cur_thread()->tid == *x+1, 
    8034:	eb000378 	bl	8e1c <rpi_cur_thread>
    8038:	e5902044 	ldr	r2, [r0, #68]	; 0x44
    803c:	e5953000 	ldr	r3, [r5]
    8040:	e2833001 	add	r3, r3, #1
    8044:	e1520003 	cmp	r2, r3
    8048:	0a00000a 	beq	8078 <thread_code+0x68>
    804c:	eb0000a6 	bl	82ec <rpi_reset_putc>
    8050:	e5953000 	ldr	r3, [r5]
    8054:	e58d4000 	str	r4, [sp]
    8058:	e2833001 	add	r3, r3, #1
    805c:	e58d3004 	str	r3, [sp, #4]
    8060:	e59f0050 	ldr	r0, [pc, #80]	; 80b8 <thread_code+0xa8>
    8064:	e59f1050 	ldr	r1, [pc, #80]	; 80bc <thread_code+0xac>
    8068:	e59f2050 	ldr	r2, [pc, #80]	; 80c0 <thread_code+0xb0>
    806c:	e3a0301a 	mov	r3, #26
    8070:	eb000082 	bl	8280 <printk>
    8074:	eb0001f1 	bl	8840 <clean_reboot>
                "expected %d, have %d\n", tid,*x+1);

    // check yield.
    rpi_yield();
    8078:	eb000394 	bl	8ed0 <rpi_yield>
	thread_count ++;
    807c:	e59f4040 	ldr	r4, [pc, #64]	; 80c4 <thread_code+0xb4>
    8080:	e5943000 	ldr	r3, [r4]
    8084:	e2833001 	add	r3, r3, #1
    8088:	e5843000 	str	r3, [r4]
    rpi_yield();
    808c:	eb00038f 	bl	8ed0 <rpi_yield>
	thread_sum += *x;
    8090:	e5952000 	ldr	r2, [r5]
    8094:	e5943004 	ldr	r3, [r4, #4]
    8098:	e0823003 	add	r3, r2, r3
    809c:	e5843004 	str	r3, [r4, #4]
    rpi_yield();
    80a0:	eb00038a 	bl	8ed0 <rpi_yield>
    // check exit
    rpi_exit(0);
    80a4:	e3a00000 	mov	r0, #0
    80a8:	eb000372 	bl	8e78 <rpi_exit>
}
    80ac:	e28dd00c 	add	sp, sp, #12
    80b0:	e8bd8030 	pop	{r4, r5, pc}
    80b4:	00009f64 	andeq	r9, r0, r4, ror #30
    80b8:	00009f7c 	andeq	r9, r0, ip, ror pc
    80bc:	00009fd0 	ldrdeq	r9, [r0], -r0
    80c0:	00009f50 	andeq	r9, r0, r0, asr pc
    80c4:	0000a668 	andeq	sl, r0, r8, ror #12

000080c8 <notmain>:

void notmain() {
    80c8:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    uart_init();
    80cc:	eb000578 	bl	96b4 <uart_init>
    kmalloc_init();
    80d0:	eb000293 	bl	8b24 <kmalloc_init>

    printk("about to test summing of 30 threads\n");
    80d4:	e59f00c0 	ldr	r0, [pc, #192]	; 819c <notmain+0xd4>
    80d8:	eb000068 	bl	8280 <printk>

    // change this to increase the number of threads.
	int n = 30;
	thread_sum = thread_count = 0;
    80dc:	e59f30bc 	ldr	r3, [pc, #188]	; 81a0 <notmain+0xd8>
    80e0:	e3a05000 	mov	r5, #0
    80e4:	e5835000 	str	r5, [r3]
    80e8:	e5835004 	str	r5, [r3, #4]

    unsigned sum = 0;
	for(int i = 0; i < n; i++)  {
    80ec:	e1a04005 	mov	r4, r5
        int *x = kmalloc(sizeof *x);
    80f0:	e3a07004 	mov	r7, #4
        sum += *x = i;
		rpi_fork(thread_code, x);
    80f4:	e59f60a8 	ldr	r6, [pc, #168]	; 81a4 <notmain+0xdc>
    // change this to increase the number of threads.
	int n = 30;
	thread_sum = thread_count = 0;

    unsigned sum = 0;
	for(int i = 0; i < n; i++)  {
    80f8:	ea000007 	b	811c <notmain+0x54>
        int *x = kmalloc(sizeof *x);
    80fc:	e1a00007 	mov	r0, r7
    8100:	eb000243 	bl	8a14 <kmalloc>
    8104:	e1a01000 	mov	r1, r0
        sum += *x = i;
    8108:	e5804000 	str	r4, [r0]
    810c:	e0855004 	add	r5, r5, r4
		rpi_fork(thread_code, x);
    8110:	e1a00006 	mov	r0, r6
    8114:	eb000344 	bl	8e2c <rpi_fork>
    // change this to increase the number of threads.
	int n = 30;
	thread_sum = thread_count = 0;

    unsigned sum = 0;
	for(int i = 0; i < n; i++)  {
    8118:	e2844001 	add	r4, r4, #1
    811c:	e354001d 	cmp	r4, #29
    8120:	dafffff5 	ble	80fc <notmain+0x34>
        int *x = kmalloc(sizeof *x);
        sum += *x = i;
		rpi_fork(thread_code, x);
    }
	rpi_thread_start();
    8124:	eb0003a4 	bl	8fbc <rpi_thread_start>

	// no more threads: check.
	printk("count = %d, sum=%d\n", thread_count, thread_sum);
    8128:	e59f4070 	ldr	r4, [pc, #112]	; 81a0 <notmain+0xd8>
    812c:	e59f0074 	ldr	r0, [pc, #116]	; 81a8 <notmain+0xe0>
    8130:	e5941000 	ldr	r1, [r4]
    8134:	e5942004 	ldr	r2, [r4, #4]
    8138:	eb000050 	bl	8280 <printk>
	assert(thread_count == n);
    813c:	e5943000 	ldr	r3, [r4]
    8140:	e353001e 	cmp	r3, #30
    8144:	0a000006 	beq	8164 <notmain+0x9c>
    8148:	eb000067 	bl	82ec <rpi_reset_putc>
    814c:	e59f0058 	ldr	r0, [pc, #88]	; 81ac <notmain+0xe4>
    8150:	e59f1058 	ldr	r1, [pc, #88]	; 81b0 <notmain+0xe8>
    8154:	e59f2058 	ldr	r2, [pc, #88]	; 81b4 <notmain+0xec>
    8158:	e3a0303a 	mov	r3, #58	; 0x3a
    815c:	eb000047 	bl	8280 <printk>
    8160:	eb0001b6 	bl	8840 <clean_reboot>
	assert(thread_sum == sum);
    8164:	e59f3034 	ldr	r3, [pc, #52]	; 81a0 <notmain+0xd8>
    8168:	e5933004 	ldr	r3, [r3, #4]
    816c:	e1530005 	cmp	r3, r5
    8170:	0a000006 	beq	8190 <notmain+0xc8>
    8174:	eb00005c 	bl	82ec <rpi_reset_putc>
    8178:	e59f0038 	ldr	r0, [pc, #56]	; 81b8 <notmain+0xf0>
    817c:	e59f102c 	ldr	r1, [pc, #44]	; 81b0 <notmain+0xe8>
    8180:	e59f202c 	ldr	r2, [pc, #44]	; 81b4 <notmain+0xec>
    8184:	e3a0303b 	mov	r3, #59	; 0x3b
    8188:	eb00003c 	bl	8280 <printk>
    818c:	eb0001ab 	bl	8840 <clean_reboot>
    printk("SUCCESS!\n");
    8190:	e59f0024 	ldr	r0, [pc, #36]	; 81bc <notmain+0xf4>
    8194:	eb000039 	bl	8280 <printk>
	clean_reboot();
    8198:	eb0001a8 	bl	8840 <clean_reboot>
    819c:	00009fe0 	andeq	r9, r0, r0, ror #31
    81a0:	0000a668 	andeq	sl, r0, r8, ror #12
    81a4:	00008010 	andeq	r8, r0, r0, lsl r0
    81a8:	0000a008 	andeq	sl, r0, r8
    81ac:	0000a01c 	andeq	sl, r0, ip, lsl r0
    81b0:	00009fd0 	ldrdeq	r9, [r0], -r0
    81b4:	00009f5c 	andeq	r9, r0, ip, asr pc
    81b8:	0000a040 	andeq	sl, r0, r0, asr #32
    81bc:	0000a064 	andeq	sl, r0, r4, rrx

000081c0 <callee_save>:
    81c0:	e12fff1e 	bx	lr

000081c4 <store_one_asm>:
    81c4:	e5801000 	str	r1, [r0]
    81c8:	e12fff1e 	bx	lr

000081cc <check_callee_save>:
    81cc:	e3a04004 	mov	r4, #4
    81d0:	e3a05005 	mov	r5, #5
    81d4:	e3a06006 	mov	r6, #6
    81d8:	e3a07007 	mov	r7, #7
    81dc:	e3a08008 	mov	r8, #8
    81e0:	e3a09009 	mov	r9, #9
    81e4:	e3a0a00a 	mov	sl, #10
    81e8:	e3a0b00b 	mov	fp, #11
    81ec:	e3a0c00c 	mov	ip, #12
    81f0:	e9202000 	stmdb	r0!, {sp}
    81f4:	e9204ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

000081f8 <cswitch>:
    81f8:	e5804000 	str	r4, [r0]
    81fc:	e5805004 	str	r5, [r0, #4]
    8200:	e5806008 	str	r6, [r0, #8]
    8204:	e580700c 	str	r7, [r0, #12]
    8208:	e5808010 	str	r8, [r0, #16]
    820c:	e5809014 	str	r9, [r0, #20]
    8210:	e580a018 	str	sl, [r0, #24]
    8214:	e580b01c 	str	fp, [r0, #28]
    8218:	e580c020 	str	ip, [r0, #32]
    821c:	e580e024 	str	lr, [r0, #36]	; 0x24
    8220:	e580d028 	str	sp, [r0, #40]	; 0x28
    8224:	e3a04004 	mov	r4, #4
    8228:	e3a05005 	mov	r5, #5
    822c:	e3a06006 	mov	r6, #6
    8230:	e3a07007 	mov	r7, #7
    8234:	e3a08008 	mov	r8, #8
    8238:	e3a09009 	mov	r9, #9
    823c:	e3a0a00a 	mov	sl, #10
    8240:	e3a0b00b 	mov	fp, #11
    8244:	e3a0c00c 	mov	ip, #12
    8248:	e3a0d00d 	mov	sp, #13
    824c:	e3a0e00e 	mov	lr, #14
    8250:	e5914000 	ldr	r4, [r1]
    8254:	e5915004 	ldr	r5, [r1, #4]
    8258:	e5916008 	ldr	r6, [r1, #8]
    825c:	e591700c 	ldr	r7, [r1, #12]
    8260:	e5918010 	ldr	r8, [r1, #16]
    8264:	e5919014 	ldr	r9, [r1, #20]
    8268:	e591a018 	ldr	sl, [r1, #24]
    826c:	e591b01c 	ldr	fp, [r1, #28]
    8270:	e591c020 	ldr	ip, [r1, #32]
    8274:	e591e024 	ldr	lr, [r1, #36]	; 0x24
    8278:	e591d028 	ldr	sp, [r1, #40]	; 0x28
    827c:	e12fff1e 	bx	lr

00008280 <printk>:
#include <stdarg.h>

#include "rpi.h"
#include "va-printk.h"

int printk(const char *fmt, ...) {
    8280:	e92d000f 	push	{r0, r1, r2, r3}
    8284:	e92d4030 	push	{r4, r5, lr}
    8288:	e24dd00c 	sub	sp, sp, #12
    // this is a really huge buffer for a pi.   could do this better.
    static char buf[1024];
    va_list args;

    va_start(args, fmt);
    828c:	e28d301c 	add	r3, sp, #28
    8290:	e58d3004 	str	r3, [sp, #4]
        int sz = va_printk(buf, sizeof buf, fmt, args);
    8294:	e59f4034 	ldr	r4, [pc, #52]	; 82d0 <printk+0x50>
    8298:	e1a00004 	mov	r0, r4
    829c:	e3a01b01 	mov	r1, #1024	; 0x400
    82a0:	e59d2018 	ldr	r2, [sp, #24]
    82a4:	eb0000c3 	bl	85b8 <va_printk>
    82a8:	e1a05000 	mov	r5, r0
    va_end(args);


#if 1
    putk(buf);
    82ac:	e59f3020 	ldr	r3, [pc, #32]	; 82d4 <printk+0x54>
    82b0:	e5933000 	ldr	r3, [r3]
    82b4:	e1a00004 	mov	r0, r4
    82b8:	e12fff33 	blx	r3
    int i;
    for(i = 0; buf[i]; i++)
        rpi_putchar(buf[i]);
#endif
    return sz;
}
    82bc:	e1a00005 	mov	r0, r5
    82c0:	e28dd00c 	add	sp, sp, #12
    82c4:	e8bd4030 	pop	{r4, r5, lr}
    82c8:	e28dd010 	add	sp, sp, #16
    82cc:	e12fff1e 	bx	lr
    82d0:	0000a670 	andeq	sl, r0, r0, ror r6
    82d4:	00009eb4 			; <UNDEFINED> instruction: 0x00009eb4

000082d8 <internal_putchar>:
#include "rpi.h"

static int internal_putchar(int c) { uart_putc(c); return c; }
    82d8:	e92d4010 	push	{r4, lr}
    82dc:	e1a04000 	mov	r4, r0
    82e0:	eb000532 	bl	97b0 <uart_putc>
    82e4:	e1a00004 	mov	r0, r4
    82e8:	e8bd8010 	pop	{r4, pc}

000082ec <rpi_reset_putc>:

// override this is going through the network.
int (*rpi_putchar)(int c) = internal_putchar;

void rpi_reset_putc(void) {
    rpi_putchar = internal_putchar;
    82ec:	e59f2008 	ldr	r2, [pc, #8]	; 82fc <rpi_reset_putc+0x10>
    82f0:	e59f3008 	ldr	r3, [pc, #8]	; 8300 <rpi_reset_putc+0x14>
    82f4:	e5832000 	str	r2, [r3]
    82f8:	e12fff1e 	bx	lr
    82fc:	000082d8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    8300:	00009eb0 			; <UNDEFINED> instruction: 0x00009eb0

00008304 <rpi_set_putc>:
}
void rpi_set_putc(int (*fp)(int)) {
    rpi_putchar = fp;
    8304:	e59f3004 	ldr	r3, [pc, #4]	; 8310 <rpi_set_putc+0xc>
    8308:	e5830000 	str	r0, [r3]
    830c:	e12fff1e 	bx	lr
    8310:	00009eb0 			; <UNDEFINED> instruction: 0x00009eb0

00008314 <internal_putk>:
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    8314:	e92d4038 	push	{r3, r4, r5, lr}
    8318:	e1a04000 	mov	r4, r0
    for(; *p; p++)
        rpi_putchar(*p);
    831c:	e59f5020 	ldr	r5, [pc, #32]	; 8344 <internal_putk+0x30>
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    8320:	ea000002 	b	8330 <internal_putk+0x1c>
        rpi_putchar(*p);
    8324:	e5953000 	ldr	r3, [r5]
    8328:	e12fff33 	blx	r3
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    832c:	e2844001 	add	r4, r4, #1
    8330:	e5d40000 	ldrb	r0, [r4]
    8334:	e3500000 	cmp	r0, #0
    8338:	1afffff9 	bne	8324 <internal_putk+0x10>
        rpi_putchar(*p);
//  we were adding this.
//  rpi_putchar('\n');
    return 1;
}
    833c:	e3a00001 	mov	r0, #1
    8340:	e8bd8038 	pop	{r3, r4, r5, pc}
    8344:	00009eb0 			; <UNDEFINED> instruction: 0x00009eb0

00008348 <isdigit>:
    if(puts_fp)
        putk = puts_fp;
}

// XXX: check sign promotion.
static int isdigit(int c) { return c >= '0' && c <= '9'; }
    8348:	e2400030 	sub	r0, r0, #48	; 0x30
    834c:	e3500009 	cmp	r0, #9
    8350:	83a00000 	movhi	r0, #0
    8354:	93a00001 	movls	r0, #1
    8358:	e12fff1e 	bx	lr

0000835c <pad>:

// don't move: can't be inlined, gcc seems to have a bug.
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
    835c:	e0611000 	rsb	r1, r1, r0
	// pad with leading spaces
	for(; len < width; len++)
		*p++ = ' ';
    8360:	e3a03020 	mov	r3, #32
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8364:	ea000002 	b	8374 <pad+0x18>
		*p++ = ' ';
    8368:	e5c03000 	strb	r3, [r0]
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    836c:	e2811001 	add	r1, r1, #1
		*p++ = ' ';
    8370:	e2800001 	add	r0, r0, #1
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8374:	e1510002 	cmp	r1, r2
    8378:	bafffffa 	blt	8368 <pad+0xc>
		*p++ = ' ';
	*p = 0;
    837c:	e3a03000 	mov	r3, #0
    8380:	e5c03000 	strb	r3, [r0]
	return p;
}
    8384:	e12fff1e 	bx	lr

00008388 <reverse>:

static char* reverse(char *dst, int n, char *p, char *start) {
	// drop the lower chars if the string is too big.
	int len = p - start + 1; // include \0
    8388:	e063c002 	rsb	ip, r3, r2
    838c:	e28cc001 	add	ip, ip, #1
	if(len > n)
    8390:	e15c0001 	cmp	ip, r1
		start += (len - n);
    8394:	c061100c 	rsbgt	r1, r1, ip
    8398:	c0833001 	addgt	r3, r3, r1

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    839c:	e2422001 	sub	r2, r2, #1
    83a0:	e1a01000 	mov	r1, r0
    83a4:	ea000002 	b	83b4 <reverse+0x2c>
		*dst++ = *p;
    83a8:	e452c001 	ldrb	ip, [r2], #-1
    83ac:	e5c1c000 	strb	ip, [r1]
    83b0:	e2811001 	add	r1, r1, #1
		start += (len - n);

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    83b4:	e1520003 	cmp	r2, r3
    83b8:	2afffffa 	bcs	83a8 <reverse+0x20>
		*dst++ = *p;
	*dst++ = 0;
    83bc:	e3a03000 	mov	r3, #0
    83c0:	e5c13000 	strb	r3, [r1]

	return s;
}
    83c4:	e12fff1e 	bx	lr

000083c8 <emit>:

static char* emit(unsigned base, char *dst, int n, int val, int width, int signed_p) {
    83c8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    83cc:	e24dd040 	sub	sp, sp, #64	; 0x40
    83d0:	e1a05001 	mov	r5, r1
    83d4:	e1a04002 	mov	r4, r2
    83d8:	e59d2058 	ldr	r2, [sp, #88]	; 0x58
	// XXX: constrain width to be >= bit size: can change this.
	if(width > n)
    83dc:	e1520004 	cmp	r2, r4
		width = n - 1;
    83e0:	c2442001 	subgt	r2, r4, #1

	char buf[64], *p = buf; 
	unsigned u = val;
    83e4:	e1a0c003 	mov	ip, r3

	switch(base) { 
    83e8:	e2400002 	sub	r0, r0, #2
    83ec:	e350000e 	cmp	r0, #14
    83f0:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
    83f4:	ea000042 	b	8504 <emit+0x13c>
    83f8:	000084dc 	ldrdeq	r8, [r0], -ip
    83fc:	00008504 	andeq	r8, r0, r4, lsl #10
    8400:	00008504 	andeq	r8, r0, r4, lsl #10
    8404:	00008504 	andeq	r8, r0, r4, lsl #10
    8408:	00008504 	andeq	r8, r0, r4, lsl #10
    840c:	00008504 	andeq	r8, r0, r4, lsl #10
    8410:	000084d0 	ldrdeq	r8, [r0], -r0
    8414:	00008504 	andeq	r8, r0, r4, lsl #10
    8418:	00008434 	andeq	r8, r0, r4, lsr r4
    841c:	00008504 	andeq	r8, r0, r4, lsl #10
    8420:	00008504 	andeq	r8, r0, r4, lsl #10
    8424:	00008504 	andeq	r8, r0, r4, lsl #10
    8428:	00008504 	andeq	r8, r0, r4, lsl #10
    842c:	00008504 	andeq	r8, r0, r4, lsl #10
    8430:	000084a8 	andeq	r8, r0, r8, lsr #9
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
    8434:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
    8438:	e2911000 	adds	r1, r1, #0
    843c:	13a01001 	movne	r1, #1
    8440:	e0111fa3 	ands	r1, r1, r3, lsr #31
				neg_p = 1;
				val = -val;
    8444:	1263c000 	rsbne	ip, r3, #0
	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
				neg_p = 1;
    8448:	13a08001 	movne	r8, #1
	unsigned u = val;

	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
    844c:	03a08000 	moveq	r8, #0
			if(val < 0 && signed_p) {
				neg_p = 1;
    8450:	e1a0100d 	mov	r1, sp
				val = -val;
				u = val;
			}
			do { 
				*p++ = "0123456789"[u % 10];
    8454:	e59f70ec 	ldr	r7, [pc, #236]	; 8548 <emit+0x180>
    8458:	e59f60ec 	ldr	r6, [pc, #236]	; 854c <emit+0x184>
    845c:	ea000000 	b	8464 <emit+0x9c>
    8460:	e1a01003 	mov	r1, r3
    8464:	e2813001 	add	r3, r1, #1
    8468:	e08e0c97 	umull	r0, lr, r7, ip
    846c:	e1a0e1ae 	lsr	lr, lr, #3
    8470:	e1a0000e 	mov	r0, lr
    8474:	e08ee10e 	add	lr, lr, lr, lsl #2
    8478:	e1a0e08e 	lsl	lr, lr, #1
    847c:	e06ee00c 	rsb	lr, lr, ip
    8480:	e7d6c00e 	ldrb	ip, [r6, lr]
    8484:	e5c1c000 	strb	ip, [r1]
			} while(u /= 10); 
    8488:	e1a0c000 	mov	ip, r0
    848c:	e3500000 	cmp	r0, #0
    8490:	1afffff2 	bne	8460 <emit+0x98>
			if(neg_p)
    8494:	e3580000 	cmp	r8, #0
				*p++ = '-';
    8498:	12813002 	addne	r3, r1, #2
    849c:	13a0002d 	movne	r0, #45	; 0x2d
    84a0:	15c10001 	strbne	r0, [r1, #1]
    84a4:	ea00001d 	b	8520 <emit+0x158>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    84a8:	e1a0e00d 	mov	lr, sp
			break;
		}
		case 16:
			u = val;
                        do {
                                *p++ = "0123456789abcdef"[u % 16];
    84ac:	e59f009c 	ldr	r0, [pc, #156]	; 8550 <emit+0x188>
    84b0:	e28e3001 	add	r3, lr, #1
    84b4:	e20c100f 	and	r1, ip, #15
    84b8:	e7d01001 	ldrb	r1, [r0, r1]
    84bc:	e5ce1000 	strb	r1, [lr]
    84c0:	e1a0e003 	mov	lr, r3
                        } while(u /= 16);
    84c4:	e1b0c22c 	lsrs	ip, ip, #4
    84c8:	1afffff8 	bne	84b0 <emit+0xe8>
    84cc:	ea000013 	b	8520 <emit+0x158>
                        break;
		// just a single char
		case 8:
			*p++ = val;
    84d0:	e5cd3000 	strb	r3, [sp]
    84d4:	e28d3001 	add	r3, sp, #1
			break;
    84d8:	ea000010 	b	8520 <emit+0x158>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    84dc:	e1a0e00d 	mov	lr, sp
#if 0
			for(int i = 0; i < 32; i++)
				*p++ = "01"[(u & (1<<i)) != 0];
#else
                        do {
                        	*p++ = "01"[u % 2];
    84e0:	e59f006c 	ldr	r0, [pc, #108]	; 8554 <emit+0x18c>
    84e4:	e28e3001 	add	r3, lr, #1
    84e8:	e20c1001 	and	r1, ip, #1
    84ec:	e7d01001 	ldrb	r1, [r0, r1]
    84f0:	e5ce1000 	strb	r1, [lr]
    84f4:	e1a0e003 	mov	lr, r3
			} while(u /= 2);
    84f8:	e1b0c0ac 	lsrs	ip, ip, #1
    84fc:	1afffff8 	bne	84e4 <emit+0x11c>
    8500:	ea000006 	b	8520 <emit+0x158>
#endif
			break;
		default:
			assert(0);
    8504:	ebffff78 	bl	82ec <rpi_reset_putc>
    8508:	e59f0048 	ldr	r0, [pc, #72]	; 8558 <emit+0x190>
    850c:	e59f1048 	ldr	r1, [pc, #72]	; 855c <emit+0x194>
    8510:	e59f2048 	ldr	r2, [pc, #72]	; 8560 <emit+0x198>
    8514:	e3a03075 	mov	r3, #117	; 0x75
    8518:	ebffff58 	bl	8280 <printk>
    851c:	eb0000c7 	bl	8840 <clean_reboot>
	}
	// number string is reversed, so re-reverse it.
	return reverse(dst, n, pad(p, buf, width), buf);
    8520:	e1a00003 	mov	r0, r3
    8524:	e1a0100d 	mov	r1, sp
    8528:	ebffff8b 	bl	835c <pad>
    852c:	e1a02000 	mov	r2, r0
    8530:	e1a00005 	mov	r0, r5
    8534:	e1a01004 	mov	r1, r4
    8538:	e1a0300d 	mov	r3, sp
    853c:	ebffff91 	bl	8388 <reverse>
}
    8540:	e28dd040 	add	sp, sp, #64	; 0x40
    8544:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8548:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    854c:	0000a0bc 	strheq	sl, [r0], -ip
    8550:	0000a0c8 	andeq	sl, r0, r8, asr #1
    8554:	0000a0dc 	ldrdeq	sl, [r0], -ip
    8558:	0000a094 	muleq	r0, r4, r0
    855c:	0000a0a8 	andeq	sl, r0, r8, lsr #1
    8560:	0000a070 	andeq	sl, r0, r0, ror r0

00008564 <rpi_set_output>:
// override this is going through the network.
int (*rpi_putchar)(int c) = internal_putchar;
#endif


void rpi_set_output(int (*putc_fp)(int), int (*puts_fp)(const char *)) {
    8564:	e92d4008 	push	{r3, lr}
    assert(putc_fp);
    8568:	e3500000 	cmp	r0, #0
    856c:	1a000006 	bne	858c <rpi_set_output+0x28>
    8570:	ebffff5d 	bl	82ec <rpi_reset_putc>
    8574:	e59f0028 	ldr	r0, [pc, #40]	; 85a4 <rpi_set_output+0x40>
    8578:	e59f1028 	ldr	r1, [pc, #40]	; 85a8 <rpi_set_output+0x44>
    857c:	e59f2028 	ldr	r2, [pc, #40]	; 85ac <rpi_set_output+0x48>
    8580:	e3a03020 	mov	r3, #32
    8584:	ebffff3d 	bl	8280 <printk>
    8588:	eb0000ac 	bl	8840 <clean_reboot>
    rpi_putchar = putc_fp;
    858c:	e59f301c 	ldr	r3, [pc, #28]	; 85b0 <rpi_set_output+0x4c>
    8590:	e5830000 	str	r0, [r3]
    if(puts_fp)
    8594:	e3510000 	cmp	r1, #0
        putk = puts_fp;
    8598:	159f3014 	ldrne	r3, [pc, #20]	; 85b4 <rpi_set_output+0x50>
    859c:	15831000 	strne	r1, [r3]
    85a0:	e8bd8008 	pop	{r3, pc}
    85a4:	0000a0e0 	andeq	sl, r0, r0, ror #1
    85a8:	0000a0a8 	andeq	sl, r0, r8, lsr #1
    85ac:	0000a078 	andeq	sl, r0, r8, ror r0
    85b0:	00009eb0 			; <UNDEFINED> instruction: 0x00009eb0
    85b4:	00009eb4 			; <UNDEFINED> instruction: 0x00009eb4

000085b8 <va_printk>:
	return reverse(dst, n, pad(p, buf, width), buf);
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
    85b8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    85bc:	e24dd08c 	sub	sp, sp, #140	; 0x8c
    85c0:	e1a0a000 	mov	sl, r0
    85c4:	e1a09003 	mov	r9, r3
	char *p = buf, *e = buf + n - 1;
    85c8:	e2411001 	sub	r1, r1, #1
    85cc:	e0808001 	add	r8, r0, r1

	buf[0] = 0;
    85d0:	e3a03000 	mov	r3, #0
    85d4:	e5c03000 	strb	r3, [r0]
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;
    85d8:	e1a04000 	mov	r4, r0
			fmt+=2;
		} else {	
			fmt++;

			char *s, num[128];
			unsigned width = 0;
    85dc:	e1a0b003 	mov	fp, r3

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    85e0:	ea000086 	b	8800 <va_printk+0x248>
		if(*fmt != '%')
    85e4:	e3530025 	cmp	r3, #37	; 0x25
			*p++ = *fmt++;
    85e8:	12822001 	addne	r2, r2, #1
    85ec:	15c43000 	strbne	r3, [r4]
    85f0:	12844001 	addne	r4, r4, #1
    85f4:	1a000081 	bne	8800 <va_printk+0x248>
		
		else if(fmt[1] == '%') {
    85f8:	e5d21001 	ldrb	r1, [r2, #1]
    85fc:	e3510025 	cmp	r1, #37	; 0x25
			*p++ = *fmt;
    8600:	05c43000 	strbeq	r3, [r4]
			fmt+=2;
    8604:	02822002 	addeq	r2, r2, #2
	for(; *fmt && p < e; ) {
		if(*fmt != '%')
			*p++ = *fmt++;
		
		else if(fmt[1] == '%') {
			*p++ = *fmt;
    8608:	02844001 	addeq	r4, r4, #1
    860c:	0a00007b 	beq	8800 <va_printk+0x248>
			fmt+=2;
		} else {	
			fmt++;
    8610:	e2826001 	add	r6, r2, #1

			char *s, num[128];
			unsigned width = 0;
    8614:	e1a0700b 	mov	r7, fp

			while(isdigit(*fmt)) {
    8618:	ea000004 	b	8630 <va_printk+0x78>
				width = width*10 + *fmt - '0';
    861c:	e0877107 	add	r7, r7, r7, lsl #2
    8620:	e1a07087 	lsl	r7, r7, #1
    8624:	e0877005 	add	r7, r7, r5
    8628:	e2477030 	sub	r7, r7, #48	; 0x30
				fmt++;
    862c:	e2866001 	add	r6, r6, #1
			fmt++;

			char *s, num[128];
			unsigned width = 0;

			while(isdigit(*fmt)) {
    8630:	e5d65000 	ldrb	r5, [r6]
    8634:	e1a00005 	mov	r0, r5
    8638:	ebffff42 	bl	8348 <isdigit>
    863c:	e3500000 	cmp	r0, #0
    8640:	1afffff5 	bne	861c <va_printk+0x64>
				width = width*10 + *fmt - '0';
				fmt++;
			}
			assert(width < 32);
    8644:	e357001f 	cmp	r7, #31
    8648:	9a000006 	bls	8668 <va_printk+0xb0>
    864c:	ebffff26 	bl	82ec <rpi_reset_putc>
    8650:	e59f01d4 	ldr	r0, [pc, #468]	; 882c <va_printk+0x274>
    8654:	e59f11d4 	ldr	r1, [pc, #468]	; 8830 <va_printk+0x278>
    8658:	e59f21d4 	ldr	r2, [pc, #468]	; 8834 <va_printk+0x27c>
    865c:	e3a03092 	mov	r3, #146	; 0x92
    8660:	ebffff06 	bl	8280 <printk>
    8664:	eb000075 	bl	8840 <clean_reboot>
			
			switch(*fmt) {
    8668:	e2455062 	sub	r5, r5, #98	; 0x62
    866c:	e3550016 	cmp	r5, #22
    8670:	979ff105 	ldrls	pc, [pc, r5, lsl #2]
    8674:	ea00004e 	b	87b4 <va_printk+0x1fc>
    8678:	00008760 	andeq	r8, r0, r0, ror #14
    867c:	00008790 	muleq	r0, r0, r7
    8680:	000086f0 	strdeq	r8, [r0], -r0
    8684:	000087b4 			; <UNDEFINED> instruction: 0x000087b4
    8688:	000086d4 	ldrdeq	r8, [r0], -r4
    868c:	000087b4 			; <UNDEFINED> instruction: 0x000087b4
    8690:	000087b4 			; <UNDEFINED> instruction: 0x000087b4
    8694:	000087b4 			; <UNDEFINED> instruction: 0x000087b4
    8698:	000087b4 			; <UNDEFINED> instruction: 0x000087b4
    869c:	000087b4 			; <UNDEFINED> instruction: 0x000087b4
    86a0:	000087b4 			; <UNDEFINED> instruction: 0x000087b4
    86a4:	000087b4 			; <UNDEFINED> instruction: 0x000087b4
    86a8:	000087b4 			; <UNDEFINED> instruction: 0x000087b4
    86ac:	000087b4 			; <UNDEFINED> instruction: 0x000087b4
    86b0:	0000873c 	andeq	r8, r0, ip, lsr r7
    86b4:	000087b4 			; <UNDEFINED> instruction: 0x000087b4
    86b8:	000087b4 			; <UNDEFINED> instruction: 0x000087b4
    86bc:	00008784 	andeq	r8, r0, r4, lsl #15
    86c0:	000087b4 			; <UNDEFINED> instruction: 0x000087b4
    86c4:	00008718 	andeq	r8, r0, r8, lsl r7
    86c8:	000087b4 			; <UNDEFINED> instruction: 0x000087b4
    86cc:	000087b4 			; <UNDEFINED> instruction: 0x000087b4
    86d0:	0000873c 	andeq	r8, r0, ip, lsr r7
			case 'f':
			{
#ifndef RPI_FP_ENABLED
				panic("float not enabled!!!");
    86d4:	ebffff04 	bl	82ec <rpi_reset_putc>
    86d8:	e59f0158 	ldr	r0, [pc, #344]	; 8838 <va_printk+0x280>
    86dc:	e59f114c 	ldr	r1, [pc, #332]	; 8830 <va_printk+0x278>
    86e0:	e59f214c 	ldr	r2, [pc, #332]	; 8834 <va_printk+0x27c>
    86e4:	e3a03098 	mov	r3, #152	; 0x98
    86e8:	ebfffee4 	bl	8280 <printk>
    86ec:	eb000053 	bl	8840 <clean_reboot>

				break;
#endif
			}
			case 'd':
				s = emit(10, num, 128, va_arg(args, int), width, 1);
    86f0:	e5993000 	ldr	r3, [r9]
    86f4:	e2899004 	add	r9, r9, #4
    86f8:	e58d7000 	str	r7, [sp]
    86fc:	e3a02001 	mov	r2, #1
    8700:	e58d2004 	str	r2, [sp, #4]
    8704:	e3a0000a 	mov	r0, #10
    8708:	e28d1008 	add	r1, sp, #8
    870c:	e3a02080 	mov	r2, #128	; 0x80
    8710:	ebffff2c 	bl	83c8 <emit>
				break;
    8714:	ea00002f 	b	87d8 <va_printk+0x220>
			case 'u':
				s = emit(10, num, 128, va_arg(args, unsigned), width, 0);
    8718:	e5993000 	ldr	r3, [r9]
    871c:	e2899004 	add	r9, r9, #4
    8720:	e58d7000 	str	r7, [sp]
    8724:	e58db004 	str	fp, [sp, #4]
    8728:	e3a0000a 	mov	r0, #10
    872c:	e28d1008 	add	r1, sp, #8
    8730:	e3a02080 	mov	r2, #128	; 0x80
    8734:	ebffff23 	bl	83c8 <emit>
				break;
    8738:	ea000026 	b	87d8 <va_printk+0x220>
			case 'p':
			case 'x':
				s = emit(16, num, 128, va_arg(args, unsigned), width, 0);
    873c:	e5993000 	ldr	r3, [r9]
    8740:	e2899004 	add	r9, r9, #4
    8744:	e58d7000 	str	r7, [sp]
    8748:	e58db004 	str	fp, [sp, #4]
    874c:	e3a00010 	mov	r0, #16
    8750:	e28d1008 	add	r1, sp, #8
    8754:	e3a02080 	mov	r2, #128	; 0x80
    8758:	ebffff1a 	bl	83c8 <emit>
				break;
    875c:	ea00001d 	b	87d8 <va_printk+0x220>
			case 'b':
				s = emit(2, num, 128, va_arg(args, unsigned), width, 0);
    8760:	e5993000 	ldr	r3, [r9]
    8764:	e2899004 	add	r9, r9, #4
    8768:	e58d7000 	str	r7, [sp]
    876c:	e58db004 	str	fp, [sp, #4]
    8770:	e3a00002 	mov	r0, #2
    8774:	e28d1008 	add	r1, sp, #8
    8778:	e3a02080 	mov	r2, #128	; 0x80
    877c:	ebffff11 	bl	83c8 <emit>
				break;
    8780:	ea000014 	b	87d8 <va_printk+0x220>
			case 's':
				s = va_arg(args, char *);
    8784:	e5990000 	ldr	r0, [r9]
    8788:	e2899004 	add	r9, r9, #4
				break;
    878c:	ea000011 	b	87d8 <va_printk+0x220>
			case 'c':
				s = emit(8, num, 128, va_arg(args, int),width,0);
    8790:	e5993000 	ldr	r3, [r9]
    8794:	e2899004 	add	r9, r9, #4
    8798:	e58d7000 	str	r7, [sp]
    879c:	e58db004 	str	fp, [sp, #4]
    87a0:	e3a00008 	mov	r0, #8
    87a4:	e08d1000 	add	r1, sp, r0
    87a8:	e3a02080 	mov	r2, #128	; 0x80
    87ac:	ebffff05 	bl	83c8 <emit>
				break;
    87b0:	ea000008 	b	87d8 <va_printk+0x220>
			default: 
				panic("printk: not handling specifier '%c'\n", *fmt);
    87b4:	ebfffecc 	bl	82ec <rpi_reset_putc>
    87b8:	e5d63000 	ldrb	r3, [r6]
    87bc:	e58d3000 	str	r3, [sp]
    87c0:	e59f0074 	ldr	r0, [pc, #116]	; 883c <va_printk+0x284>
    87c4:	e59f1064 	ldr	r1, [pc, #100]	; 8830 <va_printk+0x278>
    87c8:	e59f2064 	ldr	r2, [pc, #100]	; 8834 <va_printk+0x27c>
    87cc:	e3a030b9 	mov	r3, #185	; 0xb9
    87d0:	ebfffeaa 	bl	8280 <printk>
    87d4:	eb000019 	bl	8840 <clean_reboot>
				return 0;   // ugh
			}
			fmt++;
    87d8:	e2862001 	add	r2, r6, #1

			// safe string copy
			for(; p < e && *s; )
    87dc:	ea000002 	b	87ec <va_printk+0x234>
				*p++ = *s++;
    87e0:	e2800001 	add	r0, r0, #1
    87e4:	e5c43000 	strb	r3, [r4]
    87e8:	e2844001 	add	r4, r4, #1
				return 0;   // ugh
			}
			fmt++;

			// safe string copy
			for(; p < e && *s; )
    87ec:	e1540008 	cmp	r4, r8
    87f0:	2a000002 	bcs	8800 <va_printk+0x248>
    87f4:	e5d03000 	ldrb	r3, [r0]
    87f8:	e3530000 	cmp	r3, #0
    87fc:	1afffff7 	bne	87e0 <va_printk+0x228>

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    8800:	e5d23000 	ldrb	r3, [r2]
    8804:	e3530000 	cmp	r3, #0
    8808:	0a000001 	beq	8814 <va_printk+0x25c>
    880c:	e1540008 	cmp	r4, r8
    8810:	3affff73 	bcc	85e4 <va_printk+0x2c>
			// safe string copy
			for(; p < e && *s; )
				*p++ = *s++;
		}
	}
	*p++ = 0;
    8814:	e2840001 	add	r0, r4, #1
    8818:	e3a03000 	mov	r3, #0
    881c:	e5c43000 	strb	r3, [r4]
	return p - buf;
}
    8820:	e06a0000 	rsb	r0, sl, r0
    8824:	e28dd08c 	add	sp, sp, #140	; 0x8c
    8828:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    882c:	0000a0f8 	strdeq	sl, [r0], -r8
    8830:	0000a0a8 	andeq	sl, r0, r8, lsr #1
    8834:	0000a088 	andeq	sl, r0, r8, lsl #1
    8838:	0000a114 	andeq	sl, r0, r4, lsl r1
    883c:	0000a13c 	andeq	sl, r0, ip, lsr r1

00008840 <clean_reboot>:
#include "rpi.h"

// print out a special message so bootloader exits
void clean_reboot(void) {
    8840:	e92d4008 	push	{r3, lr}
    putk("DONE!!!\n");
    8844:	e59f3014 	ldr	r3, [pc, #20]	; 8860 <clean_reboot+0x20>
    8848:	e5933000 	ldr	r3, [r3]
    884c:	e59f0010 	ldr	r0, [pc, #16]	; 8864 <clean_reboot+0x24>
    8850:	e12fff33 	blx	r3
    delay_ms(100);       // (hopefully) enough time for message to get flushed.
    8854:	e3a00064 	mov	r0, #100	; 0x64
    8858:	eb000063 	bl	89ec <delay_ms>
    rpi_reboot();
    885c:	eb000038 	bl	8944 <rpi_reboot>
    8860:	00009eb4 			; <UNDEFINED> instruction: 0x00009eb4
    8864:	0000a174 	andeq	sl, r0, r4, ror r1

00008868 <internal_sw_putchar>:
#include "rpi.h"
#include "sw-uart.h"
#include "control-block.h"

static sw_uart_t console_uart;
static int internal_sw_putchar(int c) {
    8868:	e92d4010 	push	{r4, lr}
    886c:	e1a04000 	mov	r4, r0
    sw_uart_putc(&console_uart, c);
    8870:	e59f000c 	ldr	r0, [pc, #12]	; 8884 <internal_sw_putchar+0x1c>
    8874:	e6ef1074 	uxtb	r1, r4
    8878:	eb000205 	bl	9094 <sw_uart_putc>
    return c;
}
    887c:	e1a00004 	mov	r0, r4
    8880:	e8bd8010 	pop	{r4, pc}
    8884:	0000aa70 	andeq	sl, r0, r0, ror sl

00008888 <_cstart>:

void _cstart() {
    8888:	e92d4008 	push	{r3, lr}
    extern int __bss_start__, __bss_end__;
	void notmain();

    int* bss = &__bss_start__;
    888c:	e59f3068 	ldr	r3, [pc, #104]	; 88fc <_cstart+0x74>
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    8890:	e59f2068 	ldr	r2, [pc, #104]	; 8900 <_cstart+0x78>
        *bss++ = 0;
    8894:	e3a01000 	mov	r1, #0
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    8898:	ea000001 	b	88a4 <_cstart+0x1c>
        *bss++ = 0;
    889c:	e5831000 	str	r1, [r3]
    88a0:	e2833004 	add	r3, r3, #4
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    88a4:	e1530002 	cmp	r3, r2
    88a8:	3afffffb 	bcc	889c <_cstart+0x14>
        *bss++ = 0;

#if 1
    // this links in so much stuff.  need to fix.
    control_blk_t *cb = cb_get_block();
    88ac:	eb000575 	bl	9e88 <cb_get_block>
    if(cb) {
    88b0:	e3500000 	cmp	r0, #0
    88b4:	0a00000e 	beq	88f4 <_cstart+0x6c>
        if(cb->console_dev == PUTC_SW_UART) {
    88b8:	e5d02004 	ldrb	r2, [r0, #4]
    88bc:	e3520002 	cmp	r2, #2
    88c0:	1a00000b 	bne	88f4 <_cstart+0x6c>
            rpi_putchar = internal_sw_putchar;
    88c4:	e59f1038 	ldr	r1, [pc, #56]	; 8904 <_cstart+0x7c>
    88c8:	e59f2038 	ldr	r2, [pc, #56]	; 8908 <_cstart+0x80>
    88cc:	e5821000 	str	r1, [r2]
            console_uart = cb->sw_uart;
    88d0:	e59fc034 	ldr	ip, [pc, #52]	; 890c <_cstart+0x84>
    88d4:	e2803008 	add	r3, r0, #8
    88d8:	e8930007 	ldm	r3, {r0, r1, r2}
    88dc:	e88c0007 	stm	ip, {r0, r1, r2}
            sw_uart_printk(&console_uart, "about to print on regular printf\n");
    88e0:	e1a0000c 	mov	r0, ip
    88e4:	e59f1024 	ldr	r1, [pc, #36]	; 8910 <_cstart+0x88>
    88e8:	eb00033d 	bl	95e4 <sw_uart_printk>
            printk("success!\n");
    88ec:	e59f0020 	ldr	r0, [pc, #32]	; 8914 <_cstart+0x8c>
    88f0:	ebfffe62 	bl	8280 <printk>
        }
    }
#endif
    notmain(); 
    88f4:	ebfffdf3 	bl	80c8 <notmain>
	rpi_reboot();
    88f8:	eb000011 	bl	8944 <rpi_reboot>
    88fc:	0000a668 	andeq	sl, r0, r8, ror #12
    8900:	0000aaa8 	andeq	sl, r0, r8, lsr #21
    8904:	00008868 	andeq	r8, r0, r8, ror #16
    8908:	00009eb0 			; <UNDEFINED> instruction: 0x00009eb0
    890c:	0000aa70 	andeq	sl, r0, r0, ror sl
    8910:	0000a180 	andeq	sl, r0, r0, lsl #3
    8914:	0000a1a4 	andeq	sl, r0, r4, lsr #3

00008918 <at_user_level>:
 * works if we have a trashed stack pointer?
 */
static unsigned user_level = 0b10000;
int at_user_level(void) {
    unsigned cpsr = 0;
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    8918:	e10f0000 	mrs	r0, CPSR

    // user level = lower 5 bits = 0b10000);
    return (cpsr  & 0b11111)  == user_level;
    891c:	e200001f 	and	r0, r0, #31
}
    8920:	e3500010 	cmp	r0, #16
    8924:	13a00000 	movne	r0, #0
    8928:	03a00001 	moveq	r0, #1
    892c:	e12fff1e 	bx	lr

00008930 <set_user_level>:

// this is just used by the reboot code.
void set_user_level(void) {
    unsigned cpsr = 0;
    // XXX: shouldn't we just set the one bit?
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    8930:	e10f3000 	mrs	r3, CPSR
        cpsr = (cpsr & ~0b11111) | user_level;
    8934:	e3c3301f 	bic	r3, r3, #31
    8938:	e3833010 	orr	r3, r3, #16
    asm volatile("msr cpsr, %0" :: "r"(cpsr));
    893c:	e129f003 	msr	CPSR_fc, r3
    8940:	e12fff1e 	bx	lr

00008944 <rpi_reboot>:
}

void rpi_reboot(void) {
    8944:	e92d4008 	push	{r3, lr}
    if(at_user_level()) {
    8948:	ebfffff2 	bl	8918 <at_user_level>
    894c:	e3500000 	cmp	r0, #0
    8950:	0a000000 	beq	8958 <rpi_reboot+0x14>
        set_user_level();
    8954:	ebfffff5 	bl	8930 <set_user_level>
        // of stuff.
        // assert(!at_user_level());
    }

    // gives uart time to flush: should just call flush directly.
    delay_ms(30);
    8958:	e3a0001e 	mov	r0, #30
    895c:	eb000022 	bl	89ec <delay_ms>
    const int PM_WDOG = 0x20100024;
    const int PM_PASSWORD = 0x5a000000;
    const int PM_RSTC_WRCFG_FULL_RESET = 0x00000020;

    // timeout = 1/16th of a second? (whatever)
    PUT32(PM_WDOG, PM_PASSWORD | 1);
    8960:	e59f0014 	ldr	r0, [pc, #20]	; 897c <rpi_reboot+0x38>
    8964:	e59f1014 	ldr	r1, [pc, #20]	; 8980 <rpi_reboot+0x3c>
    8968:	eb0003ae 	bl	9828 <PUT32>
    PUT32(PM_RSTC, PM_PASSWORD | PM_RSTC_WRCFG_FULL_RESET);
    896c:	e59f0010 	ldr	r0, [pc, #16]	; 8984 <rpi_reboot+0x40>
    8970:	e59f1010 	ldr	r1, [pc, #16]	; 8988 <rpi_reboot+0x44>
    8974:	eb0003ab 	bl	9828 <PUT32>
    8978:	eafffffe 	b	8978 <rpi_reboot+0x34>
    897c:	20100024 	andscs	r0, r0, r4, lsr #32
    8980:	5a000001 	bpl	898c <delay_cycles>
    8984:	2010001c 	andscs	r0, r0, ip, lsl r0
    8988:	5a000020 	bpl	8a10 <delay_sec+0x10>

0000898c <delay_cycles>:
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    898c:	ea000001 	b	8998 <delay_cycles+0xc>
        asm("add r1, r1, #0");
    8990:	e2811000 	add	r1, r1, #0
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    8994:	e1a00003 	mov	r0, r3
    8998:	e2403001 	sub	r3, r0, #1
    899c:	e3500000 	cmp	r0, #0
    89a0:	1afffffa 	bne	8990 <delay_cycles+0x4>
        asm("add r1, r1, #0");
}
    89a4:	e12fff1e 	bx	lr

000089a8 <timer_get_usec_raw>:

// no dev barrier.
unsigned timer_get_usec_raw(void) {
    89a8:	e92d4008 	push	{r3, lr}
    return GET32(0x20003004);
    89ac:	e59f0004 	ldr	r0, [pc, #4]	; 89b8 <timer_get_usec_raw+0x10>
    89b0:	eb0003a8 	bl	9858 <GET32>
}
    89b4:	e8bd8008 	pop	{r3, pc}
    89b8:	20003004 	andcs	r3, r0, r4

000089bc <timer_get_usec>:

// in usec
unsigned timer_get_usec(void) {
    89bc:	e92d4008 	push	{r3, lr}
// comment these out for this lab (8) so student
// code does not get hit by weird timing issues.
//    dev_barrier();
    unsigned u = timer_get_usec_raw();
    89c0:	ebfffff8 	bl	89a8 <timer_get_usec_raw>
//    dev_barrier();
    return u;
}
    89c4:	e8bd8008 	pop	{r3, pc}

000089c8 <delay_us>:

void delay_us(unsigned us) {
    89c8:	e92d4038 	push	{r3, r4, r5, lr}
    89cc:	e1a05000 	mov	r5, r0
    unsigned rb = timer_get_usec();
    89d0:	ebfffff9 	bl	89bc <timer_get_usec>
    89d4:	e1a04000 	mov	r4, r0
    while (1) {
        unsigned ra = timer_get_usec();
    89d8:	ebfffff7 	bl	89bc <timer_get_usec>
        if ((ra - rb) >= us) {
    89dc:	e0640000 	rsb	r0, r4, r0
    89e0:	e1500005 	cmp	r0, r5
    89e4:	3afffffb 	bcc	89d8 <delay_us+0x10>
            break;
        }
    }
}
    89e8:	e8bd8038 	pop	{r3, r4, r5, pc}

000089ec <delay_ms>:
void delay_ms(unsigned ms) {
    89ec:	e92d4008 	push	{r3, lr}
    delay_us(ms*1000);
    89f0:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    89f4:	e0000093 	mul	r0, r3, r0
    89f8:	ebfffff2 	bl	89c8 <delay_us>
    89fc:	e8bd8008 	pop	{r3, pc}

00008a00 <delay_sec>:
}
void delay_sec(unsigned sec) {
    8a00:	e92d4008 	push	{r3, lr}
    delay_ms(sec*1000);
    8a04:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    8a08:	e0000093 	mul	r0, r3, r0
    8a0c:	ebfffff6 	bl	89ec <delay_ms>
    8a10:	e8bd8008 	pop	{r3, pc}

00008a14 <kmalloc>:
 *  - The returned pointer should always be 4-byte aligned.  
 *    Easiest way is to make sure the heap pointer starts 4-byte
 *    and you always round up the number of bytes.  Make sure
 *    you put an assertion in.  
 */
void *kmalloc(unsigned nbytes) {
    8a14:	e92d4070 	push	{r4, r5, r6, lr}
    demand(init_p, calling before initialized);
    8a18:	e59f3058 	ldr	r3, [pc, #88]	; 8a78 <kmalloc+0x64>
    8a1c:	e5933000 	ldr	r3, [r3]
    8a20:	e3530000 	cmp	r3, #0
    8a24:	1a000006 	bne	8a44 <kmalloc+0x30>
    8a28:	ebfffe2f 	bl	82ec <rpi_reset_putc>
    8a2c:	e59f0048 	ldr	r0, [pc, #72]	; 8a7c <kmalloc+0x68>
    8a30:	e59f1048 	ldr	r1, [pc, #72]	; 8a80 <kmalloc+0x6c>
    8a34:	e59f2048 	ldr	r2, [pc, #72]	; 8a84 <kmalloc+0x70>
    8a38:	e3a0301a 	mov	r3, #26
    8a3c:	ebfffe0f 	bl	8280 <printk>
    8a40:	ebffff7e 	bl	8840 <clean_reboot>
    
    void* to_allocate = heap_ptr;
    8a44:	e59f402c 	ldr	r4, [pc, #44]	; 8a78 <kmalloc+0x64>
    8a48:	e5945004 	ldr	r5, [r4, #4]
    unsigned rounded_nbytes = roundup(nbytes, 8);
    8a4c:	e2806007 	add	r6, r0, #7
    8a50:	e3c66007 	bic	r6, r6, #7
    memset(heap_ptr, 0, rounded_nbytes);
    8a54:	e1a00005 	mov	r0, r5
    8a58:	e3a01000 	mov	r1, #0
    8a5c:	e1a02006 	mov	r2, r6
    8a60:	eb0004f6 	bl	9e40 <memset>
    heap_ptr += rounded_nbytes;
    8a64:	e5943004 	ldr	r3, [r4, #4]
    8a68:	e0836006 	add	r6, r3, r6
    8a6c:	e5846004 	str	r6, [r4, #4]
    //memset(heap_ptr, 0, rounded_nbytes);
    return to_allocate;

}
    8a70:	e1a00005 	mov	r0, r5
    8a74:	e8bd8070 	pop	{r4, r5, r6, pc}
    8a78:	0000aa7c 	andeq	sl, r0, ip, ror sl
    8a7c:	0000a1f0 	strdeq	sl, [r0], -r0
    8a80:	0000a230 	andeq	sl, r0, r0, lsr r2
    8a84:	0000a1b0 			; <UNDEFINED> instruction: 0x0000a1b0

00008a88 <kmalloc_aligned>:

// address of returned pointer should be a multiple of
// alignment.
void *kmalloc_aligned(unsigned nbytes, unsigned alignment) {
    8a88:	e92d4008 	push	{r3, lr}
    demand(init_p, calling before initialized);
    8a8c:	e59f307c 	ldr	r3, [pc, #124]	; 8b10 <kmalloc_aligned+0x88>
    8a90:	e5933000 	ldr	r3, [r3]
    8a94:	e3530000 	cmp	r3, #0
    8a98:	1a000006 	bne	8ab8 <kmalloc_aligned+0x30>
    8a9c:	ebfffe12 	bl	82ec <rpi_reset_putc>
    8aa0:	e59f006c 	ldr	r0, [pc, #108]	; 8b14 <kmalloc_aligned+0x8c>
    8aa4:	e59f106c 	ldr	r1, [pc, #108]	; 8b18 <kmalloc_aligned+0x90>
    8aa8:	e59f206c 	ldr	r2, [pc, #108]	; 8b1c <kmalloc_aligned+0x94>
    8aac:	e3a03028 	mov	r3, #40	; 0x28
    8ab0:	ebfffdf2 	bl	8280 <printk>
    8ab4:	ebffff61 	bl	8840 <clean_reboot>

    if(alignment <= 8)
    8ab8:	e3510008 	cmp	r1, #8
    8abc:	8a000001 	bhi	8ac8 <kmalloc_aligned+0x40>
        return kmalloc(nbytes);
    8ac0:	ebffffd3 	bl	8a14 <kmalloc>
    8ac4:	e8bd8008 	pop	{r3, pc}
    demand(alignment % 8 == 0, "weird alignment: not a multiple of 4!");
    8ac8:	e3110007 	tst	r1, #7
    8acc:	0a000006 	beq	8aec <kmalloc_aligned+0x64>
    8ad0:	ebfffe05 	bl	82ec <rpi_reset_putc>
    8ad4:	e59f0044 	ldr	r0, [pc, #68]	; 8b20 <kmalloc_aligned+0x98>
    8ad8:	e59f1038 	ldr	r1, [pc, #56]	; 8b18 <kmalloc_aligned+0x90>
    8adc:	e59f2038 	ldr	r2, [pc, #56]	; 8b1c <kmalloc_aligned+0x94>
    8ae0:	e3a0302c 	mov	r3, #44	; 0x2c
    8ae4:	ebfffde5 	bl	8280 <printk>
    8ae8:	ebffff54 	bl	8840 <clean_reboot>
    unsigned aligned_heap_ptr = (unsigned) heap_ptr;
    8aec:	e59f301c 	ldr	r3, [pc, #28]	; 8b10 <kmalloc_aligned+0x88>
    8af0:	e5932004 	ldr	r2, [r3, #4]
	aligned_heap_ptr = roundup(aligned_heap_ptr, alignment);
    8af4:	e0812002 	add	r2, r1, r2
    8af8:	e2422001 	sub	r2, r2, #1
    8afc:	e2611000 	rsb	r1, r1, #0
    8b00:	e0021001 	and	r1, r2, r1
	heap_ptr = (void*) aligned_heap_ptr;
    8b04:	e5831004 	str	r1, [r3, #4]

	return kmalloc(nbytes);
    8b08:	ebffffc1 	bl	8a14 <kmalloc>
}
    8b0c:	e8bd8008 	pop	{r3, pc}
    8b10:	0000aa7c 	andeq	sl, r0, ip, ror sl
    8b14:	0000a1f0 	strdeq	sl, [r0], -r0
    8b18:	0000a230 	andeq	sl, r0, r0, lsr r2
    8b1c:	0000a1b8 			; <UNDEFINED> instruction: 0x0000a1b8
    8b20:	0000a244 	andeq	sl, r0, r4, asr #4

00008b24 <kmalloc_init>:
 *    - should be just a few lines of code.
 *    - sets heap pointer to the location of 
 *      __heap_start__.   print this to make sure
 *      it makes sense!
 */
void kmalloc_init(void) {
    8b24:	e92d4008 	push	{r3, lr}
    demand(!init_p, cannot initialize twice!\n);
    8b28:	e59f303c 	ldr	r3, [pc, #60]	; 8b6c <kmalloc_init+0x48>
    8b2c:	e5933000 	ldr	r3, [r3]
    8b30:	e3530000 	cmp	r3, #0
    8b34:	0a000006 	beq	8b54 <kmalloc_init+0x30>
    8b38:	ebfffdeb 	bl	82ec <rpi_reset_putc>
    8b3c:	e59f002c 	ldr	r0, [pc, #44]	; 8b70 <kmalloc_init+0x4c>
    8b40:	e59f102c 	ldr	r1, [pc, #44]	; 8b74 <kmalloc_init+0x50>
    8b44:	e59f202c 	ldr	r2, [pc, #44]	; 8b78 <kmalloc_init+0x54>
    8b48:	e3a0303d 	mov	r3, #61	; 0x3d
    8b4c:	ebfffdcb 	bl	8280 <printk>
    8b50:	ebffff3a 	bl	8840 <clean_reboot>
    init_p = 1;
    8b54:	e59f3010 	ldr	r3, [pc, #16]	; 8b6c <kmalloc_init+0x48>
    8b58:	e3a02001 	mov	r2, #1
    8b5c:	e5832000 	str	r2, [r3]
    heap_ptr = &__heap_start__;
    8b60:	e59f2014 	ldr	r2, [pc, #20]	; 8b7c <kmalloc_init+0x58>
    8b64:	e5832004 	str	r2, [r3, #4]
    8b68:	e8bd8008 	pop	{r3, pc}
    8b6c:	0000aa7c 	andeq	sl, r0, ip, ror sl
    8b70:	0000a29c 	muleq	r0, ip, r2
    8b74:	0000a230 	andeq	sl, r0, r0, lsr r2
    8b78:	0000a1c8 	andeq	sl, r0, r8, asr #3
    8b7c:	0000aaa8 	andeq	sl, r0, r8, lsr #21

00008b80 <kfree_all>:
/* 
 * free all allocated memory: reset the heap 
 * pointer back to the beginning.
 */
void kfree_all(void) {
    heap_ptr = &__heap_start__;
    8b80:	e59f2008 	ldr	r2, [pc, #8]	; 8b90 <kfree_all+0x10>
    8b84:	e59f3008 	ldr	r3, [pc, #8]	; 8b94 <kfree_all+0x14>
    8b88:	e5832004 	str	r2, [r3, #4]
    8b8c:	e12fff1e 	bx	lr
    8b90:	0000aaa8 	andeq	sl, r0, r8, lsr #21
    8b94:	0000aa7c 	andeq	sl, r0, ip, ror sl

00008b98 <kmalloc_heap_ptr>:
// allocated block satisfies: 
//    assert(<addr> < kmalloc_heap_ptr());
// 
void *kmalloc_heap_ptr(void) {
    return (void*) heap_ptr;
}
    8b98:	e59f3004 	ldr	r3, [pc, #4]	; 8ba4 <kmalloc_heap_ptr+0xc>
    8b9c:	e5930004 	ldr	r0, [r3, #4]
    8ba0:	e12fff1e 	bx	lr
    8ba4:	0000aa7c 	andeq	sl, r0, ip, ror sl

00008ba8 <kmalloc_init_set_start>:

void kmalloc_init_set_start(unsigned start_address) {
    8ba8:	e92d4008 	push	{r3, lr}
    demand(!init_p, cannot initialize twice!\n);
    8bac:	e59f3038 	ldr	r3, [pc, #56]	; 8bec <kmalloc_init_set_start+0x44>
    8bb0:	e5933000 	ldr	r3, [r3]
    8bb4:	e3530000 	cmp	r3, #0
    8bb8:	0a000006 	beq	8bd8 <kmalloc_init_set_start+0x30>
    8bbc:	ebfffdca 	bl	82ec <rpi_reset_putc>
    8bc0:	e59f0028 	ldr	r0, [pc, #40]	; 8bf0 <kmalloc_init_set_start+0x48>
    8bc4:	e59f1028 	ldr	r1, [pc, #40]	; 8bf4 <kmalloc_init_set_start+0x4c>
    8bc8:	e59f2028 	ldr	r2, [pc, #40]	; 8bf8 <kmalloc_init_set_start+0x50>
    8bcc:	e3a03054 	mov	r3, #84	; 0x54
    8bd0:	ebfffdaa 	bl	8280 <printk>
    8bd4:	ebffff19 	bl	8840 <clean_reboot>
    init_p = 1;
    8bd8:	e59f300c 	ldr	r3, [pc, #12]	; 8bec <kmalloc_init_set_start+0x44>
    8bdc:	e3a02001 	mov	r2, #1
    8be0:	e5832000 	str	r2, [r3]
    heap_ptr = (void*) start_address;
    8be4:	e5830004 	str	r0, [r3, #4]
    8be8:	e8bd8008 	pop	{r3, pc}
    8bec:	0000aa7c 	andeq	sl, r0, ip, ror sl
    8bf0:	0000a29c 	muleq	r0, ip, r2
    8bf4:	0000a230 	andeq	sl, r0, r0, lsr r2
    8bf8:	0000a1d8 	ldrdeq	sl, [r0], -r8

00008bfc <Q_nelem>:
} Q_t;

// used for iteration.
static E *Q_start(Q_t *q)   { return q->head; }
static E *Q_next(E *e)      { return e->next; }
static unsigned Q_nelem(Q_t *q) { return q->cnt; }
    8bfc:	e5900008 	ldr	r0, [r0, #8]
    8c00:	e12fff1e 	bx	lr

00008c04 <Q_append>:
    return e;
}

// insert at tail. (for FIFO)
static void Q_append(Q_t *q, E *e) {
    e->next = 0;
    8c04:	e3a03000 	mov	r3, #0
    8c08:	e5813040 	str	r3, [r1, #64]	; 0x40
    q->cnt++;
    8c0c:	e5903008 	ldr	r3, [r0, #8]
    8c10:	e2833001 	add	r3, r3, #1
    8c14:	e5803008 	str	r3, [r0, #8]
    if(!q->tail) 
    8c18:	e5903004 	ldr	r3, [r0, #4]
    8c1c:	e3530000 	cmp	r3, #0
    8c20:	1a000002 	bne	8c30 <Q_append+0x2c>
        q->head = q->tail = e;
    8c24:	e5801004 	str	r1, [r0, #4]
    8c28:	e5801000 	str	r1, [r0]
    8c2c:	e12fff1e 	bx	lr
    else {
        q->tail->next = e;
    8c30:	e5831040 	str	r1, [r3, #64]	; 0x40
        q->tail = e;
    8c34:	e5801004 	str	r1, [r0, #4]
    8c38:	e12fff1e 	bx	lr

00008c3c <Q_push>:
    }
}

// insert at head (for LIFO)
static void Q_push(Q_t *q, E *e) {
    q->cnt++;
    8c3c:	e5903008 	ldr	r3, [r0, #8]
    8c40:	e2833001 	add	r3, r3, #1
    8c44:	e5803008 	str	r3, [r0, #8]
    e->next = q->head;
    8c48:	e5903000 	ldr	r3, [r0]
    8c4c:	e5813040 	str	r3, [r1, #64]	; 0x40
    q->head = e;
    8c50:	e5801000 	str	r1, [r0]
    if(!q->tail)
    8c54:	e5903004 	ldr	r3, [r0, #4]
    8c58:	e3530000 	cmp	r3, #0
        q->tail = e;
    8c5c:	05801004 	streq	r1, [r0, #4]
    8c60:	e12fff1e 	bx	lr

00008c64 <th_free>:
    demand(is_aligned(&t->stack[0],8), stack must be 8-byte aligned!);
    t->tid = tid++;
    return t;
}

static void th_free(rpi_thread_t *th) {
    8c64:	e92d4008 	push	{r3, lr}
    8c68:	e1a01000 	mov	r1, r0
    // push on the front in case helps with caching.
    Q_push(&freeq, th);
    8c6c:	e59f0004 	ldr	r0, [pc, #4]	; 8c78 <th_free+0x14>
    8c70:	ebfffff1 	bl	8c3c <Q_push>
    8c74:	e8bd8008 	pop	{r3, pc}
    8c78:	0000aa84 	andeq	sl, r0, r4, lsl #21

00008c7c <Q_empty>:
// used for iteration.
static E *Q_start(Q_t *q)   { return q->head; }
static E *Q_next(E *e)      { return e->next; }
static unsigned Q_nelem(Q_t *q) { return q->cnt; }

static int Q_empty(Q_t *q)  { 
    8c7c:	e92d4010 	push	{r4, lr}
    8c80:	e1a04000 	mov	r4, r0
    if(q->head)
    8c84:	e5903000 	ldr	r3, [r0]
    8c88:	e3530000 	cmp	r3, #0
    8c8c:	1a000013 	bne	8ce0 <Q_empty+0x64>
        return 0;
    assert(Q_nelem(q) == 0);
    8c90:	ebffffd9 	bl	8bfc <Q_nelem>
    8c94:	e3500000 	cmp	r0, #0
    8c98:	0a000006 	beq	8cb8 <Q_empty+0x3c>
    8c9c:	ebfffd92 	bl	82ec <rpi_reset_putc>
    8ca0:	e59f0048 	ldr	r0, [pc, #72]	; 8cf0 <Q_empty+0x74>
    8ca4:	e59f1048 	ldr	r1, [pc, #72]	; 8cf4 <Q_empty+0x78>
    8ca8:	e59f2048 	ldr	r2, [pc, #72]	; 8cf8 <Q_empty+0x7c>
    8cac:	e3a03015 	mov	r3, #21
    8cb0:	ebfffd72 	bl	8280 <printk>
    8cb4:	ebfffee1 	bl	8840 <clean_reboot>
    demand(!q->tail, invalid Q);
    8cb8:	e5943004 	ldr	r3, [r4, #4]
    8cbc:	e3530000 	cmp	r3, #0
    8cc0:	0a000008 	beq	8ce8 <Q_empty+0x6c>
    8cc4:	ebfffd88 	bl	82ec <rpi_reset_putc>
    8cc8:	e59f002c 	ldr	r0, [pc, #44]	; 8cfc <Q_empty+0x80>
    8ccc:	e59f1020 	ldr	r1, [pc, #32]	; 8cf4 <Q_empty+0x78>
    8cd0:	e59f2020 	ldr	r2, [pc, #32]	; 8cf8 <Q_empty+0x7c>
    8cd4:	e3a03016 	mov	r3, #22
    8cd8:	ebfffd68 	bl	8280 <printk>
    8cdc:	ebfffed7 	bl	8840 <clean_reboot>
static E *Q_next(E *e)      { return e->next; }
static unsigned Q_nelem(Q_t *q) { return q->cnt; }

static int Q_empty(Q_t *q)  { 
    if(q->head)
        return 0;
    8ce0:	e3a00000 	mov	r0, #0
    8ce4:	e8bd8010 	pop	{r4, pc}
    assert(Q_nelem(q) == 0);
    demand(!q->tail, invalid Q);
    return 1;
    8ce8:	e3a00001 	mov	r0, #1
}
    8cec:	e8bd8010 	pop	{r4, pc}
    8cf0:	0000a338 	andeq	sl, r0, r8, lsr r3
    8cf4:	0000a358 	andeq	sl, r0, r8, asr r3
    8cf8:	0000a2dc 	ldrdeq	sl, [r0], -ip
    8cfc:	0000a364 	andeq	sl, r0, r4, ror #6

00008d00 <Q_pop>:

// remove from front of list.
static E *Q_pop(Q_t *q) {
    8d00:	e92d4008 	push	{r3, lr}
    demand(q, bad input);
    8d04:	e3500000 	cmp	r0, #0
    8d08:	1a000006 	bne	8d28 <Q_pop+0x28>
    8d0c:	ebfffd76 	bl	82ec <rpi_reset_putc>
    8d10:	e59f0070 	ldr	r0, [pc, #112]	; 8d88 <Q_pop+0x88>
    8d14:	e59f1070 	ldr	r1, [pc, #112]	; 8d8c <Q_pop+0x8c>
    8d18:	e59f2070 	ldr	r2, [pc, #112]	; 8d90 <Q_pop+0x90>
    8d1c:	e3a0301c 	mov	r3, #28
    8d20:	ebfffd56 	bl	8280 <printk>
    8d24:	ebfffec5 	bl	8840 <clean_reboot>

    E *e = q->head;
    8d28:	e5903000 	ldr	r3, [r0]
    if(!e) {
    8d2c:	e3530000 	cmp	r3, #0
    8d30:	1a000009 	bne	8d5c <Q_pop+0x5c>
        assert(Q_empty(q));
    8d34:	ebffffd0 	bl	8c7c <Q_empty>
    8d38:	e3500000 	cmp	r0, #0
    8d3c:	1a00000f 	bne	8d80 <Q_pop+0x80>
    8d40:	ebfffd69 	bl	82ec <rpi_reset_putc>
    8d44:	e59f0048 	ldr	r0, [pc, #72]	; 8d94 <Q_pop+0x94>
    8d48:	e59f103c 	ldr	r1, [pc, #60]	; 8d8c <Q_pop+0x8c>
    8d4c:	e59f203c 	ldr	r2, [pc, #60]	; 8d90 <Q_pop+0x90>
    8d50:	e3a03020 	mov	r3, #32
    8d54:	ebfffd49 	bl	8280 <printk>
    8d58:	ebfffeb8 	bl	8840 <clean_reboot>
        return 0;
    }
    q->cnt--;
    8d5c:	e5902008 	ldr	r2, [r0, #8]
    8d60:	e2422001 	sub	r2, r2, #1
    8d64:	e5802008 	str	r2, [r0, #8]
    q->head = e->next;
    8d68:	e5932040 	ldr	r2, [r3, #64]	; 0x40
    8d6c:	e5802000 	str	r2, [r0]
    if(!q->head)
    8d70:	e3520000 	cmp	r2, #0
        q->tail = 0;
    8d74:	05802004 	streq	r2, [r0, #4]
    return e;
    8d78:	e1a00003 	mov	r0, r3
    8d7c:	e8bd8008 	pop	{r3, pc}
    demand(q, bad input);

    E *e = q->head;
    if(!e) {
        assert(Q_empty(q));
        return 0;
    8d80:	e3a00000 	mov	r0, #0
    q->cnt--;
    q->head = e->next;
    if(!q->head)
        q->tail = 0;
    return e;
}
    8d84:	e8bd8008 	pop	{r3, pc}
    8d88:	0000a394 	muleq	r0, r4, r3
    8d8c:	0000a358 	andeq	sl, r0, r8, asr r3
    8d90:	0000a2e4 	andeq	sl, r0, r4, ror #5
    8d94:	0000a3bc 			; <UNDEFINED> instruction: 0x0000a3bc

00008d98 <th_alloc>:
}

#define is_aligned(_p,_n) (((unsigned)(_p))%(_n) == 0)

// keep a cache of freed thread blocks.  call kmalloc if run out.
static rpi_thread_t *th_alloc(void) {
    8d98:	e92d4008 	push	{r3, lr}
    rpi_thread_t *t = Q_pop(&freeq);
    8d9c:	e59f0060 	ldr	r0, [pc, #96]	; 8e04 <th_alloc+0x6c>
    8da0:	ebffffd6 	bl	8d00 <Q_pop>

    // stack has to be 8-byte aligned.
    if(!t) {
    8da4:	e3500000 	cmp	r0, #0
    8da8:	1a000006 	bne	8dc8 <th_alloc+0x30>
        t = kmalloc_aligned(sizeof *t, 8);
    8dac:	e59f0054 	ldr	r0, [pc, #84]	; 8e08 <th_alloc+0x70>
    8db0:	e3a01008 	mov	r1, #8
    8db4:	ebffff33 	bl	8a88 <kmalloc_aligned>
        nalloced++;
    8db8:	e59f3044 	ldr	r3, [pc, #68]	; 8e04 <th_alloc+0x6c>
    8dbc:	e593200c 	ldr	r2, [r3, #12]
    8dc0:	e2822001 	add	r2, r2, #1
    8dc4:	e583200c 	str	r2, [r3, #12]
    }
    demand(is_aligned(&t->stack[0],8), stack must be 8-byte aligned!);
    8dc8:	e3100007 	tst	r0, #7
    8dcc:	0a000006 	beq	8dec <th_alloc+0x54>
    8dd0:	ebfffd45 	bl	82ec <rpi_reset_putc>
    8dd4:	e59f0030 	ldr	r0, [pc, #48]	; 8e0c <th_alloc+0x74>
    8dd8:	e59f1030 	ldr	r1, [pc, #48]	; 8e10 <th_alloc+0x78>
    8ddc:	e59f2030 	ldr	r2, [pc, #48]	; 8e14 <th_alloc+0x7c>
    8de0:	e3a03023 	mov	r3, #35	; 0x23
    8de4:	ebfffd25 	bl	8280 <printk>
    8de8:	ebfffe94 	bl	8840 <clean_reboot>
    t->tid = tid++;
    8dec:	e59f2024 	ldr	r2, [pc, #36]	; 8e18 <th_alloc+0x80>
    8df0:	e5923000 	ldr	r3, [r2]
    8df4:	e2831001 	add	r1, r3, #1
    8df8:	e5821000 	str	r1, [r2]
    8dfc:	e5803044 	str	r3, [r0, #68]	; 0x44
    return t;
}
    8e00:	e8bd8008 	pop	{r3, pc}
    8e04:	0000aa84 	andeq	sl, r0, r4, lsl #21
    8e08:	00002050 	andeq	r2, r0, r0, asr r0
    8e0c:	0000a3d8 	ldrdeq	sl, [r0], -r8
    8e10:	0000a438 	andeq	sl, r0, r8, lsr r4
    8e14:	0000a2ec 	andeq	sl, r0, ip, ror #5
    8e18:	00009eb8 			; <UNDEFINED> instruction: 0x00009eb8

00008e1c <rpi_cur_thread>:
static unsigned nalloced = 0;

// return pointer to the current thread.  
rpi_thread_t *rpi_cur_thread(void) {
    return cur_thread;
}
    8e1c:	e59f3004 	ldr	r3, [pc, #4]	; 8e28 <rpi_cur_thread+0xc>
    8e20:	e5930010 	ldr	r0, [r3, #16]
    8e24:	e12fff1e 	bx	lr
    8e28:	0000aa84 	andeq	sl, r0, r4, lsl #21

00008e2c <rpi_fork>:
/***********************************************************************
 * implement the code below.
 */

// create a new thread.
rpi_thread_t *rpi_fork(void (*code)(void *arg), void *arg) {
    8e2c:	e92d4070 	push	{r4, r5, r6, lr}
    8e30:	e1a06000 	mov	r6, r0
    8e34:	e1a05001 	mov	r5, r1
    rpi_thread_t *t = th_alloc();
    8e38:	ebffffd6 	bl	8d98 <th_alloc>
    8e3c:	e1a04000 	mov	r4, r0
    /*
     * do the brain-surgery on the new thread stack here.
     * must set up initial stack: 
     *  - set LR, SP, and store <code> and <arg> where trampoline can get it.
     */
    t->reg_save_area[0] = (unsigned) code;
    8e40:	e5806000 	str	r6, [r0]
	t->reg_save_area[1] = (unsigned) arg;
    8e44:	e5805004 	str	r5, [r0, #4]
	void rpi_init_trampoline(void);
	t->reg_save_area[REG_LR_OFF] = (unsigned) &rpi_init_trampoline;
    8e48:	e59f3020 	ldr	r3, [pc, #32]	; 8e70 <rpi_fork+0x44>
    8e4c:	e5803024 	str	r3, [r0, #36]	; 0x24
	t->reg_save_area[REG_SP_OFF] = (unsigned) &t->stack[THREAD_MAXSTACK - 2];
    8e50:	e2803d81 	add	r3, r0, #8256	; 0x2040
    8e54:	e2833008 	add	r3, r3, #8
    8e58:	e5803028 	str	r3, [r0, #40]	; 0x28
    //unimplemented();
    Q_append(&runq, t);
    8e5c:	e59f0010 	ldr	r0, [pc, #16]	; 8e74 <rpi_fork+0x48>
    8e60:	e1a01004 	mov	r1, r4
    8e64:	ebffff66 	bl	8c04 <Q_append>
    return t;
}
    8e68:	e1a00004 	mov	r0, r4
    8e6c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8e70:	000098cc 	andeq	r9, r0, ip, asr #17
    8e74:	0000aa98 	muleq	r0, r8, sl

00008e78 <rpi_exit>:

// exit current thread.
void rpi_exit(int exitcode) {
    8e78:	e92d4038 	push	{r3, r4, r5, lr}
 	 * switch to it.
	 
	 * 3. otherwise we are done, switch to the scheduler thread 
	 * so we call back into the client code.
	 */
	rpi_thread_t* old_thread = cur_thread;
    8e7c:	e59f5048 	ldr	r5, [pc, #72]	; 8ecc <rpi_exit+0x54>
    8e80:	e5954010 	ldr	r4, [r5, #16]
	th_free(cur_thread);
    8e84:	e1a00004 	mov	r0, r4
    8e88:	ebffff75 	bl	8c64 <th_free>

	if(!Q_empty(&runq)) {
    8e8c:	e2850014 	add	r0, r5, #20
    8e90:	ebffff79 	bl	8c7c <Q_empty>
    8e94:	e3500000 	cmp	r0, #0
    8e98:	1a000003 	bne	8eac <rpi_exit+0x34>
		cur_thread = Q_pop(&runq);
    8e9c:	e2850014 	add	r0, r5, #20
    8ea0:	ebffff96 	bl	8d00 <Q_pop>
    8ea4:	e5850010 	str	r0, [r5, #16]
    8ea8:	ea000002 	b	8eb8 <rpi_exit+0x40>
	} else {
		cur_thread = scheduler_thread;
    8eac:	e59f3018 	ldr	r3, [pc, #24]	; 8ecc <rpi_exit+0x54>
    8eb0:	e5932020 	ldr	r2, [r3, #32]
    8eb4:	e5832010 	str	r2, [r3, #16]
	}
	rpi_cswitch(old_thread->reg_save_area, cur_thread->reg_save_area);
    8eb8:	e1a00004 	mov	r0, r4
    8ebc:	e59f3008 	ldr	r3, [pc, #8]	; 8ecc <rpi_exit+0x54>
    8ec0:	e5931010 	ldr	r1, [r3, #16]
    8ec4:	eb000269 	bl	9870 <rpi_cswitch>
    8ec8:	e8bd8038 	pop	{r3, r4, r5, pc}
    8ecc:	0000aa84 	andeq	sl, r0, r4, lsl #21

00008ed0 <rpi_yield>:
	return;
}

// yield the current thread.
void rpi_yield(void) {
    8ed0:	e92d4070 	push	{r4, r5, r6, lr}
	//	- there are no more runnable threads, return.  
	// otherwise: 
	//	1. put current thread on runq.
	// 	2. context switch to the new thread.
	//rpi_thread_t* next_thread;
	if(Q_empty(&runq)) {
    8ed4:	e59f003c 	ldr	r0, [pc, #60]	; 8f18 <rpi_yield+0x48>
    8ed8:	ebffff67 	bl	8c7c <Q_empty>
    8edc:	e3500000 	cmp	r0, #0
    8ee0:	18bd8070 	popne	{r4, r5, r6, pc}
		return;
	} else {
		rpi_thread_t* old_thread = cur_thread;
    8ee4:	e59f4030 	ldr	r4, [pc, #48]	; 8f1c <rpi_yield+0x4c>
    8ee8:	e5945010 	ldr	r5, [r4, #16]
		Q_append(&runq, cur_thread);
    8eec:	e2846014 	add	r6, r4, #20
    8ef0:	e1a00006 	mov	r0, r6
    8ef4:	e1a01005 	mov	r1, r5
    8ef8:	ebffff41 	bl	8c04 <Q_append>
		cur_thread = Q_pop(&runq);
    8efc:	e1a00006 	mov	r0, r6
    8f00:	ebffff7e 	bl	8d00 <Q_pop>
    8f04:	e1a01000 	mov	r1, r0
    8f08:	e5840010 	str	r0, [r4, #16]
		rpi_cswitch(old_thread->reg_save_area, cur_thread->reg_save_area);
    8f0c:	e1a00005 	mov	r0, r5
    8f10:	eb000256 	bl	9870 <rpi_cswitch>
    8f14:	e8bd8070 	pop	{r4, r5, r6, pc}
    8f18:	0000aa98 	muleq	r0, r8, sl
    8f1c:	0000aa84 	andeq	sl, r0, r4, lsl #21

00008f20 <rpi_internal_check>:
    printk("rpithreads: done with all threads! returning\n");
}


// internal consistency checks.
void rpi_internal_check(void) {
    8f20:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8f24:	e24dd014 	sub	sp, sp, #20
    // the blocks on the runq + freeq must equal the total ever allocated
    // or we have leaked storage.
    unsigned n_free = Q_nelem(&freeq),
    8f28:	e59f4074 	ldr	r4, [pc, #116]	; 8fa4 <rpi_internal_check+0x84>
    8f2c:	e1a00004 	mov	r0, r4
    8f30:	ebffff31 	bl	8bfc <Q_nelem>
    8f34:	e1a06000 	mov	r6, r0
             n_run = Q_nelem(&runq),
    8f38:	e2840014 	add	r0, r4, #20
    8f3c:	ebffff2e 	bl	8bfc <Q_nelem>
    8f40:	e1a05000 	mov	r5, r0
             n = n_free + n_run;
    8f44:	e0867000 	add	r7, r6, r0

    if(nalloced != n)
    8f48:	e594300c 	ldr	r3, [r4, #12]
    8f4c:	e1530007 	cmp	r3, r7
    8f50:	0a00000b 	beq	8f84 <rpi_internal_check+0x64>
        panic("storage leak: should have %d free blocks, have %d (runq=%d, freeq=%d)\n", 
    8f54:	ebfffce4 	bl	82ec <rpi_reset_putc>
    8f58:	e594300c 	ldr	r3, [r4, #12]
    8f5c:	e58d3000 	str	r3, [sp]
    8f60:	e58d7004 	str	r7, [sp, #4]
    8f64:	e58d6008 	str	r6, [sp, #8]
    8f68:	e58d500c 	str	r5, [sp, #12]
    8f6c:	e59f0034 	ldr	r0, [pc, #52]	; 8fa8 <rpi_internal_check+0x88>
    8f70:	e59f1034 	ldr	r1, [pc, #52]	; 8fac <rpi_internal_check+0x8c>
    8f74:	e59f2034 	ldr	r2, [pc, #52]	; 8fb0 <rpi_internal_check+0x90>
    8f78:	e3a03095 	mov	r3, #149	; 0x95
    8f7c:	ebfffcbf 	bl	8280 <printk>
    8f80:	ebfffe2e 	bl	8840 <clean_reboot>
            nalloced, n, n_free,n_run);

    // active thread system: 
    //      walk through the run queue making sure the stack pointer
    //     and ra pointer makes sense.
    if(!Q_empty(&runq)) {
    8f84:	e59f0028 	ldr	r0, [pc, #40]	; 8fb4 <rpi_internal_check+0x94>
    8f88:	ebffff3b 	bl	8c7c <Q_empty>
    8f8c:	e3500000 	cmp	r0, #0
    8f90:	0a000001 	beq	8f9c <rpi_internal_check+0x7c>
        //unimplemented();
        return;
    }
    printk("thread: internal check passed\n");
    8f94:	e59f001c 	ldr	r0, [pc, #28]	; 8fb8 <rpi_internal_check+0x98>
    8f98:	ebfffcb8 	bl	8280 <printk>
}
    8f9c:	e28dd014 	add	sp, sp, #20
    8fa0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8fa4:	0000aa84 	andeq	sl, r0, r4, lsl #21
    8fa8:	0000a44c 	andeq	sl, r0, ip, asr #8
    8fac:	0000a438 	andeq	sl, r0, r8, lsr r4
    8fb0:	0000a2f8 	strdeq	sl, [r0], -r8
    8fb4:	0000aa98 	muleq	r0, r8, sl
    8fb8:	0000a4a4 	andeq	sl, r0, r4, lsr #9

00008fbc <rpi_thread_start>:
/*
 * starts the thread system.  
 * note: our caller is not a thread!  so you have to figure
 * out how to handle this.
 */
void rpi_thread_start(void) {
    8fbc:	e92d4010 	push	{r4, lr}
    AssertNow(offsetof(rpi_thread_t, stack) % 8 == 0);
    // statically check that the register save area is at offset 0.
    AssertNow(offsetof(rpi_thread_t, reg_save_area) == 0);

    // no other runnable thread: return.
    if(Q_empty(&runq))
    8fc0:	e59f003c 	ldr	r0, [pc, #60]	; 9004 <rpi_thread_start+0x48>
    8fc4:	ebffff2c 	bl	8c7c <Q_empty>
    8fc8:	e3500000 	cmp	r0, #0
    8fcc:	18bd8010 	popne	{r4, pc}
        return;
    rpi_internal_check();
    8fd0:	ebffffd2 	bl	8f20 <rpi_internal_check>
    //unimplemented();
    //  1. create a new fake thread 
    //  2. dequeue a thread from the runq
    //  3. context switch to it, saving current state in
    //	    <scheduler_thread>
    scheduler_thread = th_alloc();
    8fd4:	ebffff6f 	bl	8d98 <th_alloc>
    8fd8:	e59f4028 	ldr	r4, [pc, #40]	; 9008 <rpi_thread_start+0x4c>
    8fdc:	e5840020 	str	r0, [r4, #32]
	cur_thread = Q_pop(&runq);
    8fe0:	e2840014 	add	r0, r4, #20
    8fe4:	ebffff45 	bl	8d00 <Q_pop>
    8fe8:	e1a01000 	mov	r1, r0
    8fec:	e5840010 	str	r0, [r4, #16]
	rpi_cswitch(scheduler_thread->reg_save_area, cur_thread->reg_save_area);
    8ff0:	e5940020 	ldr	r0, [r4, #32]
    8ff4:	eb00021d 	bl	9870 <rpi_cswitch>
	//unimplemented();
    printk("rpithreads: done with all threads! returning\n");
    8ff8:	e59f000c 	ldr	r0, [pc, #12]	; 900c <rpi_thread_start+0x50>
    8ffc:	ebfffc9f 	bl	8280 <printk>
    9000:	e8bd8010 	pop	{r4, pc}
    9004:	0000aa98 	muleq	r0, r8, sl
    9008:	0000aa84 	andeq	sl, r0, r4, lsl #21
    900c:	0000a4c4 	andeq	sl, r0, r4, asr #9

00009010 <rpi_stack_check>:
    }
    printk("thread: internal check passed\n");
}

// check the current thread stack.
void rpi_stack_check(void) {
    9010:	e92d4008 	push	{r3, lr}
    unimplemented();
    9014:	ebfffcb4 	bl	82ec <rpi_reset_putc>
    9018:	e59f0010 	ldr	r0, [pc, #16]	; 9030 <rpi_stack_check+0x20>
    901c:	e59f1010 	ldr	r1, [pc, #16]	; 9034 <rpi_stack_check+0x24>
    9020:	e59f2010 	ldr	r2, [pc, #16]	; 9038 <rpi_stack_check+0x28>
    9024:	e3a030a3 	mov	r3, #163	; 0xa3
    9028:	ebfffc94 	bl	8280 <printk>
    902c:	ebfffe03 	bl	8840 <clean_reboot>
    9030:	0000a4f4 	strdeq	sl, [r0], -r4
    9034:	0000a438 	andeq	sl, r0, r8, lsr r4
    9038:	0000a30c 	andeq	sl, r0, ip, lsl #6

0000903c <rpi_join>:
/********************************************************************
 * save for homework.
 */

// block caller until thread <th> completes.
void rpi_join(rpi_thread_t *th) {
    903c:	e92d4008 	push	{r3, lr}
    unimplemented();
    9040:	ebfffca9 	bl	82ec <rpi_reset_putc>
    9044:	e59f0010 	ldr	r0, [pc, #16]	; 905c <rpi_join+0x20>
    9048:	e59f1010 	ldr	r1, [pc, #16]	; 9060 <rpi_join+0x24>
    904c:	e59f2010 	ldr	r2, [pc, #16]	; 9064 <rpi_join+0x28>
    9050:	e3a030ac 	mov	r3, #172	; 0xac
    9054:	ebfffc89 	bl	8280 <printk>
    9058:	ebfffdf8 	bl	8840 <clean_reboot>
    905c:	0000a4f4 	strdeq	sl, [r0], -r4
    9060:	0000a438 	andeq	sl, r0, r8, lsr r4
    9064:	0000a31c 	andeq	sl, r0, ip, lsl r3

00009068 <rpi_exact_sleep>:
}

// put the current thread on a blocked queue: resume in 
// exactly // <usec> micro-seconds.  not before, not after.
// should give low-error resumption times.
void rpi_exact_sleep(uint32_t usec) {
    9068:	e92d4008 	push	{r3, lr}
    unimplemented();
    906c:	ebfffc9e 	bl	82ec <rpi_reset_putc>
    9070:	e59f0010 	ldr	r0, [pc, #16]	; 9088 <rpi_exact_sleep+0x20>
    9074:	e59f1010 	ldr	r1, [pc, #16]	; 908c <rpi_exact_sleep+0x24>
    9078:	e59f2010 	ldr	r2, [pc, #16]	; 9090 <rpi_exact_sleep+0x28>
    907c:	e3a030b3 	mov	r3, #179	; 0xb3
    9080:	ebfffc7e 	bl	8280 <printk>
    9084:	ebfffded 	bl	8840 <clean_reboot>
    9088:	0000a4f4 	strdeq	sl, [r0], -r4
    908c:	0000a438 	andeq	sl, r0, r8, lsr r4
    9090:	0000a328 	andeq	sl, r0, r8, lsr #6

00009094 <sw_uart_putc>:
 */ 
#include "rpi.h"
#include "sw-uart.h"
#include "cycle-util.h"

void sw_uart_putc(sw_uart_t *uart, unsigned char c) {
    9094:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9098:	e1a07001 	mov	r7, r1
    // use local variables to minimize any loads or stores
    int tx = uart->tx;
    909c:	e5d06000 	ldrb	r6, [r0]
    uint32_t n = uart->cycle_per_bit,
    90a0:	e5905008 	ldr	r5, [r0, #8]
             u = n,
             s = cycle_cnt_read();
    90a4:	ee1f4f3c 	mrc	15, 0, r4, cr15, cr12, {1}
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    90a8:	e1a00006 	mov	r0, r6
    90ac:	e3a01000 	mov	r1, #0
    90b0:	eb00029f 	bl	9b34 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    90b4:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    90b8:	e0643003 	rsb	r3, r4, r3
    90bc:	e1550003 	cmp	r5, r3
    90c0:	8afffffb 	bhi	90b4 <sw_uart_putc+0x20>
	
	// lower line (line idling)
	write_cyc_until(tx, 0, s, u);
	u += n; 
    90c4:	e1a08085 	lsl	r8, r5, #1
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    90c8:	e1a00006 	mov	r0, r6
    90cc:	e2071001 	and	r1, r7, #1
    90d0:	eb000297 	bl	9b34 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    90d4:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    90d8:	e0643003 	rsb	r3, r4, r3
    90dc:	e1580003 	cmp	r8, r3
    90e0:	8afffffb 	bhi	90d4 <sw_uart_putc+0x40>
	write_cyc_until(tx, c & 1, s, u);
	u += n; 
    90e4:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    90e8:	e1a00006 	mov	r0, r6
    90ec:	e2071002 	and	r1, r7, #2
    90f0:	eb00028f 	bl	9b34 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    90f4:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    90f8:	e0643003 	rsb	r3, r4, r3
    90fc:	e1580003 	cmp	r8, r3
    9100:	8afffffb 	bhi	90f4 <sw_uart_putc+0x60>
	write_cyc_until(tx, c & 2, s, u);
	u += n; 
    9104:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    9108:	e1a00006 	mov	r0, r6
    910c:	e2071004 	and	r1, r7, #4
    9110:	eb000287 	bl	9b34 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    9114:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    9118:	e0643003 	rsb	r3, r4, r3
    911c:	e1580003 	cmp	r8, r3
    9120:	8afffffb 	bhi	9114 <sw_uart_putc+0x80>
	write_cyc_until(tx, c & 4, s, u);
	u += n; 
    9124:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    9128:	e1a00006 	mov	r0, r6
    912c:	e2071008 	and	r1, r7, #8
    9130:	eb00027f 	bl	9b34 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    9134:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    9138:	e0643003 	rsb	r3, r4, r3
    913c:	e1580003 	cmp	r8, r3
    9140:	8afffffb 	bhi	9134 <sw_uart_putc+0xa0>
	write_cyc_until(tx, c & 8, s, u);
	u += n; 
    9144:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    9148:	e1a00006 	mov	r0, r6
    914c:	e2071010 	and	r1, r7, #16
    9150:	eb000277 	bl	9b34 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    9154:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    9158:	e0643003 	rsb	r3, r4, r3
    915c:	e1580003 	cmp	r8, r3
    9160:	8afffffb 	bhi	9154 <sw_uart_putc+0xc0>
	write_cyc_until(tx, c & 16, s, u);
	u += n; 
    9164:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    9168:	e1a00006 	mov	r0, r6
    916c:	e2071020 	and	r1, r7, #32
    9170:	eb00026f 	bl	9b34 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    9174:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    9178:	e0643003 	rsb	r3, r4, r3
    917c:	e1580003 	cmp	r8, r3
    9180:	8afffffb 	bhi	9174 <sw_uart_putc+0xe0>
	write_cyc_until(tx, c & 32, s, u);
	u += n; 
    9184:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    9188:	e1a00006 	mov	r0, r6
    918c:	e2071040 	and	r1, r7, #64	; 0x40
    9190:	eb000267 	bl	9b34 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    9194:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    9198:	e0643003 	rsb	r3, r4, r3
    919c:	e1580003 	cmp	r8, r3
    91a0:	8afffffb 	bhi	9194 <sw_uart_putc+0x100>
	write_cyc_until(tx, c & 64, s, u);
	u += n;
    91a4:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    91a8:	e1a00006 	mov	r0, r6
    91ac:	e2071080 	and	r1, r7, #128	; 0x80
    91b0:	eb00025f 	bl	9b34 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    91b4:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    91b8:	e0643003 	rsb	r3, r4, r3
    91bc:	e1580003 	cmp	r8, r3
    91c0:	8afffffb 	bhi	91b4 <sw_uart_putc+0x120>
	write_cyc_until(tx, c & 128, s, u);
	u += n; 
    91c4:	e0885005 	add	r5, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    91c8:	e1a00006 	mov	r0, r6
    91cc:	e3a01001 	mov	r1, #1
    91d0:	eb000257 	bl	9b34 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    91d4:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    91d8:	e0643003 	rsb	r3, r4, r3
    91dc:	e1550003 	cmp	r5, r3
    91e0:	8afffffb 	bhi	91d4 <sw_uart_putc+0x140>
	write_cyc_until(tx, 1, s, u);
}
    91e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000091e8 <sw_uart_getc_timeout>:
}

// do this second: you can type in pi-cat to send stuff.
//      EASY BUG: if you are reading input, but you do not get here in 
//      time it will disappear.
int sw_uart_getc_timeout(sw_uart_t *uart, int timeout_usec) {
    91e8:	e92d43f8 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
    91ec:	e1a09000 	mov	r9, r0
   int rx = uart->rx;
    91f0:	e5d07001 	ldrb	r7, [r0, #1]
    91f4:	e1a05007 	mov	r5, r7

    // get start bit: timeout_usec=0 implies you return right away.
    while(!wait_until_usec(rx, 0, timeout_usec))
    91f8:	e1a06001 	mov	r6, r1
	write_cyc_until(tx, 1, s, u);
}

// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    91fc:	ebfffde9 	bl	89a8 <timer_get_usec_raw>
    9200:	e1a04000 	mov	r4, r0
    while(1) {
        if(gpio_read(rx) == v)
    9204:	e1a00005 	mov	r0, r5
    9208:	eb000236 	bl	9ae8 <gpio_read>
    920c:	e3500000 	cmp	r0, #0
    9210:	0a000005 	beq	922c <sw_uart_getc_timeout+0x44>
            return 1;
        if(timer_get_usec_raw() - start > timeout_usec)
    9214:	ebfffde3 	bl	89a8 <timer_get_usec_raw>
    9218:	e0640000 	rsb	r0, r4, r0
    921c:	e1560000 	cmp	r6, r0
    9220:	2afffff7 	bcs	9204 <sw_uart_getc_timeout+0x1c>
            return 0;
    9224:	e3a03000 	mov	r3, #0
    9228:	ea000000 	b	9230 <sw_uart_getc_timeout+0x48>
// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    while(1) {
        if(gpio_read(rx) == v)
            return 1;
    922c:	e3a03001 	mov	r3, #1
//      time it will disappear.
int sw_uart_getc_timeout(sw_uart_t *uart, int timeout_usec) {
   int rx = uart->rx;

    // get start bit: timeout_usec=0 implies you return right away.
    while(!wait_until_usec(rx, 0, timeout_usec))
    9230:	e3530000 	cmp	r3, #0
    9234:	0a000059 	beq	93a0 <sw_uart_getc_timeout+0x1b8>
        return -1;

    // do this first so we have a tighter bound (maybe)
    unsigned s = cycle_cnt_read();  // subtract off slop?
    9238:	ee1f8f3c 	mrc	15, 0, r8, cr15, cr12, {1}

    // store these in locals to minimize load stores later.
    uint32_t u = uart->cycle_per_bit;
    923c:	e5994008 	ldr	r4, [r9, #8]
    unsigned n = u/2;
    unsigned c = 0;

    // wait one period + 1/2 to get in the middle of the next read.
    delay_ncycles(s, n + 1*u);
    9240:	e08420a4 	add	r2, r4, r4, lsr #1
    9244:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    9248:	e0683003 	rsb	r3, r8, r3
    924c:	e1520003 	cmp	r2, r3
    9250:	8afffffb 	bhi	9244 <sw_uart_getc_timeout+0x5c>
	
	s += u;
    9254:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx);
    9258:	e1a00007 	mov	r0, r7
    925c:	eb000221 	bl	9ae8 <gpio_read>
    9260:	e1a09750 	asr	r9, r0, r7
    9264:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    9268:	e0683003 	rsb	r3, r8, r3
    926c:	e1540003 	cmp	r4, r3
    9270:	8afffffb 	bhi	9264 <sw_uart_getc_timeout+0x7c>
    delay_ncycles(s, u);
	s += u; 
    9274:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 1;
    9278:	e1a00007 	mov	r0, r7
    927c:	eb000219 	bl	9ae8 <gpio_read>
    9280:	e1a00750 	asr	r0, r0, r7
    9284:	e1899080 	orr	r9, r9, r0, lsl #1
    9288:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    928c:	e0683003 	rsb	r3, r8, r3
    9290:	e1540003 	cmp	r4, r3
    9294:	8afffffb 	bhi	9288 <sw_uart_getc_timeout+0xa0>
    delay_ncycles(s, u);
	s += u;
    9298:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 2;
    929c:	e1a00007 	mov	r0, r7
    92a0:	eb000210 	bl	9ae8 <gpio_read>
    92a4:	e1a00750 	asr	r0, r0, r7
    92a8:	e1899100 	orr	r9, r9, r0, lsl #2
    92ac:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    92b0:	e0683003 	rsb	r3, r8, r3
    92b4:	e1540003 	cmp	r4, r3
    92b8:	8afffffb 	bhi	92ac <sw_uart_getc_timeout+0xc4>
    delay_ncycles(s, u);
	s += u;
    92bc:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 3;
    92c0:	e1a00007 	mov	r0, r7
    92c4:	eb000207 	bl	9ae8 <gpio_read>
    92c8:	e1a00750 	asr	r0, r0, r7
    92cc:	e1899180 	orr	r9, r9, r0, lsl #3
    92d0:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    92d4:	e0683003 	rsb	r3, r8, r3
    92d8:	e1540003 	cmp	r4, r3
    92dc:	8afffffb 	bhi	92d0 <sw_uart_getc_timeout+0xe8>
    delay_ncycles(s, u);
	s += u;
    92e0:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 4;
    92e4:	e1a00007 	mov	r0, r7
    92e8:	eb0001fe 	bl	9ae8 <gpio_read>
    92ec:	e1a00750 	asr	r0, r0, r7
    92f0:	e1899200 	orr	r9, r9, r0, lsl #4
    92f4:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    92f8:	e0683003 	rsb	r3, r8, r3
    92fc:	e1540003 	cmp	r4, r3
    9300:	8afffffb 	bhi	92f4 <sw_uart_getc_timeout+0x10c>
    delay_ncycles(s, u);
	s += u;
    9304:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 5;
    9308:	e1a00007 	mov	r0, r7
    930c:	eb0001f5 	bl	9ae8 <gpio_read>
    9310:	e1a00750 	asr	r0, r0, r7
    9314:	e1899280 	orr	r9, r9, r0, lsl #5
    9318:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    931c:	e0683003 	rsb	r3, r8, r3
    9320:	e1540003 	cmp	r4, r3
    9324:	8afffffb 	bhi	9318 <sw_uart_getc_timeout+0x130>
    delay_ncycles(s, u);
	s += u;
    9328:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 6;
    932c:	e1a00007 	mov	r0, r7
    9330:	eb0001ec 	bl	9ae8 <gpio_read>
    9334:	e1a00750 	asr	r0, r0, r7
    9338:	e1899300 	orr	r9, r9, r0, lsl #6
    933c:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    9340:	e0683003 	rsb	r3, r8, r3
    9344:	e1540003 	cmp	r4, r3
    9348:	8afffffb 	bhi	933c <sw_uart_getc_timeout+0x154>
    delay_ncycles(s, u);
	s += u;
    c |= (gpio_read(rx) >> rx) << 7;
    934c:	e1a00007 	mov	r0, r7
    9350:	eb0001e4 	bl	9ae8 <gpio_read>
    9354:	e1a00750 	asr	r0, r0, r7
    9358:	e1899380 	orr	r9, r9, r0, lsl #7
	write_cyc_until(tx, 1, s, u);
}

// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    935c:	ebfffd91 	bl	89a8 <timer_get_usec_raw>
    9360:	e1a04000 	mov	r4, r0
    while(1) {
        if(gpio_read(rx) == v)
    9364:	e1a00005 	mov	r0, r5
    9368:	eb0001de 	bl	9ae8 <gpio_read>
    936c:	e3500000 	cmp	r0, #0
    9370:	0a000005 	beq	938c <sw_uart_getc_timeout+0x1a4>
            return 1;
        if(timer_get_usec_raw() - start > timeout_usec)
    9374:	ebfffd8b 	bl	89a8 <timer_get_usec_raw>
    9378:	e0640000 	rsb	r0, r4, r0
    937c:	e1560000 	cmp	r6, r0
    9380:	2afffff7 	bcs	9364 <sw_uart_getc_timeout+0x17c>
            return 0;
    9384:	e3a03000 	mov	r3, #0
    9388:	ea000000 	b	9390 <sw_uart_getc_timeout+0x1a8>
// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    while(1) {
        if(gpio_read(rx) == v)
            return 1;
    938c:	e3a03001 	mov	r3, #1
    c |= (gpio_read(rx) >> rx) << 7;
    //delay_ncycles(s, u);
	//s += u;
    
	// make sure you wait for a stop bit: otherwise the next read may fail.
    while(!wait_until_usec(rx, 0, timeout_usec))
    9390:	e3530000 	cmp	r3, #0
    9394:	0a000003 	beq	93a8 <sw_uart_getc_timeout+0x1c0>
        return -1;
	// delay_ncycles(s, n);

    return (int)c;
    9398:	e1a00009 	mov	r0, r9
    939c:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
int sw_uart_getc_timeout(sw_uart_t *uart, int timeout_usec) {
   int rx = uart->rx;

    // get start bit: timeout_usec=0 implies you return right away.
    while(!wait_until_usec(rx, 0, timeout_usec))
        return -1;
    93a0:	e3e00000 	mvn	r0, #0
    93a4:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
    //delay_ncycles(s, u);
	//s += u;
    
	// make sure you wait for a stop bit: otherwise the next read may fail.
    while(!wait_until_usec(rx, 0, timeout_usec))
        return -1;
    93a8:	e3e00000 	mvn	r0, #0
	// delay_ncycles(s, n);

    return (int)c;
}
    93ac:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}

000093b0 <sw_uart_gets_until>:


// read characters using <sw_uart_getc()> until:
//       <sw_uart_getc() == <end>>
// returns -nbytes read if timeout (could be 0).
int sw_uart_gets_until(sw_uart_t *u, uint8_t *buf, uint32_t nbytes, uint8_t end, uint32_t usec_timeout) {
    93b0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    93b4:	e1a08000 	mov	r8, r0
    93b8:	e1a06001 	mov	r6, r1
    93bc:	e1a09003 	mov	r9, r3
    93c0:	e59da020 	ldr	sl, [sp, #32]
    assert(nbytes>0);
    93c4:	e3520000 	cmp	r2, #0
    93c8:	1a000006 	bne	93e8 <sw_uart_gets_until+0x38>
    93cc:	ebfffbc6 	bl	82ec <rpi_reset_putc>
    93d0:	e59f005c 	ldr	r0, [pc, #92]	; 9434 <sw_uart_gets_until+0x84>
    93d4:	e59f105c 	ldr	r1, [pc, #92]	; 9438 <sw_uart_gets_until+0x88>
    93d8:	e59f205c 	ldr	r2, [pc, #92]	; 943c <sw_uart_gets_until+0x8c>
    93dc:	e3a0306d 	mov	r3, #109	; 0x6d
    93e0:	ebfffba6 	bl	8280 <printk>
    93e4:	ebfffd15 	bl	8840 <clean_reboot>
    buf[0] = 0;
    93e8:	e3a04000 	mov	r4, #0
    93ec:	e5c14000 	strb	r4, [r1]

    int i;
	uint8_t char_in;
    for(i = 0; i < nbytes-1; i++) {
    93f0:	e2427001 	sub	r7, r2, #1
    93f4:	ea000007 	b	9418 <sw_uart_gets_until+0x68>
        if((char_in = (uint8_t)sw_uart_getc_timeout(u, usec_timeout)) != end) {
    93f8:	e1a00008 	mov	r0, r8
    93fc:	e1a0100a 	mov	r1, sl
    9400:	ebffff78 	bl	91e8 <sw_uart_getc_timeout>
    9404:	e6ef0070 	uxtb	r0, r0
    9408:	e1500009 	cmp	r0, r9
    940c:	0a000004 	beq	9424 <sw_uart_gets_until+0x74>
			buf[i] = char_in;
    9410:	e7c60005 	strb	r0, [r6, r5]
    assert(nbytes>0);
    buf[0] = 0;

    int i;
	uint8_t char_in;
    for(i = 0; i < nbytes-1; i++) {
    9414:	e2844001 	add	r4, r4, #1
    9418:	e1a05004 	mov	r5, r4
    941c:	e1540007 	cmp	r4, r7
    9420:	3afffff4 	bcc	93f8 <sw_uart_gets_until+0x48>
			buf[i] = char_in;
		} else {
			break;
		}
    }
    buf[i] = 0;
    9424:	e3a03000 	mov	r3, #0
    9428:	e7c63005 	strb	r3, [r6, r5]
    return i;
}
    942c:	e1a00004 	mov	r0, r4
    9430:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9434:	0000a598 	muleq	r0, r8, r5
    9438:	0000a5b4 			; <UNDEFINED> instruction: 0x0000a5b4
    943c:	0000a520 	andeq	sl, r0, r0, lsr #10

00009440 <sw_uart_gets_timeout>:

// read characters using <sw_uart_getc()> until:
//      we do not receive any characters for <timeout> usec.
// make sure to 0 terminate!
int sw_uart_gets_timeout(sw_uart_t *u, uint8_t *buf, 
                    uint32_t nbytes, uint32_t usec_timeout) {
    9440:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9444:	e1a07000 	mov	r7, r0
    9448:	e1a05001 	mov	r5, r1
    944c:	e1a08003 	mov	r8, r3

    assert(nbytes>0);
    9450:	e3520000 	cmp	r2, #0
    9454:	1a000006 	bne	9474 <sw_uart_gets_timeout+0x34>
    9458:	ebfffba3 	bl	82ec <rpi_reset_putc>
    945c:	e59f004c 	ldr	r0, [pc, #76]	; 94b0 <sw_uart_gets_timeout+0x70>
    9460:	e59f104c 	ldr	r1, [pc, #76]	; 94b4 <sw_uart_gets_timeout+0x74>
    9464:	e59f204c 	ldr	r2, [pc, #76]	; 94b8 <sw_uart_gets_timeout+0x78>
    9468:	e3a03083 	mov	r3, #131	; 0x83
    946c:	ebfffb83 	bl	8280 <printk>
    9470:	ebfffcf2 	bl	8840 <clean_reboot>
    buf[0] = 0;
    9474:	e3a04000 	mov	r4, #0
    9478:	e5c14000 	strb	r4, [r1]

    int i;
    for(i = 0; i < nbytes-1; i++) {
    947c:	e2426001 	sub	r6, r2, #1
    9480:	ea000004 	b	9498 <sw_uart_gets_timeout+0x58>
        buf[i] = (uint8_t) sw_uart_getc_timeout(u, usec_timeout);
    9484:	e1a00007 	mov	r0, r7
    9488:	e1a01008 	mov	r1, r8
    948c:	ebffff55 	bl	91e8 <sw_uart_getc_timeout>
    9490:	e7c50004 	strb	r0, [r5, r4]

    assert(nbytes>0);
    buf[0] = 0;

    int i;
    for(i = 0; i < nbytes-1; i++) {
    9494:	e2844001 	add	r4, r4, #1
    9498:	e1540006 	cmp	r4, r6
    949c:	3afffff8 	bcc	9484 <sw_uart_gets_timeout+0x44>
        buf[i] = (uint8_t) sw_uart_getc_timeout(u, usec_timeout);
    }
    buf[i] = 0;
    94a0:	e3a03000 	mov	r3, #0
    94a4:	e7c53004 	strb	r3, [r5, r4]
    return i;
}
    94a8:	e1a00004 	mov	r0, r4
    94ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    94b0:	0000a598 	muleq	r0, r8, r5
    94b4:	0000a5b4 			; <UNDEFINED> instruction: 0x0000a5b4
    94b8:	0000a534 	andeq	sl, r0, r4, lsr r5

000094bc <sw_uart_init_helper>:
/**************************************************************************
 * this code is implemented for you
 */

sw_uart_t 
sw_uart_init_helper(uint8_t tx, uint8_t rx, uint32_t baud, uint32_t cyc_per_bit) {
    94bc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    94c0:	e1a04000 	mov	r4, r0
    94c4:	e1a06001 	mov	r6, r1
    94c8:	e1a08002 	mov	r8, r2
    94cc:	e1a05003 	mov	r5, r3
    94d0:	e59d7018 	ldr	r7, [sp, #24]
    // maybe enable the cache?  don't think will work otherwise.
    gpio_set_output(tx);
    94d4:	e1a00001 	mov	r0, r1
    94d8:	eb0000fe 	bl	98d8 <gpio_set_output>
    gpio_set_input(rx);
    94dc:	e1a00008 	mov	r0, r8
    94e0:	eb00014d 	bl	9a1c <gpio_set_input>
    cycle_cnt_init();       
    94e4:	e3a03001 	mov	r3, #1
    94e8:	ee0f3f1c 	mcr	15, 0, r3, cr15, cr12, {0}
	gpio_write(tx, 1);
    94ec:	e1a00006 	mov	r0, r6
    94f0:	e3a01001 	mov	r1, #1
    94f4:	eb00018e 	bl	9b34 <gpio_write>

    // make sure it makes sense.
    unsigned mhz = 700 * 1000 * 1000;
    unsigned derived = cyc_per_bit * baud;
    94f8:	e0020795 	mul	r2, r5, r7
    assert((mhz - baud) <= derived && derived <= (mhz + baud));
    94fc:	e59f3068 	ldr	r3, [pc, #104]	; 956c <sw_uart_init_helper+0xb0>
    9500:	e0653003 	rsb	r3, r5, r3
    9504:	e1530002 	cmp	r3, r2
    9508:	8a000005 	bhi	9524 <sw_uart_init_helper+0x68>
    950c:	e59f3058 	ldr	r3, [pc, #88]	; 956c <sw_uart_init_helper+0xb0>
    9510:	e0853003 	add	r3, r5, r3
    9514:	e1530002 	cmp	r3, r2
    9518:	2a000003 	bcs	952c <sw_uart_init_helper+0x70>
    951c:	e3a03000 	mov	r3, #0
    9520:	ea000002 	b	9530 <sw_uart_init_helper+0x74>
    9524:	e3a03000 	mov	r3, #0
    9528:	ea000000 	b	9530 <sw_uart_init_helper+0x74>
    952c:	e3a03001 	mov	r3, #1
    9530:	e3530000 	cmp	r3, #0
    9534:	1a000006 	bne	9554 <sw_uart_init_helper+0x98>
    9538:	ebfffb6b 	bl	82ec <rpi_reset_putc>
    953c:	e59f002c 	ldr	r0, [pc, #44]	; 9570 <sw_uart_init_helper+0xb4>
    9540:	e59f102c 	ldr	r1, [pc, #44]	; 9574 <sw_uart_init_helper+0xb8>
    9544:	e59f202c 	ldr	r2, [pc, #44]	; 9578 <sw_uart_init_helper+0xbc>
    9548:	e3a0309d 	mov	r3, #157	; 0x9d
    954c:	ebfffb4b 	bl	8280 <printk>
    9550:	ebfffcba 	bl	8840 <clean_reboot>
    // panic("cyc_per_bit = %d * baud = %d\n", cyc_per_bit, cyc_per_bit * baud);

    return (sw_uart_t) { 
    9554:	e5c46000 	strb	r6, [r4]
    9558:	e5c48001 	strb	r8, [r4, #1]
    955c:	e5845004 	str	r5, [r4, #4]
    9560:	e5847008 	str	r7, [r4, #8]
            .tx = tx, 
            .rx = rx, 
            .baud = baud, 
            .cycle_per_bit = cyc_per_bit 
    };
}
    9564:	e1a00004 	mov	r0, r4
    9568:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    956c:	29b92700 	ldmibcs	r9!, {r8, r9, sl, sp}
    9570:	0000a5c8 	andeq	sl, r0, r8, asr #11
    9574:	0000a5b4 			; <UNDEFINED> instruction: 0x0000a5b4
    9578:	0000a54c 	andeq	sl, r0, ip, asr #10

0000957c <sw_uart_getc>:

// blocking read.
int sw_uart_getc(sw_uart_t *uart) {
    957c:	e92d4008 	push	{r3, lr}
    int res = sw_uart_getc_timeout(uart, ~0);
    9580:	e3e01000 	mvn	r1, #0
    9584:	ebffff17 	bl	91e8 <sw_uart_getc_timeout>
    if(res < 0)
    9588:	e3500000 	cmp	r0, #0
    958c:	a8bd8008 	popge	{r3, pc}
        panic("impossible: have an infinite timeout!\n");
    9590:	ebfffb55 	bl	82ec <rpi_reset_putc>
    9594:	e59f0010 	ldr	r0, [pc, #16]	; 95ac <sw_uart_getc+0x30>
    9598:	e59f1010 	ldr	r1, [pc, #16]	; 95b0 <sw_uart_getc+0x34>
    959c:	e59f2010 	ldr	r2, [pc, #16]	; 95b4 <sw_uart_getc+0x38>
    95a0:	e3a030ac 	mov	r3, #172	; 0xac
    95a4:	ebfffb35 	bl	8280 <printk>
    95a8:	ebfffca4 	bl	8840 <clean_reboot>
    95ac:	0000a60c 	andeq	sl, r0, ip, lsl #12
    95b0:	0000a5b4 			; <UNDEFINED> instruction: 0x0000a5b4
    95b4:	0000a560 	andeq	sl, r0, r0, ror #10

000095b8 <sw_uart_putk>:
    return res;
}

void sw_uart_putk(sw_uart_t *uart, const char *msg) {
    95b8:	e92d4038 	push	{r3, r4, r5, lr}
    95bc:	e1a05000 	mov	r5, r0
    95c0:	e1a04001 	mov	r4, r1
    for(; *msg; msg++)
    95c4:	ea000002 	b	95d4 <sw_uart_putk+0x1c>
        sw_uart_putc(uart, *msg);
    95c8:	e1a00005 	mov	r0, r5
    95cc:	ebfffeb0 	bl	9094 <sw_uart_putc>
        panic("impossible: have an infinite timeout!\n");
    return res;
}

void sw_uart_putk(sw_uart_t *uart, const char *msg) {
    for(; *msg; msg++)
    95d0:	e2844001 	add	r4, r4, #1
    95d4:	e5d41000 	ldrb	r1, [r4]
    95d8:	e3510000 	cmp	r1, #0
    95dc:	1afffff9 	bne	95c8 <sw_uart_putk+0x10>
        sw_uart_putc(uart, *msg);
}
    95e0:	e8bd8038 	pop	{r3, r4, r5, pc}

000095e4 <sw_uart_printk>:

// don't pollute the rest of the code with all the stuff in the 
// <stdarg.h> header.
#include <stdarg.h>
#include "libc/va-printk.h"
int sw_uart_printk(sw_uart_t *uart, const char *fmt, ...) {
    95e4:	e92d000e 	push	{r1, r2, r3}
    95e8:	e92d4030 	push	{r4, r5, lr}
    95ec:	e24dde1d 	sub	sp, sp, #464	; 0x1d0
    95f0:	e1a05000 	mov	r5, r0
    char buf[460];

    va_list args;
    va_start(args, fmt);
    95f4:	e28d3e1e 	add	r3, sp, #480	; 0x1e0
    95f8:	e58d3000 	str	r3, [sp]
        int sz = va_printk(buf, sizeof buf, fmt, args);
    95fc:	e28d0004 	add	r0, sp, #4
    9600:	e3a01f73 	mov	r1, #460	; 0x1cc
    9604:	e59d21dc 	ldr	r2, [sp, #476]	; 0x1dc
    9608:	ebfffbea 	bl	85b8 <va_printk>
    960c:	e1a04000 	mov	r4, r0
    va_end(args);
    assert(sz < sizeof buf-1);
    9610:	e59f3040 	ldr	r3, [pc, #64]	; 9658 <sw_uart_printk+0x74>
    9614:	e1500003 	cmp	r0, r3
    9618:	9a000006 	bls	9638 <sw_uart_printk+0x54>
    961c:	ebfffb32 	bl	82ec <rpi_reset_putc>
    9620:	e59f0034 	ldr	r0, [pc, #52]	; 965c <sw_uart_printk+0x78>
    9624:	e59f1034 	ldr	r1, [pc, #52]	; 9660 <sw_uart_printk+0x7c>
    9628:	e59f2034 	ldr	r2, [pc, #52]	; 9664 <sw_uart_printk+0x80>
    962c:	e3a030c0 	mov	r3, #192	; 0xc0
    9630:	ebfffb12 	bl	8280 <printk>
    9634:	ebfffc81 	bl	8840 <clean_reboot>
    sw_uart_putk(uart,buf);
    9638:	e1a00005 	mov	r0, r5
    963c:	e28d1004 	add	r1, sp, #4
    9640:	ebffffdc 	bl	95b8 <sw_uart_putk>
    return sz;
}
    9644:	e1a00004 	mov	r0, r4
    9648:	e28dde1d 	add	sp, sp, #464	; 0x1d0
    964c:	e8bd4030 	pop	{r4, r5, lr}
    9650:	e28dd00c 	add	sp, sp, #12
    9654:	e12fff1e 	bx	lr
    9658:	000001ca 	andeq	r0, r0, sl, asr #3
    965c:	0000a644 	andeq	sl, r0, r4, asr #12
    9660:	0000a5b4 			; <UNDEFINED> instruction: 0x0000a5b4
    9664:	0000a570 	andeq	sl, r0, r0, ror r5

00009668 <sw_uart_gets_until_blk>:

int sw_uart_gets_until_blk(sw_uart_t *u, uint8_t *buf, uint32_t nbytes, uint8_t end) {
    9668:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    966c:	e24dd00c 	sub	sp, sp, #12
    int res = sw_uart_gets_until(u, buf, nbytes, end, ~0);
    9670:	e3e0c000 	mvn	ip, #0
    9674:	e58dc000 	str	ip, [sp]
    9678:	ebffff4c 	bl	93b0 <sw_uart_gets_until>
    if(res < 0)
    967c:	e3500000 	cmp	r0, #0
    9680:	aa000006 	bge	96a0 <sw_uart_gets_until_blk+0x38>
        panic("impossible: have an infinite timeout!\n");
    9684:	ebfffb18 	bl	82ec <rpi_reset_putc>
    9688:	e59f0018 	ldr	r0, [pc, #24]	; 96a8 <sw_uart_gets_until_blk+0x40>
    968c:	e59f1018 	ldr	r1, [pc, #24]	; 96ac <sw_uart_gets_until_blk+0x44>
    9690:	e59f2018 	ldr	r2, [pc, #24]	; 96b0 <sw_uart_gets_until_blk+0x48>
    9694:	e3a030c8 	mov	r3, #200	; 0xc8
    9698:	ebfffaf8 	bl	8280 <printk>
    969c:	ebfffc67 	bl	8840 <clean_reboot>
    return res;
}
    96a0:	e28dd00c 	add	sp, sp, #12
    96a4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    96a8:	0000a60c 	andeq	sl, r0, ip, lsl #12
    96ac:	0000a5b4 			; <UNDEFINED> instruction: 0x0000a5b4
    96b0:	0000a580 	andeq	sl, r0, r0, lsl #11

000096b4 <uart_init>:
#define RX_READY 0x1
#define TX_READY 0x10
#define TX_EMPTY 0x20

// note: if you need memory barriers, use <dev_barrier()>
void uart_init(void) {
    96b4:	e92d4038 	push	{r3, r4, r5, lr}
    
	dev_barrier();
    96b8:	eb000052 	bl	9808 <dev_barrier>

	// set GPIO 14 and 15 to alternate function 0
    //volatile unsigned* gpio_reg = (void*) 0x20200004;
    //unsigned bitmask = get32(gpio_reg);
    gpio_set_function(14, GPIO_FUNC_ALT5);
    96bc:	e3a0000e 	mov	r0, #14
    96c0:	e3a01002 	mov	r1, #2
    96c4:	eb000123 	bl	9b58 <gpio_set_function>
	gpio_set_function(15, GPIO_FUNC_ALT5);
    96c8:	e3a0000f 	mov	r0, #15
    96cc:	e3a01002 	mov	r1, #2
    96d0:	eb000120 	bl	9b58 <gpio_set_function>
    //bitmask &= ~(0b111 << ((UART0_RX % 10) * 3));
    //bitmask |= (0b010 << ((UART0_TX % 10) * 3));
    //bitmask |= (0b010 << ((UART0_RX % 10) * 3));
    //put32(gpio_reg, bitmask);

	dev_barrier();
    96d4:	eb00004b 	bl	9808 <dev_barrier>

    put32(AUX_ENABLES, get32(AUX_ENABLES) | (ENABLE_UART));
    96d8:	e59f4068 	ldr	r4, [pc, #104]	; 9748 <uart_init+0x94>
    96dc:	e5945000 	ldr	r5, [r4]
    96e0:	e1a00005 	mov	r0, r5
    96e4:	eb000059 	bl	9850 <get32>
    96e8:	e3801001 	orr	r1, r0, #1
    96ec:	e1a00005 	mov	r0, r5
    96f0:	eb00004a 	bl	9820 <put32>
	
	dev_barrier();
    96f4:	eb000043 	bl	9808 <dev_barrier>
	
    put32(AUX_MU_CNTL_REG, 0x0);
    96f8:	e5940004 	ldr	r0, [r4, #4]
    96fc:	e3a01000 	mov	r1, #0
    9700:	eb000046 	bl	9820 <put32>
    put32(AUX_MU_IER_REG, 0x0);
    9704:	e5940008 	ldr	r0, [r4, #8]
    9708:	e3a01000 	mov	r1, #0
    970c:	eb000043 	bl	9820 <put32>
    put32(AUX_MU_IIR_REG, CLEAR_RX_FIFO | CLEAR_TX_FIFO);
    9710:	e594000c 	ldr	r0, [r4, #12]
    9714:	e3a01006 	mov	r1, #6
    9718:	eb000040 	bl	9820 <put32>
	put32(AUX_MU_LCR_REG, ENABLE_8BIT_MODE);
    971c:	e5940010 	ldr	r0, [r4, #16]
    9720:	e3a01003 	mov	r1, #3
    9724:	eb00003d 	bl	9820 <put32>
    put32(AUX_MU_BAUD_REG, BAUD_115200);
    9728:	e5940014 	ldr	r0, [r4, #20]
    972c:	e59f1018 	ldr	r1, [pc, #24]	; 974c <uart_init+0x98>
    9730:	eb00003a 	bl	9820 <put32>
    put32(AUX_MU_CNTL_REG, ENABLE_TXER | ENABLE_RXER);
    9734:	e5940004 	ldr	r0, [r4, #4]
    9738:	e3a01003 	mov	r1, #3
    973c:	eb000037 	bl	9820 <put32>

	dev_barrier();
    9740:	eb000030 	bl	9808 <dev_barrier>
    9744:	e8bd8038 	pop	{r3, r4, r5, pc}
    9748:	00009ebc 			; <UNDEFINED> instruction: 0x00009ebc
    974c:	0000010e 	andeq	r0, r0, lr, lsl #2

00009750 <uart_can_getc>:
}

// 1 = at least one byte on rx queue, 0 otherwise
int uart_can_getc(void) {
    9750:	e92d4008 	push	{r3, lr}
    return get32(AUX_MU_LSR_REG) & RX_READY;
    9754:	e59f300c 	ldr	r3, [pc, #12]	; 9768 <uart_can_getc+0x18>
    9758:	e5930018 	ldr	r0, [r3, #24]
    975c:	eb00003b 	bl	9850 <get32>
}
    9760:	e2000001 	and	r0, r0, #1
    9764:	e8bd8008 	pop	{r3, pc}
    9768:	00009ebc 			; <UNDEFINED> instruction: 0x00009ebc

0000976c <uart_getc>:

// returns one byte from the rx queue, if needed
// blocks until there is one.
int uart_getc(void) {
    976c:	e92d4008 	push	{r3, lr}
    while(1)
        if(uart_can_getc())  break;
    9770:	ebfffff6 	bl	9750 <uart_can_getc>
    9774:	e3500000 	cmp	r0, #0
    9778:	0afffffc 	beq	9770 <uart_getc+0x4>
    return get32(AUX_MU_IO_REG) & 0xFF;
    977c:	e59f300c 	ldr	r3, [pc, #12]	; 9790 <uart_getc+0x24>
    9780:	e593001c 	ldr	r0, [r3, #28]
    9784:	eb000031 	bl	9850 <get32>
}
    9788:	e6ef0070 	uxtb	r0, r0
    978c:	e8bd8008 	pop	{r3, pc}
    9790:	00009ebc 			; <UNDEFINED> instruction: 0x00009ebc

00009794 <uart_can_putc>:

// 1 = space to put at least one byte, 0 otherwise.
int uart_can_putc(void) {
    9794:	e92d4008 	push	{r3, lr}
    return get32(AUX_MU_LSR_REG) & TX_EMPTY;
    9798:	e59f300c 	ldr	r3, [pc, #12]	; 97ac <uart_can_putc+0x18>
    979c:	e5930018 	ldr	r0, [r3, #24]
    97a0:	eb00002a 	bl	9850 <get32>
}
    97a4:	e2000020 	and	r0, r0, #32
    97a8:	e8bd8008 	pop	{r3, pc}
    97ac:	00009ebc 			; <UNDEFINED> instruction: 0x00009ebc

000097b0 <uart_putc>:

// put one byte on the tx qqueue, if needed, blocks
// until TX has space.
void uart_putc(unsigned c) {
    97b0:	e92d4010 	push	{r4, lr}
    97b4:	e1a04000 	mov	r4, r0
    while(1)
            if(uart_can_putc())  break;
    97b8:	ebfffff5 	bl	9794 <uart_can_putc>
    97bc:	e3500000 	cmp	r0, #0
    97c0:	0afffffc 	beq	97b8 <uart_putc+0x8>
    put32(AUX_MU_IO_REG, c);
    97c4:	e59f300c 	ldr	r3, [pc, #12]	; 97d8 <uart_putc+0x28>
    97c8:	e593001c 	ldr	r0, [r3, #28]
    97cc:	e1a01004 	mov	r1, r4
    97d0:	eb000012 	bl	9820 <put32>
    97d4:	e8bd8010 	pop	{r4, pc}
    97d8:	00009ebc 			; <UNDEFINED> instruction: 0x00009ebc

000097dc <uart_has_data>:


// simple wrapper routines useful later.

// a maybe-more intuitive name for clients.
int uart_has_data(void) {
    97dc:	e92d4008 	push	{r3, lr}
    return uart_can_getc();
    97e0:	ebffffda 	bl	9750 <uart_can_getc>
}
    97e4:	e8bd8008 	pop	{r3, pc}

000097e8 <uart_getc_async>:

int uart_getc_async(void) { 
    97e8:	e92d4008 	push	{r3, lr}
    if(!uart_has_data())
    97ec:	ebfffffa 	bl	97dc <uart_has_data>
    97f0:	e3500000 	cmp	r0, #0
    97f4:	0a000001 	beq	9800 <uart_getc_async+0x18>
        return -1;
    return uart_getc();
    97f8:	ebffffdb 	bl	976c <uart_getc>
    97fc:	e8bd8008 	pop	{r3, pc}
    return uart_can_getc();
}

int uart_getc_async(void) { 
    if(!uart_has_data())
        return -1;
    9800:	e3e00000 	mvn	r0, #0
    return uart_getc();
}
    9804:	e8bd8008 	pop	{r3, pc}

00009808 <dev_barrier>:
    9808:	ea000002 	b	9818 <dsb>

0000980c <dmb>:
    980c:	e3a00000 	mov	r0, #0
    9810:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
    9814:	e12fff1e 	bx	lr

00009818 <dsb>:
    9818:	ee070f9a 	mcr	15, 0, r0, cr7, cr10, {4}
    981c:	e12fff1e 	bx	lr

00009820 <put32>:
    9820:	e5801000 	str	r1, [r0]
    9824:	e12fff1e 	bx	lr

00009828 <PUT32>:
    9828:	e5801000 	str	r1, [r0]
    982c:	e12fff1e 	bx	lr

00009830 <put16>:
    9830:	e1c010b0 	strh	r1, [r0]
    9834:	e12fff1e 	bx	lr

00009838 <PUT16>:
    9838:	e1c010b0 	strh	r1, [r0]
    983c:	e12fff1e 	bx	lr

00009840 <put8>:
    9840:	e5c01000 	strb	r1, [r0]
    9844:	e12fff1e 	bx	lr

00009848 <PUT8>:
    9848:	e5c01000 	strb	r1, [r0]
    984c:	e12fff1e 	bx	lr

00009850 <get32>:
    9850:	e5900000 	ldr	r0, [r0]
    9854:	e12fff1e 	bx	lr

00009858 <GET32>:
    9858:	e5900000 	ldr	r0, [r0]
    985c:	e12fff1e 	bx	lr

00009860 <GETPC>:
    9860:	e1a0000e 	mov	r0, lr
    9864:	e12fff1e 	bx	lr

00009868 <dummy>:
    9868:	e12fff1e 	bx	lr

0000986c <rpi_get_sp>:
    986c:	e12fff1e 	bx	lr

00009870 <rpi_cswitch>:
    9870:	e5804000 	str	r4, [r0]
    9874:	e5805004 	str	r5, [r0, #4]
    9878:	e5806008 	str	r6, [r0, #8]
    987c:	e580700c 	str	r7, [r0, #12]
    9880:	e5808010 	str	r8, [r0, #16]
    9884:	e5809014 	str	r9, [r0, #20]
    9888:	e580a018 	str	sl, [r0, #24]
    988c:	e580b01c 	str	fp, [r0, #28]
    9890:	e580c020 	str	ip, [r0, #32]
    9894:	e580e024 	str	lr, [r0, #36]	; 0x24
    9898:	e580d028 	str	sp, [r0, #40]	; 0x28
    989c:	e5914000 	ldr	r4, [r1]
    98a0:	e5915004 	ldr	r5, [r1, #4]
    98a4:	e5916008 	ldr	r6, [r1, #8]
    98a8:	e591700c 	ldr	r7, [r1, #12]
    98ac:	e5918010 	ldr	r8, [r1, #16]
    98b0:	e5919014 	ldr	r9, [r1, #20]
    98b4:	e591a018 	ldr	sl, [r1, #24]
    98b8:	e591b01c 	ldr	fp, [r1, #28]
    98bc:	e591c020 	ldr	ip, [r1, #32]
    98c0:	e591e024 	ldr	lr, [r1, #36]	; 0x24
    98c4:	e591d028 	ldr	sp, [r1, #40]	; 0x28
    98c8:	e12fff1e 	bx	lr

000098cc <rpi_init_trampoline>:
    98cc:	e1a00005 	mov	r0, r5
    98d0:	e12fff34 	blx	r4
    98d4:	ebfffd67 	bl	8e78 <rpi_exit>

000098d8 <gpio_set_output>:
volatile unsigned *GPLEV1 = (void*) 0x20200038;
// Part 1 implement gpio_set_on, gpio_set_off, gpio_set_output

// set <pin> to be an output pin.  note: fsel0, fsel1, fsel2 are contiguous in memory,
// so you can use array calculations!
extern inline void gpio_set_output(unsigned pin) {
    98d8:	e92d4038 	push	{r3, r4, r5, lr}
    98dc:	e1a04000 	mov	r4, r0
    // implement this
    // use gpio_fsel0
    
    if (pin >= 32) {
    98e0:	e350001f 	cmp	r0, #31
    98e4:	88bd8038 	pophi	{r3, r4, r5, pc}
        return;
    }
    
    volatile unsigned* gpio_reg;
    
    unsigned reg_select = pin / 10;
    98e8:	e59f30b4 	ldr	r3, [pc, #180]	; 99a4 <gpio_set_output+0xcc>
    98ec:	e0832093 	umull	r2, r3, r3, r0
    98f0:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    98f4:	e3530005 	cmp	r3, #5
    98f8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    98fc:	ea000017 	b	9960 <gpio_set_output+0x88>
    9900:	00009918 	andeq	r9, r0, r8, lsl r9
    9904:	00009924 	andeq	r9, r0, r4, lsr #18
    9908:	00009930 	andeq	r9, r0, r0, lsr r9
    990c:	0000993c 	andeq	r9, r0, ip, lsr r9
    9910:	00009948 	andeq	r9, r0, r8, asr #18
    9914:	00009954 	andeq	r9, r0, r4, asr r9
        case 0: {gpio_reg = GPFSEL0; break;}
    9918:	e59f3088 	ldr	r3, [pc, #136]	; 99a8 <gpio_set_output+0xd0>
    991c:	e5935000 	ldr	r5, [r3]
    9920:	ea00000f 	b	9964 <gpio_set_output+0x8c>
        case 1: {gpio_reg = GPFSEL1; break;}
    9924:	e59f307c 	ldr	r3, [pc, #124]	; 99a8 <gpio_set_output+0xd0>
    9928:	e5935004 	ldr	r5, [r3, #4]
    992c:	ea00000c 	b	9964 <gpio_set_output+0x8c>
        case 2: {gpio_reg = GPFSEL2; break;}
    9930:	e59f3070 	ldr	r3, [pc, #112]	; 99a8 <gpio_set_output+0xd0>
    9934:	e5935008 	ldr	r5, [r3, #8]
    9938:	ea000009 	b	9964 <gpio_set_output+0x8c>
        case 3: {gpio_reg = GPFSEL3; break;}
    993c:	e59f3064 	ldr	r3, [pc, #100]	; 99a8 <gpio_set_output+0xd0>
    9940:	e593500c 	ldr	r5, [r3, #12]
    9944:	ea000006 	b	9964 <gpio_set_output+0x8c>
        case 4: {gpio_reg = GPFSEL4; break;}
    9948:	e59f3058 	ldr	r3, [pc, #88]	; 99a8 <gpio_set_output+0xd0>
    994c:	e5935010 	ldr	r5, [r3, #16]
    9950:	ea000003 	b	9964 <gpio_set_output+0x8c>
        case 5: {gpio_reg = GPFSEL5; break;}
    9954:	e59f304c 	ldr	r3, [pc, #76]	; 99a8 <gpio_set_output+0xd0>
    9958:	e5935014 	ldr	r5, [r3, #20]
    995c:	ea000000 	b	9964 <gpio_set_output+0x8c>
        default: gpio_reg = 0x0;
    9960:	e3a05000 	mov	r5, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    9964:	e1a00005 	mov	r0, r5
    9968:	ebffffb8 	bl	9850 <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    996c:	e59f1030 	ldr	r1, [pc, #48]	; 99a4 <gpio_set_output+0xcc>
    9970:	e0813491 	umull	r3, r1, r1, r4
    9974:	e1a011a1 	lsr	r1, r1, #3
    9978:	e0811101 	add	r1, r1, r1, lsl #2
    997c:	e1a01081 	lsl	r1, r1, #1
    9980:	e0611004 	rsb	r1, r1, r4
    9984:	e0811081 	add	r1, r1, r1, lsl #1
    9988:	e3a03007 	mov	r3, #7
    998c:	e1c03113 	bic	r3, r0, r3, lsl r1
    bitmask |= (1 << ((pin % 10) * 3));
    put32(gpio_reg, bitmask);
    9990:	e1a00005 	mov	r0, r5
    9994:	e3a02001 	mov	r2, #1
    9998:	e1831112 	orr	r1, r3, r2, lsl r1
    999c:	ebffff9f 	bl	9820 <put32>
    99a0:	e8bd8038 	pop	{r3, r4, r5, pc}
    99a4:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    99a8:	00009ef0 	strdeq	r9, [r0], -r0

000099ac <gpio_set_on>:
    
}


// set GPIO <pin> on.
void gpio_set_on(unsigned pin) {
    99ac:	e92d4008 	push	{r3, lr}
    // implement this
    // use gpio_set0
    if (pin >= 32) {
    99b0:	e350001f 	cmp	r0, #31
    99b4:	88bd8008 	pophi	{r3, pc}
    // Get current register value
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPSET0;
    99b8:	959f3020 	ldrls	r3, [pc, #32]	; 99e0 <gpio_set_on+0x34>
    99bc:	95932018 	ldrls	r2, [r3, #24]
        // TODO: why do we not want this statement?
        //bitmask = get32(GPSET0);
    } else {
        gpio_reg = GPSET1;
    99c0:	859f3018 	ldrhi	r3, [pc, #24]	; 99e0 <gpio_set_on+0x34>
    99c4:	8593201c 	ldrhi	r2, [r3, #28]
        //bitmask = get32(GPSET1);
        // TODO: why do we not want this statement?
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    99c8:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    99cc:	e1a00002 	mov	r0, r2
    99d0:	e3a01001 	mov	r1, #1
    99d4:	e1a01311 	lsl	r1, r1, r3
    99d8:	ebffff90 	bl	9820 <put32>
    99dc:	e8bd8008 	pop	{r3, pc}
    99e0:	00009ef0 	strdeq	r9, [r0], -r0

000099e4 <gpio_set_off>:
}

// set GPIO <pin> off
void gpio_set_off(unsigned pin) {
    99e4:	e92d4008 	push	{r3, lr}
    // implement this
    // use gpio_clr0
    if(pin >= 32) {
    99e8:	e350001f 	cmp	r0, #31
    99ec:	88bd8008 	pophi	{r3, pc}
    }
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPCLR0;
    99f0:	959f3020 	ldrls	r3, [pc, #32]	; 9a18 <gpio_set_off+0x34>
    99f4:	95932020 	ldrls	r2, [r3, #32]
        //bitmask = get32(GPCLR0);
    } else {
        gpio_reg = GPCLR1;
    99f8:	859f3018 	ldrhi	r3, [pc, #24]	; 9a18 <gpio_set_off+0x34>
    99fc:	85932024 	ldrhi	r2, [r3, #36]	; 0x24
        //bitmask = get32(GPCLR1);
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    9a00:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    9a04:	e1a00002 	mov	r0, r2
    9a08:	e3a01001 	mov	r1, #1
    9a0c:	e1a01311 	lsl	r1, r1, r3
    9a10:	ebffff82 	bl	9820 <put32>
    9a14:	e8bd8008 	pop	{r3, pc}
    9a18:	00009ef0 	strdeq	r9, [r0], -r0

00009a1c <gpio_set_input>:
}

// Part 2: implement gpio_set_input and gpio_read

// set <pin> to input.
void gpio_set_input(unsigned pin) {
    9a1c:	e92d4038 	push	{r3, r4, r5, lr}
    9a20:	e1a04000 	mov	r4, r0
    // implement.
    if(pin >= 32) {
    9a24:	e350001f 	cmp	r0, #31
    9a28:	88bd8038 	pophi	{r3, r4, r5, pc}
        return;
    }
    
    volatile unsigned* gpio_reg;
    
    unsigned reg_select = pin / 10;
    9a2c:	e59f30ac 	ldr	r3, [pc, #172]	; 9ae0 <gpio_set_input+0xc4>
    9a30:	e0832093 	umull	r2, r3, r3, r0
    9a34:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    9a38:	e3530005 	cmp	r3, #5
    9a3c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    9a40:	ea000017 	b	9aa4 <gpio_set_input+0x88>
    9a44:	00009a5c 	andeq	r9, r0, ip, asr sl
    9a48:	00009a68 	andeq	r9, r0, r8, ror #20
    9a4c:	00009a74 	andeq	r9, r0, r4, ror sl
    9a50:	00009a80 	andeq	r9, r0, r0, lsl #21
    9a54:	00009a8c 	andeq	r9, r0, ip, lsl #21
    9a58:	00009a98 	muleq	r0, r8, sl
        case 0: {gpio_reg = GPFSEL0; break;}
    9a5c:	e59f3080 	ldr	r3, [pc, #128]	; 9ae4 <gpio_set_input+0xc8>
    9a60:	e5935000 	ldr	r5, [r3]
    9a64:	ea00000f 	b	9aa8 <gpio_set_input+0x8c>
        case 1: {gpio_reg = GPFSEL1; break;}
    9a68:	e59f3074 	ldr	r3, [pc, #116]	; 9ae4 <gpio_set_input+0xc8>
    9a6c:	e5935004 	ldr	r5, [r3, #4]
    9a70:	ea00000c 	b	9aa8 <gpio_set_input+0x8c>
        case 2: {gpio_reg = GPFSEL2; break;}
    9a74:	e59f3068 	ldr	r3, [pc, #104]	; 9ae4 <gpio_set_input+0xc8>
    9a78:	e5935008 	ldr	r5, [r3, #8]
    9a7c:	ea000009 	b	9aa8 <gpio_set_input+0x8c>
        case 3: {gpio_reg = GPFSEL3; break;}
    9a80:	e59f305c 	ldr	r3, [pc, #92]	; 9ae4 <gpio_set_input+0xc8>
    9a84:	e593500c 	ldr	r5, [r3, #12]
    9a88:	ea000006 	b	9aa8 <gpio_set_input+0x8c>
        case 4: {gpio_reg = GPFSEL4; break;}
    9a8c:	e59f3050 	ldr	r3, [pc, #80]	; 9ae4 <gpio_set_input+0xc8>
    9a90:	e5935010 	ldr	r5, [r3, #16]
    9a94:	ea000003 	b	9aa8 <gpio_set_input+0x8c>
        case 5: {gpio_reg = GPFSEL5; break;}
    9a98:	e59f3044 	ldr	r3, [pc, #68]	; 9ae4 <gpio_set_input+0xc8>
    9a9c:	e5935014 	ldr	r5, [r3, #20]
    9aa0:	ea000000 	b	9aa8 <gpio_set_input+0x8c>
        default: gpio_reg = 0x0;
    9aa4:	e3a05000 	mov	r5, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    9aa8:	e1a00005 	mov	r0, r5
    9aac:	ebffff67 	bl	9850 <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    9ab0:	e59f1028 	ldr	r1, [pc, #40]	; 9ae0 <gpio_set_input+0xc4>
    9ab4:	e0813491 	umull	r3, r1, r1, r4
    9ab8:	e1a011a1 	lsr	r1, r1, #3
    9abc:	e0811101 	add	r1, r1, r1, lsl #2
    9ac0:	e1a01081 	lsl	r1, r1, #1
    9ac4:	e0611004 	rsb	r1, r1, r4
    9ac8:	e0811081 	add	r1, r1, r1, lsl #1
    9acc:	e3a03007 	mov	r3, #7
    9ad0:	e1c01113 	bic	r1, r0, r3, lsl r1
    put32(gpio_reg, bitmask);
    9ad4:	e1a00005 	mov	r0, r5
    9ad8:	ebffff50 	bl	9820 <put32>
    9adc:	e8bd8038 	pop	{r3, r4, r5, pc}
    9ae0:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    9ae4:	00009ef0 	strdeq	r9, [r0], -r0

00009ae8 <gpio_read>:
    
    
}

// return the value of <pin>
int gpio_read(unsigned pin) {
    9ae8:	e92d4010 	push	{r4, lr}
    9aec:	e1a04000 	mov	r4, r0
    
    if(pin >= 32) {
    9af0:	e350001f 	cmp	r0, #31
    9af4:	8a00000b 	bhi	9b28 <gpio_read+0x40>
        return -1;
    }
    
    unsigned v = 0;
    
    if (pin <= 31){
    9af8:	8a000003 	bhi	9b0c <gpio_read+0x24>
        v = get32(GPLEV0);
    9afc:	e59f302c 	ldr	r3, [pc, #44]	; 9b30 <gpio_read+0x48>
    9b00:	e5930028 	ldr	r0, [r3, #40]	; 0x28
    9b04:	ebffff51 	bl	9850 <get32>
    9b08:	ea000002 	b	9b18 <gpio_read+0x30>
    } else {
        v = get32(GPLEV1);
    9b0c:	e59f301c 	ldr	r3, [pc, #28]	; 9b30 <gpio_read+0x48>
    9b10:	e593002c 	ldr	r0, [r3, #44]	; 0x2c
    9b14:	ebffff4d 	bl	9850 <get32>
    }
    
    return (v & (1 << (pin % 32)));
    9b18:	e204401f 	and	r4, r4, #31
    9b1c:	e3a03001 	mov	r3, #1
    9b20:	e0000413 	and	r0, r0, r3, lsl r4
    9b24:	e8bd8010 	pop	{r4, pc}

// return the value of <pin>
int gpio_read(unsigned pin) {
    
    if(pin >= 32) {
        return -1;
    9b28:	e3e00000 	mvn	r0, #0
    } else {
        v = get32(GPLEV1);
    }
    
    return (v & (1 << (pin % 32)));
}
    9b2c:	e8bd8010 	pop	{r4, pc}
    9b30:	00009ef0 	strdeq	r9, [r0], -r0

00009b34 <gpio_write>:

// set <pin> to <v> (v \in {0,1})
void gpio_write(unsigned pin, unsigned v) {
    9b34:	e92d4008 	push	{r3, lr}
    
    if(pin >= 32) {
    9b38:	e350001f 	cmp	r0, #31
    9b3c:	88bd8008 	pophi	{r3, pc}
        return;
    }
    
    if(v)
    9b40:	e3510000 	cmp	r1, #0
    9b44:	0a000001 	beq	9b50 <gpio_write+0x1c>
        gpio_set_on(pin);
    9b48:	ebffff97 	bl	99ac <gpio_set_on>
    9b4c:	e8bd8008 	pop	{r3, pc}
    else
        gpio_set_off(pin);
    9b50:	ebffffa3 	bl	99e4 <gpio_set_off>
    9b54:	e8bd8008 	pop	{r3, pc}

00009b58 <gpio_set_function>:
}

void gpio_set_function(unsigned pin, gpio_func_t func) {
    9b58:	e92d4070 	push	{r4, r5, r6, lr}
    9b5c:	e1a04000 	mov	r4, r0
    9b60:	e1a05001 	mov	r5, r1
    // implement this
    // use gpio_fsel0
    
    if (pin >= 32 || func >= 8) {
    9b64:	e3510007 	cmp	r1, #7
    9b68:	9350001f 	cmpls	r0, #31
    9b6c:	88bd8070 	pophi	{r4, r5, r6, pc}
        return;
    }

    volatile unsigned* gpio_reg;
    unsigned reg_select = pin / 10;
    9b70:	e59f30b0 	ldr	r3, [pc, #176]	; 9c28 <gpio_set_function+0xd0>
    9b74:	e0832093 	umull	r2, r3, r3, r0
    9b78:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    9b7c:	e3530005 	cmp	r3, #5
    9b80:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    9b84:	ea000017 	b	9be8 <gpio_set_function+0x90>
    9b88:	00009ba0 	andeq	r9, r0, r0, lsr #23
    9b8c:	00009bac 	andeq	r9, r0, ip, lsr #23
    9b90:	00009bb8 			; <UNDEFINED> instruction: 0x00009bb8
    9b94:	00009bc4 	andeq	r9, r0, r4, asr #23
    9b98:	00009bd0 	ldrdeq	r9, [r0], -r0
    9b9c:	00009bdc 	ldrdeq	r9, [r0], -ip
        case 0: {gpio_reg = GPFSEL0; break;}
    9ba0:	e59f3084 	ldr	r3, [pc, #132]	; 9c2c <gpio_set_function+0xd4>
    9ba4:	e5936000 	ldr	r6, [r3]
    9ba8:	ea00000f 	b	9bec <gpio_set_function+0x94>
        case 1: {gpio_reg = GPFSEL1; break;}
    9bac:	e59f3078 	ldr	r3, [pc, #120]	; 9c2c <gpio_set_function+0xd4>
    9bb0:	e5936004 	ldr	r6, [r3, #4]
    9bb4:	ea00000c 	b	9bec <gpio_set_function+0x94>
        case 2: {gpio_reg = GPFSEL2; break;}
    9bb8:	e59f306c 	ldr	r3, [pc, #108]	; 9c2c <gpio_set_function+0xd4>
    9bbc:	e5936008 	ldr	r6, [r3, #8]
    9bc0:	ea000009 	b	9bec <gpio_set_function+0x94>
        case 3: {gpio_reg = GPFSEL3; break;}
    9bc4:	e59f3060 	ldr	r3, [pc, #96]	; 9c2c <gpio_set_function+0xd4>
    9bc8:	e593600c 	ldr	r6, [r3, #12]
    9bcc:	ea000006 	b	9bec <gpio_set_function+0x94>
        case 4: {gpio_reg = GPFSEL4; break;}
    9bd0:	e59f3054 	ldr	r3, [pc, #84]	; 9c2c <gpio_set_function+0xd4>
    9bd4:	e5936010 	ldr	r6, [r3, #16]
    9bd8:	ea000003 	b	9bec <gpio_set_function+0x94>
        case 5: {gpio_reg = GPFSEL5; break;}
    9bdc:	e59f3048 	ldr	r3, [pc, #72]	; 9c2c <gpio_set_function+0xd4>
    9be0:	e5936014 	ldr	r6, [r3, #20]
    9be4:	ea000000 	b	9bec <gpio_set_function+0x94>
        default: gpio_reg = 0x0;
    9be8:	e3a06000 	mov	r6, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    9bec:	e1a00006 	mov	r0, r6
    9bf0:	ebffff16 	bl	9850 <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    9bf4:	e59f302c 	ldr	r3, [pc, #44]	; 9c28 <gpio_set_function+0xd0>
    9bf8:	e0832493 	umull	r2, r3, r3, r4
    9bfc:	e1a031a3 	lsr	r3, r3, #3
    9c00:	e0833103 	add	r3, r3, r3, lsl #2
    9c04:	e1a03083 	lsl	r3, r3, #1
    9c08:	e0633004 	rsb	r3, r3, r4
    9c0c:	e0833083 	add	r3, r3, r3, lsl #1
    9c10:	e3a01007 	mov	r1, #7
    9c14:	e1c01311 	bic	r1, r0, r1, lsl r3
    bitmask |= (func << ((pin % 10) * 3));
    put32(gpio_reg, bitmask);
    9c18:	e1a00006 	mov	r0, r6
    9c1c:	e1811315 	orr	r1, r1, r5, lsl r3
    9c20:	ebfffefe 	bl	9820 <put32>
    9c24:	e8bd8070 	pop	{r4, r5, r6, pc}
    9c28:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    9c2c:	00009ef0 	strdeq	r9, [r0], -r0

00009c30 <is_gpio_int>:
// call this routine (you must implement) to setup the right GPIO event.
// as with setting up functions, you should bitwise-or in the value for the
// pin you are setting with the existing pin values.  (otherwise you will
// lose their configuration).  you also need to enable the right IRQ.   make
// sure to use device barriers!!
int is_gpio_int(unsigned gpio_int) {
    9c30:	e92d4008 	push	{r3, lr}
    // assert(gpio_int >= GPIO_INT0 && gpio_int <= GPIO_INT3);

    if(get32(IRQ_PENDING_2) > 0) {
    9c34:	e59f301c 	ldr	r3, [pc, #28]	; 9c58 <is_gpio_int+0x28>
    9c38:	e5930030 	ldr	r0, [r3, #48]	; 0x30
    9c3c:	ebffff03 	bl	9850 <get32>
    9c40:	e3500000 	cmp	r0, #0
    9c44:	0a000001 	beq	9c50 <is_gpio_int+0x20>
        return 1;
    9c48:	e3a00001 	mov	r0, #1
    9c4c:	e8bd8008 	pop	{r3, pc}
    }
    return 0;
    9c50:	e3a00000 	mov	r0, #0
}
    9c54:	e8bd8008 	pop	{r3, pc}
    9c58:	00009ef0 	strdeq	r9, [r0], -r0

00009c5c <gpio_int_rising_edge>:
// p97 set to detect rising edge (0->1) on <pin>.
// as the broadcom doc states, it  detects by sampling based on the clock.
// it looks for "011" (low, hi, hi) to suppress noise.  i.e., its triggered only
// *after* a 1 reading has been sampled twice, so there will be delay.
// if you want lower latency, you should us async rising edge (p99)
void gpio_int_rising_edge(unsigned pin) {
    9c5c:	e92d4038 	push	{r3, r4, r5, lr}
    9c60:	e1a04000 	mov	r4, r0
    
    
    if(pin >= 32) {
    9c64:	e350001f 	cmp	r0, #31
    9c68:	88bd8038 	pophi	{r3, r4, r5, pc}
        return;
    }
    
    dev_barrier();
    9c6c:	ebfffee5 	bl	9808 <dev_barrier>
    if(pin <= 31) {
    9c70:	e354001f 	cmp	r4, #31
    9c74:	8a000007 	bhi	9c98 <gpio_int_rising_edge+0x3c>
        unsigned bitmask = get32(GPREN0);
    9c78:	e59f505c 	ldr	r5, [pc, #92]	; 9cdc <gpio_int_rising_edge+0x80>
    9c7c:	e5950034 	ldr	r0, [r5, #52]	; 0x34
    9c80:	ebfffef2 	bl	9850 <get32>
        bitmask |= 1 << pin;
    9c84:	e3a01001 	mov	r1, #1
    9c88:	e1801411 	orr	r1, r0, r1, lsl r4
        put32(GPREN0, bitmask);
    9c8c:	e5950034 	ldr	r0, [r5, #52]	; 0x34
    9c90:	ebfffee2 	bl	9820 <put32>
    9c94:	ea000007 	b	9cb8 <gpio_int_rising_edge+0x5c>
    } else {
        unsigned bitmask = get32(GPREN1);
    9c98:	e59f503c 	ldr	r5, [pc, #60]	; 9cdc <gpio_int_rising_edge+0x80>
    9c9c:	e5950038 	ldr	r0, [r5, #56]	; 0x38
    9ca0:	ebfffeea 	bl	9850 <get32>
        bitmask |= 1 << (pin % 32);
    9ca4:	e204401f 	and	r4, r4, #31
    9ca8:	e3a01001 	mov	r1, #1
    9cac:	e1801411 	orr	r1, r0, r1, lsl r4
        put32(GPREN1, bitmask);
    9cb0:	e5950038 	ldr	r0, [r5, #56]	; 0x38
    9cb4:	ebfffed9 	bl	9820 <put32>
    }
    dev_barrier();
    9cb8:	ebfffed2 	bl	9808 <dev_barrier>
    unsigned int_mask = get32(ENABLE_IRQS_2);
    9cbc:	e59f4018 	ldr	r4, [pc, #24]	; 9cdc <gpio_int_rising_edge+0x80>
    9cc0:	e594003c 	ldr	r0, [r4, #60]	; 0x3c
    9cc4:	ebfffee1 	bl	9850 <get32>
    int_mask |= 1 << (49 - 32);
    9cc8:	e3801802 	orr	r1, r0, #131072	; 0x20000
    put32(ENABLE_IRQS_2, int_mask);
    9ccc:	e594003c 	ldr	r0, [r4, #60]	; 0x3c
    9cd0:	ebfffed2 	bl	9820 <put32>
    dev_barrier();
    9cd4:	ebfffecb 	bl	9808 <dev_barrier>
    9cd8:	e8bd8038 	pop	{r3, r4, r5, pc}
    9cdc:	00009ef0 	strdeq	r9, [r0], -r0

00009ce0 <gpio_int_falling_edge>:
// p98: detect falling edge (1->0).  sampled using the system clock.
// similarly to rising edge detection, it suppresses noise by looking for
// "100" --- i.e., is triggered after two readings of "0" and so the
// interrupt is delayed two clock cycles.   if you want  lower latency,
// you should use async falling edge. (p99)
void gpio_int_falling_edge(unsigned pin) {
    9ce0:	e92d4038 	push	{r3, r4, r5, lr}
    9ce4:	e1a04000 	mov	r4, r0
    
    if(pin >= 32) {
    9ce8:	e350001f 	cmp	r0, #31
    9cec:	88bd8038 	pophi	{r3, r4, r5, pc}
        return;
    }
    
    dev_barrier();
    9cf0:	ebfffec4 	bl	9808 <dev_barrier>
    if(pin <= 31) {
    9cf4:	e354001f 	cmp	r4, #31
    9cf8:	8a000007 	bhi	9d1c <gpio_int_falling_edge+0x3c>
        unsigned bitmask = get32(GPFEN0);
    9cfc:	e59f505c 	ldr	r5, [pc, #92]	; 9d60 <gpio_int_falling_edge+0x80>
    9d00:	e5950040 	ldr	r0, [r5, #64]	; 0x40
    9d04:	ebfffed1 	bl	9850 <get32>
        bitmask |= 1 << pin;
    9d08:	e3a01001 	mov	r1, #1
    9d0c:	e1801411 	orr	r1, r0, r1, lsl r4
        put32(GPFEN0, bitmask);
    9d10:	e5950040 	ldr	r0, [r5, #64]	; 0x40
    9d14:	ebfffec1 	bl	9820 <put32>
    9d18:	ea000007 	b	9d3c <gpio_int_falling_edge+0x5c>
    } else {
        unsigned bitmask = get32(GPFEN1);
    9d1c:	e59f503c 	ldr	r5, [pc, #60]	; 9d60 <gpio_int_falling_edge+0x80>
    9d20:	e5950044 	ldr	r0, [r5, #68]	; 0x44
    9d24:	ebfffec9 	bl	9850 <get32>
        bitmask |= 1 << (pin % 32);
    9d28:	e204401f 	and	r4, r4, #31
    9d2c:	e3a01001 	mov	r1, #1
    9d30:	e1801411 	orr	r1, r0, r1, lsl r4
        put32(GPFEN1, bitmask);
    9d34:	e5950044 	ldr	r0, [r5, #68]	; 0x44
    9d38:	ebfffeb8 	bl	9820 <put32>
    }
    dev_barrier();
    9d3c:	ebfffeb1 	bl	9808 <dev_barrier>
    unsigned int_mask = get32(ENABLE_IRQS_2);
    9d40:	e59f4018 	ldr	r4, [pc, #24]	; 9d60 <gpio_int_falling_edge+0x80>
    9d44:	e594003c 	ldr	r0, [r4, #60]	; 0x3c
    9d48:	ebfffec0 	bl	9850 <get32>
    int_mask |= 1 << (52 -32);
    9d4c:	e3801601 	orr	r1, r0, #1048576	; 0x100000
    put32(ENABLE_IRQS_2, int_mask);
    9d50:	e594003c 	ldr	r0, [r4, #60]	; 0x3c
    9d54:	ebfffeb1 	bl	9820 <put32>
    dev_barrier();
    9d58:	ebfffeaa 	bl	9808 <dev_barrier>
    9d5c:	e8bd8038 	pop	{r3, r4, r5, pc}
    9d60:	00009ef0 	strdeq	r9, [r0], -r0

00009d64 <gpio_event_detected>:
}

// p96: a 1<<pin is set in EVENT_DETECT if <pin> triggered an interrupt.
// if you configure multiple events to lead to interrupts, you will have to
// read the pin to determine which caused it.
int gpio_event_detected(unsigned pin) {
    9d64:	e92d4010 	push	{r4, lr}
    9d68:	e1a04000 	mov	r4, r0
    if(pin >= 32) {
    9d6c:	e350001f 	cmp	r0, #31
    9d70:	8a000019 	bhi	9ddc <gpio_event_detected+0x78>
        return -1;
    }
    
    dev_barrier();
    9d74:	ebfffea3 	bl	9808 <dev_barrier>
    if(pin <= 31) {
    9d78:	e354001f 	cmp	r4, #31
    9d7c:	8a000008 	bhi	9da4 <gpio_event_detected+0x40>
        unsigned reg_stat = get32(GPEDS0) & (1 << pin);
    9d80:	e59f305c 	ldr	r3, [pc, #92]	; 9de4 <gpio_event_detected+0x80>
    9d84:	e5930048 	ldr	r0, [r3, #72]	; 0x48
    9d88:	ebfffeb0 	bl	9850 <get32>
        if(reg_stat > 0) {dev_barrier(); return 1;}
    9d8c:	e3a03001 	mov	r3, #1
    9d90:	e0103413 	ands	r3, r0, r3, lsl r4
    9d94:	0a00000d 	beq	9dd0 <gpio_event_detected+0x6c>
    9d98:	ebfffe9a 	bl	9808 <dev_barrier>
    9d9c:	e3a00001 	mov	r0, #1
    9da0:	e8bd8010 	pop	{r4, pc}
    } else {
        unsigned reg_stat = get32(GPEDS1) & (1 << pin);
    9da4:	e59f3038 	ldr	r3, [pc, #56]	; 9de4 <gpio_event_detected+0x80>
    9da8:	e593004c 	ldr	r0, [r3, #76]	; 0x4c
    9dac:	ebfffea7 	bl	9850 <get32>
    9db0:	e3a03001 	mov	r3, #1
    9db4:	e0004413 	and	r4, r0, r3, lsl r4
        dev_barrier();
    9db8:	ebfffe92 	bl	9808 <dev_barrier>
        if(reg_stat > 0) {dev_barrier(); return 1;}
    9dbc:	e3540000 	cmp	r4, #0
    9dc0:	0a000002 	beq	9dd0 <gpio_event_detected+0x6c>
    9dc4:	ebfffe8f 	bl	9808 <dev_barrier>
    9dc8:	e3a00001 	mov	r0, #1
    9dcc:	e8bd8010 	pop	{r4, pc}
    }
    dev_barrier();
    9dd0:	ebfffe8c 	bl	9808 <dev_barrier>
    return 0;
    9dd4:	e3a00000 	mov	r0, #0
    9dd8:	e8bd8010 	pop	{r4, pc}
// p96: a 1<<pin is set in EVENT_DETECT if <pin> triggered an interrupt.
// if you configure multiple events to lead to interrupts, you will have to
// read the pin to determine which caused it.
int gpio_event_detected(unsigned pin) {
    if(pin >= 32) {
        return -1;
    9ddc:	e3e00000 	mvn	r0, #0
        dev_barrier();
        if(reg_stat > 0) {dev_barrier(); return 1;}
    }
    dev_barrier();
    return 0;
}
    9de0:	e8bd8010 	pop	{r4, pc}
    9de4:	00009ef0 	strdeq	r9, [r0], -r0

00009de8 <gpio_event_clear>:

// p96: have to write a 1 to the pin to clear the event.
void gpio_event_clear(unsigned pin) {
    9de8:	e92d4010 	push	{r4, lr}
    9dec:	e1a04000 	mov	r4, r0
    
    if(pin >= 32) {
    9df0:	e350001f 	cmp	r0, #31
    9df4:	88bd8010 	pophi	{r4, pc}
        return;
    }
    
    dev_barrier();
    9df8:	ebfffe82 	bl	9808 <dev_barrier>
    if(pin <= 31) {
    9dfc:	e354001f 	cmp	r4, #31
    9e00:	8a000005 	bhi	9e1c <gpio_event_clear+0x34>
        put32(GPEDS0, 1 << pin);
    9e04:	e59f3030 	ldr	r3, [pc, #48]	; 9e3c <gpio_event_clear+0x54>
    9e08:	e5930048 	ldr	r0, [r3, #72]	; 0x48
    9e0c:	e3a01001 	mov	r1, #1
    9e10:	e1a01411 	lsl	r1, r1, r4
    9e14:	ebfffe81 	bl	9820 <put32>
    9e18:	ea000005 	b	9e34 <gpio_event_clear+0x4c>
    } else {
        put32(GPEDS1, 1 << (pin % 32));
    9e1c:	e204401f 	and	r4, r4, #31
    9e20:	e59f3014 	ldr	r3, [pc, #20]	; 9e3c <gpio_event_clear+0x54>
    9e24:	e593004c 	ldr	r0, [r3, #76]	; 0x4c
    9e28:	e3a01001 	mov	r1, #1
    9e2c:	e1a01411 	lsl	r1, r1, r4
    9e30:	ebfffe7a 	bl	9820 <put32>
    }
    dev_barrier();
    9e34:	ebfffe73 	bl	9808 <dev_barrier>
    9e38:	e8bd8010 	pop	{r4, pc}
    9e3c:	00009ef0 	strdeq	r9, [r0], -r0

00009e40 <memset>:
#include <string.h>

void *memset(void *_p, int c, size_t n) {
    char *p = _p, *e = p + n;
    9e40:	e0802002 	add	r2, r0, r2
    9e44:	e1a03000 	mov	r3, r0

    while(p < e)
    9e48:	ea000001 	b	9e54 <memset+0x14>
        *p++ = c;
    9e4c:	e5c31000 	strb	r1, [r3]
    9e50:	e2833001 	add	r3, r3, #1
#include <string.h>

void *memset(void *_p, int c, size_t n) {
    char *p = _p, *e = p + n;

    while(p < e)
    9e54:	e1530002 	cmp	r3, r2
    9e58:	3afffffb 	bcc	9e4c <memset+0xc>
        *p++ = c;
    return _p;
}
    9e5c:	e12fff1e 	bx	lr

00009e60 <cb_new>:
// trivial routines to access control block.
#include "rpi.h"
#include "control-block.h"

control_blk_t *cb_new(void) {
    9e60:	e92d4008 	push	{r3, lr}
    control_blk_t *c = CTRL_BLK_ADDR;
    memset(c, 0, sizeof c);
    9e64:	e3a00409 	mov	r0, #150994944	; 0x9000000
    9e68:	e3a01000 	mov	r1, #0
    9e6c:	e3a02004 	mov	r2, #4
    9e70:	ebfffff2 	bl	9e40 <memset>
    c->magic = CTRL_BLK_MAGIC;
    9e74:	e3a00409 	mov	r0, #150994944	; 0x9000000
    9e78:	e59f3004 	ldr	r3, [pc, #4]	; 9e84 <cb_new+0x24>
    9e7c:	e5803000 	str	r3, [r0]
    return c;
}
    9e80:	e8bd8008 	pop	{r3, pc}
    9e84:	12345678 	eorsne	r5, r4, #120, 12	; 0x7800000

00009e88 <cb_get_block>:

control_blk_t *cb_get_block(void) {
    control_blk_t *c = CTRL_BLK_ADDR;
    if(c->magic != CTRL_BLK_MAGIC)
    9e88:	e3a03409 	mov	r3, #150994944	; 0x9000000
    9e8c:	e5932000 	ldr	r2, [r3]
    9e90:	e59f3014 	ldr	r3, [pc, #20]	; 9eac <cb_get_block+0x24>
    9e94:	e1520003 	cmp	r2, r3
    9e98:	0a000001 	beq	9ea4 <cb_get_block+0x1c>
        return 0;
    9e9c:	e3a00000 	mov	r0, #0
    9ea0:	e12fff1e 	bx	lr
    return c;
    9ea4:	e3a00409 	mov	r0, #150994944	; 0x9000000
}
    9ea8:	e12fff1e 	bx	lr
    9eac:	12345678 	eorsne	r5, r4, #120, 12	; 0x7800000

Disassembly of section .data:

00009eb0 <rpi_putchar>:
    9eb0:	000082d8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>

00009eb4 <putk>:
    9eb4:	00008314 	andeq	r8, r0, r4, lsl r3

00009eb8 <tid>:
    9eb8:	00000001 	andeq	r0, r0, r1

00009ebc <AUX_ENABLES>:
    9ebc:	20215004 	eorcs	r5, r1, r4

00009ec0 <AUX_MU_CNTL_REG>:
    9ec0:	20215060 	eorcs	r5, r1, r0, rrx

00009ec4 <AUX_MU_IER_REG>:
    9ec4:	20215044 	eorcs	r5, r1, r4, asr #32

00009ec8 <AUX_MU_IIR_REG>:
    9ec8:	20215048 	eorcs	r5, r1, r8, asr #32

00009ecc <AUX_MU_LCR_REG>:
    9ecc:	2021504c 	eorcs	r5, r1, ip, asr #32

00009ed0 <AUX_MU_BAUD_REG>:
    9ed0:	20215068 	eorcs	r5, r1, r8, rrx

00009ed4 <AUX_MU_LSR_REG>:
    9ed4:	20215054 	eorcs	r5, r1, r4, asr r0

00009ed8 <AUX_MU_IO_REG>:
    9ed8:	20215040 	eorcs	r5, r1, r0, asr #32

00009edc <AUX_MU_STAT_REG>:
    9edc:	20215064 	eorcs	r5, r1, r4, rrx

00009ee0 <AUX_MU_SCRATCH>:
    9ee0:	2021505c 	eorcs	r5, r1, ip, asr r0

00009ee4 <AUX_MU_MSR_REG>:
    9ee4:	20215058 	eorcs	r5, r1, r8, asr r0

00009ee8 <AUX_MU_MCR_REG>:
    9ee8:	20215050 	eorcs	r5, r1, r0, asr r0

00009eec <AUX_IRQ>:
    9eec:	20215000 	eorcs	r5, r1, r0

00009ef0 <GPFSEL0>:
    9ef0:	20200000 	eorcs	r0, r0, r0

00009ef4 <GPFSEL1>:
    9ef4:	20200004 	eorcs	r0, r0, r4

00009ef8 <GPFSEL2>:
    9ef8:	20200008 	eorcs	r0, r0, r8

00009efc <GPFSEL3>:
    9efc:	2020000c 	eorcs	r0, r0, ip

00009f00 <GPFSEL4>:
    9f00:	20200010 	eorcs	r0, r0, r0, lsl r0

00009f04 <GPFSEL5>:
    9f04:	20200014 	eorcs	r0, r0, r4, lsl r0

00009f08 <GPSET0>:
    9f08:	2020001c 	eorcs	r0, r0, ip, lsl r0

00009f0c <GPSET1>:
    9f0c:	20200020 	eorcs	r0, r0, r0, lsr #32

00009f10 <GPCLR0>:
    9f10:	20200028 	eorcs	r0, r0, r8, lsr #32

00009f14 <GPCLR1>:
    9f14:	2020002c 	eorcs	r0, r0, ip, lsr #32

00009f18 <GPLEV0>:
    9f18:	20200034 	eorcs	r0, r0, r4, lsr r0

00009f1c <GPLEV1>:
    9f1c:	20200038 	eorcs	r0, r0, r8, lsr r0

00009f20 <IRQ_PENDING_2>:
    9f20:	2000b208 	andcs	fp, r0, r8, lsl #4

00009f24 <GPREN0>:
    9f24:	2020004c 	eorcs	r0, r0, ip, asr #32

00009f28 <GPREN1>:
    9f28:	20200050 	eorcs	r0, r0, r0, asr r0

00009f2c <ENABLE_IRQS_2>:
    9f2c:	2000b214 	andcs	fp, r0, r4, lsl r2

00009f30 <GPFEN0>:
    9f30:	20200058 	eorcs	r0, r0, r8, asr r0

00009f34 <GPFEN1>:
    9f34:	2020005c 	eorcs	r0, r0, ip, asr r0

00009f38 <GPEDS0>:
    9f38:	20200040 	eorcs	r0, r0, r0, asr #32

00009f3c <GPEDS1>:
    9f3c:	20200044 	eorcs	r0, r0, r4, asr #32

00009f40 <IRQ_PENDING_1>:
    9f40:	2000b204 	andcs	fp, r0, r4, lsl #4

00009f44 <gpio_clr0>:
    9f44:	20200028 	eorcs	r0, r0, r8, lsr #32

00009f48 <gpio_set0>:
    9f48:	2020001c 	eorcs	r0, r0, ip, lsl r0

00009f4c <gpio_fsel0>:
    9f4c:	20200000 	eorcs	r0, r0, r0

Disassembly of section .rodata:

00009f50 <__FUNCTION__.4208>:
    9f50:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
    9f54:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
    9f58:	0065646f 	rsbeq	r6, r5, pc, ror #8

00009f5c <__FUNCTION__.4218>:
    9f5c:	6d746f6e 	ldclvs	15, cr6, [r4, #-440]!	; 0xfffffe48
    9f60:	006e6961 	rsbeq	r6, lr, r1, ror #18
    9f64:	74206e69 	strtvc	r6, [r0], #-3689	; 0xe69
    9f68:	61657268 	cmnvs	r5, r8, ror #4
    9f6c:	70252064 	eorvc	r2, r5, r4, rrx
    9f70:	6977202c 	ldmdbvs	r7!, {r2, r3, r5, sp}^
    9f74:	25206874 	strcs	r6, [r0, #-2164]!	; 0x874
    9f78:	00000a78 	andeq	r0, r0, r8, ror sl
    9f7c:	4f525245 	svcmi	0x00525245
    9f80:	73253a52 	teqvc	r5, #335872	; 0x52000
    9f84:	3a73253a 	bcc	1cd3474 <__bss_end__+0x1cc89cc>
    9f88:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9f8c:	534c4146 	movtpl	r4, #49478	; 0xc146
    9f90:	723c2845 	eorsvc	r2, ip, #4521984	; 0x450000
    9f94:	635f6970 	cmpvs	pc, #112, 18	; 0x1c0000
    9f98:	745f7275 	ldrbvc	r7, [pc], #-629	; 9fa0 <__FUNCTION__.4218+0x44>
    9f9c:	61657268 	cmnvs	r5, r8, ror #4
    9fa0:	2d292864 	stccs	8, cr2, [r9, #-400]!	; 0xfffffe70
    9fa4:	6469743e 	strbtvs	r7, [r9], #-1086	; 0x43e
    9fa8:	203d3d20 	eorscs	r3, sp, r0, lsr #26
    9fac:	312b782a 	teqcc	fp, sl, lsr #16
    9fb0:	203a293e 	eorscs	r2, sl, lr, lsr r9
    9fb4:	70786522 	rsbsvc	r6, r8, r2, lsr #10
    9fb8:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0x365
    9fbc:	64252064 	strtvs	r2, [r5], #-100	; 0x64
    9fc0:	6168202c 	cmnvs	r8, ip, lsr #32
    9fc4:	25206576 	strcs	r6, [r0, #-1398]!	; 0x576
    9fc8:	226e5c64 	rsbcs	r5, lr, #100, 24	; 0x6400
    9fcc:	0000000a 	andeq	r0, r0, sl
    9fd0:	65742d31 	ldrbvs	r2, [r4, #-3377]!	; 0xd31
    9fd4:	742d7473 	strtvc	r7, [sp], #-1139	; 0x473
    9fd8:	61657268 	cmnvs	r5, r8, ror #4
    9fdc:	00632e64 	rsbeq	r2, r3, r4, ror #28
    9fe0:	756f6261 	strbvc	r6, [pc, #-609]!	; 9d87 <gpio_event_detected+0x23>
    9fe4:	6f742074 	svcvs	0x00742074
    9fe8:	73657420 	cmnvc	r5, #32, 8	; 0x20000000
    9fec:	75732074 	ldrbvc	r2, [r3, #-116]!	; 0x74
    9ff0:	6e696d6d 	cdpvs	13, 6, cr6, cr9, cr13, {3}
    9ff4:	666f2067 	strbtvs	r2, [pc], -r7, rrx
    9ff8:	20303320 	eorscs	r3, r0, r0, lsr #6
    9ffc:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
    a000:	0a736461 	beq	1ce318c <__bss_end__+0x1cd86e4>
    a004:	00000000 	andeq	r0, r0, r0
    a008:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    a00c:	203d2074 	eorscs	r2, sp, r4, ror r0
    a010:	202c6425 	eorcs	r6, ip, r5, lsr #8
    a014:	3d6d7573 	cfstr64cc	mvdx7, [sp, #-460]!	; 0xfffffe34
    a018:	000a6425 	andeq	r6, sl, r5, lsr #8
    a01c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a020:	73253a43 	teqvc	r5, #274432	; 0x43000
    a024:	3a73253a 	bcc	1cd3514 <__bss_end__+0x1cc8a6c>
    a028:	743a6425 	ldrtvc	r6, [sl], #-1061	; 0x425
    a02c:	61657268 	cmnvs	r5, r8, ror #4
    a030:	6f635f64 	svcvs	0x00635f64
    a034:	20746e75 	rsbscs	r6, r4, r5, ror lr
    a038:	6e203d3d 	mcrvs	13, 1, r3, cr0, cr13, {1}
    a03c:	0000000a 	andeq	r0, r0, sl
    a040:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a044:	73253a43 	teqvc	r5, #274432	; 0x43000
    a048:	3a73253a 	bcc	1cd3538 <__bss_end__+0x1cc8a90>
    a04c:	743a6425 	ldrtvc	r6, [sl], #-1061	; 0x425
    a050:	61657268 	cmnvs	r5, r8, ror #4
    a054:	75735f64 	ldrbvc	r5, [r3, #-3940]!	; 0xf64
    a058:	3d3d206d 	ldccc	0, cr2, [sp, #-436]!	; 0xfffffe4c
    a05c:	6d757320 	ldclvs	3, cr7, [r5, #-128]!	; 0xffffff80
    a060:	0000000a 	andeq	r0, r0, sl
    a064:	43435553 	movtmi	r5, #13651	; 0x3553
    a068:	21535345 	cmpcs	r3, r5, asr #6
    a06c:	0000000a 	andeq	r0, r0, sl

0000a070 <__FUNCTION__.4263>:
    a070:	74696d65 	strbtvc	r6, [r9], #-3429	; 0xd65
    a074:	00000000 	andeq	r0, r0, r0

0000a078 <__FUNCTION__.4211>:
    a078:	5f697072 	svcpl	0x00697072
    a07c:	5f746573 	svcpl	0x00746573
    a080:	7074756f 	rsbsvc	r7, r4, pc, ror #10
    a084:	00007475 	andeq	r7, r0, r5, ror r4

0000a088 <__FUNCTION__.4285>:
    a088:	705f6176 	subsvc	r6, pc, r6, ror r1	; <UNPREDICTABLE>
    a08c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    a090:	0000006b 	andeq	r0, r0, fp, rrx
    a094:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a098:	73253a43 	teqvc	r5, #274432	; 0x43000
    a09c:	3a73253a 	bcc	1cd358c <__bss_end__+0x1cc8ae4>
    a0a0:	303a6425 	eorscc	r6, sl, r5, lsr #8
    a0a4:	0000000a 	andeq	r0, r0, sl
    a0a8:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    a0ac:	2d61762f 	stclcs	6, cr7, [r1, #-188]!	; 0xffffff44
    a0b0:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    a0b4:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
    a0b8:	00000000 	andeq	r0, r0, r0
    a0bc:	33323130 	teqcc	r2, #48, 2
    a0c0:	37363534 			; <UNDEFINED> instruction: 0x37363534
    a0c4:	00003938 	andeq	r3, r0, r8, lsr r9
    a0c8:	33323130 	teqcc	r2, #48, 2
    a0cc:	37363534 			; <UNDEFINED> instruction: 0x37363534
    a0d0:	62613938 	rsbvs	r3, r1, #56, 18	; 0xe0000
    a0d4:	66656463 	strbtvs	r6, [r5], -r3, ror #8
    a0d8:	00000000 	andeq	r0, r0, r0
    a0dc:	00003130 	andeq	r3, r0, r0, lsr r1
    a0e0:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a0e4:	73253a43 	teqvc	r5, #274432	; 0x43000
    a0e8:	3a73253a 	bcc	1cd35d8 <__bss_end__+0x1cc8b30>
    a0ec:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    a0f0:	5f637475 	svcpl	0x00637475
    a0f4:	000a7066 	andeq	r7, sl, r6, rrx
    a0f8:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a0fc:	73253a43 	teqvc	r5, #274432	; 0x43000
    a100:	3a73253a 	bcc	1cd35f0 <__bss_end__+0x1cc8b48>
    a104:	773a6425 	ldrvc	r6, [sl, -r5, lsr #8]!
    a108:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
    a10c:	33203c20 	teqcc	r0, #32, 24	; 0x2000
    a110:	00000a32 	andeq	r0, r0, r2, lsr sl
    a114:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a118:	73253a43 	teqvc	r5, #274432	; 0x43000
    a11c:	3a73253a 	bcc	1cd360c <__bss_end__+0x1cc8b64>
    a120:	663a6425 	ldrtvs	r6, [sl], -r5, lsr #8
    a124:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xf6c
    a128:	746f6e20 	strbtvc	r6, [pc], #-3616	; a130 <__FUNCTION__.4285+0xa8>
    a12c:	616e6520 	cmnvs	lr, r0, lsr #10
    a130:	64656c62 	strbtvs	r6, [r5], #-3170	; 0xc62
    a134:	0a212121 	beq	8525c0 <__bss_end__+0x847b18>
    a138:	00000000 	andeq	r0, r0, r0
    a13c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a140:	73253a43 	teqvc	r5, #274432	; 0x43000
    a144:	3a73253a 	bcc	1cd3634 <__bss_end__+0x1cc8b8c>
    a148:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    a14c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    a150:	6e203a6b 	vnmulvs.f32	s6, s0, s23
    a154:	6820746f 	stmdavs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
    a158:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    a15c:	20676e69 	rsbcs	r6, r7, r9, ror #28
    a160:	63657073 	cmnvs	r5, #115	; 0x73
    a164:	65696669 	strbvs	r6, [r9, #-1641]!	; 0x669
    a168:	25272072 	strcs	r2, [r7, #-114]!	; 0x72
    a16c:	0a0a2763 	beq	293f00 <__bss_end__+0x289458>
    a170:	00000000 	andeq	r0, r0, r0
    a174:	454e4f44 	strbmi	r4, [lr, #-3908]	; 0xf44
    a178:	0a212121 	beq	852604 <__bss_end__+0x847b5c>
    a17c:	00000000 	andeq	r0, r0, r0
    a180:	756f6261 	strbvc	r6, [pc, #-609]!	; 9f27 <GPREN0+0x3>
    a184:	6f742074 	svcvs	0x00742074
    a188:	69727020 	ldmdbvs	r2!, {r5, ip, sp, lr}^
    a18c:	6f20746e 	svcvs	0x0020746e
    a190:	6572206e 	ldrbvs	r2, [r2, #-110]!	; 0x6e
    a194:	616c7567 	cmnvs	ip, r7, ror #10
    a198:	72702072 	rsbsvc	r2, r0, #114	; 0x72
    a19c:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
    a1a0:	0000000a 	andeq	r0, r0, sl
    a1a4:	63637573 	cmnvs	r3, #482344960	; 0x1cc00000
    a1a8:	21737365 	cmncs	r3, r5, ror #6
    a1ac:	0000000a 	andeq	r0, r0, sl

0000a1b0 <__FUNCTION__.4207>:
    a1b0:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    a1b4:	00636f6c 	rsbeq	r6, r3, ip, ror #30

0000a1b8 <__FUNCTION__.4214>:
    a1b8:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    a1bc:	5f636f6c 	svcpl	0x00636f6c
    a1c0:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    a1c4:	0064656e 	rsbeq	r6, r4, lr, ror #10

0000a1c8 <__FUNCTION__.4219>:
    a1c8:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    a1cc:	5f636f6c 	svcpl	0x00636f6c
    a1d0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    a1d4:	00000000 	andeq	r0, r0, r0

0000a1d8 <__FUNCTION__.4229>:
    a1d8:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    a1dc:	5f636f6c 	svcpl	0x00636f6c
    a1e0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    a1e4:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
    a1e8:	6174735f 	cmnvs	r4, pc, asr r3
    a1ec:	00007472 	andeq	r7, r0, r2, ror r4
    a1f0:	4f525245 	svcmi	0x00525245
    a1f4:	73253a52 	teqvc	r5, #335872	; 0x52000
    a1f8:	3a73253a 	bcc	1cd36e8 <__bss_end__+0x1cc8c40>
    a1fc:	203a6425 	eorscs	r6, sl, r5, lsr #8
    a200:	534c4146 	movtpl	r4, #49478	; 0xc146
    a204:	693c2845 	ldmdbvs	ip!, {r0, r2, r6, fp, sp}
    a208:	5f74696e 	svcpl	0x0074696e
    a20c:	3a293e70 	bcc	a59bd4 <__bss_end__+0xa4f12c>
    a210:	6c616320 	stclvs	3, cr6, [r1], #-128	; 0xffffff80
    a214:	676e696c 	strbvs	r6, [lr, -ip, ror #18]!
    a218:	66656220 	strbtvs	r6, [r5], -r0, lsr #4
    a21c:	2065726f 	rsbcs	r7, r5, pc, ror #4
    a220:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    a224:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    a228:	0a64657a 	beq	1923818 <__bss_end__+0x1918d70>
    a22c:	00000000 	andeq	r0, r0, r0
    a230:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
    a234:	6b2f6372 	blvs	be3004 <__bss_end__+0xbd855c>
    a238:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    a23c:	632e636f 	teqvs	lr, #-1140850687	; 0xbc000001
    a240:	00000000 	andeq	r0, r0, r0
    a244:	4f525245 	svcmi	0x00525245
    a248:	73253a52 	teqvc	r5, #335872	; 0x52000
    a24c:	3a73253a 	bcc	1cd373c <__bss_end__+0x1cc8c94>
    a250:	203a6425 	eorscs	r6, sl, r5, lsr #8
    a254:	534c4146 	movtpl	r4, #49478	; 0xc146
    a258:	613c2845 	teqvs	ip, r5, asr #16
    a25c:	6e67696c 	cdpvs	9, 6, cr6, cr7, cr12, {3}
    a260:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
    a264:	38202520 	stmdacc	r0!, {r5, r8, sl, sp}
    a268:	203d3d20 	eorscs	r3, sp, r0, lsr #26
    a26c:	3a293e30 	bcc	a59b34 <__bss_end__+0xa4f08c>
    a270:	65772220 	ldrbvs	r2, [r7, #-544]!	; 0x220
    a274:	20647269 	rsbcs	r7, r4, r9, ror #4
    a278:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    a27c:	6e656d6e 	cdpvs	13, 6, cr6, cr5, cr14, {3}
    a280:	6e203a74 	mcrvs	10, 1, r3, cr0, cr4, {3}
    a284:	6120746f 	teqvs	r0, pc, ror #8
    a288:	6c756d20 	ldclvs	13, cr6, [r5], #-128	; 0xffffff80
    a28c:	6c706974 	ldclvs	9, cr6, [r0], #-464	; 0xfffffe30
    a290:	666f2065 	strbtvs	r2, [pc], -r5, rrx
    a294:	22213420 	eorcs	r3, r1, #32, 8	; 0x20000000
    a298:	0000000a 	andeq	r0, r0, sl
    a29c:	4f525245 	svcmi	0x00525245
    a2a0:	73253a52 	teqvc	r5, #335872	; 0x52000
    a2a4:	3a73253a 	bcc	1cd3794 <__bss_end__+0x1cc8cec>
    a2a8:	203a6425 	eorscs	r6, sl, r5, lsr #8
    a2ac:	534c4146 	movtpl	r4, #49478	; 0xc146
    a2b0:	213c2845 	teqcs	ip, r5, asr #16
    a2b4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    a2b8:	293e705f 	ldmdbcs	lr!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}
    a2bc:	6163203a 	cmnvs	r3, sl, lsr r0
    a2c0:	746f6e6e 	strbtvc	r6, [pc], #-3694	; a2c8 <__FUNCTION__.4229+0xf0>
    a2c4:	696e6920 	stmdbvs	lr!, {r5, r8, fp, sp, lr}^
    a2c8:	6c616974 	stclvs	9, cr6, [r1], #-464	; 0xfffffe30
    a2cc:	20657a69 	rsbcs	r7, r5, r9, ror #20
    a2d0:	63697774 	cmnvs	r9, #116, 14	; 0x1d00000
    a2d4:	0a0a2165 	beq	292870 <__bss_end__+0x287dc8>
    a2d8:	00000000 	andeq	r0, r0, r0

0000a2dc <__FUNCTION__.4218>:
    a2dc:	6d655f51 	stclvs	15, cr5, [r5, #-324]!	; 0xfffffebc
    a2e0:	00797470 	rsbseq	r7, r9, r0, ror r4

0000a2e4 <__FUNCTION__.4222>:
    a2e4:	6f705f51 	svcvs	0x00705f51
    a2e8:	00000070 	andeq	r0, r0, r0, ror r0

0000a2ec <__FUNCTION__.4250>:
    a2ec:	615f6874 	cmpvs	pc, r4, ror r8	; <UNPREDICTABLE>
    a2f0:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    a2f4:	00000000 	andeq	r0, r0, r0

0000a2f8 <__FUNCTION__.4284>:
    a2f8:	5f697072 	svcpl	0x00697072
    a2fc:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    a300:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    a304:	6568635f 	strbvs	r6, [r8, #-863]!	; 0x35f
    a308:	00006b63 	andeq	r6, r0, r3, ror #22

0000a30c <__FUNCTION__.4288>:
    a30c:	5f697072 	svcpl	0x00697072
    a310:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    a314:	68635f6b 	stmdavs	r3!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    a318:	006b6365 	rsbeq	r6, fp, r5, ror #6

0000a31c <__FUNCTION__.4292>:
    a31c:	5f697072 	svcpl	0x00697072
    a320:	6e696f6a 	cdpvs	15, 6, cr6, cr9, cr10, {3}
    a324:	00000000 	andeq	r0, r0, r0

0000a328 <__FUNCTION__.4296>:
    a328:	5f697072 	svcpl	0x00697072
    a32c:	63617865 	cmnvs	r1, #6619136	; 0x650000
    a330:	6c735f74 	ldclvs	15, cr5, [r3], #-464	; 0xfffffe30
    a334:	00706565 	rsbseq	r6, r0, r5, ror #10
    a338:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a33c:	73253a43 	teqvc	r5, #274432	; 0x43000
    a340:	3a73253a 	bcc	1cd3830 <__bss_end__+0x1cc8d88>
    a344:	513a6425 	teqpl	sl, r5, lsr #8
    a348:	6c656e5f 	stclvs	14, cr6, [r5], #-380	; 0xfffffe84
    a34c:	71286d65 	teqvc	r8, r5, ror #26
    a350:	3d3d2029 	ldccc	0, cr2, [sp, #-164]!	; 0xffffff5c
    a354:	000a3020 	andeq	r3, sl, r0, lsr #32
    a358:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
    a35c:	512f6372 	teqpl	pc, r2, ror r3	; <UNPREDICTABLE>
    a360:	0000682e 	andeq	r6, r0, lr, lsr #16
    a364:	4f525245 	svcmi	0x00525245
    a368:	73253a52 	teqvc	r5, #335872	; 0x52000
    a36c:	3a73253a 	bcc	1cd385c <__bss_end__+0x1cc8db4>
    a370:	203a6425 	eorscs	r6, sl, r5, lsr #8
    a374:	534c4146 	movtpl	r4, #49478	; 0xc146
    a378:	213c2845 	teqcs	ip, r5, asr #16
    a37c:	743e2d71 	ldrtvc	r2, [lr], #-3441	; 0xd71
    a380:	3e6c6961 	cdpcc	9, 6, cr6, cr12, cr1, {3}
    a384:	69203a29 	stmdbvs	r0!, {r0, r3, r5, r9, fp, ip, sp}
    a388:	6c61766e 	stclvs	6, cr7, [r1], #-440	; 0xfffffe48
    a38c:	51206469 	teqpl	r0, r9, ror #8
    a390:	0000000a 	andeq	r0, r0, sl
    a394:	4f525245 	svcmi	0x00525245
    a398:	73253a52 	teqvc	r5, #335872	; 0x52000
    a39c:	3a73253a 	bcc	1cd388c <__bss_end__+0x1cc8de4>
    a3a0:	203a6425 	eorscs	r6, sl, r5, lsr #8
    a3a4:	534c4146 	movtpl	r4, #49478	; 0xc146
    a3a8:	713c2845 	teqvc	ip, r5, asr #16
    a3ac:	203a293e 	eorscs	r2, sl, lr, lsr r9
    a3b0:	20646162 	rsbcs	r6, r4, r2, ror #2
    a3b4:	75706e69 	ldrbvc	r6, [r0, #-3689]!	; 0xe69
    a3b8:	00000a74 	andeq	r0, r0, r4, ror sl
    a3bc:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a3c0:	73253a43 	teqvc	r5, #274432	; 0x43000
    a3c4:	3a73253a 	bcc	1cd38b4 <__bss_end__+0x1cc8e0c>
    a3c8:	513a6425 	teqpl	sl, r5, lsr #8
    a3cc:	706d655f 	rsbvc	r6, sp, pc, asr r5
    a3d0:	71287974 	teqvc	r8, r4, ror r9
    a3d4:	00000a29 	andeq	r0, r0, r9, lsr #20
    a3d8:	4f525245 	svcmi	0x00525245
    a3dc:	73253a52 	teqvc	r5, #335872	; 0x52000
    a3e0:	3a73253a 	bcc	1cd38d0 <__bss_end__+0x1cc8e28>
    a3e4:	203a6425 	eorscs	r6, sl, r5, lsr #8
    a3e8:	534c4146 	movtpl	r4, #49478	; 0xc146
    a3ec:	283c2845 	ldmdacs	ip!, {r0, r2, r6, fp, sp}
    a3f0:	6e752828 	cdpvs	8, 7, cr2, cr5, cr8, {1}
    a3f4:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
    a3f8:	28296465 	stmdacs	r9!, {r0, r2, r5, r6, sl, sp, lr}
    a3fc:	3e2d7426 	cdpcc	4, 2, cr7, cr13, cr6, {1}
    a400:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    a404:	5d305b6b 	fldmdbxpl	r0!, {d5-d57}	;@ Deprecated
    a408:	28252929 	stmdacs	r5!, {r0, r3, r5, r8, fp, sp}
    a40c:	3d202938 	stccc	9, cr2, [r0, #-224]!	; 0xffffff20
    a410:	2930203d 	ldmdbcs	r0!, {r0, r2, r3, r4, r5, sp}
    a414:	203a293e 	eorscs	r2, sl, lr, lsr r9
    a418:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    a41c:	756d206b 	strbvc	r2, [sp, #-107]!	; 0x6b
    a420:	62207473 	eorvs	r7, r0, #1929379840	; 0x73000000
    a424:	2d382065 	ldccs	0, cr2, [r8, #-404]!	; 0xfffffe6c
    a428:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
    a42c:	696c6120 	stmdbvs	ip!, {r5, r8, sp, lr}^
    a430:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
    a434:	00000a21 	andeq	r0, r0, r1, lsr #20
    a438:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
    a43c:	722f6372 	eorvc	r6, pc, #-939524095	; 0xc8000001
    a440:	742d6970 	strtvc	r6, [sp], #-2416	; 0x970
    a444:	61657268 	cmnvs	r5, r8, ror #4
    a448:	00632e64 	rsbeq	r2, r3, r4, ror #28
    a44c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a450:	73253a43 	teqvc	r5, #274432	; 0x43000
    a454:	3a73253a 	bcc	1cd3944 <__bss_end__+0x1cc8e9c>
    a458:	733a6425 	teqvc	sl, #620756992	; 0x25000000
    a45c:	61726f74 	cmnvs	r2, r4, ror pc
    a460:	6c206567 	cfstr32vs	mvfx6, [r0], #-412	; 0xfffffe64
    a464:	3a6b6165 	bcc	1ae2a00 <__bss_end__+0x1ad7f58>
    a468:	6f687320 	svcvs	0x00687320
    a46c:	20646c75 	rsbcs	r6, r4, r5, ror ip
    a470:	65766168 	ldrbvs	r6, [r6, #-360]!	; 0x168
    a474:	20642520 	rsbcs	r2, r4, r0, lsr #10
    a478:	65657266 	strbvs	r7, [r5, #-614]!	; 0x266
    a47c:	6f6c6220 	svcvs	0x006c6220
    a480:	2c736b63 	ldclcs	11, cr6, [r3], #-396	; 0xfffffe74
    a484:	76616820 	strbtvc	r6, [r1], -r0, lsr #16
    a488:	64252065 	strtvs	r2, [r5], #-101	; 0x65
    a48c:	75722820 	ldrbvc	r2, [r2, #-2080]!	; 0x820
    a490:	253d716e 	ldrcs	r7, [sp, #-366]!	; 0x16e
    a494:	66202c64 	strtvs	r2, [r0], -r4, ror #24
    a498:	71656572 	smcvc	22098	; 0x5652
    a49c:	2964253d 	stmdbcs	r4!, {r0, r2, r3, r4, r5, r8, sl, sp}^
    a4a0:	00000a0a 	andeq	r0, r0, sl, lsl #20
    a4a4:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
    a4a8:	203a6461 	eorscs	r6, sl, r1, ror #8
    a4ac:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    a4b0:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    a4b4:	65686320 	strbvs	r6, [r8, #-800]!	; 0x320
    a4b8:	70206b63 	eorvc	r6, r0, r3, ror #22
    a4bc:	65737361 	ldrbvs	r7, [r3, #-865]!	; 0x361
    a4c0:	00000a64 	andeq	r0, r0, r4, ror #20
    a4c4:	74697072 	strbtvc	r7, [r9], #-114	; 0x72
    a4c8:	61657268 	cmnvs	r5, r8, ror #4
    a4cc:	203a7364 	eorscs	r7, sl, r4, ror #6
    a4d0:	656e6f64 	strbvs	r6, [lr, #-3940]!	; 0xf64
    a4d4:	74697720 	strbtvc	r7, [r9], #-1824	; 0x720
    a4d8:	6c612068 	stclvs	0, cr2, [r1], #-416	; 0xfffffe60
    a4dc:	6874206c 	ldmdavs	r4!, {r2, r3, r5, r6, sp}^
    a4e0:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
    a4e4:	72202173 	eorvc	r2, r0, #-1073741796	; 0xc000001c
    a4e8:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
    a4ec:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
    a4f0:	0000000a 	andeq	r0, r0, sl
    a4f4:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a4f8:	73253a43 	teqvc	r5, #274432	; 0x43000
    a4fc:	3a73253a 	bcc	1cd39ec <__bss_end__+0x1cc8f44>
    a500:	693a6425 	ldmdbvs	sl!, {r0, r2, r5, sl, sp, lr}
    a504:	656c706d 	strbvs	r7, [ip, #-109]!	; 0x6d
    a508:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
    a50c:	69687420 	stmdbvs	r8!, {r5, sl, ip, sp, lr}^
    a510:	75662073 	strbvc	r2, [r6, #-115]!	; 0x73
    a514:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    a518:	0a216e6f 	beq	865edc <__bss_end__+0x85b434>
    a51c:	0000000a 	andeq	r0, r0, sl

0000a520 <__FUNCTION__.4312>:
    a520:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 9db5 <gpio_event_detected+0x51>
    a524:	5f747261 	svcpl	0x00747261
    a528:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
    a52c:	746e755f 	strbtvc	r7, [lr], #-1375	; 0x55f
    a530:	00006c69 	andeq	r6, r0, r9, ror #24

0000a534 <__FUNCTION__.4324>:
    a534:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 9dc9 <gpio_event_detected+0x65>
    a538:	5f747261 	svcpl	0x00747261
    a53c:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
    a540:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    a544:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
    a548:	00000000 	andeq	r0, r0, r0

0000a54c <__FUNCTION__.4338>:
    a54c:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 9de1 <gpio_event_detected+0x7d>
    a550:	5f747261 	svcpl	0x00747261
    a554:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    a558:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
    a55c:	00726570 	rsbseq	r6, r2, r0, ror r5

0000a560 <__FUNCTION__.4344>:
    a560:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 9df5 <gpio_event_clear+0xd>
    a564:	5f747261 	svcpl	0x00747261
    a568:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
    a56c:	00000000 	andeq	r0, r0, r0

0000a570 <__FUNCTION__.4366>:
    a570:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 9e05 <gpio_event_clear+0x1d>
    a574:	5f747261 	svcpl	0x00747261
    a578:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    a57c:	00006b74 	andeq	r6, r0, r4, ror fp

0000a580 <__FUNCTION__.4374>:
    a580:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 9e15 <gpio_event_clear+0x2d>
    a584:	5f747261 	svcpl	0x00747261
    a588:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
    a58c:	746e755f 	strbtvc	r7, [lr], #-1375	; 0x55f
    a590:	625f6c69 	subsvs	r6, pc, #26880	; 0x6900
    a594:	00006b6c 	andeq	r6, r0, ip, ror #22
    a598:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a59c:	73253a43 	teqvc	r5, #274432	; 0x43000
    a5a0:	3a73253a 	bcc	1cd3a90 <__bss_end__+0x1cc8fe8>
    a5a4:	6e3a6425 	cdpvs	4, 3, cr6, cr10, cr5, {1}
    a5a8:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
    a5ac:	0a303e73 	beq	c19f80 <__bss_end__+0xc0f4d8>
    a5b0:	00000000 	andeq	r0, r0, r0
    a5b4:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
    a5b8:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    a5bc:	61752d77 	cmnvs	r5, r7, ror sp
    a5c0:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
    a5c4:	00000000 	andeq	r0, r0, r0
    a5c8:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a5cc:	73253a43 	teqvc	r5, #274432	; 0x43000
    a5d0:	3a73253a 	bcc	1cd3ac0 <__bss_end__+0x1cc9018>
    a5d4:	283a6425 	ldmdacs	sl!, {r0, r2, r5, sl, sp, lr}
    a5d8:	207a686d 	rsbscs	r6, sl, sp, ror #16
    a5dc:	6162202d 	cmnvs	r2, sp, lsr #32
    a5e0:	20296475 	eorcs	r6, r9, r5, ror r4
    a5e4:	64203d3c 	strtvs	r3, [r0], #-3388	; 0xd3c
    a5e8:	76697265 	strbtvc	r7, [r9], -r5, ror #4
    a5ec:	26206465 	strtcs	r6, [r0], -r5, ror #8
    a5f0:	65642026 	strbvs	r2, [r4, #-38]!	; 0x26
    a5f4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    a5f8:	3d3c2064 	ldccc	0, cr2, [ip, #-400]!	; 0xfffffe70
    a5fc:	686d2820 	stmdavs	sp!, {r5, fp, sp}^
    a600:	202b207a 	eorcs	r2, fp, sl, ror r0
    a604:	64756162 	ldrbtvs	r6, [r5], #-354	; 0x162
    a608:	00000a29 	andeq	r0, r0, r9, lsr #20
    a60c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a610:	73253a43 	teqvc	r5, #274432	; 0x43000
    a614:	3a73253a 	bcc	1cd3b04 <__bss_end__+0x1cc905c>
    a618:	693a6425 	ldmdbvs	sl!, {r0, r2, r5, sl, sp, lr}
    a61c:	736f706d 	cmnvc	pc, #109	; 0x6d
    a620:	6c626973 	stclvs	9, cr6, [r2], #-460	; 0xfffffe34
    a624:	68203a65 	stmdavs	r0!, {r0, r2, r5, r6, r9, fp, ip, sp}
    a628:	20657661 	rsbcs	r7, r5, r1, ror #12
    a62c:	69206e61 	stmdbvs	r0!, {r0, r5, r6, r9, sl, fp, sp, lr}
    a630:	6e69666e 	cdpvs	6, 6, cr6, cr9, cr14, {3}
    a634:	20657469 	rsbcs	r7, r5, r9, ror #8
    a638:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    a63c:	2174756f 	cmncs	r4, pc, ror #10
    a640:	00000a0a 	andeq	r0, r0, sl, lsl #20
    a644:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a648:	73253a43 	teqvc	r5, #274432	; 0x43000
    a64c:	3a73253a 	bcc	1cd3b3c <__bss_end__+0x1cc9094>
    a650:	733a6425 	teqvc	sl, #620756992	; 0x25000000
    a654:	203c207a 	eorscs	r2, ip, sl, ror r0
    a658:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
    a65c:	6220666f 	eorvs	r6, r0, #116391936	; 0x6f00000
    a660:	312d6675 	teqcc	sp, r5, ror r6
    a664:	0000000a 	andeq	r0, r0, sl

Disassembly of section .bss:

0000a668 <__bss_start__>:
    a668:	00000000 	andeq	r0, r0, r0

0000a66c <thread_sum>:
    a66c:	00000000 	andeq	r0, r0, r0

0000a670 <buf.4211>:
	...

0000aa70 <console_uart>:
	...

0000aa7c <init_p>:
    aa7c:	00000000 	andeq	r0, r0, r0

0000aa80 <heap_ptr>:
    aa80:	00000000 	andeq	r0, r0, r0

0000aa84 <freeq>:
	...

0000aa90 <nalloced>:
    aa90:	00000000 	andeq	r0, r0, r0

0000aa94 <cur_thread>:
    aa94:	00000000 	andeq	r0, r0, r0

0000aa98 <runq>:
	...

0000aaa4 <scheduler_thread>:
    aaa4:	00000000 	andeq	r0, r0, r0

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4b5a3605 	blmi	168d82c <__bss_end__+0x1682d84>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	12010901 	andne	r0, r1, #16384	; 0x4000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0x404
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	22011a01 	andcs	r1, r1, #4096	; 0x1000
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__bss_end__+0x10c627c>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	34202955 	strtcc	r2, [r0], #-2389	; 0x955
   c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000047a 	andeq	r0, r0, sl, ror r4
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	0000000b 	andeq	r0, r0, fp
      10:	00012401 	andeq	r2, r1, r1, lsl #8
      14:	0000ab00 	andeq	sl, r0, r0, lsl #22
      18:	00801000 	addeq	r1, r0, r0
      1c:	0001b000 	andeq	fp, r1, r0
      20:	00000000 	andeq	r0, r0, r0
      24:	05040200 	streq	r0, [r4, #-512]	; 0x200
      28:	00746e69 	rsbseq	r6, r4, r9, ror #28
      2c:	7b070403 	blvc	1c1040 <__bss_end__+0x1b6598>
      30:	03000001 	movweq	r0, #1
      34:	00760601 	rsbseq	r0, r6, r1, lsl #12
      38:	02030000 	andeq	r0, r3, #0
      3c:	0001cc05 	andeq	ip, r1, r5, lsl #24
      40:	05040300 	streq	r0, [r4, #-768]	; 0x300
      44:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
      48:	b3050803 	movwlt	r0, #22531	; 0x5803
      4c:	03000001 	movweq	r0, #1
      50:	00740801 	rsbseq	r0, r4, r1, lsl #16
      54:	02030000 	andeq	r0, r3, #0
      58:	00009807 	andeq	r9, r0, r7, lsl #16
      5c:	01d60400 	bicseq	r0, r6, r0, lsl #8
      60:	34030000 	strcc	r0, [r3], #-0
      64:	00000068 	andeq	r0, r0, r8, rrx
      68:	76070403 	strvc	r0, [r7], -r3, lsl #8
      6c:	03000001 	movweq	r0, #1
      70:	01710708 	cmneq	r1, r8, lsl #14
      74:	04030000 	streq	r0, [r3], #-0
      78:	0001aa07 	andeq	sl, r1, r7, lsl #20
      7c:	03040500 	movweq	r0, #17664	; 0x4500
      80:	007d0801 	rsbseq	r0, sp, r1, lsl #16
      84:	04060000 	streq	r0, [r6], #-0
      88:	0000008c 	andeq	r0, r0, ip, lsl #1
      8c:	00007f07 	andeq	r7, r0, r7, lsl #30
      90:	007f0800 	rsbseq	r0, pc, r0, lsl #16
      94:	00a10000 	adceq	r0, r1, r0
      98:	76090000 	strvc	r0, [r9], -r0
      9c:	07000000 	streq	r0, [r0, -r0]
      a0:	01c10a00 	biceq	r0, r1, r0, lsl #20
      a4:	20500000 	subscs	r0, r0, r0
      a8:	00f6dd02 	rscseq	sp, r6, r2, lsl #26
      ac:	630b0000 	movwvs	r0, #45056	; 0xb000
      b0:	02000001 	andeq	r0, r0, #1
      b4:	0000f6df 	ldrdeq	pc, [r0], -pc	; <UNPREDICTABLE>
      b8:	000b0000 	andeq	r0, fp, r0
      bc:	02000000 	andeq	r0, r0, #0
      c0:	000106e1 	andeq	r0, r1, r1, ror #13
      c4:	740c4000 	strvc	r4, [ip], #-0
      c8:	02006469 	andeq	r6, r0, #1761607680	; 0x69000000
      cc:	00005de2 	andeq	r5, r0, r2, ror #27
      d0:	660c4400 	strvs	r4, [ip], -r0, lsl #8
      d4:	e402006e 	str	r0, [r2], #-110	; 0x6e
      d8:	00000117 	andeq	r0, r0, r7, lsl r1
      dc:	72610c48 	rsbvc	r0, r1, #72, 24	; 0x4800
      e0:	e5020067 	str	r0, [r2, #-103]	; 0x67
      e4:	0000007d 	andeq	r0, r0, sp, ror r0
      e8:	00050b4c 	andeq	r0, r5, ip, asr #22
      ec:	e7020000 	str	r0, [r2, -r0]
      f0:	0000011d 	andeq	r0, r0, sp, lsl r1
      f4:	5d080050 	stcpl	0, cr0, [r8, #-320]	; 0xfffffec0
      f8:	06000000 	streq	r0, [r0], -r0
      fc:	09000001 	stmdbeq	r0, {r0}
     100:	00000076 	andeq	r0, r0, r6, ror r0
     104:	0406000f 	streq	r0, [r6], #-15
     108:	000000a1 	andeq	r0, r0, r1, lsr #1
     10c:	0001170d 	andeq	r1, r1, sp, lsl #14
     110:	007d0e00 	rsbseq	r0, sp, r0, lsl #28
     114:	06000000 	streq	r0, [r0], -r0
     118:	00010c04 	andeq	r0, r1, r4, lsl #24
     11c:	005d0800 	subseq	r0, sp, r0, lsl #16
     120:	012e0000 	teqeq	lr, r0
     124:	760f0000 	strvc	r0, [pc], -r0
     128:	ff000000 			; <UNDEFINED> instruction: 0xff000000
     12c:	88040007 	stmdahi	r4, {r0, r1, r2}
     130:	02000001 	andeq	r0, r0, #1
     134:	0000a1e8 	andeq	sl, r0, r8, ror #3
     138:	01341000 	teqeq	r4, r0
     13c:	13010000 	movwne	r0, #4096	; 0x1000
     140:	00008010 	andeq	r8, r0, r0, lsl r0
     144:	000000b8 	strheq	r0, [r0], -r8
     148:	02299c01 	eoreq	r9, r9, #256	; 0x100
     14c:	61110000 	tstvs	r1, r0
     150:	01006772 	tsteq	r0, r2, ror r7
     154:	00007d13 	andeq	r7, r0, r3, lsl sp
     158:	00000000 	andeq	r0, r0, r0
     15c:	00781200 	rsbseq	r1, r8, r0, lsl #4
     160:	02291401 	eoreq	r1, r9, #16777216	; 0x1000000
     164:	002c0000 	eoreq	r0, ip, r0
     168:	74120000 	ldrvc	r0, [r2], #-0
     16c:	01006469 	tsteq	r0, r9, ror #8
     170:	00002c17 	andeq	r2, r0, r7, lsl ip
     174:	00005800 	andeq	r5, r0, r0, lsl #16
     178:	01401300 	mrseq	r1, SPSR_irq
     17c:	023f0000 	eorseq	r0, pc, #0
     180:	03050000 	movweq	r0, #20480	; 0x5000
     184:	00009f50 	andeq	r9, r0, r0, asr pc
     188:	00802014 	addeq	r2, r0, r4, lsl r0
     18c:	0003ec00 	andeq	lr, r3, r0, lsl #24
     190:	80341500 	eorshi	r1, r4, r0, lsl #10
     194:	03fd0000 	mvnseq	r0, #0
     198:	01ae0000 			; <UNDEFINED> instruction: 0x01ae0000
     19c:	01160000 	tsteq	r6, r0
     1a0:	00740251 	rsbseq	r0, r4, r1, asr r2
     1a4:	05500116 	ldrbeq	r0, [r0, #-278]	; 0x116
     1a8:	009f6403 	addseq	r6, pc, r3, lsl #8
     1ac:	38140000 	ldmdacc	r4, {}	; <UNPREDICTABLE>
     1b0:	ec000080 	stc	0, cr0, [r0], {128}	; 0x80
     1b4:	14000003 	strne	r0, [r0], #-3
     1b8:	00008050 	andeq	r8, r0, r0, asr r0
     1bc:	00000413 	andeq	r0, r0, r3, lsl r4
     1c0:	00807415 	addeq	r7, r0, r5, lsl r4
     1c4:	0003fd00 	andeq	pc, r3, r0, lsl #26
     1c8:	0001f500 	andeq	pc, r1, r0, lsl #10
     1cc:	53011600 	movwpl	r1, #5632	; 0x1600
     1d0:	01164a01 	tsteq	r6, r1, lsl #20
     1d4:	50030552 	andpl	r0, r3, r2, asr r5
     1d8:	1600009f 			; <UNDEFINED> instruction: 0x1600009f
     1dc:	03055101 	movweq	r5, #20737	; 0x5101
     1e0:	00009fd0 	ldrdeq	r9, [r0], -r0
     1e4:	05500116 	ldrbeq	r0, [r0, #-278]	; 0x116
     1e8:	009f7c03 	addseq	r7, pc, r3, lsl #24
     1ec:	7d021600 	stcvc	6, cr1, [r2, #-0]
     1f0:	00740200 	rsbseq	r0, r4, r0, lsl #4
     1f4:	80781400 	rsbshi	r1, r8, r0, lsl #8
     1f8:	041a0000 	ldreq	r0, [sl], #-0
     1fc:	7c140000 	ldcvc	0, cr0, [r4], {-0}
     200:	21000080 	smlabbcs	r0, r0, r0, r0
     204:	14000004 	strne	r0, [r0], #-4
     208:	00008090 	muleq	r0, r0, r0
     20c:	00000421 	andeq	r0, r0, r1, lsr #8
     210:	0080a414 	addeq	sl, r0, r4, lsl r4
     214:	00042100 	andeq	r2, r4, r0, lsl #2
     218:	80ac1700 	adchi	r1, ip, r0, lsl #14
     21c:	04280000 	strteq	r0, [r8], #-0
     220:	01160000 	tsteq	r6, r0
     224:	00300150 	eorseq	r0, r0, r0, asr r1
     228:	2c040600 	stccs	6, cr0, [r4], {-0}
     22c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     230:	0000007f 	andeq	r0, r0, pc, ror r0
     234:	0000023f 	andeq	r0, r0, pc, lsr r2
     238:	00007609 	andeq	r7, r0, r9, lsl #12
     23c:	07000b00 	streq	r0, [r0, -r0, lsl #22]
     240:	0000022f 	andeq	r0, r0, pc, lsr #4
     244:	00006218 	andeq	r6, r0, r8, lsl r2
     248:	c8260100 	stmdagt	r6!, {r8}
     24c:	f8000080 			; <UNDEFINED> instruction: 0xf8000080
     250:	01000000 	mrseq	r0, (UNDEF: 0)
     254:	0003bf9c 	muleq	r3, ip, pc	; <UNPREDICTABLE>
     258:	006e1900 	rsbeq	r1, lr, r0, lsl #18
     25c:	00252d01 	eoreq	r2, r5, r1, lsl #26
     260:	121e0000 	andsne	r0, lr, #0
     264:	006d7573 	rsbeq	r7, sp, r3, ror r5
     268:	002c3001 	eoreq	r3, ip, r1
     26c:	006b0000 	rsbeq	r0, fp, r0
     270:	40130000 	andsmi	r0, r3, r0
     274:	bf000001 	svclt	0x00000001
     278:	05000003 	streq	r0, [r0, #-3]
     27c:	009f5c03 	addseq	r5, pc, r3, lsl #24
     280:	80ec1a00 	rschi	r1, ip, r0, lsl #20
     284:	00380000 	eorseq	r0, r8, r0
     288:	02d30000 	sbcseq	r0, r3, #0
     28c:	69120000 	ldmdbvs	r2, {}	; <UNPREDICTABLE>
     290:	25310100 	ldrcs	r0, [r1, #-256]!	; 0x100
     294:	8a000000 	bhi	29c <_start-0x7d64>
     298:	1b000000 	blne	2a0 <_start-0x7d60>
     29c:	00000000 	andeq	r0, r0, r0
     2a0:	01007812 	tsteq	r0, r2, lsl r8
     2a4:	0003c432 	andeq	ip, r3, r2, lsr r4
     2a8:	0000a900 	andeq	sl, r0, r0, lsl #18
     2ac:	81041500 	tsthi	r4, r0, lsl #10
     2b0:	04390000 	ldrteq	r0, [r9], #-0
     2b4:	02c10000 	sbceq	r0, r1, #0
     2b8:	01160000 	tsteq	r6, r0
     2bc:	00770250 	rsbseq	r0, r7, r0, asr r2
     2c0:	81181700 	tsthi	r8, r0, lsl #14
     2c4:	044e0000 	strbeq	r0, [lr], #-0
     2c8:	01160000 	tsteq	r6, r0
     2cc:	00760250 	rsbseq	r0, r6, r0, asr r2
     2d0:	14000000 	strne	r0, [r0], #-0
     2d4:	000080d0 	ldrdeq	r8, [r0], -r0
     2d8:	00000468 	andeq	r0, r0, r8, ror #8
     2dc:	0080d414 	addeq	sp, r0, r4, lsl r4
     2e0:	00046f00 	andeq	r6, r4, r0, lsl #30
     2e4:	80dc1500 	sbcshi	r1, ip, r0, lsl #10
     2e8:	03fd0000 	mvnseq	r0, #0
     2ec:	02fc0000 	rscseq	r0, ip, #0
     2f0:	01160000 	tsteq	r6, r0
     2f4:	e0030550 	and	r0, r3, r0, asr r5
     2f8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     2fc:	00812814 	addeq	r2, r1, r4, lsl r8
     300:	00047600 	andeq	r7, r4, r0, lsl #12
     304:	813c1500 	teqhi	ip, r0, lsl #10
     308:	03fd0000 	mvnseq	r0, #0
     30c:	031c0000 	tsteq	ip, #0
     310:	01160000 	tsteq	r6, r0
     314:	08030550 	stmdaeq	r3, {r4, r6, r8, sl}
     318:	000000a0 	andeq	r0, r0, r0, lsr #1
     31c:	00814c14 	addeq	r4, r1, r4, lsl ip
     320:	00041300 	andeq	r1, r4, r0, lsl #6
     324:	81601500 	cmnhi	r0, r0, lsl #10
     328:	03fd0000 	mvnseq	r0, #0
     32c:	03540000 	cmpeq	r4, #0
     330:	01160000 	tsteq	r6, r0
     334:	3a080253 	bcc	200c88 <__bss_end__+0x1f61e0>
     338:	05520116 	ldrbeq	r0, [r2, #-278]	; 0x116
     33c:	009f5c03 	addseq	r5, pc, r3, lsl #24
     340:	51011600 	tstpl	r1, r0, lsl #12
     344:	9fd00305 	svcls	0x00d00305
     348:	01160000 	tsteq	r6, r0
     34c:	1c030550 	cfstr32ne	mvfx0, [r3], {80}	; 0x50
     350:	000000a0 	andeq	r0, r0, r0, lsr #1
     354:	00816414 	addeq	r6, r1, r4, lsl r4
     358:	00041a00 	andeq	r1, r4, r0, lsl #20
     35c:	81781400 	cmnhi	r8, r0, lsl #8
     360:	04130000 	ldreq	r0, [r3], #-0
     364:	8c150000 	ldchi	0, cr0, [r5], {-0}
     368:	fd000081 	stc2	0, cr0, [r0, #-516]	; 0xfffffdfc
     36c:	95000003 	strls	r0, [r0, #-3]
     370:	16000003 	strne	r0, [r0], -r3
     374:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     378:	5201163b 	andpl	r1, r1, #61865984	; 0x3b00000
     37c:	9f5c0305 	svcls	0x005c0305
     380:	01160000 	tsteq	r6, r0
     384:	d0030551 	andle	r0, r3, r1, asr r5
     388:	1600009f 			; <UNDEFINED> instruction: 0x1600009f
     38c:	03055001 	movweq	r5, #20481	; 0x5001
     390:	0000a040 	andeq	sl, r0, r0, asr #32
     394:	81901400 	orrshi	r1, r0, r0, lsl #8
     398:	041a0000 	ldreq	r0, [sl], #-0
     39c:	98150000 	ldmdals	r5, {}	; <UNPREDICTABLE>
     3a0:	fd000081 	stc2	0, cr0, [r0, #-516]	; 0xfffffdfc
     3a4:	b5000003 	strlt	r0, [r0, #-3]
     3a8:	16000003 	strne	r0, [r0], -r3
     3ac:	03055001 	movweq	r5, #20481	; 0x5001
     3b0:	0000a064 	andeq	sl, r0, r4, rrx
     3b4:	819c1400 	orrshi	r1, ip, r0, lsl #8
     3b8:	041a0000 	ldreq	r0, [sl], #-0
     3bc:	07000000 	streq	r0, [r0, -r0]
     3c0:	00000091 	muleq	r0, r1, r0
     3c4:	00250406 	eoreq	r0, r5, r6, lsl #8
     3c8:	4d1c0000 	ldcmi	0, cr0, [ip, #-0]
     3cc:	01000001 	tsteq	r0, r1
     3d0:	00002c10 	andeq	r2, r0, r0, lsl ip
     3d4:	68030500 	stmdavs	r3, {r8, sl}
     3d8:	1c0000a6 	stcne	0, cr0, [r0], {166}	; 0xa6
     3dc:	00000195 	muleq	r0, r5, r1
     3e0:	002c1001 	eoreq	r1, ip, r1
     3e4:	03050000 	movweq	r0, #20480	; 0x5000
     3e8:	0000a66c 	andeq	sl, r0, ip, ror #12
     3ec:	0001df1d 	andeq	sp, r1, sp, lsl pc
     3f0:	f7f80200 			; <UNDEFINED> instruction: 0xf7f80200
     3f4:	06000003 	streq	r0, [r0], -r3
     3f8:	00012e04 	andeq	r2, r1, r4, lsl #28
     3fc:	022a1e00 	eoreq	r1, sl, #0, 28
     400:	29020000 	stmdbcs	r2, {}	; <UNPREDICTABLE>
     404:	00000025 	andeq	r0, r0, r5, lsr #32
     408:	00000413 	andeq	r0, r0, r3, lsl r4
     40c:	0000860e 	andeq	r8, r0, lr, lsl #12
     410:	20001f00 	andcs	r1, r0, r0, lsl #30
     414:	000001fb 	strdeq	r0, [r0], -fp
     418:	82201e02 	eorhi	r1, r0, #2, 28
     41c:	02000000 	andeq	r0, r0, #0
     420:	01a02066 	rrxeq	r2, r6
     424:	f1020000 	cps	#0
     428:	00015a21 	andeq	r5, r1, r1, lsr #20
     42c:	39ee0200 	stmibcc	lr!, {r9}^
     430:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
     434:	00000025 	andeq	r0, r0, r5, lsr #32
     438:	010b1e00 	tsteq	fp, r0, lsl #28
     43c:	6d020000 	stcvs	0, cr0, [r2, #-0]
     440:	0000007d 	andeq	r0, r0, sp, ror r0
     444:	0000044e 	andeq	r0, r0, lr, asr #8
     448:	00002c0e 	andeq	r2, r0, lr, lsl #24
     44c:	8f1e0000 	svchi	0x001e0000
     450:	02000000 	andeq	r0, r0, #0
     454:	0003f7eb 	andeq	pc, r3, fp, ror #15
     458:	00046800 	andeq	r6, r4, r0, lsl #16
     45c:	01170e00 	tsteq	r7, r0, lsl #28
     460:	7d0e0000 	stcvc	0, cr0, [lr, #-0]
     464:	00000000 	andeq	r0, r0, r0
     468:	00006a20 	andeq	r6, r0, r0, lsr #20
     46c:	203a0200 	eorscs	r0, sl, r0, lsl #4
     470:	000001ee 	andeq	r0, r0, lr, ror #3
     474:	13207102 	teqne	r0, #-2147483648	; 0x80000000
     478:	02000001 	andeq	r0, r0, #1
     47c:	019100f5 	ldrsheq	r0, [r1, r5]
     480:	00040000 	andeq	r0, r4, r0
     484:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
     488:	000b0104 	andeq	r0, fp, r4, lsl #2
     48c:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
     490:	3b000002 	blcc	4a0 <_start-0x7b60>
     494:	80000002 	andhi	r0, r0, r2
     498:	58000082 	stmdapl	r0, {r1, r7}
     49c:	37000000 	strcc	r0, [r0, -r0]
     4a0:	02000001 	andeq	r0, r0, #1
     4a4:	0000020a 	andeq	r0, r0, sl, lsl #4
     4a8:	00302802 	eorseq	r2, r0, r2, lsl #16
     4ac:	31030000 	mrscc	r0, (UNDEF: 3)
     4b0:	04000002 	streq	r0, [r0], #-2
     4b4:	00470003 	subeq	r0, r7, r3
     4b8:	84040000 	strhi	r0, [r4], #-0
     4bc:	47000002 	strmi	r0, [r0, -r2]
     4c0:	00000000 	andeq	r0, r0, r0
     4c4:	02040500 	andeq	r0, r4, #0, 10
     4c8:	00000233 	andeq	r0, r0, r3, lsr r2
     4cc:	00256202 	eoreq	r6, r5, r2, lsl #4
     4d0:	04060000 	streq	r0, [r6], #-0
     4d4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
     4d8:	07040700 	streq	r0, [r4, -r0, lsl #14]
     4dc:	0000017b 	andeq	r0, r0, fp, ror r1
     4e0:	76060107 	strvc	r0, [r6], -r7, lsl #2
     4e4:	07000000 	streq	r0, [r0, -r0]
     4e8:	01cc0502 	biceq	r0, ip, r2, lsl #10
     4ec:	04070000 	streq	r0, [r7], #-0
     4f0:	0001b805 	andeq	fp, r1, r5, lsl #16
     4f4:	05080700 	streq	r0, [r8, #-1792]	; 0x700
     4f8:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
     4fc:	74080107 	strvc	r0, [r8], #-263	; 0x107
     500:	07000000 	streq	r0, [r0, -r0]
     504:	00980702 	addseq	r0, r8, r2, lsl #14
     508:	04070000 	streq	r0, [r7], #-0
     50c:	00017607 	andeq	r7, r1, r7, lsl #12
     510:	07080700 	streq	r0, [r8, -r0, lsl #14]
     514:	00000171 	andeq	r0, r0, r1, ror r1
     518:	aa070407 	bge	1c153c <__bss_end__+0x1b6a94>
     51c:	08000001 	stmdaeq	r0, {r0}
     520:	0000a704 	andeq	sl, r0, r4, lsl #14
     524:	08010700 	stmdaeq	r1, {r8, r9, sl}
     528:	0000007d 	andeq	r0, r0, sp, ror r0
     52c:	00b40408 	adcseq	r0, r4, r8, lsl #8
     530:	a7090000 	strge	r0, [r9, -r0]
     534:	0a000000 	beq	53c <_start-0x7ac4>
     538:	0000022a 	andeq	r0, r0, sl, lsr #4
     53c:	00540601 	subseq	r0, r4, r1, lsl #12
     540:	82800000 	addhi	r0, r0, #0
     544:	00580000 	subseq	r0, r8, r0
     548:	9c010000 	stcls	0, cr0, [r1], {-0}
     54c:	00000143 	andeq	r0, r0, r3, asr #2
     550:	746d660b 	strbtvc	r6, [sp], #-1547	; 0x60b
     554:	ae060100 	adfges	f0, f6, f0
     558:	02000000 	andeq	r0, r0, #0
     55c:	0d0c7091 	stceq	0, cr7, [ip, #-580]	; 0xfffffdbc
     560:	00667562 	rsbeq	r7, r6, r2, ror #10
     564:	01430801 	cmpeq	r3, r1, lsl #16
     568:	03050000 	movweq	r0, #20480	; 0x5000
     56c:	0000a670 	andeq	sl, r0, r0, ror r6
     570:	00027f0e 	andeq	r7, r2, lr, lsl #30
     574:	49090100 	stmdbmi	r9, {r8}
     578:	02000000 	andeq	r0, r0, #0
     57c:	730f5c91 	movwvc	r5, #64657	; 0xfc91
     580:	0c01007a 	stceq	0, cr0, [r1], {122}	; 0x7a
     584:	00000054 	andeq	r0, r0, r4, asr r0
     588:	000000c7 	andeq	r0, r0, r7, asr #1
     58c:	0082a810 	addeq	sl, r2, r0, lsl r8
     590:	00017400 	andeq	r7, r1, r0, lsl #8
     594:	00013600 	andeq	r3, r1, r0, lsl #12
     598:	53011100 	movwpl	r1, #4352	; 0x1100
     59c:	114c9102 	cmpne	ip, r2, lsl #2
     5a0:	91035201 	tstls	r3, r1, lsl #4
     5a4:	01110648 	tsteq	r1, r8, asr #12
     5a8:	000a0351 	andeq	r0, sl, r1, asr r3
     5ac:	50011104 	andpl	r1, r1, r4, lsl #2
     5b0:	00007402 	andeq	r7, r0, r2, lsl #8
     5b4:	0082bc12 	addeq	fp, r2, r2, lsl ip
     5b8:	50011100 	andpl	r1, r1, r0, lsl #2
     5bc:	00007402 	andeq	r7, r0, r2, lsl #8
     5c0:	00a71300 	adceq	r1, r7, r0, lsl #6
     5c4:	01540000 	cmpeq	r4, r0
     5c8:	9a140000 	bls	5005d0 <__bss_end__+0x4f5b28>
     5cc:	ff000000 			; <UNDEFINED> instruction: 0xff000000
     5d0:	54150003 	ldrpl	r0, [r5], #-3
     5d4:	63000000 	movwvs	r0, #0
     5d8:	16000001 	strne	r0, [r0], -r1
     5dc:	000000ae 	andeq	r0, r0, lr, lsr #1
     5e0:	02d71700 	sbcseq	r1, r7, #0, 14
     5e4:	22040000 	andcs	r0, r4, #0
     5e8:	0000016e 	andeq	r0, r0, lr, ror #2
     5ec:	01540408 	cmpeq	r4, r8, lsl #8
     5f0:	27180000 	ldrcs	r0, [r8, -r0]
     5f4:	05000002 	streq	r0, [r0, #-2]
     5f8:	00005402 	andeq	r5, r0, r2, lsl #8
     5fc:	00a11600 	adceq	r1, r1, r0, lsl #12
     600:	54160000 	ldrpl	r0, [r6], #-0
     604:	16000000 	strne	r0, [r0], -r0
     608:	000000ae 	andeq	r0, r0, lr, lsr #1
     60c:	00004916 	andeq	r4, r0, r6, lsl r9
     610:	13000000 	movwne	r0, #0
     614:	04000001 	streq	r0, [r0], #-1
     618:	0002e400 	andeq	lr, r2, r0, lsl #8
     61c:	0b010400 	bleq	41624 <__bss_end__+0x36b7c>
     620:	01000000 	mrseq	r0, (UNDEF: 0)
     624:	000002a6 	andeq	r0, r0, r6, lsr #5
     628:	0000023b 	andeq	r0, r0, fp, lsr r2
     62c:	000082d8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
     630:	0000003c 	andeq	r0, r0, ip, lsr r0
     634:	0000023d 	andeq	r0, r0, sp, lsr r2
     638:	69050402 	stmdbvs	r5, {r1, sl}
     63c:	0300746e 	movweq	r7, #1134	; 0x46e
     640:	017b0704 	cmneq	fp, r4, lsl #14
     644:	01030000 	mrseq	r0, (UNDEF: 3)
     648:	00007606 	andeq	r7, r0, r6, lsl #12
     64c:	05020300 	streq	r0, [r2, #-768]	; 0x300
     650:	000001cc 	andeq	r0, r0, ip, asr #3
     654:	b8050403 	stmdalt	r5, {r0, r1, sl}
     658:	03000001 	movweq	r0, #1
     65c:	01b30508 			; <UNDEFINED> instruction: 0x01b30508
     660:	01030000 	mrseq	r0, (UNDEF: 3)
     664:	00007408 	andeq	r7, r0, r8, lsl #8
     668:	07020300 	streq	r0, [r2, -r0, lsl #6]
     66c:	00000098 	muleq	r0, r8, r0
     670:	76070403 	strvc	r0, [r7], -r3, lsl #8
     674:	03000001 	movweq	r0, #1
     678:	01710708 	cmneq	r1, r8, lsl #14
     67c:	04030000 	streq	r0, [r3], #-0
     680:	0001aa07 	andeq	sl, r1, r7, lsl #20
     684:	08010300 	stmdaeq	r1, {r8, r9}
     688:	0000007d 	andeq	r0, r0, sp, ror r0
     68c:	00028904 	andeq	r8, r2, r4, lsl #18
     690:	25030100 	strcs	r0, [r3, #-256]	; 0x100
     694:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
     698:	14000082 	strne	r0, [r0], #-130	; 0x82
     69c:	01000000 	mrseq	r0, (UNDEF: 0)
     6a0:	0000b09c 	muleq	r0, ip, r0
     6a4:	00630500 	rsbeq	r0, r3, r0, lsl #10
     6a8:	00250301 	eoreq	r0, r5, r1, lsl #6
     6ac:	00f00000 	rscseq	r0, r0, r0
     6b0:	e4060000 	str	r0, [r6], #-0
     6b4:	09000082 	stmdbeq	r0, {r1, r7}
     6b8:	07000001 	streq	r0, [r0, -r1]
     6bc:	74025001 	strvc	r5, [r2], #-1
     6c0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     6c4:	000001fb 	strdeq	r0, [r0], -fp
     6c8:	82ec0801 	rschi	r0, ip, #65536	; 0x10000
     6cc:	00180000 	andseq	r0, r8, r0
     6d0:	9c010000 	stcls	0, cr0, [r1], {-0}
     6d4:	0002b509 	andeq	fp, r2, r9, lsl #10
     6d8:	040b0100 	streq	r0, [fp], #-256	; 0x100
     6dc:	10000083 	andne	r0, r0, r3, lsl #1
     6e0:	01000000 	mrseq	r0, (UNDEF: 0)
     6e4:	0000e39c 	muleq	r0, ip, r3
     6e8:	70660a00 	rsbvc	r0, r6, r0, lsl #20
     6ec:	f20b0100 	vrhadd.s8	d0, d11, d0
     6f0:	01000000 	mrseq	r0, (UNDEF: 0)
     6f4:	250b0050 	strcs	r0, [fp, #-80]	; 0x50
     6f8:	f2000000 	vhadd.s8	d0, d0, d0
     6fc:	0c000000 	stceq	0, cr0, [r0], {-0}
     700:	00000025 	andeq	r0, r0, r5, lsr #32
     704:	e3040d00 	movw	r0, #19712	; 0x4d00
     708:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     70c:	0000029a 	muleq	r0, sl, r2
     710:	00f20601 	rscseq	r0, r2, r1, lsl #12
     714:	03050000 	movweq	r0, #20480	; 0x5000
     718:	00009eb0 			; <UNDEFINED> instruction: 0x00009eb0
     71c:	00040a0f 	andeq	r0, r4, pc, lsl #20
     720:	0c3c0200 	lfmeq	f0, 4, [ip], #-0
     724:	0000002c 	andeq	r0, r0, ip, lsr #32
     728:	00ee0000 	rsceq	r0, lr, r0
     72c:	00040000 	andeq	r0, r4, r0
     730:	000003cc 	andeq	r0, r0, ip, asr #7
     734:	000b0104 	andeq	r0, fp, r4, lsl #2
     738:	c2010000 	andgt	r0, r1, #0
     73c:	3b000002 	blcc	74c <_start-0x78b4>
     740:	14000002 	strne	r0, [r0], #-2
     744:	34000083 	strcc	r0, [r0], #-131	; 0x83
     748:	cb000000 	blgt	750 <_start-0x78b0>
     74c:	02000002 	andeq	r0, r0, #2
     750:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     754:	04030074 	streq	r0, [r3], #-116	; 0x74
     758:	00017b07 	andeq	r7, r1, r7, lsl #22
     75c:	06010300 	streq	r0, [r1], -r0, lsl #6
     760:	00000076 	andeq	r0, r0, r6, ror r0
     764:	cc050203 	sfmgt	f0, 4, [r5], {3}
     768:	03000001 	movweq	r0, #1
     76c:	01b80504 			; <UNDEFINED> instruction: 0x01b80504
     770:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     774:	0001b305 	andeq	fp, r1, r5, lsl #6
     778:	08010300 	stmdaeq	r1, {r8, r9}
     77c:	00000074 	andeq	r0, r0, r4, ror r0
     780:	98070203 	stmdals	r7, {r0, r1, r9}
     784:	03000000 	movweq	r0, #0
     788:	01760704 	cmneq	r6, r4, lsl #14
     78c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     790:	00017107 	andeq	r7, r1, r7, lsl #2
     794:	07040300 	streq	r0, [r4, -r0, lsl #6]
     798:	000001aa 	andeq	r0, r0, sl, lsr #3
     79c:	7d080103 	stfvcs	f0, [r8, #-12]
     7a0:	04000000 	streq	r0, [r0], #-0
     7a4:	00007f04 	andeq	r7, r0, r4, lsl #30
     7a8:	00720500 	rsbseq	r0, r2, r0, lsl #10
     7ac:	ce060000 	cdpgt	0, 0, cr0, cr6, cr0, {0}
     7b0:	01000002 	tsteq	r0, r2
     7b4:	00002504 	andeq	r2, r0, r4, lsl #10
     7b8:	00831400 	addeq	r1, r3, r0, lsl #8
     7bc:	00003400 	andeq	r3, r0, r0, lsl #8
     7c0:	ab9c0100 	blge	fe700bc8 <__bss_end__+0xfe6f6120>
     7c4:	07000000 	streq	r0, [r0, -r0]
     7c8:	04010070 	streq	r0, [r1], #-112	; 0x70
     7cc:	00000079 	andeq	r0, r0, r9, ror r0
     7d0:	0000010e 	andeq	r0, r0, lr, lsl #2
     7d4:	00250800 	eoreq	r0, r5, r0, lsl #16
     7d8:	00ba0000 	adcseq	r0, sl, r0
     7dc:	25090000 	strcs	r0, [r9, #-0]
     7e0:	00000000 	andeq	r0, r0, r0
     7e4:	00029a0a 	andeq	r9, r2, sl, lsl #20
     7e8:	c51d0200 	ldrgt	r0, [sp, #-512]	; 0x200
     7ec:	04000000 	streq	r0, [r0], #-0
     7f0:	0000ab04 	andeq	sl, r0, r4, lsl #22
     7f4:	00250800 	eoreq	r0, r5, r0, lsl #16
     7f8:	00da0000 	sbcseq	r0, sl, r0
     7fc:	79090000 	stmdbvc	r9, {}	; <UNPREDICTABLE>
     800:	00000000 	andeq	r0, r0, r0
     804:	0002d70b 	andeq	sp, r2, fp, lsl #14
     808:	eb0c0100 	bl	300c10 <__bss_end__+0x2f6168>
     80c:	05000000 	streq	r0, [r0, #-0]
     810:	009eb403 	addseq	fp, lr, r3, lsl #8
     814:	cb040400 	blgt	10181c <__bss_end__+0xf6d74>
     818:	00000000 	andeq	r0, r0, r0
     81c:	00000681 	andeq	r0, r0, r1, lsl #13
     820:	04650004 	strbteq	r0, [r5], #-4
     824:	01040000 	mrseq	r0, (UNDEF: 4)
     828:	0000000b 	andeq	r0, r0, fp
     82c:	00030801 	andeq	r0, r3, r1, lsl #16
     830:	00023b00 	andeq	r3, r2, r0, lsl #22
     834:	00834800 	addeq	r4, r3, r0, lsl #16
     838:	0004f800 	andeq	pc, r4, r0, lsl #16
     83c:	00036500 	andeq	r6, r3, r0, lsl #10
     840:	05040200 	streq	r0, [r4, #-512]	; 0x200
     844:	00746e69 	rsbseq	r6, r4, r9, ror #28
     848:	7b070403 	blvc	1c185c <__bss_end__+0x1b6db4>
     84c:	03000001 	movweq	r0, #1
     850:	00760601 	rsbseq	r0, r6, r1, lsl #12
     854:	02030000 	andeq	r0, r3, #0
     858:	0001cc05 	andeq	ip, r1, r5, lsl #24
     85c:	05040300 	streq	r0, [r4, #-768]	; 0x300
     860:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     864:	b3050803 	movwlt	r0, #22531	; 0x5803
     868:	03000001 	movweq	r0, #1
     86c:	00740801 	rsbseq	r0, r4, r1, lsl #16
     870:	02030000 	andeq	r0, r3, #0
     874:	00009807 	andeq	r9, r0, r7, lsl #16
     878:	07040300 	streq	r0, [r4, -r0, lsl #6]
     87c:	00000176 	andeq	r0, r0, r6, ror r1
     880:	71070803 	tstvc	r7, r3, lsl #16
     884:	03000001 	movweq	r0, #1
     888:	01aa0704 			; <UNDEFINED> instruction: 0x01aa0704
     88c:	04040000 	streq	r0, [r4], #-0
     890:	007a0405 	rsbseq	r0, sl, r5, lsl #8
     894:	01030000 	mrseq	r0, (UNDEF: 3)
     898:	00007d08 	andeq	r7, r0, r8, lsl #26
     89c:	87040500 	strhi	r0, [r4, -r0, lsl #10]
     8a0:	06000000 	streq	r0, [r0], -r0
     8a4:	0000007a 	andeq	r0, r0, sl, ror r0
     8a8:	00020a07 	andeq	r0, r2, r7, lsl #20
     8ac:	97280200 	strls	r0, [r8, -r0, lsl #4]!
     8b0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     8b4:	00000231 	andeq	r0, r0, r1, lsr r2
     8b8:	ae000404 	cdpge	4, 0, cr0, cr0, cr4, {0}
     8bc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     8c0:	00000284 	andeq	r0, r0, r4, lsl #5
     8c4:	00000072 	andeq	r0, r0, r2, ror r0
     8c8:	33070000 	movwcc	r0, #28672	; 0x7000
     8cc:	02000002 	andeq	r0, r0, #2
     8d0:	00008c62 	andeq	r8, r0, r2, ror #24
     8d4:	02ea0a00 	rsceq	r0, sl, #0, 20
     8d8:	27010000 	strcs	r0, [r1, -r0]
     8dc:	00000025 	andeq	r0, r0, r5, lsr #32
     8e0:	00008348 	andeq	r8, r0, r8, asr #6
     8e4:	00000014 	andeq	r0, r0, r4, lsl r0
     8e8:	00e09c01 	rsceq	r9, r0, r1, lsl #24
     8ec:	630b0000 	movwvs	r0, #45056	; 0xb000
     8f0:	25270100 	strcs	r0, [r7, #-256]!	; 0x100
     8f4:	2c000000 	stccs	0, cr0, [r0], {-0}
     8f8:	00000001 	andeq	r0, r0, r1
     8fc:	6461700c 	strbtvs	r7, [r1], #-12
     900:	742e0100 	strtvc	r0, [lr], #-256	; 0x100
     904:	5c000000 	stcpl	0, cr0, [r0], {-0}
     908:	2c000083 	stccs	0, cr0, [r0], {131}	; 0x83
     90c:	01000000 	mrseq	r0, (UNDEF: 0)
     910:	0001309c 	muleq	r1, ip, r0
     914:	00700b00 	rsbseq	r0, r0, r0, lsl #22
     918:	00742e01 	rsbseq	r2, r4, r1, lsl #28
     91c:	015a0000 	cmpeq	sl, r0
     920:	fa0d0000 	blx	340928 <__bss_end__+0x335e80>
     924:	01000002 	tsteq	r0, r2
     928:	0000742e 	andeq	r7, r0, lr, lsr #8
     92c:	00018500 	andeq	r8, r1, r0, lsl #10
     930:	03280e00 	teqeq	r8, #0, 28
     934:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
     938:	00000025 	andeq	r0, r0, r5, lsr #32
     93c:	6c0f5201 	sfmvs	f5, 4, [pc], {1}
     940:	01006e65 	tsteq	r0, r5, ror #28
     944:	0000252f 	andeq	r2, r0, pc, lsr #10
     948:	00510100 	subseq	r0, r1, r0, lsl #2
     94c:	0002e20a 	andeq	lr, r2, sl, lsl #4
     950:	74370100 	ldrtvc	r0, [r7], #-256	; 0x100
     954:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
     958:	40000083 	andmi	r0, r0, r3, lsl #1
     95c:	01000000 	mrseq	r0, (UNDEF: 0)
     960:	00019c9c 	muleq	r1, ip, ip
     964:	73640b00 	cmnvc	r4, #0, 22
     968:	37010074 	smlsdxcc	r1, r4, r0, r0
     96c:	00000074 	andeq	r0, r0, r4, ror r0
     970:	000001a6 	andeq	r0, r0, r6, lsr #3
     974:	01006e0b 	tsteq	r0, fp, lsl #28
     978:	00002537 	andeq	r2, r0, r7, lsr r5
     97c:	0001de00 	andeq	sp, r1, r0, lsl #28
     980:	00700b00 	rsbseq	r0, r0, r0, lsl #22
     984:	00743701 	rsbseq	r3, r4, r1, lsl #14
     988:	01ff0000 	mvnseq	r0, r0
     98c:	1e0d0000 	cdpne	0, 0, cr0, cr13, cr0, {0}
     990:	01000001 	tsteq	r0, r1
     994:	00007437 	andeq	r7, r0, r7, lsr r4
     998:	00023500 	andeq	r3, r2, r0, lsl #10
     99c:	656c1000 	strbvs	r1, [ip, #-0]!
     9a0:	3901006e 	stmdbcc	r1, {r1, r2, r3, r5, r6}
     9a4:	00000025 	andeq	r0, r0, r5, lsr #32
     9a8:	00000253 	andeq	r0, r0, r3, asr r2
     9ac:	0100730f 	tsteq	r0, pc, lsl #6
     9b0:	0000743d 	andeq	r7, r0, sp, lsr r4
     9b4:	00500100 	subseq	r0, r0, r0, lsl #2
     9b8:	0003360a 	andeq	r3, r3, sl, lsl #12
     9bc:	74470100 	strbvc	r0, [r7], #-256	; 0x100
     9c0:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
     9c4:	9c000083 	stcls	0, cr0, [r0], {131}	; 0x83
     9c8:	01000001 	tsteq	r0, r1
     9cc:	0002d39c 	muleq	r2, ip, r3
     9d0:	02fa0d00 	rscseq	r0, sl, #0, 26
     9d4:	47010000 	strmi	r0, [r1, -r0]
     9d8:	0000002c 	andeq	r0, r0, ip, lsr #32
     9dc:	0000027a 	andeq	r0, r0, sl, ror r2
     9e0:	7473640b 	ldrbtvc	r6, [r3], #-1035	; 0x40b
     9e4:	74470100 	strbvc	r0, [r7], #-256	; 0x100
     9e8:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
     9ec:	0b000002 	bleq	9fc <_start-0x7604>
     9f0:	4701006e 	strmi	r0, [r1, -lr, rrx]
     9f4:	00000025 	andeq	r0, r0, r5, lsr #32
     9f8:	00000316 	andeq	r0, r0, r6, lsl r3
     9fc:	6c61760b 	stclvs	6, cr7, [r1], #-44	; 0xffffffd4
     a00:	25470100 	strbcs	r0, [r7, #-256]	; 0x100
     a04:	42000000 	andmi	r0, r0, #0
     a08:	0d000003 	stceq	0, cr0, [r0, #-12]
     a0c:	00000328 	andeq	r0, r0, r8, lsr #6
     a10:	00254701 	eoreq	r4, r5, r1, lsl #14
     a14:	03c10000 	biceq	r0, r1, #0
     a18:	ff0e0000 			; <UNDEFINED> instruction: 0xff0e0000
     a1c:	01000002 	tsteq	r0, r2
     a20:	00002547 	andeq	r2, r0, r7, asr #10
     a24:	04910200 	ldreq	r0, [r1], #512	; 0x200
     a28:	6675620f 	ldrbtvs	r6, [r5], -pc, lsl #4
     a2c:	d34c0100 	movtle	r0, #49408	; 0xc100
     a30:	03000002 	movweq	r0, #2
     a34:	107fa891 			; <UNDEFINED> instruction: 0x107fa891
     a38:	4c010070 	stcmi	0, cr0, [r1], {112}	; 0x70
     a3c:	00000074 	andeq	r0, r0, r4, ror r0
     a40:	000003eb 	andeq	r0, r0, fp, ror #7
     a44:	01007510 	tsteq	r0, r0, lsl r5
     a48:	00002c4d 	andeq	r2, r0, sp, asr #24
     a4c:	00049000 	andeq	r9, r4, r0
     a50:	01401100 	mrseq	r1, (UNDEF: 80)
     a54:	02f30000 	rscseq	r0, r3, #0
     a58:	03050000 	movweq	r0, #20480	; 0x5000
     a5c:	0000a070 	andeq	sl, r0, r0, ror r0
     a60:	00843412 	addeq	r3, r4, r2, lsl r4
     a64:	00007400 	andeq	r7, r0, r0, lsl #8
     a68:	00026100 	andeq	r6, r2, r0, lsl #2
     a6c:	02dc1300 	sbcseq	r1, ip, #0, 6
     a70:	52010000 	andpl	r0, r1, #0
     a74:	0000002c 	andeq	r0, r0, ip, lsr #32
     a78:	00000595 	muleq	r0, r5, r5
     a7c:	85081400 	strhi	r1, [r8, #-1024]	; 0x400
     a80:	06600000 	strbteq	r0, [r0], -r0
     a84:	1c150000 	ldcne	0, cr0, [r5], {-0}
     a88:	67000085 	strvs	r0, [r0, -r5, lsl #1]
     a8c:	99000006 	stmdbls	r0, {r1, r2}
     a90:	16000002 	strne	r0, [r0], -r2
     a94:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     a98:	52011675 	andpl	r1, r1, #122683392	; 0x7500000
     a9c:	a0700305 	rsbsge	r0, r0, r5, lsl #6
     aa0:	01160000 	tsteq	r6, r0
     aa4:	a8030551 	stmdage	r3, {r0, r4, r6, r8, sl}
     aa8:	160000a0 	strne	r0, [r0], -r0, lsr #1
     aac:	03055001 	movweq	r5, #20481	; 0x5001
     ab0:	0000a094 	muleq	r0, r4, r0
     ab4:	85201400 	strhi	r1, [r0, #-1024]!	; 0x400
     ab8:	067d0000 	ldrbteq	r0, [sp], -r0
     abc:	2c150000 	ldccs	0, cr0, [r5], {-0}
     ac0:	e0000085 	and	r0, r0, r5, lsl #1
     ac4:	b6000000 	strlt	r0, [r0], -r0
     ac8:	16000002 	strne	r0, [r0], -r2
     acc:	7d025101 	stfvcs	f5, [r2, #-4]
     ad0:	40170000 	andsmi	r0, r7, r0
     ad4:	30000085 	andcc	r0, r0, r5, lsl #1
     ad8:	16000001 	strne	r0, [r0], -r1
     adc:	7d025301 	stcvc	3, cr5, [r2, #-4]
     ae0:	51011600 	tstpl	r1, r0, lsl #12
     ae4:	16007402 	strne	r7, [r0], -r2, lsl #8
     ae8:	75025001 	strvc	r5, [r2, #-1]
     aec:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     af0:	0000007a 	andeq	r0, r0, sl, ror r0
     af4:	000002e3 	andeq	r0, r0, r3, ror #5
     af8:	00006b19 	andeq	r6, r0, r9, lsl fp
     afc:	18003f00 	stmdane	r0, {r8, r9, sl, fp, ip, sp}
     b00:	0000007a 	andeq	r0, r0, sl, ror r0
     b04:	000002f3 	strdeq	r0, [r0], -r3
     b08:	00006b19 	andeq	r6, r0, r9, lsl fp
     b0c:	06000400 	streq	r0, [r0], -r0, lsl #8
     b10:	000002e3 	andeq	r0, r0, r3, ror #5
     b14:	0003191a 	andeq	r1, r3, sl, lsl r9
     b18:	641f0100 	ldrvs	r0, [pc], #-256	; b20 <_start-0x74e0>
     b1c:	54000085 	strpl	r0, [r0], #-133	; 0x85
     b20:	01000000 	mrseq	r0, (UNDEF: 0)
     b24:	00037c9c 	muleq	r3, ip, ip
     b28:	032e0d00 	teqeq	lr, #0, 26
     b2c:	1f010000 	svcne	0x00010000
     b30:	0000038b 	andeq	r0, r0, fp, lsl #7
     b34:	000005c1 	andeq	r0, r0, r1, asr #11
     b38:	0002f20d 	andeq	pc, r2, sp, lsl #4
     b3c:	a01f0100 	andsge	r0, pc, r0, lsl #2
     b40:	ed000003 	stc	0, cr0, [r0, #-12]
     b44:	11000005 	tstne	r0, r5
     b48:	00000140 	andeq	r0, r0, r0, asr #2
     b4c:	000003b6 			; <UNDEFINED> instruction: 0x000003b6
     b50:	a0780305 	rsbsge	r0, r8, r5, lsl #6
     b54:	74140000 	ldrvc	r0, [r4], #-0
     b58:	60000085 	andvs	r0, r0, r5, lsl #1
     b5c:	15000006 	strne	r0, [r0, #-6]
     b60:	00008588 	andeq	r8, r0, r8, lsl #11
     b64:	00000667 	andeq	r0, r0, r7, ror #12
     b68:	00000372 	andeq	r0, r0, r2, ror r3
     b6c:	02530116 	subseq	r0, r3, #-2147483643	; 0x80000005
     b70:	01162008 	tsteq	r6, r8
     b74:	78030552 	stmdavc	r3, {r1, r4, r6, r8, sl}
     b78:	160000a0 	strne	r0, [r0], -r0, lsr #1
     b7c:	03055101 	movweq	r5, #20737	; 0x5101
     b80:	0000a0a8 	andeq	sl, r0, r8, lsr #1
     b84:	05500116 	ldrbeq	r0, [r0, #-278]	; 0x116
     b88:	00a0e003 	adceq	lr, r0, r3
     b8c:	8c140000 	ldchi	0, cr0, [r4], {-0}
     b90:	7d000085 	stcvc	0, cr0, [r0, #-532]	; 0xfffffdec
     b94:	00000006 	andeq	r0, r0, r6
     b98:	0000251b 	andeq	r2, r0, fp, lsl r5
     b9c:	00038b00 	andeq	r8, r3, r0, lsl #22
     ba0:	00251c00 	eoreq	r1, r5, r0, lsl #24
     ba4:	05000000 	streq	r0, [r0, #-0]
     ba8:	00037c04 	andeq	r7, r3, r4, lsl #24
     bac:	00251b00 	eoreq	r1, r5, r0, lsl #22
     bb0:	03a00000 	moveq	r0, #0
     bb4:	811c0000 	tsthi	ip, r0
     bb8:	00000000 	andeq	r0, r0, r0
     bbc:	03910405 	orrseq	r0, r1, #83886080	; 0x5000000
     bc0:	7a180000 	bvc	600bc8 <__bss_end__+0x5f6120>
     bc4:	b6000000 	strlt	r0, [r0], -r0
     bc8:	19000003 	stmdbne	r0, {r0, r1}
     bcc:	0000006b 	andeq	r0, r0, fp, rrx
     bd0:	a606000e 	strge	r0, [r6], -lr
     bd4:	1d000003 	stcne	0, cr0, [r0, #-12]
     bd8:	00000227 	andeq	r0, r0, r7, lsr #4
     bdc:	00257d01 	eoreq	r7, r5, r1, lsl #26
     be0:	85b80000 	ldrhi	r0, [r8, #0]!
     be4:	02880000 	addeq	r0, r8, #0
     be8:	9c010000 	stcls	0, cr0, [r1], {-0}
     bec:	00000625 	andeq	r0, r0, r5, lsr #12
     bf0:	6675620b 	ldrbtvs	r6, [r5], -fp, lsl #4
     bf4:	747d0100 	ldrbtvc	r0, [sp], #-256	; 0x100
     bf8:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     bfc:	0b000006 	bleq	c1c <_start-0x73e4>
     c00:	7d01006e 	stcvc	0, cr0, [r1, #-440]	; 0xfffffe48
     c04:	00000025 	andeq	r0, r0, r5, lsr #32
     c08:	00000645 	andeq	r0, r0, r5, asr #12
     c0c:	746d660b 	strbtvc	r6, [sp], #-1547	; 0x60b
     c10:	817d0100 	cmnhi	sp, r0, lsl #2
     c14:	73000000 	movwvc	r0, #0
     c18:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
     c1c:	0000027f 	andeq	r0, r0, pc, ror r2
     c20:	00ae7d01 	adceq	r7, lr, r1, lsl #26
     c24:	06a70000 	strteq	r0, [r7], r0
     c28:	70100000 	andsvc	r0, r0, r0
     c2c:	747e0100 	ldrbtvc	r0, [lr], #-256	; 0x100
     c30:	ba000000 	blt	c38 <_start-0x73c8>
     c34:	10000006 	andne	r0, r0, r6
     c38:	7e010065 	cdpvc	0, 0, cr0, cr1, cr5, {3}
     c3c:	00000074 	andeq	r0, r0, r4, ror r0
     c40:	00000738 	andeq	r0, r0, r8, lsr r7
     c44:	00014011 	andeq	r4, r1, r1, lsl r0
     c48:	00063500 	andeq	r3, r6, r0, lsl #10
     c4c:	88030500 	stmdahi	r3, {r8, sl}
     c50:	1e0000a0 	cdpne	0, 0, cr0, cr0, cr0, {5}
     c54:	00000018 	andeq	r0, r0, r8, lsl r0
     c58:	01007310 	tsteq	r0, r0, lsl r3
     c5c:	0000748b 	andeq	r7, r0, fp, lsl #9
     c60:	00075f00 	andeq	r5, r7, r0, lsl #30
     c64:	756e0f00 	strbvc	r0, [lr, #-3840]!	; 0xf00
     c68:	8b01006d 	blhi	40e24 <__bss_end__+0x3637c>
     c6c:	0000063a 	andeq	r0, r0, sl, lsr r6
     c70:	7ed89103 	atnvce	f1, f3
     c74:	00032813 	andeq	r2, r3, r3, lsl r8
     c78:	2c8c0100 	stfcss	f0, [ip], {0}
     c7c:	b4000000 	strlt	r0, [r0], #-0
     c80:	15000007 	strne	r0, [r0, #-7]
     c84:	0000863c 	andeq	r8, r0, ip, lsr r6
     c88:	000000b9 	strheq	r0, [r0], -r9
     c8c:	0000047b 	andeq	r0, r0, fp, ror r4
     c90:	02500116 	subseq	r0, r0, #-2147483643	; 0x80000005
     c94:	14000075 	strne	r0, [r0], #-117	; 0x75
     c98:	00008650 	andeq	r8, r0, r0, asr r6
     c9c:	00000660 	andeq	r0, r0, r0, ror #12
     ca0:	00866415 	addeq	r6, r6, r5, lsl r4
     ca4:	00066700 	andeq	r6, r6, r0, lsl #14
     ca8:	0004b300 	andeq	fp, r4, r0, lsl #6
     cac:	53011600 	movwpl	r1, #5632	; 0x1600
     cb0:	16920802 	ldrne	r0, [r2], r2, lsl #16
     cb4:	03055201 	movweq	r5, #20993	; 0x5201
     cb8:	0000a088 	andeq	sl, r0, r8, lsl #1
     cbc:	05510116 	ldrbeq	r0, [r1, #-278]	; 0x116
     cc0:	00a0a803 	adceq	sl, r0, r3, lsl #16
     cc4:	50011600 	andpl	r1, r1, r0, lsl #12
     cc8:	a0f80305 	rscsge	r0, r8, r5, lsl #6
     ccc:	14000000 	strne	r0, [r0], #-0
     cd0:	00008668 	andeq	r8, r0, r8, ror #12
     cd4:	0000067d 	andeq	r0, r0, sp, ror r6
     cd8:	0086d814 	addeq	sp, r6, r4, lsl r8
     cdc:	00066000 	andeq	r6, r6, r0
     ce0:	86ec1500 	strbthi	r1, [ip], r0, lsl #10
     ce4:	06670000 	strbteq	r0, [r7], -r0
     ce8:	04f40000 	ldrbteq	r0, [r4], #0
     cec:	01160000 	tsteq	r6, r0
     cf0:	98080253 	stmdals	r8, {r0, r1, r4, r6, r9}
     cf4:	05520116 	ldrbeq	r0, [r2, #-278]	; 0x116
     cf8:	00a08803 	adceq	r8, r0, r3, lsl #16
     cfc:	51011600 	tstpl	r1, r0, lsl #12
     d00:	a0a80305 	adcge	r0, r8, r5, lsl #6
     d04:	01160000 	tsteq	r6, r0
     d08:	14030550 	strne	r0, [r3], #-1360	; 0x550
     d0c:	000000a1 	andeq	r0, r0, r1, lsr #1
     d10:	0086f014 	addeq	pc, r6, r4, lsl r0	; <UNPREDICTABLE>
     d14:	00067d00 	andeq	r7, r6, r0, lsl #26
     d18:	87141500 	ldrhi	r1, [r4, -r0, lsl #10]
     d1c:	019c0000 	orrseq	r0, ip, r0
     d20:	052a0000 	streq	r0, [sl, #-0]!
     d24:	01160000 	tsteq	r6, r0
     d28:	80080252 	andhi	r0, r8, r2, asr r2
     d2c:	03510116 	cmpeq	r1, #-2147483643	; 0x80000005
     d30:	167ed091 			; <UNDEFINED> instruction: 0x167ed091
     d34:	3a015001 	bcc	54d40 <__bss_end__+0x4a298>
     d38:	047d0216 	ldrbteq	r0, [sp], #-534	; 0x216
     d3c:	02163101 	andseq	r3, r6, #1073741824	; 0x40000000
     d40:	7702007d 	smlsdxvc	r2, sp, r0, r0
     d44:	38150000 	ldmdacc	r5, {}	; <UNPREDICTABLE>
     d48:	9c000087 	stcls	0, cr0, [r0], {135}	; 0x87
     d4c:	58000001 	stmdapl	r0, {r0}
     d50:	16000005 	strne	r0, [r0], -r5
     d54:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
     d58:	51011680 	smlabbpl	r1, r0, r6, r1
     d5c:	7ed09103 	atnvcs	f1, f3
     d60:	01500116 	cmpeq	r0, r6, lsl r1
     d64:	7d02163a 	stcvc	6, cr1, [r2, #-232]	; 0xffffff18
     d68:	007b0204 	rsbseq	r0, fp, r4, lsl #4
     d6c:	007d0216 	rsbseq	r0, sp, r6, lsl r2
     d70:	00007702 	andeq	r7, r0, r2, lsl #14
     d74:	00875c15 	addeq	r5, r7, r5, lsl ip
     d78:	00019c00 	andeq	r9, r1, r0, lsl #24
     d7c:	00058600 	andeq	r8, r5, r0, lsl #12
     d80:	52011600 	andpl	r1, r1, #0, 12
     d84:	16800802 	strne	r0, [r0], r2, lsl #16
     d88:	91035101 	tstls	r3, r1, lsl #2
     d8c:	01167ed0 			; <UNDEFINED> instruction: 0x01167ed0
     d90:	16400150 			; <UNDEFINED> instruction: 0x16400150
     d94:	02047d02 	andeq	r7, r4, #2, 26	; 0x80
     d98:	0216007b 	andseq	r0, r6, #123	; 0x7b
     d9c:	7702007d 	smlsdxvc	r2, sp, r0, r0
     da0:	80150000 	andshi	r0, r5, r0
     da4:	9c000087 	stcls	0, cr0, [r0], {135}	; 0x87
     da8:	b4000001 	strlt	r0, [r0], #-1
     dac:	16000005 	strne	r0, [r0], -r5
     db0:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
     db4:	51011680 	smlabbpl	r1, r0, r6, r1
     db8:	7ed09103 	atnvcs	f1, f3
     dbc:	01500116 	cmpeq	r0, r6, lsl r1
     dc0:	7d021632 	stcvc	6, cr1, [r2, #-200]	; 0xffffff38
     dc4:	007b0204 	rsbseq	r0, fp, r4, lsl #4
     dc8:	007d0216 	rsbseq	r0, sp, r6, lsl r2
     dcc:	00007702 	andeq	r7, r0, r2, lsl #14
     dd0:	0087b015 	addeq	fp, r7, r5, lsl r0
     dd4:	00019c00 	andeq	r9, r1, r0, lsl #24
     dd8:	0005e200 	andeq	lr, r5, r0, lsl #4
     ddc:	52011600 	andpl	r1, r1, #0, 12
     de0:	16800802 	strne	r0, [r0], r2, lsl #16
     de4:	91035101 	tstls	r3, r1, lsl #2
     de8:	01167ed0 			; <UNDEFINED> instruction: 0x01167ed0
     dec:	16380150 			; <UNDEFINED> instruction: 0x16380150
     df0:	02047d02 	andeq	r7, r4, #2, 26	; 0x80
     df4:	0216007b 	andseq	r0, r6, #123	; 0x7b
     df8:	7702007d 	smlsdxvc	r2, sp, r0, r0
     dfc:	b8140000 	ldmdalt	r4, {}	; <UNPREDICTABLE>
     e00:	60000087 	andvs	r0, r0, r7, lsl #1
     e04:	15000006 	strne	r0, [r0, #-6]
     e08:	000087d4 	ldrdeq	r8, [r0], -r4
     e0c:	00000667 	andeq	r0, r0, r7, ror #12
     e10:	0000061a 	andeq	r0, r0, sl, lsl r6
     e14:	02530116 	subseq	r0, r3, #-2147483643	; 0x80000005
     e18:	0116b908 	tsteq	r6, r8, lsl #18
     e1c:	88030552 	stmdahi	r3, {r1, r4, r6, r8, sl}
     e20:	160000a0 	strne	r0, [r0], -r0, lsr #1
     e24:	03055101 	movweq	r5, #20737	; 0x5101
     e28:	0000a0a8 	andeq	sl, r0, r8, lsr #1
     e2c:	05500116 	ldrbeq	r0, [r0, #-278]	; 0x116
     e30:	00a13c03 	adceq	r3, r1, r3, lsl #24
     e34:	d8140000 	ldmdale	r4, {}	; <UNPREDICTABLE>
     e38:	7d000087 	stcvc	0, cr0, [r0, #-540]	; 0xfffffde4
     e3c:	00000006 	andeq	r0, r0, r6
     e40:	007a1800 	rsbseq	r1, sl, r0, lsl #16
     e44:	06350000 	ldrteq	r0, [r5], -r0
     e48:	6b190000 	blvs	640e50 <__bss_end__+0x6363a8>
     e4c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     e50:	06250600 	strteq	r0, [r5], -r0, lsl #12
     e54:	7a180000 	bvc	600e5c <__bss_end__+0x5f63b4>
     e58:	4a000000 	bmi	e60 <_start-0x71a0>
     e5c:	19000006 	stmdbne	r0, {r1, r2}
     e60:	0000006b 	andeq	r0, r0, fp, rrx
     e64:	9a1f007f 	bls	7c1068 <__bss_end__+0x7b65c0>
     e68:	03000002 	movweq	r0, #2
     e6c:	00038b1d 	andeq	r8, r3, sp, lsl fp
     e70:	02d71f00 	sbcseq	r1, r7, #0, 30
     e74:	22030000 	andcs	r0, r3, #0
     e78:	000003a0 	andeq	r0, r0, r0, lsr #7
     e7c:	0001fb20 	andeq	pc, r1, r0, lsr #22
     e80:	211e0300 	tstcs	lr, r0, lsl #6
     e84:	0000022a 	andeq	r0, r0, sl, lsr #4
     e88:	00252903 	eoreq	r2, r5, r3, lsl #18
     e8c:	067d0000 	ldrbteq	r0, [sp], -r0
     e90:	811c0000 	tsthi	ip, r0
     e94:	22000000 	andcs	r0, r0, #0
     e98:	00822000 	addeq	r2, r2, r0
     e9c:	66030000 	strvs	r0, [r3], -r0
     ea0:	0000ff00 	andeq	pc, r0, r0, lsl #30
     ea4:	41000400 	tstmi	r0, r0, lsl #8
     ea8:	04000006 	streq	r0, [r0], #-6
     eac:	00000b01 	andeq	r0, r0, r1, lsl #22
     eb0:	03460100 	movteq	r0, #24832	; 0x6100
     eb4:	023b0000 	eorseq	r0, fp, #0
     eb8:	88400000 	stmdahi	r0, {}^	; <UNPREDICTABLE>
     ebc:	00280000 	eoreq	r0, r8, r0
     ec0:	05470000 	strbeq	r0, [r7, #-0]
     ec4:	04020000 	streq	r0, [r2], #-0
     ec8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
     ecc:	07040300 	streq	r0, [r4, -r0, lsl #6]
     ed0:	0000017b 	andeq	r0, r0, fp, ror r1
     ed4:	76060103 	strvc	r0, [r6], -r3, lsl #2
     ed8:	03000000 	movweq	r0, #0
     edc:	01cc0502 	biceq	r0, ip, r2, lsl #10
     ee0:	04030000 	streq	r0, [r3], #-0
     ee4:	0001b805 	andeq	fp, r1, r5, lsl #16
     ee8:	05080300 	streq	r0, [r8, #-768]	; 0x300
     eec:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
     ef0:	74080103 	strvc	r0, [r8], #-259	; 0x103
     ef4:	03000000 	movweq	r0, #0
     ef8:	00980702 	addseq	r0, r8, r2, lsl #14
     efc:	04030000 	streq	r0, [r3], #-0
     f00:	00017607 	andeq	r7, r1, r7, lsl #12
     f04:	07080300 	streq	r0, [r8, -r0, lsl #6]
     f08:	00000171 	andeq	r0, r0, r1, ror r1
     f0c:	aa070403 	bge	1c1f20 <__bss_end__+0x1b7478>
     f10:	03000001 	movweq	r0, #1
     f14:	007d0801 	rsbseq	r0, sp, r1, lsl #16
     f18:	04040000 	streq	r0, [r4], #-0
     f1c:	0000007f 	andeq	r0, r0, pc, ror r0
     f20:	00007205 	andeq	r7, r0, r5, lsl #4
     f24:	00820600 	addeq	r0, r2, r0, lsl #12
     f28:	04010000 	streq	r0, [r1], #-0
     f2c:	00008840 	andeq	r8, r0, r0, asr #16
     f30:	00000028 	andeq	r0, r0, r8, lsr #32
     f34:	00ca9c01 	sbceq	r9, sl, r1, lsl #24
     f38:	54070000 	strpl	r0, [r7], #-0
     f3c:	ac000088 	stcge	0, cr0, [r0], {136}	; 0x88
     f40:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     f44:	03055001 	movweq	r5, #20481	; 0x5001
     f48:	0000a174 	andeq	sl, r0, r4, ror r1
     f4c:	885c0900 	ldmdahi	ip, {r8, fp}^
     f50:	00ea0000 	rsceq	r0, sl, r0
     f54:	00c00000 	sbceq	r0, r0, r0
     f58:	01080000 	mrseq	r0, (UNDEF: 8)
     f5c:	64080250 	strvs	r0, [r8], #-592	; 0x250
     f60:	88600a00 	stmdahi	r0!, {r9, fp}^
     f64:	00fb0000 	rscseq	r0, fp, r0
     f68:	0b000000 	bleq	f70 <_start-0x7090>
     f6c:	00000025 	andeq	r0, r0, r5, lsr #32
     f70:	000000d9 	ldrdeq	r0, [r0], -r9
     f74:	0000790c 	andeq	r7, r0, ip, lsl #18
     f78:	d70d0000 	strle	r0, [sp, -r0]
     f7c:	02000002 	andeq	r0, r0, #2
     f80:	0000e422 	andeq	lr, r0, r2, lsr #8
     f84:	ca040400 	bgt	101f8c <__bss_end__+0xf74e4>
     f88:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     f8c:	00000360 	andeq	r0, r0, r0, ror #6
     f90:	00fb5002 	rscseq	r5, fp, r2
     f94:	2c0c0000 	stccs	0, cr0, [ip], {-0}
     f98:	00000000 	andeq	r0, r0, r0
     f9c:	00033b0f 	andeq	r3, r3, pc, lsl #22
     fa0:	00630200 	rsbeq	r0, r3, r0, lsl #4
     fa4:	000002dd 	ldrdeq	r0, [r0], -sp
     fa8:	070b0004 	streq	r0, [fp, -r4]
     fac:	01040000 	mrseq	r0, (UNDEF: 4)
     fb0:	0000000b 	andeq	r0, r0, fp
     fb4:	00044b01 	andeq	r4, r4, r1, lsl #22
     fb8:	00023b00 	andeq	r3, r2, r0, lsl #22
     fbc:	00886800 	addeq	r6, r8, r0, lsl #16
     fc0:	0000b000 	andeq	fp, r0, r0
     fc4:	0005de00 	andeq	sp, r5, r0, lsl #28
     fc8:	05040200 	streq	r0, [r4, #-512]	; 0x200
     fcc:	00746e69 	rsbseq	r6, r4, r9, ror #28
     fd0:	7b070403 	blvc	1c1fe4 <__bss_end__+0x1b753c>
     fd4:	03000001 	movweq	r0, #1
     fd8:	00760601 	rsbseq	r0, r6, r1, lsl #12
     fdc:	02030000 	andeq	r0, r3, #0
     fe0:	0001cc05 	andeq	ip, r1, r5, lsl #24
     fe4:	05040300 	streq	r0, [r4, #-768]	; 0x300
     fe8:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     fec:	b3050803 	movwlt	r0, #22531	; 0x5803
     ff0:	04000001 	streq	r0, [r0], #-1
     ff4:	00000414 	andeq	r0, r0, r4, lsl r4
     ff8:	005a2e02 	subseq	r2, sl, r2, lsl #28
     ffc:	01030000 	mrseq	r0, (UNDEF: 3)
    1000:	00007408 	andeq	r7, r0, r8, lsl #8
    1004:	07020300 	streq	r0, [r2, -r0, lsl #6]
    1008:	00000098 	muleq	r0, r8, r0
    100c:	0001d604 	andeq	sp, r1, r4, lsl #12
    1010:	73340200 	teqvc	r4, #0, 4
    1014:	03000000 	movweq	r0, #0
    1018:	01760704 	cmneq	r6, r4, lsl #14
    101c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1020:	00017107 	andeq	r7, r1, r7, lsl #2
    1024:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1028:	000001aa 	andeq	r0, r0, sl, lsr #3
    102c:	7d080103 	stfvcs	f0, [r8, #-12]
    1030:	05000000 	streq	r0, [r0, #-0]
    1034:	00009504 	andeq	r9, r0, r4, lsl #10
    1038:	00880600 	addeq	r0, r8, r0, lsl #12
    103c:	0c070000 	stceq	0, cr0, [r7], {-0}
    1040:	00d10e03 	sbcseq	r0, r1, r3, lsl #28
    1044:	74080000 	strvc	r0, [r8], #-0
    1048:	0f030078 	svceq	0x00030078
    104c:	0000004f 	andeq	r0, r0, pc, asr #32
    1050:	78720800 	ldmdavc	r2!, {fp}^
    1054:	4f0f0300 	svcmi	0x000f0300
    1058:	01000000 	mrseq	r0, (UNDEF: 0)
    105c:	0003e209 	andeq	lr, r3, r9, lsl #4
    1060:	68100300 	ldmdavs	r0, {r8, r9}
    1064:	04000000 	streq	r0, [r0], #-0
    1068:	00039309 	andeq	r9, r3, r9, lsl #6
    106c:	68110300 	ldmdavs	r1, {r8, r9}
    1070:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1074:	03cb0400 	biceq	r0, fp, #0, 8
    1078:	12030000 	andne	r0, r3, #0
    107c:	0000009a 	muleq	r0, sl, r0
    1080:	1004010a 	andne	r0, r4, sl, lsl #2
    1084:	000000f7 	strdeq	r0, [r0], -r7
    1088:	0003e70b 	andeq	lr, r3, fp, lsl #14
    108c:	d50b0100 	strle	r0, [fp, #-256]	; 0x100
    1090:	02000003 	andeq	r0, r0, #3
    1094:	0003bd0b 	andeq	fp, r3, fp, lsl #26
    1098:	04000300 	streq	r0, [r0], #-768	; 0x300
    109c:	000003fc 	strdeq	r0, [r0], -ip
    10a0:	00dc1004 	sbcseq	r1, ip, r4
    10a4:	14070000 	strne	r0, [r7], #-0
    10a8:	012f1404 	teqeq	pc, r4, lsl #8
    10ac:	6b090000 	blvs	2410b4 <__bss_end__+0x23660c>
    10b0:	04000004 	streq	r0, [r0], #-4
    10b4:	00002c15 	andeq	r2, r0, r5, lsl ip
    10b8:	5f090000 	svcpl	0x00090000
    10bc:	04000004 	streq	r0, [r0], #-4
    10c0:	0000f718 	andeq	pc, r0, r8, lsl r7	; <UNPREDICTABLE>
    10c4:	2a090400 	bcs	2420cc <__bss_end__+0x237624>
    10c8:	04000004 	streq	r0, [r0], #-4
    10cc:	0000d11b 	andeq	sp, r0, fp, lsl r1
    10d0:	04000800 	streq	r0, [r0], #-2048	; 0x800
    10d4:	0000041c 	andeq	r0, r0, ip, lsl r4
    10d8:	01022004 	tsteq	r2, r4
    10dc:	690c0000 	stmdbvs	ip, {}	; <UNPREDICTABLE>
    10e0:	01000003 	tsteq	r0, r3
    10e4:	00002506 	andeq	r2, r0, r6, lsl #10
    10e8:	00886800 	addeq	r6, r8, r0, lsl #16
    10ec:	00002000 	andeq	r2, r0, r0
    10f0:	7a9c0100 	bvc	fe7014f8 <__bss_end__+0xfe6f6a50>
    10f4:	0d000001 	stceq	0, cr0, [r0, #-4]
    10f8:	06010063 	streq	r0, [r1], -r3, rrx
    10fc:	00000025 	andeq	r0, r0, r5, lsr #32
    1100:	000007de 	ldrdeq	r0, [r0], -lr
    1104:	00887c0e 	addeq	r7, r8, lr, lsl #24
    1108:	00027a00 	andeq	r7, r2, r0, lsl #20
    110c:	51010f00 	tstpl	r1, r0, lsl #30
    1110:	0f007402 	svceq	0x00007402
    1114:	03055001 	movweq	r5, #20481	; 0x5001
    1118:	0000aa70 	andeq	sl, r0, r0, ror sl
    111c:	f4100000 			; <UNDEFINED> instruction: 0xf4100000
    1120:	01000003 	tsteq	r0, r3
    1124:	0088880b 	addeq	r8, r8, fp, lsl #16
    1128:	00009000 	andeq	r9, r0, r0
    112c:	279c0100 	ldrcs	r0, [ip, r0, lsl #2]
    1130:	11000002 	tstne	r0, r2
    1134:	0000037d 	andeq	r0, r0, sp, ror r3
    1138:	00250c01 	eoreq	r0, r5, r1, lsl #24
    113c:	3f110000 	svccc	0x00110000
    1140:	01000004 	tsteq	r0, r4
    1144:	0000250c 	andeq	r2, r0, ip, lsl #10
    1148:	00621200 	rsbeq	r1, r2, r0, lsl #4
    114c:	0d010000 	stceq	0, cr0, [r1, #-0]
    1150:	73736213 	cmnvc	r3, #805306369	; 0x30000001
    1154:	270f0100 	strcs	r0, [pc, -r0, lsl #2]
    1158:	fc000002 	stc2	0, cr0, [r0], {2}
    115c:	14000007 	strne	r0, [r0], #-7
    1160:	0000038b 	andeq	r0, r0, fp, lsl #7
    1164:	02271001 	eoreq	r1, r7, #1
    1168:	63130000 	tstvs	r3, #0
    116c:	17010062 	strne	r0, [r1, -r2, rrx]
    1170:	0000022d 	andeq	r0, r0, sp, lsr #4
    1174:	0000081c 	andeq	r0, r0, ip, lsl r8
    1178:	0088b015 	addeq	fp, r8, r5, lsl r0
    117c:	00029600 	andeq	r9, r2, r0, lsl #12
    1180:	88ec1600 	stmiahi	ip!, {r9, sl, ip}^
    1184:	02a10000 	adceq	r0, r1, #0
    1188:	01fd0000 	mvnseq	r0, r0
    118c:	010f0000 	mrseq	r0, CPSR
    1190:	80030551 	andhi	r0, r3, r1, asr r5
    1194:	0f0000a1 	svceq	0x000000a1
    1198:	03055001 	movweq	r5, #20481	; 0x5001
    119c:	0000aa70 	andeq	sl, r0, r0, ror sl
    11a0:	88f41600 	ldmhi	r4!, {r9, sl, ip}^
    11a4:	02bc0000 	adcseq	r0, ip, #0
    11a8:	02140000 	andseq	r0, r4, #0
    11ac:	010f0000 	mrseq	r0, CPSR
    11b0:	a4030550 	strge	r0, [r3], #-1360	; 0x550
    11b4:	000000a1 	andeq	r0, r0, r1, lsr #1
    11b8:	0088f815 	addeq	pc, r8, r5, lsl r8	; <UNPREDICTABLE>
    11bc:	0002d200 	andeq	sp, r2, r0, lsl #4
    11c0:	88fc1500 	ldmhi	ip!, {r8, sl, ip}^
    11c4:	02d90000 	sbcseq	r0, r9, #0
    11c8:	05000000 	streq	r0, [r0, #-0]
    11cc:	00002504 	andeq	r2, r0, r4, lsl #10
    11d0:	2f040500 	svccs	0x00040500
    11d4:	17000001 	strne	r0, [r0, -r1]
    11d8:	000003a1 	andeq	r0, r0, r1, lsr #7
    11dc:	00d10501 	sbcseq	r0, r1, r1, lsl #10
    11e0:	03050000 	movweq	r0, #20480	; 0x5000
    11e4:	0000aa70 	andeq	sl, r0, r0, ror sl
    11e8:	00002518 	andeq	r2, r0, r8, lsl r5
    11ec:	00025300 	andeq	r5, r2, r0, lsl #6
    11f0:	00251900 	eoreq	r1, r5, r0, lsl #18
    11f4:	11000000 	mrsne	r0, (UNDEF: 0)
    11f8:	0000029a 	muleq	r0, sl, r2
    11fc:	025e1d05 	subseq	r1, lr, #320	; 0x140
    1200:	04050000 	streq	r0, [r5], #-0
    1204:	00000244 	andeq	r0, r0, r4, asr #4
    1208:	00037d11 	andeq	r7, r3, r1, lsl sp
    120c:	250c0100 	strcs	r0, [ip, #-256]	; 0x100
    1210:	11000000 	mrsne	r0, (UNDEF: 0)
    1214:	0000043f 	andeq	r0, r0, pc, lsr r4
    1218:	00250c01 	eoreq	r0, r5, r1, lsl #24
    121c:	071a0000 	ldreq	r0, [sl, -r0]
    1220:	03000004 	movweq	r0, #4
    1224:	00029044 	andeq	r9, r2, r4, asr #32
    1228:	02901900 	addseq	r1, r0, #0, 18
    122c:	5a190000 	bpl	641234 <__bss_end__+0x63678c>
    1230:	00000000 	andeq	r0, r0, r0
    1234:	00d10405 	sbcseq	r0, r1, r5, lsl #8
    1238:	321b0000 	andscc	r0, fp, #0
    123c:	04000004 	streq	r0, [r0], #-4
    1240:	00022d2a 	andeq	r2, r2, sl, lsr #26
    1244:	03ae1c00 			; <UNDEFINED> instruction: 0x03ae1c00
    1248:	15030000 	strne	r0, [r3, #-0]
    124c:	00000025 	andeq	r0, r0, r5, lsr #32
    1250:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
    1254:	00029019 	andeq	r9, r2, r9, lsl r0
    1258:	008f1900 	addeq	r1, pc, r0, lsl #18
    125c:	001d0000 	andseq	r0, sp, r0
    1260:	00022a1c 	andeq	r2, r2, ip, lsl sl
    1264:	25290500 	strcs	r0, [r9, #-1280]!	; 0x500
    1268:	d2000000 	andle	r0, r0, #0
    126c:	19000002 	stmdbne	r0, {r1}
    1270:	0000008f 	andeq	r0, r0, pc, lsl #1
    1274:	6212001d 	andsvs	r0, r2, #29
    1278:	05000000 	streq	r0, [r0, #-0]
    127c:	033b12d1 	teqeq	fp, #268435469	; 0x1000000d
    1280:	63050000 	movwvs	r0, #20480	; 0x5000
    1284:	0001ad00 	andeq	sl, r1, r0, lsl #26
    1288:	a2000400 	andge	r0, r0, #0, 8
    128c:	04000008 	streq	r0, [r0], #-8
    1290:	00000b01 	andeq	r0, r0, r1, lsl #22
    1294:	048b0100 	streq	r0, [fp], #256	; 0x100
    1298:	023b0000 	eorseq	r0, fp, #0
    129c:	00300000 	eorseq	r0, r0, r0
    12a0:	00000000 	andeq	r0, r0, r0
    12a4:	07030000 	streq	r0, [r3, -r0]
    12a8:	04020000 	streq	r0, [r2], #-0
    12ac:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    12b0:	07040300 	streq	r0, [r4, -r0, lsl #6]
    12b4:	0000017b 	andeq	r0, r0, fp, ror r1
    12b8:	76060103 	strvc	r0, [r6], -r3, lsl #2
    12bc:	03000000 	movweq	r0, #0
    12c0:	01cc0502 	biceq	r0, ip, r2, lsl #10
    12c4:	04030000 	streq	r0, [r3], #-0
    12c8:	0001b805 	andeq	fp, r1, r5, lsl #16
    12cc:	05080300 	streq	r0, [r8, #-768]	; 0x300
    12d0:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
    12d4:	74080103 	strvc	r0, [r8], #-259	; 0x103
    12d8:	03000000 	movweq	r0, #0
    12dc:	00980702 	addseq	r0, r8, r2, lsl #14
    12e0:	04030000 	streq	r0, [r3], #-0
    12e4:	00017607 	andeq	r7, r1, r7, lsl #12
    12e8:	07080300 	streq	r0, [r8, -r0, lsl #6]
    12ec:	00000171 	andeq	r0, r0, r1, ror r1
    12f0:	aa070403 	bge	1c2304 <__bss_end__+0x1b785c>
    12f4:	03000001 	movweq	r0, #1
    12f8:	007d0801 	rsbseq	r0, sp, r1, lsl #16
    12fc:	71040000 	mrsvc	r0, (UNDEF: 4)
    1300:	01000004 	tsteq	r0, r4
    1304:	0000250e 	andeq	r2, r0, lr, lsl #10
    1308:	00891800 	addeq	r1, r9, r0, lsl #16
    130c:	00001800 	andeq	r1, r0, r0, lsl #16
    1310:	a29c0100 	addsge	r0, ip, #0, 2
    1314:	05000000 	streq	r0, [r0, #-0]
    1318:	000004dd 	ldrdeq	r0, [r0], -sp
    131c:	002c0f01 	eoreq	r0, ip, r1, lsl #30
    1320:	083c0000 	ldmdaeq	ip!, {}	; <UNPREDICTABLE>
    1324:	06000000 	streq	r0, [r0], -r0
    1328:	000004c0 	andeq	r0, r0, r0, asr #9
    132c:	89301701 	ldmdbhi	r0!, {r0, r8, r9, sl, ip}
    1330:	00140000 	andseq	r0, r4, r0
    1334:	9c010000 	stcls	0, cr0, [r1], {-0}
    1338:	000000c7 	andeq	r0, r0, r7, asr #1
    133c:	0004dd05 	andeq	sp, r4, r5, lsl #26
    1340:	2c180100 	ldfcss	f0, [r8], {-0}
    1344:	5b000000 	blpl	134c <_start-0x6cb4>
    1348:	00000008 	andeq	r0, r0, r8
    134c:	00033b06 	andeq	r3, r3, r6, lsl #22
    1350:	441f0100 	ldrmi	r0, [pc], #-256	; 1358 <_start-0x6ca8>
    1354:	48000089 	stmdami	r0, {r0, r3, r7}
    1358:	01000000 	mrseq	r0, (UNDEF: 0)
    135c:	0001779c 	muleq	r1, ip, r7
    1360:	04d50700 	ldrbeq	r0, [r5], #1792	; 0x700
    1364:	2a010000 	bcs	4136c <__bss_end__+0x368c4>
    1368:	00000177 	andeq	r0, r0, r7, ror r1
    136c:	2010001c 	andscs	r0, r0, ip, lsl r0
    1370:	0004b807 	andeq	fp, r4, r7, lsl #16
    1374:	772b0100 	strvc	r0, [fp, -r0, lsl #2]!
    1378:	24000001 	strcs	r0, [r0], #-1
    137c:	07201000 	streq	r1, [r0, -r0]!
    1380:	0000047f 	andeq	r0, r0, pc, ror r4
    1384:	01772c01 	cmneq	r7, r1, lsl #24
    1388:	00000000 	andeq	r0, r0, r0
    138c:	9f085a00 	svcls	0x00085a00
    1390:	01000004 	tsteq	r0, r4
    1394:	0001772d 	andeq	r7, r1, sp, lsr #14
    1398:	4c092000 	stcmi	0, cr2, [r9], {-0}
    139c:	79000089 	stmdbvc	r0, {r0, r3, r7}
    13a0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    13a4:	00008958 	andeq	r8, r0, r8, asr r9
    13a8:	000000a2 	andeq	r0, r0, r2, lsr #1
    13ac:	0089600a 	addeq	r6, r9, sl
    13b0:	00018d00 	andeq	r8, r1, r0, lsl #26
    13b4:	00013a00 	andeq	r3, r1, r0, lsl #20
    13b8:	50010b00 	andpl	r0, r1, r0, lsl #22
    13bc:	0a004e01 	beq	14bc8 <__bss_end__+0xa120>
    13c0:	0000896c 	andeq	r8, r0, ip, ror #18
    13c4:	0000019e 	muleq	r0, lr, r1
    13c8:	0000015a 	andeq	r0, r0, sl, asr r1
    13cc:	0551010b 	ldrbeq	r0, [r1, #-267]	; 0x10b
    13d0:	0000010c 	andeq	r0, r0, ip, lsl #2
    13d4:	50010b5a 	andpl	r0, r1, sl, asr fp
    13d8:	00240c05 	eoreq	r0, r4, r5, lsl #24
    13dc:	0c002010 	stceq	0, cr2, [r0], {16}
    13e0:	00008978 	andeq	r8, r0, r8, ror r9
    13e4:	0000019e 	muleq	r0, lr, r1
    13e8:	0551010b 	ldrbeq	r0, [r1, #-267]	; 0x10b
    13ec:	0000200c 	andeq	r2, r0, ip
    13f0:	50010b5a 	andpl	r0, r1, sl, asr fp
    13f4:	001c0c05 	andseq	r0, ip, r5, lsl #24
    13f8:	00002010 	andeq	r2, r0, r0, lsl r0
    13fc:	0000250d 	andeq	r2, r0, sp, lsl #10
    1400:	04740800 	ldrbteq	r0, [r4], #-2048	; 0x800
    1404:	0d010000 	stceq	0, cr0, [r1, #-0]
    1408:	00000188 	andeq	r0, r0, r8, lsl #3
    140c:	002c0d10 	eoreq	r0, ip, r0, lsl sp
    1410:	600e0000 	andvs	r0, lr, r0
    1414:	02000003 	andeq	r0, r0, #3
    1418:	00019e50 	andeq	r9, r1, r0, asr lr
    141c:	002c0f00 	eoreq	r0, ip, r0, lsl #30
    1420:	10000000 	andne	r0, r0, r0
    1424:	000004cf 	andeq	r0, r0, pc, asr #9
    1428:	2c0f9c02 	stccs	12, cr9, [pc], {2}
    142c:	0f000000 	svceq	0x00000000
    1430:	0000002c 	andeq	r0, r0, ip, lsr #32
    1434:	01d80000 	bicseq	r0, r8, r0
    1438:	00040000 	andeq	r0, r4, r0
    143c:	00000990 	muleq	r0, r0, r9
    1440:	000b0104 	andeq	r0, fp, r4, lsl #2
    1444:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    1448:	3b000004 	blcc	1460 <_start-0x6ba0>
    144c:	8c000002 	stchi	0, cr0, [r0], {2}
    1450:	88000089 	stmdahi	r0, {r0, r3, r7}
    1454:	a0000000 	andge	r0, r0, r0
    1458:	02000007 	andeq	r0, r0, #7
    145c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1460:	04030074 	streq	r0, [r3], #-116	; 0x74
    1464:	00017b07 	andeq	r7, r1, r7, lsl #22
    1468:	06010300 	streq	r0, [r1], -r0, lsl #6
    146c:	00000076 	andeq	r0, r0, r6, ror r0
    1470:	cc050203 	sfmgt	f0, 4, [r5], {3}
    1474:	03000001 	movweq	r0, #1
    1478:	01b80504 			; <UNDEFINED> instruction: 0x01b80504
    147c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1480:	0001b305 	andeq	fp, r1, r5, lsl #6
    1484:	08010300 	stmdaeq	r1, {r8, r9}
    1488:	00000074 	andeq	r0, r0, r4, ror r0
    148c:	98070203 	stmdals	r7, {r0, r1, r9}
    1490:	03000000 	movweq	r0, #0
    1494:	01760704 	cmneq	r6, r4, lsl #14
    1498:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    149c:	00017107 	andeq	r7, r1, r7, lsl #2
    14a0:	07040300 	streq	r0, [r4, -r0, lsl #6]
    14a4:	000001aa 	andeq	r0, r0, sl, lsr #3
    14a8:	7d080103 	stfvcs	f0, [r8, #-12]
    14ac:	04000000 	streq	r0, [r0], #-0
    14b0:	0000051e 	andeq	r0, r0, lr, lsl r5
    14b4:	898c0501 	stmibhi	ip, {r0, r8, sl}
    14b8:	001c0000 	andseq	r0, ip, r0
    14bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    14c0:	0000009e 	muleq	r0, lr, r0
    14c4:	00051805 	andeq	r1, r5, r5, lsl #16
    14c8:	2c050100 	stfcss	f0, [r5], {-0}
    14cc:	85000000 	strhi	r0, [r0, #-0]
    14d0:	00000008 	andeq	r0, r0, r8
    14d4:	0004e206 	andeq	lr, r4, r6, lsl #4
    14d8:	2c0b0100 	stfcss	f0, [fp], {-0}
    14dc:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    14e0:	14000089 	strne	r0, [r0], #-137	; 0x89
    14e4:	01000000 	mrseq	r0, (UNDEF: 0)
    14e8:	0000cb9c 	muleq	r0, ip, fp
    14ec:	89b40700 	ldmibhi	r4!, {r8, r9, sl}
    14f0:	01ca0000 	biceq	r0, sl, r0
    14f4:	01080000 	mrseq	r0, (UNDEF: 8)
    14f8:	040c0550 	streq	r0, [ip], #-1360	; 0x550
    14fc:	00200030 	eoreq	r0, r0, r0, lsr r0
    1500:	05340600 	ldreq	r0, [r4, #-1536]!	; 0x600
    1504:	10010000 	andne	r0, r1, r0
    1508:	0000002c 	andeq	r0, r0, ip, lsr #32
    150c:	000089bc 			; <UNDEFINED> instruction: 0x000089bc
    1510:	0000000c 	andeq	r0, r0, ip
    1514:	00f99c01 	rscseq	r9, r9, r1, lsl #24
    1518:	75090000 	strvc	r0, [r9, #-0]
    151c:	2c140100 	ldfcss	f0, [r4], {-0}
    1520:	01000000 	mrseq	r0, (UNDEF: 0)
    1524:	89c40a50 	stmibhi	r4, {r4, r6, r9, fp}^
    1528:	009e0000 	addseq	r0, lr, r0
    152c:	04000000 	streq	r0, [r0], #-0
    1530:	0000052b 	andeq	r0, r0, fp, lsr #10
    1534:	89c81901 	stmibhi	r8, {r0, r8, fp, ip}^
    1538:	00240000 	eoreq	r0, r4, r0
    153c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1540:	00000157 	andeq	r0, r0, r7, asr r1
    1544:	0073750b 	rsbseq	r7, r3, fp, lsl #10
    1548:	002c1901 	eoreq	r1, ip, r1, lsl #18
    154c:	08b90000 	ldmeq	r9!, {}	; <UNPREDICTABLE>
    1550:	72090000 	andvc	r0, r9, #0
    1554:	1a010062 	bne	416e4 <__bss_end__+0x36c3c>
    1558:	0000002c 	andeq	r0, r0, ip, lsr #32
    155c:	d80c5401 	stmdale	ip, {r0, sl, ip, lr}
    1560:	10000089 	andne	r0, r0, r9, lsl #1
    1564:	4d000000 	stcmi	0, cr0, [r0, #-0]
    1568:	0d000001 	stceq	0, cr0, [r0, #-4]
    156c:	01006172 	tsteq	r0, r2, ror r1
    1570:	00002c1c 	andeq	r2, r0, ip, lsl ip
    1574:	0008d700 	andeq	sp, r8, r0, lsl #14
    1578:	89dc0a00 	ldmibhi	ip, {r9, fp}^
    157c:	00cb0000 	sbceq	r0, fp, r0
    1580:	0a000000 	beq	1588 <_start-0x6a78>
    1584:	000089d4 	ldrdeq	r8, [r0], -r4
    1588:	000000cb 	andeq	r0, r0, fp, asr #1
    158c:	03600400 	cmneq	r0, #0, 8
    1590:	22010000 	andcs	r0, r1, #0
    1594:	000089ec 	andeq	r8, r0, ip, ror #19
    1598:	00000014 	andeq	r0, r0, r4, lsl r0
    159c:	01909c01 	orrseq	r9, r0, r1, lsl #24
    15a0:	6d0b0000 	stcvs	0, cr0, [fp, #-0]
    15a4:	22010073 	andcs	r0, r1, #115	; 0x73
    15a8:	0000002c 	andeq	r0, r0, ip, lsr #32
    15ac:	000008ea 	andeq	r0, r0, sl, ror #17
    15b0:	0089fc07 	addeq	pc, r9, r7, lsl #24
    15b4:	0000f900 	andeq	pc, r0, r0, lsl #18
    15b8:	50010800 	andpl	r0, r1, r0, lsl #16
    15bc:	5001f307 	andpl	pc, r1, r7, lsl #6
    15c0:	1e03e80a 	cdpne	8, 0, cr14, cr3, cr10, {0}
    15c4:	f5040000 			; <UNDEFINED> instruction: 0xf5040000
    15c8:	01000004 	tsteq	r0, r4
    15cc:	008a0025 	addeq	r0, sl, r5, lsr #32
    15d0:	00001400 	andeq	r1, r0, r0, lsl #8
    15d4:	ca9c0100 	bgt	fe7019dc <__bss_end__+0xfe6f6f34>
    15d8:	0b000001 	bleq	15e4 <_start-0x6a1c>
    15dc:	00636573 	rsbeq	r6, r3, r3, ror r5
    15e0:	002c2501 	eoreq	r2, ip, r1, lsl #10
    15e4:	090b0000 	stmdbeq	fp, {}	; <UNPREDICTABLE>
    15e8:	10070000 	andne	r0, r7, r0
    15ec:	5700008a 	strpl	r0, [r0, -sl, lsl #1]
    15f0:	08000001 	stmdaeq	r0, {r0}
    15f4:	f3075001 	vhadd.u8	d5, d7, d1
    15f8:	e80a5001 	stmda	sl, {r0, ip, lr}
    15fc:	00001e03 	andeq	r1, r0, r3, lsl #28
    1600:	0005120e 	andeq	r1, r5, lr, lsl #4
    1604:	2ca80200 	sfmcs	f0, 4, [r8]
    1608:	0f000000 	svceq	0x00000000
    160c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1610:	03ee0000 	mvneq	r0, #0
    1614:	00040000 	andeq	r0, r4, r0
    1618:	00000a73 	andeq	r0, r0, r3, ror sl
    161c:	000b0104 	andeq	r0, fp, r4, lsl #2
    1620:	7c010000 	stcvc	0, cr0, [r1], {-0}
    1624:	3b000005 	blcc	1640 <_start-0x69c0>
    1628:	14000002 	strne	r0, [r0], #-2
    162c:	e800008a 	stmda	r0, {r1, r3, r7}
    1630:	47000001 	strmi	r0, [r0, -r1]
    1634:	02000008 	andeq	r0, r0, #8
    1638:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    163c:	43030074 	movwmi	r0, #12404	; 0x3074
    1640:	03000005 	movweq	r0, #5
    1644:	000037d4 	ldrdeq	r3, [r0], -r4
    1648:	07040400 	streq	r0, [r4, -r0, lsl #8]
    164c:	0000017b 	andeq	r0, r0, fp, ror r1
    1650:	76060104 	strvc	r0, [r6], -r4, lsl #2
    1654:	04000000 	streq	r0, [r0], #-0
    1658:	01cc0502 	biceq	r0, ip, r2, lsl #10
    165c:	04040000 	streq	r0, [r4], #-0
    1660:	0001b805 	andeq	fp, r1, r5, lsl #16
    1664:	05080400 	streq	r0, [r8, #-1024]	; 0x400
    1668:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
    166c:	74080104 	strvc	r0, [r8], #-260	; 0x104
    1670:	04000000 	streq	r0, [r0], #-0
    1674:	00980702 	addseq	r0, r8, r2, lsl #14
    1678:	04040000 	streq	r0, [r4], #-0
    167c:	00017607 	andeq	r7, r1, r7, lsl #12
    1680:	07080400 	streq	r0, [r8, -r0, lsl #8]
    1684:	00000171 	andeq	r0, r0, r1, ror r1
    1688:	aa070404 	bge	1c26a0 <__bss_end__+0x1b7bf8>
    168c:	05000001 	streq	r0, [r0, #-1]
    1690:	85040604 	strhi	r0, [r4, #-1540]	; 0x604
    1694:	04000000 	streq	r0, [r0], #-0
    1698:	007d0801 	rsbseq	r0, sp, r1, lsl #16
    169c:	04060000 	streq	r0, [r6], #-0
    16a0:	00000092 	muleq	r0, r2, r0
    16a4:	00008507 	andeq	r8, r0, r7, lsl #10
    16a8:	00850800 	addeq	r0, r5, r0, lsl #16
    16ac:	00a70000 	adceq	r0, r7, r0
    16b0:	76090000 	strvc	r0, [r9], -r0
    16b4:	07000000 	streq	r0, [r0, -r0]
    16b8:	010b0a00 	tsteq	fp, r0, lsl #20
    16bc:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    16c0:	0000007d 	andeq	r0, r0, sp, ror r0
    16c4:	00008a14 	andeq	r8, r0, r4, lsl sl
    16c8:	00000074 	andeq	r0, r0, r4, ror r0
    16cc:	01569c01 	cmpeq	r6, r1, lsl #24
    16d0:	b40b0000 	strlt	r0, [fp], #-0
    16d4:	01000005 	tsteq	r0, r5
    16d8:	00003719 	andeq	r3, r0, r9, lsl r7
    16dc:	00092c00 	andeq	r2, r9, r0, lsl #24
    16e0:	01400c00 	cmpeq	r0, r0, lsl #24
    16e4:	01560000 	cmpeq	r6, r0
    16e8:	03050000 	movweq	r0, #20480	; 0x5000
    16ec:	0000a1b0 			; <UNDEFINED> instruction: 0x0000a1b0
    16f0:	0005e30d 	andeq	lr, r5, sp, lsl #6
    16f4:	7d1c0100 	ldfvcs	f0, [ip, #-0]
    16f8:	01000000 	mrseq	r0, (UNDEF: 0)
    16fc:	05ac0e55 	streq	r0, [ip, #3669]!	; 0xe55
    1700:	1d010000 	stcne	0, cr0, [r1, #-0]
    1704:	00000037 	andeq	r0, r0, r7, lsr r0
    1708:	00000966 	andeq	r0, r0, r6, ror #18
    170c:	008a2c0f 	addeq	r2, sl, pc, lsl #24
    1710:	0003b200 	andeq	fp, r3, r0, lsl #4
    1714:	8a401000 	bhi	100571c <__bss_end__+0xffac74>
    1718:	03b90000 			; <UNDEFINED> instruction: 0x03b90000
    171c:	01310000 	teqeq	r1, r0
    1720:	01110000 	tsteq	r1, r0
    1724:	114a0153 	cmpne	sl, r3, asr r1
    1728:	03055201 	movweq	r5, #20993	; 0x5201
    172c:	0000a1b0 			; <UNDEFINED> instruction: 0x0000a1b0
    1730:	05510111 	ldrbeq	r0, [r1, #-273]	; 0x111
    1734:	00a23003 	adceq	r3, r2, r3
    1738:	50011100 	andpl	r1, r1, r0, lsl #2
    173c:	a1f00305 	mvnsge	r0, r5, lsl #6
    1740:	0f000000 	svceq	0x00000000
    1744:	00008a44 	andeq	r8, r0, r4, asr #20
    1748:	000003cf 	andeq	r0, r0, pc, asr #7
    174c:	008a6412 	addeq	r6, sl, r2, lsl r4
    1750:	0003d600 	andeq	sp, r3, r0, lsl #12
    1754:	52011100 	andpl	r1, r1, #0, 2
    1758:	11007602 	tstne	r0, r2, lsl #12
    175c:	30015101 	andcc	r5, r1, r1, lsl #2
    1760:	02500111 	subseq	r0, r0, #1073741828	; 0x40000004
    1764:	00000075 	andeq	r0, r0, r5, ror r0
    1768:	00009707 	andeq	r9, r0, r7, lsl #14
    176c:	054a0a00 	strbeq	r0, [sl, #-2560]	; 0xa00
    1770:	27010000 	strcs	r0, [r1, -r0]
    1774:	0000007d 	andeq	r0, r0, sp, ror r0
    1778:	00008a88 	andeq	r8, r0, r8, lsl #21
    177c:	0000009c 	muleq	r0, ip, r0
    1780:	02459c01 	subeq	r9, r5, #256	; 0x100
    1784:	b40b0000 	strlt	r0, [fp], #-0
    1788:	01000005 	tsteq	r0, r5
    178c:	00003727 	andeq	r3, r0, r7, lsr #14
    1790:	00098c00 	andeq	r8, r9, r0, lsl #24
    1794:	05a20b00 	streq	r0, [r2, #2816]!	; 0xb00
    1798:	27010000 	strcs	r0, [r1, -r0]
    179c:	00000037 	andeq	r0, r0, r7, lsr r0
    17a0:	000009f8 	strdeq	r0, [r0], -r8
    17a4:	0001400c 	andeq	r4, r1, ip
    17a8:	00025500 	andeq	r5, r2, r0, lsl #10
    17ac:	b8030500 	stmdalt	r3, {r8, sl}
    17b0:	0e0000a1 	cdpeq	0, 0, cr0, cr0, cr1, {5}
    17b4:	00000564 	andeq	r0, r0, r4, ror #10
    17b8:	00372d01 	eorseq	r2, r7, r1, lsl #26
    17bc:	0a720000 	beq	1c817c4 <__bss_end__+0x1c76d1c>
    17c0:	a00f0000 	andge	r0, pc, r0
    17c4:	b200008a 	andlt	r0, r0, #138	; 0x8a
    17c8:	10000003 	andne	r0, r0, r3
    17cc:	00008ab4 			; <UNDEFINED> instruction: 0x00008ab4
    17d0:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
    17d4:	000001e8 	andeq	r0, r0, r8, ror #3
    17d8:	02530111 	subseq	r0, r3, #1073741828	; 0x40000004
    17dc:	01112808 	tsteq	r1, r8, lsl #16
    17e0:	b8030552 	stmdalt	r3, {r1, r4, r6, r8, sl}
    17e4:	110000a1 	smlatbne	r0, r1, r0, r0
    17e8:	03055101 	movweq	r5, #20737	; 0x5101
    17ec:	0000a230 	andeq	sl, r0, r0, lsr r2
    17f0:	05500111 	ldrbeq	r0, [r0, #-273]	; 0x111
    17f4:	00a1f003 	adceq	pc, r1, r3
    17f8:	b80f0000 	stmdalt	pc, {}	; <UNPREDICTABLE>
    17fc:	cf00008a 	svcgt	0x0000008a
    1800:	0f000003 	svceq	0x00000003
    1804:	00008ac4 	andeq	r8, r0, r4, asr #21
    1808:	000000a7 	andeq	r0, r0, r7, lsr #1
    180c:	008ad40f 	addeq	sp, sl, pc, lsl #8
    1810:	0003b200 	andeq	fp, r3, r0, lsl #4
    1814:	8ae81000 	bhi	ffa0581c <__bss_end__+0xff9fad74>
    1818:	03b90000 			; <UNDEFINED> instruction: 0x03b90000
    181c:	02320000 	eorseq	r0, r2, #0
    1820:	01110000 	tsteq	r1, r0
    1824:	2c080253 	sfmcs	f0, 4, [r8], {83}	; 0x53
    1828:	05520111 	ldrbeq	r0, [r2, #-273]	; 0x111
    182c:	00a1b803 	adceq	fp, r1, r3, lsl #16
    1830:	51011100 	mrspl	r1, (UNDEF: 17)
    1834:	a2300305 	eorsge	r0, r0, #335544320	; 0x14000000
    1838:	01110000 	tsteq	r1, r0
    183c:	44030550 	strmi	r0, [r3], #-1360	; 0x550
    1840:	000000a2 	andeq	r0, r0, r2, lsr #1
    1844:	008aec0f 	addeq	lr, sl, pc, lsl #24
    1848:	0003cf00 	andeq	ip, r3, r0, lsl #30
    184c:	8b0c0f00 	blhi	305454 <__bss_end__+0x2fa9ac>
    1850:	00a70000 	adceq	r0, r7, r0
    1854:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1858:	00000085 	andeq	r0, r0, r5, lsl #1
    185c:	00000255 	andeq	r0, r0, r5, asr r2
    1860:	00007609 	andeq	r7, r0, r9, lsl #12
    1864:	07000f00 	streq	r0, [r0, -r0, lsl #30]
    1868:	00000245 	andeq	r0, r0, r5, asr #4
    186c:	0001ee13 	andeq	lr, r1, r3, lsl lr
    1870:	243c0100 	ldrtcs	r0, [ip], #-256	; 0x100
    1874:	5c00008b 	stcpl	0, cr0, [r0], {139}	; 0x8b
    1878:	01000000 	mrseq	r0, (UNDEF: 0)
    187c:	0002c09c 	muleq	r2, ip, r0
    1880:	01400c00 	cmpeq	r0, r0, lsl #24
    1884:	02d00000 	sbcseq	r0, r0, #0
    1888:	03050000 	movweq	r0, #20480	; 0x5000
    188c:	0000a1c8 	andeq	sl, r0, r8, asr #3
    1890:	008b3c0f 	addeq	r3, fp, pc, lsl #24
    1894:	0003b200 	andeq	fp, r3, r0, lsl #4
    1898:	8b501000 	blhi	14058a0 <__bss_end__+0x13fadf8>
    189c:	03b90000 			; <UNDEFINED> instruction: 0x03b90000
    18a0:	02b60000 	adcseq	r0, r6, #0
    18a4:	01110000 	tsteq	r1, r0
    18a8:	3d080253 	sfmcc	f0, 4, [r8, #-332]	; 0xfffffeb4
    18ac:	05520111 	ldrbeq	r0, [r2, #-273]	; 0x111
    18b0:	00a1c803 	adceq	ip, r1, r3, lsl #16
    18b4:	51011100 	mrspl	r1, (UNDEF: 17)
    18b8:	a2300305 	eorsge	r0, r0, #335544320	; 0x14000000
    18bc:	01110000 	tsteq	r1, r0
    18c0:	9c030550 	cfstr32ls	mvfx0, [r3], {80}	; 0x50
    18c4:	000000a2 	andeq	r0, r0, r2, lsr #1
    18c8:	008b540f 	addeq	r5, fp, pc, lsl #8
    18cc:	0003cf00 	andeq	ip, r3, r0, lsl #30
    18d0:	85080000 	strhi	r0, [r8, #-0]
    18d4:	d0000000 	andle	r0, r0, r0
    18d8:	09000002 	stmdbeq	r0, {r1}
    18dc:	00000076 	andeq	r0, r0, r6, ror r0
    18e0:	c007000c 	andgt	r0, r7, ip
    18e4:	14000002 	strne	r0, [r0], #-2
    18e8:	0000055a 	andeq	r0, r0, sl, asr r5
    18ec:	8b804601 	blhi	fe0130f8 <__bss_end__+0xfe008650>
    18f0:	00180000 	andseq	r0, r8, r0
    18f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    18f8:	0005bb15 	andeq	fp, r5, r5, lsl fp
    18fc:	7d4f0100 	stfvce	f0, [pc, #-0]	; 1904 <_start-0x66fc>
    1900:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    1904:	1000008b 	andne	r0, r0, fp, lsl #1
    1908:	01000000 	mrseq	r0, (UNDEF: 0)
    190c:	05cc139c 	strbeq	r1, [ip, #924]	; 0x39c
    1910:	53010000 	movwpl	r0, #4096	; 0x1000
    1914:	00008ba8 	andeq	r8, r0, r8, lsr #23
    1918:	00000054 	andeq	r0, r0, r4, asr r0
    191c:	03709c01 	cmneq	r0, #256	; 0x100
    1920:	8d0b0000 	stchi	0, cr0, [fp, #-0]
    1924:	01000005 	tsteq	r0, r5
    1928:	00003753 	andeq	r3, r0, r3, asr r7
    192c:	000a9f00 	andeq	r9, sl, r0, lsl #30
    1930:	01400c00 	cmpeq	r0, r0, lsl #24
    1934:	03800000 	orreq	r0, r0, #0
    1938:	03050000 	movweq	r0, #20480	; 0x5000
    193c:	0000a1d8 	ldrdeq	sl, [r0], -r8
    1940:	008bc00f 	addeq	ip, fp, pc
    1944:	0003b200 	andeq	fp, r3, r0, lsl #4
    1948:	8bd41000 	blhi	ff505950 <__bss_end__+0xff4faea8>
    194c:	03b90000 			; <UNDEFINED> instruction: 0x03b90000
    1950:	03660000 	cmneq	r6, #0
    1954:	01110000 	tsteq	r1, r0
    1958:	54080253 	strpl	r0, [r8], #-595	; 0x253
    195c:	05520111 	ldrbeq	r0, [r2, #-273]	; 0x111
    1960:	00a1d803 	adceq	sp, r1, r3, lsl #16
    1964:	51011100 	mrspl	r1, (UNDEF: 17)
    1968:	a2300305 	eorsge	r0, r0, #335544320	; 0x14000000
    196c:	01110000 	tsteq	r1, r0
    1970:	9c030550 	cfstr32ls	mvfx0, [r3], {80}	; 0x50
    1974:	000000a2 	andeq	r0, r0, r2, lsr #1
    1978:	008bd80f 	addeq	sp, fp, pc, lsl #16
    197c:	0003cf00 	andeq	ip, r3, r0, lsl #30
    1980:	85080000 	strhi	r0, [r8, #-0]
    1984:	80000000 	andhi	r0, r0, r0
    1988:	09000003 	stmdbeq	r0, {r0, r1}
    198c:	00000076 	andeq	r0, r0, r6, ror r0
    1990:	70070016 	andvc	r0, r7, r6, lsl r0
    1994:	0d000003 	stceq	0, cr0, [r0, #-12]
    1998:	0000059b 	muleq	r0, fp, r5
    199c:	00250801 	eoreq	r0, r5, r1, lsl #16
    19a0:	03050000 	movweq	r0, #20480	; 0x5000
    19a4:	0000aa7c 	andeq	sl, r0, ip, ror sl
    19a8:	0005c30d 	andeq	ip, r5, sp, lsl #6
    19ac:	7f0b0100 	svcvc	0x000b0100
    19b0:	05000000 	streq	r0, [r0, #-0]
    19b4:	00aa8003 	adceq	r8, sl, r3
    19b8:	05ef1600 	strbeq	r1, [pc, #1536]!	; 1fc0 <_start-0x6040>
    19bc:	05010000 	streq	r0, [r1, #-0]
    19c0:	00000085 	andeq	r0, r0, r5, lsl #1
    19c4:	0001fb17 	andeq	pc, r1, r7, lsl fp	; <UNPREDICTABLE>
    19c8:	181e0200 	ldmdane	lr, {r9}
    19cc:	0000022a 	andeq	r0, r0, sl, lsr #4
    19d0:	00252902 	eoreq	r2, r5, r2, lsl #18
    19d4:	03cf0000 	biceq	r0, pc, #0
    19d8:	8c190000 	ldchi	0, cr0, [r9], {-0}
    19dc:	1a000000 	bne	19e4 <_start-0x661c>
    19e0:	00821700 	addeq	r1, r2, r0, lsl #14
    19e4:	66020000 	strvs	r0, [r2], -r0
    19e8:	0005751b 	andeq	r7, r5, fp, lsl r5
    19ec:	7d1b0400 	cfldrsvc	mvf0, [fp, #-0]
    19f0:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    19f4:	0000007d 	andeq	r0, r0, sp, ror r0
    19f8:	00002519 	andeq	r2, r0, r9, lsl r5
    19fc:	002c1900 	eoreq	r1, ip, r0, lsl #18
    1a00:	00000000 	andeq	r0, r0, r0
    1a04:	000009e0 	andeq	r0, r0, r0, ror #19
    1a08:	0bfa0004 	bleq	ffe81a20 <__bss_end__+0xffe76f78>
    1a0c:	01040000 	mrseq	r0, (UNDEF: 4)
    1a10:	0000000b 	andeq	r0, r0, fp
    1a14:	0006cd01 	andeq	ip, r6, r1, lsl #26
    1a18:	00023b00 	andeq	r3, r2, r0, lsl #22
    1a1c:	008bfc00 	addeq	pc, fp, r0, lsl #24
    1a20:	00049800 	andeq	r9, r4, r0, lsl #16
    1a24:	0009c100 	andeq	ip, r9, r0, lsl #2
    1a28:	05040200 	streq	r0, [r4, #-512]	; 0x200
    1a2c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1a30:	7b070403 	blvc	1c2a44 <__bss_end__+0x1b7f9c>
    1a34:	03000001 	movweq	r0, #1
    1a38:	00760601 	rsbseq	r0, r6, r1, lsl #12
    1a3c:	02030000 	andeq	r0, r3, #0
    1a40:	0001cc05 	andeq	ip, r1, r5, lsl #24
    1a44:	05040300 	streq	r0, [r4, #-768]	; 0x300
    1a48:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    1a4c:	b3050803 	movwlt	r0, #22531	; 0x5803
    1a50:	03000001 	movweq	r0, #1
    1a54:	00740801 	rsbseq	r0, r4, r1, lsl #16
    1a58:	02030000 	andeq	r0, r3, #0
    1a5c:	00009807 	andeq	r9, r0, r7, lsl #16
    1a60:	01d60400 	bicseq	r0, r6, r0, lsl #8
    1a64:	34040000 	strcc	r0, [r4], #-0
    1a68:	00000068 	andeq	r0, r0, r8, rrx
    1a6c:	76070403 	strvc	r0, [r7], -r3, lsl #8
    1a70:	03000001 	movweq	r0, #1
    1a74:	01710708 	cmneq	r1, r8, lsl #14
    1a78:	04030000 	streq	r0, [r3], #-0
    1a7c:	0001aa07 	andeq	sl, r1, r7, lsl #20
    1a80:	03040500 	movweq	r0, #17664	; 0x4500
    1a84:	007d0801 	rsbseq	r0, sp, r1, lsl #16
    1a88:	04060000 	streq	r0, [r6], #-0
    1a8c:	0000008c 	andeq	r0, r0, ip, lsl #1
    1a90:	00007f07 	andeq	r7, r0, r7, lsl #30
    1a94:	007f0800 	rsbseq	r0, pc, r0, lsl #16
    1a98:	00a10000 	adceq	r0, r1, r0
    1a9c:	76090000 	strvc	r0, [r9], -r0
    1aa0:	07000000 	streq	r0, [r0, -r0]
    1aa4:	01c10a00 	biceq	r0, r1, r0, lsl #20
    1aa8:	20500000 	subscs	r0, r0, r0
    1aac:	00f6dd03 	rscseq	sp, r6, r3, lsl #26
    1ab0:	630b0000 	movwvs	r0, #45056	; 0xb000
    1ab4:	03000001 	movweq	r0, #1
    1ab8:	0000f6df 	ldrdeq	pc, [r0], -pc	; <UNPREDICTABLE>
    1abc:	000b0000 	andeq	r0, fp, r0
    1ac0:	03000000 	movweq	r0, #0
    1ac4:	000106e1 	andeq	r0, r1, r1, ror #13
    1ac8:	740c4000 	strvc	r4, [ip], #-0
    1acc:	03006469 	movweq	r6, #1129	; 0x469
    1ad0:	00005de2 	andeq	r5, r0, r2, ror #27
    1ad4:	660c4400 	strvs	r4, [ip], -r0, lsl #8
    1ad8:	e403006e 	str	r0, [r3], #-110	; 0x6e
    1adc:	00000117 	andeq	r0, r0, r7, lsl r1
    1ae0:	72610c48 	rsbvc	r0, r1, #72, 24	; 0x4800
    1ae4:	e5030067 	str	r0, [r3, #-103]	; 0x67
    1ae8:	0000007d 	andeq	r0, r0, sp, ror r0
    1aec:	00050b4c 	andeq	r0, r5, ip, asr #22
    1af0:	e7030000 	str	r0, [r3, -r0]
    1af4:	0000011d 	andeq	r0, r0, sp, lsl r1
    1af8:	5d080050 	stcpl	0, cr0, [r8, #-320]	; 0xfffffec0
    1afc:	06000000 	streq	r0, [r0], -r0
    1b00:	09000001 	stmdbeq	r0, {r0}
    1b04:	00000076 	andeq	r0, r0, r6, ror r0
    1b08:	0406000f 	streq	r0, [r6], #-15
    1b0c:	000000a1 	andeq	r0, r0, r1, lsr #1
    1b10:	0001170d 	andeq	r1, r1, sp, lsl #14
    1b14:	007d0e00 	rsbseq	r0, sp, r0, lsl #28
    1b18:	06000000 	streq	r0, [r0], -r0
    1b1c:	00010c04 	andeq	r0, r1, r4, lsl #24
    1b20:	005d0800 	subseq	r0, sp, r0, lsl #16
    1b24:	012e0000 	teqeq	lr, r0
    1b28:	760f0000 	strvc	r0, [pc], -r0
    1b2c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    1b30:	88040007 	stmdahi	r4, {r0, r1, r2}
    1b34:	03000001 	movweq	r0, #1
    1b38:	0000a1e8 	andeq	sl, r0, r8, ror #3
    1b3c:	00511000 	subseq	r1, r1, r0
    1b40:	6808010c 	stmdavs	r8, {r2, r3, r8}
    1b44:	0b000001 	bleq	1b50 <_start-0x64b0>
    1b48:	000006b7 			; <UNDEFINED> instruction: 0x000006b7
    1b4c:	01680901 	cmneq	r8, r1, lsl #18
    1b50:	0b000000 	bleq	1b58 <_start-0x64a8>
    1b54:	00000698 	muleq	r0, r8, r6
    1b58:	01680901 	cmneq	r8, r1, lsl #18
    1b5c:	0c040000 	stceq	0, cr0, [r4], {-0}
    1b60:	00746e63 	rsbseq	r6, r4, r3, ror #28
    1b64:	002c0a01 	eoreq	r0, ip, r1, lsl #20
    1b68:	00080000 	andeq	r0, r8, r0
    1b6c:	012e0406 	teqeq	lr, r6, lsl #8
    1b70:	51110000 	tstpl	r1, r0
    1b74:	0100745f 	tsteq	r0, pc, asr r4
    1b78:	0001390b 	andeq	r3, r1, fp, lsl #18
    1b7c:	06371200 	ldrteq	r1, [r7], -r0, lsl #4
    1b80:	10010000 	andne	r0, r1, r0
    1b84:	0000002c 	andeq	r0, r0, ip, lsr #32
    1b88:	00008bfc 	strdeq	r8, [r0], -ip
    1b8c:	00000008 	andeq	r0, r0, r8
    1b90:	01a09c01 	lsleq	r9, r1, #24
    1b94:	71130000 	tstvc	r3, r0
    1b98:	a0100100 	andsge	r0, r0, r0, lsl #2
    1b9c:	cb000001 	blgt	1ba8 <_start-0x6458>
    1ba0:	0000000a 	andeq	r0, r0, sl
    1ba4:	016e0406 	cmneq	lr, r6, lsl #8
    1ba8:	ae140000 	cdpge	0, 1, cr0, cr4, cr0, {0}
    1bac:	01000006 	tsteq	r0, r6
    1bb0:	008c042b 	addeq	r0, ip, fp, lsr #8
    1bb4:	00003800 	andeq	r3, r0, r0, lsl #16
    1bb8:	d29c0100 	addsle	r0, ip, #0, 2
    1bbc:	15000001 	strne	r0, [r0, #-1]
    1bc0:	2b010071 	blcs	41d8c <__bss_end__+0x372e4>
    1bc4:	000001a0 	andeq	r0, r0, r0, lsr #3
    1bc8:	65155001 	ldrvs	r5, [r5, #-1]
    1bcc:	682b0100 	stmdavs	fp!, {r8}
    1bd0:	01000001 	tsteq	r0, r1
    1bd4:	fe140051 	mrc2	0, 0, r0, cr4, cr1, {2}
    1bd8:	01000005 	tsteq	r0, r5
    1bdc:	008c3c37 	addeq	r3, ip, r7, lsr ip
    1be0:	00002800 	andeq	r2, r0, r0, lsl #16
    1be4:	fe9c0100 	cdp2	1, 9, cr0, cr12, cr0, {0}
    1be8:	15000001 	strne	r0, [r0, #-1]
    1bec:	37010071 	smlsdxcc	r1, r1, r0, r0
    1bf0:	000001a0 	andeq	r0, r0, r0, lsr #3
    1bf4:	65155001 	ldrvs	r5, [r5, #-1]
    1bf8:	68370100 	ldmdavs	r7!, {r8}
    1bfc:	01000001 	tsteq	r0, r1
    1c00:	a6140051 			; <UNDEFINED> instruction: 0xa6140051
    1c04:	02000006 	andeq	r0, r0, #6
    1c08:	008c6428 	addeq	r6, ip, r8, lsr #8
    1c0c:	00001800 	andeq	r1, r0, r0, lsl #16
    1c10:	3c9c0100 	ldfccs	f0, [ip], {0}
    1c14:	13000002 	movwne	r0, #2
    1c18:	02006874 	andeq	r6, r0, #116, 16	; 0x740000
    1c1c:	00016828 	andeq	r6, r1, r8, lsr #16
    1c20:	000aec00 	andeq	lr, sl, r0, lsl #24
    1c24:	8c741600 	ldclhi	6, cr1, [r4], #-0
    1c28:	01d20000 	bicseq	r0, r2, r0
    1c2c:	01170000 	tsteq	r7, r0
    1c30:	01f30351 	mvnseq	r0, r1, asr r3
    1c34:	50011750 	andpl	r1, r1, r0, asr r7
    1c38:	aa840305 	bge	fe102854 <__bss_end__+0xfe0f7dac>
    1c3c:	00000000 	andeq	r0, r0, r0
    1c40:	00067912 	andeq	r7, r6, r2, lsl r9
    1c44:	25120100 	ldrcs	r0, [r2, #-256]	; 0x100
    1c48:	7c000000 	stcvc	0, cr0, [r0], {-0}
    1c4c:	8400008c 	strhi	r0, [r0], #-140	; 0x8c
    1c50:	01000000 	mrseq	r0, (UNDEF: 0)
    1c54:	0003069c 	muleq	r3, ip, r6
    1c58:	00711300 	rsbseq	r1, r1, r0, lsl #6
    1c5c:	01a01201 	lsleq	r1, r1, #4
    1c60:	0b180000 	bleq	601c68 <__bss_end__+0x5f71c0>
    1c64:	40180000 	andsmi	r0, r8, r0
    1c68:	06000001 	streq	r0, [r0], -r1
    1c6c:	05000003 	streq	r0, [r0, #-3]
    1c70:	00a2dc03 	adceq	sp, r2, r3, lsl #24
    1c74:	8c941900 	ldchi	9, cr1, [r4], {0}
    1c78:	01790000 	cmneq	r9, r0
    1c7c:	02850000 	addeq	r0, r5, #0
    1c80:	01170000 	tsteq	r7, r0
    1c84:	00740250 	rsbseq	r0, r4, r0, asr r2
    1c88:	8ca01a00 	vstmiahi	r0!, {s2-s1}
    1c8c:	09890000 	stmibeq	r9, {}	; <UNPREDICTABLE>
    1c90:	b4190000 	ldrlt	r0, [r9], #-0
    1c94:	9000008c 	andls	r0, r0, ip, lsl #1
    1c98:	bc000009 	stclt	0, cr0, [r0], {9}
    1c9c:	17000002 	strne	r0, [r0, -r2]
    1ca0:	45015301 	strmi	r5, [r1, #-769]	; 0x301
    1ca4:	05520117 	ldrbeq	r0, [r2, #-279]	; 0x117
    1ca8:	00a2dc03 	adceq	sp, r2, r3, lsl #24
    1cac:	51011700 	tstpl	r1, r0, lsl #14
    1cb0:	a3580305 	cmpge	r8, #335544320	; 0x14000000
    1cb4:	01170000 	tsteq	r7, r0
    1cb8:	38030550 	stmdacc	r3, {r4, r6, r8, sl}
    1cbc:	000000a3 	andeq	r0, r0, r3, lsr #1
    1cc0:	008cb81a 	addeq	fp, ip, sl, lsl r8
    1cc4:	0009a600 	andeq	sl, r9, r0, lsl #12
    1cc8:	8cc81a00 	vstmiahi	r8, {s3-s2}
    1ccc:	09890000 	stmibeq	r9, {}	; <UNPREDICTABLE>
    1cd0:	dc190000 	ldcle	0, cr0, [r9], {-0}
    1cd4:	9000008c 	andls	r0, r0, ip, lsl #1
    1cd8:	fc000009 	stc2	0, cr0, [r0], {9}
    1cdc:	17000002 	strne	r0, [r0, -r2]
    1ce0:	46015301 	strmi	r5, [r1], -r1, lsl #6
    1ce4:	05520117 	ldrbeq	r0, [r2, #-279]	; 0x117
    1ce8:	00a2dc03 	adceq	sp, r2, r3, lsl #24
    1cec:	51011700 	tstpl	r1, r0, lsl #14
    1cf0:	a3580305 	cmpge	r8, #335544320	; 0x14000000
    1cf4:	01170000 	tsteq	r7, r0
    1cf8:	64030550 	strvs	r0, [r3], #-1360	; 0x550
    1cfc:	000000a3 	andeq	r0, r0, r3, lsr #1
    1d00:	008ce01a 	addeq	lr, ip, sl, lsl r0
    1d04:	0009a600 	andeq	sl, r9, r0, lsl #12
    1d08:	91070000 	mrsls	r0, (UNDEF: 7)
    1d0c:	12000000 	andne	r0, r0, #0
    1d10:	00000681 	andeq	r0, r0, r1, lsl #13
    1d14:	01681b01 	cmneq	r8, r1, lsl #22
    1d18:	8d000000 	stchi	0, cr0, [r0, #-0]
    1d1c:	00980000 	addseq	r0, r8, r0
    1d20:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d24:	000003e4 	andeq	r0, r0, r4, ror #7
    1d28:	01007113 	tsteq	r0, r3, lsl r1
    1d2c:	0001a01b 	andeq	sl, r1, fp, lsl r0
    1d30:	000b4c00 	andeq	r4, fp, r0, lsl #24
    1d34:	01401800 	cmpeq	r0, r0, lsl #16
    1d38:	03f40000 	mvnseq	r0, #0
    1d3c:	03050000 	movweq	r0, #20480	; 0x5000
    1d40:	0000a2e4 	andeq	sl, r0, r4, ror #5
    1d44:	0100651b 	tsteq	r0, fp, lsl r5
    1d48:	0001681e 	andeq	r6, r1, lr, lsl r8
    1d4c:	000b9f00 	andeq	r9, fp, r0, lsl #30
    1d50:	8d101a00 	vldrhi	s2, [r0, #-0]
    1d54:	09890000 	stmibeq	r9, {}	; <UNPREDICTABLE>
    1d58:	24190000 	ldrcs	r0, [r9], #-0
    1d5c:	9000008d 	andls	r0, r0, sp, lsl #1
    1d60:	84000009 	strhi	r0, [r0], #-9
    1d64:	17000003 	strne	r0, [r0, -r3]
    1d68:	4c015301 	stcmi	3, cr5, [r1], {1}
    1d6c:	05520117 	ldrbeq	r0, [r2, #-279]	; 0x117
    1d70:	00a2e403 	adceq	lr, r2, r3, lsl #8
    1d74:	51011700 	tstpl	r1, r0, lsl #14
    1d78:	a3580305 	cmpge	r8, #335544320	; 0x14000000
    1d7c:	01170000 	tsteq	r7, r0
    1d80:	94030550 	strls	r0, [r3], #-1360	; 0x550
    1d84:	000000a3 	andeq	r0, r0, r3, lsr #1
    1d88:	008d281a 	addeq	r2, sp, sl, lsl r8
    1d8c:	0009a600 	andeq	sl, r9, r0, lsl #12
    1d90:	8d381900 	ldchi	9, cr1, [r8, #-0]
    1d94:	023c0000 	eorseq	r0, ip, #0
    1d98:	03a20000 			; <UNDEFINED> instruction: 0x03a20000
    1d9c:	01170000 	tsteq	r7, r0
    1da0:	01f30350 	mvnseq	r0, r0, asr r3
    1da4:	441a0050 	ldrmi	r0, [sl], #-80	; 0x50
    1da8:	8900008d 	stmdbhi	r0, {r0, r2, r3, r7}
    1dac:	19000009 	stmdbne	r0, {r0, r3}
    1db0:	00008d58 	andeq	r8, r0, r8, asr sp
    1db4:	00000990 	muleq	r0, r0, r9
    1db8:	000003da 	ldrdeq	r0, [r0], -sl
    1dbc:	02530117 	subseq	r0, r3, #-1073741819	; 0xc0000005
    1dc0:	01172008 	tsteq	r7, r8
    1dc4:	e4030552 	str	r0, [r3], #-1362	; 0x552
    1dc8:	170000a2 	strne	r0, [r0, -r2, lsr #1]
    1dcc:	03055101 	movweq	r5, #20737	; 0x5101
    1dd0:	0000a358 	andeq	sl, r0, r8, asr r3
    1dd4:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    1dd8:	00a3bc03 	adceq	fp, r3, r3, lsl #24
    1ddc:	5c1a0000 	ldcpl	0, cr0, [sl], {-0}
    1de0:	a600008d 	strge	r0, [r0], -sp, lsl #1
    1de4:	00000009 	andeq	r0, r0, r9
    1de8:	00007f08 	andeq	r7, r0, r8, lsl #30
    1dec:	0003f400 	andeq	pc, r3, r0, lsl #8
    1df0:	00760900 	rsbseq	r0, r6, r0, lsl #18
    1df4:	00050000 	andeq	r0, r5, r0
    1df8:	0003e407 	andeq	lr, r3, r7, lsl #8
    1dfc:	069d1200 	ldreq	r1, [sp], r0, lsl #4
    1e00:	1b020000 	blne	81e08 <__bss_end__+0x77360>
    1e04:	00000168 	andeq	r0, r0, r8, ror #2
    1e08:	00008d98 	muleq	r0, r8, sp
    1e0c:	00000084 	andeq	r0, r0, r4, lsl #1
    1e10:	04a19c01 	strteq	r9, [r1], #3073	; 0xc01
    1e14:	741b0000 	ldrvc	r0, [fp], #-0
    1e18:	681c0200 	ldmdavs	ip, {r9}
    1e1c:	bd000001 	stclt	0, cr0, [r0, #-4]
    1e20:	1800000b 	stmdane	r0, {r0, r1, r3}
    1e24:	00000140 	andeq	r0, r0, r0, asr #2
    1e28:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
    1e2c:	a2ec0305 	rscge	r0, ip, #335544320	; 0x14000000
    1e30:	a4190000 	ldrge	r0, [r9], #-0
    1e34:	0b00008d 	bleq	2070 <_start-0x5f90>
    1e38:	45000003 	strmi	r0, [r0, #-3]
    1e3c:	17000004 	strne	r0, [r0, -r4]
    1e40:	03055001 	movweq	r5, #20481	; 0x5001
    1e44:	0000aa84 	andeq	sl, r0, r4, lsl #21
    1e48:	8db81900 	ldchi	9, cr1, [r8]
    1e4c:	09ad0000 	stmibeq	sp!, {}	; <UNPREDICTABLE>
    1e50:	045f0000 	ldrbeq	r0, [pc], #-0	; 1e58 <_start-0x61a8>
    1e54:	01170000 	tsteq	r7, r0
    1e58:	17380151 			; <UNDEFINED> instruction: 0x17380151
    1e5c:	0a035001 	beq	d5e68 <__bss_end__+0xcb3c0>
    1e60:	1a002050 	bne	9fa8 <__FUNCTION__.4218+0x4c>
    1e64:	00008dd4 	ldrdeq	r8, [r0], -r4
    1e68:	00000989 	andeq	r0, r0, r9, lsl #19
    1e6c:	008de819 	addeq	lr, sp, r9, lsl r8
    1e70:	00099000 	andeq	r9, r9, r0
    1e74:	00049700 	andeq	r9, r4, r0, lsl #14
    1e78:	53011700 	movwpl	r1, #5888	; 0x1700
    1e7c:	17230802 	strne	r0, [r3, -r2, lsl #16]!
    1e80:	03055201 	movweq	r5, #20993	; 0x5201
    1e84:	0000a2ec 	andeq	sl, r0, ip, ror #5
    1e88:	05510117 	ldrbeq	r0, [r1, #-279]	; 0x117
    1e8c:	00a43803 	adceq	r3, r4, r3, lsl #16
    1e90:	50011700 	andpl	r1, r1, r0, lsl #14
    1e94:	a3d80305 	bicsge	r0, r8, #335544320	; 0x14000000
    1e98:	1a000000 	bne	1ea0 <_start-0x6160>
    1e9c:	00008dec 	andeq	r8, r0, ip, ror #27
    1ea0:	000009a6 	andeq	r0, r0, r6, lsr #19
    1ea4:	007f0800 	rsbseq	r0, pc, r0, lsl #16
    1ea8:	04b10000 	ldrteq	r0, [r1], #0
    1eac:	76090000 	strvc	r0, [r9], -r0
    1eb0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1eb4:	04a10700 	strteq	r0, [r1], #1792	; 0x700
    1eb8:	df1c0000 	svcle	0x001c0000
    1ebc:	02000001 	andeq	r0, r0, #1
    1ec0:	00016814 	andeq	r6, r1, r4, lsl r8
    1ec4:	008e1c00 	addeq	r1, lr, r0, lsl #24
    1ec8:	00001000 	andeq	r1, r0, r0
    1ecc:	1d9c0100 	ldfnes	f0, [ip]
    1ed0:	0000008f 	andeq	r0, r0, pc, lsl #1
    1ed4:	01683202 	cmneq	r8, r2, lsl #4
    1ed8:	8e2c0000 	cdphi	0, 2, cr0, cr12, cr0, {0}
    1edc:	004c0000 	subeq	r0, ip, r0
    1ee0:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ee4:	00000539 	andeq	r0, r0, r9, lsr r5
    1ee8:	00013b1e 	andeq	r3, r1, lr, lsl fp
    1eec:	17320200 	ldrne	r0, [r2, -r0, lsl #4]!
    1ef0:	e6000001 	str	r0, [r0], -r1
    1ef4:	1300000b 	movwne	r0, #11
    1ef8:	00677261 	rsbeq	r7, r7, r1, ror #4
    1efc:	007d3202 	rsbseq	r3, sp, r2, lsl #4
    1f00:	0c040000 	stceq	0, cr0, [r4], {-0}
    1f04:	741b0000 	ldrvc	r0, [fp], #-0
    1f08:	68330200 	ldmdavs	r3!, {r9}
    1f0c:	22000001 	andcs	r0, r0, #1
    1f10:	1f00000c 	svcne	0x0000000c
    1f14:	0000063f 	andeq	r0, r0, pc, lsr r6
    1f18:	3c1a3c02 	ldccc	12, cr3, [sl], {2}
    1f1c:	f900008e 			; <UNDEFINED> instruction: 0xf900008e
    1f20:	16000003 	strne	r0, [r0], -r3
    1f24:	00008e68 	andeq	r8, r0, r8, ror #28
    1f28:	000001a6 	andeq	r0, r0, r6, lsr #3
    1f2c:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
    1f30:	01170074 	tsteq	r7, r4, ror r0
    1f34:	98030550 	stmdals	r3, {r4, r6, r8, sl}
    1f38:	000000aa 	andeq	r0, r0, sl, lsr #1
    1f3c:	015a2000 	cmpeq	sl, r0
    1f40:	45020000 	strmi	r0, [r2, #-0]
    1f44:	00008e78 	andeq	r8, r0, r8, ror lr
    1f48:	00000058 	andeq	r0, r0, r8, asr r0
    1f4c:	05b79c01 	ldreq	r9, [r7, #3073]!	; 0xc01
    1f50:	0e1e0000 	cdpeq	0, 1, cr0, cr14, cr0, {0}
    1f54:	02000006 	andeq	r0, r0, #6
    1f58:	00002545 	andeq	r2, r0, r5, asr #10
    1f5c:	000c4000 	andeq	r4, ip, r0
    1f60:	06e12100 	strbteq	r2, [r1], r0, lsl #2
    1f64:	4f020000 	svcmi	0x00020000
    1f68:	00000168 	andeq	r0, r0, r8, ror #2
    1f6c:	8c195401 	cfldrshi	mvf5, [r9], {1}
    1f70:	fe00008e 	cdp2	0, 0, cr0, cr0, cr14, {4}
    1f74:	7e000001 	cdpvc	0, 0, cr0, cr0, cr1, {0}
    1f78:	17000005 	strne	r0, [r0, -r5]
    1f7c:	74025001 	strvc	r5, [r2], #-1
    1f80:	94190000 	ldrls	r0, [r9], #-0
    1f84:	3c00008e 	stccc	0, cr0, [r0], {142}	; 0x8e
    1f88:	92000002 	andls	r0, r0, #2
    1f8c:	17000005 	strne	r0, [r0, -r5]
    1f90:	75025001 	strvc	r5, [r2, #-1]
    1f94:	a4190014 	ldrge	r0, [r9], #-20
    1f98:	0b00008e 	bleq	21d8 <_start-0x5e28>
    1f9c:	a6000003 	strge	r0, [r0], -r3
    1fa0:	17000005 	strne	r0, [r0, -r5]
    1fa4:	75025001 	strvc	r5, [r2, #-1]
    1fa8:	c8160014 	ldmdagt	r6, {r2, r4}
    1fac:	c700008e 	strgt	r0, [r0, -lr, lsl #1]
    1fb0:	17000009 	strne	r0, [r0, -r9]
    1fb4:	74025001 	strvc	r5, [r2], #-1
    1fb8:	20000000 	andcs	r0, r0, r0
    1fbc:	000001a0 	andeq	r0, r0, r0, lsr #3
    1fc0:	8ed05c02 	cdphi	12, 13, cr5, cr0, cr2, {0}
    1fc4:	00500000 	subseq	r0, r0, r0
    1fc8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1fcc:	00000639 	andeq	r0, r0, r9, lsr r6
    1fd0:	008ee422 	addeq	lr, lr, r2, lsr #8
    1fd4:	00003c00 	andeq	r3, r0, r0, lsl #24
    1fd8:	00062500 	andeq	r2, r6, r0, lsl #10
    1fdc:	06e12100 	strbteq	r2, [r1], r0, lsl #2
    1fe0:	66020000 	strvs	r0, [r2], -r0
    1fe4:	00000168 	andeq	r0, r0, r8, ror #2
    1fe8:	fc195501 	ldc2	5, cr5, [r9], {1}
    1fec:	a600008e 	strge	r0, [r0], -lr, lsl #1
    1ff0:	00000001 	andeq	r0, r0, r1
    1ff4:	17000006 	strne	r0, [r0, -r6]
    1ff8:	75025101 	strvc	r5, [r2, #-257]	; 0x101
    1ffc:	50011700 	andpl	r1, r1, r0, lsl #14
    2000:	00007602 	andeq	r7, r0, r2, lsl #12
    2004:	008f0419 	addeq	r0, pc, r9, lsl r4	; <UNPREDICTABLE>
    2008:	00030b00 	andeq	r0, r3, r0, lsl #22
    200c:	00061400 	andeq	r1, r6, r0, lsl #8
    2010:	50011700 	andpl	r1, r1, r0, lsl #14
    2014:	00007602 	andeq	r7, r0, r2, lsl #12
    2018:	008f1416 	addeq	r1, pc, r6, lsl r4	; <UNPREDICTABLE>
    201c:	0009c700 	andeq	ip, r9, r0, lsl #14
    2020:	50011700 	andpl	r1, r1, r0, lsl #14
    2024:	00007502 	andeq	r7, r0, r2, lsl #10
    2028:	8edc1600 	cdphi	6, 13, cr1, cr12, cr0, {0}
    202c:	023c0000 	eorseq	r0, ip, #0
    2030:	01170000 	tsteq	r7, r0
    2034:	98030550 	stmdals	r3, {r4, r6, r8, sl}
    2038:	000000aa 	andeq	r0, r0, sl, lsr #1
    203c:	06242000 	strteq	r2, [r4], -r0
    2040:	8c020000 	stchi	0, cr0, [r2], {-0}
    2044:	00008f20 	andeq	r8, r0, r0, lsr #30
    2048:	0000009c 	muleq	r0, ip, r0
    204c:	07319c01 	ldreq	r9, [r1, -r1, lsl #24]!
    2050:	1d230000 	stcne	0, cr0, [r3, #-0]
    2054:	02000006 	andeq	r0, r0, #6
    2058:	00002c8f 	andeq	r2, r0, pc, lsl #25
    205c:	000c6100 	andeq	r6, ip, r0, lsl #2
    2060:	06172300 	ldreq	r2, [r7], -r0, lsl #6
    2064:	90020000 	andls	r0, r2, r0
    2068:	0000002c 	andeq	r0, r0, ip, lsr #32
    206c:	00000c7f 	andeq	r0, r0, pc, ror ip
    2070:	02006e1b 	andeq	r6, r0, #432	; 0x1b0
    2074:	00002c91 	muleq	r0, r1, ip
    2078:	000cb300 	andeq	fp, ip, r0, lsl #6
    207c:	01401800 	cmpeq	r0, r0, lsl #16
    2080:	07410000 	strbeq	r0, [r1, -r0]
    2084:	03050000 	movweq	r0, #20480	; 0x5000
    2088:	0000a2f8 	strdeq	sl, [r0], -r8
    208c:	008f3419 	addeq	r3, pc, r9, lsl r4	; <UNPREDICTABLE>
    2090:	00017900 	andeq	r7, r1, r0, lsl #18
    2094:	00069c00 	andeq	r9, r6, r0, lsl #24
    2098:	50011700 	andpl	r1, r1, r0, lsl #14
    209c:	00007402 	andeq	r7, r0, r2, lsl #8
    20a0:	008f4019 	addeq	r4, pc, r9, lsl r0	; <UNPREDICTABLE>
    20a4:	00017900 	andeq	r7, r1, r0, lsl #18
    20a8:	0006b000 	andeq	fp, r6, r0
    20ac:	50011700 	andpl	r1, r1, r0, lsl #14
    20b0:	00147402 	andseq	r7, r4, r2, lsl #8
    20b4:	008f581a 	addeq	r5, pc, sl, lsl r8	; <UNPREDICTABLE>
    20b8:	00098900 	andeq	r8, r9, r0, lsl #18
    20bc:	8f801900 	svchi	0x00801900
    20c0:	09900000 	ldmibeq	r0, {}	; <UNPREDICTABLE>
    20c4:	06fd0000 	ldrbteq	r0, [sp], r0
    20c8:	01170000 	tsteq	r7, r0
    20cc:	95080253 	strls	r0, [r8, #-595]	; 0x253
    20d0:	05520117 	ldrbeq	r0, [r2, #-279]	; 0x117
    20d4:	00a2f803 	adceq	pc, r2, r3, lsl #16
    20d8:	51011700 	tstpl	r1, r0, lsl #14
    20dc:	a4380305 	ldrtge	r0, [r8], #-773	; 0x305
    20e0:	01170000 	tsteq	r7, r0
    20e4:	4c030550 	cfstr32mi	mvfx0, [r3], {80}	; 0x50
    20e8:	170000a4 	strne	r0, [r0, -r4, lsr #1]
    20ec:	020c7d02 	andeq	r7, ip, #2, 26	; 0x80
    20f0:	02170075 	andseq	r0, r7, #117	; 0x75
    20f4:	7602087d 			; <UNDEFINED> instruction: 0x7602087d
    20f8:	7d021700 	stcvc	7, cr1, [r2, #-0]
    20fc:	00770204 	rsbseq	r0, r7, r4, lsl #4
    2100:	8f841a00 	svchi	0x00841a00
    2104:	09a60000 	stmibeq	r6!, {}	; <UNPREDICTABLE>
    2108:	8c190000 	ldchi	0, cr0, [r9], {-0}
    210c:	3c00008f 	stccc	0, cr0, [r0], {143}	; 0x8f
    2110:	1d000002 	stcne	0, cr0, [r0, #-8]
    2114:	17000007 	strne	r0, [r0, -r7]
    2118:	03055001 	movweq	r5, #20481	; 0x5001
    211c:	0000aa98 	muleq	r0, r8, sl
    2120:	8f9c1600 	svchi	0x009c1600
    2124:	09900000 	ldmibeq	r0, {}	; <UNPREDICTABLE>
    2128:	01170000 	tsteq	r7, r0
    212c:	a4030550 	strge	r0, [r3], #-1360	; 0x550
    2130:	000000a4 	andeq	r0, r0, r4, lsr #1
    2134:	007f0800 	rsbseq	r0, pc, r0, lsl #16
    2138:	07410000 	strbeq	r0, [r1, -r0]
    213c:	76090000 	strvc	r0, [r9], -r0
    2140:	12000000 	andne	r0, r0, #0
    2144:	07310700 	ldreq	r0, [r1, -r0, lsl #14]!
    2148:	13200000 	teqne	r0, #0
    214c:	02000001 	andeq	r0, r0, #1
    2150:	008fbc73 	addeq	fp, pc, r3, ror ip	; <UNPREDICTABLE>
    2154:	00005400 	andeq	r5, r0, r0, lsl #8
    2158:	b59c0100 	ldrlt	r0, [ip, #256]	; 0x100
    215c:	19000007 	stmdbne	r0, {r0, r1, r2}
    2160:	00008fc8 	andeq	r8, r0, r8, asr #31
    2164:	0000023c 	andeq	r0, r0, ip, lsr r2
    2168:	00000772 	andeq	r0, r0, r2, ror r7
    216c:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    2170:	00aa9803 	adceq	r9, sl, r3, lsl #16
    2174:	d41a0000 	ldrle	r0, [sl], #-0
    2178:	3900008f 	stmdbcc	r0, {r0, r1, r2, r3, r7}
    217c:	1a000006 	bne	219c <_start-0x5e64>
    2180:	00008fd8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    2184:	000003f9 	strdeq	r0, [r0], -r9
    2188:	008fe819 	addeq	lr, pc, r9, lsl r8	; <UNPREDICTABLE>
    218c:	00030b00 	andeq	r0, r3, r0, lsl #22
    2190:	00079800 	andeq	r9, r7, r0, lsl #16
    2194:	50011700 	andpl	r1, r1, r0, lsl #14
    2198:	00147402 	andseq	r7, r4, r2, lsl #8
    219c:	008ff81a 	addeq	pc, pc, sl, lsl r8	; <UNPREDICTABLE>
    21a0:	0009c700 	andeq	ip, r9, r0, lsl #14
    21a4:	90001600 	andls	r1, r0, r0, lsl #12
    21a8:	09900000 	ldmibeq	r0, {}	; <UNPREDICTABLE>
    21ac:	01170000 	tsteq	r7, r0
    21b0:	c4030550 	strgt	r0, [r3], #-1360	; 0x550
    21b4:	000000a4 	andeq	r0, r0, r4, lsr #1
    21b8:	06532000 	ldrbeq	r2, [r3], -r0
    21bc:	a2020000 	andge	r0, r2, #0
    21c0:	00009010 	andeq	r9, r0, r0, lsl r0
    21c4:	0000002c 	andeq	r0, r0, ip, lsr #32
    21c8:	081b9c01 	ldmdaeq	fp, {r0, sl, fp, ip, pc}
    21cc:	40180000 	andsmi	r0, r8, r0
    21d0:	2b000001 	blcs	21dc <_start-0x5e24>
    21d4:	05000008 	streq	r0, [r0, #-8]
    21d8:	00a30c03 	adceq	r0, r3, r3, lsl #24
    21dc:	90181a00 	andsls	r1, r8, r0, lsl #20
    21e0:	09890000 	stmibeq	r9, {}	; <UNPREDICTABLE>
    21e4:	2c190000 	ldccs	0, cr0, [r9], {-0}
    21e8:	90000090 	mulls	r0, r0, r0
    21ec:	11000009 	tstne	r0, r9
    21f0:	17000008 	strne	r0, [r0, -r8]
    21f4:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    21f8:	520117a3 	andpl	r1, r1, #42729472	; 0x28c0000
    21fc:	a30c0305 	movwge	r0, #49925	; 0xc305
    2200:	01170000 	tsteq	r7, r0
    2204:	38030551 	stmdacc	r3, {r0, r4, r6, r8, sl}
    2208:	170000a4 	strne	r0, [r0, -r4, lsr #1]
    220c:	03055001 	movweq	r5, #20481	; 0x5001
    2210:	0000a4f4 	strdeq	sl, [r0], -r4
    2214:	90301a00 	eorsls	r1, r0, r0, lsl #20
    2218:	09a60000 	stmibeq	r6!, {}	; <UNPREDICTABLE>
    221c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2220:	0000007f 	andeq	r0, r0, pc, ror r0
    2224:	0000082b 	andeq	r0, r0, fp, lsr #16
    2228:	00007609 	andeq	r7, r0, r9, lsl #12
    222c:	07000f00 	streq	r0, [r0, -r0, lsl #30]
    2230:	0000081b 	andeq	r0, r0, fp, lsl r8
    2234:	00060520 	andeq	r0, r6, r0, lsr #10
    2238:	3cab0200 	sfmcc	f0, 4, [fp]
    223c:	2c000090 	stccs	0, cr0, [r0], {144}	; 0x90
    2240:	01000000 	mrseq	r0, (UNDEF: 0)
    2244:	0008a49c 	muleq	r8, ip, r4
    2248:	68741300 	ldmdavs	r4!, {r8, r9, ip}^
    224c:	68ab0200 	stmiavs	fp!, {r9}
    2250:	c6000001 	strgt	r0, [r0], -r1
    2254:	1800000c 	stmdane	r0, {r2, r3}
    2258:	00000140 	andeq	r0, r0, r0, asr #2
    225c:	000008a4 	andeq	r0, r0, r4, lsr #17
    2260:	a31c0305 	tstge	ip, #335544320	; 0x14000000
    2264:	441a0000 	ldrmi	r0, [sl], #-0
    2268:	89000090 	stmdbhi	r0, {r4, r7}
    226c:	19000009 	stmdbne	r0, {r0, r3}
    2270:	00009058 	andeq	r9, r0, r8, asr r0
    2274:	00000990 	muleq	r0, r0, r9
    2278:	0000089a 	muleq	r0, sl, r8
    227c:	02530117 	subseq	r0, r3, #-1073741819	; 0xc0000005
    2280:	0117ac08 	tsteq	r7, r8, lsl #24
    2284:	1c030552 	cfstr32ne	mvfx0, [r3], {82}	; 0x52
    2288:	170000a3 	strne	r0, [r0, -r3, lsr #1]
    228c:	03055101 	movweq	r5, #20737	; 0x5101
    2290:	0000a438 	andeq	sl, r0, r8, lsr r4
    2294:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    2298:	00a4f403 	adceq	pc, r4, r3, lsl #8
    229c:	5c1a0000 	ldcpl	0, cr0, [sl], {-0}
    22a0:	a6000090 			; <UNDEFINED> instruction: 0xa6000090
    22a4:	00000009 	andeq	r0, r0, r9
    22a8:	0004a107 	andeq	sl, r4, r7, lsl #2
    22ac:	06692000 	strbteq	r2, [r9], -r0
    22b0:	b2020000 	andlt	r0, r2, #0
    22b4:	00009068 	andeq	r9, r0, r8, rrx
    22b8:	0000002c 	andeq	r0, r0, ip, lsr #32
    22bc:	091e9c01 	ldmdbeq	lr, {r0, sl, fp, ip, pc}
    22c0:	201e0000 	andscs	r0, lr, r0
    22c4:	02000008 	andeq	r0, r0, #8
    22c8:	00005db2 			; <UNDEFINED> instruction: 0x00005db2
    22cc:	000ce700 	andeq	lr, ip, r0, lsl #14
    22d0:	01401800 	cmpeq	r0, r0, lsl #16
    22d4:	091e0000 	ldmdbeq	lr, {}	; <UNPREDICTABLE>
    22d8:	03050000 	movweq	r0, #20480	; 0x5000
    22dc:	0000a328 	andeq	sl, r0, r8, lsr #6
    22e0:	0090701a 	addseq	r7, r0, sl, lsl r0
    22e4:	00098900 	andeq	r8, r9, r0, lsl #18
    22e8:	90841900 	addls	r1, r4, r0, lsl #18
    22ec:	09900000 	ldmibeq	r0, {}	; <UNPREDICTABLE>
    22f0:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
    22f4:	01170000 	tsteq	r7, r0
    22f8:	b3080253 	movwlt	r0, #33363	; 0x8253
    22fc:	05520117 	ldrbeq	r0, [r2, #-279]	; 0x117
    2300:	00a32803 	adceq	r2, r3, r3, lsl #16
    2304:	51011700 	tstpl	r1, r0, lsl #14
    2308:	a4380305 	ldrtge	r0, [r8], #-773	; 0x305
    230c:	01170000 	tsteq	r7, r0
    2310:	f4030550 	vst3.16	{d0,d2,d4}, [r3 :64], r0
    2314:	000000a4 	andeq	r0, r0, r4, lsr #1
    2318:	0090881a 	addseq	r8, r0, sl, lsl r8
    231c:	0009a600 	andeq	sl, r9, r0, lsl #12
    2320:	1b070000 	blne	1c2328 <__bss_end__+0x1b7880>
    2324:	21000008 	tstcs	r0, r8
    2328:	000006bc 			; <UNDEFINED> instruction: 0x000006bc
    232c:	016e0902 	cmneq	lr, r2, lsl #18
    2330:	03050000 	movweq	r0, #20480	; 0x5000
    2334:	0000aa98 	muleq	r0, r8, sl
    2338:	00066321 	andeq	r6, r6, r1, lsr #6
    233c:	6e090200 	cdpvs	2, 0, cr0, cr9, cr0, {0}
    2340:	05000001 	streq	r0, [r0, #-1]
    2344:	00aa8403 	adceq	r8, sl, r3, lsl #8
    2348:	01e32100 	mvneq	r2, r0, lsl #2
    234c:	0b020000 	bleq	82354 <__bss_end__+0x778ac>
    2350:	00000168 	andeq	r0, r0, r8, ror #2
    2354:	aa940305 	bge	fe502f70 <__bss_end__+0xfe4f84c8>
    2358:	87210000 	strhi	r0, [r1, -r0]!
    235c:	02000006 	andeq	r0, r0, #6
    2360:	0001680c 	andeq	r6, r1, ip, lsl #16
    2364:	a4030500 	strge	r0, [r3], #-1280	; 0x500
    2368:	240000aa 	strcs	r0, [r0], #-170	; 0xaa
    236c:	00646974 	rsbeq	r6, r4, r4, ror r9
    2370:	002c0f02 	eoreq	r0, ip, r2, lsl #30
    2374:	03050000 	movweq	r0, #20480	; 0x5000
    2378:	00009eb8 			; <UNDEFINED> instruction: 0x00009eb8
    237c:	0006ec21 	andeq	lr, r6, r1, lsr #24
    2380:	2c110200 	lfmcs	f0, 4, [r1], {-0}
    2384:	05000000 	streq	r0, [r0, #-0]
    2388:	00aa9003 	adceq	r9, sl, r3
    238c:	01fb1f00 	mvnseq	r1, r0, lsl #30
    2390:	1e030000 	cdpne	0, 0, cr0, cr3, cr0, {0}
    2394:	00022a25 	andeq	r2, r2, r5, lsr #20
    2398:	25290300 	strcs	r0, [r9, #-768]!	; 0x300
    239c:	a6000000 	strge	r0, [r0], -r0
    23a0:	0e000009 	cdpeq	0, 0, cr0, cr0, cr9, {0}
    23a4:	00000086 	andeq	r0, r0, r6, lsl #1
    23a8:	821f0026 	andshi	r0, pc, #38	; 0x26
    23ac:	03000000 	movweq	r0, #0
    23b0:	054a2566 	strbeq	r2, [sl, #-1382]	; 0x566
    23b4:	6e030000 	cdpvs	0, 0, cr0, cr3, cr0, {0}
    23b8:	0000007d 	andeq	r0, r0, sp, ror r0
    23bc:	000009c7 	andeq	r0, r0, r7, asr #19
    23c0:	00002c0e 	andeq	r2, r0, lr, lsl #24
    23c4:	002c0e00 	eoreq	r0, ip, r0, lsl #28
    23c8:	27000000 	strcs	r0, [r0, -r0]
    23cc:	000006c1 	andeq	r0, r0, r1, asr #13
    23d0:	09ddfe03 	ldmibeq	sp, {r0, r1, r9, sl, fp, ip, sp, lr, pc}^
    23d4:	dd0e0000 	stcle	0, cr0, [lr, #-0]
    23d8:	0e000009 	cdpeq	0, 0, cr0, cr0, cr9, {0}
    23dc:	000009dd 	ldrdeq	r0, [r0], -sp
    23e0:	5d040600 	stcpl	6, cr0, [r4, #-0]
    23e4:	00000000 	andeq	r0, r0, r0
    23e8:	000011ca 	andeq	r1, r0, sl, asr #3
    23ec:	0e2c0004 	cdpeq	0, 2, cr0, cr12, cr4, {0}
    23f0:	01040000 	mrseq	r0, (UNDEF: 4)
    23f4:	0000000b 	andeq	r0, r0, fp
    23f8:	00079401 	andeq	r9, r7, r1, lsl #8
    23fc:	00023b00 	andeq	r3, r2, r0, lsl #22
    2400:	00909400 	addseq	r9, r0, r0, lsl #8
    2404:	00062000 	andeq	r2, r6, r0
    2408:	000b5300 	andeq	r5, fp, r0, lsl #6
    240c:	05040200 	streq	r0, [r4, #-512]	; 0x200
    2410:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2414:	7b070403 	blvc	1c3428 <__bss_end__+0x1b8980>
    2418:	03000001 	movweq	r0, #1
    241c:	00760601 	rsbseq	r0, r6, r1, lsl #12
    2420:	02030000 	andeq	r0, r3, #0
    2424:	0001cc05 	andeq	ip, r1, r5, lsl #24
    2428:	05040300 	streq	r0, [r4, #-768]	; 0x300
    242c:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    2430:	b3050803 	movwlt	r0, #22531	; 0x5803
    2434:	04000001 	streq	r0, [r0], #-1
    2438:	00000414 	andeq	r0, r0, r4, lsl r4
    243c:	005a2e03 	subseq	r2, sl, r3, lsl #28
    2440:	01030000 	mrseq	r0, (UNDEF: 3)
    2444:	00007408 	andeq	r7, r0, r8, lsl #8
    2448:	07020300 	streq	r0, [r2, -r0, lsl #6]
    244c:	00000098 	muleq	r0, r8, r0
    2450:	0001d604 	andeq	sp, r1, r4, lsl #12
    2454:	73340300 	teqvc	r4, #0, 6
    2458:	03000000 	movweq	r0, #0
    245c:	01760704 	cmneq	r6, r4, lsl #14
    2460:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2464:	00017107 	andeq	r7, r1, r7, lsl #2
    2468:	07040300 	streq	r0, [r4, -r0, lsl #6]
    246c:	000001aa 	andeq	r0, r0, sl, lsr #3
    2470:	04060405 	streq	r0, [r6], #-1029	; 0x405
    2474:	00000090 	muleq	r0, r0, r0
    2478:	7d080103 	stfvcs	f0, [r8, #-12]
    247c:	06000000 	streq	r0, [r0], -r0
    2480:	00009d04 	andeq	r9, r0, r4, lsl #26
    2484:	00900700 	addseq	r0, r0, r0, lsl #14
    2488:	0c080000 	stceq	0, cr0, [r8], {-0}
    248c:	00d90e04 	sbcseq	r0, r9, r4, lsl #28
    2490:	74090000 	strvc	r0, [r9], #-0
    2494:	0f040078 	svceq	0x00040078
    2498:	0000004f 	andeq	r0, r0, pc, asr #32
    249c:	78720900 	ldmdavc	r2!, {r8, fp}^
    24a0:	4f0f0400 	svcmi	0x000f0400
    24a4:	01000000 	mrseq	r0, (UNDEF: 0)
    24a8:	0003e20a 	andeq	lr, r3, sl, lsl #4
    24ac:	68100400 	ldmdavs	r0, {sl}
    24b0:	04000000 	streq	r0, [r0], #-0
    24b4:	0003930a 	andeq	r9, r3, sl, lsl #6
    24b8:	68110400 	ldmdavs	r1, {sl}
    24bc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    24c0:	03cb0400 	biceq	r0, fp, #0, 8
    24c4:	12040000 	andne	r0, r4, #0
    24c8:	000000a2 	andeq	r0, r0, r2, lsr #1
    24cc:	00020a04 	andeq	r0, r2, r4, lsl #20
    24d0:	ef280500 	svc	0x00280500
    24d4:	0b000000 	bleq	24dc <_start-0x5b24>
    24d8:	00000231 	andeq	r0, r0, r1, lsr r2
    24dc:	06000904 	streq	r0, [r0], -r4, lsl #18
    24e0:	0c000001 	stceq	0, cr0, [r0], {1}
    24e4:	00000284 	andeq	r0, r0, r4, lsl #5
    24e8:	00000088 	andeq	r0, r0, r8, lsl #1
    24ec:	33040000 	movwcc	r0, #16384	; 0x4000
    24f0:	05000002 	streq	r0, [r0, #-2]
    24f4:	0000e462 	andeq	lr, r0, r2, ror #8
    24f8:	074e0d00 	strbeq	r0, [lr, -r0, lsl #26]
    24fc:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    2500:	00013f03 	andeq	r3, r1, r3, lsl #30
    2504:	011e0e00 	tsteq	lr, r0, lsl #28
    2508:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    250c:	0000002c 	andeq	r0, r0, ip, lsr #32
    2510:	02006e0f 	andeq	r6, r0, #15, 28	; 0xf0
    2514:	00002c09 	andeq	r2, r0, r9, lsl #24
    2518:	c2111000 	andsgt	r1, r1, #0
    251c:	02000007 	andeq	r0, r0, #7
    2520:	00002c0c 	andeq	r2, r0, ip, lsl #24
    2524:	0d000000 	stceq	0, cr0, [r0, #-0]
    2528:	00000701 	andeq	r0, r0, r1, lsl #14
    252c:	76031702 	strvc	r1, [r3], -r2, lsl #14
    2530:	0f000001 	svceq	0x00000001
    2534:	006e6970 	rsbeq	r6, lr, r0, ror r9
    2538:	002c1702 	eoreq	r1, ip, r2, lsl #14
    253c:	760f0000 	strvc	r0, [pc], -r0
    2540:	2c170200 	lfmcs	f0, 4, [r7], {-0}
    2544:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2548:	0000011e 	andeq	r0, r0, lr, lsl r1
    254c:	002c1702 	eoreq	r1, ip, r2, lsl #14
    2550:	540e0000 	strpl	r0, [lr], #-0
    2554:	02000007 	andeq	r0, r0, #7
    2558:	00002c17 	andeq	r2, r0, r7, lsl ip
    255c:	07120000 	ldreq	r0, [r2, -r0]
    2560:	01000004 	tsteq	r0, r4
    2564:	00909409 	addseq	r9, r0, r9, lsl #8
    2568:	00015400 	andeq	r5, r1, r0, lsl #8
    256c:	229c0100 	addscs	r0, ip, #0, 2
    2570:	13000007 	movwne	r0, #7
    2574:	000003a9 	andeq	r0, r0, r9, lsr #7
    2578:	07220901 	streq	r0, [r2, -r1, lsl #18]!
    257c:	0d080000 	stceq	0, cr0, [r8, #-0]
    2580:	63140000 	tstvs	r4, #0
    2584:	5a090100 	bpl	24298c <__bss_end__+0x237ee4>
    2588:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    258c:	1500000d 	strne	r0, [r0, #-13]
    2590:	01007874 	tsteq	r0, r4, ror r8
    2594:	0000250b 	andeq	r2, r0, fp, lsl #10
    2598:	00760600 	rsbseq	r0, r6, r0, lsl #12
    259c:	9f1aff08 	svcls	0x001aff08
    25a0:	01006e16 	tsteq	r0, r6, lsl lr
    25a4:	0000680c 	andeq	r6, r0, ip, lsl #16
    25a8:	000d4a00 	andeq	r4, sp, r0, lsl #20
    25ac:	00751600 	rsbseq	r1, r5, r0, lsl #12
    25b0:	00680d01 	rsbeq	r0, r8, r1, lsl #26
    25b4:	0d5d0000 	ldcleq	0, cr0, [sp, #-0]
    25b8:	73150000 	tstvc	r5, #0
    25bc:	680e0100 	stmdavs	lr, {r8}
    25c0:	01000000 	mrseq	r0, (UNDEF: 0)
    25c4:	90a41754 	adcls	r1, r4, r4, asr r7
    25c8:	00040000 	andeq	r0, r4, r0
    25cc:	01f80000 	mvnseq	r0, r0
    25d0:	c2180000 	andsgt	r0, r8, #0
    25d4:	01000007 	tsteq	r0, r7
    25d8:	00002c0e 	andeq	r2, r0, lr, lsl #24
    25dc:	00540100 	subseq	r0, r4, r0, lsl #2
    25e0:	00013f19 	andeq	r3, r1, r9, lsl pc
    25e4:	0090a800 	addseq	sl, r0, r0, lsl #16
    25e8:	00001c00 	andeq	r1, r0, r0, lsl #24
    25ec:	75110100 	ldrvc	r0, [r1, #-256]	; 0x100
    25f0:	1a000002 	bne	2600 <_start-0x5a00>
    25f4:	0000016a 	andeq	r0, r0, sl, ror #2
    25f8:	00000d86 	andeq	r0, r0, r6, lsl #27
    25fc:	00015f1b 	andeq	r5, r1, fp, lsl pc
    2600:	1c540100 	ldfnee	f0, [r4], {-0}
    2604:	00000156 	andeq	r0, r0, r6, asr r1
    2608:	014b1b00 	cmpeq	fp, r0, lsl #22
    260c:	56010000 	strpl	r0, [r1], -r0
    2610:	00011119 	andeq	r1, r1, r9, lsl r1
    2614:	0090b400 	addseq	fp, r0, r0, lsl #8
    2618:	00001000 	andeq	r1, r0, r0
    261c:	5f1a0200 	svcpl	0x001a0200
    2620:	1a000002 	bne	2630 <_start-0x59d0>
    2624:	00000128 	andeq	r0, r0, r8, lsr #2
    2628:	00000d99 	muleq	r0, r9, sp
    262c:	00011d1b 	andeq	r1, r1, fp, lsl sp
    2630:	1d540100 	ldfnee	f0, [r4, #-0]
    2634:	000090b4 	strheq	r9, [r0], -r4
    2638:	00000004 	andeq	r0, r0, r4
    263c:	0001321e 	andeq	r3, r1, lr, lsl r2
    2640:	000dac00 	andeq	sl, sp, r0, lsl #24
    2644:	1f000000 	svcne	0x00000000
    2648:	000090b4 	strheq	r9, [r0], -r4
    264c:	00001131 	andeq	r1, r0, r1, lsr r1
    2650:	01510120 	cmpeq	r1, r0, lsr #2
    2654:	50012030 	andpl	r2, r1, r0, lsr r0
    2658:	00007602 	andeq	r7, r0, r2, lsl #12
    265c:	013f1900 	teqeq	pc, r0, lsl #18
    2660:	90c80000 	sbcls	r0, r8, r0
    2664:	001c0000 	andseq	r0, ip, r0
    2668:	13010000 	movwne	r0, #4096	; 0x1000
    266c:	000002f8 	strdeq	r0, [r0], -r8
    2670:	00016a1a 	andeq	r6, r1, sl, lsl sl
    2674:	000dbf00 	andeq	fp, sp, r0, lsl #30
    2678:	015f1b00 	cmpeq	pc, r0, lsl #22
    267c:	54010000 	strpl	r0, [r1], #-0
    2680:	0001561a 	andeq	r5, r1, sl, lsl r6
    2684:	000de100 	andeq	lr, sp, r0, lsl #2
    2688:	014b1b00 	cmpeq	fp, r0, lsl #22
    268c:	56010000 	strpl	r0, [r1], -r0
    2690:	00011119 	andeq	r1, r1, r9, lsl r1
    2694:	0090d400 	addseq	sp, r0, r0, lsl #8
    2698:	00001000 	andeq	r1, r0, r0
    269c:	df1a0200 	svcle	0x001a0200
    26a0:	1a000002 	bne	26b0 <_start-0x5950>
    26a4:	00000128 	andeq	r0, r0, r8, lsr #2
    26a8:	00000e12 	andeq	r0, r0, r2, lsl lr
    26ac:	00011d1b 	andeq	r1, r1, fp, lsl sp
    26b0:	1d540100 	ldfnee	f0, [r4, #-0]
    26b4:	000090d4 	ldrdeq	r9, [r0], -r4
    26b8:	00000004 	andeq	r0, r0, r4
    26bc:	0001321e 	andeq	r3, r1, lr, lsl r2
    26c0:	000e3400 	andeq	r3, lr, r0, lsl #8
    26c4:	1f000000 	svcne	0x00000000
    26c8:	000090d4 	ldrdeq	r9, [r0], -r4
    26cc:	00001131 	andeq	r1, r0, r1, lsr r1
    26d0:	04510120 	ldrbeq	r0, [r1], #-288	; 0x120
    26d4:	1a310077 	bne	c428b8 <__bss_end__+0xc37e10>
    26d8:	02500120 	subseq	r0, r0, #32, 2
    26dc:	00000076 	andeq	r0, r0, r6, ror r0
    26e0:	00013f19 	andeq	r3, r1, r9, lsl pc
    26e4:	0090e800 	addseq	lr, r0, r0, lsl #16
    26e8:	00001c00 	andeq	r1, r0, r0, lsl #24
    26ec:	80150100 	andshi	r0, r5, r0, lsl #2
    26f0:	1a000003 	bne	2704 <_start-0x58fc>
    26f4:	0000016a 	andeq	r0, r0, sl, ror #2
    26f8:	00000e47 	andeq	r0, r0, r7, asr #28
    26fc:	00015f1b 	andeq	r5, r1, fp, lsl pc
    2700:	1b540100 	blne	1502b08 <__bss_end__+0x14f8060>
    2704:	00000156 	andeq	r0, r0, r6, asr r1
    2708:	32007708 	andcc	r7, r0, #8, 14	; 0x200000
    270c:	1aff081a 	bne	fffc477c <__bss_end__+0xfffb9cd4>
    2710:	014b1b9f 			; <UNDEFINED> instruction: 0x014b1b9f
    2714:	56010000 	strpl	r0, [r1], -r0
    2718:	00011119 	andeq	r1, r1, r9, lsl r1
    271c:	0090f400 	addseq	pc, r0, r0, lsl #8
    2720:	00001000 	andeq	r1, r0, r0
    2724:	671a0200 	ldrvs	r0, [sl, -r0, lsl #4]
    2728:	1a000003 	bne	273c <_start-0x58c4>
    272c:	00000128 	andeq	r0, r0, r8, lsr #2
    2730:	00000e6c 	andeq	r0, r0, ip, ror #28
    2734:	00011d1b 	andeq	r1, r1, fp, lsl sp
    2738:	1d540100 	ldfnee	f0, [r4, #-0]
    273c:	000090f4 	strdeq	r9, [r0], -r4
    2740:	00000004 	andeq	r0, r0, r4
    2744:	0001321e 	andeq	r3, r1, lr, lsl r2
    2748:	000e9100 	andeq	r9, lr, r0, lsl #2
    274c:	1f000000 	svcne	0x00000000
    2750:	000090f4 	strdeq	r9, [r0], -r4
    2754:	00001131 	andeq	r1, r0, r1, lsr r1
    2758:	04510120 	ldrbeq	r0, [r1], #-288	; 0x120
    275c:	1a320077 	bne	c82940 <__bss_end__+0xc77e98>
    2760:	02500120 	subseq	r0, r0, #32, 2
    2764:	00000076 	andeq	r0, r0, r6, ror r0
    2768:	00013f19 	andeq	r3, r1, r9, lsl pc
    276c:	00910800 	addseq	r0, r1, r0, lsl #16
    2770:	00001c00 	andeq	r1, r0, r0, lsl #24
    2774:	08170100 	ldmdaeq	r7, {r8}
    2778:	1a000004 	bne	2790 <_start-0x5870>
    277c:	0000016a 	andeq	r0, r0, sl, ror #2
    2780:	00000ea4 	andeq	r0, r0, r4, lsr #29
    2784:	00015f1b 	andeq	r5, r1, fp, lsl pc
    2788:	1b540100 	blne	1502b90 <__bss_end__+0x14f80e8>
    278c:	00000156 	andeq	r0, r0, r6, asr r1
    2790:	34007708 	strcc	r7, [r0], #-1800	; 0x708
    2794:	1aff081a 	bne	fffc4804 <__bss_end__+0xfffb9d5c>
    2798:	014b1b9f 			; <UNDEFINED> instruction: 0x014b1b9f
    279c:	56010000 	strpl	r0, [r1], -r0
    27a0:	00011119 	andeq	r1, r1, r9, lsl r1
    27a4:	00911400 	addseq	r1, r1, r0, lsl #8
    27a8:	00001000 	andeq	r1, r0, r0
    27ac:	ef1a0200 	svc	0x001a0200
    27b0:	1a000003 	bne	27c4 <_start-0x583c>
    27b4:	00000128 	andeq	r0, r0, r8, lsr #2
    27b8:	00000ec6 	andeq	r0, r0, r6, asr #29
    27bc:	00011d1b 	andeq	r1, r1, fp, lsl sp
    27c0:	1d540100 	ldfnee	f0, [r4, #-0]
    27c4:	00009114 	andeq	r9, r0, r4, lsl r1
    27c8:	00000004 	andeq	r0, r0, r4
    27cc:	0001321e 	andeq	r3, r1, lr, lsl r2
    27d0:	000ee800 	andeq	lr, lr, r0, lsl #16
    27d4:	1f000000 	svcne	0x00000000
    27d8:	00009114 	andeq	r9, r0, r4, lsl r1
    27dc:	00001131 	andeq	r1, r0, r1, lsr r1
    27e0:	04510120 	ldrbeq	r0, [r1], #-288	; 0x120
    27e4:	1a340077 	bne	d029c8 <__bss_end__+0xcf7f20>
    27e8:	02500120 	subseq	r0, r0, #32, 2
    27ec:	00000076 	andeq	r0, r0, r6, ror r0
    27f0:	00013f19 	andeq	r3, r1, r9, lsl pc
    27f4:	00912800 	addseq	r2, r1, r0, lsl #16
    27f8:	00001c00 	andeq	r1, r0, r0, lsl #24
    27fc:	90190100 	andsls	r0, r9, r0, lsl #2
    2800:	1a000004 	bne	2818 <_start-0x57e8>
    2804:	0000016a 	andeq	r0, r0, sl, ror #2
    2808:	00000efb 	strdeq	r0, [r0], -fp
    280c:	00015f1b 	andeq	r5, r1, fp, lsl pc
    2810:	1b540100 	blne	1502c18 <__bss_end__+0x14f8170>
    2814:	00000156 	andeq	r0, r0, r6, asr r1
    2818:	38007708 	stmdacc	r0, {r3, r8, r9, sl, ip, sp, lr}
    281c:	1aff081a 	bne	fffc488c <__bss_end__+0xfffb9de4>
    2820:	014b1b9f 			; <UNDEFINED> instruction: 0x014b1b9f
    2824:	56010000 	strpl	r0, [r1], -r0
    2828:	00011119 	andeq	r1, r1, r9, lsl r1
    282c:	00913400 	addseq	r3, r1, r0, lsl #8
    2830:	00001000 	andeq	r1, r0, r0
    2834:	771a0200 	ldrvc	r0, [sl, -r0, lsl #4]
    2838:	1a000004 	bne	2850 <_start-0x57b0>
    283c:	00000128 	andeq	r0, r0, r8, lsr #2
    2840:	00000f20 	andeq	r0, r0, r0, lsr #30
    2844:	00011d1b 	andeq	r1, r1, fp, lsl sp
    2848:	1d540100 	ldfnee	f0, [r4, #-0]
    284c:	00009134 	andeq	r9, r0, r4, lsr r1
    2850:	00000004 	andeq	r0, r0, r4
    2854:	0001321e 	andeq	r3, r1, lr, lsl r2
    2858:	000f4500 	andeq	r4, pc, r0, lsl #10
    285c:	1f000000 	svcne	0x00000000
    2860:	00009134 	andeq	r9, r0, r4, lsr r1
    2864:	00001131 	andeq	r1, r0, r1, lsr r1
    2868:	04510120 	ldrbeq	r0, [r1], #-288	; 0x120
    286c:	1a380077 	bne	e02a50 <__bss_end__+0xdf7fa8>
    2870:	02500120 	subseq	r0, r0, #32, 2
    2874:	00000076 	andeq	r0, r0, r6, ror r0
    2878:	00013f19 	andeq	r3, r1, r9, lsl pc
    287c:	00914800 	addseq	r4, r1, r0, lsl #16
    2880:	00001c00 	andeq	r1, r0, r0, lsl #24
    2884:	181b0100 	ldmdane	fp, {r8}
    2888:	1a000005 	bne	28a4 <_start-0x575c>
    288c:	0000016a 	andeq	r0, r0, sl, ror #2
    2890:	00000f58 	andeq	r0, r0, r8, asr pc
    2894:	00015f1b 	andeq	r5, r1, fp, lsl pc
    2898:	1b540100 	blne	1502ca0 <__bss_end__+0x14f81f8>
    289c:	00000156 	andeq	r0, r0, r6, asr r1
    28a0:	40007708 	andmi	r7, r0, r8, lsl #14
    28a4:	1aff081a 	bne	fffc4914 <__bss_end__+0xfffb9e6c>
    28a8:	014b1b9f 			; <UNDEFINED> instruction: 0x014b1b9f
    28ac:	56010000 	strpl	r0, [r1], -r0
    28b0:	00011119 	andeq	r1, r1, r9, lsl r1
    28b4:	00915400 	addseq	r5, r1, r0, lsl #8
    28b8:	00001000 	andeq	r1, r0, r0
    28bc:	ff1a0200 			; <UNDEFINED> instruction: 0xff1a0200
    28c0:	1a000004 	bne	28d8 <_start-0x5728>
    28c4:	00000128 	andeq	r0, r0, r8, lsr #2
    28c8:	00000f7f 	andeq	r0, r0, pc, ror pc
    28cc:	00011d1b 	andeq	r1, r1, fp, lsl sp
    28d0:	1d540100 	ldfnee	f0, [r4, #-0]
    28d4:	00009154 	andeq	r9, r0, r4, asr r1
    28d8:	00000004 	andeq	r0, r0, r4
    28dc:	0001321e 	andeq	r3, r1, lr, lsl r2
    28e0:	000fa600 	andeq	sl, pc, r0, lsl #12
    28e4:	1f000000 	svcne	0x00000000
    28e8:	00009154 	andeq	r9, r0, r4, asr r1
    28ec:	00001131 	andeq	r1, r0, r1, lsr r1
    28f0:	04510120 	ldrbeq	r0, [r1], #-288	; 0x120
    28f4:	1a400077 	bne	1002ad8 <__bss_end__+0xff8030>
    28f8:	02500120 	subseq	r0, r0, #32, 2
    28fc:	00000076 	andeq	r0, r0, r6, ror r0
    2900:	00013f19 	andeq	r3, r1, r9, lsl pc
    2904:	00916800 	addseq	r6, r1, r0, lsl #16
    2908:	00001c00 	andeq	r1, r0, r0, lsl #24
    290c:	a21d0100 	andsge	r0, sp, #0, 2
    2910:	1a000005 	bne	292c <_start-0x56d4>
    2914:	0000016a 	andeq	r0, r0, sl, ror #2
    2918:	00000fb9 			; <UNDEFINED> instruction: 0x00000fb9
    291c:	00015f1b 	andeq	r5, r1, fp, lsl pc
    2920:	1b540100 	blne	1502d28 <__bss_end__+0x14f8280>
    2924:	00000156 	andeq	r0, r0, r6, asr r1
    2928:	08007709 	stmdaeq	r0, {r0, r3, r8, r9, sl, ip, sp, lr}
    292c:	ff081a20 			; <UNDEFINED> instruction: 0xff081a20
    2930:	4b1b9f1a 	blmi	6ea5a0 <__bss_end__+0x6dfaf8>
    2934:	01000001 	tsteq	r0, r1
    2938:	01111956 	tsteq	r1, r6, asr r9
    293c:	91740000 	cmnls	r4, r0
    2940:	00100000 	andseq	r0, r0, r0
    2944:	1a020000 	bne	8294c <__bss_end__+0x77ea4>
    2948:	00000588 	andeq	r0, r0, r8, lsl #11
    294c:	0001281a 	andeq	r2, r1, sl, lsl r8
    2950:	000fe300 	andeq	lr, pc, r0, lsl #6
    2954:	011d1b00 	tsteq	sp, r0, lsl #22
    2958:	54010000 	strpl	r0, [r1], #-0
    295c:	0091741d 	addseq	r7, r1, sp, lsl r4
    2960:	00000400 	andeq	r0, r0, r0, lsl #8
    2964:	01321e00 	teqeq	r2, r0, lsl #28
    2968:	100d0000 	andne	r0, sp, r0
    296c:	00000000 	andeq	r0, r0, r0
    2970:	0091741f 	addseq	r7, r1, pc, lsl r4
    2974:	00113100 	andseq	r3, r1, r0, lsl #2
    2978:	51012000 	mrspl	r2, (UNDEF: 1)
    297c:	08007705 	stmdaeq	r0, {r0, r2, r8, r9, sl, ip, sp, lr}
    2980:	01201a20 	teqeq	r0, r0, lsr #20
    2984:	00760250 	rsbseq	r0, r6, r0, asr r2
    2988:	3f190000 	svccc	0x00190000
    298c:	88000001 	stmdahi	r0, {r0}
    2990:	1c000091 	stcne	0, cr0, [r0], {145}	; 0x91
    2994:	01000000 	mrseq	r0, (UNDEF: 0)
    2998:	00062c1f 	andeq	r2, r6, pc, lsl ip
    299c:	016a1a00 	cmneq	sl, r0, lsl #20
    29a0:	10200000 	eorne	r0, r0, r0
    29a4:	5f1b0000 	svcpl	0x001b0000
    29a8:	01000001 	tsteq	r0, r1
    29ac:	01561b54 	cmpeq	r6, r4, asr fp
    29b0:	77090000 	strvc	r0, [r9, -r0]
    29b4:	1a400800 	bne	10049bc <__bss_end__+0xff9f14>
    29b8:	9f1aff08 	svcls	0x001aff08
    29bc:	00014b1b 	andeq	r4, r1, fp, lsl fp
    29c0:	19560100 	ldmdbne	r6, {r8}^
    29c4:	00000111 	andeq	r0, r0, r1, lsl r1
    29c8:	00009194 	muleq	r0, r4, r1
    29cc:	00000010 	andeq	r0, r0, r0, lsl r0
    29d0:	06121a02 	ldreq	r1, [r2], -r2, lsl #20
    29d4:	281a0000 	ldmdacs	sl, {}	; <UNPREDICTABLE>
    29d8:	42000001 	andmi	r0, r0, #1
    29dc:	1b000010 	blne	2a24 <_start-0x55dc>
    29e0:	0000011d 	andeq	r0, r0, sp, lsl r1
    29e4:	941d5401 	ldrls	r5, [sp], #-1025	; 0x401
    29e8:	04000091 	streq	r0, [r0], #-145	; 0x91
    29ec:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    29f0:	00000132 	andeq	r0, r0, r2, lsr r1
    29f4:	00001064 	andeq	r1, r0, r4, rrx
    29f8:	941f0000 	ldrls	r0, [pc], #-0	; 2a00 <_start-0x5600>
    29fc:	31000091 	swpcc	r0, r1, [r0]	; <UNPREDICTABLE>
    2a00:	20000011 	andcs	r0, r0, r1, lsl r0
    2a04:	77055101 	strvc	r5, [r5, -r1, lsl #2]
    2a08:	1a400800 	bne	1004a10 <__bss_end__+0xff9f68>
    2a0c:	02500120 	subseq	r0, r0, #32, 2
    2a10:	00000076 	andeq	r0, r0, r6, ror r0
    2a14:	00013f19 	andeq	r3, r1, r9, lsl pc
    2a18:	0091a800 	addseq	sl, r1, r0, lsl #16
    2a1c:	00001c00 	andeq	r1, r0, r0, lsl #24
    2a20:	ac210100 	stfges	f0, [r1], #-0
    2a24:	1b000006 	blne	2a44 <_start-0x55bc>
    2a28:	0000016a 	andeq	r0, r0, sl, ror #2
    2a2c:	5f1b5801 	svcpl	0x001b5801
    2a30:	01000001 	tsteq	r0, r1
    2a34:	01561a54 	cmpeq	r6, r4, asr sl
    2a38:	10770000 	rsbsne	r0, r7, r0
    2a3c:	4b1b0000 	blmi	6c2a44 <__bss_end__+0x6b7f9c>
    2a40:	01000001 	tsteq	r0, r1
    2a44:	01111956 	tsteq	r1, r6, asr r9
    2a48:	91b40000 			; <UNDEFINED> instruction: 0x91b40000
    2a4c:	00100000 	andseq	r0, r0, r0
    2a50:	1a020000 	bne	82a58 <__bss_end__+0x77fb0>
    2a54:	00000692 	muleq	r0, r2, r6
    2a58:	0001281b 	andeq	r2, r1, fp, lsl r8
    2a5c:	1b580100 	blne	1602e64 <__bss_end__+0x15f83bc>
    2a60:	0000011d 	andeq	r0, r0, sp, lsl r1
    2a64:	b41d5401 	ldrlt	r5, [sp], #-1025	; 0x401
    2a68:	04000091 	streq	r0, [r0], #-145	; 0x91
    2a6c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2a70:	00000132 	andeq	r0, r0, r2, lsr r1
    2a74:	000010aa 	andeq	r1, r0, sl, lsr #1
    2a78:	b41f0000 	ldrlt	r0, [pc], #-0	; 2a80 <_start-0x5580>
    2a7c:	31000091 	swpcc	r0, r1, [r0]	; <UNPREDICTABLE>
    2a80:	20000011 	andcs	r0, r0, r1, lsl r0
    2a84:	77055101 	strvc	r5, [r5, -r1, lsl #2]
    2a88:	1a800800 	bne	fe004a90 <__bss_end__+0xfdff9fe8>
    2a8c:	02500120 	subseq	r0, r0, #32, 2
    2a90:	00000076 	andeq	r0, r0, r6, ror r0
    2a94:	00013f21 	andeq	r3, r1, r1, lsr #30
    2a98:	0091c800 	addseq	ip, r1, r0, lsl #16
    2a9c:	00001c00 	andeq	r1, r0, r0, lsl #24
    2aa0:	1b230100 	blne	8c2ea8 <__bss_end__+0x8b8400>
    2aa4:	0000016a 	andeq	r0, r0, sl, ror #2
    2aa8:	5f1b5501 	svcpl	0x001b5501
    2aac:	01000001 	tsteq	r0, r1
    2ab0:	01561c54 	cmpeq	r6, r4, asr ip
    2ab4:	1b010000 	blne	42abc <__bss_end__+0x38014>
    2ab8:	0000014b 	andeq	r0, r0, fp, asr #2
    2abc:	11195601 	tstne	r9, r1, lsl #12
    2ac0:	d4000001 	strle	r0, [r0], #-1
    2ac4:	10000091 	mulne	r0, r1, r0
    2ac8:	02000000 	andeq	r0, r0, #0
    2acc:	00070b1a 	andeq	r0, r7, sl, lsl fp
    2ad0:	01281b00 	teqeq	r8, r0, lsl #22
    2ad4:	55010000 	strpl	r0, [r1, #-0]
    2ad8:	00011d1b 	andeq	r1, r1, fp, lsl sp
    2adc:	1d540100 	ldfnee	f0, [r4, #-0]
    2ae0:	000091d4 	ldrdeq	r9, [r0], -r4
    2ae4:	00000004 	andeq	r0, r0, r4
    2ae8:	0001321e 	andeq	r3, r1, lr, lsl r2
    2aec:	0010bd00 	andseq	fp, r0, r0, lsl #26
    2af0:	1f000000 	svcne	0x00000000
    2af4:	000091d4 	ldrdeq	r9, [r0], -r4
    2af8:	00001131 	andeq	r1, r0, r1, lsr r1
    2afc:	01510120 	cmpeq	r1, r0, lsr #2
    2b00:	50012031 	andpl	r2, r1, r1, lsr r0
    2b04:	00007602 	andeq	r7, r0, r2, lsl #12
    2b08:	04060000 	streq	r0, [r6], #-0
    2b0c:	000000d9 	ldrdeq	r0, [r0], -r9
    2b10:	00081522 	andeq	r1, r8, r2, lsr #10
    2b14:	25270100 	strcs	r0, [r7, #-256]!	; 0x100
    2b18:	03000000 	movweq	r0, #0
    2b1c:	00000762 	andeq	r0, r0, r2, ror #14
    2b20:	0078720f 	rsbseq	r7, r8, pc, lsl #4
    2b24:	00252701 	eoreq	r2, r5, r1, lsl #14
    2b28:	760f0000 	strvc	r0, [pc], -r0
    2b2c:	25270100 	strcs	r0, [r7, #-256]!	; 0x100
    2b30:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2b34:	00000770 	andeq	r0, r0, r0, ror r7
    2b38:	002c2701 	eoreq	r2, ip, r1, lsl #14
    2b3c:	1e110000 	cdpne	0, 1, cr0, cr1, cr0, {0}
    2b40:	01000001 	tsteq	r0, r1
    2b44:	00002c28 	andeq	r2, r0, r8, lsr #24
    2b48:	11230000 	teqne	r3, r0
    2b4c:	01000007 	tsteq	r0, r7
    2b50:	00002534 	andeq	r2, r0, r4, lsr r5
    2b54:	0091e800 	addseq	lr, r1, r0, lsl #16
    2b58:	0001c800 	andeq	ip, r1, r0, lsl #16
    2b5c:	1e9c0100 	fmlnee	f0, f4, f0
    2b60:	1300000b 	movwne	r0, #11
    2b64:	000003a9 	andeq	r0, r0, r9, lsr #7
    2b68:	07223401 	streq	r3, [r2, -r1, lsl #8]!
    2b6c:	10d00000 	sbcsne	r0, r0, r0
    2b70:	70130000 	andsvc	r0, r3, r0
    2b74:	01000007 	tsteq	r0, r7
    2b78:	00002534 	andeq	r2, r0, r4, lsr r5
    2b7c:	00111500 	andseq	r1, r1, r0, lsl #10
    2b80:	78721500 	ldmdavc	r2!, {r8, sl, ip}^
    2b84:	25350100 	ldrcs	r0, [r5, #-256]!	; 0x100
    2b88:	01000000 	mrseq	r0, (UNDEF: 0)
    2b8c:	00731655 	rsbseq	r1, r3, r5, asr r6
    2b90:	002c3c01 	eoreq	r3, ip, r1, lsl #24
    2b94:	11330000 	teqne	r3, r0
    2b98:	75160000 	ldrvc	r0, [r6, #-0]
    2b9c:	683f0100 	ldmdavs	pc!, {r8}	; <UNPREDICTABLE>
    2ba0:	46000000 	strmi	r0, [r0], -r0
    2ba4:	16000011 			; <UNDEFINED> instruction: 0x16000011
    2ba8:	4001006e 	andmi	r0, r1, lr, rrx
    2bac:	0000002c 	andeq	r0, r0, ip, lsr #32
    2bb0:	00001159 	andeq	r1, r0, r9, asr r1
    2bb4:	01006316 	tsteq	r0, r6, lsl r3
    2bb8:	00002c41 	andeq	r2, r0, r1, asr #24
    2bbc:	00117000 	andseq	r7, r1, r0
    2bc0:	07281900 	streq	r1, [r8, -r0, lsl #18]!
    2bc4:	91fc0000 	mvnsls	r0, r0
    2bc8:	00340000 	eorseq	r0, r4, r0
    2bcc:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    2bd0:	0000083c 	andeq	r0, r0, ip, lsr r8
    2bd4:	00074b1a 	andeq	r4, r7, sl, lsl fp
    2bd8:	00119a00 	andseq	r9, r1, r0, lsl #20
    2bdc:	07421c00 	strbeq	r1, [r2, -r0, lsl #24]
    2be0:	1b000000 	blne	2be8 <_start-0x5418>
    2be4:	00000738 	andeq	r0, r0, r8, lsr r7
    2be8:	fc1d5501 	ldc2	5, cr5, [sp], {1}
    2bec:	34000091 	strcc	r0, [r0], #-145	; 0x91
    2bf0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2bf4:	00000756 	andeq	r0, r0, r6, asr r7
    2bf8:	000011b8 			; <UNDEFINED> instruction: 0x000011b8
    2bfc:	00920024 	addseq	r0, r2, r4, lsr #32
    2c00:	00114700 	andseq	r4, r1, r0, lsl #14
    2c04:	920c2500 	andls	r2, ip, #0, 10
    2c08:	11520000 	cmpne	r2, r0
    2c0c:	08310000 	ldmdaeq	r1!, {}	; <UNPREDICTABLE>
    2c10:	01200000 	teqeq	r0, r0
    2c14:	00750250 	rsbseq	r0, r5, r0, asr r2
    2c18:	92182400 	andsls	r2, r8, #0, 8
    2c1c:	11470000 	mrsne	r0, (UNDEF: 71)
    2c20:	00000000 	andeq	r0, r0, r0
    2c24:	00923817 	addseq	r3, r2, r7, lsl r8
    2c28:	00000400 	andeq	r0, r0, r0, lsl #8
    2c2c:	00085900 	andeq	r5, r8, r0, lsl #18
    2c30:	07c22600 	strbeq	r2, [r2, r0, lsl #12]
    2c34:	3c010000 	stccc	0, cr0, [r1], {-0}
    2c38:	0000002c 	andeq	r0, r0, ip, lsr #32
    2c3c:	000011d6 	ldrdeq	r1, [r0], -r6
    2c40:	01111900 	tsteq	r1, r0, lsl #18
    2c44:	92440000 	subls	r0, r4, #0
    2c48:	00100000 	andseq	r0, r0, r0
    2c4c:	44010000 	strmi	r0, [r1], #-0
    2c50:	00000892 	muleq	r0, r2, r8
    2c54:	0001281a 	andeq	r2, r1, sl, lsl r8
    2c58:	0011e900 	andseq	lr, r1, r0, lsl #18
    2c5c:	011d1a00 	tsteq	sp, r0, lsl #20
    2c60:	120e0000 	andne	r0, lr, #0
    2c64:	441d0000 	ldrmi	r0, [sp], #-0
    2c68:	04000092 	streq	r0, [r0], #-146	; 0x92
    2c6c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2c70:	00000132 	andeq	r0, r0, r2, lsr r1
    2c74:	00001221 	andeq	r1, r0, r1, lsr #4
    2c78:	11190000 	tstne	r9, r0
    2c7c:	64000001 	strvs	r0, [r0], #-1
    2c80:	10000092 	mulne	r0, r2, r0
    2c84:	01000000 	mrseq	r0, (UNDEF: 0)
    2c88:	0008cb48 	andeq	ip, r8, r8, asr #22
    2c8c:	01281a00 	teqeq	r8, r0, lsl #20
    2c90:	12340000 	eorsne	r0, r4, #0
    2c94:	1d1a0000 	ldcne	0, cr0, [sl, #-0]
    2c98:	47000001 	strmi	r0, [r0, -r1]
    2c9c:	1d000012 	stcne	0, cr0, [r0, #-72]	; 0xffffffb8
    2ca0:	00009264 	andeq	r9, r0, r4, ror #4
    2ca4:	00000004 	andeq	r0, r0, r4
    2ca8:	0001321e 	andeq	r3, r1, lr, lsl r2
    2cac:	00125a00 	andseq	r5, r2, r0, lsl #20
    2cb0:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    2cb4:	00000111 	andeq	r0, r0, r1, lsl r1
    2cb8:	00009288 	andeq	r9, r0, r8, lsl #5
    2cbc:	00000010 	andeq	r0, r0, r0, lsl r0
    2cc0:	09044b01 	stmdbeq	r4, {r0, r8, r9, fp, lr}
    2cc4:	281a0000 	ldmdacs	sl, {}	; <UNPREDICTABLE>
    2cc8:	6d000001 	stcvs	0, cr0, [r0, #-4]
    2ccc:	1a000012 	bne	2d1c <_start-0x52e4>
    2cd0:	0000011d 	andeq	r0, r0, sp, lsl r1
    2cd4:	00001280 	andeq	r1, r0, r0, lsl #5
    2cd8:	0092881d 	addseq	r8, r2, sp, lsl r8
    2cdc:	00000400 	andeq	r0, r0, r0, lsl #8
    2ce0:	01321e00 	teqeq	r2, r0, lsl #28
    2ce4:	12930000 	addsne	r0, r3, #0
    2ce8:	00000000 	andeq	r0, r0, r0
    2cec:	00011119 	andeq	r1, r1, r9, lsl r1
    2cf0:	0092ac00 	addseq	sl, r2, r0, lsl #24
    2cf4:	00001000 	andeq	r1, r0, r0
    2cf8:	3d4e0100 	stfcce	f0, [lr, #-0]
    2cfc:	1a000009 	bne	2d28 <_start-0x52d8>
    2d00:	00000128 	andeq	r0, r0, r8, lsr #2
    2d04:	000012a6 	andeq	r1, r0, r6, lsr #5
    2d08:	00011d1a 	andeq	r1, r1, sl, lsl sp
    2d0c:	0012b900 	andseq	fp, r2, r0, lsl #18
    2d10:	92ac1d00 	adcls	r1, ip, #0, 26
    2d14:	00040000 	andeq	r0, r4, r0
    2d18:	321e0000 	andscc	r0, lr, #0
    2d1c:	cc000001 	stcgt	0, cr0, [r0], {1}
    2d20:	00000012 	andeq	r0, r0, r2, lsl r0
    2d24:	01111900 	tsteq	r1, r0, lsl #18
    2d28:	92d00000 	sbcsls	r0, r0, #0
    2d2c:	00100000 	andseq	r0, r0, r0
    2d30:	51010000 	mrspl	r0, (UNDEF: 1)
    2d34:	00000976 	andeq	r0, r0, r6, ror r9
    2d38:	0001281a 	andeq	r2, r1, sl, lsl r8
    2d3c:	0012df00 	andseq	sp, r2, r0, lsl #30
    2d40:	011d1a00 	tsteq	sp, r0, lsl #20
    2d44:	12f20000 	rscsne	r0, r2, #0
    2d48:	d01d0000 	andsle	r0, sp, r0
    2d4c:	04000092 	streq	r0, [r0], #-146	; 0x92
    2d50:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2d54:	00000132 	andeq	r0, r0, r2, lsr r1
    2d58:	00001305 	andeq	r1, r0, r5, lsl #6
    2d5c:	11190000 	tstne	r9, r0
    2d60:	f4000001 	vst4.8	{d0-d3}, [r0], r1
    2d64:	10000092 	mulne	r0, r2, r0
    2d68:	01000000 	mrseq	r0, (UNDEF: 0)
    2d6c:	0009af54 	andeq	sl, r9, r4, asr pc
    2d70:	01281a00 	teqeq	r8, r0, lsl #20
    2d74:	13180000 	tstne	r8, #0
    2d78:	1d1a0000 	ldcne	0, cr0, [sl, #-0]
    2d7c:	2b000001 	blcs	2d88 <_start-0x5278>
    2d80:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    2d84:	000092f4 	strdeq	r9, [r0], -r4
    2d88:	00000004 	andeq	r0, r0, r4
    2d8c:	0001321e 	andeq	r3, r1, lr, lsl r2
    2d90:	00133e00 	andseq	r3, r3, r0, lsl #28
    2d94:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    2d98:	00000111 	andeq	r0, r0, r1, lsl r1
    2d9c:	00009318 	andeq	r9, r0, r8, lsl r3
    2da0:	00000010 	andeq	r0, r0, r0, lsl r0
    2da4:	09e85701 	stmibeq	r8!, {r0, r8, r9, sl, ip, lr}^
    2da8:	281a0000 	ldmdacs	sl, {}	; <UNPREDICTABLE>
    2dac:	51000001 	tstpl	r0, r1
    2db0:	1a000013 	bne	2e04 <_start-0x51fc>
    2db4:	0000011d 	andeq	r0, r0, sp, lsl r1
    2db8:	00001364 	andeq	r1, r0, r4, ror #6
    2dbc:	0093181d 	addseq	r1, r3, sp, lsl r8
    2dc0:	00000400 	andeq	r0, r0, r0, lsl #8
    2dc4:	01321e00 	teqeq	r2, r0, lsl #28
    2dc8:	13770000 	cmnne	r7, #0
    2dcc:	00000000 	andeq	r0, r0, r0
    2dd0:	00011119 	andeq	r1, r1, r9, lsl r1
    2dd4:	00933c00 	addseq	r3, r3, r0, lsl #24
    2dd8:	00001000 	andeq	r1, r0, r0
    2ddc:	1d5a0100 	ldfnee	f0, [sl, #-0]
    2de0:	1a00000a 	bne	2e10 <_start-0x51f0>
    2de4:	00000128 	andeq	r0, r0, r8, lsr #2
    2de8:	0000138a 	andeq	r1, r0, sl, lsl #7
    2dec:	00011d27 	andeq	r1, r1, r7, lsr #26
    2df0:	933c1d00 	teqls	ip, #0, 26
    2df4:	00040000 	andeq	r0, r4, r0
    2df8:	321e0000 	andscc	r0, lr, #0
    2dfc:	9d000001 	stcls	0, cr0, [r0, #-4]
    2e00:	00000013 	andeq	r0, r0, r3, lsl r0
    2e04:	07281900 	streq	r1, [r8, -r0, lsl #18]!
    2e08:	935c0000 	cmpls	ip, #0
    2e0c:	00340000 	eorseq	r0, r4, r0
    2e10:	61010000 	mrsvs	r0, (UNDEF: 1)
    2e14:	00000a81 	andeq	r0, r0, r1, lsl #21
    2e18:	00074b27 	andeq	r4, r7, r7, lsr #22
    2e1c:	07421a00 	strbeq	r1, [r2, -r0, lsl #20]
    2e20:	13b00000 	movsne	r0, #0
    2e24:	381a0000 	ldmdacc	sl, {}	; <UNPREDICTABLE>
    2e28:	d0000007 	andle	r0, r0, r7
    2e2c:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    2e30:	0000935c 	andeq	r9, r0, ip, asr r3
    2e34:	00000034 	andeq	r0, r0, r4, lsr r0
    2e38:	0007561e 	andeq	r5, r7, lr, lsl r6
    2e3c:	0013ee00 	andseq	lr, r3, r0, lsl #28
    2e40:	93602400 	cmnls	r0, #0, 8
    2e44:	11470000 	mrsne	r0, (UNDEF: 71)
    2e48:	6c250000 	stcvs	0, cr0, [r5], #-0
    2e4c:	52000093 	andpl	r0, r0, #147	; 0x93
    2e50:	76000011 			; <UNDEFINED> instruction: 0x76000011
    2e54:	2000000a 	andcs	r0, r0, sl
    2e58:	75025001 	strvc	r5, [r2, #-1]
    2e5c:	78240000 	stmdavc	r4!, {}	; <UNPREDICTABLE>
    2e60:	47000093 			; <UNDEFINED> instruction: 0x47000093
    2e64:	00000011 	andeq	r0, r0, r1, lsl r0
    2e68:	92602500 	rsbls	r2, r0, #0, 10
    2e6c:	11520000 	cmpne	r2, r0
    2e70:	0a950000 	beq	fe542e78 <__bss_end__+0xfe5383d0>
    2e74:	01200000 	teqeq	r0, r0
    2e78:	00750250 	rsbseq	r0, r5, r0, asr r2
    2e7c:	92802500 	addls	r2, r0, #0, 10
    2e80:	11520000 	cmpne	r2, r0
    2e84:	0aa90000 	beq	fea42e8c <__bss_end__+0xfea383e4>
    2e88:	01200000 	teqeq	r0, r0
    2e8c:	00750250 	rsbseq	r0, r5, r0, asr r2
    2e90:	92a42500 	adcls	r2, r4, #0, 10
    2e94:	11520000 	cmpne	r2, r0
    2e98:	0abd0000 	beq	fef42ea0 <__bss_end__+0xfef383f8>
    2e9c:	01200000 	teqeq	r0, r0
    2ea0:	00750250 	rsbseq	r0, r5, r0, asr r2
    2ea4:	92c82500 	sbcls	r2, r8, #0, 10
    2ea8:	11520000 	cmpne	r2, r0
    2eac:	0ad10000 	beq	ff442eb4 <__bss_end__+0xff43840c>
    2eb0:	01200000 	teqeq	r0, r0
    2eb4:	00750250 	rsbseq	r0, r5, r0, asr r2
    2eb8:	92ec2500 	rscls	r2, ip, #0, 10
    2ebc:	11520000 	cmpne	r2, r0
    2ec0:	0ae50000 	beq	ff942ec8 <__bss_end__+0xff938420>
    2ec4:	01200000 	teqeq	r0, r0
    2ec8:	00750250 	rsbseq	r0, r5, r0, asr r2
    2ecc:	93102500 	tstls	r0, #0, 10
    2ed0:	11520000 	cmpne	r2, r0
    2ed4:	0af90000 	beq	ffe42edc <__bss_end__+0xffe38434>
    2ed8:	01200000 	teqeq	r0, r0
    2edc:	00750250 	rsbseq	r0, r5, r0, asr r2
    2ee0:	93342500 	teqls	r4, #0, 10
    2ee4:	11520000 	cmpne	r2, r0
    2ee8:	0b0d0000 	bleq	342ef0 <__bss_end__+0x338448>
    2eec:	01200000 	teqeq	r0, r0
    2ef0:	00750250 	rsbseq	r0, r5, r0, asr r2
    2ef4:	93541f00 	cmpls	r4, #0, 30
    2ef8:	11520000 	cmpne	r2, r0
    2efc:	01200000 	teqeq	r0, r0
    2f00:	00750250 	rsbseq	r0, r5, r0, asr r2
    2f04:	26230000 	strtcs	r0, [r3], -r0
    2f08:	01000007 	tsteq	r0, r7
    2f0c:	0000256c 	andeq	r2, r0, ip, ror #10
    2f10:	0093b000 	addseq	fp, r3, r0
    2f14:	00009000 	andeq	r9, r0, r0
    2f18:	029c0100 	addseq	r0, ip, #0, 2
    2f1c:	1400000c 	strne	r0, [r0], #-12
    2f20:	6c010075 	stcvs	0, cr0, [r1], {117}	; 0x75
    2f24:	00000722 	andeq	r0, r0, r2, lsr #14
    2f28:	0000140c 	andeq	r1, r0, ip, lsl #8
    2f2c:	66756214 			; <UNDEFINED> instruction: 0x66756214
    2f30:	026c0100 	rsbeq	r0, ip, #0, 2
    2f34:	4000000c 	andmi	r0, r0, ip
    2f38:	13000014 	movwne	r0, #20
    2f3c:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
    2f40:	00686c01 	rsbeq	r6, r8, r1, lsl #24
    2f44:	14740000 	ldrbtne	r0, [r4], #-0
    2f48:	65140000 	ldrvs	r0, [r4, #-0]
    2f4c:	0100646e 	tsteq	r0, lr, ror #8
    2f50:	00004f6c 	andeq	r4, r0, ip, ror #30
    2f54:	0014ad00 	andseq	sl, r4, r0, lsl #26
    2f58:	07d22800 	ldrbeq	r2, [r2, r0, lsl #16]
    2f5c:	6c010000 	stcvs	0, cr0, [r1], {-0}
    2f60:	00000068 	andeq	r0, r0, r8, rrx
    2f64:	29009102 	stmdbcs	r0, {r1, r8, ip, pc}
    2f68:	00000140 	andeq	r0, r0, r0, asr #2
    2f6c:	00000c18 	andeq	r0, r0, r8, lsl ip
    2f70:	a5200305 	strge	r0, [r0, #-773]!	; 0x305
    2f74:	69160000 	ldmdbvs	r6, {}	; <UNPREDICTABLE>
    2f78:	25700100 	ldrbcs	r0, [r0, #-256]!	; 0x100
    2f7c:	e7000000 	str	r0, [r0, -r0]
    2f80:	26000014 			; <UNDEFINED> instruction: 0x26000014
    2f84:	000007a5 	andeq	r0, r0, r5, lsr #15
    2f88:	004f7101 	subeq	r7, pc, r1, lsl #2
    2f8c:	15060000 	strne	r0, [r6, #-0]
    2f90:	d0240000 	eorle	r0, r4, r0
    2f94:	67000093 			; <UNDEFINED> instruction: 0x67000093
    2f98:	25000011 	strcs	r0, [r0, #-17]
    2f9c:	000093e4 	andeq	r9, r0, r4, ror #7
    2fa0:	0000116e 	andeq	r1, r0, lr, ror #2
    2fa4:	00000be2 	andeq	r0, r0, r2, ror #23
    2fa8:	02530120 	subseq	r0, r3, #32, 2
    2fac:	01206d08 	teqeq	r0, r8, lsl #26
    2fb0:	20030552 	andcs	r0, r3, r2, asr r5
    2fb4:	200000a5 	andcs	r0, r0, r5, lsr #1
    2fb8:	03055101 	movweq	r5, #20737	; 0x5101
    2fbc:	0000a5b4 			; <UNDEFINED> instruction: 0x0000a5b4
    2fc0:	05500120 	ldrbeq	r0, [r0, #-288]	; 0x120
    2fc4:	00a59803 	adceq	r9, r5, r3, lsl #16
    2fc8:	e8240000 	stmda	r4!, {}	; <UNPREDICTABLE>
    2fcc:	84000093 	strhi	r0, [r0], #-147	; 0x93
    2fd0:	1f000011 	svcne	0x00000011
    2fd4:	00009404 	andeq	r9, r0, r4, lsl #8
    2fd8:	00000762 	andeq	r0, r0, r2, ror #14
    2fdc:	02510120 	subseq	r0, r1, #32, 2
    2fe0:	0120007a 	teqeq	r0, sl, ror r0
    2fe4:	00780250 	rsbseq	r0, r8, r0, asr r2
    2fe8:	04060000 	streq	r0, [r6], #-0
    2fec:	0000004f 	andeq	r0, r0, pc, asr #32
    2ff0:	0000902a 	andeq	r9, r0, sl, lsr #32
    2ff4:	000c1800 	andeq	r1, ip, r0, lsl #16
    2ff8:	00812b00 	addeq	r2, r1, r0, lsl #22
    2ffc:	00120000 	andseq	r0, r2, r0
    3000:	000c0807 	andeq	r0, ip, r7, lsl #16
    3004:	07ad2300 	streq	r2, [sp, r0, lsl #6]!
    3008:	80010000 	andhi	r0, r1, r0
    300c:	00000025 	andeq	r0, r0, r5, lsr #32
    3010:	00009440 	andeq	r9, r0, r0, asr #8
    3014:	0000007c 	andeq	r0, r0, ip, ror r0
    3018:	0ce49c01 	stcleq	12, cr9, [r4], #4
    301c:	75140000 	ldrvc	r0, [r4, #-0]
    3020:	22800100 	addcs	r0, r0, #0, 2
    3024:	19000007 	stmdbne	r0, {r0, r1, r2}
    3028:	14000015 	strne	r0, [r0], #-21
    302c:	00667562 	rsbeq	r7, r6, r2, ror #10
    3030:	0c028001 	stceq	0, cr8, [r2], {1}
    3034:	154d0000 	strbne	r0, [sp, #-0]
    3038:	b4130000 	ldrlt	r0, [r3], #-0
    303c:	01000005 	tsteq	r0, r5
    3040:	00006881 	andeq	r6, r0, r1, lsl #17
    3044:	00158100 	andseq	r8, r5, r0, lsl #2
    3048:	07d21300 	ldrbeq	r1, [r2, r0, lsl #6]
    304c:	81010000 	mrshi	r0, (UNDEF: 1)
    3050:	00000068 	andeq	r0, r0, r8, rrx
    3054:	000015ba 			; <UNDEFINED> instruction: 0x000015ba
    3058:	00014029 	andeq	r4, r1, r9, lsr #32
    305c:	000cf400 	andeq	pc, ip, r0, lsl #8
    3060:	34030500 	strcc	r0, [r3], #-1280	; 0x500
    3064:	160000a5 	strne	r0, [r0], -r5, lsr #1
    3068:	86010069 	strhi	r0, [r1], -r9, rrx
    306c:	00000025 	andeq	r0, r0, r5, lsr #32
    3070:	000015ee 	andeq	r1, r0, lr, ror #11
    3074:	00945c24 	addseq	r5, r4, r4, lsr #24
    3078:	00116700 	andseq	r6, r1, r0, lsl #14
    307c:	94702500 	ldrbtls	r2, [r0], #-1280	; 0x500
    3080:	116e0000 	cmnne	lr, r0
    3084:	0cc40000 	stcleq	0, cr0, [r4], {0}
    3088:	01200000 	teqeq	r0, r0
    308c:	83080253 	movwhi	r0, #33363	; 0x8253
    3090:	05520120 	ldrbeq	r0, [r2, #-288]	; 0x120
    3094:	00a53403 	adceq	r3, r5, r3, lsl #8
    3098:	51012000 	mrspl	r2, (UNDEF: 1)
    309c:	a5b40305 	ldrge	r0, [r4, #773]!	; 0x305
    30a0:	01200000 	teqeq	r0, r0
    30a4:	98030550 	stmdals	r3, {r4, r6, r8, sl}
    30a8:	000000a5 	andeq	r0, r0, r5, lsr #1
    30ac:	00947424 	addseq	r7, r4, r4, lsr #8
    30b0:	00118400 	andseq	r8, r1, r0, lsl #8
    30b4:	94901f00 	ldrls	r1, [r0], #3840	; 0xf00
    30b8:	07620000 	strbeq	r0, [r2, -r0]!
    30bc:	01200000 	teqeq	r0, r0
    30c0:	00780251 	rsbseq	r0, r8, r1, asr r2
    30c4:	02500120 	subseq	r0, r0, #32, 2
    30c8:	00000077 	andeq	r0, r0, r7, ror r0
    30cc:	0000902a 	andeq	r9, r0, sl, lsr #32
    30d0:	000cf400 	andeq	pc, ip, r0, lsl #8
    30d4:	00812b00 	addeq	r2, r1, r0, lsl #22
    30d8:	00140000 	andseq	r0, r4, r0
    30dc:	000ce407 	andeq	lr, ip, r7, lsl #8
    30e0:	075c2300 	ldrbeq	r2, [ip, -r0, lsl #6]
    30e4:	93010000 	movwls	r0, #4096	; 0x1000
    30e8:	000000d9 	ldrdeq	r0, [r0], -r9
    30ec:	000094bc 			; <UNDEFINED> instruction: 0x000094bc
    30f0:	000000c0 	andeq	r0, r0, r0, asr #1
    30f4:	0e149c01 	cdpeq	12, 1, cr9, cr4, cr1, {0}
    30f8:	74140000 	ldrvc	r0, [r4], #-0
    30fc:	93010078 	movwls	r0, #4216	; 0x1078
    3100:	0000004f 	andeq	r0, r0, pc, asr #32
    3104:	0000160d 	andeq	r1, r0, sp, lsl #12
    3108:	00787214 	rsbseq	r7, r8, r4, lsl r2
    310c:	004f9301 	subeq	r9, pc, r1, lsl #6
    3110:	162e0000 	strtne	r0, [lr], -r0
    3114:	e2130000 	ands	r0, r3, #0
    3118:	01000003 	tsteq	r0, r3
    311c:	00006893 	muleq	r0, r3, r8
    3120:	00164f00 	andseq	r4, r6, r0, lsl #30
    3124:	06f52800 	ldrbteq	r2, [r5], r0, lsl #16
    3128:	93010000 	movwls	r0, #4096	; 0x1000
    312c:	00000068 	andeq	r0, r0, r8, rrx
    3130:	2c009102 	stfcsd	f1, [r0], {2}
    3134:	007a686d 	rsbseq	r6, sl, sp, ror #16
    3138:	002c9b01 	eoreq	r9, ip, r1, lsl #22
    313c:	27000000 	strcs	r0, [r0, -r0]
    3140:	462629b9 			; <UNDEFINED> instruction: 0x462629b9
    3144:	01000007 	tsteq	r0, r7
    3148:	00002c9c 	muleq	r0, ip, ip
    314c:	00166d00 	andseq	r6, r6, r0, lsl #26
    3150:	01402900 	cmpeq	r0, r0, lsl #18
    3154:	0e240000 	cdpeq	0, 2, cr0, cr4, cr0, {0}
    3158:	03050000 	movweq	r0, #20480	; 0x5000
    315c:	0000a54c 	andeq	sl, r0, ip, asr #10
    3160:	0094e417 	addseq	lr, r4, r7, lsl r4
    3164:	00000800 	andeq	r0, r0, r0, lsl #16
    3168:	000d9100 	andeq	r9, sp, r0, lsl #2
    316c:	6e692d00 	cdpvs	13, 6, cr2, cr9, cr0, {0}
    3170:	2c970100 	ldfcss	f0, [r7], {0}
    3174:	01000000 	mrseq	r0, (UNDEF: 0)
    3178:	94dc2500 	ldrbls	r2, [ip], #1280	; 0x500
    317c:	118b0000 	orrne	r0, fp, r0
    3180:	0da50000 	stceq	0, cr0, [r5]
    3184:	01200000 	teqeq	r0, r0
    3188:	00760250 	rsbseq	r0, r6, r0, asr r2
    318c:	94e42500 	strbtls	r2, [r4], #1280	; 0x500
    3190:	119c0000 	orrsne	r0, ip, r0
    3194:	0db90000 	ldceq	0, cr0, [r9]
    3198:	01200000 	teqeq	r0, r0
    319c:	00780250 	rsbseq	r0, r8, r0, asr r2
    31a0:	94f82500 	ldrbtls	r2, [r8], #1280	; 0x500
    31a4:	11310000 	teqne	r1, r0
    31a8:	0dd20000 	ldcleq	0, cr0, [r2]
    31ac:	01200000 	teqeq	r0, r0
    31b0:	20310151 	eorscs	r0, r1, r1, asr r1
    31b4:	76025001 	strvc	r5, [r2], -r1
    31b8:	3c240000 	stccc	0, cr0, [r4], #-0
    31bc:	67000095 			; <UNDEFINED> instruction: 0x67000095
    31c0:	25000011 	strcs	r0, [r0, #-17]
    31c4:	00009550 	andeq	r9, r0, r0, asr r5
    31c8:	0000116e 	andeq	r1, r0, lr, ror #2
    31cc:	00000e0a 	andeq	r0, r0, sl, lsl #28
    31d0:	02530120 	subseq	r0, r3, #32, 2
    31d4:	01209d08 	teqeq	r0, r8, lsl #26
    31d8:	4c030552 	cfstr32mi	mvfx0, [r3], {82}	; 0x52
    31dc:	200000a5 	andcs	r0, r0, r5, lsr #1
    31e0:	03055101 	movweq	r5, #20737	; 0x5101
    31e4:	0000a5b4 			; <UNDEFINED> instruction: 0x0000a5b4
    31e8:	05500120 	ldrbeq	r0, [r0, #-288]	; 0x120
    31ec:	00a5c803 	adceq	ip, r5, r3, lsl #16
    31f0:	54240000 	strtpl	r0, [r4], #-0
    31f4:	84000095 	strhi	r0, [r0], #-149	; 0x95
    31f8:	00000011 	andeq	r0, r0, r1, lsl r0
    31fc:	0000902a 	andeq	r9, r0, sl, lsr #32
    3200:	000e2400 	andeq	r2, lr, r0, lsl #8
    3204:	00812b00 	addeq	r2, r1, r0, lsl #22
    3208:	00130000 	andseq	r0, r3, r0
    320c:	000e1407 	andeq	r1, lr, r7, lsl #8
    3210:	07392300 	ldreq	r2, [r9, -r0, lsl #6]!
    3214:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    3218:	00000025 	andeq	r0, r0, r5, lsr #32
    321c:	0000957c 	andeq	r9, r0, ip, ror r5
    3220:	0000003c 	andeq	r0, r0, ip, lsr r0
    3224:	0ecc9c01 	cdpeq	12, 12, cr9, cr12, cr1, {0}
    3228:	a9130000 	ldmdbge	r3, {}	; <UNPREDICTABLE>
    322c:	01000003 	tsteq	r0, r3
    3230:	000722a9 	andeq	r2, r7, r9, lsr #5
    3234:	00169b00 	andseq	r9, r6, r0, lsl #22
    3238:	65721600 	ldrbvs	r1, [r2, #-1536]!	; 0x600
    323c:	aa010073 	bge	43410 <__bss_end__+0x38968>
    3240:	00000025 	andeq	r0, r0, r5, lsr #32
    3244:	000016bc 			; <UNDEFINED> instruction: 0x000016bc
    3248:	00014029 	andeq	r4, r1, r9, lsr #32
    324c:	000edc00 	andeq	sp, lr, r0, lsl #24
    3250:	60030500 	andvs	r0, r3, r0, lsl #10
    3254:	250000a5 	strcs	r0, [r0, #-165]	; 0xa5
    3258:	00009588 	andeq	r9, r0, r8, lsl #11
    325c:	00000762 	andeq	r0, r0, r2, ror #14
    3260:	00000e8a 	andeq	r0, r0, sl, lsl #29
    3264:	02510120 	subseq	r0, r1, #32, 2
    3268:	0120ff09 	msreq	LR_irq, r9
    326c:	01f30350 	mvnseq	r0, r0, asr r3
    3270:	94240050 	strtls	r0, [r4], #-80	; 0x50
    3274:	67000095 			; <UNDEFINED> instruction: 0x67000095
    3278:	25000011 	strcs	r0, [r0, #-17]
    327c:	000095a8 	andeq	r9, r0, r8, lsr #11
    3280:	0000116e 	andeq	r1, r0, lr, ror #2
    3284:	00000ec2 	andeq	r0, r0, r2, asr #29
    3288:	02530120 	subseq	r0, r3, #32, 2
    328c:	0120ac08 	teqeq	r0, r8, lsl #24
    3290:	60030552 	andvs	r0, r3, r2, asr r5
    3294:	200000a5 	andcs	r0, r0, r5, lsr #1
    3298:	03055101 	movweq	r5, #20737	; 0x5101
    329c:	0000a5b4 			; <UNDEFINED> instruction: 0x0000a5b4
    32a0:	05500120 	ldrbeq	r0, [r0, #-288]	; 0x120
    32a4:	00a60c03 	adceq	r0, r6, r3, lsl #24
    32a8:	ac240000 	stcge	0, cr0, [r4], #-0
    32ac:	84000095 	strhi	r0, [r0], #-149	; 0x95
    32b0:	00000011 	andeq	r0, r0, r1, lsl r0
    32b4:	0000902a 	andeq	r9, r0, sl, lsr #32
    32b8:	000edc00 	andeq	sp, lr, r0, lsl #24
    32bc:	00812b00 	addeq	r2, r1, r0, lsl #22
    32c0:	000c0000 	andeq	r0, ip, r0
    32c4:	000ecc07 	andeq	ip, lr, r7, lsl #24
    32c8:	077d1200 	ldrbeq	r1, [sp, -r0, lsl #4]!
    32cc:	b0010000 	andlt	r0, r1, r0
    32d0:	000095b8 			; <UNDEFINED> instruction: 0x000095b8
    32d4:	0000002c 	andeq	r0, r0, ip, lsr #32
    32d8:	0f259c01 	svceq	0x00259c01
    32dc:	a9130000 	ldmdbge	r3, {}	; <UNPREDICTABLE>
    32e0:	01000003 	tsteq	r0, r3
    32e4:	000722b0 			; <UNDEFINED> instruction: 0x000722b0
    32e8:	0016cf00 	andseq	ip, r6, r0, lsl #30
    32ec:	736d1400 	cmnvc	sp, #0, 8
    32f0:	b0010067 	andlt	r0, r1, r7, rrx
    32f4:	00000097 	muleq	r0, r7, r0
    32f8:	000016ed 	andeq	r1, r0, sp, ror #13
    32fc:	0095d01f 	addseq	sp, r5, pc, lsl r0
    3300:	00017600 	andeq	r7, r1, r0, lsl #12
    3304:	50012000 	andpl	r2, r1, r0
    3308:	00007502 	andeq	r7, r0, r2, lsl #10
    330c:	03ae2300 			; <UNDEFINED> instruction: 0x03ae2300
    3310:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    3314:	00000025 	andeq	r0, r0, r5, lsr #32
    3318:	000095e4 	andeq	r9, r0, r4, ror #11
    331c:	00000084 	andeq	r0, r0, r4, lsl #1
    3320:	10199c01 	andsne	r9, r9, r1, lsl #24
    3324:	a9130000 	ldmdbge	r3, {}	; <UNPREDICTABLE>
    3328:	01000003 	tsteq	r0, r3
    332c:	000722b9 			; <UNDEFINED> instruction: 0x000722b9
    3330:	00170b00 	andseq	r0, r7, r0, lsl #22
    3334:	6d662e00 	stclvs	14, cr2, [r6, #-0]
    3338:	b9010074 	stmdblt	r1, {r2, r4, r5, r6}
    333c:	00000097 	muleq	r0, r7, r0
    3340:	2f749102 	svccs	0x00749102
    3344:	66756215 			; <UNDEFINED> instruction: 0x66756215
    3348:	19ba0100 	ldmibne	sl!, {r8}
    334c:	03000010 	movweq	r0, #16
    3350:	187c9c91 	ldmdane	ip!, {r0, r4, r7, sl, fp, ip, pc}^
    3354:	0000027f 	andeq	r0, r0, pc, ror r2
    3358:	0106bc01 	tsteq	r6, r1, lsl #24
    335c:	91030000 	mrsls	r0, (UNDEF: 3)
    3360:	73167c98 	tstvc	r6, #152, 24	; 0x9800
    3364:	be01007a 	mcrlt	0, 0, r0, cr1, cr10, {3}
    3368:	00000025 	andeq	r0, r0, r5, lsr #32
    336c:	00001737 	andeq	r1, r0, r7, lsr r7
    3370:	00014029 	andeq	r4, r1, r9, lsr #32
    3374:	00103a00 	andseq	r3, r0, r0, lsl #20
    3378:	70030500 	andvc	r0, r3, r0, lsl #10
    337c:	250000a5 	strcs	r0, [r0, #-165]	; 0xa5
    3380:	0000960c 	andeq	r9, r0, ip, lsl #12
    3384:	000011ad 	andeq	r1, r0, sp, lsr #3
    3388:	00000fc0 	andeq	r0, r0, r0, asr #31
    338c:	02530120 	subseq	r0, r3, #32, 2
    3390:	01205891 			; <UNDEFINED> instruction: 0x01205891
    3394:	54910352 	ldrpl	r0, [r1], #850	; 0x352
    3398:	51012006 	tstpl	r1, r6
    339c:	01cc0a03 	biceq	r0, ip, r3, lsl #20
    33a0:	03500120 	cmpeq	r0, #32, 2
    33a4:	007bfc91 			; <UNDEFINED> instruction: 0x007bfc91
    33a8:	00962024 	addseq	r2, r6, r4, lsr #32
    33ac:	00116700 	andseq	r6, r1, r0, lsl #14
    33b0:	96342500 	ldrtls	r2, [r4], -r0, lsl #10
    33b4:	116e0000 	cmnne	lr, r0
    33b8:	0ff80000 	svceq	0x00f80000
    33bc:	01200000 	teqeq	r0, r0
    33c0:	c0080253 	andgt	r0, r8, r3, asr r2
    33c4:	05520120 	ldrbeq	r0, [r2, #-288]	; 0x120
    33c8:	00a57003 	adceq	r7, r5, r3
    33cc:	51012000 	mrspl	r2, (UNDEF: 1)
    33d0:	a5b40305 	ldrge	r0, [r4, #773]!	; 0x305
    33d4:	01200000 	teqeq	r0, r0
    33d8:	44030550 	strmi	r0, [r3], #-1360	; 0x550
    33dc:	000000a6 	andeq	r0, r0, r6, lsr #1
    33e0:	00963824 	addseq	r3, r6, r4, lsr #16
    33e4:	00118400 	andseq	r8, r1, r0, lsl #8
    33e8:	96441f00 	strbls	r1, [r4], -r0, lsl #30
    33ec:	0ee10000 	cdpeq	0, 14, cr0, cr1, cr0, {0}
    33f0:	01200000 	teqeq	r0, r0
    33f4:	fc910351 	ldc2	3, cr0, [r1], {81}	; 0x51
    33f8:	5001207b 	andpl	r2, r1, fp, ror r0
    33fc:	00007502 	andeq	r7, r0, r2, lsl #10
    3400:	00902a00 	addseq	r2, r0, r0, lsl #20
    3404:	102a0000 	eorne	r0, sl, r0
    3408:	81300000 	teqhi	r0, r0
    340c:	cb000000 	blgt	3414 <_start-0x4bec>
    3410:	902a0001 	eorls	r0, sl, r1
    3414:	3a000000 	bcc	341c <_start-0x4be4>
    3418:	2b000010 	blcs	3460 <_start-0x4ba0>
    341c:	00000081 	andeq	r0, r0, r1, lsl #1
    3420:	2a07000e 	bcs	1c3460 <__bss_end__+0x1b89b8>
    3424:	23000010 	movwcs	r0, #16
    3428:	000007ee 	andeq	r0, r0, lr, ror #15
    342c:	0025c501 	eoreq	ip, r5, r1, lsl #10
    3430:	96680000 	strbtls	r0, [r8], -r0
    3434:	004c0000 	subeq	r0, ip, r0
    3438:	9c010000 	stcls	0, cr0, [r1], {-0}
    343c:	0000111c 	andeq	r1, r0, ip, lsl r1
    3440:	01007514 	tsteq	r0, r4, lsl r5
    3444:	000722c5 	andeq	r2, r7, r5, asr #5
    3448:	00177600 	andseq	r7, r7, r0, lsl #12
    344c:	75621400 	strbvc	r1, [r2, #-1024]!	; 0x400
    3450:	c5010066 	strgt	r0, [r1, #-102]	; 0x66
    3454:	00000c02 	andeq	r0, r0, r2, lsl #24
    3458:	00001797 	muleq	r0, r7, r7
    345c:	0005b413 	andeq	fp, r5, r3, lsl r4
    3460:	68c50100 	stmiavs	r5, {r8}^
    3464:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    3468:	14000017 	strne	r0, [r0], #-23
    346c:	00646e65 	rsbeq	r6, r4, r5, ror #28
    3470:	004fc501 	subeq	ip, pc, r1, lsl #10
    3474:	17d90000 	ldrbne	r0, [r9, r0]
    3478:	72160000 	andsvc	r0, r6, #0
    347c:	01007365 	tsteq	r0, r5, ror #6
    3480:	000025c6 	andeq	r2, r0, r6, asr #11
    3484:	0017fa00 	andseq	pc, r7, r0, lsl #20
    3488:	01402900 	cmpeq	r0, r0, lsl #18
    348c:	112c0000 	teqne	ip, r0
    3490:	03050000 	movweq	r0, #20480	; 0x5000
    3494:	0000a580 	andeq	sl, r0, r0, lsl #11
    3498:	00967c25 	addseq	r7, r6, r5, lsr #24
    349c:	000b1e00 	andeq	r1, fp, r0, lsl #28
    34a0:	0010da00 	andseq	sp, r0, r0, lsl #20
    34a4:	52012000 	andpl	r2, r1, #0
    34a8:	5201f303 	andpl	pc, r1, #201326592	; 0xc000000
    34ac:	03510120 	cmpeq	r1, #32, 2
    34b0:	205101f3 	ldrshcs	r0, [r1], #-19	; 0xffffffed
    34b4:	f3035001 	vhadd.u8	d5, d3, d1
    34b8:	02205001 	eoreq	r5, r0, #1
    34bc:	0902007d 	stmdbeq	r2, {r0, r2, r3, r4, r5, r6}
    34c0:	882400ff 	stmdahi	r4!, {r0, r1, r2, r3, r4, r5, r6, r7}
    34c4:	67000096 			; <UNDEFINED> instruction: 0x67000096
    34c8:	25000011 	strcs	r0, [r0, #-17]
    34cc:	0000969c 	muleq	r0, ip, r6
    34d0:	0000116e 	andeq	r1, r0, lr, ror #2
    34d4:	00001112 	andeq	r1, r0, r2, lsl r1
    34d8:	02530120 	subseq	r0, r3, #32, 2
    34dc:	0120c808 	teqeq	r0, r8, lsl #16
    34e0:	80030552 	andhi	r0, r3, r2, asr r5
    34e4:	200000a5 	andcs	r0, r0, r5, lsr #1
    34e8:	03055101 	movweq	r5, #20737	; 0x5101
    34ec:	0000a5b4 			; <UNDEFINED> instruction: 0x0000a5b4
    34f0:	05500120 	ldrbeq	r0, [r0, #-288]	; 0x120
    34f4:	00a60c03 	adceq	r0, r6, r3, lsl #24
    34f8:	a0240000 	eorge	r0, r4, r0
    34fc:	84000096 	strhi	r0, [r0], #-150	; 0x96
    3500:	00000011 	andeq	r0, r0, r1, lsl r0
    3504:	0000902a 	andeq	r9, r0, sl, lsr #32
    3508:	00112c00 	andseq	r2, r1, r0, lsl #24
    350c:	00812b00 	addeq	r2, r1, r0, lsl #22
    3510:	00160000 	andseq	r0, r6, r0
    3514:	00111c07 	andseq	r1, r1, r7, lsl #24
    3518:	07c73100 	strbeq	r3, [r7, r0, lsl #2]
    351c:	21060000 	mrscs	r0, (UNDEF: 6)
    3520:	00001147 	andeq	r1, r0, r7, asr #2
    3524:	00002c32 	andeq	r2, r0, r2, lsr ip
    3528:	002c3200 	eoreq	r3, ip, r0, lsl #4
    352c:	33000000 	movwcc	r0, #0
    3530:	000004e2 	andeq	r0, r0, r2, ror #9
    3534:	002c5707 	eoreq	r5, ip, r7, lsl #14
    3538:	8a340000 	bhi	d03540 <__bss_end__+0xcf8a98>
    353c:	06000007 	streq	r0, [r0], -r7
    3540:	00002524 	andeq	r2, r0, r4, lsr #10
    3544:	00116700 	andseq	r6, r1, r0, lsl #14
    3548:	002c3200 	eoreq	r3, ip, r0, lsl #4
    354c:	35000000 	strcc	r0, [r0, #-0]
    3550:	000001fb 	strdeq	r0, [r0], -fp
    3554:	2a341e07 	bcs	d0ad78 <__bss_end__+0xd002d0>
    3558:	07000002 	streq	r0, [r0, -r2]
    355c:	00002529 	andeq	r2, r0, r9, lsr #10
    3560:	00118400 	andseq	r8, r1, r0, lsl #8
    3564:	00973200 	addseq	r3, r7, r0, lsl #4
    3568:	002f0000 	eoreq	r0, pc, r0
    356c:	00008235 	andeq	r8, r0, r5, lsr r2
    3570:	31660700 	cmncc	r6, r0, lsl #14
    3574:	00000805 	andeq	r0, r0, r5, lsl #16
    3578:	119c1d06 	orrsne	r1, ip, r6, lsl #26
    357c:	2c320000 	ldccs	0, cr0, [r2], #-0
    3580:	00000000 	andeq	r0, r0, r0
    3584:	0007df31 	andeq	sp, r7, r1, lsr pc
    3588:	ad1c0600 	ldcge	6, cr0, [ip, #-0]
    358c:	32000011 	andcc	r0, r0, #17
    3590:	0000002c 	andeq	r0, r0, ip, lsr #32
    3594:	02273600 	eoreq	r3, r7, #0, 12
    3598:	02080000 	andeq	r0, r8, #0
    359c:	00000025 	andeq	r0, r0, r5, lsr #32
    35a0:	00008a32 	andeq	r8, r0, r2, lsr sl
    35a4:	00253200 	eoreq	r3, r5, r0, lsl #4
    35a8:	97320000 	ldrls	r0, [r2, -r0]!
    35ac:	32000000 	andcc	r0, r0, #0
    35b0:	00000106 	andeq	r0, r0, r6, lsl #2
    35b4:	03ff0000 	mvnseq	r0, #0
    35b8:	00040000 	andeq	r0, r4, r0
    35bc:	000010fe 	strdeq	r1, [r0], -lr
    35c0:	000b0104 	andeq	r0, fp, r4, lsl #2
    35c4:	87010000 	strhi	r0, [r1, -r0]
    35c8:	3b000009 	blcc	35f4 <_start-0x4a0c>
    35cc:	b4000002 	strlt	r0, [r0], #-2
    35d0:	54000096 	strpl	r0, [r0], #-150	; 0x96
    35d4:	9c000001 	stcls	0, cr0, [r0], {1}
    35d8:	0200000e 	andeq	r0, r0, #14
    35dc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    35e0:	04030074 	streq	r0, [r3], #-116	; 0x74
    35e4:	00017b07 	andeq	r7, r1, r7, lsl #22
    35e8:	06010300 	streq	r0, [r1], -r0, lsl #6
    35ec:	00000076 	andeq	r0, r0, r6, ror r0
    35f0:	cc050203 	sfmgt	f0, 4, [r5], {3}
    35f4:	03000001 	movweq	r0, #1
    35f8:	01b80504 			; <UNDEFINED> instruction: 0x01b80504
    35fc:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    3600:	0001b305 	andeq	fp, r1, r5, lsl #6
    3604:	08010300 	stmdaeq	r1, {r8, r9}
    3608:	00000074 	andeq	r0, r0, r4, ror r0
    360c:	98070203 	stmdals	r7, {r0, r1, r9}
    3610:	03000000 	movweq	r0, #0
    3614:	01760704 	cmneq	r6, r4, lsl #14
    3618:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    361c:	00017107 	andeq	r7, r1, r7, lsl #2
    3620:	07040300 	streq	r0, [r4, -r0, lsl #6]
    3624:	000001aa 	andeq	r0, r0, sl, lsr #3
    3628:	7d080103 	stfvcs	f0, [r8, #-12]
    362c:	04000000 	streq	r0, [r0], #-0
    3630:	b20c0201 	andlt	r0, ip, #268435456	; 0x10000000
    3634:	05000000 	streq	r0, [r0, #-0]
    3638:	000009a4 	andeq	r0, r0, r4, lsr #19
    363c:	08980500 	ldmeq	r8, {r8, sl}
    3640:	05010000 	streq	r0, [r1, #-0]
    3644:	00000851 	andeq	r0, r0, r1, asr r8
    3648:	08a90504 	stmiaeq	r9!, {r2, r8, sl}
    364c:	05050000 	streq	r0, [r5, #-0]
    3650:	000008b8 			; <UNDEFINED> instruction: 0x000008b8
    3654:	08c70506 	stmiaeq	r7, {r1, r2, r8, sl}^
    3658:	05070000 	streq	r0, [r7, #-0]
    365c:	00000957 	andeq	r0, r0, r7, asr r9
    3660:	08d60503 	ldmeq	r6, {r0, r1, r8, sl}^
    3664:	00020000 	andeq	r0, r2, r0
    3668:	00090906 	andeq	r0, r9, r6, lsl #18
    366c:	79150200 	ldmdbvc	r5, {r9}
    3670:	07000000 	streq	r0, [r0, -r0]
    3674:	0000006a 	andeq	r0, r0, sl, rrx
    3678:	96b43701 	ldrtls	r3, [r4], r1, lsl #14
    367c:	009c0000 	addseq	r0, ip, r0
    3680:	9c010000 	stcls	0, cr0, [r1], {-0}
    3684:	000001c3 	andeq	r0, r0, r3, asr #3
    3688:	0096bc08 	addseq	fp, r6, r8, lsl #24
    368c:	0003a800 	andeq	sl, r3, r0, lsl #16
    3690:	96c80900 	strbls	r0, [r8], r0, lsl #18
    3694:	03af0000 			; <UNDEFINED> instruction: 0x03af0000
    3698:	00f30000 	rscseq	r0, r3, r0
    369c:	010a0000 	mrseq	r0, (UNDEF: 10)
    36a0:	0a320151 	beq	c83bec <__bss_end__+0xc79144>
    36a4:	3e015001 	cdpcc	0, 0, cr5, cr1, cr1, {0}
    36a8:	96d40900 	ldrbls	r0, [r4], r0, lsl #18
    36ac:	03af0000 			; <UNDEFINED> instruction: 0x03af0000
    36b0:	010b0000 	mrseq	r0, (UNDEF: 11)
    36b4:	010a0000 	mrseq	r0, (UNDEF: 10)
    36b8:	0a320151 	beq	c83c04 <__bss_end__+0xc7915c>
    36bc:	3f015001 	svccc	0x00015001
    36c0:	96d80800 	ldrbls	r0, [r8], r0, lsl #16
    36c4:	03a80000 			; <UNDEFINED> instruction: 0x03a80000
    36c8:	e8090000 	stmda	r9, {}	; <UNPREDICTABLE>
    36cc:	c5000096 	strgt	r0, [r0, #-150]	; 0x96
    36d0:	28000003 	stmdacs	r0, {r0, r1}
    36d4:	0a000001 	beq	36e0 <_start-0x4920>
    36d8:	75025001 	strvc	r5, [r2, #-1]
    36dc:	f4090000 	vst4.8	{d0-d3}, [r9], r0
    36e0:	e6000096 			; <UNDEFINED> instruction: 0xe6000096
    36e4:	3c000003 	stccc	0, cr0, [r0], {3}
    36e8:	0a000001 	beq	36f4 <_start-0x490c>
    36ec:	75025001 	strvc	r5, [r2, #-1]
    36f0:	f8080000 			; <UNDEFINED> instruction: 0xf8080000
    36f4:	a8000096 	stmdage	r0, {r1, r2, r4, r7}
    36f8:	09000003 	stmdbeq	r0, {r0, r1}
    36fc:	00009704 	andeq	r9, r0, r4, lsl #14
    3700:	000003e6 	andeq	r0, r0, r6, ror #7
    3704:	00000158 	andeq	r0, r0, r8, asr r1
    3708:	0151010a 	cmpeq	r1, sl, lsl #2
    370c:	10090030 	andne	r0, r9, r0, lsr r0
    3710:	e6000097 			; <UNDEFINED> instruction: 0xe6000097
    3714:	6b000003 	blvs	3728 <_start-0x48d8>
    3718:	0a000001 	beq	3724 <_start-0x48dc>
    371c:	30015101 	andcc	r5, r1, r1, lsl #2
    3720:	971c0900 	ldrls	r0, [ip, -r0, lsl #18]
    3724:	03e60000 	mvneq	r0, #0
    3728:	017e0000 	cmneq	lr, r0
    372c:	010a0000 	mrseq	r0, (UNDEF: 10)
    3730:	00360151 	eorseq	r0, r6, r1, asr r1
    3734:	00972809 	addseq	r2, r7, r9, lsl #16
    3738:	0003e600 	andeq	lr, r3, r0, lsl #12
    373c:	00019100 	andeq	r9, r1, r0, lsl #2
    3740:	51010a00 	tstpl	r1, r0, lsl #20
    3744:	09003301 	stmdbeq	r0, {r0, r8, r9, ip, sp}
    3748:	00009734 	andeq	r9, r0, r4, lsr r7
    374c:	000003e6 	andeq	r0, r0, r6, ror #7
    3750:	000001a6 	andeq	r0, r0, r6, lsr #3
    3754:	0351010a 	cmpeq	r1, #-2147483646	; 0x80000002
    3758:	00010e0a 	andeq	r0, r1, sl, lsl #28
    375c:	00974009 	addseq	r4, r7, r9
    3760:	0003e600 	andeq	lr, r3, r0, lsl #12
    3764:	0001b900 	andeq	fp, r1, r0, lsl #18
    3768:	51010a00 	tstpl	r1, r0, lsl #20
    376c:	08003301 	stmdaeq	r0, {r0, r8, r9, ip, sp}
    3770:	00009744 	andeq	r9, r0, r4, asr #14
    3774:	000003a8 	andeq	r0, r0, r8, lsr #7
    3778:	08600b00 	stmdaeq	r0!, {r8, r9, fp}^
    377c:	57010000 	strpl	r0, [r1, -r0]
    3780:	00000025 	andeq	r0, r0, r5, lsr #32
    3784:	00009750 	andeq	r9, r0, r0, asr r7
    3788:	0000001c 	andeq	r0, r0, ip, lsl r0
    378c:	01e69c01 	mvneq	r9, r1, lsl #24
    3790:	60080000 	andvs	r0, r8, r0
    3794:	c5000097 	strgt	r0, [r0, #-151]	; 0x97
    3798:	00000003 	andeq	r0, r0, r3
    379c:	00073c0b 	andeq	r3, r7, fp, lsl #24
    37a0:	255d0100 	ldrbcs	r0, [sp, #-256]	; 0x100
    37a4:	6c000000 	stcvs	0, cr0, [r0], {-0}
    37a8:	28000097 	stmdacs	r0, {r0, r1, r2, r4, r7}
    37ac:	01000000 	mrseq	r0, (UNDEF: 0)
    37b0:	0002129c 	muleq	r2, ip, r2
    37b4:	97740800 	ldrbls	r0, [r4, -r0, lsl #16]!
    37b8:	01c30000 	biceq	r0, r3, r0
    37bc:	88080000 	stmdahi	r8, {}	; <UNPREDICTABLE>
    37c0:	c5000097 	strgt	r0, [r0, #-151]	; 0x97
    37c4:	00000003 	andeq	r0, r0, r3
    37c8:	0009150b 	andeq	r1, r9, fp, lsl #10
    37cc:	25640100 	strbcs	r0, [r4, #-256]!	; 0x100
    37d0:	94000000 	strls	r0, [r0], #-0
    37d4:	1c000097 	stcne	0, cr0, [r0], {151}	; 0x97
    37d8:	01000000 	mrseq	r0, (UNDEF: 0)
    37dc:	0002359c 	muleq	r2, ip, r5
    37e0:	97a40800 	strls	r0, [r4, r0, lsl #16]!
    37e4:	03c50000 	biceq	r0, r5, #0
    37e8:	07000000 	streq	r0, [r0, -r0]
    37ec:	0000040a 	andeq	r0, r0, sl, lsl #8
    37f0:	97b06a01 	ldrls	r6, [r0, r1, lsl #20]!
    37f4:	002c0000 	eoreq	r0, ip, r0
    37f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    37fc:	00000271 	andeq	r0, r0, r1, ror r2
    3800:	0100630c 	tsteq	r0, ip, lsl #6
    3804:	00002c6a 	andeq	r2, r0, sl, ror #24
    3808:	00181800 	andseq	r1, r8, r0, lsl #16
    380c:	97bc0800 	ldrls	r0, [ip, r0, lsl #16]!
    3810:	02120000 	andseq	r0, r2, #0
    3814:	d40d0000 	strle	r0, [sp], #-0
    3818:	e6000097 			; <UNDEFINED> instruction: 0xe6000097
    381c:	0a000003 	beq	3830 <_start-0x47d0>
    3820:	74025101 	strvc	r5, [r2], #-257	; 0x101
    3824:	0b000000 	bleq	382c <_start-0x47d4>
    3828:	0000087e 	andeq	r0, r0, lr, ror r8
    382c:	00257401 	eoreq	r7, r5, r1, lsl #8
    3830:	97dc0000 	ldrbls	r0, [ip, r0]
    3834:	000c0000 	andeq	r0, ip, r0
    3838:	9c010000 	stcls	0, cr0, [r1], {-0}
    383c:	00000294 	muleq	r0, r4, r2
    3840:	0097e408 	addseq	lr, r7, r8, lsl #8
    3844:	0001c300 	andeq	ip, r1, r0, lsl #6
    3848:	c30b0000 	movwgt	r0, #45056	; 0xb000
    384c:	01000009 	tsteq	r0, r9
    3850:	00002578 	andeq	r2, r0, r8, ror r5
    3854:	0097e800 	addseq	lr, r7, r0, lsl #16
    3858:	00002000 	andeq	r2, r0, r0
    385c:	c09c0100 	addsgt	r0, ip, r0, lsl #2
    3860:	08000002 	stmdaeq	r0, {r1}
    3864:	000097f0 	strdeq	r9, [r0], -r0
    3868:	00000271 	andeq	r0, r0, r1, ror r2
    386c:	0097fc08 	addseq	pc, r7, r8, lsl #24
    3870:	0001e600 	andeq	lr, r1, r0, lsl #12
    3874:	2f0e0000 	svccs	0x000e0000
    3878:	01000009 	tsteq	r0, r9
    387c:	0002d116 	andeq	sp, r2, r6, lsl r1
    3880:	ec030500 	cfstr32	mvfx0, [r3], {-0}
    3884:	0f00009e 	svceq	0x0000009e
    3888:	0002d704 	andeq	sp, r2, r4, lsl #14
    388c:	002c1000 	eoreq	r1, ip, r0
    3890:	230e0000 	movwcs	r0, #57344	; 0xe000
    3894:	01000009 	tsteq	r0, r9
    3898:	0002d117 	andeq	sp, r2, r7, lsl r1
    389c:	bc030500 	cfstr32lt	mvfx0, [r3], {-0}
    38a0:	0e00009e 	mcreq	0, 0, r0, cr0, cr14, {4}
    38a4:	00000834 	andeq	r0, r0, r4, lsr r8
    38a8:	02d11a01 	sbcseq	r1, r1, #4096	; 0x1000
    38ac:	03050000 	movweq	r0, #20480	; 0x5000
    38b0:	00009ed8 	ldrdeq	r9, [r0], -r8
    38b4:	0008e50e 	andeq	lr, r8, lr, lsl #10
    38b8:	d11b0100 	tstle	fp, r0, lsl #2
    38bc:	05000002 	streq	r0, [r0, #-2]
    38c0:	009ec403 	addseq	ip, lr, r3, lsl #8
    38c4:	08fa0e00 	ldmeq	sl!, {r9, sl, fp}^
    38c8:	1c010000 	stcne	0, cr0, [r1], {-0}
    38cc:	000002d1 	ldrdeq	r0, [r0], -r1
    38d0:	9ec80305 	cdpls	3, 12, cr0, cr8, cr5, {0}
    38d4:	950e0000 	strls	r0, [lr, #-0]
    38d8:	01000009 	tsteq	r0, r9
    38dc:	0002d11d 	andeq	sp, r2, sp, lsl r1
    38e0:	cc030500 	cfstr32gt	mvfx0, [r3], {-0}
    38e4:	0e00009e 	mcreq	0, 0, r0, cr0, cr14, {4}
    38e8:	00000825 	andeq	r0, r0, r5, lsr #16
    38ec:	02d11e01 	sbcseq	r1, r1, #1, 28
    38f0:	03050000 	movweq	r0, #20480	; 0x5000
    38f4:	00009ee8 	andeq	r9, r0, r8, ror #29
    38f8:	0009b40e 	andeq	fp, r9, lr, lsl #8
    38fc:	d11f0100 	tstle	pc, r0, lsl #2
    3900:	05000002 	streq	r0, [r0, #-2]
    3904:	009ed403 	addseq	sp, lr, r3, lsl #8
    3908:	08420e00 	stmdaeq	r2, {r9, sl, fp}^
    390c:	20010000 	andcs	r0, r1, r0
    3910:	000002d1 	ldrdeq	r0, [r0], -r1
    3914:	9ee40305 	cdpls	3, 14, cr0, cr4, cr5, {0}
    3918:	780e0000 	stmdavc	lr, {}	; <UNPREDICTABLE>
    391c:	01000009 	tsteq	r0, r9
    3920:	0002d121 	andeq	sp, r2, r1, lsr #2
    3924:	e0030500 	and	r0, r3, r0, lsl #10
    3928:	0e00009e 	mcreq	0, 0, r0, cr0, cr14, {4}
    392c:	0000086e 	andeq	r0, r0, lr, ror #16
    3930:	02d12201 	sbcseq	r2, r1, #268435456	; 0x10000000
    3934:	03050000 	movweq	r0, #20480	; 0x5000
    3938:	00009ec0 	andeq	r9, r0, r0, asr #29
    393c:	0009470e 	andeq	r4, r9, lr, lsl #14
    3940:	d1230100 	teqle	r3, r0, lsl #2
    3944:	05000002 	streq	r0, [r0, #-2]
    3948:	009edc03 	addseq	sp, lr, r3, lsl #24
    394c:	09370e00 	ldmdbeq	r7!, {r9, sl, fp}
    3950:	24010000 	strcs	r0, [r1], #-0
    3954:	000002d1 	ldrdeq	r0, [r0], -r1
    3958:	9ed00305 	cdpls	3, 13, cr0, cr0, cr5, {0}
    395c:	8c110000 	ldchi	0, cr0, [r1], {-0}
    3960:	03000008 	movweq	r0, #8
    3964:	0966128a 	stmdbeq	r6!, {r1, r3, r7, r9, ip}^
    3968:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
    396c:	000003c5 	andeq	r0, r0, r5, asr #7
    3970:	00002c13 	andeq	r2, r0, r3, lsl ip
    3974:	00b21300 	adcseq	r1, r2, r0, lsl #6
    3978:	14000000 	strne	r0, [r0], #-0
    397c:	000009d3 	ldrdeq	r0, [r0], -r3
    3980:	002ca903 	eoreq	sl, ip, r3, lsl #18
    3984:	03da0000 	bicseq	r0, sl, #0
    3988:	da130000 	ble	4c3990 <__bss_end__+0x4b8ee8>
    398c:	00000003 	andeq	r0, r0, r3
    3990:	03e0040f 	mvneq	r0, #251658240	; 0xf000000
    3994:	e5150000 	ldr	r0, [r5, #-0]
    3998:	16000003 	strne	r0, [r0], -r3
    399c:	0008f412 	andeq	pc, r8, r2, lsl r4	; <UNPREDICTABLE>
    39a0:	fc9d0300 	ldc2	3, cr0, [sp], {0}
    39a4:	13000003 	movwne	r0, #3
    39a8:	000003fc 	strdeq	r0, [r0], -ip
    39ac:	00002c13 	andeq	r2, r0, r3, lsl ip
    39b0:	040f0000 	streq	r0, [pc], #-0	; 39b8 <_start-0x4648>
    39b4:	000003e5 	andeq	r0, r0, r5, ror #7
    39b8:	00082100 	andeq	r2, r8, r0, lsl #2
    39bc:	2c000400 	cfstrscs	mvf0, [r0], {-0}
    39c0:	04000012 	streq	r0, [r0], #-18
    39c4:	00000b01 	andeq	r0, r0, r1, lsl #22
    39c8:	0a230100 	beq	8c3dd0 <__bss_end__+0x8b9328>
    39cc:	023b0000 	eorseq	r0, fp, #0
    39d0:	98d80000 	ldmls	r8, {}^	; <UNPREDICTABLE>
    39d4:	05680000 	strbeq	r0, [r8, #-0]!
    39d8:	0fa10000 	svceq	0x00a10000
    39dc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    39e0:	00017107 	andeq	r7, r1, r7, lsl #2
    39e4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    39e8:	0000017b 	andeq	r0, r0, fp, ror r1
    39ec:	76060102 	strvc	r0, [r6], -r2, lsl #2
    39f0:	02000000 	andeq	r0, r0, #0
    39f4:	01cc0502 	biceq	r0, ip, r2, lsl #10
    39f8:	04020000 	streq	r0, [r2], #-0
    39fc:	0001b805 	andeq	fp, r1, r5, lsl #16
    3a00:	05080200 	streq	r0, [r8, #-512]	; 0x200
    3a04:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
    3a08:	74080102 	strvc	r0, [r8], #-258	; 0x102
    3a0c:	02000000 	andeq	r0, r0, #0
    3a10:	00980702 	addseq	r0, r8, r2, lsl #14
    3a14:	04020000 	streq	r0, [r2], #-0
    3a18:	00017607 	andeq	r7, r1, r7, lsl #12
    3a1c:	05040300 	streq	r0, [r4, #-768]	; 0x300
    3a20:	00746e69 	rsbseq	r6, r4, r9, ror #28
    3a24:	aa070402 	bge	1c4a34 <__bss_end__+0x1b9f8c>
    3a28:	02000001 	andeq	r0, r0, #1
    3a2c:	007d0801 	rsbseq	r0, sp, r1, lsl #16
    3a30:	01040000 	mrseq	r0, (UNDEF: 4)
    3a34:	00b20c02 	adcseq	r0, r2, r2, lsl #24
    3a38:	a4050000 	strge	r0, [r5], #-0
    3a3c:	00000009 	andeq	r0, r0, r9
    3a40:	00089805 	andeq	r9, r8, r5, lsl #16
    3a44:	51050100 	mrspl	r0, (UNDEF: 21)
    3a48:	04000008 	streq	r0, [r0], #-8
    3a4c:	0008a905 	andeq	sl, r8, r5, lsl #18
    3a50:	b8050500 	stmdalt	r5, {r8, sl}
    3a54:	06000008 	streq	r0, [r0], -r8
    3a58:	0008c705 	andeq	ip, r8, r5, lsl #14
    3a5c:	57050700 	strpl	r0, [r5, -r0, lsl #14]
    3a60:	03000009 	movweq	r0, #9
    3a64:	0008d605 	andeq	sp, r8, r5, lsl #12
    3a68:	06000200 	streq	r0, [r0], -r0, lsl #4
    3a6c:	00000909 	andeq	r0, r0, r9, lsl #18
    3a70:	00791502 	rsbseq	r1, r9, r2, lsl #10
    3a74:	05070000 	streq	r0, [r7, #-0]
    3a78:	01000008 	tsteq	r0, r8
    3a7c:	0098d83f 	addseq	sp, r8, pc, lsr r8
    3a80:	0000d400 	andeq	sp, r0, r0, lsl #8
    3a84:	339c0100 	orrscc	r0, ip, #0, 2
    3a88:	08000001 	stmdaeq	r0, {r0}
    3a8c:	006e6970 	rsbeq	r6, lr, r0, ror r9
    3a90:	002c3f01 	eoreq	r3, ip, r1, lsl #30
    3a94:	18360000 	ldmdane	r6!, {}	; <UNPREDICTABLE>
    3a98:	5f090000 	svcpl	0x00090000
    3a9c:	0100000a 	tsteq	r0, sl
    3aa0:	00013347 	andeq	r3, r1, r7, asr #6
    3aa4:	00185400 	andseq	r5, r8, r0, lsl #8
    3aa8:	0b470900 	bleq	11c5eb0 <__bss_end__+0x11bb408>
    3aac:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    3ab0:	0000002c 	andeq	r0, r0, ip, lsr #32
    3ab4:	000018a9 	andeq	r1, r0, r9, lsr #17
    3ab8:	000af209 	andeq	pc, sl, r9, lsl #4
    3abc:	2c570100 	ldfcse	f0, [r7], {-0}
    3ac0:	75000000 	strvc	r0, [r0, #-0]
    3ac4:	0a00001a 	beq	3b34 <_start-0x44cc>
    3ac8:	0000996c 	andeq	r9, r0, ip, ror #18
    3acc:	000007e0 	andeq	r0, r0, r0, ror #15
    3ad0:	00000122 	andeq	r0, r0, r2, lsr #2
    3ad4:	0250010b 	subseq	r0, r0, #-1073741822	; 0xc0000002
    3ad8:	0c000075 	stceq	0, cr0, [r0], {117}	; 0x75
    3adc:	000099a0 	andeq	r9, r0, r0, lsr #19
    3ae0:	00000801 	andeq	r0, r0, r1, lsl #16
    3ae4:	0250010b 	subseq	r0, r0, #-1073741822	; 0xc0000002
    3ae8:	00000075 	andeq	r0, r0, r5, ror r0
    3aec:	0139040d 	teqeq	r9, sp, lsl #8
    3af0:	2c0e0000 	stccs	0, cr0, [lr], {-0}
    3af4:	07000000 	streq	r0, [r0, -r0]
    3af8:	00000b17 	andeq	r0, r0, r7, lsl fp
    3afc:	99ac6001 	stmibls	ip!, {r0, sp, lr}
    3b00:	00380000 	eorseq	r0, r8, r0
    3b04:	9c010000 	stcls	0, cr0, [r1], {-0}
    3b08:	00000196 	muleq	r0, r6, r1
    3b0c:	6e697008 	cdpvs	0, 6, cr7, cr9, cr8, {0}
    3b10:	2c600100 	stfcse	f0, [r0], #-0
    3b14:	a5000000 	strge	r0, [r0, #-0]
    3b18:	0900001a 	stmdbeq	r0, {r1, r3, r4}
    3b1c:	00000a5f 	andeq	r0, r0, pc, asr sl
    3b20:	01336701 	teqeq	r3, r1, lsl #14
    3b24:	1ac60000 	bne	ff183b2c <__bss_end__+0xff179084>
    3b28:	f2090000 	vhadd.s8	d0, d9, d0
    3b2c:	0100000a 	tsteq	r0, sl
    3b30:	00002c68 	andeq	r2, r0, r8, ror #24
    3b34:	001afc00 	andseq	pc, sl, r0, lsl #24
    3b38:	99dc0c00 	ldmibls	ip, {sl, fp}^
    3b3c:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    3b40:	010b0000 	mrseq	r0, (UNDEF: 11)
    3b44:	f3310751 	vaba.u<illegal width 64>	q0, <illegal reg q0.5>, <illegal reg q0.5>
    3b48:	1a4f5001 	bne	13d7b54 <__bss_end__+0x13cd0ac>
    3b4c:	07000024 	streq	r0, [r0, -r4, lsr #32]
    3b50:	00000a16 	andeq	r0, r0, r6, lsl sl
    3b54:	99e47b01 	stmibls	r4!, {r0, r8, r9, fp, ip, sp, lr}^
    3b58:	00380000 	eorseq	r0, r8, r0
    3b5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3b60:	000001ee 	andeq	r0, r0, lr, ror #3
    3b64:	6e697008 	cdpvs	0, 6, cr7, cr9, cr8, {0}
    3b68:	2c7b0100 	ldfcse	f0, [fp], #-0
    3b6c:	3c000000 	stccc	0, cr0, [r0], {-0}
    3b70:	0900001b 	stmdbeq	r0, {r0, r1, r3, r4}
    3b74:	00000a5f 	andeq	r0, r0, pc, asr sl
    3b78:	01338101 	teqeq	r3, r1, lsl #2
    3b7c:	1b5d0000 	blne	1743b84 <__bss_end__+0x17390dc>
    3b80:	f2090000 	vhadd.s8	d0, d9, d0
    3b84:	0100000a 	tsteq	r0, sl
    3b88:	00002c82 	andeq	r2, r0, r2, lsl #25
    3b8c:	001b9300 	andseq	r9, fp, r0, lsl #6
    3b90:	9a140c00 	bls	506b98 <__bss_end__+0x4fc0f0>
    3b94:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    3b98:	010b0000 	mrseq	r0, (UNDEF: 11)
    3b9c:	f3310751 	vaba.u<illegal width 64>	q0, <illegal reg q0.5>, <illegal reg q0.5>
    3ba0:	1a4f5001 	bne	13d7bac <__bss_end__+0x13cd104>
    3ba4:	07000024 	streq	r0, [r0, -r4, lsr #32]
    3ba8:	000007df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    3bac:	9a1c9501 	bls	728fb8 <__bss_end__+0x71e510>
    3bb0:	00cc0000 	sbceq	r0, ip, r0
    3bb4:	9c010000 	stcls	0, cr0, [r1], {-0}
    3bb8:	00000264 	andeq	r0, r0, r4, ror #4
    3bbc:	6e697008 	cdpvs	0, 6, cr7, cr9, cr8, {0}
    3bc0:	2c950100 	ldfcss	f0, [r5], {0}
    3bc4:	d3000000 	movwle	r0, #0
    3bc8:	0900001b 	stmdbeq	r0, {r0, r1, r3, r4}
    3bcc:	00000a5f 	andeq	r0, r0, pc, asr sl
    3bd0:	01339b01 	teqeq	r3, r1, lsl #22
    3bd4:	1bf10000 	blne	ffc43bdc <__bss_end__+0xffc39134>
    3bd8:	47090000 	strmi	r0, [r9, -r0]
    3bdc:	0100000b 	tsteq	r0, fp
    3be0:	00002c9d 	muleq	r0, sp, ip
    3be4:	001c4600 	andseq	r4, ip, r0, lsl #12
    3be8:	0af20900 	beq	ffc85ff0 <__bss_end__+0xffc7b548>
    3bec:	ab010000 	blge	43bf4 <__bss_end__+0x3914c>
    3bf0:	0000002c 	andeq	r0, r0, ip, lsr #32
    3bf4:	00001e12 	andeq	r1, r0, r2, lsl lr
    3bf8:	009ab00a 	addseq	fp, sl, sl
    3bfc:	0007e000 	andeq	lr, r7, r0
    3c00:	00025300 	andeq	r5, r2, r0, lsl #6
    3c04:	50010b00 	andpl	r0, r1, r0, lsl #22
    3c08:	00007502 	andeq	r7, r0, r2, lsl #10
    3c0c:	009adc0c 	addseq	sp, sl, ip, lsl #24
    3c10:	00080100 	andeq	r0, r8, r0, lsl #2
    3c14:	50010b00 	andpl	r0, r1, r0, lsl #22
    3c18:	00007502 	andeq	r7, r0, r2, lsl #10
    3c1c:	078a0f00 	streq	r0, [sl, r0, lsl #30]
    3c20:	b3010000 	movwlt	r0, #4096	; 0x1000
    3c24:	00000064 	andeq	r0, r0, r4, rrx
    3c28:	00009ae8 	andeq	r9, r0, r8, ror #21
    3c2c:	0000004c 	andeq	r0, r0, ip, asr #32
    3c30:	02ac9c01 	adceq	r9, ip, #256	; 0x100
    3c34:	70080000 	andvc	r0, r8, r0
    3c38:	01006e69 	tsteq	r0, r9, ror #28
    3c3c:	00002cb3 			; <UNDEFINED> instruction: 0x00002cb3
    3c40:	001e3000 	andseq	r3, lr, r0
    3c44:	00761000 	rsbseq	r1, r6, r0
    3c48:	002cb901 	eoreq	fp, ip, r1, lsl #18
    3c4c:	1e880000 	cdpne	0, 8, cr0, cr8, cr0, {0}
    3c50:	08110000 	ldmdaeq	r1, {}	; <UNPREDICTABLE>
    3c54:	e000009b 	mul	r0, fp, r0
    3c58:	11000007 	tstne	r0, r7
    3c5c:	00009b18 	andeq	r9, r0, r8, lsl fp
    3c60:	000007e0 	andeq	r0, r0, r0, ror #15
    3c64:	07c70700 	strbeq	r0, [r7, r0, lsl #14]
    3c68:	c5010000 	strgt	r0, [r1, #-0]
    3c6c:	00009b34 	andeq	r9, r0, r4, lsr fp
    3c70:	00000024 	andeq	r0, r0, r4, lsr #32
    3c74:	02fc9c01 	rscseq	r9, ip, #256	; 0x100
    3c78:	70080000 	andvc	r0, r8, r0
    3c7c:	01006e69 	tsteq	r0, r9, ror #28
    3c80:	00002cc5 	andeq	r2, r0, r5, asr #25
    3c84:	001ebe00 	andseq	fp, lr, r0, lsl #28
    3c88:	00760800 	rsbseq	r0, r6, r0, lsl #16
    3c8c:	002cc501 	eoreq	ip, ip, r1, lsl #10
    3c90:	1ef80000 	cdpne	0, 15, cr0, cr8, cr0, {0}
    3c94:	4c0a0000 	stcmi	0, cr0, [sl], {-0}
    3c98:	3e00009b 	mcrcc	0, 0, r0, cr0, cr11, {4}
    3c9c:	f2000001 	vhadd.s8	d0, d0, d1
    3ca0:	0b000002 	bleq	3cb0 <_start-0x4350>
    3ca4:	f3035001 	vhadd.u8	d5, d3, d1
    3ca8:	11005001 	tstne	r0, r1
    3cac:	00009b54 	andeq	r9, r0, r4, asr fp
    3cb0:	00000196 	muleq	r0, r6, r1
    3cb4:	09660700 	stmdbeq	r6!, {r8, r9, sl}^
    3cb8:	d1010000 	mrsle	r0, (UNDEF: 1)
    3cbc:	00009b58 	andeq	r9, r0, r8, asr fp
    3cc0:	000000d8 	ldrdeq	r0, [r0], -r8
    3cc4:	03819c01 	orreq	r9, r1, #256	; 0x100
    3cc8:	70080000 	andvc	r0, r8, r0
    3ccc:	01006e69 	tsteq	r0, r9, ror #28
    3cd0:	00002cd1 	ldrdeq	r2, [r0], -r1
    3cd4:	001f3200 	andseq	r3, pc, r0, lsl #4
    3cd8:	0b041200 	bleq	1084e0 <__bss_end__+0xfda38>
    3cdc:	d1010000 	mrsle	r0, (UNDEF: 1)
    3ce0:	000000b2 	strheq	r0, [r0], -r2
    3ce4:	00001f50 	andeq	r1, r0, r0, asr pc
    3ce8:	000a5f09 	andeq	r5, sl, r9, lsl #30
    3cec:	33d90100 	bicscc	r0, r9, #0, 2
    3cf0:	71000001 	tstvc	r0, r1
    3cf4:	0900001f 	stmdbeq	r0, {r0, r1, r2, r3, r4}
    3cf8:	00000b47 	andeq	r0, r0, r7, asr #22
    3cfc:	002cda01 	eoreq	sp, ip, r1, lsl #20
    3d00:	1fc60000 	svcne	0x00c60000
    3d04:	f2090000 	vhadd.s8	d0, d9, d0
    3d08:	0100000a 	tsteq	r0, sl
    3d0c:	00002ce8 	andeq	r2, r0, r8, ror #25
    3d10:	00219200 	eoreq	r9, r1, r0, lsl #4
    3d14:	9bf40a00 	blls	ffd0651c <__bss_end__+0xffcfba74>
    3d18:	07e00000 	strbeq	r0, [r0, r0]!
    3d1c:	03700000 	cmneq	r0, #0
    3d20:	010b0000 	mrseq	r0, (UNDEF: 11)
    3d24:	00760250 	rsbseq	r0, r6, r0, asr r2
    3d28:	9c240c00 	stcls	12, cr0, [r4], #-0
    3d2c:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    3d30:	010b0000 	mrseq	r0, (UNDEF: 11)
    3d34:	00760250 	rsbseq	r0, r6, r0, asr r2
    3d38:	0a130000 	beq	4c3d40 <__bss_end__+0x4b9298>
    3d3c:	0100000a 	tsteq	r0, sl
    3d40:	00640105 	rsbeq	r0, r4, r5, lsl #2
    3d44:	9c300000 	ldcls	0, cr0, [r0], #-0
    3d48:	002c0000 	eoreq	r0, ip, r0
    3d4c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3d50:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
    3d54:	000a0d14 	andeq	r0, sl, r4, lsl sp
    3d58:	01050100 	mrseq	r0, (UNDEF: 21)
    3d5c:	0000002c 	andeq	r0, r0, ip, lsr #32
    3d60:	000021c3 	andeq	r2, r0, r3, asr #3
    3d64:	009c4011 	addseq	r4, ip, r1, lsl r0
    3d68:	0007e000 	andeq	lr, r7, r0
    3d6c:	a2150000 	andsge	r0, r5, #0
    3d70:	0100000a 	tsteq	r0, sl
    3d74:	9c5c0114 	ldflse	f0, [ip], {20}
    3d78:	00840000 	addeq	r0, r4, r0
    3d7c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3d80:	00000479 	andeq	r0, r0, r9, ror r4
    3d84:	6e697016 	mcrvs	0, 3, r7, cr9, cr6, {0}
    3d88:	01140100 	tsteq	r4, r0, lsl #2
    3d8c:	0000002c 	andeq	r0, r0, ip, lsr #32
    3d90:	000021e4 	andeq	r2, r0, r4, ror #3
    3d94:	000a3117 	andeq	r3, sl, r7, lsl r1
    3d98:	01260100 	teqeq	r6, r0, lsl #2
    3d9c:	0000002c 	andeq	r0, r0, ip, lsr #32
    3da0:	00002210 	andeq	r2, r0, r0, lsl r2
    3da4:	009c7818 	addseq	r7, ip, r8, lsl r8
    3da8:	00001c00 	andeq	r1, r0, r0, lsl #24
    3dac:	00041b00 	andeq	r1, r4, r0, lsl #22
    3db0:	0af21700 	beq	ffc899b8 <__bss_end__+0xffc7ef10>
    3db4:	1d010000 	stcne	0, cr0, [r1, #-0]
    3db8:	00002c01 	andeq	r2, r0, r1, lsl #24
    3dbc:	00222e00 	eoreq	r2, r2, r0, lsl #28
    3dc0:	9c841100 	stflss	f1, [r4], {0}
    3dc4:	07e00000 	strbeq	r0, [r0, r0]!
    3dc8:	94110000 	ldrls	r0, [r1], #-0
    3dcc:	0100009c 	swpeq	r0, ip, [r0]	; <UNPREDICTABLE>
    3dd0:	00000008 	andeq	r0, r0, r8
    3dd4:	009c9818 	addseq	r9, ip, r8, lsl r8
    3dd8:	00002000 	andeq	r2, r0, r0
    3ddc:	00044b00 	andeq	r4, r4, r0, lsl #22
    3de0:	0af21700 	beq	ffc899e8 <__bss_end__+0xffc7ef40>
    3de4:	21010000 	mrscs	r0, (UNDEF: 1)
    3de8:	00002c01 	andeq	r2, r0, r1, lsl #24
    3dec:	00224c00 	eoreq	r4, r2, r0, lsl #24
    3df0:	9ca41100 	stflss	f1, [r4]
    3df4:	07e00000 	strbeq	r0, [r0, r0]!
    3df8:	b8110000 	ldmdalt	r1, {}	; <UNPREDICTABLE>
    3dfc:	0100009c 	swpeq	r0, ip, [r0]	; <UNPREDICTABLE>
    3e00:	00000008 	andeq	r0, r0, r8
    3e04:	009c7011 	addseq	r7, ip, r1, lsl r0
    3e08:	00081d00 	andeq	r1, r8, r0, lsl #26
    3e0c:	9cbc1100 	ldflss	f1, [ip]
    3e10:	081d0000 	ldmdaeq	sp, {}	; <UNPREDICTABLE>
    3e14:	c8110000 	ldmdagt	r1, {}	; <UNPREDICTABLE>
    3e18:	e000009c 	mul	r0, ip, r0
    3e1c:	11000007 	tstne	r0, r7
    3e20:	00009cd4 	ldrdeq	r9, [r0], -r4
    3e24:	00000801 	andeq	r0, r0, r1, lsl #16
    3e28:	009cd811 	addseq	sp, ip, r1, lsl r8
    3e2c:	00081d00 	andeq	r1, r8, r0, lsl #26
    3e30:	31150000 	tstcc	r5, r0
    3e34:	0100000b 	tsteq	r0, fp
    3e38:	9ce00131 	stflse	f0, [r0], #196	; 0xc4
    3e3c:	00840000 	addeq	r0, r4, r0
    3e40:	9c010000 	stcls	0, cr0, [r1], {-0}
    3e44:	0000053d 	andeq	r0, r0, sp, lsr r5
    3e48:	6e697016 	mcrvs	0, 3, r7, cr9, cr6, {0}
    3e4c:	01310100 	teqeq	r1, r0, lsl #2
    3e50:	0000002c 	andeq	r0, r0, ip, lsr #32
    3e54:	0000226a 	andeq	r2, r0, sl, ror #4
    3e58:	000a3117 	andeq	r3, sl, r7, lsl r1
    3e5c:	01420100 	mrseq	r0, (UNDEF: 82)
    3e60:	0000002c 	andeq	r0, r0, ip, lsr #32
    3e64:	00002296 	muleq	r0, r6, r2
    3e68:	009cfc18 	addseq	pc, ip, r8, lsl ip	; <UNPREDICTABLE>
    3e6c:	00001c00 	andeq	r1, r0, r0, lsl #24
    3e70:	0004df00 	andeq	sp, r4, r0, lsl #30
    3e74:	0af21700 	beq	ffc89a7c <__bss_end__+0xffc7efd4>
    3e78:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    3e7c:	00002c01 	andeq	r2, r0, r1, lsl #24
    3e80:	0022b400 	eoreq	fp, r2, r0, lsl #8
    3e84:	9d081100 	stflss	f1, [r8, #-0]
    3e88:	07e00000 	strbeq	r0, [r0, r0]!
    3e8c:	18110000 	ldmdane	r1, {}	; <UNPREDICTABLE>
    3e90:	0100009d 	swpeq	r0, sp, [r0]	; <UNPREDICTABLE>
    3e94:	00000008 	andeq	r0, r0, r8
    3e98:	009d1c18 	addseq	r1, sp, r8, lsl ip
    3e9c:	00002000 	andeq	r2, r0, r0
    3ea0:	00050f00 	andeq	r0, r5, r0, lsl #30
    3ea4:	0af21700 	beq	ffc89aac <__bss_end__+0xffc7f004>
    3ea8:	3d010000 	stccc	0, cr0, [r1, #-0]
    3eac:	00002c01 	andeq	r2, r0, r1, lsl #24
    3eb0:	0022d200 	eoreq	sp, r2, r0, lsl #4
    3eb4:	9d281100 	stflss	f1, [r8, #-0]
    3eb8:	07e00000 	strbeq	r0, [r0, r0]!
    3ebc:	3c110000 	ldccc	0, cr0, [r1], {-0}
    3ec0:	0100009d 	swpeq	r0, sp, [r0]	; <UNPREDICTABLE>
    3ec4:	00000008 	andeq	r0, r0, r8
    3ec8:	009cf411 	addseq	pc, ip, r1, lsl r4	; <UNPREDICTABLE>
    3ecc:	00081d00 	andeq	r1, r8, r0, lsl #26
    3ed0:	9d401100 	stflse	f1, [r0, #-0]
    3ed4:	081d0000 	ldmdaeq	sp, {}	; <UNPREDICTABLE>
    3ed8:	4c110000 	ldcmi	0, cr0, [r1], {-0}
    3edc:	e000009d 	mul	r0, sp, r0
    3ee0:	11000007 	tstne	r0, r7
    3ee4:	00009d58 	andeq	r9, r0, r8, asr sp
    3ee8:	00000801 	andeq	r0, r0, r1, lsl #16
    3eec:	009d5c11 	addseq	r5, sp, r1, lsl ip
    3ef0:	00081d00 	andeq	r1, r8, r0, lsl #26
    3ef4:	d9130000 	ldmdble	r3, {}	; <UNPREDICTABLE>
    3ef8:	01000009 	tsteq	r0, r9
    3efc:	0064014c 	rsbeq	r0, r4, ip, asr #2
    3f00:	9d640000 	stclls	0, cr0, [r4, #-0]
    3f04:	00840000 	addeq	r0, r4, r0
    3f08:	9c010000 	stcls	0, cr0, [r1], {-0}
    3f0c:	000005e3 	andeq	r0, r0, r3, ror #11
    3f10:	6e697016 	mcrvs	0, 3, r7, cr9, cr6, {0}
    3f14:	014c0100 	mrseq	r0, (UNDEF: 92)
    3f18:	0000002c 	andeq	r0, r0, ip, lsr #32
    3f1c:	000022f0 	strdeq	r2, [r0], -r0
    3f20:	009d8018 	addseq	r8, sp, r8, lsl r0
    3f24:	00002400 	andeq	r2, r0, r0, lsl #8
    3f28:	00059700 	andeq	r9, r5, r0, lsl #14
    3f2c:	0a481700 	beq	1209b34 <__bss_end__+0x11ff08c>
    3f30:	53010000 	movwpl	r0, #4096	; 0x1000
    3f34:	00002c01 	andeq	r2, r0, r1, lsl #24
    3f38:	00233200 	eoreq	r3, r3, r0, lsl #4
    3f3c:	9d8c1100 	stflss	f1, [ip]
    3f40:	07e00000 	strbeq	r0, [r0, r0]!
    3f44:	9c110000 	ldcls	0, cr0, [r1], {-0}
    3f48:	1d00009d 	stcne	0, cr0, [r0, #-628]	; 0xfffffd8c
    3f4c:	00000008 	andeq	r0, r0, r8
    3f50:	009da418 	addseq	sl, sp, r8, lsl r4
    3f54:	00002c00 	andeq	r2, r0, r0, lsl #24
    3f58:	0005d000 	andeq	sp, r5, r0
    3f5c:	0a481700 	beq	1209b64 <__bss_end__+0x11ff0bc>
    3f60:	56010000 	strpl	r0, [r1], -r0
    3f64:	00002c01 	andeq	r2, r0, r1, lsl #24
    3f68:	00234c00 	eoreq	r4, r3, r0, lsl #24
    3f6c:	9db01100 	ldflss	f1, [r0]
    3f70:	07e00000 	strbeq	r0, [r0, r0]!
    3f74:	bc110000 	ldclt	0, cr0, [r1], {-0}
    3f78:	1d00009d 	stcne	0, cr0, [r0, #-628]	; 0xfffffd8c
    3f7c:	11000008 	tstne	r0, r8
    3f80:	00009dc8 	andeq	r9, r0, r8, asr #27
    3f84:	0000081d 	andeq	r0, r0, sp, lsl r8
    3f88:	9d781100 	ldflse	f1, [r8, #-0]
    3f8c:	081d0000 	ldmdaeq	sp, {}	; <UNPREDICTABLE>
    3f90:	d4110000 	ldrle	r0, [r1], #-0
    3f94:	1d00009d 	stcne	0, cr0, [r0, #-628]	; 0xfffffd8c
    3f98:	00000008 	andeq	r0, r0, r8
    3f9c:	000ac515 	andeq	ip, sl, r5, lsl r5
    3fa0:	015f0100 	cmpeq	pc, r0, lsl #2
    3fa4:	00009de8 	andeq	r9, r0, r8, ror #27
    3fa8:	00000058 	andeq	r0, r0, r8, asr r0
    3fac:	06489c01 	strbeq	r9, [r8], -r1, lsl #24
    3fb0:	70160000 	andsvc	r0, r6, r0
    3fb4:	01006e69 	tsteq	r0, r9, ror #28
    3fb8:	002c015f 	eoreq	r0, ip, pc, asr r1
    3fbc:	235f0000 	cmpcs	pc, #0
    3fc0:	fc110000 	ldc2	0, cr0, [r1], {-0}
    3fc4:	1d00009d 	stcne	0, cr0, [r0, #-628]	; 0xfffffd8c
    3fc8:	0a000008 	beq	3ff0 <_start-0x4010>
    3fcc:	00009e18 	andeq	r9, r0, r8, lsl lr
    3fd0:	00000801 	andeq	r0, r0, r1, lsl #16
    3fd4:	00000628 	andeq	r0, r0, r8, lsr #12
    3fd8:	0451010b 	ldrbeq	r0, [r1], #-267	; 0x10b
    3fdc:	24007431 	strcs	r7, [r0], #-1073	; 0x431
    3fe0:	9e340a00 	vaddls.f32	s0, s8, s0
    3fe4:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    3fe8:	063e0000 	ldrteq	r0, [lr], -r0
    3fec:	010b0000 	mrseq	r0, (UNDEF: 11)
    3ff0:	74310451 	ldrtvc	r0, [r1], #-1105	; 0x451
    3ff4:	11002400 	tstne	r0, r0, lsl #8
    3ff8:	00009e38 	andeq	r9, r0, r8, lsr lr
    3ffc:	0000081d 	andeq	r0, r0, sp, lsl r8
    4000:	0a901900 	beq	fe40a408 <__bss_end__+0xfe3ff960>
    4004:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    4008:	00000133 	andeq	r0, r0, r3, lsr r1
    400c:	9f4c0305 	svcls	0x004c0305
    4010:	fa190000 	blx	644018 <__bss_end__+0x639570>
    4014:	0100000a 	tsteq	r0, sl
    4018:	00013329 	andeq	r3, r1, r9, lsr #6
    401c:	48030500 	stmdami	r3, {r8, sl}
    4020:	1900009f 	stmdbne	r0, {r0, r1, r2, r3, r4, r7}
    4024:	00000b52 	andeq	r0, r0, r2, asr fp
    4028:	01332a01 	teqeq	r3, r1, lsl #20
    402c:	03050000 	movweq	r0, #20480	; 0x5000
    4030:	00009f44 	andeq	r9, r0, r4, asr #30
    4034:	000a6819 	andeq	r6, sl, r9, lsl r8
    4038:	332c0100 	teqcc	ip, #0, 2
    403c:	05000001 	streq	r0, [r0, #-1]
    4040:	009ef003 	addseq	pc, lr, r3
    4044:	0a701900 	beq	1c0a44c <__bss_end__+0x1bff9a4>
    4048:	2d010000 	stccs	0, cr0, [r1, #-0]
    404c:	00000133 	andeq	r0, r0, r3, lsr r1
    4050:	9ef40305 	cdpls	3, 15, cr0, cr4, cr5, {0}
    4054:	ed190000 	ldc	0, cr0, [r9, #-0]
    4058:	01000009 	tsteq	r0, r9
    405c:	0001332e 	andeq	r3, r1, lr, lsr #6
    4060:	f8030500 			; <UNDEFINED> instruction: 0xf8030500
    4064:	1900009e 	stmdbne	r0, {r1, r2, r3, r4, r7}
    4068:	00000a78 	andeq	r0, r0, r8, ror sl
    406c:	01332f01 	teqeq	r3, r1, lsl #30
    4070:	03050000 	movweq	r0, #20480	; 0x5000
    4074:	00009efc 	strdeq	r9, [r0], -ip
    4078:	000a8019 	andeq	r8, sl, r9, lsl r0
    407c:	33300100 	teqcc	r0, #0, 2
    4080:	05000001 	streq	r0, [r0, #-1]
    4084:	009f0003 	addseq	r0, pc, r3
    4088:	0a881900 	beq	fe20a490 <__bss_end__+0xfe1ff9e8>
    408c:	31010000 	mrscc	r0, (UNDEF: 1)
    4090:	00000133 	andeq	r0, r0, r3, lsr r1
    4094:	9f040305 	svcls	0x00040305
    4098:	3a190000 	bcc	6440a0 <__bss_end__+0x6395f8>
    409c:	0100000a 	tsteq	r0, sl
    40a0:	00013333 	andeq	r3, r1, r3, lsr r3
    40a4:	08030500 	stmdaeq	r3, {r8, sl}
    40a8:	1900009f 	stmdbne	r0, {r0, r1, r2, r3, r4, r7}
    40ac:	00000a41 	andeq	r0, r0, r1, asr #20
    40b0:	01333401 	teqeq	r3, r1, lsl #8
    40b4:	03050000 	movweq	r0, #20480	; 0x5000
    40b8:	00009f0c 	andeq	r9, r0, ip, lsl #30
    40bc:	0009f519 	andeq	pc, r9, r9, lsl r5	; <UNPREDICTABLE>
    40c0:	33360100 	teqcc	r6, #0, 2
    40c4:	05000001 	streq	r0, [r0, #-1]
    40c8:	009f1003 	addseq	r1, pc, r3
    40cc:	0a9b1900 	beq	fe6ca4d4 <__bss_end__+0xfe6bfa2c>
    40d0:	37010000 	strcc	r0, [r1, -r0]
    40d4:	00000133 	andeq	r0, r0, r3, lsr r1
    40d8:	9f140305 	svcls	0x00140305
    40dc:	51190000 	tstpl	r9, r0
    40e0:	0100000a 	tsteq	r0, sl
    40e4:	00013339 	andeq	r3, r1, r9, lsr r3
    40e8:	18030500 	stmdane	r3, {r8, sl}
    40ec:	1900009f 	stmdbne	r0, {r0, r1, r2, r3, r4, r7}
    40f0:	00000a58 	andeq	r0, r0, r8, asr sl
    40f4:	01333a01 	teqeq	r3, r1, lsl #20
    40f8:	03050000 	movweq	r0, #20480	; 0x5000
    40fc:	00009f1c 	andeq	r9, r0, ip, lsl pc
    4100:	000ad619 	andeq	sp, sl, r9, lsl r6
    4104:	33f00100 	mvnscc	r0, #0, 2
    4108:	05000001 	streq	r0, [r0, #-1]
    410c:	009f4003 	addseq	r4, pc, r3
    4110:	0ae41900 	beq	ff90a518 <__bss_end__+0xff8ffa70>
    4114:	f1010000 	setend	le
    4118:	00000133 	andeq	r0, r0, r3, lsr r1
    411c:	9f200305 	svcls	0x00200305
    4120:	09190000 	ldmdbeq	r9, {}	; <UNPREDICTABLE>
    4124:	0100000b 	tsteq	r0, fp
    4128:	000133f3 	strdeq	r3, [r1], -r3	; <UNPREDICTABLE>
    412c:	38030500 	stmdacc	r3, {r8, sl}
    4130:	1900009f 	stmdbne	r0, {r0, r1, r2, r3, r4, r7}
    4134:	00000b10 	andeq	r0, r0, r0, lsl fp
    4138:	0133f401 	teqeq	r3, r1, lsl #8
    413c:	03050000 	movweq	r0, #20480	; 0x5000
    4140:	00009f3c 	andeq	r9, r0, ip, lsr pc
    4144:	000ab719 	andeq	fp, sl, r9, lsl r7
    4148:	33f60100 	mvnscc	r0, #0, 2
    414c:	05000001 	streq	r0, [r0, #-1]
    4150:	009f2403 	addseq	r2, pc, r3, lsl #8
    4154:	0abe1900 	beq	fef8a55c <__bss_end__+0xfef7fab4>
    4158:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    415c:	00000133 	andeq	r0, r0, r3, lsr r1
    4160:	9f280305 	svcls	0x00280305
    4164:	23190000 	tstcs	r9, #0
    4168:	0100000b 	tsteq	r0, fp
    416c:	000133f9 	strdeq	r3, [r1], -r9
    4170:	30030500 	andcc	r0, r3, r0, lsl #10
    4174:	1900009f 	stmdbne	r0, {r0, r1, r2, r3, r4, r7}
    4178:	00000b2a 	andeq	r0, r0, sl, lsr #22
    417c:	0133fa01 	teqeq	r3, r1, lsl #20
    4180:	03050000 	movweq	r0, #20480	; 0x5000
    4184:	00009f34 	andeq	r9, r0, r4, lsr pc
    4188:	0009fc19 	andeq	pc, r9, r9, lsl ip	; <UNPREDICTABLE>
    418c:	33fc0100 	mvnscc	r0, #0, 2
    4190:	05000001 	streq	r0, [r0, #-1]
    4194:	009f2c03 	addseq	r2, pc, r3, lsl #24
    4198:	09d31a00 	ldmibeq	r3, {r9, fp, ip}^
    419c:	20010000 	andcs	r0, r1, r0
    41a0:	0000002c 	andeq	r0, r0, ip, lsr #32
    41a4:	000007f5 	strdeq	r0, [r0], -r5
    41a8:	0007f51b 	andeq	pc, r7, fp, lsl r5	; <UNPREDICTABLE>
    41ac:	040d0000 	streq	r0, [sp], #-0
    41b0:	000007fb 	strdeq	r0, [r0], -fp
    41b4:	0008001c 	andeq	r0, r8, ip, lsl r0
    41b8:	f41e1d00 			; <UNDEFINED> instruction: 0xf41e1d00
    41bc:	01000008 	tsteq	r0, r8
    41c0:	0008171e 	andeq	r1, r8, lr, lsl r7
    41c4:	08171b00 	ldmdaeq	r7, {r8, r9, fp, ip}
    41c8:	2c1b0000 	ldccs	0, cr0, [fp], {-0}
    41cc:	00000000 	andeq	r0, r0, r0
    41d0:	0800040d 	stmdaeq	r0, {r0, r2, r3, sl}
    41d4:	8c1f0000 	ldchi	0, cr0, [pc], {-0}
    41d8:	03000008 	movweq	r0, #8
    41dc:	00db008a 	sbcseq	r0, fp, sl, lsl #1
    41e0:	00040000 	andeq	r0, r4, r0
    41e4:	000013f5 	strdeq	r1, [r0], -r5
    41e8:	000b0104 	andeq	r0, fp, r4, lsl #2
    41ec:	5c010000 	stcpl	0, cr0, [r1], {-0}
    41f0:	3b00000b 	blcc	4224 <_start-0x3ddc>
    41f4:	40000002 	andmi	r0, r0, r2
    41f8:	2000009e 	mulcs	r0, lr, r0
    41fc:	1d000000 	stcne	0, cr0, [r0, #-0]
    4200:	02000011 	andeq	r0, r0, #17
    4204:	00760601 	rsbseq	r0, r6, r1, lsl #12
    4208:	01020000 	mrseq	r0, (UNDEF: 2)
    420c:	00007408 	andeq	r7, r0, r8, lsl #8
    4210:	05020200 	streq	r0, [r2, #-512]	; 0x200
    4214:	000001cc 	andeq	r0, r0, ip, asr #3
    4218:	98070202 	stmdals	r7, {r1, r9}
    421c:	03000000 	movweq	r0, #0
    4220:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    4224:	04020074 	streq	r0, [r2], #-116	; 0x74
    4228:	00017b07 	andeq	r7, r1, r7, lsl #22
    422c:	05080200 	streq	r0, [r8, #-512]	; 0x200
    4230:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
    4234:	71070802 	tstvc	r7, r2, lsl #16
    4238:	02000001 	andeq	r0, r0, #1
    423c:	01b80504 			; <UNDEFINED> instruction: 0x01b80504
    4240:	04020000 	streq	r0, [r2], #-0
    4244:	0001aa07 	andeq	sl, r1, r7, lsl #20
    4248:	02040400 	andeq	r0, r4, #0, 8
    424c:	01760704 	cmneq	r6, r4, lsl #14
    4250:	04050000 	streq	r0, [r5], #-0
    4254:	0000007a 	andeq	r0, r0, sl, ror r0
    4258:	7d080102 	stfvcs	f0, [r8, #-8]
    425c:	06000000 	streq	r0, [r0], -r0
    4260:	00000543 	andeq	r0, r0, r3, asr #10
    4264:	0048d402 	subeq	sp, r8, r2, lsl #8
    4268:	75070000 	strvc	r0, [r7, #-0]
    426c:	03000005 	movweq	r0, #5
    4270:	00006b1b 	andeq	r6, r0, fp, lsl fp
    4274:	009e4000 	addseq	r4, lr, r0
    4278:	00002000 	andeq	r2, r0, r0
    427c:	089c0100 	ldmeq	ip, {r8}
    4280:	0100705f 	qaddeq	r7, pc, r0	; <UNPREDICTABLE>
    4284:	00006b03 	andeq	r6, r0, r3, lsl #22
    4288:	08500100 	ldmdaeq	r0, {r8}^
    428c:	03010063 	movweq	r0, #4195	; 0x1063
    4290:	00000041 	andeq	r0, r0, r1, asr #32
    4294:	6e095101 	adfvse	f5, f1, f1
    4298:	81030100 	mrshi	r0, (UNDEF: 19)
    429c:	8b000000 	blhi	42a4 <_start-0x3d5c>
    42a0:	0a000023 	beq	4334 <_start-0x3ccc>
    42a4:	04010070 	streq	r0, [r1], #-112	; 0x70
    42a8:	00000074 	andeq	r0, r0, r4, ror r0
    42ac:	000023ac 	andeq	r2, r0, ip, lsr #7
    42b0:	0100650b 	tsteq	r0, fp, lsl #10
    42b4:	00007404 	andeq	r7, r0, r4, lsl #8
    42b8:	00520100 	subseq	r0, r2, r0, lsl #2
    42bc:	0001c300 	andeq	ip, r1, r0, lsl #6
    42c0:	92000400 	andls	r0, r0, #0, 8
    42c4:	04000014 	streq	r0, [r0], #-20
    42c8:	00000b01 	andeq	r0, r0, r1, lsl #22
    42cc:	0b710100 	bleq	1c446d4 <__bss_end__+0x1c39c2c>
    42d0:	023b0000 	eorseq	r0, fp, #0
    42d4:	9e600000 	cdpls	0, 6, cr0, cr0, cr0, {0}
    42d8:	00500000 	subseq	r0, r0, r0
    42dc:	120d0000 	andne	r0, sp, #0
    42e0:	04020000 	streq	r0, [r2], #-0
    42e4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    42e8:	05430300 	strbeq	r0, [r3, #-768]	; 0x300
    42ec:	d4020000 	strle	r0, [r2], #-0
    42f0:	00000037 	andeq	r0, r0, r7, lsr r0
    42f4:	7b070404 	blvc	1c530c <__bss_end__+0x1ba864>
    42f8:	04000001 	streq	r0, [r0], #-1
    42fc:	00760601 	rsbseq	r0, r6, r1, lsl #12
    4300:	02040000 	andeq	r0, r4, #0
    4304:	0001cc05 	andeq	ip, r1, r5, lsl #24
    4308:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    430c:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    4310:	b3050804 	movwlt	r0, #22532	; 0x5804
    4314:	03000001 	movweq	r0, #1
    4318:	00000414 	andeq	r0, r0, r4, lsl r4
    431c:	00652e03 	rsbeq	r2, r5, r3, lsl #28
    4320:	01040000 	mrseq	r0, (UNDEF: 4)
    4324:	00007408 	andeq	r7, r0, r8, lsl #8
    4328:	07020400 	streq	r0, [r2, -r0, lsl #8]
    432c:	00000098 	muleq	r0, r8, r0
    4330:	0001d603 	andeq	sp, r1, r3, lsl #12
    4334:	7e340300 	cdpvc	3, 3, cr0, cr4, cr0, {0}
    4338:	04000000 	streq	r0, [r0], #-0
    433c:	01760704 	cmneq	r6, r4, lsl #14
    4340:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    4344:	00017107 	andeq	r7, r1, r7, lsl #2
    4348:	07040400 	streq	r0, [r4, -r0, lsl #8]
    434c:	000001aa 	andeq	r0, r0, sl, lsr #3
    4350:	01040405 	tsteq	r4, r5, lsl #8
    4354:	00007d08 	andeq	r7, r0, r8, lsl #26
    4358:	040c0600 	streq	r0, [ip], #-1536	; 0x600
    435c:	0000d30e 	andeq	sp, r0, lr, lsl #6
    4360:	78740700 	ldmdavc	r4!, {r8, r9, sl}^
    4364:	5a0f0400 	bpl	3c536c <__bss_end__+0x3ba8c4>
    4368:	00000000 	andeq	r0, r0, r0
    436c:	00787207 	rsbseq	r7, r8, r7, lsl #4
    4370:	005a0f04 	subseq	r0, sl, r4, lsl #30
    4374:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    4378:	000003e2 	andeq	r0, r0, r2, ror #7
    437c:	00731004 	rsbseq	r1, r3, r4
    4380:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    4384:	00000393 	muleq	r0, r3, r3
    4388:	00731104 	rsbseq	r1, r3, r4, lsl #2
    438c:	00080000 	andeq	r0, r8, r0
    4390:	0003cb03 	andeq	ip, r3, r3, lsl #22
    4394:	9c120400 	cfldrsls	mvf0, [r2], {-0}
    4398:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    439c:	f9100501 			; <UNDEFINED> instruction: 0xf9100501
    43a0:	0a000000 	beq	43a8 <_start-0x3c58>
    43a4:	000003e7 	andeq	r0, r0, r7, ror #7
    43a8:	03d50a01 	bicseq	r0, r5, #4096	; 0x1000
    43ac:	0a020000 	beq	843b4 <__bss_end__+0x7990c>
    43b0:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    43b4:	fc030003 	stc2	0, cr0, [r3], {3}
    43b8:	05000003 	streq	r0, [r0, #-3]
    43bc:	0000de10 	andeq	sp, r0, r0, lsl lr
    43c0:	05140600 	ldreq	r0, [r4, #-1536]	; 0x600
    43c4:	00013114 	andeq	r3, r1, r4, lsl r1
    43c8:	046b0800 	strbteq	r0, [fp], #-2048	; 0x800
    43cc:	15050000 	strne	r0, [r5, #-0]
    43d0:	00000037 	andeq	r0, r0, r7, lsr r0
    43d4:	045f0800 	ldrbeq	r0, [pc], #-2048	; 43dc <_start-0x3c24>
    43d8:	18050000 	stmdane	r5, {}	; <UNPREDICTABLE>
    43dc:	000000f9 	strdeq	r0, [r0], -r9
    43e0:	042a0804 	strteq	r0, [sl], #-2052	; 0x804
    43e4:	1b050000 	blne	1443ec <__bss_end__+0x139944>
    43e8:	000000d3 	ldrdeq	r0, [r0], -r3
    43ec:	1c030008 	stcne	0, cr0, [r3], {8}
    43f0:	05000004 	streq	r0, [r0, #-4]
    43f4:	00010420 	andeq	r0, r1, r0, lsr #8
    43f8:	0b6a0b00 	bleq	1a87000 <__bss_end__+0x1a7c558>
    43fc:	05010000 	streq	r0, [r1, #-0]
    4400:	0000017e 	andeq	r0, r0, lr, ror r1
    4404:	00009e60 	andeq	r9, r0, r0, ror #28
    4408:	00000028 	andeq	r0, r0, r8, lsr #32
    440c:	017e9c01 	cmneq	lr, r1, lsl #24
    4410:	630c0000 	movwvs	r0, #49152	; 0xc000
    4414:	7e060100 	adfvcs	f0, f6, f0
    4418:	00000001 	andeq	r0, r0, r1
    441c:	0d090000 	stceq	0, cr0, [r9, #-0]
    4420:	00009e74 	andeq	r9, r0, r4, ror lr
    4424:	000001ab 	andeq	r0, r0, fp, lsr #3
    4428:	0152010e 	cmpeq	r2, lr, lsl #2
    442c:	51010e34 	tstpl	r1, r4, lsr lr
    4430:	010e3001 	tsteq	lr, r1
    4434:	47420350 	smlsldmi	r0, r2, r0, r3
    4438:	0f000024 	svceq	0x00000024
    443c:	00013104 	andeq	r3, r1, r4, lsl #2
    4440:	04320b00 	ldrteq	r0, [r2], #-2816	; 0xb00
    4444:	0c010000 	stceq	0, cr0, [r1], {-0}
    4448:	0000017e 	andeq	r0, r0, lr, ror r1
    444c:	00009e88 	andeq	r9, r0, r8, lsl #29
    4450:	00000028 	andeq	r0, r0, r8, lsr #32
    4454:	01ab9c01 			; <UNDEFINED> instruction: 0x01ab9c01
    4458:	630c0000 	movwvs	r0, #49152	; 0xc000
    445c:	7e0d0100 	adfvce	f0, f5, f0
    4460:	00000001 	andeq	r0, r0, r1
    4464:	00090000 	andeq	r0, r9, r0
    4468:	00057510 	andeq	r7, r5, r0, lsl r5
    446c:	931b0600 	tstls	fp, #0, 12
    4470:	11000000 	mrsne	r0, (UNDEF: 0)
    4474:	00000093 	muleq	r0, r3, r0
    4478:	00002511 	andeq	r2, r0, r1, lsl r5
    447c:	002c1100 	eoreq	r1, ip, r0, lsl #2
    4480:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	110e1b0e 	tstne	lr, lr, lsl #22
       c:	10061201 	andne	r1, r6, r1, lsl #4
      10:	02000017 	andeq	r0, r0, #23
      14:	0b0b0024 	bleq	2c00ac <__bss_end__+0x2b5604>
      18:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
      1c:	24030000 	strcs	r0, [r3], #-0
      20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
      24:	000e030b 	andeq	r0, lr, fp, lsl #6
      28:	00160400 	andseq	r0, r6, r0, lsl #8
      2c:	0b3a0e03 	bleq	e83840 <__bss_end__+0xe78d98>
      30:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      34:	0f050000 	svceq	0x00050000
      38:	000b0b00 	andeq	r0, fp, r0, lsl #22
      3c:	000f0600 	andeq	r0, pc, r0, lsl #12
      40:	13490b0b 	movtne	r0, #39691	; 0x9b0b
      44:	26070000 	strcs	r0, [r7], -r0
      48:	00134900 	andseq	r4, r3, r0, lsl #18
      4c:	01010800 	tsteq	r1, r0, lsl #16
      50:	13011349 	movwne	r1, #4937	; 0x1349
      54:	21090000 	mrscs	r0, (UNDEF: 9)
      58:	2f134900 	svccs	0x00134900
      5c:	0a00000b 	beq	90 <_start-0x7f70>
      60:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
      64:	0b3a050b 	bleq	e81498 <__bss_end__+0xe769f0>
      68:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      6c:	0d0b0000 	stceq	0, cr0, [fp, #-0]
      70:	3a0e0300 	bcc	380c78 <__bss_end__+0x3761d0>
      74:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      78:	000b3813 	andeq	r3, fp, r3, lsl r8
      7c:	000d0c00 	andeq	r0, sp, r0, lsl #24
      80:	0b3a0803 	bleq	e82094 <__bss_end__+0xe775ec>
      84:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      88:	00000b38 	andeq	r0, r0, r8, lsr fp
      8c:	2701150d 	strcs	r1, [r1, -sp, lsl #10]
      90:	00130119 	andseq	r0, r3, r9, lsl r1
      94:	00050e00 	andeq	r0, r5, r0, lsl #28
      98:	00001349 	andeq	r1, r0, r9, asr #6
      9c:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
      a0:	00052f13 	andeq	r2, r5, r3, lsl pc
      a4:	012e1000 	teqeq	lr, r0
      a8:	0b3a0e03 	bleq	e838bc <__bss_end__+0xe78e14>
      ac:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
      b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
      b4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
      b8:	00130119 	andseq	r0, r3, r9, lsl r1
      bc:	00051100 	andeq	r1, r5, r0, lsl #2
      c0:	0b3a0803 	bleq	e820d4 <__bss_end__+0xe7762c>
      c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      c8:	00001702 	andeq	r1, r0, r2, lsl #14
      cc:	03003412 	movweq	r3, #1042	; 0x412
      d0:	3b0b3a08 	blcc	2ce8f8 <__bss_end__+0x2c3e50>
      d4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
      d8:	13000017 	movwne	r0, #23
      dc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
      e0:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
      e4:	00001802 	andeq	r1, r0, r2, lsl #16
      e8:	01828914 	orreq	r8, r2, r4, lsl r9
      ec:	31011100 	mrscc	r1, (UNDEF: 17)
      f0:	15000013 	strne	r0, [r0, #-19]
      f4:	01018289 	smlabbeq	r1, r9, r2, r8
      f8:	13310111 	teqne	r1, #1073741828	; 0x40000004
      fc:	00001301 	andeq	r1, r0, r1, lsl #6
     100:	01828a16 	orreq	r8, r2, r6, lsl sl
     104:	91180200 	tstls	r8, r0, lsl #4
     108:	00001842 	andeq	r1, r0, r2, asr #16
     10c:	01828917 	orreq	r8, r2, r7, lsl r9
     110:	31011101 	tstcc	r1, r1, lsl #2
     114:	18000013 	stmdane	r0, {r0, r1, r4}
     118:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     11c:	0b3a0e03 	bleq	e83930 <__bss_end__+0xe78e88>
     120:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     124:	06120111 			; <UNDEFINED> instruction: 0x06120111
     128:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     12c:	00130119 	andseq	r0, r3, r9, lsl r1
     130:	00341900 	eorseq	r1, r4, r0, lsl #18
     134:	0b3a0803 	bleq	e82148 <__bss_end__+0xe776a0>
     138:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     13c:	00000b1c 	andeq	r0, r0, ip, lsl fp
     140:	11010b1a 	tstne	r1, sl, lsl fp
     144:	01061201 	tsteq	r6, r1, lsl #4
     148:	1b000013 	blne	19c <_start-0x7e64>
     14c:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
     150:	341c0000 	ldrcc	r0, [ip], #-0
     154:	3a0e0300 	bcc	380d5c <__bss_end__+0x3762b4>
     158:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     15c:	00180213 	andseq	r0, r8, r3, lsl r2
     160:	002e1d00 	eoreq	r1, lr, r0, lsl #26
     164:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     168:	0b3b0b3a 	bleq	ec2e58 <__bss_end__+0xeb83b0>
     16c:	13491927 	movtne	r1, #39207	; 0x9927
     170:	0000193c 	andeq	r1, r0, ip, lsr r9
     174:	3f012e1e 	svccc	0x00012e1e
     178:	3a0e0319 	bcc	380de4 <__bss_end__+0x37633c>
     17c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     180:	3c134919 	ldccc	9, cr4, [r3], {25}
     184:	00130119 	andseq	r0, r3, r9, lsl r1
     188:	00181f00 	andseq	r1, r8, r0, lsl #30
     18c:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
     190:	03193f00 	tsteq	r9, #0, 30
     194:	3b0b3a0e 	blcc	2ce9d4 <__bss_end__+0x2c3f2c>
     198:	3c19270b 	ldccc	7, cr2, [r9], {11}
     19c:	21000019 	tstcs	r0, r9, lsl r0
     1a0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     1a4:	0b3a0e03 	bleq	e839b8 <__bss_end__+0xe78f10>
     1a8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     1ac:	1301193c 	movwne	r1, #6460	; 0x193c
     1b0:	01000000 	mrseq	r0, (UNDEF: 0)
     1b4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     1b8:	0e030b13 	vmoveq.32	d3[0], r0
     1bc:	01110e1b 	tsteq	r1, fp, lsl lr
     1c0:	17100612 			; <UNDEFINED> instruction: 0x17100612
     1c4:	16020000 	strne	r0, [r2], -r0
     1c8:	3a0e0300 	bcc	380dd0 <__bss_end__+0x376328>
     1cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     1d0:	03000013 	movweq	r0, #19
     1d4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     1d8:	0b3a0b0b 	bleq	e82e0c <__bss_end__+0xe78364>
     1dc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     1e0:	0d040000 	stceq	0, cr0, [r4, #-0]
     1e4:	490e0300 	stmdbmi	lr, {r8, r9}
     1e8:	340b3813 	strcc	r3, [fp], #-2067	; 0x813
     1ec:	05000019 	streq	r0, [r0, #-25]
     1f0:	0b0b000f 	bleq	2c0234 <__bss_end__+0x2b578c>
     1f4:	24060000 	strcs	r0, [r6], #-0
     1f8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     1fc:	0008030b 	andeq	r0, r8, fp, lsl #6
     200:	00240700 	eoreq	r0, r4, r0, lsl #14
     204:	0b3e0b0b 	bleq	f82e38 <__bss_end__+0xf78390>
     208:	00000e03 	andeq	r0, r0, r3, lsl #28
     20c:	0b000f08 	bleq	3e34 <_start-0x41cc>
     210:	0013490b 	andseq	r4, r3, fp, lsl #18
     214:	00260900 	eoreq	r0, r6, r0, lsl #18
     218:	00001349 	andeq	r1, r0, r9, asr #6
     21c:	3f012e0a 	svccc	0x00012e0a
     220:	3a0e0319 	bcc	380e8c <__bss_end__+0x3763e4>
     224:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     228:	11134919 	tstne	r3, r9, lsl r9
     22c:	40061201 	andmi	r1, r6, r1, lsl #4
     230:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     234:	00001301 	andeq	r1, r0, r1, lsl #6
     238:	0300050b 	movweq	r0, #1291	; 0x50b
     23c:	3b0b3a08 	blcc	2cea64 <__bss_end__+0x2c3fbc>
     240:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     244:	0c000018 	stceq	0, cr0, [r0], {24}
     248:	00000018 	andeq	r0, r0, r8, lsl r0
     24c:	0300340d 	movweq	r3, #1037	; 0x40d
     250:	3b0b3a08 	blcc	2cea78 <__bss_end__+0x2c3fd0>
     254:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     258:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
     25c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     260:	0b3b0b3a 	bleq	ec2f50 <__bss_end__+0xeb84a8>
     264:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     268:	340f0000 	strcc	r0, [pc], #-0	; 270 <_start-0x7d90>
     26c:	3a080300 	bcc	200e74 <__bss_end__+0x1f63cc>
     270:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     274:	00170213 	andseq	r0, r7, r3, lsl r2
     278:	82891000 	addhi	r1, r9, #0
     27c:	01110101 	tsteq	r1, r1, lsl #2
     280:	13011331 	movwne	r1, #4913	; 0x1331
     284:	8a110000 	bhi	44028c <__bss_end__+0x4357e4>
     288:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     28c:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     290:	89120000 	ldmdbhi	r2, {}	; <UNPREDICTABLE>
     294:	11010182 	smlabbne	r1, r2, r1, r0
     298:	13000001 	movwne	r0, #1
     29c:	13490101 	movtne	r0, #37121	; 0x9101
     2a0:	00001301 	andeq	r1, r0, r1, lsl #6
     2a4:	49002114 	stmdbmi	r0, {r2, r4, r8, sp}
     2a8:	00052f13 	andeq	r2, r5, r3, lsl pc
     2ac:	01151500 	tsteq	r5, r0, lsl #10
     2b0:	13491927 	movtne	r1, #39207	; 0x9927
     2b4:	00001301 	andeq	r1, r0, r1, lsl #6
     2b8:	49000516 	stmdbmi	r0, {r1, r2, r4, r8, sl}
     2bc:	17000013 	smladne	r0, r3, r0, r0
     2c0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     2c4:	0b3b0b3a 	bleq	ec2fb4 <__bss_end__+0xeb850c>
     2c8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     2cc:	0000193c 	andeq	r1, r0, ip, lsr r9
     2d0:	3f012e18 	svccc	0x00012e18
     2d4:	3a0e0319 	bcc	380f40 <__bss_end__+0x376498>
     2d8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     2dc:	3c134919 	ldccc	9, cr4, [r3], {25}
     2e0:	00000019 	andeq	r0, r0, r9, lsl r0
     2e4:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     2e8:	030b130e 	movweq	r1, #45838	; 0xb30e
     2ec:	110e1b0e 	tstne	lr, lr, lsl #22
     2f0:	10061201 	andne	r1, r6, r1, lsl #4
     2f4:	02000017 	andeq	r0, r0, #23
     2f8:	0b0b0024 	bleq	2c0390 <__bss_end__+0x2b58e8>
     2fc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     300:	24030000 	strcs	r0, [r3], #-0
     304:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     308:	000e030b 	andeq	r0, lr, fp, lsl #6
     30c:	012e0400 	teqeq	lr, r0, lsl #8
     310:	0b3a0e03 	bleq	e83b24 <__bss_end__+0xe7907c>
     314:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     318:	01111349 	tsteq	r1, r9, asr #6
     31c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     320:	01194297 			; <UNDEFINED> instruction: 0x01194297
     324:	05000013 	streq	r0, [r0, #-19]
     328:	08030005 	stmdaeq	r3, {r0, r2}
     32c:	0b3b0b3a 	bleq	ec301c <__bss_end__+0xeb8574>
     330:	17021349 	strne	r1, [r2, -r9, asr #6]
     334:	89060000 	stmdbhi	r6, {}	; <UNPREDICTABLE>
     338:	11010182 	smlabbne	r1, r2, r1, r0
     33c:	00133101 	andseq	r3, r3, r1, lsl #2
     340:	828a0700 	addhi	r0, sl, #0, 14
     344:	18020001 	stmdane	r2, {r0}
     348:	00184291 	mulseq	r8, r1, r2
     34c:	002e0800 	eoreq	r0, lr, r0, lsl #16
     350:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     354:	0b3b0b3a 	bleq	ec3044 <__bss_end__+0xeb859c>
     358:	01111927 	tsteq	r1, r7, lsr #18
     35c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     360:	00194297 	mulseq	r9, r7, r2
     364:	012e0900 	teqeq	lr, r0, lsl #18
     368:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     36c:	0b3b0b3a 	bleq	ec305c <__bss_end__+0xeb85b4>
     370:	01111927 	tsteq	r1, r7, lsr #18
     374:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     378:	01194297 			; <UNDEFINED> instruction: 0x01194297
     37c:	0a000013 	beq	3d0 <_start-0x7c30>
     380:	08030005 	stmdaeq	r3, {r0, r2}
     384:	0b3b0b3a 	bleq	ec3074 <__bss_end__+0xeb85cc>
     388:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     38c:	150b0000 	strne	r0, [fp, #-0]
     390:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
     394:	00130113 	andseq	r0, r3, r3, lsl r1
     398:	00050c00 	andeq	r0, r5, r0, lsl #24
     39c:	00001349 	andeq	r1, r0, r9, asr #6
     3a0:	0b000f0d 	bleq	3fdc <_start-0x4024>
     3a4:	0013490b 	andseq	r4, r3, fp, lsl #18
     3a8:	00340e00 	eorseq	r0, r4, r0, lsl #28
     3ac:	0b3a0e03 	bleq	e83bc0 <__bss_end__+0xe79118>
     3b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     3b4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     3b8:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
     3bc:	03193f01 	tsteq	r9, #1, 30
     3c0:	3b0b3a0e 	blcc	2cec00 <__bss_end__+0x2c4158>
     3c4:	3c19270b 	ldccc	7, cr2, [r9], {11}
     3c8:	00000019 	andeq	r0, r0, r9, lsl r0
     3cc:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     3d0:	030b130e 	movweq	r1, #45838	; 0xb30e
     3d4:	110e1b0e 	tstne	lr, lr, lsl #22
     3d8:	10061201 	andne	r1, r6, r1, lsl #4
     3dc:	02000017 	andeq	r0, r0, #23
     3e0:	0b0b0024 	bleq	2c0478 <__bss_end__+0x2b59d0>
     3e4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     3e8:	24030000 	strcs	r0, [r3], #-0
     3ec:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     3f0:	000e030b 	andeq	r0, lr, fp, lsl #6
     3f4:	000f0400 	andeq	r0, pc, r0, lsl #8
     3f8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     3fc:	26050000 	strcs	r0, [r5], -r0
     400:	00134900 	andseq	r4, r3, r0, lsl #18
     404:	012e0600 	teqeq	lr, r0, lsl #12
     408:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     40c:	0b3b0b3a 	bleq	ec30fc <__bss_end__+0xeb8654>
     410:	13491927 	movtne	r1, #39207	; 0x9927
     414:	06120111 			; <UNDEFINED> instruction: 0x06120111
     418:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     41c:	00130119 	andseq	r0, r3, r9, lsl r1
     420:	00050700 	andeq	r0, r5, r0, lsl #14
     424:	0b3a0803 	bleq	e82438 <__bss_end__+0xe77990>
     428:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     42c:	00001702 	andeq	r1, r0, r2, lsl #14
     430:	27011508 	strcs	r1, [r1, -r8, lsl #10]
     434:	01134919 	tsteq	r3, r9, lsl r9
     438:	09000013 	stmdbeq	r0, {r0, r1, r4}
     43c:	13490005 	movtne	r0, #36869	; 0x9005
     440:	340a0000 	strcc	r0, [sl], #-0
     444:	3a0e0300 	bcc	38104c <__bss_end__+0x3765a4>
     448:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     44c:	3c193f13 	ldccc	15, cr3, [r9], {19}
     450:	0b000019 	bleq	4bc <_start-0x7b44>
     454:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     458:	0b3b0b3a 	bleq	ec3148 <__bss_end__+0xeb86a0>
     45c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     460:	00001802 	andeq	r1, r0, r2, lsl #16
     464:	01110100 	tsteq	r1, r0, lsl #2
     468:	0b130e25 	bleq	4c3d04 <__bss_end__+0x4b925c>
     46c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     470:	06120111 			; <UNDEFINED> instruction: 0x06120111
     474:	00001710 	andeq	r1, r0, r0, lsl r7
     478:	0b002402 	bleq	9488 <sw_uart_gets_timeout+0x48>
     47c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     480:	03000008 	movweq	r0, #8
     484:	0b0b0024 	bleq	2c051c <__bss_end__+0x2b5a74>
     488:	0e030b3e 	vmoveq.16	d3[0], r0
     48c:	0f040000 	svceq	0x00040000
     490:	000b0b00 	andeq	r0, fp, r0, lsl #22
     494:	000f0500 	andeq	r0, pc, r0, lsl #10
     498:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     49c:	26060000 	strcs	r0, [r6], -r0
     4a0:	00134900 	andseq	r4, r3, r0, lsl #18
     4a4:	00160700 	andseq	r0, r6, r0, lsl #14
     4a8:	0b3a0e03 	bleq	e83cbc <__bss_end__+0xe79214>
     4ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     4b0:	13080000 	movwne	r0, #32768	; 0x8000
     4b4:	0b0e0301 	bleq	3810c0 <__bss_end__+0x376618>
     4b8:	3b0b3a0b 	blcc	2cecec <__bss_end__+0x2c4244>
     4bc:	0013010b 	andseq	r0, r3, fp, lsl #2
     4c0:	000d0900 	andeq	r0, sp, r0, lsl #18
     4c4:	13490e03 	movtne	r0, #40451	; 0x9e03
     4c8:	19340b38 	ldmdbne	r4!, {r3, r4, r5, r8, r9, fp}
     4cc:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
     4d0:	3a0e0301 	bcc	3810dc <__bss_end__+0x376634>
     4d4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     4d8:	11134919 	tstne	r3, r9, lsl r9
     4dc:	40061201 	andmi	r1, r6, r1, lsl #4
     4e0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     4e4:	00001301 	andeq	r1, r0, r1, lsl #6
     4e8:	0300050b 	movweq	r0, #1291	; 0x50b
     4ec:	3b0b3a08 	blcc	2ced14 <__bss_end__+0x2c426c>
     4f0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     4f4:	0c000017 	stceq	0, cr0, [r0], {23}
     4f8:	0803012e 	stmdaeq	r3, {r1, r2, r3, r5, r8}
     4fc:	0b3b0b3a 	bleq	ec31ec <__bss_end__+0xeb8744>
     500:	13491927 	movtne	r1, #39207	; 0x9927
     504:	06120111 			; <UNDEFINED> instruction: 0x06120111
     508:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     50c:	00130119 	andseq	r0, r3, r9, lsl r1
     510:	00050d00 	andeq	r0, r5, r0, lsl #26
     514:	0b3a0e03 	bleq	e83d28 <__bss_end__+0xe79280>
     518:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     51c:	00001702 	andeq	r1, r0, r2, lsl #14
     520:	0300050e 	movweq	r0, #1294	; 0x50e
     524:	3b0b3a0e 	blcc	2ced64 <__bss_end__+0x2c42bc>
     528:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     52c:	0f000018 	svceq	0x00000018
     530:	08030034 	stmdaeq	r3, {r2, r4, r5}
     534:	0b3b0b3a 	bleq	ec3224 <__bss_end__+0xeb877c>
     538:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     53c:	34100000 	ldrcc	r0, [r0], #-0
     540:	3a080300 	bcc	201148 <__bss_end__+0x1f66a0>
     544:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     548:	00170213 	andseq	r0, r7, r3, lsl r2
     54c:	00341100 	eorseq	r1, r4, r0, lsl #2
     550:	13490e03 	movtne	r0, #40451	; 0x9e03
     554:	18021934 	stmdane	r2, {r2, r4, r5, r8, fp, ip}
     558:	0b120000 	bleq	480560 <__bss_end__+0x475ab8>
     55c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     560:	00130106 	andseq	r0, r3, r6, lsl #2
     564:	00341300 	eorseq	r1, r4, r0, lsl #6
     568:	0b3a0e03 	bleq	e83d7c <__bss_end__+0xe792d4>
     56c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     570:	00001702 	andeq	r1, r0, r2, lsl #14
     574:	01828914 	orreq	r8, r2, r4, lsl r9
     578:	31011100 	mrscc	r1, (UNDEF: 17)
     57c:	15000013 	strne	r0, [r0, #-19]
     580:	01018289 	smlabbeq	r1, r9, r2, r8
     584:	13310111 	teqne	r1, #1073741828	; 0x40000004
     588:	00001301 	andeq	r1, r0, r1, lsl #6
     58c:	01828a16 	orreq	r8, r2, r6, lsl sl
     590:	91180200 	tstls	r8, r0, lsl #4
     594:	00001842 	andeq	r1, r0, r2, asr #16
     598:	01828917 	orreq	r8, r2, r7, lsl r9
     59c:	31011101 	tstcc	r1, r1, lsl #2
     5a0:	18000013 	stmdane	r0, {r0, r1, r4}
     5a4:	13490101 	movtne	r0, #37121	; 0x9101
     5a8:	00001301 	andeq	r1, r0, r1, lsl #6
     5ac:	49002119 	stmdbmi	r0, {r0, r3, r4, r8, sp}
     5b0:	000b2f13 	andeq	r2, fp, r3, lsl pc
     5b4:	012e1a00 	teqeq	lr, r0, lsl #20
     5b8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     5bc:	0b3b0b3a 	bleq	ec32ac <__bss_end__+0xeb8804>
     5c0:	01111927 	tsteq	r1, r7, lsr #18
     5c4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     5c8:	01194297 			; <UNDEFINED> instruction: 0x01194297
     5cc:	1b000013 	blne	620 <_start-0x79e0>
     5d0:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     5d4:	13011349 	movwne	r1, #4937	; 0x1349
     5d8:	051c0000 	ldreq	r0, [ip, #-0]
     5dc:	00134900 	andseq	r4, r3, r0, lsl #18
     5e0:	012e1d00 	teqeq	lr, r0, lsl #26
     5e4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     5e8:	0b3b0b3a 	bleq	ec32d8 <__bss_end__+0xeb8830>
     5ec:	13491927 	movtne	r1, #39207	; 0x9927
     5f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     5f4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     5f8:	00130119 	andseq	r0, r3, r9, lsl r1
     5fc:	010b1e00 	tsteq	fp, r0, lsl #28
     600:	00001755 	andeq	r1, r0, r5, asr r7
     604:	0300341f 	movweq	r3, #1055	; 0x41f
     608:	3b0b3a0e 	blcc	2cee48 <__bss_end__+0x2c43a0>
     60c:	3f13490b 	svccc	0x0013490b
     610:	00193c19 	andseq	r3, r9, r9, lsl ip
     614:	002e2000 	eoreq	r2, lr, r0
     618:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     61c:	0b3b0b3a 	bleq	ec330c <__bss_end__+0xeb8864>
     620:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     624:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
     628:	03193f01 	tsteq	r9, #1, 30
     62c:	3b0b3a0e 	blcc	2cee6c <__bss_end__+0x2c43c4>
     630:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     634:	01193c13 	tsteq	r9, r3, lsl ip
     638:	22000013 	andcs	r0, r0, #19
     63c:	00000018 	andeq	r0, r0, r8, lsl r0
     640:	01110100 	tsteq	r1, r0, lsl #2
     644:	0b130e25 	bleq	4c3ee0 <__bss_end__+0x4b9438>
     648:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     64c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     650:	00001710 	andeq	r1, r0, r0, lsl r7
     654:	0b002402 	bleq	9664 <sw_uart_printk+0x80>
     658:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     65c:	03000008 	movweq	r0, #8
     660:	0b0b0024 	bleq	2c06f8 <__bss_end__+0x2b5c50>
     664:	0e030b3e 	vmoveq.16	d3[0], r0
     668:	0f040000 	svceq	0x00040000
     66c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     670:	05000013 	streq	r0, [r0, #-19]
     674:	13490026 	movtne	r0, #36902	; 0x9026
     678:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
     67c:	03193f01 	tsteq	r9, #1, 30
     680:	3b0b3a0e 	blcc	2ceec0 <__bss_end__+0x2c4418>
     684:	1119270b 	tstne	r9, fp, lsl #14
     688:	40061201 	andmi	r1, r6, r1, lsl #4
     68c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     690:	00001301 	andeq	r1, r0, r1, lsl #6
     694:	01828907 	orreq	r8, r2, r7, lsl #18
     698:	01011101 	tsteq	r1, r1, lsl #2
     69c:	08000013 	stmdaeq	r0, {r0, r1, r4}
     6a0:	0001828a 	andeq	r8, r1, sl, lsl #5
     6a4:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     6a8:	09000018 	stmdbeq	r0, {r3, r4}
     6ac:	01018289 	smlabbeq	r1, r9, r2, r8
     6b0:	13310111 	teqne	r1, #1073741828	; 0x40000004
     6b4:	00001301 	andeq	r1, r0, r1, lsl #6
     6b8:	0182890a 	orreq	r8, r2, sl, lsl #18
     6bc:	31011100 	mrscc	r1, (UNDEF: 17)
     6c0:	0b000013 	bleq	714 <_start-0x78ec>
     6c4:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     6c8:	13011349 	movwne	r1, #4937	; 0x1349
     6cc:	050c0000 	streq	r0, [ip, #-0]
     6d0:	00134900 	andseq	r4, r3, r0, lsl #18
     6d4:	00340d00 	eorseq	r0, r4, r0, lsl #26
     6d8:	0b3a0e03 	bleq	e83eec <__bss_end__+0xe79444>
     6dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     6e0:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     6e4:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
     6e8:	03193f01 	tsteq	r9, #1, 30
     6ec:	3b0b3a0e 	blcc	2cef2c <__bss_end__+0x2c4484>
     6f0:	3c19270b 	ldccc	7, cr2, [r9], {11}
     6f4:	00130119 	andseq	r0, r3, r9, lsl r1
     6f8:	002e0f00 	eoreq	r0, lr, r0, lsl #30
     6fc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     700:	0b3b0b3a 	bleq	ec33f0 <__bss_end__+0xeb8948>
     704:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     708:	01000000 	mrseq	r0, (UNDEF: 0)
     70c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     710:	0e030b13 	vmoveq.32	d3[0], r0
     714:	01110e1b 	tsteq	r1, fp, lsl lr
     718:	17100612 			; <UNDEFINED> instruction: 0x17100612
     71c:	24020000 	strcs	r0, [r2], #-0
     720:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     724:	0008030b 	andeq	r0, r8, fp, lsl #6
     728:	00240300 	eoreq	r0, r4, r0, lsl #6
     72c:	0b3e0b0b 	bleq	f83360 <__bss_end__+0xf788b8>
     730:	00000e03 	andeq	r0, r0, r3, lsl #28
     734:	03001604 	movweq	r1, #1540	; 0x604
     738:	3b0b3a0e 	blcc	2cef78 <__bss_end__+0x2c44d0>
     73c:	0013490b 	andseq	r4, r3, fp, lsl #18
     740:	000f0500 	andeq	r0, pc, r0, lsl #10
     744:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     748:	26060000 	strcs	r0, [r6], -r0
     74c:	00134900 	andseq	r4, r3, r0, lsl #18
     750:	01130700 	tsteq	r3, r0, lsl #14
     754:	0b3a0b0b 	bleq	e83388 <__bss_end__+0xe788e0>
     758:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     75c:	0d080000 	stceq	0, cr0, [r8, #-0]
     760:	3a080300 	bcc	201368 <__bss_end__+0x1f68c0>
     764:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     768:	000b3813 	andeq	r3, fp, r3, lsl r8
     76c:	000d0900 	andeq	r0, sp, r0, lsl #18
     770:	0b3a0e03 	bleq	e83f84 <__bss_end__+0xe794dc>
     774:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     778:	00000b38 	andeq	r0, r0, r8, lsr fp
     77c:	0b01040a 	bleq	417ac <__bss_end__+0x36d04>
     780:	3b0b3a0b 	blcc	2cefb4 <__bss_end__+0x2c450c>
     784:	0013010b 	andseq	r0, r3, fp, lsl #2
     788:	00280b00 	eoreq	r0, r8, r0, lsl #22
     78c:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     790:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
     794:	3a0e0301 	bcc	3813a0 <__bss_end__+0x3768f8>
     798:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     79c:	11134919 	tstne	r3, r9, lsl r9
     7a0:	40061201 	andmi	r1, r6, r1, lsl #4
     7a4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     7a8:	00001301 	andeq	r1, r0, r1, lsl #6
     7ac:	0300050d 	movweq	r0, #1293	; 0x50d
     7b0:	3b0b3a08 	blcc	2cefd8 <__bss_end__+0x2c4530>
     7b4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     7b8:	0e000017 	mcreq	0, 0, r0, cr0, cr7, {0}
     7bc:	01018289 	smlabbeq	r1, r9, r2, r8
     7c0:	13310111 	teqne	r1, #1073741828	; 0x40000004
     7c4:	8a0f0000 	bhi	3c07cc <__bss_end__+0x3b5d24>
     7c8:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     7cc:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     7d0:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
     7d4:	03193f01 	tsteq	r9, #1, 30
     7d8:	3b0b3a0e 	blcc	2cf018 <__bss_end__+0x2c4570>
     7dc:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
     7e0:	97184006 	ldrls	r4, [r8, -r6]
     7e4:	13011942 	movwne	r1, #6466	; 0x1942
     7e8:	34110000 	ldrcc	r0, [r1], #-0
     7ec:	3a0e0300 	bcc	3813f4 <__bss_end__+0x37694c>
     7f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     7f4:	3c193f13 	ldccc	15, cr3, [r9], {19}
     7f8:	12000019 	andne	r0, r0, #25
     7fc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     800:	0b3a0e03 	bleq	e84014 <__bss_end__+0xe7956c>
     804:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     808:	0000193c 	andeq	r1, r0, ip, lsr r9
     80c:	03003413 	movweq	r3, #1043	; 0x413
     810:	3b0b3a08 	blcc	2cf038 <__bss_end__+0x2c4590>
     814:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     818:	14000017 	strne	r0, [r0], #-23
     81c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     820:	0b3b0b3a 	bleq	ec3510 <__bss_end__+0xeb8a68>
     824:	00001349 	andeq	r1, r0, r9, asr #6
     828:	01828915 	orreq	r8, r2, r5, lsl r9
     82c:	31011100 	mrscc	r1, (UNDEF: 17)
     830:	16000013 			; <UNDEFINED> instruction: 0x16000013
     834:	01018289 	smlabbeq	r1, r9, r2, r8
     838:	13310111 	teqne	r1, #1073741828	; 0x40000004
     83c:	00001301 	andeq	r1, r0, r1, lsl #6
     840:	03003417 	movweq	r3, #1047	; 0x417
     844:	3b0b3a0e 	blcc	2cf084 <__bss_end__+0x2c45dc>
     848:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     84c:	18000018 	stmdane	r0, {r3, r4}
     850:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     854:	13011349 	movwne	r1, #4937	; 0x1349
     858:	05190000 	ldreq	r0, [r9, #-0]
     85c:	00134900 	andseq	r4, r3, r0, lsl #18
     860:	012e1a00 	teqeq	lr, r0, lsl #20
     864:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     868:	0b3b0b3a 	bleq	ec3558 <__bss_end__+0xeb8ab0>
     86c:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     870:	00001301 	andeq	r1, r0, r1, lsl #6
     874:	3f002e1b 	svccc	0x00002e1b
     878:	3a0e0319 	bcc	3814e4 <__bss_end__+0x376a3c>
     87c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     880:	3c134919 	ldccc	9, cr4, [r3], {25}
     884:	1c000019 	stcne	0, cr0, [r0], {25}
     888:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     88c:	0b3a0e03 	bleq	e840a0 <__bss_end__+0xe795f8>
     890:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     894:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     898:	00001301 	andeq	r1, r0, r1, lsl #6
     89c:	0000181d 	andeq	r1, r0, sp, lsl r8
     8a0:	11010000 	mrsne	r0, (UNDEF: 1)
     8a4:	130e2501 	movwne	r2, #58625	; 0xe501
     8a8:	1b0e030b 	blne	3814dc <__bss_end__+0x376a34>
     8ac:	1117550e 	tstne	r7, lr, lsl #10
     8b0:	00171001 	andseq	r1, r7, r1
     8b4:	00240200 	eoreq	r0, r4, r0, lsl #4
     8b8:	0b3e0b0b 	bleq	f834ec <__bss_end__+0xf78a44>
     8bc:	00000803 	andeq	r0, r0, r3, lsl #16
     8c0:	0b002403 	bleq	98d4 <rpi_init_trampoline+0x8>
     8c4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     8c8:	0400000e 	streq	r0, [r0], #-14
     8cc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     8d0:	0b3a0e03 	bleq	e840e4 <__bss_end__+0xe7963c>
     8d4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     8d8:	01111349 	tsteq	r1, r9, asr #6
     8dc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     8e0:	01194297 			; <UNDEFINED> instruction: 0x01194297
     8e4:	05000013 	streq	r0, [r0, #-19]
     8e8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     8ec:	0b3b0b3a 	bleq	ec35dc <__bss_end__+0xeb8b34>
     8f0:	17021349 	strne	r1, [r2, -r9, asr #6]
     8f4:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
     8f8:	03193f01 	tsteq	r9, #1, 30
     8fc:	3b0b3a0e 	blcc	2cf13c <__bss_end__+0x2c4694>
     900:	1119270b 	tstne	r9, fp, lsl #14
     904:	40061201 	andmi	r1, r6, r1, lsl #4
     908:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     90c:	00001301 	andeq	r1, r0, r1, lsl #6
     910:	03003407 	movweq	r3, #1031	; 0x407
     914:	3b0b3a0e 	blcc	2cf154 <__bss_end__+0x2c46ac>
     918:	1c13490b 	ldcne	9, cr4, [r3], {11}
     91c:	08000006 	stmdaeq	r0, {r1, r2}
     920:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     924:	0b3b0b3a 	bleq	ec3614 <__bss_end__+0xeb8b6c>
     928:	0b1c1349 	bleq	705654 <__bss_end__+0x6fabac>
     92c:	89090000 	stmdbhi	r9, {}	; <UNPREDICTABLE>
     930:	11000182 	smlabbne	r0, r2, r1, r0
     934:	00133101 	andseq	r3, r3, r1, lsl #2
     938:	82890a00 	addhi	r0, r9, #0, 20
     93c:	01110101 	tsteq	r1, r1, lsl #2
     940:	13011331 	movwne	r1, #4913	; 0x1331
     944:	8a0b0000 	bhi	2c094c <__bss_end__+0x2b5ea4>
     948:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     94c:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     950:	890c0000 	stmdbhi	ip, {}	; <UNPREDICTABLE>
     954:	11010182 	smlabbne	r1, r2, r1, r0
     958:	00133101 	andseq	r3, r3, r1, lsl #2
     95c:	00260d00 	eoreq	r0, r6, r0, lsl #26
     960:	00001349 	andeq	r1, r0, r9, asr #6
     964:	3f012e0e 	svccc	0x00012e0e
     968:	3a0e0319 	bcc	3815d4 <__bss_end__+0x376b2c>
     96c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     970:	01193c19 	tsteq	r9, r9, lsl ip
     974:	0f000013 	svceq	0x00000013
     978:	13490005 	movtne	r0, #36869	; 0x9005
     97c:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
     980:	03193f01 	tsteq	r9, #1, 30
     984:	3b0b3a0e 	blcc	2cf1c4 <__bss_end__+0x2c471c>
     988:	3c19270b 	ldccc	7, cr2, [r9], {11}
     98c:	00000019 	andeq	r0, r0, r9, lsl r0
     990:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     994:	030b130e 	movweq	r1, #45838	; 0xb30e
     998:	110e1b0e 	tstne	lr, lr, lsl #22
     99c:	10061201 	andne	r1, r6, r1, lsl #4
     9a0:	02000017 	andeq	r0, r0, #23
     9a4:	0b0b0024 	bleq	2c0a3c <__bss_end__+0x2b5f94>
     9a8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     9ac:	24030000 	strcs	r0, [r3], #-0
     9b0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     9b4:	000e030b 	andeq	r0, lr, fp, lsl #6
     9b8:	012e0400 	teqeq	lr, r0, lsl #8
     9bc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     9c0:	0b3b0b3a 	bleq	ec36b0 <__bss_end__+0xeb8c08>
     9c4:	01111927 	tsteq	r1, r7, lsr #18
     9c8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     9cc:	01194297 			; <UNDEFINED> instruction: 0x01194297
     9d0:	05000013 	streq	r0, [r0, #-19]
     9d4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     9d8:	0b3b0b3a 	bleq	ec36c8 <__bss_end__+0xeb8c20>
     9dc:	17021349 	strne	r1, [r2, -r9, asr #6]
     9e0:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
     9e4:	03193f01 	tsteq	r9, #1, 30
     9e8:	3b0b3a0e 	blcc	2cf228 <__bss_end__+0x2c4780>
     9ec:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     9f0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     9f4:	97184006 	ldrls	r4, [r8, -r6]
     9f8:	13011942 	movwne	r1, #6466	; 0x1942
     9fc:	89070000 	stmdbhi	r7, {}	; <UNPREDICTABLE>
     a00:	11010182 	smlabbne	r1, r2, r1, r0
     a04:	00133101 	andseq	r3, r3, r1, lsl #2
     a08:	828a0800 	addhi	r0, sl, #0, 16
     a0c:	18020001 	stmdane	r2, {r0}
     a10:	00184291 	mulseq	r8, r1, r2
     a14:	00340900 	eorseq	r0, r4, r0, lsl #18
     a18:	0b3a0803 	bleq	e82a2c <__bss_end__+0xe77f84>
     a1c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     a20:	00001802 	andeq	r1, r0, r2, lsl #16
     a24:	0182890a 	orreq	r8, r2, sl, lsl #18
     a28:	31011100 	mrscc	r1, (UNDEF: 17)
     a2c:	0b000013 	bleq	a80 <_start-0x7580>
     a30:	08030005 	stmdaeq	r3, {r0, r2}
     a34:	0b3b0b3a 	bleq	ec3724 <__bss_end__+0xeb8c7c>
     a38:	17021349 	strne	r1, [r2, -r9, asr #6]
     a3c:	0b0c0000 	bleq	300a44 <__bss_end__+0x2f5f9c>
     a40:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     a44:	00130106 	andseq	r0, r3, r6, lsl #2
     a48:	00340d00 	eorseq	r0, r4, r0, lsl #26
     a4c:	0b3a0803 	bleq	e82a60 <__bss_end__+0xe77fb8>
     a50:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     a54:	00001702 	andeq	r1, r0, r2, lsl #14
     a58:	3f012e0e 	svccc	0x00012e0e
     a5c:	3a0e0319 	bcc	3816c8 <__bss_end__+0x376c20>
     a60:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     a64:	3c134919 	ldccc	9, cr4, [r3], {25}
     a68:	0f000019 	svceq	0x00000019
     a6c:	13490005 	movtne	r0, #36869	; 0x9005
     a70:	01000000 	mrseq	r0, (UNDEF: 0)
     a74:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     a78:	0e030b13 	vmoveq.32	d3[0], r0
     a7c:	01110e1b 	tsteq	r1, fp, lsl lr
     a80:	17100612 			; <UNDEFINED> instruction: 0x17100612
     a84:	24020000 	strcs	r0, [r2], #-0
     a88:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     a8c:	0008030b 	andeq	r0, r8, fp, lsl #6
     a90:	00160300 	andseq	r0, r6, r0, lsl #6
     a94:	0b3a0e03 	bleq	e842a8 <__bss_end__+0xe79800>
     a98:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     a9c:	24040000 	strcs	r0, [r4], #-0
     aa0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     aa4:	000e030b 	andeq	r0, lr, fp, lsl #6
     aa8:	000f0500 	andeq	r0, pc, r0, lsl #10
     aac:	00000b0b 	andeq	r0, r0, fp, lsl #22
     ab0:	0b000f06 	bleq	46d0 <_start-0x3930>
     ab4:	0013490b 	andseq	r4, r3, fp, lsl #18
     ab8:	00260700 	eoreq	r0, r6, r0, lsl #14
     abc:	00001349 	andeq	r1, r0, r9, asr #6
     ac0:	49010108 	stmdbmi	r1, {r3, r8}
     ac4:	00130113 	andseq	r0, r3, r3, lsl r1
     ac8:	00210900 	eoreq	r0, r1, r0, lsl #18
     acc:	0b2f1349 	bleq	bc57f8 <__bss_end__+0xbbad50>
     ad0:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
     ad4:	03193f01 	tsteq	r9, #1, 30
     ad8:	3b0b3a0e 	blcc	2cf318 <__bss_end__+0x2c4870>
     adc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     ae0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     ae4:	97184006 	ldrls	r4, [r8, -r6]
     ae8:	13011942 	movwne	r1, #6466	; 0x1942
     aec:	050b0000 	streq	r0, [fp, #-0]
     af0:	3a0e0300 	bcc	3816f8 <__bss_end__+0x376c50>
     af4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     af8:	00170213 	andseq	r0, r7, r3, lsl r2
     afc:	00340c00 	eorseq	r0, r4, r0, lsl #24
     b00:	13490e03 	movtne	r0, #40451	; 0x9e03
     b04:	18021934 	stmdane	r2, {r2, r4, r5, r8, fp, ip}
     b08:	340d0000 	strcc	r0, [sp], #-0
     b0c:	3a0e0300 	bcc	381714 <__bss_end__+0x376c6c>
     b10:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b14:	00180213 	andseq	r0, r8, r3, lsl r2
     b18:	00340e00 	eorseq	r0, r4, r0, lsl #28
     b1c:	0b3a0e03 	bleq	e84330 <__bss_end__+0xe79888>
     b20:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     b24:	00001702 	andeq	r1, r0, r2, lsl #14
     b28:	0182890f 	orreq	r8, r2, pc, lsl #18
     b2c:	31011100 	mrscc	r1, (UNDEF: 17)
     b30:	10000013 	andne	r0, r0, r3, lsl r0
     b34:	01018289 	smlabbeq	r1, r9, r2, r8
     b38:	13310111 	teqne	r1, #1073741828	; 0x40000004
     b3c:	00001301 	andeq	r1, r0, r1, lsl #6
     b40:	01828a11 	orreq	r8, r2, r1, lsl sl
     b44:	91180200 	tstls	r8, r0, lsl #4
     b48:	00001842 	andeq	r1, r0, r2, asr #16
     b4c:	01828912 	orreq	r8, r2, r2, lsl r9
     b50:	31011101 	tstcc	r1, r1, lsl #2
     b54:	13000013 	movwne	r0, #19
     b58:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     b5c:	0b3a0e03 	bleq	e84370 <__bss_end__+0xe798c8>
     b60:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     b64:	06120111 			; <UNDEFINED> instruction: 0x06120111
     b68:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     b6c:	00130119 	andseq	r0, r3, r9, lsl r1
     b70:	002e1400 	eoreq	r1, lr, r0, lsl #8
     b74:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     b78:	0b3b0b3a 	bleq	ec3868 <__bss_end__+0xeb8dc0>
     b7c:	01111927 	tsteq	r1, r7, lsr #18
     b80:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b84:	00194297 	mulseq	r9, r7, r2
     b88:	002e1500 	eoreq	r1, lr, r0, lsl #10
     b8c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     b90:	0b3b0b3a 	bleq	ec3880 <__bss_end__+0xeb8dd8>
     b94:	13491927 	movtne	r1, #39207	; 0x9927
     b98:	06120111 			; <UNDEFINED> instruction: 0x06120111
     b9c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     ba0:	16000019 			; <UNDEFINED> instruction: 0x16000019
     ba4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     ba8:	0b3b0b3a 	bleq	ec3898 <__bss_end__+0xeb8df0>
     bac:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     bb0:	0000193c 	andeq	r1, r0, ip, lsr r9
     bb4:	3f002e17 	svccc	0x00002e17
     bb8:	3a0e0319 	bcc	381824 <__bss_end__+0x376d7c>
     bbc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     bc0:	00193c19 	andseq	r3, r9, r9, lsl ip
     bc4:	012e1800 	teqeq	lr, r0, lsl #16
     bc8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     bcc:	0b3b0b3a 	bleq	ec38bc <__bss_end__+0xeb8e14>
     bd0:	13491927 	movtne	r1, #39207	; 0x9927
     bd4:	1301193c 	movwne	r1, #6460	; 0x193c
     bd8:	05190000 	ldreq	r0, [r9, #-0]
     bdc:	00134900 	andseq	r4, r3, r0, lsl #18
     be0:	00181a00 	andseq	r1, r8, r0, lsl #20
     be4:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
     be8:	03193f01 	tsteq	r9, #1, 30
     bec:	3b0b3a0e 	blcc	2cf42c <__bss_end__+0x2c4984>
     bf0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     bf4:	00193c13 	andseq	r3, r9, r3, lsl ip
     bf8:	11010000 	mrsne	r0, (UNDEF: 1)
     bfc:	130e2501 	movwne	r2, #58625	; 0xe501
     c00:	1b0e030b 	blne	381834 <__bss_end__+0x376d8c>
     c04:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     c08:	00171006 	andseq	r1, r7, r6
     c0c:	00240200 	eoreq	r0, r4, r0, lsl #4
     c10:	0b3e0b0b 	bleq	f83844 <__bss_end__+0xf78d9c>
     c14:	00000803 	andeq	r0, r0, r3, lsl #16
     c18:	0b002403 	bleq	9c2c <gpio_set_function+0xd4>
     c1c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     c20:	0400000e 	streq	r0, [r0], #-14
     c24:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     c28:	0b3b0b3a 	bleq	ec3918 <__bss_end__+0xeb8e70>
     c2c:	00001349 	andeq	r1, r0, r9, asr #6
     c30:	0b000f05 	bleq	484c <_start-0x37b4>
     c34:	0600000b 	streq	r0, [r0], -fp
     c38:	0b0b000f 	bleq	2c0c7c <__bss_end__+0x2b61d4>
     c3c:	00001349 	andeq	r1, r0, r9, asr #6
     c40:	49002607 	stmdbmi	r0, {r0, r1, r2, r9, sl, sp}
     c44:	08000013 	stmdaeq	r0, {r0, r1, r4}
     c48:	13490101 	movtne	r0, #37121	; 0x9101
     c4c:	00001301 	andeq	r1, r0, r1, lsl #6
     c50:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
     c54:	000b2f13 	andeq	r2, fp, r3, lsl pc
     c58:	01130a00 	tsteq	r3, r0, lsl #20
     c5c:	050b0e03 	streq	r0, [fp, #-3587]	; 0xe03
     c60:	0b3b0b3a 	bleq	ec3950 <__bss_end__+0xeb8ea8>
     c64:	00001301 	andeq	r1, r0, r1, lsl #6
     c68:	03000d0b 	movweq	r0, #3339	; 0xd0b
     c6c:	3b0b3a0e 	blcc	2cf4ac <__bss_end__+0x2c4a04>
     c70:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     c74:	0c00000b 	stceq	0, cr0, [r0], {11}
     c78:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     c7c:	0b3b0b3a 	bleq	ec396c <__bss_end__+0xeb8ec4>
     c80:	0b381349 	bleq	e059ac <__bss_end__+0xdfaf04>
     c84:	150d0000 	strne	r0, [sp, #-0]
     c88:	01192701 	tsteq	r9, r1, lsl #14
     c8c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     c90:	13490005 	movtne	r0, #36869	; 0x9005
     c94:	210f0000 	mrscs	r0, CPSR
     c98:	2f134900 	svccs	0x00134900
     c9c:	10000005 	andne	r0, r0, r5
     ca0:	08030113 	stmdaeq	r3, {r0, r1, r4, r8}
     ca4:	0b3a0b0b 	bleq	e838d8 <__bss_end__+0xe78e30>
     ca8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     cac:	16110000 	ldrne	r0, [r1], -r0
     cb0:	3a080300 	bcc	2018b8 <__bss_end__+0x1f6e10>
     cb4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     cb8:	12000013 	andne	r0, r0, #19
     cbc:	0e03012e 	adfeqsp	f0, f3, #0.5
     cc0:	0b3b0b3a 	bleq	ec39b0 <__bss_end__+0xeb8f08>
     cc4:	13491927 	movtne	r1, #39207	; 0x9927
     cc8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     ccc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     cd0:	00130119 	andseq	r0, r3, r9, lsl r1
     cd4:	00051300 	andeq	r1, r5, r0, lsl #6
     cd8:	0b3a0803 	bleq	e82cec <__bss_end__+0xe78244>
     cdc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ce0:	00001702 	andeq	r1, r0, r2, lsl #14
     ce4:	03012e14 	movweq	r2, #7700	; 0x1e14
     ce8:	3b0b3a0e 	blcc	2cf528 <__bss_end__+0x2c4a80>
     cec:	1119270b 	tstne	r9, fp, lsl #14
     cf0:	40061201 	andmi	r1, r6, r1, lsl #4
     cf4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     cf8:	00001301 	andeq	r1, r0, r1, lsl #6
     cfc:	03000515 	movweq	r0, #1301	; 0x515
     d00:	3b0b3a08 	blcc	2cf528 <__bss_end__+0x2c4a80>
     d04:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     d08:	16000018 			; <UNDEFINED> instruction: 0x16000018
     d0c:	01018289 	smlabbeq	r1, r9, r2, r8
     d10:	13310111 	teqne	r1, #1073741828	; 0x40000004
     d14:	8a170000 	bhi	5c0d1c <__bss_end__+0x5b6274>
     d18:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     d1c:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     d20:	34180000 	ldrcc	r0, [r8], #-0
     d24:	490e0300 	stmdbmi	lr, {r8, r9}
     d28:	02193413 	andseq	r3, r9, #318767104	; 0x13000000
     d2c:	19000018 	stmdbne	r0, {r3, r4}
     d30:	01018289 	smlabbeq	r1, r9, r2, r8
     d34:	13310111 	teqne	r1, #1073741828	; 0x40000004
     d38:	00001301 	andeq	r1, r0, r1, lsl #6
     d3c:	0182891a 	orreq	r8, r2, sl, lsl r9
     d40:	31011100 	mrscc	r1, (UNDEF: 17)
     d44:	1b000013 	blne	d98 <_start-0x7268>
     d48:	08030034 	stmdaeq	r3, {r2, r4, r5}
     d4c:	0b3b0b3a 	bleq	ec3a3c <__bss_end__+0xeb8f94>
     d50:	17021349 	strne	r1, [r2, -r9, asr #6]
     d54:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
     d58:	03193f00 	tsteq	r9, #0, 30
     d5c:	3b0b3a0e 	blcc	2cf59c <__bss_end__+0x2c4af4>
     d60:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     d64:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     d68:	97184006 	ldrls	r4, [r8, -r6]
     d6c:	00001942 	andeq	r1, r0, r2, asr #18
     d70:	3f012e1d 	svccc	0x00012e1d
     d74:	3a0e0319 	bcc	3819e0 <__bss_end__+0x376f38>
     d78:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     d7c:	11134919 	tstne	r3, r9, lsl r9
     d80:	40061201 	andmi	r1, r6, r1, lsl #4
     d84:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     d88:	00001301 	andeq	r1, r0, r1, lsl #6
     d8c:	0300051e 	movweq	r0, #1310	; 0x51e
     d90:	3b0b3a0e 	blcc	2cf5d0 <__bss_end__+0x2c4b28>
     d94:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     d98:	1f000017 	svcne	0x00000017
     d9c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     da0:	0b3a0e03 	bleq	e845b4 <__bss_end__+0xe79b0c>
     da4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     da8:	0000193c 	andeq	r1, r0, ip, lsr r9
     dac:	3f012e20 	svccc	0x00012e20
     db0:	3a0e0319 	bcc	381a1c <__bss_end__+0x376f74>
     db4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     db8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     dbc:	97184006 	ldrls	r4, [r8, -r6]
     dc0:	13011942 	movwne	r1, #6466	; 0x1942
     dc4:	34210000 	strtcc	r0, [r1], #-0
     dc8:	3a0e0300 	bcc	3819d0 <__bss_end__+0x376f28>
     dcc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     dd0:	00180213 	andseq	r0, r8, r3, lsl r2
     dd4:	010b2200 	mrseq	r2, R11_fiq
     dd8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     ddc:	00001301 	andeq	r1, r0, r1, lsl #6
     de0:	03003423 	movweq	r3, #1059	; 0x423
     de4:	3b0b3a0e 	blcc	2cf624 <__bss_end__+0x2c4b7c>
     de8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     dec:	24000017 	strcs	r0, [r0], #-23
     df0:	08030034 	stmdaeq	r3, {r2, r4, r5}
     df4:	0b3b0b3a 	bleq	ec3ae4 <__bss_end__+0xeb903c>
     df8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     dfc:	2e250000 	cdpcs	0, 2, cr0, cr5, cr0, {0}
     e00:	03193f01 	tsteq	r9, #1, 30
     e04:	3b0b3a0e 	blcc	2cf644 <__bss_end__+0x2c4b9c>
     e08:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     e0c:	01193c13 	tsteq	r9, r3, lsl ip
     e10:	26000013 			; <UNDEFINED> instruction: 0x26000013
     e14:	00000018 	andeq	r0, r0, r8, lsl r0
     e18:	3f012e27 	svccc	0x00012e27
     e1c:	3a0e0319 	bcc	381a88 <__bss_end__+0x376fe0>
     e20:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     e24:	01193c19 	tsteq	r9, r9, lsl ip
     e28:	00000013 	andeq	r0, r0, r3, lsl r0
     e2c:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     e30:	030b130e 	movweq	r1, #45838	; 0xb30e
     e34:	110e1b0e 	tstne	lr, lr, lsl #22
     e38:	10061201 	andne	r1, r6, r1, lsl #4
     e3c:	02000017 	andeq	r0, r0, #23
     e40:	0b0b0024 	bleq	2c0ed8 <__bss_end__+0x2b6430>
     e44:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     e48:	24030000 	strcs	r0, [r3], #-0
     e4c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     e50:	000e030b 	andeq	r0, lr, fp, lsl #6
     e54:	00160400 	andseq	r0, r6, r0, lsl #8
     e58:	0b3a0e03 	bleq	e8466c <__bss_end__+0xe79bc4>
     e5c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e60:	0f050000 	svceq	0x00050000
     e64:	000b0b00 	andeq	r0, fp, r0, lsl #22
     e68:	000f0600 	andeq	r0, pc, r0, lsl #12
     e6c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     e70:	26070000 	strcs	r0, [r7], -r0
     e74:	00134900 	andseq	r4, r3, r0, lsl #18
     e78:	01130800 	tsteq	r3, r0, lsl #16
     e7c:	0b3a0b0b 	bleq	e83ab0 <__bss_end__+0xe79008>
     e80:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     e84:	0d090000 	stceq	0, cr0, [r9, #-0]
     e88:	3a080300 	bcc	201a90 <__bss_end__+0x1f6fe8>
     e8c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e90:	000b3813 	andeq	r3, fp, r3, lsl r8
     e94:	000d0a00 	andeq	r0, sp, r0, lsl #20
     e98:	0b3a0e03 	bleq	e846ac <__bss_end__+0xe79c04>
     e9c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ea0:	00000b38 	andeq	r0, r0, r8, lsr fp
     ea4:	0301130b 	movweq	r1, #4875	; 0x130b
     ea8:	3a0b0b0e 	bcc	2c3ae8 <__bss_end__+0x2b9040>
     eac:	010b3b0b 	tsteq	fp, fp, lsl #22
     eb0:	0c000013 	stceq	0, cr0, [r0], {19}
     eb4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     eb8:	0b381349 	bleq	e05be4 <__bss_end__+0xdfb13c>
     ebc:	00001934 	andeq	r1, r0, r4, lsr r9
     ec0:	03012e0d 	movweq	r2, #7693	; 0x1e0d
     ec4:	3b0b3a0e 	blcc	2cf704 <__bss_end__+0x2c4c5c>
     ec8:	2019270b 	andscs	r2, r9, fp, lsl #14
     ecc:	0013010b 	andseq	r0, r3, fp, lsl #2
     ed0:	00050e00 	andeq	r0, r5, r0, lsl #28
     ed4:	0b3a0e03 	bleq	e846e8 <__bss_end__+0xe79c40>
     ed8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     edc:	050f0000 	streq	r0, [pc, #-0]	; ee4 <_start-0x711c>
     ee0:	3a080300 	bcc	201ae8 <__bss_end__+0x1f7040>
     ee4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ee8:	10000013 	andne	r0, r0, r3, lsl r0
     eec:	0000010b 	andeq	r0, r0, fp, lsl #2
     ef0:	03003411 	movweq	r3, #1041	; 0x411
     ef4:	3b0b3a0e 	blcc	2cf734 <__bss_end__+0x2c4c8c>
     ef8:	0013490b 	andseq	r4, r3, fp, lsl #18
     efc:	012e1200 	teqeq	lr, r0, lsl #4
     f00:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     f04:	0b3b0b3a 	bleq	ec3bf4 <__bss_end__+0xeb914c>
     f08:	01111927 	tsteq	r1, r7, lsr #18
     f0c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     f10:	01194297 			; <UNDEFINED> instruction: 0x01194297
     f14:	13000013 	movwne	r0, #19
     f18:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     f1c:	0b3b0b3a 	bleq	ec3c0c <__bss_end__+0xeb9164>
     f20:	17021349 	strne	r1, [r2, -r9, asr #6]
     f24:	05140000 	ldreq	r0, [r4, #-0]
     f28:	3a080300 	bcc	201b30 <__bss_end__+0x1f7088>
     f2c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f30:	00170213 	andseq	r0, r7, r3, lsl r2
     f34:	00341500 	eorseq	r1, r4, r0, lsl #10
     f38:	0b3a0803 	bleq	e82f4c <__bss_end__+0xe784a4>
     f3c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f40:	00001802 	andeq	r1, r0, r2, lsl #16
     f44:	03003416 	movweq	r3, #1046	; 0x416
     f48:	3b0b3a08 	blcc	2cf770 <__bss_end__+0x2c4cc8>
     f4c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     f50:	17000017 	smladne	r0, r7, r0, r0
     f54:	0111010b 	tsteq	r1, fp, lsl #2
     f58:	13010612 	movwne	r0, #5650	; 0x1612
     f5c:	34180000 	ldrcc	r0, [r8], #-0
     f60:	3a0e0300 	bcc	381b68 <__bss_end__+0x3770c0>
     f64:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f68:	00180213 	andseq	r0, r8, r3, lsl r2
     f6c:	011d1900 	tsteq	sp, r0, lsl #18
     f70:	01111331 	tsteq	r1, r1, lsr r3
     f74:	0b580612 	bleq	16027c4 <__bss_end__+0x15f7d1c>
     f78:	13010b59 	movwne	r0, #7001	; 0x1b59
     f7c:	051a0000 	ldreq	r0, [sl, #-0]
     f80:	02133100 	andseq	r3, r3, #0, 2
     f84:	1b000017 	blne	fe8 <_start-0x7018>
     f88:	13310005 	teqne	r1, #5
     f8c:	00001802 	andeq	r1, r0, r2, lsl #16
     f90:	3100051c 	tstcc	r0, ip, lsl r5
     f94:	000b1c13 	andeq	r1, fp, r3, lsl ip
     f98:	010b1d00 	tsteq	fp, r0, lsl #26
     f9c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     fa0:	341e0000 	ldrcc	r0, [lr], #-0
     fa4:	02133100 	andseq	r3, r3, #0, 2
     fa8:	1f000017 	svcne	0x00000017
     fac:	01018289 	smlabbeq	r1, r9, r2, r8
     fb0:	13310111 	teqne	r1, #1073741828	; 0x40000004
     fb4:	8a200000 	bhi	800fbc <__bss_end__+0x7f6514>
     fb8:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     fbc:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     fc0:	1d210000 	stcne	0, cr0, [r1, #-0]
     fc4:	11133101 	tstne	r3, r1, lsl #2
     fc8:	58061201 	stmdapl	r6, {r0, r9, ip}
     fcc:	000b590b 	andeq	r5, fp, fp, lsl #18
     fd0:	012e2200 	teqeq	lr, r0, lsl #4
     fd4:	0b3a0e03 	bleq	e847e8 <__bss_end__+0xe79d40>
     fd8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     fdc:	0b201349 	bleq	805d08 <__bss_end__+0x7fb260>
     fe0:	00001301 	andeq	r1, r0, r1, lsl #6
     fe4:	3f012e23 	svccc	0x00012e23
     fe8:	3a0e0319 	bcc	381c54 <__bss_end__+0x3771ac>
     fec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     ff0:	11134919 	tstne	r3, r9, lsl r9
     ff4:	40061201 	andmi	r1, r6, r1, lsl #4
     ff8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     ffc:	00001301 	andeq	r1, r0, r1, lsl #6
    1000:	01828924 	orreq	r8, r2, r4, lsr #18
    1004:	31011100 	mrscc	r1, (UNDEF: 17)
    1008:	25000013 	strcs	r0, [r0, #-19]
    100c:	01018289 	smlabbeq	r1, r9, r2, r8
    1010:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1014:	00001301 	andeq	r1, r0, r1, lsl #6
    1018:	03003426 	movweq	r3, #1062	; 0x426
    101c:	3b0b3a0e 	blcc	2cf85c <__bss_end__+0x2c4db4>
    1020:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1024:	27000017 	smladcs	r0, r7, r0, r0
    1028:	13310005 	teqne	r1, #5
    102c:	05280000 	streq	r0, [r8, #-0]!
    1030:	3a0e0300 	bcc	381c38 <__bss_end__+0x377190>
    1034:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1038:	00180213 	andseq	r0, r8, r3, lsl r2
    103c:	00342900 	eorseq	r2, r4, r0, lsl #18
    1040:	13490e03 	movtne	r0, #40451	; 0x9e03
    1044:	18021934 	stmdane	r2, {r2, r4, r5, r8, fp, ip}
    1048:	012a0000 	teqeq	sl, r0
    104c:	01134901 	tsteq	r3, r1, lsl #18
    1050:	2b000013 	blcs	10a4 <_start-0x6f5c>
    1054:	13490021 	movtne	r0, #36897	; 0x9021
    1058:	00000b2f 	andeq	r0, r0, pc, lsr #22
    105c:	0300342c 	movweq	r3, #1068	; 0x42c
    1060:	3b0b3a08 	blcc	2cf888 <__bss_end__+0x2c4de0>
    1064:	1c13490b 	ldcne	9, cr4, [r3], {11}
    1068:	2d000006 	stccs	0, cr0, [r0, #-24]	; 0xffffffe8
    106c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1070:	0b3b0b3a 	bleq	ec3d60 <__bss_end__+0xeb92b8>
    1074:	0b1c1349 	bleq	705da0 <__bss_end__+0x6fb2f8>
    1078:	052e0000 	streq	r0, [lr, #-0]!
    107c:	3a080300 	bcc	201c84 <__bss_end__+0x1f71dc>
    1080:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1084:	00180213 	andseq	r0, r8, r3, lsl r2
    1088:	00182f00 	andseq	r2, r8, r0, lsl #30
    108c:	21300000 	teqcs	r0, r0
    1090:	2f134900 	svccs	0x00134900
    1094:	31000005 	tstcc	r0, r5
    1098:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    109c:	0b3a0e03 	bleq	e848b0 <__bss_end__+0xe79e08>
    10a0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    10a4:	1301193c 	movwne	r1, #6460	; 0x193c
    10a8:	05320000 	ldreq	r0, [r2, #-0]!
    10ac:	00134900 	andseq	r4, r3, r0, lsl #18
    10b0:	002e3300 	eoreq	r3, lr, r0, lsl #6
    10b4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    10b8:	0b3b0b3a 	bleq	ec3da8 <__bss_end__+0xeb9300>
    10bc:	13491927 	movtne	r1, #39207	; 0x9927
    10c0:	0000193c 	andeq	r1, r0, ip, lsr r9
    10c4:	3f012e34 	svccc	0x00012e34
    10c8:	3a0e0319 	bcc	381d34 <__bss_end__+0x37728c>
    10cc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    10d0:	3c134919 	ldccc	9, cr4, [r3], {25}
    10d4:	00130119 	andseq	r0, r3, r9, lsl r1
    10d8:	002e3500 	eoreq	r3, lr, r0, lsl #10
    10dc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    10e0:	0b3b0b3a 	bleq	ec3dd0 <__bss_end__+0xeb9328>
    10e4:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    10e8:	2e360000 	cdpcs	0, 3, cr0, cr6, cr0, {0}
    10ec:	03193f01 	tsteq	r9, #1, 30
    10f0:	3b0b3a0e 	blcc	2cf930 <__bss_end__+0x2c4e88>
    10f4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    10f8:	00193c13 	andseq	r3, r9, r3, lsl ip
    10fc:	11010000 	mrsne	r0, (UNDEF: 1)
    1100:	130e2501 	movwne	r2, #58625	; 0xe501
    1104:	1b0e030b 	blne	381d38 <__bss_end__+0x377290>
    1108:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    110c:	00171006 	andseq	r1, r7, r6
    1110:	00240200 	eoreq	r0, r4, r0, lsl #4
    1114:	0b3e0b0b 	bleq	f83d48 <__bss_end__+0xf792a0>
    1118:	00000803 	andeq	r0, r0, r3, lsl #16
    111c:	0b002403 	bleq	a130 <__FUNCTION__.4285+0xa8>
    1120:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1124:	0400000e 	streq	r0, [r0], #-14
    1128:	0b0b0104 	bleq	2c1540 <__bss_end__+0x2b6a98>
    112c:	0b3b0b3a 	bleq	ec3e1c <__bss_end__+0xeb9374>
    1130:	00001301 	andeq	r1, r0, r1, lsl #6
    1134:	03002805 	movweq	r2, #2053	; 0x805
    1138:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    113c:	00160600 	andseq	r0, r6, r0, lsl #12
    1140:	0b3a0e03 	bleq	e84954 <__bss_end__+0xe79eac>
    1144:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1148:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
    114c:	03193f01 	tsteq	r9, #1, 30
    1150:	3b0b3a0e 	blcc	2cf990 <__bss_end__+0x2c4ee8>
    1154:	1119270b 	tstne	r9, fp, lsl #14
    1158:	40061201 	andmi	r1, r6, r1, lsl #4
    115c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1160:	00001301 	andeq	r1, r0, r1, lsl #6
    1164:	01828908 	orreq	r8, r2, r8, lsl #18
    1168:	31011100 	mrscc	r1, (UNDEF: 17)
    116c:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1170:	01018289 	smlabbeq	r1, r9, r2, r8
    1174:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1178:	00001301 	andeq	r1, r0, r1, lsl #6
    117c:	01828a0a 	orreq	r8, r2, sl, lsl #20
    1180:	91180200 	tstls	r8, r0, lsl #4
    1184:	00001842 	andeq	r1, r0, r2, asr #16
    1188:	3f012e0b 	svccc	0x00012e0b
    118c:	3a0e0319 	bcc	381df8 <__bss_end__+0x377350>
    1190:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1194:	11134919 	tstne	r3, r9, lsl r9
    1198:	40061201 	andmi	r1, r6, r1, lsl #4
    119c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    11a0:	00001301 	andeq	r1, r0, r1, lsl #6
    11a4:	0300050c 	movweq	r0, #1292	; 0x50c
    11a8:	3b0b3a08 	blcc	2cf9d0 <__bss_end__+0x2c4f28>
    11ac:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    11b0:	0d000017 	stceq	0, cr0, [r0, #-92]	; 0xffffffa4
    11b4:	01018289 	smlabbeq	r1, r9, r2, r8
    11b8:	13310111 	teqne	r1, #1073741828	; 0x40000004
    11bc:	340e0000 	strcc	r0, [lr], #-0
    11c0:	3a0e0300 	bcc	381dc8 <__bss_end__+0x377320>
    11c4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    11c8:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    11cc:	0f000018 	svceq	0x00000018
    11d0:	0b0b000f 	bleq	2c1214 <__bss_end__+0x2b676c>
    11d4:	00001349 	andeq	r1, r0, r9, asr #6
    11d8:	49003510 	stmdbmi	r0, {r4, r8, sl, ip, sp}
    11dc:	11000013 	tstne	r0, r3, lsl r0
    11e0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    11e4:	0b3a0e03 	bleq	e849f8 <__bss_end__+0xe79f50>
    11e8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    11ec:	0000193c 	andeq	r1, r0, ip, lsr r9
    11f0:	3f012e12 	svccc	0x00012e12
    11f4:	3a0e0319 	bcc	381e60 <__bss_end__+0x3773b8>
    11f8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    11fc:	01193c19 	tsteq	r9, r9, lsl ip
    1200:	13000013 	movwne	r0, #19
    1204:	13490005 	movtne	r0, #36869	; 0x9005
    1208:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    120c:	03193f01 	tsteq	r9, #1, 30
    1210:	3b0b3a0e 	blcc	2cfa50 <__bss_end__+0x2c4fa8>
    1214:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1218:	01193c13 	tsteq	r9, r3, lsl ip
    121c:	15000013 	strne	r0, [r0, #-19]
    1220:	13490026 	movtne	r0, #36902	; 0x9026
    1224:	35160000 	ldrcc	r0, [r6, #-0]
    1228:	00000000 	andeq	r0, r0, r0
    122c:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    1230:	030b130e 	movweq	r1, #45838	; 0xb30e
    1234:	110e1b0e 	tstne	lr, lr, lsl #22
    1238:	10061201 	andne	r1, r6, r1, lsl #4
    123c:	02000017 	andeq	r0, r0, #23
    1240:	0b0b0024 	bleq	2c12d8 <__bss_end__+0x2b6830>
    1244:	0e030b3e 	vmoveq.16	d3[0], r0
    1248:	24030000 	strcs	r0, [r3], #-0
    124c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1250:	0008030b 	andeq	r0, r8, fp, lsl #6
    1254:	01040400 	tsteq	r4, r0, lsl #8
    1258:	0b3a0b0b 	bleq	e83e8c <__bss_end__+0xe793e4>
    125c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1260:	28050000 	stmdacs	r5, {}	; <UNPREDICTABLE>
    1264:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    1268:	0600000d 	streq	r0, [r0], -sp
    126c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1270:	0b3b0b3a 	bleq	ec3f60 <__bss_end__+0xeb94b8>
    1274:	00001349 	andeq	r1, r0, r9, asr #6
    1278:	3f012e07 	svccc	0x00012e07
    127c:	3a0e0319 	bcc	381ee8 <__bss_end__+0x377440>
    1280:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1284:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1288:	97184006 	ldrls	r4, [r8, -r6]
    128c:	13011942 	movwne	r1, #6466	; 0x1942
    1290:	05080000 	streq	r0, [r8, #-0]
    1294:	3a080300 	bcc	201e9c <__bss_end__+0x1f73f4>
    1298:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    129c:	00170213 	andseq	r0, r7, r3, lsl r2
    12a0:	00340900 	eorseq	r0, r4, r0, lsl #18
    12a4:	0b3a0e03 	bleq	e84ab8 <__bss_end__+0xe7a010>
    12a8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    12ac:	00001702 	andeq	r1, r0, r2, lsl #14
    12b0:	0182890a 	orreq	r8, r2, sl, lsl #18
    12b4:	31011101 	tstcc	r1, r1, lsl #2
    12b8:	00130113 	andseq	r0, r3, r3, lsl r1
    12bc:	828a0b00 	addhi	r0, sl, #0, 22
    12c0:	18020001 	stmdane	r2, {r0}
    12c4:	00184291 	mulseq	r8, r1, r2
    12c8:	82890c00 	addhi	r0, r9, #0, 24
    12cc:	01110101 	tsteq	r1, r1, lsl #2
    12d0:	00001331 	andeq	r1, r0, r1, lsr r3
    12d4:	0b000f0d 	bleq	4f10 <_start-0x30f0>
    12d8:	0013490b 	andseq	r4, r3, fp, lsl #18
    12dc:	00350e00 	eorseq	r0, r5, r0, lsl #28
    12e0:	00001349 	andeq	r1, r0, r9, asr #6
    12e4:	3f012e0f 	svccc	0x00012e0f
    12e8:	3a0e0319 	bcc	381f54 <__bss_end__+0x3774ac>
    12ec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    12f0:	11134919 	tstne	r3, r9, lsl r9
    12f4:	40061201 	andmi	r1, r6, r1, lsl #4
    12f8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    12fc:	00001301 	andeq	r1, r0, r1, lsl #6
    1300:	03003410 	movweq	r3, #1040	; 0x410
    1304:	3b0b3a08 	blcc	2cfb2c <__bss_end__+0x2c5084>
    1308:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    130c:	11000017 	tstne	r0, r7, lsl r0
    1310:	00018289 	andeq	r8, r1, r9, lsl #5
    1314:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1318:	05120000 	ldreq	r0, [r2, #-0]
    131c:	3a0e0300 	bcc	381f24 <__bss_end__+0x37747c>
    1320:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1324:	00170213 	andseq	r0, r7, r3, lsl r2
    1328:	012e1300 	teqeq	lr, r0, lsl #6
    132c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1330:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1334:	13491927 	movtne	r1, #39207	; 0x9927
    1338:	06120111 			; <UNDEFINED> instruction: 0x06120111
    133c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1340:	00130119 	andseq	r0, r3, r9, lsl r1
    1344:	00051400 	andeq	r1, r5, r0, lsl #8
    1348:	0b3a0e03 	bleq	e84b5c <__bss_end__+0xe7a0b4>
    134c:	1349053b 	movtne	r0, #38203	; 0x953b
    1350:	00001702 	andeq	r1, r0, r2, lsl #14
    1354:	3f012e15 	svccc	0x00012e15
    1358:	3a0e0319 	bcc	381fc4 <__bss_end__+0x37751c>
    135c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1360:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1364:	97184006 	ldrls	r4, [r8, -r6]
    1368:	13011942 	movwne	r1, #6466	; 0x1942
    136c:	05160000 	ldreq	r0, [r6, #-0]
    1370:	3a080300 	bcc	201f78 <__bss_end__+0x1f74d0>
    1374:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1378:	00170213 	andseq	r0, r7, r3, lsl r2
    137c:	00341700 	eorseq	r1, r4, r0, lsl #14
    1380:	0b3a0e03 	bleq	e84b94 <__bss_end__+0xe7a0ec>
    1384:	1349053b 	movtne	r0, #38203	; 0x953b
    1388:	00001702 	andeq	r1, r0, r2, lsl #14
    138c:	11010b18 	tstne	r1, r8, lsl fp
    1390:	01061201 	tsteq	r6, r1, lsl #4
    1394:	19000013 	stmdbne	r0, {r0, r1, r4}
    1398:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    139c:	0b3b0b3a 	bleq	ec408c <__bss_end__+0xeb95e4>
    13a0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    13a4:	00001802 	andeq	r1, r0, r2, lsl #16
    13a8:	3f012e1a 	svccc	0x00012e1a
    13ac:	3a0e0319 	bcc	382018 <__bss_end__+0x377570>
    13b0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    13b4:	3c134919 	ldccc	9, cr4, [r3], {25}
    13b8:	00130119 	andseq	r0, r3, r9, lsl r1
    13bc:	00051b00 	andeq	r1, r5, r0, lsl #22
    13c0:	00001349 	andeq	r1, r0, r9, asr #6
    13c4:	4900261c 	stmdbmi	r0, {r2, r3, r4, r9, sl, sp}
    13c8:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    13cc:	00000035 	andeq	r0, r0, r5, lsr r0
    13d0:	3f012e1e 	svccc	0x00012e1e
    13d4:	3a0e0319 	bcc	382040 <__bss_end__+0x377598>
    13d8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    13dc:	01193c19 	tsteq	r9, r9, lsl ip
    13e0:	1f000013 	svcne	0x00000013
    13e4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    13e8:	0b3a0e03 	bleq	e84bfc <__bss_end__+0xe7a154>
    13ec:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    13f0:	0000193c 	andeq	r1, r0, ip, lsr r9
    13f4:	01110100 	tsteq	r1, r0, lsl #2
    13f8:	0b130e25 	bleq	4c4c94 <__bss_end__+0x4ba1ec>
    13fc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1400:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1404:	00001710 	andeq	r1, r0, r0, lsl r7
    1408:	0b002402 	bleq	a418 <__FUNCTION__.4296+0xf0>
    140c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1410:	0300000e 	movweq	r0, #14
    1414:	0b0b0024 	bleq	2c14ac <__bss_end__+0x2b6a04>
    1418:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    141c:	0f040000 	svceq	0x00040000
    1420:	000b0b00 	andeq	r0, fp, r0, lsl #22
    1424:	000f0500 	andeq	r0, pc, r0, lsl #10
    1428:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    142c:	16060000 	strne	r0, [r6], -r0
    1430:	3a0e0300 	bcc	382038 <__bss_end__+0x377590>
    1434:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1438:	07000013 	smladeq	r0, r3, r0, r0
    143c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1440:	0b3a0e03 	bleq	e84c54 <__bss_end__+0xe7a1ac>
    1444:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1448:	01111349 	tsteq	r1, r9, asr #6
    144c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1450:	00194297 	mulseq	r9, r7, r2
    1454:	00050800 	andeq	r0, r5, r0, lsl #16
    1458:	0b3a0803 	bleq	e8346c <__bss_end__+0xe789c4>
    145c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1460:	00001802 	andeq	r1, r0, r2, lsl #16
    1464:	03000509 	movweq	r0, #1289	; 0x509
    1468:	3b0b3a08 	blcc	2cfc90 <__bss_end__+0x2c51e8>
    146c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1470:	0a000017 	beq	14d4 <_start-0x6b2c>
    1474:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1478:	0b3b0b3a 	bleq	ec4168 <__bss_end__+0xeb96c0>
    147c:	17021349 	strne	r1, [r2, -r9, asr #6]
    1480:	340b0000 	strcc	r0, [fp], #-0
    1484:	3a080300 	bcc	20208c <__bss_end__+0x1f75e4>
    1488:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    148c:	00180213 	andseq	r0, r8, r3, lsl r2
    1490:	11010000 	mrsne	r0, (UNDEF: 1)
    1494:	130e2501 	movwne	r2, #58625	; 0xe501
    1498:	1b0e030b 	blne	3820cc <__bss_end__+0x377624>
    149c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    14a0:	00171006 	andseq	r1, r7, r6
    14a4:	00240200 	eoreq	r0, r4, r0, lsl #4
    14a8:	0b3e0b0b 	bleq	f840dc <__bss_end__+0xf79634>
    14ac:	00000803 	andeq	r0, r0, r3, lsl #16
    14b0:	03001603 	movweq	r1, #1539	; 0x603
    14b4:	3b0b3a0e 	blcc	2cfcf4 <__bss_end__+0x2c524c>
    14b8:	0013490b 	andseq	r4, r3, fp, lsl #18
    14bc:	00240400 	eoreq	r0, r4, r0, lsl #8
    14c0:	0b3e0b0b 	bleq	f840f4 <__bss_end__+0xf7964c>
    14c4:	00000e03 	andeq	r0, r0, r3, lsl #28
    14c8:	0b000f05 	bleq	50e4 <_start-0x2f1c>
    14cc:	0600000b 	streq	r0, [r0], -fp
    14d0:	0b0b0113 	bleq	2c1924 <__bss_end__+0x2b6e7c>
    14d4:	0b3b0b3a 	bleq	ec41c4 <__bss_end__+0xeb971c>
    14d8:	00001301 	andeq	r1, r0, r1, lsl #6
    14dc:	03000d07 	movweq	r0, #3335	; 0xd07
    14e0:	3b0b3a08 	blcc	2cfd08 <__bss_end__+0x2c5260>
    14e4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    14e8:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    14ec:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    14f0:	0b3b0b3a 	bleq	ec41e0 <__bss_end__+0xeb9738>
    14f4:	0b381349 	bleq	e06220 <__bss_end__+0xdfb778>
    14f8:	04090000 	streq	r0, [r9], #-0
    14fc:	3a0b0b01 	bcc	2c4108 <__bss_end__+0x2b9660>
    1500:	010b3b0b 	tsteq	fp, fp, lsl #22
    1504:	0a000013 	beq	1558 <_start-0x6aa8>
    1508:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    150c:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1510:	3f012e0b 	svccc	0x00012e0b
    1514:	3a0e0319 	bcc	382180 <__bss_end__+0x3776d8>
    1518:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    151c:	11134919 	tstne	r3, r9, lsl r9
    1520:	40061201 	andmi	r1, r6, r1, lsl #4
    1524:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1528:	00001301 	andeq	r1, r0, r1, lsl #6
    152c:	0300340c 	movweq	r3, #1036	; 0x40c
    1530:	3b0b3a08 	blcc	2cfd58 <__bss_end__+0x2c52b0>
    1534:	1c13490b 	ldcne	9, cr4, [r3], {11}
    1538:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
    153c:	01018289 	smlabbeq	r1, r9, r2, r8
    1540:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1544:	8a0e0000 	bhi	38154c <__bss_end__+0x376aa4>
    1548:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    154c:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    1550:	0f0f0000 	svceq	0x000f0000
    1554:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1558:	10000013 	andne	r0, r0, r3, lsl r0
    155c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1560:	0b3a0e03 	bleq	e84d74 <__bss_end__+0xe7a2cc>
    1564:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1568:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    156c:	05110000 	ldreq	r0, [r1, #-0]
    1570:	00134900 	andseq	r4, r3, r0, lsl #18
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	00000000 	andeq	r0, r0, r0
       4:	0000000f 	andeq	r0, r0, pc
       8:	0f500001 	svceq	0x00500001
       c:	a4000000 	strge	r0, [r0], #-0
      10:	01000000 	mrseq	r0, (UNDEF: 0)
      14:	00a45500 	adceq	r5, r4, r0, lsl #10
      18:	00b80000 	adcseq	r0, r8, r0
      1c:	00040000 	andeq	r0, r4, r0
      20:	9f5001f3 	svcls	0x005001f3
	...
      2c:	0000000c 	andeq	r0, r0, ip
      30:	0000000f 	andeq	r0, r0, pc
      34:	0f500001 	svceq	0x00500001
      38:	a4000000 	strge	r0, [r0], #-0
      3c:	01000000 	mrseq	r0, (UNDEF: 0)
      40:	00a45500 	adceq	r5, r4, r0, lsl #10
      44:	00b80000 	adcseq	r0, r8, r0
      48:	00040000 	andeq	r0, r4, r0
      4c:	9f5001f3 	svcls	0x005001f3
	...
      58:	00000014 	andeq	r0, r0, r4, lsl r0
      5c:	00000070 	andeq	r0, r0, r0, ror r0
      60:	00540001 	subseq	r0, r4, r1
      64:	00000000 	andeq	r0, r0, r0
      68:	dc000000 	stcle	0, cr0, [r0], {-0}
      6c:	ec000000 	stc	0, cr0, [r0], {-0}
      70:	02000000 	andeq	r0, r0, #0
      74:	ec9f3000 	ldc	0, cr3, [pc], {0}
      78:	b0000000 	andlt	r0, r0, r0
      7c:	01000001 	tsteq	r0, r1
      80:	00005500 	andeq	r5, r0, r0, lsl #10
      84:	00000000 	andeq	r0, r0, r0
      88:	00dc0000 	sbcseq	r0, ip, r0
      8c:	00ec0000 	rsceq	r0, ip, r0
      90:	00020000 	andeq	r0, r2, r0
      94:	00ec9f30 	rsceq	r9, ip, r0, lsr pc
      98:	011c0000 	tsteq	ip, r0
      9c:	00010000 	andeq	r0, r1, r0
      a0:	00000054 	andeq	r0, r0, r4, asr r0
      a4:	00000000 	andeq	r0, r0, r0
      a8:	0000f800 	andeq	pc, r0, r0, lsl #16
      ac:	00010400 	andeq	r0, r1, r0, lsl #8
      b0:	50000100 	andpl	r0, r0, r0, lsl #2
      b4:	00000104 	andeq	r0, r0, r4, lsl #2
      b8:	00000107 	andeq	r0, r0, r7, lsl #2
      bc:	00510001 	subseq	r0, r1, r1
      c0:	00000000 	andeq	r0, r0, r0
      c4:	2c000000 	stccs	0, cr0, [r0], {-0}
      c8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
      cc:	01000000 	mrseq	r0, (UNDEF: 0)
      d0:	00385000 	eorseq	r5, r8, r0
      d4:	00480000 	subeq	r0, r8, r0
      d8:	00010000 	andeq	r0, r1, r0
      dc:	00004855 	andeq	r4, r0, r5, asr r8
      e0:	00005800 	andeq	r5, r0, r0, lsl #16
      e4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
      f4:	0000000b 	andeq	r0, r0, fp
      f8:	0b500001 	bleq	1400104 <__bss_end__+0x13f565c>
      fc:	14000000 	strne	r0, [r0], #-0
     100:	01000000 	mrseq	r0, (UNDEF: 0)
     104:	00005400 	andeq	r5, r0, r0, lsl #8
	...
     110:	00100000 	andseq	r0, r0, r0
     114:	00010000 	andeq	r0, r1, r0
     118:	00001050 	andeq	r1, r0, r0, asr r0
     11c:	00003400 	andeq	r3, r0, r0, lsl #8
     120:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     130:	00000004 	andeq	r0, r0, r4
     134:	04500001 	ldrbeq	r0, [r0], #-1
     138:	0c000000 	stceq	0, cr0, [r0], {-0}
     13c:	03000000 	movweq	r0, #0
     140:	9f307000 	svcls	0x00307000
     144:	0000000c 	andeq	r0, r0, ip
     148:	00000014 	andeq	r0, r0, r4, lsl r0
     14c:	01f30004 	mvnseq	r0, r4
     150:	00009f50 	andeq	r9, r0, r0, asr pc
     154:	00000000 	andeq	r0, r0, r0
     158:	00140000 	andseq	r0, r4, r0
     15c:	00200000 	eoreq	r0, r0, r0
     160:	00010000 	andeq	r0, r1, r0
     164:	00002050 	andeq	r2, r0, r0, asr r0
     168:	00002c00 	andeq	r2, r0, r0, lsl #24
     16c:	70000300 	andvc	r0, r0, r0, lsl #6
     170:	002c9f01 	eoreq	r9, ip, r1, lsl #30
     174:	00400000 	subeq	r0, r0, r0
     178:	00010000 	andeq	r0, r1, r0
     17c:	00000050 	andeq	r0, r0, r0, asr r0
     180:	00000000 	andeq	r0, r0, r0
     184:	00001400 	andeq	r1, r0, r0, lsl #8
     188:	00001800 	andeq	r1, r0, r0, lsl #16
     18c:	51000100 	mrspl	r0, (UNDEF: 16)
     190:	00000018 	andeq	r0, r0, r8, lsl r0
     194:	00000040 	andeq	r0, r0, r0, asr #32
     198:	01f30004 	mvnseq	r0, r4
     19c:	00009f51 	andeq	r9, r0, r1, asr pc
     1a0:	00000000 	andeq	r0, r0, r0
     1a4:	00400000 	subeq	r0, r0, r0
     1a8:	00600000 	rsbeq	r0, r0, r0
     1ac:	00010000 	andeq	r0, r1, r0
     1b0:	00006050 	andeq	r6, r0, r0, asr r0
     1b4:	00006c00 	andeq	r6, r0, r0, lsl #24
     1b8:	71000300 	mrsvc	r0, LR_irq
     1bc:	006c9f01 	rsbeq	r9, ip, r1, lsl #30
     1c0:	00740000 	rsbseq	r0, r4, r0
     1c4:	00010000 	andeq	r0, r1, r0
     1c8:	00007451 	andeq	r7, r0, r1, asr r4
     1cc:	00008000 	andeq	r8, r0, r0
     1d0:	71000300 	mrsvc	r0, LR_irq
     1d4:	00009f01 	andeq	r9, r0, r1, lsl #30
     1d8:	00000000 	andeq	r0, r0, r0
     1dc:	00400000 	subeq	r0, r0, r0
     1e0:	00500000 	subseq	r0, r0, r0
     1e4:	00010000 	andeq	r0, r1, r0
     1e8:	00005051 	andeq	r5, r0, r1, asr r0
     1ec:	00008000 	andeq	r8, r0, r0
     1f0:	f3000400 	vshl.u8	d0, d0, d0
     1f4:	009f5101 	addseq	r5, pc, r1, lsl #2
     1f8:	00000000 	andeq	r0, r0, r0
     1fc:	40000000 	andmi	r0, r0, r0
     200:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     204:	01000000 	mrseq	r0, (UNDEF: 0)
     208:	00585200 	subseq	r5, r8, r0, lsl #4
     20c:	00640000 	rsbeq	r0, r4, r0
     210:	00010000 	andeq	r0, r1, r0
     214:	00006452 	andeq	r6, r0, r2, asr r4
     218:	00006800 	andeq	r6, r0, r0, lsl #16
     21c:	72000300 	andvc	r0, r0, #0, 6
     220:	00689f01 	rsbeq	r9, r8, r1, lsl #30
     224:	00800000 	addeq	r0, r0, r0
     228:	00010000 	andeq	r0, r1, r0
     22c:	00000052 	andeq	r0, r0, r2, asr r0
     230:	00000000 	andeq	r0, r0, r0
     234:	00004000 	andeq	r4, r0, r0
     238:	00005400 	andeq	r5, r0, r0, lsl #8
     23c:	53000100 	movwpl	r0, #256	; 0x100
     240:	00000054 	andeq	r0, r0, r4, asr r0
     244:	00000078 	andeq	r0, r0, r8, ror r0
     248:	00530001 	subseq	r0, r3, r1
     24c:	00000000 	andeq	r0, r0, r0
     250:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     254:	60000000 	andvs	r0, r0, r0
     258:	01000000 	mrseq	r0, (UNDEF: 0)
     25c:	00605c00 	rsbeq	r5, r0, r0, lsl #24
     260:	00800000 	addeq	r0, r0, r0
     264:	000a0000 	andeq	r0, sl, r0
     268:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
     26c:	231c5301 	tstcs	ip, #67108864	; 0x4000000
     270:	00009f01 	andeq	r9, r0, r1, lsl #30
     274:	00000000 	andeq	r0, r0, r0
     278:	00800000 	addeq	r0, r0, r0
     27c:	00a40000 	adceq	r0, r4, r0
     280:	00010000 	andeq	r0, r1, r0
     284:	0000a450 	andeq	sl, r0, r0, asr r4
     288:	00011800 	andeq	r1, r1, r0, lsl #16
     28c:	70000300 	andvc	r0, r0, r0, lsl #6
     290:	01189f02 	tsteq	r8, r2, lsl #30
     294:	021c0000 	andseq	r0, ip, #0
     298:	00040000 	andeq	r0, r4, r0
     29c:	9f5001f3 	svcls	0x005001f3
	...
     2a8:	00000080 	andeq	r0, r0, r0, lsl #1
     2ac:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     2b0:	f0510001 			; <UNDEFINED> instruction: 0xf0510001
     2b4:	60000000 	andvs	r0, r0, r0
     2b8:	01000001 	tsteq	r0, r1
     2bc:	01605500 	cmneq	r0, r0, lsl #10
     2c0:	01680000 	cmneq	r8, r0
     2c4:	00010000 	andeq	r0, r1, r0
     2c8:	00016851 	andeq	r6, r1, r1, asr r8
     2cc:	00018800 	andeq	r8, r1, r0, lsl #16
     2d0:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     2d4:	00000188 	andeq	r0, r0, r8, lsl #3
     2d8:	0000019c 	muleq	r0, ip, r1
     2dc:	9c510001 	mrrcls	0, 0, r0, r1, cr1
     2e0:	bc000001 	stclt	0, cr0, [r0], {1}
     2e4:	01000001 	tsteq	r0, r1
     2e8:	01bc5500 			; <UNDEFINED> instruction: 0x01bc5500
     2ec:	01bf0000 			; <UNDEFINED> instruction: 0x01bf0000
     2f0:	00010000 	andeq	r0, r1, r0
     2f4:	0001bf51 	andeq	fp, r1, r1, asr pc
     2f8:	00020000 	andeq	r0, r2, r0
     2fc:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     300:	00000200 	andeq	r0, r0, r0, lsl #4
     304:	0000021c 	andeq	r0, r0, ip, lsl r2
     308:	01f30004 	mvnseq	r0, r4
     30c:	00009f51 	andeq	r9, r0, r1, asr pc
     310:	00000000 	andeq	r0, r0, r0
     314:	00800000 	addeq	r0, r0, r0
     318:	00940000 	addseq	r0, r4, r0
     31c:	00010000 	andeq	r0, r1, r0
     320:	00009452 	andeq	r9, r0, r2, asr r4
     324:	00020000 	andeq	r0, r2, r0
     328:	54000100 	strpl	r0, [r0], #-256	; 0x100
     32c:	00000200 	andeq	r0, r0, r0, lsl #4
     330:	0000021c 	andeq	r0, r0, ip, lsl r2
     334:	01f30004 	mvnseq	r0, r4
     338:	00009f52 	andeq	r9, r0, r2, asr pc
     33c:	00000000 	andeq	r0, r0, r0
     340:	00800000 	addeq	r0, r0, r0
     344:	01000000 	mrseq	r0, (UNDEF: 0)
     348:	00010000 	andeq	r0, r1, r0
     34c:	00010453 	andeq	r0, r1, r3, asr r4
     350:	00010800 	andeq	r0, r1, r0, lsl #16
     354:	53000100 	movwpl	r0, #256	; 0x100
     358:	00000160 	andeq	r0, r0, r0, ror #2
     35c:	00000168 	andeq	r0, r0, r8, ror #2
     360:	68530001 	ldmdavs	r3, {r0}^
     364:	88000001 	stmdahi	r0, {r0}
     368:	04000001 	streq	r0, [r0], #-1
     36c:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
     370:	0001889f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
     374:	00019000 	andeq	r9, r1, r0
     378:	53000100 	movwpl	r0, #256	; 0x100
     37c:	00000190 	muleq	r0, r0, r1
     380:	00000194 	muleq	r0, r4, r1
     384:	945c0001 	ldrbls	r0, [ip], #-1
     388:	9c000001 	stcls	0, cr0, [r0], {1}
     38c:	01000001 	tsteq	r0, r1
     390:	019c5300 	orrseq	r5, ip, r0, lsl #6
     394:	01bc0000 			; <UNDEFINED> instruction: 0x01bc0000
     398:	00040000 	andeq	r0, r4, r0
     39c:	9f5301f3 	svcls	0x005301f3
     3a0:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     3a4:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
     3a8:	bf530001 	svclt	0x00530001
     3ac:	d8000001 	stmdale	r0, {r0}
     3b0:	04000001 	streq	r0, [r0], #-1
     3b4:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
     3b8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     3bc:	00000000 	andeq	r0, r0, r0
     3c0:	00008000 	andeq	r8, r0, r0
     3c4:	00009c00 	andeq	r9, r0, r0, lsl #24
     3c8:	91000200 	mrsls	r0, R8_usr
     3cc:	00009c00 	andeq	r9, r0, r0, lsl #24
     3d0:	0001bf00 	andeq	fp, r1, r0, lsl #30
     3d4:	52000100 	andpl	r0, r0, #0, 2
     3d8:	000001d8 	ldrdeq	r0, [r0], -r8
     3dc:	000001e3 	andeq	r0, r0, r3, ror #3
     3e0:	00520001 	subseq	r0, r2, r1
     3e4:	00000000 	andeq	r0, r0, r0
     3e8:	9c000000 	stcls	0, cr0, [r0], {-0}
     3ec:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     3f0:	01000001 	tsteq	r0, r1
     3f4:	01185d00 	tsteq	r8, r0, lsl #26
     3f8:	011c0000 	tsteq	ip, r0
     3fc:	00010000 	andeq	r0, r1, r0
     400:	00011c53 	andeq	r1, r1, r3, asr ip
     404:	00012000 	andeq	r2, r1, r0
     408:	51000100 	mrspl	r0, (UNDEF: 16)
     40c:	00000120 	andeq	r0, r0, r0, lsr #2
     410:	00000160 	andeq	r0, r0, r0, ror #2
     414:	60530001 	subsvs	r0, r3, r1
     418:	68000001 	stmdavs	r0, {r0}
     41c:	01000001 	tsteq	r0, r1
     420:	01685d00 	cmneq	r8, r0, lsl #26
     424:	016c0000 	cmneq	ip, r0
     428:	00010000 	andeq	r0, r1, r0
     42c:	00016c5e 	andeq	r6, r1, lr, asr ip
     430:	00018800 	andeq	r8, r1, r0, lsl #16
     434:	53000100 	movwpl	r0, #256	; 0x100
     438:	00000188 	andeq	r0, r0, r8, lsl #3
     43c:	00000190 	muleq	r0, r0, r1
     440:	a1910004 	orrsge	r0, r1, r4
     444:	01909f7f 	orrseq	r9, r0, pc, ror pc
     448:	01940000 	orrseq	r0, r4, r0
     44c:	00010000 	andeq	r0, r1, r0
     450:	00019453 	andeq	r9, r1, r3, asr r4
     454:	00019c00 	andeq	r9, r1, r0, lsl #24
     458:	5d000100 	stfpls	f0, [r0, #-0]
     45c:	0000019c 	muleq	r0, ip, r1
     460:	000001a0 	andeq	r0, r0, r0, lsr #3
     464:	a05e0001 	subsge	r0, lr, r1
     468:	bc000001 	stclt	0, cr0, [r0], {1}
     46c:	01000001 	tsteq	r0, r1
     470:	01bc5300 			; <UNDEFINED> instruction: 0x01bc5300
     474:	01d80000 	bicseq	r0, r8, r0
     478:	00010000 	andeq	r0, r1, r0
     47c:	0001d85d 	andeq	sp, r1, sp, asr r8
     480:	0001e300 	andeq	lr, r1, r0, lsl #6
     484:	53000100 	movwpl	r0, #256	; 0x100
	...
     490:	000000a0 	andeq	r0, r0, r0, lsr #1
     494:	000000ec 	andeq	r0, r0, ip, ror #1
     498:	ec5c0001 	mrrc	0, 0, r0, ip, cr1
     49c:	00000000 	andeq	r0, r0, r0
     4a0:	01000001 	tsteq	r0, r1
     4a4:	01005300 	mrseq	r5, LR_irq
     4a8:	01040000 	mrseq	r0, (UNDEF: 4)
     4ac:	00010000 	andeq	r0, r1, r0
     4b0:	0001045c 	andeq	r0, r1, ip, asr r4
     4b4:	00010800 	andeq	r0, r1, r0, lsl #16
     4b8:	53000100 	movwpl	r0, #256	; 0x100
     4bc:	00000108 	andeq	r0, r0, r8, lsl #2
     4c0:	00000118 	andeq	r0, r0, r8, lsl r1
     4c4:	185c0001 	ldmdane	ip, {r0}^
     4c8:	1c000001 	stcne	0, cr0, [r0], {1}
     4cc:	01000001 	tsteq	r0, r1
     4d0:	011c5000 	tsteq	ip, r0
     4d4:	013c0000 	teqeq	ip, r0
     4d8:	00010000 	andeq	r0, r1, r0
     4dc:	0001445c 	andeq	r4, r1, ip, asr r4
     4e0:	00015800 	andeq	r5, r1, r0, lsl #16
     4e4:	50000100 	andpl	r0, r0, r0, lsl #2
     4e8:	00000158 	andeq	r0, r0, r8, asr r1
     4ec:	00000160 	andeq	r0, r0, r0, ror #2
     4f0:	605c0001 	subsvs	r0, ip, r1
     4f4:	68000001 	stmdavs	r0, {r0}
     4f8:	01000001 	tsteq	r0, r1
     4fc:	01685300 	cmneq	r8, r0, lsl #6
     500:	01780000 	cmneq	r8, r0
     504:	00010000 	andeq	r0, r1, r0
     508:	0001785c 	andeq	r7, r1, ip, asr r8
     50c:	00018000 	andeq	r8, r1, r0
     510:	7c000500 	cfstr32vc	mvfx0, [r0], {-0}
     514:	9f253400 	svcls	0x00253400
     518:	00000180 	andeq	r0, r0, r0, lsl #3
     51c:	00000188 	andeq	r0, r0, r8, lsl #3
     520:	885c0001 	ldmdahi	ip, {r0}^
     524:	90000001 	andls	r0, r0, r1
     528:	01000001 	tsteq	r0, r1
     52c:	01905300 	orrseq	r5, r0, r0, lsl #6
     530:	01940000 	orrseq	r0, r4, r0
     534:	00010000 	andeq	r0, r1, r0
     538:	0001945c 	andeq	r9, r1, ip, asr r4
     53c:	00019c00 	andeq	r9, r1, r0, lsl #24
     540:	53000100 	movwpl	r0, #256	; 0x100
     544:	0000019c 	muleq	r0, ip, r1
     548:	000001ac 	andeq	r0, r0, ip, lsr #3
     54c:	ac5c0001 	mrrcge	0, 0, r0, ip, cr1
     550:	b4000001 	strlt	r0, [r0], #-1
     554:	05000001 	streq	r0, [r0, #-1]
     558:	31007c00 	tstcc	r0, r0, lsl #24
     55c:	01b49f25 			; <UNDEFINED> instruction: 0x01b49f25
     560:	01bc0000 			; <UNDEFINED> instruction: 0x01bc0000
     564:	00010000 	andeq	r0, r1, r0
     568:	0001bc5c 	andeq	fp, r1, ip, asr ip
     56c:	0001bf00 	andeq	fp, r1, r0, lsl #30
     570:	53000100 	movwpl	r0, #256	; 0x100
     574:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
     578:	000001d8 	ldrdeq	r0, [r0], -r8
     57c:	01f30004 	mvnseq	r0, r4
     580:	01d89f53 	bicseq	r9, r8, r3, asr pc
     584:	01e30000 	mvneq	r0, r0
     588:	00010000 	andeq	r0, r1, r0
     58c:	0000005c 	andeq	r0, r0, ip, asr r0
     590:	00000000 	andeq	r0, r0, r0
     594:	0000ec00 	andeq	lr, r0, r0, lsl #24
     598:	0000fc00 	andeq	pc, r0, r0, lsl #24
     59c:	30000200 	andcc	r0, r0, r0, lsl #4
     5a0:	0000fc9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
     5a4:	00010400 	andeq	r0, r1, r0, lsl #8
     5a8:	31000200 	mrscc	r0, R8_usr
     5ac:	0001049f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
     5b0:	00010800 	andeq	r0, r1, r0, lsl #16
     5b4:	30000200 	andcc	r0, r0, r0, lsl #4
     5b8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     5bc:	00000000 	andeq	r0, r0, r0
     5c0:	00021c00 	andeq	r1, r2, r0, lsl #24
     5c4:	00022b00 	andeq	r2, r2, r0, lsl #22
     5c8:	50000100 	andpl	r0, r0, r0, lsl #2
     5cc:	0000022b 	andeq	r0, r0, fp, lsr #4
     5d0:	00000244 	andeq	r0, r0, r4, asr #4
     5d4:	01f30004 	mvnseq	r0, r4
     5d8:	02449f50 	subeq	r9, r4, #80, 30	; 0x140
     5dc:	02700000 	rsbseq	r0, r0, #0
     5e0:	00010000 	andeq	r0, r1, r0
     5e4:	00000050 	andeq	r0, r0, r0, asr r0
     5e8:	00000000 	andeq	r0, r0, r0
     5ec:	00021c00 	andeq	r1, r2, r0, lsl #24
     5f0:	00022b00 	andeq	r2, r2, r0, lsl #22
     5f4:	51000100 	mrspl	r0, (UNDEF: 16)
     5f8:	0000022b 	andeq	r0, r0, fp, lsr #4
     5fc:	00000244 	andeq	r0, r0, r4, asr #4
     600:	01f30004 	mvnseq	r0, r4
     604:	02449f51 	subeq	r9, r4, #324	; 0x144
     608:	02700000 	rsbseq	r0, r0, #0
     60c:	00010000 	andeq	r0, r1, r0
     610:	00000051 	andeq	r0, r0, r1, asr r0
     614:	00000000 	andeq	r0, r0, r0
     618:	00027000 	andeq	r7, r2, r0
     61c:	00029c00 	andeq	r9, r2, r0, lsl #24
     620:	50000100 	andpl	r0, r0, r0, lsl #2
     624:	0000029c 	muleq	r0, ip, r2
     628:	000004e4 	andeq	r0, r0, r4, ror #9
     62c:	e45a0001 	ldrb	r0, [sl], #-1
     630:	f8000004 			; <UNDEFINED> instruction: 0xf8000004
     634:	04000004 	streq	r0, [r0], #-4
     638:	5001f300 	andpl	pc, r1, r0, lsl #6
     63c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     640:	00000000 	andeq	r0, r0, r0
     644:	00027000 	andeq	r7, r2, r0
     648:	00028400 	andeq	r8, r2, r0, lsl #8
     64c:	51000100 	mrspl	r0, (UNDEF: 16)
     650:	00000284 	andeq	r0, r0, r4, lsl #5
     654:	0000029c 	muleq	r0, ip, r2
     658:	01710003 	cmneq	r1, r3
     65c:	00029c9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
     660:	0004f800 	andeq	pc, r4, r0, lsl #16
     664:	f3000400 	vshl.u8	d0, d0, d0
     668:	009f5101 	addseq	r5, pc, r1, lsl #2
     66c:	00000000 	andeq	r0, r0, r0
     670:	70000000 	andvc	r0, r0, r0
     674:	a4000002 	strge	r0, [r0], #-2
     678:	01000002 	tsteq	r0, r2
     67c:	02a45200 	adceq	r5, r4, #0, 4
     680:	02cc0000 	sbceq	r0, ip, #0
     684:	00010000 	andeq	r0, r1, r0
     688:	0002cc52 	andeq	ip, r2, r2, asr ip
     68c:	00049400 	andeq	r9, r4, r0, lsl #8
     690:	56000100 	strpl	r0, [r0], -r0, lsl #2
     694:	00000494 	muleq	r0, r4, r4
     698:	000004f8 	strdeq	r0, [r0], -r8
     69c:	00520001 	subseq	r0, r2, r1
     6a0:	00000000 	andeq	r0, r0, r0
     6a4:	70000000 	andvc	r0, r0, r0
     6a8:	8c000002 	stchi	0, cr0, [r0], {2}
     6ac:	01000002 	tsteq	r0, r2
     6b0:	00005300 	andeq	r5, r0, r0, lsl #6
     6b4:	00000000 	andeq	r0, r0, r0
     6b8:	02800000 	addeq	r0, r0, #0
     6bc:	029c0000 	addseq	r0, ip, #0
     6c0:	00010000 	andeq	r0, r1, r0
     6c4:	00029c50 	andeq	r9, r2, r0, asr ip
     6c8:	0002a000 	andeq	sl, r2, r0
     6cc:	54000100 	strpl	r0, [r0], #-256	; 0x100
     6d0:	000002a0 	andeq	r0, r0, r0, lsr #5
     6d4:	000002ac 	andeq	r0, r0, ip, lsr #5
     6d8:	01740003 	cmneq	r4, r3
     6dc:	0002ac9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
     6e0:	0002b800 	andeq	fp, r2, r0, lsl #16
     6e4:	54000100 	strpl	r0, [r0], #-256	; 0x100
     6e8:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
     6ec:	000002c4 	andeq	r0, r0, r4, asr #5
     6f0:	01740003 	cmneq	r4, r3
     6f4:	0002c49f 	muleq	r2, pc, r4	; <UNPREDICTABLE>
     6f8:	00049800 	andeq	r9, r4, r0, lsl #16
     6fc:	54000100 	strpl	r0, [r0], #-256	; 0x100
     700:	00000498 	muleq	r0, r8, r4
     704:	000004a4 	andeq	r0, r0, r4, lsr #9
     708:	01740003 	cmneq	r4, r3
     70c:	0004a49f 	muleq	r4, pc, r4	; <UNPREDICTABLE>
     710:	0004d000 	andeq	sp, r4, r0
     714:	54000100 	strpl	r0, [r0], #-256	; 0x100
     718:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     71c:	000004dc 	ldrdeq	r0, [r0], -ip
     720:	dc500001 	mrrcle	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     724:	e4000004 	str	r0, [r0], #-4
     728:	03000004 	movweq	r0, #4
     72c:	9f017400 	svcls	0x00017400
	...
     738:	00000288 	andeq	r0, r0, r8, lsl #5
     73c:	000004e4 	andeq	r0, r0, r4, ror #9
     740:	e4580001 	ldrb	r0, [r8], #-1
     744:	f8000004 			; <UNDEFINED> instruction: 0xf8000004
     748:	0a000004 	beq	760 <_start-0x78a0>
     74c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     750:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
     754:	009f1c31 	addseq	r1, pc, r1, lsr ip	; <UNPREDICTABLE>
     758:	00000000 	andeq	r0, r0, r0
     75c:	cc000000 	stcgt	0, cr0, [r0], {-0}
     760:	d0000003 	andle	r0, r0, r3
     764:	01000003 	tsteq	r0, r3
     768:	03f05000 	mvnseq	r5, #0
     76c:	03f40000 	mvnseq	r0, #0
     770:	00010000 	andeq	r0, r1, r0
     774:	00041450 	andeq	r1, r4, r0, asr r4
     778:	00041800 	andeq	r1, r4, r0, lsl #16
     77c:	50000100 	andpl	r0, r0, r0, lsl #2
     780:	00000438 	andeq	r0, r0, r8, lsr r4
     784:	0000043c 	andeq	r0, r0, ip, lsr r4
     788:	44500001 	ldrbmi	r0, [r0], #-1
     78c:	48000004 	stmdami	r0, {r2}
     790:	01000004 	tsteq	r0, r4
     794:	04685000 	strbteq	r5, [r8], #-0
     798:	046c0000 	strbteq	r0, [ip], #-0
     79c:	00010000 	andeq	r0, r1, r0
     7a0:	00049050 	andeq	r9, r4, r0, asr r0
     7a4:	0004b800 	andeq	fp, r4, r0, lsl #16
     7a8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     7b4:	000002cc 	andeq	r0, r0, ip, asr #5
     7b8:	000002d4 	ldrdeq	r0, [r0], -r4
     7bc:	9f300002 	svcls	0x00300002
     7c0:	000002d4 	ldrdeq	r0, [r0], -r4
     7c4:	000002d8 	ldrdeq	r0, [r0], -r8
     7c8:	e4570001 	ldrb	r0, [r7], #-1
     7cc:	b8000002 	stmdalt	r0, {r1}
     7d0:	01000004 	tsteq	r0, r4
     7d4:	00005700 	andeq	r5, r0, r0, lsl #14
	...
     7e0:	000c0000 	andeq	r0, ip, r0
     7e4:	00010000 	andeq	r0, r1, r0
     7e8:	00000c50 	andeq	r0, r0, r0, asr ip
     7ec:	00002000 	andeq	r2, r0, r0
     7f0:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     7fc:	00000034 	andeq	r0, r0, r4, lsr r0
     800:	0000003c 	andeq	r0, r0, ip, lsr r0
     804:	04730003 	ldrbteq	r0, [r3], #-3
     808:	00003c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
     80c:	00004700 	andeq	r4, r0, r0, lsl #14
     810:	53000100 	movwpl	r0, #256	; 0x100
	...
     81c:	00000048 	andeq	r0, r0, r8, asr #32
     820:	00000074 	andeq	r0, r0, r4, ror r0
     824:	74500001 	ldrbvc	r0, [r0], #-1
     828:	83000000 	movwhi	r0, #0
     82c:	03000000 	movweq	r0, #0
     830:	9f787300 	svcls	0x00787300
	...
     83c:	00008918 	andeq	r8, r0, r8, lsl r9
     840:	0000891c 	andeq	r8, r0, ip, lsl r9
     844:	9f300002 	svcls	0x00300002
     848:	0000891c 	andeq	r8, r0, ip, lsl r9
     84c:	00008920 	andeq	r8, r0, r0, lsr #18
     850:	00500001 	subseq	r0, r0, r1
     854:	00000000 	andeq	r0, r0, r0
     858:	30000000 	andcc	r0, r0, r0
     85c:	34000089 	strcc	r0, [r0], #-137	; 0x89
     860:	02000089 	andeq	r0, r0, #137	; 0x89
     864:	349f3000 	ldrcc	r3, [pc], #0	; 86c <_start-0x7794>
     868:	38000089 	stmdacc	r0, {r0, r3, r7}
     86c:	01000089 	smlabbeq	r0, r9, r0, r0
     870:	893c5300 	ldmdbhi	ip!, {r8, r9, ip, lr}
     874:	89440000 	stmdbhi	r4, {}^	; <UNPREDICTABLE>
     878:	00010000 	andeq	r0, r1, r0
     87c:	00000053 	andeq	r0, r0, r3, asr r0
	...
     888:	00000400 	andeq	r0, r0, r0, lsl #8
     88c:	50000100 	andpl	r0, r0, r0, lsl #2
     890:	00000004 	andeq	r0, r0, r4
     894:	0000000c 	andeq	r0, r0, ip
     898:	0c530001 	mrrceq	0, 0, r0, r3, cr1
     89c:	10000000 	andne	r0, r0, r0
     8a0:	01000000 	mrseq	r0, (UNDEF: 0)
     8a4:	00105000 	andseq	r5, r0, r0
     8a8:	001c0000 	andseq	r0, ip, r0
     8ac:	00010000 	andeq	r0, r1, r0
     8b0:	00000053 	andeq	r0, r0, r3, asr r0
     8b4:	00000000 	andeq	r0, r0, r0
     8b8:	00003c00 	andeq	r3, r0, r0, lsl #24
     8bc:	00004700 	andeq	r4, r0, r0, lsl #14
     8c0:	50000100 	andpl	r0, r0, r0, lsl #2
     8c4:	00000047 	andeq	r0, r0, r7, asr #32
     8c8:	00000060 	andeq	r0, r0, r0, rrx
     8cc:	00550001 	subseq	r0, r5, r1
     8d0:	00000000 	andeq	r0, r0, r0
     8d4:	50000000 	andpl	r0, r0, r0
     8d8:	54000000 	strpl	r0, [r0], #-0
     8dc:	01000000 	mrseq	r0, (UNDEF: 0)
     8e0:	00005000 	andeq	r5, r0, r0
     8e4:	00000000 	andeq	r0, r0, r0
     8e8:	00600000 	rsbeq	r0, r0, r0
     8ec:	006c0000 	rsbeq	r0, ip, r0
     8f0:	00010000 	andeq	r0, r1, r0
     8f4:	00006c50 	andeq	r6, r0, r0, asr ip
     8f8:	00007400 	andeq	r7, r0, r0, lsl #8
     8fc:	f3000400 	vshl.u8	d0, d0, d0
     900:	009f5001 	addseq	r5, pc, r1
     904:	00000000 	andeq	r0, r0, r0
     908:	74000000 	strvc	r0, [r0], #-0
     90c:	80000000 	andhi	r0, r0, r0
     910:	01000000 	mrseq	r0, (UNDEF: 0)
     914:	00805000 	addeq	r5, r0, r0
     918:	00880000 	addeq	r0, r8, r0
     91c:	00040000 	andeq	r0, r4, r0
     920:	9f5001f3 	svcls	0x005001f3
	...
     930:	00000017 	andeq	r0, r0, r7, lsl r0
     934:	17500001 	ldrbne	r0, [r0, -r1]
     938:	30000000 	andcc	r0, r0, r0
     93c:	04000000 	streq	r0, [r0], #-0
     940:	5001f300 	andpl	pc, r1, r0, lsl #6
     944:	0000309f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     948:	00004400 	andeq	r4, r0, r0, lsl #8
     94c:	50000100 	andpl	r0, r0, r0, lsl #2
     950:	00000044 	andeq	r0, r0, r4, asr #32
     954:	00000074 	andeq	r0, r0, r4, ror r0
     958:	01f30004 	mvnseq	r0, r4
     95c:	00009f50 	andeq	r9, r0, r0, asr pc
     960:	00000000 	andeq	r0, r0, r0
     964:	00400000 	subeq	r0, r0, r0
     968:	00580000 	subseq	r0, r8, r0
     96c:	00010000 	andeq	r0, r1, r0
     970:	00005856 	andeq	r5, r0, r6, asr r8
     974:	00007400 	andeq	r7, r0, r0, lsl #8
     978:	f3000900 	vmls.i8	d0, d0, d0
     97c:	07235001 	streq	r5, [r3, -r1]!
     980:	9f1af809 	svcls	0x001af809
	...
     98c:	00000074 	andeq	r0, r0, r4, ror r0
     990:	0000008b 	andeq	r0, r0, fp, lsl #1
     994:	8b500001 	blhi	14009a0 <__bss_end__+0x13f5ef8>
     998:	a4000000 	strge	r0, [r0], #-0
     99c:	04000000 	streq	r0, [r0], #-0
     9a0:	5001f300 	andpl	pc, r1, r0, lsl #6
     9a4:	0000a49f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
     9a8:	0000af00 	andeq	sl, r0, r0, lsl #30
     9ac:	50000100 	andpl	r0, r0, r0, lsl #2
     9b0:	000000af 	andeq	r0, r0, pc, lsr #1
     9b4:	000000b4 	strheq	r0, [r0], -r4
     9b8:	01f30004 	mvnseq	r0, r4
     9bc:	00b49f50 	adcseq	r9, r4, r0, asr pc
     9c0:	00bf0000 	adcseq	r0, pc, r0
     9c4:	00010000 	andeq	r0, r1, r0
     9c8:	0000bf50 	andeq	fp, r0, r0, asr pc
     9cc:	0000d800 	andeq	sp, r0, r0, lsl #16
     9d0:	f3000400 	vshl.u8	d0, d0, d0
     9d4:	d89f5001 	ldmle	pc, {r0, ip, lr}	; <UNPREDICTABLE>
     9d8:	f7000000 			; <UNDEFINED> instruction: 0xf7000000
     9dc:	01000000 	mrseq	r0, (UNDEF: 0)
     9e0:	00f75000 	rscseq	r5, r7, r0
     9e4:	01100000 	tsteq	r0, r0
     9e8:	00040000 	andeq	r0, r4, r0
     9ec:	9f5001f3 	svcls	0x005001f3
	...
     9f8:	00000074 	andeq	r0, r0, r4, ror r0
     9fc:	0000008b 	andeq	r0, r0, fp, lsl #1
     a00:	8b510001 	blhi	1440a0c <__bss_end__+0x1435f64>
     a04:	a4000000 	strge	r0, [r0], #-0
     a08:	04000000 	streq	r0, [r0], #-0
     a0c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     a10:	0000a49f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
     a14:	0000af00 	andeq	sl, r0, r0, lsl #30
     a18:	51000100 	mrspl	r0, (UNDEF: 16)
     a1c:	000000af 	andeq	r0, r0, pc, lsr #1
     a20:	000000b4 	strheq	r0, [r0], -r4
     a24:	01f30004 	mvnseq	r0, r4
     a28:	00b49f51 	adcseq	r9, r4, r1, asr pc
     a2c:	00bf0000 	adcseq	r0, pc, r0
     a30:	00010000 	andeq	r0, r1, r0
     a34:	0000bf51 	andeq	fp, r0, r1, asr pc
     a38:	0000d800 	andeq	sp, r0, r0, lsl #16
     a3c:	f3000400 	vshl.u8	d0, d0, d0
     a40:	d89f5101 	ldmle	pc, {r0, r8, ip, lr}	; <UNPREDICTABLE>
     a44:	ec000000 	stc	0, cr0, [r0], {-0}
     a48:	01000000 	mrseq	r0, (UNDEF: 0)
     a4c:	00ec5100 	rsceq	r5, ip, r0, lsl #2
     a50:	00f00000 	rscseq	r0, r0, r0
     a54:	00040000 	andeq	r0, r4, r0
     a58:	9f1f0071 	svcls	0x001f0071
     a5c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     a60:	00000110 	andeq	r0, r0, r0, lsl r1
     a64:	01f30004 	mvnseq	r0, r4
     a68:	00009f51 	andeq	r9, r0, r1, asr pc
     a6c:	00000000 	andeq	r0, r0, r0
     a70:	00e00000 	rsceq	r0, r0, r0
     a74:	00e40000 	rsceq	r0, r4, r0
     a78:	00010000 	andeq	r0, r1, r0
     a7c:	0000e452 	andeq	lr, r0, r2, asr r4
     a80:	0000f000 	andeq	pc, r0, r0
     a84:	03000500 	movweq	r0, #1280	; 0x500
     a88:	0000aa80 	andeq	sl, r0, r0, lsl #21
     a8c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     a90:	000000f7 	strdeq	r0, [r0], -r7
     a94:	00510001 	subseq	r0, r1, r1
     a98:	00000000 	andeq	r0, r0, r0
     a9c:	94000000 	strls	r0, [r0], #-0
     aa0:	ab000001 	blge	aac <_start-0x7554>
     aa4:	01000001 	tsteq	r0, r1
     aa8:	01ab5000 			; <UNDEFINED> instruction: 0x01ab5000
     aac:	01c40000 	biceq	r0, r4, r0
     ab0:	00040000 	andeq	r0, r4, r0
     ab4:	9f5001f3 	svcls	0x005001f3
     ab8:	000001c4 	andeq	r0, r0, r4, asr #3
     abc:	000001e8 	andeq	r0, r0, r8, ror #3
     ac0:	00500001 	subseq	r0, r0, r1
	...
     acc:	04000000 	streq	r0, [r0], #-0
     ad0:	01000000 	mrseq	r0, (UNDEF: 0)
     ad4:	00045000 	andeq	r5, r4, r0
     ad8:	00080000 	andeq	r0, r8, r0
     adc:	00040000 	andeq	r0, r4, r0
     ae0:	9f5001f3 	svcls	0x005001f3
	...
     aec:	00000068 	andeq	r0, r0, r8, rrx
     af0:	00000074 	andeq	r0, r0, r4, ror r0
     af4:	74500001 	ldrbvc	r0, [r0], #-1
     af8:	77000000 	strvc	r0, [r0, -r0]
     afc:	01000000 	mrseq	r0, (UNDEF: 0)
     b00:	00775100 	rsbseq	r5, r7, r0, lsl #2
     b04:	00800000 	addeq	r0, r0, r0
     b08:	00040000 	andeq	r0, r4, r0
     b0c:	9f5001f3 	svcls	0x005001f3
	...
     b18:	00000080 	andeq	r0, r0, r0, lsl #1
     b1c:	00000097 	muleq	r0, r7, r0
     b20:	97500001 	ldrbls	r0, [r0, -r1]
     b24:	e4000000 	str	r0, [r0], #-0
     b28:	01000000 	mrseq	r0, (UNDEF: 0)
     b2c:	00e45400 	rsceq	r5, r4, r0, lsl #8
     b30:	00e80000 	rsceq	r0, r8, r0
     b34:	00010000 	andeq	r0, r1, r0
     b38:	0000e850 	andeq	lr, r0, r0, asr r8
     b3c:	00010400 	andeq	r0, r1, r0, lsl #8
     b40:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     b4c:	00000104 	andeq	r0, r0, r4, lsl #2
     b50:	00000113 	andeq	r0, r0, r3, lsl r1
     b54:	13500001 	cmpne	r0, #1
     b58:	2c000001 	stccs	0, cr0, [r0], {1}
     b5c:	04000001 	streq	r0, [r0], #-1
     b60:	5001f300 	andpl	pc, r1, r0, lsl #6
     b64:	00012c9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
     b68:	00013b00 	andeq	r3, r1, r0, lsl #22
     b6c:	50000100 	andpl	r0, r0, r0, lsl #2
     b70:	0000013b 	andeq	r0, r0, fp, lsr r1
     b74:	00000160 	andeq	r0, r0, r0, ror #2
     b78:	01f30004 	mvnseq	r0, r4
     b7c:	01609f50 	cmneq	r0, r0, asr pc
     b80:	01800000 	orreq	r0, r0, r0
     b84:	00010000 	andeq	r0, r1, r0
     b88:	00018050 	andeq	r8, r1, r0, asr r0
     b8c:	00019c00 	andeq	r9, r1, r0, lsl #24
     b90:	f3000400 	vshl.u8	d0, d0, d0
     b94:	009f5001 	addseq	r5, pc, r1
     b98:	00000000 	andeq	r0, r0, r0
     b9c:	30000000 	andcc	r0, r0, r0
     ba0:	3b000001 	blcc	bac <_start-0x7454>
     ba4:	01000001 	tsteq	r0, r1
     ba8:	01605300 	cmneq	r0, r0, lsl #6
     bac:	01840000 	orreq	r0, r4, r0
     bb0:	00010000 	andeq	r0, r1, r0
     bb4:	00000053 	andeq	r0, r0, r3, asr r0
     bb8:	00000000 	andeq	r0, r0, r0
     bbc:	0001a800 	andeq	sl, r1, r0, lsl #16
     bc0:	0001b400 	andeq	fp, r1, r0, lsl #8
     bc4:	50000100 	andpl	r0, r0, r0, lsl #2
     bc8:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     bcc:	000001d7 	ldrdeq	r0, [r0], -r7
     bd0:	f0500001 			; <UNDEFINED> instruction: 0xf0500001
     bd4:	20000001 	andcs	r0, r0, r1
     bd8:	01000002 	tsteq	r0, r2
     bdc:	00005000 	andeq	r5, r0, r0
     be0:	00000000 	andeq	r0, r0, r0
     be4:	02300000 	eorseq	r0, r0, #0
     be8:	023f0000 	eorseq	r0, pc, #0
     bec:	00010000 	andeq	r0, r1, r0
     bf0:	00023f50 	andeq	r3, r2, r0, asr pc
     bf4:	00027c00 	andeq	r7, r2, r0, lsl #24
     bf8:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     c04:	00000230 	andeq	r0, r0, r0, lsr r2
     c08:	0000023f 	andeq	r0, r0, pc, lsr r2
     c0c:	3f510001 	svccc	0x00510001
     c10:	7c000002 	stcvc	0, cr0, [r0], {2}
     c14:	01000002 	tsteq	r0, r2
     c18:	00005500 	andeq	r5, r0, r0, lsl #10
     c1c:	00000000 	andeq	r0, r0, r0
     c20:	02440000 	subeq	r0, r4, #0
     c24:	02640000 	rsbeq	r0, r4, #0
     c28:	00010000 	andeq	r0, r1, r0
     c2c:	00026450 	andeq	r6, r2, r0, asr r4
     c30:	00027c00 	andeq	r7, r2, r0, lsl #24
     c34:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     c40:	0000027c 	andeq	r0, r0, ip, ror r2
     c44:	0000028c 	andeq	r0, r0, ip, lsl #5
     c48:	8c500001 	mrrchi	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     c4c:	d4000002 	strle	r0, [r0], #-2
     c50:	04000002 	streq	r0, [r0], #-2
     c54:	5001f300 	andpl	pc, r1, r0, lsl #6
     c58:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     c5c:	00000000 	andeq	r0, r0, r0
     c60:	00033c00 	andeq	r3, r3, r0, lsl #24
     c64:	00034000 	andeq	r4, r3, r0
     c68:	50000100 	andpl	r0, r0, r0, lsl #2
     c6c:	00000340 	andeq	r0, r0, r0, asr #6
     c70:	000003a8 	andeq	r0, r0, r8, lsr #7
     c74:	00560001 	subseq	r0, r6, r1
     c78:	00000000 	andeq	r0, r0, r0
     c7c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     c80:	5b000003 	blpl	c94 <_start-0x736c>
     c84:	01000003 	tsteq	r0, r3
     c88:	035b5000 	cmpeq	fp, #0
     c8c:	03880000 	orreq	r0, r8, #0
     c90:	00010000 	andeq	r0, r1, r0
     c94:	00038855 	andeq	r8, r3, r5, asr r8
     c98:	00038c00 	andeq	r8, r3, r0, lsl #24
     c9c:	50000100 	andpl	r0, r0, r0, lsl #2
     ca0:	0000038c 	andeq	r0, r0, ip, lsl #7
     ca4:	000003a8 	andeq	r0, r0, r8, lsr #7
     ca8:	00550001 	subseq	r0, r5, r1
     cac:	00000000 	andeq	r0, r0, r0
     cb0:	4c000000 	stcmi	0, cr0, [r0], {-0}
     cb4:	a8000003 	stmdage	r0, {r0, r1}
     cb8:	01000003 	tsteq	r0, r3
     cbc:	00005700 	andeq	r5, r0, r0, lsl #14
     cc0:	00000000 	andeq	r0, r0, r0
     cc4:	04400000 	strbeq	r0, [r0], #-0
     cc8:	04470000 	strbeq	r0, [r7], #-0
     ccc:	00010000 	andeq	r0, r1, r0
     cd0:	00044750 	andeq	r4, r4, r0, asr r7
     cd4:	00046c00 	andeq	r6, r4, r0, lsl #24
     cd8:	f3000400 	vshl.u8	d0, d0, d0
     cdc:	009f5001 	addseq	r5, pc, r1
     ce0:	00000000 	andeq	r0, r0, r0
     ce4:	6c000000 	stcvs	0, cr0, [r0], {-0}
     ce8:	73000004 	movwvc	r0, #4
     cec:	01000004 	tsteq	r0, r4
     cf0:	04735000 	ldrbteq	r5, [r3], #-0
     cf4:	04980000 	ldreq	r0, [r8], #0
     cf8:	00040000 	andeq	r0, r4, r0
     cfc:	9f5001f3 	svcls	0x005001f3
	...
     d0c:	00000018 	andeq	r0, r0, r8, lsl r0
     d10:	18500001 	ldmdane	r0, {r0}^
     d14:	54000000 	strpl	r0, [r0], #-0
     d18:	04000001 	streq	r0, [r0], #-1
     d1c:	5001f300 	andpl	pc, r1, r0, lsl #6
     d20:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     d2c:	00001c00 	andeq	r1, r0, r0, lsl #24
     d30:	51000100 	mrspl	r0, (UNDEF: 16)
     d34:	0000001c 	andeq	r0, r0, ip, lsl r0
     d38:	00000154 	andeq	r0, r0, r4, asr r1
     d3c:	01f30004 	mvnseq	r0, r4
     d40:	00009f51 	andeq	r9, r0, r1, asr pc
     d44:	00000000 	andeq	r0, r0, r0
     d48:	00100000 	andseq	r0, r0, r0
     d4c:	01340000 	teqeq	r4, r0
     d50:	00010000 	andeq	r0, r1, r0
     d54:	00000055 	andeq	r0, r0, r5, asr r0
     d58:	00000000 	andeq	r0, r0, r0
     d5c:	00001000 	andeq	r1, r0, r0
     d60:	00003400 	andeq	r3, r0, r0, lsl #8
     d64:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     d68:	00000034 	andeq	r0, r0, r4, lsr r0
     d6c:	00000134 	andeq	r0, r0, r4, lsr r1
     d70:	34580001 	ldrbcc	r0, [r8], #-1
     d74:	54000001 	strpl	r0, [r0], #-1
     d78:	01000001 	tsteq	r0, r1
     d7c:	00005500 	andeq	r5, r0, r0, lsl #10
     d80:	00000000 	andeq	r0, r0, r0
     d84:	00140000 	andseq	r0, r4, r0
     d88:	01340000 	teqeq	r4, r0
     d8c:	00010000 	andeq	r0, r1, r0
     d90:	00000055 	andeq	r0, r0, r5, asr r0
     d94:	00000000 	andeq	r0, r0, r0
     d98:	00002000 	andeq	r2, r0, r0
     d9c:	00013400 	andeq	r3, r1, r0, lsl #8
     da0:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
     dac:	00000024 	andeq	r0, r0, r4, lsr #32
     db0:	00000028 	andeq	r0, r0, r8, lsr #32
     db4:	00530001 	subseq	r0, r3, r1
     db8:	00000000 	andeq	r0, r0, r0
     dbc:	34000000 	strcc	r0, [r0], #-0
     dc0:	54000000 	strpl	r0, [r0], #-0
     dc4:	01000000 	mrseq	r0, (UNDEF: 0)
     dc8:	00545800 	subseq	r5, r4, r0, lsl #16
     dcc:	01340000 	teqeq	r4, r0
     dd0:	00050000 	andeq	r0, r5, r0
     dd4:	24310075 	ldrtcs	r0, [r1], #-117	; 0x75
     dd8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     ddc:	00000000 	andeq	r0, r0, r0
     de0:	00003400 	andeq	r3, r0, r0, lsl #8
     de4:	00003c00 	andeq	r3, r0, r0, lsl #24
     de8:	77000500 	strvc	r0, [r0, -r0, lsl #10]
     dec:	9f1a3100 	svcls	0x001a3100
     df0:	0000003c 	andeq	r0, r0, ip, lsr r0
     df4:	0000003f 	andeq	r0, r0, pc, lsr r0
     df8:	3f510001 	svccc	0x00510001
     dfc:	54000000 	strpl	r0, [r0], #-0
     e00:	05000001 	streq	r0, [r0, #-1]
     e04:	31007700 	tstcc	r0, r0, lsl #14
     e08:	00009f1a 	andeq	r9, r0, sl, lsl pc
     e0c:	00000000 	andeq	r0, r0, r0
     e10:	00400000 	subeq	r0, r0, r0
     e14:	00540000 	subseq	r0, r4, r0
     e18:	00010000 	andeq	r0, r1, r0
     e1c:	00005458 	andeq	r5, r0, r8, asr r4
     e20:	00013400 	andeq	r3, r1, r0, lsl #8
     e24:	75000500 	strvc	r0, [r0, #-1280]	; 0x500
     e28:	9f243100 	svcls	0x00243100
	...
     e34:	00000044 	andeq	r0, r0, r4, asr #32
     e38:	00000048 	andeq	r0, r0, r8, asr #32
     e3c:	00530001 	subseq	r0, r3, r1
     e40:	00000000 	andeq	r0, r0, r0
     e44:	54000000 	strpl	r0, [r0], #-0
     e48:	74000000 	strvc	r0, [r0], #-0
     e4c:	01000000 	mrseq	r0, (UNDEF: 0)
     e50:	00745800 	rsbseq	r5, r4, r0, lsl #16
     e54:	01340000 	teqeq	r4, r0
     e58:	00080000 	andeq	r0, r8, r0
     e5c:	24310075 	ldrtcs	r0, [r1], #-117	; 0x75
     e60:	9f220075 	svcls	0x00220075
	...
     e6c:	00000060 	andeq	r0, r0, r0, rrx
     e70:	00000074 	andeq	r0, r0, r4, ror r0
     e74:	74580001 	ldrbvc	r0, [r8], #-1
     e78:	34000000 	strcc	r0, [r0], #-0
     e7c:	08000001 	stmdaeq	r0, {r0}
     e80:	31007500 	tstcc	r0, r0, lsl #10
     e84:	22007524 	andcs	r7, r0, #36, 10	; 0x9000000
     e88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     e8c:	00000000 	andeq	r0, r0, r0
     e90:	00006400 	andeq	r6, r0, r0, lsl #8
     e94:	00006800 	andeq	r6, r0, r0, lsl #16
     e98:	53000100 	movwpl	r0, #256	; 0x100
	...
     ea4:	00000074 	andeq	r0, r0, r4, ror r0
     ea8:	00000094 	muleq	r0, r4, r0
     eac:	94580001 	ldrbls	r0, [r8], #-1
     eb0:	34000000 	strcc	r0, [r0], #-0
     eb4:	05000001 	streq	r0, [r0, #-1]
     eb8:	32007500 	andcc	r7, r0, #0, 10
     ebc:	00009f24 	andeq	r9, r0, r4, lsr #30
     ec0:	00000000 	andeq	r0, r0, r0
     ec4:	00800000 	addeq	r0, r0, r0
     ec8:	00940000 	addseq	r0, r4, r0
     ecc:	00010000 	andeq	r0, r1, r0
     ed0:	00009458 	andeq	r9, r0, r8, asr r4
     ed4:	00013400 	andeq	r3, r1, r0, lsl #8
     ed8:	75000500 	strvc	r0, [r0, #-1280]	; 0x500
     edc:	9f243200 	svcls	0x00243200
	...
     ee8:	00000084 	andeq	r0, r0, r4, lsl #1
     eec:	00000088 	andeq	r0, r0, r8, lsl #1
     ef0:	00530001 	subseq	r0, r3, r1
     ef4:	00000000 	andeq	r0, r0, r0
     ef8:	94000000 	strls	r0, [r0], #-0
     efc:	b4000000 	strlt	r0, [r0], #-0
     f00:	01000000 	mrseq	r0, (UNDEF: 0)
     f04:	00b45800 	adcseq	r5, r4, r0, lsl #16
     f08:	01340000 	teqeq	r4, r0
     f0c:	00080000 	andeq	r0, r8, r0
     f10:	24320075 	ldrtcs	r0, [r2], #-117	; 0x75
     f14:	9f220075 	svcls	0x00220075
	...
     f20:	000000a0 	andeq	r0, r0, r0, lsr #1
     f24:	000000b4 	strheq	r0, [r0], -r4
     f28:	b4580001 	ldrblt	r0, [r8], #-1
     f2c:	34000000 	strcc	r0, [r0], #-0
     f30:	08000001 	stmdaeq	r0, {r0}
     f34:	32007500 	andcc	r7, r0, #0, 10
     f38:	22007524 	andcs	r7, r0, #36, 10	; 0x9000000
     f3c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     f40:	00000000 	andeq	r0, r0, r0
     f44:	0000a400 	andeq	sl, r0, r0, lsl #8
     f48:	0000a800 	andeq	sl, r0, r0, lsl #16
     f4c:	53000100 	movwpl	r0, #256	; 0x100
	...
     f58:	000000b4 	strheq	r0, [r0], -r4
     f5c:	000000d4 	ldrdeq	r0, [r0], -r4
     f60:	d4580001 	ldrble	r0, [r8], #-1
     f64:	34000000 	strcc	r0, [r0], #-0
     f68:	0a000001 	beq	f74 <_start-0x708c>
     f6c:	32007500 	andcc	r7, r0, #0, 10
     f70:	31007524 	tstcc	r0, r4, lsr #10
     f74:	009f2224 	addseq	r2, pc, r4, lsr #4
     f78:	00000000 	andeq	r0, r0, r0
     f7c:	c0000000 	andgt	r0, r0, r0
     f80:	d4000000 	strle	r0, [r0], #-0
     f84:	01000000 	mrseq	r0, (UNDEF: 0)
     f88:	00d45800 	sbcseq	r5, r4, r0, lsl #16
     f8c:	01340000 	teqeq	r4, r0
     f90:	000a0000 	andeq	r0, sl, r0
     f94:	24320075 	ldrtcs	r0, [r2], #-117	; 0x75
     f98:	24310075 	ldrtcs	r0, [r1], #-117	; 0x75
     f9c:	00009f22 	andeq	r9, r0, r2, lsr #30
     fa0:	00000000 	andeq	r0, r0, r0
     fa4:	00c40000 	sbceq	r0, r4, r0
     fa8:	00c80000 	sbceq	r0, r8, r0
     fac:	00010000 	andeq	r0, r1, r0
     fb0:	00000053 	andeq	r0, r0, r3, asr r0
     fb4:	00000000 	andeq	r0, r0, r0
     fb8:	0000d400 	andeq	sp, r0, r0, lsl #8
     fbc:	0000f400 	andeq	pc, r0, r0, lsl #8
     fc0:	58000100 	stmdapl	r0, {r8}
     fc4:	000000f4 	strdeq	r0, [r0], -r4
     fc8:	00000134 	andeq	r0, r0, r4, lsr r1
     fcc:	0075000d 	rsbseq	r0, r5, sp
     fd0:	00752432 	rsbseq	r2, r5, r2, lsr r4
     fd4:	75222431 	strvc	r2, [r2, #-1073]!	; 0x431
     fd8:	009f2200 	addseq	r2, pc, r0, lsl #4
     fdc:	00000000 	andeq	r0, r0, r0
     fe0:	e0000000 	and	r0, r0, r0
     fe4:	f4000000 	vst4.8	{d0-d3}, [r0], r0
     fe8:	01000000 	mrseq	r0, (UNDEF: 0)
     fec:	00f45800 	rscseq	r5, r4, r0, lsl #16
     ff0:	01340000 	teqeq	r4, r0
     ff4:	000d0000 	andeq	r0, sp, r0
     ff8:	24320075 	ldrtcs	r0, [r2], #-117	; 0x75
     ffc:	24310075 	ldrtcs	r0, [r1], #-117	; 0x75
    1000:	22007522 	andcs	r7, r0, #142606336	; 0x8800000
    1004:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1008:	00000000 	andeq	r0, r0, r0
    100c:	0000e400 	andeq	lr, r0, r0, lsl #8
    1010:	0000e800 	andeq	lr, r0, r0, lsl #16
    1014:	53000100 	movwpl	r0, #256	; 0x100
	...
    1020:	000000f4 	strdeq	r0, [r0], -r4
    1024:	00000114 	andeq	r0, r0, r4, lsl r1
    1028:	14580001 	ldrbne	r0, [r8], #-1
    102c:	34000001 	strcc	r0, [r0], #-1
    1030:	05000001 	streq	r0, [r0, #-1]
    1034:	33007500 	movwcc	r7, #1280	; 0x500
    1038:	00009f24 	andeq	r9, r0, r4, lsr #30
    103c:	00000000 	andeq	r0, r0, r0
    1040:	01000000 	mrseq	r0, (UNDEF: 0)
    1044:	01140000 	tsteq	r4, r0
    1048:	00010000 	andeq	r0, r1, r0
    104c:	00011458 	andeq	r1, r1, r8, asr r4
    1050:	00013400 	andeq	r3, r1, r0, lsl #8
    1054:	75000500 	strvc	r0, [r0, #-1280]	; 0x500
    1058:	9f243300 	svcls	0x00243300
	...
    1064:	00000104 	andeq	r0, r0, r4, lsl #2
    1068:	00000108 	andeq	r0, r0, r8, lsl #2
    106c:	00530001 	subseq	r0, r3, r1
    1070:	00000000 	andeq	r0, r0, r0
    1074:	14000000 	strne	r0, [r0], #-0
    1078:	1c000001 	stcne	0, cr0, [r0], {1}
    107c:	06000001 	streq	r0, [r0], -r1
    1080:	08007700 	stmdaeq	r0, {r8, r9, sl, ip, sp, lr}
    1084:	1c9f1a80 	vldmiane	pc, {s2-s129}
    1088:	1f000001 	svcne	0x00000001
    108c:	01000001 	tsteq	r0, r1
    1090:	011f5100 	tsteq	pc, r0, lsl #2
    1094:	01540000 	cmpeq	r4, r0
    1098:	00060000 	andeq	r0, r6, r0
    109c:	80080077 	andhi	r0, r8, r7, ror r0
    10a0:	00009f1a 	andeq	r9, r0, sl, lsl pc
    10a4:	00000000 	andeq	r0, r0, r0
    10a8:	01240000 	teqeq	r4, r0
    10ac:	01280000 	teqeq	r8, r0
    10b0:	00010000 	andeq	r0, r1, r0
    10b4:	00000053 	andeq	r0, r0, r3, asr r0
    10b8:	00000000 	andeq	r0, r0, r0
    10bc:	00014400 	andeq	r4, r1, r0, lsl #8
    10c0:	00014800 	andeq	r4, r1, r0, lsl #16
    10c4:	53000100 	movwpl	r0, #256	; 0x100
	...
    10d0:	00000154 	andeq	r0, r0, r4, asr r1
    10d4:	0000016b 	andeq	r0, r0, fp, ror #2
    10d8:	6b500001 	blvs	14010e4 <__bss_end__+0x13f663c>
    10dc:	d0000001 	andle	r0, r0, r1
    10e0:	01000001 	tsteq	r0, r1
    10e4:	01d05900 	bicseq	r5, r0, r0, lsl #18
    10e8:	030c0000 	movweq	r0, #49152	; 0xc000
    10ec:	00040000 	andeq	r0, r4, r0
    10f0:	9f5001f3 	svcls	0x005001f3
    10f4:	0000030c 	andeq	r0, r0, ip, lsl #6
    10f8:	00000314 	andeq	r0, r0, r4, lsl r3
    10fc:	14590001 	ldrbne	r0, [r9], #-1
    1100:	1c000003 	stcne	0, cr0, [r0], {3}
    1104:	04000003 	streq	r0, [r0], #-3
    1108:	5001f300 	andpl	pc, r1, r0, lsl #6
    110c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1110:	00000000 	andeq	r0, r0, r0
    1114:	00015400 	andeq	r5, r1, r0, lsl #8
    1118:	00016b00 	andeq	r6, r1, r0, lsl #22
    111c:	51000100 	mrspl	r0, (UNDEF: 16)
    1120:	0000016b 	andeq	r0, r0, fp, ror #2
    1124:	0000031c 	andeq	r0, r0, ip, lsl r3
    1128:	00560001 	subseq	r0, r6, r1
    112c:	00000000 	andeq	r0, r0, r0
    1130:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    1134:	98000001 	stmdals	r0, {r0}
    1138:	01000002 	tsteq	r0, r2
    113c:	00005800 	andeq	r5, r0, r0, lsl #16
    1140:	00000000 	andeq	r0, r0, r0
    1144:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
    1148:	02d00000 	sbcseq	r0, r0, #0
    114c:	00010000 	andeq	r0, r1, r0
    1150:	00000054 	andeq	r0, r0, r4, asr r0
    1154:	00000000 	andeq	r0, r0, r0
    1158:	0001ac00 	andeq	sl, r1, r0, lsl #24
    115c:	0002d000 	andeq	sp, r2, r0
    1160:	74000500 	strvc	r0, [r0], #-1280	; 0x500
    1164:	9f253100 	svcls	0x00253100
	...
    1170:	000001ac 	andeq	r0, r0, ip, lsr #3
    1174:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1178:	9f300002 	svcls	0x00300002
    117c:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1180:	0000030c 	andeq	r0, r0, ip, lsl #6
    1184:	14590001 	ldrbne	r0, [r9], #-1
    1188:	1c000003 	stcne	0, cr0, [r0], {3}
    118c:	01000003 	tsteq	r0, r3
    1190:	00005900 	andeq	r5, r0, r0, lsl #18
    1194:	00000000 	andeq	r0, r0, r0
    1198:	01680000 	cmneq	r8, r0
    119c:	016b0000 	cmneq	fp, r0
    11a0:	00010000 	andeq	r0, r1, r0
    11a4:	00016b51 	andeq	r6, r1, r1, asr fp
    11a8:	00031c00 	andeq	r1, r3, r0, lsl #24
    11ac:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    11b8:	00000170 	andeq	r0, r0, r0, ror r1
    11bc:	000001ac 	andeq	r0, r0, ip, lsr #3
    11c0:	0c540001 	mrrceq	0, 0, r0, r4, cr1
    11c4:	14000003 	strne	r0, [r0], #-3
    11c8:	01000003 	tsteq	r0, r3
    11cc:	00005400 	andeq	r5, r0, r0, lsl #8
    11d0:	00000000 	andeq	r0, r0, r0
    11d4:	01a80000 			; <UNDEFINED> instruction: 0x01a80000
    11d8:	01c40000 	biceq	r0, r4, r0
    11dc:	00010000 	andeq	r0, r1, r0
    11e0:	00000058 	andeq	r0, r0, r8, asr r0
    11e4:	00000000 	andeq	r0, r0, r0
    11e8:	0001b000 	andeq	fp, r1, r0
    11ec:	0001cb00 	andeq	ip, r1, r0, lsl #22
    11f0:	52000100 	andpl	r0, r0, #0, 2
    11f4:	000001cb 	andeq	r0, r0, fp, asr #3
    11f8:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    11fc:	00740008 	rsbseq	r0, r4, r8
    1200:	00742531 	rsbseq	r2, r4, r1, lsr r5
    1204:	00009f22 	andeq	r9, r0, r2, lsr #30
    1208:	00000000 	andeq	r0, r0, r0
    120c:	01b00000 	movseq	r0, r0
    1210:	01c40000 	biceq	r0, r4, r0
    1214:	00010000 	andeq	r0, r1, r0
    1218:	00000058 	andeq	r0, r0, r8, asr r0
    121c:	00000000 	andeq	r0, r0, r0
    1220:	0001b400 	andeq	fp, r1, r0, lsl #8
    1224:	0001b800 	andeq	fp, r1, r0, lsl #16
    1228:	53000100 	movwpl	r0, #256	; 0x100
	...
    1234:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1238:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    123c:	00540001 	subseq	r0, r4, r1
    1240:	00000000 	andeq	r0, r0, r0
    1244:	d0000000 	andle	r0, r0, r0
    1248:	e4000001 	str	r0, [r0], #-1
    124c:	01000001 	tsteq	r0, r1
    1250:	00005800 	andeq	r5, r0, r0, lsl #16
    1254:	00000000 	andeq	r0, r0, r0
    1258:	01d40000 	bicseq	r0, r4, r0
    125c:	01d80000 	bicseq	r0, r8, r0
    1260:	00010000 	andeq	r0, r1, r0
    1264:	00000053 	andeq	r0, r0, r3, asr r0
    1268:	00000000 	andeq	r0, r0, r0
    126c:	0001f400 	andeq	pc, r1, r0, lsl #8
    1270:	0002d000 	andeq	sp, r2, r0
    1274:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    1280:	000001f4 	strdeq	r0, [r0], -r4
    1284:	00000208 	andeq	r0, r0, r8, lsl #4
    1288:	00580001 	subseq	r0, r8, r1
    128c:	00000000 	andeq	r0, r0, r0
    1290:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    1294:	fc000001 	stc2	0, cr0, [r0], {1}
    1298:	01000001 	tsteq	r0, r1
    129c:	00005300 	andeq	r5, r0, r0, lsl #6
    12a0:	00000000 	andeq	r0, r0, r0
    12a4:	02180000 	andseq	r0, r8, #0
    12a8:	02d00000 	sbcseq	r0, r0, #0
    12ac:	00010000 	andeq	r0, r1, r0
    12b0:	00000054 	andeq	r0, r0, r4, asr r0
    12b4:	00000000 	andeq	r0, r0, r0
    12b8:	00021800 	andeq	r1, r2, r0, lsl #16
    12bc:	00022c00 	andeq	r2, r2, r0, lsl #24
    12c0:	58000100 	stmdapl	r0, {r8}
	...
    12cc:	0000021c 	andeq	r0, r0, ip, lsl r2
    12d0:	00000220 	andeq	r0, r0, r0, lsr #4
    12d4:	00530001 	subseq	r0, r3, r1
    12d8:	00000000 	andeq	r0, r0, r0
    12dc:	3c000000 	stccc	0, cr0, [r0], {-0}
    12e0:	d0000002 	andle	r0, r0, r2
    12e4:	01000002 	tsteq	r0, r2
    12e8:	00005400 	andeq	r5, r0, r0, lsl #8
    12ec:	00000000 	andeq	r0, r0, r0
    12f0:	023c0000 	eorseq	r0, ip, #0
    12f4:	02500000 	subseq	r0, r0, #0
    12f8:	00010000 	andeq	r0, r1, r0
    12fc:	00000058 	andeq	r0, r0, r8, asr r0
    1300:	00000000 	andeq	r0, r0, r0
    1304:	00024000 	andeq	r4, r2, r0
    1308:	00024400 	andeq	r4, r2, r0, lsl #8
    130c:	53000100 	movwpl	r0, #256	; 0x100
	...
    1318:	00000260 	andeq	r0, r0, r0, ror #4
    131c:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1320:	00540001 	subseq	r0, r4, r1
    1324:	00000000 	andeq	r0, r0, r0
    1328:	60000000 	andvs	r0, r0, r0
    132c:	74000002 	strvc	r0, [r0], #-2
    1330:	01000002 	tsteq	r0, r2
    1334:	00005800 	andeq	r5, r0, r0, lsl #16
    1338:	00000000 	andeq	r0, r0, r0
    133c:	02640000 	rsbeq	r0, r4, #0
    1340:	02680000 	rsbeq	r0, r8, #0
    1344:	00010000 	andeq	r0, r1, r0
    1348:	00000053 	andeq	r0, r0, r3, asr r0
    134c:	00000000 	andeq	r0, r0, r0
    1350:	00028400 	andeq	r8, r2, r0, lsl #8
    1354:	0002d000 	andeq	sp, r2, r0
    1358:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    1364:	00000284 	andeq	r0, r0, r4, lsl #5
    1368:	00000298 	muleq	r0, r8, r2
    136c:	00580001 	subseq	r0, r8, r1
    1370:	00000000 	andeq	r0, r0, r0
    1374:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    1378:	8c000002 	stchi	0, cr0, [r0], {2}
    137c:	01000002 	tsteq	r0, r2
    1380:	00005300 	andeq	r5, r0, r0, lsl #6
    1384:	00000000 	andeq	r0, r0, r0
    1388:	02a80000 	adceq	r0, r8, #0
    138c:	02d00000 	sbcseq	r0, r0, #0
    1390:	00010000 	andeq	r0, r1, r0
    1394:	00000054 	andeq	r0, r0, r4, asr r0
    1398:	00000000 	andeq	r0, r0, r0
    139c:	0002ac00 	andeq	sl, r2, r0, lsl #24
    13a0:	0002b000 	andeq	fp, r2, r0
    13a4:	53000100 	movwpl	r0, #256	; 0x100
	...
    13b0:	000002c8 	andeq	r0, r0, r8, asr #5
    13b4:	0000030c 	andeq	r0, r0, ip, lsl #6
    13b8:	9f300002 	svcls	0x00300002
    13bc:	00000314 	andeq	r0, r0, r4, lsl r3
    13c0:	0000031c 	andeq	r0, r0, ip, lsl r3
    13c4:	9f300002 	svcls	0x00300002
	...
    13d0:	000002c8 	andeq	r0, r0, r8, asr #5
    13d4:	0000030c 	andeq	r0, r0, ip, lsl #6
    13d8:	14550001 	ldrbne	r0, [r5], #-1
    13dc:	1c000003 	stcne	0, cr0, [r0], {3}
    13e0:	01000003 	tsteq	r0, r3
    13e4:	00005500 	andeq	r5, r0, r0, lsl #10
    13e8:	00000000 	andeq	r0, r0, r0
    13ec:	02d00000 	sbcseq	r0, r0, #0
    13f0:	030c0000 	movweq	r0, #49152	; 0xc000
    13f4:	00010000 	andeq	r0, r1, r0
    13f8:	00031454 	andeq	r1, r3, r4, asr r4
    13fc:	00031c00 	andeq	r1, r3, r0, lsl #24
    1400:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    140c:	0000031c 	andeq	r0, r0, ip, lsl r3
    1410:	0000033b 	andeq	r0, r0, fp, lsr r3
    1414:	3b500001 	blcc	1401420 <__bss_end__+0x13f6978>
    1418:	54000003 	strpl	r0, [r0], #-3
    141c:	01000003 	tsteq	r0, r3
    1420:	03545800 	cmpeq	r4, #0, 16
    1424:	03640000 	cmneq	r4, #0
    1428:	00010000 	andeq	r0, r1, r0
    142c:	00036450 	andeq	r6, r3, r0, asr r4
    1430:	0003ac00 	andeq	sl, r3, r0, lsl #24
    1434:	58000100 	stmdapl	r0, {r8}
	...
    1440:	0000031c 	andeq	r0, r0, ip, lsl r3
    1444:	0000033b 	andeq	r0, r0, fp, lsr r3
    1448:	3b510001 	blcc	1441454 <__bss_end__+0x14369ac>
    144c:	54000003 	strpl	r0, [r0], #-3
    1450:	01000003 	tsteq	r0, r3
    1454:	03545600 	cmpeq	r4, #0, 12
    1458:	03640000 	cmneq	r4, #0
    145c:	00010000 	andeq	r0, r1, r0
    1460:	00036451 	andeq	r6, r3, r1, asr r4
    1464:	0003ac00 	andeq	sl, r3, r0, lsl #24
    1468:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    1474:	0000031c 	andeq	r0, r0, ip, lsl r3
    1478:	0000033b 	andeq	r0, r0, fp, lsr r3
    147c:	3b520001 	blcc	1481488 <__bss_end__+0x14769e0>
    1480:	54000003 	strpl	r0, [r0], #-3
    1484:	04000003 	streq	r0, [r0], #-3
    1488:	5201f300 	andpl	pc, r1, #0, 6
    148c:	0003549f 	muleq	r3, pc, r4	; <UNPREDICTABLE>
    1490:	00036400 	andeq	r6, r3, r0, lsl #8
    1494:	52000100 	andpl	r0, r0, #0, 2
    1498:	00000364 	andeq	r0, r0, r4, ror #6
    149c:	000003ac 	andeq	r0, r0, ip, lsr #7
    14a0:	01770003 	cmneq	r7, r3
    14a4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    14a8:	00000000 	andeq	r0, r0, r0
    14ac:	00031c00 	andeq	r1, r3, r0, lsl #24
    14b0:	00033b00 	andeq	r3, r3, r0, lsl #22
    14b4:	53000100 	movwpl	r0, #256	; 0x100
    14b8:	0000033b 	andeq	r0, r0, fp, lsr r3
    14bc:	00000354 	andeq	r0, r0, r4, asr r3
    14c0:	01f30004 	mvnseq	r0, r4
    14c4:	03549f53 	cmpeq	r4, #332	; 0x14c
    14c8:	03640000 	cmneq	r4, #0
    14cc:	00010000 	andeq	r0, r1, r0
    14d0:	00036453 	andeq	r6, r3, r3, asr r4
    14d4:	0003ac00 	andeq	sl, r3, r0, lsl #24
    14d8:	f3000400 	vshl.u8	d0, d0, d0
    14dc:	009f5301 	addseq	r5, pc, r1, lsl #6
    14e0:	00000000 	andeq	r0, r0, r0
    14e4:	5c000000 	stcpl	0, cr0, [r0], {-0}
    14e8:	64000003 	strvs	r0, [r0], #-3
    14ec:	02000003 	andeq	r0, r0, #3
    14f0:	649f3000 	ldrvs	r3, [pc], #0	; 14f8 <_start-0x6b08>
    14f4:	ac000003 	stcge	0, cr0, [r0], {3}
    14f8:	01000003 	tsteq	r0, r3
    14fc:	00005400 	andeq	r5, r0, r0, lsl #8
    1500:	00000000 	andeq	r0, r0, r0
    1504:	03740000 	cmneq	r4, #0
    1508:	03840000 	orreq	r0, r4, #0
    150c:	00010000 	andeq	r0, r1, r0
    1510:	00000050 	andeq	r0, r0, r0, asr r0
    1514:	00000000 	andeq	r0, r0, r0
    1518:	0003ac00 	andeq	sl, r3, r0, lsl #24
    151c:	0003c700 	andeq	ip, r3, r0, lsl #14
    1520:	50000100 	andpl	r0, r0, r0, lsl #2
    1524:	000003c7 	andeq	r0, r0, r7, asr #7
    1528:	000003e0 	andeq	r0, r0, r0, ror #7
    152c:	e0570001 	subs	r0, r7, r1
    1530:	f0000003 			; <UNDEFINED> instruction: 0xf0000003
    1534:	01000003 	tsteq	r0, r3
    1538:	03f05000 	mvnseq	r5, #0
    153c:	04280000 	strteq	r0, [r8], #-0
    1540:	00010000 	andeq	r0, r1, r0
    1544:	00000057 	andeq	r0, r0, r7, asr r0
    1548:	00000000 	andeq	r0, r0, r0
    154c:	0003ac00 	andeq	sl, r3, r0, lsl #24
    1550:	0003c700 	andeq	ip, r3, r0, lsl #14
    1554:	51000100 	mrspl	r0, (UNDEF: 16)
    1558:	000003c7 	andeq	r0, r0, r7, asr #7
    155c:	000003e0 	andeq	r0, r0, r0, ror #7
    1560:	e0550001 	subs	r0, r5, r1
    1564:	f0000003 			; <UNDEFINED> instruction: 0xf0000003
    1568:	01000003 	tsteq	r0, r3
    156c:	03f05100 	mvnseq	r5, #0, 2
    1570:	04280000 	strteq	r0, [r8], #-0
    1574:	00010000 	andeq	r0, r1, r0
    1578:	00000055 	andeq	r0, r0, r5, asr r0
    157c:	00000000 	andeq	r0, r0, r0
    1580:	0003ac00 	andeq	sl, r3, r0, lsl #24
    1584:	0003c700 	andeq	ip, r3, r0, lsl #14
    1588:	52000100 	andpl	r0, r0, #0, 2
    158c:	000003c7 	andeq	r0, r0, r7, asr #7
    1590:	000003e0 	andeq	r0, r0, r0, ror #7
    1594:	01f30004 	mvnseq	r0, r4
    1598:	03e09f52 	mvneq	r9, #328	; 0x148
    159c:	03f00000 	mvnseq	r0, #0
    15a0:	00010000 	andeq	r0, r1, r0
    15a4:	0003f052 	andeq	pc, r3, r2, asr r0	; <UNPREDICTABLE>
    15a8:	00042800 	andeq	r2, r4, r0, lsl #16
    15ac:	76000300 	strvc	r0, [r0], -r0, lsl #6
    15b0:	00009f01 	andeq	r9, r0, r1, lsl #30
    15b4:	00000000 	andeq	r0, r0, r0
    15b8:	03ac0000 			; <UNDEFINED> instruction: 0x03ac0000
    15bc:	03c70000 	biceq	r0, r7, #0
    15c0:	00010000 	andeq	r0, r1, r0
    15c4:	0003c753 	andeq	ip, r3, r3, asr r7
    15c8:	0003e000 	andeq	lr, r3, r0
    15cc:	58000100 	stmdapl	r0, {r8}
    15d0:	000003e0 	andeq	r0, r0, r0, ror #7
    15d4:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    15d8:	f0530001 			; <UNDEFINED> instruction: 0xf0530001
    15dc:	28000003 	stmdacs	r0, {r0, r1}
    15e0:	01000004 	tsteq	r0, r4
    15e4:	00005800 	andeq	r5, r0, r0, lsl #16
    15e8:	00000000 	andeq	r0, r0, r0
    15ec:	03e80000 	mvneq	r0, #0
    15f0:	03f00000 	mvnseq	r0, #0
    15f4:	00020000 	andeq	r0, r2, r0
    15f8:	03f09f30 	mvnseq	r9, #48, 30	; 0xc0
    15fc:	04280000 	strteq	r0, [r8], #-0
    1600:	00010000 	andeq	r0, r1, r0
    1604:	00000054 	andeq	r0, r0, r4, asr r0
    1608:	00000000 	andeq	r0, r0, r0
    160c:	00042800 	andeq	r2, r4, r0, lsl #16
    1610:	00044700 	andeq	r4, r4, r0, lsl #14
    1614:	51000100 	mrspl	r0, (UNDEF: 16)
    1618:	00000447 	andeq	r0, r0, r7, asr #8
    161c:	000004e8 	andeq	r0, r0, r8, ror #9
    1620:	01f30004 	mvnseq	r0, r4
    1624:	00009f51 	andeq	r9, r0, r1, asr pc
    1628:	00000000 	andeq	r0, r0, r0
    162c:	04280000 	strteq	r0, [r8], #-0
    1630:	04470000 	strbeq	r0, [r7], #-0
    1634:	00010000 	andeq	r0, r1, r0
    1638:	00044752 	andeq	r4, r4, r2, asr r7
    163c:	0004e800 	andeq	lr, r4, r0, lsl #16
    1640:	f3000400 	vshl.u8	d0, d0, d0
    1644:	009f5201 	addseq	r5, pc, r1, lsl #4
    1648:	00000000 	andeq	r0, r0, r0
    164c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    1650:	47000004 	strmi	r0, [r0, -r4]
    1654:	01000004 	tsteq	r0, r4
    1658:	04475300 	strbeq	r5, [r7], #-768	; 0x300
    165c:	04e80000 	strbteq	r0, [r8], #0
    1660:	00010000 	andeq	r0, r1, r0
    1664:	00000055 	andeq	r0, r0, r5, asr r0
    1668:	00000000 	andeq	r0, r0, r0
    166c:	00046800 	andeq	r6, r4, r0, lsl #16
    1670:	0004a700 	andeq	sl, r4, r0, lsl #14
    1674:	52000100 	andpl	r0, r0, #0, 2
    1678:	000004a7 	andeq	r0, r0, r7, lsr #9
    167c:	000004c0 	andeq	r0, r0, r0, asr #9
    1680:	00750006 	rsbseq	r0, r5, r6
    1684:	9f1e0077 	svcls	0x001e0077
    1688:	000004c0 	andeq	r0, r0, r0, asr #9
    168c:	000004e8 	andeq	r0, r0, r8, ror #9
    1690:	00520001 	subseq	r0, r2, r1
    1694:	00000000 	andeq	r0, r0, r0
    1698:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    169c:	f3000004 	vhadd.u8	d0, d0, d4
    16a0:	01000004 	tsteq	r0, r4
    16a4:	04f35000 	ldrbteq	r5, [r3], #0
    16a8:	05240000 	streq	r0, [r4, #-0]!
    16ac:	00040000 	andeq	r0, r4, r0
    16b0:	9f5001f3 	svcls	0x005001f3
	...
    16bc:	000004f4 	strdeq	r0, [r0], -r4
    16c0:	000004ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    16c4:	00500001 	subseq	r0, r0, r1
    16c8:	00000000 	andeq	r0, r0, r0
    16cc:	24000000 	strcs	r0, [r0], #-0
    16d0:	34000005 	strcc	r0, [r0], #-5
    16d4:	01000005 	tsteq	r0, r5
    16d8:	05345000 	ldreq	r5, [r4, #-0]!
    16dc:	05500000 	ldrbeq	r0, [r0, #-0]
    16e0:	00010000 	andeq	r0, r1, r0
    16e4:	00000055 	andeq	r0, r0, r5, asr r0
    16e8:	00000000 	andeq	r0, r0, r0
    16ec:	00052400 	andeq	r2, r5, r0, lsl #8
    16f0:	00053400 	andeq	r3, r5, r0, lsl #8
    16f4:	51000100 	mrspl	r0, (UNDEF: 16)
    16f8:	00000534 	andeq	r0, r0, r4, lsr r5
    16fc:	00000550 	andeq	r0, r0, r0, asr r5
    1700:	00540001 	subseq	r0, r4, r1
    1704:	00000000 	andeq	r0, r0, r0
    1708:	50000000 	andpl	r0, r0, r0
    170c:	6c000005 	stcvs	0, cr0, [r0], {5}
    1710:	01000005 	tsteq	r0, r5
    1714:	056c5000 	strbeq	r5, [ip, #-0]!
    1718:	05bc0000 	ldreq	r0, [ip, #0]!
    171c:	00010000 	andeq	r0, r1, r0
    1720:	0005bc55 	andeq	fp, r5, r5, asr ip
    1724:	0005d400 	andeq	sp, r5, r0, lsl #8
    1728:	f3000400 	vshl.u8	d0, d0, d0
    172c:	009f5001 	addseq	r5, pc, r1
    1730:	00000000 	andeq	r0, r0, r0
    1734:	7c000000 	stcvc	0, cr0, [r0], {-0}
    1738:	8b000005 	blhi	1754 <_start-0x68ac>
    173c:	01000005 	tsteq	r0, r5
    1740:	058b5000 	streq	r5, [fp]
    1744:	05a40000 	streq	r0, [r4, #0]!
    1748:	00010000 	andeq	r0, r1, r0
    174c:	0005a454 	andeq	sl, r5, r4, asr r4
    1750:	0005a800 	andeq	sl, r5, r0, lsl #16
    1754:	50000100 	andpl	r0, r0, r0, lsl #2
    1758:	000005a8 	andeq	r0, r0, r8, lsr #11
    175c:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
    1760:	bc540001 	mrrclt	0, 0, r0, r4, cr1
    1764:	d4000005 	strle	r0, [r0], #-5
    1768:	01000005 	tsteq	r0, r5
    176c:	00005000 	andeq	r5, r0, r0
    1770:	00000000 	andeq	r0, r0, r0
    1774:	05d40000 	ldrbeq	r0, [r4]
    1778:	05e70000 	strbeq	r0, [r7, #0]!
    177c:	00010000 	andeq	r0, r1, r0
    1780:	0005e750 	andeq	lr, r5, r0, asr r7
    1784:	00062000 	andeq	r2, r6, r0
    1788:	f3000400 	vshl.u8	d0, d0, d0
    178c:	009f5001 	addseq	r5, pc, r1
    1790:	00000000 	andeq	r0, r0, r0
    1794:	d4000000 	strle	r0, [r0], #-0
    1798:	e7000005 	str	r0, [r0, -r5]
    179c:	01000005 	tsteq	r0, r5
    17a0:	05e75100 	strbeq	r5, [r7, #256]!	; 0x100
    17a4:	06200000 	strteq	r0, [r0], -r0
    17a8:	00040000 	andeq	r0, r4, r0
    17ac:	9f5101f3 	svcls	0x005101f3
	...
    17b8:	000005d4 	ldrdeq	r0, [r0], -r4
    17bc:	000005e7 	andeq	r0, r0, r7, ror #11
    17c0:	e7520001 	ldrb	r0, [r2, -r1]
    17c4:	20000005 	andcs	r0, r0, r5
    17c8:	04000006 	streq	r0, [r0], #-6
    17cc:	5201f300 	andpl	pc, r1, #0, 6
    17d0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    17d4:	00000000 	andeq	r0, r0, r0
    17d8:	0005d400 	andeq	sp, r5, r0, lsl #8
    17dc:	0005e700 	andeq	lr, r5, r0, lsl #14
    17e0:	53000100 	movwpl	r0, #256	; 0x100
    17e4:	000005e7 	andeq	r0, r0, r7, ror #11
    17e8:	00000620 	andeq	r0, r0, r0, lsr #12
    17ec:	01f30004 	mvnseq	r0, r4
    17f0:	00009f53 	andeq	r9, r0, r3, asr pc
    17f4:	00000000 	andeq	r0, r0, r0
    17f8:	05e80000 	strbeq	r0, [r8, #0]!
    17fc:	05f30000 	ldrbeq	r0, [r3, #0]!
    1800:	00010000 	andeq	r0, r1, r0
    1804:	00060c50 	andeq	r0, r6, r0, asr ip
    1808:	00062000 	andeq	r2, r6, r0
    180c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1818:	000000fc 	strdeq	r0, [r0], -ip
    181c:	00000104 	andeq	r0, r0, r4, lsl #2
    1820:	04500001 	ldrbeq	r0, [r0], #-1
    1824:	28000001 	stmdacs	r0, {r0}
    1828:	01000001 	tsteq	r0, r1
    182c:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    1838:	00900000 	addseq	r0, r0, r0
    183c:	00010000 	andeq	r0, r1, r0
    1840:	00009050 	andeq	r9, r0, r0, asr r0
    1844:	0000d400 	andeq	sp, r0, r0, lsl #8
    1848:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    1854:	00000048 	andeq	r0, r0, r8, asr #32
    1858:	0000004c 	andeq	r0, r0, ip, asr #32
    185c:	54550001 	ldrbpl	r0, [r5], #-1
    1860:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    1864:	01000000 	mrseq	r0, (UNDEF: 0)
    1868:	00605500 	rsbeq	r5, r0, r0, lsl #10
    186c:	00640000 	rsbeq	r0, r4, r0
    1870:	00010000 	andeq	r0, r1, r0
    1874:	00006c55 	andeq	r6, r0, r5, asr ip
    1878:	00007000 	andeq	r7, r0, r0
    187c:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    1880:	00000078 	andeq	r0, r0, r8, ror r0
    1884:	0000007c 	andeq	r0, r0, ip, ror r0
    1888:	84550001 	ldrbhi	r0, [r5], #-1
    188c:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    1890:	01000000 	mrseq	r0, (UNDEF: 0)
    1894:	008c5500 	addeq	r5, ip, r0, lsl #10
    1898:	00d40000 	sbcseq	r0, r4, r0
    189c:	00010000 	andeq	r0, r1, r0
    18a0:	00000055 	andeq	r0, r0, r5, asr r0
    18a4:	00000000 	andeq	r0, r0, r0
    18a8:	00001c00 	andeq	r1, r0, r0, lsl #24
    18ac:	00004400 	andeq	r4, r0, r0, lsl #8
    18b0:	53000100 	movwpl	r0, #256	; 0x100
    18b4:	00000044 	andeq	r0, r0, r4, asr #32
    18b8:	0000004c 	andeq	r0, r0, ip, asr #32
    18bc:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    18c0:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    18c4:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    18c8:	00cccccc 	sbceq	ip, ip, ip, asr #25
    18cc:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    18d0:	25f72008 	ldrbcs	r2, [r7, #8]!
    18d4:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    18d8:	004c9f25 	subeq	r9, ip, r5, lsr #30
    18dc:	00500000 	subseq	r0, r0, r0
    18e0:	00010000 	andeq	r0, r1, r0
    18e4:	00005053 	andeq	r5, r0, r3, asr r0
    18e8:	00005800 	andeq	r5, r0, r0, lsl #16
    18ec:	70001c00 	andvc	r1, r0, r0, lsl #24
    18f0:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    18f4:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    18f8:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    18fc:	00000000 	andeq	r0, r0, r0
    1900:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1904:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1908:	589f2533 	ldmpl	pc, {r0, r1, r4, r5, r8, sl, sp}	; <UNPREDICTABLE>
    190c:	5c000000 	stcpl	0, cr0, [r0], {-0}
    1910:	01000000 	mrseq	r0, (UNDEF: 0)
    1914:	005c5300 	subseq	r5, ip, r0, lsl #6
    1918:	00640000 	rsbeq	r0, r4, r0
    191c:	001c0000 	andseq	r0, ip, r0
    1920:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    1924:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    1928:	cccccd08 	stclgt	13, cr12, [ip], {8}
    192c:	000000cc 	andeq	r0, r0, ip, asr #1
    1930:	20081e00 	andcs	r1, r8, r0, lsl #28
    1934:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1938:	9f25332c 	svcls	0x0025332c
    193c:	00000064 	andeq	r0, r0, r4, rrx
    1940:	00000068 	andeq	r0, r0, r8, rrx
    1944:	68530001 	ldmdavs	r3, {r0}^
    1948:	70000000 	andvc	r0, r0, r0
    194c:	1c000000 	stcne	0, cr0, [r0], {-0}
    1950:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    1954:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    1958:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    195c:	0000cccc 	andeq	ip, r0, ip, asr #25
    1960:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1964:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1968:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    196c:	0000709f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1970:	00007400 	andeq	r7, r0, r0, lsl #8
    1974:	53000100 	movwpl	r0, #256	; 0x100
    1978:	00000074 	andeq	r0, r0, r4, ror r0
    197c:	0000007c 	andeq	r0, r0, ip, ror r0
    1980:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    1984:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1988:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    198c:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1990:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1994:	25f72008 	ldrbcs	r2, [r7, #8]!
    1998:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    199c:	007c9f25 	rsbseq	r9, ip, r5, lsr #30
    19a0:	00800000 	addeq	r0, r0, r0
    19a4:	00010000 	andeq	r0, r1, r0
    19a8:	00008053 	andeq	r8, r0, r3, asr r0
    19ac:	00008800 	andeq	r8, r0, r0, lsl #16
    19b0:	70001c00 	andvc	r1, r0, r0, lsl #24
    19b4:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    19b8:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    19bc:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    19c0:	00000000 	andeq	r0, r0, r0
    19c4:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    19c8:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    19cc:	889f2533 	ldmhi	pc, {r0, r1, r4, r5, r8, sl, sp}	; <UNPREDICTABLE>
    19d0:	8c000000 	stchi	0, cr0, [r0], {-0}
    19d4:	01000000 	mrseq	r0, (UNDEF: 0)
    19d8:	008c5300 	addeq	r5, ip, r0, lsl #6
    19dc:	00900000 	addseq	r0, r0, r0
    19e0:	001c0000 	andseq	r0, ip, r0
    19e4:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    19e8:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    19ec:	cccccd08 	stclgt	13, cr12, [ip], {8}
    19f0:	000000cc 	andeq	r0, r0, ip, asr #1
    19f4:	20081e00 	andcs	r1, r8, r0, lsl #28
    19f8:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    19fc:	9f25332c 	svcls	0x0025332c
    1a00:	00000090 	muleq	r0, r0, r0
    1a04:	00000098 	muleq	r0, r8, r0
    1a08:	0074001c 	rsbseq	r0, r4, ip, lsl r0
    1a0c:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1a10:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1a14:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1a18:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1a1c:	25f72008 	ldrbcs	r2, [r7, #8]!
    1a20:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1a24:	00989f25 	addseq	r9, r8, r5, lsr #30
    1a28:	009c0000 	addseq	r0, ip, r0
    1a2c:	00170000 	andseq	r0, r7, r0
    1a30:	2cf70074 	ldclcs	0, cr0, [r7], #464	; 0x1d0
    1a34:	007125f7 	ldrshteq	r2, [r1], #-87	; 0xffffffa9
    1a38:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1a3c:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1a40:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1a44:	9c9f2533 	cfldr32ls	mvfx2, [pc], {51}	; 0x33
    1a48:	d4000000 	strle	r0, [r0], #-0
    1a4c:	1c000000 	stcne	0, cr0, [r0], {-0}
    1a50:	f7007400 			; <UNDEFINED> instruction: 0xf7007400
    1a54:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    1a58:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1a5c:	0000cccc 	andeq	ip, r0, ip, asr #25
    1a60:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1a64:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1a68:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1a6c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1a70:	00000000 	andeq	r0, r0, r0
    1a74:	00009400 	andeq	r9, r0, r0, lsl #8
    1a78:	0000b800 	andeq	fp, r0, r0, lsl #16
    1a7c:	50000100 	andpl	r0, r0, r0, lsl #2
    1a80:	000000b8 	strheq	r0, [r0], -r8
    1a84:	000000c4 	andeq	r0, r0, r4, asr #1
    1a88:	71310008 	teqvc	r1, r8
    1a8c:	00732400 	rsbseq	r2, r3, r0, lsl #8
    1a90:	00c49f21 	sbceq	r9, r4, r1, lsr #30
    1a94:	00c70000 	sbceq	r0, r7, r0
    1a98:	00010000 	andeq	r0, r1, r0
    1a9c:	00000051 	andeq	r0, r0, r1, asr r0
    1aa0:	00000000 	andeq	r0, r0, r0
    1aa4:	0000d400 	andeq	sp, r0, r0, lsl #8
    1aa8:	0000f800 	andeq	pc, r0, r0, lsl #16
    1aac:	50000100 	andpl	r0, r0, r0, lsl #2
    1ab0:	000000f8 	strdeq	r0, [r0], -r8
    1ab4:	0000010c 	andeq	r0, r0, ip, lsl #2
    1ab8:	01f30004 	mvnseq	r0, r4
    1abc:	00009f50 	andeq	r9, r0, r0, asr pc
    1ac0:	00000000 	andeq	r0, r0, r0
    1ac4:	00e00000 	rsceq	r0, r0, r0
    1ac8:	00e80000 	rsceq	r0, r8, r0
    1acc:	00020000 	andeq	r0, r2, r0
    1ad0:	00e89f30 	rsceq	r9, r8, r0, lsr pc
    1ad4:	00e80000 	rsceq	r0, r8, r0
    1ad8:	00010000 	andeq	r0, r1, r0
    1adc:	0000e852 	andeq	lr, r0, r2, asr r8
    1ae0:	0000f000 	andeq	pc, r0, r0
    1ae4:	30000200 	andcc	r0, r0, r0, lsl #4
    1ae8:	0000f09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1aec:	00010300 	andeq	r0, r1, r0, lsl #6
    1af0:	52000100 	andpl	r0, r0, #0, 2
	...
    1afc:	000000e0 	andeq	r0, r0, r0, ror #1
    1b00:	000000f4 	strdeq	r0, [r0], -r4
    1b04:	9f300002 	svcls	0x00300002
    1b08:	000000f4 	strdeq	r0, [r0], -r4
    1b0c:	00000100 	andeq	r0, r0, r0, lsl #2
    1b10:	73310005 	teqvc	r1, #5
    1b14:	009f2400 	addseq	r2, pc, r0, lsl #8
    1b18:	03000001 	movweq	r0, #1
    1b1c:	01000001 	tsteq	r0, r1
    1b20:	01035100 	mrseq	r5, (UNDEF: 19)
    1b24:	010c0000 	mrseq	r0, (UNDEF: 12)
    1b28:	00080000 	andeq	r0, r8, r0
    1b2c:	5001f331 	andpl	pc, r1, r1, lsr r3	; <UNPREDICTABLE>
    1b30:	9f241a4f 	svcls	0x00241a4f
	...
    1b3c:	0000010c 	andeq	r0, r0, ip, lsl #2
    1b40:	00000130 	andeq	r0, r0, r0, lsr r1
    1b44:	30500001 	subscc	r0, r0, r1
    1b48:	44000001 	strmi	r0, [r0], #-1
    1b4c:	04000001 	streq	r0, [r0], #-1
    1b50:	5001f300 	andpl	pc, r1, r0, lsl #6
    1b54:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1b58:	00000000 	andeq	r0, r0, r0
    1b5c:	00011800 	andeq	r1, r1, r0, lsl #16
    1b60:	00012000 	andeq	r2, r1, r0
    1b64:	30000200 	andcc	r0, r0, r0, lsl #4
    1b68:	0001209f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
    1b6c:	00012000 	andeq	r2, r1, r0
    1b70:	52000100 	andpl	r0, r0, #0, 2
    1b74:	00000120 	andeq	r0, r0, r0, lsr #2
    1b78:	00000128 	andeq	r0, r0, r8, lsr #2
    1b7c:	9f300002 	svcls	0x00300002
    1b80:	00000128 	andeq	r0, r0, r8, lsr #2
    1b84:	0000013b 	andeq	r0, r0, fp, lsr r1
    1b88:	00520001 	subseq	r0, r2, r1
    1b8c:	00000000 	andeq	r0, r0, r0
    1b90:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1b94:	2c000001 	stccs	0, cr0, [r0], {1}
    1b98:	02000001 	andeq	r0, r0, #1
    1b9c:	2c9f3000 	ldccs	0, cr3, [pc], {0}
    1ba0:	38000001 	stmdacc	r0, {r0}
    1ba4:	05000001 	streq	r0, [r0, #-1]
    1ba8:	00733100 	rsbseq	r3, r3, r0, lsl #2
    1bac:	01389f24 	teqeq	r8, r4, lsr #30
    1bb0:	013b0000 	teqeq	fp, r0
    1bb4:	00010000 	andeq	r0, r1, r0
    1bb8:	00013b51 	andeq	r3, r1, r1, asr fp
    1bbc:	00014400 	andeq	r4, r1, r0, lsl #8
    1bc0:	31000800 	tstcc	r0, r0, lsl #16
    1bc4:	4f5001f3 	svcmi	0x005001f3
    1bc8:	009f241a 	addseq	r2, pc, sl, lsl r4	; <UNPREDICTABLE>
    1bcc:	00000000 	andeq	r0, r0, r0
    1bd0:	44000000 	strmi	r0, [r0], #-0
    1bd4:	d4000001 	strle	r0, [r0], #-1
    1bd8:	01000001 	tsteq	r0, r1
    1bdc:	01d45000 	bicseq	r5, r4, r0
    1be0:	02100000 	andseq	r0, r0, #0
    1be4:	00010000 	andeq	r0, r1, r0
    1be8:	00000054 	andeq	r0, r0, r4, asr r0
    1bec:	00000000 	andeq	r0, r0, r0
    1bf0:	00018c00 	andeq	r8, r1, r0, lsl #24
    1bf4:	00019000 	andeq	r9, r1, r0
    1bf8:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    1bfc:	00000198 	muleq	r0, r8, r1
    1c00:	0000019c 	muleq	r0, ip, r1
    1c04:	a4550001 	ldrbge	r0, [r5], #-1
    1c08:	a8000001 	stmdage	r0, {r0}
    1c0c:	01000001 	tsteq	r0, r1
    1c10:	01b05500 	lslseq	r5, r0, #10
    1c14:	01b40000 			; <UNDEFINED> instruction: 0x01b40000
    1c18:	00010000 	andeq	r0, r1, r0
    1c1c:	0001bc55 	andeq	fp, r1, r5, asr ip
    1c20:	0001c000 	andeq	ip, r1, r0
    1c24:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    1c28:	000001c8 	andeq	r0, r0, r8, asr #3
    1c2c:	000001cc 	andeq	r0, r0, ip, asr #3
    1c30:	d0550001 	subsle	r0, r5, r1
    1c34:	10000001 	andne	r0, r0, r1
    1c38:	01000002 	tsteq	r0, r2
    1c3c:	00005500 	andeq	r5, r0, r0, lsl #10
    1c40:	00000000 	andeq	r0, r0, r0
    1c44:	01600000 	cmneq	r0, r0
    1c48:	01880000 	orreq	r0, r8, r0
    1c4c:	00010000 	andeq	r0, r1, r0
    1c50:	00018853 	andeq	r8, r1, r3, asr r8
    1c54:	00019000 	andeq	r9, r1, r0
    1c58:	70001c00 	andvc	r1, r0, r0, lsl #24
    1c5c:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1c60:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1c64:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1c68:	00000000 	andeq	r0, r0, r0
    1c6c:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1c70:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1c74:	909f2533 	addsls	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
    1c78:	94000001 	strls	r0, [r0], #-1
    1c7c:	01000001 	tsteq	r0, r1
    1c80:	01945300 	orrseq	r5, r4, r0, lsl #6
    1c84:	019c0000 	orrseq	r0, ip, r0
    1c88:	001c0000 	andseq	r0, ip, r0
    1c8c:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    1c90:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    1c94:	cccccd08 	stclgt	13, cr12, [ip], {8}
    1c98:	000000cc 	andeq	r0, r0, ip, asr #1
    1c9c:	20081e00 	andcs	r1, r8, r0, lsl #28
    1ca0:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1ca4:	9f25332c 	svcls	0x0025332c
    1ca8:	0000019c 	muleq	r0, ip, r1
    1cac:	000001a0 	andeq	r0, r0, r0, lsr #3
    1cb0:	a0530001 	subsge	r0, r3, r1
    1cb4:	a8000001 	stmdage	r0, {r0}
    1cb8:	1c000001 	stcne	0, cr0, [r0], {1}
    1cbc:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    1cc0:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    1cc4:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1cc8:	0000cccc 	andeq	ip, r0, ip, asr #25
    1ccc:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1cd0:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1cd4:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1cd8:	0001a89f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
    1cdc:	0001ac00 	andeq	sl, r1, r0, lsl #24
    1ce0:	53000100 	movwpl	r0, #256	; 0x100
    1ce4:	000001ac 	andeq	r0, r0, ip, lsr #3
    1ce8:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
    1cec:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    1cf0:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1cf4:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1cf8:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1cfc:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1d00:	25f72008 	ldrbcs	r2, [r7, #8]!
    1d04:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1d08:	01b49f25 			; <UNDEFINED> instruction: 0x01b49f25
    1d0c:	01b80000 			; <UNDEFINED> instruction: 0x01b80000
    1d10:	00010000 	andeq	r0, r1, r0
    1d14:	0001b853 	andeq	fp, r1, r3, asr r8
    1d18:	0001c000 	andeq	ip, r1, r0
    1d1c:	70001c00 	andvc	r1, r0, r0, lsl #24
    1d20:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1d24:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1d28:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1d2c:	00000000 	andeq	r0, r0, r0
    1d30:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1d34:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1d38:	c09f2533 	addsgt	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
    1d3c:	c4000001 	strgt	r0, [r0], #-1
    1d40:	01000001 	tsteq	r0, r1
    1d44:	01c45300 	biceq	r5, r4, r0, lsl #6
    1d48:	01cc0000 	biceq	r0, ip, r0
    1d4c:	001c0000 	andseq	r0, ip, r0
    1d50:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    1d54:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    1d58:	cccccd08 	stclgt	13, cr12, [ip], {8}
    1d5c:	000000cc 	andeq	r0, r0, ip, asr #1
    1d60:	20081e00 	andcs	r1, r8, r0, lsl #28
    1d64:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1d68:	9f25332c 	svcls	0x0025332c
    1d6c:	000001cc 	andeq	r0, r0, ip, asr #3
    1d70:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1d74:	d0530001 	subsle	r0, r3, r1
    1d78:	d4000001 	strle	r0, [r0], #-1
    1d7c:	1c000001 	stcne	0, cr0, [r0], {1}
    1d80:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    1d84:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    1d88:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1d8c:	0000cccc 	andeq	ip, r0, ip, asr #25
    1d90:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1d94:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1d98:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1d9c:	0001d49f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
    1da0:	0001dc00 	andeq	sp, r1, r0, lsl #24
    1da4:	74001c00 	strvc	r1, [r0], #-3072	; 0xc00
    1da8:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1dac:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1db0:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1db4:	00000000 	andeq	r0, r0, r0
    1db8:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1dbc:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1dc0:	dc9f2533 	cfldr32le	mvfx2, [pc], {51}	; 0x33
    1dc4:	e0000001 	and	r0, r0, r1
    1dc8:	17000001 	strne	r0, [r0, -r1]
    1dcc:	f7007400 			; <UNDEFINED> instruction: 0xf7007400
    1dd0:	7125f72c 	msrvc	SP_abt, ip
    1dd4:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1dd8:	20081e25 	andcs	r1, r8, r5, lsr #28
    1ddc:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1de0:	9f25332c 	svcls	0x0025332c
    1de4:	000001e0 	andeq	r0, r0, r0, ror #3
    1de8:	00000210 	andeq	r0, r0, r0, lsl r2
    1dec:	0074001c 	rsbseq	r0, r4, ip, lsl r0
    1df0:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1df4:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1df8:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1dfc:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1e00:	25f72008 	ldrbcs	r2, [r7, #8]!
    1e04:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1e08:	00009f25 	andeq	r9, r0, r5, lsr #30
    1e0c:	00000000 	andeq	r0, r0, r0
    1e10:	01d80000 	bicseq	r0, r8, r0
    1e14:	01fc0000 	mvnseq	r0, r0
    1e18:	00010000 	andeq	r0, r1, r0
    1e1c:	0001fc50 	andeq	pc, r1, r0, asr ip	; <UNPREDICTABLE>
    1e20:	00020300 	andeq	r0, r2, r0, lsl #6
    1e24:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1e30:	00000210 	andeq	r0, r0, r0, lsl r2
    1e34:	0000022c 	andeq	r0, r0, ip, lsr #4
    1e38:	2c500001 	mrrccs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    1e3c:	34000002 	strcc	r0, [r0], #-2
    1e40:	01000002 	tsteq	r0, r2
    1e44:	02345400 	eorseq	r5, r4, #0, 8
    1e48:	023c0000 	eorseq	r0, ip, #0
    1e4c:	00010000 	andeq	r0, r1, r0
    1e50:	00023c50 	andeq	r3, r2, r0, asr ip
    1e54:	00024400 	andeq	r4, r2, r0, lsl #8
    1e58:	54000100 	strpl	r0, [r0], #-256	; 0x100
    1e5c:	00000244 	andeq	r0, r0, r4, asr #4
    1e60:	00000250 	andeq	r0, r0, r0, asr r2
    1e64:	01f30004 	mvnseq	r0, r4
    1e68:	02509f50 	subseq	r9, r0, #80, 30	; 0x140
    1e6c:	02540000 	subseq	r0, r4, #0
    1e70:	00010000 	andeq	r0, r1, r0
    1e74:	00025450 	andeq	r5, r2, r0, asr r4
    1e78:	00025c00 	andeq	r5, r2, r0, lsl #24
    1e7c:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    1e88:	00000220 	andeq	r0, r0, r0, lsr #4
    1e8c:	00000230 	andeq	r0, r0, r0, lsr r2
    1e90:	9f300002 	svcls	0x00300002
    1e94:	00000230 	andeq	r0, r0, r0, lsr r2
    1e98:	00000234 	andeq	r0, r0, r4, lsr r2
    1e9c:	34500001 	ldrbcc	r0, [r0], #-1
    1ea0:	40000002 	andmi	r0, r0, r2
    1ea4:	02000002 	andeq	r0, r0, #2
    1ea8:	409f3000 	addsmi	r3, pc, r0
    1eac:	4c000002 	stcmi	0, cr0, [r0], {2}
    1eb0:	01000002 	tsteq	r0, r2
    1eb4:	00005000 	andeq	r5, r0, r0
    1eb8:	00000000 	andeq	r0, r0, r0
    1ebc:	025c0000 	subseq	r0, ip, #0
    1ec0:	02730000 	rsbseq	r0, r3, #0
    1ec4:	00010000 	andeq	r0, r1, r0
    1ec8:	00027350 	andeq	r7, r2, r0, asr r3
    1ecc:	00027800 	andeq	r7, r2, r0, lsl #16
    1ed0:	f3000400 	vshl.u8	d0, d0, d0
    1ed4:	789f5001 	ldmvc	pc, {r0, ip, lr}	; <UNPREDICTABLE>
    1ed8:	7b000002 	blvc	1ee8 <_start-0x6118>
    1edc:	01000002 	tsteq	r0, r2
    1ee0:	027b5000 	rsbseq	r5, fp, #0
    1ee4:	02800000 	addeq	r0, r0, #0
    1ee8:	00040000 	andeq	r0, r4, r0
    1eec:	9f5001f3 	svcls	0x005001f3
	...
    1ef8:	0000025c 	andeq	r0, r0, ip, asr r2
    1efc:	00000273 	andeq	r0, r0, r3, ror r2
    1f00:	73510001 	cmpvc	r1, #1
    1f04:	78000002 	stmdavc	r0, {r1}
    1f08:	04000002 	streq	r0, [r0], #-2
    1f0c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1f10:	0002789f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
    1f14:	00027b00 	andeq	r7, r2, r0, lsl #22
    1f18:	51000100 	mrspl	r0, (UNDEF: 16)
    1f1c:	0000027b 	andeq	r0, r0, fp, ror r2
    1f20:	00000280 	andeq	r0, r0, r0, lsl #5
    1f24:	01f30004 	mvnseq	r0, r4
    1f28:	00009f51 	andeq	r9, r0, r1, asr pc
    1f2c:	00000000 	andeq	r0, r0, r0
    1f30:	02800000 	addeq	r0, r0, #0
    1f34:	03180000 	tsteq	r8, #0
    1f38:	00010000 	andeq	r0, r1, r0
    1f3c:	00031850 	andeq	r1, r3, r0, asr r8
    1f40:	00035800 	andeq	r5, r3, r0, lsl #16
    1f44:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    1f50:	00000280 	andeq	r0, r0, r0, lsl #5
    1f54:	0000031b 	andeq	r0, r0, fp, lsl r3
    1f58:	1b510001 	blne	1441f64 <__bss_end__+0x14374bc>
    1f5c:	58000003 	stmdapl	r0, {r0, r1}
    1f60:	04000003 	streq	r0, [r0], #-3
    1f64:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1f68:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1f6c:	00000000 	andeq	r0, r0, r0
    1f70:	0002d000 	andeq	sp, r2, r0
    1f74:	0002d400 	andeq	sp, r2, r0, lsl #8
    1f78:	56000100 	strpl	r0, [r0], -r0, lsl #2
    1f7c:	000002dc 	ldrdeq	r0, [r0], -ip
    1f80:	000002e0 	andeq	r0, r0, r0, ror #5
    1f84:	e8560001 	ldmda	r6, {r0}^
    1f88:	ec000002 	stc	0, cr0, [r0], {2}
    1f8c:	01000002 	tsteq	r0, r2
    1f90:	02f45600 	rscseq	r5, r4, #0, 12
    1f94:	02f80000 	rscseq	r0, r8, #0
    1f98:	00010000 	andeq	r0, r1, r0
    1f9c:	00030056 	andeq	r0, r3, r6, asr r0
    1fa0:	00030400 	andeq	r0, r3, r0, lsl #8
    1fa4:	56000100 	strpl	r0, [r0], -r0, lsl #2
    1fa8:	0000030c 	andeq	r0, r0, ip, lsl #6
    1fac:	00000310 	andeq	r0, r0, r0, lsl r3
    1fb0:	14560001 	ldrbne	r0, [r6], #-1
    1fb4:	58000003 	stmdapl	r0, {r0, r1}
    1fb8:	01000003 	tsteq	r0, r3
    1fbc:	00005600 	andeq	r5, r0, r0, lsl #12
    1fc0:	00000000 	andeq	r0, r0, r0
    1fc4:	02a40000 	adceq	r0, r4, #0
    1fc8:	02cc0000 	sbceq	r0, ip, #0
    1fcc:	00010000 	andeq	r0, r1, r0
    1fd0:	0002cc53 	andeq	ip, r2, r3, asr ip
    1fd4:	0002d400 	andeq	sp, r2, r0, lsl #8
    1fd8:	70001c00 	andvc	r1, r0, r0, lsl #24
    1fdc:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1fe0:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1fe4:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1fe8:	00000000 	andeq	r0, r0, r0
    1fec:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1ff0:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1ff4:	d49f2533 	ldrle	r2, [pc], #1331	; 1ffc <_start-0x6004>
    1ff8:	d8000002 	stmdale	r0, {r1}
    1ffc:	01000002 	tsteq	r0, r2
    2000:	02d85300 	sbcseq	r5, r8, #0, 6
    2004:	02e00000 	rsceq	r0, r0, #0
    2008:	001c0000 	andseq	r0, ip, r0
    200c:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    2010:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    2014:	cccccd08 	stclgt	13, cr12, [ip], {8}
    2018:	000000cc 	andeq	r0, r0, ip, asr #1
    201c:	20081e00 	andcs	r1, r8, r0, lsl #28
    2020:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    2024:	9f25332c 	svcls	0x0025332c
    2028:	000002e0 	andeq	r0, r0, r0, ror #5
    202c:	000002e4 	andeq	r0, r0, r4, ror #5
    2030:	e4530001 	ldrb	r0, [r3], #-1
    2034:	ec000002 	stc	0, cr0, [r0], {2}
    2038:	1c000002 	stcne	0, cr0, [r0], {2}
    203c:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    2040:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    2044:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    2048:	0000cccc 	andeq	ip, r0, ip, asr #25
    204c:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    2050:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    2054:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    2058:	0002ec9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
    205c:	0002f000 	andeq	pc, r2, r0
    2060:	53000100 	movwpl	r0, #256	; 0x100
    2064:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2068:	000002f8 	strdeq	r0, [r0], -r8
    206c:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    2070:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    2074:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    2078:	00cccccc 	sbceq	ip, ip, ip, asr #25
    207c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2080:	25f72008 	ldrbcs	r2, [r7, #8]!
    2084:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    2088:	02f89f25 	rscseq	r9, r8, #37, 30	; 0x94
    208c:	02fc0000 	rscseq	r0, ip, #0
    2090:	00010000 	andeq	r0, r1, r0
    2094:	0002fc53 	andeq	pc, r2, r3, asr ip	; <UNPREDICTABLE>
    2098:	00030400 	andeq	r0, r3, r0, lsl #8
    209c:	70001c00 	andvc	r1, r0, r0, lsl #24
    20a0:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    20a4:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    20a8:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    20ac:	00000000 	andeq	r0, r0, r0
    20b0:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    20b4:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    20b8:	049f2533 	ldreq	r2, [pc], #1331	; 20c0 <_start-0x5f40>
    20bc:	08000003 	stmdaeq	r0, {r0, r1}
    20c0:	01000003 	tsteq	r0, r3
    20c4:	03085300 	movweq	r5, #33536	; 0x8300
    20c8:	03100000 	tsteq	r0, #0
    20cc:	001c0000 	andseq	r0, ip, r0
    20d0:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    20d4:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    20d8:	cccccd08 	stclgt	13, cr12, [ip], {8}
    20dc:	000000cc 	andeq	r0, r0, ip, asr #1
    20e0:	20081e00 	andcs	r1, r8, r0, lsl #28
    20e4:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    20e8:	9f25332c 	svcls	0x0025332c
    20ec:	00000310 	andeq	r0, r0, r0, lsl r3
    20f0:	00000314 	andeq	r0, r0, r4, lsl r3
    20f4:	14530001 	ldrbne	r0, [r3], #-1
    20f8:	18000003 	stmdane	r0, {r0, r1}
    20fc:	1c000003 	stcne	0, cr0, [r0], {3}
    2100:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    2104:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    2108:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    210c:	0000cccc 	andeq	ip, r0, ip, asr #25
    2110:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    2114:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    2118:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    211c:	0003189f 	muleq	r3, pc, r8	; <UNPREDICTABLE>
    2120:	00032000 	andeq	r2, r3, r0
    2124:	74001c00 	strvc	r1, [r0], #-3072	; 0xc00
    2128:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    212c:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    2130:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    2134:	00000000 	andeq	r0, r0, r0
    2138:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    213c:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    2140:	209f2533 	addscs	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
    2144:	24000003 	strcs	r0, [r0], #-3
    2148:	17000003 	strne	r0, [r0, -r3]
    214c:	f7007400 			; <UNDEFINED> instruction: 0xf7007400
    2150:	7325f72c 	msrvc	CPSR_sc, #44, 14	; 0xb00000
    2154:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    2158:	20081e25 	andcs	r1, r8, r5, lsr #28
    215c:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    2160:	9f25332c 	svcls	0x0025332c
    2164:	00000324 	andeq	r0, r0, r4, lsr #6
    2168:	00000358 	andeq	r0, r0, r8, asr r3
    216c:	0074001c 	rsbseq	r0, r4, ip, lsl r0
    2170:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    2174:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    2178:	00cccccc 	sbceq	ip, ip, ip, asr #25
    217c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2180:	25f72008 	ldrbcs	r2, [r7, #8]!
    2184:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    2188:	00009f25 	andeq	r9, r0, r5, lsr #30
    218c:	00000000 	andeq	r0, r0, r0
    2190:	031c0000 	tsteq	ip, #0
    2194:	03400000 	movteq	r0, #0
    2198:	00010000 	andeq	r0, r1, r0
    219c:	00034050 	andeq	r4, r3, r0, asr r0
    21a0:	00034800 	andeq	r4, r3, r0, lsl #16
    21a4:	75000900 	strvc	r0, [r0, #-2304]	; 0x900
    21a8:	24007300 	strcs	r7, [r0], #-768	; 0x300
    21ac:	9f210071 	svcls	0x00210071
    21b0:	00000348 	andeq	r0, r0, r8, asr #6
    21b4:	0000034b 	andeq	r0, r0, fp, asr #6
    21b8:	00510001 	subseq	r0, r1, r1
    21bc:	00000000 	andeq	r0, r0, r0
    21c0:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    21c4:	64000003 	strvs	r0, [r0], #-3
    21c8:	01000003 	tsteq	r0, r3
    21cc:	03645000 	cmneq	r4, #0
    21d0:	03840000 	orreq	r0, r4, #0
    21d4:	00040000 	andeq	r0, r4, r0
    21d8:	9f5001f3 	svcls	0x005001f3
	...
    21e4:	00000384 	andeq	r0, r0, r4, lsl #7
    21e8:	00000397 	muleq	r0, r7, r3
    21ec:	97500001 	ldrbls	r0, [r0, -r1]
    21f0:	d0000003 	andle	r0, r0, r3
    21f4:	01000003 	tsteq	r0, r3
    21f8:	03d05400 	bicseq	r5, r0, #0, 8
    21fc:	04080000 	streq	r0, [r8], #-0
    2200:	00040000 	andeq	r0, r4, r0
    2204:	9f5001f3 	svcls	0x005001f3
	...
    2210:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2214:	000003f4 	strdeq	r0, [r0], -r4
    2218:	f4500001 			; <UNDEFINED> instruction: 0xf4500001
    221c:	fb000003 	blx	2232 <_start-0x5dce>
    2220:	01000003 	tsteq	r0, r3
    2224:	00005100 	andeq	r5, r0, r0, lsl #2
    2228:	00000000 	andeq	r0, r0, r0
    222c:	03ac0000 			; <UNDEFINED> instruction: 0x03ac0000
    2230:	03b40000 			; <UNDEFINED> instruction: 0x03b40000
    2234:	00010000 	andeq	r0, r1, r0
    2238:	0003b450 	andeq	fp, r3, r0, asr r4
    223c:	0003bb00 	andeq	fp, r3, r0, lsl #22
    2240:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    224c:	000003cc 	andeq	r0, r0, ip, asr #7
    2250:	000003d8 	ldrdeq	r0, [r0], -r8
    2254:	d8500001 	ldmdale	r0, {r0}^
    2258:	df000003 	svcle	0x00000003
    225c:	01000003 	tsteq	r0, r3
    2260:	00005100 	andeq	r5, r0, r0, lsl #2
    2264:	00000000 	andeq	r0, r0, r0
    2268:	04080000 	streq	r0, [r8], #-0
    226c:	041b0000 	ldreq	r0, [fp], #-0
    2270:	00010000 	andeq	r0, r1, r0
    2274:	00041b50 	andeq	r1, r4, r0, asr fp
    2278:	00045400 	andeq	r5, r4, r0, lsl #8
    227c:	54000100 	strpl	r0, [r0], #-256	; 0x100
    2280:	00000454 	andeq	r0, r0, r4, asr r4
    2284:	0000048c 	andeq	r0, r0, ip, lsl #9
    2288:	01f30004 	mvnseq	r0, r4
    228c:	00009f50 	andeq	r9, r0, r0, asr pc
    2290:	00000000 	andeq	r0, r0, r0
    2294:	04740000 	ldrbteq	r0, [r4], #-0
    2298:	04780000 	ldrbteq	r0, [r8], #-0
    229c:	00010000 	andeq	r0, r1, r0
    22a0:	00047850 	andeq	r7, r4, r0, asr r8
    22a4:	00047f00 	andeq	r7, r4, r0, lsl #30
    22a8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    22b4:	00000430 	andeq	r0, r0, r0, lsr r4
    22b8:	00000438 	andeq	r0, r0, r8, lsr r4
    22bc:	38500001 	ldmdacc	r0, {r0}^
    22c0:	3f000004 	svccc	0x00000004
    22c4:	01000004 	tsteq	r0, r4
    22c8:	00005100 	andeq	r5, r0, r0, lsl #2
    22cc:	00000000 	andeq	r0, r0, r0
    22d0:	04500000 	ldrbeq	r0, [r0], #-0
    22d4:	045c0000 	ldrbeq	r0, [ip], #-0
    22d8:	00010000 	andeq	r0, r1, r0
    22dc:	00045c50 	andeq	r5, r4, r0, asr ip
    22e0:	00046300 	andeq	r6, r4, r0, lsl #6
    22e4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    22f0:	0000048c 	andeq	r0, r0, ip, lsl #9
    22f4:	0000049f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    22f8:	9f500001 	svcls	0x00500001
    22fc:	e0000004 	and	r0, r0, r4
    2300:	01000004 	tsteq	r0, r4
    2304:	04e05400 	strbteq	r5, [r0], #1024	; 0x400
    2308:	05040000 	streq	r0, [r4, #-0]
    230c:	00040000 	andeq	r0, r4, r0
    2310:	9f5001f3 	svcls	0x005001f3
    2314:	00000504 	andeq	r0, r0, r4, lsl #10
    2318:	00000508 	andeq	r0, r0, r8, lsl #10
    231c:	08500001 	ldmdaeq	r0, {r0}^
    2320:	10000005 	andne	r0, r0, r5
    2324:	01000005 	tsteq	r0, r5
    2328:	00005400 	andeq	r5, r0, r0, lsl #8
    232c:	00000000 	andeq	r0, r0, r0
    2330:	04b40000 	ldrteq	r0, [r4], #0
    2334:	04c30000 	strbeq	r0, [r3], #0
    2338:	00080000 	andeq	r0, r8, r0
    233c:	24007431 	strcs	r7, [r0], #-1073	; 0x431
    2340:	9f1a0070 	svcls	0x001a0070
	...
    234c:	000004e0 	andeq	r0, r0, r0, ror #9
    2350:	000004f8 	strdeq	r0, [r0], -r8
    2354:	00540001 	subseq	r0, r4, r1
    2358:	00000000 	andeq	r0, r0, r0
    235c:	10000000 	andne	r0, r0, r0
    2360:	23000005 	movwcs	r0, #5
    2364:	01000005 	tsteq	r0, r5
    2368:	05235000 	streq	r5, [r3, #-0]!
    236c:	05480000 	strbeq	r0, [r8, #-0]
    2370:	00010000 	andeq	r0, r1, r0
    2374:	00054854 	andeq	r4, r5, r4, asr r8
    2378:	00056800 	andeq	r6, r5, r0, lsl #16
    237c:	f3000400 	vshl.u8	d0, d0, d0
    2380:	009f5001 	addseq	r5, pc, r1
	...
    238c:	04000000 	streq	r0, [r0], #-0
    2390:	01000000 	mrseq	r0, (UNDEF: 0)
    2394:	00045200 	andeq	r5, r4, r0, lsl #4
    2398:	00200000 	eoreq	r0, r0, r0
    239c:	00040000 	andeq	r0, r4, r0
    23a0:	9f5201f3 	svcls	0x005201f3
	...
    23b0:	0000000c 	andeq	r0, r0, ip
    23b4:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    23b8:	14000000 	strne	r0, [r0], #-0
    23bc:	03000000 	movweq	r0, #0
    23c0:	9f017300 	svcls	0x00017300
    23c4:	00000014 	andeq	r0, r0, r4, lsl r0
    23c8:	00000020 	andeq	r0, r0, r0, lsr #32
    23cc:	00530001 	subseq	r0, r3, r1
    23d0:	00000000 	andeq	r0, r0, r0
    23d4:	Address 0x00000000000023d4 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	00008010 	andeq	r8, r0, r0, lsl r0
  14:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	047e0002 	ldrbteq	r0, [lr], #-2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	00008280 	andeq	r8, r0, r0, lsl #5
  34:	00000058 	andeq	r0, r0, r8, asr r0
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	06130002 	ldreq	r0, [r3], -r2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	000082d8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
  54:	0000003c 	andeq	r0, r0, ip, lsr r0
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	072a0002 	streq	r0, [sl, -r2]!
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	00008314 	andeq	r8, r0, r4, lsl r3
  74:	00000034 	andeq	r0, r0, r4, lsr r0
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	081c0002 	ldmdaeq	ip, {r1}
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	00008348 	andeq	r8, r0, r8, asr #6
  94:	000004f8 	strdeq	r0, [r0], -r8
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	0ea10002 	cdpeq	0, 10, cr0, cr1, cr2, {0}
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	00008840 	andeq	r8, r0, r0, asr #16
  b4:	00000028 	andeq	r0, r0, r8, lsr #32
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	0fa40002 	svceq	0x00a40002
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	00008868 	andeq	r8, r0, r8, ror #16
  d4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	12850002 	addne	r0, r5, #2
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	00008918 	andeq	r8, r0, r8, lsl r9
  f4:	00000074 	andeq	r0, r0, r4, ror r0
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	14360002 	ldrtne	r0, [r6], #-2
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	0000898c 	andeq	r8, r0, ip, lsl #19
 114:	00000088 	andeq	r0, r0, r8, lsl #1
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	16120002 	ldrne	r0, [r2], -r2
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	00008a14 	andeq	r8, r0, r4, lsl sl
 134:	000001e8 	andeq	r0, r0, r8, ror #3
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	1a040002 	bne	100154 <__bss_end__+0xf56ac>
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	00008bfc 	strdeq	r8, [r0], -ip
 154:	00000498 	muleq	r0, r8, r4
	...
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	23e80002 	mvncs	r0, #2
 168:	00040000 	andeq	r0, r4, r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	00009094 	muleq	r0, r4, r0
 174:	00000620 	andeq	r0, r0, r0, lsr #12
	...
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	35b60002 	ldrcc	r0, [r6, #2]!
 188:	00040000 	andeq	r0, r4, r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	000096b4 			; <UNDEFINED> instruction: 0x000096b4
 194:	00000154 	andeq	r0, r0, r4, asr r1
	...
 1a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a4:	39b90002 	ldmibcc	r9!, {r1}
 1a8:	00040000 	andeq	r0, r4, r0
 1ac:	00000000 	andeq	r0, r0, r0
 1b0:	000098d8 	ldrdeq	r9, [r0], -r8
 1b4:	00000568 	andeq	r0, r0, r8, ror #10
	...
 1c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c4:	41de0002 	bicsmi	r0, lr, r2
 1c8:	00040000 	andeq	r0, r4, r0
 1cc:	00000000 	andeq	r0, r0, r0
 1d0:	00009e40 	andeq	r9, r0, r0, asr #28
 1d4:	00000020 	andeq	r0, r0, r0, lsr #32
	...
 1e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e4:	42bd0002 	adcsmi	r0, sp, #2
 1e8:	00040000 	andeq	r0, r4, r0
 1ec:	00000000 	andeq	r0, r0, r0
 1f0:	00009e60 	andeq	r9, r0, r0, ror #28
 1f4:	00000050 	andeq	r0, r0, r0, asr r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	000000e0 	andeq	r0, r0, r0, ror #1
   4:	000000e8 	andeq	r0, r0, r8, ror #1
   8:	000000ec 	andeq	r0, r0, ip, ror #1
   c:	00000108 	andeq	r0, r0, r8, lsl #2
	...
  18:	00000294 	muleq	r0, r4, r2
  1c:	00000298 	muleq	r0, r8, r2
  20:	000002c8 	andeq	r0, r0, r8, asr #5
  24:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
	...
  30:	00008918 	andeq	r8, r0, r8, lsl r9
  34:	0000898c 	andeq	r8, r0, ip, lsl #19
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000133 	andeq	r0, r0, r3, lsr r1
       4:	00d40002 	sbcseq	r0, r4, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
      20:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
      24:	6a6e6169 	bvs	1b985d0 <__bss_end__+0x1b8db28>
      28:	442f6e75 	strtmi	r6, [pc], #-3701	; 30 <_start-0x7fd0>
      2c:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
      30:	732f706f 	teqvc	pc, #111	; 0x6f
      34:	6f6f6863 	svcvs	0x006f6863
      38:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
      3c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
      40:	30323931 	eorscc	r3, r2, r1, lsr r9
      44:	3153432f 	cmpcc	r3, pc, lsr #6
      48:	2f453034 	svccs	0x00453034
      4c:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
      50:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
      54:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
      58:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
      5c:	2f006970 	svccs	0x00006970
      60:	2f727375 	svccs	0x00727375
      64:	61636f6c 	cmnvs	r3, ip, ror #30
      68:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
      6c:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
      70:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
      74:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
      78:	61652d65 	cmnvs	r5, r5, ror #26
      7c:	342f6962 	strtcc	r6, [pc], #-2402	; 84 <_start-0x7f7c>
      80:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
      84:	3173632d 	cmncc	r3, sp, lsr #6
      88:	2f653037 	svccs	0x00653037
      8c:	2f62696c 	svccs	0x0062696c
      90:	2f636367 	svccs	0x00636367
      94:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
      98:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
      9c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
      a0:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
      a4:	2f332e38 	svccs	0x00332e38
      a8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      ac:	00656475 	rsbeq	r6, r5, r5, ror r4
      b0:	742d3100 	strtvc	r3, [sp], #-256	; 0x100
      b4:	2d747365 	ldclcs	3, cr7, [r4, #-404]!	; 0xfffffe6c
      b8:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
      bc:	632e6461 	teqvs	lr, #1627389952	; 0x61000000
      c0:	00000000 	andeq	r0, r0, r0
      c4:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
      c8:	00010068 	andeq	r0, r1, r8, rrx
      cc:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
      d0:	2d746e69 	ldclcs	14, cr6, [r4, #-420]!	; 0xfffffe5c
      d4:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
      d8:	00020068 	andeq	r0, r2, r8, rrx
      dc:	05000000 	streq	r0, [r0, #-0]
      e0:	00801002 	addeq	r1, r0, r2
      e4:	01120300 	tsteq	r2, r0, lsl #6
      e8:	00834b6a 	addeq	r4, r3, sl, ror #22
      ec:	06010402 	streq	r0, [r1], -r2, lsl #8
      f0:	5c0806ba 	stcpl	6, cr0, [r8], {186}	; 0xba
      f4:	832f832f 	teqhi	pc, #-1140850688	; 0xbc000000
      f8:	2fd84b30 	svccs	0x00d84b30
      fc:	854e302f 	strbhi	r3, [lr, #-47]	; 0x2f
     100:	002b302f 	eoreq	r3, fp, pc, lsr #32
     104:	2f020402 	svccs	0x00020402
     108:	02040200 	andeq	r0, r4, #0, 4
     10c:	04020067 	streq	r0, [r2], #-103	; 0x67
     110:	02004b02 	andeq	r4, r0, #2048	; 0x800
     114:	00470204 	subeq	r0, r7, r4, lsl #4
     118:	06010402 	streq	r0, [r1], -r2, lsl #8
     11c:	314f062e 	cmpcc	pc, lr, lsr #12
     120:	0402009f 	streq	r0, [r2], #-159	; 0x9f
     124:	06660601 	strbteq	r0, [r6], -r1, lsl #12
     128:	040200d7 	streq	r0, [r2], #-215	; 0xd7
     12c:	06820601 	streq	r0, [r2], r1, lsl #12
     130:	14024bd7 	strne	r4, [r2], #-3031	; 0xbd7
     134:	02010100 	andeq	r0, r1, #0, 2
     138:	02000001 	andeq	r0, r0, #1
     13c:	0000eb00 	andeq	lr, r0, r0, lsl #22
     140:	fb010200 	blx	4094a <__bss_end__+0x35ea2>
     144:	01000d0e 	tsteq	r0, lr, lsl #26
     148:	00010101 	andeq	r0, r1, r1, lsl #2
     14c:	00010000 	andeq	r0, r1, r0
     150:	696c0100 	stmdbvs	ip!, {r8}^
     154:	2f006362 	svccs	0x00006362
     158:	2f727375 	svccs	0x00727375
     15c:	61636f6c 	cmnvs	r3, ip, ror #30
     160:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
     164:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
     168:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     16c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     170:	61652d65 	cmnvs	r5, r5, ror #26
     174:	342f6962 	strtcc	r6, [pc], #-2402	; 17c <_start-0x7e84>
     178:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
     17c:	3173632d 	cmncc	r3, sp, lsr #6
     180:	2f653037 	svccs	0x00653037
     184:	2f62696c 	svccs	0x0062696c
     188:	2f636367 	svccs	0x00636367
     18c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     190:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     194:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     198:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
     19c:	2f332e38 	svccs	0x00332e38
     1a0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     1a4:	00656475 	rsbeq	r6, r5, r5, ror r4
     1a8:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
     1ac:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
     1b0:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
     1b4:	2f6e756a 	svccs	0x006e756a
     1b8:	6b736544 	blvs	1cd96d0 <__bss_end__+0x1ccec28>
     1bc:	2f706f74 	svccs	0x00706f74
     1c0:	6f686373 	svcvs	0x00686373
     1c4:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
     1c8:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
     1cc:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
     1d0:	53432f30 	movtpl	r2, #16176	; 0x3f30
     1d4:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
     1d8:	3173632f 	cmncc	r3, pc, lsr #6
     1dc:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
     1e0:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
     1e4:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     1e8:	00697062 	rsbeq	r7, r9, r2, rrx
     1ec:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
     1f0:	2e6b746e 	cdpcs	4, 6, cr7, cr11, cr14, {3}
     1f4:	00010063 	andeq	r0, r1, r3, rrx
     1f8:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
     1fc:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
     200:	00020068 	andeq	r0, r2, r8, rrx
     204:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xc00
     208:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
     20c:	003e6e69 	eorseq	r6, lr, r9, ror #28
     210:	72000000 	andvc	r0, r0, #0
     214:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
     218:	00000300 	andeq	r0, r0, r0, lsl #6
     21c:	702d6176 	eorvc	r6, sp, r6, ror r1
     220:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
     224:	00682e6b 	rsbeq	r2, r8, fp, ror #28
     228:	00000001 	andeq	r0, r0, r1
     22c:	80020500 	andhi	r0, r2, r0, lsl #10
     230:	17000082 	strne	r0, [r0, -r2, lsl #1]
     234:	89bf4b6b 	ldmibhi	pc!, {r0, r1, r3, r5, r6, r8, r9, fp, lr}	; <UNPREDICTABLE>
     238:	01000e02 	tsteq	r0, r2, lsl #28
     23c:	00008a01 	andeq	r8, r0, r1, lsl #20
     240:	72000200 	andvc	r0, r0, #0, 4
     244:	02000000 	andeq	r0, r0, #0
     248:	0d0efb01 	vstreq	d15, [lr, #-4]
     24c:	01010100 	mrseq	r0, (UNDEF: 17)
     250:	00000001 	andeq	r0, r0, r1
     254:	01000001 	tsteq	r0, r1
     258:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
     25c:	73552f00 	cmpvc	r5, #0, 30
     260:	2f737265 	svccs	0x00737265
     264:	61697262 	cmnvs	r9, r2, ror #4
     268:	6e756a6e 	vsubvs.f32	s13, s10, s29
     26c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     270:	706f746b 	rsbvc	r7, pc, fp, ror #8
     274:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
     278:	2f6c6f6f 	svccs	0x006c6f6f
     27c:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
     280:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
     284:	432f3032 	teqmi	pc, #50	; 0x32
     288:	30343153 	eorscc	r3, r4, r3, asr r1
     28c:	73632f45 	cmnvc	r3, #276	; 0x114
     290:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
     294:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
     298:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; fc <_start-0x7f04>
     29c:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
     2a0:	75700000 	ldrbvc	r0, [r0, #-0]!
     2a4:	61686374 	smcvs	34356	; 0x8634
     2a8:	00632e72 	rsbeq	r2, r3, r2, ror lr
     2ac:	72000001 	andvc	r0, r0, #1
     2b0:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
     2b4:	00000200 	andeq	r0, r0, r0, lsl #4
     2b8:	02050000 	andeq	r0, r5, #0
     2bc:	000082d8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
     2c0:	136b4a14 	cmnne	fp, #20, 20	; 0x14000
     2c4:	080213bc 	stmdaeq	r2, {r2, r3, r4, r5, r7, r8, r9, ip}
     2c8:	96010100 	strls	r0, [r1], -r0, lsl #2
     2cc:	02000000 	andeq	r0, r0, #0
     2d0:	00006f00 	andeq	r6, r0, r0, lsl #30
     2d4:	fb010200 	blx	40ade <__bss_end__+0x36036>
     2d8:	01000d0e 	tsteq	r0, lr, lsl #26
     2dc:	00010101 	andeq	r0, r1, r1, lsl #2
     2e0:	00010000 	andeq	r0, r1, r0
     2e4:	696c0100 	stmdbvs	ip!, {r8}^
     2e8:	2f006362 	svccs	0x00006362
     2ec:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     2f0:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
     2f4:	6a6e6169 	bvs	1b988a0 <__bss_end__+0x1b8ddf8>
     2f8:	442f6e75 	strtmi	r6, [pc], #-3701	; 300 <_start-0x7d00>
     2fc:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
     300:	732f706f 	teqvc	pc, #111	; 0x6f
     304:	6f6f6863 	svcvs	0x006f6863
     308:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     30c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     310:	30323931 	eorscc	r3, r2, r1, lsr r9
     314:	3153432f 	cmpcc	r3, pc, lsr #6
     318:	2f453034 	svccs	0x00453034
     31c:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
     320:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
     324:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
     328:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     32c:	00006970 	andeq	r6, r0, r0, ror r9
     330:	6b747570 	blvs	1d1d8f8 <__bss_end__+0x1d12e50>
     334:	0100632e 	tsteq	r0, lr, lsr #6
     338:	70720000 	rsbsvc	r0, r2, r0
     33c:	00682e69 	rsbeq	r2, r8, r9, ror #28
     340:	00000002 	andeq	r0, r0, r2
     344:	14020500 	strne	r0, [r2], #-1280	; 0x500
     348:	15000083 	strne	r0, [r0, #-131]	; 0x83
     34c:	02002d4c 	andeq	r2, r0, #76, 26	; 0x1300
     350:	002f0204 	eoreq	r0, pc, r4, lsl #4
     354:	49020402 	stmdbmi	r2, {r1, sl}
     358:	01040200 	mrseq	r0, R12_usr
     35c:	6b062e06 	blvs	18bb7c <__bss_end__+0x1810d4>
     360:	01000602 	tsteq	r0, r2, lsl #12
     364:	0001de01 	andeq	sp, r1, r1, lsl #28
     368:	df000200 	svcle	0x00000200
     36c:	02000000 	andeq	r0, r0, #0
     370:	0d0efb01 	vstreq	d15, [lr, #-4]
     374:	01010100 	mrseq	r0, (UNDEF: 17)
     378:	00000001 	andeq	r0, r0, r1
     37c:	01000001 	tsteq	r0, r1
     380:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
     384:	73752f00 	cmnvc	r5, #0, 30
     388:	6f6c2f72 	svcvs	0x006c2f72
     38c:	2f6c6163 	svccs	0x006c6163
     390:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
     394:	612f7261 	teqvs	pc, r1, ror #4
     398:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     39c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     3a0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     3a4:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
     3a8:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
     3ac:	30373173 	eorscc	r3, r7, r3, ror r1
     3b0:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     3b4:	63672f62 	cmnvs	r7, #392	; 0x188
     3b8:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
     3bc:	6f6e2d6d 	svcvs	0x006e2d6d
     3c0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     3c4:	2f696261 	svccs	0x00696261
     3c8:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
     3cc:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
     3d0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     3d4:	552f0065 	strpl	r0, [pc, #-101]!	; 377 <_start-0x7c89>
     3d8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     3dc:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
     3e0:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
     3e4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
     3e8:	6f746b73 	svcvs	0x00746b73
     3ec:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
     3f0:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 258 <_start-0x7da8>
     3f4:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
     3f8:	31726574 	cmncc	r2, r4, ror r5
     3fc:	2f303239 	svccs	0x00303239
     400:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
     404:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
     408:	30343173 	eorscc	r3, r4, r3, ror r1
     40c:	30322d65 	eorscc	r2, r2, r5, ror #26
     410:	2f6e6977 	svccs	0x006e6977
     414:	7062696c 	rsbvc	r6, r2, ip, ror #18
     418:	76000069 	strvc	r0, [r0], -r9, rrx
     41c:	72702d61 	rsbsvc	r2, r0, #6208	; 0x1840
     420:	6b746e69 	blvs	1d1bdcc <__bss_end__+0x1d11324>
     424:	0100632e 	tsteq	r0, lr, lsr #6
     428:	74730000 	ldrbtvc	r0, [r3], #-0
     42c:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
     430:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     434:	70720000 	rsbsvc	r0, r2, r0
     438:	00682e69 	rsbeq	r2, r8, r9, ror #28
     43c:	3c000003 	stccc	0, cr0, [r0], {3}
     440:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
     444:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
     448:	0000003e 	andeq	r0, r0, lr, lsr r0
     44c:	05000000 	streq	r0, [r0, #-0]
     450:	00834802 	addeq	r4, r3, r2, lsl #16
     454:	01260300 	teqeq	r6, r0, lsl #6
     458:	3113a501 	tstcc	r3, r1, lsl #10
     45c:	0402002d 	streq	r0, [r2], #-45	; 0x2d
     460:	02002f02 	andeq	r2, r0, #2, 30
     464:	002d0204 	eoreq	r0, sp, r4, lsl #4
     468:	2f020402 	svccs	0x00020402
     46c:	01040200 	mrseq	r0, R12_usr
     470:	304c4c2d 	subcc	r4, ip, sp, lsr #24
     474:	4f2f4b14 	svcmi	0x002f4b14
     478:	02040200 	andeq	r0, r4, #0, 4
     47c:	04020067 	streq	r0, [r2], #-103	; 0x67
     480:	4d4c6501 	cfstr64mi	mvdx6, [ip, #-4]
     484:	312fa030 	teqcc	pc, r0, lsr r0	; <UNPREDICTABLE>
     488:	16260230 			; <UNDEFINED> instruction: 0x16260230
     48c:	002c2d84 	eoreq	r2, ip, r4, lsl #27
     490:	30010402 	andcc	r0, r1, r2, lsl #8
     494:	01040200 	mrseq	r0, R12_usr
     498:	00660633 	rsbeq	r0, r6, r3, lsr r6
     49c:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
     4a0:	01040200 	mrseq	r0, R12_usr
     4a4:	67210806 	strvs	r0, [r1, -r6, lsl #16]!
     4a8:	8273032f 	rsbshi	r0, r3, #-1140850688	; 0xbc000000
     4ac:	002e1303 	eoreq	r1, lr, r3, lsl #6
     4b0:	06010402 	streq	r0, [r1], -r2, lsl #8
     4b4:	0402002e 	streq	r0, [r2], #-46	; 0x2e
     4b8:	6a9f0601 	bvs	fe7c1cc4 <__bss_end__+0xfe7b721c>
     4bc:	2e67034b 	cdpcs	3, 6, cr0, cr7, cr11, {2}
     4c0:	002e2103 	eoreq	r2, lr, r3, lsl #2
     4c4:	06010402 	streq	r0, [r1], -r2, lsl #8
     4c8:	0402002e 	streq	r0, [r2], #-46	; 0x2e
     4cc:	009f0601 	addseq	r0, pc, r1, lsl #12
     4d0:	6a010402 	bvs	414e0 <__bss_end__+0x36a38>
     4d4:	a603f3d9 			; <UNDEFINED> instruction: 0xa603f3d9
     4d8:	2f20087f 	svccs	0x0020087f
     4dc:	01040200 	mrseq	r0, R12_usr
     4e0:	d7064a06 	strle	r4, [r6, -r6, lsl #20]
     4e4:	da032f4b 	ble	cc218 <__bss_end__+0xc1770>
     4e8:	4c83f200 	sfmmi	f7, 1, [r3], {0}
     4ec:	2e0e0348 	cdpcs	3, 0, cr0, cr14, cr8, {2}
     4f0:	2f2e7503 	svccs	0x002e7503
     4f4:	2f4b842f 	svccs	0x004b842f
     4f8:	30314d2d 	eorscc	r4, r1, sp, lsr #26
     4fc:	0200832f 	andeq	r8, r0, #-1140850688	; 0xbc000000
     500:	a22c0104 	eorge	r0, ip, #4, 2
     504:	01040200 	mrseq	r0, R12_usr
     508:	d8064a06 	stmdale	r6, {r1, r2, r9, fp, lr}
     50c:	03163602 	tsteq	r6, #2097152	; 0x200000
     510:	2108d60e 	tstcs	r8, lr, lsl #12
     514:	f331f330 	vcge.u<illegal width 64>	d15, d1, d16
     518:	4b30f330 	blmi	c3d1e0 <__bss_end__+0xc32738>
     51c:	0830f330 	ldmdaeq	r0!, {r4, r5, r8, r9, ip, sp, lr, pc}
     520:	002f3123 	eoreq	r3, pc, r3, lsr #2
     524:	65010402 	strvs	r0, [r1, #-1026]	; 0x402
     528:	02040200 	andeq	r0, r4, #0, 4
     52c:	02004a06 	andeq	r4, r0, #24576	; 0x6000
     530:	03060104 	movweq	r0, #24836	; 0x6104
     534:	02006642 	andeq	r6, r0, #69206016	; 0x4200000
     538:	66060204 	strvs	r0, [r6], -r4, lsl #4
     53c:	00c20306 	sbceq	r0, r2, r6, lsl #6
     540:	1002684a 	andne	r6, r2, sl, asr #16
     544:	93010100 	movwls	r0, #4352	; 0x1100
     548:	02000000 	andeq	r0, r0, #0
     54c:	00007d00 	andeq	r7, r0, r0, lsl #26
     550:	fb010200 	blx	40d5a <__bss_end__+0x362b2>
     554:	01000d0e 	tsteq	r0, lr, lsl #26
     558:	00010101 	andeq	r0, r1, r1, lsl #2
     55c:	00010000 	andeq	r0, r1, r0
     560:	73630100 	cmnvc	r3, #0, 2
     564:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
     568:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
     56c:	73552f00 	cmpvc	r5, #0, 30
     570:	2f737265 	svccs	0x00737265
     574:	61697262 	cmnvs	r9, r2, ror #4
     578:	6e756a6e 	vsubvs.f32	s13, s10, s29
     57c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     580:	706f746b 	rsbvc	r7, pc, fp, ror #8
     584:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
     588:	2f6c6f6f 	svccs	0x006c6f6f
     58c:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
     590:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
     594:	432f3032 	teqmi	pc, #50	; 0x32
     598:	30343153 	eorscc	r3, r4, r3, asr r1
     59c:	73632f45 	cmnvc	r3, #276	; 0x114
     5a0:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
     5a4:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
     5a8:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 40c <_start-0x7bf4>
     5ac:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
     5b0:	6c630000 	stclvs	0, cr0, [r3], #-0
     5b4:	2d6e6165 	stfcse	f6, [lr, #-404]!	; 0xfffffe6c
     5b8:	6f626572 	svcvs	0x00626572
     5bc:	632e746f 	teqvs	lr, #1862270976	; 0x6f000000
     5c0:	00000100 	andeq	r0, r0, r0, lsl #2
     5c4:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
     5c8:	00020068 	andeq	r0, r2, r8, rrx
     5cc:	05000000 	streq	r0, [r0, #-0]
     5d0:	00884002 	addeq	r4, r8, r2
     5d4:	832f1500 	teqhi	pc, #0, 10
     5d8:	0006024b 	andeq	r0, r6, fp, asr #4
     5dc:	01210101 	teqeq	r1, r1, lsl #2
     5e0:	00020000 	andeq	r0, r2, r0
     5e4:	000000f8 	strdeq	r0, [r0], -r8
     5e8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     5ec:	0101000d 	tsteq	r1, sp
     5f0:	00000101 	andeq	r0, r0, r1, lsl #2
     5f4:	00000100 	andeq	r0, r0, r0, lsl #2
     5f8:	31736301 	cmncc	r3, r1, lsl #6
     5fc:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
     600:	00637273 	rsbeq	r7, r3, r3, ror r2
     604:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     608:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
     60c:	432f6c61 	teqmi	pc, #24832	; 0x6100
     610:	616c6c65 	cmnvs	ip, r5, ror #24
     614:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
     618:	6f6e2d6d 	svcvs	0x006e2d6d
     61c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     620:	2f696261 	svccs	0x00696261
     624:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
     628:	73632d33 	cmnvc	r3, #3264	; 0xcc0
     62c:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
     630:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     634:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     638:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     63c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     640:	61652d65 	cmnvs	r5, r5, ror #26
     644:	342f6962 	strtcc	r6, [pc], #-2402	; 64c <_start-0x79b4>
     648:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
     64c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     650:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     654:	73552f00 	cmpvc	r5, #0, 30
     658:	2f737265 	svccs	0x00737265
     65c:	61697262 	cmnvs	r9, r2, ror #4
     660:	6e756a6e 	vsubvs.f32	s13, s10, s29
     664:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     668:	706f746b 	rsbvc	r7, pc, fp, ror #8
     66c:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
     670:	2f6c6f6f 	svccs	0x006c6f6f
     674:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
     678:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
     67c:	432f3032 	teqmi	pc, #50	; 0x32
     680:	30343153 	eorscc	r3, r4, r3, asr r1
     684:	73632f45 	cmnvc	r3, #276	; 0x114
     688:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
     68c:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
     690:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 4f4 <_start-0x7b0c>
     694:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
     698:	73630000 	cmnvc	r3, #0
     69c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
     6a0:	0100632e 	tsteq	r0, lr, lsr #6
     6a4:	74730000 	ldrbtvc	r0, [r3], #-0
     6a8:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
     6ac:	6363672d 	cmnvs	r3, #11796480	; 0xb40000
     6b0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     6b4:	77730000 	ldrbvc	r0, [r3, -r0]!
     6b8:	7261752d 	rsbvc	r7, r1, #188743680	; 0xb400000
     6bc:	00682e74 	rsbeq	r2, r8, r4, ror lr
     6c0:	63000001 	movwvs	r0, #1
     6c4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     6c8:	622d6c6f 	eorvs	r6, sp, #28416	; 0x6f00
     6cc:	6b636f6c 	blvs	18dc484 <__bss_end__+0x18d19dc>
     6d0:	0100682e 	tsteq	r0, lr, lsr #16
     6d4:	70720000 	rsbsvc	r0, r2, r0
     6d8:	00682e69 	rsbeq	r2, r8, r9, ror #28
     6dc:	00000003 	andeq	r0, r0, r3
     6e0:	68020500 	stmdavs	r2, {r8, sl}
     6e4:	17000088 	strne	r0, [r0, -r8, lsl #1]
     6e8:	3268684b 	rsbcc	r6, r8, #4915200	; 0x4b0000
     6ec:	2f2d2f31 	svccs	0x002d2f31
     6f0:	01040200 	mrseq	r0, R12_usr
     6f4:	4b2f4f49 	blmi	bd4420 <__bss_end__+0xbc9978>
     6f8:	67836767 	strvs	r6, [r3, r7, ror #14]
     6fc:	10022f4e 	andne	r2, r2, lr, asr #30
     700:	99010100 	stmdbls	r1, {r8}
     704:	02000000 	andeq	r0, r0, #0
     708:	00007700 	andeq	r7, r0, r0, lsl #14
     70c:	fb010200 	blx	40f16 <__bss_end__+0x3646e>
     710:	01000d0e 	tsteq	r0, lr, lsl #26
     714:	00010101 	andeq	r0, r1, r1, lsl #2
     718:	00010000 	andeq	r0, r1, r0
     71c:	73630100 	cmnvc	r3, #0, 2
     720:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
     724:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
     728:	73552f00 	cmpvc	r5, #0, 30
     72c:	2f737265 	svccs	0x00737265
     730:	61697262 	cmnvs	r9, r2, ror #4
     734:	6e756a6e 	vsubvs.f32	s13, s10, s29
     738:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     73c:	706f746b 	rsbvc	r7, pc, fp, ror #8
     740:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
     744:	2f6c6f6f 	svccs	0x006c6f6f
     748:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
     74c:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
     750:	432f3032 	teqmi	pc, #50	; 0x32
     754:	30343153 	eorscc	r3, r4, r3, asr r1
     758:	73632f45 	cmnvc	r3, #276	; 0x114
     75c:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
     760:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
     764:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 5c8 <_start-0x7a38>
     768:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
     76c:	65720000 	ldrbvs	r0, [r2, #-0]!
     770:	746f6f62 	strbtvc	r6, [pc], #-3938	; 778 <_start-0x7888>
     774:	0100632e 	tsteq	r0, lr, lsr #6
     778:	70720000 	rsbsvc	r0, r2, r0
     77c:	00682e69 	rsbeq	r2, r8, r9, ror #28
     780:	00000002 	andeq	r0, r0, r2
     784:	18020500 	stmdane	r2, {r8, sl}
     788:	03000089 	movweq	r0, #137	; 0x89
     78c:	3114010d 	tstcc	r4, sp, lsl #2
     790:	2f15852f 	svccs	0x0015852f
     794:	672f4d4b 	strvs	r4, [pc, -fp, asr #26]!
     798:	02675235 	rsbeq	r5, r7, #1342177283	; 0x50000003
     79c:	01010010 	tsteq	r1, r0, lsl r0
     7a0:	000000a3 	andeq	r0, r0, r3, lsr #1
     7a4:	00760002 	rsbseq	r0, r6, r2
     7a8:	01020000 	mrseq	r0, (UNDEF: 2)
     7ac:	000d0efb 	strdeq	r0, [sp], -fp
     7b0:	01010101 	tsteq	r1, r1, lsl #2
     7b4:	01000000 	mrseq	r0, (UNDEF: 0)
     7b8:	63010000 	movwvs	r0, #4096	; 0x1000
     7bc:	30343173 	eorscc	r3, r4, r3, ror r1
     7c0:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
     7c4:	552f0063 	strpl	r0, [pc, #-99]!	; 769 <_start-0x7897>
     7c8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     7cc:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
     7d0:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
     7d4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
     7d8:	6f746b73 	svcvs	0x00746b73
     7dc:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
     7e0:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 648 <_start-0x79b8>
     7e4:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
     7e8:	31726574 	cmncc	r2, r4, ror r5
     7ec:	2f303239 	svccs	0x00303239
     7f0:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
     7f4:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
     7f8:	30343173 	eorscc	r3, r4, r3, ror r1
     7fc:	30322d65 	eorscc	r2, r2, r5, ror #26
     800:	2f6e6977 	svccs	0x006e6977
     804:	7062696c 	rsbvc	r6, r2, ip, ror #18
     808:	74000069 	strvc	r0, [r0], #-105	; 0x69
     80c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     810:	0100632e 	tsteq	r0, lr, lsr #6
     814:	70720000 	rsbsvc	r0, r2, r0
     818:	00682e69 	rsbeq	r2, r8, r9, ror #28
     81c:	00000002 	andeq	r0, r0, r2
     820:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
     824:	16000089 	strne	r0, [r0], -r9, lsl #1
     828:	002d2f13 	eoreq	r2, sp, r3, lsl pc
     82c:	06010402 	streq	r0, [r1], -r2, lsl #8
     830:	3168062e 	cmncc	r8, lr, lsr #12
     834:	324d4b2f 	subcc	r4, sp, #48128	; 0xbc00
     838:	4c4b3031 	mcrrmi	0, 3, r3, fp, cr1
     83c:	2f2f6a2f 	svccs	0x002f6a2f
     840:	08022f84 	stmdaeq	r2, {r2, r7, r8, r9, sl, fp, sp}
     844:	76010100 	strvc	r0, [r1], -r0, lsl #2
     848:	02000001 	andeq	r0, r0, #1
     84c:	00012000 	andeq	r2, r1, r0
     850:	fb010200 	blx	4105a <__bss_end__+0x365b2>
     854:	01000d0e 	tsteq	r0, lr, lsl #26
     858:	00010101 	andeq	r0, r1, r1, lsl #2
     85c:	00010000 	andeq	r0, r1, r0
     860:	796d0100 	stmdbvc	sp!, {r8}^
     864:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
     868:	73552f00 	cmpvc	r5, #0, 30
     86c:	2f737265 	svccs	0x00737265
     870:	61697262 	cmnvs	r9, r2, ror #4
     874:	6e756a6e 	vsubvs.f32	s13, s10, s29
     878:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     87c:	706f746b 	rsbvc	r7, pc, fp, ror #8
     880:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
     884:	2f6c6f6f 	svccs	0x006c6f6f
     888:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
     88c:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
     890:	432f3032 	teqmi	pc, #50	; 0x32
     894:	30343153 	eorscc	r3, r4, r3, asr r1
     898:	73632f45 	cmnvc	r3, #276	; 0x114
     89c:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
     8a0:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
     8a4:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 708 <_start-0x78f8>
     8a8:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
     8ac:	73752f00 	cmnvc	r5, #0, 30
     8b0:	6f6c2f72 	svcvs	0x006c2f72
     8b4:	2f6c6163 	svccs	0x006c6163
     8b8:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
     8bc:	612f7261 	teqvs	pc, r1, ror #4
     8c0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     8c4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     8c8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     8cc:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
     8d0:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
     8d4:	30373173 	eorscc	r3, r7, r3, ror r1
     8d8:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     8dc:	63672f62 	cmnvs	r7, #392	; 0x188
     8e0:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
     8e4:	6f6e2d6d 	svcvs	0x006e2d6d
     8e8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     8ec:	2f696261 	svccs	0x00696261
     8f0:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
     8f4:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
     8f8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     8fc:	752f0065 	strvc	r0, [pc, #-101]!	; 89f <_start-0x7761>
     900:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 73c <_start-0x78c4>
     904:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
     908:	6c65432f 	stclvs	3, cr4, [r5], #-188	; 0xffffff44
     90c:	2f72616c 	svccs	0x0072616c
     910:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     914:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     918:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     91c:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
     920:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
     924:	37317363 	ldrcc	r7, [r1, -r3, ror #6]!
     928:	612f6530 	teqvs	pc, r0, lsr r5	; <UNPREDICTABLE>
     92c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     930:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     934:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     938:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     93c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     940:	6d6b0000 	stclvs	0, cr0, [fp, #-0]
     944:	6f6c6c61 	svcvs	0x006c6c61
     948:	00632e63 	rsbeq	r2, r3, r3, ror #28
     94c:	72000001 	andvc	r0, r0, #1
     950:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
     954:	00000200 	andeq	r0, r0, r0, lsl #4
     958:	64647473 	strbtvs	r7, [r4], #-1139	; 0x473
     95c:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
     960:	00000300 	andeq	r0, r0, r0, lsl #6
     964:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     968:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     96c:	00000400 	andeq	r0, r0, r0, lsl #8
     970:	02050000 	andeq	r0, r5, #0
     974:	00008a14 	andeq	r8, r0, r4, lsl sl
     978:	2f011803 	svccs	0x00011803
     97c:	01040200 	mrseq	r0, R12_usr
     980:	d8068206 	stmdale	r6, {r1, r2, r9, pc}
     984:	6a834b4b 	bvs	fe0d36b8 <__bss_end__+0xfe0c8c10>
     988:	02002fbe 	andeq	r2, r0, #760	; 0x2f8
     98c:	82060104 	andhi	r0, r6, #4, 2
     990:	4b4bd806 	blmi	12f69b0 <__bss_end__+0x12ebf08>
     994:	01040200 	mrseq	r0, R12_usr
     998:	d7064a06 	strle	r4, [r6, -r6, lsl #20]
     99c:	2f30834b 	svccs	0x0030834b
     9a0:	2fba0a03 	svccs	0x00ba0a03
     9a4:	01040200 	mrseq	r0, R12_usr
     9a8:	d7068206 	strle	r8, [r6, -r6, lsl #4]
     9ac:	c213f967 	andsgt	pc, r3, #1687552	; 0x19c000
     9b0:	002f8414 	eoreq	r8, pc, r4, lsl r4	; <UNPREDICTABLE>
     9b4:	06010402 	streq	r0, [r1], -r2, lsl #8
     9b8:	67d70682 	ldrbvs	r0, [r7, r2, lsl #13]
     9bc:	01000c02 	tsteq	r0, r2, lsl #24
     9c0:	00018e01 	andeq	r8, r1, r1, lsl #28
     9c4:	df000200 	svcle	0x00000200
     9c8:	02000000 	andeq	r0, r0, #0
     9cc:	0d0efb01 	vstreq	d15, [lr, #-4]
     9d0:	01010100 	mrseq	r0, (UNDEF: 17)
     9d4:	00000001 	andeq	r0, r0, r1
     9d8:	01000001 	tsteq	r0, r1
     9dc:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
     9e0:	2f006372 	svccs	0x00006372
     9e4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     9e8:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
     9ec:	6a6e6169 	bvs	1b98f98 <__bss_end__+0x1b8e4f0>
     9f0:	442f6e75 	strtmi	r6, [pc], #-3701	; 9f8 <_start-0x7608>
     9f4:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
     9f8:	732f706f 	teqvc	pc, #111	; 0x6f
     9fc:	6f6f6863 	svcvs	0x006f6863
     a00:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     a04:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     a08:	30323931 	eorscc	r3, r2, r1, lsr r9
     a0c:	3153432f 	cmpcc	r3, pc, lsr #6
     a10:	2f453034 	svccs	0x00453034
     a14:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
     a18:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
     a1c:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
     a20:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     a24:	2f006970 	svccs	0x00006970
     a28:	2f727375 	svccs	0x00727375
     a2c:	61636f6c 	cmnvs	r3, ip, ror #30
     a30:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
     a34:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
     a38:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     a3c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     a40:	61652d65 	cmnvs	r5, r5, ror #26
     a44:	342f6962 	strtcc	r6, [pc], #-2402	; a4c <_start-0x75b4>
     a48:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
     a4c:	3173632d 	cmncc	r3, sp, lsr #6
     a50:	2f653037 	svccs	0x00653037
     a54:	2f62696c 	svccs	0x0062696c
     a58:	2f636367 	svccs	0x00636367
     a5c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     a60:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     a64:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     a68:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
     a6c:	2f332e38 	svccs	0x00332e38
     a70:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     a74:	00656475 	rsbeq	r6, r5, r5, ror r4
     a78:	682e5100 	stmdavs	lr!, {r8, ip, lr}
     a7c:	00000100 	andeq	r0, r0, r0, lsl #2
     a80:	2d697072 	stclcs	0, cr7, [r9, #-456]!	; 0xfffffe38
     a84:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
     a88:	632e6461 	teqvs	lr, #1627389952	; 0x61000000
     a8c:	00000100 	andeq	r0, r0, r0, lsl #2
     a90:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
     a94:	00020068 	andeq	r0, r2, r8, rrx
     a98:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
     a9c:	2d746e69 	ldclcs	14, cr6, [r4, #-420]!	; 0xfffffe5c
     aa0:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
     aa4:	00030068 	andeq	r0, r3, r8, rrx
     aa8:	05000000 	streq	r0, [r0, #-0]
     aac:	008bfc02 	addeq	pc, fp, r2, lsl #24
     ab0:	010f0300 	mrseq	r0, SP_hyp
     ab4:	4a1b0301 	bmi	6c16c0 <__bss_end__+0x6b6c18>
     ab8:	67674b13 			; <UNDEFINED> instruction: 0x67674b13
     abc:	134f2f68 	movtne	r2, #65384	; 0xff68
     ac0:	4b2f4b67 	blmi	bd3864 <__bss_end__+0xbc8dbc>
     ac4:	6c030204 	sfmvs	f0, 4, [r3], {4}
     ac8:	01044c4a 	tsteq	r4, sl, asr #24
     acc:	4b826803 	blmi	fe09aae0 <__bss_end__+0xfe090038>
     ad0:	04020068 	streq	r0, [r2], #-104	; 0x68
     ad4:	06660601 	strbteq	r0, [r6], -r1, lsl #12
     ad8:	040200d7 	streq	r0, [r2], #-215	; 0xd7
     adc:	06660601 	strbteq	r0, [r6], -r1, lsl #12
     ae0:	a12f4dd4 	ldrdge	r4, [pc, -r4]!	; <UNPREDICTABLE>
     ae4:	0402002f 	streq	r0, [r2], #-47	; 0x2f
     ae8:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
     aec:	004b2fd8 	ldrdeq	r2, [fp], #-248	; 0xffffff08
     af0:	06010402 	streq	r0, [r1], -r2, lsl #8
     af4:	67d90666 	ldrbvs	r0, [r9, r6, ror #12]
     af8:	032f2f4b 	teqeq	pc, #300	; 0x12c
     afc:	04354a7a 	ldrteq	r4, [r5], #-2682	; 0xa7a
     b00:	9e730302 	cdpls	3, 7, cr0, cr3, cr2, {0}
     b04:	674b4d2f 	strbvs	r4, [fp, -pc, lsr #26]
     b08:	04020084 	streq	r0, [r2], #-132	; 0x84
     b0c:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
     b10:	6e03a0d7 	mcrvs	0, 0, sl, cr3, cr7, {6}
     b14:	1c0314d6 	cfstrsne	mvf1, [r3], {214}	; 0xd6
     b18:	2f516782 	svccs	0x00516782
     b1c:	68684b30 	stmdavs	r8!, {r4, r5, r8, r9, fp, lr}^
     b20:	2e0a0385 	cdpcs	3, 0, cr0, cr10, cr5, {4}
     b24:	84834c4b 	strhi	r4, [r3], #3147	; 0xc4b
     b28:	8535bf68 	ldrhi	fp, [r5, #-3944]!	; 0xf68
     b2c:	0383834b 	orreq	r8, r3, #738197505	; 0x2c000001
     b30:	834d9e23 	movthi	r9, #56867	; 0xde23
     b34:	08673067 	stmdaeq	r7!, {r0, r1, r2, r5, r6, ip, sp}^
     b38:	034b867a 	movteq	r8, #46714	; 0xb67a
     b3c:	8435f254 	ldrthi	pc, [r5], #-596	; 0x254	; <UNPREDICTABLE>
     b40:	4c836735 	stcmi	7, cr6, [r3], {53}	; 0x35
     b44:	2fba1b03 	svccs	0x00ba1b03
     b48:	082f4408 	stmdaeq	pc!, {r3, sl, lr}	; <UNPREDICTABLE>
     b4c:	14022f42 	strne	r2, [r2], #-3906	; 0xf42
     b50:	45010100 	strmi	r0, [r1, #-256]	; 0x100
     b54:	02000003 	andeq	r0, r0, #3
     b58:	0001bd00 	andeq	fp, r1, r0, lsl #26
     b5c:	fb010200 	blx	41366 <__bss_end__+0x368be>
     b60:	01000d0e 	tsteq	r0, lr, lsl #26
     b64:	00010101 	andeq	r0, r1, r1, lsl #2
     b68:	00010000 	andeq	r0, r1, r0
     b6c:	796d0100 	stmdbvc	sp!, {r8}^
     b70:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
     b74:	73552f00 	cmpvc	r5, #0, 30
     b78:	2f737265 	svccs	0x00737265
     b7c:	61697262 	cmnvs	r9, r2, ror #4
     b80:	6e756a6e 	vsubvs.f32	s13, s10, s29
     b84:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     b88:	706f746b 	rsbvc	r7, pc, fp, ror #8
     b8c:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
     b90:	2f6c6f6f 	svccs	0x006c6f6f
     b94:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
     b98:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
     b9c:	432f3032 	teqmi	pc, #50	; 0x32
     ba0:	30343153 	eorscc	r3, r4, r3, asr r1
     ba4:	73632f45 	cmnvc	r3, #276	; 0x114
     ba8:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
     bac:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
     bb0:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; a14 <_start-0x75ec>
     bb4:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
     bb8:	3173632f 	cmncc	r3, pc, lsr #6
     bbc:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
     bc0:	00637273 	rsbeq	r7, r3, r3, ror r2
     bc4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     bc8:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
     bcc:	432f6c61 	teqmi	pc, #24832	; 0x6100
     bd0:	616c6c65 	cmnvs	ip, r5, ror #24
     bd4:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
     bd8:	6f6e2d6d 	svcvs	0x006e2d6d
     bdc:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     be0:	2f696261 	svccs	0x00696261
     be4:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
     be8:	73632d33 	cmnvc	r3, #3264	; 0xcc0
     bec:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
     bf0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     bf4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     bf8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     bfc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     c00:	61652d65 	cmnvs	r5, r5, ror #26
     c04:	342f6962 	strtcc	r6, [pc], #-2402	; c0c <_start-0x73f4>
     c08:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
     c0c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     c10:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     c14:	73552f00 	cmpvc	r5, #0, 30
     c18:	2f737265 	svccs	0x00737265
     c1c:	61697262 	cmnvs	r9, r2, ror #4
     c20:	6e756a6e 	vsubvs.f32	s13, s10, s29
     c24:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     c28:	706f746b 	rsbvc	r7, pc, fp, ror #8
     c2c:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
     c30:	2f6c6f6f 	svccs	0x006c6f6f
     c34:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
     c38:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
     c3c:	432f3032 	teqmi	pc, #50	; 0x32
     c40:	30343153 	eorscc	r3, r4, r3, asr r1
     c44:	73632f45 	cmnvc	r3, #276	; 0x114
     c48:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
     c4c:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
     c50:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; ab4 <_start-0x754c>
     c54:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
     c58:	73552f00 	cmpvc	r5, #0, 30
     c5c:	2f737265 	svccs	0x00737265
     c60:	61697262 	cmnvs	r9, r2, ror #4
     c64:	6e756a6e 	vsubvs.f32	s13, s10, s29
     c68:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     c6c:	706f746b 	rsbvc	r7, pc, fp, ror #8
     c70:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
     c74:	2f6c6f6f 	svccs	0x006c6f6f
     c78:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
     c7c:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
     c80:	432f3032 	teqmi	pc, #50	; 0x32
     c84:	30343153 	eorscc	r3, r4, r3, asr r1
     c88:	73632f45 	cmnvc	r3, #276	; 0x114
     c8c:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
     c90:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
     c94:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; af8 <_start-0x7508>
     c98:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
     c9c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     ca0:	73000063 	movwvc	r0, #99	; 0x63
     ca4:	61752d77 	cmnvs	r5, r7, ror sp
     ca8:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
     cac:	00000100 	andeq	r0, r0, r0, lsl #2
     cb0:	6c637963 	stclvs	9, cr7, [r3], #-396	; 0xfffffe74
     cb4:	74752d65 	ldrbtvc	r2, [r5], #-3429	; 0xd65
     cb8:	682e6c69 	stmdavs	lr!, {r0, r3, r5, r6, sl, fp, sp, lr}
     cbc:	00000200 	andeq	r0, r0, r0, lsl #4
     cc0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     cc4:	672d746e 	strvs	r7, [sp, -lr, ror #8]!
     cc8:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
     ccc:	00000300 	andeq	r0, r0, r0, lsl #6
     cd0:	752d7773 	strvc	r7, [sp, #-1907]!	; 0x773
     cd4:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
     cd8:	00020068 	andeq	r0, r2, r8, rrx
     cdc:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
     ce0:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
     ce4:	00030068 	andeq	r0, r3, r8, rrx
     ce8:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
     cec:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     cf0:	72000002 	andvc	r0, r0, #2
     cf4:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
     cf8:	00000400 	andeq	r0, r0, r0, lsl #8
     cfc:	702d6176 	eorvc	r6, sp, r6, ror r1
     d00:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
     d04:	00682e6b 	rsbeq	r2, r8, fp, ror #28
     d08:	3c000005 	stccc	0, cr0, [r0], {5}
     d0c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
     d10:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
     d14:	0000003e 	andeq	r0, r0, lr, lsr r0
     d18:	05000000 	streq	r0, [r0, #-0]
     d1c:	00909402 	addseq	r9, r0, r2, lsl #8
     d20:	2f4c1a00 	svccs	0x004c1a00
     d24:	03020430 	movweq	r0, #9264	; 0x2430
     d28:	73032e0b 	movwvc	r2, #15883	; 0x3e0b
     d2c:	88010466 	stmdahi	r1, {r1, r2, r5, r6, sl}
     d30:	03350204 	teqeq	r5, #4, 4	; 0x40000000
     d34:	01046673 	tsteq	r4, r3, ror r6
     d38:	3302048a 	movwcc	r0, #9354	; 0x248a
     d3c:	04667303 	strbteq	r7, [r6], #-771	; 0x303
     d40:	820a0301 	andhi	r0, sl, #67108864	; 0x4000000
     d44:	03310204 	teqeq	r1, #4, 4	; 0x40000000
     d48:	01046673 	tsteq	r4, r3, ror r6
     d4c:	04820c03 	streq	r0, [r2], #3075	; 0xc03
     d50:	73032f02 	movwvc	r2, #16130	; 0x3f02
     d54:	03010466 	movweq	r0, #5222	; 0x1466
     d58:	0204820e 	andeq	r8, r4, #-536870912	; 0xe0000000
     d5c:	6673032d 	ldrbtvs	r0, [r3], -sp, lsr #6
     d60:	10030104 	andne	r0, r3, r4, lsl #2
     d64:	2b020482 	blcs	81f74 <__bss_end__+0x774cc>
     d68:	04667303 	strbteq	r7, [r6], #-771	; 0x303
     d6c:	82120301 	andshi	r0, r2, #67108864	; 0x4000000
     d70:	03290204 	teqeq	r9, #4, 4	; 0x40000000
     d74:	01046673 	tsteq	r4, r3, ror r6
     d78:	04821403 	streq	r1, [r2], #1027	; 0x403
     d7c:	2e790302 	cdpcs	3, 7, cr0, cr9, cr2, {0}
     d80:	04667303 	strbteq	r7, [r6], #-771	; 0x303
     d84:	82160301 	andshi	r0, r6, #67108864	; 0x4000000
     d88:	77030204 	strvc	r0, [r3, -r4, lsl #4]
     d8c:	6673032e 	ldrbtvs	r0, [r3], -lr, lsr #6
     d90:	18030104 	stmdane	r3, {r2, r8}
     d94:	2e100382 	cdpcs	3, 1, cr0, cr0, cr2, {4}
     d98:	70034d4b 	andvc	r4, r3, fp, asr #26
     d9c:	83844c2e 	orrhi	r4, r4, #11776	; 0x2e00
     da0:	2e0d0348 	cdpcs	3, 0, cr0, cr13, cr8, {2}
     da4:	0433314e 	ldrteq	r3, [r3], #-334	; 0x14e
     da8:	2e480302 	cdpcs	3, 4, cr0, cr8, cr2, {0}
     dac:	3a030104 	bcc	c11c4 <__bss_end__+0xb671c>
     db0:	02042f82 	andeq	r2, r4, #520	; 0x208
     db4:	04664503 	strbteq	r4, [r6], #-1283	; 0x503
     db8:	823d0301 	eorshi	r0, sp, #67108864	; 0x4000000
     dbc:	0302042f 	movweq	r0, #9263	; 0x242f
     dc0:	01048242 	tsteq	r4, r2, asr #4
     dc4:	8200c003 	andhi	ip, r0, #3
     dc8:	0302042f 	movweq	r0, #9263	; 0x242f
     dcc:	04827fbf 	streq	r7, [r2], #4031	; 0xfbf
     dd0:	00c30301 	sbceq	r0, r3, r1, lsl #6
     dd4:	02042f82 	andeq	r2, r4, #520	; 0x208
     dd8:	827fbc03 	rsbshi	fp, pc, #768	; 0x300
     ddc:	c6030104 	strgt	r0, [r3], -r4, lsl #2
     de0:	042f8200 	strteq	r8, [pc], #-512	; de8 <_start-0x7218>
     de4:	7fb90302 	svcvc	0x00b90302
     de8:	03010482 	movweq	r0, #5250	; 0x1482
     dec:	2f8200c9 	svccs	0x008200c9
     df0:	b6030204 	strlt	r0, [r3], -r4, lsl #4
     df4:	0104827f 	tsteq	r4, pc, ror r2
     df8:	8200cc03 	andhi	ip, r0, #768	; 0x300
     dfc:	0302042f 	movweq	r0, #9263	; 0x242f
     e00:	04827fb3 	streq	r7, [r2], #4019	; 0xfb3
     e04:	00d00301 	sbcseq	r0, r0, r1, lsl #6
     e08:	824c0382 	subhi	r0, ip, #134217730	; 0x8000002
     e0c:	4883844c 	stmmi	r3, {r2, r3, r6, sl, pc}
     e10:	4e2e3603 	cfmadda32mi	mvax0, mvax3, mvfx14, mvfx3
     e14:	034a5403 	movteq	r5, #41987	; 0xa403
     e18:	34324a29 	ldrtcc	r4, [r2], #-2601	; 0xa29
     e1c:	0402009f 	streq	r0, [r2], #-159	; 0x9f
     e20:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
     e24:	bb4b4ed7 	bllt	12d4988 <__bss_end__+0x12c9ee0>
     e28:	0402002c 	streq	r0, [r2], #-44	; 0x2c
     e2c:	062e0601 	strteq	r0, [lr], -r1, lsl #12
     e30:	84a44c6d 	strthi	r4, [r4], #3181	; 0xc6d
     e34:	01040200 	mrseq	r0, R12_usr
     e38:	d7064a06 	strle	r4, [r6, -r6, lsl #20]
     e3c:	0402004d 	streq	r0, [r2], #-77	; 0x4d
     e40:	02004b02 	andeq	r4, r0, #2048	; 0x800
     e44:	00810204 	addeq	r0, r1, r4, lsl #4
     e48:	06010402 	streq	r0, [r1], -r2, lsl #8
     e4c:	4c4d062e 	mcrrmi	6, 2, r0, sp, cr14
     e50:	4b4bbca5 	blmi	12f00ec <__bss_end__+0x12e5644>
     e54:	002f6a4b 	eoreq	r6, pc, fp, asr #20
     e58:	06010402 	streq	r0, [r1], -r2, lsl #8
     e5c:	02008282 	andeq	r8, r0, #536870920	; 0x20000008
     e60:	009e0404 	addseq	r0, lr, r4, lsl #8
     e64:	4a010402 	bmi	41e74 <__bss_end__+0x373cc>
     e68:	bd88d906 	stclt	9, cr13, [r8, #24]
     e6c:	084b4b2f 	stmdaeq	fp, {r0, r1, r2, r3, r5, r8, r9, fp, lr}^
     e70:	02006740 	andeq	r6, r0, #64, 14	; 0x1000000
     e74:	002f0204 	eoreq	r0, pc, r4, lsl #4
     e78:	49020402 	stmdbmi	r2, {r1, sl}
     e7c:	01040200 	mrseq	r0, R12_usr
     e80:	68062e06 	stmdavs	r6, {r1, r2, r9, sl, fp, sp}
     e84:	a04b8634 	subge	r8, fp, r4, lsr r6
     e88:	01040200 	mrseq	r0, R12_usr
     e8c:	d7066606 	strle	r6, [r6, -r6, lsl #12]
     e90:	4b220868 	blmi	883038 <__bss_end__+0x878590>
     e94:	02d84b67 	sbcseq	r4, r8, #105472	; 0x19c00
     e98:	0101000a 	tsteq	r1, sl
     e9c:	00000101 	andeq	r0, r0, r1, lsl #2
     ea0:	00ca0002 	sbceq	r0, sl, r2
     ea4:	01020000 	mrseq	r0, (UNDEF: 2)
     ea8:	000d0efb 	strdeq	r0, [sp], -fp
     eac:	01010101 	tsteq	r1, r1, lsl #2
     eb0:	01000000 	mrseq	r0, (UNDEF: 0)
     eb4:	6d010000 	stcvs	0, cr0, [r1, #-0]
     eb8:	72732d79 	rsbsvc	r2, r3, #7744	; 0x1e40
     ebc:	552f0063 	strpl	r0, [pc, #-99]!	; e61 <_start-0x719f>
     ec0:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     ec4:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
     ec8:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
     ecc:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
     ed0:	6f746b73 	svcvs	0x00746b73
     ed4:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
     ed8:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; d40 <_start-0x72c0>
     edc:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
     ee0:	31726574 	cmncc	r2, r4, ror r5
     ee4:	2f303239 	svccs	0x00303239
     ee8:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
     eec:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
     ef0:	30343173 	eorscc	r3, r4, r3, ror r1
     ef4:	30322d65 	eorscc	r2, r2, r5, ror #26
     ef8:	2f6e6977 	svccs	0x006e6977
     efc:	7062696c 	rsbvc	r6, r2, ip, ror #18
     f00:	73632f69 	cmnvc	r3, #420	; 0x1a4
     f04:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
     f08:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
     f0c:	73552f00 	cmpvc	r5, #0, 30
     f10:	2f737265 	svccs	0x00737265
     f14:	61697262 	cmnvs	r9, r2, ror #4
     f18:	6e756a6e 	vsubvs.f32	s13, s10, s29
     f1c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     f20:	706f746b 	rsbvc	r7, pc, fp, ror #8
     f24:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
     f28:	2f6c6f6f 	svccs	0x006c6f6f
     f2c:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
     f30:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
     f34:	432f3032 	teqmi	pc, #50	; 0x32
     f38:	30343153 	eorscc	r3, r4, r3, asr r1
     f3c:	73632f45 	cmnvc	r3, #276	; 0x114
     f40:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
     f44:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
     f48:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; dac <_start-0x7254>
     f4c:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
     f50:	61750000 	cmnvs	r5, r0
     f54:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
     f58:	00000100 	andeq	r0, r0, r0, lsl #2
     f5c:	6f697067 	svcvs	0x00697067
     f60:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     f64:	70720000 	rsbsvc	r0, r2, r0
     f68:	00682e69 	rsbeq	r2, r8, r9, ror #28
     f6c:	00000003 	andeq	r0, r0, r3
     f70:	b4020500 	strlt	r0, [r2], #-1280	; 0x500
     f74:	03000096 	movweq	r0, #150	; 0x96
     f78:	33300136 	teqcc	r0, #-2147483635	; 0x8000000d
     f7c:	d8306d67 	ldmdale	r0!, {r0, r1, r2, r5, r6, r8, sl, fp, sp, lr}
     f80:	67676730 			; <UNDEFINED> instruction: 0x67676730
     f84:	86686767 	strbthi	r6, [r8], -r7, ror #14
     f88:	306a672f 	rsbcc	r6, sl, pc, lsr #14
     f8c:	2f696767 	svccs	0x00696767
     f90:	674c6a67 	strbvs	r6, [ip, -r7, ror #20]
     f94:	302f2fc1 	eorcc	r2, pc, r1, asr #31
     f98:	3049682f 	subcc	r6, r9, pc, lsr #16
     f9c:	01000202 	tsteq	r0, r2, lsl #4
     fa0:	00017801 	andeq	r7, r1, r1, lsl #16
     fa4:	ca000200 	bgt	17ac <_start-0x6854>
     fa8:	02000000 	andeq	r0, r0, #0
     fac:	0d0efb01 	vstreq	d15, [lr, #-4]
     fb0:	01010100 	mrseq	r0, (UNDEF: 17)
     fb4:	00000001 	andeq	r0, r0, r1
     fb8:	01000001 	tsteq	r0, r1
     fbc:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
     fc0:	2f006372 	svccs	0x00006372
     fc4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     fc8:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
     fcc:	6a6e6169 	bvs	1b99578 <__bss_end__+0x1b8ead0>
     fd0:	442f6e75 	strtmi	r6, [pc], #-3701	; fd8 <_start-0x7028>
     fd4:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
     fd8:	732f706f 	teqvc	pc, #111	; 0x6f
     fdc:	6f6f6863 	svcvs	0x006f6863
     fe0:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     fe4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     fe8:	30323931 	eorscc	r3, r2, r1, lsr r9
     fec:	3153432f 	cmpcc	r3, pc, lsr #6
     ff0:	2f453034 	svccs	0x00453034
     ff4:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
     ff8:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
     ffc:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
    1000:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1004:	632f6970 	teqvs	pc, #112, 18	; 0x1c0000
    1008:	30343173 	eorscc	r3, r4, r3, ror r1
    100c:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
    1010:	552f0063 	strpl	r0, [pc, #-99]!	; fb5 <_start-0x704b>
    1014:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    1018:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    101c:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
    1020:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
    1024:	6f746b73 	svcvs	0x00746b73
    1028:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
    102c:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; e94 <_start-0x716c>
    1030:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
    1034:	31726574 	cmncc	r2, r4, ror r5
    1038:	2f303239 	svccs	0x00303239
    103c:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
    1040:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
    1044:	30343173 	eorscc	r3, r4, r3, ror r1
    1048:	30322d65 	eorscc	r2, r2, r5, ror #26
    104c:	2f6e6977 	svccs	0x006e6977
    1050:	7062696c 	rsbvc	r6, r2, ip, ror #18
    1054:	67000069 	strvs	r0, [r0, -r9, rrx]
    1058:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
    105c:	00010063 	andeq	r0, r1, r3, rrx
    1060:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    1064:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    1068:	72000002 	andvc	r0, r0, #2
    106c:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
    1070:	00000300 	andeq	r0, r0, r0, lsl #6
    1074:	02050000 	andeq	r0, r5, #0
    1078:	000098d8 	ldrdeq	r9, [r0], -r8
    107c:	4e013e03 	cdpmi	14, 0, cr3, cr1, cr3, {0}
    1080:	21086950 	tstcs	r8, r0, asr r9
    1084:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
    1088:	4b326767 	blmi	c9ae2c <__bss_end__+0xc90384>
    108c:	31dc2208 	bicscc	r2, ip, r8, lsl #4
    1090:	504e1351 	subpl	r1, lr, r1, asr r3
    1094:	5031be30 	eorspl	fp, r1, r0, lsr lr
    1098:	304f4d13 	subcc	r4, pc, r3, lsl sp	; <UNPREDICTABLE>
    109c:	69504cc0 	ldmdbvs	r0, {r6, r7, sl, fp, lr}^
    10a0:	67672108 	strbvs	r2, [r7, -r8, lsl #2]!
    10a4:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
    10a8:	21084b32 	tstcs	r8, r2, lsr fp
    10ac:	2f504ca4 	svccs	0x00504ca4
    10b0:	75036984 	strvc	r6, [r3, #-2436]	; 0x984
    10b4:	2e0c0382 	cdpcs	3, 0, cr0, cr12, cr2, {4}
    10b8:	4b4e304d 	blmi	138d1f4 <__bss_end__+0x138274c>
    10bc:	6b6a4d4c 	blvs	1a945f4 <__bss_end__+0x1a89b4c>
    10c0:	67210869 	strvs	r0, [r1, -r9, ror #16]!
    10c4:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
    10c8:	084b3267 	stmdaeq	fp, {r0, r1, r2, r5, r6, r9, ip, sp}^
    10cc:	ba1a0322 	blt	681d5c <__bss_end__+0x6772b4>
    10d0:	2f4c9f31 	svccs	0x004c9f31
    10d4:	2f4e4d52 	svccs	0x004e4d52
    10d8:	684b674b 	stmdavs	fp, {r0, r1, r3, r6, r8, r9, sl, sp, lr}^
    10dc:	2f4c6767 	svccs	0x004c6767
    10e0:	6e4b2f67 	cdpvs	15, 4, cr2, cr11, cr7, {3}
    10e4:	4b2f4e4c 	blmi	bd4a1c <__bss_end__+0xbc9f74>
    10e8:	67684b67 	strbvs	r4, [r8, -r7, ror #22]!
    10ec:	672f4c67 	strvs	r4, [pc, -r7, ror #24]!
    10f0:	4b6d4b2f 	blmi	1b53db4 <__bss_end__+0x1b4930c>
    10f4:	674b2f4e 	strbvs	r2, [fp, -lr, asr #30]
    10f8:	01040200 	mrseq	r0, R12_usr
    10fc:	68066606 	stmdavs	r6, {r1, r2, r9, sl, sp, lr}
    1100:	02002f9f 	andeq	r2, r0, #636	; 0x27c
    1104:	4a060104 	bmi	18151c <__bss_end__+0x176a74>
    1108:	032f6806 	teqeq	pc, #393216	; 0x60000
    110c:	0e034a73 	mcreq	10, 0, r4, cr3, cr3, {3}
    1110:	4e4c4d2e 	cdpmi	13, 4, cr4, cr12, cr14, {1}
    1114:	bcbc4b2f 	fldmiaxlt	ip!, {d4-d26}	;@ Deprecated
    1118:	01000602 	tsteq	r0, r2, lsl #12
    111c:	0000ec01 	andeq	lr, r0, r1, lsl #24
    1120:	d0000200 	andle	r0, r0, r0, lsl #4
    1124:	02000000 	andeq	r0, r0, #0
    1128:	0d0efb01 	vstreq	d15, [lr, #-4]
    112c:	01010100 	mrseq	r0, (UNDEF: 17)
    1130:	00000001 	andeq	r0, r0, r1
    1134:	01000001 	tsteq	r0, r1
    1138:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    113c:	73752f00 	cmnvc	r5, #0, 30
    1140:	6f6c2f72 	svcvs	0x006c2f72
    1144:	2f6c6163 	svccs	0x006c6163
    1148:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
    114c:	612f7261 	teqvs	pc, r1, ror #4
    1150:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1154:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    1158:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    115c:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
    1160:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
    1164:	30373173 	eorscc	r3, r7, r3, ror r1
    1168:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    116c:	63672f62 	cmnvs	r7, #392	; 0x188
    1170:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    1174:	6f6e2d6d 	svcvs	0x006e2d6d
    1178:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
    117c:	2f696261 	svccs	0x00696261
    1180:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
    1184:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
    1188:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    118c:	752f0065 	strvc	r0, [pc, #-101]!	; 112f <_start-0x6ed1>
    1190:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; fcc <_start-0x7034>
    1194:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    1198:	6c65432f 	stclvs	3, cr4, [r5], #-188	; 0xffffff44
    119c:	2f72616c 	svccs	0x0072616c
    11a0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    11a4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    11a8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    11ac:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
    11b0:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
    11b4:	37317363 	ldrcc	r7, [r1, -r3, ror #6]!
    11b8:	612f6530 	teqvs	pc, r0, lsr r5	; <UNPREDICTABLE>
    11bc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    11c0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    11c4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    11c8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    11cc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    11d0:	656d0000 	strbvs	r0, [sp, #-0]!
    11d4:	7465736d 	strbtvc	r7, [r5], #-877	; 0x36d
    11d8:	0100632e 	tsteq	r0, lr, lsr #6
    11dc:	74730000 	ldrbtvc	r0, [r3], #-0
    11e0:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    11e4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    11e8:	74730000 	ldrbtvc	r0, [r3], #-0
    11ec:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    11f0:	0300682e 	movweq	r6, #2094	; 0x82e
    11f4:	00000000 	andeq	r0, r0, r0
    11f8:	9e400205 	cdpls	2, 4, cr0, cr0, cr5, {0}
    11fc:	13140000 	tstne	r4, #0
    1200:	02002f4c 	andeq	r2, r0, #76, 30	; 0x130
    1204:	4d490104 	stfmie	f0, [r9, #-16]
    1208:	01000202 	tsteq	r0, r2, lsl #4
    120c:	00012801 	andeq	r2, r1, r1, lsl #16
    1210:	0d000200 	sfmeq	f0, 4, [r0, #-0]
    1214:	02000001 	andeq	r0, r0, #1
    1218:	0d0efb01 	vstreq	d15, [lr, #-4]
    121c:	01010100 	mrseq	r0, (UNDEF: 17)
    1220:	00000001 	andeq	r0, r0, r1
    1224:	01000001 	tsteq	r0, r1
    1228:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
    122c:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
    1230:	2f006372 	svccs	0x00006372
    1234:	2f727375 	svccs	0x00727375
    1238:	61636f6c 	cmnvs	r3, ip, ror #30
    123c:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
    1240:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
    1244:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    1248:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    124c:	61652d65 	cmnvs	r5, r5, ror #26
    1250:	342f6962 	strtcc	r6, [pc], #-2402	; 1258 <_start-0x6da8>
    1254:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
    1258:	3173632d 	cmncc	r3, sp, lsr #6
    125c:	2f653037 	svccs	0x00653037
    1260:	2f62696c 	svccs	0x0062696c
    1264:	2f636367 	svccs	0x00636367
    1268:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    126c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    1270:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    1274:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
    1278:	2f332e38 	svccs	0x00332e38
    127c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1280:	00656475 	rsbeq	r6, r5, r5, ror r4
    1284:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    1288:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
    128c:	432f6c61 	teqmi	pc, #24832	; 0x6100
    1290:	616c6c65 	cmnvs	ip, r5, ror #24
    1294:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
    1298:	6f6e2d6d 	svcvs	0x006e2d6d
    129c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
    12a0:	2f696261 	svccs	0x00696261
    12a4:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
    12a8:	73632d33 	cmnvc	r3, #3264	; 0xcc0
    12ac:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
    12b0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    12b4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    12b8:	61652d65 	cmnvs	r5, r5, ror #26
    12bc:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    12c0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    12c4:	00006564 	andeq	r6, r0, r4, ror #10
    12c8:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xf63
    12cc:	2d6c6f72 	stclcs	15, cr6, [ip, #-456]!	; 0xfffffe38
    12d0:	636f6c62 	cmnvs	pc, #25088	; 0x6200
    12d4:	00632e6b 	rsbeq	r2, r3, fp, ror #28
    12d8:	73000001 	movwvc	r0, #1
    12dc:	65646474 	strbvs	r6, [r4, #-1140]!	; 0x474
    12e0:	00682e66 	rsbeq	r2, r8, r6, ror #28
    12e4:	73000002 	movwvc	r0, #2
    12e8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    12ec:	63672d74 	cmnvs	r7, #116, 26	; 0x1d00
    12f0:	00682e63 	rsbeq	r2, r8, r3, ror #28
    12f4:	73000002 	movwvc	r0, #2
    12f8:	61752d77 	cmnvs	r5, r7, ror sp
    12fc:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
    1300:	00000100 	andeq	r0, r0, r0, lsl #2
    1304:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xf63
    1308:	2d6c6f72 	stclcs	15, cr6, [ip, #-456]!	; 0xfffffe38
    130c:	636f6c62 	cmnvs	pc, #25088	; 0x6200
    1310:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    1314:	73000001 	movwvc	r0, #1
    1318:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    131c:	00682e67 	rsbeq	r2, r8, r7, ror #28
    1320:	00000003 	andeq	r0, r0, r3
    1324:	60020500 	andvs	r0, r2, r0, lsl #10
    1328:	1600009e 			; <UNDEFINED> instruction: 0x1600009e
    132c:	4c688330 	stclmi	3, cr8, [r8], #-192	; 0xffffff40
    1330:	2f4b9f14 	svccs	0x004b9f14
    1334:	01000402 	tsteq	r0, r2, lsl #8
    1338:	Address 0x0000000000001338 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0x56e
   4:	61747300 	cmnvs	r4, r0, lsl #6
   8:	47006b63 	strmi	r6, [r0, -r3, ror #22]
   c:	4320554e 	teqmi	r0, #327155712	; 0x13800000
  10:	382e3420 	stmdacc	lr!, {r5, sl, ip, sp}
  14:	2d20332e 	stccs	3, cr3, [r0, #-184]!	; 0xffffff48
  18:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0x36d
  1c:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  20:	36373131 			; <UNDEFINED> instruction: 0x36373131
  24:	2d667a6a 	vstmdbcs	r6!, {s15-s120}
  28:	6d2d2073 	stcvs	0, cr2, [sp, #-460]!	; 0xfffffe34
  2c:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0x574
  30:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  34:	36373131 			; <UNDEFINED> instruction: 0x36373131
  38:	2d667a6a 	vstmdbcs	r6!, {s15-s120}
  3c:	672d2073 			; <UNDEFINED> instruction: 0x672d2073
  40:	20626467 	rsbcs	r6, r2, r7, ror #8
  44:	20674f2d 	rsbcs	r4, r7, sp, lsr #30
  48:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0x32d
  4c:	756e673d 	strbvc	r6, [lr, #-1853]!	; 0x73d
  50:	2d203939 	stccs	9, cr3, [r0, #-228]!	; 0xffffff1c
  54:	65726666 	ldrbvs	r6, [r2, #-1638]!	; 0x666
  58:	61747365 	cmnvs	r4, r5, ror #6
  5c:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
  60:	6f6e0067 	svcvs	0x006e0067
  64:	69616d74 	stmdbvs	r1!, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^
  68:	6175006e 	cmnvs	r5, lr, rrx
  6c:	695f7472 	ldmdbvs	pc, {r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
  70:	0074696e 	rsbseq	r6, r4, lr, ror #18
  74:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  78:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
  7c:	61686320 	cmnvs	r8, r0, lsr #6
  80:	6c630072 	stclvs	0, cr0, [r3], #-456	; 0xfffffe38
  84:	5f6e6165 	svcpl	0x006e6165
  88:	6f626572 	svcvs	0x00626572
  8c:	7200746f 	andvc	r7, r0, #1862270976	; 0x6f000000
  90:	665f6970 			; <UNDEFINED> instruction: 0x665f6970
  94:	006b726f 	rsbeq	r7, fp, pc, ror #4
  98:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
  9c:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
  a0:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
  a4:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
  a8:	2f00746e 	svccs	0x0000746e
  ac:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  b0:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
  b4:	6a6e6169 	bvs	1b98660 <__bss_end__+0x1b8dbb8>
  b8:	442f6e75 	strtmi	r6, [pc], #-3701	; c0 <_start-0x7f40>
  bc:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
  c0:	732f706f 	teqvc	pc, #111	; 0x6f
  c4:	6f6f6863 	svcvs	0x006f6863
  c8:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
  cc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
  d0:	30323931 	eorscc	r3, r2, r1, lsr r9
  d4:	3153432f 	cmpcc	r3, pc, lsr #6
  d8:	2f453034 	svccs	0x00453034
  dc:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
  e0:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
  e4:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
  e8:	62616c2f 	rsbvs	r6, r1, #12032	; 0x2f00
  ec:	2d362f73 	ldccs	15, cr2, [r6, #-460]!	; 0xfffffe34
  f0:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
  f4:	2f736461 	svccs	0x00736461
  f8:	68742d32 	ldmdavs	r4!, {r1, r4, r5, r8, sl, fp, sp}^
  fc:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 100:	65722e73 	ldrbvs	r2, [r2, #-3699]!	; 0xe73
 104:	74636166 	strbtvc	r6, [r3], #-358	; 0x166
 108:	6b00726f 	blvs	1cacc <__bss_end__+0x12024>
 10c:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 110:	7200636f 	andvc	r6, r0, #-1140850687	; 0xbc000001
 114:	745f6970 	ldrbvc	r6, [pc], #-2416	; 11c <_start-0x7ee4>
 118:	61657268 	cmnvs	r5, r8, ror #4
 11c:	74735f64 	ldrbtvc	r5, [r3], #-3940	; 0xf64
 120:	00747261 	rsbseq	r7, r4, r1, ror #4
 124:	65742d31 	ldrbvs	r2, [r4, #-3377]!	; 0xd31
 128:	742d7473 	strtvc	r7, [sp], #-1139	; 0x473
 12c:	61657268 	cmnvs	r5, r8, ror #4
 130:	00632e64 	rsbeq	r2, r3, r4, ror #28
 134:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 138:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
 13c:	0065646f 	rsbeq	r6, r5, pc, ror #8
 140:	55465f5f 	strbpl	r5, [r6, #-3935]	; 0xf5f
 144:	4954434e 	ldmdbmi	r4, {r1, r2, r3, r6, r8, r9, lr}^
 148:	5f5f4e4f 	svcpl	0x005f4e4f
 14c:	72687400 	rsbvc	r7, r8, #0, 8
 150:	5f646165 	svcpl	0x00646165
 154:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 158:	70720074 	rsbsvc	r0, r2, r4, ror r0
 15c:	78655f69 	stmdavc	r5!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 160:	72007469 	andvc	r7, r0, #1761607680	; 0x69000000
 164:	735f6765 	cmpvc	pc, #26476544	; 0x1940000
 168:	5f657661 	svcpl	0x00657661
 16c:	61657261 	cmnvs	r5, r1, ror #4
 170:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
 174:	6f6c2067 	svcvs	0x006c2067
 178:	7520676e 	strvc	r6, [r0, #-1902]!	; 0x76e
 17c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 180:	2064656e 	rsbcs	r6, r4, lr, ror #10
 184:	00746e69 	rsbseq	r6, r4, r9, ror #28
 188:	5f697072 	svcpl	0x00697072
 18c:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 190:	745f6461 	ldrbvc	r6, [pc], #-1121	; 198 <_start-0x7e68>
 194:	72687400 	rsbvc	r7, r8, #0, 8
 198:	5f646165 	svcpl	0x00646165
 19c:	006d7573 	rsbeq	r7, sp, r3, ror r5
 1a0:	5f697072 	svcpl	0x00697072
 1a4:	6c656979 	stclvs	9, cr6, [r5], #-484	; 0xfffffe1c
 1a8:	69730064 	ldmdbvs	r3!, {r2, r5, r6}^
 1ac:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
 1b0:	6c006570 	cfstr32vs	mvfx6, [r0], {112}	; 0x70
 1b4:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 1b8:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 1bc:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
 1c0:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 1c4:	7268745f 	rsbvc	r7, r8, #1593835520	; 0x5f000000
 1c8:	00646165 	rsbeq	r6, r4, r5, ror #2
 1cc:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 1d0:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
 1d4:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
 1d8:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
 1dc:	7200745f 	andvc	r7, r0, #1593835520	; 0x5f000000
 1e0:	635f6970 	cmpvs	pc, #112, 18	; 0x1c0000
 1e4:	745f7275 	ldrbvc	r7, [pc], #-629	; 1ec <_start-0x7e14>
 1e8:	61657268 	cmnvs	r5, r8, ror #4
 1ec:	6d6b0064 	stclvs	0, cr0, [fp, #-400]!	; 0xfffffe70
 1f0:	6f6c6c61 	svcvs	0x006c6c61
 1f4:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 1f8:	72007469 	andvc	r7, r0, #1761607680	; 0x69000000
 1fc:	725f6970 	subsvc	r6, pc, #112, 18	; 0x1c0000
 200:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
 204:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
 208:	5f5f0063 	svcpl	0x005f0063
 20c:	63756e67 	cmnvs	r5, #1648	; 0x670
 210:	5f61765f 	svcpl	0x0061765f
 214:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
 218:	62696c00 	rsbvs	r6, r9, #0, 24
 21c:	72702f63 	rsbsvc	r2, r0, #396	; 0x18c
 220:	6b746e69 	blvs	1d1bbcc <__bss_end__+0x1d11124>
 224:	7600632e 	strvc	r6, [r0], -lr, lsr #6
 228:	72705f61 	rsbsvc	r5, r0, #388	; 0x184
 22c:	6b746e69 	blvs	1d1bbd8 <__bss_end__+0x1d11130>
 230:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
 234:	696c5f61 	stmdbvs	ip!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
 238:	2f007473 	svccs	0x00007473
 23c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 240:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 244:	6a6e6169 	bvs	1b987f0 <__bss_end__+0x1b8dd48>
 248:	442f6e75 	strtmi	r6, [pc], #-3701	; 250 <_start-0x7db0>
 24c:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 250:	732f706f 	teqvc	pc, #111	; 0x6f
 254:	6f6f6863 	svcvs	0x006f6863
 258:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 25c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 260:	30323931 	eorscc	r3, r2, r1, lsr r9
 264:	3153432f 	cmpcc	r3, pc, lsr #6
 268:	2f453034 	svccs	0x00453034
 26c:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 270:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 274:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 278:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 27c:	61006970 	tstvs	r0, r0, ror r9
 280:	00736772 	rsbseq	r6, r3, r2, ror r7
 284:	70615f5f 	rsbvc	r5, r1, pc, asr pc
 288:	746e6900 	strbtvc	r6, [lr], #-2304	; 0x900
 28c:	616e7265 	cmnvs	lr, r5, ror #4
 290:	75705f6c 	ldrbvc	r5, [r0, #-3948]!	; 0xf6c
 294:	61686374 	smcvs	34356	; 0x8634
 298:	70720072 	rsbsvc	r0, r2, r2, ror r0
 29c:	75705f69 	ldrbvc	r5, [r0, #-3945]!	; 0xf69
 2a0:	61686374 	smcvs	34356	; 0x8634
 2a4:	696c0072 	stmdbvs	ip!, {r1, r4, r5, r6}^
 2a8:	702f6362 	eorvc	r6, pc, r2, ror #6
 2ac:	68637475 	stmdavs	r3!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
 2b0:	632e7261 	teqvs	lr, #268435462	; 0x10000006
 2b4:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 2b8:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
 2bc:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
 2c0:	696c0063 	stmdbvs	ip!, {r0, r1, r5, r6}^
 2c4:	702f6362 	eorvc	r6, pc, r2, ror #6
 2c8:	2e6b7475 	mcrcs	4, 3, r7, cr11, cr5, {3}
 2cc:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
 2d0:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
 2d4:	705f6c61 	subsvc	r6, pc, r1, ror #24
 2d8:	006b7475 	rsbeq	r7, fp, r5, ror r4
 2dc:	5f67656e 	svcpl	0x0067656e
 2e0:	65720070 	ldrbvs	r0, [r2, #-112]!	; 0x70
 2e4:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 2e8:	73690065 	cmnvc	r9, #101	; 0x65
 2ec:	69676964 	stmdbvs	r7!, {r2, r5, r6, r8, fp, sp, lr}^
 2f0:	75700074 	ldrbvc	r0, [r0, #-116]!	; 0x74
 2f4:	665f7374 			; <UNDEFINED> instruction: 0x665f7374
 2f8:	61620070 	smcvs	8192	; 0x2000
 2fc:	73006573 	movwvc	r6, #1395	; 0x573
 300:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
 304:	00705f64 	rsbseq	r5, r0, r4, ror #30
 308:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 30c:	2d61762f 	stclcs	6, cr7, [r1, #-188]!	; 0xffffff44
 310:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 314:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
 318:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 31c:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
 320:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xf5f
 324:	00747570 	rsbseq	r7, r4, r0, ror r5
 328:	74646977 	strbtvc	r6, [r4], #-2423	; 0x977
 32c:	75700068 	ldrbvc	r0, [r0, #-104]!	; 0x68
 330:	665f6374 			; <UNDEFINED> instruction: 0x665f6374
 334:	6d650070 	stclvs	0, cr0, [r5, #-448]!	; 0xfffffe40
 338:	72007469 	andvc	r7, r0, #1761607680	; 0x69000000
 33c:	725f6970 	subsvc	r6, pc, #112, 18	; 0x1c0000
 340:	6f6f6265 	svcvs	0x006f6265
 344:	73630074 	cmnvc	r3, #116	; 0x74
 348:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 34c:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 350:	656c632f 	strbvs	r6, [ip, #-815]!	; 0x32f
 354:	722d6e61 	eorvc	r6, sp, #1552	; 0x610
 358:	6f6f6265 	svcvs	0x006f6265
 35c:	00632e74 	rsbeq	r2, r3, r4, ror lr
 360:	616c6564 	cmnvs	ip, r4, ror #10
 364:	736d5f79 	cmnvc	sp, #484	; 0x1e4
 368:	746e6900 	strbtvc	r6, [lr], #-2304	; 0x900
 36c:	616e7265 	cmnvs	lr, r5, ror #4
 370:	77735f6c 	ldrbvc	r5, [r3, -ip, ror #30]!
 374:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
 378:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 37c:	625f5f00 	subsvs	r5, pc, #0, 30
 380:	735f7373 	cmpvc	pc, #-872415231	; 0xcc000001
 384:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
 388:	62005f5f 	andvs	r5, r0, #380	; 0x17c
 38c:	655f7373 	ldrbvs	r7, [pc, #-883]	; 21 <_start-0x7fdf>
 390:	6300646e 	movwvs	r6, #1134	; 0x46e
 394:	656c6379 	strbvs	r6, [ip, #-889]!	; 0x379
 398:	7265705f 	rsbvc	r7, r5, #95	; 0x5f
 39c:	7469625f 	strbtvc	r6, [r9], #-607	; 0x25f
 3a0:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
 3a4:	656c6f73 	strbvs	r6, [ip, #-3955]!	; 0xf73
 3a8:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 3ac:	77730074 			; <UNDEFINED> instruction: 0x77730074
 3b0:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 3b4:	72705f74 	rsbsvc	r5, r0, #116, 30	; 0x1d0
 3b8:	6b746e69 	blvs	1d1bd64 <__bss_end__+0x1d112bc>
 3bc:	54555000 	ldrbpl	r5, [r5], #-0
 3c0:	53455f43 	movtpl	r5, #24387	; 0x5f43
 3c4:	41555f50 	cmpmi	r5, r0, asr pc
 3c8:	73005452 	movwvc	r5, #1106	; 0x452
 3cc:	61755f77 	cmnvs	r5, r7, ror pc
 3d0:	745f7472 	ldrbvc	r7, [pc], #-1138	; 3d8 <_start-0x7c28>
 3d4:	54555000 	ldrbpl	r5, [r5], #-0
 3d8:	57535f43 	ldrbpl	r5, [r3, -r3, asr #30]
 3dc:	5241555f 	subpl	r5, r1, #398458880	; 0x17c00000
 3e0:	61620054 	qdsubvs	r0, r4, r2
 3e4:	50006475 	andpl	r6, r0, r5, ror r4
 3e8:	5f435455 	svcpl	0x00435455
 3ec:	555f5748 	ldrbpl	r5, [pc, #-1864]	; fffffcac <__bss_end__+0xffff5204>
 3f0:	00545241 	subseq	r5, r4, r1, asr #4
 3f4:	7473635f 	ldrbtvc	r6, [r3], #-863	; 0x35f
 3f8:	00747261 	rsbseq	r7, r4, r1, ror #4
 3fc:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 400:	7665645f 			; <UNDEFINED> instruction: 0x7665645f
 404:	7300745f 	movwvc	r7, #1119	; 0x45f
 408:	61755f77 	cmnvs	r5, r7, ror pc
 40c:	705f7472 	subsvc	r7, pc, r2, ror r4	; <UNPREDICTABLE>
 410:	00637475 	rsbeq	r7, r3, r5, ror r4
 414:	746e6975 	strbtvc	r6, [lr], #-2421	; 0x975
 418:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 41c:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xf63
 420:	5f6c6f72 	svcpl	0x006c6f72
 424:	5f6b6c62 	svcpl	0x006b6c62
 428:	77730074 			; <UNDEFINED> instruction: 0x77730074
 42c:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 430:	62630074 	rsbvs	r0, r3, #116	; 0x74
 434:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 438:	6f6c625f 	svcvs	0x006c625f
 43c:	5f006b63 	svcpl	0x00006b63
 440:	7373625f 	cmnvc	r3, #-268435451	; 0xf0000005
 444:	646e655f 	strbtvs	r6, [lr], #-1375	; 0x55f
 448:	63005f5f 	movwvs	r5, #3935	; 0xf5f
 44c:	30343173 	eorscc	r3, r4, r3, ror r1
 450:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 454:	73632f63 	cmnvc	r3, #396	; 0x18c
 458:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
 45c:	6300632e 	movwvs	r6, #814	; 0x32e
 460:	6f736e6f 	svcvs	0x00736e6f
 464:	645f656c 	ldrbvs	r6, [pc], #-1388	; 46c <_start-0x7b94>
 468:	6d007665 	stcvs	6, cr7, [r0, #-404]	; 0xfffffe6c
 46c:	63696761 	cmnvs	r9, #25427968	; 0x1840000
 470:	5f746100 	svcpl	0x00746100
 474:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
 478:	76656c5f 			; <UNDEFINED> instruction: 0x76656c5f
 47c:	50006c65 	andpl	r6, r0, r5, ror #24
 480:	41505f4d 	cmpmi	r0, sp, asr #30
 484:	4f575353 	svcmi	0x00575353
 488:	63004452 	movwvs	r4, #1106	; 0x452
 48c:	30343173 	eorscc	r3, r4, r3, ror r1
 490:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 494:	65722f63 	ldrbvs	r2, [r2, #-3939]!	; 0xf63
 498:	746f6f62 	strbtvc	r6, [pc], #-3938	; 4a0 <_start-0x7b60>
 49c:	5000632e 	andpl	r6, r0, lr, lsr #6
 4a0:	53525f4d 	cmppl	r2, #308	; 0x134
 4a4:	575f4354 			; <UNDEFINED> instruction: 0x575f4354
 4a8:	47464352 	smlsldmi	r4, r6, r2, r3
 4ac:	4c55465f 	mrrcmi	6, 5, r4, r5, cr15
 4b0:	45525f4c 	ldrbmi	r5, [r2, #-3916]	; 0xf4c
 4b4:	00544553 	subseq	r4, r4, r3, asr r5
 4b8:	575f4d50 			; <UNDEFINED> instruction: 0x575f4d50
 4bc:	00474f44 	subeq	r4, r7, r4, asr #30
 4c0:	5f746573 	svcpl	0x00746573
 4c4:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
 4c8:	76656c5f 			; <UNDEFINED> instruction: 0x76656c5f
 4cc:	50006c65 	andpl	r6, r0, r5, ror #24
 4d0:	32335455 	eorscc	r5, r3, #1426063360	; 0x55000000
 4d4:	5f4d5000 	svcpl	0x004d5000
 4d8:	43545352 	cmpmi	r4, #1207959553	; 0x48000001
 4dc:	73706300 	cmnvc	r0, #0, 6
 4e0:	69740072 	ldmdbvs	r4!, {r1, r4, r5, r6}^
 4e4:	5f72656d 	svcpl	0x0072656d
 4e8:	5f746567 	svcpl	0x00746567
 4ec:	63657375 	cmnvs	r5, #-738197503	; 0xd4000001
 4f0:	7761725f 			; <UNDEFINED> instruction: 0x7761725f
 4f4:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 4f8:	735f7961 	cmpvc	pc, #1589248	; 0x184000
 4fc:	63006365 	movwvs	r6, #869	; 0x365
 500:	30343173 	eorscc	r3, r4, r3, ror r1
 504:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 508:	69742f63 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
 50c:	2e72656d 	cdpcs	5, 7, cr6, cr2, cr13, {3}
 510:	45470063 	strbmi	r0, [r7, #-99]	; 0x63
 514:	00323354 	eorseq	r3, r2, r4, asr r3
 518:	6b636974 	blvs	18daaf0 <__bss_end__+0x18d0048>
 51c:	65640073 	strbvs	r0, [r4, #-115]!	; 0x73
 520:	5f79616c 	svcpl	0x0079616c
 524:	6c637963 	stclvs	9, cr7, [r3], #-396	; 0xfffffe74
 528:	64007365 	strvs	r7, [r0], #-869	; 0x365
 52c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 530:	0073755f 	rsbseq	r7, r3, pc, asr r5
 534:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 538:	65675f72 	strbvs	r5, [r7, #-3954]!	; 0xf72
 53c:	73755f74 	cmnvc	r5, #116, 30	; 0x1d0
 540:	73006365 	movwvc	r6, #869	; 0x365
 544:	5f657a69 	svcpl	0x00657a69
 548:	6d6b0074 	stclvs	0, cr0, [fp, #-464]!	; 0xfffffe30
 54c:	6f6c6c61 	svcvs	0x006c6c61
 550:	6c615f63 	stclvs	15, cr5, [r1], #-396	; 0xfffffe74
 554:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
 558:	666b0064 	strbtvs	r0, [fp], -r4, rrx
 55c:	5f656572 	svcpl	0x00656572
 560:	006c6c61 	rsbeq	r6, ip, r1, ror #24
 564:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
 568:	5f64656e 	svcpl	0x0064656e
 56c:	70616568 	rsbvc	r6, r1, r8, ror #10
 570:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
 574:	6d656d00 	stclvs	13, cr6, [r5, #-0]
 578:	00746573 	rsbseq	r6, r4, r3, ror r5
 57c:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
 580:	6b2f6372 	blvs	bd9350 <__bss_end__+0xbce8a8>
 584:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 588:	632e636f 	teqvs	lr, #-1140850687	; 0xbc000001
 58c:	61747300 	cmnvs	r4, r0, lsl #6
 590:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
 594:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
 598:	69007373 	stmdbvs	r0, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}
 59c:	5f74696e 	svcpl	0x0074696e
 5a0:	6c610070 	stclvs	0, cr0, [r1], #-448	; 0xfffffe40
 5a4:	6d6e6769 	stclvs	7, cr6, [lr, #-420]!	; 0xfffffe5c
 5a8:	00746e65 	rsbseq	r6, r4, r5, ror #28
 5ac:	6e756f72 	mrcvs	15, 3, r6, cr5, cr2, {3}
 5b0:	5f646564 	svcpl	0x00646564
 5b4:	7479626e 	ldrbtvc	r6, [r9], #-622	; 0x26e
 5b8:	6b007365 	blvs	1d354 <__bss_end__+0x128ac>
 5bc:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 5c0:	685f636f 	ldmdavs	pc, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 5c4:	5f706165 	svcpl	0x00706165
 5c8:	00727470 	rsbseq	r7, r2, r0, ror r4
 5cc:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
 5d0:	5f636f6c 	svcpl	0x00636f6c
 5d4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
 5d8:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
 5dc:	6174735f 	cmnvs	r4, pc, asr r3
 5e0:	74007472 	strvc	r7, [r0], #-1138	; 0x472
 5e4:	6c615f6f 	stclvs	15, cr5, [r1], #-444	; 0xfffffe44
 5e8:	61636f6c 	cmnvs	r3, ip, ror #30
 5ec:	5f006574 	svcpl	0x00006574
 5f0:	6165685f 	cmnvs	r5, pc, asr r8
 5f4:	74735f70 	ldrbtvc	r5, [r3], #-3952	; 0xf70
 5f8:	5f747261 	svcpl	0x00747261
 5fc:	5f51005f 	svcpl	0x0051005f
 600:	68737570 	ldmdavs	r3!, {r4, r5, r6, r8, sl, ip, sp, lr}^
 604:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 608:	696f6a5f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, r9, fp, sp, lr}^	; <UNPREDICTABLE>
 60c:	7865006e 	stmdavc	r5!, {r1, r2, r3, r5, r6}^
 610:	6f637469 	svcvs	0x00637469
 614:	6e006564 	cfsh32vs	mvfx6, mvfx0, #52
 618:	6e75725f 	mrcvs	2, 3, r7, cr5, cr15, {2}
 61c:	665f6e00 	ldrbvs	r6, [pc], -r0, lsl #28
 620:	00656572 	rsbeq	r6, r5, r2, ror r5
 624:	5f697072 	svcpl	0x00697072
 628:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 62c:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
 630:	6568635f 	strbvs	r6, [r8, #-863]!	; 0x35f
 634:	51006b63 	tstpl	r0, r3, ror #22
 638:	6c656e5f 	stclvs	14, cr6, [r5], #-380	; 0xfffffe84
 63c:	72006d65 	andvc	r6, r0, #6464	; 0x1940
 640:	695f6970 	ldmdbvs	pc, {r4, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
 644:	5f74696e 	svcpl	0x0074696e
 648:	6d617274 	sfmvs	f7, 2, [r1, #-464]!	; 0xfffffe30
 64c:	696c6f70 	stmdbvs	ip!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 650:	7200656e 	andvc	r6, r0, #461373440	; 0x1b800000
 654:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
 658:	6b636174 	blvs	18d8c30 <__bss_end__+0x18ce188>
 65c:	6568635f 	strbvs	r6, [r8, #-863]!	; 0x35f
 660:	66006b63 	strvs	r6, [r0], -r3, ror #22
 664:	71656572 	smcvc	22098	; 0x5652
 668:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 66c:	6178655f 	cmnvs	r8, pc, asr r5
 670:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 674:	7065656c 	rsbvc	r6, r5, ip, ror #10
 678:	655f5100 	ldrbvs	r5, [pc, #-256]	; 580 <_start-0x7a80>
 67c:	7974706d 	ldmdbvc	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
 680:	705f5100 	subsvc	r5, pc, r0, lsl #2
 684:	7300706f 	movwvc	r7, #111	; 0x6f
 688:	64656863 	strbtvs	r6, [r5], #-2147	; 0x863
 68c:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
 690:	7268745f 	rsbvc	r7, r8, #1593835520	; 0x5f000000
 694:	00646165 	rsbeq	r6, r4, r5, ror #2
 698:	6c696174 	stfvse	f6, [r9], #-464	; 0xfffffe30
 69c:	5f687400 	svcpl	0x00687400
 6a0:	6f6c6c61 	svcvs	0x006c6c61
 6a4:	68740063 	ldmdavs	r4!, {r0, r1, r5, r6}^
 6a8:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0x65f
 6ac:	5f510065 	svcpl	0x00510065
 6b0:	65707061 	ldrbvs	r7, [r0, #-97]!	; 0x61
 6b4:	6800646e 	stmdavs	r0, {r1, r2, r3, r5, r6, sl, sp, lr}
 6b8:	00646165 	rsbeq	r6, r4, r5, ror #2
 6bc:	716e7572 	smcvc	59218	; 0xe752
 6c0:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 6c4:	7773635f 			; <UNDEFINED> instruction: 0x7773635f
 6c8:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
 6cc:	2d796d00 	ldclcs	13, cr6, [r9, #-0]
 6d0:	2f637273 	svccs	0x00637273
 6d4:	2d697072 	stclcs	0, cr7, [r9, #-456]!	; 0xfffffe38
 6d8:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 6dc:	632e6461 	teqvs	lr, #1627389952	; 0x61000000
 6e0:	646c6f00 	strbtvs	r6, [ip], #-3840	; 0xf00
 6e4:	7268745f 	rsbvc	r7, r8, #1593835520	; 0x5f000000
 6e8:	00646165 	rsbeq	r6, r4, r5, ror #2
 6ec:	6c6c616e 	stfvse	f6, [ip], #-440	; 0xfffffe48
 6f0:	6465636f 	strbtvs	r6, [r5], #-879	; 0x36f
 6f4:	63796300 	cmnvs	r9, #0, 6
 6f8:	7265705f 	rsbvc	r7, r5, #95	; 0x5f
 6fc:	7469625f 	strbtvc	r6, [r9], #-607	; 0x25f
 700:	69727700 	ldmdbvs	r2!, {r8, r9, sl, ip, sp, lr}^
 704:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 708:	755f6379 	ldrbvc	r6, [pc, #-889]	; 397 <_start-0x7c69>
 70c:	6c69746e 	cfstrdvs	mvd7, [r9], #-440	; 0xfffffe48
 710:	5f777300 	svcpl	0x00777300
 714:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 718:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 71c:	69745f63 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
 720:	756f656d 	strbvc	r6, [pc, #-1389]!	; 1bb <_start-0x7e45>
 724:	77730074 			; <UNDEFINED> instruction: 0x77730074
 728:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 72c:	65675f74 	strbvs	r5, [r7, #-3956]!	; 0xf74
 730:	755f7374 	ldrbvc	r7, [pc, #-884]	; 3c4 <_start-0x7c3c>
 734:	6c69746e 	cfstrdvs	mvd7, [r9], #-440	; 0xfffffe48
 738:	5f777300 	svcpl	0x00777300
 73c:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 740:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 744:	65640063 	strbvs	r0, [r4, #-99]!	; 0x63
 748:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
 74c:	65640064 	strbvs	r0, [r4, #-100]!	; 0x64
 750:	5f79616c 	svcpl	0x0079616c
 754:	6379636e 	cmnvs	r9, #-1207959551	; 0xb8000001
 758:	0073656c 	rsbseq	r6, r3, ip, ror #10
 75c:	755f7773 	ldrbvc	r7, [pc, #-1907]	; fffffff1 <__bss_end__+0xffff5549>
 760:	5f747261 	svcpl	0x00747261
 764:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
 768:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
 76c:	00726570 	rsbseq	r6, r2, r0, ror r5
 770:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 774:	5f74756f 	svcpl	0x0074756f
 778:	63657375 	cmnvs	r5, #-738197503	; 0xd4000001
 77c:	5f777300 	svcpl	0x00777300
 780:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 784:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
 788:	7067006b 	rsbvc	r0, r7, fp, rrx
 78c:	725f6f69 	subsvc	r6, pc, #420	; 0x1a4
 790:	00646165 	rsbeq	r6, r4, r5, ror #2
 794:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
 798:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
 79c:	61752d77 	cmnvs	r5, r7, ror sp
 7a0:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
 7a4:	61686300 	cmnvs	r8, r0, lsl #6
 7a8:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
 7ac:	5f777300 	svcpl	0x00777300
 7b0:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 7b4:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 7b8:	69745f73 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 7bc:	756f656d 	strbvc	r6, [pc, #-1389]!	; 257 <_start-0x7da9>
 7c0:	6f5f0074 	svcvs	0x005f0074
 7c4:	67007475 	smlsdxvs	r0, r5, r4, r7
 7c8:	5f6f6970 	svcpl	0x006f6970
 7cc:	74697277 	strbtvc	r7, [r9], #-631	; 0x277
 7d0:	73750065 	cmnvc	r5, #101	; 0x65
 7d4:	745f6365 	ldrbvc	r6, [pc], #-869	; 7dc <_start-0x7824>
 7d8:	6f656d69 	svcvs	0x00656d69
 7dc:	67007475 	smlsdxvs	r0, r5, r4, r7
 7e0:	5f6f6970 	svcpl	0x006f6970
 7e4:	5f746573 	svcpl	0x00746573
 7e8:	75706e69 	ldrbvc	r6, [r0, #-3689]!	; 0xe69
 7ec:	77730074 			; <UNDEFINED> instruction: 0x77730074
 7f0:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 7f4:	65675f74 	strbvs	r5, [r7, #-3956]!	; 0xf74
 7f8:	755f7374 	ldrbvc	r7, [pc, #-884]	; 48c <_start-0x7b74>
 7fc:	6c69746e 	cfstrdvs	mvd7, [r9], #-440	; 0xfffffe48
 800:	6b6c625f 	blvs	1b19184 <__bss_end__+0x1b0e6dc>
 804:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 808:	65735f6f 	ldrbvs	r5, [r3, #-3951]!	; 0xf6f
 80c:	756f5f74 	strbvc	r5, [pc, #-3956]!	; fffff8a0 <__bss_end__+0xffff4df8>
 810:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
 814:	69617700 	stmdbvs	r1!, {r8, r9, sl, ip, sp, lr}^
 818:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 81c:	5f6c6974 	svcpl	0x006c6974
 820:	63657375 	cmnvs	r5, #-738197503	; 0xd4000001
 824:	58554100 	ldmdapl	r5, {r8, lr}^
 828:	5f554d5f 	svcpl	0x00554d5f
 82c:	5f52434d 	svcpl	0x0052434d
 830:	00474552 	subeq	r4, r7, r2, asr r5
 834:	5f585541 	svcpl	0x00585541
 838:	495f554d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, sl, ip, lr}^	; <UNPREDICTABLE>
 83c:	45525f4f 	ldrbmi	r5, [r2, #-3919]	; 0xf4f
 840:	55410047 	strbpl	r0, [r1, #-71]	; 0x47
 844:	554d5f58 	strbpl	r5, [sp, #-3928]	; 0xf58
 848:	52534d5f 	subspl	r4, r3, #6080	; 0x17c0
 84c:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
 850:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 854:	55465f4f 	strbpl	r5, [r6, #-3919]	; 0xf4f
 858:	415f434e 	cmpmi	pc, lr, asr #6
 85c:	0030544c 	eorseq	r5, r0, ip, asr #8
 860:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 864:	6e61635f 	mcrvs	3, 3, r6, cr1, cr15, {2}
 868:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 86c:	55410063 	strbpl	r0, [r1, #-99]	; 0x63
 870:	554d5f58 	strbpl	r5, [sp, #-3928]	; 0xf58
 874:	544e435f 	strbpl	r4, [lr], #-863	; 0x35f
 878:	45525f4c 	ldrbmi	r5, [r2, #-3916]	; 0xf4c
 87c:	61750047 	cmnvs	r5, r7, asr #32
 880:	685f7472 	ldmdavs	pc, {r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 884:	645f7361 	ldrbvs	r7, [pc], #-865	; 88c <_start-0x7774>
 888:	00617461 	rsbeq	r7, r1, r1, ror #8
 88c:	5f766564 	svcpl	0x00766564
 890:	72726162 	rsbsvc	r6, r2, #-2147483624	; 0x80000018
 894:	00726569 	rsbseq	r6, r2, r9, ror #10
 898:	4f495047 	svcmi	0x00495047
 89c:	4e55465f 	mrcmi	6, 2, r4, cr5, cr15, {2}
 8a0:	554f5f43 	strbpl	r5, [pc, #-3907]	; fffff965 <__bss_end__+0xffff4ebd>
 8a4:	54555054 	ldrbpl	r5, [r5], #-84	; 0x54
 8a8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 8ac:	55465f4f 	strbpl	r5, [r6, #-3919]	; 0xf4f
 8b0:	415f434e 	cmpmi	pc, lr, asr #6
 8b4:	0031544c 	eorseq	r5, r1, ip, asr #8
 8b8:	4f495047 	svcmi	0x00495047
 8bc:	4e55465f 	mrcmi	6, 2, r4, cr5, cr15, {2}
 8c0:	4c415f43 	mcrrmi	15, 4, r5, r1, cr3
 8c4:	47003254 	smlsdmi	r0, r4, r2, r3
 8c8:	5f4f4950 	svcpl	0x004f4950
 8cc:	434e5546 	movtmi	r5, #58694	; 0xe546
 8d0:	544c415f 	strbpl	r4, [ip], #-351	; 0x15f
 8d4:	50470033 	subpl	r0, r7, r3, lsr r0
 8d8:	465f4f49 	ldrbmi	r4, [pc], -r9, asr #30
 8dc:	5f434e55 	svcpl	0x00434e55
 8e0:	35544c41 	ldrbcc	r4, [r4, #-3137]	; 0xc41
 8e4:	58554100 	ldmdapl	r5, {r8, lr}^
 8e8:	5f554d5f 	svcpl	0x00554d5f
 8ec:	5f524549 	svcpl	0x00524549
 8f0:	00474552 	subeq	r4, r7, r2, asr r5
 8f4:	33747570 	cmncc	r4, #112, 10	; 0x1c000000
 8f8:	55410032 	strbpl	r0, [r1, #-50]	; 0x32
 8fc:	554d5f58 	strbpl	r5, [sp, #-3928]	; 0xf58
 900:	5249495f 	subpl	r4, r9, #1556480	; 0x17c000
 904:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
 908:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 90c:	75665f6f 	strbvc	r5, [r6, #-3951]!	; 0xf6f
 910:	745f636e 	ldrbvc	r6, [pc], #-878	; 918 <_start-0x76e8>
 914:	72617500 	rsbvc	r7, r1, #0, 10
 918:	61635f74 	smcvs	13812	; 0x35f4
 91c:	75705f6e 	ldrbvc	r5, [r0, #-3950]!	; 0xf6e
 920:	41006374 	tstmi	r0, r4, ror r3
 924:	455f5855 	ldrbmi	r5, [pc, #-2133]	; d7 <_start-0x7f29>
 928:	4c42414e 	stfmie	f4, [r2], {78}	; 0x4e
 92c:	41005345 	tstmi	r0, r5, asr #6
 930:	495f5855 	ldmdbmi	pc, {r0, r2, r4, r6, fp, ip, lr}^	; <UNPREDICTABLE>
 934:	41005152 	tstmi	r0, r2, asr r1
 938:	4d5f5855 	ldclmi	8, cr5, [pc, #-340]	; 7ec <_start-0x7814>
 93c:	41425f55 	cmpmi	r2, r5, asr pc
 940:	525f4455 	subspl	r4, pc, #1426063360	; 0x55000000
 944:	41004745 	tstmi	r0, r5, asr #14
 948:	4d5f5855 	ldclmi	8, cr5, [pc, #-340]	; 7fc <_start-0x7804>
 94c:	54535f55 	ldrbpl	r5, [r3], #-3925	; 0xf55
 950:	525f5441 	subspl	r5, pc, #1090519040	; 0x41000000
 954:	47004745 	strmi	r4, [r0, -r5, asr #14]
 958:	5f4f4950 	svcpl	0x004f4950
 95c:	434e5546 	movtmi	r5, #58694	; 0xe546
 960:	544c415f 	strbpl	r4, [ip], #-351	; 0x15f
 964:	70670034 	rsbvc	r0, r7, r4, lsr r0
 968:	735f6f69 	cmpvc	pc, #420	; 0x1a4
 96c:	665f7465 	ldrbvs	r7, [pc], -r5, ror #8
 970:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xe75
 974:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 978:	5f585541 	svcpl	0x00585541
 97c:	535f554d 	cmppl	pc, #322961408	; 0x13400000
 980:	54415243 	strbpl	r5, [r1], #-579	; 0x243
 984:	6d004843 	stcvs	8, cr4, [r0, #-268]	; 0xfffffef4
 988:	72732d79 	rsbsvc	r2, r3, #7744	; 0x1e40
 98c:	61752f63 	cmnvs	r5, r3, ror #30
 990:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
 994:	58554100 	ldmdapl	r5, {r8, lr}^
 998:	5f554d5f 	svcpl	0x00554d5f
 99c:	5f52434c 	svcpl	0x0052434c
 9a0:	00474552 	subeq	r4, r7, r2, asr r5
 9a4:	4f495047 	svcmi	0x00495047
 9a8:	4e55465f 	mrcmi	6, 2, r4, cr5, cr15, {2}
 9ac:	4e495f43 	cdpmi	15, 4, cr5, cr9, cr3, {2}
 9b0:	00545550 	subseq	r5, r4, r0, asr r5
 9b4:	5f585541 	svcpl	0x00585541
 9b8:	4c5f554d 	cfldr64mi	mvdx5, [pc], {77}	; 0x4d
 9bc:	525f5253 	subspl	r5, pc, #805306373	; 0x30000005
 9c0:	75004745 	strvc	r4, [r0, #-1861]	; 0x745
 9c4:	5f747261 	svcpl	0x00747261
 9c8:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
 9cc:	7973615f 	ldmdbvc	r3!, {r0, r1, r2, r3, r4, r6, r8, sp, lr}^
 9d0:	6700636e 	strvs	r6, [r0, -lr, ror #6]
 9d4:	32337465 	eorscc	r7, r3, #1694498816	; 0x65000000
 9d8:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 9dc:	76655f6f 	strbtvc	r5, [r5], -pc, ror #30
 9e0:	5f746e65 	svcpl	0x00746e65
 9e4:	65746564 	ldrbvs	r6, [r4, #-1380]!	; 0x564
 9e8:	64657463 	strbtvs	r7, [r5], #-1123	; 0x463
 9ec:	46504700 	ldrbmi	r4, [r0], -r0, lsl #14
 9f0:	324c4553 	subcc	r4, ip, #348127232	; 0x14c00000
 9f4:	43504700 	cmpmi	r0, #0, 14
 9f8:	0030524c 	eorseq	r5, r0, ip, asr #4
 9fc:	42414e45 	submi	r4, r1, #1104	; 0x450
 a00:	495f454c 	ldmdbmi	pc, {r2, r3, r6, r8, sl, lr}^	; <UNPREDICTABLE>
 a04:	5f535152 	svcpl	0x00535152
 a08:	73690032 	cmnvc	r9, #50	; 0x32
 a0c:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
 a10:	6e695f6f 	cdpvs	15, 6, cr5, cr9, cr15, {3}
 a14:	70670074 	rsbvc	r0, r7, r4, ror r0
 a18:	735f6f69 	cmpvc	pc, #420	; 0x1a4
 a1c:	6f5f7465 	svcvs	0x005f7465
 a20:	6d006666 	stcvs	6, cr6, [r0, #-408]	; 0xfffffe68
 a24:	72732d79 	rsbsvc	r2, r3, #7744	; 0x1e40
 a28:	70672f63 	rsbvc	r2, r7, r3, ror #30
 a2c:	632e6f69 	teqvs	lr, #420	; 0x1a4
 a30:	746e6900 	strbtvc	r6, [lr], #-2304	; 0x900
 a34:	73616d5f 	cmnvc	r1, #6080	; 0x17c0
 a38:	5047006b 	subpl	r0, r7, fp, rrx
 a3c:	30544553 	subscc	r4, r4, r3, asr r5
 a40:	53504700 	cmppl	r0, #0, 14
 a44:	00315445 	eorseq	r5, r1, r5, asr #8
 a48:	5f676572 	svcpl	0x00676572
 a4c:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
 a50:	4c504700 	mrrcmi	7, 0, r4, r0, cr0
 a54:	00305645 	eorseq	r5, r0, r5, asr #12
 a58:	454c5047 	strbmi	r5, [ip, #-71]	; 0x47
 a5c:	67003156 	smlsdvs	r0, r6, r1, r3
 a60:	5f6f6970 	svcpl	0x006f6970
 a64:	00676572 	rsbeq	r6, r7, r2, ror r5
 a68:	53465047 	movtpl	r5, #24647	; 0x6047
 a6c:	00304c45 	eorseq	r4, r0, r5, asr #24
 a70:	53465047 	movtpl	r5, #24647	; 0x6047
 a74:	00314c45 	eorseq	r4, r1, r5, asr #24
 a78:	53465047 	movtpl	r5, #24647	; 0x6047
 a7c:	00334c45 	eorseq	r4, r3, r5, asr #24
 a80:	53465047 	movtpl	r5, #24647	; 0x6047
 a84:	00344c45 	eorseq	r4, r4, r5, asr #24
 a88:	53465047 	movtpl	r5, #24647	; 0x6047
 a8c:	00354c45 	eorseq	r4, r5, r5, asr #24
 a90:	6f697067 	svcvs	0x00697067
 a94:	6573665f 	ldrbvs	r6, [r3, #-1631]!	; 0x65f
 a98:	4700306c 	strmi	r3, [r0, -ip, rrx]
 a9c:	524c4350 	subpl	r4, ip, #80, 6	; 0x40000001
 aa0:	70670031 	rsbvc	r0, r7, r1, lsr r0
 aa4:	695f6f69 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 aa8:	725f746e 	subsvc	r7, pc, #1845493760	; 0x6e000000
 aac:	6e697369 	cdpvs	3, 6, cr7, cr9, cr9, {3}
 ab0:	64655f67 	strbtvs	r5, [r5], #-3943	; 0xf67
 ab4:	47006567 	strmi	r6, [r0, -r7, ror #10]
 ab8:	4e455250 	mcrmi	2, 2, r5, cr5, cr0, {2}
 abc:	50470030 	subpl	r0, r7, r0, lsr r0
 ac0:	314e4552 	cmpcc	lr, r2, asr r5
 ac4:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 ac8:	76655f6f 	strbtvc	r5, [r5], -pc, ror #30
 acc:	5f746e65 	svcpl	0x00746e65
 ad0:	61656c63 	cmnvs	r5, r3, ror #24
 ad4:	52490072 	subpl	r0, r9, #114	; 0x72
 ad8:	45505f51 	ldrbmi	r5, [r0, #-3921]	; 0xf51
 adc:	4e49444e 	cdpmi	4, 4, cr4, cr9, cr14, {2}
 ae0:	00315f47 	eorseq	r5, r1, r7, asr #30
 ae4:	5f515249 	svcpl	0x00515249
 ae8:	444e4550 	strbmi	r4, [lr], #-1360	; 0x550
 aec:	5f474e49 	svcpl	0x00474e49
 af0:	69620032 	stmdbvs	r2!, {r1, r4, r5}^
 af4:	73616d74 	cmnvc	r1, #116, 26	; 0x1d00
 af8:	7067006b 	rsbvc	r0, r7, fp, rrx
 afc:	735f6f69 	cmpvc	pc, #420	; 0x1a4
 b00:	00307465 	eorseq	r7, r0, r5, ror #8
 b04:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 b08:	45504700 	ldrbmi	r4, [r0, #-1792]	; 0x700
 b0c:	00305344 	eorseq	r5, r0, r4, asr #6
 b10:	44455047 	strbmi	r5, [r5], #-71	; 0x47
 b14:	67003153 	smlsdvs	r0, r3, r1, r3
 b18:	5f6f6970 	svcpl	0x006f6970
 b1c:	5f746573 	svcpl	0x00746573
 b20:	47006e6f 	strmi	r6, [r0, -pc, ror #28]
 b24:	4e454650 	mcrmi	6, 2, r4, cr5, cr0, {2}
 b28:	50470030 	subpl	r0, r7, r0, lsr r0
 b2c:	314e4546 	cmpcc	lr, r6, asr #10
 b30:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 b34:	6e695f6f 	cdpvs	15, 6, cr5, cr9, cr15, {3}
 b38:	61665f74 	smcvs	26100	; 0x65f4
 b3c:	6e696c6c 	cdpvs	12, 6, cr6, cr9, cr12, {3}
 b40:	64655f67 	strbtvs	r5, [r5], #-3943	; 0xf67
 b44:	72006567 	andvc	r6, r0, #432013312	; 0x19c00000
 b48:	735f6765 	cmpvc	pc, #26476544	; 0x1940000
 b4c:	63656c65 	cmnvs	r5, #25856	; 0x6500
 b50:	70670074 	rsbvc	r0, r7, r4, ror r0
 b54:	635f6f69 	cmpvs	pc, #420	; 0x1a4
 b58:	0030726c 	eorseq	r7, r0, ip, ror #4
 b5c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 b60:	6d656d2f 	stclvs	13, cr6, [r5, #-188]!	; 0xffffff44
 b64:	2e746573 	mrccs	5, 3, r6, cr4, cr3, {3}
 b68:	62630063 	rsbvs	r0, r3, #99	; 0x63
 b6c:	77656e5f 			; <UNDEFINED> instruction: 0x77656e5f
 b70:	31736300 	cmncc	r3, r0, lsl #6
 b74:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 b78:	2f637273 	svccs	0x00637273
 b7c:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xf63
 b80:	2d6c6f72 	stclcs	15, cr6, [ip, #-456]!	; 0xfffffe38
 b84:	636f6c62 	cmnvs	pc, #25088	; 0x6200
 b88:	00632e6b 	rsbeq	r2, r3, fp, ror #28

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	00008010 	andeq	r8, r0, r0, lsl r0
  1c:	000000b8 	strheq	r0, [r0], -r8
  20:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
  24:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
  28:	180e4201 	stmdane	lr, {r0, r9, lr}
  2c:	0000001c 	andeq	r0, r0, ip, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	000080c8 	andeq	r8, r0, r8, asr #1
  38:	000000f8 	strdeq	r0, [r0], -r8
  3c:	83180e42 	tsthi	r8, #1056	; 0x420
  40:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
  44:	87038604 	strhi	r8, [r3, -r4, lsl #12]
  48:	00018e02 	andeq	r8, r1, r2, lsl #28
  4c:	0000000c 	andeq	r0, r0, ip
  50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  54:	7c020001 	stcvc	0, cr0, [r2], {1}
  58:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  5c:	00000024 	andeq	r0, r0, r4, lsr #32
  60:	0000004c 	andeq	r0, r0, ip, asr #32
  64:	00008280 	andeq	r8, r0, r0, lsl #5
  68:	00000058 	andeq	r0, r0, r8, asr r0
  6c:	80100e42 	andshi	r0, r0, r2, asr #28
  70:	82038104 	andhi	r8, r3, #4, 2
  74:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
  78:	07841c0e 	streq	r1, [r4, lr, lsl #24]
  7c:	058e0685 	streq	r0, [lr, #1669]	; 0x685
  80:	00280e42 	eoreq	r0, r8, r2, asr #28
  84:	0000000c 	andeq	r0, r0, ip
  88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  8c:	7c020001 	stcvc	0, cr0, [r2], {1}
  90:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  94:	00000014 	andeq	r0, r0, r4, lsl r0
  98:	00000084 	andeq	r0, r0, r4, lsl #1
  9c:	000082d8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
  a0:	00000014 	andeq	r0, r0, r4, lsl r0
  a4:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
  a8:	00018e02 	andeq	r8, r1, r2, lsl #28
  ac:	0000000c 	andeq	r0, r0, ip
  b0:	00000084 	andeq	r0, r0, r4, lsl #1
  b4:	000082ec 	andeq	r8, r0, ip, ror #5
  b8:	00000018 	andeq	r0, r0, r8, lsl r0
  bc:	0000000c 	andeq	r0, r0, ip
  c0:	00000084 	andeq	r0, r0, r4, lsl #1
  c4:	00008304 	andeq	r8, r0, r4, lsl #6
  c8:	00000010 	andeq	r0, r0, r0, lsl r0
  cc:	0000000c 	andeq	r0, r0, ip
  d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  d4:	7c020001 	stcvc	0, cr0, [r2], {1}
  d8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  dc:	00000018 	andeq	r0, r0, r8, lsl r0
  e0:	000000cc 	andeq	r0, r0, ip, asr #1
  e4:	00008314 	andeq	r8, r0, r4, lsl r3
  e8:	00000034 	andeq	r0, r0, r4, lsr r0
  ec:	83100e42 	tsthi	r0, #1056	; 0x420
  f0:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
  f4:	00018e02 	andeq	r8, r1, r2, lsl #28
  f8:	0000000c 	andeq	r0, r0, ip
  fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 100:	7c020001 	stcvc	0, cr0, [r2], {1}
 104:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 108:	0000000c 	andeq	r0, r0, ip
 10c:	000000f8 	strdeq	r0, [r0], -r8
 110:	00008348 	andeq	r8, r0, r8, asr #6
 114:	00000014 	andeq	r0, r0, r4, lsl r0
 118:	0000000c 	andeq	r0, r0, ip
 11c:	000000f8 	strdeq	r0, [r0], -r8
 120:	0000835c 	andeq	r8, r0, ip, asr r3
 124:	0000002c 	andeq	r0, r0, ip, lsr #32
 128:	0000000c 	andeq	r0, r0, ip
 12c:	000000f8 	strdeq	r0, [r0], -r8
 130:	00008388 	andeq	r8, r0, r8, lsl #7
 134:	00000040 	andeq	r0, r0, r0, asr #32
 138:	00000020 	andeq	r0, r0, r0, lsr #32
 13c:	000000f8 	strdeq	r0, [r0], -r8
 140:	000083c8 	andeq	r8, r0, r8, asr #7
 144:	0000019c 	muleq	r0, ip, r1
 148:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 14c:	86058506 	strhi	r8, [r5], -r6, lsl #10
 150:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 154:	42018e02 	andmi	r8, r1, #2, 28
 158:	0000580e 	andeq	r5, r0, lr, lsl #16
 15c:	00000014 	andeq	r0, r0, r4, lsl r0
 160:	000000f8 	strdeq	r0, [r0], -r8
 164:	00008564 	andeq	r8, r0, r4, ror #10
 168:	00000054 	andeq	r0, r0, r4, asr r0
 16c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 170:	00018e02 	andeq	r8, r1, r2, lsl #28
 174:	00000028 	andeq	r0, r0, r8, lsr #32
 178:	000000f8 	strdeq	r0, [r0], -r8
 17c:	000085b8 			; <UNDEFINED> instruction: 0x000085b8
 180:	00000288 	andeq	r0, r0, r8, lsl #5
 184:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
 188:	86088509 	strhi	r8, [r8], -r9, lsl #10
 18c:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
 190:	8a048905 	bhi	1225ac <__bss_end__+0x117b04>
 194:	8e028b03 	vmlahi.f64	d8, d2, d3
 198:	b00e4201 	andlt	r4, lr, r1, lsl #4
 19c:	00000001 	andeq	r0, r0, r1
 1a0:	0000000c 	andeq	r0, r0, ip
 1a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1a8:	7c020001 	stcvc	0, cr0, [r2], {1}
 1ac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1b0:	00000014 	andeq	r0, r0, r4, lsl r0
 1b4:	000001a0 	andeq	r0, r0, r0, lsr #3
 1b8:	00008840 	andeq	r8, r0, r0, asr #16
 1bc:	00000028 	andeq	r0, r0, r8, lsr #32
 1c0:	83080e42 	movwhi	r0, #36418	; 0x8e42
 1c4:	00018e02 	andeq	r8, r1, r2, lsl #28
 1c8:	0000000c 	andeq	r0, r0, ip
 1cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1d0:	7c020001 	stcvc	0, cr0, [r2], {1}
 1d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1d8:	00000014 	andeq	r0, r0, r4, lsl r0
 1dc:	000001c8 	andeq	r0, r0, r8, asr #3
 1e0:	00008868 	andeq	r8, r0, r8, ror #16
 1e4:	00000020 	andeq	r0, r0, r0, lsr #32
 1e8:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 1ec:	00018e02 	andeq	r8, r1, r2, lsl #28
 1f0:	00000014 	andeq	r0, r0, r4, lsl r0
 1f4:	000001c8 	andeq	r0, r0, r8, asr #3
 1f8:	00008888 	andeq	r8, r0, r8, lsl #17
 1fc:	00000090 	muleq	r0, r0, r0
 200:	83080e42 	movwhi	r0, #36418	; 0x8e42
 204:	00018e02 	andeq	r8, r1, r2, lsl #28
 208:	0000000c 	andeq	r0, r0, ip
 20c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 210:	7c020001 	stcvc	0, cr0, [r2], {1}
 214:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 218:	0000000c 	andeq	r0, r0, ip
 21c:	00000208 	andeq	r0, r0, r8, lsl #4
 220:	00008918 	andeq	r8, r0, r8, lsl r9
 224:	00000018 	andeq	r0, r0, r8, lsl r0
 228:	0000000c 	andeq	r0, r0, ip
 22c:	00000208 	andeq	r0, r0, r8, lsl #4
 230:	00008930 	andeq	r8, r0, r0, lsr r9
 234:	00000014 	andeq	r0, r0, r4, lsl r0
 238:	00000014 	andeq	r0, r0, r4, lsl r0
 23c:	00000208 	andeq	r0, r0, r8, lsl #4
 240:	00008944 	andeq	r8, r0, r4, asr #18
 244:	00000048 	andeq	r0, r0, r8, asr #32
 248:	83080e42 	movwhi	r0, #36418	; 0x8e42
 24c:	00018e02 	andeq	r8, r1, r2, lsl #28
 250:	0000000c 	andeq	r0, r0, ip
 254:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 258:	7c020001 	stcvc	0, cr0, [r2], {1}
 25c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 260:	0000000c 	andeq	r0, r0, ip
 264:	00000250 	andeq	r0, r0, r0, asr r2
 268:	0000898c 	andeq	r8, r0, ip, lsl #19
 26c:	0000001c 	andeq	r0, r0, ip, lsl r0
 270:	00000014 	andeq	r0, r0, r4, lsl r0
 274:	00000250 	andeq	r0, r0, r0, asr r2
 278:	000089a8 	andeq	r8, r0, r8, lsr #19
 27c:	00000014 	andeq	r0, r0, r4, lsl r0
 280:	83080e42 	movwhi	r0, #36418	; 0x8e42
 284:	00018e02 	andeq	r8, r1, r2, lsl #28
 288:	00000014 	andeq	r0, r0, r4, lsl r0
 28c:	00000250 	andeq	r0, r0, r0, asr r2
 290:	000089bc 			; <UNDEFINED> instruction: 0x000089bc
 294:	0000000c 	andeq	r0, r0, ip
 298:	83080e42 	movwhi	r0, #36418	; 0x8e42
 29c:	00018e02 	andeq	r8, r1, r2, lsl #28
 2a0:	00000018 	andeq	r0, r0, r8, lsl r0
 2a4:	00000250 	andeq	r0, r0, r0, asr r2
 2a8:	000089c8 	andeq	r8, r0, r8, asr #19
 2ac:	00000024 	andeq	r0, r0, r4, lsr #32
 2b0:	83100e42 	tsthi	r0, #1056	; 0x420
 2b4:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 2b8:	00018e02 	andeq	r8, r1, r2, lsl #28
 2bc:	00000014 	andeq	r0, r0, r4, lsl r0
 2c0:	00000250 	andeq	r0, r0, r0, asr r2
 2c4:	000089ec 	andeq	r8, r0, ip, ror #19
 2c8:	00000014 	andeq	r0, r0, r4, lsl r0
 2cc:	83080e42 	movwhi	r0, #36418	; 0x8e42
 2d0:	00018e02 	andeq	r8, r1, r2, lsl #28
 2d4:	00000014 	andeq	r0, r0, r4, lsl r0
 2d8:	00000250 	andeq	r0, r0, r0, asr r2
 2dc:	00008a00 	andeq	r8, r0, r0, lsl #20
 2e0:	00000014 	andeq	r0, r0, r4, lsl r0
 2e4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 2e8:	00018e02 	andeq	r8, r1, r2, lsl #28
 2ec:	0000000c 	andeq	r0, r0, ip
 2f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2f4:	7c020001 	stcvc	0, cr0, [r2], {1}
 2f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2fc:	00000018 	andeq	r0, r0, r8, lsl r0
 300:	000002ec 	andeq	r0, r0, ip, ror #5
 304:	00008a14 	andeq	r8, r0, r4, lsl sl
 308:	00000074 	andeq	r0, r0, r4, ror r0
 30c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 310:	86038504 	strhi	r8, [r3], -r4, lsl #10
 314:	00018e02 	andeq	r8, r1, r2, lsl #28
 318:	00000014 	andeq	r0, r0, r4, lsl r0
 31c:	000002ec 	andeq	r0, r0, ip, ror #5
 320:	00008a88 	andeq	r8, r0, r8, lsl #21
 324:	0000009c 	muleq	r0, ip, r0
 328:	83080e42 	movwhi	r0, #36418	; 0x8e42
 32c:	00018e02 	andeq	r8, r1, r2, lsl #28
 330:	00000014 	andeq	r0, r0, r4, lsl r0
 334:	000002ec 	andeq	r0, r0, ip, ror #5
 338:	00008b24 	andeq	r8, r0, r4, lsr #22
 33c:	0000005c 	andeq	r0, r0, ip, asr r0
 340:	83080e42 	movwhi	r0, #36418	; 0x8e42
 344:	00018e02 	andeq	r8, r1, r2, lsl #28
 348:	0000000c 	andeq	r0, r0, ip
 34c:	000002ec 	andeq	r0, r0, ip, ror #5
 350:	00008b80 	andeq	r8, r0, r0, lsl #23
 354:	00000018 	andeq	r0, r0, r8, lsl r0
 358:	0000000c 	andeq	r0, r0, ip
 35c:	000002ec 	andeq	r0, r0, ip, ror #5
 360:	00008b98 	muleq	r0, r8, fp
 364:	00000010 	andeq	r0, r0, r0, lsl r0
 368:	00000014 	andeq	r0, r0, r4, lsl r0
 36c:	000002ec 	andeq	r0, r0, ip, ror #5
 370:	00008ba8 	andeq	r8, r0, r8, lsr #23
 374:	00000054 	andeq	r0, r0, r4, asr r0
 378:	83080e42 	movwhi	r0, #36418	; 0x8e42
 37c:	00018e02 	andeq	r8, r1, r2, lsl #28
 380:	0000000c 	andeq	r0, r0, ip
 384:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 388:	7c020001 	stcvc	0, cr0, [r2], {1}
 38c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 390:	0000000c 	andeq	r0, r0, ip
 394:	00000380 	andeq	r0, r0, r0, lsl #7
 398:	00008bfc 	strdeq	r8, [r0], -ip
 39c:	00000008 	andeq	r0, r0, r8
 3a0:	0000000c 	andeq	r0, r0, ip
 3a4:	00000380 	andeq	r0, r0, r0, lsl #7
 3a8:	00008c04 	andeq	r8, r0, r4, lsl #24
 3ac:	00000038 	andeq	r0, r0, r8, lsr r0
 3b0:	0000000c 	andeq	r0, r0, ip
 3b4:	00000380 	andeq	r0, r0, r0, lsl #7
 3b8:	00008c3c 	andeq	r8, r0, ip, lsr ip
 3bc:	00000028 	andeq	r0, r0, r8, lsr #32
 3c0:	00000014 	andeq	r0, r0, r4, lsl r0
 3c4:	00000380 	andeq	r0, r0, r0, lsl #7
 3c8:	00008c64 	andeq	r8, r0, r4, ror #24
 3cc:	00000018 	andeq	r0, r0, r8, lsl r0
 3d0:	83080e42 	movwhi	r0, #36418	; 0x8e42
 3d4:	00018e02 	andeq	r8, r1, r2, lsl #28
 3d8:	00000014 	andeq	r0, r0, r4, lsl r0
 3dc:	00000380 	andeq	r0, r0, r0, lsl #7
 3e0:	00008c7c 	andeq	r8, r0, ip, ror ip
 3e4:	00000084 	andeq	r0, r0, r4, lsl #1
 3e8:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 3ec:	00018e02 	andeq	r8, r1, r2, lsl #28
 3f0:	00000014 	andeq	r0, r0, r4, lsl r0
 3f4:	00000380 	andeq	r0, r0, r0, lsl #7
 3f8:	00008d00 	andeq	r8, r0, r0, lsl #26
 3fc:	00000098 	muleq	r0, r8, r0
 400:	83080e42 	movwhi	r0, #36418	; 0x8e42
 404:	00018e02 	andeq	r8, r1, r2, lsl #28
 408:	00000014 	andeq	r0, r0, r4, lsl r0
 40c:	00000380 	andeq	r0, r0, r0, lsl #7
 410:	00008d98 	muleq	r0, r8, sp
 414:	00000084 	andeq	r0, r0, r4, lsl #1
 418:	83080e42 	movwhi	r0, #36418	; 0x8e42
 41c:	00018e02 	andeq	r8, r1, r2, lsl #28
 420:	0000000c 	andeq	r0, r0, ip
 424:	00000380 	andeq	r0, r0, r0, lsl #7
 428:	00008e1c 	andeq	r8, r0, ip, lsl lr
 42c:	00000010 	andeq	r0, r0, r0, lsl r0
 430:	00000018 	andeq	r0, r0, r8, lsl r0
 434:	00000380 	andeq	r0, r0, r0, lsl #7
 438:	00008e2c 	andeq	r8, r0, ip, lsr #28
 43c:	0000004c 	andeq	r0, r0, ip, asr #32
 440:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 444:	86038504 	strhi	r8, [r3], -r4, lsl #10
 448:	00018e02 	andeq	r8, r1, r2, lsl #28
 44c:	00000018 	andeq	r0, r0, r8, lsl r0
 450:	00000380 	andeq	r0, r0, r0, lsl #7
 454:	00008e78 	andeq	r8, r0, r8, ror lr
 458:	00000058 	andeq	r0, r0, r8, asr r0
 45c:	83100e42 	tsthi	r0, #1056	; 0x420
 460:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 464:	00018e02 	andeq	r8, r1, r2, lsl #28
 468:	00000018 	andeq	r0, r0, r8, lsl r0
 46c:	00000380 	andeq	r0, r0, r0, lsl #7
 470:	00008ed0 	ldrdeq	r8, [r0], -r0
 474:	00000050 	andeq	r0, r0, r0, asr r0
 478:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 47c:	86038504 	strhi	r8, [r3], -r4, lsl #10
 480:	00018e02 	andeq	r8, r1, r2, lsl #28
 484:	0000001c 	andeq	r0, r0, ip, lsl r0
 488:	00000380 	andeq	r0, r0, r0, lsl #7
 48c:	00008f20 	andeq	r8, r0, r0, lsr #30
 490:	0000009c 	muleq	r0, ip, r0
 494:	84140e42 	ldrhi	r0, [r4], #-3650	; 0xe42
 498:	86048505 	strhi	r8, [r4], -r5, lsl #10
 49c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 4a0:	280e4201 	stmdacs	lr, {r0, r9, lr}
 4a4:	00000014 	andeq	r0, r0, r4, lsl r0
 4a8:	00000380 	andeq	r0, r0, r0, lsl #7
 4ac:	00008fbc 			; <UNDEFINED> instruction: 0x00008fbc
 4b0:	00000054 	andeq	r0, r0, r4, asr r0
 4b4:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 4b8:	00018e02 	andeq	r8, r1, r2, lsl #28
 4bc:	00000014 	andeq	r0, r0, r4, lsl r0
 4c0:	00000380 	andeq	r0, r0, r0, lsl #7
 4c4:	00009010 	andeq	r9, r0, r0, lsl r0
 4c8:	0000002c 	andeq	r0, r0, ip, lsr #32
 4cc:	83080e42 	movwhi	r0, #36418	; 0x8e42
 4d0:	00018e02 	andeq	r8, r1, r2, lsl #28
 4d4:	00000014 	andeq	r0, r0, r4, lsl r0
 4d8:	00000380 	andeq	r0, r0, r0, lsl #7
 4dc:	0000903c 	andeq	r9, r0, ip, lsr r0
 4e0:	0000002c 	andeq	r0, r0, ip, lsr #32
 4e4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 4e8:	00018e02 	andeq	r8, r1, r2, lsl #28
 4ec:	00000014 	andeq	r0, r0, r4, lsl r0
 4f0:	00000380 	andeq	r0, r0, r0, lsl #7
 4f4:	00009068 	andeq	r9, r0, r8, rrx
 4f8:	0000002c 	andeq	r0, r0, ip, lsr #32
 4fc:	83080e42 	movwhi	r0, #36418	; 0x8e42
 500:	00018e02 	andeq	r8, r1, r2, lsl #28
 504:	0000000c 	andeq	r0, r0, ip
 508:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 50c:	7c020001 	stcvc	0, cr0, [r2], {1}
 510:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 514:	0000001c 	andeq	r0, r0, ip, lsl r0
 518:	00000504 	andeq	r0, r0, r4, lsl #10
 51c:	00009094 	muleq	r0, r4, r0
 520:	00000154 	andeq	r0, r0, r4, asr r1
 524:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 528:	86058506 	strhi	r8, [r5], -r6, lsl #10
 52c:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 530:	00018e02 	andeq	r8, r1, r2, lsl #28
 534:	00000020 	andeq	r0, r0, r0, lsr #32
 538:	00000504 	andeq	r0, r0, r4, lsl #10
 53c:	000091e8 	andeq	r9, r0, r8, ror #3
 540:	000001c8 	andeq	r0, r0, r8, asr #3
 544:	83200e42 	teqhi	r0, #1056	; 0x420
 548:	85078408 	strhi	r8, [r7, #-1032]	; 0x408
 54c:	87058606 	strhi	r8, [r5, -r6, lsl #12]
 550:	89038804 	stmdbhi	r3, {r2, fp, pc}
 554:	00018e02 	andeq	r8, r1, r2, lsl #28
 558:	00000020 	andeq	r0, r0, r0, lsr #32
 55c:	00000504 	andeq	r0, r0, r4, lsl #10
 560:	000093b0 			; <UNDEFINED> instruction: 0x000093b0
 564:	00000090 	muleq	r0, r0, r0
 568:	84200e42 	strthi	r0, [r0], #-3650	; 0xe42
 56c:	86078508 	strhi	r8, [r7], -r8, lsl #10
 570:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
 574:	8a038904 	bhi	e298c <__bss_end__+0xd7ee4>
 578:	00018e02 	andeq	r8, r1, r2, lsl #28
 57c:	0000001c 	andeq	r0, r0, ip, lsl r0
 580:	00000504 	andeq	r0, r0, r4, lsl #10
 584:	00009440 	andeq	r9, r0, r0, asr #8
 588:	0000007c 	andeq	r0, r0, ip, ror r0
 58c:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 590:	86058506 	strhi	r8, [r5], -r6, lsl #10
 594:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 598:	00018e02 	andeq	r8, r1, r2, lsl #28
 59c:	0000001c 	andeq	r0, r0, ip, lsl r0
 5a0:	00000504 	andeq	r0, r0, r4, lsl #10
 5a4:	000094bc 			; <UNDEFINED> instruction: 0x000094bc
 5a8:	000000c0 	andeq	r0, r0, r0, asr #1
 5ac:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 5b0:	86058506 	strhi	r8, [r5], -r6, lsl #10
 5b4:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 5b8:	00018e02 	andeq	r8, r1, r2, lsl #28
 5bc:	00000014 	andeq	r0, r0, r4, lsl r0
 5c0:	00000504 	andeq	r0, r0, r4, lsl #10
 5c4:	0000957c 	andeq	r9, r0, ip, ror r5
 5c8:	0000003c 	andeq	r0, r0, ip, lsr r0
 5cc:	83080e42 	movwhi	r0, #36418	; 0x8e42
 5d0:	00018e02 	andeq	r8, r1, r2, lsl #28
 5d4:	00000018 	andeq	r0, r0, r8, lsl r0
 5d8:	00000504 	andeq	r0, r0, r4, lsl #10
 5dc:	000095b8 			; <UNDEFINED> instruction: 0x000095b8
 5e0:	0000002c 	andeq	r0, r0, ip, lsr #32
 5e4:	83100e42 	tsthi	r0, #1056	; 0x420
 5e8:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 5ec:	00018e02 	andeq	r8, r1, r2, lsl #28
 5f0:	00000024 	andeq	r0, r0, r4, lsr #32
 5f4:	00000504 	andeq	r0, r0, r4, lsl #10
 5f8:	000095e4 	andeq	r9, r0, r4, ror #11
 5fc:	00000084 	andeq	r0, r0, r4, lsl #1
 600:	810c0e42 	tsthi	ip, r2, asr #28
 604:	83028203 	movwhi	r8, #8707	; 0x2203
 608:	180e4201 	stmdane	lr, {r0, r9, lr}
 60c:	05850684 	streq	r0, [r5, #1668]	; 0x684
 610:	0e42048e 	cdpeq	4, 4, cr0, cr2, cr14, {4}
 614:	000003e8 	andeq	r0, r0, r8, ror #7
 618:	00000014 	andeq	r0, r0, r4, lsl r0
 61c:	00000504 	andeq	r0, r0, r4, lsl #10
 620:	00009668 	andeq	r9, r0, r8, ror #12
 624:	0000004c 	andeq	r0, r0, ip, asr #32
 628:	8e040e42 	cdphi	14, 0, cr0, cr4, cr2, {2}
 62c:	100e4201 	andne	r4, lr, r1, lsl #4
 630:	0000000c 	andeq	r0, r0, ip
 634:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 638:	7c020001 	stcvc	0, cr0, [r2], {1}
 63c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 640:	00000018 	andeq	r0, r0, r8, lsl r0
 644:	00000630 	andeq	r0, r0, r0, lsr r6
 648:	000096b4 			; <UNDEFINED> instruction: 0x000096b4
 64c:	0000009c 	muleq	r0, ip, r0
 650:	83100e42 	tsthi	r0, #1056	; 0x420
 654:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 658:	00018e02 	andeq	r8, r1, r2, lsl #28
 65c:	00000014 	andeq	r0, r0, r4, lsl r0
 660:	00000630 	andeq	r0, r0, r0, lsr r6
 664:	00009750 	andeq	r9, r0, r0, asr r7
 668:	0000001c 	andeq	r0, r0, ip, lsl r0
 66c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 670:	00018e02 	andeq	r8, r1, r2, lsl #28
 674:	00000014 	andeq	r0, r0, r4, lsl r0
 678:	00000630 	andeq	r0, r0, r0, lsr r6
 67c:	0000976c 	andeq	r9, r0, ip, ror #14
 680:	00000028 	andeq	r0, r0, r8, lsr #32
 684:	83080e42 	movwhi	r0, #36418	; 0x8e42
 688:	00018e02 	andeq	r8, r1, r2, lsl #28
 68c:	00000014 	andeq	r0, r0, r4, lsl r0
 690:	00000630 	andeq	r0, r0, r0, lsr r6
 694:	00009794 	muleq	r0, r4, r7
 698:	0000001c 	andeq	r0, r0, ip, lsl r0
 69c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 6a0:	00018e02 	andeq	r8, r1, r2, lsl #28
 6a4:	00000014 	andeq	r0, r0, r4, lsl r0
 6a8:	00000630 	andeq	r0, r0, r0, lsr r6
 6ac:	000097b0 			; <UNDEFINED> instruction: 0x000097b0
 6b0:	0000002c 	andeq	r0, r0, ip, lsr #32
 6b4:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 6b8:	00018e02 	andeq	r8, r1, r2, lsl #28
 6bc:	00000014 	andeq	r0, r0, r4, lsl r0
 6c0:	00000630 	andeq	r0, r0, r0, lsr r6
 6c4:	000097dc 	ldrdeq	r9, [r0], -ip
 6c8:	0000000c 	andeq	r0, r0, ip
 6cc:	83080e42 	movwhi	r0, #36418	; 0x8e42
 6d0:	00018e02 	andeq	r8, r1, r2, lsl #28
 6d4:	00000014 	andeq	r0, r0, r4, lsl r0
 6d8:	00000630 	andeq	r0, r0, r0, lsr r6
 6dc:	000097e8 	andeq	r9, r0, r8, ror #15
 6e0:	00000020 	andeq	r0, r0, r0, lsr #32
 6e4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 6e8:	00018e02 	andeq	r8, r1, r2, lsl #28
 6ec:	0000000c 	andeq	r0, r0, ip
 6f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 6f4:	7c020001 	stcvc	0, cr0, [r2], {1}
 6f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 6fc:	00000018 	andeq	r0, r0, r8, lsl r0
 700:	000006ec 	andeq	r0, r0, ip, ror #13
 704:	000098d8 	ldrdeq	r9, [r0], -r8
 708:	000000d4 	ldrdeq	r0, [r0], -r4
 70c:	83100e42 	tsthi	r0, #1056	; 0x420
 710:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 714:	00018e02 	andeq	r8, r1, r2, lsl #28
 718:	00000014 	andeq	r0, r0, r4, lsl r0
 71c:	000006ec 	andeq	r0, r0, ip, ror #13
 720:	000099ac 	andeq	r9, r0, ip, lsr #19
 724:	00000038 	andeq	r0, r0, r8, lsr r0
 728:	83080e42 	movwhi	r0, #36418	; 0x8e42
 72c:	00018e02 	andeq	r8, r1, r2, lsl #28
 730:	00000014 	andeq	r0, r0, r4, lsl r0
 734:	000006ec 	andeq	r0, r0, ip, ror #13
 738:	000099e4 	andeq	r9, r0, r4, ror #19
 73c:	00000038 	andeq	r0, r0, r8, lsr r0
 740:	83080e42 	movwhi	r0, #36418	; 0x8e42
 744:	00018e02 	andeq	r8, r1, r2, lsl #28
 748:	00000018 	andeq	r0, r0, r8, lsl r0
 74c:	000006ec 	andeq	r0, r0, ip, ror #13
 750:	00009a1c 	andeq	r9, r0, ip, lsl sl
 754:	000000cc 	andeq	r0, r0, ip, asr #1
 758:	83100e42 	tsthi	r0, #1056	; 0x420
 75c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 760:	00018e02 	andeq	r8, r1, r2, lsl #28
 764:	00000014 	andeq	r0, r0, r4, lsl r0
 768:	000006ec 	andeq	r0, r0, ip, ror #13
 76c:	00009ae8 	andeq	r9, r0, r8, ror #21
 770:	0000004c 	andeq	r0, r0, ip, asr #32
 774:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 778:	00018e02 	andeq	r8, r1, r2, lsl #28
 77c:	00000014 	andeq	r0, r0, r4, lsl r0
 780:	000006ec 	andeq	r0, r0, ip, ror #13
 784:	00009b34 	andeq	r9, r0, r4, lsr fp
 788:	00000024 	andeq	r0, r0, r4, lsr #32
 78c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 790:	00018e02 	andeq	r8, r1, r2, lsl #28
 794:	00000018 	andeq	r0, r0, r8, lsl r0
 798:	000006ec 	andeq	r0, r0, ip, ror #13
 79c:	00009b58 	andeq	r9, r0, r8, asr fp
 7a0:	000000d8 	ldrdeq	r0, [r0], -r8
 7a4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 7a8:	86038504 	strhi	r8, [r3], -r4, lsl #10
 7ac:	00018e02 	andeq	r8, r1, r2, lsl #28
 7b0:	00000014 	andeq	r0, r0, r4, lsl r0
 7b4:	000006ec 	andeq	r0, r0, ip, ror #13
 7b8:	00009c30 	andeq	r9, r0, r0, lsr ip
 7bc:	0000002c 	andeq	r0, r0, ip, lsr #32
 7c0:	83080e42 	movwhi	r0, #36418	; 0x8e42
 7c4:	00018e02 	andeq	r8, r1, r2, lsl #28
 7c8:	00000018 	andeq	r0, r0, r8, lsl r0
 7cc:	000006ec 	andeq	r0, r0, ip, ror #13
 7d0:	00009c5c 	andeq	r9, r0, ip, asr ip
 7d4:	00000084 	andeq	r0, r0, r4, lsl #1
 7d8:	83100e42 	tsthi	r0, #1056	; 0x420
 7dc:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 7e0:	00018e02 	andeq	r8, r1, r2, lsl #28
 7e4:	00000018 	andeq	r0, r0, r8, lsl r0
 7e8:	000006ec 	andeq	r0, r0, ip, ror #13
 7ec:	00009ce0 	andeq	r9, r0, r0, ror #25
 7f0:	00000084 	andeq	r0, r0, r4, lsl #1
 7f4:	83100e42 	tsthi	r0, #1056	; 0x420
 7f8:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 7fc:	00018e02 	andeq	r8, r1, r2, lsl #28
 800:	00000014 	andeq	r0, r0, r4, lsl r0
 804:	000006ec 	andeq	r0, r0, ip, ror #13
 808:	00009d64 	andeq	r9, r0, r4, ror #26
 80c:	00000084 	andeq	r0, r0, r4, lsl #1
 810:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 814:	00018e02 	andeq	r8, r1, r2, lsl #28
 818:	00000014 	andeq	r0, r0, r4, lsl r0
 81c:	000006ec 	andeq	r0, r0, ip, ror #13
 820:	00009de8 	andeq	r9, r0, r8, ror #27
 824:	00000058 	andeq	r0, r0, r8, asr r0
 828:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 82c:	00018e02 	andeq	r8, r1, r2, lsl #28
 830:	0000000c 	andeq	r0, r0, ip
 834:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 838:	7c020001 	stcvc	0, cr0, [r2], {1}
 83c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 840:	0000000c 	andeq	r0, r0, ip
 844:	00000830 	andeq	r0, r0, r0, lsr r8
 848:	00009e40 	andeq	r9, r0, r0, asr #28
 84c:	00000020 	andeq	r0, r0, r0, lsr #32
 850:	0000000c 	andeq	r0, r0, ip
 854:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 858:	7c020001 	stcvc	0, cr0, [r2], {1}
 85c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 860:	00000014 	andeq	r0, r0, r4, lsl r0
 864:	00000850 	andeq	r0, r0, r0, asr r8
 868:	00009e60 	andeq	r9, r0, r0, ror #28
 86c:	00000028 	andeq	r0, r0, r8, lsr #32
 870:	83080e42 	movwhi	r0, #36418	; 0x8e42
 874:	00018e02 	andeq	r8, r1, r2, lsl #28
 878:	0000000c 	andeq	r0, r0, ip
 87c:	00000850 	andeq	r0, r0, r0, asr r8
 880:	00009e88 	andeq	r9, r0, r8, lsl #29
 884:	00000028 	andeq	r0, r0, r8, lsr #32
