
3-test-cswitch.bin.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e3a0d302 	mov	sp, #134217728	; 0x8000000
    8004:	e3a0b000 	mov	fp, #0
    8008:	eb00021c 	bl	8880 <_cstart>
    800c:	eb00024a 	bl	893c <rpi_reboot>

00008010 <notmain>:
#include "rpi.h"
//#include "rpi-thread.h"

void cswitch(uint32_t *old, uint32_t *new);

void notmain() {
    8010:	e92d4070 	push	{r4, r5, r6, lr}
    uart_init();
    8014:	eb00047e 	bl	9214 <uart_init>
    kmalloc_init();
    8018:	eb0002bf 	bl	8b1c <kmalloc_init>

    // sizeof save area
    unsigned nbytes = sizeof ((rpi_thread_t*)0)->reg_save_area;
    uint32_t *save = kmalloc_aligned(nbytes, 8);
    801c:	e3a00040 	mov	r0, #64	; 0x40
    8020:	e3a01008 	mov	r1, #8
    8024:	eb000295 	bl	8a80 <kmalloc_aligned>
    8028:	e1a05000 	mov	r5, r0

    /*
     * part 1: check that we can save/restore the same state.
     */
    int i;
    printk("\n\n-----------------------------------------\n");
    802c:	e59f0120 	ldr	r0, [pc, #288]	; 8154 <notmain+0x144>
    8030:	eb000090 	bl	8278 <printk>
    printk("Part1: about to cswitch(old,old)\n");
    8034:	e59f011c 	ldr	r0, [pc, #284]	; 8158 <notmain+0x148>
    8038:	eb00008e 	bl	8278 <printk>
    cswitch(save,save);
    803c:	e1a00005 	mov	r0, r5
    8040:	e1a01005 	mov	r1, r5
    8044:	eb000069 	bl	81f0 <cswitch>
    printk("worked: gonna do alot of cswitches\n");
    8048:	e59f010c 	ldr	r0, [pc, #268]	; 815c <notmain+0x14c>
    804c:	eb000089 	bl	8278 <printk>
    for(i = 0; i < 100; i++)
    8050:	e3a04000 	mov	r4, #0
    8054:	ea000003 	b	8068 <notmain+0x58>
        cswitch(save,save);
    8058:	e1a00005 	mov	r0, r5
    805c:	e1a01005 	mov	r1, r5
    8060:	eb000062 	bl	81f0 <cswitch>
    int i;
    printk("\n\n-----------------------------------------\n");
    printk("Part1: about to cswitch(old,old)\n");
    cswitch(save,save);
    printk("worked: gonna do alot of cswitches\n");
    for(i = 0; i < 100; i++)
    8064:	e2844001 	add	r4, r4, #1
    8068:	e3540063 	cmp	r4, #99	; 0x63
    806c:	dafffff9 	ble	8058 <notmain+0x48>
        cswitch(save,save);
    printk("Part1: SUCCESS\n");
    8070:	e59f00e8 	ldr	r0, [pc, #232]	; 8160 <notmain+0x150>
    8074:	eb00007f 	bl	8278 <printk>
     * Part 2: kinda brain-twisting, we use <cswitch> to checkpoint
     * a set of register values.  We roll back to that execution point
     * by restoring to this checkpoint at a later date.  This should
     * "just work" if your code works.
     */
    printk("\n\n-----------------------------------------\n");
    8078:	e59f00d4 	ldr	r0, [pc, #212]	; 8154 <notmain+0x144>
    807c:	eb00007d 	bl	8278 <printk>
    printk("Part 2: gonna do time travel\n");
    8080:	e59f00dc 	ldr	r0, [pc, #220]	; 8164 <notmain+0x154>
    8084:	eb00007b 	bl	8278 <printk>
    // keep it out of a register
    volatile int *count = kmalloc(sizeof *count); 
    8088:	e3a00004 	mov	r0, #4
    808c:	eb00025e 	bl	8a0c <kmalloc>
    8090:	e1a04000 	mov	r4, r0
    *count = 0;
    8094:	e3a03000 	mov	r3, #0
    8098:	e5803000 	str	r3, [r0]

    uint32_t *ckpt = kmalloc_aligned(nbytes, 8);
    809c:	e3a00040 	mov	r0, #64	; 0x40
    80a0:	e3a01008 	mov	r1, #8
    80a4:	eb000275 	bl	8a80 <kmalloc_aligned>
    80a8:	e1a06000 	mov	r6, r0
    
    printk("before cswitch(ckpt)\n");
    80ac:	e59f00b4 	ldr	r0, [pc, #180]	; 8168 <notmain+0x158>
    80b0:	eb000070 	bl	8278 <printk>
    cswitch(ckpt,ckpt);
    80b4:	e1a00006 	mov	r0, r6
    80b8:	e1a01006 	mov	r1, r6
    80bc:	eb00004b 	bl	81f0 <cswitch>
    printk("after cswitch(ckpt)\n");
    80c0:	e59f00a4 	ldr	r0, [pc, #164]	; 816c <notmain+0x15c>
    80c4:	eb00006b 	bl	8278 <printk>

    *count += 1;
    80c8:	e5943000 	ldr	r3, [r4]
    80cc:	e2833001 	add	r3, r3, #1
    80d0:	e5843000 	str	r3, [r4]
    if(*count >= 4) {
    80d4:	e5943000 	ldr	r3, [r4]
    80d8:	e3530003 	cmp	r3, #3
    80dc:	da00000f 	ble	8120 <notmain+0x110>
        printk("done!  count=%d\n", *count);
    80e0:	e5941000 	ldr	r1, [r4]
    80e4:	e59f0084 	ldr	r0, [pc, #132]	; 8170 <notmain+0x160>
    80e8:	eb000062 	bl	8278 <printk>
        assert(*count == 4);
    80ec:	e5943000 	ldr	r3, [r4]
    80f0:	e3530004 	cmp	r3, #4
    80f4:	0a000006 	beq	8114 <notmain+0x104>
    80f8:	eb000079 	bl	82e4 <rpi_reset_putc>
    80fc:	e59f0070 	ldr	r0, [pc, #112]	; 8174 <notmain+0x164>
    8100:	e59f1070 	ldr	r1, [pc, #112]	; 8178 <notmain+0x168>
    8104:	e59f2070 	ldr	r2, [pc, #112]	; 817c <notmain+0x16c>
    8108:	e3a03033 	mov	r3, #51	; 0x33
    810c:	eb000059 	bl	8278 <printk>
    8110:	eb0001c8 	bl	8838 <clean_reboot>
        printk("Part2: SUCCESS!\n");
    8114:	e59f0064 	ldr	r0, [pc, #100]	; 8180 <notmain+0x170>
    8118:	eb000056 	bl	8278 <printk>
        clean_reboot();
    811c:	eb0001c5 	bl	8838 <clean_reboot>
    }
    printk("going to time travel: cnt = %d\n", *count);
    8120:	e5941000 	ldr	r1, [r4]
    8124:	e59f0058 	ldr	r0, [pc, #88]	; 8184 <notmain+0x174>
    8128:	eb000052 	bl	8278 <printk>
    cswitch(save, ckpt);
    812c:	e1a00005 	mov	r0, r5
    8130:	e1a01006 	mov	r1, r6
    8134:	eb00002d 	bl	81f0 <cswitch>

    panic("IMPOSSIBLE: should not reach this\n");
    8138:	eb000069 	bl	82e4 <rpi_reset_putc>
    813c:	e59f0044 	ldr	r0, [pc, #68]	; 8188 <notmain+0x178>
    8140:	e59f1030 	ldr	r1, [pc, #48]	; 8178 <notmain+0x168>
    8144:	e59f2030 	ldr	r2, [pc, #48]	; 817c <notmain+0x16c>
    8148:	e3a0303a 	mov	r3, #58	; 0x3a
    814c:	eb000049 	bl	8278 <printk>
    8150:	eb0001b8 	bl	8838 <clean_reboot>
    8154:	00009a58 	andeq	r9, r0, r8, asr sl
    8158:	00009a88 	andeq	r9, r0, r8, lsl #21
    815c:	00009aac 	andeq	r9, r0, ip, lsr #21
    8160:	00009ad0 	ldrdeq	r9, [r0], -r0
    8164:	00009ae0 	andeq	r9, r0, r0, ror #21
    8168:	00009b00 	andeq	r9, r0, r0, lsl #22
    816c:	00009b18 	andeq	r9, r0, r8, lsl fp
    8170:	00009b30 	andeq	r9, r0, r0, lsr fp
    8174:	00009b44 	andeq	r9, r0, r4, asr #22
    8178:	00009b60 	andeq	r9, r0, r0, ror #22
    817c:	00009a40 	andeq	r9, r0, r0, asr #20
    8180:	00009b74 	andeq	r9, r0, r4, ror fp
    8184:	00009b88 	andeq	r9, r0, r8, lsl #23
    8188:	00009ba8 	andeq	r9, r0, r8, lsr #23

0000818c <print_and_die>:
	clean_reboot();
}


void print_and_die(void) { panic("should not call\n"); }
    818c:	e92d4008 	push	{r3, lr}
    8190:	eb000053 	bl	82e4 <rpi_reset_putc>
    8194:	e59f0010 	ldr	r0, [pc, #16]	; 81ac <print_and_die+0x20>
    8198:	e59f1010 	ldr	r1, [pc, #16]	; 81b0 <print_and_die+0x24>
    819c:	e59f2010 	ldr	r2, [pc, #16]	; 81b4 <print_and_die+0x28>
    81a0:	e3a0303f 	mov	r3, #63	; 0x3f
    81a4:	eb000033 	bl	8278 <printk>
    81a8:	eb0001a2 	bl	8838 <clean_reboot>
    81ac:	00009bdc 	ldrdeq	r9, [r0], -ip
    81b0:	00009b60 	andeq	r9, r0, r0, ror #22
    81b4:	00009a48 	andeq	r9, r0, r8, asr #20

000081b8 <callee_save>:
    81b8:	e12fff1e 	bx	lr

000081bc <store_one_asm>:
    81bc:	e5801000 	str	r1, [r0]
    81c0:	e12fff1e 	bx	lr

000081c4 <check_callee_save>:
    81c4:	e3a04004 	mov	r4, #4
    81c8:	e3a05005 	mov	r5, #5
    81cc:	e3a06006 	mov	r6, #6
    81d0:	e3a07007 	mov	r7, #7
    81d4:	e3a08008 	mov	r8, #8
    81d8:	e3a09009 	mov	r9, #9
    81dc:	e3a0a00a 	mov	sl, #10
    81e0:	e3a0b00b 	mov	fp, #11
    81e4:	e3a0c00c 	mov	ip, #12
    81e8:	e9202000 	stmdb	r0!, {sp}
    81ec:	e9204ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

000081f0 <cswitch>:
    81f0:	e5804000 	str	r4, [r0]
    81f4:	e5805004 	str	r5, [r0, #4]
    81f8:	e5806008 	str	r6, [r0, #8]
    81fc:	e580700c 	str	r7, [r0, #12]
    8200:	e5808010 	str	r8, [r0, #16]
    8204:	e5809014 	str	r9, [r0, #20]
    8208:	e580a018 	str	sl, [r0, #24]
    820c:	e580b01c 	str	fp, [r0, #28]
    8210:	e580c020 	str	ip, [r0, #32]
    8214:	e580e024 	str	lr, [r0, #36]	; 0x24
    8218:	e580d028 	str	sp, [r0, #40]	; 0x28
    821c:	e3a04004 	mov	r4, #4
    8220:	e3a05005 	mov	r5, #5
    8224:	e3a06006 	mov	r6, #6
    8228:	e3a07007 	mov	r7, #7
    822c:	e3a08008 	mov	r8, #8
    8230:	e3a09009 	mov	r9, #9
    8234:	e3a0a00a 	mov	sl, #10
    8238:	e3a0b00b 	mov	fp, #11
    823c:	e3a0c00c 	mov	ip, #12
    8240:	e3a0d00d 	mov	sp, #13
    8244:	e3a0e00e 	mov	lr, #14
    8248:	e5914000 	ldr	r4, [r1]
    824c:	e5915004 	ldr	r5, [r1, #4]
    8250:	e5916008 	ldr	r6, [r1, #8]
    8254:	e591700c 	ldr	r7, [r1, #12]
    8258:	e5918010 	ldr	r8, [r1, #16]
    825c:	e5919014 	ldr	r9, [r1, #20]
    8260:	e591a018 	ldr	sl, [r1, #24]
    8264:	e591b01c 	ldr	fp, [r1, #28]
    8268:	e591c020 	ldr	ip, [r1, #32]
    826c:	e591e024 	ldr	lr, [r1, #36]	; 0x24
    8270:	e591d028 	ldr	sp, [r1, #40]	; 0x28
    8274:	e12fff1e 	bx	lr

00008278 <printk>:
#include <stdarg.h>

#include "rpi.h"
#include "va-printk.h"

int printk(const char *fmt, ...) {
    8278:	e92d000f 	push	{r0, r1, r2, r3}
    827c:	e92d4030 	push	{r4, r5, lr}
    8280:	e24dd00c 	sub	sp, sp, #12
    // this is a really huge buffer for a pi.   could do this better.
    static char buf[1024];
    va_list args;

    va_start(args, fmt);
    8284:	e28d301c 	add	r3, sp, #28
    8288:	e58d3004 	str	r3, [sp, #4]
        int sz = va_printk(buf, sizeof buf, fmt, args);
    828c:	e59f4034 	ldr	r4, [pc, #52]	; 82c8 <printk+0x50>
    8290:	e1a00004 	mov	r0, r4
    8294:	e3a01b01 	mov	r1, #1024	; 0x400
    8298:	e59d2018 	ldr	r2, [sp, #24]
    829c:	eb0000c3 	bl	85b0 <va_printk>
    82a0:	e1a05000 	mov	r5, r0
    va_end(args);


#if 1
    putk(buf);
    82a4:	e59f3020 	ldr	r3, [pc, #32]	; 82cc <printk+0x54>
    82a8:	e5933000 	ldr	r3, [r3]
    82ac:	e1a00004 	mov	r0, r4
    82b0:	e12fff33 	blx	r3
    int i;
    for(i = 0; buf[i]; i++)
        rpi_putchar(buf[i]);
#endif
    return sz;
}
    82b4:	e1a00005 	mov	r0, r5
    82b8:	e28dd00c 	add	sp, sp, #12
    82bc:	e8bd4030 	pop	{r4, r5, lr}
    82c0:	e28dd010 	add	sp, sp, #16
    82c4:	e12fff1e 	bx	lr
    82c8:	00009fb4 			; <UNDEFINED> instruction: 0x00009fb4
    82cc:	000099a8 	andeq	r9, r0, r8, lsr #19

000082d0 <internal_putchar>:
#include "rpi.h"

static int internal_putchar(int c) { uart_putc(c); return c; }
    82d0:	e92d4010 	push	{r4, lr}
    82d4:	e1a04000 	mov	r4, r0
    82d8:	eb00040c 	bl	9310 <uart_putc>
    82dc:	e1a00004 	mov	r0, r4
    82e0:	e8bd8010 	pop	{r4, pc}

000082e4 <rpi_reset_putc>:

// override this is going through the network.
int (*rpi_putchar)(int c) = internal_putchar;

void rpi_reset_putc(void) {
    rpi_putchar = internal_putchar;
    82e4:	e59f2008 	ldr	r2, [pc, #8]	; 82f4 <rpi_reset_putc+0x10>
    82e8:	e59f3008 	ldr	r3, [pc, #8]	; 82f8 <rpi_reset_putc+0x14>
    82ec:	e5832000 	str	r2, [r3]
    82f0:	e12fff1e 	bx	lr
    82f4:	000082d0 	ldrdeq	r8, [r0], -r0
    82f8:	000099a4 	andeq	r9, r0, r4, lsr #19

000082fc <rpi_set_putc>:
}
void rpi_set_putc(int (*fp)(int)) {
    rpi_putchar = fp;
    82fc:	e59f3004 	ldr	r3, [pc, #4]	; 8308 <rpi_set_putc+0xc>
    8300:	e5830000 	str	r0, [r3]
    8304:	e12fff1e 	bx	lr
    8308:	000099a4 	andeq	r9, r0, r4, lsr #19

0000830c <internal_putk>:
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    830c:	e92d4038 	push	{r3, r4, r5, lr}
    8310:	e1a04000 	mov	r4, r0
    for(; *p; p++)
        rpi_putchar(*p);
    8314:	e59f5020 	ldr	r5, [pc, #32]	; 833c <internal_putk+0x30>
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    8318:	ea000002 	b	8328 <internal_putk+0x1c>
        rpi_putchar(*p);
    831c:	e5953000 	ldr	r3, [r5]
    8320:	e12fff33 	blx	r3
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    8324:	e2844001 	add	r4, r4, #1
    8328:	e5d40000 	ldrb	r0, [r4]
    832c:	e3500000 	cmp	r0, #0
    8330:	1afffff9 	bne	831c <internal_putk+0x10>
        rpi_putchar(*p);
//  we were adding this.
//  rpi_putchar('\n');
    return 1;
}
    8334:	e3a00001 	mov	r0, #1
    8338:	e8bd8038 	pop	{r3, r4, r5, pc}
    833c:	000099a4 	andeq	r9, r0, r4, lsr #19

00008340 <isdigit>:
    if(puts_fp)
        putk = puts_fp;
}

// XXX: check sign promotion.
static int isdigit(int c) { return c >= '0' && c <= '9'; }
    8340:	e2400030 	sub	r0, r0, #48	; 0x30
    8344:	e3500009 	cmp	r0, #9
    8348:	83a00000 	movhi	r0, #0
    834c:	93a00001 	movls	r0, #1
    8350:	e12fff1e 	bx	lr

00008354 <pad>:

// don't move: can't be inlined, gcc seems to have a bug.
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
    8354:	e0611000 	rsb	r1, r1, r0
	// pad with leading spaces
	for(; len < width; len++)
		*p++ = ' ';
    8358:	e3a03020 	mov	r3, #32
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    835c:	ea000002 	b	836c <pad+0x18>
		*p++ = ' ';
    8360:	e5c03000 	strb	r3, [r0]
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8364:	e2811001 	add	r1, r1, #1
		*p++ = ' ';
    8368:	e2800001 	add	r0, r0, #1
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    836c:	e1510002 	cmp	r1, r2
    8370:	bafffffa 	blt	8360 <pad+0xc>
		*p++ = ' ';
	*p = 0;
    8374:	e3a03000 	mov	r3, #0
    8378:	e5c03000 	strb	r3, [r0]
	return p;
}
    837c:	e12fff1e 	bx	lr

00008380 <reverse>:

static char* reverse(char *dst, int n, char *p, char *start) {
	// drop the lower chars if the string is too big.
	int len = p - start + 1; // include \0
    8380:	e063c002 	rsb	ip, r3, r2
    8384:	e28cc001 	add	ip, ip, #1
	if(len > n)
    8388:	e15c0001 	cmp	ip, r1
		start += (len - n);
    838c:	c061100c 	rsbgt	r1, r1, ip
    8390:	c0833001 	addgt	r3, r3, r1

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    8394:	e2422001 	sub	r2, r2, #1
    8398:	e1a01000 	mov	r1, r0
    839c:	ea000002 	b	83ac <reverse+0x2c>
		*dst++ = *p;
    83a0:	e452c001 	ldrb	ip, [r2], #-1
    83a4:	e5c1c000 	strb	ip, [r1]
    83a8:	e2811001 	add	r1, r1, #1
		start += (len - n);

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    83ac:	e1520003 	cmp	r2, r3
    83b0:	2afffffa 	bcs	83a0 <reverse+0x20>
		*dst++ = *p;
	*dst++ = 0;
    83b4:	e3a03000 	mov	r3, #0
    83b8:	e5c13000 	strb	r3, [r1]

	return s;
}
    83bc:	e12fff1e 	bx	lr

000083c0 <emit>:

static char* emit(unsigned base, char *dst, int n, int val, int width, int signed_p) {
    83c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    83c4:	e24dd040 	sub	sp, sp, #64	; 0x40
    83c8:	e1a05001 	mov	r5, r1
    83cc:	e1a04002 	mov	r4, r2
    83d0:	e59d2058 	ldr	r2, [sp, #88]	; 0x58
	// XXX: constrain width to be >= bit size: can change this.
	if(width > n)
    83d4:	e1520004 	cmp	r2, r4
		width = n - 1;
    83d8:	c2442001 	subgt	r2, r4, #1

	char buf[64], *p = buf; 
	unsigned u = val;
    83dc:	e1a0c003 	mov	ip, r3

	switch(base) { 
    83e0:	e2400002 	sub	r0, r0, #2
    83e4:	e350000e 	cmp	r0, #14
    83e8:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
    83ec:	ea000042 	b	84fc <emit+0x13c>
    83f0:	000084d4 	ldrdeq	r8, [r0], -r4
    83f4:	000084fc 	strdeq	r8, [r0], -ip
    83f8:	000084fc 	strdeq	r8, [r0], -ip
    83fc:	000084fc 	strdeq	r8, [r0], -ip
    8400:	000084fc 	strdeq	r8, [r0], -ip
    8404:	000084fc 	strdeq	r8, [r0], -ip
    8408:	000084c8 	andeq	r8, r0, r8, asr #9
    840c:	000084fc 	strdeq	r8, [r0], -ip
    8410:	0000842c 	andeq	r8, r0, ip, lsr #8
    8414:	000084fc 	strdeq	r8, [r0], -ip
    8418:	000084fc 	strdeq	r8, [r0], -ip
    841c:	000084fc 	strdeq	r8, [r0], -ip
    8420:	000084fc 	strdeq	r8, [r0], -ip
    8424:	000084fc 	strdeq	r8, [r0], -ip
    8428:	000084a0 	andeq	r8, r0, r0, lsr #9
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
    842c:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
    8430:	e2911000 	adds	r1, r1, #0
    8434:	13a01001 	movne	r1, #1
    8438:	e0111fa3 	ands	r1, r1, r3, lsr #31
				neg_p = 1;
				val = -val;
    843c:	1263c000 	rsbne	ip, r3, #0
	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
				neg_p = 1;
    8440:	13a08001 	movne	r8, #1
	unsigned u = val;

	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
    8444:	03a08000 	moveq	r8, #0
			if(val < 0 && signed_p) {
				neg_p = 1;
    8448:	e1a0100d 	mov	r1, sp
				val = -val;
				u = val;
			}
			do { 
				*p++ = "0123456789"[u % 10];
    844c:	e59f70ec 	ldr	r7, [pc, #236]	; 8540 <emit+0x180>
    8450:	e59f60ec 	ldr	r6, [pc, #236]	; 8544 <emit+0x184>
    8454:	ea000000 	b	845c <emit+0x9c>
    8458:	e1a01003 	mov	r1, r3
    845c:	e2813001 	add	r3, r1, #1
    8460:	e08e0c97 	umull	r0, lr, r7, ip
    8464:	e1a0e1ae 	lsr	lr, lr, #3
    8468:	e1a0000e 	mov	r0, lr
    846c:	e08ee10e 	add	lr, lr, lr, lsl #2
    8470:	e1a0e08e 	lsl	lr, lr, #1
    8474:	e06ee00c 	rsb	lr, lr, ip
    8478:	e7d6c00e 	ldrb	ip, [r6, lr]
    847c:	e5c1c000 	strb	ip, [r1]
			} while(u /= 10); 
    8480:	e1a0c000 	mov	ip, r0
    8484:	e3500000 	cmp	r0, #0
    8488:	1afffff2 	bne	8458 <emit+0x98>
			if(neg_p)
    848c:	e3580000 	cmp	r8, #0
				*p++ = '-';
    8490:	12813002 	addne	r3, r1, #2
    8494:	13a0002d 	movne	r0, #45	; 0x2d
    8498:	15c10001 	strbne	r0, [r1, #1]
    849c:	ea00001d 	b	8518 <emit+0x158>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    84a0:	e1a0e00d 	mov	lr, sp
			break;
		}
		case 16:
			u = val;
                        do {
                                *p++ = "0123456789abcdef"[u % 16];
    84a4:	e59f009c 	ldr	r0, [pc, #156]	; 8548 <emit+0x188>
    84a8:	e28e3001 	add	r3, lr, #1
    84ac:	e20c100f 	and	r1, ip, #15
    84b0:	e7d01001 	ldrb	r1, [r0, r1]
    84b4:	e5ce1000 	strb	r1, [lr]
    84b8:	e1a0e003 	mov	lr, r3
                        } while(u /= 16);
    84bc:	e1b0c22c 	lsrs	ip, ip, #4
    84c0:	1afffff8 	bne	84a8 <emit+0xe8>
    84c4:	ea000013 	b	8518 <emit+0x158>
                        break;
		// just a single char
		case 8:
			*p++ = val;
    84c8:	e5cd3000 	strb	r3, [sp]
    84cc:	e28d3001 	add	r3, sp, #1
			break;
    84d0:	ea000010 	b	8518 <emit+0x158>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    84d4:	e1a0e00d 	mov	lr, sp
#if 0
			for(int i = 0; i < 32; i++)
				*p++ = "01"[(u & (1<<i)) != 0];
#else
                        do {
                        	*p++ = "01"[u % 2];
    84d8:	e59f006c 	ldr	r0, [pc, #108]	; 854c <emit+0x18c>
    84dc:	e28e3001 	add	r3, lr, #1
    84e0:	e20c1001 	and	r1, ip, #1
    84e4:	e7d01001 	ldrb	r1, [r0, r1]
    84e8:	e5ce1000 	strb	r1, [lr]
    84ec:	e1a0e003 	mov	lr, r3
			} while(u /= 2);
    84f0:	e1b0c0ac 	lsrs	ip, ip, #1
    84f4:	1afffff8 	bne	84dc <emit+0x11c>
    84f8:	ea000006 	b	8518 <emit+0x158>
#endif
			break;
		default:
			assert(0);
    84fc:	ebffff78 	bl	82e4 <rpi_reset_putc>
    8500:	e59f0048 	ldr	r0, [pc, #72]	; 8550 <emit+0x190>
    8504:	e59f1048 	ldr	r1, [pc, #72]	; 8554 <emit+0x194>
    8508:	e59f2048 	ldr	r2, [pc, #72]	; 8558 <emit+0x198>
    850c:	e3a03075 	mov	r3, #117	; 0x75
    8510:	ebffff58 	bl	8278 <printk>
    8514:	eb0000c7 	bl	8838 <clean_reboot>
	}
	// number string is reversed, so re-reverse it.
	return reverse(dst, n, pad(p, buf, width), buf);
    8518:	e1a00003 	mov	r0, r3
    851c:	e1a0100d 	mov	r1, sp
    8520:	ebffff8b 	bl	8354 <pad>
    8524:	e1a02000 	mov	r2, r0
    8528:	e1a00005 	mov	r0, r5
    852c:	e1a01004 	mov	r1, r4
    8530:	e1a0300d 	mov	r3, sp
    8534:	ebffff91 	bl	8380 <reverse>
}
    8538:	e28dd040 	add	sp, sp, #64	; 0x40
    853c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8540:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    8544:	00009c4c 	andeq	r9, r0, ip, asr #24
    8548:	00009c58 	andeq	r9, r0, r8, asr ip
    854c:	00009c6c 	andeq	r9, r0, ip, ror #24
    8550:	00009c24 	andeq	r9, r0, r4, lsr #24
    8554:	00009c38 	andeq	r9, r0, r8, lsr ip
    8558:	00009c00 	andeq	r9, r0, r0, lsl #24

0000855c <rpi_set_output>:
// override this is going through the network.
int (*rpi_putchar)(int c) = internal_putchar;
#endif


void rpi_set_output(int (*putc_fp)(int), int (*puts_fp)(const char *)) {
    855c:	e92d4008 	push	{r3, lr}
    assert(putc_fp);
    8560:	e3500000 	cmp	r0, #0
    8564:	1a000006 	bne	8584 <rpi_set_output+0x28>
    8568:	ebffff5d 	bl	82e4 <rpi_reset_putc>
    856c:	e59f0028 	ldr	r0, [pc, #40]	; 859c <rpi_set_output+0x40>
    8570:	e59f1028 	ldr	r1, [pc, #40]	; 85a0 <rpi_set_output+0x44>
    8574:	e59f2028 	ldr	r2, [pc, #40]	; 85a4 <rpi_set_output+0x48>
    8578:	e3a03020 	mov	r3, #32
    857c:	ebffff3d 	bl	8278 <printk>
    8580:	eb0000ac 	bl	8838 <clean_reboot>
    rpi_putchar = putc_fp;
    8584:	e59f301c 	ldr	r3, [pc, #28]	; 85a8 <rpi_set_output+0x4c>
    8588:	e5830000 	str	r0, [r3]
    if(puts_fp)
    858c:	e3510000 	cmp	r1, #0
        putk = puts_fp;
    8590:	159f3014 	ldrne	r3, [pc, #20]	; 85ac <rpi_set_output+0x50>
    8594:	15831000 	strne	r1, [r3]
    8598:	e8bd8008 	pop	{r3, pc}
    859c:	00009c70 	andeq	r9, r0, r0, ror ip
    85a0:	00009c38 	andeq	r9, r0, r8, lsr ip
    85a4:	00009c08 	andeq	r9, r0, r8, lsl #24
    85a8:	000099a4 	andeq	r9, r0, r4, lsr #19
    85ac:	000099a8 	andeq	r9, r0, r8, lsr #19

000085b0 <va_printk>:
	return reverse(dst, n, pad(p, buf, width), buf);
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
    85b0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    85b4:	e24dd08c 	sub	sp, sp, #140	; 0x8c
    85b8:	e1a0a000 	mov	sl, r0
    85bc:	e1a09003 	mov	r9, r3
	char *p = buf, *e = buf + n - 1;
    85c0:	e2411001 	sub	r1, r1, #1
    85c4:	e0808001 	add	r8, r0, r1

	buf[0] = 0;
    85c8:	e3a03000 	mov	r3, #0
    85cc:	e5c03000 	strb	r3, [r0]
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;
    85d0:	e1a04000 	mov	r4, r0
			fmt+=2;
		} else {	
			fmt++;

			char *s, num[128];
			unsigned width = 0;
    85d4:	e1a0b003 	mov	fp, r3

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    85d8:	ea000086 	b	87f8 <va_printk+0x248>
		if(*fmt != '%')
    85dc:	e3530025 	cmp	r3, #37	; 0x25
			*p++ = *fmt++;
    85e0:	12822001 	addne	r2, r2, #1
    85e4:	15c43000 	strbne	r3, [r4]
    85e8:	12844001 	addne	r4, r4, #1
    85ec:	1a000081 	bne	87f8 <va_printk+0x248>
		
		else if(fmt[1] == '%') {
    85f0:	e5d21001 	ldrb	r1, [r2, #1]
    85f4:	e3510025 	cmp	r1, #37	; 0x25
			*p++ = *fmt;
    85f8:	05c43000 	strbeq	r3, [r4]
			fmt+=2;
    85fc:	02822002 	addeq	r2, r2, #2
	for(; *fmt && p < e; ) {
		if(*fmt != '%')
			*p++ = *fmt++;
		
		else if(fmt[1] == '%') {
			*p++ = *fmt;
    8600:	02844001 	addeq	r4, r4, #1
    8604:	0a00007b 	beq	87f8 <va_printk+0x248>
			fmt+=2;
		} else {	
			fmt++;
    8608:	e2826001 	add	r6, r2, #1

			char *s, num[128];
			unsigned width = 0;
    860c:	e1a0700b 	mov	r7, fp

			while(isdigit(*fmt)) {
    8610:	ea000004 	b	8628 <va_printk+0x78>
				width = width*10 + *fmt - '0';
    8614:	e0877107 	add	r7, r7, r7, lsl #2
    8618:	e1a07087 	lsl	r7, r7, #1
    861c:	e0877005 	add	r7, r7, r5
    8620:	e2477030 	sub	r7, r7, #48	; 0x30
				fmt++;
    8624:	e2866001 	add	r6, r6, #1
			fmt++;

			char *s, num[128];
			unsigned width = 0;

			while(isdigit(*fmt)) {
    8628:	e5d65000 	ldrb	r5, [r6]
    862c:	e1a00005 	mov	r0, r5
    8630:	ebffff42 	bl	8340 <isdigit>
    8634:	e3500000 	cmp	r0, #0
    8638:	1afffff5 	bne	8614 <va_printk+0x64>
				width = width*10 + *fmt - '0';
				fmt++;
			}
			assert(width < 32);
    863c:	e357001f 	cmp	r7, #31
    8640:	9a000006 	bls	8660 <va_printk+0xb0>
    8644:	ebffff26 	bl	82e4 <rpi_reset_putc>
    8648:	e59f01d4 	ldr	r0, [pc, #468]	; 8824 <va_printk+0x274>
    864c:	e59f11d4 	ldr	r1, [pc, #468]	; 8828 <va_printk+0x278>
    8650:	e59f21d4 	ldr	r2, [pc, #468]	; 882c <va_printk+0x27c>
    8654:	e3a03092 	mov	r3, #146	; 0x92
    8658:	ebffff06 	bl	8278 <printk>
    865c:	eb000075 	bl	8838 <clean_reboot>
			
			switch(*fmt) {
    8660:	e2455062 	sub	r5, r5, #98	; 0x62
    8664:	e3550016 	cmp	r5, #22
    8668:	979ff105 	ldrls	pc, [pc, r5, lsl #2]
    866c:	ea00004e 	b	87ac <va_printk+0x1fc>
    8670:	00008758 	andeq	r8, r0, r8, asr r7
    8674:	00008788 	andeq	r8, r0, r8, lsl #15
    8678:	000086e8 	andeq	r8, r0, r8, ror #13
    867c:	000087ac 	andeq	r8, r0, ip, lsr #15
    8680:	000086cc 	andeq	r8, r0, ip, asr #13
    8684:	000087ac 	andeq	r8, r0, ip, lsr #15
    8688:	000087ac 	andeq	r8, r0, ip, lsr #15
    868c:	000087ac 	andeq	r8, r0, ip, lsr #15
    8690:	000087ac 	andeq	r8, r0, ip, lsr #15
    8694:	000087ac 	andeq	r8, r0, ip, lsr #15
    8698:	000087ac 	andeq	r8, r0, ip, lsr #15
    869c:	000087ac 	andeq	r8, r0, ip, lsr #15
    86a0:	000087ac 	andeq	r8, r0, ip, lsr #15
    86a4:	000087ac 	andeq	r8, r0, ip, lsr #15
    86a8:	00008734 	andeq	r8, r0, r4, lsr r7
    86ac:	000087ac 	andeq	r8, r0, ip, lsr #15
    86b0:	000087ac 	andeq	r8, r0, ip, lsr #15
    86b4:	0000877c 	andeq	r8, r0, ip, ror r7
    86b8:	000087ac 	andeq	r8, r0, ip, lsr #15
    86bc:	00008710 	andeq	r8, r0, r0, lsl r7
    86c0:	000087ac 	andeq	r8, r0, ip, lsr #15
    86c4:	000087ac 	andeq	r8, r0, ip, lsr #15
    86c8:	00008734 	andeq	r8, r0, r4, lsr r7
			case 'f':
			{
#ifndef RPI_FP_ENABLED
				panic("float not enabled!!!");
    86cc:	ebffff04 	bl	82e4 <rpi_reset_putc>
    86d0:	e59f0158 	ldr	r0, [pc, #344]	; 8830 <va_printk+0x280>
    86d4:	e59f114c 	ldr	r1, [pc, #332]	; 8828 <va_printk+0x278>
    86d8:	e59f214c 	ldr	r2, [pc, #332]	; 882c <va_printk+0x27c>
    86dc:	e3a03098 	mov	r3, #152	; 0x98
    86e0:	ebfffee4 	bl	8278 <printk>
    86e4:	eb000053 	bl	8838 <clean_reboot>

				break;
#endif
			}
			case 'd':
				s = emit(10, num, 128, va_arg(args, int), width, 1);
    86e8:	e5993000 	ldr	r3, [r9]
    86ec:	e2899004 	add	r9, r9, #4
    86f0:	e58d7000 	str	r7, [sp]
    86f4:	e3a02001 	mov	r2, #1
    86f8:	e58d2004 	str	r2, [sp, #4]
    86fc:	e3a0000a 	mov	r0, #10
    8700:	e28d1008 	add	r1, sp, #8
    8704:	e3a02080 	mov	r2, #128	; 0x80
    8708:	ebffff2c 	bl	83c0 <emit>
				break;
    870c:	ea00002f 	b	87d0 <va_printk+0x220>
			case 'u':
				s = emit(10, num, 128, va_arg(args, unsigned), width, 0);
    8710:	e5993000 	ldr	r3, [r9]
    8714:	e2899004 	add	r9, r9, #4
    8718:	e58d7000 	str	r7, [sp]
    871c:	e58db004 	str	fp, [sp, #4]
    8720:	e3a0000a 	mov	r0, #10
    8724:	e28d1008 	add	r1, sp, #8
    8728:	e3a02080 	mov	r2, #128	; 0x80
    872c:	ebffff23 	bl	83c0 <emit>
				break;
    8730:	ea000026 	b	87d0 <va_printk+0x220>
			case 'p':
			case 'x':
				s = emit(16, num, 128, va_arg(args, unsigned), width, 0);
    8734:	e5993000 	ldr	r3, [r9]
    8738:	e2899004 	add	r9, r9, #4
    873c:	e58d7000 	str	r7, [sp]
    8740:	e58db004 	str	fp, [sp, #4]
    8744:	e3a00010 	mov	r0, #16
    8748:	e28d1008 	add	r1, sp, #8
    874c:	e3a02080 	mov	r2, #128	; 0x80
    8750:	ebffff1a 	bl	83c0 <emit>
				break;
    8754:	ea00001d 	b	87d0 <va_printk+0x220>
			case 'b':
				s = emit(2, num, 128, va_arg(args, unsigned), width, 0);
    8758:	e5993000 	ldr	r3, [r9]
    875c:	e2899004 	add	r9, r9, #4
    8760:	e58d7000 	str	r7, [sp]
    8764:	e58db004 	str	fp, [sp, #4]
    8768:	e3a00002 	mov	r0, #2
    876c:	e28d1008 	add	r1, sp, #8
    8770:	e3a02080 	mov	r2, #128	; 0x80
    8774:	ebffff11 	bl	83c0 <emit>
				break;
    8778:	ea000014 	b	87d0 <va_printk+0x220>
			case 's':
				s = va_arg(args, char *);
    877c:	e5990000 	ldr	r0, [r9]
    8780:	e2899004 	add	r9, r9, #4
				break;
    8784:	ea000011 	b	87d0 <va_printk+0x220>
			case 'c':
				s = emit(8, num, 128, va_arg(args, int),width,0);
    8788:	e5993000 	ldr	r3, [r9]
    878c:	e2899004 	add	r9, r9, #4
    8790:	e58d7000 	str	r7, [sp]
    8794:	e58db004 	str	fp, [sp, #4]
    8798:	e3a00008 	mov	r0, #8
    879c:	e08d1000 	add	r1, sp, r0
    87a0:	e3a02080 	mov	r2, #128	; 0x80
    87a4:	ebffff05 	bl	83c0 <emit>
				break;
    87a8:	ea000008 	b	87d0 <va_printk+0x220>
			default: 
				panic("printk: not handling specifier '%c'\n", *fmt);
    87ac:	ebfffecc 	bl	82e4 <rpi_reset_putc>
    87b0:	e5d63000 	ldrb	r3, [r6]
    87b4:	e58d3000 	str	r3, [sp]
    87b8:	e59f0074 	ldr	r0, [pc, #116]	; 8834 <va_printk+0x284>
    87bc:	e59f1064 	ldr	r1, [pc, #100]	; 8828 <va_printk+0x278>
    87c0:	e59f2064 	ldr	r2, [pc, #100]	; 882c <va_printk+0x27c>
    87c4:	e3a030b9 	mov	r3, #185	; 0xb9
    87c8:	ebfffeaa 	bl	8278 <printk>
    87cc:	eb000019 	bl	8838 <clean_reboot>
				return 0;   // ugh
			}
			fmt++;
    87d0:	e2862001 	add	r2, r6, #1

			// safe string copy
			for(; p < e && *s; )
    87d4:	ea000002 	b	87e4 <va_printk+0x234>
				*p++ = *s++;
    87d8:	e2800001 	add	r0, r0, #1
    87dc:	e5c43000 	strb	r3, [r4]
    87e0:	e2844001 	add	r4, r4, #1
				return 0;   // ugh
			}
			fmt++;

			// safe string copy
			for(; p < e && *s; )
    87e4:	e1540008 	cmp	r4, r8
    87e8:	2a000002 	bcs	87f8 <va_printk+0x248>
    87ec:	e5d03000 	ldrb	r3, [r0]
    87f0:	e3530000 	cmp	r3, #0
    87f4:	1afffff7 	bne	87d8 <va_printk+0x228>

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    87f8:	e5d23000 	ldrb	r3, [r2]
    87fc:	e3530000 	cmp	r3, #0
    8800:	0a000001 	beq	880c <va_printk+0x25c>
    8804:	e1540008 	cmp	r4, r8
    8808:	3affff73 	bcc	85dc <va_printk+0x2c>
			// safe string copy
			for(; p < e && *s; )
				*p++ = *s++;
		}
	}
	*p++ = 0;
    880c:	e2840001 	add	r0, r4, #1
    8810:	e3a03000 	mov	r3, #0
    8814:	e5c43000 	strb	r3, [r4]
	return p - buf;
}
    8818:	e06a0000 	rsb	r0, sl, r0
    881c:	e28dd08c 	add	sp, sp, #140	; 0x8c
    8820:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8824:	00009c88 	andeq	r9, r0, r8, lsl #25
    8828:	00009c38 	andeq	r9, r0, r8, lsr ip
    882c:	00009c18 	andeq	r9, r0, r8, lsl ip
    8830:	00009ca4 	andeq	r9, r0, r4, lsr #25
    8834:	00009ccc 	andeq	r9, r0, ip, asr #25

00008838 <clean_reboot>:
#include "rpi.h"

// print out a special message so bootloader exits
void clean_reboot(void) {
    8838:	e92d4008 	push	{r3, lr}
    putk("DONE!!!\n");
    883c:	e59f3014 	ldr	r3, [pc, #20]	; 8858 <clean_reboot+0x20>
    8840:	e5933000 	ldr	r3, [r3]
    8844:	e59f0010 	ldr	r0, [pc, #16]	; 885c <clean_reboot+0x24>
    8848:	e12fff33 	blx	r3
    delay_ms(100);       // (hopefully) enough time for message to get flushed.
    884c:	e3a00064 	mov	r0, #100	; 0x64
    8850:	eb000063 	bl	89e4 <delay_ms>
    rpi_reboot();
    8854:	eb000038 	bl	893c <rpi_reboot>
    8858:	000099a8 	andeq	r9, r0, r8, lsr #19
    885c:	00009d04 	andeq	r9, r0, r4, lsl #26

00008860 <internal_sw_putchar>:
#include "rpi.h"
#include "sw-uart.h"
#include "control-block.h"

static sw_uart_t console_uart;
static int internal_sw_putchar(int c) {
    8860:	e92d4010 	push	{r4, lr}
    8864:	e1a04000 	mov	r4, r0
    sw_uart_putc(&console_uart, c);
    8868:	e59f000c 	ldr	r0, [pc, #12]	; 887c <internal_sw_putchar+0x1c>
    886c:	e6ef1074 	uxtb	r1, r4
    8870:	eb0000df 	bl	8bf4 <sw_uart_putc>
    return c;
}
    8874:	e1a00004 	mov	r0, r4
    8878:	e8bd8010 	pop	{r4, pc}
    887c:	0000a3b4 			; <UNDEFINED> instruction: 0x0000a3b4

00008880 <_cstart>:

void _cstart() {
    8880:	e92d4008 	push	{r3, lr}
    extern int __bss_start__, __bss_end__;
	void notmain();

    int* bss = &__bss_start__;
    8884:	e59f3068 	ldr	r3, [pc, #104]	; 88f4 <_cstart+0x74>
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    8888:	e59f2068 	ldr	r2, [pc, #104]	; 88f8 <_cstart+0x78>
        *bss++ = 0;
    888c:	e3a01000 	mov	r1, #0
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    8890:	ea000001 	b	889c <_cstart+0x1c>
        *bss++ = 0;
    8894:	e5831000 	str	r1, [r3]
    8898:	e2833004 	add	r3, r3, #4
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    889c:	e1530002 	cmp	r3, r2
    88a0:	3afffffb 	bcc	8894 <_cstart+0x14>
        *bss++ = 0;

#if 1
    // this links in so much stuff.  need to fix.
    control_blk_t *cb = cb_get_block();
    88a4:	eb000434 	bl	997c <cb_get_block>
    if(cb) {
    88a8:	e3500000 	cmp	r0, #0
    88ac:	0a00000e 	beq	88ec <_cstart+0x6c>
        if(cb->console_dev == PUTC_SW_UART) {
    88b0:	e5d02004 	ldrb	r2, [r0, #4]
    88b4:	e3520002 	cmp	r2, #2
    88b8:	1a00000b 	bne	88ec <_cstart+0x6c>
            rpi_putchar = internal_sw_putchar;
    88bc:	e59f1038 	ldr	r1, [pc, #56]	; 88fc <_cstart+0x7c>
    88c0:	e59f2038 	ldr	r2, [pc, #56]	; 8900 <_cstart+0x80>
    88c4:	e5821000 	str	r1, [r2]
            console_uart = cb->sw_uart;
    88c8:	e59fc034 	ldr	ip, [pc, #52]	; 8904 <_cstart+0x84>
    88cc:	e2803008 	add	r3, r0, #8
    88d0:	e8930007 	ldm	r3, {r0, r1, r2}
    88d4:	e88c0007 	stm	ip, {r0, r1, r2}
            sw_uart_printk(&console_uart, "about to print on regular printf\n");
    88d8:	e1a0000c 	mov	r0, ip
    88dc:	e59f1024 	ldr	r1, [pc, #36]	; 8908 <_cstart+0x88>
    88e0:	eb000217 	bl	9144 <sw_uart_printk>
            printk("success!\n");
    88e4:	e59f0020 	ldr	r0, [pc, #32]	; 890c <_cstart+0x8c>
    88e8:	ebfffe62 	bl	8278 <printk>
        }
    }
#endif
    notmain(); 
    88ec:	ebfffdc7 	bl	8010 <notmain>
	rpi_reboot();
    88f0:	eb000011 	bl	893c <rpi_reboot>
    88f4:	00009fb4 			; <UNDEFINED> instruction: 0x00009fb4
    88f8:	0000a3c8 	andeq	sl, r0, r8, asr #7
    88fc:	00008860 	andeq	r8, r0, r0, ror #16
    8900:	000099a4 	andeq	r9, r0, r4, lsr #19
    8904:	0000a3b4 			; <UNDEFINED> instruction: 0x0000a3b4
    8908:	00009d10 	andeq	r9, r0, r0, lsl sp
    890c:	00009d34 	andeq	r9, r0, r4, lsr sp

00008910 <at_user_level>:
 * works if we have a trashed stack pointer?
 */
static unsigned user_level = 0b10000;
int at_user_level(void) {
    unsigned cpsr = 0;
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    8910:	e10f0000 	mrs	r0, CPSR

    // user level = lower 5 bits = 0b10000);
    return (cpsr  & 0b11111)  == user_level;
    8914:	e200001f 	and	r0, r0, #31
}
    8918:	e3500010 	cmp	r0, #16
    891c:	13a00000 	movne	r0, #0
    8920:	03a00001 	moveq	r0, #1
    8924:	e12fff1e 	bx	lr

00008928 <set_user_level>:

// this is just used by the reboot code.
void set_user_level(void) {
    unsigned cpsr = 0;
    // XXX: shouldn't we just set the one bit?
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    8928:	e10f3000 	mrs	r3, CPSR
        cpsr = (cpsr & ~0b11111) | user_level;
    892c:	e3c3301f 	bic	r3, r3, #31
    8930:	e3833010 	orr	r3, r3, #16
    asm volatile("msr cpsr, %0" :: "r"(cpsr));
    8934:	e129f003 	msr	CPSR_fc, r3
    8938:	e12fff1e 	bx	lr

0000893c <rpi_reboot>:
}

void rpi_reboot(void) {
    893c:	e92d4008 	push	{r3, lr}
    if(at_user_level()) {
    8940:	ebfffff2 	bl	8910 <at_user_level>
    8944:	e3500000 	cmp	r0, #0
    8948:	0a000000 	beq	8950 <rpi_reboot+0x14>
        set_user_level();
    894c:	ebfffff5 	bl	8928 <set_user_level>
        // of stuff.
        // assert(!at_user_level());
    }

    // gives uart time to flush: should just call flush directly.
    delay_ms(30);
    8950:	e3a0001e 	mov	r0, #30
    8954:	eb000022 	bl	89e4 <delay_ms>
    const int PM_WDOG = 0x20100024;
    const int PM_PASSWORD = 0x5a000000;
    const int PM_RSTC_WRCFG_FULL_RESET = 0x00000020;

    // timeout = 1/16th of a second? (whatever)
    PUT32(PM_WDOG, PM_PASSWORD | 1);
    8958:	e59f0014 	ldr	r0, [pc, #20]	; 8974 <rpi_reboot+0x38>
    895c:	e59f1014 	ldr	r1, [pc, #20]	; 8978 <rpi_reboot+0x3c>
    8960:	eb000288 	bl	9388 <PUT32>
    PUT32(PM_RSTC, PM_PASSWORD | PM_RSTC_WRCFG_FULL_RESET);
    8964:	e59f0010 	ldr	r0, [pc, #16]	; 897c <rpi_reboot+0x40>
    8968:	e59f1010 	ldr	r1, [pc, #16]	; 8980 <rpi_reboot+0x44>
    896c:	eb000285 	bl	9388 <PUT32>
    8970:	eafffffe 	b	8970 <rpi_reboot+0x34>
    8974:	20100024 	andscs	r0, r0, r4, lsr #32
    8978:	5a000001 	bpl	8984 <delay_cycles>
    897c:	2010001c 	andscs	r0, r0, ip, lsl r0
    8980:	5a000020 	bpl	8a08 <delay_sec+0x10>

00008984 <delay_cycles>:
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    8984:	ea000001 	b	8990 <delay_cycles+0xc>
        asm("add r1, r1, #0");
    8988:	e2811000 	add	r1, r1, #0
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    898c:	e1a00003 	mov	r0, r3
    8990:	e2403001 	sub	r3, r0, #1
    8994:	e3500000 	cmp	r0, #0
    8998:	1afffffa 	bne	8988 <delay_cycles+0x4>
        asm("add r1, r1, #0");
}
    899c:	e12fff1e 	bx	lr

000089a0 <timer_get_usec_raw>:

// no dev barrier.
unsigned timer_get_usec_raw(void) {
    89a0:	e92d4008 	push	{r3, lr}
    return GET32(0x20003004);
    89a4:	e59f0004 	ldr	r0, [pc, #4]	; 89b0 <timer_get_usec_raw+0x10>
    89a8:	eb000282 	bl	93b8 <GET32>
}
    89ac:	e8bd8008 	pop	{r3, pc}
    89b0:	20003004 	andcs	r3, r0, r4

000089b4 <timer_get_usec>:

// in usec
unsigned timer_get_usec(void) {
    89b4:	e92d4008 	push	{r3, lr}
// comment these out for this lab (8) so student
// code does not get hit by weird timing issues.
//    dev_barrier();
    unsigned u = timer_get_usec_raw();
    89b8:	ebfffff8 	bl	89a0 <timer_get_usec_raw>
//    dev_barrier();
    return u;
}
    89bc:	e8bd8008 	pop	{r3, pc}

000089c0 <delay_us>:

void delay_us(unsigned us) {
    89c0:	e92d4038 	push	{r3, r4, r5, lr}
    89c4:	e1a05000 	mov	r5, r0
    unsigned rb = timer_get_usec();
    89c8:	ebfffff9 	bl	89b4 <timer_get_usec>
    89cc:	e1a04000 	mov	r4, r0
    while (1) {
        unsigned ra = timer_get_usec();
    89d0:	ebfffff7 	bl	89b4 <timer_get_usec>
        if ((ra - rb) >= us) {
    89d4:	e0640000 	rsb	r0, r4, r0
    89d8:	e1500005 	cmp	r0, r5
    89dc:	3afffffb 	bcc	89d0 <delay_us+0x10>
            break;
        }
    }
}
    89e0:	e8bd8038 	pop	{r3, r4, r5, pc}

000089e4 <delay_ms>:
void delay_ms(unsigned ms) {
    89e4:	e92d4008 	push	{r3, lr}
    delay_us(ms*1000);
    89e8:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    89ec:	e0000093 	mul	r0, r3, r0
    89f0:	ebfffff2 	bl	89c0 <delay_us>
    89f4:	e8bd8008 	pop	{r3, pc}

000089f8 <delay_sec>:
}
void delay_sec(unsigned sec) {
    89f8:	e92d4008 	push	{r3, lr}
    delay_ms(sec*1000);
    89fc:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    8a00:	e0000093 	mul	r0, r3, r0
    8a04:	ebfffff6 	bl	89e4 <delay_ms>
    8a08:	e8bd8008 	pop	{r3, pc}

00008a0c <kmalloc>:
 *  - The returned pointer should always be 4-byte aligned.  
 *    Easiest way is to make sure the heap pointer starts 4-byte
 *    and you always round up the number of bytes.  Make sure
 *    you put an assertion in.  
 */
void *kmalloc(unsigned nbytes) {
    8a0c:	e92d4070 	push	{r4, r5, r6, lr}
    demand(init_p, calling before initialized);
    8a10:	e59f3058 	ldr	r3, [pc, #88]	; 8a70 <kmalloc+0x64>
    8a14:	e5933000 	ldr	r3, [r3]
    8a18:	e3530000 	cmp	r3, #0
    8a1c:	1a000006 	bne	8a3c <kmalloc+0x30>
    8a20:	ebfffe2f 	bl	82e4 <rpi_reset_putc>
    8a24:	e59f0048 	ldr	r0, [pc, #72]	; 8a74 <kmalloc+0x68>
    8a28:	e59f1048 	ldr	r1, [pc, #72]	; 8a78 <kmalloc+0x6c>
    8a2c:	e59f2048 	ldr	r2, [pc, #72]	; 8a7c <kmalloc+0x70>
    8a30:	e3a0301a 	mov	r3, #26
    8a34:	ebfffe0f 	bl	8278 <printk>
    8a38:	ebffff7e 	bl	8838 <clean_reboot>
    
    void* to_allocate = heap_ptr;
    8a3c:	e59f402c 	ldr	r4, [pc, #44]	; 8a70 <kmalloc+0x64>
    8a40:	e5945004 	ldr	r5, [r4, #4]
    unsigned rounded_nbytes = roundup(nbytes, 8);
    8a44:	e2806007 	add	r6, r0, #7
    8a48:	e3c66007 	bic	r6, r6, #7
    memset(heap_ptr, 0, rounded_nbytes);
    8a4c:	e1a00005 	mov	r0, r5
    8a50:	e3a01000 	mov	r1, #0
    8a54:	e1a02006 	mov	r2, r6
    8a58:	eb0003b5 	bl	9934 <memset>
    heap_ptr += rounded_nbytes;
    8a5c:	e5943004 	ldr	r3, [r4, #4]
    8a60:	e0836006 	add	r6, r3, r6
    8a64:	e5846004 	str	r6, [r4, #4]
    //memset(heap_ptr, 0, rounded_nbytes);
    return to_allocate;

}
    8a68:	e1a00005 	mov	r0, r5
    8a6c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8a70:	0000a3c0 	andeq	sl, r0, r0, asr #7
    8a74:	00009d80 	andeq	r9, r0, r0, lsl #27
    8a78:	00009dc0 	andeq	r9, r0, r0, asr #27
    8a7c:	00009d40 	andeq	r9, r0, r0, asr #26

00008a80 <kmalloc_aligned>:

// address of returned pointer should be a multiple of
// alignment.
void *kmalloc_aligned(unsigned nbytes, unsigned alignment) {
    8a80:	e92d4008 	push	{r3, lr}
    demand(init_p, calling before initialized);
    8a84:	e59f307c 	ldr	r3, [pc, #124]	; 8b08 <kmalloc_aligned+0x88>
    8a88:	e5933000 	ldr	r3, [r3]
    8a8c:	e3530000 	cmp	r3, #0
    8a90:	1a000006 	bne	8ab0 <kmalloc_aligned+0x30>
    8a94:	ebfffe12 	bl	82e4 <rpi_reset_putc>
    8a98:	e59f006c 	ldr	r0, [pc, #108]	; 8b0c <kmalloc_aligned+0x8c>
    8a9c:	e59f106c 	ldr	r1, [pc, #108]	; 8b10 <kmalloc_aligned+0x90>
    8aa0:	e59f206c 	ldr	r2, [pc, #108]	; 8b14 <kmalloc_aligned+0x94>
    8aa4:	e3a03028 	mov	r3, #40	; 0x28
    8aa8:	ebfffdf2 	bl	8278 <printk>
    8aac:	ebffff61 	bl	8838 <clean_reboot>

    if(alignment <= 8)
    8ab0:	e3510008 	cmp	r1, #8
    8ab4:	8a000001 	bhi	8ac0 <kmalloc_aligned+0x40>
        return kmalloc(nbytes);
    8ab8:	ebffffd3 	bl	8a0c <kmalloc>
    8abc:	e8bd8008 	pop	{r3, pc}
    demand(alignment % 8 == 0, "weird alignment: not a multiple of 4!");
    8ac0:	e3110007 	tst	r1, #7
    8ac4:	0a000006 	beq	8ae4 <kmalloc_aligned+0x64>
    8ac8:	ebfffe05 	bl	82e4 <rpi_reset_putc>
    8acc:	e59f0044 	ldr	r0, [pc, #68]	; 8b18 <kmalloc_aligned+0x98>
    8ad0:	e59f1038 	ldr	r1, [pc, #56]	; 8b10 <kmalloc_aligned+0x90>
    8ad4:	e59f2038 	ldr	r2, [pc, #56]	; 8b14 <kmalloc_aligned+0x94>
    8ad8:	e3a0302c 	mov	r3, #44	; 0x2c
    8adc:	ebfffde5 	bl	8278 <printk>
    8ae0:	ebffff54 	bl	8838 <clean_reboot>
    unsigned aligned_heap_ptr = (unsigned) heap_ptr;
    8ae4:	e59f301c 	ldr	r3, [pc, #28]	; 8b08 <kmalloc_aligned+0x88>
    8ae8:	e5932004 	ldr	r2, [r3, #4]
	aligned_heap_ptr = roundup(aligned_heap_ptr, alignment);
    8aec:	e0812002 	add	r2, r1, r2
    8af0:	e2422001 	sub	r2, r2, #1
    8af4:	e2611000 	rsb	r1, r1, #0
    8af8:	e0021001 	and	r1, r2, r1
	heap_ptr = (void*) aligned_heap_ptr;
    8afc:	e5831004 	str	r1, [r3, #4]

	return kmalloc(nbytes);
    8b00:	ebffffc1 	bl	8a0c <kmalloc>
}
    8b04:	e8bd8008 	pop	{r3, pc}
    8b08:	0000a3c0 	andeq	sl, r0, r0, asr #7
    8b0c:	00009d80 	andeq	r9, r0, r0, lsl #27
    8b10:	00009dc0 	andeq	r9, r0, r0, asr #27
    8b14:	00009d48 	andeq	r9, r0, r8, asr #26
    8b18:	00009dd4 	ldrdeq	r9, [r0], -r4

00008b1c <kmalloc_init>:
 *    - should be just a few lines of code.
 *    - sets heap pointer to the location of 
 *      __heap_start__.   print this to make sure
 *      it makes sense!
 */
void kmalloc_init(void) {
    8b1c:	e92d4008 	push	{r3, lr}
    demand(!init_p, cannot initialize twice!\n);
    8b20:	e59f303c 	ldr	r3, [pc, #60]	; 8b64 <kmalloc_init+0x48>
    8b24:	e5933000 	ldr	r3, [r3]
    8b28:	e3530000 	cmp	r3, #0
    8b2c:	0a000006 	beq	8b4c <kmalloc_init+0x30>
    8b30:	ebfffdeb 	bl	82e4 <rpi_reset_putc>
    8b34:	e59f002c 	ldr	r0, [pc, #44]	; 8b68 <kmalloc_init+0x4c>
    8b38:	e59f102c 	ldr	r1, [pc, #44]	; 8b6c <kmalloc_init+0x50>
    8b3c:	e59f202c 	ldr	r2, [pc, #44]	; 8b70 <kmalloc_init+0x54>
    8b40:	e3a0303d 	mov	r3, #61	; 0x3d
    8b44:	ebfffdcb 	bl	8278 <printk>
    8b48:	ebffff3a 	bl	8838 <clean_reboot>
    init_p = 1;
    8b4c:	e59f3010 	ldr	r3, [pc, #16]	; 8b64 <kmalloc_init+0x48>
    8b50:	e3a02001 	mov	r2, #1
    8b54:	e5832000 	str	r2, [r3]
    heap_ptr = &__heap_start__;
    8b58:	e59f2014 	ldr	r2, [pc, #20]	; 8b74 <kmalloc_init+0x58>
    8b5c:	e5832004 	str	r2, [r3, #4]
    8b60:	e8bd8008 	pop	{r3, pc}
    8b64:	0000a3c0 	andeq	sl, r0, r0, asr #7
    8b68:	00009e2c 	andeq	r9, r0, ip, lsr #28
    8b6c:	00009dc0 	andeq	r9, r0, r0, asr #27
    8b70:	00009d58 	andeq	r9, r0, r8, asr sp
    8b74:	0000a3c8 	andeq	sl, r0, r8, asr #7

00008b78 <kfree_all>:
/* 
 * free all allocated memory: reset the heap 
 * pointer back to the beginning.
 */
void kfree_all(void) {
    heap_ptr = &__heap_start__;
    8b78:	e59f2008 	ldr	r2, [pc, #8]	; 8b88 <kfree_all+0x10>
    8b7c:	e59f3008 	ldr	r3, [pc, #8]	; 8b8c <kfree_all+0x14>
    8b80:	e5832004 	str	r2, [r3, #4]
    8b84:	e12fff1e 	bx	lr
    8b88:	0000a3c8 	andeq	sl, r0, r8, asr #7
    8b8c:	0000a3c0 	andeq	sl, r0, r0, asr #7

00008b90 <kmalloc_heap_ptr>:
// allocated block satisfies: 
//    assert(<addr> < kmalloc_heap_ptr());
// 
void *kmalloc_heap_ptr(void) {
    return (void*) heap_ptr;
}
    8b90:	e59f3004 	ldr	r3, [pc, #4]	; 8b9c <kmalloc_heap_ptr+0xc>
    8b94:	e5930004 	ldr	r0, [r3, #4]
    8b98:	e12fff1e 	bx	lr
    8b9c:	0000a3c0 	andeq	sl, r0, r0, asr #7

00008ba0 <kmalloc_init_set_start>:

void kmalloc_init_set_start(unsigned start_address) {
    8ba0:	e92d4008 	push	{r3, lr}
    demand(!init_p, cannot initialize twice!\n);
    8ba4:	e59f3038 	ldr	r3, [pc, #56]	; 8be4 <kmalloc_init_set_start+0x44>
    8ba8:	e5933000 	ldr	r3, [r3]
    8bac:	e3530000 	cmp	r3, #0
    8bb0:	0a000006 	beq	8bd0 <kmalloc_init_set_start+0x30>
    8bb4:	ebfffdca 	bl	82e4 <rpi_reset_putc>
    8bb8:	e59f0028 	ldr	r0, [pc, #40]	; 8be8 <kmalloc_init_set_start+0x48>
    8bbc:	e59f1028 	ldr	r1, [pc, #40]	; 8bec <kmalloc_init_set_start+0x4c>
    8bc0:	e59f2028 	ldr	r2, [pc, #40]	; 8bf0 <kmalloc_init_set_start+0x50>
    8bc4:	e3a03054 	mov	r3, #84	; 0x54
    8bc8:	ebfffdaa 	bl	8278 <printk>
    8bcc:	ebffff19 	bl	8838 <clean_reboot>
    init_p = 1;
    8bd0:	e59f300c 	ldr	r3, [pc, #12]	; 8be4 <kmalloc_init_set_start+0x44>
    8bd4:	e3a02001 	mov	r2, #1
    8bd8:	e5832000 	str	r2, [r3]
    heap_ptr = (void*) start_address;
    8bdc:	e5830004 	str	r0, [r3, #4]
    8be0:	e8bd8008 	pop	{r3, pc}
    8be4:	0000a3c0 	andeq	sl, r0, r0, asr #7
    8be8:	00009e2c 	andeq	r9, r0, ip, lsr #28
    8bec:	00009dc0 	andeq	r9, r0, r0, asr #27
    8bf0:	00009d68 	andeq	r9, r0, r8, ror #26

00008bf4 <sw_uart_putc>:
 */ 
#include "rpi.h"
#include "sw-uart.h"
#include "cycle-util.h"

void sw_uart_putc(sw_uart_t *uart, unsigned char c) {
    8bf4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8bf8:	e1a07001 	mov	r7, r1
    // use local variables to minimize any loads or stores
    int tx = uart->tx;
    8bfc:	e5d06000 	ldrb	r6, [r0]
    uint32_t n = uart->cycle_per_bit,
    8c00:	e5905008 	ldr	r5, [r0, #8]
             u = n,
             s = cycle_cnt_read();
    8c04:	ee1f4f3c 	mrc	15, 0, r4, cr15, cr12, {1}
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8c08:	e1a00006 	mov	r0, r6
    8c0c:	e3a01000 	mov	r1, #0
    8c10:	eb000284 	bl	9628 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    8c14:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8c18:	e0643003 	rsb	r3, r4, r3
    8c1c:	e1550003 	cmp	r5, r3
    8c20:	8afffffb 	bhi	8c14 <sw_uart_putc+0x20>
	
	// lower line (line idling)
	write_cyc_until(tx, 0, s, u);
	u += n; 
    8c24:	e1a08085 	lsl	r8, r5, #1
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8c28:	e1a00006 	mov	r0, r6
    8c2c:	e2071001 	and	r1, r7, #1
    8c30:	eb00027c 	bl	9628 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    8c34:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8c38:	e0643003 	rsb	r3, r4, r3
    8c3c:	e1580003 	cmp	r8, r3
    8c40:	8afffffb 	bhi	8c34 <sw_uart_putc+0x40>
	write_cyc_until(tx, c & 1, s, u);
	u += n; 
    8c44:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8c48:	e1a00006 	mov	r0, r6
    8c4c:	e2071002 	and	r1, r7, #2
    8c50:	eb000274 	bl	9628 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    8c54:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8c58:	e0643003 	rsb	r3, r4, r3
    8c5c:	e1580003 	cmp	r8, r3
    8c60:	8afffffb 	bhi	8c54 <sw_uart_putc+0x60>
	write_cyc_until(tx, c & 2, s, u);
	u += n; 
    8c64:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8c68:	e1a00006 	mov	r0, r6
    8c6c:	e2071004 	and	r1, r7, #4
    8c70:	eb00026c 	bl	9628 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    8c74:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8c78:	e0643003 	rsb	r3, r4, r3
    8c7c:	e1580003 	cmp	r8, r3
    8c80:	8afffffb 	bhi	8c74 <sw_uart_putc+0x80>
	write_cyc_until(tx, c & 4, s, u);
	u += n; 
    8c84:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8c88:	e1a00006 	mov	r0, r6
    8c8c:	e2071008 	and	r1, r7, #8
    8c90:	eb000264 	bl	9628 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    8c94:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8c98:	e0643003 	rsb	r3, r4, r3
    8c9c:	e1580003 	cmp	r8, r3
    8ca0:	8afffffb 	bhi	8c94 <sw_uart_putc+0xa0>
	write_cyc_until(tx, c & 8, s, u);
	u += n; 
    8ca4:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8ca8:	e1a00006 	mov	r0, r6
    8cac:	e2071010 	and	r1, r7, #16
    8cb0:	eb00025c 	bl	9628 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    8cb4:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8cb8:	e0643003 	rsb	r3, r4, r3
    8cbc:	e1580003 	cmp	r8, r3
    8cc0:	8afffffb 	bhi	8cb4 <sw_uart_putc+0xc0>
	write_cyc_until(tx, c & 16, s, u);
	u += n; 
    8cc4:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8cc8:	e1a00006 	mov	r0, r6
    8ccc:	e2071020 	and	r1, r7, #32
    8cd0:	eb000254 	bl	9628 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    8cd4:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8cd8:	e0643003 	rsb	r3, r4, r3
    8cdc:	e1580003 	cmp	r8, r3
    8ce0:	8afffffb 	bhi	8cd4 <sw_uart_putc+0xe0>
	write_cyc_until(tx, c & 32, s, u);
	u += n; 
    8ce4:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8ce8:	e1a00006 	mov	r0, r6
    8cec:	e2071040 	and	r1, r7, #64	; 0x40
    8cf0:	eb00024c 	bl	9628 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    8cf4:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8cf8:	e0643003 	rsb	r3, r4, r3
    8cfc:	e1580003 	cmp	r8, r3
    8d00:	8afffffb 	bhi	8cf4 <sw_uart_putc+0x100>
	write_cyc_until(tx, c & 64, s, u);
	u += n;
    8d04:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8d08:	e1a00006 	mov	r0, r6
    8d0c:	e2071080 	and	r1, r7, #128	; 0x80
    8d10:	eb000244 	bl	9628 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    8d14:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8d18:	e0643003 	rsb	r3, r4, r3
    8d1c:	e1580003 	cmp	r8, r3
    8d20:	8afffffb 	bhi	8d14 <sw_uart_putc+0x120>
	write_cyc_until(tx, c & 128, s, u);
	u += n; 
    8d24:	e0885005 	add	r5, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8d28:	e1a00006 	mov	r0, r6
    8d2c:	e3a01001 	mov	r1, #1
    8d30:	eb00023c 	bl	9628 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    8d34:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8d38:	e0643003 	rsb	r3, r4, r3
    8d3c:	e1550003 	cmp	r5, r3
    8d40:	8afffffb 	bhi	8d34 <sw_uart_putc+0x140>
	write_cyc_until(tx, 1, s, u);
}
    8d44:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008d48 <sw_uart_getc_timeout>:
}

// do this second: you can type in pi-cat to send stuff.
//      EASY BUG: if you are reading input, but you do not get here in 
//      time it will disappear.
int sw_uart_getc_timeout(sw_uart_t *uart, int timeout_usec) {
    8d48:	e92d43f8 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
    8d4c:	e1a09000 	mov	r9, r0
   int rx = uart->rx;
    8d50:	e5d07001 	ldrb	r7, [r0, #1]
    8d54:	e1a05007 	mov	r5, r7

    // get start bit: timeout_usec=0 implies you return right away.
    while(!wait_until_usec(rx, 0, timeout_usec))
    8d58:	e1a06001 	mov	r6, r1
	write_cyc_until(tx, 1, s, u);
}

// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    8d5c:	ebffff0f 	bl	89a0 <timer_get_usec_raw>
    8d60:	e1a04000 	mov	r4, r0
    while(1) {
        if(gpio_read(rx) == v)
    8d64:	e1a00005 	mov	r0, r5
    8d68:	eb00021b 	bl	95dc <gpio_read>
    8d6c:	e3500000 	cmp	r0, #0
    8d70:	0a000005 	beq	8d8c <sw_uart_getc_timeout+0x44>
            return 1;
        if(timer_get_usec_raw() - start > timeout_usec)
    8d74:	ebffff09 	bl	89a0 <timer_get_usec_raw>
    8d78:	e0640000 	rsb	r0, r4, r0
    8d7c:	e1560000 	cmp	r6, r0
    8d80:	2afffff7 	bcs	8d64 <sw_uart_getc_timeout+0x1c>
            return 0;
    8d84:	e3a03000 	mov	r3, #0
    8d88:	ea000000 	b	8d90 <sw_uart_getc_timeout+0x48>
// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    while(1) {
        if(gpio_read(rx) == v)
            return 1;
    8d8c:	e3a03001 	mov	r3, #1
//      time it will disappear.
int sw_uart_getc_timeout(sw_uart_t *uart, int timeout_usec) {
   int rx = uart->rx;

    // get start bit: timeout_usec=0 implies you return right away.
    while(!wait_until_usec(rx, 0, timeout_usec))
    8d90:	e3530000 	cmp	r3, #0
    8d94:	0a000059 	beq	8f00 <sw_uart_getc_timeout+0x1b8>
        return -1;

    // do this first so we have a tighter bound (maybe)
    unsigned s = cycle_cnt_read();  // subtract off slop?
    8d98:	ee1f8f3c 	mrc	15, 0, r8, cr15, cr12, {1}

    // store these in locals to minimize load stores later.
    uint32_t u = uart->cycle_per_bit;
    8d9c:	e5994008 	ldr	r4, [r9, #8]
    unsigned n = u/2;
    unsigned c = 0;

    // wait one period + 1/2 to get in the middle of the next read.
    delay_ncycles(s, n + 1*u);
    8da0:	e08420a4 	add	r2, r4, r4, lsr #1
    8da4:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8da8:	e0683003 	rsb	r3, r8, r3
    8dac:	e1520003 	cmp	r2, r3
    8db0:	8afffffb 	bhi	8da4 <sw_uart_getc_timeout+0x5c>
	
	s += u;
    8db4:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx);
    8db8:	e1a00007 	mov	r0, r7
    8dbc:	eb000206 	bl	95dc <gpio_read>
    8dc0:	e1a09750 	asr	r9, r0, r7
    8dc4:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8dc8:	e0683003 	rsb	r3, r8, r3
    8dcc:	e1540003 	cmp	r4, r3
    8dd0:	8afffffb 	bhi	8dc4 <sw_uart_getc_timeout+0x7c>
    delay_ncycles(s, u);
	s += u; 
    8dd4:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 1;
    8dd8:	e1a00007 	mov	r0, r7
    8ddc:	eb0001fe 	bl	95dc <gpio_read>
    8de0:	e1a00750 	asr	r0, r0, r7
    8de4:	e1899080 	orr	r9, r9, r0, lsl #1
    8de8:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8dec:	e0683003 	rsb	r3, r8, r3
    8df0:	e1540003 	cmp	r4, r3
    8df4:	8afffffb 	bhi	8de8 <sw_uart_getc_timeout+0xa0>
    delay_ncycles(s, u);
	s += u;
    8df8:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 2;
    8dfc:	e1a00007 	mov	r0, r7
    8e00:	eb0001f5 	bl	95dc <gpio_read>
    8e04:	e1a00750 	asr	r0, r0, r7
    8e08:	e1899100 	orr	r9, r9, r0, lsl #2
    8e0c:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8e10:	e0683003 	rsb	r3, r8, r3
    8e14:	e1540003 	cmp	r4, r3
    8e18:	8afffffb 	bhi	8e0c <sw_uart_getc_timeout+0xc4>
    delay_ncycles(s, u);
	s += u;
    8e1c:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 3;
    8e20:	e1a00007 	mov	r0, r7
    8e24:	eb0001ec 	bl	95dc <gpio_read>
    8e28:	e1a00750 	asr	r0, r0, r7
    8e2c:	e1899180 	orr	r9, r9, r0, lsl #3
    8e30:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8e34:	e0683003 	rsb	r3, r8, r3
    8e38:	e1540003 	cmp	r4, r3
    8e3c:	8afffffb 	bhi	8e30 <sw_uart_getc_timeout+0xe8>
    delay_ncycles(s, u);
	s += u;
    8e40:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 4;
    8e44:	e1a00007 	mov	r0, r7
    8e48:	eb0001e3 	bl	95dc <gpio_read>
    8e4c:	e1a00750 	asr	r0, r0, r7
    8e50:	e1899200 	orr	r9, r9, r0, lsl #4
    8e54:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8e58:	e0683003 	rsb	r3, r8, r3
    8e5c:	e1540003 	cmp	r4, r3
    8e60:	8afffffb 	bhi	8e54 <sw_uart_getc_timeout+0x10c>
    delay_ncycles(s, u);
	s += u;
    8e64:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 5;
    8e68:	e1a00007 	mov	r0, r7
    8e6c:	eb0001da 	bl	95dc <gpio_read>
    8e70:	e1a00750 	asr	r0, r0, r7
    8e74:	e1899280 	orr	r9, r9, r0, lsl #5
    8e78:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8e7c:	e0683003 	rsb	r3, r8, r3
    8e80:	e1540003 	cmp	r4, r3
    8e84:	8afffffb 	bhi	8e78 <sw_uart_getc_timeout+0x130>
    delay_ncycles(s, u);
	s += u;
    8e88:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 6;
    8e8c:	e1a00007 	mov	r0, r7
    8e90:	eb0001d1 	bl	95dc <gpio_read>
    8e94:	e1a00750 	asr	r0, r0, r7
    8e98:	e1899300 	orr	r9, r9, r0, lsl #6
    8e9c:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8ea0:	e0683003 	rsb	r3, r8, r3
    8ea4:	e1540003 	cmp	r4, r3
    8ea8:	8afffffb 	bhi	8e9c <sw_uart_getc_timeout+0x154>
    delay_ncycles(s, u);
	s += u;
    c |= (gpio_read(rx) >> rx) << 7;
    8eac:	e1a00007 	mov	r0, r7
    8eb0:	eb0001c9 	bl	95dc <gpio_read>
    8eb4:	e1a00750 	asr	r0, r0, r7
    8eb8:	e1899380 	orr	r9, r9, r0, lsl #7
	write_cyc_until(tx, 1, s, u);
}

// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    8ebc:	ebfffeb7 	bl	89a0 <timer_get_usec_raw>
    8ec0:	e1a04000 	mov	r4, r0
    while(1) {
        if(gpio_read(rx) == v)
    8ec4:	e1a00005 	mov	r0, r5
    8ec8:	eb0001c3 	bl	95dc <gpio_read>
    8ecc:	e3500000 	cmp	r0, #0
    8ed0:	0a000005 	beq	8eec <sw_uart_getc_timeout+0x1a4>
            return 1;
        if(timer_get_usec_raw() - start > timeout_usec)
    8ed4:	ebfffeb1 	bl	89a0 <timer_get_usec_raw>
    8ed8:	e0640000 	rsb	r0, r4, r0
    8edc:	e1560000 	cmp	r6, r0
    8ee0:	2afffff7 	bcs	8ec4 <sw_uart_getc_timeout+0x17c>
            return 0;
    8ee4:	e3a03000 	mov	r3, #0
    8ee8:	ea000000 	b	8ef0 <sw_uart_getc_timeout+0x1a8>
// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    while(1) {
        if(gpio_read(rx) == v)
            return 1;
    8eec:	e3a03001 	mov	r3, #1
    c |= (gpio_read(rx) >> rx) << 7;
    //delay_ncycles(s, u);
	//s += u;
    
	// make sure you wait for a stop bit: otherwise the next read may fail.
    while(!wait_until_usec(rx, 0, timeout_usec))
    8ef0:	e3530000 	cmp	r3, #0
    8ef4:	0a000003 	beq	8f08 <sw_uart_getc_timeout+0x1c0>
        return -1;
	// delay_ncycles(s, n);

    return (int)c;
    8ef8:	e1a00009 	mov	r0, r9
    8efc:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
int sw_uart_getc_timeout(sw_uart_t *uart, int timeout_usec) {
   int rx = uart->rx;

    // get start bit: timeout_usec=0 implies you return right away.
    while(!wait_until_usec(rx, 0, timeout_usec))
        return -1;
    8f00:	e3e00000 	mvn	r0, #0
    8f04:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
    //delay_ncycles(s, u);
	//s += u;
    
	// make sure you wait for a stop bit: otherwise the next read may fail.
    while(!wait_until_usec(rx, 0, timeout_usec))
        return -1;
    8f08:	e3e00000 	mvn	r0, #0
	// delay_ncycles(s, n);

    return (int)c;
}
    8f0c:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}

00008f10 <sw_uart_gets_until>:


// read characters using <sw_uart_getc()> until:
//       <sw_uart_getc() == <end>>
// returns -nbytes read if timeout (could be 0).
int sw_uart_gets_until(sw_uart_t *u, uint8_t *buf, uint32_t nbytes, uint8_t end, uint32_t usec_timeout) {
    8f10:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8f14:	e1a08000 	mov	r8, r0
    8f18:	e1a06001 	mov	r6, r1
    8f1c:	e1a09003 	mov	r9, r3
    8f20:	e59da020 	ldr	sl, [sp, #32]
    assert(nbytes>0);
    8f24:	e3520000 	cmp	r2, #0
    8f28:	1a000006 	bne	8f48 <sw_uart_gets_until+0x38>
    8f2c:	ebfffcec 	bl	82e4 <rpi_reset_putc>
    8f30:	e59f005c 	ldr	r0, [pc, #92]	; 8f94 <sw_uart_gets_until+0x84>
    8f34:	e59f105c 	ldr	r1, [pc, #92]	; 8f98 <sw_uart_gets_until+0x88>
    8f38:	e59f205c 	ldr	r2, [pc, #92]	; 8f9c <sw_uart_gets_until+0x8c>
    8f3c:	e3a0306d 	mov	r3, #109	; 0x6d
    8f40:	ebfffccc 	bl	8278 <printk>
    8f44:	ebfffe3b 	bl	8838 <clean_reboot>
    buf[0] = 0;
    8f48:	e3a04000 	mov	r4, #0
    8f4c:	e5c14000 	strb	r4, [r1]

    int i;
	uint8_t char_in;
    for(i = 0; i < nbytes-1; i++) {
    8f50:	e2427001 	sub	r7, r2, #1
    8f54:	ea000007 	b	8f78 <sw_uart_gets_until+0x68>
        if((char_in = (uint8_t)sw_uart_getc_timeout(u, usec_timeout)) != end) {
    8f58:	e1a00008 	mov	r0, r8
    8f5c:	e1a0100a 	mov	r1, sl
    8f60:	ebffff78 	bl	8d48 <sw_uart_getc_timeout>
    8f64:	e6ef0070 	uxtb	r0, r0
    8f68:	e1500009 	cmp	r0, r9
    8f6c:	0a000004 	beq	8f84 <sw_uart_gets_until+0x74>
			buf[i] = char_in;
    8f70:	e7c60005 	strb	r0, [r6, r5]
    assert(nbytes>0);
    buf[0] = 0;

    int i;
	uint8_t char_in;
    for(i = 0; i < nbytes-1; i++) {
    8f74:	e2844001 	add	r4, r4, #1
    8f78:	e1a05004 	mov	r5, r4
    8f7c:	e1540007 	cmp	r4, r7
    8f80:	3afffff4 	bcc	8f58 <sw_uart_gets_until+0x48>
			buf[i] = char_in;
		} else {
			break;
		}
    }
    buf[i] = 0;
    8f84:	e3a03000 	mov	r3, #0
    8f88:	e7c63005 	strb	r3, [r6, r5]
    return i;
}
    8f8c:	e1a00004 	mov	r0, r4
    8f90:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8f94:	00009ee4 	andeq	r9, r0, r4, ror #29
    8f98:	00009f00 	andeq	r9, r0, r0, lsl #30
    8f9c:	00009e6c 	andeq	r9, r0, ip, ror #28

00008fa0 <sw_uart_gets_timeout>:

// read characters using <sw_uart_getc()> until:
//      we do not receive any characters for <timeout> usec.
// make sure to 0 terminate!
int sw_uart_gets_timeout(sw_uart_t *u, uint8_t *buf, 
                    uint32_t nbytes, uint32_t usec_timeout) {
    8fa0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8fa4:	e1a07000 	mov	r7, r0
    8fa8:	e1a05001 	mov	r5, r1
    8fac:	e1a08003 	mov	r8, r3

    assert(nbytes>0);
    8fb0:	e3520000 	cmp	r2, #0
    8fb4:	1a000006 	bne	8fd4 <sw_uart_gets_timeout+0x34>
    8fb8:	ebfffcc9 	bl	82e4 <rpi_reset_putc>
    8fbc:	e59f004c 	ldr	r0, [pc, #76]	; 9010 <sw_uart_gets_timeout+0x70>
    8fc0:	e59f104c 	ldr	r1, [pc, #76]	; 9014 <sw_uart_gets_timeout+0x74>
    8fc4:	e59f204c 	ldr	r2, [pc, #76]	; 9018 <sw_uart_gets_timeout+0x78>
    8fc8:	e3a03083 	mov	r3, #131	; 0x83
    8fcc:	ebfffca9 	bl	8278 <printk>
    8fd0:	ebfffe18 	bl	8838 <clean_reboot>
    buf[0] = 0;
    8fd4:	e3a04000 	mov	r4, #0
    8fd8:	e5c14000 	strb	r4, [r1]

    int i;
    for(i = 0; i < nbytes-1; i++) {
    8fdc:	e2426001 	sub	r6, r2, #1
    8fe0:	ea000004 	b	8ff8 <sw_uart_gets_timeout+0x58>
        buf[i] = (uint8_t) sw_uart_getc_timeout(u, usec_timeout);
    8fe4:	e1a00007 	mov	r0, r7
    8fe8:	e1a01008 	mov	r1, r8
    8fec:	ebffff55 	bl	8d48 <sw_uart_getc_timeout>
    8ff0:	e7c50004 	strb	r0, [r5, r4]

    assert(nbytes>0);
    buf[0] = 0;

    int i;
    for(i = 0; i < nbytes-1; i++) {
    8ff4:	e2844001 	add	r4, r4, #1
    8ff8:	e1540006 	cmp	r4, r6
    8ffc:	3afffff8 	bcc	8fe4 <sw_uart_gets_timeout+0x44>
        buf[i] = (uint8_t) sw_uart_getc_timeout(u, usec_timeout);
    }
    buf[i] = 0;
    9000:	e3a03000 	mov	r3, #0
    9004:	e7c53004 	strb	r3, [r5, r4]
    return i;
}
    9008:	e1a00004 	mov	r0, r4
    900c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9010:	00009ee4 	andeq	r9, r0, r4, ror #29
    9014:	00009f00 	andeq	r9, r0, r0, lsl #30
    9018:	00009e80 	andeq	r9, r0, r0, lsl #29

0000901c <sw_uart_init_helper>:
/**************************************************************************
 * this code is implemented for you
 */

sw_uart_t 
sw_uart_init_helper(uint8_t tx, uint8_t rx, uint32_t baud, uint32_t cyc_per_bit) {
    901c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9020:	e1a04000 	mov	r4, r0
    9024:	e1a06001 	mov	r6, r1
    9028:	e1a08002 	mov	r8, r2
    902c:	e1a05003 	mov	r5, r3
    9030:	e59d7018 	ldr	r7, [sp, #24]
    // maybe enable the cache?  don't think will work otherwise.
    gpio_set_output(tx);
    9034:	e1a00001 	mov	r0, r1
    9038:	eb0000e3 	bl	93cc <gpio_set_output>
    gpio_set_input(rx);
    903c:	e1a00008 	mov	r0, r8
    9040:	eb000132 	bl	9510 <gpio_set_input>
    cycle_cnt_init();       
    9044:	e3a03001 	mov	r3, #1
    9048:	ee0f3f1c 	mcr	15, 0, r3, cr15, cr12, {0}
	gpio_write(tx, 1);
    904c:	e1a00006 	mov	r0, r6
    9050:	e3a01001 	mov	r1, #1
    9054:	eb000173 	bl	9628 <gpio_write>

    // make sure it makes sense.
    unsigned mhz = 700 * 1000 * 1000;
    unsigned derived = cyc_per_bit * baud;
    9058:	e0020795 	mul	r2, r5, r7
    assert((mhz - baud) <= derived && derived <= (mhz + baud));
    905c:	e59f3068 	ldr	r3, [pc, #104]	; 90cc <sw_uart_init_helper+0xb0>
    9060:	e0653003 	rsb	r3, r5, r3
    9064:	e1530002 	cmp	r3, r2
    9068:	8a000005 	bhi	9084 <sw_uart_init_helper+0x68>
    906c:	e59f3058 	ldr	r3, [pc, #88]	; 90cc <sw_uart_init_helper+0xb0>
    9070:	e0853003 	add	r3, r5, r3
    9074:	e1530002 	cmp	r3, r2
    9078:	2a000003 	bcs	908c <sw_uart_init_helper+0x70>
    907c:	e3a03000 	mov	r3, #0
    9080:	ea000002 	b	9090 <sw_uart_init_helper+0x74>
    9084:	e3a03000 	mov	r3, #0
    9088:	ea000000 	b	9090 <sw_uart_init_helper+0x74>
    908c:	e3a03001 	mov	r3, #1
    9090:	e3530000 	cmp	r3, #0
    9094:	1a000006 	bne	90b4 <sw_uart_init_helper+0x98>
    9098:	ebfffc91 	bl	82e4 <rpi_reset_putc>
    909c:	e59f002c 	ldr	r0, [pc, #44]	; 90d0 <sw_uart_init_helper+0xb4>
    90a0:	e59f102c 	ldr	r1, [pc, #44]	; 90d4 <sw_uart_init_helper+0xb8>
    90a4:	e59f202c 	ldr	r2, [pc, #44]	; 90d8 <sw_uart_init_helper+0xbc>
    90a8:	e3a0309d 	mov	r3, #157	; 0x9d
    90ac:	ebfffc71 	bl	8278 <printk>
    90b0:	ebfffde0 	bl	8838 <clean_reboot>
    // panic("cyc_per_bit = %d * baud = %d\n", cyc_per_bit, cyc_per_bit * baud);

    return (sw_uart_t) { 
    90b4:	e5c46000 	strb	r6, [r4]
    90b8:	e5c48001 	strb	r8, [r4, #1]
    90bc:	e5845004 	str	r5, [r4, #4]
    90c0:	e5847008 	str	r7, [r4, #8]
            .tx = tx, 
            .rx = rx, 
            .baud = baud, 
            .cycle_per_bit = cyc_per_bit 
    };
}
    90c4:	e1a00004 	mov	r0, r4
    90c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    90cc:	29b92700 	ldmibcs	r9!, {r8, r9, sl, sp}
    90d0:	00009f14 	andeq	r9, r0, r4, lsl pc
    90d4:	00009f00 	andeq	r9, r0, r0, lsl #30
    90d8:	00009e98 	muleq	r0, r8, lr

000090dc <sw_uart_getc>:

// blocking read.
int sw_uart_getc(sw_uart_t *uart) {
    90dc:	e92d4008 	push	{r3, lr}
    int res = sw_uart_getc_timeout(uart, ~0);
    90e0:	e3e01000 	mvn	r1, #0
    90e4:	ebffff17 	bl	8d48 <sw_uart_getc_timeout>
    if(res < 0)
    90e8:	e3500000 	cmp	r0, #0
    90ec:	a8bd8008 	popge	{r3, pc}
        panic("impossible: have an infinite timeout!\n");
    90f0:	ebfffc7b 	bl	82e4 <rpi_reset_putc>
    90f4:	e59f0010 	ldr	r0, [pc, #16]	; 910c <sw_uart_getc+0x30>
    90f8:	e59f1010 	ldr	r1, [pc, #16]	; 9110 <sw_uart_getc+0x34>
    90fc:	e59f2010 	ldr	r2, [pc, #16]	; 9114 <sw_uart_getc+0x38>
    9100:	e3a030ac 	mov	r3, #172	; 0xac
    9104:	ebfffc5b 	bl	8278 <printk>
    9108:	ebfffdca 	bl	8838 <clean_reboot>
    910c:	00009f58 	andeq	r9, r0, r8, asr pc
    9110:	00009f00 	andeq	r9, r0, r0, lsl #30
    9114:	00009eac 	andeq	r9, r0, ip, lsr #29

00009118 <sw_uart_putk>:
    return res;
}

void sw_uart_putk(sw_uart_t *uart, const char *msg) {
    9118:	e92d4038 	push	{r3, r4, r5, lr}
    911c:	e1a05000 	mov	r5, r0
    9120:	e1a04001 	mov	r4, r1
    for(; *msg; msg++)
    9124:	ea000002 	b	9134 <sw_uart_putk+0x1c>
        sw_uart_putc(uart, *msg);
    9128:	e1a00005 	mov	r0, r5
    912c:	ebfffeb0 	bl	8bf4 <sw_uart_putc>
        panic("impossible: have an infinite timeout!\n");
    return res;
}

void sw_uart_putk(sw_uart_t *uart, const char *msg) {
    for(; *msg; msg++)
    9130:	e2844001 	add	r4, r4, #1
    9134:	e5d41000 	ldrb	r1, [r4]
    9138:	e3510000 	cmp	r1, #0
    913c:	1afffff9 	bne	9128 <sw_uart_putk+0x10>
        sw_uart_putc(uart, *msg);
}
    9140:	e8bd8038 	pop	{r3, r4, r5, pc}

00009144 <sw_uart_printk>:

// don't pollute the rest of the code with all the stuff in the 
// <stdarg.h> header.
#include <stdarg.h>
#include "libc/va-printk.h"
int sw_uart_printk(sw_uart_t *uart, const char *fmt, ...) {
    9144:	e92d000e 	push	{r1, r2, r3}
    9148:	e92d4030 	push	{r4, r5, lr}
    914c:	e24dde1d 	sub	sp, sp, #464	; 0x1d0
    9150:	e1a05000 	mov	r5, r0
    char buf[460];

    va_list args;
    va_start(args, fmt);
    9154:	e28d3e1e 	add	r3, sp, #480	; 0x1e0
    9158:	e58d3000 	str	r3, [sp]
        int sz = va_printk(buf, sizeof buf, fmt, args);
    915c:	e28d0004 	add	r0, sp, #4
    9160:	e3a01f73 	mov	r1, #460	; 0x1cc
    9164:	e59d21dc 	ldr	r2, [sp, #476]	; 0x1dc
    9168:	ebfffd10 	bl	85b0 <va_printk>
    916c:	e1a04000 	mov	r4, r0
    va_end(args);
    assert(sz < sizeof buf-1);
    9170:	e59f3040 	ldr	r3, [pc, #64]	; 91b8 <sw_uart_printk+0x74>
    9174:	e1500003 	cmp	r0, r3
    9178:	9a000006 	bls	9198 <sw_uart_printk+0x54>
    917c:	ebfffc58 	bl	82e4 <rpi_reset_putc>
    9180:	e59f0034 	ldr	r0, [pc, #52]	; 91bc <sw_uart_printk+0x78>
    9184:	e59f1034 	ldr	r1, [pc, #52]	; 91c0 <sw_uart_printk+0x7c>
    9188:	e59f2034 	ldr	r2, [pc, #52]	; 91c4 <sw_uart_printk+0x80>
    918c:	e3a030c0 	mov	r3, #192	; 0xc0
    9190:	ebfffc38 	bl	8278 <printk>
    9194:	ebfffda7 	bl	8838 <clean_reboot>
    sw_uart_putk(uart,buf);
    9198:	e1a00005 	mov	r0, r5
    919c:	e28d1004 	add	r1, sp, #4
    91a0:	ebffffdc 	bl	9118 <sw_uart_putk>
    return sz;
}
    91a4:	e1a00004 	mov	r0, r4
    91a8:	e28dde1d 	add	sp, sp, #464	; 0x1d0
    91ac:	e8bd4030 	pop	{r4, r5, lr}
    91b0:	e28dd00c 	add	sp, sp, #12
    91b4:	e12fff1e 	bx	lr
    91b8:	000001ca 	andeq	r0, r0, sl, asr #3
    91bc:	00009f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
    91c0:	00009f00 	andeq	r9, r0, r0, lsl #30
    91c4:	00009ebc 			; <UNDEFINED> instruction: 0x00009ebc

000091c8 <sw_uart_gets_until_blk>:

int sw_uart_gets_until_blk(sw_uart_t *u, uint8_t *buf, uint32_t nbytes, uint8_t end) {
    91c8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    91cc:	e24dd00c 	sub	sp, sp, #12
    int res = sw_uart_gets_until(u, buf, nbytes, end, ~0);
    91d0:	e3e0c000 	mvn	ip, #0
    91d4:	e58dc000 	str	ip, [sp]
    91d8:	ebffff4c 	bl	8f10 <sw_uart_gets_until>
    if(res < 0)
    91dc:	e3500000 	cmp	r0, #0
    91e0:	aa000006 	bge	9200 <sw_uart_gets_until_blk+0x38>
        panic("impossible: have an infinite timeout!\n");
    91e4:	ebfffc3e 	bl	82e4 <rpi_reset_putc>
    91e8:	e59f0018 	ldr	r0, [pc, #24]	; 9208 <sw_uart_gets_until_blk+0x40>
    91ec:	e59f1018 	ldr	r1, [pc, #24]	; 920c <sw_uart_gets_until_blk+0x44>
    91f0:	e59f2018 	ldr	r2, [pc, #24]	; 9210 <sw_uart_gets_until_blk+0x48>
    91f4:	e3a030c8 	mov	r3, #200	; 0xc8
    91f8:	ebfffc1e 	bl	8278 <printk>
    91fc:	ebfffd8d 	bl	8838 <clean_reboot>
    return res;
}
    9200:	e28dd00c 	add	sp, sp, #12
    9204:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9208:	00009f58 	andeq	r9, r0, r8, asr pc
    920c:	00009f00 	andeq	r9, r0, r0, lsl #30
    9210:	00009ecc 	andeq	r9, r0, ip, asr #29

00009214 <uart_init>:
#define RX_READY 0x1
#define TX_READY 0x10
#define TX_EMPTY 0x20

// note: if you need memory barriers, use <dev_barrier()>
void uart_init(void) {
    9214:	e92d4038 	push	{r3, r4, r5, lr}
    
	dev_barrier();
    9218:	eb000052 	bl	9368 <dev_barrier>

	// set GPIO 14 and 15 to alternate function 0
    //volatile unsigned* gpio_reg = (void*) 0x20200004;
    //unsigned bitmask = get32(gpio_reg);
    gpio_set_function(14, GPIO_FUNC_ALT5);
    921c:	e3a0000e 	mov	r0, #14
    9220:	e3a01002 	mov	r1, #2
    9224:	eb000108 	bl	964c <gpio_set_function>
	gpio_set_function(15, GPIO_FUNC_ALT5);
    9228:	e3a0000f 	mov	r0, #15
    922c:	e3a01002 	mov	r1, #2
    9230:	eb000105 	bl	964c <gpio_set_function>
    //bitmask &= ~(0b111 << ((UART0_RX % 10) * 3));
    //bitmask |= (0b010 << ((UART0_TX % 10) * 3));
    //bitmask |= (0b010 << ((UART0_RX % 10) * 3));
    //put32(gpio_reg, bitmask);

	dev_barrier();
    9234:	eb00004b 	bl	9368 <dev_barrier>

    put32(AUX_ENABLES, get32(AUX_ENABLES) | (ENABLE_UART));
    9238:	e59f4068 	ldr	r4, [pc, #104]	; 92a8 <uart_init+0x94>
    923c:	e5945000 	ldr	r5, [r4]
    9240:	e1a00005 	mov	r0, r5
    9244:	eb000059 	bl	93b0 <get32>
    9248:	e3801001 	orr	r1, r0, #1
    924c:	e1a00005 	mov	r0, r5
    9250:	eb00004a 	bl	9380 <put32>
	
	dev_barrier();
    9254:	eb000043 	bl	9368 <dev_barrier>
	
    put32(AUX_MU_CNTL_REG, 0x0);
    9258:	e5940004 	ldr	r0, [r4, #4]
    925c:	e3a01000 	mov	r1, #0
    9260:	eb000046 	bl	9380 <put32>
    put32(AUX_MU_IER_REG, 0x0);
    9264:	e5940008 	ldr	r0, [r4, #8]
    9268:	e3a01000 	mov	r1, #0
    926c:	eb000043 	bl	9380 <put32>
    put32(AUX_MU_IIR_REG, CLEAR_RX_FIFO | CLEAR_TX_FIFO);
    9270:	e594000c 	ldr	r0, [r4, #12]
    9274:	e3a01006 	mov	r1, #6
    9278:	eb000040 	bl	9380 <put32>
	put32(AUX_MU_LCR_REG, ENABLE_8BIT_MODE);
    927c:	e5940010 	ldr	r0, [r4, #16]
    9280:	e3a01003 	mov	r1, #3
    9284:	eb00003d 	bl	9380 <put32>
    put32(AUX_MU_BAUD_REG, BAUD_115200);
    9288:	e5940014 	ldr	r0, [r4, #20]
    928c:	e59f1018 	ldr	r1, [pc, #24]	; 92ac <uart_init+0x98>
    9290:	eb00003a 	bl	9380 <put32>
    put32(AUX_MU_CNTL_REG, ENABLE_TXER | ENABLE_RXER);
    9294:	e5940004 	ldr	r0, [r4, #4]
    9298:	e3a01003 	mov	r1, #3
    929c:	eb000037 	bl	9380 <put32>

	dev_barrier();
    92a0:	eb000030 	bl	9368 <dev_barrier>
    92a4:	e8bd8038 	pop	{r3, r4, r5, pc}
    92a8:	000099ac 	andeq	r9, r0, ip, lsr #19
    92ac:	0000010e 	andeq	r0, r0, lr, lsl #2

000092b0 <uart_can_getc>:
}

// 1 = at least one byte on rx queue, 0 otherwise
int uart_can_getc(void) {
    92b0:	e92d4008 	push	{r3, lr}
    return get32(AUX_MU_LSR_REG) & RX_READY;
    92b4:	e59f300c 	ldr	r3, [pc, #12]	; 92c8 <uart_can_getc+0x18>
    92b8:	e5930018 	ldr	r0, [r3, #24]
    92bc:	eb00003b 	bl	93b0 <get32>
}
    92c0:	e2000001 	and	r0, r0, #1
    92c4:	e8bd8008 	pop	{r3, pc}
    92c8:	000099ac 	andeq	r9, r0, ip, lsr #19

000092cc <uart_getc>:

// returns one byte from the rx queue, if needed
// blocks until there is one.
int uart_getc(void) {
    92cc:	e92d4008 	push	{r3, lr}
    while(1)
        if(uart_can_getc())  break;
    92d0:	ebfffff6 	bl	92b0 <uart_can_getc>
    92d4:	e3500000 	cmp	r0, #0
    92d8:	0afffffc 	beq	92d0 <uart_getc+0x4>
    return get32(AUX_MU_IO_REG) & 0xFF;
    92dc:	e59f300c 	ldr	r3, [pc, #12]	; 92f0 <uart_getc+0x24>
    92e0:	e593001c 	ldr	r0, [r3, #28]
    92e4:	eb000031 	bl	93b0 <get32>
}
    92e8:	e6ef0070 	uxtb	r0, r0
    92ec:	e8bd8008 	pop	{r3, pc}
    92f0:	000099ac 	andeq	r9, r0, ip, lsr #19

000092f4 <uart_can_putc>:

// 1 = space to put at least one byte, 0 otherwise.
int uart_can_putc(void) {
    92f4:	e92d4008 	push	{r3, lr}
    return get32(AUX_MU_LSR_REG) & TX_EMPTY;
    92f8:	e59f300c 	ldr	r3, [pc, #12]	; 930c <uart_can_putc+0x18>
    92fc:	e5930018 	ldr	r0, [r3, #24]
    9300:	eb00002a 	bl	93b0 <get32>
}
    9304:	e2000020 	and	r0, r0, #32
    9308:	e8bd8008 	pop	{r3, pc}
    930c:	000099ac 	andeq	r9, r0, ip, lsr #19

00009310 <uart_putc>:

// put one byte on the tx qqueue, if needed, blocks
// until TX has space.
void uart_putc(unsigned c) {
    9310:	e92d4010 	push	{r4, lr}
    9314:	e1a04000 	mov	r4, r0
    while(1)
            if(uart_can_putc())  break;
    9318:	ebfffff5 	bl	92f4 <uart_can_putc>
    931c:	e3500000 	cmp	r0, #0
    9320:	0afffffc 	beq	9318 <uart_putc+0x8>
    put32(AUX_MU_IO_REG, c);
    9324:	e59f300c 	ldr	r3, [pc, #12]	; 9338 <uart_putc+0x28>
    9328:	e593001c 	ldr	r0, [r3, #28]
    932c:	e1a01004 	mov	r1, r4
    9330:	eb000012 	bl	9380 <put32>
    9334:	e8bd8010 	pop	{r4, pc}
    9338:	000099ac 	andeq	r9, r0, ip, lsr #19

0000933c <uart_has_data>:


// simple wrapper routines useful later.

// a maybe-more intuitive name for clients.
int uart_has_data(void) {
    933c:	e92d4008 	push	{r3, lr}
    return uart_can_getc();
    9340:	ebffffda 	bl	92b0 <uart_can_getc>
}
    9344:	e8bd8008 	pop	{r3, pc}

00009348 <uart_getc_async>:

int uart_getc_async(void) { 
    9348:	e92d4008 	push	{r3, lr}
    if(!uart_has_data())
    934c:	ebfffffa 	bl	933c <uart_has_data>
    9350:	e3500000 	cmp	r0, #0
    9354:	0a000001 	beq	9360 <uart_getc_async+0x18>
        return -1;
    return uart_getc();
    9358:	ebffffdb 	bl	92cc <uart_getc>
    935c:	e8bd8008 	pop	{r3, pc}
    return uart_can_getc();
}

int uart_getc_async(void) { 
    if(!uart_has_data())
        return -1;
    9360:	e3e00000 	mvn	r0, #0
    return uart_getc();
}
    9364:	e8bd8008 	pop	{r3, pc}

00009368 <dev_barrier>:
    9368:	ea000002 	b	9378 <dsb>

0000936c <dmb>:
    936c:	e3a00000 	mov	r0, #0
    9370:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
    9374:	e12fff1e 	bx	lr

00009378 <dsb>:
    9378:	ee070f9a 	mcr	15, 0, r0, cr7, cr10, {4}
    937c:	e12fff1e 	bx	lr

00009380 <put32>:
    9380:	e5801000 	str	r1, [r0]
    9384:	e12fff1e 	bx	lr

00009388 <PUT32>:
    9388:	e5801000 	str	r1, [r0]
    938c:	e12fff1e 	bx	lr

00009390 <put16>:
    9390:	e1c010b0 	strh	r1, [r0]
    9394:	e12fff1e 	bx	lr

00009398 <PUT16>:
    9398:	e1c010b0 	strh	r1, [r0]
    939c:	e12fff1e 	bx	lr

000093a0 <put8>:
    93a0:	e5c01000 	strb	r1, [r0]
    93a4:	e12fff1e 	bx	lr

000093a8 <PUT8>:
    93a8:	e5c01000 	strb	r1, [r0]
    93ac:	e12fff1e 	bx	lr

000093b0 <get32>:
    93b0:	e5900000 	ldr	r0, [r0]
    93b4:	e12fff1e 	bx	lr

000093b8 <GET32>:
    93b8:	e5900000 	ldr	r0, [r0]
    93bc:	e12fff1e 	bx	lr

000093c0 <GETPC>:
    93c0:	e1a0000e 	mov	r0, lr
    93c4:	e12fff1e 	bx	lr

000093c8 <dummy>:
    93c8:	e12fff1e 	bx	lr

000093cc <gpio_set_output>:
volatile unsigned *GPLEV1 = (void*) 0x20200038;
// Part 1 implement gpio_set_on, gpio_set_off, gpio_set_output

// set <pin> to be an output pin.  note: fsel0, fsel1, fsel2 are contiguous in memory,
// so you can use array calculations!
extern inline void gpio_set_output(unsigned pin) {
    93cc:	e92d4038 	push	{r3, r4, r5, lr}
    93d0:	e1a04000 	mov	r4, r0
    // implement this
    // use gpio_fsel0
    
    if (pin >= 32) {
    93d4:	e350001f 	cmp	r0, #31
    93d8:	88bd8038 	pophi	{r3, r4, r5, pc}
        return;
    }
    
    volatile unsigned* gpio_reg;
    
    unsigned reg_select = pin / 10;
    93dc:	e59f30b4 	ldr	r3, [pc, #180]	; 9498 <gpio_set_output+0xcc>
    93e0:	e0832093 	umull	r2, r3, r3, r0
    93e4:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    93e8:	e3530005 	cmp	r3, #5
    93ec:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    93f0:	ea000017 	b	9454 <gpio_set_output+0x88>
    93f4:	0000940c 	andeq	r9, r0, ip, lsl #8
    93f8:	00009418 	andeq	r9, r0, r8, lsl r4
    93fc:	00009424 	andeq	r9, r0, r4, lsr #8
    9400:	00009430 	andeq	r9, r0, r0, lsr r4
    9404:	0000943c 	andeq	r9, r0, ip, lsr r4
    9408:	00009448 	andeq	r9, r0, r8, asr #8
        case 0: {gpio_reg = GPFSEL0; break;}
    940c:	e59f3088 	ldr	r3, [pc, #136]	; 949c <gpio_set_output+0xd0>
    9410:	e5935000 	ldr	r5, [r3]
    9414:	ea00000f 	b	9458 <gpio_set_output+0x8c>
        case 1: {gpio_reg = GPFSEL1; break;}
    9418:	e59f307c 	ldr	r3, [pc, #124]	; 949c <gpio_set_output+0xd0>
    941c:	e5935004 	ldr	r5, [r3, #4]
    9420:	ea00000c 	b	9458 <gpio_set_output+0x8c>
        case 2: {gpio_reg = GPFSEL2; break;}
    9424:	e59f3070 	ldr	r3, [pc, #112]	; 949c <gpio_set_output+0xd0>
    9428:	e5935008 	ldr	r5, [r3, #8]
    942c:	ea000009 	b	9458 <gpio_set_output+0x8c>
        case 3: {gpio_reg = GPFSEL3; break;}
    9430:	e59f3064 	ldr	r3, [pc, #100]	; 949c <gpio_set_output+0xd0>
    9434:	e593500c 	ldr	r5, [r3, #12]
    9438:	ea000006 	b	9458 <gpio_set_output+0x8c>
        case 4: {gpio_reg = GPFSEL4; break;}
    943c:	e59f3058 	ldr	r3, [pc, #88]	; 949c <gpio_set_output+0xd0>
    9440:	e5935010 	ldr	r5, [r3, #16]
    9444:	ea000003 	b	9458 <gpio_set_output+0x8c>
        case 5: {gpio_reg = GPFSEL5; break;}
    9448:	e59f304c 	ldr	r3, [pc, #76]	; 949c <gpio_set_output+0xd0>
    944c:	e5935014 	ldr	r5, [r3, #20]
    9450:	ea000000 	b	9458 <gpio_set_output+0x8c>
        default: gpio_reg = 0x0;
    9454:	e3a05000 	mov	r5, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    9458:	e1a00005 	mov	r0, r5
    945c:	ebffffd3 	bl	93b0 <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    9460:	e59f1030 	ldr	r1, [pc, #48]	; 9498 <gpio_set_output+0xcc>
    9464:	e0813491 	umull	r3, r1, r1, r4
    9468:	e1a011a1 	lsr	r1, r1, #3
    946c:	e0811101 	add	r1, r1, r1, lsl #2
    9470:	e1a01081 	lsl	r1, r1, #1
    9474:	e0611004 	rsb	r1, r1, r4
    9478:	e0811081 	add	r1, r1, r1, lsl #1
    947c:	e3a03007 	mov	r3, #7
    9480:	e1c03113 	bic	r3, r0, r3, lsl r1
    bitmask |= (1 << ((pin % 10) * 3));
    put32(gpio_reg, bitmask);
    9484:	e1a00005 	mov	r0, r5
    9488:	e3a02001 	mov	r2, #1
    948c:	e1831112 	orr	r1, r3, r2, lsl r1
    9490:	ebffffba 	bl	9380 <put32>
    9494:	e8bd8038 	pop	{r3, r4, r5, pc}
    9498:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    949c:	000099e0 	andeq	r9, r0, r0, ror #19

000094a0 <gpio_set_on>:
    
}


// set GPIO <pin> on.
void gpio_set_on(unsigned pin) {
    94a0:	e92d4008 	push	{r3, lr}
    // implement this
    // use gpio_set0
    if (pin >= 32) {
    94a4:	e350001f 	cmp	r0, #31
    94a8:	88bd8008 	pophi	{r3, pc}
    // Get current register value
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPSET0;
    94ac:	959f3020 	ldrls	r3, [pc, #32]	; 94d4 <gpio_set_on+0x34>
    94b0:	95932018 	ldrls	r2, [r3, #24]
        // TODO: why do we not want this statement?
        //bitmask = get32(GPSET0);
    } else {
        gpio_reg = GPSET1;
    94b4:	859f3018 	ldrhi	r3, [pc, #24]	; 94d4 <gpio_set_on+0x34>
    94b8:	8593201c 	ldrhi	r2, [r3, #28]
        //bitmask = get32(GPSET1);
        // TODO: why do we not want this statement?
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    94bc:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    94c0:	e1a00002 	mov	r0, r2
    94c4:	e3a01001 	mov	r1, #1
    94c8:	e1a01311 	lsl	r1, r1, r3
    94cc:	ebffffab 	bl	9380 <put32>
    94d0:	e8bd8008 	pop	{r3, pc}
    94d4:	000099e0 	andeq	r9, r0, r0, ror #19

000094d8 <gpio_set_off>:
}

// set GPIO <pin> off
void gpio_set_off(unsigned pin) {
    94d8:	e92d4008 	push	{r3, lr}
    // implement this
    // use gpio_clr0
    if(pin >= 32) {
    94dc:	e350001f 	cmp	r0, #31
    94e0:	88bd8008 	pophi	{r3, pc}
    }
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPCLR0;
    94e4:	959f3020 	ldrls	r3, [pc, #32]	; 950c <gpio_set_off+0x34>
    94e8:	95932020 	ldrls	r2, [r3, #32]
        //bitmask = get32(GPCLR0);
    } else {
        gpio_reg = GPCLR1;
    94ec:	859f3018 	ldrhi	r3, [pc, #24]	; 950c <gpio_set_off+0x34>
    94f0:	85932024 	ldrhi	r2, [r3, #36]	; 0x24
        //bitmask = get32(GPCLR1);
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    94f4:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    94f8:	e1a00002 	mov	r0, r2
    94fc:	e3a01001 	mov	r1, #1
    9500:	e1a01311 	lsl	r1, r1, r3
    9504:	ebffff9d 	bl	9380 <put32>
    9508:	e8bd8008 	pop	{r3, pc}
    950c:	000099e0 	andeq	r9, r0, r0, ror #19

00009510 <gpio_set_input>:
}

// Part 2: implement gpio_set_input and gpio_read

// set <pin> to input.
void gpio_set_input(unsigned pin) {
    9510:	e92d4038 	push	{r3, r4, r5, lr}
    9514:	e1a04000 	mov	r4, r0
    // implement.
    if(pin >= 32) {
    9518:	e350001f 	cmp	r0, #31
    951c:	88bd8038 	pophi	{r3, r4, r5, pc}
        return;
    }
    
    volatile unsigned* gpio_reg;
    
    unsigned reg_select = pin / 10;
    9520:	e59f30ac 	ldr	r3, [pc, #172]	; 95d4 <gpio_set_input+0xc4>
    9524:	e0832093 	umull	r2, r3, r3, r0
    9528:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    952c:	e3530005 	cmp	r3, #5
    9530:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    9534:	ea000017 	b	9598 <gpio_set_input+0x88>
    9538:	00009550 	andeq	r9, r0, r0, asr r5
    953c:	0000955c 	andeq	r9, r0, ip, asr r5
    9540:	00009568 	andeq	r9, r0, r8, ror #10
    9544:	00009574 	andeq	r9, r0, r4, ror r5
    9548:	00009580 	andeq	r9, r0, r0, lsl #11
    954c:	0000958c 	andeq	r9, r0, ip, lsl #11
        case 0: {gpio_reg = GPFSEL0; break;}
    9550:	e59f3080 	ldr	r3, [pc, #128]	; 95d8 <gpio_set_input+0xc8>
    9554:	e5935000 	ldr	r5, [r3]
    9558:	ea00000f 	b	959c <gpio_set_input+0x8c>
        case 1: {gpio_reg = GPFSEL1; break;}
    955c:	e59f3074 	ldr	r3, [pc, #116]	; 95d8 <gpio_set_input+0xc8>
    9560:	e5935004 	ldr	r5, [r3, #4]
    9564:	ea00000c 	b	959c <gpio_set_input+0x8c>
        case 2: {gpio_reg = GPFSEL2; break;}
    9568:	e59f3068 	ldr	r3, [pc, #104]	; 95d8 <gpio_set_input+0xc8>
    956c:	e5935008 	ldr	r5, [r3, #8]
    9570:	ea000009 	b	959c <gpio_set_input+0x8c>
        case 3: {gpio_reg = GPFSEL3; break;}
    9574:	e59f305c 	ldr	r3, [pc, #92]	; 95d8 <gpio_set_input+0xc8>
    9578:	e593500c 	ldr	r5, [r3, #12]
    957c:	ea000006 	b	959c <gpio_set_input+0x8c>
        case 4: {gpio_reg = GPFSEL4; break;}
    9580:	e59f3050 	ldr	r3, [pc, #80]	; 95d8 <gpio_set_input+0xc8>
    9584:	e5935010 	ldr	r5, [r3, #16]
    9588:	ea000003 	b	959c <gpio_set_input+0x8c>
        case 5: {gpio_reg = GPFSEL5; break;}
    958c:	e59f3044 	ldr	r3, [pc, #68]	; 95d8 <gpio_set_input+0xc8>
    9590:	e5935014 	ldr	r5, [r3, #20]
    9594:	ea000000 	b	959c <gpio_set_input+0x8c>
        default: gpio_reg = 0x0;
    9598:	e3a05000 	mov	r5, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    959c:	e1a00005 	mov	r0, r5
    95a0:	ebffff82 	bl	93b0 <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    95a4:	e59f1028 	ldr	r1, [pc, #40]	; 95d4 <gpio_set_input+0xc4>
    95a8:	e0813491 	umull	r3, r1, r1, r4
    95ac:	e1a011a1 	lsr	r1, r1, #3
    95b0:	e0811101 	add	r1, r1, r1, lsl #2
    95b4:	e1a01081 	lsl	r1, r1, #1
    95b8:	e0611004 	rsb	r1, r1, r4
    95bc:	e0811081 	add	r1, r1, r1, lsl #1
    95c0:	e3a03007 	mov	r3, #7
    95c4:	e1c01113 	bic	r1, r0, r3, lsl r1
    put32(gpio_reg, bitmask);
    95c8:	e1a00005 	mov	r0, r5
    95cc:	ebffff6b 	bl	9380 <put32>
    95d0:	e8bd8038 	pop	{r3, r4, r5, pc}
    95d4:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    95d8:	000099e0 	andeq	r9, r0, r0, ror #19

000095dc <gpio_read>:
    
    
}

// return the value of <pin>
int gpio_read(unsigned pin) {
    95dc:	e92d4010 	push	{r4, lr}
    95e0:	e1a04000 	mov	r4, r0
    
    if(pin >= 32) {
    95e4:	e350001f 	cmp	r0, #31
    95e8:	8a00000b 	bhi	961c <gpio_read+0x40>
        return -1;
    }
    
    unsigned v = 0;
    
    if (pin <= 31){
    95ec:	8a000003 	bhi	9600 <gpio_read+0x24>
        v = get32(GPLEV0);
    95f0:	e59f302c 	ldr	r3, [pc, #44]	; 9624 <gpio_read+0x48>
    95f4:	e5930028 	ldr	r0, [r3, #40]	; 0x28
    95f8:	ebffff6c 	bl	93b0 <get32>
    95fc:	ea000002 	b	960c <gpio_read+0x30>
    } else {
        v = get32(GPLEV1);
    9600:	e59f301c 	ldr	r3, [pc, #28]	; 9624 <gpio_read+0x48>
    9604:	e593002c 	ldr	r0, [r3, #44]	; 0x2c
    9608:	ebffff68 	bl	93b0 <get32>
    }
    
    return (v & (1 << (pin % 32)));
    960c:	e204401f 	and	r4, r4, #31
    9610:	e3a03001 	mov	r3, #1
    9614:	e0000413 	and	r0, r0, r3, lsl r4
    9618:	e8bd8010 	pop	{r4, pc}

// return the value of <pin>
int gpio_read(unsigned pin) {
    
    if(pin >= 32) {
        return -1;
    961c:	e3e00000 	mvn	r0, #0
    } else {
        v = get32(GPLEV1);
    }
    
    return (v & (1 << (pin % 32)));
}
    9620:	e8bd8010 	pop	{r4, pc}
    9624:	000099e0 	andeq	r9, r0, r0, ror #19

00009628 <gpio_write>:

// set <pin> to <v> (v \in {0,1})
void gpio_write(unsigned pin, unsigned v) {
    9628:	e92d4008 	push	{r3, lr}
    
    if(pin >= 32) {
    962c:	e350001f 	cmp	r0, #31
    9630:	88bd8008 	pophi	{r3, pc}
        return;
    }
    
    if(v)
    9634:	e3510000 	cmp	r1, #0
    9638:	0a000001 	beq	9644 <gpio_write+0x1c>
        gpio_set_on(pin);
    963c:	ebffff97 	bl	94a0 <gpio_set_on>
    9640:	e8bd8008 	pop	{r3, pc}
    else
        gpio_set_off(pin);
    9644:	ebffffa3 	bl	94d8 <gpio_set_off>
    9648:	e8bd8008 	pop	{r3, pc}

0000964c <gpio_set_function>:
}

void gpio_set_function(unsigned pin, gpio_func_t func) {
    964c:	e92d4070 	push	{r4, r5, r6, lr}
    9650:	e1a04000 	mov	r4, r0
    9654:	e1a05001 	mov	r5, r1
    // implement this
    // use gpio_fsel0
    
    if (pin >= 32 || func >= 8) {
    9658:	e3510007 	cmp	r1, #7
    965c:	9350001f 	cmpls	r0, #31
    9660:	88bd8070 	pophi	{r4, r5, r6, pc}
        return;
    }

    volatile unsigned* gpio_reg;
    unsigned reg_select = pin / 10;
    9664:	e59f30b0 	ldr	r3, [pc, #176]	; 971c <gpio_set_function+0xd0>
    9668:	e0832093 	umull	r2, r3, r3, r0
    966c:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    9670:	e3530005 	cmp	r3, #5
    9674:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    9678:	ea000017 	b	96dc <gpio_set_function+0x90>
    967c:	00009694 	muleq	r0, r4, r6
    9680:	000096a0 	andeq	r9, r0, r0, lsr #13
    9684:	000096ac 	andeq	r9, r0, ip, lsr #13
    9688:	000096b8 			; <UNDEFINED> instruction: 0x000096b8
    968c:	000096c4 	andeq	r9, r0, r4, asr #13
    9690:	000096d0 	ldrdeq	r9, [r0], -r0
        case 0: {gpio_reg = GPFSEL0; break;}
    9694:	e59f3084 	ldr	r3, [pc, #132]	; 9720 <gpio_set_function+0xd4>
    9698:	e5936000 	ldr	r6, [r3]
    969c:	ea00000f 	b	96e0 <gpio_set_function+0x94>
        case 1: {gpio_reg = GPFSEL1; break;}
    96a0:	e59f3078 	ldr	r3, [pc, #120]	; 9720 <gpio_set_function+0xd4>
    96a4:	e5936004 	ldr	r6, [r3, #4]
    96a8:	ea00000c 	b	96e0 <gpio_set_function+0x94>
        case 2: {gpio_reg = GPFSEL2; break;}
    96ac:	e59f306c 	ldr	r3, [pc, #108]	; 9720 <gpio_set_function+0xd4>
    96b0:	e5936008 	ldr	r6, [r3, #8]
    96b4:	ea000009 	b	96e0 <gpio_set_function+0x94>
        case 3: {gpio_reg = GPFSEL3; break;}
    96b8:	e59f3060 	ldr	r3, [pc, #96]	; 9720 <gpio_set_function+0xd4>
    96bc:	e593600c 	ldr	r6, [r3, #12]
    96c0:	ea000006 	b	96e0 <gpio_set_function+0x94>
        case 4: {gpio_reg = GPFSEL4; break;}
    96c4:	e59f3054 	ldr	r3, [pc, #84]	; 9720 <gpio_set_function+0xd4>
    96c8:	e5936010 	ldr	r6, [r3, #16]
    96cc:	ea000003 	b	96e0 <gpio_set_function+0x94>
        case 5: {gpio_reg = GPFSEL5; break;}
    96d0:	e59f3048 	ldr	r3, [pc, #72]	; 9720 <gpio_set_function+0xd4>
    96d4:	e5936014 	ldr	r6, [r3, #20]
    96d8:	ea000000 	b	96e0 <gpio_set_function+0x94>
        default: gpio_reg = 0x0;
    96dc:	e3a06000 	mov	r6, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    96e0:	e1a00006 	mov	r0, r6
    96e4:	ebffff31 	bl	93b0 <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    96e8:	e59f302c 	ldr	r3, [pc, #44]	; 971c <gpio_set_function+0xd0>
    96ec:	e0832493 	umull	r2, r3, r3, r4
    96f0:	e1a031a3 	lsr	r3, r3, #3
    96f4:	e0833103 	add	r3, r3, r3, lsl #2
    96f8:	e1a03083 	lsl	r3, r3, #1
    96fc:	e0633004 	rsb	r3, r3, r4
    9700:	e0833083 	add	r3, r3, r3, lsl #1
    9704:	e3a01007 	mov	r1, #7
    9708:	e1c01311 	bic	r1, r0, r1, lsl r3
    bitmask |= (func << ((pin % 10) * 3));
    put32(gpio_reg, bitmask);
    970c:	e1a00006 	mov	r0, r6
    9710:	e1811315 	orr	r1, r1, r5, lsl r3
    9714:	ebffff19 	bl	9380 <put32>
    9718:	e8bd8070 	pop	{r4, r5, r6, pc}
    971c:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    9720:	000099e0 	andeq	r9, r0, r0, ror #19

00009724 <is_gpio_int>:
// call this routine (you must implement) to setup the right GPIO event.
// as with setting up functions, you should bitwise-or in the value for the
// pin you are setting with the existing pin values.  (otherwise you will
// lose their configuration).  you also need to enable the right IRQ.   make
// sure to use device barriers!!
int is_gpio_int(unsigned gpio_int) {
    9724:	e92d4008 	push	{r3, lr}
    // assert(gpio_int >= GPIO_INT0 && gpio_int <= GPIO_INT3);

    if(get32(IRQ_PENDING_2) > 0) {
    9728:	e59f301c 	ldr	r3, [pc, #28]	; 974c <is_gpio_int+0x28>
    972c:	e5930030 	ldr	r0, [r3, #48]	; 0x30
    9730:	ebffff1e 	bl	93b0 <get32>
    9734:	e3500000 	cmp	r0, #0
    9738:	0a000001 	beq	9744 <is_gpio_int+0x20>
        return 1;
    973c:	e3a00001 	mov	r0, #1
    9740:	e8bd8008 	pop	{r3, pc}
    }
    return 0;
    9744:	e3a00000 	mov	r0, #0
}
    9748:	e8bd8008 	pop	{r3, pc}
    974c:	000099e0 	andeq	r9, r0, r0, ror #19

00009750 <gpio_int_rising_edge>:
// p97 set to detect rising edge (0->1) on <pin>.
// as the broadcom doc states, it  detects by sampling based on the clock.
// it looks for "011" (low, hi, hi) to suppress noise.  i.e., its triggered only
// *after* a 1 reading has been sampled twice, so there will be delay.
// if you want lower latency, you should us async rising edge (p99)
void gpio_int_rising_edge(unsigned pin) {
    9750:	e92d4038 	push	{r3, r4, r5, lr}
    9754:	e1a04000 	mov	r4, r0
    
    
    if(pin >= 32) {
    9758:	e350001f 	cmp	r0, #31
    975c:	88bd8038 	pophi	{r3, r4, r5, pc}
        return;
    }
    
    dev_barrier();
    9760:	ebffff00 	bl	9368 <dev_barrier>
    if(pin <= 31) {
    9764:	e354001f 	cmp	r4, #31
    9768:	8a000007 	bhi	978c <gpio_int_rising_edge+0x3c>
        unsigned bitmask = get32(GPREN0);
    976c:	e59f505c 	ldr	r5, [pc, #92]	; 97d0 <gpio_int_rising_edge+0x80>
    9770:	e5950034 	ldr	r0, [r5, #52]	; 0x34
    9774:	ebffff0d 	bl	93b0 <get32>
        bitmask |= 1 << pin;
    9778:	e3a01001 	mov	r1, #1
    977c:	e1801411 	orr	r1, r0, r1, lsl r4
        put32(GPREN0, bitmask);
    9780:	e5950034 	ldr	r0, [r5, #52]	; 0x34
    9784:	ebfffefd 	bl	9380 <put32>
    9788:	ea000007 	b	97ac <gpio_int_rising_edge+0x5c>
    } else {
        unsigned bitmask = get32(GPREN1);
    978c:	e59f503c 	ldr	r5, [pc, #60]	; 97d0 <gpio_int_rising_edge+0x80>
    9790:	e5950038 	ldr	r0, [r5, #56]	; 0x38
    9794:	ebffff05 	bl	93b0 <get32>
        bitmask |= 1 << (pin % 32);
    9798:	e204401f 	and	r4, r4, #31
    979c:	e3a01001 	mov	r1, #1
    97a0:	e1801411 	orr	r1, r0, r1, lsl r4
        put32(GPREN1, bitmask);
    97a4:	e5950038 	ldr	r0, [r5, #56]	; 0x38
    97a8:	ebfffef4 	bl	9380 <put32>
    }
    dev_barrier();
    97ac:	ebfffeed 	bl	9368 <dev_barrier>
    unsigned int_mask = get32(ENABLE_IRQS_2);
    97b0:	e59f4018 	ldr	r4, [pc, #24]	; 97d0 <gpio_int_rising_edge+0x80>
    97b4:	e594003c 	ldr	r0, [r4, #60]	; 0x3c
    97b8:	ebfffefc 	bl	93b0 <get32>
    int_mask |= 1 << (49 - 32);
    97bc:	e3801802 	orr	r1, r0, #131072	; 0x20000
    put32(ENABLE_IRQS_2, int_mask);
    97c0:	e594003c 	ldr	r0, [r4, #60]	; 0x3c
    97c4:	ebfffeed 	bl	9380 <put32>
    dev_barrier();
    97c8:	ebfffee6 	bl	9368 <dev_barrier>
    97cc:	e8bd8038 	pop	{r3, r4, r5, pc}
    97d0:	000099e0 	andeq	r9, r0, r0, ror #19

000097d4 <gpio_int_falling_edge>:
// p98: detect falling edge (1->0).  sampled using the system clock.
// similarly to rising edge detection, it suppresses noise by looking for
// "100" --- i.e., is triggered after two readings of "0" and so the
// interrupt is delayed two clock cycles.   if you want  lower latency,
// you should use async falling edge. (p99)
void gpio_int_falling_edge(unsigned pin) {
    97d4:	e92d4038 	push	{r3, r4, r5, lr}
    97d8:	e1a04000 	mov	r4, r0
    
    if(pin >= 32) {
    97dc:	e350001f 	cmp	r0, #31
    97e0:	88bd8038 	pophi	{r3, r4, r5, pc}
        return;
    }
    
    dev_barrier();
    97e4:	ebfffedf 	bl	9368 <dev_barrier>
    if(pin <= 31) {
    97e8:	e354001f 	cmp	r4, #31
    97ec:	8a000007 	bhi	9810 <gpio_int_falling_edge+0x3c>
        unsigned bitmask = get32(GPFEN0);
    97f0:	e59f505c 	ldr	r5, [pc, #92]	; 9854 <gpio_int_falling_edge+0x80>
    97f4:	e5950040 	ldr	r0, [r5, #64]	; 0x40
    97f8:	ebfffeec 	bl	93b0 <get32>
        bitmask |= 1 << pin;
    97fc:	e3a01001 	mov	r1, #1
    9800:	e1801411 	orr	r1, r0, r1, lsl r4
        put32(GPFEN0, bitmask);
    9804:	e5950040 	ldr	r0, [r5, #64]	; 0x40
    9808:	ebfffedc 	bl	9380 <put32>
    980c:	ea000007 	b	9830 <gpio_int_falling_edge+0x5c>
    } else {
        unsigned bitmask = get32(GPFEN1);
    9810:	e59f503c 	ldr	r5, [pc, #60]	; 9854 <gpio_int_falling_edge+0x80>
    9814:	e5950044 	ldr	r0, [r5, #68]	; 0x44
    9818:	ebfffee4 	bl	93b0 <get32>
        bitmask |= 1 << (pin % 32);
    981c:	e204401f 	and	r4, r4, #31
    9820:	e3a01001 	mov	r1, #1
    9824:	e1801411 	orr	r1, r0, r1, lsl r4
        put32(GPFEN1, bitmask);
    9828:	e5950044 	ldr	r0, [r5, #68]	; 0x44
    982c:	ebfffed3 	bl	9380 <put32>
    }
    dev_barrier();
    9830:	ebfffecc 	bl	9368 <dev_barrier>
    unsigned int_mask = get32(ENABLE_IRQS_2);
    9834:	e59f4018 	ldr	r4, [pc, #24]	; 9854 <gpio_int_falling_edge+0x80>
    9838:	e594003c 	ldr	r0, [r4, #60]	; 0x3c
    983c:	ebfffedb 	bl	93b0 <get32>
    int_mask |= 1 << (52 -32);
    9840:	e3801601 	orr	r1, r0, #1048576	; 0x100000
    put32(ENABLE_IRQS_2, int_mask);
    9844:	e594003c 	ldr	r0, [r4, #60]	; 0x3c
    9848:	ebfffecc 	bl	9380 <put32>
    dev_barrier();
    984c:	ebfffec5 	bl	9368 <dev_barrier>
    9850:	e8bd8038 	pop	{r3, r4, r5, pc}
    9854:	000099e0 	andeq	r9, r0, r0, ror #19

00009858 <gpio_event_detected>:
}

// p96: a 1<<pin is set in EVENT_DETECT if <pin> triggered an interrupt.
// if you configure multiple events to lead to interrupts, you will have to
// read the pin to determine which caused it.
int gpio_event_detected(unsigned pin) {
    9858:	e92d4010 	push	{r4, lr}
    985c:	e1a04000 	mov	r4, r0
    if(pin >= 32) {
    9860:	e350001f 	cmp	r0, #31
    9864:	8a000019 	bhi	98d0 <gpio_event_detected+0x78>
        return -1;
    }
    
    dev_barrier();
    9868:	ebfffebe 	bl	9368 <dev_barrier>
    if(pin <= 31) {
    986c:	e354001f 	cmp	r4, #31
    9870:	8a000008 	bhi	9898 <gpio_event_detected+0x40>
        unsigned reg_stat = get32(GPEDS0) & (1 << pin);
    9874:	e59f305c 	ldr	r3, [pc, #92]	; 98d8 <gpio_event_detected+0x80>
    9878:	e5930048 	ldr	r0, [r3, #72]	; 0x48
    987c:	ebfffecb 	bl	93b0 <get32>
        if(reg_stat > 0) {dev_barrier(); return 1;}
    9880:	e3a03001 	mov	r3, #1
    9884:	e0103413 	ands	r3, r0, r3, lsl r4
    9888:	0a00000d 	beq	98c4 <gpio_event_detected+0x6c>
    988c:	ebfffeb5 	bl	9368 <dev_barrier>
    9890:	e3a00001 	mov	r0, #1
    9894:	e8bd8010 	pop	{r4, pc}
    } else {
        unsigned reg_stat = get32(GPEDS1) & (1 << pin);
    9898:	e59f3038 	ldr	r3, [pc, #56]	; 98d8 <gpio_event_detected+0x80>
    989c:	e593004c 	ldr	r0, [r3, #76]	; 0x4c
    98a0:	ebfffec2 	bl	93b0 <get32>
    98a4:	e3a03001 	mov	r3, #1
    98a8:	e0004413 	and	r4, r0, r3, lsl r4
        dev_barrier();
    98ac:	ebfffead 	bl	9368 <dev_barrier>
        if(reg_stat > 0) {dev_barrier(); return 1;}
    98b0:	e3540000 	cmp	r4, #0
    98b4:	0a000002 	beq	98c4 <gpio_event_detected+0x6c>
    98b8:	ebfffeaa 	bl	9368 <dev_barrier>
    98bc:	e3a00001 	mov	r0, #1
    98c0:	e8bd8010 	pop	{r4, pc}
    }
    dev_barrier();
    98c4:	ebfffea7 	bl	9368 <dev_barrier>
    return 0;
    98c8:	e3a00000 	mov	r0, #0
    98cc:	e8bd8010 	pop	{r4, pc}
// p96: a 1<<pin is set in EVENT_DETECT if <pin> triggered an interrupt.
// if you configure multiple events to lead to interrupts, you will have to
// read the pin to determine which caused it.
int gpio_event_detected(unsigned pin) {
    if(pin >= 32) {
        return -1;
    98d0:	e3e00000 	mvn	r0, #0
        dev_barrier();
        if(reg_stat > 0) {dev_barrier(); return 1;}
    }
    dev_barrier();
    return 0;
}
    98d4:	e8bd8010 	pop	{r4, pc}
    98d8:	000099e0 	andeq	r9, r0, r0, ror #19

000098dc <gpio_event_clear>:

// p96: have to write a 1 to the pin to clear the event.
void gpio_event_clear(unsigned pin) {
    98dc:	e92d4010 	push	{r4, lr}
    98e0:	e1a04000 	mov	r4, r0
    
    if(pin >= 32) {
    98e4:	e350001f 	cmp	r0, #31
    98e8:	88bd8010 	pophi	{r4, pc}
        return;
    }
    
    dev_barrier();
    98ec:	ebfffe9d 	bl	9368 <dev_barrier>
    if(pin <= 31) {
    98f0:	e354001f 	cmp	r4, #31
    98f4:	8a000005 	bhi	9910 <gpio_event_clear+0x34>
        put32(GPEDS0, 1 << pin);
    98f8:	e59f3030 	ldr	r3, [pc, #48]	; 9930 <gpio_event_clear+0x54>
    98fc:	e5930048 	ldr	r0, [r3, #72]	; 0x48
    9900:	e3a01001 	mov	r1, #1
    9904:	e1a01411 	lsl	r1, r1, r4
    9908:	ebfffe9c 	bl	9380 <put32>
    990c:	ea000005 	b	9928 <gpio_event_clear+0x4c>
    } else {
        put32(GPEDS1, 1 << (pin % 32));
    9910:	e204401f 	and	r4, r4, #31
    9914:	e59f3014 	ldr	r3, [pc, #20]	; 9930 <gpio_event_clear+0x54>
    9918:	e593004c 	ldr	r0, [r3, #76]	; 0x4c
    991c:	e3a01001 	mov	r1, #1
    9920:	e1a01411 	lsl	r1, r1, r4
    9924:	ebfffe95 	bl	9380 <put32>
    }
    dev_barrier();
    9928:	ebfffe8e 	bl	9368 <dev_barrier>
    992c:	e8bd8010 	pop	{r4, pc}
    9930:	000099e0 	andeq	r9, r0, r0, ror #19

00009934 <memset>:
#include <string.h>

void *memset(void *_p, int c, size_t n) {
    char *p = _p, *e = p + n;
    9934:	e0802002 	add	r2, r0, r2
    9938:	e1a03000 	mov	r3, r0

    while(p < e)
    993c:	ea000001 	b	9948 <memset+0x14>
        *p++ = c;
    9940:	e5c31000 	strb	r1, [r3]
    9944:	e2833001 	add	r3, r3, #1
#include <string.h>

void *memset(void *_p, int c, size_t n) {
    char *p = _p, *e = p + n;

    while(p < e)
    9948:	e1530002 	cmp	r3, r2
    994c:	3afffffb 	bcc	9940 <memset+0xc>
        *p++ = c;
    return _p;
}
    9950:	e12fff1e 	bx	lr

00009954 <cb_new>:
// trivial routines to access control block.
#include "rpi.h"
#include "control-block.h"

control_blk_t *cb_new(void) {
    9954:	e92d4008 	push	{r3, lr}
    control_blk_t *c = CTRL_BLK_ADDR;
    memset(c, 0, sizeof c);
    9958:	e3a00409 	mov	r0, #150994944	; 0x9000000
    995c:	e3a01000 	mov	r1, #0
    9960:	e3a02004 	mov	r2, #4
    9964:	ebfffff2 	bl	9934 <memset>
    c->magic = CTRL_BLK_MAGIC;
    9968:	e3a00409 	mov	r0, #150994944	; 0x9000000
    996c:	e59f3004 	ldr	r3, [pc, #4]	; 9978 <cb_new+0x24>
    9970:	e5803000 	str	r3, [r0]
    return c;
}
    9974:	e8bd8008 	pop	{r3, pc}
    9978:	12345678 	eorsne	r5, r4, #120, 12	; 0x7800000

0000997c <cb_get_block>:

control_blk_t *cb_get_block(void) {
    control_blk_t *c = CTRL_BLK_ADDR;
    if(c->magic != CTRL_BLK_MAGIC)
    997c:	e3a03409 	mov	r3, #150994944	; 0x9000000
    9980:	e5932000 	ldr	r2, [r3]
    9984:	e59f3014 	ldr	r3, [pc, #20]	; 99a0 <cb_get_block+0x24>
    9988:	e1520003 	cmp	r2, r3
    998c:	0a000001 	beq	9998 <cb_get_block+0x1c>
        return 0;
    9990:	e3a00000 	mov	r0, #0
    9994:	e12fff1e 	bx	lr
    return c;
    9998:	e3a00409 	mov	r0, #150994944	; 0x9000000
}
    999c:	e12fff1e 	bx	lr
    99a0:	12345678 	eorsne	r5, r4, #120, 12	; 0x7800000

Disassembly of section .data:

000099a4 <rpi_putchar>:
    99a4:	000082d0 	ldrdeq	r8, [r0], -r0

000099a8 <putk>:
    99a8:	0000830c 	andeq	r8, r0, ip, lsl #6

000099ac <AUX_ENABLES>:
    99ac:	20215004 	eorcs	r5, r1, r4

000099b0 <AUX_MU_CNTL_REG>:
    99b0:	20215060 	eorcs	r5, r1, r0, rrx

000099b4 <AUX_MU_IER_REG>:
    99b4:	20215044 	eorcs	r5, r1, r4, asr #32

000099b8 <AUX_MU_IIR_REG>:
    99b8:	20215048 	eorcs	r5, r1, r8, asr #32

000099bc <AUX_MU_LCR_REG>:
    99bc:	2021504c 	eorcs	r5, r1, ip, asr #32

000099c0 <AUX_MU_BAUD_REG>:
    99c0:	20215068 	eorcs	r5, r1, r8, rrx

000099c4 <AUX_MU_LSR_REG>:
    99c4:	20215054 	eorcs	r5, r1, r4, asr r0

000099c8 <AUX_MU_IO_REG>:
    99c8:	20215040 	eorcs	r5, r1, r0, asr #32

000099cc <AUX_MU_STAT_REG>:
    99cc:	20215064 	eorcs	r5, r1, r4, rrx

000099d0 <AUX_MU_SCRATCH>:
    99d0:	2021505c 	eorcs	r5, r1, ip, asr r0

000099d4 <AUX_MU_MSR_REG>:
    99d4:	20215058 	eorcs	r5, r1, r8, asr r0

000099d8 <AUX_MU_MCR_REG>:
    99d8:	20215050 	eorcs	r5, r1, r0, asr r0

000099dc <AUX_IRQ>:
    99dc:	20215000 	eorcs	r5, r1, r0

000099e0 <GPFSEL0>:
    99e0:	20200000 	eorcs	r0, r0, r0

000099e4 <GPFSEL1>:
    99e4:	20200004 	eorcs	r0, r0, r4

000099e8 <GPFSEL2>:
    99e8:	20200008 	eorcs	r0, r0, r8

000099ec <GPFSEL3>:
    99ec:	2020000c 	eorcs	r0, r0, ip

000099f0 <GPFSEL4>:
    99f0:	20200010 	eorcs	r0, r0, r0, lsl r0

000099f4 <GPFSEL5>:
    99f4:	20200014 	eorcs	r0, r0, r4, lsl r0

000099f8 <GPSET0>:
    99f8:	2020001c 	eorcs	r0, r0, ip, lsl r0

000099fc <GPSET1>:
    99fc:	20200020 	eorcs	r0, r0, r0, lsr #32

00009a00 <GPCLR0>:
    9a00:	20200028 	eorcs	r0, r0, r8, lsr #32

00009a04 <GPCLR1>:
    9a04:	2020002c 	eorcs	r0, r0, ip, lsr #32

00009a08 <GPLEV0>:
    9a08:	20200034 	eorcs	r0, r0, r4, lsr r0

00009a0c <GPLEV1>:
    9a0c:	20200038 	eorcs	r0, r0, r8, lsr r0

00009a10 <IRQ_PENDING_2>:
    9a10:	2000b208 	andcs	fp, r0, r8, lsl #4

00009a14 <GPREN0>:
    9a14:	2020004c 	eorcs	r0, r0, ip, asr #32

00009a18 <GPREN1>:
    9a18:	20200050 	eorcs	r0, r0, r0, asr r0

00009a1c <ENABLE_IRQS_2>:
    9a1c:	2000b214 	andcs	fp, r0, r4, lsl r2

00009a20 <GPFEN0>:
    9a20:	20200058 	eorcs	r0, r0, r8, asr r0

00009a24 <GPFEN1>:
    9a24:	2020005c 	eorcs	r0, r0, ip, asr r0

00009a28 <GPEDS0>:
    9a28:	20200040 	eorcs	r0, r0, r0, asr #32

00009a2c <GPEDS1>:
    9a2c:	20200044 	eorcs	r0, r0, r4, asr #32

00009a30 <IRQ_PENDING_1>:
    9a30:	2000b204 	andcs	fp, r0, r4, lsl #4

00009a34 <gpio_clr0>:
    9a34:	20200028 	eorcs	r0, r0, r8, lsr #32

00009a38 <gpio_set0>:
    9a38:	2020001c 	eorcs	r0, r0, ip, lsl r0

00009a3c <gpio_fsel0>:
    9a3c:	20200000 	eorcs	r0, r0, r0

Disassembly of section .rodata:

00009a40 <__FUNCTION__.4214>:
    9a40:	6d746f6e 	ldclvs	15, cr6, [r4, #-440]!	; 0xfffffe48
    9a44:	006e6961 	rsbeq	r6, lr, r1, ror #18

00009a48 <__FUNCTION__.4218>:
    9a48:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    9a4c:	6e615f74 	mcrvs	15, 3, r5, cr1, cr4, {3}
    9a50:	69645f64 	stmdbvs	r4!, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    9a54:	00000065 	andeq	r0, r0, r5, rrx
    9a58:	2d2d0a0a 	vpushcs	{s0-s9}
    9a5c:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    9a60:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    9a64:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    9a68:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    9a6c:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    9a70:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    9a74:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    9a78:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    9a7c:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    9a80:	0a2d2d2d 	beq	b54f3c <__bss_end__+0xb4ab74>
    9a84:	00000000 	andeq	r0, r0, r0
    9a88:	74726150 	ldrbtvc	r6, [r2], #-336	; 0x150
    9a8c:	61203a31 	teqvs	r0, r1, lsr sl
    9a90:	74756f62 	ldrbtvc	r6, [r5], #-3938	; 0xf62
    9a94:	206f7420 	rsbcs	r7, pc, r0, lsr #8
    9a98:	69777363 	ldmdbvs	r7!, {r0, r1, r5, r6, r8, r9, ip, sp, lr}^
    9a9c:	28686374 	stmdacs	r8!, {r2, r4, r5, r6, r8, r9, sp, lr}^
    9aa0:	2c646c6f 	stclcs	12, cr6, [r4], #-444	; 0xfffffe44
    9aa4:	29646c6f 	stmdbcs	r4!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
    9aa8:	0000000a 	andeq	r0, r0, sl
    9aac:	6b726f77 	blvs	1ca5890 <__bss_end__+0x1c9b4c8>
    9ab0:	203a6465 	eorscs	r6, sl, r5, ror #8
    9ab4:	6e6e6f67 	cdpvs	15, 6, cr6, cr14, cr7, {3}
    9ab8:	6f642061 	svcvs	0x00642061
    9abc:	6f6c6120 	svcvs	0x006c6120
    9ac0:	666f2074 			; <UNDEFINED> instruction: 0x666f2074
    9ac4:	77736320 	ldrbvc	r6, [r3, -r0, lsr #6]!
    9ac8:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    9acc:	000a7365 	andeq	r7, sl, r5, ror #6
    9ad0:	74726150 	ldrbtvc	r6, [r2], #-336	; 0x150
    9ad4:	53203a31 	teqpl	r0, #200704	; 0x31000
    9ad8:	45434355 	strbmi	r4, [r3, #-853]	; 0x355
    9adc:	000a5353 	andeq	r5, sl, r3, asr r3
    9ae0:	74726150 	ldrbtvc	r6, [r2], #-336	; 0x150
    9ae4:	203a3220 	eorscs	r3, sl, r0, lsr #4
    9ae8:	6e6e6f67 	cdpvs	15, 6, cr6, cr14, cr7, {3}
    9aec:	6f642061 	svcvs	0x00642061
    9af0:	6d697420 	cfstrdvs	mvd7, [r9, #-128]!	; 0xffffff80
    9af4:	72742065 	rsbsvc	r2, r4, #101	; 0x65
    9af8:	6c657661 	stclvs	6, cr7, [r5], #-388	; 0xfffffe7c
    9afc:	0000000a 	andeq	r0, r0, sl
    9b00:	6f666562 	svcvs	0x00666562
    9b04:	63206572 	teqvs	r0, #478150656	; 0x1c800000
    9b08:	74697773 	strbtvc	r7, [r9], #-1907	; 0x773
    9b0c:	63286863 	teqvs	r8, #6488064	; 0x630000
    9b10:	2974706b 	ldmdbcs	r4!, {r0, r1, r3, r5, r6, ip, sp, lr}^
    9b14:	0000000a 	andeq	r0, r0, sl
    9b18:	65746661 	ldrbvs	r6, [r4, #-1633]!	; 0x661
    9b1c:	73632072 	cmnvc	r3, #114	; 0x72
    9b20:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
    9b24:	6b632868 	blvs	18d3ccc <__bss_end__+0x18c9904>
    9b28:	0a297470 	beq	a66cf0 <__bss_end__+0xa5c928>
    9b2c:	00000000 	andeq	r0, r0, r0
    9b30:	656e6f64 	strbvs	r6, [lr, #-3940]!	; 0xf64
    9b34:	63202021 	teqvs	r0, #33	; 0x21
    9b38:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    9b3c:	0a64253d 	beq	1913038 <__bss_end__+0x1908c70>
    9b40:	00000000 	andeq	r0, r0, r0
    9b44:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9b48:	73253a43 	teqvc	r5, #274432	; 0x43000
    9b4c:	3a73253a 	bcc	1cd303c <__bss_end__+0x1cc8c74>
    9b50:	2a3a6425 	bcs	ea2bec <__bss_end__+0xe98824>
    9b54:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    9b58:	3d3d2074 	ldccc	0, cr2, [sp, #-464]!	; 0xfffffe30
    9b5c:	000a3420 	andeq	r3, sl, r0, lsr #8
    9b60:	65742d33 	ldrbvs	r2, [r4, #-3379]!	; 0xd33
    9b64:	632d7473 	teqvs	sp, #1929379840	; 0x73000000
    9b68:	74697773 	strbtvc	r7, [r9], #-1907	; 0x773
    9b6c:	632e6863 	teqvs	lr, #6488064	; 0x630000
    9b70:	00000000 	andeq	r0, r0, r0
    9b74:	74726150 	ldrbtvc	r6, [r2], #-336	; 0x150
    9b78:	53203a32 	teqpl	r0, #204800	; 0x32000
    9b7c:	45434355 	strbmi	r4, [r3, #-853]	; 0x355
    9b80:	0a215353 	beq	85e8d4 <__bss_end__+0x85450c>
    9b84:	00000000 	andeq	r0, r0, r0
    9b88:	6e696f67 	cdpvs	15, 6, cr6, cr9, cr7, {3}
    9b8c:	6f742067 	svcvs	0x00742067
    9b90:	6d697420 	cfstrdvs	mvd7, [r9, #-128]!	; 0xffffff80
    9b94:	72742065 	rsbsvc	r2, r4, #101	; 0x65
    9b98:	6c657661 	stclvs	6, cr7, [r5], #-388	; 0xfffffe7c
    9b9c:	6e63203a 	mcrvs	0, 3, r2, cr3, cr10, {1}
    9ba0:	203d2074 	eorscs	r2, sp, r4, ror r0
    9ba4:	000a6425 	andeq	r6, sl, r5, lsr #8
    9ba8:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9bac:	73253a43 	teqvc	r5, #274432	; 0x43000
    9bb0:	3a73253a 	bcc	1cd30a0 <__bss_end__+0x1cc8cd8>
    9bb4:	493a6425 	ldmdbmi	sl!, {r0, r2, r5, sl, sp, lr}
    9bb8:	534f504d 	movtpl	r5, #61517	; 0xf04d
    9bbc:	4c424953 	mcrrmi	9, 5, r4, r2, cr3
    9bc0:	73203a45 	teqvc	r0, #282624	; 0x45000
    9bc4:	6c756f68 	ldclvs	15, cr6, [r5], #-416	; 0xfffffe60
    9bc8:	6f6e2064 	svcvs	0x006e2064
    9bcc:	65722074 	ldrbvs	r2, [r2, #-116]!	; 0x74
    9bd0:	20686361 	rsbcs	r6, r8, r1, ror #6
    9bd4:	73696874 	cmnvc	r9, #116, 16	; 0x740000
    9bd8:	00000a0a 	andeq	r0, r0, sl, lsl #20
    9bdc:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9be0:	73253a43 	teqvc	r5, #274432	; 0x43000
    9be4:	3a73253a 	bcc	1cd30d4 <__bss_end__+0x1cc8d0c>
    9be8:	733a6425 	teqvc	sl, #620756992	; 0x25000000
    9bec:	6c756f68 	ldclvs	15, cr6, [r5], #-416	; 0xfffffe60
    9bf0:	6f6e2064 	svcvs	0x006e2064
    9bf4:	61632074 	smcvs	12804	; 0x3204
    9bf8:	0a0a6c6c 	beq	2a4db0 <__bss_end__+0x29a9e8>
    9bfc:	00000000 	andeq	r0, r0, r0

00009c00 <__FUNCTION__.4263>:
    9c00:	74696d65 	strbtvc	r6, [r9], #-3429	; 0xd65
    9c04:	00000000 	andeq	r0, r0, r0

00009c08 <__FUNCTION__.4211>:
    9c08:	5f697072 	svcpl	0x00697072
    9c0c:	5f746573 	svcpl	0x00746573
    9c10:	7074756f 	rsbsvc	r7, r4, pc, ror #10
    9c14:	00007475 	andeq	r7, r0, r5, ror r4

00009c18 <__FUNCTION__.4285>:
    9c18:	705f6176 	subsvc	r6, pc, r6, ror r1	; <UNPREDICTABLE>
    9c1c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    9c20:	0000006b 	andeq	r0, r0, fp, rrx
    9c24:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9c28:	73253a43 	teqvc	r5, #274432	; 0x43000
    9c2c:	3a73253a 	bcc	1cd311c <__bss_end__+0x1cc8d54>
    9c30:	303a6425 	eorscc	r6, sl, r5, lsr #8
    9c34:	0000000a 	andeq	r0, r0, sl
    9c38:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    9c3c:	2d61762f 	stclcs	6, cr7, [r1, #-188]!	; 0xffffff44
    9c40:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    9c44:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
    9c48:	00000000 	andeq	r0, r0, r0
    9c4c:	33323130 	teqcc	r2, #48, 2
    9c50:	37363534 			; <UNDEFINED> instruction: 0x37363534
    9c54:	00003938 	andeq	r3, r0, r8, lsr r9
    9c58:	33323130 	teqcc	r2, #48, 2
    9c5c:	37363534 			; <UNDEFINED> instruction: 0x37363534
    9c60:	62613938 	rsbvs	r3, r1, #56, 18	; 0xe0000
    9c64:	66656463 	strbtvs	r6, [r5], -r3, ror #8
    9c68:	00000000 	andeq	r0, r0, r0
    9c6c:	00003130 	andeq	r3, r0, r0, lsr r1
    9c70:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9c74:	73253a43 	teqvc	r5, #274432	; 0x43000
    9c78:	3a73253a 	bcc	1cd3168 <__bss_end__+0x1cc8da0>
    9c7c:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    9c80:	5f637475 	svcpl	0x00637475
    9c84:	000a7066 	andeq	r7, sl, r6, rrx
    9c88:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9c8c:	73253a43 	teqvc	r5, #274432	; 0x43000
    9c90:	3a73253a 	bcc	1cd3180 <__bss_end__+0x1cc8db8>
    9c94:	773a6425 	ldrvc	r6, [sl, -r5, lsr #8]!
    9c98:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
    9c9c:	33203c20 	teqcc	r0, #32, 24	; 0x2000
    9ca0:	00000a32 	andeq	r0, r0, r2, lsr sl
    9ca4:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9ca8:	73253a43 	teqvc	r5, #274432	; 0x43000
    9cac:	3a73253a 	bcc	1cd319c <__bss_end__+0x1cc8dd4>
    9cb0:	663a6425 	ldrtvs	r6, [sl], -r5, lsr #8
    9cb4:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xf6c
    9cb8:	746f6e20 	strbtvc	r6, [pc], #-3616	; 9cc0 <__FUNCTION__.4285+0xa8>
    9cbc:	616e6520 	cmnvs	lr, r0, lsr #10
    9cc0:	64656c62 	strbtvs	r6, [r5], #-3170	; 0xc62
    9cc4:	0a212121 	beq	852150 <__bss_end__+0x847d88>
    9cc8:	00000000 	andeq	r0, r0, r0
    9ccc:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9cd0:	73253a43 	teqvc	r5, #274432	; 0x43000
    9cd4:	3a73253a 	bcc	1cd31c4 <__bss_end__+0x1cc8dfc>
    9cd8:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    9cdc:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    9ce0:	6e203a6b 	vnmulvs.f32	s6, s0, s23
    9ce4:	6820746f 	stmdavs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
    9ce8:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    9cec:	20676e69 	rsbcs	r6, r7, r9, ror #28
    9cf0:	63657073 	cmnvs	r5, #115	; 0x73
    9cf4:	65696669 	strbvs	r6, [r9, #-1641]!	; 0x669
    9cf8:	25272072 	strcs	r2, [r7, #-114]!	; 0x72
    9cfc:	0a0a2763 	beq	293a90 <__bss_end__+0x2896c8>
    9d00:	00000000 	andeq	r0, r0, r0
    9d04:	454e4f44 	strbmi	r4, [lr, #-3908]	; 0xf44
    9d08:	0a212121 	beq	852194 <__bss_end__+0x847dcc>
    9d0c:	00000000 	andeq	r0, r0, r0
    9d10:	756f6261 	strbvc	r6, [pc, #-609]!	; 9ab7 <__FUNCTION__.4218+0x6f>
    9d14:	6f742074 	svcvs	0x00742074
    9d18:	69727020 	ldmdbvs	r2!, {r5, ip, sp, lr}^
    9d1c:	6f20746e 	svcvs	0x0020746e
    9d20:	6572206e 	ldrbvs	r2, [r2, #-110]!	; 0x6e
    9d24:	616c7567 	cmnvs	ip, r7, ror #10
    9d28:	72702072 	rsbsvc	r2, r0, #114	; 0x72
    9d2c:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
    9d30:	0000000a 	andeq	r0, r0, sl
    9d34:	63637573 	cmnvs	r3, #482344960	; 0x1cc00000
    9d38:	21737365 	cmncs	r3, r5, ror #6
    9d3c:	0000000a 	andeq	r0, r0, sl

00009d40 <__FUNCTION__.4207>:
    9d40:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    9d44:	00636f6c 	rsbeq	r6, r3, ip, ror #30

00009d48 <__FUNCTION__.4214>:
    9d48:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    9d4c:	5f636f6c 	svcpl	0x00636f6c
    9d50:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    9d54:	0064656e 	rsbeq	r6, r4, lr, ror #10

00009d58 <__FUNCTION__.4219>:
    9d58:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    9d5c:	5f636f6c 	svcpl	0x00636f6c
    9d60:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    9d64:	00000000 	andeq	r0, r0, r0

00009d68 <__FUNCTION__.4229>:
    9d68:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    9d6c:	5f636f6c 	svcpl	0x00636f6c
    9d70:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    9d74:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
    9d78:	6174735f 	cmnvs	r4, pc, asr r3
    9d7c:	00007472 	andeq	r7, r0, r2, ror r4
    9d80:	4f525245 	svcmi	0x00525245
    9d84:	73253a52 	teqvc	r5, #335872	; 0x52000
    9d88:	3a73253a 	bcc	1cd3278 <__bss_end__+0x1cc8eb0>
    9d8c:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9d90:	534c4146 	movtpl	r4, #49478	; 0xc146
    9d94:	693c2845 	ldmdbvs	ip!, {r0, r2, r6, fp, sp}
    9d98:	5f74696e 	svcpl	0x0074696e
    9d9c:	3a293e70 	bcc	a59764 <__bss_end__+0xa4f39c>
    9da0:	6c616320 	stclvs	3, cr6, [r1], #-128	; 0xffffff80
    9da4:	676e696c 	strbvs	r6, [lr, -ip, ror #18]!
    9da8:	66656220 	strbtvs	r6, [r5], -r0, lsr #4
    9dac:	2065726f 	rsbcs	r7, r5, pc, ror #4
    9db0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    9db4:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    9db8:	0a64657a 	beq	19233a8 <__bss_end__+0x1918fe0>
    9dbc:	00000000 	andeq	r0, r0, r0
    9dc0:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
    9dc4:	6b2f6372 	blvs	be2b94 <__bss_end__+0xbd87cc>
    9dc8:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    9dcc:	632e636f 	teqvs	lr, #-1140850687	; 0xbc000001
    9dd0:	00000000 	andeq	r0, r0, r0
    9dd4:	4f525245 	svcmi	0x00525245
    9dd8:	73253a52 	teqvc	r5, #335872	; 0x52000
    9ddc:	3a73253a 	bcc	1cd32cc <__bss_end__+0x1cc8f04>
    9de0:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9de4:	534c4146 	movtpl	r4, #49478	; 0xc146
    9de8:	613c2845 	teqvs	ip, r5, asr #16
    9dec:	6e67696c 	cdpvs	9, 6, cr6, cr7, cr12, {3}
    9df0:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
    9df4:	38202520 	stmdacc	r0!, {r5, r8, sl, sp}
    9df8:	203d3d20 	eorscs	r3, sp, r0, lsr #26
    9dfc:	3a293e30 	bcc	a596c4 <__bss_end__+0xa4f2fc>
    9e00:	65772220 	ldrbvs	r2, [r7, #-544]!	; 0x220
    9e04:	20647269 	rsbcs	r7, r4, r9, ror #4
    9e08:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    9e0c:	6e656d6e 	cdpvs	13, 6, cr6, cr5, cr14, {3}
    9e10:	6e203a74 	mcrvs	10, 1, r3, cr0, cr4, {3}
    9e14:	6120746f 	teqvs	r0, pc, ror #8
    9e18:	6c756d20 	ldclvs	13, cr6, [r5], #-128	; 0xffffff80
    9e1c:	6c706974 	ldclvs	9, cr6, [r0], #-464	; 0xfffffe30
    9e20:	666f2065 	strbtvs	r2, [pc], -r5, rrx
    9e24:	22213420 	eorcs	r3, r1, #32, 8	; 0x20000000
    9e28:	0000000a 	andeq	r0, r0, sl
    9e2c:	4f525245 	svcmi	0x00525245
    9e30:	73253a52 	teqvc	r5, #335872	; 0x52000
    9e34:	3a73253a 	bcc	1cd3324 <__bss_end__+0x1cc8f5c>
    9e38:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9e3c:	534c4146 	movtpl	r4, #49478	; 0xc146
    9e40:	213c2845 	teqcs	ip, r5, asr #16
    9e44:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    9e48:	293e705f 	ldmdbcs	lr!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}
    9e4c:	6163203a 	cmnvs	r3, sl, lsr r0
    9e50:	746f6e6e 	strbtvc	r6, [pc], #-3694	; 9e58 <__FUNCTION__.4229+0xf0>
    9e54:	696e6920 	stmdbvs	lr!, {r5, r8, fp, sp, lr}^
    9e58:	6c616974 	stclvs	9, cr6, [r1], #-464	; 0xfffffe30
    9e5c:	20657a69 	rsbcs	r7, r5, r9, ror #20
    9e60:	63697774 	cmnvs	r9, #116, 14	; 0x1d00000
    9e64:	0a0a2165 	beq	292400 <__bss_end__+0x288038>
    9e68:	00000000 	andeq	r0, r0, r0

00009e6c <__FUNCTION__.4312>:
    9e6c:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 9701 <gpio_set_function+0xb5>
    9e70:	5f747261 	svcpl	0x00747261
    9e74:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
    9e78:	746e755f 	strbtvc	r7, [lr], #-1375	; 0x55f
    9e7c:	00006c69 	andeq	r6, r0, r9, ror #24

00009e80 <__FUNCTION__.4324>:
    9e80:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 9715 <gpio_set_function+0xc9>
    9e84:	5f747261 	svcpl	0x00747261
    9e88:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
    9e8c:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    9e90:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
    9e94:	00000000 	andeq	r0, r0, r0

00009e98 <__FUNCTION__.4338>:
    9e98:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 972d <is_gpio_int+0x9>
    9e9c:	5f747261 	svcpl	0x00747261
    9ea0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    9ea4:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
    9ea8:	00726570 	rsbseq	r6, r2, r0, ror r5

00009eac <__FUNCTION__.4344>:
    9eac:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 9741 <is_gpio_int+0x1d>
    9eb0:	5f747261 	svcpl	0x00747261
    9eb4:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
    9eb8:	00000000 	andeq	r0, r0, r0

00009ebc <__FUNCTION__.4366>:
    9ebc:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 9751 <gpio_int_rising_edge+0x1>
    9ec0:	5f747261 	svcpl	0x00747261
    9ec4:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    9ec8:	00006b74 	andeq	r6, r0, r4, ror fp

00009ecc <__FUNCTION__.4374>:
    9ecc:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 9761 <gpio_int_rising_edge+0x11>
    9ed0:	5f747261 	svcpl	0x00747261
    9ed4:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
    9ed8:	746e755f 	strbtvc	r7, [lr], #-1375	; 0x55f
    9edc:	625f6c69 	subsvs	r6, pc, #26880	; 0x6900
    9ee0:	00006b6c 	andeq	r6, r0, ip, ror #22
    9ee4:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9ee8:	73253a43 	teqvc	r5, #274432	; 0x43000
    9eec:	3a73253a 	bcc	1cd33dc <__bss_end__+0x1cc9014>
    9ef0:	6e3a6425 	cdpvs	4, 3, cr6, cr10, cr5, {1}
    9ef4:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
    9ef8:	0a303e73 	beq	c198cc <__bss_end__+0xc0f504>
    9efc:	00000000 	andeq	r0, r0, r0
    9f00:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
    9f04:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    9f08:	61752d77 	cmnvs	r5, r7, ror sp
    9f0c:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
    9f10:	00000000 	andeq	r0, r0, r0
    9f14:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9f18:	73253a43 	teqvc	r5, #274432	; 0x43000
    9f1c:	3a73253a 	bcc	1cd340c <__bss_end__+0x1cc9044>
    9f20:	283a6425 	ldmdacs	sl!, {r0, r2, r5, sl, sp, lr}
    9f24:	207a686d 	rsbscs	r6, sl, sp, ror #16
    9f28:	6162202d 	cmnvs	r2, sp, lsr #32
    9f2c:	20296475 	eorcs	r6, r9, r5, ror r4
    9f30:	64203d3c 	strtvs	r3, [r0], #-3388	; 0xd3c
    9f34:	76697265 	strbtvc	r7, [r9], -r5, ror #4
    9f38:	26206465 	strtcs	r6, [r0], -r5, ror #8
    9f3c:	65642026 	strbvs	r2, [r4, #-38]!	; 0x26
    9f40:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    9f44:	3d3c2064 	ldccc	0, cr2, [ip, #-400]!	; 0xfffffe70
    9f48:	686d2820 	stmdavs	sp!, {r5, fp, sp}^
    9f4c:	202b207a 	eorcs	r2, fp, sl, ror r0
    9f50:	64756162 	ldrbtvs	r6, [r5], #-354	; 0x162
    9f54:	00000a29 	andeq	r0, r0, r9, lsr #20
    9f58:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9f5c:	73253a43 	teqvc	r5, #274432	; 0x43000
    9f60:	3a73253a 	bcc	1cd3450 <__bss_end__+0x1cc9088>
    9f64:	693a6425 	ldmdbvs	sl!, {r0, r2, r5, sl, sp, lr}
    9f68:	736f706d 	cmnvc	pc, #109	; 0x6d
    9f6c:	6c626973 	stclvs	9, cr6, [r2], #-460	; 0xfffffe34
    9f70:	68203a65 	stmdavs	r0!, {r0, r2, r5, r6, r9, fp, ip, sp}
    9f74:	20657661 	rsbcs	r7, r5, r1, ror #12
    9f78:	69206e61 	stmdbvs	r0!, {r0, r5, r6, r9, sl, fp, sp, lr}
    9f7c:	6e69666e 	cdpvs	6, 6, cr6, cr9, cr14, {3}
    9f80:	20657469 	rsbcs	r7, r5, r9, ror #8
    9f84:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    9f88:	2174756f 	cmncs	r4, pc, ror #10
    9f8c:	00000a0a 	andeq	r0, r0, sl, lsl #20
    9f90:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9f94:	73253a43 	teqvc	r5, #274432	; 0x43000
    9f98:	3a73253a 	bcc	1cd3488 <__bss_end__+0x1cc90c0>
    9f9c:	733a6425 	teqvc	sl, #620756992	; 0x25000000
    9fa0:	203c207a 	eorscs	r2, ip, sl, ror r0
    9fa4:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
    9fa8:	6220666f 	eorvs	r6, r0, #116391936	; 0x6f00000
    9fac:	312d6675 	teqcc	sp, r5, ror r6
    9fb0:	0000000a 	andeq	r0, r0, sl

Disassembly of section .bss:

00009fb4 <__bss_start__>:
	...

0000a3b4 <console_uart>:
	...

0000a3c0 <init_p>:
    a3c0:	00000000 	andeq	r0, r0, r0

0000a3c4 <heap_ptr>:
    a3c4:	00000000 	andeq	r0, r0, r0

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4b5a3605 	blmi	168d82c <__bss_end__+0x1683464>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	12010901 	andne	r0, r1, #16384	; 0x4000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0x404
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	22011a01 	andcs	r1, r1, #4096	; 0x1000
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__bss_end__+0x10c695c>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	34202955 	strtcc	r2, [r0], #-2389	; 0x955
   c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000021 	andeq	r0, r0, r1, lsr #32
      10:	00014d01 	andeq	r4, r1, r1, lsl #26
      14:	0000c000 	andeq	ip, r0, r0
      18:	00801000 	addeq	r1, r0, r0
      1c:	0001a800 	andeq	sl, r1, r0, lsl #16
      20:	00000000 	andeq	r0, r0, r0
      24:	05040200 	streq	r0, [r4, #-512]	; 0x200
      28:	00746e69 	rsbseq	r6, r4, r9, ror #28
      2c:	68070403 	stmdavs	r7, {r0, r1, sl}
      30:	03000001 	movweq	r0, #1
      34:	008c0601 	addeq	r0, ip, r1, lsl #12
      38:	02030000 	andeq	r0, r3, #0
      3c:	0001a405 	andeq	sl, r1, r5, lsl #8
      40:	05040300 	streq	r0, [r4, #-768]	; 0x300
      44:	00000190 	muleq	r0, r0, r1
      48:	8b050803 	blhi	14205c <__bss_end__+0x137c94>
      4c:	03000001 	movweq	r0, #1
      50:	008a0801 	addeq	r0, sl, r1, lsl #16
      54:	02030000 	andeq	r0, r3, #0
      58:	0000ad07 	andeq	sl, r0, r7, lsl #26
      5c:	01bc0400 			; <UNDEFINED> instruction: 0x01bc0400
      60:	34030000 	strcc	r0, [r3], #-0
      64:	00000068 	andeq	r0, r0, r8, rrx
      68:	63070403 	movwvs	r0, #29699	; 0x7403
      6c:	03000001 	movweq	r0, #1
      70:	015e0708 	cmpeq	lr, r8, lsl #14
      74:	04030000 	streq	r0, [r3], #-0
      78:	00018207 	andeq	r8, r1, r7, lsl #4
      7c:	03040500 	movweq	r0, #17664	; 0x4500
      80:	00930801 	addseq	r0, r3, r1, lsl #16
      84:	04060000 	streq	r0, [r6], #-0
      88:	0000008c 	andeq	r0, r0, ip, lsl #1
      8c:	00007f07 	andeq	r7, r0, r7, lsl #30
      90:	007f0800 	rsbseq	r0, pc, r0, lsl #16
      94:	00a10000 	adceq	r0, r1, r0
      98:	76090000 	strvc	r0, [r9], -r0
      9c:	07000000 	streq	r0, [r0, -r0]
      a0:	01990a00 	orrseq	r0, r9, r0, lsl #20
      a4:	20500000 	subscs	r0, r0, r0
      a8:	00f6dd02 	rscseq	sp, r6, r2, lsl #26
      ac:	3f0b0000 	svccc	0x000b0000
      b0:	02000001 	andeq	r0, r0, #1
      b4:	0000f6df 	ldrdeq	pc, [r0], -pc	; <UNPREDICTABLE>
      b8:	000b0000 	andeq	r0, fp, r0
      bc:	02000000 	andeq	r0, r0, #0
      c0:	000106e1 	andeq	r0, r1, r1, ror #13
      c4:	740c4000 	strvc	r4, [ip], #-0
      c8:	02006469 	andeq	r6, r0, #1761607680	; 0x69000000
      cc:	00005de2 	andeq	r5, r0, r2, ror #27
      d0:	660c4400 	strvs	r4, [ip], -r0, lsl #8
      d4:	e402006e 	str	r0, [r2], #-110	; 0x6e
      d8:	00000117 	andeq	r0, r0, r7, lsl r1
      dc:	72610c48 	rsbvc	r0, r1, #72, 24	; 0x4800
      e0:	e5020067 	str	r0, [r2, #-103]	; 0x67
      e4:	0000007d 	andeq	r0, r0, sp, ror r0
      e8:	001b0b4c 	andseq	r0, fp, ip, asr #22
      ec:	e7020000 	str	r0, [r2, -r0]
      f0:	0000011d 	andeq	r0, r0, sp, lsl r1
      f4:	5d080050 	stcpl	0, cr0, [r8, #-320]	; 0xfffffec0
      f8:	06000000 	streq	r0, [r0], -r0
      fc:	09000001 	stmdbeq	r0, {r0}
     100:	00000076 	andeq	r0, r0, r6, ror r0
     104:	0406000f 	streq	r0, [r6], #-15
     108:	000000a1 	andeq	r0, r0, r1, lsr #1
     10c:	0001170d 	andeq	r1, r1, sp, lsl #14
     110:	007d0e00 	rsbseq	r0, sp, r0, lsl #28
     114:	06000000 	streq	r0, [r0], -r0
     118:	00010c04 	andeq	r0, r1, r4, lsl #24
     11c:	005d0800 	subseq	r0, sp, r0, lsl #16
     120:	012e0000 	teqeq	lr, r0
     124:	760f0000 	strvc	r0, [pc], -r0
     128:	ff000000 			; <UNDEFINED> instruction: 0xff000000
     12c:	75040007 	strvc	r0, [r4, #-7]
     130:	02000001 	andeq	r0, r0, #1
     134:	0000a1e8 	andeq	sl, r0, r8, ror #3
     138:	00781000 	rsbseq	r1, r8, r0
     13c:	0a010000 	beq	40144 <__bss_end__+0x35d7c>
     140:	00008010 	andeq	r8, r0, r0, lsl r0
     144:	0000017c 	andeq	r0, r0, ip, ror r1
     148:	03eb9c01 	mvneq	r9, #256	; 0x100
     14c:	7b110000 	blvc	440154 <__bss_end__+0x435d8c>
     150:	01000005 	tsteq	r0, r5
     154:	00002c0f 	andeq	r2, r0, pc, lsl #24
     158:	28124000 	ldmdacs	r2, {lr}
     15c:	01000001 	tsteq	r0, r1
     160:	0003eb10 	andeq	lr, r3, r0, lsl fp
     164:	00000000 	andeq	r0, r0, r0
     168:	00691300 	rsbeq	r1, r9, r0, lsl #6
     16c:	00251501 	eoreq	r1, r5, r1, lsl #10
     170:	001e0000 	andseq	r0, lr, r0
     174:	15120000 	ldrne	r0, [r2, #-0]
     178:	01000000 	mrseq	r0, (UNDEF: 0)
     17c:	0003f127 	andeq	pc, r3, r7, lsr #2
     180:	00003d00 	andeq	r3, r0, r0, lsl #26
     184:	013a1200 	teqeq	sl, r0, lsl #4
     188:	2a010000 	bcs	40190 <__bss_end__+0x35dc8>
     18c:	000003eb 	andeq	r0, r0, fp, ror #7
     190:	0000005b 	andeq	r0, r0, fp, asr r0
     194:	00012d14 	andeq	r2, r1, r4, lsl sp
     198:	0003fc00 	andeq	pc, r3, r0, lsl #24
     19c:	40030500 	andmi	r0, r3, r0, lsl #10
     1a0:	1500009a 	strne	r0, [r0, #-154]	; 0x9a
     1a4:	00008018 	andeq	r8, r0, r8, lsl r0
     1a8:	0000047c 	andeq	r0, r0, ip, ror r4
     1ac:	00801c15 	addeq	r1, r0, r5, lsl ip
     1b0:	00048300 	andeq	r8, r4, r0, lsl #6
     1b4:	80281600 	eorhi	r1, r8, r0, lsl #12
     1b8:	048a0000 	streq	r0, [sl], #0
     1bc:	01ce0000 	biceq	r0, lr, r0
     1c0:	01170000 	tsteq	r7, r0
     1c4:	17380151 			; <UNDEFINED> instruction: 0x17380151
     1c8:	08025001 	stmdaeq	r2, {r0, ip, lr}
     1cc:	34160040 	ldrcc	r0, [r6], #-64	; 0x40
     1d0:	a4000080 	strge	r0, [r0], #-128	; 0x80
     1d4:	e5000004 	str	r0, [r0, #-4]
     1d8:	17000001 	strne	r0, [r0, -r1]
     1dc:	03055001 	movweq	r5, #20481	; 0x5001
     1e0:	00009a58 	andeq	r9, r0, r8, asr sl
     1e4:	803c1600 	eorshi	r1, ip, r0, lsl #12
     1e8:	04a40000 	strteq	r0, [r4], #0
     1ec:	01fc0000 	mvnseq	r0, r0
     1f0:	01170000 	tsteq	r7, r0
     1f4:	88030550 	stmdahi	r3, {r4, r6, r8, sl}
     1f8:	0000009a 	muleq	r0, sl, r0
     1fc:	00804816 	addeq	r4, r0, r6, lsl r8
     200:	0004ba00 	andeq	fp, r4, r0, lsl #20
     204:	00021600 	andeq	r1, r2, r0, lsl #12
     208:	51011700 	tstpl	r1, r0, lsl #14
     20c:	17007502 	strne	r7, [r0, -r2, lsl #10]
     210:	75025001 	strvc	r5, [r2, #-1]
     214:	50160000 	andspl	r0, r6, r0
     218:	a4000080 	strge	r0, [r0], #-128	; 0x80
     21c:	2d000004 	stccs	0, cr0, [r0, #-16]
     220:	17000002 	strne	r0, [r0, -r2]
     224:	03055001 	movweq	r5, #20481	; 0x5001
     228:	00009aac 	andeq	r9, r0, ip, lsr #21
     22c:	80641600 	rsbhi	r1, r4, r0, lsl #12
     230:	04ba0000 	ldrteq	r0, [sl], #0
     234:	02470000 	subeq	r0, r7, #0
     238:	01170000 	tsteq	r7, r0
     23c:	00750251 	rsbseq	r0, r5, r1, asr r2
     240:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     244:	16000075 			; <UNDEFINED> instruction: 0x16000075
     248:	00008078 	andeq	r8, r0, r8, ror r0
     24c:	000004a4 	andeq	r0, r0, r4, lsr #9
     250:	0000025e 	andeq	r0, r0, lr, asr r2
     254:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     258:	009ad003 	addseq	sp, sl, r3
     25c:	80160000 	andshi	r0, r6, r0
     260:	a4000080 	strge	r0, [r0], #-128	; 0x80
     264:	75000004 	strvc	r0, [r0, #-4]
     268:	17000002 	strne	r0, [r0, -r2]
     26c:	03055001 	movweq	r5, #20481	; 0x5001
     270:	00009a58 	andeq	r9, r0, r8, asr sl
     274:	80881600 	addhi	r1, r8, r0, lsl #12
     278:	04a40000 	strteq	r0, [r4], #0
     27c:	028c0000 	addeq	r0, ip, #0
     280:	01170000 	tsteq	r7, r0
     284:	e0030550 	and	r0, r3, r0, asr r5
     288:	0000009a 	muleq	r0, sl, r0
     28c:	00809016 	addeq	r9, r0, r6, lsl r0
     290:	0004d000 	andeq	sp, r4, r0
     294:	00029f00 	andeq	r9, r2, r0, lsl #30
     298:	50011700 	andpl	r1, r1, r0, lsl #14
     29c:	16003401 	strne	r3, [r0], -r1, lsl #8
     2a0:	000080a8 	andeq	r8, r0, r8, lsr #1
     2a4:	0000048a 	andeq	r0, r0, sl, lsl #9
     2a8:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
     2ac:	01510117 	cmpeq	r1, r7, lsl r1
     2b0:	50011738 	andpl	r1, r1, r8, lsr r7
     2b4:	00400802 	subeq	r0, r0, r2, lsl #16
     2b8:	0080b416 	addeq	fp, r0, r6, lsl r4
     2bc:	0004a400 	andeq	sl, r4, r0, lsl #8
     2c0:	0002cf00 	andeq	ip, r2, r0, lsl #30
     2c4:	50011700 	andpl	r1, r1, r0, lsl #14
     2c8:	9b000305 	blls	ee4 <_start-0x711c>
     2cc:	16000000 	strne	r0, [r0], -r0
     2d0:	000080c0 	andeq	r8, r0, r0, asr #1
     2d4:	000004ba 			; <UNDEFINED> instruction: 0x000004ba
     2d8:	000002e9 	andeq	r0, r0, r9, ror #5
     2dc:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
     2e0:	01170076 	tsteq	r7, r6, ror r0
     2e4:	00760250 	rsbseq	r0, r6, r0, asr r2
     2e8:	80c81600 	sbchi	r1, r8, r0, lsl #12
     2ec:	04a40000 	strteq	r0, [r4], #0
     2f0:	03000000 	movweq	r0, #0
     2f4:	01170000 	tsteq	r7, r0
     2f8:	18030550 	stmdane	r3, {r4, r6, r8, sl}
     2fc:	0000009b 	muleq	r0, fp, r0
     300:	0080ec16 	addeq	lr, r0, r6, lsl ip
     304:	0004a400 	andeq	sl, r4, r0, lsl #8
     308:	00031700 	andeq	r1, r3, r0, lsl #14
     30c:	50011700 	andpl	r1, r1, r0, lsl #14
     310:	9b300305 	blls	c00f2c <__bss_end__+0xbf6b64>
     314:	15000000 	strne	r0, [r0, #-0]
     318:	000080fc 	strdeq	r8, [r0], -ip
     31c:	000004e5 	andeq	r0, r0, r5, ror #9
     320:	00811016 	addeq	r1, r1, r6, lsl r0
     324:	0004a400 	andeq	sl, r4, r0, lsl #8
     328:	00034f00 	andeq	r4, r3, r0, lsl #30
     32c:	53011700 	movwpl	r1, #5888	; 0x1700
     330:	17330802 	ldrne	r0, [r3, -r2, lsl #16]!
     334:	03055201 	movweq	r5, #20993	; 0x5201
     338:	00009a40 	andeq	r9, r0, r0, asr #20
     33c:	05510117 	ldrbeq	r0, [r1, #-279]	; 0x117
     340:	009b6003 	addseq	r6, fp, r3
     344:	50011700 	andpl	r1, r1, r0, lsl #14
     348:	9b440305 	blls	1100f64 <__bss_end__+0x10f6b9c>
     34c:	15000000 	strne	r0, [r0, #-0]
     350:	00008114 	andeq	r8, r0, r4, lsl r1
     354:	000004ec 	andeq	r0, r0, ip, ror #9
     358:	00811c16 	addeq	r1, r1, r6, lsl ip
     35c:	0004a400 	andeq	sl, r4, r0, lsl #8
     360:	00036f00 	andeq	r6, r3, r0, lsl #30
     364:	50011700 	andpl	r1, r1, r0, lsl #14
     368:	9b740305 	blls	1d00f84 <__bss_end__+0x1cf6bbc>
     36c:	15000000 	strne	r0, [r0, #-0]
     370:	00008120 	andeq	r8, r0, r0, lsr #2
     374:	000004ec 	andeq	r0, r0, ip, ror #9
     378:	00812c16 	addeq	r2, r1, r6, lsl ip
     37c:	0004a400 	andeq	sl, r4, r0, lsl #8
     380:	00038f00 	andeq	r8, r3, r0, lsl #30
     384:	50011700 	andpl	r1, r1, r0, lsl #14
     388:	9b880305 	blls	fe200fa4 <__bss_end__+0xfe1f6bdc>
     38c:	16000000 	strne	r0, [r0], -r0
     390:	00008138 	andeq	r8, r0, r8, lsr r1
     394:	000004ba 			; <UNDEFINED> instruction: 0x000004ba
     398:	000003a9 	andeq	r0, r0, r9, lsr #7
     39c:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
     3a0:	01170076 	tsteq	r7, r6, ror r0
     3a4:	00750250 	rsbseq	r0, r5, r0, asr r2
     3a8:	813c1500 	teqhi	ip, r0, lsl #10
     3ac:	04e50000 	strbteq	r0, [r5], #0
     3b0:	50160000 	andspl	r0, r6, r0
     3b4:	a4000081 	strge	r0, [r0], #-129	; 0x81
     3b8:	e1000004 	tst	r0, r4
     3bc:	17000003 	strne	r0, [r0, -r3]
     3c0:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     3c4:	5201173a 	andpl	r1, r1, #15204352	; 0xe80000
     3c8:	9a400305 	bls	1000fe4 <__bss_end__+0xff6c1c>
     3cc:	01170000 	tsteq	r7, r0
     3d0:	60030551 	andvs	r0, r3, r1, asr r5
     3d4:	1700009b 			; <UNDEFINED> instruction: 0x1700009b
     3d8:	03055001 	movweq	r5, #20481	; 0x5001
     3dc:	00009ba8 	andeq	r9, r0, r8, lsr #23
     3e0:	81541500 	cmphi	r4, r0, lsl #10
     3e4:	04ec0000 	strbteq	r0, [ip], #0
     3e8:	06000000 	streq	r0, [r0], -r0
     3ec:	00005d04 	andeq	r5, r0, r4, lsl #26
     3f0:	f7040600 			; <UNDEFINED> instruction: 0xf7040600
     3f4:	18000003 	stmdane	r0, {r0, r1}
     3f8:	00000025 	andeq	r0, r0, r5, lsr #32
     3fc:	00009107 	andeq	r9, r0, r7, lsl #2
     400:	01ae1000 			; <UNDEFINED> instruction: 0x01ae1000
     404:	3f010000 	svccc	0x00010000
     408:	0000818c 	andeq	r8, r0, ip, lsl #3
     40c:	0000002c 	andeq	r0, r0, ip, lsr #32
     410:	04679c01 	strbteq	r9, [r7], #-3073	; 0xc01
     414:	2d140000 	ldccs	0, cr0, [r4, #-0]
     418:	77000001 	strvc	r0, [r0, -r1]
     41c:	05000004 	streq	r0, [r0, #-4]
     420:	009a4803 	addseq	r4, sl, r3, lsl #16
     424:	81941500 	orrshi	r1, r4, r0, lsl #10
     428:	04e50000 	strbteq	r0, [r5], #0
     42c:	a8160000 	ldmdage	r6, {}	; <UNPREDICTABLE>
     430:	a4000081 	strge	r0, [r0], #-129	; 0x81
     434:	5d000004 	stcpl	0, cr0, [r0, #-16]
     438:	17000004 	strne	r0, [r0, -r4]
     43c:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     440:	5201173f 	andpl	r1, r1, #16515072	; 0xfc0000
     444:	9a480305 	bls	1201060 <__bss_end__+0x11f6c98>
     448:	01170000 	tsteq	r7, r0
     44c:	60030551 	andvs	r0, r3, r1, asr r5
     450:	1700009b 			; <UNDEFINED> instruction: 0x1700009b
     454:	03055001 	movweq	r5, #20481	; 0x5001
     458:	00009bdc 	ldrdeq	r9, [r0], -ip
     45c:	81ac1500 			; <UNDEFINED> instruction: 0x81ac1500
     460:	04ec0000 	strbteq	r0, [ip], #0
     464:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     468:	0000007f 	andeq	r0, r0, pc, ror r0
     46c:	00000477 	andeq	r0, r0, r7, ror r4
     470:	00007609 	andeq	r7, r0, r9, lsl #12
     474:	07000d00 	streq	r0, [r0, -r0, lsl #26]
     478:	00000467 	andeq	r0, r0, r7, ror #8
     47c:	00008019 	andeq	r8, r0, r9, lsl r0
     480:	193a0200 	ldmdbne	sl!, {r9}
     484:	000001c5 	andeq	r0, r0, r5, asr #3
     488:	051a7102 	ldreq	r7, [sl, #-258]	; 0x102
     48c:	02000000 	andeq	r0, r0, #0
     490:	00007d6e 	andeq	r7, r0, lr, ror #26
     494:	0004a400 	andeq	sl, r4, r0, lsl #8
     498:	002c0e00 	eoreq	r0, ip, r0, lsl #28
     49c:	2c0e0000 	stccs	0, cr0, [lr], {-0}
     4a0:	00000000 	andeq	r0, r0, r0
     4a4:	0002011a 	andeq	r0, r2, sl, lsl r1
     4a8:	25290200 	strcs	r0, [r9, #-512]!	; 0x200
     4ac:	ba000000 	blt	4b4 <_start-0x7b4c>
     4b0:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
     4b4:	00000086 	andeq	r0, r0, r6, lsl #1
     4b8:	a51c001b 	ldrge	r0, [ip, #-27]
     4bc:	01000000 	mrseq	r0, (UNDEF: 0)
     4c0:	0004d008 	andeq	sp, r4, r8
     4c4:	03eb0e00 	mvneq	r0, #0, 28
     4c8:	eb0e0000 	bl	3804d0 <__bss_end__+0x376108>
     4cc:	00000003 	andeq	r0, r0, r3
     4d0:	0001201a 	andeq	r2, r1, sl, lsl r0
     4d4:	7d6d0200 	sfmvc	f0, 2, [sp, #-0]
     4d8:	e5000000 	str	r0, [r0, #-0]
     4dc:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
     4e0:	0000002c 	andeq	r0, r0, ip, lsr #32
     4e4:	01d21900 	bicseq	r1, r2, r0, lsl #18
     4e8:	1e020000 	cdpne	0, 0, cr0, cr2, cr0, {0}
     4ec:	00009819 	andeq	r9, r0, r9, lsl r8
     4f0:	00660200 	rsbeq	r0, r6, r0, lsl #4
     4f4:	00000191 	muleq	r0, r1, r1
     4f8:	01630004 	cmneq	r3, r4
     4fc:	01040000 	mrseq	r0, (UNDEF: 4)
     500:	00000021 	andeq	r0, r0, r1, lsr #32
     504:	0001f001 	andeq	pc, r1, r1
     508:	00021200 	andeq	r1, r2, r0, lsl #4
     50c:	00827800 	addeq	r7, r2, r0, lsl #16
     510:	00005800 	andeq	r5, r0, r0, lsl #16
     514:	00012400 	andeq	r2, r1, r0, lsl #8
     518:	01e10200 	mvneq	r0, r0, lsl #4
     51c:	28020000 	stmdacs	r2, {}	; <UNPREDICTABLE>
     520:	00000030 	andeq	r0, r0, r0, lsr r0
     524:	00020803 	andeq	r0, r2, r3, lsl #16
     528:	00030400 	andeq	r0, r3, r0, lsl #8
     52c:	00000047 	andeq	r0, r0, r7, asr #32
     530:	00025b04 	andeq	r5, r2, r4, lsl #22
     534:	00004700 	andeq	r4, r0, r0, lsl #14
     538:	05000000 	streq	r0, [r0, #-0]
     53c:	020a0204 	andeq	r0, sl, #4, 4	; 0x40000000
     540:	62020000 	andvs	r0, r2, #0
     544:	00000025 	andeq	r0, r0, r5, lsr #32
     548:	69050406 	stmdbvs	r5, {r1, r2, sl}
     54c:	0700746e 	streq	r7, [r0, -lr, ror #8]
     550:	01680704 	cmneq	r8, r4, lsl #14
     554:	01070000 	mrseq	r0, (UNDEF: 7)
     558:	00008c06 	andeq	r8, r0, r6, lsl #24
     55c:	05020700 	streq	r0, [r2, #-1792]	; 0x700
     560:	000001a4 	andeq	r0, r0, r4, lsr #3
     564:	90050407 	andls	r0, r5, r7, lsl #8
     568:	07000001 	streq	r0, [r0, -r1]
     56c:	018b0508 	orreq	r0, fp, r8, lsl #10
     570:	01070000 	mrseq	r0, (UNDEF: 7)
     574:	00008a08 	andeq	r8, r0, r8, lsl #20
     578:	07020700 	streq	r0, [r2, -r0, lsl #14]
     57c:	000000ad 	andeq	r0, r0, sp, lsr #1
     580:	63070407 	movwvs	r0, #29703	; 0x7407
     584:	07000001 	streq	r0, [r0, -r1]
     588:	015e0708 	cmpeq	lr, r8, lsl #14
     58c:	04070000 	streq	r0, [r7], #-0
     590:	00018207 	andeq	r8, r1, r7, lsl #4
     594:	a7040800 	strge	r0, [r4, -r0, lsl #16]
     598:	07000000 	streq	r0, [r0, -r0]
     59c:	00930801 	addseq	r0, r3, r1, lsl #16
     5a0:	04080000 	streq	r0, [r8], #-0
     5a4:	000000b4 	strheq	r0, [r0], -r4
     5a8:	0000a709 	andeq	sl, r0, r9, lsl #14
     5ac:	02010a00 	andeq	r0, r1, #0, 20
     5b0:	06010000 	streq	r0, [r1], -r0
     5b4:	00000054 	andeq	r0, r0, r4, asr r0
     5b8:	00008278 	andeq	r8, r0, r8, ror r2
     5bc:	00000058 	andeq	r0, r0, r8, asr r0
     5c0:	01439c01 	cmpeq	r3, r1, lsl #24
     5c4:	660b0000 	strvs	r0, [fp], -r0
     5c8:	0100746d 	tsteq	r0, sp, ror #8
     5cc:	0000ae06 	andeq	sl, r0, r6, lsl #28
     5d0:	70910200 	addsvc	r0, r1, r0, lsl #4
     5d4:	75620d0c 	strbvc	r0, [r2, #-3340]!	; 0xd0c
     5d8:	08010066 	stmdaeq	r1, {r1, r2, r5, r6}
     5dc:	00000143 	andeq	r0, r0, r3, asr #2
     5e0:	9fb40305 	svcls	0x00b40305
     5e4:	560e0000 	strpl	r0, [lr], -r0
     5e8:	01000002 	tsteq	r0, r2
     5ec:	00004909 	andeq	r4, r0, r9, lsl #18
     5f0:	5c910200 	lfmpl	f0, 4, [r1], {0}
     5f4:	007a730f 	rsbseq	r7, sl, pc, lsl #6
     5f8:	00540c01 	subseq	r0, r4, r1, lsl #24
     5fc:	00790000 	rsbseq	r0, r9, r0
     600:	a0100000 	andsge	r0, r0, r0
     604:	74000082 	strvc	r0, [r0], #-130	; 0x82
     608:	36000001 	strcc	r0, [r0], -r1
     60c:	11000001 	tstne	r0, r1
     610:	91025301 	tstls	r2, r1, lsl #6
     614:	5201114c 	andpl	r1, r1, #76, 2
     618:	06489103 	strbeq	r9, [r8], -r3, lsl #2
     61c:	03510111 	cmpeq	r1, #1073741828	; 0x40000004
     620:	1104000a 	tstne	r4, sl
     624:	74025001 	strvc	r5, [r2], #-1
     628:	b4120000 	ldrlt	r0, [r2], #-0
     62c:	11000082 	smlabbne	r0, r2, r0, r0
     630:	74025001 	strvc	r5, [r2], #-1
     634:	13000000 	movwne	r0, #0
     638:	000000a7 	andeq	r0, r0, r7, lsr #1
     63c:	00000154 	andeq	r0, r0, r4, asr r1
     640:	00009a14 	andeq	r9, r0, r4, lsl sl
     644:	0003ff00 	andeq	pc, r3, r0, lsl #30
     648:	00005415 	andeq	r5, r0, r5, lsl r4
     64c:	00016300 	andeq	r6, r1, r0, lsl #6
     650:	00ae1600 	adceq	r1, lr, r0, lsl #12
     654:	17000000 	strne	r0, [r0, -r0]
     658:	000002ae 	andeq	r0, r0, lr, lsr #5
     65c:	016e2204 	cmneq	lr, r4, lsl #4
     660:	04080000 	streq	r0, [r8], #-0
     664:	00000154 	andeq	r0, r0, r4, asr r1
     668:	0001fe18 	andeq	pc, r1, r8, lsl lr	; <UNPREDICTABLE>
     66c:	54020500 	strpl	r0, [r2], #-1280	; 0x500
     670:	16000000 	strne	r0, [r0], -r0
     674:	000000a1 	andeq	r0, r0, r1, lsr #1
     678:	00005416 	andeq	r5, r0, r6, lsl r4
     67c:	00ae1600 	adceq	r1, lr, r0, lsl #12
     680:	49160000 	ldmdbmi	r6, {}	; <UNPREDICTABLE>
     684:	00000000 	andeq	r0, r0, r0
     688:	00011300 	andeq	r1, r1, r0, lsl #6
     68c:	94000400 	strls	r0, [r0], #-1024	; 0x400
     690:	04000002 	streq	r0, [r0], #-2
     694:	00002101 	andeq	r2, r0, r1, lsl #2
     698:	027d0100 	rsbseq	r0, sp, #0, 2
     69c:	02120000 	andseq	r0, r2, #0
     6a0:	82d00000 	sbcshi	r0, r0, #0
     6a4:	003c0000 	eorseq	r0, ip, r0
     6a8:	022a0000 	eoreq	r0, sl, #0
     6ac:	04020000 	streq	r0, [r2], #-0
     6b0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
     6b4:	07040300 	streq	r0, [r4, -r0, lsl #6]
     6b8:	00000168 	andeq	r0, r0, r8, ror #2
     6bc:	8c060103 	stfhis	f0, [r6], {3}
     6c0:	03000000 	movweq	r0, #0
     6c4:	01a40502 			; <UNDEFINED> instruction: 0x01a40502
     6c8:	04030000 	streq	r0, [r3], #-0
     6cc:	00019005 	andeq	r9, r1, r5
     6d0:	05080300 	streq	r0, [r8, #-768]	; 0x300
     6d4:	0000018b 	andeq	r0, r0, fp, lsl #3
     6d8:	8a080103 	bhi	200aec <__bss_end__+0x1f6724>
     6dc:	03000000 	movweq	r0, #0
     6e0:	00ad0702 	adceq	r0, sp, r2, lsl #14
     6e4:	04030000 	streq	r0, [r3], #-0
     6e8:	00016307 	andeq	r6, r1, r7, lsl #6
     6ec:	07080300 	streq	r0, [r8, -r0, lsl #6]
     6f0:	0000015e 	andeq	r0, r0, lr, asr r1
     6f4:	82070403 	andhi	r0, r7, #50331648	; 0x3000000
     6f8:	03000001 	movweq	r0, #1
     6fc:	00930801 	addseq	r0, r3, r1, lsl #16
     700:	60040000 	andvs	r0, r4, r0
     704:	01000002 	tsteq	r0, r2
     708:	00002503 	andeq	r2, r0, r3, lsl #10
     70c:	0082d000 	addeq	sp, r2, r0
     710:	00001400 	andeq	r1, r0, r0, lsl #8
     714:	b09c0100 	addslt	r0, ip, r0, lsl #2
     718:	05000000 	streq	r0, [r0, #-0]
     71c:	03010063 	movweq	r0, #4195	; 0x1063
     720:	00000025 	andeq	r0, r0, r5, lsr #32
     724:	000000a2 	andeq	r0, r0, r2, lsr #1
     728:	0082dc06 	addeq	sp, r2, r6, lsl #24
     72c:	00010900 	andeq	r0, r1, r0, lsl #18
     730:	50010700 	andpl	r0, r1, r0, lsl #14
     734:	00007402 	andeq	r7, r0, r2, lsl #8
     738:	01d20800 	bicseq	r0, r2, r0, lsl #16
     73c:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
     740:	000082e4 	andeq	r8, r0, r4, ror #5
     744:	00000018 	andeq	r0, r0, r8, lsl r0
     748:	8c099c01 	stchi	12, cr9, [r9], {1}
     74c:	01000002 	tsteq	r0, r2
     750:	0082fc0b 	addeq	pc, r2, fp, lsl #24
     754:	00001000 	andeq	r1, r0, r0
     758:	e39c0100 	orrs	r0, ip, #0, 2
     75c:	0a000000 	beq	764 <_start-0x789c>
     760:	01007066 	tsteq	r0, r6, rrx
     764:	0000f20b 	andeq	pc, r0, fp, lsl #4
     768:	00500100 	subseq	r0, r0, r0, lsl #2
     76c:	0000250b 	andeq	r2, r0, fp, lsl #10
     770:	0000f200 	andeq	pc, r0, r0, lsl #4
     774:	00250c00 	eoreq	r0, r5, r0, lsl #24
     778:	0d000000 	stceq	0, cr0, [r0, #-0]
     77c:	0000e304 	andeq	lr, r0, r4, lsl #6
     780:	02710e00 	rsbseq	r0, r1, #0, 28
     784:	06010000 	streq	r0, [r1], -r0
     788:	000000f2 	strdeq	r0, [r0], -r2
     78c:	99a40305 	stmibls	r4!, {r0, r2, r8, r9}
     790:	e10f0000 	mrs	r0, CPSR
     794:	02000003 	andeq	r0, r0, #3
     798:	002c0c3c 	eoreq	r0, ip, ip, lsr ip
     79c:	00000000 	andeq	r0, r0, r0
     7a0:	000000ee 	andeq	r0, r0, lr, ror #1
     7a4:	037c0004 	cmneq	ip, #4
     7a8:	01040000 	mrseq	r0, (UNDEF: 4)
     7ac:	00000021 	andeq	r0, r0, r1, lsr #32
     7b0:	00029901 	andeq	r9, r2, r1, lsl #18
     7b4:	00021200 	andeq	r1, r2, r0, lsl #4
     7b8:	00830c00 	addeq	r0, r3, r0, lsl #24
     7bc:	00003400 	andeq	r3, r0, r0, lsl #8
     7c0:	0002b800 	andeq	fp, r2, r0, lsl #16
     7c4:	05040200 	streq	r0, [r4, #-512]	; 0x200
     7c8:	00746e69 	rsbseq	r6, r4, r9, ror #28
     7cc:	68070403 	stmdavs	r7, {r0, r1, sl}
     7d0:	03000001 	movweq	r0, #1
     7d4:	008c0601 	addeq	r0, ip, r1, lsl #12
     7d8:	02030000 	andeq	r0, r3, #0
     7dc:	0001a405 	andeq	sl, r1, r5, lsl #8
     7e0:	05040300 	streq	r0, [r4, #-768]	; 0x300
     7e4:	00000190 	muleq	r0, r0, r1
     7e8:	8b050803 	blhi	1427fc <__bss_end__+0x138434>
     7ec:	03000001 	movweq	r0, #1
     7f0:	008a0801 	addeq	r0, sl, r1, lsl #16
     7f4:	02030000 	andeq	r0, r3, #0
     7f8:	0000ad07 	andeq	sl, r0, r7, lsl #26
     7fc:	07040300 	streq	r0, [r4, -r0, lsl #6]
     800:	00000163 	andeq	r0, r0, r3, ror #2
     804:	5e070803 	cdppl	8, 0, cr0, cr7, cr3, {0}
     808:	03000001 	movweq	r0, #1
     80c:	01820704 	orreq	r0, r2, r4, lsl #14
     810:	01030000 	mrseq	r0, (UNDEF: 3)
     814:	00009308 	andeq	r9, r0, r8, lsl #6
     818:	7f040400 	svcvc	0x00040400
     81c:	05000000 	streq	r0, [r0, #-0]
     820:	00000072 	andeq	r0, r0, r2, ror r0
     824:	0002a506 	andeq	sl, r2, r6, lsl #10
     828:	25040100 	strcs	r0, [r4, #-256]	; 0x100
     82c:	0c000000 	stceq	0, cr0, [r0], {-0}
     830:	34000083 	strcc	r0, [r0], #-131	; 0x83
     834:	01000000 	mrseq	r0, (UNDEF: 0)
     838:	0000ab9c 	muleq	r0, ip, fp
     83c:	00700700 	rsbseq	r0, r0, r0, lsl #14
     840:	00790401 	rsbseq	r0, r9, r1, lsl #8
     844:	00c00000 	sbceq	r0, r0, r0
     848:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     84c:	00000025 	andeq	r0, r0, r5, lsr #32
     850:	000000ba 	strheq	r0, [r0], -sl
     854:	00002509 	andeq	r2, r0, r9, lsl #10
     858:	710a0000 	mrsvc	r0, (UNDEF: 10)
     85c:	02000002 	andeq	r0, r0, #2
     860:	0000c51d 	andeq	ip, r0, sp, lsl r5
     864:	ab040400 	blge	10186c <__bss_end__+0xf74a4>
     868:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     86c:	00000025 	andeq	r0, r0, r5, lsr #32
     870:	000000da 	ldrdeq	r0, [r0], -sl
     874:	00007909 	andeq	r7, r0, r9, lsl #18
     878:	ae0b0000 	cdpge	0, 0, cr0, cr11, cr0, {0}
     87c:	01000002 	tsteq	r0, r2
     880:	0000eb0c 	andeq	lr, r0, ip, lsl #22
     884:	a8030500 	stmdage	r3, {r8, sl}
     888:	04000099 	streq	r0, [r0], #-153	; 0x99
     88c:	0000cb04 	andeq	ip, r0, r4, lsl #22
     890:	06810000 	streq	r0, [r1], r0
     894:	00040000 	andeq	r0, r4, r0
     898:	00000415 	andeq	r0, r0, r5, lsl r4
     89c:	00210104 	eoreq	r0, r1, r4, lsl #2
     8a0:	df010000 	svcle	0x00010000
     8a4:	12000002 	andne	r0, r0, #2
     8a8:	40000002 	andmi	r0, r0, r2
     8ac:	f8000083 			; <UNDEFINED> instruction: 0xf8000083
     8b0:	52000004 	andpl	r0, r0, #4
     8b4:	02000003 	andeq	r0, r0, #3
     8b8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     8bc:	04030074 	streq	r0, [r3], #-116	; 0x74
     8c0:	00016807 	andeq	r6, r1, r7, lsl #16
     8c4:	06010300 	streq	r0, [r1], -r0, lsl #6
     8c8:	0000008c 	andeq	r0, r0, ip, lsl #1
     8cc:	a4050203 	strge	r0, [r5], #-515	; 0x203
     8d0:	03000001 	movweq	r0, #1
     8d4:	01900504 	orrseq	r0, r0, r4, lsl #10
     8d8:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     8dc:	00018b05 	andeq	r8, r1, r5, lsl #22
     8e0:	08010300 	stmdaeq	r1, {r8, r9}
     8e4:	0000008a 	andeq	r0, r0, sl, lsl #1
     8e8:	ad070203 	sfmge	f0, 4, [r7, #-12]
     8ec:	03000000 	movweq	r0, #0
     8f0:	01630704 	cmneq	r3, r4, lsl #14
     8f4:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     8f8:	00015e07 	andeq	r5, r1, r7, lsl #28
     8fc:	07040300 	streq	r0, [r4, -r0, lsl #6]
     900:	00000182 	andeq	r0, r0, r2, lsl #3
     904:	04050404 	streq	r0, [r5], #-1028	; 0x404
     908:	0000007a 	andeq	r0, r0, sl, ror r0
     90c:	93080103 	movwls	r0, #33027	; 0x8103
     910:	05000000 	streq	r0, [r0, #-0]
     914:	00008704 	andeq	r8, r0, r4, lsl #14
     918:	007a0600 	rsbseq	r0, sl, r0, lsl #12
     91c:	e1070000 	mrs	r0, (UNDEF: 7)
     920:	02000001 	andeq	r0, r0, #1
     924:	00009728 	andeq	r9, r0, r8, lsr #14
     928:	02080800 	andeq	r0, r8, #0, 16
     92c:	04040000 	streq	r0, [r4], #-0
     930:	0000ae00 	andeq	sl, r0, r0, lsl #28
     934:	025b0900 	subseq	r0, fp, #0, 18
     938:	00720000 	rsbseq	r0, r2, r0
     93c:	00000000 	andeq	r0, r0, r0
     940:	00020a07 	andeq	r0, r2, r7, lsl #20
     944:	8c620200 	sfmhi	f0, 2, [r2], #-0
     948:	0a000000 	beq	950 <_start-0x76b0>
     94c:	000002c1 	andeq	r0, r0, r1, asr #5
     950:	00252701 	eoreq	r2, r5, r1, lsl #14
     954:	83400000 	movthi	r0, #0
     958:	00140000 	andseq	r0, r4, r0
     95c:	9c010000 	stcls	0, cr0, [r1], {-0}
     960:	000000e0 	andeq	r0, r0, r0, ror #1
     964:	0100630b 	tsteq	r0, fp, lsl #6
     968:	00002527 	andeq	r2, r0, r7, lsr #10
     96c:	0000de00 	andeq	sp, r0, r0, lsl #28
     970:	700c0000 	andvc	r0, ip, r0
     974:	01006461 	tsteq	r0, r1, ror #8
     978:	0000742e 	andeq	r7, r0, lr, lsr #8
     97c:	00835400 	addeq	r5, r3, r0, lsl #8
     980:	00002c00 	andeq	r2, r0, r0, lsl #24
     984:	309c0100 	addscc	r0, ip, r0, lsl #2
     988:	0b000001 	bleq	994 <_start-0x766c>
     98c:	2e010070 	mcrcs	0, 0, r0, cr1, cr0, {3}
     990:	00000074 	andeq	r0, r0, r4, ror r0
     994:	0000010c 	andeq	r0, r0, ip, lsl #2
     998:	0002d10d 	andeq	sp, r2, sp, lsl #2
     99c:	742e0100 	strtvc	r0, [lr], #-256	; 0x100
     9a0:	37000000 	strcc	r0, [r0, -r0]
     9a4:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     9a8:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     9ac:	00252e01 	eoreq	r2, r5, r1, lsl #28
     9b0:	52010000 	andpl	r0, r1, #0
     9b4:	6e656c0f 	cdpvs	12, 6, cr6, cr5, cr15, {0}
     9b8:	252f0100 	strcs	r0, [pc, #-256]!	; 8c0 <_start-0x7740>
     9bc:	01000000 	mrseq	r0, (UNDEF: 0)
     9c0:	b90a0051 	stmdblt	sl, {r0, r4, r6}
     9c4:	01000002 	tsteq	r0, r2
     9c8:	00007437 	andeq	r7, r0, r7, lsr r4
     9cc:	00838000 	addeq	r8, r3, r0
     9d0:	00004000 	andeq	r4, r0, r0
     9d4:	9c9c0100 	ldflss	f0, [ip], {0}
     9d8:	0b000001 	bleq	9e4 <_start-0x761c>
     9dc:	00747364 	rsbseq	r7, r4, r4, ror #6
     9e0:	00743701 	rsbseq	r3, r4, r1, lsl #14
     9e4:	01580000 	cmpeq	r8, r0
     9e8:	6e0b0000 	cdpvs	0, 0, cr0, cr11, cr0, {0}
     9ec:	25370100 	ldrcs	r0, [r7, #-256]!	; 0x100
     9f0:	90000000 	andls	r0, r0, r0
     9f4:	0b000001 	bleq	a00 <_start-0x7600>
     9f8:	37010070 	smlsdxcc	r1, r0, r0, r0
     9fc:	00000074 	andeq	r0, r0, r4, ror r0
     a00:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
     a04:	0005a40d 	andeq	sl, r5, sp, lsl #8
     a08:	74370100 	ldrtvc	r0, [r7], #-256	; 0x100
     a0c:	e7000000 	str	r0, [r0, -r0]
     a10:	10000001 	andne	r0, r0, r1
     a14:	006e656c 	rsbeq	r6, lr, ip, ror #10
     a18:	00253901 	eoreq	r3, r5, r1, lsl #18
     a1c:	02050000 	andeq	r0, r5, #0
     a20:	730f0000 	movwvc	r0, #61440	; 0xf000
     a24:	743d0100 	ldrtvc	r0, [sp], #-256	; 0x100
     a28:	01000000 	mrseq	r0, (UNDEF: 0)
     a2c:	0d0a0050 	stceq	0, cr0, [sl, #-320]	; 0xfffffec0
     a30:	01000003 	tsteq	r0, r3
     a34:	00007447 	andeq	r7, r0, r7, asr #8
     a38:	0083c000 	addeq	ip, r3, r0
     a3c:	00019c00 	andeq	r9, r1, r0, lsl #24
     a40:	d39c0100 	orrsle	r0, ip, #0, 2
     a44:	0d000002 	stceq	0, cr0, [r0, #-8]
     a48:	000002d1 	ldrdeq	r0, [r0], -r1
     a4c:	002c4701 	eoreq	r4, ip, r1, lsl #14
     a50:	022c0000 	eoreq	r0, ip, #0
     a54:	640b0000 	strvs	r0, [fp], #-0
     a58:	01007473 	tsteq	r0, r3, ror r4
     a5c:	00007447 	andeq	r7, r0, r7, asr #8
     a60:	00025a00 	andeq	r5, r2, r0, lsl #20
     a64:	006e0b00 	rsbeq	r0, lr, r0, lsl #22
     a68:	00254701 	eoreq	r4, r5, r1, lsl #14
     a6c:	02c80000 	sbceq	r0, r8, #0
     a70:	760b0000 	strvc	r0, [fp], -r0
     a74:	01006c61 	tsteq	r0, r1, ror #24
     a78:	00002547 	andeq	r2, r0, r7, asr #10
     a7c:	0002f400 	andeq	pc, r2, r0, lsl #8
     a80:	02ff0d00 	rscseq	r0, pc, #0, 26
     a84:	47010000 	strmi	r0, [r1, -r0]
     a88:	00000025 	andeq	r0, r0, r5, lsr #32
     a8c:	00000373 	andeq	r0, r0, r3, ror r3
     a90:	0002d60e 	andeq	sp, r2, lr, lsl #12
     a94:	25470100 	strbcs	r0, [r7, #-256]	; 0x100
     a98:	02000000 	andeq	r0, r0, #0
     a9c:	620f0491 	andvs	r0, pc, #-1862270976	; 0x91000000
     aa0:	01006675 	tsteq	r0, r5, ror r6
     aa4:	0002d34c 	andeq	sp, r2, ip, asr #6
     aa8:	a8910300 	ldmge	r1, {r8, r9}
     aac:	0070107f 	rsbseq	r1, r0, pc, ror r0
     ab0:	00744c01 	rsbseq	r4, r4, r1, lsl #24
     ab4:	039d0000 	orrseq	r0, sp, #0
     ab8:	75100000 	ldrvc	r0, [r0, #-0]
     abc:	2c4d0100 	stfcse	f0, [sp], {-0}
     ac0:	42000000 	andmi	r0, r0, #0
     ac4:	11000004 	tstne	r0, r4
     ac8:	0000012d 	andeq	r0, r0, sp, lsr #2
     acc:	000002f3 	strdeq	r0, [r0], -r3
     ad0:	9c000305 	stcls	3, cr0, [r0], {5}
     ad4:	2c120000 	ldccs	0, cr0, [r2], {-0}
     ad8:	74000084 	strvc	r0, [r0], #-132	; 0x84
     adc:	61000000 	mrsvs	r0, (UNDEF: 0)
     ae0:	13000002 	movwne	r0, #2
     ae4:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
     ae8:	002c5201 	eoreq	r5, ip, r1, lsl #4
     aec:	05470000 	strbeq	r0, [r7, #-0]
     af0:	14000000 	strne	r0, [r0], #-0
     af4:	00008500 	andeq	r8, r0, r0, lsl #10
     af8:	00000660 	andeq	r0, r0, r0, ror #12
     afc:	00851415 	addeq	r1, r5, r5, lsl r4
     b00:	00066700 	andeq	r6, r6, r0, lsl #14
     b04:	00029900 	andeq	r9, r2, r0, lsl #18
     b08:	53011600 	movwpl	r1, #5632	; 0x1600
     b0c:	16750802 	ldrbtne	r0, [r5], -r2, lsl #16
     b10:	03055201 	movweq	r5, #20993	; 0x5201
     b14:	00009c00 	andeq	r9, r0, r0, lsl #24
     b18:	05510116 	ldrbeq	r0, [r1, #-278]	; 0x116
     b1c:	009c3803 	addseq	r3, ip, r3, lsl #16
     b20:	50011600 	andpl	r1, r1, r0, lsl #12
     b24:	9c240305 	stcls	3, cr0, [r4], #-20	; 0xffffffec
     b28:	14000000 	strne	r0, [r0], #-0
     b2c:	00008518 	andeq	r8, r0, r8, lsl r5
     b30:	0000067d 	andeq	r0, r0, sp, ror r6
     b34:	00852415 	addeq	r2, r5, r5, lsl r4
     b38:	0000e000 	andeq	lr, r0, r0
     b3c:	0002b600 	andeq	fp, r2, r0, lsl #12
     b40:	51011600 	tstpl	r1, r0, lsl #12
     b44:	00007d02 	andeq	r7, r0, r2, lsl #26
     b48:	00853817 	addeq	r3, r5, r7, lsl r8
     b4c:	00013000 	andeq	r3, r1, r0
     b50:	53011600 	movwpl	r1, #5632	; 0x1600
     b54:	16007d02 	strne	r7, [r0], -r2, lsl #26
     b58:	74025101 	strvc	r5, [r2], #-257	; 0x101
     b5c:	50011600 	andpl	r1, r1, r0, lsl #12
     b60:	00007502 	andeq	r7, r0, r2, lsl #10
     b64:	007a1800 	rsbseq	r1, sl, r0, lsl #16
     b68:	02e30000 	rsceq	r0, r3, #0
     b6c:	6b190000 	blvs	640b74 <__bss_end__+0x6367ac>
     b70:	3f000000 	svccc	0x00000000
     b74:	007a1800 	rsbseq	r1, sl, r0, lsl #16
     b78:	02f30000 	rscseq	r0, r3, #0
     b7c:	6b190000 	blvs	640b84 <__bss_end__+0x6367bc>
     b80:	04000000 	streq	r0, [r0], #-0
     b84:	02e30600 	rsceq	r0, r3, #0, 12
     b88:	f01a0000 			; <UNDEFINED> instruction: 0xf01a0000
     b8c:	01000002 	tsteq	r0, r2
     b90:	00855c1f 	addeq	r5, r5, pc, lsl ip
     b94:	00005400 	andeq	r5, r0, r0, lsl #8
     b98:	7c9c0100 	ldfvcs	f0, [ip], {0}
     b9c:	0d000003 	stceq	0, cr0, [r0, #-12]
     ba0:	00000305 	andeq	r0, r0, r5, lsl #6
     ba4:	038b1f01 	orreq	r1, fp, #1, 30
     ba8:	05730000 	ldrbeq	r0, [r3, #-0]!
     bac:	c90d0000 	stmdbgt	sp, {}	; <UNPREDICTABLE>
     bb0:	01000002 	tsteq	r0, r2
     bb4:	0003a01f 	andeq	sl, r3, pc, lsl r0
     bb8:	00059f00 	andeq	r9, r5, r0, lsl #30
     bbc:	012d1100 	teqeq	sp, r0, lsl #2
     bc0:	03b60000 			; <UNDEFINED> instruction: 0x03b60000
     bc4:	03050000 	movweq	r0, #20480	; 0x5000
     bc8:	00009c08 	andeq	r9, r0, r8, lsl #24
     bcc:	00856c14 	addeq	r6, r5, r4, lsl ip
     bd0:	00066000 	andeq	r6, r6, r0
     bd4:	85801500 	strhi	r1, [r0, #1280]	; 0x500
     bd8:	06670000 	strbteq	r0, [r7], -r0
     bdc:	03720000 	cmneq	r2, #0
     be0:	01160000 	tsteq	r6, r0
     be4:	20080253 	andcs	r0, r8, r3, asr r2
     be8:	05520116 	ldrbeq	r0, [r2, #-278]	; 0x116
     bec:	009c0803 	addseq	r0, ip, r3, lsl #16
     bf0:	51011600 	tstpl	r1, r0, lsl #12
     bf4:	9c380305 	ldcls	3, cr0, [r8], #-20	; 0xffffffec
     bf8:	01160000 	tsteq	r6, r0
     bfc:	70030550 	andvc	r0, r3, r0, asr r5
     c00:	0000009c 	muleq	r0, ip, r0
     c04:	00858414 	addeq	r8, r5, r4, lsl r4
     c08:	00067d00 	andeq	r7, r6, r0, lsl #26
     c0c:	251b0000 	ldrcs	r0, [fp, #-0]
     c10:	8b000000 	blhi	c18 <_start-0x73e8>
     c14:	1c000003 	stcne	0, cr0, [r0], {3}
     c18:	00000025 	andeq	r0, r0, r5, lsr #32
     c1c:	7c040500 	cfstr32vc	mvfx0, [r4], {-0}
     c20:	1b000003 	blne	c34 <_start-0x73cc>
     c24:	00000025 	andeq	r0, r0, r5, lsr #32
     c28:	000003a0 	andeq	r0, r0, r0, lsr #7
     c2c:	0000811c 	andeq	r8, r0, ip, lsl r1
     c30:	04050000 	streq	r0, [r5], #-0
     c34:	00000391 	muleq	r0, r1, r3
     c38:	00007a18 	andeq	r7, r0, r8, lsl sl
     c3c:	0003b600 	andeq	fp, r3, r0, lsl #12
     c40:	006b1900 	rsbeq	r1, fp, r0, lsl #18
     c44:	000e0000 	andeq	r0, lr, r0
     c48:	0003a606 	andeq	sl, r3, r6, lsl #12
     c4c:	01fe1d00 	mvnseq	r1, r0, lsl #26
     c50:	7d010000 	stcvc	0, cr0, [r1, #-0]
     c54:	00000025 	andeq	r0, r0, r5, lsr #32
     c58:	000085b0 			; <UNDEFINED> instruction: 0x000085b0
     c5c:	00000288 	andeq	r0, r0, r8, lsl #5
     c60:	06259c01 	strteq	r9, [r5], -r1, lsl #24
     c64:	620b0000 	andvs	r0, fp, #0
     c68:	01006675 	tsteq	r0, r5, ror r6
     c6c:	0000747d 	andeq	r7, r0, sp, ror r4
     c70:	0005cb00 	andeq	ip, r5, r0, lsl #22
     c74:	006e0b00 	rsbeq	r0, lr, r0, lsl #22
     c78:	00257d01 	eoreq	r7, r5, r1, lsl #26
     c7c:	05f70000 	ldrbeq	r0, [r7, #0]!
     c80:	660b0000 	strvs	r0, [fp], -r0
     c84:	0100746d 	tsteq	r0, sp, ror #8
     c88:	0000817d 	andeq	r8, r0, sp, ror r1
     c8c:	00062500 	andeq	r2, r6, r0, lsl #10
     c90:	02560d00 	subseq	r0, r6, #0, 26
     c94:	7d010000 	stcvc	0, cr0, [r1, #-0]
     c98:	000000ae 	andeq	r0, r0, lr, lsr #1
     c9c:	00000659 	andeq	r0, r0, r9, asr r6
     ca0:	01007010 	tsteq	r0, r0, lsl r0
     ca4:	0000747e 	andeq	r7, r0, lr, ror r4
     ca8:	00066c00 	andeq	r6, r6, r0, lsl #24
     cac:	00651000 	rsbeq	r1, r5, r0
     cb0:	00747e01 	rsbseq	r7, r4, r1, lsl #28
     cb4:	06ea0000 	strbteq	r0, [sl], r0
     cb8:	2d110000 	ldccs	0, cr0, [r1, #-0]
     cbc:	35000001 	strcc	r0, [r0, #-1]
     cc0:	05000006 	streq	r0, [r0, #-6]
     cc4:	009c1803 	addseq	r1, ip, r3, lsl #16
     cc8:	00001e00 	andeq	r1, r0, r0, lsl #28
     ccc:	73100000 	tstvc	r0, #0
     cd0:	748b0100 	strvc	r0, [fp], #256	; 0x100
     cd4:	11000000 	mrsne	r0, (UNDEF: 0)
     cd8:	0f000007 	svceq	0x00000007
     cdc:	006d756e 	rsbeq	r7, sp, lr, ror #10
     ce0:	063a8b01 	ldrteq	r8, [sl], -r1, lsl #22
     ce4:	91030000 	mrsls	r0, (UNDEF: 3)
     ce8:	ff137ed8 			; <UNDEFINED> instruction: 0xff137ed8
     cec:	01000002 	tsteq	r0, r2
     cf0:	00002c8c 	andeq	r2, r0, ip, lsl #25
     cf4:	00076600 	andeq	r6, r7, r0, lsl #12
     cf8:	86341500 	ldrthi	r1, [r4], -r0, lsl #10
     cfc:	00b90000 	adcseq	r0, r9, r0
     d00:	047b0000 	ldrbteq	r0, [fp], #-0
     d04:	01160000 	tsteq	r6, r0
     d08:	00750250 	rsbseq	r0, r5, r0, asr r2
     d0c:	86481400 	strbhi	r1, [r8], -r0, lsl #8
     d10:	06600000 	strbteq	r0, [r0], -r0
     d14:	5c150000 	ldcpl	0, cr0, [r5], {-0}
     d18:	67000086 	strvs	r0, [r0, -r6, lsl #1]
     d1c:	b3000006 	movwlt	r0, #6
     d20:	16000004 	strne	r0, [r0], -r4
     d24:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     d28:	52011692 	andpl	r1, r1, #153092096	; 0x9200000
     d2c:	9c180305 	ldcls	3, cr0, [r8], {5}
     d30:	01160000 	tsteq	r6, r0
     d34:	38030551 	stmdacc	r3, {r0, r4, r6, r8, sl}
     d38:	1600009c 			; <UNDEFINED> instruction: 0x1600009c
     d3c:	03055001 	movweq	r5, #20481	; 0x5001
     d40:	00009c88 	andeq	r9, r0, r8, lsl #25
     d44:	86601400 	strbthi	r1, [r0], -r0, lsl #8
     d48:	067d0000 	ldrbteq	r0, [sp], -r0
     d4c:	d0140000 	andsle	r0, r4, r0
     d50:	60000086 	andvs	r0, r0, r6, lsl #1
     d54:	15000006 	strne	r0, [r0, #-6]
     d58:	000086e4 	andeq	r8, r0, r4, ror #13
     d5c:	00000667 	andeq	r0, r0, r7, ror #12
     d60:	000004f4 	strdeq	r0, [r0], -r4
     d64:	02530116 	subseq	r0, r3, #-2147483643	; 0x80000005
     d68:	01169808 	tsteq	r6, r8, lsl #16
     d6c:	18030552 	stmdane	r3, {r1, r4, r6, r8, sl}
     d70:	1600009c 			; <UNDEFINED> instruction: 0x1600009c
     d74:	03055101 	movweq	r5, #20737	; 0x5101
     d78:	00009c38 	andeq	r9, r0, r8, lsr ip
     d7c:	05500116 	ldrbeq	r0, [r0, #-278]	; 0x116
     d80:	009ca403 	addseq	sl, ip, r3, lsl #8
     d84:	e8140000 	ldmda	r4, {}	; <UNPREDICTABLE>
     d88:	7d000086 	stcvc	0, cr0, [r0, #-536]	; 0xfffffde8
     d8c:	15000006 	strne	r0, [r0, #-6]
     d90:	0000870c 	andeq	r8, r0, ip, lsl #14
     d94:	0000019c 	muleq	r0, ip, r1
     d98:	0000052a 	andeq	r0, r0, sl, lsr #10
     d9c:	02520116 	subseq	r0, r2, #-2147483643	; 0x80000005
     da0:	01168008 	tsteq	r6, r8
     da4:	d0910351 	addsle	r0, r1, r1, asr r3
     da8:	5001167e 	andpl	r1, r1, lr, ror r6
     dac:	02163a01 	andseq	r3, r6, #4096	; 0x1000
     db0:	3101047d 	tstcc	r1, sp, ror r4
     db4:	007d0216 	rsbseq	r0, sp, r6, lsl r2
     db8:	00007702 	andeq	r7, r0, r2, lsl #14
     dbc:	00873015 	addeq	r3, r7, r5, lsl r0
     dc0:	00019c00 	andeq	r9, r1, r0, lsl #24
     dc4:	00055800 	andeq	r5, r5, r0, lsl #16
     dc8:	52011600 	andpl	r1, r1, #0, 12
     dcc:	16800802 	strne	r0, [r0], r2, lsl #16
     dd0:	91035101 	tstls	r3, r1, lsl #2
     dd4:	01167ed0 			; <UNDEFINED> instruction: 0x01167ed0
     dd8:	163a0150 			; <UNDEFINED> instruction: 0x163a0150
     ddc:	02047d02 	andeq	r7, r4, #2, 26	; 0x80
     de0:	0216007b 	andseq	r0, r6, #123	; 0x7b
     de4:	7702007d 	smlsdxvc	r2, sp, r0, r0
     de8:	54150000 	ldrpl	r0, [r5], #-0
     dec:	9c000087 	stcls	0, cr0, [r0], {135}	; 0x87
     df0:	86000001 	strhi	r0, [r0], -r1
     df4:	16000005 	strne	r0, [r0], -r5
     df8:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
     dfc:	51011680 	smlabbpl	r1, r0, r6, r1
     e00:	7ed09103 	atnvcs	f1, f3
     e04:	01500116 	cmpeq	r0, r6, lsl r1
     e08:	7d021640 	stcvc	6, cr1, [r2, #-256]	; 0xffffff00
     e0c:	007b0204 	rsbseq	r0, fp, r4, lsl #4
     e10:	007d0216 	rsbseq	r0, sp, r6, lsl r2
     e14:	00007702 	andeq	r7, r0, r2, lsl #14
     e18:	00877815 	addeq	r7, r7, r5, lsl r8
     e1c:	00019c00 	andeq	r9, r1, r0, lsl #24
     e20:	0005b400 	andeq	fp, r5, r0, lsl #8
     e24:	52011600 	andpl	r1, r1, #0, 12
     e28:	16800802 	strne	r0, [r0], r2, lsl #16
     e2c:	91035101 	tstls	r3, r1, lsl #2
     e30:	01167ed0 			; <UNDEFINED> instruction: 0x01167ed0
     e34:	16320150 			; <UNDEFINED> instruction: 0x16320150
     e38:	02047d02 	andeq	r7, r4, #2, 26	; 0x80
     e3c:	0216007b 	andseq	r0, r6, #123	; 0x7b
     e40:	7702007d 	smlsdxvc	r2, sp, r0, r0
     e44:	a8150000 	ldmdage	r5, {}	; <UNPREDICTABLE>
     e48:	9c000087 	stcls	0, cr0, [r0], {135}	; 0x87
     e4c:	e2000001 	and	r0, r0, #1
     e50:	16000005 	strne	r0, [r0], -r5
     e54:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
     e58:	51011680 	smlabbpl	r1, r0, r6, r1
     e5c:	7ed09103 	atnvcs	f1, f3
     e60:	01500116 	cmpeq	r0, r6, lsl r1
     e64:	7d021638 	stcvc	6, cr1, [r2, #-224]	; 0xffffff20
     e68:	007b0204 	rsbseq	r0, fp, r4, lsl #4
     e6c:	007d0216 	rsbseq	r0, sp, r6, lsl r2
     e70:	00007702 	andeq	r7, r0, r2, lsl #14
     e74:	0087b014 	addeq	fp, r7, r4, lsl r0
     e78:	00066000 	andeq	r6, r6, r0
     e7c:	87cc1500 	strbhi	r1, [ip, r0, lsl #10]
     e80:	06670000 	strbteq	r0, [r7], -r0
     e84:	061a0000 	ldreq	r0, [sl], -r0
     e88:	01160000 	tsteq	r6, r0
     e8c:	b9080253 	stmdblt	r8, {r0, r1, r4, r6, r9}
     e90:	05520116 	ldrbeq	r0, [r2, #-278]	; 0x116
     e94:	009c1803 	addseq	r1, ip, r3, lsl #16
     e98:	51011600 	tstpl	r1, r0, lsl #12
     e9c:	9c380305 	ldcls	3, cr0, [r8], #-20	; 0xffffffec
     ea0:	01160000 	tsteq	r6, r0
     ea4:	cc030550 	cfstr32gt	mvfx0, [r3], {80}	; 0x50
     ea8:	0000009c 	muleq	r0, ip, r0
     eac:	0087d014 	addeq	sp, r7, r4, lsl r0
     eb0:	00067d00 	andeq	r7, r6, r0, lsl #26
     eb4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     eb8:	0000007a 	andeq	r0, r0, sl, ror r0
     ebc:	00000635 	andeq	r0, r0, r5, lsr r6
     ec0:	00006b19 	andeq	r6, r0, r9, lsl fp
     ec4:	06000900 	streq	r0, [r0], -r0, lsl #18
     ec8:	00000625 	andeq	r0, r0, r5, lsr #12
     ecc:	00007a18 	andeq	r7, r0, r8, lsl sl
     ed0:	00064a00 	andeq	r4, r6, r0, lsl #20
     ed4:	006b1900 	rsbeq	r1, fp, r0, lsl #18
     ed8:	007f0000 	rsbseq	r0, pc, r0
     edc:	0002711f 	andeq	r7, r2, pc, lsl r1
     ee0:	8b1d0300 	blhi	741ae8 <__bss_end__+0x737720>
     ee4:	1f000003 	svcne	0x00000003
     ee8:	000002ae 	andeq	r0, r0, lr, lsr #5
     eec:	03a02203 	moveq	r2, #805306368	; 0x30000000
     ef0:	d2200000 	eorle	r0, r0, #0
     ef4:	03000001 	movweq	r0, #1
     ef8:	0201211e 	andeq	r2, r1, #-2147483641	; 0x80000007
     efc:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
     f00:	00000025 	andeq	r0, r0, r5, lsr #32
     f04:	0000067d 	andeq	r0, r0, sp, ror r6
     f08:	0000811c 	andeq	r8, r0, ip, lsl r1
     f0c:	20002200 	andcs	r2, r0, r0, lsl #4
     f10:	00000098 	muleq	r0, r8, r0
     f14:	ff006603 			; <UNDEFINED> instruction: 0xff006603
     f18:	04000000 	streq	r0, [r0], #-0
     f1c:	0005f100 	andeq	pc, r5, r0, lsl #2
     f20:	21010400 	tstcs	r1, r0, lsl #8
     f24:	01000000 	mrseq	r0, (UNDEF: 0)
     f28:	0000031d 	andeq	r0, r0, sp, lsl r3
     f2c:	00000212 	andeq	r0, r0, r2, lsl r2
     f30:	00008838 	andeq	r8, r0, r8, lsr r8
     f34:	00000028 	andeq	r0, r0, r8, lsr #32
     f38:	00000534 	andeq	r0, r0, r4, lsr r5
     f3c:	69050402 	stmdbvs	r5, {r1, sl}
     f40:	0300746e 	movweq	r7, #1134	; 0x46e
     f44:	01680704 	cmneq	r8, r4, lsl #14
     f48:	01030000 	mrseq	r0, (UNDEF: 3)
     f4c:	00008c06 	andeq	r8, r0, r6, lsl #24
     f50:	05020300 	streq	r0, [r2, #-768]	; 0x300
     f54:	000001a4 	andeq	r0, r0, r4, lsr #3
     f58:	90050403 	andls	r0, r5, r3, lsl #8
     f5c:	03000001 	movweq	r0, #1
     f60:	018b0508 	orreq	r0, fp, r8, lsl #10
     f64:	01030000 	mrseq	r0, (UNDEF: 3)
     f68:	00008a08 	andeq	r8, r0, r8, lsl #20
     f6c:	07020300 	streq	r0, [r2, -r0, lsl #6]
     f70:	000000ad 	andeq	r0, r0, sp, lsr #1
     f74:	63070403 	movwvs	r0, #29699	; 0x7403
     f78:	03000001 	movweq	r0, #1
     f7c:	015e0708 	cmpeq	lr, r8, lsl #14
     f80:	04030000 	streq	r0, [r3], #-0
     f84:	00018207 	andeq	r8, r1, r7, lsl #4
     f88:	08010300 	stmdaeq	r1, {r8, r9}
     f8c:	00000093 	muleq	r0, r3, r0
     f90:	007f0404 	rsbseq	r0, pc, r4, lsl #8
     f94:	72050000 	andvc	r0, r5, #0
     f98:	06000000 	streq	r0, [r0], -r0
     f9c:	00000098 	muleq	r0, r8, r0
     fa0:	88380401 	ldmdahi	r8!, {r0, sl}
     fa4:	00280000 	eoreq	r0, r8, r0
     fa8:	9c010000 	stcls	0, cr0, [r1], {-0}
     fac:	000000ca 	andeq	r0, r0, sl, asr #1
     fb0:	00884c07 	addeq	r4, r8, r7, lsl #24
     fb4:	0000ac00 	andeq	sl, r0, r0, lsl #24
     fb8:	50010800 	andpl	r0, r1, r0, lsl #16
     fbc:	9d040305 	stcls	3, cr0, [r4, #-20]	; 0xffffffec
     fc0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     fc4:	00008854 	andeq	r8, r0, r4, asr r8
     fc8:	000000ea 	andeq	r0, r0, sl, ror #1
     fcc:	000000c0 	andeq	r0, r0, r0, asr #1
     fd0:	02500108 	subseq	r0, r0, #8, 2
     fd4:	0a006408 	beq	19ffc <__bss_end__+0xfc34>
     fd8:	00008858 	andeq	r8, r0, r8, asr r8
     fdc:	000000fb 	strdeq	r0, [r0], -fp
     fe0:	00250b00 	eoreq	r0, r5, r0, lsl #22
     fe4:	00d90000 	sbcseq	r0, r9, r0
     fe8:	790c0000 	stmdbvc	ip, {}	; <UNPREDICTABLE>
     fec:	00000000 	andeq	r0, r0, r0
     ff0:	0002ae0d 	andeq	sl, r2, sp, lsl #28
     ff4:	e4220200 	strt	r0, [r2], #-512	; 0x200
     ff8:	04000000 	streq	r0, [r0], #-0
     ffc:	0000ca04 	andeq	ip, r0, r4, lsl #20
    1000:	03370e00 	teqeq	r7, #0, 28
    1004:	50020000 	andpl	r0, r2, r0
    1008:	000000fb 	strdeq	r0, [r0], -fp
    100c:	00002c0c 	andeq	r2, r0, ip, lsl #24
    1010:	120f0000 	andne	r0, pc, #0
    1014:	02000003 	andeq	r0, r0, #3
    1018:	02dd0063 	sbcseq	r0, sp, #99	; 0x63
    101c:	00040000 	andeq	r0, r4, r0
    1020:	000006bb 			; <UNDEFINED> instruction: 0x000006bb
    1024:	00210104 	eoreq	r0, r1, r4, lsl #2
    1028:	22010000 	andcs	r0, r1, #0
    102c:	12000004 	andne	r0, r0, #4
    1030:	60000002 	andvs	r0, r0, r2
    1034:	b0000088 	andlt	r0, r0, r8, lsl #1
    1038:	cb000000 	blgt	1040 <_start-0x6fc0>
    103c:	02000005 	andeq	r0, r0, #5
    1040:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1044:	04030074 	streq	r0, [r3], #-116	; 0x74
    1048:	00016807 	andeq	r6, r1, r7, lsl #16
    104c:	06010300 	streq	r0, [r1], -r0, lsl #6
    1050:	0000008c 	andeq	r0, r0, ip, lsl #1
    1054:	a4050203 	strge	r0, [r5], #-515	; 0x203
    1058:	03000001 	movweq	r0, #1
    105c:	01900504 	orrseq	r0, r0, r4, lsl #10
    1060:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1064:	00018b05 	andeq	r8, r1, r5, lsl #22
    1068:	03eb0400 	mvneq	r0, #0, 8
    106c:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    1070:	0000005a 	andeq	r0, r0, sl, asr r0
    1074:	8a080103 	bhi	201488 <__bss_end__+0x1f70c0>
    1078:	03000000 	movweq	r0, #0
    107c:	00ad0702 	adceq	r0, sp, r2, lsl #14
    1080:	bc040000 	stclt	0, cr0, [r4], {-0}
    1084:	02000001 	andeq	r0, r0, #1
    1088:	00007334 	andeq	r7, r0, r4, lsr r3
    108c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1090:	00000163 	andeq	r0, r0, r3, ror #2
    1094:	5e070803 	cdppl	8, 0, cr0, cr7, cr3, {0}
    1098:	03000001 	movweq	r0, #1
    109c:	01820704 	orreq	r0, r2, r4, lsl #14
    10a0:	01030000 	mrseq	r0, (UNDEF: 3)
    10a4:	00009308 	andeq	r9, r0, r8, lsl #6
    10a8:	95040500 	strls	r0, [r4, #-1280]	; 0x500
    10ac:	06000000 	streq	r0, [r0], -r0
    10b0:	00000088 	andeq	r0, r0, r8, lsl #1
    10b4:	0e030c07 	cdpeq	12, 0, cr0, cr3, cr7, {0}
    10b8:	000000d1 	ldrdeq	r0, [r0], -r1
    10bc:	00787408 	rsbseq	r7, r8, r8, lsl #8
    10c0:	004f0f03 	subeq	r0, pc, r3, lsl #30
    10c4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    10c8:	03007872 	movweq	r7, #2162	; 0x872
    10cc:	00004f0f 	andeq	r4, r0, pc, lsl #30
    10d0:	b9090100 	stmdblt	r9, {r8}
    10d4:	03000003 	movweq	r0, #3
    10d8:	00006810 	andeq	r6, r0, r0, lsl r8
    10dc:	6a090400 	bvs	2420e4 <__bss_end__+0x237d1c>
    10e0:	03000003 	movweq	r0, #3
    10e4:	00006811 	andeq	r6, r0, r1, lsl r8
    10e8:	04000800 	streq	r0, [r0], #-2048	; 0x800
    10ec:	000003a2 	andeq	r0, r0, r2, lsr #7
    10f0:	009a1203 	addseq	r1, sl, r3, lsl #4
    10f4:	010a0000 	mrseq	r0, (UNDEF: 10)
    10f8:	00f71004 	rscseq	r1, r7, r4
    10fc:	be0b0000 	cdplt	0, 0, cr0, cr11, cr0, {0}
    1100:	01000003 	tsteq	r0, r3
    1104:	0003ac0b 	andeq	sl, r3, fp, lsl #24
    1108:	940b0200 	strls	r0, [fp], #-512	; 0x200
    110c:	03000003 	movweq	r0, #3
    1110:	03d30400 	bicseq	r0, r3, #0, 8
    1114:	10040000 	andne	r0, r4, r0
    1118:	000000dc 	ldrdeq	r0, [r0], -ip
    111c:	14041407 	strne	r1, [r4], #-1031	; 0x407
    1120:	0000012f 	andeq	r0, r0, pc, lsr #2
    1124:	00044209 	andeq	r4, r4, r9, lsl #4
    1128:	2c150400 	cfldrscs	mvf0, [r5], {-0}
    112c:	00000000 	andeq	r0, r0, r0
    1130:	00043609 	andeq	r3, r4, r9, lsl #12
    1134:	f7180400 			; <UNDEFINED> instruction: 0xf7180400
    1138:	04000000 	streq	r0, [r0], #-0
    113c:	00040109 	andeq	r0, r4, r9, lsl #2
    1140:	d11b0400 	tstle	fp, r0, lsl #8
    1144:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1148:	03f30400 	mvnseq	r0, #0, 8
    114c:	20040000 	andcs	r0, r4, r0
    1150:	00000102 	andeq	r0, r0, r2, lsl #2
    1154:	0003400c 	andeq	r4, r3, ip
    1158:	25060100 	strcs	r0, [r6, #-256]	; 0x100
    115c:	60000000 	andvs	r0, r0, r0
    1160:	20000088 	andcs	r0, r0, r8, lsl #1
    1164:	01000000 	mrseq	r0, (UNDEF: 0)
    1168:	00017a9c 	muleq	r1, ip, sl
    116c:	00630d00 	rsbeq	r0, r3, r0, lsl #26
    1170:	00250601 	eoreq	r0, r5, r1, lsl #12
    1174:	07900000 	ldreq	r0, [r0, r0]
    1178:	740e0000 	strvc	r0, [lr], #-0
    117c:	7a000088 	bvc	13a4 <_start-0x6c5c>
    1180:	0f000002 	svceq	0x00000002
    1184:	74025101 	strvc	r5, [r2], #-257	; 0x101
    1188:	50010f00 	andpl	r0, r1, r0, lsl #30
    118c:	a3b40305 			; <UNDEFINED> instruction: 0xa3b40305
    1190:	00000000 	andeq	r0, r0, r0
    1194:	0003cb10 	andeq	ip, r3, r0, lsl fp
    1198:	800b0100 	andhi	r0, fp, r0, lsl #2
    119c:	90000088 	andls	r0, r0, r8, lsl #1
    11a0:	01000000 	mrseq	r0, (UNDEF: 0)
    11a4:	0002279c 	muleq	r2, ip, r7
    11a8:	03541100 	cmpeq	r4, #0, 2
    11ac:	0c010000 	stceq	0, cr0, [r1], {-0}
    11b0:	00000025 	andeq	r0, r0, r5, lsr #32
    11b4:	00041611 	andeq	r1, r4, r1, lsl r6
    11b8:	250c0100 	strcs	r0, [ip, #-256]	; 0x100
    11bc:	12000000 	andne	r0, r0, #0
    11c0:	00000078 	andeq	r0, r0, r8, ror r0
    11c4:	62130d01 	andsvs	r0, r3, #1, 26	; 0x40
    11c8:	01007373 	tsteq	r0, r3, ror r3
    11cc:	0002270f 	andeq	r2, r2, pc, lsl #14
    11d0:	0007ae00 	andeq	sl, r7, r0, lsl #28
    11d4:	03621400 	cmneq	r2, #0, 8
    11d8:	10010000 	andne	r0, r1, r0
    11dc:	00000227 	andeq	r0, r0, r7, lsr #4
    11e0:	00626313 	rsbeq	r6, r2, r3, lsl r3
    11e4:	022d1701 	eoreq	r1, sp, #262144	; 0x40000
    11e8:	07ce0000 	strbeq	r0, [lr, r0]
    11ec:	a8150000 	ldmdage	r5, {}	; <UNPREDICTABLE>
    11f0:	96000088 	strls	r0, [r0], -r8, lsl #1
    11f4:	16000002 	strne	r0, [r0], -r2
    11f8:	000088e4 	andeq	r8, r0, r4, ror #17
    11fc:	000002a1 	andeq	r0, r0, r1, lsr #5
    1200:	000001fd 	strdeq	r0, [r0], -sp
    1204:	0551010f 	ldrbeq	r0, [r1, #-271]	; 0x10f
    1208:	009d1003 	addseq	r1, sp, r3
    120c:	50010f00 	andpl	r0, r1, r0, lsl #30
    1210:	a3b40305 			; <UNDEFINED> instruction: 0xa3b40305
    1214:	16000000 	strne	r0, [r0], -r0
    1218:	000088ec 	andeq	r8, r0, ip, ror #17
    121c:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
    1220:	00000214 	andeq	r0, r0, r4, lsl r2
    1224:	0550010f 	ldrbeq	r0, [r0, #-271]	; 0x10f
    1228:	009d3403 	addseq	r3, sp, r3, lsl #8
    122c:	f0150000 			; <UNDEFINED> instruction: 0xf0150000
    1230:	d2000088 	andle	r0, r0, #136	; 0x88
    1234:	15000002 	strne	r0, [r0, #-2]
    1238:	000088f4 	strdeq	r8, [r0], -r4
    123c:	000002d9 	ldrdeq	r0, [r0], -r9
    1240:	25040500 	strcs	r0, [r4, #-1280]	; 0x500
    1244:	05000000 	streq	r0, [r0, #-0]
    1248:	00012f04 	andeq	r2, r1, r4, lsl #30
    124c:	03781700 	cmneq	r8, #0, 14
    1250:	05010000 	streq	r0, [r1, #-0]
    1254:	000000d1 	ldrdeq	r0, [r0], -r1
    1258:	a3b40305 			; <UNDEFINED> instruction: 0xa3b40305
    125c:	25180000 	ldrcs	r0, [r8, #-0]
    1260:	53000000 	movwpl	r0, #0
    1264:	19000002 	stmdbne	r0, {r1}
    1268:	00000025 	andeq	r0, r0, r5, lsr #32
    126c:	02711100 	rsbseq	r1, r1, #0, 2
    1270:	1d050000 	stcne	0, cr0, [r5, #-0]
    1274:	0000025e 	andeq	r0, r0, lr, asr r2
    1278:	02440405 	subeq	r0, r4, #83886080	; 0x5000000
    127c:	54110000 	ldrpl	r0, [r1], #-0
    1280:	01000003 	tsteq	r0, r3
    1284:	0000250c 	andeq	r2, r0, ip, lsl #10
    1288:	04161100 	ldreq	r1, [r6], #-256	; 0x100
    128c:	0c010000 	stceq	0, cr0, [r1], {-0}
    1290:	00000025 	andeq	r0, r0, r5, lsr #32
    1294:	0003de1a 	andeq	sp, r3, sl, lsl lr
    1298:	90440300 	subls	r0, r4, r0, lsl #6
    129c:	19000002 	stmdbne	r0, {r1}
    12a0:	00000290 	muleq	r0, r0, r2
    12a4:	00005a19 	andeq	r5, r0, r9, lsl sl
    12a8:	04050000 	streq	r0, [r5], #-0
    12ac:	000000d1 	ldrdeq	r0, [r0], -r1
    12b0:	0004091b 	andeq	r0, r4, fp, lsl r9
    12b4:	2d2a0400 	cfstrscs	mvf0, [sl, #-0]
    12b8:	1c000002 	stcne	0, cr0, [r0], {2}
    12bc:	00000385 	andeq	r0, r0, r5, lsl #7
    12c0:	00251503 	eoreq	r1, r5, r3, lsl #10
    12c4:	02bc0000 	adcseq	r0, ip, #0
    12c8:	90190000 	andsls	r0, r9, r0
    12cc:	19000002 	stmdbne	r0, {r1}
    12d0:	0000008f 	andeq	r0, r0, pc, lsl #1
    12d4:	011c001d 	tsteq	ip, sp, lsl r0
    12d8:	05000002 	streq	r0, [r0, #-2]
    12dc:	00002529 	andeq	r2, r0, r9, lsr #10
    12e0:	0002d200 	andeq	sp, r2, r0, lsl #4
    12e4:	008f1900 	addeq	r1, pc, r0, lsl #18
    12e8:	001d0000 	andseq	r0, sp, r0
    12ec:	00007812 	andeq	r7, r0, r2, lsl r8
    12f0:	12d10500 	sbcsne	r0, r1, #0, 10
    12f4:	00000312 	andeq	r0, r0, r2, lsl r3
    12f8:	ad006305 	stcge	3, cr6, [r0, #-20]	; 0xffffffec
    12fc:	04000001 	streq	r0, [r0], #-1
    1300:	00085200 	andeq	r5, r8, r0, lsl #4
    1304:	21010400 	tstcs	r1, r0, lsl #8
    1308:	01000000 	mrseq	r0, (UNDEF: 0)
    130c:	00000462 	andeq	r0, r0, r2, ror #8
    1310:	00000212 	andeq	r0, r0, r2, lsl r2
    1314:	00000018 	andeq	r0, r0, r8, lsl r0
    1318:	00000000 	andeq	r0, r0, r0
    131c:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1320:	69050402 	stmdbvs	r5, {r1, sl}
    1324:	0300746e 	movweq	r7, #1134	; 0x46e
    1328:	01680704 	cmneq	r8, r4, lsl #14
    132c:	01030000 	mrseq	r0, (UNDEF: 3)
    1330:	00008c06 	andeq	r8, r0, r6, lsl #24
    1334:	05020300 	streq	r0, [r2, #-768]	; 0x300
    1338:	000001a4 	andeq	r0, r0, r4, lsr #3
    133c:	90050403 	andls	r0, r5, r3, lsl #8
    1340:	03000001 	movweq	r0, #1
    1344:	018b0508 	orreq	r0, fp, r8, lsl #10
    1348:	01030000 	mrseq	r0, (UNDEF: 3)
    134c:	00008a08 	andeq	r8, r0, r8, lsl #20
    1350:	07020300 	streq	r0, [r2, -r0, lsl #6]
    1354:	000000ad 	andeq	r0, r0, sp, lsr #1
    1358:	63070403 	movwvs	r0, #29699	; 0x7403
    135c:	03000001 	movweq	r0, #1
    1360:	015e0708 	cmpeq	lr, r8, lsl #14
    1364:	04030000 	streq	r0, [r3], #-0
    1368:	00018207 	andeq	r8, r1, r7, lsl #4
    136c:	08010300 	stmdaeq	r1, {r8, r9}
    1370:	00000093 	muleq	r0, r3, r0
    1374:	00044804 	andeq	r4, r4, r4, lsl #16
    1378:	250e0100 	strcs	r0, [lr, #-256]	; 0x100
    137c:	10000000 	andne	r0, r0, r0
    1380:	18000089 	stmdane	r0, {r0, r3, r7}
    1384:	01000000 	mrseq	r0, (UNDEF: 0)
    1388:	0000a29c 	muleq	r0, ip, r2
    138c:	04b40500 	ldrteq	r0, [r4], #1280	; 0x500
    1390:	0f010000 	svceq	0x00010000
    1394:	0000002c 	andeq	r0, r0, ip, lsr #32
    1398:	000007ee 	andeq	r0, r0, lr, ror #15
    139c:	04970600 	ldreq	r0, [r7], #1536	; 0x600
    13a0:	17010000 	strne	r0, [r1, -r0]
    13a4:	00008928 	andeq	r8, r0, r8, lsr #18
    13a8:	00000014 	andeq	r0, r0, r4, lsl r0
    13ac:	00c79c01 	sbceq	r9, r7, r1, lsl #24
    13b0:	b4050000 	strlt	r0, [r5], #-0
    13b4:	01000004 	tsteq	r0, r4
    13b8:	00002c18 	andeq	r2, r0, r8, lsl ip
    13bc:	00080d00 	andeq	r0, r8, r0, lsl #26
    13c0:	12060000 	andne	r0, r6, #0
    13c4:	01000003 	tsteq	r0, r3
    13c8:	00893c1f 	addeq	r3, r9, pc, lsl ip
    13cc:	00004800 	andeq	r4, r0, r0, lsl #16
    13d0:	779c0100 	ldrvc	r0, [ip, r0, lsl #2]
    13d4:	07000001 	streq	r0, [r0, -r1]
    13d8:	000004ac 	andeq	r0, r0, ip, lsr #9
    13dc:	01772a01 	cmneq	r7, r1, lsl #20
    13e0:	001c0000 	andseq	r0, ip, r0
    13e4:	8f072010 	svchi	0x00072010
    13e8:	01000004 	tsteq	r0, r4
    13ec:	0001772b 	andeq	r7, r1, fp, lsr #14
    13f0:	10002400 	andne	r2, r0, r0, lsl #8
    13f4:	04560720 	ldrbeq	r0, [r6], #-1824	; 0x720
    13f8:	2c010000 	stccs	0, cr0, [r1], {-0}
    13fc:	00000177 	andeq	r0, r0, r7, ror r1
    1400:	5a000000 	bpl	1408 <_start-0x6bf8>
    1404:	00047608 	andeq	r7, r4, r8, lsl #12
    1408:	772d0100 	strvc	r0, [sp, -r0, lsl #2]!
    140c:	20000001 	andcs	r0, r0, r1
    1410:	00894409 	addeq	r4, r9, r9, lsl #8
    1414:	00007900 	andeq	r7, r0, r0, lsl #18
    1418:	89500900 	ldmdbhi	r0, {r8, fp}^
    141c:	00a20000 	adceq	r0, r2, r0
    1420:	580a0000 	stmdapl	sl, {}	; <UNPREDICTABLE>
    1424:	8d000089 	stchi	0, cr0, [r0, #-548]	; 0xfffffddc
    1428:	3a000001 	bcc	1434 <_start-0x6bcc>
    142c:	0b000001 	bleq	1438 <_start-0x6bc8>
    1430:	4e015001 	cdpmi	0, 0, cr5, cr1, cr1, {0}
    1434:	89640a00 	stmdbhi	r4!, {r9, fp}^
    1438:	019e0000 	orrseq	r0, lr, r0
    143c:	015a0000 	cmpeq	sl, r0
    1440:	010b0000 	mrseq	r0, (UNDEF: 11)
    1444:	010c0551 	tsteq	ip, r1, asr r5
    1448:	0b5a0000 	bleq	1681450 <__bss_end__+0x1677088>
    144c:	0c055001 	stceq	0, cr5, [r5], {1}
    1450:	20100024 	andscs	r0, r0, r4, lsr #32
    1454:	89700c00 	ldmdbhi	r0!, {sl, fp}^
    1458:	019e0000 	orrseq	r0, lr, r0
    145c:	010b0000 	mrseq	r0, (UNDEF: 11)
    1460:	200c0551 	andcs	r0, ip, r1, asr r5
    1464:	0b5a0000 	bleq	168146c <__bss_end__+0x16770a4>
    1468:	0c055001 	stceq	0, cr5, [r5], {1}
    146c:	2010001c 	andscs	r0, r0, ip, lsl r0
    1470:	250d0000 	strcs	r0, [sp, #-0]
    1474:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1478:	0000044b 	andeq	r0, r0, fp, asr #8
    147c:	01880d01 	orreq	r0, r8, r1, lsl #26
    1480:	0d100000 	ldceq	0, cr0, [r0, #-0]
    1484:	0000002c 	andeq	r0, r0, ip, lsr #32
    1488:	0003370e 	andeq	r3, r3, lr, lsl #14
    148c:	9e500200 	cdpls	2, 5, cr0, cr0, cr0, {0}
    1490:	0f000001 	svceq	0x00000001
    1494:	0000002c 	andeq	r0, r0, ip, lsr #32
    1498:	04a61000 	strteq	r1, [r6], #0
    149c:	9c020000 	stcls	0, cr0, [r2], {-0}
    14a0:	00002c0f 	andeq	r2, r0, pc, lsl #24
    14a4:	002c0f00 	eoreq	r0, ip, r0, lsl #30
    14a8:	00000000 	andeq	r0, r0, r0
    14ac:	000001d8 	ldrdeq	r0, [r0], -r8
    14b0:	09400004 	stmdbeq	r0, {r2}^
    14b4:	01040000 	mrseq	r0, (UNDEF: 4)
    14b8:	00000021 	andeq	r0, r0, r1, lsr #32
    14bc:	0004d601 	andeq	sp, r4, r1, lsl #12
    14c0:	00021200 	andeq	r1, r2, r0, lsl #4
    14c4:	00898400 	addeq	r8, r9, r0, lsl #8
    14c8:	00008800 	andeq	r8, r0, r0, lsl #16
    14cc:	00078d00 	andeq	r8, r7, r0, lsl #26
    14d0:	05040200 	streq	r0, [r4, #-512]	; 0x200
    14d4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    14d8:	68070403 	stmdavs	r7, {r0, r1, sl}
    14dc:	03000001 	movweq	r0, #1
    14e0:	008c0601 	addeq	r0, ip, r1, lsl #12
    14e4:	02030000 	andeq	r0, r3, #0
    14e8:	0001a405 	andeq	sl, r1, r5, lsl #8
    14ec:	05040300 	streq	r0, [r4, #-768]	; 0x300
    14f0:	00000190 	muleq	r0, r0, r1
    14f4:	8b050803 	blhi	143508 <__bss_end__+0x139140>
    14f8:	03000001 	movweq	r0, #1
    14fc:	008a0801 	addeq	r0, sl, r1, lsl #16
    1500:	02030000 	andeq	r0, r3, #0
    1504:	0000ad07 	andeq	sl, r0, r7, lsl #26
    1508:	07040300 	streq	r0, [r4, -r0, lsl #6]
    150c:	00000163 	andeq	r0, r0, r3, ror #2
    1510:	5e070803 	cdppl	8, 0, cr0, cr7, cr3, {0}
    1514:	03000001 	movweq	r0, #1
    1518:	01820704 	orreq	r0, r2, r4, lsl #14
    151c:	01030000 	mrseq	r0, (UNDEF: 3)
    1520:	00009308 	andeq	r9, r0, r8, lsl #6
    1524:	04f50400 	ldrbteq	r0, [r5], #1024	; 0x400
    1528:	05010000 	streq	r0, [r1, #-0]
    152c:	00008984 	andeq	r8, r0, r4, lsl #19
    1530:	0000001c 	andeq	r0, r0, ip, lsl r0
    1534:	009e9c01 	addseq	r9, lr, r1, lsl #24
    1538:	ef050000 	svc	0x00050000
    153c:	01000004 	tsteq	r0, r4
    1540:	00002c05 	andeq	r2, r0, r5, lsl #24
    1544:	00083700 	andeq	r3, r8, r0, lsl #14
    1548:	b9060000 	stmdblt	r6, {}	; <UNPREDICTABLE>
    154c:	01000004 	tsteq	r0, r4
    1550:	00002c0b 	andeq	r2, r0, fp, lsl #24
    1554:	0089a000 	addeq	sl, r9, r0
    1558:	00001400 	andeq	r1, r0, r0, lsl #8
    155c:	cb9c0100 	blgt	fe701964 <__bss_end__+0xfe6f759c>
    1560:	07000000 	streq	r0, [r0, -r0]
    1564:	000089ac 	andeq	r8, r0, ip, lsr #19
    1568:	000001ca 	andeq	r0, r0, sl, asr #3
    156c:	05500108 	ldrbeq	r0, [r0, #-264]	; 0x108
    1570:	0030040c 	eorseq	r0, r0, ip, lsl #8
    1574:	06000020 	streq	r0, [r0], -r0, lsr #32
    1578:	0000050b 	andeq	r0, r0, fp, lsl #10
    157c:	002c1001 	eoreq	r1, ip, r1
    1580:	89b40000 	ldmibhi	r4!, {}	; <UNPREDICTABLE>
    1584:	000c0000 	andeq	r0, ip, r0
    1588:	9c010000 	stcls	0, cr0, [r1], {-0}
    158c:	000000f9 	strdeq	r0, [r0], -r9
    1590:	01007509 	tsteq	r0, r9, lsl #10
    1594:	00002c14 	andeq	r2, r0, r4, lsl ip
    1598:	0a500100 	beq	14019a0 <__bss_end__+0x13f75d8>
    159c:	000089bc 			; <UNDEFINED> instruction: 0x000089bc
    15a0:	0000009e 	muleq	r0, lr, r0
    15a4:	05020400 	streq	r0, [r2, #-1024]	; 0x400
    15a8:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    15ac:	000089c0 	andeq	r8, r0, r0, asr #19
    15b0:	00000024 	andeq	r0, r0, r4, lsr #32
    15b4:	01579c01 	cmpeq	r7, r1, lsl #24
    15b8:	750b0000 	strvc	r0, [fp, #-0]
    15bc:	19010073 	stmdbne	r1, {r0, r1, r4, r5, r6}
    15c0:	0000002c 	andeq	r0, r0, ip, lsr #32
    15c4:	0000086b 	andeq	r0, r0, fp, ror #16
    15c8:	00627209 	rsbeq	r7, r2, r9, lsl #4
    15cc:	002c1a01 	eoreq	r1, ip, r1, lsl #20
    15d0:	54010000 	strpl	r0, [r1], #-0
    15d4:	0089d00c 	addeq	sp, r9, ip
    15d8:	00001000 	andeq	r1, r0, r0
    15dc:	00014d00 	andeq	r4, r1, r0, lsl #26
    15e0:	61720d00 	cmnvs	r2, r0, lsl #26
    15e4:	2c1c0100 	ldfcss	f0, [ip], {-0}
    15e8:	89000000 	stmdbhi	r0, {}	; <UNPREDICTABLE>
    15ec:	0a000008 	beq	1614 <_start-0x69ec>
    15f0:	000089d4 	ldrdeq	r8, [r0], -r4
    15f4:	000000cb 	andeq	r0, r0, fp, asr #1
    15f8:	89cc0a00 	stmibhi	ip, {r9, fp}^
    15fc:	00cb0000 	sbceq	r0, fp, r0
    1600:	04000000 	streq	r0, [r0], #-0
    1604:	00000337 	andeq	r0, r0, r7, lsr r3
    1608:	89e42201 	stmibhi	r4!, {r0, r9, sp}^
    160c:	00140000 	andseq	r0, r4, r0
    1610:	9c010000 	stcls	0, cr0, [r1], {-0}
    1614:	00000190 	muleq	r0, r0, r1
    1618:	00736d0b 	rsbseq	r6, r3, fp, lsl #26
    161c:	002c2201 	eoreq	r2, ip, r1, lsl #4
    1620:	089c0000 	ldmeq	ip, {}	; <UNPREDICTABLE>
    1624:	f4070000 	vst4.8	{d0-d3}, [r7], r0
    1628:	f9000089 			; <UNDEFINED> instruction: 0xf9000089
    162c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1630:	f3075001 	vhadd.u8	d5, d7, d1
    1634:	e80a5001 	stmda	sl, {r0, ip, lr}
    1638:	00001e03 	andeq	r1, r0, r3, lsl #28
    163c:	0004cc04 	andeq	ip, r4, r4, lsl #24
    1640:	f8250100 			; <UNDEFINED> instruction: 0xf8250100
    1644:	14000089 	strne	r0, [r0], #-137	; 0x89
    1648:	01000000 	mrseq	r0, (UNDEF: 0)
    164c:	0001ca9c 	muleq	r1, ip, sl
    1650:	65730b00 	ldrbvs	r0, [r3, #-2816]!	; 0xb00
    1654:	25010063 	strcs	r0, [r1, #-99]	; 0x63
    1658:	0000002c 	andeq	r0, r0, ip, lsr #32
    165c:	000008bd 			; <UNDEFINED> instruction: 0x000008bd
    1660:	008a0807 	addeq	r0, sl, r7, lsl #16
    1664:	00015700 	andeq	r5, r1, r0, lsl #14
    1668:	50010800 	andpl	r0, r1, r0, lsl #16
    166c:	5001f307 	andpl	pc, r1, r7, lsl #6
    1670:	1e03e80a 	cdpne	8, 0, cr14, cr3, cr10, {0}
    1674:	e90e0000 	stmdb	lr, {}	; <UNPREDICTABLE>
    1678:	02000004 	andeq	r0, r0, #4
    167c:	00002ca8 	andeq	r2, r0, r8, lsr #25
    1680:	002c0f00 	eoreq	r0, ip, r0, lsl #30
    1684:	00000000 	andeq	r0, r0, r0
    1688:	000003ee 	andeq	r0, r0, lr, ror #7
    168c:	0a230004 	beq	8c16a4 <__bss_end__+0x8b72dc>
    1690:	01040000 	mrseq	r0, (UNDEF: 4)
    1694:	00000021 	andeq	r0, r0, r1, lsr #32
    1698:	00054301 	andeq	r4, r5, r1, lsl #6
    169c:	00021200 	andeq	r1, r2, r0, lsl #4
    16a0:	008a0c00 	addeq	r0, sl, r0, lsl #24
    16a4:	0001e800 	andeq	lr, r1, r0, lsl #16
    16a8:	00083400 	andeq	r3, r8, r0, lsl #8
    16ac:	05040200 	streq	r0, [r4, #-512]	; 0x200
    16b0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    16b4:	00051a03 	andeq	r1, r5, r3, lsl #20
    16b8:	37d40300 	ldrbcc	r0, [r4, r0, lsl #6]
    16bc:	04000000 	streq	r0, [r0], #-0
    16c0:	01680704 	cmneq	r8, r4, lsl #14
    16c4:	01040000 	mrseq	r0, (UNDEF: 4)
    16c8:	00008c06 	andeq	r8, r0, r6, lsl #24
    16cc:	05020400 	streq	r0, [r2, #-1024]	; 0x400
    16d0:	000001a4 	andeq	r0, r0, r4, lsr #3
    16d4:	90050404 	andls	r0, r5, r4, lsl #8
    16d8:	04000001 	streq	r0, [r0], #-1
    16dc:	018b0508 	orreq	r0, fp, r8, lsl #10
    16e0:	01040000 	mrseq	r0, (UNDEF: 4)
    16e4:	00008a08 	andeq	r8, r0, r8, lsl #20
    16e8:	07020400 	streq	r0, [r2, -r0, lsl #8]
    16ec:	000000ad 	andeq	r0, r0, sp, lsr #1
    16f0:	63070404 	movwvs	r0, #29700	; 0x7404
    16f4:	04000001 	streq	r0, [r0], #-1
    16f8:	015e0708 	cmpeq	lr, r8, lsl #14
    16fc:	04040000 	streq	r0, [r4], #-0
    1700:	00018207 	andeq	r8, r1, r7, lsl #4
    1704:	06040500 	streq	r0, [r4], -r0, lsl #10
    1708:	00008504 	andeq	r8, r0, r4, lsl #10
    170c:	08010400 	stmdaeq	r1, {sl}
    1710:	00000093 	muleq	r0, r3, r0
    1714:	00920406 	addseq	r0, r2, r6, lsl #8
    1718:	85070000 	strhi	r0, [r7, #-0]
    171c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1720:	00000085 	andeq	r0, r0, r5, lsl #1
    1724:	000000a7 	andeq	r0, r0, r7, lsr #1
    1728:	00007609 	andeq	r7, r0, r9, lsl #12
    172c:	0a000700 	beq	3334 <_start-0x4ccc>
    1730:	00000120 	andeq	r0, r0, r0, lsr #2
    1734:	007d1901 	rsbseq	r1, sp, r1, lsl #18
    1738:	8a0c0000 	bhi	301740 <__bss_end__+0x2f7378>
    173c:	00740000 	rsbseq	r0, r4, r0
    1740:	9c010000 	stcls	0, cr0, [r1], {-0}
    1744:	00000156 	andeq	r0, r0, r6, asr r1
    1748:	00057b0b 	andeq	r7, r5, fp, lsl #22
    174c:	37190100 	ldrcc	r0, [r9, -r0, lsl #2]
    1750:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    1754:	0c000008 	stceq	0, cr0, [r0], {8}
    1758:	0000012d 	andeq	r0, r0, sp, lsr #2
    175c:	00000156 	andeq	r0, r0, r6, asr r1
    1760:	9d400305 	stclls	3, cr0, [r0, #-20]	; 0xffffffec
    1764:	aa0d0000 	bge	34176c <__bss_end__+0x3373a4>
    1768:	01000005 	tsteq	r0, r5
    176c:	00007d1c 	andeq	r7, r0, ip, lsl sp
    1770:	0e550100 	rdfeqs	f0, f5, f0
    1774:	00000573 	andeq	r0, r0, r3, ror r5
    1778:	00371d01 	eorseq	r1, r7, r1, lsl #26
    177c:	09180000 	ldmdbeq	r8, {}	; <UNPREDICTABLE>
    1780:	240f0000 	strcs	r0, [pc], #-0	; 1788 <_start-0x6878>
    1784:	b200008a 	andlt	r0, r0, #138	; 0x8a
    1788:	10000003 	andne	r0, r0, r3
    178c:	00008a38 	andeq	r8, r0, r8, lsr sl
    1790:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
    1794:	00000131 	andeq	r0, r0, r1, lsr r1
    1798:	01530111 	cmpeq	r3, r1, lsl r1
    179c:	5201114a 	andpl	r1, r1, #-2147483630	; 0x80000012
    17a0:	9d400305 	stclls	3, cr0, [r0, #-20]	; 0xffffffec
    17a4:	01110000 	tsteq	r1, r0
    17a8:	c0030551 	andgt	r0, r3, r1, asr r5
    17ac:	1100009d 	swpne	r0, sp, [r0]	; <UNPREDICTABLE>
    17b0:	03055001 	movweq	r5, #20481	; 0x5001
    17b4:	00009d80 	andeq	r9, r0, r0, lsl #27
    17b8:	8a3c0f00 	bhi	f053c0 <__bss_end__+0xefaff8>
    17bc:	03cf0000 	biceq	r0, pc, #0
    17c0:	5c120000 	ldcpl	0, cr0, [r2], {-0}
    17c4:	d600008a 	strle	r0, [r0], -sl, lsl #1
    17c8:	11000003 	tstne	r0, r3
    17cc:	76025201 	strvc	r5, [r2], -r1, lsl #4
    17d0:	51011100 	mrspl	r1, (UNDEF: 17)
    17d4:	01113001 	tsteq	r1, r1
    17d8:	00750250 	rsbseq	r0, r5, r0, asr r2
    17dc:	97070000 	strls	r0, [r7, -r0]
    17e0:	0a000000 	beq	17e8 <_start-0x6818>
    17e4:	00000005 	andeq	r0, r0, r5
    17e8:	007d2701 	rsbseq	r2, sp, r1, lsl #14
    17ec:	8a800000 	bhi	fe0017f4 <__bss_end__+0xfdff742c>
    17f0:	009c0000 	addseq	r0, ip, r0
    17f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    17f8:	00000245 	andeq	r0, r0, r5, asr #4
    17fc:	00057b0b 	andeq	r7, r5, fp, lsl #22
    1800:	37270100 	strcc	r0, [r7, -r0, lsl #2]!
    1804:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    1808:	0b000009 	bleq	1834 <_start-0x67cc>
    180c:	00000569 	andeq	r0, r0, r9, ror #10
    1810:	00372701 	eorseq	r2, r7, r1, lsl #14
    1814:	09aa0000 	stmibeq	sl!, {}	; <UNPREDICTABLE>
    1818:	2d0c0000 	stccs	0, cr0, [ip, #-0]
    181c:	55000001 	strpl	r0, [r0, #-1]
    1820:	05000002 	streq	r0, [r0, #-2]
    1824:	009d4803 	addseq	r4, sp, r3, lsl #16
    1828:	052b0e00 	streq	r0, [fp, #-3584]!	; 0xe00
    182c:	2d010000 	stccs	0, cr0, [r1, #-0]
    1830:	00000037 	andeq	r0, r0, r7, lsr r0
    1834:	00000a24 	andeq	r0, r0, r4, lsr #20
    1838:	008a980f 	addeq	r9, sl, pc, lsl #16
    183c:	0003b200 	andeq	fp, r3, r0, lsl #4
    1840:	8aac1000 	bhi	feb05848 <__bss_end__+0xfeafb480>
    1844:	03b90000 			; <UNDEFINED> instruction: 0x03b90000
    1848:	01e80000 	mvneq	r0, r0
    184c:	01110000 	tsteq	r1, r0
    1850:	28080253 	stmdacs	r8, {r0, r1, r4, r6, r9}
    1854:	05520111 	ldrbeq	r0, [r2, #-273]	; 0x111
    1858:	009d4803 	addseq	r4, sp, r3, lsl #16
    185c:	51011100 	mrspl	r1, (UNDEF: 17)
    1860:	9dc00305 	stclls	3, cr0, [r0, #20]
    1864:	01110000 	tsteq	r1, r0
    1868:	80030550 	andhi	r0, r3, r0, asr r5
    186c:	0000009d 	muleq	r0, sp, r0
    1870:	008ab00f 	addeq	fp, sl, pc
    1874:	0003cf00 	andeq	ip, r3, r0, lsl #30
    1878:	8abc0f00 	bhi	fef05480 <__bss_end__+0xfeefb0b8>
    187c:	00a70000 	adceq	r0, r7, r0
    1880:	cc0f0000 	stcgt	0, cr0, [pc], {-0}
    1884:	b200008a 	andlt	r0, r0, #138	; 0x8a
    1888:	10000003 	andne	r0, r0, r3
    188c:	00008ae0 	andeq	r8, r0, r0, ror #21
    1890:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
    1894:	00000232 	andeq	r0, r0, r2, lsr r2
    1898:	02530111 	subseq	r0, r3, #1073741828	; 0x40000004
    189c:	01112c08 	tsteq	r1, r8, lsl #24
    18a0:	48030552 	stmdami	r3, {r1, r4, r6, r8, sl}
    18a4:	1100009d 	swpne	r0, sp, [r0]	; <UNPREDICTABLE>
    18a8:	03055101 	movweq	r5, #20737	; 0x5101
    18ac:	00009dc0 	andeq	r9, r0, r0, asr #27
    18b0:	05500111 	ldrbeq	r0, [r0, #-273]	; 0x111
    18b4:	009dd403 	addseq	sp, sp, r3, lsl #8
    18b8:	e40f0000 	str	r0, [pc], #-0	; 18c0 <_start-0x6740>
    18bc:	cf00008a 	svcgt	0x0000008a
    18c0:	0f000003 	svceq	0x00000003
    18c4:	00008b04 	andeq	r8, r0, r4, lsl #22
    18c8:	000000a7 	andeq	r0, r0, r7, lsr #1
    18cc:	00850800 	addeq	r0, r5, r0, lsl #16
    18d0:	02550000 	subseq	r0, r5, #0
    18d4:	76090000 	strvc	r0, [r9], -r0
    18d8:	0f000000 	svceq	0x00000000
    18dc:	02450700 	subeq	r0, r5, #0, 14
    18e0:	c5130000 	ldrgt	r0, [r3, #-0]
    18e4:	01000001 	tsteq	r0, r1
    18e8:	008b1c3c 	addeq	r1, fp, ip, lsr ip
    18ec:	00005c00 	andeq	r5, r0, r0, lsl #24
    18f0:	c09c0100 	addsgt	r0, ip, r0, lsl #2
    18f4:	0c000002 	stceq	0, cr0, [r0], {2}
    18f8:	0000012d 	andeq	r0, r0, sp, lsr #2
    18fc:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1900:	9d580305 	ldclls	3, cr0, [r8, #-20]	; 0xffffffec
    1904:	340f0000 	strcc	r0, [pc], #-0	; 190c <_start-0x66f4>
    1908:	b200008b 	andlt	r0, r0, #139	; 0x8b
    190c:	10000003 	andne	r0, r0, r3
    1910:	00008b48 	andeq	r8, r0, r8, asr #22
    1914:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
    1918:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    191c:	02530111 	subseq	r0, r3, #1073741828	; 0x40000004
    1920:	01113d08 	tsteq	r1, r8, lsl #26
    1924:	58030552 	stmdapl	r3, {r1, r4, r6, r8, sl}
    1928:	1100009d 	swpne	r0, sp, [r0]	; <UNPREDICTABLE>
    192c:	03055101 	movweq	r5, #20737	; 0x5101
    1930:	00009dc0 	andeq	r9, r0, r0, asr #27
    1934:	05500111 	ldrbeq	r0, [r0, #-273]	; 0x111
    1938:	009e2c03 	addseq	r2, lr, r3, lsl #24
    193c:	4c0f0000 	stcmi	0, cr0, [pc], {-0}
    1940:	cf00008b 	svcgt	0x0000008b
    1944:	00000003 	andeq	r0, r0, r3
    1948:	00008508 	andeq	r8, r0, r8, lsl #10
    194c:	0002d000 	andeq	sp, r2, r0
    1950:	00760900 	rsbseq	r0, r6, r0, lsl #18
    1954:	000c0000 	andeq	r0, ip, r0
    1958:	0002c007 	andeq	ip, r2, r7
    195c:	05211400 	streq	r1, [r1, #-1024]!	; 0x400
    1960:	46010000 	strmi	r0, [r1], -r0
    1964:	00008b78 	andeq	r8, r0, r8, ror fp
    1968:	00000018 	andeq	r0, r0, r8, lsl r0
    196c:	82159c01 	andshi	r9, r5, #256	; 0x100
    1970:	01000005 	tsteq	r0, r5
    1974:	00007d4f 	andeq	r7, r0, pc, asr #26
    1978:	008b9000 	addeq	r9, fp, r0
    197c:	00001000 	andeq	r1, r0, r0
    1980:	139c0100 	orrsne	r0, ip, #0, 2
    1984:	00000593 	muleq	r0, r3, r5
    1988:	8ba05301 	blhi	fe816594 <__bss_end__+0xfe80c1cc>
    198c:	00540000 	subseq	r0, r4, r0
    1990:	9c010000 	stcls	0, cr0, [r1], {-0}
    1994:	00000370 	andeq	r0, r0, r0, ror r3
    1998:	0005540b 	andeq	r5, r5, fp, lsl #8
    199c:	37530100 	ldrbcc	r0, [r3, -r0, lsl #2]
    19a0:	51000000 	mrspl	r0, (UNDEF: 0)
    19a4:	0c00000a 	stceq	0, cr0, [r0], {10}
    19a8:	0000012d 	andeq	r0, r0, sp, lsr #2
    19ac:	00000380 	andeq	r0, r0, r0, lsl #7
    19b0:	9d680305 	stclls	3, cr0, [r8, #-20]!	; 0xffffffec
    19b4:	b80f0000 	stmdalt	pc, {}	; <UNPREDICTABLE>
    19b8:	b200008b 	andlt	r0, r0, #139	; 0x8b
    19bc:	10000003 	andne	r0, r0, r3
    19c0:	00008bcc 	andeq	r8, r0, ip, asr #23
    19c4:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
    19c8:	00000366 	andeq	r0, r0, r6, ror #6
    19cc:	02530111 	subseq	r0, r3, #1073741828	; 0x40000004
    19d0:	01115408 	tsteq	r1, r8, lsl #8
    19d4:	68030552 	stmdavs	r3, {r1, r4, r6, r8, sl}
    19d8:	1100009d 	swpne	r0, sp, [r0]	; <UNPREDICTABLE>
    19dc:	03055101 	movweq	r5, #20737	; 0x5101
    19e0:	00009dc0 	andeq	r9, r0, r0, asr #27
    19e4:	05500111 	ldrbeq	r0, [r0, #-273]	; 0x111
    19e8:	009e2c03 	addseq	r2, lr, r3, lsl #24
    19ec:	d00f0000 	andle	r0, pc, r0
    19f0:	cf00008b 	svcgt	0x0000008b
    19f4:	00000003 	andeq	r0, r0, r3
    19f8:	00008508 	andeq	r8, r0, r8, lsl #10
    19fc:	00038000 	andeq	r8, r3, r0
    1a00:	00760900 	rsbseq	r0, r6, r0, lsl #18
    1a04:	00160000 	andseq	r0, r6, r0
    1a08:	00037007 	andeq	r7, r3, r7
    1a0c:	05620d00 	strbeq	r0, [r2, #-3328]!	; 0xd00
    1a10:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    1a14:	00000025 	andeq	r0, r0, r5, lsr #32
    1a18:	a3c00305 	bicge	r0, r0, #335544320	; 0x14000000
    1a1c:	8a0d0000 	bhi	341a24 <__bss_end__+0x33765c>
    1a20:	01000005 	tsteq	r0, r5
    1a24:	00007f0b 	andeq	r7, r0, fp, lsl #30
    1a28:	c4030500 	strgt	r0, [r3], #-1280	; 0x500
    1a2c:	160000a3 	strne	r0, [r0], -r3, lsr #1
    1a30:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
    1a34:	00850501 	addeq	r0, r5, r1, lsl #10
    1a38:	d2170000 	andsle	r0, r7, #0
    1a3c:	02000001 	andeq	r0, r0, #1
    1a40:	0201181e 	andeq	r1, r1, #1966080	; 0x1e0000
    1a44:	29020000 	stmdbcs	r2, {}	; <UNPREDICTABLE>
    1a48:	00000025 	andeq	r0, r0, r5, lsr #32
    1a4c:	000003cf 	andeq	r0, r0, pc, asr #7
    1a50:	00008c19 	andeq	r8, r0, r9, lsl ip
    1a54:	17001a00 	strne	r1, [r0, -r0, lsl #20]
    1a58:	00000098 	muleq	r0, r8, r0
    1a5c:	3c1b6602 	ldccc	6, cr6, [fp], {2}
    1a60:	04000005 	streq	r0, [r0], #-5
    1a64:	00007d1b 	andeq	r7, r0, fp, lsl sp
    1a68:	007d1900 	rsbseq	r1, sp, r0, lsl #18
    1a6c:	25190000 	ldrcs	r0, [r9, #-0]
    1a70:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    1a74:	0000002c 	andeq	r0, r0, ip, lsr #32
    1a78:	11ca0000 	bicne	r0, sl, r0
    1a7c:	00040000 	andeq	r0, r4, r0
    1a80:	00000baa 	andeq	r0, r0, sl, lsr #23
    1a84:	00210104 	eoreq	r0, r1, r4, lsl #2
    1a88:	64010000 	strvs	r0, [r1], #-0
    1a8c:	12000006 	andne	r0, r0, #6
    1a90:	f4000002 	vst4.8	{d0-d3}, [r0], r2
    1a94:	2000008b 	andcs	r0, r0, fp, lsl #1
    1a98:	ae000006 	cdpge	0, 0, cr0, cr0, cr6, {0}
    1a9c:	02000009 	andeq	r0, r0, #9
    1aa0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1aa4:	04030074 	streq	r0, [r3], #-116	; 0x74
    1aa8:	00016807 	andeq	r6, r1, r7, lsl #16
    1aac:	06010300 	streq	r0, [r1], -r0, lsl #6
    1ab0:	0000008c 	andeq	r0, r0, ip, lsl #1
    1ab4:	a4050203 	strge	r0, [r5], #-515	; 0x203
    1ab8:	03000001 	movweq	r0, #1
    1abc:	01900504 	orrseq	r0, r0, r4, lsl #10
    1ac0:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1ac4:	00018b05 	andeq	r8, r1, r5, lsl #22
    1ac8:	03eb0400 	mvneq	r0, #0, 8
    1acc:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    1ad0:	0000005a 	andeq	r0, r0, sl, asr r0
    1ad4:	8a080103 	bhi	201ee8 <__bss_end__+0x1f7b20>
    1ad8:	03000000 	movweq	r0, #0
    1adc:	00ad0702 	adceq	r0, sp, r2, lsl #14
    1ae0:	bc040000 	stclt	0, cr0, [r4], {-0}
    1ae4:	03000001 	movweq	r0, #1
    1ae8:	00007334 	andeq	r7, r0, r4, lsr r3
    1aec:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1af0:	00000163 	andeq	r0, r0, r3, ror #2
    1af4:	5e070803 	cdppl	8, 0, cr0, cr7, cr3, {0}
    1af8:	03000001 	movweq	r0, #1
    1afc:	01820704 	orreq	r0, r2, r4, lsl #14
    1b00:	04050000 	streq	r0, [r5], #-0
    1b04:	00900406 	addseq	r0, r0, r6, lsl #8
    1b08:	01030000 	mrseq	r0, (UNDEF: 3)
    1b0c:	00009308 	andeq	r9, r0, r8, lsl #6
    1b10:	9d040600 	stcls	6, cr0, [r4, #-0]
    1b14:	07000000 	streq	r0, [r0, -r0]
    1b18:	00000090 	muleq	r0, r0, r0
    1b1c:	0e040c08 	cdpeq	12, 0, cr0, cr4, cr8, {0}
    1b20:	000000d9 	ldrdeq	r0, [r0], -r9
    1b24:	00787409 	rsbseq	r7, r8, r9, lsl #8
    1b28:	004f0f04 	subeq	r0, pc, r4, lsl #30
    1b2c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1b30:	04007872 	streq	r7, [r0], #-2162	; 0x872
    1b34:	00004f0f 	andeq	r4, r0, pc, lsl #30
    1b38:	b90a0100 	stmdblt	sl, {r8}
    1b3c:	04000003 	streq	r0, [r0], #-3
    1b40:	00006810 	andeq	r6, r0, r0, lsl r8
    1b44:	6a0a0400 	bvs	282b4c <__bss_end__+0x278784>
    1b48:	04000003 	streq	r0, [r0], #-3
    1b4c:	00006811 	andeq	r6, r0, r1, lsl r8
    1b50:	04000800 	streq	r0, [r0], #-2048	; 0x800
    1b54:	000003a2 	andeq	r0, r0, r2, lsr #7
    1b58:	00a21204 	adceq	r1, r2, r4, lsl #4
    1b5c:	e1040000 	mrs	r0, (UNDEF: 4)
    1b60:	05000001 	streq	r0, [r0, #-1]
    1b64:	0000ef28 	andeq	lr, r0, r8, lsr #30
    1b68:	02080b00 	andeq	r0, r8, #0, 22
    1b6c:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    1b70:	00010600 	andeq	r0, r1, r0, lsl #12
    1b74:	025b0c00 	subseq	r0, fp, #0, 24
    1b78:	00880000 	addeq	r0, r8, r0
    1b7c:	00000000 	andeq	r0, r0, r0
    1b80:	00020a04 	andeq	r0, r2, r4, lsl #20
    1b84:	e4620500 	strbt	r0, [r2], #-1280	; 0x500
    1b88:	0d000000 	stceq	0, cr0, [r0, #-0]
    1b8c:	0000061e 	andeq	r0, r0, lr, lsl r6
    1b90:	3f030902 	svccc	0x00030902
    1b94:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    1b98:	000005a4 	andeq	r0, r0, r4, lsr #11
    1b9c:	002c0902 	eoreq	r0, ip, r2, lsl #18
    1ba0:	6e0f0000 	cdpvs	0, 0, cr0, cr15, cr0, {0}
    1ba4:	2c090200 	sfmcs	f0, 4, [r9], {-0}
    1ba8:	10000000 	andne	r0, r0, r0
    1bac:	00069211 	andeq	r9, r6, r1, lsl r2
    1bb0:	2c0c0200 	sfmcs	f0, 4, [ip], {-0}
    1bb4:	00000000 	andeq	r0, r0, r0
    1bb8:	05d10d00 	ldrbeq	r0, [r1, #3328]	; 0xd00
    1bbc:	17020000 	strne	r0, [r2, -r0]
    1bc0:	00017603 	andeq	r7, r1, r3, lsl #12
    1bc4:	69700f00 	ldmdbvs	r0!, {r8, r9, sl, fp}^
    1bc8:	1702006e 	strne	r0, [r2, -lr, rrx]
    1bcc:	0000002c 	andeq	r0, r0, ip, lsr #32
    1bd0:	0200760f 	andeq	r7, r0, #15728640	; 0xf00000
    1bd4:	00002c17 	andeq	r2, r0, r7, lsl ip
    1bd8:	05a40e00 	streq	r0, [r4, #3584]!	; 0xe00
    1bdc:	17020000 	strne	r0, [r2, -r0]
    1be0:	0000002c 	andeq	r0, r0, ip, lsr #32
    1be4:	0006240e 	andeq	r2, r6, lr, lsl #8
    1be8:	2c170200 	lfmcs	f0, 4, [r7], {-0}
    1bec:	00000000 	andeq	r0, r0, r0
    1bf0:	0003de12 	andeq	sp, r3, r2, lsl lr
    1bf4:	f4090100 	vst4.8	{d0,d2,d4,d6}, [r9], r0
    1bf8:	5400008b 	strpl	r0, [r0], #-139	; 0x8b
    1bfc:	01000001 	tsteq	r0, r1
    1c00:	0007229c 	muleq	r7, ip, r2
    1c04:	03801300 	orreq	r1, r0, #0, 6
    1c08:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1c0c:	00000722 	andeq	r0, r0, r2, lsr #14
    1c10:	00000a7d 	andeq	r0, r0, sp, ror sl
    1c14:	01006314 	tsteq	r0, r4, lsl r3
    1c18:	00005a09 	andeq	r5, r0, r9, lsl #20
    1c1c:	000a9e00 	andeq	r9, sl, r0, lsl #28
    1c20:	78741500 	ldmdavc	r4!, {r8, sl, ip}^
    1c24:	250b0100 	strcs	r0, [fp, #-256]	; 0x100
    1c28:	06000000 	streq	r0, [r0], -r0
    1c2c:	ff080076 			; <UNDEFINED> instruction: 0xff080076
    1c30:	6e169f1a 	mrcvs	15, 0, r9, cr6, cr10, {0}
    1c34:	680c0100 	stmdavs	ip, {r8}
    1c38:	bf000000 	svclt	0x00000000
    1c3c:	1600000a 	strne	r0, [r0], -sl
    1c40:	0d010075 	stceq	0, cr0, [r1, #-468]	; 0xfffffe2c
    1c44:	00000068 	andeq	r0, r0, r8, rrx
    1c48:	00000ad2 	ldrdeq	r0, [r0], -r2
    1c4c:	01007315 	tsteq	r0, r5, lsl r3
    1c50:	0000680e 	andeq	r6, r0, lr, lsl #16
    1c54:	17540100 	ldrbne	r0, [r4, -r0, lsl #2]
    1c58:	00008c04 	andeq	r8, r0, r4, lsl #24
    1c5c:	00000004 	andeq	r0, r0, r4
    1c60:	000001f8 	strdeq	r0, [r0], -r8
    1c64:	00069218 	andeq	r9, r6, r8, lsl r2
    1c68:	2c0e0100 	stfcss	f0, [lr], {-0}
    1c6c:	01000000 	mrseq	r0, (UNDEF: 0)
    1c70:	3f190054 	svccc	0x00190054
    1c74:	08000001 	stmdaeq	r0, {r0}
    1c78:	1c00008c 	stcne	0, cr0, [r0], {140}	; 0x8c
    1c7c:	01000000 	mrseq	r0, (UNDEF: 0)
    1c80:	00027511 	andeq	r7, r2, r1, lsl r5
    1c84:	016a1a00 	cmneq	sl, r0, lsl #20
    1c88:	0afb0000 	beq	ffec1c90 <__bss_end__+0xffeb78c8>
    1c8c:	5f1b0000 	svcpl	0x001b0000
    1c90:	01000001 	tsteq	r0, r1
    1c94:	01561c54 	cmpeq	r6, r4, asr ip
    1c98:	1b000000 	blne	1ca0 <_start-0x6360>
    1c9c:	0000014b 	andeq	r0, r0, fp, asr #2
    1ca0:	11195601 	tstne	r9, r1, lsl #12
    1ca4:	14000001 	strne	r0, [r0], #-1
    1ca8:	1000008c 	andne	r0, r0, ip, lsl #1
    1cac:	02000000 	andeq	r0, r0, #0
    1cb0:	00025f1a 	andeq	r5, r2, sl, lsl pc
    1cb4:	01281a00 	teqeq	r8, r0, lsl #20
    1cb8:	0b0e0000 	bleq	381cc0 <__bss_end__+0x3778f8>
    1cbc:	1d1b0000 	ldcne	0, cr0, [fp, #-0]
    1cc0:	01000001 	tsteq	r0, r1
    1cc4:	8c141d54 	ldchi	13, cr1, [r4], {84}	; 0x54
    1cc8:	00040000 	andeq	r0, r4, r0
    1ccc:	321e0000 	andscc	r0, lr, #0
    1cd0:	21000001 	tstcs	r0, r1
    1cd4:	0000000b 	andeq	r0, r0, fp
    1cd8:	8c141f00 	ldchi	15, cr1, [r4], {-0}
    1cdc:	11310000 	teqne	r1, r0
    1ce0:	01200000 	teqeq	r0, r0
    1ce4:	20300151 	eorscs	r0, r0, r1, asr r1
    1ce8:	76025001 	strvc	r5, [r2], -r1
    1cec:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    1cf0:	0000013f 	andeq	r0, r0, pc, lsr r1
    1cf4:	00008c28 	andeq	r8, r0, r8, lsr #24
    1cf8:	0000001c 	andeq	r0, r0, ip, lsl r0
    1cfc:	02f81301 	rscseq	r1, r8, #67108864	; 0x4000000
    1d00:	6a1a0000 	bvs	681d08 <__bss_end__+0x677940>
    1d04:	34000001 	strcc	r0, [r0], #-1
    1d08:	1b00000b 	blne	1d3c <_start-0x62c4>
    1d0c:	0000015f 	andeq	r0, r0, pc, asr r1
    1d10:	561a5401 	ldrpl	r5, [sl], -r1, lsl #8
    1d14:	56000001 	strpl	r0, [r0], -r1
    1d18:	1b00000b 	blne	1d4c <_start-0x62b4>
    1d1c:	0000014b 	andeq	r0, r0, fp, asr #2
    1d20:	11195601 	tstne	r9, r1, lsl #12
    1d24:	34000001 	strcc	r0, [r0], #-1
    1d28:	1000008c 	andne	r0, r0, ip, lsl #1
    1d2c:	02000000 	andeq	r0, r0, #0
    1d30:	0002df1a 	andeq	sp, r2, sl, lsl pc
    1d34:	01281a00 	teqeq	r8, r0, lsl #20
    1d38:	0b870000 	bleq	fe1c1d40 <__bss_end__+0xfe1b7978>
    1d3c:	1d1b0000 	ldcne	0, cr0, [fp, #-0]
    1d40:	01000001 	tsteq	r0, r1
    1d44:	8c341d54 	ldchi	13, cr1, [r4], #-336	; 0xfffffeb0
    1d48:	00040000 	andeq	r0, r4, r0
    1d4c:	321e0000 	andscc	r0, lr, #0
    1d50:	a9000001 	stmdbge	r0, {r0}
    1d54:	0000000b 	andeq	r0, r0, fp
    1d58:	8c341f00 	ldchi	15, cr1, [r4], #-0
    1d5c:	11310000 	teqne	r1, r0
    1d60:	01200000 	teqeq	r0, r0
    1d64:	00770451 	rsbseq	r0, r7, r1, asr r4
    1d68:	01201a31 	teqeq	r0, r1, lsr sl
    1d6c:	00760250 	rsbseq	r0, r6, r0, asr r2
    1d70:	3f190000 	svccc	0x00190000
    1d74:	48000001 	stmdami	r0, {r0}
    1d78:	1c00008c 	stcne	0, cr0, [r0], {140}	; 0x8c
    1d7c:	01000000 	mrseq	r0, (UNDEF: 0)
    1d80:	00038015 	andeq	r8, r3, r5, lsl r0
    1d84:	016a1a00 	cmneq	sl, r0, lsl #20
    1d88:	0bbc0000 	bleq	fef01d90 <__bss_end__+0xfeef79c8>
    1d8c:	5f1b0000 	svcpl	0x001b0000
    1d90:	01000001 	tsteq	r0, r1
    1d94:	01561b54 	cmpeq	r6, r4, asr fp
    1d98:	77080000 	strvc	r0, [r8, -r0]
    1d9c:	081a3200 	ldmdaeq	sl, {r9, ip, sp}
    1da0:	1b9f1aff 	blne	fe7c89a4 <__bss_end__+0xfe7be5dc>
    1da4:	0000014b 	andeq	r0, r0, fp, asr #2
    1da8:	11195601 	tstne	r9, r1, lsl #12
    1dac:	54000001 	strpl	r0, [r0], #-1
    1db0:	1000008c 	andne	r0, r0, ip, lsl #1
    1db4:	02000000 	andeq	r0, r0, #0
    1db8:	0003671a 	andeq	r6, r3, sl, lsl r7
    1dbc:	01281a00 	teqeq	r8, r0, lsl #20
    1dc0:	0be10000 	bleq	ff841dc8 <__bss_end__+0xff837a00>
    1dc4:	1d1b0000 	ldcne	0, cr0, [fp, #-0]
    1dc8:	01000001 	tsteq	r0, r1
    1dcc:	8c541d54 	mrrchi	13, 5, r1, r4, cr4
    1dd0:	00040000 	andeq	r0, r4, r0
    1dd4:	321e0000 	andscc	r0, lr, #0
    1dd8:	06000001 	streq	r0, [r0], -r1
    1ddc:	0000000c 	andeq	r0, r0, ip
    1de0:	8c541f00 	mrrchi	15, 0, r1, r4, cr0
    1de4:	11310000 	teqne	r1, r0
    1de8:	01200000 	teqeq	r0, r0
    1dec:	00770451 	rsbseq	r0, r7, r1, asr r4
    1df0:	01201a32 	teqeq	r0, r2, lsr sl
    1df4:	00760250 	rsbseq	r0, r6, r0, asr r2
    1df8:	3f190000 	svccc	0x00190000
    1dfc:	68000001 	stmdavs	r0, {r0}
    1e00:	1c00008c 	stcne	0, cr0, [r0], {140}	; 0x8c
    1e04:	01000000 	mrseq	r0, (UNDEF: 0)
    1e08:	00040817 	andeq	r0, r4, r7, lsl r8
    1e0c:	016a1a00 	cmneq	sl, r0, lsl #20
    1e10:	0c190000 	ldceq	0, cr0, [r9], {-0}
    1e14:	5f1b0000 	svcpl	0x001b0000
    1e18:	01000001 	tsteq	r0, r1
    1e1c:	01561b54 	cmpeq	r6, r4, asr fp
    1e20:	77080000 	strvc	r0, [r8, -r0]
    1e24:	081a3400 	ldmdaeq	sl, {sl, ip, sp}
    1e28:	1b9f1aff 	blne	fe7c8a2c <__bss_end__+0xfe7be664>
    1e2c:	0000014b 	andeq	r0, r0, fp, asr #2
    1e30:	11195601 	tstne	r9, r1, lsl #12
    1e34:	74000001 	strvc	r0, [r0], #-1
    1e38:	1000008c 	andne	r0, r0, ip, lsl #1
    1e3c:	02000000 	andeq	r0, r0, #0
    1e40:	0003ef1a 	andeq	lr, r3, sl, lsl pc
    1e44:	01281a00 	teqeq	r8, r0, lsl #20
    1e48:	0c3b0000 	ldceq	0, cr0, [fp], #-0
    1e4c:	1d1b0000 	ldcne	0, cr0, [fp, #-0]
    1e50:	01000001 	tsteq	r0, r1
    1e54:	8c741d54 	ldclhi	13, cr1, [r4], #-336	; 0xfffffeb0
    1e58:	00040000 	andeq	r0, r4, r0
    1e5c:	321e0000 	andscc	r0, lr, #0
    1e60:	5d000001 	stcpl	0, cr0, [r0, #-4]
    1e64:	0000000c 	andeq	r0, r0, ip
    1e68:	8c741f00 	ldclhi	15, cr1, [r4], #-0
    1e6c:	11310000 	teqne	r1, r0
    1e70:	01200000 	teqeq	r0, r0
    1e74:	00770451 	rsbseq	r0, r7, r1, asr r4
    1e78:	01201a34 	teqeq	r0, r4, lsr sl
    1e7c:	00760250 	rsbseq	r0, r6, r0, asr r2
    1e80:	3f190000 	svccc	0x00190000
    1e84:	88000001 	stmdahi	r0, {r0}
    1e88:	1c00008c 	stcne	0, cr0, [r0], {140}	; 0x8c
    1e8c:	01000000 	mrseq	r0, (UNDEF: 0)
    1e90:	00049019 	andeq	r9, r4, r9, lsl r0
    1e94:	016a1a00 	cmneq	sl, r0, lsl #20
    1e98:	0c700000 	ldcleq	0, cr0, [r0], #-0
    1e9c:	5f1b0000 	svcpl	0x001b0000
    1ea0:	01000001 	tsteq	r0, r1
    1ea4:	01561b54 	cmpeq	r6, r4, asr fp
    1ea8:	77080000 	strvc	r0, [r8, -r0]
    1eac:	081a3800 	ldmdaeq	sl, {fp, ip, sp}
    1eb0:	1b9f1aff 	blne	fe7c8ab4 <__bss_end__+0xfe7be6ec>
    1eb4:	0000014b 	andeq	r0, r0, fp, asr #2
    1eb8:	11195601 	tstne	r9, r1, lsl #12
    1ebc:	94000001 	strls	r0, [r0], #-1
    1ec0:	1000008c 	andne	r0, r0, ip, lsl #1
    1ec4:	02000000 	andeq	r0, r0, #0
    1ec8:	0004771a 	andeq	r7, r4, sl, lsl r7
    1ecc:	01281a00 	teqeq	r8, r0, lsl #20
    1ed0:	0c950000 	ldceq	0, cr0, [r5], {0}
    1ed4:	1d1b0000 	ldcne	0, cr0, [fp, #-0]
    1ed8:	01000001 	tsteq	r0, r1
    1edc:	8c941d54 	ldchi	13, cr1, [r4], {84}	; 0x54
    1ee0:	00040000 	andeq	r0, r4, r0
    1ee4:	321e0000 	andscc	r0, lr, #0
    1ee8:	ba000001 	blt	1ef4 <_start-0x610c>
    1eec:	0000000c 	andeq	r0, r0, ip
    1ef0:	8c941f00 	ldchi	15, cr1, [r4], {0}
    1ef4:	11310000 	teqne	r1, r0
    1ef8:	01200000 	teqeq	r0, r0
    1efc:	00770451 	rsbseq	r0, r7, r1, asr r4
    1f00:	01201a38 	teqeq	r0, r8, lsr sl
    1f04:	00760250 	rsbseq	r0, r6, r0, asr r2
    1f08:	3f190000 	svccc	0x00190000
    1f0c:	a8000001 	stmdage	r0, {r0}
    1f10:	1c00008c 	stcne	0, cr0, [r0], {140}	; 0x8c
    1f14:	01000000 	mrseq	r0, (UNDEF: 0)
    1f18:	0005181b 	andeq	r1, r5, fp, lsl r8
    1f1c:	016a1a00 	cmneq	sl, r0, lsl #20
    1f20:	0ccd0000 	stcleq	0, cr0, [sp], {0}
    1f24:	5f1b0000 	svcpl	0x001b0000
    1f28:	01000001 	tsteq	r0, r1
    1f2c:	01561b54 	cmpeq	r6, r4, asr fp
    1f30:	77080000 	strvc	r0, [r8, -r0]
    1f34:	081a4000 	ldmdaeq	sl, {lr}
    1f38:	1b9f1aff 	blne	fe7c8b3c <__bss_end__+0xfe7be774>
    1f3c:	0000014b 	andeq	r0, r0, fp, asr #2
    1f40:	11195601 	tstne	r9, r1, lsl #12
    1f44:	b4000001 	strlt	r0, [r0], #-1
    1f48:	1000008c 	andne	r0, r0, ip, lsl #1
    1f4c:	02000000 	andeq	r0, r0, #0
    1f50:	0004ff1a 	andeq	pc, r4, sl, lsl pc	; <UNPREDICTABLE>
    1f54:	01281a00 	teqeq	r8, r0, lsl #20
    1f58:	0cf40000 	ldcleq	0, cr0, [r4]
    1f5c:	1d1b0000 	ldcne	0, cr0, [fp, #-0]
    1f60:	01000001 	tsteq	r0, r1
    1f64:	8cb41d54 	ldchi	13, cr1, [r4], #336	; 0x150
    1f68:	00040000 	andeq	r0, r4, r0
    1f6c:	321e0000 	andscc	r0, lr, #0
    1f70:	1b000001 	blne	1f7c <_start-0x6084>
    1f74:	0000000d 	andeq	r0, r0, sp
    1f78:	8cb41f00 	ldchi	15, cr1, [r4]
    1f7c:	11310000 	teqne	r1, r0
    1f80:	01200000 	teqeq	r0, r0
    1f84:	00770451 	rsbseq	r0, r7, r1, asr r4
    1f88:	01201a40 	teqeq	r0, r0, asr #20
    1f8c:	00760250 	rsbseq	r0, r6, r0, asr r2
    1f90:	3f190000 	svccc	0x00190000
    1f94:	c8000001 	stmdagt	r0, {r0}
    1f98:	1c00008c 	stcne	0, cr0, [r0], {140}	; 0x8c
    1f9c:	01000000 	mrseq	r0, (UNDEF: 0)
    1fa0:	0005a21d 	andeq	sl, r5, sp, lsl r2
    1fa4:	016a1a00 	cmneq	sl, r0, lsl #20
    1fa8:	0d2e0000 	stceq	0, cr0, [lr, #-0]
    1fac:	5f1b0000 	svcpl	0x001b0000
    1fb0:	01000001 	tsteq	r0, r1
    1fb4:	01561b54 	cmpeq	r6, r4, asr fp
    1fb8:	77090000 	strvc	r0, [r9, -r0]
    1fbc:	1a200800 	bne	803fc4 <__bss_end__+0x7f9bfc>
    1fc0:	9f1aff08 	svcls	0x001aff08
    1fc4:	00014b1b 	andeq	r4, r1, fp, lsl fp
    1fc8:	19560100 	ldmdbne	r6, {r8}^
    1fcc:	00000111 	andeq	r0, r0, r1, lsl r1
    1fd0:	00008cd4 	ldrdeq	r8, [r0], -r4
    1fd4:	00000010 	andeq	r0, r0, r0, lsl r0
    1fd8:	05881a02 	streq	r1, [r8, #2562]	; 0xa02
    1fdc:	281a0000 	ldmdacs	sl, {}	; <UNPREDICTABLE>
    1fe0:	58000001 	stmdapl	r0, {r0}
    1fe4:	1b00000d 	blne	2020 <_start-0x5fe0>
    1fe8:	0000011d 	andeq	r0, r0, sp, lsl r1
    1fec:	d41d5401 	ldrle	r5, [sp], #-1025	; 0x401
    1ff0:	0400008c 	streq	r0, [r0], #-140	; 0x8c
    1ff4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1ff8:	00000132 	andeq	r0, r0, r2, lsr r1
    1ffc:	00000d82 	andeq	r0, r0, r2, lsl #27
    2000:	d41f0000 	ldrle	r0, [pc], #-0	; 2008 <_start-0x5ff8>
    2004:	3100008c 	smlabbcc	r0, ip, r0, r0
    2008:	20000011 	andcs	r0, r0, r1, lsl r0
    200c:	77055101 	strvc	r5, [r5, -r1, lsl #2]
    2010:	1a200800 	bne	804018 <__bss_end__+0x7f9c50>
    2014:	02500120 	subseq	r0, r0, #32, 2
    2018:	00000076 	andeq	r0, r0, r6, ror r0
    201c:	00013f19 	andeq	r3, r1, r9, lsl pc
    2020:	008ce800 	addeq	lr, ip, r0, lsl #16
    2024:	00001c00 	andeq	r1, r0, r0, lsl #24
    2028:	2c1f0100 	ldfcss	f0, [pc], {-0}
    202c:	1a000006 	bne	204c <_start-0x5fb4>
    2030:	0000016a 	andeq	r0, r0, sl, ror #2
    2034:	00000d95 	muleq	r0, r5, sp
    2038:	00015f1b 	andeq	r5, r1, fp, lsl pc
    203c:	1b540100 	blne	1502444 <__bss_end__+0x14f807c>
    2040:	00000156 	andeq	r0, r0, r6, asr r1
    2044:	08007709 	stmdaeq	r0, {r0, r3, r8, r9, sl, ip, sp, lr}
    2048:	ff081a40 			; <UNDEFINED> instruction: 0xff081a40
    204c:	4b1b9f1a 	blmi	6e9cbc <__bss_end__+0x6df8f4>
    2050:	01000001 	tsteq	r0, r1
    2054:	01111956 	tsteq	r1, r6, asr r9
    2058:	8cf40000 	ldclhi	0, cr0, [r4]
    205c:	00100000 	andseq	r0, r0, r0
    2060:	1a020000 	bne	82068 <__bss_end__+0x77ca0>
    2064:	00000612 	andeq	r0, r0, r2, lsl r6
    2068:	0001281a 	andeq	r2, r1, sl, lsl r8
    206c:	000db700 	andeq	fp, sp, r0, lsl #14
    2070:	011d1b00 	tsteq	sp, r0, lsl #22
    2074:	54010000 	strpl	r0, [r1], #-0
    2078:	008cf41d 	addeq	pc, ip, sp, lsl r4	; <UNPREDICTABLE>
    207c:	00000400 	andeq	r0, r0, r0, lsl #8
    2080:	01321e00 	teqeq	r2, r0, lsl #28
    2084:	0dd90000 	ldcleq	0, cr0, [r9]
    2088:	00000000 	andeq	r0, r0, r0
    208c:	008cf41f 	addeq	pc, ip, pc, lsl r4	; <UNPREDICTABLE>
    2090:	00113100 	andseq	r3, r1, r0, lsl #2
    2094:	51012000 	mrspl	r2, (UNDEF: 1)
    2098:	08007705 	stmdaeq	r0, {r0, r2, r8, r9, sl, ip, sp, lr}
    209c:	01201a40 	teqeq	r0, r0, asr #20
    20a0:	00760250 	rsbseq	r0, r6, r0, asr r2
    20a4:	3f190000 	svccc	0x00190000
    20a8:	08000001 	stmdaeq	r0, {r0}
    20ac:	1c00008d 	stcne	0, cr0, [r0], {141}	; 0x8d
    20b0:	01000000 	mrseq	r0, (UNDEF: 0)
    20b4:	0006ac21 	andeq	sl, r6, r1, lsr #24
    20b8:	016a1b00 	cmneq	sl, r0, lsl #22
    20bc:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    20c0:	00015f1b 	andeq	r5, r1, fp, lsl pc
    20c4:	1a540100 	bne	15024cc <__bss_end__+0x14f8104>
    20c8:	00000156 	andeq	r0, r0, r6, asr r1
    20cc:	00000dec 	andeq	r0, r0, ip, ror #27
    20d0:	00014b1b 	andeq	r4, r1, fp, lsl fp
    20d4:	19560100 	ldmdbne	r6, {r8}^
    20d8:	00000111 	andeq	r0, r0, r1, lsl r1
    20dc:	00008d14 	andeq	r8, r0, r4, lsl sp
    20e0:	00000010 	andeq	r0, r0, r0, lsl r0
    20e4:	06921a02 	ldreq	r1, [r2], r2, lsl #20
    20e8:	281b0000 	ldmdacs	fp, {}	; <UNPREDICTABLE>
    20ec:	01000001 	tsteq	r0, r1
    20f0:	011d1b58 	tsteq	sp, r8, asr fp
    20f4:	54010000 	strpl	r0, [r1], #-0
    20f8:	008d141d 	addeq	r1, sp, sp, lsl r4
    20fc:	00000400 	andeq	r0, r0, r0, lsl #8
    2100:	01321e00 	teqeq	r2, r0, lsl #28
    2104:	0e1f0000 	cdpeq	0, 1, cr0, cr15, cr0, {0}
    2108:	00000000 	andeq	r0, r0, r0
    210c:	008d141f 	addeq	r1, sp, pc, lsl r4
    2110:	00113100 	andseq	r3, r1, r0, lsl #2
    2114:	51012000 	mrspl	r2, (UNDEF: 1)
    2118:	08007705 	stmdaeq	r0, {r0, r2, r8, r9, sl, ip, sp, lr}
    211c:	01201a80 	smlawbeq	r0, r0, sl, r1
    2120:	00760250 	rsbseq	r0, r6, r0, asr r2
    2124:	3f210000 	svccc	0x00210000
    2128:	28000001 	stmdacs	r0, {r0}
    212c:	1c00008d 	stcne	0, cr0, [r0], {141}	; 0x8d
    2130:	01000000 	mrseq	r0, (UNDEF: 0)
    2134:	016a1b23 	cmneq	sl, r3, lsr #22
    2138:	55010000 	strpl	r0, [r1, #-0]
    213c:	00015f1b 	andeq	r5, r1, fp, lsl pc
    2140:	1c540100 	ldfnee	f0, [r4], {-0}
    2144:	00000156 	andeq	r0, r0, r6, asr r1
    2148:	014b1b01 	cmpeq	fp, r1, lsl #22
    214c:	56010000 	strpl	r0, [r1], -r0
    2150:	00011119 	andeq	r1, r1, r9, lsl r1
    2154:	008d3400 	addeq	r3, sp, r0, lsl #8
    2158:	00001000 	andeq	r1, r0, r0
    215c:	0b1a0200 	bleq	682964 <__bss_end__+0x67859c>
    2160:	1b000007 	blne	2184 <_start-0x5e7c>
    2164:	00000128 	andeq	r0, r0, r8, lsr #2
    2168:	1d1b5501 	cfldr32ne	mvfx5, [fp, #-4]
    216c:	01000001 	tsteq	r0, r1
    2170:	8d341d54 	ldchi	13, cr1, [r4, #-336]!	; 0xfffffeb0
    2174:	00040000 	andeq	r0, r4, r0
    2178:	321e0000 	andscc	r0, lr, #0
    217c:	32000001 	andcc	r0, r0, #1
    2180:	0000000e 	andeq	r0, r0, lr
    2184:	8d341f00 	ldchi	15, cr1, [r4, #-0]
    2188:	11310000 	teqne	r1, r0
    218c:	01200000 	teqeq	r0, r0
    2190:	20310151 	eorscs	r0, r1, r1, asr r1
    2194:	76025001 	strvc	r5, [r2], -r1
    2198:	00000000 	andeq	r0, r0, r0
    219c:	00d90406 	sbcseq	r0, r9, r6, lsl #8
    21a0:	e5220000 	str	r0, [r2, #-0]!
    21a4:	01000006 	tsteq	r0, r6
    21a8:	00002527 	andeq	r2, r0, r7, lsr #10
    21ac:	07620300 	strbeq	r0, [r2, -r0, lsl #6]!
    21b0:	720f0000 	andvc	r0, pc, #0
    21b4:	27010078 	smlsdxcs	r1, r8, r0, r0
    21b8:	00000025 	andeq	r0, r0, r5, lsr #32
    21bc:	0100760f 	tsteq	r0, pc, lsl #12
    21c0:	00002527 	andeq	r2, r0, r7, lsr #10
    21c4:	06400e00 	strbeq	r0, [r0], -r0, lsl #28
    21c8:	27010000 	strcs	r0, [r1, -r0]
    21cc:	0000002c 	andeq	r0, r0, ip, lsr #32
    21d0:	0005a411 	andeq	sl, r5, r1, lsl r4
    21d4:	2c280100 	stfcss	f0, [r8], #-0
    21d8:	00000000 	andeq	r0, r0, r0
    21dc:	0005e123 	andeq	lr, r5, r3, lsr #2
    21e0:	25340100 	ldrcs	r0, [r4, #-256]!	; 0x100
    21e4:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    21e8:	c800008d 	stmdagt	r0, {r0, r2, r3, r7}
    21ec:	01000001 	tsteq	r0, r1
    21f0:	000b1e9c 	muleq	fp, ip, lr
    21f4:	03801300 	orreq	r1, r0, #0, 6
    21f8:	34010000 	strcc	r0, [r1], #-0
    21fc:	00000722 	andeq	r0, r0, r2, lsr #14
    2200:	00000e45 	andeq	r0, r0, r5, asr #28
    2204:	00064013 	andeq	r4, r6, r3, lsl r0
    2208:	25340100 	ldrcs	r0, [r4, #-256]!	; 0x100
    220c:	8a000000 	bhi	2214 <_start-0x5dec>
    2210:	1500000e 	strne	r0, [r0, #-14]
    2214:	01007872 	tsteq	r0, r2, ror r8
    2218:	00002535 	andeq	r2, r0, r5, lsr r5
    221c:	16550100 	ldrbne	r0, [r5], -r0, lsl #2
    2220:	3c010073 	stccc	0, cr0, [r1], {115}	; 0x73
    2224:	0000002c 	andeq	r0, r0, ip, lsr #32
    2228:	00000ea8 	andeq	r0, r0, r8, lsr #29
    222c:	01007516 	tsteq	r0, r6, lsl r5
    2230:	0000683f 	andeq	r6, r0, pc, lsr r8
    2234:	000ebb00 	andeq	fp, lr, r0, lsl #22
    2238:	006e1600 	rsbeq	r1, lr, r0, lsl #12
    223c:	002c4001 	eoreq	r4, ip, r1
    2240:	0ece0000 	cdpeq	0, 12, cr0, cr14, cr0, {0}
    2244:	63160000 	tstvs	r6, #0
    2248:	2c410100 	stfcse	f0, [r1], {-0}
    224c:	e5000000 	str	r0, [r0, #-0]
    2250:	1900000e 	stmdbne	r0, {r1, r2, r3}
    2254:	00000728 	andeq	r0, r0, r8, lsr #14
    2258:	00008d5c 	andeq	r8, r0, ip, asr sp
    225c:	00000034 	andeq	r0, r0, r4, lsr r0
    2260:	083c3801 	ldmdaeq	ip!, {r0, fp, ip, sp}
    2264:	4b1a0000 	blmi	68226c <__bss_end__+0x677ea4>
    2268:	0f000007 	svceq	0x00000007
    226c:	1c00000f 	stcne	0, cr0, [r0], {15}
    2270:	00000742 	andeq	r0, r0, r2, asr #14
    2274:	07381b00 	ldreq	r1, [r8, -r0, lsl #22]!
    2278:	55010000 	strpl	r0, [r1, #-0]
    227c:	008d5c1d 	addeq	r5, sp, sp, lsl ip
    2280:	00003400 	andeq	r3, r0, r0, lsl #8
    2284:	07561e00 	ldrbeq	r1, [r6, -r0, lsl #28]
    2288:	0f2d0000 	svceq	0x002d0000
    228c:	60240000 	eorvs	r0, r4, r0
    2290:	4700008d 	strmi	r0, [r0, -sp, lsl #1]
    2294:	25000011 	strcs	r0, [r0, #-17]
    2298:	00008d6c 	andeq	r8, r0, ip, ror #26
    229c:	00001152 	andeq	r1, r0, r2, asr r1
    22a0:	00000831 	andeq	r0, r0, r1, lsr r8
    22a4:	02500120 	subseq	r0, r0, #32, 2
    22a8:	24000075 	strcs	r0, [r0], #-117	; 0x75
    22ac:	00008d78 	andeq	r8, r0, r8, ror sp
    22b0:	00001147 	andeq	r1, r0, r7, asr #2
    22b4:	98170000 	ldmdals	r7, {}	; <UNPREDICTABLE>
    22b8:	0400008d 	streq	r0, [r0], #-141	; 0x8d
    22bc:	59000000 	stmdbpl	r0, {}	; <UNPREDICTABLE>
    22c0:	26000008 	strcs	r0, [r0], -r8
    22c4:	00000692 	muleq	r0, r2, r6
    22c8:	002c3c01 	eoreq	r3, ip, r1, lsl #24
    22cc:	0f4b0000 	svceq	0x004b0000
    22d0:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    22d4:	00000111 	andeq	r0, r0, r1, lsl r1
    22d8:	00008da4 	andeq	r8, r0, r4, lsr #27
    22dc:	00000010 	andeq	r0, r0, r0, lsl r0
    22e0:	08924401 	ldmeq	r2, {r0, sl, lr}
    22e4:	281a0000 	ldmdacs	sl, {}	; <UNPREDICTABLE>
    22e8:	5e000001 	cdppl	0, 0, cr0, cr0, cr1, {0}
    22ec:	1a00000f 	bne	2330 <_start-0x5cd0>
    22f0:	0000011d 	andeq	r0, r0, sp, lsl r1
    22f4:	00000f83 	andeq	r0, r0, r3, lsl #31
    22f8:	008da41d 	addeq	sl, sp, sp, lsl r4
    22fc:	00000400 	andeq	r0, r0, r0, lsl #8
    2300:	01321e00 	teqeq	r2, r0, lsl #28
    2304:	0f960000 	svceq	0x00960000
    2308:	00000000 	andeq	r0, r0, r0
    230c:	00011119 	andeq	r1, r1, r9, lsl r1
    2310:	008dc400 	addeq	ip, sp, r0, lsl #8
    2314:	00001000 	andeq	r1, r0, r0
    2318:	cb480100 	blgt	1202720 <__bss_end__+0x11f8358>
    231c:	1a000008 	bne	2344 <_start-0x5cbc>
    2320:	00000128 	andeq	r0, r0, r8, lsr #2
    2324:	00000fa9 	andeq	r0, r0, r9, lsr #31
    2328:	00011d1a 	andeq	r1, r1, sl, lsl sp
    232c:	000fbc00 	andeq	fp, pc, r0, lsl #24
    2330:	8dc41d00 	stclhi	13, cr1, [r4]
    2334:	00040000 	andeq	r0, r4, r0
    2338:	321e0000 	andscc	r0, lr, #0
    233c:	cf000001 	svcgt	0x00000001
    2340:	0000000f 	andeq	r0, r0, pc
    2344:	01111900 	tsteq	r1, r0, lsl #18
    2348:	8de80000 	stclhi	0, cr0, [r8]
    234c:	00100000 	andseq	r0, r0, r0
    2350:	4b010000 	blmi	42358 <__bss_end__+0x37f90>
    2354:	00000904 	andeq	r0, r0, r4, lsl #18
    2358:	0001281a 	andeq	r2, r1, sl, lsl r8
    235c:	000fe200 	andeq	lr, pc, r0, lsl #4
    2360:	011d1a00 	tsteq	sp, r0, lsl #20
    2364:	0ff50000 	svceq	0x00f50000
    2368:	e81d0000 	ldmda	sp, {}	; <UNPREDICTABLE>
    236c:	0400008d 	streq	r0, [r0], #-141	; 0x8d
    2370:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2374:	00000132 	andeq	r0, r0, r2, lsr r1
    2378:	00001008 	andeq	r1, r0, r8
    237c:	11190000 	tstne	r9, r0
    2380:	0c000001 	stceq	0, cr0, [r0], {1}
    2384:	1000008e 	andne	r0, r0, lr, lsl #1
    2388:	01000000 	mrseq	r0, (UNDEF: 0)
    238c:	00093d4e 	andeq	r3, r9, lr, asr #26
    2390:	01281a00 	teqeq	r8, r0, lsl #20
    2394:	101b0000 	andsne	r0, fp, r0
    2398:	1d1a0000 	ldcne	0, cr0, [sl, #-0]
    239c:	2e000001 	cdpcs	0, 0, cr0, cr0, cr1, {0}
    23a0:	1d000010 	stcne	0, cr0, [r0, #-64]	; 0xffffffc0
    23a4:	00008e0c 	andeq	r8, r0, ip, lsl #28
    23a8:	00000004 	andeq	r0, r0, r4
    23ac:	0001321e 	andeq	r3, r1, lr, lsl r2
    23b0:	00104100 	andseq	r4, r0, r0, lsl #2
    23b4:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    23b8:	00000111 	andeq	r0, r0, r1, lsl r1
    23bc:	00008e30 	andeq	r8, r0, r0, lsr lr
    23c0:	00000010 	andeq	r0, r0, r0, lsl r0
    23c4:	09765101 	ldmdbeq	r6!, {r0, r8, ip, lr}^
    23c8:	281a0000 	ldmdacs	sl, {}	; <UNPREDICTABLE>
    23cc:	54000001 	strpl	r0, [r0], #-1
    23d0:	1a000010 	bne	2418 <_start-0x5be8>
    23d4:	0000011d 	andeq	r0, r0, sp, lsl r1
    23d8:	00001067 	andeq	r1, r0, r7, rrx
    23dc:	008e301d 	addeq	r3, lr, sp, lsl r0
    23e0:	00000400 	andeq	r0, r0, r0, lsl #8
    23e4:	01321e00 	teqeq	r2, r0, lsl #28
    23e8:	107a0000 	rsbsne	r0, sl, r0
    23ec:	00000000 	andeq	r0, r0, r0
    23f0:	00011119 	andeq	r1, r1, r9, lsl r1
    23f4:	008e5400 	addeq	r5, lr, r0, lsl #8
    23f8:	00001000 	andeq	r1, r0, r0
    23fc:	af540100 	svcge	0x00540100
    2400:	1a000009 	bne	242c <_start-0x5bd4>
    2404:	00000128 	andeq	r0, r0, r8, lsr #2
    2408:	0000108d 	andeq	r1, r0, sp, lsl #1
    240c:	00011d1a 	andeq	r1, r1, sl, lsl sp
    2410:	0010a000 	andseq	sl, r0, r0
    2414:	8e541d00 	cdphi	13, 5, cr1, cr4, cr0, {0}
    2418:	00040000 	andeq	r0, r4, r0
    241c:	321e0000 	andscc	r0, lr, #0
    2420:	b3000001 	movwlt	r0, #1
    2424:	00000010 	andeq	r0, r0, r0, lsl r0
    2428:	01111900 	tsteq	r1, r0, lsl #18
    242c:	8e780000 	cdphi	0, 7, cr0, cr8, cr0, {0}
    2430:	00100000 	andseq	r0, r0, r0
    2434:	57010000 	strpl	r0, [r1, -r0]
    2438:	000009e8 	andeq	r0, r0, r8, ror #19
    243c:	0001281a 	andeq	r2, r1, sl, lsl r8
    2440:	0010c600 	andseq	ip, r0, r0, lsl #12
    2444:	011d1a00 	tsteq	sp, r0, lsl #20
    2448:	10d90000 	sbcsne	r0, r9, r0
    244c:	781d0000 	ldmdavc	sp, {}	; <UNPREDICTABLE>
    2450:	0400008e 	streq	r0, [r0], #-142	; 0x8e
    2454:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2458:	00000132 	andeq	r0, r0, r2, lsr r1
    245c:	000010ec 	andeq	r1, r0, ip, ror #1
    2460:	11190000 	tstne	r9, r0
    2464:	9c000001 	stcls	0, cr0, [r0], {1}
    2468:	1000008e 	andne	r0, r0, lr, lsl #1
    246c:	01000000 	mrseq	r0, (UNDEF: 0)
    2470:	000a1d5a 	andeq	r1, sl, sl, asr sp
    2474:	01281a00 	teqeq	r8, r0, lsl #20
    2478:	10ff0000 	rscsne	r0, pc, r0
    247c:	1d270000 	stcne	0, cr0, [r7, #-0]
    2480:	1d000001 	stcne	0, cr0, [r0, #-4]
    2484:	00008e9c 	muleq	r0, ip, lr
    2488:	00000004 	andeq	r0, r0, r4
    248c:	0001321e 	andeq	r3, r1, lr, lsl r2
    2490:	00111200 	andseq	r1, r1, r0, lsl #4
    2494:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    2498:	00000728 	andeq	r0, r0, r8, lsr #14
    249c:	00008ebc 			; <UNDEFINED> instruction: 0x00008ebc
    24a0:	00000034 	andeq	r0, r0, r4, lsr r0
    24a4:	0a816101 	beq	fe05a8b0 <__bss_end__+0xfe0504e8>
    24a8:	4b270000 	blmi	9c24b0 <__bss_end__+0x9b80e8>
    24ac:	1a000007 	bne	24d0 <_start-0x5b30>
    24b0:	00000742 	andeq	r0, r0, r2, asr #14
    24b4:	00001125 	andeq	r1, r0, r5, lsr #2
    24b8:	0007381a 	andeq	r3, r7, sl, lsl r8
    24bc:	00114500 	andseq	r4, r1, r0, lsl #10
    24c0:	8ebc1d00 	cdphi	13, 11, cr1, cr12, cr0, {0}
    24c4:	00340000 	eorseq	r0, r4, r0
    24c8:	561e0000 	ldrpl	r0, [lr], -r0
    24cc:	63000007 	movwvs	r0, #7
    24d0:	24000011 	strcs	r0, [r0], #-17
    24d4:	00008ec0 	andeq	r8, r0, r0, asr #29
    24d8:	00001147 	andeq	r1, r0, r7, asr #2
    24dc:	008ecc25 	addeq	ip, lr, r5, lsr #24
    24e0:	00115200 	andseq	r5, r1, r0, lsl #4
    24e4:	000a7600 	andeq	r7, sl, r0, lsl #12
    24e8:	50012000 	andpl	r2, r1, r0
    24ec:	00007502 	andeq	r7, r0, r2, lsl #10
    24f0:	008ed824 	addeq	sp, lr, r4, lsr #16
    24f4:	00114700 	andseq	r4, r1, r0, lsl #14
    24f8:	25000000 	strcs	r0, [r0, #-0]
    24fc:	00008dc0 	andeq	r8, r0, r0, asr #27
    2500:	00001152 	andeq	r1, r0, r2, asr r1
    2504:	00000a95 	muleq	r0, r5, sl
    2508:	02500120 	subseq	r0, r0, #32, 2
    250c:	25000075 	strcs	r0, [r0, #-117]	; 0x75
    2510:	00008de0 	andeq	r8, r0, r0, ror #27
    2514:	00001152 	andeq	r1, r0, r2, asr r1
    2518:	00000aa9 	andeq	r0, r0, r9, lsr #21
    251c:	02500120 	subseq	r0, r0, #32, 2
    2520:	25000075 	strcs	r0, [r0, #-117]	; 0x75
    2524:	00008e04 	andeq	r8, r0, r4, lsl #28
    2528:	00001152 	andeq	r1, r0, r2, asr r1
    252c:	00000abd 			; <UNDEFINED> instruction: 0x00000abd
    2530:	02500120 	subseq	r0, r0, #32, 2
    2534:	25000075 	strcs	r0, [r0, #-117]	; 0x75
    2538:	00008e28 	andeq	r8, r0, r8, lsr #28
    253c:	00001152 	andeq	r1, r0, r2, asr r1
    2540:	00000ad1 	ldrdeq	r0, [r0], -r1
    2544:	02500120 	subseq	r0, r0, #32, 2
    2548:	25000075 	strcs	r0, [r0, #-117]	; 0x75
    254c:	00008e4c 	andeq	r8, r0, ip, asr #28
    2550:	00001152 	andeq	r1, r0, r2, asr r1
    2554:	00000ae5 	andeq	r0, r0, r5, ror #21
    2558:	02500120 	subseq	r0, r0, #32, 2
    255c:	25000075 	strcs	r0, [r0, #-117]	; 0x75
    2560:	00008e70 	andeq	r8, r0, r0, ror lr
    2564:	00001152 	andeq	r1, r0, r2, asr r1
    2568:	00000af9 	strdeq	r0, [r0], -r9
    256c:	02500120 	subseq	r0, r0, #32, 2
    2570:	25000075 	strcs	r0, [r0, #-117]	; 0x75
    2574:	00008e94 	muleq	r0, r4, lr
    2578:	00001152 	andeq	r1, r0, r2, asr r1
    257c:	00000b0d 	andeq	r0, r0, sp, lsl #22
    2580:	02500120 	subseq	r0, r0, #32, 2
    2584:	1f000075 	svcne	0x00000075
    2588:	00008eb4 			; <UNDEFINED> instruction: 0x00008eb4
    258c:	00001152 	andeq	r1, r0, r2, asr r1
    2590:	02500120 	subseq	r0, r0, #32, 2
    2594:	00000075 	andeq	r0, r0, r5, ror r0
    2598:	0005f623 	andeq	pc, r5, r3, lsr #12
    259c:	256c0100 	strbcs	r0, [ip, #-256]!	; 0x100
    25a0:	10000000 	andne	r0, r0, r0
    25a4:	9000008f 	andls	r0, r0, pc, lsl #1
    25a8:	01000000 	mrseq	r0, (UNDEF: 0)
    25ac:	000c029c 	muleq	ip, ip, r2
    25b0:	00751400 	rsbseq	r1, r5, r0, lsl #8
    25b4:	07226c01 	streq	r6, [r2, -r1, lsl #24]!
    25b8:	11810000 	orrne	r0, r1, r0
    25bc:	62140000 	andsvs	r0, r4, #0
    25c0:	01006675 	tsteq	r0, r5, ror r6
    25c4:	000c026c 	andeq	r0, ip, ip, ror #4
    25c8:	0011b500 	andseq	fp, r1, r0, lsl #10
    25cc:	057b1300 	ldrbeq	r1, [fp, #-768]!	; 0x300
    25d0:	6c010000 	stcvs	0, cr0, [r1], {-0}
    25d4:	00000068 	andeq	r0, r0, r8, rrx
    25d8:	000011e9 	andeq	r1, r0, r9, ror #3
    25dc:	646e6514 	strbtvs	r6, [lr], #-1300	; 0x514
    25e0:	4f6c0100 	svcmi	0x006c0100
    25e4:	22000000 	andcs	r0, r0, #0
    25e8:	28000012 	stmdacs	r0, {r1, r4}
    25ec:	000006a2 	andeq	r0, r0, r2, lsr #13
    25f0:	00686c01 	rsbeq	r6, r8, r1, lsl #24
    25f4:	91020000 	mrsls	r0, (UNDEF: 2)
    25f8:	012d2900 	teqeq	sp, r0, lsl #18
    25fc:	0c180000 	ldceq	0, cr0, [r8], {-0}
    2600:	03050000 	movweq	r0, #20480	; 0x5000
    2604:	00009e6c 	andeq	r9, r0, ip, ror #28
    2608:	01006916 	tsteq	r0, r6, lsl r9
    260c:	00002570 	andeq	r2, r0, r0, ror r5
    2610:	00125c00 	andseq	r5, r2, r0, lsl #24
    2614:	06752600 	ldrbteq	r2, [r5], -r0, lsl #12
    2618:	71010000 	mrsvc	r0, (UNDEF: 1)
    261c:	0000004f 	andeq	r0, r0, pc, asr #32
    2620:	0000127b 	andeq	r1, r0, fp, ror r2
    2624:	008f3024 	addeq	r3, pc, r4, lsr #32
    2628:	00116700 	andseq	r6, r1, r0, lsl #14
    262c:	8f442500 	svchi	0x00442500
    2630:	116e0000 	cmnne	lr, r0
    2634:	0be20000 	bleq	ff88263c <__bss_end__+0xff878274>
    2638:	01200000 	teqeq	r0, r0
    263c:	6d080253 	sfmvs	f0, 4, [r8, #-332]	; 0xfffffeb4
    2640:	05520120 	ldrbeq	r0, [r2, #-288]	; 0x120
    2644:	009e6c03 	addseq	r6, lr, r3, lsl #24
    2648:	51012000 	mrspl	r2, (UNDEF: 1)
    264c:	9f000305 	svcls	0x00000305
    2650:	01200000 	teqeq	r0, r0
    2654:	e4030550 	str	r0, [r3], #-1360	; 0x550
    2658:	0000009e 	muleq	r0, lr, r0
    265c:	008f4824 	addeq	r4, pc, r4, lsr #16
    2660:	00118400 	andseq	r8, r1, r0, lsl #8
    2664:	8f641f00 	svchi	0x00641f00
    2668:	07620000 	strbeq	r0, [r2, -r0]!
    266c:	01200000 	teqeq	r0, r0
    2670:	007a0251 	rsbseq	r0, sl, r1, asr r2
    2674:	02500120 	subseq	r0, r0, #32, 2
    2678:	00000078 	andeq	r0, r0, r8, ror r0
    267c:	004f0406 	subeq	r0, pc, r6, lsl #8
    2680:	902a0000 	eorls	r0, sl, r0
    2684:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    2688:	2b00000c 	blcs	26c0 <_start-0x5940>
    268c:	00000081 	andeq	r0, r0, r1, lsl #1
    2690:	08070012 	stmdaeq	r7, {r1, r4}
    2694:	2300000c 	movwcs	r0, #12
    2698:	0000067d 	andeq	r0, r0, sp, ror r6
    269c:	00258001 	eoreq	r8, r5, r1
    26a0:	8fa00000 	svchi	0x00a00000
    26a4:	007c0000 	rsbseq	r0, ip, r0
    26a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    26ac:	00000ce4 	andeq	r0, r0, r4, ror #25
    26b0:	01007514 	tsteq	r0, r4, lsl r5
    26b4:	00072280 	andeq	r2, r7, r0, lsl #5
    26b8:	00128e00 	andseq	r8, r2, r0, lsl #28
    26bc:	75621400 	strbvc	r1, [r2, #-1024]!	; 0x400
    26c0:	80010066 	andhi	r0, r1, r6, rrx
    26c4:	00000c02 	andeq	r0, r0, r2, lsl #24
    26c8:	000012c2 	andeq	r1, r0, r2, asr #5
    26cc:	00057b13 	andeq	r7, r5, r3, lsl fp
    26d0:	68810100 	stmvs	r1, {r8}
    26d4:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    26d8:	13000012 	movwne	r0, #18
    26dc:	000006a2 	andeq	r0, r0, r2, lsr #13
    26e0:	00688101 	rsbeq	r8, r8, r1, lsl #2
    26e4:	132f0000 	teqne	pc, #0
    26e8:	2d290000 	stccs	0, cr0, [r9, #-0]
    26ec:	f4000001 	vst4.8	{d0-d3}, [r0], r1
    26f0:	0500000c 	streq	r0, [r0, #-12]
    26f4:	009e8003 	addseq	r8, lr, r3
    26f8:	00691600 	rsbeq	r1, r9, r0, lsl #12
    26fc:	00258601 	eoreq	r8, r5, r1, lsl #12
    2700:	13630000 	cmnne	r3, #0
    2704:	bc240000 	stclt	0, cr0, [r4], #-0
    2708:	6700008f 	strvs	r0, [r0, -pc, lsl #1]
    270c:	25000011 	strcs	r0, [r0, #-17]
    2710:	00008fd0 	ldrdeq	r8, [r0], -r0
    2714:	0000116e 	andeq	r1, r0, lr, ror #2
    2718:	00000cc4 	andeq	r0, r0, r4, asr #25
    271c:	02530120 	subseq	r0, r3, #32, 2
    2720:	01208308 	teqeq	r0, r8, lsl #6
    2724:	80030552 	andhi	r0, r3, r2, asr r5
    2728:	2000009e 	mulcs	r0, lr, r0
    272c:	03055101 	movweq	r5, #20737	; 0x5101
    2730:	00009f00 	andeq	r9, r0, r0, lsl #30
    2734:	05500120 	ldrbeq	r0, [r0, #-288]	; 0x120
    2738:	009ee403 	addseq	lr, lr, r3, lsl #8
    273c:	d4240000 	strtle	r0, [r4], #-0
    2740:	8400008f 	strhi	r0, [r0], #-143	; 0x8f
    2744:	1f000011 	svcne	0x00000011
    2748:	00008ff0 	strdeq	r8, [r0], -r0
    274c:	00000762 	andeq	r0, r0, r2, ror #14
    2750:	02510120 	subseq	r0, r1, #32, 2
    2754:	01200078 	teqeq	r0, r8, ror r0
    2758:	00770250 	rsbseq	r0, r7, r0, asr r2
    275c:	902a0000 	eorls	r0, sl, r0
    2760:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    2764:	2b00000c 	blcs	279c <_start-0x5864>
    2768:	00000081 	andeq	r0, r0, r1, lsl #1
    276c:	e4070014 	str	r0, [r7], #-20
    2770:	2300000c 	movwcs	r0, #12
    2774:	0000062c 	andeq	r0, r0, ip, lsr #12
    2778:	00d99301 	sbcseq	r9, r9, r1, lsl #6
    277c:	901c0000 	andsls	r0, ip, r0
    2780:	00c00000 	sbceq	r0, r0, r0
    2784:	9c010000 	stcls	0, cr0, [r1], {-0}
    2788:	00000e14 	andeq	r0, r0, r4, lsl lr
    278c:	00787414 	rsbseq	r7, r8, r4, lsl r4
    2790:	004f9301 	subeq	r9, pc, r1, lsl #6
    2794:	13820000 	orrne	r0, r2, #0
    2798:	72140000 	andsvc	r0, r4, #0
    279c:	93010078 	movwls	r0, #4216	; 0x1078
    27a0:	0000004f 	andeq	r0, r0, pc, asr #32
    27a4:	000013a3 	andeq	r1, r0, r3, lsr #7
    27a8:	0003b913 	andeq	fp, r3, r3, lsl r9
    27ac:	68930100 	ldmvs	r3, {r8}
    27b0:	c4000000 	strgt	r0, [r0], #-0
    27b4:	28000013 	stmdacs	r0, {r0, r1, r4}
    27b8:	000005c5 	andeq	r0, r0, r5, asr #11
    27bc:	00689301 	rsbeq	r9, r8, r1, lsl #6
    27c0:	91020000 	mrsls	r0, (UNDEF: 2)
    27c4:	686d2c00 	stmdavs	sp!, {sl, fp, sp}^
    27c8:	9b01007a 	blls	429b8 <__bss_end__+0x385f0>
    27cc:	0000002c 	andeq	r0, r0, ip, lsr #32
    27d0:	29b92700 	ldmibcs	r9!, {r8, r9, sl, sp}
    27d4:	00061626 	andeq	r1, r6, r6, lsr #12
    27d8:	2c9c0100 	ldfcss	f0, [ip], {0}
    27dc:	e2000000 	and	r0, r0, #0
    27e0:	29000013 	stmdbcs	r0, {r0, r1, r4}
    27e4:	0000012d 	andeq	r0, r0, sp, lsr #2
    27e8:	00000e24 	andeq	r0, r0, r4, lsr #28
    27ec:	9e980305 	cdpls	3, 9, cr0, cr8, cr5, {0}
    27f0:	44170000 	ldrmi	r0, [r7], #-0
    27f4:	08000090 	stmdaeq	r0, {r4, r7}
    27f8:	91000000 	mrsls	r0, (UNDEF: 0)
    27fc:	2d00000d 	stccs	0, cr0, [r0, #-52]	; 0xffffffcc
    2800:	01006e69 	tsteq	r0, r9, ror #28
    2804:	00002c97 	muleq	r0, r7, ip
    2808:	25000100 	strcs	r0, [r0, #-256]	; 0x100
    280c:	0000903c 	andeq	r9, r0, ip, lsr r0
    2810:	0000118b 	andeq	r1, r0, fp, lsl #3
    2814:	00000da5 	andeq	r0, r0, r5, lsr #27
    2818:	02500120 	subseq	r0, r0, #32, 2
    281c:	25000076 	strcs	r0, [r0, #-118]	; 0x76
    2820:	00009044 	andeq	r9, r0, r4, asr #32
    2824:	0000119c 	muleq	r0, ip, r1
    2828:	00000db9 			; <UNDEFINED> instruction: 0x00000db9
    282c:	02500120 	subseq	r0, r0, #32, 2
    2830:	25000078 	strcs	r0, [r0, #-120]	; 0x78
    2834:	00009058 	andeq	r9, r0, r8, asr r0
    2838:	00001131 	andeq	r1, r0, r1, lsr r1
    283c:	00000dd2 	ldrdeq	r0, [r0], -r2
    2840:	01510120 	cmpeq	r1, r0, lsr #2
    2844:	50012031 	andpl	r2, r1, r1, lsr r0
    2848:	00007602 	andeq	r7, r0, r2, lsl #12
    284c:	00909c24 	addseq	r9, r0, r4, lsr #24
    2850:	00116700 	andseq	r6, r1, r0, lsl #14
    2854:	90b02500 	adcsls	r2, r0, r0, lsl #10
    2858:	116e0000 	cmnne	lr, r0
    285c:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    2860:	01200000 	teqeq	r0, r0
    2864:	9d080253 	sfmls	f0, 4, [r8, #-332]	; 0xfffffeb4
    2868:	05520120 	ldrbeq	r0, [r2, #-288]	; 0x120
    286c:	009e9803 	addseq	r9, lr, r3, lsl #16
    2870:	51012000 	mrspl	r2, (UNDEF: 1)
    2874:	9f000305 	svcls	0x00000305
    2878:	01200000 	teqeq	r0, r0
    287c:	14030550 	strne	r0, [r3], #-1360	; 0x550
    2880:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2884:	0090b424 	addseq	fp, r0, r4, lsr #8
    2888:	00118400 	andseq	r8, r1, r0, lsl #8
    288c:	902a0000 	eorls	r0, sl, r0
    2890:	24000000 	strcs	r0, [r0], #-0
    2894:	2b00000e 	blcs	28d4 <_start-0x572c>
    2898:	00000081 	andeq	r0, r0, r1, lsl #1
    289c:	14070013 	strne	r0, [r7], #-19
    28a0:	2300000e 	movwcs	r0, #14
    28a4:	00000609 	andeq	r0, r0, r9, lsl #12
    28a8:	0025a901 	eoreq	sl, r5, r1, lsl #18
    28ac:	90dc0000 	sbcsls	r0, ip, r0
    28b0:	003c0000 	eorseq	r0, ip, r0
    28b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    28b8:	00000ecc 	andeq	r0, r0, ip, asr #29
    28bc:	00038013 	andeq	r8, r3, r3, lsl r0
    28c0:	22a90100 	adccs	r0, r9, #0, 2
    28c4:	10000007 	andne	r0, r0, r7
    28c8:	16000014 			; <UNDEFINED> instruction: 0x16000014
    28cc:	00736572 	rsbseq	r6, r3, r2, ror r5
    28d0:	0025aa01 	eoreq	sl, r5, r1, lsl #20
    28d4:	14310000 	ldrtne	r0, [r1], #-0
    28d8:	2d290000 	stccs	0, cr0, [r9, #-0]
    28dc:	dc000001 	stcle	0, cr0, [r0], {1}
    28e0:	0500000e 	streq	r0, [r0, #-14]
    28e4:	009eac03 	addseq	sl, lr, r3, lsl #24
    28e8:	90e82500 	rscls	r2, r8, r0, lsl #10
    28ec:	07620000 	strbeq	r0, [r2, -r0]!
    28f0:	0e8a0000 	cdpeq	0, 8, cr0, cr10, cr0, {0}
    28f4:	01200000 	teqeq	r0, r0
    28f8:	ff090251 			; <UNDEFINED> instruction: 0xff090251
    28fc:	03500120 	cmpeq	r0, #32, 2
    2900:	005001f3 	ldrsheq	r0, [r0], #-19	; 0xffffffed
    2904:	0090f424 	addseq	pc, r0, r4, lsr #8
    2908:	00116700 	andseq	r6, r1, r0, lsl #14
    290c:	91082500 	tstls	r8, r0, lsl #10
    2910:	116e0000 	cmnne	lr, r0
    2914:	0ec20000 	cdpeq	0, 12, cr0, cr2, cr0, {0}
    2918:	01200000 	teqeq	r0, r0
    291c:	ac080253 	sfmge	f0, 4, [r8], {83}	; 0x53
    2920:	05520120 	ldrbeq	r0, [r2, #-288]	; 0x120
    2924:	009eac03 	addseq	sl, lr, r3, lsl #24
    2928:	51012000 	mrspl	r2, (UNDEF: 1)
    292c:	9f000305 	svcls	0x00000305
    2930:	01200000 	teqeq	r0, r0
    2934:	58030550 	stmdapl	r3, {r4, r6, r8, sl}
    2938:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    293c:	00910c24 	addseq	r0, r1, r4, lsr #24
    2940:	00118400 	andseq	r8, r1, r0, lsl #8
    2944:	902a0000 	eorls	r0, sl, r0
    2948:	dc000000 	stcle	0, cr0, [r0], {-0}
    294c:	2b00000e 	blcs	298c <_start-0x5674>
    2950:	00000081 	andeq	r0, r0, r1, lsl #1
    2954:	cc07000c 	stcgt	0, cr0, [r7], {12}
    2958:	1200000e 	andne	r0, r0, #14
    295c:	0000064d 	andeq	r0, r0, sp, asr #12
    2960:	9118b001 	tstls	r8, r1
    2964:	002c0000 	eoreq	r0, ip, r0
    2968:	9c010000 	stcls	0, cr0, [r1], {-0}
    296c:	00000f25 	andeq	r0, r0, r5, lsr #30
    2970:	00038013 	andeq	r8, r3, r3, lsl r0
    2974:	22b00100 	adcscs	r0, r0, #0, 2
    2978:	44000007 	strmi	r0, [r0], #-7
    297c:	14000014 	strne	r0, [r0], #-20
    2980:	0067736d 	rsbeq	r7, r7, sp, ror #6
    2984:	0097b001 	addseq	fp, r7, r1
    2988:	14620000 	strbtne	r0, [r2], #-0
    298c:	301f0000 	andscc	r0, pc, r0
    2990:	76000091 			; <UNDEFINED> instruction: 0x76000091
    2994:	20000001 	andcs	r0, r0, r1
    2998:	75025001 	strvc	r5, [r2, #-1]
    299c:	23000000 	movwcs	r0, #0
    29a0:	00000385 	andeq	r0, r0, r5, lsl #7
    29a4:	0025b901 	eoreq	fp, r5, r1, lsl #18
    29a8:	91440000 	mrsls	r0, (UNDEF: 68)
    29ac:	00840000 	addeq	r0, r4, r0
    29b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    29b4:	00001019 	andeq	r1, r0, r9, lsl r0
    29b8:	00038013 	andeq	r8, r3, r3, lsl r0
    29bc:	22b90100 	adcscs	r0, r9, #0, 2
    29c0:	80000007 	andhi	r0, r0, r7
    29c4:	2e000014 	mcrcs	0, 0, r0, cr0, cr4, {0}
    29c8:	00746d66 	rsbseq	r6, r4, r6, ror #26
    29cc:	0097b901 	addseq	fp, r7, r1, lsl #18
    29d0:	91020000 	mrsls	r0, (UNDEF: 2)
    29d4:	62152f74 	andsvs	r2, r5, #116, 30	; 0x1d0
    29d8:	01006675 	tsteq	r0, r5, ror r6
    29dc:	001019ba 			; <UNDEFINED> instruction: 0x001019ba
    29e0:	9c910300 	ldcls	3, cr0, [r1], {0}
    29e4:	0256187c 	subseq	r1, r6, #124, 16	; 0x7c0000
    29e8:	bc010000 	stclt	0, cr0, [r1], {-0}
    29ec:	00000106 	andeq	r0, r0, r6, lsl #2
    29f0:	7c989103 	ldfvcd	f1, [r8], {3}
    29f4:	007a7316 	rsbseq	r7, sl, r6, lsl r3
    29f8:	0025be01 	eoreq	fp, r5, r1, lsl #28
    29fc:	14ac0000 	strtne	r0, [ip], #0
    2a00:	2d290000 	stccs	0, cr0, [r9, #-0]
    2a04:	3a000001 	bcc	2a10 <_start-0x55f0>
    2a08:	05000010 	streq	r0, [r0, #-16]
    2a0c:	009ebc03 	addseq	fp, lr, r3, lsl #24
    2a10:	916c2500 	cmnls	ip, r0, lsl #10
    2a14:	11ad0000 			; <UNDEFINED> instruction: 0x11ad0000
    2a18:	0fc00000 	svceq	0x00c00000
    2a1c:	01200000 	teqeq	r0, r0
    2a20:	58910253 	ldmpl	r1, {r0, r1, r4, r6, r9}
    2a24:	03520120 	cmpeq	r2, #32, 2
    2a28:	20065491 	mulcs	r6, r1, r4
    2a2c:	0a035101 	beq	d6e38 <__bss_end__+0xcca70>
    2a30:	012001cc 	smlawteq	r0, ip, r1, r0
    2a34:	fc910350 	ldc2	3, cr0, [r1], {80}	; 0x50
    2a38:	8024007b 	eorhi	r0, r4, fp, ror r0
    2a3c:	67000091 			; <UNDEFINED> instruction: 0x67000091
    2a40:	25000011 	strcs	r0, [r0, #-17]
    2a44:	00009194 	muleq	r0, r4, r1
    2a48:	0000116e 	andeq	r1, r0, lr, ror #2
    2a4c:	00000ff8 	strdeq	r0, [r0], -r8
    2a50:	02530120 	subseq	r0, r3, #32, 2
    2a54:	0120c008 	teqeq	r0, r8
    2a58:	bc030552 	cfstr32lt	mvfx0, [r3], {82}	; 0x52
    2a5c:	2000009e 	mulcs	r0, lr, r0
    2a60:	03055101 	movweq	r5, #20737	; 0x5101
    2a64:	00009f00 	andeq	r9, r0, r0, lsl #30
    2a68:	05500120 	ldrbeq	r0, [r0, #-288]	; 0x120
    2a6c:	009f9003 	addseq	r9, pc, r3
    2a70:	98240000 	stmdals	r4!, {}	; <UNPREDICTABLE>
    2a74:	84000091 	strhi	r0, [r0], #-145	; 0x91
    2a78:	1f000011 	svcne	0x00000011
    2a7c:	000091a4 	andeq	r9, r0, r4, lsr #3
    2a80:	00000ee1 	andeq	r0, r0, r1, ror #29
    2a84:	03510120 	cmpeq	r1, #32, 2
    2a88:	207bfc91 			; <UNDEFINED> instruction: 0x207bfc91
    2a8c:	75025001 	strvc	r5, [r2, #-1]
    2a90:	2a000000 	bcs	2a98 <_start-0x5568>
    2a94:	00000090 	muleq	r0, r0, r0
    2a98:	0000102a 	andeq	r1, r0, sl, lsr #32
    2a9c:	00008130 	andeq	r8, r0, r0, lsr r1
    2aa0:	0001cb00 	andeq	ip, r1, r0, lsl #22
    2aa4:	0000902a 	andeq	r9, r0, sl, lsr #32
    2aa8:	00103a00 	andseq	r3, r0, r0, lsl #20
    2aac:	00812b00 	addeq	r2, r1, r0, lsl #22
    2ab0:	000e0000 	andeq	r0, lr, r0
    2ab4:	00102a07 	andseq	r2, r0, r7, lsl #20
    2ab8:	06be2300 	ldrteq	r2, [lr], r0, lsl #6
    2abc:	c5010000 	strgt	r0, [r1, #-0]
    2ac0:	00000025 	andeq	r0, r0, r5, lsr #32
    2ac4:	000091c8 	andeq	r9, r0, r8, asr #3
    2ac8:	0000004c 	andeq	r0, r0, ip, asr #32
    2acc:	111c9c01 	tstne	ip, r1, lsl #24
    2ad0:	75140000 	ldrvc	r0, [r4, #-0]
    2ad4:	22c50100 	sbccs	r0, r5, #0, 2
    2ad8:	eb000007 	bl	2afc <_start-0x5504>
    2adc:	14000014 	strne	r0, [r0], #-20
    2ae0:	00667562 	rsbeq	r7, r6, r2, ror #10
    2ae4:	0c02c501 	cfstr32eq	mvfx12, [r2], {1}
    2ae8:	150c0000 	strne	r0, [ip, #-0]
    2aec:	7b130000 	blvc	4c2af4 <__bss_end__+0x4b872c>
    2af0:	01000005 	tsteq	r0, r5
    2af4:	000068c5 	andeq	r6, r0, r5, asr #17
    2af8:	00152d00 	andseq	r2, r5, r0, lsl #26
    2afc:	6e651400 	cdpvs	4, 6, cr1, cr5, cr0, {0}
    2b00:	c5010064 	strgt	r0, [r1, #-100]	; 0x64
    2b04:	0000004f 	andeq	r0, r0, pc, asr #32
    2b08:	0000154e 	andeq	r1, r0, lr, asr #10
    2b0c:	73657216 	cmnvc	r5, #1610612737	; 0x60000001
    2b10:	25c60100 	strbcs	r0, [r6, #256]	; 0x100
    2b14:	6f000000 	svcvs	0x00000000
    2b18:	29000015 	stmdbcs	r0, {r0, r2, r4}
    2b1c:	0000012d 	andeq	r0, r0, sp, lsr #2
    2b20:	0000112c 	andeq	r1, r0, ip, lsr #2
    2b24:	9ecc0305 	cdpls	3, 12, cr0, cr12, cr5, {0}
    2b28:	dc250000 	stcle	0, cr0, [r5], #-0
    2b2c:	1e000091 	mcrne	0, 0, r0, cr0, cr1, {4}
    2b30:	da00000b 	ble	2b64 <_start-0x549c>
    2b34:	20000010 	andcs	r0, r0, r0, lsl r0
    2b38:	f3035201 	vhsub.u8	d5, d3, d1
    2b3c:	01205201 	teqeq	r0, r1, lsl #4
    2b40:	01f30351 	mvnseq	r0, r1, asr r3
    2b44:	50012051 	andpl	r2, r1, r1, asr r0
    2b48:	5001f303 	andpl	pc, r1, r3, lsl #6
    2b4c:	007d0220 	rsbseq	r0, sp, r0, lsr #4
    2b50:	00ff0902 	rscseq	r0, pc, r2, lsl #18
    2b54:	0091e824 	addseq	lr, r1, r4, lsr #16
    2b58:	00116700 	andseq	r6, r1, r0, lsl #14
    2b5c:	91fc2500 	mvnsls	r2, r0, lsl #10
    2b60:	116e0000 	cmnne	lr, r0
    2b64:	11120000 	tstne	r2, r0
    2b68:	01200000 	teqeq	r0, r0
    2b6c:	c8080253 	stmdagt	r8, {r0, r1, r4, r6, r9}
    2b70:	05520120 	ldrbeq	r0, [r2, #-288]	; 0x120
    2b74:	009ecc03 	addseq	ip, lr, r3, lsl #24
    2b78:	51012000 	mrspl	r2, (UNDEF: 1)
    2b7c:	9f000305 	svcls	0x00000305
    2b80:	01200000 	teqeq	r0, r0
    2b84:	58030550 	stmdapl	r3, {r4, r6, r8, sl}
    2b88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2b8c:	00920024 	addseq	r0, r2, r4, lsr #32
    2b90:	00118400 	andseq	r8, r1, r0, lsl #8
    2b94:	902a0000 	eorls	r0, sl, r0
    2b98:	2c000000 	stccs	0, cr0, [r0], {-0}
    2b9c:	2b000011 	blcs	2be8 <_start-0x5418>
    2ba0:	00000081 	andeq	r0, r0, r1, lsl #1
    2ba4:	1c070016 	stcne	0, cr0, [r7], {22}
    2ba8:	31000011 	tstcc	r0, r1, lsl r0
    2bac:	00000697 	muleq	r0, r7, r6
    2bb0:	11472106 	cmpne	r7, r6, lsl #2
    2bb4:	2c320000 	ldccs	0, cr0, [r2], #-0
    2bb8:	32000000 	andcc	r0, r0, #0
    2bbc:	0000002c 	andeq	r0, r0, ip, lsr #32
    2bc0:	04b93300 	ldrteq	r3, [r9], #768	; 0x300
    2bc4:	57070000 	strpl	r0, [r7, -r0]
    2bc8:	0000002c 	andeq	r0, r0, ip, lsr #32
    2bcc:	00065a34 	andeq	r5, r6, r4, lsr sl
    2bd0:	25240600 	strcs	r0, [r4, #-1536]!	; 0x600
    2bd4:	67000000 	strvs	r0, [r0, -r0]
    2bd8:	32000011 	andcc	r0, r0, #17
    2bdc:	0000002c 	andeq	r0, r0, ip, lsr #32
    2be0:	01d23500 	bicseq	r3, r2, r0, lsl #10
    2be4:	1e070000 	cdpne	0, 0, cr0, cr7, cr0, {0}
    2be8:	00020134 	andeq	r0, r2, r4, lsr r1
    2bec:	25290700 	strcs	r0, [r9, #-1792]!	; 0x700
    2bf0:	84000000 	strhi	r0, [r0], #-0
    2bf4:	32000011 	andcc	r0, r0, #17
    2bf8:	00000097 	muleq	r0, r7, r0
    2bfc:	9835002f 	ldmdals	r5!, {r0, r1, r2, r3, r5}
    2c00:	07000000 	streq	r0, [r0, -r0]
    2c04:	06d53166 	ldrbeq	r3, [r5], r6, ror #2
    2c08:	1d060000 	stcne	0, cr0, [r6, #-0]
    2c0c:	0000119c 	muleq	r0, ip, r1
    2c10:	00002c32 	andeq	r2, r0, r2, lsr ip
    2c14:	af310000 	svcge	0x00310000
    2c18:	06000006 	streq	r0, [r0], -r6
    2c1c:	0011ad1c 	andseq	sl, r1, ip, lsl sp
    2c20:	002c3200 	eoreq	r3, ip, r0, lsl #4
    2c24:	36000000 	strcc	r0, [r0], -r0
    2c28:	000001fe 	strdeq	r0, [r0], -lr
    2c2c:	00250208 	eoreq	r0, r5, r8, lsl #4
    2c30:	8a320000 	bhi	c82c38 <__bss_end__+0xc78870>
    2c34:	32000000 	andcc	r0, r0, #0
    2c38:	00000025 	andeq	r0, r0, r5, lsr #32
    2c3c:	00009732 	andeq	r9, r0, r2, lsr r7
    2c40:	01063200 	mrseq	r3, LR_usr
    2c44:	00000000 	andeq	r0, r0, r0
    2c48:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2c4c:	0e7c0004 	cdpeq	0, 7, cr0, cr12, cr4, {0}
    2c50:	01040000 	mrseq	r0, (UNDEF: 4)
    2c54:	00000021 	andeq	r0, r0, r1, lsr #32
    2c58:	00085701 	andeq	r5, r8, r1, lsl #14
    2c5c:	00021200 	andeq	r1, r2, r0, lsl #4
    2c60:	00921400 	addseq	r1, r2, r0, lsl #8
    2c64:	00015400 	andeq	r5, r1, r0, lsl #8
    2c68:	000cf700 	andeq	pc, ip, r0, lsl #14
    2c6c:	05040200 	streq	r0, [r4, #-512]	; 0x200
    2c70:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2c74:	68070403 	stmdavs	r7, {r0, r1, sl}
    2c78:	03000001 	movweq	r0, #1
    2c7c:	008c0601 	addeq	r0, ip, r1, lsl #12
    2c80:	02030000 	andeq	r0, r3, #0
    2c84:	0001a405 	andeq	sl, r1, r5, lsl #8
    2c88:	05040300 	streq	r0, [r4, #-768]	; 0x300
    2c8c:	00000190 	muleq	r0, r0, r1
    2c90:	8b050803 	blhi	144ca4 <__bss_end__+0x13a8dc>
    2c94:	03000001 	movweq	r0, #1
    2c98:	008a0801 	addeq	r0, sl, r1, lsl #16
    2c9c:	02030000 	andeq	r0, r3, #0
    2ca0:	0000ad07 	andeq	sl, r0, r7, lsl #26
    2ca4:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2ca8:	00000163 	andeq	r0, r0, r3, ror #2
    2cac:	5e070803 	cdppl	8, 0, cr0, cr7, cr3, {0}
    2cb0:	03000001 	movweq	r0, #1
    2cb4:	01820704 	orreq	r0, r2, r4, lsl #14
    2cb8:	01030000 	mrseq	r0, (UNDEF: 3)
    2cbc:	00009308 	andeq	r9, r0, r8, lsl #6
    2cc0:	02010400 	andeq	r0, r1, #0, 8
    2cc4:	0000b20c 	andeq	fp, r0, ip, lsl #4
    2cc8:	08740500 	ldmdaeq	r4!, {r8, sl}^
    2ccc:	05000000 	streq	r0, [r0, #-0]
    2cd0:	00000768 	andeq	r0, r0, r8, ror #14
    2cd4:	07210501 	streq	r0, [r1, -r1, lsl #10]!
    2cd8:	05040000 	streq	r0, [r4, #-0]
    2cdc:	00000779 	andeq	r0, r0, r9, ror r7
    2ce0:	07880505 	streq	r0, [r8, r5, lsl #10]
    2ce4:	05060000 	streq	r0, [r6, #-0]
    2ce8:	00000797 	muleq	r0, r7, r7
    2cec:	08270507 	stmdaeq	r7!, {r0, r1, r2, r8, sl}
    2cf0:	05030000 	streq	r0, [r3, #-0]
    2cf4:	000007a6 	andeq	r0, r0, r6, lsr #15
    2cf8:	d9060002 	stmdble	r6, {r1}
    2cfc:	02000007 	andeq	r0, r0, #7
    2d00:	00007915 	andeq	r7, r0, r5, lsl r9
    2d04:	00800700 	addeq	r0, r0, r0, lsl #14
    2d08:	37010000 	strcc	r0, [r1, -r0]
    2d0c:	00009214 	andeq	r9, r0, r4, lsl r2
    2d10:	0000009c 	muleq	r0, ip, r0
    2d14:	01c39c01 	biceq	r9, r3, r1, lsl #24
    2d18:	1c080000 	stcne	0, cr0, [r8], {-0}
    2d1c:	a8000092 	stmdage	r0, {r1, r4, r7}
    2d20:	09000003 	stmdbeq	r0, {r0, r1}
    2d24:	00009228 	andeq	r9, r0, r8, lsr #4
    2d28:	000003af 	andeq	r0, r0, pc, lsr #7
    2d2c:	000000f3 	strdeq	r0, [r0], -r3
    2d30:	0151010a 	cmpeq	r1, sl, lsl #2
    2d34:	50010a32 	andpl	r0, r1, r2, lsr sl
    2d38:	09003e01 	stmdbeq	r0, {r0, r9, sl, fp, ip, sp}
    2d3c:	00009234 	andeq	r9, r0, r4, lsr r2
    2d40:	000003af 	andeq	r0, r0, pc, lsr #7
    2d44:	0000010b 	andeq	r0, r0, fp, lsl #2
    2d48:	0151010a 	cmpeq	r1, sl, lsl #2
    2d4c:	50010a32 	andpl	r0, r1, r2, lsr sl
    2d50:	08003f01 	stmdaeq	r0, {r0, r8, r9, sl, fp, ip, sp}
    2d54:	00009238 	andeq	r9, r0, r8, lsr r2
    2d58:	000003a8 	andeq	r0, r0, r8, lsr #7
    2d5c:	00924809 	addseq	r4, r2, r9, lsl #16
    2d60:	0003c500 	andeq	ip, r3, r0, lsl #10
    2d64:	00012800 	andeq	r2, r1, r0, lsl #16
    2d68:	50010a00 	andpl	r0, r1, r0, lsl #20
    2d6c:	00007502 	andeq	r7, r0, r2, lsl #10
    2d70:	00925409 	addseq	r5, r2, r9, lsl #8
    2d74:	0003e600 	andeq	lr, r3, r0, lsl #12
    2d78:	00013c00 	andeq	r3, r1, r0, lsl #24
    2d7c:	50010a00 	andpl	r0, r1, r0, lsl #20
    2d80:	00007502 	andeq	r7, r0, r2, lsl #10
    2d84:	00925808 	addseq	r5, r2, r8, lsl #16
    2d88:	0003a800 	andeq	sl, r3, r0, lsl #16
    2d8c:	92640900 	rsbls	r0, r4, #0, 18
    2d90:	03e60000 	mvneq	r0, #0
    2d94:	01580000 	cmpeq	r8, r0
    2d98:	010a0000 	mrseq	r0, (UNDEF: 10)
    2d9c:	00300151 	eorseq	r0, r0, r1, asr r1
    2da0:	00927009 	addseq	r7, r2, r9
    2da4:	0003e600 	andeq	lr, r3, r0, lsl #12
    2da8:	00016b00 	andeq	r6, r1, r0, lsl #22
    2dac:	51010a00 	tstpl	r1, r0, lsl #20
    2db0:	09003001 	stmdbeq	r0, {r0, ip, sp}
    2db4:	0000927c 	andeq	r9, r0, ip, ror r2
    2db8:	000003e6 	andeq	r0, r0, r6, ror #7
    2dbc:	0000017e 	andeq	r0, r0, lr, ror r1
    2dc0:	0151010a 	cmpeq	r1, sl, lsl #2
    2dc4:	88090036 	stmdahi	r9, {r1, r2, r4, r5}
    2dc8:	e6000092 			; <UNDEFINED> instruction: 0xe6000092
    2dcc:	91000003 	tstls	r0, r3
    2dd0:	0a000001 	beq	2ddc <_start-0x5224>
    2dd4:	33015101 	movwcc	r5, #4353	; 0x1101
    2dd8:	92940900 	addsls	r0, r4, #0, 18
    2ddc:	03e60000 	mvneq	r0, #0
    2de0:	01a60000 			; <UNDEFINED> instruction: 0x01a60000
    2de4:	010a0000 	mrseq	r0, (UNDEF: 10)
    2de8:	0e0a0351 	mcreq	3, 0, r0, cr10, cr1, {2}
    2dec:	a0090001 	andge	r0, r9, r1
    2df0:	e6000092 			; <UNDEFINED> instruction: 0xe6000092
    2df4:	b9000003 	stmdblt	r0, {r0, r1}
    2df8:	0a000001 	beq	2e04 <_start-0x51fc>
    2dfc:	33015101 	movwcc	r5, #4353	; 0x1101
    2e00:	92a40800 	adcls	r0, r4, #0, 16
    2e04:	03a80000 			; <UNDEFINED> instruction: 0x03a80000
    2e08:	0b000000 	bleq	2e10 <_start-0x51f0>
    2e0c:	00000730 	andeq	r0, r0, r0, lsr r7
    2e10:	00255701 	eoreq	r5, r5, r1, lsl #14
    2e14:	92b00000 	adcsls	r0, r0, #0
    2e18:	001c0000 	andseq	r0, ip, r0
    2e1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2e20:	000001e6 	andeq	r0, r0, r6, ror #3
    2e24:	0092c008 	addseq	ip, r2, r8
    2e28:	0003c500 	andeq	ip, r3, r0, lsl #10
    2e2c:	0c0b0000 	stceq	0, cr0, [fp], {-0}
    2e30:	01000006 	tsteq	r0, r6
    2e34:	0000255d 	andeq	r2, r0, sp, asr r5
    2e38:	0092cc00 	addseq	ip, r2, r0, lsl #24
    2e3c:	00002800 	andeq	r2, r0, r0, lsl #16
    2e40:	129c0100 	addsne	r0, ip, #0, 2
    2e44:	08000002 	stmdaeq	r0, {r1}
    2e48:	000092d4 	ldrdeq	r9, [r0], -r4
    2e4c:	000001c3 	andeq	r0, r0, r3, asr #3
    2e50:	0092e808 	addseq	lr, r2, r8, lsl #16
    2e54:	0003c500 	andeq	ip, r3, r0, lsl #10
    2e58:	e50b0000 	str	r0, [fp, #-0]
    2e5c:	01000007 	tsteq	r0, r7
    2e60:	00002564 	andeq	r2, r0, r4, ror #10
    2e64:	0092f400 	addseq	pc, r2, r0, lsl #8
    2e68:	00001c00 	andeq	r1, r0, r0, lsl #24
    2e6c:	359c0100 	ldrcc	r0, [ip, #256]	; 0x100
    2e70:	08000002 	stmdaeq	r0, {r1}
    2e74:	00009304 	andeq	r9, r0, r4, lsl #6
    2e78:	000003c5 	andeq	r0, r0, r5, asr #7
    2e7c:	03e10700 	mvneq	r0, #0, 14
    2e80:	6a010000 	bvs	42e88 <__bss_end__+0x38ac0>
    2e84:	00009310 	andeq	r9, r0, r0, lsl r3
    2e88:	0000002c 	andeq	r0, r0, ip, lsr #32
    2e8c:	02719c01 	rsbseq	r9, r1, #256	; 0x100
    2e90:	630c0000 	movwvs	r0, #49152	; 0xc000
    2e94:	2c6a0100 	stfcse	f0, [sl], #-0
    2e98:	8d000000 	stchi	0, cr0, [r0, #-0]
    2e9c:	08000015 	stmdaeq	r0, {r0, r2, r4}
    2ea0:	0000931c 	andeq	r9, r0, ip, lsl r3
    2ea4:	00000212 	andeq	r0, r0, r2, lsl r2
    2ea8:	0093340d 	addseq	r3, r3, sp, lsl #8
    2eac:	0003e600 	andeq	lr, r3, r0, lsl #12
    2eb0:	51010a00 	tstpl	r1, r0, lsl #20
    2eb4:	00007402 	andeq	r7, r0, r2, lsl #8
    2eb8:	074e0b00 	strbeq	r0, [lr, -r0, lsl #22]
    2ebc:	74010000 	strvc	r0, [r1], #-0
    2ec0:	00000025 	andeq	r0, r0, r5, lsr #32
    2ec4:	0000933c 	andeq	r9, r0, ip, lsr r3
    2ec8:	0000000c 	andeq	r0, r0, ip
    2ecc:	02949c01 	addseq	r9, r4, #256	; 0x100
    2ed0:	44080000 	strmi	r0, [r8], #-0
    2ed4:	c3000093 	movwgt	r0, #147	; 0x93
    2ed8:	00000001 	andeq	r0, r0, r1
    2edc:	0008930b 	andeq	r9, r8, fp, lsl #6
    2ee0:	25780100 	ldrbcs	r0, [r8, #-256]!	; 0x100
    2ee4:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    2ee8:	20000093 	mulcs	r0, r3, r0
    2eec:	01000000 	mrseq	r0, (UNDEF: 0)
    2ef0:	0002c09c 	muleq	r2, ip, r0
    2ef4:	93500800 	cmpls	r0, #0, 16
    2ef8:	02710000 	rsbseq	r0, r1, #0
    2efc:	5c080000 	stcpl	0, cr0, [r8], {-0}
    2f00:	e6000093 			; <UNDEFINED> instruction: 0xe6000093
    2f04:	00000001 	andeq	r0, r0, r1
    2f08:	0007ff0e 	andeq	pc, r7, lr, lsl #30
    2f0c:	d1160100 	tstle	r6, r0, lsl #2
    2f10:	05000002 	streq	r0, [r0, #-2]
    2f14:	0099dc03 	addseq	sp, r9, r3, lsl #24
    2f18:	d7040f00 	strle	r0, [r4, -r0, lsl #30]
    2f1c:	10000002 	andne	r0, r0, r2
    2f20:	0000002c 	andeq	r0, r0, ip, lsr #32
    2f24:	0007f30e 	andeq	pc, r7, lr, lsl #6
    2f28:	d1170100 	tstle	r7, r0, lsl #2
    2f2c:	05000002 	streq	r0, [r0, #-2]
    2f30:	0099ac03 	addseq	sl, r9, r3, lsl #24
    2f34:	07040e00 	streq	r0, [r4, -r0, lsl #28]
    2f38:	1a010000 	bne	42f40 <__bss_end__+0x38b78>
    2f3c:	000002d1 	ldrdeq	r0, [r0], -r1
    2f40:	99c80305 	stmibls	r8, {r0, r2, r8, r9}^
    2f44:	b50e0000 	strlt	r0, [lr, #-0]
    2f48:	01000007 	tsteq	r0, r7
    2f4c:	0002d11b 	andeq	sp, r2, fp, lsl r1
    2f50:	b4030500 	strlt	r0, [r3], #-1280	; 0x500
    2f54:	0e000099 	mcreq	0, 0, r0, cr0, cr9, {4}
    2f58:	000007ca 	andeq	r0, r0, sl, asr #15
    2f5c:	02d11c01 	sbcseq	r1, r1, #256	; 0x100
    2f60:	03050000 	movweq	r0, #20480	; 0x5000
    2f64:	000099b8 			; <UNDEFINED> instruction: 0x000099b8
    2f68:	0008650e 	andeq	r6, r8, lr, lsl #10
    2f6c:	d11d0100 	tstle	sp, r0, lsl #2
    2f70:	05000002 	streq	r0, [r0, #-2]
    2f74:	0099bc03 	addseq	fp, r9, r3, lsl #24
    2f78:	06f50e00 	ldrbteq	r0, [r5], r0, lsl #28
    2f7c:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    2f80:	000002d1 	ldrdeq	r0, [r0], -r1
    2f84:	99d80305 	ldmibls	r8, {r0, r2, r8, r9}^
    2f88:	840e0000 	strhi	r0, [lr], #-0
    2f8c:	01000008 	tsteq	r0, r8
    2f90:	0002d11f 	andeq	sp, r2, pc, lsl r1
    2f94:	c4030500 	strgt	r0, [r3], #-1280	; 0x500
    2f98:	0e000099 	mcreq	0, 0, r0, cr0, cr9, {4}
    2f9c:	00000712 	andeq	r0, r0, r2, lsl r7
    2fa0:	02d12001 	sbcseq	r2, r1, #1
    2fa4:	03050000 	movweq	r0, #20480	; 0x5000
    2fa8:	000099d4 	ldrdeq	r9, [r0], -r4
    2fac:	0008480e 	andeq	r4, r8, lr, lsl #16
    2fb0:	d1210100 	teqle	r1, r0, lsl #2
    2fb4:	05000002 	streq	r0, [r0, #-2]
    2fb8:	0099d003 	addseq	sp, r9, r3
    2fbc:	073e0e00 	ldreq	r0, [lr, -r0, lsl #28]!
    2fc0:	22010000 	andcs	r0, r1, #0
    2fc4:	000002d1 	ldrdeq	r0, [r0], -r1
    2fc8:	99b00305 	ldmibls	r0!, {r0, r2, r8, r9}
    2fcc:	170e0000 	strne	r0, [lr, -r0]
    2fd0:	01000008 	tsteq	r0, r8
    2fd4:	0002d123 	andeq	sp, r2, r3, lsr #2
    2fd8:	cc030500 	cfstr32gt	mvfx0, [r3], {-0}
    2fdc:	0e000099 	mcreq	0, 0, r0, cr0, cr9, {4}
    2fe0:	00000807 	andeq	r0, r0, r7, lsl #16
    2fe4:	02d12401 	sbcseq	r2, r1, #16777216	; 0x1000000
    2fe8:	03050000 	movweq	r0, #20480	; 0x5000
    2fec:	000099c0 	andeq	r9, r0, r0, asr #19
    2ff0:	00075c11 	andeq	r5, r7, r1, lsl ip
    2ff4:	128a0300 	addne	r0, sl, #0, 6
    2ff8:	00000836 	andeq	r0, r0, r6, lsr r8
    2ffc:	03c51902 	biceq	r1, r5, #32768	; 0x8000
    3000:	2c130000 	ldccs	0, cr0, [r3], {-0}
    3004:	13000000 	movwne	r0, #0
    3008:	000000b2 	strheq	r0, [r0], -r2
    300c:	08a31400 	stmiaeq	r3!, {sl, ip}
    3010:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
    3014:	0000002c 	andeq	r0, r0, ip, lsr #32
    3018:	000003da 	ldrdeq	r0, [r0], -sl
    301c:	0003da13 	andeq	sp, r3, r3, lsl sl
    3020:	040f0000 	streq	r0, [pc], #-0	; 3028 <_start-0x4fd8>
    3024:	000003e0 	andeq	r0, r0, r0, ror #7
    3028:	0003e515 	andeq	lr, r3, r5, lsl r5
    302c:	c4121600 	ldrgt	r1, [r2], #-1536	; 0x600
    3030:	03000007 	movweq	r0, #7
    3034:	0003fc9d 	muleq	r3, sp, ip
    3038:	03fc1300 	mvnseq	r1, #0, 6
    303c:	2c130000 	ldccs	0, cr0, [r3], {-0}
    3040:	00000000 	andeq	r0, r0, r0
    3044:	03e5040f 	mvneq	r0, #251658240	; 0xf000000
    3048:	21000000 	mrscs	r0, (UNDEF: 0)
    304c:	04000008 	streq	r0, [r0], #-8
    3050:	000faa00 	andeq	sl, pc, r0, lsl #20
    3054:	21010400 	tstcs	r1, r0, lsl #8
    3058:	01000000 	mrseq	r0, (UNDEF: 0)
    305c:	000008f3 	strdeq	r0, [r0], -r3
    3060:	00000212 	andeq	r0, r0, r2, lsl r2
    3064:	000093cc 	andeq	r9, r0, ip, asr #7
    3068:	00000568 	andeq	r0, r0, r8, ror #10
    306c:	00000dfc 	strdeq	r0, [r0], -ip
    3070:	5e070802 	cdppl	8, 0, cr0, cr7, cr2, {0}
    3074:	02000001 	andeq	r0, r0, #1
    3078:	01680704 	cmneq	r8, r4, lsl #14
    307c:	01020000 	mrseq	r0, (UNDEF: 2)
    3080:	00008c06 	andeq	r8, r0, r6, lsl #24
    3084:	05020200 	streq	r0, [r2, #-512]	; 0x200
    3088:	000001a4 	andeq	r0, r0, r4, lsr #3
    308c:	90050402 	andls	r0, r5, r2, lsl #8
    3090:	02000001 	andeq	r0, r0, #1
    3094:	018b0508 	orreq	r0, fp, r8, lsl #10
    3098:	01020000 	mrseq	r0, (UNDEF: 2)
    309c:	00008a08 	andeq	r8, r0, r8, lsl #20
    30a0:	07020200 	streq	r0, [r2, -r0, lsl #4]
    30a4:	000000ad 	andeq	r0, r0, sp, lsr #1
    30a8:	63070402 	movwvs	r0, #29698	; 0x7402
    30ac:	03000001 	movweq	r0, #1
    30b0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    30b4:	04020074 	streq	r0, [r2], #-116	; 0x74
    30b8:	00018207 	andeq	r8, r1, r7, lsl #4
    30bc:	08010200 	stmdaeq	r1, {r9}
    30c0:	00000093 	muleq	r0, r3, r0
    30c4:	0c020104 	stfeqs	f0, [r2], {4}
    30c8:	000000b2 	strheq	r0, [r0], -r2
    30cc:	00087405 	andeq	r7, r8, r5, lsl #8
    30d0:	68050000 	stmdavs	r5, {}	; <UNPREDICTABLE>
    30d4:	01000007 	tsteq	r0, r7
    30d8:	00072105 	andeq	r2, r7, r5, lsl #2
    30dc:	79050400 	stmdbvc	r5, {sl}
    30e0:	05000007 	streq	r0, [r0, #-7]
    30e4:	00078805 	andeq	r8, r7, r5, lsl #16
    30e8:	97050600 	strls	r0, [r5, -r0, lsl #12]
    30ec:	07000007 	streq	r0, [r0, -r7]
    30f0:	00082705 	andeq	r2, r8, r5, lsl #14
    30f4:	a6050300 	strge	r0, [r5], -r0, lsl #6
    30f8:	02000007 	andeq	r0, r0, #7
    30fc:	07d90600 	ldrbeq	r0, [r9, r0, lsl #12]
    3100:	15020000 	strne	r0, [r2, #-0]
    3104:	00000079 	andeq	r0, r0, r9, ror r0
    3108:	0006d507 	andeq	sp, r6, r7, lsl #10
    310c:	cc3f0100 	ldfgts	f0, [pc], #-0	; 3114 <_start-0x4eec>
    3110:	d4000093 	strle	r0, [r0], #-147	; 0x93
    3114:	01000000 	mrseq	r0, (UNDEF: 0)
    3118:	0001339c 	muleq	r1, ip, r3
    311c:	69700800 	ldmdbvs	r0!, {fp}^
    3120:	3f01006e 	svccc	0x0001006e
    3124:	0000002c 	andeq	r0, r0, ip, lsr #32
    3128:	000015ab 	andeq	r1, r0, fp, lsr #11
    312c:	00092f09 	andeq	r2, r9, r9, lsl #30
    3130:	33470100 	movtcc	r0, #28928	; 0x7100
    3134:	c9000001 	stmdbgt	r0, {r0}
    3138:	09000015 	stmdbeq	r0, {r0, r2, r4}
    313c:	00000a17 	andeq	r0, r0, r7, lsl sl
    3140:	002c4901 	eoreq	r4, ip, r1, lsl #18
    3144:	161e0000 	ldrne	r0, [lr], -r0
    3148:	c2090000 	andgt	r0, r9, #0
    314c:	01000009 	tsteq	r0, r9
    3150:	00002c57 	andeq	r2, r0, r7, asr ip
    3154:	0017ea00 	andseq	lr, r7, r0, lsl #20
    3158:	94600a00 	strbtls	r0, [r0], #-2560	; 0xa00
    315c:	07e00000 	strbeq	r0, [r0, r0]!
    3160:	01220000 	teqeq	r2, r0
    3164:	010b0000 	mrseq	r0, (UNDEF: 11)
    3168:	00750250 	rsbseq	r0, r5, r0, asr r2
    316c:	94940c00 	ldrls	r0, [r4], #3072	; 0xc00
    3170:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    3174:	010b0000 	mrseq	r0, (UNDEF: 11)
    3178:	00750250 	rsbseq	r0, r5, r0, asr r2
    317c:	040d0000 	streq	r0, [sp], #-0
    3180:	00000139 	andeq	r0, r0, r9, lsr r1
    3184:	00002c0e 	andeq	r2, r0, lr, lsl #24
    3188:	09e70700 	stmibeq	r7!, {r8, r9, sl}^
    318c:	60010000 	andvs	r0, r1, r0
    3190:	000094a0 	andeq	r9, r0, r0, lsr #9
    3194:	00000038 	andeq	r0, r0, r8, lsr r0
    3198:	01969c01 	orrseq	r9, r6, r1, lsl #24
    319c:	70080000 	andvc	r0, r8, r0
    31a0:	01006e69 	tsteq	r0, r9, ror #28
    31a4:	00002c60 	andeq	r2, r0, r0, ror #24
    31a8:	00181a00 	andseq	r1, r8, r0, lsl #20
    31ac:	092f0900 	stmdbeq	pc!, {r8, fp}	; <UNPREDICTABLE>
    31b0:	67010000 	strvs	r0, [r1, -r0]
    31b4:	00000133 	andeq	r0, r0, r3, lsr r1
    31b8:	0000183b 	andeq	r1, r0, fp, lsr r8
    31bc:	0009c209 	andeq	ip, r9, r9, lsl #4
    31c0:	2c680100 	stfcse	f0, [r8], #-0
    31c4:	71000000 	mrsvc	r0, (UNDEF: 0)
    31c8:	0c000018 	stceq	0, cr0, [r0], {24}
    31cc:	000094d0 	ldrdeq	r9, [r0], -r0
    31d0:	00000801 	andeq	r0, r0, r1, lsl #16
    31d4:	0751010b 	ldrbeq	r0, [r1, -fp, lsl #2]
    31d8:	5001f331 	andpl	pc, r1, r1, lsr r3	; <UNPREDICTABLE>
    31dc:	00241a4f 	eoreq	r1, r4, pc, asr #20
    31e0:	08e60700 	stmiaeq	r6!, {r8, r9, sl}^
    31e4:	7b010000 	blvc	431ec <__bss_end__+0x38e24>
    31e8:	000094d8 	ldrdeq	r9, [r0], -r8
    31ec:	00000038 	andeq	r0, r0, r8, lsr r0
    31f0:	01ee9c01 	mvneq	r9, r1, lsl #24
    31f4:	70080000 	andvc	r0, r8, r0
    31f8:	01006e69 	tsteq	r0, r9, ror #28
    31fc:	00002c7b 	andeq	r2, r0, fp, ror ip
    3200:	0018b100 	andseq	fp, r8, r0, lsl #2
    3204:	092f0900 	stmdbeq	pc!, {r8, fp}	; <UNPREDICTABLE>
    3208:	81010000 	mrshi	r0, (UNDEF: 1)
    320c:	00000133 	andeq	r0, r0, r3, lsr r1
    3210:	000018d2 	ldrdeq	r1, [r0], -r2
    3214:	0009c209 	andeq	ip, r9, r9, lsl #4
    3218:	2c820100 	stfcss	f0, [r2], {0}
    321c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3220:	0c000019 	stceq	0, cr0, [r0], {25}
    3224:	00009508 	andeq	r9, r0, r8, lsl #10
    3228:	00000801 	andeq	r0, r0, r1, lsl #16
    322c:	0751010b 	ldrbeq	r0, [r1, -fp, lsl #2]
    3230:	5001f331 	andpl	pc, r1, r1, lsr r3	; <UNPREDICTABLE>
    3234:	00241a4f 	eoreq	r1, r4, pc, asr #20
    3238:	06af0700 	strteq	r0, [pc], r0, lsl #14
    323c:	95010000 	strls	r0, [r1, #-0]
    3240:	00009510 	andeq	r9, r0, r0, lsl r5
    3244:	000000cc 	andeq	r0, r0, ip, asr #1
    3248:	02649c01 	rsbeq	r9, r4, #256	; 0x100
    324c:	70080000 	andvc	r0, r8, r0
    3250:	01006e69 	tsteq	r0, r9, ror #28
    3254:	00002c95 	muleq	r0, r5, ip
    3258:	00194800 	andseq	r4, r9, r0, lsl #16
    325c:	092f0900 	stmdbeq	pc!, {r8, fp}	; <UNPREDICTABLE>
    3260:	9b010000 	blls	43268 <__bss_end__+0x38ea0>
    3264:	00000133 	andeq	r0, r0, r3, lsr r1
    3268:	00001966 	andeq	r1, r0, r6, ror #18
    326c:	000a1709 	andeq	r1, sl, r9, lsl #14
    3270:	2c9d0100 	ldfcss	f0, [sp], {0}
    3274:	bb000000 	bllt	327c <_start-0x4d84>
    3278:	09000019 	stmdbeq	r0, {r0, r3, r4}
    327c:	000009c2 	andeq	r0, r0, r2, asr #19
    3280:	002cab01 	eoreq	sl, ip, r1, lsl #22
    3284:	1b870000 	blne	fe1c328c <__bss_end__+0xfe1b8ec4>
    3288:	a40a0000 	strge	r0, [sl], #-0
    328c:	e0000095 	mul	r0, r5, r0
    3290:	53000007 	movwpl	r0, #7
    3294:	0b000002 	bleq	32a4 <_start-0x4d5c>
    3298:	75025001 	strvc	r5, [r2, #-1]
    329c:	d00c0000 	andle	r0, ip, r0
    32a0:	01000095 	swpeq	r0, r5, [r0]	; <UNPREDICTABLE>
    32a4:	0b000008 	bleq	32cc <_start-0x4d34>
    32a8:	75025001 	strvc	r5, [r2, #-1]
    32ac:	0f000000 	svceq	0x00000000
    32b0:	0000065a 	andeq	r0, r0, sl, asr r6
    32b4:	0064b301 	rsbeq	fp, r4, r1, lsl #6
    32b8:	95dc0000 	ldrbls	r0, [ip]
    32bc:	004c0000 	subeq	r0, ip, r0
    32c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    32c4:	000002ac 	andeq	r0, r0, ip, lsr #5
    32c8:	6e697008 	cdpvs	0, 6, cr7, cr9, cr8, {0}
    32cc:	2cb30100 	ldfcss	f0, [r3]
    32d0:	a5000000 	strge	r0, [r0, #-0]
    32d4:	1000001b 	andne	r0, r0, fp, lsl r0
    32d8:	b9010076 	stmdblt	r1, {r1, r2, r4, r5, r6}
    32dc:	0000002c 	andeq	r0, r0, ip, lsr #32
    32e0:	00001bfd 	strdeq	r1, [r0], -sp
    32e4:	0095fc11 	addseq	pc, r5, r1, lsl ip	; <UNPREDICTABLE>
    32e8:	0007e000 	andeq	lr, r7, r0
    32ec:	960c1100 	strls	r1, [ip], -r0, lsl #2
    32f0:	07e00000 	strbeq	r0, [r0, r0]!
    32f4:	07000000 	streq	r0, [r0, -r0]
    32f8:	00000697 	muleq	r0, r7, r6
    32fc:	9628c501 	strtls	ip, [r8], -r1, lsl #10
    3300:	00240000 	eoreq	r0, r4, r0
    3304:	9c010000 	stcls	0, cr0, [r1], {-0}
    3308:	000002fc 	strdeq	r0, [r0], -ip
    330c:	6e697008 	cdpvs	0, 6, cr7, cr9, cr8, {0}
    3310:	2cc50100 	stfcse	f0, [r5], {0}
    3314:	33000000 	movwcc	r0, #0
    3318:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    331c:	c5010076 	strgt	r0, [r1, #-118]	; 0x76
    3320:	0000002c 	andeq	r0, r0, ip, lsr #32
    3324:	00001c6d 	andeq	r1, r0, sp, ror #24
    3328:	0096400a 	addseq	r4, r6, sl
    332c:	00013e00 	andeq	r3, r1, r0, lsl #28
    3330:	0002f200 	andeq	pc, r2, r0, lsl #4
    3334:	50010b00 	andpl	r0, r1, r0, lsl #22
    3338:	5001f303 	andpl	pc, r1, r3, lsl #6
    333c:	96481100 	strbls	r1, [r8], -r0, lsl #2
    3340:	01960000 	orrseq	r0, r6, r0
    3344:	07000000 	streq	r0, [r0, -r0]
    3348:	00000836 	andeq	r0, r0, r6, lsr r8
    334c:	964cd101 	strbls	sp, [ip], -r1, lsl #2
    3350:	00d80000 	sbcseq	r0, r8, r0
    3354:	9c010000 	stcls	0, cr0, [r1], {-0}
    3358:	00000381 	andeq	r0, r0, r1, lsl #7
    335c:	6e697008 	cdpvs	0, 6, cr7, cr9, cr8, {0}
    3360:	2cd10100 	ldfcse	f0, [r1], {0}
    3364:	a7000000 	strge	r0, [r0, -r0]
    3368:	1200001c 	andne	r0, r0, #28
    336c:	000009d4 	ldrdeq	r0, [r0], -r4
    3370:	00b2d101 	adcseq	sp, r2, r1, lsl #2
    3374:	1cc50000 	stclne	0, cr0, [r5], {0}
    3378:	2f090000 	svccs	0x00090000
    337c:	01000009 	tsteq	r0, r9
    3380:	000133d9 	ldrdeq	r3, [r1], -r9
    3384:	001ce600 	andseq	lr, ip, r0, lsl #12
    3388:	0a170900 	beq	5c5790 <__bss_end__+0x5bb3c8>
    338c:	da010000 	ble	43394 <__bss_end__+0x38fcc>
    3390:	0000002c 	andeq	r0, r0, ip, lsr #32
    3394:	00001d3b 	andeq	r1, r0, fp, lsr sp
    3398:	0009c209 	andeq	ip, r9, r9, lsl #4
    339c:	2ce80100 	stfcse	f0, [r8]
    33a0:	07000000 	streq	r0, [r0, -r0]
    33a4:	0a00001f 	beq	3428 <_start-0x4bd8>
    33a8:	000096e8 	andeq	r9, r0, r8, ror #13
    33ac:	000007e0 	andeq	r0, r0, r0, ror #15
    33b0:	00000370 	andeq	r0, r0, r0, ror r3
    33b4:	0250010b 	subseq	r0, r0, #-1073741822	; 0xc0000002
    33b8:	0c000076 	stceq	0, cr0, [r0], {118}	; 0x76
    33bc:	00009718 	andeq	r9, r0, r8, lsl r7
    33c0:	00000801 	andeq	r0, r0, r1, lsl #16
    33c4:	0250010b 	subseq	r0, r0, #-1073741822	; 0xc0000002
    33c8:	00000076 	andeq	r0, r0, r6, ror r0
    33cc:	0008da13 	andeq	sp, r8, r3, lsl sl
    33d0:	01050100 	mrseq	r0, (UNDEF: 21)
    33d4:	00000064 	andeq	r0, r0, r4, rrx
    33d8:	00009724 	andeq	r9, r0, r4, lsr #14
    33dc:	0000002c 	andeq	r0, r0, ip, lsr #32
    33e0:	03b59c01 			; <UNDEFINED> instruction: 0x03b59c01
    33e4:	dd140000 	ldcle	0, cr0, [r4, #-0]
    33e8:	01000008 	tsteq	r0, r8
    33ec:	002c0105 	eoreq	r0, ip, r5, lsl #2
    33f0:	1f380000 	svcne	0x00380000
    33f4:	34110000 	ldrcc	r0, [r1], #-0
    33f8:	e0000097 	mul	r0, r7, r0
    33fc:	00000007 	andeq	r0, r0, r7
    3400:	00097215 	andeq	r7, r9, r5, lsl r2
    3404:	01140100 	tsteq	r4, r0, lsl #2
    3408:	00009750 	andeq	r9, r0, r0, asr r7
    340c:	00000084 	andeq	r0, r0, r4, lsl #1
    3410:	04799c01 	ldrbteq	r9, [r9], #-3073	; 0xc01
    3414:	70160000 	andsvc	r0, r6, r0
    3418:	01006e69 	tsteq	r0, r9, ror #28
    341c:	002c0114 	eoreq	r0, ip, r4, lsl r1
    3420:	1f590000 	svcne	0x00590000
    3424:	01170000 	tsteq	r7, r0
    3428:	01000009 	tsteq	r0, r9
    342c:	002c0126 	eoreq	r0, ip, r6, lsr #2
    3430:	1f850000 	svcne	0x00850000
    3434:	6c180000 	ldcvs	0, cr0, [r8], {-0}
    3438:	1c000097 	stcne	0, cr0, [r0], {151}	; 0x97
    343c:	1b000000 	blne	3444 <_start-0x4bbc>
    3440:	17000004 	strne	r0, [r0, -r4]
    3444:	000009c2 	andeq	r0, r0, r2, asr #19
    3448:	2c011d01 	stccs	13, cr1, [r1], {1}
    344c:	a3000000 	movwge	r0, #0
    3450:	1100001f 	tstne	r0, pc, lsl r0
    3454:	00009778 	andeq	r9, r0, r8, ror r7
    3458:	000007e0 	andeq	r0, r0, r0, ror #15
    345c:	00978811 	addseq	r8, r7, r1, lsl r8
    3460:	00080100 	andeq	r0, r8, r0, lsl #2
    3464:	8c180000 	ldchi	0, cr0, [r8], {-0}
    3468:	20000097 	mulcs	r0, r7, r0
    346c:	4b000000 	blmi	3474 <_start-0x4b8c>
    3470:	17000004 	strne	r0, [r0, -r4]
    3474:	000009c2 	andeq	r0, r0, r2, asr #19
    3478:	2c012101 	stfcss	f2, [r1], {1}
    347c:	c1000000 	mrsgt	r0, (UNDEF: 0)
    3480:	1100001f 	tstne	r0, pc, lsl r0
    3484:	00009798 	muleq	r0, r8, r7
    3488:	000007e0 	andeq	r0, r0, r0, ror #15
    348c:	0097ac11 	addseq	sl, r7, r1, lsl ip
    3490:	00080100 	andeq	r0, r8, r0, lsl #2
    3494:	64110000 	ldrvs	r0, [r1], #-0
    3498:	1d000097 	stcne	0, cr0, [r0, #-604]	; 0xfffffda4
    349c:	11000008 	tstne	r0, r8
    34a0:	000097b0 			; <UNDEFINED> instruction: 0x000097b0
    34a4:	0000081d 	andeq	r0, r0, sp, lsl r8
    34a8:	0097bc11 	addseq	fp, r7, r1, lsl ip
    34ac:	0007e000 	andeq	lr, r7, r0
    34b0:	97c81100 	strbls	r1, [r8, r0, lsl #2]
    34b4:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    34b8:	cc110000 	ldcgt	0, cr0, [r1], {-0}
    34bc:	1d000097 	stcne	0, cr0, [r0, #-604]	; 0xfffffda4
    34c0:	00000008 	andeq	r0, r0, r8
    34c4:	000a0115 	andeq	r0, sl, r5, lsl r1
    34c8:	01310100 	teqeq	r1, r0, lsl #2
    34cc:	000097d4 	ldrdeq	r9, [r0], -r4
    34d0:	00000084 	andeq	r0, r0, r4, lsl #1
    34d4:	053d9c01 	ldreq	r9, [sp, #-3073]!	; 0xc01
    34d8:	70160000 	andsvc	r0, r6, r0
    34dc:	01006e69 	tsteq	r0, r9, ror #28
    34e0:	002c0131 	eoreq	r0, ip, r1, lsr r1
    34e4:	1fdf0000 	svcne	0x00df0000
    34e8:	01170000 	tsteq	r7, r0
    34ec:	01000009 	tsteq	r0, r9
    34f0:	002c0142 	eoreq	r0, ip, r2, asr #2
    34f4:	200b0000 	andcs	r0, fp, r0
    34f8:	f0180000 			; <UNDEFINED> instruction: 0xf0180000
    34fc:	1c000097 	stcne	0, cr0, [r0], {151}	; 0x97
    3500:	df000000 	svcle	0x00000000
    3504:	17000004 	strne	r0, [r0, -r4]
    3508:	000009c2 	andeq	r0, r0, r2, asr #19
    350c:	2c013901 	stccs	9, cr3, [r1], {1}
    3510:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    3514:	11000020 	tstne	r0, r0, lsr #32
    3518:	000097fc 	strdeq	r9, [r0], -ip
    351c:	000007e0 	andeq	r0, r0, r0, ror #15
    3520:	00980c11 	addseq	r0, r8, r1, lsl ip
    3524:	00080100 	andeq	r0, r8, r0, lsl #2
    3528:	10180000 	andsne	r0, r8, r0
    352c:	20000098 	mulcs	r0, r8, r0
    3530:	0f000000 	svceq	0x00000000
    3534:	17000005 	strne	r0, [r0, -r5]
    3538:	000009c2 	andeq	r0, r0, r2, asr #19
    353c:	2c013d01 	stccs	13, cr3, [r1], {1}
    3540:	47000000 	strmi	r0, [r0, -r0]
    3544:	11000020 	tstne	r0, r0, lsr #32
    3548:	0000981c 	andeq	r9, r0, ip, lsl r8
    354c:	000007e0 	andeq	r0, r0, r0, ror #15
    3550:	00983011 	addseq	r3, r8, r1, lsl r0
    3554:	00080100 	andeq	r0, r8, r0, lsl #2
    3558:	e8110000 	ldmda	r1, {}	; <UNPREDICTABLE>
    355c:	1d000097 	stcne	0, cr0, [r0, #-604]	; 0xfffffda4
    3560:	11000008 	tstne	r0, r8
    3564:	00009834 	andeq	r9, r0, r4, lsr r8
    3568:	0000081d 	andeq	r0, r0, sp, lsl r8
    356c:	00984011 	addseq	r4, r8, r1, lsl r0
    3570:	0007e000 	andeq	lr, r7, r0
    3574:	984c1100 	stmdals	ip, {r8, ip}^
    3578:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    357c:	50110000 	andspl	r0, r1, r0
    3580:	1d000098 	stcne	0, cr0, [r0, #-608]	; 0xfffffda0
    3584:	00000008 	andeq	r0, r0, r8
    3588:	0008a913 	andeq	sl, r8, r3, lsl r9
    358c:	014c0100 	mrseq	r0, (UNDEF: 92)
    3590:	00000064 	andeq	r0, r0, r4, rrx
    3594:	00009858 	andeq	r9, r0, r8, asr r8
    3598:	00000084 	andeq	r0, r0, r4, lsl #1
    359c:	05e39c01 	strbeq	r9, [r3, #3073]!	; 0xc01
    35a0:	70160000 	andsvc	r0, r6, r0
    35a4:	01006e69 	tsteq	r0, r9, ror #28
    35a8:	002c014c 	eoreq	r0, ip, ip, asr #2
    35ac:	20650000 	rsbcs	r0, r5, r0
    35b0:	74180000 	ldrvc	r0, [r8], #-0
    35b4:	24000098 	strcs	r0, [r0], #-152	; 0x98
    35b8:	97000000 	strls	r0, [r0, -r0]
    35bc:	17000005 	strne	r0, [r0, -r5]
    35c0:	00000918 	andeq	r0, r0, r8, lsl r9
    35c4:	2c015301 	stccs	3, cr5, [r1], {1}
    35c8:	a7000000 	strge	r0, [r0, -r0]
    35cc:	11000020 	tstne	r0, r0, lsr #32
    35d0:	00009880 	andeq	r9, r0, r0, lsl #17
    35d4:	000007e0 	andeq	r0, r0, r0, ror #15
    35d8:	00989011 	addseq	r9, r8, r1, lsl r0
    35dc:	00081d00 	andeq	r1, r8, r0, lsl #26
    35e0:	98180000 	ldmdals	r8, {}	; <UNPREDICTABLE>
    35e4:	2c000098 	stccs	0, cr0, [r0], {152}	; 0x98
    35e8:	d0000000 	andle	r0, r0, r0
    35ec:	17000005 	strne	r0, [r0, -r5]
    35f0:	00000918 	andeq	r0, r0, r8, lsl r9
    35f4:	2c015601 	stccs	6, cr5, [r1], {1}
    35f8:	c1000000 	mrsgt	r0, (UNDEF: 0)
    35fc:	11000020 	tstne	r0, r0, lsr #32
    3600:	000098a4 	andeq	r9, r0, r4, lsr #17
    3604:	000007e0 	andeq	r0, r0, r0, ror #15
    3608:	0098b011 	addseq	fp, r8, r1, lsl r0
    360c:	00081d00 	andeq	r1, r8, r0, lsl #26
    3610:	98bc1100 	ldmls	ip!, {r8, ip}
    3614:	081d0000 	ldmdaeq	sp, {}	; <UNPREDICTABLE>
    3618:	11000000 	mrsne	r0, (UNDEF: 0)
    361c:	0000986c 	andeq	r9, r0, ip, ror #16
    3620:	0000081d 	andeq	r0, r0, sp, lsl r8
    3624:	0098c811 	addseq	ip, r8, r1, lsl r8
    3628:	00081d00 	andeq	r1, r8, r0, lsl #26
    362c:	95150000 	ldrls	r0, [r5, #-0]
    3630:	01000009 	tsteq	r0, r9
    3634:	98dc015f 	ldmls	ip, {r0, r1, r2, r3, r4, r6, r8}^
    3638:	00580000 	subseq	r0, r8, r0
    363c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3640:	00000648 	andeq	r0, r0, r8, asr #12
    3644:	6e697016 	mcrvs	0, 3, r7, cr9, cr6, {0}
    3648:	015f0100 	cmpeq	pc, r0, lsl #2
    364c:	0000002c 	andeq	r0, r0, ip, lsr #32
    3650:	000020d4 	ldrdeq	r2, [r0], -r4
    3654:	0098f011 	addseq	pc, r8, r1, lsl r0	; <UNPREDICTABLE>
    3658:	00081d00 	andeq	r1, r8, r0, lsl #26
    365c:	990c0a00 	stmdbls	ip, {r9, fp}
    3660:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    3664:	06280000 	strteq	r0, [r8], -r0
    3668:	010b0000 	mrseq	r0, (UNDEF: 11)
    366c:	74310451 	ldrtvc	r0, [r1], #-1105	; 0x451
    3670:	0a002400 	beq	c678 <__bss_end__+0x22b0>
    3674:	00009928 	andeq	r9, r0, r8, lsr #18
    3678:	00000801 	andeq	r0, r0, r1, lsl #16
    367c:	0000063e 	andeq	r0, r0, lr, lsr r6
    3680:	0451010b 	ldrbeq	r0, [r1], #-267	; 0x10b
    3684:	24007431 	strcs	r7, [r0], #-1073	; 0x431
    3688:	992c1100 	stmdbls	ip!, {r8, ip}
    368c:	081d0000 	ldmdaeq	sp, {}	; <UNPREDICTABLE>
    3690:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    3694:	00000960 	andeq	r0, r0, r0, ror #18
    3698:	01332801 	teqeq	r3, r1, lsl #16
    369c:	03050000 	movweq	r0, #20480	; 0x5000
    36a0:	00009a3c 	andeq	r9, r0, ip, lsr sl
    36a4:	0009ca19 	andeq	ip, r9, r9, lsl sl
    36a8:	33290100 	teqcc	r9, #0, 2
    36ac:	05000001 	streq	r0, [r0, #-1]
    36b0:	009a3803 	addseq	r3, sl, r3, lsl #16
    36b4:	0a221900 	beq	889abc <__bss_end__+0x87f6f4>
    36b8:	2a010000 	bcs	436c0 <__bss_end__+0x392f8>
    36bc:	00000133 	andeq	r0, r0, r3, lsr r1
    36c0:	9a340305 	bls	d042dc <__bss_end__+0xcf9f14>
    36c4:	38190000 	ldmdacc	r9, {}	; <UNPREDICTABLE>
    36c8:	01000009 	tsteq	r0, r9
    36cc:	0001332c 	andeq	r3, r1, ip, lsr #6
    36d0:	e0030500 	and	r0, r3, r0, lsl #10
    36d4:	19000099 	stmdbne	r0, {r0, r3, r4, r7}
    36d8:	00000940 	andeq	r0, r0, r0, asr #18
    36dc:	01332d01 	teqeq	r3, r1, lsl #26
    36e0:	03050000 	movweq	r0, #20480	; 0x5000
    36e4:	000099e4 	andeq	r9, r0, r4, ror #19
    36e8:	0008bd19 	andeq	fp, r8, r9, lsl sp
    36ec:	332e0100 	teqcc	lr, #0, 2
    36f0:	05000001 	streq	r0, [r0, #-1]
    36f4:	0099e803 	addseq	lr, r9, r3, lsl #16
    36f8:	09481900 	stmdbeq	r8, {r8, fp, ip}^
    36fc:	2f010000 	svccs	0x00010000
    3700:	00000133 	andeq	r0, r0, r3, lsr r1
    3704:	99ec0305 	stmibls	ip!, {r0, r2, r8, r9}^
    3708:	50190000 	andspl	r0, r9, r0
    370c:	01000009 	tsteq	r0, r9
    3710:	00013330 	andeq	r3, r1, r0, lsr r3
    3714:	f0030500 			; <UNDEFINED> instruction: 0xf0030500
    3718:	19000099 	stmdbne	r0, {r0, r3, r4, r7}
    371c:	00000958 	andeq	r0, r0, r8, asr r9
    3720:	01333101 	teqeq	r3, r1, lsl #2
    3724:	03050000 	movweq	r0, #20480	; 0x5000
    3728:	000099f4 	strdeq	r9, [r0], -r4
    372c:	00090a19 	andeq	r0, r9, r9, lsl sl
    3730:	33330100 	teqcc	r3, #0, 2
    3734:	05000001 	streq	r0, [r0, #-1]
    3738:	0099f803 	addseq	pc, r9, r3, lsl #16
    373c:	09111900 	ldmdbeq	r1, {r8, fp, ip}
    3740:	34010000 	strcc	r0, [r1], #-0
    3744:	00000133 	andeq	r0, r0, r3, lsr r1
    3748:	99fc0305 	ldmibls	ip!, {r0, r2, r8, r9}^
    374c:	c5190000 	ldrgt	r0, [r9, #-0]
    3750:	01000008 	tsteq	r0, r8
    3754:	00013336 	andeq	r3, r1, r6, lsr r3
    3758:	00030500 	andeq	r0, r3, r0, lsl #10
    375c:	1900009a 	stmdbne	r0, {r1, r3, r4, r7}
    3760:	0000096b 	andeq	r0, r0, fp, ror #18
    3764:	01333701 	teqeq	r3, r1, lsl #14
    3768:	03050000 	movweq	r0, #20480	; 0x5000
    376c:	00009a04 	andeq	r9, r0, r4, lsl #20
    3770:	00092119 	andeq	r2, r9, r9, lsl r1
    3774:	33390100 	teqcc	r9, #0, 2
    3778:	05000001 	streq	r0, [r0, #-1]
    377c:	009a0803 	addseq	r0, sl, r3, lsl #16
    3780:	09281900 	stmdbeq	r8!, {r8, fp, ip}
    3784:	3a010000 	bcc	4378c <__bss_end__+0x393c4>
    3788:	00000133 	andeq	r0, r0, r3, lsr r1
    378c:	9a0c0305 	bls	3043a8 <__bss_end__+0x2f9fe0>
    3790:	a6190000 	ldrge	r0, [r9], -r0
    3794:	01000009 	tsteq	r0, r9
    3798:	000133f0 	strdeq	r3, [r1], -r0
    379c:	30030500 	andcc	r0, r3, r0, lsl #10
    37a0:	1900009a 	stmdbne	r0, {r1, r3, r4, r7}
    37a4:	000009b4 			; <UNDEFINED> instruction: 0x000009b4
    37a8:	0133f101 	teqeq	r3, r1, lsl #2
    37ac:	03050000 	movweq	r0, #20480	; 0x5000
    37b0:	00009a10 	andeq	r9, r0, r0, lsl sl
    37b4:	0009d919 	andeq	sp, r9, r9, lsl r9
    37b8:	33f30100 	mvnscc	r0, #0, 2
    37bc:	05000001 	streq	r0, [r0, #-1]
    37c0:	009a2803 	addseq	r2, sl, r3, lsl #16
    37c4:	09e01900 	stmibeq	r0!, {r8, fp, ip}^
    37c8:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    37cc:	00000133 	andeq	r0, r0, r3, lsr r1
    37d0:	9a2c0305 	bls	b043ec <__bss_end__+0xafa024>
    37d4:	87190000 	ldrhi	r0, [r9, -r0]
    37d8:	01000009 	tsteq	r0, r9
    37dc:	000133f6 	strdeq	r3, [r1], -r6
    37e0:	14030500 	strne	r0, [r3], #-1280	; 0x500
    37e4:	1900009a 	stmdbne	r0, {r1, r3, r4, r7}
    37e8:	0000098e 	andeq	r0, r0, lr, lsl #19
    37ec:	0133f701 	teqeq	r3, r1, lsl #14
    37f0:	03050000 	movweq	r0, #20480	; 0x5000
    37f4:	00009a18 	andeq	r9, r0, r8, lsl sl
    37f8:	0009f319 	andeq	pc, r9, r9, lsl r3	; <UNPREDICTABLE>
    37fc:	33f90100 	mvnscc	r0, #0, 2
    3800:	05000001 	streq	r0, [r0, #-1]
    3804:	009a2003 	addseq	r2, sl, r3
    3808:	09fa1900 	ldmibeq	sl!, {r8, fp, ip}^
    380c:	fa010000 	blx	43814 <__bss_end__+0x3944c>
    3810:	00000133 	andeq	r0, r0, r3, lsr r1
    3814:	9a240305 	bls	904430 <__bss_end__+0x8fa068>
    3818:	cc190000 	ldcgt	0, cr0, [r9], {-0}
    381c:	01000008 	tsteq	r0, r8
    3820:	000133fc 	strdeq	r3, [r1], -ip
    3824:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
    3828:	1a00009a 	bne	3a98 <_start-0x4568>
    382c:	000008a3 	andeq	r0, r0, r3, lsr #17
    3830:	002c2001 	eoreq	r2, ip, r1
    3834:	07f50000 	ldrbeq	r0, [r5, r0]!
    3838:	f51b0000 			; <UNDEFINED> instruction: 0xf51b0000
    383c:	00000007 	andeq	r0, r0, r7
    3840:	07fb040d 	ldrbeq	r0, [fp, sp, lsl #8]!
    3844:	001c0000 	andseq	r0, ip, r0
    3848:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    384c:	0007c41e 	andeq	ip, r7, lr, lsl r4
    3850:	171e0100 	ldrne	r0, [lr, -r0, lsl #2]
    3854:	1b000008 	blne	387c <_start-0x4784>
    3858:	00000817 	andeq	r0, r0, r7, lsl r8
    385c:	00002c1b 	andeq	r2, r0, fp, lsl ip
    3860:	040d0000 	streq	r0, [sp], #-0
    3864:	00000800 	andeq	r0, r0, r0, lsl #16
    3868:	00075c1f 	andeq	r5, r7, pc, lsl ip
    386c:	008a0300 	addeq	r0, sl, r0, lsl #6
    3870:	000000db 	ldrdeq	r0, [r0], -fp
    3874:	11730004 	cmnne	r3, r4
    3878:	01040000 	mrseq	r0, (UNDEF: 4)
    387c:	00000021 	andeq	r0, r0, r1, lsr #32
    3880:	000a2c01 	andeq	r2, sl, r1, lsl #24
    3884:	00021200 	andeq	r1, r2, r0, lsl #4
    3888:	00993400 	addseq	r3, r9, r0, lsl #8
    388c:	00002000 	andeq	r2, r0, r0
    3890:	000f7800 	andeq	r7, pc, r0, lsl #16
    3894:	06010200 	streq	r0, [r1], -r0, lsl #4
    3898:	0000008c 	andeq	r0, r0, ip, lsl #1
    389c:	8a080102 	bhi	203cac <__bss_end__+0x1f98e4>
    38a0:	02000000 	andeq	r0, r0, #0
    38a4:	01a40502 			; <UNDEFINED> instruction: 0x01a40502
    38a8:	02020000 	andeq	r0, r2, #0
    38ac:	0000ad07 	andeq	sl, r0, r7, lsl #26
    38b0:	05040300 	streq	r0, [r4, #-768]	; 0x300
    38b4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    38b8:	68070402 	stmdavs	r7, {r1, sl}
    38bc:	02000001 	andeq	r0, r0, #1
    38c0:	018b0508 	orreq	r0, fp, r8, lsl #10
    38c4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    38c8:	00015e07 	andeq	r5, r1, r7, lsl #28
    38cc:	05040200 	streq	r0, [r4, #-512]	; 0x200
    38d0:	00000190 	muleq	r0, r0, r1
    38d4:	82070402 	andhi	r0, r7, #33554432	; 0x2000000
    38d8:	04000001 	streq	r0, [r0], #-1
    38dc:	07040204 	streq	r0, [r4, -r4, lsl #4]
    38e0:	00000163 	andeq	r0, r0, r3, ror #2
    38e4:	007a0405 	rsbseq	r0, sl, r5, lsl #8
    38e8:	01020000 	mrseq	r0, (UNDEF: 2)
    38ec:	00009308 	andeq	r9, r0, r8, lsl #6
    38f0:	051a0600 	ldreq	r0, [sl, #-1536]	; 0x600
    38f4:	d4020000 	strle	r0, [r2], #-0
    38f8:	00000048 	andeq	r0, r0, r8, asr #32
    38fc:	00053c07 	andeq	r3, r5, r7, lsl #24
    3900:	6b1b0300 	blvs	6c4508 <__bss_end__+0x6ba140>
    3904:	34000000 	strcc	r0, [r0], #-0
    3908:	20000099 	mulcs	r0, r9, r0
    390c:	01000000 	mrseq	r0, (UNDEF: 0)
    3910:	705f089c 			; <UNDEFINED> instruction: 0x705f089c
    3914:	6b030100 	blvs	c3d1c <__bss_end__+0xb9954>
    3918:	01000000 	mrseq	r0, (UNDEF: 0)
    391c:	00630850 	rsbeq	r0, r3, r0, asr r8
    3920:	00410301 	subeq	r0, r1, r1, lsl #6
    3924:	51010000 	mrspl	r0, (UNDEF: 1)
    3928:	01006e09 	tsteq	r0, r9, lsl #28
    392c:	00008103 	andeq	r8, r0, r3, lsl #2
    3930:	00210000 	eoreq	r0, r1, r0
    3934:	00700a00 	rsbseq	r0, r0, r0, lsl #20
    3938:	00740401 	rsbseq	r0, r4, r1, lsl #8
    393c:	21210000 	teqcs	r1, r0
    3940:	650b0000 	strvs	r0, [fp, #-0]
    3944:	74040100 	strvc	r0, [r4], #-256	; 0x100
    3948:	01000000 	mrseq	r0, (UNDEF: 0)
    394c:	c3000052 	movwgt	r0, #82	; 0x52
    3950:	04000001 	streq	r0, [r0], #-1
    3954:	00121000 	andseq	r1, r2, r0
    3958:	21010400 	tstcs	r1, r0, lsl #8
    395c:	01000000 	mrseq	r0, (UNDEF: 0)
    3960:	00000a41 	andeq	r0, r0, r1, asr #20
    3964:	00000212 	andeq	r0, r0, r2, lsl r2
    3968:	00009954 	andeq	r9, r0, r4, asr r9
    396c:	00000050 	andeq	r0, r0, r0, asr r0
    3970:	00001068 	andeq	r1, r0, r8, rrx
    3974:	69050402 	stmdbvs	r5, {r1, sl}
    3978:	0300746e 	movweq	r7, #1134	; 0x46e
    397c:	0000051a 	andeq	r0, r0, sl, lsl r5
    3980:	0037d402 	eorseq	sp, r7, r2, lsl #8
    3984:	04040000 	streq	r0, [r4], #-0
    3988:	00016807 	andeq	r6, r1, r7, lsl #16
    398c:	06010400 	streq	r0, [r1], -r0, lsl #8
    3990:	0000008c 	andeq	r0, r0, ip, lsl #1
    3994:	a4050204 	strge	r0, [r5], #-516	; 0x204
    3998:	04000001 	streq	r0, [r0], #-1
    399c:	01900504 	orrseq	r0, r0, r4, lsl #10
    39a0:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    39a4:	00018b05 	andeq	r8, r1, r5, lsl #22
    39a8:	03eb0300 	mvneq	r0, #0, 6
    39ac:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    39b0:	00000065 	andeq	r0, r0, r5, rrx
    39b4:	8a080104 	bhi	203dcc <__bss_end__+0x1f9a04>
    39b8:	04000000 	streq	r0, [r0], #-0
    39bc:	00ad0702 	adceq	r0, sp, r2, lsl #14
    39c0:	bc030000 	stclt	0, cr0, [r3], {-0}
    39c4:	03000001 	movweq	r0, #1
    39c8:	00007e34 	andeq	r7, r0, r4, lsr lr
    39cc:	07040400 	streq	r0, [r4, -r0, lsl #8]
    39d0:	00000163 	andeq	r0, r0, r3, ror #2
    39d4:	5e070804 	cdppl	8, 0, cr0, cr7, cr4, {0}
    39d8:	04000001 	streq	r0, [r0], #-1
    39dc:	01820704 	orreq	r0, r2, r4, lsl #14
    39e0:	04050000 	streq	r0, [r5], #-0
    39e4:	93080104 	movwls	r0, #33028	; 0x8104
    39e8:	06000000 	streq	r0, [r0], -r0
    39ec:	d30e040c 	movwle	r0, #58380	; 0xe40c
    39f0:	07000000 	streq	r0, [r0, -r0]
    39f4:	04007874 	streq	r7, [r0], #-2164	; 0x874
    39f8:	00005a0f 	andeq	r5, r0, pc, lsl #20
    39fc:	72070000 	andvc	r0, r7, #0
    3a00:	0f040078 	svceq	0x00040078
    3a04:	0000005a 	andeq	r0, r0, sl, asr r0
    3a08:	03b90801 			; <UNDEFINED> instruction: 0x03b90801
    3a0c:	10040000 	andne	r0, r4, r0
    3a10:	00000073 	andeq	r0, r0, r3, ror r0
    3a14:	036a0804 	cmneq	sl, #4, 16	; 0x40000
    3a18:	11040000 	mrsne	r0, (UNDEF: 4)
    3a1c:	00000073 	andeq	r0, r0, r3, ror r0
    3a20:	a2030008 	andge	r0, r3, #8
    3a24:	04000003 	streq	r0, [r0], #-3
    3a28:	00009c12 	andeq	r9, r0, r2, lsl ip
    3a2c:	05010900 	streq	r0, [r1, #-2304]	; 0x900
    3a30:	0000f910 	andeq	pc, r0, r0, lsl r9	; <UNPREDICTABLE>
    3a34:	03be0a00 			; <UNDEFINED> instruction: 0x03be0a00
    3a38:	0a010000 	beq	43a40 <__bss_end__+0x39678>
    3a3c:	000003ac 	andeq	r0, r0, ip, lsr #7
    3a40:	03940a02 	orrseq	r0, r4, #8192	; 0x2000
    3a44:	00030000 	andeq	r0, r3, r0
    3a48:	0003d303 	andeq	sp, r3, r3, lsl #6
    3a4c:	de100500 	cfmul32le	mvfx0, mvfx0, mvfx0
    3a50:	06000000 	streq	r0, [r0], -r0
    3a54:	31140514 	tstcc	r4, r4, lsl r5
    3a58:	08000001 	stmdaeq	r0, {r0}
    3a5c:	00000442 	andeq	r0, r0, r2, asr #8
    3a60:	00371505 	eorseq	r1, r7, r5, lsl #10
    3a64:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3a68:	00000436 	andeq	r0, r0, r6, lsr r4
    3a6c:	00f91805 	rscseq	r1, r9, r5, lsl #16
    3a70:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    3a74:	00000401 	andeq	r0, r0, r1, lsl #8
    3a78:	00d31b05 	sbcseq	r1, r3, r5, lsl #22
    3a7c:	00080000 	andeq	r0, r8, r0
    3a80:	0003f303 	andeq	pc, r3, r3, lsl #6
    3a84:	04200500 	strteq	r0, [r0], #-1280	; 0x500
    3a88:	0b000001 	bleq	3a94 <_start-0x456c>
    3a8c:	00000a3a 	andeq	r0, r0, sl, lsr sl
    3a90:	017e0501 	cmneq	lr, r1, lsl #10
    3a94:	99540000 	ldmdbls	r4, {}^	; <UNPREDICTABLE>
    3a98:	00280000 	eoreq	r0, r8, r0
    3a9c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3aa0:	0000017e 	andeq	r0, r0, lr, ror r1
    3aa4:	0100630c 	tsteq	r0, ip, lsl #6
    3aa8:	00017e06 	andeq	r7, r1, r6, lsl #28
    3aac:	00000000 	andeq	r0, r0, r0
    3ab0:	99680d09 	stmdbls	r8!, {r0, r3, r8, sl, fp}^
    3ab4:	01ab0000 			; <UNDEFINED> instruction: 0x01ab0000
    3ab8:	010e0000 	mrseq	r0, (UNDEF: 14)
    3abc:	0e340152 	mrceq	1, 1, r0, cr4, cr2, {2}
    3ac0:	30015101 	andcc	r5, r1, r1, lsl #2
    3ac4:	0350010e 	cmpeq	r0, #-2147483645	; 0x80000003
    3ac8:	00244742 	eoreq	r4, r4, r2, asr #14
    3acc:	31040f00 	tstcc	r4, r0, lsl #30
    3ad0:	0b000001 	bleq	3adc <_start-0x4524>
    3ad4:	00000409 	andeq	r0, r0, r9, lsl #8
    3ad8:	017e0c01 	cmneq	lr, r1, lsl #24
    3adc:	997c0000 	ldmdbls	ip!, {}^	; <UNPREDICTABLE>
    3ae0:	00280000 	eoreq	r0, r8, r0
    3ae4:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ae8:	000001ab 	andeq	r0, r0, fp, lsr #3
    3aec:	0100630c 	tsteq	r0, ip, lsl #6
    3af0:	00017e0d 	andeq	r7, r1, sp, lsl #28
    3af4:	00000000 	andeq	r0, r0, r0
    3af8:	3c100009 	ldccc	0, cr0, [r0], {9}
    3afc:	06000005 	streq	r0, [r0], -r5
    3b00:	0000931b 	andeq	r9, r0, fp, lsl r3
    3b04:	00931100 	addseq	r1, r3, r0, lsl #2
    3b08:	25110000 	ldrcs	r0, [r1, #-0]
    3b0c:	11000000 	mrsne	r0, (UNDEF: 0)
    3b10:	0000002c 	andeq	r0, r0, ip, lsr #32
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	110e1b0e 	tstne	lr, lr, lsl #22
       c:	10061201 	andne	r1, r6, r1, lsl #4
      10:	02000017 	andeq	r0, r0, #23
      14:	0b0b0024 	bleq	2c00ac <__bss_end__+0x2b5ce4>
      18:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
      1c:	24030000 	strcs	r0, [r3], #-0
      20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
      24:	000e030b 	andeq	r0, lr, fp, lsl #6
      28:	00160400 	andseq	r0, r6, r0, lsl #8
      2c:	0b3a0e03 	bleq	e83840 <__bss_end__+0xe79478>
      30:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      34:	0f050000 	svceq	0x00050000
      38:	000b0b00 	andeq	r0, fp, r0, lsl #22
      3c:	000f0600 	andeq	r0, pc, r0, lsl #12
      40:	13490b0b 	movtne	r0, #39691	; 0x9b0b
      44:	26070000 	strcs	r0, [r7], -r0
      48:	00134900 	andseq	r4, r3, r0, lsl #18
      4c:	01010800 	tsteq	r1, r0, lsl #16
      50:	13011349 	movwne	r1, #4937	; 0x1349
      54:	21090000 	mrscs	r0, (UNDEF: 9)
      58:	2f134900 	svccs	0x00134900
      5c:	0a00000b 	beq	90 <_start-0x7f70>
      60:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
      64:	0b3a050b 	bleq	e81498 <__bss_end__+0xe770d0>
      68:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      6c:	0d0b0000 	stceq	0, cr0, [fp, #-0]
      70:	3a0e0300 	bcc	380c78 <__bss_end__+0x3768b0>
      74:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      78:	000b3813 	andeq	r3, fp, r3, lsl r8
      7c:	000d0c00 	andeq	r0, sp, r0, lsl #24
      80:	0b3a0803 	bleq	e82094 <__bss_end__+0xe77ccc>
      84:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      88:	00000b38 	andeq	r0, r0, r8, lsr fp
      8c:	2701150d 	strcs	r1, [r1, -sp, lsl #10]
      90:	00130119 	andseq	r0, r3, r9, lsl r1
      94:	00050e00 	andeq	r0, r5, r0, lsl #28
      98:	00001349 	andeq	r1, r0, r9, asr #6
      9c:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
      a0:	00052f13 	andeq	r2, r5, r3, lsl pc
      a4:	012e1000 	teqeq	lr, r0
      a8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
      ac:	0b3b0b3a 	bleq	ec2d9c <__bss_end__+0xeb89d4>
      b0:	01111927 	tsteq	r1, r7, lsr #18
      b4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
      b8:	01194297 			; <UNDEFINED> instruction: 0x01194297
      bc:	11000013 	tstne	r0, r3, lsl r0
      c0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
      c4:	0b3b0b3a 	bleq	ec2db4 <__bss_end__+0xeb89ec>
      c8:	0b1c1349 	bleq	704df4 <__bss_end__+0x6faa2c>
      cc:	34120000 	ldrcc	r0, [r2], #-0
      d0:	3a0e0300 	bcc	380cd8 <__bss_end__+0x376910>
      d4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      d8:	00170213 	andseq	r0, r7, r3, lsl r2
      dc:	00341300 	eorseq	r1, r4, r0, lsl #6
      e0:	0b3a0803 	bleq	e820f4 <__bss_end__+0xe77d2c>
      e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      e8:	00001702 	andeq	r1, r0, r2, lsl #14
      ec:	03003414 	movweq	r3, #1044	; 0x414
      f0:	3413490e 	ldrcc	r4, [r3], #-2318	; 0x90e
      f4:	00180219 	andseq	r0, r8, r9, lsl r2
      f8:	82891500 	addhi	r1, r9, #0, 10
      fc:	01110001 	tsteq	r1, r1
     100:	00001331 	andeq	r1, r0, r1, lsr r3
     104:	01828916 	orreq	r8, r2, r6, lsl r9
     108:	31011101 	tstcc	r1, r1, lsl #2
     10c:	00130113 	andseq	r0, r3, r3, lsl r1
     110:	828a1700 	addhi	r1, sl, #0, 14
     114:	18020001 	stmdane	r2, {r0}
     118:	00184291 	mulseq	r8, r1, r2
     11c:	00351800 	eorseq	r1, r5, r0, lsl #16
     120:	00001349 	andeq	r1, r0, r9, asr #6
     124:	3f002e19 	svccc	0x00002e19
     128:	3a0e0319 	bcc	380d94 <__bss_end__+0x3769cc>
     12c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     130:	00193c19 	andseq	r3, r9, r9, lsl ip
     134:	012e1a00 	teqeq	lr, r0, lsl #20
     138:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     13c:	0b3b0b3a 	bleq	ec2e2c <__bss_end__+0xeb8a64>
     140:	13491927 	movtne	r1, #39207	; 0x9927
     144:	1301193c 	movwne	r1, #6460	; 0x193c
     148:	181b0000 	ldmdane	fp, {}	; <UNPREDICTABLE>
     14c:	1c000000 	stcne	0, cr0, [r0], {-0}
     150:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     154:	0b3a0e03 	bleq	e83968 <__bss_end__+0xe795a0>
     158:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     15c:	1301193c 	movwne	r1, #6460	; 0x193c
     160:	01000000 	mrseq	r0, (UNDEF: 0)
     164:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     168:	0e030b13 	vmoveq.32	d3[0], r0
     16c:	01110e1b 	tsteq	r1, fp, lsl lr
     170:	17100612 			; <UNDEFINED> instruction: 0x17100612
     174:	16020000 	strne	r0, [r2], -r0
     178:	3a0e0300 	bcc	380d80 <__bss_end__+0x3769b8>
     17c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     180:	03000013 	movweq	r0, #19
     184:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     188:	0b3a0b0b 	bleq	e82dbc <__bss_end__+0xe789f4>
     18c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     190:	0d040000 	stceq	0, cr0, [r4, #-0]
     194:	490e0300 	stmdbmi	lr, {r8, r9}
     198:	340b3813 	strcc	r3, [fp], #-2067	; 0x813
     19c:	05000019 	streq	r0, [r0, #-25]
     1a0:	0b0b000f 	bleq	2c01e4 <__bss_end__+0x2b5e1c>
     1a4:	24060000 	strcs	r0, [r6], #-0
     1a8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     1ac:	0008030b 	andeq	r0, r8, fp, lsl #6
     1b0:	00240700 	eoreq	r0, r4, r0, lsl #14
     1b4:	0b3e0b0b 	bleq	f82de8 <__bss_end__+0xf78a20>
     1b8:	00000e03 	andeq	r0, r0, r3, lsl #28
     1bc:	0b000f08 	bleq	3de4 <_start-0x421c>
     1c0:	0013490b 	andseq	r4, r3, fp, lsl #18
     1c4:	00260900 	eoreq	r0, r6, r0, lsl #18
     1c8:	00001349 	andeq	r1, r0, r9, asr #6
     1cc:	3f012e0a 	svccc	0x00012e0a
     1d0:	3a0e0319 	bcc	380e3c <__bss_end__+0x376a74>
     1d4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     1d8:	11134919 	tstne	r3, r9, lsl r9
     1dc:	40061201 	andmi	r1, r6, r1, lsl #4
     1e0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     1e4:	00001301 	andeq	r1, r0, r1, lsl #6
     1e8:	0300050b 	movweq	r0, #1291	; 0x50b
     1ec:	3b0b3a08 	blcc	2cea14 <__bss_end__+0x2c464c>
     1f0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     1f4:	0c000018 	stceq	0, cr0, [r0], {24}
     1f8:	00000018 	andeq	r0, r0, r8, lsl r0
     1fc:	0300340d 	movweq	r3, #1037	; 0x40d
     200:	3b0b3a08 	blcc	2cea28 <__bss_end__+0x2c4660>
     204:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     208:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
     20c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     210:	0b3b0b3a 	bleq	ec2f00 <__bss_end__+0xeb8b38>
     214:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     218:	340f0000 	strcc	r0, [pc], #-0	; 220 <_start-0x7de0>
     21c:	3a080300 	bcc	200e24 <__bss_end__+0x1f6a5c>
     220:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     224:	00170213 	andseq	r0, r7, r3, lsl r2
     228:	82891000 	addhi	r1, r9, #0
     22c:	01110101 	tsteq	r1, r1, lsl #2
     230:	13011331 	movwne	r1, #4913	; 0x1331
     234:	8a110000 	bhi	44023c <__bss_end__+0x435e74>
     238:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     23c:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     240:	89120000 	ldmdbhi	r2, {}	; <UNPREDICTABLE>
     244:	11010182 	smlabbne	r1, r2, r1, r0
     248:	13000001 	movwne	r0, #1
     24c:	13490101 	movtne	r0, #37121	; 0x9101
     250:	00001301 	andeq	r1, r0, r1, lsl #6
     254:	49002114 	stmdbmi	r0, {r2, r4, r8, sp}
     258:	00052f13 	andeq	r2, r5, r3, lsl pc
     25c:	01151500 	tsteq	r5, r0, lsl #10
     260:	13491927 	movtne	r1, #39207	; 0x9927
     264:	00001301 	andeq	r1, r0, r1, lsl #6
     268:	49000516 	stmdbmi	r0, {r1, r2, r4, r8, sl}
     26c:	17000013 	smladne	r0, r3, r0, r0
     270:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     274:	0b3b0b3a 	bleq	ec2f64 <__bss_end__+0xeb8b9c>
     278:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     27c:	0000193c 	andeq	r1, r0, ip, lsr r9
     280:	3f012e18 	svccc	0x00012e18
     284:	3a0e0319 	bcc	380ef0 <__bss_end__+0x376b28>
     288:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     28c:	3c134919 	ldccc	9, cr4, [r3], {25}
     290:	00000019 	andeq	r0, r0, r9, lsl r0
     294:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     298:	030b130e 	movweq	r1, #45838	; 0xb30e
     29c:	110e1b0e 	tstne	lr, lr, lsl #22
     2a0:	10061201 	andne	r1, r6, r1, lsl #4
     2a4:	02000017 	andeq	r0, r0, #23
     2a8:	0b0b0024 	bleq	2c0340 <__bss_end__+0x2b5f78>
     2ac:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     2b0:	24030000 	strcs	r0, [r3], #-0
     2b4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     2b8:	000e030b 	andeq	r0, lr, fp, lsl #6
     2bc:	012e0400 	teqeq	lr, r0, lsl #8
     2c0:	0b3a0e03 	bleq	e83ad4 <__bss_end__+0xe7970c>
     2c4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     2c8:	01111349 	tsteq	r1, r9, asr #6
     2cc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     2d0:	01194297 			; <UNDEFINED> instruction: 0x01194297
     2d4:	05000013 	streq	r0, [r0, #-19]
     2d8:	08030005 	stmdaeq	r3, {r0, r2}
     2dc:	0b3b0b3a 	bleq	ec2fcc <__bss_end__+0xeb8c04>
     2e0:	17021349 	strne	r1, [r2, -r9, asr #6]
     2e4:	89060000 	stmdbhi	r6, {}	; <UNPREDICTABLE>
     2e8:	11010182 	smlabbne	r1, r2, r1, r0
     2ec:	00133101 	andseq	r3, r3, r1, lsl #2
     2f0:	828a0700 	addhi	r0, sl, #0, 14
     2f4:	18020001 	stmdane	r2, {r0}
     2f8:	00184291 	mulseq	r8, r1, r2
     2fc:	002e0800 	eoreq	r0, lr, r0, lsl #16
     300:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     304:	0b3b0b3a 	bleq	ec2ff4 <__bss_end__+0xeb8c2c>
     308:	01111927 	tsteq	r1, r7, lsr #18
     30c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     310:	00194297 	mulseq	r9, r7, r2
     314:	012e0900 	teqeq	lr, r0, lsl #18
     318:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     31c:	0b3b0b3a 	bleq	ec300c <__bss_end__+0xeb8c44>
     320:	01111927 	tsteq	r1, r7, lsr #18
     324:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     328:	01194297 			; <UNDEFINED> instruction: 0x01194297
     32c:	0a000013 	beq	380 <_start-0x7c80>
     330:	08030005 	stmdaeq	r3, {r0, r2}
     334:	0b3b0b3a 	bleq	ec3024 <__bss_end__+0xeb8c5c>
     338:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     33c:	150b0000 	strne	r0, [fp, #-0]
     340:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
     344:	00130113 	andseq	r0, r3, r3, lsl r1
     348:	00050c00 	andeq	r0, r5, r0, lsl #24
     34c:	00001349 	andeq	r1, r0, r9, asr #6
     350:	0b000f0d 	bleq	3f8c <_start-0x4074>
     354:	0013490b 	andseq	r4, r3, fp, lsl #18
     358:	00340e00 	eorseq	r0, r4, r0, lsl #28
     35c:	0b3a0e03 	bleq	e83b70 <__bss_end__+0xe797a8>
     360:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     364:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     368:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
     36c:	03193f01 	tsteq	r9, #1, 30
     370:	3b0b3a0e 	blcc	2cebb0 <__bss_end__+0x2c47e8>
     374:	3c19270b 	ldccc	7, cr2, [r9], {11}
     378:	00000019 	andeq	r0, r0, r9, lsl r0
     37c:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     380:	030b130e 	movweq	r1, #45838	; 0xb30e
     384:	110e1b0e 	tstne	lr, lr, lsl #22
     388:	10061201 	andne	r1, r6, r1, lsl #4
     38c:	02000017 	andeq	r0, r0, #23
     390:	0b0b0024 	bleq	2c0428 <__bss_end__+0x2b6060>
     394:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     398:	24030000 	strcs	r0, [r3], #-0
     39c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     3a0:	000e030b 	andeq	r0, lr, fp, lsl #6
     3a4:	000f0400 	andeq	r0, pc, r0, lsl #8
     3a8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     3ac:	26050000 	strcs	r0, [r5], -r0
     3b0:	00134900 	andseq	r4, r3, r0, lsl #18
     3b4:	012e0600 	teqeq	lr, r0, lsl #12
     3b8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     3bc:	0b3b0b3a 	bleq	ec30ac <__bss_end__+0xeb8ce4>
     3c0:	13491927 	movtne	r1, #39207	; 0x9927
     3c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     3c8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     3cc:	00130119 	andseq	r0, r3, r9, lsl r1
     3d0:	00050700 	andeq	r0, r5, r0, lsl #14
     3d4:	0b3a0803 	bleq	e823e8 <__bss_end__+0xe78020>
     3d8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     3dc:	00001702 	andeq	r1, r0, r2, lsl #14
     3e0:	27011508 	strcs	r1, [r1, -r8, lsl #10]
     3e4:	01134919 	tsteq	r3, r9, lsl r9
     3e8:	09000013 	stmdbeq	r0, {r0, r1, r4}
     3ec:	13490005 	movtne	r0, #36869	; 0x9005
     3f0:	340a0000 	strcc	r0, [sl], #-0
     3f4:	3a0e0300 	bcc	380ffc <__bss_end__+0x376c34>
     3f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3fc:	3c193f13 	ldccc	15, cr3, [r9], {19}
     400:	0b000019 	bleq	46c <_start-0x7b94>
     404:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     408:	0b3b0b3a 	bleq	ec30f8 <__bss_end__+0xeb8d30>
     40c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     410:	00001802 	andeq	r1, r0, r2, lsl #16
     414:	01110100 	tsteq	r1, r0, lsl #2
     418:	0b130e25 	bleq	4c3cb4 <__bss_end__+0x4b98ec>
     41c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     420:	06120111 			; <UNDEFINED> instruction: 0x06120111
     424:	00001710 	andeq	r1, r0, r0, lsl r7
     428:	0b002402 	bleq	9438 <gpio_set_output+0x6c>
     42c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     430:	03000008 	movweq	r0, #8
     434:	0b0b0024 	bleq	2c04cc <__bss_end__+0x2b6104>
     438:	0e030b3e 	vmoveq.16	d3[0], r0
     43c:	0f040000 	svceq	0x00040000
     440:	000b0b00 	andeq	r0, fp, r0, lsl #22
     444:	000f0500 	andeq	r0, pc, r0, lsl #10
     448:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     44c:	26060000 	strcs	r0, [r6], -r0
     450:	00134900 	andseq	r4, r3, r0, lsl #18
     454:	00160700 	andseq	r0, r6, r0, lsl #14
     458:	0b3a0e03 	bleq	e83c6c <__bss_end__+0xe798a4>
     45c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     460:	13080000 	movwne	r0, #32768	; 0x8000
     464:	0b0e0301 	bleq	381070 <__bss_end__+0x376ca8>
     468:	3b0b3a0b 	blcc	2cec9c <__bss_end__+0x2c48d4>
     46c:	0013010b 	andseq	r0, r3, fp, lsl #2
     470:	000d0900 	andeq	r0, sp, r0, lsl #18
     474:	13490e03 	movtne	r0, #40451	; 0x9e03
     478:	19340b38 	ldmdbne	r4!, {r3, r4, r5, r8, r9, fp}
     47c:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
     480:	3a0e0301 	bcc	38108c <__bss_end__+0x376cc4>
     484:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     488:	11134919 	tstne	r3, r9, lsl r9
     48c:	40061201 	andmi	r1, r6, r1, lsl #4
     490:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     494:	00001301 	andeq	r1, r0, r1, lsl #6
     498:	0300050b 	movweq	r0, #1291	; 0x50b
     49c:	3b0b3a08 	blcc	2cecc4 <__bss_end__+0x2c48fc>
     4a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     4a4:	0c000017 	stceq	0, cr0, [r0], {23}
     4a8:	0803012e 	stmdaeq	r3, {r1, r2, r3, r5, r8}
     4ac:	0b3b0b3a 	bleq	ec319c <__bss_end__+0xeb8dd4>
     4b0:	13491927 	movtne	r1, #39207	; 0x9927
     4b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     4b8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     4bc:	00130119 	andseq	r0, r3, r9, lsl r1
     4c0:	00050d00 	andeq	r0, r5, r0, lsl #26
     4c4:	0b3a0e03 	bleq	e83cd8 <__bss_end__+0xe79910>
     4c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     4cc:	00001702 	andeq	r1, r0, r2, lsl #14
     4d0:	0300050e 	movweq	r0, #1294	; 0x50e
     4d4:	3b0b3a0e 	blcc	2ced14 <__bss_end__+0x2c494c>
     4d8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     4dc:	0f000018 	svceq	0x00000018
     4e0:	08030034 	stmdaeq	r3, {r2, r4, r5}
     4e4:	0b3b0b3a 	bleq	ec31d4 <__bss_end__+0xeb8e0c>
     4e8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     4ec:	34100000 	ldrcc	r0, [r0], #-0
     4f0:	3a080300 	bcc	2010f8 <__bss_end__+0x1f6d30>
     4f4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4f8:	00170213 	andseq	r0, r7, r3, lsl r2
     4fc:	00341100 	eorseq	r1, r4, r0, lsl #2
     500:	13490e03 	movtne	r0, #40451	; 0x9e03
     504:	18021934 	stmdane	r2, {r2, r4, r5, r8, fp, ip}
     508:	0b120000 	bleq	480510 <__bss_end__+0x476148>
     50c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     510:	00130106 	andseq	r0, r3, r6, lsl #2
     514:	00341300 	eorseq	r1, r4, r0, lsl #6
     518:	0b3a0e03 	bleq	e83d2c <__bss_end__+0xe79964>
     51c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     520:	00001702 	andeq	r1, r0, r2, lsl #14
     524:	01828914 	orreq	r8, r2, r4, lsl r9
     528:	31011100 	mrscc	r1, (UNDEF: 17)
     52c:	15000013 	strne	r0, [r0, #-19]
     530:	01018289 	smlabbeq	r1, r9, r2, r8
     534:	13310111 	teqne	r1, #1073741828	; 0x40000004
     538:	00001301 	andeq	r1, r0, r1, lsl #6
     53c:	01828a16 	orreq	r8, r2, r6, lsl sl
     540:	91180200 	tstls	r8, r0, lsl #4
     544:	00001842 	andeq	r1, r0, r2, asr #16
     548:	01828917 	orreq	r8, r2, r7, lsl r9
     54c:	31011101 	tstcc	r1, r1, lsl #2
     550:	18000013 	stmdane	r0, {r0, r1, r4}
     554:	13490101 	movtne	r0, #37121	; 0x9101
     558:	00001301 	andeq	r1, r0, r1, lsl #6
     55c:	49002119 	stmdbmi	r0, {r0, r3, r4, r8, sp}
     560:	000b2f13 	andeq	r2, fp, r3, lsl pc
     564:	012e1a00 	teqeq	lr, r0, lsl #20
     568:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     56c:	0b3b0b3a 	bleq	ec325c <__bss_end__+0xeb8e94>
     570:	01111927 	tsteq	r1, r7, lsr #18
     574:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     578:	01194297 			; <UNDEFINED> instruction: 0x01194297
     57c:	1b000013 	blne	5d0 <_start-0x7a30>
     580:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     584:	13011349 	movwne	r1, #4937	; 0x1349
     588:	051c0000 	ldreq	r0, [ip, #-0]
     58c:	00134900 	andseq	r4, r3, r0, lsl #18
     590:	012e1d00 	teqeq	lr, r0, lsl #26
     594:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     598:	0b3b0b3a 	bleq	ec3288 <__bss_end__+0xeb8ec0>
     59c:	13491927 	movtne	r1, #39207	; 0x9927
     5a0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     5a4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     5a8:	00130119 	andseq	r0, r3, r9, lsl r1
     5ac:	010b1e00 	tsteq	fp, r0, lsl #28
     5b0:	00001755 	andeq	r1, r0, r5, asr r7
     5b4:	0300341f 	movweq	r3, #1055	; 0x41f
     5b8:	3b0b3a0e 	blcc	2cedf8 <__bss_end__+0x2c4a30>
     5bc:	3f13490b 	svccc	0x0013490b
     5c0:	00193c19 	andseq	r3, r9, r9, lsl ip
     5c4:	002e2000 	eoreq	r2, lr, r0
     5c8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     5cc:	0b3b0b3a 	bleq	ec32bc <__bss_end__+0xeb8ef4>
     5d0:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     5d4:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
     5d8:	03193f01 	tsteq	r9, #1, 30
     5dc:	3b0b3a0e 	blcc	2cee1c <__bss_end__+0x2c4a54>
     5e0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     5e4:	01193c13 	tsteq	r9, r3, lsl ip
     5e8:	22000013 	andcs	r0, r0, #19
     5ec:	00000018 	andeq	r0, r0, r8, lsl r0
     5f0:	01110100 	tsteq	r1, r0, lsl #2
     5f4:	0b130e25 	bleq	4c3e90 <__bss_end__+0x4b9ac8>
     5f8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     5fc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     600:	00001710 	andeq	r1, r0, r0, lsl r7
     604:	0b002402 	bleq	9614 <gpio_read+0x38>
     608:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     60c:	03000008 	movweq	r0, #8
     610:	0b0b0024 	bleq	2c06a8 <__bss_end__+0x2b62e0>
     614:	0e030b3e 	vmoveq.16	d3[0], r0
     618:	0f040000 	svceq	0x00040000
     61c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     620:	05000013 	streq	r0, [r0, #-19]
     624:	13490026 	movtne	r0, #36902	; 0x9026
     628:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
     62c:	03193f01 	tsteq	r9, #1, 30
     630:	3b0b3a0e 	blcc	2cee70 <__bss_end__+0x2c4aa8>
     634:	1119270b 	tstne	r9, fp, lsl #14
     638:	40061201 	andmi	r1, r6, r1, lsl #4
     63c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     640:	00001301 	andeq	r1, r0, r1, lsl #6
     644:	01828907 	orreq	r8, r2, r7, lsl #18
     648:	01011101 	tsteq	r1, r1, lsl #2
     64c:	08000013 	stmdaeq	r0, {r0, r1, r4}
     650:	0001828a 	andeq	r8, r1, sl, lsl #5
     654:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     658:	09000018 	stmdbeq	r0, {r3, r4}
     65c:	01018289 	smlabbeq	r1, r9, r2, r8
     660:	13310111 	teqne	r1, #1073741828	; 0x40000004
     664:	00001301 	andeq	r1, r0, r1, lsl #6
     668:	0182890a 	orreq	r8, r2, sl, lsl #18
     66c:	31011100 	mrscc	r1, (UNDEF: 17)
     670:	0b000013 	bleq	6c4 <_start-0x793c>
     674:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     678:	13011349 	movwne	r1, #4937	; 0x1349
     67c:	050c0000 	streq	r0, [ip, #-0]
     680:	00134900 	andseq	r4, r3, r0, lsl #18
     684:	00340d00 	eorseq	r0, r4, r0, lsl #26
     688:	0b3a0e03 	bleq	e83e9c <__bss_end__+0xe79ad4>
     68c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     690:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     694:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
     698:	03193f01 	tsteq	r9, #1, 30
     69c:	3b0b3a0e 	blcc	2ceedc <__bss_end__+0x2c4b14>
     6a0:	3c19270b 	ldccc	7, cr2, [r9], {11}
     6a4:	00130119 	andseq	r0, r3, r9, lsl r1
     6a8:	002e0f00 	eoreq	r0, lr, r0, lsl #30
     6ac:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     6b0:	0b3b0b3a 	bleq	ec33a0 <__bss_end__+0xeb8fd8>
     6b4:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     6b8:	01000000 	mrseq	r0, (UNDEF: 0)
     6bc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     6c0:	0e030b13 	vmoveq.32	d3[0], r0
     6c4:	01110e1b 	tsteq	r1, fp, lsl lr
     6c8:	17100612 			; <UNDEFINED> instruction: 0x17100612
     6cc:	24020000 	strcs	r0, [r2], #-0
     6d0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     6d4:	0008030b 	andeq	r0, r8, fp, lsl #6
     6d8:	00240300 	eoreq	r0, r4, r0, lsl #6
     6dc:	0b3e0b0b 	bleq	f83310 <__bss_end__+0xf78f48>
     6e0:	00000e03 	andeq	r0, r0, r3, lsl #28
     6e4:	03001604 	movweq	r1, #1540	; 0x604
     6e8:	3b0b3a0e 	blcc	2cef28 <__bss_end__+0x2c4b60>
     6ec:	0013490b 	andseq	r4, r3, fp, lsl #18
     6f0:	000f0500 	andeq	r0, pc, r0, lsl #10
     6f4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     6f8:	26060000 	strcs	r0, [r6], -r0
     6fc:	00134900 	andseq	r4, r3, r0, lsl #18
     700:	01130700 	tsteq	r3, r0, lsl #14
     704:	0b3a0b0b 	bleq	e83338 <__bss_end__+0xe78f70>
     708:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     70c:	0d080000 	stceq	0, cr0, [r8, #-0]
     710:	3a080300 	bcc	201318 <__bss_end__+0x1f6f50>
     714:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     718:	000b3813 	andeq	r3, fp, r3, lsl r8
     71c:	000d0900 	andeq	r0, sp, r0, lsl #18
     720:	0b3a0e03 	bleq	e83f34 <__bss_end__+0xe79b6c>
     724:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     728:	00000b38 	andeq	r0, r0, r8, lsr fp
     72c:	0b01040a 	bleq	4175c <__bss_end__+0x37394>
     730:	3b0b3a0b 	blcc	2cef64 <__bss_end__+0x2c4b9c>
     734:	0013010b 	andseq	r0, r3, fp, lsl #2
     738:	00280b00 	eoreq	r0, r8, r0, lsl #22
     73c:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     740:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
     744:	3a0e0301 	bcc	381350 <__bss_end__+0x376f88>
     748:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     74c:	11134919 	tstne	r3, r9, lsl r9
     750:	40061201 	andmi	r1, r6, r1, lsl #4
     754:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     758:	00001301 	andeq	r1, r0, r1, lsl #6
     75c:	0300050d 	movweq	r0, #1293	; 0x50d
     760:	3b0b3a08 	blcc	2cef88 <__bss_end__+0x2c4bc0>
     764:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     768:	0e000017 	mcreq	0, 0, r0, cr0, cr7, {0}
     76c:	01018289 	smlabbeq	r1, r9, r2, r8
     770:	13310111 	teqne	r1, #1073741828	; 0x40000004
     774:	8a0f0000 	bhi	3c077c <__bss_end__+0x3b63b4>
     778:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     77c:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     780:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
     784:	03193f01 	tsteq	r9, #1, 30
     788:	3b0b3a0e 	blcc	2cefc8 <__bss_end__+0x2c4c00>
     78c:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
     790:	97184006 	ldrls	r4, [r8, -r6]
     794:	13011942 	movwne	r1, #6466	; 0x1942
     798:	34110000 	ldrcc	r0, [r1], #-0
     79c:	3a0e0300 	bcc	3813a4 <__bss_end__+0x376fdc>
     7a0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     7a4:	3c193f13 	ldccc	15, cr3, [r9], {19}
     7a8:	12000019 	andne	r0, r0, #25
     7ac:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     7b0:	0b3a0e03 	bleq	e83fc4 <__bss_end__+0xe79bfc>
     7b4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     7b8:	0000193c 	andeq	r1, r0, ip, lsr r9
     7bc:	03003413 	movweq	r3, #1043	; 0x413
     7c0:	3b0b3a08 	blcc	2cefe8 <__bss_end__+0x2c4c20>
     7c4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     7c8:	14000017 	strne	r0, [r0], #-23
     7cc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     7d0:	0b3b0b3a 	bleq	ec34c0 <__bss_end__+0xeb90f8>
     7d4:	00001349 	andeq	r1, r0, r9, asr #6
     7d8:	01828915 	orreq	r8, r2, r5, lsl r9
     7dc:	31011100 	mrscc	r1, (UNDEF: 17)
     7e0:	16000013 			; <UNDEFINED> instruction: 0x16000013
     7e4:	01018289 	smlabbeq	r1, r9, r2, r8
     7e8:	13310111 	teqne	r1, #1073741828	; 0x40000004
     7ec:	00001301 	andeq	r1, r0, r1, lsl #6
     7f0:	03003417 	movweq	r3, #1047	; 0x417
     7f4:	3b0b3a0e 	blcc	2cf034 <__bss_end__+0x2c4c6c>
     7f8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     7fc:	18000018 	stmdane	r0, {r3, r4}
     800:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     804:	13011349 	movwne	r1, #4937	; 0x1349
     808:	05190000 	ldreq	r0, [r9, #-0]
     80c:	00134900 	andseq	r4, r3, r0, lsl #18
     810:	012e1a00 	teqeq	lr, r0, lsl #20
     814:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     818:	0b3b0b3a 	bleq	ec3508 <__bss_end__+0xeb9140>
     81c:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     820:	00001301 	andeq	r1, r0, r1, lsl #6
     824:	3f002e1b 	svccc	0x00002e1b
     828:	3a0e0319 	bcc	381494 <__bss_end__+0x3770cc>
     82c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     830:	3c134919 	ldccc	9, cr4, [r3], {25}
     834:	1c000019 	stcne	0, cr0, [r0], {25}
     838:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     83c:	0b3a0e03 	bleq	e84050 <__bss_end__+0xe79c88>
     840:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     844:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     848:	00001301 	andeq	r1, r0, r1, lsl #6
     84c:	0000181d 	andeq	r1, r0, sp, lsl r8
     850:	11010000 	mrsne	r0, (UNDEF: 1)
     854:	130e2501 	movwne	r2, #58625	; 0xe501
     858:	1b0e030b 	blne	38148c <__bss_end__+0x3770c4>
     85c:	1117550e 	tstne	r7, lr, lsl #10
     860:	00171001 	andseq	r1, r7, r1
     864:	00240200 	eoreq	r0, r4, r0, lsl #4
     868:	0b3e0b0b 	bleq	f8349c <__bss_end__+0xf790d4>
     86c:	00000803 	andeq	r0, r0, r3, lsl #16
     870:	0b002403 	bleq	9884 <gpio_event_detected+0x2c>
     874:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     878:	0400000e 	streq	r0, [r0], #-14
     87c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     880:	0b3a0e03 	bleq	e84094 <__bss_end__+0xe79ccc>
     884:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     888:	01111349 	tsteq	r1, r9, asr #6
     88c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     890:	01194297 			; <UNDEFINED> instruction: 0x01194297
     894:	05000013 	streq	r0, [r0, #-19]
     898:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     89c:	0b3b0b3a 	bleq	ec358c <__bss_end__+0xeb91c4>
     8a0:	17021349 	strne	r1, [r2, -r9, asr #6]
     8a4:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
     8a8:	03193f01 	tsteq	r9, #1, 30
     8ac:	3b0b3a0e 	blcc	2cf0ec <__bss_end__+0x2c4d24>
     8b0:	1119270b 	tstne	r9, fp, lsl #14
     8b4:	40061201 	andmi	r1, r6, r1, lsl #4
     8b8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     8bc:	00001301 	andeq	r1, r0, r1, lsl #6
     8c0:	03003407 	movweq	r3, #1031	; 0x407
     8c4:	3b0b3a0e 	blcc	2cf104 <__bss_end__+0x2c4d3c>
     8c8:	1c13490b 	ldcne	9, cr4, [r3], {11}
     8cc:	08000006 	stmdaeq	r0, {r1, r2}
     8d0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     8d4:	0b3b0b3a 	bleq	ec35c4 <__bss_end__+0xeb91fc>
     8d8:	0b1c1349 	bleq	705604 <__bss_end__+0x6fb23c>
     8dc:	89090000 	stmdbhi	r9, {}	; <UNPREDICTABLE>
     8e0:	11000182 	smlabbne	r0, r2, r1, r0
     8e4:	00133101 	andseq	r3, r3, r1, lsl #2
     8e8:	82890a00 	addhi	r0, r9, #0, 20
     8ec:	01110101 	tsteq	r1, r1, lsl #2
     8f0:	13011331 	movwne	r1, #4913	; 0x1331
     8f4:	8a0b0000 	bhi	2c08fc <__bss_end__+0x2b6534>
     8f8:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     8fc:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     900:	890c0000 	stmdbhi	ip, {}	; <UNPREDICTABLE>
     904:	11010182 	smlabbne	r1, r2, r1, r0
     908:	00133101 	andseq	r3, r3, r1, lsl #2
     90c:	00260d00 	eoreq	r0, r6, r0, lsl #26
     910:	00001349 	andeq	r1, r0, r9, asr #6
     914:	3f012e0e 	svccc	0x00012e0e
     918:	3a0e0319 	bcc	381584 <__bss_end__+0x3771bc>
     91c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     920:	01193c19 	tsteq	r9, r9, lsl ip
     924:	0f000013 	svceq	0x00000013
     928:	13490005 	movtne	r0, #36869	; 0x9005
     92c:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
     930:	03193f01 	tsteq	r9, #1, 30
     934:	3b0b3a0e 	blcc	2cf174 <__bss_end__+0x2c4dac>
     938:	3c19270b 	ldccc	7, cr2, [r9], {11}
     93c:	00000019 	andeq	r0, r0, r9, lsl r0
     940:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     944:	030b130e 	movweq	r1, #45838	; 0xb30e
     948:	110e1b0e 	tstne	lr, lr, lsl #22
     94c:	10061201 	andne	r1, r6, r1, lsl #4
     950:	02000017 	andeq	r0, r0, #23
     954:	0b0b0024 	bleq	2c09ec <__bss_end__+0x2b6624>
     958:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     95c:	24030000 	strcs	r0, [r3], #-0
     960:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     964:	000e030b 	andeq	r0, lr, fp, lsl #6
     968:	012e0400 	teqeq	lr, r0, lsl #8
     96c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     970:	0b3b0b3a 	bleq	ec3660 <__bss_end__+0xeb9298>
     974:	01111927 	tsteq	r1, r7, lsr #18
     978:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     97c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     980:	05000013 	streq	r0, [r0, #-19]
     984:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     988:	0b3b0b3a 	bleq	ec3678 <__bss_end__+0xeb92b0>
     98c:	17021349 	strne	r1, [r2, -r9, asr #6]
     990:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
     994:	03193f01 	tsteq	r9, #1, 30
     998:	3b0b3a0e 	blcc	2cf1d8 <__bss_end__+0x2c4e10>
     99c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     9a0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     9a4:	97184006 	ldrls	r4, [r8, -r6]
     9a8:	13011942 	movwne	r1, #6466	; 0x1942
     9ac:	89070000 	stmdbhi	r7, {}	; <UNPREDICTABLE>
     9b0:	11010182 	smlabbne	r1, r2, r1, r0
     9b4:	00133101 	andseq	r3, r3, r1, lsl #2
     9b8:	828a0800 	addhi	r0, sl, #0, 16
     9bc:	18020001 	stmdane	r2, {r0}
     9c0:	00184291 	mulseq	r8, r1, r2
     9c4:	00340900 	eorseq	r0, r4, r0, lsl #18
     9c8:	0b3a0803 	bleq	e829dc <__bss_end__+0xe78614>
     9cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     9d0:	00001802 	andeq	r1, r0, r2, lsl #16
     9d4:	0182890a 	orreq	r8, r2, sl, lsl #18
     9d8:	31011100 	mrscc	r1, (UNDEF: 17)
     9dc:	0b000013 	bleq	a30 <_start-0x75d0>
     9e0:	08030005 	stmdaeq	r3, {r0, r2}
     9e4:	0b3b0b3a 	bleq	ec36d4 <__bss_end__+0xeb930c>
     9e8:	17021349 	strne	r1, [r2, -r9, asr #6]
     9ec:	0b0c0000 	bleq	3009f4 <__bss_end__+0x2f662c>
     9f0:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     9f4:	00130106 	andseq	r0, r3, r6, lsl #2
     9f8:	00340d00 	eorseq	r0, r4, r0, lsl #26
     9fc:	0b3a0803 	bleq	e82a10 <__bss_end__+0xe78648>
     a00:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     a04:	00001702 	andeq	r1, r0, r2, lsl #14
     a08:	3f012e0e 	svccc	0x00012e0e
     a0c:	3a0e0319 	bcc	381678 <__bss_end__+0x3772b0>
     a10:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     a14:	3c134919 	ldccc	9, cr4, [r3], {25}
     a18:	0f000019 	svceq	0x00000019
     a1c:	13490005 	movtne	r0, #36869	; 0x9005
     a20:	01000000 	mrseq	r0, (UNDEF: 0)
     a24:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     a28:	0e030b13 	vmoveq.32	d3[0], r0
     a2c:	01110e1b 	tsteq	r1, fp, lsl lr
     a30:	17100612 			; <UNDEFINED> instruction: 0x17100612
     a34:	24020000 	strcs	r0, [r2], #-0
     a38:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     a3c:	0008030b 	andeq	r0, r8, fp, lsl #6
     a40:	00160300 	andseq	r0, r6, r0, lsl #6
     a44:	0b3a0e03 	bleq	e84258 <__bss_end__+0xe79e90>
     a48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     a4c:	24040000 	strcs	r0, [r4], #-0
     a50:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     a54:	000e030b 	andeq	r0, lr, fp, lsl #6
     a58:	000f0500 	andeq	r0, pc, r0, lsl #10
     a5c:	00000b0b 	andeq	r0, r0, fp, lsl #22
     a60:	0b000f06 	bleq	4680 <_start-0x3980>
     a64:	0013490b 	andseq	r4, r3, fp, lsl #18
     a68:	00260700 	eoreq	r0, r6, r0, lsl #14
     a6c:	00001349 	andeq	r1, r0, r9, asr #6
     a70:	49010108 	stmdbmi	r1, {r3, r8}
     a74:	00130113 	andseq	r0, r3, r3, lsl r1
     a78:	00210900 	eoreq	r0, r1, r0, lsl #18
     a7c:	0b2f1349 	bleq	bc57a8 <__bss_end__+0xbbb3e0>
     a80:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
     a84:	03193f01 	tsteq	r9, #1, 30
     a88:	3b0b3a0e 	blcc	2cf2c8 <__bss_end__+0x2c4f00>
     a8c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     a90:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     a94:	97184006 	ldrls	r4, [r8, -r6]
     a98:	13011942 	movwne	r1, #6466	; 0x1942
     a9c:	050b0000 	streq	r0, [fp, #-0]
     aa0:	3a0e0300 	bcc	3816a8 <__bss_end__+0x3772e0>
     aa4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     aa8:	00170213 	andseq	r0, r7, r3, lsl r2
     aac:	00340c00 	eorseq	r0, r4, r0, lsl #24
     ab0:	13490e03 	movtne	r0, #40451	; 0x9e03
     ab4:	18021934 	stmdane	r2, {r2, r4, r5, r8, fp, ip}
     ab8:	340d0000 	strcc	r0, [sp], #-0
     abc:	3a0e0300 	bcc	3816c4 <__bss_end__+0x3772fc>
     ac0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ac4:	00180213 	andseq	r0, r8, r3, lsl r2
     ac8:	00340e00 	eorseq	r0, r4, r0, lsl #28
     acc:	0b3a0e03 	bleq	e842e0 <__bss_end__+0xe79f18>
     ad0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ad4:	00001702 	andeq	r1, r0, r2, lsl #14
     ad8:	0182890f 	orreq	r8, r2, pc, lsl #18
     adc:	31011100 	mrscc	r1, (UNDEF: 17)
     ae0:	10000013 	andne	r0, r0, r3, lsl r0
     ae4:	01018289 	smlabbeq	r1, r9, r2, r8
     ae8:	13310111 	teqne	r1, #1073741828	; 0x40000004
     aec:	00001301 	andeq	r1, r0, r1, lsl #6
     af0:	01828a11 	orreq	r8, r2, r1, lsl sl
     af4:	91180200 	tstls	r8, r0, lsl #4
     af8:	00001842 	andeq	r1, r0, r2, asr #16
     afc:	01828912 	orreq	r8, r2, r2, lsl r9
     b00:	31011101 	tstcc	r1, r1, lsl #2
     b04:	13000013 	movwne	r0, #19
     b08:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     b0c:	0b3a0e03 	bleq	e84320 <__bss_end__+0xe79f58>
     b10:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     b14:	06120111 			; <UNDEFINED> instruction: 0x06120111
     b18:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     b1c:	00130119 	andseq	r0, r3, r9, lsl r1
     b20:	002e1400 	eoreq	r1, lr, r0, lsl #8
     b24:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     b28:	0b3b0b3a 	bleq	ec3818 <__bss_end__+0xeb9450>
     b2c:	01111927 	tsteq	r1, r7, lsr #18
     b30:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b34:	00194297 	mulseq	r9, r7, r2
     b38:	002e1500 	eoreq	r1, lr, r0, lsl #10
     b3c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     b40:	0b3b0b3a 	bleq	ec3830 <__bss_end__+0xeb9468>
     b44:	13491927 	movtne	r1, #39207	; 0x9927
     b48:	06120111 			; <UNDEFINED> instruction: 0x06120111
     b4c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     b50:	16000019 			; <UNDEFINED> instruction: 0x16000019
     b54:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     b58:	0b3b0b3a 	bleq	ec3848 <__bss_end__+0xeb9480>
     b5c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     b60:	0000193c 	andeq	r1, r0, ip, lsr r9
     b64:	3f002e17 	svccc	0x00002e17
     b68:	3a0e0319 	bcc	3817d4 <__bss_end__+0x37740c>
     b6c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     b70:	00193c19 	andseq	r3, r9, r9, lsl ip
     b74:	012e1800 	teqeq	lr, r0, lsl #16
     b78:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     b7c:	0b3b0b3a 	bleq	ec386c <__bss_end__+0xeb94a4>
     b80:	13491927 	movtne	r1, #39207	; 0x9927
     b84:	1301193c 	movwne	r1, #6460	; 0x193c
     b88:	05190000 	ldreq	r0, [r9, #-0]
     b8c:	00134900 	andseq	r4, r3, r0, lsl #18
     b90:	00181a00 	andseq	r1, r8, r0, lsl #20
     b94:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
     b98:	03193f01 	tsteq	r9, #1, 30
     b9c:	3b0b3a0e 	blcc	2cf3dc <__bss_end__+0x2c5014>
     ba0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     ba4:	00193c13 	andseq	r3, r9, r3, lsl ip
     ba8:	11010000 	mrsne	r0, (UNDEF: 1)
     bac:	130e2501 	movwne	r2, #58625	; 0xe501
     bb0:	1b0e030b 	blne	3817e4 <__bss_end__+0x37741c>
     bb4:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     bb8:	00171006 	andseq	r1, r7, r6
     bbc:	00240200 	eoreq	r0, r4, r0, lsl #4
     bc0:	0b3e0b0b 	bleq	f837f4 <__bss_end__+0xf7942c>
     bc4:	00000803 	andeq	r0, r0, r3, lsl #16
     bc8:	0b002403 	bleq	9bdc <__FUNCTION__.4218+0x194>
     bcc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     bd0:	0400000e 	streq	r0, [r0], #-14
     bd4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     bd8:	0b3b0b3a 	bleq	ec38c8 <__bss_end__+0xeb9500>
     bdc:	00001349 	andeq	r1, r0, r9, asr #6
     be0:	0b000f05 	bleq	47fc <_start-0x3804>
     be4:	0600000b 	streq	r0, [r0], -fp
     be8:	0b0b000f 	bleq	2c0c2c <__bss_end__+0x2b6864>
     bec:	00001349 	andeq	r1, r0, r9, asr #6
     bf0:	49002607 	stmdbmi	r0, {r0, r1, r2, r9, sl, sp}
     bf4:	08000013 	stmdaeq	r0, {r0, r1, r4}
     bf8:	0b0b0113 	bleq	2c104c <__bss_end__+0x2b6c84>
     bfc:	0b3b0b3a 	bleq	ec38ec <__bss_end__+0xeb9524>
     c00:	00001301 	andeq	r1, r0, r1, lsl #6
     c04:	03000d09 	movweq	r0, #3337	; 0xd09
     c08:	3b0b3a08 	blcc	2cf430 <__bss_end__+0x2c5068>
     c0c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     c10:	0a00000b 	beq	c44 <_start-0x73bc>
     c14:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     c18:	0b3b0b3a 	bleq	ec3908 <__bss_end__+0xeb9540>
     c1c:	0b381349 	bleq	e05948 <__bss_end__+0xdfb580>
     c20:	130b0000 	movwne	r0, #45056	; 0xb000
     c24:	0b0e0301 	bleq	381830 <__bss_end__+0x377468>
     c28:	3b0b3a0b 	blcc	2cf45c <__bss_end__+0x2c5094>
     c2c:	0013010b 	andseq	r0, r3, fp, lsl #2
     c30:	000d0c00 	andeq	r0, sp, r0, lsl #24
     c34:	13490e03 	movtne	r0, #40451	; 0x9e03
     c38:	19340b38 	ldmdbne	r4!, {r3, r4, r5, r8, r9, fp}
     c3c:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
     c40:	3a0e0301 	bcc	38184c <__bss_end__+0x377484>
     c44:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     c48:	010b2019 	tsteq	fp, r9, lsl r0
     c4c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     c50:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     c54:	0b3b0b3a 	bleq	ec3944 <__bss_end__+0xeb957c>
     c58:	00001349 	andeq	r1, r0, r9, asr #6
     c5c:	0300050f 	movweq	r0, #1295	; 0x50f
     c60:	3b0b3a08 	blcc	2cf488 <__bss_end__+0x2c50c0>
     c64:	0013490b 	andseq	r4, r3, fp, lsl #18
     c68:	010b1000 	mrseq	r1, (UNDEF: 11)
     c6c:	34110000 	ldrcc	r0, [r1], #-0
     c70:	3a0e0300 	bcc	381878 <__bss_end__+0x3774b0>
     c74:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c78:	12000013 	andne	r0, r0, #19
     c7c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     c80:	0b3a0e03 	bleq	e84494 <__bss_end__+0xe7a0cc>
     c84:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     c88:	06120111 			; <UNDEFINED> instruction: 0x06120111
     c8c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     c90:	00130119 	andseq	r0, r3, r9, lsl r1
     c94:	00051300 	andeq	r1, r5, r0, lsl #6
     c98:	0b3a0e03 	bleq	e844ac <__bss_end__+0xe7a0e4>
     c9c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ca0:	00001702 	andeq	r1, r0, r2, lsl #14
     ca4:	03000514 	movweq	r0, #1300	; 0x514
     ca8:	3b0b3a08 	blcc	2cf4d0 <__bss_end__+0x2c5108>
     cac:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     cb0:	15000017 	strne	r0, [r0, #-23]
     cb4:	08030034 	stmdaeq	r3, {r2, r4, r5}
     cb8:	0b3b0b3a 	bleq	ec39a8 <__bss_end__+0xeb95e0>
     cbc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     cc0:	34160000 	ldrcc	r0, [r6], #-0
     cc4:	3a080300 	bcc	2018cc <__bss_end__+0x1f7504>
     cc8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ccc:	00170213 	andseq	r0, r7, r3, lsl r2
     cd0:	010b1700 	tsteq	fp, r0, lsl #14
     cd4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     cd8:	00001301 	andeq	r1, r0, r1, lsl #6
     cdc:	03003418 	movweq	r3, #1048	; 0x418
     ce0:	3b0b3a0e 	blcc	2cf520 <__bss_end__+0x2c5158>
     ce4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     ce8:	19000018 	stmdbne	r0, {r3, r4}
     cec:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     cf0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     cf4:	0b590b58 	bleq	1643a5c <__bss_end__+0x1639694>
     cf8:	00001301 	andeq	r1, r0, r1, lsl #6
     cfc:	3100051a 	tstcc	r0, sl, lsl r5
     d00:	00170213 	andseq	r0, r7, r3, lsl r2
     d04:	00051b00 	andeq	r1, r5, r0, lsl #22
     d08:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
     d0c:	051c0000 	ldreq	r0, [ip, #-0]
     d10:	1c133100 	ldfnes	f3, [r3], {-0}
     d14:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
     d18:	0111010b 	tsteq	r1, fp, lsl #2
     d1c:	00000612 	andeq	r0, r0, r2, lsl r6
     d20:	3100341e 	tstcc	r0, lr, lsl r4
     d24:	00170213 	andseq	r0, r7, r3, lsl r2
     d28:	82891f00 	addhi	r1, r9, #0, 30
     d2c:	01110101 	tsteq	r1, r1, lsl #2
     d30:	00001331 	andeq	r1, r0, r1, lsr r3
     d34:	01828a20 	orreq	r8, r2, r0, lsr #20
     d38:	91180200 	tstls	r8, r0, lsl #4
     d3c:	00001842 	andeq	r1, r0, r2, asr #16
     d40:	31011d21 	tstcc	r1, r1, lsr #26
     d44:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     d48:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     d4c:	2200000b 	andcs	r0, r0, #11
     d50:	0e03012e 	adfeqsp	f0, f3, #0.5
     d54:	0b3b0b3a 	bleq	ec3a44 <__bss_end__+0xeb967c>
     d58:	13491927 	movtne	r1, #39207	; 0x9927
     d5c:	13010b20 	movwne	r0, #6944	; 0x1b20
     d60:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
     d64:	03193f01 	tsteq	r9, #1, 30
     d68:	3b0b3a0e 	blcc	2cf5a8 <__bss_end__+0x2c51e0>
     d6c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     d70:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     d74:	97184006 	ldrls	r4, [r8, -r6]
     d78:	13011942 	movwne	r1, #6466	; 0x1942
     d7c:	89240000 	stmdbhi	r4!, {}	; <UNPREDICTABLE>
     d80:	11000182 	smlabbne	r0, r2, r1, r0
     d84:	00133101 	andseq	r3, r3, r1, lsl #2
     d88:	82892500 	addhi	r2, r9, #0, 10
     d8c:	01110101 	tsteq	r1, r1, lsl #2
     d90:	13011331 	movwne	r1, #4913	; 0x1331
     d94:	34260000 	strtcc	r0, [r6], #-0
     d98:	3a0e0300 	bcc	3819a0 <__bss_end__+0x3775d8>
     d9c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     da0:	00170213 	andseq	r0, r7, r3, lsl r2
     da4:	00052700 	andeq	r2, r5, r0, lsl #14
     da8:	00001331 	andeq	r1, r0, r1, lsr r3
     dac:	03000528 	movweq	r0, #1320	; 0x528
     db0:	3b0b3a0e 	blcc	2cf5f0 <__bss_end__+0x2c5228>
     db4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     db8:	29000018 	stmdbcs	r0, {r3, r4}
     dbc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     dc0:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
     dc4:	00001802 	andeq	r1, r0, r2, lsl #16
     dc8:	4901012a 	stmdbmi	r1, {r1, r3, r5, r8}
     dcc:	00130113 	andseq	r0, r3, r3, lsl r1
     dd0:	00212b00 	eoreq	r2, r1, r0, lsl #22
     dd4:	0b2f1349 	bleq	bc5b00 <__bss_end__+0xbbb738>
     dd8:	342c0000 	strtcc	r0, [ip], #-0
     ddc:	3a080300 	bcc	2019e4 <__bss_end__+0x1f761c>
     de0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     de4:	00061c13 	andeq	r1, r6, r3, lsl ip
     de8:	00342d00 	eorseq	r2, r4, r0, lsl #26
     dec:	0b3a0803 	bleq	e82e00 <__bss_end__+0xe78a38>
     df0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     df4:	00000b1c 	andeq	r0, r0, ip, lsl fp
     df8:	0300052e 	movweq	r0, #1326	; 0x52e
     dfc:	3b0b3a08 	blcc	2cf624 <__bss_end__+0x2c525c>
     e00:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     e04:	2f000018 	svccs	0x00000018
     e08:	00000018 	andeq	r0, r0, r8, lsl r0
     e0c:	49002130 	stmdbmi	r0, {r4, r5, r8, sp}
     e10:	00052f13 	andeq	r2, r5, r3, lsl pc
     e14:	012e3100 	teqeq	lr, r0, lsl #2
     e18:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     e1c:	0b3b0b3a 	bleq	ec3b0c <__bss_end__+0xeb9744>
     e20:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     e24:	00001301 	andeq	r1, r0, r1, lsl #6
     e28:	49000532 	stmdbmi	r0, {r1, r4, r5, r8, sl}
     e2c:	33000013 	movwcc	r0, #19
     e30:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     e34:	0b3a0e03 	bleq	e84648 <__bss_end__+0xe7a280>
     e38:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     e3c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     e40:	2e340000 	cdpcs	0, 3, cr0, cr4, cr0, {0}
     e44:	03193f01 	tsteq	r9, #1, 30
     e48:	3b0b3a0e 	blcc	2cf688 <__bss_end__+0x2c52c0>
     e4c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     e50:	01193c13 	tsteq	r9, r3, lsl ip
     e54:	35000013 	strcc	r0, [r0, #-19]
     e58:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     e5c:	0b3a0e03 	bleq	e84670 <__bss_end__+0xe7a2a8>
     e60:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     e64:	0000193c 	andeq	r1, r0, ip, lsr r9
     e68:	3f012e36 	svccc	0x00012e36
     e6c:	3a0e0319 	bcc	381ad8 <__bss_end__+0x377710>
     e70:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     e74:	3c134919 	ldccc	9, cr4, [r3], {25}
     e78:	00000019 	andeq	r0, r0, r9, lsl r0
     e7c:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     e80:	030b130e 	movweq	r1, #45838	; 0xb30e
     e84:	110e1b0e 	tstne	lr, lr, lsl #22
     e88:	10061201 	andne	r1, r6, r1, lsl #4
     e8c:	02000017 	andeq	r0, r0, #23
     e90:	0b0b0024 	bleq	2c0f28 <__bss_end__+0x2b6b60>
     e94:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     e98:	24030000 	strcs	r0, [r3], #-0
     e9c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     ea0:	000e030b 	andeq	r0, lr, fp, lsl #6
     ea4:	01040400 	tsteq	r4, r0, lsl #8
     ea8:	0b3a0b0b 	bleq	e83adc <__bss_end__+0xe79714>
     eac:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     eb0:	28050000 	stmdacs	r5, {}	; <UNPREDICTABLE>
     eb4:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     eb8:	0600000d 	streq	r0, [r0], -sp
     ebc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     ec0:	0b3b0b3a 	bleq	ec3bb0 <__bss_end__+0xeb97e8>
     ec4:	00001349 	andeq	r1, r0, r9, asr #6
     ec8:	3f012e07 	svccc	0x00012e07
     ecc:	3a0e0319 	bcc	381b38 <__bss_end__+0x377770>
     ed0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     ed4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     ed8:	97184006 	ldrls	r4, [r8, -r6]
     edc:	13011942 	movwne	r1, #6466	; 0x1942
     ee0:	89080000 	stmdbhi	r8, {}	; <UNPREDICTABLE>
     ee4:	11000182 	smlabbne	r0, r2, r1, r0
     ee8:	00133101 	andseq	r3, r3, r1, lsl #2
     eec:	82890900 	addhi	r0, r9, #0, 18
     ef0:	01110101 	tsteq	r1, r1, lsl #2
     ef4:	13011331 	movwne	r1, #4913	; 0x1331
     ef8:	8a0a0000 	bhi	280f00 <__bss_end__+0x276b38>
     efc:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     f00:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     f04:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
     f08:	03193f01 	tsteq	r9, #1, 30
     f0c:	3b0b3a0e 	blcc	2cf74c <__bss_end__+0x2c5384>
     f10:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     f14:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     f18:	97184006 	ldrls	r4, [r8, -r6]
     f1c:	13011942 	movwne	r1, #6466	; 0x1942
     f20:	050c0000 	streq	r0, [ip, #-0]
     f24:	3a080300 	bcc	201b2c <__bss_end__+0x1f7764>
     f28:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f2c:	00170213 	andseq	r0, r7, r3, lsl r2
     f30:	82890d00 	addhi	r0, r9, #0, 26
     f34:	01110101 	tsteq	r1, r1, lsl #2
     f38:	00001331 	andeq	r1, r0, r1, lsr r3
     f3c:	0300340e 	movweq	r3, #1038	; 0x40e
     f40:	3b0b3a0e 	blcc	2cf780 <__bss_end__+0x2c53b8>
     f44:	3f13490b 	svccc	0x0013490b
     f48:	00180219 	andseq	r0, r8, r9, lsl r2
     f4c:	000f0f00 	andeq	r0, pc, r0, lsl #30
     f50:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     f54:	35100000 	ldrcc	r0, [r0, #-0]
     f58:	00134900 	andseq	r4, r3, r0, lsl #18
     f5c:	002e1100 	eoreq	r1, lr, r0, lsl #2
     f60:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     f64:	0b3b0b3a 	bleq	ec3c54 <__bss_end__+0xeb988c>
     f68:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     f6c:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
     f70:	03193f01 	tsteq	r9, #1, 30
     f74:	3b0b3a0e 	blcc	2cf7b4 <__bss_end__+0x2c53ec>
     f78:	3c19270b 	ldccc	7, cr2, [r9], {11}
     f7c:	00130119 	andseq	r0, r3, r9, lsl r1
     f80:	00051300 	andeq	r1, r5, r0, lsl #6
     f84:	00001349 	andeq	r1, r0, r9, asr #6
     f88:	3f012e14 	svccc	0x00012e14
     f8c:	3a0e0319 	bcc	381bf8 <__bss_end__+0x377830>
     f90:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     f94:	3c134919 	ldccc	9, cr4, [r3], {25}
     f98:	00130119 	andseq	r0, r3, r9, lsl r1
     f9c:	00261500 	eoreq	r1, r6, r0, lsl #10
     fa0:	00001349 	andeq	r1, r0, r9, asr #6
     fa4:	00003516 	andeq	r3, r0, r6, lsl r5
     fa8:	11010000 	mrsne	r0, (UNDEF: 1)
     fac:	130e2501 	movwne	r2, #58625	; 0xe501
     fb0:	1b0e030b 	blne	381be4 <__bss_end__+0x37781c>
     fb4:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     fb8:	00171006 	andseq	r1, r7, r6
     fbc:	00240200 	eoreq	r0, r4, r0, lsl #4
     fc0:	0b3e0b0b 	bleq	f83bf4 <__bss_end__+0xf7982c>
     fc4:	00000e03 	andeq	r0, r0, r3, lsl #28
     fc8:	0b002403 	bleq	9fdc <__bss_start__+0x28>
     fcc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     fd0:	04000008 	streq	r0, [r0], #-8
     fd4:	0b0b0104 	bleq	2c13ec <__bss_end__+0x2b7024>
     fd8:	0b3b0b3a 	bleq	ec3cc8 <__bss_end__+0xeb9900>
     fdc:	00001301 	andeq	r1, r0, r1, lsl #6
     fe0:	03002805 	movweq	r2, #2053	; 0x805
     fe4:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     fe8:	00160600 	andseq	r0, r6, r0, lsl #12
     fec:	0b3a0e03 	bleq	e84800 <__bss_end__+0xe7a438>
     ff0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ff4:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
     ff8:	03193f01 	tsteq	r9, #1, 30
     ffc:	3b0b3a0e 	blcc	2cf83c <__bss_end__+0x2c5474>
    1000:	1119270b 	tstne	r9, fp, lsl #14
    1004:	40061201 	andmi	r1, r6, r1, lsl #4
    1008:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    100c:	00001301 	andeq	r1, r0, r1, lsl #6
    1010:	03000508 	movweq	r0, #1288	; 0x508
    1014:	3b0b3a08 	blcc	2cf83c <__bss_end__+0x2c5474>
    1018:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    101c:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    1020:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1024:	0b3b0b3a 	bleq	ec3d14 <__bss_end__+0xeb994c>
    1028:	17021349 	strne	r1, [r2, -r9, asr #6]
    102c:	890a0000 	stmdbhi	sl, {}	; <UNPREDICTABLE>
    1030:	11010182 	smlabbne	r1, r2, r1, r0
    1034:	01133101 	tsteq	r3, r1, lsl #2
    1038:	0b000013 	bleq	108c <_start-0x6f74>
    103c:	0001828a 	andeq	r8, r1, sl, lsl #5
    1040:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    1044:	0c000018 	stceq	0, cr0, [r0], {24}
    1048:	01018289 	smlabbeq	r1, r9, r2, r8
    104c:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1050:	0f0d0000 	svceq	0x000d0000
    1054:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1058:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    105c:	13490035 	movtne	r0, #36917	; 0x9035
    1060:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    1064:	03193f01 	tsteq	r9, #1, 30
    1068:	3b0b3a0e 	blcc	2cf8a8 <__bss_end__+0x2c54e0>
    106c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1070:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1074:	97184006 	ldrls	r4, [r8, -r6]
    1078:	13011942 	movwne	r1, #6466	; 0x1942
    107c:	34100000 	ldrcc	r0, [r0], #-0
    1080:	3a080300 	bcc	201c88 <__bss_end__+0x1f78c0>
    1084:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1088:	00170213 	andseq	r0, r7, r3, lsl r2
    108c:	82891100 	addhi	r1, r9, #0, 2
    1090:	01110001 	tsteq	r1, r1
    1094:	00001331 	andeq	r1, r0, r1, lsr r3
    1098:	03000512 	movweq	r0, #1298	; 0x512
    109c:	3b0b3a0e 	blcc	2cf8dc <__bss_end__+0x2c5514>
    10a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    10a4:	13000017 	movwne	r0, #23
    10a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    10ac:	0b3a0e03 	bleq	e848c0 <__bss_end__+0xe7a4f8>
    10b0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    10b4:	01111349 	tsteq	r1, r9, asr #6
    10b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    10bc:	01194297 			; <UNDEFINED> instruction: 0x01194297
    10c0:	14000013 	strne	r0, [r0], #-19
    10c4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    10c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    10cc:	17021349 	strne	r1, [r2, -r9, asr #6]
    10d0:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
    10d4:	03193f01 	tsteq	r9, #1, 30
    10d8:	3b0b3a0e 	blcc	2cf918 <__bss_end__+0x2c5550>
    10dc:	11192705 	tstne	r9, r5, lsl #14
    10e0:	40061201 	andmi	r1, r6, r1, lsl #4
    10e4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    10e8:	00001301 	andeq	r1, r0, r1, lsl #6
    10ec:	03000516 	movweq	r0, #1302	; 0x516
    10f0:	3b0b3a08 	blcc	2cf918 <__bss_end__+0x2c5550>
    10f4:	02134905 	andseq	r4, r3, #81920	; 0x14000
    10f8:	17000017 	smladne	r0, r7, r0, r0
    10fc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1100:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1104:	17021349 	strne	r1, [r2, -r9, asr #6]
    1108:	0b180000 	bleq	601110 <__bss_end__+0x5f6d48>
    110c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    1110:	00130106 	andseq	r0, r3, r6, lsl #2
    1114:	00341900 	eorseq	r1, r4, r0, lsl #18
    1118:	0b3a0e03 	bleq	e8492c <__bss_end__+0xe7a564>
    111c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1120:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1124:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
    1128:	03193f01 	tsteq	r9, #1, 30
    112c:	3b0b3a0e 	blcc	2cf96c <__bss_end__+0x2c55a4>
    1130:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1134:	01193c13 	tsteq	r9, r3, lsl ip
    1138:	1b000013 	blne	118c <_start-0x6e74>
    113c:	13490005 	movtne	r0, #36869	; 0x9005
    1140:	261c0000 	ldrcs	r0, [ip], -r0
    1144:	00134900 	andseq	r4, r3, r0, lsl #18
    1148:	00351d00 	eorseq	r1, r5, r0, lsl #26
    114c:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
    1150:	03193f01 	tsteq	r9, #1, 30
    1154:	3b0b3a0e 	blcc	2cf994 <__bss_end__+0x2c55cc>
    1158:	3c19270b 	ldccc	7, cr2, [r9], {11}
    115c:	00130119 	andseq	r0, r3, r9, lsl r1
    1160:	002e1f00 	eoreq	r1, lr, r0, lsl #30
    1164:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1168:	0b3b0b3a 	bleq	ec3e58 <__bss_end__+0xeb9a90>
    116c:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    1170:	01000000 	mrseq	r0, (UNDEF: 0)
    1174:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1178:	0e030b13 	vmoveq.32	d3[0], r0
    117c:	01110e1b 	tsteq	r1, fp, lsl lr
    1180:	17100612 			; <UNDEFINED> instruction: 0x17100612
    1184:	24020000 	strcs	r0, [r2], #-0
    1188:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    118c:	000e030b 	andeq	r0, lr, fp, lsl #6
    1190:	00240300 	eoreq	r0, r4, r0, lsl #6
    1194:	0b3e0b0b 	bleq	f83dc8 <__bss_end__+0xf79a00>
    1198:	00000803 	andeq	r0, r0, r3, lsl #16
    119c:	0b000f04 	bleq	4db4 <_start-0x324c>
    11a0:	0500000b 	streq	r0, [r0, #-11]
    11a4:	0b0b000f 	bleq	2c11e8 <__bss_end__+0x2b6e20>
    11a8:	00001349 	andeq	r1, r0, r9, asr #6
    11ac:	03001606 	movweq	r1, #1542	; 0x606
    11b0:	3b0b3a0e 	blcc	2cf9f0 <__bss_end__+0x2c5628>
    11b4:	0013490b 	andseq	r4, r3, fp, lsl #18
    11b8:	012e0700 	teqeq	lr, r0, lsl #14
    11bc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    11c0:	0b3b0b3a 	bleq	ec3eb0 <__bss_end__+0xeb9ae8>
    11c4:	13491927 	movtne	r1, #39207	; 0x9927
    11c8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    11cc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    11d0:	08000019 	stmdaeq	r0, {r0, r3, r4}
    11d4:	08030005 	stmdaeq	r3, {r0, r2}
    11d8:	0b3b0b3a 	bleq	ec3ec8 <__bss_end__+0xeb9b00>
    11dc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    11e0:	05090000 	streq	r0, [r9, #-0]
    11e4:	3a080300 	bcc	201dec <__bss_end__+0x1f7a24>
    11e8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    11ec:	00170213 	andseq	r0, r7, r3, lsl r2
    11f0:	00340a00 	eorseq	r0, r4, r0, lsl #20
    11f4:	0b3a0803 	bleq	e83208 <__bss_end__+0xe78e40>
    11f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    11fc:	00001702 	andeq	r1, r0, r2, lsl #14
    1200:	0300340b 	movweq	r3, #1035	; 0x40b
    1204:	3b0b3a08 	blcc	2cfa2c <__bss_end__+0x2c5664>
    1208:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    120c:	00000018 	andeq	r0, r0, r8, lsl r0
    1210:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    1214:	030b130e 	movweq	r1, #45838	; 0xb30e
    1218:	110e1b0e 	tstne	lr, lr, lsl #22
    121c:	10061201 	andne	r1, r6, r1, lsl #4
    1220:	02000017 	andeq	r0, r0, #23
    1224:	0b0b0024 	bleq	2c12bc <__bss_end__+0x2b6ef4>
    1228:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    122c:	16030000 	strne	r0, [r3], -r0
    1230:	3a0e0300 	bcc	381e38 <__bss_end__+0x377a70>
    1234:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1238:	04000013 	streq	r0, [r0], #-19
    123c:	0b0b0024 	bleq	2c12d4 <__bss_end__+0x2b6f0c>
    1240:	0e030b3e 	vmoveq.16	d3[0], r0
    1244:	0f050000 	svceq	0x00050000
    1248:	000b0b00 	andeq	r0, fp, r0, lsl #22
    124c:	01130600 	tsteq	r3, r0, lsl #12
    1250:	0b3a0b0b 	bleq	e83e84 <__bss_end__+0xe79abc>
    1254:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1258:	0d070000 	stceq	0, cr0, [r7, #-0]
    125c:	3a080300 	bcc	201e64 <__bss_end__+0x1f7a9c>
    1260:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1264:	000b3813 	andeq	r3, fp, r3, lsl r8
    1268:	000d0800 	andeq	r0, sp, r0, lsl #16
    126c:	0b3a0e03 	bleq	e84a80 <__bss_end__+0xe7a6b8>
    1270:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1274:	00000b38 	andeq	r0, r0, r8, lsr fp
    1278:	0b010409 	bleq	422a4 <__bss_end__+0x37edc>
    127c:	3b0b3a0b 	blcc	2cfab0 <__bss_end__+0x2c56e8>
    1280:	0013010b 	andseq	r0, r3, fp, lsl #2
    1284:	00280a00 	eoreq	r0, r8, r0, lsl #20
    1288:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    128c:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
    1290:	03193f01 	tsteq	r9, #1, 30
    1294:	3b0b3a0e 	blcc	2cfad4 <__bss_end__+0x2c570c>
    1298:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    129c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    12a0:	97184006 	ldrls	r4, [r8, -r6]
    12a4:	13011942 	movwne	r1, #6466	; 0x1942
    12a8:	340c0000 	strcc	r0, [ip], #-0
    12ac:	3a080300 	bcc	201eb4 <__bss_end__+0x1f7aec>
    12b0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    12b4:	00061c13 	andeq	r1, r6, r3, lsl ip
    12b8:	82890d00 	addhi	r0, r9, #0, 26
    12bc:	01110101 	tsteq	r1, r1, lsl #2
    12c0:	00001331 	andeq	r1, r0, r1, lsr r3
    12c4:	01828a0e 	orreq	r8, r2, lr, lsl #20
    12c8:	91180200 	tstls	r8, r0, lsl #4
    12cc:	00001842 	andeq	r1, r0, r2, asr #16
    12d0:	0b000f0f 	bleq	4f14 <_start-0x30ec>
    12d4:	0013490b 	andseq	r4, r3, fp, lsl #18
    12d8:	012e1000 	teqeq	lr, r0
    12dc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    12e0:	0b3b0b3a 	bleq	ec3fd0 <__bss_end__+0xeb9c08>
    12e4:	13491927 	movtne	r1, #39207	; 0x9927
    12e8:	0000193c 	andeq	r1, r0, ip, lsr r9
    12ec:	49000511 	stmdbmi	r0, {r0, r4, r8, sl}
    12f0:	00000013 	andeq	r0, r0, r3, lsl r0

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	0000001c 	andeq	r0, r0, ip, lsl r0
       4:	00000020 	andeq	r0, r0, r0, lsr #32
       8:	20500001 	subscs	r0, r0, r1
       c:	7c000000 	stcvc	0, cr0, [r0], {-0}
      10:	01000001 	tsteq	r0, r1
      14:	00005500 	andeq	r5, r0, r0, lsl #10
      18:	00000000 	andeq	r0, r0, r0
      1c:	00400000 	subeq	r0, r0, r0
      20:	00480000 	subeq	r0, r8, r0
      24:	00020000 	andeq	r0, r2, r0
      28:	00489f30 	subeq	r9, r8, r0, lsr pc
      2c:	00840000 	addeq	r0, r4, r0
      30:	00010000 	andeq	r0, r1, r0
      34:	00000054 	andeq	r0, r0, r4, asr r0
      38:	00000000 	andeq	r0, r0, r0
      3c:	00008400 	andeq	r8, r0, r0, lsl #8
      40:	00009000 	andeq	r9, r0, r0
      44:	50000100 	andpl	r0, r0, r0, lsl #2
      48:	00000090 	muleq	r0, r0, r0
      4c:	0000017c 	andeq	r0, r0, ip, ror r1
      50:	00540001 	subseq	r0, r4, r1
      54:	00000000 	andeq	r0, r0, r0
      58:	9c000000 	stcls	0, cr0, [r0], {-0}
      5c:	a0000000 	andge	r0, r0, r0
      60:	01000000 	mrseq	r0, (UNDEF: 0)
      64:	00a05000 	adceq	r5, r0, r0
      68:	017c0000 	cmneq	ip, r0
      6c:	00010000 	andeq	r0, r1, r0
      70:	00000056 	andeq	r0, r0, r6, asr r0
      74:	00000000 	andeq	r0, r0, r0
      78:	00002c00 	andeq	r2, r0, r0, lsl #24
      7c:	00003800 	andeq	r3, r0, r0, lsl #16
      80:	50000100 	andpl	r0, r0, r0, lsl #2
      84:	00000038 	andeq	r0, r0, r8, lsr r0
      88:	00000048 	andeq	r0, r0, r8, asr #32
      8c:	48550001 	ldmdami	r5, {r0}^
      90:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
      94:	01000000 	mrseq	r0, (UNDEF: 0)
      98:	00005000 	andeq	r5, r0, r0
	...
      a4:	000b0000 	andeq	r0, fp, r0
      a8:	00010000 	andeq	r0, r1, r0
      ac:	00000b50 	andeq	r0, r0, r0, asr fp
      b0:	00001400 	andeq	r1, r0, r0, lsl #8
      b4:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
      c4:	00000010 	andeq	r0, r0, r0, lsl r0
      c8:	10500001 	subsne	r0, r0, r1
      cc:	34000000 	strcc	r0, [r0], #-0
      d0:	01000000 	mrseq	r0, (UNDEF: 0)
      d4:	00005400 	andeq	r5, r0, r0, lsl #8
	...
      e0:	00040000 	andeq	r0, r4, r0
      e4:	00010000 	andeq	r0, r1, r0
      e8:	00000450 	andeq	r0, r0, r0, asr r4
      ec:	00000c00 	andeq	r0, r0, r0, lsl #24
      f0:	70000300 	andvc	r0, r0, r0, lsl #6
      f4:	000c9f30 	andeq	r9, ip, r0, lsr pc
      f8:	00140000 	andseq	r0, r4, r0
      fc:	00040000 	andeq	r0, r4, r0
     100:	9f5001f3 	svcls	0x005001f3
	...
     10c:	00000014 	andeq	r0, r0, r4, lsl r0
     110:	00000020 	andeq	r0, r0, r0, lsr #32
     114:	20500001 	subscs	r0, r0, r1
     118:	2c000000 	stccs	0, cr0, [r0], {-0}
     11c:	03000000 	movweq	r0, #0
     120:	9f017000 	svcls	0x00017000
     124:	0000002c 	andeq	r0, r0, ip, lsr #32
     128:	00000040 	andeq	r0, r0, r0, asr #32
     12c:	00500001 	subseq	r0, r0, r1
     130:	00000000 	andeq	r0, r0, r0
     134:	14000000 	strne	r0, [r0], #-0
     138:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     13c:	01000000 	mrseq	r0, (UNDEF: 0)
     140:	00185100 	andseq	r5, r8, r0, lsl #2
     144:	00400000 	subeq	r0, r0, r0
     148:	00040000 	andeq	r0, r4, r0
     14c:	9f5101f3 	svcls	0x005101f3
	...
     158:	00000040 	andeq	r0, r0, r0, asr #32
     15c:	00000060 	andeq	r0, r0, r0, rrx
     160:	60500001 	subsvs	r0, r0, r1
     164:	6c000000 	stcvs	0, cr0, [r0], {-0}
     168:	03000000 	movweq	r0, #0
     16c:	9f017100 	svcls	0x00017100
     170:	0000006c 	andeq	r0, r0, ip, rrx
     174:	00000074 	andeq	r0, r0, r4, ror r0
     178:	74510001 	ldrbvc	r0, [r1], #-1
     17c:	80000000 	andhi	r0, r0, r0
     180:	03000000 	movweq	r0, #0
     184:	9f017100 	svcls	0x00017100
	...
     190:	00000040 	andeq	r0, r0, r0, asr #32
     194:	00000050 	andeq	r0, r0, r0, asr r0
     198:	50510001 	subspl	r0, r1, r1
     19c:	80000000 	andhi	r0, r0, r0
     1a0:	04000000 	streq	r0, [r0], #-0
     1a4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     1a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     1ac:	00000000 	andeq	r0, r0, r0
     1b0:	00004000 	andeq	r4, r0, r0
     1b4:	00005800 	andeq	r5, r0, r0, lsl #16
     1b8:	52000100 	andpl	r0, r0, #0, 2
     1bc:	00000058 	andeq	r0, r0, r8, asr r0
     1c0:	00000064 	andeq	r0, r0, r4, rrx
     1c4:	64520001 	ldrbvs	r0, [r2], #-1
     1c8:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     1cc:	03000000 	movweq	r0, #0
     1d0:	9f017200 	svcls	0x00017200
     1d4:	00000068 	andeq	r0, r0, r8, rrx
     1d8:	00000080 	andeq	r0, r0, r0, lsl #1
     1dc:	00520001 	subseq	r0, r2, r1
     1e0:	00000000 	andeq	r0, r0, r0
     1e4:	40000000 	andmi	r0, r0, r0
     1e8:	54000000 	strpl	r0, [r0], #-0
     1ec:	01000000 	mrseq	r0, (UNDEF: 0)
     1f0:	00545300 	subseq	r5, r4, r0, lsl #6
     1f4:	00780000 	rsbseq	r0, r8, r0
     1f8:	00010000 	andeq	r0, r1, r0
     1fc:	00000053 	andeq	r0, r0, r3, asr r0
     200:	00000000 	andeq	r0, r0, r0
     204:	00004800 	andeq	r4, r0, r0, lsl #16
     208:	00006000 	andeq	r6, r0, r0
     20c:	5c000100 	stfpls	f0, [r0], {-0}
     210:	00000060 	andeq	r0, r0, r0, rrx
     214:	00000080 	andeq	r0, r0, r0, lsl #1
     218:	01f3000a 	mvnseq	r0, sl
     21c:	5301f352 	movwpl	pc, #4946	; 0x1352	; <UNPREDICTABLE>
     220:	9f01231c 	svcls	0x0001231c
	...
     22c:	00000080 	andeq	r0, r0, r0, lsl #1
     230:	000000a4 	andeq	r0, r0, r4, lsr #1
     234:	a4500001 	ldrbge	r0, [r0], #-1
     238:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     23c:	03000001 	movweq	r0, #1
     240:	9f027000 	svcls	0x00027000
     244:	00000118 	andeq	r0, r0, r8, lsl r1
     248:	0000021c 	andeq	r0, r0, ip, lsl r2
     24c:	01f30004 	mvnseq	r0, r4
     250:	00009f50 	andeq	r9, r0, r0, asr pc
     254:	00000000 	andeq	r0, r0, r0
     258:	00800000 	addeq	r0, r0, r0
     25c:	00f00000 	rscseq	r0, r0, r0
     260:	00010000 	andeq	r0, r1, r0
     264:	0000f051 	andeq	pc, r0, r1, asr r0	; <UNPREDICTABLE>
     268:	00016000 	andeq	r6, r1, r0
     26c:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     270:	00000160 	andeq	r0, r0, r0, ror #2
     274:	00000168 	andeq	r0, r0, r8, ror #2
     278:	68510001 	ldmdavs	r1, {r0}^
     27c:	88000001 	stmdahi	r0, {r0}
     280:	01000001 	tsteq	r0, r1
     284:	01885500 	orreq	r5, r8, r0, lsl #10
     288:	019c0000 	orrseq	r0, ip, r0
     28c:	00010000 	andeq	r0, r1, r0
     290:	00019c51 	andeq	r9, r1, r1, asr ip
     294:	0001bc00 	andeq	fp, r1, r0, lsl #24
     298:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     29c:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     2a0:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
     2a4:	bf510001 	svclt	0x00510001
     2a8:	00000001 	andeq	r0, r0, r1
     2ac:	01000002 	tsteq	r0, r2
     2b0:	02005500 	andeq	r5, r0, #0, 10
     2b4:	021c0000 	andseq	r0, ip, #0
     2b8:	00040000 	andeq	r0, r4, r0
     2bc:	9f5101f3 	svcls	0x005101f3
	...
     2c8:	00000080 	andeq	r0, r0, r0, lsl #1
     2cc:	00000094 	muleq	r0, r4, r0
     2d0:	94520001 	ldrbls	r0, [r2], #-1
     2d4:	00000000 	andeq	r0, r0, r0
     2d8:	01000002 	tsteq	r0, r2
     2dc:	02005400 	andeq	r5, r0, #0, 8
     2e0:	021c0000 	andseq	r0, ip, #0
     2e4:	00040000 	andeq	r0, r4, r0
     2e8:	9f5201f3 	svcls	0x005201f3
	...
     2f4:	00000080 	andeq	r0, r0, r0, lsl #1
     2f8:	00000100 	andeq	r0, r0, r0, lsl #2
     2fc:	04530001 	ldrbeq	r0, [r3], #-1
     300:	08000001 	stmdaeq	r0, {r0}
     304:	01000001 	tsteq	r0, r1
     308:	01605300 	cmneq	r0, r0, lsl #6
     30c:	01680000 	cmneq	r8, r0
     310:	00010000 	andeq	r0, r1, r0
     314:	00016853 	andeq	r6, r1, r3, asr r8
     318:	00018800 	andeq	r8, r1, r0, lsl #16
     31c:	f3000400 	vshl.u8	d0, d0, d0
     320:	889f5301 	ldmhi	pc, {r0, r8, r9, ip, lr}	; <UNPREDICTABLE>
     324:	90000001 	andls	r0, r0, r1
     328:	01000001 	tsteq	r0, r1
     32c:	01905300 	orrseq	r5, r0, r0, lsl #6
     330:	01940000 	orrseq	r0, r4, r0
     334:	00010000 	andeq	r0, r1, r0
     338:	0001945c 	andeq	r9, r1, ip, asr r4
     33c:	00019c00 	andeq	r9, r1, r0, lsl #24
     340:	53000100 	movwpl	r0, #256	; 0x100
     344:	0000019c 	muleq	r0, ip, r1
     348:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     34c:	01f30004 	mvnseq	r0, r4
     350:	01bc9f53 			; <UNDEFINED> instruction: 0x01bc9f53
     354:	01bf0000 			; <UNDEFINED> instruction: 0x01bf0000
     358:	00010000 	andeq	r0, r1, r0
     35c:	0001bf53 	andeq	fp, r1, r3, asr pc
     360:	0001d800 	andeq	sp, r1, r0, lsl #16
     364:	f3000400 	vshl.u8	d0, d0, d0
     368:	009f5301 	addseq	r5, pc, r1, lsl #6
     36c:	00000000 	andeq	r0, r0, r0
     370:	80000000 	andhi	r0, r0, r0
     374:	9c000000 	stcls	0, cr0, [r0], {-0}
     378:	02000000 	andeq	r0, r0, #0
     37c:	9c009100 	stflsd	f1, [r0], {-0}
     380:	bf000000 	svclt	0x00000000
     384:	01000001 	tsteq	r0, r1
     388:	01d85200 	bicseq	r5, r8, r0, lsl #4
     38c:	01e30000 	mvneq	r0, r0
     390:	00010000 	andeq	r0, r1, r0
     394:	00000052 	andeq	r0, r0, r2, asr r0
     398:	00000000 	andeq	r0, r0, r0
     39c:	00009c00 	andeq	r9, r0, r0, lsl #24
     3a0:	00011800 	andeq	r1, r1, r0, lsl #16
     3a4:	5d000100 	stfpls	f0, [r0, #-0]
     3a8:	00000118 	andeq	r0, r0, r8, lsl r1
     3ac:	0000011c 	andeq	r0, r0, ip, lsl r1
     3b0:	1c530001 	mrrcne	0, 0, r0, r3, cr1
     3b4:	20000001 	andcs	r0, r0, r1
     3b8:	01000001 	tsteq	r0, r1
     3bc:	01205100 	teqeq	r0, r0, lsl #2
     3c0:	01600000 	cmneq	r0, r0
     3c4:	00010000 	andeq	r0, r1, r0
     3c8:	00016053 	andeq	r6, r1, r3, asr r0
     3cc:	00016800 	andeq	r6, r1, r0, lsl #16
     3d0:	5d000100 	stfpls	f0, [r0, #-0]
     3d4:	00000168 	andeq	r0, r0, r8, ror #2
     3d8:	0000016c 	andeq	r0, r0, ip, ror #2
     3dc:	6c5e0001 	mrrcvs	0, 0, r0, lr, cr1
     3e0:	88000001 	stmdahi	r0, {r0}
     3e4:	01000001 	tsteq	r0, r1
     3e8:	01885300 	orreq	r5, r8, r0, lsl #6
     3ec:	01900000 	orrseq	r0, r0, r0
     3f0:	00040000 	andeq	r0, r4, r0
     3f4:	9f7fa191 	svcls	0x007fa191
     3f8:	00000190 	muleq	r0, r0, r1
     3fc:	00000194 	muleq	r0, r4, r1
     400:	94530001 	ldrbls	r0, [r3], #-1
     404:	9c000001 	stcls	0, cr0, [r0], {1}
     408:	01000001 	tsteq	r0, r1
     40c:	019c5d00 	orrseq	r5, ip, r0, lsl #26
     410:	01a00000 	moveq	r0, r0
     414:	00010000 	andeq	r0, r1, r0
     418:	0001a05e 	andeq	sl, r1, lr, asr r0
     41c:	0001bc00 	andeq	fp, r1, r0, lsl #24
     420:	53000100 	movwpl	r0, #256	; 0x100
     424:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     428:	000001d8 	ldrdeq	r0, [r0], -r8
     42c:	d85d0001 	ldmdale	sp, {r0}^
     430:	e3000001 	movw	r0, #1
     434:	01000001 	tsteq	r0, r1
     438:	00005300 	andeq	r5, r0, r0, lsl #6
     43c:	00000000 	andeq	r0, r0, r0
     440:	00a00000 	adceq	r0, r0, r0
     444:	00ec0000 	rsceq	r0, ip, r0
     448:	00010000 	andeq	r0, r1, r0
     44c:	0000ec5c 	andeq	lr, r0, ip, asr ip
     450:	00010000 	andeq	r0, r1, r0
     454:	53000100 	movwpl	r0, #256	; 0x100
     458:	00000100 	andeq	r0, r0, r0, lsl #2
     45c:	00000104 	andeq	r0, r0, r4, lsl #2
     460:	045c0001 	ldrbeq	r0, [ip], #-1
     464:	08000001 	stmdaeq	r0, {r0}
     468:	01000001 	tsteq	r0, r1
     46c:	01085300 	mrseq	r5, (UNDEF: 56)
     470:	01180000 	tsteq	r8, r0
     474:	00010000 	andeq	r0, r1, r0
     478:	0001185c 	andeq	r1, r1, ip, asr r8
     47c:	00011c00 	andeq	r1, r1, r0, lsl #24
     480:	50000100 	andpl	r0, r0, r0, lsl #2
     484:	0000011c 	andeq	r0, r0, ip, lsl r1
     488:	0000013c 	andeq	r0, r0, ip, lsr r1
     48c:	445c0001 	ldrbmi	r0, [ip], #-1
     490:	58000001 	stmdapl	r0, {r0}
     494:	01000001 	tsteq	r0, r1
     498:	01585000 	cmpeq	r8, r0
     49c:	01600000 	cmneq	r0, r0
     4a0:	00010000 	andeq	r0, r1, r0
     4a4:	0001605c 	andeq	r6, r1, ip, asr r0
     4a8:	00016800 	andeq	r6, r1, r0, lsl #16
     4ac:	53000100 	movwpl	r0, #256	; 0x100
     4b0:	00000168 	andeq	r0, r0, r8, ror #2
     4b4:	00000178 	andeq	r0, r0, r8, ror r1
     4b8:	785c0001 	ldmdavc	ip, {r0}^
     4bc:	80000001 	andhi	r0, r0, r1
     4c0:	05000001 	streq	r0, [r0, #-1]
     4c4:	34007c00 	strcc	r7, [r0], #-3072	; 0xc00
     4c8:	01809f25 	orreq	r9, r0, r5, lsr #30
     4cc:	01880000 	orreq	r0, r8, r0
     4d0:	00010000 	andeq	r0, r1, r0
     4d4:	0001885c 	andeq	r8, r1, ip, asr r8
     4d8:	00019000 	andeq	r9, r1, r0
     4dc:	53000100 	movwpl	r0, #256	; 0x100
     4e0:	00000190 	muleq	r0, r0, r1
     4e4:	00000194 	muleq	r0, r4, r1
     4e8:	945c0001 	ldrbls	r0, [ip], #-1
     4ec:	9c000001 	stcls	0, cr0, [r0], {1}
     4f0:	01000001 	tsteq	r0, r1
     4f4:	019c5300 	orrseq	r5, ip, r0, lsl #6
     4f8:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
     4fc:	00010000 	andeq	r0, r1, r0
     500:	0001ac5c 	andeq	sl, r1, ip, asr ip
     504:	0001b400 	andeq	fp, r1, r0, lsl #8
     508:	7c000500 	cfstr32vc	mvfx0, [r0], {-0}
     50c:	9f253100 	svcls	0x00253100
     510:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
     514:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     518:	bc5c0001 	mrrclt	0, 0, r0, ip, cr1
     51c:	bf000001 	svclt	0x00000001
     520:	01000001 	tsteq	r0, r1
     524:	01bf5300 			; <UNDEFINED> instruction: 0x01bf5300
     528:	01d80000 	bicseq	r0, r8, r0
     52c:	00040000 	andeq	r0, r4, r0
     530:	9f5301f3 	svcls	0x005301f3
     534:	000001d8 	ldrdeq	r0, [r0], -r8
     538:	000001e3 	andeq	r0, r0, r3, ror #3
     53c:	005c0001 	subseq	r0, ip, r1
     540:	00000000 	andeq	r0, r0, r0
     544:	ec000000 	stc	0, cr0, [r0], {-0}
     548:	fc000000 	stc2	0, cr0, [r0], {-0}
     54c:	02000000 	andeq	r0, r0, #0
     550:	fc9f3000 	ldc2	0, cr3, [pc], {0}
     554:	04000000 	streq	r0, [r0], #-0
     558:	02000001 	andeq	r0, r0, #1
     55c:	049f3100 	ldreq	r3, [pc], #256	; 564 <_start-0x7a9c>
     560:	08000001 	stmdaeq	r0, {r0}
     564:	02000001 	andeq	r0, r0, #1
     568:	009f3000 	addseq	r3, pc, r0
     56c:	00000000 	andeq	r0, r0, r0
     570:	1c000000 	stcne	0, cr0, [r0], {-0}
     574:	2b000002 	blcs	584 <_start-0x7a7c>
     578:	01000002 	tsteq	r0, r2
     57c:	022b5000 	eoreq	r5, fp, #0
     580:	02440000 	subeq	r0, r4, #0
     584:	00040000 	andeq	r0, r4, r0
     588:	9f5001f3 	svcls	0x005001f3
     58c:	00000244 	andeq	r0, r0, r4, asr #4
     590:	00000270 	andeq	r0, r0, r0, ror r2
     594:	00500001 	subseq	r0, r0, r1
     598:	00000000 	andeq	r0, r0, r0
     59c:	1c000000 	stcne	0, cr0, [r0], {-0}
     5a0:	2b000002 	blcs	5b0 <_start-0x7a50>
     5a4:	01000002 	tsteq	r0, r2
     5a8:	022b5100 	eoreq	r5, fp, #0, 2
     5ac:	02440000 	subeq	r0, r4, #0
     5b0:	00040000 	andeq	r0, r4, r0
     5b4:	9f5101f3 	svcls	0x005101f3
     5b8:	00000244 	andeq	r0, r0, r4, asr #4
     5bc:	00000270 	andeq	r0, r0, r0, ror r2
     5c0:	00510001 	subseq	r0, r1, r1
     5c4:	00000000 	andeq	r0, r0, r0
     5c8:	70000000 	andvc	r0, r0, r0
     5cc:	9c000002 	stcls	0, cr0, [r0], {2}
     5d0:	01000002 	tsteq	r0, r2
     5d4:	029c5000 	addseq	r5, ip, #0
     5d8:	04e40000 	strbteq	r0, [r4], #0
     5dc:	00010000 	andeq	r0, r1, r0
     5e0:	0004e45a 	andeq	lr, r4, sl, asr r4
     5e4:	0004f800 	andeq	pc, r4, r0, lsl #16
     5e8:	f3000400 	vshl.u8	d0, d0, d0
     5ec:	009f5001 	addseq	r5, pc, r1
     5f0:	00000000 	andeq	r0, r0, r0
     5f4:	70000000 	andvc	r0, r0, r0
     5f8:	84000002 	strhi	r0, [r0], #-2
     5fc:	01000002 	tsteq	r0, r2
     600:	02845100 	addeq	r5, r4, #0, 2
     604:	029c0000 	addseq	r0, ip, #0
     608:	00030000 	andeq	r0, r3, r0
     60c:	9c9f0171 	ldflss	f0, [pc], {113}	; 0x71
     610:	f8000002 			; <UNDEFINED> instruction: 0xf8000002
     614:	04000004 	streq	r0, [r0], #-4
     618:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     61c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     620:	00000000 	andeq	r0, r0, r0
     624:	00027000 	andeq	r7, r2, r0
     628:	0002a400 	andeq	sl, r2, r0, lsl #8
     62c:	52000100 	andpl	r0, r0, #0, 2
     630:	000002a4 	andeq	r0, r0, r4, lsr #5
     634:	000002cc 	andeq	r0, r0, ip, asr #5
     638:	cc520001 	mrrcgt	0, 0, r0, r2, cr1
     63c:	94000002 	strls	r0, [r0], #-2
     640:	01000004 	tsteq	r0, r4
     644:	04945600 	ldreq	r5, [r4], #1536	; 0x600
     648:	04f80000 	ldrbteq	r0, [r8], #0
     64c:	00010000 	andeq	r0, r1, r0
     650:	00000052 	andeq	r0, r0, r2, asr r0
     654:	00000000 	andeq	r0, r0, r0
     658:	00027000 	andeq	r7, r2, r0
     65c:	00028c00 	andeq	r8, r2, r0, lsl #24
     660:	53000100 	movwpl	r0, #256	; 0x100
	...
     66c:	00000280 	andeq	r0, r0, r0, lsl #5
     670:	0000029c 	muleq	r0, ip, r2
     674:	9c500001 	mrrcls	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     678:	a0000002 	andge	r0, r0, r2
     67c:	01000002 	tsteq	r0, r2
     680:	02a05400 	adceq	r5, r0, #0, 8
     684:	02ac0000 	adceq	r0, ip, #0
     688:	00030000 	andeq	r0, r3, r0
     68c:	ac9f0174 	ldfges	f0, [pc], {116}	; 0x74
     690:	b8000002 	stmdalt	r0, {r1}
     694:	01000002 	tsteq	r0, r2
     698:	02b85400 	adcseq	r5, r8, #0, 8
     69c:	02c40000 	sbceq	r0, r4, #0
     6a0:	00030000 	andeq	r0, r3, r0
     6a4:	c49f0174 	ldrgt	r0, [pc], #372	; 6ac <_start-0x7954>
     6a8:	98000002 	stmdals	r0, {r1}
     6ac:	01000004 	tsteq	r0, r4
     6b0:	04985400 	ldreq	r5, [r8], #1024	; 0x400
     6b4:	04a40000 	strteq	r0, [r4], #0
     6b8:	00030000 	andeq	r0, r3, r0
     6bc:	a49f0174 	ldrge	r0, [pc], #372	; 6c4 <_start-0x793c>
     6c0:	d0000004 	andle	r0, r0, r4
     6c4:	01000004 	tsteq	r0, r4
     6c8:	04d05400 	ldrbeq	r5, [r0], #1024	; 0x400
     6cc:	04dc0000 	ldrbeq	r0, [ip], #0
     6d0:	00010000 	andeq	r0, r1, r0
     6d4:	0004dc50 	andeq	sp, r4, r0, asr ip
     6d8:	0004e400 	andeq	lr, r4, r0, lsl #8
     6dc:	74000300 	strvc	r0, [r0], #-768	; 0x300
     6e0:	00009f01 	andeq	r9, r0, r1, lsl #30
     6e4:	00000000 	andeq	r0, r0, r0
     6e8:	02880000 	addeq	r0, r8, #0
     6ec:	04e40000 	strbteq	r0, [r4], #0
     6f0:	00010000 	andeq	r0, r1, r0
     6f4:	0004e458 	andeq	lr, r4, r8, asr r4
     6f8:	0004f800 	andeq	pc, r4, r0, lsl #16
     6fc:	f3000a00 	vpmax.u8	d0, d0, d0
     700:	01f35101 	mvnseq	r5, r1, lsl #2
     704:	1c312250 	lfmne	f2, 4, [r1], #-320	; 0xfffffec0
     708:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     70c:	00000000 	andeq	r0, r0, r0
     710:	0003cc00 	andeq	ip, r3, r0, lsl #24
     714:	0003d000 	andeq	sp, r3, r0
     718:	50000100 	andpl	r0, r0, r0, lsl #2
     71c:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     720:	000003f4 	strdeq	r0, [r0], -r4
     724:	14500001 	ldrbne	r0, [r0], #-1
     728:	18000004 	stmdane	r0, {r2}
     72c:	01000004 	tsteq	r0, r4
     730:	04385000 	ldrteq	r5, [r8], #-0
     734:	043c0000 	ldrteq	r0, [ip], #-0
     738:	00010000 	andeq	r0, r1, r0
     73c:	00044450 	andeq	r4, r4, r0, asr r4
     740:	00044800 	andeq	r4, r4, r0, lsl #16
     744:	50000100 	andpl	r0, r0, r0, lsl #2
     748:	00000468 	andeq	r0, r0, r8, ror #8
     74c:	0000046c 	andeq	r0, r0, ip, ror #8
     750:	90500001 	subsls	r0, r0, r1
     754:	b8000004 	stmdalt	r0, {r2}
     758:	01000004 	tsteq	r0, r4
     75c:	00005000 	andeq	r5, r0, r0
     760:	00000000 	andeq	r0, r0, r0
     764:	02cc0000 	sbceq	r0, ip, #0
     768:	02d40000 	sbcseq	r0, r4, #0
     76c:	00020000 	andeq	r0, r2, r0
     770:	02d49f30 	sbcseq	r9, r4, #48, 30	; 0xc0
     774:	02d80000 	sbcseq	r0, r8, #0
     778:	00010000 	andeq	r0, r1, r0
     77c:	0002e457 	andeq	lr, r2, r7, asr r4
     780:	0004b800 	andeq	fp, r4, r0, lsl #16
     784:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
     794:	0000000c 	andeq	r0, r0, ip
     798:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     79c:	20000000 	andcs	r0, r0, r0
     7a0:	01000000 	mrseq	r0, (UNDEF: 0)
     7a4:	00005400 	andeq	r5, r0, r0, lsl #8
     7a8:	00000000 	andeq	r0, r0, r0
     7ac:	00340000 	eorseq	r0, r4, r0
     7b0:	003c0000 	eorseq	r0, ip, r0
     7b4:	00030000 	andeq	r0, r3, r0
     7b8:	3c9f0473 	cfldrscc	mvf0, [pc], {115}	; 0x73
     7bc:	47000000 	strmi	r0, [r0, -r0]
     7c0:	01000000 	mrseq	r0, (UNDEF: 0)
     7c4:	00005300 	andeq	r5, r0, r0, lsl #6
     7c8:	00000000 	andeq	r0, r0, r0
     7cc:	00480000 	subeq	r0, r8, r0
     7d0:	00740000 	rsbseq	r0, r4, r0
     7d4:	00010000 	andeq	r0, r1, r0
     7d8:	00007450 	andeq	r7, r0, r0, asr r4
     7dc:	00008300 	andeq	r8, r0, r0, lsl #6
     7e0:	73000300 	movwvc	r0, #768	; 0x300
     7e4:	00009f78 	andeq	r9, r0, r8, ror pc
     7e8:	00000000 	andeq	r0, r0, r0
     7ec:	89100000 	ldmdbhi	r0, {}	; <UNPREDICTABLE>
     7f0:	89140000 	ldmdbhi	r4, {}	; <UNPREDICTABLE>
     7f4:	00020000 	andeq	r0, r2, r0
     7f8:	89149f30 	ldmdbhi	r4, {r4, r5, r8, r9, sl, fp, ip, pc}
     7fc:	89180000 	ldmdbhi	r8, {}	; <UNPREDICTABLE>
     800:	00010000 	andeq	r0, r1, r0
     804:	00000050 	andeq	r0, r0, r0, asr r0
     808:	00000000 	andeq	r0, r0, r0
     80c:	00892800 	addeq	r2, r9, r0, lsl #16
     810:	00892c00 	addeq	r2, r9, r0, lsl #24
     814:	30000200 	andcc	r0, r0, r0, lsl #4
     818:	00892c9f 	umulleq	r2, r9, pc, ip	; <UNPREDICTABLE>
     81c:	00893000 	addeq	r3, r9, r0
     820:	53000100 	movwpl	r0, #256	; 0x100
     824:	00008934 	andeq	r8, r0, r4, lsr r9
     828:	0000893c 	andeq	r8, r0, ip, lsr r9
     82c:	00530001 	subseq	r0, r3, r1
	...
     838:	04000000 	streq	r0, [r0], #-0
     83c:	01000000 	mrseq	r0, (UNDEF: 0)
     840:	00045000 	andeq	r5, r4, r0
     844:	000c0000 	andeq	r0, ip, r0
     848:	00010000 	andeq	r0, r1, r0
     84c:	00000c53 	andeq	r0, r0, r3, asr ip
     850:	00001000 	andeq	r1, r0, r0
     854:	50000100 	andpl	r0, r0, r0, lsl #2
     858:	00000010 	andeq	r0, r0, r0, lsl r0
     85c:	0000001c 	andeq	r0, r0, ip, lsl r0
     860:	00530001 	subseq	r0, r3, r1
     864:	00000000 	andeq	r0, r0, r0
     868:	3c000000 	stccc	0, cr0, [r0], {-0}
     86c:	47000000 	strmi	r0, [r0, -r0]
     870:	01000000 	mrseq	r0, (UNDEF: 0)
     874:	00475000 	subeq	r5, r7, r0
     878:	00600000 	rsbeq	r0, r0, r0
     87c:	00010000 	andeq	r0, r1, r0
     880:	00000055 	andeq	r0, r0, r5, asr r0
     884:	00000000 	andeq	r0, r0, r0
     888:	00005000 	andeq	r5, r0, r0
     88c:	00005400 	andeq	r5, r0, r0, lsl #8
     890:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     89c:	00000060 	andeq	r0, r0, r0, rrx
     8a0:	0000006c 	andeq	r0, r0, ip, rrx
     8a4:	6c500001 	mrrcvs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     8a8:	74000000 	strvc	r0, [r0], #-0
     8ac:	04000000 	streq	r0, [r0], #-0
     8b0:	5001f300 	andpl	pc, r1, r0, lsl #6
     8b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     8b8:	00000000 	andeq	r0, r0, r0
     8bc:	00007400 	andeq	r7, r0, r0, lsl #8
     8c0:	00008000 	andeq	r8, r0, r0
     8c4:	50000100 	andpl	r0, r0, r0, lsl #2
     8c8:	00000080 	andeq	r0, r0, r0, lsl #1
     8cc:	00000088 	andeq	r0, r0, r8, lsl #1
     8d0:	01f30004 	mvnseq	r0, r4
     8d4:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     8e0:	00170000 	andseq	r0, r7, r0
     8e4:	00010000 	andeq	r0, r1, r0
     8e8:	00001750 	andeq	r1, r0, r0, asr r7
     8ec:	00003000 	andeq	r3, r0, r0
     8f0:	f3000400 	vshl.u8	d0, d0, d0
     8f4:	309f5001 	addscc	r5, pc, r1
     8f8:	44000000 	strmi	r0, [r0], #-0
     8fc:	01000000 	mrseq	r0, (UNDEF: 0)
     900:	00445000 	subeq	r5, r4, r0
     904:	00740000 	rsbseq	r0, r4, r0
     908:	00040000 	andeq	r0, r4, r0
     90c:	9f5001f3 	svcls	0x005001f3
	...
     918:	00000040 	andeq	r0, r0, r0, asr #32
     91c:	00000058 	andeq	r0, r0, r8, asr r0
     920:	58560001 	ldmdapl	r6, {r0}^
     924:	74000000 	strvc	r0, [r0], #-0
     928:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     92c:	5001f300 	andpl	pc, r1, r0, lsl #6
     930:	f8090723 			; <UNDEFINED> instruction: 0xf8090723
     934:	00009f1a 	andeq	r9, r0, sl, lsl pc
     938:	00000000 	andeq	r0, r0, r0
     93c:	00740000 	rsbseq	r0, r4, r0
     940:	008b0000 	addeq	r0, fp, r0
     944:	00010000 	andeq	r0, r1, r0
     948:	00008b50 	andeq	r8, r0, r0, asr fp
     94c:	0000a400 	andeq	sl, r0, r0, lsl #8
     950:	f3000400 	vshl.u8	d0, d0, d0
     954:	a49f5001 	ldrge	r5, [pc], #1	; 95c <_start-0x76a4>
     958:	af000000 	svcge	0x00000000
     95c:	01000000 	mrseq	r0, (UNDEF: 0)
     960:	00af5000 	adceq	r5, pc, r0
     964:	00b40000 	adcseq	r0, r4, r0
     968:	00040000 	andeq	r0, r4, r0
     96c:	9f5001f3 	svcls	0x005001f3
     970:	000000b4 	strheq	r0, [r0], -r4
     974:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
     978:	bf500001 	svclt	0x00500001
     97c:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
     980:	04000000 	streq	r0, [r0], #-0
     984:	5001f300 	andpl	pc, r1, r0, lsl #6
     988:	0000d89f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
     98c:	0000f700 	andeq	pc, r0, r0, lsl #14
     990:	50000100 	andpl	r0, r0, r0, lsl #2
     994:	000000f7 	strdeq	r0, [r0], -r7
     998:	00000110 	andeq	r0, r0, r0, lsl r1
     99c:	01f30004 	mvnseq	r0, r4
     9a0:	00009f50 	andeq	r9, r0, r0, asr pc
     9a4:	00000000 	andeq	r0, r0, r0
     9a8:	00740000 	rsbseq	r0, r4, r0
     9ac:	008b0000 	addeq	r0, fp, r0
     9b0:	00010000 	andeq	r0, r1, r0
     9b4:	00008b51 	andeq	r8, r0, r1, asr fp
     9b8:	0000a400 	andeq	sl, r0, r0, lsl #8
     9bc:	f3000400 	vshl.u8	d0, d0, d0
     9c0:	a49f5101 	ldrge	r5, [pc], #257	; 9c8 <_start-0x7638>
     9c4:	af000000 	svcge	0x00000000
     9c8:	01000000 	mrseq	r0, (UNDEF: 0)
     9cc:	00af5100 	adceq	r5, pc, r0, lsl #2
     9d0:	00b40000 	adcseq	r0, r4, r0
     9d4:	00040000 	andeq	r0, r4, r0
     9d8:	9f5101f3 	svcls	0x005101f3
     9dc:	000000b4 	strheq	r0, [r0], -r4
     9e0:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
     9e4:	bf510001 	svclt	0x00510001
     9e8:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
     9ec:	04000000 	streq	r0, [r0], #-0
     9f0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     9f4:	0000d89f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
     9f8:	0000ec00 	andeq	lr, r0, r0, lsl #24
     9fc:	51000100 	mrspl	r0, (UNDEF: 16)
     a00:	000000ec 	andeq	r0, r0, ip, ror #1
     a04:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     a08:	00710004 	rsbseq	r0, r1, r4
     a0c:	00f09f1f 	rscseq	r9, r0, pc, lsl pc
     a10:	01100000 	tsteq	r0, r0
     a14:	00040000 	andeq	r0, r4, r0
     a18:	9f5101f3 	svcls	0x005101f3
	...
     a24:	000000e0 	andeq	r0, r0, r0, ror #1
     a28:	000000e4 	andeq	r0, r0, r4, ror #1
     a2c:	e4520001 	ldrb	r0, [r2], #-1
     a30:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
     a34:	05000000 	streq	r0, [r0, #-0]
     a38:	a3c40300 	bicge	r0, r4, #0, 6
     a3c:	00f00000 	rscseq	r0, r0, r0
     a40:	00f70000 	rscseq	r0, r7, r0
     a44:	00010000 	andeq	r0, r1, r0
     a48:	00000051 	andeq	r0, r0, r1, asr r0
     a4c:	00000000 	andeq	r0, r0, r0
     a50:	00019400 	andeq	r9, r1, r0, lsl #8
     a54:	0001ab00 	andeq	sl, r1, r0, lsl #22
     a58:	50000100 	andpl	r0, r0, r0, lsl #2
     a5c:	000001ab 	andeq	r0, r0, fp, lsr #3
     a60:	000001c4 	andeq	r0, r0, r4, asr #3
     a64:	01f30004 	mvnseq	r0, r4
     a68:	01c49f50 	biceq	r9, r4, r0, asr pc
     a6c:	01e80000 	mvneq	r0, r0
     a70:	00010000 	andeq	r0, r1, r0
     a74:	00000050 	andeq	r0, r0, r0, asr r0
	...
     a80:	00001800 	andeq	r1, r0, r0, lsl #16
     a84:	50000100 	andpl	r0, r0, r0, lsl #2
     a88:	00000018 	andeq	r0, r0, r8, lsl r0
     a8c:	00000154 	andeq	r0, r0, r4, asr r1
     a90:	01f30004 	mvnseq	r0, r4
     a94:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     aa0:	001c0000 	andseq	r0, ip, r0
     aa4:	00010000 	andeq	r0, r1, r0
     aa8:	00001c51 	andeq	r1, r0, r1, asr ip
     aac:	00015400 	andeq	r5, r1, r0, lsl #8
     ab0:	f3000400 	vshl.u8	d0, d0, d0
     ab4:	009f5101 	addseq	r5, pc, r1, lsl #2
     ab8:	00000000 	andeq	r0, r0, r0
     abc:	10000000 	andne	r0, r0, r0
     ac0:	34000000 	strcc	r0, [r0], #-0
     ac4:	01000001 	tsteq	r0, r1
     ac8:	00005500 	andeq	r5, r0, r0, lsl #10
     acc:	00000000 	andeq	r0, r0, r0
     ad0:	00100000 	andseq	r0, r0, r0
     ad4:	00340000 	eorseq	r0, r4, r0
     ad8:	00010000 	andeq	r0, r1, r0
     adc:	00003455 	andeq	r3, r0, r5, asr r4
     ae0:	00013400 	andeq	r3, r1, r0, lsl #8
     ae4:	58000100 	stmdapl	r0, {r8}
     ae8:	00000134 	andeq	r0, r0, r4, lsr r1
     aec:	00000154 	andeq	r0, r0, r4, asr r1
     af0:	00550001 	subseq	r0, r5, r1
     af4:	00000000 	andeq	r0, r0, r0
     af8:	14000000 	strne	r0, [r0], #-0
     afc:	34000000 	strcc	r0, [r0], #-0
     b00:	01000001 	tsteq	r0, r1
     b04:	00005500 	andeq	r5, r0, r0, lsl #10
     b08:	00000000 	andeq	r0, r0, r0
     b0c:	00200000 	eoreq	r0, r0, r0
     b10:	01340000 	teqeq	r4, r0
     b14:	00010000 	andeq	r0, r1, r0
     b18:	00000055 	andeq	r0, r0, r5, asr r0
     b1c:	00000000 	andeq	r0, r0, r0
     b20:	00002400 	andeq	r2, r0, r0, lsl #8
     b24:	00002800 	andeq	r2, r0, r0, lsl #16
     b28:	53000100 	movwpl	r0, #256	; 0x100
	...
     b34:	00000034 	andeq	r0, r0, r4, lsr r0
     b38:	00000054 	andeq	r0, r0, r4, asr r0
     b3c:	54580001 	ldrbpl	r0, [r8], #-1
     b40:	34000000 	strcc	r0, [r0], #-0
     b44:	05000001 	streq	r0, [r0, #-1]
     b48:	31007500 	tstcc	r0, r0, lsl #10
     b4c:	00009f24 	andeq	r9, r0, r4, lsr #30
     b50:	00000000 	andeq	r0, r0, r0
     b54:	00340000 	eorseq	r0, r4, r0
     b58:	003c0000 	eorseq	r0, ip, r0
     b5c:	00050000 	andeq	r0, r5, r0
     b60:	1a310077 	bne	c40d44 <__bss_end__+0xc3697c>
     b64:	00003c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
     b68:	00003f00 	andeq	r3, r0, r0, lsl #30
     b6c:	51000100 	mrspl	r0, (UNDEF: 16)
     b70:	0000003f 	andeq	r0, r0, pc, lsr r0
     b74:	00000154 	andeq	r0, r0, r4, asr r1
     b78:	00770005 	rsbseq	r0, r7, r5
     b7c:	009f1a31 	addseq	r1, pc, r1, lsr sl	; <UNPREDICTABLE>
     b80:	00000000 	andeq	r0, r0, r0
     b84:	40000000 	andmi	r0, r0, r0
     b88:	54000000 	strpl	r0, [r0], #-0
     b8c:	01000000 	mrseq	r0, (UNDEF: 0)
     b90:	00545800 	subseq	r5, r4, r0, lsl #16
     b94:	01340000 	teqeq	r4, r0
     b98:	00050000 	andeq	r0, r5, r0
     b9c:	24310075 	ldrtcs	r0, [r1], #-117	; 0x75
     ba0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     ba4:	00000000 	andeq	r0, r0, r0
     ba8:	00004400 	andeq	r4, r0, r0, lsl #8
     bac:	00004800 	andeq	r4, r0, r0, lsl #16
     bb0:	53000100 	movwpl	r0, #256	; 0x100
	...
     bbc:	00000054 	andeq	r0, r0, r4, asr r0
     bc0:	00000074 	andeq	r0, r0, r4, ror r0
     bc4:	74580001 	ldrbvc	r0, [r8], #-1
     bc8:	34000000 	strcc	r0, [r0], #-0
     bcc:	08000001 	stmdaeq	r0, {r0}
     bd0:	31007500 	tstcc	r0, r0, lsl #10
     bd4:	22007524 	andcs	r7, r0, #36, 10	; 0x9000000
     bd8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     bdc:	00000000 	andeq	r0, r0, r0
     be0:	00006000 	andeq	r6, r0, r0
     be4:	00007400 	andeq	r7, r0, r0, lsl #8
     be8:	58000100 	stmdapl	r0, {r8}
     bec:	00000074 	andeq	r0, r0, r4, ror r0
     bf0:	00000134 	andeq	r0, r0, r4, lsr r1
     bf4:	00750008 	rsbseq	r0, r5, r8
     bf8:	00752431 	rsbseq	r2, r5, r1, lsr r4
     bfc:	00009f22 	andeq	r9, r0, r2, lsr #30
     c00:	00000000 	andeq	r0, r0, r0
     c04:	00640000 	rsbeq	r0, r4, r0
     c08:	00680000 	rsbeq	r0, r8, r0
     c0c:	00010000 	andeq	r0, r1, r0
     c10:	00000053 	andeq	r0, r0, r3, asr r0
     c14:	00000000 	andeq	r0, r0, r0
     c18:	00007400 	andeq	r7, r0, r0, lsl #8
     c1c:	00009400 	andeq	r9, r0, r0, lsl #8
     c20:	58000100 	stmdapl	r0, {r8}
     c24:	00000094 	muleq	r0, r4, r0
     c28:	00000134 	andeq	r0, r0, r4, lsr r1
     c2c:	00750005 	rsbseq	r0, r5, r5
     c30:	009f2432 	addseq	r2, pc, r2, lsr r4	; <UNPREDICTABLE>
     c34:	00000000 	andeq	r0, r0, r0
     c38:	80000000 	andhi	r0, r0, r0
     c3c:	94000000 	strls	r0, [r0], #-0
     c40:	01000000 	mrseq	r0, (UNDEF: 0)
     c44:	00945800 	addseq	r5, r4, r0, lsl #16
     c48:	01340000 	teqeq	r4, r0
     c4c:	00050000 	andeq	r0, r5, r0
     c50:	24320075 	ldrtcs	r0, [r2], #-117	; 0x75
     c54:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     c58:	00000000 	andeq	r0, r0, r0
     c5c:	00008400 	andeq	r8, r0, r0, lsl #8
     c60:	00008800 	andeq	r8, r0, r0, lsl #16
     c64:	53000100 	movwpl	r0, #256	; 0x100
	...
     c70:	00000094 	muleq	r0, r4, r0
     c74:	000000b4 	strheq	r0, [r0], -r4
     c78:	b4580001 	ldrblt	r0, [r8], #-1
     c7c:	34000000 	strcc	r0, [r0], #-0
     c80:	08000001 	stmdaeq	r0, {r0}
     c84:	32007500 	andcc	r7, r0, #0, 10
     c88:	22007524 	andcs	r7, r0, #36, 10	; 0x9000000
     c8c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     c90:	00000000 	andeq	r0, r0, r0
     c94:	0000a000 	andeq	sl, r0, r0
     c98:	0000b400 	andeq	fp, r0, r0, lsl #8
     c9c:	58000100 	stmdapl	r0, {r8}
     ca0:	000000b4 	strheq	r0, [r0], -r4
     ca4:	00000134 	andeq	r0, r0, r4, lsr r1
     ca8:	00750008 	rsbseq	r0, r5, r8
     cac:	00752432 	rsbseq	r2, r5, r2, lsr r4
     cb0:	00009f22 	andeq	r9, r0, r2, lsr #30
     cb4:	00000000 	andeq	r0, r0, r0
     cb8:	00a40000 	adceq	r0, r4, r0
     cbc:	00a80000 	adceq	r0, r8, r0
     cc0:	00010000 	andeq	r0, r1, r0
     cc4:	00000053 	andeq	r0, r0, r3, asr r0
     cc8:	00000000 	andeq	r0, r0, r0
     ccc:	0000b400 	andeq	fp, r0, r0, lsl #8
     cd0:	0000d400 	andeq	sp, r0, r0, lsl #8
     cd4:	58000100 	stmdapl	r0, {r8}
     cd8:	000000d4 	ldrdeq	r0, [r0], -r4
     cdc:	00000134 	andeq	r0, r0, r4, lsr r1
     ce0:	0075000a 	rsbseq	r0, r5, sl
     ce4:	00752432 	rsbseq	r2, r5, r2, lsr r4
     ce8:	9f222431 	svcls	0x00222431
	...
     cf4:	000000c0 	andeq	r0, r0, r0, asr #1
     cf8:	000000d4 	ldrdeq	r0, [r0], -r4
     cfc:	d4580001 	ldrble	r0, [r8], #-1
     d00:	34000000 	strcc	r0, [r0], #-0
     d04:	0a000001 	beq	d10 <_start-0x72f0>
     d08:	32007500 	andcc	r7, r0, #0, 10
     d0c:	31007524 	tstcc	r0, r4, lsr #10
     d10:	009f2224 	addseq	r2, pc, r4, lsr #4
     d14:	00000000 	andeq	r0, r0, r0
     d18:	c4000000 	strgt	r0, [r0], #-0
     d1c:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
     d20:	01000000 	mrseq	r0, (UNDEF: 0)
     d24:	00005300 	andeq	r5, r0, r0, lsl #6
     d28:	00000000 	andeq	r0, r0, r0
     d2c:	00d40000 	sbcseq	r0, r4, r0
     d30:	00f40000 	rscseq	r0, r4, r0
     d34:	00010000 	andeq	r0, r1, r0
     d38:	0000f458 	andeq	pc, r0, r8, asr r4	; <UNPREDICTABLE>
     d3c:	00013400 	andeq	r3, r1, r0, lsl #8
     d40:	75000d00 	strvc	r0, [r0, #-3328]	; 0xd00
     d44:	75243200 	strvc	r3, [r4, #-512]!	; 0x200
     d48:	22243100 	eorcs	r3, r4, #0, 2
     d4c:	9f220075 	svcls	0x00220075
	...
     d58:	000000e0 	andeq	r0, r0, r0, ror #1
     d5c:	000000f4 	strdeq	r0, [r0], -r4
     d60:	f4580001 			; <UNDEFINED> instruction: 0xf4580001
     d64:	34000000 	strcc	r0, [r0], #-0
     d68:	0d000001 	stceq	0, cr0, [r0, #-4]
     d6c:	32007500 	andcc	r7, r0, #0, 10
     d70:	31007524 	tstcc	r0, r4, lsr #10
     d74:	00752224 	rsbseq	r2, r5, r4, lsr #4
     d78:	00009f22 	andeq	r9, r0, r2, lsr #30
     d7c:	00000000 	andeq	r0, r0, r0
     d80:	00e40000 	rsceq	r0, r4, r0
     d84:	00e80000 	rsceq	r0, r8, r0
     d88:	00010000 	andeq	r0, r1, r0
     d8c:	00000053 	andeq	r0, r0, r3, asr r0
     d90:	00000000 	andeq	r0, r0, r0
     d94:	0000f400 	andeq	pc, r0, r0, lsl #8
     d98:	00011400 	andeq	r1, r1, r0, lsl #8
     d9c:	58000100 	stmdapl	r0, {r8}
     da0:	00000114 	andeq	r0, r0, r4, lsl r1
     da4:	00000134 	andeq	r0, r0, r4, lsr r1
     da8:	00750005 	rsbseq	r0, r5, r5
     dac:	009f2433 	addseq	r2, pc, r3, lsr r4	; <UNPREDICTABLE>
	...
     db8:	14000001 	strne	r0, [r0], #-1
     dbc:	01000001 	tsteq	r0, r1
     dc0:	01145800 	tsteq	r4, r0, lsl #16
     dc4:	01340000 	teqeq	r4, r0
     dc8:	00050000 	andeq	r0, r5, r0
     dcc:	24330075 	ldrtcs	r0, [r3], #-117	; 0x75
     dd0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     dd4:	00000000 	andeq	r0, r0, r0
     dd8:	00010400 	andeq	r0, r1, r0, lsl #8
     ddc:	00010800 	andeq	r0, r1, r0, lsl #16
     de0:	53000100 	movwpl	r0, #256	; 0x100
	...
     dec:	00000114 	andeq	r0, r0, r4, lsl r1
     df0:	0000011c 	andeq	r0, r0, ip, lsl r1
     df4:	00770006 	rsbseq	r0, r7, r6
     df8:	9f1a8008 	svcls	0x001a8008
     dfc:	0000011c 	andeq	r0, r0, ip, lsl r1
     e00:	0000011f 	andeq	r0, r0, pc, lsl r1
     e04:	1f510001 	svcne	0x00510001
     e08:	54000001 	strpl	r0, [r0], #-1
     e0c:	06000001 	streq	r0, [r0], -r1
     e10:	08007700 	stmdaeq	r0, {r8, r9, sl, ip, sp, lr}
     e14:	009f1a80 	addseq	r1, pc, r0, lsl #21
     e18:	00000000 	andeq	r0, r0, r0
     e1c:	24000000 	strcs	r0, [r0], #-0
     e20:	28000001 	stmdacs	r0, {r0}
     e24:	01000001 	tsteq	r0, r1
     e28:	00005300 	andeq	r5, r0, r0, lsl #6
     e2c:	00000000 	andeq	r0, r0, r0
     e30:	01440000 	mrseq	r0, (UNDEF: 68)
     e34:	01480000 	mrseq	r0, (UNDEF: 72)
     e38:	00010000 	andeq	r0, r1, r0
     e3c:	00000053 	andeq	r0, r0, r3, asr r0
     e40:	00000000 	andeq	r0, r0, r0
     e44:	00015400 	andeq	r5, r1, r0, lsl #8
     e48:	00016b00 	andeq	r6, r1, r0, lsl #22
     e4c:	50000100 	andpl	r0, r0, r0, lsl #2
     e50:	0000016b 	andeq	r0, r0, fp, ror #2
     e54:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     e58:	d0590001 	subsle	r0, r9, r1
     e5c:	0c000001 	stceq	0, cr0, [r0], {1}
     e60:	04000003 	streq	r0, [r0], #-3
     e64:	5001f300 	andpl	pc, r1, r0, lsl #6
     e68:	00030c9f 	muleq	r3, pc, ip	; <UNPREDICTABLE>
     e6c:	00031400 	andeq	r1, r3, r0, lsl #8
     e70:	59000100 	stmdbpl	r0, {r8}
     e74:	00000314 	andeq	r0, r0, r4, lsl r3
     e78:	0000031c 	andeq	r0, r0, ip, lsl r3
     e7c:	01f30004 	mvnseq	r0, r4
     e80:	00009f50 	andeq	r9, r0, r0, asr pc
     e84:	00000000 	andeq	r0, r0, r0
     e88:	01540000 	cmpeq	r4, r0
     e8c:	016b0000 	cmneq	fp, r0
     e90:	00010000 	andeq	r0, r1, r0
     e94:	00016b51 	andeq	r6, r1, r1, asr fp
     e98:	00031c00 	andeq	r1, r3, r0, lsl #24
     e9c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     ea8:	000001a8 	andeq	r0, r0, r8, lsr #3
     eac:	00000298 	muleq	r0, r8, r2
     eb0:	00580001 	subseq	r0, r8, r1
     eb4:	00000000 	andeq	r0, r0, r0
     eb8:	ac000000 	stcge	0, cr0, [r0], {-0}
     ebc:	d0000001 	andle	r0, r0, r1
     ec0:	01000002 	tsteq	r0, r2
     ec4:	00005400 	andeq	r5, r0, r0, lsl #8
     ec8:	00000000 	andeq	r0, r0, r0
     ecc:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
     ed0:	02d00000 	sbcseq	r0, r0, #0
     ed4:	00050000 	andeq	r0, r5, r0
     ed8:	25310074 	ldrcs	r0, [r1, #-116]!	; 0x74
     edc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     ee0:	00000000 	andeq	r0, r0, r0
     ee4:	0001ac00 	andeq	sl, r1, r0, lsl #24
     ee8:	0001d000 	andeq	sp, r1, r0
     eec:	30000200 	andcc	r0, r0, r0, lsl #4
     ef0:	0001d09f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
     ef4:	00030c00 	andeq	r0, r3, r0, lsl #24
     ef8:	59000100 	stmdbpl	r0, {r8}
     efc:	00000314 	andeq	r0, r0, r4, lsl r3
     f00:	0000031c 	andeq	r0, r0, ip, lsl r3
     f04:	00590001 	subseq	r0, r9, r1
     f08:	00000000 	andeq	r0, r0, r0
     f0c:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     f10:	6b000001 	blvs	f1c <_start-0x70e4>
     f14:	01000001 	tsteq	r0, r1
     f18:	016b5100 	cmneq	fp, r0, lsl #2
     f1c:	031c0000 	tsteq	ip, #0
     f20:	00010000 	andeq	r0, r1, r0
     f24:	00000056 	andeq	r0, r0, r6, asr r0
     f28:	00000000 	andeq	r0, r0, r0
     f2c:	00017000 	andeq	r7, r1, r0
     f30:	0001ac00 	andeq	sl, r1, r0, lsl #24
     f34:	54000100 	strpl	r0, [r0], #-256	; 0x100
     f38:	0000030c 	andeq	r0, r0, ip, lsl #6
     f3c:	00000314 	andeq	r0, r0, r4, lsl r3
     f40:	00540001 	subseq	r0, r4, r1
     f44:	00000000 	andeq	r0, r0, r0
     f48:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
     f4c:	c4000001 	strgt	r0, [r0], #-1
     f50:	01000001 	tsteq	r0, r1
     f54:	00005800 	andeq	r5, r0, r0, lsl #16
     f58:	00000000 	andeq	r0, r0, r0
     f5c:	01b00000 	movseq	r0, r0
     f60:	01cb0000 	biceq	r0, fp, r0
     f64:	00010000 	andeq	r0, r1, r0
     f68:	0001cb52 	andeq	ip, r1, r2, asr fp
     f6c:	0002d000 	andeq	sp, r2, r0
     f70:	74000800 	strvc	r0, [r0], #-2048	; 0x800
     f74:	74253100 	strtvc	r3, [r5], #-256	; 0x100
     f78:	009f2200 	addseq	r2, pc, r0, lsl #4
     f7c:	00000000 	andeq	r0, r0, r0
     f80:	b0000000 	andlt	r0, r0, r0
     f84:	c4000001 	strgt	r0, [r0], #-1
     f88:	01000001 	tsteq	r0, r1
     f8c:	00005800 	andeq	r5, r0, r0, lsl #16
     f90:	00000000 	andeq	r0, r0, r0
     f94:	01b40000 			; <UNDEFINED> instruction: 0x01b40000
     f98:	01b80000 			; <UNDEFINED> instruction: 0x01b80000
     f9c:	00010000 	andeq	r0, r1, r0
     fa0:	00000053 	andeq	r0, r0, r3, asr r0
     fa4:	00000000 	andeq	r0, r0, r0
     fa8:	0001d000 	andeq	sp, r1, r0
     fac:	0002d000 	andeq	sp, r2, r0
     fb0:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     fbc:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     fc0:	000001e4 	andeq	r0, r0, r4, ror #3
     fc4:	00580001 	subseq	r0, r8, r1
     fc8:	00000000 	andeq	r0, r0, r0
     fcc:	d4000000 	strle	r0, [r0], #-0
     fd0:	d8000001 	stmdale	r0, {r0}
     fd4:	01000001 	tsteq	r0, r1
     fd8:	00005300 	andeq	r5, r0, r0, lsl #6
     fdc:	00000000 	andeq	r0, r0, r0
     fe0:	01f40000 	mvnseq	r0, r0
     fe4:	02d00000 	sbcseq	r0, r0, #0
     fe8:	00010000 	andeq	r0, r1, r0
     fec:	00000054 	andeq	r0, r0, r4, asr r0
     ff0:	00000000 	andeq	r0, r0, r0
     ff4:	0001f400 	andeq	pc, r1, r0, lsl #8
     ff8:	00020800 	andeq	r0, r2, r0, lsl #16
     ffc:	58000100 	stmdapl	r0, {r8}
	...
    1008:	000001f8 	strdeq	r0, [r0], -r8
    100c:	000001fc 	strdeq	r0, [r0], -ip
    1010:	00530001 	subseq	r0, r3, r1
    1014:	00000000 	andeq	r0, r0, r0
    1018:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    101c:	d0000002 	andle	r0, r0, r2
    1020:	01000002 	tsteq	r0, r2
    1024:	00005400 	andeq	r5, r0, r0, lsl #8
    1028:	00000000 	andeq	r0, r0, r0
    102c:	02180000 	andseq	r0, r8, #0
    1030:	022c0000 	eoreq	r0, ip, #0
    1034:	00010000 	andeq	r0, r1, r0
    1038:	00000058 	andeq	r0, r0, r8, asr r0
    103c:	00000000 	andeq	r0, r0, r0
    1040:	00021c00 	andeq	r1, r2, r0, lsl #24
    1044:	00022000 	andeq	r2, r2, r0
    1048:	53000100 	movwpl	r0, #256	; 0x100
	...
    1054:	0000023c 	andeq	r0, r0, ip, lsr r2
    1058:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    105c:	00540001 	subseq	r0, r4, r1
    1060:	00000000 	andeq	r0, r0, r0
    1064:	3c000000 	stccc	0, cr0, [r0], {-0}
    1068:	50000002 	andpl	r0, r0, r2
    106c:	01000002 	tsteq	r0, r2
    1070:	00005800 	andeq	r5, r0, r0, lsl #16
    1074:	00000000 	andeq	r0, r0, r0
    1078:	02400000 	subeq	r0, r0, #0
    107c:	02440000 	subeq	r0, r4, #0
    1080:	00010000 	andeq	r0, r1, r0
    1084:	00000053 	andeq	r0, r0, r3, asr r0
    1088:	00000000 	andeq	r0, r0, r0
    108c:	00026000 	andeq	r6, r2, r0
    1090:	0002d000 	andeq	sp, r2, r0
    1094:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    10a0:	00000260 	andeq	r0, r0, r0, ror #4
    10a4:	00000274 	andeq	r0, r0, r4, ror r2
    10a8:	00580001 	subseq	r0, r8, r1
    10ac:	00000000 	andeq	r0, r0, r0
    10b0:	64000000 	strvs	r0, [r0], #-0
    10b4:	68000002 	stmdavs	r0, {r1}
    10b8:	01000002 	tsteq	r0, r2
    10bc:	00005300 	andeq	r5, r0, r0, lsl #6
    10c0:	00000000 	andeq	r0, r0, r0
    10c4:	02840000 	addeq	r0, r4, #0
    10c8:	02d00000 	sbcseq	r0, r0, #0
    10cc:	00010000 	andeq	r0, r1, r0
    10d0:	00000054 	andeq	r0, r0, r4, asr r0
    10d4:	00000000 	andeq	r0, r0, r0
    10d8:	00028400 	andeq	r8, r2, r0, lsl #8
    10dc:	00029800 	andeq	r9, r2, r0, lsl #16
    10e0:	58000100 	stmdapl	r0, {r8}
	...
    10ec:	00000288 	andeq	r0, r0, r8, lsl #5
    10f0:	0000028c 	andeq	r0, r0, ip, lsl #5
    10f4:	00530001 	subseq	r0, r3, r1
    10f8:	00000000 	andeq	r0, r0, r0
    10fc:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    1100:	d0000002 	andle	r0, r0, r2
    1104:	01000002 	tsteq	r0, r2
    1108:	00005400 	andeq	r5, r0, r0, lsl #8
    110c:	00000000 	andeq	r0, r0, r0
    1110:	02ac0000 	adceq	r0, ip, #0
    1114:	02b00000 	adcseq	r0, r0, #0
    1118:	00010000 	andeq	r0, r1, r0
    111c:	00000053 	andeq	r0, r0, r3, asr r0
    1120:	00000000 	andeq	r0, r0, r0
    1124:	0002c800 	andeq	ip, r2, r0, lsl #16
    1128:	00030c00 	andeq	r0, r3, r0, lsl #24
    112c:	30000200 	andcc	r0, r0, r0, lsl #4
    1130:	0003149f 	muleq	r3, pc, r4	; <UNPREDICTABLE>
    1134:	00031c00 	andeq	r1, r3, r0, lsl #24
    1138:	30000200 	andcc	r0, r0, r0, lsl #4
    113c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1140:	00000000 	andeq	r0, r0, r0
    1144:	0002c800 	andeq	ip, r2, r0, lsl #16
    1148:	00030c00 	andeq	r0, r3, r0, lsl #24
    114c:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    1150:	00000314 	andeq	r0, r0, r4, lsl r3
    1154:	0000031c 	andeq	r0, r0, ip, lsl r3
    1158:	00550001 	subseq	r0, r5, r1
    115c:	00000000 	andeq	r0, r0, r0
    1160:	d0000000 	andle	r0, r0, r0
    1164:	0c000002 	stceq	0, cr0, [r0], {2}
    1168:	01000003 	tsteq	r0, r3
    116c:	03145400 	tsteq	r4, #0, 8
    1170:	031c0000 	tsteq	ip, #0
    1174:	00010000 	andeq	r0, r1, r0
    1178:	00000054 	andeq	r0, r0, r4, asr r0
    117c:	00000000 	andeq	r0, r0, r0
    1180:	00031c00 	andeq	r1, r3, r0, lsl #24
    1184:	00033b00 	andeq	r3, r3, r0, lsl #22
    1188:	50000100 	andpl	r0, r0, r0, lsl #2
    118c:	0000033b 	andeq	r0, r0, fp, lsr r3
    1190:	00000354 	andeq	r0, r0, r4, asr r3
    1194:	54580001 	ldrbpl	r0, [r8], #-1
    1198:	64000003 	strvs	r0, [r0], #-3
    119c:	01000003 	tsteq	r0, r3
    11a0:	03645000 	cmneq	r4, #0
    11a4:	03ac0000 			; <UNDEFINED> instruction: 0x03ac0000
    11a8:	00010000 	andeq	r0, r1, r0
    11ac:	00000058 	andeq	r0, r0, r8, asr r0
    11b0:	00000000 	andeq	r0, r0, r0
    11b4:	00031c00 	andeq	r1, r3, r0, lsl #24
    11b8:	00033b00 	andeq	r3, r3, r0, lsl #22
    11bc:	51000100 	mrspl	r0, (UNDEF: 16)
    11c0:	0000033b 	andeq	r0, r0, fp, lsr r3
    11c4:	00000354 	andeq	r0, r0, r4, asr r3
    11c8:	54560001 	ldrbpl	r0, [r6], #-1
    11cc:	64000003 	strvs	r0, [r0], #-3
    11d0:	01000003 	tsteq	r0, r3
    11d4:	03645100 	cmneq	r4, #0, 2
    11d8:	03ac0000 			; <UNDEFINED> instruction: 0x03ac0000
    11dc:	00010000 	andeq	r0, r1, r0
    11e0:	00000056 	andeq	r0, r0, r6, asr r0
    11e4:	00000000 	andeq	r0, r0, r0
    11e8:	00031c00 	andeq	r1, r3, r0, lsl #24
    11ec:	00033b00 	andeq	r3, r3, r0, lsl #22
    11f0:	52000100 	andpl	r0, r0, #0, 2
    11f4:	0000033b 	andeq	r0, r0, fp, lsr r3
    11f8:	00000354 	andeq	r0, r0, r4, asr r3
    11fc:	01f30004 	mvnseq	r0, r4
    1200:	03549f52 	cmpeq	r4, #328	; 0x148
    1204:	03640000 	cmneq	r4, #0
    1208:	00010000 	andeq	r0, r1, r0
    120c:	00036452 	andeq	r6, r3, r2, asr r4
    1210:	0003ac00 	andeq	sl, r3, r0, lsl #24
    1214:	77000300 	strvc	r0, [r0, -r0, lsl #6]
    1218:	00009f01 	andeq	r9, r0, r1, lsl #30
    121c:	00000000 	andeq	r0, r0, r0
    1220:	031c0000 	tsteq	ip, #0
    1224:	033b0000 	teqeq	fp, #0
    1228:	00010000 	andeq	r0, r1, r0
    122c:	00033b53 	andeq	r3, r3, r3, asr fp
    1230:	00035400 	andeq	r5, r3, r0, lsl #8
    1234:	f3000400 	vshl.u8	d0, d0, d0
    1238:	549f5301 	ldrpl	r5, [pc], #769	; 1240 <_start-0x6dc0>
    123c:	64000003 	strvs	r0, [r0], #-3
    1240:	01000003 	tsteq	r0, r3
    1244:	03645300 	cmneq	r4, #0, 6
    1248:	03ac0000 			; <UNDEFINED> instruction: 0x03ac0000
    124c:	00040000 	andeq	r0, r4, r0
    1250:	9f5301f3 	svcls	0x005301f3
	...
    125c:	0000035c 	andeq	r0, r0, ip, asr r3
    1260:	00000364 	andeq	r0, r0, r4, ror #6
    1264:	9f300002 	svcls	0x00300002
    1268:	00000364 	andeq	r0, r0, r4, ror #6
    126c:	000003ac 	andeq	r0, r0, ip, lsr #7
    1270:	00540001 	subseq	r0, r4, r1
    1274:	00000000 	andeq	r0, r0, r0
    1278:	74000000 	strvc	r0, [r0], #-0
    127c:	84000003 	strhi	r0, [r0], #-3
    1280:	01000003 	tsteq	r0, r3
    1284:	00005000 	andeq	r5, r0, r0
    1288:	00000000 	andeq	r0, r0, r0
    128c:	03ac0000 			; <UNDEFINED> instruction: 0x03ac0000
    1290:	03c70000 	biceq	r0, r7, #0
    1294:	00010000 	andeq	r0, r1, r0
    1298:	0003c750 	andeq	ip, r3, r0, asr r7
    129c:	0003e000 	andeq	lr, r3, r0
    12a0:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    12a4:	000003e0 	andeq	r0, r0, r0, ror #7
    12a8:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    12ac:	f0500001 			; <UNDEFINED> instruction: 0xf0500001
    12b0:	28000003 	stmdacs	r0, {r0, r1}
    12b4:	01000004 	tsteq	r0, r4
    12b8:	00005700 	andeq	r5, r0, r0, lsl #14
    12bc:	00000000 	andeq	r0, r0, r0
    12c0:	03ac0000 			; <UNDEFINED> instruction: 0x03ac0000
    12c4:	03c70000 	biceq	r0, r7, #0
    12c8:	00010000 	andeq	r0, r1, r0
    12cc:	0003c751 	andeq	ip, r3, r1, asr r7
    12d0:	0003e000 	andeq	lr, r3, r0
    12d4:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    12d8:	000003e0 	andeq	r0, r0, r0, ror #7
    12dc:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    12e0:	f0510001 			; <UNDEFINED> instruction: 0xf0510001
    12e4:	28000003 	stmdacs	r0, {r0, r1}
    12e8:	01000004 	tsteq	r0, r4
    12ec:	00005500 	andeq	r5, r0, r0, lsl #10
    12f0:	00000000 	andeq	r0, r0, r0
    12f4:	03ac0000 			; <UNDEFINED> instruction: 0x03ac0000
    12f8:	03c70000 	biceq	r0, r7, #0
    12fc:	00010000 	andeq	r0, r1, r0
    1300:	0003c752 	andeq	ip, r3, r2, asr r7
    1304:	0003e000 	andeq	lr, r3, r0
    1308:	f3000400 	vshl.u8	d0, d0, d0
    130c:	e09f5201 	adds	r5, pc, r1, lsl #4
    1310:	f0000003 			; <UNDEFINED> instruction: 0xf0000003
    1314:	01000003 	tsteq	r0, r3
    1318:	03f05200 	mvnseq	r5, #0, 4
    131c:	04280000 	strteq	r0, [r8], #-0
    1320:	00030000 	andeq	r0, r3, r0
    1324:	009f0176 	addseq	r0, pc, r6, ror r1	; <UNPREDICTABLE>
    1328:	00000000 	andeq	r0, r0, r0
    132c:	ac000000 	stcge	0, cr0, [r0], {-0}
    1330:	c7000003 	strgt	r0, [r0, -r3]
    1334:	01000003 	tsteq	r0, r3
    1338:	03c75300 	biceq	r5, r7, #0, 6
    133c:	03e00000 	mvneq	r0, #0
    1340:	00010000 	andeq	r0, r1, r0
    1344:	0003e058 	andeq	lr, r3, r8, asr r0
    1348:	0003f000 	andeq	pc, r3, r0
    134c:	53000100 	movwpl	r0, #256	; 0x100
    1350:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1354:	00000428 	andeq	r0, r0, r8, lsr #8
    1358:	00580001 	subseq	r0, r8, r1
    135c:	00000000 	andeq	r0, r0, r0
    1360:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    1364:	f0000003 			; <UNDEFINED> instruction: 0xf0000003
    1368:	02000003 	andeq	r0, r0, #3
    136c:	f09f3000 			; <UNDEFINED> instruction: 0xf09f3000
    1370:	28000003 	stmdacs	r0, {r0, r1}
    1374:	01000004 	tsteq	r0, r4
    1378:	00005400 	andeq	r5, r0, r0, lsl #8
    137c:	00000000 	andeq	r0, r0, r0
    1380:	04280000 	strteq	r0, [r8], #-0
    1384:	04470000 	strbeq	r0, [r7], #-0
    1388:	00010000 	andeq	r0, r1, r0
    138c:	00044751 	andeq	r4, r4, r1, asr r7
    1390:	0004e800 	andeq	lr, r4, r0, lsl #16
    1394:	f3000400 	vshl.u8	d0, d0, d0
    1398:	009f5101 	addseq	r5, pc, r1, lsl #2
    139c:	00000000 	andeq	r0, r0, r0
    13a0:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    13a4:	47000004 	strmi	r0, [r0, -r4]
    13a8:	01000004 	tsteq	r0, r4
    13ac:	04475200 	strbeq	r5, [r7], #-512	; 0x200
    13b0:	04e80000 	strbteq	r0, [r8], #0
    13b4:	00040000 	andeq	r0, r4, r0
    13b8:	9f5201f3 	svcls	0x005201f3
	...
    13c4:	00000428 	andeq	r0, r0, r8, lsr #8
    13c8:	00000447 	andeq	r0, r0, r7, asr #8
    13cc:	47530001 	ldrbmi	r0, [r3, -r1]
    13d0:	e8000004 	stmda	r0, {r2}
    13d4:	01000004 	tsteq	r0, r4
    13d8:	00005500 	andeq	r5, r0, r0, lsl #10
    13dc:	00000000 	andeq	r0, r0, r0
    13e0:	04680000 	strbteq	r0, [r8], #-0
    13e4:	04a70000 	strteq	r0, [r7], #0
    13e8:	00010000 	andeq	r0, r1, r0
    13ec:	0004a752 	andeq	sl, r4, r2, asr r7
    13f0:	0004c000 	andeq	ip, r4, r0
    13f4:	75000600 	strvc	r0, [r0, #-1536]	; 0x600
    13f8:	1e007700 	cdpne	7, 0, cr7, cr0, cr0, {0}
    13fc:	0004c09f 	muleq	r4, pc, r0	; <UNPREDICTABLE>
    1400:	0004e800 	andeq	lr, r4, r0, lsl #16
    1404:	52000100 	andpl	r0, r0, #0, 2
	...
    1410:	000004e8 	andeq	r0, r0, r8, ror #9
    1414:	000004f3 	strdeq	r0, [r0], -r3
    1418:	f3500001 	vhadd.u16	d16, d0, d1
    141c:	24000004 	strcs	r0, [r0], #-4
    1420:	04000005 	streq	r0, [r0], #-5
    1424:	5001f300 	andpl	pc, r1, r0, lsl #6
    1428:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    142c:	00000000 	andeq	r0, r0, r0
    1430:	0004f400 	andeq	pc, r4, r0, lsl #8
    1434:	0004ff00 	andeq	pc, r4, r0, lsl #30
    1438:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1444:	00000524 	andeq	r0, r0, r4, lsr #10
    1448:	00000534 	andeq	r0, r0, r4, lsr r5
    144c:	34500001 	ldrbcc	r0, [r0], #-1
    1450:	50000005 	andpl	r0, r0, r5
    1454:	01000005 	tsteq	r0, r5
    1458:	00005500 	andeq	r5, r0, r0, lsl #10
    145c:	00000000 	andeq	r0, r0, r0
    1460:	05240000 	streq	r0, [r4, #-0]!
    1464:	05340000 	ldreq	r0, [r4, #-0]!
    1468:	00010000 	andeq	r0, r1, r0
    146c:	00053451 	andeq	r3, r5, r1, asr r4
    1470:	00055000 	andeq	r5, r5, r0
    1474:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    1480:	00000550 	andeq	r0, r0, r0, asr r5
    1484:	0000056c 	andeq	r0, r0, ip, ror #10
    1488:	6c500001 	mrrcvs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    148c:	bc000005 	stclt	0, cr0, [r0], {5}
    1490:	01000005 	tsteq	r0, r5
    1494:	05bc5500 	ldreq	r5, [ip, #1280]!	; 0x500
    1498:	05d40000 	ldrbeq	r0, [r4]
    149c:	00040000 	andeq	r0, r4, r0
    14a0:	9f5001f3 	svcls	0x005001f3
	...
    14ac:	0000057c 	andeq	r0, r0, ip, ror r5
    14b0:	0000058b 	andeq	r0, r0, fp, lsl #11
    14b4:	8b500001 	blhi	14014c0 <__bss_end__+0x13f70f8>
    14b8:	a4000005 	strge	r0, [r0], #-5
    14bc:	01000005 	tsteq	r0, r5
    14c0:	05a45400 	streq	r5, [r4, #1024]!	; 0x400
    14c4:	05a80000 	streq	r0, [r8, #0]!
    14c8:	00010000 	andeq	r0, r1, r0
    14cc:	0005a850 	andeq	sl, r5, r0, asr r8
    14d0:	0005bc00 	andeq	fp, r5, r0, lsl #24
    14d4:	54000100 	strpl	r0, [r0], #-256	; 0x100
    14d8:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
    14dc:	000005d4 	ldrdeq	r0, [r0], -r4
    14e0:	00500001 	subseq	r0, r0, r1
    14e4:	00000000 	andeq	r0, r0, r0
    14e8:	d4000000 	strle	r0, [r0], #-0
    14ec:	e7000005 	str	r0, [r0, -r5]
    14f0:	01000005 	tsteq	r0, r5
    14f4:	05e75000 	strbeq	r5, [r7, #0]!
    14f8:	06200000 	strteq	r0, [r0], -r0
    14fc:	00040000 	andeq	r0, r4, r0
    1500:	9f5001f3 	svcls	0x005001f3
	...
    150c:	000005d4 	ldrdeq	r0, [r0], -r4
    1510:	000005e7 	andeq	r0, r0, r7, ror #11
    1514:	e7510001 	ldrb	r0, [r1, -r1]
    1518:	20000005 	andcs	r0, r0, r5
    151c:	04000006 	streq	r0, [r0], #-6
    1520:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1524:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1528:	00000000 	andeq	r0, r0, r0
    152c:	0005d400 	andeq	sp, r5, r0, lsl #8
    1530:	0005e700 	andeq	lr, r5, r0, lsl #14
    1534:	52000100 	andpl	r0, r0, #0, 2
    1538:	000005e7 	andeq	r0, r0, r7, ror #11
    153c:	00000620 	andeq	r0, r0, r0, lsr #12
    1540:	01f30004 	mvnseq	r0, r4
    1544:	00009f52 	andeq	r9, r0, r2, asr pc
    1548:	00000000 	andeq	r0, r0, r0
    154c:	05d40000 	ldrbeq	r0, [r4]
    1550:	05e70000 	strbeq	r0, [r7, #0]!
    1554:	00010000 	andeq	r0, r1, r0
    1558:	0005e753 	andeq	lr, r5, r3, asr r7
    155c:	00062000 	andeq	r2, r6, r0
    1560:	f3000400 	vshl.u8	d0, d0, d0
    1564:	009f5301 	addseq	r5, pc, r1, lsl #6
    1568:	00000000 	andeq	r0, r0, r0
    156c:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    1570:	f3000005 	vhadd.u8	d0, d0, d5
    1574:	01000005 	tsteq	r0, r5
    1578:	060c5000 	streq	r5, [ip], -r0
    157c:	06200000 	strteq	r0, [r0], -r0
    1580:	00010000 	andeq	r0, r1, r0
    1584:	00000050 	andeq	r0, r0, r0, asr r0
    1588:	00000000 	andeq	r0, r0, r0
    158c:	0000fc00 	andeq	pc, r0, r0, lsl #24
    1590:	00010400 	andeq	r0, r1, r0, lsl #8
    1594:	50000100 	andpl	r0, r0, r0, lsl #2
    1598:	00000104 	andeq	r0, r0, r4, lsl #2
    159c:	00000128 	andeq	r0, r0, r8, lsr #2
    15a0:	00540001 	subseq	r0, r4, r1
	...
    15ac:	90000000 	andls	r0, r0, r0
    15b0:	01000000 	mrseq	r0, (UNDEF: 0)
    15b4:	00905000 	addseq	r5, r0, r0
    15b8:	00d40000 	sbcseq	r0, r4, r0
    15bc:	00010000 	andeq	r0, r1, r0
    15c0:	00000054 	andeq	r0, r0, r4, asr r0
    15c4:	00000000 	andeq	r0, r0, r0
    15c8:	00004800 	andeq	r4, r0, r0, lsl #16
    15cc:	00004c00 	andeq	r4, r0, r0, lsl #24
    15d0:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    15d4:	00000054 	andeq	r0, r0, r4, asr r0
    15d8:	00000058 	andeq	r0, r0, r8, asr r0
    15dc:	60550001 	subsvs	r0, r5, r1
    15e0:	64000000 	strvs	r0, [r0], #-0
    15e4:	01000000 	mrseq	r0, (UNDEF: 0)
    15e8:	006c5500 	rsbeq	r5, ip, r0, lsl #10
    15ec:	00700000 	rsbseq	r0, r0, r0
    15f0:	00010000 	andeq	r0, r1, r0
    15f4:	00007855 	andeq	r7, r0, r5, asr r8
    15f8:	00007c00 	andeq	r7, r0, r0, lsl #24
    15fc:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    1600:	00000084 	andeq	r0, r0, r4, lsl #1
    1604:	00000088 	andeq	r0, r0, r8, lsl #1
    1608:	8c550001 	mrrchi	0, 0, r0, r5, cr1
    160c:	d4000000 	strle	r0, [r0], #-0
    1610:	01000000 	mrseq	r0, (UNDEF: 0)
    1614:	00005500 	andeq	r5, r0, r0, lsl #10
    1618:	00000000 	andeq	r0, r0, r0
    161c:	001c0000 	andseq	r0, ip, r0
    1620:	00440000 	subeq	r0, r4, r0
    1624:	00010000 	andeq	r0, r1, r0
    1628:	00004453 	andeq	r4, r0, r3, asr r4
    162c:	00004c00 	andeq	r4, r0, r0, lsl #24
    1630:	70001c00 	andvc	r1, r0, r0, lsl #24
    1634:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1638:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    163c:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1640:	00000000 	andeq	r0, r0, r0
    1644:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1648:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    164c:	4c9f2533 	cfldr32mi	mvfx2, [pc], {51}	; 0x33
    1650:	50000000 	andpl	r0, r0, r0
    1654:	01000000 	mrseq	r0, (UNDEF: 0)
    1658:	00505300 	subseq	r5, r0, r0, lsl #6
    165c:	00580000 	subseq	r0, r8, r0
    1660:	001c0000 	andseq	r0, ip, r0
    1664:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    1668:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    166c:	cccccd08 	stclgt	13, cr12, [ip], {8}
    1670:	000000cc 	andeq	r0, r0, ip, asr #1
    1674:	20081e00 	andcs	r1, r8, r0, lsl #28
    1678:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    167c:	9f25332c 	svcls	0x0025332c
    1680:	00000058 	andeq	r0, r0, r8, asr r0
    1684:	0000005c 	andeq	r0, r0, ip, asr r0
    1688:	5c530001 	mrrcpl	0, 0, r0, r3, cr1
    168c:	64000000 	strvs	r0, [r0], #-0
    1690:	1c000000 	stcne	0, cr0, [r0], {-0}
    1694:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    1698:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    169c:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    16a0:	0000cccc 	andeq	ip, r0, ip, asr #25
    16a4:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    16a8:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    16ac:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    16b0:	0000649f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    16b4:	00006800 	andeq	r6, r0, r0, lsl #16
    16b8:	53000100 	movwpl	r0, #256	; 0x100
    16bc:	00000068 	andeq	r0, r0, r8, rrx
    16c0:	00000070 	andeq	r0, r0, r0, ror r0
    16c4:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    16c8:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    16cc:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    16d0:	00cccccc 	sbceq	ip, ip, ip, asr #25
    16d4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    16d8:	25f72008 	ldrbcs	r2, [r7, #8]!
    16dc:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    16e0:	00709f25 	rsbseq	r9, r0, r5, lsr #30
    16e4:	00740000 	rsbseq	r0, r4, r0
    16e8:	00010000 	andeq	r0, r1, r0
    16ec:	00007453 	andeq	r7, r0, r3, asr r4
    16f0:	00007c00 	andeq	r7, r0, r0, lsl #24
    16f4:	70001c00 	andvc	r1, r0, r0, lsl #24
    16f8:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    16fc:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1700:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1704:	00000000 	andeq	r0, r0, r0
    1708:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    170c:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1710:	7c9f2533 	cfldr32vc	mvfx2, [pc], {51}	; 0x33
    1714:	80000000 	andhi	r0, r0, r0
    1718:	01000000 	mrseq	r0, (UNDEF: 0)
    171c:	00805300 	addeq	r5, r0, r0, lsl #6
    1720:	00880000 	addeq	r0, r8, r0
    1724:	001c0000 	andseq	r0, ip, r0
    1728:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    172c:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    1730:	cccccd08 	stclgt	13, cr12, [ip], {8}
    1734:	000000cc 	andeq	r0, r0, ip, asr #1
    1738:	20081e00 	andcs	r1, r8, r0, lsl #28
    173c:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1740:	9f25332c 	svcls	0x0025332c
    1744:	00000088 	andeq	r0, r0, r8, lsl #1
    1748:	0000008c 	andeq	r0, r0, ip, lsl #1
    174c:	8c530001 	mrrchi	0, 0, r0, r3, cr1
    1750:	90000000 	andls	r0, r0, r0
    1754:	1c000000 	stcne	0, cr0, [r0], {-0}
    1758:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    175c:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    1760:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1764:	0000cccc 	andeq	ip, r0, ip, asr #25
    1768:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    176c:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1770:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1774:	0000909f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1778:	00009800 	andeq	r9, r0, r0, lsl #16
    177c:	74001c00 	strvc	r1, [r0], #-3072	; 0xc00
    1780:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1784:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1788:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    178c:	00000000 	andeq	r0, r0, r0
    1790:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1794:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1798:	989f2533 	ldmls	pc, {r0, r1, r4, r5, r8, sl, sp}	; <UNPREDICTABLE>
    179c:	9c000000 	stcls	0, cr0, [r0], {-0}
    17a0:	17000000 	strne	r0, [r0, -r0]
    17a4:	f7007400 			; <UNDEFINED> instruction: 0xf7007400
    17a8:	7125f72c 	msrvc	SP_abt, ip
    17ac:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    17b0:	20081e25 	andcs	r1, r8, r5, lsr #28
    17b4:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    17b8:	9f25332c 	svcls	0x0025332c
    17bc:	0000009c 	muleq	r0, ip, r0
    17c0:	000000d4 	ldrdeq	r0, [r0], -r4
    17c4:	0074001c 	rsbseq	r0, r4, ip, lsl r0
    17c8:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    17cc:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    17d0:	00cccccc 	sbceq	ip, ip, ip, asr #25
    17d4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    17d8:	25f72008 	ldrbcs	r2, [r7, #8]!
    17dc:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    17e0:	00009f25 	andeq	r9, r0, r5, lsr #30
    17e4:	00000000 	andeq	r0, r0, r0
    17e8:	00940000 	addseq	r0, r4, r0
    17ec:	00b80000 	adcseq	r0, r8, r0
    17f0:	00010000 	andeq	r0, r1, r0
    17f4:	0000b850 	andeq	fp, r0, r0, asr r8
    17f8:	0000c400 	andeq	ip, r0, r0, lsl #8
    17fc:	31000800 	tstcc	r0, r0, lsl #16
    1800:	73240071 	teqvc	r4, #113	; 0x71
    1804:	c49f2100 	ldrgt	r2, [pc], #256	; 180c <_start-0x67f4>
    1808:	c7000000 	strgt	r0, [r0, -r0]
    180c:	01000000 	mrseq	r0, (UNDEF: 0)
    1810:	00005100 	andeq	r5, r0, r0, lsl #2
    1814:	00000000 	andeq	r0, r0, r0
    1818:	00d40000 	sbcseq	r0, r4, r0
    181c:	00f80000 	rscseq	r0, r8, r0
    1820:	00010000 	andeq	r0, r1, r0
    1824:	0000f850 	andeq	pc, r0, r0, asr r8	; <UNPREDICTABLE>
    1828:	00010c00 	andeq	r0, r1, r0, lsl #24
    182c:	f3000400 	vshl.u8	d0, d0, d0
    1830:	009f5001 	addseq	r5, pc, r1
    1834:	00000000 	andeq	r0, r0, r0
    1838:	e0000000 	and	r0, r0, r0
    183c:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    1840:	02000000 	andeq	r0, r0, #0
    1844:	e89f3000 	ldm	pc, {ip, sp}	; <UNPREDICTABLE>
    1848:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    184c:	01000000 	mrseq	r0, (UNDEF: 0)
    1850:	00e85200 	rsceq	r5, r8, r0, lsl #4
    1854:	00f00000 	rscseq	r0, r0, r0
    1858:	00020000 	andeq	r0, r2, r0
    185c:	00f09f30 	rscseq	r9, r0, r0, lsr pc
    1860:	01030000 	mrseq	r0, (UNDEF: 3)
    1864:	00010000 	andeq	r0, r1, r0
    1868:	00000052 	andeq	r0, r0, r2, asr r0
    186c:	00000000 	andeq	r0, r0, r0
    1870:	0000e000 	andeq	lr, r0, r0
    1874:	0000f400 	andeq	pc, r0, r0, lsl #8
    1878:	30000200 	andcc	r0, r0, r0, lsl #4
    187c:	0000f49f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    1880:	00010000 	andeq	r0, r1, r0
    1884:	31000500 	tstcc	r0, r0, lsl #10
    1888:	9f240073 	svcls	0x00240073
    188c:	00000100 	andeq	r0, r0, r0, lsl #2
    1890:	00000103 	andeq	r0, r0, r3, lsl #2
    1894:	03510001 	cmpeq	r1, #1
    1898:	0c000001 	stceq	0, cr0, [r0], {1}
    189c:	08000001 	stmdaeq	r0, {r0}
    18a0:	01f33100 	mvnseq	r3, r0, lsl #2
    18a4:	241a4f50 	ldrcs	r4, [sl], #-3920	; 0xf50
    18a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    18ac:	00000000 	andeq	r0, r0, r0
    18b0:	00010c00 	andeq	r0, r1, r0, lsl #24
    18b4:	00013000 	andeq	r3, r1, r0
    18b8:	50000100 	andpl	r0, r0, r0, lsl #2
    18bc:	00000130 	andeq	r0, r0, r0, lsr r1
    18c0:	00000144 	andeq	r0, r0, r4, asr #2
    18c4:	01f30004 	mvnseq	r0, r4
    18c8:	00009f50 	andeq	r9, r0, r0, asr pc
    18cc:	00000000 	andeq	r0, r0, r0
    18d0:	01180000 	tsteq	r8, r0
    18d4:	01200000 	teqeq	r0, r0
    18d8:	00020000 	andeq	r0, r2, r0
    18dc:	01209f30 	teqeq	r0, r0, lsr pc
    18e0:	01200000 	teqeq	r0, r0
    18e4:	00010000 	andeq	r0, r1, r0
    18e8:	00012052 	andeq	r2, r1, r2, asr r0
    18ec:	00012800 	andeq	r2, r1, r0, lsl #16
    18f0:	30000200 	andcc	r0, r0, r0, lsl #4
    18f4:	0001289f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
    18f8:	00013b00 	andeq	r3, r1, r0, lsl #22
    18fc:	52000100 	andpl	r0, r0, #0, 2
	...
    1908:	00000118 	andeq	r0, r0, r8, lsl r1
    190c:	0000012c 	andeq	r0, r0, ip, lsr #2
    1910:	9f300002 	svcls	0x00300002
    1914:	0000012c 	andeq	r0, r0, ip, lsr #2
    1918:	00000138 	andeq	r0, r0, r8, lsr r1
    191c:	73310005 	teqvc	r1, #5
    1920:	389f2400 	ldmcc	pc, {sl, sp}	; <UNPREDICTABLE>
    1924:	3b000001 	blcc	1930 <_start-0x66d0>
    1928:	01000001 	tsteq	r0, r1
    192c:	013b5100 	teqeq	fp, r0, lsl #2
    1930:	01440000 	mrseq	r0, (UNDEF: 68)
    1934:	00080000 	andeq	r0, r8, r0
    1938:	5001f331 	andpl	pc, r1, r1, lsr r3	; <UNPREDICTABLE>
    193c:	9f241a4f 	svcls	0x00241a4f
	...
    1948:	00000144 	andeq	r0, r0, r4, asr #2
    194c:	000001d4 	ldrdeq	r0, [r0], -r4
    1950:	d4500001 	ldrble	r0, [r0], #-1
    1954:	10000001 	andne	r0, r0, r1
    1958:	01000002 	tsteq	r0, r2
    195c:	00005400 	andeq	r5, r0, r0, lsl #8
    1960:	00000000 	andeq	r0, r0, r0
    1964:	018c0000 	orreq	r0, ip, r0
    1968:	01900000 	orrseq	r0, r0, r0
    196c:	00010000 	andeq	r0, r1, r0
    1970:	00019855 	andeq	r9, r1, r5, asr r8
    1974:	00019c00 	andeq	r9, r1, r0, lsl #24
    1978:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    197c:	000001a4 	andeq	r0, r0, r4, lsr #3
    1980:	000001a8 	andeq	r0, r0, r8, lsr #3
    1984:	b0550001 	subslt	r0, r5, r1
    1988:	b4000001 	strlt	r0, [r0], #-1
    198c:	01000001 	tsteq	r0, r1
    1990:	01bc5500 			; <UNDEFINED> instruction: 0x01bc5500
    1994:	01c00000 	biceq	r0, r0, r0
    1998:	00010000 	andeq	r0, r1, r0
    199c:	0001c855 	andeq	ip, r1, r5, asr r8
    19a0:	0001cc00 	andeq	ip, r1, r0, lsl #24
    19a4:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    19a8:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    19ac:	00000210 	andeq	r0, r0, r0, lsl r2
    19b0:	00550001 	subseq	r0, r5, r1
    19b4:	00000000 	andeq	r0, r0, r0
    19b8:	60000000 	andvs	r0, r0, r0
    19bc:	88000001 	stmdahi	r0, {r0}
    19c0:	01000001 	tsteq	r0, r1
    19c4:	01885300 	orreq	r5, r8, r0, lsl #6
    19c8:	01900000 	orrseq	r0, r0, r0
    19cc:	001c0000 	andseq	r0, ip, r0
    19d0:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    19d4:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    19d8:	cccccd08 	stclgt	13, cr12, [ip], {8}
    19dc:	000000cc 	andeq	r0, r0, ip, asr #1
    19e0:	20081e00 	andcs	r1, r8, r0, lsl #28
    19e4:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    19e8:	9f25332c 	svcls	0x0025332c
    19ec:	00000190 	muleq	r0, r0, r1
    19f0:	00000194 	muleq	r0, r4, r1
    19f4:	94530001 	ldrbls	r0, [r3], #-1
    19f8:	9c000001 	stcls	0, cr0, [r0], {1}
    19fc:	1c000001 	stcne	0, cr0, [r0], {1}
    1a00:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    1a04:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    1a08:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1a0c:	0000cccc 	andeq	ip, r0, ip, asr #25
    1a10:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1a14:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1a18:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1a1c:	00019c9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
    1a20:	0001a000 	andeq	sl, r1, r0
    1a24:	53000100 	movwpl	r0, #256	; 0x100
    1a28:	000001a0 	andeq	r0, r0, r0, lsr #3
    1a2c:	000001a8 	andeq	r0, r0, r8, lsr #3
    1a30:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    1a34:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1a38:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1a3c:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1a40:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1a44:	25f72008 	ldrbcs	r2, [r7, #8]!
    1a48:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1a4c:	01a89f25 			; <UNDEFINED> instruction: 0x01a89f25
    1a50:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
    1a54:	00010000 	andeq	r0, r1, r0
    1a58:	0001ac53 	andeq	sl, r1, r3, asr ip
    1a5c:	0001b400 	andeq	fp, r1, r0, lsl #8
    1a60:	70001c00 	andvc	r1, r0, r0, lsl #24
    1a64:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1a68:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1a6c:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1a70:	00000000 	andeq	r0, r0, r0
    1a74:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1a78:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1a7c:	b49f2533 	ldrlt	r2, [pc], #1331	; 1a84 <_start-0x657c>
    1a80:	b8000001 	stmdalt	r0, {r0}
    1a84:	01000001 	tsteq	r0, r1
    1a88:	01b85300 			; <UNDEFINED> instruction: 0x01b85300
    1a8c:	01c00000 	biceq	r0, r0, r0
    1a90:	001c0000 	andseq	r0, ip, r0
    1a94:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    1a98:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    1a9c:	cccccd08 	stclgt	13, cr12, [ip], {8}
    1aa0:	000000cc 	andeq	r0, r0, ip, asr #1
    1aa4:	20081e00 	andcs	r1, r8, r0, lsl #28
    1aa8:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1aac:	9f25332c 	svcls	0x0025332c
    1ab0:	000001c0 	andeq	r0, r0, r0, asr #3
    1ab4:	000001c4 	andeq	r0, r0, r4, asr #3
    1ab8:	c4530001 	ldrbgt	r0, [r3], #-1
    1abc:	cc000001 	stcgt	0, cr0, [r0], {1}
    1ac0:	1c000001 	stcne	0, cr0, [r0], {1}
    1ac4:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    1ac8:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    1acc:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1ad0:	0000cccc 	andeq	ip, r0, ip, asr #25
    1ad4:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1ad8:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1adc:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1ae0:	0001cc9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
    1ae4:	0001d000 	andeq	sp, r1, r0
    1ae8:	53000100 	movwpl	r0, #256	; 0x100
    1aec:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1af0:	000001d4 	ldrdeq	r0, [r0], -r4
    1af4:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    1af8:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1afc:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1b00:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1b04:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1b08:	25f72008 	ldrbcs	r2, [r7, #8]!
    1b0c:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1b10:	01d49f25 	bicseq	r9, r4, r5, lsr #30
    1b14:	01dc0000 	bicseq	r0, ip, r0
    1b18:	001c0000 	andseq	r0, ip, r0
    1b1c:	2cf70074 	ldclcs	0, cr0, [r7], #464	; 0x1d0
    1b20:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    1b24:	cccccd08 	stclgt	13, cr12, [ip], {8}
    1b28:	000000cc 	andeq	r0, r0, ip, asr #1
    1b2c:	20081e00 	andcs	r1, r8, r0, lsl #28
    1b30:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1b34:	9f25332c 	svcls	0x0025332c
    1b38:	000001dc 	ldrdeq	r0, [r0], -ip
    1b3c:	000001e0 	andeq	r0, r0, r0, ror #3
    1b40:	00740017 	rsbseq	r0, r4, r7, lsl r0
    1b44:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1b48:	2cf70071 	ldclcs	0, cr0, [r7], #452	; 0x1c4
    1b4c:	081e25f7 	ldmdaeq	lr, {r0, r1, r2, r4, r5, r6, r7, r8, sl, sp}
    1b50:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1b54:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1b58:	0001e09f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
    1b5c:	00021000 	andeq	r1, r2, r0
    1b60:	74001c00 	strvc	r1, [r0], #-3072	; 0xc00
    1b64:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1b68:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1b6c:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1b70:	00000000 	andeq	r0, r0, r0
    1b74:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1b78:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1b7c:	009f2533 	addseq	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
    1b80:	00000000 	andeq	r0, r0, r0
    1b84:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    1b88:	fc000001 	stc2	0, cr0, [r0], {1}
    1b8c:	01000001 	tsteq	r0, r1
    1b90:	01fc5000 	mvnseq	r5, r0
    1b94:	02030000 	andeq	r0, r3, #0
    1b98:	00010000 	andeq	r0, r1, r0
    1b9c:	00000051 	andeq	r0, r0, r1, asr r0
    1ba0:	00000000 	andeq	r0, r0, r0
    1ba4:	00021000 	andeq	r1, r2, r0
    1ba8:	00022c00 	andeq	r2, r2, r0, lsl #24
    1bac:	50000100 	andpl	r0, r0, r0, lsl #2
    1bb0:	0000022c 	andeq	r0, r0, ip, lsr #4
    1bb4:	00000234 	andeq	r0, r0, r4, lsr r2
    1bb8:	34540001 	ldrbcc	r0, [r4], #-1
    1bbc:	3c000002 	stccc	0, cr0, [r0], {2}
    1bc0:	01000002 	tsteq	r0, r2
    1bc4:	023c5000 	eorseq	r5, ip, #0
    1bc8:	02440000 	subeq	r0, r4, #0
    1bcc:	00010000 	andeq	r0, r1, r0
    1bd0:	00024454 	andeq	r4, r2, r4, asr r4
    1bd4:	00025000 	andeq	r5, r2, r0
    1bd8:	f3000400 	vshl.u8	d0, d0, d0
    1bdc:	509f5001 	addspl	r5, pc, r1
    1be0:	54000002 	strpl	r0, [r0], #-2
    1be4:	01000002 	tsteq	r0, r2
    1be8:	02545000 	subseq	r5, r4, #0
    1bec:	025c0000 	subseq	r0, ip, #0
    1bf0:	00010000 	andeq	r0, r1, r0
    1bf4:	00000054 	andeq	r0, r0, r4, asr r0
    1bf8:	00000000 	andeq	r0, r0, r0
    1bfc:	00022000 	andeq	r2, r2, r0
    1c00:	00023000 	andeq	r3, r2, r0
    1c04:	30000200 	andcc	r0, r0, r0, lsl #4
    1c08:	0002309f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
    1c0c:	00023400 	andeq	r3, r2, r0, lsl #8
    1c10:	50000100 	andpl	r0, r0, r0, lsl #2
    1c14:	00000234 	andeq	r0, r0, r4, lsr r2
    1c18:	00000240 	andeq	r0, r0, r0, asr #4
    1c1c:	9f300002 	svcls	0x00300002
    1c20:	00000240 	andeq	r0, r0, r0, asr #4
    1c24:	0000024c 	andeq	r0, r0, ip, asr #4
    1c28:	00500001 	subseq	r0, r0, r1
    1c2c:	00000000 	andeq	r0, r0, r0
    1c30:	5c000000 	stcpl	0, cr0, [r0], {-0}
    1c34:	73000002 	movwvc	r0, #2
    1c38:	01000002 	tsteq	r0, r2
    1c3c:	02735000 	rsbseq	r5, r3, #0
    1c40:	02780000 	rsbseq	r0, r8, #0
    1c44:	00040000 	andeq	r0, r4, r0
    1c48:	9f5001f3 	svcls	0x005001f3
    1c4c:	00000278 	andeq	r0, r0, r8, ror r2
    1c50:	0000027b 	andeq	r0, r0, fp, ror r2
    1c54:	7b500001 	blvc	1401c60 <__bss_end__+0x13f7898>
    1c58:	80000002 	andhi	r0, r0, r2
    1c5c:	04000002 	streq	r0, [r0], #-2
    1c60:	5001f300 	andpl	pc, r1, r0, lsl #6
    1c64:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1c68:	00000000 	andeq	r0, r0, r0
    1c6c:	00025c00 	andeq	r5, r2, r0, lsl #24
    1c70:	00027300 	andeq	r7, r2, r0, lsl #6
    1c74:	51000100 	mrspl	r0, (UNDEF: 16)
    1c78:	00000273 	andeq	r0, r0, r3, ror r2
    1c7c:	00000278 	andeq	r0, r0, r8, ror r2
    1c80:	01f30004 	mvnseq	r0, r4
    1c84:	02789f51 	rsbseq	r9, r8, #324	; 0x144
    1c88:	027b0000 	rsbseq	r0, fp, #0
    1c8c:	00010000 	andeq	r0, r1, r0
    1c90:	00027b51 	andeq	r7, r2, r1, asr fp
    1c94:	00028000 	andeq	r8, r2, r0
    1c98:	f3000400 	vshl.u8	d0, d0, d0
    1c9c:	009f5101 	addseq	r5, pc, r1, lsl #2
    1ca0:	00000000 	andeq	r0, r0, r0
    1ca4:	80000000 	andhi	r0, r0, r0
    1ca8:	18000002 	stmdane	r0, {r1}
    1cac:	01000003 	tsteq	r0, r3
    1cb0:	03185000 	tsteq	r8, #0
    1cb4:	03580000 	cmpeq	r8, #0
    1cb8:	00010000 	andeq	r0, r1, r0
    1cbc:	00000054 	andeq	r0, r0, r4, asr r0
    1cc0:	00000000 	andeq	r0, r0, r0
    1cc4:	00028000 	andeq	r8, r2, r0
    1cc8:	00031b00 	andeq	r1, r3, r0, lsl #22
    1ccc:	51000100 	mrspl	r0, (UNDEF: 16)
    1cd0:	0000031b 	andeq	r0, r0, fp, lsl r3
    1cd4:	00000358 	andeq	r0, r0, r8, asr r3
    1cd8:	01f30004 	mvnseq	r0, r4
    1cdc:	00009f51 	andeq	r9, r0, r1, asr pc
    1ce0:	00000000 	andeq	r0, r0, r0
    1ce4:	02d00000 	sbcseq	r0, r0, #0
    1ce8:	02d40000 	sbcseq	r0, r4, #0
    1cec:	00010000 	andeq	r0, r1, r0
    1cf0:	0002dc56 	andeq	sp, r2, r6, asr ip
    1cf4:	0002e000 	andeq	lr, r2, r0
    1cf8:	56000100 	strpl	r0, [r0], -r0, lsl #2
    1cfc:	000002e8 	andeq	r0, r0, r8, ror #5
    1d00:	000002ec 	andeq	r0, r0, ip, ror #5
    1d04:	f4560001 			; <UNDEFINED> instruction: 0xf4560001
    1d08:	f8000002 			; <UNDEFINED> instruction: 0xf8000002
    1d0c:	01000002 	tsteq	r0, r2
    1d10:	03005600 	movweq	r5, #1536	; 0x600
    1d14:	03040000 	movweq	r0, #16384	; 0x4000
    1d18:	00010000 	andeq	r0, r1, r0
    1d1c:	00030c56 	andeq	r0, r3, r6, asr ip
    1d20:	00031000 	andeq	r1, r3, r0
    1d24:	56000100 	strpl	r0, [r0], -r0, lsl #2
    1d28:	00000314 	andeq	r0, r0, r4, lsl r3
    1d2c:	00000358 	andeq	r0, r0, r8, asr r3
    1d30:	00560001 	subseq	r0, r6, r1
    1d34:	00000000 	andeq	r0, r0, r0
    1d38:	a4000000 	strge	r0, [r0], #-0
    1d3c:	cc000002 	stcgt	0, cr0, [r0], {2}
    1d40:	01000002 	tsteq	r0, r2
    1d44:	02cc5300 	sbceq	r5, ip, #0, 6
    1d48:	02d40000 	sbcseq	r0, r4, #0
    1d4c:	001c0000 	andseq	r0, ip, r0
    1d50:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    1d54:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    1d58:	cccccd08 	stclgt	13, cr12, [ip], {8}
    1d5c:	000000cc 	andeq	r0, r0, ip, asr #1
    1d60:	20081e00 	andcs	r1, r8, r0, lsl #28
    1d64:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1d68:	9f25332c 	svcls	0x0025332c
    1d6c:	000002d4 	ldrdeq	r0, [r0], -r4
    1d70:	000002d8 	ldrdeq	r0, [r0], -r8
    1d74:	d8530001 	ldmdale	r3, {r0}^
    1d78:	e0000002 	and	r0, r0, r2
    1d7c:	1c000002 	stcne	0, cr0, [r0], {2}
    1d80:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    1d84:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    1d88:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1d8c:	0000cccc 	andeq	ip, r0, ip, asr #25
    1d90:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1d94:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1d98:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1d9c:	0002e09f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
    1da0:	0002e400 	andeq	lr, r2, r0, lsl #8
    1da4:	53000100 	movwpl	r0, #256	; 0x100
    1da8:	000002e4 	andeq	r0, r0, r4, ror #5
    1dac:	000002ec 	andeq	r0, r0, ip, ror #5
    1db0:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    1db4:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1db8:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1dbc:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1dc0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1dc4:	25f72008 	ldrbcs	r2, [r7, #8]!
    1dc8:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1dcc:	02ec9f25 	rsceq	r9, ip, #37, 30	; 0x94
    1dd0:	02f00000 	rscseq	r0, r0, #0
    1dd4:	00010000 	andeq	r0, r1, r0
    1dd8:	0002f053 	andeq	pc, r2, r3, asr r0	; <UNPREDICTABLE>
    1ddc:	0002f800 	andeq	pc, r2, r0, lsl #16
    1de0:	70001c00 	andvc	r1, r0, r0, lsl #24
    1de4:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1de8:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1dec:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1df0:	00000000 	andeq	r0, r0, r0
    1df4:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1df8:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1dfc:	f89f2533 			; <UNDEFINED> instruction: 0xf89f2533
    1e00:	fc000002 	stc2	0, cr0, [r0], {2}
    1e04:	01000002 	tsteq	r0, r2
    1e08:	02fc5300 	rscseq	r5, ip, #0, 6
    1e0c:	03040000 	movweq	r0, #16384	; 0x4000
    1e10:	001c0000 	andseq	r0, ip, r0
    1e14:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    1e18:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    1e1c:	cccccd08 	stclgt	13, cr12, [ip], {8}
    1e20:	000000cc 	andeq	r0, r0, ip, asr #1
    1e24:	20081e00 	andcs	r1, r8, r0, lsl #28
    1e28:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1e2c:	9f25332c 	svcls	0x0025332c
    1e30:	00000304 	andeq	r0, r0, r4, lsl #6
    1e34:	00000308 	andeq	r0, r0, r8, lsl #6
    1e38:	08530001 	ldmdaeq	r3, {r0}^
    1e3c:	10000003 	andne	r0, r0, r3
    1e40:	1c000003 	stcne	0, cr0, [r0], {3}
    1e44:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    1e48:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    1e4c:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1e50:	0000cccc 	andeq	ip, r0, ip, asr #25
    1e54:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1e58:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1e5c:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1e60:	0003109f 	muleq	r3, pc, r0	; <UNPREDICTABLE>
    1e64:	00031400 	andeq	r1, r3, r0, lsl #8
    1e68:	53000100 	movwpl	r0, #256	; 0x100
    1e6c:	00000314 	andeq	r0, r0, r4, lsl r3
    1e70:	00000318 	andeq	r0, r0, r8, lsl r3
    1e74:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    1e78:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1e7c:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1e80:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1e84:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1e88:	25f72008 	ldrbcs	r2, [r7, #8]!
    1e8c:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1e90:	03189f25 	tsteq	r8, #37, 30	; 0x94
    1e94:	03200000 	teqeq	r0, #0
    1e98:	001c0000 	andseq	r0, ip, r0
    1e9c:	2cf70074 	ldclcs	0, cr0, [r7], #464	; 0x1d0
    1ea0:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    1ea4:	cccccd08 	stclgt	13, cr12, [ip], {8}
    1ea8:	000000cc 	andeq	r0, r0, ip, asr #1
    1eac:	20081e00 	andcs	r1, r8, r0, lsl #28
    1eb0:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1eb4:	9f25332c 	svcls	0x0025332c
    1eb8:	00000320 	andeq	r0, r0, r0, lsr #6
    1ebc:	00000324 	andeq	r0, r0, r4, lsr #6
    1ec0:	00740017 	rsbseq	r0, r4, r7, lsl r0
    1ec4:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1ec8:	2cf70073 	ldclcs	0, cr0, [r7], #460	; 0x1cc
    1ecc:	081e25f7 	ldmdaeq	lr, {r0, r1, r2, r4, r5, r6, r7, r8, sl, sp}
    1ed0:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1ed4:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1ed8:	0003249f 	muleq	r3, pc, r4	; <UNPREDICTABLE>
    1edc:	00035800 	andeq	r5, r3, r0, lsl #16
    1ee0:	74001c00 	strvc	r1, [r0], #-3072	; 0xc00
    1ee4:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1ee8:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1eec:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1ef0:	00000000 	andeq	r0, r0, r0
    1ef4:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1ef8:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1efc:	009f2533 	addseq	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
    1f00:	00000000 	andeq	r0, r0, r0
    1f04:	1c000000 	stcne	0, cr0, [r0], {-0}
    1f08:	40000003 	andmi	r0, r0, r3
    1f0c:	01000003 	tsteq	r0, r3
    1f10:	03405000 	movteq	r5, #0
    1f14:	03480000 	movteq	r0, #32768	; 0x8000
    1f18:	00090000 	andeq	r0, r9, r0
    1f1c:	00730075 	rsbseq	r0, r3, r5, ror r0
    1f20:	21007124 	tstcs	r0, r4, lsr #2
    1f24:	0003489f 	muleq	r3, pc, r8	; <UNPREDICTABLE>
    1f28:	00034b00 	andeq	r4, r3, r0, lsl #22
    1f2c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1f38:	00000358 	andeq	r0, r0, r8, asr r3
    1f3c:	00000364 	andeq	r0, r0, r4, ror #6
    1f40:	64500001 	ldrbvs	r0, [r0], #-1
    1f44:	84000003 	strhi	r0, [r0], #-3
    1f48:	04000003 	streq	r0, [r0], #-3
    1f4c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1f50:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1f54:	00000000 	andeq	r0, r0, r0
    1f58:	00038400 	andeq	r8, r3, r0, lsl #8
    1f5c:	00039700 	andeq	r9, r3, r0, lsl #14
    1f60:	50000100 	andpl	r0, r0, r0, lsl #2
    1f64:	00000397 	muleq	r0, r7, r3
    1f68:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1f6c:	d0540001 	subsle	r0, r4, r1
    1f70:	08000003 	stmdaeq	r0, {r0, r1}
    1f74:	04000004 	streq	r0, [r0], #-4
    1f78:	5001f300 	andpl	pc, r1, r0, lsl #6
    1f7c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1f80:	00000000 	andeq	r0, r0, r0
    1f84:	0003f000 	andeq	pc, r3, r0
    1f88:	0003f400 	andeq	pc, r3, r0, lsl #8
    1f8c:	50000100 	andpl	r0, r0, r0, lsl #2
    1f90:	000003f4 	strdeq	r0, [r0], -r4
    1f94:	000003fb 	strdeq	r0, [r0], -fp
    1f98:	00510001 	subseq	r0, r1, r1
    1f9c:	00000000 	andeq	r0, r0, r0
    1fa0:	ac000000 	stcge	0, cr0, [r0], {-0}
    1fa4:	b4000003 	strlt	r0, [r0], #-3
    1fa8:	01000003 	tsteq	r0, r3
    1fac:	03b45000 			; <UNDEFINED> instruction: 0x03b45000
    1fb0:	03bb0000 			; <UNDEFINED> instruction: 0x03bb0000
    1fb4:	00010000 	andeq	r0, r1, r0
    1fb8:	00000051 	andeq	r0, r0, r1, asr r0
    1fbc:	00000000 	andeq	r0, r0, r0
    1fc0:	0003cc00 	andeq	ip, r3, r0, lsl #24
    1fc4:	0003d800 	andeq	sp, r3, r0, lsl #16
    1fc8:	50000100 	andpl	r0, r0, r0, lsl #2
    1fcc:	000003d8 	ldrdeq	r0, [r0], -r8
    1fd0:	000003df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1fd4:	00510001 	subseq	r0, r1, r1
    1fd8:	00000000 	andeq	r0, r0, r0
    1fdc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1fe0:	1b000004 	blne	1ff8 <_start-0x6008>
    1fe4:	01000004 	tsteq	r0, r4
    1fe8:	041b5000 	ldreq	r5, [fp], #-0
    1fec:	04540000 	ldrbeq	r0, [r4], #-0
    1ff0:	00010000 	andeq	r0, r1, r0
    1ff4:	00045454 	andeq	r5, r4, r4, asr r4
    1ff8:	00048c00 	andeq	r8, r4, r0, lsl #24
    1ffc:	f3000400 	vshl.u8	d0, d0, d0
    2000:	009f5001 	addseq	r5, pc, r1
    2004:	00000000 	andeq	r0, r0, r0
    2008:	74000000 	strvc	r0, [r0], #-0
    200c:	78000004 	stmdavc	r0, {r2}
    2010:	01000004 	tsteq	r0, r4
    2014:	04785000 	ldrbteq	r5, [r8], #-0
    2018:	047f0000 	ldrbteq	r0, [pc], #-0	; 2020 <_start-0x5fe0>
    201c:	00010000 	andeq	r0, r1, r0
    2020:	00000051 	andeq	r0, r0, r1, asr r0
    2024:	00000000 	andeq	r0, r0, r0
    2028:	00043000 	andeq	r3, r4, r0
    202c:	00043800 	andeq	r3, r4, r0, lsl #16
    2030:	50000100 	andpl	r0, r0, r0, lsl #2
    2034:	00000438 	andeq	r0, r0, r8, lsr r4
    2038:	0000043f 	andeq	r0, r0, pc, lsr r4
    203c:	00510001 	subseq	r0, r1, r1
    2040:	00000000 	andeq	r0, r0, r0
    2044:	50000000 	andpl	r0, r0, r0
    2048:	5c000004 	stcpl	0, cr0, [r0], {4}
    204c:	01000004 	tsteq	r0, r4
    2050:	045c5000 	ldrbeq	r5, [ip], #-0
    2054:	04630000 	strbteq	r0, [r3], #-0
    2058:	00010000 	andeq	r0, r1, r0
    205c:	00000051 	andeq	r0, r0, r1, asr r0
    2060:	00000000 	andeq	r0, r0, r0
    2064:	00048c00 	andeq	r8, r4, r0, lsl #24
    2068:	00049f00 	andeq	r9, r4, r0, lsl #30
    206c:	50000100 	andpl	r0, r0, r0, lsl #2
    2070:	0000049f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    2074:	000004e0 	andeq	r0, r0, r0, ror #9
    2078:	e0540001 	subs	r0, r4, r1
    207c:	04000004 	streq	r0, [r0], #-4
    2080:	04000005 	streq	r0, [r0], #-5
    2084:	5001f300 	andpl	pc, r1, r0, lsl #6
    2088:	0005049f 	muleq	r5, pc, r4	; <UNPREDICTABLE>
    208c:	00050800 	andeq	r0, r5, r0, lsl #16
    2090:	50000100 	andpl	r0, r0, r0, lsl #2
    2094:	00000508 	andeq	r0, r0, r8, lsl #10
    2098:	00000510 	andeq	r0, r0, r0, lsl r5
    209c:	00540001 	subseq	r0, r4, r1
    20a0:	00000000 	andeq	r0, r0, r0
    20a4:	b4000000 	strlt	r0, [r0], #-0
    20a8:	c3000004 	movwgt	r0, #4
    20ac:	08000004 	stmdaeq	r0, {r2}
    20b0:	00743100 	rsbseq	r3, r4, r0, lsl #2
    20b4:	1a007024 	bne	1e14c <__bss_end__+0x13d84>
    20b8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    20bc:	00000000 	andeq	r0, r0, r0
    20c0:	0004e000 	andeq	lr, r4, r0
    20c4:	0004f800 	andeq	pc, r4, r0, lsl #16
    20c8:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    20d4:	00000510 	andeq	r0, r0, r0, lsl r5
    20d8:	00000523 	andeq	r0, r0, r3, lsr #10
    20dc:	23500001 	cmpcs	r0, #1
    20e0:	48000005 	stmdami	r0, {r0, r2}
    20e4:	01000005 	tsteq	r0, r5
    20e8:	05485400 	strbeq	r5, [r8, #-1024]	; 0x400
    20ec:	05680000 	strbeq	r0, [r8, #-0]!
    20f0:	00040000 	andeq	r0, r4, r0
    20f4:	9f5001f3 	svcls	0x005001f3
	...
    2104:	00000004 	andeq	r0, r0, r4
    2108:	04520001 	ldrbeq	r0, [r2], #-1
    210c:	20000000 	andcs	r0, r0, r0
    2110:	04000000 	streq	r0, [r0], #-0
    2114:	5201f300 	andpl	pc, r1, #0, 6
    2118:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    2124:	00000c00 	andeq	r0, r0, r0, lsl #24
    2128:	50000100 	andpl	r0, r0, r0, lsl #2
    212c:	0000000c 	andeq	r0, r0, ip
    2130:	00000014 	andeq	r0, r0, r4, lsl r0
    2134:	01730003 	cmneq	r3, r3
    2138:	0000149f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    213c:	00002000 	andeq	r2, r0, r0
    2140:	53000100 	movwpl	r0, #256	; 0x100
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	00008010 	andeq	r8, r0, r0, lsl r0
  14:	000001a8 	andeq	r0, r0, r8, lsr #3
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	04f40002 	ldrbteq	r0, [r4], #2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	00008278 	andeq	r8, r0, r8, ror r2
  34:	00000058 	andeq	r0, r0, r8, asr r0
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	06890002 	streq	r0, [r9], r2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	000082d0 	ldrdeq	r8, [r0], -r0
  54:	0000003c 	andeq	r0, r0, ip, lsr r0
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	07a00002 	streq	r0, [r0, r2]!
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	0000830c 	andeq	r8, r0, ip, lsl #6
  74:	00000034 	andeq	r0, r0, r4, lsr r0
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	08920002 	ldmeq	r2, {r1}
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	00008340 	andeq	r8, r0, r0, asr #6
  94:	000004f8 	strdeq	r0, [r0], -r8
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	0f170002 	svceq	0x00170002
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	00008838 	andeq	r8, r0, r8, lsr r8
  b4:	00000028 	andeq	r0, r0, r8, lsr #32
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	101a0002 	andsne	r0, sl, r2
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	00008860 	andeq	r8, r0, r0, ror #16
  d4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	12fb0002 	rscsne	r0, fp, #2
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	00008910 	andeq	r8, r0, r0, lsl r9
  f4:	00000074 	andeq	r0, r0, r4, ror r0
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	14ac0002 	strtne	r0, [ip], #2
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	00008984 	andeq	r8, r0, r4, lsl #19
 114:	00000088 	andeq	r0, r0, r8, lsl #1
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	16880002 	strne	r0, [r8], r2
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	00008a0c 	andeq	r8, r0, ip, lsl #20
 134:	000001e8 	andeq	r0, r0, r8, ror #3
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	1a7a0002 	bne	1e80154 <__bss_end__+0x1e75d8c>
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	00008bf4 	strdeq	r8, [r0], -r4
 154:	00000620 	andeq	r0, r0, r0, lsr #12
	...
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	2c480002 	mcrrcs	0, 0, r0, r8, cr2
 168:	00040000 	andeq	r0, r4, r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	00009214 	andeq	r9, r0, r4, lsl r2
 174:	00000154 	andeq	r0, r0, r4, asr r1
	...
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	304b0002 	subcc	r0, fp, r2
 188:	00040000 	andeq	r0, r4, r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	000093cc 	andeq	r9, r0, ip, asr #7
 194:	00000568 	andeq	r0, r0, r8, ror #10
	...
 1a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a4:	38700002 	ldmdacc	r0!, {r1}^
 1a8:	00040000 	andeq	r0, r4, r0
 1ac:	00000000 	andeq	r0, r0, r0
 1b0:	00009934 	andeq	r9, r0, r4, lsr r9
 1b4:	00000020 	andeq	r0, r0, r0, lsr #32
	...
 1c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c4:	394f0002 	stmdbcc	pc, {r1}^	; <UNPREDICTABLE>
 1c8:	00040000 	andeq	r0, r4, r0
 1cc:	00000000 	andeq	r0, r0, r0
 1d0:	00009954 	andeq	r9, r0, r4, asr r9
 1d4:	00000050 	andeq	r0, r0, r0, asr r0
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000120 	andeq	r0, r0, r0, lsr #2
       4:	00d50002 	sbcseq	r0, r5, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
      20:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
      24:	6a6e6169 	bvs	1b985d0 <__bss_end__+0x1b8e208>
      28:	442f6e75 	strtmi	r6, [pc], #-3701	; 30 <_start-0x7fd0>
      2c:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
      30:	732f706f 	teqvc	pc, #111	; 0x6f
      34:	6f6f6863 	svcvs	0x006f6863
      38:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
      3c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
      40:	30323931 	eorscc	r3, r2, r1, lsr r9
      44:	3153432f 	cmpcc	r3, pc, lsr #6
      48:	2f453034 	svccs	0x00453034
      4c:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
      50:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
      54:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
      58:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
      5c:	2f006970 	svccs	0x00006970
      60:	2f727375 	svccs	0x00727375
      64:	61636f6c 	cmnvs	r3, ip, ror #30
      68:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
      6c:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
      70:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
      74:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
      78:	61652d65 	cmnvs	r5, r5, ror #26
      7c:	342f6962 	strtcc	r6, [pc], #-2402	; 84 <_start-0x7f7c>
      80:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
      84:	3173632d 	cmncc	r3, sp, lsr #6
      88:	2f653037 	svccs	0x00653037
      8c:	2f62696c 	svccs	0x0062696c
      90:	2f636367 	svccs	0x00636367
      94:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
      98:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
      9c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
      a0:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
      a4:	2f332e38 	svccs	0x00332e38
      a8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      ac:	00656475 	rsbeq	r6, r5, r5, ror r4
      b0:	742d3300 	strtvc	r3, [sp], #-768	; 0x300
      b4:	2d747365 	ldclcs	3, cr7, [r4, #-404]!	; 0xfffffe6c
      b8:	69777363 	ldmdbvs	r7!, {r0, r1, r5, r6, r8, r9, ip, sp, lr}^
      bc:	2e686374 	mcrcs	3, 3, r6, cr8, cr4, {3}
      c0:	00000063 	andeq	r0, r0, r3, rrx
      c4:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
      c8:	0100682e 	tsteq	r0, lr, lsr #16
      cc:	74730000 	ldrbtvc	r0, [r3], #-0
      d0:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
      d4:	6363672d 	cmnvs	r3, #11796480	; 0xb40000
      d8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
      dc:	00000000 	andeq	r0, r0, r0
      e0:	80100205 	andshi	r0, r0, r5, lsl #4
      e4:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
      e8:	322f2f01 	eorcc	r2, pc, #1, 30
      ec:	674b4b88 	strbvs	r4, [fp, -r8, lsl #23]
      f0:	0402004b 	streq	r0, [r2], #-75	; 0x4b
      f4:	02004b02 	andeq	r4, r0, #2048	; 0x800
      f8:	00650204 	rsbeq	r0, r5, r4, lsl #4
      fc:	06010402 	streq	r0, [r1], -r2, lsl #8
     100:	524c062e 	subpl	r0, ip, #48234496	; 0x2e00000
     104:	4c674c4b 	stclmi	12, cr4, [r7], #-300	; 0xfffffed4
     108:	4c674b84 	stclmi	11, cr4, [r7], #-528	; 0xfffffdf0
     10c:	00676767 	rsbeq	r6, r7, r7, ror #14
     110:	06010402 	streq	r0, [r1], -r2, lsl #8
     114:	4bd70666 	blmi	ff5c1ab4 <__bss_end__+0xff5b76ec>
     118:	02686730 	rsbeq	r6, r8, #48, 14	; 0xc00000
     11c:	022e172a 	eoreq	r1, lr, #11010048	; 0xa80000
     120:	01010014 	tsteq	r1, r4, lsl r0
     124:	00000102 	andeq	r0, r0, r2, lsl #2
     128:	00eb0002 	rsceq	r0, fp, r2
     12c:	01020000 	mrseq	r0, (UNDEF: 2)
     130:	000d0efb 	strdeq	r0, [sp], -fp
     134:	01010101 	tsteq	r1, r1, lsl #2
     138:	01000000 	mrseq	r0, (UNDEF: 0)
     13c:	6c010000 	stcvs	0, cr0, [r1], {-0}
     140:	00636269 	rsbeq	r6, r3, r9, ror #4
     144:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     148:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
     14c:	432f6c61 	teqmi	pc, #24832	; 0x6100
     150:	616c6c65 	cmnvs	ip, r5, ror #24
     154:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
     158:	6f6e2d6d 	svcvs	0x006e2d6d
     15c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     160:	2f696261 	svccs	0x00696261
     164:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
     168:	73632d33 	cmnvc	r3, #3264	; 0xcc0
     16c:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
     170:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     174:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     178:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     17c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     180:	61652d65 	cmnvs	r5, r5, ror #26
     184:	342f6962 	strtcc	r6, [pc], #-2402	; 18c <_start-0x7e74>
     188:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
     18c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     190:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     194:	73552f00 	cmpvc	r5, #0, 30
     198:	2f737265 	svccs	0x00737265
     19c:	61697262 	cmnvs	r9, r2, ror #4
     1a0:	6e756a6e 	vsubvs.f32	s13, s10, s29
     1a4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     1a8:	706f746b 	rsbvc	r7, pc, fp, ror #8
     1ac:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
     1b0:	2f6c6f6f 	svccs	0x006c6f6f
     1b4:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
     1b8:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
     1bc:	432f3032 	teqmi	pc, #50	; 0x32
     1c0:	30343153 	eorscc	r3, r4, r3, asr r1
     1c4:	73632f45 	cmnvc	r3, #276	; 0x114
     1c8:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
     1cc:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
     1d0:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 34 <_start-0x7fcc>
     1d4:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
     1d8:	72700000 	rsbsvc	r0, r0, #0
     1dc:	6b746e69 	blvs	1d1bb88 <__bss_end__+0x1d117c0>
     1e0:	0100632e 	tsteq	r0, lr, lsr #6
     1e4:	74730000 	ldrbtvc	r0, [r3], #-0
     1e8:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
     1ec:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     1f0:	623c0000 	eorsvs	r0, ip, #0
     1f4:	746c6975 	strbtvc	r6, [ip], #-2421	; 0x975
     1f8:	3e6e692d 	cdpcc	9, 6, cr6, cr14, cr13, {1}
     1fc:	00000000 	andeq	r0, r0, r0
     200:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
     204:	00030068 	andeq	r0, r3, r8, rrx
     208:	2d617600 	stclcs	6, cr7, [r1, #-0]
     20c:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
     210:	682e6b74 	stmdavs	lr!, {r2, r4, r5, r6, r8, r9, fp, sp, lr}
     214:	00000100 	andeq	r0, r0, r0, lsl #2
     218:	02050000 	andeq	r0, r5, #0
     21c:	00008278 	andeq	r8, r0, r8, ror r2
     220:	bf4b6b17 	svclt	0x004b6b17
     224:	000e0289 	andeq	r0, lr, r9, lsl #5
     228:	008a0101 	addeq	r0, sl, r1, lsl #2
     22c:	00020000 	andeq	r0, r2, r0
     230:	00000072 	andeq	r0, r0, r2, ror r0
     234:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     238:	0101000d 	tsteq	r1, sp
     23c:	00000101 	andeq	r0, r0, r1, lsl #2
     240:	00000100 	andeq	r0, r0, r0, lsl #2
     244:	62696c01 	rsbvs	r6, r9, #256	; 0x100
     248:	552f0063 	strpl	r0, [pc, #-99]!	; 1ed <_start-0x7e13>
     24c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     250:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
     254:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
     258:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
     25c:	6f746b73 	svcvs	0x00746b73
     260:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
     264:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; cc <_start-0x7f34>
     268:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
     26c:	31726574 	cmncc	r2, r4, ror r5
     270:	2f303239 	svccs	0x00303239
     274:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
     278:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
     27c:	30343173 	eorscc	r3, r4, r3, ror r1
     280:	30322d65 	eorscc	r2, r2, r5, ror #26
     284:	2f6e6977 	svccs	0x006e6977
     288:	7062696c 	rsbvc	r6, r2, ip, ror #18
     28c:	70000069 	andvc	r0, r0, r9, rrx
     290:	68637475 	stmdavs	r3!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
     294:	632e7261 	teqvs	lr, #268435462	; 0x10000006
     298:	00000100 	andeq	r0, r0, r0, lsl #2
     29c:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
     2a0:	00020068 	andeq	r0, r2, r8, rrx
     2a4:	05000000 	streq	r0, [r0, #-0]
     2a8:	0082d002 	addeq	sp, r2, r2
     2ac:	6b4a1400 	blvs	12852b4 <__bss_end__+0x127aeec>
     2b0:	0213bc13 	andseq	fp, r3, #4864	; 0x1300
     2b4:	01010008 	tsteq	r1, r8
     2b8:	00000096 	muleq	r0, r6, r0
     2bc:	006f0002 	rsbeq	r0, pc, r2
     2c0:	01020000 	mrseq	r0, (UNDEF: 2)
     2c4:	000d0efb 	strdeq	r0, [sp], -fp
     2c8:	01010101 	tsteq	r1, r1, lsl #2
     2cc:	01000000 	mrseq	r0, (UNDEF: 0)
     2d0:	6c010000 	stcvs	0, cr0, [r1], {-0}
     2d4:	00636269 	rsbeq	r6, r3, r9, ror #4
     2d8:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
     2dc:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
     2e0:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
     2e4:	2f6e756a 	svccs	0x006e756a
     2e8:	6b736544 	blvs	1cd9800 <__bss_end__+0x1ccf438>
     2ec:	2f706f74 	svccs	0x00706f74
     2f0:	6f686373 	svcvs	0x00686373
     2f4:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
     2f8:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
     2fc:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
     300:	53432f30 	movtpl	r2, #16176	; 0x3f30
     304:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
     308:	3173632f 	cmncc	r3, pc, lsr #6
     30c:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
     310:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
     314:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     318:	00697062 	rsbeq	r7, r9, r2, rrx
     31c:	74757000 	ldrbtvc	r7, [r5], #-0
     320:	00632e6b 	rsbeq	r2, r3, fp, ror #28
     324:	72000001 	andvc	r0, r0, #1
     328:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
     32c:	00000200 	andeq	r0, r0, r0, lsl #4
     330:	02050000 	andeq	r0, r5, #0
     334:	0000830c 	andeq	r8, r0, ip, lsl #6
     338:	002d4c15 	eoreq	r4, sp, r5, lsl ip
     33c:	2f020402 	svccs	0x00020402
     340:	02040200 	andeq	r0, r4, #0, 4
     344:	04020049 	streq	r0, [r2], #-73	; 0x49
     348:	062e0601 	strteq	r0, [lr], -r1, lsl #12
     34c:	0006026b 	andeq	r0, r6, fp, ror #4
     350:	01de0101 	bicseq	r0, lr, r1, lsl #2
     354:	00020000 	andeq	r0, r2, r0
     358:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     35c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     360:	0101000d 	tsteq	r1, sp
     364:	00000101 	andeq	r0, r0, r1, lsl #2
     368:	00000100 	andeq	r0, r0, r0, lsl #2
     36c:	62696c01 	rsbvs	r6, r9, #256	; 0x100
     370:	752f0063 	strvc	r0, [pc, #-99]!	; 315 <_start-0x7ceb>
     374:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 1b0 <_start-0x7e50>
     378:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
     37c:	6c65432f 	stclvs	3, cr4, [r5], #-188	; 0xffffff44
     380:	2f72616c 	svccs	0x0072616c
     384:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     388:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     38c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     390:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
     394:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
     398:	37317363 	ldrcc	r7, [r1, -r3, ror #6]!
     39c:	6c2f6530 	cfstr32vs	mvfx6, [pc], #-192	; 2e4 <_start-0x7d1c>
     3a0:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
     3a4:	612f6363 	teqvs	pc, r3, ror #6
     3a8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     3ac:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     3b0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     3b4:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
     3b8:	692f332e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, r9, ip, sp}	; <UNPREDICTABLE>
     3bc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     3c0:	2f006564 	svccs	0x00006564
     3c4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     3c8:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
     3cc:	6a6e6169 	bvs	1b98978 <__bss_end__+0x1b8e5b0>
     3d0:	442f6e75 	strtmi	r6, [pc], #-3701	; 3d8 <_start-0x7c28>
     3d4:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
     3d8:	732f706f 	teqvc	pc, #111	; 0x6f
     3dc:	6f6f6863 	svcvs	0x006f6863
     3e0:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     3e4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     3e8:	30323931 	eorscc	r3, r2, r1, lsr r9
     3ec:	3153432f 	cmpcc	r3, pc, lsr #6
     3f0:	2f453034 	svccs	0x00453034
     3f4:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
     3f8:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
     3fc:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
     400:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     404:	00006970 	andeq	r6, r0, r0, ror r9
     408:	702d6176 	eorvc	r6, sp, r6, ror r1
     40c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
     410:	00632e6b 	rsbeq	r2, r3, fp, ror #28
     414:	73000001 	movwvc	r0, #1
     418:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
     41c:	00682e67 	rsbeq	r2, r8, r7, ror #28
     420:	72000002 	andvc	r0, r0, #2
     424:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
     428:	00000300 	andeq	r0, r0, r0, lsl #6
     42c:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
     430:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
     434:	00003e6e 	andeq	r3, r0, lr, ror #28
     438:	00000000 	andeq	r0, r0, r0
     43c:	83400205 	movthi	r0, #517	; 0x205
     440:	26030000 	strcs	r0, [r3], -r0
     444:	13a50101 			; <UNDEFINED> instruction: 0x13a50101
     448:	02002d31 	andeq	r2, r0, #3136	; 0xc40
     44c:	002f0204 	eoreq	r0, pc, r4, lsl #4
     450:	2d020402 	cfstrscs	mvf0, [r2, #-8]
     454:	02040200 	andeq	r0, r4, #0, 4
     458:	0402002f 	streq	r0, [r2], #-47	; 0x2f
     45c:	4c4c2d01 	mcrrmi	13, 0, r2, ip, cr1
     460:	2f4b1430 	svccs	0x004b1430
     464:	0402004f 	streq	r0, [r2], #-79	; 0x4f
     468:	02006702 	andeq	r6, r0, #524288	; 0x80000
     46c:	4c650104 	stfmie	f0, [r5], #-16
     470:	2fa0304d 	svccs	0x00a0304d
     474:	26023031 			; <UNDEFINED> instruction: 0x26023031
     478:	2c2d8416 	cfstrscs	mvf8, [sp], #-88	; 0xffffffa8
     47c:	01040200 	mrseq	r0, R12_usr
     480:	04020030 	streq	r0, [r2], #-48	; 0x30
     484:	66063301 	strvs	r3, [r6], -r1, lsl #6
     488:	01040200 	mrseq	r0, R12_usr
     48c:	0402002e 	streq	r0, [r2], #-46	; 0x2e
     490:	21080601 	tstcs	r8, r1, lsl #12
     494:	73032f67 	movwvc	r2, #16231	; 0x3f67
     498:	2e130382 	cdpcs	3, 1, cr0, cr3, cr2, {4}
     49c:	01040200 	mrseq	r0, R12_usr
     4a0:	02002e06 	andeq	r2, r0, #6, 28	; 0x60
     4a4:	9f060104 	svcls	0x00060104
     4a8:	67034b6a 	strvs	r4, [r3, -sl, ror #22]
     4ac:	2e21032e 	cdpcs	3, 2, cr0, cr1, cr14, {1}
     4b0:	01040200 	mrseq	r0, R12_usr
     4b4:	02002e06 	andeq	r2, r0, #6, 28	; 0x60
     4b8:	9f060104 	svcls	0x00060104
     4bc:	01040200 	mrseq	r0, R12_usr
     4c0:	03f3d96a 	mvnseq	sp, #1736704	; 0x1a8000
     4c4:	20087fa6 	andcs	r7, r8, r6, lsr #31
     4c8:	0402002f 	streq	r0, [r2], #-47	; 0x2f
     4cc:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
     4d0:	032f4bd7 	teqeq	pc, #220160	; 0x35c00
     4d4:	83f200da 	mvnshi	r0, #218	; 0xda
     4d8:	0e03484c 	cdpeq	8, 0, cr4, cr3, cr12, {2}
     4dc:	2e75032e 	cdpcs	3, 7, cr0, cr5, cr14, {1}
     4e0:	4b842f2f 	blmi	fe10c1a4 <__bss_end__+0xfe101ddc>
     4e4:	314d2d2f 	cmpcc	sp, pc, lsr #26
     4e8:	00832f30 	addeq	r2, r3, r0, lsr pc
     4ec:	2c010402 	cfstrscs	mvf0, [r1], {2}
     4f0:	040200a2 	streq	r0, [r2], #-162	; 0xa2
     4f4:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
     4f8:	163602d8 			; <UNDEFINED> instruction: 0x163602d8
     4fc:	08d60e03 	ldmeq	r6, {r0, r1, r9, sl, fp}^
     500:	31f33021 	mvnscc	r3, r1, lsr #32
     504:	30f330f3 	ldrshtcc	r3, [r3], #3
     508:	30f3304b 	rscscc	r3, r3, fp, asr #32
     50c:	2f312308 	svccs	0x00312308
     510:	01040200 	mrseq	r0, R12_usr
     514:	04020065 	streq	r0, [r2], #-101	; 0x65
     518:	004a0602 	subeq	r0, sl, r2, lsl #12
     51c:	06010402 	streq	r0, [r1], -r2, lsl #8
     520:	00664203 	rsbeq	r4, r6, r3, lsl #4
     524:	06020402 	streq	r0, [r2], -r2, lsl #8
     528:	c2030666 	andgt	r0, r3, #106954752	; 0x6600000
     52c:	02684a00 	rsbeq	r4, r8, #0, 20
     530:	01010010 	tsteq	r1, r0, lsl r0
     534:	00000093 	muleq	r0, r3, r0
     538:	007d0002 	rsbseq	r0, sp, r2
     53c:	01020000 	mrseq	r0, (UNDEF: 2)
     540:	000d0efb 	strdeq	r0, [sp], -fp
     544:	01010101 	tsteq	r1, r1, lsl #2
     548:	01000000 	mrseq	r0, (UNDEF: 0)
     54c:	63010000 	movwvs	r0, #4096	; 0x1000
     550:	30343173 	eorscc	r3, r4, r3, ror r1
     554:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
     558:	552f0063 	strpl	r0, [pc, #-99]!	; 4fd <_start-0x7b03>
     55c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     560:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
     564:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
     568:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
     56c:	6f746b73 	svcvs	0x00746b73
     570:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
     574:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 3dc <_start-0x7c24>
     578:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
     57c:	31726574 	cmncc	r2, r4, ror r5
     580:	2f303239 	svccs	0x00303239
     584:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
     588:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
     58c:	30343173 	eorscc	r3, r4, r3, ror r1
     590:	30322d65 	eorscc	r2, r2, r5, ror #26
     594:	2f6e6977 	svccs	0x006e6977
     598:	7062696c 	rsbvc	r6, r2, ip, ror #18
     59c:	63000069 	movwvs	r0, #105	; 0x69
     5a0:	6e61656c 	cdpvs	5, 6, cr6, cr1, cr12, {3}
     5a4:	6265722d 	rsbvs	r7, r5, #-805306366	; 0xd0000002
     5a8:	2e746f6f 	cdpcs	15, 7, cr6, cr4, cr15, {3}
     5ac:	00010063 	andeq	r0, r1, r3, rrx
     5b0:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
     5b4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     5b8:	00000000 	andeq	r0, r0, r0
     5bc:	88380205 	ldmdahi	r8!, {r0, r2, r9}
     5c0:	2f150000 	svccs	0x00150000
     5c4:	06024b83 	streq	r4, [r2], -r3, lsl #23
     5c8:	21010100 	mrscs	r0, (UNDEF: 17)
     5cc:	02000001 	andeq	r0, r0, #1
     5d0:	0000f800 	andeq	pc, r0, r0, lsl #16
     5d4:	fb010200 	blx	40dde <__bss_end__+0x36a16>
     5d8:	01000d0e 	tsteq	r0, lr, lsl #26
     5dc:	00010101 	andeq	r0, r1, r1, lsl #2
     5e0:	00010000 	andeq	r0, r1, r0
     5e4:	73630100 	cmnvc	r3, #0, 2
     5e8:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
     5ec:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
     5f0:	73752f00 	cmnvc	r5, #0, 30
     5f4:	6f6c2f72 	svcvs	0x006c2f72
     5f8:	2f6c6163 	svccs	0x006c6163
     5fc:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
     600:	612f7261 	teqvs	pc, r1, ror #4
     604:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     608:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     60c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     610:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
     614:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
     618:	30373173 	eorscc	r3, r7, r3, ror r1
     61c:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     620:	63672f62 	cmnvs	r7, #392	; 0x188
     624:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
     628:	6f6e2d6d 	svcvs	0x006e2d6d
     62c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     630:	2f696261 	svccs	0x00696261
     634:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
     638:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
     63c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     640:	552f0065 	strpl	r0, [pc, #-101]!	; 5e3 <_start-0x7a1d>
     644:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     648:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
     64c:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
     650:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
     654:	6f746b73 	svcvs	0x00746b73
     658:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
     65c:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 4c4 <_start-0x7b3c>
     660:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
     664:	31726574 	cmncc	r2, r4, ror r5
     668:	2f303239 	svccs	0x00303239
     66c:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
     670:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
     674:	30343173 	eorscc	r3, r4, r3, ror r1
     678:	30322d65 	eorscc	r2, r2, r5, ror #26
     67c:	2f6e6977 	svccs	0x006e6977
     680:	7062696c 	rsbvc	r6, r2, ip, ror #18
     684:	63000069 	movwvs	r0, #105	; 0x69
     688:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     68c:	00632e74 	rsbeq	r2, r3, r4, ror lr
     690:	73000001 	movwvc	r0, #1
     694:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     698:	63672d74 	cmnvs	r7, #116, 26	; 0x1d00
     69c:	00682e63 	rsbeq	r2, r8, r3, ror #28
     6a0:	73000002 	movwvc	r0, #2
     6a4:	61752d77 	cmnvs	r5, r7, ror sp
     6a8:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
     6ac:	00000100 	andeq	r0, r0, r0, lsl #2
     6b0:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xf63
     6b4:	2d6c6f72 	stclcs	15, cr6, [ip, #-456]!	; 0xfffffe38
     6b8:	636f6c62 	cmnvs	pc, #25088	; 0x6200
     6bc:	00682e6b 	rsbeq	r2, r8, fp, ror #28
     6c0:	72000001 	andvc	r0, r0, #1
     6c4:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
     6c8:	00000300 	andeq	r0, r0, r0, lsl #6
     6cc:	02050000 	andeq	r0, r5, #0
     6d0:	00008860 	andeq	r8, r0, r0, ror #16
     6d4:	68684b17 	stmdavs	r8!, {r0, r1, r2, r4, r8, r9, fp, lr}^
     6d8:	2d2f3132 	stfcss	f3, [pc, #-200]!	; 618 <_start-0x79e8>
     6dc:	0402002f 	streq	r0, [r2], #-47	; 0x2f
     6e0:	2f4f4901 	svccs	0x004f4901
     6e4:	8367674b 	cmnhi	r7, #19660800	; 0x12c0000
     6e8:	022f4e67 	eoreq	r4, pc, #1648	; 0x670
     6ec:	01010010 	tsteq	r1, r0, lsl r0
     6f0:	00000099 	muleq	r0, r9, r0
     6f4:	00770002 	rsbseq	r0, r7, r2
     6f8:	01020000 	mrseq	r0, (UNDEF: 2)
     6fc:	000d0efb 	strdeq	r0, [sp], -fp
     700:	01010101 	tsteq	r1, r1, lsl #2
     704:	01000000 	mrseq	r0, (UNDEF: 0)
     708:	63010000 	movwvs	r0, #4096	; 0x1000
     70c:	30343173 	eorscc	r3, r4, r3, ror r1
     710:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
     714:	552f0063 	strpl	r0, [pc, #-99]!	; 6b9 <_start-0x7947>
     718:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     71c:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
     720:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
     724:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
     728:	6f746b73 	svcvs	0x00746b73
     72c:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
     730:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 598 <_start-0x7a68>
     734:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
     738:	31726574 	cmncc	r2, r4, ror r5
     73c:	2f303239 	svccs	0x00303239
     740:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
     744:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
     748:	30343173 	eorscc	r3, r4, r3, ror r1
     74c:	30322d65 	eorscc	r2, r2, r5, ror #26
     750:	2f6e6977 	svccs	0x006e6977
     754:	7062696c 	rsbvc	r6, r2, ip, ror #18
     758:	72000069 	andvc	r0, r0, #105	; 0x69
     75c:	6f6f6265 	svcvs	0x006f6265
     760:	00632e74 	rsbeq	r2, r3, r4, ror lr
     764:	72000001 	andvc	r0, r0, #1
     768:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
     76c:	00000200 	andeq	r0, r0, r0, lsl #4
     770:	02050000 	andeq	r0, r5, #0
     774:	00008910 	andeq	r8, r0, r0, lsl r9
     778:	14010d03 	strne	r0, [r1], #-3331	; 0xd03
     77c:	15852f31 	strne	r2, [r5, #3889]	; 0xf31
     780:	2f4d4b2f 	svccs	0x004d4b2f
     784:	67523567 	ldrbvs	r3, [r2, -r7, ror #10]
     788:	01001002 	tsteq	r0, r2
     78c:	0000a301 	andeq	sl, r0, r1, lsl #6
     790:	76000200 	strvc	r0, [r0], -r0, lsl #4
     794:	02000000 	andeq	r0, r0, #0
     798:	0d0efb01 	vstreq	d15, [lr, #-4]
     79c:	01010100 	mrseq	r0, (UNDEF: 17)
     7a0:	00000001 	andeq	r0, r0, r1
     7a4:	01000001 	tsteq	r0, r1
     7a8:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
     7ac:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
     7b0:	2f006372 	svccs	0x00006372
     7b4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     7b8:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
     7bc:	6a6e6169 	bvs	1b98d68 <__bss_end__+0x1b8e9a0>
     7c0:	442f6e75 	strtmi	r6, [pc], #-3701	; 7c8 <_start-0x7838>
     7c4:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
     7c8:	732f706f 	teqvc	pc, #111	; 0x6f
     7cc:	6f6f6863 	svcvs	0x006f6863
     7d0:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     7d4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     7d8:	30323931 	eorscc	r3, r2, r1, lsr r9
     7dc:	3153432f 	cmpcc	r3, pc, lsr #6
     7e0:	2f453034 	svccs	0x00453034
     7e4:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
     7e8:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
     7ec:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
     7f0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     7f4:	00006970 	andeq	r6, r0, r0, ror r9
     7f8:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
     7fc:	00632e72 	rsbeq	r2, r3, r2, ror lr
     800:	72000001 	andvc	r0, r0, #1
     804:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
     808:	00000200 	andeq	r0, r0, r0, lsl #4
     80c:	02050000 	andeq	r0, r5, #0
     810:	00008984 	andeq	r8, r0, r4, lsl #19
     814:	2d2f1316 	stccs	3, cr1, [pc, #-88]!	; 7c4 <_start-0x783c>
     818:	01040200 	mrseq	r0, R12_usr
     81c:	68062e06 	stmdavs	r6, {r1, r2, r9, sl, fp, sp}
     820:	4d4b2f31 	stclmi	15, cr2, [fp, #-196]	; 0xffffff3c
     824:	4b303132 	blmi	c0ccf4 <__bss_end__+0xc0292c>
     828:	2f6a2f4c 	svccs	0x006a2f4c
     82c:	022f842f 	eoreq	r8, pc, #788529152	; 0x2f000000
     830:	01010008 	tsteq	r1, r8
     834:	00000176 	andeq	r0, r0, r6, ror r1
     838:	01200002 	teqeq	r0, r2
     83c:	01020000 	mrseq	r0, (UNDEF: 2)
     840:	000d0efb 	strdeq	r0, [sp], -fp
     844:	01010101 	tsteq	r1, r1, lsl #2
     848:	01000000 	mrseq	r0, (UNDEF: 0)
     84c:	6d010000 	stcvs	0, cr0, [r1, #-0]
     850:	72732d79 	rsbsvc	r2, r3, #7744	; 0x1e40
     854:	552f0063 	strpl	r0, [pc, #-99]!	; 7f9 <_start-0x7807>
     858:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     85c:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
     860:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
     864:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
     868:	6f746b73 	svcvs	0x00746b73
     86c:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
     870:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 6d8 <_start-0x7928>
     874:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
     878:	31726574 	cmncc	r2, r4, ror r5
     87c:	2f303239 	svccs	0x00303239
     880:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
     884:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
     888:	30343173 	eorscc	r3, r4, r3, ror r1
     88c:	30322d65 	eorscc	r2, r2, r5, ror #26
     890:	2f6e6977 	svccs	0x006e6977
     894:	7062696c 	rsbvc	r6, r2, ip, ror #18
     898:	752f0069 	strvc	r0, [pc, #-105]!	; 837 <_start-0x77c9>
     89c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 6d8 <_start-0x7928>
     8a0:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
     8a4:	6c65432f 	stclvs	3, cr4, [r5], #-188	; 0xffffff44
     8a8:	2f72616c 	svccs	0x0072616c
     8ac:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     8b0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     8b4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     8b8:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
     8bc:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
     8c0:	37317363 	ldrcc	r7, [r1, -r3, ror #6]!
     8c4:	6c2f6530 	cfstr32vs	mvfx6, [pc], #-192	; 80c <_start-0x77f4>
     8c8:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
     8cc:	612f6363 	teqvs	pc, r3, ror #6
     8d0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     8d4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     8d8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     8dc:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
     8e0:	692f332e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, r9, ip, sp}	; <UNPREDICTABLE>
     8e4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     8e8:	2f006564 	svccs	0x00006564
     8ec:	2f727375 	svccs	0x00727375
     8f0:	61636f6c 	cmnvs	r3, ip, ror #30
     8f4:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
     8f8:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
     8fc:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     900:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     904:	61652d65 	cmnvs	r5, r5, ror #26
     908:	342f6962 	strtcc	r6, [pc], #-2402	; 910 <_start-0x76f0>
     90c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
     910:	3173632d 	cmncc	r3, sp, lsr #6
     914:	2f653037 	svccs	0x00653037
     918:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     91c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     920:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     924:	6e692f69 	cdpvs	15, 6, cr2, cr9, cr9, {3}
     928:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     92c:	6b000065 	blvs	ac8 <_start-0x7538>
     930:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
     934:	632e636f 	teqvs	lr, #-1140850687	; 0xbc000001
     938:	00000100 	andeq	r0, r0, r0, lsl #2
     93c:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
     940:	00020068 	andeq	r0, r2, r8, rrx
     944:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
     948:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
     94c:	00030068 	andeq	r0, r3, r8, rrx
     950:	72747300 	rsbsvc	r7, r4, #0, 6
     954:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
     958:	00040068 	andeq	r0, r4, r8, rrx
     95c:	05000000 	streq	r0, [r0, #-0]
     960:	008a0c02 	addeq	r0, sl, r2, lsl #24
     964:	01180300 	tsteq	r8, r0, lsl #6
     968:	0402002f 	streq	r0, [r2], #-47	; 0x2f
     96c:	06820601 	streq	r0, [r2], r1, lsl #12
     970:	834b4bd8 	movthi	r4, #48088	; 0xbbd8
     974:	002fbe6a 	eoreq	fp, pc, sl, ror #28
     978:	06010402 	streq	r0, [r1], -r2, lsl #8
     97c:	4bd80682 	blmi	ff60238c <__bss_end__+0xff5f7fc4>
     980:	0402004b 	streq	r0, [r2], #-75	; 0x4b
     984:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
     988:	30834bd7 	ldrdcc	r4, [r3], r7
     98c:	ba0a032f 	blt	281650 <__bss_end__+0x277288>
     990:	0402002f 	streq	r0, [r2], #-47	; 0x2f
     994:	06820601 	streq	r0, [r2], r1, lsl #12
     998:	13f967d7 	mvnsne	r6, #56360960	; 0x35c0000
     99c:	2f8414c2 	svccs	0x008414c2
     9a0:	01040200 	mrseq	r0, R12_usr
     9a4:	d7068206 	strle	r8, [r6, -r6, lsl #4]
     9a8:	000c0267 	andeq	r0, ip, r7, ror #4
     9ac:	03450101 	movteq	r0, #20737	; 0x5101
     9b0:	00020000 	andeq	r0, r2, r0
     9b4:	000001bd 			; <UNDEFINED> instruction: 0x000001bd
     9b8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     9bc:	0101000d 	tsteq	r1, sp
     9c0:	00000101 	andeq	r0, r0, r1, lsl #2
     9c4:	00000100 	andeq	r0, r0, r0, lsl #2
     9c8:	2d796d01 	ldclcs	13, cr6, [r9, #-4]!
     9cc:	00637273 	rsbeq	r7, r3, r3, ror r2
     9d0:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
     9d4:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
     9d8:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
     9dc:	2f6e756a 	svccs	0x006e756a
     9e0:	6b736544 	blvs	1cd9ef8 <__bss_end__+0x1ccfb30>
     9e4:	2f706f74 	svccs	0x00706f74
     9e8:	6f686373 	svcvs	0x00686373
     9ec:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
     9f0:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
     9f4:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
     9f8:	53432f30 	movtpl	r2, #16176	; 0x3f30
     9fc:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
     a00:	3173632f 	cmncc	r3, pc, lsr #6
     a04:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
     a08:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
     a0c:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     a10:	2f697062 	svccs	0x00697062
     a14:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
     a18:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
     a1c:	2f006372 	svccs	0x00006372
     a20:	2f727375 	svccs	0x00727375
     a24:	61636f6c 	cmnvs	r3, ip, ror #30
     a28:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
     a2c:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
     a30:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     a34:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     a38:	61652d65 	cmnvs	r5, r5, ror #26
     a3c:	342f6962 	strtcc	r6, [pc], #-2402	; a44 <_start-0x75bc>
     a40:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
     a44:	3173632d 	cmncc	r3, sp, lsr #6
     a48:	2f653037 	svccs	0x00653037
     a4c:	2f62696c 	svccs	0x0062696c
     a50:	2f636367 	svccs	0x00636367
     a54:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     a58:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     a5c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     a60:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
     a64:	2f332e38 	svccs	0x00332e38
     a68:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     a6c:	00656475 	rsbeq	r6, r5, r5, ror r4
     a70:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
     a74:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
     a78:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
     a7c:	2f6e756a 	svccs	0x006e756a
     a80:	6b736544 	blvs	1cd9f98 <__bss_end__+0x1ccfbd0>
     a84:	2f706f74 	svccs	0x00706f74
     a88:	6f686373 	svcvs	0x00686373
     a8c:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
     a90:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
     a94:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
     a98:	53432f30 	movtpl	r2, #16176	; 0x3f30
     a9c:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
     aa0:	3173632f 	cmncc	r3, pc, lsr #6
     aa4:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
     aa8:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
     aac:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     ab0:	00697062 	rsbeq	r7, r9, r2, rrx
     ab4:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
     ab8:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
     abc:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
     ac0:	2f6e756a 	svccs	0x006e756a
     ac4:	6b736544 	blvs	1cd9fdc <__bss_end__+0x1ccfc14>
     ac8:	2f706f74 	svccs	0x00706f74
     acc:	6f686373 	svcvs	0x00686373
     ad0:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
     ad4:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
     ad8:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
     adc:	53432f30 	movtpl	r2, #16176	; 0x3f30
     ae0:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
     ae4:	3173632f 	cmncc	r3, pc, lsr #6
     ae8:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
     aec:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
     af0:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     af4:	2f697062 	svccs	0x00697062
     af8:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
     afc:	77730000 	ldrbvc	r0, [r3, -r0]!
     b00:	7261752d 	rsbvc	r7, r1, #188743680	; 0xb400000
     b04:	00632e74 	rsbeq	r2, r3, r4, ror lr
     b08:	63000001 	movwvs	r0, #1
     b0c:	656c6379 	strbvs	r6, [ip, #-889]!	; 0x379
     b10:	6974752d 	ldmdbvs	r4!, {r0, r2, r3, r5, r8, sl, ip, sp, lr}^
     b14:	00682e6c 	rsbeq	r2, r8, ip, ror #28
     b18:	73000002 	movwvc	r0, #2
     b1c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     b20:	63672d74 	cmnvs	r7, #116, 26	; 0x1d00
     b24:	00682e63 	rsbeq	r2, r8, r3, ror #28
     b28:	73000003 	movwvc	r0, #3
     b2c:	61752d77 	cmnvs	r5, r7, ror sp
     b30:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
     b34:	00000200 	andeq	r0, r0, r0, lsl #4
     b38:	61647473 	smcvs	18243	; 0x4743
     b3c:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
     b40:	00000300 	andeq	r0, r0, r0, lsl #6
     b44:	6f697067 	svcvs	0x00697067
     b48:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     b4c:	70720000 	rsbsvc	r0, r2, r0
     b50:	00682e69 	rsbeq	r2, r8, r9, ror #28
     b54:	76000004 	strvc	r0, [r0], -r4
     b58:	72702d61 	rsbsvc	r2, r0, #6208	; 0x1840
     b5c:	6b746e69 	blvs	1d1c508 <__bss_end__+0x1d12140>
     b60:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
     b64:	623c0000 	eorsvs	r0, ip, #0
     b68:	746c6975 	strbtvc	r6, [ip], #-2421	; 0x975
     b6c:	3e6e692d 	cdpcc	9, 6, cr6, cr14, cr13, {1}
     b70:	00000000 	andeq	r0, r0, r0
     b74:	02050000 	andeq	r0, r5, #0
     b78:	00008bf4 	strdeq	r8, [r0], -r4
     b7c:	302f4c1a 	eorcc	r4, pc, sl, lsl ip	; <UNPREDICTABLE>
     b80:	0b030204 	bleq	c1398 <__bss_end__+0xb6fd0>
     b84:	6673032e 	ldrbtvs	r0, [r3], -lr, lsr #6
     b88:	04880104 	streq	r0, [r8], #260	; 0x104
     b8c:	73033502 	movwvc	r3, #13570	; 0x3502
     b90:	8a010466 	bhi	41d30 <__bss_end__+0x37968>
     b94:	03330204 	teqeq	r3, #4, 4	; 0x40000000
     b98:	01046673 	tsteq	r4, r3, ror r6
     b9c:	04820a03 	streq	r0, [r2], #2563	; 0xa03
     ba0:	73033102 	movwvc	r3, #12546	; 0x3102
     ba4:	03010466 	movweq	r0, #5222	; 0x1466
     ba8:	0204820c 	andeq	r8, r4, #12, 4	; 0xc0000000
     bac:	6673032f 	ldrbtvs	r0, [r3], -pc, lsr #6
     bb0:	0e030104 	adfeqs	f0, f3, f4
     bb4:	2d020482 	cfstrscs	mvf0, [r2, #-520]	; 0xfffffdf8
     bb8:	04667303 	strbteq	r7, [r6], #-771	; 0x303
     bbc:	82100301 	andshi	r0, r0, #67108864	; 0x4000000
     bc0:	032b0204 	teqeq	fp, #4, 4	; 0x40000000
     bc4:	01046673 	tsteq	r4, r3, ror r6
     bc8:	04821203 	streq	r1, [r2], #515	; 0x203
     bcc:	73032902 	movwvc	r2, #14594	; 0x3902
     bd0:	03010466 	movweq	r0, #5222	; 0x1466
     bd4:	02048214 	andeq	r8, r4, #20, 4	; 0x40000001
     bd8:	032e7903 	teqeq	lr, #49152	; 0xc000
     bdc:	01046673 	tsteq	r4, r3, ror r6
     be0:	04821603 	streq	r1, [r2], #1539	; 0x603
     be4:	2e770302 	cdpcs	3, 7, cr0, cr7, cr2, {0}
     be8:	04667303 	strbteq	r7, [r6], #-771	; 0x303
     bec:	82180301 	andshi	r0, r8, #67108864	; 0x4000000
     bf0:	4b2e1003 	blmi	b84c04 <__bss_end__+0xb7a83c>
     bf4:	2e70034d 	cdpcs	3, 7, cr0, cr0, cr13, {2}
     bf8:	4883844c 	stmmi	r3, {r2, r3, r6, sl, pc}
     bfc:	4e2e0d03 	cdpmi	13, 2, cr0, cr14, cr3, {0}
     c00:	02043331 	andeq	r3, r4, #-1006632960	; 0xc4000000
     c04:	042e4803 	strteq	r4, [lr], #-2051	; 0x803
     c08:	823a0301 	eorshi	r0, sl, #67108864	; 0x4000000
     c0c:	0302042f 	movweq	r0, #9263	; 0x242f
     c10:	01046645 	tsteq	r4, r5, asr #12
     c14:	2f823d03 	svccs	0x00823d03
     c18:	42030204 	andmi	r0, r3, #4, 4	; 0x40000000
     c1c:	03010482 	movweq	r0, #5250	; 0x1482
     c20:	2f8200c0 	svccs	0x008200c0
     c24:	bf030204 	svclt	0x00030204
     c28:	0104827f 	tsteq	r4, pc, ror r2
     c2c:	8200c303 	andhi	ip, r0, #201326592	; 0xc000000
     c30:	0302042f 	movweq	r0, #9263	; 0x242f
     c34:	04827fbc 	streq	r7, [r2], #4028	; 0xfbc
     c38:	00c60301 	sbceq	r0, r6, r1, lsl #6
     c3c:	02042f82 	andeq	r2, r4, #520	; 0x208
     c40:	827fb903 	rsbshi	fp, pc, #49152	; 0xc000
     c44:	c9030104 	stmdbgt	r3, {r2, r8}
     c48:	042f8200 	strteq	r8, [pc], #-512	; c50 <_start-0x73b0>
     c4c:	7fb60302 	svcvc	0x00b60302
     c50:	03010482 	movweq	r0, #5250	; 0x1482
     c54:	2f8200cc 	svccs	0x008200cc
     c58:	b3030204 	movwlt	r0, #12804	; 0x3204
     c5c:	0104827f 	tsteq	r4, pc, ror r2
     c60:	8200d003 	andhi	sp, r0, #3
     c64:	4c824c03 	stcmi	12, cr4, [r2], {3}
     c68:	03488384 	movteq	r8, #33668	; 0x8384
     c6c:	034e2e36 	movteq	r2, #60982	; 0xee36
     c70:	29034a54 	stmdbcs	r3, {r2, r4, r6, r9, fp, lr}
     c74:	9f34324a 	svcls	0x0034324a
     c78:	01040200 	mrseq	r0, R12_usr
     c7c:	d7064a06 	strle	r4, [r6, -r6, lsl #20]
     c80:	2cbb4b4e 	vldmiacs	fp!, {d4-<overflow reg d42>}
     c84:	01040200 	mrseq	r0, R12_usr
     c88:	6d062e06 	stcvs	14, cr2, [r6, #-24]	; 0xffffffe8
     c8c:	0084a44c 	addeq	sl, r4, ip, asr #8
     c90:	06010402 	streq	r0, [r1], -r2, lsl #8
     c94:	4dd7064a 	ldclmi	6, cr0, [r7, #296]	; 0x128
     c98:	02040200 	andeq	r0, r4, #0, 4
     c9c:	0402004b 	streq	r0, [r2], #-75	; 0x4b
     ca0:	02008102 	andeq	r8, r0, #-2147483648	; 0x80000000
     ca4:	2e060104 	adfcss	f0, f6, f4
     ca8:	a54c4d06 	strbge	r4, [ip, #-3334]	; 0xd06
     cac:	4b4b4bbc 	blmi	12d3ba4 <__bss_end__+0x12c97dc>
     cb0:	02002f6a 	andeq	r2, r0, #424	; 0x1a8
     cb4:	82060104 	andhi	r0, r6, #4, 2
     cb8:	04020082 	streq	r0, [r2], #-130	; 0x82
     cbc:	02009e04 	andeq	r9, r0, #4, 28	; 0x40
     cc0:	064a0104 	strbeq	r0, [sl], -r4, lsl #2
     cc4:	2fbd88d9 	svccs	0x00bd88d9
     cc8:	40084b4b 	andmi	r4, r8, fp, asr #22
     ccc:	04020067 	streq	r0, [r2], #-103	; 0x67
     cd0:	02002f02 	andeq	r2, r0, #2, 30
     cd4:	00490204 	subeq	r0, r9, r4, lsl #4
     cd8:	06010402 	streq	r0, [r1], -r2, lsl #8
     cdc:	3468062e 	strbtcc	r0, [r8], #-1582	; 0x62e
     ce0:	00a04b86 	adceq	r4, r0, r6, lsl #23
     ce4:	06010402 	streq	r0, [r1], -r2, lsl #8
     ce8:	68d70666 	ldmvs	r7, {r1, r2, r5, r6, r9, sl}^
     cec:	674b2208 	strbvs	r2, [fp, -r8, lsl #4]
     cf0:	0a02d84b 	beq	b6e24 <__bss_end__+0xaca5c>
     cf4:	01010100 	mrseq	r0, (UNDEF: 17)
     cf8:	02000001 	andeq	r0, r0, #1
     cfc:	0000ca00 	andeq	ip, r0, r0, lsl #20
     d00:	fb010200 	blx	4150a <__bss_end__+0x37142>
     d04:	01000d0e 	tsteq	r0, lr, lsl #26
     d08:	00010101 	andeq	r0, r1, r1, lsl #2
     d0c:	00010000 	andeq	r0, r1, r0
     d10:	796d0100 	stmdbvc	sp!, {r8}^
     d14:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
     d18:	73552f00 	cmpvc	r5, #0, 30
     d1c:	2f737265 	svccs	0x00737265
     d20:	61697262 	cmnvs	r9, r2, ror #4
     d24:	6e756a6e 	vsubvs.f32	s13, s10, s29
     d28:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     d2c:	706f746b 	rsbvc	r7, pc, fp, ror #8
     d30:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
     d34:	2f6c6f6f 	svccs	0x006c6f6f
     d38:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
     d3c:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
     d40:	432f3032 	teqmi	pc, #50	; 0x32
     d44:	30343153 	eorscc	r3, r4, r3, asr r1
     d48:	73632f45 	cmnvc	r3, #276	; 0x114
     d4c:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
     d50:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
     d54:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; bb8 <_start-0x7448>
     d58:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
     d5c:	3173632f 	cmncc	r3, pc, lsr #6
     d60:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
     d64:	00637273 	rsbeq	r7, r3, r3, ror r2
     d68:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
     d6c:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
     d70:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
     d74:	2f6e756a 	svccs	0x006e756a
     d78:	6b736544 	blvs	1cda290 <__bss_end__+0x1ccfec8>
     d7c:	2f706f74 	svccs	0x00706f74
     d80:	6f686373 	svcvs	0x00686373
     d84:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
     d88:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
     d8c:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
     d90:	53432f30 	movtpl	r2, #16176	; 0x3f30
     d94:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
     d98:	3173632f 	cmncc	r3, pc, lsr #6
     d9c:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
     da0:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
     da4:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     da8:	00697062 	rsbeq	r7, r9, r2, rrx
     dac:	72617500 	rsbvc	r7, r1, #0, 10
     db0:	00632e74 	rsbeq	r2, r3, r4, ror lr
     db4:	67000001 	strvs	r0, [r0, -r1]
     db8:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
     dbc:	00020068 	andeq	r0, r2, r8, rrx
     dc0:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
     dc4:	0300682e 	movweq	r6, #2094	; 0x82e
     dc8:	00000000 	andeq	r0, r0, r0
     dcc:	92140205 	andsls	r0, r4, #1342177280	; 0x50000000
     dd0:	36030000 	strcc	r0, [r3], -r0
     dd4:	67333001 	ldrvs	r3, [r3, -r1]!
     dd8:	30d8306d 	sbcscc	r3, r8, sp, rrx
     ddc:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
     de0:	2f866867 	svccs	0x00866867
     de4:	67306a67 	ldrvs	r6, [r0, -r7, ror #20]!
     de8:	672f6967 	strvs	r6, [pc, -r7, ror #18]!
     dec:	c1674c6a 	cmngt	r7, sl, ror #24
     df0:	2f302f2f 	svccs	0x00302f2f
     df4:	02304968 	eorseq	r4, r0, #104, 18	; 0x1a0000
     df8:	01010002 	tsteq	r1, r2
     dfc:	00000178 	andeq	r0, r0, r8, ror r1
     e00:	00ca0002 	sbceq	r0, sl, r2
     e04:	01020000 	mrseq	r0, (UNDEF: 2)
     e08:	000d0efb 	strdeq	r0, [sp], -fp
     e0c:	01010101 	tsteq	r1, r1, lsl #2
     e10:	01000000 	mrseq	r0, (UNDEF: 0)
     e14:	6d010000 	stcvs	0, cr0, [r1, #-0]
     e18:	72732d79 	rsbsvc	r2, r3, #7744	; 0x1e40
     e1c:	552f0063 	strpl	r0, [pc, #-99]!	; dc1 <_start-0x723f>
     e20:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     e24:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
     e28:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
     e2c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
     e30:	6f746b73 	svcvs	0x00746b73
     e34:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
     e38:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; ca0 <_start-0x7360>
     e3c:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
     e40:	31726574 	cmncc	r2, r4, ror r5
     e44:	2f303239 	svccs	0x00303239
     e48:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
     e4c:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
     e50:	30343173 	eorscc	r3, r4, r3, ror r1
     e54:	30322d65 	eorscc	r2, r2, r5, ror #26
     e58:	2f6e6977 	svccs	0x006e6977
     e5c:	7062696c 	rsbvc	r6, r2, ip, ror #18
     e60:	73632f69 	cmnvc	r3, #420	; 0x1a4
     e64:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
     e68:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
     e6c:	73552f00 	cmpvc	r5, #0, 30
     e70:	2f737265 	svccs	0x00737265
     e74:	61697262 	cmnvs	r9, r2, ror #4
     e78:	6e756a6e 	vsubvs.f32	s13, s10, s29
     e7c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     e80:	706f746b 	rsbvc	r7, pc, fp, ror #8
     e84:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
     e88:	2f6c6f6f 	svccs	0x006c6f6f
     e8c:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
     e90:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
     e94:	432f3032 	teqmi	pc, #50	; 0x32
     e98:	30343153 	eorscc	r3, r4, r3, asr r1
     e9c:	73632f45 	cmnvc	r3, #276	; 0x114
     ea0:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
     ea4:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
     ea8:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; d0c <_start-0x72f4>
     eac:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
     eb0:	70670000 	rsbvc	r0, r7, r0
     eb4:	632e6f69 	teqvs	lr, #420	; 0x1a4
     eb8:	00000100 	andeq	r0, r0, r0, lsl #2
     ebc:	6f697067 	svcvs	0x00697067
     ec0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     ec4:	70720000 	rsbsvc	r0, r2, r0
     ec8:	00682e69 	rsbeq	r2, r8, r9, ror #28
     ecc:	00000003 	andeq	r0, r0, r3
     ed0:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
     ed4:	03000093 	movweq	r0, #147	; 0x93
     ed8:	504e013e 	subpl	r0, lr, lr, lsr r1
     edc:	67210869 	strvs	r0, [r1, -r9, ror #16]!
     ee0:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
     ee4:	084b3267 	stmdaeq	fp, {r0, r1, r2, r5, r6, r9, ip, sp}^
     ee8:	5131dc22 	teqpl	r1, r2, lsr #24
     eec:	30504e13 	subscc	r4, r0, r3, lsl lr
     ef0:	135031be 	cmpne	r0, #-2147483601	; 0x8000002f
     ef4:	c0304f4d 	eorsgt	r4, r0, sp, asr #30
     ef8:	0869504c 	stmdaeq	r9!, {r2, r3, r6, ip, lr}^
     efc:	67676721 	strbvs	r6, [r7, -r1, lsr #14]!
     f00:	32676767 	rsbcc	r6, r7, #27000832	; 0x19c0000
     f04:	a421084b 	strtge	r0, [r1], #-2123	; 0x84b
     f08:	842f504c 	strthi	r5, [pc], #-76	; f10 <_start-0x70f0>
     f0c:	82750369 	rsbshi	r0, r5, #-1543503871	; 0xa4000001
     f10:	4d2e0c03 	stcmi	12, cr0, [lr, #-12]!
     f14:	4c4b4e30 	mcrrmi	14, 3, r4, fp, cr0
     f18:	696b6a4d 	stmdbvs	fp!, {r0, r2, r3, r6, r9, fp, sp, lr}^
     f1c:	67672108 	strbvs	r2, [r7, -r8, lsl #2]!
     f20:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
     f24:	22084b32 	andcs	r4, r8, #51200	; 0xc800
     f28:	31ba1a03 			; <UNDEFINED> instruction: 0x31ba1a03
     f2c:	522f4c9f 	eorpl	r4, pc, #40704	; 0x9f00
     f30:	4b2f4e4d 	blmi	bd486c <__bss_end__+0xbca4a4>
     f34:	67684b67 	strbvs	r4, [r8, -r7, ror #22]!
     f38:	672f4c67 	strvs	r4, [pc, -r7, ror #24]!
     f3c:	4c6e4b2f 	stclmi	11, cr4, [lr], #-188	; 0xffffff44
     f40:	674b2f4e 	strbvs	r2, [fp, -lr, asr #30]
     f44:	6767684b 	strbvs	r6, [r7, -fp, asr #16]!
     f48:	2f672f4c 	svccs	0x00672f4c
     f4c:	4e4b6d4b 	cdpmi	13, 4, cr6, cr11, cr11, {2}
     f50:	00674b2f 	rsbeq	r4, r7, pc, lsr #22
     f54:	06010402 	streq	r0, [r1], -r2, lsl #8
     f58:	9f680666 	svcls	0x00680666
     f5c:	0402002f 	streq	r0, [r2], #-47	; 0x2f
     f60:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
     f64:	73032f68 	movwvc	r2, #16232	; 0x3f68
     f68:	2e0e034a 	cdpcs	3, 0, cr0, cr14, cr10, {2}
     f6c:	2f4e4c4d 	svccs	0x004e4c4d
     f70:	02bcbc4b 	adcseq	fp, ip, #19200	; 0x4b00
     f74:	01010006 	tsteq	r1, r6
     f78:	000000ec 	andeq	r0, r0, ip, ror #1
     f7c:	00d00002 	sbcseq	r0, r0, r2
     f80:	01020000 	mrseq	r0, (UNDEF: 2)
     f84:	000d0efb 	strdeq	r0, [sp], -fp
     f88:	01010101 	tsteq	r1, r1, lsl #2
     f8c:	01000000 	mrseq	r0, (UNDEF: 0)
     f90:	6c010000 	stcvs	0, cr0, [r1], {-0}
     f94:	00636269 	rsbeq	r6, r3, r9, ror #4
     f98:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     f9c:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
     fa0:	432f6c61 	teqmi	pc, #24832	; 0x6100
     fa4:	616c6c65 	cmnvs	ip, r5, ror #24
     fa8:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
     fac:	6f6e2d6d 	svcvs	0x006e2d6d
     fb0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     fb4:	2f696261 	svccs	0x00696261
     fb8:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
     fbc:	73632d33 	cmnvc	r3, #3264	; 0xcc0
     fc0:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
     fc4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     fc8:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     fcc:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     fd0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     fd4:	61652d65 	cmnvs	r5, r5, ror #26
     fd8:	342f6962 	strtcc	r6, [pc], #-2402	; fe0 <_start-0x7020>
     fdc:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
     fe0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     fe4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     fe8:	73752f00 	cmnvc	r5, #0, 30
     fec:	6f6c2f72 	svcvs	0x006c2f72
     ff0:	2f6c6163 	svccs	0x006c6163
     ff4:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
     ff8:	612f7261 	teqvs	pc, r1, ror #4
     ffc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1000:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    1004:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1008:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
    100c:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
    1010:	30373173 	eorscc	r3, r7, r3, ror r1
    1014:	72612f65 	rsbvc	r2, r1, #404	; 0x194
    1018:	6f6e2d6d 	svcvs	0x006e2d6d
    101c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
    1020:	2f696261 	svccs	0x00696261
    1024:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1028:	00656475 	rsbeq	r6, r5, r5, ror r4
    102c:	6d656d00 	stclvs	13, cr6, [r5, #-0]
    1030:	2e746573 	mrccs	5, 3, r6, cr4, cr3, {3}
    1034:	00010063 	andeq	r0, r1, r3, rrx
    1038:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    103c:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    1040:	00020068 	andeq	r0, r2, r8, rrx
    1044:	72747300 	rsbsvc	r7, r4, #0, 6
    1048:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    104c:	00030068 	andeq	r0, r3, r8, rrx
    1050:	05000000 	streq	r0, [r0, #-0]
    1054:	00993402 	addseq	r3, r9, r2, lsl #8
    1058:	4c131400 	cfldrsmi	mvf1, [r3], {-0}
    105c:	0402002f 	streq	r0, [r2], #-47	; 0x2f
    1060:	024d4901 	subeq	r4, sp, #16384	; 0x4000
    1064:	01010002 	tsteq	r1, r2
    1068:	00000128 	andeq	r0, r0, r8, lsr #2
    106c:	010d0002 	tsteq	sp, r2
    1070:	01020000 	mrseq	r0, (UNDEF: 2)
    1074:	000d0efb 	strdeq	r0, [sp], -fp
    1078:	01010101 	tsteq	r1, r1, lsl #2
    107c:	01000000 	mrseq	r0, (UNDEF: 0)
    1080:	63010000 	movwvs	r0, #4096	; 0x1000
    1084:	30343173 	eorscc	r3, r4, r3, ror r1
    1088:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
    108c:	752f0063 	strvc	r0, [pc, #-99]!	; 1031 <_start-0x6fcf>
    1090:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; ecc <_start-0x7134>
    1094:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    1098:	6c65432f 	stclvs	3, cr4, [r5], #-188	; 0xffffff44
    109c:	2f72616c 	svccs	0x0072616c
    10a0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    10a4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    10a8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    10ac:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
    10b0:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
    10b4:	37317363 	ldrcc	r7, [r1, -r3, ror #6]!
    10b8:	6c2f6530 	cfstr32vs	mvfx6, [pc], #-192	; 1000 <_start-0x7000>
    10bc:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    10c0:	612f6363 	teqvs	pc, r3, ror #6
    10c4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    10c8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    10cc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    10d0:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
    10d4:	692f332e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, r9, ip, sp}	; <UNPREDICTABLE>
    10d8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    10dc:	2f006564 	svccs	0x00006564
    10e0:	2f727375 	svccs	0x00727375
    10e4:	61636f6c 	cmnvs	r3, ip, ror #30
    10e8:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
    10ec:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
    10f0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    10f4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    10f8:	61652d65 	cmnvs	r5, r5, ror #26
    10fc:	342f6962 	strtcc	r6, [pc], #-2402	; 1104 <_start-0x6efc>
    1100:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
    1104:	3173632d 	cmncc	r3, sp, lsr #6
    1108:	2f653037 	svccs	0x00653037
    110c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    1110:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    1114:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    1118:	6e692f69 	cdpvs	15, 6, cr2, cr9, cr9, {3}
    111c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    1120:	63000065 	movwvs	r0, #101	; 0x65
    1124:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    1128:	622d6c6f 	eorvs	r6, sp, #28416	; 0x6f00
    112c:	6b636f6c 	blvs	18dcee4 <__bss_end__+0x18d2b1c>
    1130:	0100632e 	tsteq	r0, lr, lsr #6
    1134:	74730000 	ldrbtvc	r0, [r3], #-0
    1138:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    113c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1140:	74730000 	ldrbtvc	r0, [r3], #-0
    1144:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
    1148:	6363672d 	cmnvs	r3, #11796480	; 0xb40000
    114c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1150:	77730000 	ldrbvc	r0, [r3, -r0]!
    1154:	7261752d 	rsbvc	r7, r1, #188743680	; 0xb400000
    1158:	00682e74 	rsbeq	r2, r8, r4, ror lr
    115c:	63000001 	movwvs	r0, #1
    1160:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    1164:	622d6c6f 	eorvs	r6, sp, #28416	; 0x6f00
    1168:	6b636f6c 	blvs	18dcf20 <__bss_end__+0x18d2b58>
    116c:	0100682e 	tsteq	r0, lr, lsr #16
    1170:	74730000 	ldrbtvc	r0, [r3], #-0
    1174:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    1178:	0300682e 	movweq	r6, #2094	; 0x82e
    117c:	00000000 	andeq	r0, r0, r0
    1180:	99540205 	ldmdbls	r4, {r0, r2, r9}^
    1184:	30160000 	andscc	r0, r6, r0
    1188:	144c6883 	strbne	r6, [ip], #-2179	; 0x883
    118c:	022f4b9f 	eoreq	r4, pc, #162816	; 0x27c00
    1190:	01010004 	tsteq	r1, r4

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0x56e
   4:	616d6b00 	cmnvs	sp, r0, lsl #22
   8:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
   c:	696c615f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r8, sp, lr}^
  10:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
  14:	756f6300 	strbvc	r6, [pc, #-768]!	; fffffd1c <__bss_end__+0xffff5954>
  18:	7300746e 	movwvc	r7, #1134	; 0x46e
  1c:	6b636174 	blvs	18d85f4 <__bss_end__+0x18ce22c>
  20:	554e4700 	strbpl	r4, [lr, #-1792]	; 0x700
  24:	34204320 	strtcc	r4, [r0], #-800	; 0x320
  28:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
  2c:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
  30:	613d7570 	teqvs	sp, r0, ror r5
  34:	31316d72 	teqcc	r1, r2, ror sp
  38:	7a6a3637 	bvc	1a8d91c <__bss_end__+0x1a83554>
  3c:	20732d66 	rsbscs	r2, r3, r6, ror #26
  40:	75746d2d 	ldrbvc	r6, [r4, #-3373]!	; 0xd2d
  44:	613d656e 	teqvs	sp, lr, ror #10
  48:	31316d72 	teqcc	r1, r2, ror sp
  4c:	7a6a3637 	bvc	1a8d930 <__bss_end__+0x1a83568>
  50:	20732d66 	rsbscs	r2, r3, r6, ror #26
  54:	6467672d 	strbtvs	r6, [r7], #-1837	; 0x72d
  58:	4f2d2062 	svcmi	0x002d2062
  5c:	732d2067 	teqvc	sp, #103	; 0x67
  60:	673d6474 			; <UNDEFINED> instruction: 0x673d6474
  64:	3939756e 	ldmdbcc	r9!, {r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}
  68:	66662d20 	strbtvs	r2, [r6], -r0, lsr #26
  6c:	73656572 	cmnvc	r5, #478150656	; 0x1c800000
  70:	646e6174 	strbtvs	r6, [lr], #-372	; 0x174
  74:	00676e69 	rsbeq	r6, r7, r9, ror #28
  78:	6d746f6e 	ldclvs	15, cr6, [r4, #-440]!	; 0xfffffe48
  7c:	006e6961 	rsbeq	r6, lr, r1, ror #18
  80:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
  84:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
  88:	6e750074 	mrcvs	0, 3, r0, cr5, cr4, {3}
  8c:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
  90:	63206465 	teqvs	r0, #1694498816	; 0x65000000
  94:	00726168 	rsbseq	r6, r2, r8, ror #2
  98:	61656c63 	cmnvs	r5, r3, ror #24
  9c:	65725f6e 	ldrbvs	r5, [r2, #-3950]!	; 0xf6e
  a0:	746f6f62 	strbtvc	r6, [pc], #-3938	; a8 <_start-0x7f58>
  a4:	77736300 	ldrbvc	r6, [r3, -r0, lsl #6]!
  a8:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
  ac:	6f687300 	svcvs	0x00687300
  b0:	75207472 	strvc	r7, [r0, #-1138]!	; 0x472
  b4:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  b8:	2064656e 	rsbcs	r6, r4, lr, ror #10
  bc:	00746e69 	rsbseq	r6, r4, r9, ror #28
  c0:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
  c4:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
  c8:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
  cc:	2f6e756a 	svccs	0x006e756a
  d0:	6b736544 	blvs	1cd95e8 <__bss_end__+0x1ccf220>
  d4:	2f706f74 	svccs	0x00706f74
  d8:	6f686373 	svcvs	0x00686373
  dc:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
  e0:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
  e4:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
  e8:	53432f30 	movtpl	r2, #16176	; 0x3f30
  ec:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
  f0:	3173632f 	cmncc	r3, pc, lsr #6
  f4:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
  f8:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
  fc:	616c2f6e 	cmnvs	ip, lr, ror #30
 100:	362f7362 	strtcc	r7, [pc], -r2, ror #6
 104:	7268742d 	rsbvc	r7, r8, #754974720	; 0x2d000000
 108:	73646165 	cmnvc	r4, #1073741849	; 0x40000019
 10c:	742d322f 	strtvc	r3, [sp], #-559	; 0x22f
 110:	61657268 	cmnvs	r5, r8, ror #4
 114:	722e7364 	eorvc	r7, lr, #100, 6	; 0x90000001
 118:	63616665 	cmnvs	r1, #105906176	; 0x6500000
 11c:	00726f74 	rsbseq	r6, r2, r4, ror pc
 120:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
 124:	00636f6c 	rsbeq	r6, r3, ip, ror #30
 128:	65766173 	ldrbvs	r6, [r6, #-371]!	; 0x173
 12c:	465f5f00 	ldrbmi	r5, [pc], -r0, lsl #30
 130:	54434e55 	strbpl	r4, [r3], #-3669	; 0xe55
 134:	5f4e4f49 	svcpl	0x004e4f49
 138:	6b63005f 	blvs	18c02bc <__bss_end__+0x18b5ef4>
 13c:	72007470 	andvc	r7, r0, #112, 8	; 0x70000000
 140:	735f6765 	cmpvc	pc, #26476544	; 0x1940000
 144:	5f657661 	svcpl	0x00657661
 148:	61657261 	cmnvs	r5, r1, ror #4
 14c:	742d3300 	strtvc	r3, [sp], #-768	; 0x300
 150:	2d747365 	ldclcs	3, cr7, [r4, #-404]!	; 0xfffffe6c
 154:	69777363 	ldmdbvs	r7!, {r0, r1, r5, r6, r8, r9, ip, sp, lr}^
 158:	2e686374 	mcrcs	3, 3, r6, cr8, cr4, {3}
 15c:	6f6c0063 	svcvs	0x006c0063
 160:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
 164:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 168:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 16c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
 170:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
 174:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 178:	7268745f 	rsbvc	r7, r8, #1593835520	; 0x5f000000
 17c:	5f646165 	svcpl	0x00646165
 180:	69730074 	ldmdbvs	r3!, {r2, r4, r5, r6}^
 184:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
 188:	6c006570 	cfstr32vs	mvfx6, [r0], {112}	; 0x70
 18c:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 190:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 194:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
 198:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 19c:	7268745f 	rsbvc	r7, r8, #1593835520	; 0x5f000000
 1a0:	00646165 	rsbeq	r6, r4, r5, ror #2
 1a4:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 1a8:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
 1ac:	72700074 	rsbsvc	r0, r0, #116	; 0x74
 1b0:	5f746e69 	svcpl	0x00746e69
 1b4:	5f646e61 	svcpl	0x00646e61
 1b8:	00656964 	rsbeq	r6, r5, r4, ror #18
 1bc:	746e6975 	strbtvc	r6, [lr], #-2421	; 0x975
 1c0:	745f3233 	ldrbvc	r3, [pc], #-563	; 1c8 <_start-0x7e38>
 1c4:	616d6b00 	cmnvs	sp, r0, lsl #22
 1c8:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 1cc:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 1d0:	70720074 	rsbsvc	r0, r2, r4, ror r0
 1d4:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xf69
 1d8:	5f746573 	svcpl	0x00746573
 1dc:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 1e0:	675f5f00 	ldrbvs	r5, [pc, -r0, lsl #30]
 1e4:	5f63756e 	svcpl	0x0063756e
 1e8:	6c5f6176 	ldfvse	f6, [pc], {118}	; 0x76
 1ec:	00747369 	rsbseq	r7, r4, r9, ror #6
 1f0:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 1f4:	6972702f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, ip, sp, lr}^
 1f8:	2e6b746e 	cdpcs	4, 6, cr7, cr11, cr14, {3}
 1fc:	61760063 	cmnvs	r6, r3, rrx
 200:	6972705f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
 204:	006b746e 	rsbeq	r7, fp, lr, ror #8
 208:	61765f5f 	cmnvs	r6, pc, asr pc
 20c:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
 210:	552f0074 	strpl	r0, [pc, #-116]!	; 1a4 <_start-0x7e5c>
 214:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 218:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 21c:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 220:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 224:	6f746b73 	svcvs	0x00746b73
 228:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 22c:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 94 <_start-0x7f6c>
 230:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 234:	31726574 	cmncc	r2, r4, ror r5
 238:	2f303239 	svccs	0x00303239
 23c:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 240:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 244:	30343173 	eorscc	r3, r4, r3, ror r1
 248:	30322d65 	eorscc	r2, r2, r5, ror #26
 24c:	2f6e6977 	svccs	0x006e6977
 250:	7062696c 	rsbvc	r6, r2, ip, ror #18
 254:	72610069 	rsbvc	r0, r1, #105	; 0x69
 258:	5f007367 	svcpl	0x00007367
 25c:	0070615f 	rsbseq	r6, r0, pc, asr r1
 260:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 264:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
 268:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
 26c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 270:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 274:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
 278:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 27c:	62696c00 	rsbvs	r6, r9, #0, 24
 280:	75702f63 	ldrbvc	r2, [r0, #-3939]!	; 0xf63
 284:	61686374 	smcvs	34356	; 0x8634
 288:	00632e72 	rsbeq	r2, r3, r2, ror lr
 28c:	5f697072 	svcpl	0x00697072
 290:	5f746573 	svcpl	0x00746573
 294:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 298:	62696c00 	rsbvs	r6, r9, #0, 24
 29c:	75702f63 	ldrbvc	r2, [r0, #-3939]!	; 0xf63
 2a0:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
 2a4:	746e6900 	strbtvc	r6, [lr], #-2304	; 0x900
 2a8:	616e7265 	cmnvs	lr, r5, ror #4
 2ac:	75705f6c 	ldrbvc	r5, [r0, #-3948]!	; 0xf6c
 2b0:	6e006b74 	vmovvs.16	d0[1], r6
 2b4:	705f6765 	subsvc	r6, pc, r5, ror #14
 2b8:	76657200 	strbtvc	r7, [r5], -r0, lsl #4
 2bc:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0x265
 2c0:	64736900 	ldrbtvs	r6, [r3], #-2304	; 0x900
 2c4:	74696769 	strbtvc	r6, [r9], #-1897	; 0x769
 2c8:	74757000 	ldrbtvc	r7, [r5], #-0
 2cc:	70665f73 	rsbvc	r5, r6, r3, ror pc
 2d0:	73616200 	cmnvc	r1, #0, 4
 2d4:	69730065 	ldmdbvs	r3!, {r0, r2, r5, r6}^
 2d8:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
 2dc:	6c00705f 	stcvs	0, cr7, [r0], {95}	; 0x5f
 2e0:	2f636269 	svccs	0x00636269
 2e4:	702d6176 	eorvc	r6, sp, r6, ror r1
 2e8:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 2ec:	00632e6b 	rsbeq	r2, r3, fp, ror #28
 2f0:	5f697072 	svcpl	0x00697072
 2f4:	5f746573 	svcpl	0x00746573
 2f8:	7074756f 	rsbsvc	r7, r4, pc, ror #10
 2fc:	77007475 	smlsdxvc	r0, r5, r4, r7
 300:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
 304:	74757000 	ldrbtvc	r7, [r5], #-0
 308:	70665f63 	rsbvc	r5, r6, r3, ror #30
 30c:	696d6500 	stmdbvs	sp!, {r8, sl, sp, lr}^
 310:	70720074 	rsbsvc	r0, r2, r4, ror r0
 314:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xf69
 318:	746f6f62 	strbtvc	r6, [pc], #-3938	; 320 <_start-0x7ce0>
 31c:	31736300 	cmncc	r3, r0, lsl #6
 320:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 324:	2f637273 	svccs	0x00637273
 328:	61656c63 	cmnvs	r5, r3, ror #24
 32c:	65722d6e 	ldrbvs	r2, [r2, #-3438]!	; 0xd6e
 330:	746f6f62 	strbtvc	r6, [pc], #-3938	; 338 <_start-0x7cc8>
 334:	6400632e 	strvs	r6, [r0], #-814	; 0x32e
 338:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 33c:	00736d5f 	rsbseq	r6, r3, pc, asr sp
 340:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 344:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
 348:	5f77735f 	svcpl	0x0077735f
 34c:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 350:	00726168 	rsbseq	r6, r2, r8, ror #2
 354:	73625f5f 	cmnvc	r2, #380	; 0x17c
 358:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xf73
 35c:	5f747261 	svcpl	0x00747261
 360:	7362005f 	cmnvc	r2, #95	; 0x5f
 364:	6e655f73 	mcrvs	15, 3, r5, cr5, cr3, {3}
 368:	79630064 	stmdbvc	r3!, {r2, r5, r6}^
 36c:	5f656c63 	svcpl	0x00656c63
 370:	5f726570 	svcpl	0x00726570
 374:	00746962 	rsbseq	r6, r4, r2, ror #18
 378:	736e6f63 	cmnvc	lr, #396	; 0x18c
 37c:	5f656c6f 	svcpl	0x00656c6f
 380:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 384:	5f777300 	svcpl	0x00777300
 388:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 38c:	6972705f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
 390:	006b746e 	rsbeq	r7, fp, lr, ror #8
 394:	43545550 	cmpmi	r4, #80, 10	; 0x14000000
 398:	5053455f 	subspl	r4, r3, pc, asr r5
 39c:	5241555f 	subpl	r5, r1, #398458880	; 0x17c00000
 3a0:	77730054 			; <UNDEFINED> instruction: 0x77730054
 3a4:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 3a8:	00745f74 	rsbseq	r5, r4, r4, ror pc
 3ac:	43545550 	cmpmi	r4, #80, 10	; 0x14000000
 3b0:	5f57535f 	svcpl	0x0057535f
 3b4:	54524155 	ldrbpl	r4, [r2], #-341	; 0x155
 3b8:	75616200 	strbvc	r6, [r1, #-512]!	; 0x200
 3bc:	55500064 	ldrbpl	r0, [r0, #-100]	; 0x64
 3c0:	485f4354 	ldmdami	pc, {r2, r4, r6, r8, r9, lr}^	; <UNPREDICTABLE>
 3c4:	41555f57 	cmpmi	r5, r7, asr pc
 3c8:	5f005452 	svcpl	0x00005452
 3cc:	61747363 	cmnvs	r4, r3, ror #6
 3d0:	75007472 	strvc	r7, [r0, #-1138]	; 0x472
 3d4:	5f747261 	svcpl	0x00747261
 3d8:	5f766564 	svcpl	0x00766564
 3dc:	77730074 			; <UNDEFINED> instruction: 0x77730074
 3e0:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 3e4:	75705f74 	ldrbvc	r5, [r0, #-3956]!	; 0xf74
 3e8:	75006374 	strvc	r6, [r0, #-884]	; 0x374
 3ec:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
 3f0:	6300745f 	movwvs	r7, #1119	; 0x45f
 3f4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 3f8:	625f6c6f 	subsvs	r6, pc, #28416	; 0x6f00
 3fc:	745f6b6c 	ldrbvc	r6, [pc], #-2924	; 404 <_start-0x7bfc>
 400:	5f777300 	svcpl	0x00777300
 404:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 408:	5f626300 	svcpl	0x00626300
 40c:	5f746567 	svcpl	0x00746567
 410:	636f6c62 	cmnvs	pc, #25088	; 0x6200
 414:	5f5f006b 	svcpl	0x005f006b
 418:	5f737362 	svcpl	0x00737362
 41c:	5f646e65 	svcpl	0x00646e65
 420:	7363005f 	cmnvc	r3, #95	; 0x5f
 424:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 428:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 42c:	7473632f 	ldrbtvc	r6, [r3], #-815	; 0x32f
 430:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
 434:	6f630063 	svcvs	0x00630063
 438:	6c6f736e 	stclvs	3, cr7, [pc], #-440	; 288 <_start-0x7d78>
 43c:	65645f65 	strbvs	r5, [r4, #-3941]!	; 0xf65
 440:	616d0076 	smcvs	53254	; 0xd006
 444:	00636967 	rsbeq	r6, r3, r7, ror #18
 448:	755f7461 	ldrbvc	r7, [pc, #-1121]	; ffffffef <__bss_end__+0xffff5c27>
 44c:	5f726573 	svcpl	0x00726573
 450:	6576656c 	ldrbvs	r6, [r6, #-1388]!	; 0x56c
 454:	4d50006c 	ldclmi	0, cr0, [r0, #-432]	; 0xfffffe50
 458:	5341505f 	movtpl	r5, #4191	; 0x105f
 45c:	524f5753 	subpl	r5, pc, #21757952	; 0x14c0000
 460:	73630044 	cmnvc	r3, #68	; 0x44
 464:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 468:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 46c:	6265722f 	rsbvs	r7, r5, #-268435454	; 0xf0000002
 470:	2e746f6f 	cdpcs	15, 7, cr6, cr4, cr15, {3}
 474:	4d500063 	ldclmi	0, cr0, [r0, #-396]	; 0xfffffe74
 478:	5453525f 	ldrbpl	r5, [r3], #-607	; 0x25f
 47c:	52575f43 	subspl	r5, r7, #268	; 0x10c
 480:	5f474643 	svcpl	0x00474643
 484:	4c4c5546 	cfstr64mi	mvdx5, [ip], {70}	; 0x46
 488:	5345525f 	movtpl	r5, #21087	; 0x525f
 48c:	50005445 	andpl	r5, r0, r5, asr #8
 490:	44575f4d 	ldrbmi	r5, [r7], #-3917	; 0xf4d
 494:	7300474f 	movwvc	r4, #1871	; 0x74f
 498:	755f7465 	ldrbvc	r7, [pc, #-1125]	; 3b <_start-0x7fc5>
 49c:	5f726573 	svcpl	0x00726573
 4a0:	6576656c 	ldrbvs	r6, [r6, #-1388]!	; 0x56c
 4a4:	5550006c 	ldrbpl	r0, [r0, #-108]	; 0x6c
 4a8:	00323354 	eorseq	r3, r2, r4, asr r3
 4ac:	525f4d50 	subspl	r4, pc, #80, 26	; 0x1400
 4b0:	00435453 	subeq	r5, r3, r3, asr r4
 4b4:	72737063 	rsbsvc	r7, r3, #99	; 0x63
 4b8:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
 4bc:	675f7265 	ldrbvs	r7, [pc, -r5, ror #4]
 4c0:	755f7465 	ldrbvc	r7, [pc, #-1125]	; 63 <_start-0x7f9d>
 4c4:	5f636573 	svcpl	0x00636573
 4c8:	00776172 	rsbseq	r6, r7, r2, ror r1
 4cc:	616c6564 	cmnvs	ip, r4, ror #10
 4d0:	65735f79 	ldrbvs	r5, [r3, #-3961]!	; 0xf79
 4d4:	73630063 	cmnvc	r3, #99	; 0x63
 4d8:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 4dc:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 4e0:	6d69742f 	cfstrdvs	mvd7, [r9, #-188]!	; 0xffffff44
 4e4:	632e7265 	teqvs	lr, #1342177286	; 0x50000006
 4e8:	54454700 	strbpl	r4, [r5], #-1792	; 0x700
 4ec:	74003233 	strvc	r3, [r0], #-563	; 0x233
 4f0:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
 4f4:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 4f8:	635f7961 	cmpvs	pc, #1589248	; 0x184000
 4fc:	656c6379 	strbvs	r6, [ip, #-889]!	; 0x379
 500:	65640073 	strbvs	r0, [r4, #-115]!	; 0x73
 504:	5f79616c 	svcpl	0x0079616c
 508:	74007375 	strvc	r7, [r0], #-885	; 0x375
 50c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 510:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 514:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0x55f
 518:	69730063 	ldmdbvs	r3!, {r0, r1, r5, r6}^
 51c:	745f657a 	ldrbvc	r6, [pc], #-1402	; 524 <_start-0x7adc>
 520:	72666b00 	rsbvc	r6, r6, #0, 22
 524:	615f6565 	cmpvs	pc, r5, ror #10
 528:	61006c6c 	tstvs	r0, ip, ror #24
 52c:	6e67696c 	cdpvs	9, 6, cr6, cr7, cr12, {3}
 530:	685f6465 	ldmdavs	pc, {r0, r2, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
 534:	5f706165 	svcpl	0x00706165
 538:	00727470 	rsbseq	r7, r2, r0, ror r4
 53c:	736d656d 	cmnvc	sp, #457179136	; 0x1b400000
 540:	6d007465 	cfstrsvs	mvf7, [r0, #-404]	; 0xfffffe6c
 544:	72732d79 	rsbsvc	r2, r3, #7744	; 0x1e40
 548:	6d6b2f63 	stclvs	15, cr2, [fp, #-396]!	; 0xfffffe74
 54c:	6f6c6c61 	svcvs	0x006c6c61
 550:	00632e63 	rsbeq	r2, r3, r3, ror #28
 554:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 558:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xf74
 55c:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 560:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
 564:	705f7469 	subsvc	r7, pc, r9, ror #8
 568:	696c6100 	stmdbvs	ip!, {r8, sp, lr}^
 56c:	656d6e67 	strbvs	r6, [sp, #-3687]!	; 0xe67
 570:	7200746e 	andvc	r7, r0, #1845493760	; 0x6e000000
 574:	646e756f 	strbtvs	r7, [lr], #-1391	; 0x56f
 578:	6e5f6465 	cdpvs	4, 5, cr6, cr15, cr5, {3}
 57c:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
 580:	6d6b0073 	stclvs	0, cr0, [fp, #-460]!	; 0xfffffe34
 584:	6f6c6c61 	svcvs	0x006c6c61
 588:	65685f63 	strbvs	r5, [r8, #-3939]!	; 0xf63
 58c:	705f7061 	subsvc	r7, pc, r1, rrx
 590:	6b007274 	blvs	1cf68 <__bss_end__+0x12ba0>
 594:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 598:	695f636f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 59c:	5f74696e 	svcpl	0x0074696e
 5a0:	5f746573 	svcpl	0x00746573
 5a4:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 5a8:	6f740074 	svcvs	0x00740074
 5ac:	6c6c615f 	stfvse	f6, [ip], #-380	; 0xfffffe84
 5b0:	7461636f 	strbtvc	r6, [r1], #-879	; 0x36f
 5b4:	5f5f0065 	svcpl	0x005f0065
 5b8:	70616568 	rsbvc	r6, r1, r8, ror #10
 5bc:	6174735f 	cmnvs	r4, pc, asr r3
 5c0:	5f5f7472 	svcpl	0x005f7472
 5c4:	63796300 	cmnvs	r9, #0, 6
 5c8:	7265705f 	rsbvc	r7, r5, #95	; 0x5f
 5cc:	7469625f 	strbtvc	r6, [r9], #-607	; 0x25f
 5d0:	69727700 	ldmdbvs	r2!, {r8, r9, sl, ip, sp, lr}^
 5d4:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 5d8:	755f6379 	ldrbvc	r6, [pc, #-889]	; 267 <_start-0x7d99>
 5dc:	6c69746e 	cfstrdvs	mvd7, [r9], #-440	; 0xfffffe48
 5e0:	5f777300 	svcpl	0x00777300
 5e4:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 5e8:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 5ec:	69745f63 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
 5f0:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8b <_start-0x7f75>
 5f4:	77730074 			; <UNDEFINED> instruction: 0x77730074
 5f8:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 5fc:	65675f74 	strbvs	r5, [r7, #-3956]!	; 0xf74
 600:	755f7374 	ldrbvc	r7, [pc, #-884]	; 294 <_start-0x7d6c>
 604:	6c69746e 	cfstrdvs	mvd7, [r9], #-440	; 0xfffffe48
 608:	5f777300 	svcpl	0x00777300
 60c:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 610:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 614:	65640063 	strbvs	r0, [r4, #-99]!	; 0x63
 618:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
 61c:	65640064 	strbvs	r0, [r4, #-100]!	; 0x64
 620:	5f79616c 	svcpl	0x0079616c
 624:	6379636e 	cmnvs	r9, #-1207959551	; 0xb8000001
 628:	0073656c 	rsbseq	r6, r3, ip, ror #10
 62c:	755f7773 	ldrbvc	r7, [pc, #-1907]	; fffffec1 <__bss_end__+0xffff5af9>
 630:	5f747261 	svcpl	0x00747261
 634:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
 638:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
 63c:	00726570 	rsbseq	r6, r2, r0, ror r5
 640:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 644:	5f74756f 	svcpl	0x0074756f
 648:	63657375 	cmnvs	r5, #-738197503	; 0xd4000001
 64c:	5f777300 	svcpl	0x00777300
 650:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 654:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
 658:	7067006b 	rsbvc	r0, r7, fp, rrx
 65c:	725f6f69 	subsvc	r6, pc, #420	; 0x1a4
 660:	00646165 	rsbeq	r6, r4, r5, ror #2
 664:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
 668:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
 66c:	61752d77 	cmnvs	r5, r7, ror sp
 670:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
 674:	61686300 	cmnvs	r8, r0, lsl #6
 678:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
 67c:	5f777300 	svcpl	0x00777300
 680:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 684:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 688:	69745f73 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 68c:	756f656d 	strbvc	r6, [pc, #-1389]!	; 127 <_start-0x7ed9>
 690:	6f5f0074 	svcvs	0x005f0074
 694:	67007475 	smlsdxvs	r0, r5, r4, r7
 698:	5f6f6970 	svcpl	0x006f6970
 69c:	74697277 	strbtvc	r7, [r9], #-631	; 0x277
 6a0:	73750065 	cmnvc	r5, #101	; 0x65
 6a4:	745f6365 	ldrbvc	r6, [pc], #-869	; 6ac <_start-0x7954>
 6a8:	6f656d69 	svcvs	0x00656d69
 6ac:	67007475 	smlsdxvs	r0, r5, r4, r7
 6b0:	5f6f6970 	svcpl	0x006f6970
 6b4:	5f746573 	svcpl	0x00746573
 6b8:	75706e69 	ldrbvc	r6, [r0, #-3689]!	; 0xe69
 6bc:	77730074 			; <UNDEFINED> instruction: 0x77730074
 6c0:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 6c4:	65675f74 	strbvs	r5, [r7, #-3956]!	; 0xf74
 6c8:	755f7374 	ldrbvc	r7, [pc, #-884]	; 35c <_start-0x7ca4>
 6cc:	6c69746e 	cfstrdvs	mvd7, [r9], #-440	; 0xfffffe48
 6d0:	6b6c625f 	blvs	1b19054 <__bss_end__+0x1b0ec8c>
 6d4:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 6d8:	65735f6f 	ldrbvs	r5, [r3, #-3951]!	; 0xf6f
 6dc:	756f5f74 	strbvc	r5, [pc, #-3956]!	; fffff770 <__bss_end__+0xffff53a8>
 6e0:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
 6e4:	69617700 	stmdbvs	r1!, {r8, r9, sl, ip, sp, lr}^
 6e8:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 6ec:	5f6c6974 	svcpl	0x006c6974
 6f0:	63657375 	cmnvs	r5, #-738197503	; 0xd4000001
 6f4:	58554100 	ldmdapl	r5, {r8, lr}^
 6f8:	5f554d5f 	svcpl	0x00554d5f
 6fc:	5f52434d 	svcpl	0x0052434d
 700:	00474552 	subeq	r4, r7, r2, asr r5
 704:	5f585541 	svcpl	0x00585541
 708:	495f554d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, sl, ip, lr}^	; <UNPREDICTABLE>
 70c:	45525f4f 	ldrbmi	r5, [r2, #-3919]	; 0xf4f
 710:	55410047 	strbpl	r0, [r1, #-71]	; 0x47
 714:	554d5f58 	strbpl	r5, [sp, #-3928]	; 0xf58
 718:	52534d5f 	subspl	r4, r3, #6080	; 0x17c0
 71c:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
 720:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 724:	55465f4f 	strbpl	r5, [r6, #-3919]	; 0xf4f
 728:	415f434e 	cmpmi	pc, lr, asr #6
 72c:	0030544c 	eorseq	r5, r0, ip, asr #8
 730:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 734:	6e61635f 	mcrvs	3, 3, r6, cr1, cr15, {2}
 738:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 73c:	55410063 	strbpl	r0, [r1, #-99]	; 0x63
 740:	554d5f58 	strbpl	r5, [sp, #-3928]	; 0xf58
 744:	544e435f 	strbpl	r4, [lr], #-863	; 0x35f
 748:	45525f4c 	ldrbmi	r5, [r2, #-3916]	; 0xf4c
 74c:	61750047 	cmnvs	r5, r7, asr #32
 750:	685f7472 	ldmdavs	pc, {r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 754:	645f7361 	ldrbvs	r7, [pc], #-865	; 75c <_start-0x78a4>
 758:	00617461 	rsbeq	r7, r1, r1, ror #8
 75c:	5f766564 	svcpl	0x00766564
 760:	72726162 	rsbsvc	r6, r2, #-2147483624	; 0x80000018
 764:	00726569 	rsbseq	r6, r2, r9, ror #10
 768:	4f495047 	svcmi	0x00495047
 76c:	4e55465f 	mrcmi	6, 2, r4, cr5, cr15, {2}
 770:	554f5f43 	strbpl	r5, [pc, #-3907]	; fffff835 <__bss_end__+0xffff546d>
 774:	54555054 	ldrbpl	r5, [r5], #-84	; 0x54
 778:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 77c:	55465f4f 	strbpl	r5, [r6, #-3919]	; 0xf4f
 780:	415f434e 	cmpmi	pc, lr, asr #6
 784:	0031544c 	eorseq	r5, r1, ip, asr #8
 788:	4f495047 	svcmi	0x00495047
 78c:	4e55465f 	mrcmi	6, 2, r4, cr5, cr15, {2}
 790:	4c415f43 	mcrrmi	15, 4, r5, r1, cr3
 794:	47003254 	smlsdmi	r0, r4, r2, r3
 798:	5f4f4950 	svcpl	0x004f4950
 79c:	434e5546 	movtmi	r5, #58694	; 0xe546
 7a0:	544c415f 	strbpl	r4, [ip], #-351	; 0x15f
 7a4:	50470033 	subpl	r0, r7, r3, lsr r0
 7a8:	465f4f49 	ldrbmi	r4, [pc], -r9, asr #30
 7ac:	5f434e55 	svcpl	0x00434e55
 7b0:	35544c41 	ldrbcc	r4, [r4, #-3137]	; 0xc41
 7b4:	58554100 	ldmdapl	r5, {r8, lr}^
 7b8:	5f554d5f 	svcpl	0x00554d5f
 7bc:	5f524549 	svcpl	0x00524549
 7c0:	00474552 	subeq	r4, r7, r2, asr r5
 7c4:	33747570 	cmncc	r4, #112, 10	; 0x1c000000
 7c8:	55410032 	strbpl	r0, [r1, #-50]	; 0x32
 7cc:	554d5f58 	strbpl	r5, [sp, #-3928]	; 0xf58
 7d0:	5249495f 	subpl	r4, r9, #1556480	; 0x17c000
 7d4:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
 7d8:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 7dc:	75665f6f 	strbvc	r5, [r6, #-3951]!	; 0xf6f
 7e0:	745f636e 	ldrbvc	r6, [pc], #-878	; 7e8 <_start-0x7818>
 7e4:	72617500 	rsbvc	r7, r1, #0, 10
 7e8:	61635f74 	smcvs	13812	; 0x35f4
 7ec:	75705f6e 	ldrbvc	r5, [r0, #-3950]!	; 0xf6e
 7f0:	41006374 	tstmi	r0, r4, ror r3
 7f4:	455f5855 	ldrbmi	r5, [pc, #-2133]	; ffffffa7 <__bss_end__+0xffff5bdf>
 7f8:	4c42414e 	stfmie	f4, [r2], {78}	; 0x4e
 7fc:	41005345 	tstmi	r0, r5, asr #6
 800:	495f5855 	ldmdbmi	pc, {r0, r2, r4, r6, fp, ip, lr}^	; <UNPREDICTABLE>
 804:	41005152 	tstmi	r0, r2, asr r1
 808:	4d5f5855 	ldclmi	8, cr5, [pc, #-340]	; 6bc <_start-0x7944>
 80c:	41425f55 	cmpmi	r2, r5, asr pc
 810:	525f4455 	subspl	r4, pc, #1426063360	; 0x55000000
 814:	41004745 	tstmi	r0, r5, asr #14
 818:	4d5f5855 	ldclmi	8, cr5, [pc, #-340]	; 6cc <_start-0x7934>
 81c:	54535f55 	ldrbpl	r5, [r3], #-3925	; 0xf55
 820:	525f5441 	subspl	r5, pc, #1090519040	; 0x41000000
 824:	47004745 	strmi	r4, [r0, -r5, asr #14]
 828:	5f4f4950 	svcpl	0x004f4950
 82c:	434e5546 	movtmi	r5, #58694	; 0xe546
 830:	544c415f 	strbpl	r4, [ip], #-351	; 0x15f
 834:	70670034 	rsbvc	r0, r7, r4, lsr r0
 838:	735f6f69 	cmpvc	pc, #420	; 0x1a4
 83c:	665f7465 	ldrbvs	r7, [pc], -r5, ror #8
 840:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xe75
 844:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 848:	5f585541 	svcpl	0x00585541
 84c:	535f554d 	cmppl	pc, #322961408	; 0x13400000
 850:	54415243 	strbpl	r5, [r1], #-579	; 0x243
 854:	6d004843 	stcvs	8, cr4, [r0, #-268]	; 0xfffffef4
 858:	72732d79 	rsbsvc	r2, r3, #7744	; 0x1e40
 85c:	61752f63 	cmnvs	r5, r3, ror #30
 860:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
 864:	58554100 	ldmdapl	r5, {r8, lr}^
 868:	5f554d5f 	svcpl	0x00554d5f
 86c:	5f52434c 	svcpl	0x0052434c
 870:	00474552 	subeq	r4, r7, r2, asr r5
 874:	4f495047 	svcmi	0x00495047
 878:	4e55465f 	mrcmi	6, 2, r4, cr5, cr15, {2}
 87c:	4e495f43 	cdpmi	15, 4, cr5, cr9, cr3, {2}
 880:	00545550 	subseq	r5, r4, r0, asr r5
 884:	5f585541 	svcpl	0x00585541
 888:	4c5f554d 	cfldr64mi	mvdx5, [pc], {77}	; 0x4d
 88c:	525f5253 	subspl	r5, pc, #805306373	; 0x30000005
 890:	75004745 	strvc	r4, [r0, #-1861]	; 0x745
 894:	5f747261 	svcpl	0x00747261
 898:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
 89c:	7973615f 	ldmdbvc	r3!, {r0, r1, r2, r3, r4, r6, r8, sp, lr}^
 8a0:	6700636e 	strvs	r6, [r0, -lr, ror #6]
 8a4:	32337465 	eorscc	r7, r3, #1694498816	; 0x65000000
 8a8:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 8ac:	76655f6f 	strbtvc	r5, [r5], -pc, ror #30
 8b0:	5f746e65 	svcpl	0x00746e65
 8b4:	65746564 	ldrbvs	r6, [r4, #-1380]!	; 0x564
 8b8:	64657463 	strbtvs	r7, [r5], #-1123	; 0x463
 8bc:	46504700 	ldrbmi	r4, [r0], -r0, lsl #14
 8c0:	324c4553 	subcc	r4, ip, #348127232	; 0x14c00000
 8c4:	43504700 	cmpmi	r0, #0, 14
 8c8:	0030524c 	eorseq	r5, r0, ip, asr #4
 8cc:	42414e45 	submi	r4, r1, #1104	; 0x450
 8d0:	495f454c 	ldmdbmi	pc, {r2, r3, r6, r8, sl, lr}^	; <UNPREDICTABLE>
 8d4:	5f535152 	svcpl	0x00535152
 8d8:	73690032 	cmnvc	r9, #50	; 0x32
 8dc:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
 8e0:	6e695f6f 	cdpvs	15, 6, cr5, cr9, cr15, {3}
 8e4:	70670074 	rsbvc	r0, r7, r4, ror r0
 8e8:	735f6f69 	cmpvc	pc, #420	; 0x1a4
 8ec:	6f5f7465 	svcvs	0x005f7465
 8f0:	6d006666 	stcvs	6, cr6, [r0, #-408]	; 0xfffffe68
 8f4:	72732d79 	rsbsvc	r2, r3, #7744	; 0x1e40
 8f8:	70672f63 	rsbvc	r2, r7, r3, ror #30
 8fc:	632e6f69 	teqvs	lr, #420	; 0x1a4
 900:	746e6900 	strbtvc	r6, [lr], #-2304	; 0x900
 904:	73616d5f 	cmnvc	r1, #6080	; 0x17c0
 908:	5047006b 	subpl	r0, r7, fp, rrx
 90c:	30544553 	subscc	r4, r4, r3, asr r5
 910:	53504700 	cmppl	r0, #0, 14
 914:	00315445 	eorseq	r5, r1, r5, asr #8
 918:	5f676572 	svcpl	0x00676572
 91c:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
 920:	4c504700 	mrrcmi	7, 0, r4, r0, cr0
 924:	00305645 	eorseq	r5, r0, r5, asr #12
 928:	454c5047 	strbmi	r5, [ip, #-71]	; 0x47
 92c:	67003156 	smlsdvs	r0, r6, r1, r3
 930:	5f6f6970 	svcpl	0x006f6970
 934:	00676572 	rsbeq	r6, r7, r2, ror r5
 938:	53465047 	movtpl	r5, #24647	; 0x6047
 93c:	00304c45 	eorseq	r4, r0, r5, asr #24
 940:	53465047 	movtpl	r5, #24647	; 0x6047
 944:	00314c45 	eorseq	r4, r1, r5, asr #24
 948:	53465047 	movtpl	r5, #24647	; 0x6047
 94c:	00334c45 	eorseq	r4, r3, r5, asr #24
 950:	53465047 	movtpl	r5, #24647	; 0x6047
 954:	00344c45 	eorseq	r4, r4, r5, asr #24
 958:	53465047 	movtpl	r5, #24647	; 0x6047
 95c:	00354c45 	eorseq	r4, r5, r5, asr #24
 960:	6f697067 	svcvs	0x00697067
 964:	6573665f 	ldrbvs	r6, [r3, #-1631]!	; 0x65f
 968:	4700306c 	strmi	r3, [r0, -ip, rrx]
 96c:	524c4350 	subpl	r4, ip, #80, 6	; 0x40000001
 970:	70670031 	rsbvc	r0, r7, r1, lsr r0
 974:	695f6f69 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 978:	725f746e 	subsvc	r7, pc, #1845493760	; 0x6e000000
 97c:	6e697369 	cdpvs	3, 6, cr7, cr9, cr9, {3}
 980:	64655f67 	strbtvs	r5, [r5], #-3943	; 0xf67
 984:	47006567 	strmi	r6, [r0, -r7, ror #10]
 988:	4e455250 	mcrmi	2, 2, r5, cr5, cr0, {2}
 98c:	50470030 	subpl	r0, r7, r0, lsr r0
 990:	314e4552 	cmpcc	lr, r2, asr r5
 994:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 998:	76655f6f 	strbtvc	r5, [r5], -pc, ror #30
 99c:	5f746e65 	svcpl	0x00746e65
 9a0:	61656c63 	cmnvs	r5, r3, ror #24
 9a4:	52490072 	subpl	r0, r9, #114	; 0x72
 9a8:	45505f51 	ldrbmi	r5, [r0, #-3921]	; 0xf51
 9ac:	4e49444e 	cdpmi	4, 4, cr4, cr9, cr14, {2}
 9b0:	00315f47 	eorseq	r5, r1, r7, asr #30
 9b4:	5f515249 	svcpl	0x00515249
 9b8:	444e4550 	strbmi	r4, [lr], #-1360	; 0x550
 9bc:	5f474e49 	svcpl	0x00474e49
 9c0:	69620032 	stmdbvs	r2!, {r1, r4, r5}^
 9c4:	73616d74 	cmnvc	r1, #116, 26	; 0x1d00
 9c8:	7067006b 	rsbvc	r0, r7, fp, rrx
 9cc:	735f6f69 	cmpvc	pc, #420	; 0x1a4
 9d0:	00307465 	eorseq	r7, r0, r5, ror #8
 9d4:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 9d8:	45504700 	ldrbmi	r4, [r0, #-1792]	; 0x700
 9dc:	00305344 	eorseq	r5, r0, r4, asr #6
 9e0:	44455047 	strbmi	r5, [r5], #-71	; 0x47
 9e4:	67003153 	smlsdvs	r0, r3, r1, r3
 9e8:	5f6f6970 	svcpl	0x006f6970
 9ec:	5f746573 	svcpl	0x00746573
 9f0:	47006e6f 	strmi	r6, [r0, -pc, ror #28]
 9f4:	4e454650 	mcrmi	6, 2, r4, cr5, cr0, {2}
 9f8:	50470030 	subpl	r0, r7, r0, lsr r0
 9fc:	314e4546 	cmpcc	lr, r6, asr #10
 a00:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 a04:	6e695f6f 	cdpvs	15, 6, cr5, cr9, cr15, {3}
 a08:	61665f74 	smcvs	26100	; 0x65f4
 a0c:	6e696c6c 	cdpvs	12, 6, cr6, cr9, cr12, {3}
 a10:	64655f67 	strbtvs	r5, [r5], #-3943	; 0xf67
 a14:	72006567 	andvc	r6, r0, #432013312	; 0x19c00000
 a18:	735f6765 	cmpvc	pc, #26476544	; 0x1940000
 a1c:	63656c65 	cmnvs	r5, #25856	; 0x6500
 a20:	70670074 	rsbvc	r0, r7, r4, ror r0
 a24:	635f6f69 	cmpvs	pc, #420	; 0x1a4
 a28:	0030726c 	eorseq	r7, r0, ip, ror #4
 a2c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 a30:	6d656d2f 	stclvs	13, cr6, [r5, #-188]!	; 0xffffff44
 a34:	2e746573 	mrccs	5, 3, r6, cr4, cr3, {3}
 a38:	62630063 	rsbvs	r0, r3, #99	; 0x63
 a3c:	77656e5f 			; <UNDEFINED> instruction: 0x77656e5f
 a40:	31736300 	cmncc	r3, r0, lsl #6
 a44:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 a48:	2f637273 	svccs	0x00637273
 a4c:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xf63
 a50:	2d6c6f72 	stclcs	15, cr6, [ip, #-456]!	; 0xfffffe38
 a54:	636f6c62 	cmnvs	pc, #25088	; 0x6200
 a58:	00632e6b 	rsbeq	r2, r3, fp, ror #28

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	00008010 	andeq	r8, r0, r0, lsl r0
  1c:	0000017c 	andeq	r0, r0, ip, ror r1
  20:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
  24:	86038504 	strhi	r8, [r3], -r4, lsl #10
  28:	00018e02 	andeq	r8, r1, r2, lsl #28
  2c:	00000014 	andeq	r0, r0, r4, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	0000818c 	andeq	r8, r0, ip, lsl #3
  38:	0000002c 	andeq	r0, r0, ip, lsr #32
  3c:	83080e42 	movwhi	r0, #36418	; 0x8e42
  40:	00018e02 	andeq	r8, r1, r2, lsl #28
  44:	0000000c 	andeq	r0, r0, ip
  48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  4c:	7c020001 	stcvc	0, cr0, [r2], {1}
  50:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  54:	00000024 	andeq	r0, r0, r4, lsr #32
  58:	00000044 	andeq	r0, r0, r4, asr #32
  5c:	00008278 	andeq	r8, r0, r8, ror r2
  60:	00000058 	andeq	r0, r0, r8, asr r0
  64:	80100e42 	andshi	r0, r0, r2, asr #28
  68:	82038104 	andhi	r8, r3, #4, 2
  6c:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
  70:	07841c0e 	streq	r1, [r4, lr, lsl #24]
  74:	058e0685 	streq	r0, [lr, #1669]	; 0x685
  78:	00280e42 	eoreq	r0, r8, r2, asr #28
  7c:	0000000c 	andeq	r0, r0, ip
  80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  84:	7c020001 	stcvc	0, cr0, [r2], {1}
  88:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  8c:	00000014 	andeq	r0, r0, r4, lsl r0
  90:	0000007c 	andeq	r0, r0, ip, ror r0
  94:	000082d0 	ldrdeq	r8, [r0], -r0
  98:	00000014 	andeq	r0, r0, r4, lsl r0
  9c:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
  a0:	00018e02 	andeq	r8, r1, r2, lsl #28
  a4:	0000000c 	andeq	r0, r0, ip
  a8:	0000007c 	andeq	r0, r0, ip, ror r0
  ac:	000082e4 	andeq	r8, r0, r4, ror #5
  b0:	00000018 	andeq	r0, r0, r8, lsl r0
  b4:	0000000c 	andeq	r0, r0, ip
  b8:	0000007c 	andeq	r0, r0, ip, ror r0
  bc:	000082fc 	strdeq	r8, [r0], -ip
  c0:	00000010 	andeq	r0, r0, r0, lsl r0
  c4:	0000000c 	andeq	r0, r0, ip
  c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  cc:	7c020001 	stcvc	0, cr0, [r2], {1}
  d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  d4:	00000018 	andeq	r0, r0, r8, lsl r0
  d8:	000000c4 	andeq	r0, r0, r4, asr #1
  dc:	0000830c 	andeq	r8, r0, ip, lsl #6
  e0:	00000034 	andeq	r0, r0, r4, lsr r0
  e4:	83100e42 	tsthi	r0, #1056	; 0x420
  e8:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
  ec:	00018e02 	andeq	r8, r1, r2, lsl #28
  f0:	0000000c 	andeq	r0, r0, ip
  f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  f8:	7c020001 	stcvc	0, cr0, [r2], {1}
  fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 100:	0000000c 	andeq	r0, r0, ip
 104:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 108:	00008340 	andeq	r8, r0, r0, asr #6
 10c:	00000014 	andeq	r0, r0, r4, lsl r0
 110:	0000000c 	andeq	r0, r0, ip
 114:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 118:	00008354 	andeq	r8, r0, r4, asr r3
 11c:	0000002c 	andeq	r0, r0, ip, lsr #32
 120:	0000000c 	andeq	r0, r0, ip
 124:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 128:	00008380 	andeq	r8, r0, r0, lsl #7
 12c:	00000040 	andeq	r0, r0, r0, asr #32
 130:	00000020 	andeq	r0, r0, r0, lsr #32
 134:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 138:	000083c0 	andeq	r8, r0, r0, asr #7
 13c:	0000019c 	muleq	r0, ip, r1
 140:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 144:	86058506 	strhi	r8, [r5], -r6, lsl #10
 148:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 14c:	42018e02 	andmi	r8, r1, #2, 28
 150:	0000580e 	andeq	r5, r0, lr, lsl #16
 154:	00000014 	andeq	r0, r0, r4, lsl r0
 158:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 15c:	0000855c 	andeq	r8, r0, ip, asr r5
 160:	00000054 	andeq	r0, r0, r4, asr r0
 164:	83080e42 	movwhi	r0, #36418	; 0x8e42
 168:	00018e02 	andeq	r8, r1, r2, lsl #28
 16c:	00000028 	andeq	r0, r0, r8, lsr #32
 170:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 174:	000085b0 			; <UNDEFINED> instruction: 0x000085b0
 178:	00000288 	andeq	r0, r0, r8, lsl #5
 17c:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
 180:	86088509 	strhi	r8, [r8], -r9, lsl #10
 184:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
 188:	8a048905 	bhi	1225a4 <__bss_end__+0x1181dc>
 18c:	8e028b03 	vmlahi.f64	d8, d2, d3
 190:	b00e4201 	andlt	r4, lr, r1, lsl #4
 194:	00000001 	andeq	r0, r0, r1
 198:	0000000c 	andeq	r0, r0, ip
 19c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1a0:	7c020001 	stcvc	0, cr0, [r2], {1}
 1a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1a8:	00000014 	andeq	r0, r0, r4, lsl r0
 1ac:	00000198 	muleq	r0, r8, r1
 1b0:	00008838 	andeq	r8, r0, r8, lsr r8
 1b4:	00000028 	andeq	r0, r0, r8, lsr #32
 1b8:	83080e42 	movwhi	r0, #36418	; 0x8e42
 1bc:	00018e02 	andeq	r8, r1, r2, lsl #28
 1c0:	0000000c 	andeq	r0, r0, ip
 1c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1c8:	7c020001 	stcvc	0, cr0, [r2], {1}
 1cc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1d0:	00000014 	andeq	r0, r0, r4, lsl r0
 1d4:	000001c0 	andeq	r0, r0, r0, asr #3
 1d8:	00008860 	andeq	r8, r0, r0, ror #16
 1dc:	00000020 	andeq	r0, r0, r0, lsr #32
 1e0:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 1e4:	00018e02 	andeq	r8, r1, r2, lsl #28
 1e8:	00000014 	andeq	r0, r0, r4, lsl r0
 1ec:	000001c0 	andeq	r0, r0, r0, asr #3
 1f0:	00008880 	andeq	r8, r0, r0, lsl #17
 1f4:	00000090 	muleq	r0, r0, r0
 1f8:	83080e42 	movwhi	r0, #36418	; 0x8e42
 1fc:	00018e02 	andeq	r8, r1, r2, lsl #28
 200:	0000000c 	andeq	r0, r0, ip
 204:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 208:	7c020001 	stcvc	0, cr0, [r2], {1}
 20c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 210:	0000000c 	andeq	r0, r0, ip
 214:	00000200 	andeq	r0, r0, r0, lsl #4
 218:	00008910 	andeq	r8, r0, r0, lsl r9
 21c:	00000018 	andeq	r0, r0, r8, lsl r0
 220:	0000000c 	andeq	r0, r0, ip
 224:	00000200 	andeq	r0, r0, r0, lsl #4
 228:	00008928 	andeq	r8, r0, r8, lsr #18
 22c:	00000014 	andeq	r0, r0, r4, lsl r0
 230:	00000014 	andeq	r0, r0, r4, lsl r0
 234:	00000200 	andeq	r0, r0, r0, lsl #4
 238:	0000893c 	andeq	r8, r0, ip, lsr r9
 23c:	00000048 	andeq	r0, r0, r8, asr #32
 240:	83080e42 	movwhi	r0, #36418	; 0x8e42
 244:	00018e02 	andeq	r8, r1, r2, lsl #28
 248:	0000000c 	andeq	r0, r0, ip
 24c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 250:	7c020001 	stcvc	0, cr0, [r2], {1}
 254:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 258:	0000000c 	andeq	r0, r0, ip
 25c:	00000248 	andeq	r0, r0, r8, asr #4
 260:	00008984 	andeq	r8, r0, r4, lsl #19
 264:	0000001c 	andeq	r0, r0, ip, lsl r0
 268:	00000014 	andeq	r0, r0, r4, lsl r0
 26c:	00000248 	andeq	r0, r0, r8, asr #4
 270:	000089a0 	andeq	r8, r0, r0, lsr #19
 274:	00000014 	andeq	r0, r0, r4, lsl r0
 278:	83080e42 	movwhi	r0, #36418	; 0x8e42
 27c:	00018e02 	andeq	r8, r1, r2, lsl #28
 280:	00000014 	andeq	r0, r0, r4, lsl r0
 284:	00000248 	andeq	r0, r0, r8, asr #4
 288:	000089b4 			; <UNDEFINED> instruction: 0x000089b4
 28c:	0000000c 	andeq	r0, r0, ip
 290:	83080e42 	movwhi	r0, #36418	; 0x8e42
 294:	00018e02 	andeq	r8, r1, r2, lsl #28
 298:	00000018 	andeq	r0, r0, r8, lsl r0
 29c:	00000248 	andeq	r0, r0, r8, asr #4
 2a0:	000089c0 	andeq	r8, r0, r0, asr #19
 2a4:	00000024 	andeq	r0, r0, r4, lsr #32
 2a8:	83100e42 	tsthi	r0, #1056	; 0x420
 2ac:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 2b0:	00018e02 	andeq	r8, r1, r2, lsl #28
 2b4:	00000014 	andeq	r0, r0, r4, lsl r0
 2b8:	00000248 	andeq	r0, r0, r8, asr #4
 2bc:	000089e4 	andeq	r8, r0, r4, ror #19
 2c0:	00000014 	andeq	r0, r0, r4, lsl r0
 2c4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 2c8:	00018e02 	andeq	r8, r1, r2, lsl #28
 2cc:	00000014 	andeq	r0, r0, r4, lsl r0
 2d0:	00000248 	andeq	r0, r0, r8, asr #4
 2d4:	000089f8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
 2d8:	00000014 	andeq	r0, r0, r4, lsl r0
 2dc:	83080e42 	movwhi	r0, #36418	; 0x8e42
 2e0:	00018e02 	andeq	r8, r1, r2, lsl #28
 2e4:	0000000c 	andeq	r0, r0, ip
 2e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2ec:	7c020001 	stcvc	0, cr0, [r2], {1}
 2f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2f4:	00000018 	andeq	r0, r0, r8, lsl r0
 2f8:	000002e4 	andeq	r0, r0, r4, ror #5
 2fc:	00008a0c 	andeq	r8, r0, ip, lsl #20
 300:	00000074 	andeq	r0, r0, r4, ror r0
 304:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 308:	86038504 	strhi	r8, [r3], -r4, lsl #10
 30c:	00018e02 	andeq	r8, r1, r2, lsl #28
 310:	00000014 	andeq	r0, r0, r4, lsl r0
 314:	000002e4 	andeq	r0, r0, r4, ror #5
 318:	00008a80 	andeq	r8, r0, r0, lsl #21
 31c:	0000009c 	muleq	r0, ip, r0
 320:	83080e42 	movwhi	r0, #36418	; 0x8e42
 324:	00018e02 	andeq	r8, r1, r2, lsl #28
 328:	00000014 	andeq	r0, r0, r4, lsl r0
 32c:	000002e4 	andeq	r0, r0, r4, ror #5
 330:	00008b1c 	andeq	r8, r0, ip, lsl fp
 334:	0000005c 	andeq	r0, r0, ip, asr r0
 338:	83080e42 	movwhi	r0, #36418	; 0x8e42
 33c:	00018e02 	andeq	r8, r1, r2, lsl #28
 340:	0000000c 	andeq	r0, r0, ip
 344:	000002e4 	andeq	r0, r0, r4, ror #5
 348:	00008b78 	andeq	r8, r0, r8, ror fp
 34c:	00000018 	andeq	r0, r0, r8, lsl r0
 350:	0000000c 	andeq	r0, r0, ip
 354:	000002e4 	andeq	r0, r0, r4, ror #5
 358:	00008b90 	muleq	r0, r0, fp
 35c:	00000010 	andeq	r0, r0, r0, lsl r0
 360:	00000014 	andeq	r0, r0, r4, lsl r0
 364:	000002e4 	andeq	r0, r0, r4, ror #5
 368:	00008ba0 	andeq	r8, r0, r0, lsr #23
 36c:	00000054 	andeq	r0, r0, r4, asr r0
 370:	83080e42 	movwhi	r0, #36418	; 0x8e42
 374:	00018e02 	andeq	r8, r1, r2, lsl #28
 378:	0000000c 	andeq	r0, r0, ip
 37c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 380:	7c020001 	stcvc	0, cr0, [r2], {1}
 384:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 388:	0000001c 	andeq	r0, r0, ip, lsl r0
 38c:	00000378 	andeq	r0, r0, r8, ror r3
 390:	00008bf4 	strdeq	r8, [r0], -r4
 394:	00000154 	andeq	r0, r0, r4, asr r1
 398:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 39c:	86058506 	strhi	r8, [r5], -r6, lsl #10
 3a0:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 3a4:	00018e02 	andeq	r8, r1, r2, lsl #28
 3a8:	00000020 	andeq	r0, r0, r0, lsr #32
 3ac:	00000378 	andeq	r0, r0, r8, ror r3
 3b0:	00008d48 	andeq	r8, r0, r8, asr #26
 3b4:	000001c8 	andeq	r0, r0, r8, asr #3
 3b8:	83200e42 	teqhi	r0, #1056	; 0x420
 3bc:	85078408 	strhi	r8, [r7, #-1032]	; 0x408
 3c0:	87058606 	strhi	r8, [r5, -r6, lsl #12]
 3c4:	89038804 	stmdbhi	r3, {r2, fp, pc}
 3c8:	00018e02 	andeq	r8, r1, r2, lsl #28
 3cc:	00000020 	andeq	r0, r0, r0, lsr #32
 3d0:	00000378 	andeq	r0, r0, r8, ror r3
 3d4:	00008f10 	andeq	r8, r0, r0, lsl pc
 3d8:	00000090 	muleq	r0, r0, r0
 3dc:	84200e42 	strthi	r0, [r0], #-3650	; 0xe42
 3e0:	86078508 	strhi	r8, [r7], -r8, lsl #10
 3e4:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
 3e8:	8a038904 	bhi	e2800 <__bss_end__+0xd8438>
 3ec:	00018e02 	andeq	r8, r1, r2, lsl #28
 3f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f4:	00000378 	andeq	r0, r0, r8, ror r3
 3f8:	00008fa0 	andeq	r8, r0, r0, lsr #31
 3fc:	0000007c 	andeq	r0, r0, ip, ror r0
 400:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 404:	86058506 	strhi	r8, [r5], -r6, lsl #10
 408:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 40c:	00018e02 	andeq	r8, r1, r2, lsl #28
 410:	0000001c 	andeq	r0, r0, ip, lsl r0
 414:	00000378 	andeq	r0, r0, r8, ror r3
 418:	0000901c 	andeq	r9, r0, ip, lsl r0
 41c:	000000c0 	andeq	r0, r0, r0, asr #1
 420:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 424:	86058506 	strhi	r8, [r5], -r6, lsl #10
 428:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 42c:	00018e02 	andeq	r8, r1, r2, lsl #28
 430:	00000014 	andeq	r0, r0, r4, lsl r0
 434:	00000378 	andeq	r0, r0, r8, ror r3
 438:	000090dc 	ldrdeq	r9, [r0], -ip
 43c:	0000003c 	andeq	r0, r0, ip, lsr r0
 440:	83080e42 	movwhi	r0, #36418	; 0x8e42
 444:	00018e02 	andeq	r8, r1, r2, lsl #28
 448:	00000018 	andeq	r0, r0, r8, lsl r0
 44c:	00000378 	andeq	r0, r0, r8, ror r3
 450:	00009118 	andeq	r9, r0, r8, lsl r1
 454:	0000002c 	andeq	r0, r0, ip, lsr #32
 458:	83100e42 	tsthi	r0, #1056	; 0x420
 45c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 460:	00018e02 	andeq	r8, r1, r2, lsl #28
 464:	00000024 	andeq	r0, r0, r4, lsr #32
 468:	00000378 	andeq	r0, r0, r8, ror r3
 46c:	00009144 	andeq	r9, r0, r4, asr #2
 470:	00000084 	andeq	r0, r0, r4, lsl #1
 474:	810c0e42 	tsthi	ip, r2, asr #28
 478:	83028203 	movwhi	r8, #8707	; 0x2203
 47c:	180e4201 	stmdane	lr, {r0, r9, lr}
 480:	05850684 	streq	r0, [r5, #1668]	; 0x684
 484:	0e42048e 	cdpeq	4, 4, cr0, cr2, cr14, {4}
 488:	000003e8 	andeq	r0, r0, r8, ror #7
 48c:	00000014 	andeq	r0, r0, r4, lsl r0
 490:	00000378 	andeq	r0, r0, r8, ror r3
 494:	000091c8 	andeq	r9, r0, r8, asr #3
 498:	0000004c 	andeq	r0, r0, ip, asr #32
 49c:	8e040e42 	cdphi	14, 0, cr0, cr4, cr2, {2}
 4a0:	100e4201 	andne	r4, lr, r1, lsl #4
 4a4:	0000000c 	andeq	r0, r0, ip
 4a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4ac:	7c020001 	stcvc	0, cr0, [r2], {1}
 4b0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4b4:	00000018 	andeq	r0, r0, r8, lsl r0
 4b8:	000004a4 	andeq	r0, r0, r4, lsr #9
 4bc:	00009214 	andeq	r9, r0, r4, lsl r2
 4c0:	0000009c 	muleq	r0, ip, r0
 4c4:	83100e42 	tsthi	r0, #1056	; 0x420
 4c8:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 4cc:	00018e02 	andeq	r8, r1, r2, lsl #28
 4d0:	00000014 	andeq	r0, r0, r4, lsl r0
 4d4:	000004a4 	andeq	r0, r0, r4, lsr #9
 4d8:	000092b0 			; <UNDEFINED> instruction: 0x000092b0
 4dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4e0:	83080e42 	movwhi	r0, #36418	; 0x8e42
 4e4:	00018e02 	andeq	r8, r1, r2, lsl #28
 4e8:	00000014 	andeq	r0, r0, r4, lsl r0
 4ec:	000004a4 	andeq	r0, r0, r4, lsr #9
 4f0:	000092cc 	andeq	r9, r0, ip, asr #5
 4f4:	00000028 	andeq	r0, r0, r8, lsr #32
 4f8:	83080e42 	movwhi	r0, #36418	; 0x8e42
 4fc:	00018e02 	andeq	r8, r1, r2, lsl #28
 500:	00000014 	andeq	r0, r0, r4, lsl r0
 504:	000004a4 	andeq	r0, r0, r4, lsr #9
 508:	000092f4 	strdeq	r9, [r0], -r4
 50c:	0000001c 	andeq	r0, r0, ip, lsl r0
 510:	83080e42 	movwhi	r0, #36418	; 0x8e42
 514:	00018e02 	andeq	r8, r1, r2, lsl #28
 518:	00000014 	andeq	r0, r0, r4, lsl r0
 51c:	000004a4 	andeq	r0, r0, r4, lsr #9
 520:	00009310 	andeq	r9, r0, r0, lsl r3
 524:	0000002c 	andeq	r0, r0, ip, lsr #32
 528:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 52c:	00018e02 	andeq	r8, r1, r2, lsl #28
 530:	00000014 	andeq	r0, r0, r4, lsl r0
 534:	000004a4 	andeq	r0, r0, r4, lsr #9
 538:	0000933c 	andeq	r9, r0, ip, lsr r3
 53c:	0000000c 	andeq	r0, r0, ip
 540:	83080e42 	movwhi	r0, #36418	; 0x8e42
 544:	00018e02 	andeq	r8, r1, r2, lsl #28
 548:	00000014 	andeq	r0, r0, r4, lsl r0
 54c:	000004a4 	andeq	r0, r0, r4, lsr #9
 550:	00009348 	andeq	r9, r0, r8, asr #6
 554:	00000020 	andeq	r0, r0, r0, lsr #32
 558:	83080e42 	movwhi	r0, #36418	; 0x8e42
 55c:	00018e02 	andeq	r8, r1, r2, lsl #28
 560:	0000000c 	andeq	r0, r0, ip
 564:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 568:	7c020001 	stcvc	0, cr0, [r2], {1}
 56c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 570:	00000018 	andeq	r0, r0, r8, lsl r0
 574:	00000560 	andeq	r0, r0, r0, ror #10
 578:	000093cc 	andeq	r9, r0, ip, asr #7
 57c:	000000d4 	ldrdeq	r0, [r0], -r4
 580:	83100e42 	tsthi	r0, #1056	; 0x420
 584:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 588:	00018e02 	andeq	r8, r1, r2, lsl #28
 58c:	00000014 	andeq	r0, r0, r4, lsl r0
 590:	00000560 	andeq	r0, r0, r0, ror #10
 594:	000094a0 	andeq	r9, r0, r0, lsr #9
 598:	00000038 	andeq	r0, r0, r8, lsr r0
 59c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 5a0:	00018e02 	andeq	r8, r1, r2, lsl #28
 5a4:	00000014 	andeq	r0, r0, r4, lsl r0
 5a8:	00000560 	andeq	r0, r0, r0, ror #10
 5ac:	000094d8 	ldrdeq	r9, [r0], -r8
 5b0:	00000038 	andeq	r0, r0, r8, lsr r0
 5b4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 5b8:	00018e02 	andeq	r8, r1, r2, lsl #28
 5bc:	00000018 	andeq	r0, r0, r8, lsl r0
 5c0:	00000560 	andeq	r0, r0, r0, ror #10
 5c4:	00009510 	andeq	r9, r0, r0, lsl r5
 5c8:	000000cc 	andeq	r0, r0, ip, asr #1
 5cc:	83100e42 	tsthi	r0, #1056	; 0x420
 5d0:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 5d4:	00018e02 	andeq	r8, r1, r2, lsl #28
 5d8:	00000014 	andeq	r0, r0, r4, lsl r0
 5dc:	00000560 	andeq	r0, r0, r0, ror #10
 5e0:	000095dc 	ldrdeq	r9, [r0], -ip
 5e4:	0000004c 	andeq	r0, r0, ip, asr #32
 5e8:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 5ec:	00018e02 	andeq	r8, r1, r2, lsl #28
 5f0:	00000014 	andeq	r0, r0, r4, lsl r0
 5f4:	00000560 	andeq	r0, r0, r0, ror #10
 5f8:	00009628 	andeq	r9, r0, r8, lsr #12
 5fc:	00000024 	andeq	r0, r0, r4, lsr #32
 600:	83080e42 	movwhi	r0, #36418	; 0x8e42
 604:	00018e02 	andeq	r8, r1, r2, lsl #28
 608:	00000018 	andeq	r0, r0, r8, lsl r0
 60c:	00000560 	andeq	r0, r0, r0, ror #10
 610:	0000964c 	andeq	r9, r0, ip, asr #12
 614:	000000d8 	ldrdeq	r0, [r0], -r8
 618:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 61c:	86038504 	strhi	r8, [r3], -r4, lsl #10
 620:	00018e02 	andeq	r8, r1, r2, lsl #28
 624:	00000014 	andeq	r0, r0, r4, lsl r0
 628:	00000560 	andeq	r0, r0, r0, ror #10
 62c:	00009724 	andeq	r9, r0, r4, lsr #14
 630:	0000002c 	andeq	r0, r0, ip, lsr #32
 634:	83080e42 	movwhi	r0, #36418	; 0x8e42
 638:	00018e02 	andeq	r8, r1, r2, lsl #28
 63c:	00000018 	andeq	r0, r0, r8, lsl r0
 640:	00000560 	andeq	r0, r0, r0, ror #10
 644:	00009750 	andeq	r9, r0, r0, asr r7
 648:	00000084 	andeq	r0, r0, r4, lsl #1
 64c:	83100e42 	tsthi	r0, #1056	; 0x420
 650:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 654:	00018e02 	andeq	r8, r1, r2, lsl #28
 658:	00000018 	andeq	r0, r0, r8, lsl r0
 65c:	00000560 	andeq	r0, r0, r0, ror #10
 660:	000097d4 	ldrdeq	r9, [r0], -r4
 664:	00000084 	andeq	r0, r0, r4, lsl #1
 668:	83100e42 	tsthi	r0, #1056	; 0x420
 66c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 670:	00018e02 	andeq	r8, r1, r2, lsl #28
 674:	00000014 	andeq	r0, r0, r4, lsl r0
 678:	00000560 	andeq	r0, r0, r0, ror #10
 67c:	00009858 	andeq	r9, r0, r8, asr r8
 680:	00000084 	andeq	r0, r0, r4, lsl #1
 684:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 688:	00018e02 	andeq	r8, r1, r2, lsl #28
 68c:	00000014 	andeq	r0, r0, r4, lsl r0
 690:	00000560 	andeq	r0, r0, r0, ror #10
 694:	000098dc 	ldrdeq	r9, [r0], -ip
 698:	00000058 	andeq	r0, r0, r8, asr r0
 69c:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 6a0:	00018e02 	andeq	r8, r1, r2, lsl #28
 6a4:	0000000c 	andeq	r0, r0, ip
 6a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 6ac:	7c020001 	stcvc	0, cr0, [r2], {1}
 6b0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 6b4:	0000000c 	andeq	r0, r0, ip
 6b8:	000006a4 	andeq	r0, r0, r4, lsr #13
 6bc:	00009934 	andeq	r9, r0, r4, lsr r9
 6c0:	00000020 	andeq	r0, r0, r0, lsr #32
 6c4:	0000000c 	andeq	r0, r0, ip
 6c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 6cc:	7c020001 	stcvc	0, cr0, [r2], {1}
 6d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 6d4:	00000014 	andeq	r0, r0, r4, lsl r0
 6d8:	000006c4 	andeq	r0, r0, r4, asr #13
 6dc:	00009954 	andeq	r9, r0, r4, asr r9
 6e0:	00000028 	andeq	r0, r0, r8, lsr #32
 6e4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 6e8:	00018e02 	andeq	r8, r1, r2, lsl #28
 6ec:	0000000c 	andeq	r0, r0, ip
 6f0:	000006c4 	andeq	r0, r0, r4, asr #13
 6f4:	0000997c 	andeq	r9, r0, ip, ror r9
 6f8:	00000028 	andeq	r0, r0, r8, lsr #32

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	00000294 	muleq	r0, r4, r2
   4:	00000298 	muleq	r0, r8, r2
   8:	000002c8 	andeq	r0, r0, r8, asr #5
   c:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
	...
  18:	00008910 	andeq	r8, r0, r0, lsl r9
  1c:	00008984 	andeq	r8, r0, r4, lsl #19
	...
