
4-test-exit.bin.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e3a0d302 	mov	sp, #134217728	; 0x8000000
    8004:	e3a0b000 	mov	fp, #0
    8008:	eb0001dc 	bl	8780 <_cstart>
    800c:	eb00020a 	bl	883c <rpi_reboot>

00008010 <trivial>:
#include "rpi.h"
//#include "rpi-thread.h"


void trivial(void* arg) {
    8010:	e92d4008 	push	{r3, lr}
    8014:	e1a01000 	mov	r1, r0
    printk("trivial thread: arg=%d\n", (unsigned)arg);
    8018:	e59f0020 	ldr	r0, [pc, #32]	; 8040 <trivial+0x30>
    801c:	eb000055 	bl	8178 <printk>
    // clean_reboot();
    // comment this out to test your implicit exit
    rpi_yield();
    8020:	eb000368 	bl	8dc8 <rpi_yield>
	rpi_yield();
    8024:	eb000367 	bl	8dc8 <rpi_yield>
	rpi_yield();
    8028:	eb000366 	bl	8dc8 <rpi_yield>
	rpi_yield();
    802c:	eb000365 	bl	8dc8 <rpi_yield>
	rpi_yield();
    8030:	eb000364 	bl	8dc8 <rpi_yield>
	rpi_yield();
    8034:	eb000363 	bl	8dc8 <rpi_yield>
	rpi_yield();
    8038:	eb000362 	bl	8dc8 <rpi_yield>
    803c:	e8bd8008 	pop	{r3, pc}
    8040:	00009e58 	andeq	r9, r0, r8, asr lr

00008044 <notmain>:
	//rpi_exit(0);
}

void notmain(void) {
    8044:	e92d4038 	push	{r3, r4, r5, lr}
    uart_init();
    8048:	eb000557 	bl	95ac <uart_init>
    kmalloc_init();
    804c:	eb000272 	bl	8a1c <kmalloc_init>

    // make this > 1 to test
    int n = 100;
    for(int i = 0; i < n; i++)
    8050:	e3a04000 	mov	r4, #0
        rpi_fork(trivial, (void*)i);
    8054:	e59f5028 	ldr	r5, [pc, #40]	; 8084 <notmain+0x40>
    uart_init();
    kmalloc_init();

    // make this > 1 to test
    int n = 100;
    for(int i = 0; i < n; i++)
    8058:	ea000003 	b	806c <notmain+0x28>
        rpi_fork(trivial, (void*)i);
    805c:	e1a00005 	mov	r0, r5
    8060:	e1a01004 	mov	r1, r4
    8064:	eb00032e 	bl	8d24 <rpi_fork>
    uart_init();
    kmalloc_init();

    // make this > 1 to test
    int n = 100;
    for(int i = 0; i < n; i++)
    8068:	e2844001 	add	r4, r4, #1
    806c:	e3540063 	cmp	r4, #99	; 0x63
    8070:	dafffff9 	ble	805c <notmain+0x18>
        rpi_fork(trivial, (void*)i);
    rpi_thread_start();
    8074:	eb00038e 	bl	8eb4 <rpi_thread_start>
    printk("SUCCESS\n");
    8078:	e59f0008 	ldr	r0, [pc, #8]	; 8088 <notmain+0x44>
    807c:	eb00003d 	bl	8178 <printk>
    clean_reboot();
    8080:	eb0001ac 	bl	8738 <clean_reboot>
    8084:	00008010 	andeq	r8, r0, r0, lsl r0
    8088:	00009e70 	andeq	r9, r0, r0, ror lr

0000808c <print_and_die>:
}

void print_and_die(void) { panic("should not call\n"); }
    808c:	e92d4008 	push	{r3, lr}
    8090:	eb000053 	bl	81e4 <rpi_reset_putc>
    8094:	e59f0010 	ldr	r0, [pc, #16]	; 80ac <print_and_die+0x20>
    8098:	e59f1010 	ldr	r1, [pc, #16]	; 80b0 <print_and_die+0x24>
    809c:	e59f2010 	ldr	r2, [pc, #16]	; 80b4 <print_and_die+0x28>
    80a0:	e3a03020 	mov	r3, #32
    80a4:	eb000033 	bl	8178 <printk>
    80a8:	eb0001a2 	bl	8738 <clean_reboot>
    80ac:	00009e7c 	andeq	r9, r0, ip, ror lr
    80b0:	00009ea0 	andeq	r9, r0, r0, lsr #29
    80b4:	00009e48 	andeq	r9, r0, r8, asr #28

000080b8 <callee_save>:
    80b8:	e12fff1e 	bx	lr

000080bc <store_one_asm>:
    80bc:	e5801000 	str	r1, [r0]
    80c0:	e12fff1e 	bx	lr

000080c4 <check_callee_save>:
    80c4:	e3a04004 	mov	r4, #4
    80c8:	e3a05005 	mov	r5, #5
    80cc:	e3a06006 	mov	r6, #6
    80d0:	e3a07007 	mov	r7, #7
    80d4:	e3a08008 	mov	r8, #8
    80d8:	e3a09009 	mov	r9, #9
    80dc:	e3a0a00a 	mov	sl, #10
    80e0:	e3a0b00b 	mov	fp, #11
    80e4:	e3a0c00c 	mov	ip, #12
    80e8:	e9202000 	stmdb	r0!, {sp}
    80ec:	e9204ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

000080f0 <cswitch>:
    80f0:	e5804000 	str	r4, [r0]
    80f4:	e5805004 	str	r5, [r0, #4]
    80f8:	e5806008 	str	r6, [r0, #8]
    80fc:	e580700c 	str	r7, [r0, #12]
    8100:	e5808010 	str	r8, [r0, #16]
    8104:	e5809014 	str	r9, [r0, #20]
    8108:	e580a018 	str	sl, [r0, #24]
    810c:	e580b01c 	str	fp, [r0, #28]
    8110:	e580c020 	str	ip, [r0, #32]
    8114:	e580e024 	str	lr, [r0, #36]	; 0x24
    8118:	e580d028 	str	sp, [r0, #40]	; 0x28
    811c:	e3a04004 	mov	r4, #4
    8120:	e3a05005 	mov	r5, #5
    8124:	e3a06006 	mov	r6, #6
    8128:	e3a07007 	mov	r7, #7
    812c:	e3a08008 	mov	r8, #8
    8130:	e3a09009 	mov	r9, #9
    8134:	e3a0a00a 	mov	sl, #10
    8138:	e3a0b00b 	mov	fp, #11
    813c:	e3a0c00c 	mov	ip, #12
    8140:	e3a0d00d 	mov	sp, #13
    8144:	e3a0e00e 	mov	lr, #14
    8148:	e5914000 	ldr	r4, [r1]
    814c:	e5915004 	ldr	r5, [r1, #4]
    8150:	e5916008 	ldr	r6, [r1, #8]
    8154:	e591700c 	ldr	r7, [r1, #12]
    8158:	e5918010 	ldr	r8, [r1, #16]
    815c:	e5919014 	ldr	r9, [r1, #20]
    8160:	e591a018 	ldr	sl, [r1, #24]
    8164:	e591b01c 	ldr	fp, [r1, #28]
    8168:	e591c020 	ldr	ip, [r1, #32]
    816c:	e591e024 	ldr	lr, [r1, #36]	; 0x24
    8170:	e591d028 	ldr	sp, [r1, #40]	; 0x28
    8174:	e12fff1e 	bx	lr

00008178 <printk>:
#include <stdarg.h>

#include "rpi.h"
#include "va-printk.h"

int printk(const char *fmt, ...) {
    8178:	e92d000f 	push	{r0, r1, r2, r3}
    817c:	e92d4030 	push	{r4, r5, lr}
    8180:	e24dd00c 	sub	sp, sp, #12
    // this is a really huge buffer for a pi.   could do this better.
    static char buf[1024];
    va_list args;

    va_start(args, fmt);
    8184:	e28d301c 	add	r3, sp, #28
    8188:	e58d3004 	str	r3, [sp, #4]
        int sz = va_printk(buf, sizeof buf, fmt, args);
    818c:	e59f4034 	ldr	r4, [pc, #52]	; 81c8 <printk+0x50>
    8190:	e1a00004 	mov	r0, r4
    8194:	e3a01b01 	mov	r1, #1024	; 0x400
    8198:	e59d2018 	ldr	r2, [sp, #24]
    819c:	eb0000c3 	bl	84b0 <va_printk>
    81a0:	e1a05000 	mov	r5, r0
    va_end(args);


#if 1
    putk(buf);
    81a4:	e59f3020 	ldr	r3, [pc, #32]	; 81cc <printk+0x54>
    81a8:	e5933000 	ldr	r3, [r3]
    81ac:	e1a00004 	mov	r0, r4
    81b0:	e12fff33 	blx	r3
    int i;
    for(i = 0; buf[i]; i++)
        rpi_putchar(buf[i]);
#endif
    return sz;
}
    81b4:	e1a00005 	mov	r0, r5
    81b8:	e28dd00c 	add	sp, sp, #12
    81bc:	e8bd4030 	pop	{r4, r5, lr}
    81c0:	e28dd010 	add	sp, sp, #16
    81c4:	e12fff1e 	bx	lr
    81c8:	0000a4a8 	andeq	sl, r0, r8, lsr #9
    81cc:	00009dac 	andeq	r9, r0, ip, lsr #27

000081d0 <internal_putchar>:
#include "rpi.h"

static int internal_putchar(int c) { uart_putc(c); return c; }
    81d0:	e92d4010 	push	{r4, lr}
    81d4:	e1a04000 	mov	r4, r0
    81d8:	eb000532 	bl	96a8 <uart_putc>
    81dc:	e1a00004 	mov	r0, r4
    81e0:	e8bd8010 	pop	{r4, pc}

000081e4 <rpi_reset_putc>:

// override this is going through the network.
int (*rpi_putchar)(int c) = internal_putchar;

void rpi_reset_putc(void) {
    rpi_putchar = internal_putchar;
    81e4:	e59f2008 	ldr	r2, [pc, #8]	; 81f4 <rpi_reset_putc+0x10>
    81e8:	e59f3008 	ldr	r3, [pc, #8]	; 81f8 <rpi_reset_putc+0x14>
    81ec:	e5832000 	str	r2, [r3]
    81f0:	e12fff1e 	bx	lr
    81f4:	000081d0 	ldrdeq	r8, [r0], -r0
    81f8:	00009da8 	andeq	r9, r0, r8, lsr #27

000081fc <rpi_set_putc>:
}
void rpi_set_putc(int (*fp)(int)) {
    rpi_putchar = fp;
    81fc:	e59f3004 	ldr	r3, [pc, #4]	; 8208 <rpi_set_putc+0xc>
    8200:	e5830000 	str	r0, [r3]
    8204:	e12fff1e 	bx	lr
    8208:	00009da8 	andeq	r9, r0, r8, lsr #27

0000820c <internal_putk>:
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    820c:	e92d4038 	push	{r3, r4, r5, lr}
    8210:	e1a04000 	mov	r4, r0
    for(; *p; p++)
        rpi_putchar(*p);
    8214:	e59f5020 	ldr	r5, [pc, #32]	; 823c <internal_putk+0x30>
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    8218:	ea000002 	b	8228 <internal_putk+0x1c>
        rpi_putchar(*p);
    821c:	e5953000 	ldr	r3, [r5]
    8220:	e12fff33 	blx	r3
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    8224:	e2844001 	add	r4, r4, #1
    8228:	e5d40000 	ldrb	r0, [r4]
    822c:	e3500000 	cmp	r0, #0
    8230:	1afffff9 	bne	821c <internal_putk+0x10>
        rpi_putchar(*p);
//  we were adding this.
//  rpi_putchar('\n');
    return 1;
}
    8234:	e3a00001 	mov	r0, #1
    8238:	e8bd8038 	pop	{r3, r4, r5, pc}
    823c:	00009da8 	andeq	r9, r0, r8, lsr #27

00008240 <isdigit>:
    if(puts_fp)
        putk = puts_fp;
}

// XXX: check sign promotion.
static int isdigit(int c) { return c >= '0' && c <= '9'; }
    8240:	e2400030 	sub	r0, r0, #48	; 0x30
    8244:	e3500009 	cmp	r0, #9
    8248:	83a00000 	movhi	r0, #0
    824c:	93a00001 	movls	r0, #1
    8250:	e12fff1e 	bx	lr

00008254 <pad>:

// don't move: can't be inlined, gcc seems to have a bug.
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
    8254:	e0611000 	rsb	r1, r1, r0
	// pad with leading spaces
	for(; len < width; len++)
		*p++ = ' ';
    8258:	e3a03020 	mov	r3, #32
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    825c:	ea000002 	b	826c <pad+0x18>
		*p++ = ' ';
    8260:	e5c03000 	strb	r3, [r0]
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8264:	e2811001 	add	r1, r1, #1
		*p++ = ' ';
    8268:	e2800001 	add	r0, r0, #1
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    826c:	e1510002 	cmp	r1, r2
    8270:	bafffffa 	blt	8260 <pad+0xc>
		*p++ = ' ';
	*p = 0;
    8274:	e3a03000 	mov	r3, #0
    8278:	e5c03000 	strb	r3, [r0]
	return p;
}
    827c:	e12fff1e 	bx	lr

00008280 <reverse>:

static char* reverse(char *dst, int n, char *p, char *start) {
	// drop the lower chars if the string is too big.
	int len = p - start + 1; // include \0
    8280:	e063c002 	rsb	ip, r3, r2
    8284:	e28cc001 	add	ip, ip, #1
	if(len > n)
    8288:	e15c0001 	cmp	ip, r1
		start += (len - n);
    828c:	c061100c 	rsbgt	r1, r1, ip
    8290:	c0833001 	addgt	r3, r3, r1

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    8294:	e2422001 	sub	r2, r2, #1
    8298:	e1a01000 	mov	r1, r0
    829c:	ea000002 	b	82ac <reverse+0x2c>
		*dst++ = *p;
    82a0:	e452c001 	ldrb	ip, [r2], #-1
    82a4:	e5c1c000 	strb	ip, [r1]
    82a8:	e2811001 	add	r1, r1, #1
		start += (len - n);

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    82ac:	e1520003 	cmp	r2, r3
    82b0:	2afffffa 	bcs	82a0 <reverse+0x20>
		*dst++ = *p;
	*dst++ = 0;
    82b4:	e3a03000 	mov	r3, #0
    82b8:	e5c13000 	strb	r3, [r1]

	return s;
}
    82bc:	e12fff1e 	bx	lr

000082c0 <emit>:

static char* emit(unsigned base, char *dst, int n, int val, int width, int signed_p) {
    82c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    82c4:	e24dd040 	sub	sp, sp, #64	; 0x40
    82c8:	e1a05001 	mov	r5, r1
    82cc:	e1a04002 	mov	r4, r2
    82d0:	e59d2058 	ldr	r2, [sp, #88]	; 0x58
	// XXX: constrain width to be >= bit size: can change this.
	if(width > n)
    82d4:	e1520004 	cmp	r2, r4
		width = n - 1;
    82d8:	c2442001 	subgt	r2, r4, #1

	char buf[64], *p = buf; 
	unsigned u = val;
    82dc:	e1a0c003 	mov	ip, r3

	switch(base) { 
    82e0:	e2400002 	sub	r0, r0, #2
    82e4:	e350000e 	cmp	r0, #14
    82e8:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
    82ec:	ea000042 	b	83fc <emit+0x13c>
    82f0:	000083d4 	ldrdeq	r8, [r0], -r4
    82f4:	000083fc 	strdeq	r8, [r0], -ip
    82f8:	000083fc 	strdeq	r8, [r0], -ip
    82fc:	000083fc 	strdeq	r8, [r0], -ip
    8300:	000083fc 	strdeq	r8, [r0], -ip
    8304:	000083fc 	strdeq	r8, [r0], -ip
    8308:	000083c8 	andeq	r8, r0, r8, asr #7
    830c:	000083fc 	strdeq	r8, [r0], -ip
    8310:	0000832c 	andeq	r8, r0, ip, lsr #6
    8314:	000083fc 	strdeq	r8, [r0], -ip
    8318:	000083fc 	strdeq	r8, [r0], -ip
    831c:	000083fc 	strdeq	r8, [r0], -ip
    8320:	000083fc 	strdeq	r8, [r0], -ip
    8324:	000083fc 	strdeq	r8, [r0], -ip
    8328:	000083a0 	andeq	r8, r0, r0, lsr #7
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
    832c:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
    8330:	e2911000 	adds	r1, r1, #0
    8334:	13a01001 	movne	r1, #1
    8338:	e0111fa3 	ands	r1, r1, r3, lsr #31
				neg_p = 1;
				val = -val;
    833c:	1263c000 	rsbne	ip, r3, #0
	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
				neg_p = 1;
    8340:	13a08001 	movne	r8, #1
	unsigned u = val;

	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
    8344:	03a08000 	moveq	r8, #0
			if(val < 0 && signed_p) {
				neg_p = 1;
    8348:	e1a0100d 	mov	r1, sp
				val = -val;
				u = val;
			}
			do { 
				*p++ = "0123456789"[u % 10];
    834c:	e59f70ec 	ldr	r7, [pc, #236]	; 8440 <emit+0x180>
    8350:	e59f60ec 	ldr	r6, [pc, #236]	; 8444 <emit+0x184>
    8354:	ea000000 	b	835c <emit+0x9c>
    8358:	e1a01003 	mov	r1, r3
    835c:	e2813001 	add	r3, r1, #1
    8360:	e08e0c97 	umull	r0, lr, r7, ip
    8364:	e1a0e1ae 	lsr	lr, lr, #3
    8368:	e1a0000e 	mov	r0, lr
    836c:	e08ee10e 	add	lr, lr, lr, lsl #2
    8370:	e1a0e08e 	lsl	lr, lr, #1
    8374:	e06ee00c 	rsb	lr, lr, ip
    8378:	e7d6c00e 	ldrb	ip, [r6, lr]
    837c:	e5c1c000 	strb	ip, [r1]
			} while(u /= 10); 
    8380:	e1a0c000 	mov	ip, r0
    8384:	e3500000 	cmp	r0, #0
    8388:	1afffff2 	bne	8358 <emit+0x98>
			if(neg_p)
    838c:	e3580000 	cmp	r8, #0
				*p++ = '-';
    8390:	12813002 	addne	r3, r1, #2
    8394:	13a0002d 	movne	r0, #45	; 0x2d
    8398:	15c10001 	strbne	r0, [r1, #1]
    839c:	ea00001d 	b	8418 <emit+0x158>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    83a0:	e1a0e00d 	mov	lr, sp
			break;
		}
		case 16:
			u = val;
                        do {
                                *p++ = "0123456789abcdef"[u % 16];
    83a4:	e59f009c 	ldr	r0, [pc, #156]	; 8448 <emit+0x188>
    83a8:	e28e3001 	add	r3, lr, #1
    83ac:	e20c100f 	and	r1, ip, #15
    83b0:	e7d01001 	ldrb	r1, [r0, r1]
    83b4:	e5ce1000 	strb	r1, [lr]
    83b8:	e1a0e003 	mov	lr, r3
                        } while(u /= 16);
    83bc:	e1b0c22c 	lsrs	ip, ip, #4
    83c0:	1afffff8 	bne	83a8 <emit+0xe8>
    83c4:	ea000013 	b	8418 <emit+0x158>
                        break;
		// just a single char
		case 8:
			*p++ = val;
    83c8:	e5cd3000 	strb	r3, [sp]
    83cc:	e28d3001 	add	r3, sp, #1
			break;
    83d0:	ea000010 	b	8418 <emit+0x158>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    83d4:	e1a0e00d 	mov	lr, sp
#if 0
			for(int i = 0; i < 32; i++)
				*p++ = "01"[(u & (1<<i)) != 0];
#else
                        do {
                        	*p++ = "01"[u % 2];
    83d8:	e59f006c 	ldr	r0, [pc, #108]	; 844c <emit+0x18c>
    83dc:	e28e3001 	add	r3, lr, #1
    83e0:	e20c1001 	and	r1, ip, #1
    83e4:	e7d01001 	ldrb	r1, [r0, r1]
    83e8:	e5ce1000 	strb	r1, [lr]
    83ec:	e1a0e003 	mov	lr, r3
			} while(u /= 2);
    83f0:	e1b0c0ac 	lsrs	ip, ip, #1
    83f4:	1afffff8 	bne	83dc <emit+0x11c>
    83f8:	ea000006 	b	8418 <emit+0x158>
#endif
			break;
		default:
			assert(0);
    83fc:	ebffff78 	bl	81e4 <rpi_reset_putc>
    8400:	e59f0048 	ldr	r0, [pc, #72]	; 8450 <emit+0x190>
    8404:	e59f1048 	ldr	r1, [pc, #72]	; 8454 <emit+0x194>
    8408:	e59f2048 	ldr	r2, [pc, #72]	; 8458 <emit+0x198>
    840c:	e3a03075 	mov	r3, #117	; 0x75
    8410:	ebffff58 	bl	8178 <printk>
    8414:	eb0000c7 	bl	8738 <clean_reboot>
	}
	// number string is reversed, so re-reverse it.
	return reverse(dst, n, pad(p, buf, width), buf);
    8418:	e1a00003 	mov	r0, r3
    841c:	e1a0100d 	mov	r1, sp
    8420:	ebffff8b 	bl	8254 <pad>
    8424:	e1a02000 	mov	r2, r0
    8428:	e1a00005 	mov	r0, r5
    842c:	e1a01004 	mov	r1, r4
    8430:	e1a0300d 	mov	r3, sp
    8434:	ebffff91 	bl	8280 <reverse>
}
    8438:	e28dd040 	add	sp, sp, #64	; 0x40
    843c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8440:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    8444:	00009efc 	strdeq	r9, [r0], -ip
    8448:	00009f08 	andeq	r9, r0, r8, lsl #30
    844c:	00009f1c 	andeq	r9, r0, ip, lsl pc
    8450:	00009ed4 	ldrdeq	r9, [r0], -r4
    8454:	00009ee8 	andeq	r9, r0, r8, ror #29
    8458:	00009eb0 			; <UNDEFINED> instruction: 0x00009eb0

0000845c <rpi_set_output>:
// override this is going through the network.
int (*rpi_putchar)(int c) = internal_putchar;
#endif


void rpi_set_output(int (*putc_fp)(int), int (*puts_fp)(const char *)) {
    845c:	e92d4008 	push	{r3, lr}
    assert(putc_fp);
    8460:	e3500000 	cmp	r0, #0
    8464:	1a000006 	bne	8484 <rpi_set_output+0x28>
    8468:	ebffff5d 	bl	81e4 <rpi_reset_putc>
    846c:	e59f0028 	ldr	r0, [pc, #40]	; 849c <rpi_set_output+0x40>
    8470:	e59f1028 	ldr	r1, [pc, #40]	; 84a0 <rpi_set_output+0x44>
    8474:	e59f2028 	ldr	r2, [pc, #40]	; 84a4 <rpi_set_output+0x48>
    8478:	e3a03020 	mov	r3, #32
    847c:	ebffff3d 	bl	8178 <printk>
    8480:	eb0000ac 	bl	8738 <clean_reboot>
    rpi_putchar = putc_fp;
    8484:	e59f301c 	ldr	r3, [pc, #28]	; 84a8 <rpi_set_output+0x4c>
    8488:	e5830000 	str	r0, [r3]
    if(puts_fp)
    848c:	e3510000 	cmp	r1, #0
        putk = puts_fp;
    8490:	159f3014 	ldrne	r3, [pc, #20]	; 84ac <rpi_set_output+0x50>
    8494:	15831000 	strne	r1, [r3]
    8498:	e8bd8008 	pop	{r3, pc}
    849c:	00009f20 	andeq	r9, r0, r0, lsr #30
    84a0:	00009ee8 	andeq	r9, r0, r8, ror #29
    84a4:	00009eb8 			; <UNDEFINED> instruction: 0x00009eb8
    84a8:	00009da8 	andeq	r9, r0, r8, lsr #27
    84ac:	00009dac 	andeq	r9, r0, ip, lsr #27

000084b0 <va_printk>:
	return reverse(dst, n, pad(p, buf, width), buf);
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
    84b0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    84b4:	e24dd08c 	sub	sp, sp, #140	; 0x8c
    84b8:	e1a0a000 	mov	sl, r0
    84bc:	e1a09003 	mov	r9, r3
	char *p = buf, *e = buf + n - 1;
    84c0:	e2411001 	sub	r1, r1, #1
    84c4:	e0808001 	add	r8, r0, r1

	buf[0] = 0;
    84c8:	e3a03000 	mov	r3, #0
    84cc:	e5c03000 	strb	r3, [r0]
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;
    84d0:	e1a04000 	mov	r4, r0
			fmt+=2;
		} else {	
			fmt++;

			char *s, num[128];
			unsigned width = 0;
    84d4:	e1a0b003 	mov	fp, r3

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    84d8:	ea000086 	b	86f8 <va_printk+0x248>
		if(*fmt != '%')
    84dc:	e3530025 	cmp	r3, #37	; 0x25
			*p++ = *fmt++;
    84e0:	12822001 	addne	r2, r2, #1
    84e4:	15c43000 	strbne	r3, [r4]
    84e8:	12844001 	addne	r4, r4, #1
    84ec:	1a000081 	bne	86f8 <va_printk+0x248>
		
		else if(fmt[1] == '%') {
    84f0:	e5d21001 	ldrb	r1, [r2, #1]
    84f4:	e3510025 	cmp	r1, #37	; 0x25
			*p++ = *fmt;
    84f8:	05c43000 	strbeq	r3, [r4]
			fmt+=2;
    84fc:	02822002 	addeq	r2, r2, #2
	for(; *fmt && p < e; ) {
		if(*fmt != '%')
			*p++ = *fmt++;
		
		else if(fmt[1] == '%') {
			*p++ = *fmt;
    8500:	02844001 	addeq	r4, r4, #1
    8504:	0a00007b 	beq	86f8 <va_printk+0x248>
			fmt+=2;
		} else {	
			fmt++;
    8508:	e2826001 	add	r6, r2, #1

			char *s, num[128];
			unsigned width = 0;
    850c:	e1a0700b 	mov	r7, fp

			while(isdigit(*fmt)) {
    8510:	ea000004 	b	8528 <va_printk+0x78>
				width = width*10 + *fmt - '0';
    8514:	e0877107 	add	r7, r7, r7, lsl #2
    8518:	e1a07087 	lsl	r7, r7, #1
    851c:	e0877005 	add	r7, r7, r5
    8520:	e2477030 	sub	r7, r7, #48	; 0x30
				fmt++;
    8524:	e2866001 	add	r6, r6, #1
			fmt++;

			char *s, num[128];
			unsigned width = 0;

			while(isdigit(*fmt)) {
    8528:	e5d65000 	ldrb	r5, [r6]
    852c:	e1a00005 	mov	r0, r5
    8530:	ebffff42 	bl	8240 <isdigit>
    8534:	e3500000 	cmp	r0, #0
    8538:	1afffff5 	bne	8514 <va_printk+0x64>
				width = width*10 + *fmt - '0';
				fmt++;
			}
			assert(width < 32);
    853c:	e357001f 	cmp	r7, #31
    8540:	9a000006 	bls	8560 <va_printk+0xb0>
    8544:	ebffff26 	bl	81e4 <rpi_reset_putc>
    8548:	e59f01d4 	ldr	r0, [pc, #468]	; 8724 <va_printk+0x274>
    854c:	e59f11d4 	ldr	r1, [pc, #468]	; 8728 <va_printk+0x278>
    8550:	e59f21d4 	ldr	r2, [pc, #468]	; 872c <va_printk+0x27c>
    8554:	e3a03092 	mov	r3, #146	; 0x92
    8558:	ebffff06 	bl	8178 <printk>
    855c:	eb000075 	bl	8738 <clean_reboot>
			
			switch(*fmt) {
    8560:	e2455062 	sub	r5, r5, #98	; 0x62
    8564:	e3550016 	cmp	r5, #22
    8568:	979ff105 	ldrls	pc, [pc, r5, lsl #2]
    856c:	ea00004e 	b	86ac <va_printk+0x1fc>
    8570:	00008658 	andeq	r8, r0, r8, asr r6
    8574:	00008688 	andeq	r8, r0, r8, lsl #13
    8578:	000085e8 	andeq	r8, r0, r8, ror #11
    857c:	000086ac 	andeq	r8, r0, ip, lsr #13
    8580:	000085cc 	andeq	r8, r0, ip, asr #11
    8584:	000086ac 	andeq	r8, r0, ip, lsr #13
    8588:	000086ac 	andeq	r8, r0, ip, lsr #13
    858c:	000086ac 	andeq	r8, r0, ip, lsr #13
    8590:	000086ac 	andeq	r8, r0, ip, lsr #13
    8594:	000086ac 	andeq	r8, r0, ip, lsr #13
    8598:	000086ac 	andeq	r8, r0, ip, lsr #13
    859c:	000086ac 	andeq	r8, r0, ip, lsr #13
    85a0:	000086ac 	andeq	r8, r0, ip, lsr #13
    85a4:	000086ac 	andeq	r8, r0, ip, lsr #13
    85a8:	00008634 	andeq	r8, r0, r4, lsr r6
    85ac:	000086ac 	andeq	r8, r0, ip, lsr #13
    85b0:	000086ac 	andeq	r8, r0, ip, lsr #13
    85b4:	0000867c 	andeq	r8, r0, ip, ror r6
    85b8:	000086ac 	andeq	r8, r0, ip, lsr #13
    85bc:	00008610 	andeq	r8, r0, r0, lsl r6
    85c0:	000086ac 	andeq	r8, r0, ip, lsr #13
    85c4:	000086ac 	andeq	r8, r0, ip, lsr #13
    85c8:	00008634 	andeq	r8, r0, r4, lsr r6
			case 'f':
			{
#ifndef RPI_FP_ENABLED
				panic("float not enabled!!!");
    85cc:	ebffff04 	bl	81e4 <rpi_reset_putc>
    85d0:	e59f0158 	ldr	r0, [pc, #344]	; 8730 <va_printk+0x280>
    85d4:	e59f114c 	ldr	r1, [pc, #332]	; 8728 <va_printk+0x278>
    85d8:	e59f214c 	ldr	r2, [pc, #332]	; 872c <va_printk+0x27c>
    85dc:	e3a03098 	mov	r3, #152	; 0x98
    85e0:	ebfffee4 	bl	8178 <printk>
    85e4:	eb000053 	bl	8738 <clean_reboot>

				break;
#endif
			}
			case 'd':
				s = emit(10, num, 128, va_arg(args, int), width, 1);
    85e8:	e5993000 	ldr	r3, [r9]
    85ec:	e2899004 	add	r9, r9, #4
    85f0:	e58d7000 	str	r7, [sp]
    85f4:	e3a02001 	mov	r2, #1
    85f8:	e58d2004 	str	r2, [sp, #4]
    85fc:	e3a0000a 	mov	r0, #10
    8600:	e28d1008 	add	r1, sp, #8
    8604:	e3a02080 	mov	r2, #128	; 0x80
    8608:	ebffff2c 	bl	82c0 <emit>
				break;
    860c:	ea00002f 	b	86d0 <va_printk+0x220>
			case 'u':
				s = emit(10, num, 128, va_arg(args, unsigned), width, 0);
    8610:	e5993000 	ldr	r3, [r9]
    8614:	e2899004 	add	r9, r9, #4
    8618:	e58d7000 	str	r7, [sp]
    861c:	e58db004 	str	fp, [sp, #4]
    8620:	e3a0000a 	mov	r0, #10
    8624:	e28d1008 	add	r1, sp, #8
    8628:	e3a02080 	mov	r2, #128	; 0x80
    862c:	ebffff23 	bl	82c0 <emit>
				break;
    8630:	ea000026 	b	86d0 <va_printk+0x220>
			case 'p':
			case 'x':
				s = emit(16, num, 128, va_arg(args, unsigned), width, 0);
    8634:	e5993000 	ldr	r3, [r9]
    8638:	e2899004 	add	r9, r9, #4
    863c:	e58d7000 	str	r7, [sp]
    8640:	e58db004 	str	fp, [sp, #4]
    8644:	e3a00010 	mov	r0, #16
    8648:	e28d1008 	add	r1, sp, #8
    864c:	e3a02080 	mov	r2, #128	; 0x80
    8650:	ebffff1a 	bl	82c0 <emit>
				break;
    8654:	ea00001d 	b	86d0 <va_printk+0x220>
			case 'b':
				s = emit(2, num, 128, va_arg(args, unsigned), width, 0);
    8658:	e5993000 	ldr	r3, [r9]
    865c:	e2899004 	add	r9, r9, #4
    8660:	e58d7000 	str	r7, [sp]
    8664:	e58db004 	str	fp, [sp, #4]
    8668:	e3a00002 	mov	r0, #2
    866c:	e28d1008 	add	r1, sp, #8
    8670:	e3a02080 	mov	r2, #128	; 0x80
    8674:	ebffff11 	bl	82c0 <emit>
				break;
    8678:	ea000014 	b	86d0 <va_printk+0x220>
			case 's':
				s = va_arg(args, char *);
    867c:	e5990000 	ldr	r0, [r9]
    8680:	e2899004 	add	r9, r9, #4
				break;
    8684:	ea000011 	b	86d0 <va_printk+0x220>
			case 'c':
				s = emit(8, num, 128, va_arg(args, int),width,0);
    8688:	e5993000 	ldr	r3, [r9]
    868c:	e2899004 	add	r9, r9, #4
    8690:	e58d7000 	str	r7, [sp]
    8694:	e58db004 	str	fp, [sp, #4]
    8698:	e3a00008 	mov	r0, #8
    869c:	e08d1000 	add	r1, sp, r0
    86a0:	e3a02080 	mov	r2, #128	; 0x80
    86a4:	ebffff05 	bl	82c0 <emit>
				break;
    86a8:	ea000008 	b	86d0 <va_printk+0x220>
			default: 
				panic("printk: not handling specifier '%c'\n", *fmt);
    86ac:	ebfffecc 	bl	81e4 <rpi_reset_putc>
    86b0:	e5d63000 	ldrb	r3, [r6]
    86b4:	e58d3000 	str	r3, [sp]
    86b8:	e59f0074 	ldr	r0, [pc, #116]	; 8734 <va_printk+0x284>
    86bc:	e59f1064 	ldr	r1, [pc, #100]	; 8728 <va_printk+0x278>
    86c0:	e59f2064 	ldr	r2, [pc, #100]	; 872c <va_printk+0x27c>
    86c4:	e3a030b9 	mov	r3, #185	; 0xb9
    86c8:	ebfffeaa 	bl	8178 <printk>
    86cc:	eb000019 	bl	8738 <clean_reboot>
				return 0;   // ugh
			}
			fmt++;
    86d0:	e2862001 	add	r2, r6, #1

			// safe string copy
			for(; p < e && *s; )
    86d4:	ea000002 	b	86e4 <va_printk+0x234>
				*p++ = *s++;
    86d8:	e2800001 	add	r0, r0, #1
    86dc:	e5c43000 	strb	r3, [r4]
    86e0:	e2844001 	add	r4, r4, #1
				return 0;   // ugh
			}
			fmt++;

			// safe string copy
			for(; p < e && *s; )
    86e4:	e1540008 	cmp	r4, r8
    86e8:	2a000002 	bcs	86f8 <va_printk+0x248>
    86ec:	e5d03000 	ldrb	r3, [r0]
    86f0:	e3530000 	cmp	r3, #0
    86f4:	1afffff7 	bne	86d8 <va_printk+0x228>

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    86f8:	e5d23000 	ldrb	r3, [r2]
    86fc:	e3530000 	cmp	r3, #0
    8700:	0a000001 	beq	870c <va_printk+0x25c>
    8704:	e1540008 	cmp	r4, r8
    8708:	3affff73 	bcc	84dc <va_printk+0x2c>
			// safe string copy
			for(; p < e && *s; )
				*p++ = *s++;
		}
	}
	*p++ = 0;
    870c:	e2840001 	add	r0, r4, #1
    8710:	e3a03000 	mov	r3, #0
    8714:	e5c43000 	strb	r3, [r4]
	return p - buf;
}
    8718:	e06a0000 	rsb	r0, sl, r0
    871c:	e28dd08c 	add	sp, sp, #140	; 0x8c
    8720:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8724:	00009f38 	andeq	r9, r0, r8, lsr pc
    8728:	00009ee8 	andeq	r9, r0, r8, ror #29
    872c:	00009ec8 	andeq	r9, r0, r8, asr #29
    8730:	00009f54 	andeq	r9, r0, r4, asr pc
    8734:	00009f7c 	andeq	r9, r0, ip, ror pc

00008738 <clean_reboot>:
#include "rpi.h"

// print out a special message so bootloader exits
void clean_reboot(void) {
    8738:	e92d4008 	push	{r3, lr}
    putk("DONE!!!\n");
    873c:	e59f3014 	ldr	r3, [pc, #20]	; 8758 <clean_reboot+0x20>
    8740:	e5933000 	ldr	r3, [r3]
    8744:	e59f0010 	ldr	r0, [pc, #16]	; 875c <clean_reboot+0x24>
    8748:	e12fff33 	blx	r3
    delay_ms(100);       // (hopefully) enough time for message to get flushed.
    874c:	e3a00064 	mov	r0, #100	; 0x64
    8750:	eb000063 	bl	88e4 <delay_ms>
    rpi_reboot();
    8754:	eb000038 	bl	883c <rpi_reboot>
    8758:	00009dac 	andeq	r9, r0, ip, lsr #27
    875c:	00009fb4 			; <UNDEFINED> instruction: 0x00009fb4

00008760 <internal_sw_putchar>:
#include "rpi.h"
#include "sw-uart.h"
#include "control-block.h"

static sw_uart_t console_uart;
static int internal_sw_putchar(int c) {
    8760:	e92d4010 	push	{r4, lr}
    8764:	e1a04000 	mov	r4, r0
    sw_uart_putc(&console_uart, c);
    8768:	e59f000c 	ldr	r0, [pc, #12]	; 877c <internal_sw_putchar+0x1c>
    876c:	e6ef1074 	uxtb	r1, r4
    8770:	eb000205 	bl	8f8c <sw_uart_putc>
    return c;
}
    8774:	e1a00004 	mov	r0, r4
    8778:	e8bd8010 	pop	{r4, pc}
    877c:	0000a8a8 	andeq	sl, r0, r8, lsr #17

00008780 <_cstart>:

void _cstart() {
    8780:	e92d4008 	push	{r3, lr}
    extern int __bss_start__, __bss_end__;
	void notmain();

    int* bss = &__bss_start__;
    8784:	e59f3068 	ldr	r3, [pc, #104]	; 87f4 <_cstart+0x74>
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    8788:	e59f2068 	ldr	r2, [pc, #104]	; 87f8 <_cstart+0x78>
        *bss++ = 0;
    878c:	e3a01000 	mov	r1, #0
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    8790:	ea000001 	b	879c <_cstart+0x1c>
        *bss++ = 0;
    8794:	e5831000 	str	r1, [r3]
    8798:	e2833004 	add	r3, r3, #4
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    879c:	e1530002 	cmp	r3, r2
    87a0:	3afffffb 	bcc	8794 <_cstart+0x14>
        *bss++ = 0;

#if 1
    // this links in so much stuff.  need to fix.
    control_blk_t *cb = cb_get_block();
    87a4:	eb000575 	bl	9d80 <cb_get_block>
    if(cb) {
    87a8:	e3500000 	cmp	r0, #0
    87ac:	0a00000e 	beq	87ec <_cstart+0x6c>
        if(cb->console_dev == PUTC_SW_UART) {
    87b0:	e5d02004 	ldrb	r2, [r0, #4]
    87b4:	e3520002 	cmp	r2, #2
    87b8:	1a00000b 	bne	87ec <_cstart+0x6c>
            rpi_putchar = internal_sw_putchar;
    87bc:	e59f1038 	ldr	r1, [pc, #56]	; 87fc <_cstart+0x7c>
    87c0:	e59f2038 	ldr	r2, [pc, #56]	; 8800 <_cstart+0x80>
    87c4:	e5821000 	str	r1, [r2]
            console_uart = cb->sw_uart;
    87c8:	e59fc034 	ldr	ip, [pc, #52]	; 8804 <_cstart+0x84>
    87cc:	e2803008 	add	r3, r0, #8
    87d0:	e8930007 	ldm	r3, {r0, r1, r2}
    87d4:	e88c0007 	stm	ip, {r0, r1, r2}
            sw_uart_printk(&console_uart, "about to print on regular printf\n");
    87d8:	e1a0000c 	mov	r0, ip
    87dc:	e59f1024 	ldr	r1, [pc, #36]	; 8808 <_cstart+0x88>
    87e0:	eb00033d 	bl	94dc <sw_uart_printk>
            printk("success!\n");
    87e4:	e59f0020 	ldr	r0, [pc, #32]	; 880c <_cstart+0x8c>
    87e8:	ebfffe62 	bl	8178 <printk>
        }
    }
#endif
    notmain(); 
    87ec:	ebfffe14 	bl	8044 <notmain>
	rpi_reboot();
    87f0:	eb000011 	bl	883c <rpi_reboot>
    87f4:	0000a4a8 	andeq	sl, r0, r8, lsr #9
    87f8:	0000a8e0 	andeq	sl, r0, r0, ror #17
    87fc:	00008760 	andeq	r8, r0, r0, ror #14
    8800:	00009da8 	andeq	r9, r0, r8, lsr #27
    8804:	0000a8a8 	andeq	sl, r0, r8, lsr #17
    8808:	00009fc0 	andeq	r9, r0, r0, asr #31
    880c:	00009fe4 	andeq	r9, r0, r4, ror #31

00008810 <at_user_level>:
 * works if we have a trashed stack pointer?
 */
static unsigned user_level = 0b10000;
int at_user_level(void) {
    unsigned cpsr = 0;
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    8810:	e10f0000 	mrs	r0, CPSR

    // user level = lower 5 bits = 0b10000);
    return (cpsr  & 0b11111)  == user_level;
    8814:	e200001f 	and	r0, r0, #31
}
    8818:	e3500010 	cmp	r0, #16
    881c:	13a00000 	movne	r0, #0
    8820:	03a00001 	moveq	r0, #1
    8824:	e12fff1e 	bx	lr

00008828 <set_user_level>:

// this is just used by the reboot code.
void set_user_level(void) {
    unsigned cpsr = 0;
    // XXX: shouldn't we just set the one bit?
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    8828:	e10f3000 	mrs	r3, CPSR
        cpsr = (cpsr & ~0b11111) | user_level;
    882c:	e3c3301f 	bic	r3, r3, #31
    8830:	e3833010 	orr	r3, r3, #16
    asm volatile("msr cpsr, %0" :: "r"(cpsr));
    8834:	e129f003 	msr	CPSR_fc, r3
    8838:	e12fff1e 	bx	lr

0000883c <rpi_reboot>:
}

void rpi_reboot(void) {
    883c:	e92d4008 	push	{r3, lr}
    if(at_user_level()) {
    8840:	ebfffff2 	bl	8810 <at_user_level>
    8844:	e3500000 	cmp	r0, #0
    8848:	0a000000 	beq	8850 <rpi_reboot+0x14>
        set_user_level();
    884c:	ebfffff5 	bl	8828 <set_user_level>
        // of stuff.
        // assert(!at_user_level());
    }

    // gives uart time to flush: should just call flush directly.
    delay_ms(30);
    8850:	e3a0001e 	mov	r0, #30
    8854:	eb000022 	bl	88e4 <delay_ms>
    const int PM_WDOG = 0x20100024;
    const int PM_PASSWORD = 0x5a000000;
    const int PM_RSTC_WRCFG_FULL_RESET = 0x00000020;

    // timeout = 1/16th of a second? (whatever)
    PUT32(PM_WDOG, PM_PASSWORD | 1);
    8858:	e59f0014 	ldr	r0, [pc, #20]	; 8874 <rpi_reboot+0x38>
    885c:	e59f1014 	ldr	r1, [pc, #20]	; 8878 <rpi_reboot+0x3c>
    8860:	eb0003ae 	bl	9720 <PUT32>
    PUT32(PM_RSTC, PM_PASSWORD | PM_RSTC_WRCFG_FULL_RESET);
    8864:	e59f0010 	ldr	r0, [pc, #16]	; 887c <rpi_reboot+0x40>
    8868:	e59f1010 	ldr	r1, [pc, #16]	; 8880 <rpi_reboot+0x44>
    886c:	eb0003ab 	bl	9720 <PUT32>
    8870:	eafffffe 	b	8870 <rpi_reboot+0x34>
    8874:	20100024 	andscs	r0, r0, r4, lsr #32
    8878:	5a000001 	bpl	8884 <delay_cycles>
    887c:	2010001c 	andscs	r0, r0, ip, lsl r0
    8880:	5a000020 	bpl	8908 <delay_sec+0x10>

00008884 <delay_cycles>:
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    8884:	ea000001 	b	8890 <delay_cycles+0xc>
        asm("add r1, r1, #0");
    8888:	e2811000 	add	r1, r1, #0
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    888c:	e1a00003 	mov	r0, r3
    8890:	e2403001 	sub	r3, r0, #1
    8894:	e3500000 	cmp	r0, #0
    8898:	1afffffa 	bne	8888 <delay_cycles+0x4>
        asm("add r1, r1, #0");
}
    889c:	e12fff1e 	bx	lr

000088a0 <timer_get_usec_raw>:

// no dev barrier.
unsigned timer_get_usec_raw(void) {
    88a0:	e92d4008 	push	{r3, lr}
    return GET32(0x20003004);
    88a4:	e59f0004 	ldr	r0, [pc, #4]	; 88b0 <timer_get_usec_raw+0x10>
    88a8:	eb0003a8 	bl	9750 <GET32>
}
    88ac:	e8bd8008 	pop	{r3, pc}
    88b0:	20003004 	andcs	r3, r0, r4

000088b4 <timer_get_usec>:

// in usec
unsigned timer_get_usec(void) {
    88b4:	e92d4008 	push	{r3, lr}
// comment these out for this lab (8) so student
// code does not get hit by weird timing issues.
//    dev_barrier();
    unsigned u = timer_get_usec_raw();
    88b8:	ebfffff8 	bl	88a0 <timer_get_usec_raw>
//    dev_barrier();
    return u;
}
    88bc:	e8bd8008 	pop	{r3, pc}

000088c0 <delay_us>:

void delay_us(unsigned us) {
    88c0:	e92d4038 	push	{r3, r4, r5, lr}
    88c4:	e1a05000 	mov	r5, r0
    unsigned rb = timer_get_usec();
    88c8:	ebfffff9 	bl	88b4 <timer_get_usec>
    88cc:	e1a04000 	mov	r4, r0
    while (1) {
        unsigned ra = timer_get_usec();
    88d0:	ebfffff7 	bl	88b4 <timer_get_usec>
        if ((ra - rb) >= us) {
    88d4:	e0640000 	rsb	r0, r4, r0
    88d8:	e1500005 	cmp	r0, r5
    88dc:	3afffffb 	bcc	88d0 <delay_us+0x10>
            break;
        }
    }
}
    88e0:	e8bd8038 	pop	{r3, r4, r5, pc}

000088e4 <delay_ms>:
void delay_ms(unsigned ms) {
    88e4:	e92d4008 	push	{r3, lr}
    delay_us(ms*1000);
    88e8:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    88ec:	e0000093 	mul	r0, r3, r0
    88f0:	ebfffff2 	bl	88c0 <delay_us>
    88f4:	e8bd8008 	pop	{r3, pc}

000088f8 <delay_sec>:
}
void delay_sec(unsigned sec) {
    88f8:	e92d4008 	push	{r3, lr}
    delay_ms(sec*1000);
    88fc:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    8900:	e0000093 	mul	r0, r3, r0
    8904:	ebfffff6 	bl	88e4 <delay_ms>
    8908:	e8bd8008 	pop	{r3, pc}

0000890c <kmalloc>:
 *  - The returned pointer should always be 4-byte aligned.  
 *    Easiest way is to make sure the heap pointer starts 4-byte
 *    and you always round up the number of bytes.  Make sure
 *    you put an assertion in.  
 */
void *kmalloc(unsigned nbytes) {
    890c:	e92d4070 	push	{r4, r5, r6, lr}
    demand(init_p, calling before initialized);
    8910:	e59f3058 	ldr	r3, [pc, #88]	; 8970 <kmalloc+0x64>
    8914:	e5933000 	ldr	r3, [r3]
    8918:	e3530000 	cmp	r3, #0
    891c:	1a000006 	bne	893c <kmalloc+0x30>
    8920:	ebfffe2f 	bl	81e4 <rpi_reset_putc>
    8924:	e59f0048 	ldr	r0, [pc, #72]	; 8974 <kmalloc+0x68>
    8928:	e59f1048 	ldr	r1, [pc, #72]	; 8978 <kmalloc+0x6c>
    892c:	e59f2048 	ldr	r2, [pc, #72]	; 897c <kmalloc+0x70>
    8930:	e3a0301a 	mov	r3, #26
    8934:	ebfffe0f 	bl	8178 <printk>
    8938:	ebffff7e 	bl	8738 <clean_reboot>
    
    void* to_allocate = heap_ptr;
    893c:	e59f402c 	ldr	r4, [pc, #44]	; 8970 <kmalloc+0x64>
    8940:	e5945004 	ldr	r5, [r4, #4]
    unsigned rounded_nbytes = roundup(nbytes, 8);
    8944:	e2806007 	add	r6, r0, #7
    8948:	e3c66007 	bic	r6, r6, #7
    memset(heap_ptr, 0, rounded_nbytes);
    894c:	e1a00005 	mov	r0, r5
    8950:	e3a01000 	mov	r1, #0
    8954:	e1a02006 	mov	r2, r6
    8958:	eb0004f6 	bl	9d38 <memset>
    heap_ptr += rounded_nbytes;
    895c:	e5943004 	ldr	r3, [r4, #4]
    8960:	e0836006 	add	r6, r3, r6
    8964:	e5846004 	str	r6, [r4, #4]
    //memset(heap_ptr, 0, rounded_nbytes);
    return to_allocate;

}
    8968:	e1a00005 	mov	r0, r5
    896c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8970:	0000a8b4 			; <UNDEFINED> instruction: 0x0000a8b4
    8974:	0000a030 	andeq	sl, r0, r0, lsr r0
    8978:	0000a070 	andeq	sl, r0, r0, ror r0
    897c:	00009ff0 	strdeq	r9, [r0], -r0

00008980 <kmalloc_aligned>:

// address of returned pointer should be a multiple of
// alignment.
void *kmalloc_aligned(unsigned nbytes, unsigned alignment) {
    8980:	e92d4008 	push	{r3, lr}
    demand(init_p, calling before initialized);
    8984:	e59f307c 	ldr	r3, [pc, #124]	; 8a08 <kmalloc_aligned+0x88>
    8988:	e5933000 	ldr	r3, [r3]
    898c:	e3530000 	cmp	r3, #0
    8990:	1a000006 	bne	89b0 <kmalloc_aligned+0x30>
    8994:	ebfffe12 	bl	81e4 <rpi_reset_putc>
    8998:	e59f006c 	ldr	r0, [pc, #108]	; 8a0c <kmalloc_aligned+0x8c>
    899c:	e59f106c 	ldr	r1, [pc, #108]	; 8a10 <kmalloc_aligned+0x90>
    89a0:	e59f206c 	ldr	r2, [pc, #108]	; 8a14 <kmalloc_aligned+0x94>
    89a4:	e3a03028 	mov	r3, #40	; 0x28
    89a8:	ebfffdf2 	bl	8178 <printk>
    89ac:	ebffff61 	bl	8738 <clean_reboot>

    if(alignment <= 8)
    89b0:	e3510008 	cmp	r1, #8
    89b4:	8a000001 	bhi	89c0 <kmalloc_aligned+0x40>
        return kmalloc(nbytes);
    89b8:	ebffffd3 	bl	890c <kmalloc>
    89bc:	e8bd8008 	pop	{r3, pc}
    demand(alignment % 8 == 0, "weird alignment: not a multiple of 4!");
    89c0:	e3110007 	tst	r1, #7
    89c4:	0a000006 	beq	89e4 <kmalloc_aligned+0x64>
    89c8:	ebfffe05 	bl	81e4 <rpi_reset_putc>
    89cc:	e59f0044 	ldr	r0, [pc, #68]	; 8a18 <kmalloc_aligned+0x98>
    89d0:	e59f1038 	ldr	r1, [pc, #56]	; 8a10 <kmalloc_aligned+0x90>
    89d4:	e59f2038 	ldr	r2, [pc, #56]	; 8a14 <kmalloc_aligned+0x94>
    89d8:	e3a0302c 	mov	r3, #44	; 0x2c
    89dc:	ebfffde5 	bl	8178 <printk>
    89e0:	ebffff54 	bl	8738 <clean_reboot>
    unsigned aligned_heap_ptr = (unsigned) heap_ptr;
    89e4:	e59f301c 	ldr	r3, [pc, #28]	; 8a08 <kmalloc_aligned+0x88>
    89e8:	e5932004 	ldr	r2, [r3, #4]
	aligned_heap_ptr = roundup(aligned_heap_ptr, alignment);
    89ec:	e0812002 	add	r2, r1, r2
    89f0:	e2422001 	sub	r2, r2, #1
    89f4:	e2611000 	rsb	r1, r1, #0
    89f8:	e0021001 	and	r1, r2, r1
	heap_ptr = (void*) aligned_heap_ptr;
    89fc:	e5831004 	str	r1, [r3, #4]

	return kmalloc(nbytes);
    8a00:	ebffffc1 	bl	890c <kmalloc>
}
    8a04:	e8bd8008 	pop	{r3, pc}
    8a08:	0000a8b4 			; <UNDEFINED> instruction: 0x0000a8b4
    8a0c:	0000a030 	andeq	sl, r0, r0, lsr r0
    8a10:	0000a070 	andeq	sl, r0, r0, ror r0
    8a14:	00009ff8 	strdeq	r9, [r0], -r8
    8a18:	0000a084 	andeq	sl, r0, r4, lsl #1

00008a1c <kmalloc_init>:
 *    - should be just a few lines of code.
 *    - sets heap pointer to the location of 
 *      __heap_start__.   print this to make sure
 *      it makes sense!
 */
void kmalloc_init(void) {
    8a1c:	e92d4008 	push	{r3, lr}
    demand(!init_p, cannot initialize twice!\n);
    8a20:	e59f303c 	ldr	r3, [pc, #60]	; 8a64 <kmalloc_init+0x48>
    8a24:	e5933000 	ldr	r3, [r3]
    8a28:	e3530000 	cmp	r3, #0
    8a2c:	0a000006 	beq	8a4c <kmalloc_init+0x30>
    8a30:	ebfffdeb 	bl	81e4 <rpi_reset_putc>
    8a34:	e59f002c 	ldr	r0, [pc, #44]	; 8a68 <kmalloc_init+0x4c>
    8a38:	e59f102c 	ldr	r1, [pc, #44]	; 8a6c <kmalloc_init+0x50>
    8a3c:	e59f202c 	ldr	r2, [pc, #44]	; 8a70 <kmalloc_init+0x54>
    8a40:	e3a0303d 	mov	r3, #61	; 0x3d
    8a44:	ebfffdcb 	bl	8178 <printk>
    8a48:	ebffff3a 	bl	8738 <clean_reboot>
    init_p = 1;
    8a4c:	e59f3010 	ldr	r3, [pc, #16]	; 8a64 <kmalloc_init+0x48>
    8a50:	e3a02001 	mov	r2, #1
    8a54:	e5832000 	str	r2, [r3]
    heap_ptr = &__heap_start__;
    8a58:	e59f2014 	ldr	r2, [pc, #20]	; 8a74 <kmalloc_init+0x58>
    8a5c:	e5832004 	str	r2, [r3, #4]
    8a60:	e8bd8008 	pop	{r3, pc}
    8a64:	0000a8b4 			; <UNDEFINED> instruction: 0x0000a8b4
    8a68:	0000a0dc 	ldrdeq	sl, [r0], -ip
    8a6c:	0000a070 	andeq	sl, r0, r0, ror r0
    8a70:	0000a008 	andeq	sl, r0, r8
    8a74:	0000a8e0 	andeq	sl, r0, r0, ror #17

00008a78 <kfree_all>:
/* 
 * free all allocated memory: reset the heap 
 * pointer back to the beginning.
 */
void kfree_all(void) {
    heap_ptr = &__heap_start__;
    8a78:	e59f2008 	ldr	r2, [pc, #8]	; 8a88 <kfree_all+0x10>
    8a7c:	e59f3008 	ldr	r3, [pc, #8]	; 8a8c <kfree_all+0x14>
    8a80:	e5832004 	str	r2, [r3, #4]
    8a84:	e12fff1e 	bx	lr
    8a88:	0000a8e0 	andeq	sl, r0, r0, ror #17
    8a8c:	0000a8b4 			; <UNDEFINED> instruction: 0x0000a8b4

00008a90 <kmalloc_heap_ptr>:
// allocated block satisfies: 
//    assert(<addr> < kmalloc_heap_ptr());
// 
void *kmalloc_heap_ptr(void) {
    return (void*) heap_ptr;
}
    8a90:	e59f3004 	ldr	r3, [pc, #4]	; 8a9c <kmalloc_heap_ptr+0xc>
    8a94:	e5930004 	ldr	r0, [r3, #4]
    8a98:	e12fff1e 	bx	lr
    8a9c:	0000a8b4 			; <UNDEFINED> instruction: 0x0000a8b4

00008aa0 <kmalloc_init_set_start>:

void kmalloc_init_set_start(unsigned start_address) {
    8aa0:	e92d4008 	push	{r3, lr}
    demand(!init_p, cannot initialize twice!\n);
    8aa4:	e59f3038 	ldr	r3, [pc, #56]	; 8ae4 <kmalloc_init_set_start+0x44>
    8aa8:	e5933000 	ldr	r3, [r3]
    8aac:	e3530000 	cmp	r3, #0
    8ab0:	0a000006 	beq	8ad0 <kmalloc_init_set_start+0x30>
    8ab4:	ebfffdca 	bl	81e4 <rpi_reset_putc>
    8ab8:	e59f0028 	ldr	r0, [pc, #40]	; 8ae8 <kmalloc_init_set_start+0x48>
    8abc:	e59f1028 	ldr	r1, [pc, #40]	; 8aec <kmalloc_init_set_start+0x4c>
    8ac0:	e59f2028 	ldr	r2, [pc, #40]	; 8af0 <kmalloc_init_set_start+0x50>
    8ac4:	e3a03054 	mov	r3, #84	; 0x54
    8ac8:	ebfffdaa 	bl	8178 <printk>
    8acc:	ebffff19 	bl	8738 <clean_reboot>
    init_p = 1;
    8ad0:	e59f300c 	ldr	r3, [pc, #12]	; 8ae4 <kmalloc_init_set_start+0x44>
    8ad4:	e3a02001 	mov	r2, #1
    8ad8:	e5832000 	str	r2, [r3]
    heap_ptr = (void*) start_address;
    8adc:	e5830004 	str	r0, [r3, #4]
    8ae0:	e8bd8008 	pop	{r3, pc}
    8ae4:	0000a8b4 			; <UNDEFINED> instruction: 0x0000a8b4
    8ae8:	0000a0dc 	ldrdeq	sl, [r0], -ip
    8aec:	0000a070 	andeq	sl, r0, r0, ror r0
    8af0:	0000a018 	andeq	sl, r0, r8, lsl r0

00008af4 <Q_nelem>:
} Q_t;

// used for iteration.
static E *Q_start(Q_t *q)   { return q->head; }
static E *Q_next(E *e)      { return e->next; }
static unsigned Q_nelem(Q_t *q) { return q->cnt; }
    8af4:	e5900008 	ldr	r0, [r0, #8]
    8af8:	e12fff1e 	bx	lr

00008afc <Q_append>:
    return e;
}

// insert at tail. (for FIFO)
static void Q_append(Q_t *q, E *e) {
    e->next = 0;
    8afc:	e3a03000 	mov	r3, #0
    8b00:	e5813040 	str	r3, [r1, #64]	; 0x40
    q->cnt++;
    8b04:	e5903008 	ldr	r3, [r0, #8]
    8b08:	e2833001 	add	r3, r3, #1
    8b0c:	e5803008 	str	r3, [r0, #8]
    if(!q->tail) 
    8b10:	e5903004 	ldr	r3, [r0, #4]
    8b14:	e3530000 	cmp	r3, #0
    8b18:	1a000002 	bne	8b28 <Q_append+0x2c>
        q->head = q->tail = e;
    8b1c:	e5801004 	str	r1, [r0, #4]
    8b20:	e5801000 	str	r1, [r0]
    8b24:	e12fff1e 	bx	lr
    else {
        q->tail->next = e;
    8b28:	e5831040 	str	r1, [r3, #64]	; 0x40
        q->tail = e;
    8b2c:	e5801004 	str	r1, [r0, #4]
    8b30:	e12fff1e 	bx	lr

00008b34 <Q_push>:
    }
}

// insert at head (for LIFO)
static void Q_push(Q_t *q, E *e) {
    q->cnt++;
    8b34:	e5903008 	ldr	r3, [r0, #8]
    8b38:	e2833001 	add	r3, r3, #1
    8b3c:	e5803008 	str	r3, [r0, #8]
    e->next = q->head;
    8b40:	e5903000 	ldr	r3, [r0]
    8b44:	e5813040 	str	r3, [r1, #64]	; 0x40
    q->head = e;
    8b48:	e5801000 	str	r1, [r0]
    if(!q->tail)
    8b4c:	e5903004 	ldr	r3, [r0, #4]
    8b50:	e3530000 	cmp	r3, #0
        q->tail = e;
    8b54:	05801004 	streq	r1, [r0, #4]
    8b58:	e12fff1e 	bx	lr

00008b5c <th_free>:
    demand(is_aligned(&t->stack[0],8), stack must be 8-byte aligned!);
    t->tid = tid++;
    return t;
}

static void th_free(rpi_thread_t *th) {
    8b5c:	e92d4008 	push	{r3, lr}
    8b60:	e1a01000 	mov	r1, r0
    // push on the front in case helps with caching.
    Q_push(&freeq, th);
    8b64:	e59f0004 	ldr	r0, [pc, #4]	; 8b70 <th_free+0x14>
    8b68:	ebfffff1 	bl	8b34 <Q_push>
    8b6c:	e8bd8008 	pop	{r3, pc}
    8b70:	0000a8bc 			; <UNDEFINED> instruction: 0x0000a8bc

00008b74 <Q_empty>:
// used for iteration.
static E *Q_start(Q_t *q)   { return q->head; }
static E *Q_next(E *e)      { return e->next; }
static unsigned Q_nelem(Q_t *q) { return q->cnt; }

static int Q_empty(Q_t *q)  { 
    8b74:	e92d4010 	push	{r4, lr}
    8b78:	e1a04000 	mov	r4, r0
    if(q->head)
    8b7c:	e5903000 	ldr	r3, [r0]
    8b80:	e3530000 	cmp	r3, #0
    8b84:	1a000013 	bne	8bd8 <Q_empty+0x64>
        return 0;
    assert(Q_nelem(q) == 0);
    8b88:	ebffffd9 	bl	8af4 <Q_nelem>
    8b8c:	e3500000 	cmp	r0, #0
    8b90:	0a000006 	beq	8bb0 <Q_empty+0x3c>
    8b94:	ebfffd92 	bl	81e4 <rpi_reset_putc>
    8b98:	e59f0048 	ldr	r0, [pc, #72]	; 8be8 <Q_empty+0x74>
    8b9c:	e59f1048 	ldr	r1, [pc, #72]	; 8bec <Q_empty+0x78>
    8ba0:	e59f2048 	ldr	r2, [pc, #72]	; 8bf0 <Q_empty+0x7c>
    8ba4:	e3a03015 	mov	r3, #21
    8ba8:	ebfffd72 	bl	8178 <printk>
    8bac:	ebfffee1 	bl	8738 <clean_reboot>
    demand(!q->tail, invalid Q);
    8bb0:	e5943004 	ldr	r3, [r4, #4]
    8bb4:	e3530000 	cmp	r3, #0
    8bb8:	0a000008 	beq	8be0 <Q_empty+0x6c>
    8bbc:	ebfffd88 	bl	81e4 <rpi_reset_putc>
    8bc0:	e59f002c 	ldr	r0, [pc, #44]	; 8bf4 <Q_empty+0x80>
    8bc4:	e59f1020 	ldr	r1, [pc, #32]	; 8bec <Q_empty+0x78>
    8bc8:	e59f2020 	ldr	r2, [pc, #32]	; 8bf0 <Q_empty+0x7c>
    8bcc:	e3a03016 	mov	r3, #22
    8bd0:	ebfffd68 	bl	8178 <printk>
    8bd4:	ebfffed7 	bl	8738 <clean_reboot>
static E *Q_next(E *e)      { return e->next; }
static unsigned Q_nelem(Q_t *q) { return q->cnt; }

static int Q_empty(Q_t *q)  { 
    if(q->head)
        return 0;
    8bd8:	e3a00000 	mov	r0, #0
    8bdc:	e8bd8010 	pop	{r4, pc}
    assert(Q_nelem(q) == 0);
    demand(!q->tail, invalid Q);
    return 1;
    8be0:	e3a00001 	mov	r0, #1
}
    8be4:	e8bd8010 	pop	{r4, pc}
    8be8:	0000a178 	andeq	sl, r0, r8, ror r1
    8bec:	0000a198 	muleq	r0, r8, r1
    8bf0:	0000a11c 	andeq	sl, r0, ip, lsl r1
    8bf4:	0000a1a4 	andeq	sl, r0, r4, lsr #3

00008bf8 <Q_pop>:

// remove from front of list.
static E *Q_pop(Q_t *q) {
    8bf8:	e92d4008 	push	{r3, lr}
    demand(q, bad input);
    8bfc:	e3500000 	cmp	r0, #0
    8c00:	1a000006 	bne	8c20 <Q_pop+0x28>
    8c04:	ebfffd76 	bl	81e4 <rpi_reset_putc>
    8c08:	e59f0070 	ldr	r0, [pc, #112]	; 8c80 <Q_pop+0x88>
    8c0c:	e59f1070 	ldr	r1, [pc, #112]	; 8c84 <Q_pop+0x8c>
    8c10:	e59f2070 	ldr	r2, [pc, #112]	; 8c88 <Q_pop+0x90>
    8c14:	e3a0301c 	mov	r3, #28
    8c18:	ebfffd56 	bl	8178 <printk>
    8c1c:	ebfffec5 	bl	8738 <clean_reboot>

    E *e = q->head;
    8c20:	e5903000 	ldr	r3, [r0]
    if(!e) {
    8c24:	e3530000 	cmp	r3, #0
    8c28:	1a000009 	bne	8c54 <Q_pop+0x5c>
        assert(Q_empty(q));
    8c2c:	ebffffd0 	bl	8b74 <Q_empty>
    8c30:	e3500000 	cmp	r0, #0
    8c34:	1a00000f 	bne	8c78 <Q_pop+0x80>
    8c38:	ebfffd69 	bl	81e4 <rpi_reset_putc>
    8c3c:	e59f0048 	ldr	r0, [pc, #72]	; 8c8c <Q_pop+0x94>
    8c40:	e59f103c 	ldr	r1, [pc, #60]	; 8c84 <Q_pop+0x8c>
    8c44:	e59f203c 	ldr	r2, [pc, #60]	; 8c88 <Q_pop+0x90>
    8c48:	e3a03020 	mov	r3, #32
    8c4c:	ebfffd49 	bl	8178 <printk>
    8c50:	ebfffeb8 	bl	8738 <clean_reboot>
        return 0;
    }
    q->cnt--;
    8c54:	e5902008 	ldr	r2, [r0, #8]
    8c58:	e2422001 	sub	r2, r2, #1
    8c5c:	e5802008 	str	r2, [r0, #8]
    q->head = e->next;
    8c60:	e5932040 	ldr	r2, [r3, #64]	; 0x40
    8c64:	e5802000 	str	r2, [r0]
    if(!q->head)
    8c68:	e3520000 	cmp	r2, #0
        q->tail = 0;
    8c6c:	05802004 	streq	r2, [r0, #4]
    return e;
    8c70:	e1a00003 	mov	r0, r3
    8c74:	e8bd8008 	pop	{r3, pc}
    demand(q, bad input);

    E *e = q->head;
    if(!e) {
        assert(Q_empty(q));
        return 0;
    8c78:	e3a00000 	mov	r0, #0
    q->cnt--;
    q->head = e->next;
    if(!q->head)
        q->tail = 0;
    return e;
}
    8c7c:	e8bd8008 	pop	{r3, pc}
    8c80:	0000a1d4 	ldrdeq	sl, [r0], -r4
    8c84:	0000a198 	muleq	r0, r8, r1
    8c88:	0000a124 	andeq	sl, r0, r4, lsr #2
    8c8c:	0000a1fc 	strdeq	sl, [r0], -ip

00008c90 <th_alloc>:
}

#define is_aligned(_p,_n) (((unsigned)(_p))%(_n) == 0)

// keep a cache of freed thread blocks.  call kmalloc if run out.
static rpi_thread_t *th_alloc(void) {
    8c90:	e92d4008 	push	{r3, lr}
    rpi_thread_t *t = Q_pop(&freeq);
    8c94:	e59f0060 	ldr	r0, [pc, #96]	; 8cfc <th_alloc+0x6c>
    8c98:	ebffffd6 	bl	8bf8 <Q_pop>

    // stack has to be 8-byte aligned.
    if(!t) {
    8c9c:	e3500000 	cmp	r0, #0
    8ca0:	1a000006 	bne	8cc0 <th_alloc+0x30>
        t = kmalloc_aligned(sizeof *t, 8);
    8ca4:	e59f0054 	ldr	r0, [pc, #84]	; 8d00 <th_alloc+0x70>
    8ca8:	e3a01008 	mov	r1, #8
    8cac:	ebffff33 	bl	8980 <kmalloc_aligned>
        nalloced++;
    8cb0:	e59f3044 	ldr	r3, [pc, #68]	; 8cfc <th_alloc+0x6c>
    8cb4:	e593200c 	ldr	r2, [r3, #12]
    8cb8:	e2822001 	add	r2, r2, #1
    8cbc:	e583200c 	str	r2, [r3, #12]
    }
    demand(is_aligned(&t->stack[0],8), stack must be 8-byte aligned!);
    8cc0:	e3100007 	tst	r0, #7
    8cc4:	0a000006 	beq	8ce4 <th_alloc+0x54>
    8cc8:	ebfffd45 	bl	81e4 <rpi_reset_putc>
    8ccc:	e59f0030 	ldr	r0, [pc, #48]	; 8d04 <th_alloc+0x74>
    8cd0:	e59f1030 	ldr	r1, [pc, #48]	; 8d08 <th_alloc+0x78>
    8cd4:	e59f2030 	ldr	r2, [pc, #48]	; 8d0c <th_alloc+0x7c>
    8cd8:	e3a03023 	mov	r3, #35	; 0x23
    8cdc:	ebfffd25 	bl	8178 <printk>
    8ce0:	ebfffe94 	bl	8738 <clean_reboot>
    t->tid = tid++;
    8ce4:	e59f2024 	ldr	r2, [pc, #36]	; 8d10 <th_alloc+0x80>
    8ce8:	e5923000 	ldr	r3, [r2]
    8cec:	e2831001 	add	r1, r3, #1
    8cf0:	e5821000 	str	r1, [r2]
    8cf4:	e5803044 	str	r3, [r0, #68]	; 0x44
    return t;
}
    8cf8:	e8bd8008 	pop	{r3, pc}
    8cfc:	0000a8bc 			; <UNDEFINED> instruction: 0x0000a8bc
    8d00:	00002050 	andeq	r2, r0, r0, asr r0
    8d04:	0000a218 	andeq	sl, r0, r8, lsl r2
    8d08:	0000a278 	andeq	sl, r0, r8, ror r2
    8d0c:	0000a12c 	andeq	sl, r0, ip, lsr #2
    8d10:	00009db0 			; <UNDEFINED> instruction: 0x00009db0

00008d14 <rpi_cur_thread>:
static unsigned nalloced = 0;

// return pointer to the current thread.  
rpi_thread_t *rpi_cur_thread(void) {
    return cur_thread;
}
    8d14:	e59f3004 	ldr	r3, [pc, #4]	; 8d20 <rpi_cur_thread+0xc>
    8d18:	e5930010 	ldr	r0, [r3, #16]
    8d1c:	e12fff1e 	bx	lr
    8d20:	0000a8bc 			; <UNDEFINED> instruction: 0x0000a8bc

00008d24 <rpi_fork>:
/***********************************************************************
 * implement the code below.
 */

// create a new thread.
rpi_thread_t *rpi_fork(void (*code)(void *arg), void *arg) {
    8d24:	e92d4070 	push	{r4, r5, r6, lr}
    8d28:	e1a06000 	mov	r6, r0
    8d2c:	e1a05001 	mov	r5, r1
    rpi_thread_t *t = th_alloc();
    8d30:	ebffffd6 	bl	8c90 <th_alloc>
    8d34:	e1a04000 	mov	r4, r0
    /*
     * do the brain-surgery on the new thread stack here.
     * must set up initial stack: 
     *  - set LR, SP, and store <code> and <arg> where trampoline can get it.
     */
    t->reg_save_area[0] = (unsigned) code;
    8d38:	e5806000 	str	r6, [r0]
	t->reg_save_area[1] = (unsigned) arg;
    8d3c:	e5805004 	str	r5, [r0, #4]
	void rpi_init_trampoline(void);
	t->reg_save_area[REG_LR_OFF] = (unsigned) &rpi_init_trampoline;
    8d40:	e59f3020 	ldr	r3, [pc, #32]	; 8d68 <rpi_fork+0x44>
    8d44:	e5803024 	str	r3, [r0, #36]	; 0x24
	t->reg_save_area[REG_SP_OFF] = (unsigned) &t->stack[THREAD_MAXSTACK - 2];
    8d48:	e2803d81 	add	r3, r0, #8256	; 0x2040
    8d4c:	e2833008 	add	r3, r3, #8
    8d50:	e5803028 	str	r3, [r0, #40]	; 0x28
    //unimplemented();
    Q_append(&runq, t);
    8d54:	e59f0010 	ldr	r0, [pc, #16]	; 8d6c <rpi_fork+0x48>
    8d58:	e1a01004 	mov	r1, r4
    8d5c:	ebffff66 	bl	8afc <Q_append>
    return t;
}
    8d60:	e1a00004 	mov	r0, r4
    8d64:	e8bd8070 	pop	{r4, r5, r6, pc}
    8d68:	000097c4 	andeq	r9, r0, r4, asr #15
    8d6c:	0000a8d0 	ldrdeq	sl, [r0], -r0

00008d70 <rpi_exit>:

// exit current thread.
void rpi_exit(int exitcode) {
    8d70:	e92d4038 	push	{r3, r4, r5, lr}
 	 * switch to it.
	 
	 * 3. otherwise we are done, switch to the scheduler thread 
	 * so we call back into the client code.
	 */
	rpi_thread_t* old_thread = cur_thread;
    8d74:	e59f5048 	ldr	r5, [pc, #72]	; 8dc4 <rpi_exit+0x54>
    8d78:	e5954010 	ldr	r4, [r5, #16]
	th_free(cur_thread);
    8d7c:	e1a00004 	mov	r0, r4
    8d80:	ebffff75 	bl	8b5c <th_free>

	if(!Q_empty(&runq)) {
    8d84:	e2850014 	add	r0, r5, #20
    8d88:	ebffff79 	bl	8b74 <Q_empty>
    8d8c:	e3500000 	cmp	r0, #0
    8d90:	1a000003 	bne	8da4 <rpi_exit+0x34>
		cur_thread = Q_pop(&runq);
    8d94:	e2850014 	add	r0, r5, #20
    8d98:	ebffff96 	bl	8bf8 <Q_pop>
    8d9c:	e5850010 	str	r0, [r5, #16]
    8da0:	ea000002 	b	8db0 <rpi_exit+0x40>
	} else {
		cur_thread = scheduler_thread;
    8da4:	e59f3018 	ldr	r3, [pc, #24]	; 8dc4 <rpi_exit+0x54>
    8da8:	e5932020 	ldr	r2, [r3, #32]
    8dac:	e5832010 	str	r2, [r3, #16]
	}
	rpi_cswitch(old_thread->reg_save_area, cur_thread->reg_save_area);
    8db0:	e1a00004 	mov	r0, r4
    8db4:	e59f3008 	ldr	r3, [pc, #8]	; 8dc4 <rpi_exit+0x54>
    8db8:	e5931010 	ldr	r1, [r3, #16]
    8dbc:	eb000269 	bl	9768 <rpi_cswitch>
    8dc0:	e8bd8038 	pop	{r3, r4, r5, pc}
    8dc4:	0000a8bc 			; <UNDEFINED> instruction: 0x0000a8bc

00008dc8 <rpi_yield>:
	return;
}

// yield the current thread.
void rpi_yield(void) {
    8dc8:	e92d4070 	push	{r4, r5, r6, lr}
	//	- there are no more runnable threads, return.  
	// otherwise: 
	//	1. put current thread on runq.
	// 	2. context switch to the new thread.
	//rpi_thread_t* next_thread;
	if(Q_empty(&runq)) {
    8dcc:	e59f003c 	ldr	r0, [pc, #60]	; 8e10 <rpi_yield+0x48>
    8dd0:	ebffff67 	bl	8b74 <Q_empty>
    8dd4:	e3500000 	cmp	r0, #0
    8dd8:	18bd8070 	popne	{r4, r5, r6, pc}
		return;
	} else {
		rpi_thread_t* old_thread = cur_thread;
    8ddc:	e59f4030 	ldr	r4, [pc, #48]	; 8e14 <rpi_yield+0x4c>
    8de0:	e5945010 	ldr	r5, [r4, #16]
		Q_append(&runq, cur_thread);
    8de4:	e2846014 	add	r6, r4, #20
    8de8:	e1a00006 	mov	r0, r6
    8dec:	e1a01005 	mov	r1, r5
    8df0:	ebffff41 	bl	8afc <Q_append>
		cur_thread = Q_pop(&runq);
    8df4:	e1a00006 	mov	r0, r6
    8df8:	ebffff7e 	bl	8bf8 <Q_pop>
    8dfc:	e1a01000 	mov	r1, r0
    8e00:	e5840010 	str	r0, [r4, #16]
		rpi_cswitch(old_thread->reg_save_area, cur_thread->reg_save_area);
    8e04:	e1a00005 	mov	r0, r5
    8e08:	eb000256 	bl	9768 <rpi_cswitch>
    8e0c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8e10:	0000a8d0 	ldrdeq	sl, [r0], -r0
    8e14:	0000a8bc 			; <UNDEFINED> instruction: 0x0000a8bc

00008e18 <rpi_internal_check>:
    printk("rpithreads: done with all threads! returning\n");
}


// internal consistency checks.
void rpi_internal_check(void) {
    8e18:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8e1c:	e24dd014 	sub	sp, sp, #20
    // the blocks on the runq + freeq must equal the total ever allocated
    // or we have leaked storage.
    unsigned n_free = Q_nelem(&freeq),
    8e20:	e59f4074 	ldr	r4, [pc, #116]	; 8e9c <rpi_internal_check+0x84>
    8e24:	e1a00004 	mov	r0, r4
    8e28:	ebffff31 	bl	8af4 <Q_nelem>
    8e2c:	e1a06000 	mov	r6, r0
             n_run = Q_nelem(&runq),
    8e30:	e2840014 	add	r0, r4, #20
    8e34:	ebffff2e 	bl	8af4 <Q_nelem>
    8e38:	e1a05000 	mov	r5, r0
             n = n_free + n_run;
    8e3c:	e0867000 	add	r7, r6, r0

    if(nalloced != n)
    8e40:	e594300c 	ldr	r3, [r4, #12]
    8e44:	e1530007 	cmp	r3, r7
    8e48:	0a00000b 	beq	8e7c <rpi_internal_check+0x64>
        panic("storage leak: should have %d free blocks, have %d (runq=%d, freeq=%d)\n", 
    8e4c:	ebfffce4 	bl	81e4 <rpi_reset_putc>
    8e50:	e594300c 	ldr	r3, [r4, #12]
    8e54:	e58d3000 	str	r3, [sp]
    8e58:	e58d7004 	str	r7, [sp, #4]
    8e5c:	e58d6008 	str	r6, [sp, #8]
    8e60:	e58d500c 	str	r5, [sp, #12]
    8e64:	e59f0034 	ldr	r0, [pc, #52]	; 8ea0 <rpi_internal_check+0x88>
    8e68:	e59f1034 	ldr	r1, [pc, #52]	; 8ea4 <rpi_internal_check+0x8c>
    8e6c:	e59f2034 	ldr	r2, [pc, #52]	; 8ea8 <rpi_internal_check+0x90>
    8e70:	e3a03095 	mov	r3, #149	; 0x95
    8e74:	ebfffcbf 	bl	8178 <printk>
    8e78:	ebfffe2e 	bl	8738 <clean_reboot>
            nalloced, n, n_free,n_run);

    // active thread system: 
    //      walk through the run queue making sure the stack pointer
    //     and ra pointer makes sense.
    if(!Q_empty(&runq)) {
    8e7c:	e59f0028 	ldr	r0, [pc, #40]	; 8eac <rpi_internal_check+0x94>
    8e80:	ebffff3b 	bl	8b74 <Q_empty>
    8e84:	e3500000 	cmp	r0, #0
    8e88:	0a000001 	beq	8e94 <rpi_internal_check+0x7c>
        //unimplemented();
        return;
    }
    printk("thread: internal check passed\n");
    8e8c:	e59f001c 	ldr	r0, [pc, #28]	; 8eb0 <rpi_internal_check+0x98>
    8e90:	ebfffcb8 	bl	8178 <printk>
}
    8e94:	e28dd014 	add	sp, sp, #20
    8e98:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8e9c:	0000a8bc 			; <UNDEFINED> instruction: 0x0000a8bc
    8ea0:	0000a28c 	andeq	sl, r0, ip, lsl #5
    8ea4:	0000a278 	andeq	sl, r0, r8, ror r2
    8ea8:	0000a138 	andeq	sl, r0, r8, lsr r1
    8eac:	0000a8d0 	ldrdeq	sl, [r0], -r0
    8eb0:	0000a2e4 	andeq	sl, r0, r4, ror #5

00008eb4 <rpi_thread_start>:
/*
 * starts the thread system.  
 * note: our caller is not a thread!  so you have to figure
 * out how to handle this.
 */
void rpi_thread_start(void) {
    8eb4:	e92d4010 	push	{r4, lr}
    AssertNow(offsetof(rpi_thread_t, stack) % 8 == 0);
    // statically check that the register save area is at offset 0.
    AssertNow(offsetof(rpi_thread_t, reg_save_area) == 0);

    // no other runnable thread: return.
    if(Q_empty(&runq))
    8eb8:	e59f003c 	ldr	r0, [pc, #60]	; 8efc <rpi_thread_start+0x48>
    8ebc:	ebffff2c 	bl	8b74 <Q_empty>
    8ec0:	e3500000 	cmp	r0, #0
    8ec4:	18bd8010 	popne	{r4, pc}
        return;
    rpi_internal_check();
    8ec8:	ebffffd2 	bl	8e18 <rpi_internal_check>
    //unimplemented();
    //  1. create a new fake thread 
    //  2. dequeue a thread from the runq
    //  3. context switch to it, saving current state in
    //	    <scheduler_thread>
    scheduler_thread = th_alloc();
    8ecc:	ebffff6f 	bl	8c90 <th_alloc>
    8ed0:	e59f4028 	ldr	r4, [pc, #40]	; 8f00 <rpi_thread_start+0x4c>
    8ed4:	e5840020 	str	r0, [r4, #32]
	cur_thread = Q_pop(&runq);
    8ed8:	e2840014 	add	r0, r4, #20
    8edc:	ebffff45 	bl	8bf8 <Q_pop>
    8ee0:	e1a01000 	mov	r1, r0
    8ee4:	e5840010 	str	r0, [r4, #16]
	rpi_cswitch(scheduler_thread->reg_save_area, cur_thread->reg_save_area);
    8ee8:	e5940020 	ldr	r0, [r4, #32]
    8eec:	eb00021d 	bl	9768 <rpi_cswitch>
	//unimplemented();
    printk("rpithreads: done with all threads! returning\n");
    8ef0:	e59f000c 	ldr	r0, [pc, #12]	; 8f04 <rpi_thread_start+0x50>
    8ef4:	ebfffc9f 	bl	8178 <printk>
    8ef8:	e8bd8010 	pop	{r4, pc}
    8efc:	0000a8d0 	ldrdeq	sl, [r0], -r0
    8f00:	0000a8bc 			; <UNDEFINED> instruction: 0x0000a8bc
    8f04:	0000a304 	andeq	sl, r0, r4, lsl #6

00008f08 <rpi_stack_check>:
    }
    printk("thread: internal check passed\n");
}

// check the current thread stack.
void rpi_stack_check(void) {
    8f08:	e92d4008 	push	{r3, lr}
    unimplemented();
    8f0c:	ebfffcb4 	bl	81e4 <rpi_reset_putc>
    8f10:	e59f0010 	ldr	r0, [pc, #16]	; 8f28 <rpi_stack_check+0x20>
    8f14:	e59f1010 	ldr	r1, [pc, #16]	; 8f2c <rpi_stack_check+0x24>
    8f18:	e59f2010 	ldr	r2, [pc, #16]	; 8f30 <rpi_stack_check+0x28>
    8f1c:	e3a030a3 	mov	r3, #163	; 0xa3
    8f20:	ebfffc94 	bl	8178 <printk>
    8f24:	ebfffe03 	bl	8738 <clean_reboot>
    8f28:	0000a334 	andeq	sl, r0, r4, lsr r3
    8f2c:	0000a278 	andeq	sl, r0, r8, ror r2
    8f30:	0000a14c 	andeq	sl, r0, ip, asr #2

00008f34 <rpi_join>:
/********************************************************************
 * save for homework.
 */

// block caller until thread <th> completes.
void rpi_join(rpi_thread_t *th) {
    8f34:	e92d4008 	push	{r3, lr}
    unimplemented();
    8f38:	ebfffca9 	bl	81e4 <rpi_reset_putc>
    8f3c:	e59f0010 	ldr	r0, [pc, #16]	; 8f54 <rpi_join+0x20>
    8f40:	e59f1010 	ldr	r1, [pc, #16]	; 8f58 <rpi_join+0x24>
    8f44:	e59f2010 	ldr	r2, [pc, #16]	; 8f5c <rpi_join+0x28>
    8f48:	e3a030ac 	mov	r3, #172	; 0xac
    8f4c:	ebfffc89 	bl	8178 <printk>
    8f50:	ebfffdf8 	bl	8738 <clean_reboot>
    8f54:	0000a334 	andeq	sl, r0, r4, lsr r3
    8f58:	0000a278 	andeq	sl, r0, r8, ror r2
    8f5c:	0000a15c 	andeq	sl, r0, ip, asr r1

00008f60 <rpi_exact_sleep>:
}

// put the current thread on a blocked queue: resume in 
// exactly // <usec> micro-seconds.  not before, not after.
// should give low-error resumption times.
void rpi_exact_sleep(uint32_t usec) {
    8f60:	e92d4008 	push	{r3, lr}
    unimplemented();
    8f64:	ebfffc9e 	bl	81e4 <rpi_reset_putc>
    8f68:	e59f0010 	ldr	r0, [pc, #16]	; 8f80 <rpi_exact_sleep+0x20>
    8f6c:	e59f1010 	ldr	r1, [pc, #16]	; 8f84 <rpi_exact_sleep+0x24>
    8f70:	e59f2010 	ldr	r2, [pc, #16]	; 8f88 <rpi_exact_sleep+0x28>
    8f74:	e3a030b3 	mov	r3, #179	; 0xb3
    8f78:	ebfffc7e 	bl	8178 <printk>
    8f7c:	ebfffded 	bl	8738 <clean_reboot>
    8f80:	0000a334 	andeq	sl, r0, r4, lsr r3
    8f84:	0000a278 	andeq	sl, r0, r8, ror r2
    8f88:	0000a168 	andeq	sl, r0, r8, ror #2

00008f8c <sw_uart_putc>:
 */ 
#include "rpi.h"
#include "sw-uart.h"
#include "cycle-util.h"

void sw_uart_putc(sw_uart_t *uart, unsigned char c) {
    8f8c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8f90:	e1a07001 	mov	r7, r1
    // use local variables to minimize any loads or stores
    int tx = uart->tx;
    8f94:	e5d06000 	ldrb	r6, [r0]
    uint32_t n = uart->cycle_per_bit,
    8f98:	e5905008 	ldr	r5, [r0, #8]
             u = n,
             s = cycle_cnt_read();
    8f9c:	ee1f4f3c 	mrc	15, 0, r4, cr15, cr12, {1}
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8fa0:	e1a00006 	mov	r0, r6
    8fa4:	e3a01000 	mov	r1, #0
    8fa8:	eb00029f 	bl	9a2c <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    8fac:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8fb0:	e0643003 	rsb	r3, r4, r3
    8fb4:	e1550003 	cmp	r5, r3
    8fb8:	8afffffb 	bhi	8fac <sw_uart_putc+0x20>
	
	// lower line (line idling)
	write_cyc_until(tx, 0, s, u);
	u += n; 
    8fbc:	e1a08085 	lsl	r8, r5, #1
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8fc0:	e1a00006 	mov	r0, r6
    8fc4:	e2071001 	and	r1, r7, #1
    8fc8:	eb000297 	bl	9a2c <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    8fcc:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8fd0:	e0643003 	rsb	r3, r4, r3
    8fd4:	e1580003 	cmp	r8, r3
    8fd8:	8afffffb 	bhi	8fcc <sw_uart_putc+0x40>
	write_cyc_until(tx, c & 1, s, u);
	u += n; 
    8fdc:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8fe0:	e1a00006 	mov	r0, r6
    8fe4:	e2071002 	and	r1, r7, #2
    8fe8:	eb00028f 	bl	9a2c <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    8fec:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8ff0:	e0643003 	rsb	r3, r4, r3
    8ff4:	e1580003 	cmp	r8, r3
    8ff8:	8afffffb 	bhi	8fec <sw_uart_putc+0x60>
	write_cyc_until(tx, c & 2, s, u);
	u += n; 
    8ffc:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    9000:	e1a00006 	mov	r0, r6
    9004:	e2071004 	and	r1, r7, #4
    9008:	eb000287 	bl	9a2c <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    900c:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    9010:	e0643003 	rsb	r3, r4, r3
    9014:	e1580003 	cmp	r8, r3
    9018:	8afffffb 	bhi	900c <sw_uart_putc+0x80>
	write_cyc_until(tx, c & 4, s, u);
	u += n; 
    901c:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    9020:	e1a00006 	mov	r0, r6
    9024:	e2071008 	and	r1, r7, #8
    9028:	eb00027f 	bl	9a2c <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    902c:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    9030:	e0643003 	rsb	r3, r4, r3
    9034:	e1580003 	cmp	r8, r3
    9038:	8afffffb 	bhi	902c <sw_uart_putc+0xa0>
	write_cyc_until(tx, c & 8, s, u);
	u += n; 
    903c:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    9040:	e1a00006 	mov	r0, r6
    9044:	e2071010 	and	r1, r7, #16
    9048:	eb000277 	bl	9a2c <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    904c:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    9050:	e0643003 	rsb	r3, r4, r3
    9054:	e1580003 	cmp	r8, r3
    9058:	8afffffb 	bhi	904c <sw_uart_putc+0xc0>
	write_cyc_until(tx, c & 16, s, u);
	u += n; 
    905c:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    9060:	e1a00006 	mov	r0, r6
    9064:	e2071020 	and	r1, r7, #32
    9068:	eb00026f 	bl	9a2c <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    906c:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    9070:	e0643003 	rsb	r3, r4, r3
    9074:	e1580003 	cmp	r8, r3
    9078:	8afffffb 	bhi	906c <sw_uart_putc+0xe0>
	write_cyc_until(tx, c & 32, s, u);
	u += n; 
    907c:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    9080:	e1a00006 	mov	r0, r6
    9084:	e2071040 	and	r1, r7, #64	; 0x40
    9088:	eb000267 	bl	9a2c <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    908c:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    9090:	e0643003 	rsb	r3, r4, r3
    9094:	e1580003 	cmp	r8, r3
    9098:	8afffffb 	bhi	908c <sw_uart_putc+0x100>
	write_cyc_until(tx, c & 64, s, u);
	u += n;
    909c:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    90a0:	e1a00006 	mov	r0, r6
    90a4:	e2071080 	and	r1, r7, #128	; 0x80
    90a8:	eb00025f 	bl	9a2c <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    90ac:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    90b0:	e0643003 	rsb	r3, r4, r3
    90b4:	e1580003 	cmp	r8, r3
    90b8:	8afffffb 	bhi	90ac <sw_uart_putc+0x120>
	write_cyc_until(tx, c & 128, s, u);
	u += n; 
    90bc:	e0885005 	add	r5, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    90c0:	e1a00006 	mov	r0, r6
    90c4:	e3a01001 	mov	r1, #1
    90c8:	eb000257 	bl	9a2c <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    90cc:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    90d0:	e0643003 	rsb	r3, r4, r3
    90d4:	e1550003 	cmp	r5, r3
    90d8:	8afffffb 	bhi	90cc <sw_uart_putc+0x140>
	write_cyc_until(tx, 1, s, u);
}
    90dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000090e0 <sw_uart_getc_timeout>:
}

// do this second: you can type in pi-cat to send stuff.
//      EASY BUG: if you are reading input, but you do not get here in 
//      time it will disappear.
int sw_uart_getc_timeout(sw_uart_t *uart, int timeout_usec) {
    90e0:	e92d43f8 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
    90e4:	e1a09000 	mov	r9, r0
   int rx = uart->rx;
    90e8:	e5d07001 	ldrb	r7, [r0, #1]
    90ec:	e1a05007 	mov	r5, r7

    // get start bit: timeout_usec=0 implies you return right away.
    while(!wait_until_usec(rx, 0, timeout_usec))
    90f0:	e1a06001 	mov	r6, r1
	write_cyc_until(tx, 1, s, u);
}

// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    90f4:	ebfffde9 	bl	88a0 <timer_get_usec_raw>
    90f8:	e1a04000 	mov	r4, r0
    while(1) {
        if(gpio_read(rx) == v)
    90fc:	e1a00005 	mov	r0, r5
    9100:	eb000236 	bl	99e0 <gpio_read>
    9104:	e3500000 	cmp	r0, #0
    9108:	0a000005 	beq	9124 <sw_uart_getc_timeout+0x44>
            return 1;
        if(timer_get_usec_raw() - start > timeout_usec)
    910c:	ebfffde3 	bl	88a0 <timer_get_usec_raw>
    9110:	e0640000 	rsb	r0, r4, r0
    9114:	e1560000 	cmp	r6, r0
    9118:	2afffff7 	bcs	90fc <sw_uart_getc_timeout+0x1c>
            return 0;
    911c:	e3a03000 	mov	r3, #0
    9120:	ea000000 	b	9128 <sw_uart_getc_timeout+0x48>
// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    while(1) {
        if(gpio_read(rx) == v)
            return 1;
    9124:	e3a03001 	mov	r3, #1
//      time it will disappear.
int sw_uart_getc_timeout(sw_uart_t *uart, int timeout_usec) {
   int rx = uart->rx;

    // get start bit: timeout_usec=0 implies you return right away.
    while(!wait_until_usec(rx, 0, timeout_usec))
    9128:	e3530000 	cmp	r3, #0
    912c:	0a000059 	beq	9298 <sw_uart_getc_timeout+0x1b8>
        return -1;

    // do this first so we have a tighter bound (maybe)
    unsigned s = cycle_cnt_read();  // subtract off slop?
    9130:	ee1f8f3c 	mrc	15, 0, r8, cr15, cr12, {1}

    // store these in locals to minimize load stores later.
    uint32_t u = uart->cycle_per_bit;
    9134:	e5994008 	ldr	r4, [r9, #8]
    unsigned n = u/2;
    unsigned c = 0;

    // wait one period + 1/2 to get in the middle of the next read.
    delay_ncycles(s, n + 1*u);
    9138:	e08420a4 	add	r2, r4, r4, lsr #1
    913c:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    9140:	e0683003 	rsb	r3, r8, r3
    9144:	e1520003 	cmp	r2, r3
    9148:	8afffffb 	bhi	913c <sw_uart_getc_timeout+0x5c>
	
	s += u;
    914c:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx);
    9150:	e1a00007 	mov	r0, r7
    9154:	eb000221 	bl	99e0 <gpio_read>
    9158:	e1a09750 	asr	r9, r0, r7
    915c:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    9160:	e0683003 	rsb	r3, r8, r3
    9164:	e1540003 	cmp	r4, r3
    9168:	8afffffb 	bhi	915c <sw_uart_getc_timeout+0x7c>
    delay_ncycles(s, u);
	s += u; 
    916c:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 1;
    9170:	e1a00007 	mov	r0, r7
    9174:	eb000219 	bl	99e0 <gpio_read>
    9178:	e1a00750 	asr	r0, r0, r7
    917c:	e1899080 	orr	r9, r9, r0, lsl #1
    9180:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    9184:	e0683003 	rsb	r3, r8, r3
    9188:	e1540003 	cmp	r4, r3
    918c:	8afffffb 	bhi	9180 <sw_uart_getc_timeout+0xa0>
    delay_ncycles(s, u);
	s += u;
    9190:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 2;
    9194:	e1a00007 	mov	r0, r7
    9198:	eb000210 	bl	99e0 <gpio_read>
    919c:	e1a00750 	asr	r0, r0, r7
    91a0:	e1899100 	orr	r9, r9, r0, lsl #2
    91a4:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    91a8:	e0683003 	rsb	r3, r8, r3
    91ac:	e1540003 	cmp	r4, r3
    91b0:	8afffffb 	bhi	91a4 <sw_uart_getc_timeout+0xc4>
    delay_ncycles(s, u);
	s += u;
    91b4:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 3;
    91b8:	e1a00007 	mov	r0, r7
    91bc:	eb000207 	bl	99e0 <gpio_read>
    91c0:	e1a00750 	asr	r0, r0, r7
    91c4:	e1899180 	orr	r9, r9, r0, lsl #3
    91c8:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    91cc:	e0683003 	rsb	r3, r8, r3
    91d0:	e1540003 	cmp	r4, r3
    91d4:	8afffffb 	bhi	91c8 <sw_uart_getc_timeout+0xe8>
    delay_ncycles(s, u);
	s += u;
    91d8:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 4;
    91dc:	e1a00007 	mov	r0, r7
    91e0:	eb0001fe 	bl	99e0 <gpio_read>
    91e4:	e1a00750 	asr	r0, r0, r7
    91e8:	e1899200 	orr	r9, r9, r0, lsl #4
    91ec:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    91f0:	e0683003 	rsb	r3, r8, r3
    91f4:	e1540003 	cmp	r4, r3
    91f8:	8afffffb 	bhi	91ec <sw_uart_getc_timeout+0x10c>
    delay_ncycles(s, u);
	s += u;
    91fc:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 5;
    9200:	e1a00007 	mov	r0, r7
    9204:	eb0001f5 	bl	99e0 <gpio_read>
    9208:	e1a00750 	asr	r0, r0, r7
    920c:	e1899280 	orr	r9, r9, r0, lsl #5
    9210:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    9214:	e0683003 	rsb	r3, r8, r3
    9218:	e1540003 	cmp	r4, r3
    921c:	8afffffb 	bhi	9210 <sw_uart_getc_timeout+0x130>
    delay_ncycles(s, u);
	s += u;
    9220:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 6;
    9224:	e1a00007 	mov	r0, r7
    9228:	eb0001ec 	bl	99e0 <gpio_read>
    922c:	e1a00750 	asr	r0, r0, r7
    9230:	e1899300 	orr	r9, r9, r0, lsl #6
    9234:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    9238:	e0683003 	rsb	r3, r8, r3
    923c:	e1540003 	cmp	r4, r3
    9240:	8afffffb 	bhi	9234 <sw_uart_getc_timeout+0x154>
    delay_ncycles(s, u);
	s += u;
    c |= (gpio_read(rx) >> rx) << 7;
    9244:	e1a00007 	mov	r0, r7
    9248:	eb0001e4 	bl	99e0 <gpio_read>
    924c:	e1a00750 	asr	r0, r0, r7
    9250:	e1899380 	orr	r9, r9, r0, lsl #7
	write_cyc_until(tx, 1, s, u);
}

// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    9254:	ebfffd91 	bl	88a0 <timer_get_usec_raw>
    9258:	e1a04000 	mov	r4, r0
    while(1) {
        if(gpio_read(rx) == v)
    925c:	e1a00005 	mov	r0, r5
    9260:	eb0001de 	bl	99e0 <gpio_read>
    9264:	e3500000 	cmp	r0, #0
    9268:	0a000005 	beq	9284 <sw_uart_getc_timeout+0x1a4>
            return 1;
        if(timer_get_usec_raw() - start > timeout_usec)
    926c:	ebfffd8b 	bl	88a0 <timer_get_usec_raw>
    9270:	e0640000 	rsb	r0, r4, r0
    9274:	e1560000 	cmp	r6, r0
    9278:	2afffff7 	bcs	925c <sw_uart_getc_timeout+0x17c>
            return 0;
    927c:	e3a03000 	mov	r3, #0
    9280:	ea000000 	b	9288 <sw_uart_getc_timeout+0x1a8>
// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    while(1) {
        if(gpio_read(rx) == v)
            return 1;
    9284:	e3a03001 	mov	r3, #1
    c |= (gpio_read(rx) >> rx) << 7;
    //delay_ncycles(s, u);
	//s += u;
    
	// make sure you wait for a stop bit: otherwise the next read may fail.
    while(!wait_until_usec(rx, 0, timeout_usec))
    9288:	e3530000 	cmp	r3, #0
    928c:	0a000003 	beq	92a0 <sw_uart_getc_timeout+0x1c0>
        return -1;
	// delay_ncycles(s, n);

    return (int)c;
    9290:	e1a00009 	mov	r0, r9
    9294:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
int sw_uart_getc_timeout(sw_uart_t *uart, int timeout_usec) {
   int rx = uart->rx;

    // get start bit: timeout_usec=0 implies you return right away.
    while(!wait_until_usec(rx, 0, timeout_usec))
        return -1;
    9298:	e3e00000 	mvn	r0, #0
    929c:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
    //delay_ncycles(s, u);
	//s += u;
    
	// make sure you wait for a stop bit: otherwise the next read may fail.
    while(!wait_until_usec(rx, 0, timeout_usec))
        return -1;
    92a0:	e3e00000 	mvn	r0, #0
	// delay_ncycles(s, n);

    return (int)c;
}
    92a4:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}

000092a8 <sw_uart_gets_until>:


// read characters using <sw_uart_getc()> until:
//       <sw_uart_getc() == <end>>
// returns -nbytes read if timeout (could be 0).
int sw_uart_gets_until(sw_uart_t *u, uint8_t *buf, uint32_t nbytes, uint8_t end, uint32_t usec_timeout) {
    92a8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    92ac:	e1a08000 	mov	r8, r0
    92b0:	e1a06001 	mov	r6, r1
    92b4:	e1a09003 	mov	r9, r3
    92b8:	e59da020 	ldr	sl, [sp, #32]
    assert(nbytes>0);
    92bc:	e3520000 	cmp	r2, #0
    92c0:	1a000006 	bne	92e0 <sw_uart_gets_until+0x38>
    92c4:	ebfffbc6 	bl	81e4 <rpi_reset_putc>
    92c8:	e59f005c 	ldr	r0, [pc, #92]	; 932c <sw_uart_gets_until+0x84>
    92cc:	e59f105c 	ldr	r1, [pc, #92]	; 9330 <sw_uart_gets_until+0x88>
    92d0:	e59f205c 	ldr	r2, [pc, #92]	; 9334 <sw_uart_gets_until+0x8c>
    92d4:	e3a0306d 	mov	r3, #109	; 0x6d
    92d8:	ebfffba6 	bl	8178 <printk>
    92dc:	ebfffd15 	bl	8738 <clean_reboot>
    buf[0] = 0;
    92e0:	e3a04000 	mov	r4, #0
    92e4:	e5c14000 	strb	r4, [r1]

    int i;
	uint8_t char_in;
    for(i = 0; i < nbytes-1; i++) {
    92e8:	e2427001 	sub	r7, r2, #1
    92ec:	ea000007 	b	9310 <sw_uart_gets_until+0x68>
        if((char_in = (uint8_t)sw_uart_getc_timeout(u, usec_timeout)) != end) {
    92f0:	e1a00008 	mov	r0, r8
    92f4:	e1a0100a 	mov	r1, sl
    92f8:	ebffff78 	bl	90e0 <sw_uart_getc_timeout>
    92fc:	e6ef0070 	uxtb	r0, r0
    9300:	e1500009 	cmp	r0, r9
    9304:	0a000004 	beq	931c <sw_uart_gets_until+0x74>
			buf[i] = char_in;
    9308:	e7c60005 	strb	r0, [r6, r5]
    assert(nbytes>0);
    buf[0] = 0;

    int i;
	uint8_t char_in;
    for(i = 0; i < nbytes-1; i++) {
    930c:	e2844001 	add	r4, r4, #1
    9310:	e1a05004 	mov	r5, r4
    9314:	e1540007 	cmp	r4, r7
    9318:	3afffff4 	bcc	92f0 <sw_uart_gets_until+0x48>
			buf[i] = char_in;
		} else {
			break;
		}
    }
    buf[i] = 0;
    931c:	e3a03000 	mov	r3, #0
    9320:	e7c63005 	strb	r3, [r6, r5]
    return i;
}
    9324:	e1a00004 	mov	r0, r4
    9328:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    932c:	0000a3d8 	ldrdeq	sl, [r0], -r8
    9330:	0000a3f4 	strdeq	sl, [r0], -r4
    9334:	0000a360 	andeq	sl, r0, r0, ror #6

00009338 <sw_uart_gets_timeout>:

// read characters using <sw_uart_getc()> until:
//      we do not receive any characters for <timeout> usec.
// make sure to 0 terminate!
int sw_uart_gets_timeout(sw_uart_t *u, uint8_t *buf, 
                    uint32_t nbytes, uint32_t usec_timeout) {
    9338:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    933c:	e1a07000 	mov	r7, r0
    9340:	e1a05001 	mov	r5, r1
    9344:	e1a08003 	mov	r8, r3

    assert(nbytes>0);
    9348:	e3520000 	cmp	r2, #0
    934c:	1a000006 	bne	936c <sw_uart_gets_timeout+0x34>
    9350:	ebfffba3 	bl	81e4 <rpi_reset_putc>
    9354:	e59f004c 	ldr	r0, [pc, #76]	; 93a8 <sw_uart_gets_timeout+0x70>
    9358:	e59f104c 	ldr	r1, [pc, #76]	; 93ac <sw_uart_gets_timeout+0x74>
    935c:	e59f204c 	ldr	r2, [pc, #76]	; 93b0 <sw_uart_gets_timeout+0x78>
    9360:	e3a03083 	mov	r3, #131	; 0x83
    9364:	ebfffb83 	bl	8178 <printk>
    9368:	ebfffcf2 	bl	8738 <clean_reboot>
    buf[0] = 0;
    936c:	e3a04000 	mov	r4, #0
    9370:	e5c14000 	strb	r4, [r1]

    int i;
    for(i = 0; i < nbytes-1; i++) {
    9374:	e2426001 	sub	r6, r2, #1
    9378:	ea000004 	b	9390 <sw_uart_gets_timeout+0x58>
        buf[i] = (uint8_t) sw_uart_getc_timeout(u, usec_timeout);
    937c:	e1a00007 	mov	r0, r7
    9380:	e1a01008 	mov	r1, r8
    9384:	ebffff55 	bl	90e0 <sw_uart_getc_timeout>
    9388:	e7c50004 	strb	r0, [r5, r4]

    assert(nbytes>0);
    buf[0] = 0;

    int i;
    for(i = 0; i < nbytes-1; i++) {
    938c:	e2844001 	add	r4, r4, #1
    9390:	e1540006 	cmp	r4, r6
    9394:	3afffff8 	bcc	937c <sw_uart_gets_timeout+0x44>
        buf[i] = (uint8_t) sw_uart_getc_timeout(u, usec_timeout);
    }
    buf[i] = 0;
    9398:	e3a03000 	mov	r3, #0
    939c:	e7c53004 	strb	r3, [r5, r4]
    return i;
}
    93a0:	e1a00004 	mov	r0, r4
    93a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    93a8:	0000a3d8 	ldrdeq	sl, [r0], -r8
    93ac:	0000a3f4 	strdeq	sl, [r0], -r4
    93b0:	0000a374 	andeq	sl, r0, r4, ror r3

000093b4 <sw_uart_init_helper>:
/**************************************************************************
 * this code is implemented for you
 */

sw_uart_t 
sw_uart_init_helper(uint8_t tx, uint8_t rx, uint32_t baud, uint32_t cyc_per_bit) {
    93b4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    93b8:	e1a04000 	mov	r4, r0
    93bc:	e1a06001 	mov	r6, r1
    93c0:	e1a08002 	mov	r8, r2
    93c4:	e1a05003 	mov	r5, r3
    93c8:	e59d7018 	ldr	r7, [sp, #24]
    // maybe enable the cache?  don't think will work otherwise.
    gpio_set_output(tx);
    93cc:	e1a00001 	mov	r0, r1
    93d0:	eb0000fe 	bl	97d0 <gpio_set_output>
    gpio_set_input(rx);
    93d4:	e1a00008 	mov	r0, r8
    93d8:	eb00014d 	bl	9914 <gpio_set_input>
    cycle_cnt_init();       
    93dc:	e3a03001 	mov	r3, #1
    93e0:	ee0f3f1c 	mcr	15, 0, r3, cr15, cr12, {0}
	gpio_write(tx, 1);
    93e4:	e1a00006 	mov	r0, r6
    93e8:	e3a01001 	mov	r1, #1
    93ec:	eb00018e 	bl	9a2c <gpio_write>

    // make sure it makes sense.
    unsigned mhz = 700 * 1000 * 1000;
    unsigned derived = cyc_per_bit * baud;
    93f0:	e0020795 	mul	r2, r5, r7
    assert((mhz - baud) <= derived && derived <= (mhz + baud));
    93f4:	e59f3068 	ldr	r3, [pc, #104]	; 9464 <sw_uart_init_helper+0xb0>
    93f8:	e0653003 	rsb	r3, r5, r3
    93fc:	e1530002 	cmp	r3, r2
    9400:	8a000005 	bhi	941c <sw_uart_init_helper+0x68>
    9404:	e59f3058 	ldr	r3, [pc, #88]	; 9464 <sw_uart_init_helper+0xb0>
    9408:	e0853003 	add	r3, r5, r3
    940c:	e1530002 	cmp	r3, r2
    9410:	2a000003 	bcs	9424 <sw_uart_init_helper+0x70>
    9414:	e3a03000 	mov	r3, #0
    9418:	ea000002 	b	9428 <sw_uart_init_helper+0x74>
    941c:	e3a03000 	mov	r3, #0
    9420:	ea000000 	b	9428 <sw_uart_init_helper+0x74>
    9424:	e3a03001 	mov	r3, #1
    9428:	e3530000 	cmp	r3, #0
    942c:	1a000006 	bne	944c <sw_uart_init_helper+0x98>
    9430:	ebfffb6b 	bl	81e4 <rpi_reset_putc>
    9434:	e59f002c 	ldr	r0, [pc, #44]	; 9468 <sw_uart_init_helper+0xb4>
    9438:	e59f102c 	ldr	r1, [pc, #44]	; 946c <sw_uart_init_helper+0xb8>
    943c:	e59f202c 	ldr	r2, [pc, #44]	; 9470 <sw_uart_init_helper+0xbc>
    9440:	e3a0309d 	mov	r3, #157	; 0x9d
    9444:	ebfffb4b 	bl	8178 <printk>
    9448:	ebfffcba 	bl	8738 <clean_reboot>
    // panic("cyc_per_bit = %d * baud = %d\n", cyc_per_bit, cyc_per_bit * baud);

    return (sw_uart_t) { 
    944c:	e5c46000 	strb	r6, [r4]
    9450:	e5c48001 	strb	r8, [r4, #1]
    9454:	e5845004 	str	r5, [r4, #4]
    9458:	e5847008 	str	r7, [r4, #8]
            .tx = tx, 
            .rx = rx, 
            .baud = baud, 
            .cycle_per_bit = cyc_per_bit 
    };
}
    945c:	e1a00004 	mov	r0, r4
    9460:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9464:	29b92700 	ldmibcs	r9!, {r8, r9, sl, sp}
    9468:	0000a408 	andeq	sl, r0, r8, lsl #8
    946c:	0000a3f4 	strdeq	sl, [r0], -r4
    9470:	0000a38c 	andeq	sl, r0, ip, lsl #7

00009474 <sw_uart_getc>:

// blocking read.
int sw_uart_getc(sw_uart_t *uart) {
    9474:	e92d4008 	push	{r3, lr}
    int res = sw_uart_getc_timeout(uart, ~0);
    9478:	e3e01000 	mvn	r1, #0
    947c:	ebffff17 	bl	90e0 <sw_uart_getc_timeout>
    if(res < 0)
    9480:	e3500000 	cmp	r0, #0
    9484:	a8bd8008 	popge	{r3, pc}
        panic("impossible: have an infinite timeout!\n");
    9488:	ebfffb55 	bl	81e4 <rpi_reset_putc>
    948c:	e59f0010 	ldr	r0, [pc, #16]	; 94a4 <sw_uart_getc+0x30>
    9490:	e59f1010 	ldr	r1, [pc, #16]	; 94a8 <sw_uart_getc+0x34>
    9494:	e59f2010 	ldr	r2, [pc, #16]	; 94ac <sw_uart_getc+0x38>
    9498:	e3a030ac 	mov	r3, #172	; 0xac
    949c:	ebfffb35 	bl	8178 <printk>
    94a0:	ebfffca4 	bl	8738 <clean_reboot>
    94a4:	0000a44c 	andeq	sl, r0, ip, asr #8
    94a8:	0000a3f4 	strdeq	sl, [r0], -r4
    94ac:	0000a3a0 	andeq	sl, r0, r0, lsr #7

000094b0 <sw_uart_putk>:
    return res;
}

void sw_uart_putk(sw_uart_t *uart, const char *msg) {
    94b0:	e92d4038 	push	{r3, r4, r5, lr}
    94b4:	e1a05000 	mov	r5, r0
    94b8:	e1a04001 	mov	r4, r1
    for(; *msg; msg++)
    94bc:	ea000002 	b	94cc <sw_uart_putk+0x1c>
        sw_uart_putc(uart, *msg);
    94c0:	e1a00005 	mov	r0, r5
    94c4:	ebfffeb0 	bl	8f8c <sw_uart_putc>
        panic("impossible: have an infinite timeout!\n");
    return res;
}

void sw_uart_putk(sw_uart_t *uart, const char *msg) {
    for(; *msg; msg++)
    94c8:	e2844001 	add	r4, r4, #1
    94cc:	e5d41000 	ldrb	r1, [r4]
    94d0:	e3510000 	cmp	r1, #0
    94d4:	1afffff9 	bne	94c0 <sw_uart_putk+0x10>
        sw_uart_putc(uart, *msg);
}
    94d8:	e8bd8038 	pop	{r3, r4, r5, pc}

000094dc <sw_uart_printk>:

// don't pollute the rest of the code with all the stuff in the 
// <stdarg.h> header.
#include <stdarg.h>
#include "libc/va-printk.h"
int sw_uart_printk(sw_uart_t *uart, const char *fmt, ...) {
    94dc:	e92d000e 	push	{r1, r2, r3}
    94e0:	e92d4030 	push	{r4, r5, lr}
    94e4:	e24dde1d 	sub	sp, sp, #464	; 0x1d0
    94e8:	e1a05000 	mov	r5, r0
    char buf[460];

    va_list args;
    va_start(args, fmt);
    94ec:	e28d3e1e 	add	r3, sp, #480	; 0x1e0
    94f0:	e58d3000 	str	r3, [sp]
        int sz = va_printk(buf, sizeof buf, fmt, args);
    94f4:	e28d0004 	add	r0, sp, #4
    94f8:	e3a01f73 	mov	r1, #460	; 0x1cc
    94fc:	e59d21dc 	ldr	r2, [sp, #476]	; 0x1dc
    9500:	ebfffbea 	bl	84b0 <va_printk>
    9504:	e1a04000 	mov	r4, r0
    va_end(args);
    assert(sz < sizeof buf-1);
    9508:	e59f3040 	ldr	r3, [pc, #64]	; 9550 <sw_uart_printk+0x74>
    950c:	e1500003 	cmp	r0, r3
    9510:	9a000006 	bls	9530 <sw_uart_printk+0x54>
    9514:	ebfffb32 	bl	81e4 <rpi_reset_putc>
    9518:	e59f0034 	ldr	r0, [pc, #52]	; 9554 <sw_uart_printk+0x78>
    951c:	e59f1034 	ldr	r1, [pc, #52]	; 9558 <sw_uart_printk+0x7c>
    9520:	e59f2034 	ldr	r2, [pc, #52]	; 955c <sw_uart_printk+0x80>
    9524:	e3a030c0 	mov	r3, #192	; 0xc0
    9528:	ebfffb12 	bl	8178 <printk>
    952c:	ebfffc81 	bl	8738 <clean_reboot>
    sw_uart_putk(uart,buf);
    9530:	e1a00005 	mov	r0, r5
    9534:	e28d1004 	add	r1, sp, #4
    9538:	ebffffdc 	bl	94b0 <sw_uart_putk>
    return sz;
}
    953c:	e1a00004 	mov	r0, r4
    9540:	e28dde1d 	add	sp, sp, #464	; 0x1d0
    9544:	e8bd4030 	pop	{r4, r5, lr}
    9548:	e28dd00c 	add	sp, sp, #12
    954c:	e12fff1e 	bx	lr
    9550:	000001ca 	andeq	r0, r0, sl, asr #3
    9554:	0000a484 	andeq	sl, r0, r4, lsl #9
    9558:	0000a3f4 	strdeq	sl, [r0], -r4
    955c:	0000a3b0 			; <UNDEFINED> instruction: 0x0000a3b0

00009560 <sw_uart_gets_until_blk>:

int sw_uart_gets_until_blk(sw_uart_t *u, uint8_t *buf, uint32_t nbytes, uint8_t end) {
    9560:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9564:	e24dd00c 	sub	sp, sp, #12
    int res = sw_uart_gets_until(u, buf, nbytes, end, ~0);
    9568:	e3e0c000 	mvn	ip, #0
    956c:	e58dc000 	str	ip, [sp]
    9570:	ebffff4c 	bl	92a8 <sw_uart_gets_until>
    if(res < 0)
    9574:	e3500000 	cmp	r0, #0
    9578:	aa000006 	bge	9598 <sw_uart_gets_until_blk+0x38>
        panic("impossible: have an infinite timeout!\n");
    957c:	ebfffb18 	bl	81e4 <rpi_reset_putc>
    9580:	e59f0018 	ldr	r0, [pc, #24]	; 95a0 <sw_uart_gets_until_blk+0x40>
    9584:	e59f1018 	ldr	r1, [pc, #24]	; 95a4 <sw_uart_gets_until_blk+0x44>
    9588:	e59f2018 	ldr	r2, [pc, #24]	; 95a8 <sw_uart_gets_until_blk+0x48>
    958c:	e3a030c8 	mov	r3, #200	; 0xc8
    9590:	ebfffaf8 	bl	8178 <printk>
    9594:	ebfffc67 	bl	8738 <clean_reboot>
    return res;
}
    9598:	e28dd00c 	add	sp, sp, #12
    959c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    95a0:	0000a44c 	andeq	sl, r0, ip, asr #8
    95a4:	0000a3f4 	strdeq	sl, [r0], -r4
    95a8:	0000a3c0 	andeq	sl, r0, r0, asr #7

000095ac <uart_init>:
#define RX_READY 0x1
#define TX_READY 0x10
#define TX_EMPTY 0x20

// note: if you need memory barriers, use <dev_barrier()>
void uart_init(void) {
    95ac:	e92d4038 	push	{r3, r4, r5, lr}
    
	dev_barrier();
    95b0:	eb000052 	bl	9700 <dev_barrier>

	// set GPIO 14 and 15 to alternate function 0
    //volatile unsigned* gpio_reg = (void*) 0x20200004;
    //unsigned bitmask = get32(gpio_reg);
    gpio_set_function(14, GPIO_FUNC_ALT5);
    95b4:	e3a0000e 	mov	r0, #14
    95b8:	e3a01002 	mov	r1, #2
    95bc:	eb000123 	bl	9a50 <gpio_set_function>
	gpio_set_function(15, GPIO_FUNC_ALT5);
    95c0:	e3a0000f 	mov	r0, #15
    95c4:	e3a01002 	mov	r1, #2
    95c8:	eb000120 	bl	9a50 <gpio_set_function>
    //bitmask &= ~(0b111 << ((UART0_RX % 10) * 3));
    //bitmask |= (0b010 << ((UART0_TX % 10) * 3));
    //bitmask |= (0b010 << ((UART0_RX % 10) * 3));
    //put32(gpio_reg, bitmask);

	dev_barrier();
    95cc:	eb00004b 	bl	9700 <dev_barrier>

    put32(AUX_ENABLES, get32(AUX_ENABLES) | (ENABLE_UART));
    95d0:	e59f4068 	ldr	r4, [pc, #104]	; 9640 <uart_init+0x94>
    95d4:	e5945000 	ldr	r5, [r4]
    95d8:	e1a00005 	mov	r0, r5
    95dc:	eb000059 	bl	9748 <get32>
    95e0:	e3801001 	orr	r1, r0, #1
    95e4:	e1a00005 	mov	r0, r5
    95e8:	eb00004a 	bl	9718 <put32>
	
	dev_barrier();
    95ec:	eb000043 	bl	9700 <dev_barrier>
	
    put32(AUX_MU_CNTL_REG, 0x0);
    95f0:	e5940004 	ldr	r0, [r4, #4]
    95f4:	e3a01000 	mov	r1, #0
    95f8:	eb000046 	bl	9718 <put32>
    put32(AUX_MU_IER_REG, 0x0);
    95fc:	e5940008 	ldr	r0, [r4, #8]
    9600:	e3a01000 	mov	r1, #0
    9604:	eb000043 	bl	9718 <put32>
    put32(AUX_MU_IIR_REG, CLEAR_RX_FIFO | CLEAR_TX_FIFO);
    9608:	e594000c 	ldr	r0, [r4, #12]
    960c:	e3a01006 	mov	r1, #6
    9610:	eb000040 	bl	9718 <put32>
	put32(AUX_MU_LCR_REG, ENABLE_8BIT_MODE);
    9614:	e5940010 	ldr	r0, [r4, #16]
    9618:	e3a01003 	mov	r1, #3
    961c:	eb00003d 	bl	9718 <put32>
    put32(AUX_MU_BAUD_REG, BAUD_115200);
    9620:	e5940014 	ldr	r0, [r4, #20]
    9624:	e59f1018 	ldr	r1, [pc, #24]	; 9644 <uart_init+0x98>
    9628:	eb00003a 	bl	9718 <put32>
    put32(AUX_MU_CNTL_REG, ENABLE_TXER | ENABLE_RXER);
    962c:	e5940004 	ldr	r0, [r4, #4]
    9630:	e3a01003 	mov	r1, #3
    9634:	eb000037 	bl	9718 <put32>

	dev_barrier();
    9638:	eb000030 	bl	9700 <dev_barrier>
    963c:	e8bd8038 	pop	{r3, r4, r5, pc}
    9640:	00009db4 			; <UNDEFINED> instruction: 0x00009db4
    9644:	0000010e 	andeq	r0, r0, lr, lsl #2

00009648 <uart_can_getc>:
}

// 1 = at least one byte on rx queue, 0 otherwise
int uart_can_getc(void) {
    9648:	e92d4008 	push	{r3, lr}
    return get32(AUX_MU_LSR_REG) & RX_READY;
    964c:	e59f300c 	ldr	r3, [pc, #12]	; 9660 <uart_can_getc+0x18>
    9650:	e5930018 	ldr	r0, [r3, #24]
    9654:	eb00003b 	bl	9748 <get32>
}
    9658:	e2000001 	and	r0, r0, #1
    965c:	e8bd8008 	pop	{r3, pc}
    9660:	00009db4 			; <UNDEFINED> instruction: 0x00009db4

00009664 <uart_getc>:

// returns one byte from the rx queue, if needed
// blocks until there is one.
int uart_getc(void) {
    9664:	e92d4008 	push	{r3, lr}
    while(1)
        if(uart_can_getc())  break;
    9668:	ebfffff6 	bl	9648 <uart_can_getc>
    966c:	e3500000 	cmp	r0, #0
    9670:	0afffffc 	beq	9668 <uart_getc+0x4>
    return get32(AUX_MU_IO_REG) & 0xFF;
    9674:	e59f300c 	ldr	r3, [pc, #12]	; 9688 <uart_getc+0x24>
    9678:	e593001c 	ldr	r0, [r3, #28]
    967c:	eb000031 	bl	9748 <get32>
}
    9680:	e6ef0070 	uxtb	r0, r0
    9684:	e8bd8008 	pop	{r3, pc}
    9688:	00009db4 			; <UNDEFINED> instruction: 0x00009db4

0000968c <uart_can_putc>:

// 1 = space to put at least one byte, 0 otherwise.
int uart_can_putc(void) {
    968c:	e92d4008 	push	{r3, lr}
    return get32(AUX_MU_LSR_REG) & TX_EMPTY;
    9690:	e59f300c 	ldr	r3, [pc, #12]	; 96a4 <uart_can_putc+0x18>
    9694:	e5930018 	ldr	r0, [r3, #24]
    9698:	eb00002a 	bl	9748 <get32>
}
    969c:	e2000020 	and	r0, r0, #32
    96a0:	e8bd8008 	pop	{r3, pc}
    96a4:	00009db4 			; <UNDEFINED> instruction: 0x00009db4

000096a8 <uart_putc>:

// put one byte on the tx qqueue, if needed, blocks
// until TX has space.
void uart_putc(unsigned c) {
    96a8:	e92d4010 	push	{r4, lr}
    96ac:	e1a04000 	mov	r4, r0
    while(1)
            if(uart_can_putc())  break;
    96b0:	ebfffff5 	bl	968c <uart_can_putc>
    96b4:	e3500000 	cmp	r0, #0
    96b8:	0afffffc 	beq	96b0 <uart_putc+0x8>
    put32(AUX_MU_IO_REG, c);
    96bc:	e59f300c 	ldr	r3, [pc, #12]	; 96d0 <uart_putc+0x28>
    96c0:	e593001c 	ldr	r0, [r3, #28]
    96c4:	e1a01004 	mov	r1, r4
    96c8:	eb000012 	bl	9718 <put32>
    96cc:	e8bd8010 	pop	{r4, pc}
    96d0:	00009db4 			; <UNDEFINED> instruction: 0x00009db4

000096d4 <uart_has_data>:


// simple wrapper routines useful later.

// a maybe-more intuitive name for clients.
int uart_has_data(void) {
    96d4:	e92d4008 	push	{r3, lr}
    return uart_can_getc();
    96d8:	ebffffda 	bl	9648 <uart_can_getc>
}
    96dc:	e8bd8008 	pop	{r3, pc}

000096e0 <uart_getc_async>:

int uart_getc_async(void) { 
    96e0:	e92d4008 	push	{r3, lr}
    if(!uart_has_data())
    96e4:	ebfffffa 	bl	96d4 <uart_has_data>
    96e8:	e3500000 	cmp	r0, #0
    96ec:	0a000001 	beq	96f8 <uart_getc_async+0x18>
        return -1;
    return uart_getc();
    96f0:	ebffffdb 	bl	9664 <uart_getc>
    96f4:	e8bd8008 	pop	{r3, pc}
    return uart_can_getc();
}

int uart_getc_async(void) { 
    if(!uart_has_data())
        return -1;
    96f8:	e3e00000 	mvn	r0, #0
    return uart_getc();
}
    96fc:	e8bd8008 	pop	{r3, pc}

00009700 <dev_barrier>:
    9700:	ea000002 	b	9710 <dsb>

00009704 <dmb>:
    9704:	e3a00000 	mov	r0, #0
    9708:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
    970c:	e12fff1e 	bx	lr

00009710 <dsb>:
    9710:	ee070f9a 	mcr	15, 0, r0, cr7, cr10, {4}
    9714:	e12fff1e 	bx	lr

00009718 <put32>:
    9718:	e5801000 	str	r1, [r0]
    971c:	e12fff1e 	bx	lr

00009720 <PUT32>:
    9720:	e5801000 	str	r1, [r0]
    9724:	e12fff1e 	bx	lr

00009728 <put16>:
    9728:	e1c010b0 	strh	r1, [r0]
    972c:	e12fff1e 	bx	lr

00009730 <PUT16>:
    9730:	e1c010b0 	strh	r1, [r0]
    9734:	e12fff1e 	bx	lr

00009738 <put8>:
    9738:	e5c01000 	strb	r1, [r0]
    973c:	e12fff1e 	bx	lr

00009740 <PUT8>:
    9740:	e5c01000 	strb	r1, [r0]
    9744:	e12fff1e 	bx	lr

00009748 <get32>:
    9748:	e5900000 	ldr	r0, [r0]
    974c:	e12fff1e 	bx	lr

00009750 <GET32>:
    9750:	e5900000 	ldr	r0, [r0]
    9754:	e12fff1e 	bx	lr

00009758 <GETPC>:
    9758:	e1a0000e 	mov	r0, lr
    975c:	e12fff1e 	bx	lr

00009760 <dummy>:
    9760:	e12fff1e 	bx	lr

00009764 <rpi_get_sp>:
    9764:	e12fff1e 	bx	lr

00009768 <rpi_cswitch>:
    9768:	e5804000 	str	r4, [r0]
    976c:	e5805004 	str	r5, [r0, #4]
    9770:	e5806008 	str	r6, [r0, #8]
    9774:	e580700c 	str	r7, [r0, #12]
    9778:	e5808010 	str	r8, [r0, #16]
    977c:	e5809014 	str	r9, [r0, #20]
    9780:	e580a018 	str	sl, [r0, #24]
    9784:	e580b01c 	str	fp, [r0, #28]
    9788:	e580c020 	str	ip, [r0, #32]
    978c:	e580e024 	str	lr, [r0, #36]	; 0x24
    9790:	e580d028 	str	sp, [r0, #40]	; 0x28
    9794:	e5914000 	ldr	r4, [r1]
    9798:	e5915004 	ldr	r5, [r1, #4]
    979c:	e5916008 	ldr	r6, [r1, #8]
    97a0:	e591700c 	ldr	r7, [r1, #12]
    97a4:	e5918010 	ldr	r8, [r1, #16]
    97a8:	e5919014 	ldr	r9, [r1, #20]
    97ac:	e591a018 	ldr	sl, [r1, #24]
    97b0:	e591b01c 	ldr	fp, [r1, #28]
    97b4:	e591c020 	ldr	ip, [r1, #32]
    97b8:	e591e024 	ldr	lr, [r1, #36]	; 0x24
    97bc:	e591d028 	ldr	sp, [r1, #40]	; 0x28
    97c0:	e12fff1e 	bx	lr

000097c4 <rpi_init_trampoline>:
    97c4:	e1a00005 	mov	r0, r5
    97c8:	e12fff34 	blx	r4
    97cc:	ebfffd67 	bl	8d70 <rpi_exit>

000097d0 <gpio_set_output>:
volatile unsigned *GPLEV1 = (void*) 0x20200038;
// Part 1 implement gpio_set_on, gpio_set_off, gpio_set_output

// set <pin> to be an output pin.  note: fsel0, fsel1, fsel2 are contiguous in memory,
// so you can use array calculations!
extern inline void gpio_set_output(unsigned pin) {
    97d0:	e92d4038 	push	{r3, r4, r5, lr}
    97d4:	e1a04000 	mov	r4, r0
    // implement this
    // use gpio_fsel0
    
    if (pin >= 32) {
    97d8:	e350001f 	cmp	r0, #31
    97dc:	88bd8038 	pophi	{r3, r4, r5, pc}
        return;
    }
    
    volatile unsigned* gpio_reg;
    
    unsigned reg_select = pin / 10;
    97e0:	e59f30b4 	ldr	r3, [pc, #180]	; 989c <gpio_set_output+0xcc>
    97e4:	e0832093 	umull	r2, r3, r3, r0
    97e8:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    97ec:	e3530005 	cmp	r3, #5
    97f0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    97f4:	ea000017 	b	9858 <gpio_set_output+0x88>
    97f8:	00009810 	andeq	r9, r0, r0, lsl r8
    97fc:	0000981c 	andeq	r9, r0, ip, lsl r8
    9800:	00009828 	andeq	r9, r0, r8, lsr #16
    9804:	00009834 	andeq	r9, r0, r4, lsr r8
    9808:	00009840 	andeq	r9, r0, r0, asr #16
    980c:	0000984c 	andeq	r9, r0, ip, asr #16
        case 0: {gpio_reg = GPFSEL0; break;}
    9810:	e59f3088 	ldr	r3, [pc, #136]	; 98a0 <gpio_set_output+0xd0>
    9814:	e5935000 	ldr	r5, [r3]
    9818:	ea00000f 	b	985c <gpio_set_output+0x8c>
        case 1: {gpio_reg = GPFSEL1; break;}
    981c:	e59f307c 	ldr	r3, [pc, #124]	; 98a0 <gpio_set_output+0xd0>
    9820:	e5935004 	ldr	r5, [r3, #4]
    9824:	ea00000c 	b	985c <gpio_set_output+0x8c>
        case 2: {gpio_reg = GPFSEL2; break;}
    9828:	e59f3070 	ldr	r3, [pc, #112]	; 98a0 <gpio_set_output+0xd0>
    982c:	e5935008 	ldr	r5, [r3, #8]
    9830:	ea000009 	b	985c <gpio_set_output+0x8c>
        case 3: {gpio_reg = GPFSEL3; break;}
    9834:	e59f3064 	ldr	r3, [pc, #100]	; 98a0 <gpio_set_output+0xd0>
    9838:	e593500c 	ldr	r5, [r3, #12]
    983c:	ea000006 	b	985c <gpio_set_output+0x8c>
        case 4: {gpio_reg = GPFSEL4; break;}
    9840:	e59f3058 	ldr	r3, [pc, #88]	; 98a0 <gpio_set_output+0xd0>
    9844:	e5935010 	ldr	r5, [r3, #16]
    9848:	ea000003 	b	985c <gpio_set_output+0x8c>
        case 5: {gpio_reg = GPFSEL5; break;}
    984c:	e59f304c 	ldr	r3, [pc, #76]	; 98a0 <gpio_set_output+0xd0>
    9850:	e5935014 	ldr	r5, [r3, #20]
    9854:	ea000000 	b	985c <gpio_set_output+0x8c>
        default: gpio_reg = 0x0;
    9858:	e3a05000 	mov	r5, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    985c:	e1a00005 	mov	r0, r5
    9860:	ebffffb8 	bl	9748 <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    9864:	e59f1030 	ldr	r1, [pc, #48]	; 989c <gpio_set_output+0xcc>
    9868:	e0813491 	umull	r3, r1, r1, r4
    986c:	e1a011a1 	lsr	r1, r1, #3
    9870:	e0811101 	add	r1, r1, r1, lsl #2
    9874:	e1a01081 	lsl	r1, r1, #1
    9878:	e0611004 	rsb	r1, r1, r4
    987c:	e0811081 	add	r1, r1, r1, lsl #1
    9880:	e3a03007 	mov	r3, #7
    9884:	e1c03113 	bic	r3, r0, r3, lsl r1
    bitmask |= (1 << ((pin % 10) * 3));
    put32(gpio_reg, bitmask);
    9888:	e1a00005 	mov	r0, r5
    988c:	e3a02001 	mov	r2, #1
    9890:	e1831112 	orr	r1, r3, r2, lsl r1
    9894:	ebffff9f 	bl	9718 <put32>
    9898:	e8bd8038 	pop	{r3, r4, r5, pc}
    989c:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    98a0:	00009de8 	andeq	r9, r0, r8, ror #27

000098a4 <gpio_set_on>:
    
}


// set GPIO <pin> on.
void gpio_set_on(unsigned pin) {
    98a4:	e92d4008 	push	{r3, lr}
    // implement this
    // use gpio_set0
    if (pin >= 32) {
    98a8:	e350001f 	cmp	r0, #31
    98ac:	88bd8008 	pophi	{r3, pc}
    // Get current register value
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPSET0;
    98b0:	959f3020 	ldrls	r3, [pc, #32]	; 98d8 <gpio_set_on+0x34>
    98b4:	95932018 	ldrls	r2, [r3, #24]
        // TODO: why do we not want this statement?
        //bitmask = get32(GPSET0);
    } else {
        gpio_reg = GPSET1;
    98b8:	859f3018 	ldrhi	r3, [pc, #24]	; 98d8 <gpio_set_on+0x34>
    98bc:	8593201c 	ldrhi	r2, [r3, #28]
        //bitmask = get32(GPSET1);
        // TODO: why do we not want this statement?
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    98c0:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    98c4:	e1a00002 	mov	r0, r2
    98c8:	e3a01001 	mov	r1, #1
    98cc:	e1a01311 	lsl	r1, r1, r3
    98d0:	ebffff90 	bl	9718 <put32>
    98d4:	e8bd8008 	pop	{r3, pc}
    98d8:	00009de8 	andeq	r9, r0, r8, ror #27

000098dc <gpio_set_off>:
}

// set GPIO <pin> off
void gpio_set_off(unsigned pin) {
    98dc:	e92d4008 	push	{r3, lr}
    // implement this
    // use gpio_clr0
    if(pin >= 32) {
    98e0:	e350001f 	cmp	r0, #31
    98e4:	88bd8008 	pophi	{r3, pc}
    }
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPCLR0;
    98e8:	959f3020 	ldrls	r3, [pc, #32]	; 9910 <gpio_set_off+0x34>
    98ec:	95932020 	ldrls	r2, [r3, #32]
        //bitmask = get32(GPCLR0);
    } else {
        gpio_reg = GPCLR1;
    98f0:	859f3018 	ldrhi	r3, [pc, #24]	; 9910 <gpio_set_off+0x34>
    98f4:	85932024 	ldrhi	r2, [r3, #36]	; 0x24
        //bitmask = get32(GPCLR1);
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    98f8:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    98fc:	e1a00002 	mov	r0, r2
    9900:	e3a01001 	mov	r1, #1
    9904:	e1a01311 	lsl	r1, r1, r3
    9908:	ebffff82 	bl	9718 <put32>
    990c:	e8bd8008 	pop	{r3, pc}
    9910:	00009de8 	andeq	r9, r0, r8, ror #27

00009914 <gpio_set_input>:
}

// Part 2: implement gpio_set_input and gpio_read

// set <pin> to input.
void gpio_set_input(unsigned pin) {
    9914:	e92d4038 	push	{r3, r4, r5, lr}
    9918:	e1a04000 	mov	r4, r0
    // implement.
    if(pin >= 32) {
    991c:	e350001f 	cmp	r0, #31
    9920:	88bd8038 	pophi	{r3, r4, r5, pc}
        return;
    }
    
    volatile unsigned* gpio_reg;
    
    unsigned reg_select = pin / 10;
    9924:	e59f30ac 	ldr	r3, [pc, #172]	; 99d8 <gpio_set_input+0xc4>
    9928:	e0832093 	umull	r2, r3, r3, r0
    992c:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    9930:	e3530005 	cmp	r3, #5
    9934:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    9938:	ea000017 	b	999c <gpio_set_input+0x88>
    993c:	00009954 	andeq	r9, r0, r4, asr r9
    9940:	00009960 	andeq	r9, r0, r0, ror #18
    9944:	0000996c 	andeq	r9, r0, ip, ror #18
    9948:	00009978 	andeq	r9, r0, r8, ror r9
    994c:	00009984 	andeq	r9, r0, r4, lsl #19
    9950:	00009990 	muleq	r0, r0, r9
        case 0: {gpio_reg = GPFSEL0; break;}
    9954:	e59f3080 	ldr	r3, [pc, #128]	; 99dc <gpio_set_input+0xc8>
    9958:	e5935000 	ldr	r5, [r3]
    995c:	ea00000f 	b	99a0 <gpio_set_input+0x8c>
        case 1: {gpio_reg = GPFSEL1; break;}
    9960:	e59f3074 	ldr	r3, [pc, #116]	; 99dc <gpio_set_input+0xc8>
    9964:	e5935004 	ldr	r5, [r3, #4]
    9968:	ea00000c 	b	99a0 <gpio_set_input+0x8c>
        case 2: {gpio_reg = GPFSEL2; break;}
    996c:	e59f3068 	ldr	r3, [pc, #104]	; 99dc <gpio_set_input+0xc8>
    9970:	e5935008 	ldr	r5, [r3, #8]
    9974:	ea000009 	b	99a0 <gpio_set_input+0x8c>
        case 3: {gpio_reg = GPFSEL3; break;}
    9978:	e59f305c 	ldr	r3, [pc, #92]	; 99dc <gpio_set_input+0xc8>
    997c:	e593500c 	ldr	r5, [r3, #12]
    9980:	ea000006 	b	99a0 <gpio_set_input+0x8c>
        case 4: {gpio_reg = GPFSEL4; break;}
    9984:	e59f3050 	ldr	r3, [pc, #80]	; 99dc <gpio_set_input+0xc8>
    9988:	e5935010 	ldr	r5, [r3, #16]
    998c:	ea000003 	b	99a0 <gpio_set_input+0x8c>
        case 5: {gpio_reg = GPFSEL5; break;}
    9990:	e59f3044 	ldr	r3, [pc, #68]	; 99dc <gpio_set_input+0xc8>
    9994:	e5935014 	ldr	r5, [r3, #20]
    9998:	ea000000 	b	99a0 <gpio_set_input+0x8c>
        default: gpio_reg = 0x0;
    999c:	e3a05000 	mov	r5, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    99a0:	e1a00005 	mov	r0, r5
    99a4:	ebffff67 	bl	9748 <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    99a8:	e59f1028 	ldr	r1, [pc, #40]	; 99d8 <gpio_set_input+0xc4>
    99ac:	e0813491 	umull	r3, r1, r1, r4
    99b0:	e1a011a1 	lsr	r1, r1, #3
    99b4:	e0811101 	add	r1, r1, r1, lsl #2
    99b8:	e1a01081 	lsl	r1, r1, #1
    99bc:	e0611004 	rsb	r1, r1, r4
    99c0:	e0811081 	add	r1, r1, r1, lsl #1
    99c4:	e3a03007 	mov	r3, #7
    99c8:	e1c01113 	bic	r1, r0, r3, lsl r1
    put32(gpio_reg, bitmask);
    99cc:	e1a00005 	mov	r0, r5
    99d0:	ebffff50 	bl	9718 <put32>
    99d4:	e8bd8038 	pop	{r3, r4, r5, pc}
    99d8:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    99dc:	00009de8 	andeq	r9, r0, r8, ror #27

000099e0 <gpio_read>:
    
    
}

// return the value of <pin>
int gpio_read(unsigned pin) {
    99e0:	e92d4010 	push	{r4, lr}
    99e4:	e1a04000 	mov	r4, r0
    
    if(pin >= 32) {
    99e8:	e350001f 	cmp	r0, #31
    99ec:	8a00000b 	bhi	9a20 <gpio_read+0x40>
        return -1;
    }
    
    unsigned v = 0;
    
    if (pin <= 31){
    99f0:	8a000003 	bhi	9a04 <gpio_read+0x24>
        v = get32(GPLEV0);
    99f4:	e59f302c 	ldr	r3, [pc, #44]	; 9a28 <gpio_read+0x48>
    99f8:	e5930028 	ldr	r0, [r3, #40]	; 0x28
    99fc:	ebffff51 	bl	9748 <get32>
    9a00:	ea000002 	b	9a10 <gpio_read+0x30>
    } else {
        v = get32(GPLEV1);
    9a04:	e59f301c 	ldr	r3, [pc, #28]	; 9a28 <gpio_read+0x48>
    9a08:	e593002c 	ldr	r0, [r3, #44]	; 0x2c
    9a0c:	ebffff4d 	bl	9748 <get32>
    }
    
    return (v & (1 << (pin % 32)));
    9a10:	e204401f 	and	r4, r4, #31
    9a14:	e3a03001 	mov	r3, #1
    9a18:	e0000413 	and	r0, r0, r3, lsl r4
    9a1c:	e8bd8010 	pop	{r4, pc}

// return the value of <pin>
int gpio_read(unsigned pin) {
    
    if(pin >= 32) {
        return -1;
    9a20:	e3e00000 	mvn	r0, #0
    } else {
        v = get32(GPLEV1);
    }
    
    return (v & (1 << (pin % 32)));
}
    9a24:	e8bd8010 	pop	{r4, pc}
    9a28:	00009de8 	andeq	r9, r0, r8, ror #27

00009a2c <gpio_write>:

// set <pin> to <v> (v \in {0,1})
void gpio_write(unsigned pin, unsigned v) {
    9a2c:	e92d4008 	push	{r3, lr}
    
    if(pin >= 32) {
    9a30:	e350001f 	cmp	r0, #31
    9a34:	88bd8008 	pophi	{r3, pc}
        return;
    }
    
    if(v)
    9a38:	e3510000 	cmp	r1, #0
    9a3c:	0a000001 	beq	9a48 <gpio_write+0x1c>
        gpio_set_on(pin);
    9a40:	ebffff97 	bl	98a4 <gpio_set_on>
    9a44:	e8bd8008 	pop	{r3, pc}
    else
        gpio_set_off(pin);
    9a48:	ebffffa3 	bl	98dc <gpio_set_off>
    9a4c:	e8bd8008 	pop	{r3, pc}

00009a50 <gpio_set_function>:
}

void gpio_set_function(unsigned pin, gpio_func_t func) {
    9a50:	e92d4070 	push	{r4, r5, r6, lr}
    9a54:	e1a04000 	mov	r4, r0
    9a58:	e1a05001 	mov	r5, r1
    // implement this
    // use gpio_fsel0
    
    if (pin >= 32 || func >= 8) {
    9a5c:	e3510007 	cmp	r1, #7
    9a60:	9350001f 	cmpls	r0, #31
    9a64:	88bd8070 	pophi	{r4, r5, r6, pc}
        return;
    }

    volatile unsigned* gpio_reg;
    unsigned reg_select = pin / 10;
    9a68:	e59f30b0 	ldr	r3, [pc, #176]	; 9b20 <gpio_set_function+0xd0>
    9a6c:	e0832093 	umull	r2, r3, r3, r0
    9a70:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    9a74:	e3530005 	cmp	r3, #5
    9a78:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    9a7c:	ea000017 	b	9ae0 <gpio_set_function+0x90>
    9a80:	00009a98 	muleq	r0, r8, sl
    9a84:	00009aa4 	andeq	r9, r0, r4, lsr #21
    9a88:	00009ab0 			; <UNDEFINED> instruction: 0x00009ab0
    9a8c:	00009abc 			; <UNDEFINED> instruction: 0x00009abc
    9a90:	00009ac8 	andeq	r9, r0, r8, asr #21
    9a94:	00009ad4 	ldrdeq	r9, [r0], -r4
        case 0: {gpio_reg = GPFSEL0; break;}
    9a98:	e59f3084 	ldr	r3, [pc, #132]	; 9b24 <gpio_set_function+0xd4>
    9a9c:	e5936000 	ldr	r6, [r3]
    9aa0:	ea00000f 	b	9ae4 <gpio_set_function+0x94>
        case 1: {gpio_reg = GPFSEL1; break;}
    9aa4:	e59f3078 	ldr	r3, [pc, #120]	; 9b24 <gpio_set_function+0xd4>
    9aa8:	e5936004 	ldr	r6, [r3, #4]
    9aac:	ea00000c 	b	9ae4 <gpio_set_function+0x94>
        case 2: {gpio_reg = GPFSEL2; break;}
    9ab0:	e59f306c 	ldr	r3, [pc, #108]	; 9b24 <gpio_set_function+0xd4>
    9ab4:	e5936008 	ldr	r6, [r3, #8]
    9ab8:	ea000009 	b	9ae4 <gpio_set_function+0x94>
        case 3: {gpio_reg = GPFSEL3; break;}
    9abc:	e59f3060 	ldr	r3, [pc, #96]	; 9b24 <gpio_set_function+0xd4>
    9ac0:	e593600c 	ldr	r6, [r3, #12]
    9ac4:	ea000006 	b	9ae4 <gpio_set_function+0x94>
        case 4: {gpio_reg = GPFSEL4; break;}
    9ac8:	e59f3054 	ldr	r3, [pc, #84]	; 9b24 <gpio_set_function+0xd4>
    9acc:	e5936010 	ldr	r6, [r3, #16]
    9ad0:	ea000003 	b	9ae4 <gpio_set_function+0x94>
        case 5: {gpio_reg = GPFSEL5; break;}
    9ad4:	e59f3048 	ldr	r3, [pc, #72]	; 9b24 <gpio_set_function+0xd4>
    9ad8:	e5936014 	ldr	r6, [r3, #20]
    9adc:	ea000000 	b	9ae4 <gpio_set_function+0x94>
        default: gpio_reg = 0x0;
    9ae0:	e3a06000 	mov	r6, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    9ae4:	e1a00006 	mov	r0, r6
    9ae8:	ebffff16 	bl	9748 <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    9aec:	e59f302c 	ldr	r3, [pc, #44]	; 9b20 <gpio_set_function+0xd0>
    9af0:	e0832493 	umull	r2, r3, r3, r4
    9af4:	e1a031a3 	lsr	r3, r3, #3
    9af8:	e0833103 	add	r3, r3, r3, lsl #2
    9afc:	e1a03083 	lsl	r3, r3, #1
    9b00:	e0633004 	rsb	r3, r3, r4
    9b04:	e0833083 	add	r3, r3, r3, lsl #1
    9b08:	e3a01007 	mov	r1, #7
    9b0c:	e1c01311 	bic	r1, r0, r1, lsl r3
    bitmask |= (func << ((pin % 10) * 3));
    put32(gpio_reg, bitmask);
    9b10:	e1a00006 	mov	r0, r6
    9b14:	e1811315 	orr	r1, r1, r5, lsl r3
    9b18:	ebfffefe 	bl	9718 <put32>
    9b1c:	e8bd8070 	pop	{r4, r5, r6, pc}
    9b20:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    9b24:	00009de8 	andeq	r9, r0, r8, ror #27

00009b28 <is_gpio_int>:
// call this routine (you must implement) to setup the right GPIO event.
// as with setting up functions, you should bitwise-or in the value for the
// pin you are setting with the existing pin values.  (otherwise you will
// lose their configuration).  you also need to enable the right IRQ.   make
// sure to use device barriers!!
int is_gpio_int(unsigned gpio_int) {
    9b28:	e92d4008 	push	{r3, lr}
    // assert(gpio_int >= GPIO_INT0 && gpio_int <= GPIO_INT3);

    if(get32(IRQ_PENDING_2) > 0) {
    9b2c:	e59f301c 	ldr	r3, [pc, #28]	; 9b50 <is_gpio_int+0x28>
    9b30:	e5930030 	ldr	r0, [r3, #48]	; 0x30
    9b34:	ebffff03 	bl	9748 <get32>
    9b38:	e3500000 	cmp	r0, #0
    9b3c:	0a000001 	beq	9b48 <is_gpio_int+0x20>
        return 1;
    9b40:	e3a00001 	mov	r0, #1
    9b44:	e8bd8008 	pop	{r3, pc}
    }
    return 0;
    9b48:	e3a00000 	mov	r0, #0
}
    9b4c:	e8bd8008 	pop	{r3, pc}
    9b50:	00009de8 	andeq	r9, r0, r8, ror #27

00009b54 <gpio_int_rising_edge>:
// p97 set to detect rising edge (0->1) on <pin>.
// as the broadcom doc states, it  detects by sampling based on the clock.
// it looks for "011" (low, hi, hi) to suppress noise.  i.e., its triggered only
// *after* a 1 reading has been sampled twice, so there will be delay.
// if you want lower latency, you should us async rising edge (p99)
void gpio_int_rising_edge(unsigned pin) {
    9b54:	e92d4038 	push	{r3, r4, r5, lr}
    9b58:	e1a04000 	mov	r4, r0
    
    
    if(pin >= 32) {
    9b5c:	e350001f 	cmp	r0, #31
    9b60:	88bd8038 	pophi	{r3, r4, r5, pc}
        return;
    }
    
    dev_barrier();
    9b64:	ebfffee5 	bl	9700 <dev_barrier>
    if(pin <= 31) {
    9b68:	e354001f 	cmp	r4, #31
    9b6c:	8a000007 	bhi	9b90 <gpio_int_rising_edge+0x3c>
        unsigned bitmask = get32(GPREN0);
    9b70:	e59f505c 	ldr	r5, [pc, #92]	; 9bd4 <gpio_int_rising_edge+0x80>
    9b74:	e5950034 	ldr	r0, [r5, #52]	; 0x34
    9b78:	ebfffef2 	bl	9748 <get32>
        bitmask |= 1 << pin;
    9b7c:	e3a01001 	mov	r1, #1
    9b80:	e1801411 	orr	r1, r0, r1, lsl r4
        put32(GPREN0, bitmask);
    9b84:	e5950034 	ldr	r0, [r5, #52]	; 0x34
    9b88:	ebfffee2 	bl	9718 <put32>
    9b8c:	ea000007 	b	9bb0 <gpio_int_rising_edge+0x5c>
    } else {
        unsigned bitmask = get32(GPREN1);
    9b90:	e59f503c 	ldr	r5, [pc, #60]	; 9bd4 <gpio_int_rising_edge+0x80>
    9b94:	e5950038 	ldr	r0, [r5, #56]	; 0x38
    9b98:	ebfffeea 	bl	9748 <get32>
        bitmask |= 1 << (pin % 32);
    9b9c:	e204401f 	and	r4, r4, #31
    9ba0:	e3a01001 	mov	r1, #1
    9ba4:	e1801411 	orr	r1, r0, r1, lsl r4
        put32(GPREN1, bitmask);
    9ba8:	e5950038 	ldr	r0, [r5, #56]	; 0x38
    9bac:	ebfffed9 	bl	9718 <put32>
    }
    dev_barrier();
    9bb0:	ebfffed2 	bl	9700 <dev_barrier>
    unsigned int_mask = get32(ENABLE_IRQS_2);
    9bb4:	e59f4018 	ldr	r4, [pc, #24]	; 9bd4 <gpio_int_rising_edge+0x80>
    9bb8:	e594003c 	ldr	r0, [r4, #60]	; 0x3c
    9bbc:	ebfffee1 	bl	9748 <get32>
    int_mask |= 1 << (49 - 32);
    9bc0:	e3801802 	orr	r1, r0, #131072	; 0x20000
    put32(ENABLE_IRQS_2, int_mask);
    9bc4:	e594003c 	ldr	r0, [r4, #60]	; 0x3c
    9bc8:	ebfffed2 	bl	9718 <put32>
    dev_barrier();
    9bcc:	ebfffecb 	bl	9700 <dev_barrier>
    9bd0:	e8bd8038 	pop	{r3, r4, r5, pc}
    9bd4:	00009de8 	andeq	r9, r0, r8, ror #27

00009bd8 <gpio_int_falling_edge>:
// p98: detect falling edge (1->0).  sampled using the system clock.
// similarly to rising edge detection, it suppresses noise by looking for
// "100" --- i.e., is triggered after two readings of "0" and so the
// interrupt is delayed two clock cycles.   if you want  lower latency,
// you should use async falling edge. (p99)
void gpio_int_falling_edge(unsigned pin) {
    9bd8:	e92d4038 	push	{r3, r4, r5, lr}
    9bdc:	e1a04000 	mov	r4, r0
    
    if(pin >= 32) {
    9be0:	e350001f 	cmp	r0, #31
    9be4:	88bd8038 	pophi	{r3, r4, r5, pc}
        return;
    }
    
    dev_barrier();
    9be8:	ebfffec4 	bl	9700 <dev_barrier>
    if(pin <= 31) {
    9bec:	e354001f 	cmp	r4, #31
    9bf0:	8a000007 	bhi	9c14 <gpio_int_falling_edge+0x3c>
        unsigned bitmask = get32(GPFEN0);
    9bf4:	e59f505c 	ldr	r5, [pc, #92]	; 9c58 <gpio_int_falling_edge+0x80>
    9bf8:	e5950040 	ldr	r0, [r5, #64]	; 0x40
    9bfc:	ebfffed1 	bl	9748 <get32>
        bitmask |= 1 << pin;
    9c00:	e3a01001 	mov	r1, #1
    9c04:	e1801411 	orr	r1, r0, r1, lsl r4
        put32(GPFEN0, bitmask);
    9c08:	e5950040 	ldr	r0, [r5, #64]	; 0x40
    9c0c:	ebfffec1 	bl	9718 <put32>
    9c10:	ea000007 	b	9c34 <gpio_int_falling_edge+0x5c>
    } else {
        unsigned bitmask = get32(GPFEN1);
    9c14:	e59f503c 	ldr	r5, [pc, #60]	; 9c58 <gpio_int_falling_edge+0x80>
    9c18:	e5950044 	ldr	r0, [r5, #68]	; 0x44
    9c1c:	ebfffec9 	bl	9748 <get32>
        bitmask |= 1 << (pin % 32);
    9c20:	e204401f 	and	r4, r4, #31
    9c24:	e3a01001 	mov	r1, #1
    9c28:	e1801411 	orr	r1, r0, r1, lsl r4
        put32(GPFEN1, bitmask);
    9c2c:	e5950044 	ldr	r0, [r5, #68]	; 0x44
    9c30:	ebfffeb8 	bl	9718 <put32>
    }
    dev_barrier();
    9c34:	ebfffeb1 	bl	9700 <dev_barrier>
    unsigned int_mask = get32(ENABLE_IRQS_2);
    9c38:	e59f4018 	ldr	r4, [pc, #24]	; 9c58 <gpio_int_falling_edge+0x80>
    9c3c:	e594003c 	ldr	r0, [r4, #60]	; 0x3c
    9c40:	ebfffec0 	bl	9748 <get32>
    int_mask |= 1 << (52 -32);
    9c44:	e3801601 	orr	r1, r0, #1048576	; 0x100000
    put32(ENABLE_IRQS_2, int_mask);
    9c48:	e594003c 	ldr	r0, [r4, #60]	; 0x3c
    9c4c:	ebfffeb1 	bl	9718 <put32>
    dev_barrier();
    9c50:	ebfffeaa 	bl	9700 <dev_barrier>
    9c54:	e8bd8038 	pop	{r3, r4, r5, pc}
    9c58:	00009de8 	andeq	r9, r0, r8, ror #27

00009c5c <gpio_event_detected>:
}

// p96: a 1<<pin is set in EVENT_DETECT if <pin> triggered an interrupt.
// if you configure multiple events to lead to interrupts, you will have to
// read the pin to determine which caused it.
int gpio_event_detected(unsigned pin) {
    9c5c:	e92d4010 	push	{r4, lr}
    9c60:	e1a04000 	mov	r4, r0
    if(pin >= 32) {
    9c64:	e350001f 	cmp	r0, #31
    9c68:	8a000019 	bhi	9cd4 <gpio_event_detected+0x78>
        return -1;
    }
    
    dev_barrier();
    9c6c:	ebfffea3 	bl	9700 <dev_barrier>
    if(pin <= 31) {
    9c70:	e354001f 	cmp	r4, #31
    9c74:	8a000008 	bhi	9c9c <gpio_event_detected+0x40>
        unsigned reg_stat = get32(GPEDS0) & (1 << pin);
    9c78:	e59f305c 	ldr	r3, [pc, #92]	; 9cdc <gpio_event_detected+0x80>
    9c7c:	e5930048 	ldr	r0, [r3, #72]	; 0x48
    9c80:	ebfffeb0 	bl	9748 <get32>
        if(reg_stat > 0) {dev_barrier(); return 1;}
    9c84:	e3a03001 	mov	r3, #1
    9c88:	e0103413 	ands	r3, r0, r3, lsl r4
    9c8c:	0a00000d 	beq	9cc8 <gpio_event_detected+0x6c>
    9c90:	ebfffe9a 	bl	9700 <dev_barrier>
    9c94:	e3a00001 	mov	r0, #1
    9c98:	e8bd8010 	pop	{r4, pc}
    } else {
        unsigned reg_stat = get32(GPEDS1) & (1 << pin);
    9c9c:	e59f3038 	ldr	r3, [pc, #56]	; 9cdc <gpio_event_detected+0x80>
    9ca0:	e593004c 	ldr	r0, [r3, #76]	; 0x4c
    9ca4:	ebfffea7 	bl	9748 <get32>
    9ca8:	e3a03001 	mov	r3, #1
    9cac:	e0004413 	and	r4, r0, r3, lsl r4
        dev_barrier();
    9cb0:	ebfffe92 	bl	9700 <dev_barrier>
        if(reg_stat > 0) {dev_barrier(); return 1;}
    9cb4:	e3540000 	cmp	r4, #0
    9cb8:	0a000002 	beq	9cc8 <gpio_event_detected+0x6c>
    9cbc:	ebfffe8f 	bl	9700 <dev_barrier>
    9cc0:	e3a00001 	mov	r0, #1
    9cc4:	e8bd8010 	pop	{r4, pc}
    }
    dev_barrier();
    9cc8:	ebfffe8c 	bl	9700 <dev_barrier>
    return 0;
    9ccc:	e3a00000 	mov	r0, #0
    9cd0:	e8bd8010 	pop	{r4, pc}
// p96: a 1<<pin is set in EVENT_DETECT if <pin> triggered an interrupt.
// if you configure multiple events to lead to interrupts, you will have to
// read the pin to determine which caused it.
int gpio_event_detected(unsigned pin) {
    if(pin >= 32) {
        return -1;
    9cd4:	e3e00000 	mvn	r0, #0
        dev_barrier();
        if(reg_stat > 0) {dev_barrier(); return 1;}
    }
    dev_barrier();
    return 0;
}
    9cd8:	e8bd8010 	pop	{r4, pc}
    9cdc:	00009de8 	andeq	r9, r0, r8, ror #27

00009ce0 <gpio_event_clear>:

// p96: have to write a 1 to the pin to clear the event.
void gpio_event_clear(unsigned pin) {
    9ce0:	e92d4010 	push	{r4, lr}
    9ce4:	e1a04000 	mov	r4, r0
    
    if(pin >= 32) {
    9ce8:	e350001f 	cmp	r0, #31
    9cec:	88bd8010 	pophi	{r4, pc}
        return;
    }
    
    dev_barrier();
    9cf0:	ebfffe82 	bl	9700 <dev_barrier>
    if(pin <= 31) {
    9cf4:	e354001f 	cmp	r4, #31
    9cf8:	8a000005 	bhi	9d14 <gpio_event_clear+0x34>
        put32(GPEDS0, 1 << pin);
    9cfc:	e59f3030 	ldr	r3, [pc, #48]	; 9d34 <gpio_event_clear+0x54>
    9d00:	e5930048 	ldr	r0, [r3, #72]	; 0x48
    9d04:	e3a01001 	mov	r1, #1
    9d08:	e1a01411 	lsl	r1, r1, r4
    9d0c:	ebfffe81 	bl	9718 <put32>
    9d10:	ea000005 	b	9d2c <gpio_event_clear+0x4c>
    } else {
        put32(GPEDS1, 1 << (pin % 32));
    9d14:	e204401f 	and	r4, r4, #31
    9d18:	e59f3014 	ldr	r3, [pc, #20]	; 9d34 <gpio_event_clear+0x54>
    9d1c:	e593004c 	ldr	r0, [r3, #76]	; 0x4c
    9d20:	e3a01001 	mov	r1, #1
    9d24:	e1a01411 	lsl	r1, r1, r4
    9d28:	ebfffe7a 	bl	9718 <put32>
    }
    dev_barrier();
    9d2c:	ebfffe73 	bl	9700 <dev_barrier>
    9d30:	e8bd8010 	pop	{r4, pc}
    9d34:	00009de8 	andeq	r9, r0, r8, ror #27

00009d38 <memset>:
#include <string.h>

void *memset(void *_p, int c, size_t n) {
    char *p = _p, *e = p + n;
    9d38:	e0802002 	add	r2, r0, r2
    9d3c:	e1a03000 	mov	r3, r0

    while(p < e)
    9d40:	ea000001 	b	9d4c <memset+0x14>
        *p++ = c;
    9d44:	e5c31000 	strb	r1, [r3]
    9d48:	e2833001 	add	r3, r3, #1
#include <string.h>

void *memset(void *_p, int c, size_t n) {
    char *p = _p, *e = p + n;

    while(p < e)
    9d4c:	e1530002 	cmp	r3, r2
    9d50:	3afffffb 	bcc	9d44 <memset+0xc>
        *p++ = c;
    return _p;
}
    9d54:	e12fff1e 	bx	lr

00009d58 <cb_new>:
// trivial routines to access control block.
#include "rpi.h"
#include "control-block.h"

control_blk_t *cb_new(void) {
    9d58:	e92d4008 	push	{r3, lr}
    control_blk_t *c = CTRL_BLK_ADDR;
    memset(c, 0, sizeof c);
    9d5c:	e3a00409 	mov	r0, #150994944	; 0x9000000
    9d60:	e3a01000 	mov	r1, #0
    9d64:	e3a02004 	mov	r2, #4
    9d68:	ebfffff2 	bl	9d38 <memset>
    c->magic = CTRL_BLK_MAGIC;
    9d6c:	e3a00409 	mov	r0, #150994944	; 0x9000000
    9d70:	e59f3004 	ldr	r3, [pc, #4]	; 9d7c <cb_new+0x24>
    9d74:	e5803000 	str	r3, [r0]
    return c;
}
    9d78:	e8bd8008 	pop	{r3, pc}
    9d7c:	12345678 	eorsne	r5, r4, #120, 12	; 0x7800000

00009d80 <cb_get_block>:

control_blk_t *cb_get_block(void) {
    control_blk_t *c = CTRL_BLK_ADDR;
    if(c->magic != CTRL_BLK_MAGIC)
    9d80:	e3a03409 	mov	r3, #150994944	; 0x9000000
    9d84:	e5932000 	ldr	r2, [r3]
    9d88:	e59f3014 	ldr	r3, [pc, #20]	; 9da4 <cb_get_block+0x24>
    9d8c:	e1520003 	cmp	r2, r3
    9d90:	0a000001 	beq	9d9c <cb_get_block+0x1c>
        return 0;
    9d94:	e3a00000 	mov	r0, #0
    9d98:	e12fff1e 	bx	lr
    return c;
    9d9c:	e3a00409 	mov	r0, #150994944	; 0x9000000
}
    9da0:	e12fff1e 	bx	lr
    9da4:	12345678 	eorsne	r5, r4, #120, 12	; 0x7800000

Disassembly of section .data:

00009da8 <rpi_putchar>:
    9da8:	000081d0 	ldrdeq	r8, [r0], -r0

00009dac <putk>:
    9dac:	0000820c 	andeq	r8, r0, ip, lsl #4

00009db0 <tid>:
    9db0:	00000001 	andeq	r0, r0, r1

00009db4 <AUX_ENABLES>:
    9db4:	20215004 	eorcs	r5, r1, r4

00009db8 <AUX_MU_CNTL_REG>:
    9db8:	20215060 	eorcs	r5, r1, r0, rrx

00009dbc <AUX_MU_IER_REG>:
    9dbc:	20215044 	eorcs	r5, r1, r4, asr #32

00009dc0 <AUX_MU_IIR_REG>:
    9dc0:	20215048 	eorcs	r5, r1, r8, asr #32

00009dc4 <AUX_MU_LCR_REG>:
    9dc4:	2021504c 	eorcs	r5, r1, ip, asr #32

00009dc8 <AUX_MU_BAUD_REG>:
    9dc8:	20215068 	eorcs	r5, r1, r8, rrx

00009dcc <AUX_MU_LSR_REG>:
    9dcc:	20215054 	eorcs	r5, r1, r4, asr r0

00009dd0 <AUX_MU_IO_REG>:
    9dd0:	20215040 	eorcs	r5, r1, r0, asr #32

00009dd4 <AUX_MU_STAT_REG>:
    9dd4:	20215064 	eorcs	r5, r1, r4, rrx

00009dd8 <AUX_MU_SCRATCH>:
    9dd8:	2021505c 	eorcs	r5, r1, ip, asr r0

00009ddc <AUX_MU_MSR_REG>:
    9ddc:	20215058 	eorcs	r5, r1, r8, asr r0

00009de0 <AUX_MU_MCR_REG>:
    9de0:	20215050 	eorcs	r5, r1, r0, asr r0

00009de4 <AUX_IRQ>:
    9de4:	20215000 	eorcs	r5, r1, r0

00009de8 <GPFSEL0>:
    9de8:	20200000 	eorcs	r0, r0, r0

00009dec <GPFSEL1>:
    9dec:	20200004 	eorcs	r0, r0, r4

00009df0 <GPFSEL2>:
    9df0:	20200008 	eorcs	r0, r0, r8

00009df4 <GPFSEL3>:
    9df4:	2020000c 	eorcs	r0, r0, ip

00009df8 <GPFSEL4>:
    9df8:	20200010 	eorcs	r0, r0, r0, lsl r0

00009dfc <GPFSEL5>:
    9dfc:	20200014 	eorcs	r0, r0, r4, lsl r0

00009e00 <GPSET0>:
    9e00:	2020001c 	eorcs	r0, r0, ip, lsl r0

00009e04 <GPSET1>:
    9e04:	20200020 	eorcs	r0, r0, r0, lsr #32

00009e08 <GPCLR0>:
    9e08:	20200028 	eorcs	r0, r0, r8, lsr #32

00009e0c <GPCLR1>:
    9e0c:	2020002c 	eorcs	r0, r0, ip, lsr #32

00009e10 <GPLEV0>:
    9e10:	20200034 	eorcs	r0, r0, r4, lsr r0

00009e14 <GPLEV1>:
    9e14:	20200038 	eorcs	r0, r0, r8, lsr r0

00009e18 <IRQ_PENDING_2>:
    9e18:	2000b208 	andcs	fp, r0, r8, lsl #4

00009e1c <GPREN0>:
    9e1c:	2020004c 	eorcs	r0, r0, ip, asr #32

00009e20 <GPREN1>:
    9e20:	20200050 	eorcs	r0, r0, r0, asr r0

00009e24 <ENABLE_IRQS_2>:
    9e24:	2000b214 	andcs	fp, r0, r4, lsl r2

00009e28 <GPFEN0>:
    9e28:	20200058 	eorcs	r0, r0, r8, asr r0

00009e2c <GPFEN1>:
    9e2c:	2020005c 	eorcs	r0, r0, ip, asr r0

00009e30 <GPEDS0>:
    9e30:	20200040 	eorcs	r0, r0, r0, asr #32

00009e34 <GPEDS1>:
    9e34:	20200044 	eorcs	r0, r0, r4, asr #32

00009e38 <IRQ_PENDING_1>:
    9e38:	2000b204 	andcs	fp, r0, r4, lsl #4

00009e3c <gpio_clr0>:
    9e3c:	20200028 	eorcs	r0, r0, r8, lsr #32

00009e40 <gpio_set0>:
    9e40:	2020001c 	eorcs	r0, r0, ip, lsl r0

00009e44 <gpio_fsel0>:
    9e44:	20200000 	eorcs	r0, r0, r0

Disassembly of section .rodata:

00009e48 <__FUNCTION__.4215>:
    9e48:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    9e4c:	6e615f74 	mcrvs	15, 3, r5, cr1, cr4, {3}
    9e50:	69645f64 	stmdbvs	r4!, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    9e54:	00000065 	andeq	r0, r0, r5, rrx
    9e58:	76697274 			; <UNDEFINED> instruction: 0x76697274
    9e5c:	206c6169 	rsbcs	r6, ip, r9, ror #2
    9e60:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
    9e64:	203a6461 	eorscs	r6, sl, r1, ror #8
    9e68:	3d677261 	sfmcc	f7, 2, [r7, #-388]!	; 0xfffffe7c
    9e6c:	000a6425 	andeq	r6, sl, r5, lsr #8
    9e70:	43435553 	movtmi	r5, #13651	; 0x3553
    9e74:	0a535345 	beq	14deb90 <__bss_end__+0x14d42b0>
    9e78:	00000000 	andeq	r0, r0, r0
    9e7c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9e80:	73253a43 	teqvc	r5, #274432	; 0x43000
    9e84:	3a73253a 	bcc	1cd3374 <__bss_end__+0x1cc8a94>
    9e88:	733a6425 	teqvc	sl, #620756992	; 0x25000000
    9e8c:	6c756f68 	ldclvs	15, cr6, [r5], #-416	; 0xfffffe60
    9e90:	6f6e2064 	svcvs	0x006e2064
    9e94:	61632074 	smcvs	12804	; 0x3204
    9e98:	0a0a6c6c 	beq	2a5050 <__bss_end__+0x29a770>
    9e9c:	00000000 	andeq	r0, r0, r0
    9ea0:	65742d34 	ldrbvs	r2, [r4, #-3380]!	; 0xd34
    9ea4:	652d7473 	strvs	r7, [sp, #-1139]!	; 0x473
    9ea8:	2e746978 	mrccs	9, 3, r6, cr4, cr8, {3}
    9eac:	00000063 	andeq	r0, r0, r3, rrx

00009eb0 <__FUNCTION__.4263>:
    9eb0:	74696d65 	strbtvc	r6, [r9], #-3429	; 0xd65
    9eb4:	00000000 	andeq	r0, r0, r0

00009eb8 <__FUNCTION__.4211>:
    9eb8:	5f697072 	svcpl	0x00697072
    9ebc:	5f746573 	svcpl	0x00746573
    9ec0:	7074756f 	rsbsvc	r7, r4, pc, ror #10
    9ec4:	00007475 	andeq	r7, r0, r5, ror r4

00009ec8 <__FUNCTION__.4285>:
    9ec8:	705f6176 	subsvc	r6, pc, r6, ror r1	; <UNPREDICTABLE>
    9ecc:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    9ed0:	0000006b 	andeq	r0, r0, fp, rrx
    9ed4:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9ed8:	73253a43 	teqvc	r5, #274432	; 0x43000
    9edc:	3a73253a 	bcc	1cd33cc <__bss_end__+0x1cc8aec>
    9ee0:	303a6425 	eorscc	r6, sl, r5, lsr #8
    9ee4:	0000000a 	andeq	r0, r0, sl
    9ee8:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    9eec:	2d61762f 	stclcs	6, cr7, [r1, #-188]!	; 0xffffff44
    9ef0:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    9ef4:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
    9ef8:	00000000 	andeq	r0, r0, r0
    9efc:	33323130 	teqcc	r2, #48, 2
    9f00:	37363534 			; <UNDEFINED> instruction: 0x37363534
    9f04:	00003938 	andeq	r3, r0, r8, lsr r9
    9f08:	33323130 	teqcc	r2, #48, 2
    9f0c:	37363534 			; <UNDEFINED> instruction: 0x37363534
    9f10:	62613938 	rsbvs	r3, r1, #56, 18	; 0xe0000
    9f14:	66656463 	strbtvs	r6, [r5], -r3, ror #8
    9f18:	00000000 	andeq	r0, r0, r0
    9f1c:	00003130 	andeq	r3, r0, r0, lsr r1
    9f20:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9f24:	73253a43 	teqvc	r5, #274432	; 0x43000
    9f28:	3a73253a 	bcc	1cd3418 <__bss_end__+0x1cc8b38>
    9f2c:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    9f30:	5f637475 	svcpl	0x00637475
    9f34:	000a7066 	andeq	r7, sl, r6, rrx
    9f38:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9f3c:	73253a43 	teqvc	r5, #274432	; 0x43000
    9f40:	3a73253a 	bcc	1cd3430 <__bss_end__+0x1cc8b50>
    9f44:	773a6425 	ldrvc	r6, [sl, -r5, lsr #8]!
    9f48:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
    9f4c:	33203c20 	teqcc	r0, #32, 24	; 0x2000
    9f50:	00000a32 	andeq	r0, r0, r2, lsr sl
    9f54:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9f58:	73253a43 	teqvc	r5, #274432	; 0x43000
    9f5c:	3a73253a 	bcc	1cd344c <__bss_end__+0x1cc8b6c>
    9f60:	663a6425 	ldrtvs	r6, [sl], -r5, lsr #8
    9f64:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xf6c
    9f68:	746f6e20 	strbtvc	r6, [pc], #-3616	; 9f70 <__FUNCTION__.4285+0xa8>
    9f6c:	616e6520 	cmnvs	lr, r0, lsr #10
    9f70:	64656c62 	strbtvs	r6, [r5], #-3170	; 0xc62
    9f74:	0a212121 	beq	852400 <__bss_end__+0x847b20>
    9f78:	00000000 	andeq	r0, r0, r0
    9f7c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9f80:	73253a43 	teqvc	r5, #274432	; 0x43000
    9f84:	3a73253a 	bcc	1cd3474 <__bss_end__+0x1cc8b94>
    9f88:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    9f8c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    9f90:	6e203a6b 	vnmulvs.f32	s6, s0, s23
    9f94:	6820746f 	stmdavs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
    9f98:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    9f9c:	20676e69 	rsbcs	r6, r7, r9, ror #28
    9fa0:	63657073 	cmnvs	r5, #115	; 0x73
    9fa4:	65696669 	strbvs	r6, [r9, #-1641]!	; 0x669
    9fa8:	25272072 	strcs	r2, [r7, #-114]!	; 0x72
    9fac:	0a0a2763 	beq	293d40 <__bss_end__+0x289460>
    9fb0:	00000000 	andeq	r0, r0, r0
    9fb4:	454e4f44 	strbmi	r4, [lr, #-3908]	; 0xf44
    9fb8:	0a212121 	beq	852444 <__bss_end__+0x847b64>
    9fbc:	00000000 	andeq	r0, r0, r0
    9fc0:	756f6261 	strbvc	r6, [pc, #-609]!	; 9d67 <cb_new+0xf>
    9fc4:	6f742074 	svcvs	0x00742074
    9fc8:	69727020 	ldmdbvs	r2!, {r5, ip, sp, lr}^
    9fcc:	6f20746e 	svcvs	0x0020746e
    9fd0:	6572206e 	ldrbvs	r2, [r2, #-110]!	; 0x6e
    9fd4:	616c7567 	cmnvs	ip, r7, ror #10
    9fd8:	72702072 	rsbsvc	r2, r0, #114	; 0x72
    9fdc:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
    9fe0:	0000000a 	andeq	r0, r0, sl
    9fe4:	63637573 	cmnvs	r3, #482344960	; 0x1cc00000
    9fe8:	21737365 	cmncs	r3, r5, ror #6
    9fec:	0000000a 	andeq	r0, r0, sl

00009ff0 <__FUNCTION__.4207>:
    9ff0:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    9ff4:	00636f6c 	rsbeq	r6, r3, ip, ror #30

00009ff8 <__FUNCTION__.4214>:
    9ff8:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    9ffc:	5f636f6c 	svcpl	0x00636f6c
    a000:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    a004:	0064656e 	rsbeq	r6, r4, lr, ror #10

0000a008 <__FUNCTION__.4219>:
    a008:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    a00c:	5f636f6c 	svcpl	0x00636f6c
    a010:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    a014:	00000000 	andeq	r0, r0, r0

0000a018 <__FUNCTION__.4229>:
    a018:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    a01c:	5f636f6c 	svcpl	0x00636f6c
    a020:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    a024:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
    a028:	6174735f 	cmnvs	r4, pc, asr r3
    a02c:	00007472 	andeq	r7, r0, r2, ror r4
    a030:	4f525245 	svcmi	0x00525245
    a034:	73253a52 	teqvc	r5, #335872	; 0x52000
    a038:	3a73253a 	bcc	1cd3528 <__bss_end__+0x1cc8c48>
    a03c:	203a6425 	eorscs	r6, sl, r5, lsr #8
    a040:	534c4146 	movtpl	r4, #49478	; 0xc146
    a044:	693c2845 	ldmdbvs	ip!, {r0, r2, r6, fp, sp}
    a048:	5f74696e 	svcpl	0x0074696e
    a04c:	3a293e70 	bcc	a59a14 <__bss_end__+0xa4f134>
    a050:	6c616320 	stclvs	3, cr6, [r1], #-128	; 0xffffff80
    a054:	676e696c 	strbvs	r6, [lr, -ip, ror #18]!
    a058:	66656220 	strbtvs	r6, [r5], -r0, lsr #4
    a05c:	2065726f 	rsbcs	r7, r5, pc, ror #4
    a060:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    a064:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    a068:	0a64657a 	beq	1923658 <__bss_end__+0x1918d78>
    a06c:	00000000 	andeq	r0, r0, r0
    a070:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
    a074:	6b2f6372 	blvs	be2e44 <__bss_end__+0xbd8564>
    a078:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    a07c:	632e636f 	teqvs	lr, #-1140850687	; 0xbc000001
    a080:	00000000 	andeq	r0, r0, r0
    a084:	4f525245 	svcmi	0x00525245
    a088:	73253a52 	teqvc	r5, #335872	; 0x52000
    a08c:	3a73253a 	bcc	1cd357c <__bss_end__+0x1cc8c9c>
    a090:	203a6425 	eorscs	r6, sl, r5, lsr #8
    a094:	534c4146 	movtpl	r4, #49478	; 0xc146
    a098:	613c2845 	teqvs	ip, r5, asr #16
    a09c:	6e67696c 	cdpvs	9, 6, cr6, cr7, cr12, {3}
    a0a0:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
    a0a4:	38202520 	stmdacc	r0!, {r5, r8, sl, sp}
    a0a8:	203d3d20 	eorscs	r3, sp, r0, lsr #26
    a0ac:	3a293e30 	bcc	a59974 <__bss_end__+0xa4f094>
    a0b0:	65772220 	ldrbvs	r2, [r7, #-544]!	; 0x220
    a0b4:	20647269 	rsbcs	r7, r4, r9, ror #4
    a0b8:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    a0bc:	6e656d6e 	cdpvs	13, 6, cr6, cr5, cr14, {3}
    a0c0:	6e203a74 	mcrvs	10, 1, r3, cr0, cr4, {3}
    a0c4:	6120746f 	teqvs	r0, pc, ror #8
    a0c8:	6c756d20 	ldclvs	13, cr6, [r5], #-128	; 0xffffff80
    a0cc:	6c706974 	ldclvs	9, cr6, [r0], #-464	; 0xfffffe30
    a0d0:	666f2065 	strbtvs	r2, [pc], -r5, rrx
    a0d4:	22213420 	eorcs	r3, r1, #32, 8	; 0x20000000
    a0d8:	0000000a 	andeq	r0, r0, sl
    a0dc:	4f525245 	svcmi	0x00525245
    a0e0:	73253a52 	teqvc	r5, #335872	; 0x52000
    a0e4:	3a73253a 	bcc	1cd35d4 <__bss_end__+0x1cc8cf4>
    a0e8:	203a6425 	eorscs	r6, sl, r5, lsr #8
    a0ec:	534c4146 	movtpl	r4, #49478	; 0xc146
    a0f0:	213c2845 	teqcs	ip, r5, asr #16
    a0f4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    a0f8:	293e705f 	ldmdbcs	lr!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}
    a0fc:	6163203a 	cmnvs	r3, sl, lsr r0
    a100:	746f6e6e 	strbtvc	r6, [pc], #-3694	; a108 <__FUNCTION__.4229+0xf0>
    a104:	696e6920 	stmdbvs	lr!, {r5, r8, fp, sp, lr}^
    a108:	6c616974 	stclvs	9, cr6, [r1], #-464	; 0xfffffe30
    a10c:	20657a69 	rsbcs	r7, r5, r9, ror #20
    a110:	63697774 	cmnvs	r9, #116, 14	; 0x1d00000
    a114:	0a0a2165 	beq	2926b0 <__bss_end__+0x287dd0>
    a118:	00000000 	andeq	r0, r0, r0

0000a11c <__FUNCTION__.4218>:
    a11c:	6d655f51 	stclvs	15, cr5, [r5, #-324]!	; 0xfffffebc
    a120:	00797470 	rsbseq	r7, r9, r0, ror r4

0000a124 <__FUNCTION__.4222>:
    a124:	6f705f51 	svcvs	0x00705f51
    a128:	00000070 	andeq	r0, r0, r0, ror r0

0000a12c <__FUNCTION__.4250>:
    a12c:	615f6874 	cmpvs	pc, r4, ror r8	; <UNPREDICTABLE>
    a130:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    a134:	00000000 	andeq	r0, r0, r0

0000a138 <__FUNCTION__.4284>:
    a138:	5f697072 	svcpl	0x00697072
    a13c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    a140:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    a144:	6568635f 	strbvs	r6, [r8, #-863]!	; 0x35f
    a148:	00006b63 	andeq	r6, r0, r3, ror #22

0000a14c <__FUNCTION__.4288>:
    a14c:	5f697072 	svcpl	0x00697072
    a150:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    a154:	68635f6b 	stmdavs	r3!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    a158:	006b6365 	rsbeq	r6, fp, r5, ror #6

0000a15c <__FUNCTION__.4292>:
    a15c:	5f697072 	svcpl	0x00697072
    a160:	6e696f6a 	cdpvs	15, 6, cr6, cr9, cr10, {3}
    a164:	00000000 	andeq	r0, r0, r0

0000a168 <__FUNCTION__.4296>:
    a168:	5f697072 	svcpl	0x00697072
    a16c:	63617865 	cmnvs	r1, #6619136	; 0x650000
    a170:	6c735f74 	ldclvs	15, cr5, [r3], #-464	; 0xfffffe30
    a174:	00706565 	rsbseq	r6, r0, r5, ror #10
    a178:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a17c:	73253a43 	teqvc	r5, #274432	; 0x43000
    a180:	3a73253a 	bcc	1cd3670 <__bss_end__+0x1cc8d90>
    a184:	513a6425 	teqpl	sl, r5, lsr #8
    a188:	6c656e5f 	stclvs	14, cr6, [r5], #-380	; 0xfffffe84
    a18c:	71286d65 	teqvc	r8, r5, ror #26
    a190:	3d3d2029 	ldccc	0, cr2, [sp, #-164]!	; 0xffffff5c
    a194:	000a3020 	andeq	r3, sl, r0, lsr #32
    a198:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
    a19c:	512f6372 	teqpl	pc, r2, ror r3	; <UNPREDICTABLE>
    a1a0:	0000682e 	andeq	r6, r0, lr, lsr #16
    a1a4:	4f525245 	svcmi	0x00525245
    a1a8:	73253a52 	teqvc	r5, #335872	; 0x52000
    a1ac:	3a73253a 	bcc	1cd369c <__bss_end__+0x1cc8dbc>
    a1b0:	203a6425 	eorscs	r6, sl, r5, lsr #8
    a1b4:	534c4146 	movtpl	r4, #49478	; 0xc146
    a1b8:	213c2845 	teqcs	ip, r5, asr #16
    a1bc:	743e2d71 	ldrtvc	r2, [lr], #-3441	; 0xd71
    a1c0:	3e6c6961 	cdpcc	9, 6, cr6, cr12, cr1, {3}
    a1c4:	69203a29 	stmdbvs	r0!, {r0, r3, r5, r9, fp, ip, sp}
    a1c8:	6c61766e 	stclvs	6, cr7, [r1], #-440	; 0xfffffe48
    a1cc:	51206469 	teqpl	r0, r9, ror #8
    a1d0:	0000000a 	andeq	r0, r0, sl
    a1d4:	4f525245 	svcmi	0x00525245
    a1d8:	73253a52 	teqvc	r5, #335872	; 0x52000
    a1dc:	3a73253a 	bcc	1cd36cc <__bss_end__+0x1cc8dec>
    a1e0:	203a6425 	eorscs	r6, sl, r5, lsr #8
    a1e4:	534c4146 	movtpl	r4, #49478	; 0xc146
    a1e8:	713c2845 	teqvc	ip, r5, asr #16
    a1ec:	203a293e 	eorscs	r2, sl, lr, lsr r9
    a1f0:	20646162 	rsbcs	r6, r4, r2, ror #2
    a1f4:	75706e69 	ldrbvc	r6, [r0, #-3689]!	; 0xe69
    a1f8:	00000a74 	andeq	r0, r0, r4, ror sl
    a1fc:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a200:	73253a43 	teqvc	r5, #274432	; 0x43000
    a204:	3a73253a 	bcc	1cd36f4 <__bss_end__+0x1cc8e14>
    a208:	513a6425 	teqpl	sl, r5, lsr #8
    a20c:	706d655f 	rsbvc	r6, sp, pc, asr r5
    a210:	71287974 	teqvc	r8, r4, ror r9
    a214:	00000a29 	andeq	r0, r0, r9, lsr #20
    a218:	4f525245 	svcmi	0x00525245
    a21c:	73253a52 	teqvc	r5, #335872	; 0x52000
    a220:	3a73253a 	bcc	1cd3710 <__bss_end__+0x1cc8e30>
    a224:	203a6425 	eorscs	r6, sl, r5, lsr #8
    a228:	534c4146 	movtpl	r4, #49478	; 0xc146
    a22c:	283c2845 	ldmdacs	ip!, {r0, r2, r6, fp, sp}
    a230:	6e752828 	cdpvs	8, 7, cr2, cr5, cr8, {1}
    a234:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
    a238:	28296465 	stmdacs	r9!, {r0, r2, r5, r6, sl, sp, lr}
    a23c:	3e2d7426 	cdpcc	4, 2, cr7, cr13, cr6, {1}
    a240:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    a244:	5d305b6b 	fldmdbxpl	r0!, {d5-d57}	;@ Deprecated
    a248:	28252929 	stmdacs	r5!, {r0, r3, r5, r8, fp, sp}
    a24c:	3d202938 	stccc	9, cr2, [r0, #-224]!	; 0xffffff20
    a250:	2930203d 	ldmdbcs	r0!, {r0, r2, r3, r4, r5, sp}
    a254:	203a293e 	eorscs	r2, sl, lr, lsr r9
    a258:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    a25c:	756d206b 	strbvc	r2, [sp, #-107]!	; 0x6b
    a260:	62207473 	eorvs	r7, r0, #1929379840	; 0x73000000
    a264:	2d382065 	ldccs	0, cr2, [r8, #-404]!	; 0xfffffe6c
    a268:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
    a26c:	696c6120 	stmdbvs	ip!, {r5, r8, sp, lr}^
    a270:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
    a274:	00000a21 	andeq	r0, r0, r1, lsr #20
    a278:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
    a27c:	722f6372 	eorvc	r6, pc, #-939524095	; 0xc8000001
    a280:	742d6970 	strtvc	r6, [sp], #-2416	; 0x970
    a284:	61657268 	cmnvs	r5, r8, ror #4
    a288:	00632e64 	rsbeq	r2, r3, r4, ror #28
    a28c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a290:	73253a43 	teqvc	r5, #274432	; 0x43000
    a294:	3a73253a 	bcc	1cd3784 <__bss_end__+0x1cc8ea4>
    a298:	733a6425 	teqvc	sl, #620756992	; 0x25000000
    a29c:	61726f74 	cmnvs	r2, r4, ror pc
    a2a0:	6c206567 	cfstr32vs	mvfx6, [r0], #-412	; 0xfffffe64
    a2a4:	3a6b6165 	bcc	1ae2840 <__bss_end__+0x1ad7f60>
    a2a8:	6f687320 	svcvs	0x00687320
    a2ac:	20646c75 	rsbcs	r6, r4, r5, ror ip
    a2b0:	65766168 	ldrbvs	r6, [r6, #-360]!	; 0x168
    a2b4:	20642520 	rsbcs	r2, r4, r0, lsr #10
    a2b8:	65657266 	strbvs	r7, [r5, #-614]!	; 0x266
    a2bc:	6f6c6220 	svcvs	0x006c6220
    a2c0:	2c736b63 	ldclcs	11, cr6, [r3], #-396	; 0xfffffe74
    a2c4:	76616820 	strbtvc	r6, [r1], -r0, lsr #16
    a2c8:	64252065 	strtvs	r2, [r5], #-101	; 0x65
    a2cc:	75722820 	ldrbvc	r2, [r2, #-2080]!	; 0x820
    a2d0:	253d716e 	ldrcs	r7, [sp, #-366]!	; 0x16e
    a2d4:	66202c64 	strtvs	r2, [r0], -r4, ror #24
    a2d8:	71656572 	smcvc	22098	; 0x5652
    a2dc:	2964253d 	stmdbcs	r4!, {r0, r2, r3, r4, r5, r8, sl, sp}^
    a2e0:	00000a0a 	andeq	r0, r0, sl, lsl #20
    a2e4:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
    a2e8:	203a6461 	eorscs	r6, sl, r1, ror #8
    a2ec:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    a2f0:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    a2f4:	65686320 	strbvs	r6, [r8, #-800]!	; 0x320
    a2f8:	70206b63 	eorvc	r6, r0, r3, ror #22
    a2fc:	65737361 	ldrbvs	r7, [r3, #-865]!	; 0x361
    a300:	00000a64 	andeq	r0, r0, r4, ror #20
    a304:	74697072 	strbtvc	r7, [r9], #-114	; 0x72
    a308:	61657268 	cmnvs	r5, r8, ror #4
    a30c:	203a7364 	eorscs	r7, sl, r4, ror #6
    a310:	656e6f64 	strbvs	r6, [lr, #-3940]!	; 0xf64
    a314:	74697720 	strbtvc	r7, [r9], #-1824	; 0x720
    a318:	6c612068 	stclvs	0, cr2, [r1], #-416	; 0xfffffe60
    a31c:	6874206c 	ldmdavs	r4!, {r2, r3, r5, r6, sp}^
    a320:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
    a324:	72202173 	eorvc	r2, r0, #-1073741796	; 0xc000001c
    a328:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
    a32c:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
    a330:	0000000a 	andeq	r0, r0, sl
    a334:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a338:	73253a43 	teqvc	r5, #274432	; 0x43000
    a33c:	3a73253a 	bcc	1cd382c <__bss_end__+0x1cc8f4c>
    a340:	693a6425 	ldmdbvs	sl!, {r0, r2, r5, sl, sp, lr}
    a344:	656c706d 	strbvs	r7, [ip, #-109]!	; 0x6d
    a348:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
    a34c:	69687420 	stmdbvs	r8!, {r5, sl, ip, sp, lr}^
    a350:	75662073 	strbvc	r2, [r6, #-115]!	; 0x73
    a354:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    a358:	0a216e6f 	beq	865d1c <__bss_end__+0x85b43c>
    a35c:	0000000a 	andeq	r0, r0, sl

0000a360 <__FUNCTION__.4312>:
    a360:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 9bf5 <gpio_int_falling_edge+0x1d>
    a364:	5f747261 	svcpl	0x00747261
    a368:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
    a36c:	746e755f 	strbtvc	r7, [lr], #-1375	; 0x55f
    a370:	00006c69 	andeq	r6, r0, r9, ror #24

0000a374 <__FUNCTION__.4324>:
    a374:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 9c09 <gpio_int_falling_edge+0x31>
    a378:	5f747261 	svcpl	0x00747261
    a37c:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
    a380:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    a384:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
    a388:	00000000 	andeq	r0, r0, r0

0000a38c <__FUNCTION__.4338>:
    a38c:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 9c21 <gpio_int_falling_edge+0x49>
    a390:	5f747261 	svcpl	0x00747261
    a394:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    a398:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
    a39c:	00726570 	rsbseq	r6, r2, r0, ror r5

0000a3a0 <__FUNCTION__.4344>:
    a3a0:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 9c35 <gpio_int_falling_edge+0x5d>
    a3a4:	5f747261 	svcpl	0x00747261
    a3a8:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
    a3ac:	00000000 	andeq	r0, r0, r0

0000a3b0 <__FUNCTION__.4366>:
    a3b0:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 9c45 <gpio_int_falling_edge+0x6d>
    a3b4:	5f747261 	svcpl	0x00747261
    a3b8:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    a3bc:	00006b74 	andeq	r6, r0, r4, ror fp

0000a3c0 <__FUNCTION__.4374>:
    a3c0:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 9c55 <gpio_int_falling_edge+0x7d>
    a3c4:	5f747261 	svcpl	0x00747261
    a3c8:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
    a3cc:	746e755f 	strbtvc	r7, [lr], #-1375	; 0x55f
    a3d0:	625f6c69 	subsvs	r6, pc, #26880	; 0x6900
    a3d4:	00006b6c 	andeq	r6, r0, ip, ror #22
    a3d8:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a3dc:	73253a43 	teqvc	r5, #274432	; 0x43000
    a3e0:	3a73253a 	bcc	1cd38d0 <__bss_end__+0x1cc8ff0>
    a3e4:	6e3a6425 	cdpvs	4, 3, cr6, cr10, cr5, {1}
    a3e8:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
    a3ec:	0a303e73 	beq	c19dc0 <__bss_end__+0xc0f4e0>
    a3f0:	00000000 	andeq	r0, r0, r0
    a3f4:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
    a3f8:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    a3fc:	61752d77 	cmnvs	r5, r7, ror sp
    a400:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
    a404:	00000000 	andeq	r0, r0, r0
    a408:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a40c:	73253a43 	teqvc	r5, #274432	; 0x43000
    a410:	3a73253a 	bcc	1cd3900 <__bss_end__+0x1cc9020>
    a414:	283a6425 	ldmdacs	sl!, {r0, r2, r5, sl, sp, lr}
    a418:	207a686d 	rsbscs	r6, sl, sp, ror #16
    a41c:	6162202d 	cmnvs	r2, sp, lsr #32
    a420:	20296475 	eorcs	r6, r9, r5, ror r4
    a424:	64203d3c 	strtvs	r3, [r0], #-3388	; 0xd3c
    a428:	76697265 	strbtvc	r7, [r9], -r5, ror #4
    a42c:	26206465 	strtcs	r6, [r0], -r5, ror #8
    a430:	65642026 	strbvs	r2, [r4, #-38]!	; 0x26
    a434:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    a438:	3d3c2064 	ldccc	0, cr2, [ip, #-400]!	; 0xfffffe70
    a43c:	686d2820 	stmdavs	sp!, {r5, fp, sp}^
    a440:	202b207a 	eorcs	r2, fp, sl, ror r0
    a444:	64756162 	ldrbtvs	r6, [r5], #-354	; 0x162
    a448:	00000a29 	andeq	r0, r0, r9, lsr #20
    a44c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a450:	73253a43 	teqvc	r5, #274432	; 0x43000
    a454:	3a73253a 	bcc	1cd3944 <__bss_end__+0x1cc9064>
    a458:	693a6425 	ldmdbvs	sl!, {r0, r2, r5, sl, sp, lr}
    a45c:	736f706d 	cmnvc	pc, #109	; 0x6d
    a460:	6c626973 	stclvs	9, cr6, [r2], #-460	; 0xfffffe34
    a464:	68203a65 	stmdavs	r0!, {r0, r2, r5, r6, r9, fp, ip, sp}
    a468:	20657661 	rsbcs	r7, r5, r1, ror #12
    a46c:	69206e61 	stmdbvs	r0!, {r0, r5, r6, r9, sl, fp, sp, lr}
    a470:	6e69666e 	cdpvs	6, 6, cr6, cr9, cr14, {3}
    a474:	20657469 	rsbcs	r7, r5, r9, ror #8
    a478:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    a47c:	2174756f 	cmncs	r4, pc, ror #10
    a480:	00000a0a 	andeq	r0, r0, sl, lsl #20
    a484:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a488:	73253a43 	teqvc	r5, #274432	; 0x43000
    a48c:	3a73253a 	bcc	1cd397c <__bss_end__+0x1cc909c>
    a490:	733a6425 	teqvc	sl, #620756992	; 0x25000000
    a494:	203c207a 	eorscs	r2, ip, sl, ror r0
    a498:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
    a49c:	6220666f 	eorvs	r6, r0, #116391936	; 0x6f00000
    a4a0:	312d6675 	teqcc	sp, r5, ror r6
    a4a4:	0000000a 	andeq	r0, r0, sl

Disassembly of section .bss:

0000a4a8 <__bss_start__>:
	...

0000a8a8 <console_uart>:
	...

0000a8b4 <init_p>:
    a8b4:	00000000 	andeq	r0, r0, r0

0000a8b8 <heap_ptr>:
    a8b8:	00000000 	andeq	r0, r0, r0

0000a8bc <freeq>:
	...

0000a8c8 <nalloced>:
    a8c8:	00000000 	andeq	r0, r0, r0

0000a8cc <cur_thread>:
    a8cc:	00000000 	andeq	r0, r0, r0

0000a8d0 <runq>:
	...

0000a8dc <scheduler_thread>:
    a8dc:	00000000 	andeq	r0, r0, r0

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4b5a3605 	blmi	168d82c <__bss_end__+0x1682f4c>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	12010901 	andne	r0, r1, #16384	; 0x4000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0x404
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	22011a01 	andcs	r1, r1, #4096	; 0x1000
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__bss_end__+0x10c6444>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	34202955 	strtcc	r2, [r0], #-2389	; 0x955
   c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000030f 	andeq	r0, r0, pc, lsl #6
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	0000000b 	andeq	r0, r0, fp
      10:	00006201 	andeq	r6, r0, r1, lsl #4
      14:	0000b900 	andeq	fp, r0, r0, lsl #18
      18:	00801000 	addeq	r1, r0, r0
      1c:	0000a800 	andeq	sl, r0, r0, lsl #16
      20:	00000000 	andeq	r0, r0, r0
      24:	05040200 	streq	r0, [r4, #-512]	; 0x200
      28:	00746e69 	rsbseq	r6, r4, r9, ror #28
      2c:	57070403 	strpl	r0, [r7, -r3, lsl #8]
      30:	03000001 	movweq	r0, #1
      34:	00840601 	addeq	r0, r4, r1, lsl #12
      38:	02030000 	andeq	r0, r3, #0
      3c:	00019d05 	andeq	r9, r1, r5, lsl #26
      40:	05040300 	streq	r0, [r4, #-768]	; 0x300
      44:	00000189 	andeq	r0, r0, r9, lsl #3
      48:	84050803 	strhi	r0, [r5], #-2051	; 0x803
      4c:	03000001 	movweq	r0, #1
      50:	00820801 	addeq	r0, r2, r1, lsl #16
      54:	02030000 	andeq	r0, r3, #0
      58:	0000a607 	andeq	sl, r0, r7, lsl #12
      5c:	01b50400 			; <UNDEFINED> instruction: 0x01b50400
      60:	34030000 	strcc	r0, [r3], #-0
      64:	00000068 	andeq	r0, r0, r8, rrx
      68:	52070403 	andpl	r0, r7, #50331648	; 0x3000000
      6c:	03000001 	movweq	r0, #1
      70:	014d0708 	cmpeq	sp, r8, lsl #14
      74:	04030000 	streq	r0, [r3], #-0
      78:	00017b07 	andeq	r7, r1, r7, lsl #22
      7c:	03040500 	movweq	r0, #17664	; 0x4500
      80:	008b0801 	addeq	r0, fp, r1, lsl #16
      84:	04060000 	streq	r0, [r6], #-0
      88:	0000008c 	andeq	r0, r0, ip, lsl #1
      8c:	00007f07 	andeq	r7, r0, r7, lsl #30
      90:	01920800 	orrseq	r0, r2, r0, lsl #16
      94:	20500000 	subscs	r0, r0, r0
      98:	00e6dd02 	rsceq	sp, r6, r2, lsl #26
      9c:	3f090000 	svccc	0x00090000
      a0:	02000001 	andeq	r0, r0, #1
      a4:	0000e6df 	ldrdeq	lr, [r0], -pc	; <UNPREDICTABLE>
      a8:	00090000 	andeq	r0, r9, r0
      ac:	02000000 	andeq	r0, r0, #0
      b0:	0000f6e1 	andeq	pc, r0, r1, ror #13
      b4:	740a4000 	strvc	r4, [sl], #-0
      b8:	02006469 	andeq	r6, r0, #1761607680	; 0x69000000
      bc:	00005de2 	andeq	r5, r0, r2, ror #27
      c0:	660a4400 	strvs	r4, [sl], -r0, lsl #8
      c4:	e402006e 	str	r0, [r2], #-110	; 0x6e
      c8:	00000107 	andeq	r0, r0, r7, lsl #2
      cc:	72610a48 	rsbvc	r0, r1, #72, 20	; 0x48000
      d0:	e5020067 	str	r0, [r2, #-103]	; 0x67
      d4:	0000007d 	andeq	r0, r0, sp, ror r0
      d8:	0005094c 	andeq	r0, r5, ip, asr #18
      dc:	e7020000 	str	r0, [r2, -r0]
      e0:	0000010d 	andeq	r0, r0, sp, lsl #2
      e4:	5d0b0050 	stcpl	0, cr0, [fp, #-320]	; 0xfffffec0
      e8:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
      ec:	0c000000 	stceq	0, cr0, [r0], {-0}
      f0:	00000076 	andeq	r0, r0, r6, ror r0
      f4:	0406000f 	streq	r0, [r6], #-15
      f8:	00000091 	muleq	r0, r1, r0
      fc:	0001070d 	andeq	r0, r1, sp, lsl #14
     100:	007d0e00 	rsbseq	r0, sp, r0, lsl #28
     104:	06000000 	streq	r0, [r0], -r0
     108:	0000fc04 	andeq	pc, r0, r4, lsl #24
     10c:	005d0b00 	subseq	r0, sp, r0, lsl #22
     110:	011e0000 	tsteq	lr, r0
     114:	760f0000 	strvc	r0, [pc], -r0
     118:	ff000000 			; <UNDEFINED> instruction: 0xff000000
     11c:	64040007 	strvs	r0, [r4], #-7
     120:	02000001 	andeq	r0, r0, #1
     124:	000091e8 	andeq	r9, r0, r8, ror #3
     128:	012a1000 	teqeq	sl, r0
     12c:	05010000 	streq	r0, [r1, #-0]
     130:	00008010 	andeq	r8, r0, r0, lsl r0
     134:	00000034 	andeq	r0, r0, r4, lsr r0
     138:	01ab9c01 			; <UNDEFINED> instruction: 0x01ab9c01
     13c:	61110000 	tstvs	r1, r0
     140:	01006772 	tsteq	r0, r2, ror r7
     144:	00007d05 	andeq	r7, r0, r5, lsl #26
     148:	00000000 	andeq	r0, r0, r0
     14c:	80201200 	eorhi	r1, r0, r0, lsl #4
     150:	02b20000 	adcseq	r0, r2, #0
     154:	016b0000 	cmneq	fp, r0
     158:	01130000 	tsteq	r3, r0
     15c:	01f30351 	mvnseq	r0, r1, asr r3
     160:	50011350 	andpl	r1, r1, r0, asr r3
     164:	9e580305 	cdpls	3, 5, cr0, cr8, cr5, {0}
     168:	14000000 	strne	r0, [r0], #-0
     16c:	00008024 	andeq	r8, r0, r4, lsr #32
     170:	000002c8 	andeq	r0, r0, r8, asr #5
     174:	00802814 	addeq	r2, r0, r4, lsl r8
     178:	0002c800 	andeq	ip, r2, r0, lsl #16
     17c:	802c1400 	eorhi	r1, ip, r0, lsl #8
     180:	02c80000 	sbceq	r0, r8, #0
     184:	30140000 	andscc	r0, r4, r0
     188:	c8000080 	stmdagt	r0, {r7}
     18c:	14000002 	strne	r0, [r0], #-2
     190:	00008034 	andeq	r8, r0, r4, lsr r0
     194:	000002c8 	andeq	r0, r0, r8, asr #5
     198:	00803814 	addeq	r3, r0, r4, lsl r8
     19c:	0002c800 	andeq	ip, r2, r0, lsl #16
     1a0:	803c1400 	eorshi	r1, ip, r0, lsl #8
     1a4:	02c80000 	sbceq	r0, r8, #0
     1a8:	10000000 	andne	r0, r0, r0
     1ac:	00000070 	andeq	r0, r0, r0, ror r0
     1b0:	80441301 	subhi	r1, r4, r1, lsl #6
     1b4:	00480000 	subeq	r0, r8, r0
     1b8:	9c010000 	stcls	0, cr0, [r1], {-0}
     1bc:	00000237 	andeq	r0, r0, r7, lsr r2
     1c0:	01006e15 	tsteq	r0, r5, lsl lr
     1c4:	00002518 	andeq	r2, r0, r8, lsl r5
     1c8:	50166400 	andspl	r6, r6, r0, lsl #8
     1cc:	24000080 	strcs	r0, [r0], #-128	; 0x80
     1d0:	fb000000 	blx	1da <_start-0x7e26>
     1d4:	17000001 	strne	r0, [r0, -r1]
     1d8:	19010069 	stmdbne	r1, {r0, r3, r5, r6}
     1dc:	00000025 	andeq	r0, r0, r5, lsr #32
     1e0:	0000002c 	andeq	r0, r0, ip, lsr #32
     1e4:	00806818 	addeq	r6, r0, r8, lsl r8
     1e8:	0002cf00 	andeq	ip, r2, r0, lsl #30
     1ec:	51011300 	mrspl	r1, SP_irq
     1f0:	13007402 	movwne	r7, #1026	; 0x402
     1f4:	75025001 	strvc	r5, [r2, #-1]
     1f8:	14000000 	strne	r0, [r0], #-0
     1fc:	0000804c 	andeq	r8, r0, ip, asr #32
     200:	000002ef 	andeq	r0, r0, pc, ror #5
     204:	00805014 	addeq	r5, r0, r4, lsl r0
     208:	0002f600 	andeq	pc, r2, r0, lsl #12
     20c:	80781400 	rsbshi	r1, r8, r0, lsl #8
     210:	02fd0000 	rscseq	r0, sp, #0
     214:	80120000 	andshi	r0, r2, r0
     218:	b2000080 	andlt	r0, r0, #128	; 0x80
     21c:	2d000002 	stccs	0, cr0, [r0, #-8]
     220:	13000002 	movwne	r0, #2
     224:	03055001 	movweq	r5, #20481	; 0x5001
     228:	00009e70 	andeq	r9, r0, r0, ror lr
     22c:	80841400 	addhi	r1, r4, r0, lsl #8
     230:	03040000 	movweq	r0, #16384	; 0x4000
     234:	10000000 	andne	r0, r0, r0
     238:	000001a7 	andeq	r0, r0, r7, lsr #3
     23c:	808c2001 	addhi	r2, ip, r1
     240:	002c0000 	eoreq	r0, ip, r0
     244:	9c010000 	stcls	0, cr0, [r1], {-0}
     248:	0000029d 	muleq	r0, sp, r2
     24c:	00013219 	andeq	r3, r1, r9, lsl r2
     250:	0002ad00 	andeq	sl, r2, r0, lsl #26
     254:	48030500 	stmdami	r3, {r8, sl}
     258:	1400009e 	strne	r0, [r0], #-158	; 0x9e
     25c:	00008094 	muleq	r0, r4, r0
     260:	0000030b 	andeq	r0, r0, fp, lsl #6
     264:	0080a812 	addeq	sl, r0, r2, lsl r8
     268:	0002b200 	andeq	fp, r2, r0, lsl #4
     26c:	00029300 	andeq	r9, r2, r0, lsl #6
     270:	53011300 	movwpl	r1, #4864	; 0x1300
     274:	13200802 	teqne	r0, #131072	; 0x20000
     278:	03055201 	movweq	r5, #20993	; 0x5201
     27c:	00009e48 	andeq	r9, r0, r8, asr #28
     280:	05510113 	ldrbeq	r0, [r1, #-275]	; 0x113
     284:	009ea003 	addseq	sl, lr, r3
     288:	50011300 	andpl	r1, r1, r0, lsl #6
     28c:	9e7c0305 	cdpls	3, 7, cr0, cr12, cr5, {0}
     290:	14000000 	strne	r0, [r0], #-0
     294:	000080ac 	andeq	r8, r0, ip, lsr #1
     298:	00000304 	andeq	r0, r0, r4, lsl #6
     29c:	007f0b00 	rsbseq	r0, pc, r0, lsl #22
     2a0:	02ad0000 	adceq	r0, sp, #0
     2a4:	760c0000 	strvc	r0, [ip], -r0
     2a8:	0d000000 	stceq	0, cr0, [r0, #-0]
     2ac:	029d0700 	addseq	r0, sp, #0, 14
     2b0:	fa1a0000 	blx	6802b8 <__bss_end__+0x6759d8>
     2b4:	02000001 	andeq	r0, r0, #1
     2b8:	00002529 	andeq	r2, r0, r9, lsr #10
     2bc:	0002c800 	andeq	ip, r2, r0, lsl #16
     2c0:	00860e00 	addeq	r0, r6, r0, lsl #28
     2c4:	001b0000 	andseq	r0, fp, r0
     2c8:	0001711c 	andeq	r7, r1, ip, lsl r1
     2cc:	1af10200 	bne	ffc40ad4 <__bss_end__+0xffc361f4>
     2d0:	0000009d 	muleq	r0, sp, r0
     2d4:	02e9eb02 	rsceq	lr, r9, #2048	; 0x800
     2d8:	02e90000 	rsceq	r0, r9, #0
     2dc:	070e0000 	streq	r0, [lr, -r0]
     2e0:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     2e4:	0000007d 	andeq	r0, r0, sp, ror r0
     2e8:	1e040600 	cfmadd32ne	mvax0, mvfx0, mvfx4, mvfx0
     2ec:	1c000001 	stcne	0, cr0, [r0], {1}
     2f0:	00000078 	andeq	r0, r0, r8, ror r0
     2f4:	be1c3a02 	vnmlslt.f32	s6, s24, s4
     2f8:	02000001 	andeq	r0, r0, #1
     2fc:	01191c71 	tsteq	r9, r1, ror ip
     300:	f5020000 			; <UNDEFINED> instruction: 0xf5020000
     304:	0000901c 	andeq	r9, r0, ip, lsl r0
     308:	1c660200 	sfmne	f0, 2, [r6], #-0
     30c:	000001cb 	andeq	r0, r0, fp, asr #3
     310:	91001e02 	tstls	r0, r2, lsl #28
     314:	04000001 	streq	r0, [r0], #-1
     318:	00015f00 	andeq	r5, r1, r0, lsl #30
     31c:	0b010400 	bleq	41324 <__bss_end__+0x36a44>
     320:	01000000 	mrseq	r0, (UNDEF: 0)
     324:	000001e9 	andeq	r0, r0, r9, ror #3
     328:	0000020b 	andeq	r0, r0, fp, lsl #4
     32c:	00008178 	andeq	r8, r0, r8, ror r1
     330:	00000058 	andeq	r0, r0, r8, asr r0
     334:	0000010d 	andeq	r0, r0, sp, lsl #2
     338:	0001da02 	andeq	sp, r1, r2, lsl #20
     33c:	30280200 	eorcc	r0, r8, r0, lsl #4
     340:	03000000 	movweq	r0, #0
     344:	00000201 	andeq	r0, r0, r1, lsl #4
     348:	47000304 	strmi	r0, [r0, -r4, lsl #6]
     34c:	04000000 	streq	r0, [r0], #-0
     350:	00000254 	andeq	r0, r0, r4, asr r2
     354:	00000047 	andeq	r0, r0, r7, asr #32
     358:	04050000 	streq	r0, [r5], #-0
     35c:	00020302 	andeq	r0, r2, r2, lsl #6
     360:	25620200 	strbcs	r0, [r2, #-512]!	; 0x200
     364:	06000000 	streq	r0, [r0], -r0
     368:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     36c:	04070074 	streq	r0, [r7], #-116	; 0x74
     370:	00015707 	andeq	r5, r1, r7, lsl #14
     374:	06010700 	streq	r0, [r1], -r0, lsl #14
     378:	00000084 	andeq	r0, r0, r4, lsl #1
     37c:	9d050207 	sfmls	f0, 4, [r5, #-28]	; 0xffffffe4
     380:	07000001 	streq	r0, [r0, -r1]
     384:	01890504 	orreq	r0, r9, r4, lsl #10
     388:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
     38c:	00018405 	andeq	r8, r1, r5, lsl #8
     390:	08010700 	stmdaeq	r1, {r8, r9, sl}
     394:	00000082 	andeq	r0, r0, r2, lsl #1
     398:	a6070207 	strge	r0, [r7], -r7, lsl #4
     39c:	07000000 	streq	r0, [r0, -r0]
     3a0:	01520704 	cmpeq	r2, r4, lsl #14
     3a4:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
     3a8:	00014d07 	andeq	r4, r1, r7, lsl #26
     3ac:	07040700 	streq	r0, [r4, -r0, lsl #14]
     3b0:	0000017b 	andeq	r0, r0, fp, ror r1
     3b4:	00a70408 	adceq	r0, r7, r8, lsl #8
     3b8:	01070000 	mrseq	r0, (UNDEF: 7)
     3bc:	00008b08 	andeq	r8, r0, r8, lsl #22
     3c0:	b4040800 	strlt	r0, [r4], #-2048	; 0x800
     3c4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     3c8:	000000a7 	andeq	r0, r0, r7, lsr #1
     3cc:	0001fa0a 	andeq	pc, r1, sl, lsl #20
     3d0:	54060100 	strpl	r0, [r6], #-256	; 0x100
     3d4:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
     3d8:	58000081 	stmdapl	r0, {r0, r7}
     3dc:	01000000 	mrseq	r0, (UNDEF: 0)
     3e0:	0001439c 	muleq	r1, ip, r3
     3e4:	6d660b00 	vstmdbvs	r6!, {d16-d15}
     3e8:	06010074 			; <UNDEFINED> instruction: 0x06010074
     3ec:	000000ae 	andeq	r0, r0, lr, lsr #1
     3f0:	0c709102 	ldfeqp	f1, [r0], #-8
     3f4:	6675620d 	ldrbtvs	r6, [r5], -sp, lsl #4
     3f8:	43080100 	movwmi	r0, #33024	; 0x8100
     3fc:	05000001 	streq	r0, [r0, #-1]
     400:	00a4a803 	adceq	sl, r4, r3, lsl #16
     404:	024f0e00 	subeq	r0, pc, #0, 28
     408:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
     40c:	00000049 	andeq	r0, r0, r9, asr #32
     410:	0f5c9102 	svceq	0x005c9102
     414:	01007a73 	tsteq	r0, r3, ror sl
     418:	0000540c 	andeq	r5, r0, ip, lsl #8
     41c:	00004b00 	andeq	r4, r0, r0, lsl #22
     420:	81a01000 	movhi	r1, r0
     424:	01740000 	cmneq	r4, r0
     428:	01360000 	teqeq	r6, r0
     42c:	01110000 	tsteq	r1, r0
     430:	4c910253 	lfmmi	f0, 4, [r1], {83}	; 0x53
     434:	03520111 	cmpeq	r2, #1073741828	; 0x40000004
     438:	11064891 			; <UNDEFINED> instruction: 0x11064891
     43c:	0a035101 	beq	d4848 <__bss_end__+0xc9f68>
     440:	01110400 	tsteq	r1, r0, lsl #8
     444:	00740250 	rsbseq	r0, r4, r0, asr r2
     448:	81b41200 			; <UNDEFINED> instruction: 0x81b41200
     44c:	01110000 	tsteq	r1, r0
     450:	00740250 	rsbseq	r0, r4, r0, asr r2
     454:	a7130000 	ldrge	r0, [r3, -r0]
     458:	54000000 	strpl	r0, [r0], #-0
     45c:	14000001 	strne	r0, [r0], #-1
     460:	0000009a 	muleq	r0, sl, r0
     464:	150003ff 	strne	r0, [r0, #-1023]	; 0x3ff
     468:	00000054 	andeq	r0, r0, r4, asr r0
     46c:	00000163 	andeq	r0, r0, r3, ror #2
     470:	0000ae16 	andeq	sl, r0, r6, lsl lr
     474:	a7170000 	ldrge	r0, [r7, -r0]
     478:	04000002 	streq	r0, [r0], #-2
     47c:	00016e22 	andeq	r6, r1, r2, lsr #28
     480:	54040800 	strpl	r0, [r4], #-2048	; 0x800
     484:	18000001 	stmdane	r0, {r0}
     488:	000001f7 	strdeq	r0, [r0], -r7
     48c:	00540205 	subseq	r0, r4, r5, lsl #4
     490:	a1160000 	tstge	r6, r0
     494:	16000000 	strne	r0, [r0], -r0
     498:	00000054 	andeq	r0, r0, r4, asr r0
     49c:	0000ae16 	andeq	sl, r0, r6, lsl lr
     4a0:	00491600 	subeq	r1, r9, r0, lsl #12
     4a4:	00000000 	andeq	r0, r0, r0
     4a8:	00000113 	andeq	r0, r0, r3, lsl r1
     4ac:	02900004 	addseq	r0, r0, #4
     4b0:	01040000 	mrseq	r0, (UNDEF: 4)
     4b4:	0000000b 	andeq	r0, r0, fp
     4b8:	00027601 	andeq	r7, r2, r1, lsl #12
     4bc:	00020b00 	andeq	r0, r2, r0, lsl #22
     4c0:	0081d000 	addeq	sp, r1, r0
     4c4:	00003c00 	andeq	r3, r0, r0, lsl #24
     4c8:	00021300 	andeq	r1, r2, r0, lsl #6
     4cc:	05040200 	streq	r0, [r4, #-512]	; 0x200
     4d0:	00746e69 	rsbseq	r6, r4, r9, ror #28
     4d4:	57070403 	strpl	r0, [r7, -r3, lsl #8]
     4d8:	03000001 	movweq	r0, #1
     4dc:	00840601 	addeq	r0, r4, r1, lsl #12
     4e0:	02030000 	andeq	r0, r3, #0
     4e4:	00019d05 	andeq	r9, r1, r5, lsl #26
     4e8:	05040300 	streq	r0, [r4, #-768]	; 0x300
     4ec:	00000189 	andeq	r0, r0, r9, lsl #3
     4f0:	84050803 	strhi	r0, [r5], #-2051	; 0x803
     4f4:	03000001 	movweq	r0, #1
     4f8:	00820801 	addeq	r0, r2, r1, lsl #16
     4fc:	02030000 	andeq	r0, r3, #0
     500:	0000a607 	andeq	sl, r0, r7, lsl #12
     504:	07040300 	streq	r0, [r4, -r0, lsl #6]
     508:	00000152 	andeq	r0, r0, r2, asr r1
     50c:	4d070803 	stcmi	8, cr0, [r7, #-12]
     510:	03000001 	movweq	r0, #1
     514:	017b0704 	cmneq	fp, r4, lsl #14
     518:	01030000 	mrseq	r0, (UNDEF: 3)
     51c:	00008b08 	andeq	r8, r0, r8, lsl #22
     520:	02590400 	subseq	r0, r9, #0, 8
     524:	03010000 	movweq	r0, #4096	; 0x1000
     528:	00000025 	andeq	r0, r0, r5, lsr #32
     52c:	000081d0 	ldrdeq	r8, [r0], -r0
     530:	00000014 	andeq	r0, r0, r4, lsl r0
     534:	00b09c01 	adcseq	r9, r0, r1, lsl #24
     538:	63050000 	movwvs	r0, #20480	; 0x5000
     53c:	25030100 	strcs	r0, [r3, #-256]	; 0x100
     540:	74000000 	strvc	r0, [r0], #-0
     544:	06000000 	streq	r0, [r0], -r0
     548:	000081dc 	ldrdeq	r8, [r0], -ip
     54c:	00000109 	andeq	r0, r0, r9, lsl #2
     550:	02500107 	subseq	r0, r0, #-1073741823	; 0xc0000001
     554:	00000074 	andeq	r0, r0, r4, ror r0
     558:	0001cb08 	andeq	ip, r1, r8, lsl #22
     55c:	e4080100 	str	r0, [r8], #-256	; 0x100
     560:	18000081 	stmdane	r0, {r0, r7}
     564:	01000000 	mrseq	r0, (UNDEF: 0)
     568:	0285099c 	addeq	r0, r5, #156, 18	; 0x270000
     56c:	0b010000 	bleq	40574 <__bss_end__+0x35c94>
     570:	000081fc 	strdeq	r8, [r0], -ip
     574:	00000010 	andeq	r0, r0, r0, lsl r0
     578:	00e39c01 	rsceq	r9, r3, r1, lsl #24
     57c:	660a0000 	strvs	r0, [sl], -r0
     580:	0b010070 	bleq	40748 <__bss_end__+0x35e68>
     584:	000000f2 	strdeq	r0, [r0], -r2
     588:	0b005001 	bleq	14594 <__bss_end__+0x9cb4>
     58c:	00000025 	andeq	r0, r0, r5, lsr #32
     590:	000000f2 	strdeq	r0, [r0], -r2
     594:	0000250c 	andeq	r2, r0, ip, lsl #10
     598:	040d0000 	streq	r0, [sp], #-0
     59c:	000000e3 	andeq	r0, r0, r3, ror #1
     5a0:	00026a0e 	andeq	r6, r2, lr, lsl #20
     5a4:	f2060100 	vrhadd.s8	d0, d6, d0
     5a8:	05000000 	streq	r0, [r0, #-0]
     5ac:	009da803 	addseq	sl, sp, r3, lsl #16
     5b0:	03da0f00 	bicseq	r0, sl, #0, 30
     5b4:	3c020000 	stccc	0, cr0, [r2], {-0}
     5b8:	00002c0c 	andeq	r2, r0, ip, lsl #24
     5bc:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
     5c0:	04000000 	streq	r0, [r0], #-0
     5c4:	00037800 	andeq	r7, r3, r0, lsl #16
     5c8:	0b010400 	bleq	415d0 <__bss_end__+0x36cf0>
     5cc:	01000000 	mrseq	r0, (UNDEF: 0)
     5d0:	00000292 	muleq	r0, r2, r2
     5d4:	0000020b 	andeq	r0, r0, fp, lsl #4
     5d8:	0000820c 	andeq	r8, r0, ip, lsl #4
     5dc:	00000034 	andeq	r0, r0, r4, lsr r0
     5e0:	000002a1 	andeq	r0, r0, r1, lsr #5
     5e4:	69050402 	stmdbvs	r5, {r1, sl}
     5e8:	0300746e 	movweq	r7, #1134	; 0x46e
     5ec:	01570704 	cmpeq	r7, r4, lsl #14
     5f0:	01030000 	mrseq	r0, (UNDEF: 3)
     5f4:	00008406 	andeq	r8, r0, r6, lsl #8
     5f8:	05020300 	streq	r0, [r2, #-768]	; 0x300
     5fc:	0000019d 	muleq	r0, sp, r1
     600:	89050403 	stmdbhi	r5, {r0, r1, sl}
     604:	03000001 	movweq	r0, #1
     608:	01840508 	orreq	r0, r4, r8, lsl #10
     60c:	01030000 	mrseq	r0, (UNDEF: 3)
     610:	00008208 	andeq	r8, r0, r8, lsl #4
     614:	07020300 	streq	r0, [r2, -r0, lsl #6]
     618:	000000a6 	andeq	r0, r0, r6, lsr #1
     61c:	52070403 	andpl	r0, r7, #50331648	; 0x3000000
     620:	03000001 	movweq	r0, #1
     624:	014d0708 	cmpeq	sp, r8, lsl #14
     628:	04030000 	streq	r0, [r3], #-0
     62c:	00017b07 	andeq	r7, r1, r7, lsl #22
     630:	08010300 	stmdaeq	r1, {r8, r9}
     634:	0000008b 	andeq	r0, r0, fp, lsl #1
     638:	007f0404 	rsbseq	r0, pc, r4, lsl #8
     63c:	72050000 	andvc	r0, r5, #0
     640:	06000000 	streq	r0, [r0], -r0
     644:	0000029e 	muleq	r0, lr, r2
     648:	00250401 	eoreq	r0, r5, r1, lsl #8
     64c:	820c0000 	andhi	r0, ip, #0
     650:	00340000 	eorseq	r0, r4, r0
     654:	9c010000 	stcls	0, cr0, [r1], {-0}
     658:	000000ab 	andeq	r0, r0, fp, lsr #1
     65c:	01007007 	tsteq	r0, r7
     660:	00007904 	andeq	r7, r0, r4, lsl #18
     664:	00009200 	andeq	r9, r0, r0, lsl #4
     668:	25080000 	strcs	r0, [r8, #-0]
     66c:	ba000000 	blt	674 <_start-0x798c>
     670:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     674:	00000025 	andeq	r0, r0, r5, lsr #32
     678:	026a0a00 	rsbeq	r0, sl, #0, 20
     67c:	1d020000 	stcne	0, cr0, [r2, #-0]
     680:	000000c5 	andeq	r0, r0, r5, asr #1
     684:	00ab0404 	adceq	r0, fp, r4, lsl #8
     688:	25080000 	strcs	r0, [r8, #-0]
     68c:	da000000 	ble	694 <_start-0x796c>
     690:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     694:	00000079 	andeq	r0, r0, r9, ror r0
     698:	02a70b00 	adceq	r0, r7, #0, 22
     69c:	0c010000 	stceq	0, cr0, [r1], {-0}
     6a0:	000000eb 	andeq	r0, r0, fp, ror #1
     6a4:	9dac0305 	stcls	3, cr0, [ip, #20]!
     6a8:	04040000 	streq	r0, [r4], #-0
     6ac:	000000cb 	andeq	r0, r0, fp, asr #1
     6b0:	00068100 	andeq	r8, r6, r0, lsl #2
     6b4:	11000400 	tstne	r0, r0, lsl #8
     6b8:	04000004 	streq	r0, [r0], #-4
     6bc:	00000b01 	andeq	r0, r0, r1, lsl #22
     6c0:	02d80100 	sbcseq	r0, r8, #0, 2
     6c4:	020b0000 	andeq	r0, fp, #0
     6c8:	82400000 	subhi	r0, r0, #0
     6cc:	04f80000 	ldrbteq	r0, [r8], #0
     6d0:	033b0000 	teqeq	fp, #0
     6d4:	04020000 	streq	r0, [r2], #-0
     6d8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
     6dc:	07040300 	streq	r0, [r4, -r0, lsl #6]
     6e0:	00000157 	andeq	r0, r0, r7, asr r1
     6e4:	84060103 	strhi	r0, [r6], #-259	; 0x103
     6e8:	03000000 	movweq	r0, #0
     6ec:	019d0502 	orrseq	r0, sp, r2, lsl #10
     6f0:	04030000 	streq	r0, [r3], #-0
     6f4:	00018905 	andeq	r8, r1, r5, lsl #18
     6f8:	05080300 	streq	r0, [r8, #-768]	; 0x300
     6fc:	00000184 	andeq	r0, r0, r4, lsl #3
     700:	82080103 	andhi	r0, r8, #-1073741824	; 0xc0000000
     704:	03000000 	movweq	r0, #0
     708:	00a60702 	adceq	r0, r6, r2, lsl #14
     70c:	04030000 	streq	r0, [r3], #-0
     710:	00015207 	andeq	r5, r1, r7, lsl #4
     714:	07080300 	streq	r0, [r8, -r0, lsl #6]
     718:	0000014d 	andeq	r0, r0, sp, asr #2
     71c:	7b070403 	blvc	1c1730 <__bss_end__+0x1b6e50>
     720:	04000001 	streq	r0, [r0], #-1
     724:	7a040504 	bvc	101b3c <__bss_end__+0xf725c>
     728:	03000000 	movweq	r0, #0
     72c:	008b0801 	addeq	r0, fp, r1, lsl #16
     730:	04050000 	streq	r0, [r5], #-0
     734:	00000087 	andeq	r0, r0, r7, lsl #1
     738:	00007a06 	andeq	r7, r0, r6, lsl #20
     73c:	01da0700 	bicseq	r0, sl, r0, lsl #14
     740:	28020000 	stmdacs	r2, {}	; <UNPREDICTABLE>
     744:	00000097 	muleq	r0, r7, r0
     748:	00020108 	andeq	r0, r2, r8, lsl #2
     74c:	00040400 	andeq	r0, r4, r0, lsl #8
     750:	000000ae 	andeq	r0, r0, lr, lsr #1
     754:	00025409 	andeq	r5, r2, r9, lsl #8
     758:	00007200 	andeq	r7, r0, r0, lsl #4
     75c:	07000000 	streq	r0, [r0, -r0]
     760:	00000203 	andeq	r0, r0, r3, lsl #4
     764:	008c6202 	addeq	r6, ip, r2, lsl #4
     768:	ba0a0000 	blt	280770 <__bss_end__+0x275e90>
     76c:	01000002 	tsteq	r0, r2
     770:	00002527 	andeq	r2, r0, r7, lsr #10
     774:	00824000 	addeq	r4, r2, r0
     778:	00001400 	andeq	r1, r0, r0, lsl #8
     77c:	e09c0100 	adds	r0, ip, r0, lsl #2
     780:	0b000000 	bleq	788 <_start-0x7878>
     784:	27010063 	strcs	r0, [r1, -r3, rrx]
     788:	00000025 	andeq	r0, r0, r5, lsr #32
     78c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     790:	61700c00 	cmnvs	r0, r0, lsl #24
     794:	2e010064 	cdpcs	0, 0, cr0, cr1, cr4, {3}
     798:	00000074 	andeq	r0, r0, r4, ror r0
     79c:	00008254 	andeq	r8, r0, r4, asr r2
     7a0:	0000002c 	andeq	r0, r0, ip, lsr #32
     7a4:	01309c01 	teqeq	r0, r1, lsl #24
     7a8:	700b0000 	andvc	r0, fp, r0
     7ac:	742e0100 	strtvc	r0, [lr], #-256	; 0x100
     7b0:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
     7b4:	0d000000 	stceq	0, cr0, [r0, #-0]
     7b8:	000002ca 	andeq	r0, r0, sl, asr #5
     7bc:	00742e01 	rsbseq	r2, r4, r1, lsl #28
     7c0:	01090000 	mrseq	r0, (UNDEF: 9)
     7c4:	f80e0000 			; <UNDEFINED> instruction: 0xf80e0000
     7c8:	01000002 	tsteq	r0, r2
     7cc:	0000252e 	andeq	r2, r0, lr, lsr #10
     7d0:	0f520100 	svceq	0x00520100
     7d4:	006e656c 	rsbeq	r6, lr, ip, ror #10
     7d8:	00252f01 	eoreq	r2, r5, r1, lsl #30
     7dc:	51010000 	mrspl	r0, (UNDEF: 1)
     7e0:	02b20a00 	adcseq	r0, r2, #0, 20
     7e4:	37010000 	strcc	r0, [r1, -r0]
     7e8:	00000074 	andeq	r0, r0, r4, ror r0
     7ec:	00008280 	andeq	r8, r0, r0, lsl #5
     7f0:	00000040 	andeq	r0, r0, r0, asr #32
     7f4:	019c9c01 	orrseq	r9, ip, r1, lsl #24
     7f8:	640b0000 	strvs	r0, [fp], #-0
     7fc:	01007473 	tsteq	r0, r3, ror r4
     800:	00007437 	andeq	r7, r0, r7, lsr r4
     804:	00012a00 	andeq	r2, r1, r0, lsl #20
     808:	006e0b00 	rsbeq	r0, lr, r0, lsl #22
     80c:	00253701 	eoreq	r3, r5, r1, lsl #14
     810:	01620000 	cmneq	r2, r0
     814:	700b0000 	andvc	r0, fp, r0
     818:	74370100 	ldrtvc	r0, [r7], #-256	; 0x100
     81c:	83000000 	movwhi	r0, #0
     820:	0d000001 	stceq	0, cr0, [r0, #-4]
     824:	00000124 	andeq	r0, r0, r4, lsr #2
     828:	00743701 	rsbseq	r3, r4, r1, lsl #14
     82c:	01b90000 			; <UNDEFINED> instruction: 0x01b90000
     830:	6c100000 	ldcvs	0, cr0, [r0], {-0}
     834:	01006e65 	tsteq	r0, r5, ror #28
     838:	00002539 	andeq	r2, r0, r9, lsr r5
     83c:	0001d700 	andeq	sp, r1, r0, lsl #14
     840:	00730f00 	rsbseq	r0, r3, r0, lsl #30
     844:	00743d01 	rsbseq	r3, r4, r1, lsl #26
     848:	50010000 	andpl	r0, r1, r0
     84c:	03060a00 	movweq	r0, #27136	; 0x6a00
     850:	47010000 	strmi	r0, [r1, -r0]
     854:	00000074 	andeq	r0, r0, r4, ror r0
     858:	000082c0 	andeq	r8, r0, r0, asr #5
     85c:	0000019c 	muleq	r0, ip, r1
     860:	02d39c01 	sbcseq	r9, r3, #256	; 0x100
     864:	ca0d0000 	bgt	34086c <__bss_end__+0x335f8c>
     868:	01000002 	tsteq	r0, r2
     86c:	00002c47 	andeq	r2, r0, r7, asr #24
     870:	0001fe00 	andeq	pc, r1, r0, lsl #28
     874:	73640b00 	cmnvc	r4, #0, 22
     878:	47010074 	smlsdxmi	r1, r4, r0, r0
     87c:	00000074 	andeq	r0, r0, r4, ror r0
     880:	0000022c 	andeq	r0, r0, ip, lsr #4
     884:	01006e0b 	tsteq	r0, fp, lsl #28
     888:	00002547 	andeq	r2, r0, r7, asr #10
     88c:	00029a00 	andeq	r9, r2, r0, lsl #20
     890:	61760b00 	cmnvs	r6, r0, lsl #22
     894:	4701006c 	strmi	r0, [r1, -ip, rrx]
     898:	00000025 	andeq	r0, r0, r5, lsr #32
     89c:	000002c6 	andeq	r0, r0, r6, asr #5
     8a0:	0002f80d 	andeq	pc, r2, sp, lsl #16
     8a4:	25470100 	strbcs	r0, [r7, #-256]	; 0x100
     8a8:	45000000 	strmi	r0, [r0, #-0]
     8ac:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
     8b0:	000002cf 	andeq	r0, r0, pc, asr #5
     8b4:	00254701 	eoreq	r4, r5, r1, lsl #14
     8b8:	91020000 	mrsls	r0, (UNDEF: 2)
     8bc:	75620f04 	strbvc	r0, [r2, #-3844]!	; 0xf04
     8c0:	4c010066 	stcmi	0, cr0, [r1], {102}	; 0x66
     8c4:	000002d3 	ldrdeq	r0, [r0], -r3
     8c8:	7fa89103 	svcvc	0x00a89103
     8cc:	01007010 	tsteq	r0, r0, lsl r0
     8d0:	0000744c 	andeq	r7, r0, ip, asr #8
     8d4:	00036f00 	andeq	r6, r3, r0, lsl #30
     8d8:	00751000 	rsbseq	r1, r5, r0
     8dc:	002c4d01 	eoreq	r4, ip, r1, lsl #26
     8e0:	04140000 	ldreq	r0, [r4], #-0
     8e4:	32110000 	andscc	r0, r1, #0
     8e8:	f3000001 	vhadd.u8	d0, d0, d1
     8ec:	05000002 	streq	r0, [r0, #-2]
     8f0:	009eb003 	addseq	fp, lr, r3
     8f4:	832c1200 	teqhi	ip, #0, 4
     8f8:	00740000 	rsbseq	r0, r4, r0
     8fc:	02610000 	rsbeq	r0, r1, #0
     900:	ac130000 	ldcge	0, cr0, [r3], {-0}
     904:	01000002 	tsteq	r0, r2
     908:	00002c52 	andeq	r2, r0, r2, asr ip
     90c:	00051900 	andeq	r1, r5, r0, lsl #18
     910:	00140000 	andseq	r0, r4, r0
     914:	60000084 	andvs	r0, r0, r4, lsl #1
     918:	15000006 	strne	r0, [r0, #-6]
     91c:	00008414 	andeq	r8, r0, r4, lsl r4
     920:	00000667 	andeq	r0, r0, r7, ror #12
     924:	00000299 	muleq	r0, r9, r2
     928:	02530116 	subseq	r0, r3, #-2147483643	; 0x80000005
     92c:	01167508 	tsteq	r6, r8, lsl #10
     930:	b0030552 	andlt	r0, r3, r2, asr r5
     934:	1600009e 			; <UNDEFINED> instruction: 0x1600009e
     938:	03055101 	movweq	r5, #20737	; 0x5101
     93c:	00009ee8 	andeq	r9, r0, r8, ror #29
     940:	05500116 	ldrbeq	r0, [r0, #-278]	; 0x116
     944:	009ed403 	addseq	sp, lr, r3, lsl #8
     948:	18140000 	ldmdane	r4, {}	; <UNPREDICTABLE>
     94c:	7d000084 	stcvc	0, cr0, [r0, #-528]	; 0xfffffdf0
     950:	15000006 	strne	r0, [r0, #-6]
     954:	00008424 	andeq	r8, r0, r4, lsr #8
     958:	000000e0 	andeq	r0, r0, r0, ror #1
     95c:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
     960:	02510116 	subseq	r0, r1, #-2147483643	; 0x80000005
     964:	1700007d 	smlsdxne	r0, sp, r0, r0
     968:	00008438 	andeq	r8, r0, r8, lsr r4
     96c:	00000130 	andeq	r0, r0, r0, lsr r1
     970:	02530116 	subseq	r0, r3, #-2147483643	; 0x80000005
     974:	0116007d 	tsteq	r6, sp, ror r0
     978:	00740251 	rsbseq	r0, r4, r1, asr r2
     97c:	02500116 	subseq	r0, r0, #-2147483643	; 0x80000005
     980:	00000075 	andeq	r0, r0, r5, ror r0
     984:	00007a18 	andeq	r7, r0, r8, lsl sl
     988:	0002e300 	andeq	lr, r2, r0, lsl #6
     98c:	006b1900 	rsbeq	r1, fp, r0, lsl #18
     990:	003f0000 	eorseq	r0, pc, r0
     994:	00007a18 	andeq	r7, r0, r8, lsl sl
     998:	0002f300 	andeq	pc, r2, r0, lsl #6
     99c:	006b1900 	rsbeq	r1, fp, r0, lsl #18
     9a0:	00040000 	andeq	r0, r4, r0
     9a4:	0002e306 	andeq	lr, r2, r6, lsl #6
     9a8:	02e91a00 	rsceq	r1, r9, #0, 20
     9ac:	1f010000 	svcne	0x00010000
     9b0:	0000845c 	andeq	r8, r0, ip, asr r4
     9b4:	00000054 	andeq	r0, r0, r4, asr r0
     9b8:	037c9c01 	cmneq	ip, #256	; 0x100
     9bc:	fe0d0000 	cdp2	0, 0, cr0, cr13, cr0, {0}
     9c0:	01000002 	tsteq	r0, r2
     9c4:	00038b1f 	andeq	r8, r3, pc, lsl fp
     9c8:	00054500 	andeq	r4, r5, r0, lsl #10
     9cc:	02c20d00 	sbceq	r0, r2, #0, 26
     9d0:	1f010000 	svcne	0x00010000
     9d4:	000003a0 	andeq	r0, r0, r0, lsr #7
     9d8:	00000571 	andeq	r0, r0, r1, ror r5
     9dc:	00013211 	andeq	r3, r1, r1, lsl r2
     9e0:	0003b600 	andeq	fp, r3, r0, lsl #12
     9e4:	b8030500 	stmdalt	r3, {r8, sl}
     9e8:	1400009e 	strne	r0, [r0], #-158	; 0x9e
     9ec:	0000846c 	andeq	r8, r0, ip, ror #8
     9f0:	00000660 	andeq	r0, r0, r0, ror #12
     9f4:	00848015 	addeq	r8, r4, r5, lsl r0
     9f8:	00066700 	andeq	r6, r6, r0, lsl #14
     9fc:	00037200 	andeq	r7, r3, r0, lsl #4
     a00:	53011600 	movwpl	r1, #5632	; 0x1600
     a04:	16200802 	strtne	r0, [r0], -r2, lsl #16
     a08:	03055201 	movweq	r5, #20993	; 0x5201
     a0c:	00009eb8 			; <UNDEFINED> instruction: 0x00009eb8
     a10:	05510116 	ldrbeq	r0, [r1, #-278]	; 0x116
     a14:	009ee803 	addseq	lr, lr, r3, lsl #16
     a18:	50011600 	andpl	r1, r1, r0, lsl #12
     a1c:	9f200305 	svcls	0x00200305
     a20:	14000000 	strne	r0, [r0], #-0
     a24:	00008484 	andeq	r8, r0, r4, lsl #9
     a28:	0000067d 	andeq	r0, r0, sp, ror r6
     a2c:	00251b00 	eoreq	r1, r5, r0, lsl #22
     a30:	038b0000 	orreq	r0, fp, #0
     a34:	251c0000 	ldrcs	r0, [ip, #-0]
     a38:	00000000 	andeq	r0, r0, r0
     a3c:	037c0405 	cmneq	ip, #83886080	; 0x5000000
     a40:	251b0000 	ldrcs	r0, [fp, #-0]
     a44:	a0000000 	andge	r0, r0, r0
     a48:	1c000003 	stcne	0, cr0, [r0], {3}
     a4c:	00000081 	andeq	r0, r0, r1, lsl #1
     a50:	91040500 	tstls	r4, r0, lsl #10
     a54:	18000003 	stmdane	r0, {r0, r1}
     a58:	0000007a 	andeq	r0, r0, sl, ror r0
     a5c:	000003b6 			; <UNDEFINED> instruction: 0x000003b6
     a60:	00006b19 	andeq	r6, r0, r9, lsl fp
     a64:	06000e00 	streq	r0, [r0], -r0, lsl #28
     a68:	000003a6 	andeq	r0, r0, r6, lsr #7
     a6c:	0001f71d 	andeq	pc, r1, sp, lsl r7	; <UNPREDICTABLE>
     a70:	257d0100 	ldrbcs	r0, [sp, #-256]!	; 0x100
     a74:	b0000000 	andlt	r0, r0, r0
     a78:	88000084 	stmdahi	r0, {r2, r7}
     a7c:	01000002 	tsteq	r0, r2
     a80:	0006259c 	muleq	r6, ip, r5
     a84:	75620b00 	strbvc	r0, [r2, #-2816]!	; 0xb00
     a88:	7d010066 	stcvc	0, cr0, [r1, #-408]	; 0xfffffe68
     a8c:	00000074 	andeq	r0, r0, r4, ror r0
     a90:	0000059d 	muleq	r0, sp, r5
     a94:	01006e0b 	tsteq	r0, fp, lsl #28
     a98:	0000257d 	andeq	r2, r0, sp, ror r5
     a9c:	0005c900 	andeq	ip, r5, r0, lsl #18
     aa0:	6d660b00 	vstmdbvs	r6!, {d16-d15}
     aa4:	7d010074 	stcvc	0, cr0, [r1, #-464]	; 0xfffffe30
     aa8:	00000081 	andeq	r0, r0, r1, lsl #1
     aac:	000005f7 	strdeq	r0, [r0], -r7
     ab0:	00024f0d 	andeq	r4, r2, sp, lsl #30
     ab4:	ae7d0100 	rpwgee	f0, f5, f0
     ab8:	2b000000 	blcs	ac0 <_start-0x7540>
     abc:	10000006 	andne	r0, r0, r6
     ac0:	7e010070 	mcrvc	0, 0, r0, cr1, cr0, {3}
     ac4:	00000074 	andeq	r0, r0, r4, ror r0
     ac8:	0000063e 	andeq	r0, r0, lr, lsr r6
     acc:	01006510 	tsteq	r0, r0, lsl r5
     ad0:	0000747e 	andeq	r7, r0, lr, ror r4
     ad4:	0006bc00 	andeq	fp, r6, r0, lsl #24
     ad8:	01321100 	teqeq	r2, r0, lsl #2
     adc:	06350000 	ldrteq	r0, [r5], -r0
     ae0:	03050000 	movweq	r0, #20480	; 0x5000
     ae4:	00009ec8 	andeq	r9, r0, r8, asr #29
     ae8:	0000001e 	andeq	r0, r0, lr, lsl r0
     aec:	00731000 	rsbseq	r1, r3, r0
     af0:	00748b01 	rsbseq	r8, r4, r1, lsl #22
     af4:	06e30000 	strbteq	r0, [r3], r0
     af8:	6e0f0000 	cdpvs	0, 0, cr0, cr15, cr0, {0}
     afc:	01006d75 	tsteq	r0, r5, ror sp
     b00:	00063a8b 	andeq	r3, r6, fp, lsl #21
     b04:	d8910300 	ldmle	r1, {r8, r9}
     b08:	02f8137e 	rscseq	r1, r8, #-134217727	; 0xf8000001
     b0c:	8c010000 	stchi	0, cr0, [r1], {-0}
     b10:	0000002c 	andeq	r0, r0, ip, lsr #32
     b14:	00000738 	andeq	r0, r0, r8, lsr r7
     b18:	00853415 	addeq	r3, r5, r5, lsl r4
     b1c:	0000b900 	andeq	fp, r0, r0, lsl #18
     b20:	00047b00 	andeq	r7, r4, r0, lsl #22
     b24:	50011600 	andpl	r1, r1, r0, lsl #12
     b28:	00007502 	andeq	r7, r0, r2, lsl #10
     b2c:	00854814 	addeq	r4, r5, r4, lsl r8
     b30:	00066000 	andeq	r6, r6, r0
     b34:	855c1500 	ldrbhi	r1, [ip, #-1280]	; 0x500
     b38:	06670000 	strbteq	r0, [r7], -r0
     b3c:	04b30000 	ldrteq	r0, [r3], #0
     b40:	01160000 	tsteq	r6, r0
     b44:	92080253 	andls	r0, r8, #805306373	; 0x30000005
     b48:	05520116 	ldrbeq	r0, [r2, #-278]	; 0x116
     b4c:	009ec803 	addseq	ip, lr, r3, lsl #16
     b50:	51011600 	tstpl	r1, r0, lsl #12
     b54:	9ee80305 	cdpls	3, 14, cr0, cr8, cr5, {0}
     b58:	01160000 	tsteq	r6, r0
     b5c:	38030550 	stmdacc	r3, {r4, r6, r8, sl}
     b60:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     b64:	00856014 	addeq	r6, r5, r4, lsl r0
     b68:	00067d00 	andeq	r7, r6, r0, lsl #26
     b6c:	85d01400 	ldrbhi	r1, [r0, #1024]	; 0x400
     b70:	06600000 	strbteq	r0, [r0], -r0
     b74:	e4150000 	ldr	r0, [r5], #-0
     b78:	67000085 	strvs	r0, [r0, -r5, lsl #1]
     b7c:	f4000006 	vst4.8	{d0-d3}, [r0], r6
     b80:	16000004 	strne	r0, [r0], -r4
     b84:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     b88:	52011698 	andpl	r1, r1, #152, 12	; 0x9800000
     b8c:	9ec80305 	cdpls	3, 12, cr0, cr8, cr5, {0}
     b90:	01160000 	tsteq	r6, r0
     b94:	e8030551 	stmda	r3, {r0, r4, r6, r8, sl}
     b98:	1600009e 			; <UNDEFINED> instruction: 0x1600009e
     b9c:	03055001 	movweq	r5, #20481	; 0x5001
     ba0:	00009f54 	andeq	r9, r0, r4, asr pc
     ba4:	85e81400 	strbhi	r1, [r8, #1024]!	; 0x400
     ba8:	067d0000 	ldrbteq	r0, [sp], -r0
     bac:	0c150000 	ldceq	0, cr0, [r5], {-0}
     bb0:	9c000086 	stcls	0, cr0, [r0], {134}	; 0x86
     bb4:	2a000001 	bcs	bc0 <_start-0x7440>
     bb8:	16000005 	strne	r0, [r0], -r5
     bbc:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
     bc0:	51011680 	smlabbpl	r1, r0, r6, r1
     bc4:	7ed09103 	atnvcs	f1, f3
     bc8:	01500116 	cmpeq	r0, r6, lsl r1
     bcc:	7d02163a 	stcvc	6, cr1, [r2, #-232]	; 0xffffff18
     bd0:	16310104 	ldrtne	r0, [r1], -r4, lsl #2
     bd4:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
     bd8:	15000077 	strne	r0, [r0, #-119]	; 0x77
     bdc:	00008630 	andeq	r8, r0, r0, lsr r6
     be0:	0000019c 	muleq	r0, ip, r1
     be4:	00000558 	andeq	r0, r0, r8, asr r5
     be8:	02520116 	subseq	r0, r2, #-2147483643	; 0x80000005
     bec:	01168008 	tsteq	r6, r8
     bf0:	d0910351 	addsle	r0, r1, r1, asr r3
     bf4:	5001167e 	andpl	r1, r1, lr, ror r6
     bf8:	02163a01 	andseq	r3, r6, #4096	; 0x1000
     bfc:	7b02047d 	blvc	81df8 <__bss_end__+0x77518>
     c00:	7d021600 	stcvc	6, cr1, [r2, #-0]
     c04:	00770200 	rsbseq	r0, r7, r0, lsl #4
     c08:	86541500 	ldrbhi	r1, [r4], -r0, lsl #10
     c0c:	019c0000 	orrseq	r0, ip, r0
     c10:	05860000 	streq	r0, [r6]
     c14:	01160000 	tsteq	r6, r0
     c18:	80080252 	andhi	r0, r8, r2, asr r2
     c1c:	03510116 	cmpeq	r1, #-2147483643	; 0x80000005
     c20:	167ed091 			; <UNDEFINED> instruction: 0x167ed091
     c24:	40015001 	andmi	r5, r1, r1
     c28:	047d0216 	ldrbteq	r0, [sp], #-534	; 0x216
     c2c:	16007b02 	strne	r7, [r0], -r2, lsl #22
     c30:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
     c34:	15000077 	strne	r0, [r0, #-119]	; 0x77
     c38:	00008678 	andeq	r8, r0, r8, ror r6
     c3c:	0000019c 	muleq	r0, ip, r1
     c40:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     c44:	02520116 	subseq	r0, r2, #-2147483643	; 0x80000005
     c48:	01168008 	tsteq	r6, r8
     c4c:	d0910351 	addsle	r0, r1, r1, asr r3
     c50:	5001167e 	andpl	r1, r1, lr, ror r6
     c54:	02163201 	andseq	r3, r6, #268435456	; 0x10000000
     c58:	7b02047d 	blvc	81e54 <__bss_end__+0x77574>
     c5c:	7d021600 	stcvc	6, cr1, [r2, #-0]
     c60:	00770200 	rsbseq	r0, r7, r0, lsl #4
     c64:	86a81500 	strthi	r1, [r8], r0, lsl #10
     c68:	019c0000 	orrseq	r0, ip, r0
     c6c:	05e20000 	strbeq	r0, [r2, #0]!
     c70:	01160000 	tsteq	r6, r0
     c74:	80080252 	andhi	r0, r8, r2, asr r2
     c78:	03510116 	cmpeq	r1, #-2147483643	; 0x80000005
     c7c:	167ed091 			; <UNDEFINED> instruction: 0x167ed091
     c80:	38015001 	stmdacc	r1, {r0, ip, lr}
     c84:	047d0216 	ldrbteq	r0, [sp], #-534	; 0x216
     c88:	16007b02 	strne	r7, [r0], -r2, lsl #22
     c8c:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
     c90:	14000077 	strne	r0, [r0], #-119	; 0x77
     c94:	000086b0 			; <UNDEFINED> instruction: 0x000086b0
     c98:	00000660 	andeq	r0, r0, r0, ror #12
     c9c:	0086cc15 	addeq	ip, r6, r5, lsl ip
     ca0:	00066700 	andeq	r6, r6, r0, lsl #14
     ca4:	00061a00 	andeq	r1, r6, r0, lsl #20
     ca8:	53011600 	movwpl	r1, #5632	; 0x1600
     cac:	16b90802 	ldrtne	r0, [r9], r2, lsl #16
     cb0:	03055201 	movweq	r5, #20993	; 0x5201
     cb4:	00009ec8 	andeq	r9, r0, r8, asr #29
     cb8:	05510116 	ldrbeq	r0, [r1, #-278]	; 0x116
     cbc:	009ee803 	addseq	lr, lr, r3, lsl #16
     cc0:	50011600 	andpl	r1, r1, r0, lsl #12
     cc4:	9f7c0305 	svcls	0x007c0305
     cc8:	14000000 	strne	r0, [r0], #-0
     ccc:	000086d0 	ldrdeq	r8, [r0], -r0
     cd0:	0000067d 	andeq	r0, r0, sp, ror r6
     cd4:	7a180000 	bvc	600cdc <__bss_end__+0x5f63fc>
     cd8:	35000000 	strcc	r0, [r0, #-0]
     cdc:	19000006 	stmdbne	r0, {r1, r2}
     ce0:	0000006b 	andeq	r0, r0, fp, rrx
     ce4:	25060009 	strcs	r0, [r6, #-9]
     ce8:	18000006 	stmdane	r0, {r1, r2}
     cec:	0000007a 	andeq	r0, r0, sl, ror r0
     cf0:	0000064a 	andeq	r0, r0, sl, asr #12
     cf4:	00006b19 	andeq	r6, r0, r9, lsl fp
     cf8:	1f007f00 	svcne	0x00007f00
     cfc:	0000026a 	andeq	r0, r0, sl, ror #4
     d00:	038b1d03 	orreq	r1, fp, #3, 26	; 0xc0
     d04:	a71f0000 	ldrge	r0, [pc, -r0]
     d08:	03000002 	movweq	r0, #2
     d0c:	0003a022 	andeq	sl, r3, r2, lsr #32
     d10:	01cb2000 	biceq	r2, fp, r0
     d14:	1e030000 	cdpne	0, 0, cr0, cr3, cr0, {0}
     d18:	0001fa21 	andeq	pc, r1, r1, lsr #20
     d1c:	25290300 	strcs	r0, [r9, #-768]!	; 0x300
     d20:	7d000000 	stcvc	0, cr0, [r0, #-0]
     d24:	1c000006 	stcne	0, cr0, [r0], {6}
     d28:	00000081 	andeq	r0, r0, r1, lsl #1
     d2c:	90200022 	eorls	r0, r0, r2, lsr #32
     d30:	03000000 	movweq	r0, #0
     d34:	00ff0066 	rscseq	r0, pc, r6, rrx
     d38:	00040000 	andeq	r0, r4, r0
     d3c:	000005ed 	andeq	r0, r0, sp, ror #11
     d40:	000b0104 	andeq	r0, fp, r4, lsl #2
     d44:	16010000 	strne	r0, [r1], -r0
     d48:	0b000003 	bleq	d5c <_start-0x72a4>
     d4c:	38000002 	stmdacc	r0, {r1}
     d50:	28000087 	stmdacs	r0, {r0, r1, r2, r7}
     d54:	1d000000 	stcne	0, cr0, [r0, #-0]
     d58:	02000005 	andeq	r0, r0, #5
     d5c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     d60:	04030074 	streq	r0, [r3], #-116	; 0x74
     d64:	00015707 	andeq	r5, r1, r7, lsl #14
     d68:	06010300 	streq	r0, [r1], -r0, lsl #6
     d6c:	00000084 	andeq	r0, r0, r4, lsl #1
     d70:	9d050203 	sfmls	f0, 4, [r5, #-12]
     d74:	03000001 	movweq	r0, #1
     d78:	01890504 	orreq	r0, r9, r4, lsl #10
     d7c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     d80:	00018405 	andeq	r8, r1, r5, lsl #8
     d84:	08010300 	stmdaeq	r1, {r8, r9}
     d88:	00000082 	andeq	r0, r0, r2, lsl #1
     d8c:	a6070203 	strge	r0, [r7], -r3, lsl #4
     d90:	03000000 	movweq	r0, #0
     d94:	01520704 	cmpeq	r2, r4, lsl #14
     d98:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     d9c:	00014d07 	andeq	r4, r1, r7, lsl #26
     da0:	07040300 	streq	r0, [r4, -r0, lsl #6]
     da4:	0000017b 	andeq	r0, r0, fp, ror r1
     da8:	8b080103 	blhi	2011bc <__bss_end__+0x1f68dc>
     dac:	04000000 	streq	r0, [r0], #-0
     db0:	00007f04 	andeq	r7, r0, r4, lsl #30
     db4:	00720500 	rsbseq	r0, r2, r0, lsl #10
     db8:	90060000 	andls	r0, r6, r0
     dbc:	01000000 	mrseq	r0, (UNDEF: 0)
     dc0:	00873804 	addeq	r3, r7, r4, lsl #16
     dc4:	00002800 	andeq	r2, r0, r0, lsl #16
     dc8:	ca9c0100 	bgt	fe7011d0 <__bss_end__+0xfe6f68f0>
     dcc:	07000000 	streq	r0, [r0, -r0]
     dd0:	0000874c 	andeq	r8, r0, ip, asr #14
     dd4:	000000ac 	andeq	r0, r0, ip, lsr #1
     dd8:	05500108 	ldrbeq	r0, [r0, #-264]	; 0x108
     ddc:	009fb403 	addseq	fp, pc, r3, lsl #8
     de0:	54090000 	strpl	r0, [r9], #-0
     de4:	ea000087 	b	1008 <_start-0x6ff8>
     de8:	c0000000 	andgt	r0, r0, r0
     dec:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     df0:	08025001 	stmdaeq	r2, {r0, ip, lr}
     df4:	580a0064 	stmdapl	sl, {r2, r5, r6}
     df8:	fb000087 	blx	101e <_start-0x6fe2>
     dfc:	00000000 	andeq	r0, r0, r0
     e00:	0000250b 	andeq	r2, r0, fp, lsl #10
     e04:	0000d900 	andeq	sp, r0, r0, lsl #18
     e08:	00790c00 	rsbseq	r0, r9, r0, lsl #24
     e0c:	0d000000 	stceq	0, cr0, [r0, #-0]
     e10:	000002a7 	andeq	r0, r0, r7, lsr #5
     e14:	00e42202 	rsceq	r2, r4, r2, lsl #4
     e18:	04040000 	streq	r0, [r4], #-0
     e1c:	000000ca 	andeq	r0, r0, sl, asr #1
     e20:	0003300e 	andeq	r3, r3, lr
     e24:	fb500200 	blx	140162e <__bss_end__+0x13f6d4e>
     e28:	0c000000 	stceq	0, cr0, [r0], {-0}
     e2c:	0000002c 	andeq	r0, r0, ip, lsr #32
     e30:	030b0f00 	movweq	r0, #48896	; 0xbf00
     e34:	63020000 	movwvs	r0, #8192	; 0x2000
     e38:	0002dd00 	andeq	sp, r2, r0, lsl #26
     e3c:	b7000400 	strlt	r0, [r0, -r0, lsl #8]
     e40:	04000006 	streq	r0, [r0], #-6
     e44:	00000b01 	andeq	r0, r0, r1, lsl #22
     e48:	041b0100 	ldreq	r0, [fp], #-256	; 0x100
     e4c:	020b0000 	andeq	r0, fp, #0
     e50:	87600000 	strbhi	r0, [r0, -r0]!
     e54:	00b00000 	adcseq	r0, r0, r0
     e58:	05b40000 	ldreq	r0, [r4, #0]!
     e5c:	04020000 	streq	r0, [r2], #-0
     e60:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
     e64:	07040300 	streq	r0, [r4, -r0, lsl #6]
     e68:	00000157 	andeq	r0, r0, r7, asr r1
     e6c:	84060103 	strhi	r0, [r6], #-259	; 0x103
     e70:	03000000 	movweq	r0, #0
     e74:	019d0502 	orrseq	r0, sp, r2, lsl #10
     e78:	04030000 	streq	r0, [r3], #-0
     e7c:	00018905 	andeq	r8, r1, r5, lsl #18
     e80:	05080300 	streq	r0, [r8, #-768]	; 0x300
     e84:	00000184 	andeq	r0, r0, r4, lsl #3
     e88:	0003e404 	andeq	lr, r3, r4, lsl #8
     e8c:	5a2e0200 	bpl	b81694 <__bss_end__+0xb76db4>
     e90:	03000000 	movweq	r0, #0
     e94:	00820801 	addeq	r0, r2, r1, lsl #16
     e98:	02030000 	andeq	r0, r3, #0
     e9c:	0000a607 	andeq	sl, r0, r7, lsl #12
     ea0:	01b50400 			; <UNDEFINED> instruction: 0x01b50400
     ea4:	34020000 	strcc	r0, [r2], #-0
     ea8:	00000073 	andeq	r0, r0, r3, ror r0
     eac:	52070403 	andpl	r0, r7, #50331648	; 0x3000000
     eb0:	03000001 	movweq	r0, #1
     eb4:	014d0708 	cmpeq	sp, r8, lsl #14
     eb8:	04030000 	streq	r0, [r3], #-0
     ebc:	00017b07 	andeq	r7, r1, r7, lsl #22
     ec0:	08010300 	stmdaeq	r1, {r8, r9}
     ec4:	0000008b 	andeq	r0, r0, fp, lsl #1
     ec8:	00950405 	addseq	r0, r5, r5, lsl #8
     ecc:	88060000 	stmdahi	r6, {}	; <UNPREDICTABLE>
     ed0:	07000000 	streq	r0, [r0, -r0]
     ed4:	d10e030c 	tstle	lr, ip, lsl #6
     ed8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     edc:	03007874 	movweq	r7, #2164	; 0x874
     ee0:	00004f0f 	andeq	r4, r0, pc, lsl #30
     ee4:	72080000 	andvc	r0, r8, #0
     ee8:	0f030078 	svceq	0x00030078
     eec:	0000004f 	andeq	r0, r0, pc, asr #32
     ef0:	03b20901 			; <UNDEFINED> instruction: 0x03b20901
     ef4:	10030000 	andne	r0, r3, r0
     ef8:	00000068 	andeq	r0, r0, r8, rrx
     efc:	03630904 	cmneq	r3, #4, 18	; 0x10000
     f00:	11030000 	mrsne	r0, (UNDEF: 3)
     f04:	00000068 	andeq	r0, r0, r8, rrx
     f08:	9b040008 	blls	100f30 <__bss_end__+0xf6650>
     f0c:	03000003 	movweq	r0, #3
     f10:	00009a12 	andeq	r9, r0, r2, lsl sl
     f14:	04010a00 	streq	r0, [r1], #-2560	; 0xa00
     f18:	0000f710 	andeq	pc, r0, r0, lsl r7	; <UNPREDICTABLE>
     f1c:	03b70b00 			; <UNDEFINED> instruction: 0x03b70b00
     f20:	0b010000 	bleq	40f28 <__bss_end__+0x36648>
     f24:	000003a5 	andeq	r0, r0, r5, lsr #7
     f28:	038d0b02 	orreq	r0, sp, #2048	; 0x800
     f2c:	00030000 	andeq	r0, r3, r0
     f30:	0003cc04 	andeq	ip, r3, r4, lsl #24
     f34:	dc100400 	cfldrsle	mvf0, [r0], {-0}
     f38:	07000000 	streq	r0, [r0, -r0]
     f3c:	2f140414 	svccs	0x00140414
     f40:	09000001 	stmdbeq	r0, {r0}
     f44:	0000043b 	andeq	r0, r0, fp, lsr r4
     f48:	002c1504 	eoreq	r1, ip, r4, lsl #10
     f4c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     f50:	0000042f 	andeq	r0, r0, pc, lsr #8
     f54:	00f71804 	rscseq	r1, r7, r4, lsl #16
     f58:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
     f5c:	000003fa 	strdeq	r0, [r0], -sl
     f60:	00d11b04 	sbcseq	r1, r1, r4, lsl #22
     f64:	00080000 	andeq	r0, r8, r0
     f68:	0003ec04 	andeq	lr, r3, r4, lsl #24
     f6c:	02200400 	eoreq	r0, r0, #0, 8
     f70:	0c000001 	stceq	0, cr0, [r0], {1}
     f74:	00000339 	andeq	r0, r0, r9, lsr r3
     f78:	00250601 	eoreq	r0, r5, r1, lsl #12
     f7c:	87600000 	strbhi	r0, [r0, -r0]!
     f80:	00200000 	eoreq	r0, r0, r0
     f84:	9c010000 	stcls	0, cr0, [r1], {-0}
     f88:	0000017a 	andeq	r0, r0, sl, ror r1
     f8c:	0100630d 	tsteq	r0, sp, lsl #6
     f90:	00002506 	andeq	r2, r0, r6, lsl #10
     f94:	00076200 	andeq	r6, r7, r0, lsl #4
     f98:	87740e00 	ldrbhi	r0, [r4, -r0, lsl #28]!
     f9c:	027a0000 	rsbseq	r0, sl, #0
     fa0:	010f0000 	mrseq	r0, CPSR
     fa4:	00740251 	rsbseq	r0, r4, r1, asr r2
     fa8:	0550010f 	ldrbeq	r0, [r0, #-271]	; 0x10f
     fac:	00a8a803 	adceq	sl, r8, r3, lsl #16
     fb0:	10000000 	andne	r0, r0, r0
     fb4:	000003c4 	andeq	r0, r0, r4, asr #7
     fb8:	87800b01 	strhi	r0, [r0, r1, lsl #22]
     fbc:	00900000 	addseq	r0, r0, r0
     fc0:	9c010000 	stcls	0, cr0, [r1], {-0}
     fc4:	00000227 	andeq	r0, r0, r7, lsr #4
     fc8:	00034d11 	andeq	r4, r3, r1, lsl sp
     fcc:	250c0100 	strcs	r0, [ip, #-256]	; 0x100
     fd0:	11000000 	mrsne	r0, (UNDEF: 0)
     fd4:	0000040f 	andeq	r0, r0, pc, lsl #8
     fd8:	00250c01 	eoreq	r0, r5, r1, lsl #24
     fdc:	70120000 	andsvc	r0, r2, r0
     fe0:	01000000 	mrseq	r0, (UNDEF: 0)
     fe4:	7362130d 	cmnvc	r2, #872415232	; 0x34000000
     fe8:	0f010073 	svceq	0x00010073
     fec:	00000227 	andeq	r0, r0, r7, lsr #4
     ff0:	00000780 	andeq	r0, r0, r0, lsl #15
     ff4:	00035b14 	andeq	r5, r3, r4, lsl fp
     ff8:	27100100 	ldrcs	r0, [r0, -r0, lsl #2]
     ffc:	13000002 	movwne	r0, #2
    1000:	01006263 	tsteq	r0, r3, ror #4
    1004:	00022d17 	andeq	r2, r2, r7, lsl sp
    1008:	0007a000 	andeq	sl, r7, r0
    100c:	87a81500 	strhi	r1, [r8, r0, lsl #10]!
    1010:	02960000 	addseq	r0, r6, #0
    1014:	e4160000 	ldr	r0, [r6], #-0
    1018:	a1000087 	smlabbge	r0, r7, r0, r0
    101c:	fd000002 	stc2	0, cr0, [r0, #-8]
    1020:	0f000001 	svceq	0x00000001
    1024:	03055101 	movweq	r5, #20737	; 0x5101
    1028:	00009fc0 	andeq	r9, r0, r0, asr #31
    102c:	0550010f 	ldrbeq	r0, [r0, #-271]	; 0x10f
    1030:	00a8a803 	adceq	sl, r8, r3, lsl #16
    1034:	ec160000 	ldc	0, cr0, [r6], {-0}
    1038:	bc000087 	stclt	0, cr0, [r0], {135}	; 0x87
    103c:	14000002 	strne	r0, [r0], #-2
    1040:	0f000002 	svceq	0x00000002
    1044:	03055001 	movweq	r5, #20481	; 0x5001
    1048:	00009fe4 	andeq	r9, r0, r4, ror #31
    104c:	87f01500 	ldrbhi	r1, [r0, r0, lsl #10]!
    1050:	02d20000 	sbcseq	r0, r2, #0
    1054:	f4150000 			; <UNDEFINED> instruction: 0xf4150000
    1058:	d9000087 	stmdble	r0, {r0, r1, r2, r7}
    105c:	00000002 	andeq	r0, r0, r2
    1060:	00250405 	eoreq	r0, r5, r5, lsl #8
    1064:	04050000 	streq	r0, [r5], #-0
    1068:	0000012f 	andeq	r0, r0, pc, lsr #2
    106c:	00037117 	andeq	r7, r3, r7, lsl r1
    1070:	d1050100 	mrsle	r0, (UNDEF: 21)
    1074:	05000000 	streq	r0, [r0, #-0]
    1078:	00a8a803 	adceq	sl, r8, r3, lsl #16
    107c:	00251800 	eoreq	r1, r5, r0, lsl #16
    1080:	02530000 	subseq	r0, r3, #0
    1084:	25190000 	ldrcs	r0, [r9, #-0]
    1088:	00000000 	andeq	r0, r0, r0
    108c:	00026a11 	andeq	r6, r2, r1, lsl sl
    1090:	5e1d0500 	cfmul32pl	mvfx0, mvfx13, mvfx0
    1094:	05000002 	streq	r0, [r0, #-2]
    1098:	00024404 	andeq	r4, r2, r4, lsl #8
    109c:	034d1100 	movteq	r1, #53504	; 0xd100
    10a0:	0c010000 	stceq	0, cr0, [r1], {-0}
    10a4:	00000025 	andeq	r0, r0, r5, lsr #32
    10a8:	00040f11 	andeq	r0, r4, r1, lsl pc
    10ac:	250c0100 	strcs	r0, [ip, #-256]	; 0x100
    10b0:	1a000000 	bne	10b8 <_start-0x6f48>
    10b4:	000003d7 	ldrdeq	r0, [r0], -r7
    10b8:	02904403 	addseq	r4, r0, #50331648	; 0x3000000
    10bc:	90190000 	andsls	r0, r9, r0
    10c0:	19000002 	stmdbne	r0, {r1}
    10c4:	0000005a 	andeq	r0, r0, sl, asr r0
    10c8:	d1040500 	tstle	r4, r0, lsl #10
    10cc:	1b000000 	blne	10d4 <_start-0x6f2c>
    10d0:	00000402 	andeq	r0, r0, r2, lsl #8
    10d4:	022d2a04 	eoreq	r2, sp, #4, 20	; 0x4000
    10d8:	7e1c0000 	cdpvc	0, 1, cr0, cr12, cr0, {0}
    10dc:	03000003 	movweq	r0, #3
    10e0:	00002515 	andeq	r2, r0, r5, lsl r5
    10e4:	0002bc00 	andeq	fp, r2, r0, lsl #24
    10e8:	02901900 	addseq	r1, r0, #0, 18
    10ec:	8f190000 	svchi	0x00190000
    10f0:	1d000000 	stcne	0, cr0, [r0, #-0]
    10f4:	01fa1c00 	mvnseq	r1, r0, lsl #24
    10f8:	29050000 	stmdbcs	r5, {}	; <UNPREDICTABLE>
    10fc:	00000025 	andeq	r0, r0, r5, lsr #32
    1100:	000002d2 	ldrdeq	r0, [r0], -r2
    1104:	00008f19 	andeq	r8, r0, r9, lsl pc
    1108:	12001d00 	andne	r1, r0, #0, 26
    110c:	00000070 	andeq	r0, r0, r0, ror r0
    1110:	0b12d105 	bleq	4b552c <__bss_end__+0x4aac4c>
    1114:	05000003 	streq	r0, [r0, #-3]
    1118:	01ad0063 			; <UNDEFINED> instruction: 0x01ad0063
    111c:	00040000 	andeq	r0, r4, r0
    1120:	0000084e 	andeq	r0, r0, lr, asr #16
    1124:	000b0104 	andeq	r0, fp, r4, lsl #2
    1128:	5b010000 	blpl	41130 <__bss_end__+0x36850>
    112c:	0b000004 	bleq	1144 <_start-0x6ebc>
    1130:	18000002 	stmdane	r0, {r1}
    1134:	00000000 	andeq	r0, r0, r0
    1138:	d9000000 	stmdble	r0, {}	; <UNPREDICTABLE>
    113c:	02000006 	andeq	r0, r0, #6
    1140:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1144:	04030074 	streq	r0, [r3], #-116	; 0x74
    1148:	00015707 	andeq	r5, r1, r7, lsl #14
    114c:	06010300 	streq	r0, [r1], -r0, lsl #6
    1150:	00000084 	andeq	r0, r0, r4, lsl #1
    1154:	9d050203 	sfmls	f0, 4, [r5, #-12]
    1158:	03000001 	movweq	r0, #1
    115c:	01890504 	orreq	r0, r9, r4, lsl #10
    1160:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1164:	00018405 	andeq	r8, r1, r5, lsl #8
    1168:	08010300 	stmdaeq	r1, {r8, r9}
    116c:	00000082 	andeq	r0, r0, r2, lsl #1
    1170:	a6070203 	strge	r0, [r7], -r3, lsl #4
    1174:	03000000 	movweq	r0, #0
    1178:	01520704 	cmpeq	r2, r4, lsl #14
    117c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1180:	00014d07 	andeq	r4, r1, r7, lsl #26
    1184:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1188:	0000017b 	andeq	r0, r0, fp, ror r1
    118c:	8b080103 	blhi	2015a0 <__bss_end__+0x1f6cc0>
    1190:	04000000 	streq	r0, [r0], #-0
    1194:	00000441 	andeq	r0, r0, r1, asr #8
    1198:	00250e01 	eoreq	r0, r5, r1, lsl #28
    119c:	88100000 	ldmdahi	r0, {}	; <UNPREDICTABLE>
    11a0:	00180000 	andseq	r0, r8, r0
    11a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    11a8:	000000a2 	andeq	r0, r0, r2, lsr #1
    11ac:	0004ad05 	andeq	sl, r4, r5, lsl #26
    11b0:	2c0f0100 	stfcss	f0, [pc], {-0}
    11b4:	c0000000 	andgt	r0, r0, r0
    11b8:	00000007 	andeq	r0, r0, r7
    11bc:	00049006 	andeq	r9, r4, r6
    11c0:	28170100 	ldmdacs	r7, {r8}
    11c4:	14000088 	strne	r0, [r0], #-136	; 0x88
    11c8:	01000000 	mrseq	r0, (UNDEF: 0)
    11cc:	0000c79c 	muleq	r0, ip, r7
    11d0:	04ad0500 	strteq	r0, [sp], #1280	; 0x500
    11d4:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    11d8:	0000002c 	andeq	r0, r0, ip, lsr #32
    11dc:	000007df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    11e0:	030b0600 	movweq	r0, #46592	; 0xb600
    11e4:	1f010000 	svcne	0x00010000
    11e8:	0000883c 	andeq	r8, r0, ip, lsr r8
    11ec:	00000048 	andeq	r0, r0, r8, asr #32
    11f0:	01779c01 	cmneq	r7, r1, lsl #24
    11f4:	a5070000 	strge	r0, [r7, #-0]
    11f8:	01000004 	tsteq	r0, r4
    11fc:	0001772a 	andeq	r7, r1, sl, lsr #14
    1200:	10001c00 	andne	r1, r0, r0, lsl #24
    1204:	04880720 	streq	r0, [r8], #1824	; 0x720
    1208:	2b010000 	blcs	41210 <__bss_end__+0x36930>
    120c:	00000177 	andeq	r0, r0, r7, ror r1
    1210:	20100024 	andscs	r0, r0, r4, lsr #32
    1214:	00044f07 	andeq	r4, r4, r7, lsl #30
    1218:	772c0100 	strvc	r0, [ip, -r0, lsl #2]!
    121c:	00000001 	andeq	r0, r0, r1
    1220:	085a0000 	ldmdaeq	sl, {}^	; <UNPREDICTABLE>
    1224:	0000046f 	andeq	r0, r0, pc, ror #8
    1228:	01772d01 	cmneq	r7, r1, lsl #26
    122c:	09200000 	stmdbeq	r0!, {}	; <UNPREDICTABLE>
    1230:	00008844 	andeq	r8, r0, r4, asr #16
    1234:	00000079 	andeq	r0, r0, r9, ror r0
    1238:	00885009 	addeq	r5, r8, r9
    123c:	0000a200 	andeq	sl, r0, r0, lsl #4
    1240:	88580a00 	ldmdahi	r8, {r9, fp}^
    1244:	018d0000 	orreq	r0, sp, r0
    1248:	013a0000 	teqeq	sl, r0
    124c:	010b0000 	mrseq	r0, (UNDEF: 11)
    1250:	004e0150 	subeq	r0, lr, r0, asr r1
    1254:	0088640a 	addeq	r6, r8, sl, lsl #8
    1258:	00019e00 	andeq	r9, r1, r0, lsl #28
    125c:	00015a00 	andeq	r5, r1, r0, lsl #20
    1260:	51010b00 	tstpl	r1, r0, lsl #22
    1264:	00010c05 	andeq	r0, r1, r5, lsl #24
    1268:	010b5a00 	tsteq	fp, r0, lsl #20
    126c:	240c0550 	strcs	r0, [ip], #-1360	; 0x550
    1270:	00201000 	eoreq	r1, r0, r0
    1274:	0088700c 	addeq	r7, r8, ip
    1278:	00019e00 	andeq	r9, r1, r0, lsl #28
    127c:	51010b00 	tstpl	r1, r0, lsl #22
    1280:	00200c05 	eoreq	r0, r0, r5, lsl #24
    1284:	010b5a00 	tsteq	fp, r0, lsl #20
    1288:	1c0c0550 	cfstr32ne	mvfx0, [ip], {80}	; 0x50
    128c:	00201000 	eoreq	r1, r0, r0
    1290:	00250d00 	eoreq	r0, r5, r0, lsl #26
    1294:	44080000 	strmi	r0, [r8], #-0
    1298:	01000004 	tsteq	r0, r4
    129c:	0001880d 	andeq	r8, r1, sp, lsl #16
    12a0:	2c0d1000 	stccs	0, cr1, [sp], {-0}
    12a4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    12a8:	00000330 	andeq	r0, r0, r0, lsr r3
    12ac:	019e5002 	orrseq	r5, lr, r2
    12b0:	2c0f0000 	stccs	0, cr0, [pc], {-0}
    12b4:	00000000 	andeq	r0, r0, r0
    12b8:	00049f10 	andeq	r9, r4, r0, lsl pc
    12bc:	0f9c0200 	svceq	0x009c0200
    12c0:	0000002c 	andeq	r0, r0, ip, lsr #32
    12c4:	00002c0f 	andeq	r2, r0, pc, lsl #24
    12c8:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    12cc:	04000001 	streq	r0, [r0], #-1
    12d0:	00093c00 	andeq	r3, r9, r0, lsl #24
    12d4:	0b010400 	bleq	422dc <__bss_end__+0x379fc>
    12d8:	01000000 	mrseq	r0, (UNDEF: 0)
    12dc:	000004cf 	andeq	r0, r0, pc, asr #9
    12e0:	0000020b 	andeq	r0, r0, fp, lsl #4
    12e4:	00008884 	andeq	r8, r0, r4, lsl #17
    12e8:	00000088 	andeq	r0, r0, r8, lsl #1
    12ec:	00000776 	andeq	r0, r0, r6, ror r7
    12f0:	69050402 	stmdbvs	r5, {r1, sl}
    12f4:	0300746e 	movweq	r7, #1134	; 0x46e
    12f8:	01570704 	cmpeq	r7, r4, lsl #14
    12fc:	01030000 	mrseq	r0, (UNDEF: 3)
    1300:	00008406 	andeq	r8, r0, r6, lsl #8
    1304:	05020300 	streq	r0, [r2, #-768]	; 0x300
    1308:	0000019d 	muleq	r0, sp, r1
    130c:	89050403 	stmdbhi	r5, {r0, r1, sl}
    1310:	03000001 	movweq	r0, #1
    1314:	01840508 	orreq	r0, r4, r8, lsl #10
    1318:	01030000 	mrseq	r0, (UNDEF: 3)
    131c:	00008208 	andeq	r8, r0, r8, lsl #4
    1320:	07020300 	streq	r0, [r2, -r0, lsl #6]
    1324:	000000a6 	andeq	r0, r0, r6, lsr #1
    1328:	52070403 	andpl	r0, r7, #50331648	; 0x3000000
    132c:	03000001 	movweq	r0, #1
    1330:	014d0708 	cmpeq	sp, r8, lsl #14
    1334:	04030000 	streq	r0, [r3], #-0
    1338:	00017b07 	andeq	r7, r1, r7, lsl #22
    133c:	08010300 	stmdaeq	r1, {r8, r9}
    1340:	0000008b 	andeq	r0, r0, fp, lsl #1
    1344:	0004ee04 	andeq	lr, r4, r4, lsl #28
    1348:	84050100 	strhi	r0, [r5], #-256	; 0x100
    134c:	1c000088 	stcne	0, cr0, [r0], {136}	; 0x88
    1350:	01000000 	mrseq	r0, (UNDEF: 0)
    1354:	00009e9c 	muleq	r0, ip, lr
    1358:	04e80500 	strbteq	r0, [r8], #1280	; 0x500
    135c:	05010000 	streq	r0, [r1, #-0]
    1360:	0000002c 	andeq	r0, r0, ip, lsr #32
    1364:	00000809 	andeq	r0, r0, r9, lsl #16
    1368:	04b20600 	ldrteq	r0, [r2], #1536	; 0x600
    136c:	0b010000 	bleq	41374 <__bss_end__+0x36a94>
    1370:	0000002c 	andeq	r0, r0, ip, lsr #32
    1374:	000088a0 	andeq	r8, r0, r0, lsr #17
    1378:	00000014 	andeq	r0, r0, r4, lsl r0
    137c:	00cb9c01 	sbceq	r9, fp, r1, lsl #24
    1380:	ac070000 	stcge	0, cr0, [r7], {-0}
    1384:	ca000088 	bgt	15ac <_start-0x6a54>
    1388:	08000001 	stmdaeq	r0, {r0}
    138c:	0c055001 	stceq	0, cr5, [r5], {1}
    1390:	20003004 	andcs	r3, r0, r4
    1394:	04060000 	streq	r0, [r6], #-0
    1398:	01000005 	tsteq	r0, r5
    139c:	00002c10 	andeq	r2, r0, r0, lsl ip
    13a0:	0088b400 	addeq	fp, r8, r0, lsl #8
    13a4:	00000c00 	andeq	r0, r0, r0, lsl #24
    13a8:	f99c0100 			; <UNDEFINED> instruction: 0xf99c0100
    13ac:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    13b0:	14010075 	strne	r0, [r1], #-117	; 0x75
    13b4:	0000002c 	andeq	r0, r0, ip, lsr #32
    13b8:	bc0a5001 	stclt	0, cr5, [sl], {1}
    13bc:	9e000088 	cdpls	0, 0, cr0, cr0, cr8, {4}
    13c0:	00000000 	andeq	r0, r0, r0
    13c4:	0004fb04 	andeq	pc, r4, r4, lsl #22
    13c8:	c0190100 	andsgt	r0, r9, r0, lsl #2
    13cc:	24000088 	strcs	r0, [r0], #-136	; 0x88
    13d0:	01000000 	mrseq	r0, (UNDEF: 0)
    13d4:	0001579c 	muleq	r1, ip, r7
    13d8:	73750b00 	cmnvc	r5, #0, 22
    13dc:	2c190100 	ldfcss	f0, [r9], {-0}
    13e0:	3d000000 	stccc	0, cr0, [r0, #-0]
    13e4:	09000008 	stmdbeq	r0, {r3}
    13e8:	01006272 	tsteq	r0, r2, ror r2
    13ec:	00002c1a 	andeq	r2, r0, sl, lsl ip
    13f0:	0c540100 	ldfeqe	f0, [r4], {-0}
    13f4:	000088d0 	ldrdeq	r8, [r0], -r0
    13f8:	00000010 	andeq	r0, r0, r0, lsl r0
    13fc:	0000014d 	andeq	r0, r0, sp, asr #2
    1400:	0061720d 	rsbeq	r7, r1, sp, lsl #4
    1404:	002c1c01 	eoreq	r1, ip, r1, lsl #24
    1408:	085b0000 	ldmdaeq	fp, {}^	; <UNPREDICTABLE>
    140c:	d40a0000 	strle	r0, [sl], #-0
    1410:	cb000088 	blgt	1638 <_start-0x69c8>
    1414:	00000000 	andeq	r0, r0, r0
    1418:	0088cc0a 	addeq	ip, r8, sl, lsl #24
    141c:	0000cb00 	andeq	ip, r0, r0, lsl #22
    1420:	30040000 	andcc	r0, r4, r0
    1424:	01000003 	tsteq	r0, r3
    1428:	0088e422 	addeq	lr, r8, r2, lsr #8
    142c:	00001400 	andeq	r1, r0, r0, lsl #8
    1430:	909c0100 	addsls	r0, ip, r0, lsl #2
    1434:	0b000001 	bleq	1440 <_start-0x6bc0>
    1438:	0100736d 	tsteq	r0, sp, ror #6
    143c:	00002c22 	andeq	r2, r0, r2, lsr #24
    1440:	00086e00 	andeq	r6, r8, r0, lsl #28
    1444:	88f40700 	ldmhi	r4!, {r8, r9, sl}^
    1448:	00f90000 	rscseq	r0, r9, r0
    144c:	01080000 	mrseq	r0, (UNDEF: 8)
    1450:	01f30750 	mvnseq	r0, r0, asr r7
    1454:	03e80a50 	mvneq	r0, #80, 20	; 0x50000
    1458:	0400001e 	streq	r0, [r0], #-30
    145c:	000004c5 	andeq	r0, r0, r5, asr #9
    1460:	88f82501 	ldmhi	r8!, {r0, r8, sl, sp}^
    1464:	00140000 	andseq	r0, r4, r0
    1468:	9c010000 	stcls	0, cr0, [r1], {-0}
    146c:	000001ca 	andeq	r0, r0, sl, asr #3
    1470:	6365730b 	cmnvs	r5, #738197504	; 0x2c000000
    1474:	2c250100 	stfcss	f0, [r5], #-0
    1478:	8f000000 	svchi	0x00000000
    147c:	07000008 	streq	r0, [r0, -r8]
    1480:	00008908 	andeq	r8, r0, r8, lsl #18
    1484:	00000157 	andeq	r0, r0, r7, asr r1
    1488:	07500108 	ldrbeq	r0, [r0, -r8, lsl #2]
    148c:	0a5001f3 	beq	1401c60 <__bss_end__+0x13f7380>
    1490:	001e03e8 	andseq	r0, lr, r8, ror #7
    1494:	04e20e00 	strbteq	r0, [r2], #3584	; 0xe00
    1498:	a8020000 	stmdage	r2, {}	; <UNPREDICTABLE>
    149c:	0000002c 	andeq	r0, r0, ip, lsr #32
    14a0:	00002c0f 	andeq	r2, r0, pc, lsl #24
    14a4:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
    14a8:	04000003 	streq	r0, [r0], #-3
    14ac:	000a1f00 	andeq	r1, sl, r0, lsl #30
    14b0:	0b010400 	bleq	424b8 <__bss_end__+0x37bd8>
    14b4:	01000000 	mrseq	r0, (UNDEF: 0)
    14b8:	00000554 	andeq	r0, r0, r4, asr r5
    14bc:	0000020b 	andeq	r0, r0, fp, lsl #4
    14c0:	0000890c 	andeq	r8, r0, ip, lsl #18
    14c4:	000001e8 	andeq	r0, r0, r8, ror #3
    14c8:	0000081d 	andeq	r0, r0, sp, lsl r8
    14cc:	69050402 	stmdbvs	r5, {r1, sl}
    14d0:	0300746e 	movweq	r7, #1134	; 0x46e
    14d4:	00000513 	andeq	r0, r0, r3, lsl r5
    14d8:	0037d403 	eorseq	sp, r7, r3, lsl #8
    14dc:	04040000 	streq	r0, [r4], #-0
    14e0:	00015707 	andeq	r5, r1, r7, lsl #14
    14e4:	06010400 	streq	r0, [r1], -r0, lsl #8
    14e8:	00000084 	andeq	r0, r0, r4, lsl #1
    14ec:	9d050204 	sfmls	f0, 4, [r5, #-16]
    14f0:	04000001 	streq	r0, [r0], #-1
    14f4:	01890504 	orreq	r0, r9, r4, lsl #10
    14f8:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    14fc:	00018405 	andeq	r8, r1, r5, lsl #8
    1500:	08010400 	stmdaeq	r1, {sl}
    1504:	00000082 	andeq	r0, r0, r2, lsl #1
    1508:	a6070204 	strge	r0, [r7], -r4, lsl #4
    150c:	04000000 	streq	r0, [r0], #-0
    1510:	01520704 	cmpeq	r2, r4, lsl #14
    1514:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    1518:	00014d07 	andeq	r4, r1, r7, lsl #26
    151c:	07040400 	streq	r0, [r4, -r0, lsl #8]
    1520:	0000017b 	andeq	r0, r0, fp, ror r1
    1524:	04060405 	streq	r0, [r6], #-1029	; 0x405
    1528:	00000085 	andeq	r0, r0, r5, lsl #1
    152c:	8b080104 	blhi	201944 <__bss_end__+0x1f7064>
    1530:	06000000 	streq	r0, [r0], -r0
    1534:	00009204 	andeq	r9, r0, r4, lsl #4
    1538:	00850700 	addeq	r0, r5, r0, lsl #14
    153c:	85080000 	strhi	r0, [r8, #-0]
    1540:	a7000000 	strge	r0, [r0, -r0]
    1544:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1548:	00000076 	andeq	r0, r0, r6, ror r0
    154c:	450a0007 	strmi	r0, [sl, #-7]
    1550:	01000005 	tsteq	r0, r5
    1554:	00007d19 	andeq	r7, r0, r9, lsl sp
    1558:	00890c00 	addeq	r0, r9, r0, lsl #24
    155c:	00007400 	andeq	r7, r0, r0, lsl #8
    1560:	569c0100 	ldrpl	r0, [ip], r0, lsl #2
    1564:	0b000001 	bleq	1570 <_start-0x6a90>
    1568:	0000058c 	andeq	r0, r0, ip, lsl #11
    156c:	00371901 	eorseq	r1, r7, r1, lsl #18
    1570:	08b00000 	ldmeq	r0!, {}	; <UNPREDICTABLE>
    1574:	320c0000 	andcc	r0, ip, #0
    1578:	56000001 	strpl	r0, [r0], -r1
    157c:	05000001 	streq	r0, [r0, #-1]
    1580:	009ff003 	addseq	pc, pc, r3
    1584:	05bb0d00 	ldreq	r0, [fp, #3328]!	; 0xd00
    1588:	1c010000 	stcne	0, cr0, [r1], {-0}
    158c:	0000007d 	andeq	r0, r0, sp, ror r0
    1590:	840e5501 	strhi	r5, [lr], #-1281	; 0x501
    1594:	01000005 	tsteq	r0, r5
    1598:	0000371d 	andeq	r3, r0, sp, lsl r7
    159c:	0008ea00 	andeq	lr, r8, r0, lsl #20
    15a0:	89240f00 	stmdbhi	r4!, {r8, r9, sl, fp}
    15a4:	03b20000 			; <UNDEFINED> instruction: 0x03b20000
    15a8:	38100000 	ldmdacc	r0, {}	; <UNPREDICTABLE>
    15ac:	b9000089 	stmdblt	r0, {r0, r3, r7}
    15b0:	31000003 	tstcc	r0, r3
    15b4:	11000001 	tstne	r0, r1
    15b8:	4a015301 	bmi	561c4 <__bss_end__+0x4b8e4>
    15bc:	05520111 	ldrbeq	r0, [r2, #-273]	; 0x111
    15c0:	009ff003 	addseq	pc, pc, r3
    15c4:	51011100 	mrspl	r1, (UNDEF: 17)
    15c8:	a0700305 	rsbsge	r0, r0, r5, lsl #6
    15cc:	01110000 	tsteq	r1, r0
    15d0:	30030550 	andcc	r0, r3, r0, asr r5
    15d4:	000000a0 	andeq	r0, r0, r0, lsr #1
    15d8:	00893c0f 	addeq	r3, r9, pc, lsl #24
    15dc:	0003cf00 	andeq	ip, r3, r0, lsl #30
    15e0:	895c1200 	ldmdbhi	ip, {r9, ip}^
    15e4:	03d60000 	bicseq	r0, r6, #0
    15e8:	01110000 	tsteq	r1, r0
    15ec:	00760252 	rsbseq	r0, r6, r2, asr r2
    15f0:	01510111 	cmpeq	r1, r1, lsl r1
    15f4:	50011130 	andpl	r1, r1, r0, lsr r1
    15f8:	00007502 	andeq	r7, r0, r2, lsl #10
    15fc:	00970700 	addseq	r0, r7, r0, lsl #14
    1600:	1a0a0000 	bne	281608 <__bss_end__+0x276d28>
    1604:	01000005 	tsteq	r0, r5
    1608:	00007d27 	andeq	r7, r0, r7, lsr #26
    160c:	00898000 	addeq	r8, r9, r0
    1610:	00009c00 	andeq	r9, r0, r0, lsl #24
    1614:	459c0100 	ldrmi	r0, [ip, #256]	; 0x100
    1618:	0b000002 	bleq	1628 <_start-0x69d8>
    161c:	0000058c 	andeq	r0, r0, ip, lsl #11
    1620:	00372701 	eorseq	r2, r7, r1, lsl #14
    1624:	09100000 	ldmdbeq	r0, {}	; <UNPREDICTABLE>
    1628:	7a0b0000 	bvc	2c1630 <__bss_end__+0x2b6d50>
    162c:	01000005 	tsteq	r0, r5
    1630:	00003727 	andeq	r3, r0, r7, lsr #14
    1634:	00097c00 	andeq	r7, r9, r0, lsl #24
    1638:	01320c00 	teqeq	r2, r0, lsl #24
    163c:	02550000 	subseq	r0, r5, #0
    1640:	03050000 	movweq	r0, #20480	; 0x5000
    1644:	00009ff8 	strdeq	r9, [r0], -r8
    1648:	0005340e 	andeq	r3, r5, lr, lsl #8
    164c:	372d0100 	strcc	r0, [sp, -r0, lsl #2]!
    1650:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    1654:	0f000009 	svceq	0x00000009
    1658:	00008998 	muleq	r0, r8, r9
    165c:	000003b2 			; <UNDEFINED> instruction: 0x000003b2
    1660:	0089ac10 	addeq	sl, r9, r0, lsl ip
    1664:	0003b900 	andeq	fp, r3, r0, lsl #18
    1668:	0001e800 	andeq	lr, r1, r0, lsl #16
    166c:	53011100 	movwpl	r1, #4352	; 0x1100
    1670:	11280802 	teqne	r8, r2, lsl #16
    1674:	03055201 	movweq	r5, #20993	; 0x5201
    1678:	00009ff8 	strdeq	r9, [r0], -r8
    167c:	05510111 	ldrbeq	r0, [r1, #-273]	; 0x111
    1680:	00a07003 	adceq	r7, r0, r3
    1684:	50011100 	andpl	r1, r1, r0, lsl #2
    1688:	a0300305 	eorsge	r0, r0, r5, lsl #6
    168c:	0f000000 	svceq	0x00000000
    1690:	000089b0 			; <UNDEFINED> instruction: 0x000089b0
    1694:	000003cf 	andeq	r0, r0, pc, asr #7
    1698:	0089bc0f 	addeq	fp, r9, pc, lsl #24
    169c:	0000a700 	andeq	sl, r0, r0, lsl #14
    16a0:	89cc0f00 	stmibhi	ip, {r8, r9, sl, fp}^
    16a4:	03b20000 			; <UNDEFINED> instruction: 0x03b20000
    16a8:	e0100000 	ands	r0, r0, r0
    16ac:	b9000089 	stmdblt	r0, {r0, r3, r7}
    16b0:	32000003 	andcc	r0, r0, #3
    16b4:	11000002 	tstne	r0, r2
    16b8:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    16bc:	5201112c 	andpl	r1, r1, #44, 2
    16c0:	9ff80305 	svcls	0x00f80305
    16c4:	01110000 	tsteq	r1, r0
    16c8:	70030551 	andvc	r0, r3, r1, asr r5
    16cc:	110000a0 	smlatbne	r0, r0, r0, r0
    16d0:	03055001 	movweq	r5, #20481	; 0x5001
    16d4:	0000a084 	andeq	sl, r0, r4, lsl #1
    16d8:	89e40f00 	stmibhi	r4!, {r8, r9, sl, fp}^
    16dc:	03cf0000 	biceq	r0, pc, #0
    16e0:	040f0000 	streq	r0, [pc], #-0	; 16e8 <_start-0x6918>
    16e4:	a700008a 	strge	r0, [r0, -sl, lsl #1]
    16e8:	00000000 	andeq	r0, r0, r0
    16ec:	00008508 	andeq	r8, r0, r8, lsl #10
    16f0:	00025500 	andeq	r5, r2, r0, lsl #10
    16f4:	00760900 	rsbseq	r0, r6, r0, lsl #18
    16f8:	000f0000 	andeq	r0, pc, r0
    16fc:	00024507 	andeq	r4, r2, r7, lsl #10
    1700:	01be1300 			; <UNDEFINED> instruction: 0x01be1300
    1704:	3c010000 	stccc	0, cr0, [r1], {-0}
    1708:	00008a1c 	andeq	r8, r0, ip, lsl sl
    170c:	0000005c 	andeq	r0, r0, ip, asr r0
    1710:	02c09c01 	sbceq	r9, r0, #256	; 0x100
    1714:	320c0000 	andcc	r0, ip, #0
    1718:	d0000001 	andle	r0, r0, r1
    171c:	05000002 	streq	r0, [r0, #-2]
    1720:	00a00803 	adceq	r0, r0, r3, lsl #16
    1724:	8a340f00 	bhi	d0532c <__bss_end__+0xcfaa4c>
    1728:	03b20000 			; <UNDEFINED> instruction: 0x03b20000
    172c:	48100000 	ldmdami	r0, {}	; <UNPREDICTABLE>
    1730:	b900008a 	stmdblt	r0, {r1, r3, r7}
    1734:	b6000003 	strlt	r0, [r0], -r3
    1738:	11000002 	tstne	r0, r2
    173c:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    1740:	5201113d 	andpl	r1, r1, #1073741839	; 0x4000000f
    1744:	a0080305 	andge	r0, r8, r5, lsl #6
    1748:	01110000 	tsteq	r1, r0
    174c:	70030551 	andvc	r0, r3, r1, asr r5
    1750:	110000a0 	smlatbne	r0, r0, r0, r0
    1754:	03055001 	movweq	r5, #20481	; 0x5001
    1758:	0000a0dc 	ldrdeq	sl, [r0], -ip
    175c:	8a4c0f00 	bhi	1305364 <__bss_end__+0x12faa84>
    1760:	03cf0000 	biceq	r0, pc, #0
    1764:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1768:	00000085 	andeq	r0, r0, r5, lsl #1
    176c:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1770:	00007609 	andeq	r7, r0, r9, lsl #12
    1774:	07000c00 	streq	r0, [r0, -r0, lsl #24]
    1778:	000002c0 	andeq	r0, r0, r0, asr #5
    177c:	00052a14 	andeq	r2, r5, r4, lsl sl
    1780:	78460100 	stmdavc	r6, {r8}^
    1784:	1800008a 	stmdane	r0, {r1, r3, r7}
    1788:	01000000 	mrseq	r0, (UNDEF: 0)
    178c:	0593159c 	ldreq	r1, [r3, #1436]	; 0x59c
    1790:	4f010000 	svcmi	0x00010000
    1794:	0000007d 	andeq	r0, r0, sp, ror r0
    1798:	00008a90 	muleq	r0, r0, sl
    179c:	00000010 	andeq	r0, r0, r0, lsl r0
    17a0:	a4139c01 	ldrge	r9, [r3], #-3073	; 0xc01
    17a4:	01000005 	tsteq	r0, r5
    17a8:	008aa053 	addeq	sl, sl, r3, asr r0
    17ac:	00005400 	andeq	r5, r0, r0, lsl #8
    17b0:	709c0100 	addsvc	r0, ip, r0, lsl #2
    17b4:	0b000003 	bleq	17c8 <_start-0x6838>
    17b8:	00000565 	andeq	r0, r0, r5, ror #10
    17bc:	00375301 	eorseq	r5, r7, r1, lsl #6
    17c0:	0a230000 	beq	8c17c8 <__bss_end__+0x8b6ee8>
    17c4:	320c0000 	andcc	r0, ip, #0
    17c8:	80000001 	andhi	r0, r0, r1
    17cc:	05000003 	streq	r0, [r0, #-3]
    17d0:	00a01803 	adceq	r1, r0, r3, lsl #16
    17d4:	8ab80f00 	bhi	fee053dc <__bss_end__+0xfedfaafc>
    17d8:	03b20000 			; <UNDEFINED> instruction: 0x03b20000
    17dc:	cc100000 	ldcgt	0, cr0, [r0], {-0}
    17e0:	b900008a 	stmdblt	r0, {r1, r3, r7}
    17e4:	66000003 	strvs	r0, [r0], -r3
    17e8:	11000003 	tstne	r0, r3
    17ec:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    17f0:	52011154 	andpl	r1, r1, #84, 2
    17f4:	a0180305 	andsge	r0, r8, r5, lsl #6
    17f8:	01110000 	tsteq	r1, r0
    17fc:	70030551 	andvc	r0, r3, r1, asr r5
    1800:	110000a0 	smlatbne	r0, r0, r0, r0
    1804:	03055001 	movweq	r5, #20481	; 0x5001
    1808:	0000a0dc 	ldrdeq	sl, [r0], -ip
    180c:	8ad00f00 	bhi	ff405414 <__bss_end__+0xff3fab34>
    1810:	03cf0000 	biceq	r0, pc, #0
    1814:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1818:	00000085 	andeq	r0, r0, r5, lsl #1
    181c:	00000380 	andeq	r0, r0, r0, lsl #7
    1820:	00007609 	andeq	r7, r0, r9, lsl #12
    1824:	07001600 	streq	r1, [r0, -r0, lsl #12]
    1828:	00000370 	andeq	r0, r0, r0, ror r3
    182c:	0005730d 	andeq	r7, r5, sp, lsl #6
    1830:	25080100 	strcs	r0, [r8, #-256]	; 0x100
    1834:	05000000 	streq	r0, [r0, #-0]
    1838:	00a8b403 	adceq	fp, r8, r3, lsl #8
    183c:	059b0d00 	ldreq	r0, [fp, #3328]	; 0xd00
    1840:	0b010000 	bleq	41848 <__bss_end__+0x36f68>
    1844:	0000007f 	andeq	r0, r0, pc, ror r0
    1848:	a8b80305 	ldmge	r8!, {r0, r2, r8, r9}
    184c:	c7160000 	ldrgt	r0, [r6, -r0]
    1850:	01000005 	tsteq	r0, r5
    1854:	00008505 	andeq	r8, r0, r5, lsl #10
    1858:	01cb1700 	biceq	r1, fp, r0, lsl #14
    185c:	1e020000 	cdpne	0, 0, cr0, cr2, cr0, {0}
    1860:	0001fa18 	andeq	pc, r1, r8, lsl sl	; <UNPREDICTABLE>
    1864:	25290200 	strcs	r0, [r9, #-512]!	; 0x200
    1868:	cf000000 	svcgt	0x00000000
    186c:	19000003 	stmdbne	r0, {r0, r1}
    1870:	0000008c 	andeq	r0, r0, ip, lsl #1
    1874:	9017001a 	andsls	r0, r7, sl, lsl r0
    1878:	02000000 	andeq	r0, r0, #0
    187c:	054d1b66 	strbeq	r1, [sp, #-2918]	; 0xb66
    1880:	1b040000 	blne	101888 <__bss_end__+0xf6fa8>
    1884:	0000007d 	andeq	r0, r0, sp, ror r0
    1888:	00007d19 	andeq	r7, r0, r9, lsl sp
    188c:	00251900 	eoreq	r1, r5, r0, lsl #18
    1890:	2c190000 	ldccs	0, cr0, [r9], {-0}
    1894:	00000000 	andeq	r0, r0, r0
    1898:	0009e000 	andeq	lr, r9, r0
    189c:	a6000400 	strge	r0, [r0], -r0, lsl #8
    18a0:	0400000b 	streq	r0, [r0], #-11
    18a4:	00000b01 	andeq	r0, r0, r1, lsl #22
    18a8:	06b40100 	ldrteq	r0, [r4], r0, lsl #2
    18ac:	020b0000 	andeq	r0, fp, #0
    18b0:	8af40000 	bhi	ffd018b8 <__bss_end__+0xffcf6fd8>
    18b4:	04980000 	ldreq	r0, [r8], #0
    18b8:	09970000 	ldmibeq	r7, {}	; <UNPREDICTABLE>
    18bc:	04020000 	streq	r0, [r2], #-0
    18c0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    18c4:	07040300 	streq	r0, [r4, -r0, lsl #6]
    18c8:	00000157 	andeq	r0, r0, r7, asr r1
    18cc:	84060103 	strhi	r0, [r6], #-259	; 0x103
    18d0:	03000000 	movweq	r0, #0
    18d4:	019d0502 	orrseq	r0, sp, r2, lsl #10
    18d8:	04030000 	streq	r0, [r3], #-0
    18dc:	00018905 	andeq	r8, r1, r5, lsl #18
    18e0:	05080300 	streq	r0, [r8, #-768]	; 0x300
    18e4:	00000184 	andeq	r0, r0, r4, lsl #3
    18e8:	82080103 	andhi	r0, r8, #-1073741824	; 0xc0000000
    18ec:	03000000 	movweq	r0, #0
    18f0:	00a60702 	adceq	r0, r6, r2, lsl #14
    18f4:	b5040000 	strlt	r0, [r4, #-0]
    18f8:	04000001 	streq	r0, [r0], #-1
    18fc:	00006834 	andeq	r6, r0, r4, lsr r8
    1900:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1904:	00000152 	andeq	r0, r0, r2, asr r1
    1908:	4d070803 	stcmi	8, cr0, [r7, #-12]
    190c:	03000001 	movweq	r0, #1
    1910:	017b0704 	cmneq	fp, r4, lsl #14
    1914:	04050000 	streq	r0, [r5], #-0
    1918:	8b080103 	blhi	201d2c <__bss_end__+0x1f744c>
    191c:	06000000 	streq	r0, [r0], -r0
    1920:	00008c04 	andeq	r8, r0, r4, lsl #24
    1924:	007f0700 	rsbseq	r0, pc, r0, lsl #14
    1928:	7f080000 	svcvc	0x00080000
    192c:	a1000000 	mrsge	r0, (UNDEF: 0)
    1930:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1934:	00000076 	andeq	r0, r0, r6, ror r0
    1938:	920a0007 	andls	r0, sl, #7
    193c:	50000001 	andpl	r0, r0, r1
    1940:	f6dd0320 			; <UNDEFINED> instruction: 0xf6dd0320
    1944:	0b000000 	bleq	194c <_start-0x66b4>
    1948:	0000013f 	andeq	r0, r0, pc, lsr r1
    194c:	00f6df03 	rscseq	sp, r6, r3, lsl #30
    1950:	0b000000 	bleq	1958 <_start-0x66a8>
    1954:	00000000 	andeq	r0, r0, r0
    1958:	0106e103 	tsteq	r6, r3, lsl #2
    195c:	0c400000 	mareq	acc0, r0, r0
    1960:	00646974 	rsbeq	r6, r4, r4, ror r9
    1964:	005de203 	subseq	lr, sp, r3, lsl #4
    1968:	0c440000 	mareq	acc0, r0, r4
    196c:	03006e66 	movweq	r6, #3686	; 0xe66
    1970:	000117e4 	andeq	r1, r1, r4, ror #15
    1974:	610c4800 	tstvs	ip, r0, lsl #16
    1978:	03006772 	movweq	r6, #1906	; 0x772
    197c:	00007de5 	andeq	r7, r0, r5, ror #27
    1980:	050b4c00 	streq	r4, [fp, #-3072]	; 0xc00
    1984:	03000000 	movweq	r0, #0
    1988:	00011de7 	andeq	r1, r1, r7, ror #27
    198c:	08005000 	stmdaeq	r0, {ip, lr}
    1990:	0000005d 	andeq	r0, r0, sp, asr r0
    1994:	00000106 	andeq	r0, r0, r6, lsl #2
    1998:	00007609 	andeq	r7, r0, r9, lsl #12
    199c:	06000f00 	streq	r0, [r0], -r0, lsl #30
    19a0:	0000a104 	andeq	sl, r0, r4, lsl #2
    19a4:	01170d00 	tsteq	r7, r0, lsl #26
    19a8:	7d0e0000 	stcvc	0, cr0, [lr, #-0]
    19ac:	00000000 	andeq	r0, r0, r0
    19b0:	010c0406 	tsteq	ip, r6, lsl #8
    19b4:	5d080000 	stcpl	0, cr0, [r8, #-0]
    19b8:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    19bc:	0f000001 	svceq	0x00000001
    19c0:	00000076 	andeq	r0, r0, r6, ror r0
    19c4:	040007ff 	streq	r0, [r0], #-2047	; 0x7ff
    19c8:	00000164 	andeq	r0, r0, r4, ror #2
    19cc:	00a1e803 	adceq	lr, r1, r3, lsl #16
    19d0:	51100000 	tstpl	r0, r0
    19d4:	08010c00 	stmdaeq	r1, {sl, fp}
    19d8:	00000168 	andeq	r0, r0, r8, ror #2
    19dc:	00069e0b 	andeq	r9, r6, fp, lsl #28
    19e0:	68090100 	stmdavs	r9, {r8}
    19e4:	00000001 	andeq	r0, r0, r1
    19e8:	00067f0b 	andeq	r7, r6, fp, lsl #30
    19ec:	68090100 	stmdavs	r9, {r8}
    19f0:	04000001 	streq	r0, [r0], #-1
    19f4:	746e630c 	strbtvc	r6, [lr], #-780	; 0x30c
    19f8:	2c0a0100 	stfcss	f0, [sl], {-0}
    19fc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1a00:	2e040600 	cfmadd32cs	mvax0, mvfx0, mvfx4, mvfx0
    1a04:	11000001 	tstne	r0, r1
    1a08:	00745f51 	rsbseq	r5, r4, r1, asr pc
    1a0c:	01390b01 	teqeq	r9, r1, lsl #22
    1a10:	1e120000 	cdpne	0, 1, cr0, cr2, cr0, {0}
    1a14:	01000006 	tsteq	r0, r6
    1a18:	00002c10 	andeq	r2, r0, r0, lsl ip
    1a1c:	008af400 	addeq	pc, sl, r0, lsl #8
    1a20:	00000800 	andeq	r0, r0, r0, lsl #16
    1a24:	a09c0100 	addsge	r0, ip, r0, lsl #2
    1a28:	13000001 	movwne	r0, #1
    1a2c:	10010071 	andne	r0, r1, r1, ror r0
    1a30:	000001a0 	andeq	r0, r0, r0, lsr #3
    1a34:	00000a4f 	andeq	r0, r0, pc, asr #20
    1a38:	6e040600 	cfmadd32vs	mvax0, mvfx0, mvfx4, mvfx0
    1a3c:	14000001 	strne	r0, [r0], #-1
    1a40:	00000695 	muleq	r0, r5, r6
    1a44:	8afc2b01 	bhi	fff0c650 <__bss_end__+0xfff01d70>
    1a48:	00380000 	eorseq	r0, r8, r0
    1a4c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a50:	000001d2 	ldrdeq	r0, [r0], -r2
    1a54:	01007115 	tsteq	r0, r5, lsl r1
    1a58:	0001a02b 	andeq	sl, r1, fp, lsr #32
    1a5c:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    1a60:	2b010065 	blcs	41bfc <__bss_end__+0x3731c>
    1a64:	00000168 	andeq	r0, r0, r8, ror #2
    1a68:	14005101 	strne	r5, [r0], #-257	; 0x101
    1a6c:	000005d6 	ldrdeq	r0, [r0], -r6
    1a70:	8b343701 	blhi	d0f67c <__bss_end__+0xd04d9c>
    1a74:	00280000 	eoreq	r0, r8, r0
    1a78:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a7c:	000001fe 	strdeq	r0, [r0], -lr
    1a80:	01007115 	tsteq	r0, r5, lsl r1
    1a84:	0001a037 	andeq	sl, r1, r7, lsr r0
    1a88:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    1a8c:	37010065 	strcc	r0, [r1, -r5, rrx]
    1a90:	00000168 	andeq	r0, r0, r8, ror #2
    1a94:	14005101 	strne	r5, [r0], #-257	; 0x101
    1a98:	0000068d 	andeq	r0, r0, sp, lsl #13
    1a9c:	8b5c2802 	blhi	170baac <__bss_end__+0x17011cc>
    1aa0:	00180000 	andseq	r0, r8, r0
    1aa4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1aa8:	0000023c 	andeq	r0, r0, ip, lsr r2
    1aac:	00687413 	rsbeq	r7, r8, r3, lsl r4
    1ab0:	01682802 	cmneq	r8, r2, lsl #16
    1ab4:	0a700000 	beq	1c01abc <__bss_end__+0x1bf71dc>
    1ab8:	6c160000 	ldcvs	0, cr0, [r6], {-0}
    1abc:	d200008b 	andle	r0, r0, #139	; 0x8b
    1ac0:	17000001 	strne	r0, [r0, -r1]
    1ac4:	f3035101 	vrhadd.u8	d5, d3, d1
    1ac8:	01175001 	tsteq	r7, r1
    1acc:	bc030550 	cfstr32lt	mvfx0, [r3], {80}	; 0x50
    1ad0:	000000a8 	andeq	r0, r0, r8, lsr #1
    1ad4:	06601200 	strbteq	r1, [r0], -r0, lsl #4
    1ad8:	12010000 	andne	r0, r1, #0
    1adc:	00000025 	andeq	r0, r0, r5, lsr #32
    1ae0:	00008b74 	andeq	r8, r0, r4, ror fp
    1ae4:	00000084 	andeq	r0, r0, r4, lsl #1
    1ae8:	03069c01 	movweq	r9, #27649	; 0x6c01
    1aec:	71130000 	tstvc	r3, r0
    1af0:	a0120100 	andsge	r0, r2, r0, lsl #2
    1af4:	9c000001 	stcls	0, cr0, [r0], {1}
    1af8:	1800000a 	stmdane	r0, {r1, r3}
    1afc:	00000132 	andeq	r0, r0, r2, lsr r1
    1b00:	00000306 	andeq	r0, r0, r6, lsl #6
    1b04:	a11c0305 	tstge	ip, r5, lsl #6
    1b08:	8c190000 	ldchi	0, cr0, [r9], {-0}
    1b0c:	7900008b 	stmdbvc	r0, {r0, r1, r3, r7}
    1b10:	85000001 	strhi	r0, [r0, #-1]
    1b14:	17000002 	strne	r0, [r0, -r2]
    1b18:	74025001 	strvc	r5, [r2], #-1
    1b1c:	981a0000 	ldmdals	sl, {}	; <UNPREDICTABLE>
    1b20:	8900008b 	stmdbhi	r0, {r0, r1, r3, r7}
    1b24:	19000009 	stmdbne	r0, {r0, r3}
    1b28:	00008bac 	andeq	r8, r0, ip, lsr #23
    1b2c:	00000990 	muleq	r0, r0, r9
    1b30:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
    1b34:	01530117 	cmpeq	r3, r7, lsl r1
    1b38:	52011745 	andpl	r1, r1, #18087936	; 0x1140000
    1b3c:	a11c0305 	tstge	ip, r5, lsl #6
    1b40:	01170000 	tsteq	r7, r0
    1b44:	98030551 	stmdals	r3, {r0, r4, r6, r8, sl}
    1b48:	170000a1 	strne	r0, [r0, -r1, lsr #1]
    1b4c:	03055001 	movweq	r5, #20481	; 0x5001
    1b50:	0000a178 	andeq	sl, r0, r8, ror r1
    1b54:	8bb01a00 	blhi	fec0835c <__bss_end__+0xfebfda7c>
    1b58:	09a60000 	stmibeq	r6!, {}	; <UNPREDICTABLE>
    1b5c:	c01a0000 	andsgt	r0, sl, r0
    1b60:	8900008b 	stmdbhi	r0, {r0, r1, r3, r7}
    1b64:	19000009 	stmdbne	r0, {r0, r3}
    1b68:	00008bd4 	ldrdeq	r8, [r0], -r4
    1b6c:	00000990 	muleq	r0, r0, r9
    1b70:	000002fc 	strdeq	r0, [r0], -ip
    1b74:	01530117 	cmpeq	r3, r7, lsl r1
    1b78:	52011746 	andpl	r1, r1, #18350080	; 0x1180000
    1b7c:	a11c0305 	tstge	ip, r5, lsl #6
    1b80:	01170000 	tsteq	r7, r0
    1b84:	98030551 	stmdals	r3, {r0, r4, r6, r8, sl}
    1b88:	170000a1 	strne	r0, [r0, -r1, lsr #1]
    1b8c:	03055001 	movweq	r5, #20481	; 0x5001
    1b90:	0000a1a4 	andeq	sl, r0, r4, lsr #3
    1b94:	8bd81a00 	blhi	ff60839c <__bss_end__+0xff5fdabc>
    1b98:	09a60000 	stmibeq	r6!, {}	; <UNPREDICTABLE>
    1b9c:	07000000 	streq	r0, [r0, -r0]
    1ba0:	00000091 	muleq	r0, r1, r0
    1ba4:	00066812 	andeq	r6, r6, r2, lsl r8
    1ba8:	681b0100 	ldmdavs	fp, {r8}
    1bac:	f8000001 			; <UNDEFINED> instruction: 0xf8000001
    1bb0:	9800008b 	stmdals	r0, {r0, r1, r3, r7}
    1bb4:	01000000 	mrseq	r0, (UNDEF: 0)
    1bb8:	0003e49c 	muleq	r3, ip, r4
    1bbc:	00711300 	rsbseq	r1, r1, r0, lsl #6
    1bc0:	01a01b01 	lsleq	r1, r1, #22
    1bc4:	0ad00000 	beq	ff401bcc <__bss_end__+0xff3f72ec>
    1bc8:	32180000 	andscc	r0, r8, #0
    1bcc:	f4000001 	vst4.8	{d0-d3}, [r0], r1
    1bd0:	05000003 	streq	r0, [r0, #-3]
    1bd4:	00a12403 	adceq	r2, r1, r3, lsl #8
    1bd8:	00651b00 	rsbeq	r1, r5, r0, lsl #22
    1bdc:	01681e01 	cmneq	r8, r1, lsl #28
    1be0:	0b230000 	bleq	8c1be8 <__bss_end__+0x8b7308>
    1be4:	081a0000 	ldmdaeq	sl, {}	; <UNPREDICTABLE>
    1be8:	8900008c 	stmdbhi	r0, {r2, r3, r7}
    1bec:	19000009 	stmdbne	r0, {r0, r3}
    1bf0:	00008c1c 	andeq	r8, r0, ip, lsl ip
    1bf4:	00000990 	muleq	r0, r0, r9
    1bf8:	00000384 	andeq	r0, r0, r4, lsl #7
    1bfc:	01530117 	cmpeq	r3, r7, lsl r1
    1c00:	5201174c 	andpl	r1, r1, #76, 14	; 0x1300000
    1c04:	a1240305 	teqge	r4, r5, lsl #6
    1c08:	01170000 	tsteq	r7, r0
    1c0c:	98030551 	stmdals	r3, {r0, r4, r6, r8, sl}
    1c10:	170000a1 	strne	r0, [r0, -r1, lsr #1]
    1c14:	03055001 	movweq	r5, #20481	; 0x5001
    1c18:	0000a1d4 	ldrdeq	sl, [r0], -r4
    1c1c:	8c201a00 	stchi	10, cr1, [r0], #-0
    1c20:	09a60000 	stmibeq	r6!, {}	; <UNPREDICTABLE>
    1c24:	30190000 	andscc	r0, r9, r0
    1c28:	3c00008c 	stccc	0, cr0, [r0], {140}	; 0x8c
    1c2c:	a2000002 	andge	r0, r0, #2
    1c30:	17000003 	strne	r0, [r0, -r3]
    1c34:	f3035001 	vhadd.u8	d5, d3, d1
    1c38:	1a005001 	bne	15c44 <__bss_end__+0xb364>
    1c3c:	00008c3c 	andeq	r8, r0, ip, lsr ip
    1c40:	00000989 	andeq	r0, r0, r9, lsl #19
    1c44:	008c5019 	addeq	r5, ip, r9, lsl r0
    1c48:	00099000 	andeq	r9, r9, r0
    1c4c:	0003da00 	andeq	sp, r3, r0, lsl #20
    1c50:	53011700 	movwpl	r1, #5888	; 0x1700
    1c54:	17200802 	strne	r0, [r0, -r2, lsl #16]!
    1c58:	03055201 	movweq	r5, #20993	; 0x5201
    1c5c:	0000a124 	andeq	sl, r0, r4, lsr #2
    1c60:	05510117 	ldrbeq	r0, [r1, #-279]	; 0x117
    1c64:	00a19803 	adceq	r9, r1, r3, lsl #16
    1c68:	50011700 	andpl	r1, r1, r0, lsl #14
    1c6c:	a1fc0305 	mvnsge	r0, r5, lsl #6
    1c70:	1a000000 	bne	1c78 <_start-0x6388>
    1c74:	00008c54 	andeq	r8, r0, r4, asr ip
    1c78:	000009a6 	andeq	r0, r0, r6, lsr #19
    1c7c:	007f0800 	rsbseq	r0, pc, r0, lsl #16
    1c80:	03f40000 	mvnseq	r0, #0
    1c84:	76090000 	strvc	r0, [r9], -r0
    1c88:	05000000 	streq	r0, [r0, #-0]
    1c8c:	03e40700 	mvneq	r0, #0, 14
    1c90:	84120000 	ldrhi	r0, [r2], #-0
    1c94:	02000006 	andeq	r0, r0, #6
    1c98:	0001681b 	andeq	r6, r1, fp, lsl r8
    1c9c:	008c9000 	addeq	r9, ip, r0
    1ca0:	00008400 	andeq	r8, r0, r0, lsl #8
    1ca4:	a19c0100 	orrsge	r0, ip, r0, lsl #2
    1ca8:	1b000004 	blne	1cc0 <_start-0x6340>
    1cac:	1c020074 	stcne	0, cr0, [r2], {116}	; 0x74
    1cb0:	00000168 	andeq	r0, r0, r8, ror #2
    1cb4:	00000b41 	andeq	r0, r0, r1, asr #22
    1cb8:	00013218 	andeq	r3, r1, r8, lsl r2
    1cbc:	0004b100 	andeq	fp, r4, r0, lsl #2
    1cc0:	2c030500 	cfstr32cs	mvfx0, [r3], {-0}
    1cc4:	190000a1 	stmdbne	r0, {r0, r5, r7}
    1cc8:	00008c9c 	muleq	r0, ip, ip
    1ccc:	0000030b 	andeq	r0, r0, fp, lsl #6
    1cd0:	00000445 	andeq	r0, r0, r5, asr #8
    1cd4:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    1cd8:	00a8bc03 	adceq	fp, r8, r3, lsl #24
    1cdc:	b0190000 	andslt	r0, r9, r0
    1ce0:	ad00008c 	stcge	0, cr0, [r0, #-560]	; 0xfffffdd0
    1ce4:	5f000009 	svcpl	0x00000009
    1ce8:	17000004 	strne	r0, [r0, -r4]
    1cec:	38015101 	stmdacc	r1, {r0, r8, ip, lr}
    1cf0:	03500117 	cmpeq	r0, #-1073741819	; 0xc0000005
    1cf4:	0020500a 	eoreq	r5, r0, sl
    1cf8:	008ccc1a 	addeq	ip, ip, sl, lsl ip
    1cfc:	00098900 	andeq	r8, r9, r0, lsl #18
    1d00:	8ce01900 	stclhi	9, cr1, [r0]
    1d04:	09900000 	ldmibeq	r0, {}	; <UNPREDICTABLE>
    1d08:	04970000 	ldreq	r0, [r7], #0
    1d0c:	01170000 	tsteq	r7, r0
    1d10:	23080253 	movwcs	r0, #33363	; 0x8253
    1d14:	05520117 	ldrbeq	r0, [r2, #-279]	; 0x117
    1d18:	00a12c03 	adceq	r2, r1, r3, lsl #24
    1d1c:	51011700 	tstpl	r1, r0, lsl #14
    1d20:	a2780305 	rsbsge	r0, r8, #335544320	; 0x14000000
    1d24:	01170000 	tsteq	r7, r0
    1d28:	18030550 	stmdane	r3, {r4, r6, r8, sl}
    1d2c:	000000a2 	andeq	r0, r0, r2, lsr #1
    1d30:	008ce41a 	addeq	lr, ip, sl, lsl r4
    1d34:	0009a600 	andeq	sl, r9, r0, lsl #12
    1d38:	7f080000 	svcvc	0x00080000
    1d3c:	b1000000 	mrslt	r0, (UNDEF: 0)
    1d40:	09000004 	stmdbeq	r0, {r2}
    1d44:	00000076 	andeq	r0, r0, r6, ror r0
    1d48:	a1070008 	tstge	r7, r8
    1d4c:	1c000004 	stcne	0, cr0, [r0], {4}
    1d50:	000005dd 	ldrdeq	r0, [r0], -sp
    1d54:	01681402 	cmneq	r8, r2, lsl #8
    1d58:	8d140000 	ldchi	0, cr0, [r4, #-0]
    1d5c:	00100000 	andseq	r0, r0, r0
    1d60:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d64:	00009d1d 	andeq	r9, r0, sp, lsl sp
    1d68:	68320200 	ldmdavs	r2!, {r9}
    1d6c:	24000001 	strcs	r0, [r0], #-1
    1d70:	4c00008d 	stcmi	0, cr0, [r0], {141}	; 0x8d
    1d74:	01000000 	mrseq	r0, (UNDEF: 0)
    1d78:	0005399c 	muleq	r5, ip, r9
    1d7c:	05f91e00 	ldrbeq	r1, [r9, #3584]!	; 0xe00
    1d80:	32020000 	andcc	r0, r2, #0
    1d84:	00000117 	andeq	r0, r0, r7, lsl r1
    1d88:	00000b6a 	andeq	r0, r0, sl, ror #22
    1d8c:	67726113 			; <UNDEFINED> instruction: 0x67726113
    1d90:	7d320200 	lfmvc	f0, 4, [r2, #-0]
    1d94:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    1d98:	1b00000b 	blne	1dcc <_start-0x6234>
    1d9c:	33020074 	movwcc	r0, #8308	; 0x2074
    1da0:	00000168 	andeq	r0, r0, r8, ror #2
    1da4:	00000ba6 	andeq	r0, r0, r6, lsr #23
    1da8:	0006261f 	andeq	r2, r6, pc, lsl r6
    1dac:	1a3c0200 	bne	f025b4 <__bss_end__+0xef7cd4>
    1db0:	00008d34 	andeq	r8, r0, r4, lsr sp
    1db4:	000003f9 	strdeq	r0, [r0], -r9
    1db8:	008d6016 	addeq	r6, sp, r6, lsl r0
    1dbc:	0001a600 	andeq	sl, r1, r0, lsl #12
    1dc0:	51011700 	tstpl	r1, r0, lsl #14
    1dc4:	17007402 	strne	r7, [r0, -r2, lsl #8]
    1dc8:	03055001 	movweq	r5, #20481	; 0x5001
    1dcc:	0000a8d0 	ldrdeq	sl, [r0], -r0
    1dd0:	dc200000 	stcle	0, cr0, [r0], #-0
    1dd4:	02000006 	andeq	r0, r0, #6
    1dd8:	008d7045 	addeq	r7, sp, r5, asr #32
    1ddc:	00005800 	andeq	r5, r0, r0, lsl #16
    1de0:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
    1de4:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    1de8:	000005f5 	strdeq	r0, [r0], -r5
    1dec:	00254502 	eoreq	r4, r5, r2, lsl #10
    1df0:	0bc40000 	bleq	ff101df8 <__bss_end__+0xff0f7518>
    1df4:	c8210000 	stmdagt	r1!, {}	; <UNPREDICTABLE>
    1df8:	02000006 	andeq	r0, r0, #6
    1dfc:	0001684f 	andeq	r6, r1, pc, asr #16
    1e00:	19540100 	ldmdbne	r4, {r8}^
    1e04:	00008d84 	andeq	r8, r0, r4, lsl #27
    1e08:	000001fe 	strdeq	r0, [r0], -lr
    1e0c:	0000057e 	andeq	r0, r0, lr, ror r5
    1e10:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    1e14:	19000074 	stmdbne	r0, {r2, r4, r5, r6}
    1e18:	00008d8c 	andeq	r8, r0, ip, lsl #27
    1e1c:	0000023c 	andeq	r0, r0, ip, lsr r2
    1e20:	00000592 	muleq	r0, r2, r5
    1e24:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    1e28:	19001475 	stmdbne	r0, {r0, r2, r4, r5, r6, sl, ip}
    1e2c:	00008d9c 	muleq	r0, ip, sp
    1e30:	0000030b 	andeq	r0, r0, fp, lsl #6
    1e34:	000005a6 	andeq	r0, r0, r6, lsr #11
    1e38:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    1e3c:	16001475 			; <UNDEFINED> instruction: 0x16001475
    1e40:	00008dc0 	andeq	r8, r0, r0, asr #27
    1e44:	000009c7 	andeq	r0, r0, r7, asr #19
    1e48:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    1e4c:	00000074 	andeq	r0, r0, r4, ror r0
    1e50:	00017120 	andeq	r7, r1, r0, lsr #2
    1e54:	c85c0200 	ldmdagt	ip, {r9}^
    1e58:	5000008d 	andpl	r0, r0, sp, lsl #1
    1e5c:	01000000 	mrseq	r0, (UNDEF: 0)
    1e60:	0006399c 	muleq	r6, ip, r9
    1e64:	8ddc2200 	lfmhi	f2, 2, [ip]
    1e68:	003c0000 	eorseq	r0, ip, r0
    1e6c:	06250000 	strteq	r0, [r5], -r0
    1e70:	c8210000 	stmdagt	r1!, {}	; <UNPREDICTABLE>
    1e74:	02000006 	andeq	r0, r0, #6
    1e78:	00016866 	andeq	r6, r1, r6, ror #16
    1e7c:	19550100 	ldmdbne	r5, {r8}^
    1e80:	00008df4 	strdeq	r8, [r0], -r4
    1e84:	000001a6 	andeq	r0, r0, r6, lsr #3
    1e88:	00000600 	andeq	r0, r0, r0, lsl #12
    1e8c:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
    1e90:	01170075 	tsteq	r7, r5, ror r0
    1e94:	00760250 	rsbseq	r0, r6, r0, asr r2
    1e98:	8dfc1900 	ldclhi	9, cr1, [ip]
    1e9c:	030b0000 	movweq	r0, #45056	; 0xb000
    1ea0:	06140000 	ldreq	r0, [r4], -r0
    1ea4:	01170000 	tsteq	r7, r0
    1ea8:	00760250 	rsbseq	r0, r6, r0, asr r2
    1eac:	8e0c1600 	cfmadd32hi	mvax0, mvfx1, mvfx12, mvfx0
    1eb0:	09c70000 	stmibeq	r7, {}^	; <UNPREDICTABLE>
    1eb4:	01170000 	tsteq	r7, r0
    1eb8:	00750250 	rsbseq	r0, r5, r0, asr r2
    1ebc:	d4160000 	ldrle	r0, [r6], #-0
    1ec0:	3c00008d 	stccc	0, cr0, [r0], {141}	; 0x8d
    1ec4:	17000002 	strne	r0, [r0, -r2]
    1ec8:	03055001 	movweq	r5, #20481	; 0x5001
    1ecc:	0000a8d0 	ldrdeq	sl, [r0], -r0
    1ed0:	0b200000 	bleq	801ed8 <__bss_end__+0x7f75f8>
    1ed4:	02000006 	andeq	r0, r0, #6
    1ed8:	008e188c 	addeq	r1, lr, ip, lsl #17
    1edc:	00009c00 	andeq	r9, r0, r0, lsl #24
    1ee0:	319c0100 	orrscc	r0, ip, r0, lsl #2
    1ee4:	23000007 	movwcs	r0, #7
    1ee8:	00000604 	andeq	r0, r0, r4, lsl #12
    1eec:	002c8f02 	eoreq	r8, ip, r2, lsl #30
    1ef0:	0be50000 	bleq	ff941ef8 <__bss_end__+0xff937618>
    1ef4:	fe230000 	cdp2	0, 2, cr0, cr3, cr0, {0}
    1ef8:	02000005 	andeq	r0, r0, #5
    1efc:	00002c90 	muleq	r0, r0, ip
    1f00:	000c0300 	andeq	r0, ip, r0, lsl #6
    1f04:	006e1b00 	rsbeq	r1, lr, r0, lsl #22
    1f08:	002c9102 	eoreq	r9, ip, r2, lsl #2
    1f0c:	0c370000 	ldceq	0, cr0, [r7], #-0
    1f10:	32180000 	andscc	r0, r8, #0
    1f14:	41000001 	tstmi	r0, r1
    1f18:	05000007 	streq	r0, [r0, #-7]
    1f1c:	00a13803 	adceq	r3, r1, r3, lsl #16
    1f20:	8e2c1900 	cdphi	9, 2, cr1, cr12, cr0, {0}
    1f24:	01790000 	cmneq	r9, r0
    1f28:	069c0000 	ldreq	r0, [ip], r0
    1f2c:	01170000 	tsteq	r7, r0
    1f30:	00740250 	rsbseq	r0, r4, r0, asr r2
    1f34:	8e381900 	cdphi	9, 3, cr1, cr8, cr0, {0}
    1f38:	01790000 	cmneq	r9, r0
    1f3c:	06b00000 	ldrteq	r0, [r0], r0
    1f40:	01170000 	tsteq	r7, r0
    1f44:	14740250 	ldrbtne	r0, [r4], #-592	; 0x250
    1f48:	8e501a00 	vnmlshi.f32	s3, s0, s0
    1f4c:	09890000 	stmibeq	r9, {}	; <UNPREDICTABLE>
    1f50:	78190000 	ldmdavc	r9, {}	; <UNPREDICTABLE>
    1f54:	9000008e 	andls	r0, r0, lr, lsl #1
    1f58:	fd000009 	stc2	0, cr0, [r0, #-36]	; 0xffffffdc
    1f5c:	17000006 	strne	r0, [r0, -r6]
    1f60:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    1f64:	52011795 	andpl	r1, r1, #39059456	; 0x2540000
    1f68:	a1380305 	teqge	r8, r5, lsl #6
    1f6c:	01170000 	tsteq	r7, r0
    1f70:	78030551 	stmdavc	r3, {r0, r4, r6, r8, sl}
    1f74:	170000a2 	strne	r0, [r0, -r2, lsr #1]
    1f78:	03055001 	movweq	r5, #20481	; 0x5001
    1f7c:	0000a28c 	andeq	sl, r0, ip, lsl #5
    1f80:	0c7d0217 	lfmeq	f0, 2, [sp], #-92	; 0xffffffa4
    1f84:	17007502 	strne	r7, [r0, -r2, lsl #10]
    1f88:	02087d02 	andeq	r7, r8, #2, 26	; 0x80
    1f8c:	02170076 	andseq	r0, r7, #118	; 0x76
    1f90:	7702047d 	smlsdxvc	r2, sp, r4, r0
    1f94:	7c1a0000 	ldcvc	0, cr0, [sl], {-0}
    1f98:	a600008e 	strge	r0, [r0], -lr, lsl #1
    1f9c:	19000009 	stmdbne	r0, {r0, r3}
    1fa0:	00008e84 	andeq	r8, r0, r4, lsl #29
    1fa4:	0000023c 	andeq	r0, r0, ip, lsr r2
    1fa8:	0000071d 	andeq	r0, r0, sp, lsl r7
    1fac:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    1fb0:	00a8d003 	adceq	sp, r8, r3
    1fb4:	94160000 	ldrls	r0, [r6], #-0
    1fb8:	9000008e 	andls	r0, r0, lr, lsl #1
    1fbc:	17000009 	strne	r0, [r0, -r9]
    1fc0:	03055001 	movweq	r5, #20481	; 0x5001
    1fc4:	0000a2e4 	andeq	sl, r0, r4, ror #5
    1fc8:	7f080000 	svcvc	0x00080000
    1fcc:	41000000 	mrsmi	r0, (UNDEF: 0)
    1fd0:	09000007 	stmdbeq	r0, {r0, r1, r2}
    1fd4:	00000076 	andeq	r0, r0, r6, ror r0
    1fd8:	31070012 	tstcc	r7, r2, lsl r0
    1fdc:	20000007 	andcs	r0, r0, r7
    1fe0:	00000119 	andeq	r0, r0, r9, lsl r1
    1fe4:	8eb47302 	cdphi	3, 11, cr7, cr4, cr2, {0}
    1fe8:	00540000 	subseq	r0, r4, r0
    1fec:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ff0:	000007b5 			; <UNDEFINED> instruction: 0x000007b5
    1ff4:	008ec019 	addeq	ip, lr, r9, lsl r0
    1ff8:	00023c00 	andeq	r3, r2, r0, lsl #24
    1ffc:	00077200 	andeq	r7, r7, r0, lsl #4
    2000:	50011700 	andpl	r1, r1, r0, lsl #14
    2004:	a8d00305 	ldmge	r0, {r0, r2, r8, r9}^
    2008:	1a000000 	bne	2010 <_start-0x5ff0>
    200c:	00008ecc 	andeq	r8, r0, ip, asr #29
    2010:	00000639 	andeq	r0, r0, r9, lsr r6
    2014:	008ed01a 	addeq	sp, lr, sl, lsl r0
    2018:	0003f900 	andeq	pc, r3, r0, lsl #18
    201c:	8ee01900 	cdphi	9, 14, cr1, cr0, cr0, {0}
    2020:	030b0000 	movweq	r0, #45056	; 0xb000
    2024:	07980000 	ldreq	r0, [r8, r0]
    2028:	01170000 	tsteq	r7, r0
    202c:	14740250 	ldrbtne	r0, [r4], #-592	; 0x250
    2030:	8ef01a00 	vmovhi.f32	s3, #0
    2034:	09c70000 	stmibeq	r7, {}^	; <UNPREDICTABLE>
    2038:	f8160000 			; <UNDEFINED> instruction: 0xf8160000
    203c:	9000008e 	andls	r0, r0, lr, lsl #1
    2040:	17000009 	strne	r0, [r0, -r9]
    2044:	03055001 	movweq	r5, #20481	; 0x5001
    2048:	0000a304 	andeq	sl, r0, r4, lsl #6
    204c:	3a200000 	bcc	802054 <__bss_end__+0x7f7774>
    2050:	02000006 	andeq	r0, r0, #6
    2054:	008f08a2 	addeq	r0, pc, r2, lsr #17
    2058:	00002c00 	andeq	r2, r0, r0, lsl #24
    205c:	1b9c0100 	blne	fe702464 <__bss_end__+0xfe6f7b84>
    2060:	18000008 	stmdane	r0, {r3}
    2064:	00000132 	andeq	r0, r0, r2, lsr r1
    2068:	0000082b 	andeq	r0, r0, fp, lsr #16
    206c:	a14c0305 	cmpge	ip, r5, lsl #6
    2070:	101a0000 	andsne	r0, sl, r0
    2074:	8900008f 	stmdbhi	r0, {r0, r1, r2, r3, r7}
    2078:	19000009 	stmdbne	r0, {r0, r3}
    207c:	00008f24 	andeq	r8, r0, r4, lsr #30
    2080:	00000990 	muleq	r0, r0, r9
    2084:	00000811 	andeq	r0, r0, r1, lsl r8
    2088:	02530117 	subseq	r0, r3, #-1073741819	; 0xc0000005
    208c:	0117a308 	tsteq	r7, r8, lsl #6
    2090:	4c030552 	cfstr32mi	mvfx0, [r3], {82}	; 0x52
    2094:	170000a1 	strne	r0, [r0, -r1, lsr #1]
    2098:	03055101 	movweq	r5, #20737	; 0x5101
    209c:	0000a278 	andeq	sl, r0, r8, ror r2
    20a0:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    20a4:	00a33403 	adceq	r3, r3, r3, lsl #8
    20a8:	281a0000 	ldmdacs	sl, {}	; <UNPREDICTABLE>
    20ac:	a600008f 	strge	r0, [r0], -pc, lsl #1
    20b0:	00000009 	andeq	r0, r0, r9
    20b4:	00007f08 	andeq	r7, r0, r8, lsl #30
    20b8:	00082b00 	andeq	r2, r8, r0, lsl #22
    20bc:	00760900 	rsbseq	r0, r6, r0, lsl #18
    20c0:	000f0000 	andeq	r0, pc, r0
    20c4:	00081b07 	andeq	r1, r8, r7, lsl #22
    20c8:	05ec2000 	strbeq	r2, [ip, #0]!
    20cc:	ab020000 	blge	820d4 <__bss_end__+0x777f4>
    20d0:	00008f34 	andeq	r8, r0, r4, lsr pc
    20d4:	0000002c 	andeq	r0, r0, ip, lsr #32
    20d8:	08a49c01 	stmiaeq	r4!, {r0, sl, fp, ip, pc}
    20dc:	74130000 	ldrvc	r0, [r3], #-0
    20e0:	ab020068 	blge	82288 <__bss_end__+0x779a8>
    20e4:	00000168 	andeq	r0, r0, r8, ror #2
    20e8:	00000c4a 	andeq	r0, r0, sl, asr #24
    20ec:	00013218 	andeq	r3, r1, r8, lsl r2
    20f0:	0008a400 	andeq	sl, r8, r0, lsl #8
    20f4:	5c030500 	cfstr32pl	mvfx0, [r3], {-0}
    20f8:	1a0000a1 	bne	2384 <_start-0x5c7c>
    20fc:	00008f3c 	andeq	r8, r0, ip, lsr pc
    2100:	00000989 	andeq	r0, r0, r9, lsl #19
    2104:	008f5019 	addeq	r5, pc, r9, lsl r0	; <UNPREDICTABLE>
    2108:	00099000 	andeq	r9, r9, r0
    210c:	00089a00 	andeq	r9, r8, r0, lsl #20
    2110:	53011700 	movwpl	r1, #5888	; 0x1700
    2114:	17ac0802 	strne	r0, [ip, r2, lsl #16]!
    2118:	03055201 	movweq	r5, #20993	; 0x5201
    211c:	0000a15c 	andeq	sl, r0, ip, asr r1
    2120:	05510117 	ldrbeq	r0, [r1, #-279]	; 0x117
    2124:	00a27803 	adceq	r7, r2, r3, lsl #16
    2128:	50011700 	andpl	r1, r1, r0, lsl #14
    212c:	a3340305 	teqge	r4, #335544320	; 0x14000000
    2130:	1a000000 	bne	2138 <_start-0x5ec8>
    2134:	00008f54 	andeq	r8, r0, r4, asr pc
    2138:	000009a6 	andeq	r0, r0, r6, lsr #19
    213c:	04a10700 	strteq	r0, [r1], #1792	; 0x700
    2140:	50200000 	eorpl	r0, r0, r0
    2144:	02000006 	andeq	r0, r0, #6
    2148:	008f60b2 	strheq	r6, [pc], r2
    214c:	00002c00 	andeq	r2, r0, r0, lsl #24
    2150:	1e9c0100 	fmlnee	f0, f4, f0
    2154:	1e000009 	cdpne	0, 0, cr0, cr0, cr9, {0}
    2158:	00000810 	andeq	r0, r0, r0, lsl r8
    215c:	005db202 	subseq	fp, sp, r2, lsl #4
    2160:	0c6b0000 	stcleq	0, cr0, [fp], #-0
    2164:	32180000 	andscc	r0, r8, #0
    2168:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
    216c:	05000009 	streq	r0, [r0, #-9]
    2170:	00a16803 	adceq	r6, r1, r3, lsl #16
    2174:	8f681a00 	svchi	0x00681a00
    2178:	09890000 	stmibeq	r9, {}	; <UNPREDICTABLE>
    217c:	7c190000 	ldcvc	0, cr0, [r9], {-0}
    2180:	9000008f 	andls	r0, r0, pc, lsl #1
    2184:	14000009 	strne	r0, [r0], #-9
    2188:	17000009 	strne	r0, [r0, -r9]
    218c:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    2190:	520117b3 	andpl	r1, r1, #46923776	; 0x2cc0000
    2194:	a1680305 	cmnge	r8, r5, lsl #6
    2198:	01170000 	tsteq	r7, r0
    219c:	78030551 	stmdavc	r3, {r0, r4, r6, r8, sl}
    21a0:	170000a2 	strne	r0, [r0, -r2, lsr #1]
    21a4:	03055001 	movweq	r5, #20481	; 0x5001
    21a8:	0000a334 	andeq	sl, r0, r4, lsr r3
    21ac:	8f801a00 	svchi	0x00801a00
    21b0:	09a60000 	stmibeq	r6!, {}	; <UNPREDICTABLE>
    21b4:	07000000 	streq	r0, [r0, -r0]
    21b8:	0000081b 	andeq	r0, r0, fp, lsl r8
    21bc:	0006a321 	andeq	sl, r6, r1, lsr #6
    21c0:	6e090200 	cdpvs	2, 0, cr0, cr9, cr0, {0}
    21c4:	05000001 	streq	r0, [r0, #-1]
    21c8:	00a8d003 	adceq	sp, r8, r3
    21cc:	064a2100 	strbeq	r2, [sl], -r0, lsl #2
    21d0:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    21d4:	0000016e 	andeq	r0, r0, lr, ror #2
    21d8:	a8bc0305 	ldmge	ip!, {r0, r2, r8, r9}
    21dc:	e1210000 	teq	r1, r0
    21e0:	02000005 	andeq	r0, r0, #5
    21e4:	0001680b 	andeq	r6, r1, fp, lsl #16
    21e8:	cc030500 	cfstr32gt	mvfx0, [r3], {-0}
    21ec:	210000a8 	smlatbcs	r0, r8, r0, r0
    21f0:	0000066e 	andeq	r0, r0, lr, ror #12
    21f4:	01680c02 	cmneq	r8, r2, lsl #24
    21f8:	03050000 	movweq	r0, #20480	; 0x5000
    21fc:	0000a8dc 	ldrdeq	sl, [r0], -ip
    2200:	64697424 	strbtvs	r7, [r9], #-1060	; 0x424
    2204:	2c0f0200 	sfmcs	f0, 4, [pc], {-0}
    2208:	05000000 	streq	r0, [r0, #-0]
    220c:	009db003 	addseq	fp, sp, r3
    2210:	06d32100 	ldrbeq	r2, [r3], r0, lsl #2
    2214:	11020000 	mrsne	r0, (UNDEF: 2)
    2218:	0000002c 	andeq	r0, r0, ip, lsr #32
    221c:	a8c80305 	stmiage	r8, {r0, r2, r8, r9}^
    2220:	cb1f0000 	blgt	7c2228 <__bss_end__+0x7b7948>
    2224:	03000001 	movweq	r0, #1
    2228:	01fa251e 	mvnseq	r2, lr, lsl r5
    222c:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
    2230:	00000025 	andeq	r0, r0, r5, lsr #32
    2234:	000009a6 	andeq	r0, r0, r6, lsr #19
    2238:	0000860e 	andeq	r8, r0, lr, lsl #12
    223c:	1f002600 	svcne	0x00002600
    2240:	00000090 	muleq	r0, r0, r0
    2244:	1a256603 	bne	95ba58 <__bss_end__+0x951178>
    2248:	03000005 	movweq	r0, #5
    224c:	00007d6e 	andeq	r7, r0, lr, ror #26
    2250:	0009c700 	andeq	ip, r9, r0, lsl #14
    2254:	002c0e00 	eoreq	r0, ip, r0, lsl #28
    2258:	2c0e0000 	stccs	0, cr0, [lr], {-0}
    225c:	00000000 	andeq	r0, r0, r0
    2260:	0006a827 	andeq	sl, r6, r7, lsr #16
    2264:	ddfe0300 	ldclle	3, cr0, [lr]
    2268:	0e000009 	cdpeq	0, 0, cr0, cr0, cr9, {0}
    226c:	000009dd 	ldrdeq	r0, [r0], -sp
    2270:	0009dd0e 	andeq	sp, r9, lr, lsl #26
    2274:	04060000 	streq	r0, [r6], #-0
    2278:	0000005d 	andeq	r0, r0, sp, asr r0
    227c:	0011ca00 	andseq	ip, r1, r0, lsl #20
    2280:	d8000400 	stmdale	r0, {sl}
    2284:	0400000d 	streq	r0, [r0], #-13
    2288:	00000b01 	andeq	r0, r0, r1, lsl #22
    228c:	07840100 	streq	r0, [r4, r0, lsl #2]
    2290:	020b0000 	andeq	r0, fp, #0
    2294:	8f8c0000 	svchi	0x008c0000
    2298:	06200000 	strteq	r0, [r0], -r0
    229c:	0b290000 	bleq	a422a4 <__bss_end__+0xa379c4>
    22a0:	04020000 	streq	r0, [r2], #-0
    22a4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    22a8:	07040300 	streq	r0, [r4, -r0, lsl #6]
    22ac:	00000157 	andeq	r0, r0, r7, asr r1
    22b0:	84060103 	strhi	r0, [r6], #-259	; 0x103
    22b4:	03000000 	movweq	r0, #0
    22b8:	019d0502 	orrseq	r0, sp, r2, lsl #10
    22bc:	04030000 	streq	r0, [r3], #-0
    22c0:	00018905 	andeq	r8, r1, r5, lsl #18
    22c4:	05080300 	streq	r0, [r8, #-768]	; 0x300
    22c8:	00000184 	andeq	r0, r0, r4, lsl #3
    22cc:	0003e404 	andeq	lr, r3, r4, lsl #8
    22d0:	5a2e0300 	bpl	b82ed8 <__bss_end__+0xb785f8>
    22d4:	03000000 	movweq	r0, #0
    22d8:	00820801 	addeq	r0, r2, r1, lsl #16
    22dc:	02030000 	andeq	r0, r3, #0
    22e0:	0000a607 	andeq	sl, r0, r7, lsl #12
    22e4:	01b50400 			; <UNDEFINED> instruction: 0x01b50400
    22e8:	34030000 	strcc	r0, [r3], #-0
    22ec:	00000073 	andeq	r0, r0, r3, ror r0
    22f0:	52070403 	andpl	r0, r7, #50331648	; 0x3000000
    22f4:	03000001 	movweq	r0, #1
    22f8:	014d0708 	cmpeq	sp, r8, lsl #14
    22fc:	04030000 	streq	r0, [r3], #-0
    2300:	00017b07 	andeq	r7, r1, r7, lsl #22
    2304:	06040500 	streq	r0, [r4], -r0, lsl #10
    2308:	00009004 	andeq	r9, r0, r4
    230c:	08010300 	stmdaeq	r1, {r8, r9}
    2310:	0000008b 	andeq	r0, r0, fp, lsl #1
    2314:	009d0406 	addseq	r0, sp, r6, lsl #8
    2318:	90070000 	andls	r0, r7, r0
    231c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2320:	d90e040c 	stmdble	lr, {r2, r3, sl}
    2324:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2328:	04007874 	streq	r7, [r0], #-2164	; 0x874
    232c:	00004f0f 	andeq	r4, r0, pc, lsl #30
    2330:	72090000 	andvc	r0, r9, #0
    2334:	0f040078 	svceq	0x00040078
    2338:	0000004f 	andeq	r0, r0, pc, asr #32
    233c:	03b20a01 			; <UNDEFINED> instruction: 0x03b20a01
    2340:	10040000 	andne	r0, r4, r0
    2344:	00000068 	andeq	r0, r0, r8, rrx
    2348:	03630a04 	cmneq	r3, #4, 20	; 0x4000
    234c:	11040000 	mrsne	r0, (UNDEF: 4)
    2350:	00000068 	andeq	r0, r0, r8, rrx
    2354:	9b040008 	blls	10237c <__bss_end__+0xf7a9c>
    2358:	04000003 	streq	r0, [r0], #-3
    235c:	0000a212 	andeq	sl, r0, r2, lsl r2
    2360:	01da0400 	bicseq	r0, sl, r0, lsl #8
    2364:	28050000 	stmdacs	r5, {}	; <UNPREDICTABLE>
    2368:	000000ef 	andeq	r0, r0, pc, ror #1
    236c:	0002010b 	andeq	r0, r2, fp, lsl #2
    2370:	00090400 	andeq	r0, r9, r0, lsl #8
    2374:	00000106 	andeq	r0, r0, r6, lsl #2
    2378:	0002540c 	andeq	r5, r2, ip, lsl #8
    237c:	00008800 	andeq	r8, r0, r0, lsl #16
    2380:	04000000 	streq	r0, [r0], #-0
    2384:	00000203 	andeq	r0, r0, r3, lsl #4
    2388:	00e46205 	rsceq	r6, r4, r5, lsl #4
    238c:	3e0d0000 	cdpcc	0, 0, cr0, cr13, cr0, {0}
    2390:	02000007 	andeq	r0, r0, #7
    2394:	013f0309 	teqeq	pc, r9, lsl #6
    2398:	240e0000 	strcs	r0, [lr], #-0
    239c:	02000001 	andeq	r0, r0, #1
    23a0:	00002c09 	andeq	r2, r0, r9, lsl #24
    23a4:	006e0f00 	rsbeq	r0, lr, r0, lsl #30
    23a8:	002c0902 	eoreq	r0, ip, r2, lsl #18
    23ac:	11100000 	tstne	r0, r0
    23b0:	000007b2 			; <UNDEFINED> instruction: 0x000007b2
    23b4:	002c0c02 	eoreq	r0, ip, r2, lsl #24
    23b8:	00000000 	andeq	r0, r0, r0
    23bc:	0006f10d 	andeq	pc, r6, sp, lsl #2
    23c0:	03170200 	tsteq	r7, #0, 4
    23c4:	00000176 	andeq	r0, r0, r6, ror r1
    23c8:	6e69700f 	cdpvs	0, 6, cr7, cr9, cr15, {0}
    23cc:	2c170200 	lfmcs	f0, 4, [r7], {-0}
    23d0:	0f000000 	svceq	0x00000000
    23d4:	17020076 	smlsdxne	r2, r6, r0, r0
    23d8:	0000002c 	andeq	r0, r0, ip, lsr #32
    23dc:	0001240e 	andeq	r2, r1, lr, lsl #8
    23e0:	2c170200 	lfmcs	f0, 4, [r7], {-0}
    23e4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    23e8:	00000744 	andeq	r0, r0, r4, asr #14
    23ec:	002c1702 	eoreq	r1, ip, r2, lsl #14
    23f0:	12000000 	andne	r0, r0, #0
    23f4:	000003d7 	ldrdeq	r0, [r0], -r7
    23f8:	8f8c0901 	svchi	0x008c0901
    23fc:	01540000 	cmpeq	r4, r0
    2400:	9c010000 	stcls	0, cr0, [r1], {-0}
    2404:	00000722 	andeq	r0, r0, r2, lsr #14
    2408:	00037913 	andeq	r7, r3, r3, lsl r9
    240c:	22090100 	andcs	r0, r9, #0, 2
    2410:	8c000007 	stchi	0, cr0, [r0], {7}
    2414:	1400000c 	strne	r0, [r0], #-12
    2418:	09010063 	stmdbeq	r1, {r0, r1, r5, r6}
    241c:	0000005a 	andeq	r0, r0, sl, asr r0
    2420:	00000cad 	andeq	r0, r0, sp, lsr #25
    2424:	00787415 	rsbseq	r7, r8, r5, lsl r4
    2428:	00250b01 	eoreq	r0, r5, r1, lsl #22
    242c:	76060000 	strvc	r0, [r6], -r0
    2430:	1aff0800 	bne	fffc4438 <__bss_end__+0xfffb9b58>
    2434:	006e169f 	mlseq	lr, pc, r6, r1	; <UNPREDICTABLE>
    2438:	00680c01 	rsbeq	r0, r8, r1, lsl #24
    243c:	0cce0000 	stcleq	0, cr0, [lr], {0}
    2440:	75160000 	ldrvc	r0, [r6, #-0]
    2444:	680d0100 	stmdavs	sp, {r8}
    2448:	e1000000 	mrs	r0, (UNDEF: 0)
    244c:	1500000c 	strne	r0, [r0, #-12]
    2450:	0e010073 	mcreq	0, 0, r0, cr1, cr3, {3}
    2454:	00000068 	andeq	r0, r0, r8, rrx
    2458:	9c175401 	cfldrsls	mvf5, [r7], {1}
    245c:	0400008f 	streq	r0, [r0], #-143	; 0x8f
    2460:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    2464:	18000001 	stmdane	r0, {r0}
    2468:	000007b2 			; <UNDEFINED> instruction: 0x000007b2
    246c:	002c0e01 	eoreq	r0, ip, r1, lsl #28
    2470:	54010000 	strpl	r0, [r1], #-0
    2474:	013f1900 	teqeq	pc, r0, lsl #18
    2478:	8fa00000 	svchi	0x00a00000
    247c:	001c0000 	andseq	r0, ip, r0
    2480:	11010000 	mrsne	r0, (UNDEF: 1)
    2484:	00000275 	andeq	r0, r0, r5, ror r2
    2488:	00016a1a 	andeq	r6, r1, sl, lsl sl
    248c:	000d0a00 	andeq	r0, sp, r0, lsl #20
    2490:	015f1b00 	cmpeq	pc, r0, lsl #22
    2494:	54010000 	strpl	r0, [r1], #-0
    2498:	0001561c 	andeq	r5, r1, ip, lsl r6
    249c:	4b1b0000 	blmi	6c24a4 <__bss_end__+0x6b7bc4>
    24a0:	01000001 	tsteq	r0, r1
    24a4:	01111956 	tsteq	r1, r6, asr r9
    24a8:	8fac0000 	svchi	0x00ac0000
    24ac:	00100000 	andseq	r0, r0, r0
    24b0:	1a020000 	bne	824b8 <__bss_end__+0x77bd8>
    24b4:	0000025f 	andeq	r0, r0, pc, asr r2
    24b8:	0001281a 	andeq	r2, r1, sl, lsl r8
    24bc:	000d1d00 	andeq	r1, sp, r0, lsl #26
    24c0:	011d1b00 	tsteq	sp, r0, lsl #22
    24c4:	54010000 	strpl	r0, [r1], #-0
    24c8:	008fac1d 	addeq	sl, pc, sp, lsl ip	; <UNPREDICTABLE>
    24cc:	00000400 	andeq	r0, r0, r0, lsl #8
    24d0:	01321e00 	teqeq	r2, r0, lsl #28
    24d4:	0d300000 	ldceq	0, cr0, [r0, #-0]
    24d8:	00000000 	andeq	r0, r0, r0
    24dc:	008fac1f 	addeq	sl, pc, pc, lsl ip	; <UNPREDICTABLE>
    24e0:	00113100 	andseq	r3, r1, r0, lsl #2
    24e4:	51012000 	mrspl	r2, (UNDEF: 1)
    24e8:	01203001 	teqeq	r0, r1
    24ec:	00760250 	rsbseq	r0, r6, r0, asr r2
    24f0:	3f190000 	svccc	0x00190000
    24f4:	c0000001 	andgt	r0, r0, r1
    24f8:	1c00008f 	stcne	0, cr0, [r0], {143}	; 0x8f
    24fc:	01000000 	mrseq	r0, (UNDEF: 0)
    2500:	0002f813 	andeq	pc, r2, r3, lsl r8	; <UNPREDICTABLE>
    2504:	016a1a00 	cmneq	sl, r0, lsl #20
    2508:	0d430000 	stcleq	0, cr0, [r3, #-0]
    250c:	5f1b0000 	svcpl	0x001b0000
    2510:	01000001 	tsteq	r0, r1
    2514:	01561a54 	cmpeq	r6, r4, asr sl
    2518:	0d650000 	stcleq	0, cr0, [r5, #-0]
    251c:	4b1b0000 	blmi	6c2524 <__bss_end__+0x6b7c44>
    2520:	01000001 	tsteq	r0, r1
    2524:	01111956 	tsteq	r1, r6, asr r9
    2528:	8fcc0000 	svchi	0x00cc0000
    252c:	00100000 	andseq	r0, r0, r0
    2530:	1a020000 	bne	82538 <__bss_end__+0x77c58>
    2534:	000002df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2538:	0001281a 	andeq	r2, r1, sl, lsl r8
    253c:	000d9600 	andeq	r9, sp, r0, lsl #12
    2540:	011d1b00 	tsteq	sp, r0, lsl #22
    2544:	54010000 	strpl	r0, [r1], #-0
    2548:	008fcc1d 	addeq	ip, pc, sp, lsl ip	; <UNPREDICTABLE>
    254c:	00000400 	andeq	r0, r0, r0, lsl #8
    2550:	01321e00 	teqeq	r2, r0, lsl #28
    2554:	0db80000 	ldceq	0, cr0, [r8]
    2558:	00000000 	andeq	r0, r0, r0
    255c:	008fcc1f 	addeq	ip, pc, pc, lsl ip	; <UNPREDICTABLE>
    2560:	00113100 	andseq	r3, r1, r0, lsl #2
    2564:	51012000 	mrspl	r2, (UNDEF: 1)
    2568:	31007704 	tstcc	r0, r4, lsl #14
    256c:	5001201a 	andpl	r2, r1, sl, lsl r0
    2570:	00007602 	andeq	r7, r0, r2, lsl #12
    2574:	013f1900 	teqeq	pc, r0, lsl #18
    2578:	8fe00000 	svchi	0x00e00000
    257c:	001c0000 	andseq	r0, ip, r0
    2580:	15010000 	strne	r0, [r1, #-0]
    2584:	00000380 	andeq	r0, r0, r0, lsl #7
    2588:	00016a1a 	andeq	r6, r1, sl, lsl sl
    258c:	000dcb00 	andeq	ip, sp, r0, lsl #22
    2590:	015f1b00 	cmpeq	pc, r0, lsl #22
    2594:	54010000 	strpl	r0, [r1], #-0
    2598:	0001561b 	andeq	r5, r1, fp, lsl r6
    259c:	00770800 	rsbseq	r0, r7, r0, lsl #16
    25a0:	ff081a32 			; <UNDEFINED> instruction: 0xff081a32
    25a4:	4b1b9f1a 	blmi	6ea214 <__bss_end__+0x6df934>
    25a8:	01000001 	tsteq	r0, r1
    25ac:	01111956 	tsteq	r1, r6, asr r9
    25b0:	8fec0000 	svchi	0x00ec0000
    25b4:	00100000 	andseq	r0, r0, r0
    25b8:	1a020000 	bne	825c0 <__bss_end__+0x77ce0>
    25bc:	00000367 	andeq	r0, r0, r7, ror #6
    25c0:	0001281a 	andeq	r2, r1, sl, lsl r8
    25c4:	000df000 	andeq	pc, sp, r0
    25c8:	011d1b00 	tsteq	sp, r0, lsl #22
    25cc:	54010000 	strpl	r0, [r1], #-0
    25d0:	008fec1d 	addeq	lr, pc, sp, lsl ip	; <UNPREDICTABLE>
    25d4:	00000400 	andeq	r0, r0, r0, lsl #8
    25d8:	01321e00 	teqeq	r2, r0, lsl #28
    25dc:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    25e0:	00000000 	andeq	r0, r0, r0
    25e4:	008fec1f 	addeq	lr, pc, pc, lsl ip	; <UNPREDICTABLE>
    25e8:	00113100 	andseq	r3, r1, r0, lsl #2
    25ec:	51012000 	mrspl	r2, (UNDEF: 1)
    25f0:	32007704 	andcc	r7, r0, #4, 14	; 0x100000
    25f4:	5001201a 	andpl	r2, r1, sl, lsl r0
    25f8:	00007602 	andeq	r7, r0, r2, lsl #12
    25fc:	013f1900 	teqeq	pc, r0, lsl #18
    2600:	90000000 	andls	r0, r0, r0
    2604:	001c0000 	andseq	r0, ip, r0
    2608:	17010000 	strne	r0, [r1, -r0]
    260c:	00000408 	andeq	r0, r0, r8, lsl #8
    2610:	00016a1a 	andeq	r6, r1, sl, lsl sl
    2614:	000e2800 	andeq	r2, lr, r0, lsl #16
    2618:	015f1b00 	cmpeq	pc, r0, lsl #22
    261c:	54010000 	strpl	r0, [r1], #-0
    2620:	0001561b 	andeq	r5, r1, fp, lsl r6
    2624:	00770800 	rsbseq	r0, r7, r0, lsl #16
    2628:	ff081a34 			; <UNDEFINED> instruction: 0xff081a34
    262c:	4b1b9f1a 	blmi	6ea29c <__bss_end__+0x6df9bc>
    2630:	01000001 	tsteq	r0, r1
    2634:	01111956 	tsteq	r1, r6, asr r9
    2638:	900c0000 	andls	r0, ip, r0
    263c:	00100000 	andseq	r0, r0, r0
    2640:	1a020000 	bne	82648 <__bss_end__+0x77d68>
    2644:	000003ef 	andeq	r0, r0, pc, ror #7
    2648:	0001281a 	andeq	r2, r1, sl, lsl r8
    264c:	000e4a00 	andeq	r4, lr, r0, lsl #20
    2650:	011d1b00 	tsteq	sp, r0, lsl #22
    2654:	54010000 	strpl	r0, [r1], #-0
    2658:	00900c1d 	addseq	r0, r0, sp, lsl ip
    265c:	00000400 	andeq	r0, r0, r0, lsl #8
    2660:	01321e00 	teqeq	r2, r0, lsl #28
    2664:	0e6c0000 	cdpeq	0, 6, cr0, cr12, cr0, {0}
    2668:	00000000 	andeq	r0, r0, r0
    266c:	00900c1f 	addseq	r0, r0, pc, lsl ip
    2670:	00113100 	andseq	r3, r1, r0, lsl #2
    2674:	51012000 	mrspl	r2, (UNDEF: 1)
    2678:	34007704 	strcc	r7, [r0], #-1796	; 0x704
    267c:	5001201a 	andpl	r2, r1, sl, lsl r0
    2680:	00007602 	andeq	r7, r0, r2, lsl #12
    2684:	013f1900 	teqeq	pc, r0, lsl #18
    2688:	90200000 	eorls	r0, r0, r0
    268c:	001c0000 	andseq	r0, ip, r0
    2690:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    2694:	00000490 	muleq	r0, r0, r4
    2698:	00016a1a 	andeq	r6, r1, sl, lsl sl
    269c:	000e7f00 	andeq	r7, lr, r0, lsl #30
    26a0:	015f1b00 	cmpeq	pc, r0, lsl #22
    26a4:	54010000 	strpl	r0, [r1], #-0
    26a8:	0001561b 	andeq	r5, r1, fp, lsl r6
    26ac:	00770800 	rsbseq	r0, r7, r0, lsl #16
    26b0:	ff081a38 			; <UNDEFINED> instruction: 0xff081a38
    26b4:	4b1b9f1a 	blmi	6ea324 <__bss_end__+0x6dfa44>
    26b8:	01000001 	tsteq	r0, r1
    26bc:	01111956 	tsteq	r1, r6, asr r9
    26c0:	902c0000 	eorls	r0, ip, r0
    26c4:	00100000 	andseq	r0, r0, r0
    26c8:	1a020000 	bne	826d0 <__bss_end__+0x77df0>
    26cc:	00000477 	andeq	r0, r0, r7, ror r4
    26d0:	0001281a 	andeq	r2, r1, sl, lsl r8
    26d4:	000ea400 	andeq	sl, lr, r0, lsl #8
    26d8:	011d1b00 	tsteq	sp, r0, lsl #22
    26dc:	54010000 	strpl	r0, [r1], #-0
    26e0:	00902c1d 	addseq	r2, r0, sp, lsl ip
    26e4:	00000400 	andeq	r0, r0, r0, lsl #8
    26e8:	01321e00 	teqeq	r2, r0, lsl #28
    26ec:	0ec90000 	cdpeq	0, 12, cr0, cr9, cr0, {0}
    26f0:	00000000 	andeq	r0, r0, r0
    26f4:	00902c1f 	addseq	r2, r0, pc, lsl ip
    26f8:	00113100 	andseq	r3, r1, r0, lsl #2
    26fc:	51012000 	mrspl	r2, (UNDEF: 1)
    2700:	38007704 	stmdacc	r0, {r2, r8, r9, sl, ip, sp, lr}
    2704:	5001201a 	andpl	r2, r1, sl, lsl r0
    2708:	00007602 	andeq	r7, r0, r2, lsl #12
    270c:	013f1900 	teqeq	pc, r0, lsl #18
    2710:	90400000 	subls	r0, r0, r0
    2714:	001c0000 	andseq	r0, ip, r0
    2718:	1b010000 	blne	42720 <__bss_end__+0x37e40>
    271c:	00000518 	andeq	r0, r0, r8, lsl r5
    2720:	00016a1a 	andeq	r6, r1, sl, lsl sl
    2724:	000edc00 	andeq	sp, lr, r0, lsl #24
    2728:	015f1b00 	cmpeq	pc, r0, lsl #22
    272c:	54010000 	strpl	r0, [r1], #-0
    2730:	0001561b 	andeq	r5, r1, fp, lsl r6
    2734:	00770800 	rsbseq	r0, r7, r0, lsl #16
    2738:	ff081a40 			; <UNDEFINED> instruction: 0xff081a40
    273c:	4b1b9f1a 	blmi	6ea3ac <__bss_end__+0x6dfacc>
    2740:	01000001 	tsteq	r0, r1
    2744:	01111956 	tsteq	r1, r6, asr r9
    2748:	904c0000 	subls	r0, ip, r0
    274c:	00100000 	andseq	r0, r0, r0
    2750:	1a020000 	bne	82758 <__bss_end__+0x77e78>
    2754:	000004ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2758:	0001281a 	andeq	r2, r1, sl, lsl r8
    275c:	000f0300 	andeq	r0, pc, r0, lsl #6
    2760:	011d1b00 	tsteq	sp, r0, lsl #22
    2764:	54010000 	strpl	r0, [r1], #-0
    2768:	00904c1d 	addseq	r4, r0, sp, lsl ip
    276c:	00000400 	andeq	r0, r0, r0, lsl #8
    2770:	01321e00 	teqeq	r2, r0, lsl #28
    2774:	0f2a0000 	svceq	0x002a0000
    2778:	00000000 	andeq	r0, r0, r0
    277c:	00904c1f 	addseq	r4, r0, pc, lsl ip
    2780:	00113100 	andseq	r3, r1, r0, lsl #2
    2784:	51012000 	mrspl	r2, (UNDEF: 1)
    2788:	40007704 	andmi	r7, r0, r4, lsl #14
    278c:	5001201a 	andpl	r2, r1, sl, lsl r0
    2790:	00007602 	andeq	r7, r0, r2, lsl #12
    2794:	013f1900 	teqeq	pc, r0, lsl #18
    2798:	90600000 	rsbls	r0, r0, r0
    279c:	001c0000 	andseq	r0, ip, r0
    27a0:	1d010000 	stcne	0, cr0, [r1, #-0]
    27a4:	000005a2 	andeq	r0, r0, r2, lsr #11
    27a8:	00016a1a 	andeq	r6, r1, sl, lsl sl
    27ac:	000f3d00 	andeq	r3, pc, r0, lsl #26
    27b0:	015f1b00 	cmpeq	pc, r0, lsl #22
    27b4:	54010000 	strpl	r0, [r1], #-0
    27b8:	0001561b 	andeq	r5, r1, fp, lsl r6
    27bc:	00770900 	rsbseq	r0, r7, r0, lsl #18
    27c0:	081a2008 	ldmdaeq	sl, {r3, sp}
    27c4:	1b9f1aff 	blne	fe7c93c8 <__bss_end__+0xfe7beae8>
    27c8:	0000014b 	andeq	r0, r0, fp, asr #2
    27cc:	11195601 	tstne	r9, r1, lsl #12
    27d0:	6c000001 	stcvs	0, cr0, [r0], {1}
    27d4:	10000090 	mulne	r0, r0, r0
    27d8:	02000000 	andeq	r0, r0, #0
    27dc:	0005881a 	andeq	r8, r5, sl, lsl r8
    27e0:	01281a00 	teqeq	r8, r0, lsl #20
    27e4:	0f670000 	svceq	0x00670000
    27e8:	1d1b0000 	ldcne	0, cr0, [fp, #-0]
    27ec:	01000001 	tsteq	r0, r1
    27f0:	906c1d54 	rsbls	r1, ip, r4, asr sp
    27f4:	00040000 	andeq	r0, r4, r0
    27f8:	321e0000 	andscc	r0, lr, #0
    27fc:	91000001 	tstls	r0, r1
    2800:	0000000f 	andeq	r0, r0, pc
    2804:	906c1f00 	rsbls	r1, ip, r0, lsl #30
    2808:	11310000 	teqne	r1, r0
    280c:	01200000 	teqeq	r0, r0
    2810:	00770551 	rsbseq	r0, r7, r1, asr r5
    2814:	201a2008 	andscs	r2, sl, r8
    2818:	76025001 	strvc	r5, [r2], -r1
    281c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    2820:	0000013f 	andeq	r0, r0, pc, lsr r1
    2824:	00009080 	andeq	r9, r0, r0, lsl #1
    2828:	0000001c 	andeq	r0, r0, ip, lsl r0
    282c:	062c1f01 	strteq	r1, [ip], -r1, lsl #30
    2830:	6a1a0000 	bvs	682838 <__bss_end__+0x677f58>
    2834:	a4000001 	strge	r0, [r0], #-1
    2838:	1b00000f 	blne	287c <_start-0x5784>
    283c:	0000015f 	andeq	r0, r0, pc, asr r1
    2840:	561b5401 	ldrpl	r5, [fp], -r1, lsl #8
    2844:	09000001 	stmdbeq	r0, {r0}
    2848:	40080077 	andmi	r0, r8, r7, ror r0
    284c:	1aff081a 	bne	fffc48bc <__bss_end__+0xfffb9fdc>
    2850:	014b1b9f 			; <UNDEFINED> instruction: 0x014b1b9f
    2854:	56010000 	strpl	r0, [r1], -r0
    2858:	00011119 	andeq	r1, r1, r9, lsl r1
    285c:	00908c00 	addseq	r8, r0, r0, lsl #24
    2860:	00001000 	andeq	r1, r0, r0
    2864:	121a0200 	andsne	r0, sl, #0, 4
    2868:	1a000006 	bne	2888 <_start-0x5778>
    286c:	00000128 	andeq	r0, r0, r8, lsr #2
    2870:	00000fc6 	andeq	r0, r0, r6, asr #31
    2874:	00011d1b 	andeq	r1, r1, fp, lsl sp
    2878:	1d540100 	ldfnee	f0, [r4, #-0]
    287c:	0000908c 	andeq	r9, r0, ip, lsl #1
    2880:	00000004 	andeq	r0, r0, r4
    2884:	0001321e 	andeq	r3, r1, lr, lsl r2
    2888:	000fe800 	andeq	lr, pc, r0, lsl #16
    288c:	1f000000 	svcne	0x00000000
    2890:	0000908c 	andeq	r9, r0, ip, lsl #1
    2894:	00001131 	andeq	r1, r0, r1, lsr r1
    2898:	05510120 	ldrbeq	r0, [r1, #-288]	; 0x120
    289c:	40080077 	andmi	r0, r8, r7, ror r0
    28a0:	5001201a 	andpl	r2, r1, sl, lsl r0
    28a4:	00007602 	andeq	r7, r0, r2, lsl #12
    28a8:	013f1900 	teqeq	pc, r0, lsl #18
    28ac:	90a00000 	adcls	r0, r0, r0
    28b0:	001c0000 	andseq	r0, ip, r0
    28b4:	21010000 	mrscs	r0, (UNDEF: 1)
    28b8:	000006ac 	andeq	r0, r0, ip, lsr #13
    28bc:	00016a1b 	andeq	r6, r1, fp, lsl sl
    28c0:	1b580100 	blne	1602cc8 <__bss_end__+0x15f83e8>
    28c4:	0000015f 	andeq	r0, r0, pc, asr r1
    28c8:	561a5401 	ldrpl	r5, [sl], -r1, lsl #8
    28cc:	fb000001 	blx	28da <_start-0x5726>
    28d0:	1b00000f 	blne	2914 <_start-0x56ec>
    28d4:	0000014b 	andeq	r0, r0, fp, asr #2
    28d8:	11195601 	tstne	r9, r1, lsl #12
    28dc:	ac000001 	stcge	0, cr0, [r0], {1}
    28e0:	10000090 	mulne	r0, r0, r0
    28e4:	02000000 	andeq	r0, r0, #0
    28e8:	0006921a 	andeq	r9, r6, sl, lsl r2
    28ec:	01281b00 	teqeq	r8, r0, lsl #22
    28f0:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    28f4:	00011d1b 	andeq	r1, r1, fp, lsl sp
    28f8:	1d540100 	ldfnee	f0, [r4, #-0]
    28fc:	000090ac 	andeq	r9, r0, ip, lsr #1
    2900:	00000004 	andeq	r0, r0, r4
    2904:	0001321e 	andeq	r3, r1, lr, lsl r2
    2908:	00102e00 	andseq	r2, r0, r0, lsl #28
    290c:	1f000000 	svcne	0x00000000
    2910:	000090ac 	andeq	r9, r0, ip, lsr #1
    2914:	00001131 	andeq	r1, r0, r1, lsr r1
    2918:	05510120 	ldrbeq	r0, [r1, #-288]	; 0x120
    291c:	80080077 	andhi	r0, r8, r7, ror r0
    2920:	5001201a 	andpl	r2, r1, sl, lsl r0
    2924:	00007602 	andeq	r7, r0, r2, lsl #12
    2928:	013f2100 	teqeq	pc, r0, lsl #2
    292c:	90c00000 	sbcls	r0, r0, r0
    2930:	001c0000 	andseq	r0, ip, r0
    2934:	23010000 	movwcs	r0, #4096	; 0x1000
    2938:	00016a1b 	andeq	r6, r1, fp, lsl sl
    293c:	1b550100 	blne	1542d44 <__bss_end__+0x1538464>
    2940:	0000015f 	andeq	r0, r0, pc, asr r1
    2944:	561c5401 	ldrpl	r5, [ip], -r1, lsl #8
    2948:	01000001 	tsteq	r0, r1
    294c:	00014b1b 	andeq	r4, r1, fp, lsl fp
    2950:	19560100 	ldmdbne	r6, {r8}^
    2954:	00000111 	andeq	r0, r0, r1, lsl r1
    2958:	000090cc 	andeq	r9, r0, ip, asr #1
    295c:	00000010 	andeq	r0, r0, r0, lsl r0
    2960:	070b1a02 	streq	r1, [fp, -r2, lsl #20]
    2964:	281b0000 	ldmdacs	fp, {}	; <UNPREDICTABLE>
    2968:	01000001 	tsteq	r0, r1
    296c:	011d1b55 	tsteq	sp, r5, asr fp
    2970:	54010000 	strpl	r0, [r1], #-0
    2974:	0090cc1d 	addseq	ip, r0, sp, lsl ip
    2978:	00000400 	andeq	r0, r0, r0, lsl #8
    297c:	01321e00 	teqeq	r2, r0, lsl #28
    2980:	10410000 	subne	r0, r1, r0
    2984:	00000000 	andeq	r0, r0, r0
    2988:	0090cc1f 	addseq	ip, r0, pc, lsl ip
    298c:	00113100 	andseq	r3, r1, r0, lsl #2
    2990:	51012000 	mrspl	r2, (UNDEF: 1)
    2994:	01203101 	teqeq	r0, r1, lsl #2
    2998:	00760250 	rsbseq	r0, r6, r0, asr r2
    299c:	06000000 	streq	r0, [r0], -r0
    29a0:	0000d904 	andeq	sp, r0, r4, lsl #18
    29a4:	08052200 	stmdaeq	r5, {r9, sp}
    29a8:	27010000 	strcs	r0, [r1, -r0]
    29ac:	00000025 	andeq	r0, r0, r5, lsr #32
    29b0:	00076203 	andeq	r6, r7, r3, lsl #4
    29b4:	78720f00 	ldmdavc	r2!, {r8, r9, sl, fp}^
    29b8:	25270100 	strcs	r0, [r7, #-256]!	; 0x100
    29bc:	0f000000 	svceq	0x00000000
    29c0:	27010076 	smlsdxcs	r1, r6, r0, r0
    29c4:	00000025 	andeq	r0, r0, r5, lsr #32
    29c8:	0007600e 	andeq	r6, r7, lr
    29cc:	2c270100 	stfcss	f0, [r7], #-0
    29d0:	11000000 	mrsne	r0, (UNDEF: 0)
    29d4:	00000124 	andeq	r0, r0, r4, lsr #2
    29d8:	002c2801 	eoreq	r2, ip, r1, lsl #16
    29dc:	23000000 	movwcs	r0, #0
    29e0:	00000701 	andeq	r0, r0, r1, lsl #14
    29e4:	00253401 	eoreq	r3, r5, r1, lsl #8
    29e8:	90e00000 	rscls	r0, r0, r0
    29ec:	01c80000 	biceq	r0, r8, r0
    29f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    29f4:	00000b1e 	andeq	r0, r0, lr, lsl fp
    29f8:	00037913 	andeq	r7, r3, r3, lsl r9
    29fc:	22340100 	eorscs	r0, r4, #0, 2
    2a00:	54000007 	strpl	r0, [r0], #-7
    2a04:	13000010 	movwne	r0, #16
    2a08:	00000760 	andeq	r0, r0, r0, ror #14
    2a0c:	00253401 	eoreq	r3, r5, r1, lsl #8
    2a10:	10990000 	addsne	r0, r9, r0
    2a14:	72150000 	andsvc	r0, r5, #0
    2a18:	35010078 	strcc	r0, [r1, #-120]	; 0x78
    2a1c:	00000025 	andeq	r0, r0, r5, lsr #32
    2a20:	73165501 	tstvc	r6, #4194304	; 0x400000
    2a24:	2c3c0100 	ldfcss	f0, [ip], #-0
    2a28:	b7000000 	strlt	r0, [r0, -r0]
    2a2c:	16000010 			; <UNDEFINED> instruction: 0x16000010
    2a30:	3f010075 	svccc	0x00010075
    2a34:	00000068 	andeq	r0, r0, r8, rrx
    2a38:	000010ca 	andeq	r1, r0, sl, asr #1
    2a3c:	01006e16 	tsteq	r0, r6, lsl lr
    2a40:	00002c40 	andeq	r2, r0, r0, asr #24
    2a44:	0010dd00 	andseq	sp, r0, r0, lsl #26
    2a48:	00631600 	rsbeq	r1, r3, r0, lsl #12
    2a4c:	002c4101 	eoreq	r4, ip, r1, lsl #2
    2a50:	10f40000 	rscsne	r0, r4, r0
    2a54:	28190000 	ldmdacs	r9, {}	; <UNPREDICTABLE>
    2a58:	f4000007 	vst4.8	{d0-d3}, [r0], r7
    2a5c:	34000090 	strcc	r0, [r0], #-144	; 0x90
    2a60:	01000000 	mrseq	r0, (UNDEF: 0)
    2a64:	00083c38 	andeq	r3, r8, r8, lsr ip
    2a68:	074b1a00 	strbeq	r1, [fp, -r0, lsl #20]
    2a6c:	111e0000 	tstne	lr, r0
    2a70:	421c0000 	andsmi	r0, ip, #0
    2a74:	00000007 	andeq	r0, r0, r7
    2a78:	0007381b 	andeq	r3, r7, fp, lsl r8
    2a7c:	1d550100 	ldfnee	f0, [r5, #-0]
    2a80:	000090f4 	strdeq	r9, [r0], -r4
    2a84:	00000034 	andeq	r0, r0, r4, lsr r0
    2a88:	0007561e 	andeq	r5, r7, lr, lsl r6
    2a8c:	00113c00 	andseq	r3, r1, r0, lsl #24
    2a90:	90f82400 	rscsls	r2, r8, r0, lsl #8
    2a94:	11470000 	mrsne	r0, (UNDEF: 71)
    2a98:	04250000 	strteq	r0, [r5], #-0
    2a9c:	52000091 	andpl	r0, r0, #145	; 0x91
    2aa0:	31000011 	tstcc	r0, r1, lsl r0
    2aa4:	20000008 	andcs	r0, r0, r8
    2aa8:	75025001 	strvc	r5, [r2, #-1]
    2aac:	10240000 	eorne	r0, r4, r0
    2ab0:	47000091 			; <UNDEFINED> instruction: 0x47000091
    2ab4:	00000011 	andeq	r0, r0, r1, lsl r0
    2ab8:	91301700 	teqls	r0, r0, lsl #14
    2abc:	00040000 	andeq	r0, r4, r0
    2ac0:	08590000 	ldmdaeq	r9, {}^	; <UNPREDICTABLE>
    2ac4:	b2260000 	eorlt	r0, r6, #0
    2ac8:	01000007 	tsteq	r0, r7
    2acc:	00002c3c 	andeq	r2, r0, ip, lsr ip
    2ad0:	00115a00 	andseq	r5, r1, r0, lsl #20
    2ad4:	11190000 	tstne	r9, r0
    2ad8:	3c000001 	stccc	0, cr0, [r0], {1}
    2adc:	10000091 	mulne	r0, r1, r0
    2ae0:	01000000 	mrseq	r0, (UNDEF: 0)
    2ae4:	00089244 	andeq	r9, r8, r4, asr #4
    2ae8:	01281a00 	teqeq	r8, r0, lsl #20
    2aec:	116d0000 	cmnne	sp, r0
    2af0:	1d1a0000 	ldcne	0, cr0, [sl, #-0]
    2af4:	92000001 	andls	r0, r0, #1
    2af8:	1d000011 	stcne	0, cr0, [r0, #-68]	; 0xffffffbc
    2afc:	0000913c 	andeq	r9, r0, ip, lsr r1
    2b00:	00000004 	andeq	r0, r0, r4
    2b04:	0001321e 	andeq	r3, r1, lr, lsl r2
    2b08:	0011a500 	andseq	sl, r1, r0, lsl #10
    2b0c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    2b10:	00000111 	andeq	r0, r0, r1, lsl r1
    2b14:	0000915c 	andeq	r9, r0, ip, asr r1
    2b18:	00000010 	andeq	r0, r0, r0, lsl r0
    2b1c:	08cb4801 	stmiaeq	fp, {r0, fp, lr}^
    2b20:	281a0000 	ldmdacs	sl, {}	; <UNPREDICTABLE>
    2b24:	b8000001 	stmdalt	r0, {r0}
    2b28:	1a000011 	bne	2b74 <_start-0x548c>
    2b2c:	0000011d 	andeq	r0, r0, sp, lsl r1
    2b30:	000011cb 	andeq	r1, r0, fp, asr #3
    2b34:	00915c1d 	addseq	r5, r1, sp, lsl ip
    2b38:	00000400 	andeq	r0, r0, r0, lsl #8
    2b3c:	01321e00 	teqeq	r2, r0, lsl #28
    2b40:	11de0000 	bicsne	r0, lr, r0
    2b44:	00000000 	andeq	r0, r0, r0
    2b48:	00011119 	andeq	r1, r1, r9, lsl r1
    2b4c:	00918000 	addseq	r8, r1, r0
    2b50:	00001000 	andeq	r1, r0, r0
    2b54:	044b0100 	strbeq	r0, [fp], #-256	; 0x100
    2b58:	1a000009 	bne	2b84 <_start-0x547c>
    2b5c:	00000128 	andeq	r0, r0, r8, lsr #2
    2b60:	000011f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    2b64:	00011d1a 	andeq	r1, r1, sl, lsl sp
    2b68:	00120400 	andseq	r0, r2, r0, lsl #8
    2b6c:	91801d00 	orrls	r1, r0, r0, lsl #26
    2b70:	00040000 	andeq	r0, r4, r0
    2b74:	321e0000 	andscc	r0, lr, #0
    2b78:	17000001 	strne	r0, [r0, -r1]
    2b7c:	00000012 	andeq	r0, r0, r2, lsl r0
    2b80:	01111900 	tsteq	r1, r0, lsl #18
    2b84:	91a40000 			; <UNDEFINED> instruction: 0x91a40000
    2b88:	00100000 	andseq	r0, r0, r0
    2b8c:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    2b90:	0000093d 	andeq	r0, r0, sp, lsr r9
    2b94:	0001281a 	andeq	r2, r1, sl, lsl r8
    2b98:	00122a00 	andseq	r2, r2, r0, lsl #20
    2b9c:	011d1a00 	tsteq	sp, r0, lsl #20
    2ba0:	123d0000 	eorsne	r0, sp, #0
    2ba4:	a41d0000 	ldrge	r0, [sp], #-0
    2ba8:	04000091 	streq	r0, [r0], #-145	; 0x91
    2bac:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2bb0:	00000132 	andeq	r0, r0, r2, lsr r1
    2bb4:	00001250 	andeq	r1, r0, r0, asr r2
    2bb8:	11190000 	tstne	r9, r0
    2bbc:	c8000001 	stmdagt	r0, {r0}
    2bc0:	10000091 	mulne	r0, r1, r0
    2bc4:	01000000 	mrseq	r0, (UNDEF: 0)
    2bc8:	00097651 	andeq	r7, r9, r1, asr r6
    2bcc:	01281a00 	teqeq	r8, r0, lsl #20
    2bd0:	12630000 	rsbne	r0, r3, #0
    2bd4:	1d1a0000 	ldcne	0, cr0, [sl, #-0]
    2bd8:	76000001 	strvc	r0, [r0], -r1
    2bdc:	1d000012 	stcne	0, cr0, [r0, #-72]	; 0xffffffb8
    2be0:	000091c8 	andeq	r9, r0, r8, asr #3
    2be4:	00000004 	andeq	r0, r0, r4
    2be8:	0001321e 	andeq	r3, r1, lr, lsl r2
    2bec:	00128900 	andseq	r8, r2, r0, lsl #18
    2bf0:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    2bf4:	00000111 	andeq	r0, r0, r1, lsl r1
    2bf8:	000091ec 	andeq	r9, r0, ip, ror #3
    2bfc:	00000010 	andeq	r0, r0, r0, lsl r0
    2c00:	09af5401 	stmibeq	pc!, {r0, sl, ip, lr}	; <UNPREDICTABLE>
    2c04:	281a0000 	ldmdacs	sl, {}	; <UNPREDICTABLE>
    2c08:	9c000001 	stcls	0, cr0, [r0], {1}
    2c0c:	1a000012 	bne	2c5c <_start-0x53a4>
    2c10:	0000011d 	andeq	r0, r0, sp, lsl r1
    2c14:	000012af 	andeq	r1, r0, pc, lsr #5
    2c18:	0091ec1d 	addseq	lr, r1, sp, lsl ip
    2c1c:	00000400 	andeq	r0, r0, r0, lsl #8
    2c20:	01321e00 	teqeq	r2, r0, lsl #28
    2c24:	12c20000 	sbcne	r0, r2, #0
    2c28:	00000000 	andeq	r0, r0, r0
    2c2c:	00011119 	andeq	r1, r1, r9, lsl r1
    2c30:	00921000 	addseq	r1, r2, r0
    2c34:	00001000 	andeq	r1, r0, r0
    2c38:	e8570100 	ldmda	r7, {r8}^
    2c3c:	1a000009 	bne	2c68 <_start-0x5398>
    2c40:	00000128 	andeq	r0, r0, r8, lsr #2
    2c44:	000012d5 	ldrdeq	r1, [r0], -r5
    2c48:	00011d1a 	andeq	r1, r1, sl, lsl sp
    2c4c:	0012e800 	andseq	lr, r2, r0, lsl #16
    2c50:	92101d00 	andsls	r1, r0, #0, 26
    2c54:	00040000 	andeq	r0, r4, r0
    2c58:	321e0000 	andscc	r0, lr, #0
    2c5c:	fb000001 	blx	2c6a <_start-0x5396>
    2c60:	00000012 	andeq	r0, r0, r2, lsl r0
    2c64:	01111900 	tsteq	r1, r0, lsl #18
    2c68:	92340000 	eorsls	r0, r4, #0
    2c6c:	00100000 	andseq	r0, r0, r0
    2c70:	5a010000 	bpl	42c78 <__bss_end__+0x38398>
    2c74:	00000a1d 	andeq	r0, r0, sp, lsl sl
    2c78:	0001281a 	andeq	r2, r1, sl, lsl r8
    2c7c:	00130e00 	andseq	r0, r3, r0, lsl #28
    2c80:	011d2700 	tsteq	sp, r0, lsl #14
    2c84:	341d0000 	ldrcc	r0, [sp], #-0
    2c88:	04000092 	streq	r0, [r0], #-146	; 0x92
    2c8c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2c90:	00000132 	andeq	r0, r0, r2, lsr r1
    2c94:	00001321 	andeq	r1, r0, r1, lsr #6
    2c98:	28190000 	ldmdacs	r9, {}	; <UNPREDICTABLE>
    2c9c:	54000007 	strpl	r0, [r0], #-7
    2ca0:	34000092 	strcc	r0, [r0], #-146	; 0x92
    2ca4:	01000000 	mrseq	r0, (UNDEF: 0)
    2ca8:	000a8161 	andeq	r8, sl, r1, ror #2
    2cac:	074b2700 	strbeq	r2, [fp, -r0, lsl #14]
    2cb0:	421a0000 	andsmi	r0, sl, #0
    2cb4:	34000007 	strcc	r0, [r0], #-7
    2cb8:	1a000013 	bne	2d0c <_start-0x52f4>
    2cbc:	00000738 	andeq	r0, r0, r8, lsr r7
    2cc0:	00001354 	andeq	r1, r0, r4, asr r3
    2cc4:	0092541d 	addseq	r5, r2, sp, lsl r4
    2cc8:	00003400 	andeq	r3, r0, r0, lsl #8
    2ccc:	07561e00 	ldrbeq	r1, [r6, -r0, lsl #28]
    2cd0:	13720000 	cmnne	r2, #0
    2cd4:	58240000 	stmdapl	r4!, {}	; <UNPREDICTABLE>
    2cd8:	47000092 			; <UNDEFINED> instruction: 0x47000092
    2cdc:	25000011 	strcs	r0, [r0, #-17]
    2ce0:	00009264 	andeq	r9, r0, r4, ror #4
    2ce4:	00001152 	andeq	r1, r0, r2, asr r1
    2ce8:	00000a76 	andeq	r0, r0, r6, ror sl
    2cec:	02500120 	subseq	r0, r0, #32, 2
    2cf0:	24000075 	strcs	r0, [r0], #-117	; 0x75
    2cf4:	00009270 	andeq	r9, r0, r0, ror r2
    2cf8:	00001147 	andeq	r1, r0, r7, asr #2
    2cfc:	58250000 	stmdapl	r5!, {}	; <UNPREDICTABLE>
    2d00:	52000091 	andpl	r0, r0, #145	; 0x91
    2d04:	95000011 	strls	r0, [r0, #-17]
    2d08:	2000000a 	andcs	r0, r0, sl
    2d0c:	75025001 	strvc	r5, [r2, #-1]
    2d10:	78250000 	stmdavc	r5!, {}	; <UNPREDICTABLE>
    2d14:	52000091 	andpl	r0, r0, #145	; 0x91
    2d18:	a9000011 	stmdbge	r0, {r0, r4}
    2d1c:	2000000a 	andcs	r0, r0, sl
    2d20:	75025001 	strvc	r5, [r2, #-1]
    2d24:	9c250000 	stcls	0, cr0, [r5], #-0
    2d28:	52000091 	andpl	r0, r0, #145	; 0x91
    2d2c:	bd000011 	stclt	0, cr0, [r0, #-68]	; 0xffffffbc
    2d30:	2000000a 	andcs	r0, r0, sl
    2d34:	75025001 	strvc	r5, [r2, #-1]
    2d38:	c0250000 	eorgt	r0, r5, r0
    2d3c:	52000091 	andpl	r0, r0, #145	; 0x91
    2d40:	d1000011 	tstle	r0, r1, lsl r0
    2d44:	2000000a 	andcs	r0, r0, sl
    2d48:	75025001 	strvc	r5, [r2, #-1]
    2d4c:	e4250000 	strt	r0, [r5], #-0
    2d50:	52000091 	andpl	r0, r0, #145	; 0x91
    2d54:	e5000011 	str	r0, [r0, #-17]
    2d58:	2000000a 	andcs	r0, r0, sl
    2d5c:	75025001 	strvc	r5, [r2, #-1]
    2d60:	08250000 	stmdaeq	r5!, {}	; <UNPREDICTABLE>
    2d64:	52000092 	andpl	r0, r0, #146	; 0x92
    2d68:	f9000011 			; <UNDEFINED> instruction: 0xf9000011
    2d6c:	2000000a 	andcs	r0, r0, sl
    2d70:	75025001 	strvc	r5, [r2, #-1]
    2d74:	2c250000 	stccs	0, cr0, [r5], #-0
    2d78:	52000092 	andpl	r0, r0, #146	; 0x92
    2d7c:	0d000011 	stceq	0, cr0, [r0, #-68]	; 0xffffffbc
    2d80:	2000000b 	andcs	r0, r0, fp
    2d84:	75025001 	strvc	r5, [r2, #-1]
    2d88:	4c1f0000 	ldcmi	0, cr0, [pc], {-0}
    2d8c:	52000092 	andpl	r0, r0, #146	; 0x92
    2d90:	20000011 	andcs	r0, r0, r1, lsl r0
    2d94:	75025001 	strvc	r5, [r2, #-1]
    2d98:	23000000 	movwcs	r0, #0
    2d9c:	00000716 	andeq	r0, r0, r6, lsl r7
    2da0:	00256c01 	eoreq	r6, r5, r1, lsl #24
    2da4:	92a80000 	adcls	r0, r8, #0
    2da8:	00900000 	addseq	r0, r0, r0
    2dac:	9c010000 	stcls	0, cr0, [r1], {-0}
    2db0:	00000c02 	andeq	r0, r0, r2, lsl #24
    2db4:	01007514 	tsteq	r0, r4, lsl r5
    2db8:	0007226c 	andeq	r2, r7, ip, ror #4
    2dbc:	00139000 	andseq	r9, r3, r0
    2dc0:	75621400 	strbvc	r1, [r2, #-1024]!	; 0x400
    2dc4:	6c010066 	stcvs	0, cr0, [r1], {102}	; 0x66
    2dc8:	00000c02 	andeq	r0, r0, r2, lsl #24
    2dcc:	000013c4 	andeq	r1, r0, r4, asr #7
    2dd0:	00058c13 	andeq	r8, r5, r3, lsl ip
    2dd4:	686c0100 	stmdavs	ip!, {r8}^
    2dd8:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    2ddc:	14000013 	strne	r0, [r0], #-19
    2de0:	00646e65 	rsbeq	r6, r4, r5, ror #28
    2de4:	004f6c01 	subeq	r6, pc, r1, lsl #24
    2de8:	14310000 	ldrtne	r0, [r1], #-0
    2dec:	c2280000 	eorgt	r0, r8, #0
    2df0:	01000007 	tsteq	r0, r7
    2df4:	0000686c 	andeq	r6, r0, ip, ror #16
    2df8:	00910200 	addseq	r0, r1, r0, lsl #4
    2dfc:	00013229 	andeq	r3, r1, r9, lsr #4
    2e00:	000c1800 	andeq	r1, ip, r0, lsl #16
    2e04:	60030500 	andvs	r0, r3, r0, lsl #10
    2e08:	160000a3 	strne	r0, [r0], -r3, lsr #1
    2e0c:	70010069 	andvc	r0, r1, r9, rrx
    2e10:	00000025 	andeq	r0, r0, r5, lsr #32
    2e14:	0000146b 	andeq	r1, r0, fp, ror #8
    2e18:	00079526 	andeq	r9, r7, r6, lsr #10
    2e1c:	4f710100 	svcmi	0x00710100
    2e20:	8a000000 	bhi	2e28 <_start-0x51d8>
    2e24:	24000014 	strcs	r0, [r0], #-20
    2e28:	000092c8 	andeq	r9, r0, r8, asr #5
    2e2c:	00001167 	andeq	r1, r0, r7, ror #2
    2e30:	0092dc25 	addseq	sp, r2, r5, lsr #24
    2e34:	00116e00 	andseq	r6, r1, r0, lsl #28
    2e38:	000be200 	andeq	lr, fp, r0, lsl #4
    2e3c:	53012000 	movwpl	r2, #4096	; 0x1000
    2e40:	206d0802 	rsbcs	r0, sp, r2, lsl #16
    2e44:	03055201 	movweq	r5, #20993	; 0x5201
    2e48:	0000a360 	andeq	sl, r0, r0, ror #6
    2e4c:	05510120 	ldrbeq	r0, [r1, #-288]	; 0x120
    2e50:	00a3f403 	adceq	pc, r3, r3, lsl #8
    2e54:	50012000 	andpl	r2, r1, r0
    2e58:	a3d80305 	bicsge	r0, r8, #335544320	; 0x14000000
    2e5c:	24000000 	strcs	r0, [r0], #-0
    2e60:	000092e0 	andeq	r9, r0, r0, ror #5
    2e64:	00001184 	andeq	r1, r0, r4, lsl #3
    2e68:	0092fc1f 	addseq	pc, r2, pc, lsl ip	; <UNPREDICTABLE>
    2e6c:	00076200 	andeq	r6, r7, r0, lsl #4
    2e70:	51012000 	mrspl	r2, (UNDEF: 1)
    2e74:	20007a02 	andcs	r7, r0, r2, lsl #20
    2e78:	78025001 	stmdavc	r2, {r0, ip, lr}
    2e7c:	06000000 	streq	r0, [r0], -r0
    2e80:	00004f04 	andeq	r4, r0, r4, lsl #30
    2e84:	00902a00 	addseq	r2, r0, r0, lsl #20
    2e88:	0c180000 	ldceq	0, cr0, [r8], {-0}
    2e8c:	812b0000 	teqhi	fp, r0
    2e90:	12000000 	andne	r0, r0, #0
    2e94:	0c080700 	stceq	7, cr0, [r8], {-0}
    2e98:	9d230000 	stcls	0, cr0, [r3, #-0]
    2e9c:	01000007 	tsteq	r0, r7
    2ea0:	00002580 	andeq	r2, r0, r0, lsl #11
    2ea4:	00933800 	addseq	r3, r3, r0, lsl #16
    2ea8:	00007c00 	andeq	r7, r0, r0, lsl #24
    2eac:	e49c0100 	ldr	r0, [ip], #256	; 0x100
    2eb0:	1400000c 	strne	r0, [r0], #-12
    2eb4:	80010075 	andhi	r0, r1, r5, ror r0
    2eb8:	00000722 	andeq	r0, r0, r2, lsr #14
    2ebc:	0000149d 	muleq	r0, sp, r4
    2ec0:	66756214 			; <UNDEFINED> instruction: 0x66756214
    2ec4:	02800100 	addeq	r0, r0, #0, 2
    2ec8:	d100000c 	tstle	r0, ip
    2ecc:	13000014 	movwne	r0, #20
    2ed0:	0000058c 	andeq	r0, r0, ip, lsl #11
    2ed4:	00688101 	rsbeq	r8, r8, r1, lsl #2
    2ed8:	15050000 	strne	r0, [r5, #-0]
    2edc:	c2130000 	andsgt	r0, r3, #0
    2ee0:	01000007 	tsteq	r0, r7
    2ee4:	00006881 	andeq	r6, r0, r1, lsl #17
    2ee8:	00153e00 	andseq	r3, r5, r0, lsl #28
    2eec:	01322900 	teqeq	r2, r0, lsl #18
    2ef0:	0cf40000 	ldcleq	0, cr0, [r4]
    2ef4:	03050000 	movweq	r0, #20480	; 0x5000
    2ef8:	0000a374 	andeq	sl, r0, r4, ror r3
    2efc:	01006916 	tsteq	r0, r6, lsl r9
    2f00:	00002586 	andeq	r2, r0, r6, lsl #11
    2f04:	00157200 	andseq	r7, r5, r0, lsl #4
    2f08:	93542400 	cmpls	r4, #0, 8
    2f0c:	11670000 	cmnne	r7, r0
    2f10:	68250000 	stmdavs	r5!, {}	; <UNPREDICTABLE>
    2f14:	6e000093 	mcrvs	0, 0, r0, cr0, cr3, {4}
    2f18:	c4000011 	strgt	r0, [r0], #-17
    2f1c:	2000000c 	andcs	r0, r0, ip
    2f20:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    2f24:	52012083 	andpl	r2, r1, #131	; 0x83
    2f28:	a3740305 	cmnge	r4, #335544320	; 0x14000000
    2f2c:	01200000 	teqeq	r0, r0
    2f30:	f4030551 	vst3.16	{d0,d2,d4}, [r3 :64], r1
    2f34:	200000a3 	andcs	r0, r0, r3, lsr #1
    2f38:	03055001 	movweq	r5, #20481	; 0x5001
    2f3c:	0000a3d8 	ldrdeq	sl, [r0], -r8
    2f40:	936c2400 	cmnls	ip, #0, 8
    2f44:	11840000 	orrne	r0, r4, r0
    2f48:	881f0000 	ldmdahi	pc, {}	; <UNPREDICTABLE>
    2f4c:	62000093 	andvs	r0, r0, #147	; 0x93
    2f50:	20000007 	andcs	r0, r0, r7
    2f54:	78025101 	stmdavc	r2, {r0, r8, ip, lr}
    2f58:	50012000 	andpl	r2, r1, r0
    2f5c:	00007702 	andeq	r7, r0, r2, lsl #14
    2f60:	00902a00 	addseq	r2, r0, r0, lsl #20
    2f64:	0cf40000 	ldcleq	0, cr0, [r4]
    2f68:	812b0000 	teqhi	fp, r0
    2f6c:	14000000 	strne	r0, [r0], #-0
    2f70:	0ce40700 	stcleq	7, cr0, [r4]
    2f74:	4c230000 	stcmi	0, cr0, [r3], #-0
    2f78:	01000007 	tsteq	r0, r7
    2f7c:	0000d993 	muleq	r0, r3, r9
    2f80:	0093b400 	addseq	fp, r3, r0, lsl #8
    2f84:	0000c000 	andeq	ip, r0, r0
    2f88:	149c0100 	ldrne	r0, [ip], #256	; 0x100
    2f8c:	1400000e 	strne	r0, [r0], #-14
    2f90:	01007874 	tsteq	r0, r4, ror r8
    2f94:	00004f93 	muleq	r0, r3, pc	; <UNPREDICTABLE>
    2f98:	00159100 	andseq	r9, r5, r0, lsl #2
    2f9c:	78721400 	ldmdavc	r2!, {sl, ip}^
    2fa0:	4f930100 	svcmi	0x00930100
    2fa4:	b2000000 	andlt	r0, r0, #0
    2fa8:	13000015 	movwne	r0, #21
    2fac:	000003b2 			; <UNDEFINED> instruction: 0x000003b2
    2fb0:	00689301 	rsbeq	r9, r8, r1, lsl #6
    2fb4:	15d30000 	ldrbne	r0, [r3]
    2fb8:	e5280000 	str	r0, [r8, #-0]!
    2fbc:	01000006 	tsteq	r0, r6
    2fc0:	00006893 	muleq	r0, r3, r8
    2fc4:	00910200 	addseq	r0, r1, r0, lsl #4
    2fc8:	7a686d2c 	bvc	1a1e480 <__bss_end__+0x1a13ba0>
    2fcc:	2c9b0100 	ldfcss	f0, [fp], {0}
    2fd0:	00000000 	andeq	r0, r0, r0
    2fd4:	2629b927 	strtcs	fp, [r9], -r7, lsr #18
    2fd8:	00000736 	andeq	r0, r0, r6, lsr r7
    2fdc:	002c9c01 	eoreq	r9, ip, r1, lsl #24
    2fe0:	15f10000 	ldrbne	r0, [r1, #0]!
    2fe4:	32290000 	eorcc	r0, r9, #0
    2fe8:	24000001 	strcs	r0, [r0], #-1
    2fec:	0500000e 	streq	r0, [r0, #-14]
    2ff0:	00a38c03 	adceq	r8, r3, r3, lsl #24
    2ff4:	93dc1700 	bicsls	r1, ip, #0, 14
    2ff8:	00080000 	andeq	r0, r8, r0
    2ffc:	0d910000 	ldceq	0, cr0, [r1]
    3000:	692d0000 	pushvs	{}	; <UNPREDICTABLE>
    3004:	9701006e 	strls	r0, [r1, -lr, rrx]
    3008:	0000002c 	andeq	r0, r0, ip, lsr #32
    300c:	d4250001 	strtle	r0, [r5], #-1
    3010:	8b000093 	blhi	3264 <_start-0x4d9c>
    3014:	a5000011 	strge	r0, [r0, #-17]
    3018:	2000000d 	andcs	r0, r0, sp
    301c:	76025001 	strvc	r5, [r2], -r1
    3020:	dc250000 	stcle	0, cr0, [r5], #-0
    3024:	9c000093 	stcls	0, cr0, [r0], {147}	; 0x93
    3028:	b9000011 	stmdblt	r0, {r0, r4}
    302c:	2000000d 	andcs	r0, r0, sp
    3030:	78025001 	stmdavc	r2, {r0, ip, lr}
    3034:	f0250000 			; <UNDEFINED> instruction: 0xf0250000
    3038:	31000093 	swpcc	r0, r3, [r0]	; <UNPREDICTABLE>
    303c:	d2000011 	andle	r0, r0, #17
    3040:	2000000d 	andcs	r0, r0, sp
    3044:	31015101 	tstcc	r1, r1, lsl #2
    3048:	02500120 	subseq	r0, r0, #32, 2
    304c:	24000076 	strcs	r0, [r0], #-118	; 0x76
    3050:	00009434 	andeq	r9, r0, r4, lsr r4
    3054:	00001167 	andeq	r1, r0, r7, ror #2
    3058:	00944825 	addseq	r4, r4, r5, lsr #16
    305c:	00116e00 	andseq	r6, r1, r0, lsl #28
    3060:	000e0a00 	andeq	r0, lr, r0, lsl #20
    3064:	53012000 	movwpl	r2, #4096	; 0x1000
    3068:	209d0802 	addscs	r0, sp, r2, lsl #16
    306c:	03055201 	movweq	r5, #20993	; 0x5201
    3070:	0000a38c 	andeq	sl, r0, ip, lsl #7
    3074:	05510120 	ldrbeq	r0, [r1, #-288]	; 0x120
    3078:	00a3f403 	adceq	pc, r3, r3, lsl #8
    307c:	50012000 	andpl	r2, r1, r0
    3080:	a4080305 	strge	r0, [r8], #-773	; 0x305
    3084:	24000000 	strcs	r0, [r0], #-0
    3088:	0000944c 	andeq	r9, r0, ip, asr #8
    308c:	00001184 	andeq	r1, r0, r4, lsl #3
    3090:	00902a00 	addseq	r2, r0, r0, lsl #20
    3094:	0e240000 	cdpeq	0, 2, cr0, cr4, cr0, {0}
    3098:	812b0000 	teqhi	fp, r0
    309c:	13000000 	movwne	r0, #0
    30a0:	0e140700 	cdpeq	7, 1, cr0, cr4, cr0, {0}
    30a4:	29230000 	stmdbcs	r3!, {}	; <UNPREDICTABLE>
    30a8:	01000007 	tsteq	r0, r7
    30ac:	000025a9 	andeq	r2, r0, r9, lsr #11
    30b0:	00947400 	addseq	r7, r4, r0, lsl #8
    30b4:	00003c00 	andeq	r3, r0, r0, lsl #24
    30b8:	cc9c0100 	ldfgts	f0, [ip], {0}
    30bc:	1300000e 	movwne	r0, #14
    30c0:	00000379 	andeq	r0, r0, r9, ror r3
    30c4:	0722a901 	streq	sl, [r2, -r1, lsl #18]!
    30c8:	161f0000 	ldrne	r0, [pc], -r0
    30cc:	72160000 	andsvc	r0, r6, #0
    30d0:	01007365 	tsteq	r0, r5, ror #6
    30d4:	000025aa 	andeq	r2, r0, sl, lsr #11
    30d8:	00164000 	andseq	r4, r6, r0
    30dc:	01322900 	teqeq	r2, r0, lsl #18
    30e0:	0edc0000 	cdpeq	0, 13, cr0, cr12, cr0, {0}
    30e4:	03050000 	movweq	r0, #20480	; 0x5000
    30e8:	0000a3a0 	andeq	sl, r0, r0, lsr #7
    30ec:	00948025 	addseq	r8, r4, r5, lsr #32
    30f0:	00076200 	andeq	r6, r7, r0, lsl #4
    30f4:	000e8a00 	andeq	r8, lr, r0, lsl #20
    30f8:	51012000 	mrspl	r2, (UNDEF: 1)
    30fc:	20ff0902 	rscscs	r0, pc, r2, lsl #18
    3100:	f3035001 	vhadd.u8	d5, d3, d1
    3104:	24005001 	strcs	r5, [r0], #-1
    3108:	0000948c 	andeq	r9, r0, ip, lsl #9
    310c:	00001167 	andeq	r1, r0, r7, ror #2
    3110:	0094a025 	addseq	sl, r4, r5, lsr #32
    3114:	00116e00 	andseq	r6, r1, r0, lsl #28
    3118:	000ec200 	andeq	ip, lr, r0, lsl #4
    311c:	53012000 	movwpl	r2, #4096	; 0x1000
    3120:	20ac0802 	adccs	r0, ip, r2, lsl #16
    3124:	03055201 	movweq	r5, #20993	; 0x5201
    3128:	0000a3a0 	andeq	sl, r0, r0, lsr #7
    312c:	05510120 	ldrbeq	r0, [r1, #-288]	; 0x120
    3130:	00a3f403 	adceq	pc, r3, r3, lsl #8
    3134:	50012000 	andpl	r2, r1, r0
    3138:	a44c0305 	strbge	r0, [ip], #-773	; 0x305
    313c:	24000000 	strcs	r0, [r0], #-0
    3140:	000094a4 	andeq	r9, r0, r4, lsr #9
    3144:	00001184 	andeq	r1, r0, r4, lsl #3
    3148:	00902a00 	addseq	r2, r0, r0, lsl #20
    314c:	0edc0000 	cdpeq	0, 13, cr0, cr12, cr0, {0}
    3150:	812b0000 	teqhi	fp, r0
    3154:	0c000000 	stceq	0, cr0, [r0], {-0}
    3158:	0ecc0700 	cdpeq	7, 12, cr0, cr12, cr0, {0}
    315c:	6d120000 	ldcvs	0, cr0, [r2, #-0]
    3160:	01000007 	tsteq	r0, r7
    3164:	0094b0b0 	ldrheq	fp, [r4], r0
    3168:	00002c00 	andeq	r2, r0, r0, lsl #24
    316c:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    3170:	1300000f 	movwne	r0, #15
    3174:	00000379 	andeq	r0, r0, r9, ror r3
    3178:	0722b001 	streq	fp, [r2, -r1]!
    317c:	16530000 	ldrbne	r0, [r3], -r0
    3180:	6d140000 	ldcvs	0, cr0, [r4, #-0]
    3184:	01006773 	tsteq	r0, r3, ror r7
    3188:	000097b0 			; <UNDEFINED> instruction: 0x000097b0
    318c:	00167100 	andseq	r7, r6, r0, lsl #2
    3190:	94c81f00 	strbls	r1, [r8], #3840	; 0xf00
    3194:	01760000 	cmneq	r6, r0
    3198:	01200000 	teqeq	r0, r0
    319c:	00750250 	rsbseq	r0, r5, r0, asr r2
    31a0:	7e230000 	cdpvc	0, 2, cr0, cr3, cr0, {0}
    31a4:	01000003 	tsteq	r0, r3
    31a8:	000025b9 			; <UNDEFINED> instruction: 0x000025b9
    31ac:	0094dc00 	addseq	sp, r4, r0, lsl #24
    31b0:	00008400 	andeq	r8, r0, r0, lsl #8
    31b4:	199c0100 	ldmibne	ip, {r8}
    31b8:	13000010 	movwne	r0, #16
    31bc:	00000379 	andeq	r0, r0, r9, ror r3
    31c0:	0722b901 	streq	fp, [r2, -r1, lsl #18]!
    31c4:	168f0000 	strne	r0, [pc], r0
    31c8:	662e0000 	strtvs	r0, [lr], -r0
    31cc:	0100746d 	tsteq	r0, sp, ror #8
    31d0:	000097b9 			; <UNDEFINED> instruction: 0x000097b9
    31d4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    31d8:	7562152f 	strbvc	r1, [r2, #-1327]!	; 0x52f
    31dc:	ba010066 	blt	4337c <__bss_end__+0x38a9c>
    31e0:	00001019 	andeq	r1, r0, r9, lsl r0
    31e4:	7c9c9103 	ldfvcd	f1, [ip], {3}
    31e8:	00024f18 	andeq	r4, r2, r8, lsl pc
    31ec:	06bc0100 	ldrteq	r0, [ip], r0, lsl #2
    31f0:	03000001 	movweq	r0, #1
    31f4:	167c9891 			; <UNDEFINED> instruction: 0x167c9891
    31f8:	01007a73 	tsteq	r0, r3, ror sl
    31fc:	000025be 			; <UNDEFINED> instruction: 0x000025be
    3200:	0016bb00 	andseq	fp, r6, r0, lsl #22
    3204:	01322900 	teqeq	r2, r0, lsl #18
    3208:	103a0000 	eorsne	r0, sl, r0
    320c:	03050000 	movweq	r0, #20480	; 0x5000
    3210:	0000a3b0 			; <UNDEFINED> instruction: 0x0000a3b0
    3214:	00950425 	addseq	r0, r5, r5, lsr #8
    3218:	0011ad00 	andseq	sl, r1, r0, lsl #26
    321c:	000fc000 	andeq	ip, pc, r0
    3220:	53012000 	movwpl	r2, #4096	; 0x1000
    3224:	20589102 	subscs	r9, r8, r2, lsl #2
    3228:	91035201 	tstls	r3, r1, lsl #4
    322c:	01200654 	teqeq	r0, r4, asr r6
    3230:	cc0a0351 	stcgt	3, cr0, [sl], {81}	; 0x51
    3234:	50012001 	andpl	r2, r1, r1
    3238:	7bfc9103 	blvc	fff2764c <__bss_end__+0xfff1cd6c>
    323c:	95182400 	ldrls	r2, [r8, #-1024]	; 0x400
    3240:	11670000 	cmnne	r7, r0
    3244:	2c250000 	stccs	0, cr0, [r5], #-0
    3248:	6e000095 	mcrvs	0, 0, r0, cr0, cr5, {4}
    324c:	f8000011 			; <UNDEFINED> instruction: 0xf8000011
    3250:	2000000f 	andcs	r0, r0, pc
    3254:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    3258:	520120c0 	andpl	r2, r1, #192	; 0xc0
    325c:	a3b00305 	movsge	r0, #335544320	; 0x14000000
    3260:	01200000 	teqeq	r0, r0
    3264:	f4030551 	vst3.16	{d0,d2,d4}, [r3 :64], r1
    3268:	200000a3 	andcs	r0, r0, r3, lsr #1
    326c:	03055001 	movweq	r5, #20481	; 0x5001
    3270:	0000a484 	andeq	sl, r0, r4, lsl #9
    3274:	95302400 	ldrls	r2, [r0, #-1024]!	; 0x400
    3278:	11840000 	orrne	r0, r4, r0
    327c:	3c1f0000 	ldccc	0, cr0, [pc], {-0}
    3280:	e1000095 	swp	r0, r5, [r0]	; <UNPREDICTABLE>
    3284:	2000000e 	andcs	r0, r0, lr
    3288:	91035101 	tstls	r3, r1, lsl #2
    328c:	01207bfc 	strdeq	r7, [r0, -ip]!
    3290:	00750250 	rsbseq	r0, r5, r0, asr r2
    3294:	902a0000 	eorls	r0, sl, r0
    3298:	2a000000 	bcs	32a0 <_start-0x4d60>
    329c:	30000010 	andcc	r0, r0, r0, lsl r0
    32a0:	00000081 	andeq	r0, r0, r1, lsl #1
    32a4:	2a0001cb 	bcs	39d8 <_start-0x4628>
    32a8:	00000090 	muleq	r0, r0, r0
    32ac:	0000103a 	andeq	r1, r0, sl, lsr r0
    32b0:	0000812b 	andeq	r8, r0, fp, lsr #2
    32b4:	07000e00 	streq	r0, [r0, -r0, lsl #28]
    32b8:	0000102a 	andeq	r1, r0, sl, lsr #32
    32bc:	0007de23 	andeq	sp, r7, r3, lsr #28
    32c0:	25c50100 	strbcs	r0, [r5, #256]	; 0x100
    32c4:	60000000 	andvs	r0, r0, r0
    32c8:	4c000095 	stcmi	0, cr0, [r0], {149}	; 0x95
    32cc:	01000000 	mrseq	r0, (UNDEF: 0)
    32d0:	00111c9c 	mulseq	r1, ip, ip
    32d4:	00751400 	rsbseq	r1, r5, r0, lsl #8
    32d8:	0722c501 	streq	ip, [r2, -r1, lsl #10]!
    32dc:	16fa0000 	ldrbtne	r0, [sl], r0
    32e0:	62140000 	andsvs	r0, r4, #0
    32e4:	01006675 	tsteq	r0, r5, ror r6
    32e8:	000c02c5 	andeq	r0, ip, r5, asr #5
    32ec:	00171b00 	andseq	r1, r7, r0, lsl #22
    32f0:	058c1300 	streq	r1, [ip, #768]	; 0x300
    32f4:	c5010000 	strgt	r0, [r1, #-0]
    32f8:	00000068 	andeq	r0, r0, r8, rrx
    32fc:	0000173c 	andeq	r1, r0, ip, lsr r7
    3300:	646e6514 	strbtvs	r6, [lr], #-1300	; 0x514
    3304:	4fc50100 	svcmi	0x00c50100
    3308:	5d000000 	stcpl	0, cr0, [r0, #-0]
    330c:	16000017 			; <UNDEFINED> instruction: 0x16000017
    3310:	00736572 	rsbseq	r6, r3, r2, ror r5
    3314:	0025c601 	eoreq	ip, r5, r1, lsl #12
    3318:	177e0000 	ldrbne	r0, [lr, -r0]!
    331c:	32290000 	eorcc	r0, r9, #0
    3320:	2c000001 	stccs	0, cr0, [r0], {1}
    3324:	05000011 	streq	r0, [r0, #-17]
    3328:	00a3c003 	adceq	ip, r3, r3
    332c:	95742500 	ldrbls	r2, [r4, #-1280]!	; 0x500
    3330:	0b1e0000 	bleq	783338 <__bss_end__+0x778a58>
    3334:	10da0000 	sbcsne	r0, sl, r0
    3338:	01200000 	teqeq	r0, r0
    333c:	01f30352 	mvnseq	r0, r2, asr r3
    3340:	51012052 	qaddpl	r2, r2, r1
    3344:	5101f303 	tstpl	r1, r3, lsl #6
    3348:	03500120 	cmpeq	r0, #32, 2
    334c:	205001f3 	ldrshcs	r0, [r0], #-19	; 0xffffffed
    3350:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    3354:	2400ff09 	strcs	pc, [r0], #-3849	; 0xf09
    3358:	00009580 	andeq	r9, r0, r0, lsl #11
    335c:	00001167 	andeq	r1, r0, r7, ror #2
    3360:	00959425 	addseq	r9, r5, r5, lsr #8
    3364:	00116e00 	andseq	r6, r1, r0, lsl #28
    3368:	00111200 	andseq	r1, r1, r0, lsl #4
    336c:	53012000 	movwpl	r2, #4096	; 0x1000
    3370:	20c80802 	sbccs	r0, r8, r2, lsl #16
    3374:	03055201 	movweq	r5, #20993	; 0x5201
    3378:	0000a3c0 	andeq	sl, r0, r0, asr #7
    337c:	05510120 	ldrbeq	r0, [r1, #-288]	; 0x120
    3380:	00a3f403 	adceq	pc, r3, r3, lsl #8
    3384:	50012000 	andpl	r2, r1, r0
    3388:	a44c0305 	strbge	r0, [ip], #-773	; 0x305
    338c:	24000000 	strcs	r0, [r0], #-0
    3390:	00009598 	muleq	r0, r8, r5
    3394:	00001184 	andeq	r1, r0, r4, lsl #3
    3398:	00902a00 	addseq	r2, r0, r0, lsl #20
    339c:	112c0000 	teqne	ip, r0
    33a0:	812b0000 	teqhi	fp, r0
    33a4:	16000000 	strne	r0, [r0], -r0
    33a8:	111c0700 	tstne	ip, r0, lsl #14
    33ac:	b7310000 	ldrlt	r0, [r1, -r0]!
    33b0:	06000007 	streq	r0, [r0], -r7
    33b4:	00114721 	andseq	r4, r1, r1, lsr #14
    33b8:	002c3200 	eoreq	r3, ip, r0, lsl #4
    33bc:	2c320000 	ldccs	0, cr0, [r2], #-0
    33c0:	00000000 	andeq	r0, r0, r0
    33c4:	0004b233 	andeq	fp, r4, r3, lsr r2
    33c8:	2c570700 	mrrccs	7, 0, r0, r7, cr0
    33cc:	34000000 	strcc	r0, [r0], #-0
    33d0:	0000077a 	andeq	r0, r0, sl, ror r7
    33d4:	00252406 	eoreq	r2, r5, r6, lsl #8
    33d8:	11670000 	cmnne	r7, r0
    33dc:	2c320000 	ldccs	0, cr0, [r2], #-0
    33e0:	00000000 	andeq	r0, r0, r0
    33e4:	0001cb35 	andeq	ip, r1, r5, lsr fp
    33e8:	341e0700 	ldrcc	r0, [lr], #-1792	; 0x700
    33ec:	000001fa 	strdeq	r0, [r0], -sl
    33f0:	00252907 	eoreq	r2, r5, r7, lsl #18
    33f4:	11840000 	orrne	r0, r4, r0
    33f8:	97320000 	ldrls	r0, [r2, -r0]!
    33fc:	2f000000 	svccs	0x00000000
    3400:	00903500 	addseq	r3, r0, r0, lsl #10
    3404:	66070000 	strvs	r0, [r7], -r0
    3408:	0007f531 	andeq	pc, r7, r1, lsr r5	; <UNPREDICTABLE>
    340c:	9c1d0600 	ldcls	6, cr0, [sp], {-0}
    3410:	32000011 	andcc	r0, r0, #17
    3414:	0000002c 	andeq	r0, r0, ip, lsr #32
    3418:	07cf3100 	strbeq	r3, [pc, r0, lsl #2]
    341c:	1c060000 	stcne	0, cr0, [r6], {-0}
    3420:	000011ad 	andeq	r1, r0, sp, lsr #3
    3424:	00002c32 	andeq	r2, r0, r2, lsr ip
    3428:	f7360000 			; <UNDEFINED> instruction: 0xf7360000
    342c:	08000001 	stmdaeq	r0, {r0}
    3430:	00002502 	andeq	r2, r0, r2, lsl #10
    3434:	008a3200 	addeq	r3, sl, r0, lsl #4
    3438:	25320000 	ldrcs	r0, [r2, #-0]!
    343c:	32000000 	andcc	r0, r0, #0
    3440:	00000097 	muleq	r0, r7, r0
    3444:	00010632 	andeq	r0, r1, r2, lsr r6
    3448:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    344c:	04000003 	streq	r0, [r0], #-3
    3450:	0010aa00 	andseq	sl, r0, r0, lsl #20
    3454:	0b010400 	bleq	4445c <__bss_end__+0x39b7c>
    3458:	01000000 	mrseq	r0, (UNDEF: 0)
    345c:	00000977 	andeq	r0, r0, r7, ror r9
    3460:	0000020b 	andeq	r0, r0, fp, lsl #4
    3464:	000095ac 	andeq	r9, r0, ip, lsr #11
    3468:	00000154 	andeq	r0, r0, r4, asr r1
    346c:	00000e72 	andeq	r0, r0, r2, ror lr
    3470:	69050402 	stmdbvs	r5, {r1, sl}
    3474:	0300746e 	movweq	r7, #1134	; 0x46e
    3478:	01570704 	cmpeq	r7, r4, lsl #14
    347c:	01030000 	mrseq	r0, (UNDEF: 3)
    3480:	00008406 	andeq	r8, r0, r6, lsl #8
    3484:	05020300 	streq	r0, [r2, #-768]	; 0x300
    3488:	0000019d 	muleq	r0, sp, r1
    348c:	89050403 	stmdbhi	r5, {r0, r1, sl}
    3490:	03000001 	movweq	r0, #1
    3494:	01840508 	orreq	r0, r4, r8, lsl #10
    3498:	01030000 	mrseq	r0, (UNDEF: 3)
    349c:	00008208 	andeq	r8, r0, r8, lsl #4
    34a0:	07020300 	streq	r0, [r2, -r0, lsl #6]
    34a4:	000000a6 	andeq	r0, r0, r6, lsr #1
    34a8:	52070403 	andpl	r0, r7, #50331648	; 0x3000000
    34ac:	03000001 	movweq	r0, #1
    34b0:	014d0708 	cmpeq	sp, r8, lsl #14
    34b4:	04030000 	streq	r0, [r3], #-0
    34b8:	00017b07 	andeq	r7, r1, r7, lsl #22
    34bc:	08010300 	stmdaeq	r1, {r8, r9}
    34c0:	0000008b 	andeq	r0, r0, fp, lsl #1
    34c4:	0c020104 	stfeqs	f0, [r2], {4}
    34c8:	000000b2 	strheq	r0, [r0], -r2
    34cc:	00099405 	andeq	r9, r9, r5, lsl #8
    34d0:	88050000 	stmdahi	r5, {}	; <UNPREDICTABLE>
    34d4:	01000008 	tsteq	r0, r8
    34d8:	00084105 	andeq	r4, r8, r5, lsl #2
    34dc:	99050400 	stmdbls	r5, {sl}
    34e0:	05000008 	streq	r0, [r0, #-8]
    34e4:	0008a805 	andeq	sl, r8, r5, lsl #16
    34e8:	b7050600 	strlt	r0, [r5, -r0, lsl #12]
    34ec:	07000008 	streq	r0, [r0, -r8]
    34f0:	00094705 	andeq	r4, r9, r5, lsl #14
    34f4:	c6050300 	strgt	r0, [r5], -r0, lsl #6
    34f8:	02000008 	andeq	r0, r0, #8
    34fc:	08f90600 	ldmeq	r9!, {r9, sl}^
    3500:	15020000 	strne	r0, [r2, #-0]
    3504:	00000079 	andeq	r0, r0, r9, ror r0
    3508:	00007807 	andeq	r7, r0, r7, lsl #16
    350c:	ac370100 	ldfges	f0, [r7], #-0
    3510:	9c000095 	stcls	0, cr0, [r0], {149}	; 0x95
    3514:	01000000 	mrseq	r0, (UNDEF: 0)
    3518:	0001c39c 	muleq	r1, ip, r3
    351c:	95b40800 	ldrls	r0, [r4, #2048]!	; 0x800
    3520:	03a80000 			; <UNDEFINED> instruction: 0x03a80000
    3524:	c0090000 	andgt	r0, r9, r0
    3528:	af000095 	svcge	0x00000095
    352c:	f3000003 	vhadd.u8	d0, d0, d3
    3530:	0a000000 	beq	3538 <_start-0x4ac8>
    3534:	32015101 	andcc	r5, r1, #1073741824	; 0x40000000
    3538:	0150010a 	cmpeq	r0, sl, lsl #2
    353c:	cc09003e 	stcgt	0, cr0, [r9], {62}	; 0x3e
    3540:	af000095 	svcge	0x00000095
    3544:	0b000003 	bleq	3558 <_start-0x4aa8>
    3548:	0a000001 	beq	3554 <_start-0x4aac>
    354c:	32015101 	andcc	r5, r1, #1073741824	; 0x40000000
    3550:	0150010a 	cmpeq	r0, sl, lsl #2
    3554:	d008003f 	andle	r0, r8, pc, lsr r0
    3558:	a8000095 	stmdage	r0, {r0, r2, r4, r7}
    355c:	09000003 	stmdbeq	r0, {r0, r1}
    3560:	000095e0 	andeq	r9, r0, r0, ror #11
    3564:	000003c5 	andeq	r0, r0, r5, asr #7
    3568:	00000128 	andeq	r0, r0, r8, lsr #2
    356c:	0250010a 	subseq	r0, r0, #-2147483646	; 0x80000002
    3570:	09000075 	stmdbeq	r0, {r0, r2, r4, r5, r6}
    3574:	000095ec 	andeq	r9, r0, ip, ror #11
    3578:	000003e6 	andeq	r0, r0, r6, ror #7
    357c:	0000013c 	andeq	r0, r0, ip, lsr r1
    3580:	0250010a 	subseq	r0, r0, #-2147483646	; 0x80000002
    3584:	08000075 	stmdaeq	r0, {r0, r2, r4, r5, r6}
    3588:	000095f0 	strdeq	r9, [r0], -r0
    358c:	000003a8 	andeq	r0, r0, r8, lsr #7
    3590:	0095fc09 	addseq	pc, r5, r9, lsl #24
    3594:	0003e600 	andeq	lr, r3, r0, lsl #12
    3598:	00015800 	andeq	r5, r1, r0, lsl #16
    359c:	51010a00 	tstpl	r1, r0, lsl #20
    35a0:	09003001 	stmdbeq	r0, {r0, ip, sp}
    35a4:	00009608 	andeq	r9, r0, r8, lsl #12
    35a8:	000003e6 	andeq	r0, r0, r6, ror #7
    35ac:	0000016b 	andeq	r0, r0, fp, ror #2
    35b0:	0151010a 	cmpeq	r1, sl, lsl #2
    35b4:	14090030 	strne	r0, [r9], #-48	; 0x30
    35b8:	e6000096 			; <UNDEFINED> instruction: 0xe6000096
    35bc:	7e000003 	cdpvc	0, 0, cr0, cr0, cr3, {0}
    35c0:	0a000001 	beq	35cc <_start-0x4a34>
    35c4:	36015101 	strcc	r5, [r1], -r1, lsl #2
    35c8:	96200900 	strtls	r0, [r0], -r0, lsl #18
    35cc:	03e60000 	mvneq	r0, #0
    35d0:	01910000 	orrseq	r0, r1, r0
    35d4:	010a0000 	mrseq	r0, (UNDEF: 10)
    35d8:	00330151 	eorseq	r0, r3, r1, asr r1
    35dc:	00962c09 	addseq	r2, r6, r9, lsl #24
    35e0:	0003e600 	andeq	lr, r3, r0, lsl #12
    35e4:	0001a600 	andeq	sl, r1, r0, lsl #12
    35e8:	51010a00 	tstpl	r1, r0, lsl #20
    35ec:	010e0a03 	tsteq	lr, r3, lsl #20
    35f0:	96380900 	ldrtls	r0, [r8], -r0, lsl #18
    35f4:	03e60000 	mvneq	r0, #0
    35f8:	01b90000 			; <UNDEFINED> instruction: 0x01b90000
    35fc:	010a0000 	mrseq	r0, (UNDEF: 10)
    3600:	00330151 	eorseq	r0, r3, r1, asr r1
    3604:	00963c08 	addseq	r3, r6, r8, lsl #24
    3608:	0003a800 	andeq	sl, r3, r0, lsl #16
    360c:	500b0000 	andpl	r0, fp, r0
    3610:	01000008 	tsteq	r0, r8
    3614:	00002557 	andeq	r2, r0, r7, asr r5
    3618:	00964800 	addseq	r4, r6, r0, lsl #16
    361c:	00001c00 	andeq	r1, r0, r0, lsl #24
    3620:	e69c0100 	ldr	r0, [ip], r0, lsl #2
    3624:	08000001 	stmdaeq	r0, {r0}
    3628:	00009658 	andeq	r9, r0, r8, asr r6
    362c:	000003c5 	andeq	r0, r0, r5, asr #7
    3630:	072c0b00 	streq	r0, [ip, -r0, lsl #22]!
    3634:	5d010000 	stcpl	0, cr0, [r1, #-0]
    3638:	00000025 	andeq	r0, r0, r5, lsr #32
    363c:	00009664 	andeq	r9, r0, r4, ror #12
    3640:	00000028 	andeq	r0, r0, r8, lsr #32
    3644:	02129c01 	andseq	r9, r2, #256	; 0x100
    3648:	6c080000 	stcvs	0, cr0, [r8], {-0}
    364c:	c3000096 	movwgt	r0, #150	; 0x96
    3650:	08000001 	stmdaeq	r0, {r0}
    3654:	00009680 	andeq	r9, r0, r0, lsl #13
    3658:	000003c5 	andeq	r0, r0, r5, asr #7
    365c:	09050b00 	stmdbeq	r5, {r8, r9, fp}
    3660:	64010000 	strvs	r0, [r1], #-0
    3664:	00000025 	andeq	r0, r0, r5, lsr #32
    3668:	0000968c 	andeq	r9, r0, ip, lsl #13
    366c:	0000001c 	andeq	r0, r0, ip, lsl r0
    3670:	02359c01 	eorseq	r9, r5, #256	; 0x100
    3674:	9c080000 	stcls	0, cr0, [r8], {-0}
    3678:	c5000096 	strgt	r0, [r0, #-150]	; 0x96
    367c:	00000003 	andeq	r0, r0, r3
    3680:	0003da07 	andeq	sp, r3, r7, lsl #20
    3684:	a86a0100 	stmdage	sl!, {r8}^
    3688:	2c000096 	stccs	0, cr0, [r0], {150}	; 0x96
    368c:	01000000 	mrseq	r0, (UNDEF: 0)
    3690:	0002719c 	muleq	r2, ip, r1
    3694:	00630c00 	rsbeq	r0, r3, r0, lsl #24
    3698:	002c6a01 	eoreq	r6, ip, r1, lsl #20
    369c:	179c0000 	ldrne	r0, [ip, r0]
    36a0:	b4080000 	strlt	r0, [r8], #-0
    36a4:	12000096 	andne	r0, r0, #150	; 0x96
    36a8:	0d000002 	stceq	0, cr0, [r0, #-8]
    36ac:	000096cc 	andeq	r9, r0, ip, asr #13
    36b0:	000003e6 	andeq	r0, r0, r6, ror #7
    36b4:	0251010a 	subseq	r0, r1, #-2147483646	; 0x80000002
    36b8:	00000074 	andeq	r0, r0, r4, ror r0
    36bc:	00086e0b 	andeq	r6, r8, fp, lsl #28
    36c0:	25740100 	ldrbcs	r0, [r4, #-256]!	; 0x100
    36c4:	d4000000 	strle	r0, [r0], #-0
    36c8:	0c000096 	stceq	0, cr0, [r0], {150}	; 0x96
    36cc:	01000000 	mrseq	r0, (UNDEF: 0)
    36d0:	0002949c 	muleq	r2, ip, r4
    36d4:	96dc0800 	ldrbls	r0, [ip], r0, lsl #16
    36d8:	01c30000 	biceq	r0, r3, r0
    36dc:	0b000000 	bleq	36e4 <_start-0x491c>
    36e0:	000009b3 			; <UNDEFINED> instruction: 0x000009b3
    36e4:	00257801 	eoreq	r7, r5, r1, lsl #16
    36e8:	96e00000 	strbtls	r0, [r0], r0
    36ec:	00200000 	eoreq	r0, r0, r0
    36f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    36f4:	000002c0 	andeq	r0, r0, r0, asr #5
    36f8:	0096e808 	addseq	lr, r6, r8, lsl #16
    36fc:	00027100 	andeq	r7, r2, r0, lsl #2
    3700:	96f40800 	ldrbtls	r0, [r4], r0, lsl #16
    3704:	01e60000 	mvneq	r0, r0
    3708:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    370c:	0000091f 	andeq	r0, r0, pc, lsl r9
    3710:	02d11601 	sbcseq	r1, r1, #1048576	; 0x100000
    3714:	03050000 	movweq	r0, #20480	; 0x5000
    3718:	00009de4 	andeq	r9, r0, r4, ror #27
    371c:	02d7040f 	sbcseq	r0, r7, #251658240	; 0xf000000
    3720:	2c100000 	ldccs	0, cr0, [r0], {-0}
    3724:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    3728:	00000913 	andeq	r0, r0, r3, lsl r9
    372c:	02d11701 	sbcseq	r1, r1, #262144	; 0x40000
    3730:	03050000 	movweq	r0, #20480	; 0x5000
    3734:	00009db4 			; <UNDEFINED> instruction: 0x00009db4
    3738:	0008240e 	andeq	r2, r8, lr, lsl #8
    373c:	d11a0100 	tstle	sl, r0, lsl #2
    3740:	05000002 	streq	r0, [r0, #-2]
    3744:	009dd003 	addseq	sp, sp, r3
    3748:	08d50e00 	ldmeq	r5, {r9, sl, fp}^
    374c:	1b010000 	blne	43754 <__bss_end__+0x38e74>
    3750:	000002d1 	ldrdeq	r0, [r0], -r1
    3754:	9dbc0305 	ldcls	3, cr0, [ip, #20]!
    3758:	ea0e0000 	b	383760 <__bss_end__+0x378e80>
    375c:	01000008 	tsteq	r0, r8
    3760:	0002d11c 	andeq	sp, r2, ip, lsl r1
    3764:	c0030500 	andgt	r0, r3, r0, lsl #10
    3768:	0e00009d 	mcreq	0, 0, r0, cr0, cr13, {4}
    376c:	00000985 	andeq	r0, r0, r5, lsl #19
    3770:	02d11d01 	sbcseq	r1, r1, #1, 26	; 0x40
    3774:	03050000 	movweq	r0, #20480	; 0x5000
    3778:	00009dc4 	andeq	r9, r0, r4, asr #27
    377c:	0008150e 	andeq	r1, r8, lr, lsl #10
    3780:	d11e0100 	tstle	lr, r0, lsl #2
    3784:	05000002 	streq	r0, [r0, #-2]
    3788:	009de003 	addseq	lr, sp, r3
    378c:	09a40e00 	stmibeq	r4!, {r9, sl, fp}
    3790:	1f010000 	svcne	0x00010000
    3794:	000002d1 	ldrdeq	r0, [r0], -r1
    3798:	9dcc0305 	stclls	3, cr0, [ip, #20]
    379c:	320e0000 	andcc	r0, lr, #0
    37a0:	01000008 	tsteq	r0, r8
    37a4:	0002d120 	andeq	sp, r2, r0, lsr #2
    37a8:	dc030500 	cfstr32le	mvfx0, [r3], {-0}
    37ac:	0e00009d 	mcreq	0, 0, r0, cr0, cr13, {4}
    37b0:	00000968 	andeq	r0, r0, r8, ror #18
    37b4:	02d12101 	sbcseq	r2, r1, #1073741824	; 0x40000000
    37b8:	03050000 	movweq	r0, #20480	; 0x5000
    37bc:	00009dd8 	ldrdeq	r9, [r0], -r8
    37c0:	00085e0e 	andeq	r5, r8, lr, lsl #28
    37c4:	d1220100 	teqle	r2, r0, lsl #2
    37c8:	05000002 	streq	r0, [r0, #-2]
    37cc:	009db803 	addseq	fp, sp, r3, lsl #16
    37d0:	09370e00 	ldmdbeq	r7!, {r9, sl, fp}
    37d4:	23010000 	movwcs	r0, #4096	; 0x1000
    37d8:	000002d1 	ldrdeq	r0, [r0], -r1
    37dc:	9dd40305 	ldclls	3, cr0, [r4, #20]
    37e0:	270e0000 	strcs	r0, [lr, -r0]
    37e4:	01000009 	tsteq	r0, r9
    37e8:	0002d124 	andeq	sp, r2, r4, lsr #2
    37ec:	c8030500 	stmdagt	r3, {r8, sl}
    37f0:	1100009d 	swpne	r0, sp, [r0]	; <UNPREDICTABLE>
    37f4:	0000087c 	andeq	r0, r0, ip, ror r8
    37f8:	56128a03 	ldrpl	r8, [r2], -r3, lsl #20
    37fc:	02000009 	andeq	r0, r0, #9
    3800:	0003c519 	andeq	ip, r3, r9, lsl r5
    3804:	002c1300 	eoreq	r1, ip, r0, lsl #6
    3808:	b2130000 	andslt	r0, r3, #0
    380c:	00000000 	andeq	r0, r0, r0
    3810:	0009c314 	andeq	ip, r9, r4, lsl r3
    3814:	2ca90300 	stccs	3, cr0, [r9]
    3818:	da000000 	ble	3820 <_start-0x47e0>
    381c:	13000003 	movwne	r0, #3
    3820:	000003da 	ldrdeq	r0, [r0], -sl
    3824:	e0040f00 	and	r0, r4, r0, lsl #30
    3828:	15000003 	strne	r0, [r0, #-3]
    382c:	000003e5 	andeq	r0, r0, r5, ror #7
    3830:	08e41216 	stmiaeq	r4!, {r1, r2, r4, r9, ip}^
    3834:	9d030000 	stcls	0, cr0, [r3, #-0]
    3838:	000003fc 	strdeq	r0, [r0], -ip
    383c:	0003fc13 	andeq	pc, r3, r3, lsl ip	; <UNPREDICTABLE>
    3840:	002c1300 	eoreq	r1, ip, r0, lsl #6
    3844:	0f000000 	svceq	0x00000000
    3848:	0003e504 	andeq	lr, r3, r4, lsl #10
    384c:	08210000 	stmdaeq	r1!, {}	; <UNPREDICTABLE>
    3850:	00040000 	andeq	r0, r4, r0
    3854:	000011d8 	ldrdeq	r1, [r0], -r8
    3858:	000b0104 	andeq	r0, fp, r4, lsl #2
    385c:	13010000 	movwne	r0, #4096	; 0x1000
    3860:	0b00000a 	bleq	3890 <_start-0x4770>
    3864:	d0000002 	andle	r0, r0, r2
    3868:	68000097 	stmdavs	r0, {r0, r1, r2, r4, r7}
    386c:	77000005 	strvc	r0, [r0, -r5]
    3870:	0200000f 	andeq	r0, r0, #15
    3874:	014d0708 	cmpeq	sp, r8, lsl #14
    3878:	04020000 	streq	r0, [r2], #-0
    387c:	00015707 	andeq	r5, r1, r7, lsl #14
    3880:	06010200 	streq	r0, [r1], -r0, lsl #4
    3884:	00000084 	andeq	r0, r0, r4, lsl #1
    3888:	9d050202 	sfmls	f0, 4, [r5, #-8]
    388c:	02000001 	andeq	r0, r0, #1
    3890:	01890504 	orreq	r0, r9, r4, lsl #10
    3894:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    3898:	00018405 	andeq	r8, r1, r5, lsl #8
    389c:	08010200 	stmdaeq	r1, {r9}
    38a0:	00000082 	andeq	r0, r0, r2, lsl #1
    38a4:	a6070202 	strge	r0, [r7], -r2, lsl #4
    38a8:	02000000 	andeq	r0, r0, #0
    38ac:	01520704 	cmpeq	r2, r4, lsl #14
    38b0:	04030000 	streq	r0, [r3], #-0
    38b4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    38b8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    38bc:	0000017b 	andeq	r0, r0, fp, ror r1
    38c0:	8b080102 	blhi	203cd0 <__bss_end__+0x1f93f0>
    38c4:	04000000 	streq	r0, [r0], #-0
    38c8:	b20c0201 	andlt	r0, ip, #268435456	; 0x10000000
    38cc:	05000000 	streq	r0, [r0, #-0]
    38d0:	00000994 	muleq	r0, r4, r9
    38d4:	08880500 	stmeq	r8, {r8, sl}
    38d8:	05010000 	streq	r0, [r1, #-0]
    38dc:	00000841 	andeq	r0, r0, r1, asr #16
    38e0:	08990504 	ldmeq	r9, {r2, r8, sl}
    38e4:	05050000 	streq	r0, [r5, #-0]
    38e8:	000008a8 	andeq	r0, r0, r8, lsr #17
    38ec:	08b70506 	ldmeq	r7!, {r1, r2, r8, sl}
    38f0:	05070000 	streq	r0, [r7, #-0]
    38f4:	00000947 	andeq	r0, r0, r7, asr #18
    38f8:	08c60503 	stmiaeq	r6, {r0, r1, r8, sl}^
    38fc:	00020000 	andeq	r0, r2, r0
    3900:	0008f906 	andeq	pc, r8, r6, lsl #18
    3904:	79150200 	ldmdbvc	r5, {r9}
    3908:	07000000 	streq	r0, [r0, -r0]
    390c:	000007f5 	strdeq	r0, [r0], -r5
    3910:	97d03f01 	ldrbls	r3, [r0, r1, lsl #30]
    3914:	00d40000 	sbcseq	r0, r4, r0
    3918:	9c010000 	stcls	0, cr0, [r1], {-0}
    391c:	00000133 	andeq	r0, r0, r3, lsr r1
    3920:	6e697008 	cdpvs	0, 6, cr7, cr9, cr8, {0}
    3924:	2c3f0100 	ldfcss	f0, [pc], #-0	; 392c <_start-0x46d4>
    3928:	ba000000 	blt	3930 <_start-0x46d0>
    392c:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    3930:	00000a4f 	andeq	r0, r0, pc, asr #20
    3934:	01334701 	teqeq	r3, r1, lsl #14
    3938:	17d80000 	ldrbne	r0, [r8, r0]
    393c:	37090000 	strcc	r0, [r9, -r0]
    3940:	0100000b 	tsteq	r0, fp
    3944:	00002c49 	andeq	r2, r0, r9, asr #24
    3948:	00182d00 	andseq	r2, r8, r0, lsl #26
    394c:	0ae20900 	beq	ff885d54 <__bss_end__+0xff87b474>
    3950:	57010000 	strpl	r0, [r1, -r0]
    3954:	0000002c 	andeq	r0, r0, ip, lsr #32
    3958:	000019f9 	strdeq	r1, [r0], -r9
    395c:	0098640a 	addseq	r6, r8, sl, lsl #8
    3960:	0007e000 	andeq	lr, r7, r0
    3964:	00012200 	andeq	r2, r1, r0, lsl #4
    3968:	50010b00 	andpl	r0, r1, r0, lsl #22
    396c:	00007502 	andeq	r7, r0, r2, lsl #10
    3970:	0098980c 	addseq	r9, r8, ip, lsl #16
    3974:	00080100 	andeq	r0, r8, r0, lsl #2
    3978:	50010b00 	andpl	r0, r1, r0, lsl #22
    397c:	00007502 	andeq	r7, r0, r2, lsl #10
    3980:	39040d00 	stmdbcc	r4, {r8, sl, fp}
    3984:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    3988:	0000002c 	andeq	r0, r0, ip, lsr #32
    398c:	000b0707 	andeq	r0, fp, r7, lsl #14
    3990:	a4600100 	strbtge	r0, [r0], #-256	; 0x100
    3994:	38000098 	stmdacc	r0, {r3, r4, r7}
    3998:	01000000 	mrseq	r0, (UNDEF: 0)
    399c:	0001969c 	muleq	r1, ip, r6
    39a0:	69700800 	ldmdbvs	r0!, {fp}^
    39a4:	6001006e 	andvs	r0, r1, lr, rrx
    39a8:	0000002c 	andeq	r0, r0, ip, lsr #32
    39ac:	00001a29 	andeq	r1, r0, r9, lsr #20
    39b0:	000a4f09 	andeq	r4, sl, r9, lsl #30
    39b4:	33670100 	cmncc	r7, #0, 2
    39b8:	4a000001 	bmi	39c4 <_start-0x463c>
    39bc:	0900001a 	stmdbeq	r0, {r1, r3, r4}
    39c0:	00000ae2 	andeq	r0, r0, r2, ror #21
    39c4:	002c6801 	eoreq	r6, ip, r1, lsl #16
    39c8:	1a800000 	bne	fe0039d0 <__bss_end__+0xfdff90f0>
    39cc:	d40c0000 	strle	r0, [ip], #-0
    39d0:	01000098 	swpeq	r0, r8, [r0]	; <UNPREDICTABLE>
    39d4:	0b000008 	bleq	39fc <_start-0x4604>
    39d8:	31075101 	tstcc	r7, r1, lsl #2
    39dc:	4f5001f3 	svcmi	0x005001f3
    39e0:	0000241a 	andeq	r2, r0, sl, lsl r4
    39e4:	000a0607 	andeq	r0, sl, r7, lsl #12
    39e8:	dc7b0100 	ldflee	f0, [fp], #-0
    39ec:	38000098 	stmdacc	r0, {r3, r4, r7}
    39f0:	01000000 	mrseq	r0, (UNDEF: 0)
    39f4:	0001ee9c 	muleq	r1, ip, lr
    39f8:	69700800 	ldmdbvs	r0!, {fp}^
    39fc:	7b01006e 	blvc	43bbc <__bss_end__+0x392dc>
    3a00:	0000002c 	andeq	r0, r0, ip, lsr #32
    3a04:	00001ac0 	andeq	r1, r0, r0, asr #21
    3a08:	000a4f09 	andeq	r4, sl, r9, lsl #30
    3a0c:	33810100 	orrcc	r0, r1, #0, 2
    3a10:	e1000001 	tst	r0, r1
    3a14:	0900001a 	stmdbeq	r0, {r1, r3, r4}
    3a18:	00000ae2 	andeq	r0, r0, r2, ror #21
    3a1c:	002c8201 	eoreq	r8, ip, r1, lsl #4
    3a20:	1b170000 	blne	5c3a28 <__bss_end__+0x5b9148>
    3a24:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    3a28:	01000099 	swpeq	r0, r9, [r0]	; <UNPREDICTABLE>
    3a2c:	0b000008 	bleq	3a54 <_start-0x45ac>
    3a30:	31075101 	tstcc	r7, r1, lsl #2
    3a34:	4f5001f3 	svcmi	0x005001f3
    3a38:	0000241a 	andeq	r2, r0, sl, lsl r4
    3a3c:	0007cf07 	andeq	ip, r7, r7, lsl #30
    3a40:	14950100 	ldrne	r0, [r5], #256	; 0x100
    3a44:	cc000099 	stcgt	0, cr0, [r0], {153}	; 0x99
    3a48:	01000000 	mrseq	r0, (UNDEF: 0)
    3a4c:	0002649c 	muleq	r2, ip, r4
    3a50:	69700800 	ldmdbvs	r0!, {fp}^
    3a54:	9501006e 	strls	r0, [r1, #-110]	; 0x6e
    3a58:	0000002c 	andeq	r0, r0, ip, lsr #32
    3a5c:	00001b57 	andeq	r1, r0, r7, asr fp
    3a60:	000a4f09 	andeq	r4, sl, r9, lsl #30
    3a64:	339b0100 	orrscc	r0, fp, #0, 2
    3a68:	75000001 	strvc	r0, [r0, #-1]
    3a6c:	0900001b 	stmdbeq	r0, {r0, r1, r3, r4}
    3a70:	00000b37 	andeq	r0, r0, r7, lsr fp
    3a74:	002c9d01 	eoreq	r9, ip, r1, lsl #26
    3a78:	1bca0000 	blne	ff283a80 <__bss_end__+0xff2791a0>
    3a7c:	e2090000 	and	r0, r9, #0
    3a80:	0100000a 	tsteq	r0, sl
    3a84:	00002cab 	andeq	r2, r0, fp, lsr #25
    3a88:	001d9600 	andseq	r9, sp, r0, lsl #12
    3a8c:	99a80a00 	stmibls	r8!, {r9, fp}
    3a90:	07e00000 	strbeq	r0, [r0, r0]!
    3a94:	02530000 	subseq	r0, r3, #0
    3a98:	010b0000 	mrseq	r0, (UNDEF: 11)
    3a9c:	00750250 	rsbseq	r0, r5, r0, asr r2
    3aa0:	99d40c00 	ldmibls	r4, {sl, fp}^
    3aa4:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    3aa8:	010b0000 	mrseq	r0, (UNDEF: 11)
    3aac:	00750250 	rsbseq	r0, r5, r0, asr r2
    3ab0:	7a0f0000 	bvc	3c3ab8 <__bss_end__+0x3b91d8>
    3ab4:	01000007 	tsteq	r0, r7
    3ab8:	000064b3 			; <UNDEFINED> instruction: 0x000064b3
    3abc:	0099e000 	addseq	lr, r9, r0
    3ac0:	00004c00 	andeq	r4, r0, r0, lsl #24
    3ac4:	ac9c0100 	ldfges	f0, [ip], {0}
    3ac8:	08000002 	stmdaeq	r0, {r1}
    3acc:	006e6970 	rsbeq	r6, lr, r0, ror r9
    3ad0:	002cb301 	eoreq	fp, ip, r1, lsl #6
    3ad4:	1db40000 	ldcne	0, cr0, [r4]
    3ad8:	76100000 	ldrvc	r0, [r0], -r0
    3adc:	2cb90100 	ldfcss	f0, [r9]
    3ae0:	0c000000 	stceq	0, cr0, [r0], {-0}
    3ae4:	1100001e 	tstne	r0, lr, lsl r0
    3ae8:	00009a00 	andeq	r9, r0, r0, lsl #20
    3aec:	000007e0 	andeq	r0, r0, r0, ror #15
    3af0:	009a1011 	addseq	r1, sl, r1, lsl r0
    3af4:	0007e000 	andeq	lr, r7, r0
    3af8:	b7070000 	strlt	r0, [r7, -r0]
    3afc:	01000007 	tsteq	r0, r7
    3b00:	009a2cc5 	addseq	r2, sl, r5, asr #25
    3b04:	00002400 	andeq	r2, r0, r0, lsl #8
    3b08:	fc9c0100 	ldc2	1, cr0, [ip], {0}
    3b0c:	08000002 	stmdaeq	r0, {r1}
    3b10:	006e6970 	rsbeq	r6, lr, r0, ror r9
    3b14:	002cc501 	eoreq	ip, ip, r1, lsl #10
    3b18:	1e420000 	cdpne	0, 4, cr0, cr2, cr0, {0}
    3b1c:	76080000 	strvc	r0, [r8], -r0
    3b20:	2cc50100 	stfcse	f0, [r5], {0}
    3b24:	7c000000 	stcvc	0, cr0, [r0], {-0}
    3b28:	0a00001e 	beq	3ba8 <_start-0x4458>
    3b2c:	00009a44 	andeq	r9, r0, r4, asr #20
    3b30:	0000013e 	andeq	r0, r0, lr, lsr r1
    3b34:	000002f2 	strdeq	r0, [r0], -r2
    3b38:	0350010b 	cmpeq	r0, #-1073741822	; 0xc0000002
    3b3c:	005001f3 	ldrsheq	r0, [r0], #-19	; 0xffffffed
    3b40:	009a4c11 	addseq	r4, sl, r1, lsl ip
    3b44:	00019600 	andeq	r9, r1, r0, lsl #12
    3b48:	56070000 	strpl	r0, [r7], -r0
    3b4c:	01000009 	tsteq	r0, r9
    3b50:	009a50d1 	ldrsbeq	r5, [sl], r1
    3b54:	0000d800 	andeq	sp, r0, r0, lsl #16
    3b58:	819c0100 	orrshi	r0, ip, r0, lsl #2
    3b5c:	08000003 	stmdaeq	r0, {r0, r1}
    3b60:	006e6970 	rsbeq	r6, lr, r0, ror r9
    3b64:	002cd101 	eoreq	sp, ip, r1, lsl #2
    3b68:	1eb60000 	cdpne	0, 11, cr0, cr6, cr0, {0}
    3b6c:	f4120000 			; <UNDEFINED> instruction: 0xf4120000
    3b70:	0100000a 	tsteq	r0, sl
    3b74:	0000b2d1 	ldrdeq	fp, [r0], -r1
    3b78:	001ed400 	andseq	sp, lr, r0, lsl #8
    3b7c:	0a4f0900 	beq	13c5f84 <__bss_end__+0x13bb6a4>
    3b80:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    3b84:	00000133 	andeq	r0, r0, r3, lsr r1
    3b88:	00001ef5 	strdeq	r1, [r0], -r5
    3b8c:	000b3709 	andeq	r3, fp, r9, lsl #14
    3b90:	2cda0100 	ldfcse	f0, [sl], {0}
    3b94:	4a000000 	bmi	3b9c <_start-0x4464>
    3b98:	0900001f 	stmdbeq	r0, {r0, r1, r2, r3, r4}
    3b9c:	00000ae2 	andeq	r0, r0, r2, ror #21
    3ba0:	002ce801 	eoreq	lr, ip, r1, lsl #16
    3ba4:	21160000 	tstcs	r6, r0
    3ba8:	ec0a0000 	stc	0, cr0, [sl], {-0}
    3bac:	e000009a 	mul	r0, sl, r0
    3bb0:	70000007 	andvc	r0, r0, r7
    3bb4:	0b000003 	bleq	3bc8 <_start-0x4438>
    3bb8:	76025001 	strvc	r5, [r2], -r1
    3bbc:	1c0c0000 	stcne	0, cr0, [ip], {-0}
    3bc0:	0100009b 	swpeq	r0, fp, [r0]	; <UNPREDICTABLE>
    3bc4:	0b000008 	bleq	3bec <_start-0x4414>
    3bc8:	76025001 	strvc	r5, [r2], -r1
    3bcc:	13000000 	movwne	r0, #0
    3bd0:	000009fa 	strdeq	r0, [r0], -sl
    3bd4:	64010501 	strvs	r0, [r1], #-1281	; 0x501
    3bd8:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    3bdc:	2c00009b 	stccs	0, cr0, [r0], {155}	; 0x9b
    3be0:	01000000 	mrseq	r0, (UNDEF: 0)
    3be4:	0003b59c 	muleq	r3, ip, r5
    3be8:	09fd1400 	ldmibeq	sp!, {sl, ip}^
    3bec:	05010000 	streq	r0, [r1, #-0]
    3bf0:	00002c01 	andeq	r2, r0, r1, lsl #24
    3bf4:	00214700 	eoreq	r4, r1, r0, lsl #14
    3bf8:	9b381100 	blls	e08000 <__bss_end__+0xdfd720>
    3bfc:	07e00000 	strbeq	r0, [r0, r0]!
    3c00:	15000000 	strne	r0, [r0, #-0]
    3c04:	00000a92 	muleq	r0, r2, sl
    3c08:	54011401 	strpl	r1, [r1], #-1025	; 0x401
    3c0c:	8400009b 	strhi	r0, [r0], #-155	; 0x9b
    3c10:	01000000 	mrseq	r0, (UNDEF: 0)
    3c14:	0004799c 	muleq	r4, ip, r9
    3c18:	69701600 	ldmdbvs	r0!, {r9, sl, ip}^
    3c1c:	1401006e 	strne	r0, [r1], #-110	; 0x6e
    3c20:	00002c01 	andeq	r2, r0, r1, lsl #24
    3c24:	00216800 	eoreq	r6, r1, r0, lsl #16
    3c28:	0a211700 	beq	849830 <__bss_end__+0x83ef50>
    3c2c:	26010000 	strcs	r0, [r1], -r0
    3c30:	00002c01 	andeq	r2, r0, r1, lsl #24
    3c34:	00219400 	eoreq	r9, r1, r0, lsl #8
    3c38:	9b701800 	blls	1c09c40 <__bss_end__+0x1bff360>
    3c3c:	001c0000 	andseq	r0, ip, r0
    3c40:	041b0000 	ldreq	r0, [fp], #-0
    3c44:	e2170000 	ands	r0, r7, #0
    3c48:	0100000a 	tsteq	r0, sl
    3c4c:	002c011d 	eoreq	r0, ip, sp, lsl r1
    3c50:	21b20000 			; <UNDEFINED> instruction: 0x21b20000
    3c54:	7c110000 	ldcvc	0, cr0, [r1], {-0}
    3c58:	e000009b 	mul	r0, fp, r0
    3c5c:	11000007 	tstne	r0, r7
    3c60:	00009b8c 	andeq	r9, r0, ip, lsl #23
    3c64:	00000801 	andeq	r0, r0, r1, lsl #16
    3c68:	9b901800 	blls	fe409c70 <__bss_end__+0xfe3ff390>
    3c6c:	00200000 	eoreq	r0, r0, r0
    3c70:	044b0000 	strbeq	r0, [fp], #-0
    3c74:	e2170000 	ands	r0, r7, #0
    3c78:	0100000a 	tsteq	r0, sl
    3c7c:	002c0121 	eoreq	r0, ip, r1, lsr #2
    3c80:	21d00000 	bicscs	r0, r0, r0
    3c84:	9c110000 	ldcls	0, cr0, [r1], {-0}
    3c88:	e000009b 	mul	r0, fp, r0
    3c8c:	11000007 	tstne	r0, r7
    3c90:	00009bb0 			; <UNDEFINED> instruction: 0x00009bb0
    3c94:	00000801 	andeq	r0, r0, r1, lsl #16
    3c98:	9b681100 	blls	1a080a0 <__bss_end__+0x19fd7c0>
    3c9c:	081d0000 	ldmdaeq	sp, {}	; <UNPREDICTABLE>
    3ca0:	b4110000 	ldrlt	r0, [r1], #-0
    3ca4:	1d00009b 	stcne	0, cr0, [r0, #-620]	; 0xfffffd94
    3ca8:	11000008 	tstne	r0, r8
    3cac:	00009bc0 	andeq	r9, r0, r0, asr #23
    3cb0:	000007e0 	andeq	r0, r0, r0, ror #15
    3cb4:	009bcc11 	addseq	ip, fp, r1, lsl ip
    3cb8:	00080100 	andeq	r0, r8, r0, lsl #2
    3cbc:	9bd01100 	blls	ff4080c4 <__bss_end__+0xff3fd7e4>
    3cc0:	081d0000 	ldmdaeq	sp, {}	; <UNPREDICTABLE>
    3cc4:	15000000 	strne	r0, [r0, #-0]
    3cc8:	00000b21 	andeq	r0, r0, r1, lsr #22
    3ccc:	d8013101 	stmdale	r1, {r0, r8, ip, sp}
    3cd0:	8400009b 	strhi	r0, [r0], #-155	; 0x9b
    3cd4:	01000000 	mrseq	r0, (UNDEF: 0)
    3cd8:	00053d9c 	muleq	r5, ip, sp
    3cdc:	69701600 	ldmdbvs	r0!, {r9, sl, ip}^
    3ce0:	3101006e 	tstcc	r1, lr, rrx
    3ce4:	00002c01 	andeq	r2, r0, r1, lsl #24
    3ce8:	0021ee00 	eoreq	lr, r1, r0, lsl #28
    3cec:	0a211700 	beq	8498f4 <__bss_end__+0x83f014>
    3cf0:	42010000 	andmi	r0, r1, #0
    3cf4:	00002c01 	andeq	r2, r0, r1, lsl #24
    3cf8:	00221a00 	eoreq	r1, r2, r0, lsl #20
    3cfc:	9bf41800 	blls	ffd09d04 <__bss_end__+0xffcff424>
    3d00:	001c0000 	andseq	r0, ip, r0
    3d04:	04df0000 	ldrbeq	r0, [pc], #0	; 3d0c <_start-0x42f4>
    3d08:	e2170000 	ands	r0, r7, #0
    3d0c:	0100000a 	tsteq	r0, sl
    3d10:	002c0139 	eoreq	r0, ip, r9, lsr r1
    3d14:	22380000 	eorscs	r0, r8, #0
    3d18:	00110000 	andseq	r0, r1, r0
    3d1c:	e000009c 	mul	r0, ip, r0
    3d20:	11000007 	tstne	r0, r7
    3d24:	00009c10 	andeq	r9, r0, r0, lsl ip
    3d28:	00000801 	andeq	r0, r0, r1, lsl #16
    3d2c:	9c141800 	ldcls	8, cr1, [r4], {-0}
    3d30:	00200000 	eoreq	r0, r0, r0
    3d34:	050f0000 	streq	r0, [pc, #-0]	; 3d3c <_start-0x42c4>
    3d38:	e2170000 	ands	r0, r7, #0
    3d3c:	0100000a 	tsteq	r0, sl
    3d40:	002c013d 	eoreq	r0, ip, sp, lsr r1
    3d44:	22560000 	subscs	r0, r6, #0
    3d48:	20110000 	andscs	r0, r1, r0
    3d4c:	e000009c 	mul	r0, ip, r0
    3d50:	11000007 	tstne	r0, r7
    3d54:	00009c34 	andeq	r9, r0, r4, lsr ip
    3d58:	00000801 	andeq	r0, r0, r1, lsl #16
    3d5c:	9bec1100 	blls	ffb08164 <__bss_end__+0xffafd884>
    3d60:	081d0000 	ldmdaeq	sp, {}	; <UNPREDICTABLE>
    3d64:	38110000 	ldmdacc	r1, {}	; <UNPREDICTABLE>
    3d68:	1d00009c 	stcne	0, cr0, [r0, #-624]	; 0xfffffd90
    3d6c:	11000008 	tstne	r0, r8
    3d70:	00009c44 	andeq	r9, r0, r4, asr #24
    3d74:	000007e0 	andeq	r0, r0, r0, ror #15
    3d78:	009c5011 	addseq	r5, ip, r1, lsl r0
    3d7c:	00080100 	andeq	r0, r8, r0, lsl #2
    3d80:	9c541100 	ldflse	f1, [r4], {-0}
    3d84:	081d0000 	ldmdaeq	sp, {}	; <UNPREDICTABLE>
    3d88:	13000000 	movwne	r0, #0
    3d8c:	000009c9 	andeq	r0, r0, r9, asr #19
    3d90:	64014c01 	strvs	r4, [r1], #-3073	; 0xc01
    3d94:	5c000000 	stcpl	0, cr0, [r0], {-0}
    3d98:	8400009c 	strhi	r0, [r0], #-156	; 0x9c
    3d9c:	01000000 	mrseq	r0, (UNDEF: 0)
    3da0:	0005e39c 	muleq	r5, ip, r3
    3da4:	69701600 	ldmdbvs	r0!, {r9, sl, ip}^
    3da8:	4c01006e 	stcmi	0, cr0, [r1], {110}	; 0x6e
    3dac:	00002c01 	andeq	r2, r0, r1, lsl #24
    3db0:	00227400 	eoreq	r7, r2, r0, lsl #8
    3db4:	9c781800 	ldclls	8, cr1, [r8], #-0
    3db8:	00240000 	eoreq	r0, r4, r0
    3dbc:	05970000 	ldreq	r0, [r7]
    3dc0:	38170000 	ldmdacc	r7, {}	; <UNPREDICTABLE>
    3dc4:	0100000a 	tsteq	r0, sl
    3dc8:	002c0153 	eoreq	r0, ip, r3, asr r1
    3dcc:	22b60000 	adcscs	r0, r6, #0
    3dd0:	84110000 	ldrhi	r0, [r1], #-0
    3dd4:	e000009c 	mul	r0, ip, r0
    3dd8:	11000007 	tstne	r0, r7
    3ddc:	00009c94 	muleq	r0, r4, ip
    3de0:	0000081d 	andeq	r0, r0, sp, lsl r8
    3de4:	9c9c1800 	ldcls	8, cr1, [ip], {0}
    3de8:	002c0000 	eoreq	r0, ip, r0
    3dec:	05d00000 	ldrbeq	r0, [r0]
    3df0:	38170000 	ldmdacc	r7, {}	; <UNPREDICTABLE>
    3df4:	0100000a 	tsteq	r0, sl
    3df8:	002c0156 	eoreq	r0, ip, r6, asr r1
    3dfc:	22d00000 	sbcscs	r0, r0, #0
    3e00:	a8110000 	ldmdage	r1, {}	; <UNPREDICTABLE>
    3e04:	e000009c 	mul	r0, ip, r0
    3e08:	11000007 	tstne	r0, r7
    3e0c:	00009cb4 			; <UNDEFINED> instruction: 0x00009cb4
    3e10:	0000081d 	andeq	r0, r0, sp, lsl r8
    3e14:	009cc011 	addseq	ip, ip, r1, lsl r0
    3e18:	00081d00 	andeq	r1, r8, r0, lsl #26
    3e1c:	70110000 	andsvc	r0, r1, r0
    3e20:	1d00009c 	stcne	0, cr0, [r0, #-624]	; 0xfffffd90
    3e24:	11000008 	tstne	r0, r8
    3e28:	00009ccc 	andeq	r9, r0, ip, asr #25
    3e2c:	0000081d 	andeq	r0, r0, sp, lsl r8
    3e30:	0ab51500 	beq	fed49238 <__bss_end__+0xfed3e958>
    3e34:	5f010000 	svcpl	0x00010000
    3e38:	009ce001 	addseq	lr, ip, r1
    3e3c:	00005800 	andeq	r5, r0, r0, lsl #16
    3e40:	489c0100 	ldmmi	ip, {r8}
    3e44:	16000006 	strne	r0, [r0], -r6
    3e48:	006e6970 	rsbeq	r6, lr, r0, ror r9
    3e4c:	2c015f01 	stccs	15, cr5, [r1], {1}
    3e50:	e3000000 	movw	r0, #0
    3e54:	11000022 	tstne	r0, r2, lsr #32
    3e58:	00009cf4 	strdeq	r9, [r0], -r4
    3e5c:	0000081d 	andeq	r0, r0, sp, lsl r8
    3e60:	009d100a 	addseq	r1, sp, sl
    3e64:	00080100 	andeq	r0, r8, r0, lsl #2
    3e68:	00062800 	andeq	r2, r6, r0, lsl #16
    3e6c:	51010b00 	tstpl	r1, r0, lsl #22
    3e70:	00743104 	rsbseq	r3, r4, r4, lsl #2
    3e74:	2c0a0024 	stccs	0, cr0, [sl], {36}	; 0x24
    3e78:	0100009d 	swpeq	r0, sp, [r0]	; <UNPREDICTABLE>
    3e7c:	3e000008 	cdpcc	0, 0, cr0, cr0, cr8, {0}
    3e80:	0b000006 	bleq	3ea0 <_start-0x4160>
    3e84:	31045101 	tstcc	r4, r1, lsl #2
    3e88:	00240074 	eoreq	r0, r4, r4, ror r0
    3e8c:	009d3011 	addseq	r3, sp, r1, lsl r0
    3e90:	00081d00 	andeq	r1, r8, r0, lsl #26
    3e94:	80190000 	andshi	r0, r9, r0
    3e98:	0100000a 	tsteq	r0, sl
    3e9c:	00013328 	andeq	r3, r1, r8, lsr #6
    3ea0:	44030500 	strmi	r0, [r3], #-1280	; 0x500
    3ea4:	1900009e 	stmdbne	r0, {r1, r2, r3, r4, r7}
    3ea8:	00000aea 	andeq	r0, r0, sl, ror #21
    3eac:	01332901 	teqeq	r3, r1, lsl #18
    3eb0:	03050000 	movweq	r0, #20480	; 0x5000
    3eb4:	00009e40 	andeq	r9, r0, r0, asr #28
    3eb8:	000b4219 	andeq	r4, fp, r9, lsl r2
    3ebc:	332a0100 	teqcc	sl, #0, 2
    3ec0:	05000001 	streq	r0, [r0, #-1]
    3ec4:	009e3c03 	addseq	r3, lr, r3, lsl #24
    3ec8:	0a581900 	beq	160a2d0 <__bss_end__+0x15ff9f0>
    3ecc:	2c010000 	stccs	0, cr0, [r1], {-0}
    3ed0:	00000133 	andeq	r0, r0, r3, lsr r1
    3ed4:	9de80305 	stclls	3, cr0, [r8, #20]!
    3ed8:	60190000 	andsvs	r0, r9, r0
    3edc:	0100000a 	tsteq	r0, sl
    3ee0:	0001332d 	andeq	r3, r1, sp, lsr #6
    3ee4:	ec030500 	cfstr32	mvfx0, [r3], {-0}
    3ee8:	1900009d 	stmdbne	r0, {r0, r2, r3, r4, r7}
    3eec:	000009dd 	ldrdeq	r0, [r0], -sp
    3ef0:	01332e01 	teqeq	r3, r1, lsl #28
    3ef4:	03050000 	movweq	r0, #20480	; 0x5000
    3ef8:	00009df0 	strdeq	r9, [r0], -r0
    3efc:	000a6819 	andeq	r6, sl, r9, lsl r8
    3f00:	332f0100 	teqcc	pc, #0, 2
    3f04:	05000001 	streq	r0, [r0, #-1]
    3f08:	009df403 	addseq	pc, sp, r3, lsl #8
    3f0c:	0a701900 	beq	1c0a314 <__bss_end__+0x1bffa34>
    3f10:	30010000 	andcc	r0, r1, r0
    3f14:	00000133 	andeq	r0, r0, r3, lsr r1
    3f18:	9df80305 	ldclls	3, cr0, [r8, #20]!
    3f1c:	78190000 	ldmdavc	r9, {}	; <UNPREDICTABLE>
    3f20:	0100000a 	tsteq	r0, sl
    3f24:	00013331 	andeq	r3, r1, r1, lsr r3
    3f28:	fc030500 	stc2	5, cr0, [r3], {-0}
    3f2c:	1900009d 	stmdbne	r0, {r0, r2, r3, r4, r7}
    3f30:	00000a2a 	andeq	r0, r0, sl, lsr #20
    3f34:	01333301 	teqeq	r3, r1, lsl #6
    3f38:	03050000 	movweq	r0, #20480	; 0x5000
    3f3c:	00009e00 	andeq	r9, r0, r0, lsl #28
    3f40:	000a3119 	andeq	r3, sl, r9, lsl r1
    3f44:	33340100 	teqcc	r4, #0, 2
    3f48:	05000001 	streq	r0, [r0, #-1]
    3f4c:	009e0403 	addseq	r0, lr, r3, lsl #8
    3f50:	09e51900 	stmibeq	r5!, {r8, fp, ip}^
    3f54:	36010000 	strcc	r0, [r1], -r0
    3f58:	00000133 	andeq	r0, r0, r3, lsr r1
    3f5c:	9e080305 	cdpls	3, 0, cr0, cr8, cr5, {0}
    3f60:	8b190000 	blhi	643f68 <__bss_end__+0x639688>
    3f64:	0100000a 	tsteq	r0, sl
    3f68:	00013337 	andeq	r3, r1, r7, lsr r3
    3f6c:	0c030500 	cfstr32eq	mvfx0, [r3], {-0}
    3f70:	1900009e 	stmdbne	r0, {r1, r2, r3, r4, r7}
    3f74:	00000a41 	andeq	r0, r0, r1, asr #20
    3f78:	01333901 	teqeq	r3, r1, lsl #18
    3f7c:	03050000 	movweq	r0, #20480	; 0x5000
    3f80:	00009e10 	andeq	r9, r0, r0, lsl lr
    3f84:	000a4819 	andeq	r4, sl, r9, lsl r8
    3f88:	333a0100 	teqcc	sl, #0, 2
    3f8c:	05000001 	streq	r0, [r0, #-1]
    3f90:	009e1403 	addseq	r1, lr, r3, lsl #8
    3f94:	0ac61900 	beq	ff18a39c <__bss_end__+0xff17fabc>
    3f98:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    3f9c:	00000133 	andeq	r0, r0, r3, lsr r1
    3fa0:	9e380305 	cdpls	3, 3, cr0, cr8, cr5, {0}
    3fa4:	d4190000 	ldrle	r0, [r9], #-0
    3fa8:	0100000a 	tsteq	r0, sl
    3fac:	000133f1 	strdeq	r3, [r1], -r1
    3fb0:	18030500 	stmdane	r3, {r8, sl}
    3fb4:	1900009e 	stmdbne	r0, {r1, r2, r3, r4, r7}
    3fb8:	00000af9 	strdeq	r0, [r0], -r9
    3fbc:	0133f301 	teqeq	r3, r1, lsl #6
    3fc0:	03050000 	movweq	r0, #20480	; 0x5000
    3fc4:	00009e30 	andeq	r9, r0, r0, lsr lr
    3fc8:	000b0019 	andeq	r0, fp, r9, lsl r0
    3fcc:	33f40100 	mvnscc	r0, #0, 2
    3fd0:	05000001 	streq	r0, [r0, #-1]
    3fd4:	009e3403 	addseq	r3, lr, r3, lsl #8
    3fd8:	0aa71900 	beq	fe9ca3e0 <__bss_end__+0xfe9bfb00>
    3fdc:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    3fe0:	00000133 	andeq	r0, r0, r3, lsr r1
    3fe4:	9e1c0305 	cdpls	3, 1, cr0, cr12, cr5, {0}
    3fe8:	ae190000 	cdpge	0, 1, cr0, cr9, cr0, {0}
    3fec:	0100000a 	tsteq	r0, sl
    3ff0:	000133f7 	strdeq	r3, [r1], -r7
    3ff4:	20030500 	andcs	r0, r3, r0, lsl #10
    3ff8:	1900009e 	stmdbne	r0, {r1, r2, r3, r4, r7}
    3ffc:	00000b13 	andeq	r0, r0, r3, lsl fp
    4000:	0133f901 	teqeq	r3, r1, lsl #18
    4004:	03050000 	movweq	r0, #20480	; 0x5000
    4008:	00009e28 	andeq	r9, r0, r8, lsr #28
    400c:	000b1a19 	andeq	r1, fp, r9, lsl sl
    4010:	33fa0100 	mvnscc	r0, #0, 2
    4014:	05000001 	streq	r0, [r0, #-1]
    4018:	009e2c03 	addseq	r2, lr, r3, lsl #24
    401c:	09ec1900 	stmibeq	ip!, {r8, fp, ip}^
    4020:	fc010000 	stc2	0, cr0, [r1], {-0}
    4024:	00000133 	andeq	r0, r0, r3, lsr r1
    4028:	9e240305 	cdpls	3, 2, cr0, cr4, cr5, {0}
    402c:	c31a0000 	tstgt	sl, #0
    4030:	01000009 	tsteq	r0, r9
    4034:	00002c20 	andeq	r2, r0, r0, lsr #24
    4038:	0007f500 	andeq	pc, r7, r0, lsl #10
    403c:	07f51b00 	ldrbeq	r1, [r5, r0, lsl #22]!
    4040:	0d000000 	stceq	0, cr0, [r0, #-0]
    4044:	0007fb04 	andeq	pc, r7, r4, lsl #22
    4048:	08001c00 	stmdaeq	r0, {sl, fp, ip}
    404c:	1e1d0000 	cdpne	0, 1, cr0, cr13, cr0, {0}
    4050:	000008e4 	andeq	r0, r0, r4, ror #17
    4054:	08171e01 	ldmdaeq	r7, {r0, r9, sl, fp, ip}
    4058:	171b0000 	ldrne	r0, [fp, -r0]
    405c:	1b000008 	blne	4084 <_start-0x3f7c>
    4060:	0000002c 	andeq	r0, r0, ip, lsr #32
    4064:	00040d00 	andeq	r0, r4, r0, lsl #26
    4068:	1f000008 	svcne	0x00000008
    406c:	0000087c 	andeq	r0, r0, ip, ror r8
    4070:	db008a03 	blle	26884 <__bss_end__+0x1bfa4>
    4074:	04000000 	streq	r0, [r0], #-0
    4078:	0013a100 	andseq	sl, r3, r0, lsl #2
    407c:	0b010400 	bleq	45084 <__bss_end__+0x3a7a4>
    4080:	01000000 	mrseq	r0, (UNDEF: 0)
    4084:	00000b4c 	andeq	r0, r0, ip, asr #22
    4088:	0000020b 	andeq	r0, r0, fp, lsl #4
    408c:	00009d38 	andeq	r9, r0, r8, lsr sp
    4090:	00000020 	andeq	r0, r0, r0, lsr #32
    4094:	000010f3 	strdeq	r1, [r0], -r3
    4098:	84060102 	strhi	r0, [r6], #-258	; 0x102
    409c:	02000000 	andeq	r0, r0, #0
    40a0:	00820801 	addeq	r0, r2, r1, lsl #16
    40a4:	02020000 	andeq	r0, r2, #0
    40a8:	00019d05 	andeq	r9, r1, r5, lsl #26
    40ac:	07020200 	streq	r0, [r2, -r0, lsl #4]
    40b0:	000000a6 	andeq	r0, r0, r6, lsr #1
    40b4:	69050403 	stmdbvs	r5, {r0, r1, sl}
    40b8:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    40bc:	01570704 	cmpeq	r7, r4, lsl #14
    40c0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    40c4:	00018405 	andeq	r8, r1, r5, lsl #8
    40c8:	07080200 	streq	r0, [r8, -r0, lsl #4]
    40cc:	0000014d 	andeq	r0, r0, sp, asr #2
    40d0:	89050402 	stmdbhi	r5, {r1, sl}
    40d4:	02000001 	andeq	r0, r0, #1
    40d8:	017b0704 	cmneq	fp, r4, lsl #14
    40dc:	04040000 	streq	r0, [r4], #-0
    40e0:	52070402 	andpl	r0, r7, #33554432	; 0x2000000
    40e4:	05000001 	streq	r0, [r0, #-1]
    40e8:	00007a04 	andeq	r7, r0, r4, lsl #20
    40ec:	08010200 	stmdaeq	r1, {r9}
    40f0:	0000008b 	andeq	r0, r0, fp, lsl #1
    40f4:	00051306 	andeq	r1, r5, r6, lsl #6
    40f8:	48d40200 	ldmmi	r4, {r9}^
    40fc:	07000000 	streq	r0, [r0, -r0]
    4100:	0000054d 	andeq	r0, r0, sp, asr #10
    4104:	006b1b03 	rsbeq	r1, fp, r3, lsl #22
    4108:	9d380000 	ldcls	0, cr0, [r8, #-0]
    410c:	00200000 	eoreq	r0, r0, r0
    4110:	9c010000 	stcls	0, cr0, [r1], {-0}
    4114:	00705f08 	rsbseq	r5, r0, r8, lsl #30
    4118:	006b0301 	rsbeq	r0, fp, r1, lsl #6
    411c:	50010000 	andpl	r0, r1, r0
    4120:	01006308 	tsteq	r0, r8, lsl #6
    4124:	00004103 	andeq	r4, r0, r3, lsl #2
    4128:	09510100 	ldmdbeq	r1, {r8}^
    412c:	0301006e 	movweq	r0, #4206	; 0x106e
    4130:	00000081 	andeq	r0, r0, r1, lsl #1
    4134:	0000230f 	andeq	r2, r0, pc, lsl #6
    4138:	0100700a 	tsteq	r0, sl
    413c:	00007404 	andeq	r7, r0, r4, lsl #8
    4140:	00233000 	eoreq	r3, r3, r0
    4144:	00650b00 	rsbeq	r0, r5, r0, lsl #22
    4148:	00740401 	rsbseq	r0, r4, r1, lsl #8
    414c:	52010000 	andpl	r0, r1, #0
    4150:	01c30000 	biceq	r0, r3, r0
    4154:	00040000 	andeq	r0, r4, r0
    4158:	0000143e 	andeq	r1, r0, lr, lsr r4
    415c:	000b0104 	andeq	r0, fp, r4, lsl #2
    4160:	61010000 	mrsvs	r0, (UNDEF: 1)
    4164:	0b00000b 	bleq	4198 <_start-0x3e68>
    4168:	58000002 	stmdapl	r0, {r1}
    416c:	5000009d 	mulpl	r0, sp, r0
    4170:	e3000000 	movw	r0, #0
    4174:	02000011 	andeq	r0, r0, #17
    4178:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    417c:	13030074 	movwne	r0, #12404	; 0x3074
    4180:	02000005 	andeq	r0, r0, #5
    4184:	000037d4 	ldrdeq	r3, [r0], -r4
    4188:	07040400 	streq	r0, [r4, -r0, lsl #8]
    418c:	00000157 	andeq	r0, r0, r7, asr r1
    4190:	84060104 	strhi	r0, [r6], #-260	; 0x104
    4194:	04000000 	streq	r0, [r0], #-0
    4198:	019d0502 	orrseq	r0, sp, r2, lsl #10
    419c:	04040000 	streq	r0, [r4], #-0
    41a0:	00018905 	andeq	r8, r1, r5, lsl #18
    41a4:	05080400 	streq	r0, [r8, #-1024]	; 0x400
    41a8:	00000184 	andeq	r0, r0, r4, lsl #3
    41ac:	0003e403 	andeq	lr, r3, r3, lsl #8
    41b0:	652e0300 	strvs	r0, [lr, #-768]!	; 0x300
    41b4:	04000000 	streq	r0, [r0], #-0
    41b8:	00820801 	addeq	r0, r2, r1, lsl #16
    41bc:	02040000 	andeq	r0, r4, #0
    41c0:	0000a607 	andeq	sl, r0, r7, lsl #12
    41c4:	01b50300 			; <UNDEFINED> instruction: 0x01b50300
    41c8:	34030000 	strcc	r0, [r3], #-0
    41cc:	0000007e 	andeq	r0, r0, lr, ror r0
    41d0:	52070404 	andpl	r0, r7, #4, 8	; 0x4000000
    41d4:	04000001 	streq	r0, [r0], #-1
    41d8:	014d0708 	cmpeq	sp, r8, lsl #14
    41dc:	04040000 	streq	r0, [r4], #-0
    41e0:	00017b07 	andeq	r7, r1, r7, lsl #22
    41e4:	04040500 	streq	r0, [r4], #-1280	; 0x500
    41e8:	008b0801 	addeq	r0, fp, r1, lsl #16
    41ec:	0c060000 	stceq	0, cr0, [r6], {-0}
    41f0:	00d30e04 	sbcseq	r0, r3, r4, lsl #28
    41f4:	74070000 	strvc	r0, [r7], #-0
    41f8:	0f040078 	svceq	0x00040078
    41fc:	0000005a 	andeq	r0, r0, sl, asr r0
    4200:	78720700 	ldmdavc	r2!, {r8, r9, sl}^
    4204:	5a0f0400 	bpl	3c520c <__bss_end__+0x3ba92c>
    4208:	01000000 	mrseq	r0, (UNDEF: 0)
    420c:	0003b208 	andeq	fp, r3, r8, lsl #4
    4210:	73100400 	tstvc	r0, #0, 8
    4214:	04000000 	streq	r0, [r0], #-0
    4218:	00036308 	andeq	r6, r3, r8, lsl #6
    421c:	73110400 	tstvc	r1, #0, 8
    4220:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4224:	039b0300 	orrseq	r0, fp, #0, 6
    4228:	12040000 	andne	r0, r4, #0
    422c:	0000009c 	muleq	r0, ip, r0
    4230:	10050109 	andne	r0, r5, r9, lsl #2
    4234:	000000f9 	strdeq	r0, [r0], -r9
    4238:	0003b70a 	andeq	fp, r3, sl, lsl #14
    423c:	a50a0100 	strge	r0, [sl, #-256]	; 0x100
    4240:	02000003 	andeq	r0, r0, #3
    4244:	00038d0a 	andeq	r8, r3, sl, lsl #26
    4248:	03000300 	movweq	r0, #768	; 0x300
    424c:	000003cc 	andeq	r0, r0, ip, asr #7
    4250:	00de1005 	sbcseq	r1, lr, r5
    4254:	14060000 	strne	r0, [r6], #-0
    4258:	01311405 	teqeq	r1, r5, lsl #8
    425c:	3b080000 	blcc	204264 <__bss_end__+0x1f9984>
    4260:	05000004 	streq	r0, [r0, #-4]
    4264:	00003715 	andeq	r3, r0, r5, lsl r7
    4268:	2f080000 	svccs	0x00080000
    426c:	05000004 	streq	r0, [r0, #-4]
    4270:	0000f918 	andeq	pc, r0, r8, lsl r9	; <UNPREDICTABLE>
    4274:	fa080400 	blx	20527c <__bss_end__+0x1fa99c>
    4278:	05000003 	streq	r0, [r0, #-3]
    427c:	0000d31b 	andeq	sp, r0, fp, lsl r3
    4280:	03000800 	movweq	r0, #2048	; 0x800
    4284:	000003ec 	andeq	r0, r0, ip, ror #7
    4288:	01042005 	tsteq	r4, r5
    428c:	5a0b0000 	bpl	2c4294 <__bss_end__+0x2b99b4>
    4290:	0100000b 	tsteq	r0, fp
    4294:	00017e05 	andeq	r7, r1, r5, lsl #28
    4298:	009d5800 	addseq	r5, sp, r0, lsl #16
    429c:	00002800 	andeq	r2, r0, r0, lsl #16
    42a0:	7e9c0100 	fmlvce	f0, f4, f0
    42a4:	0c000001 	stceq	0, cr0, [r0], {1}
    42a8:	06010063 	streq	r0, [r1], -r3, rrx
    42ac:	0000017e 	andeq	r0, r0, lr, ror r1
    42b0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    42b4:	009d6c0d 	addseq	r6, sp, sp, lsl #24
    42b8:	0001ab00 	andeq	sl, r1, r0, lsl #22
    42bc:	52010e00 	andpl	r0, r1, #0, 28
    42c0:	010e3401 	tsteq	lr, r1, lsl #8
    42c4:	0e300151 	mrceq	1, 1, r0, cr0, cr1, {2}
    42c8:	42035001 	andmi	r5, r3, #1
    42cc:	00002447 	andeq	r2, r0, r7, asr #8
    42d0:	0131040f 	teqeq	r1, pc, lsl #8
    42d4:	020b0000 	andeq	r0, fp, #0
    42d8:	01000004 	tsteq	r0, r4
    42dc:	00017e0c 	andeq	r7, r1, ip, lsl #28
    42e0:	009d8000 	addseq	r8, sp, r0
    42e4:	00002800 	andeq	r2, r0, r0, lsl #16
    42e8:	ab9c0100 	blge	fe7046f0 <__bss_end__+0xfe6f9e10>
    42ec:	0c000001 	stceq	0, cr0, [r0], {1}
    42f0:	0d010063 	stceq	0, cr0, [r1, #-396]	; 0xfffffe74
    42f4:	0000017e 	andeq	r0, r0, lr, ror r1
    42f8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    42fc:	054d1000 	strbeq	r1, [sp, #-0]
    4300:	1b060000 	blne	184308 <__bss_end__+0x179a28>
    4304:	00000093 	muleq	r0, r3, r0
    4308:	00009311 	andeq	r9, r0, r1, lsl r3
    430c:	00251100 	eoreq	r1, r5, r0, lsl #2
    4310:	2c110000 	ldccs	0, cr0, [r1], {-0}
    4314:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	110e1b0e 	tstne	lr, lr, lsl #22
       c:	10061201 	andne	r1, r6, r1, lsl #4
      10:	02000017 	andeq	r0, r0, #23
      14:	0b0b0024 	bleq	2c00ac <__bss_end__+0x2b57cc>
      18:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
      1c:	24030000 	strcs	r0, [r3], #-0
      20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
      24:	000e030b 	andeq	r0, lr, fp, lsl #6
      28:	00160400 	andseq	r0, r6, r0, lsl #8
      2c:	0b3a0e03 	bleq	e83840 <__bss_end__+0xe78f60>
      30:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      34:	0f050000 	svceq	0x00050000
      38:	000b0b00 	andeq	r0, fp, r0, lsl #22
      3c:	000f0600 	andeq	r0, pc, r0, lsl #12
      40:	13490b0b 	movtne	r0, #39691	; 0x9b0b
      44:	26070000 	strcs	r0, [r7], -r0
      48:	00134900 	andseq	r4, r3, r0, lsl #18
      4c:	01130800 	tsteq	r3, r0, lsl #16
      50:	050b0e03 	streq	r0, [fp, #-3587]	; 0xe03
      54:	0b3b0b3a 	bleq	ec2d44 <__bss_end__+0xeb8464>
      58:	00001301 	andeq	r1, r0, r1, lsl #6
      5c:	03000d09 	movweq	r0, #3337	; 0xd09
      60:	3b0b3a0e 	blcc	2ce8a0 <__bss_end__+0x2c3fc0>
      64:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
      68:	0a00000b 	beq	9c <_start-0x7f64>
      6c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
      70:	0b3b0b3a 	bleq	ec2d60 <__bss_end__+0xeb8480>
      74:	0b381349 	bleq	e04da0 <__bss_end__+0xdfa4c0>
      78:	010b0000 	mrseq	r0, (UNDEF: 11)
      7c:	01134901 	tsteq	r3, r1, lsl #18
      80:	0c000013 	stceq	0, cr0, [r0], {19}
      84:	13490021 	movtne	r0, #36897	; 0x9021
      88:	00000b2f 	andeq	r0, r0, pc, lsr #22
      8c:	2701150d 	strcs	r1, [r1, -sp, lsl #10]
      90:	00130119 	andseq	r0, r3, r9, lsl r1
      94:	00050e00 	andeq	r0, r5, r0, lsl #28
      98:	00001349 	andeq	r1, r0, r9, asr #6
      9c:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
      a0:	00052f13 	andeq	r2, r5, r3, lsl pc
      a4:	012e1000 	teqeq	lr, r0
      a8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
      ac:	0b3b0b3a 	bleq	ec2d9c <__bss_end__+0xeb84bc>
      b0:	01111927 	tsteq	r1, r7, lsr #18
      b4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
      b8:	01194297 			; <UNDEFINED> instruction: 0x01194297
      bc:	11000013 	tstne	r0, r3, lsl r0
      c0:	08030005 	stmdaeq	r3, {r0, r2}
      c4:	0b3b0b3a 	bleq	ec2db4 <__bss_end__+0xeb84d4>
      c8:	17021349 	strne	r1, [r2, -r9, asr #6]
      cc:	89120000 	ldmdbhi	r2, {}	; <UNPREDICTABLE>
      d0:	11010182 	smlabbne	r1, r2, r1, r0
      d4:	01133101 	tsteq	r3, r1, lsl #2
      d8:	13000013 	movwne	r0, #19
      dc:	0001828a 	andeq	r8, r1, sl, lsl #5
      e0:	42911802 	addsmi	r1, r1, #131072	; 0x20000
      e4:	14000018 	strne	r0, [r0], #-24
      e8:	00018289 	andeq	r8, r1, r9, lsl #5
      ec:	13310111 	teqne	r1, #1073741828	; 0x40000004
      f0:	34150000 	ldrcc	r0, [r5], #-0
      f4:	3a080300 	bcc	200cfc <__bss_end__+0x1f641c>
      f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      fc:	000b1c13 	andeq	r1, fp, r3, lsl ip
     100:	010b1600 	tsteq	fp, r0, lsl #12
     104:	06120111 			; <UNDEFINED> instruction: 0x06120111
     108:	00001301 	andeq	r1, r0, r1, lsl #6
     10c:	03003417 	movweq	r3, #1047	; 0x417
     110:	3b0b3a08 	blcc	2ce938 <__bss_end__+0x2c4058>
     114:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     118:	18000017 	stmdane	r0, {r0, r1, r2, r4}
     11c:	01018289 	smlabbeq	r1, r9, r2, r8
     120:	13310111 	teqne	r1, #1073741828	; 0x40000004
     124:	34190000 	ldrcc	r0, [r9], #-0
     128:	490e0300 	stmdbmi	lr, {r8, r9}
     12c:	02193413 	andseq	r3, r9, #318767104	; 0x13000000
     130:	1a000018 	bne	198 <_start-0x7e68>
     134:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     138:	0b3a0e03 	bleq	e8394c <__bss_end__+0xe7906c>
     13c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     140:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     144:	00001301 	andeq	r1, r0, r1, lsl #6
     148:	0000181b 	andeq	r1, r0, fp, lsl r8
     14c:	002e1c00 	eoreq	r1, lr, r0, lsl #24
     150:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     154:	0b3b0b3a 	bleq	ec2e44 <__bss_end__+0xeb8564>
     158:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     15c:	01000000 	mrseq	r0, (UNDEF: 0)
     160:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     164:	0e030b13 	vmoveq.32	d3[0], r0
     168:	01110e1b 	tsteq	r1, fp, lsl lr
     16c:	17100612 			; <UNDEFINED> instruction: 0x17100612
     170:	16020000 	strne	r0, [r2], -r0
     174:	3a0e0300 	bcc	380d7c <__bss_end__+0x37649c>
     178:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     17c:	03000013 	movweq	r0, #19
     180:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     184:	0b3a0b0b 	bleq	e82db8 <__bss_end__+0xe784d8>
     188:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     18c:	0d040000 	stceq	0, cr0, [r4, #-0]
     190:	490e0300 	stmdbmi	lr, {r8, r9}
     194:	340b3813 	strcc	r3, [fp], #-2067	; 0x813
     198:	05000019 	streq	r0, [r0, #-25]
     19c:	0b0b000f 	bleq	2c01e0 <__bss_end__+0x2b5900>
     1a0:	24060000 	strcs	r0, [r6], #-0
     1a4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     1a8:	0008030b 	andeq	r0, r8, fp, lsl #6
     1ac:	00240700 	eoreq	r0, r4, r0, lsl #14
     1b0:	0b3e0b0b 	bleq	f82de4 <__bss_end__+0xf78504>
     1b4:	00000e03 	andeq	r0, r0, r3, lsl #28
     1b8:	0b000f08 	bleq	3de0 <_start-0x4220>
     1bc:	0013490b 	andseq	r4, r3, fp, lsl #18
     1c0:	00260900 	eoreq	r0, r6, r0, lsl #18
     1c4:	00001349 	andeq	r1, r0, r9, asr #6
     1c8:	3f012e0a 	svccc	0x00012e0a
     1cc:	3a0e0319 	bcc	380e38 <__bss_end__+0x376558>
     1d0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     1d4:	11134919 	tstne	r3, r9, lsl r9
     1d8:	40061201 	andmi	r1, r6, r1, lsl #4
     1dc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     1e0:	00001301 	andeq	r1, r0, r1, lsl #6
     1e4:	0300050b 	movweq	r0, #1291	; 0x50b
     1e8:	3b0b3a08 	blcc	2cea10 <__bss_end__+0x2c4130>
     1ec:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     1f0:	0c000018 	stceq	0, cr0, [r0], {24}
     1f4:	00000018 	andeq	r0, r0, r8, lsl r0
     1f8:	0300340d 	movweq	r3, #1037	; 0x40d
     1fc:	3b0b3a08 	blcc	2cea24 <__bss_end__+0x2c4144>
     200:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     204:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
     208:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     20c:	0b3b0b3a 	bleq	ec2efc <__bss_end__+0xeb861c>
     210:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     214:	340f0000 	strcc	r0, [pc], #-0	; 21c <_start-0x7de4>
     218:	3a080300 	bcc	200e20 <__bss_end__+0x1f6540>
     21c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     220:	00170213 	andseq	r0, r7, r3, lsl r2
     224:	82891000 	addhi	r1, r9, #0
     228:	01110101 	tsteq	r1, r1, lsl #2
     22c:	13011331 	movwne	r1, #4913	; 0x1331
     230:	8a110000 	bhi	440238 <__bss_end__+0x435958>
     234:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     238:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     23c:	89120000 	ldmdbhi	r2, {}	; <UNPREDICTABLE>
     240:	11010182 	smlabbne	r1, r2, r1, r0
     244:	13000001 	movwne	r0, #1
     248:	13490101 	movtne	r0, #37121	; 0x9101
     24c:	00001301 	andeq	r1, r0, r1, lsl #6
     250:	49002114 	stmdbmi	r0, {r2, r4, r8, sp}
     254:	00052f13 	andeq	r2, r5, r3, lsl pc
     258:	01151500 	tsteq	r5, r0, lsl #10
     25c:	13491927 	movtne	r1, #39207	; 0x9927
     260:	00001301 	andeq	r1, r0, r1, lsl #6
     264:	49000516 	stmdbmi	r0, {r1, r2, r4, r8, sl}
     268:	17000013 	smladne	r0, r3, r0, r0
     26c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     270:	0b3b0b3a 	bleq	ec2f60 <__bss_end__+0xeb8680>
     274:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     278:	0000193c 	andeq	r1, r0, ip, lsr r9
     27c:	3f012e18 	svccc	0x00012e18
     280:	3a0e0319 	bcc	380eec <__bss_end__+0x37660c>
     284:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     288:	3c134919 	ldccc	9, cr4, [r3], {25}
     28c:	00000019 	andeq	r0, r0, r9, lsl r0
     290:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     294:	030b130e 	movweq	r1, #45838	; 0xb30e
     298:	110e1b0e 	tstne	lr, lr, lsl #22
     29c:	10061201 	andne	r1, r6, r1, lsl #4
     2a0:	02000017 	andeq	r0, r0, #23
     2a4:	0b0b0024 	bleq	2c033c <__bss_end__+0x2b5a5c>
     2a8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     2ac:	24030000 	strcs	r0, [r3], #-0
     2b0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     2b4:	000e030b 	andeq	r0, lr, fp, lsl #6
     2b8:	012e0400 	teqeq	lr, r0, lsl #8
     2bc:	0b3a0e03 	bleq	e83ad0 <__bss_end__+0xe791f0>
     2c0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     2c4:	01111349 	tsteq	r1, r9, asr #6
     2c8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     2cc:	01194297 			; <UNDEFINED> instruction: 0x01194297
     2d0:	05000013 	streq	r0, [r0, #-19]
     2d4:	08030005 	stmdaeq	r3, {r0, r2}
     2d8:	0b3b0b3a 	bleq	ec2fc8 <__bss_end__+0xeb86e8>
     2dc:	17021349 	strne	r1, [r2, -r9, asr #6]
     2e0:	89060000 	stmdbhi	r6, {}	; <UNPREDICTABLE>
     2e4:	11010182 	smlabbne	r1, r2, r1, r0
     2e8:	00133101 	andseq	r3, r3, r1, lsl #2
     2ec:	828a0700 	addhi	r0, sl, #0, 14
     2f0:	18020001 	stmdane	r2, {r0}
     2f4:	00184291 	mulseq	r8, r1, r2
     2f8:	002e0800 	eoreq	r0, lr, r0, lsl #16
     2fc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     300:	0b3b0b3a 	bleq	ec2ff0 <__bss_end__+0xeb8710>
     304:	01111927 	tsteq	r1, r7, lsr #18
     308:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     30c:	00194297 	mulseq	r9, r7, r2
     310:	012e0900 	teqeq	lr, r0, lsl #18
     314:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     318:	0b3b0b3a 	bleq	ec3008 <__bss_end__+0xeb8728>
     31c:	01111927 	tsteq	r1, r7, lsr #18
     320:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     324:	01194297 			; <UNDEFINED> instruction: 0x01194297
     328:	0a000013 	beq	37c <_start-0x7c84>
     32c:	08030005 	stmdaeq	r3, {r0, r2}
     330:	0b3b0b3a 	bleq	ec3020 <__bss_end__+0xeb8740>
     334:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     338:	150b0000 	strne	r0, [fp, #-0]
     33c:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
     340:	00130113 	andseq	r0, r3, r3, lsl r1
     344:	00050c00 	andeq	r0, r5, r0, lsl #24
     348:	00001349 	andeq	r1, r0, r9, asr #6
     34c:	0b000f0d 	bleq	3f88 <_start-0x4078>
     350:	0013490b 	andseq	r4, r3, fp, lsl #18
     354:	00340e00 	eorseq	r0, r4, r0, lsl #28
     358:	0b3a0e03 	bleq	e83b6c <__bss_end__+0xe7928c>
     35c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     360:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     364:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
     368:	03193f01 	tsteq	r9, #1, 30
     36c:	3b0b3a0e 	blcc	2cebac <__bss_end__+0x2c42cc>
     370:	3c19270b 	ldccc	7, cr2, [r9], {11}
     374:	00000019 	andeq	r0, r0, r9, lsl r0
     378:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     37c:	030b130e 	movweq	r1, #45838	; 0xb30e
     380:	110e1b0e 	tstne	lr, lr, lsl #22
     384:	10061201 	andne	r1, r6, r1, lsl #4
     388:	02000017 	andeq	r0, r0, #23
     38c:	0b0b0024 	bleq	2c0424 <__bss_end__+0x2b5b44>
     390:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     394:	24030000 	strcs	r0, [r3], #-0
     398:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     39c:	000e030b 	andeq	r0, lr, fp, lsl #6
     3a0:	000f0400 	andeq	r0, pc, r0, lsl #8
     3a4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     3a8:	26050000 	strcs	r0, [r5], -r0
     3ac:	00134900 	andseq	r4, r3, r0, lsl #18
     3b0:	012e0600 	teqeq	lr, r0, lsl #12
     3b4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     3b8:	0b3b0b3a 	bleq	ec30a8 <__bss_end__+0xeb87c8>
     3bc:	13491927 	movtne	r1, #39207	; 0x9927
     3c0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     3c4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     3c8:	00130119 	andseq	r0, r3, r9, lsl r1
     3cc:	00050700 	andeq	r0, r5, r0, lsl #14
     3d0:	0b3a0803 	bleq	e823e4 <__bss_end__+0xe77b04>
     3d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     3d8:	00001702 	andeq	r1, r0, r2, lsl #14
     3dc:	27011508 	strcs	r1, [r1, -r8, lsl #10]
     3e0:	01134919 	tsteq	r3, r9, lsl r9
     3e4:	09000013 	stmdbeq	r0, {r0, r1, r4}
     3e8:	13490005 	movtne	r0, #36869	; 0x9005
     3ec:	340a0000 	strcc	r0, [sl], #-0
     3f0:	3a0e0300 	bcc	380ff8 <__bss_end__+0x376718>
     3f4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3f8:	3c193f13 	ldccc	15, cr3, [r9], {19}
     3fc:	0b000019 	bleq	468 <_start-0x7b98>
     400:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     404:	0b3b0b3a 	bleq	ec30f4 <__bss_end__+0xeb8814>
     408:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     40c:	00001802 	andeq	r1, r0, r2, lsl #16
     410:	01110100 	tsteq	r1, r0, lsl #2
     414:	0b130e25 	bleq	4c3cb0 <__bss_end__+0x4b93d0>
     418:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     41c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     420:	00001710 	andeq	r1, r0, r0, lsl r7
     424:	0b002402 	bleq	9434 <sw_uart_init_helper+0x80>
     428:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     42c:	03000008 	movweq	r0, #8
     430:	0b0b0024 	bleq	2c04c8 <__bss_end__+0x2b5be8>
     434:	0e030b3e 	vmoveq.16	d3[0], r0
     438:	0f040000 	svceq	0x00040000
     43c:	000b0b00 	andeq	r0, fp, r0, lsl #22
     440:	000f0500 	andeq	r0, pc, r0, lsl #10
     444:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     448:	26060000 	strcs	r0, [r6], -r0
     44c:	00134900 	andseq	r4, r3, r0, lsl #18
     450:	00160700 	andseq	r0, r6, r0, lsl #14
     454:	0b3a0e03 	bleq	e83c68 <__bss_end__+0xe79388>
     458:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     45c:	13080000 	movwne	r0, #32768	; 0x8000
     460:	0b0e0301 	bleq	38106c <__bss_end__+0x37678c>
     464:	3b0b3a0b 	blcc	2cec98 <__bss_end__+0x2c43b8>
     468:	0013010b 	andseq	r0, r3, fp, lsl #2
     46c:	000d0900 	andeq	r0, sp, r0, lsl #18
     470:	13490e03 	movtne	r0, #40451	; 0x9e03
     474:	19340b38 	ldmdbne	r4!, {r3, r4, r5, r8, r9, fp}
     478:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
     47c:	3a0e0301 	bcc	381088 <__bss_end__+0x3767a8>
     480:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     484:	11134919 	tstne	r3, r9, lsl r9
     488:	40061201 	andmi	r1, r6, r1, lsl #4
     48c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     490:	00001301 	andeq	r1, r0, r1, lsl #6
     494:	0300050b 	movweq	r0, #1291	; 0x50b
     498:	3b0b3a08 	blcc	2cecc0 <__bss_end__+0x2c43e0>
     49c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     4a0:	0c000017 	stceq	0, cr0, [r0], {23}
     4a4:	0803012e 	stmdaeq	r3, {r1, r2, r3, r5, r8}
     4a8:	0b3b0b3a 	bleq	ec3198 <__bss_end__+0xeb88b8>
     4ac:	13491927 	movtne	r1, #39207	; 0x9927
     4b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     4b4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     4b8:	00130119 	andseq	r0, r3, r9, lsl r1
     4bc:	00050d00 	andeq	r0, r5, r0, lsl #26
     4c0:	0b3a0e03 	bleq	e83cd4 <__bss_end__+0xe793f4>
     4c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     4c8:	00001702 	andeq	r1, r0, r2, lsl #14
     4cc:	0300050e 	movweq	r0, #1294	; 0x50e
     4d0:	3b0b3a0e 	blcc	2ced10 <__bss_end__+0x2c4430>
     4d4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     4d8:	0f000018 	svceq	0x00000018
     4dc:	08030034 	stmdaeq	r3, {r2, r4, r5}
     4e0:	0b3b0b3a 	bleq	ec31d0 <__bss_end__+0xeb88f0>
     4e4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     4e8:	34100000 	ldrcc	r0, [r0], #-0
     4ec:	3a080300 	bcc	2010f4 <__bss_end__+0x1f6814>
     4f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4f4:	00170213 	andseq	r0, r7, r3, lsl r2
     4f8:	00341100 	eorseq	r1, r4, r0, lsl #2
     4fc:	13490e03 	movtne	r0, #40451	; 0x9e03
     500:	18021934 	stmdane	r2, {r2, r4, r5, r8, fp, ip}
     504:	0b120000 	bleq	48050c <__bss_end__+0x475c2c>
     508:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     50c:	00130106 	andseq	r0, r3, r6, lsl #2
     510:	00341300 	eorseq	r1, r4, r0, lsl #6
     514:	0b3a0e03 	bleq	e83d28 <__bss_end__+0xe79448>
     518:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     51c:	00001702 	andeq	r1, r0, r2, lsl #14
     520:	01828914 	orreq	r8, r2, r4, lsl r9
     524:	31011100 	mrscc	r1, (UNDEF: 17)
     528:	15000013 	strne	r0, [r0, #-19]
     52c:	01018289 	smlabbeq	r1, r9, r2, r8
     530:	13310111 	teqne	r1, #1073741828	; 0x40000004
     534:	00001301 	andeq	r1, r0, r1, lsl #6
     538:	01828a16 	orreq	r8, r2, r6, lsl sl
     53c:	91180200 	tstls	r8, r0, lsl #4
     540:	00001842 	andeq	r1, r0, r2, asr #16
     544:	01828917 	orreq	r8, r2, r7, lsl r9
     548:	31011101 	tstcc	r1, r1, lsl #2
     54c:	18000013 	stmdane	r0, {r0, r1, r4}
     550:	13490101 	movtne	r0, #37121	; 0x9101
     554:	00001301 	andeq	r1, r0, r1, lsl #6
     558:	49002119 	stmdbmi	r0, {r0, r3, r4, r8, sp}
     55c:	000b2f13 	andeq	r2, fp, r3, lsl pc
     560:	012e1a00 	teqeq	lr, r0, lsl #20
     564:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     568:	0b3b0b3a 	bleq	ec3258 <__bss_end__+0xeb8978>
     56c:	01111927 	tsteq	r1, r7, lsr #18
     570:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     574:	01194297 			; <UNDEFINED> instruction: 0x01194297
     578:	1b000013 	blne	5cc <_start-0x7a34>
     57c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     580:	13011349 	movwne	r1, #4937	; 0x1349
     584:	051c0000 	ldreq	r0, [ip, #-0]
     588:	00134900 	andseq	r4, r3, r0, lsl #18
     58c:	012e1d00 	teqeq	lr, r0, lsl #26
     590:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     594:	0b3b0b3a 	bleq	ec3284 <__bss_end__+0xeb89a4>
     598:	13491927 	movtne	r1, #39207	; 0x9927
     59c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     5a0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     5a4:	00130119 	andseq	r0, r3, r9, lsl r1
     5a8:	010b1e00 	tsteq	fp, r0, lsl #28
     5ac:	00001755 	andeq	r1, r0, r5, asr r7
     5b0:	0300341f 	movweq	r3, #1055	; 0x41f
     5b4:	3b0b3a0e 	blcc	2cedf4 <__bss_end__+0x2c4514>
     5b8:	3f13490b 	svccc	0x0013490b
     5bc:	00193c19 	andseq	r3, r9, r9, lsl ip
     5c0:	002e2000 	eoreq	r2, lr, r0
     5c4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     5c8:	0b3b0b3a 	bleq	ec32b8 <__bss_end__+0xeb89d8>
     5cc:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     5d0:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
     5d4:	03193f01 	tsteq	r9, #1, 30
     5d8:	3b0b3a0e 	blcc	2cee18 <__bss_end__+0x2c4538>
     5dc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     5e0:	01193c13 	tsteq	r9, r3, lsl ip
     5e4:	22000013 	andcs	r0, r0, #19
     5e8:	00000018 	andeq	r0, r0, r8, lsl r0
     5ec:	01110100 	tsteq	r1, r0, lsl #2
     5f0:	0b130e25 	bleq	4c3e8c <__bss_end__+0x4b95ac>
     5f4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     5f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     5fc:	00001710 	andeq	r1, r0, r0, lsl r7
     600:	0b002402 	bleq	9610 <uart_init+0x64>
     604:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     608:	03000008 	movweq	r0, #8
     60c:	0b0b0024 	bleq	2c06a4 <__bss_end__+0x2b5dc4>
     610:	0e030b3e 	vmoveq.16	d3[0], r0
     614:	0f040000 	svceq	0x00040000
     618:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     61c:	05000013 	streq	r0, [r0, #-19]
     620:	13490026 	movtne	r0, #36902	; 0x9026
     624:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
     628:	03193f01 	tsteq	r9, #1, 30
     62c:	3b0b3a0e 	blcc	2cee6c <__bss_end__+0x2c458c>
     630:	1119270b 	tstne	r9, fp, lsl #14
     634:	40061201 	andmi	r1, r6, r1, lsl #4
     638:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     63c:	00001301 	andeq	r1, r0, r1, lsl #6
     640:	01828907 	orreq	r8, r2, r7, lsl #18
     644:	01011101 	tsteq	r1, r1, lsl #2
     648:	08000013 	stmdaeq	r0, {r0, r1, r4}
     64c:	0001828a 	andeq	r8, r1, sl, lsl #5
     650:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     654:	09000018 	stmdbeq	r0, {r3, r4}
     658:	01018289 	smlabbeq	r1, r9, r2, r8
     65c:	13310111 	teqne	r1, #1073741828	; 0x40000004
     660:	00001301 	andeq	r1, r0, r1, lsl #6
     664:	0182890a 	orreq	r8, r2, sl, lsl #18
     668:	31011100 	mrscc	r1, (UNDEF: 17)
     66c:	0b000013 	bleq	6c0 <_start-0x7940>
     670:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     674:	13011349 	movwne	r1, #4937	; 0x1349
     678:	050c0000 	streq	r0, [ip, #-0]
     67c:	00134900 	andseq	r4, r3, r0, lsl #18
     680:	00340d00 	eorseq	r0, r4, r0, lsl #26
     684:	0b3a0e03 	bleq	e83e98 <__bss_end__+0xe795b8>
     688:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     68c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     690:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
     694:	03193f01 	tsteq	r9, #1, 30
     698:	3b0b3a0e 	blcc	2ceed8 <__bss_end__+0x2c45f8>
     69c:	3c19270b 	ldccc	7, cr2, [r9], {11}
     6a0:	00130119 	andseq	r0, r3, r9, lsl r1
     6a4:	002e0f00 	eoreq	r0, lr, r0, lsl #30
     6a8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     6ac:	0b3b0b3a 	bleq	ec339c <__bss_end__+0xeb8abc>
     6b0:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     6b4:	01000000 	mrseq	r0, (UNDEF: 0)
     6b8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     6bc:	0e030b13 	vmoveq.32	d3[0], r0
     6c0:	01110e1b 	tsteq	r1, fp, lsl lr
     6c4:	17100612 			; <UNDEFINED> instruction: 0x17100612
     6c8:	24020000 	strcs	r0, [r2], #-0
     6cc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     6d0:	0008030b 	andeq	r0, r8, fp, lsl #6
     6d4:	00240300 	eoreq	r0, r4, r0, lsl #6
     6d8:	0b3e0b0b 	bleq	f8330c <__bss_end__+0xf78a2c>
     6dc:	00000e03 	andeq	r0, r0, r3, lsl #28
     6e0:	03001604 	movweq	r1, #1540	; 0x604
     6e4:	3b0b3a0e 	blcc	2cef24 <__bss_end__+0x2c4644>
     6e8:	0013490b 	andseq	r4, r3, fp, lsl #18
     6ec:	000f0500 	andeq	r0, pc, r0, lsl #10
     6f0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     6f4:	26060000 	strcs	r0, [r6], -r0
     6f8:	00134900 	andseq	r4, r3, r0, lsl #18
     6fc:	01130700 	tsteq	r3, r0, lsl #14
     700:	0b3a0b0b 	bleq	e83334 <__bss_end__+0xe78a54>
     704:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     708:	0d080000 	stceq	0, cr0, [r8, #-0]
     70c:	3a080300 	bcc	201314 <__bss_end__+0x1f6a34>
     710:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     714:	000b3813 	andeq	r3, fp, r3, lsl r8
     718:	000d0900 	andeq	r0, sp, r0, lsl #18
     71c:	0b3a0e03 	bleq	e83f30 <__bss_end__+0xe79650>
     720:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     724:	00000b38 	andeq	r0, r0, r8, lsr fp
     728:	0b01040a 	bleq	41758 <__bss_end__+0x36e78>
     72c:	3b0b3a0b 	blcc	2cef60 <__bss_end__+0x2c4680>
     730:	0013010b 	andseq	r0, r3, fp, lsl #2
     734:	00280b00 	eoreq	r0, r8, r0, lsl #22
     738:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     73c:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
     740:	3a0e0301 	bcc	38134c <__bss_end__+0x376a6c>
     744:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     748:	11134919 	tstne	r3, r9, lsl r9
     74c:	40061201 	andmi	r1, r6, r1, lsl #4
     750:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     754:	00001301 	andeq	r1, r0, r1, lsl #6
     758:	0300050d 	movweq	r0, #1293	; 0x50d
     75c:	3b0b3a08 	blcc	2cef84 <__bss_end__+0x2c46a4>
     760:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     764:	0e000017 	mcreq	0, 0, r0, cr0, cr7, {0}
     768:	01018289 	smlabbeq	r1, r9, r2, r8
     76c:	13310111 	teqne	r1, #1073741828	; 0x40000004
     770:	8a0f0000 	bhi	3c0778 <__bss_end__+0x3b5e98>
     774:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     778:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     77c:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
     780:	03193f01 	tsteq	r9, #1, 30
     784:	3b0b3a0e 	blcc	2cefc4 <__bss_end__+0x2c46e4>
     788:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
     78c:	97184006 	ldrls	r4, [r8, -r6]
     790:	13011942 	movwne	r1, #6466	; 0x1942
     794:	34110000 	ldrcc	r0, [r1], #-0
     798:	3a0e0300 	bcc	3813a0 <__bss_end__+0x376ac0>
     79c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     7a0:	3c193f13 	ldccc	15, cr3, [r9], {19}
     7a4:	12000019 	andne	r0, r0, #25
     7a8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     7ac:	0b3a0e03 	bleq	e83fc0 <__bss_end__+0xe796e0>
     7b0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     7b4:	0000193c 	andeq	r1, r0, ip, lsr r9
     7b8:	03003413 	movweq	r3, #1043	; 0x413
     7bc:	3b0b3a08 	blcc	2cefe4 <__bss_end__+0x2c4704>
     7c0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     7c4:	14000017 	strne	r0, [r0], #-23
     7c8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     7cc:	0b3b0b3a 	bleq	ec34bc <__bss_end__+0xeb8bdc>
     7d0:	00001349 	andeq	r1, r0, r9, asr #6
     7d4:	01828915 	orreq	r8, r2, r5, lsl r9
     7d8:	31011100 	mrscc	r1, (UNDEF: 17)
     7dc:	16000013 			; <UNDEFINED> instruction: 0x16000013
     7e0:	01018289 	smlabbeq	r1, r9, r2, r8
     7e4:	13310111 	teqne	r1, #1073741828	; 0x40000004
     7e8:	00001301 	andeq	r1, r0, r1, lsl #6
     7ec:	03003417 	movweq	r3, #1047	; 0x417
     7f0:	3b0b3a0e 	blcc	2cf030 <__bss_end__+0x2c4750>
     7f4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     7f8:	18000018 	stmdane	r0, {r3, r4}
     7fc:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     800:	13011349 	movwne	r1, #4937	; 0x1349
     804:	05190000 	ldreq	r0, [r9, #-0]
     808:	00134900 	andseq	r4, r3, r0, lsl #18
     80c:	012e1a00 	teqeq	lr, r0, lsl #20
     810:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     814:	0b3b0b3a 	bleq	ec3504 <__bss_end__+0xeb8c24>
     818:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     81c:	00001301 	andeq	r1, r0, r1, lsl #6
     820:	3f002e1b 	svccc	0x00002e1b
     824:	3a0e0319 	bcc	381490 <__bss_end__+0x376bb0>
     828:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     82c:	3c134919 	ldccc	9, cr4, [r3], {25}
     830:	1c000019 	stcne	0, cr0, [r0], {25}
     834:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     838:	0b3a0e03 	bleq	e8404c <__bss_end__+0xe7976c>
     83c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     840:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     844:	00001301 	andeq	r1, r0, r1, lsl #6
     848:	0000181d 	andeq	r1, r0, sp, lsl r8
     84c:	11010000 	mrsne	r0, (UNDEF: 1)
     850:	130e2501 	movwne	r2, #58625	; 0xe501
     854:	1b0e030b 	blne	381488 <__bss_end__+0x376ba8>
     858:	1117550e 	tstne	r7, lr, lsl #10
     85c:	00171001 	andseq	r1, r7, r1
     860:	00240200 	eoreq	r0, r4, r0, lsl #4
     864:	0b3e0b0b 	bleq	f83498 <__bss_end__+0xf78bb8>
     868:	00000803 	andeq	r0, r0, r3, lsl #16
     86c:	0b002403 	bleq	9880 <gpio_set_output+0xb0>
     870:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     874:	0400000e 	streq	r0, [r0], #-14
     878:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     87c:	0b3a0e03 	bleq	e84090 <__bss_end__+0xe797b0>
     880:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     884:	01111349 	tsteq	r1, r9, asr #6
     888:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     88c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     890:	05000013 	streq	r0, [r0, #-19]
     894:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     898:	0b3b0b3a 	bleq	ec3588 <__bss_end__+0xeb8ca8>
     89c:	17021349 	strne	r1, [r2, -r9, asr #6]
     8a0:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
     8a4:	03193f01 	tsteq	r9, #1, 30
     8a8:	3b0b3a0e 	blcc	2cf0e8 <__bss_end__+0x2c4808>
     8ac:	1119270b 	tstne	r9, fp, lsl #14
     8b0:	40061201 	andmi	r1, r6, r1, lsl #4
     8b4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     8b8:	00001301 	andeq	r1, r0, r1, lsl #6
     8bc:	03003407 	movweq	r3, #1031	; 0x407
     8c0:	3b0b3a0e 	blcc	2cf100 <__bss_end__+0x2c4820>
     8c4:	1c13490b 	ldcne	9, cr4, [r3], {11}
     8c8:	08000006 	stmdaeq	r0, {r1, r2}
     8cc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     8d0:	0b3b0b3a 	bleq	ec35c0 <__bss_end__+0xeb8ce0>
     8d4:	0b1c1349 	bleq	705600 <__bss_end__+0x6fad20>
     8d8:	89090000 	stmdbhi	r9, {}	; <UNPREDICTABLE>
     8dc:	11000182 	smlabbne	r0, r2, r1, r0
     8e0:	00133101 	andseq	r3, r3, r1, lsl #2
     8e4:	82890a00 	addhi	r0, r9, #0, 20
     8e8:	01110101 	tsteq	r1, r1, lsl #2
     8ec:	13011331 	movwne	r1, #4913	; 0x1331
     8f0:	8a0b0000 	bhi	2c08f8 <__bss_end__+0x2b6018>
     8f4:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     8f8:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     8fc:	890c0000 	stmdbhi	ip, {}	; <UNPREDICTABLE>
     900:	11010182 	smlabbne	r1, r2, r1, r0
     904:	00133101 	andseq	r3, r3, r1, lsl #2
     908:	00260d00 	eoreq	r0, r6, r0, lsl #26
     90c:	00001349 	andeq	r1, r0, r9, asr #6
     910:	3f012e0e 	svccc	0x00012e0e
     914:	3a0e0319 	bcc	381580 <__bss_end__+0x376ca0>
     918:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     91c:	01193c19 	tsteq	r9, r9, lsl ip
     920:	0f000013 	svceq	0x00000013
     924:	13490005 	movtne	r0, #36869	; 0x9005
     928:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
     92c:	03193f01 	tsteq	r9, #1, 30
     930:	3b0b3a0e 	blcc	2cf170 <__bss_end__+0x2c4890>
     934:	3c19270b 	ldccc	7, cr2, [r9], {11}
     938:	00000019 	andeq	r0, r0, r9, lsl r0
     93c:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     940:	030b130e 	movweq	r1, #45838	; 0xb30e
     944:	110e1b0e 	tstne	lr, lr, lsl #22
     948:	10061201 	andne	r1, r6, r1, lsl #4
     94c:	02000017 	andeq	r0, r0, #23
     950:	0b0b0024 	bleq	2c09e8 <__bss_end__+0x2b6108>
     954:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     958:	24030000 	strcs	r0, [r3], #-0
     95c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     960:	000e030b 	andeq	r0, lr, fp, lsl #6
     964:	012e0400 	teqeq	lr, r0, lsl #8
     968:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     96c:	0b3b0b3a 	bleq	ec365c <__bss_end__+0xeb8d7c>
     970:	01111927 	tsteq	r1, r7, lsr #18
     974:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     978:	01194297 			; <UNDEFINED> instruction: 0x01194297
     97c:	05000013 	streq	r0, [r0, #-19]
     980:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     984:	0b3b0b3a 	bleq	ec3674 <__bss_end__+0xeb8d94>
     988:	17021349 	strne	r1, [r2, -r9, asr #6]
     98c:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
     990:	03193f01 	tsteq	r9, #1, 30
     994:	3b0b3a0e 	blcc	2cf1d4 <__bss_end__+0x2c48f4>
     998:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     99c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     9a0:	97184006 	ldrls	r4, [r8, -r6]
     9a4:	13011942 	movwne	r1, #6466	; 0x1942
     9a8:	89070000 	stmdbhi	r7, {}	; <UNPREDICTABLE>
     9ac:	11010182 	smlabbne	r1, r2, r1, r0
     9b0:	00133101 	andseq	r3, r3, r1, lsl #2
     9b4:	828a0800 	addhi	r0, sl, #0, 16
     9b8:	18020001 	stmdane	r2, {r0}
     9bc:	00184291 	mulseq	r8, r1, r2
     9c0:	00340900 	eorseq	r0, r4, r0, lsl #18
     9c4:	0b3a0803 	bleq	e829d8 <__bss_end__+0xe780f8>
     9c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     9cc:	00001802 	andeq	r1, r0, r2, lsl #16
     9d0:	0182890a 	orreq	r8, r2, sl, lsl #18
     9d4:	31011100 	mrscc	r1, (UNDEF: 17)
     9d8:	0b000013 	bleq	a2c <_start-0x75d4>
     9dc:	08030005 	stmdaeq	r3, {r0, r2}
     9e0:	0b3b0b3a 	bleq	ec36d0 <__bss_end__+0xeb8df0>
     9e4:	17021349 	strne	r1, [r2, -r9, asr #6]
     9e8:	0b0c0000 	bleq	3009f0 <__bss_end__+0x2f6110>
     9ec:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     9f0:	00130106 	andseq	r0, r3, r6, lsl #2
     9f4:	00340d00 	eorseq	r0, r4, r0, lsl #26
     9f8:	0b3a0803 	bleq	e82a0c <__bss_end__+0xe7812c>
     9fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     a00:	00001702 	andeq	r1, r0, r2, lsl #14
     a04:	3f012e0e 	svccc	0x00012e0e
     a08:	3a0e0319 	bcc	381674 <__bss_end__+0x376d94>
     a0c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     a10:	3c134919 	ldccc	9, cr4, [r3], {25}
     a14:	0f000019 	svceq	0x00000019
     a18:	13490005 	movtne	r0, #36869	; 0x9005
     a1c:	01000000 	mrseq	r0, (UNDEF: 0)
     a20:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     a24:	0e030b13 	vmoveq.32	d3[0], r0
     a28:	01110e1b 	tsteq	r1, fp, lsl lr
     a2c:	17100612 			; <UNDEFINED> instruction: 0x17100612
     a30:	24020000 	strcs	r0, [r2], #-0
     a34:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     a38:	0008030b 	andeq	r0, r8, fp, lsl #6
     a3c:	00160300 	andseq	r0, r6, r0, lsl #6
     a40:	0b3a0e03 	bleq	e84254 <__bss_end__+0xe79974>
     a44:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     a48:	24040000 	strcs	r0, [r4], #-0
     a4c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     a50:	000e030b 	andeq	r0, lr, fp, lsl #6
     a54:	000f0500 	andeq	r0, pc, r0, lsl #10
     a58:	00000b0b 	andeq	r0, r0, fp, lsl #22
     a5c:	0b000f06 	bleq	467c <_start-0x3984>
     a60:	0013490b 	andseq	r4, r3, fp, lsl #18
     a64:	00260700 	eoreq	r0, r6, r0, lsl #14
     a68:	00001349 	andeq	r1, r0, r9, asr #6
     a6c:	49010108 	stmdbmi	r1, {r3, r8}
     a70:	00130113 	andseq	r0, r3, r3, lsl r1
     a74:	00210900 	eoreq	r0, r1, r0, lsl #18
     a78:	0b2f1349 	bleq	bc57a4 <__bss_end__+0xbbaec4>
     a7c:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
     a80:	03193f01 	tsteq	r9, #1, 30
     a84:	3b0b3a0e 	blcc	2cf2c4 <__bss_end__+0x2c49e4>
     a88:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     a8c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     a90:	97184006 	ldrls	r4, [r8, -r6]
     a94:	13011942 	movwne	r1, #6466	; 0x1942
     a98:	050b0000 	streq	r0, [fp, #-0]
     a9c:	3a0e0300 	bcc	3816a4 <__bss_end__+0x376dc4>
     aa0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     aa4:	00170213 	andseq	r0, r7, r3, lsl r2
     aa8:	00340c00 	eorseq	r0, r4, r0, lsl #24
     aac:	13490e03 	movtne	r0, #40451	; 0x9e03
     ab0:	18021934 	stmdane	r2, {r2, r4, r5, r8, fp, ip}
     ab4:	340d0000 	strcc	r0, [sp], #-0
     ab8:	3a0e0300 	bcc	3816c0 <__bss_end__+0x376de0>
     abc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ac0:	00180213 	andseq	r0, r8, r3, lsl r2
     ac4:	00340e00 	eorseq	r0, r4, r0, lsl #28
     ac8:	0b3a0e03 	bleq	e842dc <__bss_end__+0xe799fc>
     acc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ad0:	00001702 	andeq	r1, r0, r2, lsl #14
     ad4:	0182890f 	orreq	r8, r2, pc, lsl #18
     ad8:	31011100 	mrscc	r1, (UNDEF: 17)
     adc:	10000013 	andne	r0, r0, r3, lsl r0
     ae0:	01018289 	smlabbeq	r1, r9, r2, r8
     ae4:	13310111 	teqne	r1, #1073741828	; 0x40000004
     ae8:	00001301 	andeq	r1, r0, r1, lsl #6
     aec:	01828a11 	orreq	r8, r2, r1, lsl sl
     af0:	91180200 	tstls	r8, r0, lsl #4
     af4:	00001842 	andeq	r1, r0, r2, asr #16
     af8:	01828912 	orreq	r8, r2, r2, lsl r9
     afc:	31011101 	tstcc	r1, r1, lsl #2
     b00:	13000013 	movwne	r0, #19
     b04:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     b08:	0b3a0e03 	bleq	e8431c <__bss_end__+0xe79a3c>
     b0c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     b10:	06120111 			; <UNDEFINED> instruction: 0x06120111
     b14:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     b18:	00130119 	andseq	r0, r3, r9, lsl r1
     b1c:	002e1400 	eoreq	r1, lr, r0, lsl #8
     b20:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     b24:	0b3b0b3a 	bleq	ec3814 <__bss_end__+0xeb8f34>
     b28:	01111927 	tsteq	r1, r7, lsr #18
     b2c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b30:	00194297 	mulseq	r9, r7, r2
     b34:	002e1500 	eoreq	r1, lr, r0, lsl #10
     b38:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     b3c:	0b3b0b3a 	bleq	ec382c <__bss_end__+0xeb8f4c>
     b40:	13491927 	movtne	r1, #39207	; 0x9927
     b44:	06120111 			; <UNDEFINED> instruction: 0x06120111
     b48:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     b4c:	16000019 			; <UNDEFINED> instruction: 0x16000019
     b50:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     b54:	0b3b0b3a 	bleq	ec3844 <__bss_end__+0xeb8f64>
     b58:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     b5c:	0000193c 	andeq	r1, r0, ip, lsr r9
     b60:	3f002e17 	svccc	0x00002e17
     b64:	3a0e0319 	bcc	3817d0 <__bss_end__+0x376ef0>
     b68:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     b6c:	00193c19 	andseq	r3, r9, r9, lsl ip
     b70:	012e1800 	teqeq	lr, r0, lsl #16
     b74:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     b78:	0b3b0b3a 	bleq	ec3868 <__bss_end__+0xeb8f88>
     b7c:	13491927 	movtne	r1, #39207	; 0x9927
     b80:	1301193c 	movwne	r1, #6460	; 0x193c
     b84:	05190000 	ldreq	r0, [r9, #-0]
     b88:	00134900 	andseq	r4, r3, r0, lsl #18
     b8c:	00181a00 	andseq	r1, r8, r0, lsl #20
     b90:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
     b94:	03193f01 	tsteq	r9, #1, 30
     b98:	3b0b3a0e 	blcc	2cf3d8 <__bss_end__+0x2c4af8>
     b9c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     ba0:	00193c13 	andseq	r3, r9, r3, lsl ip
     ba4:	11010000 	mrsne	r0, (UNDEF: 1)
     ba8:	130e2501 	movwne	r2, #58625	; 0xe501
     bac:	1b0e030b 	blne	3817e0 <__bss_end__+0x376f00>
     bb0:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     bb4:	00171006 	andseq	r1, r7, r6
     bb8:	00240200 	eoreq	r0, r4, r0, lsl #4
     bbc:	0b3e0b0b 	bleq	f837f0 <__bss_end__+0xf78f10>
     bc0:	00000803 	andeq	r0, r0, r3, lsl #16
     bc4:	0b002403 	bleq	9bd8 <gpio_int_falling_edge>
     bc8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     bcc:	0400000e 	streq	r0, [r0], #-14
     bd0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     bd4:	0b3b0b3a 	bleq	ec38c4 <__bss_end__+0xeb8fe4>
     bd8:	00001349 	andeq	r1, r0, r9, asr #6
     bdc:	0b000f05 	bleq	47f8 <_start-0x3808>
     be0:	0600000b 	streq	r0, [r0], -fp
     be4:	0b0b000f 	bleq	2c0c28 <__bss_end__+0x2b6348>
     be8:	00001349 	andeq	r1, r0, r9, asr #6
     bec:	49002607 	stmdbmi	r0, {r0, r1, r2, r9, sl, sp}
     bf0:	08000013 	stmdaeq	r0, {r0, r1, r4}
     bf4:	13490101 	movtne	r0, #37121	; 0x9101
     bf8:	00001301 	andeq	r1, r0, r1, lsl #6
     bfc:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
     c00:	000b2f13 	andeq	r2, fp, r3, lsl pc
     c04:	01130a00 	tsteq	r3, r0, lsl #20
     c08:	050b0e03 	streq	r0, [fp, #-3587]	; 0xe03
     c0c:	0b3b0b3a 	bleq	ec38fc <__bss_end__+0xeb901c>
     c10:	00001301 	andeq	r1, r0, r1, lsl #6
     c14:	03000d0b 	movweq	r0, #3339	; 0xd0b
     c18:	3b0b3a0e 	blcc	2cf458 <__bss_end__+0x2c4b78>
     c1c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     c20:	0c00000b 	stceq	0, cr0, [r0], {11}
     c24:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     c28:	0b3b0b3a 	bleq	ec3918 <__bss_end__+0xeb9038>
     c2c:	0b381349 	bleq	e05958 <__bss_end__+0xdfb078>
     c30:	150d0000 	strne	r0, [sp, #-0]
     c34:	01192701 	tsteq	r9, r1, lsl #14
     c38:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     c3c:	13490005 	movtne	r0, #36869	; 0x9005
     c40:	210f0000 	mrscs	r0, CPSR
     c44:	2f134900 	svccs	0x00134900
     c48:	10000005 	andne	r0, r0, r5
     c4c:	08030113 	stmdaeq	r3, {r0, r1, r4, r8}
     c50:	0b3a0b0b 	bleq	e83884 <__bss_end__+0xe78fa4>
     c54:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     c58:	16110000 	ldrne	r0, [r1], -r0
     c5c:	3a080300 	bcc	201864 <__bss_end__+0x1f6f84>
     c60:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c64:	12000013 	andne	r0, r0, #19
     c68:	0e03012e 	adfeqsp	f0, f3, #0.5
     c6c:	0b3b0b3a 	bleq	ec395c <__bss_end__+0xeb907c>
     c70:	13491927 	movtne	r1, #39207	; 0x9927
     c74:	06120111 			; <UNDEFINED> instruction: 0x06120111
     c78:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     c7c:	00130119 	andseq	r0, r3, r9, lsl r1
     c80:	00051300 	andeq	r1, r5, r0, lsl #6
     c84:	0b3a0803 	bleq	e82c98 <__bss_end__+0xe783b8>
     c88:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     c8c:	00001702 	andeq	r1, r0, r2, lsl #14
     c90:	03012e14 	movweq	r2, #7700	; 0x1e14
     c94:	3b0b3a0e 	blcc	2cf4d4 <__bss_end__+0x2c4bf4>
     c98:	1119270b 	tstne	r9, fp, lsl #14
     c9c:	40061201 	andmi	r1, r6, r1, lsl #4
     ca0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     ca4:	00001301 	andeq	r1, r0, r1, lsl #6
     ca8:	03000515 	movweq	r0, #1301	; 0x515
     cac:	3b0b3a08 	blcc	2cf4d4 <__bss_end__+0x2c4bf4>
     cb0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     cb4:	16000018 			; <UNDEFINED> instruction: 0x16000018
     cb8:	01018289 	smlabbeq	r1, r9, r2, r8
     cbc:	13310111 	teqne	r1, #1073741828	; 0x40000004
     cc0:	8a170000 	bhi	5c0cc8 <__bss_end__+0x5b63e8>
     cc4:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     cc8:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     ccc:	34180000 	ldrcc	r0, [r8], #-0
     cd0:	490e0300 	stmdbmi	lr, {r8, r9}
     cd4:	02193413 	andseq	r3, r9, #318767104	; 0x13000000
     cd8:	19000018 	stmdbne	r0, {r3, r4}
     cdc:	01018289 	smlabbeq	r1, r9, r2, r8
     ce0:	13310111 	teqne	r1, #1073741828	; 0x40000004
     ce4:	00001301 	andeq	r1, r0, r1, lsl #6
     ce8:	0182891a 	orreq	r8, r2, sl, lsl r9
     cec:	31011100 	mrscc	r1, (UNDEF: 17)
     cf0:	1b000013 	blne	d44 <_start-0x72bc>
     cf4:	08030034 	stmdaeq	r3, {r2, r4, r5}
     cf8:	0b3b0b3a 	bleq	ec39e8 <__bss_end__+0xeb9108>
     cfc:	17021349 	strne	r1, [r2, -r9, asr #6]
     d00:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
     d04:	03193f00 	tsteq	r9, #0, 30
     d08:	3b0b3a0e 	blcc	2cf548 <__bss_end__+0x2c4c68>
     d0c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     d10:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     d14:	97184006 	ldrls	r4, [r8, -r6]
     d18:	00001942 	andeq	r1, r0, r2, asr #18
     d1c:	3f012e1d 	svccc	0x00012e1d
     d20:	3a0e0319 	bcc	38198c <__bss_end__+0x3770ac>
     d24:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     d28:	11134919 	tstne	r3, r9, lsl r9
     d2c:	40061201 	andmi	r1, r6, r1, lsl #4
     d30:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     d34:	00001301 	andeq	r1, r0, r1, lsl #6
     d38:	0300051e 	movweq	r0, #1310	; 0x51e
     d3c:	3b0b3a0e 	blcc	2cf57c <__bss_end__+0x2c4c9c>
     d40:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     d44:	1f000017 	svcne	0x00000017
     d48:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     d4c:	0b3a0e03 	bleq	e84560 <__bss_end__+0xe79c80>
     d50:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     d54:	0000193c 	andeq	r1, r0, ip, lsr r9
     d58:	3f012e20 	svccc	0x00012e20
     d5c:	3a0e0319 	bcc	3819c8 <__bss_end__+0x3770e8>
     d60:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     d64:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     d68:	97184006 	ldrls	r4, [r8, -r6]
     d6c:	13011942 	movwne	r1, #6466	; 0x1942
     d70:	34210000 	strtcc	r0, [r1], #-0
     d74:	3a0e0300 	bcc	38197c <__bss_end__+0x37709c>
     d78:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d7c:	00180213 	andseq	r0, r8, r3, lsl r2
     d80:	010b2200 	mrseq	r2, R11_fiq
     d84:	06120111 			; <UNDEFINED> instruction: 0x06120111
     d88:	00001301 	andeq	r1, r0, r1, lsl #6
     d8c:	03003423 	movweq	r3, #1059	; 0x423
     d90:	3b0b3a0e 	blcc	2cf5d0 <__bss_end__+0x2c4cf0>
     d94:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     d98:	24000017 	strcs	r0, [r0], #-23
     d9c:	08030034 	stmdaeq	r3, {r2, r4, r5}
     da0:	0b3b0b3a 	bleq	ec3a90 <__bss_end__+0xeb91b0>
     da4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     da8:	2e250000 	cdpcs	0, 2, cr0, cr5, cr0, {0}
     dac:	03193f01 	tsteq	r9, #1, 30
     db0:	3b0b3a0e 	blcc	2cf5f0 <__bss_end__+0x2c4d10>
     db4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     db8:	01193c13 	tsteq	r9, r3, lsl ip
     dbc:	26000013 			; <UNDEFINED> instruction: 0x26000013
     dc0:	00000018 	andeq	r0, r0, r8, lsl r0
     dc4:	3f012e27 	svccc	0x00012e27
     dc8:	3a0e0319 	bcc	381a34 <__bss_end__+0x377154>
     dcc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     dd0:	01193c19 	tsteq	r9, r9, lsl ip
     dd4:	00000013 	andeq	r0, r0, r3, lsl r0
     dd8:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     ddc:	030b130e 	movweq	r1, #45838	; 0xb30e
     de0:	110e1b0e 	tstne	lr, lr, lsl #22
     de4:	10061201 	andne	r1, r6, r1, lsl #4
     de8:	02000017 	andeq	r0, r0, #23
     dec:	0b0b0024 	bleq	2c0e84 <__bss_end__+0x2b65a4>
     df0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     df4:	24030000 	strcs	r0, [r3], #-0
     df8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     dfc:	000e030b 	andeq	r0, lr, fp, lsl #6
     e00:	00160400 	andseq	r0, r6, r0, lsl #8
     e04:	0b3a0e03 	bleq	e84618 <__bss_end__+0xe79d38>
     e08:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e0c:	0f050000 	svceq	0x00050000
     e10:	000b0b00 	andeq	r0, fp, r0, lsl #22
     e14:	000f0600 	andeq	r0, pc, r0, lsl #12
     e18:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     e1c:	26070000 	strcs	r0, [r7], -r0
     e20:	00134900 	andseq	r4, r3, r0, lsl #18
     e24:	01130800 	tsteq	r3, r0, lsl #16
     e28:	0b3a0b0b 	bleq	e83a5c <__bss_end__+0xe7917c>
     e2c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     e30:	0d090000 	stceq	0, cr0, [r9, #-0]
     e34:	3a080300 	bcc	201a3c <__bss_end__+0x1f715c>
     e38:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e3c:	000b3813 	andeq	r3, fp, r3, lsl r8
     e40:	000d0a00 	andeq	r0, sp, r0, lsl #20
     e44:	0b3a0e03 	bleq	e84658 <__bss_end__+0xe79d78>
     e48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e4c:	00000b38 	andeq	r0, r0, r8, lsr fp
     e50:	0301130b 	movweq	r1, #4875	; 0x130b
     e54:	3a0b0b0e 	bcc	2c3a94 <__bss_end__+0x2b91b4>
     e58:	010b3b0b 	tsteq	fp, fp, lsl #22
     e5c:	0c000013 	stceq	0, cr0, [r0], {19}
     e60:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     e64:	0b381349 	bleq	e05b90 <__bss_end__+0xdfb2b0>
     e68:	00001934 	andeq	r1, r0, r4, lsr r9
     e6c:	03012e0d 	movweq	r2, #7693	; 0x1e0d
     e70:	3b0b3a0e 	blcc	2cf6b0 <__bss_end__+0x2c4dd0>
     e74:	2019270b 	andscs	r2, r9, fp, lsl #14
     e78:	0013010b 	andseq	r0, r3, fp, lsl #2
     e7c:	00050e00 	andeq	r0, r5, r0, lsl #28
     e80:	0b3a0e03 	bleq	e84694 <__bss_end__+0xe79db4>
     e84:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e88:	050f0000 	streq	r0, [pc, #-0]	; e90 <_start-0x7170>
     e8c:	3a080300 	bcc	201a94 <__bss_end__+0x1f71b4>
     e90:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e94:	10000013 	andne	r0, r0, r3, lsl r0
     e98:	0000010b 	andeq	r0, r0, fp, lsl #2
     e9c:	03003411 	movweq	r3, #1041	; 0x411
     ea0:	3b0b3a0e 	blcc	2cf6e0 <__bss_end__+0x2c4e00>
     ea4:	0013490b 	andseq	r4, r3, fp, lsl #18
     ea8:	012e1200 	teqeq	lr, r0, lsl #4
     eac:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     eb0:	0b3b0b3a 	bleq	ec3ba0 <__bss_end__+0xeb92c0>
     eb4:	01111927 	tsteq	r1, r7, lsr #18
     eb8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     ebc:	01194297 			; <UNDEFINED> instruction: 0x01194297
     ec0:	13000013 	movwne	r0, #19
     ec4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     ec8:	0b3b0b3a 	bleq	ec3bb8 <__bss_end__+0xeb92d8>
     ecc:	17021349 	strne	r1, [r2, -r9, asr #6]
     ed0:	05140000 	ldreq	r0, [r4, #-0]
     ed4:	3a080300 	bcc	201adc <__bss_end__+0x1f71fc>
     ed8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     edc:	00170213 	andseq	r0, r7, r3, lsl r2
     ee0:	00341500 	eorseq	r1, r4, r0, lsl #10
     ee4:	0b3a0803 	bleq	e82ef8 <__bss_end__+0xe78618>
     ee8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     eec:	00001802 	andeq	r1, r0, r2, lsl #16
     ef0:	03003416 	movweq	r3, #1046	; 0x416
     ef4:	3b0b3a08 	blcc	2cf71c <__bss_end__+0x2c4e3c>
     ef8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     efc:	17000017 	smladne	r0, r7, r0, r0
     f00:	0111010b 	tsteq	r1, fp, lsl #2
     f04:	13010612 	movwne	r0, #5650	; 0x1612
     f08:	34180000 	ldrcc	r0, [r8], #-0
     f0c:	3a0e0300 	bcc	381b14 <__bss_end__+0x377234>
     f10:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f14:	00180213 	andseq	r0, r8, r3, lsl r2
     f18:	011d1900 	tsteq	sp, r0, lsl #18
     f1c:	01111331 	tsteq	r1, r1, lsr r3
     f20:	0b580612 	bleq	1602770 <__bss_end__+0x15f7e90>
     f24:	13010b59 	movwne	r0, #7001	; 0x1b59
     f28:	051a0000 	ldreq	r0, [sl, #-0]
     f2c:	02133100 	andseq	r3, r3, #0, 2
     f30:	1b000017 	blne	f94 <_start-0x706c>
     f34:	13310005 	teqne	r1, #5
     f38:	00001802 	andeq	r1, r0, r2, lsl #16
     f3c:	3100051c 	tstcc	r0, ip, lsl r5
     f40:	000b1c13 	andeq	r1, fp, r3, lsl ip
     f44:	010b1d00 	tsteq	fp, r0, lsl #26
     f48:	06120111 			; <UNDEFINED> instruction: 0x06120111
     f4c:	341e0000 	ldrcc	r0, [lr], #-0
     f50:	02133100 	andseq	r3, r3, #0, 2
     f54:	1f000017 	svcne	0x00000017
     f58:	01018289 	smlabbeq	r1, r9, r2, r8
     f5c:	13310111 	teqne	r1, #1073741828	; 0x40000004
     f60:	8a200000 	bhi	800f68 <__bss_end__+0x7f6688>
     f64:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     f68:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     f6c:	1d210000 	stcne	0, cr0, [r1, #-0]
     f70:	11133101 	tstne	r3, r1, lsl #2
     f74:	58061201 	stmdapl	r6, {r0, r9, ip}
     f78:	000b590b 	andeq	r5, fp, fp, lsl #18
     f7c:	012e2200 	teqeq	lr, r0, lsl #4
     f80:	0b3a0e03 	bleq	e84794 <__bss_end__+0xe79eb4>
     f84:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     f88:	0b201349 	bleq	805cb4 <__bss_end__+0x7fb3d4>
     f8c:	00001301 	andeq	r1, r0, r1, lsl #6
     f90:	3f012e23 	svccc	0x00012e23
     f94:	3a0e0319 	bcc	381c00 <__bss_end__+0x377320>
     f98:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     f9c:	11134919 	tstne	r3, r9, lsl r9
     fa0:	40061201 	andmi	r1, r6, r1, lsl #4
     fa4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     fa8:	00001301 	andeq	r1, r0, r1, lsl #6
     fac:	01828924 	orreq	r8, r2, r4, lsr #18
     fb0:	31011100 	mrscc	r1, (UNDEF: 17)
     fb4:	25000013 	strcs	r0, [r0, #-19]
     fb8:	01018289 	smlabbeq	r1, r9, r2, r8
     fbc:	13310111 	teqne	r1, #1073741828	; 0x40000004
     fc0:	00001301 	andeq	r1, r0, r1, lsl #6
     fc4:	03003426 	movweq	r3, #1062	; 0x426
     fc8:	3b0b3a0e 	blcc	2cf808 <__bss_end__+0x2c4f28>
     fcc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     fd0:	27000017 	smladcs	r0, r7, r0, r0
     fd4:	13310005 	teqne	r1, #5
     fd8:	05280000 	streq	r0, [r8, #-0]!
     fdc:	3a0e0300 	bcc	381be4 <__bss_end__+0x377304>
     fe0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fe4:	00180213 	andseq	r0, r8, r3, lsl r2
     fe8:	00342900 	eorseq	r2, r4, r0, lsl #18
     fec:	13490e03 	movtne	r0, #40451	; 0x9e03
     ff0:	18021934 	stmdane	r2, {r2, r4, r5, r8, fp, ip}
     ff4:	012a0000 	teqeq	sl, r0
     ff8:	01134901 	tsteq	r3, r1, lsl #18
     ffc:	2b000013 	blcs	1050 <_start-0x6fb0>
    1000:	13490021 	movtne	r0, #36897	; 0x9021
    1004:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1008:	0300342c 	movweq	r3, #1068	; 0x42c
    100c:	3b0b3a08 	blcc	2cf834 <__bss_end__+0x2c4f54>
    1010:	1c13490b 	ldcne	9, cr4, [r3], {11}
    1014:	2d000006 	stccs	0, cr0, [r0, #-24]	; 0xffffffe8
    1018:	08030034 	stmdaeq	r3, {r2, r4, r5}
    101c:	0b3b0b3a 	bleq	ec3d0c <__bss_end__+0xeb942c>
    1020:	0b1c1349 	bleq	705d4c <__bss_end__+0x6fb46c>
    1024:	052e0000 	streq	r0, [lr, #-0]!
    1028:	3a080300 	bcc	201c30 <__bss_end__+0x1f7350>
    102c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1030:	00180213 	andseq	r0, r8, r3, lsl r2
    1034:	00182f00 	andseq	r2, r8, r0, lsl #30
    1038:	21300000 	teqcs	r0, r0
    103c:	2f134900 	svccs	0x00134900
    1040:	31000005 	tstcc	r0, r5
    1044:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1048:	0b3a0e03 	bleq	e8485c <__bss_end__+0xe79f7c>
    104c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1050:	1301193c 	movwne	r1, #6460	; 0x193c
    1054:	05320000 	ldreq	r0, [r2, #-0]!
    1058:	00134900 	andseq	r4, r3, r0, lsl #18
    105c:	002e3300 	eoreq	r3, lr, r0, lsl #6
    1060:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1064:	0b3b0b3a 	bleq	ec3d54 <__bss_end__+0xeb9474>
    1068:	13491927 	movtne	r1, #39207	; 0x9927
    106c:	0000193c 	andeq	r1, r0, ip, lsr r9
    1070:	3f012e34 	svccc	0x00012e34
    1074:	3a0e0319 	bcc	381ce0 <__bss_end__+0x377400>
    1078:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    107c:	3c134919 	ldccc	9, cr4, [r3], {25}
    1080:	00130119 	andseq	r0, r3, r9, lsl r1
    1084:	002e3500 	eoreq	r3, lr, r0, lsl #10
    1088:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    108c:	0b3b0b3a 	bleq	ec3d7c <__bss_end__+0xeb949c>
    1090:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    1094:	2e360000 	cdpcs	0, 3, cr0, cr6, cr0, {0}
    1098:	03193f01 	tsteq	r9, #1, 30
    109c:	3b0b3a0e 	blcc	2cf8dc <__bss_end__+0x2c4ffc>
    10a0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    10a4:	00193c13 	andseq	r3, r9, r3, lsl ip
    10a8:	11010000 	mrsne	r0, (UNDEF: 1)
    10ac:	130e2501 	movwne	r2, #58625	; 0xe501
    10b0:	1b0e030b 	blne	381ce4 <__bss_end__+0x377404>
    10b4:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    10b8:	00171006 	andseq	r1, r7, r6
    10bc:	00240200 	eoreq	r0, r4, r0, lsl #4
    10c0:	0b3e0b0b 	bleq	f83cf4 <__bss_end__+0xf79414>
    10c4:	00000803 	andeq	r0, r0, r3, lsl #16
    10c8:	0b002403 	bleq	a0dc <__FUNCTION__.4229+0xc4>
    10cc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    10d0:	0400000e 	streq	r0, [r0], #-14
    10d4:	0b0b0104 	bleq	2c14ec <__bss_end__+0x2b6c0c>
    10d8:	0b3b0b3a 	bleq	ec3dc8 <__bss_end__+0xeb94e8>
    10dc:	00001301 	andeq	r1, r0, r1, lsl #6
    10e0:	03002805 	movweq	r2, #2053	; 0x805
    10e4:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    10e8:	00160600 	andseq	r0, r6, r0, lsl #12
    10ec:	0b3a0e03 	bleq	e84900 <__bss_end__+0xe7a020>
    10f0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    10f4:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
    10f8:	03193f01 	tsteq	r9, #1, 30
    10fc:	3b0b3a0e 	blcc	2cf93c <__bss_end__+0x2c505c>
    1100:	1119270b 	tstne	r9, fp, lsl #14
    1104:	40061201 	andmi	r1, r6, r1, lsl #4
    1108:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    110c:	00001301 	andeq	r1, r0, r1, lsl #6
    1110:	01828908 	orreq	r8, r2, r8, lsl #18
    1114:	31011100 	mrscc	r1, (UNDEF: 17)
    1118:	09000013 	stmdbeq	r0, {r0, r1, r4}
    111c:	01018289 	smlabbeq	r1, r9, r2, r8
    1120:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1124:	00001301 	andeq	r1, r0, r1, lsl #6
    1128:	01828a0a 	orreq	r8, r2, sl, lsl #20
    112c:	91180200 	tstls	r8, r0, lsl #4
    1130:	00001842 	andeq	r1, r0, r2, asr #16
    1134:	3f012e0b 	svccc	0x00012e0b
    1138:	3a0e0319 	bcc	381da4 <__bss_end__+0x3774c4>
    113c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1140:	11134919 	tstne	r3, r9, lsl r9
    1144:	40061201 	andmi	r1, r6, r1, lsl #4
    1148:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    114c:	00001301 	andeq	r1, r0, r1, lsl #6
    1150:	0300050c 	movweq	r0, #1292	; 0x50c
    1154:	3b0b3a08 	blcc	2cf97c <__bss_end__+0x2c509c>
    1158:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    115c:	0d000017 	stceq	0, cr0, [r0, #-92]	; 0xffffffa4
    1160:	01018289 	smlabbeq	r1, r9, r2, r8
    1164:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1168:	340e0000 	strcc	r0, [lr], #-0
    116c:	3a0e0300 	bcc	381d74 <__bss_end__+0x377494>
    1170:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1174:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    1178:	0f000018 	svceq	0x00000018
    117c:	0b0b000f 	bleq	2c11c0 <__bss_end__+0x2b68e0>
    1180:	00001349 	andeq	r1, r0, r9, asr #6
    1184:	49003510 	stmdbmi	r0, {r4, r8, sl, ip, sp}
    1188:	11000013 	tstne	r0, r3, lsl r0
    118c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1190:	0b3a0e03 	bleq	e849a4 <__bss_end__+0xe7a0c4>
    1194:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1198:	0000193c 	andeq	r1, r0, ip, lsr r9
    119c:	3f012e12 	svccc	0x00012e12
    11a0:	3a0e0319 	bcc	381e0c <__bss_end__+0x37752c>
    11a4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    11a8:	01193c19 	tsteq	r9, r9, lsl ip
    11ac:	13000013 	movwne	r0, #19
    11b0:	13490005 	movtne	r0, #36869	; 0x9005
    11b4:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    11b8:	03193f01 	tsteq	r9, #1, 30
    11bc:	3b0b3a0e 	blcc	2cf9fc <__bss_end__+0x2c511c>
    11c0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    11c4:	01193c13 	tsteq	r9, r3, lsl ip
    11c8:	15000013 	strne	r0, [r0, #-19]
    11cc:	13490026 	movtne	r0, #36902	; 0x9026
    11d0:	35160000 	ldrcc	r0, [r6, #-0]
    11d4:	00000000 	andeq	r0, r0, r0
    11d8:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    11dc:	030b130e 	movweq	r1, #45838	; 0xb30e
    11e0:	110e1b0e 	tstne	lr, lr, lsl #22
    11e4:	10061201 	andne	r1, r6, r1, lsl #4
    11e8:	02000017 	andeq	r0, r0, #23
    11ec:	0b0b0024 	bleq	2c1284 <__bss_end__+0x2b69a4>
    11f0:	0e030b3e 	vmoveq.16	d3[0], r0
    11f4:	24030000 	strcs	r0, [r3], #-0
    11f8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    11fc:	0008030b 	andeq	r0, r8, fp, lsl #6
    1200:	01040400 	tsteq	r4, r0, lsl #8
    1204:	0b3a0b0b 	bleq	e83e38 <__bss_end__+0xe79558>
    1208:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    120c:	28050000 	stmdacs	r5, {}	; <UNPREDICTABLE>
    1210:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    1214:	0600000d 	streq	r0, [r0], -sp
    1218:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    121c:	0b3b0b3a 	bleq	ec3f0c <__bss_end__+0xeb962c>
    1220:	00001349 	andeq	r1, r0, r9, asr #6
    1224:	3f012e07 	svccc	0x00012e07
    1228:	3a0e0319 	bcc	381e94 <__bss_end__+0x3775b4>
    122c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1230:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1234:	97184006 	ldrls	r4, [r8, -r6]
    1238:	13011942 	movwne	r1, #6466	; 0x1942
    123c:	05080000 	streq	r0, [r8, #-0]
    1240:	3a080300 	bcc	201e48 <__bss_end__+0x1f7568>
    1244:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1248:	00170213 	andseq	r0, r7, r3, lsl r2
    124c:	00340900 	eorseq	r0, r4, r0, lsl #18
    1250:	0b3a0e03 	bleq	e84a64 <__bss_end__+0xe7a184>
    1254:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1258:	00001702 	andeq	r1, r0, r2, lsl #14
    125c:	0182890a 	orreq	r8, r2, sl, lsl #18
    1260:	31011101 	tstcc	r1, r1, lsl #2
    1264:	00130113 	andseq	r0, r3, r3, lsl r1
    1268:	828a0b00 	addhi	r0, sl, #0, 22
    126c:	18020001 	stmdane	r2, {r0}
    1270:	00184291 	mulseq	r8, r1, r2
    1274:	82890c00 	addhi	r0, r9, #0, 24
    1278:	01110101 	tsteq	r1, r1, lsl #2
    127c:	00001331 	andeq	r1, r0, r1, lsr r3
    1280:	0b000f0d 	bleq	4ebc <_start-0x3144>
    1284:	0013490b 	andseq	r4, r3, fp, lsl #18
    1288:	00350e00 	eorseq	r0, r5, r0, lsl #28
    128c:	00001349 	andeq	r1, r0, r9, asr #6
    1290:	3f012e0f 	svccc	0x00012e0f
    1294:	3a0e0319 	bcc	381f00 <__bss_end__+0x377620>
    1298:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    129c:	11134919 	tstne	r3, r9, lsl r9
    12a0:	40061201 	andmi	r1, r6, r1, lsl #4
    12a4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    12a8:	00001301 	andeq	r1, r0, r1, lsl #6
    12ac:	03003410 	movweq	r3, #1040	; 0x410
    12b0:	3b0b3a08 	blcc	2cfad8 <__bss_end__+0x2c51f8>
    12b4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    12b8:	11000017 	tstne	r0, r7, lsl r0
    12bc:	00018289 	andeq	r8, r1, r9, lsl #5
    12c0:	13310111 	teqne	r1, #1073741828	; 0x40000004
    12c4:	05120000 	ldreq	r0, [r2, #-0]
    12c8:	3a0e0300 	bcc	381ed0 <__bss_end__+0x3775f0>
    12cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    12d0:	00170213 	andseq	r0, r7, r3, lsl r2
    12d4:	012e1300 	teqeq	lr, r0, lsl #6
    12d8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    12dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    12e0:	13491927 	movtne	r1, #39207	; 0x9927
    12e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    12e8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    12ec:	00130119 	andseq	r0, r3, r9, lsl r1
    12f0:	00051400 	andeq	r1, r5, r0, lsl #8
    12f4:	0b3a0e03 	bleq	e84b08 <__bss_end__+0xe7a228>
    12f8:	1349053b 	movtne	r0, #38203	; 0x953b
    12fc:	00001702 	andeq	r1, r0, r2, lsl #14
    1300:	3f012e15 	svccc	0x00012e15
    1304:	3a0e0319 	bcc	381f70 <__bss_end__+0x377690>
    1308:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    130c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1310:	97184006 	ldrls	r4, [r8, -r6]
    1314:	13011942 	movwne	r1, #6466	; 0x1942
    1318:	05160000 	ldreq	r0, [r6, #-0]
    131c:	3a080300 	bcc	201f24 <__bss_end__+0x1f7644>
    1320:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1324:	00170213 	andseq	r0, r7, r3, lsl r2
    1328:	00341700 	eorseq	r1, r4, r0, lsl #14
    132c:	0b3a0e03 	bleq	e84b40 <__bss_end__+0xe7a260>
    1330:	1349053b 	movtne	r0, #38203	; 0x953b
    1334:	00001702 	andeq	r1, r0, r2, lsl #14
    1338:	11010b18 	tstne	r1, r8, lsl fp
    133c:	01061201 	tsteq	r6, r1, lsl #4
    1340:	19000013 	stmdbne	r0, {r0, r1, r4}
    1344:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1348:	0b3b0b3a 	bleq	ec4038 <__bss_end__+0xeb9758>
    134c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1350:	00001802 	andeq	r1, r0, r2, lsl #16
    1354:	3f012e1a 	svccc	0x00012e1a
    1358:	3a0e0319 	bcc	381fc4 <__bss_end__+0x3776e4>
    135c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1360:	3c134919 	ldccc	9, cr4, [r3], {25}
    1364:	00130119 	andseq	r0, r3, r9, lsl r1
    1368:	00051b00 	andeq	r1, r5, r0, lsl #22
    136c:	00001349 	andeq	r1, r0, r9, asr #6
    1370:	4900261c 	stmdbmi	r0, {r2, r3, r4, r9, sl, sp}
    1374:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    1378:	00000035 	andeq	r0, r0, r5, lsr r0
    137c:	3f012e1e 	svccc	0x00012e1e
    1380:	3a0e0319 	bcc	381fec <__bss_end__+0x37770c>
    1384:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1388:	01193c19 	tsteq	r9, r9, lsl ip
    138c:	1f000013 	svcne	0x00000013
    1390:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1394:	0b3a0e03 	bleq	e84ba8 <__bss_end__+0xe7a2c8>
    1398:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    139c:	0000193c 	andeq	r1, r0, ip, lsr r9
    13a0:	01110100 	tsteq	r1, r0, lsl #2
    13a4:	0b130e25 	bleq	4c4c40 <__bss_end__+0x4ba360>
    13a8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    13ac:	06120111 			; <UNDEFINED> instruction: 0x06120111
    13b0:	00001710 	andeq	r1, r0, r0, lsl r7
    13b4:	0b002402 	bleq	a3c4 <__FUNCTION__.4374+0x4>
    13b8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    13bc:	0300000e 	movweq	r0, #14
    13c0:	0b0b0024 	bleq	2c1458 <__bss_end__+0x2b6b78>
    13c4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    13c8:	0f040000 	svceq	0x00040000
    13cc:	000b0b00 	andeq	r0, fp, r0, lsl #22
    13d0:	000f0500 	andeq	r0, pc, r0, lsl #10
    13d4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    13d8:	16060000 	strne	r0, [r6], -r0
    13dc:	3a0e0300 	bcc	381fe4 <__bss_end__+0x377704>
    13e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    13e4:	07000013 	smladeq	r0, r3, r0, r0
    13e8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    13ec:	0b3a0e03 	bleq	e84c00 <__bss_end__+0xe7a320>
    13f0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    13f4:	01111349 	tsteq	r1, r9, asr #6
    13f8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    13fc:	00194297 	mulseq	r9, r7, r2
    1400:	00050800 	andeq	r0, r5, r0, lsl #16
    1404:	0b3a0803 	bleq	e83418 <__bss_end__+0xe78b38>
    1408:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    140c:	00001802 	andeq	r1, r0, r2, lsl #16
    1410:	03000509 	movweq	r0, #1289	; 0x509
    1414:	3b0b3a08 	blcc	2cfc3c <__bss_end__+0x2c535c>
    1418:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    141c:	0a000017 	beq	1480 <_start-0x6b80>
    1420:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1424:	0b3b0b3a 	bleq	ec4114 <__bss_end__+0xeb9834>
    1428:	17021349 	strne	r1, [r2, -r9, asr #6]
    142c:	340b0000 	strcc	r0, [fp], #-0
    1430:	3a080300 	bcc	202038 <__bss_end__+0x1f7758>
    1434:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1438:	00180213 	andseq	r0, r8, r3, lsl r2
    143c:	11010000 	mrsne	r0, (UNDEF: 1)
    1440:	130e2501 	movwne	r2, #58625	; 0xe501
    1444:	1b0e030b 	blne	382078 <__bss_end__+0x377798>
    1448:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    144c:	00171006 	andseq	r1, r7, r6
    1450:	00240200 	eoreq	r0, r4, r0, lsl #4
    1454:	0b3e0b0b 	bleq	f84088 <__bss_end__+0xf797a8>
    1458:	00000803 	andeq	r0, r0, r3, lsl #16
    145c:	03001603 	movweq	r1, #1539	; 0x603
    1460:	3b0b3a0e 	blcc	2cfca0 <__bss_end__+0x2c53c0>
    1464:	0013490b 	andseq	r4, r3, fp, lsl #18
    1468:	00240400 	eoreq	r0, r4, r0, lsl #8
    146c:	0b3e0b0b 	bleq	f840a0 <__bss_end__+0xf797c0>
    1470:	00000e03 	andeq	r0, r0, r3, lsl #28
    1474:	0b000f05 	bleq	5090 <_start-0x2f70>
    1478:	0600000b 	streq	r0, [r0], -fp
    147c:	0b0b0113 	bleq	2c18d0 <__bss_end__+0x2b6ff0>
    1480:	0b3b0b3a 	bleq	ec4170 <__bss_end__+0xeb9890>
    1484:	00001301 	andeq	r1, r0, r1, lsl #6
    1488:	03000d07 	movweq	r0, #3335	; 0xd07
    148c:	3b0b3a08 	blcc	2cfcb4 <__bss_end__+0x2c53d4>
    1490:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1494:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1498:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    149c:	0b3b0b3a 	bleq	ec418c <__bss_end__+0xeb98ac>
    14a0:	0b381349 	bleq	e061cc <__bss_end__+0xdfb8ec>
    14a4:	04090000 	streq	r0, [r9], #-0
    14a8:	3a0b0b01 	bcc	2c40b4 <__bss_end__+0x2b97d4>
    14ac:	010b3b0b 	tsteq	fp, fp, lsl #22
    14b0:	0a000013 	beq	1504 <_start-0x6afc>
    14b4:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    14b8:	00000d1c 	andeq	r0, r0, ip, lsl sp
    14bc:	3f012e0b 	svccc	0x00012e0b
    14c0:	3a0e0319 	bcc	38212c <__bss_end__+0x37784c>
    14c4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    14c8:	11134919 	tstne	r3, r9, lsl r9
    14cc:	40061201 	andmi	r1, r6, r1, lsl #4
    14d0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    14d4:	00001301 	andeq	r1, r0, r1, lsl #6
    14d8:	0300340c 	movweq	r3, #1036	; 0x40c
    14dc:	3b0b3a08 	blcc	2cfd04 <__bss_end__+0x2c5424>
    14e0:	1c13490b 	ldcne	9, cr4, [r3], {11}
    14e4:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
    14e8:	01018289 	smlabbeq	r1, r9, r2, r8
    14ec:	13310111 	teqne	r1, #1073741828	; 0x40000004
    14f0:	8a0e0000 	bhi	3814f8 <__bss_end__+0x376c18>
    14f4:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    14f8:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    14fc:	0f0f0000 	svceq	0x000f0000
    1500:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1504:	10000013 	andne	r0, r0, r3, lsl r0
    1508:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    150c:	0b3a0e03 	bleq	e84d20 <__bss_end__+0xe7a440>
    1510:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1514:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    1518:	05110000 	ldreq	r0, [r1, #-0]
    151c:	00134900 	andseq	r4, r3, r0, lsl #18
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	00000000 	andeq	r0, r0, r0
       4:	0000000c 	andeq	r0, r0, ip
       8:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
       c:	0f000000 	svceq	0x00000000
      10:	01000000 	mrseq	r0, (UNDEF: 0)
      14:	000f5100 	andeq	r5, pc, r0, lsl #2
      18:	00340000 	eorseq	r0, r4, r0
      1c:	00040000 	andeq	r0, r4, r0
      20:	9f5001f3 	svcls	0x005001f3
	...
      2c:	00000040 	andeq	r0, r0, r0, asr #32
      30:	0000004c 	andeq	r0, r0, ip, asr #32
      34:	9f300002 	svcls	0x00300002
      38:	0000004c 	andeq	r0, r0, ip, asr #32
      3c:	0000007c 	andeq	r0, r0, ip, ror r0
      40:	00540001 	subseq	r0, r4, r1
      44:	00000000 	andeq	r0, r0, r0
      48:	2c000000 	stccs	0, cr0, [r0], {-0}
      4c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
      50:	01000000 	mrseq	r0, (UNDEF: 0)
      54:	00385000 	eorseq	r5, r8, r0
      58:	00480000 	subeq	r0, r8, r0
      5c:	00010000 	andeq	r0, r1, r0
      60:	00004855 	andeq	r4, r0, r5, asr r8
      64:	00005800 	andeq	r5, r0, r0, lsl #16
      68:	50000100 	andpl	r0, r0, r0, lsl #2
	...
      78:	0000000b 	andeq	r0, r0, fp
      7c:	0b500001 	bleq	1400088 <__bss_end__+0x13f57a8>
      80:	14000000 	strne	r0, [r0], #-0
      84:	01000000 	mrseq	r0, (UNDEF: 0)
      88:	00005400 	andeq	r5, r0, r0, lsl #8
	...
      94:	00100000 	andseq	r0, r0, r0
      98:	00010000 	andeq	r0, r1, r0
      9c:	00001050 	andeq	r1, r0, r0, asr r0
      a0:	00003400 	andeq	r3, r0, r0, lsl #8
      a4:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
      b4:	00000004 	andeq	r0, r0, r4
      b8:	04500001 	ldrbeq	r0, [r0], #-1
      bc:	0c000000 	stceq	0, cr0, [r0], {-0}
      c0:	03000000 	movweq	r0, #0
      c4:	9f307000 	svcls	0x00307000
      c8:	0000000c 	andeq	r0, r0, ip
      cc:	00000014 	andeq	r0, r0, r4, lsl r0
      d0:	01f30004 	mvnseq	r0, r4
      d4:	00009f50 	andeq	r9, r0, r0, asr pc
      d8:	00000000 	andeq	r0, r0, r0
      dc:	00140000 	andseq	r0, r4, r0
      e0:	00200000 	eoreq	r0, r0, r0
      e4:	00010000 	andeq	r0, r1, r0
      e8:	00002050 	andeq	r2, r0, r0, asr r0
      ec:	00002c00 	andeq	r2, r0, r0, lsl #24
      f0:	70000300 	andvc	r0, r0, r0, lsl #6
      f4:	002c9f01 	eoreq	r9, ip, r1, lsl #30
      f8:	00400000 	subeq	r0, r0, r0
      fc:	00010000 	andeq	r0, r1, r0
     100:	00000050 	andeq	r0, r0, r0, asr r0
     104:	00000000 	andeq	r0, r0, r0
     108:	00001400 	andeq	r1, r0, r0, lsl #8
     10c:	00001800 	andeq	r1, r0, r0, lsl #16
     110:	51000100 	mrspl	r0, (UNDEF: 16)
     114:	00000018 	andeq	r0, r0, r8, lsl r0
     118:	00000040 	andeq	r0, r0, r0, asr #32
     11c:	01f30004 	mvnseq	r0, r4
     120:	00009f51 	andeq	r9, r0, r1, asr pc
     124:	00000000 	andeq	r0, r0, r0
     128:	00400000 	subeq	r0, r0, r0
     12c:	00600000 	rsbeq	r0, r0, r0
     130:	00010000 	andeq	r0, r1, r0
     134:	00006050 	andeq	r6, r0, r0, asr r0
     138:	00006c00 	andeq	r6, r0, r0, lsl #24
     13c:	71000300 	mrsvc	r0, LR_irq
     140:	006c9f01 	rsbeq	r9, ip, r1, lsl #30
     144:	00740000 	rsbseq	r0, r4, r0
     148:	00010000 	andeq	r0, r1, r0
     14c:	00007451 	andeq	r7, r0, r1, asr r4
     150:	00008000 	andeq	r8, r0, r0
     154:	71000300 	mrsvc	r0, LR_irq
     158:	00009f01 	andeq	r9, r0, r1, lsl #30
     15c:	00000000 	andeq	r0, r0, r0
     160:	00400000 	subeq	r0, r0, r0
     164:	00500000 	subseq	r0, r0, r0
     168:	00010000 	andeq	r0, r1, r0
     16c:	00005051 	andeq	r5, r0, r1, asr r0
     170:	00008000 	andeq	r8, r0, r0
     174:	f3000400 	vshl.u8	d0, d0, d0
     178:	009f5101 	addseq	r5, pc, r1, lsl #2
     17c:	00000000 	andeq	r0, r0, r0
     180:	40000000 	andmi	r0, r0, r0
     184:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     188:	01000000 	mrseq	r0, (UNDEF: 0)
     18c:	00585200 	subseq	r5, r8, r0, lsl #4
     190:	00640000 	rsbeq	r0, r4, r0
     194:	00010000 	andeq	r0, r1, r0
     198:	00006452 	andeq	r6, r0, r2, asr r4
     19c:	00006800 	andeq	r6, r0, r0, lsl #16
     1a0:	72000300 	andvc	r0, r0, #0, 6
     1a4:	00689f01 	rsbeq	r9, r8, r1, lsl #30
     1a8:	00800000 	addeq	r0, r0, r0
     1ac:	00010000 	andeq	r0, r1, r0
     1b0:	00000052 	andeq	r0, r0, r2, asr r0
     1b4:	00000000 	andeq	r0, r0, r0
     1b8:	00004000 	andeq	r4, r0, r0
     1bc:	00005400 	andeq	r5, r0, r0, lsl #8
     1c0:	53000100 	movwpl	r0, #256	; 0x100
     1c4:	00000054 	andeq	r0, r0, r4, asr r0
     1c8:	00000078 	andeq	r0, r0, r8, ror r0
     1cc:	00530001 	subseq	r0, r3, r1
     1d0:	00000000 	andeq	r0, r0, r0
     1d4:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     1d8:	60000000 	andvs	r0, r0, r0
     1dc:	01000000 	mrseq	r0, (UNDEF: 0)
     1e0:	00605c00 	rsbeq	r5, r0, r0, lsl #24
     1e4:	00800000 	addeq	r0, r0, r0
     1e8:	000a0000 	andeq	r0, sl, r0
     1ec:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
     1f0:	231c5301 	tstcs	ip, #67108864	; 0x4000000
     1f4:	00009f01 	andeq	r9, r0, r1, lsl #30
     1f8:	00000000 	andeq	r0, r0, r0
     1fc:	00800000 	addeq	r0, r0, r0
     200:	00a40000 	adceq	r0, r4, r0
     204:	00010000 	andeq	r0, r1, r0
     208:	0000a450 	andeq	sl, r0, r0, asr r4
     20c:	00011800 	andeq	r1, r1, r0, lsl #16
     210:	70000300 	andvc	r0, r0, r0, lsl #6
     214:	01189f02 	tsteq	r8, r2, lsl #30
     218:	021c0000 	andseq	r0, ip, #0
     21c:	00040000 	andeq	r0, r4, r0
     220:	9f5001f3 	svcls	0x005001f3
	...
     22c:	00000080 	andeq	r0, r0, r0, lsl #1
     230:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     234:	f0510001 			; <UNDEFINED> instruction: 0xf0510001
     238:	60000000 	andvs	r0, r0, r0
     23c:	01000001 	tsteq	r0, r1
     240:	01605500 	cmneq	r0, r0, lsl #10
     244:	01680000 	cmneq	r8, r0
     248:	00010000 	andeq	r0, r1, r0
     24c:	00016851 	andeq	r6, r1, r1, asr r8
     250:	00018800 	andeq	r8, r1, r0, lsl #16
     254:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     258:	00000188 	andeq	r0, r0, r8, lsl #3
     25c:	0000019c 	muleq	r0, ip, r1
     260:	9c510001 	mrrcls	0, 0, r0, r1, cr1
     264:	bc000001 	stclt	0, cr0, [r0], {1}
     268:	01000001 	tsteq	r0, r1
     26c:	01bc5500 			; <UNDEFINED> instruction: 0x01bc5500
     270:	01bf0000 			; <UNDEFINED> instruction: 0x01bf0000
     274:	00010000 	andeq	r0, r1, r0
     278:	0001bf51 	andeq	fp, r1, r1, asr pc
     27c:	00020000 	andeq	r0, r2, r0
     280:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     284:	00000200 	andeq	r0, r0, r0, lsl #4
     288:	0000021c 	andeq	r0, r0, ip, lsl r2
     28c:	01f30004 	mvnseq	r0, r4
     290:	00009f51 	andeq	r9, r0, r1, asr pc
     294:	00000000 	andeq	r0, r0, r0
     298:	00800000 	addeq	r0, r0, r0
     29c:	00940000 	addseq	r0, r4, r0
     2a0:	00010000 	andeq	r0, r1, r0
     2a4:	00009452 	andeq	r9, r0, r2, asr r4
     2a8:	00020000 	andeq	r0, r2, r0
     2ac:	54000100 	strpl	r0, [r0], #-256	; 0x100
     2b0:	00000200 	andeq	r0, r0, r0, lsl #4
     2b4:	0000021c 	andeq	r0, r0, ip, lsl r2
     2b8:	01f30004 	mvnseq	r0, r4
     2bc:	00009f52 	andeq	r9, r0, r2, asr pc
     2c0:	00000000 	andeq	r0, r0, r0
     2c4:	00800000 	addeq	r0, r0, r0
     2c8:	01000000 	mrseq	r0, (UNDEF: 0)
     2cc:	00010000 	andeq	r0, r1, r0
     2d0:	00010453 	andeq	r0, r1, r3, asr r4
     2d4:	00010800 	andeq	r0, r1, r0, lsl #16
     2d8:	53000100 	movwpl	r0, #256	; 0x100
     2dc:	00000160 	andeq	r0, r0, r0, ror #2
     2e0:	00000168 	andeq	r0, r0, r8, ror #2
     2e4:	68530001 	ldmdavs	r3, {r0}^
     2e8:	88000001 	stmdahi	r0, {r0}
     2ec:	04000001 	streq	r0, [r0], #-1
     2f0:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
     2f4:	0001889f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
     2f8:	00019000 	andeq	r9, r1, r0
     2fc:	53000100 	movwpl	r0, #256	; 0x100
     300:	00000190 	muleq	r0, r0, r1
     304:	00000194 	muleq	r0, r4, r1
     308:	945c0001 	ldrbls	r0, [ip], #-1
     30c:	9c000001 	stcls	0, cr0, [r0], {1}
     310:	01000001 	tsteq	r0, r1
     314:	019c5300 	orrseq	r5, ip, r0, lsl #6
     318:	01bc0000 			; <UNDEFINED> instruction: 0x01bc0000
     31c:	00040000 	andeq	r0, r4, r0
     320:	9f5301f3 	svcls	0x005301f3
     324:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     328:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
     32c:	bf530001 	svclt	0x00530001
     330:	d8000001 	stmdale	r0, {r0}
     334:	04000001 	streq	r0, [r0], #-1
     338:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
     33c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     340:	00000000 	andeq	r0, r0, r0
     344:	00008000 	andeq	r8, r0, r0
     348:	00009c00 	andeq	r9, r0, r0, lsl #24
     34c:	91000200 	mrsls	r0, R8_usr
     350:	00009c00 	andeq	r9, r0, r0, lsl #24
     354:	0001bf00 	andeq	fp, r1, r0, lsl #30
     358:	52000100 	andpl	r0, r0, #0, 2
     35c:	000001d8 	ldrdeq	r0, [r0], -r8
     360:	000001e3 	andeq	r0, r0, r3, ror #3
     364:	00520001 	subseq	r0, r2, r1
     368:	00000000 	andeq	r0, r0, r0
     36c:	9c000000 	stcls	0, cr0, [r0], {-0}
     370:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     374:	01000001 	tsteq	r0, r1
     378:	01185d00 	tsteq	r8, r0, lsl #26
     37c:	011c0000 	tsteq	ip, r0
     380:	00010000 	andeq	r0, r1, r0
     384:	00011c53 	andeq	r1, r1, r3, asr ip
     388:	00012000 	andeq	r2, r1, r0
     38c:	51000100 	mrspl	r0, (UNDEF: 16)
     390:	00000120 	andeq	r0, r0, r0, lsr #2
     394:	00000160 	andeq	r0, r0, r0, ror #2
     398:	60530001 	subsvs	r0, r3, r1
     39c:	68000001 	stmdavs	r0, {r0}
     3a0:	01000001 	tsteq	r0, r1
     3a4:	01685d00 	cmneq	r8, r0, lsl #26
     3a8:	016c0000 	cmneq	ip, r0
     3ac:	00010000 	andeq	r0, r1, r0
     3b0:	00016c5e 	andeq	r6, r1, lr, asr ip
     3b4:	00018800 	andeq	r8, r1, r0, lsl #16
     3b8:	53000100 	movwpl	r0, #256	; 0x100
     3bc:	00000188 	andeq	r0, r0, r8, lsl #3
     3c0:	00000190 	muleq	r0, r0, r1
     3c4:	a1910004 	orrsge	r0, r1, r4
     3c8:	01909f7f 	orrseq	r9, r0, pc, ror pc
     3cc:	01940000 	orrseq	r0, r4, r0
     3d0:	00010000 	andeq	r0, r1, r0
     3d4:	00019453 	andeq	r9, r1, r3, asr r4
     3d8:	00019c00 	andeq	r9, r1, r0, lsl #24
     3dc:	5d000100 	stfpls	f0, [r0, #-0]
     3e0:	0000019c 	muleq	r0, ip, r1
     3e4:	000001a0 	andeq	r0, r0, r0, lsr #3
     3e8:	a05e0001 	subsge	r0, lr, r1
     3ec:	bc000001 	stclt	0, cr0, [r0], {1}
     3f0:	01000001 	tsteq	r0, r1
     3f4:	01bc5300 			; <UNDEFINED> instruction: 0x01bc5300
     3f8:	01d80000 	bicseq	r0, r8, r0
     3fc:	00010000 	andeq	r0, r1, r0
     400:	0001d85d 	andeq	sp, r1, sp, asr r8
     404:	0001e300 	andeq	lr, r1, r0, lsl #6
     408:	53000100 	movwpl	r0, #256	; 0x100
	...
     414:	000000a0 	andeq	r0, r0, r0, lsr #1
     418:	000000ec 	andeq	r0, r0, ip, ror #1
     41c:	ec5c0001 	mrrc	0, 0, r0, ip, cr1
     420:	00000000 	andeq	r0, r0, r0
     424:	01000001 	tsteq	r0, r1
     428:	01005300 	mrseq	r5, LR_irq
     42c:	01040000 	mrseq	r0, (UNDEF: 4)
     430:	00010000 	andeq	r0, r1, r0
     434:	0001045c 	andeq	r0, r1, ip, asr r4
     438:	00010800 	andeq	r0, r1, r0, lsl #16
     43c:	53000100 	movwpl	r0, #256	; 0x100
     440:	00000108 	andeq	r0, r0, r8, lsl #2
     444:	00000118 	andeq	r0, r0, r8, lsl r1
     448:	185c0001 	ldmdane	ip, {r0}^
     44c:	1c000001 	stcne	0, cr0, [r0], {1}
     450:	01000001 	tsteq	r0, r1
     454:	011c5000 	tsteq	ip, r0
     458:	013c0000 	teqeq	ip, r0
     45c:	00010000 	andeq	r0, r1, r0
     460:	0001445c 	andeq	r4, r1, ip, asr r4
     464:	00015800 	andeq	r5, r1, r0, lsl #16
     468:	50000100 	andpl	r0, r0, r0, lsl #2
     46c:	00000158 	andeq	r0, r0, r8, asr r1
     470:	00000160 	andeq	r0, r0, r0, ror #2
     474:	605c0001 	subsvs	r0, ip, r1
     478:	68000001 	stmdavs	r0, {r0}
     47c:	01000001 	tsteq	r0, r1
     480:	01685300 	cmneq	r8, r0, lsl #6
     484:	01780000 	cmneq	r8, r0
     488:	00010000 	andeq	r0, r1, r0
     48c:	0001785c 	andeq	r7, r1, ip, asr r8
     490:	00018000 	andeq	r8, r1, r0
     494:	7c000500 	cfstr32vc	mvfx0, [r0], {-0}
     498:	9f253400 	svcls	0x00253400
     49c:	00000180 	andeq	r0, r0, r0, lsl #3
     4a0:	00000188 	andeq	r0, r0, r8, lsl #3
     4a4:	885c0001 	ldmdahi	ip, {r0}^
     4a8:	90000001 	andls	r0, r0, r1
     4ac:	01000001 	tsteq	r0, r1
     4b0:	01905300 	orrseq	r5, r0, r0, lsl #6
     4b4:	01940000 	orrseq	r0, r4, r0
     4b8:	00010000 	andeq	r0, r1, r0
     4bc:	0001945c 	andeq	r9, r1, ip, asr r4
     4c0:	00019c00 	andeq	r9, r1, r0, lsl #24
     4c4:	53000100 	movwpl	r0, #256	; 0x100
     4c8:	0000019c 	muleq	r0, ip, r1
     4cc:	000001ac 	andeq	r0, r0, ip, lsr #3
     4d0:	ac5c0001 	mrrcge	0, 0, r0, ip, cr1
     4d4:	b4000001 	strlt	r0, [r0], #-1
     4d8:	05000001 	streq	r0, [r0, #-1]
     4dc:	31007c00 	tstcc	r0, r0, lsl #24
     4e0:	01b49f25 			; <UNDEFINED> instruction: 0x01b49f25
     4e4:	01bc0000 			; <UNDEFINED> instruction: 0x01bc0000
     4e8:	00010000 	andeq	r0, r1, r0
     4ec:	0001bc5c 	andeq	fp, r1, ip, asr ip
     4f0:	0001bf00 	andeq	fp, r1, r0, lsl #30
     4f4:	53000100 	movwpl	r0, #256	; 0x100
     4f8:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
     4fc:	000001d8 	ldrdeq	r0, [r0], -r8
     500:	01f30004 	mvnseq	r0, r4
     504:	01d89f53 	bicseq	r9, r8, r3, asr pc
     508:	01e30000 	mvneq	r0, r0
     50c:	00010000 	andeq	r0, r1, r0
     510:	0000005c 	andeq	r0, r0, ip, asr r0
     514:	00000000 	andeq	r0, r0, r0
     518:	0000ec00 	andeq	lr, r0, r0, lsl #24
     51c:	0000fc00 	andeq	pc, r0, r0, lsl #24
     520:	30000200 	andcc	r0, r0, r0, lsl #4
     524:	0000fc9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
     528:	00010400 	andeq	r0, r1, r0, lsl #8
     52c:	31000200 	mrscc	r0, R8_usr
     530:	0001049f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
     534:	00010800 	andeq	r0, r1, r0, lsl #16
     538:	30000200 	andcc	r0, r0, r0, lsl #4
     53c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     540:	00000000 	andeq	r0, r0, r0
     544:	00021c00 	andeq	r1, r2, r0, lsl #24
     548:	00022b00 	andeq	r2, r2, r0, lsl #22
     54c:	50000100 	andpl	r0, r0, r0, lsl #2
     550:	0000022b 	andeq	r0, r0, fp, lsr #4
     554:	00000244 	andeq	r0, r0, r4, asr #4
     558:	01f30004 	mvnseq	r0, r4
     55c:	02449f50 	subeq	r9, r4, #80, 30	; 0x140
     560:	02700000 	rsbseq	r0, r0, #0
     564:	00010000 	andeq	r0, r1, r0
     568:	00000050 	andeq	r0, r0, r0, asr r0
     56c:	00000000 	andeq	r0, r0, r0
     570:	00021c00 	andeq	r1, r2, r0, lsl #24
     574:	00022b00 	andeq	r2, r2, r0, lsl #22
     578:	51000100 	mrspl	r0, (UNDEF: 16)
     57c:	0000022b 	andeq	r0, r0, fp, lsr #4
     580:	00000244 	andeq	r0, r0, r4, asr #4
     584:	01f30004 	mvnseq	r0, r4
     588:	02449f51 	subeq	r9, r4, #324	; 0x144
     58c:	02700000 	rsbseq	r0, r0, #0
     590:	00010000 	andeq	r0, r1, r0
     594:	00000051 	andeq	r0, r0, r1, asr r0
     598:	00000000 	andeq	r0, r0, r0
     59c:	00027000 	andeq	r7, r2, r0
     5a0:	00029c00 	andeq	r9, r2, r0, lsl #24
     5a4:	50000100 	andpl	r0, r0, r0, lsl #2
     5a8:	0000029c 	muleq	r0, ip, r2
     5ac:	000004e4 	andeq	r0, r0, r4, ror #9
     5b0:	e45a0001 	ldrb	r0, [sl], #-1
     5b4:	f8000004 			; <UNDEFINED> instruction: 0xf8000004
     5b8:	04000004 	streq	r0, [r0], #-4
     5bc:	5001f300 	andpl	pc, r1, r0, lsl #6
     5c0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     5c4:	00000000 	andeq	r0, r0, r0
     5c8:	00027000 	andeq	r7, r2, r0
     5cc:	00028400 	andeq	r8, r2, r0, lsl #8
     5d0:	51000100 	mrspl	r0, (UNDEF: 16)
     5d4:	00000284 	andeq	r0, r0, r4, lsl #5
     5d8:	0000029c 	muleq	r0, ip, r2
     5dc:	01710003 	cmneq	r1, r3
     5e0:	00029c9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
     5e4:	0004f800 	andeq	pc, r4, r0, lsl #16
     5e8:	f3000400 	vshl.u8	d0, d0, d0
     5ec:	009f5101 	addseq	r5, pc, r1, lsl #2
     5f0:	00000000 	andeq	r0, r0, r0
     5f4:	70000000 	andvc	r0, r0, r0
     5f8:	a4000002 	strge	r0, [r0], #-2
     5fc:	01000002 	tsteq	r0, r2
     600:	02a45200 	adceq	r5, r4, #0, 4
     604:	02cc0000 	sbceq	r0, ip, #0
     608:	00010000 	andeq	r0, r1, r0
     60c:	0002cc52 	andeq	ip, r2, r2, asr ip
     610:	00049400 	andeq	r9, r4, r0, lsl #8
     614:	56000100 	strpl	r0, [r0], -r0, lsl #2
     618:	00000494 	muleq	r0, r4, r4
     61c:	000004f8 	strdeq	r0, [r0], -r8
     620:	00520001 	subseq	r0, r2, r1
     624:	00000000 	andeq	r0, r0, r0
     628:	70000000 	andvc	r0, r0, r0
     62c:	8c000002 	stchi	0, cr0, [r0], {2}
     630:	01000002 	tsteq	r0, r2
     634:	00005300 	andeq	r5, r0, r0, lsl #6
     638:	00000000 	andeq	r0, r0, r0
     63c:	02800000 	addeq	r0, r0, #0
     640:	029c0000 	addseq	r0, ip, #0
     644:	00010000 	andeq	r0, r1, r0
     648:	00029c50 	andeq	r9, r2, r0, asr ip
     64c:	0002a000 	andeq	sl, r2, r0
     650:	54000100 	strpl	r0, [r0], #-256	; 0x100
     654:	000002a0 	andeq	r0, r0, r0, lsr #5
     658:	000002ac 	andeq	r0, r0, ip, lsr #5
     65c:	01740003 	cmneq	r4, r3
     660:	0002ac9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
     664:	0002b800 	andeq	fp, r2, r0, lsl #16
     668:	54000100 	strpl	r0, [r0], #-256	; 0x100
     66c:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
     670:	000002c4 	andeq	r0, r0, r4, asr #5
     674:	01740003 	cmneq	r4, r3
     678:	0002c49f 	muleq	r2, pc, r4	; <UNPREDICTABLE>
     67c:	00049800 	andeq	r9, r4, r0, lsl #16
     680:	54000100 	strpl	r0, [r0], #-256	; 0x100
     684:	00000498 	muleq	r0, r8, r4
     688:	000004a4 	andeq	r0, r0, r4, lsr #9
     68c:	01740003 	cmneq	r4, r3
     690:	0004a49f 	muleq	r4, pc, r4	; <UNPREDICTABLE>
     694:	0004d000 	andeq	sp, r4, r0
     698:	54000100 	strpl	r0, [r0], #-256	; 0x100
     69c:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     6a0:	000004dc 	ldrdeq	r0, [r0], -ip
     6a4:	dc500001 	mrrcle	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     6a8:	e4000004 	str	r0, [r0], #-4
     6ac:	03000004 	movweq	r0, #4
     6b0:	9f017400 	svcls	0x00017400
	...
     6bc:	00000288 	andeq	r0, r0, r8, lsl #5
     6c0:	000004e4 	andeq	r0, r0, r4, ror #9
     6c4:	e4580001 	ldrb	r0, [r8], #-1
     6c8:	f8000004 			; <UNDEFINED> instruction: 0xf8000004
     6cc:	0a000004 	beq	6e4 <_start-0x791c>
     6d0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     6d4:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
     6d8:	009f1c31 	addseq	r1, pc, r1, lsr ip	; <UNPREDICTABLE>
     6dc:	00000000 	andeq	r0, r0, r0
     6e0:	cc000000 	stcgt	0, cr0, [r0], {-0}
     6e4:	d0000003 	andle	r0, r0, r3
     6e8:	01000003 	tsteq	r0, r3
     6ec:	03f05000 	mvnseq	r5, #0
     6f0:	03f40000 	mvnseq	r0, #0
     6f4:	00010000 	andeq	r0, r1, r0
     6f8:	00041450 	andeq	r1, r4, r0, asr r4
     6fc:	00041800 	andeq	r1, r4, r0, lsl #16
     700:	50000100 	andpl	r0, r0, r0, lsl #2
     704:	00000438 	andeq	r0, r0, r8, lsr r4
     708:	0000043c 	andeq	r0, r0, ip, lsr r4
     70c:	44500001 	ldrbmi	r0, [r0], #-1
     710:	48000004 	stmdami	r0, {r2}
     714:	01000004 	tsteq	r0, r4
     718:	04685000 	strbteq	r5, [r8], #-0
     71c:	046c0000 	strbteq	r0, [ip], #-0
     720:	00010000 	andeq	r0, r1, r0
     724:	00049050 	andeq	r9, r4, r0, asr r0
     728:	0004b800 	andeq	fp, r4, r0, lsl #16
     72c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     738:	000002cc 	andeq	r0, r0, ip, asr #5
     73c:	000002d4 	ldrdeq	r0, [r0], -r4
     740:	9f300002 	svcls	0x00300002
     744:	000002d4 	ldrdeq	r0, [r0], -r4
     748:	000002d8 	ldrdeq	r0, [r0], -r8
     74c:	e4570001 	ldrb	r0, [r7], #-1
     750:	b8000002 	stmdalt	r0, {r1}
     754:	01000004 	tsteq	r0, r4
     758:	00005700 	andeq	r5, r0, r0, lsl #14
	...
     764:	000c0000 	andeq	r0, ip, r0
     768:	00010000 	andeq	r0, r1, r0
     76c:	00000c50 	andeq	r0, r0, r0, asr ip
     770:	00002000 	andeq	r2, r0, r0
     774:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     780:	00000034 	andeq	r0, r0, r4, lsr r0
     784:	0000003c 	andeq	r0, r0, ip, lsr r0
     788:	04730003 	ldrbteq	r0, [r3], #-3
     78c:	00003c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
     790:	00004700 	andeq	r4, r0, r0, lsl #14
     794:	53000100 	movwpl	r0, #256	; 0x100
	...
     7a0:	00000048 	andeq	r0, r0, r8, asr #32
     7a4:	00000074 	andeq	r0, r0, r4, ror r0
     7a8:	74500001 	ldrbvc	r0, [r0], #-1
     7ac:	83000000 	movwhi	r0, #0
     7b0:	03000000 	movweq	r0, #0
     7b4:	9f787300 	svcls	0x00787300
	...
     7c0:	00008810 	andeq	r8, r0, r0, lsl r8
     7c4:	00008814 	andeq	r8, r0, r4, lsl r8
     7c8:	9f300002 	svcls	0x00300002
     7cc:	00008814 	andeq	r8, r0, r4, lsl r8
     7d0:	00008818 	andeq	r8, r0, r8, lsl r8
     7d4:	00500001 	subseq	r0, r0, r1
     7d8:	00000000 	andeq	r0, r0, r0
     7dc:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     7e0:	2c000088 	stccs	0, cr0, [r0], {136}	; 0x88
     7e4:	02000088 	andeq	r0, r0, #136	; 0x88
     7e8:	2c9f3000 	ldccs	0, cr3, [pc], {0}
     7ec:	30000088 	andcc	r0, r0, r8, lsl #1
     7f0:	01000088 	smlabbeq	r0, r8, r0, r0
     7f4:	88345300 	ldmdahi	r4!, {r8, r9, ip, lr}
     7f8:	883c0000 	ldmdahi	ip!, {}	; <UNPREDICTABLE>
     7fc:	00010000 	andeq	r0, r1, r0
     800:	00000053 	andeq	r0, r0, r3, asr r0
	...
     80c:	00000400 	andeq	r0, r0, r0, lsl #8
     810:	50000100 	andpl	r0, r0, r0, lsl #2
     814:	00000004 	andeq	r0, r0, r4
     818:	0000000c 	andeq	r0, r0, ip
     81c:	0c530001 	mrrceq	0, 0, r0, r3, cr1
     820:	10000000 	andne	r0, r0, r0
     824:	01000000 	mrseq	r0, (UNDEF: 0)
     828:	00105000 	andseq	r5, r0, r0
     82c:	001c0000 	andseq	r0, ip, r0
     830:	00010000 	andeq	r0, r1, r0
     834:	00000053 	andeq	r0, r0, r3, asr r0
     838:	00000000 	andeq	r0, r0, r0
     83c:	00003c00 	andeq	r3, r0, r0, lsl #24
     840:	00004700 	andeq	r4, r0, r0, lsl #14
     844:	50000100 	andpl	r0, r0, r0, lsl #2
     848:	00000047 	andeq	r0, r0, r7, asr #32
     84c:	00000060 	andeq	r0, r0, r0, rrx
     850:	00550001 	subseq	r0, r5, r1
     854:	00000000 	andeq	r0, r0, r0
     858:	50000000 	andpl	r0, r0, r0
     85c:	54000000 	strpl	r0, [r0], #-0
     860:	01000000 	mrseq	r0, (UNDEF: 0)
     864:	00005000 	andeq	r5, r0, r0
     868:	00000000 	andeq	r0, r0, r0
     86c:	00600000 	rsbeq	r0, r0, r0
     870:	006c0000 	rsbeq	r0, ip, r0
     874:	00010000 	andeq	r0, r1, r0
     878:	00006c50 	andeq	r6, r0, r0, asr ip
     87c:	00007400 	andeq	r7, r0, r0, lsl #8
     880:	f3000400 	vshl.u8	d0, d0, d0
     884:	009f5001 	addseq	r5, pc, r1
     888:	00000000 	andeq	r0, r0, r0
     88c:	74000000 	strvc	r0, [r0], #-0
     890:	80000000 	andhi	r0, r0, r0
     894:	01000000 	mrseq	r0, (UNDEF: 0)
     898:	00805000 	addeq	r5, r0, r0
     89c:	00880000 	addeq	r0, r8, r0
     8a0:	00040000 	andeq	r0, r4, r0
     8a4:	9f5001f3 	svcls	0x005001f3
	...
     8b4:	00000017 	andeq	r0, r0, r7, lsl r0
     8b8:	17500001 	ldrbne	r0, [r0, -r1]
     8bc:	30000000 	andcc	r0, r0, r0
     8c0:	04000000 	streq	r0, [r0], #-0
     8c4:	5001f300 	andpl	pc, r1, r0, lsl #6
     8c8:	0000309f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     8cc:	00004400 	andeq	r4, r0, r0, lsl #8
     8d0:	50000100 	andpl	r0, r0, r0, lsl #2
     8d4:	00000044 	andeq	r0, r0, r4, asr #32
     8d8:	00000074 	andeq	r0, r0, r4, ror r0
     8dc:	01f30004 	mvnseq	r0, r4
     8e0:	00009f50 	andeq	r9, r0, r0, asr pc
     8e4:	00000000 	andeq	r0, r0, r0
     8e8:	00400000 	subeq	r0, r0, r0
     8ec:	00580000 	subseq	r0, r8, r0
     8f0:	00010000 	andeq	r0, r1, r0
     8f4:	00005856 	andeq	r5, r0, r6, asr r8
     8f8:	00007400 	andeq	r7, r0, r0, lsl #8
     8fc:	f3000900 	vmls.i8	d0, d0, d0
     900:	07235001 	streq	r5, [r3, -r1]!
     904:	9f1af809 	svcls	0x001af809
	...
     910:	00000074 	andeq	r0, r0, r4, ror r0
     914:	0000008b 	andeq	r0, r0, fp, lsl #1
     918:	8b500001 	blhi	1400924 <__bss_end__+0x13f6044>
     91c:	a4000000 	strge	r0, [r0], #-0
     920:	04000000 	streq	r0, [r0], #-0
     924:	5001f300 	andpl	pc, r1, r0, lsl #6
     928:	0000a49f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
     92c:	0000af00 	andeq	sl, r0, r0, lsl #30
     930:	50000100 	andpl	r0, r0, r0, lsl #2
     934:	000000af 	andeq	r0, r0, pc, lsr #1
     938:	000000b4 	strheq	r0, [r0], -r4
     93c:	01f30004 	mvnseq	r0, r4
     940:	00b49f50 	adcseq	r9, r4, r0, asr pc
     944:	00bf0000 	adcseq	r0, pc, r0
     948:	00010000 	andeq	r0, r1, r0
     94c:	0000bf50 	andeq	fp, r0, r0, asr pc
     950:	0000d800 	andeq	sp, r0, r0, lsl #16
     954:	f3000400 	vshl.u8	d0, d0, d0
     958:	d89f5001 	ldmle	pc, {r0, ip, lr}	; <UNPREDICTABLE>
     95c:	f7000000 			; <UNDEFINED> instruction: 0xf7000000
     960:	01000000 	mrseq	r0, (UNDEF: 0)
     964:	00f75000 	rscseq	r5, r7, r0
     968:	01100000 	tsteq	r0, r0
     96c:	00040000 	andeq	r0, r4, r0
     970:	9f5001f3 	svcls	0x005001f3
	...
     97c:	00000074 	andeq	r0, r0, r4, ror r0
     980:	0000008b 	andeq	r0, r0, fp, lsl #1
     984:	8b510001 	blhi	1440990 <__bss_end__+0x14360b0>
     988:	a4000000 	strge	r0, [r0], #-0
     98c:	04000000 	streq	r0, [r0], #-0
     990:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     994:	0000a49f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
     998:	0000af00 	andeq	sl, r0, r0, lsl #30
     99c:	51000100 	mrspl	r0, (UNDEF: 16)
     9a0:	000000af 	andeq	r0, r0, pc, lsr #1
     9a4:	000000b4 	strheq	r0, [r0], -r4
     9a8:	01f30004 	mvnseq	r0, r4
     9ac:	00b49f51 	adcseq	r9, r4, r1, asr pc
     9b0:	00bf0000 	adcseq	r0, pc, r0
     9b4:	00010000 	andeq	r0, r1, r0
     9b8:	0000bf51 	andeq	fp, r0, r1, asr pc
     9bc:	0000d800 	andeq	sp, r0, r0, lsl #16
     9c0:	f3000400 	vshl.u8	d0, d0, d0
     9c4:	d89f5101 	ldmle	pc, {r0, r8, ip, lr}	; <UNPREDICTABLE>
     9c8:	ec000000 	stc	0, cr0, [r0], {-0}
     9cc:	01000000 	mrseq	r0, (UNDEF: 0)
     9d0:	00ec5100 	rsceq	r5, ip, r0, lsl #2
     9d4:	00f00000 	rscseq	r0, r0, r0
     9d8:	00040000 	andeq	r0, r4, r0
     9dc:	9f1f0071 	svcls	0x001f0071
     9e0:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     9e4:	00000110 	andeq	r0, r0, r0, lsl r1
     9e8:	01f30004 	mvnseq	r0, r4
     9ec:	00009f51 	andeq	r9, r0, r1, asr pc
     9f0:	00000000 	andeq	r0, r0, r0
     9f4:	00e00000 	rsceq	r0, r0, r0
     9f8:	00e40000 	rsceq	r0, r4, r0
     9fc:	00010000 	andeq	r0, r1, r0
     a00:	0000e452 	andeq	lr, r0, r2, asr r4
     a04:	0000f000 	andeq	pc, r0, r0
     a08:	03000500 	movweq	r0, #1280	; 0x500
     a0c:	0000a8b8 			; <UNDEFINED> instruction: 0x0000a8b8
     a10:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     a14:	000000f7 	strdeq	r0, [r0], -r7
     a18:	00510001 	subseq	r0, r1, r1
     a1c:	00000000 	andeq	r0, r0, r0
     a20:	94000000 	strls	r0, [r0], #-0
     a24:	ab000001 	blge	a30 <_start-0x75d0>
     a28:	01000001 	tsteq	r0, r1
     a2c:	01ab5000 			; <UNDEFINED> instruction: 0x01ab5000
     a30:	01c40000 	biceq	r0, r4, r0
     a34:	00040000 	andeq	r0, r4, r0
     a38:	9f5001f3 	svcls	0x005001f3
     a3c:	000001c4 	andeq	r0, r0, r4, asr #3
     a40:	000001e8 	andeq	r0, r0, r8, ror #3
     a44:	00500001 	subseq	r0, r0, r1
	...
     a50:	04000000 	streq	r0, [r0], #-0
     a54:	01000000 	mrseq	r0, (UNDEF: 0)
     a58:	00045000 	andeq	r5, r4, r0
     a5c:	00080000 	andeq	r0, r8, r0
     a60:	00040000 	andeq	r0, r4, r0
     a64:	9f5001f3 	svcls	0x005001f3
	...
     a70:	00000068 	andeq	r0, r0, r8, rrx
     a74:	00000074 	andeq	r0, r0, r4, ror r0
     a78:	74500001 	ldrbvc	r0, [r0], #-1
     a7c:	77000000 	strvc	r0, [r0, -r0]
     a80:	01000000 	mrseq	r0, (UNDEF: 0)
     a84:	00775100 	rsbseq	r5, r7, r0, lsl #2
     a88:	00800000 	addeq	r0, r0, r0
     a8c:	00040000 	andeq	r0, r4, r0
     a90:	9f5001f3 	svcls	0x005001f3
	...
     a9c:	00000080 	andeq	r0, r0, r0, lsl #1
     aa0:	00000097 	muleq	r0, r7, r0
     aa4:	97500001 	ldrbls	r0, [r0, -r1]
     aa8:	e4000000 	str	r0, [r0], #-0
     aac:	01000000 	mrseq	r0, (UNDEF: 0)
     ab0:	00e45400 	rsceq	r5, r4, r0, lsl #8
     ab4:	00e80000 	rsceq	r0, r8, r0
     ab8:	00010000 	andeq	r0, r1, r0
     abc:	0000e850 	andeq	lr, r0, r0, asr r8
     ac0:	00010400 	andeq	r0, r1, r0, lsl #8
     ac4:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     ad0:	00000104 	andeq	r0, r0, r4, lsl #2
     ad4:	00000113 	andeq	r0, r0, r3, lsl r1
     ad8:	13500001 	cmpne	r0, #1
     adc:	2c000001 	stccs	0, cr0, [r0], {1}
     ae0:	04000001 	streq	r0, [r0], #-1
     ae4:	5001f300 	andpl	pc, r1, r0, lsl #6
     ae8:	00012c9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
     aec:	00013b00 	andeq	r3, r1, r0, lsl #22
     af0:	50000100 	andpl	r0, r0, r0, lsl #2
     af4:	0000013b 	andeq	r0, r0, fp, lsr r1
     af8:	00000160 	andeq	r0, r0, r0, ror #2
     afc:	01f30004 	mvnseq	r0, r4
     b00:	01609f50 	cmneq	r0, r0, asr pc
     b04:	01800000 	orreq	r0, r0, r0
     b08:	00010000 	andeq	r0, r1, r0
     b0c:	00018050 	andeq	r8, r1, r0, asr r0
     b10:	00019c00 	andeq	r9, r1, r0, lsl #24
     b14:	f3000400 	vshl.u8	d0, d0, d0
     b18:	009f5001 	addseq	r5, pc, r1
     b1c:	00000000 	andeq	r0, r0, r0
     b20:	30000000 	andcc	r0, r0, r0
     b24:	3b000001 	blcc	b30 <_start-0x74d0>
     b28:	01000001 	tsteq	r0, r1
     b2c:	01605300 	cmneq	r0, r0, lsl #6
     b30:	01840000 	orreq	r0, r4, r0
     b34:	00010000 	andeq	r0, r1, r0
     b38:	00000053 	andeq	r0, r0, r3, asr r0
     b3c:	00000000 	andeq	r0, r0, r0
     b40:	0001a800 	andeq	sl, r1, r0, lsl #16
     b44:	0001b400 	andeq	fp, r1, r0, lsl #8
     b48:	50000100 	andpl	r0, r0, r0, lsl #2
     b4c:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     b50:	000001d7 	ldrdeq	r0, [r0], -r7
     b54:	f0500001 			; <UNDEFINED> instruction: 0xf0500001
     b58:	20000001 	andcs	r0, r0, r1
     b5c:	01000002 	tsteq	r0, r2
     b60:	00005000 	andeq	r5, r0, r0
     b64:	00000000 	andeq	r0, r0, r0
     b68:	02300000 	eorseq	r0, r0, #0
     b6c:	023f0000 	eorseq	r0, pc, #0
     b70:	00010000 	andeq	r0, r1, r0
     b74:	00023f50 	andeq	r3, r2, r0, asr pc
     b78:	00027c00 	andeq	r7, r2, r0, lsl #24
     b7c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     b88:	00000230 	andeq	r0, r0, r0, lsr r2
     b8c:	0000023f 	andeq	r0, r0, pc, lsr r2
     b90:	3f510001 	svccc	0x00510001
     b94:	7c000002 	stcvc	0, cr0, [r0], {2}
     b98:	01000002 	tsteq	r0, r2
     b9c:	00005500 	andeq	r5, r0, r0, lsl #10
     ba0:	00000000 	andeq	r0, r0, r0
     ba4:	02440000 	subeq	r0, r4, #0
     ba8:	02640000 	rsbeq	r0, r4, #0
     bac:	00010000 	andeq	r0, r1, r0
     bb0:	00026450 	andeq	r6, r2, r0, asr r4
     bb4:	00027c00 	andeq	r7, r2, r0, lsl #24
     bb8:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     bc4:	0000027c 	andeq	r0, r0, ip, ror r2
     bc8:	0000028c 	andeq	r0, r0, ip, lsl #5
     bcc:	8c500001 	mrrchi	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     bd0:	d4000002 	strle	r0, [r0], #-2
     bd4:	04000002 	streq	r0, [r0], #-2
     bd8:	5001f300 	andpl	pc, r1, r0, lsl #6
     bdc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     be0:	00000000 	andeq	r0, r0, r0
     be4:	00033c00 	andeq	r3, r3, r0, lsl #24
     be8:	00034000 	andeq	r4, r3, r0
     bec:	50000100 	andpl	r0, r0, r0, lsl #2
     bf0:	00000340 	andeq	r0, r0, r0, asr #6
     bf4:	000003a8 	andeq	r0, r0, r8, lsr #7
     bf8:	00560001 	subseq	r0, r6, r1
     bfc:	00000000 	andeq	r0, r0, r0
     c00:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     c04:	5b000003 	blpl	c18 <_start-0x73e8>
     c08:	01000003 	tsteq	r0, r3
     c0c:	035b5000 	cmpeq	fp, #0
     c10:	03880000 	orreq	r0, r8, #0
     c14:	00010000 	andeq	r0, r1, r0
     c18:	00038855 	andeq	r8, r3, r5, asr r8
     c1c:	00038c00 	andeq	r8, r3, r0, lsl #24
     c20:	50000100 	andpl	r0, r0, r0, lsl #2
     c24:	0000038c 	andeq	r0, r0, ip, lsl #7
     c28:	000003a8 	andeq	r0, r0, r8, lsr #7
     c2c:	00550001 	subseq	r0, r5, r1
     c30:	00000000 	andeq	r0, r0, r0
     c34:	4c000000 	stcmi	0, cr0, [r0], {-0}
     c38:	a8000003 	stmdage	r0, {r0, r1}
     c3c:	01000003 	tsteq	r0, r3
     c40:	00005700 	andeq	r5, r0, r0, lsl #14
     c44:	00000000 	andeq	r0, r0, r0
     c48:	04400000 	strbeq	r0, [r0], #-0
     c4c:	04470000 	strbeq	r0, [r7], #-0
     c50:	00010000 	andeq	r0, r1, r0
     c54:	00044750 	andeq	r4, r4, r0, asr r7
     c58:	00046c00 	andeq	r6, r4, r0, lsl #24
     c5c:	f3000400 	vshl.u8	d0, d0, d0
     c60:	009f5001 	addseq	r5, pc, r1
     c64:	00000000 	andeq	r0, r0, r0
     c68:	6c000000 	stcvs	0, cr0, [r0], {-0}
     c6c:	73000004 	movwvc	r0, #4
     c70:	01000004 	tsteq	r0, r4
     c74:	04735000 	ldrbteq	r5, [r3], #-0
     c78:	04980000 	ldreq	r0, [r8], #0
     c7c:	00040000 	andeq	r0, r4, r0
     c80:	9f5001f3 	svcls	0x005001f3
	...
     c90:	00000018 	andeq	r0, r0, r8, lsl r0
     c94:	18500001 	ldmdane	r0, {r0}^
     c98:	54000000 	strpl	r0, [r0], #-0
     c9c:	04000001 	streq	r0, [r0], #-1
     ca0:	5001f300 	andpl	pc, r1, r0, lsl #6
     ca4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     cb0:	00001c00 	andeq	r1, r0, r0, lsl #24
     cb4:	51000100 	mrspl	r0, (UNDEF: 16)
     cb8:	0000001c 	andeq	r0, r0, ip, lsl r0
     cbc:	00000154 	andeq	r0, r0, r4, asr r1
     cc0:	01f30004 	mvnseq	r0, r4
     cc4:	00009f51 	andeq	r9, r0, r1, asr pc
     cc8:	00000000 	andeq	r0, r0, r0
     ccc:	00100000 	andseq	r0, r0, r0
     cd0:	01340000 	teqeq	r4, r0
     cd4:	00010000 	andeq	r0, r1, r0
     cd8:	00000055 	andeq	r0, r0, r5, asr r0
     cdc:	00000000 	andeq	r0, r0, r0
     ce0:	00001000 	andeq	r1, r0, r0
     ce4:	00003400 	andeq	r3, r0, r0, lsl #8
     ce8:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     cec:	00000034 	andeq	r0, r0, r4, lsr r0
     cf0:	00000134 	andeq	r0, r0, r4, lsr r1
     cf4:	34580001 	ldrbcc	r0, [r8], #-1
     cf8:	54000001 	strpl	r0, [r0], #-1
     cfc:	01000001 	tsteq	r0, r1
     d00:	00005500 	andeq	r5, r0, r0, lsl #10
     d04:	00000000 	andeq	r0, r0, r0
     d08:	00140000 	andseq	r0, r4, r0
     d0c:	01340000 	teqeq	r4, r0
     d10:	00010000 	andeq	r0, r1, r0
     d14:	00000055 	andeq	r0, r0, r5, asr r0
     d18:	00000000 	andeq	r0, r0, r0
     d1c:	00002000 	andeq	r2, r0, r0
     d20:	00013400 	andeq	r3, r1, r0, lsl #8
     d24:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
     d30:	00000024 	andeq	r0, r0, r4, lsr #32
     d34:	00000028 	andeq	r0, r0, r8, lsr #32
     d38:	00530001 	subseq	r0, r3, r1
     d3c:	00000000 	andeq	r0, r0, r0
     d40:	34000000 	strcc	r0, [r0], #-0
     d44:	54000000 	strpl	r0, [r0], #-0
     d48:	01000000 	mrseq	r0, (UNDEF: 0)
     d4c:	00545800 	subseq	r5, r4, r0, lsl #16
     d50:	01340000 	teqeq	r4, r0
     d54:	00050000 	andeq	r0, r5, r0
     d58:	24310075 	ldrtcs	r0, [r1], #-117	; 0x75
     d5c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     d60:	00000000 	andeq	r0, r0, r0
     d64:	00003400 	andeq	r3, r0, r0, lsl #8
     d68:	00003c00 	andeq	r3, r0, r0, lsl #24
     d6c:	77000500 	strvc	r0, [r0, -r0, lsl #10]
     d70:	9f1a3100 	svcls	0x001a3100
     d74:	0000003c 	andeq	r0, r0, ip, lsr r0
     d78:	0000003f 	andeq	r0, r0, pc, lsr r0
     d7c:	3f510001 	svccc	0x00510001
     d80:	54000000 	strpl	r0, [r0], #-0
     d84:	05000001 	streq	r0, [r0, #-1]
     d88:	31007700 	tstcc	r0, r0, lsl #14
     d8c:	00009f1a 	andeq	r9, r0, sl, lsl pc
     d90:	00000000 	andeq	r0, r0, r0
     d94:	00400000 	subeq	r0, r0, r0
     d98:	00540000 	subseq	r0, r4, r0
     d9c:	00010000 	andeq	r0, r1, r0
     da0:	00005458 	andeq	r5, r0, r8, asr r4
     da4:	00013400 	andeq	r3, r1, r0, lsl #8
     da8:	75000500 	strvc	r0, [r0, #-1280]	; 0x500
     dac:	9f243100 	svcls	0x00243100
	...
     db8:	00000044 	andeq	r0, r0, r4, asr #32
     dbc:	00000048 	andeq	r0, r0, r8, asr #32
     dc0:	00530001 	subseq	r0, r3, r1
     dc4:	00000000 	andeq	r0, r0, r0
     dc8:	54000000 	strpl	r0, [r0], #-0
     dcc:	74000000 	strvc	r0, [r0], #-0
     dd0:	01000000 	mrseq	r0, (UNDEF: 0)
     dd4:	00745800 	rsbseq	r5, r4, r0, lsl #16
     dd8:	01340000 	teqeq	r4, r0
     ddc:	00080000 	andeq	r0, r8, r0
     de0:	24310075 	ldrtcs	r0, [r1], #-117	; 0x75
     de4:	9f220075 	svcls	0x00220075
	...
     df0:	00000060 	andeq	r0, r0, r0, rrx
     df4:	00000074 	andeq	r0, r0, r4, ror r0
     df8:	74580001 	ldrbvc	r0, [r8], #-1
     dfc:	34000000 	strcc	r0, [r0], #-0
     e00:	08000001 	stmdaeq	r0, {r0}
     e04:	31007500 	tstcc	r0, r0, lsl #10
     e08:	22007524 	andcs	r7, r0, #36, 10	; 0x9000000
     e0c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     e10:	00000000 	andeq	r0, r0, r0
     e14:	00006400 	andeq	r6, r0, r0, lsl #8
     e18:	00006800 	andeq	r6, r0, r0, lsl #16
     e1c:	53000100 	movwpl	r0, #256	; 0x100
	...
     e28:	00000074 	andeq	r0, r0, r4, ror r0
     e2c:	00000094 	muleq	r0, r4, r0
     e30:	94580001 	ldrbls	r0, [r8], #-1
     e34:	34000000 	strcc	r0, [r0], #-0
     e38:	05000001 	streq	r0, [r0, #-1]
     e3c:	32007500 	andcc	r7, r0, #0, 10
     e40:	00009f24 	andeq	r9, r0, r4, lsr #30
     e44:	00000000 	andeq	r0, r0, r0
     e48:	00800000 	addeq	r0, r0, r0
     e4c:	00940000 	addseq	r0, r4, r0
     e50:	00010000 	andeq	r0, r1, r0
     e54:	00009458 	andeq	r9, r0, r8, asr r4
     e58:	00013400 	andeq	r3, r1, r0, lsl #8
     e5c:	75000500 	strvc	r0, [r0, #-1280]	; 0x500
     e60:	9f243200 	svcls	0x00243200
	...
     e6c:	00000084 	andeq	r0, r0, r4, lsl #1
     e70:	00000088 	andeq	r0, r0, r8, lsl #1
     e74:	00530001 	subseq	r0, r3, r1
     e78:	00000000 	andeq	r0, r0, r0
     e7c:	94000000 	strls	r0, [r0], #-0
     e80:	b4000000 	strlt	r0, [r0], #-0
     e84:	01000000 	mrseq	r0, (UNDEF: 0)
     e88:	00b45800 	adcseq	r5, r4, r0, lsl #16
     e8c:	01340000 	teqeq	r4, r0
     e90:	00080000 	andeq	r0, r8, r0
     e94:	24320075 	ldrtcs	r0, [r2], #-117	; 0x75
     e98:	9f220075 	svcls	0x00220075
	...
     ea4:	000000a0 	andeq	r0, r0, r0, lsr #1
     ea8:	000000b4 	strheq	r0, [r0], -r4
     eac:	b4580001 	ldrblt	r0, [r8], #-1
     eb0:	34000000 	strcc	r0, [r0], #-0
     eb4:	08000001 	stmdaeq	r0, {r0}
     eb8:	32007500 	andcc	r7, r0, #0, 10
     ebc:	22007524 	andcs	r7, r0, #36, 10	; 0x9000000
     ec0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     ec4:	00000000 	andeq	r0, r0, r0
     ec8:	0000a400 	andeq	sl, r0, r0, lsl #8
     ecc:	0000a800 	andeq	sl, r0, r0, lsl #16
     ed0:	53000100 	movwpl	r0, #256	; 0x100
	...
     edc:	000000b4 	strheq	r0, [r0], -r4
     ee0:	000000d4 	ldrdeq	r0, [r0], -r4
     ee4:	d4580001 	ldrble	r0, [r8], #-1
     ee8:	34000000 	strcc	r0, [r0], #-0
     eec:	0a000001 	beq	ef8 <_start-0x7108>
     ef0:	32007500 	andcc	r7, r0, #0, 10
     ef4:	31007524 	tstcc	r0, r4, lsr #10
     ef8:	009f2224 	addseq	r2, pc, r4, lsr #4
     efc:	00000000 	andeq	r0, r0, r0
     f00:	c0000000 	andgt	r0, r0, r0
     f04:	d4000000 	strle	r0, [r0], #-0
     f08:	01000000 	mrseq	r0, (UNDEF: 0)
     f0c:	00d45800 	sbcseq	r5, r4, r0, lsl #16
     f10:	01340000 	teqeq	r4, r0
     f14:	000a0000 	andeq	r0, sl, r0
     f18:	24320075 	ldrtcs	r0, [r2], #-117	; 0x75
     f1c:	24310075 	ldrtcs	r0, [r1], #-117	; 0x75
     f20:	00009f22 	andeq	r9, r0, r2, lsr #30
     f24:	00000000 	andeq	r0, r0, r0
     f28:	00c40000 	sbceq	r0, r4, r0
     f2c:	00c80000 	sbceq	r0, r8, r0
     f30:	00010000 	andeq	r0, r1, r0
     f34:	00000053 	andeq	r0, r0, r3, asr r0
     f38:	00000000 	andeq	r0, r0, r0
     f3c:	0000d400 	andeq	sp, r0, r0, lsl #8
     f40:	0000f400 	andeq	pc, r0, r0, lsl #8
     f44:	58000100 	stmdapl	r0, {r8}
     f48:	000000f4 	strdeq	r0, [r0], -r4
     f4c:	00000134 	andeq	r0, r0, r4, lsr r1
     f50:	0075000d 	rsbseq	r0, r5, sp
     f54:	00752432 	rsbseq	r2, r5, r2, lsr r4
     f58:	75222431 	strvc	r2, [r2, #-1073]!	; 0x431
     f5c:	009f2200 	addseq	r2, pc, r0, lsl #4
     f60:	00000000 	andeq	r0, r0, r0
     f64:	e0000000 	and	r0, r0, r0
     f68:	f4000000 	vst4.8	{d0-d3}, [r0], r0
     f6c:	01000000 	mrseq	r0, (UNDEF: 0)
     f70:	00f45800 	rscseq	r5, r4, r0, lsl #16
     f74:	01340000 	teqeq	r4, r0
     f78:	000d0000 	andeq	r0, sp, r0
     f7c:	24320075 	ldrtcs	r0, [r2], #-117	; 0x75
     f80:	24310075 	ldrtcs	r0, [r1], #-117	; 0x75
     f84:	22007522 	andcs	r7, r0, #142606336	; 0x8800000
     f88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     f8c:	00000000 	andeq	r0, r0, r0
     f90:	0000e400 	andeq	lr, r0, r0, lsl #8
     f94:	0000e800 	andeq	lr, r0, r0, lsl #16
     f98:	53000100 	movwpl	r0, #256	; 0x100
	...
     fa4:	000000f4 	strdeq	r0, [r0], -r4
     fa8:	00000114 	andeq	r0, r0, r4, lsl r1
     fac:	14580001 	ldrbne	r0, [r8], #-1
     fb0:	34000001 	strcc	r0, [r0], #-1
     fb4:	05000001 	streq	r0, [r0, #-1]
     fb8:	33007500 	movwcc	r7, #1280	; 0x500
     fbc:	00009f24 	andeq	r9, r0, r4, lsr #30
     fc0:	00000000 	andeq	r0, r0, r0
     fc4:	01000000 	mrseq	r0, (UNDEF: 0)
     fc8:	01140000 	tsteq	r4, r0
     fcc:	00010000 	andeq	r0, r1, r0
     fd0:	00011458 	andeq	r1, r1, r8, asr r4
     fd4:	00013400 	andeq	r3, r1, r0, lsl #8
     fd8:	75000500 	strvc	r0, [r0, #-1280]	; 0x500
     fdc:	9f243300 	svcls	0x00243300
	...
     fe8:	00000104 	andeq	r0, r0, r4, lsl #2
     fec:	00000108 	andeq	r0, r0, r8, lsl #2
     ff0:	00530001 	subseq	r0, r3, r1
     ff4:	00000000 	andeq	r0, r0, r0
     ff8:	14000000 	strne	r0, [r0], #-0
     ffc:	1c000001 	stcne	0, cr0, [r0], {1}
    1000:	06000001 	streq	r0, [r0], -r1
    1004:	08007700 	stmdaeq	r0, {r8, r9, sl, ip, sp, lr}
    1008:	1c9f1a80 	vldmiane	pc, {s2-s129}
    100c:	1f000001 	svcne	0x00000001
    1010:	01000001 	tsteq	r0, r1
    1014:	011f5100 	tsteq	pc, r0, lsl #2
    1018:	01540000 	cmpeq	r4, r0
    101c:	00060000 	andeq	r0, r6, r0
    1020:	80080077 	andhi	r0, r8, r7, ror r0
    1024:	00009f1a 	andeq	r9, r0, sl, lsl pc
    1028:	00000000 	andeq	r0, r0, r0
    102c:	01240000 	teqeq	r4, r0
    1030:	01280000 	teqeq	r8, r0
    1034:	00010000 	andeq	r0, r1, r0
    1038:	00000053 	andeq	r0, r0, r3, asr r0
    103c:	00000000 	andeq	r0, r0, r0
    1040:	00014400 	andeq	r4, r1, r0, lsl #8
    1044:	00014800 	andeq	r4, r1, r0, lsl #16
    1048:	53000100 	movwpl	r0, #256	; 0x100
	...
    1054:	00000154 	andeq	r0, r0, r4, asr r1
    1058:	0000016b 	andeq	r0, r0, fp, ror #2
    105c:	6b500001 	blvs	1401068 <__bss_end__+0x13f6788>
    1060:	d0000001 	andle	r0, r0, r1
    1064:	01000001 	tsteq	r0, r1
    1068:	01d05900 	bicseq	r5, r0, r0, lsl #18
    106c:	030c0000 	movweq	r0, #49152	; 0xc000
    1070:	00040000 	andeq	r0, r4, r0
    1074:	9f5001f3 	svcls	0x005001f3
    1078:	0000030c 	andeq	r0, r0, ip, lsl #6
    107c:	00000314 	andeq	r0, r0, r4, lsl r3
    1080:	14590001 	ldrbne	r0, [r9], #-1
    1084:	1c000003 	stcne	0, cr0, [r0], {3}
    1088:	04000003 	streq	r0, [r0], #-3
    108c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1090:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1094:	00000000 	andeq	r0, r0, r0
    1098:	00015400 	andeq	r5, r1, r0, lsl #8
    109c:	00016b00 	andeq	r6, r1, r0, lsl #22
    10a0:	51000100 	mrspl	r0, (UNDEF: 16)
    10a4:	0000016b 	andeq	r0, r0, fp, ror #2
    10a8:	0000031c 	andeq	r0, r0, ip, lsl r3
    10ac:	00560001 	subseq	r0, r6, r1
    10b0:	00000000 	andeq	r0, r0, r0
    10b4:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    10b8:	98000001 	stmdals	r0, {r0}
    10bc:	01000002 	tsteq	r0, r2
    10c0:	00005800 	andeq	r5, r0, r0, lsl #16
    10c4:	00000000 	andeq	r0, r0, r0
    10c8:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
    10cc:	02d00000 	sbcseq	r0, r0, #0
    10d0:	00010000 	andeq	r0, r1, r0
    10d4:	00000054 	andeq	r0, r0, r4, asr r0
    10d8:	00000000 	andeq	r0, r0, r0
    10dc:	0001ac00 	andeq	sl, r1, r0, lsl #24
    10e0:	0002d000 	andeq	sp, r2, r0
    10e4:	74000500 	strvc	r0, [r0], #-1280	; 0x500
    10e8:	9f253100 	svcls	0x00253100
	...
    10f4:	000001ac 	andeq	r0, r0, ip, lsr #3
    10f8:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    10fc:	9f300002 	svcls	0x00300002
    1100:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1104:	0000030c 	andeq	r0, r0, ip, lsl #6
    1108:	14590001 	ldrbne	r0, [r9], #-1
    110c:	1c000003 	stcne	0, cr0, [r0], {3}
    1110:	01000003 	tsteq	r0, r3
    1114:	00005900 	andeq	r5, r0, r0, lsl #18
    1118:	00000000 	andeq	r0, r0, r0
    111c:	01680000 	cmneq	r8, r0
    1120:	016b0000 	cmneq	fp, r0
    1124:	00010000 	andeq	r0, r1, r0
    1128:	00016b51 	andeq	r6, r1, r1, asr fp
    112c:	00031c00 	andeq	r1, r3, r0, lsl #24
    1130:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    113c:	00000170 	andeq	r0, r0, r0, ror r1
    1140:	000001ac 	andeq	r0, r0, ip, lsr #3
    1144:	0c540001 	mrrceq	0, 0, r0, r4, cr1
    1148:	14000003 	strne	r0, [r0], #-3
    114c:	01000003 	tsteq	r0, r3
    1150:	00005400 	andeq	r5, r0, r0, lsl #8
    1154:	00000000 	andeq	r0, r0, r0
    1158:	01a80000 			; <UNDEFINED> instruction: 0x01a80000
    115c:	01c40000 	biceq	r0, r4, r0
    1160:	00010000 	andeq	r0, r1, r0
    1164:	00000058 	andeq	r0, r0, r8, asr r0
    1168:	00000000 	andeq	r0, r0, r0
    116c:	0001b000 	andeq	fp, r1, r0
    1170:	0001cb00 	andeq	ip, r1, r0, lsl #22
    1174:	52000100 	andpl	r0, r0, #0, 2
    1178:	000001cb 	andeq	r0, r0, fp, asr #3
    117c:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1180:	00740008 	rsbseq	r0, r4, r8
    1184:	00742531 	rsbseq	r2, r4, r1, lsr r5
    1188:	00009f22 	andeq	r9, r0, r2, lsr #30
    118c:	00000000 	andeq	r0, r0, r0
    1190:	01b00000 	movseq	r0, r0
    1194:	01c40000 	biceq	r0, r4, r0
    1198:	00010000 	andeq	r0, r1, r0
    119c:	00000058 	andeq	r0, r0, r8, asr r0
    11a0:	00000000 	andeq	r0, r0, r0
    11a4:	0001b400 	andeq	fp, r1, r0, lsl #8
    11a8:	0001b800 	andeq	fp, r1, r0, lsl #16
    11ac:	53000100 	movwpl	r0, #256	; 0x100
	...
    11b8:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    11bc:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    11c0:	00540001 	subseq	r0, r4, r1
    11c4:	00000000 	andeq	r0, r0, r0
    11c8:	d0000000 	andle	r0, r0, r0
    11cc:	e4000001 	str	r0, [r0], #-1
    11d0:	01000001 	tsteq	r0, r1
    11d4:	00005800 	andeq	r5, r0, r0, lsl #16
    11d8:	00000000 	andeq	r0, r0, r0
    11dc:	01d40000 	bicseq	r0, r4, r0
    11e0:	01d80000 	bicseq	r0, r8, r0
    11e4:	00010000 	andeq	r0, r1, r0
    11e8:	00000053 	andeq	r0, r0, r3, asr r0
    11ec:	00000000 	andeq	r0, r0, r0
    11f0:	0001f400 	andeq	pc, r1, r0, lsl #8
    11f4:	0002d000 	andeq	sp, r2, r0
    11f8:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    1204:	000001f4 	strdeq	r0, [r0], -r4
    1208:	00000208 	andeq	r0, r0, r8, lsl #4
    120c:	00580001 	subseq	r0, r8, r1
    1210:	00000000 	andeq	r0, r0, r0
    1214:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    1218:	fc000001 	stc2	0, cr0, [r0], {1}
    121c:	01000001 	tsteq	r0, r1
    1220:	00005300 	andeq	r5, r0, r0, lsl #6
    1224:	00000000 	andeq	r0, r0, r0
    1228:	02180000 	andseq	r0, r8, #0
    122c:	02d00000 	sbcseq	r0, r0, #0
    1230:	00010000 	andeq	r0, r1, r0
    1234:	00000054 	andeq	r0, r0, r4, asr r0
    1238:	00000000 	andeq	r0, r0, r0
    123c:	00021800 	andeq	r1, r2, r0, lsl #16
    1240:	00022c00 	andeq	r2, r2, r0, lsl #24
    1244:	58000100 	stmdapl	r0, {r8}
	...
    1250:	0000021c 	andeq	r0, r0, ip, lsl r2
    1254:	00000220 	andeq	r0, r0, r0, lsr #4
    1258:	00530001 	subseq	r0, r3, r1
    125c:	00000000 	andeq	r0, r0, r0
    1260:	3c000000 	stccc	0, cr0, [r0], {-0}
    1264:	d0000002 	andle	r0, r0, r2
    1268:	01000002 	tsteq	r0, r2
    126c:	00005400 	andeq	r5, r0, r0, lsl #8
    1270:	00000000 	andeq	r0, r0, r0
    1274:	023c0000 	eorseq	r0, ip, #0
    1278:	02500000 	subseq	r0, r0, #0
    127c:	00010000 	andeq	r0, r1, r0
    1280:	00000058 	andeq	r0, r0, r8, asr r0
    1284:	00000000 	andeq	r0, r0, r0
    1288:	00024000 	andeq	r4, r2, r0
    128c:	00024400 	andeq	r4, r2, r0, lsl #8
    1290:	53000100 	movwpl	r0, #256	; 0x100
	...
    129c:	00000260 	andeq	r0, r0, r0, ror #4
    12a0:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    12a4:	00540001 	subseq	r0, r4, r1
    12a8:	00000000 	andeq	r0, r0, r0
    12ac:	60000000 	andvs	r0, r0, r0
    12b0:	74000002 	strvc	r0, [r0], #-2
    12b4:	01000002 	tsteq	r0, r2
    12b8:	00005800 	andeq	r5, r0, r0, lsl #16
    12bc:	00000000 	andeq	r0, r0, r0
    12c0:	02640000 	rsbeq	r0, r4, #0
    12c4:	02680000 	rsbeq	r0, r8, #0
    12c8:	00010000 	andeq	r0, r1, r0
    12cc:	00000053 	andeq	r0, r0, r3, asr r0
    12d0:	00000000 	andeq	r0, r0, r0
    12d4:	00028400 	andeq	r8, r2, r0, lsl #8
    12d8:	0002d000 	andeq	sp, r2, r0
    12dc:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    12e8:	00000284 	andeq	r0, r0, r4, lsl #5
    12ec:	00000298 	muleq	r0, r8, r2
    12f0:	00580001 	subseq	r0, r8, r1
    12f4:	00000000 	andeq	r0, r0, r0
    12f8:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    12fc:	8c000002 	stchi	0, cr0, [r0], {2}
    1300:	01000002 	tsteq	r0, r2
    1304:	00005300 	andeq	r5, r0, r0, lsl #6
    1308:	00000000 	andeq	r0, r0, r0
    130c:	02a80000 	adceq	r0, r8, #0
    1310:	02d00000 	sbcseq	r0, r0, #0
    1314:	00010000 	andeq	r0, r1, r0
    1318:	00000054 	andeq	r0, r0, r4, asr r0
    131c:	00000000 	andeq	r0, r0, r0
    1320:	0002ac00 	andeq	sl, r2, r0, lsl #24
    1324:	0002b000 	andeq	fp, r2, r0
    1328:	53000100 	movwpl	r0, #256	; 0x100
	...
    1334:	000002c8 	andeq	r0, r0, r8, asr #5
    1338:	0000030c 	andeq	r0, r0, ip, lsl #6
    133c:	9f300002 	svcls	0x00300002
    1340:	00000314 	andeq	r0, r0, r4, lsl r3
    1344:	0000031c 	andeq	r0, r0, ip, lsl r3
    1348:	9f300002 	svcls	0x00300002
	...
    1354:	000002c8 	andeq	r0, r0, r8, asr #5
    1358:	0000030c 	andeq	r0, r0, ip, lsl #6
    135c:	14550001 	ldrbne	r0, [r5], #-1
    1360:	1c000003 	stcne	0, cr0, [r0], {3}
    1364:	01000003 	tsteq	r0, r3
    1368:	00005500 	andeq	r5, r0, r0, lsl #10
    136c:	00000000 	andeq	r0, r0, r0
    1370:	02d00000 	sbcseq	r0, r0, #0
    1374:	030c0000 	movweq	r0, #49152	; 0xc000
    1378:	00010000 	andeq	r0, r1, r0
    137c:	00031454 	andeq	r1, r3, r4, asr r4
    1380:	00031c00 	andeq	r1, r3, r0, lsl #24
    1384:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    1390:	0000031c 	andeq	r0, r0, ip, lsl r3
    1394:	0000033b 	andeq	r0, r0, fp, lsr r3
    1398:	3b500001 	blcc	14013a4 <__bss_end__+0x13f6ac4>
    139c:	54000003 	strpl	r0, [r0], #-3
    13a0:	01000003 	tsteq	r0, r3
    13a4:	03545800 	cmpeq	r4, #0, 16
    13a8:	03640000 	cmneq	r4, #0
    13ac:	00010000 	andeq	r0, r1, r0
    13b0:	00036450 	andeq	r6, r3, r0, asr r4
    13b4:	0003ac00 	andeq	sl, r3, r0, lsl #24
    13b8:	58000100 	stmdapl	r0, {r8}
	...
    13c4:	0000031c 	andeq	r0, r0, ip, lsl r3
    13c8:	0000033b 	andeq	r0, r0, fp, lsr r3
    13cc:	3b510001 	blcc	14413d8 <__bss_end__+0x1436af8>
    13d0:	54000003 	strpl	r0, [r0], #-3
    13d4:	01000003 	tsteq	r0, r3
    13d8:	03545600 	cmpeq	r4, #0, 12
    13dc:	03640000 	cmneq	r4, #0
    13e0:	00010000 	andeq	r0, r1, r0
    13e4:	00036451 	andeq	r6, r3, r1, asr r4
    13e8:	0003ac00 	andeq	sl, r3, r0, lsl #24
    13ec:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    13f8:	0000031c 	andeq	r0, r0, ip, lsl r3
    13fc:	0000033b 	andeq	r0, r0, fp, lsr r3
    1400:	3b520001 	blcc	148140c <__bss_end__+0x1476b2c>
    1404:	54000003 	strpl	r0, [r0], #-3
    1408:	04000003 	streq	r0, [r0], #-3
    140c:	5201f300 	andpl	pc, r1, #0, 6
    1410:	0003549f 	muleq	r3, pc, r4	; <UNPREDICTABLE>
    1414:	00036400 	andeq	r6, r3, r0, lsl #8
    1418:	52000100 	andpl	r0, r0, #0, 2
    141c:	00000364 	andeq	r0, r0, r4, ror #6
    1420:	000003ac 	andeq	r0, r0, ip, lsr #7
    1424:	01770003 	cmneq	r7, r3
    1428:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    142c:	00000000 	andeq	r0, r0, r0
    1430:	00031c00 	andeq	r1, r3, r0, lsl #24
    1434:	00033b00 	andeq	r3, r3, r0, lsl #22
    1438:	53000100 	movwpl	r0, #256	; 0x100
    143c:	0000033b 	andeq	r0, r0, fp, lsr r3
    1440:	00000354 	andeq	r0, r0, r4, asr r3
    1444:	01f30004 	mvnseq	r0, r4
    1448:	03549f53 	cmpeq	r4, #332	; 0x14c
    144c:	03640000 	cmneq	r4, #0
    1450:	00010000 	andeq	r0, r1, r0
    1454:	00036453 	andeq	r6, r3, r3, asr r4
    1458:	0003ac00 	andeq	sl, r3, r0, lsl #24
    145c:	f3000400 	vshl.u8	d0, d0, d0
    1460:	009f5301 	addseq	r5, pc, r1, lsl #6
    1464:	00000000 	andeq	r0, r0, r0
    1468:	5c000000 	stcpl	0, cr0, [r0], {-0}
    146c:	64000003 	strvs	r0, [r0], #-3
    1470:	02000003 	andeq	r0, r0, #3
    1474:	649f3000 	ldrvs	r3, [pc], #0	; 147c <_start-0x6b84>
    1478:	ac000003 	stcge	0, cr0, [r0], {3}
    147c:	01000003 	tsteq	r0, r3
    1480:	00005400 	andeq	r5, r0, r0, lsl #8
    1484:	00000000 	andeq	r0, r0, r0
    1488:	03740000 	cmneq	r4, #0
    148c:	03840000 	orreq	r0, r4, #0
    1490:	00010000 	andeq	r0, r1, r0
    1494:	00000050 	andeq	r0, r0, r0, asr r0
    1498:	00000000 	andeq	r0, r0, r0
    149c:	0003ac00 	andeq	sl, r3, r0, lsl #24
    14a0:	0003c700 	andeq	ip, r3, r0, lsl #14
    14a4:	50000100 	andpl	r0, r0, r0, lsl #2
    14a8:	000003c7 	andeq	r0, r0, r7, asr #7
    14ac:	000003e0 	andeq	r0, r0, r0, ror #7
    14b0:	e0570001 	subs	r0, r7, r1
    14b4:	f0000003 			; <UNDEFINED> instruction: 0xf0000003
    14b8:	01000003 	tsteq	r0, r3
    14bc:	03f05000 	mvnseq	r5, #0
    14c0:	04280000 	strteq	r0, [r8], #-0
    14c4:	00010000 	andeq	r0, r1, r0
    14c8:	00000057 	andeq	r0, r0, r7, asr r0
    14cc:	00000000 	andeq	r0, r0, r0
    14d0:	0003ac00 	andeq	sl, r3, r0, lsl #24
    14d4:	0003c700 	andeq	ip, r3, r0, lsl #14
    14d8:	51000100 	mrspl	r0, (UNDEF: 16)
    14dc:	000003c7 	andeq	r0, r0, r7, asr #7
    14e0:	000003e0 	andeq	r0, r0, r0, ror #7
    14e4:	e0550001 	subs	r0, r5, r1
    14e8:	f0000003 			; <UNDEFINED> instruction: 0xf0000003
    14ec:	01000003 	tsteq	r0, r3
    14f0:	03f05100 	mvnseq	r5, #0, 2
    14f4:	04280000 	strteq	r0, [r8], #-0
    14f8:	00010000 	andeq	r0, r1, r0
    14fc:	00000055 	andeq	r0, r0, r5, asr r0
    1500:	00000000 	andeq	r0, r0, r0
    1504:	0003ac00 	andeq	sl, r3, r0, lsl #24
    1508:	0003c700 	andeq	ip, r3, r0, lsl #14
    150c:	52000100 	andpl	r0, r0, #0, 2
    1510:	000003c7 	andeq	r0, r0, r7, asr #7
    1514:	000003e0 	andeq	r0, r0, r0, ror #7
    1518:	01f30004 	mvnseq	r0, r4
    151c:	03e09f52 	mvneq	r9, #328	; 0x148
    1520:	03f00000 	mvnseq	r0, #0
    1524:	00010000 	andeq	r0, r1, r0
    1528:	0003f052 	andeq	pc, r3, r2, asr r0	; <UNPREDICTABLE>
    152c:	00042800 	andeq	r2, r4, r0, lsl #16
    1530:	76000300 	strvc	r0, [r0], -r0, lsl #6
    1534:	00009f01 	andeq	r9, r0, r1, lsl #30
    1538:	00000000 	andeq	r0, r0, r0
    153c:	03ac0000 			; <UNDEFINED> instruction: 0x03ac0000
    1540:	03c70000 	biceq	r0, r7, #0
    1544:	00010000 	andeq	r0, r1, r0
    1548:	0003c753 	andeq	ip, r3, r3, asr r7
    154c:	0003e000 	andeq	lr, r3, r0
    1550:	58000100 	stmdapl	r0, {r8}
    1554:	000003e0 	andeq	r0, r0, r0, ror #7
    1558:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    155c:	f0530001 			; <UNDEFINED> instruction: 0xf0530001
    1560:	28000003 	stmdacs	r0, {r0, r1}
    1564:	01000004 	tsteq	r0, r4
    1568:	00005800 	andeq	r5, r0, r0, lsl #16
    156c:	00000000 	andeq	r0, r0, r0
    1570:	03e80000 	mvneq	r0, #0
    1574:	03f00000 	mvnseq	r0, #0
    1578:	00020000 	andeq	r0, r2, r0
    157c:	03f09f30 	mvnseq	r9, #48, 30	; 0xc0
    1580:	04280000 	strteq	r0, [r8], #-0
    1584:	00010000 	andeq	r0, r1, r0
    1588:	00000054 	andeq	r0, r0, r4, asr r0
    158c:	00000000 	andeq	r0, r0, r0
    1590:	00042800 	andeq	r2, r4, r0, lsl #16
    1594:	00044700 	andeq	r4, r4, r0, lsl #14
    1598:	51000100 	mrspl	r0, (UNDEF: 16)
    159c:	00000447 	andeq	r0, r0, r7, asr #8
    15a0:	000004e8 	andeq	r0, r0, r8, ror #9
    15a4:	01f30004 	mvnseq	r0, r4
    15a8:	00009f51 	andeq	r9, r0, r1, asr pc
    15ac:	00000000 	andeq	r0, r0, r0
    15b0:	04280000 	strteq	r0, [r8], #-0
    15b4:	04470000 	strbeq	r0, [r7], #-0
    15b8:	00010000 	andeq	r0, r1, r0
    15bc:	00044752 	andeq	r4, r4, r2, asr r7
    15c0:	0004e800 	andeq	lr, r4, r0, lsl #16
    15c4:	f3000400 	vshl.u8	d0, d0, d0
    15c8:	009f5201 	addseq	r5, pc, r1, lsl #4
    15cc:	00000000 	andeq	r0, r0, r0
    15d0:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    15d4:	47000004 	strmi	r0, [r0, -r4]
    15d8:	01000004 	tsteq	r0, r4
    15dc:	04475300 	strbeq	r5, [r7], #-768	; 0x300
    15e0:	04e80000 	strbteq	r0, [r8], #0
    15e4:	00010000 	andeq	r0, r1, r0
    15e8:	00000055 	andeq	r0, r0, r5, asr r0
    15ec:	00000000 	andeq	r0, r0, r0
    15f0:	00046800 	andeq	r6, r4, r0, lsl #16
    15f4:	0004a700 	andeq	sl, r4, r0, lsl #14
    15f8:	52000100 	andpl	r0, r0, #0, 2
    15fc:	000004a7 	andeq	r0, r0, r7, lsr #9
    1600:	000004c0 	andeq	r0, r0, r0, asr #9
    1604:	00750006 	rsbseq	r0, r5, r6
    1608:	9f1e0077 	svcls	0x001e0077
    160c:	000004c0 	andeq	r0, r0, r0, asr #9
    1610:	000004e8 	andeq	r0, r0, r8, ror #9
    1614:	00520001 	subseq	r0, r2, r1
    1618:	00000000 	andeq	r0, r0, r0
    161c:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    1620:	f3000004 	vhadd.u8	d0, d0, d4
    1624:	01000004 	tsteq	r0, r4
    1628:	04f35000 	ldrbteq	r5, [r3], #0
    162c:	05240000 	streq	r0, [r4, #-0]!
    1630:	00040000 	andeq	r0, r4, r0
    1634:	9f5001f3 	svcls	0x005001f3
	...
    1640:	000004f4 	strdeq	r0, [r0], -r4
    1644:	000004ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1648:	00500001 	subseq	r0, r0, r1
    164c:	00000000 	andeq	r0, r0, r0
    1650:	24000000 	strcs	r0, [r0], #-0
    1654:	34000005 	strcc	r0, [r0], #-5
    1658:	01000005 	tsteq	r0, r5
    165c:	05345000 	ldreq	r5, [r4, #-0]!
    1660:	05500000 	ldrbeq	r0, [r0, #-0]
    1664:	00010000 	andeq	r0, r1, r0
    1668:	00000055 	andeq	r0, r0, r5, asr r0
    166c:	00000000 	andeq	r0, r0, r0
    1670:	00052400 	andeq	r2, r5, r0, lsl #8
    1674:	00053400 	andeq	r3, r5, r0, lsl #8
    1678:	51000100 	mrspl	r0, (UNDEF: 16)
    167c:	00000534 	andeq	r0, r0, r4, lsr r5
    1680:	00000550 	andeq	r0, r0, r0, asr r5
    1684:	00540001 	subseq	r0, r4, r1
    1688:	00000000 	andeq	r0, r0, r0
    168c:	50000000 	andpl	r0, r0, r0
    1690:	6c000005 	stcvs	0, cr0, [r0], {5}
    1694:	01000005 	tsteq	r0, r5
    1698:	056c5000 	strbeq	r5, [ip, #-0]!
    169c:	05bc0000 	ldreq	r0, [ip, #0]!
    16a0:	00010000 	andeq	r0, r1, r0
    16a4:	0005bc55 	andeq	fp, r5, r5, asr ip
    16a8:	0005d400 	andeq	sp, r5, r0, lsl #8
    16ac:	f3000400 	vshl.u8	d0, d0, d0
    16b0:	009f5001 	addseq	r5, pc, r1
    16b4:	00000000 	andeq	r0, r0, r0
    16b8:	7c000000 	stcvc	0, cr0, [r0], {-0}
    16bc:	8b000005 	blhi	16d8 <_start-0x6928>
    16c0:	01000005 	tsteq	r0, r5
    16c4:	058b5000 	streq	r5, [fp]
    16c8:	05a40000 	streq	r0, [r4, #0]!
    16cc:	00010000 	andeq	r0, r1, r0
    16d0:	0005a454 	andeq	sl, r5, r4, asr r4
    16d4:	0005a800 	andeq	sl, r5, r0, lsl #16
    16d8:	50000100 	andpl	r0, r0, r0, lsl #2
    16dc:	000005a8 	andeq	r0, r0, r8, lsr #11
    16e0:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
    16e4:	bc540001 	mrrclt	0, 0, r0, r4, cr1
    16e8:	d4000005 	strle	r0, [r0], #-5
    16ec:	01000005 	tsteq	r0, r5
    16f0:	00005000 	andeq	r5, r0, r0
    16f4:	00000000 	andeq	r0, r0, r0
    16f8:	05d40000 	ldrbeq	r0, [r4]
    16fc:	05e70000 	strbeq	r0, [r7, #0]!
    1700:	00010000 	andeq	r0, r1, r0
    1704:	0005e750 	andeq	lr, r5, r0, asr r7
    1708:	00062000 	andeq	r2, r6, r0
    170c:	f3000400 	vshl.u8	d0, d0, d0
    1710:	009f5001 	addseq	r5, pc, r1
    1714:	00000000 	andeq	r0, r0, r0
    1718:	d4000000 	strle	r0, [r0], #-0
    171c:	e7000005 	str	r0, [r0, -r5]
    1720:	01000005 	tsteq	r0, r5
    1724:	05e75100 	strbeq	r5, [r7, #256]!	; 0x100
    1728:	06200000 	strteq	r0, [r0], -r0
    172c:	00040000 	andeq	r0, r4, r0
    1730:	9f5101f3 	svcls	0x005101f3
	...
    173c:	000005d4 	ldrdeq	r0, [r0], -r4
    1740:	000005e7 	andeq	r0, r0, r7, ror #11
    1744:	e7520001 	ldrb	r0, [r2, -r1]
    1748:	20000005 	andcs	r0, r0, r5
    174c:	04000006 	streq	r0, [r0], #-6
    1750:	5201f300 	andpl	pc, r1, #0, 6
    1754:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1758:	00000000 	andeq	r0, r0, r0
    175c:	0005d400 	andeq	sp, r5, r0, lsl #8
    1760:	0005e700 	andeq	lr, r5, r0, lsl #14
    1764:	53000100 	movwpl	r0, #256	; 0x100
    1768:	000005e7 	andeq	r0, r0, r7, ror #11
    176c:	00000620 	andeq	r0, r0, r0, lsr #12
    1770:	01f30004 	mvnseq	r0, r4
    1774:	00009f53 	andeq	r9, r0, r3, asr pc
    1778:	00000000 	andeq	r0, r0, r0
    177c:	05e80000 	strbeq	r0, [r8, #0]!
    1780:	05f30000 	ldrbeq	r0, [r3, #0]!
    1784:	00010000 	andeq	r0, r1, r0
    1788:	00060c50 	andeq	r0, r6, r0, asr ip
    178c:	00062000 	andeq	r2, r6, r0
    1790:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    179c:	000000fc 	strdeq	r0, [r0], -ip
    17a0:	00000104 	andeq	r0, r0, r4, lsl #2
    17a4:	04500001 	ldrbeq	r0, [r0], #-1
    17a8:	28000001 	stmdacs	r0, {r0}
    17ac:	01000001 	tsteq	r0, r1
    17b0:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    17bc:	00900000 	addseq	r0, r0, r0
    17c0:	00010000 	andeq	r0, r1, r0
    17c4:	00009050 	andeq	r9, r0, r0, asr r0
    17c8:	0000d400 	andeq	sp, r0, r0, lsl #8
    17cc:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    17d8:	00000048 	andeq	r0, r0, r8, asr #32
    17dc:	0000004c 	andeq	r0, r0, ip, asr #32
    17e0:	54550001 	ldrbpl	r0, [r5], #-1
    17e4:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    17e8:	01000000 	mrseq	r0, (UNDEF: 0)
    17ec:	00605500 	rsbeq	r5, r0, r0, lsl #10
    17f0:	00640000 	rsbeq	r0, r4, r0
    17f4:	00010000 	andeq	r0, r1, r0
    17f8:	00006c55 	andeq	r6, r0, r5, asr ip
    17fc:	00007000 	andeq	r7, r0, r0
    1800:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    1804:	00000078 	andeq	r0, r0, r8, ror r0
    1808:	0000007c 	andeq	r0, r0, ip, ror r0
    180c:	84550001 	ldrbhi	r0, [r5], #-1
    1810:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    1814:	01000000 	mrseq	r0, (UNDEF: 0)
    1818:	008c5500 	addeq	r5, ip, r0, lsl #10
    181c:	00d40000 	sbcseq	r0, r4, r0
    1820:	00010000 	andeq	r0, r1, r0
    1824:	00000055 	andeq	r0, r0, r5, asr r0
    1828:	00000000 	andeq	r0, r0, r0
    182c:	00001c00 	andeq	r1, r0, r0, lsl #24
    1830:	00004400 	andeq	r4, r0, r0, lsl #8
    1834:	53000100 	movwpl	r0, #256	; 0x100
    1838:	00000044 	andeq	r0, r0, r4, asr #32
    183c:	0000004c 	andeq	r0, r0, ip, asr #32
    1840:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    1844:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1848:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    184c:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1850:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1854:	25f72008 	ldrbcs	r2, [r7, #8]!
    1858:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    185c:	004c9f25 	subeq	r9, ip, r5, lsr #30
    1860:	00500000 	subseq	r0, r0, r0
    1864:	00010000 	andeq	r0, r1, r0
    1868:	00005053 	andeq	r5, r0, r3, asr r0
    186c:	00005800 	andeq	r5, r0, r0, lsl #16
    1870:	70001c00 	andvc	r1, r0, r0, lsl #24
    1874:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1878:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    187c:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1880:	00000000 	andeq	r0, r0, r0
    1884:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1888:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    188c:	589f2533 	ldmpl	pc, {r0, r1, r4, r5, r8, sl, sp}	; <UNPREDICTABLE>
    1890:	5c000000 	stcpl	0, cr0, [r0], {-0}
    1894:	01000000 	mrseq	r0, (UNDEF: 0)
    1898:	005c5300 	subseq	r5, ip, r0, lsl #6
    189c:	00640000 	rsbeq	r0, r4, r0
    18a0:	001c0000 	andseq	r0, ip, r0
    18a4:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    18a8:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    18ac:	cccccd08 	stclgt	13, cr12, [ip], {8}
    18b0:	000000cc 	andeq	r0, r0, ip, asr #1
    18b4:	20081e00 	andcs	r1, r8, r0, lsl #28
    18b8:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    18bc:	9f25332c 	svcls	0x0025332c
    18c0:	00000064 	andeq	r0, r0, r4, rrx
    18c4:	00000068 	andeq	r0, r0, r8, rrx
    18c8:	68530001 	ldmdavs	r3, {r0}^
    18cc:	70000000 	andvc	r0, r0, r0
    18d0:	1c000000 	stcne	0, cr0, [r0], {-0}
    18d4:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    18d8:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    18dc:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    18e0:	0000cccc 	andeq	ip, r0, ip, asr #25
    18e4:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    18e8:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    18ec:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    18f0:	0000709f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    18f4:	00007400 	andeq	r7, r0, r0, lsl #8
    18f8:	53000100 	movwpl	r0, #256	; 0x100
    18fc:	00000074 	andeq	r0, r0, r4, ror r0
    1900:	0000007c 	andeq	r0, r0, ip, ror r0
    1904:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    1908:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    190c:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1910:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1914:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1918:	25f72008 	ldrbcs	r2, [r7, #8]!
    191c:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1920:	007c9f25 	rsbseq	r9, ip, r5, lsr #30
    1924:	00800000 	addeq	r0, r0, r0
    1928:	00010000 	andeq	r0, r1, r0
    192c:	00008053 	andeq	r8, r0, r3, asr r0
    1930:	00008800 	andeq	r8, r0, r0, lsl #16
    1934:	70001c00 	andvc	r1, r0, r0, lsl #24
    1938:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    193c:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1940:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1944:	00000000 	andeq	r0, r0, r0
    1948:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    194c:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1950:	889f2533 	ldmhi	pc, {r0, r1, r4, r5, r8, sl, sp}	; <UNPREDICTABLE>
    1954:	8c000000 	stchi	0, cr0, [r0], {-0}
    1958:	01000000 	mrseq	r0, (UNDEF: 0)
    195c:	008c5300 	addeq	r5, ip, r0, lsl #6
    1960:	00900000 	addseq	r0, r0, r0
    1964:	001c0000 	andseq	r0, ip, r0
    1968:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    196c:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    1970:	cccccd08 	stclgt	13, cr12, [ip], {8}
    1974:	000000cc 	andeq	r0, r0, ip, asr #1
    1978:	20081e00 	andcs	r1, r8, r0, lsl #28
    197c:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1980:	9f25332c 	svcls	0x0025332c
    1984:	00000090 	muleq	r0, r0, r0
    1988:	00000098 	muleq	r0, r8, r0
    198c:	0074001c 	rsbseq	r0, r4, ip, lsl r0
    1990:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1994:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1998:	00cccccc 	sbceq	ip, ip, ip, asr #25
    199c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    19a0:	25f72008 	ldrbcs	r2, [r7, #8]!
    19a4:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    19a8:	00989f25 	addseq	r9, r8, r5, lsr #30
    19ac:	009c0000 	addseq	r0, ip, r0
    19b0:	00170000 	andseq	r0, r7, r0
    19b4:	2cf70074 	ldclcs	0, cr0, [r7], #464	; 0x1d0
    19b8:	007125f7 	ldrshteq	r2, [r1], #-87	; 0xffffffa9
    19bc:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    19c0:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    19c4:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    19c8:	9c9f2533 	cfldr32ls	mvfx2, [pc], {51}	; 0x33
    19cc:	d4000000 	strle	r0, [r0], #-0
    19d0:	1c000000 	stcne	0, cr0, [r0], {-0}
    19d4:	f7007400 			; <UNDEFINED> instruction: 0xf7007400
    19d8:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    19dc:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    19e0:	0000cccc 	andeq	ip, r0, ip, asr #25
    19e4:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    19e8:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    19ec:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    19f0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    19f4:	00000000 	andeq	r0, r0, r0
    19f8:	00009400 	andeq	r9, r0, r0, lsl #8
    19fc:	0000b800 	andeq	fp, r0, r0, lsl #16
    1a00:	50000100 	andpl	r0, r0, r0, lsl #2
    1a04:	000000b8 	strheq	r0, [r0], -r8
    1a08:	000000c4 	andeq	r0, r0, r4, asr #1
    1a0c:	71310008 	teqvc	r1, r8
    1a10:	00732400 	rsbseq	r2, r3, r0, lsl #8
    1a14:	00c49f21 	sbceq	r9, r4, r1, lsr #30
    1a18:	00c70000 	sbceq	r0, r7, r0
    1a1c:	00010000 	andeq	r0, r1, r0
    1a20:	00000051 	andeq	r0, r0, r1, asr r0
    1a24:	00000000 	andeq	r0, r0, r0
    1a28:	0000d400 	andeq	sp, r0, r0, lsl #8
    1a2c:	0000f800 	andeq	pc, r0, r0, lsl #16
    1a30:	50000100 	andpl	r0, r0, r0, lsl #2
    1a34:	000000f8 	strdeq	r0, [r0], -r8
    1a38:	0000010c 	andeq	r0, r0, ip, lsl #2
    1a3c:	01f30004 	mvnseq	r0, r4
    1a40:	00009f50 	andeq	r9, r0, r0, asr pc
    1a44:	00000000 	andeq	r0, r0, r0
    1a48:	00e00000 	rsceq	r0, r0, r0
    1a4c:	00e80000 	rsceq	r0, r8, r0
    1a50:	00020000 	andeq	r0, r2, r0
    1a54:	00e89f30 	rsceq	r9, r8, r0, lsr pc
    1a58:	00e80000 	rsceq	r0, r8, r0
    1a5c:	00010000 	andeq	r0, r1, r0
    1a60:	0000e852 	andeq	lr, r0, r2, asr r8
    1a64:	0000f000 	andeq	pc, r0, r0
    1a68:	30000200 	andcc	r0, r0, r0, lsl #4
    1a6c:	0000f09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1a70:	00010300 	andeq	r0, r1, r0, lsl #6
    1a74:	52000100 	andpl	r0, r0, #0, 2
	...
    1a80:	000000e0 	andeq	r0, r0, r0, ror #1
    1a84:	000000f4 	strdeq	r0, [r0], -r4
    1a88:	9f300002 	svcls	0x00300002
    1a8c:	000000f4 	strdeq	r0, [r0], -r4
    1a90:	00000100 	andeq	r0, r0, r0, lsl #2
    1a94:	73310005 	teqvc	r1, #5
    1a98:	009f2400 	addseq	r2, pc, r0, lsl #8
    1a9c:	03000001 	movweq	r0, #1
    1aa0:	01000001 	tsteq	r0, r1
    1aa4:	01035100 	mrseq	r5, (UNDEF: 19)
    1aa8:	010c0000 	mrseq	r0, (UNDEF: 12)
    1aac:	00080000 	andeq	r0, r8, r0
    1ab0:	5001f331 	andpl	pc, r1, r1, lsr r3	; <UNPREDICTABLE>
    1ab4:	9f241a4f 	svcls	0x00241a4f
	...
    1ac0:	0000010c 	andeq	r0, r0, ip, lsl #2
    1ac4:	00000130 	andeq	r0, r0, r0, lsr r1
    1ac8:	30500001 	subscc	r0, r0, r1
    1acc:	44000001 	strmi	r0, [r0], #-1
    1ad0:	04000001 	streq	r0, [r0], #-1
    1ad4:	5001f300 	andpl	pc, r1, r0, lsl #6
    1ad8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1adc:	00000000 	andeq	r0, r0, r0
    1ae0:	00011800 	andeq	r1, r1, r0, lsl #16
    1ae4:	00012000 	andeq	r2, r1, r0
    1ae8:	30000200 	andcc	r0, r0, r0, lsl #4
    1aec:	0001209f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
    1af0:	00012000 	andeq	r2, r1, r0
    1af4:	52000100 	andpl	r0, r0, #0, 2
    1af8:	00000120 	andeq	r0, r0, r0, lsr #2
    1afc:	00000128 	andeq	r0, r0, r8, lsr #2
    1b00:	9f300002 	svcls	0x00300002
    1b04:	00000128 	andeq	r0, r0, r8, lsr #2
    1b08:	0000013b 	andeq	r0, r0, fp, lsr r1
    1b0c:	00520001 	subseq	r0, r2, r1
    1b10:	00000000 	andeq	r0, r0, r0
    1b14:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1b18:	2c000001 	stccs	0, cr0, [r0], {1}
    1b1c:	02000001 	andeq	r0, r0, #1
    1b20:	2c9f3000 	ldccs	0, cr3, [pc], {0}
    1b24:	38000001 	stmdacc	r0, {r0}
    1b28:	05000001 	streq	r0, [r0, #-1]
    1b2c:	00733100 	rsbseq	r3, r3, r0, lsl #2
    1b30:	01389f24 	teqeq	r8, r4, lsr #30
    1b34:	013b0000 	teqeq	fp, r0
    1b38:	00010000 	andeq	r0, r1, r0
    1b3c:	00013b51 	andeq	r3, r1, r1, asr fp
    1b40:	00014400 	andeq	r4, r1, r0, lsl #8
    1b44:	31000800 	tstcc	r0, r0, lsl #16
    1b48:	4f5001f3 	svcmi	0x005001f3
    1b4c:	009f241a 	addseq	r2, pc, sl, lsl r4	; <UNPREDICTABLE>
    1b50:	00000000 	andeq	r0, r0, r0
    1b54:	44000000 	strmi	r0, [r0], #-0
    1b58:	d4000001 	strle	r0, [r0], #-1
    1b5c:	01000001 	tsteq	r0, r1
    1b60:	01d45000 	bicseq	r5, r4, r0
    1b64:	02100000 	andseq	r0, r0, #0
    1b68:	00010000 	andeq	r0, r1, r0
    1b6c:	00000054 	andeq	r0, r0, r4, asr r0
    1b70:	00000000 	andeq	r0, r0, r0
    1b74:	00018c00 	andeq	r8, r1, r0, lsl #24
    1b78:	00019000 	andeq	r9, r1, r0
    1b7c:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    1b80:	00000198 	muleq	r0, r8, r1
    1b84:	0000019c 	muleq	r0, ip, r1
    1b88:	a4550001 	ldrbge	r0, [r5], #-1
    1b8c:	a8000001 	stmdage	r0, {r0}
    1b90:	01000001 	tsteq	r0, r1
    1b94:	01b05500 	lslseq	r5, r0, #10
    1b98:	01b40000 			; <UNDEFINED> instruction: 0x01b40000
    1b9c:	00010000 	andeq	r0, r1, r0
    1ba0:	0001bc55 	andeq	fp, r1, r5, asr ip
    1ba4:	0001c000 	andeq	ip, r1, r0
    1ba8:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    1bac:	000001c8 	andeq	r0, r0, r8, asr #3
    1bb0:	000001cc 	andeq	r0, r0, ip, asr #3
    1bb4:	d0550001 	subsle	r0, r5, r1
    1bb8:	10000001 	andne	r0, r0, r1
    1bbc:	01000002 	tsteq	r0, r2
    1bc0:	00005500 	andeq	r5, r0, r0, lsl #10
    1bc4:	00000000 	andeq	r0, r0, r0
    1bc8:	01600000 	cmneq	r0, r0
    1bcc:	01880000 	orreq	r0, r8, r0
    1bd0:	00010000 	andeq	r0, r1, r0
    1bd4:	00018853 	andeq	r8, r1, r3, asr r8
    1bd8:	00019000 	andeq	r9, r1, r0
    1bdc:	70001c00 	andvc	r1, r0, r0, lsl #24
    1be0:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1be4:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1be8:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1bec:	00000000 	andeq	r0, r0, r0
    1bf0:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1bf4:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1bf8:	909f2533 	addsls	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
    1bfc:	94000001 	strls	r0, [r0], #-1
    1c00:	01000001 	tsteq	r0, r1
    1c04:	01945300 	orrseq	r5, r4, r0, lsl #6
    1c08:	019c0000 	orrseq	r0, ip, r0
    1c0c:	001c0000 	andseq	r0, ip, r0
    1c10:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    1c14:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    1c18:	cccccd08 	stclgt	13, cr12, [ip], {8}
    1c1c:	000000cc 	andeq	r0, r0, ip, asr #1
    1c20:	20081e00 	andcs	r1, r8, r0, lsl #28
    1c24:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1c28:	9f25332c 	svcls	0x0025332c
    1c2c:	0000019c 	muleq	r0, ip, r1
    1c30:	000001a0 	andeq	r0, r0, r0, lsr #3
    1c34:	a0530001 	subsge	r0, r3, r1
    1c38:	a8000001 	stmdage	r0, {r0}
    1c3c:	1c000001 	stcne	0, cr0, [r0], {1}
    1c40:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    1c44:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    1c48:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1c4c:	0000cccc 	andeq	ip, r0, ip, asr #25
    1c50:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1c54:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1c58:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1c5c:	0001a89f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
    1c60:	0001ac00 	andeq	sl, r1, r0, lsl #24
    1c64:	53000100 	movwpl	r0, #256	; 0x100
    1c68:	000001ac 	andeq	r0, r0, ip, lsr #3
    1c6c:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
    1c70:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    1c74:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1c78:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1c7c:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1c80:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1c84:	25f72008 	ldrbcs	r2, [r7, #8]!
    1c88:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1c8c:	01b49f25 			; <UNDEFINED> instruction: 0x01b49f25
    1c90:	01b80000 			; <UNDEFINED> instruction: 0x01b80000
    1c94:	00010000 	andeq	r0, r1, r0
    1c98:	0001b853 	andeq	fp, r1, r3, asr r8
    1c9c:	0001c000 	andeq	ip, r1, r0
    1ca0:	70001c00 	andvc	r1, r0, r0, lsl #24
    1ca4:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1ca8:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1cac:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1cb0:	00000000 	andeq	r0, r0, r0
    1cb4:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1cb8:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1cbc:	c09f2533 	addsgt	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
    1cc0:	c4000001 	strgt	r0, [r0], #-1
    1cc4:	01000001 	tsteq	r0, r1
    1cc8:	01c45300 	biceq	r5, r4, r0, lsl #6
    1ccc:	01cc0000 	biceq	r0, ip, r0
    1cd0:	001c0000 	andseq	r0, ip, r0
    1cd4:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    1cd8:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    1cdc:	cccccd08 	stclgt	13, cr12, [ip], {8}
    1ce0:	000000cc 	andeq	r0, r0, ip, asr #1
    1ce4:	20081e00 	andcs	r1, r8, r0, lsl #28
    1ce8:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1cec:	9f25332c 	svcls	0x0025332c
    1cf0:	000001cc 	andeq	r0, r0, ip, asr #3
    1cf4:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1cf8:	d0530001 	subsle	r0, r3, r1
    1cfc:	d4000001 	strle	r0, [r0], #-1
    1d00:	1c000001 	stcne	0, cr0, [r0], {1}
    1d04:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    1d08:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    1d0c:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1d10:	0000cccc 	andeq	ip, r0, ip, asr #25
    1d14:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1d18:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1d1c:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1d20:	0001d49f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
    1d24:	0001dc00 	andeq	sp, r1, r0, lsl #24
    1d28:	74001c00 	strvc	r1, [r0], #-3072	; 0xc00
    1d2c:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1d30:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1d34:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1d38:	00000000 	andeq	r0, r0, r0
    1d3c:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1d40:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1d44:	dc9f2533 	cfldr32le	mvfx2, [pc], {51}	; 0x33
    1d48:	e0000001 	and	r0, r0, r1
    1d4c:	17000001 	strne	r0, [r0, -r1]
    1d50:	f7007400 			; <UNDEFINED> instruction: 0xf7007400
    1d54:	7125f72c 	msrvc	SP_abt, ip
    1d58:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1d5c:	20081e25 	andcs	r1, r8, r5, lsr #28
    1d60:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1d64:	9f25332c 	svcls	0x0025332c
    1d68:	000001e0 	andeq	r0, r0, r0, ror #3
    1d6c:	00000210 	andeq	r0, r0, r0, lsl r2
    1d70:	0074001c 	rsbseq	r0, r4, ip, lsl r0
    1d74:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1d78:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1d7c:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1d80:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1d84:	25f72008 	ldrbcs	r2, [r7, #8]!
    1d88:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1d8c:	00009f25 	andeq	r9, r0, r5, lsr #30
    1d90:	00000000 	andeq	r0, r0, r0
    1d94:	01d80000 	bicseq	r0, r8, r0
    1d98:	01fc0000 	mvnseq	r0, r0
    1d9c:	00010000 	andeq	r0, r1, r0
    1da0:	0001fc50 	andeq	pc, r1, r0, asr ip	; <UNPREDICTABLE>
    1da4:	00020300 	andeq	r0, r2, r0, lsl #6
    1da8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1db4:	00000210 	andeq	r0, r0, r0, lsl r2
    1db8:	0000022c 	andeq	r0, r0, ip, lsr #4
    1dbc:	2c500001 	mrrccs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    1dc0:	34000002 	strcc	r0, [r0], #-2
    1dc4:	01000002 	tsteq	r0, r2
    1dc8:	02345400 	eorseq	r5, r4, #0, 8
    1dcc:	023c0000 	eorseq	r0, ip, #0
    1dd0:	00010000 	andeq	r0, r1, r0
    1dd4:	00023c50 	andeq	r3, r2, r0, asr ip
    1dd8:	00024400 	andeq	r4, r2, r0, lsl #8
    1ddc:	54000100 	strpl	r0, [r0], #-256	; 0x100
    1de0:	00000244 	andeq	r0, r0, r4, asr #4
    1de4:	00000250 	andeq	r0, r0, r0, asr r2
    1de8:	01f30004 	mvnseq	r0, r4
    1dec:	02509f50 	subseq	r9, r0, #80, 30	; 0x140
    1df0:	02540000 	subseq	r0, r4, #0
    1df4:	00010000 	andeq	r0, r1, r0
    1df8:	00025450 	andeq	r5, r2, r0, asr r4
    1dfc:	00025c00 	andeq	r5, r2, r0, lsl #24
    1e00:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    1e0c:	00000220 	andeq	r0, r0, r0, lsr #4
    1e10:	00000230 	andeq	r0, r0, r0, lsr r2
    1e14:	9f300002 	svcls	0x00300002
    1e18:	00000230 	andeq	r0, r0, r0, lsr r2
    1e1c:	00000234 	andeq	r0, r0, r4, lsr r2
    1e20:	34500001 	ldrbcc	r0, [r0], #-1
    1e24:	40000002 	andmi	r0, r0, r2
    1e28:	02000002 	andeq	r0, r0, #2
    1e2c:	409f3000 	addsmi	r3, pc, r0
    1e30:	4c000002 	stcmi	0, cr0, [r0], {2}
    1e34:	01000002 	tsteq	r0, r2
    1e38:	00005000 	andeq	r5, r0, r0
    1e3c:	00000000 	andeq	r0, r0, r0
    1e40:	025c0000 	subseq	r0, ip, #0
    1e44:	02730000 	rsbseq	r0, r3, #0
    1e48:	00010000 	andeq	r0, r1, r0
    1e4c:	00027350 	andeq	r7, r2, r0, asr r3
    1e50:	00027800 	andeq	r7, r2, r0, lsl #16
    1e54:	f3000400 	vshl.u8	d0, d0, d0
    1e58:	789f5001 	ldmvc	pc, {r0, ip, lr}	; <UNPREDICTABLE>
    1e5c:	7b000002 	blvc	1e6c <_start-0x6194>
    1e60:	01000002 	tsteq	r0, r2
    1e64:	027b5000 	rsbseq	r5, fp, #0
    1e68:	02800000 	addeq	r0, r0, #0
    1e6c:	00040000 	andeq	r0, r4, r0
    1e70:	9f5001f3 	svcls	0x005001f3
	...
    1e7c:	0000025c 	andeq	r0, r0, ip, asr r2
    1e80:	00000273 	andeq	r0, r0, r3, ror r2
    1e84:	73510001 	cmpvc	r1, #1
    1e88:	78000002 	stmdavc	r0, {r1}
    1e8c:	04000002 	streq	r0, [r0], #-2
    1e90:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1e94:	0002789f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
    1e98:	00027b00 	andeq	r7, r2, r0, lsl #22
    1e9c:	51000100 	mrspl	r0, (UNDEF: 16)
    1ea0:	0000027b 	andeq	r0, r0, fp, ror r2
    1ea4:	00000280 	andeq	r0, r0, r0, lsl #5
    1ea8:	01f30004 	mvnseq	r0, r4
    1eac:	00009f51 	andeq	r9, r0, r1, asr pc
    1eb0:	00000000 	andeq	r0, r0, r0
    1eb4:	02800000 	addeq	r0, r0, #0
    1eb8:	03180000 	tsteq	r8, #0
    1ebc:	00010000 	andeq	r0, r1, r0
    1ec0:	00031850 	andeq	r1, r3, r0, asr r8
    1ec4:	00035800 	andeq	r5, r3, r0, lsl #16
    1ec8:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    1ed4:	00000280 	andeq	r0, r0, r0, lsl #5
    1ed8:	0000031b 	andeq	r0, r0, fp, lsl r3
    1edc:	1b510001 	blne	1441ee8 <__bss_end__+0x1437608>
    1ee0:	58000003 	stmdapl	r0, {r0, r1}
    1ee4:	04000003 	streq	r0, [r0], #-3
    1ee8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1eec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1ef0:	00000000 	andeq	r0, r0, r0
    1ef4:	0002d000 	andeq	sp, r2, r0
    1ef8:	0002d400 	andeq	sp, r2, r0, lsl #8
    1efc:	56000100 	strpl	r0, [r0], -r0, lsl #2
    1f00:	000002dc 	ldrdeq	r0, [r0], -ip
    1f04:	000002e0 	andeq	r0, r0, r0, ror #5
    1f08:	e8560001 	ldmda	r6, {r0}^
    1f0c:	ec000002 	stc	0, cr0, [r0], {2}
    1f10:	01000002 	tsteq	r0, r2
    1f14:	02f45600 	rscseq	r5, r4, #0, 12
    1f18:	02f80000 	rscseq	r0, r8, #0
    1f1c:	00010000 	andeq	r0, r1, r0
    1f20:	00030056 	andeq	r0, r3, r6, asr r0
    1f24:	00030400 	andeq	r0, r3, r0, lsl #8
    1f28:	56000100 	strpl	r0, [r0], -r0, lsl #2
    1f2c:	0000030c 	andeq	r0, r0, ip, lsl #6
    1f30:	00000310 	andeq	r0, r0, r0, lsl r3
    1f34:	14560001 	ldrbne	r0, [r6], #-1
    1f38:	58000003 	stmdapl	r0, {r0, r1}
    1f3c:	01000003 	tsteq	r0, r3
    1f40:	00005600 	andeq	r5, r0, r0, lsl #12
    1f44:	00000000 	andeq	r0, r0, r0
    1f48:	02a40000 	adceq	r0, r4, #0
    1f4c:	02cc0000 	sbceq	r0, ip, #0
    1f50:	00010000 	andeq	r0, r1, r0
    1f54:	0002cc53 	andeq	ip, r2, r3, asr ip
    1f58:	0002d400 	andeq	sp, r2, r0, lsl #8
    1f5c:	70001c00 	andvc	r1, r0, r0, lsl #24
    1f60:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1f64:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1f68:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1f6c:	00000000 	andeq	r0, r0, r0
    1f70:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1f74:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1f78:	d49f2533 	ldrle	r2, [pc], #1331	; 1f80 <_start-0x6080>
    1f7c:	d8000002 	stmdale	r0, {r1}
    1f80:	01000002 	tsteq	r0, r2
    1f84:	02d85300 	sbcseq	r5, r8, #0, 6
    1f88:	02e00000 	rsceq	r0, r0, #0
    1f8c:	001c0000 	andseq	r0, ip, r0
    1f90:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    1f94:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    1f98:	cccccd08 	stclgt	13, cr12, [ip], {8}
    1f9c:	000000cc 	andeq	r0, r0, ip, asr #1
    1fa0:	20081e00 	andcs	r1, r8, r0, lsl #28
    1fa4:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1fa8:	9f25332c 	svcls	0x0025332c
    1fac:	000002e0 	andeq	r0, r0, r0, ror #5
    1fb0:	000002e4 	andeq	r0, r0, r4, ror #5
    1fb4:	e4530001 	ldrb	r0, [r3], #-1
    1fb8:	ec000002 	stc	0, cr0, [r0], {2}
    1fbc:	1c000002 	stcne	0, cr0, [r0], {2}
    1fc0:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    1fc4:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    1fc8:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1fcc:	0000cccc 	andeq	ip, r0, ip, asr #25
    1fd0:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1fd4:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1fd8:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1fdc:	0002ec9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
    1fe0:	0002f000 	andeq	pc, r2, r0
    1fe4:	53000100 	movwpl	r0, #256	; 0x100
    1fe8:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1fec:	000002f8 	strdeq	r0, [r0], -r8
    1ff0:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    1ff4:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1ff8:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1ffc:	00cccccc 	sbceq	ip, ip, ip, asr #25
    2000:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2004:	25f72008 	ldrbcs	r2, [r7, #8]!
    2008:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    200c:	02f89f25 	rscseq	r9, r8, #37, 30	; 0x94
    2010:	02fc0000 	rscseq	r0, ip, #0
    2014:	00010000 	andeq	r0, r1, r0
    2018:	0002fc53 	andeq	pc, r2, r3, asr ip	; <UNPREDICTABLE>
    201c:	00030400 	andeq	r0, r3, r0, lsl #8
    2020:	70001c00 	andvc	r1, r0, r0, lsl #24
    2024:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    2028:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    202c:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    2030:	00000000 	andeq	r0, r0, r0
    2034:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    2038:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    203c:	049f2533 	ldreq	r2, [pc], #1331	; 2044 <_start-0x5fbc>
    2040:	08000003 	stmdaeq	r0, {r0, r1}
    2044:	01000003 	tsteq	r0, r3
    2048:	03085300 	movweq	r5, #33536	; 0x8300
    204c:	03100000 	tsteq	r0, #0
    2050:	001c0000 	andseq	r0, ip, r0
    2054:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    2058:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    205c:	cccccd08 	stclgt	13, cr12, [ip], {8}
    2060:	000000cc 	andeq	r0, r0, ip, asr #1
    2064:	20081e00 	andcs	r1, r8, r0, lsl #28
    2068:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    206c:	9f25332c 	svcls	0x0025332c
    2070:	00000310 	andeq	r0, r0, r0, lsl r3
    2074:	00000314 	andeq	r0, r0, r4, lsl r3
    2078:	14530001 	ldrbne	r0, [r3], #-1
    207c:	18000003 	stmdane	r0, {r0, r1}
    2080:	1c000003 	stcne	0, cr0, [r0], {3}
    2084:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    2088:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    208c:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    2090:	0000cccc 	andeq	ip, r0, ip, asr #25
    2094:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    2098:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    209c:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    20a0:	0003189f 	muleq	r3, pc, r8	; <UNPREDICTABLE>
    20a4:	00032000 	andeq	r2, r3, r0
    20a8:	74001c00 	strvc	r1, [r0], #-3072	; 0xc00
    20ac:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    20b0:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    20b4:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    20b8:	00000000 	andeq	r0, r0, r0
    20bc:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    20c0:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    20c4:	209f2533 	addscs	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
    20c8:	24000003 	strcs	r0, [r0], #-3
    20cc:	17000003 	strne	r0, [r0, -r3]
    20d0:	f7007400 			; <UNDEFINED> instruction: 0xf7007400
    20d4:	7325f72c 	msrvc	CPSR_sc, #44, 14	; 0xb00000
    20d8:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    20dc:	20081e25 	andcs	r1, r8, r5, lsr #28
    20e0:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    20e4:	9f25332c 	svcls	0x0025332c
    20e8:	00000324 	andeq	r0, r0, r4, lsr #6
    20ec:	00000358 	andeq	r0, r0, r8, asr r3
    20f0:	0074001c 	rsbseq	r0, r4, ip, lsl r0
    20f4:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    20f8:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    20fc:	00cccccc 	sbceq	ip, ip, ip, asr #25
    2100:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2104:	25f72008 	ldrbcs	r2, [r7, #8]!
    2108:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    210c:	00009f25 	andeq	r9, r0, r5, lsr #30
    2110:	00000000 	andeq	r0, r0, r0
    2114:	031c0000 	tsteq	ip, #0
    2118:	03400000 	movteq	r0, #0
    211c:	00010000 	andeq	r0, r1, r0
    2120:	00034050 	andeq	r4, r3, r0, asr r0
    2124:	00034800 	andeq	r4, r3, r0, lsl #16
    2128:	75000900 	strvc	r0, [r0, #-2304]	; 0x900
    212c:	24007300 	strcs	r7, [r0], #-768	; 0x300
    2130:	9f210071 	svcls	0x00210071
    2134:	00000348 	andeq	r0, r0, r8, asr #6
    2138:	0000034b 	andeq	r0, r0, fp, asr #6
    213c:	00510001 	subseq	r0, r1, r1
    2140:	00000000 	andeq	r0, r0, r0
    2144:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    2148:	64000003 	strvs	r0, [r0], #-3
    214c:	01000003 	tsteq	r0, r3
    2150:	03645000 	cmneq	r4, #0
    2154:	03840000 	orreq	r0, r4, #0
    2158:	00040000 	andeq	r0, r4, r0
    215c:	9f5001f3 	svcls	0x005001f3
	...
    2168:	00000384 	andeq	r0, r0, r4, lsl #7
    216c:	00000397 	muleq	r0, r7, r3
    2170:	97500001 	ldrbls	r0, [r0, -r1]
    2174:	d0000003 	andle	r0, r0, r3
    2178:	01000003 	tsteq	r0, r3
    217c:	03d05400 	bicseq	r5, r0, #0, 8
    2180:	04080000 	streq	r0, [r8], #-0
    2184:	00040000 	andeq	r0, r4, r0
    2188:	9f5001f3 	svcls	0x005001f3
	...
    2194:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2198:	000003f4 	strdeq	r0, [r0], -r4
    219c:	f4500001 			; <UNDEFINED> instruction: 0xf4500001
    21a0:	fb000003 	blx	21b6 <_start-0x5e4a>
    21a4:	01000003 	tsteq	r0, r3
    21a8:	00005100 	andeq	r5, r0, r0, lsl #2
    21ac:	00000000 	andeq	r0, r0, r0
    21b0:	03ac0000 			; <UNDEFINED> instruction: 0x03ac0000
    21b4:	03b40000 			; <UNDEFINED> instruction: 0x03b40000
    21b8:	00010000 	andeq	r0, r1, r0
    21bc:	0003b450 	andeq	fp, r3, r0, asr r4
    21c0:	0003bb00 	andeq	fp, r3, r0, lsl #22
    21c4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    21d0:	000003cc 	andeq	r0, r0, ip, asr #7
    21d4:	000003d8 	ldrdeq	r0, [r0], -r8
    21d8:	d8500001 	ldmdale	r0, {r0}^
    21dc:	df000003 	svcle	0x00000003
    21e0:	01000003 	tsteq	r0, r3
    21e4:	00005100 	andeq	r5, r0, r0, lsl #2
    21e8:	00000000 	andeq	r0, r0, r0
    21ec:	04080000 	streq	r0, [r8], #-0
    21f0:	041b0000 	ldreq	r0, [fp], #-0
    21f4:	00010000 	andeq	r0, r1, r0
    21f8:	00041b50 	andeq	r1, r4, r0, asr fp
    21fc:	00045400 	andeq	r5, r4, r0, lsl #8
    2200:	54000100 	strpl	r0, [r0], #-256	; 0x100
    2204:	00000454 	andeq	r0, r0, r4, asr r4
    2208:	0000048c 	andeq	r0, r0, ip, lsl #9
    220c:	01f30004 	mvnseq	r0, r4
    2210:	00009f50 	andeq	r9, r0, r0, asr pc
    2214:	00000000 	andeq	r0, r0, r0
    2218:	04740000 	ldrbteq	r0, [r4], #-0
    221c:	04780000 	ldrbteq	r0, [r8], #-0
    2220:	00010000 	andeq	r0, r1, r0
    2224:	00047850 	andeq	r7, r4, r0, asr r8
    2228:	00047f00 	andeq	r7, r4, r0, lsl #30
    222c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    2238:	00000430 	andeq	r0, r0, r0, lsr r4
    223c:	00000438 	andeq	r0, r0, r8, lsr r4
    2240:	38500001 	ldmdacc	r0, {r0}^
    2244:	3f000004 	svccc	0x00000004
    2248:	01000004 	tsteq	r0, r4
    224c:	00005100 	andeq	r5, r0, r0, lsl #2
    2250:	00000000 	andeq	r0, r0, r0
    2254:	04500000 	ldrbeq	r0, [r0], #-0
    2258:	045c0000 	ldrbeq	r0, [ip], #-0
    225c:	00010000 	andeq	r0, r1, r0
    2260:	00045c50 	andeq	r5, r4, r0, asr ip
    2264:	00046300 	andeq	r6, r4, r0, lsl #6
    2268:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    2274:	0000048c 	andeq	r0, r0, ip, lsl #9
    2278:	0000049f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    227c:	9f500001 	svcls	0x00500001
    2280:	e0000004 	and	r0, r0, r4
    2284:	01000004 	tsteq	r0, r4
    2288:	04e05400 	strbteq	r5, [r0], #1024	; 0x400
    228c:	05040000 	streq	r0, [r4, #-0]
    2290:	00040000 	andeq	r0, r4, r0
    2294:	9f5001f3 	svcls	0x005001f3
    2298:	00000504 	andeq	r0, r0, r4, lsl #10
    229c:	00000508 	andeq	r0, r0, r8, lsl #10
    22a0:	08500001 	ldmdaeq	r0, {r0}^
    22a4:	10000005 	andne	r0, r0, r5
    22a8:	01000005 	tsteq	r0, r5
    22ac:	00005400 	andeq	r5, r0, r0, lsl #8
    22b0:	00000000 	andeq	r0, r0, r0
    22b4:	04b40000 	ldrteq	r0, [r4], #0
    22b8:	04c30000 	strbeq	r0, [r3], #0
    22bc:	00080000 	andeq	r0, r8, r0
    22c0:	24007431 	strcs	r7, [r0], #-1073	; 0x431
    22c4:	9f1a0070 	svcls	0x001a0070
	...
    22d0:	000004e0 	andeq	r0, r0, r0, ror #9
    22d4:	000004f8 	strdeq	r0, [r0], -r8
    22d8:	00540001 	subseq	r0, r4, r1
    22dc:	00000000 	andeq	r0, r0, r0
    22e0:	10000000 	andne	r0, r0, r0
    22e4:	23000005 	movwcs	r0, #5
    22e8:	01000005 	tsteq	r0, r5
    22ec:	05235000 	streq	r5, [r3, #-0]!
    22f0:	05480000 	strbeq	r0, [r8, #-0]
    22f4:	00010000 	andeq	r0, r1, r0
    22f8:	00054854 	andeq	r4, r5, r4, asr r8
    22fc:	00056800 	andeq	r6, r5, r0, lsl #16
    2300:	f3000400 	vshl.u8	d0, d0, d0
    2304:	009f5001 	addseq	r5, pc, r1
	...
    2310:	04000000 	streq	r0, [r0], #-0
    2314:	01000000 	mrseq	r0, (UNDEF: 0)
    2318:	00045200 	andeq	r5, r4, r0, lsl #4
    231c:	00200000 	eoreq	r0, r0, r0
    2320:	00040000 	andeq	r0, r4, r0
    2324:	9f5201f3 	svcls	0x005201f3
	...
    2334:	0000000c 	andeq	r0, r0, ip
    2338:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    233c:	14000000 	strne	r0, [r0], #-0
    2340:	03000000 	movweq	r0, #0
    2344:	9f017300 	svcls	0x00017300
    2348:	00000014 	andeq	r0, r0, r4, lsl r0
    234c:	00000020 	andeq	r0, r0, r0, lsr #32
    2350:	00530001 	subseq	r0, r3, r1
    2354:	00000000 	andeq	r0, r0, r0
    2358:	Address 0x0000000000002358 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	00008010 	andeq	r8, r0, r0, lsl r0
  14:	000000a8 	andeq	r0, r0, r8, lsr #1
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	03130002 	tsteq	r3, #2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	00008178 	andeq	r8, r0, r8, ror r1
  34:	00000058 	andeq	r0, r0, r8, asr r0
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	04a80002 	strteq	r0, [r8], #2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	000081d0 	ldrdeq	r8, [r0], -r0
  54:	0000003c 	andeq	r0, r0, ip, lsr r0
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	05bf0002 	ldreq	r0, [pc, #2]!	; 6e <_start-0x7f92>
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	0000820c 	andeq	r8, r0, ip, lsl #4
  74:	00000034 	andeq	r0, r0, r4, lsr r0
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	06b10002 	ldrteq	r0, [r1], r2
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	00008240 	andeq	r8, r0, r0, asr #4
  94:	000004f8 	strdeq	r0, [r0], -r8
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	0d360002 	ldceq	0, cr0, [r6, #-8]!
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	00008738 	andeq	r8, r0, r8, lsr r7
  b4:	00000028 	andeq	r0, r0, r8, lsr #32
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	0e390002 	cdpeq	0, 3, cr0, cr9, cr2, {0}
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	00008760 	andeq	r8, r0, r0, ror #14
  d4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	111a0002 	tstne	sl, r2
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	00008810 	andeq	r8, r0, r0, lsl r8
  f4:	00000074 	andeq	r0, r0, r4, ror r0
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	12cb0002 	sbcne	r0, fp, #2
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	00008884 	andeq	r8, r0, r4, lsl #17
 114:	00000088 	andeq	r0, r0, r8, lsl #1
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	14a70002 	strtne	r0, [r7], #2
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	0000890c 	andeq	r8, r0, ip, lsl #18
 134:	000001e8 	andeq	r0, r0, r8, ror #3
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	18990002 	ldmne	r9, {r1}
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	00008af4 	strdeq	r8, [r0], -r4
 154:	00000498 	muleq	r0, r8, r4
	...
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	227d0002 	rsbscs	r0, sp, #2
 168:	00040000 	andeq	r0, r4, r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	00008f8c 	andeq	r8, r0, ip, lsl #31
 174:	00000620 	andeq	r0, r0, r0, lsr #12
	...
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	344b0002 	strbcc	r0, [fp], #-2
 188:	00040000 	andeq	r0, r4, r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	000095ac 	andeq	r9, r0, ip, lsr #11
 194:	00000154 	andeq	r0, r0, r4, asr r1
	...
 1a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a4:	384e0002 	stmdacc	lr, {r1}^
 1a8:	00040000 	andeq	r0, r4, r0
 1ac:	00000000 	andeq	r0, r0, r0
 1b0:	000097d0 	ldrdeq	r9, [r0], -r0
 1b4:	00000568 	andeq	r0, r0, r8, ror #10
	...
 1c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c4:	40730002 	rsbsmi	r0, r3, r2
 1c8:	00040000 	andeq	r0, r4, r0
 1cc:	00000000 	andeq	r0, r0, r0
 1d0:	00009d38 	andeq	r9, r0, r8, lsr sp
 1d4:	00000020 	andeq	r0, r0, r0, lsr #32
	...
 1e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e4:	41520002 	cmpmi	r2, r2
 1e8:	00040000 	andeq	r0, r4, r0
 1ec:	00000000 	andeq	r0, r0, r0
 1f0:	00009d58 	andeq	r9, r0, r8, asr sp
 1f4:	00000050 	andeq	r0, r0, r0, asr r0
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000109 	andeq	r0, r0, r9, lsl #2
       4:	00d20002 	sbcseq	r0, r2, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
      20:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
      24:	6a6e6169 	bvs	1b985d0 <__bss_end__+0x1b8dcf0>
      28:	442f6e75 	strtmi	r6, [pc], #-3701	; 30 <_start-0x7fd0>
      2c:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
      30:	732f706f 	teqvc	pc, #111	; 0x6f
      34:	6f6f6863 	svcvs	0x006f6863
      38:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
      3c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
      40:	30323931 	eorscc	r3, r2, r1, lsr r9
      44:	3153432f 	cmpcc	r3, pc, lsr #6
      48:	2f453034 	svccs	0x00453034
      4c:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
      50:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
      54:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
      58:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
      5c:	2f006970 	svccs	0x00006970
      60:	2f727375 	svccs	0x00727375
      64:	61636f6c 	cmnvs	r3, ip, ror #30
      68:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
      6c:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
      70:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
      74:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
      78:	61652d65 	cmnvs	r5, r5, ror #26
      7c:	342f6962 	strtcc	r6, [pc], #-2402	; 84 <_start-0x7f7c>
      80:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
      84:	3173632d 	cmncc	r3, sp, lsr #6
      88:	2f653037 	svccs	0x00653037
      8c:	2f62696c 	svccs	0x0062696c
      90:	2f636367 	svccs	0x00636367
      94:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
      98:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
      9c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
      a0:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
      a4:	2f332e38 	svccs	0x00332e38
      a8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      ac:	00656475 	rsbeq	r6, r5, r5, ror r4
      b0:	742d3400 	strtvc	r3, [sp], #-1024	; 0x400
      b4:	2d747365 	ldclcs	3, cr7, [r4, #-404]!	; 0xfffffe6c
      b8:	74697865 	strbtvc	r7, [r9], #-2149	; 0x865
      bc:	0000632e 	andeq	r6, r0, lr, lsr #6
      c0:	70720000 	rsbsvc	r0, r2, r0
      c4:	00682e69 	rsbeq	r2, r8, r9, ror #28
      c8:	73000001 	movwvc	r0, #1
      cc:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
      d0:	63672d74 	cmnvs	r7, #116, 26	; 0x1d00
      d4:	00682e63 	rsbeq	r2, r8, r3, ror #28
      d8:	00000002 	andeq	r0, r0, r2
      dc:	10020500 	andne	r0, r2, r0, lsl #10
      e0:	16000080 	strne	r0, [r0], -r0, lsl #1
      e4:	2f2f4d4b 	svccs	0x002f4d4b
      e8:	2f2f2f2f 	svccs	0x002f2f2f
      ec:	322f2f6a 	eorcc	r2, pc, #424	; 0x1a8
      f0:	02002d2f 	andeq	r2, r0, #3008	; 0xbc0
      f4:	002f0204 	eoreq	r0, pc, r4, lsl #4
      f8:	65020402 	strvs	r0, [r2, #-1026]	; 0x402
      fc:	01040200 	mrseq	r0, R12_usr
     100:	4c062e06 	stcmi	14, cr2, [r6], {6}
     104:	2e694b2f 	vmulcs.f64	d20, d9, d31
     108:	01001402 	tsteq	r0, r2, lsl #8
     10c:	00010201 	andeq	r0, r1, r1, lsl #4
     110:	eb000200 	bl	918 <_start-0x76e8>
     114:	02000000 	andeq	r0, r0, #0
     118:	0d0efb01 	vstreq	d15, [lr, #-4]
     11c:	01010100 	mrseq	r0, (UNDEF: 17)
     120:	00000001 	andeq	r0, r0, r1
     124:	01000001 	tsteq	r0, r1
     128:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
     12c:	73752f00 	cmnvc	r5, #0, 30
     130:	6f6c2f72 	svcvs	0x006c2f72
     134:	2f6c6163 	svccs	0x006c6163
     138:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
     13c:	612f7261 	teqvs	pc, r1, ror #4
     140:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     144:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     148:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     14c:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
     150:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
     154:	30373173 	eorscc	r3, r7, r3, ror r1
     158:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     15c:	63672f62 	cmnvs	r7, #392	; 0x188
     160:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
     164:	6f6e2d6d 	svcvs	0x006e2d6d
     168:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     16c:	2f696261 	svccs	0x00696261
     170:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
     174:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
     178:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     17c:	552f0065 	strpl	r0, [pc, #-101]!	; 11f <_start-0x7ee1>
     180:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     184:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
     188:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
     18c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
     190:	6f746b73 	svcvs	0x00746b73
     194:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
     198:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 0 <_start-0x8000>
     19c:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
     1a0:	31726574 	cmncc	r2, r4, ror r5
     1a4:	2f303239 	svccs	0x00303239
     1a8:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
     1ac:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
     1b0:	30343173 	eorscc	r3, r4, r3, ror r1
     1b4:	30322d65 	eorscc	r2, r2, r5, ror #26
     1b8:	2f6e6977 	svccs	0x006e6977
     1bc:	7062696c 	rsbvc	r6, r2, ip, ror #18
     1c0:	70000069 	andvc	r0, r0, r9, rrx
     1c4:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
     1c8:	00632e6b 	rsbeq	r2, r3, fp, ror #28
     1cc:	73000001 	movwvc	r0, #1
     1d0:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
     1d4:	00682e67 	rsbeq	r2, r8, r7, ror #28
     1d8:	3c000002 	stccc	0, cr0, [r0], {2}
     1dc:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
     1e0:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
     1e4:	0000003e 	andeq	r0, r0, lr, lsr r0
     1e8:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
     1ec:	0300682e 	movweq	r6, #2094	; 0x82e
     1f0:	61760000 	cmnvs	r6, r0
     1f4:	6972702d 	ldmdbvs	r2!, {r0, r2, r3, r5, ip, sp, lr}^
     1f8:	2e6b746e 	cdpcs	4, 6, cr7, cr11, cr14, {3}
     1fc:	00010068 	andeq	r0, r1, r8, rrx
     200:	05000000 	streq	r0, [r0, #-0]
     204:	00817802 	addeq	r7, r1, r2, lsl #16
     208:	4b6b1700 	blmi	1ac5e10 <__bss_end__+0x1abb530>
     20c:	0e0289bf 	mcreq	9, 0, r8, cr2, cr15, {5}
     210:	8a010100 	bhi	40618 <__bss_end__+0x35d38>
     214:	02000000 	andeq	r0, r0, #0
     218:	00007200 	andeq	r7, r0, r0, lsl #4
     21c:	fb010200 	blx	40a26 <__bss_end__+0x36146>
     220:	01000d0e 	tsteq	r0, lr, lsl #26
     224:	00010101 	andeq	r0, r1, r1, lsl #2
     228:	00010000 	andeq	r0, r1, r0
     22c:	696c0100 	stmdbvs	ip!, {r8}^
     230:	2f006362 	svccs	0x00006362
     234:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     238:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
     23c:	6a6e6169 	bvs	1b987e8 <__bss_end__+0x1b8df08>
     240:	442f6e75 	strtmi	r6, [pc], #-3701	; 248 <_start-0x7db8>
     244:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
     248:	732f706f 	teqvc	pc, #111	; 0x6f
     24c:	6f6f6863 	svcvs	0x006f6863
     250:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     254:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     258:	30323931 	eorscc	r3, r2, r1, lsr r9
     25c:	3153432f 	cmpcc	r3, pc, lsr #6
     260:	2f453034 	svccs	0x00453034
     264:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
     268:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
     26c:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
     270:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     274:	00006970 	andeq	r6, r0, r0, ror r9
     278:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
     27c:	2e726168 	rpwcssz	f6, f2, #0.0
     280:	00010063 	andeq	r0, r1, r3, rrx
     284:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
     288:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     28c:	00000000 	andeq	r0, r0, r0
     290:	81d00205 	bicshi	r0, r0, r5, lsl #4
     294:	4a140000 	bmi	50029c <__bss_end__+0x4f59bc>
     298:	13bc136b 			; <UNDEFINED> instruction: 0x13bc136b
     29c:	01000802 	tsteq	r0, r2, lsl #16
     2a0:	00009601 	andeq	r9, r0, r1, lsl #12
     2a4:	6f000200 	svcvs	0x00000200
     2a8:	02000000 	andeq	r0, r0, #0
     2ac:	0d0efb01 	vstreq	d15, [lr, #-4]
     2b0:	01010100 	mrseq	r0, (UNDEF: 17)
     2b4:	00000001 	andeq	r0, r0, r1
     2b8:	01000001 	tsteq	r0, r1
     2bc:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
     2c0:	73552f00 	cmpvc	r5, #0, 30
     2c4:	2f737265 	svccs	0x00737265
     2c8:	61697262 	cmnvs	r9, r2, ror #4
     2cc:	6e756a6e 	vsubvs.f32	s13, s10, s29
     2d0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     2d4:	706f746b 	rsbvc	r7, pc, fp, ror #8
     2d8:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
     2dc:	2f6c6f6f 	svccs	0x006c6f6f
     2e0:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
     2e4:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
     2e8:	432f3032 	teqmi	pc, #50	; 0x32
     2ec:	30343153 	eorscc	r3, r4, r3, asr r1
     2f0:	73632f45 	cmnvc	r3, #276	; 0x114
     2f4:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
     2f8:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
     2fc:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 160 <_start-0x7ea0>
     300:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
     304:	75700000 	ldrbvc	r0, [r0, #-0]!
     308:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
     30c:	00000100 	andeq	r0, r0, r0, lsl #2
     310:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
     314:	00020068 	andeq	r0, r2, r8, rrx
     318:	05000000 	streq	r0, [r0, #-0]
     31c:	00820c02 	addeq	r0, r2, r2, lsl #24
     320:	2d4c1500 	cfstr64cs	mvdx1, [ip, #-0]
     324:	02040200 	andeq	r0, r4, #0, 4
     328:	0402002f 	streq	r0, [r2], #-47	; 0x2f
     32c:	02004902 	andeq	r4, r0, #32768	; 0x8000
     330:	2e060104 	adfcss	f0, f6, f4
     334:	06026b06 	streq	r6, [r2], -r6, lsl #22
     338:	de010100 	adfles	f0, f1, f0
     33c:	02000001 	andeq	r0, r0, #1
     340:	0000df00 	andeq	sp, r0, r0, lsl #30
     344:	fb010200 	blx	40b4e <__bss_end__+0x3626e>
     348:	01000d0e 	tsteq	r0, lr, lsl #26
     34c:	00010101 	andeq	r0, r1, r1, lsl #2
     350:	00010000 	andeq	r0, r1, r0
     354:	696c0100 	stmdbvs	ip!, {r8}^
     358:	2f006362 	svccs	0x00006362
     35c:	2f727375 	svccs	0x00727375
     360:	61636f6c 	cmnvs	r3, ip, ror #30
     364:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
     368:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
     36c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     370:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     374:	61652d65 	cmnvs	r5, r5, ror #26
     378:	342f6962 	strtcc	r6, [pc], #-2402	; 380 <_start-0x7c80>
     37c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
     380:	3173632d 	cmncc	r3, sp, lsr #6
     384:	2f653037 	svccs	0x00653037
     388:	2f62696c 	svccs	0x0062696c
     38c:	2f636367 	svccs	0x00636367
     390:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     394:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     398:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     39c:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
     3a0:	2f332e38 	svccs	0x00332e38
     3a4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     3a8:	00656475 	rsbeq	r6, r5, r5, ror r4
     3ac:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
     3b0:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
     3b4:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
     3b8:	2f6e756a 	svccs	0x006e756a
     3bc:	6b736544 	blvs	1cd98d4 <__bss_end__+0x1cceff4>
     3c0:	2f706f74 	svccs	0x00706f74
     3c4:	6f686373 	svcvs	0x00686373
     3c8:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
     3cc:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
     3d0:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
     3d4:	53432f30 	movtpl	r2, #16176	; 0x3f30
     3d8:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
     3dc:	3173632f 	cmncc	r3, pc, lsr #6
     3e0:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
     3e4:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
     3e8:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     3ec:	00697062 	rsbeq	r7, r9, r2, rrx
     3f0:	2d617600 	stclcs	6, cr7, [r1, #-0]
     3f4:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
     3f8:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
     3fc:	00000100 	andeq	r0, r0, r0, lsl #2
     400:	61647473 	smcvs	18243	; 0x4743
     404:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
     408:	00000200 	andeq	r0, r0, r0, lsl #4
     40c:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
     410:	00030068 	andeq	r0, r3, r8, rrx
     414:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xc00
     418:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
     41c:	003e6e69 	eorseq	r6, lr, r9, ror #28
     420:	00000000 	andeq	r0, r0, r0
     424:	40020500 	andmi	r0, r2, r0, lsl #10
     428:	03000082 	movweq	r0, #130	; 0x82
     42c:	a5010126 	strge	r0, [r1, #-294]	; 0x126
     430:	002d3113 	eoreq	r3, sp, r3, lsl r1
     434:	2f020402 	svccs	0x00020402
     438:	02040200 	andeq	r0, r4, #0, 4
     43c:	0402002d 	streq	r0, [r2], #-45	; 0x2d
     440:	02002f02 	andeq	r2, r0, #2, 30
     444:	4c2d0104 	stfmis	f0, [sp], #-16
     448:	4b14304c 	blmi	50c580 <__bss_end__+0x501ca0>
     44c:	02004f2f 	andeq	r4, r0, #47, 30	; 0xbc
     450:	00670204 	rsbeq	r0, r7, r4, lsl #4
     454:	65010402 	strvs	r0, [r1, #-1026]	; 0x402
     458:	a0304d4c 	eorsge	r4, r0, ip, asr #26
     45c:	0230312f 	eorseq	r3, r0, #-1073741813	; 0xc000000b
     460:	2d841626 	stccs	6, cr1, [r4, #152]	; 0x98
     464:	0402002c 	streq	r0, [r2], #-44	; 0x2c
     468:	02003001 	andeq	r3, r0, #1
     46c:	06330104 	ldrteq	r0, [r3], -r4, lsl #2
     470:	04020066 	streq	r0, [r2], #-102	; 0x66
     474:	02002e01 	andeq	r2, r0, #1, 28
     478:	08060104 	stmdaeq	r6, {r2, r8}
     47c:	032f6721 	teqeq	pc, #8650752	; 0x840000
     480:	13038273 	movwne	r8, #12915	; 0x3273
     484:	0402002e 	streq	r0, [r2], #-46	; 0x2e
     488:	002e0601 	eoreq	r0, lr, r1, lsl #12
     48c:	06010402 	streq	r0, [r1], -r2, lsl #8
     490:	034b6a9f 	movteq	r6, #47775	; 0xba9f
     494:	21032e67 	tstcs	r3, r7, ror #28
     498:	0402002e 	streq	r0, [r2], #-46	; 0x2e
     49c:	002e0601 	eoreq	r0, lr, r1, lsl #12
     4a0:	06010402 	streq	r0, [r1], -r2, lsl #8
     4a4:	0402009f 	streq	r0, [r2], #-159	; 0x9f
     4a8:	f3d96a01 	vmlsl.u16	q11, d9, d1
     4ac:	087fa603 	ldmdaeq	pc!, {r0, r1, r9, sl, sp, pc}^	; <UNPREDICTABLE>
     4b0:	02002f20 	andeq	r2, r0, #32, 30	; 0x80
     4b4:	4a060104 	bmi	1808cc <__bss_end__+0x175fec>
     4b8:	2f4bd706 	svccs	0x004bd706
     4bc:	f200da03 	vpmax.s8	d13, d0, d3
     4c0:	03484c83 	movteq	r4, #35971	; 0x8c83
     4c4:	75032e0e 	strvc	r2, [r3, #-3598]	; 0xe0e
     4c8:	842f2f2e 	strthi	r2, [pc], #-3886	; 4d0 <_start-0x7b30>
     4cc:	4d2d2f4b 	stcmi	15, cr2, [sp, #-300]!	; 0xfffffed4
     4d0:	832f3031 	teqhi	pc, #49	; 0x31
     4d4:	01040200 	mrseq	r0, R12_usr
     4d8:	0200a22c 	andeq	sl, r0, #44, 4	; 0xc0000002
     4dc:	4a060104 	bmi	1808f4 <__bss_end__+0x176014>
     4e0:	3602d806 	strcc	sp, [r2], -r6, lsl #16
     4e4:	d60e0316 			; <UNDEFINED> instruction: 0xd60e0316
     4e8:	f3302108 	vrhadd.u<illegal width 64>	d2, d0, d8
     4ec:	f330f331 	vcge.u<illegal width 64>	d15, d0, d17
     4f0:	f3304b30 			; <UNDEFINED> instruction: 0xf3304b30
     4f4:	31230830 	teqcc	r3, r0, lsr r8
     4f8:	0402002f 	streq	r0, [r2], #-47	; 0x2f
     4fc:	02006501 	andeq	r6, r0, #4194304	; 0x400000
     500:	4a060204 	bmi	180d18 <__bss_end__+0x176438>
     504:	01040200 	mrseq	r0, R12_usr
     508:	66420306 	strbvs	r0, [r2], -r6, lsl #6
     50c:	02040200 	andeq	r0, r4, #0, 4
     510:	03066606 	movweq	r6, #26118	; 0x6606
     514:	684a00c2 	stmdavs	sl, {r1, r6, r7}^
     518:	01001002 	tsteq	r0, r2
     51c:	00009301 	andeq	r9, r0, r1, lsl #6
     520:	7d000200 	sfmvc	f0, 4, [r0, #-0]
     524:	02000000 	andeq	r0, r0, #0
     528:	0d0efb01 	vstreq	d15, [lr, #-4]
     52c:	01010100 	mrseq	r0, (UNDEF: 17)
     530:	00000001 	andeq	r0, r0, r1
     534:	01000001 	tsteq	r0, r1
     538:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
     53c:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
     540:	2f006372 	svccs	0x00006372
     544:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     548:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
     54c:	6a6e6169 	bvs	1b98af8 <__bss_end__+0x1b8e218>
     550:	442f6e75 	strtmi	r6, [pc], #-3701	; 558 <_start-0x7aa8>
     554:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
     558:	732f706f 	teqvc	pc, #111	; 0x6f
     55c:	6f6f6863 	svcvs	0x006f6863
     560:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     564:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     568:	30323931 	eorscc	r3, r2, r1, lsr r9
     56c:	3153432f 	cmpcc	r3, pc, lsr #6
     570:	2f453034 	svccs	0x00453034
     574:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
     578:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
     57c:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
     580:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     584:	00006970 	andeq	r6, r0, r0, ror r9
     588:	61656c63 	cmnvs	r5, r3, ror #24
     58c:	65722d6e 	ldrbvs	r2, [r2, #-3438]!	; 0xd6e
     590:	746f6f62 	strbtvc	r6, [pc], #-3938	; 598 <_start-0x7a68>
     594:	0100632e 	tsteq	r0, lr, lsr #6
     598:	70720000 	rsbsvc	r0, r2, r0
     59c:	00682e69 	rsbeq	r2, r8, r9, ror #28
     5a0:	00000002 	andeq	r0, r0, r2
     5a4:	38020500 	stmdacc	r2, {r8, sl}
     5a8:	15000087 	strne	r0, [r0, #-135]	; 0x87
     5ac:	024b832f 	subeq	r8, fp, #-1140850688	; 0xbc000000
     5b0:	01010006 	tsteq	r1, r6
     5b4:	00000121 	andeq	r0, r0, r1, lsr #2
     5b8:	00f80002 	rscseq	r0, r8, r2
     5bc:	01020000 	mrseq	r0, (UNDEF: 2)
     5c0:	000d0efb 	strdeq	r0, [sp], -fp
     5c4:	01010101 	tsteq	r1, r1, lsl #2
     5c8:	01000000 	mrseq	r0, (UNDEF: 0)
     5cc:	63010000 	movwvs	r0, #4096	; 0x1000
     5d0:	30343173 	eorscc	r3, r4, r3, ror r1
     5d4:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
     5d8:	752f0063 	strvc	r0, [pc, #-99]!	; 57d <_start-0x7a83>
     5dc:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 418 <_start-0x7be8>
     5e0:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
     5e4:	6c65432f 	stclvs	3, cr4, [r5], #-188	; 0xffffff44
     5e8:	2f72616c 	svccs	0x0072616c
     5ec:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     5f0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     5f4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     5f8:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
     5fc:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
     600:	37317363 	ldrcc	r7, [r1, -r3, ror #6]!
     604:	6c2f6530 	cfstr32vs	mvfx6, [pc], #-192	; 54c <_start-0x7ab4>
     608:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
     60c:	612f6363 	teqvs	pc, r3, ror #6
     610:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     614:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     618:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     61c:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
     620:	692f332e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, r9, ip, sp}	; <UNPREDICTABLE>
     624:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     628:	2f006564 	svccs	0x00006564
     62c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     630:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
     634:	6a6e6169 	bvs	1b98be0 <__bss_end__+0x1b8e300>
     638:	442f6e75 	strtmi	r6, [pc], #-3701	; 640 <_start-0x79c0>
     63c:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
     640:	732f706f 	teqvc	pc, #111	; 0x6f
     644:	6f6f6863 	svcvs	0x006f6863
     648:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     64c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     650:	30323931 	eorscc	r3, r2, r1, lsr r9
     654:	3153432f 	cmpcc	r3, pc, lsr #6
     658:	2f453034 	svccs	0x00453034
     65c:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
     660:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
     664:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
     668:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     66c:	00006970 	andeq	r6, r0, r0, ror r9
     670:	61747363 	cmnvs	r4, r3, ror #6
     674:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
     678:	00000100 	andeq	r0, r0, r0, lsl #2
     67c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     680:	672d746e 	strvs	r7, [sp, -lr, ror #8]!
     684:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
     688:	00000200 	andeq	r0, r0, r0, lsl #4
     68c:	752d7773 	strvc	r7, [sp, #-1907]!	; 0x773
     690:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
     694:	00010068 	andeq	r0, r1, r8, rrx
     698:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
     69c:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 4d4 <_start-0x7b2c>
     6a0:	6f6c622d 	svcvs	0x006c622d
     6a4:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     6a8:	00000100 	andeq	r0, r0, r0, lsl #2
     6ac:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
     6b0:	00030068 	andeq	r0, r3, r8, rrx
     6b4:	05000000 	streq	r0, [r0, #-0]
     6b8:	00876002 	addeq	r6, r7, r2
     6bc:	684b1700 	stmdavs	fp, {r8, r9, sl, ip}^
     6c0:	2f313268 	svccs	0x00313268
     6c4:	02002f2d 	andeq	r2, r0, #45, 30	; 0xb4
     6c8:	4f490104 	svcmi	0x00490104
     6cc:	67674b2f 	strbvs	r4, [r7, -pc, lsr #22]!
     6d0:	2f4e6783 	svccs	0x004e6783
     6d4:	01001002 	tsteq	r0, r2
     6d8:	00009901 	andeq	r9, r0, r1, lsl #18
     6dc:	77000200 	strvc	r0, [r0, -r0, lsl #4]
     6e0:	02000000 	andeq	r0, r0, #0
     6e4:	0d0efb01 	vstreq	d15, [lr, #-4]
     6e8:	01010100 	mrseq	r0, (UNDEF: 17)
     6ec:	00000001 	andeq	r0, r0, r1
     6f0:	01000001 	tsteq	r0, r1
     6f4:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
     6f8:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
     6fc:	2f006372 	svccs	0x00006372
     700:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     704:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
     708:	6a6e6169 	bvs	1b98cb4 <__bss_end__+0x1b8e3d4>
     70c:	442f6e75 	strtmi	r6, [pc], #-3701	; 714 <_start-0x78ec>
     710:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
     714:	732f706f 	teqvc	pc, #111	; 0x6f
     718:	6f6f6863 	svcvs	0x006f6863
     71c:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     720:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     724:	30323931 	eorscc	r3, r2, r1, lsr r9
     728:	3153432f 	cmpcc	r3, pc, lsr #6
     72c:	2f453034 	svccs	0x00453034
     730:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
     734:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
     738:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
     73c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     740:	00006970 	andeq	r6, r0, r0, ror r9
     744:	6f626572 	svcvs	0x00626572
     748:	632e746f 	teqvs	lr, #1862270976	; 0x6f000000
     74c:	00000100 	andeq	r0, r0, r0, lsl #2
     750:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
     754:	00020068 	andeq	r0, r2, r8, rrx
     758:	05000000 	streq	r0, [r0, #-0]
     75c:	00881002 	addeq	r1, r8, r2
     760:	010d0300 	mrseq	r0, SP_mon
     764:	852f3114 	strhi	r3, [pc, #-276]!	; 658 <_start-0x79a8>
     768:	4d4b2f15 	stclmi	15, cr2, [fp, #-84]	; 0xffffffac
     76c:	5235672f 	eorspl	r6, r5, #12320768	; 0xbc0000
     770:	00100267 	andseq	r0, r0, r7, ror #4
     774:	00a30101 	adceq	r0, r3, r1, lsl #2
     778:	00020000 	andeq	r0, r2, r0
     77c:	00000076 	andeq	r0, r0, r6, ror r0
     780:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     784:	0101000d 	tsteq	r1, sp
     788:	00000101 	andeq	r0, r0, r1, lsl #2
     78c:	00000100 	andeq	r0, r0, r0, lsl #2
     790:	31736301 	cmncc	r3, r1, lsl #6
     794:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
     798:	00637273 	rsbeq	r7, r3, r3, ror r2
     79c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
     7a0:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
     7a4:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
     7a8:	2f6e756a 	svccs	0x006e756a
     7ac:	6b736544 	blvs	1cd9cc4 <__bss_end__+0x1ccf3e4>
     7b0:	2f706f74 	svccs	0x00706f74
     7b4:	6f686373 	svcvs	0x00686373
     7b8:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
     7bc:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
     7c0:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
     7c4:	53432f30 	movtpl	r2, #16176	; 0x3f30
     7c8:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
     7cc:	3173632f 	cmncc	r3, pc, lsr #6
     7d0:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
     7d4:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
     7d8:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     7dc:	00697062 	rsbeq	r7, r9, r2, rrx
     7e0:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
     7e4:	632e7265 	teqvs	lr, #1342177286	; 0x50000006
     7e8:	00000100 	andeq	r0, r0, r0, lsl #2
     7ec:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
     7f0:	00020068 	andeq	r0, r2, r8, rrx
     7f4:	05000000 	streq	r0, [r0, #-0]
     7f8:	00888402 	addeq	r8, r8, r2, lsl #8
     7fc:	2f131600 	svccs	0x00131600
     800:	0402002d 	streq	r0, [r2], #-45	; 0x2d
     804:	062e0601 	strteq	r0, [lr], -r1, lsl #12
     808:	4b2f3168 	blmi	bccdb0 <__bss_end__+0xbc24d0>
     80c:	3031324d 	eorscc	r3, r1, sp, asr #4
     810:	6a2f4c4b 	bvs	bd3944 <__bss_end__+0xbc9064>
     814:	2f842f2f 	svccs	0x00842f2f
     818:	01000802 	tsteq	r0, r2, lsl #16
     81c:	00017601 	andeq	r7, r1, r1, lsl #12
     820:	20000200 	andcs	r0, r0, r0, lsl #4
     824:	02000001 	andeq	r0, r0, #1
     828:	0d0efb01 	vstreq	d15, [lr, #-4]
     82c:	01010100 	mrseq	r0, (UNDEF: 17)
     830:	00000001 	andeq	r0, r0, r1
     834:	01000001 	tsteq	r0, r1
     838:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
     83c:	2f006372 	svccs	0x00006372
     840:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     844:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
     848:	6a6e6169 	bvs	1b98df4 <__bss_end__+0x1b8e514>
     84c:	442f6e75 	strtmi	r6, [pc], #-3701	; 854 <_start-0x77ac>
     850:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
     854:	732f706f 	teqvc	pc, #111	; 0x6f
     858:	6f6f6863 	svcvs	0x006f6863
     85c:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     860:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     864:	30323931 	eorscc	r3, r2, r1, lsr r9
     868:	3153432f 	cmpcc	r3, pc, lsr #6
     86c:	2f453034 	svccs	0x00453034
     870:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
     874:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
     878:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
     87c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     880:	2f006970 	svccs	0x00006970
     884:	2f727375 	svccs	0x00727375
     888:	61636f6c 	cmnvs	r3, ip, ror #30
     88c:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
     890:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
     894:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     898:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     89c:	61652d65 	cmnvs	r5, r5, ror #26
     8a0:	342f6962 	strtcc	r6, [pc], #-2402	; 8a8 <_start-0x7758>
     8a4:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
     8a8:	3173632d 	cmncc	r3, sp, lsr #6
     8ac:	2f653037 	svccs	0x00653037
     8b0:	2f62696c 	svccs	0x0062696c
     8b4:	2f636367 	svccs	0x00636367
     8b8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     8bc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     8c0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     8c4:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
     8c8:	2f332e38 	svccs	0x00332e38
     8cc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     8d0:	00656475 	rsbeq	r6, r5, r5, ror r4
     8d4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     8d8:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
     8dc:	432f6c61 	teqmi	pc, #24832	; 0x6100
     8e0:	616c6c65 	cmnvs	ip, r5, ror #24
     8e4:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
     8e8:	6f6e2d6d 	svcvs	0x006e2d6d
     8ec:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     8f0:	2f696261 	svccs	0x00696261
     8f4:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
     8f8:	73632d33 	cmnvc	r3, #3264	; 0xcc0
     8fc:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
     900:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     904:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     908:	61652d65 	cmnvs	r5, r5, ror #26
     90c:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
     910:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     914:	00006564 	andeq	r6, r0, r4, ror #10
     918:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
     91c:	2e636f6c 	cdpcs	15, 6, cr6, cr3, cr12, {3}
     920:	00010063 	andeq	r0, r1, r3, rrx
     924:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
     928:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     92c:	74730000 	ldrbtvc	r0, [r3], #-0
     930:	66656464 	strbtvs	r6, [r5], -r4, ror #8
     934:	0300682e 	movweq	r6, #2094	; 0x82e
     938:	74730000 	ldrbtvc	r0, [r3], #-0
     93c:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     940:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
     944:	00000000 	andeq	r0, r0, r0
     948:	890c0205 	stmdbhi	ip, {r0, r2, r9}
     94c:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
     950:	02002f01 	andeq	r2, r0, #1, 30
     954:	82060104 	andhi	r0, r6, #4, 2
     958:	4b4bd806 	blmi	12f6978 <__bss_end__+0x12ec098>
     95c:	2fbe6a83 	svccs	0x00be6a83
     960:	01040200 	mrseq	r0, R12_usr
     964:	d8068206 	stmdale	r6, {r1, r2, r9, pc}
     968:	02004b4b 	andeq	r4, r0, #76800	; 0x12c00
     96c:	4a060104 	bmi	180d84 <__bss_end__+0x1764a4>
     970:	834bd706 	movthi	sp, #46854	; 0xb706
     974:	0a032f30 	beq	cc63c <__bss_end__+0xc1d5c>
     978:	02002fba 	andeq	r2, r0, #744	; 0x2e8
     97c:	82060104 	andhi	r0, r6, #4, 2
     980:	f967d706 			; <UNDEFINED> instruction: 0xf967d706
     984:	8414c213 	ldrhi	ip, [r4], #-531	; 0x213
     988:	0402002f 	streq	r0, [r2], #-47	; 0x2f
     98c:	06820601 	streq	r0, [r2], r1, lsl #12
     990:	0c0267d7 	stceq	7, cr6, [r2], {215}	; 0xd7
     994:	8e010100 	adfhis	f0, f1, f0
     998:	02000001 	andeq	r0, r0, #1
     99c:	0000df00 	andeq	sp, r0, r0, lsl #30
     9a0:	fb010200 	blx	411aa <__bss_end__+0x368ca>
     9a4:	01000d0e 	tsteq	r0, lr, lsl #26
     9a8:	00010101 	andeq	r0, r1, r1, lsl #2
     9ac:	00010000 	andeq	r0, r1, r0
     9b0:	796d0100 	stmdbvc	sp!, {r8}^
     9b4:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
     9b8:	73552f00 	cmpvc	r5, #0, 30
     9bc:	2f737265 	svccs	0x00737265
     9c0:	61697262 	cmnvs	r9, r2, ror #4
     9c4:	6e756a6e 	vsubvs.f32	s13, s10, s29
     9c8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     9cc:	706f746b 	rsbvc	r7, pc, fp, ror #8
     9d0:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
     9d4:	2f6c6f6f 	svccs	0x006c6f6f
     9d8:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
     9dc:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
     9e0:	432f3032 	teqmi	pc, #50	; 0x32
     9e4:	30343153 	eorscc	r3, r4, r3, asr r1
     9e8:	73632f45 	cmnvc	r3, #276	; 0x114
     9ec:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
     9f0:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
     9f4:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 858 <_start-0x77a8>
     9f8:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
     9fc:	73752f00 	cmnvc	r5, #0, 30
     a00:	6f6c2f72 	svcvs	0x006c2f72
     a04:	2f6c6163 	svccs	0x006c6163
     a08:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
     a0c:	612f7261 	teqvs	pc, r1, ror #4
     a10:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     a14:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     a18:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     a1c:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
     a20:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
     a24:	30373173 	eorscc	r3, r7, r3, ror r1
     a28:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     a2c:	63672f62 	cmnvs	r7, #392	; 0x188
     a30:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
     a34:	6f6e2d6d 	svcvs	0x006e2d6d
     a38:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     a3c:	2f696261 	svccs	0x00696261
     a40:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
     a44:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
     a48:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     a4c:	51000065 	tstpl	r0, r5, rrx
     a50:	0100682e 	tsteq	r0, lr, lsr #16
     a54:	70720000 	rsbsvc	r0, r2, r0
     a58:	68742d69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, sl, fp, sp}^
     a5c:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
     a60:	0100632e 	tsteq	r0, lr, lsr #6
     a64:	70720000 	rsbsvc	r0, r2, r0
     a68:	00682e69 	rsbeq	r2, r8, r9, ror #28
     a6c:	73000002 	movwvc	r0, #2
     a70:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     a74:	63672d74 	cmnvs	r7, #116, 26	; 0x1d00
     a78:	00682e63 	rsbeq	r2, r8, r3, ror #28
     a7c:	00000003 	andeq	r0, r0, r3
     a80:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
     a84:	0300008a 	movweq	r0, #138	; 0x8a
     a88:	0301010f 	movweq	r0, #4367	; 0x110f
     a8c:	4b134a1b 	blmi	4d3300 <__bss_end__+0x4c8a20>
     a90:	2f686767 	svccs	0x00686767
     a94:	4b67134f 	blmi	19c57d8 <__bss_end__+0x19baef8>
     a98:	02044b2f 	andeq	r4, r4, #48128	; 0xbc00
     a9c:	4c4a6c03 	mcrrmi	12, 0, r6, sl, cr3
     aa0:	68030104 	stmdavs	r3, {r2, r8}
     aa4:	00684b82 	rsbeq	r4, r8, r2, lsl #23
     aa8:	06010402 	streq	r0, [r1], -r2, lsl #8
     aac:	00d70666 	sbcseq	r0, r7, r6, ror #12
     ab0:	06010402 	streq	r0, [r1], -r2, lsl #8
     ab4:	4dd40666 	ldclmi	6, cr0, [r4, #408]	; 0x198
     ab8:	002fa12f 	eoreq	sl, pc, pc, lsr #2
     abc:	06010402 	streq	r0, [r1], -r2, lsl #8
     ac0:	2fd8064a 	svccs	0x00d8064a
     ac4:	0402004b 	streq	r0, [r2], #-75	; 0x4b
     ac8:	06660601 	strbteq	r0, [r6], -r1, lsl #12
     acc:	2f4b67d9 	svccs	0x004b67d9
     ad0:	4a7a032f 	bmi	1e81794 <__bss_end__+0x1e76eb4>
     ad4:	03020435 	movweq	r0, #9269	; 0x2435
     ad8:	4d2f9e73 	stcmi	14, cr9, [pc, #-460]!	; 914 <_start-0x76ec>
     adc:	0084674b 	addeq	r6, r4, fp, asr #14
     ae0:	06010402 	streq	r0, [r1], -r2, lsl #8
     ae4:	a0d7064a 	sbcsge	r0, r7, sl, asr #12
     ae8:	14d66e03 	ldrbne	r6, [r6], #3587	; 0xe03
     aec:	67821c03 	strvs	r1, [r2, r3, lsl #24]
     af0:	4b302f51 	blmi	c0c83c <__bss_end__+0xc01f5c>
     af4:	03856868 	orreq	r6, r5, #104, 16	; 0x680000
     af8:	4c4b2e0a 	mcrrmi	14, 0, r2, fp, cr10
     afc:	bf688483 	svclt	0x00688483
     b00:	834b8535 	movthi	r8, #46389	; 0xb535
     b04:	9e230383 	cdpls	3, 2, cr0, cr3, cr3, {4}
     b08:	3067834d 	rsbcc	r8, r7, sp, asr #6
     b0c:	867a0867 	ldrbthi	r0, [sl], -r7, ror #16
     b10:	f254034b 	vcgt.s16	q8, q2, <illegal reg q5.5>
     b14:	67358435 			; <UNDEFINED> instruction: 0x67358435
     b18:	1b034c83 	blne	d3d2c <__bss_end__+0xc944c>
     b1c:	44082fba 	strmi	r2, [r8], #-4026	; 0xfba
     b20:	2f42082f 	svccs	0x0042082f
     b24:	01001402 	tsteq	r0, r2, lsl #8
     b28:	00034501 	andeq	r4, r3, r1, lsl #10
     b2c:	bd000200 	sfmlt	f0, 4, [r0, #-0]
     b30:	02000001 	andeq	r0, r0, #1
     b34:	0d0efb01 	vstreq	d15, [lr, #-4]
     b38:	01010100 	mrseq	r0, (UNDEF: 17)
     b3c:	00000001 	andeq	r0, r0, r1
     b40:	01000001 	tsteq	r0, r1
     b44:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
     b48:	2f006372 	svccs	0x00006372
     b4c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     b50:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
     b54:	6a6e6169 	bvs	1b99100 <__bss_end__+0x1b8e820>
     b58:	442f6e75 	strtmi	r6, [pc], #-3701	; b60 <_start-0x74a0>
     b5c:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
     b60:	732f706f 	teqvc	pc, #111	; 0x6f
     b64:	6f6f6863 	svcvs	0x006f6863
     b68:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     b6c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     b70:	30323931 	eorscc	r3, r2, r1, lsr r9
     b74:	3153432f 	cmpcc	r3, pc, lsr #6
     b78:	2f453034 	svccs	0x00453034
     b7c:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
     b80:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
     b84:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
     b88:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     b8c:	632f6970 	teqvs	pc, #112, 18	; 0x1c0000
     b90:	30343173 	eorscc	r3, r4, r3, ror r1
     b94:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
     b98:	752f0063 	strvc	r0, [pc, #-99]!	; b3d <_start-0x74c3>
     b9c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 9d8 <_start-0x7628>
     ba0:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
     ba4:	6c65432f 	stclvs	3, cr4, [r5], #-188	; 0xffffff44
     ba8:	2f72616c 	svccs	0x0072616c
     bac:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     bb0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     bb4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     bb8:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
     bbc:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
     bc0:	37317363 	ldrcc	r7, [r1, -r3, ror #6]!
     bc4:	6c2f6530 	cfstr32vs	mvfx6, [pc], #-192	; b0c <_start-0x74f4>
     bc8:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
     bcc:	612f6363 	teqvs	pc, r3, ror #6
     bd0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     bd4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     bd8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     bdc:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
     be0:	692f332e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, r9, ip, sp}	; <UNPREDICTABLE>
     be4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     be8:	2f006564 	svccs	0x00006564
     bec:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     bf0:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
     bf4:	6a6e6169 	bvs	1b991a0 <__bss_end__+0x1b8e8c0>
     bf8:	442f6e75 	strtmi	r6, [pc], #-3701	; c00 <_start-0x7400>
     bfc:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
     c00:	732f706f 	teqvc	pc, #111	; 0x6f
     c04:	6f6f6863 	svcvs	0x006f6863
     c08:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     c0c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     c10:	30323931 	eorscc	r3, r2, r1, lsr r9
     c14:	3153432f 	cmpcc	r3, pc, lsr #6
     c18:	2f453034 	svccs	0x00453034
     c1c:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
     c20:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
     c24:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
     c28:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     c2c:	2f006970 	svccs	0x00006970
     c30:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     c34:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
     c38:	6a6e6169 	bvs	1b991e4 <__bss_end__+0x1b8e904>
     c3c:	442f6e75 	strtmi	r6, [pc], #-3701	; c44 <_start-0x73bc>
     c40:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
     c44:	732f706f 	teqvc	pc, #111	; 0x6f
     c48:	6f6f6863 	svcvs	0x006f6863
     c4c:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     c50:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     c54:	30323931 	eorscc	r3, r2, r1, lsr r9
     c58:	3153432f 	cmpcc	r3, pc, lsr #6
     c5c:	2f453034 	svccs	0x00453034
     c60:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
     c64:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
     c68:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
     c6c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     c70:	6c2f6970 	stcvs	9, cr6, [pc], #-448	; ab8 <_start-0x7548>
     c74:	00636269 	rsbeq	r6, r3, r9, ror #4
     c78:	2d777300 	ldclcs	3, cr7, [r7, #-0]
     c7c:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
     c80:	0100632e 	tsteq	r0, lr, lsr #6
     c84:	79630000 	stmdbvc	r3!, {}^	; <UNPREDICTABLE>
     c88:	2d656c63 	stclcs	12, cr6, [r5, #-396]!	; 0xfffffe74
     c8c:	6c697475 	cfstrdvs	mvd7, [r9], #-468	; 0xfffffe2c
     c90:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     c94:	74730000 	ldrbtvc	r0, [r3], #-0
     c98:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
     c9c:	6363672d 	cmnvs	r3, #11796480	; 0xb40000
     ca0:	0300682e 	movweq	r6, #2094	; 0x82e
     ca4:	77730000 	ldrbvc	r0, [r3, -r0]!
     ca8:	7261752d 	rsbvc	r7, r1, #188743680	; 0xb400000
     cac:	00682e74 	rsbeq	r2, r8, r4, ror lr
     cb0:	73000002 	movwvc	r0, #2
     cb4:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
     cb8:	00682e67 	rsbeq	r2, r8, r7, ror #28
     cbc:	67000003 	strvs	r0, [r0, -r3]
     cc0:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
     cc4:	00020068 	andeq	r0, r2, r8, rrx
     cc8:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
     ccc:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
     cd0:	61760000 	cmnvs	r6, r0
     cd4:	6972702d 	ldmdbvs	r2!, {r0, r2, r3, r5, ip, sp, lr}^
     cd8:	2e6b746e 	cdpcs	4, 6, cr7, cr11, cr14, {3}
     cdc:	00050068 	andeq	r0, r5, r8, rrx
     ce0:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xc00
     ce4:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
     ce8:	003e6e69 	eorseq	r6, lr, r9, ror #28
     cec:	00000000 	andeq	r0, r0, r0
     cf0:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
     cf4:	1a00008f 	bne	f38 <_start-0x70c8>
     cf8:	04302f4c 	ldrteq	r2, [r0], #-3916	; 0xf4c
     cfc:	2e0b0302 	cdpcs	3, 0, cr0, cr11, cr2, {0}
     d00:	04667303 	strbteq	r7, [r6], #-771	; 0x303
     d04:	02048801 	andeq	r8, r4, #65536	; 0x10000
     d08:	66730335 			; <UNDEFINED> instruction: 0x66730335
     d0c:	048a0104 	streq	r0, [sl], #260	; 0x104
     d10:	73033302 	movwvc	r3, #13058	; 0x3302
     d14:	03010466 	movweq	r0, #5222	; 0x1466
     d18:	0204820a 	andeq	r8, r4, #-1610612736	; 0xa0000000
     d1c:	66730331 			; <UNDEFINED> instruction: 0x66730331
     d20:	0c030104 	stfeqs	f0, [r3], {4}
     d24:	2f020482 	svccs	0x00020482
     d28:	04667303 	strbteq	r7, [r6], #-771	; 0x303
     d2c:	820e0301 	andhi	r0, lr, #67108864	; 0x4000000
     d30:	032d0204 	teqeq	sp, #4, 4	; 0x40000000
     d34:	01046673 	tsteq	r4, r3, ror r6
     d38:	04821003 	streq	r1, [r2], #3
     d3c:	73032b02 	movwvc	r2, #15106	; 0x3b02
     d40:	03010466 	movweq	r0, #5222	; 0x1466
     d44:	02048212 	andeq	r8, r4, #536870913	; 0x20000001
     d48:	66730329 	ldrbtvs	r0, [r3], -r9, lsr #6
     d4c:	14030104 	strne	r0, [r3], #-260	; 0x104
     d50:	03020482 	movweq	r0, #9346	; 0x2482
     d54:	73032e79 	movwvc	r2, #15993	; 0x3e79
     d58:	03010466 	movweq	r0, #5222	; 0x1466
     d5c:	02048216 	andeq	r8, r4, #1610612737	; 0x60000001
     d60:	032e7703 	teqeq	lr, #786432	; 0xc0000
     d64:	01046673 	tsteq	r4, r3, ror r6
     d68:	03821803 	orreq	r1, r2, #196608	; 0x30000
     d6c:	4d4b2e10 	stclmi	14, cr2, [fp, #-64]	; 0xffffffc0
     d70:	4c2e7003 	stcmi	0, cr7, [lr], #-12
     d74:	03488384 	movteq	r8, #33668	; 0x8384
     d78:	314e2e0d 	cmpcc	lr, sp, lsl #28
     d7c:	03020433 	movweq	r0, #9267	; 0x2433
     d80:	01042e48 	tsteq	r4, r8, asr #28
     d84:	2f823a03 	svccs	0x00823a03
     d88:	45030204 	strmi	r0, [r3, #-516]	; 0x204
     d8c:	03010466 	movweq	r0, #5222	; 0x1466
     d90:	042f823d 	strteq	r8, [pc], #-573	; d98 <_start-0x7268>
     d94:	82420302 	subhi	r0, r2, #134217728	; 0x8000000
     d98:	c0030104 	andgt	r0, r3, r4, lsl #2
     d9c:	042f8200 	strteq	r8, [pc], #-512	; da4 <_start-0x725c>
     da0:	7fbf0302 	svcvc	0x00bf0302
     da4:	03010482 	movweq	r0, #5250	; 0x1482
     da8:	2f8200c3 	svccs	0x008200c3
     dac:	bc030204 	sfmlt	f0, 4, [r3], {4}
     db0:	0104827f 	tsteq	r4, pc, ror r2
     db4:	8200c603 	andhi	ip, r0, #3145728	; 0x300000
     db8:	0302042f 	movweq	r0, #9263	; 0x242f
     dbc:	04827fb9 	streq	r7, [r2], #4025	; 0xfb9
     dc0:	00c90301 	sbceq	r0, r9, r1, lsl #6
     dc4:	02042f82 	andeq	r2, r4, #520	; 0x208
     dc8:	827fb603 	rsbshi	fp, pc, #3145728	; 0x300000
     dcc:	cc030104 	stfgts	f0, [r3], {4}
     dd0:	042f8200 	strteq	r8, [pc], #-512	; dd8 <_start-0x7228>
     dd4:	7fb30302 	svcvc	0x00b30302
     dd8:	03010482 	movweq	r0, #5250	; 0x1482
     ddc:	038200d0 	orreq	r0, r2, #208	; 0xd0
     de0:	844c824c 	strbhi	r8, [ip], #-588	; 0x24c
     de4:	36034883 	strcc	r4, [r3], -r3, lsl #17
     de8:	54034e2e 	strpl	r4, [r3], #-3630	; 0xe2e
     dec:	4a29034a 	bmi	a41b1c <__bss_end__+0xa3723c>
     df0:	009f3432 	addseq	r3, pc, r2, lsr r4	; <UNPREDICTABLE>
     df4:	06010402 	streq	r0, [r1], -r2, lsl #8
     df8:	4ed7064a 	cdpmi	6, 13, cr0, cr7, cr10, {2}
     dfc:	002cbb4b 	eoreq	fp, ip, fp, asr #22
     e00:	06010402 	streq	r0, [r1], -r2, lsl #8
     e04:	4c6d062e 	stclmi	6, cr0, [sp], #-184	; 0xffffff48
     e08:	020084a4 	andeq	r8, r0, #164, 8	; 0xa4000000
     e0c:	4a060104 	bmi	181224 <__bss_end__+0x176944>
     e10:	004dd706 	subeq	sp, sp, r6, lsl #14
     e14:	4b020402 	blmi	81e24 <__bss_end__+0x77544>
     e18:	02040200 	andeq	r0, r4, #0, 4
     e1c:	04020081 	streq	r0, [r2], #-129	; 0x81
     e20:	062e0601 	strteq	r0, [lr], -r1, lsl #12
     e24:	bca54c4d 	stclt	12, cr4, [r5], #308	; 0x134
     e28:	6a4b4b4b 	bvs	12d3b5c <__bss_end__+0x12c927c>
     e2c:	0402002f 	streq	r0, [r2], #-47	; 0x2f
     e30:	82820601 	addhi	r0, r2, #1048576	; 0x100000
     e34:	04040200 	streq	r0, [r4], #-512	; 0x200
     e38:	0402009e 	streq	r0, [r2], #-158	; 0x9e
     e3c:	d9064a01 	stmdble	r6, {r0, r9, fp, lr}
     e40:	4b2fbd88 	blmi	bf0468 <__bss_end__+0xbe5b88>
     e44:	6740084b 	strbvs	r0, [r0, -fp, asr #16]
     e48:	02040200 	andeq	r0, r4, #0, 4
     e4c:	0402002f 	streq	r0, [r2], #-47	; 0x2f
     e50:	02004902 	andeq	r4, r0, #32768	; 0x8000
     e54:	2e060104 	adfcss	f0, f6, f4
     e58:	86346806 	ldrthi	r6, [r4], -r6, lsl #16
     e5c:	0200a04b 	andeq	sl, r0, #75	; 0x4b
     e60:	66060104 	strvs	r0, [r6], -r4, lsl #2
     e64:	0868d706 	stmdaeq	r8!, {r1, r2, r8, r9, sl, ip, lr, pc}^
     e68:	4b674b22 	blmi	19d3af8 <__bss_end__+0x19c9218>
     e6c:	000a02d8 	ldrdeq	r0, [sl], -r8
     e70:	01010101 	tsteq	r1, r1, lsl #2
     e74:	00020000 	andeq	r0, r2, r0
     e78:	000000ca 	andeq	r0, r0, sl, asr #1
     e7c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     e80:	0101000d 	tsteq	r1, sp
     e84:	00000101 	andeq	r0, r0, r1, lsl #2
     e88:	00000100 	andeq	r0, r0, r0, lsl #2
     e8c:	2d796d01 	ldclcs	13, cr6, [r9, #-4]!
     e90:	00637273 	rsbeq	r7, r3, r3, ror r2
     e94:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
     e98:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
     e9c:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
     ea0:	2f6e756a 	svccs	0x006e756a
     ea4:	6b736544 	blvs	1cda3bc <__bss_end__+0x1ccfadc>
     ea8:	2f706f74 	svccs	0x00706f74
     eac:	6f686373 	svcvs	0x00686373
     eb0:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
     eb4:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
     eb8:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
     ebc:	53432f30 	movtpl	r2, #16176	; 0x3f30
     ec0:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
     ec4:	3173632f 	cmncc	r3, pc, lsr #6
     ec8:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
     ecc:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
     ed0:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     ed4:	2f697062 	svccs	0x00697062
     ed8:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
     edc:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
     ee0:	2f006372 	svccs	0x00006372
     ee4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     ee8:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
     eec:	6a6e6169 	bvs	1b99498 <__bss_end__+0x1b8ebb8>
     ef0:	442f6e75 	strtmi	r6, [pc], #-3701	; ef8 <_start-0x7108>
     ef4:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
     ef8:	732f706f 	teqvc	pc, #111	; 0x6f
     efc:	6f6f6863 	svcvs	0x006f6863
     f00:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     f04:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     f08:	30323931 	eorscc	r3, r2, r1, lsr r9
     f0c:	3153432f 	cmpcc	r3, pc, lsr #6
     f10:	2f453034 	svccs	0x00453034
     f14:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
     f18:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
     f1c:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
     f20:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     f24:	00006970 	andeq	r6, r0, r0, ror r9
     f28:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
     f2c:	0100632e 	tsteq	r0, lr, lsr #6
     f30:	70670000 	rsbvc	r0, r7, r0
     f34:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
     f38:	00000200 	andeq	r0, r0, r0, lsl #4
     f3c:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
     f40:	00030068 	andeq	r0, r3, r8, rrx
     f44:	05000000 	streq	r0, [r0, #-0]
     f48:	0095ac02 	addseq	sl, r5, r2, lsl #24
     f4c:	01360300 	teqeq	r6, r0, lsl #6
     f50:	6d673330 	stclvs	3, cr3, [r7, #-192]!	; 0xffffff40
     f54:	6730d830 			; <UNDEFINED> instruction: 0x6730d830
     f58:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
     f5c:	672f8668 	strvs	r8, [pc, -r8, ror #12]!
     f60:	6767306a 	strbvs	r3, [r7, -sl, rrx]!
     f64:	6a672f69 	bvs	19ccd10 <__bss_end__+0x19c2430>
     f68:	2fc1674c 	svccs	0x00c1674c
     f6c:	682f302f 	stmdavs	pc!, {r0, r1, r2, r3, r5, ip, sp}	; <UNPREDICTABLE>
     f70:	02023049 	andeq	r3, r2, #73	; 0x49
     f74:	78010100 	stmdavc	r1, {r8}
     f78:	02000001 	andeq	r0, r0, #1
     f7c:	0000ca00 	andeq	ip, r0, r0, lsl #20
     f80:	fb010200 	blx	4178a <__bss_end__+0x36eaa>
     f84:	01000d0e 	tsteq	r0, lr, lsl #26
     f88:	00010101 	andeq	r0, r1, r1, lsl #2
     f8c:	00010000 	andeq	r0, r1, r0
     f90:	796d0100 	stmdbvc	sp!, {r8}^
     f94:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
     f98:	73552f00 	cmpvc	r5, #0, 30
     f9c:	2f737265 	svccs	0x00737265
     fa0:	61697262 	cmnvs	r9, r2, ror #4
     fa4:	6e756a6e 	vsubvs.f32	s13, s10, s29
     fa8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     fac:	706f746b 	rsbvc	r7, pc, fp, ror #8
     fb0:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
     fb4:	2f6c6f6f 	svccs	0x006c6f6f
     fb8:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
     fbc:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
     fc0:	432f3032 	teqmi	pc, #50	; 0x32
     fc4:	30343153 	eorscc	r3, r4, r3, asr r1
     fc8:	73632f45 	cmnvc	r3, #276	; 0x114
     fcc:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
     fd0:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
     fd4:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; e38 <_start-0x71c8>
     fd8:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
     fdc:	3173632f 	cmncc	r3, pc, lsr #6
     fe0:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
     fe4:	00637273 	rsbeq	r7, r3, r3, ror r2
     fe8:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
     fec:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
     ff0:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
     ff4:	2f6e756a 	svccs	0x006e756a
     ff8:	6b736544 	blvs	1cda510 <__bss_end__+0x1ccfc30>
     ffc:	2f706f74 	svccs	0x00706f74
    1000:	6f686373 	svcvs	0x00686373
    1004:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
    1008:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    100c:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
    1010:	53432f30 	movtpl	r2, #16176	; 0x3f30
    1014:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
    1018:	3173632f 	cmncc	r3, pc, lsr #6
    101c:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
    1020:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
    1024:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
    1028:	00697062 	rsbeq	r7, r9, r2, rrx
    102c:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    1030:	00632e6f 	rsbeq	r2, r3, pc, ror #28
    1034:	67000001 	strvs	r0, [r0, -r1]
    1038:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
    103c:	00020068 	andeq	r0, r2, r8, rrx
    1040:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
    1044:	0300682e 	movweq	r6, #2094	; 0x82e
    1048:	00000000 	andeq	r0, r0, r0
    104c:	97d00205 	ldrbls	r0, [r0, r5, lsl #4]
    1050:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
    1054:	69504e01 	ldmdbvs	r0, {r0, r9, sl, fp, lr}^
    1058:	67672108 	strbvs	r2, [r7, -r8, lsl #2]!
    105c:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
    1060:	22084b32 	andcs	r4, r8, #51200	; 0xc800
    1064:	135131dc 	cmpne	r1, #220, 2	; 0x37
    1068:	be30504e 	cdplt	0, 3, cr5, cr0, cr14, {2}
    106c:	4d135031 	ldcmi	0, cr5, [r3, #-196]	; 0xffffff3c
    1070:	4cc0304f 	stclmi	0, cr3, [r0], {79}	; 0x4f
    1074:	21086950 	tstcs	r8, r0, asr r9
    1078:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
    107c:	4b326767 	blmi	c9ae20 <__bss_end__+0xc90540>
    1080:	4ca42108 	stfmis	f2, [r4], #32
    1084:	69842f50 	stmibvs	r4, {r4, r6, r8, r9, sl, fp, sp}
    1088:	03827503 	orreq	r7, r2, #12582912	; 0xc00000
    108c:	304d2e0c 	subcc	r2, sp, ip, lsl #28
    1090:	4d4c4b4e 	vstrmi	d20, [ip, #-312]	; 0xfffffec8
    1094:	08696b6a 	stmdaeq	r9!, {r1, r3, r5, r6, r8, r9, fp, sp, lr}^
    1098:	67676721 	strbvs	r6, [r7, -r1, lsr #14]!
    109c:	32676767 	rsbcc	r6, r7, #27000832	; 0x19c0000
    10a0:	0322084b 	teqeq	r2, #4915200	; 0x4b0000
    10a4:	9f31ba1a 	svcls	0x0031ba1a
    10a8:	4d522f4c 	ldclmi	15, cr2, [r2, #-304]	; 0xfffffed0
    10ac:	674b2f4e 	strbvs	r2, [fp, -lr, asr #30]
    10b0:	6767684b 	strbvs	r6, [r7, -fp, asr #16]!
    10b4:	2f672f4c 	svccs	0x00672f4c
    10b8:	4e4c6e4b 	cdpmi	14, 4, cr6, cr12, cr11, {2}
    10bc:	4b674b2f 	blmi	19d3d80 <__bss_end__+0x19c94a0>
    10c0:	4c676768 	stclmi	7, cr6, [r7], #-416	; 0xfffffe60
    10c4:	4b2f672f 	blmi	bdad88 <__bss_end__+0xbd04a8>
    10c8:	2f4e4b6d 	svccs	0x004e4b6d
    10cc:	0200674b 	andeq	r6, r0, #19660800	; 0x12c0000
    10d0:	66060104 	strvs	r0, [r6], -r4, lsl #2
    10d4:	2f9f6806 	svccs	0x009f6806
    10d8:	01040200 	mrseq	r0, R12_usr
    10dc:	68064a06 	stmdavs	r6, {r1, r2, r9, fp, lr}
    10e0:	4a73032f 	bmi	1cc1da4 <__bss_end__+0x1cb74c4>
    10e4:	4d2e0e03 	stcmi	14, cr0, [lr, #-12]!
    10e8:	4b2f4e4c 	blmi	bd4a20 <__bss_end__+0xbca140>
    10ec:	0602bcbc 			; <UNDEFINED> instruction: 0x0602bcbc
    10f0:	ec010100 	stfs	f0, [r1], {-0}
    10f4:	02000000 	andeq	r0, r0, #0
    10f8:	0000d000 	andeq	sp, r0, r0
    10fc:	fb010200 	blx	41906 <__bss_end__+0x37026>
    1100:	01000d0e 	tsteq	r0, lr, lsl #26
    1104:	00010101 	andeq	r0, r1, r1, lsl #2
    1108:	00010000 	andeq	r0, r1, r0
    110c:	696c0100 	stmdbvs	ip!, {r8}^
    1110:	2f006362 	svccs	0x00006362
    1114:	2f727375 	svccs	0x00727375
    1118:	61636f6c 	cmnvs	r3, ip, ror #30
    111c:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
    1120:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
    1124:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    1128:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    112c:	61652d65 	cmnvs	r5, r5, ror #26
    1130:	342f6962 	strtcc	r6, [pc], #-2402	; 1138 <_start-0x6ec8>
    1134:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
    1138:	3173632d 	cmncc	r3, sp, lsr #6
    113c:	2f653037 	svccs	0x00653037
    1140:	2f62696c 	svccs	0x0062696c
    1144:	2f636367 	svccs	0x00636367
    1148:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    114c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    1150:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    1154:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
    1158:	2f332e38 	svccs	0x00332e38
    115c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1160:	00656475 	rsbeq	r6, r5, r5, ror r4
    1164:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    1168:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
    116c:	432f6c61 	teqmi	pc, #24832	; 0x6100
    1170:	616c6c65 	cmnvs	ip, r5, ror #24
    1174:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
    1178:	6f6e2d6d 	svcvs	0x006e2d6d
    117c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
    1180:	2f696261 	svccs	0x00696261
    1184:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
    1188:	73632d33 	cmnvc	r3, #3264	; 0xcc0
    118c:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
    1190:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    1194:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1198:	61652d65 	cmnvs	r5, r5, ror #26
    119c:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    11a0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    11a4:	00006564 	andeq	r6, r0, r4, ror #10
    11a8:	736d656d 	cmnvc	sp, #457179136	; 0x1b400000
    11ac:	632e7465 	teqvs	lr, #1694498816	; 0x65000000
    11b0:	00000100 	andeq	r0, r0, r0, lsl #2
    11b4:	64647473 	strbtvs	r7, [r4], #-1139	; 0x473
    11b8:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    11bc:	00000200 	andeq	r0, r0, r0, lsl #4
    11c0:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    11c4:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    11c8:	00000300 	andeq	r0, r0, r0, lsl #6
    11cc:	02050000 	andeq	r0, r5, #0
    11d0:	00009d38 	andeq	r9, r0, r8, lsr sp
    11d4:	2f4c1314 	svccs	0x004c1314
    11d8:	01040200 	mrseq	r0, R12_usr
    11dc:	02024d49 	andeq	r4, r2, #4672	; 0x1240
    11e0:	28010100 	stmdacs	r1, {r8}
    11e4:	02000001 	andeq	r0, r0, #1
    11e8:	00010d00 	andeq	r0, r1, r0, lsl #26
    11ec:	fb010200 	blx	419f6 <__bss_end__+0x37116>
    11f0:	01000d0e 	tsteq	r0, lr, lsl #26
    11f4:	00010101 	andeq	r0, r1, r1, lsl #2
    11f8:	00010000 	andeq	r0, r1, r0
    11fc:	73630100 	cmnvc	r3, #0, 2
    1200:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
    1204:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
    1208:	73752f00 	cmnvc	r5, #0, 30
    120c:	6f6c2f72 	svcvs	0x006c2f72
    1210:	2f6c6163 	svccs	0x006c6163
    1214:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
    1218:	612f7261 	teqvs	pc, r1, ror #4
    121c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1220:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    1224:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1228:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
    122c:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
    1230:	30373173 	eorscc	r3, r7, r3, ror r1
    1234:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    1238:	63672f62 	cmnvs	r7, #392	; 0x188
    123c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    1240:	6f6e2d6d 	svcvs	0x006e2d6d
    1244:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
    1248:	2f696261 	svccs	0x00696261
    124c:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
    1250:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
    1254:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    1258:	752f0065 	strvc	r0, [pc, #-101]!	; 11fb <_start-0x6e05>
    125c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 1098 <_start-0x6f68>
    1260:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    1264:	6c65432f 	stclvs	3, cr4, [r5], #-188	; 0xffffff44
    1268:	2f72616c 	svccs	0x0072616c
    126c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    1270:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    1274:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    1278:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
    127c:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
    1280:	37317363 	ldrcc	r7, [r1, -r3, ror #6]!
    1284:	612f6530 	teqvs	pc, r0, lsr r5	; <UNPREDICTABLE>
    1288:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    128c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    1290:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1294:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1298:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    129c:	6f630000 	svcvs	0x00630000
    12a0:	6f72746e 	svcvs	0x0072746e
    12a4:	6c622d6c 	stclvs	13, cr2, [r2], #-432	; 0xfffffe50
    12a8:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
    12ac:	00010063 	andeq	r0, r1, r3, rrx
    12b0:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    12b4:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    12b8:	00020068 	andeq	r0, r2, r8, rrx
    12bc:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    12c0:	2d746e69 	ldclcs	14, cr6, [r4, #-420]!	; 0xfffffe5c
    12c4:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
    12c8:	00020068 	andeq	r0, r2, r8, rrx
    12cc:	2d777300 	ldclcs	3, cr7, [r7, #-0]
    12d0:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
    12d4:	0100682e 	tsteq	r0, lr, lsr #16
    12d8:	6f630000 	svcvs	0x00630000
    12dc:	6f72746e 	svcvs	0x0072746e
    12e0:	6c622d6c 	stclvs	13, cr2, [r2], #-432	; 0xfffffe50
    12e4:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
    12e8:	00010068 	andeq	r0, r1, r8, rrx
    12ec:	72747300 	rsbsvc	r7, r4, #0, 6
    12f0:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    12f4:	00030068 	andeq	r0, r3, r8, rrx
    12f8:	05000000 	streq	r0, [r0, #-0]
    12fc:	009d5802 	addseq	r5, sp, r2, lsl #16
    1300:	83301600 	teqhi	r0, #0, 12
    1304:	9f144c68 	svcls	0x00144c68
    1308:	04022f4b 	streq	r2, [r2], #-3915	; 0xf4b
    130c:	Address 0x000000000000130c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0x56e
   4:	61747300 	cmnvs	r4, r0, lsl #6
   8:	47006b63 	strmi	r6, [r0, -r3, ror #22]
   c:	4320554e 	teqmi	r0, #327155712	; 0x13800000
  10:	382e3420 	stmdacc	lr!, {r5, sl, ip, sp}
  14:	2d20332e 	stccs	3, cr3, [r0, #-184]!	; 0xffffff48
  18:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0x36d
  1c:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  20:	36373131 			; <UNDEFINED> instruction: 0x36373131
  24:	2d667a6a 	vstmdbcs	r6!, {s15-s120}
  28:	6d2d2073 	stcvs	0, cr2, [sp, #-460]!	; 0xfffffe34
  2c:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0x574
  30:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  34:	36373131 			; <UNDEFINED> instruction: 0x36373131
  38:	2d667a6a 	vstmdbcs	r6!, {s15-s120}
  3c:	672d2073 			; <UNDEFINED> instruction: 0x672d2073
  40:	20626467 	rsbcs	r6, r2, r7, ror #8
  44:	20674f2d 	rsbcs	r4, r7, sp, lsr #30
  48:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0x32d
  4c:	756e673d 	strbvc	r6, [lr, #-1853]!	; 0x73d
  50:	2d203939 	stccs	9, cr3, [r0, #-228]!	; 0xffffff1c
  54:	65726666 	ldrbvs	r6, [r2, #-1638]!	; 0x666
  58:	61747365 	cmnvs	r4, r5, ror #6
  5c:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
  60:	2d340067 	ldccs	0, cr0, [r4, #-412]!	; 0xfffffe64
  64:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0x574
  68:	6978652d 	ldmdbvs	r8!, {r0, r2, r3, r5, r8, sl, sp, lr}^
  6c:	00632e74 	rsbeq	r2, r3, r4, ror lr
  70:	6d746f6e 	ldclvs	15, cr6, [r4, #-440]!	; 0xfffffe48
  74:	006e6961 	rsbeq	r6, lr, r1, ror #18
  78:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
  7c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
  80:	6e750074 	mrcvs	0, 3, r0, cr5, cr4, {3}
  84:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
  88:	63206465 	teqvs	r0, #1694498816	; 0x65000000
  8c:	00726168 	rsbseq	r6, r2, r8, ror #2
  90:	61656c63 	cmnvs	r5, r3, ror #24
  94:	65725f6e 	ldrbvs	r5, [r2, #-3950]!	; 0xf6e
  98:	746f6f62 	strbtvc	r6, [pc], #-3938	; a0 <_start-0x7f60>
  9c:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
  a0:	726f665f 	rsbvc	r6, pc, #99614720	; 0x5f00000
  a4:	6873006b 	ldmdavs	r3!, {r0, r1, r3, r5, r6}^
  a8:	2074726f 	rsbscs	r7, r4, pc, ror #4
  ac:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  b0:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
  b4:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
  b8:	73552f00 	cmpvc	r5, #0, 30
  bc:	2f737265 	svccs	0x00737265
  c0:	61697262 	cmnvs	r9, r2, ror #4
  c4:	6e756a6e 	vsubvs.f32	s13, s10, s29
  c8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
  cc:	706f746b 	rsbvc	r7, pc, fp, ror #8
  d0:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
  d4:	2f6c6f6f 	svccs	0x006c6f6f
  d8:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
  dc:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
  e0:	432f3032 	teqmi	pc, #50	; 0x32
  e4:	30343153 	eorscc	r3, r4, r3, asr r1
  e8:	73632f45 	cmnvc	r3, #276	; 0x114
  ec:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
  f0:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
  f4:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; ffffff58 <__bss_end__+0xffff5678>
  f8:	2f736261 	svccs	0x00736261
  fc:	68742d36 	ldmdavs	r4!, {r1, r2, r4, r5, r8, sl, fp, sp}^
 100:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 104:	2d322f73 	ldccs	15, cr2, [r2, #-460]!	; 0xfffffe34
 108:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 10c:	2e736461 	cdpcs	4, 7, cr6, cr3, cr1, {3}
 110:	61666572 	smcvs	26194	; 0x6652
 114:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 118:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 11c:	7268745f 	rsbvc	r7, r8, #1593835520	; 0x5f000000
 120:	5f646165 	svcpl	0x00646165
 124:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 128:	72740074 	rsbsvc	r0, r4, #116	; 0x74
 12c:	61697669 	cmnvs	r9, r9, ror #12
 130:	5f5f006c 	svcpl	0x005f006c
 134:	434e5546 	movtmi	r5, #58694	; 0xe546
 138:	4e4f4954 	mcrmi	9, 2, r4, cr15, cr4, {2}
 13c:	72005f5f 	andvc	r5, r0, #380	; 0x17c
 140:	735f6765 	cmpvc	pc, #26476544	; 0x1940000
 144:	5f657661 	svcpl	0x00657661
 148:	61657261 	cmnvs	r5, r1, ror #4
 14c:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
 150:	6f6c2067 	svcvs	0x006c2067
 154:	7520676e 	strvc	r6, [r0, #-1902]!	; 0x76e
 158:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 15c:	2064656e 	rsbcs	r6, r4, lr, ror #10
 160:	00746e69 	rsbseq	r6, r4, r9, ror #28
 164:	5f697072 	svcpl	0x00697072
 168:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 16c:	745f6461 	ldrbvc	r6, [pc], #-1121	; 174 <_start-0x7e8c>
 170:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 174:	6569795f 	strbvs	r7, [r9, #-2399]!	; 0x95f
 178:	7300646c 	movwvc	r6, #1132	; 0x46c
 17c:	74657a69 	strbtvc	r7, [r5], #-2665	; 0xa69
 180:	00657079 	rsbeq	r7, r5, r9, ror r0
 184:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 188:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
 18c:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
 190:	70720074 	rsbsvc	r0, r2, r4, ror r0
 194:	68745f69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 198:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 19c:	6f687300 	svcvs	0x00687300
 1a0:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
 1a4:	7000746e 	andvc	r7, r0, lr, ror #8
 1a8:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 1ac:	646e615f 	strbtvs	r6, [lr], #-351	; 0x15f
 1b0:	6569645f 	strbvs	r6, [r9, #-1119]!	; 0x45f
 1b4:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 1b8:	5f323374 	svcpl	0x00323374
 1bc:	6d6b0074 	stclvs	0, cr0, [fp, #-464]!	; 0xfffffe30
 1c0:	6f6c6c61 	svcvs	0x006c6c61
 1c4:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 1c8:	72007469 	andvc	r7, r0, #1761607680	; 0x69000000
 1cc:	725f6970 	subsvc	r6, pc, #112, 18	; 0x1c0000
 1d0:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
 1d4:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
 1d8:	5f5f0063 	svcpl	0x005f0063
 1dc:	63756e67 	cmnvs	r5, #1648	; 0x670
 1e0:	5f61765f 	svcpl	0x0061765f
 1e4:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
 1e8:	62696c00 	rsbvs	r6, r9, #0, 24
 1ec:	72702f63 	rsbsvc	r2, r0, #396	; 0x18c
 1f0:	6b746e69 	blvs	1d1bb9c <__bss_end__+0x1d112bc>
 1f4:	7600632e 	strvc	r6, [r0], -lr, lsr #6
 1f8:	72705f61 	rsbsvc	r5, r0, #388	; 0x184
 1fc:	6b746e69 	blvs	1d1bba8 <__bss_end__+0x1d112c8>
 200:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
 204:	696c5f61 	stmdbvs	ip!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
 208:	2f007473 	svccs	0x00007473
 20c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 210:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 214:	6a6e6169 	bvs	1b987c0 <__bss_end__+0x1b8dee0>
 218:	442f6e75 	strtmi	r6, [pc], #-3701	; 220 <_start-0x7de0>
 21c:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 220:	732f706f 	teqvc	pc, #111	; 0x6f
 224:	6f6f6863 	svcvs	0x006f6863
 228:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 22c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 230:	30323931 	eorscc	r3, r2, r1, lsr r9
 234:	3153432f 	cmpcc	r3, pc, lsr #6
 238:	2f453034 	svccs	0x00453034
 23c:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 240:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 244:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 248:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 24c:	61006970 	tstvs	r0, r0, ror r9
 250:	00736772 	rsbseq	r6, r3, r2, ror r7
 254:	70615f5f 	rsbvc	r5, r1, pc, asr pc
 258:	746e6900 	strbtvc	r6, [lr], #-2304	; 0x900
 25c:	616e7265 	cmnvs	lr, r5, ror #4
 260:	75705f6c 	ldrbvc	r5, [r0, #-3948]!	; 0xf6c
 264:	61686374 	smcvs	34356	; 0x8634
 268:	70720072 	rsbsvc	r0, r2, r2, ror r0
 26c:	75705f69 	ldrbvc	r5, [r0, #-3945]!	; 0xf69
 270:	61686374 	smcvs	34356	; 0x8634
 274:	696c0072 	stmdbvs	ip!, {r1, r4, r5, r6}^
 278:	702f6362 	eorvc	r6, pc, r2, ror #6
 27c:	68637475 	stmdavs	r3!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
 280:	632e7261 	teqvs	lr, #268435462	; 0x10000006
 284:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 288:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
 28c:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
 290:	696c0063 	stmdbvs	ip!, {r0, r1, r5, r6}^
 294:	702f6362 	eorvc	r6, pc, r2, ror #6
 298:	2e6b7475 	mcrcs	4, 3, r7, cr11, cr5, {3}
 29c:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
 2a0:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
 2a4:	705f6c61 	subsvc	r6, pc, r1, ror #24
 2a8:	006b7475 	rsbeq	r7, fp, r5, ror r4
 2ac:	5f67656e 	svcpl	0x0067656e
 2b0:	65720070 	ldrbvs	r0, [r2, #-112]!	; 0x70
 2b4:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 2b8:	73690065 	cmnvc	r9, #101	; 0x65
 2bc:	69676964 	stmdbvs	r7!, {r2, r5, r6, r8, fp, sp, lr}^
 2c0:	75700074 	ldrbvc	r0, [r0, #-116]!	; 0x74
 2c4:	665f7374 			; <UNDEFINED> instruction: 0x665f7374
 2c8:	61620070 	smcvs	8192	; 0x2000
 2cc:	73006573 	movwvc	r6, #1395	; 0x573
 2d0:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
 2d4:	00705f64 	rsbseq	r5, r0, r4, ror #30
 2d8:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 2dc:	2d61762f 	stclcs	6, cr7, [r1, #-188]!	; 0xffffff44
 2e0:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 2e4:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
 2e8:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 2ec:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
 2f0:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xf5f
 2f4:	00747570 	rsbseq	r7, r4, r0, ror r5
 2f8:	74646977 	strbtvc	r6, [r4], #-2423	; 0x977
 2fc:	75700068 	ldrbvc	r0, [r0, #-104]!	; 0x68
 300:	665f6374 			; <UNDEFINED> instruction: 0x665f6374
 304:	6d650070 	stclvs	0, cr0, [r5, #-448]!	; 0xfffffe40
 308:	72007469 	andvc	r7, r0, #1761607680	; 0x69000000
 30c:	725f6970 	subsvc	r6, pc, #112, 18	; 0x1c0000
 310:	6f6f6265 	svcvs	0x006f6265
 314:	73630074 	cmnvc	r3, #116	; 0x74
 318:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 31c:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 320:	656c632f 	strbvs	r6, [ip, #-815]!	; 0x32f
 324:	722d6e61 	eorvc	r6, sp, #1552	; 0x610
 328:	6f6f6265 	svcvs	0x006f6265
 32c:	00632e74 	rsbeq	r2, r3, r4, ror lr
 330:	616c6564 	cmnvs	ip, r4, ror #10
 334:	736d5f79 	cmnvc	sp, #484	; 0x1e4
 338:	746e6900 	strbtvc	r6, [lr], #-2304	; 0x900
 33c:	616e7265 	cmnvs	lr, r5, ror #4
 340:	77735f6c 	ldrbvc	r5, [r3, -ip, ror #30]!
 344:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
 348:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 34c:	625f5f00 	subsvs	r5, pc, #0, 30
 350:	735f7373 	cmpvc	pc, #-872415231	; 0xcc000001
 354:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
 358:	62005f5f 	andvs	r5, r0, #380	; 0x17c
 35c:	655f7373 	ldrbvs	r7, [pc, #-883]	; fffffff1 <__bss_end__+0xffff5711>
 360:	6300646e 	movwvs	r6, #1134	; 0x46e
 364:	656c6379 	strbvs	r6, [ip, #-889]!	; 0x379
 368:	7265705f 	rsbvc	r7, r5, #95	; 0x5f
 36c:	7469625f 	strbtvc	r6, [r9], #-607	; 0x25f
 370:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
 374:	656c6f73 	strbvs	r6, [ip, #-3955]!	; 0xf73
 378:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 37c:	77730074 			; <UNDEFINED> instruction: 0x77730074
 380:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 384:	72705f74 	rsbsvc	r5, r0, #116, 30	; 0x1d0
 388:	6b746e69 	blvs	1d1bd34 <__bss_end__+0x1d11454>
 38c:	54555000 	ldrbpl	r5, [r5], #-0
 390:	53455f43 	movtpl	r5, #24387	; 0x5f43
 394:	41555f50 	cmpmi	r5, r0, asr pc
 398:	73005452 	movwvc	r5, #1106	; 0x452
 39c:	61755f77 	cmnvs	r5, r7, ror pc
 3a0:	745f7472 	ldrbvc	r7, [pc], #-1138	; 3a8 <_start-0x7c58>
 3a4:	54555000 	ldrbpl	r5, [r5], #-0
 3a8:	57535f43 	ldrbpl	r5, [r3, -r3, asr #30]
 3ac:	5241555f 	subpl	r5, r1, #398458880	; 0x17c00000
 3b0:	61620054 	qdsubvs	r0, r4, r2
 3b4:	50006475 	andpl	r6, r0, r5, ror r4
 3b8:	5f435455 	svcpl	0x00435455
 3bc:	555f5748 	ldrbpl	r5, [pc, #-1864]	; fffffc7c <__bss_end__+0xffff539c>
 3c0:	00545241 	subseq	r5, r4, r1, asr #4
 3c4:	7473635f 	ldrbtvc	r6, [r3], #-863	; 0x35f
 3c8:	00747261 	rsbseq	r7, r4, r1, ror #4
 3cc:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 3d0:	7665645f 			; <UNDEFINED> instruction: 0x7665645f
 3d4:	7300745f 	movwvc	r7, #1119	; 0x45f
 3d8:	61755f77 	cmnvs	r5, r7, ror pc
 3dc:	705f7472 	subsvc	r7, pc, r2, ror r4	; <UNPREDICTABLE>
 3e0:	00637475 	rsbeq	r7, r3, r5, ror r4
 3e4:	746e6975 	strbtvc	r6, [lr], #-2421	; 0x975
 3e8:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 3ec:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xf63
 3f0:	5f6c6f72 	svcpl	0x006c6f72
 3f4:	5f6b6c62 	svcpl	0x006b6c62
 3f8:	77730074 			; <UNDEFINED> instruction: 0x77730074
 3fc:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 400:	62630074 	rsbvs	r0, r3, #116	; 0x74
 404:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 408:	6f6c625f 	svcvs	0x006c625f
 40c:	5f006b63 	svcpl	0x00006b63
 410:	7373625f 	cmnvc	r3, #-268435451	; 0xf0000005
 414:	646e655f 	strbtvs	r6, [lr], #-1375	; 0x55f
 418:	63005f5f 	movwvs	r5, #3935	; 0xf5f
 41c:	30343173 	eorscc	r3, r4, r3, ror r1
 420:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 424:	73632f63 	cmnvc	r3, #396	; 0x18c
 428:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
 42c:	6300632e 	movwvs	r6, #814	; 0x32e
 430:	6f736e6f 	svcvs	0x00736e6f
 434:	645f656c 	ldrbvs	r6, [pc], #-1388	; 43c <_start-0x7bc4>
 438:	6d007665 	stcvs	6, cr7, [r0, #-404]	; 0xfffffe6c
 43c:	63696761 	cmnvs	r9, #25427968	; 0x1840000
 440:	5f746100 	svcpl	0x00746100
 444:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
 448:	76656c5f 			; <UNDEFINED> instruction: 0x76656c5f
 44c:	50006c65 	andpl	r6, r0, r5, ror #24
 450:	41505f4d 	cmpmi	r0, sp, asr #30
 454:	4f575353 	svcmi	0x00575353
 458:	63004452 	movwvs	r4, #1106	; 0x452
 45c:	30343173 	eorscc	r3, r4, r3, ror r1
 460:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 464:	65722f63 	ldrbvs	r2, [r2, #-3939]!	; 0xf63
 468:	746f6f62 	strbtvc	r6, [pc], #-3938	; 470 <_start-0x7b90>
 46c:	5000632e 	andpl	r6, r0, lr, lsr #6
 470:	53525f4d 	cmppl	r2, #308	; 0x134
 474:	575f4354 			; <UNDEFINED> instruction: 0x575f4354
 478:	47464352 	smlsldmi	r4, r6, r2, r3
 47c:	4c55465f 	mrrcmi	6, 5, r4, r5, cr15
 480:	45525f4c 	ldrbmi	r5, [r2, #-3916]	; 0xf4c
 484:	00544553 	subseq	r4, r4, r3, asr r5
 488:	575f4d50 			; <UNDEFINED> instruction: 0x575f4d50
 48c:	00474f44 	subeq	r4, r7, r4, asr #30
 490:	5f746573 	svcpl	0x00746573
 494:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
 498:	76656c5f 			; <UNDEFINED> instruction: 0x76656c5f
 49c:	50006c65 	andpl	r6, r0, r5, ror #24
 4a0:	32335455 	eorscc	r5, r3, #1426063360	; 0x55000000
 4a4:	5f4d5000 	svcpl	0x004d5000
 4a8:	43545352 	cmpmi	r4, #1207959553	; 0x48000001
 4ac:	73706300 	cmnvc	r0, #0, 6
 4b0:	69740072 	ldmdbvs	r4!, {r1, r4, r5, r6}^
 4b4:	5f72656d 	svcpl	0x0072656d
 4b8:	5f746567 	svcpl	0x00746567
 4bc:	63657375 	cmnvs	r5, #-738197503	; 0xd4000001
 4c0:	7761725f 			; <UNDEFINED> instruction: 0x7761725f
 4c4:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 4c8:	735f7961 	cmpvc	pc, #1589248	; 0x184000
 4cc:	63006365 	movwvs	r6, #869	; 0x365
 4d0:	30343173 	eorscc	r3, r4, r3, ror r1
 4d4:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 4d8:	69742f63 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
 4dc:	2e72656d 	cdpcs	5, 7, cr6, cr2, cr13, {3}
 4e0:	45470063 	strbmi	r0, [r7, #-99]	; 0x63
 4e4:	00323354 	eorseq	r3, r2, r4, asr r3
 4e8:	6b636974 	blvs	18daac0 <__bss_end__+0x18d01e0>
 4ec:	65640073 	strbvs	r0, [r4, #-115]!	; 0x73
 4f0:	5f79616c 	svcpl	0x0079616c
 4f4:	6c637963 	stclvs	9, cr7, [r3], #-396	; 0xfffffe74
 4f8:	64007365 	strvs	r7, [r0], #-869	; 0x365
 4fc:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 500:	0073755f 	rsbseq	r7, r3, pc, asr r5
 504:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 508:	65675f72 	strbvs	r5, [r7, #-3954]!	; 0xf72
 50c:	73755f74 	cmnvc	r5, #116, 30	; 0x1d0
 510:	73006365 	movwvc	r6, #869	; 0x365
 514:	5f657a69 	svcpl	0x00657a69
 518:	6d6b0074 	stclvs	0, cr0, [fp, #-464]!	; 0xfffffe30
 51c:	6f6c6c61 	svcvs	0x006c6c61
 520:	6c615f63 	stclvs	15, cr5, [r1], #-396	; 0xfffffe74
 524:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
 528:	666b0064 	strbtvs	r0, [fp], -r4, rrx
 52c:	5f656572 	svcpl	0x00656572
 530:	006c6c61 	rsbeq	r6, ip, r1, ror #24
 534:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
 538:	5f64656e 	svcpl	0x0064656e
 53c:	70616568 	rsbvc	r6, r1, r8, ror #10
 540:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
 544:	616d6b00 	cmnvs	sp, r0, lsl #22
 548:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 54c:	6d656d00 	stclvs	13, cr6, [r5, #-0]
 550:	00746573 	rsbseq	r6, r4, r3, ror r5
 554:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
 558:	6b2f6372 	blvs	bd9328 <__bss_end__+0xbcea48>
 55c:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 560:	632e636f 	teqvs	lr, #-1140850687	; 0xbc000001
 564:	61747300 	cmnvs	r4, r0, lsl #6
 568:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
 56c:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
 570:	69007373 	stmdbvs	r0, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}
 574:	5f74696e 	svcpl	0x0074696e
 578:	6c610070 	stclvs	0, cr0, [r1], #-448	; 0xfffffe40
 57c:	6d6e6769 	stclvs	7, cr6, [lr, #-420]!	; 0xfffffe5c
 580:	00746e65 	rsbseq	r6, r4, r5, ror #28
 584:	6e756f72 	mrcvs	15, 3, r6, cr5, cr2, {3}
 588:	5f646564 	svcpl	0x00646564
 58c:	7479626e 	ldrbtvc	r6, [r9], #-622	; 0x26e
 590:	6b007365 	blvs	1d32c <__bss_end__+0x12a4c>
 594:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 598:	685f636f 	ldmdavs	pc, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 59c:	5f706165 	svcpl	0x00706165
 5a0:	00727470 	rsbseq	r7, r2, r0, ror r4
 5a4:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
 5a8:	5f636f6c 	svcpl	0x00636f6c
 5ac:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
 5b0:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
 5b4:	6174735f 	cmnvs	r4, pc, asr r3
 5b8:	74007472 	strvc	r7, [r0], #-1138	; 0x472
 5bc:	6c615f6f 	stclvs	15, cr5, [r1], #-444	; 0xfffffe44
 5c0:	61636f6c 	cmnvs	r3, ip, ror #30
 5c4:	5f006574 	svcpl	0x00006574
 5c8:	6165685f 	cmnvs	r5, pc, asr r8
 5cc:	74735f70 	ldrbtvc	r5, [r3], #-3952	; 0xf70
 5d0:	5f747261 	svcpl	0x00747261
 5d4:	5f51005f 	svcpl	0x0051005f
 5d8:	68737570 	ldmdavs	r3!, {r4, r5, r6, r8, sl, ip, sp, lr}^
 5dc:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 5e0:	7275635f 	rsbsvc	r6, r5, #2080374785	; 0x7c000001
 5e4:	7268745f 	rsbvc	r7, r8, #1593835520	; 0x5f000000
 5e8:	00646165 	rsbeq	r6, r4, r5, ror #2
 5ec:	5f697072 	svcpl	0x00697072
 5f0:	6e696f6a 	cdpvs	15, 6, cr6, cr9, cr10, {3}
 5f4:	69786500 	ldmdbvs	r8!, {r8, sl, sp, lr}^
 5f8:	646f6374 	strbtvs	r6, [pc], #-884	; 600 <_start-0x7a00>
 5fc:	5f6e0065 	svcpl	0x006e0065
 600:	006e7572 	rsbeq	r7, lr, r2, ror r5
 604:	72665f6e 	rsbvc	r5, r6, #440	; 0x1b8
 608:	72006565 	andvc	r6, r0, #423624704	; 0x19400000
 60c:	695f6970 	ldmdbvs	pc, {r4, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
 610:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 614:	5f6c616e 	svcpl	0x006c616e
 618:	63656863 	cmnvs	r5, #6488064	; 0x630000
 61c:	5f51006b 	svcpl	0x0051006b
 620:	656c656e 	strbvs	r6, [ip, #-1390]!	; 0x56e
 624:	7072006d 	rsbsvc	r0, r2, sp, rrx
 628:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
 62c:	745f7469 	ldrbvc	r7, [pc], #-1129	; 634 <_start-0x79cc>
 630:	706d6172 	rsbvc	r6, sp, r2, ror r1
 634:	6e696c6f 	cdpvs	12, 6, cr6, cr9, cr15, {3}
 638:	70720065 	rsbsvc	r0, r2, r5, rrx
 63c:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xf69
 640:	5f6b6361 	svcpl	0x006b6361
 644:	63656863 	cmnvs	r5, #6488064	; 0x630000
 648:	7266006b 	rsbvc	r0, r6, #107	; 0x6b
 64c:	00716565 	rsbseq	r6, r1, r5, ror #10
 650:	5f697072 	svcpl	0x00697072
 654:	63617865 	cmnvs	r1, #6619136	; 0x650000
 658:	6c735f74 	ldclvs	15, cr5, [r3], #-464	; 0xfffffe30
 65c:	00706565 	rsbseq	r6, r0, r5, ror #10
 660:	6d655f51 	stclvs	15, cr5, [r5, #-324]!	; 0xfffffebc
 664:	00797470 	rsbseq	r7, r9, r0, ror r4
 668:	6f705f51 	svcvs	0x00705f51
 66c:	63730070 	cmnvs	r3, #112	; 0x70
 670:	75646568 	strbvc	r6, [r4, #-1384]!	; 0x568
 674:	5f72656c 	svcpl	0x0072656c
 678:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 67c:	74006461 	strvc	r6, [r0], #-1121	; 0x461
 680:	006c6961 	rsbeq	r6, ip, r1, ror #18
 684:	615f6874 	cmpvs	pc, r4, ror r8	; <UNPREDICTABLE>
 688:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 68c:	5f687400 	svcpl	0x00687400
 690:	65657266 	strbvs	r7, [r5, #-614]!	; 0x266
 694:	615f5100 	cmpvs	pc, r0, lsl #2
 698:	6e657070 	mcrvs	0, 3, r7, cr5, cr0, {3}
 69c:	65680064 	strbvs	r0, [r8, #-100]!	; 0x64
 6a0:	72006461 	andvc	r6, r0, #1627389952	; 0x61000000
 6a4:	00716e75 	rsbseq	r6, r1, r5, ror lr
 6a8:	5f697072 	svcpl	0x00697072
 6ac:	69777363 	ldmdbvs	r7!, {r0, r1, r5, r6, r8, r9, ip, sp, lr}^
 6b0:	00686374 	rsbeq	r6, r8, r4, ror r3
 6b4:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
 6b8:	722f6372 	eorvc	r6, pc, #-939524095	; 0xc8000001
 6bc:	742d6970 	strtvc	r6, [sp], #-2416	; 0x970
 6c0:	61657268 	cmnvs	r5, r8, ror #4
 6c4:	00632e64 	rsbeq	r2, r3, r4, ror #28
 6c8:	5f646c6f 	svcpl	0x00646c6f
 6cc:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 6d0:	6e006461 	cdpvs	4, 0, cr6, cr0, cr1, {3}
 6d4:	6f6c6c61 	svcvs	0x006c6c61
 6d8:	00646563 	rsbeq	r6, r4, r3, ror #10
 6dc:	5f697072 	svcpl	0x00697072
 6e0:	74697865 	strbtvc	r7, [r9], #-2149	; 0x865
 6e4:	63796300 	cmnvs	r9, #0, 6
 6e8:	7265705f 	rsbvc	r7, r5, #95	; 0x5f
 6ec:	7469625f 	strbtvc	r6, [r9], #-607	; 0x25f
 6f0:	69727700 	ldmdbvs	r2!, {r8, r9, sl, ip, sp, lr}^
 6f4:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 6f8:	755f6379 	ldrbvc	r6, [pc, #-889]	; 387 <_start-0x7c79>
 6fc:	6c69746e 	cfstrdvs	mvd7, [r9], #-440	; 0xfffffe48
 700:	5f777300 	svcpl	0x00777300
 704:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 708:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 70c:	69745f63 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
 710:	756f656d 	strbvc	r6, [pc, #-1389]!	; 1ab <_start-0x7e55>
 714:	77730074 			; <UNDEFINED> instruction: 0x77730074
 718:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 71c:	65675f74 	strbvs	r5, [r7, #-3956]!	; 0xf74
 720:	755f7374 	ldrbvc	r7, [pc, #-884]	; 3b4 <_start-0x7c4c>
 724:	6c69746e 	cfstrdvs	mvd7, [r9], #-440	; 0xfffffe48
 728:	5f777300 	svcpl	0x00777300
 72c:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 730:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 734:	65640063 	strbvs	r0, [r4, #-99]!	; 0x63
 738:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
 73c:	65640064 	strbvs	r0, [r4, #-100]!	; 0x64
 740:	5f79616c 	svcpl	0x0079616c
 744:	6379636e 	cmnvs	r9, #-1207959551	; 0xb8000001
 748:	0073656c 	rsbseq	r6, r3, ip, ror #10
 74c:	755f7773 	ldrbvc	r7, [pc, #-1907]	; ffffffe1 <__bss_end__+0xffff5701>
 750:	5f747261 	svcpl	0x00747261
 754:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
 758:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
 75c:	00726570 	rsbseq	r6, r2, r0, ror r5
 760:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 764:	5f74756f 	svcpl	0x0074756f
 768:	63657375 	cmnvs	r5, #-738197503	; 0xd4000001
 76c:	5f777300 	svcpl	0x00777300
 770:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 774:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
 778:	7067006b 	rsbvc	r0, r7, fp, rrx
 77c:	725f6f69 	subsvc	r6, pc, #420	; 0x1a4
 780:	00646165 	rsbeq	r6, r4, r5, ror #2
 784:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
 788:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
 78c:	61752d77 	cmnvs	r5, r7, ror sp
 790:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
 794:	61686300 	cmnvs	r8, r0, lsl #6
 798:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
 79c:	5f777300 	svcpl	0x00777300
 7a0:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 7a4:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 7a8:	69745f73 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 7ac:	756f656d 	strbvc	r6, [pc, #-1389]!	; 247 <_start-0x7db9>
 7b0:	6f5f0074 	svcvs	0x005f0074
 7b4:	67007475 	smlsdxvs	r0, r5, r4, r7
 7b8:	5f6f6970 	svcpl	0x006f6970
 7bc:	74697277 	strbtvc	r7, [r9], #-631	; 0x277
 7c0:	73750065 	cmnvc	r5, #101	; 0x65
 7c4:	745f6365 	ldrbvc	r6, [pc], #-869	; 7cc <_start-0x7834>
 7c8:	6f656d69 	svcvs	0x00656d69
 7cc:	67007475 	smlsdxvs	r0, r5, r4, r7
 7d0:	5f6f6970 	svcpl	0x006f6970
 7d4:	5f746573 	svcpl	0x00746573
 7d8:	75706e69 	ldrbvc	r6, [r0, #-3689]!	; 0xe69
 7dc:	77730074 			; <UNDEFINED> instruction: 0x77730074
 7e0:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 7e4:	65675f74 	strbvs	r5, [r7, #-3956]!	; 0xf74
 7e8:	755f7374 	ldrbvc	r7, [pc, #-884]	; 47c <_start-0x7b84>
 7ec:	6c69746e 	cfstrdvs	mvd7, [r9], #-440	; 0xfffffe48
 7f0:	6b6c625f 	blvs	1b19174 <__bss_end__+0x1b0e894>
 7f4:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 7f8:	65735f6f 	ldrbvs	r5, [r3, #-3951]!	; 0xf6f
 7fc:	756f5f74 	strbvc	r5, [pc, #-3956]!	; fffff890 <__bss_end__+0xffff4fb0>
 800:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
 804:	69617700 	stmdbvs	r1!, {r8, r9, sl, ip, sp, lr}^
 808:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 80c:	5f6c6974 	svcpl	0x006c6974
 810:	63657375 	cmnvs	r5, #-738197503	; 0xd4000001
 814:	58554100 	ldmdapl	r5, {r8, lr}^
 818:	5f554d5f 	svcpl	0x00554d5f
 81c:	5f52434d 	svcpl	0x0052434d
 820:	00474552 	subeq	r4, r7, r2, asr r5
 824:	5f585541 	svcpl	0x00585541
 828:	495f554d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, sl, ip, lr}^	; <UNPREDICTABLE>
 82c:	45525f4f 	ldrbmi	r5, [r2, #-3919]	; 0xf4f
 830:	55410047 	strbpl	r0, [r1, #-71]	; 0x47
 834:	554d5f58 	strbpl	r5, [sp, #-3928]	; 0xf58
 838:	52534d5f 	subspl	r4, r3, #6080	; 0x17c0
 83c:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
 840:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 844:	55465f4f 	strbpl	r5, [r6, #-3919]	; 0xf4f
 848:	415f434e 	cmpmi	pc, lr, asr #6
 84c:	0030544c 	eorseq	r5, r0, ip, asr #8
 850:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 854:	6e61635f 	mcrvs	3, 3, r6, cr1, cr15, {2}
 858:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 85c:	55410063 	strbpl	r0, [r1, #-99]	; 0x63
 860:	554d5f58 	strbpl	r5, [sp, #-3928]	; 0xf58
 864:	544e435f 	strbpl	r4, [lr], #-863	; 0x35f
 868:	45525f4c 	ldrbmi	r5, [r2, #-3916]	; 0xf4c
 86c:	61750047 	cmnvs	r5, r7, asr #32
 870:	685f7472 	ldmdavs	pc, {r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 874:	645f7361 	ldrbvs	r7, [pc], #-865	; 87c <_start-0x7784>
 878:	00617461 	rsbeq	r7, r1, r1, ror #8
 87c:	5f766564 	svcpl	0x00766564
 880:	72726162 	rsbsvc	r6, r2, #-2147483624	; 0x80000018
 884:	00726569 	rsbseq	r6, r2, r9, ror #10
 888:	4f495047 	svcmi	0x00495047
 88c:	4e55465f 	mrcmi	6, 2, r4, cr5, cr15, {2}
 890:	554f5f43 	strbpl	r5, [pc, #-3907]	; fffff955 <__bss_end__+0xffff5075>
 894:	54555054 	ldrbpl	r5, [r5], #-84	; 0x54
 898:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 89c:	55465f4f 	strbpl	r5, [r6, #-3919]	; 0xf4f
 8a0:	415f434e 	cmpmi	pc, lr, asr #6
 8a4:	0031544c 	eorseq	r5, r1, ip, asr #8
 8a8:	4f495047 	svcmi	0x00495047
 8ac:	4e55465f 	mrcmi	6, 2, r4, cr5, cr15, {2}
 8b0:	4c415f43 	mcrrmi	15, 4, r5, r1, cr3
 8b4:	47003254 	smlsdmi	r0, r4, r2, r3
 8b8:	5f4f4950 	svcpl	0x004f4950
 8bc:	434e5546 	movtmi	r5, #58694	; 0xe546
 8c0:	544c415f 	strbpl	r4, [ip], #-351	; 0x15f
 8c4:	50470033 	subpl	r0, r7, r3, lsr r0
 8c8:	465f4f49 	ldrbmi	r4, [pc], -r9, asr #30
 8cc:	5f434e55 	svcpl	0x00434e55
 8d0:	35544c41 	ldrbcc	r4, [r4, #-3137]	; 0xc41
 8d4:	58554100 	ldmdapl	r5, {r8, lr}^
 8d8:	5f554d5f 	svcpl	0x00554d5f
 8dc:	5f524549 	svcpl	0x00524549
 8e0:	00474552 	subeq	r4, r7, r2, asr r5
 8e4:	33747570 	cmncc	r4, #112, 10	; 0x1c000000
 8e8:	55410032 	strbpl	r0, [r1, #-50]	; 0x32
 8ec:	554d5f58 	strbpl	r5, [sp, #-3928]	; 0xf58
 8f0:	5249495f 	subpl	r4, r9, #1556480	; 0x17c000
 8f4:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
 8f8:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 8fc:	75665f6f 	strbvc	r5, [r6, #-3951]!	; 0xf6f
 900:	745f636e 	ldrbvc	r6, [pc], #-878	; 908 <_start-0x76f8>
 904:	72617500 	rsbvc	r7, r1, #0, 10
 908:	61635f74 	smcvs	13812	; 0x35f4
 90c:	75705f6e 	ldrbvc	r5, [r0, #-3950]!	; 0xf6e
 910:	41006374 	tstmi	r0, r4, ror r3
 914:	455f5855 	ldrbmi	r5, [pc, #-2133]	; c7 <_start-0x7f39>
 918:	4c42414e 	stfmie	f4, [r2], {78}	; 0x4e
 91c:	41005345 	tstmi	r0, r5, asr #6
 920:	495f5855 	ldmdbmi	pc, {r0, r2, r4, r6, fp, ip, lr}^	; <UNPREDICTABLE>
 924:	41005152 	tstmi	r0, r2, asr r1
 928:	4d5f5855 	ldclmi	8, cr5, [pc, #-340]	; 7dc <_start-0x7824>
 92c:	41425f55 	cmpmi	r2, r5, asr pc
 930:	525f4455 	subspl	r4, pc, #1426063360	; 0x55000000
 934:	41004745 	tstmi	r0, r5, asr #14
 938:	4d5f5855 	ldclmi	8, cr5, [pc, #-340]	; 7ec <_start-0x7814>
 93c:	54535f55 	ldrbpl	r5, [r3], #-3925	; 0xf55
 940:	525f5441 	subspl	r5, pc, #1090519040	; 0x41000000
 944:	47004745 	strmi	r4, [r0, -r5, asr #14]
 948:	5f4f4950 	svcpl	0x004f4950
 94c:	434e5546 	movtmi	r5, #58694	; 0xe546
 950:	544c415f 	strbpl	r4, [ip], #-351	; 0x15f
 954:	70670034 	rsbvc	r0, r7, r4, lsr r0
 958:	735f6f69 	cmpvc	pc, #420	; 0x1a4
 95c:	665f7465 	ldrbvs	r7, [pc], -r5, ror #8
 960:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xe75
 964:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 968:	5f585541 	svcpl	0x00585541
 96c:	535f554d 	cmppl	pc, #322961408	; 0x13400000
 970:	54415243 	strbpl	r5, [r1], #-579	; 0x243
 974:	6d004843 	stcvs	8, cr4, [r0, #-268]	; 0xfffffef4
 978:	72732d79 	rsbsvc	r2, r3, #7744	; 0x1e40
 97c:	61752f63 	cmnvs	r5, r3, ror #30
 980:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
 984:	58554100 	ldmdapl	r5, {r8, lr}^
 988:	5f554d5f 	svcpl	0x00554d5f
 98c:	5f52434c 	svcpl	0x0052434c
 990:	00474552 	subeq	r4, r7, r2, asr r5
 994:	4f495047 	svcmi	0x00495047
 998:	4e55465f 	mrcmi	6, 2, r4, cr5, cr15, {2}
 99c:	4e495f43 	cdpmi	15, 4, cr5, cr9, cr3, {2}
 9a0:	00545550 	subseq	r5, r4, r0, asr r5
 9a4:	5f585541 	svcpl	0x00585541
 9a8:	4c5f554d 	cfldr64mi	mvdx5, [pc], {77}	; 0x4d
 9ac:	525f5253 	subspl	r5, pc, #805306373	; 0x30000005
 9b0:	75004745 	strvc	r4, [r0, #-1861]	; 0x745
 9b4:	5f747261 	svcpl	0x00747261
 9b8:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
 9bc:	7973615f 	ldmdbvc	r3!, {r0, r1, r2, r3, r4, r6, r8, sp, lr}^
 9c0:	6700636e 	strvs	r6, [r0, -lr, ror #6]
 9c4:	32337465 	eorscc	r7, r3, #1694498816	; 0x65000000
 9c8:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 9cc:	76655f6f 	strbtvc	r5, [r5], -pc, ror #30
 9d0:	5f746e65 	svcpl	0x00746e65
 9d4:	65746564 	ldrbvs	r6, [r4, #-1380]!	; 0x564
 9d8:	64657463 	strbtvs	r7, [r5], #-1123	; 0x463
 9dc:	46504700 	ldrbmi	r4, [r0], -r0, lsl #14
 9e0:	324c4553 	subcc	r4, ip, #348127232	; 0x14c00000
 9e4:	43504700 	cmpmi	r0, #0, 14
 9e8:	0030524c 	eorseq	r5, r0, ip, asr #4
 9ec:	42414e45 	submi	r4, r1, #1104	; 0x450
 9f0:	495f454c 	ldmdbmi	pc, {r2, r3, r6, r8, sl, lr}^	; <UNPREDICTABLE>
 9f4:	5f535152 	svcpl	0x00535152
 9f8:	73690032 	cmnvc	r9, #50	; 0x32
 9fc:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
 a00:	6e695f6f 	cdpvs	15, 6, cr5, cr9, cr15, {3}
 a04:	70670074 	rsbvc	r0, r7, r4, ror r0
 a08:	735f6f69 	cmpvc	pc, #420	; 0x1a4
 a0c:	6f5f7465 	svcvs	0x005f7465
 a10:	6d006666 	stcvs	6, cr6, [r0, #-408]	; 0xfffffe68
 a14:	72732d79 	rsbsvc	r2, r3, #7744	; 0x1e40
 a18:	70672f63 	rsbvc	r2, r7, r3, ror #30
 a1c:	632e6f69 	teqvs	lr, #420	; 0x1a4
 a20:	746e6900 	strbtvc	r6, [lr], #-2304	; 0x900
 a24:	73616d5f 	cmnvc	r1, #6080	; 0x17c0
 a28:	5047006b 	subpl	r0, r7, fp, rrx
 a2c:	30544553 	subscc	r4, r4, r3, asr r5
 a30:	53504700 	cmppl	r0, #0, 14
 a34:	00315445 	eorseq	r5, r1, r5, asr #8
 a38:	5f676572 	svcpl	0x00676572
 a3c:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
 a40:	4c504700 	mrrcmi	7, 0, r4, r0, cr0
 a44:	00305645 	eorseq	r5, r0, r5, asr #12
 a48:	454c5047 	strbmi	r5, [ip, #-71]	; 0x47
 a4c:	67003156 	smlsdvs	r0, r6, r1, r3
 a50:	5f6f6970 	svcpl	0x006f6970
 a54:	00676572 	rsbeq	r6, r7, r2, ror r5
 a58:	53465047 	movtpl	r5, #24647	; 0x6047
 a5c:	00304c45 	eorseq	r4, r0, r5, asr #24
 a60:	53465047 	movtpl	r5, #24647	; 0x6047
 a64:	00314c45 	eorseq	r4, r1, r5, asr #24
 a68:	53465047 	movtpl	r5, #24647	; 0x6047
 a6c:	00334c45 	eorseq	r4, r3, r5, asr #24
 a70:	53465047 	movtpl	r5, #24647	; 0x6047
 a74:	00344c45 	eorseq	r4, r4, r5, asr #24
 a78:	53465047 	movtpl	r5, #24647	; 0x6047
 a7c:	00354c45 	eorseq	r4, r5, r5, asr #24
 a80:	6f697067 	svcvs	0x00697067
 a84:	6573665f 	ldrbvs	r6, [r3, #-1631]!	; 0x65f
 a88:	4700306c 	strmi	r3, [r0, -ip, rrx]
 a8c:	524c4350 	subpl	r4, ip, #80, 6	; 0x40000001
 a90:	70670031 	rsbvc	r0, r7, r1, lsr r0
 a94:	695f6f69 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 a98:	725f746e 	subsvc	r7, pc, #1845493760	; 0x6e000000
 a9c:	6e697369 	cdpvs	3, 6, cr7, cr9, cr9, {3}
 aa0:	64655f67 	strbtvs	r5, [r5], #-3943	; 0xf67
 aa4:	47006567 	strmi	r6, [r0, -r7, ror #10]
 aa8:	4e455250 	mcrmi	2, 2, r5, cr5, cr0, {2}
 aac:	50470030 	subpl	r0, r7, r0, lsr r0
 ab0:	314e4552 	cmpcc	lr, r2, asr r5
 ab4:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 ab8:	76655f6f 	strbtvc	r5, [r5], -pc, ror #30
 abc:	5f746e65 	svcpl	0x00746e65
 ac0:	61656c63 	cmnvs	r5, r3, ror #24
 ac4:	52490072 	subpl	r0, r9, #114	; 0x72
 ac8:	45505f51 	ldrbmi	r5, [r0, #-3921]	; 0xf51
 acc:	4e49444e 	cdpmi	4, 4, cr4, cr9, cr14, {2}
 ad0:	00315f47 	eorseq	r5, r1, r7, asr #30
 ad4:	5f515249 	svcpl	0x00515249
 ad8:	444e4550 	strbmi	r4, [lr], #-1360	; 0x550
 adc:	5f474e49 	svcpl	0x00474e49
 ae0:	69620032 	stmdbvs	r2!, {r1, r4, r5}^
 ae4:	73616d74 	cmnvc	r1, #116, 26	; 0x1d00
 ae8:	7067006b 	rsbvc	r0, r7, fp, rrx
 aec:	735f6f69 	cmpvc	pc, #420	; 0x1a4
 af0:	00307465 	eorseq	r7, r0, r5, ror #8
 af4:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 af8:	45504700 	ldrbmi	r4, [r0, #-1792]	; 0x700
 afc:	00305344 	eorseq	r5, r0, r4, asr #6
 b00:	44455047 	strbmi	r5, [r5], #-71	; 0x47
 b04:	67003153 	smlsdvs	r0, r3, r1, r3
 b08:	5f6f6970 	svcpl	0x006f6970
 b0c:	5f746573 	svcpl	0x00746573
 b10:	47006e6f 	strmi	r6, [r0, -pc, ror #28]
 b14:	4e454650 	mcrmi	6, 2, r4, cr5, cr0, {2}
 b18:	50470030 	subpl	r0, r7, r0, lsr r0
 b1c:	314e4546 	cmpcc	lr, r6, asr #10
 b20:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 b24:	6e695f6f 	cdpvs	15, 6, cr5, cr9, cr15, {3}
 b28:	61665f74 	smcvs	26100	; 0x65f4
 b2c:	6e696c6c 	cdpvs	12, 6, cr6, cr9, cr12, {3}
 b30:	64655f67 	strbtvs	r5, [r5], #-3943	; 0xf67
 b34:	72006567 	andvc	r6, r0, #432013312	; 0x19c00000
 b38:	735f6765 	cmpvc	pc, #26476544	; 0x1940000
 b3c:	63656c65 	cmnvs	r5, #25856	; 0x6500
 b40:	70670074 	rsbvc	r0, r7, r4, ror r0
 b44:	635f6f69 	cmpvs	pc, #420	; 0x1a4
 b48:	0030726c 	eorseq	r7, r0, ip, ror #4
 b4c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 b50:	6d656d2f 	stclvs	13, cr6, [r5, #-188]!	; 0xffffff44
 b54:	2e746573 	mrccs	5, 3, r6, cr4, cr3, {3}
 b58:	62630063 	rsbvs	r0, r3, #99	; 0x63
 b5c:	77656e5f 			; <UNDEFINED> instruction: 0x77656e5f
 b60:	31736300 	cmncc	r3, r0, lsl #6
 b64:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 b68:	2f637273 	svccs	0x00637273
 b6c:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xf63
 b70:	2d6c6f72 	stclcs	15, cr6, [ip, #-456]!	; 0xfffffe38
 b74:	636f6c62 	cmnvs	pc, #25088	; 0x6200
 b78:	00632e6b 	rsbeq	r2, r3, fp, ror #28

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000014 	andeq	r0, r0, r4, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	00008010 	andeq	r8, r0, r0, lsl r0
  1c:	00000034 	andeq	r0, r0, r4, lsr r0
  20:	83080e42 	movwhi	r0, #36418	; 0x8e42
  24:	00018e02 	andeq	r8, r1, r2, lsl #28
  28:	00000018 	andeq	r0, r0, r8, lsl r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	00008044 	andeq	r8, r0, r4, asr #32
  34:	00000048 	andeq	r0, r0, r8, asr #32
  38:	83100e42 	tsthi	r0, #1056	; 0x420
  3c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
  40:	00018e02 	andeq	r8, r1, r2, lsl #28
  44:	00000014 	andeq	r0, r0, r4, lsl r0
  48:	00000000 	andeq	r0, r0, r0
  4c:	0000808c 	andeq	r8, r0, ip, lsl #1
  50:	0000002c 	andeq	r0, r0, ip, lsr #32
  54:	83080e42 	movwhi	r0, #36418	; 0x8e42
  58:	00018e02 	andeq	r8, r1, r2, lsl #28
  5c:	0000000c 	andeq	r0, r0, ip
  60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  64:	7c020001 	stcvc	0, cr0, [r2], {1}
  68:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  6c:	00000024 	andeq	r0, r0, r4, lsr #32
  70:	0000005c 	andeq	r0, r0, ip, asr r0
  74:	00008178 	andeq	r8, r0, r8, ror r1
  78:	00000058 	andeq	r0, r0, r8, asr r0
  7c:	80100e42 	andshi	r0, r0, r2, asr #28
  80:	82038104 	andhi	r8, r3, #4, 2
  84:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
  88:	07841c0e 	streq	r1, [r4, lr, lsl #24]
  8c:	058e0685 	streq	r0, [lr, #1669]	; 0x685
  90:	00280e42 	eoreq	r0, r8, r2, asr #28
  94:	0000000c 	andeq	r0, r0, ip
  98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  9c:	7c020001 	stcvc	0, cr0, [r2], {1}
  a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  a4:	00000014 	andeq	r0, r0, r4, lsl r0
  a8:	00000094 	muleq	r0, r4, r0
  ac:	000081d0 	ldrdeq	r8, [r0], -r0
  b0:	00000014 	andeq	r0, r0, r4, lsl r0
  b4:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
  b8:	00018e02 	andeq	r8, r1, r2, lsl #28
  bc:	0000000c 	andeq	r0, r0, ip
  c0:	00000094 	muleq	r0, r4, r0
  c4:	000081e4 	andeq	r8, r0, r4, ror #3
  c8:	00000018 	andeq	r0, r0, r8, lsl r0
  cc:	0000000c 	andeq	r0, r0, ip
  d0:	00000094 	muleq	r0, r4, r0
  d4:	000081fc 	strdeq	r8, [r0], -ip
  d8:	00000010 	andeq	r0, r0, r0, lsl r0
  dc:	0000000c 	andeq	r0, r0, ip
  e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  e4:	7c020001 	stcvc	0, cr0, [r2], {1}
  e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  ec:	00000018 	andeq	r0, r0, r8, lsl r0
  f0:	000000dc 	ldrdeq	r0, [r0], -ip
  f4:	0000820c 	andeq	r8, r0, ip, lsl #4
  f8:	00000034 	andeq	r0, r0, r4, lsr r0
  fc:	83100e42 	tsthi	r0, #1056	; 0x420
 100:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 104:	00018e02 	andeq	r8, r1, r2, lsl #28
 108:	0000000c 	andeq	r0, r0, ip
 10c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 110:	7c020001 	stcvc	0, cr0, [r2], {1}
 114:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 118:	0000000c 	andeq	r0, r0, ip
 11c:	00000108 	andeq	r0, r0, r8, lsl #2
 120:	00008240 	andeq	r8, r0, r0, asr #4
 124:	00000014 	andeq	r0, r0, r4, lsl r0
 128:	0000000c 	andeq	r0, r0, ip
 12c:	00000108 	andeq	r0, r0, r8, lsl #2
 130:	00008254 	andeq	r8, r0, r4, asr r2
 134:	0000002c 	andeq	r0, r0, ip, lsr #32
 138:	0000000c 	andeq	r0, r0, ip
 13c:	00000108 	andeq	r0, r0, r8, lsl #2
 140:	00008280 	andeq	r8, r0, r0, lsl #5
 144:	00000040 	andeq	r0, r0, r0, asr #32
 148:	00000020 	andeq	r0, r0, r0, lsr #32
 14c:	00000108 	andeq	r0, r0, r8, lsl #2
 150:	000082c0 	andeq	r8, r0, r0, asr #5
 154:	0000019c 	muleq	r0, ip, r1
 158:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 15c:	86058506 	strhi	r8, [r5], -r6, lsl #10
 160:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 164:	42018e02 	andmi	r8, r1, #2, 28
 168:	0000580e 	andeq	r5, r0, lr, lsl #16
 16c:	00000014 	andeq	r0, r0, r4, lsl r0
 170:	00000108 	andeq	r0, r0, r8, lsl #2
 174:	0000845c 	andeq	r8, r0, ip, asr r4
 178:	00000054 	andeq	r0, r0, r4, asr r0
 17c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 180:	00018e02 	andeq	r8, r1, r2, lsl #28
 184:	00000028 	andeq	r0, r0, r8, lsr #32
 188:	00000108 	andeq	r0, r0, r8, lsl #2
 18c:	000084b0 			; <UNDEFINED> instruction: 0x000084b0
 190:	00000288 	andeq	r0, r0, r8, lsl #5
 194:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
 198:	86088509 	strhi	r8, [r8], -r9, lsl #10
 19c:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
 1a0:	8a048905 	bhi	1225bc <__bss_end__+0x117cdc>
 1a4:	8e028b03 	vmlahi.f64	d8, d2, d3
 1a8:	b00e4201 	andlt	r4, lr, r1, lsl #4
 1ac:	00000001 	andeq	r0, r0, r1
 1b0:	0000000c 	andeq	r0, r0, ip
 1b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1b8:	7c020001 	stcvc	0, cr0, [r2], {1}
 1bc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1c0:	00000014 	andeq	r0, r0, r4, lsl r0
 1c4:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 1c8:	00008738 	andeq	r8, r0, r8, lsr r7
 1cc:	00000028 	andeq	r0, r0, r8, lsr #32
 1d0:	83080e42 	movwhi	r0, #36418	; 0x8e42
 1d4:	00018e02 	andeq	r8, r1, r2, lsl #28
 1d8:	0000000c 	andeq	r0, r0, ip
 1dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1e0:	7c020001 	stcvc	0, cr0, [r2], {1}
 1e4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1e8:	00000014 	andeq	r0, r0, r4, lsl r0
 1ec:	000001d8 	ldrdeq	r0, [r0], -r8
 1f0:	00008760 	andeq	r8, r0, r0, ror #14
 1f4:	00000020 	andeq	r0, r0, r0, lsr #32
 1f8:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 1fc:	00018e02 	andeq	r8, r1, r2, lsl #28
 200:	00000014 	andeq	r0, r0, r4, lsl r0
 204:	000001d8 	ldrdeq	r0, [r0], -r8
 208:	00008780 	andeq	r8, r0, r0, lsl #15
 20c:	00000090 	muleq	r0, r0, r0
 210:	83080e42 	movwhi	r0, #36418	; 0x8e42
 214:	00018e02 	andeq	r8, r1, r2, lsl #28
 218:	0000000c 	andeq	r0, r0, ip
 21c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 220:	7c020001 	stcvc	0, cr0, [r2], {1}
 224:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 228:	0000000c 	andeq	r0, r0, ip
 22c:	00000218 	andeq	r0, r0, r8, lsl r2
 230:	00008810 	andeq	r8, r0, r0, lsl r8
 234:	00000018 	andeq	r0, r0, r8, lsl r0
 238:	0000000c 	andeq	r0, r0, ip
 23c:	00000218 	andeq	r0, r0, r8, lsl r2
 240:	00008828 	andeq	r8, r0, r8, lsr #16
 244:	00000014 	andeq	r0, r0, r4, lsl r0
 248:	00000014 	andeq	r0, r0, r4, lsl r0
 24c:	00000218 	andeq	r0, r0, r8, lsl r2
 250:	0000883c 	andeq	r8, r0, ip, lsr r8
 254:	00000048 	andeq	r0, r0, r8, asr #32
 258:	83080e42 	movwhi	r0, #36418	; 0x8e42
 25c:	00018e02 	andeq	r8, r1, r2, lsl #28
 260:	0000000c 	andeq	r0, r0, ip
 264:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 268:	7c020001 	stcvc	0, cr0, [r2], {1}
 26c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 270:	0000000c 	andeq	r0, r0, ip
 274:	00000260 	andeq	r0, r0, r0, ror #4
 278:	00008884 	andeq	r8, r0, r4, lsl #17
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	00000014 	andeq	r0, r0, r4, lsl r0
 284:	00000260 	andeq	r0, r0, r0, ror #4
 288:	000088a0 	andeq	r8, r0, r0, lsr #17
 28c:	00000014 	andeq	r0, r0, r4, lsl r0
 290:	83080e42 	movwhi	r0, #36418	; 0x8e42
 294:	00018e02 	andeq	r8, r1, r2, lsl #28
 298:	00000014 	andeq	r0, r0, r4, lsl r0
 29c:	00000260 	andeq	r0, r0, r0, ror #4
 2a0:	000088b4 			; <UNDEFINED> instruction: 0x000088b4
 2a4:	0000000c 	andeq	r0, r0, ip
 2a8:	83080e42 	movwhi	r0, #36418	; 0x8e42
 2ac:	00018e02 	andeq	r8, r1, r2, lsl #28
 2b0:	00000018 	andeq	r0, r0, r8, lsl r0
 2b4:	00000260 	andeq	r0, r0, r0, ror #4
 2b8:	000088c0 	andeq	r8, r0, r0, asr #17
 2bc:	00000024 	andeq	r0, r0, r4, lsr #32
 2c0:	83100e42 	tsthi	r0, #1056	; 0x420
 2c4:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 2c8:	00018e02 	andeq	r8, r1, r2, lsl #28
 2cc:	00000014 	andeq	r0, r0, r4, lsl r0
 2d0:	00000260 	andeq	r0, r0, r0, ror #4
 2d4:	000088e4 	andeq	r8, r0, r4, ror #17
 2d8:	00000014 	andeq	r0, r0, r4, lsl r0
 2dc:	83080e42 	movwhi	r0, #36418	; 0x8e42
 2e0:	00018e02 	andeq	r8, r1, r2, lsl #28
 2e4:	00000014 	andeq	r0, r0, r4, lsl r0
 2e8:	00000260 	andeq	r0, r0, r0, ror #4
 2ec:	000088f8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
 2f0:	00000014 	andeq	r0, r0, r4, lsl r0
 2f4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 2f8:	00018e02 	andeq	r8, r1, r2, lsl #28
 2fc:	0000000c 	andeq	r0, r0, ip
 300:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 304:	7c020001 	stcvc	0, cr0, [r2], {1}
 308:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 30c:	00000018 	andeq	r0, r0, r8, lsl r0
 310:	000002fc 	strdeq	r0, [r0], -ip
 314:	0000890c 	andeq	r8, r0, ip, lsl #18
 318:	00000074 	andeq	r0, r0, r4, ror r0
 31c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 320:	86038504 	strhi	r8, [r3], -r4, lsl #10
 324:	00018e02 	andeq	r8, r1, r2, lsl #28
 328:	00000014 	andeq	r0, r0, r4, lsl r0
 32c:	000002fc 	strdeq	r0, [r0], -ip
 330:	00008980 	andeq	r8, r0, r0, lsl #19
 334:	0000009c 	muleq	r0, ip, r0
 338:	83080e42 	movwhi	r0, #36418	; 0x8e42
 33c:	00018e02 	andeq	r8, r1, r2, lsl #28
 340:	00000014 	andeq	r0, r0, r4, lsl r0
 344:	000002fc 	strdeq	r0, [r0], -ip
 348:	00008a1c 	andeq	r8, r0, ip, lsl sl
 34c:	0000005c 	andeq	r0, r0, ip, asr r0
 350:	83080e42 	movwhi	r0, #36418	; 0x8e42
 354:	00018e02 	andeq	r8, r1, r2, lsl #28
 358:	0000000c 	andeq	r0, r0, ip
 35c:	000002fc 	strdeq	r0, [r0], -ip
 360:	00008a78 	andeq	r8, r0, r8, ror sl
 364:	00000018 	andeq	r0, r0, r8, lsl r0
 368:	0000000c 	andeq	r0, r0, ip
 36c:	000002fc 	strdeq	r0, [r0], -ip
 370:	00008a90 	muleq	r0, r0, sl
 374:	00000010 	andeq	r0, r0, r0, lsl r0
 378:	00000014 	andeq	r0, r0, r4, lsl r0
 37c:	000002fc 	strdeq	r0, [r0], -ip
 380:	00008aa0 	andeq	r8, r0, r0, lsr #21
 384:	00000054 	andeq	r0, r0, r4, asr r0
 388:	83080e42 	movwhi	r0, #36418	; 0x8e42
 38c:	00018e02 	andeq	r8, r1, r2, lsl #28
 390:	0000000c 	andeq	r0, r0, ip
 394:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 398:	7c020001 	stcvc	0, cr0, [r2], {1}
 39c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3a0:	0000000c 	andeq	r0, r0, ip
 3a4:	00000390 	muleq	r0, r0, r3
 3a8:	00008af4 	strdeq	r8, [r0], -r4
 3ac:	00000008 	andeq	r0, r0, r8
 3b0:	0000000c 	andeq	r0, r0, ip
 3b4:	00000390 	muleq	r0, r0, r3
 3b8:	00008afc 	strdeq	r8, [r0], -ip
 3bc:	00000038 	andeq	r0, r0, r8, lsr r0
 3c0:	0000000c 	andeq	r0, r0, ip
 3c4:	00000390 	muleq	r0, r0, r3
 3c8:	00008b34 	andeq	r8, r0, r4, lsr fp
 3cc:	00000028 	andeq	r0, r0, r8, lsr #32
 3d0:	00000014 	andeq	r0, r0, r4, lsl r0
 3d4:	00000390 	muleq	r0, r0, r3
 3d8:	00008b5c 	andeq	r8, r0, ip, asr fp
 3dc:	00000018 	andeq	r0, r0, r8, lsl r0
 3e0:	83080e42 	movwhi	r0, #36418	; 0x8e42
 3e4:	00018e02 	andeq	r8, r1, r2, lsl #28
 3e8:	00000014 	andeq	r0, r0, r4, lsl r0
 3ec:	00000390 	muleq	r0, r0, r3
 3f0:	00008b74 	andeq	r8, r0, r4, ror fp
 3f4:	00000084 	andeq	r0, r0, r4, lsl #1
 3f8:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 3fc:	00018e02 	andeq	r8, r1, r2, lsl #28
 400:	00000014 	andeq	r0, r0, r4, lsl r0
 404:	00000390 	muleq	r0, r0, r3
 408:	00008bf8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
 40c:	00000098 	muleq	r0, r8, r0
 410:	83080e42 	movwhi	r0, #36418	; 0x8e42
 414:	00018e02 	andeq	r8, r1, r2, lsl #28
 418:	00000014 	andeq	r0, r0, r4, lsl r0
 41c:	00000390 	muleq	r0, r0, r3
 420:	00008c90 	muleq	r0, r0, ip
 424:	00000084 	andeq	r0, r0, r4, lsl #1
 428:	83080e42 	movwhi	r0, #36418	; 0x8e42
 42c:	00018e02 	andeq	r8, r1, r2, lsl #28
 430:	0000000c 	andeq	r0, r0, ip
 434:	00000390 	muleq	r0, r0, r3
 438:	00008d14 	andeq	r8, r0, r4, lsl sp
 43c:	00000010 	andeq	r0, r0, r0, lsl r0
 440:	00000018 	andeq	r0, r0, r8, lsl r0
 444:	00000390 	muleq	r0, r0, r3
 448:	00008d24 	andeq	r8, r0, r4, lsr #26
 44c:	0000004c 	andeq	r0, r0, ip, asr #32
 450:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 454:	86038504 	strhi	r8, [r3], -r4, lsl #10
 458:	00018e02 	andeq	r8, r1, r2, lsl #28
 45c:	00000018 	andeq	r0, r0, r8, lsl r0
 460:	00000390 	muleq	r0, r0, r3
 464:	00008d70 	andeq	r8, r0, r0, ror sp
 468:	00000058 	andeq	r0, r0, r8, asr r0
 46c:	83100e42 	tsthi	r0, #1056	; 0x420
 470:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 474:	00018e02 	andeq	r8, r1, r2, lsl #28
 478:	00000018 	andeq	r0, r0, r8, lsl r0
 47c:	00000390 	muleq	r0, r0, r3
 480:	00008dc8 	andeq	r8, r0, r8, asr #27
 484:	00000050 	andeq	r0, r0, r0, asr r0
 488:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 48c:	86038504 	strhi	r8, [r3], -r4, lsl #10
 490:	00018e02 	andeq	r8, r1, r2, lsl #28
 494:	0000001c 	andeq	r0, r0, ip, lsl r0
 498:	00000390 	muleq	r0, r0, r3
 49c:	00008e18 	andeq	r8, r0, r8, lsl lr
 4a0:	0000009c 	muleq	r0, ip, r0
 4a4:	84140e42 	ldrhi	r0, [r4], #-3650	; 0xe42
 4a8:	86048505 	strhi	r8, [r4], -r5, lsl #10
 4ac:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 4b0:	280e4201 	stmdacs	lr, {r0, r9, lr}
 4b4:	00000014 	andeq	r0, r0, r4, lsl r0
 4b8:	00000390 	muleq	r0, r0, r3
 4bc:	00008eb4 			; <UNDEFINED> instruction: 0x00008eb4
 4c0:	00000054 	andeq	r0, r0, r4, asr r0
 4c4:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 4c8:	00018e02 	andeq	r8, r1, r2, lsl #28
 4cc:	00000014 	andeq	r0, r0, r4, lsl r0
 4d0:	00000390 	muleq	r0, r0, r3
 4d4:	00008f08 	andeq	r8, r0, r8, lsl #30
 4d8:	0000002c 	andeq	r0, r0, ip, lsr #32
 4dc:	83080e42 	movwhi	r0, #36418	; 0x8e42
 4e0:	00018e02 	andeq	r8, r1, r2, lsl #28
 4e4:	00000014 	andeq	r0, r0, r4, lsl r0
 4e8:	00000390 	muleq	r0, r0, r3
 4ec:	00008f34 	andeq	r8, r0, r4, lsr pc
 4f0:	0000002c 	andeq	r0, r0, ip, lsr #32
 4f4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 4f8:	00018e02 	andeq	r8, r1, r2, lsl #28
 4fc:	00000014 	andeq	r0, r0, r4, lsl r0
 500:	00000390 	muleq	r0, r0, r3
 504:	00008f60 	andeq	r8, r0, r0, ror #30
 508:	0000002c 	andeq	r0, r0, ip, lsr #32
 50c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 510:	00018e02 	andeq	r8, r1, r2, lsl #28
 514:	0000000c 	andeq	r0, r0, ip
 518:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 51c:	7c020001 	stcvc	0, cr0, [r2], {1}
 520:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 524:	0000001c 	andeq	r0, r0, ip, lsl r0
 528:	00000514 	andeq	r0, r0, r4, lsl r5
 52c:	00008f8c 	andeq	r8, r0, ip, lsl #31
 530:	00000154 	andeq	r0, r0, r4, asr r1
 534:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 538:	86058506 	strhi	r8, [r5], -r6, lsl #10
 53c:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 540:	00018e02 	andeq	r8, r1, r2, lsl #28
 544:	00000020 	andeq	r0, r0, r0, lsr #32
 548:	00000514 	andeq	r0, r0, r4, lsl r5
 54c:	000090e0 	andeq	r9, r0, r0, ror #1
 550:	000001c8 	andeq	r0, r0, r8, asr #3
 554:	83200e42 	teqhi	r0, #1056	; 0x420
 558:	85078408 	strhi	r8, [r7, #-1032]	; 0x408
 55c:	87058606 	strhi	r8, [r5, -r6, lsl #12]
 560:	89038804 	stmdbhi	r3, {r2, fp, pc}
 564:	00018e02 	andeq	r8, r1, r2, lsl #28
 568:	00000020 	andeq	r0, r0, r0, lsr #32
 56c:	00000514 	andeq	r0, r0, r4, lsl r5
 570:	000092a8 	andeq	r9, r0, r8, lsr #5
 574:	00000090 	muleq	r0, r0, r0
 578:	84200e42 	strthi	r0, [r0], #-3650	; 0xe42
 57c:	86078508 	strhi	r8, [r7], -r8, lsl #10
 580:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
 584:	8a038904 	bhi	e299c <__bss_end__+0xd80bc>
 588:	00018e02 	andeq	r8, r1, r2, lsl #28
 58c:	0000001c 	andeq	r0, r0, ip, lsl r0
 590:	00000514 	andeq	r0, r0, r4, lsl r5
 594:	00009338 	andeq	r9, r0, r8, lsr r3
 598:	0000007c 	andeq	r0, r0, ip, ror r0
 59c:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 5a0:	86058506 	strhi	r8, [r5], -r6, lsl #10
 5a4:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 5a8:	00018e02 	andeq	r8, r1, r2, lsl #28
 5ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 5b0:	00000514 	andeq	r0, r0, r4, lsl r5
 5b4:	000093b4 			; <UNDEFINED> instruction: 0x000093b4
 5b8:	000000c0 	andeq	r0, r0, r0, asr #1
 5bc:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 5c0:	86058506 	strhi	r8, [r5], -r6, lsl #10
 5c4:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 5c8:	00018e02 	andeq	r8, r1, r2, lsl #28
 5cc:	00000014 	andeq	r0, r0, r4, lsl r0
 5d0:	00000514 	andeq	r0, r0, r4, lsl r5
 5d4:	00009474 	andeq	r9, r0, r4, ror r4
 5d8:	0000003c 	andeq	r0, r0, ip, lsr r0
 5dc:	83080e42 	movwhi	r0, #36418	; 0x8e42
 5e0:	00018e02 	andeq	r8, r1, r2, lsl #28
 5e4:	00000018 	andeq	r0, r0, r8, lsl r0
 5e8:	00000514 	andeq	r0, r0, r4, lsl r5
 5ec:	000094b0 			; <UNDEFINED> instruction: 0x000094b0
 5f0:	0000002c 	andeq	r0, r0, ip, lsr #32
 5f4:	83100e42 	tsthi	r0, #1056	; 0x420
 5f8:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 5fc:	00018e02 	andeq	r8, r1, r2, lsl #28
 600:	00000024 	andeq	r0, r0, r4, lsr #32
 604:	00000514 	andeq	r0, r0, r4, lsl r5
 608:	000094dc 	ldrdeq	r9, [r0], -ip
 60c:	00000084 	andeq	r0, r0, r4, lsl #1
 610:	810c0e42 	tsthi	ip, r2, asr #28
 614:	83028203 	movwhi	r8, #8707	; 0x2203
 618:	180e4201 	stmdane	lr, {r0, r9, lr}
 61c:	05850684 	streq	r0, [r5, #1668]	; 0x684
 620:	0e42048e 	cdpeq	4, 4, cr0, cr2, cr14, {4}
 624:	000003e8 	andeq	r0, r0, r8, ror #7
 628:	00000014 	andeq	r0, r0, r4, lsl r0
 62c:	00000514 	andeq	r0, r0, r4, lsl r5
 630:	00009560 	andeq	r9, r0, r0, ror #10
 634:	0000004c 	andeq	r0, r0, ip, asr #32
 638:	8e040e42 	cdphi	14, 0, cr0, cr4, cr2, {2}
 63c:	100e4201 	andne	r4, lr, r1, lsl #4
 640:	0000000c 	andeq	r0, r0, ip
 644:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 648:	7c020001 	stcvc	0, cr0, [r2], {1}
 64c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 650:	00000018 	andeq	r0, r0, r8, lsl r0
 654:	00000640 	andeq	r0, r0, r0, asr #12
 658:	000095ac 	andeq	r9, r0, ip, lsr #11
 65c:	0000009c 	muleq	r0, ip, r0
 660:	83100e42 	tsthi	r0, #1056	; 0x420
 664:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 668:	00018e02 	andeq	r8, r1, r2, lsl #28
 66c:	00000014 	andeq	r0, r0, r4, lsl r0
 670:	00000640 	andeq	r0, r0, r0, asr #12
 674:	00009648 	andeq	r9, r0, r8, asr #12
 678:	0000001c 	andeq	r0, r0, ip, lsl r0
 67c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 680:	00018e02 	andeq	r8, r1, r2, lsl #28
 684:	00000014 	andeq	r0, r0, r4, lsl r0
 688:	00000640 	andeq	r0, r0, r0, asr #12
 68c:	00009664 	andeq	r9, r0, r4, ror #12
 690:	00000028 	andeq	r0, r0, r8, lsr #32
 694:	83080e42 	movwhi	r0, #36418	; 0x8e42
 698:	00018e02 	andeq	r8, r1, r2, lsl #28
 69c:	00000014 	andeq	r0, r0, r4, lsl r0
 6a0:	00000640 	andeq	r0, r0, r0, asr #12
 6a4:	0000968c 	andeq	r9, r0, ip, lsl #13
 6a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6ac:	83080e42 	movwhi	r0, #36418	; 0x8e42
 6b0:	00018e02 	andeq	r8, r1, r2, lsl #28
 6b4:	00000014 	andeq	r0, r0, r4, lsl r0
 6b8:	00000640 	andeq	r0, r0, r0, asr #12
 6bc:	000096a8 	andeq	r9, r0, r8, lsr #13
 6c0:	0000002c 	andeq	r0, r0, ip, lsr #32
 6c4:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 6c8:	00018e02 	andeq	r8, r1, r2, lsl #28
 6cc:	00000014 	andeq	r0, r0, r4, lsl r0
 6d0:	00000640 	andeq	r0, r0, r0, asr #12
 6d4:	000096d4 	ldrdeq	r9, [r0], -r4
 6d8:	0000000c 	andeq	r0, r0, ip
 6dc:	83080e42 	movwhi	r0, #36418	; 0x8e42
 6e0:	00018e02 	andeq	r8, r1, r2, lsl #28
 6e4:	00000014 	andeq	r0, r0, r4, lsl r0
 6e8:	00000640 	andeq	r0, r0, r0, asr #12
 6ec:	000096e0 	andeq	r9, r0, r0, ror #13
 6f0:	00000020 	andeq	r0, r0, r0, lsr #32
 6f4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 6f8:	00018e02 	andeq	r8, r1, r2, lsl #28
 6fc:	0000000c 	andeq	r0, r0, ip
 700:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 704:	7c020001 	stcvc	0, cr0, [r2], {1}
 708:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 70c:	00000018 	andeq	r0, r0, r8, lsl r0
 710:	000006fc 	strdeq	r0, [r0], -ip
 714:	000097d0 	ldrdeq	r9, [r0], -r0
 718:	000000d4 	ldrdeq	r0, [r0], -r4
 71c:	83100e42 	tsthi	r0, #1056	; 0x420
 720:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 724:	00018e02 	andeq	r8, r1, r2, lsl #28
 728:	00000014 	andeq	r0, r0, r4, lsl r0
 72c:	000006fc 	strdeq	r0, [r0], -ip
 730:	000098a4 	andeq	r9, r0, r4, lsr #17
 734:	00000038 	andeq	r0, r0, r8, lsr r0
 738:	83080e42 	movwhi	r0, #36418	; 0x8e42
 73c:	00018e02 	andeq	r8, r1, r2, lsl #28
 740:	00000014 	andeq	r0, r0, r4, lsl r0
 744:	000006fc 	strdeq	r0, [r0], -ip
 748:	000098dc 	ldrdeq	r9, [r0], -ip
 74c:	00000038 	andeq	r0, r0, r8, lsr r0
 750:	83080e42 	movwhi	r0, #36418	; 0x8e42
 754:	00018e02 	andeq	r8, r1, r2, lsl #28
 758:	00000018 	andeq	r0, r0, r8, lsl r0
 75c:	000006fc 	strdeq	r0, [r0], -ip
 760:	00009914 	andeq	r9, r0, r4, lsl r9
 764:	000000cc 	andeq	r0, r0, ip, asr #1
 768:	83100e42 	tsthi	r0, #1056	; 0x420
 76c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 770:	00018e02 	andeq	r8, r1, r2, lsl #28
 774:	00000014 	andeq	r0, r0, r4, lsl r0
 778:	000006fc 	strdeq	r0, [r0], -ip
 77c:	000099e0 	andeq	r9, r0, r0, ror #19
 780:	0000004c 	andeq	r0, r0, ip, asr #32
 784:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 788:	00018e02 	andeq	r8, r1, r2, lsl #28
 78c:	00000014 	andeq	r0, r0, r4, lsl r0
 790:	000006fc 	strdeq	r0, [r0], -ip
 794:	00009a2c 	andeq	r9, r0, ip, lsr #20
 798:	00000024 	andeq	r0, r0, r4, lsr #32
 79c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 7a0:	00018e02 	andeq	r8, r1, r2, lsl #28
 7a4:	00000018 	andeq	r0, r0, r8, lsl r0
 7a8:	000006fc 	strdeq	r0, [r0], -ip
 7ac:	00009a50 	andeq	r9, r0, r0, asr sl
 7b0:	000000d8 	ldrdeq	r0, [r0], -r8
 7b4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 7b8:	86038504 	strhi	r8, [r3], -r4, lsl #10
 7bc:	00018e02 	andeq	r8, r1, r2, lsl #28
 7c0:	00000014 	andeq	r0, r0, r4, lsl r0
 7c4:	000006fc 	strdeq	r0, [r0], -ip
 7c8:	00009b28 	andeq	r9, r0, r8, lsr #22
 7cc:	0000002c 	andeq	r0, r0, ip, lsr #32
 7d0:	83080e42 	movwhi	r0, #36418	; 0x8e42
 7d4:	00018e02 	andeq	r8, r1, r2, lsl #28
 7d8:	00000018 	andeq	r0, r0, r8, lsl r0
 7dc:	000006fc 	strdeq	r0, [r0], -ip
 7e0:	00009b54 	andeq	r9, r0, r4, asr fp
 7e4:	00000084 	andeq	r0, r0, r4, lsl #1
 7e8:	83100e42 	tsthi	r0, #1056	; 0x420
 7ec:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 7f0:	00018e02 	andeq	r8, r1, r2, lsl #28
 7f4:	00000018 	andeq	r0, r0, r8, lsl r0
 7f8:	000006fc 	strdeq	r0, [r0], -ip
 7fc:	00009bd8 	ldrdeq	r9, [r0], -r8
 800:	00000084 	andeq	r0, r0, r4, lsl #1
 804:	83100e42 	tsthi	r0, #1056	; 0x420
 808:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 80c:	00018e02 	andeq	r8, r1, r2, lsl #28
 810:	00000014 	andeq	r0, r0, r4, lsl r0
 814:	000006fc 	strdeq	r0, [r0], -ip
 818:	00009c5c 	andeq	r9, r0, ip, asr ip
 81c:	00000084 	andeq	r0, r0, r4, lsl #1
 820:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 824:	00018e02 	andeq	r8, r1, r2, lsl #28
 828:	00000014 	andeq	r0, r0, r4, lsl r0
 82c:	000006fc 	strdeq	r0, [r0], -ip
 830:	00009ce0 	andeq	r9, r0, r0, ror #25
 834:	00000058 	andeq	r0, r0, r8, asr r0
 838:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 83c:	00018e02 	andeq	r8, r1, r2, lsl #28
 840:	0000000c 	andeq	r0, r0, ip
 844:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 848:	7c020001 	stcvc	0, cr0, [r2], {1}
 84c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 850:	0000000c 	andeq	r0, r0, ip
 854:	00000840 	andeq	r0, r0, r0, asr #16
 858:	00009d38 	andeq	r9, r0, r8, lsr sp
 85c:	00000020 	andeq	r0, r0, r0, lsr #32
 860:	0000000c 	andeq	r0, r0, ip
 864:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 868:	7c020001 	stcvc	0, cr0, [r2], {1}
 86c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 870:	00000014 	andeq	r0, r0, r4, lsl r0
 874:	00000860 	andeq	r0, r0, r0, ror #16
 878:	00009d58 	andeq	r9, r0, r8, asr sp
 87c:	00000028 	andeq	r0, r0, r8, lsr #32
 880:	83080e42 	movwhi	r0, #36418	; 0x8e42
 884:	00018e02 	andeq	r8, r1, r2, lsl #28
 888:	0000000c 	andeq	r0, r0, ip
 88c:	00000860 	andeq	r0, r0, r0, ror #16
 890:	00009d80 	andeq	r9, r0, r0, lsl #27
 894:	00000028 	andeq	r0, r0, r8, lsr #32

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	00000294 	muleq	r0, r4, r2
   4:	00000298 	muleq	r0, r8, r2
   8:	000002c8 	andeq	r0, r0, r8, asr #5
   c:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
	...
  18:	00008810 	andeq	r8, r0, r0, lsl r8
  1c:	00008884 	andeq	r8, r0, r4, lsl #17
	...
