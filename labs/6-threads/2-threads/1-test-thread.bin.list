
1-test-thread.bin.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e3a0d302 	mov	sp, #134217728	; 0x8000000
    8004:	e3a0b000 	mov	fp, #0
    8008:	eb00022e 	bl	88c8 <_cstart>
    800c:	eb000245 	bl	8928 <rpi_reboot>

00008010 <thread_code>:
#include "rpi-thread.h"

static unsigned thread_count, thread_sum;

// trivial first thread: does not block, explicitly calls exit.
static void thread_code(void *arg) {
    8010:	e92d4010 	push	{r4, lr}
    8014:	e1a04000 	mov	r4, r0
    unsigned *x = arg;
	printk("in thread %p, with %x\n", rpi_cur_thread()->tid, *x);
    8018:	eb00006a 	bl	81c8 <rpi_cur_thread>
    801c:	e5901044 	ldr	r1, [r0, #68]	; 0x44
    8020:	e59f0030 	ldr	r0, [pc, #48]	; 8058 <thread_code+0x48>
    8024:	e5942000 	ldr	r2, [r4]
    8028:	eb0000bd 	bl	8324 <printk>
	thread_count ++;
    802c:	e59f3028 	ldr	r3, [pc, #40]	; 805c <thread_code+0x4c>
    8030:	e5932000 	ldr	r2, [r3]
    8034:	e2822001 	add	r2, r2, #1
    8038:	e5832000 	str	r2, [r3]
	thread_sum += *x;
    803c:	e5941000 	ldr	r1, [r4]
    8040:	e5932004 	ldr	r2, [r3, #4]
    8044:	e0812002 	add	r2, r1, r2
    8048:	e5832004 	str	r2, [r3, #4]
    rpi_exit(0);
    804c:	e3a00000 	mov	r0, #0
    8050:	eb00006b 	bl	8204 <rpi_exit>
    8054:	e8bd8010 	pop	{r4, pc}
    8058:	00008e98 	muleq	r0, r8, lr
    805c:	00009250 	andeq	r9, r0, r0, asr r2

00008060 <notmain>:
}

void notmain() {
    8060:	e92d4070 	push	{r4, r5, r6, lr}
    uart_init();
    8064:	eb00027e 	bl	8a64 <uart_init>
    kmalloc_init();
    8068:	eb000353 	bl	8dbc <kmalloc_init>

    printk("about to test summing of 30 threads\n");
    806c:	e59f0080 	ldr	r0, [pc, #128]	; 80f4 <notmain+0x94>
    8070:	eb0000ab 	bl	8324 <printk>
	int n = 30;
	thread_sum = thread_count = 0;
    8074:	e59f307c 	ldr	r3, [pc, #124]	; 80f8 <notmain+0x98>
    8078:	e3a04000 	mov	r4, #0
    807c:	e5834000 	str	r4, [r3]
    8080:	e5834004 	str	r4, [r3, #4]

	for(int i = 0; i < n; i++)  {
        int *x = kmalloc(sizeof *x);
    8084:	e3a06004 	mov	r6, #4
        *x = i;
		rpi_fork(thread_code, x);
    8088:	e59f506c 	ldr	r5, [pc, #108]	; 80fc <notmain+0x9c>

    printk("about to test summing of 30 threads\n");
	int n = 30;
	thread_sum = thread_count = 0;

	for(int i = 0; i < n; i++)  {
    808c:	ea000006 	b	80ac <notmain+0x4c>
        int *x = kmalloc(sizeof *x);
    8090:	e1a00006 	mov	r0, r6
    8094:	eb00030a 	bl	8cc4 <kmalloc>
    8098:	e1a01000 	mov	r1, r0
        *x = i;
    809c:	e5804000 	str	r4, [r0]
		rpi_fork(thread_code, x);
    80a0:	e1a00005 	mov	r0, r5
    80a4:	eb00004b 	bl	81d8 <rpi_fork>

    printk("about to test summing of 30 threads\n");
	int n = 30;
	thread_sum = thread_count = 0;

	for(int i = 0; i < n; i++)  {
    80a8:	e2844001 	add	r4, r4, #1
    80ac:	e354001d 	cmp	r4, #29
    80b0:	dafffff6 	ble	8090 <notmain+0x30>
        int *x = kmalloc(sizeof *x);
        *x = i;
		rpi_fork(thread_code, x);
    }
	rpi_thread_start();
    80b4:	eb000066 	bl	8254 <rpi_thread_start>

	// no more threads: check.
	printk("count = %d, sum=%d\n", thread_count, thread_sum);
    80b8:	e59f4038 	ldr	r4, [pc, #56]	; 80f8 <notmain+0x98>
    80bc:	e59f003c 	ldr	r0, [pc, #60]	; 8100 <notmain+0xa0>
    80c0:	e5941000 	ldr	r1, [r4]
    80c4:	e5942004 	ldr	r2, [r4, #4]
    80c8:	eb000095 	bl	8324 <printk>
	assert(thread_count == n);
    80cc:	e5943000 	ldr	r3, [r4]
    80d0:	e353001e 	cmp	r3, #30
    80d4:	0a000005 	beq	80f0 <notmain+0x90>
    80d8:	e59f0024 	ldr	r0, [pc, #36]	; 8104 <notmain+0xa4>
    80dc:	e59f1024 	ldr	r1, [pc, #36]	; 8108 <notmain+0xa8>
    80e0:	e59f2024 	ldr	r2, [pc, #36]	; 810c <notmain+0xac>
    80e4:	e3a03021 	mov	r3, #33	; 0x21
    80e8:	eb00008d 	bl	8324 <printk>
    80ec:	eb00020d 	bl	8928 <rpi_reboot>
	clean_reboot();
    80f0:	eb0001ea 	bl	88a0 <clean_reboot>
    80f4:	00008eb0 			; <UNDEFINED> instruction: 0x00008eb0
    80f8:	00009250 	andeq	r9, r0, r0, asr r2
    80fc:	00008010 	andeq	r8, r0, r0, lsl r0
    8100:	00008ed8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    8104:	00008eec 	andeq	r8, r0, ip, ror #29
    8108:	00008f10 	andeq	r8, r0, r0, lsl pc
    810c:	00008e90 	muleq	r0, r0, lr

00008110 <Q_empty>:
} Q_t;

// used for iteration.
static E *Q_start(Q_t *q)   { return q->head; }
static E *Q_next(E *e)      { return e->next; }
static int Q_empty(Q_t *q)  { return q->head == 0; }
    8110:	e5900000 	ldr	r0, [r0]
    8114:	e2700001 	rsbs	r0, r0, #1
    8118:	33a00000 	movcc	r0, #0
    811c:	e12fff1e 	bx	lr

00008120 <Q_pop>:

// remove from front of list.
static E *Q_pop(Q_t *q) {
    8120:	e92d4008 	push	{r3, lr}
    demand(q, bad input);
    8124:	e2503000 	subs	r3, r0, #0
    8128:	1a000005 	bne	8144 <Q_pop+0x24>
    812c:	e59f0058 	ldr	r0, [pc, #88]	; 818c <Q_pop+0x6c>
    8130:	e59f1058 	ldr	r1, [pc, #88]	; 8190 <Q_pop+0x70>
    8134:	e59f2058 	ldr	r2, [pc, #88]	; 8194 <Q_pop+0x74>
    8138:	e3a03013 	mov	r3, #19
    813c:	eb000078 	bl	8324 <printk>
    8140:	eb0001f8 	bl	8928 <rpi_reboot>
    E *e = q->head;
    8144:	e5930000 	ldr	r0, [r3]

    if(!e) {
    8148:	e3500000 	cmp	r0, #0
    814c:	1a000008 	bne	8174 <Q_pop+0x54>
        demand(!q->tail, invalid Q);
    8150:	e5930004 	ldr	r0, [r3, #4]
    8154:	e3500000 	cmp	r0, #0
    8158:	08bd8008 	popeq	{r3, pc}
    815c:	e59f0034 	ldr	r0, [pc, #52]	; 8198 <Q_pop+0x78>
    8160:	e59f1028 	ldr	r1, [pc, #40]	; 8190 <Q_pop+0x70>
    8164:	e59f2028 	ldr	r2, [pc, #40]	; 8194 <Q_pop+0x74>
    8168:	e3a03017 	mov	r3, #23
    816c:	eb00006c 	bl	8324 <printk>
    8170:	eb0001ec 	bl	8928 <rpi_reboot>
        return 0;
    }
    q->head = e->next;
    8174:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    8178:	e5832000 	str	r2, [r3]
    if(!q->head)
    817c:	e3520000 	cmp	r2, #0
    8180:	18bd8008 	popne	{r3, pc}
        q->tail = 0;
    8184:	e5832004 	str	r2, [r3, #4]
    return e;
}
    8188:	e8bd8008 	pop	{r3, pc}
    818c:	00008f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
    8190:	00008fbc 			; <UNDEFINED> instruction: 0x00008fbc
    8194:	00008f20 	andeq	r8, r0, r0, lsr #30
    8198:	00008fc0 	andeq	r8, r0, r0, asr #31

0000819c <th_alloc>:
rpi_thread_t *rpi_cur_thread(void) {
    return cur_thread;
}

// keep a cache of freed thread blocks.  call kmalloc if run out.
static rpi_thread_t *th_alloc(void) {
    819c:	e92d4008 	push	{r3, lr}
    static Q_t freeq;
    rpi_thread_t *t = Q_pop(&freeq);
    81a0:	e59f0018 	ldr	r0, [pc, #24]	; 81c0 <th_alloc+0x24>
    81a4:	ebffffdd 	bl	8120 <Q_pop>
    if(!t)
    81a8:	e3500000 	cmp	r0, #0
    81ac:	18bd8008 	popne	{r3, pc}
        // stack has to be 8-byte aligned.
        t = kmalloc_aligned(sizeof *t, 8);
    81b0:	e59f000c 	ldr	r0, [pc, #12]	; 81c4 <th_alloc+0x28>
    81b4:	e3a01008 	mov	r1, #8
    81b8:	eb0002da 	bl	8d28 <kmalloc_aligned>
    return t;
}
    81bc:	e8bd8008 	pop	{r3, pc}
    81c0:	00009258 	andeq	r9, r0, r8, asr r2
    81c4:	00008048 	andeq	r8, r0, r8, asr #32

000081c8 <rpi_cur_thread>:
static rpi_thread_t *scheduler_thread;  // first scheduler thread.

// return pointer to the current thread.  
rpi_thread_t *rpi_cur_thread(void) {
    return cur_thread;
}
    81c8:	e59f3004 	ldr	r3, [pc, #4]	; 81d4 <rpi_cur_thread+0xc>
    81cc:	e5930008 	ldr	r0, [r3, #8]
    81d0:	e12fff1e 	bx	lr
    81d4:	00009258 	andeq	r9, r0, r8, asr r2

000081d8 <rpi_fork>:
/***********************************************************************
 * implement the code below.
 */

// create a new thread.
rpi_thread_t *rpi_fork(void (*code)(void *arg), void *arg) {
    81d8:	e92d4008 	push	{r3, lr}
    rpi_thread_t *t = th_alloc();
    81dc:	ebffffee 	bl	819c <th_alloc>

    // do the brain-surgery on the new thread stack here.
    unimplemented();
    81e0:	e59f0010 	ldr	r0, [pc, #16]	; 81f8 <rpi_fork+0x20>
    81e4:	e59f1010 	ldr	r1, [pc, #16]	; 81fc <rpi_fork+0x24>
    81e8:	e59f2010 	ldr	r2, [pc, #16]	; 8200 <rpi_fork+0x28>
    81ec:	e3a03027 	mov	r3, #39	; 0x27
    81f0:	eb00004b 	bl	8324 <printk>
    81f4:	eb0001cb 	bl	8928 <rpi_reboot>
    81f8:	00008ff0 	strdeq	r8, [r0], -r0
    81fc:	0000901c 	andeq	r9, r0, ip, lsl r0
    8200:	00008f28 	andeq	r8, r0, r8, lsr #30

00008204 <rpi_exit>:
    Q_append(&runq, t);
    return t;
}

// exit current thread.
void rpi_exit(int exitcode) {
    8204:	e92d4008 	push	{r3, lr}
 	 * switch to it.
	 
	 * 3. otherwise we are done, switch to the scheduler thread 
	 * so we call back into the client code.
	 */
	unimplemented();
    8208:	e59f0010 	ldr	r0, [pc, #16]	; 8220 <rpi_exit+0x1c>
    820c:	e59f1010 	ldr	r1, [pc, #16]	; 8224 <rpi_exit+0x20>
    8210:	e59f2010 	ldr	r2, [pc, #16]	; 8228 <rpi_exit+0x24>
    8214:	e3a03038 	mov	r3, #56	; 0x38
    8218:	eb000041 	bl	8324 <printk>
    821c:	eb0001c1 	bl	8928 <rpi_reboot>
    8220:	00008ff0 	strdeq	r8, [r0], -r0
    8224:	0000901c 	andeq	r9, r0, ip, lsl r0
    8228:	00008f34 	andeq	r8, r0, r4, lsr pc

0000822c <rpi_yield>:
}

// yield the current thread.
void rpi_yield(void) {
    822c:	e92d4008 	push	{r3, lr}
	// if cannot dequeue a thread from runq
	//	- there are no more runnable threads, return.  
	// otherwise: 
	//	1. put current thread on runq.
	// 	2. context switch to the new thread.
	unimplemented();
    8230:	e59f0010 	ldr	r0, [pc, #16]	; 8248 <rpi_yield+0x1c>
    8234:	e59f1010 	ldr	r1, [pc, #16]	; 824c <rpi_yield+0x20>
    8238:	e59f2010 	ldr	r2, [pc, #16]	; 8250 <rpi_yield+0x24>
    823c:	e3a03042 	mov	r3, #66	; 0x42
    8240:	eb000037 	bl	8324 <printk>
    8244:	eb0001b7 	bl	8928 <rpi_reboot>
    8248:	00008ff0 	strdeq	r8, [r0], -r0
    824c:	0000901c 	andeq	r9, r0, ip, lsl r0
    8250:	00008f40 	andeq	r8, r0, r0, asr #30

00008254 <rpi_thread_start>:
/*
 * starts the thread system.  
 * note: our caller is not a thread!  so you have to figure
 * out how to handle this.
 */
void rpi_thread_start(void) {
    8254:	e92d4008 	push	{r3, lr}
    AssertNow(offsetof(rpi_thread_t, stack) % 8 == 0);
    // statically check that the register save area is at offset 0.
    AssertNow(offsetof(rpi_thread_t, reg_save_area) == 0);

    // no other runnable thread: return.
    if(Q_empty(&runq))
    8258:	e59f002c 	ldr	r0, [pc, #44]	; 828c <rpi_thread_start+0x38>
    825c:	ebffffab 	bl	8110 <Q_empty>
    8260:	e3500000 	cmp	r0, #0
    8264:	18bd8008 	popne	{r3, pc}

    //  1. create a new fake thread 
    //  2. dequeue a thread from the runq
    //  3. context switch to it, saving current state in
    //	    <scheduler_thread>
    scheduler_thread = th_alloc();
    8268:	ebffffcb 	bl	819c <th_alloc>
    826c:	e59f301c 	ldr	r3, [pc, #28]	; 8290 <rpi_thread_start+0x3c>
    8270:	e5830014 	str	r0, [r3, #20]
    unimplemented();
    8274:	e59f0018 	ldr	r0, [pc, #24]	; 8294 <rpi_thread_start+0x40>
    8278:	e59f1018 	ldr	r1, [pc, #24]	; 8298 <rpi_thread_start+0x44>
    827c:	e59f2018 	ldr	r2, [pc, #24]	; 829c <rpi_thread_start+0x48>
    8280:	e3a03059 	mov	r3, #89	; 0x59
    8284:	eb000026 	bl	8324 <printk>
    8288:	eb0001a6 	bl	8928 <rpi_reboot>
    828c:	00009264 	andeq	r9, r0, r4, ror #4
    8290:	00009258 	andeq	r9, r0, r8, asr r2
    8294:	00008ff0 	strdeq	r8, [r0], -r0
    8298:	0000901c 	andeq	r9, r0, ip, lsl r0
    829c:	00008f4c 	andeq	r8, r0, ip, asr #30

000082a0 <rpi_exact_sleep>:
 */

// put the current thread on a blocked queue: resume in 
// exactly // <usec> micro-seconds.  not before, not after.
// should give low-error resumption times.
void rpi_exact_sleep(uint32_t usec) {
    82a0:	e92d4008 	push	{r3, lr}
    unimplemented();
    82a4:	e59f0010 	ldr	r0, [pc, #16]	; 82bc <rpi_exact_sleep+0x1c>
    82a8:	e59f1010 	ldr	r1, [pc, #16]	; 82c0 <rpi_exact_sleep+0x20>
    82ac:	e59f2010 	ldr	r2, [pc, #16]	; 82c4 <rpi_exact_sleep+0x24>
    82b0:	e3a03065 	mov	r3, #101	; 0x65
    82b4:	eb00001a 	bl	8324 <printk>
    82b8:	eb00019a 	bl	8928 <rpi_reboot>
    82bc:	00008ff0 	strdeq	r8, [r0], -r0
    82c0:	0000901c 	andeq	r9, r0, ip, lsl r0
    82c4:	00008f60 	andeq	r8, r0, r0, ror #30

000082c8 <rpi_fork_bounded>:

// fork a thread that guarantees it will 
// only run for <usec> until blocking.  this allows
// us to check for bad behavior / scheduling conflicts.
rpi_thread_t *
rpi_fork_bounded(void (*code)(void *arg), void *arg) {
    82c8:	e92d4008 	push	{r3, lr}
    unimplemented();
    82cc:	e59f0010 	ldr	r0, [pc, #16]	; 82e4 <rpi_fork_bounded+0x1c>
    82d0:	e59f1010 	ldr	r1, [pc, #16]	; 82e8 <rpi_fork_bounded+0x20>
    82d4:	e59f2010 	ldr	r2, [pc, #16]	; 82ec <rpi_fork_bounded+0x24>
    82d8:	e3a0306d 	mov	r3, #109	; 0x6d
    82dc:	eb000010 	bl	8324 <printk>
    82e0:	eb000190 	bl	8928 <rpi_reboot>
    82e4:	00008ff0 	strdeq	r8, [r0], -r0
    82e8:	0000901c 	andeq	r9, r0, ip, lsl r0
    82ec:	00008f70 	andeq	r8, r0, r0, ror pc

000082f0 <rpi_get_stats>:
                missed_deadlines,  // number of sleeps we were off on.
                missed_error,      // total usec of missed deadlines
                created_threads,
                exited_threads;
};
struct rpi_thread_stats rpi_get_stats(void) {
    82f0:	e92d4008 	push	{r3, lr}
    unimplemented();
    82f4:	e59f0010 	ldr	r0, [pc, #16]	; 830c <rpi_get_stats+0x1c>
    82f8:	e59f1010 	ldr	r1, [pc, #16]	; 8310 <rpi_get_stats+0x20>
    82fc:	e59f2010 	ldr	r2, [pc, #16]	; 8314 <rpi_get_stats+0x24>
    8300:	e3a03078 	mov	r3, #120	; 0x78
    8304:	eb000006 	bl	8324 <printk>
    8308:	eb000186 	bl	8928 <rpi_reboot>
    830c:	00008ff0 	strdeq	r8, [r0], -r0
    8310:	0000901c 	andeq	r9, r0, ip, lsl r0
    8314:	00008f84 	andeq	r8, r0, r4, lsl #31

00008318 <rpi_get_sp>:
    8318:	e12fff1e 	bx	lr

0000831c <rpi_cswitch>:
    831c:	e12fff1e 	bx	lr

00008320 <rpi_init_trampoline>:
    8320:	e12fff1e 	bx	lr

00008324 <printk>:
#include <stdarg.h>

#include "rpi.h"
#include "va-printk.h"

int printk(const char *fmt, ...) {
    8324:	e92d000f 	push	{r0, r1, r2, r3}
    8328:	e92d4030 	push	{r4, r5, lr}
    832c:	e24dd00c 	sub	sp, sp, #12
    // this is a really huge buffer for a pi.   could do this better.
    static char buf[1024];
    va_list args;

    va_start(args, fmt);
    8330:	e28d301c 	add	r3, sp, #28
    8334:	e58d3004 	str	r3, [sp, #4]
        int sz = va_printk(buf, sizeof buf, fmt, args);
    8338:	e59f4034 	ldr	r4, [pc, #52]	; 8374 <printk+0x50>
    833c:	e1a00004 	mov	r0, r4
    8340:	e3a01b01 	mov	r1, #1024	; 0x400
    8344:	e59d2018 	ldr	r2, [sp, #24]
    8348:	eb0000b2 	bl	8618 <va_printk>
    834c:	e1a05000 	mov	r5, r0
    va_end(args);


#if 1
    putk(buf);
    8350:	e59f3020 	ldr	r3, [pc, #32]	; 8378 <printk+0x54>
    8354:	e5933000 	ldr	r3, [r3]
    8358:	e1a00004 	mov	r0, r4
    835c:	e12fff33 	blx	r3
    int i;
    for(i = 0; buf[i]; i++)
        rpi_putchar(buf[i]);
#endif
    return sz;
}
    8360:	e1a00005 	mov	r0, r5
    8364:	e28dd00c 	add	sp, sp, #12
    8368:	e8bd4030 	pop	{r4, r5, lr}
    836c:	e28dd010 	add	sp, sp, #16
    8370:	e12fff1e 	bx	lr
    8374:	00009270 	andeq	r9, r0, r0, ror r2
    8378:	00008e88 	andeq	r8, r0, r8, lsl #29

0000837c <internal_putk>:
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    837c:	e92d4038 	push	{r3, r4, r5, lr}
    8380:	e1a04000 	mov	r4, r0
    for(; *p; p++)
        rpi_putchar(*p);
    8384:	e59f5020 	ldr	r5, [pc, #32]	; 83ac <internal_putk+0x30>
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    8388:	ea000002 	b	8398 <internal_putk+0x1c>
        rpi_putchar(*p);
    838c:	e5953000 	ldr	r3, [r5]
    8390:	e12fff33 	blx	r3
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    8394:	e2844001 	add	r4, r4, #1
    8398:	e5d40000 	ldrb	r0, [r4]
    839c:	e3500000 	cmp	r0, #0
    83a0:	1afffff9 	bne	838c <internal_putk+0x10>
        rpi_putchar(*p);
//  we were adding this.
//  rpi_putchar('\n');
    return 1;
}
    83a4:	e3a00001 	mov	r0, #1
    83a8:	e8bd8038 	pop	{r3, r4, r5, pc}
    83ac:	00008e8c 	andeq	r8, r0, ip, lsl #29

000083b0 <isdigit>:
    if(puts_fp)
        putk = puts_fp;
}

// XXX: check sign promotion.
static int isdigit(int c) { return c >= '0' && c <= '9'; }
    83b0:	e2400030 	sub	r0, r0, #48	; 0x30
    83b4:	e3500009 	cmp	r0, #9
    83b8:	83a00000 	movhi	r0, #0
    83bc:	93a00001 	movls	r0, #1
    83c0:	e12fff1e 	bx	lr

000083c4 <pad>:

// don't move: can't be inlined, gcc seems to have a bug.
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
    83c4:	e0611000 	rsb	r1, r1, r0
	// pad with leading spaces
	for(; len < width; len++)
		*p++ = ' ';
    83c8:	e3a03020 	mov	r3, #32
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    83cc:	ea000002 	b	83dc <pad+0x18>
		*p++ = ' ';
    83d0:	e5c03000 	strb	r3, [r0]
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    83d4:	e2811001 	add	r1, r1, #1
		*p++ = ' ';
    83d8:	e2800001 	add	r0, r0, #1
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    83dc:	e1510002 	cmp	r1, r2
    83e0:	bafffffa 	blt	83d0 <pad+0xc>
		*p++ = ' ';
	*p = 0;
    83e4:	e3a03000 	mov	r3, #0
    83e8:	e5c03000 	strb	r3, [r0]
	return p;
}
    83ec:	e12fff1e 	bx	lr

000083f0 <reverse>:

static char* reverse(char *dst, int n, char *p, char *start) {
	// drop the lower chars if the string is too big.
	int len = p - start + 1; // include \0
    83f0:	e063c002 	rsb	ip, r3, r2
    83f4:	e28cc001 	add	ip, ip, #1
	if(len > n)
    83f8:	e15c0001 	cmp	ip, r1
		start += (len - n);
    83fc:	c061100c 	rsbgt	r1, r1, ip
    8400:	c0833001 	addgt	r3, r3, r1

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    8404:	e2422001 	sub	r2, r2, #1
    8408:	e1a01000 	mov	r1, r0
    840c:	ea000002 	b	841c <reverse+0x2c>
		*dst++ = *p;
    8410:	e452c001 	ldrb	ip, [r2], #-1
    8414:	e5c1c000 	strb	ip, [r1]
    8418:	e2811001 	add	r1, r1, #1
		start += (len - n);

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    841c:	e1520003 	cmp	r2, r3
    8420:	2afffffa 	bcs	8410 <reverse+0x20>
		*dst++ = *p;
	*dst++ = 0;
    8424:	e3a03000 	mov	r3, #0
    8428:	e5c13000 	strb	r3, [r1]

	return s;
}
    842c:	e12fff1e 	bx	lr

00008430 <emit>:

static char* emit(unsigned base, char *dst, int n, int val, int width, int signed_p) {
    8430:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8434:	e24dd040 	sub	sp, sp, #64	; 0x40
    8438:	e1a05001 	mov	r5, r1
    843c:	e1a04002 	mov	r4, r2
    8440:	e59d2058 	ldr	r2, [sp, #88]	; 0x58
	// XXX: constrain width to be >= bit size: can change this.
	if(width > n)
    8444:	e1520004 	cmp	r2, r4
		width = n - 1;
    8448:	c2442001 	subgt	r2, r4, #1

	char buf[64], *p = buf; 
	unsigned u = val;
    844c:	e1a0c003 	mov	ip, r3

	switch(base) { 
    8450:	e2400002 	sub	r0, r0, #2
    8454:	e350000e 	cmp	r0, #14
    8458:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
    845c:	ea000042 	b	856c <emit+0x13c>
    8460:	00008544 	andeq	r8, r0, r4, asr #10
    8464:	0000856c 	andeq	r8, r0, ip, ror #10
    8468:	0000856c 	andeq	r8, r0, ip, ror #10
    846c:	0000856c 	andeq	r8, r0, ip, ror #10
    8470:	0000856c 	andeq	r8, r0, ip, ror #10
    8474:	0000856c 	andeq	r8, r0, ip, ror #10
    8478:	00008538 	andeq	r8, r0, r8, lsr r5
    847c:	0000856c 	andeq	r8, r0, ip, ror #10
    8480:	0000849c 	muleq	r0, ip, r4
    8484:	0000856c 	andeq	r8, r0, ip, ror #10
    8488:	0000856c 	andeq	r8, r0, ip, ror #10
    848c:	0000856c 	andeq	r8, r0, ip, ror #10
    8490:	0000856c 	andeq	r8, r0, ip, ror #10
    8494:	0000856c 	andeq	r8, r0, ip, ror #10
    8498:	00008510 	andeq	r8, r0, r0, lsl r5
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
    849c:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
    84a0:	e2911000 	adds	r1, r1, #0
    84a4:	13a01001 	movne	r1, #1
    84a8:	e0111fa3 	ands	r1, r1, r3, lsr #31
				neg_p = 1;
				val = -val;
    84ac:	1263c000 	rsbne	ip, r3, #0
	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
				neg_p = 1;
    84b0:	13a08001 	movne	r8, #1
	unsigned u = val;

	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
    84b4:	03a08000 	moveq	r8, #0
			if(val < 0 && signed_p) {
				neg_p = 1;
    84b8:	e1a0100d 	mov	r1, sp
				val = -val;
				u = val;
			}
			do { 
				*p++ = "0123456789"[u % 10];
    84bc:	e59f70e8 	ldr	r7, [pc, #232]	; 85ac <emit+0x17c>
    84c0:	e59f60e8 	ldr	r6, [pc, #232]	; 85b0 <emit+0x180>
    84c4:	ea000000 	b	84cc <emit+0x9c>
    84c8:	e1a01003 	mov	r1, r3
    84cc:	e2813001 	add	r3, r1, #1
    84d0:	e08e0c97 	umull	r0, lr, r7, ip
    84d4:	e1a0e1ae 	lsr	lr, lr, #3
    84d8:	e1a0000e 	mov	r0, lr
    84dc:	e08ee10e 	add	lr, lr, lr, lsl #2
    84e0:	e1a0e08e 	lsl	lr, lr, #1
    84e4:	e06ee00c 	rsb	lr, lr, ip
    84e8:	e7d6c00e 	ldrb	ip, [r6, lr]
    84ec:	e5c1c000 	strb	ip, [r1]
			} while(u /= 10); 
    84f0:	e1a0c000 	mov	ip, r0
    84f4:	e3500000 	cmp	r0, #0
    84f8:	1afffff2 	bne	84c8 <emit+0x98>
			if(neg_p)
    84fc:	e3580000 	cmp	r8, #0
				*p++ = '-';
    8500:	12813002 	addne	r3, r1, #2
    8504:	13a0002d 	movne	r0, #45	; 0x2d
    8508:	15c10001 	strbne	r0, [r1, #1]
    850c:	ea00001c 	b	8584 <emit+0x154>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    8510:	e1a0e00d 	mov	lr, sp
			break;
		}
		case 16:
			u = val;
                        do {
                                *p++ = "0123456789abcdef"[u % 16];
    8514:	e59f0098 	ldr	r0, [pc, #152]	; 85b4 <emit+0x184>
    8518:	e28e3001 	add	r3, lr, #1
    851c:	e20c100f 	and	r1, ip, #15
    8520:	e7d01001 	ldrb	r1, [r0, r1]
    8524:	e5ce1000 	strb	r1, [lr]
    8528:	e1a0e003 	mov	lr, r3
                        } while(u /= 16);
    852c:	e1b0c22c 	lsrs	ip, ip, #4
    8530:	1afffff8 	bne	8518 <emit+0xe8>
    8534:	ea000012 	b	8584 <emit+0x154>
                        break;
		// just a single char
		case 8:
			*p++ = val;
    8538:	e5cd3000 	strb	r3, [sp]
    853c:	e28d3001 	add	r3, sp, #1
			break;
    8540:	ea00000f 	b	8584 <emit+0x154>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    8544:	e1a0e00d 	mov	lr, sp
#if 0
			for(int i = 0; i < 32; i++)
				*p++ = "01"[(u & (1<<i)) != 0];
#else
                        do {
                        	*p++ = "01"[u % 2];
    8548:	e59f0068 	ldr	r0, [pc, #104]	; 85b8 <emit+0x188>
    854c:	e28e3001 	add	r3, lr, #1
    8550:	e20c1001 	and	r1, ip, #1
    8554:	e7d01001 	ldrb	r1, [r0, r1]
    8558:	e5ce1000 	strb	r1, [lr]
    855c:	e1a0e003 	mov	lr, r3
			} while(u /= 2);
    8560:	e1b0c0ac 	lsrs	ip, ip, #1
    8564:	1afffff8 	bne	854c <emit+0x11c>
    8568:	ea000005 	b	8584 <emit+0x154>
#endif
			break;
		default:
			assert(0);
    856c:	e59f0048 	ldr	r0, [pc, #72]	; 85bc <emit+0x18c>
    8570:	e59f1048 	ldr	r1, [pc, #72]	; 85c0 <emit+0x190>
    8574:	e59f2048 	ldr	r2, [pc, #72]	; 85c4 <emit+0x194>
    8578:	e3a03075 	mov	r3, #117	; 0x75
    857c:	ebffff68 	bl	8324 <printk>
    8580:	eb0000e8 	bl	8928 <rpi_reboot>
	}
	// number string is reversed, so re-reverse it.
	return reverse(dst, n, pad(p, buf, width), buf);
    8584:	e1a00003 	mov	r0, r3
    8588:	e1a0100d 	mov	r1, sp
    858c:	ebffff8c 	bl	83c4 <pad>
    8590:	e1a02000 	mov	r2, r0
    8594:	e1a00005 	mov	r0, r5
    8598:	e1a01004 	mov	r1, r4
    859c:	e1a0300d 	mov	r3, sp
    85a0:	ebffff92 	bl	83f0 <reverse>
}
    85a4:	e28dd040 	add	sp, sp, #64	; 0x40
    85a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    85ac:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    85b0:	00009078 	andeq	r9, r0, r8, ror r0
    85b4:	00009084 	andeq	r9, r0, r4, lsl #1
    85b8:	00009098 	muleq	r0, r8, r0
    85bc:	00009050 	andeq	r9, r0, r0, asr r0
    85c0:	00009064 	andeq	r9, r0, r4, rrx
    85c4:	0000902c 	andeq	r9, r0, ip, lsr #32

000085c8 <rpi_set_output>:
// override this is going through the network.
int (*rpi_putchar)(int c) = internal_putchar;
#endif


void rpi_set_output(int (*putc_fp)(int), int (*puts_fp)(const char *)) {
    85c8:	e92d4008 	push	{r3, lr}
    assert(putc_fp);
    85cc:	e3500000 	cmp	r0, #0
    85d0:	1a000005 	bne	85ec <rpi_set_output+0x24>
    85d4:	e59f0028 	ldr	r0, [pc, #40]	; 8604 <rpi_set_output+0x3c>
    85d8:	e59f1028 	ldr	r1, [pc, #40]	; 8608 <rpi_set_output+0x40>
    85dc:	e59f2028 	ldr	r2, [pc, #40]	; 860c <rpi_set_output+0x44>
    85e0:	e3a03020 	mov	r3, #32
    85e4:	ebffff4e 	bl	8324 <printk>
    85e8:	eb0000ce 	bl	8928 <rpi_reboot>
    rpi_putchar = putc_fp;
    85ec:	e59f301c 	ldr	r3, [pc, #28]	; 8610 <rpi_set_output+0x48>
    85f0:	e5830000 	str	r0, [r3]
    if(puts_fp)
    85f4:	e3510000 	cmp	r1, #0
        putk = puts_fp;
    85f8:	159f3014 	ldrne	r3, [pc, #20]	; 8614 <rpi_set_output+0x4c>
    85fc:	15831000 	strne	r1, [r3]
    8600:	e8bd8008 	pop	{r3, pc}
    8604:	0000909c 	muleq	r0, ip, r0
    8608:	00009064 	andeq	r9, r0, r4, rrx
    860c:	00009034 	andeq	r9, r0, r4, lsr r0
    8610:	00008e8c 	andeq	r8, r0, ip, lsl #29
    8614:	00008e88 	andeq	r8, r0, r8, lsl #29

00008618 <va_printk>:
	return reverse(dst, n, pad(p, buf, width), buf);
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
    8618:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    861c:	e24dd08c 	sub	sp, sp, #140	; 0x8c
    8620:	e1a0b000 	mov	fp, r0
    8624:	e1a0a003 	mov	sl, r3
	char *p = buf, *e = buf + n - 1;
    8628:	e2411001 	sub	r1, r1, #1
    862c:	e0808001 	add	r8, r0, r1

	buf[0] = 0;
    8630:	e3a03000 	mov	r3, #0
    8634:	e5c03000 	strb	r3, [r0]
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;
    8638:	e1a04000 	mov	r4, r0

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    863c:	ea000087 	b	8860 <va_printk+0x248>
		if(*fmt != '%')
    8640:	e3530025 	cmp	r3, #37	; 0x25
			*p++ = *fmt++;
    8644:	12822001 	addne	r2, r2, #1
    8648:	15c43000 	strbne	r3, [r4]
    864c:	12844001 	addne	r4, r4, #1
    8650:	1a000082 	bne	8860 <va_printk+0x248>
		
		else if(fmt[1] == '%') {
    8654:	e5d21001 	ldrb	r1, [r2, #1]
    8658:	e3510025 	cmp	r1, #37	; 0x25
			*p++ = *fmt;
    865c:	05c43000 	strbeq	r3, [r4]
			fmt+=2;
    8660:	02822002 	addeq	r2, r2, #2
	for(; *fmt && p < e; ) {
		if(*fmt != '%')
			*p++ = *fmt++;
		
		else if(fmt[1] == '%') {
			*p++ = *fmt;
    8664:	02844001 	addeq	r4, r4, #1
    8668:	0a00007c 	beq	8860 <va_printk+0x248>
			fmt+=2;
		} else {	
			fmt++;
    866c:	e2826001 	add	r6, r2, #1

			char *s, num[128];
			unsigned width = 0;
    8670:	e3a07000 	mov	r7, #0

			while(isdigit(*fmt)) {
    8674:	ea000004 	b	868c <va_printk+0x74>
				width = width*10 + *fmt - '0';
    8678:	e0877107 	add	r7, r7, r7, lsl #2
    867c:	e1a07087 	lsl	r7, r7, #1
    8680:	e0877005 	add	r7, r7, r5
    8684:	e2477030 	sub	r7, r7, #48	; 0x30
				fmt++;
    8688:	e2866001 	add	r6, r6, #1
			fmt++;

			char *s, num[128];
			unsigned width = 0;

			while(isdigit(*fmt)) {
    868c:	e5d65000 	ldrb	r5, [r6]
    8690:	e1a09005 	mov	r9, r5
    8694:	e1a00005 	mov	r0, r5
    8698:	ebffff44 	bl	83b0 <isdigit>
    869c:	e3500000 	cmp	r0, #0
    86a0:	1afffff4 	bne	8678 <va_printk+0x60>
				width = width*10 + *fmt - '0';
				fmt++;
			}
			assert(width < 32);
    86a4:	e357001f 	cmp	r7, #31
    86a8:	9a000005 	bls	86c4 <va_printk+0xac>
    86ac:	e59f01d8 	ldr	r0, [pc, #472]	; 888c <va_printk+0x274>
    86b0:	e59f11d8 	ldr	r1, [pc, #472]	; 8890 <va_printk+0x278>
    86b4:	e59f21d8 	ldr	r2, [pc, #472]	; 8894 <va_printk+0x27c>
    86b8:	e3a03092 	mov	r3, #146	; 0x92
    86bc:	ebffff18 	bl	8324 <printk>
    86c0:	eb000098 	bl	8928 <rpi_reboot>
			
			switch(*fmt) {
    86c4:	e2455062 	sub	r5, r5, #98	; 0x62
    86c8:	e3550016 	cmp	r5, #22
    86cc:	979ff105 	ldrls	pc, [pc, r5, lsl #2]
    86d0:	ea000051 	b	881c <va_printk+0x204>
    86d4:	000087c0 	andeq	r8, r0, r0, asr #15
    86d8:	000087f4 	strdeq	r8, [r0], -r4
    86dc:	00008748 	andeq	r8, r0, r8, asr #14
    86e0:	0000881c 	andeq	r8, r0, ip, lsl r8
    86e4:	00008730 	andeq	r8, r0, r0, lsr r7
    86e8:	0000881c 	andeq	r8, r0, ip, lsl r8
    86ec:	0000881c 	andeq	r8, r0, ip, lsl r8
    86f0:	0000881c 	andeq	r8, r0, ip, lsl r8
    86f4:	0000881c 	andeq	r8, r0, ip, lsl r8
    86f8:	0000881c 	andeq	r8, r0, ip, lsl r8
    86fc:	0000881c 	andeq	r8, r0, ip, lsl r8
    8700:	0000881c 	andeq	r8, r0, ip, lsl r8
    8704:	0000881c 	andeq	r8, r0, ip, lsl r8
    8708:	0000881c 	andeq	r8, r0, ip, lsl r8
    870c:	00008798 	muleq	r0, r8, r7
    8710:	0000881c 	andeq	r8, r0, ip, lsl r8
    8714:	0000881c 	andeq	r8, r0, ip, lsl r8
    8718:	000087e8 	andeq	r8, r0, r8, ror #15
    871c:	0000881c 	andeq	r8, r0, ip, lsl r8
    8720:	00008770 	andeq	r8, r0, r0, ror r7
    8724:	0000881c 	andeq	r8, r0, ip, lsl r8
    8728:	0000881c 	andeq	r8, r0, ip, lsl r8
    872c:	00008798 	muleq	r0, r8, r7
			case 'f':
			{
#ifndef RPI_FP_ENABLED
				panic("float not enabled!!!");
    8730:	e59f0160 	ldr	r0, [pc, #352]	; 8898 <va_printk+0x280>
    8734:	e59f1154 	ldr	r1, [pc, #340]	; 8890 <va_printk+0x278>
    8738:	e59f2154 	ldr	r2, [pc, #340]	; 8894 <va_printk+0x27c>
    873c:	e3a03098 	mov	r3, #152	; 0x98
    8740:	ebfffef7 	bl	8324 <printk>
    8744:	eb000077 	bl	8928 <rpi_reboot>

				break;
#endif
			}
			case 'd':
				s = emit(10, num, 128, va_arg(args, int), width, 1);
    8748:	e59a3000 	ldr	r3, [sl]
    874c:	e28aa004 	add	sl, sl, #4
    8750:	e58d7000 	str	r7, [sp]
    8754:	e3a02001 	mov	r2, #1
    8758:	e58d2004 	str	r2, [sp, #4]
    875c:	e3a0000a 	mov	r0, #10
    8760:	e28d1008 	add	r1, sp, #8
    8764:	e3a02080 	mov	r2, #128	; 0x80
    8768:	ebffff30 	bl	8430 <emit>
				break;
    876c:	ea000031 	b	8838 <va_printk+0x220>
			case 'u':
				s = emit(10, num, 128, va_arg(args, unsigned), width, 0);
    8770:	e59a3000 	ldr	r3, [sl]
    8774:	e28aa004 	add	sl, sl, #4
    8778:	e58d7000 	str	r7, [sp]
    877c:	e3a02000 	mov	r2, #0
    8780:	e58d2004 	str	r2, [sp, #4]
    8784:	e3a0000a 	mov	r0, #10
    8788:	e28d1008 	add	r1, sp, #8
    878c:	e3a02080 	mov	r2, #128	; 0x80
    8790:	ebffff26 	bl	8430 <emit>
				break;
    8794:	ea000027 	b	8838 <va_printk+0x220>
			case 'p':
			case 'x':
				s = emit(16, num, 128, va_arg(args, unsigned), width, 0);
    8798:	e59a3000 	ldr	r3, [sl]
    879c:	e28aa004 	add	sl, sl, #4
    87a0:	e58d7000 	str	r7, [sp]
    87a4:	e3a02000 	mov	r2, #0
    87a8:	e58d2004 	str	r2, [sp, #4]
    87ac:	e3a00010 	mov	r0, #16
    87b0:	e28d1008 	add	r1, sp, #8
    87b4:	e3a02080 	mov	r2, #128	; 0x80
    87b8:	ebffff1c 	bl	8430 <emit>
				break;
    87bc:	ea00001d 	b	8838 <va_printk+0x220>
			case 'b':
				s = emit(2, num, 128, va_arg(args, unsigned), width, 0);
    87c0:	e59a3000 	ldr	r3, [sl]
    87c4:	e28aa004 	add	sl, sl, #4
    87c8:	e58d7000 	str	r7, [sp]
    87cc:	e3a02000 	mov	r2, #0
    87d0:	e58d2004 	str	r2, [sp, #4]
    87d4:	e3a00002 	mov	r0, #2
    87d8:	e28d1008 	add	r1, sp, #8
    87dc:	e3a02080 	mov	r2, #128	; 0x80
    87e0:	ebffff12 	bl	8430 <emit>
				break;
    87e4:	ea000013 	b	8838 <va_printk+0x220>
			case 's':
				s = va_arg(args, char *);
    87e8:	e59a0000 	ldr	r0, [sl]
    87ec:	e28aa004 	add	sl, sl, #4
				break;
    87f0:	ea000010 	b	8838 <va_printk+0x220>
			case 'c':
				s = emit(8, num, 128, va_arg(args, int),width,0);
    87f4:	e59a3000 	ldr	r3, [sl]
    87f8:	e28aa004 	add	sl, sl, #4
    87fc:	e58d7000 	str	r7, [sp]
    8800:	e3a02000 	mov	r2, #0
    8804:	e58d2004 	str	r2, [sp, #4]
    8808:	e3a00008 	mov	r0, #8
    880c:	e08d1000 	add	r1, sp, r0
    8810:	e3a02080 	mov	r2, #128	; 0x80
    8814:	ebffff05 	bl	8430 <emit>
				break;
    8818:	ea000006 	b	8838 <va_printk+0x220>
			default: 
				panic("printk: not handling specifier '%c'\n", *fmt);
    881c:	e58d9000 	str	r9, [sp]
    8820:	e59f0074 	ldr	r0, [pc, #116]	; 889c <va_printk+0x284>
    8824:	e59f1064 	ldr	r1, [pc, #100]	; 8890 <va_printk+0x278>
    8828:	e59f2064 	ldr	r2, [pc, #100]	; 8894 <va_printk+0x27c>
    882c:	e3a030b9 	mov	r3, #185	; 0xb9
    8830:	ebfffebb 	bl	8324 <printk>
    8834:	eb00003b 	bl	8928 <rpi_reboot>
				return 0;   // ugh
			}
			fmt++;
    8838:	e2862001 	add	r2, r6, #1

			// safe string copy
			for(; p < e && *s; )
    883c:	ea000002 	b	884c <va_printk+0x234>
				*p++ = *s++;
    8840:	e2800001 	add	r0, r0, #1
    8844:	e5c43000 	strb	r3, [r4]
    8848:	e2844001 	add	r4, r4, #1
				return 0;   // ugh
			}
			fmt++;

			// safe string copy
			for(; p < e && *s; )
    884c:	e1540008 	cmp	r4, r8
    8850:	2a000002 	bcs	8860 <va_printk+0x248>
    8854:	e5d03000 	ldrb	r3, [r0]
    8858:	e3530000 	cmp	r3, #0
    885c:	1afffff7 	bne	8840 <va_printk+0x228>

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    8860:	e5d23000 	ldrb	r3, [r2]
    8864:	e3530000 	cmp	r3, #0
    8868:	0a000001 	beq	8874 <va_printk+0x25c>
    886c:	e1540008 	cmp	r4, r8
    8870:	3affff72 	bcc	8640 <va_printk+0x28>
			// safe string copy
			for(; p < e && *s; )
				*p++ = *s++;
		}
	}
	*p++ = 0;
    8874:	e2840001 	add	r0, r4, #1
    8878:	e3a03000 	mov	r3, #0
    887c:	e5c43000 	strb	r3, [r4]
	return p - buf;
}
    8880:	e06b0000 	rsb	r0, fp, r0
    8884:	e28dd08c 	add	sp, sp, #140	; 0x8c
    8888:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    888c:	000090b4 	strheq	r9, [r0], -r4
    8890:	00009064 	andeq	r9, r0, r4, rrx
    8894:	00009044 	andeq	r9, r0, r4, asr #32
    8898:	000090d0 	ldrdeq	r9, [r0], -r0
    889c:	000090f8 	strdeq	r9, [r0], -r8

000088a0 <clean_reboot>:
#include "rpi.h"

// print out a special message so bootloader exits
void clean_reboot(void) {
    88a0:	e92d4008 	push	{r3, lr}
    putk("DONE!!!\n");
    88a4:	e59f3014 	ldr	r3, [pc, #20]	; 88c0 <clean_reboot+0x20>
    88a8:	e5933000 	ldr	r3, [r3]
    88ac:	e59f0010 	ldr	r0, [pc, #16]	; 88c4 <clean_reboot+0x24>
    88b0:	e12fff33 	blx	r3
    delay_ms(100);       // (hopefully) enough time for message to get flushed.
    88b4:	e3a00064 	mov	r0, #100	; 0x64
    88b8:	eb000041 	bl	89c4 <delay_ms>
    rpi_reboot();
    88bc:	eb000019 	bl	8928 <rpi_reboot>
    88c0:	00008e88 	andeq	r8, r0, r8, lsl #29
    88c4:	00009130 	andeq	r9, r0, r0, lsr r1

000088c8 <_cstart>:
#include "rpi.h"

void _cstart() {
    88c8:	e92d4008 	push	{r3, lr}
    extern int __bss_start__, __bss_end__;
	void notmain();

    int* bss = &__bss_start__;
    88cc:	e59f3020 	ldr	r3, [pc, #32]	; 88f4 <_cstart+0x2c>
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    88d0:	e59f2020 	ldr	r2, [pc, #32]	; 88f8 <_cstart+0x30>
        *bss++ = 0;
    88d4:	e3a01000 	mov	r1, #0
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    88d8:	ea000001 	b	88e4 <_cstart+0x1c>
        *bss++ = 0;
    88dc:	e5831000 	str	r1, [r3]
    88e0:	e2833004 	add	r3, r3, #4
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    88e4:	e1530002 	cmp	r3, r2
    88e8:	3afffffb 	bcc	88dc <_cstart+0x14>
        *bss++ = 0;

    notmain(); 
    88ec:	ebfffddb 	bl	8060 <notmain>
	rpi_reboot();
    88f0:	eb00000c 	bl	8928 <rpi_reboot>
    88f4:	00009250 	andeq	r9, r0, r0, asr r2
    88f8:	00009678 	andeq	r9, r0, r8, ror r6

000088fc <at_user_level>:
 * works if we have a trashed stack pointer?
 */
static unsigned user_level = 0b10000;
int at_user_level(void) {
    unsigned cpsr = 0;
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    88fc:	e10f0000 	mrs	r0, CPSR

    // user level = lower 5 bits = 0b10000);
    return (cpsr  & 0b11111)  == user_level;
    8900:	e200001f 	and	r0, r0, #31
}
    8904:	e3500010 	cmp	r0, #16
    8908:	13a00000 	movne	r0, #0
    890c:	03a00001 	moveq	r0, #1
    8910:	e12fff1e 	bx	lr

00008914 <set_user_level>:

// this is just used by the reboot code.
void set_user_level(void) {
    unsigned cpsr = 0;
    // XXX: shouldn't we just set the one bit?
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    8914:	e10f3000 	mrs	r3, CPSR
        cpsr = (cpsr & ~0b11111) | user_level;
    8918:	e3c3301f 	bic	r3, r3, #31
    891c:	e3833010 	orr	r3, r3, #16
    asm volatile("msr cpsr, %0" :: "r"(cpsr));
    8920:	e129f003 	msr	CPSR_fc, r3
    8924:	e12fff1e 	bx	lr

00008928 <rpi_reboot>:
}

void rpi_reboot(void) {
    8928:	e92d4008 	push	{r3, lr}
    if(at_user_level()) {
    892c:	ebfffff2 	bl	88fc <at_user_level>
    8930:	e3500000 	cmp	r0, #0
    8934:	0a000000 	beq	893c <rpi_reboot+0x14>
        set_user_level();
    8938:	ebfffff5 	bl	8914 <set_user_level>
        // of stuff.
        // assert(!at_user_level());
    }

    // gives uart time to flush: should just call flush directly.
    delay_ms(30);
    893c:	e3a0001e 	mov	r0, #30
    8940:	eb00001f 	bl	89c4 <delay_ms>
    const int PM_WDOG = 0x20100024;
    const int PM_PASSWORD = 0x5a000000;
    const int PM_RSTC_WRCFG_FULL_RESET = 0x00000020;

    // timeout = 1/16th of a second? (whatever)
    PUT32(PM_WDOG, PM_PASSWORD | 1);
    8944:	e59f0014 	ldr	r0, [pc, #20]	; 8960 <rpi_reboot+0x38>
    8948:	e59f1014 	ldr	r1, [pc, #20]	; 8964 <rpi_reboot+0x3c>
    894c:	eb000028 	bl	89f4 <PUT32>
    PUT32(PM_RSTC, PM_PASSWORD | PM_RSTC_WRCFG_FULL_RESET);
    8950:	e59f0010 	ldr	r0, [pc, #16]	; 8968 <rpi_reboot+0x40>
    8954:	e59f1010 	ldr	r1, [pc, #16]	; 896c <rpi_reboot+0x44>
    8958:	eb000025 	bl	89f4 <PUT32>
    895c:	eafffffe 	b	895c <rpi_reboot+0x34>
    8960:	20100024 	andscs	r0, r0, r4, lsr #32
    8964:	5a000001 	bpl	8970 <delay_cycles>
    8968:	2010001c 	andscs	r0, r0, ip, lsl r0
    896c:	5a000020 	bpl	89f4 <PUT32>

00008970 <delay_cycles>:
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    8970:	ea000001 	b	897c <delay_cycles+0xc>
        asm("add r1, r1, #0");
    8974:	e2811000 	add	r1, r1, #0
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    8978:	e1a00003 	mov	r0, r3
    897c:	e2403001 	sub	r3, r0, #1
    8980:	e3500000 	cmp	r0, #0
    8984:	1afffffa 	bne	8974 <delay_cycles+0x4>
        asm("add r1, r1, #0");
}
    8988:	e12fff1e 	bx	lr

0000898c <timer_get_usec>:

// in usec
unsigned timer_get_usec(void) {
    898c:	e92d4008 	push	{r3, lr}
    return GET32(0x20003004);
    8990:	e59f0004 	ldr	r0, [pc, #4]	; 899c <timer_get_usec+0x10>
    8994:	eb000022 	bl	8a24 <GET32>
}
    8998:	e8bd8008 	pop	{r3, pc}
    899c:	20003004 	andcs	r3, r0, r4

000089a0 <delay_us>:

void delay_us(unsigned us) {
    89a0:	e92d4038 	push	{r3, r4, r5, lr}
    89a4:	e1a05000 	mov	r5, r0
    unsigned rb = timer_get_usec();
    89a8:	ebfffff7 	bl	898c <timer_get_usec>
    89ac:	e1a04000 	mov	r4, r0
    while (1) {
        unsigned ra = timer_get_usec();
    89b0:	ebfffff5 	bl	898c <timer_get_usec>
        if ((ra - rb) >= us) {
    89b4:	e0640000 	rsb	r0, r4, r0
    89b8:	e1500005 	cmp	r0, r5
    89bc:	3afffffb 	bcc	89b0 <delay_us+0x10>
            break;
        }
    }
}
    89c0:	e8bd8038 	pop	{r3, r4, r5, pc}

000089c4 <delay_ms>:
void delay_ms(unsigned ms) {
    89c4:	e92d4008 	push	{r3, lr}
    delay_us(ms*1000);
    89c8:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    89cc:	e0000093 	mul	r0, r3, r0
    89d0:	ebfffff2 	bl	89a0 <delay_us>
    89d4:	e8bd8008 	pop	{r3, pc}

000089d8 <delay_sec>:
}
void delay_sec(unsigned sec) {
    89d8:	e92d4008 	push	{r3, lr}
    delay_ms(sec*1000);
    89dc:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    89e0:	e0000093 	mul	r0, r3, r0
    89e4:	ebfffff6 	bl	89c4 <delay_ms>
    89e8:	e8bd8008 	pop	{r3, pc}

000089ec <put32>:
    89ec:	e5801000 	str	r1, [r0]
    89f0:	e12fff1e 	bx	lr

000089f4 <PUT32>:
    89f4:	e5801000 	str	r1, [r0]
    89f8:	e12fff1e 	bx	lr

000089fc <put16>:
    89fc:	e1c010b0 	strh	r1, [r0]
    8a00:	e12fff1e 	bx	lr

00008a04 <PUT16>:
    8a04:	e1c010b0 	strh	r1, [r0]
    8a08:	e12fff1e 	bx	lr

00008a0c <put8>:
    8a0c:	e5c01000 	strb	r1, [r0]
    8a10:	e12fff1e 	bx	lr

00008a14 <PUT8>:
    8a14:	e5c01000 	strb	r1, [r0]
    8a18:	e12fff1e 	bx	lr

00008a1c <get32>:
    8a1c:	e5900000 	ldr	r0, [r0]
    8a20:	e12fff1e 	bx	lr

00008a24 <GET32>:
    8a24:	e5900000 	ldr	r0, [r0]
    8a28:	e12fff1e 	bx	lr

00008a2c <GETPC>:
    8a2c:	e1a0000e 	mov	r0, lr
    8a30:	e12fff1e 	bx	lr

00008a34 <dummy>:
    8a34:	e12fff1e 	bx	lr

00008a38 <or_in32>:
    8a38:	e92d4070 	push	{r4, r5, r6, lr}
    8a3c:	e1a04000 	mov	r4, r0
    8a40:	e1a05001 	mov	r5, r1
    8a44:	ebfffff4 	bl	8a1c <get32>
    8a48:	e1801005 	orr	r1, r0, r5
    8a4c:	e1a00004 	mov	r0, r4
    8a50:	ebffffe5 	bl	89ec <put32>
    8a54:	e8bd8070 	pop	{r4, r5, r6, pc}

00008a58 <uart_get>:
    8a58:	e59f0000 	ldr	r0, [pc]	; 8a60 <uart_get+0x8>
    8a5c:	e12fff1e 	bx	lr
    8a60:	20215040 	eorcs	r5, r1, r0, asr #32

00008a64 <uart_init>:
    8a64:	e92d4010 	push	{r4, lr}
    8a68:	e3a01002 	mov	r1, #2
    8a6c:	e3a0000e 	mov	r0, #14
    8a70:	eb00004b 	bl	8ba4 <gpio_set_function>
    8a74:	e3a01002 	mov	r1, #2
    8a78:	e3a0000f 	mov	r0, #15
    8a7c:	eb000048 	bl	8ba4 <gpio_set_function>
    8a80:	eb0000fa 	bl	8e70 <dev_barrier>
    8a84:	e3a01001 	mov	r1, #1
    8a88:	e59f0064 	ldr	r0, [pc, #100]	; 8af4 <uart_init+0x90>
    8a8c:	ebffffe9 	bl	8a38 <or_in32>
    8a90:	eb0000f6 	bl	8e70 <dev_barrier>
    8a94:	e59f405c 	ldr	r4, [pc, #92]	; 8af8 <uart_init+0x94>
    8a98:	e3a01000 	mov	r1, #0
    8a9c:	e1a00004 	mov	r0, r4
    8aa0:	ebffffd1 	bl	89ec <put32>
    8aa4:	e3a01000 	mov	r1, #0
    8aa8:	e59f004c 	ldr	r0, [pc, #76]	; 8afc <uart_init+0x98>
    8aac:	ebffffce 	bl	89ec <put32>
    8ab0:	e3a01003 	mov	r1, #3
    8ab4:	e59f0044 	ldr	r0, [pc, #68]	; 8b00 <uart_init+0x9c>
    8ab8:	ebffffcb 	bl	89ec <put32>
    8abc:	e3a01000 	mov	r1, #0
    8ac0:	e59f003c 	ldr	r0, [pc, #60]	; 8b04 <uart_init+0xa0>
    8ac4:	ebffffc8 	bl	89ec <put32>
    8ac8:	e3a010c7 	mov	r1, #199	; 0xc7
    8acc:	e59f0034 	ldr	r0, [pc, #52]	; 8b08 <uart_init+0xa4>
    8ad0:	ebffffc5 	bl	89ec <put32>
    8ad4:	e59f1030 	ldr	r1, [pc, #48]	; 8b0c <uart_init+0xa8>
    8ad8:	e59f0030 	ldr	r0, [pc, #48]	; 8b10 <uart_init+0xac>
    8adc:	ebffffc2 	bl	89ec <put32>
    8ae0:	e3a01003 	mov	r1, #3
    8ae4:	e1a00004 	mov	r0, r4
    8ae8:	ebffffbf 	bl	89ec <put32>
    8aec:	eb0000df 	bl	8e70 <dev_barrier>
    8af0:	e8bd8010 	pop	{r4, pc}
    8af4:	20215004 	eorcs	r5, r1, r4
    8af8:	20215060 	eorcs	r5, r1, r0, rrx
    8afc:	20215044 	eorcs	r5, r1, r4, asr #32
    8b00:	2021504c 	eorcs	r5, r1, ip, asr #32
    8b04:	20215050 	eorcs	r5, r1, r0, asr r0
    8b08:	20215048 	eorcs	r5, r1, r8, asr #32
    8b0c:	0000010e 	andeq	r0, r0, lr, lsl #2
    8b10:	20215068 	eorcs	r5, r1, r8, rrx

00008b14 <uart_can_getc>:
    8b14:	e92d4010 	push	{r4, lr}
    8b18:	e59f0008 	ldr	r0, [pc, #8]	; 8b28 <uart_can_getc+0x14>
    8b1c:	ebffffbe 	bl	8a1c <get32>
    8b20:	e2000001 	and	r0, r0, #1
    8b24:	e8bd8010 	pop	{r4, pc}
    8b28:	20215064 	eorcs	r5, r1, r4, rrx

00008b2c <uart_can_putc>:
    8b2c:	e92d4010 	push	{r4, lr}
    8b30:	e59f0010 	ldr	r0, [pc, #16]	; 8b48 <uart_can_putc+0x1c>
    8b34:	ebffffb8 	bl	8a1c <get32>
    8b38:	e3100002 	tst	r0, #2
    8b3c:	13a00001 	movne	r0, #1
    8b40:	03a00000 	moveq	r0, #0
    8b44:	e8bd8010 	pop	{r4, pc}
    8b48:	20215064 	eorcs	r5, r1, r4, rrx

00008b4c <uart_getc>:
    8b4c:	e92d4010 	push	{r4, lr}
    8b50:	ebffffef 	bl	8b14 <uart_can_getc>
    8b54:	e3500000 	cmp	r0, #0
    8b58:	0afffffc 	beq	8b50 <uart_getc+0x4>
    8b5c:	e59f0008 	ldr	r0, [pc, #8]	; 8b6c <uart_getc+0x20>
    8b60:	ebffffad 	bl	8a1c <get32>
    8b64:	e6ef0070 	uxtb	r0, r0
    8b68:	e8bd8010 	pop	{r4, pc}
    8b6c:	20215040 	eorcs	r5, r1, r0, asr #32

00008b70 <uart_putc>:
    8b70:	e92d4010 	push	{r4, lr}
    8b74:	e1a04000 	mov	r4, r0
    8b78:	ebffffeb 	bl	8b2c <uart_can_putc>
    8b7c:	e3500000 	cmp	r0, #0
    8b80:	0afffffc 	beq	8b78 <uart_putc+0x8>
    8b84:	e6ef1074 	uxtb	r1, r4
    8b88:	e59f0004 	ldr	r0, [pc, #4]	; 8b94 <uart_putc+0x24>
    8b8c:	ebffff96 	bl	89ec <put32>
    8b90:	e8bd8010 	pop	{r4, pc}
    8b94:	20215040 	eorcs	r5, r1, r0, asr #32

00008b98 <uart_has_data>:
    8b98:	e92d4010 	push	{r4, lr}
    8b9c:	ebffffdc 	bl	8b14 <uart_can_getc>
    8ba0:	e8bd8010 	pop	{r4, pc}

00008ba4 <gpio_set_function>:
    8ba4:	e350001f 	cmp	r0, #31
    8ba8:	812fff1e 	bxhi	lr
    8bac:	e3d13007 	bics	r3, r1, #7
    8bb0:	112fff1e 	bxne	lr
    8bb4:	e92d4070 	push	{r4, r5, r6, lr}
    8bb8:	e1a04001 	mov	r4, r1
    8bbc:	e59f2044 	ldr	r2, [pc, #68]	; 8c08 <gpio_set_function+0x64>
    8bc0:	e0832290 	umull	r2, r3, r0, r2
    8bc4:	e1a031a3 	lsr	r3, r3, #3
    8bc8:	e1a06003 	mov	r6, r3
    8bcc:	e0833103 	add	r3, r3, r3, lsl #2
    8bd0:	e1a02083 	lsl	r2, r3, #1
    8bd4:	e0403002 	sub	r3, r0, r2
    8bd8:	e0835083 	add	r5, r3, r3, lsl #1
    8bdc:	e1a06106 	lsl	r6, r6, #2
    8be0:	e2866202 	add	r6, r6, #536870912	; 0x20000000
    8be4:	e2866602 	add	r6, r6, #2097152	; 0x200000
    8be8:	e1a00006 	mov	r0, r6
    8bec:	ebffff8a 	bl	8a1c <get32>
    8bf0:	e3a01007 	mov	r1, #7
    8bf4:	e1c01511 	bic	r1, r0, r1, lsl r5
    8bf8:	e1811514 	orr	r1, r1, r4, lsl r5
    8bfc:	e1a00006 	mov	r0, r6
    8c00:	ebffff79 	bl	89ec <put32>
    8c04:	e8bd8070 	pop	{r4, r5, r6, pc}
    8c08:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd

00008c0c <gpio_set_output>:
    8c0c:	e92d4010 	push	{r4, lr}
    8c10:	e3a01001 	mov	r1, #1
    8c14:	ebffffe2 	bl	8ba4 <gpio_set_function>
    8c18:	e8bd8010 	pop	{r4, pc}

00008c1c <gpio_set_on>:
    8c1c:	e350001f 	cmp	r0, #31
    8c20:	812fff1e 	bxhi	lr
    8c24:	e92d4010 	push	{r4, lr}
    8c28:	e3a01001 	mov	r1, #1
    8c2c:	e1a01011 	lsl	r1, r1, r0
    8c30:	e59f0004 	ldr	r0, [pc, #4]	; 8c3c <gpio_set_on+0x20>
    8c34:	ebffff6e 	bl	89f4 <PUT32>
    8c38:	e8bd8010 	pop	{r4, pc}
    8c3c:	2020001c 	eorcs	r0, r0, ip, lsl r0

00008c40 <gpio_set_off>:
    8c40:	e350001f 	cmp	r0, #31
    8c44:	812fff1e 	bxhi	lr
    8c48:	e92d4010 	push	{r4, lr}
    8c4c:	e3a01001 	mov	r1, #1
    8c50:	e1a01011 	lsl	r1, r1, r0
    8c54:	e59f0004 	ldr	r0, [pc, #4]	; 8c60 <gpio_set_off+0x20>
    8c58:	ebffff65 	bl	89f4 <PUT32>
    8c5c:	e8bd8010 	pop	{r4, pc}
    8c60:	20200028 	eorcs	r0, r0, r8, lsr #32

00008c64 <gpio_set_input>:
    8c64:	e92d4010 	push	{r4, lr}
    8c68:	e3a01000 	mov	r1, #0
    8c6c:	ebffffcc 	bl	8ba4 <gpio_set_function>
    8c70:	e8bd8010 	pop	{r4, pc}

00008c74 <gpio_write>:
    8c74:	e92d4010 	push	{r4, lr}
    8c78:	e3510000 	cmp	r1, #0
    8c7c:	1a000001 	bne	8c88 <gpio_write+0x14>
    8c80:	ebffffee 	bl	8c40 <gpio_set_off>
    8c84:	e8bd8010 	pop	{r4, pc}
    8c88:	ebffffe3 	bl	8c1c <gpio_set_on>
    8c8c:	e8bd8010 	pop	{r4, pc}

00008c90 <gpio_read>:
    8c90:	e350001f 	cmp	r0, #31
    8c94:	8a000007 	bhi	8cb8 <gpio_read+0x28>
    8c98:	e92d4010 	push	{r4, lr}
    8c9c:	e200401f 	and	r4, r0, #31
    8ca0:	e59f3018 	ldr	r3, [pc, #24]	; 8cc0 <gpio_read+0x30>
    8ca4:	e08302a0 	add	r0, r3, r0, lsr #5
    8ca8:	ebffff5d 	bl	8a24 <GET32>
    8cac:	e1a00430 	lsr	r0, r0, r4
    8cb0:	e2000001 	and	r0, r0, #1
    8cb4:	e8bd8010 	pop	{r4, pc}
    8cb8:	e3e00000 	mvn	r0, #0
    8cbc:	e12fff1e 	bx	lr
    8cc0:	20200034 	eorcs	r0, r0, r4, lsr r0

00008cc4 <kmalloc>:
 *  - The returned pointer should always be 4-byte aligned.  
 *    Easiest way is to make sure the heap pointer starts 4-byte
 *    and you always round up the number of bytes.  Make sure
 *    you put an assertion in.  
 */
void *kmalloc(unsigned nbytes) {
    8cc4:	e92d4010 	push	{r4, lr}
    demand(init_p, calling before initialized);
    8cc8:	e59f3048 	ldr	r3, [pc, #72]	; 8d18 <kmalloc+0x54>
    8ccc:	e5933000 	ldr	r3, [r3]
    8cd0:	e3530000 	cmp	r3, #0
    8cd4:	1a000005 	bne	8cf0 <kmalloc+0x2c>
    8cd8:	e59f003c 	ldr	r0, [pc, #60]	; 8d1c <kmalloc+0x58>
    8cdc:	e59f103c 	ldr	r1, [pc, #60]	; 8d20 <kmalloc+0x5c>
    8ce0:	e59f203c 	ldr	r2, [pc, #60]	; 8d24 <kmalloc+0x60>
    8ce4:	e3a0301a 	mov	r3, #26
    8ce8:	ebfffd8d 	bl	8324 <printk>
    8cec:	ebffff0d 	bl	8928 <rpi_reboot>
    
    void* to_allocate = heap_ptr;
    8cf0:	e59f3020 	ldr	r3, [pc, #32]	; 8d18 <kmalloc+0x54>
    8cf4:	e5934004 	ldr	r4, [r3, #4]
    unsigned rounded_nbytes = roundup(nbytes, 4);
    8cf8:	e2802003 	add	r2, r0, #3
    8cfc:	e3c22003 	bic	r2, r2, #3
    heap_ptr += rounded_nbytes;
    8d00:	e0840002 	add	r0, r4, r2
    8d04:	e5830004 	str	r0, [r3, #4]
    memset(heap_ptr, 0, rounded_nbytes);
    8d08:	e3a01000 	mov	r1, #0
    8d0c:	eb00004a 	bl	8e3c <memset>
    return to_allocate;

}
    8d10:	e1a00004 	mov	r0, r4
    8d14:	e8bd8010 	pop	{r4, pc}
    8d18:	00009670 	andeq	r9, r0, r0, ror r6
    8d1c:	00009164 	andeq	r9, r0, r4, ror #2
    8d20:	000091a4 	andeq	r9, r0, r4, lsr #3
    8d24:	0000913c 	andeq	r9, r0, ip, lsr r1

00008d28 <kmalloc_aligned>:

// address of returned pointer should be a multiple of
// alignment.
void *kmalloc_aligned(unsigned nbytes, unsigned alignment) {
    8d28:	e92d4008 	push	{r3, lr}
    demand(init_p, calling before initialized);
    8d2c:	e59f3074 	ldr	r3, [pc, #116]	; 8da8 <kmalloc_aligned+0x80>
    8d30:	e5933000 	ldr	r3, [r3]
    8d34:	e3530000 	cmp	r3, #0
    8d38:	1a000005 	bne	8d54 <kmalloc_aligned+0x2c>
    8d3c:	e59f0068 	ldr	r0, [pc, #104]	; 8dac <kmalloc_aligned+0x84>
    8d40:	e59f1068 	ldr	r1, [pc, #104]	; 8db0 <kmalloc_aligned+0x88>
    8d44:	e59f2068 	ldr	r2, [pc, #104]	; 8db4 <kmalloc_aligned+0x8c>
    8d48:	e3a03027 	mov	r3, #39	; 0x27
    8d4c:	ebfffd74 	bl	8324 <printk>
    8d50:	ebfffef4 	bl	8928 <rpi_reboot>

    if(alignment <= 4)
    8d54:	e3510004 	cmp	r1, #4
    8d58:	8a000001 	bhi	8d64 <kmalloc_aligned+0x3c>
        return kmalloc(nbytes);
    8d5c:	ebffffd8 	bl	8cc4 <kmalloc>
    8d60:	e8bd8008 	pop	{r3, pc}
    demand(alignment % 4 == 0, "weird alignment: not a multiple of 4!");
    8d64:	e3110003 	tst	r1, #3
    8d68:	0a000005 	beq	8d84 <kmalloc_aligned+0x5c>
    8d6c:	e59f0044 	ldr	r0, [pc, #68]	; 8db8 <kmalloc_aligned+0x90>
    8d70:	e59f1038 	ldr	r1, [pc, #56]	; 8db0 <kmalloc_aligned+0x88>
    8d74:	e59f2038 	ldr	r2, [pc, #56]	; 8db4 <kmalloc_aligned+0x8c>
    8d78:	e3a0302b 	mov	r3, #43	; 0x2b
    8d7c:	ebfffd68 	bl	8324 <printk>
    8d80:	ebfffee8 	bl	8928 <rpi_reboot>
    unsigned aligned_heap_ptr = (unsigned) heap_ptr;
    8d84:	e59f301c 	ldr	r3, [pc, #28]	; 8da8 <kmalloc_aligned+0x80>
    8d88:	e5932004 	ldr	r2, [r3, #4]
	aligned_heap_ptr = roundup(aligned_heap_ptr, alignment);
    8d8c:	e0812002 	add	r2, r1, r2
    8d90:	e2422001 	sub	r2, r2, #1
    8d94:	e2611000 	rsb	r1, r1, #0
    8d98:	e0021001 	and	r1, r2, r1
	heap_ptr = (void*) aligned_heap_ptr;
    8d9c:	e5831004 	str	r1, [r3, #4]

	return kmalloc(nbytes);
    8da0:	ebffffc7 	bl	8cc4 <kmalloc>
}
    8da4:	e8bd8008 	pop	{r3, pc}
    8da8:	00009670 	andeq	r9, r0, r0, ror r6
    8dac:	00009164 	andeq	r9, r0, r4, ror #2
    8db0:	000091a4 	andeq	r9, r0, r4, lsr #3
    8db4:	00009144 	andeq	r9, r0, r4, asr #2
    8db8:	000091b8 			; <UNDEFINED> instruction: 0x000091b8

00008dbc <kmalloc_init>:
 *    - should be just a few lines of code.
 *    - sets heap pointer to the location of 
 *      __heap_start__.   print this to make sure
 *      it makes sense!
 */
void kmalloc_init(void) {
    8dbc:	e92d4008 	push	{r3, lr}
    demand(!init_p, cannot initialize twice!\n);
    8dc0:	e59f3038 	ldr	r3, [pc, #56]	; 8e00 <kmalloc_init+0x44>
    8dc4:	e5933000 	ldr	r3, [r3]
    8dc8:	e3530000 	cmp	r3, #0
    8dcc:	0a000005 	beq	8de8 <kmalloc_init+0x2c>
    8dd0:	e59f002c 	ldr	r0, [pc, #44]	; 8e04 <kmalloc_init+0x48>
    8dd4:	e59f102c 	ldr	r1, [pc, #44]	; 8e08 <kmalloc_init+0x4c>
    8dd8:	e59f202c 	ldr	r2, [pc, #44]	; 8e0c <kmalloc_init+0x50>
    8ddc:	e3a0303c 	mov	r3, #60	; 0x3c
    8de0:	ebfffd4f 	bl	8324 <printk>
    8de4:	ebfffecf 	bl	8928 <rpi_reboot>
    init_p = 1;
    8de8:	e59f3010 	ldr	r3, [pc, #16]	; 8e00 <kmalloc_init+0x44>
    8dec:	e3a02001 	mov	r2, #1
    8df0:	e5832000 	str	r2, [r3]
    heap_ptr = &__heap_start__;
    8df4:	e59f2014 	ldr	r2, [pc, #20]	; 8e10 <kmalloc_init+0x54>
    8df8:	e5832004 	str	r2, [r3, #4]
    8dfc:	e8bd8008 	pop	{r3, pc}
    8e00:	00009670 	andeq	r9, r0, r0, ror r6
    8e04:	00009210 	andeq	r9, r0, r0, lsl r2
    8e08:	000091a4 	andeq	r9, r0, r4, lsr #3
    8e0c:	00009154 	andeq	r9, r0, r4, asr r1
    8e10:	00009678 	andeq	r9, r0, r8, ror r6

00008e14 <kfree_all>:
/* 
 * free all allocated memory: reset the heap 
 * pointer back to the beginning.
 */
void kfree_all(void) {
    heap_ptr = &__heap_start__;
    8e14:	e59f2008 	ldr	r2, [pc, #8]	; 8e24 <kfree_all+0x10>
    8e18:	e59f3008 	ldr	r3, [pc, #8]	; 8e28 <kfree_all+0x14>
    8e1c:	e5832004 	str	r2, [r3, #4]
    8e20:	e12fff1e 	bx	lr
    8e24:	00009678 	andeq	r9, r0, r8, ror r6
    8e28:	00009670 	andeq	r9, r0, r0, ror r6

00008e2c <kmalloc_heap_ptr>:
// allocated block satisfies: 
//    assert(<addr> < kmalloc_heap_ptr());
// 
void *kmalloc_heap_ptr(void) {
    return (void*) heap_ptr;
}
    8e2c:	e59f3004 	ldr	r3, [pc, #4]	; 8e38 <kmalloc_heap_ptr+0xc>
    8e30:	e5930004 	ldr	r0, [r3, #4]
    8e34:	e12fff1e 	bx	lr
    8e38:	00009670 	andeq	r9, r0, r0, ror r6

00008e3c <memset>:
#include <string.h>

void *memset(void *_p, int c, size_t n) {
    char *p = _p, *e = p + n;
    8e3c:	e0802002 	add	r2, r0, r2
    8e40:	e1a03000 	mov	r3, r0

    while(p < e)
    8e44:	ea000001 	b	8e50 <memset+0x14>
        *p++ = c;
    8e48:	e5c31000 	strb	r1, [r3]
    8e4c:	e2833001 	add	r3, r3, #1
#include <string.h>

void *memset(void *_p, int c, size_t n) {
    char *p = _p, *e = p + n;

    while(p < e)
    8e50:	e1530002 	cmp	r3, r2
    8e54:	3afffffb 	bcc	8e48 <memset+0xc>
        *p++ = c;
    return _p;
}
    8e58:	e12fff1e 	bx	lr

00008e5c <internal_putchar>:
#include "rpi.h"

static int internal_putchar(int c) { uart_putc(c); return c; }
    8e5c:	e92d4010 	push	{r4, lr}
    8e60:	e1a04000 	mov	r4, r0
    8e64:	ebffff41 	bl	8b70 <uart_putc>
    8e68:	e1a00004 	mov	r0, r4
    8e6c:	e8bd8010 	pop	{r4, pc}

00008e70 <dev_barrier>:
    8e70:	ea000002 	b	8e80 <dsb>

00008e74 <dmb>:
    8e74:	e3a00000 	mov	r0, #0
    8e78:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
    8e7c:	e12fff1e 	bx	lr

00008e80 <dsb>:
    8e80:	ee070f9a 	mcr	15, 0, r0, cr7, cr10, {4}
    8e84:	e12fff1e 	bx	lr

Disassembly of section .data:

00008e88 <putk>:
    8e88:	0000837c 	andeq	r8, r0, ip, ror r3

00008e8c <rpi_putchar>:
    8e8c:	00008e5c 	andeq	r8, r0, ip, asr lr

Disassembly of section .rodata:

00008e90 <__FUNCTION__.4164>:
    8e90:	6d746f6e 	ldclvs	15, cr6, [r4, #-440]!	; 0xfffffe48
    8e94:	006e6961 	rsbeq	r6, lr, r1, ror #18
    8e98:	74206e69 	strtvc	r6, [r0], #-3689	; 0xe69
    8e9c:	61657268 	cmnvs	r5, r8, ror #4
    8ea0:	70252064 	eorvc	r2, r5, r4, rrx
    8ea4:	6977202c 	ldmdbvs	r7!, {r2, r3, r5, sp}^
    8ea8:	25206874 	strcs	r6, [r0, #-2164]!	; 0x874
    8eac:	00000a78 	andeq	r0, r0, r8, ror sl
    8eb0:	756f6261 	strbvc	r6, [pc, #-609]!	; 8c57 <gpio_set_off+0x17>
    8eb4:	6f742074 	svcvs	0x00742074
    8eb8:	73657420 	cmnvc	r5, #32, 8	; 0x20000000
    8ebc:	75732074 	ldrbvc	r2, [r3, #-116]!	; 0x74
    8ec0:	6e696d6d 	cdpvs	13, 6, cr6, cr9, cr13, {3}
    8ec4:	666f2067 	strbtvs	r2, [pc], -r7, rrx
    8ec8:	20303320 	eorscs	r3, r0, r0, lsr #6
    8ecc:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
    8ed0:	0a736461 	beq	1ce205c <__bss_end__+0x1cd89e4>
    8ed4:	00000000 	andeq	r0, r0, r0
    8ed8:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    8edc:	203d2074 	eorscs	r2, sp, r4, ror r0
    8ee0:	202c6425 	eorcs	r6, ip, r5, lsr #8
    8ee4:	3d6d7573 	cfstr64cc	mvdx7, [sp, #-460]!	; 0xfffffe34
    8ee8:	000a6425 	andeq	r6, sl, r5, lsr #8
    8eec:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    8ef0:	73253a43 	teqvc	r5, #274432	; 0x43000
    8ef4:	3a73253a 	bcc	1cd23e4 <__bss_end__+0x1cc8d6c>
    8ef8:	743a6425 	ldrtvc	r6, [sl], #-1061	; 0x425
    8efc:	61657268 	cmnvs	r5, r8, ror #4
    8f00:	6f635f64 	svcvs	0x00635f64
    8f04:	20746e75 	rsbscs	r6, r4, r5, ror lr
    8f08:	6e203d3d 	mcrvs	13, 1, r3, cr0, cr13, {1}
    8f0c:	0000000a 	andeq	r0, r0, sl
    8f10:	65742d31 	ldrbvs	r2, [r4, #-3377]!	; 0xd31
    8f14:	742d7473 	strtvc	r7, [sp], #-1139	; 0x473
    8f18:	61657268 	cmnvs	r5, r8, ror #4
    8f1c:	00632e64 	rsbeq	r2, r3, r4, ror #28

00008f20 <__FUNCTION__.4166>:
    8f20:	6f705f51 	svcvs	0x00705f51
    8f24:	00000070 	andeq	r0, r0, r0, ror r0

00008f28 <__FUNCTION__.4198>:
    8f28:	5f697072 	svcpl	0x00697072
    8f2c:	6b726f66 	blvs	1ca4ccc <__bss_end__+0x1c9b654>
    8f30:	00000000 	andeq	r0, r0, r0

00008f34 <__FUNCTION__.4202>:
    8f34:	5f697072 	svcpl	0x00697072
    8f38:	74697865 	strbtvc	r7, [r9], #-2149	; 0x865
    8f3c:	00000000 	andeq	r0, r0, r0

00008f40 <__FUNCTION__.4206>:
    8f40:	5f697072 	svcpl	0x00697072
    8f44:	6c656979 	stclvs	9, cr6, [r5], #-484	; 0xfffffe1c
    8f48:	00000064 	andeq	r0, r0, r4, rrx

00008f4c <__FUNCTION__.4214>:
    8f4c:	5f697072 	svcpl	0x00697072
    8f50:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
    8f54:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
    8f58:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
    8f5c:	00000000 	andeq	r0, r0, r0

00008f60 <__FUNCTION__.4218>:
    8f60:	5f697072 	svcpl	0x00697072
    8f64:	63617865 	cmnvs	r1, #6619136	; 0x650000
    8f68:	6c735f74 	ldclvs	15, cr5, [r3], #-464	; 0xfffffe30
    8f6c:	00706565 	rsbseq	r6, r0, r5, ror #10

00008f70 <__FUNCTION__.4224>:
    8f70:	5f697072 	svcpl	0x00697072
    8f74:	6b726f66 	blvs	1ca4d14 <__bss_end__+0x1c9b69c>
    8f78:	756f625f 	strbvc	r6, [pc, #-607]!	; 8d21 <kmalloc+0x5d>
    8f7c:	6465646e 	strbtvs	r6, [r5], #-1134	; 0x46e
    8f80:	00000000 	andeq	r0, r0, r0

00008f84 <__FUNCTION__.4234>:
    8f84:	5f697072 	svcpl	0x00697072
    8f88:	5f746567 	svcpl	0x00746567
    8f8c:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
    8f90:	00000073 	andeq	r0, r0, r3, ror r0
    8f94:	4f525245 	svcmi	0x00525245
    8f98:	73253a52 	teqvc	r5, #335872	; 0x52000
    8f9c:	3a73253a 	bcc	1cd248c <__bss_end__+0x1cc8e14>
    8fa0:	203a6425 	eorscs	r6, sl, r5, lsr #8
    8fa4:	534c4146 	movtpl	r4, #49478	; 0xc146
    8fa8:	713c2845 	teqvc	ip, r5, asr #16
    8fac:	203a293e 	eorscs	r2, sl, lr, lsr r9
    8fb0:	20646162 	rsbcs	r6, r4, r2, ror #2
    8fb4:	75706e69 	ldrbvc	r6, [r0, #-3689]!	; 0xe69
    8fb8:	00000a74 	andeq	r0, r0, r4, ror sl
    8fbc:	00682e51 	rsbeq	r2, r8, r1, asr lr
    8fc0:	4f525245 	svcmi	0x00525245
    8fc4:	73253a52 	teqvc	r5, #335872	; 0x52000
    8fc8:	3a73253a 	bcc	1cd24b8 <__bss_end__+0x1cc8e40>
    8fcc:	203a6425 	eorscs	r6, sl, r5, lsr #8
    8fd0:	534c4146 	movtpl	r4, #49478	; 0xc146
    8fd4:	213c2845 	teqcs	ip, r5, asr #16
    8fd8:	743e2d71 	ldrtvc	r2, [lr], #-3441	; 0xd71
    8fdc:	3e6c6961 	cdpcc	9, 6, cr6, cr12, cr1, {3}
    8fe0:	69203a29 	stmdbvs	r0!, {r0, r3, r5, r9, fp, ip, sp}
    8fe4:	6c61766e 	stclvs	6, cr7, [r1], #-440	; 0xfffffe48
    8fe8:	51206469 	teqpl	r0, r9, ror #8
    8fec:	0000000a 	andeq	r0, r0, sl
    8ff0:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    8ff4:	73253a43 	teqvc	r5, #274432	; 0x43000
    8ff8:	3a73253a 	bcc	1cd24e8 <__bss_end__+0x1cc8e70>
    8ffc:	693a6425 	ldmdbvs	sl!, {r0, r2, r5, sl, sp, lr}
    9000:	656c706d 	strbvs	r7, [ip, #-109]!	; 0x6d
    9004:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
    9008:	69687420 	stmdbvs	r8!, {r5, sl, ip, sp, lr}^
    900c:	75662073 	strbvc	r2, [r6, #-115]!	; 0x73
    9010:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    9014:	0a216e6f 	beq	8649d8 <__bss_end__+0x85b360>
    9018:	0000000a 	andeq	r0, r0, sl
    901c:	2d697072 	stclcs	0, cr7, [r9, #-456]!	; 0xfffffe38
    9020:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
    9024:	632e6461 	teqvs	lr, #1627389952	; 0x61000000
    9028:	00000000 	andeq	r0, r0, r0

0000902c <__FUNCTION__.4185>:
    902c:	74696d65 	strbtvc	r6, [r9], #-3429	; 0xd65
    9030:	00000000 	andeq	r0, r0, r0

00009034 <__FUNCTION__.4133>:
    9034:	5f697072 	svcpl	0x00697072
    9038:	5f746573 	svcpl	0x00746573
    903c:	7074756f 	rsbsvc	r7, r4, pc, ror #10
    9040:	00007475 	andeq	r7, r0, r5, ror r4

00009044 <__FUNCTION__.4207>:
    9044:	705f6176 	subsvc	r6, pc, r6, ror r1	; <UNPREDICTABLE>
    9048:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    904c:	0000006b 	andeq	r0, r0, fp, rrx
    9050:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9054:	73253a43 	teqvc	r5, #274432	; 0x43000
    9058:	3a73253a 	bcc	1cd2548 <__bss_end__+0x1cc8ed0>
    905c:	303a6425 	eorscc	r6, sl, r5, lsr #8
    9060:	0000000a 	andeq	r0, r0, sl
    9064:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    9068:	2d61762f 	stclcs	6, cr7, [r1, #-188]!	; 0xffffff44
    906c:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    9070:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
    9074:	00000000 	andeq	r0, r0, r0
    9078:	33323130 	teqcc	r2, #48, 2
    907c:	37363534 			; <UNDEFINED> instruction: 0x37363534
    9080:	00003938 	andeq	r3, r0, r8, lsr r9
    9084:	33323130 	teqcc	r2, #48, 2
    9088:	37363534 			; <UNDEFINED> instruction: 0x37363534
    908c:	62613938 	rsbvs	r3, r1, #56, 18	; 0xe0000
    9090:	66656463 	strbtvs	r6, [r5], -r3, ror #8
    9094:	00000000 	andeq	r0, r0, r0
    9098:	00003130 	andeq	r3, r0, r0, lsr r1
    909c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    90a0:	73253a43 	teqvc	r5, #274432	; 0x43000
    90a4:	3a73253a 	bcc	1cd2594 <__bss_end__+0x1cc8f1c>
    90a8:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    90ac:	5f637475 	svcpl	0x00637475
    90b0:	000a7066 	andeq	r7, sl, r6, rrx
    90b4:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    90b8:	73253a43 	teqvc	r5, #274432	; 0x43000
    90bc:	3a73253a 	bcc	1cd25ac <__bss_end__+0x1cc8f34>
    90c0:	773a6425 	ldrvc	r6, [sl, -r5, lsr #8]!
    90c4:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
    90c8:	33203c20 	teqcc	r0, #32, 24	; 0x2000
    90cc:	00000a32 	andeq	r0, r0, r2, lsr sl
    90d0:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    90d4:	73253a43 	teqvc	r5, #274432	; 0x43000
    90d8:	3a73253a 	bcc	1cd25c8 <__bss_end__+0x1cc8f50>
    90dc:	663a6425 	ldrtvs	r6, [sl], -r5, lsr #8
    90e0:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xf6c
    90e4:	746f6e20 	strbtvc	r6, [pc], #-3616	; 90ec <__FUNCTION__.4207+0xa8>
    90e8:	616e6520 	cmnvs	lr, r0, lsr #10
    90ec:	64656c62 	strbtvs	r6, [r5], #-3170	; 0xc62
    90f0:	0a212121 	beq	85157c <__bss_end__+0x847f04>
    90f4:	00000000 	andeq	r0, r0, r0
    90f8:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    90fc:	73253a43 	teqvc	r5, #274432	; 0x43000
    9100:	3a73253a 	bcc	1cd25f0 <__bss_end__+0x1cc8f78>
    9104:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    9108:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    910c:	6e203a6b 	vnmulvs.f32	s6, s0, s23
    9110:	6820746f 	stmdavs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
    9114:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    9118:	20676e69 	rsbcs	r6, r7, r9, ror #28
    911c:	63657073 	cmnvs	r5, #115	; 0x73
    9120:	65696669 	strbvs	r6, [r9, #-1641]!	; 0x669
    9124:	25272072 	strcs	r2, [r7, #-114]!	; 0x72
    9128:	0a0a2763 	beq	292ebc <__bss_end__+0x289844>
    912c:	00000000 	andeq	r0, r0, r0
    9130:	454e4f44 	strbmi	r4, [lr, #-3908]	; 0xf44
    9134:	0a212121 	beq	8515c0 <__bss_end__+0x847f48>
    9138:	00000000 	andeq	r0, r0, r0

0000913c <__FUNCTION__.4129>:
    913c:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    9140:	00636f6c 	rsbeq	r6, r3, ip, ror #30

00009144 <__FUNCTION__.4136>:
    9144:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    9148:	5f636f6c 	svcpl	0x00636f6c
    914c:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    9150:	0064656e 	rsbeq	r6, r4, lr, ror #10

00009154 <__FUNCTION__.4141>:
    9154:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    9158:	5f636f6c 	svcpl	0x00636f6c
    915c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    9160:	00000000 	andeq	r0, r0, r0
    9164:	4f525245 	svcmi	0x00525245
    9168:	73253a52 	teqvc	r5, #335872	; 0x52000
    916c:	3a73253a 	bcc	1cd265c <__bss_end__+0x1cc8fe4>
    9170:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9174:	534c4146 	movtpl	r4, #49478	; 0xc146
    9178:	693c2845 	ldmdbvs	ip!, {r0, r2, r6, fp, sp}
    917c:	5f74696e 	svcpl	0x0074696e
    9180:	3a293e70 	bcc	a58b48 <__bss_end__+0xa4f4d0>
    9184:	6c616320 	stclvs	3, cr6, [r1], #-128	; 0xffffff80
    9188:	676e696c 	strbvs	r6, [lr, -ip, ror #18]!
    918c:	66656220 	strbtvs	r6, [r5], -r0, lsr #4
    9190:	2065726f 	rsbcs	r7, r5, pc, ror #4
    9194:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    9198:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    919c:	0a64657a 	beq	192278c <__bss_end__+0x1919114>
    91a0:	00000000 	andeq	r0, r0, r0
    91a4:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
    91a8:	6b2f6372 	blvs	be1f78 <__bss_end__+0xbd8900>
    91ac:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    91b0:	632e636f 	teqvs	lr, #-1140850687	; 0xbc000001
    91b4:	00000000 	andeq	r0, r0, r0
    91b8:	4f525245 	svcmi	0x00525245
    91bc:	73253a52 	teqvc	r5, #335872	; 0x52000
    91c0:	3a73253a 	bcc	1cd26b0 <__bss_end__+0x1cc9038>
    91c4:	203a6425 	eorscs	r6, sl, r5, lsr #8
    91c8:	534c4146 	movtpl	r4, #49478	; 0xc146
    91cc:	613c2845 	teqvs	ip, r5, asr #16
    91d0:	6e67696c 	cdpvs	9, 6, cr6, cr7, cr12, {3}
    91d4:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
    91d8:	34202520 	strtcc	r2, [r0], #-1312	; 0x520
    91dc:	203d3d20 	eorscs	r3, sp, r0, lsr #26
    91e0:	3a293e30 	bcc	a58aa8 <__bss_end__+0xa4f430>
    91e4:	65772220 	ldrbvs	r2, [r7, #-544]!	; 0x220
    91e8:	20647269 	rsbcs	r7, r4, r9, ror #4
    91ec:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    91f0:	6e656d6e 	cdpvs	13, 6, cr6, cr5, cr14, {3}
    91f4:	6e203a74 	mcrvs	10, 1, r3, cr0, cr4, {3}
    91f8:	6120746f 	teqvs	r0, pc, ror #8
    91fc:	6c756d20 	ldclvs	13, cr6, [r5], #-128	; 0xffffff80
    9200:	6c706974 	ldclvs	9, cr6, [r0], #-464	; 0xfffffe30
    9204:	666f2065 	strbtvs	r2, [pc], -r5, rrx
    9208:	22213420 	eorcs	r3, r1, #32, 8	; 0x20000000
    920c:	0000000a 	andeq	r0, r0, sl
    9210:	4f525245 	svcmi	0x00525245
    9214:	73253a52 	teqvc	r5, #335872	; 0x52000
    9218:	3a73253a 	bcc	1cd2708 <__bss_end__+0x1cc9090>
    921c:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9220:	534c4146 	movtpl	r4, #49478	; 0xc146
    9224:	213c2845 	teqcs	ip, r5, asr #16
    9228:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    922c:	293e705f 	ldmdbcs	lr!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}
    9230:	6163203a 	cmnvs	r3, sl, lsr r0
    9234:	746f6e6e 	strbtvc	r6, [pc], #-3694	; 923c <__FUNCTION__.4141+0xe8>
    9238:	696e6920 	stmdbvs	lr!, {r5, r8, fp, sp, lr}^
    923c:	6c616974 	stclvs	9, cr6, [r1], #-464	; 0xfffffe30
    9240:	20657a69 	rsbcs	r7, r5, r9, ror #20
    9244:	63697774 	cmnvs	r9, #116, 14	; 0x1d00000
    9248:	0a0a2165 	beq	2917e4 <__bss_end__+0x28816c>
    924c:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss:

00009250 <__bss_start__>:
    9250:	00000000 	andeq	r0, r0, r0

00009254 <thread_sum>:
    9254:	00000000 	andeq	r0, r0, r0

00009258 <freeq.4190>:
	...

00009260 <cur_thread>:
    9260:	00000000 	andeq	r0, r0, r0

00009264 <runq>:
	...

0000926c <scheduler_thread>:
    926c:	00000000 	andeq	r0, r0, r0

00009270 <buf.4133>:
	...

00009670 <init_p>:
    9670:	00000000 	andeq	r0, r0, r0

00009674 <heap_ptr>:
    9674:	00000000 	andeq	r0, r0, r0

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4b5a3605 	blmi	168d82c <__bss_end__+0x16841b4>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	12010901 	andne	r0, r1, #16384	; 0x4000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0x404
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	22011a01 	andcs	r1, r1, #4096	; 0x1000
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__bss_end__+0x10c76ac>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	34202955 	strtcc	r2, [r0], #-2389	; 0x955
   c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
  10:	43434700 	movtmi	r4, #14080	; 0x3700
  14:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
  18:	5420554e 	strtpl	r5, [r0], #-1358	; 0x54e
  1c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  20:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
  24:	6d724120 	ldfvse	f4, [r2, #-128]!	; 0xffffff80
  28:	626d4520 	rsbvs	r4, sp, #32, 10	; 0x8000000
  2c:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
  30:	72502064 	subsvc	r2, r0, #100	; 0x64
  34:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
  38:	73726f73 	cmnvc	r2, #460	; 0x1cc
  3c:	322d3720 	eorcc	r3, sp, #32, 14	; 0x800000
  40:	2d383130 	ldfcss	f3, [r8, #-192]!	; 0xffffff40
  44:	752d3371 	strvc	r3, [sp, #-881]!	; 0x371
  48:	74616470 	strbtvc	r6, [r1], #-1136	; 0x470
  4c:	37202965 	strcc	r2, [r0, -r5, ror #18]!
  50:	312e332e 	teqcc	lr, lr, lsr #6
  54:	31303220 	teqcc	r0, r0, lsr #4
  58:	32363038 	eorscc	r3, r6, #56	; 0x38
  5c:	72282032 	eorvc	r2, r8, #50	; 0x32
  60:	61656c65 	cmnvs	r5, r5, ror #24
  64:	20296573 	eorcs	r6, r9, r3, ror r5
  68:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  6c:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
  70:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
  74:	2d372d64 	ldccs	13, cr2, [r7, #-400]!	; 0xfffffe70
  78:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  7c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  80:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  84:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  88:	39313632 	ldmdbcc	r1!, {r1, r4, r5, r9, sl, ip, sp}
  8c:	005d3730 	subseq	r3, sp, r0, lsr r7

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000348 	andeq	r0, r0, r8, asr #6
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000067 	andeq	r0, r0, r7, rrx
      10:	00012601 	andeq	r2, r1, r1, lsl #12
      14:	00000000 	andeq	r0, r0, r0
      18:	00801000 	addeq	r1, r0, r0
      1c:	00010000 	andeq	r0, r1, r0
      20:	00000000 	andeq	r0, r0, r0
      24:	05040200 	streq	r0, [r4, #-512]	; 0x200
      28:	00746e69 	rsbseq	r6, r4, r9, ror #28
      2c:	7d070403 	cfstrsvc	mvf0, [r7, #-12]
      30:	03000001 	movweq	r0, #1
      34:	00d80601 	sbcseq	r0, r8, r1, lsl #12
      38:	02030000 	andeq	r0, r3, #0
      3c:	0001c405 	andeq	ip, r1, r5, lsl #8
      40:	05040300 	streq	r0, [r4, #-768]	; 0x300
      44:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
      48:	ab050803 	blge	14205c <__bss_end__+0x1389e4>
      4c:	03000001 	movweq	r0, #1
      50:	00d60801 	sbcseq	r0, r6, r1, lsl #16
      54:	02030000 	andeq	r0, r3, #0
      58:	0000fa07 	andeq	pc, r0, r7, lsl #20
      5c:	01ce0400 	biceq	r0, lr, r0, lsl #8
      60:	34030000 	strcc	r0, [r3], #-0
      64:	00000068 	andeq	r0, r0, r8, rrx
      68:	78070403 	stmdavc	r7, {r0, r1, sl}
      6c:	03000001 	movweq	r0, #1
      70:	01730708 	cmneq	r3, r8, lsl #14
      74:	04030000 	streq	r0, [r3], #-0
      78:	0001a207 	andeq	sl, r1, r7, lsl #4
      7c:	03040500 	movweq	r0, #17664	; 0x4500
      80:	00df0801 	sbcseq	r0, pc, r1, lsl #16
      84:	04060000 	streq	r0, [r6], #-0
      88:	0000008c 	andeq	r0, r0, ip, lsl #1
      8c:	00007f07 	andeq	r7, r0, r7, lsl #30
      90:	007f0800 	rsbseq	r0, pc, r0, lsl #16
      94:	00a10000 	adceq	r0, r1, r0
      98:	76090000 	strvc	r0, [r9], -r0
      9c:	07000000 	streq	r0, [r0, -r0]
      a0:	01b90a00 			; <UNDEFINED> instruction: 0x01b90a00
      a4:	80480000 	subhi	r0, r8, r0
      a8:	00df1e02 	sbcseq	r1, pc, r2, lsl #28
      ac:	650b0000 	strvs	r0, [fp, #-0]
      b0:	02000001 	andeq	r0, r0, #1
      b4:	0000df20 	andeq	sp, r0, r0, lsr #30
      b8:	570b0000 	strpl	r0, [fp, -r0]
      bc:	02000000 	andeq	r0, r0, #0
      c0:	0000ef22 	andeq	lr, r0, r2, lsr #30
      c4:	740c4000 	strvc	r4, [ip], #-0
      c8:	02006469 	andeq	r6, r0, #1761607680	; 0x69000000
      cc:	00005d23 	andeq	r5, r0, r3, lsr #26
      d0:	c60b4400 	strgt	r4, [fp], -r0, lsl #8
      d4:	02000000 	andeq	r0, r0, #0
      d8:	0000f524 	andeq	pc, r0, r4, lsr #10
      dc:	08004800 	stmdaeq	r0, {fp, lr}
      e0:	0000005d 	andeq	r0, r0, sp, asr r0
      e4:	000000ef 	andeq	r0, r0, pc, ror #1
      e8:	00007609 	andeq	r7, r0, r9, lsl #12
      ec:	06000f00 	streq	r0, [r0], -r0, lsl #30
      f0:	0000a104 	andeq	sl, r0, r4, lsl #2
      f4:	005d0800 	subseq	r0, sp, r0, lsl #16
      f8:	01060000 	mrseq	r0, (UNDEF: 6)
      fc:	760d0000 	strvc	r0, [sp], -r0
     100:	ff000000 			; <UNDEFINED> instruction: 0xff000000
     104:	8a04001f 	bhi	100188 <__bss_end__+0xf6b10>
     108:	02000001 	andeq	r0, r0, #1
     10c:	0000a125 	andeq	sl, r0, r5, lsr #2
     110:	01360e00 	teqeq	r6, r0, lsl #28
     114:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
     118:	00008010 	andeq	r8, r0, r0, lsl r0
     11c:	00000050 	andeq	r0, r0, r0, asr r0
     120:	01729c01 	cmneq	r2, r1, lsl #24
     124:	610f0000 	mrsvs	r0, CPSR
     128:	01006772 	tsteq	r0, r2, ror r7
     12c:	00007d08 	andeq	r7, r0, r8, lsl #26
     130:	00000000 	andeq	r0, r0, r0
     134:	00781000 	rsbseq	r1, r8, r0
     138:	01720901 	cmneq	r2, r1, lsl #18
     13c:	001e0000 	andseq	r0, lr, r0
     140:	1c110000 	ldcne	0, cr0, [r1], {-0}
     144:	b0000080 	andlt	r0, r0, r0, lsl #1
     148:	12000002 	andne	r0, r0, #2
     14c:	0000802c 	andeq	r8, r0, ip, lsr #32
     150:	000002c1 	andeq	r0, r0, r1, asr #5
     154:	00000162 	andeq	r0, r0, r2, ror #2
     158:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
     15c:	008e9803 	addeq	r9, lr, r3, lsl #16
     160:	54140000 	ldrpl	r0, [r4], #-0
     164:	d7000080 	strle	r0, [r0, -r0, lsl #1]
     168:	13000002 	movwne	r0, #2
     16c:	30015001 	andcc	r5, r1, r1
     170:	04060000 	streq	r0, [r6], #-0
     174:	0000002c 	andeq	r0, r0, ip, lsr #32
     178:	0000be15 	andeq	fp, r0, r5, lsl lr
     17c:	60100100 	andsvs	r0, r0, r0, lsl #2
     180:	b0000080 	andlt	r0, r0, r0, lsl #1
     184:	01000000 	mrseq	r0, (UNDEF: 0)
     188:	0002839c 	muleq	r2, ip, r3
     18c:	006e1600 	rsbeq	r1, lr, r0, lsl #12
     190:	00251501 	eoreq	r1, r5, r1, lsl #10
     194:	171e0000 	ldrne	r0, [lr, -r0]
     198:	00000142 	andeq	r0, r0, r2, asr #2
     19c:	00000283 	andeq	r0, r0, r3, lsl #5
     1a0:	8e900305 	cdphi	3, 9, cr0, cr0, cr5, {0}
     1a4:	84180000 	ldrhi	r0, [r8], #-0
     1a8:	30000080 	andcc	r0, r0, r0, lsl #1
     1ac:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
     1b0:	10000001 	andne	r0, r0, r1
     1b4:	18010069 	stmdane	r1, {r0, r3, r5, r6}
     1b8:	00000025 	andeq	r0, r0, r5, lsr #32
     1bc:	0000003c 	andeq	r0, r0, ip, lsr r0
     1c0:	00000019 	andeq	r0, r0, r9, lsl r0
     1c4:	00781000 	rsbseq	r1, r8, r0
     1c8:	02881901 	addeq	r1, r8, #16384	; 0x4000
     1cc:	005b0000 	subseq	r0, fp, r0
     1d0:	98120000 	ldmdals	r2, {}	; <UNPREDICTABLE>
     1d4:	e8000080 	stmda	r0, {r7}
     1d8:	e6000002 	str	r0, [r0], -r2
     1dc:	13000001 	movwne	r0, #1
     1e0:	76025001 	strvc	r5, [r2], -r1
     1e4:	a8140000 	ldmdage	r4, {}	; <UNPREDICTABLE>
     1e8:	fd000080 	stc2	0, cr0, [r0, #-512]	; 0xfffffe00
     1ec:	13000002 	movwne	r0, #2
     1f0:	75025001 	strvc	r5, [r2, #-1]
     1f4:	00000000 	andeq	r0, r0, r0
     1f8:	00806811 	addeq	r6, r0, r1, lsl r8
     1fc:	00032800 	andeq	r2, r3, r0, lsl #16
     200:	806c1100 	rsbhi	r1, ip, r0, lsl #2
     204:	032f0000 	teqeq	pc, #0
     208:	74120000 	ldrvc	r0, [r2], #-0
     20c:	c1000080 	smlabbgt	r0, r0, r0, r0
     210:	21000002 	tstcs	r0, r2
     214:	13000002 	movwne	r0, #2
     218:	03055001 	movweq	r5, #20481	; 0x5001
     21c:	00008eb0 			; <UNDEFINED> instruction: 0x00008eb0
     220:	80b81100 	adcshi	r1, r8, r0, lsl #2
     224:	03360000 	teqeq	r6, #0
     228:	cc120000 	ldcgt	0, cr0, [r2], {-0}
     22c:	c1000080 	smlabbgt	r0, r0, r0, r0
     230:	41000002 	tstmi	r0, r2
     234:	13000002 	movwne	r0, #2
     238:	03055001 	movweq	r5, #20481	; 0x5001
     23c:	00008ed8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
     240:	80ec1200 	rschi	r1, ip, r0, lsl #4
     244:	02c10000 	sbceq	r0, r1, #0
     248:	02700000 	rsbseq	r0, r0, #0
     24c:	01130000 	tsteq	r3, r0
     250:	21080253 	tstcs	r8, r3, asr r2
     254:	05520113 	ldrbeq	r0, [r2, #-275]	; 0x113
     258:	008e9003 	addeq	r9, lr, r3
     25c:	51011300 	mrspl	r1, SP_irq
     260:	8f100305 	svchi	0x00100305
     264:	01130000 	tsteq	r3, r0
     268:	ec030550 	cfstr32	mvfx0, [r3], {80}	; 0x50
     26c:	0000008e 	andeq	r0, r0, lr, lsl #1
     270:	0080f011 	addeq	pc, r0, r1, lsl r0	; <UNPREDICTABLE>
     274:	00033d00 	andeq	r3, r3, r0, lsl #26
     278:	80f41100 	rscshi	r1, r4, r0, lsl #2
     27c:	03440000 	movteq	r0, #16384	; 0x4000
     280:	07000000 	streq	r0, [r0, -r0]
     284:	00000091 	muleq	r0, r1, r0
     288:	00250406 	eoreq	r0, r5, r6, lsl #8
     28c:	4f1a0000 	svcmi	0x001a0000
     290:	01000001 	tsteq	r0, r1
     294:	00002c05 	andeq	r2, r0, r5, lsl #24
     298:	50030500 	andpl	r0, r3, r0, lsl #10
     29c:	1a000092 	bne	4ec <_start-0x7b14>
     2a0:	00000197 	muleq	r0, r7, r1
     2a4:	002c0501 	eoreq	r0, ip, r1, lsl #10
     2a8:	03050000 	movweq	r0, #20480	; 0x5000
     2ac:	00009254 	andeq	r9, r0, r4, asr r2
     2b0:	0001d71b 	andeq	sp, r1, fp, lsl r7
     2b4:	bb350200 	bllt	d40abc <__bss_end__+0xd37444>
     2b8:	06000002 	streq	r0, [r0], -r2
     2bc:	00010604 	andeq	r0, r1, r4, lsl #12
     2c0:	030b1c00 	movweq	r1, #48128	; 0xbc00
     2c4:	27040000 	strcs	r0, [r4, -r0]
     2c8:	00000025 	andeq	r0, r0, r5, lsr #32
     2cc:	000002d7 	ldrdeq	r0, [r0], -r7
     2d0:	0000861d 	andeq	r8, r0, sp, lsl r6
     2d4:	1f001e00 	svcne	0x00001e00
     2d8:	0000015c 	andeq	r0, r0, ip, asr r1
     2dc:	02e82b02 	rsceq	r2, r8, #2048	; 0x800
     2e0:	251d0000 	ldrcs	r0, [sp, #-0]
     2e4:	00000000 	andeq	r0, r0, r0
     2e8:	00010d1c 	andeq	r0, r1, ip, lsl sp
     2ec:	7d660400 	cfstrdvc	mvd0, [r6, #-0]
     2f0:	fd000000 	stc2	0, cr0, [r0, #-0]
     2f4:	1d000002 	stcne	0, cr0, [r0, #-8]
     2f8:	0000002c 	andeq	r0, r0, ip, lsr #32
     2fc:	00f11c00 	rscseq	r1, r1, r0, lsl #24
     300:	28020000 	stmdacs	r2, {}	; <UNPREDICTABLE>
     304:	000002bb 			; <UNDEFINED> instruction: 0x000002bb
     308:	00000317 	andeq	r0, r0, r7, lsl r3
     30c:	0003171d 	andeq	r1, r3, sp, lsl r7
     310:	007d1d00 	rsbseq	r1, sp, r0, lsl #26
     314:	06000000 	streq	r0, [r0], -r0
     318:	00031d04 	andeq	r1, r3, r4, lsl #26
     31c:	03282000 	teqeq	r8, #0
     320:	7d1d0000 	ldcvc	0, cr0, [sp, #-0]
     324:	00000000 	andeq	r0, r0, r0
     328:	0000cc21 	andeq	ip, r0, r1, lsr #24
     32c:	21380400 	teqcs	r8, r0, lsl #8
     330:	000001e6 	andeq	r0, r0, r6, ror #3
     334:	15216a04 	strne	r6, [r1, #-2564]!	; 0xa04
     338:	02000001 	andeq	r0, r0, #1
     33c:	005c2132 	subseq	r2, ip, r2, lsr r1
     340:	5c040000 	stcpl	0, cr0, [r4], {-0}
     344:	0000e421 	andeq	lr, r0, r1, lsr #8
     348:	005f0400 	subseq	r0, pc, r0, lsl #8
     34c:	000006fa 	strdeq	r0, [r0], -sl
     350:	01b10004 			; <UNDEFINED> instruction: 0x01b10004
     354:	01040000 	mrseq	r0, (UNDEF: 4)
     358:	00000067 	andeq	r0, r0, r7, rrx
     35c:	00025001 	andeq	r5, r2, r1
     360:	00000000 	andeq	r0, r0, r0
     364:	00811000 	addeq	r1, r1, r0
     368:	00020800 	andeq	r0, r2, r0, lsl #16
     36c:	00012d00 	andeq	r2, r1, r0, lsl #26
     370:	05040200 	streq	r0, [r4, #-512]	; 0x200
     374:	00746e69 	rsbseq	r6, r4, r9, ror #28
     378:	7d070403 	cfstrsvc	mvf0, [r7, #-12]
     37c:	03000001 	movweq	r0, #1
     380:	00d80601 	sbcseq	r0, r8, r1, lsl #12
     384:	02030000 	andeq	r0, r3, #0
     388:	0001c405 	andeq	ip, r1, r5, lsl #8
     38c:	05040300 	streq	r0, [r4, #-768]	; 0x300
     390:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
     394:	ab050803 	blge	1423a8 <__bss_end__+0x138d30>
     398:	03000001 	movweq	r0, #1
     39c:	00d60801 	sbcseq	r0, r6, r1, lsl #16
     3a0:	02030000 	andeq	r0, r3, #0
     3a4:	0000fa07 	andeq	pc, r0, r7, lsl #20
     3a8:	01ce0400 	biceq	r0, lr, r0, lsl #8
     3ac:	34040000 	strcc	r0, [r4], #-0
     3b0:	00000068 	andeq	r0, r0, r8, rrx
     3b4:	78070403 	stmdavc	r7, {r0, r1, sl}
     3b8:	03000001 	movweq	r0, #1
     3bc:	01730708 	cmneq	r3, r8, lsl #14
     3c0:	04030000 	streq	r0, [r3], #-0
     3c4:	0001a207 	andeq	sl, r1, r7, lsl #4
     3c8:	03040500 	movweq	r0, #17664	; 0x4500
     3cc:	00df0801 	sbcseq	r0, pc, r1, lsl #16
     3d0:	04060000 	streq	r0, [r6], #-0
     3d4:	0000008c 	andeq	r0, r0, ip, lsl #1
     3d8:	00007f07 	andeq	r7, r0, r7, lsl #30
     3dc:	01b90800 			; <UNDEFINED> instruction: 0x01b90800
     3e0:	80480000 	subhi	r0, r8, r0
     3e4:	00cf1e03 	sbceq	r1, pc, r3, lsl #28
     3e8:	65090000 	strvs	r0, [r9, #-0]
     3ec:	03000001 	movweq	r0, #1
     3f0:	0000cf20 	andeq	ip, r0, r0, lsr #30
     3f4:	57090000 	strpl	r0, [r9, -r0]
     3f8:	03000000 	movweq	r0, #0
     3fc:	0000df22 	andeq	sp, r0, r2, lsr #30
     400:	740a4000 	strvc	r4, [sl], #-0
     404:	03006469 	movweq	r6, #1129	; 0x469
     408:	00005d23 	andeq	r5, r0, r3, lsr #26
     40c:	c6094400 	strgt	r4, [r9], -r0, lsl #8
     410:	03000000 	movweq	r0, #0
     414:	0000e524 	andeq	lr, r0, r4, lsr #10
     418:	0b004800 	bleq	12420 <__bss_end__+0x8da8>
     41c:	0000005d 	andeq	r0, r0, sp, asr r0
     420:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     424:	0000760c 	andeq	r7, r0, ip, lsl #12
     428:	06000f00 	streq	r0, [r0], -r0, lsl #30
     42c:	00009104 	andeq	r9, r0, r4, lsl #2
     430:	005d0b00 	subseq	r0, sp, r0, lsl #22
     434:	00f60000 	rscseq	r0, r6, r0
     438:	760d0000 	strvc	r0, [sp], -r0
     43c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
     440:	8a04001f 	bhi	1004c4 <__bss_end__+0xf6e4c>
     444:	03000001 	movweq	r0, #1
     448:	00009125 	andeq	r9, r0, r5, lsr #2
     44c:	00510e00 	subseq	r0, r1, r0, lsl #28
     450:	24080108 	strcs	r0, [r8], #-264	; 0x108
     454:	09000001 	stmdbeq	r0, {r0}
     458:	0000024b 	andeq	r0, r0, fp, asr #4
     45c:	01240901 	teqeq	r4, r1, lsl #18
     460:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     464:	000002c7 	andeq	r0, r0, r7, asr #5
     468:	01240901 	teqeq	r4, r1, lsl #18
     46c:	00040000 	andeq	r0, r4, r0
     470:	00f60406 	rscseq	r0, r6, r6, lsl #8
     474:	510f0000 	mrspl	r0, CPSR
     478:	0100745f 	tsteq	r0, pc, asr r4
     47c:	0001010a 	andeq	r0, r1, sl, lsl #2
     480:	027b1000 	rsbseq	r1, fp, #0
     484:	02140000 	andseq	r0, r4, #0
     488:	00017e70 	andeq	r7, r1, r0, ror lr
     48c:	025d0900 	subseq	r0, sp, #0, 18
     490:	71020000 	mrsvc	r0, (UNDEF: 2)
     494:	0000002c 	andeq	r0, r0, ip, lsr #32
     498:	022d0900 	eoreq	r0, sp, #0, 18
     49c:	72020000 	andvc	r0, r2, #0
     4a0:	0000002c 	andeq	r0, r0, ip, lsr #32
     4a4:	023e0904 	eorseq	r0, lr, #4, 18	; 0x10000
     4a8:	73020000 	movwvc	r0, #8192	; 0x2000
     4ac:	0000002c 	andeq	r0, r0, ip, lsr #32
     4b0:	026b0908 	rsbeq	r0, fp, #8, 18	; 0x20000
     4b4:	74020000 	strvc	r0, [r2], #-0
     4b8:	0000002c 	andeq	r0, r0, ip, lsr #32
     4bc:	02a8090c 	adceq	r0, r8, #12, 18	; 0x30000
     4c0:	75020000 	strvc	r0, [r2, #-0]
     4c4:	0000002c 	andeq	r0, r0, ip, lsr #32
     4c8:	0e110010 	mrceq	0, 0, r0, cr1, cr0, {0}
     4cc:	01000002 	tsteq	r0, r2
     4d0:	0000250f 	andeq	r2, r0, pc, lsl #10
     4d4:	00811000 	addeq	r1, r1, r0
     4d8:	00001000 	andeq	r1, r0, r0
     4dc:	a59c0100 	ldrge	r0, [ip, #256]	; 0x100
     4e0:	12000001 	andne	r0, r0, #1
     4e4:	0f010071 	svceq	0x00010071
     4e8:	000001a5 	andeq	r0, r0, r5, lsr #3
     4ec:	00000079 	andeq	r0, r0, r9, ror r0
     4f0:	2a040600 	bcs	101cf8 <__bss_end__+0xf8680>
     4f4:	11000001 	tstne	r0, r1
     4f8:	000001f8 	strdeq	r0, [r0], -r8
     4fc:	01241201 	teqeq	r4, r1, lsl #4
     500:	81200000 	teqhi	r0, r0
     504:	007c0000 	rsbseq	r0, ip, r0
     508:	9c010000 	stcls	0, cr0, [r1], {-0}
     50c:	0000025c 	andeq	r0, r0, ip, asr r2
     510:	01007112 	tsteq	r0, r2, lsl r1
     514:	0001a512 	andeq	sl, r1, r2, lsl r5
     518:	00009a00 	andeq	r9, r0, r0, lsl #20
     51c:	01421300 	mrseq	r1, SPSR_svc
     520:	026c0000 	rsbeq	r0, ip, #0
     524:	03050000 	movweq	r0, #20480	; 0x5000
     528:	00008f20 	andeq	r8, r0, r0, lsr #30
     52c:	01006514 	tsteq	r0, r4, lsl r5
     530:	00012414 	andeq	r2, r1, r4, lsl r4
     534:	0000f500 	andeq	pc, r0, r0, lsl #10
     538:	81401500 	cmphi	r0, r0, lsl #10
     53c:	06ca0000 	strbeq	r0, [sl], r0
     540:	021b0000 	andseq	r0, fp, #0
     544:	01160000 	tsteq	r6, r0
     548:	16430153 			; <UNDEFINED> instruction: 0x16430153
     54c:	03055201 	movweq	r5, #20993	; 0x5201
     550:	00008f20 	andeq	r8, r0, r0, lsr #30
     554:	05510116 	ldrbeq	r0, [r1, #-278]	; 0x116
     558:	008fbc03 	addeq	fp, pc, r3, lsl #24
     55c:	50011600 	andpl	r1, r1, r0, lsl #12
     560:	8f940305 	svchi	0x00940305
     564:	17000000 	strne	r0, [r0, -r0]
     568:	00008144 	andeq	r8, r0, r4, asr #2
     56c:	000006e0 	andeq	r0, r0, r0, ror #13
     570:	00817015 	addeq	r7, r1, r5, lsl r0
     574:	0006ca00 	andeq	ip, r6, r0, lsl #20
     578:	00025200 	andeq	r5, r2, r0, lsl #4
     57c:	53011600 	movwpl	r1, #5632	; 0x1600
     580:	01164701 	tsteq	r6, r1, lsl #14
     584:	20030552 	andcs	r0, r3, r2, asr r5
     588:	1600008f 	strne	r0, [r0], -pc, lsl #1
     58c:	03055101 	movweq	r5, #20737	; 0x5101
     590:	00008fbc 			; <UNDEFINED> instruction: 0x00008fbc
     594:	05500116 	ldrbeq	r0, [r0, #-278]	; 0x116
     598:	008fc003 	addeq	ip, pc, r3
     59c:	74170000 	ldrvc	r0, [r7], #-0
     5a0:	e0000081 	and	r0, r0, r1, lsl #1
     5a4:	00000006 	andeq	r0, r0, r6
     5a8:	00007f0b 	andeq	r7, r0, fp, lsl #30
     5ac:	00026c00 	andeq	r6, r2, r0, lsl #24
     5b0:	00760c00 	rsbseq	r0, r6, r0, lsl #24
     5b4:	00050000 	andeq	r0, r5, r0
     5b8:	00025c07 	andeq	r5, r2, r7, lsl #24
     5bc:	02951100 	addseq	r1, r5, #0, 2
     5c0:	15020000 	strne	r0, [r2, #-0]
     5c4:	00000124 	andeq	r0, r0, r4, lsr #2
     5c8:	0000819c 	muleq	r0, ip, r1
     5cc:	0000002c 	andeq	r0, r0, ip, lsr #32
     5d0:	02d69c01 	sbcseq	r9, r6, #256	; 0x100
     5d4:	27180000 	ldrcs	r0, [r8, -r0]
     5d8:	02000002 	andeq	r0, r0, #2
     5dc:	00012a16 	andeq	r2, r1, r6, lsl sl
     5e0:	58030500 	stmdapl	r3, {r8, sl}
     5e4:	14000092 	strne	r0, [r0], #-146	; 0x92
     5e8:	17020074 	smlsdxne	r2, r4, r0, r0
     5ec:	00000124 	andeq	r0, r0, r4, lsr #2
     5f0:	0000012c 	andeq	r0, r0, ip, lsr #2
     5f4:	0081a815 	addeq	sl, r1, r5, lsl r8
     5f8:	0001ab00 	andeq	sl, r1, r0, lsl #22
     5fc:	0002bf00 	andeq	fp, r2, r0, lsl #30
     600:	50011600 	andpl	r1, r1, r0, lsl #12
     604:	92580305 	subsls	r0, r8, #335544320	; 0x14000000
     608:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     60c:	000081bc 			; <UNDEFINED> instruction: 0x000081bc
     610:	000006e7 	andeq	r0, r0, r7, ror #13
     614:	01510116 	cmpeq	r1, r6, lsl r1
     618:	50011638 	andpl	r1, r1, r8, lsr r6
     61c:	80480a03 	subhi	r0, r8, r3, lsl #20
     620:	d71a0000 	ldrle	r0, [sl, -r0]
     624:	02000001 	andeq	r0, r0, #1
     628:	00012410 	andeq	r2, r1, r0, lsl r4
     62c:	0081c800 	addeq	ip, r1, r0, lsl #16
     630:	00001000 	andeq	r1, r0, r0
     634:	1b9c0100 	blne	fe700a3c <__bss_end__+0xfe6f73c4>
     638:	000000f1 	strdeq	r0, [r0], -r1
     63c:	01242302 	teqeq	r4, r2, lsl #6
     640:	81d80000 	bicshi	r0, r8, r0
     644:	002c0000 	eoreq	r0, ip, r0
     648:	9c010000 	stcls	0, cr0, [r1], {-0}
     64c:	0000037c 	andeq	r0, r0, ip, ror r3
     650:	00013d1c 	andeq	r3, r1, ip, lsl sp
     654:	87230200 	strhi	r0, [r3, -r0, lsl #4]!
     658:	4a000003 	bmi	66c <_start-0x7994>
     65c:	12000001 	andne	r0, r0, #1
     660:	00677261 	rsbeq	r7, r7, r1, ror #4
     664:	007d2302 	rsbseq	r2, sp, r2, lsl #6
     668:	016b0000 	cmneq	fp, r0
     66c:	741d0000 	ldrvc	r0, [sp], #-0
     670:	24240200 	strtcs	r0, [r4], #-512	; 0x200
     674:	13000001 	movwne	r0, #1
     678:	00000142 	andeq	r0, r0, r2, asr #2
     67c:	0000039d 	muleq	r0, sp, r3
     680:	8f280305 	svchi	0x00280305
     684:	e0170000 	ands	r0, r7, r0
     688:	71000081 	smlabbvc	r0, r1, r0, r0
     68c:	15000002 	strne	r0, [r0, #-2]
     690:	000081f4 	strdeq	r8, [r0], -r4
     694:	000006ca 	andeq	r0, r0, sl, asr #13
     698:	00000372 	andeq	r0, r0, r2, ror r3
     69c:	02530116 	subseq	r0, r3, #-2147483643	; 0x80000005
     6a0:	01162708 	tsteq	r6, r8, lsl #14
     6a4:	28030552 	stmdacs	r3, {r1, r4, r6, r8, sl}
     6a8:	1600008f 	strne	r0, [r0], -pc, lsl #1
     6ac:	03055101 	movweq	r5, #20737	; 0x5101
     6b0:	0000901c 	andeq	r9, r0, ip, lsl r0
     6b4:	05500116 	ldrbeq	r0, [r0, #-278]	; 0x116
     6b8:	008ff003 	addeq	pc, pc, r3
     6bc:	f8170000 			; <UNDEFINED> instruction: 0xf8170000
     6c0:	e0000081 	and	r0, r0, r1, lsl #1
     6c4:	00000006 	andeq	r0, r0, r6
     6c8:	0003871e 	andeq	r8, r3, lr, lsl r7
     6cc:	007d1f00 	rsbseq	r1, sp, r0, lsl #30
     6d0:	06000000 	streq	r0, [r0], -r0
     6d4:	00037c04 	andeq	r7, r3, r4, lsl #24
     6d8:	007f0b00 	rsbseq	r0, pc, r0, lsl #22
     6dc:	039d0000 	orrseq	r0, sp, #0
     6e0:	760c0000 	strvc	r0, [ip], -r0
     6e4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     6e8:	038d0700 	orreq	r0, sp, #0, 14
     6ec:	5c200000 	stcpl	0, cr0, [r0], #-0
     6f0:	02000001 	andeq	r0, r0, #1
     6f4:	0082042e 	addeq	r0, r2, lr, lsr #8
     6f8:	00002800 	andeq	r2, r0, r0, lsl #16
     6fc:	0e9c0100 	fmleqe	f0, f4, f0
     700:	1c000004 	stcne	0, cr0, [r0], {4}
     704:	0000028c 	andeq	r0, r0, ip, lsl #5
     708:	00252e02 	eoreq	r2, r5, r2, lsl #28
     70c:	018c0000 	orreq	r0, ip, r0
     710:	42130000 	andsmi	r0, r3, #0
     714:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     718:	05000004 	streq	r0, [r0, #-4]
     71c:	008f3403 	addeq	r3, pc, r3, lsl #8
     720:	821c1500 	andshi	r1, ip, #0, 10
     724:	06ca0000 	strbeq	r0, [sl], r0
     728:	04040000 	streq	r0, [r4], #-0
     72c:	01160000 	tsteq	r6, r0
     730:	38080253 	stmdacc	r8, {r0, r1, r4, r6, r9}
     734:	05520116 	ldrbeq	r0, [r2, #-278]	; 0x116
     738:	008f3403 	addeq	r3, pc, r3, lsl #8
     73c:	51011600 	tstpl	r1, r0, lsl #12
     740:	901c0305 	andsls	r0, ip, r5, lsl #6
     744:	01160000 	tsteq	r6, r0
     748:	f0030550 			; <UNDEFINED> instruction: 0xf0030550
     74c:	0000008f 	andeq	r0, r0, pc, lsl #1
     750:	00822017 	addeq	r2, r2, r7, lsl r0
     754:	0006e000 	andeq	lr, r6, r0
     758:	8d070000 	stchi	0, cr0, [r7, #-0]
     75c:	20000003 	andcs	r0, r0, r3
     760:	0000029e 	muleq	r0, lr, r2
     764:	822c3c02 	eorhi	r3, ip, #512	; 0x200
     768:	00280000 	eoreq	r0, r8, r0
     76c:	9c010000 	stcls	0, cr0, [r1], {-0}
     770:	00000470 	andeq	r0, r0, r0, ror r4
     774:	00014213 	andeq	r4, r1, r3, lsl r2
     778:	00048000 	andeq	r8, r4, r0
     77c:	40030500 	andmi	r0, r3, r0, lsl #10
     780:	1500008f 	strne	r0, [r0, #-143]	; 0x8f
     784:	00008244 	andeq	r8, r0, r4, asr #4
     788:	000006ca 	andeq	r0, r0, sl, asr #13
     78c:	00000466 	andeq	r0, r0, r6, ror #8
     790:	02530116 	subseq	r0, r3, #-2147483643	; 0x80000005
     794:	01164208 	tsteq	r6, r8, lsl #4
     798:	40030552 	andmi	r0, r3, r2, asr r5
     79c:	1600008f 	strne	r0, [r0], -pc, lsl #1
     7a0:	03055101 	movweq	r5, #20737	; 0x5101
     7a4:	0000901c 	andeq	r9, r0, ip, lsl r0
     7a8:	05500116 	ldrbeq	r0, [r0, #-278]	; 0x116
     7ac:	008ff003 	addeq	pc, pc, r3
     7b0:	48170000 	ldmdami	r7, {}	; <UNPREDICTABLE>
     7b4:	e0000082 	and	r0, r0, r2, lsl #1
     7b8:	00000006 	andeq	r0, r0, r6
     7bc:	00007f0b 	andeq	r7, r0, fp, lsl #30
     7c0:	00048000 	andeq	r8, r4, r0
     7c4:	00760c00 	rsbseq	r0, r6, r0, lsl #24
     7c8:	00090000 	andeq	r0, r9, r0
     7cc:	00047007 	andeq	r7, r4, r7
     7d0:	01152000 	tsteq	r5, r0
     7d4:	4a020000 	bmi	807dc <__bss_end__+0x77164>
     7d8:	00008254 	andeq	r8, r0, r4, asr r2
     7dc:	0000004c 	andeq	r0, r0, ip, asr #32
     7e0:	05029c01 	streq	r9, [r2, #-3073]	; 0xc01
     7e4:	42130000 	andsmi	r0, r3, #0
     7e8:	12000001 	andne	r0, r0, #1
     7ec:	05000005 	streq	r0, [r0, #-5]
     7f0:	008f4c03 	addeq	r4, pc, r3, lsl #24
     7f4:	82601500 	rsbhi	r1, r0, #0, 10
     7f8:	017e0000 	cmneq	lr, r0
     7fc:	04c00000 	strbeq	r0, [r0], #0
     800:	01160000 	tsteq	r6, r0
     804:	64030550 	strvs	r0, [r3], #-1360	; 0x550
     808:	00000092 	muleq	r0, r2, r0
     80c:	00826c17 	addeq	r6, r2, r7, lsl ip
     810:	00027100 	andeq	r7, r2, r0, lsl #2
     814:	82881500 	addhi	r1, r8, #0, 10
     818:	06ca0000 	strbeq	r0, [sl], r0
     81c:	04f80000 	ldrbteq	r0, [r8], #0
     820:	01160000 	tsteq	r6, r0
     824:	59080253 	stmdbpl	r8, {r0, r1, r4, r6, r9}
     828:	05520116 	ldrbeq	r0, [r2, #-278]	; 0x116
     82c:	008f4c03 	addeq	r4, pc, r3, lsl #24
     830:	51011600 	tstpl	r1, r0, lsl #12
     834:	901c0305 	andsls	r0, ip, r5, lsl #6
     838:	01160000 	tsteq	r6, r0
     83c:	f0030550 			; <UNDEFINED> instruction: 0xf0030550
     840:	0000008f 	andeq	r0, r0, pc, lsl #1
     844:	00828c17 	addeq	r8, r2, r7, lsl ip
     848:	0006e000 	andeq	lr, r6, r0
     84c:	7f0b0000 	svcvc	0x000b0000
     850:	12000000 	andne	r0, r0, #0
     854:	0c000005 	stceq	0, cr0, [r0], {5}
     858:	00000076 	andeq	r0, r0, r6, ror r0
     85c:	02070010 	andeq	r0, r7, #16
     860:	20000005 	andcs	r0, r0, r5
     864:	000002b7 			; <UNDEFINED> instruction: 0x000002b7
     868:	82a06402 	adchi	r6, r0, #33554432	; 0x2000000
     86c:	00280000 	eoreq	r0, r8, r0
     870:	9c010000 	stcls	0, cr0, [r1], {-0}
     874:	00000583 	andeq	r0, r0, r3, lsl #11
     878:	00050a1c 	andeq	r0, r5, ip, lsl sl
     87c:	5d640200 	sfmpl	f0, 2, [r4, #-0]
     880:	ad000000 	stcge	0, cr0, [r0, #-0]
     884:	13000001 	movwne	r0, #1
     888:	00000142 	andeq	r0, r0, r2, asr #2
     88c:	00000593 	muleq	r0, r3, r5
     890:	8f600305 	svchi	0x00600305
     894:	b8150000 	ldmdalt	r5, {}	; <UNPREDICTABLE>
     898:	ca000082 	bgt	aa8 <_start-0x7558>
     89c:	79000006 	stmdbvc	r0, {r1, r2}
     8a0:	16000005 	strne	r0, [r0], -r5
     8a4:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     8a8:	52011665 	andpl	r1, r1, #105906176	; 0x6500000
     8ac:	8f600305 	svchi	0x00600305
     8b0:	01160000 	tsteq	r6, r0
     8b4:	1c030551 	cfstr32ne	mvfx0, [r3], {81}	; 0x51
     8b8:	16000090 			; <UNDEFINED> instruction: 0x16000090
     8bc:	03055001 	movweq	r5, #20481	; 0x5001
     8c0:	00008ff0 	strdeq	r8, [r0], -r0
     8c4:	82bc1700 	adcshi	r1, ip, #0, 14
     8c8:	06e00000 	strbteq	r0, [r0], r0
     8cc:	0b000000 	bleq	8d4 <_start-0x772c>
     8d0:	0000007f 	andeq	r0, r0, pc, ror r0
     8d4:	00000593 	muleq	r0, r3, r5
     8d8:	0000760c 	andeq	r7, r0, ip, lsl #12
     8dc:	07000f00 	streq	r0, [r0, -r0, lsl #30]
     8e0:	00000583 	andeq	r0, r0, r3, lsl #11
     8e4:	0002cc1b 	andeq	ip, r2, fp, lsl ip
     8e8:	246c0200 	strbtcs	r0, [ip], #-512	; 0x200
     8ec:	c8000001 	stmdagt	r0, {r0}
     8f0:	28000082 	stmdacs	r0, {r1, r7}
     8f4:	01000000 	mrseq	r0, (UNDEF: 0)
     8f8:	0006179c 	muleq	r6, ip, r7
     8fc:	013d1c00 	teqeq	sp, r0, lsl #24
     900:	6c020000 	stcvs	0, cr0, [r2], {-0}
     904:	00000387 	andeq	r0, r0, r7, lsl #7
     908:	000001ce 	andeq	r0, r0, lr, asr #3
     90c:	67726112 			; <UNDEFINED> instruction: 0x67726112
     910:	7d6c0200 	sfmvc	f0, 2, [ip, #-0]
     914:	ef000000 	svc	0x00000000
     918:	13000001 	movwne	r0, #1
     91c:	00000142 	andeq	r0, r0, r2, asr #2
     920:	00000617 	andeq	r0, r0, r7, lsl r6
     924:	8f700305 	svchi	0x00700305
     928:	e0150000 	ands	r0, r5, r0
     92c:	ca000082 	bgt	b3c <_start-0x74c4>
     930:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
     934:	16000006 	strne	r0, [r0], -r6
     938:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     93c:	5201166d 	andpl	r1, r1, #114294784	; 0x6d00000
     940:	8f700305 	svchi	0x00700305
     944:	01160000 	tsteq	r6, r0
     948:	1c030551 	cfstr32ne	mvfx0, [r3], {81}	; 0x51
     94c:	16000090 			; <UNDEFINED> instruction: 0x16000090
     950:	03055001 	movweq	r5, #20481	; 0x5001
     954:	00008ff0 	strdeq	r8, [r0], -r0
     958:	82e41700 	rschi	r1, r4, #0, 14
     95c:	06e00000 	strbteq	r0, [r0], r0
     960:	07000000 	streq	r0, [r0, -r0]
     964:	00000502 	andeq	r0, r0, r2, lsl #10
     968:	0002dd1b 	andeq	sp, r2, fp, lsl sp
     96c:	35770200 	ldrbcc	r0, [r7, #-512]!	; 0x200
     970:	f0000001 			; <UNDEFINED> instruction: 0xf0000001
     974:	28000082 	stmdacs	r0, {r1, r7}
     978:	01000000 	mrseq	r0, (UNDEF: 0)
     97c:	00067d9c 	muleq	r6, ip, sp
     980:	01421300 	mrseq	r1, SPSR_svc
     984:	068d0000 	streq	r0, [sp], r0
     988:	03050000 	movweq	r0, #20480	; 0x5000
     98c:	00008f84 	andeq	r8, r0, r4, lsl #31
     990:	00830815 	addeq	r0, r3, r5, lsl r8
     994:	0006ca00 	andeq	ip, r6, r0, lsl #20
     998:	00067300 	andeq	r7, r6, r0, lsl #6
     99c:	53011600 	movwpl	r1, #5632	; 0x1600
     9a0:	16780802 	ldrbtne	r0, [r8], -r2, lsl #16
     9a4:	03055201 	movweq	r5, #20993	; 0x5201
     9a8:	00008f84 	andeq	r8, r0, r4, lsl #31
     9ac:	05510116 	ldrbeq	r0, [r1, #-278]	; 0x116
     9b0:	00901c03 	addseq	r1, r0, r3, lsl #24
     9b4:	50011600 	andpl	r1, r1, r0, lsl #12
     9b8:	8ff00305 	svchi	0x00f00305
     9bc:	17000000 	strne	r0, [r0, -r0]
     9c0:	0000830c 	andeq	r8, r0, ip, lsl #6
     9c4:	000006e0 	andeq	r0, r0, r0, ror #13
     9c8:	007f0b00 	rsbseq	r0, pc, r0, lsl #22
     9cc:	068d0000 	streq	r0, [sp], r0
     9d0:	760c0000 	strvc	r0, [ip], -r0
     9d4:	0d000000 	stceq	0, cr0, [r0, #-0]
     9d8:	067d0700 	ldrbteq	r0, [sp], -r0, lsl #14
     9dc:	f3180000 	vhadd.u16	d0, d8, d0
     9e0:	02000001 	andeq	r0, r0, #1
     9e4:	00012a0a 	andeq	r2, r1, sl, lsl #20
     9e8:	64030500 	strvs	r0, [r3], #-1280	; 0x500
     9ec:	18000092 	stmdane	r0, {r1, r4, r7}
     9f0:	000001db 	ldrdeq	r0, [r0], -fp
     9f4:	06b40c02 	ldrteq	r0, [r4], r2, lsl #24
     9f8:	03050000 	movweq	r0, #20480	; 0x5000
     9fc:	00009260 	andeq	r9, r0, r0, ror #4
     a00:	00012407 	andeq	r2, r1, r7, lsl #8
     a04:	02161800 	andseq	r1, r6, #0, 16
     a08:	0d020000 	stceq	0, cr0, [r2, #-0]
     a0c:	00000124 	andeq	r0, r0, r4, lsr #2
     a10:	926c0305 	rsbls	r0, ip, #335544320	; 0x14000000
     a14:	0b210000 	bleq	840a1c <__bss_end__+0x8373a4>
     a18:	05000003 	streq	r0, [r0, #-3]
     a1c:	00002527 	andeq	r2, r0, r7, lsr #10
     a20:	0006e000 	andeq	lr, r6, r0
     a24:	00861f00 	addeq	r1, r6, r0, lsl #30
     a28:	00220000 	eoreq	r0, r2, r0
     a2c:	00005c23 	andeq	r5, r0, r3, lsr #24
     a30:	245c0500 	ldrbcs	r0, [ip], #-1280	; 0x500
     a34:	000001fe 	strdeq	r0, [r0], -lr
     a38:	007d6705 	rsbseq	r6, sp, r5, lsl #14
     a3c:	2c1f0000 	ldccs	0, cr0, [pc], {-0}
     a40:	1f000000 	svcne	0x00000000
     a44:	0000002c 	andeq	r0, r0, ip, lsr #32
     a48:	01910000 	orrseq	r0, r1, r0
     a4c:	00040000 	andeq	r0, r4, r0
     a50:	000003af 	andeq	r0, r0, pc, lsr #7
     a54:	00670104 	rsbeq	r0, r7, r4, lsl #2
     a58:	fa010000 	blx	40a60 <__bss_end__+0x373e8>
     a5c:	1c000002 	stcne	0, cr0, [r0], {2}
     a60:	24000003 	strcs	r0, [r0], #-3
     a64:	58000083 	stmdapl	r0, {r0, r1, r7}
     a68:	72000000 	andvc	r0, r0, #0
     a6c:	02000002 	andeq	r0, r0, #2
     a70:	000002eb 	andeq	r0, r0, fp, ror #5
     a74:	00302802 	eorseq	r2, r0, r2, lsl #16
     a78:	12030000 	andne	r0, r3, #0
     a7c:	04000003 	streq	r0, [r0], #-3
     a80:	00470003 	subeq	r0, r7, r3
     a84:	65040000 	strvs	r0, [r4, #-0]
     a88:	47000003 	strmi	r0, [r0, -r3]
     a8c:	00000000 	andeq	r0, r0, r0
     a90:	02040500 	andeq	r0, r4, #0, 10
     a94:	00000314 	andeq	r0, r0, r4, lsl r3
     a98:	00256202 	eoreq	r6, r5, r2, lsl #4
     a9c:	04060000 	streq	r0, [r6], #-0
     aa0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
     aa4:	07040700 	streq	r0, [r4, -r0, lsl #14]
     aa8:	0000017d 	andeq	r0, r0, sp, ror r1
     aac:	d8060107 	stmdale	r6, {r0, r1, r2, r8}
     ab0:	07000000 	streq	r0, [r0, -r0]
     ab4:	01c40502 	biceq	r0, r4, r2, lsl #10
     ab8:	04070000 	streq	r0, [r7], #-0
     abc:	0001b005 	andeq	fp, r1, r5
     ac0:	05080700 	streq	r0, [r8, #-1792]	; 0x700
     ac4:	000001ab 	andeq	r0, r0, fp, lsr #3
     ac8:	d6080107 	strle	r0, [r8], -r7, lsl #2
     acc:	07000000 	streq	r0, [r0, -r0]
     ad0:	00fa0702 	rscseq	r0, sl, r2, lsl #14
     ad4:	04070000 	streq	r0, [r7], #-0
     ad8:	00017807 	andeq	r7, r1, r7, lsl #16
     adc:	07080700 	streq	r0, [r8, -r0, lsl #14]
     ae0:	00000173 	andeq	r0, r0, r3, ror r1
     ae4:	a2070407 	andge	r0, r7, #117440512	; 0x7000000
     ae8:	08000001 	stmdaeq	r0, {r0}
     aec:	0000a704 	andeq	sl, r0, r4, lsl #14
     af0:	08010700 	stmdaeq	r1, {r8, r9, sl}
     af4:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     af8:	00b40408 	adcseq	r0, r4, r8, lsl #8
     afc:	a7090000 	strge	r0, [r9, -r0]
     b00:	0a000000 	beq	b08 <_start-0x74f8>
     b04:	0000030b 	andeq	r0, r0, fp, lsl #6
     b08:	00540601 	subseq	r0, r4, r1, lsl #12
     b0c:	83240000 	teqhi	r4, #0
     b10:	00580000 	subseq	r0, r8, r0
     b14:	9c010000 	stcls	0, cr0, [r1], {-0}
     b18:	00000143 	andeq	r0, r0, r3, asr #2
     b1c:	746d660b 	strbtvc	r6, [sp], #-1547	; 0x60b
     b20:	ae060100 	adfges	f0, f6, f0
     b24:	02000000 	andeq	r0, r0, #0
     b28:	0d0c7091 	stceq	0, cr7, [ip, #-580]	; 0xfffffdbc
     b2c:	00667562 	rsbeq	r7, r6, r2, ror #10
     b30:	01430801 	cmpeq	r3, r1, lsl #16
     b34:	03050000 	movweq	r0, #20480	; 0x5000
     b38:	00009270 	andeq	r9, r0, r0, ror r2
     b3c:	0003600e 	andeq	r6, r3, lr
     b40:	49090100 	stmdbmi	r9, {r8}
     b44:	02000000 	andeq	r0, r0, #0
     b48:	730f5c91 	movwvc	r5, #64657	; 0xfc91
     b4c:	0c01007a 	stceq	0, cr0, [r1], {122}	; 0x7a
     b50:	00000054 	andeq	r0, r0, r4, asr r0
     b54:	00000210 	andeq	r0, r0, r0, lsl r2
     b58:	00834c10 	addeq	r4, r3, r0, lsl ip
     b5c:	00017400 	andeq	r7, r1, r0, lsl #8
     b60:	00013600 	andeq	r3, r1, r0, lsl #12
     b64:	53011100 	movwpl	r1, #4352	; 0x1100
     b68:	114c9102 	cmpne	ip, r2, lsl #2
     b6c:	91035201 	tstls	r3, r1, lsl #4
     b70:	01110648 	tsteq	r1, r8, asr #12
     b74:	000a0351 	andeq	r0, sl, r1, asr r3
     b78:	50011104 	andpl	r1, r1, r4, lsl #2
     b7c:	00007402 	andeq	r7, r0, r2, lsl #8
     b80:	00836012 	addeq	r6, r3, r2, lsl r0
     b84:	50011100 	andpl	r1, r1, r0, lsl #2
     b88:	00007402 	andeq	r7, r0, r2, lsl #8
     b8c:	00a71300 	adceq	r1, r7, r0, lsl #6
     b90:	01540000 	cmpeq	r4, r0
     b94:	9a140000 	bls	500b9c <__bss_end__+0x4f7524>
     b98:	ff000000 			; <UNDEFINED> instruction: 0xff000000
     b9c:	54150003 	ldrpl	r0, [r5], #-3
     ba0:	63000000 	movwvs	r0, #0
     ba4:	16000001 	strne	r0, [r0], -r1
     ba8:	000000ae 	andeq	r0, r0, lr, lsr #1
     bac:	037f1700 	cmneq	pc, #0, 14
     bb0:	20040000 	andcs	r0, r4, r0
     bb4:	0000016e 	andeq	r0, r0, lr, ror #2
     bb8:	01540408 	cmpeq	r4, r8, lsl #8
     bbc:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
     bc0:	05000003 	streq	r0, [r0, #-3]
     bc4:	00005402 	andeq	r5, r0, r2, lsl #8
     bc8:	00a11600 	adceq	r1, r1, r0, lsl #12
     bcc:	54160000 	ldrpl	r0, [r6], #-0
     bd0:	16000000 	strne	r0, [r0], -r0
     bd4:	000000ae 	andeq	r0, r0, lr, lsr #1
     bd8:	00004916 	andeq	r4, r0, r6, lsl r9
     bdc:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
     be0:	04000000 	streq	r0, [r0], #-0
     be4:	0004e000 	andeq	lr, r4, r0
     be8:	67010400 	strvs	r0, [r1, -r0, lsl #8]
     bec:	01000000 	mrseq	r0, (UNDEF: 0)
     bf0:	0000036a 	andeq	r0, r0, sl, ror #6
     bf4:	0000031c 	andeq	r0, r0, ip, lsl r3
     bf8:	0000837c 	andeq	r8, r0, ip, ror r3
     bfc:	00000034 	andeq	r0, r0, r4, lsr r0
     c00:	00000378 	andeq	r0, r0, r8, ror r3
     c04:	69050402 	stmdbvs	r5, {r1, sl}
     c08:	0300746e 	movweq	r7, #1134	; 0x46e
     c0c:	017d0704 	cmneq	sp, r4, lsl #14
     c10:	01030000 	mrseq	r0, (UNDEF: 3)
     c14:	0000d806 	andeq	sp, r0, r6, lsl #16
     c18:	05020300 	streq	r0, [r2, #-768]	; 0x300
     c1c:	000001c4 	andeq	r0, r0, r4, asr #3
     c20:	b0050403 	andlt	r0, r5, r3, lsl #8
     c24:	03000001 	movweq	r0, #1
     c28:	01ab0508 			; <UNDEFINED> instruction: 0x01ab0508
     c2c:	01030000 	mrseq	r0, (UNDEF: 3)
     c30:	0000d608 	andeq	sp, r0, r8, lsl #12
     c34:	07020300 	streq	r0, [r2, -r0, lsl #6]
     c38:	000000fa 	strdeq	r0, [r0], -sl
     c3c:	78070403 	stmdavc	r7, {r0, r1, sl}
     c40:	03000001 	movweq	r0, #1
     c44:	01730708 	cmneq	r3, r8, lsl #14
     c48:	04030000 	streq	r0, [r3], #-0
     c4c:	0001a207 	andeq	sl, r1, r7, lsl #4
     c50:	08010300 	stmdaeq	r1, {r8, r9}
     c54:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     c58:	007f0404 	rsbseq	r0, pc, r4, lsl #8
     c5c:	72050000 	andvc	r0, r5, #0
     c60:	06000000 	streq	r0, [r0], -r0
     c64:	00000376 	andeq	r0, r0, r6, ror r3
     c68:	00250401 	eoreq	r0, r5, r1, lsl #8
     c6c:	837c0000 	cmnhi	ip, #0
     c70:	00340000 	eorseq	r0, r4, r0
     c74:	9c010000 	stcls	0, cr0, [r1], {-0}
     c78:	000000ab 	andeq	r0, r0, fp, lsr #1
     c7c:	01007007 	tsteq	r0, r7
     c80:	00007904 	andeq	r7, r0, r4, lsl #18
     c84:	00023900 	andeq	r3, r2, r0, lsl #18
     c88:	25080000 	strcs	r0, [r8, #-0]
     c8c:	ba000000 	blt	c94 <_start-0x736c>
     c90:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     c94:	00000025 	andeq	r0, r0, r5, lsr #32
     c98:	03840a00 	orreq	r0, r4, #0, 20
     c9c:	1d020000 	stcne	0, cr0, [r2, #-0]
     ca0:	000000c5 	andeq	r0, r0, r5, asr #1
     ca4:	00ab0404 	adceq	r0, fp, r4, lsl #8
     ca8:	25080000 	strcs	r0, [r8, #-0]
     cac:	da000000 	ble	cb4 <_start-0x734c>
     cb0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     cb4:	00000079 	andeq	r0, r0, r9, ror r0
     cb8:	037f0b00 	cmneq	pc, #0, 22
     cbc:	0c010000 	stceq	0, cr0, [r1], {-0}
     cc0:	000000eb 	andeq	r0, r0, fp, ror #1
     cc4:	8e880305 	cdphi	3, 8, cr0, cr8, cr5, {0}
     cc8:	04040000 	streq	r0, [r4], #-0
     ccc:	000000cb 	andeq	r0, r0, fp, asr #1
     cd0:	00065400 	andeq	r5, r6, r0, lsl #8
     cd4:	79000400 	stmdbvc	r0, {sl}
     cd8:	04000005 	streq	r0, [r0], #-5
     cdc:	00006701 	andeq	r6, r0, r1, lsl #14
     ce0:	03bc0100 			; <UNDEFINED> instruction: 0x03bc0100
     ce4:	031c0000 	tsteq	ip, #0
     ce8:	83b00000 	movshi	r0, #0
     cec:	04f00000 	ldrbteq	r0, [r0], #0
     cf0:	04120000 	ldreq	r0, [r2], #-0
     cf4:	04020000 	streq	r0, [r2], #-0
     cf8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
     cfc:	07040300 	streq	r0, [r4, -r0, lsl #6]
     d00:	0000017d 	andeq	r0, r0, sp, ror r1
     d04:	d8060103 	stmdale	r6, {r0, r1, r8}
     d08:	03000000 	movweq	r0, #0
     d0c:	01c40502 	biceq	r0, r4, r2, lsl #10
     d10:	04030000 	streq	r0, [r3], #-0
     d14:	0001b005 	andeq	fp, r1, r5
     d18:	05080300 	streq	r0, [r8, #-768]	; 0x300
     d1c:	000001ab 	andeq	r0, r0, fp, lsr #3
     d20:	d6080103 	strle	r0, [r8], -r3, lsl #2
     d24:	03000000 	movweq	r0, #0
     d28:	00fa0702 	rscseq	r0, sl, r2, lsl #14
     d2c:	04030000 	streq	r0, [r3], #-0
     d30:	00017807 	andeq	r7, r1, r7, lsl #16
     d34:	07080300 	streq	r0, [r8, -r0, lsl #6]
     d38:	00000173 	andeq	r0, r0, r3, ror r1
     d3c:	a2070403 	andge	r0, r7, #50331648	; 0x3000000
     d40:	04000001 	streq	r0, [r0], #-1
     d44:	7a040504 	bvc	10215c <__bss_end__+0xf8ae4>
     d48:	03000000 	movweq	r0, #0
     d4c:	00df0801 	sbcseq	r0, pc, r1, lsl #16
     d50:	04050000 	streq	r0, [r5], #-0
     d54:	00000087 	andeq	r0, r0, r7, lsl #1
     d58:	00007a06 	andeq	r7, r0, r6, lsl #20
     d5c:	02eb0700 	rsceq	r0, fp, #0, 14
     d60:	28020000 	stmdacs	r2, {}	; <UNPREDICTABLE>
     d64:	00000097 	muleq	r0, r7, r0
     d68:	00031208 	andeq	r1, r3, r8, lsl #4
     d6c:	00040400 	andeq	r0, r4, r0, lsl #8
     d70:	000000ae 	andeq	r0, r0, lr, lsr #1
     d74:	00036509 	andeq	r6, r3, r9, lsl #10
     d78:	00007200 	andeq	r7, r0, r0, lsl #4
     d7c:	07000000 	streq	r0, [r0, -r0]
     d80:	00000314 	andeq	r0, r0, r4, lsl r3
     d84:	008c6202 	addeq	r6, ip, r2, lsl #4
     d88:	9e0a0000 	cdpls	0, 0, cr0, cr10, cr0, {0}
     d8c:	01000003 	tsteq	r0, r3
     d90:	00002527 	andeq	r2, r0, r7, lsr #10
     d94:	0083b000 	addeq	fp, r3, r0
     d98:	00001400 	andeq	r1, r0, r0, lsl #8
     d9c:	e09c0100 	adds	r0, ip, r0, lsl #2
     da0:	0b000000 	bleq	da8 <_start-0x7258>
     da4:	27010063 	strcs	r0, [r1, -r3, rrx]
     da8:	00000025 	andeq	r0, r0, r5, lsr #32
     dac:	00000257 	andeq	r0, r0, r7, asr r2
     db0:	61700c00 	cmnvs	r0, r0, lsl #24
     db4:	2e010064 	cdpcs	0, 0, cr0, cr1, cr4, {3}
     db8:	00000074 	andeq	r0, r0, r4, ror r0
     dbc:	000083c4 	andeq	r8, r0, r4, asr #7
     dc0:	0000002c 	andeq	r0, r0, ip, lsr #32
     dc4:	01309c01 	teqeq	r0, r1, lsl #24
     dc8:	700b0000 	andvc	r0, fp, r0
     dcc:	742e0100 	strtvc	r0, [lr], #-256	; 0x100
     dd0:	85000000 	strhi	r0, [r0, #-0]
     dd4:	0d000002 	stceq	0, cr0, [r0, #-8]
     dd8:	000003ae 	andeq	r0, r0, lr, lsr #7
     ddc:	00742e01 	rsbseq	r2, r4, r1, lsl #28
     de0:	02b00000 	adcseq	r0, r0, #0
     de4:	dc0e0000 	stcle	0, cr0, [lr], {-0}
     de8:	01000003 	tsteq	r0, r3
     dec:	0000252e 	andeq	r2, r0, lr, lsr #10
     df0:	0f520100 	svceq	0x00520100
     df4:	006e656c 	rsbeq	r6, lr, ip, ror #10
     df8:	00252f01 	eoreq	r2, r5, r1, lsl #30
     dfc:	51010000 	mrspl	r0, (UNDEF: 1)
     e00:	03960a00 	orrseq	r0, r6, #0, 20
     e04:	37010000 	strcc	r0, [r1, -r0]
     e08:	00000074 	andeq	r0, r0, r4, ror r0
     e0c:	000083f0 	strdeq	r8, [r0], -r0
     e10:	00000040 	andeq	r0, r0, r0, asr #32
     e14:	019c9c01 	orrseq	r9, ip, r1, lsl #24
     e18:	640b0000 	strvs	r0, [fp], #-0
     e1c:	01007473 	tsteq	r0, r3, ror r4
     e20:	00007437 	andeq	r7, r0, r7, lsr r4
     e24:	0002d100 	andeq	sp, r2, r0, lsl #2
     e28:	006e0b00 	rsbeq	r0, lr, r0, lsl #22
     e2c:	00253701 	eoreq	r3, r5, r1, lsl #14
     e30:	03090000 	movweq	r0, #36864	; 0x9000
     e34:	700b0000 	andvc	r0, fp, r0
     e38:	74370100 	ldrtvc	r0, [r7], #-256	; 0x100
     e3c:	2a000000 	bcs	e44 <_start-0x71bc>
     e40:	0d000003 	stceq	0, cr0, [r0, #-12]
     e44:	00000120 	andeq	r0, r0, r0, lsr #2
     e48:	00743701 	rsbseq	r3, r4, r1, lsl #14
     e4c:	03600000 	cmneq	r0, #0
     e50:	6c100000 	ldcvs	0, cr0, [r0], {-0}
     e54:	01006e65 	tsteq	r0, r5, ror #28
     e58:	00002539 	andeq	r2, r0, r9, lsr r5
     e5c:	00037e00 	andeq	r7, r3, r0, lsl #28
     e60:	00730f00 	rsbseq	r0, r3, r0, lsl #30
     e64:	00743d01 	rsbseq	r3, r4, r1, lsl #26
     e68:	50010000 	andpl	r0, r1, r0
     e6c:	03ea0a00 	mvneq	r0, #0, 20
     e70:	47010000 	strmi	r0, [r1, -r0]
     e74:	00000074 	andeq	r0, r0, r4, ror r0
     e78:	00008430 	andeq	r8, r0, r0, lsr r4
     e7c:	00000198 	muleq	r0, r8, r1
     e80:	02ca9c01 	sbceq	r9, sl, #256	; 0x100
     e84:	ae0d0000 	cdpge	0, 0, cr0, cr13, cr0, {0}
     e88:	01000003 	tsteq	r0, r3
     e8c:	00002c47 	andeq	r2, r0, r7, asr #24
     e90:	0003a500 	andeq	sl, r3, r0, lsl #10
     e94:	73640b00 	cmnvc	r4, #0, 22
     e98:	47010074 	smlsdxmi	r1, r4, r0, r0
     e9c:	00000074 	andeq	r0, r0, r4, ror r0
     ea0:	000003d3 	ldrdeq	r0, [r0], -r3
     ea4:	01006e0b 	tsteq	r0, fp, lsl #28
     ea8:	00002547 	andeq	r2, r0, r7, asr #10
     eac:	00044100 	andeq	r4, r4, r0, lsl #2
     eb0:	61760b00 	cmnvs	r6, r0, lsl #22
     eb4:	4701006c 	strmi	r0, [r1, -ip, rrx]
     eb8:	00000025 	andeq	r0, r0, r5, lsr #32
     ebc:	0000046d 	andeq	r0, r0, sp, ror #8
     ec0:	0003dc0d 	andeq	sp, r3, sp, lsl #24
     ec4:	25470100 	strbcs	r0, [r7, #-256]	; 0x100
     ec8:	f7000000 			; <UNDEFINED> instruction: 0xf7000000
     ecc:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
     ed0:	000003b3 			; <UNDEFINED> instruction: 0x000003b3
     ed4:	00254701 	eoreq	r4, r5, r1, lsl #14
     ed8:	91020000 	mrsls	r0, (UNDEF: 2)
     edc:	75620f04 	strbvc	r0, [r2, #-3844]!	; 0xf04
     ee0:	4c010066 	stcmi	0, cr0, [r1], {102}	; 0x66
     ee4:	000002ca 	andeq	r0, r0, sl, asr #5
     ee8:	7fa89103 	svcvc	0x00a89103
     eec:	01007010 	tsteq	r0, r0, lsl r0
     ef0:	0000744c 	andeq	r7, r0, ip, asr #8
     ef4:	00052100 	andeq	r2, r5, r0, lsl #2
     ef8:	00751000 	rsbseq	r1, r5, r0
     efc:	002c4d01 	eoreq	r4, ip, r1, lsl #26
     f00:	05c60000 	strbeq	r0, [r6]
     f04:	42110000 	andsmi	r0, r1, #0
     f08:	ea000001 	b	f14 <_start-0x70ec>
     f0c:	05000002 	streq	r0, [r0, #-2]
     f10:	00902c03 	addseq	r2, r0, r3, lsl #24
     f14:	849c1200 	ldrhi	r1, [ip], #512	; 0x200
     f18:	00740000 	rsbseq	r0, r4, r0
     f1c:	02610000 	rsbeq	r0, r1, #0
     f20:	90130000 	andsls	r0, r3, r0
     f24:	01000003 	tsteq	r0, r3
     f28:	00002c52 	andeq	r2, r0, r2, asr ip
     f2c:	0006d600 	andeq	sp, r6, r0, lsl #12
     f30:	80140000 	andshi	r0, r4, r0
     f34:	3a000085 	bcc	1150 <_start-0x6eb0>
     f38:	90000006 	andls	r0, r0, r6
     f3c:	15000002 	strne	r0, [r0, #-2]
     f40:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     f44:	52011575 	andpl	r1, r1, #490733568	; 0x1d400000
     f48:	902c0305 	eorls	r0, ip, r5, lsl #6
     f4c:	01150000 	tsteq	r5, r0
     f50:	64030551 	strvs	r0, [r3], #-1361	; 0x551
     f54:	15000090 	strne	r0, [r0, #-144]	; 0x90
     f58:	03055001 	movweq	r5, #20481	; 0x5001
     f5c:	00009050 	andeq	r9, r0, r0, asr r0
     f60:	85841600 	strhi	r1, [r4, #1536]	; 0x600
     f64:	06500000 	ldrbeq	r0, [r0], -r0
     f68:	90140000 	andsls	r0, r4, r0
     f6c:	e0000085 	and	r0, r0, r5, lsl #1
     f70:	ad000000 	stcge	0, cr0, [r0, #-0]
     f74:	15000002 	strne	r0, [r0, #-2]
     f78:	7d025101 	stfvcs	f5, [r2, #-4]
     f7c:	a4170000 	ldrge	r0, [r7], #-0
     f80:	30000085 	andcc	r0, r0, r5, lsl #1
     f84:	15000001 	strne	r0, [r0, #-1]
     f88:	7d025301 	stcvc	3, cr5, [r2, #-4]
     f8c:	51011500 	tstpl	r1, r0, lsl #10
     f90:	15007402 	strne	r7, [r0, #-1026]	; 0x402
     f94:	75025001 	strvc	r5, [r2, #-1]
     f98:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     f9c:	0000007a 	andeq	r0, r0, sl, ror r0
     fa0:	000002da 	ldrdeq	r0, [r0], -sl
     fa4:	00006b19 	andeq	r6, r0, r9, lsl fp
     fa8:	18003f00 	stmdane	r0, {r8, r9, sl, fp, ip, sp}
     fac:	0000007a 	andeq	r0, r0, sl, ror r0
     fb0:	000002ea 	andeq	r0, r0, sl, ror #5
     fb4:	00006b19 	andeq	r6, r0, r9, lsl fp
     fb8:	06000400 	streq	r0, [r0], -r0, lsl #8
     fbc:	000002da 	ldrdeq	r0, [r0], -sl
     fc0:	0003cd1a 	andeq	ip, r3, sl, lsl sp
     fc4:	c81f0100 	ldmdagt	pc, {r8}	; <UNPREDICTABLE>
     fc8:	50000085 	andpl	r0, r0, r5, lsl #1
     fcc:	01000000 	mrseq	r0, (UNDEF: 0)
     fd0:	00036a9c 	muleq	r3, ip, sl
     fd4:	03e20d00 	mvneq	r0, #0, 26
     fd8:	1f010000 	svcne	0x00010000
     fdc:	00000379 	andeq	r0, r0, r9, ror r3
     fe0:	00000702 	andeq	r0, r0, r2, lsl #14
     fe4:	0003a60d 	andeq	sl, r3, sp, lsl #12
     fe8:	8e1f0100 	mufhie	f0, f7, f0
     fec:	2e000003 	cdpcs	0, 0, cr0, cr0, cr3, {0}
     ff0:	11000007 	tstne	r0, r7
     ff4:	00000142 	andeq	r0, r0, r2, asr #2
     ff8:	000003a4 	andeq	r0, r0, r4, lsr #7
     ffc:	90340305 	eorsls	r0, r4, r5, lsl #6
    1000:	e8140000 	ldmda	r4, {}	; <UNPREDICTABLE>
    1004:	3a000085 	bcc	1220 <_start-0x6de0>
    1008:	60000006 	andvs	r0, r0, r6
    100c:	15000003 	strne	r0, [r0, #-3]
    1010:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    1014:	52011520 	andpl	r1, r1, #32, 10	; 0x8000000
    1018:	90340305 	eorsls	r0, r4, r5, lsl #6
    101c:	01150000 	tsteq	r5, r0
    1020:	64030551 	strvs	r0, [r3], #-1361	; 0x551
    1024:	15000090 	strne	r0, [r0, #-144]	; 0x90
    1028:	03055001 	movweq	r5, #20481	; 0x5001
    102c:	0000909c 	muleq	r0, ip, r0
    1030:	85ec1600 	strbhi	r1, [ip, #1536]!	; 0x600
    1034:	06500000 	ldrbeq	r0, [r0], -r0
    1038:	1b000000 	blne	1040 <_start-0x6fc0>
    103c:	00000025 	andeq	r0, r0, r5, lsr #32
    1040:	00000379 	andeq	r0, r0, r9, ror r3
    1044:	0000251c 	andeq	r2, r0, ip, lsl r5
    1048:	04050000 	streq	r0, [r5], #-0
    104c:	0000036a 	andeq	r0, r0, sl, ror #6
    1050:	0000251b 	andeq	r2, r0, fp, lsl r5
    1054:	00038e00 	andeq	r8, r3, r0, lsl #28
    1058:	00811c00 	addeq	r1, r1, r0, lsl #24
    105c:	05000000 	streq	r0, [r0, #-0]
    1060:	00037f04 	andeq	r7, r3, r4, lsl #30
    1064:	007a1800 	rsbseq	r1, sl, r0, lsl #16
    1068:	03a40000 			; <UNDEFINED> instruction: 0x03a40000
    106c:	6b190000 	blvs	641074 <__bss_end__+0x6379fc>
    1070:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1074:	03940600 	orrseq	r0, r4, #0, 12
    1078:	081d0000 	ldmdaeq	sp, {}	; <UNPREDICTABLE>
    107c:	01000003 	tsteq	r0, r3
    1080:	0000257d 	andeq	r2, r0, sp, ror r5
    1084:	00861800 	addeq	r1, r6, r0, lsl #16
    1088:	00028800 	andeq	r8, r2, r0, lsl #16
    108c:	ff9c0100 			; <UNDEFINED> instruction: 0xff9c0100
    1090:	0b000005 	bleq	10ac <_start-0x6f54>
    1094:	00667562 	rsbeq	r7, r6, r2, ror #10
    1098:	00747d01 	rsbseq	r7, r4, r1, lsl #26
    109c:	075a0000 	ldrbeq	r0, [sl, -r0]
    10a0:	6e0b0000 	cdpvs	0, 0, cr0, cr11, cr0, {0}
    10a4:	257d0100 	ldrbcs	r0, [sp, #-256]!	; 0x100
    10a8:	86000000 	strhi	r0, [r0], -r0
    10ac:	0b000007 	bleq	10d0 <_start-0x6f30>
    10b0:	00746d66 	rsbseq	r6, r4, r6, ror #26
    10b4:	00817d01 	addeq	r7, r1, r1, lsl #26
    10b8:	07b40000 	ldreq	r0, [r4, r0]!
    10bc:	600d0000 	andvs	r0, sp, r0
    10c0:	01000003 	tsteq	r0, r3
    10c4:	0000ae7d 	andeq	sl, r0, sp, ror lr
    10c8:	0007e800 	andeq	lr, r7, r0, lsl #16
    10cc:	00701000 	rsbseq	r1, r0, r0
    10d0:	00747e01 	rsbseq	r7, r4, r1, lsl #28
    10d4:	07fb0000 	ldrbeq	r0, [fp, r0]!
    10d8:	65100000 	ldrvs	r0, [r0, #-0]
    10dc:	747e0100 	ldrbtvc	r0, [lr], #-256	; 0x100
    10e0:	79000000 	stmdbvc	r0, {}	; <UNPREDICTABLE>
    10e4:	11000008 	tstne	r0, r8
    10e8:	00000142 	andeq	r0, r0, r2, asr #2
    10ec:	0000060f 	andeq	r0, r0, pc, lsl #12
    10f0:	90440305 	subls	r0, r4, r5, lsl #6
    10f4:	6c1e0000 	ldcvs	0, cr0, [lr], {-0}
    10f8:	f4000086 	vst4.32	{d0-d3}, [r0], r6
    10fc:	10000001 	andne	r0, r0, r1
    1100:	8b010073 	blhi	412d4 <__bss_end__+0x37c5c>
    1104:	00000074 	andeq	r0, r0, r4, ror r0
    1108:	000008a0 	andeq	r0, r0, r0, lsr #17
    110c:	6d756e0f 	ldclvs	14, cr6, [r5, #-60]!	; 0xffffffc4
    1110:	148b0100 	strne	r0, [fp], #256	; 0x100
    1114:	03000006 	movweq	r0, #6
    1118:	137ed891 	cmnne	lr, #9502720	; 0x910000
    111c:	000003dc 	ldrdeq	r0, [r0], -ip
    1120:	002c8c01 	eoreq	r8, ip, r1, lsl #24
    1124:	08f50000 	ldmeq	r5!, {}^	; <UNPREDICTABLE>
    1128:	9c140000 	ldcls	0, cr0, [r4], {-0}
    112c:	b9000086 	stmdblt	r0, {r1, r2, r7}
    1130:	6d000000 	stcvs	0, cr0, [r0, #-0]
    1134:	15000004 	strne	r0, [r0, #-4]
    1138:	75025001 	strvc	r5, [r2, #-1]
    113c:	c0140000 	andsgt	r0, r4, r0
    1140:	3a000086 	bcc	1360 <_start-0x6ca0>
    1144:	9c000006 	stcls	0, cr0, [r0], {6}
    1148:	15000004 	strne	r0, [r0, #-4]
    114c:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    1150:	52011592 	andpl	r1, r1, #612368384	; 0x24800000
    1154:	90440305 	subls	r0, r4, r5, lsl #6
    1158:	01150000 	tsteq	r5, r0
    115c:	64030551 	strvs	r0, [r3], #-1361	; 0x551
    1160:	15000090 	strne	r0, [r0, #-144]	; 0x90
    1164:	03055001 	movweq	r5, #20481	; 0x5001
    1168:	000090b4 	strheq	r9, [r0], -r4
    116c:	86c41600 	strbhi	r1, [r4], r0, lsl #12
    1170:	06500000 	ldrbeq	r0, [r0], -r0
    1174:	44140000 	ldrmi	r0, [r4], #-0
    1178:	3a000087 	bcc	139c <_start-0x6c64>
    117c:	d4000006 	strle	r0, [r0], #-6
    1180:	15000004 	strne	r0, [r0, #-4]
    1184:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    1188:	52011598 	andpl	r1, r1, #152, 10	; 0x26000000
    118c:	90440305 	subls	r0, r4, r5, lsl #6
    1190:	01150000 	tsteq	r5, r0
    1194:	64030551 	strvs	r0, [r3], #-1361	; 0x551
    1198:	15000090 	strne	r0, [r0, #-144]	; 0x90
    119c:	03055001 	movweq	r5, #20481	; 0x5001
    11a0:	000090d0 	ldrdeq	r9, [r0], -r0
    11a4:	87481600 	strbhi	r1, [r8, -r0, lsl #12]
    11a8:	06500000 	ldrbeq	r0, [r0], -r0
    11ac:	6c140000 	ldcvs	0, cr0, [r4], {-0}
    11b0:	9c000087 	stcls	0, cr0, [r0], {135}	; 0x87
    11b4:	0a000001 	beq	11c0 <_start-0x6e40>
    11b8:	15000005 	strne	r0, [r0, #-5]
    11bc:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    11c0:	51011580 	smlabbpl	r1, r0, r5, r1
    11c4:	7ed09103 	atnvcs	f1, f3
    11c8:	01500115 	cmpeq	r0, r5, lsl r1
    11cc:	7d02153a 	cfstr32vc	mvfx1, [r2, #-232]	; 0xffffff18
    11d0:	15310104 	ldrne	r0, [r1, #-260]!	; 0x104
    11d4:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    11d8:	14000077 	strne	r0, [r0], #-119	; 0x77
    11dc:	00008794 	muleq	r0, r4, r7
    11e0:	0000019c 	muleq	r0, ip, r1
    11e4:	00000537 	andeq	r0, r0, r7, lsr r5
    11e8:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    11ec:	01158008 	tsteq	r5, r8
    11f0:	d0910351 	addsle	r0, r1, r1, asr r3
    11f4:	5001157e 	andpl	r1, r1, lr, ror r5
    11f8:	02153a01 	andseq	r3, r5, #4096	; 0x1000
    11fc:	3001047d 	andcc	r0, r1, sp, ror r4
    1200:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    1204:	00007702 	andeq	r7, r0, r2, lsl #14
    1208:	0087bc14 	addeq	fp, r7, r4, lsl ip
    120c:	00019c00 	andeq	r9, r1, r0, lsl #24
    1210:	00056400 	andeq	r6, r5, r0, lsl #8
    1214:	52011500 	andpl	r1, r1, #0, 10
    1218:	15800802 	strne	r0, [r0, #2050]	; 0x802
    121c:	91035101 	tstls	r3, r1, lsl #2
    1220:	01157ed0 			; <UNDEFINED> instruction: 0x01157ed0
    1224:	15400150 	strbne	r0, [r0, #-336]	; 0x150
    1228:	01047d02 	tsteq	r4, r2, lsl #26
    122c:	7d021530 	cfstr32vc	mvfx1, [r2, #-192]	; 0xffffff40
    1230:	00770200 	rsbseq	r0, r7, r0, lsl #4
    1234:	87e41400 	strbhi	r1, [r4, r0, lsl #8]!
    1238:	019c0000 	orrseq	r0, ip, r0
    123c:	05910000 	ldreq	r0, [r1]
    1240:	01150000 	tsteq	r5, r0
    1244:	80080252 	andhi	r0, r8, r2, asr r2
    1248:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    124c:	157ed091 	ldrbne	sp, [lr, #-145]!	; 0x91
    1250:	32015001 	andcc	r5, r1, #1
    1254:	047d0215 	ldrbteq	r0, [sp], #-533	; 0x215
    1258:	02153001 	andseq	r3, r5, #1
    125c:	7702007d 	smlsdxvc	r2, sp, r0, r0
    1260:	18140000 	ldmdane	r4, {}	; <UNPREDICTABLE>
    1264:	9c000088 	stcls	0, cr0, [r0], {136}	; 0x88
    1268:	be000001 	cdplt	0, 0, cr0, cr0, cr1, {0}
    126c:	15000005 	strne	r0, [r0, #-5]
    1270:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    1274:	51011580 	smlabbpl	r1, r0, r5, r1
    1278:	7ed09103 	atnvcs	f1, f3
    127c:	01500115 	cmpeq	r0, r5, lsl r1
    1280:	7d021538 	cfstr32vc	mvfx1, [r2, #-224]	; 0xffffff20
    1284:	15300104 	ldrne	r0, [r0, #-260]!	; 0x104
    1288:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    128c:	14000077 	strne	r0, [r0], #-119	; 0x77
    1290:	00008834 	andeq	r8, r0, r4, lsr r8
    1294:	0000063a 	andeq	r0, r0, sl, lsr r6
    1298:	000005f4 	strdeq	r0, [r0], -r4
    129c:	02530115 	subseq	r0, r3, #1073741829	; 0x40000005
    12a0:	0115b908 	tsteq	r5, r8, lsl #18
    12a4:	44030552 	strmi	r0, [r3], #-1362	; 0x552
    12a8:	15000090 	strne	r0, [r0, #-144]	; 0x90
    12ac:	03055101 	movweq	r5, #20737	; 0x5101
    12b0:	00009064 	andeq	r9, r0, r4, rrx
    12b4:	05500115 	ldrbeq	r0, [r0, #-277]	; 0x115
    12b8:	0090f803 	addseq	pc, r0, r3, lsl #16
    12bc:	7d021500 	cfstr32vc	mvfx1, [r2, #-0]
    12c0:	00790200 	rsbseq	r0, r9, r0, lsl #4
    12c4:	88381600 	ldmdahi	r8!, {r9, sl, ip}
    12c8:	06500000 	ldrbeq	r0, [r0], -r0
    12cc:	00000000 	andeq	r0, r0, r0
    12d0:	00007a18 	andeq	r7, r0, r8, lsl sl
    12d4:	00060f00 	andeq	r0, r6, r0, lsl #30
    12d8:	006b1900 	rsbeq	r1, fp, r0, lsl #18
    12dc:	00090000 	andeq	r0, r9, r0
    12e0:	0005ff06 	andeq	pc, r5, r6, lsl #30
    12e4:	007a1800 	rsbseq	r1, sl, r0, lsl #16
    12e8:	06240000 	strteq	r0, [r4], -r0
    12ec:	6b190000 	blvs	6412f4 <__bss_end__+0x637c7c>
    12f0:	7f000000 	svcvc	0x00000000
    12f4:	03841f00 	orreq	r1, r4, #0, 30
    12f8:	1d030000 	stcne	0, cr0, [r3, #-0]
    12fc:	00000379 	andeq	r0, r0, r9, ror r3
    1300:	00037f1f 	andeq	r7, r3, pc, lsl pc
    1304:	8e200300 	cdphi	3, 2, cr0, cr0, cr0, {0}
    1308:	20000003 	andcs	r0, r0, r3
    130c:	0000030b 	andeq	r0, r0, fp, lsl #6
    1310:	00252703 	eoreq	r2, r5, r3, lsl #14
    1314:	06500000 	ldrbeq	r0, [r0], -r0
    1318:	811c0000 	tsthi	ip, r0
    131c:	21000000 	mrscs	r0, (UNDEF: 0)
    1320:	005c2200 	subseq	r2, ip, r0, lsl #4
    1324:	5c030000 	stcpl	0, cr0, [r3], {-0}
    1328:	0000ff00 	andeq	pc, r0, r0, lsl #30
    132c:	57000400 	strpl	r0, [r0, -r0, lsl #8]
    1330:	04000007 	streq	r0, [r0], #-7
    1334:	00006701 	andeq	r6, r0, r1, lsl #14
    1338:	03ef0100 	mvneq	r0, #0, 2
    133c:	031c0000 	tsteq	ip, #0
    1340:	88a00000 	stmiahi	r0!, {}	; <UNPREDICTABLE>
    1344:	00280000 	eoreq	r0, r8, r0
    1348:	05f20000 	ldrbeq	r0, [r2, #0]!
    134c:	04020000 	streq	r0, [r2], #-0
    1350:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    1354:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1358:	0000017d 	andeq	r0, r0, sp, ror r1
    135c:	d8060103 	stmdale	r6, {r0, r1, r8}
    1360:	03000000 	movweq	r0, #0
    1364:	01c40502 	biceq	r0, r4, r2, lsl #10
    1368:	04030000 	streq	r0, [r3], #-0
    136c:	0001b005 	andeq	fp, r1, r5
    1370:	05080300 	streq	r0, [r8, #-768]	; 0x300
    1374:	000001ab 	andeq	r0, r0, fp, lsr #3
    1378:	d6080103 	strle	r0, [r8], -r3, lsl #2
    137c:	03000000 	movweq	r0, #0
    1380:	00fa0702 	rscseq	r0, sl, r2, lsl #14
    1384:	04030000 	streq	r0, [r3], #-0
    1388:	00017807 	andeq	r7, r1, r7, lsl #16
    138c:	07080300 	streq	r0, [r8, -r0, lsl #6]
    1390:	00000173 	andeq	r0, r0, r3, ror r1
    1394:	a2070403 	andge	r0, r7, #50331648	; 0x3000000
    1398:	03000001 	movweq	r0, #1
    139c:	00df0801 	sbcseq	r0, pc, r1, lsl #16
    13a0:	04040000 	streq	r0, [r4], #-0
    13a4:	0000007f 	andeq	r0, r0, pc, ror r0
    13a8:	00007205 	andeq	r7, r0, r5, lsl #4
    13ac:	00e40600 	rsceq	r0, r4, r0, lsl #12
    13b0:	04010000 	streq	r0, [r1], #-0
    13b4:	000088a0 	andeq	r8, r0, r0, lsr #17
    13b8:	00000028 	andeq	r0, r0, r8, lsr #32
    13bc:	00ca9c01 	sbceq	r9, sl, r1, lsl #24
    13c0:	b4070000 	strlt	r0, [r7], #-0
    13c4:	ac000088 	stcge	0, cr0, [r0], {136}	; 0x88
    13c8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    13cc:	03055001 	movweq	r5, #20481	; 0x5001
    13d0:	00009130 	andeq	r9, r0, r0, lsr r1
    13d4:	88bc0900 	ldmhi	ip!, {r8, fp}
    13d8:	00ea0000 	rsceq	r0, sl, r0
    13dc:	00c00000 	sbceq	r0, r0, r0
    13e0:	01080000 	mrseq	r0, (UNDEF: 8)
    13e4:	64080250 	strvs	r0, [r8], #-592	; 0x250
    13e8:	88c00a00 	stmiahi	r0, {r9, fp}^
    13ec:	00fb0000 	rscseq	r0, fp, r0
    13f0:	0b000000 	bleq	13f8 <_start-0x6c08>
    13f4:	00000025 	andeq	r0, r0, r5, lsr #32
    13f8:	000000d9 	ldrdeq	r0, [r0], -r9
    13fc:	0000790c 	andeq	r7, r0, ip, lsl #18
    1400:	7f0d0000 	svcvc	0x000d0000
    1404:	02000003 	andeq	r0, r0, #3
    1408:	0000e420 	andeq	lr, r0, r0, lsr #8
    140c:	ca040400 	bgt	102414 <__bss_end__+0xf8d9c>
    1410:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1414:	00000409 	andeq	r0, r0, r9, lsl #8
    1418:	00fb4d02 	rscseq	r4, fp, r2, lsl #26
    141c:	2c0c0000 	stccs	0, cr0, [ip], {-0}
    1420:	00000000 	andeq	r0, r0, r0
    1424:	00005c0f 	andeq	r5, r0, pc, lsl #24
    1428:	005c0200 	subseq	r0, ip, r0, lsl #4
    142c:	0000010b 	andeq	r0, r0, fp, lsl #2
    1430:	08210004 	stmdaeq	r1!, {r2}
    1434:	01040000 	mrseq	r0, (UNDEF: 4)
    1438:	00000067 	andeq	r0, r0, r7, rrx
    143c:	00041201 	andeq	r1, r4, r1, lsl #4
    1440:	00031c00 	andeq	r1, r3, r0, lsl #24
    1444:	0088c800 	addeq	ip, r8, r0, lsl #16
    1448:	00003400 	andeq	r3, r0, r0, lsl #8
    144c:	00068900 	andeq	r8, r6, r0, lsl #18
    1450:	05040200 	streq	r0, [r4, #-512]	; 0x200
    1454:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1458:	7d070403 	cfstrsvc	mvf0, [r7, #-12]
    145c:	03000001 	movweq	r0, #1
    1460:	00d80601 	sbcseq	r0, r8, r1, lsl #12
    1464:	02030000 	andeq	r0, r3, #0
    1468:	0001c405 	andeq	ip, r1, r5, lsl #8
    146c:	05040300 	streq	r0, [r4, #-768]	; 0x300
    1470:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    1474:	ab050803 	blge	143488 <__bss_end__+0x139e10>
    1478:	03000001 	movweq	r0, #1
    147c:	00d60801 	sbcseq	r0, r6, r1, lsl #16
    1480:	02030000 	andeq	r0, r3, #0
    1484:	0000fa07 	andeq	pc, r0, r7, lsl #20
    1488:	07040300 	streq	r0, [r4, -r0, lsl #6]
    148c:	00000178 	andeq	r0, r0, r8, ror r1
    1490:	73070803 	movwvc	r0, #30723	; 0x7803
    1494:	03000001 	movweq	r0, #1
    1498:	01a20704 			; <UNDEFINED> instruction: 0x01a20704
    149c:	01030000 	mrseq	r0, (UNDEF: 3)
    14a0:	0000df08 	andeq	sp, r0, r8, lsl #30
    14a4:	04480400 	strbeq	r0, [r8], #-1024	; 0x400
    14a8:	03010000 	movweq	r0, #4096	; 0x1000
    14ac:	000088c8 	andeq	r8, r0, r8, asr #17
    14b0:	00000034 	andeq	r0, r0, r4, lsr r0
    14b4:	00de9c01 	sbcseq	r9, lr, r1, lsl #24
    14b8:	26050000 	strcs	r0, [r5], -r0
    14bc:	01000004 	tsteq	r0, r4
    14c0:	00002504 	andeq	r2, r0, r4, lsl #10
    14c4:	04340500 	ldrteq	r0, [r4], #-1280	; 0x500
    14c8:	04010000 	streq	r0, [r1], #-0
    14cc:	00000025 	andeq	r0, r0, r5, lsr #32
    14d0:	0000be06 	andeq	fp, r0, r6, lsl #28
    14d4:	b1050100 	mrslt	r0, (UNDEF: 21)
    14d8:	07000000 	streq	r0, [r0, -r0]
    14dc:	73620800 	cmnvc	r2, #0, 16
    14e0:	07010073 	smlsdxeq	r1, r3, r0, r0
    14e4:	000000de 	ldrdeq	r0, [r0], -lr
    14e8:	0000091f 	andeq	r0, r0, pc, lsl r9
    14ec:	00044009 	andeq	r4, r4, r9
    14f0:	de080100 	adflee	f0, f0, f0
    14f4:	0a000000 	beq	14fc <_start-0x6b04>
    14f8:	000088f0 	strdeq	r8, [r0], -r0
    14fc:	000000fa 	strdeq	r0, [r0], -sl
    1500:	0088f40a 	addeq	pc, r8, sl, lsl #8
    1504:	00010700 	andeq	r0, r1, r0, lsl #14
    1508:	040b0000 	streq	r0, [fp], #-0
    150c:	00000025 	andeq	r0, r0, r5, lsr #32
    1510:	00042605 	andeq	r2, r4, r5, lsl #12
    1514:	25040100 	strcs	r0, [r4, #-256]	; 0x100
    1518:	05000000 	streq	r0, [r0, #-0]
    151c:	00000434 	andeq	r0, r0, r4, lsr r4
    1520:	00250401 	eoreq	r0, r5, r1, lsl #8
    1524:	be060000 	cdplt	0, 0, cr0, cr6, cr0, {0}
    1528:	01000000 	mrseq	r0, (UNDEF: 0)
    152c:	00010705 	andeq	r0, r1, r5, lsl #14
    1530:	0c000700 	stceq	7, cr0, [r0], {-0}
    1534:	0000005c 	andeq	r0, r0, ip, asr r0
    1538:	ad005c02 	stcge	12, cr5, [r0, #-8]
    153c:	04000001 	streq	r0, [r0], #-1
    1540:	0008cb00 	andeq	ip, r8, r0, lsl #22
    1544:	67010400 	strvs	r0, [r1, -r0, lsl #8]
    1548:	01000000 	mrseq	r0, (UNDEF: 0)
    154c:	0000046a 	andeq	r0, r0, sl, ror #8
    1550:	0000031c 	andeq	r0, r0, ip, lsl r3
    1554:	00000018 	andeq	r0, r0, r8, lsl r0
    1558:	00000000 	andeq	r0, r0, r0
    155c:	00000723 	andeq	r0, r0, r3, lsr #14
    1560:	69050402 	stmdbvs	r5, {r1, sl}
    1564:	0300746e 	movweq	r7, #1134	; 0x46e
    1568:	017d0704 	cmneq	sp, r4, lsl #14
    156c:	01030000 	mrseq	r0, (UNDEF: 3)
    1570:	0000d806 	andeq	sp, r0, r6, lsl #16
    1574:	05020300 	streq	r0, [r2, #-768]	; 0x300
    1578:	000001c4 	andeq	r0, r0, r4, asr #3
    157c:	b0050403 	andlt	r0, r5, r3, lsl #8
    1580:	03000001 	movweq	r0, #1
    1584:	01ab0508 			; <UNDEFINED> instruction: 0x01ab0508
    1588:	01030000 	mrseq	r0, (UNDEF: 3)
    158c:	0000d608 	andeq	sp, r0, r8, lsl #12
    1590:	07020300 	streq	r0, [r2, -r0, lsl #6]
    1594:	000000fa 	strdeq	r0, [r0], -sl
    1598:	78070403 	stmdavc	r7, {r0, r1, sl}
    159c:	03000001 	movweq	r0, #1
    15a0:	01730708 	cmneq	r3, r8, lsl #14
    15a4:	04030000 	streq	r0, [r3], #-0
    15a8:	0001a207 	andeq	sl, r1, r7, lsl #4
    15ac:	08010300 	stmdaeq	r1, {r8, r9}
    15b0:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    15b4:	00045004 	andeq	r5, r4, r4
    15b8:	250e0100 	strcs	r0, [lr, #-256]	; 0x100
    15bc:	fc000000 	stc2	0, cr0, [r0], {-0}
    15c0:	18000088 	stmdane	r0, {r3, r7}
    15c4:	01000000 	mrseq	r0, (UNDEF: 0)
    15c8:	0000a29c 	muleq	r0, ip, r2
    15cc:	04bc0500 	ldrteq	r0, [ip], #1280	; 0x500
    15d0:	0f010000 	svceq	0x00010000
    15d4:	0000002c 	andeq	r0, r0, ip, lsr #32
    15d8:	0000093f 	andeq	r0, r0, pc, lsr r9
    15dc:	049f0600 	ldreq	r0, [pc], #1536	; 15e4 <_start-0x6a1c>
    15e0:	17010000 	strne	r0, [r1, -r0]
    15e4:	00008914 	andeq	r8, r0, r4, lsl r9
    15e8:	00000014 	andeq	r0, r0, r4, lsl r0
    15ec:	00c79c01 	sbceq	r9, r7, r1, lsl #24
    15f0:	bc050000 	stclt	0, cr0, [r5], {-0}
    15f4:	01000004 	tsteq	r0, r4
    15f8:	00002c18 	andeq	r2, r0, r8, lsl ip
    15fc:	00095e00 	andeq	r5, r9, r0, lsl #28
    1600:	5c060000 	stcpl	0, cr0, [r6], {-0}
    1604:	01000000 	mrseq	r0, (UNDEF: 0)
    1608:	0089281f 	addeq	r2, r9, pc, lsl r8
    160c:	00004800 	andeq	r4, r0, r0, lsl #16
    1610:	779c0100 	ldrvc	r0, [ip, r0, lsl #2]
    1614:	07000001 	streq	r0, [r0, -r1]
    1618:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    161c:	01772a01 	cmneq	r7, r1, lsl #20
    1620:	001c0000 	andseq	r0, ip, r0
    1624:	97072010 	smladls	r7, r0, r0, r2
    1628:	01000004 	tsteq	r0, r4
    162c:	0001772b 	andeq	r7, r1, fp, lsr #14
    1630:	10002400 	andne	r2, r0, r0, lsl #8
    1634:	045e0720 	ldrbeq	r0, [lr], #-1824	; 0x720
    1638:	2c010000 	stccs	0, cr0, [r1], {-0}
    163c:	00000177 	andeq	r0, r0, r7, ror r1
    1640:	5a000000 	bpl	1648 <_start-0x69b8>
    1644:	00047e08 	andeq	r7, r4, r8, lsl #28
    1648:	772d0100 	strvc	r0, [sp, -r0, lsl #2]!
    164c:	20000001 	andcs	r0, r0, r1
    1650:	00893009 	addeq	r3, r9, r9
    1654:	00007900 	andeq	r7, r0, r0, lsl #18
    1658:	893c0900 	ldmdbhi	ip!, {r8, fp}
    165c:	00a20000 	adceq	r0, r2, r0
    1660:	440a0000 	strmi	r0, [sl], #-0
    1664:	8d000089 	stchi	0, cr0, [r0, #-548]	; 0xfffffddc
    1668:	3a000001 	bcc	1674 <_start-0x698c>
    166c:	0b000001 	bleq	1678 <_start-0x6988>
    1670:	4e015001 	cdpmi	0, 0, cr5, cr1, cr1, {0}
    1674:	89500a00 	ldmdbhi	r0, {r9, fp}^
    1678:	019e0000 	orrseq	r0, lr, r0
    167c:	015a0000 	cmpeq	sl, r0
    1680:	010b0000 	mrseq	r0, (UNDEF: 11)
    1684:	010c0551 	tsteq	ip, r1, asr r5
    1688:	0b5a0000 	bleq	1681690 <__bss_end__+0x1678018>
    168c:	0c055001 	stceq	0, cr5, [r5], {1}
    1690:	20100024 	andscs	r0, r0, r4, lsr #32
    1694:	895c0c00 	ldmdbhi	ip, {sl, fp}^
    1698:	019e0000 	orrseq	r0, lr, r0
    169c:	010b0000 	mrseq	r0, (UNDEF: 11)
    16a0:	200c0551 	andcs	r0, ip, r1, asr r5
    16a4:	0b5a0000 	bleq	16816ac <__bss_end__+0x1678034>
    16a8:	0c055001 	stceq	0, cr5, [r5], {1}
    16ac:	2010001c 	andscs	r0, r0, ip, lsl r0
    16b0:	250d0000 	strcs	r0, [sp, #-0]
    16b4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    16b8:	00000453 	andeq	r0, r0, r3, asr r4
    16bc:	01880d01 	orreq	r0, r8, r1, lsl #26
    16c0:	0d100000 	ldceq	0, cr0, [r0, #-0]
    16c4:	0000002c 	andeq	r0, r0, ip, lsr #32
    16c8:	0004090e 	andeq	r0, r4, lr, lsl #18
    16cc:	9e4d0200 	cdpls	2, 4, cr0, cr13, cr0, {0}
    16d0:	0f000001 	svceq	0x00000001
    16d4:	0000002c 	andeq	r0, r0, ip, lsr #32
    16d8:	04ae1000 	strteq	r1, [lr], #0
    16dc:	90020000 	andls	r0, r2, r0
    16e0:	00002c0f 	andeq	r2, r0, pc, lsl #24
    16e4:	002c0f00 	eoreq	r0, ip, r0, lsl #30
    16e8:	00000000 	andeq	r0, r0, r0
    16ec:	000001aa 	andeq	r0, r0, sl, lsr #3
    16f0:	09b90004 	ldmibeq	r9!, {r2}
    16f4:	01040000 	mrseq	r0, (UNDEF: 4)
    16f8:	00000067 	andeq	r0, r0, r7, rrx
    16fc:	0004cb01 	andeq	ip, r4, r1, lsl #22
    1700:	00031c00 	andeq	r1, r3, r0, lsl #24
    1704:	00897000 	addeq	r7, r9, r0
    1708:	00007c00 	andeq	r7, r0, r0, lsl #24
    170c:	0007c000 	andeq	ip, r7, r0
    1710:	05040200 	streq	r0, [r4, #-512]	; 0x200
    1714:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1718:	7d070403 	cfstrsvc	mvf0, [r7, #-12]
    171c:	03000001 	movweq	r0, #1
    1720:	00d80601 	sbcseq	r0, r8, r1, lsl #12
    1724:	02030000 	andeq	r0, r3, #0
    1728:	0001c405 	andeq	ip, r1, r5, lsl #8
    172c:	05040300 	streq	r0, [r4, #-768]	; 0x300
    1730:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    1734:	ab050803 	blge	143748 <__bss_end__+0x13a0d0>
    1738:	03000001 	movweq	r0, #1
    173c:	00d60801 	sbcseq	r0, r6, r1, lsl #16
    1740:	02030000 	andeq	r0, r3, #0
    1744:	0000fa07 	andeq	pc, r0, r7, lsl #20
    1748:	07040300 	streq	r0, [r4, -r0, lsl #6]
    174c:	00000178 	andeq	r0, r0, r8, ror r1
    1750:	73070803 	movwvc	r0, #30723	; 0x7803
    1754:	03000001 	movweq	r0, #1
    1758:	01a20704 			; <UNDEFINED> instruction: 0x01a20704
    175c:	01030000 	mrseq	r0, (UNDEF: 3)
    1760:	0000df08 	andeq	sp, r0, r8, lsl #30
    1764:	04ea0400 	strbteq	r0, [sl], #1024	; 0x400
    1768:	05010000 	streq	r0, [r1, #-0]
    176c:	00008970 	andeq	r8, r0, r0, ror r9
    1770:	0000001c 	andeq	r0, r0, ip, lsl r0
    1774:	009e9c01 	addseq	r9, lr, r1, lsl #24
    1778:	e4050000 	str	r0, [r5], #-0
    177c:	01000004 	tsteq	r0, r4
    1780:	00002c05 	andeq	r2, r0, r5, lsl #24
    1784:	00098800 	andeq	r8, r9, r0, lsl #16
    1788:	00060000 	andeq	r0, r6, r0
    178c:	01000005 	tsteq	r0, r5
    1790:	00002c0b 	andeq	r2, r0, fp, lsl #24
    1794:	00898c00 	addeq	r8, r9, r0, lsl #24
    1798:	00001400 	andeq	r1, r0, r0, lsl #8
    179c:	cb9c0100 	blgt	fe701ba4 <__bss_end__+0xfe6f852c>
    17a0:	07000000 	streq	r0, [r0, -r0]
    17a4:	00008998 	muleq	r0, r8, r9
    17a8:	0000019c 	muleq	r0, ip, r1
    17ac:	05500108 	ldrbeq	r0, [r0, #-264]	; 0x108
    17b0:	0030040c 	eorseq	r0, r0, ip, lsl #8
    17b4:	04000020 	streq	r0, [r0], #-32
    17b8:	000004f7 	strdeq	r0, [r0], -r7
    17bc:	89a00f01 	stmibhi	r0!, {r0, r8, r9, sl, fp}
    17c0:	00240000 	eoreq	r0, r4, r0
    17c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    17c8:	00000129 	andeq	r0, r0, r9, lsr #2
    17cc:	00737509 	rsbseq	r7, r3, r9, lsl #10
    17d0:	002c0f01 	eoreq	r0, ip, r1, lsl #30
    17d4:	09bc0000 	ldmibeq	ip!, {}	; <UNPREDICTABLE>
    17d8:	720a0000 	andvc	r0, sl, #0
    17dc:	10010062 	andne	r0, r1, r2, rrx
    17e0:	0000002c 	andeq	r0, r0, ip, lsr #32
    17e4:	b00b5401 	andlt	r5, fp, r1, lsl #8
    17e8:	10000089 	andne	r0, r0, r9, lsl #1
    17ec:	1f000000 	svcne	0x00000000
    17f0:	0c000001 	stceq	0, cr0, [r0], {1}
    17f4:	01006172 	tsteq	r0, r2, ror r1
    17f8:	00002c12 	andeq	r2, r0, r2, lsl ip
    17fc:	0009da00 	andeq	sp, r9, r0, lsl #20
    1800:	89b40d00 	ldmibhi	r4!, {r8, sl, fp}
    1804:	009e0000 	addseq	r0, lr, r0
    1808:	0d000000 	stceq	0, cr0, [r0, #-0]
    180c:	000089ac 	andeq	r8, r0, ip, lsr #19
    1810:	0000009e 	muleq	r0, lr, r0
    1814:	04090400 	streq	r0, [r9], #-1024	; 0x400
    1818:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    181c:	000089c4 	andeq	r8, r0, r4, asr #19
    1820:	00000014 	andeq	r0, r0, r4, lsl r0
    1824:	01629c01 	cmneq	r2, r1, lsl #24
    1828:	6d090000 	stcvs	0, cr0, [r9, #-0]
    182c:	18010073 	stmdane	r1, {r0, r1, r4, r5, r6}
    1830:	0000002c 	andeq	r0, r0, ip, lsr #32
    1834:	000009ed 	andeq	r0, r0, sp, ror #19
    1838:	0089d407 	addeq	sp, r9, r7, lsl #8
    183c:	0000cb00 	andeq	ip, r0, r0, lsl #22
    1840:	50010800 	andpl	r0, r1, r0, lsl #16
    1844:	5001f307 	andpl	pc, r1, r7, lsl #6
    1848:	1e03e80a 	cdpne	8, 0, cr14, cr3, cr10, {0}
    184c:	c1040000 	mrsgt	r0, (UNDEF: 4)
    1850:	01000004 	tsteq	r0, r4
    1854:	0089d81b 	addeq	sp, r9, fp, lsl r8
    1858:	00001400 	andeq	r1, r0, r0, lsl #8
    185c:	9c9c0100 	ldflss	f0, [ip], {0}
    1860:	09000001 	stmdbeq	r0, {r0}
    1864:	00636573 	rsbeq	r6, r3, r3, ror r5
    1868:	002c1b01 	eoreq	r1, ip, r1, lsl #22
    186c:	0a0e0000 	beq	381874 <__bss_end__+0x3781fc>
    1870:	e8070000 	stmda	r7, {}	; <UNPREDICTABLE>
    1874:	29000089 	stmdbcs	r0, {r0, r3, r7}
    1878:	08000001 	stmdaeq	r0, {r0}
    187c:	f3075001 	vhadd.u8	d5, d7, d1
    1880:	e80a5001 	stmda	sl, {r0, ip, lr}
    1884:	00001e03 	andeq	r1, r0, r3, lsl #28
    1888:	0004de0e 	andeq	sp, r4, lr, lsl #28
    188c:	2c9c0200 	lfmcs	f0, 4, [ip], {0}
    1890:	0f000000 	svceq	0x00000000
    1894:	0000002c 	andeq	r0, r0, ip, lsr #32
    1898:	03480000 	movteq	r0, #32768	; 0x8000
    189c:	00040000 	andeq	r0, r4, r0
    18a0:	00000a9c 	muleq	r0, ip, sl
    18a4:	00670104 	rsbeq	r0, r7, r4, lsl #2
    18a8:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    18ac:	1c000005 	stcne	0, cr0, [r0], {5}
    18b0:	c4000003 	strgt	r0, [r0], #-3
    18b4:	7800008c 	stmdavc	r0, {r2, r3, r7}
    18b8:	64000001 	strvs	r0, [r0], #-1
    18bc:	02000008 	andeq	r0, r0, #8
    18c0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    18c4:	0f030074 	svceq	0x00030074
    18c8:	02000005 	andeq	r0, r0, #5
    18cc:	000037d4 	ldrdeq	r3, [r0], -r4
    18d0:	07040400 	streq	r0, [r4, -r0, lsl #8]
    18d4:	0000017d 	andeq	r0, r0, sp, ror r1
    18d8:	d8060104 	stmdale	r6, {r2, r8}
    18dc:	04000000 	streq	r0, [r0], #-0
    18e0:	01c40502 	biceq	r0, r4, r2, lsl #10
    18e4:	04040000 	streq	r0, [r4], #-0
    18e8:	0001b005 	andeq	fp, r1, r5
    18ec:	05080400 	streq	r0, [r8, #-1024]	; 0x400
    18f0:	000001ab 	andeq	r0, r0, fp, lsr #3
    18f4:	d6080104 	strle	r0, [r8], -r4, lsl #2
    18f8:	04000000 	streq	r0, [r0], #-0
    18fc:	00fa0702 	rscseq	r0, sl, r2, lsl #14
    1900:	04040000 	streq	r0, [r4], #-0
    1904:	00017807 	andeq	r7, r1, r7, lsl #16
    1908:	07080400 	streq	r0, [r8, -r0, lsl #8]
    190c:	00000173 	andeq	r0, r0, r3, ror r1
    1910:	a2070404 	andge	r0, r7, #4, 8	; 0x4000000
    1914:	05000001 	streq	r0, [r0, #-1]
    1918:	85040604 	strhi	r0, [r4, #-1540]	; 0x604
    191c:	04000000 	streq	r0, [r0], #-0
    1920:	00df0801 	sbcseq	r0, pc, r1, lsl #16
    1924:	04060000 	streq	r0, [r6], #-0
    1928:	00000092 	muleq	r0, r2, r0
    192c:	00008507 	andeq	r8, r0, r7, lsl #10
    1930:	00850800 	addeq	r0, r5, r0, lsl #16
    1934:	00a70000 	adceq	r0, r7, r0
    1938:	76090000 	strvc	r0, [r9], -r0
    193c:	07000000 	streq	r0, [r0, -r0]
    1940:	010d0a00 	tsteq	sp, r0, lsl #20
    1944:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    1948:	0000007d 	andeq	r0, r0, sp, ror r0
    194c:	00008cc4 	andeq	r8, r0, r4, asr #25
    1950:	00000064 	andeq	r0, r0, r4, rrx
    1954:	015c9c01 	cmpeq	ip, r1, lsl #24
    1958:	620b0000 	andvs	r0, fp, #0
    195c:	01000005 	tsteq	r0, r5
    1960:	00003719 	andeq	r3, r0, r9, lsl r7
    1964:	000a2f00 	andeq	r2, sl, r0, lsl #30
    1968:	01420c00 	cmpeq	r2, r0, lsl #24
    196c:	015c0000 	cmpeq	ip, r0
    1970:	03050000 	movweq	r0, #20480	; 0x5000
    1974:	0000913c 	andeq	r9, r0, ip, lsr r1
    1978:	0005890d 	andeq	r8, r5, sp, lsl #18
    197c:	7d1c0100 	ldfvcs	f0, [ip, #-0]
    1980:	01000000 	mrseq	r0, (UNDEF: 0)
    1984:	055a0e54 	ldrbeq	r0, [sl, #-3668]	; 0xe54
    1988:	1d010000 	stcne	0, cr0, [r1, #-0]
    198c:	00000037 	andeq	r0, r0, r7, lsr r0
    1990:	00000a69 	andeq	r0, r0, r9, ror #20
    1994:	008cec0f 	addeq	lr, ip, pc, lsl #24
    1998:	00031300 	andeq	r1, r3, r0, lsl #6
    199c:	00012800 	andeq	r2, r1, r0, lsl #16
    19a0:	53011000 	movwpl	r1, #4096	; 0x1000
    19a4:	01104a01 	tsteq	r0, r1, lsl #20
    19a8:	3c030552 	cfstr32cc	mvfx0, [r3], {82}	; 0x52
    19ac:	10000091 	mulne	r0, r1, r0
    19b0:	03055101 	movweq	r5, #20737	; 0x5101
    19b4:	000091a4 	andeq	r9, r0, r4, lsr #3
    19b8:	05500110 	ldrbeq	r0, [r0, #-272]	; 0x110
    19bc:	00916403 	addseq	r6, r1, r3, lsl #8
    19c0:	f0110000 			; <UNDEFINED> instruction: 0xf0110000
    19c4:	2900008c 	stmdbcs	r0, {r2, r3, r7}
    19c8:	12000003 	andne	r0, r0, #3
    19cc:	00008d10 	andeq	r8, r0, r0, lsl sp
    19d0:	00000330 	andeq	r0, r0, r0, lsr r3
    19d4:	08520110 	ldmdaeq	r2, {r4, r8}^
    19d8:	235001f3 	cmpcs	r0, #-1073741764	; 0xc000003c
    19dc:	1afc0903 	bne	fff03df0 <__bss_end__+0xffefa778>
    19e0:	01510110 	cmpeq	r1, r0, lsl r1
    19e4:	50011030 	andpl	r1, r1, r0, lsr r0
    19e8:	5001f30b 	andpl	pc, r1, fp, lsl #6
    19ec:	fc090323 	stc2	3, cr0, [r9], {35}	; 0x23
    19f0:	2200741a 	andcs	r7, r0, #436207616	; 0x1a000000
    19f4:	97070000 	strls	r0, [r7, -r0]
    19f8:	0a000000 	beq	1a00 <_start-0x6600>
    19fc:	000001fe 	strdeq	r0, [r0], -lr
    1a00:	007d2601 	rsbseq	r2, sp, r1, lsl #12
    1a04:	8d280000 	stchi	0, cr0, [r8, #-0]
    1a08:	00940000 	addseq	r0, r4, r0
    1a0c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a10:	00000239 	andeq	r0, r0, r9, lsr r2
    1a14:	0005620b 	andeq	r6, r5, fp, lsl #4
    1a18:	37260100 	strcc	r0, [r6, -r0, lsl #2]!
    1a1c:	8f000000 	svchi	0x00000000
    1a20:	0b00000a 	bleq	1a50 <_start-0x65b0>
    1a24:	00000550 	andeq	r0, r0, r0, asr r5
    1a28:	00372601 	eorseq	r2, r7, r1, lsl #12
    1a2c:	0afb0000 	beq	ffec1a34 <__bss_end__+0xffeb83bc>
    1a30:	420c0000 	andmi	r0, ip, #0
    1a34:	49000001 	stmdbmi	r0, {r0}
    1a38:	05000002 	streq	r0, [r0, #-2]
    1a3c:	00914403 	addseq	r4, r1, r3, lsl #8
    1a40:	05200e00 	streq	r0, [r0, #-3584]!	; 0xe00
    1a44:	2c010000 	stccs	0, cr0, [r1], {-0}
    1a48:	00000037 	andeq	r0, r0, r7, lsr r0
    1a4c:	00000b75 	andeq	r0, r0, r5, ror fp
    1a50:	008d500f 	addeq	r5, sp, pc
    1a54:	00031300 	andeq	r1, r3, r0, lsl #6
    1a58:	0001e500 	andeq	lr, r1, r0, lsl #10
    1a5c:	53011000 	movwpl	r1, #4096	; 0x1000
    1a60:	10270802 	eorne	r0, r7, r2, lsl #16
    1a64:	03055201 	movweq	r5, #20993	; 0x5201
    1a68:	00009144 	andeq	r9, r0, r4, asr #2
    1a6c:	05510110 	ldrbeq	r0, [r1, #-272]	; 0x110
    1a70:	0091a403 	addseq	sl, r1, r3, lsl #8
    1a74:	50011000 	andpl	r1, r1, r0
    1a78:	91640305 	cmnls	r4, r5, lsl #6
    1a7c:	11000000 	mrsne	r0, (UNDEF: 0)
    1a80:	00008d54 	andeq	r8, r0, r4, asr sp
    1a84:	00000329 	andeq	r0, r0, r9, lsr #6
    1a88:	008d6011 	addeq	r6, sp, r1, lsl r0
    1a8c:	0000a700 	andeq	sl, r0, r0, lsl #14
    1a90:	8d800f00 	stchi	15, cr0, [r0]
    1a94:	03130000 	tsteq	r3, #0
    1a98:	02260000 	eoreq	r0, r6, #0
    1a9c:	01100000 	tsteq	r0, r0
    1aa0:	2b080253 	blcs	2023f4 <__bss_end__+0x1f8d7c>
    1aa4:	05520110 	ldrbeq	r0, [r2, #-272]	; 0x110
    1aa8:	00914403 	addseq	r4, r1, r3, lsl #8
    1aac:	51011000 	mrspl	r1, (UNDEF: 1)
    1ab0:	91a40305 			; <UNDEFINED> instruction: 0x91a40305
    1ab4:	01100000 	tsteq	r0, r0
    1ab8:	b8030550 	stmdalt	r3, {r4, r6, r8, sl}
    1abc:	00000091 	muleq	r0, r1, r0
    1ac0:	008d8411 	addeq	r8, sp, r1, lsl r4
    1ac4:	00032900 	andeq	r2, r3, r0, lsl #18
    1ac8:	8da41100 	stfhis	f1, [r4]
    1acc:	00a70000 	adceq	r0, r7, r0
    1ad0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1ad4:	00000085 	andeq	r0, r0, r5, lsl #1
    1ad8:	00000249 	andeq	r0, r0, r9, asr #4
    1adc:	00007609 	andeq	r7, r0, r9, lsl #12
    1ae0:	07000f00 	streq	r0, [r0, -r0, lsl #30]
    1ae4:	00000239 	andeq	r0, r0, r9, lsr r2
    1ae8:	0001e613 	andeq	lr, r1, r3, lsl r6
    1aec:	bc3b0100 	ldflts	f0, [fp], #-0
    1af0:	5800008d 	stmdapl	r0, {r0, r2, r3, r7}
    1af4:	01000000 	mrseq	r0, (UNDEF: 0)
    1af8:	0002ab9c 	muleq	r2, ip, fp
    1afc:	01420c00 	cmpeq	r2, r0, lsl #24
    1b00:	02bb0000 	adcseq	r0, fp, #0
    1b04:	03050000 	movweq	r0, #20480	; 0x5000
    1b08:	00009154 	andeq	r9, r0, r4, asr r1
    1b0c:	008de40f 	addeq	lr, sp, pc, lsl #8
    1b10:	00031300 	andeq	r1, r3, r0, lsl #6
    1b14:	0002a100 	andeq	sl, r2, r0, lsl #2
    1b18:	53011000 	movwpl	r1, #4096	; 0x1000
    1b1c:	103c0802 	eorsne	r0, ip, r2, lsl #16
    1b20:	03055201 	movweq	r5, #20993	; 0x5201
    1b24:	00009154 	andeq	r9, r0, r4, asr r1
    1b28:	05510110 	ldrbeq	r0, [r1, #-272]	; 0x110
    1b2c:	0091a403 	addseq	sl, r1, r3, lsl #8
    1b30:	50011000 	andpl	r1, r1, r0
    1b34:	92100305 	andsls	r0, r0, #335544320	; 0x14000000
    1b38:	11000000 	mrsne	r0, (UNDEF: 0)
    1b3c:	00008de8 	andeq	r8, r0, r8, ror #27
    1b40:	00000329 	andeq	r0, r0, r9, lsr #6
    1b44:	00850800 	addeq	r0, r5, r0, lsl #16
    1b48:	02bb0000 	adcseq	r0, fp, #0
    1b4c:	76090000 	strvc	r0, [r9], -r0
    1b50:	0c000000 	stceq	0, cr0, [r0], {-0}
    1b54:	02ab0700 	adceq	r0, fp, #0, 14
    1b58:	16140000 	ldrne	r0, [r4], -r0
    1b5c:	01000005 	tsteq	r0, r5
    1b60:	008e1445 	addeq	r1, lr, r5, asr #8
    1b64:	00001800 	andeq	r1, r0, r0, lsl #16
    1b68:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    1b6c:	00000569 	andeq	r0, r0, r9, ror #10
    1b70:	007d4e01 	rsbseq	r4, sp, r1, lsl #28
    1b74:	8e2c0000 	cdphi	0, 2, cr0, cr12, cr0, {0}
    1b78:	00100000 	andseq	r0, r0, r0
    1b7c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b80:	0005490d 	andeq	r4, r5, sp, lsl #18
    1b84:	25080100 	strcs	r0, [r8, #-256]	; 0x100
    1b88:	05000000 	streq	r0, [r0, #-0]
    1b8c:	00967003 	addseq	r7, r6, r3
    1b90:	05710d00 	ldrbeq	r0, [r1, #-3328]!	; 0xd00
    1b94:	0b010000 	bleq	41b9c <__bss_end__+0x38524>
    1b98:	0000007f 	andeq	r0, r0, pc, ror r0
    1b9c:	96740305 	ldrbtls	r0, [r4], -r5, lsl #6
    1ba0:	7a160000 	bvc	581ba8 <__bss_end__+0x578530>
    1ba4:	01000005 	tsteq	r0, r5
    1ba8:	00008505 	andeq	r8, r0, r5, lsl #10
    1bac:	030b1700 	movweq	r1, #46848	; 0xb700
    1bb0:	27030000 	strcs	r0, [r3, -r0]
    1bb4:	00000025 	andeq	r0, r0, r5, lsr #32
    1bb8:	00000329 	andeq	r0, r0, r9, lsr #6
    1bbc:	00008c18 	andeq	r8, r0, r8, lsl ip
    1bc0:	1a001900 	bne	7fc8 <_start-0x38>
    1bc4:	0000005c 	andeq	r0, r0, ip, asr r0
    1bc8:	311b5c03 	tstcc	fp, r3, lsl #24
    1bcc:	04000005 	streq	r0, [r0], #-5
    1bd0:	00007d1b 	andeq	r7, r0, fp, lsl sp
    1bd4:	007d1800 	rsbseq	r1, sp, r0, lsl #16
    1bd8:	25180000 	ldrcs	r0, [r8, #-0]
    1bdc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1be0:	0000002c 	andeq	r0, r0, ip, lsr #32
    1be4:	00db0000 	sbcseq	r0, fp, r0
    1be8:	00040000 	andeq	r0, r4, r0
    1bec:	00000c23 	andeq	r0, r0, r3, lsr #24
    1bf0:	00670104 	rsbeq	r0, r7, r4, lsl #2
    1bf4:	95010000 	strls	r0, [r1, #-0]
    1bf8:	1c000005 	stcne	0, cr0, [r0], {5}
    1bfc:	3c000003 	stccc	0, cr0, [r0], {3}
    1c00:	2000008e 	andcs	r0, r0, lr, lsl #1
    1c04:	d3000000 	movwle	r0, #0
    1c08:	02000009 	andeq	r0, r0, #9
    1c0c:	00d80601 	sbcseq	r0, r8, r1, lsl #12
    1c10:	01020000 	mrseq	r0, (UNDEF: 2)
    1c14:	0000d608 	andeq	sp, r0, r8, lsl #12
    1c18:	05020200 	streq	r0, [r2, #-512]	; 0x200
    1c1c:	000001c4 	andeq	r0, r0, r4, asr #3
    1c20:	fa070202 	blx	1c2430 <__bss_end__+0x1b8db8>
    1c24:	03000000 	movweq	r0, #0
    1c28:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1c2c:	04020074 	streq	r0, [r2], #-116	; 0x74
    1c30:	00017d07 	andeq	r7, r1, r7, lsl #26
    1c34:	05080200 	streq	r0, [r8, #-512]	; 0x200
    1c38:	000001ab 	andeq	r0, r0, fp, lsr #3
    1c3c:	73070802 	movwvc	r0, #30722	; 0x7802
    1c40:	02000001 	andeq	r0, r0, #1
    1c44:	01b00504 	lslseq	r0, r4, #10
    1c48:	04020000 	streq	r0, [r2], #-0
    1c4c:	0001a207 	andeq	sl, r1, r7, lsl #4
    1c50:	02040400 	andeq	r0, r4, #0, 8
    1c54:	01780704 	cmneq	r8, r4, lsl #14
    1c58:	04050000 	streq	r0, [r5], #-0
    1c5c:	0000007a 	andeq	r0, r0, sl, ror r0
    1c60:	df080102 	svcle	0x00080102
    1c64:	06000000 	streq	r0, [r0], -r0
    1c68:	0000050f 	andeq	r0, r0, pc, lsl #10
    1c6c:	0048d402 	subeq	sp, r8, r2, lsl #8
    1c70:	31070000 	mrscc	r0, (UNDEF: 7)
    1c74:	03000005 	movweq	r0, #5
    1c78:	00006b1b 	andeq	r6, r0, fp, lsl fp
    1c7c:	008e3c00 	addeq	r3, lr, r0, lsl #24
    1c80:	00002000 	andeq	r2, r0, r0
    1c84:	089c0100 	ldmeq	ip, {r8}
    1c88:	0100705f 	qaddeq	r7, pc, r0	; <UNPREDICTABLE>
    1c8c:	00006b03 	andeq	r6, r0, r3, lsl #22
    1c90:	08500100 	ldmdaeq	r0, {r8}^
    1c94:	03010063 	movweq	r0, #4195	; 0x1063
    1c98:	00000041 	andeq	r0, r0, r1, asr #32
    1c9c:	6e095101 	adfvse	f5, f1, f1
    1ca0:	81030100 	mrshi	r0, (UNDEF: 19)
    1ca4:	a2000000 	andge	r0, r0, #0
    1ca8:	0a00000b 	beq	1cdc <_start-0x6324>
    1cac:	04010070 	streq	r0, [r1], #-112	; 0x70
    1cb0:	00000074 	andeq	r0, r0, r4, ror r0
    1cb4:	00000bc3 	andeq	r0, r0, r3, asr #23
    1cb8:	0100650b 	tsteq	r0, fp, lsl #10
    1cbc:	00007404 	andeq	r7, r0, r4, lsl #8
    1cc0:	00520100 	subseq	r0, r2, r0, lsl #2
    1cc4:	0000e000 	andeq	lr, r0, r0
    1cc8:	c0000400 	andgt	r0, r0, r0, lsl #8
    1ccc:	0400000c 	streq	r0, [r0], #-12
    1cd0:	00006701 	andeq	r6, r0, r1, lsl #14
    1cd4:	05be0100 	ldreq	r0, [lr, #256]!	; 0x100
    1cd8:	031c0000 	tsteq	ip, #0
    1cdc:	8e5c0000 	cdphi	0, 5, cr0, cr12, cr0, {0}
    1ce0:	00140000 	andseq	r0, r4, r0
    1ce4:	0ac30000 	beq	ff0c1cec <__bss_end__+0xff0b8674>
    1ce8:	04020000 	streq	r0, [r2], #-0
    1cec:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    1cf0:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1cf4:	0000017d 	andeq	r0, r0, sp, ror r1
    1cf8:	d8060103 	stmdale	r6, {r0, r1, r8}
    1cfc:	03000000 	movweq	r0, #0
    1d00:	01c40502 	biceq	r0, r4, r2, lsl #10
    1d04:	04030000 	streq	r0, [r3], #-0
    1d08:	0001b005 	andeq	fp, r1, r5
    1d0c:	05080300 	streq	r0, [r8, #-768]	; 0x300
    1d10:	000001ab 	andeq	r0, r0, fp, lsr #3
    1d14:	d6080103 	strle	r0, [r8], -r3, lsl #2
    1d18:	03000000 	movweq	r0, #0
    1d1c:	00fa0702 	rscseq	r0, sl, r2, lsl #14
    1d20:	04030000 	streq	r0, [r3], #-0
    1d24:	00017807 	andeq	r7, r1, r7, lsl #16
    1d28:	07080300 	streq	r0, [r8, -r0, lsl #6]
    1d2c:	00000173 	andeq	r0, r0, r3, ror r1
    1d30:	a2070403 	andge	r0, r7, #50331648	; 0x3000000
    1d34:	03000001 	movweq	r0, #1
    1d38:	00df0801 	sbcseq	r0, pc, r1, lsl #16
    1d3c:	ad040000 	stcge	0, cr0, [r4, #-0]
    1d40:	01000005 	tsteq	r0, r5
    1d44:	00002503 	andeq	r2, r0, r3, lsl #10
    1d48:	008e5c00 	addeq	r5, lr, r0, lsl #24
    1d4c:	00001400 	andeq	r1, r0, r0, lsl #8
    1d50:	b09c0100 	addslt	r0, ip, r0, lsl #2
    1d54:	05000000 	streq	r0, [r0, #-0]
    1d58:	03010063 	movweq	r0, #4195	; 0x1063
    1d5c:	00000025 	andeq	r0, r0, r5, lsr #32
    1d60:	00000bee 	andeq	r0, r0, lr, ror #23
    1d64:	008e6806 	addeq	r6, lr, r6, lsl #16
    1d68:	0000d600 	andeq	sp, r0, r0, lsl #12
    1d6c:	50010700 	andpl	r0, r1, r0, lsl #14
    1d70:	00007402 	andeq	r7, r0, r2, lsl #8
    1d74:	00250800 	eoreq	r0, r5, r0, lsl #16
    1d78:	00bf0000 	adcseq	r0, pc, r0
    1d7c:	25090000 	strcs	r0, [r9, #-0]
    1d80:	00000000 	andeq	r0, r0, r0
    1d84:	0003840a 	andeq	r8, r3, sl, lsl #8
    1d88:	d0060100 	andle	r0, r6, r0, lsl #2
    1d8c:	05000000 	streq	r0, [r0, #-0]
    1d90:	008e8c03 	addeq	r8, lr, r3, lsl #24
    1d94:	b0040b00 	andlt	r0, r4, r0, lsl #22
    1d98:	0c000000 	stceq	0, cr0, [r0], {-0}
    1d9c:	000005a3 	andeq	r0, r0, r3, lsr #11
    1da0:	2c093a02 	stccs	10, cr3, [r9], {2}
    1da4:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <__bss_end__+0x2b6a34>
  18:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  1c:	24030000 	strcs	r0, [r3], #-0
  20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  24:	000e030b 	andeq	r0, lr, fp, lsl #6
  28:	00160400 	andseq	r0, r6, r0, lsl #8
  2c:	0b3a0e03 	bleq	e83840 <__bss_end__+0xe7a1c8>
  30:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  34:	0f050000 	svceq	0x00050000
  38:	000b0b00 	andeq	r0, fp, r0, lsl #22
  3c:	000f0600 	andeq	r0, pc, r0, lsl #12
  40:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  44:	26070000 	strcs	r0, [r7], -r0
  48:	00134900 	andseq	r4, r3, r0, lsl #18
  4c:	01010800 	tsteq	r1, r0, lsl #16
  50:	13011349 	movwne	r1, #4937	; 0x1349
  54:	21090000 	mrscs	r0, (UNDEF: 9)
  58:	2f134900 	svccs	0x00134900
  5c:	0a00000b 	beq	90 <_start-0x7f70>
  60:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
  64:	0b3a050b 	bleq	e81498 <__bss_end__+0xe77e20>
  68:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  6c:	0d0b0000 	stceq	0, cr0, [fp, #-0]
  70:	3a0e0300 	bcc	380c78 <__bss_end__+0x377600>
  74:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  78:	000b3813 	andeq	r3, fp, r3, lsl r8
  7c:	000d0c00 	andeq	r0, sp, r0, lsl #24
  80:	0b3a0803 	bleq	e82094 <__bss_end__+0xe78a1c>
  84:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  88:	00000b38 	andeq	r0, r0, r8, lsr fp
  8c:	4900210d 	stmdbmi	r0, {r0, r2, r3, r8, sp}
  90:	00052f13 	andeq	r2, r5, r3, lsl pc
  94:	012e0e00 	teqeq	lr, r0, lsl #28
  98:	0b3a0e03 	bleq	e838ac <__bss_end__+0xe7a234>
  9c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  a0:	06120111 			; <UNDEFINED> instruction: 0x06120111
  a4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  a8:	00130119 	andseq	r0, r3, r9, lsl r1
  ac:	00050f00 	andeq	r0, r5, r0, lsl #30
  b0:	0b3a0803 	bleq	e820c4 <__bss_end__+0xe78a4c>
  b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  b8:	00001702 	andeq	r1, r0, r2, lsl #14
  bc:	03003410 	movweq	r3, #1040	; 0x410
  c0:	3b0b3a08 	blcc	2ce8e8 <__bss_end__+0x2c5270>
  c4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  c8:	11000017 	tstne	r0, r7, lsl r0
  cc:	00018289 	andeq	r8, r1, r9, lsl #5
  d0:	13310111 	teqne	r1, #1073741828	; 0x40000004
  d4:	89120000 	ldmdbhi	r2, {}	; <UNPREDICTABLE>
  d8:	11010182 	smlabbne	r1, r2, r1, r0
  dc:	01133101 	tsteq	r3, r1, lsl #2
  e0:	13000013 	movwne	r0, #19
  e4:	0001828a 	andeq	r8, r1, sl, lsl #5
  e8:	42911802 	addsmi	r1, r1, #131072	; 0x20000
  ec:	14000018 	strne	r0, [r0], #-24
  f0:	01018289 	smlabbeq	r1, r9, r2, r8
  f4:	13310111 	teqne	r1, #1073741828	; 0x40000004
  f8:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
  fc:	03193f01 	tsteq	r9, #1, 30
 100:	3b0b3a0e 	blcc	2ce940 <__bss_end__+0x2c52c8>
 104:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 108:	97184006 	ldrls	r4, [r8, -r6]
 10c:	13011942 	movwne	r1, #6466	; 0x1942
 110:	34160000 	ldrcc	r0, [r6], #-0
 114:	3a080300 	bcc	200d1c <__bss_end__+0x1f76a4>
 118:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 11c:	000b1c13 	andeq	r1, fp, r3, lsl ip
 120:	00341700 	eorseq	r1, r4, r0, lsl #14
 124:	13490e03 	movtne	r0, #40451	; 0x9e03
 128:	18021934 	stmdane	r2, {r2, r4, r5, r8, fp, ip}
 12c:	0b180000 	bleq	600134 <__bss_end__+0x5f6abc>
 130:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 134:	00130106 	andseq	r0, r3, r6, lsl #2
 138:	010b1900 	tsteq	fp, r0, lsl #18
 13c:	00001755 	andeq	r1, r0, r5, asr r7
 140:	0300341a 	movweq	r3, #1050	; 0x41a
 144:	3b0b3a0e 	blcc	2ce984 <__bss_end__+0x2c530c>
 148:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 14c:	1b000018 	blne	1b4 <_start-0x7e4c>
 150:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 154:	0b3a0e03 	bleq	e83968 <__bss_end__+0xe7a2f0>
 158:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 15c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 160:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
 164:	03193f01 	tsteq	r9, #1, 30
 168:	3b0b3a0e 	blcc	2ce9a8 <__bss_end__+0x2c5330>
 16c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 170:	01193c13 	tsteq	r9, r3, lsl ip
 174:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
 178:	13490005 	movtne	r0, #36869	; 0x9005
 17c:	181e0000 	ldmdane	lr, {}	; <UNPREDICTABLE>
 180:	1f000000 	svcne	0x00000000
 184:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 188:	0b3a0e03 	bleq	e8399c <__bss_end__+0xe7a324>
 18c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 190:	1301193c 	movwne	r1, #6460	; 0x193c
 194:	15200000 	strne	r0, [r0, #-0]!
 198:	01192701 	tsteq	r9, r1, lsl #14
 19c:	21000013 	tstcs	r0, r3, lsl r0
 1a0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 1a4:	0b3a0e03 	bleq	e839b8 <__bss_end__+0xe7a340>
 1a8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1ac:	0000193c 	andeq	r1, r0, ip, lsr r9
 1b0:	01110100 	tsteq	r1, r0, lsl #2
 1b4:	0b130e25 	bleq	4c3a50 <__bss_end__+0x4ba3d8>
 1b8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 1bc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1c0:	00001710 	andeq	r1, r0, r0, lsl r7
 1c4:	0b002402 	bleq	91d4 <__FUNCTION__.4141+0x80>
 1c8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 1cc:	03000008 	movweq	r0, #8
 1d0:	0b0b0024 	bleq	2c0268 <__bss_end__+0x2b6bf0>
 1d4:	0e030b3e 	vmoveq.16	d3[0], r0
 1d8:	16040000 	strne	r0, [r4], -r0
 1dc:	3a0e0300 	bcc	380de4 <__bss_end__+0x37776c>
 1e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1e4:	05000013 	streq	r0, [r0, #-19]
 1e8:	0b0b000f 	bleq	2c022c <__bss_end__+0x2b6bb4>
 1ec:	0f060000 	svceq	0x00060000
 1f0:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 1f4:	07000013 	smladeq	r0, r3, r0, r0
 1f8:	13490026 	movtne	r0, #36902	; 0x9026
 1fc:	13080000 	movwne	r0, #32768	; 0x8000
 200:	0b0e0301 	bleq	380e0c <__bss_end__+0x377794>
 204:	3b0b3a05 	blcc	2cea20 <__bss_end__+0x2c53a8>
 208:	0013010b 	andseq	r0, r3, fp, lsl #2
 20c:	000d0900 	andeq	r0, sp, r0, lsl #18
 210:	0b3a0e03 	bleq	e83a24 <__bss_end__+0xe7a3ac>
 214:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 218:	00000b38 	andeq	r0, r0, r8, lsr fp
 21c:	03000d0a 	movweq	r0, #3338	; 0xd0a
 220:	3b0b3a08 	blcc	2cea48 <__bss_end__+0x2c53d0>
 224:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 228:	0b00000b 	bleq	25c <_start-0x7da4>
 22c:	13490101 	movtne	r0, #37121	; 0x9101
 230:	00001301 	andeq	r1, r0, r1, lsl #6
 234:	4900210c 	stmdbmi	r0, {r2, r3, r8, sp}
 238:	000b2f13 	andeq	r2, fp, r3, lsl pc
 23c:	00210d00 	eoreq	r0, r1, r0, lsl #26
 240:	052f1349 	streq	r1, [pc, #-841]!	; fffffeff <__bss_end__+0xffff6887>
 244:	130e0000 	movwne	r0, #57344	; 0xe000
 248:	0b080301 	bleq	200e54 <__bss_end__+0x1f77dc>
 24c:	3b0b3a0b 	blcc	2cea80 <__bss_end__+0x2c5408>
 250:	0013010b 	andseq	r0, r3, fp, lsl #2
 254:	00160f00 	andseq	r0, r6, r0, lsl #30
 258:	0b3a0803 	bleq	e8226c <__bss_end__+0xe78bf4>
 25c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 260:	13100000 	tstne	r0, #0
 264:	0b0e0301 	bleq	380e70 <__bss_end__+0x3777f8>
 268:	3b0b3a0b 	blcc	2cea9c <__bss_end__+0x2c5424>
 26c:	0013010b 	andseq	r0, r3, fp, lsl #2
 270:	012e1100 	teqeq	lr, r0, lsl #2
 274:	0b3a0e03 	bleq	e83a88 <__bss_end__+0xe7a410>
 278:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 27c:	01111349 	tsteq	r1, r9, asr #6
 280:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 284:	01194297 			; <UNDEFINED> instruction: 0x01194297
 288:	12000013 	andne	r0, r0, #19
 28c:	08030005 	stmdaeq	r3, {r0, r2}
 290:	0b3b0b3a 	bleq	ec2f80 <__bss_end__+0xeb9908>
 294:	17021349 	strne	r1, [r2, -r9, asr #6]
 298:	34130000 	ldrcc	r0, [r3], #-0
 29c:	490e0300 	stmdbmi	lr, {r8, r9}
 2a0:	02193413 	andseq	r3, r9, #318767104	; 0x13000000
 2a4:	14000018 	strne	r0, [r0], #-24
 2a8:	08030034 	stmdaeq	r3, {r2, r4, r5}
 2ac:	0b3b0b3a 	bleq	ec2f9c <__bss_end__+0xeb9924>
 2b0:	17021349 	strne	r1, [r2, -r9, asr #6]
 2b4:	89150000 	ldmdbhi	r5, {}	; <UNPREDICTABLE>
 2b8:	11010182 	smlabbne	r1, r2, r1, r0
 2bc:	01133101 	tsteq	r3, r1, lsl #2
 2c0:	16000013 			; <UNDEFINED> instruction: 0x16000013
 2c4:	0001828a 	andeq	r8, r1, sl, lsl #5
 2c8:	42911802 	addsmi	r1, r1, #131072	; 0x20000
 2cc:	17000018 	smladne	r0, r8, r0, r0
 2d0:	00018289 	andeq	r8, r1, r9, lsl #5
 2d4:	13310111 	teqne	r1, #1073741828	; 0x40000004
 2d8:	34180000 	ldrcc	r0, [r8], #-0
 2dc:	3a0e0300 	bcc	380ee4 <__bss_end__+0x37786c>
 2e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2e4:	00180213 	andseq	r0, r8, r3, lsl r2
 2e8:	82891900 	addhi	r1, r9, #0, 18
 2ec:	01110101 	tsteq	r1, r1, lsl #2
 2f0:	00001331 	andeq	r1, r0, r1, lsr r3
 2f4:	3f002e1a 	svccc	0x00002e1a
 2f8:	3a0e0319 	bcc	380f64 <__bss_end__+0x3778ec>
 2fc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 300:	11134919 	tstne	r3, r9, lsl r9
 304:	40061201 	andmi	r1, r6, r1, lsl #4
 308:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 30c:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
 310:	03193f01 	tsteq	r9, #1, 30
 314:	3b0b3a0e 	blcc	2ceb54 <__bss_end__+0x2c54dc>
 318:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 31c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 320:	97184006 	ldrls	r4, [r8, -r6]
 324:	13011942 	movwne	r1, #6466	; 0x1942
 328:	051c0000 	ldreq	r0, [ip, #-0]
 32c:	3a0e0300 	bcc	380f34 <__bss_end__+0x3778bc>
 330:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 334:	00170213 	andseq	r0, r7, r3, lsl r2
 338:	00341d00 	eorseq	r1, r4, r0, lsl #26
 33c:	0b3a0803 	bleq	e82350 <__bss_end__+0xe78cd8>
 340:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 344:	151e0000 	ldrne	r0, [lr, #-0]
 348:	01192701 	tsteq	r9, r1, lsl #14
 34c:	1f000013 	svcne	0x00000013
 350:	13490005 	movtne	r0, #36869	; 0x9005
 354:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
 358:	03193f01 	tsteq	r9, #1, 30
 35c:	3b0b3a0e 	blcc	2ceb9c <__bss_end__+0x2c5524>
 360:	1119270b 	tstne	r9, fp, lsl #14
 364:	40061201 	andmi	r1, r6, r1, lsl #4
 368:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 36c:	00001301 	andeq	r1, r0, r1, lsl #6
 370:	3f012e21 	svccc	0x00012e21
 374:	3a0e0319 	bcc	380fe0 <__bss_end__+0x377968>
 378:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 37c:	3c134919 	ldccc	9, cr4, [r3], {25}
 380:	00130119 	andseq	r0, r3, r9, lsl r1
 384:	00182200 	andseq	r2, r8, r0, lsl #4
 388:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
 38c:	03193f00 	tsteq	r9, #0, 30
 390:	3b0b3a0e 	blcc	2cebd0 <__bss_end__+0x2c5558>
 394:	3c19270b 	ldccc	7, cr2, [r9], {11}
 398:	24000019 	strcs	r0, [r0], #-25
 39c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 3a0:	0b3a0e03 	bleq	e83bb4 <__bss_end__+0xe7a53c>
 3a4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 3a8:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 3ac:	01000000 	mrseq	r0, (UNDEF: 0)
 3b0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 3b4:	0e030b13 	vmoveq.32	d3[0], r0
 3b8:	01110e1b 	tsteq	r1, fp, lsl lr
 3bc:	17100612 			; <UNDEFINED> instruction: 0x17100612
 3c0:	16020000 	strne	r0, [r2], -r0
 3c4:	3a0e0300 	bcc	380fcc <__bss_end__+0x377954>
 3c8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3cc:	03000013 	movweq	r0, #19
 3d0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 3d4:	0b3a0b0b 	bleq	e83008 <__bss_end__+0xe79990>
 3d8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 3dc:	0d040000 	stceq	0, cr0, [r4, #-0]
 3e0:	490e0300 	stmdbmi	lr, {r8, r9}
 3e4:	340b3813 	strcc	r3, [fp], #-2067	; 0x813
 3e8:	05000019 	streq	r0, [r0, #-25]
 3ec:	0b0b000f 	bleq	2c0430 <__bss_end__+0x2b6db8>
 3f0:	24060000 	strcs	r0, [r6], #-0
 3f4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 3f8:	0008030b 	andeq	r0, r8, fp, lsl #6
 3fc:	00240700 	eoreq	r0, r4, r0, lsl #14
 400:	0b3e0b0b 	bleq	f83034 <__bss_end__+0xf799bc>
 404:	00000e03 	andeq	r0, r0, r3, lsl #28
 408:	0b000f08 	bleq	4030 <_start-0x3fd0>
 40c:	0013490b 	andseq	r4, r3, fp, lsl #18
 410:	00260900 	eoreq	r0, r6, r0, lsl #18
 414:	00001349 	andeq	r1, r0, r9, asr #6
 418:	3f012e0a 	svccc	0x00012e0a
 41c:	3a0e0319 	bcc	381088 <__bss_end__+0x377a10>
 420:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 424:	11134919 	tstne	r3, r9, lsl r9
 428:	40061201 	andmi	r1, r6, r1, lsl #4
 42c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 430:	00001301 	andeq	r1, r0, r1, lsl #6
 434:	0300050b 	movweq	r0, #1291	; 0x50b
 438:	3b0b3a08 	blcc	2cec60 <__bss_end__+0x2c55e8>
 43c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 440:	0c000018 	stceq	0, cr0, [r0], {24}
 444:	00000018 	andeq	r0, r0, r8, lsl r0
 448:	0300340d 	movweq	r3, #1037	; 0x40d
 44c:	3b0b3a08 	blcc	2cec74 <__bss_end__+0x2c55fc>
 450:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 454:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
 458:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 45c:	0b3b0b3a 	bleq	ec314c <__bss_end__+0xeb9ad4>
 460:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 464:	340f0000 	strcc	r0, [pc], #-0	; 46c <_start-0x7b94>
 468:	3a080300 	bcc	201070 <__bss_end__+0x1f79f8>
 46c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 470:	00170213 	andseq	r0, r7, r3, lsl r2
 474:	82891000 	addhi	r1, r9, #0
 478:	01110101 	tsteq	r1, r1, lsl #2
 47c:	13011331 	movwne	r1, #4913	; 0x1331
 480:	8a110000 	bhi	440488 <__bss_end__+0x436e10>
 484:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
 488:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
 48c:	89120000 	ldmdbhi	r2, {}	; <UNPREDICTABLE>
 490:	11010182 	smlabbne	r1, r2, r1, r0
 494:	13000001 	movwne	r0, #1
 498:	13490101 	movtne	r0, #37121	; 0x9101
 49c:	00001301 	andeq	r1, r0, r1, lsl #6
 4a0:	49002114 	stmdbmi	r0, {r2, r4, r8, sp}
 4a4:	00052f13 	andeq	r2, r5, r3, lsl pc
 4a8:	01151500 	tsteq	r5, r0, lsl #10
 4ac:	13491927 	movtne	r1, #39207	; 0x9927
 4b0:	00001301 	andeq	r1, r0, r1, lsl #6
 4b4:	49000516 	stmdbmi	r0, {r1, r2, r4, r8, sl}
 4b8:	17000013 	smladne	r0, r3, r0, r0
 4bc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 4c0:	0b3b0b3a 	bleq	ec31b0 <__bss_end__+0xeb9b38>
 4c4:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 4c8:	0000193c 	andeq	r1, r0, ip, lsr r9
 4cc:	3f012e18 	svccc	0x00012e18
 4d0:	3a0e0319 	bcc	38113c <__bss_end__+0x377ac4>
 4d4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 4d8:	3c134919 	ldccc	9, cr4, [r3], {25}
 4dc:	00000019 	andeq	r0, r0, r9, lsl r0
 4e0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 4e4:	030b130e 	movweq	r1, #45838	; 0xb30e
 4e8:	110e1b0e 	tstne	lr, lr, lsl #22
 4ec:	10061201 	andne	r1, r6, r1, lsl #4
 4f0:	02000017 	andeq	r0, r0, #23
 4f4:	0b0b0024 	bleq	2c058c <__bss_end__+0x2b6f14>
 4f8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 4fc:	24030000 	strcs	r0, [r3], #-0
 500:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 504:	000e030b 	andeq	r0, lr, fp, lsl #6
 508:	000f0400 	andeq	r0, pc, r0, lsl #8
 50c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 510:	26050000 	strcs	r0, [r5], -r0
 514:	00134900 	andseq	r4, r3, r0, lsl #18
 518:	012e0600 	teqeq	lr, r0, lsl #12
 51c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 520:	0b3b0b3a 	bleq	ec3210 <__bss_end__+0xeb9b98>
 524:	13491927 	movtne	r1, #39207	; 0x9927
 528:	06120111 			; <UNDEFINED> instruction: 0x06120111
 52c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 530:	00130119 	andseq	r0, r3, r9, lsl r1
 534:	00050700 	andeq	r0, r5, r0, lsl #14
 538:	0b3a0803 	bleq	e8254c <__bss_end__+0xe78ed4>
 53c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 540:	00001702 	andeq	r1, r0, r2, lsl #14
 544:	27011508 	strcs	r1, [r1, -r8, lsl #10]
 548:	01134919 	tsteq	r3, r9, lsl r9
 54c:	09000013 	stmdbeq	r0, {r0, r1, r4}
 550:	13490005 	movtne	r0, #36869	; 0x9005
 554:	340a0000 	strcc	r0, [sl], #-0
 558:	3a0e0300 	bcc	381160 <__bss_end__+0x377ae8>
 55c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 560:	3c193f13 	ldccc	15, cr3, [r9], {19}
 564:	0b000019 	bleq	5d0 <_start-0x7a30>
 568:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 56c:	0b3b0b3a 	bleq	ec325c <__bss_end__+0xeb9be4>
 570:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 574:	00001802 	andeq	r1, r0, r2, lsl #16
 578:	01110100 	tsteq	r1, r0, lsl #2
 57c:	0b130e25 	bleq	4c3e18 <__bss_end__+0x4ba7a0>
 580:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 584:	06120111 			; <UNDEFINED> instruction: 0x06120111
 588:	00001710 	andeq	r1, r0, r0, lsl r7
 58c:	0b002402 	bleq	959c <buf.4133+0x32c>
 590:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 594:	03000008 	movweq	r0, #8
 598:	0b0b0024 	bleq	2c0630 <__bss_end__+0x2b6fb8>
 59c:	0e030b3e 	vmoveq.16	d3[0], r0
 5a0:	0f040000 	svceq	0x00040000
 5a4:	000b0b00 	andeq	r0, fp, r0, lsl #22
 5a8:	000f0500 	andeq	r0, pc, r0, lsl #10
 5ac:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 5b0:	26060000 	strcs	r0, [r6], -r0
 5b4:	00134900 	andseq	r4, r3, r0, lsl #18
 5b8:	00160700 	andseq	r0, r6, r0, lsl #14
 5bc:	0b3a0e03 	bleq	e83dd0 <__bss_end__+0xe7a758>
 5c0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 5c4:	13080000 	movwne	r0, #32768	; 0x8000
 5c8:	0b0e0301 	bleq	3811d4 <__bss_end__+0x377b5c>
 5cc:	3b0b3a0b 	blcc	2cee00 <__bss_end__+0x2c5788>
 5d0:	0013010b 	andseq	r0, r3, fp, lsl #2
 5d4:	000d0900 	andeq	r0, sp, r0, lsl #18
 5d8:	13490e03 	movtne	r0, #40451	; 0x9e03
 5dc:	19340b38 	ldmdbne	r4!, {r3, r4, r5, r8, r9, fp}
 5e0:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
 5e4:	3a0e0301 	bcc	3811f0 <__bss_end__+0x377b78>
 5e8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 5ec:	11134919 	tstne	r3, r9, lsl r9
 5f0:	40061201 	andmi	r1, r6, r1, lsl #4
 5f4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 5f8:	00001301 	andeq	r1, r0, r1, lsl #6
 5fc:	0300050b 	movweq	r0, #1291	; 0x50b
 600:	3b0b3a08 	blcc	2cee28 <__bss_end__+0x2c57b0>
 604:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 608:	0c000017 	stceq	0, cr0, [r0], {23}
 60c:	0803012e 	stmdaeq	r3, {r1, r2, r3, r5, r8}
 610:	0b3b0b3a 	bleq	ec3300 <__bss_end__+0xeb9c88>
 614:	13491927 	movtne	r1, #39207	; 0x9927
 618:	06120111 			; <UNDEFINED> instruction: 0x06120111
 61c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 620:	00130119 	andseq	r0, r3, r9, lsl r1
 624:	00050d00 	andeq	r0, r5, r0, lsl #26
 628:	0b3a0e03 	bleq	e83e3c <__bss_end__+0xe7a7c4>
 62c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 630:	00001702 	andeq	r1, r0, r2, lsl #14
 634:	0300050e 	movweq	r0, #1294	; 0x50e
 638:	3b0b3a0e 	blcc	2cee78 <__bss_end__+0x2c5800>
 63c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 640:	0f000018 	svceq	0x00000018
 644:	08030034 	stmdaeq	r3, {r2, r4, r5}
 648:	0b3b0b3a 	bleq	ec3338 <__bss_end__+0xeb9cc0>
 64c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 650:	34100000 	ldrcc	r0, [r0], #-0
 654:	3a080300 	bcc	20125c <__bss_end__+0x1f7be4>
 658:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 65c:	00170213 	andseq	r0, r7, r3, lsl r2
 660:	00341100 	eorseq	r1, r4, r0, lsl #2
 664:	13490e03 	movtne	r0, #40451	; 0x9e03
 668:	18021934 	stmdane	r2, {r2, r4, r5, r8, fp, ip}
 66c:	0b120000 	bleq	480674 <__bss_end__+0x476ffc>
 670:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 674:	00130106 	andseq	r0, r3, r6, lsl #2
 678:	00341300 	eorseq	r1, r4, r0, lsl #6
 67c:	0b3a0e03 	bleq	e83e90 <__bss_end__+0xe7a818>
 680:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 684:	00001702 	andeq	r1, r0, r2, lsl #14
 688:	01828914 	orreq	r8, r2, r4, lsl r9
 68c:	31011101 	tstcc	r1, r1, lsl #2
 690:	00130113 	andseq	r0, r3, r3, lsl r1
 694:	828a1500 	addhi	r1, sl, #0, 10
 698:	18020001 	stmdane	r2, {r0}
 69c:	00184291 	mulseq	r8, r1, r2
 6a0:	82891600 	addhi	r1, r9, #0, 12
 6a4:	01110001 	tsteq	r1, r1
 6a8:	00001331 	andeq	r1, r0, r1, lsr r3
 6ac:	01828917 	orreq	r8, r2, r7, lsl r9
 6b0:	31011101 	tstcc	r1, r1, lsl #2
 6b4:	18000013 	stmdane	r0, {r0, r1, r4}
 6b8:	13490101 	movtne	r0, #37121	; 0x9101
 6bc:	00001301 	andeq	r1, r0, r1, lsl #6
 6c0:	49002119 	stmdbmi	r0, {r0, r3, r4, r8, sp}
 6c4:	000b2f13 	andeq	r2, fp, r3, lsl pc
 6c8:	012e1a00 	teqeq	lr, r0, lsl #20
 6cc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 6d0:	0b3b0b3a 	bleq	ec33c0 <__bss_end__+0xeb9d48>
 6d4:	01111927 	tsteq	r1, r7, lsr #18
 6d8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 6dc:	01194297 			; <UNDEFINED> instruction: 0x01194297
 6e0:	1b000013 	blne	734 <_start-0x78cc>
 6e4:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 6e8:	13011349 	movwne	r1, #4937	; 0x1349
 6ec:	051c0000 	ldreq	r0, [ip, #-0]
 6f0:	00134900 	andseq	r4, r3, r0, lsl #18
 6f4:	012e1d00 	teqeq	lr, r0, lsl #26
 6f8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 6fc:	0b3b0b3a 	bleq	ec33ec <__bss_end__+0xeb9d74>
 700:	13491927 	movtne	r1, #39207	; 0x9927
 704:	06120111 			; <UNDEFINED> instruction: 0x06120111
 708:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 70c:	00130119 	andseq	r0, r3, r9, lsl r1
 710:	010b1e00 	tsteq	fp, r0, lsl #28
 714:	06120111 			; <UNDEFINED> instruction: 0x06120111
 718:	341f0000 	ldrcc	r0, [pc], #-0	; 720 <_start-0x78e0>
 71c:	3a0e0300 	bcc	381324 <__bss_end__+0x377cac>
 720:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 724:	3c193f13 	ldccc	15, cr3, [r9], {19}
 728:	20000019 	andcs	r0, r0, r9, lsl r0
 72c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 730:	0b3a0e03 	bleq	e83f44 <__bss_end__+0xe7a8cc>
 734:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 738:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 73c:	00001301 	andeq	r1, r0, r1, lsl #6
 740:	00001821 	andeq	r1, r0, r1, lsr #16
 744:	002e2200 	eoreq	r2, lr, r0, lsl #4
 748:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 74c:	0b3b0b3a 	bleq	ec343c <__bss_end__+0xeb9dc4>
 750:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 754:	01000000 	mrseq	r0, (UNDEF: 0)
 758:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 75c:	0e030b13 	vmoveq.32	d3[0], r0
 760:	01110e1b 	tsteq	r1, fp, lsl lr
 764:	17100612 			; <UNDEFINED> instruction: 0x17100612
 768:	24020000 	strcs	r0, [r2], #-0
 76c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 770:	0008030b 	andeq	r0, r8, fp, lsl #6
 774:	00240300 	eoreq	r0, r4, r0, lsl #6
 778:	0b3e0b0b 	bleq	f833ac <__bss_end__+0xf79d34>
 77c:	00000e03 	andeq	r0, r0, r3, lsl #28
 780:	0b000f04 	bleq	4398 <_start-0x3c68>
 784:	0013490b 	andseq	r4, r3, fp, lsl #18
 788:	00260500 	eoreq	r0, r6, r0, lsl #10
 78c:	00001349 	andeq	r1, r0, r9, asr #6
 790:	3f012e06 	svccc	0x00012e06
 794:	3a0e0319 	bcc	381400 <__bss_end__+0x377d88>
 798:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 79c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 7a0:	97184006 	ldrls	r4, [r8, -r6]
 7a4:	13011942 	movwne	r1, #6466	; 0x1942
 7a8:	89070000 	stmdbhi	r7, {}	; <UNPREDICTABLE>
 7ac:	11010182 	smlabbne	r1, r2, r1, r0
 7b0:	00130101 	andseq	r0, r3, r1, lsl #2
 7b4:	828a0800 	addhi	r0, sl, #0, 16
 7b8:	18020001 	stmdane	r2, {r0}
 7bc:	00184291 	mulseq	r8, r1, r2
 7c0:	82890900 	addhi	r0, r9, #0, 18
 7c4:	01110101 	tsteq	r1, r1, lsl #2
 7c8:	13011331 	movwne	r1, #4913	; 0x1331
 7cc:	890a0000 	stmdbhi	sl, {}	; <UNPREDICTABLE>
 7d0:	11000182 	smlabbne	r0, r2, r1, r0
 7d4:	00133101 	andseq	r3, r3, r1, lsl #2
 7d8:	01150b00 	tsteq	r5, r0, lsl #22
 7dc:	13491927 	movtne	r1, #39207	; 0x9927
 7e0:	00001301 	andeq	r1, r0, r1, lsl #6
 7e4:	4900050c 	stmdbmi	r0, {r2, r3, r8, sl}
 7e8:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 7ec:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 7f0:	0b3b0b3a 	bleq	ec34e0 <__bss_end__+0xeb9e68>
 7f4:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 7f8:	0000193c 	andeq	r1, r0, ip, lsr r9
 7fc:	3f012e0e 	svccc	0x00012e0e
 800:	3a0e0319 	bcc	38146c <__bss_end__+0x377df4>
 804:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 808:	01193c19 	tsteq	r9, r9, lsl ip
 80c:	0f000013 	svceq	0x00000013
 810:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 814:	0b3a0e03 	bleq	e84028 <__bss_end__+0xe7a9b0>
 818:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 81c:	0000193c 	andeq	r1, r0, ip, lsr r9
 820:	01110100 	tsteq	r1, r0, lsl #2
 824:	0b130e25 	bleq	4c40c0 <__bss_end__+0x4baa48>
 828:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 82c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 830:	00001710 	andeq	r1, r0, r0, lsl r7
 834:	0b002402 	bleq	9844 <__bss_end__+0x1cc>
 838:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 83c:	03000008 	movweq	r0, #8
 840:	0b0b0024 	bleq	2c08d8 <__bss_end__+0x2b7260>
 844:	0e030b3e 	vmoveq.16	d3[0], r0
 848:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
 84c:	03193f01 	tsteq	r9, #1, 30
 850:	3b0b3a0e 	blcc	2cf090 <__bss_end__+0x2c5a18>
 854:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 858:	97184006 	ldrls	r4, [r8, -r6]
 85c:	13011942 	movwne	r1, #6466	; 0x1942
 860:	34050000 	strcc	r0, [r5], #-0
 864:	3a0e0300 	bcc	38146c <__bss_end__+0x377df4>
 868:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 86c:	3c193f13 	ldccc	15, cr3, [r9], {19}
 870:	06000019 			; <UNDEFINED> instruction: 0x06000019
 874:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 878:	0b3a0e03 	bleq	e8408c <__bss_end__+0xe7aa14>
 87c:	193c0b3b 	ldmdbne	ip!, {r0, r1, r3, r4, r5, r8, r9, fp}
 880:	00001301 	andeq	r1, r0, r1, lsl #6
 884:	00001807 	andeq	r1, r0, r7, lsl #16
 888:	00340800 	eorseq	r0, r4, r0, lsl #16
 88c:	0b3a0803 	bleq	e828a0 <__bss_end__+0xe79228>
 890:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 894:	00001702 	andeq	r1, r0, r2, lsl #14
 898:	03003409 	movweq	r3, #1033	; 0x409
 89c:	3b0b3a0e 	blcc	2cf0dc <__bss_end__+0x2c5a64>
 8a0:	0013490b 	andseq	r4, r3, fp, lsl #18
 8a4:	82890a00 	addhi	r0, r9, #0, 20
 8a8:	01110001 	tsteq	r1, r1
 8ac:	00001331 	andeq	r1, r0, r1, lsr r3
 8b0:	0b000f0b 	bleq	44e4 <_start-0x3b1c>
 8b4:	0013490b 	andseq	r4, r3, fp, lsl #18
 8b8:	002e0c00 	eoreq	r0, lr, r0, lsl #24
 8bc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 8c0:	0b3b0b3a 	bleq	ec35b0 <__bss_end__+0xeb9f38>
 8c4:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 8c8:	01000000 	mrseq	r0, (UNDEF: 0)
 8cc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 8d0:	0e030b13 	vmoveq.32	d3[0], r0
 8d4:	17550e1b 	smmlane	r5, fp, lr, r0
 8d8:	17100111 			; <UNDEFINED> instruction: 0x17100111
 8dc:	24020000 	strcs	r0, [r2], #-0
 8e0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 8e4:	0008030b 	andeq	r0, r8, fp, lsl #6
 8e8:	00240300 	eoreq	r0, r4, r0, lsl #6
 8ec:	0b3e0b0b 	bleq	f83520 <__bss_end__+0xf79ea8>
 8f0:	00000e03 	andeq	r0, r0, r3, lsl #28
 8f4:	3f012e04 	svccc	0x00012e04
 8f8:	3a0e0319 	bcc	381564 <__bss_end__+0x377eec>
 8fc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 900:	11134919 	tstne	r3, r9, lsl r9
 904:	40061201 	andmi	r1, r6, r1, lsl #4
 908:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 90c:	00001301 	andeq	r1, r0, r1, lsl #6
 910:	03003405 	movweq	r3, #1029	; 0x405
 914:	3b0b3a0e 	blcc	2cf154 <__bss_end__+0x2c5adc>
 918:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 91c:	06000017 			; <UNDEFINED> instruction: 0x06000017
 920:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 924:	0b3a0e03 	bleq	e84138 <__bss_end__+0xe7aac0>
 928:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 92c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 930:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 934:	00130119 	andseq	r0, r3, r9, lsl r1
 938:	00340700 	eorseq	r0, r4, r0, lsl #14
 93c:	0b3a0e03 	bleq	e84150 <__bss_end__+0xe7aad8>
 940:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 944:	0000061c 	andeq	r0, r0, ip, lsl r6
 948:	03003408 	movweq	r3, #1032	; 0x408
 94c:	3b0b3a0e 	blcc	2cf18c <__bss_end__+0x2c5b14>
 950:	1c13490b 	ldcne	9, cr4, [r3], {11}
 954:	0900000b 	stmdbeq	r0, {r0, r1, r3}
 958:	00018289 	andeq	r8, r1, r9, lsl #5
 95c:	13310111 	teqne	r1, #1073741828	; 0x40000004
 960:	890a0000 	stmdbhi	sl, {}	; <UNPREDICTABLE>
 964:	11010182 	smlabbne	r1, r2, r1, r0
 968:	01133101 	tsteq	r3, r1, lsl #2
 96c:	0b000013 	bleq	9c0 <_start-0x7640>
 970:	0001828a 	andeq	r8, r1, sl, lsl #5
 974:	42911802 	addsmi	r1, r1, #131072	; 0x20000
 978:	0c000018 	stceq	0, cr0, [r0], {24}
 97c:	01018289 	smlabbeq	r1, r9, r2, r8
 980:	13310111 	teqne	r1, #1073741828	; 0x40000004
 984:	260d0000 	strcs	r0, [sp], -r0
 988:	00134900 	andseq	r4, r3, r0, lsl #18
 98c:	012e0e00 	teqeq	lr, r0, lsl #28
 990:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 994:	0b3b0b3a 	bleq	ec3684 <__bss_end__+0xeba00c>
 998:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 99c:	00001301 	andeq	r1, r0, r1, lsl #6
 9a0:	4900050f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sl}
 9a4:	10000013 	andne	r0, r0, r3, lsl r0
 9a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 9ac:	0b3a0e03 	bleq	e841c0 <__bss_end__+0xe7ab48>
 9b0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 9b4:	0000193c 	andeq	r1, r0, ip, lsr r9
 9b8:	01110100 	tsteq	r1, r0, lsl #2
 9bc:	0b130e25 	bleq	4c4258 <__bss_end__+0x4babe0>
 9c0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 9c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 9c8:	00001710 	andeq	r1, r0, r0, lsl r7
 9cc:	0b002402 	bleq	99dc <__bss_end__+0x364>
 9d0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 9d4:	03000008 	movweq	r0, #8
 9d8:	0b0b0024 	bleq	2c0a70 <__bss_end__+0x2b73f8>
 9dc:	0e030b3e 	vmoveq.16	d3[0], r0
 9e0:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
 9e4:	03193f01 	tsteq	r9, #1, 30
 9e8:	3b0b3a0e 	blcc	2cf228 <__bss_end__+0x2c5bb0>
 9ec:	1119270b 	tstne	r9, fp, lsl #14
 9f0:	40061201 	andmi	r1, r6, r1, lsl #4
 9f4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 9f8:	00001301 	andeq	r1, r0, r1, lsl #6
 9fc:	03000505 	movweq	r0, #1285	; 0x505
 a00:	3b0b3a0e 	blcc	2cf240 <__bss_end__+0x2c5bc8>
 a04:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 a08:	06000017 			; <UNDEFINED> instruction: 0x06000017
 a0c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 a10:	0b3a0e03 	bleq	e84224 <__bss_end__+0xe7abac>
 a14:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 a18:	01111349 	tsteq	r1, r9, asr #6
 a1c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 a20:	01194297 			; <UNDEFINED> instruction: 0x01194297
 a24:	07000013 	smladeq	r0, r3, r0, r0
 a28:	01018289 	smlabbeq	r1, r9, r2, r8
 a2c:	13310111 	teqne	r1, #1073741828	; 0x40000004
 a30:	8a080000 	bhi	200a38 <__bss_end__+0x1f73c0>
 a34:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
 a38:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
 a3c:	05090000 	streq	r0, [r9, #-0]
 a40:	3a080300 	bcc	201648 <__bss_end__+0x1f7fd0>
 a44:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 a48:	00170213 	andseq	r0, r7, r3, lsl r2
 a4c:	00340a00 	eorseq	r0, r4, r0, lsl #20
 a50:	0b3a0803 	bleq	e82a64 <__bss_end__+0xe793ec>
 a54:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 a58:	00001802 	andeq	r1, r0, r2, lsl #16
 a5c:	11010b0b 	tstne	r1, fp, lsl #22
 a60:	01061201 	tsteq	r6, r1, lsl #4
 a64:	0c000013 	stceq	0, cr0, [r0], {19}
 a68:	08030034 	stmdaeq	r3, {r2, r4, r5}
 a6c:	0b3b0b3a 	bleq	ec375c <__bss_end__+0xeba0e4>
 a70:	17021349 	strne	r1, [r2, -r9, asr #6]
 a74:	890d0000 	stmdbhi	sp, {}	; <UNPREDICTABLE>
 a78:	11000182 	smlabbne	r0, r2, r1, r0
 a7c:	00133101 	andseq	r3, r3, r1, lsl #2
 a80:	012e0e00 	teqeq	lr, r0, lsl #28
 a84:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 a88:	0b3b0b3a 	bleq	ec3778 <__bss_end__+0xeba100>
 a8c:	13491927 	movtne	r1, #39207	; 0x9927
 a90:	0000193c 	andeq	r1, r0, ip, lsr r9
 a94:	4900050f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sl}
 a98:	00000013 	andeq	r0, r0, r3, lsl r0
 a9c:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 aa0:	030b130e 	movweq	r1, #45838	; 0xb30e
 aa4:	110e1b0e 	tstne	lr, lr, lsl #22
 aa8:	10061201 	andne	r1, r6, r1, lsl #4
 aac:	02000017 	andeq	r0, r0, #23
 ab0:	0b0b0024 	bleq	2c0b48 <__bss_end__+0x2b74d0>
 ab4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 ab8:	16030000 	strne	r0, [r3], -r0
 abc:	3a0e0300 	bcc	3816c4 <__bss_end__+0x37804c>
 ac0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 ac4:	04000013 	streq	r0, [r0], #-19
 ac8:	0b0b0024 	bleq	2c0b60 <__bss_end__+0x2b74e8>
 acc:	0e030b3e 	vmoveq.16	d3[0], r0
 ad0:	0f050000 	svceq	0x00050000
 ad4:	000b0b00 	andeq	r0, fp, r0, lsl #22
 ad8:	000f0600 	andeq	r0, pc, r0, lsl #12
 adc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 ae0:	26070000 	strcs	r0, [r7], -r0
 ae4:	00134900 	andseq	r4, r3, r0, lsl #18
 ae8:	01010800 	tsteq	r1, r0, lsl #16
 aec:	13011349 	movwne	r1, #4937	; 0x1349
 af0:	21090000 	mrscs	r0, (UNDEF: 9)
 af4:	2f134900 	svccs	0x00134900
 af8:	0a00000b 	beq	b2c <_start-0x74d4>
 afc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 b00:	0b3a0e03 	bleq	e84314 <__bss_end__+0xe7ac9c>
 b04:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 b08:	01111349 	tsteq	r1, r9, asr #6
 b0c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 b10:	01194297 			; <UNDEFINED> instruction: 0x01194297
 b14:	0b000013 	bleq	b68 <_start-0x7498>
 b18:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 b1c:	0b3b0b3a 	bleq	ec380c <__bss_end__+0xeba194>
 b20:	17021349 	strne	r1, [r2, -r9, asr #6]
 b24:	340c0000 	strcc	r0, [ip], #-0
 b28:	490e0300 	stmdbmi	lr, {r8, r9}
 b2c:	02193413 	andseq	r3, r9, #318767104	; 0x13000000
 b30:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
 b34:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 b38:	0b3b0b3a 	bleq	ec3828 <__bss_end__+0xeba1b0>
 b3c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 b40:	340e0000 	strcc	r0, [lr], #-0
 b44:	3a0e0300 	bcc	38174c <__bss_end__+0x3780d4>
 b48:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 b4c:	00170213 	andseq	r0, r7, r3, lsl r2
 b50:	82890f00 	addhi	r0, r9, #0, 30
 b54:	01110101 	tsteq	r1, r1, lsl #2
 b58:	13011331 	movwne	r1, #4913	; 0x1331
 b5c:	8a100000 	bhi	400b64 <__bss_end__+0x3f74ec>
 b60:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
 b64:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
 b68:	89110000 	ldmdbhi	r1, {}	; <UNPREDICTABLE>
 b6c:	11000182 	smlabbne	r0, r2, r1, r0
 b70:	00133101 	andseq	r3, r3, r1, lsl #2
 b74:	82891200 	addhi	r1, r9, #0, 4
 b78:	01110101 	tsteq	r1, r1, lsl #2
 b7c:	00001331 	andeq	r1, r0, r1, lsr r3
 b80:	3f012e13 	svccc	0x00012e13
 b84:	3a0e0319 	bcc	3817f0 <__bss_end__+0x378178>
 b88:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 b8c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 b90:	97184006 	ldrls	r4, [r8, -r6]
 b94:	13011942 	movwne	r1, #6466	; 0x1942
 b98:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 b9c:	03193f00 	tsteq	r9, #0, 30
 ba0:	3b0b3a0e 	blcc	2cf3e0 <__bss_end__+0x2c5d68>
 ba4:	1119270b 	tstne	r9, fp, lsl #14
 ba8:	40061201 	andmi	r1, r6, r1, lsl #4
 bac:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 bb0:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 bb4:	03193f00 	tsteq	r9, #0, 30
 bb8:	3b0b3a0e 	blcc	2cf3f8 <__bss_end__+0x2c5d80>
 bbc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 bc0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 bc4:	97184006 	ldrls	r4, [r8, -r6]
 bc8:	00001942 	andeq	r1, r0, r2, asr #18
 bcc:	03003416 	movweq	r3, #1046	; 0x416
 bd0:	3b0b3a0e 	blcc	2cf410 <__bss_end__+0x2c5d98>
 bd4:	3f13490b 	svccc	0x0013490b
 bd8:	00193c19 	andseq	r3, r9, r9, lsl ip
 bdc:	012e1700 	teqeq	lr, r0, lsl #14
 be0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 be4:	0b3b0b3a 	bleq	ec38d4 <__bss_end__+0xeba25c>
 be8:	13491927 	movtne	r1, #39207	; 0x9927
 bec:	1301193c 	movwne	r1, #6460	; 0x193c
 bf0:	05180000 	ldreq	r0, [r8, #-0]
 bf4:	00134900 	andseq	r4, r3, r0, lsl #18
 bf8:	00181900 	andseq	r1, r8, r0, lsl #18
 bfc:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
 c00:	03193f00 	tsteq	r9, #0, 30
 c04:	3b0b3a0e 	blcc	2cf444 <__bss_end__+0x2c5dcc>
 c08:	3c19270b 	ldccc	7, cr2, [r9], {11}
 c0c:	1b000019 	blne	c78 <_start-0x7388>
 c10:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 c14:	0b3a0e03 	bleq	e84428 <__bss_end__+0xe7adb0>
 c18:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 c1c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 c20:	01000000 	mrseq	r0, (UNDEF: 0)
 c24:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 c28:	0e030b13 	vmoveq.32	d3[0], r0
 c2c:	01110e1b 	tsteq	r1, fp, lsl lr
 c30:	17100612 			; <UNDEFINED> instruction: 0x17100612
 c34:	24020000 	strcs	r0, [r2], #-0
 c38:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 c3c:	000e030b 	andeq	r0, lr, fp, lsl #6
 c40:	00240300 	eoreq	r0, r4, r0, lsl #6
 c44:	0b3e0b0b 	bleq	f83878 <__bss_end__+0xf7a200>
 c48:	00000803 	andeq	r0, r0, r3, lsl #16
 c4c:	0b000f04 	bleq	4864 <_start-0x379c>
 c50:	0500000b 	streq	r0, [r0, #-11]
 c54:	0b0b000f 	bleq	2c0c98 <__bss_end__+0x2b7620>
 c58:	00001349 	andeq	r1, r0, r9, asr #6
 c5c:	03001606 	movweq	r1, #1542	; 0x606
 c60:	3b0b3a0e 	blcc	2cf4a0 <__bss_end__+0x2c5e28>
 c64:	0013490b 	andseq	r4, r3, fp, lsl #18
 c68:	012e0700 	teqeq	lr, r0, lsl #14
 c6c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 c70:	0b3b0b3a 	bleq	ec3960 <__bss_end__+0xeba2e8>
 c74:	13491927 	movtne	r1, #39207	; 0x9927
 c78:	06120111 			; <UNDEFINED> instruction: 0x06120111
 c7c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 c80:	08000019 	stmdaeq	r0, {r0, r3, r4}
 c84:	08030005 	stmdaeq	r3, {r0, r2}
 c88:	0b3b0b3a 	bleq	ec3978 <__bss_end__+0xeba300>
 c8c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 c90:	05090000 	streq	r0, [r9, #-0]
 c94:	3a080300 	bcc	20189c <__bss_end__+0x1f8224>
 c98:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 c9c:	00170213 	andseq	r0, r7, r3, lsl r2
 ca0:	00340a00 	eorseq	r0, r4, r0, lsl #20
 ca4:	0b3a0803 	bleq	e82cb8 <__bss_end__+0xe79640>
 ca8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 cac:	00001702 	andeq	r1, r0, r2, lsl #14
 cb0:	0300340b 	movweq	r3, #1035	; 0x40b
 cb4:	3b0b3a08 	blcc	2cf4dc <__bss_end__+0x2c5e64>
 cb8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 cbc:	00000018 	andeq	r0, r0, r8, lsl r0
 cc0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 cc4:	030b130e 	movweq	r1, #45838	; 0xb30e
 cc8:	110e1b0e 	tstne	lr, lr, lsl #22
 ccc:	10061201 	andne	r1, r6, r1, lsl #4
 cd0:	02000017 	andeq	r0, r0, #23
 cd4:	0b0b0024 	bleq	2c0d6c <__bss_end__+0x2b76f4>
 cd8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 cdc:	24030000 	strcs	r0, [r3], #-0
 ce0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 ce4:	000e030b 	andeq	r0, lr, fp, lsl #6
 ce8:	012e0400 	teqeq	lr, r0, lsl #8
 cec:	0b3a0e03 	bleq	e84500 <__bss_end__+0xe7ae88>
 cf0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 cf4:	01111349 	tsteq	r1, r9, asr #6
 cf8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 cfc:	01194297 			; <UNDEFINED> instruction: 0x01194297
 d00:	05000013 	streq	r0, [r0, #-19]
 d04:	08030005 	stmdaeq	r3, {r0, r2}
 d08:	0b3b0b3a 	bleq	ec39f8 <__bss_end__+0xeba380>
 d0c:	17021349 	strne	r1, [r2, -r9, asr #6]
 d10:	89060000 	stmdbhi	r6, {}	; <UNPREDICTABLE>
 d14:	11010182 	smlabbne	r1, r2, r1, r0
 d18:	00133101 	andseq	r3, r3, r1, lsl #2
 d1c:	828a0700 	addhi	r0, sl, #0, 14
 d20:	18020001 	stmdane	r2, {r0}
 d24:	00184291 	mulseq	r8, r1, r2
 d28:	01150800 	tsteq	r5, r0, lsl #16
 d2c:	13491927 	movtne	r1, #39207	; 0x9927
 d30:	00001301 	andeq	r1, r0, r1, lsl #6
 d34:	49000509 	stmdbmi	r0, {r0, r3, r8, sl}
 d38:	0a000013 	beq	d8c <_start-0x7274>
 d3c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 d40:	0b3b0b3a 	bleq	ec3a30 <__bss_end__+0xeba3b8>
 d44:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 d48:	00001802 	andeq	r1, r0, r2, lsl #16
 d4c:	0b000f0b 	bleq	4980 <_start-0x3680>
 d50:	0013490b 	andseq	r4, r3, fp, lsl #18
 d54:	012e0c00 	teqeq	lr, r0, lsl #24
 d58:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 d5c:	0b3b0b3a 	bleq	ec3a4c <__bss_end__+0xeba3d4>
 d60:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 d64:	Address 0x0000000000000d64 is out of bounds.


Disassembly of section .debug_loc:

00000000 <.debug_loc>:
   0:	00000000 	andeq	r0, r0, r0
   4:	0000000b 	andeq	r0, r0, fp
   8:	0b500001 	bleq	1400014 <__bss_end__+0x13f699c>
   c:	50000000 	andpl	r0, r0, r0
  10:	01000000 	mrseq	r0, (UNDEF: 0)
  14:	00005400 	andeq	r5, r0, r0, lsl #8
  18:	00000000 	andeq	r0, r0, r0
  1c:	00080000 	andeq	r0, r8, r0
  20:	000b0000 	andeq	r0, fp, r0
  24:	00010000 	andeq	r0, r1, r0
  28:	00000b50 	andeq	r0, r0, r0, asr fp
  2c:	00005000 	andeq	r5, r0, r0
  30:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
  3c:	00000074 	andeq	r0, r0, r4, ror r0
  40:	00000080 	andeq	r0, r0, r0, lsl #1
  44:	9f300002 	svcls	0x00300002
  48:	00000080 	andeq	r0, r0, r0, lsl #1
  4c:	000000ac 	andeq	r0, r0, ip, lsr #1
  50:	00540001 	subseq	r0, r4, r1
  54:	00000000 	andeq	r0, r0, r0
  58:	8c000000 	stchi	0, cr0, [r0], {-0}
  5c:	94000000 	strls	r0, [r0], #-0
  60:	01000000 	mrseq	r0, (UNDEF: 0)
  64:	00945000 	addseq	r5, r4, r0
  68:	00970000 	addseq	r0, r7, r0
  6c:	00010000 	andeq	r0, r1, r0
  70:	00000051 	andeq	r0, r0, r1, asr r0
	...
  7c:	00000400 	andeq	r0, r0, r0, lsl #8
  80:	50000100 	andpl	r0, r0, r0, lsl #2
  84:	00000004 	andeq	r0, r0, r4
  88:	00000010 	andeq	r0, r0, r0, lsl r0
  8c:	01f30004 	mvnseq	r0, r4
  90:	00009f50 	andeq	r9, r0, r0, asr pc
  94:	00000000 	andeq	r0, r0, r0
  98:	00100000 	andseq	r0, r0, r0
  9c:	00200000 	eoreq	r0, r0, r0
  a0:	00010000 	andeq	r0, r1, r0
  a4:	00002050 	andeq	r2, r0, r0, asr r0
  a8:	00002c00 	andeq	r2, r0, r0, lsl #24
  ac:	53000100 	movwpl	r0, #256	; 0x100
  b0:	0000002c 	andeq	r0, r0, ip, lsr #32
  b4:	00000034 	andeq	r0, r0, r4, lsr r0
  b8:	01f30004 	mvnseq	r0, r4
  bc:	00349f50 	eorseq	r9, r4, r0, asr pc
  c0:	00380000 	eorseq	r0, r8, r0
  c4:	00010000 	andeq	r0, r1, r0
  c8:	00003850 	andeq	r3, r0, r0, asr r8
  cc:	00005c00 	andeq	r5, r0, r0, lsl #24
  d0:	53000100 	movwpl	r0, #256	; 0x100
  d4:	0000005c 	andeq	r0, r0, ip, asr r0
  d8:	00000064 	andeq	r0, r0, r4, rrx
  dc:	01f30004 	mvnseq	r0, r4
  e0:	00649f50 	rsbeq	r9, r4, r0, asr pc
  e4:	008c0000 	addeq	r0, ip, r0
  e8:	00010000 	andeq	r0, r1, r0
  ec:	00000053 	andeq	r0, r0, r3, asr r0
  f0:	00000000 	andeq	r0, r0, r0
  f4:	00003800 	andeq	r3, r0, r0, lsl #16
  f8:	00004400 	andeq	r4, r0, r0, lsl #8
  fc:	50000100 	andpl	r0, r0, r0, lsl #2
 100:	00000044 	andeq	r0, r0, r4, asr #32
 104:	0000005c 	andeq	r0, r0, ip, asr r0
 108:	00730002 	rsbseq	r0, r3, r2
 10c:	0000005c 	andeq	r0, r0, ip, asr r0
 110:	0000005f 	andeq	r0, r0, pc, asr r0
 114:	01f30003 	mvnseq	r0, r3
 118:	00006450 	andeq	r6, r0, r0, asr r4
 11c:	00008c00 	andeq	r8, r0, r0, lsl #24
 120:	50000100 	andpl	r0, r0, r0, lsl #2
	...
 12c:	00000098 	muleq	r0, r8, r0
 130:	000000a4 	andeq	r0, r0, r4, lsr #1
 134:	ac500001 	mrrcge	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
 138:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
 13c:	01000000 	mrseq	r0, (UNDEF: 0)
 140:	00005000 	andeq	r5, r0, r0
 144:	00000000 	andeq	r0, r0, r0
 148:	00c80000 	sbceq	r0, r8, r0
 14c:	00cf0000 	sbceq	r0, pc, r0
 150:	00010000 	andeq	r0, r1, r0
 154:	0000cf50 	andeq	ip, r0, r0, asr pc
 158:	0000f400 	andeq	pc, r0, r0, lsl #8
 15c:	f3000400 	vshl.u8	d0, d0, d0
 160:	009f5001 	addseq	r5, pc, r1
 164:	00000000 	andeq	r0, r0, r0
 168:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
 16c:	cf000000 	svcgt	0x00000000
 170:	01000000 	mrseq	r0, (UNDEF: 0)
 174:	00cf5100 	sbceq	r5, pc, r0, lsl #2
 178:	00f40000 	rscseq	r0, r4, r0
 17c:	00040000 	andeq	r0, r4, r0
 180:	9f5101f3 	svcls	0x005101f3
	...
 18c:	000000f4 	strdeq	r0, [r0], -r4
 190:	000000fc 	strdeq	r0, [r0], -ip
 194:	fc500001 	mrrc2	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
 198:	1c000000 	stcne	0, cr0, [r0], {-0}
 19c:	04000001 	streq	r0, [r0], #-1
 1a0:	5001f300 	andpl	pc, r1, r0, lsl #6
 1a4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 1a8:	00000000 	andeq	r0, r0, r0
 1ac:	00019000 	andeq	r9, r1, r0
 1b0:	00019800 	andeq	r9, r1, r0, lsl #16
 1b4:	50000100 	andpl	r0, r0, r0, lsl #2
 1b8:	00000198 	muleq	r0, r8, r1
 1bc:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
 1c0:	01f30004 	mvnseq	r0, r4
 1c4:	00009f50 	andeq	r9, r0, r0, asr pc
 1c8:	00000000 	andeq	r0, r0, r0
 1cc:	01b80000 			; <UNDEFINED> instruction: 0x01b80000
 1d0:	01c00000 	biceq	r0, r0, r0
 1d4:	00010000 	andeq	r0, r1, r0
 1d8:	0001c050 	andeq	ip, r1, r0, asr r0
 1dc:	0001e000 	andeq	lr, r1, r0
 1e0:	f3000400 	vshl.u8	d0, d0, d0
 1e4:	009f5001 	addseq	r5, pc, r1
 1e8:	00000000 	andeq	r0, r0, r0
 1ec:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
 1f0:	c4000001 	strgt	r0, [r0], #-1
 1f4:	01000001 	tsteq	r0, r1
 1f8:	01c45100 	biceq	r5, r4, r0, lsl #2
 1fc:	01e00000 	mvneq	r0, r0
 200:	00040000 	andeq	r0, r4, r0
 204:	9f5101f3 	svcls	0x005101f3
	...
 210:	0000002c 	andeq	r0, r0, ip, lsr #32
 214:	00000038 	andeq	r0, r0, r8, lsr r0
 218:	38500001 	ldmdacc	r0, {r0}^
 21c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
 220:	01000000 	mrseq	r0, (UNDEF: 0)
 224:	00485500 	subeq	r5, r8, r0, lsl #10
 228:	00580000 	subseq	r0, r8, r0
 22c:	00010000 	andeq	r0, r1, r0
 230:	00000050 	andeq	r0, r0, r0, asr r0
	...
 23c:	00001000 	andeq	r1, r0, r0
 240:	50000100 	andpl	r0, r0, r0, lsl #2
 244:	00000010 	andeq	r0, r0, r0, lsl r0
 248:	00000034 	andeq	r0, r0, r4, lsr r0
 24c:	00540001 	subseq	r0, r4, r1
	...
 258:	04000000 	streq	r0, [r0], #-0
 25c:	01000000 	mrseq	r0, (UNDEF: 0)
 260:	00045000 	andeq	r5, r4, r0
 264:	000c0000 	andeq	r0, ip, r0
 268:	00030000 	andeq	r0, r3, r0
 26c:	0c9f3070 	ldceq	0, cr3, [pc], {112}	; 0x70
 270:	14000000 	strne	r0, [r0], #-0
 274:	04000000 	streq	r0, [r0], #-0
 278:	5001f300 	andpl	pc, r1, r0, lsl #6
 27c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 280:	00000000 	andeq	r0, r0, r0
 284:	00001400 	andeq	r1, r0, r0, lsl #8
 288:	00002000 	andeq	r2, r0, r0
 28c:	50000100 	andpl	r0, r0, r0, lsl #2
 290:	00000020 	andeq	r0, r0, r0, lsr #32
 294:	0000002c 	andeq	r0, r0, ip, lsr #32
 298:	01700003 	cmneq	r0, r3
 29c:	00002c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
 2a0:	00004000 	andeq	r4, r0, r0
 2a4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
 2b0:	00000014 	andeq	r0, r0, r4, lsl r0
 2b4:	00000018 	andeq	r0, r0, r8, lsl r0
 2b8:	18510001 	ldmdane	r1, {r0}^
 2bc:	40000000 	andmi	r0, r0, r0
 2c0:	04000000 	streq	r0, [r0], #-0
 2c4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
 2c8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 2cc:	00000000 	andeq	r0, r0, r0
 2d0:	00004000 	andeq	r4, r0, r0
 2d4:	00006000 	andeq	r6, r0, r0
 2d8:	50000100 	andpl	r0, r0, r0, lsl #2
 2dc:	00000060 	andeq	r0, r0, r0, rrx
 2e0:	0000006c 	andeq	r0, r0, ip, rrx
 2e4:	01710003 	cmneq	r1, r3
 2e8:	00006c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
 2ec:	00007400 	andeq	r7, r0, r0, lsl #8
 2f0:	51000100 	mrspl	r0, (UNDEF: 16)
 2f4:	00000074 	andeq	r0, r0, r4, ror r0
 2f8:	00000080 	andeq	r0, r0, r0, lsl #1
 2fc:	01710003 	cmneq	r1, r3
 300:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 304:	00000000 	andeq	r0, r0, r0
 308:	00004000 	andeq	r4, r0, r0
 30c:	00005000 	andeq	r5, r0, r0
 310:	51000100 	mrspl	r0, (UNDEF: 16)
 314:	00000050 	andeq	r0, r0, r0, asr r0
 318:	00000080 	andeq	r0, r0, r0, lsl #1
 31c:	01f30004 	mvnseq	r0, r4
 320:	00009f51 	andeq	r9, r0, r1, asr pc
 324:	00000000 	andeq	r0, r0, r0
 328:	00400000 	subeq	r0, r0, r0
 32c:	00580000 	subseq	r0, r8, r0
 330:	00010000 	andeq	r0, r1, r0
 334:	00005852 	andeq	r5, r0, r2, asr r8
 338:	00006400 	andeq	r6, r0, r0, lsl #8
 33c:	52000100 	andpl	r0, r0, #0, 2
 340:	00000064 	andeq	r0, r0, r4, rrx
 344:	00000068 	andeq	r0, r0, r8, rrx
 348:	01720003 	cmneq	r2, r3
 34c:	0000689f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
 350:	00008000 	andeq	r8, r0, r0
 354:	52000100 	andpl	r0, r0, #0, 2
	...
 360:	00000040 	andeq	r0, r0, r0, asr #32
 364:	00000054 	andeq	r0, r0, r4, asr r0
 368:	54530001 	ldrbpl	r0, [r3], #-1
 36c:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
 370:	01000000 	mrseq	r0, (UNDEF: 0)
 374:	00005300 	andeq	r5, r0, r0, lsl #6
 378:	00000000 	andeq	r0, r0, r0
 37c:	00480000 	subeq	r0, r8, r0
 380:	00600000 	rsbeq	r0, r0, r0
 384:	00010000 	andeq	r0, r1, r0
 388:	0000605c 	andeq	r6, r0, ip, asr r0
 38c:	00008000 	andeq	r8, r0, r0
 390:	f3000a00 	vpmax.u8	d0, d0, d0
 394:	01f35201 	mvnseq	r5, r1, lsl #4
 398:	01231c53 	teqeq	r3, r3, asr ip
 39c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 3a0:	00000000 	andeq	r0, r0, r0
 3a4:	00008000 	andeq	r8, r0, r0
 3a8:	0000a400 	andeq	sl, r0, r0, lsl #8
 3ac:	50000100 	andpl	r0, r0, r0, lsl #2
 3b0:	000000a4 	andeq	r0, r0, r4, lsr #1
 3b4:	00000118 	andeq	r0, r0, r8, lsl r1
 3b8:	02700003 	rsbseq	r0, r0, #3
 3bc:	0001189f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
 3c0:	00021800 	andeq	r1, r2, r0, lsl #16
 3c4:	f3000400 	vshl.u8	d0, d0, d0
 3c8:	009f5001 	addseq	r5, pc, r1
 3cc:	00000000 	andeq	r0, r0, r0
 3d0:	80000000 	andhi	r0, r0, r0
 3d4:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
 3d8:	01000000 	mrseq	r0, (UNDEF: 0)
 3dc:	00f05100 	rscseq	r5, r0, r0, lsl #2
 3e0:	01600000 	cmneq	r0, r0
 3e4:	00010000 	andeq	r0, r1, r0
 3e8:	00016055 	andeq	r6, r1, r5, asr r0
 3ec:	00016800 	andeq	r6, r1, r0, lsl #16
 3f0:	51000100 	mrspl	r0, (UNDEF: 16)
 3f4:	00000168 	andeq	r0, r0, r8, ror #2
 3f8:	00000188 	andeq	r0, r0, r8, lsl #3
 3fc:	88550001 	ldmdahi	r5, {r0}^
 400:	9c000001 	stcls	0, cr0, [r0], {1}
 404:	01000001 	tsteq	r0, r1
 408:	019c5100 	orrseq	r5, ip, r0, lsl #2
 40c:	01bc0000 			; <UNDEFINED> instruction: 0x01bc0000
 410:	00010000 	andeq	r0, r1, r0
 414:	0001bc55 	andeq	fp, r1, r5, asr ip
 418:	0001c400 	andeq	ip, r1, r0, lsl #8
 41c:	51000100 	mrspl	r0, (UNDEF: 16)
 420:	000001c4 	andeq	r0, r0, r4, asr #3
 424:	000001fc 	strdeq	r0, [r0], -ip
 428:	fc550001 	mrrc2	0, 0, r0, r5, cr1
 42c:	18000001 	stmdane	r0, {r0}
 430:	04000002 	streq	r0, [r0], #-2
 434:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
 438:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 43c:	00000000 	andeq	r0, r0, r0
 440:	00008000 	andeq	r8, r0, r0
 444:	00009400 	andeq	r9, r0, r0, lsl #8
 448:	52000100 	andpl	r0, r0, #0, 2
 44c:	00000094 	muleq	r0, r4, r0
 450:	000001fc 	strdeq	r0, [r0], -ip
 454:	fc540001 	mrrc2	0, 0, r0, r4, cr1
 458:	18000001 	stmdane	r0, {r0}
 45c:	04000002 	streq	r0, [r0], #-2
 460:	5201f300 	andpl	pc, r1, #0, 6
 464:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 468:	00000000 	andeq	r0, r0, r0
 46c:	00008000 	andeq	r8, r0, r0
 470:	00010000 	andeq	r0, r1, r0
 474:	53000100 	movwpl	r0, #256	; 0x100
 478:	00000104 	andeq	r0, r0, r4, lsl #2
 47c:	00000108 	andeq	r0, r0, r8, lsl #2
 480:	60530001 	subsvs	r0, r3, r1
 484:	68000001 	stmdavs	r0, {r0}
 488:	01000001 	tsteq	r0, r1
 48c:	01685300 	cmneq	r8, r0, lsl #6
 490:	01880000 	orreq	r0, r8, r0
 494:	00040000 	andeq	r0, r4, r0
 498:	9f5301f3 	svcls	0x005301f3
 49c:	00000188 	andeq	r0, r0, r8, lsl #3
 4a0:	00000190 	muleq	r0, r0, r1
 4a4:	90530001 	subsls	r0, r3, r1
 4a8:	94000001 	strls	r0, [r0], #-1
 4ac:	01000001 	tsteq	r0, r1
 4b0:	01945c00 	orrseq	r5, r4, r0, lsl #24
 4b4:	019c0000 	orrseq	r0, ip, r0
 4b8:	00010000 	andeq	r0, r1, r0
 4bc:	00019c53 	andeq	r9, r1, r3, asr ip
 4c0:	0001bc00 	andeq	fp, r1, r0, lsl #24
 4c4:	f3000400 	vshl.u8	d0, d0, d0
 4c8:	bc9f5301 	ldclt	3, cr5, [pc], {1}
 4cc:	cc000001 	stcgt	0, cr0, [r0], {1}
 4d0:	01000001 	tsteq	r0, r1
 4d4:	01cc5300 	biceq	r5, ip, r0, lsl #6
 4d8:	01cf0000 	biceq	r0, pc, r0
 4dc:	00010000 	andeq	r0, r1, r0
 4e0:	0001cf5c 	andeq	ip, r1, ip, asr pc
 4e4:	0001d400 	andeq	sp, r1, r0, lsl #8
 4e8:	f3000400 	vshl.u8	d0, d0, d0
 4ec:	009f5301 	addseq	r5, pc, r1, lsl #6
 4f0:	00000000 	andeq	r0, r0, r0
 4f4:	80000000 	andhi	r0, r0, r0
 4f8:	9c000000 	stcls	0, cr0, [r0], {-0}
 4fc:	02000000 	andeq	r0, r0, #0
 500:	9c009100 	stflsd	f1, [r0], {-0}
 504:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
 508:	01000001 	tsteq	r0, r1
 50c:	01d45200 	bicseq	r5, r4, r0, lsl #4
 510:	01df0000 	bicseq	r0, pc, r0
 514:	00010000 	andeq	r0, r1, r0
 518:	00000052 	andeq	r0, r0, r2, asr r0
 51c:	00000000 	andeq	r0, r0, r0
 520:	00009c00 	andeq	r9, r0, r0, lsl #24
 524:	00011800 	andeq	r1, r1, r0, lsl #16
 528:	5d000100 	stfpls	f0, [r0, #-0]
 52c:	00000118 	andeq	r0, r0, r8, lsl r1
 530:	0000011c 	andeq	r0, r0, ip, lsl r1
 534:	1c530001 	mrrcne	0, 0, r0, r3, cr1
 538:	20000001 	andcs	r0, r0, r1
 53c:	01000001 	tsteq	r0, r1
 540:	01205100 	teqeq	r0, r0, lsl #2
 544:	01600000 	cmneq	r0, r0
 548:	00010000 	andeq	r0, r1, r0
 54c:	00016053 	andeq	r6, r1, r3, asr r0
 550:	00016800 	andeq	r6, r1, r0, lsl #16
 554:	5d000100 	stfpls	f0, [r0, #-0]
 558:	00000168 	andeq	r0, r0, r8, ror #2
 55c:	0000016c 	andeq	r0, r0, ip, ror #2
 560:	6c5e0001 	mrrcvs	0, 0, r0, lr, cr1
 564:	88000001 	stmdahi	r0, {r0}
 568:	01000001 	tsteq	r0, r1
 56c:	01885300 	orreq	r5, r8, r0, lsl #6
 570:	01900000 	orrseq	r0, r0, r0
 574:	00040000 	andeq	r0, r4, r0
 578:	9f7fa191 	svcls	0x007fa191
 57c:	00000190 	muleq	r0, r0, r1
 580:	00000194 	muleq	r0, r4, r1
 584:	94530001 	ldrbls	r0, [r3], #-1
 588:	9c000001 	stcls	0, cr0, [r0], {1}
 58c:	01000001 	tsteq	r0, r1
 590:	019c5d00 	orrseq	r5, ip, r0, lsl #26
 594:	01a00000 	moveq	r0, r0
 598:	00010000 	andeq	r0, r1, r0
 59c:	0001a05e 	andeq	sl, r1, lr, asr r0
 5a0:	0001bc00 	andeq	fp, r1, r0, lsl #24
 5a4:	53000100 	movwpl	r0, #256	; 0x100
 5a8:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
 5ac:	000001d4 	ldrdeq	r0, [r0], -r4
 5b0:	d45d0001 	ldrble	r0, [sp], #-1
 5b4:	df000001 	svcle	0x00000001
 5b8:	01000001 	tsteq	r0, r1
 5bc:	00005300 	andeq	r5, r0, r0, lsl #6
 5c0:	00000000 	andeq	r0, r0, r0
 5c4:	00a00000 	adceq	r0, r0, r0
 5c8:	00ec0000 	rsceq	r0, ip, r0
 5cc:	00010000 	andeq	r0, r1, r0
 5d0:	0000ec5c 	andeq	lr, r0, ip, asr ip
 5d4:	00010000 	andeq	r0, r1, r0
 5d8:	53000100 	movwpl	r0, #256	; 0x100
 5dc:	00000100 	andeq	r0, r0, r0, lsl #2
 5e0:	00000104 	andeq	r0, r0, r4, lsl #2
 5e4:	045c0001 	ldrbeq	r0, [ip], #-1
 5e8:	08000001 	stmdaeq	r0, {r0}
 5ec:	01000001 	tsteq	r0, r1
 5f0:	01085300 	mrseq	r5, (UNDEF: 56)
 5f4:	01180000 	tsteq	r8, r0
 5f8:	00010000 	andeq	r0, r1, r0
 5fc:	0001185c 	andeq	r1, r1, ip, asr r8
 600:	00011c00 	andeq	r1, r1, r0, lsl #24
 604:	50000100 	andpl	r0, r0, r0, lsl #2
 608:	0000011c 	andeq	r0, r0, ip, lsl r1
 60c:	0000013c 	andeq	r0, r0, ip, lsr r1
 610:	445c0001 	ldrbmi	r0, [ip], #-1
 614:	58000001 	stmdapl	r0, {r0}
 618:	01000001 	tsteq	r0, r1
 61c:	01585000 	cmpeq	r8, r0
 620:	01600000 	cmneq	r0, r0
 624:	00010000 	andeq	r0, r1, r0
 628:	0001605c 	andeq	r6, r1, ip, asr r0
 62c:	00016800 	andeq	r6, r1, r0, lsl #16
 630:	53000100 	movwpl	r0, #256	; 0x100
 634:	00000168 	andeq	r0, r0, r8, ror #2
 638:	00000178 	andeq	r0, r0, r8, ror r1
 63c:	785c0001 	ldmdavc	ip, {r0}^
 640:	80000001 	andhi	r0, r0, r1
 644:	05000001 	streq	r0, [r0, #-1]
 648:	34007c00 	strcc	r7, [r0], #-3072	; 0xc00
 64c:	01809f25 	orreq	r9, r0, r5, lsr #30
 650:	01880000 	orreq	r0, r8, r0
 654:	00010000 	andeq	r0, r1, r0
 658:	0001885c 	andeq	r8, r1, ip, asr r8
 65c:	00019000 	andeq	r9, r1, r0
 660:	53000100 	movwpl	r0, #256	; 0x100
 664:	00000190 	muleq	r0, r0, r1
 668:	00000194 	muleq	r0, r4, r1
 66c:	945c0001 	ldrbls	r0, [ip], #-1
 670:	9c000001 	stcls	0, cr0, [r0], {1}
 674:	01000001 	tsteq	r0, r1
 678:	019c5300 	orrseq	r5, ip, r0, lsl #6
 67c:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
 680:	00010000 	andeq	r0, r1, r0
 684:	0001ac5c 	andeq	sl, r1, ip, asr ip
 688:	0001b400 	andeq	fp, r1, r0, lsl #8
 68c:	7c000500 	cfstr32vc	mvfx0, [r0], {-0}
 690:	9f253100 	svcls	0x00253100
 694:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
 698:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
 69c:	bc5c0001 	mrrclt	0, 0, r0, ip, cr1
 6a0:	cc000001 	stcgt	0, cr0, [r0], {1}
 6a4:	01000001 	tsteq	r0, r1
 6a8:	01cc5300 	biceq	r5, ip, r0, lsl #6
 6ac:	01cf0000 	biceq	r0, pc, r0
 6b0:	00010000 	andeq	r0, r1, r0
 6b4:	0001cf5c 	andeq	ip, r1, ip, asr pc
 6b8:	0001d400 	andeq	sp, r1, r0, lsl #8
 6bc:	f3000400 	vshl.u8	d0, d0, d0
 6c0:	d49f5301 	ldrle	r5, [pc], #769	; 6c8 <_start-0x7938>
 6c4:	df000001 	svcle	0x00000001
 6c8:	01000001 	tsteq	r0, r1
 6cc:	00005c00 	andeq	r5, r0, r0, lsl #24
 6d0:	00000000 	andeq	r0, r0, r0
 6d4:	00ec0000 	rsceq	r0, ip, r0
 6d8:	00fc0000 	rscseq	r0, ip, r0
 6dc:	00020000 	andeq	r0, r2, r0
 6e0:	00fc9f30 	rscseq	r9, ip, r0, lsr pc
 6e4:	01040000 	mrseq	r0, (UNDEF: 4)
 6e8:	00020000 	andeq	r0, r2, r0
 6ec:	01049f31 	tsteq	r4, r1, lsr pc
 6f0:	01080000 	mrseq	r0, (UNDEF: 8)
 6f4:	00020000 	andeq	r0, r2, r0
 6f8:	00009f30 	andeq	r9, r0, r0, lsr pc
 6fc:	00000000 	andeq	r0, r0, r0
 700:	02180000 	andseq	r0, r8, #0
 704:	02280000 	eoreq	r0, r8, #0
 708:	00010000 	andeq	r0, r1, r0
 70c:	00022850 	andeq	r2, r2, r0, asr r8
 710:	00023c00 	andeq	r3, r2, r0, lsl #24
 714:	f3000400 	vshl.u8	d0, d0, d0
 718:	3c9f5001 	ldccc	0, cr5, [pc], {1}
 71c:	68000002 	stmdavs	r0, {r1}
 720:	01000002 	tsteq	r0, r2
 724:	00005000 	andeq	r5, r0, r0
 728:	00000000 	andeq	r0, r0, r0
 72c:	02180000 	andseq	r0, r8, #0
 730:	022c0000 	eoreq	r0, ip, #0
 734:	00010000 	andeq	r0, r1, r0
 738:	00022c51 	andeq	r2, r2, r1, asr ip
 73c:	00023c00 	andeq	r3, r2, r0, lsl #24
 740:	f3000400 	vshl.u8	d0, d0, d0
 744:	3c9f5101 	ldfccs	f5, [pc], {1}
 748:	68000002 	stmdavs	r0, {r1}
 74c:	01000002 	tsteq	r0, r2
 750:	00005100 	andeq	r5, r0, r0, lsl #2
 754:	00000000 	andeq	r0, r0, r0
 758:	02680000 	rsbeq	r0, r8, #0
 75c:	02900000 	addseq	r0, r0, #0
 760:	00010000 	andeq	r0, r1, r0
 764:	00029050 	andeq	r9, r2, r0, asr r0
 768:	0004dc00 	andeq	sp, r4, r0, lsl #24
 76c:	5b000100 	blpl	b74 <_start-0x748c>
 770:	000004dc 	ldrdeq	r0, [r0], -ip
 774:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 778:	01f30004 	mvnseq	r0, r4
 77c:	00009f50 	andeq	r9, r0, r0, asr pc
 780:	00000000 	andeq	r0, r0, r0
 784:	02680000 	rsbeq	r0, r8, #0
 788:	027c0000 	rsbseq	r0, ip, #0
 78c:	00010000 	andeq	r0, r1, r0
 790:	00027c51 	andeq	r7, r2, r1, asr ip
 794:	00029000 	andeq	r9, r2, r0
 798:	71000300 	mrsvc	r0, LR_irq
 79c:	02909f01 	addseq	r9, r0, #1, 30
 7a0:	04f00000 	ldrbteq	r0, [r0], #0
 7a4:	00040000 	andeq	r0, r4, r0
 7a8:	9f5101f3 	svcls	0x005101f3
	...
 7b4:	00000268 	andeq	r0, r0, r8, ror #4
 7b8:	00000298 	muleq	r0, r8, r2
 7bc:	98520001 	ldmdals	r2, {r0}^
 7c0:	c0000002 	andgt	r0, r0, r2
 7c4:	01000002 	tsteq	r0, r2
 7c8:	02c05200 	sbceq	r5, r0, #0, 4
 7cc:	048c0000 	streq	r0, [ip], #0
 7d0:	00010000 	andeq	r0, r1, r0
 7d4:	00048c56 	andeq	r8, r4, r6, asr ip
 7d8:	0004f000 	andeq	pc, r4, r0
 7dc:	52000100 	andpl	r0, r0, #0, 2
	...
 7e8:	00000268 	andeq	r0, r0, r8, ror #4
 7ec:	00000284 	andeq	r0, r0, r4, lsl #5
 7f0:	00530001 	subseq	r0, r3, r1
 7f4:	00000000 	andeq	r0, r0, r0
 7f8:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
 7fc:	90000002 	andls	r0, r0, r2
 800:	01000002 	tsteq	r0, r2
 804:	02905000 	addseq	r5, r0, #0
 808:	02940000 	addseq	r0, r4, #0
 80c:	00010000 	andeq	r0, r1, r0
 810:	00029454 	andeq	r9, r2, r4, asr r4
 814:	0002a000 	andeq	sl, r2, r0
 818:	74000300 	strvc	r0, [r0], #-768	; 0x300
 81c:	02a09f01 	adceq	r9, r0, #1, 30
 820:	02ac0000 	adceq	r0, ip, #0
 824:	00010000 	andeq	r0, r1, r0
 828:	0002ac54 	andeq	sl, r2, r4, asr ip
 82c:	0002b800 	andeq	fp, r2, r0, lsl #16
 830:	74000300 	strvc	r0, [r0], #-768	; 0x300
 834:	02b89f01 	adcseq	r9, r8, #1, 30
 838:	04900000 	ldreq	r0, [r0], #0
 83c:	00010000 	andeq	r0, r1, r0
 840:	00049054 	andeq	r9, r4, r4, asr r0
 844:	00049c00 	andeq	r9, r4, r0, lsl #24
 848:	74000300 	strvc	r0, [r0], #-768	; 0x300
 84c:	049c9f01 	ldreq	r9, [ip], #3841	; 0xf01
 850:	04c80000 	strbeq	r0, [r8], #0
 854:	00010000 	andeq	r0, r1, r0
 858:	0004c854 	andeq	ip, r4, r4, asr r8
 85c:	0004d400 	andeq	sp, r4, r0, lsl #8
 860:	50000100 	andpl	r0, r0, r0, lsl #2
 864:	000004d4 	ldrdeq	r0, [r0], -r4
 868:	000004dc 	ldrdeq	r0, [r0], -ip
 86c:	01740003 	cmneq	r4, r3
 870:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 874:	00000000 	andeq	r0, r0, r0
 878:	00028000 	andeq	r8, r2, r0
 87c:	0004dc00 	andeq	sp, r4, r0, lsl #24
 880:	58000100 	stmdapl	r0, {r8}
 884:	000004dc 	ldrdeq	r0, [r0], -ip
 888:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 88c:	01f3000a 	mvnseq	r0, sl
 890:	5001f351 	andpl	pc, r1, r1, asr r3	; <UNPREDICTABLE>
 894:	9f1c3122 	svcls	0x001c3122
	...
 8a0:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 8a4:	000003c0 	andeq	r0, r0, r0, asr #7
 8a8:	e4500001 	ldrb	r0, [r0], #-1
 8ac:	e8000003 	stmda	r0, {r0, r1}
 8b0:	01000003 	tsteq	r0, r3
 8b4:	040c5000 	streq	r5, [ip], #-0
 8b8:	04100000 	ldreq	r0, [r0], #-0
 8bc:	00010000 	andeq	r0, r1, r0
 8c0:	00043450 	andeq	r3, r4, r0, asr r4
 8c4:	00043800 	andeq	r3, r4, r0, lsl #16
 8c8:	50000100 	andpl	r0, r0, r0, lsl #2
 8cc:	00000440 	andeq	r0, r0, r0, asr #8
 8d0:	00000444 	andeq	r0, r0, r4, asr #8
 8d4:	68500001 	ldmdavs	r0, {r0}^
 8d8:	6c000004 	stcvs	0, cr0, [r0], {4}
 8dc:	01000004 	tsteq	r0, r4
 8e0:	04885000 	streq	r5, [r8], #0
 8e4:	04b00000 	ldrteq	r0, [r0], #0
 8e8:	00010000 	andeq	r0, r1, r0
 8ec:	00000050 	andeq	r0, r0, r0, asr r0
 8f0:	00000000 	andeq	r0, r0, r0
 8f4:	0002c000 	andeq	ip, r2, r0
 8f8:	0002c800 	andeq	ip, r2, r0, lsl #16
 8fc:	30000200 	andcc	r0, r0, r0, lsl #4
 900:	0002c89f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
 904:	0002cc00 	andeq	ip, r2, r0, lsl #24
 908:	57000100 	strpl	r0, [r0, -r0, lsl #2]
 90c:	000002d8 	ldrdeq	r0, [r0], -r8
 910:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
 914:	00570001 	subseq	r0, r7, r1
 918:	00000000 	andeq	r0, r0, r0
 91c:	14000000 	strne	r0, [r0], #-0
 920:	1c000000 	stcne	0, cr0, [r0], {-0}
 924:	03000000 	movweq	r0, #0
 928:	9f047300 	svcls	0x00047300
 92c:	0000001c 	andeq	r0, r0, ip, lsl r0
 930:	00000027 	andeq	r0, r0, r7, lsr #32
 934:	00530001 	subseq	r0, r3, r1
 938:	00000000 	andeq	r0, r0, r0
 93c:	fc000000 	stc2	0, cr0, [r0], {-0}
 940:	00000088 	andeq	r0, r0, r8, lsl #1
 944:	02000089 	andeq	r0, r0, #137	; 0x89
 948:	009f3000 	addseq	r3, pc, r0
 94c:	04000089 	streq	r0, [r0], #-137	; 0x89
 950:	01000089 	smlabbeq	r0, r9, r0, r0
 954:	00005000 	andeq	r5, r0, r0
 958:	00000000 	andeq	r0, r0, r0
 95c:	89140000 	ldmdbhi	r4, {}	; <UNPREDICTABLE>
 960:	89180000 	ldmdbhi	r8, {}	; <UNPREDICTABLE>
 964:	00020000 	andeq	r0, r2, r0
 968:	89189f30 	ldmdbhi	r8, {r4, r5, r8, r9, sl, fp, ip, pc}
 96c:	891c0000 	ldmdbhi	ip, {}	; <UNPREDICTABLE>
 970:	00010000 	andeq	r0, r1, r0
 974:	00892053 	addeq	r2, r9, r3, asr r0
 978:	00892800 	addeq	r2, r9, r0, lsl #16
 97c:	53000100 	movwpl	r0, #256	; 0x100
	...
 98c:	00000004 	andeq	r0, r0, r4
 990:	04500001 	ldrbeq	r0, [r0], #-1
 994:	0c000000 	stceq	0, cr0, [r0], {-0}
 998:	01000000 	mrseq	r0, (UNDEF: 0)
 99c:	000c5300 	andeq	r5, ip, r0, lsl #6
 9a0:	00100000 	andseq	r0, r0, r0
 9a4:	00010000 	andeq	r0, r1, r0
 9a8:	00001050 	andeq	r1, r0, r0, asr r0
 9ac:	00001c00 	andeq	r1, r0, r0, lsl #24
 9b0:	53000100 	movwpl	r0, #256	; 0x100
	...
 9bc:	00000030 	andeq	r0, r0, r0, lsr r0
 9c0:	0000003b 	andeq	r0, r0, fp, lsr r0
 9c4:	3b500001 	blcc	14009d0 <__bss_end__+0x13f7358>
 9c8:	54000000 	strpl	r0, [r0], #-0
 9cc:	01000000 	mrseq	r0, (UNDEF: 0)
 9d0:	00005500 	andeq	r5, r0, r0, lsl #10
 9d4:	00000000 	andeq	r0, r0, r0
 9d8:	00440000 	subeq	r0, r4, r0
 9dc:	00480000 	subeq	r0, r8, r0
 9e0:	00010000 	andeq	r0, r1, r0
 9e4:	00000050 	andeq	r0, r0, r0, asr r0
 9e8:	00000000 	andeq	r0, r0, r0
 9ec:	00005400 	andeq	r5, r0, r0, lsl #8
 9f0:	00006000 	andeq	r6, r0, r0
 9f4:	50000100 	andpl	r0, r0, r0, lsl #2
 9f8:	00000060 	andeq	r0, r0, r0, rrx
 9fc:	00000068 	andeq	r0, r0, r8, rrx
 a00:	01f30004 	mvnseq	r0, r4
 a04:	00009f50 	andeq	r9, r0, r0, asr pc
 a08:	00000000 	andeq	r0, r0, r0
 a0c:	00680000 	rsbeq	r0, r8, r0
 a10:	00740000 	rsbseq	r0, r4, r0
 a14:	00010000 	andeq	r0, r1, r0
 a18:	00007450 	andeq	r7, r0, r0, asr r4
 a1c:	00007c00 	andeq	r7, r0, r0, lsl #24
 a20:	f3000400 	vshl.u8	d0, d0, d0
 a24:	009f5001 	addseq	r5, pc, r1
	...
 a30:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 a34:	01000000 	mrseq	r0, (UNDEF: 0)
 a38:	00185000 	andseq	r5, r8, r0
 a3c:	002c0000 	eoreq	r0, ip, r0
 a40:	00040000 	andeq	r0, r4, r0
 a44:	9f5001f3 	svcls	0x005001f3
 a48:	0000002c 	andeq	r0, r0, ip, lsr #32
 a4c:	00000040 	andeq	r0, r0, r0, asr #32
 a50:	40500001 	subsmi	r0, r0, r1
 a54:	64000000 	strvs	r0, [r0], #-0
 a58:	04000000 	streq	r0, [r0], #-0
 a5c:	5001f300 	andpl	pc, r1, r0, lsl #6
 a60:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 a64:	00000000 	andeq	r0, r0, r0
 a68:	00003c00 	andeq	r3, r0, r0, lsl #24
 a6c:	00004b00 	andeq	r4, r0, r0, lsl #22
 a70:	52000100 	andpl	r0, r0, #0, 2
 a74:	0000004b 	andeq	r0, r0, fp, asr #32
 a78:	00000064 	andeq	r0, r0, r4, rrx
 a7c:	01f30009 	mvnseq	r0, r9
 a80:	09032350 	stmdbeq	r3, {r4, r6, r8, r9, sp}
 a84:	009f1afc 			; <UNDEFINED> instruction: 0x009f1afc
 a88:	00000000 	andeq	r0, r0, r0
 a8c:	64000000 	strvs	r0, [r0], #-0
 a90:	7c000000 	stcvc	0, cr0, [r0], {-0}
 a94:	01000000 	mrseq	r0, (UNDEF: 0)
 a98:	007c5000 	rsbseq	r5, ip, r0
 a9c:	00900000 	addseq	r0, r0, r0
 aa0:	00040000 	andeq	r0, r4, r0
 aa4:	9f5001f3 	svcls	0x005001f3
 aa8:	00000090 	muleq	r0, r0, r0
 aac:	0000009b 	muleq	r0, fp, r0
 ab0:	9b500001 	blls	1400abc <__bss_end__+0x13f7444>
 ab4:	a0000000 	andge	r0, r0, r0
 ab8:	04000000 	streq	r0, [r0], #-0
 abc:	5001f300 	andpl	pc, r1, r0, lsl #6
 ac0:	0000a09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 ac4:	0000ac00 	andeq	sl, r0, r0, lsl #24
 ac8:	50000100 	andpl	r0, r0, r0, lsl #2
 acc:	000000ac 	andeq	r0, r0, ip, lsr #1
 ad0:	000000c0 	andeq	r0, r0, r0, asr #1
 ad4:	01f30004 	mvnseq	r0, r4
 ad8:	00c09f50 	sbceq	r9, r0, r0, asr pc
 adc:	00df0000 	sbcseq	r0, pc, r0
 ae0:	00010000 	andeq	r0, r1, r0
 ae4:	0000df50 	andeq	sp, r0, r0, asr pc
 ae8:	0000f800 	andeq	pc, r0, r0, lsl #16
 aec:	f3000400 	vshl.u8	d0, d0, d0
 af0:	009f5001 	addseq	r5, pc, r1
 af4:	00000000 	andeq	r0, r0, r0
 af8:	64000000 	strvs	r0, [r0], #-0
 afc:	80000000 	andhi	r0, r0, r0
 b00:	01000000 	mrseq	r0, (UNDEF: 0)
 b04:	00805100 	addeq	r5, r0, r0, lsl #2
 b08:	00900000 	addseq	r0, r0, r0
 b0c:	00040000 	andeq	r0, r4, r0
 b10:	9f5101f3 	svcls	0x005101f3
 b14:	00000090 	muleq	r0, r0, r0
 b18:	0000009b 	muleq	r0, fp, r0
 b1c:	9b510001 	blls	1440b28 <__bss_end__+0x14374b0>
 b20:	a0000000 	andge	r0, r0, r0
 b24:	04000000 	streq	r0, [r0], #-0
 b28:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
 b2c:	0000a09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 b30:	0000b000 	andeq	fp, r0, r0
 b34:	51000100 	mrspl	r0, (UNDEF: 16)
 b38:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 b3c:	000000c0 	andeq	r0, r0, r0, asr #1
 b40:	01f30004 	mvnseq	r0, r4
 b44:	00c09f51 	sbceq	r9, r0, r1, asr pc
 b48:	00d40000 	sbcseq	r0, r4, r0
 b4c:	00010000 	andeq	r0, r1, r0
 b50:	0000d451 	andeq	sp, r0, r1, asr r4
 b54:	0000d800 	andeq	sp, r0, r0, lsl #16
 b58:	71000400 	tstvc	r0, r0, lsl #8
 b5c:	d89f1f00 	ldmle	pc, {r8, r9, sl, fp, ip}	; <UNPREDICTABLE>
 b60:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
 b64:	04000000 	streq	r0, [r0], #-0
 b68:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
 b6c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 b70:	00000000 	andeq	r0, r0, r0
 b74:	0000c800 	andeq	ip, r0, r0, lsl #16
 b78:	0000cc00 	andeq	ip, r0, r0, lsl #24
 b7c:	52000100 	andpl	r0, r0, #0, 2
 b80:	000000cc 	andeq	r0, r0, ip, asr #1
 b84:	000000d8 	ldrdeq	r0, [r0], -r8
 b88:	74030005 	strvc	r0, [r3], #-5
 b8c:	d8000096 	stmdale	r0, {r1, r2, r4, r7}
 b90:	df000000 	svcle	0x00000000
 b94:	01000000 	mrseq	r0, (UNDEF: 0)
 b98:	00005100 	andeq	r5, r0, r0, lsl #2
	...
 ba4:	00040000 	andeq	r0, r4, r0
 ba8:	00010000 	andeq	r0, r1, r0
 bac:	00000452 	andeq	r0, r0, r2, asr r4
 bb0:	00002000 	andeq	r2, r0, r0
 bb4:	f3000400 	vshl.u8	d0, d0, d0
 bb8:	009f5201 	addseq	r5, pc, r1, lsl #4
	...
 bc4:	0c000000 	stceq	0, cr0, [r0], {-0}
 bc8:	01000000 	mrseq	r0, (UNDEF: 0)
 bcc:	000c5000 	andeq	r5, ip, r0
 bd0:	00140000 	andseq	r0, r4, r0
 bd4:	00030000 	andeq	r0, r3, r0
 bd8:	149f0173 	ldrne	r0, [pc], #371	; be0 <_start-0x7420>
 bdc:	20000000 	andcs	r0, r0, r0
 be0:	01000000 	mrseq	r0, (UNDEF: 0)
 be4:	00005300 	andeq	r5, r0, r0, lsl #6
	...
 bf0:	000b0000 	andeq	r0, fp, r0
 bf4:	00010000 	andeq	r0, r1, r0
 bf8:	00000b50 	andeq	r0, r0, r0, asr fp
 bfc:	00001400 	andeq	r1, r0, r0, lsl #8
 c00:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	00008010 	andeq	r8, r0, r0, lsl r0
  14:	00000100 	andeq	r0, r0, r0, lsl #2
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	034c0002 	movteq	r0, #49154	; 0xc002
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	00008110 	andeq	r8, r0, r0, lsl r1
  34:	00000208 	andeq	r0, r0, r8, lsl #4
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	0a4a0002 	beq	1280054 <__bss_end__+0x12769dc>
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	00008324 	andeq	r8, r0, r4, lsr #6
  54:	00000058 	andeq	r0, r0, r8, asr r0
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	0bdf0002 	bleq	ff7c0074 <__bss_end__+0xff7b69fc>
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	0000837c 	andeq	r8, r0, ip, ror r3
  74:	00000034 	andeq	r0, r0, r4, lsr r0
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	0cd10002 	ldcleq	0, cr0, [r1], {2}
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	000083b0 			; <UNDEFINED> instruction: 0x000083b0
  94:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	13290002 	teqne	r9, #2
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	000088a0 	andeq	r8, r0, r0, lsr #17
  b4:	00000028 	andeq	r0, r0, r8, lsr #32
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	142c0002 	strtne	r0, [ip], #-2
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	000088c8 	andeq	r8, r0, r8, asr #17
  d4:	00000034 	andeq	r0, r0, r4, lsr r0
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	153b0002 	ldrne	r0, [fp, #-2]!
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	000088fc 	strdeq	r8, [r0], -ip
  f4:	00000074 	andeq	r0, r0, r4, ror r0
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	16ec0002 	strbtne	r0, [ip], r2
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	00008970 	andeq	r8, r0, r0, ror r9
 114:	0000007c 	andeq	r0, r0, ip, ror r0
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	189a0002 	ldmne	sl, {r1}
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	00008cc4 	andeq	r8, r0, r4, asr #25
 134:	00000178 	andeq	r0, r0, r8, ror r1
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	1be60002 	blne	ff980154 <__bss_end__+0xff976adc>
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	00008e3c 	andeq	r8, r0, ip, lsr lr
 154:	00000020 	andeq	r0, r0, r0, lsr #32
	...
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	1cc50002 	stclne	0, cr0, [r5], {2}
 168:	00040000 	andeq	r0, r4, r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	00008e5c 	andeq	r8, r0, ip, asr lr
 174:	00000014 	andeq	r0, r0, r4, lsl r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	00000074 	andeq	r0, r0, r4, ror r0
   4:	0000007c 	andeq	r0, r0, ip, ror r0
   8:	00000080 	andeq	r0, r0, r0, lsl #1
   c:	00000098 	muleq	r0, r8, r0
	...
  18:	000088fc 	strdeq	r8, [r0], -ip
  1c:	00008970 	andeq	r8, r0, r0, ror r9
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000129 	andeq	r0, r0, r9, lsr #2
   4:	00e40002 	rsceq	r0, r4, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2f010000 	svccs	0x00010000
  1c:	2f727375 	svccs	0x00727375
  20:	61636f6c 	cmnvs	r3, ip, ror #30
  24:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
  28:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
  2c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
  30:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
  34:	61652d65 	cmnvs	r5, r5, ror #26
  38:	342f6962 	strtcc	r6, [pc], #-2402	; 40 <_start-0x7fc0>
  3c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
  40:	3173632d 	cmncc	r3, sp, lsr #6
  44:	2f653037 	svccs	0x00653037
  48:	2f62696c 	svccs	0x0062696c
  4c:	2f636367 	svccs	0x00636367
  50:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
  54:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
  58:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
  5c:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
  60:	2f332e38 	svccs	0x00332e38
  64:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  68:	00656475 	rsbeq	r6, r5, r5, ror r4
  6c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
  70:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
  74:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
  78:	2f6e756a 	svccs	0x006e756a
  7c:	6b736544 	blvs	1cd9594 <__bss_end__+0x1ccff1c>
  80:	2f706f74 	svccs	0x00706f74
  84:	6f686373 	svcvs	0x00686373
  88:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
  8c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
  90:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
  94:	53432f30 	movtpl	r2, #16176	; 0x3f30
  98:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
  9c:	3173632f 	cmncc	r3, pc, lsr #6
  a0:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
  a4:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
  a8:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
  ac:	00697062 	rsbeq	r7, r9, r2, rrx
  b0:	742d3100 	strtvc	r3, [sp], #-256	; 0x100
  b4:	2d747365 	ldclcs	3, cr7, [r4, #-404]!	; 0xfffffe6c
  b8:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
  bc:	632e6461 	teqvs	lr, #1627389952	; 0x61000000
  c0:	00000000 	andeq	r0, r0, r0
  c4:	2d697072 	stclcs	0, cr7, [r9, #-456]!	; 0xfffffe38
  c8:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
  cc:	682e6461 	stmdavs	lr!, {r0, r5, r6, sl, sp, lr}
  d0:	00000000 	andeq	r0, r0, r0
  d4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
  d8:	672d746e 	strvs	r7, [sp, -lr, ror #8]!
  dc:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
  e0:	00000100 	andeq	r0, r0, r0, lsl #2
  e4:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
  e8:	00020068 	andeq	r0, r2, r8, rrx
  ec:	05000000 	streq	r0, [r0, #-0]
  f0:	00801002 	addeq	r1, r0, r2
  f4:	9f4c1900 	svcls	0x004c1900
  f8:	2fa18383 	svccs	0x00a18383
  fc:	854c302f 	strbhi	r3, [ip, #-47]	; 0x2f
 100:	02002b30 	andeq	r2, r0, #48, 22	; 0xc000
 104:	002f0204 	eoreq	r0, pc, r4, lsl #4
 108:	67020402 	strvs	r0, [r2, -r2, lsl #8]
 10c:	02040200 	andeq	r0, r4, #0, 4
 110:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 114:	02004702 	andeq	r4, r0, #524288	; 0x80000
 118:	2e060104 	adfcss	f0, f6, f4
 11c:	9f314f06 	svcls	0x00314f06
 120:	01040200 	mrseq	r0, R12_usr
 124:	bb066606 	bllt	199944 <__bss_end__+0x1902cc>
 128:	01001002 	tsteq	r0, r2
 12c:	00014101 	andeq	r4, r1, r1, lsl #2
 130:	e8000200 	stmda	r0, {r9}
 134:	02000000 	andeq	r0, r0, #0
 138:	0d0efb01 	vstreq	d15, [lr, #-4]
 13c:	01010100 	mrseq	r0, (UNDEF: 17)
 140:	00000001 	andeq	r0, r0, r1
 144:	01000001 	tsteq	r0, r1
 148:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 14c:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
 150:	432f6c61 	teqmi	pc, #24832	; 0x6100
 154:	616c6c65 	cmnvs	ip, r5, ror #24
 158:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 15c:	6f6e2d6d 	svcvs	0x006e2d6d
 160:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 164:	2f696261 	svccs	0x00696261
 168:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 16c:	73632d33 	cmnvc	r3, #3264	; 0xcc0
 170:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
 174:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 178:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
 17c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 180:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 184:	61652d65 	cmnvs	r5, r5, ror #26
 188:	342f6962 	strtcc	r6, [pc], #-2402	; 190 <_start-0x7e70>
 18c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 190:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 194:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
 198:	73552f00 	cmpvc	r5, #0, 30
 19c:	2f737265 	svccs	0x00737265
 1a0:	61697262 	cmnvs	r9, r2, ror #4
 1a4:	6e756a6e 	vsubvs.f32	s13, s10, s29
 1a8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 1ac:	706f746b 	rsbvc	r7, pc, fp, ror #8
 1b0:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 1b4:	2f6c6f6f 	svccs	0x006c6f6f
 1b8:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 1bc:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 1c0:	432f3032 	teqmi	pc, #50	; 0x32
 1c4:	30343153 	eorscc	r3, r4, r3, asr r1
 1c8:	73632f45 	cmnvc	r3, #276	; 0x114
 1cc:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 1d0:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 1d4:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 38 <_start-0x7fc8>
 1d8:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 1dc:	2e510000 	cdpcs	0, 5, cr0, cr1, cr0, {0}
 1e0:	00000068 	andeq	r0, r0, r8, rrx
 1e4:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 1e8:	7268742d 	rsbvc	r7, r8, #754974720	; 0x2d000000
 1ec:	2e646165 	powcssz	f6, f4, f5
 1f0:	00000063 	andeq	r0, r0, r3, rrx
 1f4:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 1f8:	7268742d 	rsbvc	r7, r8, #754974720	; 0x2d000000
 1fc:	2e646165 	powcssz	f6, f4, f5
 200:	00000068 	andeq	r0, r0, r8, rrx
 204:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
 208:	2d746e69 	ldclcs	14, cr6, [r4, #-420]!	; 0xfffffe5c
 20c:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
 210:	00010068 	andeq	r0, r1, r8, rrx
 214:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 218:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 21c:	00000000 	andeq	r0, r0, r0
 220:	81100205 	tsthi	r0, r5, lsl #4
 224:	0e030000 	cdpeq	0, 0, cr0, cr3, cr0, {0}
 228:	2f850101 	svccs	0x00850101
 22c:	01040200 	mrseq	r0, R12_usr
 230:	bb064a06 	bllt	192a50 <__bss_end__+0x1893d8>
 234:	02004b30 	andeq	r4, r0, #48, 22	; 0xc000
 238:	66060104 	strvs	r0, [r6], -r4, lsl #2
 23c:	4b4bbd06 	blmi	12ef65c <__bss_end__+0x12e5fe4>
 240:	03020430 	movweq	r0, #9264	; 0x2430
 244:	4b309e77 	blmi	c27c28 <__bss_end__+0xc1e5b0>
 248:	7403684c 	strvc	r6, [r3], #-2124	; 0x84c
 24c:	11031466 	tstne	r3, r6, ror #8
 250:	08312f82 	ldmdaeq	r1!, {r1, r7, r8, r9, sl, fp, sp}
 254:	2e0a0327 	cdpcs	3, 0, cr0, cr10, cr7, {1}
 258:	08342408 	ldmdaeq	r4!, {r3, sl, sp}
 25c:	67893528 	strvs	r3, [r9, r8, lsr #10]
 260:	58080b03 	stmdapl	r8, {r0, r1, r8, r9, fp}
 264:	2f27082f 	svccs	0x0027082f
 268:	20080a03 	andcs	r0, r8, r3, lsl #20
 26c:	0012022f 	andseq	r0, r2, pc, lsr #4
 270:	01020101 	tsteq	r2, r1, lsl #2
 274:	00020000 	andeq	r0, r2, r0
 278:	000000eb 	andeq	r0, r0, fp, ror #1
 27c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 280:	0101000d 	tsteq	r1, sp
 284:	00000101 	andeq	r0, r0, r1, lsl #2
 288:	00000100 	andeq	r0, r0, r0, lsl #2
 28c:	62696c01 	rsbvs	r6, r9, #256	; 0x100
 290:	752f0063 	strvc	r0, [pc, #-99]!	; 235 <_start-0x7dcb>
 294:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; d0 <_start-0x7f30>
 298:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 29c:	6c65432f 	stclvs	3, cr4, [r5], #-188	; 0xffffff44
 2a0:	2f72616c 	svccs	0x0072616c
 2a4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 2a8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 2ac:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 2b0:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 2b4:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
 2b8:	37317363 	ldrcc	r7, [r1, -r3, ror #6]!
 2bc:	6c2f6530 	cfstr32vs	mvfx6, [pc], #-192	; 204 <_start-0x7dfc>
 2c0:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
 2c4:	612f6363 	teqvs	pc, r3, ror #6
 2c8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 2cc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 2d0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 2d4:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 2d8:	692f332e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, r9, ip, sp}	; <UNPREDICTABLE>
 2dc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
 2e0:	2f006564 	svccs	0x00006564
 2e4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 2e8:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 2ec:	6a6e6169 	bvs	1b98898 <__bss_end__+0x1b8f220>
 2f0:	442f6e75 	strtmi	r6, [pc], #-3701	; 2f8 <_start-0x7d08>
 2f4:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 2f8:	732f706f 	teqvc	pc, #111	; 0x6f
 2fc:	6f6f6863 	svcvs	0x006f6863
 300:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 304:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 308:	30323931 	eorscc	r3, r2, r1, lsr r9
 30c:	3153432f 	cmpcc	r3, pc, lsr #6
 310:	2f453034 	svccs	0x00453034
 314:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 318:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 31c:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 320:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 324:	00006970 	andeq	r6, r0, r0, ror r9
 328:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 32c:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
 330:	00000100 	andeq	r0, r0, r0, lsl #2
 334:	61647473 	smcvs	18243	; 0x4743
 338:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
 33c:	00000200 	andeq	r0, r0, r0, lsl #4
 340:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
 344:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
 348:	00003e6e 	andeq	r3, r0, lr, ror #28
 34c:	70720000 	rsbsvc	r0, r2, r0
 350:	00682e69 	rsbeq	r2, r8, r9, ror #28
 354:	76000003 	strvc	r0, [r0], -r3
 358:	72702d61 	rsbsvc	r2, r0, #6208	; 0x1840
 35c:	6b746e69 	blvs	1d1bd08 <__bss_end__+0x1d12690>
 360:	0100682e 	tsteq	r0, lr, lsr #16
 364:	00000000 	andeq	r0, r0, r0
 368:	83240205 	teqhi	r4, #1342177280	; 0x50000000
 36c:	6b170000 	blvs	5c0374 <__bss_end__+0x5b6cfc>
 370:	0289bf4b 	addeq	fp, r9, #300	; 0x12c
 374:	0101000e 	tsteq	r1, lr
 378:	00000096 	muleq	r0, r6, r0
 37c:	006f0002 	rsbeq	r0, pc, r2
 380:	01020000 	mrseq	r0, (UNDEF: 2)
 384:	000d0efb 	strdeq	r0, [sp], -fp
 388:	01010101 	tsteq	r1, r1, lsl #2
 38c:	01000000 	mrseq	r0, (UNDEF: 0)
 390:	6c010000 	stcvs	0, cr0, [r1], {-0}
 394:	00636269 	rsbeq	r6, r3, r9, ror #4
 398:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 39c:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 3a0:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 3a4:	2f6e756a 	svccs	0x006e756a
 3a8:	6b736544 	blvs	1cd98c0 <__bss_end__+0x1cd0248>
 3ac:	2f706f74 	svccs	0x00706f74
 3b0:	6f686373 	svcvs	0x00686373
 3b4:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 3b8:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 3bc:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 3c0:	53432f30 	movtpl	r2, #16176	; 0x3f30
 3c4:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 3c8:	3173632f 	cmncc	r3, pc, lsr #6
 3cc:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 3d0:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 3d4:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 3d8:	00697062 	rsbeq	r7, r9, r2, rrx
 3dc:	74757000 	ldrbtvc	r7, [r5], #-0
 3e0:	00632e6b 	rsbeq	r2, r3, fp, ror #28
 3e4:	72000001 	andvc	r0, r0, #1
 3e8:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 3ec:	00000200 	andeq	r0, r0, r0, lsl #4
 3f0:	02050000 	andeq	r0, r5, #0
 3f4:	0000837c 	andeq	r8, r0, ip, ror r3
 3f8:	002d4c15 	eoreq	r4, sp, r5, lsl ip
 3fc:	2f020402 	svccs	0x00020402
 400:	02040200 	andeq	r0, r4, #0, 4
 404:	04020049 	streq	r0, [r2], #-73	; 0x49
 408:	062e0601 	strteq	r0, [lr], -r1, lsl #12
 40c:	0006026b 	andeq	r0, r6, fp, ror #4
 410:	01dc0101 	bicseq	r0, ip, r1, lsl #2
 414:	00020000 	andeq	r0, r2, r0
 418:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 41c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 420:	0101000d 	tsteq	r1, sp
 424:	00000101 	andeq	r0, r0, r1, lsl #2
 428:	00000100 	andeq	r0, r0, r0, lsl #2
 42c:	62696c01 	rsbvs	r6, r9, #256	; 0x100
 430:	752f0063 	strvc	r0, [pc, #-99]!	; 3d5 <_start-0x7c2b>
 434:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 270 <_start-0x7d90>
 438:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 43c:	6c65432f 	stclvs	3, cr4, [r5], #-188	; 0xffffff44
 440:	2f72616c 	svccs	0x0072616c
 444:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 448:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 44c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 450:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 454:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
 458:	37317363 	ldrcc	r7, [r1, -r3, ror #6]!
 45c:	6c2f6530 	cfstr32vs	mvfx6, [pc], #-192	; 3a4 <_start-0x7c5c>
 460:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
 464:	612f6363 	teqvs	pc, r3, ror #6
 468:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 46c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 470:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 474:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 478:	692f332e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, r9, ip, sp}	; <UNPREDICTABLE>
 47c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
 480:	2f006564 	svccs	0x00006564
 484:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 488:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 48c:	6a6e6169 	bvs	1b98a38 <__bss_end__+0x1b8f3c0>
 490:	442f6e75 	strtmi	r6, [pc], #-3701	; 498 <_start-0x7b68>
 494:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 498:	732f706f 	teqvc	pc, #111	; 0x6f
 49c:	6f6f6863 	svcvs	0x006f6863
 4a0:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 4a4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 4a8:	30323931 	eorscc	r3, r2, r1, lsr r9
 4ac:	3153432f 	cmpcc	r3, pc, lsr #6
 4b0:	2f453034 	svccs	0x00453034
 4b4:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 4b8:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 4bc:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 4c0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 4c4:	00006970 	andeq	r6, r0, r0, ror r9
 4c8:	702d6176 	eorvc	r6, sp, r6, ror r1
 4cc:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 4d0:	00632e6b 	rsbeq	r2, r3, fp, ror #28
 4d4:	73000001 	movwvc	r0, #1
 4d8:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
 4dc:	00682e67 	rsbeq	r2, r8, r7, ror #28
 4e0:	72000002 	andvc	r0, r0, #2
 4e4:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 4e8:	00000300 	andeq	r0, r0, r0, lsl #6
 4ec:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
 4f0:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
 4f4:	00003e6e 	andeq	r3, r0, lr, ror #28
 4f8:	00000000 	andeq	r0, r0, r0
 4fc:	83b00205 	movshi	r0, #1342177280	; 0x50000000
 500:	26030000 	strcs	r0, [r3], -r0
 504:	13a50101 			; <UNDEFINED> instruction: 0x13a50101
 508:	02002d31 	andeq	r2, r0, #3136	; 0xc40
 50c:	002f0204 	eoreq	r0, pc, r4, lsl #4
 510:	2d020402 	cfstrscs	mvf0, [r2, #-8]
 514:	02040200 	andeq	r0, r4, #0, 4
 518:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 51c:	4c4c2d01 	mcrrmi	13, 0, r2, ip, cr1
 520:	2f4b1430 	svccs	0x004b1430
 524:	0402004f 	streq	r0, [r2], #-79	; 0x4f
 528:	02006702 	andeq	r6, r0, #524288	; 0x80000
 52c:	4c650104 	stfmie	f0, [r5], #-16
 530:	2fa0304d 	svccs	0x00a0304d
 534:	26023031 			; <UNDEFINED> instruction: 0x26023031
 538:	2c2d8416 	cfstrscs	mvf8, [sp], #-88	; 0xffffffa8
 53c:	01040200 	mrseq	r0, R12_usr
 540:	04020030 	streq	r0, [r2], #-48	; 0x30
 544:	66063301 	strvs	r3, [r6], -r1, lsl #6
 548:	01040200 	mrseq	r0, R12_usr
 54c:	0402002e 	streq	r0, [r2], #-46	; 0x2e
 550:	21080601 	tstcs	r8, r1, lsl #12
 554:	73032f67 	movwvc	r2, #16231	; 0x3f67
 558:	2e130382 	cdpcs	3, 1, cr0, cr3, cr2, {4}
 55c:	01040200 	mrseq	r0, R12_usr
 560:	02002e06 	andeq	r2, r0, #6, 28	; 0x60
 564:	9f060104 	svcls	0x00060104
 568:	67034b6a 	strvs	r4, [r3, -sl, ror #22]
 56c:	2e21032e 	cdpcs	3, 2, cr0, cr1, cr14, {1}
 570:	01040200 	mrseq	r0, R12_usr
 574:	02002e06 	andeq	r2, r0, #6, 28	; 0x60
 578:	9f060104 	svcls	0x00060104
 57c:	01040200 	mrseq	r0, R12_usr
 580:	03f3bd6a 	mvnseq	fp, #6784	; 0x1a80
 584:	20087fa6 	andcs	r7, r8, r6, lsr #31
 588:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 58c:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 590:	032f4bbb 	teqeq	pc, #191488	; 0x2ec00
 594:	83f200da 	mvnshi	r0, #218	; 0xda
 598:	2f31484c 	svccs	0x0031484c
 59c:	2f4b842f 	svccs	0x004b842f
 5a0:	30314d2d 	eorscc	r4, r1, sp, lsr #26
 5a4:	0200832f 	andeq	r8, r0, #-1140850688	; 0xbc000000
 5a8:	be2c0104 	suflte	f0, f4, f4
 5ac:	01040200 	mrseq	r0, R12_usr
 5b0:	bc064a06 	stclt	10, cr4, [r6], {6}
 5b4:	03163602 	tsteq	r6, #2097152	; 0x200000
 5b8:	2108ba0e 	tstcs	r8, lr, lsl #20
 5bc:	31210830 	teqcc	r1, r0, lsr r8
 5c0:	08302108 	ldmdaeq	r0!, {r3, r8, sp}
 5c4:	304b3021 	subcc	r3, fp, r1, lsr #32
 5c8:	d9302108 	ldmdble	r0!, {r3, r8, sp}
 5cc:	02002f31 	andeq	r2, r0, #49, 30	; 0xc4
 5d0:	00650104 	rsbeq	r0, r5, r4, lsl #2
 5d4:	06020402 	streq	r0, [r2], -r2, lsl #8
 5d8:	0402004a 	streq	r0, [r2], #-74	; 0x4a
 5dc:	42030601 	andmi	r0, r3, #1048576	; 0x100000
 5e0:	04020066 	streq	r0, [r2], #-102	; 0x66
 5e4:	06660602 	strbteq	r0, [r6], -r2, lsl #12
 5e8:	4a00c203 	bmi	30dfc <__bss_end__+0x27784>
 5ec:	00100268 	andseq	r0, r0, r8, ror #4
 5f0:	00930101 	addseq	r0, r3, r1, lsl #2
 5f4:	00020000 	andeq	r0, r2, r0
 5f8:	0000007d 	andeq	r0, r0, sp, ror r0
 5fc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 600:	0101000d 	tsteq	r1, sp
 604:	00000101 	andeq	r0, r0, r1, lsl #2
 608:	00000100 	andeq	r0, r0, r0, lsl #2
 60c:	31736301 	cmncc	r3, r1, lsl #6
 610:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 614:	00637273 	rsbeq	r7, r3, r3, ror r2
 618:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 61c:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 620:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 624:	2f6e756a 	svccs	0x006e756a
 628:	6b736544 	blvs	1cd9b40 <__bss_end__+0x1cd04c8>
 62c:	2f706f74 	svccs	0x00706f74
 630:	6f686373 	svcvs	0x00686373
 634:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 638:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 63c:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 640:	53432f30 	movtpl	r2, #16176	; 0x3f30
 644:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 648:	3173632f 	cmncc	r3, pc, lsr #6
 64c:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 650:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 654:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 658:	00697062 	rsbeq	r7, r9, r2, rrx
 65c:	656c6300 	strbvs	r6, [ip, #-768]!	; 0x300
 660:	722d6e61 	eorvc	r6, sp, #1552	; 0x610
 664:	6f6f6265 	svcvs	0x006f6265
 668:	00632e74 	rsbeq	r2, r3, r4, ror lr
 66c:	72000001 	andvc	r0, r0, #1
 670:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 674:	00000200 	andeq	r0, r0, r0, lsl #4
 678:	02050000 	andeq	r0, r5, #0
 67c:	000088a0 	andeq	r8, r0, r0, lsr #17
 680:	4b832f15 	blmi	fe0cc2dc <__bss_end__+0xfe0c2c64>
 684:	01000602 	tsteq	r0, r2, lsl #12
 688:	00009601 	andeq	r9, r0, r1, lsl #12
 68c:	77000200 	strvc	r0, [r0, -r0, lsl #4]
 690:	02000000 	andeq	r0, r0, #0
 694:	0d0efb01 	vstreq	d15, [lr, #-4]
 698:	01010100 	mrseq	r0, (UNDEF: 17)
 69c:	00000001 	andeq	r0, r0, r1
 6a0:	01000001 	tsteq	r0, r1
 6a4:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 6a8:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
 6ac:	2f006372 	svccs	0x00006372
 6b0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 6b4:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 6b8:	6a6e6169 	bvs	1b98c64 <__bss_end__+0x1b8f5ec>
 6bc:	442f6e75 	strtmi	r6, [pc], #-3701	; 6c4 <_start-0x793c>
 6c0:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 6c4:	732f706f 	teqvc	pc, #111	; 0x6f
 6c8:	6f6f6863 	svcvs	0x006f6863
 6cc:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 6d0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 6d4:	30323931 	eorscc	r3, r2, r1, lsr r9
 6d8:	3153432f 	cmpcc	r3, pc, lsr #6
 6dc:	2f453034 	svccs	0x00453034
 6e0:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 6e4:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 6e8:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 6ec:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 6f0:	00006970 	andeq	r6, r0, r0, ror r9
 6f4:	61747363 	cmnvs	r4, r3, ror #6
 6f8:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
 6fc:	00000100 	andeq	r0, r0, r0, lsl #2
 700:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 704:	00020068 	andeq	r0, r2, r8, rrx
 708:	05000000 	streq	r0, [r0, #-0]
 70c:	0088c802 	addeq	ip, r8, r2, lsl #16
 710:	31321400 	teqcc	r2, r0, lsl #8
 714:	002f2d2f 	eoreq	r2, pc, pc, lsr #26
 718:	49010402 	stmdbmi	r1, {r1, sl}
 71c:	06022f4d 	streq	r2, [r2], -sp, asr #30
 720:	99010100 	stmdbls	r1, {r8}
 724:	02000000 	andeq	r0, r0, #0
 728:	00007700 	andeq	r7, r0, r0, lsl #14
 72c:	fb010200 	blx	40f36 <__bss_end__+0x378be>
 730:	01000d0e 	tsteq	r0, lr, lsl #26
 734:	00010101 	andeq	r0, r1, r1, lsl #2
 738:	00010000 	andeq	r0, r1, r0
 73c:	73630100 	cmnvc	r3, #0, 2
 740:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 744:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 748:	73552f00 	cmpvc	r5, #0, 30
 74c:	2f737265 	svccs	0x00737265
 750:	61697262 	cmnvs	r9, r2, ror #4
 754:	6e756a6e 	vsubvs.f32	s13, s10, s29
 758:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 75c:	706f746b 	rsbvc	r7, pc, fp, ror #8
 760:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 764:	2f6c6f6f 	svccs	0x006c6f6f
 768:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 76c:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 770:	432f3032 	teqmi	pc, #50	; 0x32
 774:	30343153 	eorscc	r3, r4, r3, asr r1
 778:	73632f45 	cmnvc	r3, #276	; 0x114
 77c:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 780:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 784:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 5e8 <_start-0x7a18>
 788:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 78c:	65720000 	ldrbvs	r0, [r2, #-0]!
 790:	746f6f62 	strbtvc	r6, [pc], #-3938	; 798 <_start-0x7868>
 794:	0100632e 	tsteq	r0, lr, lsr #6
 798:	70720000 	rsbsvc	r0, r2, r0
 79c:	00682e69 	rsbeq	r2, r8, r9, ror #28
 7a0:	00000002 	andeq	r0, r0, r2
 7a4:	fc020500 	stc2	5, cr0, [r2], {-0}
 7a8:	03000088 	movweq	r0, #136	; 0x88
 7ac:	3114010d 	tstcc	r4, sp, lsl #2
 7b0:	2f15852f 	svccs	0x0015852f
 7b4:	672f4d4b 	strvs	r4, [pc, -fp, asr #26]!
 7b8:	02675235 	rsbeq	r5, r7, #1342177283	; 0x50000003
 7bc:	01010010 	tsteq	r1, r0, lsl r0
 7c0:	000000a0 	andeq	r0, r0, r0, lsr #1
 7c4:	00760002 	rsbseq	r0, r6, r2
 7c8:	01020000 	mrseq	r0, (UNDEF: 2)
 7cc:	000d0efb 	strdeq	r0, [sp], -fp
 7d0:	01010101 	tsteq	r1, r1, lsl #2
 7d4:	01000000 	mrseq	r0, (UNDEF: 0)
 7d8:	63010000 	movwvs	r0, #4096	; 0x1000
 7dc:	30343173 	eorscc	r3, r4, r3, ror r1
 7e0:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 7e4:	552f0063 	strpl	r0, [pc, #-99]!	; 789 <_start-0x7877>
 7e8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 7ec:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 7f0:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 7f4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 7f8:	6f746b73 	svcvs	0x00746b73
 7fc:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 800:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 668 <_start-0x7998>
 804:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 808:	31726574 	cmncc	r2, r4, ror r5
 80c:	2f303239 	svccs	0x00303239
 810:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 814:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 818:	30343173 	eorscc	r3, r4, r3, ror r1
 81c:	30322d65 	eorscc	r2, r2, r5, ror #26
 820:	2f6e6977 	svccs	0x006e6977
 824:	7062696c 	rsbvc	r6, r2, ip, ror #18
 828:	74000069 	strvc	r0, [r0], #-105	; 0x69
 82c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 830:	0100632e 	tsteq	r0, lr, lsr #6
 834:	70720000 	rsbsvc	r0, r2, r0
 838:	00682e69 	rsbeq	r2, r8, r9, ror #28
 83c:	00000002 	andeq	r0, r0, r2
 840:	70020500 	andvc	r0, r2, r0, lsl #10
 844:	16000089 	strne	r0, [r0], -r9, lsl #1
 848:	002d2f13 	eoreq	r2, sp, r3, lsl pc
 84c:	06010402 	streq	r0, [r1], -r2, lsl #8
 850:	3168062e 	cmncc	r8, lr, lsr #12
 854:	4b4c4b2f 	blmi	1313518 <__bss_end__+0x1309ea0>
 858:	2f6a2f4c 	svccs	0x006a2f4c
 85c:	022f842f 	eoreq	r8, pc, #788529152	; 0x2f000000
 860:	01010008 	tsteq	r1, r8
 864:	0000016b 	andeq	r0, r0, fp, ror #2
 868:	01200002 	teqeq	r0, r2
 86c:	01020000 	mrseq	r0, (UNDEF: 2)
 870:	000d0efb 	strdeq	r0, [sp], -fp
 874:	01010101 	tsteq	r1, r1, lsl #2
 878:	01000000 	mrseq	r0, (UNDEF: 0)
 87c:	6d010000 	stcvs	0, cr0, [r1, #-0]
 880:	72732d79 	rsbsvc	r2, r3, #7744	; 0x1e40
 884:	752f0063 	strvc	r0, [pc, #-99]!	; 829 <_start-0x77d7>
 888:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 6c4 <_start-0x793c>
 88c:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 890:	6c65432f 	stclvs	3, cr4, [r5], #-188	; 0xffffff44
 894:	2f72616c 	svccs	0x0072616c
 898:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 89c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 8a0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 8a4:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 8a8:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
 8ac:	37317363 	ldrcc	r7, [r1, -r3, ror #6]!
 8b0:	6c2f6530 	cfstr32vs	mvfx6, [pc], #-192	; 7f8 <_start-0x7808>
 8b4:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
 8b8:	612f6363 	teqvs	pc, r3, ror #6
 8bc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 8c0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 8c4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 8c8:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 8cc:	692f332e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, r9, ip, sp}	; <UNPREDICTABLE>
 8d0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
 8d4:	2f006564 	svccs	0x00006564
 8d8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 8dc:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 8e0:	6a6e6169 	bvs	1b98e8c <__bss_end__+0x1b8f814>
 8e4:	442f6e75 	strtmi	r6, [pc], #-3701	; 8ec <_start-0x7714>
 8e8:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 8ec:	732f706f 	teqvc	pc, #111	; 0x6f
 8f0:	6f6f6863 	svcvs	0x006f6863
 8f4:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 8f8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 8fc:	30323931 	eorscc	r3, r2, r1, lsr r9
 900:	3153432f 	cmpcc	r3, pc, lsr #6
 904:	2f453034 	svccs	0x00453034
 908:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 90c:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 910:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 914:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 918:	2f006970 	svccs	0x00006970
 91c:	2f727375 	svccs	0x00727375
 920:	61636f6c 	cmnvs	r3, ip, ror #30
 924:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
 928:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
 92c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 930:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 934:	61652d65 	cmnvs	r5, r5, ror #26
 938:	342f6962 	strtcc	r6, [pc], #-2402	; 940 <_start-0x76c0>
 93c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 940:	3173632d 	cmncc	r3, sp, lsr #6
 944:	2f653037 	svccs	0x00653037
 948:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 94c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 950:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 954:	6e692f69 	cdpvs	15, 6, cr2, cr9, cr9, {3}
 958:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
 95c:	6b000065 	blvs	af8 <_start-0x7508>
 960:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 964:	632e636f 	teqvs	lr, #-1140850687	; 0xbc000001
 968:	00000100 	andeq	r0, r0, r0, lsl #2
 96c:	64647473 	strbtvs	r7, [r4], #-1139	; 0x473
 970:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
 974:	00000200 	andeq	r0, r0, r0, lsl #4
 978:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 97c:	00030068 	andeq	r0, r3, r8, rrx
 980:	72747300 	rsbsvc	r7, r4, #0, 6
 984:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
 988:	00040068 	andeq	r0, r4, r8, rrx
 98c:	05000000 	streq	r0, [r0, #-0]
 990:	008cc402 	addeq	ip, ip, r2, lsl #8
 994:	01180300 	tsteq	r8, r0, lsl #6
 998:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 99c:	06820601 	streq	r0, [r2], r1, lsl #12
 9a0:	4b4b4bbc 	blmi	12d3898 <__bss_end__+0x12ca220>
 9a4:	002fbe4d 	eoreq	fp, pc, sp, asr #28
 9a8:	06010402 	streq	r0, [r1], -r2, lsl #8
 9ac:	4bbc0682 	blmi	fef023bc <__bss_end__+0xfeef8d44>
 9b0:	0402004b 	streq	r0, [r2], #-75	; 0x4b
 9b4:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 9b8:	30834bbb 			; <UNDEFINED> instruction: 0x30834bbb
 9bc:	ba0a032f 	blt	281680 <__bss_end__+0x278008>
 9c0:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 9c4:	06820601 	streq	r0, [r2], r1, lsl #12
 9c8:	13f967bb 	mvnsne	r6, #49020928	; 0x2ec0000
 9cc:	080214c2 	stmdaeq	r2, {r1, r6, r7, sl, ip}
 9d0:	ec010100 	stfs	f0, [r1], {-0}
 9d4:	02000000 	andeq	r0, r0, #0
 9d8:	0000d000 	andeq	sp, r0, r0
 9dc:	fb010200 	blx	411e6 <__bss_end__+0x37b6e>
 9e0:	01000d0e 	tsteq	r0, lr, lsl #26
 9e4:	00010101 	andeq	r0, r1, r1, lsl #2
 9e8:	00010000 	andeq	r0, r1, r0
 9ec:	696c0100 	stmdbvs	ip!, {r8}^
 9f0:	2f006362 	svccs	0x00006362
 9f4:	2f727375 	svccs	0x00727375
 9f8:	61636f6c 	cmnvs	r3, ip, ror #30
 9fc:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
 a00:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
 a04:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 a08:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 a0c:	61652d65 	cmnvs	r5, r5, ror #26
 a10:	342f6962 	strtcc	r6, [pc], #-2402	; a18 <_start-0x75e8>
 a14:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 a18:	3173632d 	cmncc	r3, sp, lsr #6
 a1c:	2f653037 	svccs	0x00653037
 a20:	2f62696c 	svccs	0x0062696c
 a24:	2f636367 	svccs	0x00636367
 a28:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 a2c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 a30:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 a34:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 a38:	2f332e38 	svccs	0x00332e38
 a3c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 a40:	00656475 	rsbeq	r6, r5, r5, ror r4
 a44:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 a48:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
 a4c:	432f6c61 	teqmi	pc, #24832	; 0x6100
 a50:	616c6c65 	cmnvs	ip, r5, ror #24
 a54:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 a58:	6f6e2d6d 	svcvs	0x006e2d6d
 a5c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 a60:	2f696261 	svccs	0x00696261
 a64:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 a68:	73632d33 	cmnvc	r3, #3264	; 0xcc0
 a6c:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
 a70:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 a74:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 a78:	61652d65 	cmnvs	r5, r5, ror #26
 a7c:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
 a80:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
 a84:	00006564 	andeq	r6, r0, r4, ror #10
 a88:	736d656d 	cmnvc	sp, #457179136	; 0x1b400000
 a8c:	632e7465 	teqvs	lr, #1694498816	; 0x65000000
 a90:	00000100 	andeq	r0, r0, r0, lsl #2
 a94:	64647473 	strbtvs	r7, [r4], #-1139	; 0x473
 a98:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
 a9c:	00000200 	andeq	r0, r0, r0, lsl #4
 aa0:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 aa4:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 aa8:	00000300 	andeq	r0, r0, r0, lsl #6
 aac:	02050000 	andeq	r0, r5, #0
 ab0:	00008e3c 	andeq	r8, r0, ip, lsr lr
 ab4:	2f4c1314 	svccs	0x004c1314
 ab8:	01040200 	mrseq	r0, R12_usr
 abc:	02024d49 	andeq	r4, r2, #4672	; 0x1240
 ac0:	86010100 	strhi	r0, [r1], -r0, lsl #2
 ac4:	02000000 	andeq	r0, r0, #0
 ac8:	00007200 	andeq	r7, r0, r0, lsl #4
 acc:	fb010200 	blx	412d6 <__bss_end__+0x37c5e>
 ad0:	01000d0e 	tsteq	r0, lr, lsl #26
 ad4:	00010101 	andeq	r0, r1, r1, lsl #2
 ad8:	00010000 	andeq	r0, r1, r0
 adc:	696c0100 	stmdbvs	ip!, {r8}^
 ae0:	2f006362 	svccs	0x00006362
 ae4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 ae8:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 aec:	6a6e6169 	bvs	1b99098 <__bss_end__+0x1b8fa20>
 af0:	442f6e75 	strtmi	r6, [pc], #-3701	; af8 <_start-0x7508>
 af4:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 af8:	732f706f 	teqvc	pc, #111	; 0x6f
 afc:	6f6f6863 	svcvs	0x006f6863
 b00:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 b04:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 b08:	30323931 	eorscc	r3, r2, r1, lsr r9
 b0c:	3153432f 	cmpcc	r3, pc, lsr #6
 b10:	2f453034 	svccs	0x00453034
 b14:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 b18:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 b1c:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 b20:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 b24:	00006970 	andeq	r6, r0, r0, ror r9
 b28:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 b2c:	2e726168 	rpwcssz	f6, f2, #0.0
 b30:	00010063 	andeq	r0, r1, r3, rrx
 b34:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 b38:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 b3c:	00000000 	andeq	r0, r0, r0
 b40:	8e5c0205 	cdphi	2, 5, cr0, cr12, cr5, {0}
 b44:	4a140000 	bmi	500b4c <__bss_end__+0x4f74d4>
 b48:	01000602 	tsteq	r0, r2, lsl #12
 b4c:	Address 0x0000000000000b4c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
   4:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
   8:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
   c:	2f6e756a 	svccs	0x006e756a
  10:	6b736544 	blvs	1cd9528 <__bss_end__+0x1ccfeb0>
  14:	2f706f74 	svccs	0x00706f74
  18:	6f686373 	svcvs	0x00686373
  1c:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
  20:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
  24:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
  28:	53432f30 	movtpl	r2, #16176	; 0x3f30
  2c:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
  30:	3173632f 	cmncc	r3, pc, lsr #6
  34:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
  38:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
  3c:	616c2f6e 	cmnvs	ip, lr, ror #30
  40:	362f7362 	strtcc	r7, [pc], -r2, ror #6
  44:	7268742d 	rsbvc	r7, r8, #754974720	; 0x2d000000
  48:	73646165 	cmnvc	r4, #1073741849	; 0x40000019
  4c:	742d322f 	strtvc	r3, [sp], #-559	; 0x22f
  50:	61657268 	cmnvs	r5, r8, ror #4
  54:	6e007364 	cdpvs	3, 0, cr7, cr0, cr4, {3}
  58:	00747865 	rsbseq	r7, r4, r5, ror #16
  5c:	5f697072 	svcpl	0x00697072
  60:	6f626572 	svcvs	0x00626572
  64:	4700746f 	strmi	r7, [r0, -pc, ror #8]
  68:	4320554e 	teqmi	r0, #327155712	; 0x13800000
  6c:	382e3420 	stmdacc	lr!, {r5, sl, ip, sp}
  70:	2d20332e 	stccs	3, cr3, [r0, #-184]!	; 0xffffff48
  74:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0x36d
  78:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  7c:	36373131 			; <UNDEFINED> instruction: 0x36373131
  80:	2d667a6a 	vstmdbcs	r6!, {s15-s120}
  84:	6d2d2073 	stcvs	0, cr2, [sp, #-460]!	; 0xfffffe34
  88:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0x574
  8c:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  90:	36373131 			; <UNDEFINED> instruction: 0x36373131
  94:	2d667a6a 	vstmdbcs	r6!, {s15-s120}
  98:	672d2073 			; <UNDEFINED> instruction: 0x672d2073
  9c:	20626467 	rsbcs	r6, r2, r7, ror #8
  a0:	20674f2d 	rsbcs	r4, r7, sp, lsr #30
  a4:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0x32d
  a8:	756e673d 	strbvc	r6, [lr, #-1853]!	; 0x73d
  ac:	2d203939 	stccs	9, cr3, [r0, #-228]!	; 0xffffff1c
  b0:	65726666 	ldrbvs	r6, [r2, #-1638]!	; 0x666
  b4:	61747365 	cmnvs	r4, r5, ror #6
  b8:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
  bc:	6f6e0067 	svcvs	0x006e0067
  c0:	69616d74 	stmdbvs	r1!, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^
  c4:	7473006e 	ldrbtvc	r0, [r3], #-110	; 0x6e
  c8:	006b6361 	rsbeq	r6, fp, r1, ror #6
  cc:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
  d0:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
  d4:	6e750074 	mrcvs	0, 3, r0, cr5, cr4, {3}
  d8:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
  dc:	63206465 	teqvs	r0, #1694498816	; 0x65000000
  e0:	00726168 	rsbseq	r6, r2, r8, ror #2
  e4:	61656c63 	cmnvs	r5, r3, ror #24
  e8:	65725f6e 	ldrbvs	r5, [r2, #-3950]!	; 0xf6e
  ec:	746f6f62 	strbtvc	r6, [pc], #-3938	; f4 <_start-0x7f0c>
  f0:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
  f4:	726f665f 	rsbvc	r6, pc, #99614720	; 0x5f00000
  f8:	6873006b 	ldmdavs	r3!, {r0, r1, r3, r5, r6}^
  fc:	2074726f 	rsbscs	r7, r4, pc, ror #4
 100:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 104:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
 108:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
 10c:	616d6b00 	cmnvs	sp, r0, lsl #22
 110:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 114:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 118:	7268745f 	rsbvc	r7, r8, #1593835520	; 0x5f000000
 11c:	5f646165 	svcpl	0x00646165
 120:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 124:	2d310074 	ldccs	0, cr0, [r1, #-464]!	; 0xfffffe30
 128:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0x574
 12c:	7268742d 	rsbvc	r7, r8, #754974720	; 0x2d000000
 130:	2e646165 	powcssz	f6, f4, f5
 134:	68740063 	ldmdavs	r4!, {r0, r1, r5, r6}^
 138:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 13c:	646f635f 	strbtvs	r6, [pc], #-863	; 144 <_start-0x7ebc>
 140:	5f5f0065 	svcpl	0x005f0065
 144:	434e5546 	movtmi	r5, #58694	; 0xe546
 148:	4e4f4954 	mcrmi	9, 2, r4, cr15, cr4, {2}
 14c:	74005f5f 	strvc	r5, [r0], #-3935	; 0xf5f
 150:	61657268 	cmnvs	r5, r8, ror #4
 154:	6f635f64 	svcvs	0x00635f64
 158:	00746e75 	rsbseq	r6, r4, r5, ror lr
 15c:	5f697072 	svcpl	0x00697072
 160:	74697865 	strbtvc	r7, [r9], #-2149	; 0x865
 164:	67657200 	strbvs	r7, [r5, -r0, lsl #4]!
 168:	7661735f 			; <UNDEFINED> instruction: 0x7661735f
 16c:	72615f65 	rsbvc	r5, r1, #404	; 0x194
 170:	6c006165 	stfvss	f6, [r0], {101}	; 0x65
 174:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 178:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 17c:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 180:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
 184:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 188:	70720074 	rsbsvc	r0, r2, r4, ror r0
 18c:	68745f69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 190:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 194:	7400745f 	strvc	r7, [r0], #-1119	; 0x45f
 198:	61657268 	cmnvs	r5, r8, ror #4
 19c:	75735f64 	ldrbvc	r5, [r3, #-3940]!	; 0xf64
 1a0:	6973006d 	ldmdbvs	r3!, {r0, r2, r3, r5, r6}^
 1a4:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
 1a8:	6c006570 	cfstr32vs	mvfx6, [r0], {112}	; 0x70
 1ac:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 1b0:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 1b4:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
 1b8:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 1bc:	7268745f 	rsbvc	r7, r8, #1593835520	; 0x5f000000
 1c0:	00646165 	rsbeq	r6, r4, r5, ror #2
 1c4:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 1c8:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
 1cc:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
 1d0:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
 1d4:	7200745f 	andvc	r7, r0, #1593835520	; 0x5f000000
 1d8:	635f6970 	cmpvs	pc, #112, 18	; 0x1c0000
 1dc:	745f7275 	ldrbvc	r7, [pc], #-629	; 1e4 <_start-0x7e1c>
 1e0:	61657268 	cmnvs	r5, r8, ror #4
 1e4:	6d6b0064 	stclvs	0, cr0, [fp, #-400]!	; 0xfffffe70
 1e8:	6f6c6c61 	svcvs	0x006c6c61
 1ec:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 1f0:	72007469 	andvc	r7, r0, #1761607680	; 0x69000000
 1f4:	00716e75 	rsbseq	r6, r1, r5, ror lr
 1f8:	6f705f51 	svcvs	0x00705f51
 1fc:	6d6b0070 	stclvs	0, cr0, [fp, #-448]!	; 0xfffffe40
 200:	6f6c6c61 	svcvs	0x006c6c61
 204:	6c615f63 	stclvs	15, cr5, [r1], #-396	; 0xfffffe74
 208:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
 20c:	5f510064 	svcpl	0x00510064
 210:	74706d65 	ldrbtvc	r6, [r0], #-3429	; 0xd65
 214:	63730079 	cmnvs	r3, #121	; 0x79
 218:	75646568 	strbvc	r6, [r4, #-1384]!	; 0x568
 21c:	5f72656c 	svcpl	0x0072656c
 220:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 224:	66006461 	strvs	r6, [r0], -r1, ror #8
 228:	71656572 	smcvc	22098	; 0x5652
 22c:	73696d00 	cmnvc	r9, #0, 26
 230:	5f646573 	svcpl	0x00646573
 234:	64616564 	strbtvs	r6, [r1], #-1380	; 0x564
 238:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0x96c
 23c:	696d0073 	stmdbvs	sp!, {r0, r1, r4, r5, r6}^
 240:	64657373 	strbtvs	r7, [r5], #-883	; 0x373
 244:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
 248:	6800726f 	stmdavs	r0, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}
 24c:	00646165 	rsbeq	r6, r4, r5, ror #2
 250:	2d697072 	stclcs	0, cr7, [r9, #-456]!	; 0xfffffe38
 254:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 258:	632e6461 	teqvs	lr, #1627389952	; 0x61000000
 25c:	74696800 	strbtvc	r6, [r9], #-2048	; 0x800
 260:	6165645f 	cmnvs	r5, pc, asr r4
 264:	6e696c64 	cdpvs	12, 6, cr6, cr9, cr4, {3}
 268:	63007365 	movwvs	r7, #869	; 0x365
 26c:	74616572 	strbtvc	r6, [r1], #-1394	; 0x572
 270:	745f6465 	ldrbvc	r6, [pc], #-1125	; 278 <_start-0x7d88>
 274:	61657268 	cmnvs	r5, r8, ror #4
 278:	72007364 	andvc	r7, r0, #100, 6	; 0x90000001
 27c:	745f6970 	ldrbvc	r6, [pc], #-2416	; 284 <_start-0x7d7c>
 280:	61657268 	cmnvs	r5, r8, ror #4
 284:	74735f64 	ldrbtvc	r5, [r3], #-3940	; 0xf64
 288:	00737461 	rsbseq	r7, r3, r1, ror #8
 28c:	74697865 	strbtvc	r7, [r9], #-2149	; 0x865
 290:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xf63
 294:	5f687400 	svcpl	0x00687400
 298:	6f6c6c61 	svcvs	0x006c6c61
 29c:	70720063 	rsbsvc	r0, r2, r3, rrx
 2a0:	69795f69 	ldmdbvs	r9!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 2a4:	00646c65 	rsbeq	r6, r4, r5, ror #24
 2a8:	74697865 	strbtvc	r7, [r9], #-2149	; 0x865
 2ac:	745f6465 	ldrbvc	r6, [pc], #-1125	; 2b4 <_start-0x7d4c>
 2b0:	61657268 	cmnvs	r5, r8, ror #4
 2b4:	72007364 	andvc	r7, r0, #100, 6	; 0x90000001
 2b8:	655f6970 	ldrbvs	r6, [pc, #-2416]	; fffff950 <__bss_end__+0xffff62d8>
 2bc:	74636178 	strbtvc	r6, [r3], #-376	; 0x178
 2c0:	656c735f 	strbvs	r7, [ip, #-863]!	; 0x35f
 2c4:	74007065 	strvc	r7, [r0], #-101	; 0x65
 2c8:	006c6961 	rsbeq	r6, ip, r1, ror #18
 2cc:	5f697072 	svcpl	0x00697072
 2d0:	6b726f66 	blvs	1c9c070 <__bss_end__+0x1c929f8>
 2d4:	756f625f 	strbvc	r6, [pc, #-607]!	; 7d <_start-0x7f83>
 2d8:	6465646e 	strbtvs	r6, [r5], #-1134	; 0x46e
 2dc:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 2e0:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 2e4:	6174735f 	cmnvs	r4, pc, asr r3
 2e8:	5f007374 	svcpl	0x00007374
 2ec:	756e675f 	strbvc	r6, [lr, #-1887]!	; 0x75f
 2f0:	61765f63 	cmnvs	r6, r3, ror #30
 2f4:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
 2f8:	696c0074 	stmdbvs	ip!, {r2, r4, r5, r6}^
 2fc:	702f6362 	eorvc	r6, pc, r2, ror #6
 300:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 304:	00632e6b 	rsbeq	r2, r3, fp, ror #28
 308:	705f6176 	subsvc	r6, pc, r6, ror r1	; <UNPREDICTABLE>
 30c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 310:	5f5f006b 	svcpl	0x005f006b
 314:	6c5f6176 	ldfvse	f6, [pc], {118}	; 0x76
 318:	00747369 	rsbseq	r7, r4, r9, ror #6
 31c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 320:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 324:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 328:	2f6e756a 	svccs	0x006e756a
 32c:	6b736544 	blvs	1cd9844 <__bss_end__+0x1cd01cc>
 330:	2f706f74 	svccs	0x00706f74
 334:	6f686373 	svcvs	0x00686373
 338:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 33c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 340:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 344:	53432f30 	movtpl	r2, #16176	; 0x3f30
 348:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 34c:	3173632f 	cmncc	r3, pc, lsr #6
 350:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 354:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 358:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 35c:	00697062 	rsbeq	r7, r9, r2, rrx
 360:	73677261 	cmnvc	r7, #268435462	; 0x10000006
 364:	615f5f00 	cmpvs	pc, r0, lsl #30
 368:	696c0070 	stmdbvs	ip!, {r4, r5, r6}^
 36c:	702f6362 	eorvc	r6, pc, r2, ror #6
 370:	2e6b7475 	mcrcs	4, 3, r7, cr11, cr5, {3}
 374:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
 378:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
 37c:	705f6c61 	subsvc	r6, pc, r1, ror #24
 380:	006b7475 	rsbeq	r7, fp, r5, ror r4
 384:	5f697072 	svcpl	0x00697072
 388:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 38c:	00726168 	rsbseq	r6, r2, r8, ror #2
 390:	5f67656e 	svcpl	0x0067656e
 394:	65720070 	ldrbvs	r0, [r2, #-112]!	; 0x70
 398:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 39c:	73690065 	cmnvc	r9, #101	; 0x65
 3a0:	69676964 	stmdbvs	r7!, {r2, r5, r6, r8, fp, sp, lr}^
 3a4:	75700074 	ldrbvc	r0, [r0, #-116]!	; 0x74
 3a8:	665f7374 			; <UNDEFINED> instruction: 0x665f7374
 3ac:	61620070 	smcvs	8192	; 0x2000
 3b0:	73006573 	movwvc	r6, #1395	; 0x573
 3b4:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
 3b8:	00705f64 	rsbseq	r5, r0, r4, ror #30
 3bc:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 3c0:	2d61762f 	stclcs	6, cr7, [r1, #-188]!	; 0xffffff44
 3c4:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 3c8:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
 3cc:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 3d0:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
 3d4:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xf5f
 3d8:	00747570 	rsbseq	r7, r4, r0, ror r5
 3dc:	74646977 	strbtvc	r6, [r4], #-2423	; 0x977
 3e0:	75700068 	ldrbvc	r0, [r0, #-104]!	; 0x68
 3e4:	665f6374 			; <UNDEFINED> instruction: 0x665f6374
 3e8:	6d650070 	stclvs	0, cr0, [r5, #-448]!	; 0xfffffe40
 3ec:	63007469 	movwvs	r7, #1129	; 0x469
 3f0:	30343173 	eorscc	r3, r4, r3, ror r1
 3f4:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 3f8:	6c632f63 	stclvs	15, cr2, [r3], #-396	; 0xfffffe74
 3fc:	2d6e6165 	stfcse	f6, [lr, #-404]!	; 0xfffffe6c
 400:	6f626572 	svcvs	0x00626572
 404:	632e746f 	teqvs	lr, #1862270976	; 0x6f000000
 408:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 40c:	6d5f7961 	ldclvs	9, cr7, [pc, #-388]	; 290 <_start-0x7d70>
 410:	73630073 	cmnvc	r3, #115	; 0x73
 414:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 418:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 41c:	7473632f 	ldrbtvc	r6, [r3], #-815	; 0x32f
 420:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
 424:	5f5f0063 	svcpl	0x005f0063
 428:	5f737362 	svcpl	0x00737362
 42c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 430:	005f5f74 	subseq	r5, pc, r4, ror pc	; <UNPREDICTABLE>
 434:	73625f5f 	cmnvc	r2, #380	; 0x17c
 438:	6e655f73 	mcrvs	15, 3, r5, cr5, cr3, {3}
 43c:	005f5f64 	subseq	r5, pc, r4, ror #30
 440:	5f737362 	svcpl	0x00737362
 444:	00646e65 	rsbeq	r6, r4, r5, ror #28
 448:	7473635f 	ldrbtvc	r6, [r3], #-863	; 0x35f
 44c:	00747261 	rsbseq	r7, r4, r1, ror #4
 450:	755f7461 	ldrbvc	r7, [pc, #-1121]	; fffffff7 <__bss_end__+0xffff697f>
 454:	5f726573 	svcpl	0x00726573
 458:	6576656c 	ldrbvs	r6, [r6, #-1388]!	; 0x56c
 45c:	4d50006c 	ldclmi	0, cr0, [r0, #-432]	; 0xfffffe50
 460:	5341505f 	movtpl	r5, #4191	; 0x105f
 464:	524f5753 	subpl	r5, pc, #21757952	; 0x14c0000
 468:	73630044 	cmnvc	r3, #68	; 0x44
 46c:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 470:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 474:	6265722f 	rsbvs	r7, r5, #-268435454	; 0xf0000002
 478:	2e746f6f 	cdpcs	15, 7, cr6, cr4, cr15, {3}
 47c:	4d500063 	ldclmi	0, cr0, [r0, #-396]	; 0xfffffe74
 480:	5453525f 	ldrbpl	r5, [r3], #-607	; 0x25f
 484:	52575f43 	subspl	r5, r7, #268	; 0x10c
 488:	5f474643 	svcpl	0x00474643
 48c:	4c4c5546 	cfstr64mi	mvdx5, [ip], {70}	; 0x46
 490:	5345525f 	movtpl	r5, #21087	; 0x525f
 494:	50005445 	andpl	r5, r0, r5, asr #8
 498:	44575f4d 	ldrbmi	r5, [r7], #-3917	; 0xf4d
 49c:	7300474f 	movwvc	r4, #1871	; 0x74f
 4a0:	755f7465 	ldrbvc	r7, [pc, #-1125]	; 43 <_start-0x7fbd>
 4a4:	5f726573 	svcpl	0x00726573
 4a8:	6576656c 	ldrbvs	r6, [r6, #-1388]!	; 0x56c
 4ac:	5550006c 	ldrbpl	r0, [r0, #-108]	; 0x6c
 4b0:	00323354 	eorseq	r3, r2, r4, asr r3
 4b4:	525f4d50 	subspl	r4, pc, #80, 26	; 0x1400
 4b8:	00435453 	subeq	r5, r3, r3, asr r4
 4bc:	72737063 	rsbsvc	r7, r3, #99	; 0x63
 4c0:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 4c4:	735f7961 	cmpvc	pc, #1589248	; 0x184000
 4c8:	63006365 	movwvs	r6, #869	; 0x365
 4cc:	30343173 	eorscc	r3, r4, r3, ror r1
 4d0:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 4d4:	69742f63 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
 4d8:	2e72656d 	cdpcs	5, 7, cr6, cr2, cr13, {3}
 4dc:	45470063 	strbmi	r0, [r7, #-99]	; 0x63
 4e0:	00323354 	eorseq	r3, r2, r4, asr r3
 4e4:	6b636974 	blvs	18daabc <__bss_end__+0x18d1444>
 4e8:	65640073 	strbvs	r0, [r4, #-115]!	; 0x73
 4ec:	5f79616c 	svcpl	0x0079616c
 4f0:	6c637963 	stclvs	9, cr7, [r3], #-396	; 0xfffffe74
 4f4:	64007365 	strvs	r7, [r0], #-869	; 0x365
 4f8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 4fc:	0073755f 	rsbseq	r7, r3, pc, asr r5
 500:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 504:	65675f72 	strbvs	r5, [r7, #-3954]!	; 0xf72
 508:	73755f74 	cmnvc	r5, #116, 30	; 0x1d0
 50c:	73006365 	movwvc	r6, #869	; 0x365
 510:	5f657a69 	svcpl	0x00657a69
 514:	666b0074 			; <UNDEFINED> instruction: 0x666b0074
 518:	5f656572 	svcpl	0x00656572
 51c:	006c6c61 	rsbeq	r6, ip, r1, ror #24
 520:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
 524:	5f64656e 	svcpl	0x0064656e
 528:	70616568 	rsbvc	r6, r1, r8, ror #10
 52c:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
 530:	6d656d00 	stclvs	13, cr6, [r5, #-0]
 534:	00746573 	rsbseq	r6, r4, r3, ror r5
 538:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
 53c:	6b2f6372 	blvs	bd930c <__bss_end__+0xbcfc94>
 540:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 544:	632e636f 	teqvs	lr, #-1140850687	; 0xbc000001
 548:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 54c:	00705f74 	rsbseq	r5, r0, r4, ror pc
 550:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
 554:	6e656d6e 	cdpvs	13, 6, cr6, cr5, cr14, {3}
 558:	6f720074 	svcvs	0x00720074
 55c:	65646e75 	strbvs	r6, [r4, #-3701]!	; 0xe75
 560:	626e5f64 	rsbvs	r5, lr, #100, 30	; 0x190
 564:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
 568:	616d6b00 	cmnvs	sp, r0, lsl #22
 56c:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 570:	6165685f 	cmnvs	r5, pc, asr r8
 574:	74705f70 	ldrbtvc	r5, [r0], #-3952	; 0xf70
 578:	5f5f0072 	svcpl	0x005f0072
 57c:	70616568 	rsbvc	r6, r1, r8, ror #10
 580:	6174735f 	cmnvs	r4, pc, asr r3
 584:	5f5f7472 	svcpl	0x005f7472
 588:	5f6f7400 	svcpl	0x006f7400
 58c:	6f6c6c61 	svcvs	0x006c6c61
 590:	65746163 	ldrbvs	r6, [r4, #-355]!	; 0x163
 594:	62696c00 	rsbvs	r6, r9, #0, 24
 598:	656d2f63 	strbvs	r2, [sp, #-3939]!	; 0xf63
 59c:	7465736d 	strbtvc	r7, [r5], #-877	; 0x36d
 5a0:	7500632e 	strvc	r6, [r0, #-814]	; 0x32e
 5a4:	5f747261 	svcpl	0x00747261
 5a8:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 5ac:	746e6900 	strbtvc	r6, [lr], #-2304	; 0x900
 5b0:	616e7265 	cmnvs	lr, r5, ror #4
 5b4:	75705f6c 	ldrbvc	r5, [r0, #-3948]!	; 0xf6c
 5b8:	61686374 	smcvs	34356	; 0x8634
 5bc:	696c0072 	stmdbvs	ip!, {r1, r4, r5, r6}^
 5c0:	702f6362 	eorvc	r6, pc, r2, ror #6
 5c4:	68637475 	stmdavs	r3!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
 5c8:	632e7261 	teqvs	lr, #268435462	; 0x10000006
	...

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000014 	andeq	r0, r0, r4, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	00008010 	andeq	r8, r0, r0, lsl r0
  1c:	00000050 	andeq	r0, r0, r0, asr r0
  20:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
  24:	00018e02 	andeq	r8, r1, r2, lsl #28
  28:	00000018 	andeq	r0, r0, r8, lsl r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	00008060 	andeq	r8, r0, r0, rrx
  34:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
  38:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
  3c:	86038504 	strhi	r8, [r3], -r4, lsl #10
  40:	00018e02 	andeq	r8, r1, r2, lsl #28
  44:	0000000c 	andeq	r0, r0, ip
  48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  4c:	7c020001 	stcvc	0, cr0, [r2], {1}
  50:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  54:	0000000c 	andeq	r0, r0, ip
  58:	00000044 	andeq	r0, r0, r4, asr #32
  5c:	00008110 	andeq	r8, r0, r0, lsl r1
  60:	00000010 	andeq	r0, r0, r0, lsl r0
  64:	00000014 	andeq	r0, r0, r4, lsl r0
  68:	00000044 	andeq	r0, r0, r4, asr #32
  6c:	00008120 	andeq	r8, r0, r0, lsr #2
  70:	0000007c 	andeq	r0, r0, ip, ror r0
  74:	83080e42 	movwhi	r0, #36418	; 0x8e42
  78:	00018e02 	andeq	r8, r1, r2, lsl #28
  7c:	00000014 	andeq	r0, r0, r4, lsl r0
  80:	00000044 	andeq	r0, r0, r4, asr #32
  84:	0000819c 	muleq	r0, ip, r1
  88:	0000002c 	andeq	r0, r0, ip, lsr #32
  8c:	83080e42 	movwhi	r0, #36418	; 0x8e42
  90:	00018e02 	andeq	r8, r1, r2, lsl #28
  94:	0000000c 	andeq	r0, r0, ip
  98:	00000044 	andeq	r0, r0, r4, asr #32
  9c:	000081c8 	andeq	r8, r0, r8, asr #3
  a0:	00000010 	andeq	r0, r0, r0, lsl r0
  a4:	00000014 	andeq	r0, r0, r4, lsl r0
  a8:	00000044 	andeq	r0, r0, r4, asr #32
  ac:	000081d8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
  b0:	0000002c 	andeq	r0, r0, ip, lsr #32
  b4:	83080e42 	movwhi	r0, #36418	; 0x8e42
  b8:	00018e02 	andeq	r8, r1, r2, lsl #28
  bc:	00000014 	andeq	r0, r0, r4, lsl r0
  c0:	00000044 	andeq	r0, r0, r4, asr #32
  c4:	00008204 	andeq	r8, r0, r4, lsl #4
  c8:	00000028 	andeq	r0, r0, r8, lsr #32
  cc:	83080e42 	movwhi	r0, #36418	; 0x8e42
  d0:	00018e02 	andeq	r8, r1, r2, lsl #28
  d4:	00000014 	andeq	r0, r0, r4, lsl r0
  d8:	00000044 	andeq	r0, r0, r4, asr #32
  dc:	0000822c 	andeq	r8, r0, ip, lsr #4
  e0:	00000028 	andeq	r0, r0, r8, lsr #32
  e4:	83080e42 	movwhi	r0, #36418	; 0x8e42
  e8:	00018e02 	andeq	r8, r1, r2, lsl #28
  ec:	00000014 	andeq	r0, r0, r4, lsl r0
  f0:	00000044 	andeq	r0, r0, r4, asr #32
  f4:	00008254 	andeq	r8, r0, r4, asr r2
  f8:	0000004c 	andeq	r0, r0, ip, asr #32
  fc:	83080e42 	movwhi	r0, #36418	; 0x8e42
 100:	00018e02 	andeq	r8, r1, r2, lsl #28
 104:	00000014 	andeq	r0, r0, r4, lsl r0
 108:	00000044 	andeq	r0, r0, r4, asr #32
 10c:	000082a0 	andeq	r8, r0, r0, lsr #5
 110:	00000028 	andeq	r0, r0, r8, lsr #32
 114:	83080e42 	movwhi	r0, #36418	; 0x8e42
 118:	00018e02 	andeq	r8, r1, r2, lsl #28
 11c:	00000014 	andeq	r0, r0, r4, lsl r0
 120:	00000044 	andeq	r0, r0, r4, asr #32
 124:	000082c8 	andeq	r8, r0, r8, asr #5
 128:	00000028 	andeq	r0, r0, r8, lsr #32
 12c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 130:	00018e02 	andeq	r8, r1, r2, lsl #28
 134:	00000014 	andeq	r0, r0, r4, lsl r0
 138:	00000044 	andeq	r0, r0, r4, asr #32
 13c:	000082f0 	strdeq	r8, [r0], -r0
 140:	00000028 	andeq	r0, r0, r8, lsr #32
 144:	83080e42 	movwhi	r0, #36418	; 0x8e42
 148:	00018e02 	andeq	r8, r1, r2, lsl #28
 14c:	0000000c 	andeq	r0, r0, ip
 150:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 154:	7c020001 	stcvc	0, cr0, [r2], {1}
 158:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 15c:	00000024 	andeq	r0, r0, r4, lsr #32
 160:	0000014c 	andeq	r0, r0, ip, asr #2
 164:	00008324 	andeq	r8, r0, r4, lsr #6
 168:	00000058 	andeq	r0, r0, r8, asr r0
 16c:	80100e42 	andshi	r0, r0, r2, asr #28
 170:	82038104 	andhi	r8, r3, #4, 2
 174:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
 178:	07841c0e 	streq	r1, [r4, lr, lsl #24]
 17c:	058e0685 	streq	r0, [lr, #1669]	; 0x685
 180:	00280e42 	eoreq	r0, r8, r2, asr #28
 184:	0000000c 	andeq	r0, r0, ip
 188:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 18c:	7c020001 	stcvc	0, cr0, [r2], {1}
 190:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 194:	00000018 	andeq	r0, r0, r8, lsl r0
 198:	00000184 	andeq	r0, r0, r4, lsl #3
 19c:	0000837c 	andeq	r8, r0, ip, ror r3
 1a0:	00000034 	andeq	r0, r0, r4, lsr r0
 1a4:	83100e42 	tsthi	r0, #1056	; 0x420
 1a8:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 1ac:	00018e02 	andeq	r8, r1, r2, lsl #28
 1b0:	0000000c 	andeq	r0, r0, ip
 1b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1b8:	7c020001 	stcvc	0, cr0, [r2], {1}
 1bc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1c0:	0000000c 	andeq	r0, r0, ip
 1c4:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 1c8:	000083b0 			; <UNDEFINED> instruction: 0x000083b0
 1cc:	00000014 	andeq	r0, r0, r4, lsl r0
 1d0:	0000000c 	andeq	r0, r0, ip
 1d4:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 1d8:	000083c4 	andeq	r8, r0, r4, asr #7
 1dc:	0000002c 	andeq	r0, r0, ip, lsr #32
 1e0:	0000000c 	andeq	r0, r0, ip
 1e4:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 1e8:	000083f0 	strdeq	r8, [r0], -r0
 1ec:	00000040 	andeq	r0, r0, r0, asr #32
 1f0:	00000020 	andeq	r0, r0, r0, lsr #32
 1f4:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 1f8:	00008430 	andeq	r8, r0, r0, lsr r4
 1fc:	00000198 	muleq	r0, r8, r1
 200:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 204:	86058506 	strhi	r8, [r5], -r6, lsl #10
 208:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 20c:	42018e02 	andmi	r8, r1, #2, 28
 210:	0000580e 	andeq	r5, r0, lr, lsl #16
 214:	00000014 	andeq	r0, r0, r4, lsl r0
 218:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 21c:	000085c8 	andeq	r8, r0, r8, asr #11
 220:	00000050 	andeq	r0, r0, r0, asr r0
 224:	83080e42 	movwhi	r0, #36418	; 0x8e42
 228:	00018e02 	andeq	r8, r1, r2, lsl #28
 22c:	00000028 	andeq	r0, r0, r8, lsr #32
 230:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 234:	00008618 	andeq	r8, r0, r8, lsl r6
 238:	00000288 	andeq	r0, r0, r8, lsl #5
 23c:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
 240:	86088509 	strhi	r8, [r8], -r9, lsl #10
 244:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
 248:	8a048905 	bhi	122664 <__bss_end__+0x118fec>
 24c:	8e028b03 	vmlahi.f64	d8, d2, d3
 250:	b00e4201 	andlt	r4, lr, r1, lsl #4
 254:	00000001 	andeq	r0, r0, r1
 258:	0000000c 	andeq	r0, r0, ip
 25c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 260:	7c020001 	stcvc	0, cr0, [r2], {1}
 264:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 268:	00000014 	andeq	r0, r0, r4, lsl r0
 26c:	00000258 	andeq	r0, r0, r8, asr r2
 270:	000088a0 	andeq	r8, r0, r0, lsr #17
 274:	00000028 	andeq	r0, r0, r8, lsr #32
 278:	83080e42 	movwhi	r0, #36418	; 0x8e42
 27c:	00018e02 	andeq	r8, r1, r2, lsl #28
 280:	0000000c 	andeq	r0, r0, ip
 284:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 288:	7c020001 	stcvc	0, cr0, [r2], {1}
 28c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 290:	00000014 	andeq	r0, r0, r4, lsl r0
 294:	00000280 	andeq	r0, r0, r0, lsl #5
 298:	000088c8 	andeq	r8, r0, r8, asr #17
 29c:	00000034 	andeq	r0, r0, r4, lsr r0
 2a0:	83080e42 	movwhi	r0, #36418	; 0x8e42
 2a4:	00018e02 	andeq	r8, r1, r2, lsl #28
 2a8:	0000000c 	andeq	r0, r0, ip
 2ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2b0:	7c020001 	stcvc	0, cr0, [r2], {1}
 2b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2b8:	0000000c 	andeq	r0, r0, ip
 2bc:	000002a8 	andeq	r0, r0, r8, lsr #5
 2c0:	000088fc 	strdeq	r8, [r0], -ip
 2c4:	00000018 	andeq	r0, r0, r8, lsl r0
 2c8:	0000000c 	andeq	r0, r0, ip
 2cc:	000002a8 	andeq	r0, r0, r8, lsr #5
 2d0:	00008914 	andeq	r8, r0, r4, lsl r9
 2d4:	00000014 	andeq	r0, r0, r4, lsl r0
 2d8:	00000014 	andeq	r0, r0, r4, lsl r0
 2dc:	000002a8 	andeq	r0, r0, r8, lsr #5
 2e0:	00008928 	andeq	r8, r0, r8, lsr #18
 2e4:	00000048 	andeq	r0, r0, r8, asr #32
 2e8:	83080e42 	movwhi	r0, #36418	; 0x8e42
 2ec:	00018e02 	andeq	r8, r1, r2, lsl #28
 2f0:	0000000c 	andeq	r0, r0, ip
 2f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2f8:	7c020001 	stcvc	0, cr0, [r2], {1}
 2fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 300:	0000000c 	andeq	r0, r0, ip
 304:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 308:	00008970 	andeq	r8, r0, r0, ror r9
 30c:	0000001c 	andeq	r0, r0, ip, lsl r0
 310:	00000014 	andeq	r0, r0, r4, lsl r0
 314:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 318:	0000898c 	andeq	r8, r0, ip, lsl #19
 31c:	00000014 	andeq	r0, r0, r4, lsl r0
 320:	83080e42 	movwhi	r0, #36418	; 0x8e42
 324:	00018e02 	andeq	r8, r1, r2, lsl #28
 328:	00000018 	andeq	r0, r0, r8, lsl r0
 32c:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 330:	000089a0 	andeq	r8, r0, r0, lsr #19
 334:	00000024 	andeq	r0, r0, r4, lsr #32
 338:	83100e42 	tsthi	r0, #1056	; 0x420
 33c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 340:	00018e02 	andeq	r8, r1, r2, lsl #28
 344:	00000014 	andeq	r0, r0, r4, lsl r0
 348:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 34c:	000089c4 	andeq	r8, r0, r4, asr #19
 350:	00000014 	andeq	r0, r0, r4, lsl r0
 354:	83080e42 	movwhi	r0, #36418	; 0x8e42
 358:	00018e02 	andeq	r8, r1, r2, lsl #28
 35c:	00000014 	andeq	r0, r0, r4, lsl r0
 360:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 364:	000089d8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
 368:	00000014 	andeq	r0, r0, r4, lsl r0
 36c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 370:	00018e02 	andeq	r8, r1, r2, lsl #28
 374:	0000000c 	andeq	r0, r0, ip
 378:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 37c:	7c020001 	stcvc	0, cr0, [r2], {1}
 380:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 384:	00000014 	andeq	r0, r0, r4, lsl r0
 388:	00000374 	andeq	r0, r0, r4, ror r3
 38c:	00008cc4 	andeq	r8, r0, r4, asr #25
 390:	00000064 	andeq	r0, r0, r4, rrx
 394:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 398:	00018e02 	andeq	r8, r1, r2, lsl #28
 39c:	00000014 	andeq	r0, r0, r4, lsl r0
 3a0:	00000374 	andeq	r0, r0, r4, ror r3
 3a4:	00008d28 	andeq	r8, r0, r8, lsr #26
 3a8:	00000094 	muleq	r0, r4, r0
 3ac:	83080e42 	movwhi	r0, #36418	; 0x8e42
 3b0:	00018e02 	andeq	r8, r1, r2, lsl #28
 3b4:	00000014 	andeq	r0, r0, r4, lsl r0
 3b8:	00000374 	andeq	r0, r0, r4, ror r3
 3bc:	00008dbc 			; <UNDEFINED> instruction: 0x00008dbc
 3c0:	00000058 	andeq	r0, r0, r8, asr r0
 3c4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 3c8:	00018e02 	andeq	r8, r1, r2, lsl #28
 3cc:	0000000c 	andeq	r0, r0, ip
 3d0:	00000374 	andeq	r0, r0, r4, ror r3
 3d4:	00008e14 	andeq	r8, r0, r4, lsl lr
 3d8:	00000018 	andeq	r0, r0, r8, lsl r0
 3dc:	0000000c 	andeq	r0, r0, ip
 3e0:	00000374 	andeq	r0, r0, r4, ror r3
 3e4:	00008e2c 	andeq	r8, r0, ip, lsr #28
 3e8:	00000010 	andeq	r0, r0, r0, lsl r0
 3ec:	0000000c 	andeq	r0, r0, ip
 3f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3f4:	7c020001 	stcvc	0, cr0, [r2], {1}
 3f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3fc:	0000000c 	andeq	r0, r0, ip
 400:	000003ec 	andeq	r0, r0, ip, ror #7
 404:	00008e3c 	andeq	r8, r0, ip, lsr lr
 408:	00000020 	andeq	r0, r0, r0, lsr #32
 40c:	0000000c 	andeq	r0, r0, ip
 410:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 414:	7c020001 	stcvc	0, cr0, [r2], {1}
 418:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 41c:	00000014 	andeq	r0, r0, r4, lsl r0
 420:	0000040c 	andeq	r0, r0, ip, lsl #8
 424:	00008e5c 	andeq	r8, r0, ip, asr lr
 428:	00000014 	andeq	r0, r0, r4, lsl r0
 42c:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 430:	00018e02 	andeq	r8, r1, r2, lsl #28
