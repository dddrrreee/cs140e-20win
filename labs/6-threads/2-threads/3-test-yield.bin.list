
3-test-yield.bin.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e3a0d302 	mov	sp, #134217728	; 0x8000000
    8004:	e3a0b000 	mov	fp, #0
    8008:	eb000238 	bl	88f0 <_cstart>
    800c:	eb00024f 	bl	8950 <rpi_reboot>

00008010 <wait_usec>:
// wait for <n> from the current time.  we yield
// until enough time passes.  if yield is fast and
// other threads don't run too long, this can be
// accurate real-time, even though we don't have 
// an actual real-time scheduler.
static void wait_usec(unsigned n) {
    8010:	e92d4030 	push	{r4, r5, lr}
    8014:	e24dd00c 	sub	sp, sp, #12
    8018:	e1a04000 	mov	r4, r0
    demand(n < 100000, "unlikely large delay = %dusec!\n", n);
    801c:	e59f3048 	ldr	r3, [pc, #72]	; 806c <wait_usec+0x5c>
    8020:	e1500003 	cmp	r0, r3
    8024:	9a000006 	bls	8044 <wait_usec+0x34>
    8028:	e58d0000 	str	r0, [sp]
    802c:	e59f003c 	ldr	r0, [pc, #60]	; 8070 <wait_usec+0x60>
    8030:	e59f103c 	ldr	r1, [pc, #60]	; 8074 <wait_usec+0x64>
    8034:	e59f203c 	ldr	r2, [pc, #60]	; 8078 <wait_usec+0x68>
    8038:	e3a03010 	mov	r3, #16
    803c:	eb0000cc 	bl	8374 <printk>
    8040:	eb000242 	bl	8950 <rpi_reboot>
    unsigned start = timer_get_usec();
    8044:	eb00025a 	bl	89b4 <timer_get_usec>
    8048:	e1a05000 	mov	r5, r0
    while(1) {
        if((timer_get_usec() - start) < n)
    804c:	eb000258 	bl	89b4 <timer_get_usec>
    8050:	e0650000 	rsb	r0, r5, r0
    8054:	e1500004 	cmp	r0, r4
    8058:	3a000001 	bcc	8064 <wait_usec+0x54>
            return;
        rpi_yield();
    805c:	eb000086 	bl	827c <rpi_yield>
    }
    8060:	eafffff9 	b	804c <wait_usec+0x3c>
}
    8064:	e28dd00c 	add	sp, sp, #12
    8068:	e8bd8030 	pop	{r4, r5, pc}
    806c:	0001869f 	muleq	r1, pc, r6	; <UNPREDICTABLE>
    8070:	00008ee4 	andeq	r8, r0, r4, ror #29
    8074:	00008f30 	andeq	r8, r0, r0, lsr pc
    8078:	00008eb8 			; <UNDEFINED> instruction: 0x00008eb8

0000807c <blink>:

// if our threads are fast enough you can run a bunch of these
// and not see weird flickers.
void blink(void *arg) {
    807c:	e92d4070 	push	{r4, r5, r6, lr}
    8080:	e1a04000 	mov	r4, r0
    struct pwm *p = arg;

    gpio_set_output(p->pin);
    8084:	e5900004 	ldr	r0, [r0, #4]
    8088:	eb0002e9 	bl	8c34 <gpio_set_output>
    demand(p->duty > 0 && p->duty <= 100, wierd duty cycle!);
    808c:	e5945000 	ldr	r5, [r4]
    8090:	e2453001 	sub	r3, r5, #1
    8094:	e3530063 	cmp	r3, #99	; 0x63
    8098:	9a000005 	bls	80b4 <blink+0x38>
    809c:	e59f0038 	ldr	r0, [pc, #56]	; 80dc <blink+0x60>
    80a0:	e59f1038 	ldr	r1, [pc, #56]	; 80e0 <blink+0x64>
    80a4:	e59f2038 	ldr	r2, [pc, #56]	; 80e4 <blink+0x68>
    80a8:	e3a0301f 	mov	r3, #31
    80ac:	eb0000b0 	bl	8374 <printk>
    80b0:	eb000226 	bl	8950 <rpi_reboot>
    
    // how long we should be on out of 100 usec.
    unsigned on_usec = p->duty;
    unsigned off_usec = 100 - p->duty;
    80b4:	e2656064 	rsb	r6, r5, #100	; 0x64
    while(1) {
        gpio_set_on(p->pin);
    80b8:	e5940004 	ldr	r0, [r4, #4]
    80bc:	eb0002e0 	bl	8c44 <gpio_set_on>
        wait_usec(on_usec);
    80c0:	e1a00005 	mov	r0, r5
    80c4:	ebffffd1 	bl	8010 <wait_usec>
        
        gpio_set_off(p->pin);
    80c8:	e5940004 	ldr	r0, [r4, #4]
    80cc:	eb0002e5 	bl	8c68 <gpio_set_off>
        wait_usec(off_usec);
    80d0:	e1a00006 	mov	r0, r6
    80d4:	ebffffcd 	bl	8010 <wait_usec>
    80d8:	eafffff6 	b	80b8 <blink+0x3c>
    80dc:	00008f40 	andeq	r8, r0, r0, asr #30
    80e0:	00008f30 	andeq	r8, r0, r0, lsr pc
    80e4:	00008ec4 	andeq	r8, r0, r4, asr #29

000080e8 <notmain>:
    }
}

void notmain(void) {
    80e8:	e92d4070 	push	{r4, r5, r6, lr}
    80ec:	e24dd010 	sub	sp, sp, #16
    uart_init();
    80f0:	eb000265 	bl	8a8c <uart_init>
    kmalloc_init();
    80f4:	eb00033a 	bl	8de4 <kmalloc_init>

    struct pwm t_75 = {.duty = 75, .pin = 20 },
    80f8:	e59f4050 	ldr	r4, [pc, #80]	; 8150 <notmain+0x68>
    80fc:	e28d3008 	add	r3, sp, #8
    8100:	e2842014 	add	r2, r4, #20
    8104:	e8920003 	ldm	r2, {r0, r1}
    8108:	e8830003 	stm	r3, {r0, r1}
               t_25 = {.duty = 25, .pin = 21 };
    810c:	e284201c 	add	r2, r4, #28
    8110:	e8920003 	ldm	r2, {r0, r1}
    8114:	e88d0003 	stm	sp, {r0, r1}

    rpi_fork(blink, &t_75);
    8118:	e59f6034 	ldr	r6, [pc, #52]	; 8154 <notmain+0x6c>
    811c:	e1a00006 	mov	r0, r6
    8120:	e1a01003 	mov	r1, r3
    8124:	eb00003f 	bl	8228 <rpi_fork>
    rpi_fork(blink, &t_25);
    8128:	e1a00006 	mov	r0, r6
    812c:	e1a0100d 	mov	r1, sp
    8130:	eb00003c 	bl	8228 <rpi_fork>
    rpi_thread_start();
    8134:	eb00005a 	bl	82a4 <rpi_thread_start>
    panic("should never return!\n");
    8138:	e59f0018 	ldr	r0, [pc, #24]	; 8158 <notmain+0x70>
    813c:	e59f1018 	ldr	r1, [pc, #24]	; 815c <notmain+0x74>
    8140:	e2842024 	add	r2, r4, #36	; 0x24
    8144:	e3a03037 	mov	r3, #55	; 0x37
    8148:	eb000089 	bl	8374 <printk>
    814c:	eb0001ff 	bl	8950 <rpi_reboot>
    8150:	00008eb8 			; <UNDEFINED> instruction: 0x00008eb8
    8154:	0000807c 	andeq	r8, r0, ip, ror r0
    8158:	00008f8c 	andeq	r8, r0, ip, lsl #31
    815c:	00008f30 	andeq	r8, r0, r0, lsr pc

00008160 <Q_empty>:
} Q_t;

// used for iteration.
static E *Q_start(Q_t *q)   { return q->head; }
static E *Q_next(E *e)      { return e->next; }
static int Q_empty(Q_t *q)  { return q->head == 0; }
    8160:	e5900000 	ldr	r0, [r0]
    8164:	e2700001 	rsbs	r0, r0, #1
    8168:	33a00000 	movcc	r0, #0
    816c:	e12fff1e 	bx	lr

00008170 <Q_pop>:

// remove from front of list.
static E *Q_pop(Q_t *q) {
    8170:	e92d4008 	push	{r3, lr}
    demand(q, bad input);
    8174:	e2503000 	subs	r3, r0, #0
    8178:	1a000005 	bne	8194 <Q_pop+0x24>
    817c:	e59f0058 	ldr	r0, [pc, #88]	; 81dc <Q_pop+0x6c>
    8180:	e59f1058 	ldr	r1, [pc, #88]	; 81e0 <Q_pop+0x70>
    8184:	e59f2058 	ldr	r2, [pc, #88]	; 81e4 <Q_pop+0x74>
    8188:	e3a03013 	mov	r3, #19
    818c:	eb000078 	bl	8374 <printk>
    8190:	eb0001ee 	bl	8950 <rpi_reboot>
    E *e = q->head;
    8194:	e5930000 	ldr	r0, [r3]

    if(!e) {
    8198:	e3500000 	cmp	r0, #0
    819c:	1a000008 	bne	81c4 <Q_pop+0x54>
        demand(!q->tail, invalid Q);
    81a0:	e5930004 	ldr	r0, [r3, #4]
    81a4:	e3500000 	cmp	r0, #0
    81a8:	08bd8008 	popeq	{r3, pc}
    81ac:	e59f0034 	ldr	r0, [pc, #52]	; 81e8 <Q_pop+0x78>
    81b0:	e59f1028 	ldr	r1, [pc, #40]	; 81e0 <Q_pop+0x70>
    81b4:	e59f2028 	ldr	r2, [pc, #40]	; 81e4 <Q_pop+0x74>
    81b8:	e3a03017 	mov	r3, #23
    81bc:	eb00006c 	bl	8374 <printk>
    81c0:	eb0001e2 	bl	8950 <rpi_reboot>
        return 0;
    }
    q->head = e->next;
    81c4:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    81c8:	e5832000 	str	r2, [r3]
    if(!q->head)
    81cc:	e3520000 	cmp	r2, #0
    81d0:	18bd8008 	popne	{r3, pc}
        q->tail = 0;
    81d4:	e5832004 	str	r2, [r3, #4]
    return e;
}
    81d8:	e8bd8008 	pop	{r3, pc}
    81dc:	00009028 	andeq	r9, r0, r8, lsr #32
    81e0:	00009050 	andeq	r9, r0, r0, asr r0
    81e4:	00008fb4 			; <UNDEFINED> instruction: 0x00008fb4
    81e8:	00009054 	andeq	r9, r0, r4, asr r0

000081ec <th_alloc>:
rpi_thread_t *rpi_cur_thread(void) {
    return cur_thread;
}

// keep a cache of freed thread blocks.  call kmalloc if run out.
static rpi_thread_t *th_alloc(void) {
    81ec:	e92d4008 	push	{r3, lr}
    static Q_t freeq;
    rpi_thread_t *t = Q_pop(&freeq);
    81f0:	e59f0018 	ldr	r0, [pc, #24]	; 8210 <th_alloc+0x24>
    81f4:	ebffffdd 	bl	8170 <Q_pop>
    if(!t)
    81f8:	e3500000 	cmp	r0, #0
    81fc:	18bd8008 	popne	{r3, pc}
        // stack has to be 8-byte aligned.
        t = kmalloc_aligned(sizeof *t, 8);
    8200:	e59f000c 	ldr	r0, [pc, #12]	; 8214 <th_alloc+0x28>
    8204:	e3a01008 	mov	r1, #8
    8208:	eb0002d0 	bl	8d50 <kmalloc_aligned>
    return t;
}
    820c:	e8bd8008 	pop	{r3, pc}
    8210:	000092d8 	ldrdeq	r9, [r0], -r8
    8214:	00008048 	andeq	r8, r0, r8, asr #32

00008218 <rpi_cur_thread>:
static rpi_thread_t *scheduler_thread;  // first scheduler thread.

// return pointer to the current thread.  
rpi_thread_t *rpi_cur_thread(void) {
    return cur_thread;
}
    8218:	e59f3004 	ldr	r3, [pc, #4]	; 8224 <rpi_cur_thread+0xc>
    821c:	e5930008 	ldr	r0, [r3, #8]
    8220:	e12fff1e 	bx	lr
    8224:	000092d8 	ldrdeq	r9, [r0], -r8

00008228 <rpi_fork>:
/***********************************************************************
 * implement the code below.
 */

// create a new thread.
rpi_thread_t *rpi_fork(void (*code)(void *arg), void *arg) {
    8228:	e92d4008 	push	{r3, lr}
    rpi_thread_t *t = th_alloc();
    822c:	ebffffee 	bl	81ec <th_alloc>

    // do the brain-surgery on the new thread stack here.
    unimplemented();
    8230:	e59f0010 	ldr	r0, [pc, #16]	; 8248 <rpi_fork+0x20>
    8234:	e59f1010 	ldr	r1, [pc, #16]	; 824c <rpi_fork+0x24>
    8238:	e59f2010 	ldr	r2, [pc, #16]	; 8250 <rpi_fork+0x28>
    823c:	e3a03027 	mov	r3, #39	; 0x27
    8240:	eb00004b 	bl	8374 <printk>
    8244:	eb0001c1 	bl	8950 <rpi_reboot>
    8248:	00009084 	andeq	r9, r0, r4, lsl #1
    824c:	000090b0 	strheq	r9, [r0], -r0
    8250:	00008fbc 			; <UNDEFINED> instruction: 0x00008fbc

00008254 <rpi_exit>:
    Q_append(&runq, t);
    return t;
}

// exit current thread.
void rpi_exit(int exitcode) {
    8254:	e92d4008 	push	{r3, lr}
 	 * switch to it.
	 
	 * 3. otherwise we are done, switch to the scheduler thread 
	 * so we call back into the client code.
	 */
	unimplemented();
    8258:	e59f0010 	ldr	r0, [pc, #16]	; 8270 <rpi_exit+0x1c>
    825c:	e59f1010 	ldr	r1, [pc, #16]	; 8274 <rpi_exit+0x20>
    8260:	e59f2010 	ldr	r2, [pc, #16]	; 8278 <rpi_exit+0x24>
    8264:	e3a03038 	mov	r3, #56	; 0x38
    8268:	eb000041 	bl	8374 <printk>
    826c:	eb0001b7 	bl	8950 <rpi_reboot>
    8270:	00009084 	andeq	r9, r0, r4, lsl #1
    8274:	000090b0 	strheq	r9, [r0], -r0
    8278:	00008fc8 	andeq	r8, r0, r8, asr #31

0000827c <rpi_yield>:
}

// yield the current thread.
void rpi_yield(void) {
    827c:	e92d4008 	push	{r3, lr}
	// if cannot dequeue a thread from runq
	//	- there are no more runnable threads, return.  
	// otherwise: 
	//	1. put current thread on runq.
	// 	2. context switch to the new thread.
	unimplemented();
    8280:	e59f0010 	ldr	r0, [pc, #16]	; 8298 <rpi_yield+0x1c>
    8284:	e59f1010 	ldr	r1, [pc, #16]	; 829c <rpi_yield+0x20>
    8288:	e59f2010 	ldr	r2, [pc, #16]	; 82a0 <rpi_yield+0x24>
    828c:	e3a03042 	mov	r3, #66	; 0x42
    8290:	eb000037 	bl	8374 <printk>
    8294:	eb0001ad 	bl	8950 <rpi_reboot>
    8298:	00009084 	andeq	r9, r0, r4, lsl #1
    829c:	000090b0 	strheq	r9, [r0], -r0
    82a0:	00008fd4 	ldrdeq	r8, [r0], -r4

000082a4 <rpi_thread_start>:
/*
 * starts the thread system.  
 * note: our caller is not a thread!  so you have to figure
 * out how to handle this.
 */
void rpi_thread_start(void) {
    82a4:	e92d4008 	push	{r3, lr}
    AssertNow(offsetof(rpi_thread_t, stack) % 8 == 0);
    // statically check that the register save area is at offset 0.
    AssertNow(offsetof(rpi_thread_t, reg_save_area) == 0);

    // no other runnable thread: return.
    if(Q_empty(&runq))
    82a8:	e59f002c 	ldr	r0, [pc, #44]	; 82dc <rpi_thread_start+0x38>
    82ac:	ebffffab 	bl	8160 <Q_empty>
    82b0:	e3500000 	cmp	r0, #0
    82b4:	18bd8008 	popne	{r3, pc}

    //  1. create a new fake thread 
    //  2. dequeue a thread from the runq
    //  3. context switch to it, saving current state in
    //	    <scheduler_thread>
    scheduler_thread = th_alloc();
    82b8:	ebffffcb 	bl	81ec <th_alloc>
    82bc:	e59f301c 	ldr	r3, [pc, #28]	; 82e0 <rpi_thread_start+0x3c>
    82c0:	e5830014 	str	r0, [r3, #20]
    unimplemented();
    82c4:	e59f0018 	ldr	r0, [pc, #24]	; 82e4 <rpi_thread_start+0x40>
    82c8:	e59f1018 	ldr	r1, [pc, #24]	; 82e8 <rpi_thread_start+0x44>
    82cc:	e59f2018 	ldr	r2, [pc, #24]	; 82ec <rpi_thread_start+0x48>
    82d0:	e3a03059 	mov	r3, #89	; 0x59
    82d4:	eb000026 	bl	8374 <printk>
    82d8:	eb00019c 	bl	8950 <rpi_reboot>
    82dc:	000092e4 	andeq	r9, r0, r4, ror #5
    82e0:	000092d8 	ldrdeq	r9, [r0], -r8
    82e4:	00009084 	andeq	r9, r0, r4, lsl #1
    82e8:	000090b0 	strheq	r9, [r0], -r0
    82ec:	00008fe0 	andeq	r8, r0, r0, ror #31

000082f0 <rpi_exact_sleep>:
 */

// put the current thread on a blocked queue: resume in 
// exactly // <usec> micro-seconds.  not before, not after.
// should give low-error resumption times.
void rpi_exact_sleep(uint32_t usec) {
    82f0:	e92d4008 	push	{r3, lr}
    unimplemented();
    82f4:	e59f0010 	ldr	r0, [pc, #16]	; 830c <rpi_exact_sleep+0x1c>
    82f8:	e59f1010 	ldr	r1, [pc, #16]	; 8310 <rpi_exact_sleep+0x20>
    82fc:	e59f2010 	ldr	r2, [pc, #16]	; 8314 <rpi_exact_sleep+0x24>
    8300:	e3a03065 	mov	r3, #101	; 0x65
    8304:	eb00001a 	bl	8374 <printk>
    8308:	eb000190 	bl	8950 <rpi_reboot>
    830c:	00009084 	andeq	r9, r0, r4, lsl #1
    8310:	000090b0 	strheq	r9, [r0], -r0
    8314:	00008ff4 	strdeq	r8, [r0], -r4

00008318 <rpi_fork_bounded>:

// fork a thread that guarantees it will 
// only run for <usec> until blocking.  this allows
// us to check for bad behavior / scheduling conflicts.
rpi_thread_t *
rpi_fork_bounded(void (*code)(void *arg), void *arg) {
    8318:	e92d4008 	push	{r3, lr}
    unimplemented();
    831c:	e59f0010 	ldr	r0, [pc, #16]	; 8334 <rpi_fork_bounded+0x1c>
    8320:	e59f1010 	ldr	r1, [pc, #16]	; 8338 <rpi_fork_bounded+0x20>
    8324:	e59f2010 	ldr	r2, [pc, #16]	; 833c <rpi_fork_bounded+0x24>
    8328:	e3a0306d 	mov	r3, #109	; 0x6d
    832c:	eb000010 	bl	8374 <printk>
    8330:	eb000186 	bl	8950 <rpi_reboot>
    8334:	00009084 	andeq	r9, r0, r4, lsl #1
    8338:	000090b0 	strheq	r9, [r0], -r0
    833c:	00009004 	andeq	r9, r0, r4

00008340 <rpi_get_stats>:
                missed_deadlines,  // number of sleeps we were off on.
                missed_error,      // total usec of missed deadlines
                created_threads,
                exited_threads;
};
struct rpi_thread_stats rpi_get_stats(void) {
    8340:	e92d4008 	push	{r3, lr}
    unimplemented();
    8344:	e59f0010 	ldr	r0, [pc, #16]	; 835c <rpi_get_stats+0x1c>
    8348:	e59f1010 	ldr	r1, [pc, #16]	; 8360 <rpi_get_stats+0x20>
    834c:	e59f2010 	ldr	r2, [pc, #16]	; 8364 <rpi_get_stats+0x24>
    8350:	e3a03078 	mov	r3, #120	; 0x78
    8354:	eb000006 	bl	8374 <printk>
    8358:	eb00017c 	bl	8950 <rpi_reboot>
    835c:	00009084 	andeq	r9, r0, r4, lsl #1
    8360:	000090b0 	strheq	r9, [r0], -r0
    8364:	00009018 	andeq	r9, r0, r8, lsl r0

00008368 <rpi_get_sp>:
    8368:	e12fff1e 	bx	lr

0000836c <rpi_cswitch>:
    836c:	e12fff1e 	bx	lr

00008370 <rpi_init_trampoline>:
    8370:	e12fff1e 	bx	lr

00008374 <printk>:
#include <stdarg.h>

#include "rpi.h"
#include "va-printk.h"

int printk(const char *fmt, ...) {
    8374:	e92d000f 	push	{r0, r1, r2, r3}
    8378:	e92d4030 	push	{r4, r5, lr}
    837c:	e24dd00c 	sub	sp, sp, #12
    // this is a really huge buffer for a pi.   could do this better.
    static char buf[1024];
    va_list args;

    va_start(args, fmt);
    8380:	e28d301c 	add	r3, sp, #28
    8384:	e58d3004 	str	r3, [sp, #4]
        int sz = va_printk(buf, sizeof buf, fmt, args);
    8388:	e59f4034 	ldr	r4, [pc, #52]	; 83c4 <printk+0x50>
    838c:	e1a00004 	mov	r0, r4
    8390:	e3a01b01 	mov	r1, #1024	; 0x400
    8394:	e59d2018 	ldr	r2, [sp, #24]
    8398:	eb0000b2 	bl	8668 <va_printk>
    839c:	e1a05000 	mov	r5, r0
    va_end(args);


#if 1
    putk(buf);
    83a0:	e59f3020 	ldr	r3, [pc, #32]	; 83c8 <printk+0x54>
    83a4:	e5933000 	ldr	r3, [r3]
    83a8:	e1a00004 	mov	r0, r4
    83ac:	e12fff33 	blx	r3
    int i;
    for(i = 0; buf[i]; i++)
        rpi_putchar(buf[i]);
#endif
    return sz;
}
    83b0:	e1a00005 	mov	r0, r5
    83b4:	e28dd00c 	add	sp, sp, #12
    83b8:	e8bd4030 	pop	{r4, r5, lr}
    83bc:	e28dd010 	add	sp, sp, #16
    83c0:	e12fff1e 	bx	lr
    83c4:	000092f0 	strdeq	r9, [r0], -r0
    83c8:	00008eb0 			; <UNDEFINED> instruction: 0x00008eb0

000083cc <internal_putk>:
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    83cc:	e92d4038 	push	{r3, r4, r5, lr}
    83d0:	e1a04000 	mov	r4, r0
    for(; *p; p++)
        rpi_putchar(*p);
    83d4:	e59f5020 	ldr	r5, [pc, #32]	; 83fc <internal_putk+0x30>
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    83d8:	ea000002 	b	83e8 <internal_putk+0x1c>
        rpi_putchar(*p);
    83dc:	e5953000 	ldr	r3, [r5]
    83e0:	e12fff33 	blx	r3
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    83e4:	e2844001 	add	r4, r4, #1
    83e8:	e5d40000 	ldrb	r0, [r4]
    83ec:	e3500000 	cmp	r0, #0
    83f0:	1afffff9 	bne	83dc <internal_putk+0x10>
        rpi_putchar(*p);
//  we were adding this.
//  rpi_putchar('\n');
    return 1;
}
    83f4:	e3a00001 	mov	r0, #1
    83f8:	e8bd8038 	pop	{r3, r4, r5, pc}
    83fc:	00008eb4 			; <UNDEFINED> instruction: 0x00008eb4

00008400 <isdigit>:
    if(puts_fp)
        putk = puts_fp;
}

// XXX: check sign promotion.
static int isdigit(int c) { return c >= '0' && c <= '9'; }
    8400:	e2400030 	sub	r0, r0, #48	; 0x30
    8404:	e3500009 	cmp	r0, #9
    8408:	83a00000 	movhi	r0, #0
    840c:	93a00001 	movls	r0, #1
    8410:	e12fff1e 	bx	lr

00008414 <pad>:

// don't move: can't be inlined, gcc seems to have a bug.
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
    8414:	e0611000 	rsb	r1, r1, r0
	// pad with leading spaces
	for(; len < width; len++)
		*p++ = ' ';
    8418:	e3a03020 	mov	r3, #32
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    841c:	ea000002 	b	842c <pad+0x18>
		*p++ = ' ';
    8420:	e5c03000 	strb	r3, [r0]
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8424:	e2811001 	add	r1, r1, #1
		*p++ = ' ';
    8428:	e2800001 	add	r0, r0, #1
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    842c:	e1510002 	cmp	r1, r2
    8430:	bafffffa 	blt	8420 <pad+0xc>
		*p++ = ' ';
	*p = 0;
    8434:	e3a03000 	mov	r3, #0
    8438:	e5c03000 	strb	r3, [r0]
	return p;
}
    843c:	e12fff1e 	bx	lr

00008440 <reverse>:

static char* reverse(char *dst, int n, char *p, char *start) {
	// drop the lower chars if the string is too big.
	int len = p - start + 1; // include \0
    8440:	e063c002 	rsb	ip, r3, r2
    8444:	e28cc001 	add	ip, ip, #1
	if(len > n)
    8448:	e15c0001 	cmp	ip, r1
		start += (len - n);
    844c:	c061100c 	rsbgt	r1, r1, ip
    8450:	c0833001 	addgt	r3, r3, r1

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    8454:	e2422001 	sub	r2, r2, #1
    8458:	e1a01000 	mov	r1, r0
    845c:	ea000002 	b	846c <reverse+0x2c>
		*dst++ = *p;
    8460:	e452c001 	ldrb	ip, [r2], #-1
    8464:	e5c1c000 	strb	ip, [r1]
    8468:	e2811001 	add	r1, r1, #1
		start += (len - n);

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    846c:	e1520003 	cmp	r2, r3
    8470:	2afffffa 	bcs	8460 <reverse+0x20>
		*dst++ = *p;
	*dst++ = 0;
    8474:	e3a03000 	mov	r3, #0
    8478:	e5c13000 	strb	r3, [r1]

	return s;
}
    847c:	e12fff1e 	bx	lr

00008480 <emit>:

static char* emit(unsigned base, char *dst, int n, int val, int width, int signed_p) {
    8480:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8484:	e24dd040 	sub	sp, sp, #64	; 0x40
    8488:	e1a05001 	mov	r5, r1
    848c:	e1a04002 	mov	r4, r2
    8490:	e59d2058 	ldr	r2, [sp, #88]	; 0x58
	// XXX: constrain width to be >= bit size: can change this.
	if(width > n)
    8494:	e1520004 	cmp	r2, r4
		width = n - 1;
    8498:	c2442001 	subgt	r2, r4, #1

	char buf[64], *p = buf; 
	unsigned u = val;
    849c:	e1a0c003 	mov	ip, r3

	switch(base) { 
    84a0:	e2400002 	sub	r0, r0, #2
    84a4:	e350000e 	cmp	r0, #14
    84a8:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
    84ac:	ea000042 	b	85bc <emit+0x13c>
    84b0:	00008594 	muleq	r0, r4, r5
    84b4:	000085bc 			; <UNDEFINED> instruction: 0x000085bc
    84b8:	000085bc 			; <UNDEFINED> instruction: 0x000085bc
    84bc:	000085bc 			; <UNDEFINED> instruction: 0x000085bc
    84c0:	000085bc 			; <UNDEFINED> instruction: 0x000085bc
    84c4:	000085bc 			; <UNDEFINED> instruction: 0x000085bc
    84c8:	00008588 	andeq	r8, r0, r8, lsl #11
    84cc:	000085bc 			; <UNDEFINED> instruction: 0x000085bc
    84d0:	000084ec 	andeq	r8, r0, ip, ror #9
    84d4:	000085bc 			; <UNDEFINED> instruction: 0x000085bc
    84d8:	000085bc 			; <UNDEFINED> instruction: 0x000085bc
    84dc:	000085bc 			; <UNDEFINED> instruction: 0x000085bc
    84e0:	000085bc 			; <UNDEFINED> instruction: 0x000085bc
    84e4:	000085bc 			; <UNDEFINED> instruction: 0x000085bc
    84e8:	00008560 	andeq	r8, r0, r0, ror #10
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
    84ec:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
    84f0:	e2911000 	adds	r1, r1, #0
    84f4:	13a01001 	movne	r1, #1
    84f8:	e0111fa3 	ands	r1, r1, r3, lsr #31
				neg_p = 1;
				val = -val;
    84fc:	1263c000 	rsbne	ip, r3, #0
	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
				neg_p = 1;
    8500:	13a08001 	movne	r8, #1
	unsigned u = val;

	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
    8504:	03a08000 	moveq	r8, #0
			if(val < 0 && signed_p) {
				neg_p = 1;
    8508:	e1a0100d 	mov	r1, sp
				val = -val;
				u = val;
			}
			do { 
				*p++ = "0123456789"[u % 10];
    850c:	e59f70e8 	ldr	r7, [pc, #232]	; 85fc <emit+0x17c>
    8510:	e59f60e8 	ldr	r6, [pc, #232]	; 8600 <emit+0x180>
    8514:	ea000000 	b	851c <emit+0x9c>
    8518:	e1a01003 	mov	r1, r3
    851c:	e2813001 	add	r3, r1, #1
    8520:	e08e0c97 	umull	r0, lr, r7, ip
    8524:	e1a0e1ae 	lsr	lr, lr, #3
    8528:	e1a0000e 	mov	r0, lr
    852c:	e08ee10e 	add	lr, lr, lr, lsl #2
    8530:	e1a0e08e 	lsl	lr, lr, #1
    8534:	e06ee00c 	rsb	lr, lr, ip
    8538:	e7d6c00e 	ldrb	ip, [r6, lr]
    853c:	e5c1c000 	strb	ip, [r1]
			} while(u /= 10); 
    8540:	e1a0c000 	mov	ip, r0
    8544:	e3500000 	cmp	r0, #0
    8548:	1afffff2 	bne	8518 <emit+0x98>
			if(neg_p)
    854c:	e3580000 	cmp	r8, #0
				*p++ = '-';
    8550:	12813002 	addne	r3, r1, #2
    8554:	13a0002d 	movne	r0, #45	; 0x2d
    8558:	15c10001 	strbne	r0, [r1, #1]
    855c:	ea00001c 	b	85d4 <emit+0x154>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    8560:	e1a0e00d 	mov	lr, sp
			break;
		}
		case 16:
			u = val;
                        do {
                                *p++ = "0123456789abcdef"[u % 16];
    8564:	e59f0098 	ldr	r0, [pc, #152]	; 8604 <emit+0x184>
    8568:	e28e3001 	add	r3, lr, #1
    856c:	e20c100f 	and	r1, ip, #15
    8570:	e7d01001 	ldrb	r1, [r0, r1]
    8574:	e5ce1000 	strb	r1, [lr]
    8578:	e1a0e003 	mov	lr, r3
                        } while(u /= 16);
    857c:	e1b0c22c 	lsrs	ip, ip, #4
    8580:	1afffff8 	bne	8568 <emit+0xe8>
    8584:	ea000012 	b	85d4 <emit+0x154>
                        break;
		// just a single char
		case 8:
			*p++ = val;
    8588:	e5cd3000 	strb	r3, [sp]
    858c:	e28d3001 	add	r3, sp, #1
			break;
    8590:	ea00000f 	b	85d4 <emit+0x154>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    8594:	e1a0e00d 	mov	lr, sp
#if 0
			for(int i = 0; i < 32; i++)
				*p++ = "01"[(u & (1<<i)) != 0];
#else
                        do {
                        	*p++ = "01"[u % 2];
    8598:	e59f0068 	ldr	r0, [pc, #104]	; 8608 <emit+0x188>
    859c:	e28e3001 	add	r3, lr, #1
    85a0:	e20c1001 	and	r1, ip, #1
    85a4:	e7d01001 	ldrb	r1, [r0, r1]
    85a8:	e5ce1000 	strb	r1, [lr]
    85ac:	e1a0e003 	mov	lr, r3
			} while(u /= 2);
    85b0:	e1b0c0ac 	lsrs	ip, ip, #1
    85b4:	1afffff8 	bne	859c <emit+0x11c>
    85b8:	ea000005 	b	85d4 <emit+0x154>
#endif
			break;
		default:
			assert(0);
    85bc:	e59f0048 	ldr	r0, [pc, #72]	; 860c <emit+0x18c>
    85c0:	e59f1048 	ldr	r1, [pc, #72]	; 8610 <emit+0x190>
    85c4:	e59f2048 	ldr	r2, [pc, #72]	; 8614 <emit+0x194>
    85c8:	e3a03075 	mov	r3, #117	; 0x75
    85cc:	ebffff68 	bl	8374 <printk>
    85d0:	eb0000de 	bl	8950 <rpi_reboot>
	}
	// number string is reversed, so re-reverse it.
	return reverse(dst, n, pad(p, buf, width), buf);
    85d4:	e1a00003 	mov	r0, r3
    85d8:	e1a0100d 	mov	r1, sp
    85dc:	ebffff8c 	bl	8414 <pad>
    85e0:	e1a02000 	mov	r2, r0
    85e4:	e1a00005 	mov	r0, r5
    85e8:	e1a01004 	mov	r1, r4
    85ec:	e1a0300d 	mov	r3, sp
    85f0:	ebffff92 	bl	8440 <reverse>
}
    85f4:	e28dd040 	add	sp, sp, #64	; 0x40
    85f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    85fc:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    8600:	0000910c 	andeq	r9, r0, ip, lsl #2
    8604:	00009118 	andeq	r9, r0, r8, lsl r1
    8608:	0000912c 	andeq	r9, r0, ip, lsr #2
    860c:	000090e4 	andeq	r9, r0, r4, ror #1
    8610:	000090f8 	strdeq	r9, [r0], -r8
    8614:	000090c0 	andeq	r9, r0, r0, asr #1

00008618 <rpi_set_output>:
// override this is going through the network.
int (*rpi_putchar)(int c) = internal_putchar;
#endif


void rpi_set_output(int (*putc_fp)(int), int (*puts_fp)(const char *)) {
    8618:	e92d4008 	push	{r3, lr}
    assert(putc_fp);
    861c:	e3500000 	cmp	r0, #0
    8620:	1a000005 	bne	863c <rpi_set_output+0x24>
    8624:	e59f0028 	ldr	r0, [pc, #40]	; 8654 <rpi_set_output+0x3c>
    8628:	e59f1028 	ldr	r1, [pc, #40]	; 8658 <rpi_set_output+0x40>
    862c:	e59f2028 	ldr	r2, [pc, #40]	; 865c <rpi_set_output+0x44>
    8630:	e3a03020 	mov	r3, #32
    8634:	ebffff4e 	bl	8374 <printk>
    8638:	eb0000c4 	bl	8950 <rpi_reboot>
    rpi_putchar = putc_fp;
    863c:	e59f301c 	ldr	r3, [pc, #28]	; 8660 <rpi_set_output+0x48>
    8640:	e5830000 	str	r0, [r3]
    if(puts_fp)
    8644:	e3510000 	cmp	r1, #0
        putk = puts_fp;
    8648:	159f3014 	ldrne	r3, [pc, #20]	; 8664 <rpi_set_output+0x4c>
    864c:	15831000 	strne	r1, [r3]
    8650:	e8bd8008 	pop	{r3, pc}
    8654:	00009130 	andeq	r9, r0, r0, lsr r1
    8658:	000090f8 	strdeq	r9, [r0], -r8
    865c:	000090c8 	andeq	r9, r0, r8, asr #1
    8660:	00008eb4 			; <UNDEFINED> instruction: 0x00008eb4
    8664:	00008eb0 			; <UNDEFINED> instruction: 0x00008eb0

00008668 <va_printk>:
	return reverse(dst, n, pad(p, buf, width), buf);
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
    8668:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    866c:	e24dd08c 	sub	sp, sp, #140	; 0x8c
    8670:	e1a0b000 	mov	fp, r0
    8674:	e1a0a003 	mov	sl, r3
	char *p = buf, *e = buf + n - 1;
    8678:	e2411001 	sub	r1, r1, #1
    867c:	e0808001 	add	r8, r0, r1

	buf[0] = 0;
    8680:	e3a03000 	mov	r3, #0
    8684:	e5c03000 	strb	r3, [r0]
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;
    8688:	e1a04000 	mov	r4, r0

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    868c:	ea000087 	b	88b0 <va_printk+0x248>
		if(*fmt != '%')
    8690:	e3530025 	cmp	r3, #37	; 0x25
			*p++ = *fmt++;
    8694:	12822001 	addne	r2, r2, #1
    8698:	15c43000 	strbne	r3, [r4]
    869c:	12844001 	addne	r4, r4, #1
    86a0:	1a000082 	bne	88b0 <va_printk+0x248>
		
		else if(fmt[1] == '%') {
    86a4:	e5d21001 	ldrb	r1, [r2, #1]
    86a8:	e3510025 	cmp	r1, #37	; 0x25
			*p++ = *fmt;
    86ac:	05c43000 	strbeq	r3, [r4]
			fmt+=2;
    86b0:	02822002 	addeq	r2, r2, #2
	for(; *fmt && p < e; ) {
		if(*fmt != '%')
			*p++ = *fmt++;
		
		else if(fmt[1] == '%') {
			*p++ = *fmt;
    86b4:	02844001 	addeq	r4, r4, #1
    86b8:	0a00007c 	beq	88b0 <va_printk+0x248>
			fmt+=2;
		} else {	
			fmt++;
    86bc:	e2826001 	add	r6, r2, #1

			char *s, num[128];
			unsigned width = 0;
    86c0:	e3a07000 	mov	r7, #0

			while(isdigit(*fmt)) {
    86c4:	ea000004 	b	86dc <va_printk+0x74>
				width = width*10 + *fmt - '0';
    86c8:	e0877107 	add	r7, r7, r7, lsl #2
    86cc:	e1a07087 	lsl	r7, r7, #1
    86d0:	e0877005 	add	r7, r7, r5
    86d4:	e2477030 	sub	r7, r7, #48	; 0x30
				fmt++;
    86d8:	e2866001 	add	r6, r6, #1
			fmt++;

			char *s, num[128];
			unsigned width = 0;

			while(isdigit(*fmt)) {
    86dc:	e5d65000 	ldrb	r5, [r6]
    86e0:	e1a09005 	mov	r9, r5
    86e4:	e1a00005 	mov	r0, r5
    86e8:	ebffff44 	bl	8400 <isdigit>
    86ec:	e3500000 	cmp	r0, #0
    86f0:	1afffff4 	bne	86c8 <va_printk+0x60>
				width = width*10 + *fmt - '0';
				fmt++;
			}
			assert(width < 32);
    86f4:	e357001f 	cmp	r7, #31
    86f8:	9a000005 	bls	8714 <va_printk+0xac>
    86fc:	e59f01d8 	ldr	r0, [pc, #472]	; 88dc <va_printk+0x274>
    8700:	e59f11d8 	ldr	r1, [pc, #472]	; 88e0 <va_printk+0x278>
    8704:	e59f21d8 	ldr	r2, [pc, #472]	; 88e4 <va_printk+0x27c>
    8708:	e3a03092 	mov	r3, #146	; 0x92
    870c:	ebffff18 	bl	8374 <printk>
    8710:	eb00008e 	bl	8950 <rpi_reboot>
			
			switch(*fmt) {
    8714:	e2455062 	sub	r5, r5, #98	; 0x62
    8718:	e3550016 	cmp	r5, #22
    871c:	979ff105 	ldrls	pc, [pc, r5, lsl #2]
    8720:	ea000051 	b	886c <va_printk+0x204>
    8724:	00008810 	andeq	r8, r0, r0, lsl r8
    8728:	00008844 	andeq	r8, r0, r4, asr #16
    872c:	00008798 	muleq	r0, r8, r7
    8730:	0000886c 	andeq	r8, r0, ip, ror #16
    8734:	00008780 	andeq	r8, r0, r0, lsl #15
    8738:	0000886c 	andeq	r8, r0, ip, ror #16
    873c:	0000886c 	andeq	r8, r0, ip, ror #16
    8740:	0000886c 	andeq	r8, r0, ip, ror #16
    8744:	0000886c 	andeq	r8, r0, ip, ror #16
    8748:	0000886c 	andeq	r8, r0, ip, ror #16
    874c:	0000886c 	andeq	r8, r0, ip, ror #16
    8750:	0000886c 	andeq	r8, r0, ip, ror #16
    8754:	0000886c 	andeq	r8, r0, ip, ror #16
    8758:	0000886c 	andeq	r8, r0, ip, ror #16
    875c:	000087e8 	andeq	r8, r0, r8, ror #15
    8760:	0000886c 	andeq	r8, r0, ip, ror #16
    8764:	0000886c 	andeq	r8, r0, ip, ror #16
    8768:	00008838 	andeq	r8, r0, r8, lsr r8
    876c:	0000886c 	andeq	r8, r0, ip, ror #16
    8770:	000087c0 	andeq	r8, r0, r0, asr #15
    8774:	0000886c 	andeq	r8, r0, ip, ror #16
    8778:	0000886c 	andeq	r8, r0, ip, ror #16
    877c:	000087e8 	andeq	r8, r0, r8, ror #15
			case 'f':
			{
#ifndef RPI_FP_ENABLED
				panic("float not enabled!!!");
    8780:	e59f0160 	ldr	r0, [pc, #352]	; 88e8 <va_printk+0x280>
    8784:	e59f1154 	ldr	r1, [pc, #340]	; 88e0 <va_printk+0x278>
    8788:	e59f2154 	ldr	r2, [pc, #340]	; 88e4 <va_printk+0x27c>
    878c:	e3a03098 	mov	r3, #152	; 0x98
    8790:	ebfffef7 	bl	8374 <printk>
    8794:	eb00006d 	bl	8950 <rpi_reboot>

				break;
#endif
			}
			case 'd':
				s = emit(10, num, 128, va_arg(args, int), width, 1);
    8798:	e59a3000 	ldr	r3, [sl]
    879c:	e28aa004 	add	sl, sl, #4
    87a0:	e58d7000 	str	r7, [sp]
    87a4:	e3a02001 	mov	r2, #1
    87a8:	e58d2004 	str	r2, [sp, #4]
    87ac:	e3a0000a 	mov	r0, #10
    87b0:	e28d1008 	add	r1, sp, #8
    87b4:	e3a02080 	mov	r2, #128	; 0x80
    87b8:	ebffff30 	bl	8480 <emit>
				break;
    87bc:	ea000031 	b	8888 <va_printk+0x220>
			case 'u':
				s = emit(10, num, 128, va_arg(args, unsigned), width, 0);
    87c0:	e59a3000 	ldr	r3, [sl]
    87c4:	e28aa004 	add	sl, sl, #4
    87c8:	e58d7000 	str	r7, [sp]
    87cc:	e3a02000 	mov	r2, #0
    87d0:	e58d2004 	str	r2, [sp, #4]
    87d4:	e3a0000a 	mov	r0, #10
    87d8:	e28d1008 	add	r1, sp, #8
    87dc:	e3a02080 	mov	r2, #128	; 0x80
    87e0:	ebffff26 	bl	8480 <emit>
				break;
    87e4:	ea000027 	b	8888 <va_printk+0x220>
			case 'p':
			case 'x':
				s = emit(16, num, 128, va_arg(args, unsigned), width, 0);
    87e8:	e59a3000 	ldr	r3, [sl]
    87ec:	e28aa004 	add	sl, sl, #4
    87f0:	e58d7000 	str	r7, [sp]
    87f4:	e3a02000 	mov	r2, #0
    87f8:	e58d2004 	str	r2, [sp, #4]
    87fc:	e3a00010 	mov	r0, #16
    8800:	e28d1008 	add	r1, sp, #8
    8804:	e3a02080 	mov	r2, #128	; 0x80
    8808:	ebffff1c 	bl	8480 <emit>
				break;
    880c:	ea00001d 	b	8888 <va_printk+0x220>
			case 'b':
				s = emit(2, num, 128, va_arg(args, unsigned), width, 0);
    8810:	e59a3000 	ldr	r3, [sl]
    8814:	e28aa004 	add	sl, sl, #4
    8818:	e58d7000 	str	r7, [sp]
    881c:	e3a02000 	mov	r2, #0
    8820:	e58d2004 	str	r2, [sp, #4]
    8824:	e3a00002 	mov	r0, #2
    8828:	e28d1008 	add	r1, sp, #8
    882c:	e3a02080 	mov	r2, #128	; 0x80
    8830:	ebffff12 	bl	8480 <emit>
				break;
    8834:	ea000013 	b	8888 <va_printk+0x220>
			case 's':
				s = va_arg(args, char *);
    8838:	e59a0000 	ldr	r0, [sl]
    883c:	e28aa004 	add	sl, sl, #4
				break;
    8840:	ea000010 	b	8888 <va_printk+0x220>
			case 'c':
				s = emit(8, num, 128, va_arg(args, int),width,0);
    8844:	e59a3000 	ldr	r3, [sl]
    8848:	e28aa004 	add	sl, sl, #4
    884c:	e58d7000 	str	r7, [sp]
    8850:	e3a02000 	mov	r2, #0
    8854:	e58d2004 	str	r2, [sp, #4]
    8858:	e3a00008 	mov	r0, #8
    885c:	e08d1000 	add	r1, sp, r0
    8860:	e3a02080 	mov	r2, #128	; 0x80
    8864:	ebffff05 	bl	8480 <emit>
				break;
    8868:	ea000006 	b	8888 <va_printk+0x220>
			default: 
				panic("printk: not handling specifier '%c'\n", *fmt);
    886c:	e58d9000 	str	r9, [sp]
    8870:	e59f0074 	ldr	r0, [pc, #116]	; 88ec <va_printk+0x284>
    8874:	e59f1064 	ldr	r1, [pc, #100]	; 88e0 <va_printk+0x278>
    8878:	e59f2064 	ldr	r2, [pc, #100]	; 88e4 <va_printk+0x27c>
    887c:	e3a030b9 	mov	r3, #185	; 0xb9
    8880:	ebfffebb 	bl	8374 <printk>
    8884:	eb000031 	bl	8950 <rpi_reboot>
				return 0;   // ugh
			}
			fmt++;
    8888:	e2862001 	add	r2, r6, #1

			// safe string copy
			for(; p < e && *s; )
    888c:	ea000002 	b	889c <va_printk+0x234>
				*p++ = *s++;
    8890:	e2800001 	add	r0, r0, #1
    8894:	e5c43000 	strb	r3, [r4]
    8898:	e2844001 	add	r4, r4, #1
				return 0;   // ugh
			}
			fmt++;

			// safe string copy
			for(; p < e && *s; )
    889c:	e1540008 	cmp	r4, r8
    88a0:	2a000002 	bcs	88b0 <va_printk+0x248>
    88a4:	e5d03000 	ldrb	r3, [r0]
    88a8:	e3530000 	cmp	r3, #0
    88ac:	1afffff7 	bne	8890 <va_printk+0x228>

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    88b0:	e5d23000 	ldrb	r3, [r2]
    88b4:	e3530000 	cmp	r3, #0
    88b8:	0a000001 	beq	88c4 <va_printk+0x25c>
    88bc:	e1540008 	cmp	r4, r8
    88c0:	3affff72 	bcc	8690 <va_printk+0x28>
			// safe string copy
			for(; p < e && *s; )
				*p++ = *s++;
		}
	}
	*p++ = 0;
    88c4:	e2840001 	add	r0, r4, #1
    88c8:	e3a03000 	mov	r3, #0
    88cc:	e5c43000 	strb	r3, [r4]
	return p - buf;
}
    88d0:	e06b0000 	rsb	r0, fp, r0
    88d4:	e28dd08c 	add	sp, sp, #140	; 0x8c
    88d8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    88dc:	00009148 	andeq	r9, r0, r8, asr #2
    88e0:	000090f8 	strdeq	r9, [r0], -r8
    88e4:	000090d8 	ldrdeq	r9, [r0], -r8
    88e8:	00009164 	andeq	r9, r0, r4, ror #2
    88ec:	0000918c 	andeq	r9, r0, ip, lsl #3

000088f0 <_cstart>:
#include "rpi.h"

void _cstart() {
    88f0:	e92d4008 	push	{r3, lr}
    extern int __bss_start__, __bss_end__;
	void notmain();

    int* bss = &__bss_start__;
    88f4:	e59f3020 	ldr	r3, [pc, #32]	; 891c <_cstart+0x2c>
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    88f8:	e59f2020 	ldr	r2, [pc, #32]	; 8920 <_cstart+0x30>
        *bss++ = 0;
    88fc:	e3a01000 	mov	r1, #0
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    8900:	ea000001 	b	890c <_cstart+0x1c>
        *bss++ = 0;
    8904:	e5831000 	str	r1, [r3]
    8908:	e2833004 	add	r3, r3, #4
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    890c:	e1530002 	cmp	r3, r2
    8910:	3afffffb 	bcc	8904 <_cstart+0x14>
        *bss++ = 0;

    notmain(); 
    8914:	ebfffdf3 	bl	80e8 <notmain>
	rpi_reboot();
    8918:	eb00000c 	bl	8950 <rpi_reboot>
    891c:	000092d8 	ldrdeq	r9, [r0], -r8
    8920:	000096f8 	strdeq	r9, [r0], -r8

00008924 <at_user_level>:
 * works if we have a trashed stack pointer?
 */
static unsigned user_level = 0b10000;
int at_user_level(void) {
    unsigned cpsr = 0;
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    8924:	e10f0000 	mrs	r0, CPSR

    // user level = lower 5 bits = 0b10000);
    return (cpsr  & 0b11111)  == user_level;
    8928:	e200001f 	and	r0, r0, #31
}
    892c:	e3500010 	cmp	r0, #16
    8930:	13a00000 	movne	r0, #0
    8934:	03a00001 	moveq	r0, #1
    8938:	e12fff1e 	bx	lr

0000893c <set_user_level>:

// this is just used by the reboot code.
void set_user_level(void) {
    unsigned cpsr = 0;
    // XXX: shouldn't we just set the one bit?
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    893c:	e10f3000 	mrs	r3, CPSR
        cpsr = (cpsr & ~0b11111) | user_level;
    8940:	e3c3301f 	bic	r3, r3, #31
    8944:	e3833010 	orr	r3, r3, #16
    asm volatile("msr cpsr, %0" :: "r"(cpsr));
    8948:	e129f003 	msr	CPSR_fc, r3
    894c:	e12fff1e 	bx	lr

00008950 <rpi_reboot>:
}

void rpi_reboot(void) {
    8950:	e92d4008 	push	{r3, lr}
    if(at_user_level()) {
    8954:	ebfffff2 	bl	8924 <at_user_level>
    8958:	e3500000 	cmp	r0, #0
    895c:	0a000000 	beq	8964 <rpi_reboot+0x14>
        set_user_level();
    8960:	ebfffff5 	bl	893c <set_user_level>
        // of stuff.
        // assert(!at_user_level());
    }

    // gives uart time to flush: should just call flush directly.
    delay_ms(30);
    8964:	e3a0001e 	mov	r0, #30
    8968:	eb00001f 	bl	89ec <delay_ms>
    const int PM_WDOG = 0x20100024;
    const int PM_PASSWORD = 0x5a000000;
    const int PM_RSTC_WRCFG_FULL_RESET = 0x00000020;

    // timeout = 1/16th of a second? (whatever)
    PUT32(PM_WDOG, PM_PASSWORD | 1);
    896c:	e59f0014 	ldr	r0, [pc, #20]	; 8988 <rpi_reboot+0x38>
    8970:	e59f1014 	ldr	r1, [pc, #20]	; 898c <rpi_reboot+0x3c>
    8974:	eb000028 	bl	8a1c <PUT32>
    PUT32(PM_RSTC, PM_PASSWORD | PM_RSTC_WRCFG_FULL_RESET);
    8978:	e59f0010 	ldr	r0, [pc, #16]	; 8990 <rpi_reboot+0x40>
    897c:	e59f1010 	ldr	r1, [pc, #16]	; 8994 <rpi_reboot+0x44>
    8980:	eb000025 	bl	8a1c <PUT32>
    8984:	eafffffe 	b	8984 <rpi_reboot+0x34>
    8988:	20100024 	andscs	r0, r0, r4, lsr #32
    898c:	5a000001 	bpl	8998 <delay_cycles>
    8990:	2010001c 	andscs	r0, r0, ip, lsl r0
    8994:	5a000020 	bpl	8a1c <PUT32>

00008998 <delay_cycles>:
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    8998:	ea000001 	b	89a4 <delay_cycles+0xc>
        asm("add r1, r1, #0");
    899c:	e2811000 	add	r1, r1, #0
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    89a0:	e1a00003 	mov	r0, r3
    89a4:	e2403001 	sub	r3, r0, #1
    89a8:	e3500000 	cmp	r0, #0
    89ac:	1afffffa 	bne	899c <delay_cycles+0x4>
        asm("add r1, r1, #0");
}
    89b0:	e12fff1e 	bx	lr

000089b4 <timer_get_usec>:

// in usec
unsigned timer_get_usec(void) {
    89b4:	e92d4008 	push	{r3, lr}
    return GET32(0x20003004);
    89b8:	e59f0004 	ldr	r0, [pc, #4]	; 89c4 <timer_get_usec+0x10>
    89bc:	eb000022 	bl	8a4c <GET32>
}
    89c0:	e8bd8008 	pop	{r3, pc}
    89c4:	20003004 	andcs	r3, r0, r4

000089c8 <delay_us>:

void delay_us(unsigned us) {
    89c8:	e92d4038 	push	{r3, r4, r5, lr}
    89cc:	e1a05000 	mov	r5, r0
    unsigned rb = timer_get_usec();
    89d0:	ebfffff7 	bl	89b4 <timer_get_usec>
    89d4:	e1a04000 	mov	r4, r0
    while (1) {
        unsigned ra = timer_get_usec();
    89d8:	ebfffff5 	bl	89b4 <timer_get_usec>
        if ((ra - rb) >= us) {
    89dc:	e0640000 	rsb	r0, r4, r0
    89e0:	e1500005 	cmp	r0, r5
    89e4:	3afffffb 	bcc	89d8 <delay_us+0x10>
            break;
        }
    }
}
    89e8:	e8bd8038 	pop	{r3, r4, r5, pc}

000089ec <delay_ms>:
void delay_ms(unsigned ms) {
    89ec:	e92d4008 	push	{r3, lr}
    delay_us(ms*1000);
    89f0:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    89f4:	e0000093 	mul	r0, r3, r0
    89f8:	ebfffff2 	bl	89c8 <delay_us>
    89fc:	e8bd8008 	pop	{r3, pc}

00008a00 <delay_sec>:
}
void delay_sec(unsigned sec) {
    8a00:	e92d4008 	push	{r3, lr}
    delay_ms(sec*1000);
    8a04:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    8a08:	e0000093 	mul	r0, r3, r0
    8a0c:	ebfffff6 	bl	89ec <delay_ms>
    8a10:	e8bd8008 	pop	{r3, pc}

00008a14 <put32>:
    8a14:	e5801000 	str	r1, [r0]
    8a18:	e12fff1e 	bx	lr

00008a1c <PUT32>:
    8a1c:	e5801000 	str	r1, [r0]
    8a20:	e12fff1e 	bx	lr

00008a24 <put16>:
    8a24:	e1c010b0 	strh	r1, [r0]
    8a28:	e12fff1e 	bx	lr

00008a2c <PUT16>:
    8a2c:	e1c010b0 	strh	r1, [r0]
    8a30:	e12fff1e 	bx	lr

00008a34 <put8>:
    8a34:	e5c01000 	strb	r1, [r0]
    8a38:	e12fff1e 	bx	lr

00008a3c <PUT8>:
    8a3c:	e5c01000 	strb	r1, [r0]
    8a40:	e12fff1e 	bx	lr

00008a44 <get32>:
    8a44:	e5900000 	ldr	r0, [r0]
    8a48:	e12fff1e 	bx	lr

00008a4c <GET32>:
    8a4c:	e5900000 	ldr	r0, [r0]
    8a50:	e12fff1e 	bx	lr

00008a54 <GETPC>:
    8a54:	e1a0000e 	mov	r0, lr
    8a58:	e12fff1e 	bx	lr

00008a5c <dummy>:
    8a5c:	e12fff1e 	bx	lr

00008a60 <or_in32>:
    8a60:	e92d4070 	push	{r4, r5, r6, lr}
    8a64:	e1a04000 	mov	r4, r0
    8a68:	e1a05001 	mov	r5, r1
    8a6c:	ebfffff4 	bl	8a44 <get32>
    8a70:	e1801005 	orr	r1, r0, r5
    8a74:	e1a00004 	mov	r0, r4
    8a78:	ebffffe5 	bl	8a14 <put32>
    8a7c:	e8bd8070 	pop	{r4, r5, r6, pc}

00008a80 <uart_get>:
    8a80:	e59f0000 	ldr	r0, [pc]	; 8a88 <uart_get+0x8>
    8a84:	e12fff1e 	bx	lr
    8a88:	20215040 	eorcs	r5, r1, r0, asr #32

00008a8c <uart_init>:
    8a8c:	e92d4010 	push	{r4, lr}
    8a90:	e3a01002 	mov	r1, #2
    8a94:	e3a0000e 	mov	r0, #14
    8a98:	eb00004b 	bl	8bcc <gpio_set_function>
    8a9c:	e3a01002 	mov	r1, #2
    8aa0:	e3a0000f 	mov	r0, #15
    8aa4:	eb000048 	bl	8bcc <gpio_set_function>
    8aa8:	eb0000fa 	bl	8e98 <dev_barrier>
    8aac:	e3a01001 	mov	r1, #1
    8ab0:	e59f0064 	ldr	r0, [pc, #100]	; 8b1c <uart_init+0x90>
    8ab4:	ebffffe9 	bl	8a60 <or_in32>
    8ab8:	eb0000f6 	bl	8e98 <dev_barrier>
    8abc:	e59f405c 	ldr	r4, [pc, #92]	; 8b20 <uart_init+0x94>
    8ac0:	e3a01000 	mov	r1, #0
    8ac4:	e1a00004 	mov	r0, r4
    8ac8:	ebffffd1 	bl	8a14 <put32>
    8acc:	e3a01000 	mov	r1, #0
    8ad0:	e59f004c 	ldr	r0, [pc, #76]	; 8b24 <uart_init+0x98>
    8ad4:	ebffffce 	bl	8a14 <put32>
    8ad8:	e3a01003 	mov	r1, #3
    8adc:	e59f0044 	ldr	r0, [pc, #68]	; 8b28 <uart_init+0x9c>
    8ae0:	ebffffcb 	bl	8a14 <put32>
    8ae4:	e3a01000 	mov	r1, #0
    8ae8:	e59f003c 	ldr	r0, [pc, #60]	; 8b2c <uart_init+0xa0>
    8aec:	ebffffc8 	bl	8a14 <put32>
    8af0:	e3a010c7 	mov	r1, #199	; 0xc7
    8af4:	e59f0034 	ldr	r0, [pc, #52]	; 8b30 <uart_init+0xa4>
    8af8:	ebffffc5 	bl	8a14 <put32>
    8afc:	e59f1030 	ldr	r1, [pc, #48]	; 8b34 <uart_init+0xa8>
    8b00:	e59f0030 	ldr	r0, [pc, #48]	; 8b38 <uart_init+0xac>
    8b04:	ebffffc2 	bl	8a14 <put32>
    8b08:	e3a01003 	mov	r1, #3
    8b0c:	e1a00004 	mov	r0, r4
    8b10:	ebffffbf 	bl	8a14 <put32>
    8b14:	eb0000df 	bl	8e98 <dev_barrier>
    8b18:	e8bd8010 	pop	{r4, pc}
    8b1c:	20215004 	eorcs	r5, r1, r4
    8b20:	20215060 	eorcs	r5, r1, r0, rrx
    8b24:	20215044 	eorcs	r5, r1, r4, asr #32
    8b28:	2021504c 	eorcs	r5, r1, ip, asr #32
    8b2c:	20215050 	eorcs	r5, r1, r0, asr r0
    8b30:	20215048 	eorcs	r5, r1, r8, asr #32
    8b34:	0000010e 	andeq	r0, r0, lr, lsl #2
    8b38:	20215068 	eorcs	r5, r1, r8, rrx

00008b3c <uart_can_getc>:
    8b3c:	e92d4010 	push	{r4, lr}
    8b40:	e59f0008 	ldr	r0, [pc, #8]	; 8b50 <uart_can_getc+0x14>
    8b44:	ebffffbe 	bl	8a44 <get32>
    8b48:	e2000001 	and	r0, r0, #1
    8b4c:	e8bd8010 	pop	{r4, pc}
    8b50:	20215064 	eorcs	r5, r1, r4, rrx

00008b54 <uart_can_putc>:
    8b54:	e92d4010 	push	{r4, lr}
    8b58:	e59f0010 	ldr	r0, [pc, #16]	; 8b70 <uart_can_putc+0x1c>
    8b5c:	ebffffb8 	bl	8a44 <get32>
    8b60:	e3100002 	tst	r0, #2
    8b64:	13a00001 	movne	r0, #1
    8b68:	03a00000 	moveq	r0, #0
    8b6c:	e8bd8010 	pop	{r4, pc}
    8b70:	20215064 	eorcs	r5, r1, r4, rrx

00008b74 <uart_getc>:
    8b74:	e92d4010 	push	{r4, lr}
    8b78:	ebffffef 	bl	8b3c <uart_can_getc>
    8b7c:	e3500000 	cmp	r0, #0
    8b80:	0afffffc 	beq	8b78 <uart_getc+0x4>
    8b84:	e59f0008 	ldr	r0, [pc, #8]	; 8b94 <uart_getc+0x20>
    8b88:	ebffffad 	bl	8a44 <get32>
    8b8c:	e6ef0070 	uxtb	r0, r0
    8b90:	e8bd8010 	pop	{r4, pc}
    8b94:	20215040 	eorcs	r5, r1, r0, asr #32

00008b98 <uart_putc>:
    8b98:	e92d4010 	push	{r4, lr}
    8b9c:	e1a04000 	mov	r4, r0
    8ba0:	ebffffeb 	bl	8b54 <uart_can_putc>
    8ba4:	e3500000 	cmp	r0, #0
    8ba8:	0afffffc 	beq	8ba0 <uart_putc+0x8>
    8bac:	e6ef1074 	uxtb	r1, r4
    8bb0:	e59f0004 	ldr	r0, [pc, #4]	; 8bbc <uart_putc+0x24>
    8bb4:	ebffff96 	bl	8a14 <put32>
    8bb8:	e8bd8010 	pop	{r4, pc}
    8bbc:	20215040 	eorcs	r5, r1, r0, asr #32

00008bc0 <uart_has_data>:
    8bc0:	e92d4010 	push	{r4, lr}
    8bc4:	ebffffdc 	bl	8b3c <uart_can_getc>
    8bc8:	e8bd8010 	pop	{r4, pc}

00008bcc <gpio_set_function>:
    8bcc:	e350001f 	cmp	r0, #31
    8bd0:	812fff1e 	bxhi	lr
    8bd4:	e3d13007 	bics	r3, r1, #7
    8bd8:	112fff1e 	bxne	lr
    8bdc:	e92d4070 	push	{r4, r5, r6, lr}
    8be0:	e1a04001 	mov	r4, r1
    8be4:	e59f2044 	ldr	r2, [pc, #68]	; 8c30 <gpio_set_function+0x64>
    8be8:	e0832290 	umull	r2, r3, r0, r2
    8bec:	e1a031a3 	lsr	r3, r3, #3
    8bf0:	e1a06003 	mov	r6, r3
    8bf4:	e0833103 	add	r3, r3, r3, lsl #2
    8bf8:	e1a02083 	lsl	r2, r3, #1
    8bfc:	e0403002 	sub	r3, r0, r2
    8c00:	e0835083 	add	r5, r3, r3, lsl #1
    8c04:	e1a06106 	lsl	r6, r6, #2
    8c08:	e2866202 	add	r6, r6, #536870912	; 0x20000000
    8c0c:	e2866602 	add	r6, r6, #2097152	; 0x200000
    8c10:	e1a00006 	mov	r0, r6
    8c14:	ebffff8a 	bl	8a44 <get32>
    8c18:	e3a01007 	mov	r1, #7
    8c1c:	e1c01511 	bic	r1, r0, r1, lsl r5
    8c20:	e1811514 	orr	r1, r1, r4, lsl r5
    8c24:	e1a00006 	mov	r0, r6
    8c28:	ebffff79 	bl	8a14 <put32>
    8c2c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8c30:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd

00008c34 <gpio_set_output>:
    8c34:	e92d4010 	push	{r4, lr}
    8c38:	e3a01001 	mov	r1, #1
    8c3c:	ebffffe2 	bl	8bcc <gpio_set_function>
    8c40:	e8bd8010 	pop	{r4, pc}

00008c44 <gpio_set_on>:
    8c44:	e350001f 	cmp	r0, #31
    8c48:	812fff1e 	bxhi	lr
    8c4c:	e92d4010 	push	{r4, lr}
    8c50:	e3a01001 	mov	r1, #1
    8c54:	e1a01011 	lsl	r1, r1, r0
    8c58:	e59f0004 	ldr	r0, [pc, #4]	; 8c64 <gpio_set_on+0x20>
    8c5c:	ebffff6e 	bl	8a1c <PUT32>
    8c60:	e8bd8010 	pop	{r4, pc}
    8c64:	2020001c 	eorcs	r0, r0, ip, lsl r0

00008c68 <gpio_set_off>:
    8c68:	e350001f 	cmp	r0, #31
    8c6c:	812fff1e 	bxhi	lr
    8c70:	e92d4010 	push	{r4, lr}
    8c74:	e3a01001 	mov	r1, #1
    8c78:	e1a01011 	lsl	r1, r1, r0
    8c7c:	e59f0004 	ldr	r0, [pc, #4]	; 8c88 <gpio_set_off+0x20>
    8c80:	ebffff65 	bl	8a1c <PUT32>
    8c84:	e8bd8010 	pop	{r4, pc}
    8c88:	20200028 	eorcs	r0, r0, r8, lsr #32

00008c8c <gpio_set_input>:
    8c8c:	e92d4010 	push	{r4, lr}
    8c90:	e3a01000 	mov	r1, #0
    8c94:	ebffffcc 	bl	8bcc <gpio_set_function>
    8c98:	e8bd8010 	pop	{r4, pc}

00008c9c <gpio_write>:
    8c9c:	e92d4010 	push	{r4, lr}
    8ca0:	e3510000 	cmp	r1, #0
    8ca4:	1a000001 	bne	8cb0 <gpio_write+0x14>
    8ca8:	ebffffee 	bl	8c68 <gpio_set_off>
    8cac:	e8bd8010 	pop	{r4, pc}
    8cb0:	ebffffe3 	bl	8c44 <gpio_set_on>
    8cb4:	e8bd8010 	pop	{r4, pc}

00008cb8 <gpio_read>:
    8cb8:	e350001f 	cmp	r0, #31
    8cbc:	8a000007 	bhi	8ce0 <gpio_read+0x28>
    8cc0:	e92d4010 	push	{r4, lr}
    8cc4:	e200401f 	and	r4, r0, #31
    8cc8:	e59f3018 	ldr	r3, [pc, #24]	; 8ce8 <gpio_read+0x30>
    8ccc:	e08302a0 	add	r0, r3, r0, lsr #5
    8cd0:	ebffff5d 	bl	8a4c <GET32>
    8cd4:	e1a00430 	lsr	r0, r0, r4
    8cd8:	e2000001 	and	r0, r0, #1
    8cdc:	e8bd8010 	pop	{r4, pc}
    8ce0:	e3e00000 	mvn	r0, #0
    8ce4:	e12fff1e 	bx	lr
    8ce8:	20200034 	eorcs	r0, r0, r4, lsr r0

00008cec <kmalloc>:
 *  - The returned pointer should always be 4-byte aligned.  
 *    Easiest way is to make sure the heap pointer starts 4-byte
 *    and you always round up the number of bytes.  Make sure
 *    you put an assertion in.  
 */
void *kmalloc(unsigned nbytes) {
    8cec:	e92d4010 	push	{r4, lr}
    demand(init_p, calling before initialized);
    8cf0:	e59f3048 	ldr	r3, [pc, #72]	; 8d40 <kmalloc+0x54>
    8cf4:	e5933000 	ldr	r3, [r3]
    8cf8:	e3530000 	cmp	r3, #0
    8cfc:	1a000005 	bne	8d18 <kmalloc+0x2c>
    8d00:	e59f003c 	ldr	r0, [pc, #60]	; 8d44 <kmalloc+0x58>
    8d04:	e59f103c 	ldr	r1, [pc, #60]	; 8d48 <kmalloc+0x5c>
    8d08:	e59f203c 	ldr	r2, [pc, #60]	; 8d4c <kmalloc+0x60>
    8d0c:	e3a0301a 	mov	r3, #26
    8d10:	ebfffd97 	bl	8374 <printk>
    8d14:	ebffff0d 	bl	8950 <rpi_reboot>
    
    void* to_allocate = heap_ptr;
    8d18:	e59f3020 	ldr	r3, [pc, #32]	; 8d40 <kmalloc+0x54>
    8d1c:	e5934004 	ldr	r4, [r3, #4]
    unsigned rounded_nbytes = roundup(nbytes, 4);
    8d20:	e2802003 	add	r2, r0, #3
    8d24:	e3c22003 	bic	r2, r2, #3
    heap_ptr += rounded_nbytes;
    8d28:	e0840002 	add	r0, r4, r2
    8d2c:	e5830004 	str	r0, [r3, #4]
    memset(heap_ptr, 0, rounded_nbytes);
    8d30:	e3a01000 	mov	r1, #0
    8d34:	eb00004a 	bl	8e64 <memset>
    return to_allocate;

}
    8d38:	e1a00004 	mov	r0, r4
    8d3c:	e8bd8010 	pop	{r4, pc}
    8d40:	000096f0 	strdeq	r9, [r0], -r0
    8d44:	000091ec 	andeq	r9, r0, ip, ror #3
    8d48:	0000922c 	andeq	r9, r0, ip, lsr #4
    8d4c:	000091c4 	andeq	r9, r0, r4, asr #3

00008d50 <kmalloc_aligned>:

// address of returned pointer should be a multiple of
// alignment.
void *kmalloc_aligned(unsigned nbytes, unsigned alignment) {
    8d50:	e92d4008 	push	{r3, lr}
    demand(init_p, calling before initialized);
    8d54:	e59f3074 	ldr	r3, [pc, #116]	; 8dd0 <kmalloc_aligned+0x80>
    8d58:	e5933000 	ldr	r3, [r3]
    8d5c:	e3530000 	cmp	r3, #0
    8d60:	1a000005 	bne	8d7c <kmalloc_aligned+0x2c>
    8d64:	e59f0068 	ldr	r0, [pc, #104]	; 8dd4 <kmalloc_aligned+0x84>
    8d68:	e59f1068 	ldr	r1, [pc, #104]	; 8dd8 <kmalloc_aligned+0x88>
    8d6c:	e59f2068 	ldr	r2, [pc, #104]	; 8ddc <kmalloc_aligned+0x8c>
    8d70:	e3a03027 	mov	r3, #39	; 0x27
    8d74:	ebfffd7e 	bl	8374 <printk>
    8d78:	ebfffef4 	bl	8950 <rpi_reboot>

    if(alignment <= 4)
    8d7c:	e3510004 	cmp	r1, #4
    8d80:	8a000001 	bhi	8d8c <kmalloc_aligned+0x3c>
        return kmalloc(nbytes);
    8d84:	ebffffd8 	bl	8cec <kmalloc>
    8d88:	e8bd8008 	pop	{r3, pc}
    demand(alignment % 4 == 0, "weird alignment: not a multiple of 4!");
    8d8c:	e3110003 	tst	r1, #3
    8d90:	0a000005 	beq	8dac <kmalloc_aligned+0x5c>
    8d94:	e59f0044 	ldr	r0, [pc, #68]	; 8de0 <kmalloc_aligned+0x90>
    8d98:	e59f1038 	ldr	r1, [pc, #56]	; 8dd8 <kmalloc_aligned+0x88>
    8d9c:	e59f2038 	ldr	r2, [pc, #56]	; 8ddc <kmalloc_aligned+0x8c>
    8da0:	e3a0302b 	mov	r3, #43	; 0x2b
    8da4:	ebfffd72 	bl	8374 <printk>
    8da8:	ebfffee8 	bl	8950 <rpi_reboot>
    unsigned aligned_heap_ptr = (unsigned) heap_ptr;
    8dac:	e59f301c 	ldr	r3, [pc, #28]	; 8dd0 <kmalloc_aligned+0x80>
    8db0:	e5932004 	ldr	r2, [r3, #4]
	aligned_heap_ptr = roundup(aligned_heap_ptr, alignment);
    8db4:	e0812002 	add	r2, r1, r2
    8db8:	e2422001 	sub	r2, r2, #1
    8dbc:	e2611000 	rsb	r1, r1, #0
    8dc0:	e0021001 	and	r1, r2, r1
	heap_ptr = (void*) aligned_heap_ptr;
    8dc4:	e5831004 	str	r1, [r3, #4]

	return kmalloc(nbytes);
    8dc8:	ebffffc7 	bl	8cec <kmalloc>
}
    8dcc:	e8bd8008 	pop	{r3, pc}
    8dd0:	000096f0 	strdeq	r9, [r0], -r0
    8dd4:	000091ec 	andeq	r9, r0, ip, ror #3
    8dd8:	0000922c 	andeq	r9, r0, ip, lsr #4
    8ddc:	000091cc 	andeq	r9, r0, ip, asr #3
    8de0:	00009240 	andeq	r9, r0, r0, asr #4

00008de4 <kmalloc_init>:
 *    - should be just a few lines of code.
 *    - sets heap pointer to the location of 
 *      __heap_start__.   print this to make sure
 *      it makes sense!
 */
void kmalloc_init(void) {
    8de4:	e92d4008 	push	{r3, lr}
    demand(!init_p, cannot initialize twice!\n);
    8de8:	e59f3038 	ldr	r3, [pc, #56]	; 8e28 <kmalloc_init+0x44>
    8dec:	e5933000 	ldr	r3, [r3]
    8df0:	e3530000 	cmp	r3, #0
    8df4:	0a000005 	beq	8e10 <kmalloc_init+0x2c>
    8df8:	e59f002c 	ldr	r0, [pc, #44]	; 8e2c <kmalloc_init+0x48>
    8dfc:	e59f102c 	ldr	r1, [pc, #44]	; 8e30 <kmalloc_init+0x4c>
    8e00:	e59f202c 	ldr	r2, [pc, #44]	; 8e34 <kmalloc_init+0x50>
    8e04:	e3a0303c 	mov	r3, #60	; 0x3c
    8e08:	ebfffd59 	bl	8374 <printk>
    8e0c:	ebfffecf 	bl	8950 <rpi_reboot>
    init_p = 1;
    8e10:	e59f3010 	ldr	r3, [pc, #16]	; 8e28 <kmalloc_init+0x44>
    8e14:	e3a02001 	mov	r2, #1
    8e18:	e5832000 	str	r2, [r3]
    heap_ptr = &__heap_start__;
    8e1c:	e59f2014 	ldr	r2, [pc, #20]	; 8e38 <kmalloc_init+0x54>
    8e20:	e5832004 	str	r2, [r3, #4]
    8e24:	e8bd8008 	pop	{r3, pc}
    8e28:	000096f0 	strdeq	r9, [r0], -r0
    8e2c:	00009298 	muleq	r0, r8, r2
    8e30:	0000922c 	andeq	r9, r0, ip, lsr #4
    8e34:	000091dc 	ldrdeq	r9, [r0], -ip
    8e38:	000096f8 	strdeq	r9, [r0], -r8

00008e3c <kfree_all>:
/* 
 * free all allocated memory: reset the heap 
 * pointer back to the beginning.
 */
void kfree_all(void) {
    heap_ptr = &__heap_start__;
    8e3c:	e59f2008 	ldr	r2, [pc, #8]	; 8e4c <kfree_all+0x10>
    8e40:	e59f3008 	ldr	r3, [pc, #8]	; 8e50 <kfree_all+0x14>
    8e44:	e5832004 	str	r2, [r3, #4]
    8e48:	e12fff1e 	bx	lr
    8e4c:	000096f8 	strdeq	r9, [r0], -r8
    8e50:	000096f0 	strdeq	r9, [r0], -r0

00008e54 <kmalloc_heap_ptr>:
// allocated block satisfies: 
//    assert(<addr> < kmalloc_heap_ptr());
// 
void *kmalloc_heap_ptr(void) {
    return (void*) heap_ptr;
}
    8e54:	e59f3004 	ldr	r3, [pc, #4]	; 8e60 <kmalloc_heap_ptr+0xc>
    8e58:	e5930004 	ldr	r0, [r3, #4]
    8e5c:	e12fff1e 	bx	lr
    8e60:	000096f0 	strdeq	r9, [r0], -r0

00008e64 <memset>:
#include <string.h>

void *memset(void *_p, int c, size_t n) {
    char *p = _p, *e = p + n;
    8e64:	e0802002 	add	r2, r0, r2
    8e68:	e1a03000 	mov	r3, r0

    while(p < e)
    8e6c:	ea000001 	b	8e78 <memset+0x14>
        *p++ = c;
    8e70:	e5c31000 	strb	r1, [r3]
    8e74:	e2833001 	add	r3, r3, #1
#include <string.h>

void *memset(void *_p, int c, size_t n) {
    char *p = _p, *e = p + n;

    while(p < e)
    8e78:	e1530002 	cmp	r3, r2
    8e7c:	3afffffb 	bcc	8e70 <memset+0xc>
        *p++ = c;
    return _p;
}
    8e80:	e12fff1e 	bx	lr

00008e84 <internal_putchar>:
#include "rpi.h"

static int internal_putchar(int c) { uart_putc(c); return c; }
    8e84:	e92d4010 	push	{r4, lr}
    8e88:	e1a04000 	mov	r4, r0
    8e8c:	ebffff41 	bl	8b98 <uart_putc>
    8e90:	e1a00004 	mov	r0, r4
    8e94:	e8bd8010 	pop	{r4, pc}

00008e98 <dev_barrier>:
    8e98:	ea000002 	b	8ea8 <dsb>

00008e9c <dmb>:
    8e9c:	e3a00000 	mov	r0, #0
    8ea0:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
    8ea4:	e12fff1e 	bx	lr

00008ea8 <dsb>:
    8ea8:	ee070f9a 	mcr	15, 0, r0, cr7, cr10, {4}
    8eac:	e12fff1e 	bx	lr

Disassembly of section .data:

00008eb0 <putk>:
    8eb0:	000083cc 	andeq	r8, r0, ip, asr #7

00008eb4 <rpi_putchar>:
    8eb4:	00008e84 	andeq	r8, r0, r4, lsl #29

Disassembly of section .rodata:

00008eb8 <__FUNCTION__.4156>:
    8eb8:	74696177 	strbtvc	r6, [r9], #-375	; 0x177
    8ebc:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0x55f
    8ec0:	00000063 	andeq	r0, r0, r3, rrx

00008ec4 <__FUNCTION__.4163>:
    8ec4:	6e696c62 	cdpvs	12, 6, cr6, cr9, cr2, {3}
    8ec8:	0000006b 	andeq	r0, r0, fp, rrx
    8ecc:	0000004b 	andeq	r0, r0, fp, asr #32
    8ed0:	00000014 	andeq	r0, r0, r4, lsl r0
    8ed4:	00000019 	andeq	r0, r0, r9, lsl r0
    8ed8:	00000015 	andeq	r0, r0, r5, lsl r0

00008edc <__FUNCTION__.4172>:
    8edc:	6d746f6e 	ldclvs	15, cr6, [r4, #-440]!	; 0xfffffe48
    8ee0:	006e6961 	rsbeq	r6, lr, r1, ror #18
    8ee4:	4f525245 	svcmi	0x00525245
    8ee8:	73253a52 	teqvc	r5, #335872	; 0x52000
    8eec:	3a73253a 	bcc	1cd23dc <__bss_end__+0x1cc8ce4>
    8ef0:	203a6425 	eorscs	r6, sl, r5, lsr #8
    8ef4:	534c4146 	movtpl	r4, #49478	; 0xc146
    8ef8:	6e3c2845 	cdpvs	8, 3, cr2, cr12, cr5, {2}
    8efc:	31203c20 	teqcc	r0, r0, lsr #24
    8f00:	30303030 	eorscc	r3, r0, r0, lsr r0
    8f04:	3a293e30 	bcc	a587cc <__bss_end__+0xa4f0d4>
    8f08:	6e752220 	cdpvs	2, 7, cr2, cr5, cr0, {1}
    8f0c:	656b696c 	strbvs	r6, [fp, #-2412]!	; 0x96c
    8f10:	6c20796c 	stcvs	9, cr7, [r0], #-432	; 0xfffffe50
    8f14:	65677261 	strbvs	r7, [r7, #-609]!	; 0x261
    8f18:	6c656420 	cfstrdvs	mvd6, [r5], #-128	; 0xffffff80
    8f1c:	3d207961 	stccc	9, cr7, [r0, #-388]!	; 0xfffffe7c
    8f20:	75642520 	strbvc	r2, [r4, #-1312]!	; 0x520
    8f24:	21636573 	smccs	13907	; 0x3653
    8f28:	0a226e5c 	beq	8a48a0 <__bss_end__+0x89b1a8>
    8f2c:	00000000 	andeq	r0, r0, r0
    8f30:	65742d33 	ldrbvs	r2, [r4, #-3379]!	; 0xd33
    8f34:	792d7473 	pushvc	{r0, r1, r4, r5, r6, sl, ip, sp, lr}
    8f38:	646c6569 	strbtvs	r6, [ip], #-1385	; 0x569
    8f3c:	0000632e 	andeq	r6, r0, lr, lsr #6
    8f40:	4f525245 	svcmi	0x00525245
    8f44:	73253a52 	teqvc	r5, #335872	; 0x52000
    8f48:	3a73253a 	bcc	1cd2438 <__bss_end__+0x1cc8d40>
    8f4c:	203a6425 	eorscs	r6, sl, r5, lsr #8
    8f50:	534c4146 	movtpl	r4, #49478	; 0xc146
    8f54:	703c2845 	eorsvc	r2, ip, r5, asr #16
    8f58:	75643e2d 	strbvc	r3, [r4, #-3629]!	; 0xe2d
    8f5c:	3e207974 	mcrcc	9, 1, r7, cr0, cr4, {3}
    8f60:	26203020 	strtcs	r3, [r0], -r0, lsr #32
    8f64:	2d702026 	ldclcs	0, cr2, [r0, #-152]!	; 0xffffff68
    8f68:	7475643e 	ldrbtvc	r6, [r5], #-1086	; 0x43e
    8f6c:	3d3c2079 	ldccc	0, cr2, [ip, #-484]!	; 0xfffffe1c
    8f70:	30303120 	eorscc	r3, r0, r0, lsr #2
    8f74:	203a293e 	eorscs	r2, sl, lr, lsr r9
    8f78:	72656977 	rsbvc	r6, r5, #1949696	; 0x1dc000
    8f7c:	75642064 	strbvc	r2, [r4, #-100]!	; 0x64
    8f80:	63207974 	teqvs	r0, #116, 18	; 0x1d0000
    8f84:	656c6379 	strbvs	r6, [ip, #-889]!	; 0x379
    8f88:	00000a21 	andeq	r0, r0, r1, lsr #20
    8f8c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    8f90:	73253a43 	teqvc	r5, #274432	; 0x43000
    8f94:	3a73253a 	bcc	1cd2484 <__bss_end__+0x1cc8d8c>
    8f98:	733a6425 	teqvc	sl, #620756992	; 0x25000000
    8f9c:	6c756f68 	ldclvs	15, cr6, [r5], #-416	; 0xfffffe60
    8fa0:	656e2064 	strbvs	r2, [lr, #-100]!	; 0x64
    8fa4:	20726576 	rsbscs	r6, r2, r6, ror r5
    8fa8:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0x572
    8fac:	0a216e72 	beq	86497c <__bss_end__+0x85b284>
    8fb0:	0000000a 	andeq	r0, r0, sl

00008fb4 <__FUNCTION__.4166>:
    8fb4:	6f705f51 	svcvs	0x00705f51
    8fb8:	00000070 	andeq	r0, r0, r0, ror r0

00008fbc <__FUNCTION__.4198>:
    8fbc:	5f697072 	svcpl	0x00697072
    8fc0:	6b726f66 	blvs	1ca4d60 <__bss_end__+0x1c9b668>
    8fc4:	00000000 	andeq	r0, r0, r0

00008fc8 <__FUNCTION__.4202>:
    8fc8:	5f697072 	svcpl	0x00697072
    8fcc:	74697865 	strbtvc	r7, [r9], #-2149	; 0x865
    8fd0:	00000000 	andeq	r0, r0, r0

00008fd4 <__FUNCTION__.4206>:
    8fd4:	5f697072 	svcpl	0x00697072
    8fd8:	6c656979 	stclvs	9, cr6, [r5], #-484	; 0xfffffe1c
    8fdc:	00000064 	andeq	r0, r0, r4, rrx

00008fe0 <__FUNCTION__.4214>:
    8fe0:	5f697072 	svcpl	0x00697072
    8fe4:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
    8fe8:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
    8fec:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
    8ff0:	00000000 	andeq	r0, r0, r0

00008ff4 <__FUNCTION__.4218>:
    8ff4:	5f697072 	svcpl	0x00697072
    8ff8:	63617865 	cmnvs	r1, #6619136	; 0x650000
    8ffc:	6c735f74 	ldclvs	15, cr5, [r3], #-464	; 0xfffffe30
    9000:	00706565 	rsbseq	r6, r0, r5, ror #10

00009004 <__FUNCTION__.4224>:
    9004:	5f697072 	svcpl	0x00697072
    9008:	6b726f66 	blvs	1ca4da8 <__bss_end__+0x1c9b6b0>
    900c:	756f625f 	strbvc	r6, [pc, #-607]!	; 8db5 <kmalloc_aligned+0x65>
    9010:	6465646e 	strbtvs	r6, [r5], #-1134	; 0x46e
    9014:	00000000 	andeq	r0, r0, r0

00009018 <__FUNCTION__.4234>:
    9018:	5f697072 	svcpl	0x00697072
    901c:	5f746567 	svcpl	0x00746567
    9020:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
    9024:	00000073 	andeq	r0, r0, r3, ror r0
    9028:	4f525245 	svcmi	0x00525245
    902c:	73253a52 	teqvc	r5, #335872	; 0x52000
    9030:	3a73253a 	bcc	1cd2520 <__bss_end__+0x1cc8e28>
    9034:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9038:	534c4146 	movtpl	r4, #49478	; 0xc146
    903c:	713c2845 	teqvc	ip, r5, asr #16
    9040:	203a293e 	eorscs	r2, sl, lr, lsr r9
    9044:	20646162 	rsbcs	r6, r4, r2, ror #2
    9048:	75706e69 	ldrbvc	r6, [r0, #-3689]!	; 0xe69
    904c:	00000a74 	andeq	r0, r0, r4, ror sl
    9050:	00682e51 	rsbeq	r2, r8, r1, asr lr
    9054:	4f525245 	svcmi	0x00525245
    9058:	73253a52 	teqvc	r5, #335872	; 0x52000
    905c:	3a73253a 	bcc	1cd254c <__bss_end__+0x1cc8e54>
    9060:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9064:	534c4146 	movtpl	r4, #49478	; 0xc146
    9068:	213c2845 	teqcs	ip, r5, asr #16
    906c:	743e2d71 	ldrtvc	r2, [lr], #-3441	; 0xd71
    9070:	3e6c6961 	cdpcc	9, 6, cr6, cr12, cr1, {3}
    9074:	69203a29 	stmdbvs	r0!, {r0, r3, r5, r9, fp, ip, sp}
    9078:	6c61766e 	stclvs	6, cr7, [r1], #-440	; 0xfffffe48
    907c:	51206469 	teqpl	r0, r9, ror #8
    9080:	0000000a 	andeq	r0, r0, sl
    9084:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9088:	73253a43 	teqvc	r5, #274432	; 0x43000
    908c:	3a73253a 	bcc	1cd257c <__bss_end__+0x1cc8e84>
    9090:	693a6425 	ldmdbvs	sl!, {r0, r2, r5, sl, sp, lr}
    9094:	656c706d 	strbvs	r7, [ip, #-109]!	; 0x6d
    9098:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
    909c:	69687420 	stmdbvs	r8!, {r5, sl, ip, sp, lr}^
    90a0:	75662073 	strbvc	r2, [r6, #-115]!	; 0x73
    90a4:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    90a8:	0a216e6f 	beq	864a6c <__bss_end__+0x85b374>
    90ac:	0000000a 	andeq	r0, r0, sl
    90b0:	2d697072 	stclcs	0, cr7, [r9, #-456]!	; 0xfffffe38
    90b4:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
    90b8:	632e6461 	teqvs	lr, #1627389952	; 0x61000000
    90bc:	00000000 	andeq	r0, r0, r0

000090c0 <__FUNCTION__.4185>:
    90c0:	74696d65 	strbtvc	r6, [r9], #-3429	; 0xd65
    90c4:	00000000 	andeq	r0, r0, r0

000090c8 <__FUNCTION__.4133>:
    90c8:	5f697072 	svcpl	0x00697072
    90cc:	5f746573 	svcpl	0x00746573
    90d0:	7074756f 	rsbsvc	r7, r4, pc, ror #10
    90d4:	00007475 	andeq	r7, r0, r5, ror r4

000090d8 <__FUNCTION__.4207>:
    90d8:	705f6176 	subsvc	r6, pc, r6, ror r1	; <UNPREDICTABLE>
    90dc:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    90e0:	0000006b 	andeq	r0, r0, fp, rrx
    90e4:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    90e8:	73253a43 	teqvc	r5, #274432	; 0x43000
    90ec:	3a73253a 	bcc	1cd25dc <__bss_end__+0x1cc8ee4>
    90f0:	303a6425 	eorscc	r6, sl, r5, lsr #8
    90f4:	0000000a 	andeq	r0, r0, sl
    90f8:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    90fc:	2d61762f 	stclcs	6, cr7, [r1, #-188]!	; 0xffffff44
    9100:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    9104:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
    9108:	00000000 	andeq	r0, r0, r0
    910c:	33323130 	teqcc	r2, #48, 2
    9110:	37363534 			; <UNDEFINED> instruction: 0x37363534
    9114:	00003938 	andeq	r3, r0, r8, lsr r9
    9118:	33323130 	teqcc	r2, #48, 2
    911c:	37363534 			; <UNDEFINED> instruction: 0x37363534
    9120:	62613938 	rsbvs	r3, r1, #56, 18	; 0xe0000
    9124:	66656463 	strbtvs	r6, [r5], -r3, ror #8
    9128:	00000000 	andeq	r0, r0, r0
    912c:	00003130 	andeq	r3, r0, r0, lsr r1
    9130:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9134:	73253a43 	teqvc	r5, #274432	; 0x43000
    9138:	3a73253a 	bcc	1cd2628 <__bss_end__+0x1cc8f30>
    913c:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    9140:	5f637475 	svcpl	0x00637475
    9144:	000a7066 	andeq	r7, sl, r6, rrx
    9148:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    914c:	73253a43 	teqvc	r5, #274432	; 0x43000
    9150:	3a73253a 	bcc	1cd2640 <__bss_end__+0x1cc8f48>
    9154:	773a6425 	ldrvc	r6, [sl, -r5, lsr #8]!
    9158:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
    915c:	33203c20 	teqcc	r0, #32, 24	; 0x2000
    9160:	00000a32 	andeq	r0, r0, r2, lsr sl
    9164:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9168:	73253a43 	teqvc	r5, #274432	; 0x43000
    916c:	3a73253a 	bcc	1cd265c <__bss_end__+0x1cc8f64>
    9170:	663a6425 	ldrtvs	r6, [sl], -r5, lsr #8
    9174:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xf6c
    9178:	746f6e20 	strbtvc	r6, [pc], #-3616	; 9180 <__FUNCTION__.4207+0xa8>
    917c:	616e6520 	cmnvs	lr, r0, lsr #10
    9180:	64656c62 	strbtvs	r6, [r5], #-3170	; 0xc62
    9184:	0a212121 	beq	851610 <__bss_end__+0x847f18>
    9188:	00000000 	andeq	r0, r0, r0
    918c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9190:	73253a43 	teqvc	r5, #274432	; 0x43000
    9194:	3a73253a 	bcc	1cd2684 <__bss_end__+0x1cc8f8c>
    9198:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    919c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    91a0:	6e203a6b 	vnmulvs.f32	s6, s0, s23
    91a4:	6820746f 	stmdavs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
    91a8:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    91ac:	20676e69 	rsbcs	r6, r7, r9, ror #28
    91b0:	63657073 	cmnvs	r5, #115	; 0x73
    91b4:	65696669 	strbvs	r6, [r9, #-1641]!	; 0x669
    91b8:	25272072 	strcs	r2, [r7, #-114]!	; 0x72
    91bc:	0a0a2763 	beq	292f50 <__bss_end__+0x289858>
    91c0:	00000000 	andeq	r0, r0, r0

000091c4 <__FUNCTION__.4129>:
    91c4:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    91c8:	00636f6c 	rsbeq	r6, r3, ip, ror #30

000091cc <__FUNCTION__.4136>:
    91cc:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    91d0:	5f636f6c 	svcpl	0x00636f6c
    91d4:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    91d8:	0064656e 	rsbeq	r6, r4, lr, ror #10

000091dc <__FUNCTION__.4141>:
    91dc:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    91e0:	5f636f6c 	svcpl	0x00636f6c
    91e4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    91e8:	00000000 	andeq	r0, r0, r0
    91ec:	4f525245 	svcmi	0x00525245
    91f0:	73253a52 	teqvc	r5, #335872	; 0x52000
    91f4:	3a73253a 	bcc	1cd26e4 <__bss_end__+0x1cc8fec>
    91f8:	203a6425 	eorscs	r6, sl, r5, lsr #8
    91fc:	534c4146 	movtpl	r4, #49478	; 0xc146
    9200:	693c2845 	ldmdbvs	ip!, {r0, r2, r6, fp, sp}
    9204:	5f74696e 	svcpl	0x0074696e
    9208:	3a293e70 	bcc	a58bd0 <__bss_end__+0xa4f4d8>
    920c:	6c616320 	stclvs	3, cr6, [r1], #-128	; 0xffffff80
    9210:	676e696c 	strbvs	r6, [lr, -ip, ror #18]!
    9214:	66656220 	strbtvs	r6, [r5], -r0, lsr #4
    9218:	2065726f 	rsbcs	r7, r5, pc, ror #4
    921c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    9220:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    9224:	0a64657a 	beq	1922814 <__bss_end__+0x191911c>
    9228:	00000000 	andeq	r0, r0, r0
    922c:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
    9230:	6b2f6372 	blvs	be2000 <__bss_end__+0xbd8908>
    9234:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    9238:	632e636f 	teqvs	lr, #-1140850687	; 0xbc000001
    923c:	00000000 	andeq	r0, r0, r0
    9240:	4f525245 	svcmi	0x00525245
    9244:	73253a52 	teqvc	r5, #335872	; 0x52000
    9248:	3a73253a 	bcc	1cd2738 <__bss_end__+0x1cc9040>
    924c:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9250:	534c4146 	movtpl	r4, #49478	; 0xc146
    9254:	613c2845 	teqvs	ip, r5, asr #16
    9258:	6e67696c 	cdpvs	9, 6, cr6, cr7, cr12, {3}
    925c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
    9260:	34202520 	strtcc	r2, [r0], #-1312	; 0x520
    9264:	203d3d20 	eorscs	r3, sp, r0, lsr #26
    9268:	3a293e30 	bcc	a58b30 <__bss_end__+0xa4f438>
    926c:	65772220 	ldrbvs	r2, [r7, #-544]!	; 0x220
    9270:	20647269 	rsbcs	r7, r4, r9, ror #4
    9274:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    9278:	6e656d6e 	cdpvs	13, 6, cr6, cr5, cr14, {3}
    927c:	6e203a74 	mcrvs	10, 1, r3, cr0, cr4, {3}
    9280:	6120746f 	teqvs	r0, pc, ror #8
    9284:	6c756d20 	ldclvs	13, cr6, [r5], #-128	; 0xffffff80
    9288:	6c706974 	ldclvs	9, cr6, [r0], #-464	; 0xfffffe30
    928c:	666f2065 	strbtvs	r2, [pc], -r5, rrx
    9290:	22213420 	eorcs	r3, r1, #32, 8	; 0x20000000
    9294:	0000000a 	andeq	r0, r0, sl
    9298:	4f525245 	svcmi	0x00525245
    929c:	73253a52 	teqvc	r5, #335872	; 0x52000
    92a0:	3a73253a 	bcc	1cd2790 <__bss_end__+0x1cc9098>
    92a4:	203a6425 	eorscs	r6, sl, r5, lsr #8
    92a8:	534c4146 	movtpl	r4, #49478	; 0xc146
    92ac:	213c2845 	teqcs	ip, r5, asr #16
    92b0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    92b4:	293e705f 	ldmdbcs	lr!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}
    92b8:	6163203a 	cmnvs	r3, sl, lsr r0
    92bc:	746f6e6e 	strbtvc	r6, [pc], #-3694	; 92c4 <__FUNCTION__.4141+0xe8>
    92c0:	696e6920 	stmdbvs	lr!, {r5, r8, fp, sp, lr}^
    92c4:	6c616974 	stclvs	9, cr6, [r1], #-464	; 0xfffffe30
    92c8:	20657a69 	rsbcs	r7, r5, r9, ror #20
    92cc:	63697774 	cmnvs	r9, #116, 14	; 0x1d00000
    92d0:	0a0a2165 	beq	29186c <__bss_end__+0x288174>
    92d4:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss:

000092d8 <__bss_start__>:
	...

000092e0 <cur_thread>:
    92e0:	00000000 	andeq	r0, r0, r0

000092e4 <runq>:
	...

000092ec <scheduler_thread>:
    92ec:	00000000 	andeq	r0, r0, r0

000092f0 <buf.4133>:
	...

000096f0 <init_p>:
    96f0:	00000000 	andeq	r0, r0, r0

000096f4 <heap_ptr>:
    96f4:	00000000 	andeq	r0, r0, r0

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4b5a3605 	blmi	168d82c <__bss_end__+0x1684134>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	12010901 	andne	r0, r1, #16384	; 0x4000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0x404
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	22011a01 	andcs	r1, r1, #4096	; 0x1000
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__bss_end__+0x10c762c>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	34202955 	strtcc	r2, [r0], #-2389	; 0x955
   c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
  10:	43434700 	movtmi	r4, #14080	; 0x3700
  14:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
  18:	5420554e 	strtpl	r5, [r0], #-1358	; 0x54e
  1c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  20:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
  24:	6d724120 	ldfvse	f4, [r2, #-128]!	; 0xffffff80
  28:	626d4520 	rsbvs	r4, sp, #32, 10	; 0x8000000
  2c:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
  30:	72502064 	subsvc	r2, r0, #100	; 0x64
  34:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
  38:	73726f73 	cmnvc	r2, #460	; 0x1cc
  3c:	322d3720 	eorcc	r3, sp, #32, 14	; 0x800000
  40:	2d383130 	ldfcss	f3, [r8, #-192]!	; 0xffffff40
  44:	752d3371 	strvc	r3, [sp, #-881]!	; 0x371
  48:	74616470 	strbtvc	r6, [r1], #-1136	; 0x470
  4c:	37202965 	strcc	r2, [r0, -r5, ror #18]!
  50:	312e332e 	teqcc	lr, lr, lsr #6
  54:	31303220 	teqcc	r0, r0, lsr #4
  58:	32363038 	eorscc	r3, r6, #56	; 0x38
  5c:	72282032 	eorvc	r2, r8, #50	; 0x32
  60:	61656c65 	cmnvs	r5, r5, ror #24
  64:	20296573 	eorcs	r6, r9, r3, ror r5
  68:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  6c:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
  70:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
  74:	2d372d64 	ldccs	13, cr2, [r7, #-400]!	; 0xfffffe70
  78:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  7c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  80:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  84:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  88:	39313632 	ldmdbcc	r1!, {r1, r4, r5, r9, sl, ip, sp}
  8c:	005d3730 	subseq	r3, sp, r0, lsr r7

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000440 	andeq	r0, r0, r0, asr #8
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000016 	andeq	r0, r0, r6, lsl r0
      10:	00014301 	andeq	r4, r1, r1, lsl #6
      14:	0000e300 	andeq	lr, r0, r0, lsl #6
      18:	00801000 	addeq	r1, r0, r0
      1c:	00015000 	andeq	r5, r1, r0
      20:	00000000 	andeq	r0, r0, r0
      24:	05040200 	streq	r0, [r4, #-512]	; 0x200
      28:	00746e69 	rsbseq	r6, r4, r9, ror #28
      2c:	86070403 	strhi	r0, [r7], -r3, lsl #8
      30:	03000001 	movweq	r0, #1
      34:	00870601 	addeq	r0, r7, r1, lsl #12
      38:	02030000 	andeq	r0, r3, #0
      3c:	0001dd05 	andeq	sp, r1, r5, lsl #26
      40:	05040300 	streq	r0, [r4, #-768]	; 0x300
      44:	000001c0 	andeq	r0, r0, r0, asr #3
      48:	bb050803 	bllt	14205c <__bss_end__+0x138964>
      4c:	03000001 	movweq	r0, #1
      50:	00850801 	addeq	r0, r5, r1, lsl #16
      54:	02030000 	andeq	r0, r3, #0
      58:	00009d07 	andeq	r9, r0, r7, lsl #26
      5c:	01e70400 	mvneq	r0, r0, lsl #8
      60:	34030000 	strcc	r0, [r3], #-0
      64:	00000068 	andeq	r0, r0, r8, rrx
      68:	81070403 	tsthi	r7, r3, lsl #8
      6c:	03000001 	movweq	r0, #1
      70:	017c0708 	cmneq	ip, r8, lsl #14
      74:	04030000 	streq	r0, [r3], #-0
      78:	0001aa07 	andeq	sl, r1, r7, lsl #20
      7c:	03040500 	movweq	r0, #17664	; 0x4500
      80:	008e0801 	addeq	r0, lr, r1, lsl #16
      84:	04060000 	streq	r0, [r6], #-0
      88:	0000008c 	andeq	r0, r0, ip, lsl #1
      8c:	00007f07 	andeq	r7, r0, r7, lsl #30
      90:	007f0800 	rsbseq	r0, pc, r0, lsl #16
      94:	00a10000 	adceq	r0, r1, r0
      98:	76090000 	strvc	r0, [r9], -r0
      9c:	07000000 	streq	r0, [r0, -r0]
      a0:	01d20a00 	bicseq	r0, r2, r0, lsl #20
      a4:	80480000 	subhi	r0, r8, r0
      a8:	00df1e02 	sbcseq	r1, pc, r2, lsl #28
      ac:	6e0b0000 	cdpvs	0, 0, cr0, cr11, cr0, {0}
      b0:	02000001 	andeq	r0, r0, #1
      b4:	0000df20 	andeq	sp, r0, r0, lsr #30
      b8:	060b0000 	streq	r0, [fp], -r0
      bc:	02000000 	andeq	r0, r0, #0
      c0:	0000ef22 	andeq	lr, r0, r2, lsr #30
      c4:	740c4000 	strvc	r4, [ip], #-0
      c8:	02006469 	andeq	r6, r0, #1761607680	; 0x69000000
      cc:	00005d23 	andeq	r5, r0, r3, lsr #26
      d0:	750b4400 	strvc	r4, [fp, #-1024]	; 0x400
      d4:	02000000 	andeq	r0, r0, #0
      d8:	0000f524 	andeq	pc, r0, r4, lsr #10
      dc:	08004800 	stmdaeq	r0, {fp, lr}
      e0:	0000005d 	andeq	r0, r0, sp, asr r0
      e4:	000000ef 	andeq	r0, r0, pc, ror #1
      e8:	00007609 	andeq	r7, r0, r9, lsl #12
      ec:	06000f00 	streq	r0, [r0], -r0, lsl #30
      f0:	0000a104 	andeq	sl, r0, r4, lsl #2
      f4:	005d0800 	subseq	r0, sp, r0, lsl #16
      f8:	01060000 	mrseq	r0, (UNDEF: 6)
      fc:	760d0000 	strvc	r0, [sp], -r0
     100:	ff000000 			; <UNDEFINED> instruction: 0xff000000
     104:	9304001f 	movwls	r0, #16415	; 0x401f
     108:	02000001 	andeq	r0, r0, #1
     10c:	0000a125 	andeq	sl, r0, r5, lsr #2
     110:	77700e00 	ldrbvc	r0, [r0, -r0, lsl #28]!
     114:	0108006d 	tsteq	r8, sp, rrx
     118:	00013605 	andeq	r3, r1, r5, lsl #12
     11c:	00b00b00 	adcseq	r0, r0, r0, lsl #22
     120:	06010000 	streq	r0, [r1], -r0
     124:	0000002c 	andeq	r0, r0, ip, lsr #32
     128:	69700c00 	ldmdbvs	r0!, {sl, fp}^
     12c:	0701006e 	streq	r0, [r1, -lr, rrx]
     130:	0000002c 	andeq	r0, r0, ip, lsr #32
     134:	fd0f0004 	stc2	0, cr0, [pc, #-16]	; 12c <_start-0x7ed4>
     138:	01000001 	tsteq	r0, r1
     13c:	0080100f 	addeq	r1, r0, pc
     140:	00006c00 	andeq	r6, r0, r0, lsl #24
     144:	d09c0100 	addsle	r0, ip, r0, lsl #2
     148:	10000001 	andne	r0, r0, r1
     14c:	0f01006e 	svceq	0x0001006e
     150:	0000002c 	andeq	r0, r0, ip, lsr #32
     154:	00000000 	andeq	r0, r0, r0
     158:	00015211 	andeq	r5, r1, r1, lsl r2
     15c:	0001e000 	andeq	lr, r1, r0
     160:	b8030500 	stmdalt	r3, {r8, sl}
     164:	1200008e 	andne	r0, r0, #142	; 0x8e
     168:	000000cd 	andeq	r0, r0, sp, asr #1
     16c:	002c1101 	eoreq	r1, ip, r1, lsl #2
     170:	00420000 	subeq	r0, r2, r0
     174:	40130000 	andsmi	r0, r3, r0
     178:	9b000080 	blls	380 <_start-0x7c80>
     17c:	ab000003 	blge	190 <_start-0x7e70>
     180:	14000001 	strne	r0, [r0], #-1
     184:	40015301 	andmi	r5, r1, r1, lsl #6
     188:	05520114 	ldrbeq	r0, [r2, #-276]	; 0x114
     18c:	008eb803 	addeq	fp, lr, r3, lsl #16
     190:	51011400 	tstpl	r1, r0, lsl #8
     194:	8f300305 	svchi	0x00300305
     198:	01140000 	tsteq	r4, r0
     19c:	e4030550 	str	r0, [r3], #-1360	; 0x550
     1a0:	1400008e 	strne	r0, [r0], #-142	; 0x8e
     1a4:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
     1a8:	15000074 	strne	r0, [r0, #-116]	; 0x74
     1ac:	00008044 	andeq	r8, r0, r4, asr #32
     1b0:	000003b1 			; <UNDEFINED> instruction: 0x000003b1
     1b4:	00804815 	addeq	r4, r0, r5, lsl r8
     1b8:	0003b800 	andeq	fp, r3, r0, lsl #16
     1bc:	80501500 	subshi	r1, r0, r0, lsl #10
     1c0:	03b80000 			; <UNDEFINED> instruction: 0x03b80000
     1c4:	60150000 	andsvs	r0, r5, r0
     1c8:	c3000080 	movwgt	r0, #128	; 0x80
     1cc:	00000003 	andeq	r0, r0, r3
     1d0:	00007f08 	andeq	r7, r0, r8, lsl #30
     1d4:	0001e000 	andeq	lr, r1, r0
     1d8:	00760900 	rsbseq	r0, r6, r0, lsl #18
     1dc:	00090000 	andeq	r0, r9, r0
     1e0:	0001d007 	andeq	sp, r1, r7
     1e4:	00001600 	andeq	r1, r0, r0, lsl #12
     1e8:	1b010000 	blne	401f0 <__bss_end__+0x36af8>
     1ec:	0000807c 	andeq	r8, r0, ip, ror r0
     1f0:	0000006c 	andeq	r0, r0, ip, rrx
     1f4:	02b69c01 	adcseq	r9, r6, #256	; 0x100
     1f8:	61100000 	tstvs	r0, r0
     1fc:	01006772 	tsteq	r0, r2, ror r7
     200:	00007d1b 	andeq	r7, r0, fp, lsl sp
     204:	00005500 	andeq	r5, r0, r0, lsl #10
     208:	00701700 	rsbseq	r1, r0, r0, lsl #14
     20c:	02b61c01 	adcseq	r1, r6, #256	; 0x100
     210:	00730000 	rsbseq	r0, r3, r0
     214:	52110000 	andspl	r0, r1, #0
     218:	cc000001 	stcgt	0, cr0, [r0], {1}
     21c:	05000002 	streq	r0, [r0, #-2]
     220:	008ec403 	addeq	ip, lr, r3, lsl #8
     224:	01b31800 			; <UNDEFINED> instruction: 0x01b31800
     228:	22010000 	andcs	r0, r1, #0
     22c:	0000002c 	andeq	r0, r0, ip, lsr #32
     230:	c9185501 	ldmdbgt	r8, {r0, r8, sl, ip, lr}
     234:	01000001 	tsteq	r0, r1
     238:	00002c23 	andeq	r2, r0, r3, lsr #24
     23c:	15560100 	ldrbne	r0, [r6, #-256]	; 0x100
     240:	0000808c 	andeq	r8, r0, ip, lsl #1
     244:	000003ca 	andeq	r0, r0, sl, asr #7
     248:	0080b013 	addeq	fp, r0, r3, lsl r0
     24c:	00039b00 	andeq	r9, r3, r0, lsl #22
     250:	00027600 	andeq	r7, r2, r0, lsl #12
     254:	53011400 	movwpl	r1, #5120	; 0x1400
     258:	01144f01 	tsteq	r4, r1, lsl #30
     25c:	c4030552 	strgt	r0, [r3], #-1362	; 0x552
     260:	1400008e 	strne	r0, [r0], #-142	; 0x8e
     264:	03055101 	movweq	r5, #20737	; 0x5101
     268:	00008f30 	andeq	r8, r0, r0, lsr pc
     26c:	05500114 	ldrbeq	r0, [r0, #-276]	; 0x114
     270:	008f4003 	addeq	r4, pc, r3
     274:	b4150000 	ldrlt	r0, [r5], #-0
     278:	b1000080 	smlabblt	r0, r0, r0, r0
     27c:	15000003 	strne	r0, [r0, #-3]
     280:	000080c0 	andeq	r8, r0, r0, asr #1
     284:	000003db 	ldrdeq	r0, [r0], -fp
     288:	0080c813 	addeq	ip, r0, r3, lsl r8
     28c:	00013600 	andeq	r3, r1, r0, lsl #12
     290:	00029c00 	andeq	r9, r2, r0, lsl #24
     294:	50011400 	andpl	r1, r1, r0, lsl #8
     298:	00007502 	andeq	r7, r0, r2, lsl #10
     29c:	0080d015 	addeq	sp, r0, r5, lsl r0
     2a0:	0003ec00 	andeq	lr, r3, r0, lsl #24
     2a4:	80d81900 	sbcshi	r1, r8, r0, lsl #18
     2a8:	01360000 	teqeq	r6, r0
     2ac:	01140000 	tsteq	r4, r0
     2b0:	00760250 	rsbseq	r0, r6, r0, asr r2
     2b4:	04060000 	streq	r0, [r6], #-0
     2b8:	00000111 	andeq	r0, r0, r1, lsl r1
     2bc:	00007f08 	andeq	r7, r0, r8, lsl #30
     2c0:	0002cc00 	andeq	ip, r2, r0, lsl #24
     2c4:	00760900 	rsbseq	r0, r6, r0, lsl #18
     2c8:	00050000 	andeq	r0, r5, r0
     2cc:	0002bc07 	andeq	fp, r2, r7, lsl #24
     2d0:	006d1600 	rsbeq	r1, sp, r0, lsl #12
     2d4:	2d010000 	stccs	0, cr0, [r1, #-0]
     2d8:	000080e8 	andeq	r8, r0, r8, ror #1
     2dc:	00000078 	andeq	r0, r0, r8, ror r0
     2e0:	03969c01 	orrseq	r9, r6, #256	; 0x100
     2e4:	93180000 	tstls	r8, #0
     2e8:	01000000 	mrseq	r0, (UNDEF: 0)
     2ec:	00011131 	andeq	r1, r1, r1, lsr r1
     2f0:	68910200 	ldmvs	r1, {r9}
     2f4:	00009818 	andeq	r9, r0, r8, lsl r8
     2f8:	11320100 	teqne	r2, r0, lsl #2
     2fc:	02000001 	andeq	r0, r0, #1
     300:	52116091 	andspl	r6, r1, #145	; 0x91
     304:	96000001 	strls	r0, [r0], -r1
     308:	05000003 	streq	r0, [r0, #-3]
     30c:	008edc03 	addeq	sp, lr, r3, lsl #24
     310:	80f41500 	rscshi	r1, r4, r0, lsl #10
     314:	03fd0000 	mvnseq	r0, #0
     318:	f8150000 			; <UNDEFINED> instruction: 0xf8150000
     31c:	04000080 	streq	r0, [r0], #-128	; 0x80
     320:	13000004 	movwne	r0, #4
     324:	00008128 	andeq	r8, r0, r8, lsr #2
     328:	0000040b 	andeq	r0, r0, fp, lsl #8
     32c:	0000033d 	andeq	r0, r0, sp, lsr r3
     330:	02510114 	subseq	r0, r1, #20, 2
     334:	01146091 			; <UNDEFINED> instruction: 0x01146091
     338:	00760250 	rsbseq	r0, r6, r0, asr r2
     33c:	81341300 	teqhi	r4, r0, lsl #6
     340:	040b0000 	streq	r0, [fp], #-0
     344:	03570000 	cmpeq	r7, #0
     348:	01140000 	tsteq	r4, r0
     34c:	007d0251 	rsbseq	r0, sp, r1, asr r2
     350:	02500114 	subseq	r0, r0, #20, 2
     354:	15000076 	strne	r0, [r0, #-118]	; 0x76
     358:	00008138 	andeq	r8, r0, r8, lsr r1
     35c:	0000043c 	andeq	r0, r0, ip, lsr r4
     360:	00814c13 	addeq	r4, r1, r3, lsl ip
     364:	00039b00 	andeq	r9, r3, r0, lsl #22
     368:	00038c00 	andeq	r8, r3, r0, lsl #24
     36c:	53011400 	movwpl	r1, #5120	; 0x1400
     370:	14370802 	ldrtne	r0, [r7], #-2050	; 0x802
     374:	74025201 	strvc	r5, [r2], #-513	; 0x201
     378:	51011424 	tstpl	r1, r4, lsr #8
     37c:	8f300305 	svchi	0x00300305
     380:	01140000 	tsteq	r4, r0
     384:	8c030550 	cfstr32hi	mvfx0, [r3], {80}	; 0x50
     388:	0000008f 	andeq	r0, r0, pc, lsl #1
     38c:	00815015 	addeq	r5, r1, r5, lsl r0
     390:	0003b100 	andeq	fp, r3, r0, lsl #2
     394:	91070000 	mrsls	r0, (UNDEF: 7)
     398:	1a000000 	bne	3a0 <_start-0x7c60>
     39c:	00000339 	andeq	r0, r0, r9, lsr r3
     3a0:	00252704 	eoreq	r2, r5, r4, lsl #14
     3a4:	03b10000 			; <UNDEFINED> instruction: 0x03b10000
     3a8:	861b0000 	ldrhi	r0, [fp], -r0
     3ac:	1c000000 	stcne	0, cr0, [r0], {-0}
     3b0:	000b1d00 	andeq	r1, fp, r0, lsl #26
     3b4:	5c040000 	stcpl	0, cr0, [r4], {-0}
     3b8:	00015f1e 	andeq	r5, r1, lr, lsl pc
     3bc:	2c510400 	cfldrdcs	mvd0, [r1], {-0}
     3c0:	1d000000 	stcne	0, cr0, [r0, #-0]
     3c4:	000001a0 	andeq	r0, r0, r0, lsr #3
     3c8:	d31f2e02 	tstle	pc, #2, 28
     3cc:	05000000 	streq	r0, [r0, #-0]
     3d0:	0003db1d 	andeq	sp, r3, sp, lsl fp
     3d4:	002c1b00 	eoreq	r1, ip, r0, lsl #22
     3d8:	1f000000 	svcne	0x00000000
     3dc:	00000207 	andeq	r0, r0, r7, lsl #4
     3e0:	03ec2705 	mvneq	r2, #1310720	; 0x140000
     3e4:	2c1b0000 	ldccs	0, cr0, [fp], {-0}
     3e8:	00000000 	andeq	r0, r0, r0
     3ec:	0000b51f 	andeq	fp, r0, pc, lsl r5
     3f0:	fd2a0500 	stc2	5, cr0, [sl, #-0]
     3f4:	1b000003 	blne	408 <_start-0x7bf8>
     3f8:	0000002c 	andeq	r0, r0, ip, lsr #32
     3fc:	007b1d00 	rsbseq	r1, fp, r0, lsl #26
     400:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
     404:	0001f01d 	andeq	pc, r1, sp, lsl r0	; <UNPREDICTABLE>
     408:	1a6a0400 	bne	1a81410 <__bss_end__+0x1a77d18>
     40c:	0000013a 	andeq	r0, r0, sl, lsr r1
     410:	04252802 	strteq	r2, [r5], #-2050	; 0x802
     414:	04250000 	strteq	r0, [r5], #-0
     418:	2b1b0000 	blcs	6c0420 <__bss_end__+0x6b6d28>
     41c:	1b000004 	blne	434 <_start-0x7bcc>
     420:	0000007d 	andeq	r0, r0, sp, ror r0
     424:	06040600 	streq	r0, [r4], -r0, lsl #12
     428:	06000001 	streq	r0, [r0], -r1
     42c:	00043104 	andeq	r3, r4, r4, lsl #2
     430:	043c2000 	ldrteq	r2, [ip], #-0
     434:	7d1b0000 	ldcvc	0, cr0, [fp, #-0]
     438:	00000000 	andeq	r0, r0, r0
     43c:	0000c21d 	andeq	ip, r0, sp, lsl r2
     440:	00320200 	eorseq	r0, r2, r0, lsl #4
     444:	000006fa 	strdeq	r0, [r0], -sl
     448:	01b00004 	movseq	r0, r4
     44c:	01040000 	mrseq	r0, (UNDEF: 4)
     450:	00000016 	andeq	r0, r0, r6, lsl r0
     454:	00027001 	andeq	r7, r2, r1
     458:	0000e300 	andeq	lr, r0, r0, lsl #6
     45c:	00816000 	addeq	r6, r1, r0
     460:	00020800 	andeq	r0, r2, r0, lsl #16
     464:	00018a00 	andeq	r8, r1, r0, lsl #20
     468:	05040200 	streq	r0, [r4, #-512]	; 0x200
     46c:	00746e69 	rsbseq	r6, r4, r9, ror #28
     470:	86070403 	strhi	r0, [r7], -r3, lsl #8
     474:	03000001 	movweq	r0, #1
     478:	00870601 	addeq	r0, r7, r1, lsl #12
     47c:	02030000 	andeq	r0, r3, #0
     480:	0001dd05 	andeq	sp, r1, r5, lsl #26
     484:	05040300 	streq	r0, [r4, #-768]	; 0x300
     488:	000001c0 	andeq	r0, r0, r0, asr #3
     48c:	bb050803 	bllt	1424a0 <__bss_end__+0x138da8>
     490:	03000001 	movweq	r0, #1
     494:	00850801 	addeq	r0, r5, r1, lsl #16
     498:	02030000 	andeq	r0, r3, #0
     49c:	00009d07 	andeq	r9, r0, r7, lsl #26
     4a0:	01e70400 	mvneq	r0, r0, lsl #8
     4a4:	34040000 	strcc	r0, [r4], #-0
     4a8:	00000068 	andeq	r0, r0, r8, rrx
     4ac:	81070403 	tsthi	r7, r3, lsl #8
     4b0:	03000001 	movweq	r0, #1
     4b4:	017c0708 	cmneq	ip, r8, lsl #14
     4b8:	04030000 	streq	r0, [r3], #-0
     4bc:	0001aa07 	andeq	sl, r1, r7, lsl #20
     4c0:	03040500 	movweq	r0, #17664	; 0x4500
     4c4:	008e0801 	addeq	r0, lr, r1, lsl #16
     4c8:	04060000 	streq	r0, [r6], #-0
     4cc:	0000008c 	andeq	r0, r0, ip, lsl #1
     4d0:	00007f07 	andeq	r7, r0, r7, lsl #30
     4d4:	01d20800 	bicseq	r0, r2, r0, lsl #16
     4d8:	80480000 	subhi	r0, r8, r0
     4dc:	00cf1e03 	sbceq	r1, pc, r3, lsl #28
     4e0:	6e090000 	cdpvs	0, 0, cr0, cr9, cr0, {0}
     4e4:	03000001 	movweq	r0, #1
     4e8:	0000cf20 	andeq	ip, r0, r0, lsr #30
     4ec:	06090000 	streq	r0, [r9], -r0
     4f0:	03000000 	movweq	r0, #0
     4f4:	0000df22 	andeq	sp, r0, r2, lsr #30
     4f8:	740a4000 	strvc	r4, [sl], #-0
     4fc:	03006469 	movweq	r6, #1129	; 0x469
     500:	00005d23 	andeq	r5, r0, r3, lsr #26
     504:	75094400 	strvc	r4, [r9, #-1024]	; 0x400
     508:	03000000 	movweq	r0, #0
     50c:	0000e524 	andeq	lr, r0, r4, lsr #10
     510:	0b004800 	bleq	12518 <__bss_end__+0x8e20>
     514:	0000005d 	andeq	r0, r0, sp, asr r0
     518:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     51c:	0000760c 	andeq	r7, r0, ip, lsl #12
     520:	06000f00 	streq	r0, [r0], -r0, lsl #30
     524:	00009104 	andeq	r9, r0, r4, lsl #2
     528:	005d0b00 	subseq	r0, sp, r0, lsl #22
     52c:	00f60000 	rscseq	r0, r6, r0
     530:	760d0000 	strvc	r0, [sp], -r0
     534:	ff000000 			; <UNDEFINED> instruction: 0xff000000
     538:	9304001f 	movwls	r0, #16415	; 0x401f
     53c:	03000001 	movweq	r0, #1
     540:	00009125 	andeq	r9, r0, r5, lsr #2
     544:	00510e00 	subseq	r0, r1, r0, lsl #28
     548:	24080108 	strcs	r0, [r8], #-264	; 0x108
     54c:	09000001 	stmdbeq	r0, {r0}
     550:	0000026b 	andeq	r0, r0, fp, ror #4
     554:	01240901 	teqeq	r4, r1, lsl #18
     558:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     55c:	000002e6 	andeq	r0, r0, r6, ror #5
     560:	01240901 	teqeq	r4, r1, lsl #18
     564:	00040000 	andeq	r0, r4, r0
     568:	00f60406 	rscseq	r0, r6, r6, lsl #8
     56c:	510f0000 	mrspl	r0, CPSR
     570:	0100745f 	tsteq	r0, pc, asr r4
     574:	0001010a 	andeq	r0, r1, sl, lsl #2
     578:	029b1000 	addseq	r1, fp, #0
     57c:	02140000 	andseq	r0, r4, #0
     580:	00017e70 	andeq	r7, r1, r0, ror lr
     584:	027d0900 	rsbseq	r0, sp, #0, 18
     588:	71020000 	mrsvc	r0, (UNDEF: 2)
     58c:	0000002c 	andeq	r0, r0, ip, lsr #32
     590:	024d0900 	subeq	r0, sp, #0, 18
     594:	72020000 	andvc	r0, r2, #0
     598:	0000002c 	andeq	r0, r0, ip, lsr #32
     59c:	025e0904 	subseq	r0, lr, #4, 18	; 0x10000
     5a0:	73020000 	movwvc	r0, #8192	; 0x2000
     5a4:	0000002c 	andeq	r0, r0, ip, lsr #32
     5a8:	028b0908 	addeq	r0, fp, #8, 18	; 0x20000
     5ac:	74020000 	strvc	r0, [r2], #-0
     5b0:	0000002c 	andeq	r0, r0, ip, lsr #32
     5b4:	02c7090c 	sbceq	r0, r7, #12, 18	; 0x30000
     5b8:	75020000 	strvc	r0, [r2, #-0]
     5bc:	0000002c 	andeq	r0, r0, ip, lsr #32
     5c0:	2e110010 	mrccs	0, 0, r0, cr1, cr0, {0}
     5c4:	01000002 	tsteq	r0, r2
     5c8:	0000250f 	andeq	r2, r0, pc, lsl #10
     5cc:	00816000 	addeq	r6, r1, r0
     5d0:	00001000 	andeq	r1, r0, r0
     5d4:	a59c0100 	ldrge	r0, [ip, #256]	; 0x100
     5d8:	12000001 	andne	r0, r0, #1
     5dc:	0f010071 	svceq	0x00010071
     5e0:	000001a5 	andeq	r0, r0, r5, lsr #3
     5e4:	00000091 	muleq	r0, r1, r0
     5e8:	2a040600 	bcs	101df0 <__bss_end__+0xf86f8>
     5ec:	11000001 	tstne	r0, r1
     5f0:	00000218 	andeq	r0, r0, r8, lsl r2
     5f4:	01241201 	teqeq	r4, r1, lsl #4
     5f8:	81700000 	cmnhi	r0, r0
     5fc:	007c0000 	rsbseq	r0, ip, r0
     600:	9c010000 	stcls	0, cr0, [r1], {-0}
     604:	0000025c 	andeq	r0, r0, ip, asr r2
     608:	01007112 	tsteq	r0, r2, lsl r1
     60c:	0001a512 	andeq	sl, r1, r2, lsl r5
     610:	0000b200 	andeq	fp, r0, r0, lsl #4
     614:	01521300 	cmpeq	r2, r0, lsl #6
     618:	026c0000 	rsbeq	r0, ip, #0
     61c:	03050000 	movweq	r0, #20480	; 0x5000
     620:	00008fb4 			; <UNDEFINED> instruction: 0x00008fb4
     624:	01006514 	tsteq	r0, r4, lsl r5
     628:	00012414 	andeq	r2, r1, r4, lsl r4
     62c:	00010d00 	andeq	r0, r1, r0, lsl #26
     630:	81901500 	orrshi	r1, r0, r0, lsl #10
     634:	06ca0000 	strbeq	r0, [sl], r0
     638:	021b0000 	andseq	r0, fp, #0
     63c:	01160000 	tsteq	r6, r0
     640:	16430153 			; <UNDEFINED> instruction: 0x16430153
     644:	03055201 	movweq	r5, #20993	; 0x5201
     648:	00008fb4 			; <UNDEFINED> instruction: 0x00008fb4
     64c:	05510116 	ldrbeq	r0, [r1, #-278]	; 0x116
     650:	00905003 	addseq	r5, r0, r3
     654:	50011600 	andpl	r1, r1, r0, lsl #12
     658:	90280305 	eorls	r0, r8, r5, lsl #6
     65c:	17000000 	strne	r0, [r0, -r0]
     660:	00008194 	muleq	r0, r4, r1
     664:	000006e0 	andeq	r0, r0, r0, ror #13
     668:	0081c015 	addeq	ip, r1, r5, lsl r0
     66c:	0006ca00 	andeq	ip, r6, r0, lsl #20
     670:	00025200 	andeq	r5, r2, r0, lsl #4
     674:	53011600 	movwpl	r1, #5632	; 0x1600
     678:	01164701 	tsteq	r6, r1, lsl #14
     67c:	b4030552 	strlt	r0, [r3], #-1362	; 0x552
     680:	1600008f 	strne	r0, [r0], -pc, lsl #1
     684:	03055101 	movweq	r5, #20737	; 0x5101
     688:	00009050 	andeq	r9, r0, r0, asr r0
     68c:	05500116 	ldrbeq	r0, [r0, #-278]	; 0x116
     690:	00905403 	addseq	r5, r0, r3, lsl #8
     694:	c4170000 	ldrgt	r0, [r7], #-0
     698:	e0000081 	and	r0, r0, r1, lsl #1
     69c:	00000006 	andeq	r0, r0, r6
     6a0:	00007f0b 	andeq	r7, r0, fp, lsl #30
     6a4:	00026c00 	andeq	r6, r2, r0, lsl #24
     6a8:	00760c00 	rsbseq	r0, r6, r0, lsl #24
     6ac:	00050000 	andeq	r0, r5, r0
     6b0:	00025c07 	andeq	r5, r2, r7, lsl #24
     6b4:	02be1100 	adcseq	r1, lr, #0, 2
     6b8:	15020000 	strne	r0, [r2, #-0]
     6bc:	00000124 	andeq	r0, r0, r4, lsr #2
     6c0:	000081ec 	andeq	r8, r0, ip, ror #3
     6c4:	0000002c 	andeq	r0, r0, ip, lsr #32
     6c8:	02d69c01 	sbcseq	r9, r6, #256	; 0x100
     6cc:	47180000 	ldrmi	r0, [r8, -r0]
     6d0:	02000002 	andeq	r0, r0, #2
     6d4:	00012a16 	andeq	r2, r1, r6, lsl sl
     6d8:	d8030500 	stmdale	r3, {r8, sl}
     6dc:	14000092 	strne	r0, [r0], #-146	; 0x92
     6e0:	17020074 	smlsdxne	r2, r4, r0, r0
     6e4:	00000124 	andeq	r0, r0, r4, lsr #2
     6e8:	00000144 	andeq	r0, r0, r4, asr #2
     6ec:	0081f815 	addeq	pc, r1, r5, lsl r8	; <UNPREDICTABLE>
     6f0:	0001ab00 	andeq	sl, r1, r0, lsl #22
     6f4:	0002bf00 	andeq	fp, r2, r0, lsl #30
     6f8:	50011600 	andpl	r1, r1, r0, lsl #12
     6fc:	92d80305 	sbcsls	r0, r8, #335544320	; 0x14000000
     700:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     704:	0000820c 	andeq	r8, r0, ip, lsl #4
     708:	000006e7 	andeq	r0, r0, r7, ror #13
     70c:	01510116 	cmpeq	r1, r6, lsl r1
     710:	50011638 	andpl	r1, r1, r8, lsr r6
     714:	80480a03 	subhi	r0, r8, r3, lsl #20
     718:	fc1a0000 	ldc2	0, cr0, [sl], {-0}
     71c:	02000002 	andeq	r0, r0, #2
     720:	00012410 	andeq	r2, r1, r0, lsl r4
     724:	00821800 	addeq	r1, r2, r0, lsl #16
     728:	00001000 	andeq	r1, r0, r0
     72c:	1b9c0100 	blne	fe700b34 <__bss_end__+0xfe6f743c>
     730:	0000013a 	andeq	r0, r0, sl, lsr r1
     734:	01242302 	teqeq	r4, r2, lsl #6
     738:	82280000 	eorhi	r0, r8, #0
     73c:	002c0000 	eoreq	r0, ip, r0
     740:	9c010000 	stcls	0, cr0, [r1], {-0}
     744:	0000037c 	andeq	r0, r0, ip, ror r3
     748:	0002b01c 	andeq	fp, r2, ip, lsl r0
     74c:	87230200 	strhi	r0, [r3, -r0, lsl #4]!
     750:	62000003 	andvs	r0, r0, #3
     754:	12000001 	andne	r0, r0, #1
     758:	00677261 	rsbeq	r7, r7, r1, ror #4
     75c:	007d2302 	rsbseq	r2, sp, r2, lsl #6
     760:	01830000 	orreq	r0, r3, r0
     764:	741d0000 	ldrvc	r0, [sp], #-0
     768:	24240200 	strtcs	r0, [r4], #-512	; 0x200
     76c:	13000001 	movwne	r0, #1
     770:	00000152 	andeq	r0, r0, r2, asr r1
     774:	0000039d 	muleq	r0, sp, r3
     778:	8fbc0305 	svchi	0x00bc0305
     77c:	30170000 	andscc	r0, r7, r0
     780:	71000082 	smlabbvc	r0, r2, r0, r0
     784:	15000002 	strne	r0, [r0, #-2]
     788:	00008244 	andeq	r8, r0, r4, asr #4
     78c:	000006ca 	andeq	r0, r0, sl, asr #13
     790:	00000372 	andeq	r0, r0, r2, ror r3
     794:	02530116 	subseq	r0, r3, #-2147483643	; 0x80000005
     798:	01162708 	tsteq	r6, r8, lsl #14
     79c:	bc030552 	cfstr32lt	mvfx0, [r3], {82}	; 0x52
     7a0:	1600008f 	strne	r0, [r0], -pc, lsl #1
     7a4:	03055101 	movweq	r5, #20737	; 0x5101
     7a8:	000090b0 	strheq	r9, [r0], -r0
     7ac:	05500116 	ldrbeq	r0, [r0, #-278]	; 0x116
     7b0:	00908403 	addseq	r8, r0, r3, lsl #8
     7b4:	48170000 	ldmdami	r7, {}	; <UNPREDICTABLE>
     7b8:	e0000082 	and	r0, r0, r2, lsl #1
     7bc:	00000006 	andeq	r0, r0, r6
     7c0:	0003871e 	andeq	r8, r3, lr, lsl r7
     7c4:	007d1f00 	rsbseq	r1, sp, r0, lsl #30
     7c8:	06000000 	streq	r0, [r0], -r0
     7cc:	00037c04 	andeq	r7, r3, r4, lsl #24
     7d0:	007f0b00 	rsbseq	r0, pc, r0, lsl #22
     7d4:	039d0000 	orrseq	r0, sp, #0
     7d8:	760c0000 	strvc	r0, [ip], -r0
     7dc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     7e0:	038d0700 	orreq	r0, sp, #0, 14
     7e4:	b5200000 	strlt	r0, [r0, #-0]!
     7e8:	02000002 	andeq	r0, r0, #2
     7ec:	0082542e 	addeq	r5, r2, lr, lsr #8
     7f0:	00002800 	andeq	r2, r0, r0, lsl #16
     7f4:	0e9c0100 	fmleqe	f0, f4, f0
     7f8:	1c000004 	stcne	0, cr0, [r0], {4}
     7fc:	000002ac 	andeq	r0, r0, ip, lsr #5
     800:	00252e02 	eoreq	r2, r5, r2, lsl #28
     804:	01a40000 			; <UNDEFINED> instruction: 0x01a40000
     808:	52130000 	andspl	r0, r3, #0
     80c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     810:	05000004 	streq	r0, [r0, #-4]
     814:	008fc803 	addeq	ip, pc, r3, lsl #16
     818:	826c1500 	rsbhi	r1, ip, #0, 10
     81c:	06ca0000 	strbeq	r0, [sl], r0
     820:	04040000 	streq	r0, [r4], #-0
     824:	01160000 	tsteq	r6, r0
     828:	38080253 	stmdacc	r8, {r0, r1, r4, r6, r9}
     82c:	05520116 	ldrbeq	r0, [r2, #-278]	; 0x116
     830:	008fc803 	addeq	ip, pc, r3, lsl #16
     834:	51011600 	tstpl	r1, r0, lsl #12
     838:	90b00305 	adcsls	r0, r0, r5, lsl #6
     83c:	01160000 	tsteq	r6, r0
     840:	84030550 	strhi	r0, [r3], #-1360	; 0x550
     844:	00000090 	muleq	r0, r0, r0
     848:	00827017 	addeq	r7, r2, r7, lsl r0
     84c:	0006e000 	andeq	lr, r6, r0
     850:	8d070000 	stchi	0, cr0, [r7, #-0]
     854:	20000003 	andcs	r0, r0, r3
     858:	000001a0 	andeq	r0, r0, r0, lsr #3
     85c:	827c3c02 	rsbshi	r3, ip, #512	; 0x200
     860:	00280000 	eoreq	r0, r8, r0
     864:	9c010000 	stcls	0, cr0, [r1], {-0}
     868:	00000470 	andeq	r0, r0, r0, ror r4
     86c:	00015213 	andeq	r5, r1, r3, lsl r2
     870:	00048000 	andeq	r8, r4, r0
     874:	d4030500 	strle	r0, [r3], #-1280	; 0x500
     878:	1500008f 	strne	r0, [r0, #-143]	; 0x8f
     87c:	00008294 	muleq	r0, r4, r2
     880:	000006ca 	andeq	r0, r0, sl, asr #13
     884:	00000466 	andeq	r0, r0, r6, ror #8
     888:	02530116 	subseq	r0, r3, #-2147483643	; 0x80000005
     88c:	01164208 	tsteq	r6, r8, lsl #4
     890:	d4030552 	strle	r0, [r3], #-1362	; 0x552
     894:	1600008f 	strne	r0, [r0], -pc, lsl #1
     898:	03055101 	movweq	r5, #20737	; 0x5101
     89c:	000090b0 	strheq	r9, [r0], -r0
     8a0:	05500116 	ldrbeq	r0, [r0, #-278]	; 0x116
     8a4:	00908403 	addseq	r8, r0, r3, lsl #8
     8a8:	98170000 	ldmdals	r7, {}	; <UNPREDICTABLE>
     8ac:	e0000082 	and	r0, r0, r2, lsl #1
     8b0:	00000006 	andeq	r0, r0, r6
     8b4:	00007f0b 	andeq	r7, r0, fp, lsl #30
     8b8:	00048000 	andeq	r8, r4, r0
     8bc:	00760c00 	rsbseq	r0, r6, r0, lsl #24
     8c0:	00090000 	andeq	r0, r9, r0
     8c4:	00047007 	andeq	r7, r4, r7
     8c8:	00c22000 	sbceq	r2, r2, r0
     8cc:	4a020000 	bmi	808d4 <__bss_end__+0x771dc>
     8d0:	000082a4 	andeq	r8, r0, r4, lsr #5
     8d4:	0000004c 	andeq	r0, r0, ip, asr #32
     8d8:	05029c01 	streq	r9, [r2, #-3073]	; 0xc01
     8dc:	52130000 	andspl	r0, r3, #0
     8e0:	12000001 	andne	r0, r0, #1
     8e4:	05000005 	streq	r0, [r0, #-5]
     8e8:	008fe003 	addeq	lr, pc, r3
     8ec:	82b01500 	adcshi	r1, r0, #0, 10
     8f0:	017e0000 	cmneq	lr, r0
     8f4:	04c00000 	strbeq	r0, [r0], #0
     8f8:	01160000 	tsteq	r6, r0
     8fc:	e4030550 	str	r0, [r3], #-1360	; 0x550
     900:	00000092 	muleq	r0, r2, r0
     904:	0082bc17 	addeq	fp, r2, r7, lsl ip
     908:	00027100 	andeq	r7, r2, r0, lsl #2
     90c:	82d81500 	sbcshi	r1, r8, #0, 10
     910:	06ca0000 	strbeq	r0, [sl], r0
     914:	04f80000 	ldrbteq	r0, [r8], #0
     918:	01160000 	tsteq	r6, r0
     91c:	59080253 	stmdbpl	r8, {r0, r1, r4, r6, r9}
     920:	05520116 	ldrbeq	r0, [r2, #-278]	; 0x116
     924:	008fe003 	addeq	lr, pc, r3
     928:	51011600 	tstpl	r1, r0, lsl #12
     92c:	90b00305 	adcsls	r0, r0, r5, lsl #6
     930:	01160000 	tsteq	r6, r0
     934:	84030550 	strhi	r0, [r3], #-1360	; 0x550
     938:	00000090 	muleq	r0, r0, r0
     93c:	0082dc17 	addeq	sp, r2, r7, lsl ip
     940:	0006e000 	andeq	lr, r6, r0
     944:	7f0b0000 	svcvc	0x000b0000
     948:	12000000 	andne	r0, r0, #0
     94c:	0c000005 	stceq	0, cr0, [r0], {5}
     950:	00000076 	andeq	r0, r0, r6, ror r0
     954:	02070010 	andeq	r0, r7, #16
     958:	20000005 	andcs	r0, r0, r5
     95c:	000002d6 	ldrdeq	r0, [r0], -r6
     960:	82f06402 	rscshi	r6, r0, #33554432	; 0x2000000
     964:	00280000 	eoreq	r0, r8, r0
     968:	9c010000 	stcls	0, cr0, [r1], {-0}
     96c:	00000583 	andeq	r0, r0, r3, lsl #11
     970:	0001cd1c 	andeq	ip, r1, ip, lsl sp
     974:	5d640200 	sfmpl	f0, 2, [r4, #-0]
     978:	c5000000 	strgt	r0, [r0, #-0]
     97c:	13000001 	movwne	r0, #1
     980:	00000152 	andeq	r0, r0, r2, asr r1
     984:	00000593 	muleq	r0, r3, r5
     988:	8ff40305 	svchi	0x00f40305
     98c:	08150000 	ldmdaeq	r5, {}	; <UNPREDICTABLE>
     990:	ca000083 	bgt	ba4 <_start-0x745c>
     994:	79000006 	stmdbvc	r0, {r1, r2}
     998:	16000005 	strne	r0, [r0], -r5
     99c:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     9a0:	52011665 	andpl	r1, r1, #105906176	; 0x6500000
     9a4:	8ff40305 	svchi	0x00f40305
     9a8:	01160000 	tsteq	r6, r0
     9ac:	b0030551 	andlt	r0, r3, r1, asr r5
     9b0:	16000090 			; <UNDEFINED> instruction: 0x16000090
     9b4:	03055001 	movweq	r5, #20481	; 0x5001
     9b8:	00009084 	andeq	r9, r0, r4, lsl #1
     9bc:	830c1700 	movwhi	r1, #50944	; 0xc700
     9c0:	06e00000 	strbteq	r0, [r0], r0
     9c4:	0b000000 	bleq	9cc <_start-0x7634>
     9c8:	0000007f 	andeq	r0, r0, pc, ror r0
     9cc:	00000593 	muleq	r0, r3, r5
     9d0:	0000760c 	andeq	r7, r0, ip, lsl #12
     9d4:	07000f00 	streq	r0, [r0, -r0, lsl #30]
     9d8:	00000583 	andeq	r0, r0, r3, lsl #11
     9dc:	0002eb1b 	andeq	lr, r2, fp, lsl fp
     9e0:	246c0200 	strbtcs	r0, [ip], #-512	; 0x200
     9e4:	18000001 	stmdane	r0, {r0}
     9e8:	28000083 	stmdacs	r0, {r0, r1, r7}
     9ec:	01000000 	mrseq	r0, (UNDEF: 0)
     9f0:	0006179c 	muleq	r6, ip, r7
     9f4:	02b01c00 	adcseq	r1, r0, #0, 24
     9f8:	6c020000 	stcvs	0, cr0, [r2], {-0}
     9fc:	00000387 	andeq	r0, r0, r7, lsl #7
     a00:	000001e6 	andeq	r0, r0, r6, ror #3
     a04:	67726112 			; <UNDEFINED> instruction: 0x67726112
     a08:	7d6c0200 	sfmvc	f0, 2, [ip, #-0]
     a0c:	07000000 	streq	r0, [r0, -r0]
     a10:	13000002 	movwne	r0, #2
     a14:	00000152 	andeq	r0, r0, r2, asr r1
     a18:	00000617 	andeq	r0, r0, r7, lsl r6
     a1c:	90040305 	andls	r0, r4, r5, lsl #6
     a20:	30150000 	andscc	r0, r5, r0
     a24:	ca000083 	bgt	c38 <_start-0x73c8>
     a28:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
     a2c:	16000006 	strne	r0, [r0], -r6
     a30:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     a34:	5201166d 	andpl	r1, r1, #114294784	; 0x6d00000
     a38:	90040305 	andls	r0, r4, r5, lsl #6
     a3c:	01160000 	tsteq	r6, r0
     a40:	b0030551 	andlt	r0, r3, r1, asr r5
     a44:	16000090 			; <UNDEFINED> instruction: 0x16000090
     a48:	03055001 	movweq	r5, #20481	; 0x5001
     a4c:	00009084 	andeq	r9, r0, r4, lsl #1
     a50:	83341700 	teqhi	r4, #0, 14
     a54:	06e00000 	strbteq	r0, [r0], r0
     a58:	07000000 	streq	r0, [r0, -r0]
     a5c:	00000502 	andeq	r0, r0, r2, lsl #10
     a60:	00030b1b 	andeq	r0, r3, fp, lsl fp
     a64:	35770200 	ldrbcc	r0, [r7, #-512]!	; 0x200
     a68:	40000001 	andmi	r0, r0, r1
     a6c:	28000083 	stmdacs	r0, {r0, r1, r7}
     a70:	01000000 	mrseq	r0, (UNDEF: 0)
     a74:	00067d9c 	muleq	r6, ip, sp
     a78:	01521300 	cmpeq	r2, r0, lsl #6
     a7c:	068d0000 	streq	r0, [sp], r0
     a80:	03050000 	movweq	r0, #20480	; 0x5000
     a84:	00009018 	andeq	r9, r0, r8, lsl r0
     a88:	00835815 	addeq	r5, r3, r5, lsl r8
     a8c:	0006ca00 	andeq	ip, r6, r0, lsl #20
     a90:	00067300 	andeq	r7, r6, r0, lsl #6
     a94:	53011600 	movwpl	r1, #5632	; 0x1600
     a98:	16780802 	ldrbtne	r0, [r8], -r2, lsl #16
     a9c:	03055201 	movweq	r5, #20993	; 0x5201
     aa0:	00009018 	andeq	r9, r0, r8, lsl r0
     aa4:	05510116 	ldrbeq	r0, [r1, #-278]	; 0x116
     aa8:	0090b003 	addseq	fp, r0, r3
     aac:	50011600 	andpl	r1, r1, r0, lsl #12
     ab0:	90840305 	addls	r0, r4, r5, lsl #6
     ab4:	17000000 	strne	r0, [r0, -r0]
     ab8:	0000835c 	andeq	r8, r0, ip, asr r3
     abc:	000006e0 	andeq	r0, r0, r0, ror #13
     ac0:	007f0b00 	rsbseq	r0, pc, r0, lsl #22
     ac4:	068d0000 	streq	r0, [sp], r0
     ac8:	760c0000 	strvc	r0, [ip], -r0
     acc:	0d000000 	stceq	0, cr0, [r0, #-0]
     ad0:	067d0700 	ldrbteq	r0, [sp], -r0, lsl #14
     ad4:	13180000 	tstne	r8, #0
     ad8:	02000002 	andeq	r0, r0, #2
     adc:	00012a0a 	andeq	r2, r1, sl, lsl #20
     ae0:	e4030500 	str	r0, [r3], #-1280	; 0x500
     ae4:	18000092 	stmdane	r0, {r1, r4, r7}
     ae8:	00000300 	andeq	r0, r0, r0, lsl #6
     aec:	06b40c02 	ldrteq	r0, [r4], r2, lsl #24
     af0:	03050000 	movweq	r0, #20480	; 0x5000
     af4:	000092e0 	andeq	r9, r0, r0, ror #5
     af8:	00012407 	andeq	r2, r1, r7, lsl #8
     afc:	02361800 	eorseq	r1, r6, #0, 16
     b00:	0d020000 	stceq	0, cr0, [r2, #-0]
     b04:	00000124 	andeq	r0, r0, r4, lsr #2
     b08:	92ec0305 	rscls	r0, ip, #335544320	; 0x14000000
     b0c:	39210000 	stmdbcc	r1!, {}	; <UNPREDICTABLE>
     b10:	05000003 	streq	r0, [r0, #-3]
     b14:	00002527 	andeq	r2, r0, r7, lsr #10
     b18:	0006e000 	andeq	lr, r6, r0
     b1c:	00861f00 	addeq	r1, r6, r0, lsl #30
     b20:	00220000 	eoreq	r0, r2, r0
     b24:	00000b23 	andeq	r0, r0, r3, lsr #22
     b28:	245c0500 	ldrbcs	r0, [ip], #-1280	; 0x500
     b2c:	0000021e 	andeq	r0, r0, lr, lsl r2
     b30:	007d6705 	rsbseq	r6, sp, r5, lsl #14
     b34:	2c1f0000 	ldccs	0, cr0, [pc], {-0}
     b38:	1f000000 	svcne	0x00000000
     b3c:	0000002c 	andeq	r0, r0, ip, lsr #32
     b40:	01910000 	orrseq	r0, r1, r0
     b44:	00040000 	andeq	r0, r4, r0
     b48:	000003ae 	andeq	r0, r0, lr, lsr #7
     b4c:	00160104 	andseq	r0, r6, r4, lsl #2
     b50:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
     b54:	4a000003 	bmi	b68 <_start-0x7498>
     b58:	74000003 	strvc	r0, [r0], #-3
     b5c:	58000083 	stmdapl	r0, {r0, r1, r7}
     b60:	cf000000 	svcgt	0x00000000
     b64:	02000002 	andeq	r0, r0, #2
     b68:	00000319 	andeq	r0, r0, r9, lsl r3
     b6c:	00302802 	eorseq	r2, r0, r2, lsl #16
     b70:	40030000 	andmi	r0, r3, r0
     b74:	04000003 	streq	r0, [r0], #-3
     b78:	00470003 	subeq	r0, r7, r3
     b7c:	93040000 	movwls	r0, #16384	; 0x4000
     b80:	47000003 	strmi	r0, [r0, -r3]
     b84:	00000000 	andeq	r0, r0, r0
     b88:	02040500 	andeq	r0, r4, #0, 10
     b8c:	00000342 	andeq	r0, r0, r2, asr #6
     b90:	00256202 	eoreq	r6, r5, r2, lsl #4
     b94:	04060000 	streq	r0, [r6], #-0
     b98:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
     b9c:	07040700 	streq	r0, [r4, -r0, lsl #14]
     ba0:	00000186 	andeq	r0, r0, r6, lsl #3
     ba4:	87060107 	strhi	r0, [r6, -r7, lsl #2]
     ba8:	07000000 	streq	r0, [r0, -r0]
     bac:	01dd0502 	bicseq	r0, sp, r2, lsl #10
     bb0:	04070000 	streq	r0, [r7], #-0
     bb4:	0001c005 	andeq	ip, r1, r5
     bb8:	05080700 	streq	r0, [r8, #-1792]	; 0x700
     bbc:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
     bc0:	85080107 	strhi	r0, [r8, #-263]	; 0x107
     bc4:	07000000 	streq	r0, [r0, -r0]
     bc8:	009d0702 	addseq	r0, sp, r2, lsl #14
     bcc:	04070000 	streq	r0, [r7], #-0
     bd0:	00018107 	andeq	r8, r1, r7, lsl #2
     bd4:	07080700 	streq	r0, [r8, -r0, lsl #14]
     bd8:	0000017c 	andeq	r0, r0, ip, ror r1
     bdc:	aa070407 	bge	1c1c00 <__bss_end__+0x1b8508>
     be0:	08000001 	stmdaeq	r0, {r0}
     be4:	0000a704 	andeq	sl, r0, r4, lsl #14
     be8:	08010700 	stmdaeq	r1, {r8, r9, sl}
     bec:	0000008e 	andeq	r0, r0, lr, lsl #1
     bf0:	00b40408 	adcseq	r0, r4, r8, lsl #8
     bf4:	a7090000 	strge	r0, [r9, -r0]
     bf8:	0a000000 	beq	c00 <_start-0x7400>
     bfc:	00000339 	andeq	r0, r0, r9, lsr r3
     c00:	00540601 	subseq	r0, r4, r1, lsl #12
     c04:	83740000 	cmnhi	r4, #0
     c08:	00580000 	subseq	r0, r8, r0
     c0c:	9c010000 	stcls	0, cr0, [r1], {-0}
     c10:	00000143 	andeq	r0, r0, r3, asr #2
     c14:	746d660b 	strbtvc	r6, [sp], #-1547	; 0x60b
     c18:	ae060100 	adfges	f0, f6, f0
     c1c:	02000000 	andeq	r0, r0, #0
     c20:	0d0c7091 	stceq	0, cr7, [ip, #-580]	; 0xfffffdbc
     c24:	00667562 	rsbeq	r7, r6, r2, ror #10
     c28:	01430801 	cmpeq	r3, r1, lsl #16
     c2c:	03050000 	movweq	r0, #20480	; 0x5000
     c30:	000092f0 	strdeq	r9, [r0], -r0
     c34:	00038e0e 	andeq	r8, r3, lr, lsl #28
     c38:	49090100 	stmdbmi	r9, {r8}
     c3c:	02000000 	andeq	r0, r0, #0
     c40:	730f5c91 	movwvc	r5, #64657	; 0xfc91
     c44:	0c01007a 	stceq	0, cr0, [r1], {122}	; 0x7a
     c48:	00000054 	andeq	r0, r0, r4, asr r0
     c4c:	00000228 	andeq	r0, r0, r8, lsr #4
     c50:	00839c10 	addeq	r9, r3, r0, lsl ip
     c54:	00017400 	andeq	r7, r1, r0, lsl #8
     c58:	00013600 	andeq	r3, r1, r0, lsl #12
     c5c:	53011100 	movwpl	r1, #4352	; 0x1100
     c60:	114c9102 	cmpne	ip, r2, lsl #2
     c64:	91035201 	tstls	r3, r1, lsl #4
     c68:	01110648 	tsteq	r1, r8, asr #12
     c6c:	000a0351 	andeq	r0, sl, r1, asr r3
     c70:	50011104 	andpl	r1, r1, r4, lsl #2
     c74:	00007402 	andeq	r7, r0, r2, lsl #8
     c78:	0083b012 	addeq	fp, r3, r2, lsl r0
     c7c:	50011100 	andpl	r1, r1, r0, lsl #2
     c80:	00007402 	andeq	r7, r0, r2, lsl #8
     c84:	00a71300 	adceq	r1, r7, r0, lsl #6
     c88:	01540000 	cmpeq	r4, r0
     c8c:	9a140000 	bls	500c94 <__bss_end__+0x4f759c>
     c90:	ff000000 			; <UNDEFINED> instruction: 0xff000000
     c94:	54150003 	ldrpl	r0, [r5], #-3
     c98:	63000000 	movwvs	r0, #0
     c9c:	16000001 	strne	r0, [r0], -r1
     ca0:	000000ae 	andeq	r0, r0, lr, lsr #1
     ca4:	03ad1700 			; <UNDEFINED> instruction: 0x03ad1700
     ca8:	20040000 	andcs	r0, r4, r0
     cac:	0000016e 	andeq	r0, r0, lr, ror #2
     cb0:	01540408 	cmpeq	r4, r8, lsl #8
     cb4:	36180000 	ldrcc	r0, [r8], -r0
     cb8:	05000003 	streq	r0, [r0, #-3]
     cbc:	00005402 	andeq	r5, r0, r2, lsl #8
     cc0:	00a11600 	adceq	r1, r1, r0, lsl #12
     cc4:	54160000 	ldrpl	r0, [r6], #-0
     cc8:	16000000 	strne	r0, [r0], -r0
     ccc:	000000ae 	andeq	r0, r0, lr, lsr #1
     cd0:	00004916 	andeq	r4, r0, r6, lsl r9
     cd4:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
     cd8:	04000000 	streq	r0, [r0], #-0
     cdc:	0004df00 	andeq	sp, r4, r0, lsl #30
     ce0:	16010400 	strne	r0, [r1], -r0, lsl #8
     ce4:	01000000 	mrseq	r0, (UNDEF: 0)
     ce8:	00000398 	muleq	r0, r8, r3
     cec:	0000034a 	andeq	r0, r0, sl, asr #6
     cf0:	000083cc 	andeq	r8, r0, ip, asr #7
     cf4:	00000034 	andeq	r0, r0, r4, lsr r0
     cf8:	000003d5 	ldrdeq	r0, [r0], -r5
     cfc:	69050402 	stmdbvs	r5, {r1, sl}
     d00:	0300746e 	movweq	r7, #1134	; 0x46e
     d04:	01860704 	orreq	r0, r6, r4, lsl #14
     d08:	01030000 	mrseq	r0, (UNDEF: 3)
     d0c:	00008706 	andeq	r8, r0, r6, lsl #14
     d10:	05020300 	streq	r0, [r2, #-768]	; 0x300
     d14:	000001dd 	ldrdeq	r0, [r0], -sp
     d18:	c0050403 	andgt	r0, r5, r3, lsl #8
     d1c:	03000001 	movweq	r0, #1
     d20:	01bb0508 			; <UNDEFINED> instruction: 0x01bb0508
     d24:	01030000 	mrseq	r0, (UNDEF: 3)
     d28:	00008508 	andeq	r8, r0, r8, lsl #10
     d2c:	07020300 	streq	r0, [r2, -r0, lsl #6]
     d30:	0000009d 	muleq	r0, sp, r0
     d34:	81070403 	tsthi	r7, r3, lsl #8
     d38:	03000001 	movweq	r0, #1
     d3c:	017c0708 	cmneq	ip, r8, lsl #14
     d40:	04030000 	streq	r0, [r3], #-0
     d44:	0001aa07 	andeq	sl, r1, r7, lsl #20
     d48:	08010300 	stmdaeq	r1, {r8, r9}
     d4c:	0000008e 	andeq	r0, r0, lr, lsl #1
     d50:	007f0404 	rsbseq	r0, pc, r4, lsl #8
     d54:	72050000 	andvc	r0, r5, #0
     d58:	06000000 	streq	r0, [r0], -r0
     d5c:	000003a4 	andeq	r0, r0, r4, lsr #7
     d60:	00250401 	eoreq	r0, r5, r1, lsl #8
     d64:	83cc0000 	bichi	r0, ip, #0
     d68:	00340000 	eorseq	r0, r4, r0
     d6c:	9c010000 	stcls	0, cr0, [r1], {-0}
     d70:	000000ab 	andeq	r0, r0, fp, lsr #1
     d74:	01007007 	tsteq	r0, r7
     d78:	00007904 	andeq	r7, r0, r4, lsl #18
     d7c:	00025100 	andeq	r5, r2, r0, lsl #2
     d80:	25080000 	strcs	r0, [r8, #-0]
     d84:	ba000000 	blt	d8c <_start-0x7274>
     d88:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     d8c:	00000025 	andeq	r0, r0, r5, lsr #32
     d90:	03b20a00 			; <UNDEFINED> instruction: 0x03b20a00
     d94:	1d020000 	stcne	0, cr0, [r2, #-0]
     d98:	000000c5 	andeq	r0, r0, r5, asr #1
     d9c:	00ab0404 	adceq	r0, fp, r4, lsl #8
     da0:	25080000 	strcs	r0, [r8, #-0]
     da4:	da000000 	ble	dac <_start-0x7254>
     da8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     dac:	00000079 	andeq	r0, r0, r9, ror r0
     db0:	03ad0b00 			; <UNDEFINED> instruction: 0x03ad0b00
     db4:	0c010000 	stceq	0, cr0, [r1], {-0}
     db8:	000000eb 	andeq	r0, r0, fp, ror #1
     dbc:	8eb00305 	cdphi	3, 11, cr0, cr0, cr5, {0}
     dc0:	04040000 	streq	r0, [r4], #-0
     dc4:	000000cb 	andeq	r0, r0, fp, asr #1
     dc8:	00065400 	andeq	r5, r6, r0, lsl #8
     dcc:	78000400 	stmdavc	r0, {sl}
     dd0:	04000005 	streq	r0, [r0], #-5
     dd4:	00001601 	andeq	r1, r0, r1, lsl #12
     dd8:	03ea0100 	mvneq	r0, #0, 2
     ddc:	034a0000 	movteq	r0, #40960	; 0xa000
     de0:	84000000 	strhi	r0, [r0], #-0
     de4:	04f00000 	ldrbteq	r0, [r0], #0
     de8:	046f0000 	strbteq	r0, [pc], #-0	; df0 <_start-0x7210>
     dec:	04020000 	streq	r0, [r2], #-0
     df0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
     df4:	07040300 	streq	r0, [r4, -r0, lsl #6]
     df8:	00000186 	andeq	r0, r0, r6, lsl #3
     dfc:	87060103 	strhi	r0, [r6, -r3, lsl #2]
     e00:	03000000 	movweq	r0, #0
     e04:	01dd0502 	bicseq	r0, sp, r2, lsl #10
     e08:	04030000 	streq	r0, [r3], #-0
     e0c:	0001c005 	andeq	ip, r1, r5
     e10:	05080300 	streq	r0, [r8, #-768]	; 0x300
     e14:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
     e18:	85080103 	strhi	r0, [r8, #-259]	; 0x103
     e1c:	03000000 	movweq	r0, #0
     e20:	009d0702 	addseq	r0, sp, r2, lsl #14
     e24:	04030000 	streq	r0, [r3], #-0
     e28:	00018107 	andeq	r8, r1, r7, lsl #2
     e2c:	07080300 	streq	r0, [r8, -r0, lsl #6]
     e30:	0000017c 	andeq	r0, r0, ip, ror r1
     e34:	aa070403 	bge	1c1e48 <__bss_end__+0x1b8750>
     e38:	04000001 	streq	r0, [r0], #-1
     e3c:	7a040504 	bvc	102254 <__bss_end__+0xf8b5c>
     e40:	03000000 	movweq	r0, #0
     e44:	008e0801 	addeq	r0, lr, r1, lsl #16
     e48:	04050000 	streq	r0, [r5], #-0
     e4c:	00000087 	andeq	r0, r0, r7, lsl #1
     e50:	00007a06 	andeq	r7, r0, r6, lsl #20
     e54:	03190700 	tsteq	r9, #0, 14
     e58:	28020000 	stmdacs	r2, {}	; <UNPREDICTABLE>
     e5c:	00000097 	muleq	r0, r7, r0
     e60:	00034008 	andeq	r4, r3, r8
     e64:	00040400 	andeq	r0, r4, r0, lsl #8
     e68:	000000ae 	andeq	r0, r0, lr, lsr #1
     e6c:	00039309 	andeq	r9, r3, r9, lsl #6
     e70:	00007200 	andeq	r7, r0, r0, lsl #4
     e74:	07000000 	streq	r0, [r0, -r0]
     e78:	00000342 	andeq	r0, r0, r2, asr #6
     e7c:	008c6202 	addeq	r6, ip, r2, lsl #4
     e80:	cc0a0000 	stcgt	0, cr0, [sl], {-0}
     e84:	01000003 	tsteq	r0, r3
     e88:	00002527 	andeq	r2, r0, r7, lsr #10
     e8c:	00840000 	addeq	r0, r4, r0
     e90:	00001400 	andeq	r1, r0, r0, lsl #8
     e94:	e09c0100 	adds	r0, ip, r0, lsl #2
     e98:	0b000000 	bleq	ea0 <_start-0x7160>
     e9c:	27010063 	strcs	r0, [r1, -r3, rrx]
     ea0:	00000025 	andeq	r0, r0, r5, lsr #32
     ea4:	0000026f 	andeq	r0, r0, pc, ror #4
     ea8:	61700c00 	cmnvs	r0, r0, lsl #24
     eac:	2e010064 	cdpcs	0, 0, cr0, cr1, cr4, {3}
     eb0:	00000074 	andeq	r0, r0, r4, ror r0
     eb4:	00008414 	andeq	r8, r0, r4, lsl r4
     eb8:	0000002c 	andeq	r0, r0, ip, lsr #32
     ebc:	01309c01 	teqeq	r0, r1, lsl #24
     ec0:	700b0000 	andvc	r0, fp, r0
     ec4:	742e0100 	strtvc	r0, [lr], #-256	; 0x100
     ec8:	9d000000 	stcls	0, cr0, [r0, #-0]
     ecc:	0d000002 	stceq	0, cr0, [r0, #-8]
     ed0:	000003dc 	ldrdeq	r0, [r0], -ip
     ed4:	00742e01 	rsbseq	r2, r4, r1, lsl #28
     ed8:	02c80000 	sbceq	r0, r8, #0
     edc:	0a0e0000 	beq	380ee4 <__bss_end__+0x3777ec>
     ee0:	01000004 	tsteq	r0, r4
     ee4:	0000252e 	andeq	r2, r0, lr, lsr #10
     ee8:	0f520100 	svceq	0x00520100
     eec:	006e656c 	rsbeq	r6, lr, ip, ror #10
     ef0:	00252f01 	eoreq	r2, r5, r1, lsl #30
     ef4:	51010000 	mrspl	r0, (UNDEF: 1)
     ef8:	03c40a00 	biceq	r0, r4, #0, 20
     efc:	37010000 	strcc	r0, [r1, -r0]
     f00:	00000074 	andeq	r0, r0, r4, ror r0
     f04:	00008440 	andeq	r8, r0, r0, asr #8
     f08:	00000040 	andeq	r0, r0, r0, asr #32
     f0c:	019c9c01 	orrseq	r9, ip, r1, lsl #24
     f10:	640b0000 	strvs	r0, [fp], #-0
     f14:	01007473 	tsteq	r0, r3, ror r4
     f18:	00007437 	andeq	r7, r0, r7, lsr r4
     f1c:	0002e900 	andeq	lr, r2, r0, lsl #18
     f20:	006e0b00 	rsbeq	r0, lr, r0, lsl #22
     f24:	00253701 	eoreq	r3, r5, r1, lsl #14
     f28:	03210000 	teqeq	r1, #0
     f2c:	700b0000 	andvc	r0, fp, r0
     f30:	74370100 	ldrtvc	r0, [r7], #-256	; 0x100
     f34:	42000000 	andmi	r0, r0, #0
     f38:	0d000003 	stceq	0, cr0, [r0, #-12]
     f3c:	000000cd 	andeq	r0, r0, sp, asr #1
     f40:	00743701 	rsbseq	r3, r4, r1, lsl #14
     f44:	03780000 	cmneq	r8, #0
     f48:	6c100000 	ldcvs	0, cr0, [r0], {-0}
     f4c:	01006e65 	tsteq	r0, r5, ror #28
     f50:	00002539 	andeq	r2, r0, r9, lsr r5
     f54:	00039600 	andeq	r9, r3, r0, lsl #12
     f58:	00730f00 	rsbseq	r0, r3, r0, lsl #30
     f5c:	00743d01 	rsbseq	r3, r4, r1, lsl #26
     f60:	50010000 	andpl	r0, r1, r0
     f64:	04180a00 	ldreq	r0, [r8], #-2560	; 0xa00
     f68:	47010000 	strmi	r0, [r1, -r0]
     f6c:	00000074 	andeq	r0, r0, r4, ror r0
     f70:	00008480 	andeq	r8, r0, r0, lsl #9
     f74:	00000198 	muleq	r0, r8, r1
     f78:	02ca9c01 	sbceq	r9, sl, #256	; 0x100
     f7c:	dc0d0000 	stcle	0, cr0, [sp], {-0}
     f80:	01000003 	tsteq	r0, r3
     f84:	00002c47 	andeq	r2, r0, r7, asr #24
     f88:	0003bd00 	andeq	fp, r3, r0, lsl #26
     f8c:	73640b00 	cmnvc	r4, #0, 22
     f90:	47010074 	smlsdxmi	r1, r4, r0, r0
     f94:	00000074 	andeq	r0, r0, r4, ror r0
     f98:	000003eb 	andeq	r0, r0, fp, ror #7
     f9c:	01006e0b 	tsteq	r0, fp, lsl #28
     fa0:	00002547 	andeq	r2, r0, r7, asr #10
     fa4:	00045900 	andeq	r5, r4, r0, lsl #18
     fa8:	61760b00 	cmnvs	r6, r0, lsl #22
     fac:	4701006c 	strmi	r0, [r1, -ip, rrx]
     fb0:	00000025 	andeq	r0, r0, r5, lsr #32
     fb4:	00000485 	andeq	r0, r0, r5, lsl #9
     fb8:	00040a0d 	andeq	r0, r4, sp, lsl #20
     fbc:	25470100 	strbcs	r0, [r7, #-256]	; 0x100
     fc0:	0f000000 	svceq	0x00000000
     fc4:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
     fc8:	000003e1 	andeq	r0, r0, r1, ror #7
     fcc:	00254701 	eoreq	r4, r5, r1, lsl #14
     fd0:	91020000 	mrsls	r0, (UNDEF: 2)
     fd4:	75620f04 	strbvc	r0, [r2, #-3844]!	; 0xf04
     fd8:	4c010066 	stcmi	0, cr0, [r1], {102}	; 0x66
     fdc:	000002ca 	andeq	r0, r0, sl, asr #5
     fe0:	7fa89103 	svcvc	0x00a89103
     fe4:	01007010 	tsteq	r0, r0, lsl r0
     fe8:	0000744c 	andeq	r7, r0, ip, asr #8
     fec:	00053900 	andeq	r3, r5, r0, lsl #18
     ff0:	00751000 	rsbseq	r1, r5, r0
     ff4:	002c4d01 	eoreq	r4, ip, r1, lsl #26
     ff8:	05de0000 	ldrbeq	r0, [lr]
     ffc:	52110000 	andspl	r0, r1, #0
    1000:	ea000001 	b	100c <_start-0x6ff4>
    1004:	05000002 	streq	r0, [r0, #-2]
    1008:	0090c003 	addseq	ip, r0, r3
    100c:	84ec1200 	strbthi	r1, [ip], #512	; 0x200
    1010:	00740000 	rsbseq	r0, r4, r0
    1014:	02610000 	rsbeq	r0, r1, #0
    1018:	be130000 	cdplt	0, 1, cr0, cr3, cr0, {0}
    101c:	01000003 	tsteq	r0, r3
    1020:	00002c52 	andeq	r2, r0, r2, asr ip
    1024:	0006ee00 	andeq	lr, r6, r0, lsl #28
    1028:	d0140000 	andsle	r0, r4, r0
    102c:	3a000085 	bcc	1248 <_start-0x6db8>
    1030:	90000006 	andls	r0, r0, r6
    1034:	15000002 	strne	r0, [r0, #-2]
    1038:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    103c:	52011575 	andpl	r1, r1, #490733568	; 0x1d400000
    1040:	90c00305 	sbcls	r0, r0, r5, lsl #6
    1044:	01150000 	tsteq	r5, r0
    1048:	f8030551 			; <UNDEFINED> instruction: 0xf8030551
    104c:	15000090 	strne	r0, [r0, #-144]	; 0x90
    1050:	03055001 	movweq	r5, #20481	; 0x5001
    1054:	000090e4 	andeq	r9, r0, r4, ror #1
    1058:	85d41600 	ldrbhi	r1, [r4, #1536]	; 0x600
    105c:	06500000 	ldrbeq	r0, [r0], -r0
    1060:	e0140000 	ands	r0, r4, r0
    1064:	e0000085 	and	r0, r0, r5, lsl #1
    1068:	ad000000 	stcge	0, cr0, [r0, #-0]
    106c:	15000002 	strne	r0, [r0, #-2]
    1070:	7d025101 	stfvcs	f5, [r2, #-4]
    1074:	f4170000 			; <UNDEFINED> instruction: 0xf4170000
    1078:	30000085 	andcc	r0, r0, r5, lsl #1
    107c:	15000001 	strne	r0, [r0, #-1]
    1080:	7d025301 	stcvc	3, cr5, [r2, #-4]
    1084:	51011500 	tstpl	r1, r0, lsl #10
    1088:	15007402 	strne	r7, [r0, #-1026]	; 0x402
    108c:	75025001 	strvc	r5, [r2, #-1]
    1090:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1094:	0000007a 	andeq	r0, r0, sl, ror r0
    1098:	000002da 	ldrdeq	r0, [r0], -sl
    109c:	00006b19 	andeq	r6, r0, r9, lsl fp
    10a0:	18003f00 	stmdane	r0, {r8, r9, sl, fp, ip, sp}
    10a4:	0000007a 	andeq	r0, r0, sl, ror r0
    10a8:	000002ea 	andeq	r0, r0, sl, ror #5
    10ac:	00006b19 	andeq	r6, r0, r9, lsl fp
    10b0:	06000400 	streq	r0, [r0], -r0, lsl #8
    10b4:	000002da 	ldrdeq	r0, [r0], -sl
    10b8:	0003fb1a 	andeq	pc, r3, sl, lsl fp	; <UNPREDICTABLE>
    10bc:	181f0100 	ldmdane	pc, {r8}	; <UNPREDICTABLE>
    10c0:	50000086 	andpl	r0, r0, r6, lsl #1
    10c4:	01000000 	mrseq	r0, (UNDEF: 0)
    10c8:	00036a9c 	muleq	r3, ip, sl
    10cc:	04100d00 	ldreq	r0, [r0], #-3328	; 0xd00
    10d0:	1f010000 	svcne	0x00010000
    10d4:	00000379 	andeq	r0, r0, r9, ror r3
    10d8:	0000071a 	andeq	r0, r0, sl, lsl r7
    10dc:	0003d40d 	andeq	sp, r3, sp, lsl #8
    10e0:	8e1f0100 	mufhie	f0, f7, f0
    10e4:	46000003 	strmi	r0, [r0], -r3
    10e8:	11000007 	tstne	r0, r7
    10ec:	00000152 	andeq	r0, r0, r2, asr r1
    10f0:	000003a4 	andeq	r0, r0, r4, lsr #7
    10f4:	90c80305 	sbcls	r0, r8, r5, lsl #6
    10f8:	38140000 	ldmdacc	r4, {}	; <UNPREDICTABLE>
    10fc:	3a000086 	bcc	131c <_start-0x6ce4>
    1100:	60000006 	andvs	r0, r0, r6
    1104:	15000003 	strne	r0, [r0, #-3]
    1108:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    110c:	52011520 	andpl	r1, r1, #32, 10	; 0x8000000
    1110:	90c80305 	sbcls	r0, r8, r5, lsl #6
    1114:	01150000 	tsteq	r5, r0
    1118:	f8030551 			; <UNDEFINED> instruction: 0xf8030551
    111c:	15000090 	strne	r0, [r0, #-144]	; 0x90
    1120:	03055001 	movweq	r5, #20481	; 0x5001
    1124:	00009130 	andeq	r9, r0, r0, lsr r1
    1128:	863c1600 	ldrthi	r1, [ip], -r0, lsl #12
    112c:	06500000 	ldrbeq	r0, [r0], -r0
    1130:	1b000000 	blne	1138 <_start-0x6ec8>
    1134:	00000025 	andeq	r0, r0, r5, lsr #32
    1138:	00000379 	andeq	r0, r0, r9, ror r3
    113c:	0000251c 	andeq	r2, r0, ip, lsl r5
    1140:	04050000 	streq	r0, [r5], #-0
    1144:	0000036a 	andeq	r0, r0, sl, ror #6
    1148:	0000251b 	andeq	r2, r0, fp, lsl r5
    114c:	00038e00 	andeq	r8, r3, r0, lsl #28
    1150:	00811c00 	addeq	r1, r1, r0, lsl #24
    1154:	05000000 	streq	r0, [r0, #-0]
    1158:	00037f04 	andeq	r7, r3, r4, lsl #30
    115c:	007a1800 	rsbseq	r1, sl, r0, lsl #16
    1160:	03a40000 			; <UNDEFINED> instruction: 0x03a40000
    1164:	6b190000 	blvs	64116c <__bss_end__+0x637a74>
    1168:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    116c:	03940600 	orrseq	r0, r4, #0, 12
    1170:	361d0000 	ldrcc	r0, [sp], -r0
    1174:	01000003 	tsteq	r0, r3
    1178:	0000257d 	andeq	r2, r0, sp, ror r5
    117c:	00866800 	addeq	r6, r6, r0, lsl #16
    1180:	00028800 	andeq	r8, r2, r0, lsl #16
    1184:	ff9c0100 			; <UNDEFINED> instruction: 0xff9c0100
    1188:	0b000005 	bleq	11a4 <_start-0x6e5c>
    118c:	00667562 	rsbeq	r7, r6, r2, ror #10
    1190:	00747d01 	rsbseq	r7, r4, r1, lsl #26
    1194:	07720000 	ldrbeq	r0, [r2, -r0]!
    1198:	6e0b0000 	cdpvs	0, 0, cr0, cr11, cr0, {0}
    119c:	257d0100 	ldrbcs	r0, [sp, #-256]!	; 0x100
    11a0:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    11a4:	0b000007 	bleq	11c8 <_start-0x6e38>
    11a8:	00746d66 	rsbseq	r6, r4, r6, ror #26
    11ac:	00817d01 	addeq	r7, r1, r1, lsl #26
    11b0:	07cc0000 	strbeq	r0, [ip, r0]
    11b4:	8e0d0000 	cdphi	0, 0, cr0, cr13, cr0, {0}
    11b8:	01000003 	tsteq	r0, r3
    11bc:	0000ae7d 	andeq	sl, r0, sp, ror lr
    11c0:	00080000 	andeq	r0, r8, r0
    11c4:	00701000 	rsbseq	r1, r0, r0
    11c8:	00747e01 	rsbseq	r7, r4, r1, lsl #28
    11cc:	08130000 	ldmdaeq	r3, {}	; <UNPREDICTABLE>
    11d0:	65100000 	ldrvs	r0, [r0, #-0]
    11d4:	747e0100 	ldrbtvc	r0, [lr], #-256	; 0x100
    11d8:	91000000 	mrsls	r0, (UNDEF: 0)
    11dc:	11000008 	tstne	r0, r8
    11e0:	00000152 	andeq	r0, r0, r2, asr r1
    11e4:	0000060f 	andeq	r0, r0, pc, lsl #12
    11e8:	90d80305 	sbcsls	r0, r8, r5, lsl #6
    11ec:	bc1e0000 	ldclt	0, cr0, [lr], {-0}
    11f0:	f4000086 	vst4.32	{d0-d3}, [r0], r6
    11f4:	10000001 	andne	r0, r0, r1
    11f8:	8b010073 	blhi	413cc <__bss_end__+0x37cd4>
    11fc:	00000074 	andeq	r0, r0, r4, ror r0
    1200:	000008b8 			; <UNDEFINED> instruction: 0x000008b8
    1204:	6d756e0f 	ldclvs	14, cr6, [r5, #-60]!	; 0xffffffc4
    1208:	148b0100 	strne	r0, [fp], #256	; 0x100
    120c:	03000006 	movweq	r0, #6
    1210:	137ed891 	cmnne	lr, #9502720	; 0x910000
    1214:	0000040a 	andeq	r0, r0, sl, lsl #8
    1218:	002c8c01 	eoreq	r8, ip, r1, lsl #24
    121c:	090d0000 	stmdbeq	sp, {}	; <UNPREDICTABLE>
    1220:	ec140000 	ldc	0, cr0, [r4], {-0}
    1224:	b9000086 	stmdblt	r0, {r1, r2, r7}
    1228:	6d000000 	stcvs	0, cr0, [r0, #-0]
    122c:	15000004 	strne	r0, [r0, #-4]
    1230:	75025001 	strvc	r5, [r2, #-1]
    1234:	10140000 	andsne	r0, r4, r0
    1238:	3a000087 	bcc	145c <_start-0x6ba4>
    123c:	9c000006 	stcls	0, cr0, [r0], {6}
    1240:	15000004 	strne	r0, [r0, #-4]
    1244:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    1248:	52011592 	andpl	r1, r1, #612368384	; 0x24800000
    124c:	90d80305 	sbcsls	r0, r8, r5, lsl #6
    1250:	01150000 	tsteq	r5, r0
    1254:	f8030551 			; <UNDEFINED> instruction: 0xf8030551
    1258:	15000090 	strne	r0, [r0, #-144]	; 0x90
    125c:	03055001 	movweq	r5, #20481	; 0x5001
    1260:	00009148 	andeq	r9, r0, r8, asr #2
    1264:	87141600 	ldrhi	r1, [r4, -r0, lsl #12]
    1268:	06500000 	ldrbeq	r0, [r0], -r0
    126c:	94140000 	ldrls	r0, [r4], #-0
    1270:	3a000087 	bcc	1494 <_start-0x6b6c>
    1274:	d4000006 	strle	r0, [r0], #-6
    1278:	15000004 	strne	r0, [r0, #-4]
    127c:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    1280:	52011598 	andpl	r1, r1, #152, 10	; 0x26000000
    1284:	90d80305 	sbcsls	r0, r8, r5, lsl #6
    1288:	01150000 	tsteq	r5, r0
    128c:	f8030551 			; <UNDEFINED> instruction: 0xf8030551
    1290:	15000090 	strne	r0, [r0, #-144]	; 0x90
    1294:	03055001 	movweq	r5, #20481	; 0x5001
    1298:	00009164 	andeq	r9, r0, r4, ror #2
    129c:	87981600 	ldrhi	r1, [r8, r0, lsl #12]
    12a0:	06500000 	ldrbeq	r0, [r0], -r0
    12a4:	bc140000 	ldclt	0, cr0, [r4], {-0}
    12a8:	9c000087 	stcls	0, cr0, [r0], {135}	; 0x87
    12ac:	0a000001 	beq	12b8 <_start-0x6d48>
    12b0:	15000005 	strne	r0, [r0, #-5]
    12b4:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    12b8:	51011580 	smlabbpl	r1, r0, r5, r1
    12bc:	7ed09103 	atnvcs	f1, f3
    12c0:	01500115 	cmpeq	r0, r5, lsl r1
    12c4:	7d02153a 	cfstr32vc	mvfx1, [r2, #-232]	; 0xffffff18
    12c8:	15310104 	ldrne	r0, [r1, #-260]!	; 0x104
    12cc:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    12d0:	14000077 	strne	r0, [r0], #-119	; 0x77
    12d4:	000087e4 	andeq	r8, r0, r4, ror #15
    12d8:	0000019c 	muleq	r0, ip, r1
    12dc:	00000537 	andeq	r0, r0, r7, lsr r5
    12e0:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    12e4:	01158008 	tsteq	r5, r8
    12e8:	d0910351 	addsle	r0, r1, r1, asr r3
    12ec:	5001157e 	andpl	r1, r1, lr, ror r5
    12f0:	02153a01 	andseq	r3, r5, #4096	; 0x1000
    12f4:	3001047d 	andcc	r0, r1, sp, ror r4
    12f8:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    12fc:	00007702 	andeq	r7, r0, r2, lsl #14
    1300:	00880c14 	addeq	r0, r8, r4, lsl ip
    1304:	00019c00 	andeq	r9, r1, r0, lsl #24
    1308:	00056400 	andeq	r6, r5, r0, lsl #8
    130c:	52011500 	andpl	r1, r1, #0, 10
    1310:	15800802 	strne	r0, [r0, #2050]	; 0x802
    1314:	91035101 	tstls	r3, r1, lsl #2
    1318:	01157ed0 			; <UNDEFINED> instruction: 0x01157ed0
    131c:	15400150 	strbne	r0, [r0, #-336]	; 0x150
    1320:	01047d02 	tsteq	r4, r2, lsl #26
    1324:	7d021530 	cfstr32vc	mvfx1, [r2, #-192]	; 0xffffff40
    1328:	00770200 	rsbseq	r0, r7, r0, lsl #4
    132c:	88341400 	ldmdahi	r4!, {sl, ip}
    1330:	019c0000 	orrseq	r0, ip, r0
    1334:	05910000 	ldreq	r0, [r1]
    1338:	01150000 	tsteq	r5, r0
    133c:	80080252 	andhi	r0, r8, r2, asr r2
    1340:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    1344:	157ed091 	ldrbne	sp, [lr, #-145]!	; 0x91
    1348:	32015001 	andcc	r5, r1, #1
    134c:	047d0215 	ldrbteq	r0, [sp], #-533	; 0x215
    1350:	02153001 	andseq	r3, r5, #1
    1354:	7702007d 	smlsdxvc	r2, sp, r0, r0
    1358:	68140000 	ldmdavs	r4, {}	; <UNPREDICTABLE>
    135c:	9c000088 	stcls	0, cr0, [r0], {136}	; 0x88
    1360:	be000001 	cdplt	0, 0, cr0, cr0, cr1, {0}
    1364:	15000005 	strne	r0, [r0, #-5]
    1368:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    136c:	51011580 	smlabbpl	r1, r0, r5, r1
    1370:	7ed09103 	atnvcs	f1, f3
    1374:	01500115 	cmpeq	r0, r5, lsl r1
    1378:	7d021538 	cfstr32vc	mvfx1, [r2, #-224]	; 0xffffff20
    137c:	15300104 	ldrne	r0, [r0, #-260]!	; 0x104
    1380:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    1384:	14000077 	strne	r0, [r0], #-119	; 0x77
    1388:	00008884 	andeq	r8, r0, r4, lsl #17
    138c:	0000063a 	andeq	r0, r0, sl, lsr r6
    1390:	000005f4 	strdeq	r0, [r0], -r4
    1394:	02530115 	subseq	r0, r3, #1073741829	; 0x40000005
    1398:	0115b908 	tsteq	r5, r8, lsl #18
    139c:	d8030552 	stmdale	r3, {r1, r4, r6, r8, sl}
    13a0:	15000090 	strne	r0, [r0, #-144]	; 0x90
    13a4:	03055101 	movweq	r5, #20737	; 0x5101
    13a8:	000090f8 	strdeq	r9, [r0], -r8
    13ac:	05500115 	ldrbeq	r0, [r0, #-277]	; 0x115
    13b0:	00918c03 	addseq	r8, r1, r3, lsl #24
    13b4:	7d021500 	cfstr32vc	mvfx1, [r2, #-0]
    13b8:	00790200 	rsbseq	r0, r9, r0, lsl #4
    13bc:	88881600 	stmhi	r8, {r9, sl, ip}
    13c0:	06500000 	ldrbeq	r0, [r0], -r0
    13c4:	00000000 	andeq	r0, r0, r0
    13c8:	00007a18 	andeq	r7, r0, r8, lsl sl
    13cc:	00060f00 	andeq	r0, r6, r0, lsl #30
    13d0:	006b1900 	rsbeq	r1, fp, r0, lsl #18
    13d4:	00090000 	andeq	r0, r9, r0
    13d8:	0005ff06 	andeq	pc, r5, r6, lsl #30
    13dc:	007a1800 	rsbseq	r1, sl, r0, lsl #16
    13e0:	06240000 	strteq	r0, [r4], -r0
    13e4:	6b190000 	blvs	6413ec <__bss_end__+0x637cf4>
    13e8:	7f000000 	svcvc	0x00000000
    13ec:	03b21f00 			; <UNDEFINED> instruction: 0x03b21f00
    13f0:	1d030000 	stcne	0, cr0, [r3, #-0]
    13f4:	00000379 	andeq	r0, r0, r9, ror r3
    13f8:	0003ad1f 	andeq	sl, r3, pc, lsl sp
    13fc:	8e200300 	cdphi	3, 2, cr0, cr0, cr0, {0}
    1400:	20000003 	andcs	r0, r0, r3
    1404:	00000339 	andeq	r0, r0, r9, lsr r3
    1408:	00252703 	eoreq	r2, r5, r3, lsl #14
    140c:	06500000 	ldrbeq	r0, [r0], -r0
    1410:	811c0000 	tsthi	ip, r0
    1414:	21000000 	mrscs	r0, (UNDEF: 0)
    1418:	000b2200 	andeq	r2, fp, r0, lsl #4
    141c:	5c030000 	stcpl	0, cr0, [r3], {-0}
    1420:	00010b00 	andeq	r0, r1, r0, lsl #22
    1424:	56000400 	strpl	r0, [r0], -r0, lsl #8
    1428:	04000007 	streq	r0, [r0], #-7
    142c:	00001601 	andeq	r1, r0, r1, lsl #12
    1430:	041d0100 	ldreq	r0, [sp], #-256	; 0x100
    1434:	034a0000 	movteq	r0, #40960	; 0xa000
    1438:	88f00000 	ldmhi	r0!, {}^	; <UNPREDICTABLE>
    143c:	00340000 	eorseq	r0, r4, r0
    1440:	064f0000 	strbeq	r0, [pc], -r0
    1444:	04020000 	streq	r0, [r2], #-0
    1448:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    144c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1450:	00000186 	andeq	r0, r0, r6, lsl #3
    1454:	87060103 	strhi	r0, [r6, -r3, lsl #2]
    1458:	03000000 	movweq	r0, #0
    145c:	01dd0502 	bicseq	r0, sp, r2, lsl #10
    1460:	04030000 	streq	r0, [r3], #-0
    1464:	0001c005 	andeq	ip, r1, r5
    1468:	05080300 	streq	r0, [r8, #-768]	; 0x300
    146c:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    1470:	85080103 	strhi	r0, [r8, #-259]	; 0x103
    1474:	03000000 	movweq	r0, #0
    1478:	009d0702 	addseq	r0, sp, r2, lsl #14
    147c:	04030000 	streq	r0, [r3], #-0
    1480:	00018107 	andeq	r8, r1, r7, lsl #2
    1484:	07080300 	streq	r0, [r8, -r0, lsl #6]
    1488:	0000017c 	andeq	r0, r0, ip, ror r1
    148c:	aa070403 	bge	1c24a0 <__bss_end__+0x1b8da8>
    1490:	03000001 	movweq	r0, #1
    1494:	008e0801 	addeq	r0, lr, r1, lsl #16
    1498:	53040000 	movwpl	r0, #16384	; 0x4000
    149c:	01000004 	tsteq	r0, r4
    14a0:	0088f003 	addeq	pc, r8, r3
    14a4:	00003400 	andeq	r3, r0, r0, lsl #8
    14a8:	de9c0100 	fmllee	f0, f4, f0
    14ac:	05000000 	streq	r0, [r0, #-0]
    14b0:	00000431 	andeq	r0, r0, r1, lsr r4
    14b4:	00250401 	eoreq	r0, r5, r1, lsl #8
    14b8:	3f050000 	svccc	0x00050000
    14bc:	01000004 	tsteq	r0, r4
    14c0:	00002504 	andeq	r2, r0, r4, lsl #10
    14c4:	006d0600 	rsbeq	r0, sp, r0, lsl #12
    14c8:	05010000 	streq	r0, [r1, #-0]
    14cc:	000000b1 	strheq	r0, [r0], -r1
    14d0:	62080007 	andvs	r0, r8, #7
    14d4:	01007373 	tsteq	r0, r3, ror r3
    14d8:	0000de07 	andeq	sp, r0, r7, lsl #28
    14dc:	00093700 	andeq	r3, r9, r0, lsl #14
    14e0:	044b0900 	strbeq	r0, [fp], #-2304	; 0x900
    14e4:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    14e8:	000000de 	ldrdeq	r0, [r0], -lr
    14ec:	0089180a 	addeq	r1, r9, sl, lsl #16
    14f0:	0000fa00 	andeq	pc, r0, r0, lsl #20
    14f4:	891c0a00 	ldmdbhi	ip, {r9, fp}
    14f8:	01070000 	mrseq	r0, (UNDEF: 7)
    14fc:	0b000000 	bleq	1504 <_start-0x6afc>
    1500:	00002504 	andeq	r2, r0, r4, lsl #10
    1504:	04310500 	ldrteq	r0, [r1], #-1280	; 0x500
    1508:	04010000 	streq	r0, [r1], #-0
    150c:	00000025 	andeq	r0, r0, r5, lsr #32
    1510:	00043f05 	andeq	r3, r4, r5, lsl #30
    1514:	25040100 	strcs	r0, [r4, #-256]	; 0x100
    1518:	06000000 	streq	r0, [r0], -r0
    151c:	0000006d 	andeq	r0, r0, sp, rrx
    1520:	01070501 	tsteq	r7, r1, lsl #10
    1524:	00070000 	andeq	r0, r7, r0
    1528:	00000b0c 	andeq	r0, r0, ip, lsl #22
    152c:	005c0200 	subseq	r0, ip, r0, lsl #4
    1530:	000001ad 	andeq	r0, r0, sp, lsr #3
    1534:	08000004 	stmdaeq	r0, {r2}
    1538:	01040000 	mrseq	r0, (UNDEF: 4)
    153c:	00000016 	andeq	r0, r0, r6, lsl r0
    1540:	00047501 	andeq	r7, r4, r1, lsl #10
    1544:	00034a00 	andeq	r4, r3, r0, lsl #20
	...
    1550:	0006e900 	andeq	lr, r6, r0, lsl #18
    1554:	05040200 	streq	r0, [r4, #-512]	; 0x200
    1558:	00746e69 	rsbseq	r6, r4, r9, ror #28
    155c:	86070403 	strhi	r0, [r7], -r3, lsl #8
    1560:	03000001 	movweq	r0, #1
    1564:	00870601 	addeq	r0, r7, r1, lsl #12
    1568:	02030000 	andeq	r0, r3, #0
    156c:	0001dd05 	andeq	sp, r1, r5, lsl #26
    1570:	05040300 	streq	r0, [r4, #-768]	; 0x300
    1574:	000001c0 	andeq	r0, r0, r0, asr #3
    1578:	bb050803 	bllt	14358c <__bss_end__+0x139e94>
    157c:	03000001 	movweq	r0, #1
    1580:	00850801 	addeq	r0, r5, r1, lsl #16
    1584:	02030000 	andeq	r0, r3, #0
    1588:	00009d07 	andeq	r9, r0, r7, lsl #26
    158c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1590:	00000181 	andeq	r0, r0, r1, lsl #3
    1594:	7c070803 	stcvc	8, cr0, [r7], {3}
    1598:	03000001 	movweq	r0, #1
    159c:	01aa0704 			; <UNDEFINED> instruction: 0x01aa0704
    15a0:	01030000 	mrseq	r0, (UNDEF: 3)
    15a4:	00008e08 	andeq	r8, r0, r8, lsl #28
    15a8:	045b0400 	ldrbeq	r0, [fp], #-1024	; 0x400
    15ac:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    15b0:	00000025 	andeq	r0, r0, r5, lsr #32
    15b4:	00008924 	andeq	r8, r0, r4, lsr #18
    15b8:	00000018 	andeq	r0, r0, r8, lsl r0
    15bc:	00a29c01 	adceq	r9, r2, r1, lsl #24
    15c0:	d0050000 	andle	r0, r5, r0
    15c4:	01000004 	tsteq	r0, r4
    15c8:	00002c0f 	andeq	r2, r0, pc, lsl #24
    15cc:	00095700 	andeq	r5, r9, r0, lsl #14
    15d0:	aa060000 	bge	1815d8 <__bss_end__+0x177ee0>
    15d4:	01000004 	tsteq	r0, r4
    15d8:	00893c17 	addeq	r3, r9, r7, lsl ip
    15dc:	00001400 	andeq	r1, r0, r0, lsl #8
    15e0:	c79c0100 	ldrgt	r0, [ip, r0, lsl #2]
    15e4:	05000000 	streq	r0, [r0, #-0]
    15e8:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    15ec:	002c1801 	eoreq	r1, ip, r1, lsl #16
    15f0:	09760000 	ldmdbeq	r6!, {}^	; <UNPREDICTABLE>
    15f4:	06000000 	streq	r0, [r0], -r0
    15f8:	0000000b 	andeq	r0, r0, fp
    15fc:	89501f01 	ldmdbhi	r0, {r0, r8, r9, sl, fp, ip}^
    1600:	00480000 	subeq	r0, r8, r0
    1604:	9c010000 	stcls	0, cr0, [r1], {-0}
    1608:	00000177 	andeq	r0, r0, r7, ror r1
    160c:	0004c807 	andeq	ip, r4, r7, lsl #16
    1610:	772a0100 	strvc	r0, [sl, -r0, lsl #2]!
    1614:	1c000001 	stcne	0, cr0, [r0], {1}
    1618:	07201000 	streq	r1, [r0, -r0]!
    161c:	000004a2 	andeq	r0, r0, r2, lsr #9
    1620:	01772b01 	cmneq	r7, r1, lsl #22
    1624:	00240000 	eoreq	r0, r4, r0
    1628:	69072010 	stmdbvs	r7, {r4, sp}
    162c:	01000004 	tsteq	r0, r4
    1630:	0001772c 	andeq	r7, r1, ip, lsr #14
    1634:	00000000 	andeq	r0, r0, r0
    1638:	0489085a 	streq	r0, [r9], #2138	; 0x85a
    163c:	2d010000 	stccs	0, cr0, [r1, #-0]
    1640:	00000177 	andeq	r0, r0, r7, ror r1
    1644:	89580920 	ldmdbhi	r8, {r5, r8, fp}^
    1648:	00790000 	rsbseq	r0, r9, r0
    164c:	64090000 	strvs	r0, [r9], #-0
    1650:	a2000089 	andge	r0, r0, #137	; 0x89
    1654:	0a000000 	beq	165c <_start-0x69a4>
    1658:	0000896c 	andeq	r8, r0, ip, ror #18
    165c:	0000018d 	andeq	r0, r0, sp, lsl #3
    1660:	0000013a 	andeq	r0, r0, sl, lsr r1
    1664:	0150010b 	cmpeq	r0, fp, lsl #2
    1668:	780a004e 	stmdavc	sl, {r1, r2, r3, r6}
    166c:	9e000089 	cdpls	0, 0, cr0, cr0, cr9, {4}
    1670:	5a000001 	bpl	167c <_start-0x6984>
    1674:	0b000001 	bleq	1680 <_start-0x6980>
    1678:	0c055101 	stfeqs	f5, [r5], {1}
    167c:	5a000001 	bpl	1688 <_start-0x6978>
    1680:	0550010b 	ldrbeq	r0, [r0, #-267]	; 0x10b
    1684:	1000240c 	andne	r2, r0, ip, lsl #8
    1688:	840c0020 	strhi	r0, [ip], #-32
    168c:	9e000089 	cdpls	0, 0, cr0, cr0, cr9, {4}
    1690:	0b000001 	bleq	169c <_start-0x6964>
    1694:	0c055101 	stfeqs	f5, [r5], {1}
    1698:	5a000020 	bpl	1720 <_start-0x68e0>
    169c:	0550010b 	ldrbeq	r0, [r0, #-267]	; 0x10b
    16a0:	10001c0c 	andne	r1, r0, ip, lsl #24
    16a4:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    16a8:	00000025 	andeq	r0, r0, r5, lsr #32
    16ac:	00045e08 	andeq	r5, r4, r8, lsl #28
    16b0:	880d0100 	stmdahi	sp, {r8}
    16b4:	10000001 	andne	r0, r0, r1
    16b8:	00002c0d 	andeq	r2, r0, sp, lsl #24
    16bc:	04bf0e00 	ldrteq	r0, [pc], #3584	; 16c4 <_start-0x693c>
    16c0:	4d020000 	stcmi	0, cr0, [r2, #-0]
    16c4:	0000019e 	muleq	r0, lr, r1
    16c8:	00002c0f 	andeq	r2, r0, pc, lsl #24
    16cc:	b9100000 	ldmdblt	r0, {}	; <UNPREDICTABLE>
    16d0:	02000004 	andeq	r0, r0, #4
    16d4:	002c0f90 	mlaeq	ip, r0, pc, r0	; <UNPREDICTABLE>
    16d8:	2c0f0000 	stccs	0, cr0, [pc], {-0}
    16dc:	00000000 	andeq	r0, r0, r0
    16e0:	0001aa00 	andeq	sl, r1, r0, lsl #20
    16e4:	ee000400 	cfcpys	mvf0, mvf0
    16e8:	04000008 	streq	r0, [r0], #-8
    16ec:	00001601 	andeq	r1, r0, r1, lsl #12
    16f0:	04df0100 	ldrbeq	r0, [pc], #256	; 16f8 <_start-0x6908>
    16f4:	034a0000 	movteq	r0, #40960	; 0xa000
    16f8:	89980000 	ldmibhi	r8, {}	; <UNPREDICTABLE>
    16fc:	007c0000 	rsbseq	r0, ip, r0
    1700:	07860000 	streq	r0, [r6, r0]
    1704:	04020000 	streq	r0, [r2], #-0
    1708:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    170c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1710:	00000186 	andeq	r0, r0, r6, lsl #3
    1714:	87060103 	strhi	r0, [r6, -r3, lsl #2]
    1718:	03000000 	movweq	r0, #0
    171c:	01dd0502 	bicseq	r0, sp, r2, lsl #10
    1720:	04030000 	streq	r0, [r3], #-0
    1724:	0001c005 	andeq	ip, r1, r5
    1728:	05080300 	streq	r0, [r8, #-768]	; 0x300
    172c:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    1730:	85080103 	strhi	r0, [r8, #-259]	; 0x103
    1734:	03000000 	movweq	r0, #0
    1738:	009d0702 	addseq	r0, sp, r2, lsl #14
    173c:	04030000 	streq	r0, [r3], #-0
    1740:	00018107 	andeq	r8, r1, r7, lsl #2
    1744:	07080300 	streq	r0, [r8, -r0, lsl #6]
    1748:	0000017c 	andeq	r0, r0, ip, ror r1
    174c:	aa070403 	bge	1c2760 <__bss_end__+0x1b9068>
    1750:	03000001 	movweq	r0, #1
    1754:	008e0801 	addeq	r0, lr, r1, lsl #16
    1758:	fe040000 	cdp2	0, 0, cr0, cr4, cr0, {0}
    175c:	01000004 	tsteq	r0, r4
    1760:	00899805 	addeq	r9, r9, r5, lsl #16
    1764:	00001c00 	andeq	r1, r0, r0, lsl #24
    1768:	9e9c0100 	fmllse	f0, f4, f0
    176c:	05000000 	streq	r0, [r0, #-0]
    1770:	000004f8 	strdeq	r0, [r0], -r8
    1774:	002c0501 	eoreq	r0, ip, r1, lsl #10
    1778:	09a00000 	stmibeq	r0!, {}	; <UNPREDICTABLE>
    177c:	06000000 	streq	r0, [r0], -r0
    1780:	0000015f 	andeq	r0, r0, pc, asr r1
    1784:	002c0b01 	eoreq	r0, ip, r1, lsl #22
    1788:	89b40000 	ldmibhi	r4!, {}	; <UNPREDICTABLE>
    178c:	00140000 	andseq	r0, r4, r0
    1790:	9c010000 	stcls	0, cr0, [r1], {-0}
    1794:	000000cb 	andeq	r0, r0, fp, asr #1
    1798:	0089c007 	addeq	ip, r9, r7
    179c:	00019c00 	andeq	r9, r1, r0, lsl #24
    17a0:	50010800 	andpl	r0, r1, r0, lsl #16
    17a4:	30040c05 	andcc	r0, r4, r5, lsl #24
    17a8:	00002000 	andeq	r2, r0, r0
    17ac:	00050b04 	andeq	r0, r5, r4, lsl #22
    17b0:	c80f0100 	stmdagt	pc, {r8}	; <UNPREDICTABLE>
    17b4:	24000089 	strcs	r0, [r0], #-137	; 0x89
    17b8:	01000000 	mrseq	r0, (UNDEF: 0)
    17bc:	0001299c 	muleq	r1, ip, r9
    17c0:	73750900 	cmnvc	r5, #0, 18
    17c4:	2c0f0100 	stfcss	f0, [pc], {-0}
    17c8:	d4000000 	strle	r0, [r0], #-0
    17cc:	0a000009 	beq	17f8 <_start-0x6808>
    17d0:	01006272 	tsteq	r0, r2, ror r2
    17d4:	00002c10 	andeq	r2, r0, r0, lsl ip
    17d8:	0b540100 	bleq	1501be0 <__bss_end__+0x14f84e8>
    17dc:	000089d8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    17e0:	00000010 	andeq	r0, r0, r0, lsl r0
    17e4:	0000011f 	andeq	r0, r0, pc, lsl r1
    17e8:	0061720c 	rsbeq	r7, r1, ip, lsl #4
    17ec:	002c1201 	eoreq	r1, ip, r1, lsl #4
    17f0:	09f20000 	ldmibeq	r2!, {}^	; <UNPREDICTABLE>
    17f4:	dc0d0000 	stcle	0, cr0, [sp], {-0}
    17f8:	9e000089 	cdpls	0, 0, cr0, cr0, cr9, {4}
    17fc:	00000000 	andeq	r0, r0, r0
    1800:	0089d40d 	addeq	sp, r9, sp, lsl #8
    1804:	00009e00 	andeq	r9, r0, r0, lsl #28
    1808:	bf040000 	svclt	0x00040000
    180c:	01000004 	tsteq	r0, r4
    1810:	0089ec18 	addeq	lr, r9, r8, lsl ip
    1814:	00001400 	andeq	r1, r0, r0, lsl #8
    1818:	629c0100 	addsvs	r0, ip, #0, 2
    181c:	09000001 	stmdbeq	r0, {r0}
    1820:	0100736d 	tsteq	r0, sp, ror #6
    1824:	00002c18 	andeq	r2, r0, r8, lsl ip
    1828:	000a0500 	andeq	r0, sl, r0, lsl #10
    182c:	89fc0700 	ldmibhi	ip!, {r8, r9, sl}^
    1830:	00cb0000 	sbceq	r0, fp, r0
    1834:	01080000 	mrseq	r0, (UNDEF: 8)
    1838:	01f30750 	mvnseq	r0, r0, asr r7
    183c:	03e80a50 	mvneq	r0, #80, 20	; 0x50000
    1840:	0400001e 	streq	r0, [r0], #-30
    1844:	000004d5 	ldrdeq	r0, [r0], -r5
    1848:	8a001b01 	bhi	8454 <reverse+0x14>
    184c:	00140000 	andseq	r0, r4, r0
    1850:	9c010000 	stcls	0, cr0, [r1], {-0}
    1854:	0000019c 	muleq	r0, ip, r1
    1858:	63657309 	cmnvs	r5, #603979776	; 0x24000000
    185c:	2c1b0100 	ldfcss	f0, [fp], {-0}
    1860:	26000000 	strcs	r0, [r0], -r0
    1864:	0700000a 	streq	r0, [r0, -sl]
    1868:	00008a10 	andeq	r8, r0, r0, lsl sl
    186c:	00000129 	andeq	r0, r0, r9, lsr #2
    1870:	07500108 	ldrbeq	r0, [r0, -r8, lsl #2]
    1874:	0a5001f3 	beq	1402048 <__bss_end__+0x13f8950>
    1878:	001e03e8 	andseq	r0, lr, r8, ror #7
    187c:	04f20e00 	ldrbteq	r0, [r2], #3584	; 0xe00
    1880:	9c020000 	stcls	0, cr0, [r2], {-0}
    1884:	0000002c 	andeq	r0, r0, ip, lsr #32
    1888:	00002c0f 	andeq	r2, r0, pc, lsl #24
    188c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    1890:	04000003 	streq	r0, [r0], #-3
    1894:	0009d100 	andeq	sp, r9, r0, lsl #2
    1898:	16010400 	strne	r0, [r1], -r0, lsl #8
    189c:	01000000 	mrseq	r0, (UNDEF: 0)
    18a0:	00000545 	andeq	r0, r0, r5, asr #10
    18a4:	0000034a 	andeq	r0, r0, sl, asr #6
    18a8:	00008cec 	andeq	r8, r0, ip, ror #25
    18ac:	00000178 	andeq	r0, r0, r8, ror r1
    18b0:	0000082a 	andeq	r0, r0, sl, lsr #16
    18b4:	69050402 	stmdbvs	r5, {r1, sl}
    18b8:	0300746e 	movweq	r7, #1134	; 0x46e
    18bc:	00000514 	andeq	r0, r0, r4, lsl r5
    18c0:	0037d402 	eorseq	sp, r7, r2, lsl #8
    18c4:	04040000 	streq	r0, [r4], #-0
    18c8:	00018607 	andeq	r8, r1, r7, lsl #12
    18cc:	06010400 	streq	r0, [r1], -r0, lsl #8
    18d0:	00000087 	andeq	r0, r0, r7, lsl #1
    18d4:	dd050204 	sfmle	f0, 4, [r5, #-16]
    18d8:	04000001 	streq	r0, [r0], #-1
    18dc:	01c00504 	biceq	r0, r0, r4, lsl #10
    18e0:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    18e4:	0001bb05 	andeq	fp, r1, r5, lsl #22
    18e8:	08010400 	stmdaeq	r1, {sl}
    18ec:	00000085 	andeq	r0, r0, r5, lsl #1
    18f0:	9d070204 	sfmls	f0, 4, [r7, #-16]
    18f4:	04000000 	streq	r0, [r0], #-0
    18f8:	01810704 	orreq	r0, r1, r4, lsl #14
    18fc:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    1900:	00017c07 	andeq	r7, r1, r7, lsl #24
    1904:	07040400 	streq	r0, [r4, -r0, lsl #8]
    1908:	000001aa 	andeq	r0, r0, sl, lsr #3
    190c:	04060405 	streq	r0, [r6], #-1029	; 0x405
    1910:	00000085 	andeq	r0, r0, r5, lsl #1
    1914:	8e080104 	adfhie	f0, f0, f4
    1918:	06000000 	streq	r0, [r0], -r0
    191c:	00009204 	andeq	r9, r0, r4, lsl #4
    1920:	00850700 	addeq	r0, r5, r0, lsl #14
    1924:	85080000 	strhi	r0, [r8, #-0]
    1928:	a7000000 	strge	r0, [r0, -r0]
    192c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1930:	00000076 	andeq	r0, r0, r6, ror r0
    1934:	360a0007 	strcc	r0, [sl], -r7
    1938:	01000005 	tsteq	r0, r5
    193c:	00007d19 	andeq	r7, r0, r9, lsl sp
    1940:	008cec00 	addeq	lr, ip, r0, lsl #24
    1944:	00006400 	andeq	r6, r0, r0, lsl #8
    1948:	5c9c0100 	ldfpls	f0, [ip], {0}
    194c:	0b000001 	bleq	1958 <_start-0x66a8>
    1950:	0000056f 	andeq	r0, r0, pc, ror #10
    1954:	00371901 	eorseq	r1, r7, r1, lsl #18
    1958:	0a470000 	beq	11c1960 <__bss_end__+0x11b8268>
    195c:	520c0000 	andpl	r0, ip, #0
    1960:	5c000001 	stcpl	0, cr0, [r0], {1}
    1964:	05000001 	streq	r0, [r0, #-1]
    1968:	0091c403 	addseq	ip, r1, r3, lsl #8
    196c:	05960d00 	ldreq	r0, [r6, #3328]	; 0xd00
    1970:	1c010000 	stcne	0, cr0, [r1], {-0}
    1974:	0000007d 	andeq	r0, r0, sp, ror r0
    1978:	670e5401 	strvs	r5, [lr, -r1, lsl #8]
    197c:	01000005 	tsteq	r0, r5
    1980:	0000371d 	andeq	r3, r0, sp, lsl r7
    1984:	000a8100 	andeq	r8, sl, r0, lsl #2
    1988:	8d140f00 	ldchi	15, cr0, [r4, #-0]
    198c:	03130000 	tsteq	r3, #0
    1990:	01280000 	teqeq	r8, r0
    1994:	01100000 	tsteq	r0, r0
    1998:	104a0153 	subne	r0, sl, r3, asr r1
    199c:	03055201 	movweq	r5, #20993	; 0x5201
    19a0:	000091c4 	andeq	r9, r0, r4, asr #3
    19a4:	05510110 	ldrbeq	r0, [r1, #-272]	; 0x110
    19a8:	00922c03 	addseq	r2, r2, r3, lsl #24
    19ac:	50011000 	andpl	r1, r1, r0
    19b0:	91ec0305 	mvnls	r0, r5, lsl #6
    19b4:	11000000 	mrsne	r0, (UNDEF: 0)
    19b8:	00008d18 	andeq	r8, r0, r8, lsl sp
    19bc:	00000329 	andeq	r0, r0, r9, lsr #6
    19c0:	008d3812 	addeq	r3, sp, r2, lsl r8
    19c4:	00033000 	andeq	r3, r3, r0
    19c8:	52011000 	andpl	r1, r1, #0
    19cc:	5001f308 	andpl	pc, r1, r8, lsl #6
    19d0:	fc090323 	stc2	3, cr0, [r9], {35}	; 0x23
    19d4:	5101101a 	tstpl	r1, sl, lsl r0
    19d8:	01103001 	tsteq	r0, r1
    19dc:	01f30b50 	mvnseq	r0, r0, asr fp
    19e0:	09032350 	stmdbeq	r3, {r4, r6, r8, r9, sp}
    19e4:	00741afc 	ldrshteq	r1, [r4], #-172	; 0xffffff54
    19e8:	07000022 	streq	r0, [r0, -r2, lsr #32]
    19ec:	00000097 	muleq	r0, r7, r0
    19f0:	00021e0a 	andeq	r1, r2, sl, lsl #28
    19f4:	7d260100 	stfvcs	f0, [r6, #-0]
    19f8:	50000000 	andpl	r0, r0, r0
    19fc:	9400008d 	strls	r0, [r0], #-141	; 0x8d
    1a00:	01000000 	mrseq	r0, (UNDEF: 0)
    1a04:	0002399c 	muleq	r2, ip, r9
    1a08:	056f0b00 	strbeq	r0, [pc, #-2816]!	; f10 <_start-0x70f0>
    1a0c:	26010000 	strcs	r0, [r1], -r0
    1a10:	00000037 	andeq	r0, r0, r7, lsr r0
    1a14:	00000aa7 	andeq	r0, r0, r7, lsr #21
    1a18:	00055d0b 	andeq	r5, r5, fp, lsl #26
    1a1c:	37260100 	strcc	r0, [r6, -r0, lsl #2]!
    1a20:	13000000 	movwne	r0, #0
    1a24:	0c00000b 	stceq	0, cr0, [r0], {11}
    1a28:	00000152 	andeq	r0, r0, r2, asr r1
    1a2c:	00000249 	andeq	r0, r0, r9, asr #4
    1a30:	91cc0305 	bicls	r0, ip, r5, lsl #6
    1a34:	250e0000 	strcs	r0, [lr, #-0]
    1a38:	01000005 	tsteq	r0, r5
    1a3c:	0000372c 	andeq	r3, r0, ip, lsr #14
    1a40:	000b8d00 	andeq	r8, fp, r0, lsl #26
    1a44:	8d780f00 	ldclhi	15, cr0, [r8, #-0]
    1a48:	03130000 	tsteq	r3, #0
    1a4c:	01e50000 	mvneq	r0, r0
    1a50:	01100000 	tsteq	r0, r0
    1a54:	27080253 	smlsdcs	r8, r3, r2, r0
    1a58:	05520110 	ldrbeq	r0, [r2, #-272]	; 0x110
    1a5c:	0091cc03 	addseq	ip, r1, r3, lsl #24
    1a60:	51011000 	mrspl	r1, (UNDEF: 1)
    1a64:	922c0305 	eorls	r0, ip, #335544320	; 0x14000000
    1a68:	01100000 	tsteq	r0, r0
    1a6c:	ec030550 	cfstr32	mvfx0, [r3], {80}	; 0x50
    1a70:	00000091 	muleq	r0, r1, r0
    1a74:	008d7c11 	addeq	r7, sp, r1, lsl ip
    1a78:	00032900 	andeq	r2, r3, r0, lsl #18
    1a7c:	8d881100 	stfhis	f1, [r8]
    1a80:	00a70000 	adceq	r0, r7, r0
    1a84:	a80f0000 	stmdage	pc, {}	; <UNPREDICTABLE>
    1a88:	1300008d 	movwne	r0, #141	; 0x8d
    1a8c:	26000003 	strcs	r0, [r0], -r3
    1a90:	10000002 	andne	r0, r0, r2
    1a94:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    1a98:	5201102b 	andpl	r1, r1, #43	; 0x2b
    1a9c:	91cc0305 	bicls	r0, ip, r5, lsl #6
    1aa0:	01100000 	tsteq	r0, r0
    1aa4:	2c030551 	cfstr32cs	mvfx0, [r3], {81}	; 0x51
    1aa8:	10000092 	mulne	r0, r2, r0
    1aac:	03055001 	movweq	r5, #20481	; 0x5001
    1ab0:	00009240 	andeq	r9, r0, r0, asr #4
    1ab4:	8dac1100 	stfhis	f1, [ip]
    1ab8:	03290000 	teqeq	r9, #0
    1abc:	cc110000 	ldcgt	0, cr0, [r1], {-0}
    1ac0:	a700008d 	strge	r0, [r0, -sp, lsl #1]
    1ac4:	00000000 	andeq	r0, r0, r0
    1ac8:	00008508 	andeq	r8, r0, r8, lsl #10
    1acc:	00024900 	andeq	r4, r2, r0, lsl #18
    1ad0:	00760900 	rsbseq	r0, r6, r0, lsl #18
    1ad4:	000f0000 	andeq	r0, pc, r0
    1ad8:	00023907 	andeq	r3, r2, r7, lsl #18
    1adc:	01f01300 	mvnseq	r1, r0, lsl #6
    1ae0:	3b010000 	blcc	41ae8 <__bss_end__+0x383f0>
    1ae4:	00008de4 	andeq	r8, r0, r4, ror #27
    1ae8:	00000058 	andeq	r0, r0, r8, asr r0
    1aec:	02ab9c01 	adceq	r9, fp, #256	; 0x100
    1af0:	520c0000 	andpl	r0, ip, #0
    1af4:	bb000001 	bllt	1b00 <_start-0x6500>
    1af8:	05000002 	streq	r0, [r0, #-2]
    1afc:	0091dc03 	addseq	sp, r1, r3, lsl #24
    1b00:	8e0c0f00 	cdphi	15, 0, cr0, cr12, cr0, {0}
    1b04:	03130000 	tsteq	r3, #0
    1b08:	02a10000 	adceq	r0, r1, #0
    1b0c:	01100000 	tsteq	r0, r0
    1b10:	3c080253 	sfmcc	f0, 4, [r8], {83}	; 0x53
    1b14:	05520110 	ldrbeq	r0, [r2, #-272]	; 0x110
    1b18:	0091dc03 	addseq	sp, r1, r3, lsl #24
    1b1c:	51011000 	mrspl	r1, (UNDEF: 1)
    1b20:	922c0305 	eorls	r0, ip, #335544320	; 0x14000000
    1b24:	01100000 	tsteq	r0, r0
    1b28:	98030550 	stmdals	r3, {r4, r6, r8, sl}
    1b2c:	00000092 	muleq	r0, r2, r0
    1b30:	008e1011 	addeq	r1, lr, r1, lsl r0
    1b34:	00032900 	andeq	r2, r3, r0, lsl #18
    1b38:	85080000 	strhi	r0, [r8, #-0]
    1b3c:	bb000000 	bllt	1b44 <_start-0x64bc>
    1b40:	09000002 	stmdbeq	r0, {r1}
    1b44:	00000076 	andeq	r0, r0, r6, ror r0
    1b48:	ab07000c 	blge	1c1b80 <__bss_end__+0x1b8488>
    1b4c:	14000002 	strne	r0, [r0], #-2
    1b50:	0000051b 	andeq	r0, r0, fp, lsl r5
    1b54:	8e3c4501 	cdphi	5, 3, cr4, cr12, cr1, {0}
    1b58:	00180000 	andseq	r0, r8, r0
    1b5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b60:	00057615 	andeq	r7, r5, r5, lsl r6
    1b64:	7d4e0100 	stfvce	f0, [lr, #-0]
    1b68:	54000000 	strpl	r0, [r0], #-0
    1b6c:	1000008e 	andne	r0, r0, lr, lsl #1
    1b70:	01000000 	mrseq	r0, (UNDEF: 0)
    1b74:	05560d9c 	ldrbeq	r0, [r6, #-3484]	; 0xd9c
    1b78:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    1b7c:	00000025 	andeq	r0, r0, r5, lsr #32
    1b80:	96f00305 	ldrbtls	r0, [r0], r5, lsl #6
    1b84:	7e0d0000 	cdpvc	0, 0, cr0, cr13, cr0, {0}
    1b88:	01000005 	tsteq	r0, r5
    1b8c:	00007f0b 	andeq	r7, r0, fp, lsl #30
    1b90:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
    1b94:	16000096 			; <UNDEFINED> instruction: 0x16000096
    1b98:	00000587 	andeq	r0, r0, r7, lsl #11
    1b9c:	00850501 	addeq	r0, r5, r1, lsl #10
    1ba0:	39170000 	ldmdbcc	r7, {}	; <UNPREDICTABLE>
    1ba4:	03000003 	movweq	r0, #3
    1ba8:	00002527 	andeq	r2, r0, r7, lsr #10
    1bac:	00032900 	andeq	r2, r3, r0, lsl #18
    1bb0:	008c1800 	addeq	r1, ip, r0, lsl #16
    1bb4:	00190000 	andseq	r0, r9, r0
    1bb8:	00000b1a 	andeq	r0, r0, sl, lsl fp
    1bbc:	1b5c0300 	blne	17027c4 <__bss_end__+0x16f90cc>
    1bc0:	0000053e 	andeq	r0, r0, lr, lsr r5
    1bc4:	007d1b04 	rsbseq	r1, sp, r4, lsl #22
    1bc8:	7d180000 	ldcvc	0, cr0, [r8, #-0]
    1bcc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1bd0:	00000025 	andeq	r0, r0, r5, lsr #32
    1bd4:	00002c18 	andeq	r2, r0, r8, lsl ip
    1bd8:	db000000 	blle	1be0 <_start-0x6420>
    1bdc:	04000000 	streq	r0, [r0], #-0
    1be0:	000b5800 	andeq	r5, fp, r0, lsl #16
    1be4:	16010400 	strne	r0, [r1], -r0, lsl #8
    1be8:	01000000 	mrseq	r0, (UNDEF: 0)
    1bec:	000005a2 	andeq	r0, r0, r2, lsr #11
    1bf0:	0000034a 	andeq	r0, r0, sl, asr #6
    1bf4:	00008e64 	andeq	r8, r0, r4, ror #28
    1bf8:	00000020 	andeq	r0, r0, r0, lsr #32
    1bfc:	00000999 	muleq	r0, r9, r9
    1c00:	87060102 	strhi	r0, [r6, -r2, lsl #2]
    1c04:	02000000 	andeq	r0, r0, #0
    1c08:	00850801 	addeq	r0, r5, r1, lsl #16
    1c0c:	02020000 	andeq	r0, r2, #0
    1c10:	0001dd05 	andeq	sp, r1, r5, lsl #26
    1c14:	07020200 	streq	r0, [r2, -r0, lsl #4]
    1c18:	0000009d 	muleq	r0, sp, r0
    1c1c:	69050403 	stmdbvs	r5, {r0, r1, sl}
    1c20:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    1c24:	01860704 	orreq	r0, r6, r4, lsl #14
    1c28:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1c2c:	0001bb05 	andeq	fp, r1, r5, lsl #22
    1c30:	07080200 	streq	r0, [r8, -r0, lsl #4]
    1c34:	0000017c 	andeq	r0, r0, ip, ror r1
    1c38:	c0050402 	andgt	r0, r5, r2, lsl #8
    1c3c:	02000001 	andeq	r0, r0, #1
    1c40:	01aa0704 			; <UNDEFINED> instruction: 0x01aa0704
    1c44:	04040000 	streq	r0, [r4], #-0
    1c48:	81070402 	tsthi	r7, r2, lsl #8
    1c4c:	05000001 	streq	r0, [r0, #-1]
    1c50:	00007a04 	andeq	r7, r0, r4, lsl #20
    1c54:	08010200 	stmdaeq	r1, {r9}
    1c58:	0000008e 	andeq	r0, r0, lr, lsl #1
    1c5c:	00051406 	andeq	r1, r5, r6, lsl #8
    1c60:	48d40200 	ldmmi	r4, {r9}^
    1c64:	07000000 	streq	r0, [r0, -r0]
    1c68:	0000053e 	andeq	r0, r0, lr, lsr r5
    1c6c:	006b1b03 	rsbeq	r1, fp, r3, lsl #22
    1c70:	8e640000 	cdphi	0, 6, cr0, cr4, cr0, {0}
    1c74:	00200000 	eoreq	r0, r0, r0
    1c78:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c7c:	00705f08 	rsbseq	r5, r0, r8, lsl #30
    1c80:	006b0301 	rsbeq	r0, fp, r1, lsl #6
    1c84:	50010000 	andpl	r0, r1, r0
    1c88:	01006308 	tsteq	r0, r8, lsl #6
    1c8c:	00004103 	andeq	r4, r0, r3, lsl #2
    1c90:	09510100 	ldmdbeq	r1, {r8}^
    1c94:	0301006e 	movweq	r0, #4206	; 0x106e
    1c98:	00000081 	andeq	r0, r0, r1, lsl #1
    1c9c:	00000bba 			; <UNDEFINED> instruction: 0x00000bba
    1ca0:	0100700a 	tsteq	r0, sl
    1ca4:	00007404 	andeq	r7, r0, r4, lsl #8
    1ca8:	000bdb00 	andeq	sp, fp, r0, lsl #22
    1cac:	00650b00 	rsbeq	r0, r5, r0, lsl #22
    1cb0:	00740401 	rsbseq	r0, r4, r1, lsl #8
    1cb4:	52010000 	andpl	r0, r1, #0
    1cb8:	00e00000 	rsceq	r0, r0, r0
    1cbc:	00040000 	andeq	r0, r4, r0
    1cc0:	00000bf5 	strdeq	r0, [r0], -r5
    1cc4:	00160104 	andseq	r0, r6, r4, lsl #2
    1cc8:	cb010000 	blgt	41cd0 <__bss_end__+0x385d8>
    1ccc:	4a000005 	bmi	1ce8 <_start-0x6318>
    1cd0:	84000003 	strhi	r0, [r0], #-3
    1cd4:	1400008e 	strne	r0, [r0], #-142	; 0x8e
    1cd8:	89000000 	stmdbhi	r0, {}	; <UNPREDICTABLE>
    1cdc:	0200000a 	andeq	r0, r0, #10
    1ce0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1ce4:	04030074 	streq	r0, [r3], #-116	; 0x74
    1ce8:	00018607 	andeq	r8, r1, r7, lsl #12
    1cec:	06010300 	streq	r0, [r1], -r0, lsl #6
    1cf0:	00000087 	andeq	r0, r0, r7, lsl #1
    1cf4:	dd050203 	sfmle	f0, 4, [r5, #-12]
    1cf8:	03000001 	movweq	r0, #1
    1cfc:	01c00504 	biceq	r0, r0, r4, lsl #10
    1d00:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1d04:	0001bb05 	andeq	fp, r1, r5, lsl #22
    1d08:	08010300 	stmdaeq	r1, {r8, r9}
    1d0c:	00000085 	andeq	r0, r0, r5, lsl #1
    1d10:	9d070203 	sfmls	f0, 4, [r7, #-12]
    1d14:	03000000 	movweq	r0, #0
    1d18:	01810704 	orreq	r0, r1, r4, lsl #14
    1d1c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1d20:	00017c07 	andeq	r7, r1, r7, lsl #24
    1d24:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1d28:	000001aa 	andeq	r0, r0, sl, lsr #3
    1d2c:	8e080103 	adfhie	f0, f0, f3
    1d30:	04000000 	streq	r0, [r0], #-0
    1d34:	000005ba 			; <UNDEFINED> instruction: 0x000005ba
    1d38:	00250301 	eoreq	r0, r5, r1, lsl #6
    1d3c:	8e840000 	cdphi	0, 8, cr0, cr4, cr0, {0}
    1d40:	00140000 	andseq	r0, r4, r0
    1d44:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d48:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    1d4c:	01006305 	tsteq	r0, r5, lsl #6
    1d50:	00002503 	andeq	r2, r0, r3, lsl #10
    1d54:	000c0600 	andeq	r0, ip, r0, lsl #12
    1d58:	8e900600 	cdphi	6, 9, cr0, cr0, cr0, {0}
    1d5c:	00d60000 	sbcseq	r0, r6, r0
    1d60:	01070000 	mrseq	r0, (UNDEF: 7)
    1d64:	00740250 	rsbseq	r0, r4, r0, asr r2
    1d68:	25080000 	strcs	r0, [r8, #-0]
    1d6c:	bf000000 	svclt	0x00000000
    1d70:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1d74:	00000025 	andeq	r0, r0, r5, lsr #32
    1d78:	03b20a00 			; <UNDEFINED> instruction: 0x03b20a00
    1d7c:	06010000 	streq	r0, [r1], -r0
    1d80:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1d84:	8eb40305 	cdphi	3, 11, cr0, cr4, cr5, {0}
    1d88:	040b0000 	streq	r0, [fp], #-0
    1d8c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    1d90:	0005b00c 	andeq	fp, r5, ip
    1d94:	093a0200 	ldmdbeq	sl!, {r9}
    1d98:	0000002c 	andeq	r0, r0, ip, lsr #32
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <__bss_end__+0x2b69b4>
  18:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  1c:	24030000 	strcs	r0, [r3], #-0
  20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  24:	000e030b 	andeq	r0, lr, fp, lsl #6
  28:	00160400 	andseq	r0, r6, r0, lsl #8
  2c:	0b3a0e03 	bleq	e83840 <__bss_end__+0xe7a148>
  30:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  34:	0f050000 	svceq	0x00050000
  38:	000b0b00 	andeq	r0, fp, r0, lsl #22
  3c:	000f0600 	andeq	r0, pc, r0, lsl #12
  40:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  44:	26070000 	strcs	r0, [r7], -r0
  48:	00134900 	andseq	r4, r3, r0, lsl #18
  4c:	01010800 	tsteq	r1, r0, lsl #16
  50:	13011349 	movwne	r1, #4937	; 0x1349
  54:	21090000 	mrscs	r0, (UNDEF: 9)
  58:	2f134900 	svccs	0x00134900
  5c:	0a00000b 	beq	90 <_start-0x7f70>
  60:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
  64:	0b3a050b 	bleq	e81498 <__bss_end__+0xe77da0>
  68:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  6c:	0d0b0000 	stceq	0, cr0, [fp, #-0]
  70:	3a0e0300 	bcc	380c78 <__bss_end__+0x377580>
  74:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  78:	000b3813 	andeq	r3, fp, r3, lsl r8
  7c:	000d0c00 	andeq	r0, sp, r0, lsl #24
  80:	0b3a0803 	bleq	e82094 <__bss_end__+0xe7899c>
  84:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  88:	00000b38 	andeq	r0, r0, r8, lsr fp
  8c:	4900210d 	stmdbmi	r0, {r0, r2, r3, r8, sp}
  90:	00052f13 	andeq	r2, r5, r3, lsl pc
  94:	01130e00 	tsteq	r3, r0, lsl #28
  98:	0b0b0803 	bleq	2c20ac <__bss_end__+0x2b89b4>
  9c:	0b3b0b3a 	bleq	ec2d8c <__bss_end__+0xeb9694>
  a0:	00001301 	andeq	r1, r0, r1, lsl #6
  a4:	03012e0f 	movweq	r2, #7695	; 0x1e0f
  a8:	3b0b3a0e 	blcc	2ce8e8 <__bss_end__+0x2c51f0>
  ac:	1119270b 	tstne	r9, fp, lsl #14
  b0:	40061201 	andmi	r1, r6, r1, lsl #4
  b4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  b8:	00001301 	andeq	r1, r0, r1, lsl #6
  bc:	03000510 	movweq	r0, #1296	; 0x510
  c0:	3b0b3a08 	blcc	2ce8e8 <__bss_end__+0x2c51f0>
  c4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  c8:	11000017 	tstne	r0, r7, lsl r0
  cc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  d0:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
  d4:	00001802 	andeq	r1, r0, r2, lsl #16
  d8:	03003412 	movweq	r3, #1042	; 0x412
  dc:	3b0b3a0e 	blcc	2ce91c <__bss_end__+0x2c5224>
  e0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  e4:	13000017 	movwne	r0, #23
  e8:	01018289 	smlabbeq	r1, r9, r2, r8
  ec:	13310111 	teqne	r1, #1073741828	; 0x40000004
  f0:	00001301 	andeq	r1, r0, r1, lsl #6
  f4:	01828a14 	orreq	r8, r2, r4, lsl sl
  f8:	91180200 	tstls	r8, r0, lsl #4
  fc:	00001842 	andeq	r1, r0, r2, asr #16
 100:	01828915 	orreq	r8, r2, r5, lsl r9
 104:	31011100 	mrscc	r1, (UNDEF: 17)
 108:	16000013 			; <UNDEFINED> instruction: 0x16000013
 10c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 110:	0b3a0e03 	bleq	e83924 <__bss_end__+0xe7a22c>
 114:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 118:	06120111 			; <UNDEFINED> instruction: 0x06120111
 11c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 120:	00130119 	andseq	r0, r3, r9, lsl r1
 124:	00341700 	eorseq	r1, r4, r0, lsl #14
 128:	0b3a0803 	bleq	e8213c <__bss_end__+0xe78a44>
 12c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 130:	00001702 	andeq	r1, r0, r2, lsl #14
 134:	03003418 	movweq	r3, #1048	; 0x418
 138:	3b0b3a0e 	blcc	2ce978 <__bss_end__+0x2c5280>
 13c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 140:	19000018 	stmdbne	r0, {r3, r4}
 144:	01018289 	smlabbeq	r1, r9, r2, r8
 148:	13310111 	teqne	r1, #1073741828	; 0x40000004
 14c:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
 150:	03193f01 	tsteq	r9, #1, 30
 154:	3b0b3a0e 	blcc	2ce994 <__bss_end__+0x2c529c>
 158:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 15c:	01193c13 	tsteq	r9, r3, lsl ip
 160:	1b000013 	blne	1b4 <_start-0x7e4c>
 164:	13490005 	movtne	r0, #36869	; 0x9005
 168:	181c0000 	ldmdane	ip, {}	; <UNPREDICTABLE>
 16c:	1d000000 	stcne	0, cr0, [r0, #-0]
 170:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 174:	0b3a0e03 	bleq	e83988 <__bss_end__+0xe7a290>
 178:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 17c:	0000193c 	andeq	r1, r0, ip, lsr r9
 180:	3f002e1e 	svccc	0x00002e1e
 184:	3a0e0319 	bcc	380df0 <__bss_end__+0x3776f8>
 188:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 18c:	3c134919 	ldccc	9, cr4, [r3], {25}
 190:	1f000019 	svcne	0x00000019
 194:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 198:	0b3a0e03 	bleq	e839ac <__bss_end__+0xe7a2b4>
 19c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1a0:	1301193c 	movwne	r1, #6460	; 0x193c
 1a4:	15200000 	strne	r0, [r0, #-0]!
 1a8:	01192701 	tsteq	r9, r1, lsl #14
 1ac:	00000013 	andeq	r0, r0, r3, lsl r0
 1b0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 1b4:	030b130e 	movweq	r1, #45838	; 0xb30e
 1b8:	110e1b0e 	tstne	lr, lr, lsl #22
 1bc:	10061201 	andne	r1, r6, r1, lsl #4
 1c0:	02000017 	andeq	r0, r0, #23
 1c4:	0b0b0024 	bleq	2c025c <__bss_end__+0x2b6b64>
 1c8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 1cc:	24030000 	strcs	r0, [r3], #-0
 1d0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 1d4:	000e030b 	andeq	r0, lr, fp, lsl #6
 1d8:	00160400 	andseq	r0, r6, r0, lsl #8
 1dc:	0b3a0e03 	bleq	e839f0 <__bss_end__+0xe7a2f8>
 1e0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1e4:	0f050000 	svceq	0x00050000
 1e8:	000b0b00 	andeq	r0, fp, r0, lsl #22
 1ec:	000f0600 	andeq	r0, pc, r0, lsl #12
 1f0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 1f4:	26070000 	strcs	r0, [r7], -r0
 1f8:	00134900 	andseq	r4, r3, r0, lsl #18
 1fc:	01130800 	tsteq	r3, r0, lsl #16
 200:	050b0e03 	streq	r0, [fp, #-3587]	; 0xe03
 204:	0b3b0b3a 	bleq	ec2ef4 <__bss_end__+0xeb97fc>
 208:	00001301 	andeq	r1, r0, r1, lsl #6
 20c:	03000d09 	movweq	r0, #3337	; 0xd09
 210:	3b0b3a0e 	blcc	2cea50 <__bss_end__+0x2c5358>
 214:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 218:	0a00000b 	beq	24c <_start-0x7db4>
 21c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 220:	0b3b0b3a 	bleq	ec2f10 <__bss_end__+0xeb9818>
 224:	0b381349 	bleq	e04f50 <__bss_end__+0xdfb858>
 228:	010b0000 	mrseq	r0, (UNDEF: 11)
 22c:	01134901 	tsteq	r3, r1, lsl #18
 230:	0c000013 	stceq	0, cr0, [r0], {19}
 234:	13490021 	movtne	r0, #36897	; 0x9021
 238:	00000b2f 	andeq	r0, r0, pc, lsr #22
 23c:	4900210d 	stmdbmi	r0, {r0, r2, r3, r8, sp}
 240:	00052f13 	andeq	r2, r5, r3, lsl pc
 244:	01130e00 	tsteq	r3, r0, lsl #28
 248:	0b0b0803 	bleq	2c225c <__bss_end__+0x2b8b64>
 24c:	0b3b0b3a 	bleq	ec2f3c <__bss_end__+0xeb9844>
 250:	00001301 	andeq	r1, r0, r1, lsl #6
 254:	0300160f 	movweq	r1, #1551	; 0x60f
 258:	3b0b3a08 	blcc	2cea80 <__bss_end__+0x2c5388>
 25c:	0013490b 	andseq	r4, r3, fp, lsl #18
 260:	01131000 	tsteq	r3, r0
 264:	0b0b0e03 	bleq	2c3a78 <__bss_end__+0x2ba380>
 268:	0b3b0b3a 	bleq	ec2f58 <__bss_end__+0xeb9860>
 26c:	00001301 	andeq	r1, r0, r1, lsl #6
 270:	03012e11 	movweq	r2, #7697	; 0x1e11
 274:	3b0b3a0e 	blcc	2ceab4 <__bss_end__+0x2c53bc>
 278:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 27c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 280:	97184006 	ldrls	r4, [r8, -r6]
 284:	13011942 	movwne	r1, #6466	; 0x1942
 288:	05120000 	ldreq	r0, [r2, #-0]
 28c:	3a080300 	bcc	200e94 <__bss_end__+0x1f779c>
 290:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 294:	00170213 	andseq	r0, r7, r3, lsl r2
 298:	00341300 	eorseq	r1, r4, r0, lsl #6
 29c:	13490e03 	movtne	r0, #40451	; 0x9e03
 2a0:	18021934 	stmdane	r2, {r2, r4, r5, r8, fp, ip}
 2a4:	34140000 	ldrcc	r0, [r4], #-0
 2a8:	3a080300 	bcc	200eb0 <__bss_end__+0x1f77b8>
 2ac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2b0:	00170213 	andseq	r0, r7, r3, lsl r2
 2b4:	82891500 	addhi	r1, r9, #0, 10
 2b8:	01110101 	tsteq	r1, r1, lsl #2
 2bc:	13011331 	movwne	r1, #4913	; 0x1331
 2c0:	8a160000 	bhi	5802c8 <__bss_end__+0x576bd0>
 2c4:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
 2c8:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
 2cc:	89170000 	ldmdbhi	r7, {}	; <UNPREDICTABLE>
 2d0:	11000182 	smlabbne	r0, r2, r1, r0
 2d4:	00133101 	andseq	r3, r3, r1, lsl #2
 2d8:	00341800 	eorseq	r1, r4, r0, lsl #16
 2dc:	0b3a0e03 	bleq	e83af0 <__bss_end__+0xe7a3f8>
 2e0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2e4:	00001802 	andeq	r1, r0, r2, lsl #16
 2e8:	01828919 	orreq	r8, r2, r9, lsl r9
 2ec:	31011101 	tstcc	r1, r1, lsl #2
 2f0:	1a000013 	bne	344 <_start-0x7cbc>
 2f4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 2f8:	0b3a0e03 	bleq	e83b0c <__bss_end__+0xe7a414>
 2fc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 300:	01111349 	tsteq	r1, r9, asr #6
 304:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 308:	00194297 	mulseq	r9, r7, r2
 30c:	012e1b00 	teqeq	lr, r0, lsl #22
 310:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 314:	0b3b0b3a 	bleq	ec3004 <__bss_end__+0xeb990c>
 318:	13491927 	movtne	r1, #39207	; 0x9927
 31c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 320:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 324:	00130119 	andseq	r0, r3, r9, lsl r1
 328:	00051c00 	andeq	r1, r5, r0, lsl #24
 32c:	0b3a0e03 	bleq	e83b40 <__bss_end__+0xe7a448>
 330:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 334:	00001702 	andeq	r1, r0, r2, lsl #14
 338:	0300341d 	movweq	r3, #1053	; 0x41d
 33c:	3b0b3a08 	blcc	2ceb64 <__bss_end__+0x2c546c>
 340:	0013490b 	andseq	r4, r3, fp, lsl #18
 344:	01151e00 	tsteq	r5, r0, lsl #28
 348:	13011927 	movwne	r1, #6439	; 0x1927
 34c:	051f0000 	ldreq	r0, [pc, #-0]	; 354 <_start-0x7cac>
 350:	00134900 	andseq	r4, r3, r0, lsl #18
 354:	012e2000 	teqeq	lr, r0
 358:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 35c:	0b3b0b3a 	bleq	ec304c <__bss_end__+0xeb9954>
 360:	01111927 	tsteq	r1, r7, lsr #18
 364:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 368:	01194297 			; <UNDEFINED> instruction: 0x01194297
 36c:	21000013 	tstcs	r0, r3, lsl r0
 370:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 374:	0b3a0e03 	bleq	e83b88 <__bss_end__+0xe7a490>
 378:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 37c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 380:	00001301 	andeq	r1, r0, r1, lsl #6
 384:	00001822 	andeq	r1, r0, r2, lsr #16
 388:	002e2300 	eoreq	r2, lr, r0, lsl #6
 38c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 390:	0b3b0b3a 	bleq	ec3080 <__bss_end__+0xeb9988>
 394:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 398:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
 39c:	03193f01 	tsteq	r9, #1, 30
 3a0:	3b0b3a0e 	blcc	2cebe0 <__bss_end__+0x2c54e8>
 3a4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 3a8:	00193c13 	andseq	r3, r9, r3, lsl ip
 3ac:	11010000 	mrsne	r0, (UNDEF: 1)
 3b0:	130e2501 	movwne	r2, #58625	; 0xe501
 3b4:	1b0e030b 	blne	380fe8 <__bss_end__+0x3778f0>
 3b8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 3bc:	00171006 	andseq	r1, r7, r6
 3c0:	00160200 	andseq	r0, r6, r0, lsl #4
 3c4:	0b3a0e03 	bleq	e83bd8 <__bss_end__+0xe7a4e0>
 3c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3cc:	13030000 	movwne	r0, #12288	; 0x3000
 3d0:	0b0e0301 	bleq	380fdc <__bss_end__+0x3778e4>
 3d4:	3b0b3a0b 	blcc	2cec08 <__bss_end__+0x2c5510>
 3d8:	0013010b 	andseq	r0, r3, fp, lsl #2
 3dc:	000d0400 	andeq	r0, sp, r0, lsl #8
 3e0:	13490e03 	movtne	r0, #40451	; 0x9e03
 3e4:	19340b38 	ldmdbne	r4!, {r3, r4, r5, r8, r9, fp}
 3e8:	0f050000 	svceq	0x00050000
 3ec:	000b0b00 	andeq	r0, fp, r0, lsl #22
 3f0:	00240600 	eoreq	r0, r4, r0, lsl #12
 3f4:	0b3e0b0b 	bleq	f83028 <__bss_end__+0xf79930>
 3f8:	00000803 	andeq	r0, r0, r3, lsl #16
 3fc:	0b002407 	bleq	9420 <buf.4133+0x130>
 400:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 404:	0800000e 	stmdaeq	r0, {r1, r2, r3}
 408:	0b0b000f 	bleq	2c044c <__bss_end__+0x2b6d54>
 40c:	00001349 	andeq	r1, r0, r9, asr #6
 410:	49002609 	stmdbmi	r0, {r0, r3, r9, sl, sp}
 414:	0a000013 	beq	468 <_start-0x7b98>
 418:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 41c:	0b3a0e03 	bleq	e83c30 <__bss_end__+0xe7a538>
 420:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 424:	01111349 	tsteq	r1, r9, asr #6
 428:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 42c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 430:	0b000013 	bleq	484 <_start-0x7b7c>
 434:	08030005 	stmdaeq	r3, {r0, r2}
 438:	0b3b0b3a 	bleq	ec3128 <__bss_end__+0xeb9a30>
 43c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 440:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
 444:	0d000000 	stceq	0, cr0, [r0, #-0]
 448:	08030034 	stmdaeq	r3, {r2, r4, r5}
 44c:	0b3b0b3a 	bleq	ec313c <__bss_end__+0xeb9a44>
 450:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 454:	340e0000 	strcc	r0, [lr], #-0
 458:	3a0e0300 	bcc	381060 <__bss_end__+0x377968>
 45c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 460:	00180213 	andseq	r0, r8, r3, lsl r2
 464:	00340f00 	eorseq	r0, r4, r0, lsl #30
 468:	0b3a0803 	bleq	e8247c <__bss_end__+0xe78d84>
 46c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 470:	00001702 	andeq	r1, r0, r2, lsl #14
 474:	01828910 	orreq	r8, r2, r0, lsl r9
 478:	31011101 	tstcc	r1, r1, lsl #2
 47c:	00130113 	andseq	r0, r3, r3, lsl r1
 480:	828a1100 	addhi	r1, sl, #0, 2
 484:	18020001 	stmdane	r2, {r0}
 488:	00184291 	mulseq	r8, r1, r2
 48c:	82891200 	addhi	r1, r9, #0, 4
 490:	01110101 	tsteq	r1, r1, lsl #2
 494:	01130000 	tsteq	r3, r0
 498:	01134901 	tsteq	r3, r1, lsl #18
 49c:	14000013 	strne	r0, [r0], #-19
 4a0:	13490021 	movtne	r0, #36897	; 0x9021
 4a4:	0000052f 	andeq	r0, r0, pc, lsr #10
 4a8:	27011515 	smladcs	r1, r5, r5, r1
 4ac:	01134919 	tsteq	r3, r9, lsl r9
 4b0:	16000013 			; <UNDEFINED> instruction: 0x16000013
 4b4:	13490005 	movtne	r0, #36869	; 0x9005
 4b8:	34170000 	ldrcc	r0, [r7], #-0
 4bc:	3a0e0300 	bcc	3810c4 <__bss_end__+0x3779cc>
 4c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4c4:	3c193f13 	ldccc	15, cr3, [r9], {19}
 4c8:	18000019 	stmdane	r0, {r0, r3, r4}
 4cc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 4d0:	0b3a0e03 	bleq	e83ce4 <__bss_end__+0xe7a5ec>
 4d4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 4d8:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 4dc:	01000000 	mrseq	r0, (UNDEF: 0)
 4e0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 4e4:	0e030b13 	vmoveq.32	d3[0], r0
 4e8:	01110e1b 	tsteq	r1, fp, lsl lr
 4ec:	17100612 			; <UNDEFINED> instruction: 0x17100612
 4f0:	24020000 	strcs	r0, [r2], #-0
 4f4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 4f8:	0008030b 	andeq	r0, r8, fp, lsl #6
 4fc:	00240300 	eoreq	r0, r4, r0, lsl #6
 500:	0b3e0b0b 	bleq	f83134 <__bss_end__+0xf79a3c>
 504:	00000e03 	andeq	r0, r0, r3, lsl #28
 508:	0b000f04 	bleq	4120 <_start-0x3ee0>
 50c:	0013490b 	andseq	r4, r3, fp, lsl #18
 510:	00260500 	eoreq	r0, r6, r0, lsl #10
 514:	00001349 	andeq	r1, r0, r9, asr #6
 518:	3f012e06 	svccc	0x00012e06
 51c:	3a0e0319 	bcc	381188 <__bss_end__+0x377a90>
 520:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 524:	11134919 	tstne	r3, r9, lsl r9
 528:	40061201 	andmi	r1, r6, r1, lsl #4
 52c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 530:	00001301 	andeq	r1, r0, r1, lsl #6
 534:	03000507 	movweq	r0, #1287	; 0x507
 538:	3b0b3a08 	blcc	2ced60 <__bss_end__+0x2c5668>
 53c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 540:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
 544:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 548:	13011349 	movwne	r1, #4937	; 0x1349
 54c:	05090000 	streq	r0, [r9, #-0]
 550:	00134900 	andseq	r4, r3, r0, lsl #18
 554:	00340a00 	eorseq	r0, r4, r0, lsl #20
 558:	0b3a0e03 	bleq	e83d6c <__bss_end__+0xe7a674>
 55c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 560:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 564:	340b0000 	strcc	r0, [fp], #-0
 568:	3a0e0300 	bcc	381170 <__bss_end__+0x377a78>
 56c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 570:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 574:	00000018 	andeq	r0, r0, r8, lsl r0
 578:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 57c:	030b130e 	movweq	r1, #45838	; 0xb30e
 580:	110e1b0e 	tstne	lr, lr, lsl #22
 584:	10061201 	andne	r1, r6, r1, lsl #4
 588:	02000017 	andeq	r0, r0, #23
 58c:	0b0b0024 	bleq	2c0624 <__bss_end__+0x2b6f2c>
 590:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 594:	24030000 	strcs	r0, [r3], #-0
 598:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 59c:	000e030b 	andeq	r0, lr, fp, lsl #6
 5a0:	000f0400 	andeq	r0, pc, r0, lsl #8
 5a4:	00000b0b 	andeq	r0, r0, fp, lsl #22
 5a8:	0b000f05 	bleq	41c4 <_start-0x3e3c>
 5ac:	0013490b 	andseq	r4, r3, fp, lsl #18
 5b0:	00260600 	eoreq	r0, r6, r0, lsl #12
 5b4:	00001349 	andeq	r1, r0, r9, asr #6
 5b8:	03001607 	movweq	r1, #1543	; 0x607
 5bc:	3b0b3a0e 	blcc	2cedfc <__bss_end__+0x2c5704>
 5c0:	0013490b 	andseq	r4, r3, fp, lsl #18
 5c4:	01130800 	tsteq	r3, r0, lsl #16
 5c8:	0b0b0e03 	bleq	2c3ddc <__bss_end__+0x2ba6e4>
 5cc:	0b3b0b3a 	bleq	ec32bc <__bss_end__+0xeb9bc4>
 5d0:	00001301 	andeq	r1, r0, r1, lsl #6
 5d4:	03000d09 	movweq	r0, #3337	; 0xd09
 5d8:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
 5dc:	0019340b 	andseq	r3, r9, fp, lsl #8
 5e0:	012e0a00 	teqeq	lr, r0, lsl #20
 5e4:	0b3a0e03 	bleq	e83df8 <__bss_end__+0xe7a700>
 5e8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 5ec:	01111349 	tsteq	r1, r9, asr #6
 5f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 5f4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 5f8:	0b000013 	bleq	64c <_start-0x79b4>
 5fc:	08030005 	stmdaeq	r3, {r0, r2}
 600:	0b3b0b3a 	bleq	ec32f0 <__bss_end__+0xeb9bf8>
 604:	17021349 	strne	r1, [r2, -r9, asr #6]
 608:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
 60c:	3a080301 	bcc	201218 <__bss_end__+0x1f7b20>
 610:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 614:	11134919 	tstne	r3, r9, lsl r9
 618:	40061201 	andmi	r1, r6, r1, lsl #4
 61c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 620:	00001301 	andeq	r1, r0, r1, lsl #6
 624:	0300050d 	movweq	r0, #1293	; 0x50d
 628:	3b0b3a0e 	blcc	2cee68 <__bss_end__+0x2c5770>
 62c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 630:	0e000017 	mcreq	0, 0, r0, cr0, cr7, {0}
 634:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 638:	0b3b0b3a 	bleq	ec3328 <__bss_end__+0xeb9c30>
 63c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 640:	340f0000 	strcc	r0, [pc], #-0	; 648 <_start-0x79b8>
 644:	3a080300 	bcc	20124c <__bss_end__+0x1f7b54>
 648:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 64c:	00180213 	andseq	r0, r8, r3, lsl r2
 650:	00341000 	eorseq	r1, r4, r0
 654:	0b3a0803 	bleq	e82668 <__bss_end__+0xe78f70>
 658:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 65c:	00001702 	andeq	r1, r0, r2, lsl #14
 660:	03003411 	movweq	r3, #1041	; 0x411
 664:	3413490e 	ldrcc	r4, [r3], #-2318	; 0x90e
 668:	00180219 	andseq	r0, r8, r9, lsl r2
 66c:	010b1200 	mrseq	r1, R11_fiq
 670:	06120111 			; <UNDEFINED> instruction: 0x06120111
 674:	00001301 	andeq	r1, r0, r1, lsl #6
 678:	03003413 	movweq	r3, #1043	; 0x413
 67c:	3b0b3a0e 	blcc	2ceebc <__bss_end__+0x2c57c4>
 680:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 684:	14000017 	strne	r0, [r0], #-23
 688:	01018289 	smlabbeq	r1, r9, r2, r8
 68c:	13310111 	teqne	r1, #1073741828	; 0x40000004
 690:	00001301 	andeq	r1, r0, r1, lsl #6
 694:	01828a15 	orreq	r8, r2, r5, lsl sl
 698:	91180200 	tstls	r8, r0, lsl #4
 69c:	00001842 	andeq	r1, r0, r2, asr #16
 6a0:	01828916 	orreq	r8, r2, r6, lsl r9
 6a4:	31011100 	mrscc	r1, (UNDEF: 17)
 6a8:	17000013 	smladne	r0, r3, r0, r0
 6ac:	01018289 	smlabbeq	r1, r9, r2, r8
 6b0:	13310111 	teqne	r1, #1073741828	; 0x40000004
 6b4:	01180000 	tsteq	r8, r0
 6b8:	01134901 	tsteq	r3, r1, lsl #18
 6bc:	19000013 	stmdbne	r0, {r0, r1, r4}
 6c0:	13490021 	movtne	r0, #36897	; 0x9021
 6c4:	00000b2f 	andeq	r0, r0, pc, lsr #22
 6c8:	3f012e1a 	svccc	0x00012e1a
 6cc:	3a0e0319 	bcc	381338 <__bss_end__+0x377c40>
 6d0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 6d4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 6d8:	97184006 	ldrls	r4, [r8, -r6]
 6dc:	13011942 	movwne	r1, #6466	; 0x1942
 6e0:	151b0000 	ldrne	r0, [fp, #-0]
 6e4:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
 6e8:	00130113 	andseq	r0, r3, r3, lsl r1
 6ec:	00051c00 	andeq	r1, r5, r0, lsl #24
 6f0:	00001349 	andeq	r1, r0, r9, asr #6
 6f4:	3f012e1d 	svccc	0x00012e1d
 6f8:	3a0e0319 	bcc	381364 <__bss_end__+0x377c6c>
 6fc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 700:	11134919 	tstne	r3, r9, lsl r9
 704:	40061201 	andmi	r1, r6, r1, lsl #4
 708:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 70c:	00001301 	andeq	r1, r0, r1, lsl #6
 710:	11010b1e 	tstne	r1, lr, lsl fp
 714:	00061201 	andeq	r1, r6, r1, lsl #4
 718:	00341f00 	eorseq	r1, r4, r0, lsl #30
 71c:	0b3a0e03 	bleq	e83f30 <__bss_end__+0xe7a838>
 720:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 724:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 728:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
 72c:	03193f01 	tsteq	r9, #1, 30
 730:	3b0b3a0e 	blcc	2cef70 <__bss_end__+0x2c5878>
 734:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 738:	01193c13 	tsteq	r9, r3, lsl ip
 73c:	21000013 	tstcs	r0, r3, lsl r0
 740:	00000018 	andeq	r0, r0, r8, lsl r0
 744:	3f002e22 	svccc	0x00002e22
 748:	3a0e0319 	bcc	3813b4 <__bss_end__+0x377cbc>
 74c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 750:	00193c19 	andseq	r3, r9, r9, lsl ip
 754:	11010000 	mrsne	r0, (UNDEF: 1)
 758:	130e2501 	movwne	r2, #58625	; 0xe501
 75c:	1b0e030b 	blne	381390 <__bss_end__+0x377c98>
 760:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 764:	00171006 	andseq	r1, r7, r6
 768:	00240200 	eoreq	r0, r4, r0, lsl #4
 76c:	0b3e0b0b 	bleq	f833a0 <__bss_end__+0xf79ca8>
 770:	00000803 	andeq	r0, r0, r3, lsl #16
 774:	0b002403 	bleq	9788 <__bss_end__+0x90>
 778:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 77c:	0400000e 	streq	r0, [r0], #-14
 780:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 784:	0b3a0e03 	bleq	e83f98 <__bss_end__+0xe7a8a0>
 788:	01110b3b 	tsteq	r1, fp, lsr fp
 78c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 790:	01194297 			; <UNDEFINED> instruction: 0x01194297
 794:	05000013 	streq	r0, [r0, #-19]
 798:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 79c:	0b3b0b3a 	bleq	ec348c <__bss_end__+0xeb9d94>
 7a0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 7a4:	0000193c 	andeq	r1, r0, ip, lsr r9
 7a8:	3f012e06 	svccc	0x00012e06
 7ac:	3a0e0319 	bcc	381418 <__bss_end__+0x377d20>
 7b0:	3c0b3b0b 	stccc	11, cr3, [fp], {11}
 7b4:	00130119 	andseq	r0, r3, r9, lsl r1
 7b8:	00180700 	andseq	r0, r8, r0, lsl #14
 7bc:	34080000 	strcc	r0, [r8], #-0
 7c0:	3a080300 	bcc	2013c8 <__bss_end__+0x1f7cd0>
 7c4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 7c8:	00170213 	andseq	r0, r7, r3, lsl r2
 7cc:	00340900 	eorseq	r0, r4, r0, lsl #18
 7d0:	0b3a0e03 	bleq	e83fe4 <__bss_end__+0xe7a8ec>
 7d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 7d8:	890a0000 	stmdbhi	sl, {}	; <UNPREDICTABLE>
 7dc:	11000182 	smlabbne	r0, r2, r1, r0
 7e0:	00133101 	andseq	r3, r3, r1, lsl #2
 7e4:	000f0b00 	andeq	r0, pc, r0, lsl #22
 7e8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 7ec:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
 7f0:	03193f00 	tsteq	r9, #0, 30
 7f4:	3b0b3a0e 	blcc	2cf034 <__bss_end__+0x2c593c>
 7f8:	3c19270b 	ldccc	7, cr2, [r9], {11}
 7fc:	00000019 	andeq	r0, r0, r9, lsl r0
 800:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 804:	030b130e 	movweq	r1, #45838	; 0xb30e
 808:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
 80c:	10011117 	andne	r1, r1, r7, lsl r1
 810:	02000017 	andeq	r0, r0, #23
 814:	0b0b0024 	bleq	2c08ac <__bss_end__+0x2b71b4>
 818:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 81c:	24030000 	strcs	r0, [r3], #-0
 820:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 824:	000e030b 	andeq	r0, lr, fp, lsl #6
 828:	012e0400 	teqeq	lr, r0, lsl #8
 82c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 830:	0b3b0b3a 	bleq	ec3520 <__bss_end__+0xeb9e28>
 834:	13491927 	movtne	r1, #39207	; 0x9927
 838:	06120111 			; <UNDEFINED> instruction: 0x06120111
 83c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 840:	00130119 	andseq	r0, r3, r9, lsl r1
 844:	00340500 	eorseq	r0, r4, r0, lsl #10
 848:	0b3a0e03 	bleq	e8405c <__bss_end__+0xe7a964>
 84c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 850:	00001702 	andeq	r1, r0, r2, lsl #14
 854:	3f012e06 	svccc	0x00012e06
 858:	3a0e0319 	bcc	3814c4 <__bss_end__+0x377dcc>
 85c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 860:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 864:	97184006 	ldrls	r4, [r8, -r6]
 868:	13011942 	movwne	r1, #6466	; 0x1942
 86c:	34070000 	strcc	r0, [r7], #-0
 870:	3a0e0300 	bcc	381478 <__bss_end__+0x377d80>
 874:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 878:	00061c13 	andeq	r1, r6, r3, lsl ip
 87c:	00340800 	eorseq	r0, r4, r0, lsl #16
 880:	0b3a0e03 	bleq	e84094 <__bss_end__+0xe7a99c>
 884:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 888:	00000b1c 	andeq	r0, r0, ip, lsl fp
 88c:	01828909 	orreq	r8, r2, r9, lsl #18
 890:	31011100 	mrscc	r1, (UNDEF: 17)
 894:	0a000013 	beq	8e8 <_start-0x7718>
 898:	01018289 	smlabbeq	r1, r9, r2, r8
 89c:	13310111 	teqne	r1, #1073741828	; 0x40000004
 8a0:	00001301 	andeq	r1, r0, r1, lsl #6
 8a4:	01828a0b 	orreq	r8, r2, fp, lsl #20
 8a8:	91180200 	tstls	r8, r0, lsl #4
 8ac:	00001842 	andeq	r1, r0, r2, asr #16
 8b0:	0182890c 	orreq	r8, r2, ip, lsl #18
 8b4:	31011101 	tstcc	r1, r1, lsl #2
 8b8:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 8bc:	13490026 	movtne	r0, #36902	; 0x9026
 8c0:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
 8c4:	03193f01 	tsteq	r9, #1, 30
 8c8:	3b0b3a0e 	blcc	2cf108 <__bss_end__+0x2c5a10>
 8cc:	3c19270b 	ldccc	7, cr2, [r9], {11}
 8d0:	00130119 	andseq	r0, r3, r9, lsl r1
 8d4:	00050f00 	andeq	r0, r5, r0, lsl #30
 8d8:	00001349 	andeq	r1, r0, r9, asr #6
 8dc:	3f012e10 	svccc	0x00012e10
 8e0:	3a0e0319 	bcc	38154c <__bss_end__+0x377e54>
 8e4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 8e8:	00193c19 	andseq	r3, r9, r9, lsl ip
 8ec:	11010000 	mrsne	r0, (UNDEF: 1)
 8f0:	130e2501 	movwne	r2, #58625	; 0xe501
 8f4:	1b0e030b 	blne	381528 <__bss_end__+0x377e30>
 8f8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 8fc:	00171006 	andseq	r1, r7, r6
 900:	00240200 	eoreq	r0, r4, r0, lsl #4
 904:	0b3e0b0b 	bleq	f83538 <__bss_end__+0xf79e40>
 908:	00000803 	andeq	r0, r0, r3, lsl #16
 90c:	0b002403 	bleq	9920 <__bss_end__+0x228>
 910:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 914:	0400000e 	streq	r0, [r0], #-14
 918:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 91c:	0b3a0e03 	bleq	e84130 <__bss_end__+0xe7aa38>
 920:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 924:	06120111 			; <UNDEFINED> instruction: 0x06120111
 928:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 92c:	00130119 	andseq	r0, r3, r9, lsl r1
 930:	00050500 	andeq	r0, r5, r0, lsl #10
 934:	0b3a0e03 	bleq	e84148 <__bss_end__+0xe7aa50>
 938:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 93c:	00001702 	andeq	r1, r0, r2, lsl #14
 940:	3f012e06 	svccc	0x00012e06
 944:	3a0e0319 	bcc	3815b0 <__bss_end__+0x377eb8>
 948:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 94c:	11134919 	tstne	r3, r9, lsl r9
 950:	40061201 	andmi	r1, r6, r1, lsl #4
 954:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 958:	00001301 	andeq	r1, r0, r1, lsl #6
 95c:	01828907 	orreq	r8, r2, r7, lsl #18
 960:	31011101 	tstcc	r1, r1, lsl #2
 964:	08000013 	stmdaeq	r0, {r0, r1, r4}
 968:	0001828a 	andeq	r8, r1, sl, lsl #5
 96c:	42911802 	addsmi	r1, r1, #131072	; 0x20000
 970:	09000018 	stmdbeq	r0, {r3, r4}
 974:	08030005 	stmdaeq	r3, {r0, r2}
 978:	0b3b0b3a 	bleq	ec3668 <__bss_end__+0xeb9f70>
 97c:	17021349 	strne	r1, [r2, -r9, asr #6]
 980:	340a0000 	strcc	r0, [sl], #-0
 984:	3a080300 	bcc	20158c <__bss_end__+0x1f7e94>
 988:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 98c:	00180213 	andseq	r0, r8, r3, lsl r2
 990:	010b0b00 	tsteq	fp, r0, lsl #22
 994:	06120111 			; <UNDEFINED> instruction: 0x06120111
 998:	00001301 	andeq	r1, r0, r1, lsl #6
 99c:	0300340c 	movweq	r3, #1036	; 0x40c
 9a0:	3b0b3a08 	blcc	2cf1c8 <__bss_end__+0x2c5ad0>
 9a4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 9a8:	0d000017 	stceq	0, cr0, [r0, #-92]	; 0xffffffa4
 9ac:	00018289 	andeq	r8, r1, r9, lsl #5
 9b0:	13310111 	teqne	r1, #1073741828	; 0x40000004
 9b4:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
 9b8:	03193f01 	tsteq	r9, #1, 30
 9bc:	3b0b3a0e 	blcc	2cf1fc <__bss_end__+0x2c5b04>
 9c0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 9c4:	00193c13 	andseq	r3, r9, r3, lsl ip
 9c8:	00050f00 	andeq	r0, r5, r0, lsl #30
 9cc:	00001349 	andeq	r1, r0, r9, asr #6
 9d0:	01110100 	tsteq	r1, r0, lsl #2
 9d4:	0b130e25 	bleq	4c4270 <__bss_end__+0x4bab78>
 9d8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 9dc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 9e0:	00001710 	andeq	r1, r0, r0, lsl r7
 9e4:	0b002402 	bleq	99f4 <__bss_end__+0x2fc>
 9e8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 9ec:	03000008 	movweq	r0, #8
 9f0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 9f4:	0b3b0b3a 	bleq	ec36e4 <__bss_end__+0xeb9fec>
 9f8:	00001349 	andeq	r1, r0, r9, asr #6
 9fc:	0b002404 	bleq	9a14 <__bss_end__+0x31c>
 a00:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 a04:	0500000e 	streq	r0, [r0, #-14]
 a08:	0b0b000f 	bleq	2c0a4c <__bss_end__+0x2b7354>
 a0c:	0f060000 	svceq	0x00060000
 a10:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 a14:	07000013 	smladeq	r0, r3, r0, r0
 a18:	13490026 	movtne	r0, #36902	; 0x9026
 a1c:	01080000 	mrseq	r0, (UNDEF: 8)
 a20:	01134901 	tsteq	r3, r1, lsl #18
 a24:	09000013 	stmdbeq	r0, {r0, r1, r4}
 a28:	13490021 	movtne	r0, #36897	; 0x9021
 a2c:	00000b2f 	andeq	r0, r0, pc, lsr #22
 a30:	3f012e0a 	svccc	0x00012e0a
 a34:	3a0e0319 	bcc	3816a0 <__bss_end__+0x377fa8>
 a38:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 a3c:	11134919 	tstne	r3, r9, lsl r9
 a40:	40061201 	andmi	r1, r6, r1, lsl #4
 a44:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 a48:	00001301 	andeq	r1, r0, r1, lsl #6
 a4c:	0300050b 	movweq	r0, #1291	; 0x50b
 a50:	3b0b3a0e 	blcc	2cf290 <__bss_end__+0x2c5b98>
 a54:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 a58:	0c000017 	stceq	0, cr0, [r0], {23}
 a5c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 a60:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
 a64:	00001802 	andeq	r1, r0, r2, lsl #16
 a68:	0300340d 	movweq	r3, #1037	; 0x40d
 a6c:	3b0b3a0e 	blcc	2cf2ac <__bss_end__+0x2c5bb4>
 a70:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 a74:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
 a78:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 a7c:	0b3b0b3a 	bleq	ec376c <__bss_end__+0xeba074>
 a80:	17021349 	strne	r1, [r2, -r9, asr #6]
 a84:	890f0000 	stmdbhi	pc, {}	; <UNPREDICTABLE>
 a88:	11010182 	smlabbne	r1, r2, r1, r0
 a8c:	01133101 	tsteq	r3, r1, lsl #2
 a90:	10000013 	andne	r0, r0, r3, lsl r0
 a94:	0001828a 	andeq	r8, r1, sl, lsl #5
 a98:	42911802 	addsmi	r1, r1, #131072	; 0x20000
 a9c:	11000018 	tstne	r0, r8, lsl r0
 aa0:	00018289 	andeq	r8, r1, r9, lsl #5
 aa4:	13310111 	teqne	r1, #1073741828	; 0x40000004
 aa8:	89120000 	ldmdbhi	r2, {}	; <UNPREDICTABLE>
 aac:	11010182 	smlabbne	r1, r2, r1, r0
 ab0:	00133101 	andseq	r3, r3, r1, lsl #2
 ab4:	012e1300 	teqeq	lr, r0, lsl #6
 ab8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 abc:	0b3b0b3a 	bleq	ec37ac <__bss_end__+0xeba0b4>
 ac0:	01111927 	tsteq	r1, r7, lsr #18
 ac4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 ac8:	01194297 			; <UNDEFINED> instruction: 0x01194297
 acc:	14000013 	strne	r0, [r0], #-19
 ad0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 ad4:	0b3a0e03 	bleq	e842e8 <__bss_end__+0xe7abf0>
 ad8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 adc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 ae0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 ae4:	15000019 	strne	r0, [r0, #-25]
 ae8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 aec:	0b3a0e03 	bleq	e84300 <__bss_end__+0xe7ac08>
 af0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 af4:	01111349 	tsteq	r1, r9, asr #6
 af8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 afc:	00194297 	mulseq	r9, r7, r2
 b00:	00341600 	eorseq	r1, r4, r0, lsl #12
 b04:	0b3a0e03 	bleq	e84318 <__bss_end__+0xe7ac20>
 b08:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 b0c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 b10:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 b14:	03193f01 	tsteq	r9, #1, 30
 b18:	3b0b3a0e 	blcc	2cf358 <__bss_end__+0x2c5c60>
 b1c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 b20:	01193c13 	tsteq	r9, r3, lsl ip
 b24:	18000013 	stmdane	r0, {r0, r1, r4}
 b28:	13490005 	movtne	r0, #36869	; 0x9005
 b2c:	18190000 	ldmdane	r9, {}	; <UNPREDICTABLE>
 b30:	1a000000 	bne	b38 <_start-0x74c8>
 b34:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 b38:	0b3a0e03 	bleq	e8434c <__bss_end__+0xe7ac54>
 b3c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 b40:	0000193c 	andeq	r1, r0, ip, lsr r9
 b44:	3f012e1b 	svccc	0x00012e1b
 b48:	3a0e0319 	bcc	3817b4 <__bss_end__+0x3780bc>
 b4c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 b50:	3c134919 	ldccc	9, cr4, [r3], {25}
 b54:	00000019 	andeq	r0, r0, r9, lsl r0
 b58:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 b5c:	030b130e 	movweq	r1, #45838	; 0xb30e
 b60:	110e1b0e 	tstne	lr, lr, lsl #22
 b64:	10061201 	andne	r1, r6, r1, lsl #4
 b68:	02000017 	andeq	r0, r0, #23
 b6c:	0b0b0024 	bleq	2c0c04 <__bss_end__+0x2b750c>
 b70:	0e030b3e 	vmoveq.16	d3[0], r0
 b74:	24030000 	strcs	r0, [r3], #-0
 b78:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 b7c:	0008030b 	andeq	r0, r8, fp, lsl #6
 b80:	000f0400 	andeq	r0, pc, r0, lsl #8
 b84:	00000b0b 	andeq	r0, r0, fp, lsl #22
 b88:	0b000f05 	bleq	47a4 <_start-0x385c>
 b8c:	0013490b 	andseq	r4, r3, fp, lsl #18
 b90:	00160600 	andseq	r0, r6, r0, lsl #12
 b94:	0b3a0e03 	bleq	e843a8 <__bss_end__+0xe7acb0>
 b98:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 b9c:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
 ba0:	03193f01 	tsteq	r9, #1, 30
 ba4:	3b0b3a0e 	blcc	2cf3e4 <__bss_end__+0x2c5cec>
 ba8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 bac:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 bb0:	97184006 	ldrls	r4, [r8, -r6]
 bb4:	00001942 	andeq	r1, r0, r2, asr #18
 bb8:	03000508 	movweq	r0, #1288	; 0x508
 bbc:	3b0b3a08 	blcc	2cf3e4 <__bss_end__+0x2c5cec>
 bc0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 bc4:	09000018 	stmdbeq	r0, {r3, r4}
 bc8:	08030005 	stmdaeq	r3, {r0, r2}
 bcc:	0b3b0b3a 	bleq	ec38bc <__bss_end__+0xeba1c4>
 bd0:	17021349 	strne	r1, [r2, -r9, asr #6]
 bd4:	340a0000 	strcc	r0, [sl], #-0
 bd8:	3a080300 	bcc	2017e0 <__bss_end__+0x1f80e8>
 bdc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 be0:	00170213 	andseq	r0, r7, r3, lsl r2
 be4:	00340b00 	eorseq	r0, r4, r0, lsl #22
 be8:	0b3a0803 	bleq	e82bfc <__bss_end__+0xe79504>
 bec:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 bf0:	00001802 	andeq	r1, r0, r2, lsl #16
 bf4:	01110100 	tsteq	r1, r0, lsl #2
 bf8:	0b130e25 	bleq	4c4494 <__bss_end__+0x4bad9c>
 bfc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 c00:	06120111 			; <UNDEFINED> instruction: 0x06120111
 c04:	00001710 	andeq	r1, r0, r0, lsl r7
 c08:	0b002402 	bleq	9c18 <__bss_end__+0x520>
 c0c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 c10:	03000008 	movweq	r0, #8
 c14:	0b0b0024 	bleq	2c0cac <__bss_end__+0x2b75b4>
 c18:	0e030b3e 	vmoveq.16	d3[0], r0
 c1c:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
 c20:	3a0e0301 	bcc	38182c <__bss_end__+0x378134>
 c24:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 c28:	11134919 	tstne	r3, r9, lsl r9
 c2c:	40061201 	andmi	r1, r6, r1, lsl #4
 c30:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 c34:	00001301 	andeq	r1, r0, r1, lsl #6
 c38:	03000505 	movweq	r0, #1285	; 0x505
 c3c:	3b0b3a08 	blcc	2cf464 <__bss_end__+0x2c5d6c>
 c40:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 c44:	06000017 			; <UNDEFINED> instruction: 0x06000017
 c48:	01018289 	smlabbeq	r1, r9, r2, r8
 c4c:	13310111 	teqne	r1, #1073741828	; 0x40000004
 c50:	8a070000 	bhi	1c0c58 <__bss_end__+0x1b7560>
 c54:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
 c58:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
 c5c:	15080000 	strne	r0, [r8, #-0]
 c60:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
 c64:	00130113 	andseq	r0, r3, r3, lsl r1
 c68:	00050900 	andeq	r0, r5, r0, lsl #18
 c6c:	00001349 	andeq	r1, r0, r9, asr #6
 c70:	0300340a 	movweq	r3, #1034	; 0x40a
 c74:	3b0b3a0e 	blcc	2cf4b4 <__bss_end__+0x2c5dbc>
 c78:	3f13490b 	svccc	0x0013490b
 c7c:	00180219 	andseq	r0, r8, r9, lsl r2
 c80:	000f0b00 	andeq	r0, pc, r0, lsl #22
 c84:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 c88:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
 c8c:	03193f01 	tsteq	r9, #1, 30
 c90:	3b0b3a0e 	blcc	2cf4d0 <__bss_end__+0x2c5dd8>
 c94:	3c19270b 	ldccc	7, cr2, [r9], {11}
 c98:	00000019 	andeq	r0, r0, r9, lsl r0

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
   0:	00000000 	andeq	r0, r0, r0
   4:	00000020 	andeq	r0, r0, r0, lsr #32
   8:	20500001 	subscs	r0, r0, r1
   c:	34000000 	strcc	r0, [r0], #-0
  10:	01000000 	mrseq	r0, (UNDEF: 0)
  14:	00345400 	eorseq	r5, r4, r0, lsl #8
  18:	00370000 	eorseq	r0, r7, r0
  1c:	00010000 	andeq	r0, r1, r0
  20:	00003750 	andeq	r3, r0, r0, asr r7
  24:	00005c00 	andeq	r5, r0, r0, lsl #24
  28:	54000100 	strpl	r0, [r0], #-256	; 0x100
  2c:	0000005c 	andeq	r0, r0, ip, asr r0
  30:	0000006c 	andeq	r0, r0, ip, rrx
  34:	01f30004 	mvnseq	r0, r4
  38:	00009f50 	andeq	r9, r0, r0, asr pc
  3c:	00000000 	andeq	r0, r0, r0
  40:	003c0000 	eorseq	r0, ip, r0
  44:	005c0000 	subseq	r0, ip, r0
  48:	00010000 	andeq	r0, r1, r0
  4c:	00000055 	andeq	r0, r0, r5, asr r0
  50:	00000000 	andeq	r0, r0, r0
  54:	00006c00 	andeq	r6, r0, r0, lsl #24
  58:	00007800 	andeq	r7, r0, r0, lsl #16
  5c:	50000100 	andpl	r0, r0, r0, lsl #2
  60:	00000078 	andeq	r0, r0, r8, ror r0
  64:	000000d8 	ldrdeq	r0, [r0], -r8
  68:	00540001 	subseq	r0, r4, r1
  6c:	00000000 	andeq	r0, r0, r0
  70:	74000000 	strvc	r0, [r0], #-0
  74:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
  78:	01000000 	mrseq	r0, (UNDEF: 0)
  7c:	00785000 	rsbseq	r5, r8, r0
  80:	00d80000 	sbcseq	r0, r8, r0
  84:	00010000 	andeq	r0, r1, r0
  88:	00000054 	andeq	r0, r0, r4, asr r0
	...
  94:	00000400 	andeq	r0, r0, r0, lsl #8
  98:	50000100 	andpl	r0, r0, r0, lsl #2
  9c:	00000004 	andeq	r0, r0, r4
  a0:	00000010 	andeq	r0, r0, r0, lsl r0
  a4:	01f30004 	mvnseq	r0, r4
  a8:	00009f50 	andeq	r9, r0, r0, asr pc
  ac:	00000000 	andeq	r0, r0, r0
  b0:	00100000 	andseq	r0, r0, r0
  b4:	00200000 	eoreq	r0, r0, r0
  b8:	00010000 	andeq	r0, r1, r0
  bc:	00002050 	andeq	r2, r0, r0, asr r0
  c0:	00002c00 	andeq	r2, r0, r0, lsl #24
  c4:	53000100 	movwpl	r0, #256	; 0x100
  c8:	0000002c 	andeq	r0, r0, ip, lsr #32
  cc:	00000034 	andeq	r0, r0, r4, lsr r0
  d0:	01f30004 	mvnseq	r0, r4
  d4:	00349f50 	eorseq	r9, r4, r0, asr pc
  d8:	00380000 	eorseq	r0, r8, r0
  dc:	00010000 	andeq	r0, r1, r0
  e0:	00003850 	andeq	r3, r0, r0, asr r8
  e4:	00005c00 	andeq	r5, r0, r0, lsl #24
  e8:	53000100 	movwpl	r0, #256	; 0x100
  ec:	0000005c 	andeq	r0, r0, ip, asr r0
  f0:	00000064 	andeq	r0, r0, r4, rrx
  f4:	01f30004 	mvnseq	r0, r4
  f8:	00649f50 	rsbeq	r9, r4, r0, asr pc
  fc:	008c0000 	addeq	r0, ip, r0
 100:	00010000 	andeq	r0, r1, r0
 104:	00000053 	andeq	r0, r0, r3, asr r0
 108:	00000000 	andeq	r0, r0, r0
 10c:	00003800 	andeq	r3, r0, r0, lsl #16
 110:	00004400 	andeq	r4, r0, r0, lsl #8
 114:	50000100 	andpl	r0, r0, r0, lsl #2
 118:	00000044 	andeq	r0, r0, r4, asr #32
 11c:	0000005c 	andeq	r0, r0, ip, asr r0
 120:	00730002 	rsbseq	r0, r3, r2
 124:	0000005c 	andeq	r0, r0, ip, asr r0
 128:	0000005f 	andeq	r0, r0, pc, asr r0
 12c:	01f30003 	mvnseq	r0, r3
 130:	00006450 	andeq	r6, r0, r0, asr r4
 134:	00008c00 	andeq	r8, r0, r0, lsl #24
 138:	50000100 	andpl	r0, r0, r0, lsl #2
	...
 144:	00000098 	muleq	r0, r8, r0
 148:	000000a4 	andeq	r0, r0, r4, lsr #1
 14c:	ac500001 	mrrcge	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
 150:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
 154:	01000000 	mrseq	r0, (UNDEF: 0)
 158:	00005000 	andeq	r5, r0, r0
 15c:	00000000 	andeq	r0, r0, r0
 160:	00c80000 	sbceq	r0, r8, r0
 164:	00cf0000 	sbceq	r0, pc, r0
 168:	00010000 	andeq	r0, r1, r0
 16c:	0000cf50 	andeq	ip, r0, r0, asr pc
 170:	0000f400 	andeq	pc, r0, r0, lsl #8
 174:	f3000400 	vshl.u8	d0, d0, d0
 178:	009f5001 	addseq	r5, pc, r1
 17c:	00000000 	andeq	r0, r0, r0
 180:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
 184:	cf000000 	svcgt	0x00000000
 188:	01000000 	mrseq	r0, (UNDEF: 0)
 18c:	00cf5100 	sbceq	r5, pc, r0, lsl #2
 190:	00f40000 	rscseq	r0, r4, r0
 194:	00040000 	andeq	r0, r4, r0
 198:	9f5101f3 	svcls	0x005101f3
	...
 1a4:	000000f4 	strdeq	r0, [r0], -r4
 1a8:	000000fc 	strdeq	r0, [r0], -ip
 1ac:	fc500001 	mrrc2	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
 1b0:	1c000000 	stcne	0, cr0, [r0], {-0}
 1b4:	04000001 	streq	r0, [r0], #-1
 1b8:	5001f300 	andpl	pc, r1, r0, lsl #6
 1bc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 1c0:	00000000 	andeq	r0, r0, r0
 1c4:	00019000 	andeq	r9, r1, r0
 1c8:	00019800 	andeq	r9, r1, r0, lsl #16
 1cc:	50000100 	andpl	r0, r0, r0, lsl #2
 1d0:	00000198 	muleq	r0, r8, r1
 1d4:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
 1d8:	01f30004 	mvnseq	r0, r4
 1dc:	00009f50 	andeq	r9, r0, r0, asr pc
 1e0:	00000000 	andeq	r0, r0, r0
 1e4:	01b80000 			; <UNDEFINED> instruction: 0x01b80000
 1e8:	01c00000 	biceq	r0, r0, r0
 1ec:	00010000 	andeq	r0, r1, r0
 1f0:	0001c050 	andeq	ip, r1, r0, asr r0
 1f4:	0001e000 	andeq	lr, r1, r0
 1f8:	f3000400 	vshl.u8	d0, d0, d0
 1fc:	009f5001 	addseq	r5, pc, r1
 200:	00000000 	andeq	r0, r0, r0
 204:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
 208:	c4000001 	strgt	r0, [r0], #-1
 20c:	01000001 	tsteq	r0, r1
 210:	01c45100 	biceq	r5, r4, r0, lsl #2
 214:	01e00000 	mvneq	r0, r0
 218:	00040000 	andeq	r0, r4, r0
 21c:	9f5101f3 	svcls	0x005101f3
	...
 228:	0000002c 	andeq	r0, r0, ip, lsr #32
 22c:	00000038 	andeq	r0, r0, r8, lsr r0
 230:	38500001 	ldmdacc	r0, {r0}^
 234:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
 238:	01000000 	mrseq	r0, (UNDEF: 0)
 23c:	00485500 	subeq	r5, r8, r0, lsl #10
 240:	00580000 	subseq	r0, r8, r0
 244:	00010000 	andeq	r0, r1, r0
 248:	00000050 	andeq	r0, r0, r0, asr r0
	...
 254:	00001000 	andeq	r1, r0, r0
 258:	50000100 	andpl	r0, r0, r0, lsl #2
 25c:	00000010 	andeq	r0, r0, r0, lsl r0
 260:	00000034 	andeq	r0, r0, r4, lsr r0
 264:	00540001 	subseq	r0, r4, r1
	...
 270:	04000000 	streq	r0, [r0], #-0
 274:	01000000 	mrseq	r0, (UNDEF: 0)
 278:	00045000 	andeq	r5, r4, r0
 27c:	000c0000 	andeq	r0, ip, r0
 280:	00030000 	andeq	r0, r3, r0
 284:	0c9f3070 	ldceq	0, cr3, [pc], {112}	; 0x70
 288:	14000000 	strne	r0, [r0], #-0
 28c:	04000000 	streq	r0, [r0], #-0
 290:	5001f300 	andpl	pc, r1, r0, lsl #6
 294:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 298:	00000000 	andeq	r0, r0, r0
 29c:	00001400 	andeq	r1, r0, r0, lsl #8
 2a0:	00002000 	andeq	r2, r0, r0
 2a4:	50000100 	andpl	r0, r0, r0, lsl #2
 2a8:	00000020 	andeq	r0, r0, r0, lsr #32
 2ac:	0000002c 	andeq	r0, r0, ip, lsr #32
 2b0:	01700003 	cmneq	r0, r3
 2b4:	00002c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
 2b8:	00004000 	andeq	r4, r0, r0
 2bc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
 2c8:	00000014 	andeq	r0, r0, r4, lsl r0
 2cc:	00000018 	andeq	r0, r0, r8, lsl r0
 2d0:	18510001 	ldmdane	r1, {r0}^
 2d4:	40000000 	andmi	r0, r0, r0
 2d8:	04000000 	streq	r0, [r0], #-0
 2dc:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
 2e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 2e4:	00000000 	andeq	r0, r0, r0
 2e8:	00004000 	andeq	r4, r0, r0
 2ec:	00006000 	andeq	r6, r0, r0
 2f0:	50000100 	andpl	r0, r0, r0, lsl #2
 2f4:	00000060 	andeq	r0, r0, r0, rrx
 2f8:	0000006c 	andeq	r0, r0, ip, rrx
 2fc:	01710003 	cmneq	r1, r3
 300:	00006c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
 304:	00007400 	andeq	r7, r0, r0, lsl #8
 308:	51000100 	mrspl	r0, (UNDEF: 16)
 30c:	00000074 	andeq	r0, r0, r4, ror r0
 310:	00000080 	andeq	r0, r0, r0, lsl #1
 314:	01710003 	cmneq	r1, r3
 318:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 31c:	00000000 	andeq	r0, r0, r0
 320:	00004000 	andeq	r4, r0, r0
 324:	00005000 	andeq	r5, r0, r0
 328:	51000100 	mrspl	r0, (UNDEF: 16)
 32c:	00000050 	andeq	r0, r0, r0, asr r0
 330:	00000080 	andeq	r0, r0, r0, lsl #1
 334:	01f30004 	mvnseq	r0, r4
 338:	00009f51 	andeq	r9, r0, r1, asr pc
 33c:	00000000 	andeq	r0, r0, r0
 340:	00400000 	subeq	r0, r0, r0
 344:	00580000 	subseq	r0, r8, r0
 348:	00010000 	andeq	r0, r1, r0
 34c:	00005852 	andeq	r5, r0, r2, asr r8
 350:	00006400 	andeq	r6, r0, r0, lsl #8
 354:	52000100 	andpl	r0, r0, #0, 2
 358:	00000064 	andeq	r0, r0, r4, rrx
 35c:	00000068 	andeq	r0, r0, r8, rrx
 360:	01720003 	cmneq	r2, r3
 364:	0000689f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
 368:	00008000 	andeq	r8, r0, r0
 36c:	52000100 	andpl	r0, r0, #0, 2
	...
 378:	00000040 	andeq	r0, r0, r0, asr #32
 37c:	00000054 	andeq	r0, r0, r4, asr r0
 380:	54530001 	ldrbpl	r0, [r3], #-1
 384:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
 388:	01000000 	mrseq	r0, (UNDEF: 0)
 38c:	00005300 	andeq	r5, r0, r0, lsl #6
 390:	00000000 	andeq	r0, r0, r0
 394:	00480000 	subeq	r0, r8, r0
 398:	00600000 	rsbeq	r0, r0, r0
 39c:	00010000 	andeq	r0, r1, r0
 3a0:	0000605c 	andeq	r6, r0, ip, asr r0
 3a4:	00008000 	andeq	r8, r0, r0
 3a8:	f3000a00 	vpmax.u8	d0, d0, d0
 3ac:	01f35201 	mvnseq	r5, r1, lsl #4
 3b0:	01231c53 	teqeq	r3, r3, asr ip
 3b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 3b8:	00000000 	andeq	r0, r0, r0
 3bc:	00008000 	andeq	r8, r0, r0
 3c0:	0000a400 	andeq	sl, r0, r0, lsl #8
 3c4:	50000100 	andpl	r0, r0, r0, lsl #2
 3c8:	000000a4 	andeq	r0, r0, r4, lsr #1
 3cc:	00000118 	andeq	r0, r0, r8, lsl r1
 3d0:	02700003 	rsbseq	r0, r0, #3
 3d4:	0001189f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
 3d8:	00021800 	andeq	r1, r2, r0, lsl #16
 3dc:	f3000400 	vshl.u8	d0, d0, d0
 3e0:	009f5001 	addseq	r5, pc, r1
 3e4:	00000000 	andeq	r0, r0, r0
 3e8:	80000000 	andhi	r0, r0, r0
 3ec:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
 3f0:	01000000 	mrseq	r0, (UNDEF: 0)
 3f4:	00f05100 	rscseq	r5, r0, r0, lsl #2
 3f8:	01600000 	cmneq	r0, r0
 3fc:	00010000 	andeq	r0, r1, r0
 400:	00016055 	andeq	r6, r1, r5, asr r0
 404:	00016800 	andeq	r6, r1, r0, lsl #16
 408:	51000100 	mrspl	r0, (UNDEF: 16)
 40c:	00000168 	andeq	r0, r0, r8, ror #2
 410:	00000188 	andeq	r0, r0, r8, lsl #3
 414:	88550001 	ldmdahi	r5, {r0}^
 418:	9c000001 	stcls	0, cr0, [r0], {1}
 41c:	01000001 	tsteq	r0, r1
 420:	019c5100 	orrseq	r5, ip, r0, lsl #2
 424:	01bc0000 			; <UNDEFINED> instruction: 0x01bc0000
 428:	00010000 	andeq	r0, r1, r0
 42c:	0001bc55 	andeq	fp, r1, r5, asr ip
 430:	0001c400 	andeq	ip, r1, r0, lsl #8
 434:	51000100 	mrspl	r0, (UNDEF: 16)
 438:	000001c4 	andeq	r0, r0, r4, asr #3
 43c:	000001fc 	strdeq	r0, [r0], -ip
 440:	fc550001 	mrrc2	0, 0, r0, r5, cr1
 444:	18000001 	stmdane	r0, {r0}
 448:	04000002 	streq	r0, [r0], #-2
 44c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
 450:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 454:	00000000 	andeq	r0, r0, r0
 458:	00008000 	andeq	r8, r0, r0
 45c:	00009400 	andeq	r9, r0, r0, lsl #8
 460:	52000100 	andpl	r0, r0, #0, 2
 464:	00000094 	muleq	r0, r4, r0
 468:	000001fc 	strdeq	r0, [r0], -ip
 46c:	fc540001 	mrrc2	0, 0, r0, r4, cr1
 470:	18000001 	stmdane	r0, {r0}
 474:	04000002 	streq	r0, [r0], #-2
 478:	5201f300 	andpl	pc, r1, #0, 6
 47c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 480:	00000000 	andeq	r0, r0, r0
 484:	00008000 	andeq	r8, r0, r0
 488:	00010000 	andeq	r0, r1, r0
 48c:	53000100 	movwpl	r0, #256	; 0x100
 490:	00000104 	andeq	r0, r0, r4, lsl #2
 494:	00000108 	andeq	r0, r0, r8, lsl #2
 498:	60530001 	subsvs	r0, r3, r1
 49c:	68000001 	stmdavs	r0, {r0}
 4a0:	01000001 	tsteq	r0, r1
 4a4:	01685300 	cmneq	r8, r0, lsl #6
 4a8:	01880000 	orreq	r0, r8, r0
 4ac:	00040000 	andeq	r0, r4, r0
 4b0:	9f5301f3 	svcls	0x005301f3
 4b4:	00000188 	andeq	r0, r0, r8, lsl #3
 4b8:	00000190 	muleq	r0, r0, r1
 4bc:	90530001 	subsls	r0, r3, r1
 4c0:	94000001 	strls	r0, [r0], #-1
 4c4:	01000001 	tsteq	r0, r1
 4c8:	01945c00 	orrseq	r5, r4, r0, lsl #24
 4cc:	019c0000 	orrseq	r0, ip, r0
 4d0:	00010000 	andeq	r0, r1, r0
 4d4:	00019c53 	andeq	r9, r1, r3, asr ip
 4d8:	0001bc00 	andeq	fp, r1, r0, lsl #24
 4dc:	f3000400 	vshl.u8	d0, d0, d0
 4e0:	bc9f5301 	ldclt	3, cr5, [pc], {1}
 4e4:	cc000001 	stcgt	0, cr0, [r0], {1}
 4e8:	01000001 	tsteq	r0, r1
 4ec:	01cc5300 	biceq	r5, ip, r0, lsl #6
 4f0:	01cf0000 	biceq	r0, pc, r0
 4f4:	00010000 	andeq	r0, r1, r0
 4f8:	0001cf5c 	andeq	ip, r1, ip, asr pc
 4fc:	0001d400 	andeq	sp, r1, r0, lsl #8
 500:	f3000400 	vshl.u8	d0, d0, d0
 504:	009f5301 	addseq	r5, pc, r1, lsl #6
 508:	00000000 	andeq	r0, r0, r0
 50c:	80000000 	andhi	r0, r0, r0
 510:	9c000000 	stcls	0, cr0, [r0], {-0}
 514:	02000000 	andeq	r0, r0, #0
 518:	9c009100 	stflsd	f1, [r0], {-0}
 51c:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
 520:	01000001 	tsteq	r0, r1
 524:	01d45200 	bicseq	r5, r4, r0, lsl #4
 528:	01df0000 	bicseq	r0, pc, r0
 52c:	00010000 	andeq	r0, r1, r0
 530:	00000052 	andeq	r0, r0, r2, asr r0
 534:	00000000 	andeq	r0, r0, r0
 538:	00009c00 	andeq	r9, r0, r0, lsl #24
 53c:	00011800 	andeq	r1, r1, r0, lsl #16
 540:	5d000100 	stfpls	f0, [r0, #-0]
 544:	00000118 	andeq	r0, r0, r8, lsl r1
 548:	0000011c 	andeq	r0, r0, ip, lsl r1
 54c:	1c530001 	mrrcne	0, 0, r0, r3, cr1
 550:	20000001 	andcs	r0, r0, r1
 554:	01000001 	tsteq	r0, r1
 558:	01205100 	teqeq	r0, r0, lsl #2
 55c:	01600000 	cmneq	r0, r0
 560:	00010000 	andeq	r0, r1, r0
 564:	00016053 	andeq	r6, r1, r3, asr r0
 568:	00016800 	andeq	r6, r1, r0, lsl #16
 56c:	5d000100 	stfpls	f0, [r0, #-0]
 570:	00000168 	andeq	r0, r0, r8, ror #2
 574:	0000016c 	andeq	r0, r0, ip, ror #2
 578:	6c5e0001 	mrrcvs	0, 0, r0, lr, cr1
 57c:	88000001 	stmdahi	r0, {r0}
 580:	01000001 	tsteq	r0, r1
 584:	01885300 	orreq	r5, r8, r0, lsl #6
 588:	01900000 	orrseq	r0, r0, r0
 58c:	00040000 	andeq	r0, r4, r0
 590:	9f7fa191 	svcls	0x007fa191
 594:	00000190 	muleq	r0, r0, r1
 598:	00000194 	muleq	r0, r4, r1
 59c:	94530001 	ldrbls	r0, [r3], #-1
 5a0:	9c000001 	stcls	0, cr0, [r0], {1}
 5a4:	01000001 	tsteq	r0, r1
 5a8:	019c5d00 	orrseq	r5, ip, r0, lsl #26
 5ac:	01a00000 	moveq	r0, r0
 5b0:	00010000 	andeq	r0, r1, r0
 5b4:	0001a05e 	andeq	sl, r1, lr, asr r0
 5b8:	0001bc00 	andeq	fp, r1, r0, lsl #24
 5bc:	53000100 	movwpl	r0, #256	; 0x100
 5c0:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
 5c4:	000001d4 	ldrdeq	r0, [r0], -r4
 5c8:	d45d0001 	ldrble	r0, [sp], #-1
 5cc:	df000001 	svcle	0x00000001
 5d0:	01000001 	tsteq	r0, r1
 5d4:	00005300 	andeq	r5, r0, r0, lsl #6
 5d8:	00000000 	andeq	r0, r0, r0
 5dc:	00a00000 	adceq	r0, r0, r0
 5e0:	00ec0000 	rsceq	r0, ip, r0
 5e4:	00010000 	andeq	r0, r1, r0
 5e8:	0000ec5c 	andeq	lr, r0, ip, asr ip
 5ec:	00010000 	andeq	r0, r1, r0
 5f0:	53000100 	movwpl	r0, #256	; 0x100
 5f4:	00000100 	andeq	r0, r0, r0, lsl #2
 5f8:	00000104 	andeq	r0, r0, r4, lsl #2
 5fc:	045c0001 	ldrbeq	r0, [ip], #-1
 600:	08000001 	stmdaeq	r0, {r0}
 604:	01000001 	tsteq	r0, r1
 608:	01085300 	mrseq	r5, (UNDEF: 56)
 60c:	01180000 	tsteq	r8, r0
 610:	00010000 	andeq	r0, r1, r0
 614:	0001185c 	andeq	r1, r1, ip, asr r8
 618:	00011c00 	andeq	r1, r1, r0, lsl #24
 61c:	50000100 	andpl	r0, r0, r0, lsl #2
 620:	0000011c 	andeq	r0, r0, ip, lsl r1
 624:	0000013c 	andeq	r0, r0, ip, lsr r1
 628:	445c0001 	ldrbmi	r0, [ip], #-1
 62c:	58000001 	stmdapl	r0, {r0}
 630:	01000001 	tsteq	r0, r1
 634:	01585000 	cmpeq	r8, r0
 638:	01600000 	cmneq	r0, r0
 63c:	00010000 	andeq	r0, r1, r0
 640:	0001605c 	andeq	r6, r1, ip, asr r0
 644:	00016800 	andeq	r6, r1, r0, lsl #16
 648:	53000100 	movwpl	r0, #256	; 0x100
 64c:	00000168 	andeq	r0, r0, r8, ror #2
 650:	00000178 	andeq	r0, r0, r8, ror r1
 654:	785c0001 	ldmdavc	ip, {r0}^
 658:	80000001 	andhi	r0, r0, r1
 65c:	05000001 	streq	r0, [r0, #-1]
 660:	34007c00 	strcc	r7, [r0], #-3072	; 0xc00
 664:	01809f25 	orreq	r9, r0, r5, lsr #30
 668:	01880000 	orreq	r0, r8, r0
 66c:	00010000 	andeq	r0, r1, r0
 670:	0001885c 	andeq	r8, r1, ip, asr r8
 674:	00019000 	andeq	r9, r1, r0
 678:	53000100 	movwpl	r0, #256	; 0x100
 67c:	00000190 	muleq	r0, r0, r1
 680:	00000194 	muleq	r0, r4, r1
 684:	945c0001 	ldrbls	r0, [ip], #-1
 688:	9c000001 	stcls	0, cr0, [r0], {1}
 68c:	01000001 	tsteq	r0, r1
 690:	019c5300 	orrseq	r5, ip, r0, lsl #6
 694:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
 698:	00010000 	andeq	r0, r1, r0
 69c:	0001ac5c 	andeq	sl, r1, ip, asr ip
 6a0:	0001b400 	andeq	fp, r1, r0, lsl #8
 6a4:	7c000500 	cfstr32vc	mvfx0, [r0], {-0}
 6a8:	9f253100 	svcls	0x00253100
 6ac:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
 6b0:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
 6b4:	bc5c0001 	mrrclt	0, 0, r0, ip, cr1
 6b8:	cc000001 	stcgt	0, cr0, [r0], {1}
 6bc:	01000001 	tsteq	r0, r1
 6c0:	01cc5300 	biceq	r5, ip, r0, lsl #6
 6c4:	01cf0000 	biceq	r0, pc, r0
 6c8:	00010000 	andeq	r0, r1, r0
 6cc:	0001cf5c 	andeq	ip, r1, ip, asr pc
 6d0:	0001d400 	andeq	sp, r1, r0, lsl #8
 6d4:	f3000400 	vshl.u8	d0, d0, d0
 6d8:	d49f5301 	ldrle	r5, [pc], #769	; 6e0 <_start-0x7920>
 6dc:	df000001 	svcle	0x00000001
 6e0:	01000001 	tsteq	r0, r1
 6e4:	00005c00 	andeq	r5, r0, r0, lsl #24
 6e8:	00000000 	andeq	r0, r0, r0
 6ec:	00ec0000 	rsceq	r0, ip, r0
 6f0:	00fc0000 	rscseq	r0, ip, r0
 6f4:	00020000 	andeq	r0, r2, r0
 6f8:	00fc9f30 	rscseq	r9, ip, r0, lsr pc
 6fc:	01040000 	mrseq	r0, (UNDEF: 4)
 700:	00020000 	andeq	r0, r2, r0
 704:	01049f31 	tsteq	r4, r1, lsr pc
 708:	01080000 	mrseq	r0, (UNDEF: 8)
 70c:	00020000 	andeq	r0, r2, r0
 710:	00009f30 	andeq	r9, r0, r0, lsr pc
 714:	00000000 	andeq	r0, r0, r0
 718:	02180000 	andseq	r0, r8, #0
 71c:	02280000 	eoreq	r0, r8, #0
 720:	00010000 	andeq	r0, r1, r0
 724:	00022850 	andeq	r2, r2, r0, asr r8
 728:	00023c00 	andeq	r3, r2, r0, lsl #24
 72c:	f3000400 	vshl.u8	d0, d0, d0
 730:	3c9f5001 	ldccc	0, cr5, [pc], {1}
 734:	68000002 	stmdavs	r0, {r1}
 738:	01000002 	tsteq	r0, r2
 73c:	00005000 	andeq	r5, r0, r0
 740:	00000000 	andeq	r0, r0, r0
 744:	02180000 	andseq	r0, r8, #0
 748:	022c0000 	eoreq	r0, ip, #0
 74c:	00010000 	andeq	r0, r1, r0
 750:	00022c51 	andeq	r2, r2, r1, asr ip
 754:	00023c00 	andeq	r3, r2, r0, lsl #24
 758:	f3000400 	vshl.u8	d0, d0, d0
 75c:	3c9f5101 	ldfccs	f5, [pc], {1}
 760:	68000002 	stmdavs	r0, {r1}
 764:	01000002 	tsteq	r0, r2
 768:	00005100 	andeq	r5, r0, r0, lsl #2
 76c:	00000000 	andeq	r0, r0, r0
 770:	02680000 	rsbeq	r0, r8, #0
 774:	02900000 	addseq	r0, r0, #0
 778:	00010000 	andeq	r0, r1, r0
 77c:	00029050 	andeq	r9, r2, r0, asr r0
 780:	0004dc00 	andeq	sp, r4, r0, lsl #24
 784:	5b000100 	blpl	b8c <_start-0x7474>
 788:	000004dc 	ldrdeq	r0, [r0], -ip
 78c:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 790:	01f30004 	mvnseq	r0, r4
 794:	00009f50 	andeq	r9, r0, r0, asr pc
 798:	00000000 	andeq	r0, r0, r0
 79c:	02680000 	rsbeq	r0, r8, #0
 7a0:	027c0000 	rsbseq	r0, ip, #0
 7a4:	00010000 	andeq	r0, r1, r0
 7a8:	00027c51 	andeq	r7, r2, r1, asr ip
 7ac:	00029000 	andeq	r9, r2, r0
 7b0:	71000300 	mrsvc	r0, LR_irq
 7b4:	02909f01 	addseq	r9, r0, #1, 30
 7b8:	04f00000 	ldrbteq	r0, [r0], #0
 7bc:	00040000 	andeq	r0, r4, r0
 7c0:	9f5101f3 	svcls	0x005101f3
	...
 7cc:	00000268 	andeq	r0, r0, r8, ror #4
 7d0:	00000298 	muleq	r0, r8, r2
 7d4:	98520001 	ldmdals	r2, {r0}^
 7d8:	c0000002 	andgt	r0, r0, r2
 7dc:	01000002 	tsteq	r0, r2
 7e0:	02c05200 	sbceq	r5, r0, #0, 4
 7e4:	048c0000 	streq	r0, [ip], #0
 7e8:	00010000 	andeq	r0, r1, r0
 7ec:	00048c56 	andeq	r8, r4, r6, asr ip
 7f0:	0004f000 	andeq	pc, r4, r0
 7f4:	52000100 	andpl	r0, r0, #0, 2
	...
 800:	00000268 	andeq	r0, r0, r8, ror #4
 804:	00000284 	andeq	r0, r0, r4, lsl #5
 808:	00530001 	subseq	r0, r3, r1
 80c:	00000000 	andeq	r0, r0, r0
 810:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
 814:	90000002 	andls	r0, r0, r2
 818:	01000002 	tsteq	r0, r2
 81c:	02905000 	addseq	r5, r0, #0
 820:	02940000 	addseq	r0, r4, #0
 824:	00010000 	andeq	r0, r1, r0
 828:	00029454 	andeq	r9, r2, r4, asr r4
 82c:	0002a000 	andeq	sl, r2, r0
 830:	74000300 	strvc	r0, [r0], #-768	; 0x300
 834:	02a09f01 	adceq	r9, r0, #1, 30
 838:	02ac0000 	adceq	r0, ip, #0
 83c:	00010000 	andeq	r0, r1, r0
 840:	0002ac54 	andeq	sl, r2, r4, asr ip
 844:	0002b800 	andeq	fp, r2, r0, lsl #16
 848:	74000300 	strvc	r0, [r0], #-768	; 0x300
 84c:	02b89f01 	adcseq	r9, r8, #1, 30
 850:	04900000 	ldreq	r0, [r0], #0
 854:	00010000 	andeq	r0, r1, r0
 858:	00049054 	andeq	r9, r4, r4, asr r0
 85c:	00049c00 	andeq	r9, r4, r0, lsl #24
 860:	74000300 	strvc	r0, [r0], #-768	; 0x300
 864:	049c9f01 	ldreq	r9, [ip], #3841	; 0xf01
 868:	04c80000 	strbeq	r0, [r8], #0
 86c:	00010000 	andeq	r0, r1, r0
 870:	0004c854 	andeq	ip, r4, r4, asr r8
 874:	0004d400 	andeq	sp, r4, r0, lsl #8
 878:	50000100 	andpl	r0, r0, r0, lsl #2
 87c:	000004d4 	ldrdeq	r0, [r0], -r4
 880:	000004dc 	ldrdeq	r0, [r0], -ip
 884:	01740003 	cmneq	r4, r3
 888:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 88c:	00000000 	andeq	r0, r0, r0
 890:	00028000 	andeq	r8, r2, r0
 894:	0004dc00 	andeq	sp, r4, r0, lsl #24
 898:	58000100 	stmdapl	r0, {r8}
 89c:	000004dc 	ldrdeq	r0, [r0], -ip
 8a0:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 8a4:	01f3000a 	mvnseq	r0, sl
 8a8:	5001f351 	andpl	pc, r1, r1, asr r3	; <UNPREDICTABLE>
 8ac:	9f1c3122 	svcls	0x001c3122
	...
 8b8:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 8bc:	000003c0 	andeq	r0, r0, r0, asr #7
 8c0:	e4500001 	ldrb	r0, [r0], #-1
 8c4:	e8000003 	stmda	r0, {r0, r1}
 8c8:	01000003 	tsteq	r0, r3
 8cc:	040c5000 	streq	r5, [ip], #-0
 8d0:	04100000 	ldreq	r0, [r0], #-0
 8d4:	00010000 	andeq	r0, r1, r0
 8d8:	00043450 	andeq	r3, r4, r0, asr r4
 8dc:	00043800 	andeq	r3, r4, r0, lsl #16
 8e0:	50000100 	andpl	r0, r0, r0, lsl #2
 8e4:	00000440 	andeq	r0, r0, r0, asr #8
 8e8:	00000444 	andeq	r0, r0, r4, asr #8
 8ec:	68500001 	ldmdavs	r0, {r0}^
 8f0:	6c000004 	stcvs	0, cr0, [r0], {4}
 8f4:	01000004 	tsteq	r0, r4
 8f8:	04885000 	streq	r5, [r8], #0
 8fc:	04b00000 	ldrteq	r0, [r0], #0
 900:	00010000 	andeq	r0, r1, r0
 904:	00000050 	andeq	r0, r0, r0, asr r0
 908:	00000000 	andeq	r0, r0, r0
 90c:	0002c000 	andeq	ip, r2, r0
 910:	0002c800 	andeq	ip, r2, r0, lsl #16
 914:	30000200 	andcc	r0, r0, r0, lsl #4
 918:	0002c89f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
 91c:	0002cc00 	andeq	ip, r2, r0, lsl #24
 920:	57000100 	strpl	r0, [r0, -r0, lsl #2]
 924:	000002d8 	ldrdeq	r0, [r0], -r8
 928:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
 92c:	00570001 	subseq	r0, r7, r1
 930:	00000000 	andeq	r0, r0, r0
 934:	14000000 	strne	r0, [r0], #-0
 938:	1c000000 	stcne	0, cr0, [r0], {-0}
 93c:	03000000 	movweq	r0, #0
 940:	9f047300 	svcls	0x00047300
 944:	0000001c 	andeq	r0, r0, ip, lsl r0
 948:	00000027 	andeq	r0, r0, r7, lsr #32
 94c:	00530001 	subseq	r0, r3, r1
 950:	00000000 	andeq	r0, r0, r0
 954:	24000000 	strcs	r0, [r0], #-0
 958:	28000089 	stmdacs	r0, {r0, r3, r7}
 95c:	02000089 	andeq	r0, r0, #137	; 0x89
 960:	289f3000 	ldmcs	pc, {ip, sp}	; <UNPREDICTABLE>
 964:	2c000089 	stccs	0, cr0, [r0], {137}	; 0x89
 968:	01000089 	smlabbeq	r0, r9, r0, r0
 96c:	00005000 	andeq	r5, r0, r0
 970:	00000000 	andeq	r0, r0, r0
 974:	893c0000 	ldmdbhi	ip!, {}	; <UNPREDICTABLE>
 978:	89400000 	stmdbhi	r0, {}^	; <UNPREDICTABLE>
 97c:	00020000 	andeq	r0, r2, r0
 980:	89409f30 	stmdbhi	r0, {r4, r5, r8, r9, sl, fp, ip, pc}^
 984:	89440000 	stmdbhi	r4, {}^	; <UNPREDICTABLE>
 988:	00010000 	andeq	r0, r1, r0
 98c:	00894853 	addeq	r4, r9, r3, asr r8
 990:	00895000 	addeq	r5, r9, r0
 994:	53000100 	movwpl	r0, #256	; 0x100
	...
 9a4:	00000004 	andeq	r0, r0, r4
 9a8:	04500001 	ldrbeq	r0, [r0], #-1
 9ac:	0c000000 	stceq	0, cr0, [r0], {-0}
 9b0:	01000000 	mrseq	r0, (UNDEF: 0)
 9b4:	000c5300 	andeq	r5, ip, r0, lsl #6
 9b8:	00100000 	andseq	r0, r0, r0
 9bc:	00010000 	andeq	r0, r1, r0
 9c0:	00001050 	andeq	r1, r0, r0, asr r0
 9c4:	00001c00 	andeq	r1, r0, r0, lsl #24
 9c8:	53000100 	movwpl	r0, #256	; 0x100
	...
 9d4:	00000030 	andeq	r0, r0, r0, lsr r0
 9d8:	0000003b 	andeq	r0, r0, fp, lsr r0
 9dc:	3b500001 	blcc	14009e8 <__bss_end__+0x13f72f0>
 9e0:	54000000 	strpl	r0, [r0], #-0
 9e4:	01000000 	mrseq	r0, (UNDEF: 0)
 9e8:	00005500 	andeq	r5, r0, r0, lsl #10
 9ec:	00000000 	andeq	r0, r0, r0
 9f0:	00440000 	subeq	r0, r4, r0
 9f4:	00480000 	subeq	r0, r8, r0
 9f8:	00010000 	andeq	r0, r1, r0
 9fc:	00000050 	andeq	r0, r0, r0, asr r0
 a00:	00000000 	andeq	r0, r0, r0
 a04:	00005400 	andeq	r5, r0, r0, lsl #8
 a08:	00006000 	andeq	r6, r0, r0
 a0c:	50000100 	andpl	r0, r0, r0, lsl #2
 a10:	00000060 	andeq	r0, r0, r0, rrx
 a14:	00000068 	andeq	r0, r0, r8, rrx
 a18:	01f30004 	mvnseq	r0, r4
 a1c:	00009f50 	andeq	r9, r0, r0, asr pc
 a20:	00000000 	andeq	r0, r0, r0
 a24:	00680000 	rsbeq	r0, r8, r0
 a28:	00740000 	rsbseq	r0, r4, r0
 a2c:	00010000 	andeq	r0, r1, r0
 a30:	00007450 	andeq	r7, r0, r0, asr r4
 a34:	00007c00 	andeq	r7, r0, r0, lsl #24
 a38:	f3000400 	vshl.u8	d0, d0, d0
 a3c:	009f5001 	addseq	r5, pc, r1
	...
 a48:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 a4c:	01000000 	mrseq	r0, (UNDEF: 0)
 a50:	00185000 	andseq	r5, r8, r0
 a54:	002c0000 	eoreq	r0, ip, r0
 a58:	00040000 	andeq	r0, r4, r0
 a5c:	9f5001f3 	svcls	0x005001f3
 a60:	0000002c 	andeq	r0, r0, ip, lsr #32
 a64:	00000040 	andeq	r0, r0, r0, asr #32
 a68:	40500001 	subsmi	r0, r0, r1
 a6c:	64000000 	strvs	r0, [r0], #-0
 a70:	04000000 	streq	r0, [r0], #-0
 a74:	5001f300 	andpl	pc, r1, r0, lsl #6
 a78:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 a7c:	00000000 	andeq	r0, r0, r0
 a80:	00003c00 	andeq	r3, r0, r0, lsl #24
 a84:	00004b00 	andeq	r4, r0, r0, lsl #22
 a88:	52000100 	andpl	r0, r0, #0, 2
 a8c:	0000004b 	andeq	r0, r0, fp, asr #32
 a90:	00000064 	andeq	r0, r0, r4, rrx
 a94:	01f30009 	mvnseq	r0, r9
 a98:	09032350 	stmdbeq	r3, {r4, r6, r8, r9, sp}
 a9c:	009f1afc 			; <UNDEFINED> instruction: 0x009f1afc
 aa0:	00000000 	andeq	r0, r0, r0
 aa4:	64000000 	strvs	r0, [r0], #-0
 aa8:	7c000000 	stcvc	0, cr0, [r0], {-0}
 aac:	01000000 	mrseq	r0, (UNDEF: 0)
 ab0:	007c5000 	rsbseq	r5, ip, r0
 ab4:	00900000 	addseq	r0, r0, r0
 ab8:	00040000 	andeq	r0, r4, r0
 abc:	9f5001f3 	svcls	0x005001f3
 ac0:	00000090 	muleq	r0, r0, r0
 ac4:	0000009b 	muleq	r0, fp, r0
 ac8:	9b500001 	blls	1400ad4 <__bss_end__+0x13f73dc>
 acc:	a0000000 	andge	r0, r0, r0
 ad0:	04000000 	streq	r0, [r0], #-0
 ad4:	5001f300 	andpl	pc, r1, r0, lsl #6
 ad8:	0000a09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 adc:	0000ac00 	andeq	sl, r0, r0, lsl #24
 ae0:	50000100 	andpl	r0, r0, r0, lsl #2
 ae4:	000000ac 	andeq	r0, r0, ip, lsr #1
 ae8:	000000c0 	andeq	r0, r0, r0, asr #1
 aec:	01f30004 	mvnseq	r0, r4
 af0:	00c09f50 	sbceq	r9, r0, r0, asr pc
 af4:	00df0000 	sbcseq	r0, pc, r0
 af8:	00010000 	andeq	r0, r1, r0
 afc:	0000df50 	andeq	sp, r0, r0, asr pc
 b00:	0000f800 	andeq	pc, r0, r0, lsl #16
 b04:	f3000400 	vshl.u8	d0, d0, d0
 b08:	009f5001 	addseq	r5, pc, r1
 b0c:	00000000 	andeq	r0, r0, r0
 b10:	64000000 	strvs	r0, [r0], #-0
 b14:	80000000 	andhi	r0, r0, r0
 b18:	01000000 	mrseq	r0, (UNDEF: 0)
 b1c:	00805100 	addeq	r5, r0, r0, lsl #2
 b20:	00900000 	addseq	r0, r0, r0
 b24:	00040000 	andeq	r0, r4, r0
 b28:	9f5101f3 	svcls	0x005101f3
 b2c:	00000090 	muleq	r0, r0, r0
 b30:	0000009b 	muleq	r0, fp, r0
 b34:	9b510001 	blls	1440b40 <__bss_end__+0x1437448>
 b38:	a0000000 	andge	r0, r0, r0
 b3c:	04000000 	streq	r0, [r0], #-0
 b40:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
 b44:	0000a09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 b48:	0000b000 	andeq	fp, r0, r0
 b4c:	51000100 	mrspl	r0, (UNDEF: 16)
 b50:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 b54:	000000c0 	andeq	r0, r0, r0, asr #1
 b58:	01f30004 	mvnseq	r0, r4
 b5c:	00c09f51 	sbceq	r9, r0, r1, asr pc
 b60:	00d40000 	sbcseq	r0, r4, r0
 b64:	00010000 	andeq	r0, r1, r0
 b68:	0000d451 	andeq	sp, r0, r1, asr r4
 b6c:	0000d800 	andeq	sp, r0, r0, lsl #16
 b70:	71000400 	tstvc	r0, r0, lsl #8
 b74:	d89f1f00 	ldmle	pc, {r8, r9, sl, fp, ip}	; <UNPREDICTABLE>
 b78:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
 b7c:	04000000 	streq	r0, [r0], #-0
 b80:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
 b84:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 b88:	00000000 	andeq	r0, r0, r0
 b8c:	0000c800 	andeq	ip, r0, r0, lsl #16
 b90:	0000cc00 	andeq	ip, r0, r0, lsl #24
 b94:	52000100 	andpl	r0, r0, #0, 2
 b98:	000000cc 	andeq	r0, r0, ip, asr #1
 b9c:	000000d8 	ldrdeq	r0, [r0], -r8
 ba0:	f4030005 	vst4.8	{d0-d3}, [r3], r5
 ba4:	d8000096 	stmdale	r0, {r1, r2, r4, r7}
 ba8:	df000000 	svcle	0x00000000
 bac:	01000000 	mrseq	r0, (UNDEF: 0)
 bb0:	00005100 	andeq	r5, r0, r0, lsl #2
	...
 bbc:	00040000 	andeq	r0, r4, r0
 bc0:	00010000 	andeq	r0, r1, r0
 bc4:	00000452 	andeq	r0, r0, r2, asr r4
 bc8:	00002000 	andeq	r2, r0, r0
 bcc:	f3000400 	vshl.u8	d0, d0, d0
 bd0:	009f5201 	addseq	r5, pc, r1, lsl #4
	...
 bdc:	0c000000 	stceq	0, cr0, [r0], {-0}
 be0:	01000000 	mrseq	r0, (UNDEF: 0)
 be4:	000c5000 	andeq	r5, ip, r0
 be8:	00140000 	andseq	r0, r4, r0
 bec:	00030000 	andeq	r0, r3, r0
 bf0:	149f0173 	ldrne	r0, [pc], #371	; bf8 <_start-0x7408>
 bf4:	20000000 	andcs	r0, r0, r0
 bf8:	01000000 	mrseq	r0, (UNDEF: 0)
 bfc:	00005300 	andeq	r5, r0, r0, lsl #6
	...
 c08:	000b0000 	andeq	r0, fp, r0
 c0c:	00010000 	andeq	r0, r1, r0
 c10:	00000b50 	andeq	r0, r0, r0, asr fp
 c14:	00001400 	andeq	r1, r0, r0, lsl #8
 c18:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	00008010 	andeq	r8, r0, r0, lsl r0
  14:	00000150 	andeq	r0, r0, r0, asr r1
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	04440002 	strbeq	r0, [r4], #-2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	00008160 	andeq	r8, r0, r0, ror #2
  34:	00000208 	andeq	r0, r0, r8, lsl #4
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	0b420002 	bleq	1080054 <__bss_end__+0x107695c>
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	00008374 	andeq	r8, r0, r4, ror r3
  54:	00000058 	andeq	r0, r0, r8, asr r0
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	0cd70002 	ldcleq	0, cr0, [r7], {2}
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	000083cc 	andeq	r8, r0, ip, asr #7
  74:	00000034 	andeq	r0, r0, r4, lsr r0
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	0dc90002 	stcleq	0, cr0, [r9, #8]
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	00008400 	andeq	r8, r0, r0, lsl #8
  94:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	14210002 	strtne	r0, [r1], #-2
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	000088f0 	strdeq	r8, [r0], -r0
  b4:	00000034 	andeq	r0, r0, r4, lsr r0
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	15300002 	ldrne	r0, [r0, #-2]!
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	00008924 	andeq	r8, r0, r4, lsr #18
  d4:	00000074 	andeq	r0, r0, r4, ror r0
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	16e10002 	strbtne	r0, [r1], r2
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	00008998 	muleq	r0, r8, r9
  f4:	0000007c 	andeq	r0, r0, ip, ror r0
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	188f0002 	stmne	pc, {r1}	; <UNPREDICTABLE>
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	00008cec 	andeq	r8, r0, ip, ror #25
 114:	00000178 	andeq	r0, r0, r8, ror r1
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	1bdb0002 	blne	ff6c0134 <__bss_end__+0xff6b6a3c>
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	00008e64 	andeq	r8, r0, r4, ror #28
 134:	00000020 	andeq	r0, r0, r0, lsr #32
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	1cba0002 	ldcne	0, cr0, [sl], #8
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	00008e84 	andeq	r8, r0, r4, lsl #29
 154:	00000014 	andeq	r0, r0, r4, lsl r0
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000186 	andeq	r0, r0, r6, lsl #3
   4:	013c0002 	teqeq	ip, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2f010000 	svccs	0x00010000
  1c:	2f727375 	svccs	0x00727375
  20:	61636f6c 	cmnvs	r3, ip, ror #30
  24:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
  28:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
  2c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
  30:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
  34:	61652d65 	cmnvs	r5, r5, ror #26
  38:	342f6962 	strtcc	r6, [pc], #-2402	; 40 <_start-0x7fc0>
  3c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
  40:	3173632d 	cmncc	r3, sp, lsr #6
  44:	2f653037 	svccs	0x00653037
  48:	2f62696c 	svccs	0x0062696c
  4c:	2f636367 	svccs	0x00636367
  50:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
  54:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
  58:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
  5c:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
  60:	2f332e38 	svccs	0x00332e38
  64:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  68:	00656475 	rsbeq	r6, r5, r5, ror r4
  6c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
  70:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
  74:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
  78:	2f6e756a 	svccs	0x006e756a
  7c:	6b736544 	blvs	1cd9594 <__bss_end__+0x1ccfe9c>
  80:	2f706f74 	svccs	0x00706f74
  84:	6f686373 	svcvs	0x00686373
  88:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
  8c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
  90:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
  94:	53432f30 	movtpl	r2, #16176	; 0x3f30
  98:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
  9c:	3173632f 	cmncc	r3, pc, lsr #6
  a0:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
  a4:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
  a8:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
  ac:	00697062 	rsbeq	r7, r9, r2, rrx
  b0:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
  b4:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
  b8:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
  bc:	2f6e756a 	svccs	0x006e756a
  c0:	6b736544 	blvs	1cd95d8 <__bss_end__+0x1ccfee0>
  c4:	2f706f74 	svccs	0x00706f74
  c8:	6f686373 	svcvs	0x00686373
  cc:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
  d0:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
  d4:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
  d8:	53432f30 	movtpl	r2, #16176	; 0x3f30
  dc:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
  e0:	3173632f 	cmncc	r3, pc, lsr #6
  e4:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
  e8:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
  ec:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
  f0:	2f697062 	svccs	0x00697062
  f4:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
  f8:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
  fc:	00006372 	andeq	r6, r0, r2, ror r3
 100:	65742d33 	ldrbvs	r2, [r4, #-3379]!	; 0xd33
 104:	792d7473 	pushvc	{r0, r1, r4, r5, r6, sl, ip, sp, lr}
 108:	646c6569 	strbtvs	r6, [ip], #-1385	; 0x569
 10c:	0000632e 	andeq	r6, r0, lr, lsr #6
 110:	70720000 	rsbsvc	r0, r2, r0
 114:	68742d69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, sl, fp, sp}^
 118:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 11c:	0000682e 	andeq	r6, r0, lr, lsr #16
 120:	74730000 	ldrbtvc	r0, [r3], #-0
 124:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
 128:	6363672d 	cmnvs	r3, #11796480	; 0xb40000
 12c:	0100682e 	tsteq	r0, lr, lsr #16
 130:	70720000 	rsbsvc	r0, r2, r0
 134:	00682e69 	rsbeq	r2, r8, r9, ror #28
 138:	67000002 	strvs	r0, [r0, -r2]
 13c:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
 140:	00030068 	andeq	r0, r3, r8, rrx
 144:	05000000 	streq	r0, [r0, #-0]
 148:	00801002 	addeq	r1, r0, r2
 14c:	010e0300 	mrseq	r0, ELR_hyp
 150:	04020067 	streq	r0, [r2], #-103	; 0x67
 154:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 158:	2f844cd7 	svccs	0x00844cd7
 15c:	4b4dbe2f 	blmi	136fa20 <__bss_end__+0x1366328>
 160:	01040200 	mrseq	r0, R12_usr
 164:	be068206 	cdplt	2, 0, cr8, cr6, cr6, {0}
 168:	01040200 	mrseq	r0, R12_usr
 16c:	04020030 	streq	r0, [r2], #-48	; 0x30
 170:	02004b01 	andeq	r4, r0, #1024	; 0x400
 174:	004c0104 	subeq	r0, ip, r4, lsl #2
 178:	4b010402 	blmi	41188 <__bss_end__+0x37a90>
 17c:	302f4bbe 	strhtcc	r4, [pc], -lr
 180:	6783689f 			; <UNDEFINED> instruction: 0x6783689f
 184:	0014022f 	andseq	r0, r4, pc, lsr #4
 188:	01410101 	cmpeq	r1, r1, lsl #2
 18c:	00020000 	andeq	r0, r2, r0
 190:	000000e8 	andeq	r0, r0, r8, ror #1
 194:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 198:	0101000d 	tsteq	r1, sp
 19c:	00000101 	andeq	r0, r0, r1, lsl #2
 1a0:	00000100 	andeq	r0, r0, r0, lsl #2
 1a4:	73752f01 	cmnvc	r5, #1, 30
 1a8:	6f6c2f72 	svcvs	0x006c2f72
 1ac:	2f6c6163 	svccs	0x006c6163
 1b0:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
 1b4:	612f7261 	teqvs	pc, r1, ror #4
 1b8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 1bc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 1c0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 1c4:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 1c8:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
 1cc:	30373173 	eorscc	r3, r7, r3, ror r1
 1d0:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 1d4:	63672f62 	cmnvs	r7, #392	; 0x188
 1d8:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
 1dc:	6f6e2d6d 	svcvs	0x006e2d6d
 1e0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 1e4:	2f696261 	svccs	0x00696261
 1e8:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 1ec:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
 1f0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
 1f4:	552f0065 	strpl	r0, [pc, #-101]!	; 197 <_start-0x7e69>
 1f8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 1fc:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 200:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 204:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 208:	6f746b73 	svcvs	0x00746b73
 20c:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 210:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 78 <_start-0x7f88>
 214:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 218:	31726574 	cmncc	r2, r4, ror r5
 21c:	2f303239 	svccs	0x00303239
 220:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 224:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 228:	30343173 	eorscc	r3, r4, r3, ror r1
 22c:	30322d65 	eorscc	r2, r2, r5, ror #26
 230:	2f6e6977 	svccs	0x006e6977
 234:	7062696c 	rsbvc	r6, r2, ip, ror #18
 238:	51000069 	tstpl	r0, r9, rrx
 23c:	0000682e 	andeq	r6, r0, lr, lsr #16
 240:	70720000 	rsbsvc	r0, r2, r0
 244:	68742d69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, sl, fp, sp}^
 248:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 24c:	0000632e 	andeq	r6, r0, lr, lsr #6
 250:	70720000 	rsbsvc	r0, r2, r0
 254:	68742d69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, sl, fp, sp}^
 258:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 25c:	0000682e 	andeq	r6, r0, lr, lsr #16
 260:	74730000 	ldrbtvc	r0, [r3], #-0
 264:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
 268:	6363672d 	cmnvs	r3, #11796480	; 0xb40000
 26c:	0100682e 	tsteq	r0, lr, lsr #16
 270:	70720000 	rsbsvc	r0, r2, r0
 274:	00682e69 	rsbeq	r2, r8, r9, ror #28
 278:	00000002 	andeq	r0, r0, r2
 27c:	60020500 	andvs	r0, r2, r0, lsl #10
 280:	03000081 	movweq	r0, #129	; 0x81
 284:	8501010e 	strhi	r0, [r1, #-270]	; 0x10e
 288:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 28c:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 290:	004b30bb 	strheq	r3, [fp], #-11
 294:	06010402 	streq	r0, [r1], -r2, lsl #8
 298:	4bbd0666 	blmi	fef41c38 <__bss_end__+0xfef38540>
 29c:	0204304b 	andeq	r3, r4, #75	; 0x4b
 2a0:	309e7703 	addscc	r7, lr, r3, lsl #14
 2a4:	03684c4b 	cmneq	r8, #19200	; 0x4b00
 2a8:	03146674 	tsteq	r4, #116, 12	; 0x7400000
 2ac:	312f8211 	teqcc	pc, r1, lsl r2	; <UNPREDICTABLE>
 2b0:	0a032708 	beq	c9ed8 <__bss_end__+0xc07e0>
 2b4:	3424082e 	strtcc	r0, [r4], #-2094	; 0x82e
 2b8:	89352808 	ldmdbhi	r5!, {r3, fp, sp}
 2bc:	080b0367 	stmdaeq	fp, {r0, r1, r2, r5, r6, r8, r9}
 2c0:	27082f58 	smlsdcs	r8, r8, pc, r2	; <UNPREDICTABLE>
 2c4:	080a032f 	stmdaeq	sl, {r0, r1, r2, r3, r5, r8, r9}
 2c8:	12022f20 	andne	r2, r2, #32, 30	; 0x80
 2cc:	02010100 	andeq	r0, r1, #0, 2
 2d0:	02000001 	andeq	r0, r0, #1
 2d4:	0000eb00 	andeq	lr, r0, r0, lsl #22
 2d8:	fb010200 	blx	40ae2 <__bss_end__+0x373ea>
 2dc:	01000d0e 	tsteq	r0, lr, lsl #26
 2e0:	00010101 	andeq	r0, r1, r1, lsl #2
 2e4:	00010000 	andeq	r0, r1, r0
 2e8:	696c0100 	stmdbvs	ip!, {r8}^
 2ec:	2f006362 	svccs	0x00006362
 2f0:	2f727375 	svccs	0x00727375
 2f4:	61636f6c 	cmnvs	r3, ip, ror #30
 2f8:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
 2fc:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
 300:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 304:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 308:	61652d65 	cmnvs	r5, r5, ror #26
 30c:	342f6962 	strtcc	r6, [pc], #-2402	; 314 <_start-0x7cec>
 310:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 314:	3173632d 	cmncc	r3, sp, lsr #6
 318:	2f653037 	svccs	0x00653037
 31c:	2f62696c 	svccs	0x0062696c
 320:	2f636367 	svccs	0x00636367
 324:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 328:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 32c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 330:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 334:	2f332e38 	svccs	0x00332e38
 338:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 33c:	00656475 	rsbeq	r6, r5, r5, ror r4
 340:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 344:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 348:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 34c:	2f6e756a 	svccs	0x006e756a
 350:	6b736544 	blvs	1cd9868 <__bss_end__+0x1cd0170>
 354:	2f706f74 	svccs	0x00706f74
 358:	6f686373 	svcvs	0x00686373
 35c:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 360:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 364:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 368:	53432f30 	movtpl	r2, #16176	; 0x3f30
 36c:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 370:	3173632f 	cmncc	r3, pc, lsr #6
 374:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 378:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 37c:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 380:	00697062 	rsbeq	r7, r9, r2, rrx
 384:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
 388:	2e6b746e 	cdpcs	4, 6, cr7, cr11, cr14, {3}
 38c:	00010063 	andeq	r0, r1, r3, rrx
 390:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
 394:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
 398:	00020068 	andeq	r0, r2, r8, rrx
 39c:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xc00
 3a0:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
 3a4:	003e6e69 	eorseq	r6, lr, r9, ror #28
 3a8:	72000000 	andvc	r0, r0, #0
 3ac:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 3b0:	00000300 	andeq	r0, r0, r0, lsl #6
 3b4:	702d6176 	eorvc	r6, sp, r6, ror r1
 3b8:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 3bc:	00682e6b 	rsbeq	r2, r8, fp, ror #28
 3c0:	00000001 	andeq	r0, r0, r1
 3c4:	74020500 	strvc	r0, [r2], #-1280	; 0x500
 3c8:	17000083 	strne	r0, [r0, -r3, lsl #1]
 3cc:	89bf4b6b 	ldmibhi	pc!, {r0, r1, r3, r5, r6, r8, r9, fp, lr}	; <UNPREDICTABLE>
 3d0:	01000e02 	tsteq	r0, r2, lsl #28
 3d4:	00009601 	andeq	r9, r0, r1, lsl #12
 3d8:	6f000200 	svcvs	0x00000200
 3dc:	02000000 	andeq	r0, r0, #0
 3e0:	0d0efb01 	vstreq	d15, [lr, #-4]
 3e4:	01010100 	mrseq	r0, (UNDEF: 17)
 3e8:	00000001 	andeq	r0, r0, r1
 3ec:	01000001 	tsteq	r0, r1
 3f0:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 3f4:	73552f00 	cmpvc	r5, #0, 30
 3f8:	2f737265 	svccs	0x00737265
 3fc:	61697262 	cmnvs	r9, r2, ror #4
 400:	6e756a6e 	vsubvs.f32	s13, s10, s29
 404:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 408:	706f746b 	rsbvc	r7, pc, fp, ror #8
 40c:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 410:	2f6c6f6f 	svccs	0x006c6f6f
 414:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 418:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 41c:	432f3032 	teqmi	pc, #50	; 0x32
 420:	30343153 	eorscc	r3, r4, r3, asr r1
 424:	73632f45 	cmnvc	r3, #276	; 0x114
 428:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 42c:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 430:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 294 <_start-0x7d6c>
 434:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 438:	75700000 	ldrbvc	r0, [r0, #-0]!
 43c:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
 440:	00000100 	andeq	r0, r0, r0, lsl #2
 444:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 448:	00020068 	andeq	r0, r2, r8, rrx
 44c:	05000000 	streq	r0, [r0, #-0]
 450:	0083cc02 	addeq	ip, r3, r2, lsl #24
 454:	2d4c1500 	cfstr64cs	mvdx1, [ip, #-0]
 458:	02040200 	andeq	r0, r4, #0, 4
 45c:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 460:	02004902 	andeq	r4, r0, #32768	; 0x8000
 464:	2e060104 	adfcss	f0, f6, f4
 468:	06026b06 	streq	r6, [r2], -r6, lsl #22
 46c:	dc010100 	stfles	f0, [r1], {-0}
 470:	02000001 	andeq	r0, r0, #1
 474:	0000df00 	andeq	sp, r0, r0, lsl #30
 478:	fb010200 	blx	40c82 <__bss_end__+0x3758a>
 47c:	01000d0e 	tsteq	r0, lr, lsl #26
 480:	00010101 	andeq	r0, r1, r1, lsl #2
 484:	00010000 	andeq	r0, r1, r0
 488:	696c0100 	stmdbvs	ip!, {r8}^
 48c:	2f006362 	svccs	0x00006362
 490:	2f727375 	svccs	0x00727375
 494:	61636f6c 	cmnvs	r3, ip, ror #30
 498:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
 49c:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
 4a0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 4a4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 4a8:	61652d65 	cmnvs	r5, r5, ror #26
 4ac:	342f6962 	strtcc	r6, [pc], #-2402	; 4b4 <_start-0x7b4c>
 4b0:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 4b4:	3173632d 	cmncc	r3, sp, lsr #6
 4b8:	2f653037 	svccs	0x00653037
 4bc:	2f62696c 	svccs	0x0062696c
 4c0:	2f636367 	svccs	0x00636367
 4c4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 4c8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 4cc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 4d0:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 4d4:	2f332e38 	svccs	0x00332e38
 4d8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 4dc:	00656475 	rsbeq	r6, r5, r5, ror r4
 4e0:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 4e4:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 4e8:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 4ec:	2f6e756a 	svccs	0x006e756a
 4f0:	6b736544 	blvs	1cd9a08 <__bss_end__+0x1cd0310>
 4f4:	2f706f74 	svccs	0x00706f74
 4f8:	6f686373 	svcvs	0x00686373
 4fc:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 500:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 504:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 508:	53432f30 	movtpl	r2, #16176	; 0x3f30
 50c:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 510:	3173632f 	cmncc	r3, pc, lsr #6
 514:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 518:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 51c:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 520:	00697062 	rsbeq	r7, r9, r2, rrx
 524:	2d617600 	stclcs	6, cr7, [r1, #-0]
 528:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 52c:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
 530:	00000100 	andeq	r0, r0, r0, lsl #2
 534:	61647473 	smcvs	18243	; 0x4743
 538:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
 53c:	00000200 	andeq	r0, r0, r0, lsl #4
 540:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 544:	00030068 	andeq	r0, r3, r8, rrx
 548:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xc00
 54c:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
 550:	003e6e69 	eorseq	r6, lr, r9, ror #28
 554:	00000000 	andeq	r0, r0, r0
 558:	00020500 	andeq	r0, r2, r0, lsl #10
 55c:	03000084 	movweq	r0, #132	; 0x84
 560:	a5010126 	strge	r0, [r1, #-294]	; 0x126
 564:	002d3113 	eoreq	r3, sp, r3, lsl r1
 568:	2f020402 	svccs	0x00020402
 56c:	02040200 	andeq	r0, r4, #0, 4
 570:	0402002d 	streq	r0, [r2], #-45	; 0x2d
 574:	02002f02 	andeq	r2, r0, #2, 30
 578:	4c2d0104 	stfmis	f0, [sp], #-16
 57c:	4b14304c 	blmi	50c6b4 <__bss_end__+0x502fbc>
 580:	02004f2f 	andeq	r4, r0, #47, 30	; 0xbc
 584:	00670204 	rsbeq	r0, r7, r4, lsl #4
 588:	65010402 	strvs	r0, [r1, #-1026]	; 0x402
 58c:	a0304d4c 	eorsge	r4, r0, ip, asr #26
 590:	0230312f 	eorseq	r3, r0, #-1073741813	; 0xc000000b
 594:	2d841626 	stccs	6, cr1, [r4, #152]	; 0x98
 598:	0402002c 	streq	r0, [r2], #-44	; 0x2c
 59c:	02003001 	andeq	r3, r0, #1
 5a0:	06330104 	ldrteq	r0, [r3], -r4, lsl #2
 5a4:	04020066 	streq	r0, [r2], #-102	; 0x66
 5a8:	02002e01 	andeq	r2, r0, #1, 28
 5ac:	08060104 	stmdaeq	r6, {r2, r8}
 5b0:	032f6721 	teqeq	pc, #8650752	; 0x840000
 5b4:	13038273 	movwne	r8, #12915	; 0x3273
 5b8:	0402002e 	streq	r0, [r2], #-46	; 0x2e
 5bc:	002e0601 	eoreq	r0, lr, r1, lsl #12
 5c0:	06010402 	streq	r0, [r1], -r2, lsl #8
 5c4:	034b6a9f 	movteq	r6, #47775	; 0xba9f
 5c8:	21032e67 	tstcs	r3, r7, ror #28
 5cc:	0402002e 	streq	r0, [r2], #-46	; 0x2e
 5d0:	002e0601 	eoreq	r0, lr, r1, lsl #12
 5d4:	06010402 	streq	r0, [r1], -r2, lsl #8
 5d8:	0402009f 	streq	r0, [r2], #-159	; 0x9f
 5dc:	f3bd6a01 	vtbl.8	d6, {d13-d15}, d1
 5e0:	087fa603 	ldmdaeq	pc!, {r0, r1, r9, sl, sp, pc}^	; <UNPREDICTABLE>
 5e4:	02002f20 	andeq	r2, r0, #32, 30	; 0x80
 5e8:	4a060104 	bmi	180a00 <__bss_end__+0x177308>
 5ec:	2f4bbb06 	svccs	0x004bbb06
 5f0:	f200da03 	vpmax.s8	d13, d0, d3
 5f4:	31484c83 	smlalbbcc	r4, r8, r3, ip
 5f8:	4b842f2f 	blmi	fe10c2bc <__bss_end__+0xfe102bc4>
 5fc:	314d2d2f 	cmpcc	sp, pc, lsr #26
 600:	00832f30 	addeq	r2, r3, r0, lsr pc
 604:	2c010402 	cfstrscs	mvf0, [r1], {2}
 608:	040200be 	streq	r0, [r2], #-190	; 0xbe
 60c:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 610:	163602bc 			; <UNDEFINED> instruction: 0x163602bc
 614:	08ba0e03 	ldmeq	sl!, {r0, r1, r9, sl, fp}
 618:	21083021 	tstcs	r8, r1, lsr #32
 61c:	30210831 	eorcc	r0, r1, r1, lsr r8
 620:	4b302108 	blmi	c08a48 <__bss_end__+0xbff350>
 624:	30210830 	eorcc	r0, r1, r0, lsr r8
 628:	002f31d9 	ldrdeq	r3, [pc], -r9	; <UNPREDICTABLE>
 62c:	65010402 	strvs	r0, [r1, #-1026]	; 0x402
 630:	02040200 	andeq	r0, r4, #0, 4
 634:	02004a06 	andeq	r4, r0, #24576	; 0x6000
 638:	03060104 	movweq	r0, #24836	; 0x6104
 63c:	02006642 	andeq	r6, r0, #69206016	; 0x4200000
 640:	66060204 	strvs	r0, [r6], -r4, lsl #4
 644:	00c20306 	sbceq	r0, r2, r6, lsl #6
 648:	1002684a 	andne	r6, r2, sl, asr #16
 64c:	96010100 	strls	r0, [r1], -r0, lsl #2
 650:	02000000 	andeq	r0, r0, #0
 654:	00007700 	andeq	r7, r0, r0, lsl #14
 658:	fb010200 	blx	40e62 <__bss_end__+0x3776a>
 65c:	01000d0e 	tsteq	r0, lr, lsl #26
 660:	00010101 	andeq	r0, r1, r1, lsl #2
 664:	00010000 	andeq	r0, r1, r0
 668:	73630100 	cmnvc	r3, #0, 2
 66c:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 670:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 674:	73552f00 	cmpvc	r5, #0, 30
 678:	2f737265 	svccs	0x00737265
 67c:	61697262 	cmnvs	r9, r2, ror #4
 680:	6e756a6e 	vsubvs.f32	s13, s10, s29
 684:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 688:	706f746b 	rsbvc	r7, pc, fp, ror #8
 68c:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 690:	2f6c6f6f 	svccs	0x006c6f6f
 694:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 698:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 69c:	432f3032 	teqmi	pc, #50	; 0x32
 6a0:	30343153 	eorscc	r3, r4, r3, asr r1
 6a4:	73632f45 	cmnvc	r3, #276	; 0x114
 6a8:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 6ac:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 6b0:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 514 <_start-0x7aec>
 6b4:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 6b8:	73630000 	cmnvc	r3, #0
 6bc:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
 6c0:	0100632e 	tsteq	r0, lr, lsr #6
 6c4:	70720000 	rsbsvc	r0, r2, r0
 6c8:	00682e69 	rsbeq	r2, r8, r9, ror #28
 6cc:	00000002 	andeq	r0, r0, r2
 6d0:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
 6d4:	14000088 	strne	r0, [r0], #-136	; 0x88
 6d8:	2d2f3132 	stfcss	f3, [pc, #-200]!	; 618 <_start-0x79e8>
 6dc:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 6e0:	2f4d4901 	svccs	0x004d4901
 6e4:	01000602 	tsteq	r0, r2, lsl #12
 6e8:	00009901 	andeq	r9, r0, r1, lsl #18
 6ec:	77000200 	strvc	r0, [r0, -r0, lsl #4]
 6f0:	02000000 	andeq	r0, r0, #0
 6f4:	0d0efb01 	vstreq	d15, [lr, #-4]
 6f8:	01010100 	mrseq	r0, (UNDEF: 17)
 6fc:	00000001 	andeq	r0, r0, r1
 700:	01000001 	tsteq	r0, r1
 704:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 708:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
 70c:	2f006372 	svccs	0x00006372
 710:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 714:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 718:	6a6e6169 	bvs	1b98cc4 <__bss_end__+0x1b8f5cc>
 71c:	442f6e75 	strtmi	r6, [pc], #-3701	; 724 <_start-0x78dc>
 720:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 724:	732f706f 	teqvc	pc, #111	; 0x6f
 728:	6f6f6863 	svcvs	0x006f6863
 72c:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 730:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 734:	30323931 	eorscc	r3, r2, r1, lsr r9
 738:	3153432f 	cmpcc	r3, pc, lsr #6
 73c:	2f453034 	svccs	0x00453034
 740:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 744:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 748:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 74c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 750:	00006970 	andeq	r6, r0, r0, ror r9
 754:	6f626572 	svcvs	0x00626572
 758:	632e746f 	teqvs	lr, #1862270976	; 0x6f000000
 75c:	00000100 	andeq	r0, r0, r0, lsl #2
 760:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 764:	00020068 	andeq	r0, r2, r8, rrx
 768:	05000000 	streq	r0, [r0, #-0]
 76c:	00892402 	addeq	r2, r9, r2, lsl #8
 770:	010d0300 	mrseq	r0, SP_mon
 774:	852f3114 	strhi	r3, [pc, #-276]!	; 668 <_start-0x7998>
 778:	4d4b2f15 	stclmi	15, cr2, [fp, #-84]	; 0xffffffac
 77c:	5235672f 	eorspl	r6, r5, #12320768	; 0xbc0000
 780:	00100267 	andseq	r0, r0, r7, ror #4
 784:	00a00101 	adceq	r0, r0, r1, lsl #2
 788:	00020000 	andeq	r0, r2, r0
 78c:	00000076 	andeq	r0, r0, r6, ror r0
 790:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 794:	0101000d 	tsteq	r1, sp
 798:	00000101 	andeq	r0, r0, r1, lsl #2
 79c:	00000100 	andeq	r0, r0, r0, lsl #2
 7a0:	31736301 	cmncc	r3, r1, lsl #6
 7a4:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 7a8:	00637273 	rsbeq	r7, r3, r3, ror r2
 7ac:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 7b0:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 7b4:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 7b8:	2f6e756a 	svccs	0x006e756a
 7bc:	6b736544 	blvs	1cd9cd4 <__bss_end__+0x1cd05dc>
 7c0:	2f706f74 	svccs	0x00706f74
 7c4:	6f686373 	svcvs	0x00686373
 7c8:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 7cc:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 7d0:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 7d4:	53432f30 	movtpl	r2, #16176	; 0x3f30
 7d8:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 7dc:	3173632f 	cmncc	r3, pc, lsr #6
 7e0:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 7e4:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 7e8:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 7ec:	00697062 	rsbeq	r7, r9, r2, rrx
 7f0:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
 7f4:	632e7265 	teqvs	lr, #1342177286	; 0x50000006
 7f8:	00000100 	andeq	r0, r0, r0, lsl #2
 7fc:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 800:	00020068 	andeq	r0, r2, r8, rrx
 804:	05000000 	streq	r0, [r0, #-0]
 808:	00899802 	addeq	r9, r9, r2, lsl #16
 80c:	2f131600 	svccs	0x00131600
 810:	0402002d 	streq	r0, [r2], #-45	; 0x2d
 814:	062e0601 	strteq	r0, [lr], -r1, lsl #12
 818:	4b2f3168 	blmi	bccdc0 <__bss_end__+0xbc36c8>
 81c:	2f4c4b4c 	svccs	0x004c4b4c
 820:	842f2f6a 	strthi	r2, [pc], #-3946	; 828 <_start-0x77d8>
 824:	0008022f 	andeq	r0, r8, pc, lsr #4
 828:	016b0101 	cmneq	fp, r1, lsl #2
 82c:	00020000 	andeq	r0, r2, r0
 830:	00000120 	andeq	r0, r0, r0, lsr #2
 834:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 838:	0101000d 	tsteq	r1, sp
 83c:	00000101 	andeq	r0, r0, r1, lsl #2
 840:	00000100 	andeq	r0, r0, r0, lsl #2
 844:	2d796d01 	ldclcs	13, cr6, [r9, #-4]!
 848:	00637273 	rsbeq	r7, r3, r3, ror r2
 84c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 850:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
 854:	432f6c61 	teqmi	pc, #24832	; 0x6100
 858:	616c6c65 	cmnvs	ip, r5, ror #24
 85c:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 860:	6f6e2d6d 	svcvs	0x006e2d6d
 864:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 868:	2f696261 	svccs	0x00696261
 86c:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 870:	73632d33 	cmnvc	r3, #3264	; 0xcc0
 874:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
 878:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 87c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
 880:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 884:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 888:	61652d65 	cmnvs	r5, r5, ror #26
 88c:	342f6962 	strtcc	r6, [pc], #-2402	; 894 <_start-0x776c>
 890:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 894:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 898:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
 89c:	73552f00 	cmpvc	r5, #0, 30
 8a0:	2f737265 	svccs	0x00737265
 8a4:	61697262 	cmnvs	r9, r2, ror #4
 8a8:	6e756a6e 	vsubvs.f32	s13, s10, s29
 8ac:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 8b0:	706f746b 	rsbvc	r7, pc, fp, ror #8
 8b4:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 8b8:	2f6c6f6f 	svccs	0x006c6f6f
 8bc:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 8c0:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 8c4:	432f3032 	teqmi	pc, #50	; 0x32
 8c8:	30343153 	eorscc	r3, r4, r3, asr r1
 8cc:	73632f45 	cmnvc	r3, #276	; 0x114
 8d0:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 8d4:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 8d8:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 73c <_start-0x78c4>
 8dc:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 8e0:	73752f00 	cmnvc	r5, #0, 30
 8e4:	6f6c2f72 	svcvs	0x006c2f72
 8e8:	2f6c6163 	svccs	0x006c6163
 8ec:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
 8f0:	612f7261 	teqvs	pc, r1, ror #4
 8f4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 8f8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 8fc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 900:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 904:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
 908:	30373173 	eorscc	r3, r7, r3, ror r1
 90c:	72612f65 	rsbvc	r2, r1, #404	; 0x194
 910:	6f6e2d6d 	svcvs	0x006e2d6d
 914:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 918:	2f696261 	svccs	0x00696261
 91c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 920:	00656475 	rsbeq	r6, r5, r5, ror r4
 924:	616d6b00 	cmnvs	sp, r0, lsl #22
 928:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 92c:	0100632e 	tsteq	r0, lr, lsr #6
 930:	74730000 	ldrbtvc	r0, [r3], #-0
 934:	66656464 	strbtvs	r6, [r5], -r4, ror #8
 938:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 93c:	70720000 	rsbsvc	r0, r2, r0
 940:	00682e69 	rsbeq	r2, r8, r9, ror #28
 944:	73000003 	movwvc	r0, #3
 948:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
 94c:	00682e67 	rsbeq	r2, r8, r7, ror #28
 950:	00000004 	andeq	r0, r0, r4
 954:	ec020500 	cfstr32	mvfx0, [r2], {-0}
 958:	0300008c 	movweq	r0, #140	; 0x8c
 95c:	002f0118 	eoreq	r0, pc, r8, lsl r1	; <UNPREDICTABLE>
 960:	06010402 	streq	r0, [r1], -r2, lsl #8
 964:	4bbc0682 	blmi	fef02374 <__bss_end__+0xfeef8c7c>
 968:	be4d4b4b 	vmlslt.f64	d20, d13, d11
 96c:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 970:	06820601 	streq	r0, [r2], r1, lsl #12
 974:	004b4bbc 	strheq	r4, [fp], #-188	; 0xffffff44
 978:	06010402 	streq	r0, [r1], -r2, lsl #8
 97c:	4bbb064a 	blmi	feec22ac <__bss_end__+0xfeeb8bb4>
 980:	032f3083 	teqeq	pc, #131	; 0x83
 984:	002fba0a 	eoreq	fp, pc, sl, lsl #20
 988:	06010402 	streq	r0, [r1], -r2, lsl #8
 98c:	67bb0682 	ldrvs	r0, [fp, r2, lsl #13]!
 990:	14c213f9 	strbne	r1, [r2], #1017	; 0x3f9
 994:	01000802 	tsteq	r0, r2, lsl #16
 998:	0000ec01 	andeq	lr, r0, r1, lsl #24
 99c:	d0000200 	andle	r0, r0, r0, lsl #4
 9a0:	02000000 	andeq	r0, r0, #0
 9a4:	0d0efb01 	vstreq	d15, [lr, #-4]
 9a8:	01010100 	mrseq	r0, (UNDEF: 17)
 9ac:	00000001 	andeq	r0, r0, r1
 9b0:	01000001 	tsteq	r0, r1
 9b4:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 9b8:	73752f00 	cmnvc	r5, #0, 30
 9bc:	6f6c2f72 	svcvs	0x006c2f72
 9c0:	2f6c6163 	svccs	0x006c6163
 9c4:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
 9c8:	612f7261 	teqvs	pc, r1, ror #4
 9cc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 9d0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 9d4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 9d8:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 9dc:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
 9e0:	30373173 	eorscc	r3, r7, r3, ror r1
 9e4:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 9e8:	63672f62 	cmnvs	r7, #392	; 0x188
 9ec:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
 9f0:	6f6e2d6d 	svcvs	0x006e2d6d
 9f4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 9f8:	2f696261 	svccs	0x00696261
 9fc:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 a00:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
 a04:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
 a08:	752f0065 	strvc	r0, [pc, #-101]!	; 9ab <_start-0x7655>
 a0c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 848 <_start-0x77b8>
 a10:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 a14:	6c65432f 	stclvs	3, cr4, [r5], #-188	; 0xffffff44
 a18:	2f72616c 	svccs	0x0072616c
 a1c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 a20:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 a24:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 a28:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 a2c:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
 a30:	37317363 	ldrcc	r7, [r1, -r3, ror #6]!
 a34:	612f6530 	teqvs	pc, r0, lsr r5	; <UNPREDICTABLE>
 a38:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 a3c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 a40:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 a44:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 a48:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
 a4c:	656d0000 	strbvs	r0, [sp, #-0]!
 a50:	7465736d 	strbtvc	r7, [r5], #-877	; 0x36d
 a54:	0100632e 	tsteq	r0, lr, lsr #6
 a58:	74730000 	ldrbtvc	r0, [r3], #-0
 a5c:	66656464 	strbtvs	r6, [r5], -r4, ror #8
 a60:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 a64:	74730000 	ldrbtvc	r0, [r3], #-0
 a68:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
 a6c:	0300682e 	movweq	r6, #2094	; 0x82e
 a70:	00000000 	andeq	r0, r0, r0
 a74:	8e640205 	cdphi	2, 6, cr0, cr4, cr5, {0}
 a78:	13140000 	tstne	r4, #0
 a7c:	02002f4c 	andeq	r2, r0, #76, 30	; 0x130
 a80:	4d490104 	stfmie	f0, [r9, #-16]
 a84:	01000202 	tsteq	r0, r2, lsl #4
 a88:	00008601 	andeq	r8, r0, r1, lsl #12
 a8c:	72000200 	andvc	r0, r0, #0, 4
 a90:	02000000 	andeq	r0, r0, #0
 a94:	0d0efb01 	vstreq	d15, [lr, #-4]
 a98:	01010100 	mrseq	r0, (UNDEF: 17)
 a9c:	00000001 	andeq	r0, r0, r1
 aa0:	01000001 	tsteq	r0, r1
 aa4:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 aa8:	73552f00 	cmpvc	r5, #0, 30
 aac:	2f737265 	svccs	0x00737265
 ab0:	61697262 	cmnvs	r9, r2, ror #4
 ab4:	6e756a6e 	vsubvs.f32	s13, s10, s29
 ab8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 abc:	706f746b 	rsbvc	r7, pc, fp, ror #8
 ac0:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 ac4:	2f6c6f6f 	svccs	0x006c6f6f
 ac8:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 acc:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 ad0:	432f3032 	teqmi	pc, #50	; 0x32
 ad4:	30343153 	eorscc	r3, r4, r3, asr r1
 ad8:	73632f45 	cmnvc	r3, #276	; 0x114
 adc:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 ae0:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 ae4:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 948 <_start-0x76b8>
 ae8:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 aec:	75700000 	ldrbvc	r0, [r0, #-0]!
 af0:	61686374 	smcvs	34356	; 0x8634
 af4:	00632e72 	rsbeq	r2, r3, r2, ror lr
 af8:	72000001 	andvc	r0, r0, #1
 afc:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 b00:	00000200 	andeq	r0, r0, r0, lsl #4
 b04:	02050000 	andeq	r0, r5, #0
 b08:	00008e84 	andeq	r8, r0, r4, lsl #29
 b0c:	06024a14 			; <UNDEFINED> instruction: 0x06024a14
 b10:	Address 0x0000000000000b10 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6e696c62 	cdpvs	12, 6, cr6, cr9, cr2, {3}
   4:	656e006b 	strbvs	r0, [lr, #-107]!	; 0x6b
   8:	72007478 	andvc	r7, r0, #120, 8	; 0x78000000
   c:	725f6970 	subsvc	r6, pc, #112, 18	; 0x1c0000
  10:	6f6f6265 	svcvs	0x006f6265
  14:	4e470074 	mcrmi	0, 2, r0, cr7, cr4, {3}
  18:	20432055 	subcs	r2, r3, r5, asr r0
  1c:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
  20:	6d2d2033 	stcvs	0, cr2, [sp, #-204]!	; 0xffffff34
  24:	3d757063 	ldclcc	0, cr7, [r5, #-396]!	; 0xfffffe74
  28:	316d7261 	cmncc	sp, r1, ror #4
  2c:	6a363731 	bvs	d8dcf8 <__bss_end__+0xd84600>
  30:	732d667a 	teqvc	sp, #127926272	; 0x7a00000
  34:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xd20
  38:	3d656e75 	stclcc	14, cr6, [r5, #-468]!	; 0xfffffe2c
  3c:	316d7261 	cmncc	sp, r1, ror #4
  40:	6a363731 	bvs	d8dd0c <__bss_end__+0xd84614>
  44:	732d667a 	teqvc	sp, #127926272	; 0x7a00000
  48:	67672d20 	strbvs	r2, [r7, -r0, lsr #26]!
  4c:	2d206264 	sfmcs	f6, 4, [r0, #-400]!	; 0xfffffe70
  50:	2d20674f 	stccs	7, cr6, [r0, #-316]!	; 0xfffffec4
  54:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  58:	39756e67 	ldmdbcc	r5!, {r0, r1, r2, r5, r6, r9, sl, fp, sp, lr}^
  5c:	662d2039 			; <UNDEFINED> instruction: 0x662d2039
  60:	65657266 	strbvs	r7, [r5, #-614]!	; 0x266
  64:	6e617473 	mcrvs	4, 3, r7, cr1, cr3, {3}
  68:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
  6c:	746f6e00 	strbtvc	r6, [pc], #-3584	; 74 <_start-0x7f8c>
  70:	6e69616d 	powvsez	f6, f1, #5.0
  74:	61747300 	cmnvs	r4, r0, lsl #6
  78:	75006b63 	strvc	r6, [r0, #-2915]	; 0xb63
  7c:	5f747261 	svcpl	0x00747261
  80:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
  84:	736e7500 	cmnvc	lr, #0, 10
  88:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
  8c:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
  90:	74007261 	strvc	r7, [r0], #-609	; 0x261
  94:	0035375f 	eorseq	r3, r5, pc, asr r7
  98:	35325f74 	ldrcc	r5, [r2, #-3956]!	; 0xf74
  9c:	6f687300 	svcvs	0x00687300
  a0:	75207472 	strvc	r7, [r0, #-1138]!	; 0x472
  a4:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  a8:	2064656e 	rsbcs	r6, r4, lr, ror #10
  ac:	00746e69 	rsbseq	r6, r4, r9, ror #28
  b0:	79747564 	ldmdbvc	r4!, {r2, r5, r6, r8, sl, ip, sp, lr}^
  b4:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
  b8:	65735f6f 	ldrbvs	r5, [r3, #-3951]!	; 0xf6f
  bc:	666f5f74 	uqsub16vs	r5, pc, r4	; <UNPREDICTABLE>
  c0:	70720066 	rsbsvc	r0, r2, r6, rrx
  c4:	68745f69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
  c8:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
  cc:	6174735f 	cmnvs	r4, pc, asr r3
  d0:	67007472 	smlsdxvs	r0, r2, r4, r7
  d4:	5f6f6970 	svcpl	0x006f6970
  d8:	5f746573 	svcpl	0x00746573
  dc:	7074756f 	rsbsvc	r7, r4, pc, ror #10
  e0:	2f007475 	svccs	0x00007475
  e4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  e8:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
  ec:	6a6e6169 	bvs	1b98698 <__bss_end__+0x1b8efa0>
  f0:	442f6e75 	strtmi	r6, [pc], #-3701	; f8 <_start-0x7f08>
  f4:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
  f8:	732f706f 	teqvc	pc, #111	; 0x6f
  fc:	6f6f6863 	svcvs	0x006f6863
 100:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 104:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 108:	30323931 	eorscc	r3, r2, r1, lsr r9
 10c:	3153432f 	cmpcc	r3, pc, lsr #6
 110:	2f453034 	svccs	0x00453034
 114:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 118:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 11c:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 120:	62616c2f 	rsbvs	r6, r1, #12032	; 0x2f00
 124:	2d362f73 	ldccs	15, cr2, [r6, #-460]!	; 0xfffffe34
 128:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 12c:	2f736461 	svccs	0x00736461
 130:	68742d32 	ldmdavs	r4!, {r1, r4, r5, r8, sl, fp, sp}^
 134:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 138:	70720073 	rsbsvc	r0, r2, r3, ror r0
 13c:	6f665f69 	svcvs	0x00665f69
 140:	33006b72 	movwcc	r6, #2930	; 0xb72
 144:	7365742d 	cmnvc	r5, #754974720	; 0x2d000000
 148:	69792d74 	ldmdbvs	r9!, {r2, r4, r5, r6, r8, sl, fp, sp}^
 14c:	2e646c65 	cdpcs	12, 6, cr6, cr4, cr5, {3}
 150:	5f5f0063 	svcpl	0x005f0063
 154:	434e5546 	movtmi	r5, #58694	; 0xe546
 158:	4e4f4954 	mcrmi	9, 2, r4, cr15, cr4, {2}
 15c:	74005f5f 	strvc	r5, [r0], #-3935	; 0xf5f
 160:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 164:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 168:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0x55f
 16c:	65720063 	ldrbvs	r0, [r2, #-99]!	; 0x63
 170:	61735f67 	cmnvs	r3, r7, ror #30
 174:	615f6576 	cmpvs	pc, r6, ror r5	; <UNPREDICTABLE>
 178:	00616572 	rsbeq	r6, r1, r2, ror r5
 17c:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 180:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
 184:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
 188:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
 18c:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 190:	7200746e 	andvc	r7, r0, #1845493760	; 0x6e000000
 194:	745f6970 	ldrbvc	r6, [pc], #-2416	; 19c <_start-0x7e64>
 198:	61657268 	cmnvs	r5, r8, ror #4
 19c:	00745f64 	rsbseq	r5, r4, r4, ror #30
 1a0:	5f697072 	svcpl	0x00697072
 1a4:	6c656979 	stclvs	9, cr6, [r5], #-484	; 0xfffffe1c
 1a8:	69730064 	ldmdbvs	r3!, {r2, r5, r6}^
 1ac:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
 1b0:	6f006570 	svcvs	0x00006570
 1b4:	73755f6e 	cmnvc	r5, #440	; 0x1b8
 1b8:	6c006365 	stcvs	3, cr6, [r0], {101}	; 0x65
 1bc:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 1c0:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 1c4:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
 1c8:	66666f00 	strbtvs	r6, [r6], -r0, lsl #30
 1cc:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0x55f
 1d0:	70720063 	rsbsvc	r0, r2, r3, rrx
 1d4:	68745f69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 1d8:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 1dc:	6f687300 	svcvs	0x00687300
 1e0:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
 1e4:	7500746e 	strvc	r7, [r0, #-1134]	; 0x46e
 1e8:	33746e69 	cmncc	r4, #1680	; 0x690
 1ec:	00745f32 	rsbseq	r5, r4, r2, lsr pc
 1f0:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
 1f4:	5f636f6c 	svcpl	0x00636f6c
 1f8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
 1fc:	69617700 	stmdbvs	r1!, {r8, r9, sl, ip, sp, lr}^
 200:	73755f74 	cmnvc	r5, #116, 30	; 0x1d0
 204:	67006365 	strvs	r6, [r0, -r5, ror #6]
 208:	5f6f6970 	svcpl	0x006f6970
 20c:	5f746573 	svcpl	0x00746573
 210:	72006e6f 	andvc	r6, r0, #1776	; 0x6f0
 214:	00716e75 	rsbseq	r6, r1, r5, ror lr
 218:	6f705f51 	svcvs	0x00705f51
 21c:	6d6b0070 	stclvs	0, cr0, [fp, #-448]!	; 0xfffffe40
 220:	6f6c6c61 	svcvs	0x006c6c61
 224:	6c615f63 	stclvs	15, cr5, [r1], #-396	; 0xfffffe74
 228:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
 22c:	5f510064 	svcpl	0x00510064
 230:	74706d65 	ldrbtvc	r6, [r0], #-3429	; 0xd65
 234:	63730079 	cmnvs	r3, #121	; 0x79
 238:	75646568 	strbvc	r6, [r4, #-1384]!	; 0x568
 23c:	5f72656c 	svcpl	0x0072656c
 240:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 244:	66006461 	strvs	r6, [r0], -r1, ror #8
 248:	71656572 	smcvc	22098	; 0x5652
 24c:	73696d00 	cmnvc	r9, #0, 26
 250:	5f646573 	svcpl	0x00646573
 254:	64616564 	strbtvs	r6, [r1], #-1380	; 0x564
 258:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0x96c
 25c:	696d0073 	stmdbvs	sp!, {r0, r1, r4, r5, r6}^
 260:	64657373 	strbtvs	r7, [r5], #-883	; 0x373
 264:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
 268:	6800726f 	stmdavs	r0, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}
 26c:	00646165 	rsbeq	r6, r4, r5, ror #2
 270:	2d697072 	stclcs	0, cr7, [r9, #-456]!	; 0xfffffe38
 274:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 278:	632e6461 	teqvs	lr, #1627389952	; 0x61000000
 27c:	74696800 	strbtvc	r6, [r9], #-2048	; 0x800
 280:	6165645f 	cmnvs	r5, pc, asr r4
 284:	6e696c64 	cdpvs	12, 6, cr6, cr9, cr4, {3}
 288:	63007365 	movwvs	r7, #869	; 0x365
 28c:	74616572 	strbtvc	r6, [r1], #-1394	; 0x572
 290:	745f6465 	ldrbvc	r6, [pc], #-1125	; 298 <_start-0x7d68>
 294:	61657268 	cmnvs	r5, r8, ror #4
 298:	72007364 	andvc	r7, r0, #100, 6	; 0x90000001
 29c:	745f6970 	ldrbvc	r6, [pc], #-2416	; 2a4 <_start-0x7d5c>
 2a0:	61657268 	cmnvs	r5, r8, ror #4
 2a4:	74735f64 	ldrbtvc	r5, [r3], #-3940	; 0xf64
 2a8:	00737461 	rsbseq	r7, r3, r1, ror #8
 2ac:	74697865 	strbtvc	r7, [r9], #-2149	; 0x865
 2b0:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xf63
 2b4:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 2b8:	6978655f 	ldmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
 2bc:	68740074 	ldmdavs	r4!, {r2, r4, r5, r6}^
 2c0:	6c6c615f 	stfvse	f6, [ip], #-380	; 0xfffffe84
 2c4:	6500636f 	strvs	r6, [r0, #-879]	; 0x36f
 2c8:	65746978 	ldrbvs	r6, [r4, #-2424]!	; 0x978
 2cc:	68745f64 	ldmdavs	r4!, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 2d0:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 2d4:	70720073 	rsbsvc	r0, r2, r3, ror r0
 2d8:	78655f69 	stmdavc	r5!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 2dc:	5f746361 	svcpl	0x00746361
 2e0:	65656c73 	strbvs	r6, [r5, #-3187]!	; 0xc73
 2e4:	61740070 	cmnvs	r4, r0, ror r0
 2e8:	72006c69 	andvc	r6, r0, #26880	; 0x6900
 2ec:	665f6970 			; <UNDEFINED> instruction: 0x665f6970
 2f0:	5f6b726f 	svcpl	0x006b726f
 2f4:	6e756f62 	cdpvs	15, 7, cr6, cr5, cr2, {3}
 2f8:	00646564 	rsbeq	r6, r4, r4, ror #10
 2fc:	5f697072 	svcpl	0x00697072
 300:	5f727563 	svcpl	0x00727563
 304:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 308:	72006461 	andvc	r6, r0, #1627389952	; 0x61000000
 30c:	675f6970 			; <UNDEFINED> instruction: 0x675f6970
 310:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
 314:	73746174 	cmnvc	r4, #116, 2
 318:	675f5f00 	ldrbvs	r5, [pc, -r0, lsl #30]
 31c:	5f63756e 	svcpl	0x0063756e
 320:	6c5f6176 	ldfvse	f6, [pc], {118}	; 0x76
 324:	00747369 	rsbseq	r7, r4, r9, ror #6
 328:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 32c:	6972702f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, ip, sp, lr}^
 330:	2e6b746e 	cdpcs	4, 6, cr7, cr11, cr14, {3}
 334:	61760063 	cmnvs	r6, r3, rrx
 338:	6972705f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
 33c:	006b746e 	rsbeq	r7, fp, lr, ror #8
 340:	61765f5f 	cmnvs	r6, pc, asr pc
 344:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
 348:	552f0074 	strpl	r0, [pc, #-116]!	; 2dc <_start-0x7d24>
 34c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 350:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 354:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 358:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 35c:	6f746b73 	svcvs	0x00746b73
 360:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 364:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 1cc <_start-0x7e34>
 368:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 36c:	31726574 	cmncc	r2, r4, ror r5
 370:	2f303239 	svccs	0x00303239
 374:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 378:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 37c:	30343173 	eorscc	r3, r4, r3, ror r1
 380:	30322d65 	eorscc	r2, r2, r5, ror #26
 384:	2f6e6977 	svccs	0x006e6977
 388:	7062696c 	rsbvc	r6, r2, ip, ror #18
 38c:	72610069 	rsbvc	r0, r1, #105	; 0x69
 390:	5f007367 	svcpl	0x00007367
 394:	0070615f 	rsbseq	r6, r0, pc, asr r1
 398:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 39c:	7475702f 	ldrbtvc	r7, [r5], #-47	; 0x2f
 3a0:	00632e6b 	rsbeq	r2, r3, fp, ror #28
 3a4:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 3a8:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
 3ac:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
 3b0:	7072006b 	rsbsvc	r0, r2, fp, rrx
 3b4:	75705f69 	ldrbvc	r5, [r0, #-3945]!	; 0xf69
 3b8:	61686374 	smcvs	34356	; 0x8634
 3bc:	656e0072 	strbvs	r0, [lr, #-114]!	; 0x72
 3c0:	00705f67 	rsbseq	r5, r0, r7, ror #30
 3c4:	65766572 	ldrbvs	r6, [r6, #-1394]!	; 0x572
 3c8:	00657372 	rsbeq	r7, r5, r2, ror r3
 3cc:	69647369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
 3d0:	00746967 	rsbseq	r6, r4, r7, ror #18
 3d4:	73747570 	cmnvc	r4, #112, 10	; 0x1c000000
 3d8:	0070665f 	rsbseq	r6, r0, pc, asr r6
 3dc:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0x162
 3e0:	67697300 	strbvs	r7, [r9, -r0, lsl #6]!
 3e4:	5f64656e 	svcpl	0x0064656e
 3e8:	696c0070 	stmdbvs	ip!, {r4, r5, r6}^
 3ec:	762f6362 	strtvc	r6, [pc], -r2, ror #6
 3f0:	72702d61 	rsbsvc	r2, r0, #6208	; 0x1840
 3f4:	6b746e69 	blvs	1d1bda0 <__bss_end__+0x1d126a8>
 3f8:	7200632e 	andvc	r6, r0, #-1207959552	; 0xb8000000
 3fc:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
 400:	6f5f7465 	svcvs	0x005f7465
 404:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0x475
 408:	69770074 	ldmdbvs	r7!, {r2, r4, r5, r6}^
 40c:	00687464 	rsbeq	r7, r8, r4, ror #8
 410:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 414:	0070665f 	rsbseq	r6, r0, pc, asr r6
 418:	74696d65 	strbtvc	r6, [r9], #-3429	; 0xd65
 41c:	31736300 	cmncc	r3, r0, lsl #6
 420:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 424:	2f637273 	svccs	0x00637273
 428:	61747363 	cmnvs	r4, r3, ror #6
 42c:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
 430:	625f5f00 	subsvs	r5, pc, #0, 30
 434:	735f7373 	cmpvc	pc, #-872415231	; 0xcc000001
 438:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
 43c:	5f005f5f 	svcpl	0x00005f5f
 440:	7373625f 	cmnvc	r3, #-268435451	; 0xf0000005
 444:	646e655f 	strbtvs	r6, [lr], #-1375	; 0x55f
 448:	62005f5f 	andvs	r5, r0, #380	; 0x17c
 44c:	655f7373 	ldrbvs	r7, [pc, #-883]	; e1 <_start-0x7f1f>
 450:	5f00646e 	svcpl	0x0000646e
 454:	61747363 	cmnvs	r4, r3, ror #6
 458:	61007472 	tstvs	r0, r2, ror r4
 45c:	73755f74 	cmnvc	r5, #116, 30	; 0x1d0
 460:	6c5f7265 	lfmvs	f7, 2, [pc], {101}	; 0x65
 464:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
 468:	5f4d5000 	svcpl	0x004d5000
 46c:	53534150 	cmppl	r3, #80, 2
 470:	44524f57 	ldrbmi	r4, [r2], #-3927	; 0xf57
 474:	31736300 	cmncc	r3, r0, lsl #6
 478:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 47c:	2f637273 	svccs	0x00637273
 480:	6f626572 	svcvs	0x00626572
 484:	632e746f 	teqvs	lr, #1862270976	; 0x6f000000
 488:	5f4d5000 	svcpl	0x004d5000
 48c:	43545352 	cmpmi	r4, #1207959553	; 0x48000001
 490:	4352575f 	cmpmi	r2, #24903680	; 0x17c0000
 494:	465f4746 	ldrbmi	r4, [pc], -r6, asr #14
 498:	5f4c4c55 	svcpl	0x004c4c55
 49c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
 4a0:	4d500054 	ldclmi	0, cr0, [r0, #-336]	; 0xfffffeb0
 4a4:	4f44575f 	svcmi	0x0044575f
 4a8:	65730047 	ldrbvs	r0, [r3, #-71]!	; 0x47
 4ac:	73755f74 	cmnvc	r5, #116, 30	; 0x1d0
 4b0:	6c5f7265 	lfmvs	f7, 2, [pc], {101}	; 0x65
 4b4:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
 4b8:	54555000 	ldrbpl	r5, [r5], #-0
 4bc:	64003233 	strvs	r3, [r0], #-563	; 0x233
 4c0:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 4c4:	00736d5f 	rsbseq	r6, r3, pc, asr sp
 4c8:	525f4d50 	subspl	r4, pc, #80, 26	; 0x1400
 4cc:	00435453 	subeq	r5, r3, r3, asr r4
 4d0:	72737063 	rsbsvc	r7, r3, #99	; 0x63
 4d4:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 4d8:	735f7961 	cmpvc	pc, #1589248	; 0x184000
 4dc:	63006365 	movwvs	r6, #869	; 0x365
 4e0:	30343173 	eorscc	r3, r4, r3, ror r1
 4e4:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 4e8:	69742f63 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
 4ec:	2e72656d 	cdpcs	5, 7, cr6, cr2, cr13, {3}
 4f0:	45470063 	strbmi	r0, [r7, #-99]	; 0x63
 4f4:	00323354 	eorseq	r3, r2, r4, asr r3
 4f8:	6b636974 	blvs	18daad0 <__bss_end__+0x18d13d8>
 4fc:	65640073 	strbvs	r0, [r4, #-115]!	; 0x73
 500:	5f79616c 	svcpl	0x0079616c
 504:	6c637963 	stclvs	9, cr7, [r3], #-396	; 0xfffffe74
 508:	64007365 	strvs	r7, [r0], #-869	; 0x365
 50c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 510:	0073755f 	rsbseq	r7, r3, pc, asr r5
 514:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
 518:	6b00745f 	blvs	1d69c <__bss_end__+0x13fa4>
 51c:	65657266 	strbvs	r7, [r5, #-614]!	; 0x266
 520:	6c6c615f 	stfvse	f6, [ip], #-380	; 0xfffffe84
 524:	696c6100 	stmdbvs	ip!, {r8, sp, lr}^
 528:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
 52c:	6165685f 	cmnvs	r5, pc, asr r8
 530:	74705f70 	ldrbtvc	r5, [r0], #-3952	; 0xf70
 534:	6d6b0072 	stclvs	0, cr0, [fp, #-456]!	; 0xfffffe38
 538:	6f6c6c61 	svcvs	0x006c6c61
 53c:	656d0063 	strbvs	r0, [sp, #-99]!	; 0x63
 540:	7465736d 	strbtvc	r7, [r5], #-877	; 0x36d
 544:	2d796d00 	ldclcs	13, cr6, [r9, #-0]
 548:	2f637273 	svccs	0x00637273
 54c:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
 550:	2e636f6c 	cdpcs	15, 6, cr6, cr3, cr12, {3}
 554:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
 558:	705f7469 	subsvc	r7, pc, r9, ror #8
 55c:	696c6100 	stmdbvs	ip!, {r8, sp, lr}^
 560:	656d6e67 	strbvs	r6, [sp, #-3687]!	; 0xe67
 564:	7200746e 	andvc	r7, r0, #1845493760	; 0x6e000000
 568:	646e756f 	strbtvs	r7, [lr], #-1391	; 0x56f
 56c:	6e5f6465 	cdpvs	4, 5, cr6, cr15, cr5, {3}
 570:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
 574:	6d6b0073 	stclvs	0, cr0, [fp, #-460]!	; 0xfffffe34
 578:	6f6c6c61 	svcvs	0x006c6c61
 57c:	65685f63 	strbvs	r5, [r8, #-3939]!	; 0xf63
 580:	705f7061 	subsvc	r7, pc, r1, rrx
 584:	5f007274 	svcpl	0x00007274
 588:	6165685f 	cmnvs	r5, pc, asr r8
 58c:	74735f70 	ldrbtvc	r5, [r3], #-3952	; 0xf70
 590:	5f747261 	svcpl	0x00747261
 594:	6f74005f 	svcvs	0x0074005f
 598:	6c6c615f 	stfvse	f6, [ip], #-380	; 0xfffffe84
 59c:	7461636f 	strbtvc	r6, [r1], #-879	; 0x36f
 5a0:	696c0065 	stmdbvs	ip!, {r0, r2, r5, r6}^
 5a4:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!	; 424 <_start-0x7bdc>
 5a8:	65736d65 	ldrbvs	r6, [r3, #-3429]!	; 0xd65
 5ac:	00632e74 	rsbeq	r2, r3, r4, ror lr
 5b0:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 5b4:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
 5b8:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
 5bc:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
 5c0:	705f6c61 	subsvc	r6, pc, r1, ror #24
 5c4:	68637475 	stmdavs	r3!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
 5c8:	6c007261 	sfmvs	f7, 4, [r0], {97}	; 0x61
 5cc:	2f636269 	svccs	0x00636269
 5d0:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 5d4:	2e726168 	rpwcssz	f6, f2, #0.0
 5d8:	Address 0x00000000000005d8 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	00008010 	andeq	r8, r0, r0, lsl r0
  1c:	0000006c 	andeq	r0, r0, ip, rrx
  20:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
  24:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
  28:	180e4201 	stmdane	lr, {r0, r9, lr}
  2c:	00000018 	andeq	r0, r0, r8, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	0000807c 	andeq	r8, r0, ip, ror r0
  38:	0000006c 	andeq	r0, r0, ip, rrx
  3c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
  40:	86038504 	strhi	r8, [r3], -r4, lsl #10
  44:	00018e02 	andeq	r8, r1, r2, lsl #28
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	000080e8 	andeq	r8, r0, r8, ror #1
  54:	00000078 	andeq	r0, r0, r8, ror r0
  58:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
  5c:	86038504 	strhi	r8, [r3], -r4, lsl #10
  60:	42018e02 	andmi	r8, r1, #2, 28
  64:	0000200e 	andeq	r2, r0, lr
  68:	0000000c 	andeq	r0, r0, ip
  6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  70:	7c020001 	stcvc	0, cr0, [r2], {1}
  74:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  78:	0000000c 	andeq	r0, r0, ip
  7c:	00000068 	andeq	r0, r0, r8, rrx
  80:	00008160 	andeq	r8, r0, r0, ror #2
  84:	00000010 	andeq	r0, r0, r0, lsl r0
  88:	00000014 	andeq	r0, r0, r4, lsl r0
  8c:	00000068 	andeq	r0, r0, r8, rrx
  90:	00008170 	andeq	r8, r0, r0, ror r1
  94:	0000007c 	andeq	r0, r0, ip, ror r0
  98:	83080e42 	movwhi	r0, #36418	; 0x8e42
  9c:	00018e02 	andeq	r8, r1, r2, lsl #28
  a0:	00000014 	andeq	r0, r0, r4, lsl r0
  a4:	00000068 	andeq	r0, r0, r8, rrx
  a8:	000081ec 	andeq	r8, r0, ip, ror #3
  ac:	0000002c 	andeq	r0, r0, ip, lsr #32
  b0:	83080e42 	movwhi	r0, #36418	; 0x8e42
  b4:	00018e02 	andeq	r8, r1, r2, lsl #28
  b8:	0000000c 	andeq	r0, r0, ip
  bc:	00000068 	andeq	r0, r0, r8, rrx
  c0:	00008218 	andeq	r8, r0, r8, lsl r2
  c4:	00000010 	andeq	r0, r0, r0, lsl r0
  c8:	00000014 	andeq	r0, r0, r4, lsl r0
  cc:	00000068 	andeq	r0, r0, r8, rrx
  d0:	00008228 	andeq	r8, r0, r8, lsr #4
  d4:	0000002c 	andeq	r0, r0, ip, lsr #32
  d8:	83080e42 	movwhi	r0, #36418	; 0x8e42
  dc:	00018e02 	andeq	r8, r1, r2, lsl #28
  e0:	00000014 	andeq	r0, r0, r4, lsl r0
  e4:	00000068 	andeq	r0, r0, r8, rrx
  e8:	00008254 	andeq	r8, r0, r4, asr r2
  ec:	00000028 	andeq	r0, r0, r8, lsr #32
  f0:	83080e42 	movwhi	r0, #36418	; 0x8e42
  f4:	00018e02 	andeq	r8, r1, r2, lsl #28
  f8:	00000014 	andeq	r0, r0, r4, lsl r0
  fc:	00000068 	andeq	r0, r0, r8, rrx
 100:	0000827c 	andeq	r8, r0, ip, ror r2
 104:	00000028 	andeq	r0, r0, r8, lsr #32
 108:	83080e42 	movwhi	r0, #36418	; 0x8e42
 10c:	00018e02 	andeq	r8, r1, r2, lsl #28
 110:	00000014 	andeq	r0, r0, r4, lsl r0
 114:	00000068 	andeq	r0, r0, r8, rrx
 118:	000082a4 	andeq	r8, r0, r4, lsr #5
 11c:	0000004c 	andeq	r0, r0, ip, asr #32
 120:	83080e42 	movwhi	r0, #36418	; 0x8e42
 124:	00018e02 	andeq	r8, r1, r2, lsl #28
 128:	00000014 	andeq	r0, r0, r4, lsl r0
 12c:	00000068 	andeq	r0, r0, r8, rrx
 130:	000082f0 	strdeq	r8, [r0], -r0
 134:	00000028 	andeq	r0, r0, r8, lsr #32
 138:	83080e42 	movwhi	r0, #36418	; 0x8e42
 13c:	00018e02 	andeq	r8, r1, r2, lsl #28
 140:	00000014 	andeq	r0, r0, r4, lsl r0
 144:	00000068 	andeq	r0, r0, r8, rrx
 148:	00008318 	andeq	r8, r0, r8, lsl r3
 14c:	00000028 	andeq	r0, r0, r8, lsr #32
 150:	83080e42 	movwhi	r0, #36418	; 0x8e42
 154:	00018e02 	andeq	r8, r1, r2, lsl #28
 158:	00000014 	andeq	r0, r0, r4, lsl r0
 15c:	00000068 	andeq	r0, r0, r8, rrx
 160:	00008340 	andeq	r8, r0, r0, asr #6
 164:	00000028 	andeq	r0, r0, r8, lsr #32
 168:	83080e42 	movwhi	r0, #36418	; 0x8e42
 16c:	00018e02 	andeq	r8, r1, r2, lsl #28
 170:	0000000c 	andeq	r0, r0, ip
 174:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 178:	7c020001 	stcvc	0, cr0, [r2], {1}
 17c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 180:	00000024 	andeq	r0, r0, r4, lsr #32
 184:	00000170 	andeq	r0, r0, r0, ror r1
 188:	00008374 	andeq	r8, r0, r4, ror r3
 18c:	00000058 	andeq	r0, r0, r8, asr r0
 190:	80100e42 	andshi	r0, r0, r2, asr #28
 194:	82038104 	andhi	r8, r3, #4, 2
 198:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
 19c:	07841c0e 	streq	r1, [r4, lr, lsl #24]
 1a0:	058e0685 	streq	r0, [lr, #1669]	; 0x685
 1a4:	00280e42 	eoreq	r0, r8, r2, asr #28
 1a8:	0000000c 	andeq	r0, r0, ip
 1ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1b0:	7c020001 	stcvc	0, cr0, [r2], {1}
 1b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1b8:	00000018 	andeq	r0, r0, r8, lsl r0
 1bc:	000001a8 	andeq	r0, r0, r8, lsr #3
 1c0:	000083cc 	andeq	r8, r0, ip, asr #7
 1c4:	00000034 	andeq	r0, r0, r4, lsr r0
 1c8:	83100e42 	tsthi	r0, #1056	; 0x420
 1cc:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 1d0:	00018e02 	andeq	r8, r1, r2, lsl #28
 1d4:	0000000c 	andeq	r0, r0, ip
 1d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1dc:	7c020001 	stcvc	0, cr0, [r2], {1}
 1e0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1e4:	0000000c 	andeq	r0, r0, ip
 1e8:	000001d4 	ldrdeq	r0, [r0], -r4
 1ec:	00008400 	andeq	r8, r0, r0, lsl #8
 1f0:	00000014 	andeq	r0, r0, r4, lsl r0
 1f4:	0000000c 	andeq	r0, r0, ip
 1f8:	000001d4 	ldrdeq	r0, [r0], -r4
 1fc:	00008414 	andeq	r8, r0, r4, lsl r4
 200:	0000002c 	andeq	r0, r0, ip, lsr #32
 204:	0000000c 	andeq	r0, r0, ip
 208:	000001d4 	ldrdeq	r0, [r0], -r4
 20c:	00008440 	andeq	r8, r0, r0, asr #8
 210:	00000040 	andeq	r0, r0, r0, asr #32
 214:	00000020 	andeq	r0, r0, r0, lsr #32
 218:	000001d4 	ldrdeq	r0, [r0], -r4
 21c:	00008480 	andeq	r8, r0, r0, lsl #9
 220:	00000198 	muleq	r0, r8, r1
 224:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 228:	86058506 	strhi	r8, [r5], -r6, lsl #10
 22c:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 230:	42018e02 	andmi	r8, r1, #2, 28
 234:	0000580e 	andeq	r5, r0, lr, lsl #16
 238:	00000014 	andeq	r0, r0, r4, lsl r0
 23c:	000001d4 	ldrdeq	r0, [r0], -r4
 240:	00008618 	andeq	r8, r0, r8, lsl r6
 244:	00000050 	andeq	r0, r0, r0, asr r0
 248:	83080e42 	movwhi	r0, #36418	; 0x8e42
 24c:	00018e02 	andeq	r8, r1, r2, lsl #28
 250:	00000028 	andeq	r0, r0, r8, lsr #32
 254:	000001d4 	ldrdeq	r0, [r0], -r4
 258:	00008668 	andeq	r8, r0, r8, ror #12
 25c:	00000288 	andeq	r0, r0, r8, lsl #5
 260:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
 264:	86088509 	strhi	r8, [r8], -r9, lsl #10
 268:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
 26c:	8a048905 	bhi	122688 <__bss_end__+0x118f90>
 270:	8e028b03 	vmlahi.f64	d8, d2, d3
 274:	b00e4201 	andlt	r4, lr, r1, lsl #4
 278:	00000001 	andeq	r0, r0, r1
 27c:	0000000c 	andeq	r0, r0, ip
 280:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 284:	7c020001 	stcvc	0, cr0, [r2], {1}
 288:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 28c:	00000014 	andeq	r0, r0, r4, lsl r0
 290:	0000027c 	andeq	r0, r0, ip, ror r2
 294:	000088f0 	strdeq	r8, [r0], -r0
 298:	00000034 	andeq	r0, r0, r4, lsr r0
 29c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 2a0:	00018e02 	andeq	r8, r1, r2, lsl #28
 2a4:	0000000c 	andeq	r0, r0, ip
 2a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2ac:	7c020001 	stcvc	0, cr0, [r2], {1}
 2b0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2b4:	0000000c 	andeq	r0, r0, ip
 2b8:	000002a4 	andeq	r0, r0, r4, lsr #5
 2bc:	00008924 	andeq	r8, r0, r4, lsr #18
 2c0:	00000018 	andeq	r0, r0, r8, lsl r0
 2c4:	0000000c 	andeq	r0, r0, ip
 2c8:	000002a4 	andeq	r0, r0, r4, lsr #5
 2cc:	0000893c 	andeq	r8, r0, ip, lsr r9
 2d0:	00000014 	andeq	r0, r0, r4, lsl r0
 2d4:	00000014 	andeq	r0, r0, r4, lsl r0
 2d8:	000002a4 	andeq	r0, r0, r4, lsr #5
 2dc:	00008950 	andeq	r8, r0, r0, asr r9
 2e0:	00000048 	andeq	r0, r0, r8, asr #32
 2e4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 2e8:	00018e02 	andeq	r8, r1, r2, lsl #28
 2ec:	0000000c 	andeq	r0, r0, ip
 2f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2f4:	7c020001 	stcvc	0, cr0, [r2], {1}
 2f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2fc:	0000000c 	andeq	r0, r0, ip
 300:	000002ec 	andeq	r0, r0, ip, ror #5
 304:	00008998 	muleq	r0, r8, r9
 308:	0000001c 	andeq	r0, r0, ip, lsl r0
 30c:	00000014 	andeq	r0, r0, r4, lsl r0
 310:	000002ec 	andeq	r0, r0, ip, ror #5
 314:	000089b4 			; <UNDEFINED> instruction: 0x000089b4
 318:	00000014 	andeq	r0, r0, r4, lsl r0
 31c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 320:	00018e02 	andeq	r8, r1, r2, lsl #28
 324:	00000018 	andeq	r0, r0, r8, lsl r0
 328:	000002ec 	andeq	r0, r0, ip, ror #5
 32c:	000089c8 	andeq	r8, r0, r8, asr #19
 330:	00000024 	andeq	r0, r0, r4, lsr #32
 334:	83100e42 	tsthi	r0, #1056	; 0x420
 338:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 33c:	00018e02 	andeq	r8, r1, r2, lsl #28
 340:	00000014 	andeq	r0, r0, r4, lsl r0
 344:	000002ec 	andeq	r0, r0, ip, ror #5
 348:	000089ec 	andeq	r8, r0, ip, ror #19
 34c:	00000014 	andeq	r0, r0, r4, lsl r0
 350:	83080e42 	movwhi	r0, #36418	; 0x8e42
 354:	00018e02 	andeq	r8, r1, r2, lsl #28
 358:	00000014 	andeq	r0, r0, r4, lsl r0
 35c:	000002ec 	andeq	r0, r0, ip, ror #5
 360:	00008a00 	andeq	r8, r0, r0, lsl #20
 364:	00000014 	andeq	r0, r0, r4, lsl r0
 368:	83080e42 	movwhi	r0, #36418	; 0x8e42
 36c:	00018e02 	andeq	r8, r1, r2, lsl #28
 370:	0000000c 	andeq	r0, r0, ip
 374:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 378:	7c020001 	stcvc	0, cr0, [r2], {1}
 37c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 380:	00000014 	andeq	r0, r0, r4, lsl r0
 384:	00000370 	andeq	r0, r0, r0, ror r3
 388:	00008cec 	andeq	r8, r0, ip, ror #25
 38c:	00000064 	andeq	r0, r0, r4, rrx
 390:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 394:	00018e02 	andeq	r8, r1, r2, lsl #28
 398:	00000014 	andeq	r0, r0, r4, lsl r0
 39c:	00000370 	andeq	r0, r0, r0, ror r3
 3a0:	00008d50 	andeq	r8, r0, r0, asr sp
 3a4:	00000094 	muleq	r0, r4, r0
 3a8:	83080e42 	movwhi	r0, #36418	; 0x8e42
 3ac:	00018e02 	andeq	r8, r1, r2, lsl #28
 3b0:	00000014 	andeq	r0, r0, r4, lsl r0
 3b4:	00000370 	andeq	r0, r0, r0, ror r3
 3b8:	00008de4 	andeq	r8, r0, r4, ror #27
 3bc:	00000058 	andeq	r0, r0, r8, asr r0
 3c0:	83080e42 	movwhi	r0, #36418	; 0x8e42
 3c4:	00018e02 	andeq	r8, r1, r2, lsl #28
 3c8:	0000000c 	andeq	r0, r0, ip
 3cc:	00000370 	andeq	r0, r0, r0, ror r3
 3d0:	00008e3c 	andeq	r8, r0, ip, lsr lr
 3d4:	00000018 	andeq	r0, r0, r8, lsl r0
 3d8:	0000000c 	andeq	r0, r0, ip
 3dc:	00000370 	andeq	r0, r0, r0, ror r3
 3e0:	00008e54 	andeq	r8, r0, r4, asr lr
 3e4:	00000010 	andeq	r0, r0, r0, lsl r0
 3e8:	0000000c 	andeq	r0, r0, ip
 3ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3f0:	7c020001 	stcvc	0, cr0, [r2], {1}
 3f4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3f8:	0000000c 	andeq	r0, r0, ip
 3fc:	000003e8 	andeq	r0, r0, r8, ror #7
 400:	00008e64 	andeq	r8, r0, r4, ror #28
 404:	00000020 	andeq	r0, r0, r0, lsr #32
 408:	0000000c 	andeq	r0, r0, ip
 40c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 410:	7c020001 	stcvc	0, cr0, [r2], {1}
 414:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 418:	00000014 	andeq	r0, r0, r4, lsl r0
 41c:	00000408 	andeq	r0, r0, r8, lsl #8
 420:	00008e84 	andeq	r8, r0, r4, lsl #29
 424:	00000014 	andeq	r0, r0, r4, lsl r0
 428:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 42c:	00018e02 	andeq	r8, r1, r2, lsl #28

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	00008924 	andeq	r8, r0, r4, lsr #18
   4:	00008998 	muleq	r0, r8, r9
	...
