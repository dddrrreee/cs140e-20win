
gprof.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e3a0d302 	mov	sp, #134217728	; 0x8000000
    8004:	e3a0b000 	mov	fp, #0
    8008:	eb0002ba 	bl	8af8 <_cstart>
    800c:	eb0002d1 	bl	8b58 <rpi_reboot>

00008010 <gprof_inc>:
    return (unsigned) gprof_hist;
}

// increment histogram associated w/ pc.
//    few lines of code
static void gprof_inc(unsigned pc) {
    8010:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    // Iterate through and find the associated PC
    int i;
    for(i = 0; i <= frontstop; i++) {
    8014:	e3a03000 	mov	r3, #0
    8018:	e59f1060 	ldr	r1, [pc, #96]	; 8080 <gprof_inc+0x70>
        if(gprof_hist[i].pc_entry == pc) {
    801c:	e59fc060 	ldr	ip, [pc, #96]	; 8084 <gprof_inc+0x74>
// increment histogram associated w/ pc.
//    few lines of code
static void gprof_inc(unsigned pc) {
    // Iterate through and find the associated PC
    int i;
    for(i = 0; i <= frontstop; i++) {
    8020:	ea000008 	b	8048 <gprof_inc+0x38>
        if(gprof_hist[i].pc_entry == pc) {
    8024:	e59c2000 	ldr	r2, [ip]
    8028:	e0824183 	add	r4, r2, r3, lsl #3
    802c:	e7922183 	ldr	r2, [r2, r3, lsl #3]
    8030:	e1520000 	cmp	r2, r0
            gprof_hist[i].hit_count += 1;
    8034:	05943004 	ldreq	r3, [r4, #4]
    8038:	02833001 	addeq	r3, r3, #1
    803c:	05843004 	streq	r3, [r4, #4]
            return;
    8040:	0a00000c 	beq	8078 <gprof_inc+0x68>
// increment histogram associated w/ pc.
//    few lines of code
static void gprof_inc(unsigned pc) {
    // Iterate through and find the associated PC
    int i;
    for(i = 0; i <= frontstop; i++) {
    8044:	e2833001 	add	r3, r3, #1
    8048:	e5912000 	ldr	r2, [r1]
    804c:	e1530002 	cmp	r3, r2
    8050:	dafffff3 	ble	8024 <gprof_inc+0x14>
            return;
        }
    }

    // Did not find PC so add it
    frontstop++;
    8054:	e2822001 	add	r2, r2, #1
    8058:	e59f3020 	ldr	r3, [pc, #32]	; 8080 <gprof_inc+0x70>
    805c:	e5832000 	str	r2, [r3]
    gprof_hist[frontstop].pc_entry = pc;
    8060:	e59f301c 	ldr	r3, [pc, #28]	; 8084 <gprof_inc+0x74>
    8064:	e5933000 	ldr	r3, [r3]
    8068:	e0831182 	add	r1, r3, r2, lsl #3
    806c:	e7830182 	str	r0, [r3, r2, lsl #3]
    gprof_hist[frontstop].hit_count = 1;
    8070:	e3a03001 	mov	r3, #1
    8074:	e5813004 	str	r3, [r1, #4]
}
    8078:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
    807c:	e12fff1e 	bx	lr
    8080:	00009348 	andeq	r9, r0, r8, asr #6
    8084:	0000990c 	andeq	r9, r0, ip, lsl #18

00008088 <gprof_dump>:

// print out all samples whose count > min_val
//
// make sure sampling does not pick this code up!
static void gprof_dump(unsigned min_val) {
    8088:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    808c:	e1a07000 	mov	r7, r0
    int i;
    for(i = 0; i < frontstop; i++) {
    8090:	e3a04000 	mov	r4, #0
    8094:	e59f503c 	ldr	r5, [pc, #60]	; 80d8 <gprof_dump+0x50>
        if(gprof_hist[i].hit_count > min_val) {
    8098:	e59f603c 	ldr	r6, [pc, #60]	; 80dc <gprof_dump+0x54>
            printk("PC %x has %d hits\n", gprof_hist[i].pc_entry,
    809c:	e59f803c 	ldr	r8, [pc, #60]	; 80e0 <gprof_dump+0x58>
// print out all samples whose count > min_val
//
// make sure sampling does not pick this code up!
static void gprof_dump(unsigned min_val) {
    int i;
    for(i = 0; i < frontstop; i++) {
    80a0:	ea000008 	b	80c8 <gprof_dump+0x40>
        if(gprof_hist[i].hit_count > min_val) {
    80a4:	e5963000 	ldr	r3, [r6]
    80a8:	e0832184 	add	r2, r3, r4, lsl #3
    80ac:	e5922004 	ldr	r2, [r2, #4]
    80b0:	e1520007 	cmp	r2, r7
    80b4:	9a000002 	bls	80c4 <gprof_dump+0x3c>
            printk("PC %x has %d hits\n", gprof_hist[i].pc_entry,
    80b8:	e1a00008 	mov	r0, r8
    80bc:	e7931184 	ldr	r1, [r3, r4, lsl #3]
    80c0:	eb000123 	bl	8554 <printk>
// print out all samples whose count > min_val
//
// make sure sampling does not pick this code up!
static void gprof_dump(unsigned min_val) {
    int i;
    for(i = 0; i < frontstop; i++) {
    80c4:	e2844001 	add	r4, r4, #1
    80c8:	e5953000 	ldr	r3, [r5]
    80cc:	e1540003 	cmp	r4, r3
    80d0:	bafffff3 	blt	80a4 <gprof_dump+0x1c>
        if(gprof_hist[i].hit_count > min_val) {
            printk("PC %x has %d hits\n", gprof_hist[i].pc_entry,
                    gprof_hist[i].hit_count);
        }
    }
}
    80d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    80d8:	00009348 	andeq	r9, r0, r8, asr #6
    80dc:	0000990c 	andeq	r9, r0, ip, lsl #18
    80e0:	000093c4 	andeq	r9, r0, r4, asr #7

000080e4 <gprof_init>:
static hist_t* gprof_hist;
static int frontstop = -1;

// allocate table.
//    few lines of code
static unsigned gprof_init(void) {
    80e4:	e92d4008 	push	{r3, lr}
    // Allocate memory from heap
    gprof_hist = kmalloc_aligned(HIST_SIZE * sizeof(hist_t), 8);
    80e8:	e3a00801 	mov	r0, #65536	; 0x10000
    80ec:	e3a01008 	mov	r1, #8
    80f0:	eb0002e9 	bl	8c9c <kmalloc_aligned>
    80f4:	e59f302c 	ldr	r3, [pc, #44]	; 8128 <gprof_init+0x44>
    80f8:	e5830000 	str	r0, [r3]
    int i;
    
    // Clear out histogram with loop
    for(i = 0; i < HIST_SIZE; i++) {
    80fc:	e3a03000 	mov	r3, #0
    8100:	e59fc024 	ldr	ip, [pc, #36]	; 812c <gprof_init+0x48>
        gprof_hist[i].pc_entry = 0;
    8104:	e1a02003 	mov	r2, r3
    // Allocate memory from heap
    gprof_hist = kmalloc_aligned(HIST_SIZE * sizeof(hist_t), 8);
    int i;
    
    // Clear out histogram with loop
    for(i = 0; i < HIST_SIZE; i++) {
    8108:	ea000003 	b	811c <gprof_init+0x38>
        gprof_hist[i].pc_entry = 0;
    810c:	e0801183 	add	r1, r0, r3, lsl #3
    8110:	e7802183 	str	r2, [r0, r3, lsl #3]
        gprof_hist[i].hit_count = 0;
    8114:	e5812004 	str	r2, [r1, #4]
    // Allocate memory from heap
    gprof_hist = kmalloc_aligned(HIST_SIZE * sizeof(hist_t), 8);
    int i;
    
    // Clear out histogram with loop
    for(i = 0; i < HIST_SIZE; i++) {
    8118:	e2833001 	add	r3, r3, #1
    811c:	e153000c 	cmp	r3, ip
    8120:	dafffff9 	ble	810c <gprof_init+0x28>
        gprof_hist[i].pc_entry = 0;
        gprof_hist[i].hit_count = 0;
    }
    return (unsigned) gprof_hist;
}
    8124:	e8bd8008 	pop	{r3, pc}
    8128:	0000990c 	andeq	r9, r0, ip, lsl #18
    812c:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>

00008130 <interrupt_vector>:
// Q: if you make not volatile?
static volatile unsigned cnt;
static volatile unsigned period;

// client has to define this.
void interrupt_vector(unsigned pc) {
    8130:	e92d4038 	push	{r3, r4, r5, lr}
    8134:	e1a05000 	mov	r5, r0
    dev_barrier();
    8138:	eb00031c 	bl	8db0 <dev_barrier>
    unsigned pending = GET32(IRQ_basic_pending);
    813c:	e59f0050 	ldr	r0, [pc, #80]	; 8194 <interrupt_vector+0x64>
    8140:	eb00032e 	bl	8e00 <GET32>

    // if this isn't true, could be a GPU interrupt (as discussed in Broadcom):
    // just return.  [confusing, since we didn't enable!]
    if((pending & RPI_BASIC_ARM_TIMER_IRQ) == 0)
    8144:	e3100001 	tst	r0, #1
    8148:	08bd8038 	popeq	{r3, r4, r5, pc}
     * enabled, so we want don't have to work out which interrupt source
     * caused us to interrupt 
     *
     * Q: if we delete?
     */
    PUT32(arm_timer_IRQClear, 1);
    814c:	e59f0044 	ldr	r0, [pc, #68]	; 8198 <interrupt_vector+0x68>
    8150:	e3a01001 	mov	r1, #1
    8154:	eb00031d 	bl	8dd0 <PUT32>
    cnt++;
    8158:	e59f403c 	ldr	r4, [pc, #60]	; 819c <interrupt_vector+0x6c>
    815c:	e5943004 	ldr	r3, [r4, #4]
    8160:	e2833001 	add	r3, r3, #1
    8164:	e5843004 	str	r3, [r4, #4]

    gprof_inc(pc);
    8168:	e1a00005 	mov	r0, r5
    816c:	ebffffa7 	bl	8010 <gprof_inc>

    static unsigned last_clk = 0;
    unsigned clk = timer_get_usec();
    8170:	eb000296 	bl	8bd0 <timer_get_usec>
    period = last_clk ? clk - last_clk : 0;
    8174:	e5943008 	ldr	r3, [r4, #8]
    8178:	e3530000 	cmp	r3, #0
    817c:	10632000 	rsbne	r2, r3, r0
    8180:	03a02000 	moveq	r2, #0
    8184:	e59f3010 	ldr	r3, [pc, #16]	; 819c <interrupt_vector+0x6c>
    8188:	e583200c 	str	r2, [r3, #12]
    last_clk = clk;
    818c:	e5830008 	str	r0, [r3, #8]
    8190:	e8bd8038 	pop	{r3, r4, r5, pc}
    8194:	2000b200 	andcs	fp, r0, r0, lsl #4
    8198:	2000b40c 	andcs	fp, r0, ip, lsl #8
    819c:	0000990c 	andeq	r9, r0, ip, lsl #18

000081a0 <notmain>:
    // Q: if we put a print statement?
}

// trivial program to test gprof implementation.
// 	- look at output: do you see weird patterns?
void notmain() {
    81a0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    81a4:	e24dd008 	sub	sp, sp, #8
    uart_init();
    81a8:	eb000320 	bl	8e30 <uart_init>

    printk("about to install handlers\n");
    81ac:	e59f00a4 	ldr	r0, [pc, #164]	; 8258 <notmain+0xb8>
    81b0:	eb0000e7 	bl	8554 <printk>
    int_init();
    81b4:	eb00005b 	bl	8328 <int_init>

    printk("setting up timer interrupts\n");
    81b8:	e59f009c 	ldr	r0, [pc, #156]	; 825c <notmain+0xbc>
    81bc:	eb0000e4 	bl	8554 <printk>
    // Q: if you change 0x100?
    timer_interrupt_init(0x10);
    81c0:	e3a00010 	mov	r0, #16
    81c4:	eb0000d2 	bl	8514 <timer_interrupt_init>

    printk("gonna enable ints globally!\n");
    81c8:	e59f4090 	ldr	r4, [pc, #144]	; 8260 <notmain+0xc0>
    81cc:	e1a00004 	mov	r0, r4
    81d0:	eb0000df 	bl	8554 <printk>

    // Q: if you move these below interrupt enable?
    kmalloc_init();
    81d4:	eb0002d5 	bl	8d30 <kmalloc_init>
    gprof_init();
    81d8:	ebffffc1 	bl	80e4 <gprof_init>

    // Q: if you don't do?
    printk("gonna enable ints globally!\n");
    81dc:	e1a00004 	mov	r0, r4
    81e0:	eb0000db 	bl	8554 <printk>
    system_enable_interrupts();
    81e4:	eb000022 	bl	8274 <system_enable_interrupts>
    printk("enabled!\n");
    81e8:	e59f0074 	ldr	r0, [pc, #116]	; 8264 <notmain+0xc4>
    81ec:	eb0000d8 	bl	8554 <printk>

    // enable_cache(); 	// Q: what happens if you enable cache?
    unsigned iter = 0;
    81f0:	e3a04000 	mov	r4, #0
    while(cnt<200) {
    81f4:	e59f506c 	ldr	r5, [pc, #108]	; 8268 <notmain+0xc8>
        printk("iter=%d: cnt = %d, period = %dusec, %x\n",
    81f8:	e59f706c 	ldr	r7, [pc, #108]	; 826c <notmain+0xcc>
                iter,cnt, period,period);
        iter++;
        if(iter % 10 == 0)
    81fc:	e59f606c 	ldr	r6, [pc, #108]	; 8270 <notmain+0xd0>
            gprof_dump(2);
    8200:	e3a08002 	mov	r8, #2
    system_enable_interrupts();
    printk("enabled!\n");

    // enable_cache(); 	// Q: what happens if you enable cache?
    unsigned iter = 0;
    while(cnt<200) {
    8204:	ea00000f 	b	8248 <notmain+0xa8>
        printk("iter=%d: cnt = %d, period = %dusec, %x\n",
    8208:	e5952004 	ldr	r2, [r5, #4]
    820c:	e595300c 	ldr	r3, [r5, #12]
    8210:	e595100c 	ldr	r1, [r5, #12]
    8214:	e58d1000 	str	r1, [sp]
    8218:	e1a00007 	mov	r0, r7
    821c:	e1a01004 	mov	r1, r4
    8220:	eb0000cb 	bl	8554 <printk>
                iter,cnt, period,period);
        iter++;
    8224:	e2844001 	add	r4, r4, #1
        if(iter % 10 == 0)
    8228:	e0832496 	umull	r2, r3, r6, r4
    822c:	e1a031a3 	lsr	r3, r3, #3
    8230:	e0833103 	add	r3, r3, r3, lsl #2
    8234:	e1a03083 	lsl	r3, r3, #1
    8238:	e1540003 	cmp	r4, r3
    823c:	1a000001 	bne	8248 <notmain+0xa8>
            gprof_dump(2);
    8240:	e1a00008 	mov	r0, r8
    8244:	ebffff8f 	bl	8088 <gprof_dump>
    system_enable_interrupts();
    printk("enabled!\n");

    // enable_cache(); 	// Q: what happens if you enable cache?
    unsigned iter = 0;
    while(cnt<200) {
    8248:	e5953004 	ldr	r3, [r5, #4]
    824c:	e35300c7 	cmp	r3, #199	; 0xc7
    8250:	9affffec 	bls	8208 <notmain+0x68>
                iter,cnt, period,period);
        iter++;
        if(iter % 10 == 0)
            gprof_dump(2);
    }
    clean_reboot();
    8254:	eb00021d 	bl	8ad0 <clean_reboot>
    8258:	000093d8 	ldrdeq	r9, [r0], -r8
    825c:	000093f4 	strdeq	r9, [r0], -r4
    8260:	00009414 	andeq	r9, r0, r4, lsl r4
    8264:	00009434 	andeq	r9, r0, r4, lsr r4
    8268:	0000990c 	andeq	r9, r0, ip, lsl #18
    826c:	00009440 	andeq	r9, r0, r0, asr #8
    8270:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd

00008274 <system_enable_interrupts>:
    8274:	e10f0000 	mrs	r0, CPSR
    8278:	e3c00080 	bic	r0, r0, #128	; 0x80
    827c:	e121f000 	msr	CPSR_c, r0
    8280:	e12fff1e 	bx	lr

00008284 <system_disable_interrupts>:
    8284:	e10f0000 	mrs	r0, CPSR
    8288:	e3800080 	orr	r0, r0, #128	; 0x80
    828c:	e121f000 	msr	CPSR_c, r0
    8290:	e12fff1e 	bx	lr

00008294 <_interrupt_table>:
    8294:	e59ff030 	ldr	pc, [pc, #48]	; 82cc <_reset_asm>
    8298:	e59ff030 	ldr	pc, [pc, #48]	; 82d0 <_undefined_instruction_asm>
    829c:	e59ff030 	ldr	pc, [pc, #48]	; 82d4 <_software_interrupt_asm>
    82a0:	e59ff030 	ldr	pc, [pc, #48]	; 82d8 <_prefetch_abort_asm>
    82a4:	e59ff030 	ldr	pc, [pc, #48]	; 82dc <_data_abort_asm>
    82a8:	e59ff01c 	ldr	pc, [pc, #28]	; 82cc <_reset_asm>
    82ac:	e59ff02c 	ldr	pc, [pc, #44]	; 82e0 <_interrupt_asm>

000082b0 <fast_interrupt_asm>:
    82b0:	e24ee004 	sub	lr, lr, #4
    82b4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    82b8:	e92d1fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    82bc:	e1a0000e 	mov	r0, lr
    82c0:	eb000032 	bl	8390 <fast_interrupt_vector>
    82c4:	e8bd1fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    82c8:	e8fd8000 	ldm	sp!, {pc}^

000082cc <_reset_asm>:
    82cc:	00008300 	andeq	r8, r0, r0, lsl #6

000082d0 <_undefined_instruction_asm>:
    82d0:	00008308 	andeq	r8, r0, r8, lsl #6

000082d4 <_software_interrupt_asm>:
    82d4:	00008310 	andeq	r8, r0, r0, lsl r3

000082d8 <_prefetch_abort_asm>:
    82d8:	00008318 	andeq	r8, r0, r8, lsl r3

000082dc <_data_abort_asm>:
    82dc:	00008320 	andeq	r8, r0, r0, lsr #6

000082e0 <_interrupt_asm>:
    82e0:	000082e4 	andeq	r8, r0, r4, ror #5

000082e4 <_interrupt_table_end>:
    82e4:	e3a0d409 	mov	sp, #150994944	; 0x9000000
    82e8:	e24ee004 	sub	lr, lr, #4
    82ec:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    82f0:	e1a0000e 	mov	r0, lr
    82f4:	ebffff8d 	bl	8130 <interrupt_vector>
    82f8:	e8bd5fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    82fc:	e1b0f00e 	movs	pc, lr

00008300 <reset_asm>:
    8300:	e24ee004 	sub	lr, lr, #4
    8304:	eb00003f 	bl	8408 <reset_vector>

00008308 <undefined_instruction_asm>:
    8308:	e24ee004 	sub	lr, lr, #4
    830c:	eb00004c 	bl	8444 <undefined_instruction_vector>

00008310 <software_interrupt_asm>:
    8310:	e24ee004 	sub	lr, lr, #4
    8314:	eb00002c 	bl	83cc <software_interrupt_vector>

00008318 <prefetch_abort_asm>:
    8318:	e24ee004 	sub	lr, lr, #4
    831c:	eb000057 	bl	8480 <prefetch_abort_vector>

00008320 <data_abort_asm>:
    8320:	e24ee004 	sub	lr, lr, #4
    8324:	eb000064 	bl	84bc <data_abort_vector>

00008328 <int_init>:
#include "rpi.h"
#include "rpi-interrupts.h"

// initialize global interrupt state.
void int_init(void) {
    8328:	e92d4008 	push	{r3, lr}
    // put interrupt flags in known state. 
    //  BCM2835 manual, section 7.5
    PUT32(Disable_IRQs_1, 0xffffffff);
    832c:	e59f004c 	ldr	r0, [pc, #76]	; 8380 <int_init+0x58>
    8330:	e3e01000 	mvn	r1, #0
    8334:	eb0002a5 	bl	8dd0 <PUT32>
    PUT32(Disable_IRQs_2, 0xffffffff);
    8338:	e59f0044 	ldr	r0, [pc, #68]	; 8384 <int_init+0x5c>
    833c:	e3e01000 	mvn	r1, #0
    8340:	eb0002a2 	bl	8dd0 <PUT32>
    dev_barrier();
    8344:	eb000299 	bl	8db0 <dev_barrier>

    // where the interrupt handlers go.
#   define RPI_VECTOR_START  0
    unsigned *dst = (void*)RPI_VECTOR_START,
                 *src = &_interrupt_table,
                 n = &_interrupt_table_end - src;
    8348:	e59f3038 	ldr	r3, [pc, #56]	; 8388 <int_init+0x60>
    834c:	e59f0038 	ldr	r0, [pc, #56]	; 838c <int_init+0x64>
    8350:	e0630000 	rsb	r0, r3, r0
    8354:	e1a00140 	asr	r0, r0, #2
    for(int i = 0; i < n; i++)
    8358:	e3a03000 	mov	r3, #0
        dst[i] = src[i];
    835c:	e59fc024 	ldr	ip, [pc, #36]	; 8388 <int_init+0x60>
    // where the interrupt handlers go.
#   define RPI_VECTOR_START  0
    unsigned *dst = (void*)RPI_VECTOR_START,
                 *src = &_interrupt_table,
                 n = &_interrupt_table_end - src;
    for(int i = 0; i < n; i++)
    8360:	ea000003 	b	8374 <int_init+0x4c>
        dst[i] = src[i];
    8364:	e1a02103 	lsl	r2, r3, #2
    8368:	e79c1103 	ldr	r1, [ip, r3, lsl #2]
    836c:	e5821000 	str	r1, [r2]
    // where the interrupt handlers go.
#   define RPI_VECTOR_START  0
    unsigned *dst = (void*)RPI_VECTOR_START,
                 *src = &_interrupt_table,
                 n = &_interrupt_table_end - src;
    for(int i = 0; i < n; i++)
    8370:	e2833001 	add	r3, r3, #1
    8374:	e1530000 	cmp	r3, r0
    8378:	3afffff9 	bcc	8364 <int_init+0x3c>
        dst[i] = src[i];
}
    837c:	e8bd8008 	pop	{r3, pc}
    8380:	2000b21c 	andcs	fp, r0, ip, lsl r2
    8384:	2000b220 	andcs	fp, r0, r0, lsr #4
    8388:	00008294 	muleq	r0, r4, r2
    838c:	000082e4 	andeq	r8, r0, r4, ror #5

00008390 <fast_interrupt_vector>:

#define UNHANDLED(msg,r) \
	panic("ERROR: unhandled exception <%s> at PC=%x\n", msg,r)
void fast_interrupt_vector(unsigned pc) {
    8390:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8394:	e24dd00c 	sub	sp, sp, #12
	UNHANDLED("fast", pc);
    8398:	e59f301c 	ldr	r3, [pc, #28]	; 83bc <fast_interrupt_vector+0x2c>
    839c:	e58d3000 	str	r3, [sp]
    83a0:	e58d0004 	str	r0, [sp, #4]
    83a4:	e59f0014 	ldr	r0, [pc, #20]	; 83c0 <fast_interrupt_vector+0x30>
    83a8:	e59f1014 	ldr	r1, [pc, #20]	; 83c4 <fast_interrupt_vector+0x34>
    83ac:	e59f2014 	ldr	r2, [pc, #20]	; 83c8 <fast_interrupt_vector+0x38>
    83b0:	e3a03020 	mov	r3, #32
    83b4:	eb000066 	bl	8554 <printk>
    83b8:	eb0001c4 	bl	8ad0 <clean_reboot>
    83bc:	00009544 	andeq	r9, r0, r4, asr #10
    83c0:	000094f8 	strdeq	r9, [r0], -r8
    83c4:	00009534 	andeq	r9, r0, r4, lsr r5
    83c8:	00009468 	andeq	r9, r0, r8, ror #8

000083cc <software_interrupt_vector>:
}

// this is used for syscalls.
void software_interrupt_vector(unsigned pc) {
    83cc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    83d0:	e24dd00c 	sub	sp, sp, #12
	UNHANDLED("soft interrupt", pc);
    83d4:	e59f301c 	ldr	r3, [pc, #28]	; 83f8 <software_interrupt_vector+0x2c>
    83d8:	e58d3000 	str	r3, [sp]
    83dc:	e58d0004 	str	r0, [sp, #4]
    83e0:	e59f0014 	ldr	r0, [pc, #20]	; 83fc <software_interrupt_vector+0x30>
    83e4:	e59f1014 	ldr	r1, [pc, #20]	; 8400 <software_interrupt_vector+0x34>
    83e8:	e59f2014 	ldr	r2, [pc, #20]	; 8404 <software_interrupt_vector+0x38>
    83ec:	e3a03025 	mov	r3, #37	; 0x25
    83f0:	eb000057 	bl	8554 <printk>
    83f4:	eb0001b5 	bl	8ad0 <clean_reboot>
    83f8:	0000954c 	andeq	r9, r0, ip, asr #10
    83fc:	000094f8 	strdeq	r9, [r0], -r8
    8400:	00009534 	andeq	r9, r0, r4, lsr r5
    8404:	00009480 	andeq	r9, r0, r0, lsl #9

00008408 <reset_vector>:
}
void reset_vector(unsigned pc) {
    8408:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    840c:	e24dd00c 	sub	sp, sp, #12
	UNHANDLED("reset vector", pc);
    8410:	e59f301c 	ldr	r3, [pc, #28]	; 8434 <reset_vector+0x2c>
    8414:	e58d3000 	str	r3, [sp]
    8418:	e58d0004 	str	r0, [sp, #4]
    841c:	e59f0014 	ldr	r0, [pc, #20]	; 8438 <reset_vector+0x30>
    8420:	e59f1014 	ldr	r1, [pc, #20]	; 843c <reset_vector+0x34>
    8424:	e59f2014 	ldr	r2, [pc, #20]	; 8440 <reset_vector+0x38>
    8428:	e3a03028 	mov	r3, #40	; 0x28
    842c:	eb000048 	bl	8554 <printk>
    8430:	eb0001a6 	bl	8ad0 <clean_reboot>
    8434:	0000955c 	andeq	r9, r0, ip, asr r5
    8438:	000094f8 	strdeq	r9, [r0], -r8
    843c:	00009534 	andeq	r9, r0, r4, lsr r5
    8440:	0000949c 	muleq	r0, ip, r4

00008444 <undefined_instruction_vector>:
}
void undefined_instruction_vector(unsigned pc) {
    8444:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8448:	e24dd00c 	sub	sp, sp, #12
	UNHANDLED("undefined instruction", pc);
    844c:	e59f301c 	ldr	r3, [pc, #28]	; 8470 <undefined_instruction_vector+0x2c>
    8450:	e58d3000 	str	r3, [sp]
    8454:	e58d0004 	str	r0, [sp, #4]
    8458:	e59f0014 	ldr	r0, [pc, #20]	; 8474 <undefined_instruction_vector+0x30>
    845c:	e59f1014 	ldr	r1, [pc, #20]	; 8478 <undefined_instruction_vector+0x34>
    8460:	e59f2014 	ldr	r2, [pc, #20]	; 847c <undefined_instruction_vector+0x38>
    8464:	e3a0302b 	mov	r3, #43	; 0x2b
    8468:	eb000039 	bl	8554 <printk>
    846c:	eb000197 	bl	8ad0 <clean_reboot>
    8470:	0000956c 	andeq	r9, r0, ip, ror #10
    8474:	000094f8 	strdeq	r9, [r0], -r8
    8478:	00009534 	andeq	r9, r0, r4, lsr r5
    847c:	000094ac 	andeq	r9, r0, ip, lsr #9

00008480 <prefetch_abort_vector>:
}
void prefetch_abort_vector(unsigned pc) {
    8480:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8484:	e24dd00c 	sub	sp, sp, #12
	UNHANDLED("prefetch abort", pc);
    8488:	e59f301c 	ldr	r3, [pc, #28]	; 84ac <prefetch_abort_vector+0x2c>
    848c:	e58d3000 	str	r3, [sp]
    8490:	e58d0004 	str	r0, [sp, #4]
    8494:	e59f0014 	ldr	r0, [pc, #20]	; 84b0 <prefetch_abort_vector+0x30>
    8498:	e59f1014 	ldr	r1, [pc, #20]	; 84b4 <prefetch_abort_vector+0x34>
    849c:	e59f2014 	ldr	r2, [pc, #20]	; 84b8 <prefetch_abort_vector+0x38>
    84a0:	e3a0302e 	mov	r3, #46	; 0x2e
    84a4:	eb00002a 	bl	8554 <printk>
    84a8:	eb000188 	bl	8ad0 <clean_reboot>
    84ac:	00009584 	andeq	r9, r0, r4, lsl #11
    84b0:	000094f8 	strdeq	r9, [r0], -r8
    84b4:	00009534 	andeq	r9, r0, r4, lsr r5
    84b8:	000094cc 	andeq	r9, r0, ip, asr #9

000084bc <data_abort_vector>:
}
void data_abort_vector(unsigned pc) {
    84bc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    84c0:	e24dd00c 	sub	sp, sp, #12
	UNHANDLED("data abort", pc);
    84c4:	e59f301c 	ldr	r3, [pc, #28]	; 84e8 <data_abort_vector+0x2c>
    84c8:	e58d3000 	str	r3, [sp]
    84cc:	e58d0004 	str	r0, [sp, #4]
    84d0:	e59f0014 	ldr	r0, [pc, #20]	; 84ec <data_abort_vector+0x30>
    84d4:	e59f1014 	ldr	r1, [pc, #20]	; 84f0 <data_abort_vector+0x34>
    84d8:	e59f2014 	ldr	r2, [pc, #20]	; 84f4 <data_abort_vector+0x38>
    84dc:	e3a03031 	mov	r3, #49	; 0x31
    84e0:	eb00001b 	bl	8554 <printk>
    84e4:	eb000179 	bl	8ad0 <clean_reboot>
    84e8:	00009594 	muleq	r0, r4, r5
    84ec:	000094f8 	strdeq	r9, [r0], -r8
    84f0:	00009534 	andeq	r9, r0, r4, lsr r5
    84f4:	000094e4 	andeq	r9, r0, r4, ror #9

000084f8 <timer_check_offsets>:
    // ready.
}

// Q: how does the libpi/libc/assert.h:AssertNow macro work?
// Q: what happens / why when you change some of these constants?
static void timer_check_offsets(void) {
    84f8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    84fc:	e24dd01c 	sub	sp, sp, #28
    check_bitfield(rpi_arm_timer_ctrl_t, int_enabled,        5, 1);
    check_bitfield(rpi_arm_timer_ctrl_t, timer_enabled,      7, 1);
    check_bitfield(rpi_arm_timer_ctrl_t, counter_enabled,    9, 1);
    check_bitfield(rpi_arm_timer_ctrl_t, counter_prescaler,          16, 7);
    AssertNow(sizeof(rpi_arm_timer_ctrl_t) == 4);
    printk("offsets checked out!\n");
    8500:	e59f0008 	ldr	r0, [pc, #8]	; 8510 <timer_check_offsets+0x18>
    8504:	eb000012 	bl	8554 <printk>
}
    8508:	e28dd01c 	add	sp, sp, #28
    850c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    8510:	000096d0 	ldrdeq	r9, [r0], -r0

00008514 <timer_interrupt_init>:
// macros to help deal with structures and put/get
#include "libc/helper-macros.h"

static void timer_check_offsets(void);

void timer_interrupt_init(unsigned ncycles) {
    8514:	e92d4010 	push	{r4, lr}
    8518:	e1a04000 	mov	r4, r0
    timer_check_offsets();
    851c:	ebfffff5 	bl	84f8 <timer_check_offsets>

    // from valvers:
    //	 Enable the timer interrupt IRQ
    PUT32(Enable_Basic_IRQs, RPI_BASIC_ARM_TIMER_IRQ);
    8520:	e59f0020 	ldr	r0, [pc, #32]	; 8548 <timer_interrupt_init+0x34>
    8524:	e3a01001 	mov	r1, #1
    8528:	eb000228 	bl	8dd0 <PUT32>

    /* Setup the system timer interrupt */
    /* Timer frequency = Clk/256 * Load --- so smaller = more frequent. */
    PUT32(arm_timer_Load, ncycles);
    852c:	e59f0018 	ldr	r0, [pc, #24]	; 854c <timer_interrupt_init+0x38>
    8530:	e1a01004 	mov	r1, r4
    8534:	eb000225 	bl	8dd0 <PUT32>

    // Setup the ARM Timer: experiment by changing the prescale [defined on p197]
#if 1
    PUT32(arm_timer_Control,
    8538:	e59f0010 	ldr	r0, [pc, #16]	; 8550 <timer_interrupt_init+0x3c>
    853c:	e3a010aa 	mov	r1, #170	; 0xaa
    8540:	eb000222 	bl	8dd0 <PUT32>
    8544:	e8bd8010 	pop	{r4, pc}
    8548:	2000b218 	andcs	fp, r0, r8, lsl r2
    854c:	2000b400 	andcs	fp, r0, r0, lsl #8
    8550:	2000b408 	andcs	fp, r0, r8, lsl #8

00008554 <printk>:
#include <stdarg.h>

#include "rpi.h"
#include "va-printk.h"

int printk(const char *fmt, ...) {
    8554:	e92d000f 	push	{r0, r1, r2, r3}
    8558:	e92d4030 	push	{r4, r5, lr}
    855c:	e24dd00c 	sub	sp, sp, #12
    // this is a really huge buffer for a pi.   could do this better.
    static char buf[1024];
    va_list args;

    va_start(args, fmt);
    8560:	e28d301c 	add	r3, sp, #28
    8564:	e58d3004 	str	r3, [sp, #4]
        int sz = va_printk(buf, sizeof buf, fmt, args);
    8568:	e59f4034 	ldr	r4, [pc, #52]	; 85a4 <printk+0x50>
    856c:	e1a00004 	mov	r0, r4
    8570:	e3a01b01 	mov	r1, #1024	; 0x400
    8574:	e59d2018 	ldr	r2, [sp, #24]
    8578:	eb0000b2 	bl	8848 <va_printk>
    857c:	e1a05000 	mov	r5, r0
    va_end(args);


#if 1
    putk(buf);
    8580:	e59f3020 	ldr	r3, [pc, #32]	; 85a8 <printk+0x54>
    8584:	e5933000 	ldr	r3, [r3]
    8588:	e1a00004 	mov	r0, r4
    858c:	e12fff33 	blx	r3
    int i;
    for(i = 0; buf[i]; i++)
        rpi_putchar(buf[i]);
#endif
    return sz;
}
    8590:	e1a00005 	mov	r0, r5
    8594:	e28dd00c 	add	sp, sp, #12
    8598:	e8bd4030 	pop	{r4, r5, lr}
    859c:	e28dd010 	add	sp, sp, #16
    85a0:	e12fff1e 	bx	lr
    85a4:	0000991c 	andeq	r9, r0, ip, lsl r9
    85a8:	0000934c 	andeq	r9, r0, ip, asr #6

000085ac <internal_putk>:
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    85ac:	e92d4038 	push	{r3, r4, r5, lr}
    85b0:	e1a04000 	mov	r4, r0
    for(; *p; p++)
        rpi_putchar(*p);
    85b4:	e59f5020 	ldr	r5, [pc, #32]	; 85dc <internal_putk+0x30>
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    85b8:	ea000002 	b	85c8 <internal_putk+0x1c>
        rpi_putchar(*p);
    85bc:	e5953000 	ldr	r3, [r5]
    85c0:	e12fff33 	blx	r3
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    85c4:	e2844001 	add	r4, r4, #1
    85c8:	e5d40000 	ldrb	r0, [r4]
    85cc:	e3500000 	cmp	r0, #0
    85d0:	1afffff9 	bne	85bc <internal_putk+0x10>
        rpi_putchar(*p);
//  we were adding this.
//  rpi_putchar('\n');
    return 1;
}
    85d4:	e3a00001 	mov	r0, #1
    85d8:	e8bd8038 	pop	{r3, r4, r5, pc}
    85dc:	000093c0 	andeq	r9, r0, r0, asr #7

000085e0 <isdigit>:
    if(puts_fp)
        putk = puts_fp;
}

// XXX: check sign promotion.
static int isdigit(int c) { return c >= '0' && c <= '9'; }
    85e0:	e2400030 	sub	r0, r0, #48	; 0x30
    85e4:	e3500009 	cmp	r0, #9
    85e8:	83a00000 	movhi	r0, #0
    85ec:	93a00001 	movls	r0, #1
    85f0:	e12fff1e 	bx	lr

000085f4 <pad>:

// don't move: can't be inlined, gcc seems to have a bug.
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
    85f4:	e0611000 	rsb	r1, r1, r0
	// pad with leading spaces
	for(; len < width; len++)
		*p++ = ' ';
    85f8:	e3a03020 	mov	r3, #32
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    85fc:	ea000002 	b	860c <pad+0x18>
		*p++ = ' ';
    8600:	e5c03000 	strb	r3, [r0]
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8604:	e2811001 	add	r1, r1, #1
		*p++ = ' ';
    8608:	e2800001 	add	r0, r0, #1
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    860c:	e1510002 	cmp	r1, r2
    8610:	bafffffa 	blt	8600 <pad+0xc>
		*p++ = ' ';
	*p = 0;
    8614:	e3a03000 	mov	r3, #0
    8618:	e5c03000 	strb	r3, [r0]
	return p;
}
    861c:	e12fff1e 	bx	lr

00008620 <reverse>:

static char* reverse(char *dst, int n, char *p, char *start) {
	// drop the lower chars if the string is too big.
	int len = p - start + 1; // include \0
    8620:	e063c002 	rsb	ip, r3, r2
    8624:	e28cc001 	add	ip, ip, #1
	if(len > n)
    8628:	e15c0001 	cmp	ip, r1
		start += (len - n);
    862c:	c061100c 	rsbgt	r1, r1, ip
    8630:	c0833001 	addgt	r3, r3, r1

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    8634:	e2422001 	sub	r2, r2, #1
    8638:	e1a01000 	mov	r1, r0
    863c:	ea000002 	b	864c <reverse+0x2c>
		*dst++ = *p;
    8640:	e452c001 	ldrb	ip, [r2], #-1
    8644:	e5c1c000 	strb	ip, [r1]
    8648:	e2811001 	add	r1, r1, #1
		start += (len - n);

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    864c:	e1520003 	cmp	r2, r3
    8650:	2afffffa 	bcs	8640 <reverse+0x20>
		*dst++ = *p;
	*dst++ = 0;
    8654:	e3a03000 	mov	r3, #0
    8658:	e5c13000 	strb	r3, [r1]

	return s;
}
    865c:	e12fff1e 	bx	lr

00008660 <emit>:

static char* emit(unsigned base, char *dst, int n, int val, int width, int signed_p) {
    8660:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8664:	e24dd040 	sub	sp, sp, #64	; 0x40
    8668:	e1a05001 	mov	r5, r1
    866c:	e1a04002 	mov	r4, r2
    8670:	e59d2058 	ldr	r2, [sp, #88]	; 0x58
	// XXX: constrain width to be >= bit size: can change this.
	if(width > n)
    8674:	e1520004 	cmp	r2, r4
		width = n - 1;
    8678:	c2442001 	subgt	r2, r4, #1

	char buf[64], *p = buf; 
	unsigned u = val;
    867c:	e1a0c003 	mov	ip, r3

	switch(base) { 
    8680:	e2400002 	sub	r0, r0, #2
    8684:	e350000e 	cmp	r0, #14
    8688:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
    868c:	ea000042 	b	879c <emit+0x13c>
    8690:	00008774 	andeq	r8, r0, r4, ror r7
    8694:	0000879c 	muleq	r0, ip, r7
    8698:	0000879c 	muleq	r0, ip, r7
    869c:	0000879c 	muleq	r0, ip, r7
    86a0:	0000879c 	muleq	r0, ip, r7
    86a4:	0000879c 	muleq	r0, ip, r7
    86a8:	00008768 	andeq	r8, r0, r8, ror #14
    86ac:	0000879c 	muleq	r0, ip, r7
    86b0:	000086cc 	andeq	r8, r0, ip, asr #13
    86b4:	0000879c 	muleq	r0, ip, r7
    86b8:	0000879c 	muleq	r0, ip, r7
    86bc:	0000879c 	muleq	r0, ip, r7
    86c0:	0000879c 	muleq	r0, ip, r7
    86c4:	0000879c 	muleq	r0, ip, r7
    86c8:	00008740 	andeq	r8, r0, r0, asr #14
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
    86cc:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
    86d0:	e2911000 	adds	r1, r1, #0
    86d4:	13a01001 	movne	r1, #1
    86d8:	e0111fa3 	ands	r1, r1, r3, lsr #31
				neg_p = 1;
				val = -val;
    86dc:	1263c000 	rsbne	ip, r3, #0
	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
				neg_p = 1;
    86e0:	13a08001 	movne	r8, #1
	unsigned u = val;

	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
    86e4:	03a08000 	moveq	r8, #0
			if(val < 0 && signed_p) {
				neg_p = 1;
    86e8:	e1a0100d 	mov	r1, sp
				val = -val;
				u = val;
			}
			do { 
				*p++ = "0123456789"[u % 10];
    86ec:	e59f70e8 	ldr	r7, [pc, #232]	; 87dc <emit+0x17c>
    86f0:	e59f60e8 	ldr	r6, [pc, #232]	; 87e0 <emit+0x180>
    86f4:	ea000000 	b	86fc <emit+0x9c>
    86f8:	e1a01003 	mov	r1, r3
    86fc:	e2813001 	add	r3, r1, #1
    8700:	e08e0c97 	umull	r0, lr, r7, ip
    8704:	e1a0e1ae 	lsr	lr, lr, #3
    8708:	e1a0000e 	mov	r0, lr
    870c:	e08ee10e 	add	lr, lr, lr, lsl #2
    8710:	e1a0e08e 	lsl	lr, lr, #1
    8714:	e06ee00c 	rsb	lr, lr, ip
    8718:	e7d6c00e 	ldrb	ip, [r6, lr]
    871c:	e5c1c000 	strb	ip, [r1]
			} while(u /= 10); 
    8720:	e1a0c000 	mov	ip, r0
    8724:	e3500000 	cmp	r0, #0
    8728:	1afffff2 	bne	86f8 <emit+0x98>
			if(neg_p)
    872c:	e3580000 	cmp	r8, #0
				*p++ = '-';
    8730:	12813002 	addne	r3, r1, #2
    8734:	13a0002d 	movne	r0, #45	; 0x2d
    8738:	15c10001 	strbne	r0, [r1, #1]
    873c:	ea00001c 	b	87b4 <emit+0x154>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    8740:	e1a0e00d 	mov	lr, sp
			break;
		}
		case 16:
			u = val;
                        do {
                                *p++ = "0123456789abcdef"[u % 16];
    8744:	e59f0098 	ldr	r0, [pc, #152]	; 87e4 <emit+0x184>
    8748:	e28e3001 	add	r3, lr, #1
    874c:	e20c100f 	and	r1, ip, #15
    8750:	e7d01001 	ldrb	r1, [r0, r1]
    8754:	e5ce1000 	strb	r1, [lr]
    8758:	e1a0e003 	mov	lr, r3
                        } while(u /= 16);
    875c:	e1b0c22c 	lsrs	ip, ip, #4
    8760:	1afffff8 	bne	8748 <emit+0xe8>
    8764:	ea000012 	b	87b4 <emit+0x154>
                        break;
		// just a single char
		case 8:
			*p++ = val;
    8768:	e5cd3000 	strb	r3, [sp]
    876c:	e28d3001 	add	r3, sp, #1
			break;
    8770:	ea00000f 	b	87b4 <emit+0x154>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    8774:	e1a0e00d 	mov	lr, sp
#if 0
			for(int i = 0; i < 32; i++)
				*p++ = "01"[(u & (1<<i)) != 0];
#else
                        do {
                        	*p++ = "01"[u % 2];
    8778:	e59f0068 	ldr	r0, [pc, #104]	; 87e8 <emit+0x188>
    877c:	e28e3001 	add	r3, lr, #1
    8780:	e20c1001 	and	r1, ip, #1
    8784:	e7d01001 	ldrb	r1, [r0, r1]
    8788:	e5ce1000 	strb	r1, [lr]
    878c:	e1a0e003 	mov	lr, r3
			} while(u /= 2);
    8790:	e1b0c0ac 	lsrs	ip, ip, #1
    8794:	1afffff8 	bne	877c <emit+0x11c>
    8798:	ea000005 	b	87b4 <emit+0x154>
#endif
			break;
		default:
			assert(0);
    879c:	e59f0048 	ldr	r0, [pc, #72]	; 87ec <emit+0x18c>
    87a0:	e59f1048 	ldr	r1, [pc, #72]	; 87f0 <emit+0x190>
    87a4:	e59f2048 	ldr	r2, [pc, #72]	; 87f4 <emit+0x194>
    87a8:	e3a03075 	mov	r3, #117	; 0x75
    87ac:	ebffff68 	bl	8554 <printk>
    87b0:	eb0000c6 	bl	8ad0 <clean_reboot>
	}
	// number string is reversed, so re-reverse it.
	return reverse(dst, n, pad(p, buf, width), buf);
    87b4:	e1a00003 	mov	r0, r3
    87b8:	e1a0100d 	mov	r1, sp
    87bc:	ebffff8c 	bl	85f4 <pad>
    87c0:	e1a02000 	mov	r2, r0
    87c4:	e1a00005 	mov	r0, r5
    87c8:	e1a01004 	mov	r1, r4
    87cc:	e1a0300d 	mov	r3, sp
    87d0:	ebffff92 	bl	8620 <reverse>
}
    87d4:	e28dd040 	add	sp, sp, #64	; 0x40
    87d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    87dc:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    87e0:	00009734 	andeq	r9, r0, r4, lsr r7
    87e4:	00009740 	andeq	r9, r0, r0, asr #14
    87e8:	00009754 	andeq	r9, r0, r4, asr r7
    87ec:	0000970c 	andeq	r9, r0, ip, lsl #14
    87f0:	00009720 	andeq	r9, r0, r0, lsr #14
    87f4:	000096e8 	andeq	r9, r0, r8, ror #13

000087f8 <rpi_set_output>:
// override this is going through the network.
int (*rpi_putchar)(int c) = internal_putchar;
#endif


void rpi_set_output(int (*putc_fp)(int), int (*puts_fp)(const char *)) {
    87f8:	e92d4008 	push	{r3, lr}
    assert(putc_fp);
    87fc:	e3500000 	cmp	r0, #0
    8800:	1a000005 	bne	881c <rpi_set_output+0x24>
    8804:	e59f0028 	ldr	r0, [pc, #40]	; 8834 <rpi_set_output+0x3c>
    8808:	e59f1028 	ldr	r1, [pc, #40]	; 8838 <rpi_set_output+0x40>
    880c:	e59f2028 	ldr	r2, [pc, #40]	; 883c <rpi_set_output+0x44>
    8810:	e3a03020 	mov	r3, #32
    8814:	ebffff4e 	bl	8554 <printk>
    8818:	eb0000ac 	bl	8ad0 <clean_reboot>
    rpi_putchar = putc_fp;
    881c:	e59f301c 	ldr	r3, [pc, #28]	; 8840 <rpi_set_output+0x48>
    8820:	e5830000 	str	r0, [r3]
    if(puts_fp)
    8824:	e3510000 	cmp	r1, #0
        putk = puts_fp;
    8828:	159f3014 	ldrne	r3, [pc, #20]	; 8844 <rpi_set_output+0x4c>
    882c:	15831000 	strne	r1, [r3]
    8830:	e8bd8008 	pop	{r3, pc}
    8834:	00009758 	andeq	r9, r0, r8, asr r7
    8838:	00009720 	andeq	r9, r0, r0, lsr #14
    883c:	000096f0 	strdeq	r9, [r0], -r0
    8840:	000093c0 	andeq	r9, r0, r0, asr #7
    8844:	0000934c 	andeq	r9, r0, ip, asr #6

00008848 <va_printk>:
	return reverse(dst, n, pad(p, buf, width), buf);
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
    8848:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    884c:	e24dd08c 	sub	sp, sp, #140	; 0x8c
    8850:	e1a0b000 	mov	fp, r0
    8854:	e1a0a003 	mov	sl, r3
	char *p = buf, *e = buf + n - 1;
    8858:	e2411001 	sub	r1, r1, #1
    885c:	e0808001 	add	r8, r0, r1

	buf[0] = 0;
    8860:	e3a03000 	mov	r3, #0
    8864:	e5c03000 	strb	r3, [r0]
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;
    8868:	e1a04000 	mov	r4, r0

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    886c:	ea000087 	b	8a90 <va_printk+0x248>
		if(*fmt != '%')
    8870:	e3530025 	cmp	r3, #37	; 0x25
			*p++ = *fmt++;
    8874:	12822001 	addne	r2, r2, #1
    8878:	15c43000 	strbne	r3, [r4]
    887c:	12844001 	addne	r4, r4, #1
    8880:	1a000082 	bne	8a90 <va_printk+0x248>
		
		else if(fmt[1] == '%') {
    8884:	e5d21001 	ldrb	r1, [r2, #1]
    8888:	e3510025 	cmp	r1, #37	; 0x25
			*p++ = *fmt;
    888c:	05c43000 	strbeq	r3, [r4]
			fmt+=2;
    8890:	02822002 	addeq	r2, r2, #2
	for(; *fmt && p < e; ) {
		if(*fmt != '%')
			*p++ = *fmt++;
		
		else if(fmt[1] == '%') {
			*p++ = *fmt;
    8894:	02844001 	addeq	r4, r4, #1
    8898:	0a00007c 	beq	8a90 <va_printk+0x248>
			fmt+=2;
		} else {	
			fmt++;
    889c:	e2826001 	add	r6, r2, #1

			char *s, num[128];
			unsigned width = 0;
    88a0:	e3a07000 	mov	r7, #0

			while(isdigit(*fmt)) {
    88a4:	ea000004 	b	88bc <va_printk+0x74>
				width = width*10 + *fmt - '0';
    88a8:	e0877107 	add	r7, r7, r7, lsl #2
    88ac:	e1a07087 	lsl	r7, r7, #1
    88b0:	e0877005 	add	r7, r7, r5
    88b4:	e2477030 	sub	r7, r7, #48	; 0x30
				fmt++;
    88b8:	e2866001 	add	r6, r6, #1
			fmt++;

			char *s, num[128];
			unsigned width = 0;

			while(isdigit(*fmt)) {
    88bc:	e5d65000 	ldrb	r5, [r6]
    88c0:	e1a09005 	mov	r9, r5
    88c4:	e1a00005 	mov	r0, r5
    88c8:	ebffff44 	bl	85e0 <isdigit>
    88cc:	e3500000 	cmp	r0, #0
    88d0:	1afffff4 	bne	88a8 <va_printk+0x60>
				width = width*10 + *fmt - '0';
				fmt++;
			}
			assert(width < 32);
    88d4:	e357001f 	cmp	r7, #31
    88d8:	9a000005 	bls	88f4 <va_printk+0xac>
    88dc:	e59f01d8 	ldr	r0, [pc, #472]	; 8abc <va_printk+0x274>
    88e0:	e59f11d8 	ldr	r1, [pc, #472]	; 8ac0 <va_printk+0x278>
    88e4:	e59f21d8 	ldr	r2, [pc, #472]	; 8ac4 <va_printk+0x27c>
    88e8:	e3a03092 	mov	r3, #146	; 0x92
    88ec:	ebffff18 	bl	8554 <printk>
    88f0:	eb000076 	bl	8ad0 <clean_reboot>
			
			switch(*fmt) {
    88f4:	e2455062 	sub	r5, r5, #98	; 0x62
    88f8:	e3550016 	cmp	r5, #22
    88fc:	979ff105 	ldrls	pc, [pc, r5, lsl #2]
    8900:	ea000051 	b	8a4c <va_printk+0x204>
    8904:	000089f0 	strdeq	r8, [r0], -r0
    8908:	00008a24 	andeq	r8, r0, r4, lsr #20
    890c:	00008978 	andeq	r8, r0, r8, ror r9
    8910:	00008a4c 	andeq	r8, r0, ip, asr #20
    8914:	00008960 	andeq	r8, r0, r0, ror #18
    8918:	00008a4c 	andeq	r8, r0, ip, asr #20
    891c:	00008a4c 	andeq	r8, r0, ip, asr #20
    8920:	00008a4c 	andeq	r8, r0, ip, asr #20
    8924:	00008a4c 	andeq	r8, r0, ip, asr #20
    8928:	00008a4c 	andeq	r8, r0, ip, asr #20
    892c:	00008a4c 	andeq	r8, r0, ip, asr #20
    8930:	00008a4c 	andeq	r8, r0, ip, asr #20
    8934:	00008a4c 	andeq	r8, r0, ip, asr #20
    8938:	00008a4c 	andeq	r8, r0, ip, asr #20
    893c:	000089c8 	andeq	r8, r0, r8, asr #19
    8940:	00008a4c 	andeq	r8, r0, ip, asr #20
    8944:	00008a4c 	andeq	r8, r0, ip, asr #20
    8948:	00008a18 	andeq	r8, r0, r8, lsl sl
    894c:	00008a4c 	andeq	r8, r0, ip, asr #20
    8950:	000089a0 	andeq	r8, r0, r0, lsr #19
    8954:	00008a4c 	andeq	r8, r0, ip, asr #20
    8958:	00008a4c 	andeq	r8, r0, ip, asr #20
    895c:	000089c8 	andeq	r8, r0, r8, asr #19
			case 'f':
			{
#ifndef RPI_FP_ENABLED
				panic("float not enabled!!!");
    8960:	e59f0160 	ldr	r0, [pc, #352]	; 8ac8 <va_printk+0x280>
    8964:	e59f1154 	ldr	r1, [pc, #340]	; 8ac0 <va_printk+0x278>
    8968:	e59f2154 	ldr	r2, [pc, #340]	; 8ac4 <va_printk+0x27c>
    896c:	e3a03098 	mov	r3, #152	; 0x98
    8970:	ebfffef7 	bl	8554 <printk>
    8974:	eb000055 	bl	8ad0 <clean_reboot>

				break;
#endif
			}
			case 'd':
				s = emit(10, num, 128, va_arg(args, int), width, 1);
    8978:	e59a3000 	ldr	r3, [sl]
    897c:	e28aa004 	add	sl, sl, #4
    8980:	e58d7000 	str	r7, [sp]
    8984:	e3a02001 	mov	r2, #1
    8988:	e58d2004 	str	r2, [sp, #4]
    898c:	e3a0000a 	mov	r0, #10
    8990:	e28d1008 	add	r1, sp, #8
    8994:	e3a02080 	mov	r2, #128	; 0x80
    8998:	ebffff30 	bl	8660 <emit>
				break;
    899c:	ea000031 	b	8a68 <va_printk+0x220>
			case 'u':
				s = emit(10, num, 128, va_arg(args, unsigned), width, 0);
    89a0:	e59a3000 	ldr	r3, [sl]
    89a4:	e28aa004 	add	sl, sl, #4
    89a8:	e58d7000 	str	r7, [sp]
    89ac:	e3a02000 	mov	r2, #0
    89b0:	e58d2004 	str	r2, [sp, #4]
    89b4:	e3a0000a 	mov	r0, #10
    89b8:	e28d1008 	add	r1, sp, #8
    89bc:	e3a02080 	mov	r2, #128	; 0x80
    89c0:	ebffff26 	bl	8660 <emit>
				break;
    89c4:	ea000027 	b	8a68 <va_printk+0x220>
			case 'p':
			case 'x':
				s = emit(16, num, 128, va_arg(args, unsigned), width, 0);
    89c8:	e59a3000 	ldr	r3, [sl]
    89cc:	e28aa004 	add	sl, sl, #4
    89d0:	e58d7000 	str	r7, [sp]
    89d4:	e3a02000 	mov	r2, #0
    89d8:	e58d2004 	str	r2, [sp, #4]
    89dc:	e3a00010 	mov	r0, #16
    89e0:	e28d1008 	add	r1, sp, #8
    89e4:	e3a02080 	mov	r2, #128	; 0x80
    89e8:	ebffff1c 	bl	8660 <emit>
				break;
    89ec:	ea00001d 	b	8a68 <va_printk+0x220>
			case 'b':
				s = emit(2, num, 128, va_arg(args, unsigned), width, 0);
    89f0:	e59a3000 	ldr	r3, [sl]
    89f4:	e28aa004 	add	sl, sl, #4
    89f8:	e58d7000 	str	r7, [sp]
    89fc:	e3a02000 	mov	r2, #0
    8a00:	e58d2004 	str	r2, [sp, #4]
    8a04:	e3a00002 	mov	r0, #2
    8a08:	e28d1008 	add	r1, sp, #8
    8a0c:	e3a02080 	mov	r2, #128	; 0x80
    8a10:	ebffff12 	bl	8660 <emit>
				break;
    8a14:	ea000013 	b	8a68 <va_printk+0x220>
			case 's':
				s = va_arg(args, char *);
    8a18:	e59a0000 	ldr	r0, [sl]
    8a1c:	e28aa004 	add	sl, sl, #4
				break;
    8a20:	ea000010 	b	8a68 <va_printk+0x220>
			case 'c':
				s = emit(8, num, 128, va_arg(args, int),width,0);
    8a24:	e59a3000 	ldr	r3, [sl]
    8a28:	e28aa004 	add	sl, sl, #4
    8a2c:	e58d7000 	str	r7, [sp]
    8a30:	e3a02000 	mov	r2, #0
    8a34:	e58d2004 	str	r2, [sp, #4]
    8a38:	e3a00008 	mov	r0, #8
    8a3c:	e08d1000 	add	r1, sp, r0
    8a40:	e3a02080 	mov	r2, #128	; 0x80
    8a44:	ebffff05 	bl	8660 <emit>
				break;
    8a48:	ea000006 	b	8a68 <va_printk+0x220>
			default: 
				panic("printk: not handling specifier '%c'\n", *fmt);
    8a4c:	e58d9000 	str	r9, [sp]
    8a50:	e59f0074 	ldr	r0, [pc, #116]	; 8acc <va_printk+0x284>
    8a54:	e59f1064 	ldr	r1, [pc, #100]	; 8ac0 <va_printk+0x278>
    8a58:	e59f2064 	ldr	r2, [pc, #100]	; 8ac4 <va_printk+0x27c>
    8a5c:	e3a030b9 	mov	r3, #185	; 0xb9
    8a60:	ebfffebb 	bl	8554 <printk>
    8a64:	eb000019 	bl	8ad0 <clean_reboot>
				return 0;   // ugh
			}
			fmt++;
    8a68:	e2862001 	add	r2, r6, #1

			// safe string copy
			for(; p < e && *s; )
    8a6c:	ea000002 	b	8a7c <va_printk+0x234>
				*p++ = *s++;
    8a70:	e2800001 	add	r0, r0, #1
    8a74:	e5c43000 	strb	r3, [r4]
    8a78:	e2844001 	add	r4, r4, #1
				return 0;   // ugh
			}
			fmt++;

			// safe string copy
			for(; p < e && *s; )
    8a7c:	e1540008 	cmp	r4, r8
    8a80:	2a000002 	bcs	8a90 <va_printk+0x248>
    8a84:	e5d03000 	ldrb	r3, [r0]
    8a88:	e3530000 	cmp	r3, #0
    8a8c:	1afffff7 	bne	8a70 <va_printk+0x228>

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    8a90:	e5d23000 	ldrb	r3, [r2]
    8a94:	e3530000 	cmp	r3, #0
    8a98:	0a000001 	beq	8aa4 <va_printk+0x25c>
    8a9c:	e1540008 	cmp	r4, r8
    8aa0:	3affff72 	bcc	8870 <va_printk+0x28>
			// safe string copy
			for(; p < e && *s; )
				*p++ = *s++;
		}
	}
	*p++ = 0;
    8aa4:	e2840001 	add	r0, r4, #1
    8aa8:	e3a03000 	mov	r3, #0
    8aac:	e5c43000 	strb	r3, [r4]
	return p - buf;
}
    8ab0:	e06b0000 	rsb	r0, fp, r0
    8ab4:	e28dd08c 	add	sp, sp, #140	; 0x8c
    8ab8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8abc:	00009770 	andeq	r9, r0, r0, ror r7
    8ac0:	00009720 	andeq	r9, r0, r0, lsr #14
    8ac4:	00009700 	andeq	r9, r0, r0, lsl #14
    8ac8:	0000978c 	andeq	r9, r0, ip, lsl #15
    8acc:	000097b4 			; <UNDEFINED> instruction: 0x000097b4

00008ad0 <clean_reboot>:
#include "rpi.h"

// print out a special message so bootloader exits
void clean_reboot(void) {
    8ad0:	e92d4008 	push	{r3, lr}
    putk("DONE!!!\n");
    8ad4:	e59f3014 	ldr	r3, [pc, #20]	; 8af0 <clean_reboot+0x20>
    8ad8:	e5933000 	ldr	r3, [r3]
    8adc:	e59f0010 	ldr	r0, [pc, #16]	; 8af4 <clean_reboot+0x24>
    8ae0:	e12fff33 	blx	r3
    delay_ms(100);       // (hopefully) enough time for message to get flushed.
    8ae4:	e3a00064 	mov	r0, #100	; 0x64
    8ae8:	eb000048 	bl	8c10 <delay_ms>
    rpi_reboot();
    8aec:	eb000019 	bl	8b58 <rpi_reboot>
    8af0:	0000934c 	andeq	r9, r0, ip, asr #6
    8af4:	000097ec 	andeq	r9, r0, ip, ror #15

00008af8 <_cstart>:
#include "rpi.h"

void _cstart() {
    8af8:	e92d4008 	push	{r3, lr}
    extern int __bss_start__, __bss_end__;
	void notmain();

    int* bss = &__bss_start__;
    8afc:	e59f3020 	ldr	r3, [pc, #32]	; 8b24 <_cstart+0x2c>
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    8b00:	e59f2020 	ldr	r2, [pc, #32]	; 8b28 <_cstart+0x30>
        *bss++ = 0;
    8b04:	e3a01000 	mov	r1, #0
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    8b08:	ea000001 	b	8b14 <_cstart+0x1c>
        *bss++ = 0;
    8b0c:	e5831000 	str	r1, [r3]
    8b10:	e2833004 	add	r3, r3, #4
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    8b14:	e1530002 	cmp	r3, r2
    8b18:	3afffffb 	bcc	8b0c <_cstart+0x14>
        *bss++ = 0;

    notmain(); 
    8b1c:	ebfffd9f 	bl	81a0 <notmain>
	rpi_reboot();
    8b20:	eb00000c 	bl	8b58 <rpi_reboot>
    8b24:	0000990c 	andeq	r9, r0, ip, lsl #18
    8b28:	00009d28 	andeq	r9, r0, r8, lsr #26

00008b2c <at_user_level>:
 * works if we have a trashed stack pointer?
 */
static unsigned user_level = 0b10000;
int at_user_level(void) {
    unsigned cpsr = 0;
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    8b2c:	e10f0000 	mrs	r0, CPSR

    // user level = lower 5 bits = 0b10000);
    return (cpsr  & 0b11111)  == user_level;
    8b30:	e200001f 	and	r0, r0, #31
}
    8b34:	e3500010 	cmp	r0, #16
    8b38:	13a00000 	movne	r0, #0
    8b3c:	03a00001 	moveq	r0, #1
    8b40:	e12fff1e 	bx	lr

00008b44 <set_user_level>:

// this is just used by the reboot code.
void set_user_level(void) {
    unsigned cpsr = 0;
    // XXX: shouldn't we just set the one bit?
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    8b44:	e10f3000 	mrs	r3, CPSR
        cpsr = (cpsr & ~0b11111) | user_level;
    8b48:	e3c3301f 	bic	r3, r3, #31
    8b4c:	e3833010 	orr	r3, r3, #16
    asm volatile("msr cpsr, %0" :: "r"(cpsr));
    8b50:	e129f003 	msr	CPSR_fc, r3
    8b54:	e12fff1e 	bx	lr

00008b58 <rpi_reboot>:
}

void rpi_reboot(void) {
    8b58:	e92d4008 	push	{r3, lr}
    if(at_user_level()) {
    8b5c:	ebfffff2 	bl	8b2c <at_user_level>
    8b60:	e3500000 	cmp	r0, #0
    8b64:	0a000000 	beq	8b6c <rpi_reboot+0x14>
        set_user_level();
    8b68:	ebfffff5 	bl	8b44 <set_user_level>
        // of stuff.
        // assert(!at_user_level());
    }

    // gives uart time to flush: should just call flush directly.
    delay_ms(30);
    8b6c:	e3a0001e 	mov	r0, #30
    8b70:	eb000026 	bl	8c10 <delay_ms>
    const int PM_WDOG = 0x20100024;
    const int PM_PASSWORD = 0x5a000000;
    const int PM_RSTC_WRCFG_FULL_RESET = 0x00000020;

    // timeout = 1/16th of a second? (whatever)
    PUT32(PM_WDOG, PM_PASSWORD | 1);
    8b74:	e59f0014 	ldr	r0, [pc, #20]	; 8b90 <rpi_reboot+0x38>
    8b78:	e59f1014 	ldr	r1, [pc, #20]	; 8b94 <rpi_reboot+0x3c>
    8b7c:	eb000093 	bl	8dd0 <PUT32>
    PUT32(PM_RSTC, PM_PASSWORD | PM_RSTC_WRCFG_FULL_RESET);
    8b80:	e59f0010 	ldr	r0, [pc, #16]	; 8b98 <rpi_reboot+0x40>
    8b84:	e59f1010 	ldr	r1, [pc, #16]	; 8b9c <rpi_reboot+0x44>
    8b88:	eb000090 	bl	8dd0 <PUT32>
    8b8c:	eafffffe 	b	8b8c <rpi_reboot+0x34>
    8b90:	20100024 	andscs	r0, r0, r4, lsr #32
    8b94:	5a000001 	bpl	8ba0 <delay_cycles>
    8b98:	2010001c 	andscs	r0, r0, ip, lsl r0
    8b9c:	5a000020 	bpl	8c24 <delay_sec>

00008ba0 <delay_cycles>:
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    8ba0:	ea000001 	b	8bac <delay_cycles+0xc>
        asm("add r1, r1, #0");
    8ba4:	e2811000 	add	r1, r1, #0
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    8ba8:	e1a00003 	mov	r0, r3
    8bac:	e2403001 	sub	r3, r0, #1
    8bb0:	e3500000 	cmp	r0, #0
    8bb4:	1afffffa 	bne	8ba4 <delay_cycles+0x4>
        asm("add r1, r1, #0");
}
    8bb8:	e12fff1e 	bx	lr

00008bbc <timer_get_usec_raw>:

// no dev barrier.
unsigned timer_get_usec_raw(void) {
    8bbc:	e92d4008 	push	{r3, lr}
    return GET32(0x20003004);
    8bc0:	e59f0004 	ldr	r0, [pc, #4]	; 8bcc <timer_get_usec_raw+0x10>
    8bc4:	eb00008d 	bl	8e00 <GET32>
}
    8bc8:	e8bd8008 	pop	{r3, pc}
    8bcc:	20003004 	andcs	r3, r0, r4

00008bd0 <timer_get_usec>:

// in usec
unsigned timer_get_usec(void) {
    8bd0:	e92d4010 	push	{r4, lr}
    dev_barrier();
    8bd4:	eb000075 	bl	8db0 <dev_barrier>
    unsigned u = timer_get_usec_raw();
    8bd8:	ebfffff7 	bl	8bbc <timer_get_usec_raw>
    8bdc:	e1a04000 	mov	r4, r0
    dev_barrier();
    8be0:	eb000072 	bl	8db0 <dev_barrier>
    return u;
}
    8be4:	e1a00004 	mov	r0, r4
    8be8:	e8bd8010 	pop	{r4, pc}

00008bec <delay_us>:

void delay_us(unsigned us) {
    8bec:	e92d4038 	push	{r3, r4, r5, lr}
    8bf0:	e1a05000 	mov	r5, r0
    unsigned rb = timer_get_usec();
    8bf4:	ebfffff5 	bl	8bd0 <timer_get_usec>
    8bf8:	e1a04000 	mov	r4, r0
    while (1) {
        unsigned ra = timer_get_usec();
    8bfc:	ebfffff3 	bl	8bd0 <timer_get_usec>
        if ((ra - rb) >= us) {
    8c00:	e0640000 	rsb	r0, r4, r0
    8c04:	e1500005 	cmp	r0, r5
    8c08:	3afffffb 	bcc	8bfc <delay_us+0x10>
            break;
        }
    }
}
    8c0c:	e8bd8038 	pop	{r3, r4, r5, pc}

00008c10 <delay_ms>:
void delay_ms(unsigned ms) {
    8c10:	e92d4008 	push	{r3, lr}
    delay_us(ms*1000);
    8c14:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    8c18:	e0000093 	mul	r0, r3, r0
    8c1c:	ebfffff2 	bl	8bec <delay_us>
    8c20:	e8bd8008 	pop	{r3, pc}

00008c24 <delay_sec>:
}
void delay_sec(unsigned sec) {
    8c24:	e92d4008 	push	{r3, lr}
    delay_ms(sec*1000);
    8c28:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    8c2c:	e0000093 	mul	r0, r3, r0
    8c30:	ebfffff6 	bl	8c10 <delay_ms>
    8c34:	e8bd8008 	pop	{r3, pc}

00008c38 <kmalloc>:
 *  - The returned pointer should always be 4-byte aligned.  
 *    Easiest way is to make sure the heap pointer starts 4-byte
 *    and you always round up the number of bytes.  Make sure
 *    you put an assertion in.  
 */
void *kmalloc(unsigned nbytes) {
    8c38:	e92d4010 	push	{r4, lr}
    demand(init_p, calling before initialized);
    8c3c:	e59f3048 	ldr	r3, [pc, #72]	; 8c8c <kmalloc+0x54>
    8c40:	e5933000 	ldr	r3, [r3]
    8c44:	e3530000 	cmp	r3, #0
    8c48:	1a000005 	bne	8c64 <kmalloc+0x2c>
    8c4c:	e59f003c 	ldr	r0, [pc, #60]	; 8c90 <kmalloc+0x58>
    8c50:	e59f103c 	ldr	r1, [pc, #60]	; 8c94 <kmalloc+0x5c>
    8c54:	e59f203c 	ldr	r2, [pc, #60]	; 8c98 <kmalloc+0x60>
    8c58:	e3a0301a 	mov	r3, #26
    8c5c:	ebfffe3c 	bl	8554 <printk>
    8c60:	ebffff9a 	bl	8ad0 <clean_reboot>
    
    void* to_allocate = heap_ptr;
    8c64:	e59f3020 	ldr	r3, [pc, #32]	; 8c8c <kmalloc+0x54>
    8c68:	e5934004 	ldr	r4, [r3, #4]
    unsigned rounded_nbytes = roundup(nbytes, 4);
    8c6c:	e2802003 	add	r2, r0, #3
    8c70:	e3c22003 	bic	r2, r2, #3
    heap_ptr += rounded_nbytes;
    8c74:	e0840002 	add	r0, r4, r2
    8c78:	e5830004 	str	r0, [r3, #4]
    memset(heap_ptr, 0, rounded_nbytes);
    8c7c:	e3a01000 	mov	r1, #0
    8c80:	eb0001a3 	bl	9314 <memset>
    return to_allocate;

}
    8c84:	e1a00004 	mov	r0, r4
    8c88:	e8bd8010 	pop	{r4, pc}
    8c8c:	00009d1c 	andeq	r9, r0, ip, lsl sp
    8c90:	00009820 	andeq	r9, r0, r0, lsr #16
    8c94:	00009860 	andeq	r9, r0, r0, ror #16
    8c98:	000097f8 	strdeq	r9, [r0], -r8

00008c9c <kmalloc_aligned>:

// address of returned pointer should be a multiple of
// alignment.
void *kmalloc_aligned(unsigned nbytes, unsigned alignment) {
    8c9c:	e92d4008 	push	{r3, lr}
    demand(init_p, calling before initialized);
    8ca0:	e59f3074 	ldr	r3, [pc, #116]	; 8d1c <kmalloc_aligned+0x80>
    8ca4:	e5933000 	ldr	r3, [r3]
    8ca8:	e3530000 	cmp	r3, #0
    8cac:	1a000005 	bne	8cc8 <kmalloc_aligned+0x2c>
    8cb0:	e59f0068 	ldr	r0, [pc, #104]	; 8d20 <kmalloc_aligned+0x84>
    8cb4:	e59f1068 	ldr	r1, [pc, #104]	; 8d24 <kmalloc_aligned+0x88>
    8cb8:	e59f2068 	ldr	r2, [pc, #104]	; 8d28 <kmalloc_aligned+0x8c>
    8cbc:	e3a03027 	mov	r3, #39	; 0x27
    8cc0:	ebfffe23 	bl	8554 <printk>
    8cc4:	ebffff81 	bl	8ad0 <clean_reboot>

    if(alignment <= 4)
    8cc8:	e3510004 	cmp	r1, #4
    8ccc:	8a000001 	bhi	8cd8 <kmalloc_aligned+0x3c>
        return kmalloc(nbytes);
    8cd0:	ebffffd8 	bl	8c38 <kmalloc>
    8cd4:	e8bd8008 	pop	{r3, pc}
    demand(alignment % 4 == 0, "weird alignment: not a multiple of 4!");
    8cd8:	e3110003 	tst	r1, #3
    8cdc:	0a000005 	beq	8cf8 <kmalloc_aligned+0x5c>
    8ce0:	e59f0044 	ldr	r0, [pc, #68]	; 8d2c <kmalloc_aligned+0x90>
    8ce4:	e59f1038 	ldr	r1, [pc, #56]	; 8d24 <kmalloc_aligned+0x88>
    8ce8:	e59f2038 	ldr	r2, [pc, #56]	; 8d28 <kmalloc_aligned+0x8c>
    8cec:	e3a0302b 	mov	r3, #43	; 0x2b
    8cf0:	ebfffe17 	bl	8554 <printk>
    8cf4:	ebffff75 	bl	8ad0 <clean_reboot>
    unsigned aligned_heap_ptr = (unsigned) heap_ptr;
    8cf8:	e59f301c 	ldr	r3, [pc, #28]	; 8d1c <kmalloc_aligned+0x80>
    8cfc:	e5932004 	ldr	r2, [r3, #4]
	aligned_heap_ptr = roundup(aligned_heap_ptr, alignment);
    8d00:	e0812002 	add	r2, r1, r2
    8d04:	e2422001 	sub	r2, r2, #1
    8d08:	e2611000 	rsb	r1, r1, #0
    8d0c:	e0021001 	and	r1, r2, r1
	heap_ptr = (void*) aligned_heap_ptr;
    8d10:	e5831004 	str	r1, [r3, #4]

	return kmalloc(nbytes);
    8d14:	ebffffc7 	bl	8c38 <kmalloc>
}
    8d18:	e8bd8008 	pop	{r3, pc}
    8d1c:	00009d1c 	andeq	r9, r0, ip, lsl sp
    8d20:	00009820 	andeq	r9, r0, r0, lsr #16
    8d24:	00009860 	andeq	r9, r0, r0, ror #16
    8d28:	00009800 	andeq	r9, r0, r0, lsl #16
    8d2c:	00009874 	andeq	r9, r0, r4, ror r8

00008d30 <kmalloc_init>:
 *    - should be just a few lines of code.
 *    - sets heap pointer to the location of 
 *      __heap_start__.   print this to make sure
 *      it makes sense!
 */
void kmalloc_init(void) {
    8d30:	e92d4008 	push	{r3, lr}
    demand(!init_p, cannot initialize twice!\n);
    8d34:	e59f3038 	ldr	r3, [pc, #56]	; 8d74 <kmalloc_init+0x44>
    8d38:	e5933000 	ldr	r3, [r3]
    8d3c:	e3530000 	cmp	r3, #0
    8d40:	0a000005 	beq	8d5c <kmalloc_init+0x2c>
    8d44:	e59f002c 	ldr	r0, [pc, #44]	; 8d78 <kmalloc_init+0x48>
    8d48:	e59f102c 	ldr	r1, [pc, #44]	; 8d7c <kmalloc_init+0x4c>
    8d4c:	e59f202c 	ldr	r2, [pc, #44]	; 8d80 <kmalloc_init+0x50>
    8d50:	e3a0303c 	mov	r3, #60	; 0x3c
    8d54:	ebfffdfe 	bl	8554 <printk>
    8d58:	ebffff5c 	bl	8ad0 <clean_reboot>
    init_p = 1;
    8d5c:	e59f3010 	ldr	r3, [pc, #16]	; 8d74 <kmalloc_init+0x44>
    8d60:	e3a02001 	mov	r2, #1
    8d64:	e5832000 	str	r2, [r3]
    heap_ptr = &__heap_start__;
    8d68:	e59f2014 	ldr	r2, [pc, #20]	; 8d84 <kmalloc_init+0x54>
    8d6c:	e5832004 	str	r2, [r3, #4]
    8d70:	e8bd8008 	pop	{r3, pc}
    8d74:	00009d1c 	andeq	r9, r0, ip, lsl sp
    8d78:	000098cc 	andeq	r9, r0, ip, asr #17
    8d7c:	00009860 	andeq	r9, r0, r0, ror #16
    8d80:	00009810 	andeq	r9, r0, r0, lsl r8
    8d84:	00009d28 	andeq	r9, r0, r8, lsr #26

00008d88 <kfree_all>:
/* 
 * free all allocated memory: reset the heap 
 * pointer back to the beginning.
 */
void kfree_all(void) {
    heap_ptr = &__heap_start__;
    8d88:	e59f2008 	ldr	r2, [pc, #8]	; 8d98 <kfree_all+0x10>
    8d8c:	e59f3008 	ldr	r3, [pc, #8]	; 8d9c <kfree_all+0x14>
    8d90:	e5832004 	str	r2, [r3, #4]
    8d94:	e12fff1e 	bx	lr
    8d98:	00009d28 	andeq	r9, r0, r8, lsr #26
    8d9c:	00009d1c 	andeq	r9, r0, ip, lsl sp

00008da0 <kmalloc_heap_ptr>:
// allocated block satisfies: 
//    assert(<addr> < kmalloc_heap_ptr());
// 
void *kmalloc_heap_ptr(void) {
    return (void*) heap_ptr;
}
    8da0:	e59f3004 	ldr	r3, [pc, #4]	; 8dac <kmalloc_heap_ptr+0xc>
    8da4:	e5930004 	ldr	r0, [r3, #4]
    8da8:	e12fff1e 	bx	lr
    8dac:	00009d1c 	andeq	r9, r0, ip, lsl sp

00008db0 <dev_barrier>:
    8db0:	ea000002 	b	8dc0 <dsb>

00008db4 <dmb>:
    8db4:	e3a00000 	mov	r0, #0
    8db8:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
    8dbc:	e12fff1e 	bx	lr

00008dc0 <dsb>:
    8dc0:	ee070f9a 	mcr	15, 0, r0, cr7, cr10, {4}
    8dc4:	e12fff1e 	bx	lr

00008dc8 <put32>:
    8dc8:	e5801000 	str	r1, [r0]
    8dcc:	e12fff1e 	bx	lr

00008dd0 <PUT32>:
    8dd0:	e5801000 	str	r1, [r0]
    8dd4:	e12fff1e 	bx	lr

00008dd8 <put16>:
    8dd8:	e1c010b0 	strh	r1, [r0]
    8ddc:	e12fff1e 	bx	lr

00008de0 <PUT16>:
    8de0:	e1c010b0 	strh	r1, [r0]
    8de4:	e12fff1e 	bx	lr

00008de8 <put8>:
    8de8:	e5c01000 	strb	r1, [r0]
    8dec:	e12fff1e 	bx	lr

00008df0 <PUT8>:
    8df0:	e5c01000 	strb	r1, [r0]
    8df4:	e12fff1e 	bx	lr

00008df8 <get32>:
    8df8:	e5900000 	ldr	r0, [r0]
    8dfc:	e12fff1e 	bx	lr

00008e00 <GET32>:
    8e00:	e5900000 	ldr	r0, [r0]
    8e04:	e12fff1e 	bx	lr

00008e08 <GETPC>:
    8e08:	e1a0000e 	mov	r0, lr
    8e0c:	e12fff1e 	bx	lr

00008e10 <dummy>:
    8e10:	e12fff1e 	bx	lr

00008e14 <uart_can_getc>:

	dev_barrier();
}

// 1 = at least one byte on rx queue, 0 otherwise
static int uart_can_getc(void) {
    8e14:	e92d4008 	push	{r3, lr}
    return get32(AUX_MU_LSR_REG) & RX_READY;
    8e18:	e59f300c 	ldr	r3, [pc, #12]	; 8e2c <uart_can_getc+0x18>
    8e1c:	e5930000 	ldr	r0, [r3]
    8e20:	ebfffff4 	bl	8df8 <get32>
}
    8e24:	e2000001 	and	r0, r0, #1
    8e28:	e8bd8008 	pop	{r3, pc}
    8e2c:	00009350 	andeq	r9, r0, r0, asr r3

00008e30 <uart_init>:
#define RX_READY 0x1
#define TX_READY 0x10
#define TX_EMPTY 0x20

// note: if you need memory barriers, use <dev_barrier()>
void uart_init(void) {
    8e30:	e92d4038 	push	{r3, r4, r5, lr}
    
	dev_barrier();
    8e34:	ebffffdd 	bl	8db0 <dev_barrier>

	// set GPIO 14 and 15 to alternate function 0
    //volatile unsigned* gpio_reg = (void*) 0x20200004;
    //unsigned bitmask = get32(gpio_reg);
    gpio_set_function(14, GPIO_FUNC_ALT5);
    8e38:	e3a0000e 	mov	r0, #14
    8e3c:	e3a01002 	mov	r1, #2
    8e40:	eb0000fd 	bl	923c <gpio_set_function>
	gpio_set_function(15, GPIO_FUNC_ALT5);
    8e44:	e3a0000f 	mov	r0, #15
    8e48:	e3a01002 	mov	r1, #2
    8e4c:	eb0000fa 	bl	923c <gpio_set_function>
    //bitmask &= ~(0b111 << ((UART0_RX % 10) * 3));
    //bitmask |= (0b010 << ((UART0_TX % 10) * 3));
    //bitmask |= (0b010 << ((UART0_RX % 10) * 3));
    //put32(gpio_reg, bitmask);

	dev_barrier();
    8e50:	ebffffd6 	bl	8db0 <dev_barrier>

    put32(AUX_ENABLES, get32(AUX_ENABLES) | (ENABLE_UART));
    8e54:	e59f4068 	ldr	r4, [pc, #104]	; 8ec4 <uart_init+0x94>
    8e58:	e5945004 	ldr	r5, [r4, #4]
    8e5c:	e1a00005 	mov	r0, r5
    8e60:	ebffffe4 	bl	8df8 <get32>
    8e64:	e3801001 	orr	r1, r0, #1
    8e68:	e1a00005 	mov	r0, r5
    8e6c:	ebffffd5 	bl	8dc8 <put32>
	
	dev_barrier();
    8e70:	ebffffce 	bl	8db0 <dev_barrier>
	
    put32(AUX_MU_CNTL_REG, 0x0);
    8e74:	e5940008 	ldr	r0, [r4, #8]
    8e78:	e3a01000 	mov	r1, #0
    8e7c:	ebffffd1 	bl	8dc8 <put32>
    put32(AUX_MU_IER_REG, 0x0);
    8e80:	e594000c 	ldr	r0, [r4, #12]
    8e84:	e3a01000 	mov	r1, #0
    8e88:	ebffffce 	bl	8dc8 <put32>
    put32(AUX_MU_IIR_REG, CLEAR_RX_FIFO | CLEAR_TX_FIFO);
    8e8c:	e5940010 	ldr	r0, [r4, #16]
    8e90:	e3a01006 	mov	r1, #6
    8e94:	ebffffcb 	bl	8dc8 <put32>
	put32(AUX_MU_LCR_REG, ENABLE_8BIT_MODE);
    8e98:	e5940014 	ldr	r0, [r4, #20]
    8e9c:	e3a01003 	mov	r1, #3
    8ea0:	ebffffc8 	bl	8dc8 <put32>
    put32(AUX_MU_BAUD_REG, BAUD_115200);
    8ea4:	e5940018 	ldr	r0, [r4, #24]
    8ea8:	e59f1018 	ldr	r1, [pc, #24]	; 8ec8 <uart_init+0x98>
    8eac:	ebffffc5 	bl	8dc8 <put32>
    put32(AUX_MU_CNTL_REG, ENABLE_TXER | ENABLE_RXER);
    8eb0:	e5940008 	ldr	r0, [r4, #8]
    8eb4:	e3a01003 	mov	r1, #3
    8eb8:	ebffffc2 	bl	8dc8 <put32>

	dev_barrier();
    8ebc:	ebffffbb 	bl	8db0 <dev_barrier>
    8ec0:	e8bd8038 	pop	{r3, r4, r5, pc}
    8ec4:	00009350 	andeq	r9, r0, r0, asr r3
    8ec8:	0000010e 	andeq	r0, r0, lr, lsl #2

00008ecc <uart_getc>:
    return get32(AUX_MU_LSR_REG) & RX_READY;
}

// returns one byte from the rx queue, if needed
// blocks until there is one.
int uart_getc(void) {
    8ecc:	e92d4008 	push	{r3, lr}
    while(1)
        if(uart_can_getc())  break;
    8ed0:	ebffffcf 	bl	8e14 <uart_can_getc>
    8ed4:	e3500000 	cmp	r0, #0
    8ed8:	0afffffc 	beq	8ed0 <uart_getc+0x4>
    return get32(AUX_MU_IO_REG) & 0xFF;
    8edc:	e59f300c 	ldr	r3, [pc, #12]	; 8ef0 <uart_getc+0x24>
    8ee0:	e593001c 	ldr	r0, [r3, #28]
    8ee4:	ebffffc3 	bl	8df8 <get32>
}
    8ee8:	e6ef0070 	uxtb	r0, r0
    8eec:	e8bd8008 	pop	{r3, pc}
    8ef0:	00009350 	andeq	r9, r0, r0, asr r3

00008ef4 <uart_can_putc>:

// 1 = space to put at least one byte, 0 otherwise.
int uart_can_putc(void) {
    8ef4:	e92d4008 	push	{r3, lr}
    return get32(AUX_MU_LSR_REG) & TX_EMPTY;
    8ef8:	e59f300c 	ldr	r3, [pc, #12]	; 8f0c <uart_can_putc+0x18>
    8efc:	e5930000 	ldr	r0, [r3]
    8f00:	ebffffbc 	bl	8df8 <get32>
}
    8f04:	e2000020 	and	r0, r0, #32
    8f08:	e8bd8008 	pop	{r3, pc}
    8f0c:	00009350 	andeq	r9, r0, r0, asr r3

00008f10 <uart_putc>:

// put one byte on the tx qqueue, if needed, blocks
// until TX has space.
void uart_putc(unsigned c) {
    8f10:	e92d4010 	push	{r4, lr}
    8f14:	e1a04000 	mov	r4, r0
    while(1)
            if(uart_can_putc())  break;
    8f18:	ebfffff5 	bl	8ef4 <uart_can_putc>
    8f1c:	e3500000 	cmp	r0, #0
    8f20:	0afffffc 	beq	8f18 <uart_putc+0x8>
    put32(AUX_MU_IO_REG, c);
    8f24:	e59f300c 	ldr	r3, [pc, #12]	; 8f38 <uart_putc+0x28>
    8f28:	e593001c 	ldr	r0, [r3, #28]
    8f2c:	e1a01004 	mov	r1, r4
    8f30:	ebffffa4 	bl	8dc8 <put32>
    8f34:	e8bd8010 	pop	{r4, pc}
    8f38:	00009350 	andeq	r9, r0, r0, asr r3

00008f3c <uart_has_data>:


// simple wrapper routines useful later.

// a maybe-more intuitive name for clients.
int uart_has_data(void) {
    8f3c:	e92d4008 	push	{r3, lr}
    return uart_can_getc();
    8f40:	ebffffb3 	bl	8e14 <uart_can_getc>
}
    8f44:	e8bd8008 	pop	{r3, pc}

00008f48 <uart_getc_async>:

int uart_getc_async(void) { 
    8f48:	e92d4008 	push	{r3, lr}
    if(!uart_has_data())
    8f4c:	ebfffffa 	bl	8f3c <uart_has_data>
    8f50:	e3500000 	cmp	r0, #0
    8f54:	0a000001 	beq	8f60 <uart_getc_async+0x18>
        return -1;
    return uart_getc();
    8f58:	ebffffdb 	bl	8ecc <uart_getc>
    8f5c:	e8bd8008 	pop	{r3, pc}
    return uart_can_getc();
}

int uart_getc_async(void) { 
    if(!uart_has_data())
        return -1;
    8f60:	e3e00000 	mvn	r0, #0
    return uart_getc();
}
    8f64:	e8bd8008 	pop	{r3, pc}

00008f68 <gpio_set_output>:
volatile unsigned *GPLEV1 = (void*) 0x20200038;
// Part 1 implement gpio_set_on, gpio_set_off, gpio_set_output

// set <pin> to be an output pin.  note: fsel0, fsel1, fsel2 are contiguous in memory,
// so you can use array calculations!
void gpio_set_output(unsigned pin) {
    8f68:	e92d4038 	push	{r3, r4, r5, lr}
    8f6c:	e1a04000 	mov	r4, r0
    // implement this
    // use gpio_fsel0
    
    if (pin >= 32) {
    8f70:	e350001f 	cmp	r0, #31
    8f74:	88bd8038 	pophi	{r3, r4, r5, pc}
        return;
    }
    
    volatile unsigned* gpio_reg;
    
    unsigned reg_select = pin / 10;
    8f78:	e59f30b4 	ldr	r3, [pc, #180]	; 9034 <gpio_set_output+0xcc>
    8f7c:	e0832093 	umull	r2, r3, r3, r0
    8f80:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    8f84:	e3530005 	cmp	r3, #5
    8f88:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    8f8c:	ea000017 	b	8ff0 <gpio_set_output+0x88>
    8f90:	00008fa8 	andeq	r8, r0, r8, lsr #31
    8f94:	00008fb4 			; <UNDEFINED> instruction: 0x00008fb4
    8f98:	00008fc0 	andeq	r8, r0, r0, asr #31
    8f9c:	00008fcc 	andeq	r8, r0, ip, asr #31
    8fa0:	00008fd8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    8fa4:	00008fe4 	andeq	r8, r0, r4, ror #31
        case 0: {gpio_reg = GPFSEL0; break;}
    8fa8:	e59f3088 	ldr	r3, [pc, #136]	; 9038 <gpio_set_output+0xd0>
    8fac:	e5935000 	ldr	r5, [r3]
    8fb0:	ea00000f 	b	8ff4 <gpio_set_output+0x8c>
        case 1: {gpio_reg = GPFSEL1; break;}
    8fb4:	e59f307c 	ldr	r3, [pc, #124]	; 9038 <gpio_set_output+0xd0>
    8fb8:	e5935004 	ldr	r5, [r3, #4]
    8fbc:	ea00000c 	b	8ff4 <gpio_set_output+0x8c>
        case 2: {gpio_reg = GPFSEL2; break;}
    8fc0:	e59f3070 	ldr	r3, [pc, #112]	; 9038 <gpio_set_output+0xd0>
    8fc4:	e5935008 	ldr	r5, [r3, #8]
    8fc8:	ea000009 	b	8ff4 <gpio_set_output+0x8c>
        case 3: {gpio_reg = GPFSEL3; break;}
    8fcc:	e59f3064 	ldr	r3, [pc, #100]	; 9038 <gpio_set_output+0xd0>
    8fd0:	e593500c 	ldr	r5, [r3, #12]
    8fd4:	ea000006 	b	8ff4 <gpio_set_output+0x8c>
        case 4: {gpio_reg = GPFSEL4; break;}
    8fd8:	e59f3058 	ldr	r3, [pc, #88]	; 9038 <gpio_set_output+0xd0>
    8fdc:	e5935010 	ldr	r5, [r3, #16]
    8fe0:	ea000003 	b	8ff4 <gpio_set_output+0x8c>
        case 5: {gpio_reg = GPFSEL5; break;}
    8fe4:	e59f304c 	ldr	r3, [pc, #76]	; 9038 <gpio_set_output+0xd0>
    8fe8:	e5935014 	ldr	r5, [r3, #20]
    8fec:	ea000000 	b	8ff4 <gpio_set_output+0x8c>
        default: gpio_reg = 0x0;
    8ff0:	e3a05000 	mov	r5, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    8ff4:	e1a00005 	mov	r0, r5
    8ff8:	ebffff7e 	bl	8df8 <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    8ffc:	e59f1030 	ldr	r1, [pc, #48]	; 9034 <gpio_set_output+0xcc>
    9000:	e0813491 	umull	r3, r1, r1, r4
    9004:	e1a011a1 	lsr	r1, r1, #3
    9008:	e0811101 	add	r1, r1, r1, lsl #2
    900c:	e1a01081 	lsl	r1, r1, #1
    9010:	e0611004 	rsb	r1, r1, r4
    9014:	e0811081 	add	r1, r1, r1, lsl #1
    9018:	e3a03007 	mov	r3, #7
    901c:	e1c03113 	bic	r3, r0, r3, lsl r1
    bitmask |= (1 << ((pin % 10) * 3));
    put32(gpio_reg, bitmask);
    9020:	e1a00005 	mov	r0, r5
    9024:	e3a02001 	mov	r2, #1
    9028:	e1831112 	orr	r1, r3, r2, lsl r1
    902c:	ebffff65 	bl	8dc8 <put32>
    9030:	e8bd8038 	pop	{r3, r4, r5, pc}
    9034:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    9038:	00009384 	andeq	r9, r0, r4, lsl #7

0000903c <gpio_set_on>:
    
}


// set GPIO <pin> on.
inline void gpio_set_on(unsigned pin) {
    903c:	e92d4008 	push	{r3, lr}
    // implement this
    // use gpio_set0
    if (pin >= 32) {
    9040:	e350001f 	cmp	r0, #31
    9044:	88bd8008 	pophi	{r3, pc}
    // Get current register value
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPSET0;
    9048:	959f3020 	ldrls	r3, [pc, #32]	; 9070 <gpio_set_on+0x34>
    904c:	95932018 	ldrls	r2, [r3, #24]
        // TODO: why do we not want this statement?
        //bitmask = get32(GPSET0);
    } else {
        gpio_reg = GPSET1;
    9050:	859f3018 	ldrhi	r3, [pc, #24]	; 9070 <gpio_set_on+0x34>
    9054:	8593201c 	ldrhi	r2, [r3, #28]
        //bitmask = get32(GPSET1);
        // TODO: why do we not want this statement?
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    9058:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    905c:	e1a00002 	mov	r0, r2
    9060:	e3a01001 	mov	r1, #1
    9064:	e1a01311 	lsl	r1, r1, r3
    9068:	ebffff56 	bl	8dc8 <put32>
    906c:	e8bd8008 	pop	{r3, pc}
    9070:	00009384 	andeq	r9, r0, r4, lsl #7

00009074 <gpio_set_off>:
}

// set GPIO <pin> off
inline void gpio_set_off(unsigned pin) {
    9074:	e92d4008 	push	{r3, lr}
    // implement this
    // use gpio_clr0
    if(pin >= 32) {
    9078:	e350001f 	cmp	r0, #31
    907c:	88bd8008 	pophi	{r3, pc}
    }
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPCLR0;
    9080:	959f3020 	ldrls	r3, [pc, #32]	; 90a8 <gpio_set_off+0x34>
    9084:	95932020 	ldrls	r2, [r3, #32]
        //bitmask = get32(GPCLR0);
    } else {
        gpio_reg = GPCLR1;
    9088:	859f3018 	ldrhi	r3, [pc, #24]	; 90a8 <gpio_set_off+0x34>
    908c:	85932024 	ldrhi	r2, [r3, #36]	; 0x24
        //bitmask = get32(GPCLR1);
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    9090:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    9094:	e1a00002 	mov	r0, r2
    9098:	e3a01001 	mov	r1, #1
    909c:	e1a01311 	lsl	r1, r1, r3
    90a0:	ebffff48 	bl	8dc8 <put32>
    90a4:	e8bd8008 	pop	{r3, pc}
    90a8:	00009384 	andeq	r9, r0, r4, lsl #7

000090ac <gpio_set_input>:
}

// Part 2: implement gpio_set_input and gpio_read

// set <pin> to input.
void gpio_set_input(unsigned pin) {
    90ac:	e92d4038 	push	{r3, r4, r5, lr}
    90b0:	e1a04000 	mov	r4, r0
    // implement.
    if(pin >= 32) {
    90b4:	e350001f 	cmp	r0, #31
    90b8:	88bd8038 	pophi	{r3, r4, r5, pc}
        return;
    }
    
    volatile unsigned* gpio_reg;
    
    unsigned reg_select = pin / 10;
    90bc:	e59f30ac 	ldr	r3, [pc, #172]	; 9170 <gpio_set_input+0xc4>
    90c0:	e0832093 	umull	r2, r3, r3, r0
    90c4:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    90c8:	e3530005 	cmp	r3, #5
    90cc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    90d0:	ea000017 	b	9134 <gpio_set_input+0x88>
    90d4:	000090ec 	andeq	r9, r0, ip, ror #1
    90d8:	000090f8 	strdeq	r9, [r0], -r8
    90dc:	00009104 	andeq	r9, r0, r4, lsl #2
    90e0:	00009110 	andeq	r9, r0, r0, lsl r1
    90e4:	0000911c 	andeq	r9, r0, ip, lsl r1
    90e8:	00009128 	andeq	r9, r0, r8, lsr #2
        case 0: {gpio_reg = GPFSEL0; break;}
    90ec:	e59f3080 	ldr	r3, [pc, #128]	; 9174 <gpio_set_input+0xc8>
    90f0:	e5935000 	ldr	r5, [r3]
    90f4:	ea00000f 	b	9138 <gpio_set_input+0x8c>
        case 1: {gpio_reg = GPFSEL1; break;}
    90f8:	e59f3074 	ldr	r3, [pc, #116]	; 9174 <gpio_set_input+0xc8>
    90fc:	e5935004 	ldr	r5, [r3, #4]
    9100:	ea00000c 	b	9138 <gpio_set_input+0x8c>
        case 2: {gpio_reg = GPFSEL2; break;}
    9104:	e59f3068 	ldr	r3, [pc, #104]	; 9174 <gpio_set_input+0xc8>
    9108:	e5935008 	ldr	r5, [r3, #8]
    910c:	ea000009 	b	9138 <gpio_set_input+0x8c>
        case 3: {gpio_reg = GPFSEL3; break;}
    9110:	e59f305c 	ldr	r3, [pc, #92]	; 9174 <gpio_set_input+0xc8>
    9114:	e593500c 	ldr	r5, [r3, #12]
    9118:	ea000006 	b	9138 <gpio_set_input+0x8c>
        case 4: {gpio_reg = GPFSEL4; break;}
    911c:	e59f3050 	ldr	r3, [pc, #80]	; 9174 <gpio_set_input+0xc8>
    9120:	e5935010 	ldr	r5, [r3, #16]
    9124:	ea000003 	b	9138 <gpio_set_input+0x8c>
        case 5: {gpio_reg = GPFSEL5; break;}
    9128:	e59f3044 	ldr	r3, [pc, #68]	; 9174 <gpio_set_input+0xc8>
    912c:	e5935014 	ldr	r5, [r3, #20]
    9130:	ea000000 	b	9138 <gpio_set_input+0x8c>
        default: gpio_reg = 0x0;
    9134:	e3a05000 	mov	r5, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    9138:	e1a00005 	mov	r0, r5
    913c:	ebffff2d 	bl	8df8 <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    9140:	e59f1028 	ldr	r1, [pc, #40]	; 9170 <gpio_set_input+0xc4>
    9144:	e0813491 	umull	r3, r1, r1, r4
    9148:	e1a011a1 	lsr	r1, r1, #3
    914c:	e0811101 	add	r1, r1, r1, lsl #2
    9150:	e1a01081 	lsl	r1, r1, #1
    9154:	e0611004 	rsb	r1, r1, r4
    9158:	e0811081 	add	r1, r1, r1, lsl #1
    915c:	e3a03007 	mov	r3, #7
    9160:	e1c01113 	bic	r1, r0, r3, lsl r1
    put32(gpio_reg, bitmask);
    9164:	e1a00005 	mov	r0, r5
    9168:	ebffff16 	bl	8dc8 <put32>
    916c:	e8bd8038 	pop	{r3, r4, r5, pc}
    9170:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    9174:	00009384 	andeq	r9, r0, r4, lsl #7

00009178 <gpio_read>:
    
    
}

// return the value of <pin>
inline int gpio_read(unsigned pin) {
    9178:	e92d4010 	push	{r4, lr}
    917c:	e1a04000 	mov	r4, r0
    
    if(pin >= 32) {
    9180:	e350001f 	cmp	r0, #31
    9184:	8a00000b 	bhi	91b8 <gpio_read+0x40>
        return -1;
    }
    
    unsigned v = 0;
    
    if (pin <= 31){
    9188:	8a000003 	bhi	919c <gpio_read+0x24>
        v = get32(GPLEV0);
    918c:	e59f302c 	ldr	r3, [pc, #44]	; 91c0 <gpio_read+0x48>
    9190:	e5930028 	ldr	r0, [r3, #40]	; 0x28
    9194:	ebffff17 	bl	8df8 <get32>
    9198:	ea000002 	b	91a8 <gpio_read+0x30>
    } else {
        v = get32(GPLEV1);
    919c:	e59f301c 	ldr	r3, [pc, #28]	; 91c0 <gpio_read+0x48>
    91a0:	e593002c 	ldr	r0, [r3, #44]	; 0x2c
    91a4:	ebffff13 	bl	8df8 <get32>
    }
    
    return (v & (1 << (pin % 32)));
    91a8:	e204401f 	and	r4, r4, #31
    91ac:	e3a03001 	mov	r3, #1
    91b0:	e0000413 	and	r0, r0, r3, lsl r4
    91b4:	e8bd8010 	pop	{r4, pc}

// return the value of <pin>
inline int gpio_read(unsigned pin) {
    
    if(pin >= 32) {
        return -1;
    91b8:	e3e00000 	mvn	r0, #0
    } else {
        v = get32(GPLEV1);
    }
    
    return (v & (1 << (pin % 32)));
}
    91bc:	e8bd8010 	pop	{r4, pc}
    91c0:	00009384 	andeq	r9, r0, r4, lsl #7

000091c4 <gpio_write>:

// set <pin> to <v> (v \in {0,1})
inline void gpio_write(unsigned pin, unsigned v) {
    91c4:	e92d4008 	push	{r3, lr}
    
    if(pin >= 32) {
    91c8:	e350001f 	cmp	r0, #31
    91cc:	88bd8008 	pophi	{r3, pc}
        return;
    }
    
    if(v)
    91d0:	e3510000 	cmp	r1, #0
    91d4:	0a00000b 	beq	9208 <gpio_write+0x44>

// set GPIO <pin> on.
inline void gpio_set_on(unsigned pin) {
    // implement this
    // use gpio_set0
    if (pin >= 32) {
    91d8:	e350001f 	cmp	r0, #31
    91dc:	88bd8008 	pophi	{r3, pc}
    // Get current register value
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPSET0;
    91e0:	959f3050 	ldrls	r3, [pc, #80]	; 9238 <gpio_write+0x74>
    91e4:	95932018 	ldrls	r2, [r3, #24]
        // TODO: why do we not want this statement?
        //bitmask = get32(GPSET0);
    } else {
        gpio_reg = GPSET1;
    91e8:	859f3048 	ldrhi	r3, [pc, #72]	; 9238 <gpio_write+0x74>
    91ec:	8593201c 	ldrhi	r2, [r3, #28]
        //bitmask = get32(GPSET1);
        // TODO: why do we not want this statement?
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    91f0:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    91f4:	e1a00002 	mov	r0, r2
    91f8:	e3a01001 	mov	r1, #1
    91fc:	e1a01311 	lsl	r1, r1, r3
    9200:	ebfffef0 	bl	8dc8 <put32>
    9204:	e8bd8008 	pop	{r3, pc}

// set GPIO <pin> off
inline void gpio_set_off(unsigned pin) {
    // implement this
    // use gpio_clr0
    if(pin >= 32) {
    9208:	e350001f 	cmp	r0, #31
    920c:	88bd8008 	pophi	{r3, pc}
    }
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPCLR0;
    9210:	959f3020 	ldrls	r3, [pc, #32]	; 9238 <gpio_write+0x74>
    9214:	95932020 	ldrls	r2, [r3, #32]
        //bitmask = get32(GPCLR0);
    } else {
        gpio_reg = GPCLR1;
    9218:	859f3018 	ldrhi	r3, [pc, #24]	; 9238 <gpio_write+0x74>
    921c:	85932024 	ldrhi	r2, [r3, #36]	; 0x24
        //bitmask = get32(GPCLR1);
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    9220:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    9224:	e1a00002 	mov	r0, r2
    9228:	e3a01001 	mov	r1, #1
    922c:	e1a01311 	lsl	r1, r1, r3
    9230:	ebfffee4 	bl	8dc8 <put32>
    9234:	e8bd8008 	pop	{r3, pc}
    9238:	00009384 	andeq	r9, r0, r4, lsl #7

0000923c <gpio_set_function>:
        gpio_set_on(pin);
    else
        gpio_set_off(pin);
}

void gpio_set_function(unsigned pin, gpio_func_t func) {
    923c:	e92d4070 	push	{r4, r5, r6, lr}
    9240:	e1a04000 	mov	r4, r0
    9244:	e1a05001 	mov	r5, r1
    // implement this
    // use gpio_fsel0
    
    if (pin >= 32 || func >= 8) {
    9248:	e3510007 	cmp	r1, #7
    924c:	9350001f 	cmpls	r0, #31
    9250:	88bd8070 	pophi	{r4, r5, r6, pc}
        return;
    }

    volatile unsigned* gpio_reg;
    unsigned reg_select = pin / 10;
    9254:	e59f30b0 	ldr	r3, [pc, #176]	; 930c <gpio_set_function+0xd0>
    9258:	e0832093 	umull	r2, r3, r3, r0
    925c:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    9260:	e3530005 	cmp	r3, #5
    9264:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    9268:	ea000017 	b	92cc <gpio_set_function+0x90>
    926c:	00009284 	andeq	r9, r0, r4, lsl #5
    9270:	00009290 	muleq	r0, r0, r2
    9274:	0000929c 	muleq	r0, ip, r2
    9278:	000092a8 	andeq	r9, r0, r8, lsr #5
    927c:	000092b4 			; <UNDEFINED> instruction: 0x000092b4
    9280:	000092c0 	andeq	r9, r0, r0, asr #5
        case 0: {gpio_reg = GPFSEL0; break;}
    9284:	e59f3084 	ldr	r3, [pc, #132]	; 9310 <gpio_set_function+0xd4>
    9288:	e5936000 	ldr	r6, [r3]
    928c:	ea00000f 	b	92d0 <gpio_set_function+0x94>
        case 1: {gpio_reg = GPFSEL1; break;}
    9290:	e59f3078 	ldr	r3, [pc, #120]	; 9310 <gpio_set_function+0xd4>
    9294:	e5936004 	ldr	r6, [r3, #4]
    9298:	ea00000c 	b	92d0 <gpio_set_function+0x94>
        case 2: {gpio_reg = GPFSEL2; break;}
    929c:	e59f306c 	ldr	r3, [pc, #108]	; 9310 <gpio_set_function+0xd4>
    92a0:	e5936008 	ldr	r6, [r3, #8]
    92a4:	ea000009 	b	92d0 <gpio_set_function+0x94>
        case 3: {gpio_reg = GPFSEL3; break;}
    92a8:	e59f3060 	ldr	r3, [pc, #96]	; 9310 <gpio_set_function+0xd4>
    92ac:	e593600c 	ldr	r6, [r3, #12]
    92b0:	ea000006 	b	92d0 <gpio_set_function+0x94>
        case 4: {gpio_reg = GPFSEL4; break;}
    92b4:	e59f3054 	ldr	r3, [pc, #84]	; 9310 <gpio_set_function+0xd4>
    92b8:	e5936010 	ldr	r6, [r3, #16]
    92bc:	ea000003 	b	92d0 <gpio_set_function+0x94>
        case 5: {gpio_reg = GPFSEL5; break;}
    92c0:	e59f3048 	ldr	r3, [pc, #72]	; 9310 <gpio_set_function+0xd4>
    92c4:	e5936014 	ldr	r6, [r3, #20]
    92c8:	ea000000 	b	92d0 <gpio_set_function+0x94>
        default: gpio_reg = 0x0;
    92cc:	e3a06000 	mov	r6, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    92d0:	e1a00006 	mov	r0, r6
    92d4:	ebfffec7 	bl	8df8 <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    92d8:	e59f302c 	ldr	r3, [pc, #44]	; 930c <gpio_set_function+0xd0>
    92dc:	e0832493 	umull	r2, r3, r3, r4
    92e0:	e1a031a3 	lsr	r3, r3, #3
    92e4:	e0833103 	add	r3, r3, r3, lsl #2
    92e8:	e1a03083 	lsl	r3, r3, #1
    92ec:	e0633004 	rsb	r3, r3, r4
    92f0:	e0833083 	add	r3, r3, r3, lsl #1
    92f4:	e3a01007 	mov	r1, #7
    92f8:	e1c01311 	bic	r1, r0, r1, lsl r3
    bitmask |= (func << ((pin % 10) * 3));
    put32(gpio_reg, bitmask);
    92fc:	e1a00006 	mov	r0, r6
    9300:	e1811315 	orr	r1, r1, r5, lsl r3
    9304:	ebfffeaf 	bl	8dc8 <put32>
    9308:	e8bd8070 	pop	{r4, r5, r6, pc}
    930c:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    9310:	00009384 	andeq	r9, r0, r4, lsl #7

00009314 <memset>:
#include <string.h>

void *memset(void *_p, int c, size_t n) {
    char *p = _p, *e = p + n;
    9314:	e0802002 	add	r2, r0, r2
    9318:	e1a03000 	mov	r3, r0

    while(p < e)
    931c:	ea000001 	b	9328 <memset+0x14>
        *p++ = c;
    9320:	e5c31000 	strb	r1, [r3]
    9324:	e2833001 	add	r3, r3, #1
#include <string.h>

void *memset(void *_p, int c, size_t n) {
    char *p = _p, *e = p + n;

    while(p < e)
    9328:	e1530002 	cmp	r3, r2
    932c:	3afffffb 	bcc	9320 <memset+0xc>
        *p++ = c;
    return _p;
}
    9330:	e12fff1e 	bx	lr

00009334 <internal_putchar>:
#include "rpi.h"

static int internal_putchar(int c) { uart_putc(c); return c; }
    9334:	e92d4010 	push	{r4, lr}
    9338:	e1a04000 	mov	r4, r0
    933c:	ebfffef3 	bl	8f10 <uart_putc>
    9340:	e1a00004 	mov	r0, r4
    9344:	e8bd8010 	pop	{r4, pc}

Disassembly of section .data:

00009348 <frontstop>:
    9348:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

0000934c <putk>:
    934c:	000085ac 	andeq	r8, r0, ip, lsr #11

00009350 <AUX_MU_LSR_REG>:
    9350:	20215054 	eorcs	r5, r1, r4, asr r0

00009354 <AUX_ENABLES>:
    9354:	20215004 	eorcs	r5, r1, r4

00009358 <AUX_MU_CNTL_REG>:
    9358:	20215060 	eorcs	r5, r1, r0, rrx

0000935c <AUX_MU_IER_REG>:
    935c:	20215044 	eorcs	r5, r1, r4, asr #32

00009360 <AUX_MU_IIR_REG>:
    9360:	20215048 	eorcs	r5, r1, r8, asr #32

00009364 <AUX_MU_LCR_REG>:
    9364:	2021504c 	eorcs	r5, r1, ip, asr #32

00009368 <AUX_MU_BAUD_REG>:
    9368:	20215068 	eorcs	r5, r1, r8, rrx

0000936c <AUX_MU_IO_REG>:
    936c:	20215040 	eorcs	r5, r1, r0, asr #32

00009370 <AUX_MU_STAT_REG>:
    9370:	20215064 	eorcs	r5, r1, r4, rrx

00009374 <AUX_MU_SCRATCH>:
    9374:	2021505c 	eorcs	r5, r1, ip, asr r0

00009378 <AUX_MU_MSR_REG>:
    9378:	20215058 	eorcs	r5, r1, r8, asr r0

0000937c <AUX_MU_MCR_REG>:
    937c:	20215050 	eorcs	r5, r1, r0, asr r0

00009380 <AUX_IRQ>:
    9380:	20215000 	eorcs	r5, r1, r0

00009384 <GPFSEL0>:
    9384:	20200000 	eorcs	r0, r0, r0

00009388 <GPFSEL1>:
    9388:	20200004 	eorcs	r0, r0, r4

0000938c <GPFSEL2>:
    938c:	20200008 	eorcs	r0, r0, r8

00009390 <GPFSEL3>:
    9390:	2020000c 	eorcs	r0, r0, ip

00009394 <GPFSEL4>:
    9394:	20200010 	eorcs	r0, r0, r0, lsl r0

00009398 <GPFSEL5>:
    9398:	20200014 	eorcs	r0, r0, r4, lsl r0

0000939c <GPSET0>:
    939c:	2020001c 	eorcs	r0, r0, ip, lsl r0

000093a0 <GPSET1>:
    93a0:	20200020 	eorcs	r0, r0, r0, lsr #32

000093a4 <GPCLR0>:
    93a4:	20200028 	eorcs	r0, r0, r8, lsr #32

000093a8 <GPCLR1>:
    93a8:	2020002c 	eorcs	r0, r0, ip, lsr #32

000093ac <GPLEV0>:
    93ac:	20200034 	eorcs	r0, r0, r4, lsr r0

000093b0 <GPLEV1>:
    93b0:	20200038 	eorcs	r0, r0, r8, lsr r0

000093b4 <gpio_clr0>:
    93b4:	20200028 	eorcs	r0, r0, r8, lsr #32

000093b8 <gpio_set0>:
    93b8:	2020001c 	eorcs	r0, r0, ip, lsl r0

000093bc <gpio_fsel0>:
    93bc:	20200000 	eorcs	r0, r0, r0

000093c0 <rpi_putchar>:
    93c0:	00009334 	andeq	r9, r0, r4, lsr r3

Disassembly of section .rodata:

000093c4 <__FUNCTION__.4160-0xa4>:
    93c4:	25204350 	strcs	r4, [r0, #-848]!	; 0x350
    93c8:	61682078 	smcvs	33288	; 0x8208
    93cc:	64252073 	strtvs	r2, [r5], #-115	; 0x73
    93d0:	74696820 	strbtvc	r6, [r9], #-2080	; 0x820
    93d4:	00000a73 	andeq	r0, r0, r3, ror sl
    93d8:	756f6261 	strbvc	r6, [pc, #-609]!	; 917f <gpio_read+0x7>
    93dc:	6f742074 	svcvs	0x00742074
    93e0:	736e6920 	cmnvc	lr, #32, 18	; 0x80000
    93e4:	6c6c6174 	stfvse	f6, [ip], #-464	; 0xfffffe30
    93e8:	6e616820 	cdpvs	8, 6, cr6, cr1, cr0, {1}
    93ec:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    93f0:	00000a73 	andeq	r0, r0, r3, ror sl
    93f4:	74746573 	ldrbtvc	r6, [r4], #-1395	; 0x573
    93f8:	20676e69 	rsbcs	r6, r7, r9, ror #28
    93fc:	74207075 	strtvc	r7, [r0], #-117	; 0x75
    9400:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    9404:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
    9408:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
    940c:	0a737470 	beq	1ce65d4 <__bss_end__+0x1cdc8ac>
    9410:	00000000 	andeq	r0, r0, r0
    9414:	6e6e6f67 	cdpvs	15, 6, cr6, cr14, cr7, {3}
    9418:	6e652061 	cdpvs	0, 6, cr2, cr5, cr1, {3}
    941c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
    9420:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
    9424:	6c672073 	stclvs	0, cr2, [r7], #-460	; 0xfffffe34
    9428:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
    942c:	0a21796c 	beq	8679e4 <__bss_end__+0x85dcbc>
    9430:	00000000 	andeq	r0, r0, r0
    9434:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    9438:	2164656c 	cmncs	r4, ip, ror #10
    943c:	0000000a 	andeq	r0, r0, sl
    9440:	72657469 	rsbvc	r7, r5, #1761607680	; 0x69000000
    9444:	3a64253d 	bcc	1912940 <__bss_end__+0x1908c18>
    9448:	746e6320 	strbtvc	r6, [lr], #-800	; 0x320
    944c:	25203d20 	strcs	r3, [r0, #-3360]!	; 0xd20
    9450:	70202c64 	eorvc	r2, r0, r4, ror #24
    9454:	6f697265 	svcvs	0x00697265
    9458:	203d2064 	eorscs	r2, sp, r4, rrx
    945c:	73756425 	cmnvc	r5, #620756992	; 0x25000000
    9460:	202c6365 	eorcs	r6, ip, r5, ror #6
    9464:	000a7825 	andeq	r7, sl, r5, lsr #16

00009468 <__FUNCTION__.4160>:
    9468:	74736166 	ldrbtvc	r6, [r3], #-358	; 0x166
    946c:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
    9470:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
    9474:	765f7470 			; <UNDEFINED> instruction: 0x765f7470
    9478:	6f746365 	svcvs	0x00746365
    947c:	00000072 	andeq	r0, r0, r2, ror r0

00009480 <__FUNCTION__.4164>:
    9480:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xf73
    9484:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
    9488:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
    948c:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
    9490:	765f7470 			; <UNDEFINED> instruction: 0x765f7470
    9494:	6f746365 	svcvs	0x00746365
    9498:	00000072 	andeq	r0, r0, r2, ror r0

0000949c <__FUNCTION__.4168>:
    949c:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0x572
    94a0:	65765f74 	ldrbvs	r5, [r6, #-3956]!	; 0xf74
    94a4:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    94a8:	00000000 	andeq	r0, r0, r0

000094ac <__FUNCTION__.4172>:
    94ac:	65646e75 	strbvs	r6, [r4, #-3701]!	; 0xe75
    94b0:	656e6966 	strbvs	r6, [lr, #-2406]!	; 0x966
    94b4:	6e695f64 	cdpvs	15, 6, cr5, cr9, cr4, {3}
    94b8:	75727473 	ldrbvc	r7, [r2, #-1139]!	; 0x473
    94bc:	6f697463 	svcvs	0x00697463
    94c0:	65765f6e 	ldrbvs	r5, [r6, #-3950]!	; 0xf6e
    94c4:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    94c8:	00000000 	andeq	r0, r0, r0

000094cc <__FUNCTION__.4176>:
    94cc:	66657270 			; <UNDEFINED> instruction: 0x66657270
    94d0:	68637465 	stmdavs	r3!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    94d4:	6f62615f 	svcvs	0x0062615f
    94d8:	765f7472 			; <UNDEFINED> instruction: 0x765f7472
    94dc:	6f746365 	svcvs	0x00746365
    94e0:	00000072 	andeq	r0, r0, r2, ror r0

000094e4 <__FUNCTION__.4180>:
    94e4:	61746164 	cmnvs	r4, r4, ror #2
    94e8:	6f62615f 	svcvs	0x0062615f
    94ec:	765f7472 			; <UNDEFINED> instruction: 0x765f7472
    94f0:	6f746365 	svcvs	0x00746365
    94f4:	00000072 	andeq	r0, r0, r2, ror r0
    94f8:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    94fc:	73253a43 	teqvc	r5, #274432	; 0x43000
    9500:	3a73253a 	bcc	1cd29f0 <__bss_end__+0x1cc8cc8>
    9504:	453a6425 	ldrmi	r6, [sl, #-1061]!	; 0x425
    9508:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
    950c:	6e75203a 	mrcvs	0, 3, r2, cr5, cr10, {1}
    9510:	646e6168 	strbtvs	r6, [lr], #-360	; 0x168
    9514:	2064656c 	rsbcs	r6, r4, ip, ror #10
    9518:	65637865 	strbvs	r7, [r3, #-2149]!	; 0x865
    951c:	6f697470 	svcvs	0x00697470
    9520:	253c206e 	ldrcs	r2, [ip, #-110]!	; 0x6e
    9524:	61203e73 	teqvs	r0, r3, ror lr
    9528:	43502074 	cmpmi	r0, #116	; 0x74
    952c:	0a78253d 	beq	1e12a28 <__bss_end__+0x1e08d00>
    9530:	0000000a 	andeq	r0, r0, sl
    9534:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    9538:	70757272 	rsbsvc	r7, r5, r2, ror r2
    953c:	632d7374 	teqvs	sp, #116, 6	; 0xd0000001
    9540:	0000632e 	andeq	r6, r0, lr, lsr #6
    9544:	74736166 	ldrbtvc	r6, [r3], #-358	; 0x166
    9548:	00000000 	andeq	r0, r0, r0
    954c:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xf73
    9550:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
    9554:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
    9558:	00007470 	andeq	r7, r0, r0, ror r4
    955c:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0x572
    9560:	65762074 	ldrbvs	r2, [r6, #-116]!	; 0x74
    9564:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    9568:	00000000 	andeq	r0, r0, r0
    956c:	65646e75 	strbvs	r6, [r4, #-3701]!	; 0xe75
    9570:	656e6966 	strbvs	r6, [lr, #-2406]!	; 0x966
    9574:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
    9578:	75727473 	ldrbvc	r7, [r2, #-1139]!	; 0x473
    957c:	6f697463 	svcvs	0x00697463
    9580:	0000006e 	andeq	r0, r0, lr, rrx
    9584:	66657270 			; <UNDEFINED> instruction: 0x66657270
    9588:	68637465 	stmdavs	r3!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    958c:	6f626120 	svcvs	0x00626120
    9590:	00007472 	andeq	r7, r0, r2, ror r4
    9594:	61746164 	cmnvs	r4, r4, ror #2
    9598:	6f626120 	svcvs	0x00626120
    959c:	00007472 	andeq	r7, r0, r2, ror r4

000095a0 <__FUNCTION__.4188>:
    95a0:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    95a4:	68635f72 	stmdavs	r3!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    95a8:	5f6b6365 	svcpl	0x006b6365
    95ac:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
    95b0:	00737465 	rsbseq	r7, r3, r5, ror #8
    95b4:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    95b8:	73253a43 	teqvc	r5, #274432	; 0x43000
    95bc:	3a73253a 	bcc	1cd2aac <__bss_end__+0x1cc8d84>
    95c0:	6f3a6425 	svcvs	0x003a6425
    95c4:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0x666
    95c8:	72772074 	rsbsvc	r2, r7, #116	; 0x74
    95cc:	3a676e6f 	bcc	19e4f90 <__bss_end__+0x19db268>
    95d0:	70786520 	rsbsvc	r6, r8, r0, lsr #10
    95d4:	20746365 	rsbscs	r6, r4, r5, ror #6
    95d8:	67207825 	strvs	r7, [r0, -r5, lsr #16]!
    95dc:	2520746f 	strcs	r7, [r0, #-1135]!	; 0x46f
    95e0:	73252078 	teqvc	r5, #120	; 0x78
    95e4:	666f5b20 	strbtvs	r5, [pc], -r0, lsr #22
    95e8:	64253d66 	strtvs	r3, [r5], #-3430	; 0xd66
    95ec:	69626e2c 	stmdbvs	r2!, {r2, r3, r5, r9, sl, fp, sp, lr}^
    95f0:	253d7374 	ldrcs	r7, [sp, #-884]!	; 0x374
    95f4:	0a0a5d64 	beq	2a0b8c <__bss_end__+0x296e64>
    95f8:	00000000 	andeq	r0, r0, r0
    95fc:	742f2e2e 	strtvc	r2, [pc], #-3630	; 9604 <__FUNCTION__.4188+0x64>
    9600:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    9604:	746e692d 	strbtvc	r6, [lr], #-2349	; 0x92d
    9608:	69742f2f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    960c:	2d72656d 	cfldr64cs	mvdx6, [r2, #-436]!	; 0xfffffe4c
    9610:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    9614:	70757272 	rsbsvc	r7, r5, r2, ror r2
    9618:	00632e74 	rsbeq	r2, r3, r4, ror lr
    961c:	5f657375 	svcpl	0x00657375
    9620:	69623233 	stmdbvs	r2!, {r0, r1, r4, r5, r9, ip, sp}^
    9624:	6f635f74 	svcvs	0x00635f74
    9628:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xe75
    962c:	00000072 	andeq	r0, r0, r2, ror r0
    9630:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9634:	73253a43 	teqvc	r5, #274432	; 0x43000
    9638:	3a73253a 	bcc	1cd2b28 <__bss_end__+0x1cc8e00>
    963c:	783a6425 	ldmdavc	sl!, {r0, r2, r5, sl, sp, lr}
    9640:	3d20752e 	cfstr32cc	mvfx7, [r0, #-184]!	; 0xffffff48
    9644:	7865203d 	stmdavc	r5!, {r0, r2, r3, r4, r5, sp}^
    9648:	00000a70 	andeq	r0, r0, r0, ror sl
    964c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9650:	73253a43 	teqvc	r5, #274432	; 0x43000
    9654:	3a73253a 	bcc	1cd2b44 <__bss_end__+0x1cc8e1c>
    9658:	773a6425 	ldrvc	r6, [sl, -r5, lsr #8]!
    965c:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
    9660:	6f727720 	svcvs	0x00727720
    9664:	203a676e 	eorscs	r6, sl, lr, ror #14
    9668:	65707865 	ldrbvs	r7, [r0, #-2149]!	; 0x865
    966c:	25207463 	strcs	r7, [r0, #-1123]!	; 0x463
    9670:	6f672078 	svcvs	0x00672078
    9674:	78252074 	stmdavc	r5!, {r2, r4, r5, r6, sp}
    9678:	20732520 	rsbscs	r2, r3, r0, lsr #10
    967c:	66666f5b 	uqsaxvs	r6, r6, fp
    9680:	2c64253d 	cfstr64cs	mvdx2, [r4], #-244	; 0xffffff0c
    9684:	7469626e 	strbtvc	r6, [r9], #-622	; 0x26e
    9688:	64253d73 	strtvs	r3, [r5], #-3443	; 0xd73
    968c:	000a0a5d 	andeq	r0, sl, sp, asr sl
    9690:	5f746e69 	svcpl	0x00746e69
    9694:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    9698:	0064656c 	rsbeq	r6, r4, ip, ror #10
    969c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    96a0:	6e655f72 	mcrvs	15, 3, r5, cr5, cr2, {3}
    96a4:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
    96a8:	00000064 	andeq	r0, r0, r4, rrx
    96ac:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    96b0:	5f726574 	svcpl	0x00726574
    96b4:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    96b8:	0064656c 	rsbeq	r6, r4, ip, ror #10
    96bc:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    96c0:	5f726574 	svcpl	0x00726574
    96c4:	73657270 	cmnvc	r5, #112, 4
    96c8:	656c6163 	strbvs	r6, [ip, #-355]!	; 0x163
    96cc:	00000072 	andeq	r0, r0, r2, ror r0
    96d0:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
    96d4:	20737465 	rsbscs	r7, r3, r5, ror #8
    96d8:	63656863 	cmnvs	r5, #6488064	; 0x630000
    96dc:	2064656b 	rsbcs	r6, r4, fp, ror #10
    96e0:	2174756f 	cmncs	r4, pc, ror #10
    96e4:	0000000a 	andeq	r0, r0, sl

000096e8 <__FUNCTION__.4187>:
    96e8:	74696d65 	strbtvc	r6, [r9], #-3429	; 0xd65
    96ec:	00000000 	andeq	r0, r0, r0

000096f0 <__FUNCTION__.4135>:
    96f0:	5f697072 	svcpl	0x00697072
    96f4:	5f746573 	svcpl	0x00746573
    96f8:	7074756f 	rsbsvc	r7, r4, pc, ror #10
    96fc:	00007475 	andeq	r7, r0, r5, ror r4

00009700 <__FUNCTION__.4209>:
    9700:	705f6176 	subsvc	r6, pc, r6, ror r1	; <UNPREDICTABLE>
    9704:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    9708:	0000006b 	andeq	r0, r0, fp, rrx
    970c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9710:	73253a43 	teqvc	r5, #274432	; 0x43000
    9714:	3a73253a 	bcc	1cd2c04 <__bss_end__+0x1cc8edc>
    9718:	303a6425 	eorscc	r6, sl, r5, lsr #8
    971c:	0000000a 	andeq	r0, r0, sl
    9720:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    9724:	2d61762f 	stclcs	6, cr7, [r1, #-188]!	; 0xffffff44
    9728:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    972c:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
    9730:	00000000 	andeq	r0, r0, r0
    9734:	33323130 	teqcc	r2, #48, 2
    9738:	37363534 			; <UNDEFINED> instruction: 0x37363534
    973c:	00003938 	andeq	r3, r0, r8, lsr r9
    9740:	33323130 	teqcc	r2, #48, 2
    9744:	37363534 			; <UNDEFINED> instruction: 0x37363534
    9748:	62613938 	rsbvs	r3, r1, #56, 18	; 0xe0000
    974c:	66656463 	strbtvs	r6, [r5], -r3, ror #8
    9750:	00000000 	andeq	r0, r0, r0
    9754:	00003130 	andeq	r3, r0, r0, lsr r1
    9758:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    975c:	73253a43 	teqvc	r5, #274432	; 0x43000
    9760:	3a73253a 	bcc	1cd2c50 <__bss_end__+0x1cc8f28>
    9764:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    9768:	5f637475 	svcpl	0x00637475
    976c:	000a7066 	andeq	r7, sl, r6, rrx
    9770:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9774:	73253a43 	teqvc	r5, #274432	; 0x43000
    9778:	3a73253a 	bcc	1cd2c68 <__bss_end__+0x1cc8f40>
    977c:	773a6425 	ldrvc	r6, [sl, -r5, lsr #8]!
    9780:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
    9784:	33203c20 	teqcc	r0, #32, 24	; 0x2000
    9788:	00000a32 	andeq	r0, r0, r2, lsr sl
    978c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9790:	73253a43 	teqvc	r5, #274432	; 0x43000
    9794:	3a73253a 	bcc	1cd2c84 <__bss_end__+0x1cc8f5c>
    9798:	663a6425 	ldrtvs	r6, [sl], -r5, lsr #8
    979c:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xf6c
    97a0:	746f6e20 	strbtvc	r6, [pc], #-3616	; 97a8 <__FUNCTION__.4209+0xa8>
    97a4:	616e6520 	cmnvs	lr, r0, lsr #10
    97a8:	64656c62 	strbtvs	r6, [r5], #-3170	; 0xc62
    97ac:	0a212121 	beq	851c38 <__bss_end__+0x847f10>
    97b0:	00000000 	andeq	r0, r0, r0
    97b4:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    97b8:	73253a43 	teqvc	r5, #274432	; 0x43000
    97bc:	3a73253a 	bcc	1cd2cac <__bss_end__+0x1cc8f84>
    97c0:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    97c4:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    97c8:	6e203a6b 	vnmulvs.f32	s6, s0, s23
    97cc:	6820746f 	stmdavs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
    97d0:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    97d4:	20676e69 	rsbcs	r6, r7, r9, ror #28
    97d8:	63657073 	cmnvs	r5, #115	; 0x73
    97dc:	65696669 	strbvs	r6, [r9, #-1641]!	; 0x669
    97e0:	25272072 	strcs	r2, [r7, #-114]!	; 0x72
    97e4:	0a0a2763 	beq	293578 <__bss_end__+0x289850>
    97e8:	00000000 	andeq	r0, r0, r0
    97ec:	454e4f44 	strbmi	r4, [lr, #-3908]	; 0xf44
    97f0:	0a212121 	beq	851c7c <__bss_end__+0x847f54>
    97f4:	00000000 	andeq	r0, r0, r0

000097f8 <__FUNCTION__.4131>:
    97f8:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    97fc:	00636f6c 	rsbeq	r6, r3, ip, ror #30

00009800 <__FUNCTION__.4138>:
    9800:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    9804:	5f636f6c 	svcpl	0x00636f6c
    9808:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    980c:	0064656e 	rsbeq	r6, r4, lr, ror #10

00009810 <__FUNCTION__.4143>:
    9810:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    9814:	5f636f6c 	svcpl	0x00636f6c
    9818:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    981c:	00000000 	andeq	r0, r0, r0
    9820:	4f525245 	svcmi	0x00525245
    9824:	73253a52 	teqvc	r5, #335872	; 0x52000
    9828:	3a73253a 	bcc	1cd2d18 <__bss_end__+0x1cc8ff0>
    982c:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9830:	534c4146 	movtpl	r4, #49478	; 0xc146
    9834:	693c2845 	ldmdbvs	ip!, {r0, r2, r6, fp, sp}
    9838:	5f74696e 	svcpl	0x0074696e
    983c:	3a293e70 	bcc	a59204 <__bss_end__+0xa4f4dc>
    9840:	6c616320 	stclvs	3, cr6, [r1], #-128	; 0xffffff80
    9844:	676e696c 	strbvs	r6, [lr, -ip, ror #18]!
    9848:	66656220 	strbtvs	r6, [r5], -r0, lsr #4
    984c:	2065726f 	rsbcs	r7, r5, pc, ror #4
    9850:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    9854:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    9858:	0a64657a 	beq	1922e48 <__bss_end__+0x1919120>
    985c:	00000000 	andeq	r0, r0, r0
    9860:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
    9864:	6b2f6372 	blvs	be2634 <__bss_end__+0xbd890c>
    9868:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    986c:	632e636f 	teqvs	lr, #-1140850687	; 0xbc000001
    9870:	00000000 	andeq	r0, r0, r0
    9874:	4f525245 	svcmi	0x00525245
    9878:	73253a52 	teqvc	r5, #335872	; 0x52000
    987c:	3a73253a 	bcc	1cd2d6c <__bss_end__+0x1cc9044>
    9880:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9884:	534c4146 	movtpl	r4, #49478	; 0xc146
    9888:	613c2845 	teqvs	ip, r5, asr #16
    988c:	6e67696c 	cdpvs	9, 6, cr6, cr7, cr12, {3}
    9890:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
    9894:	34202520 	strtcc	r2, [r0], #-1312	; 0x520
    9898:	203d3d20 	eorscs	r3, sp, r0, lsr #26
    989c:	3a293e30 	bcc	a59164 <__bss_end__+0xa4f43c>
    98a0:	65772220 	ldrbvs	r2, [r7, #-544]!	; 0x220
    98a4:	20647269 	rsbcs	r7, r4, r9, ror #4
    98a8:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    98ac:	6e656d6e 	cdpvs	13, 6, cr6, cr5, cr14, {3}
    98b0:	6e203a74 	mcrvs	10, 1, r3, cr0, cr4, {3}
    98b4:	6120746f 	teqvs	r0, pc, ror #8
    98b8:	6c756d20 	ldclvs	13, cr6, [r5], #-128	; 0xffffff80
    98bc:	6c706974 	ldclvs	9, cr6, [r0], #-464	; 0xfffffe30
    98c0:	666f2065 	strbtvs	r2, [pc], -r5, rrx
    98c4:	22213420 	eorcs	r3, r1, #32, 8	; 0x20000000
    98c8:	0000000a 	andeq	r0, r0, sl
    98cc:	4f525245 	svcmi	0x00525245
    98d0:	73253a52 	teqvc	r5, #335872	; 0x52000
    98d4:	3a73253a 	bcc	1cd2dc4 <__bss_end__+0x1cc909c>
    98d8:	203a6425 	eorscs	r6, sl, r5, lsr #8
    98dc:	534c4146 	movtpl	r4, #49478	; 0xc146
    98e0:	213c2845 	teqcs	ip, r5, asr #16
    98e4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    98e8:	293e705f 	ldmdbcs	lr!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}
    98ec:	6163203a 	cmnvs	r3, sl, lsr r0
    98f0:	746f6e6e 	strbtvc	r6, [pc], #-3694	; 98f8 <__FUNCTION__.4143+0xe8>
    98f4:	696e6920 	stmdbvs	lr!, {r5, r8, fp, sp, lr}^
    98f8:	6c616974 	stclvs	9, cr6, [r1], #-464	; 0xfffffe30
    98fc:	20657a69 	rsbcs	r7, r5, r9, ror #20
    9900:	63697774 	cmnvs	r9, #116, 14	; 0x1d00000
    9904:	0a0a2165 	beq	291ea0 <__bss_end__+0x288178>
    9908:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss:

0000990c <__bss_start__>:
    990c:	00000000 	andeq	r0, r0, r0

00009910 <cnt>:
    9910:	00000000 	andeq	r0, r0, r0

00009914 <last_clk.4206>:
    9914:	00000000 	andeq	r0, r0, r0

00009918 <period>:
    9918:	00000000 	andeq	r0, r0, r0

0000991c <buf.4135>:
	...

00009d1c <init_p>:
    9d1c:	00000000 	andeq	r0, r0, r0

00009d20 <heap_ptr>:
    9d20:	00000000 	andeq	r0, r0, r0

00009d24 <rpi_arm_timer_t>:
    9d24:	00000000 	andeq	r0, r0, r0

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4b5a3605 	blmi	168d82c <__bss_end__+0x1683b04>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	12010901 	andne	r0, r1, #16384	; 0x4000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0x404
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	22011a01 	andcs	r1, r1, #4096	; 0x1000
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__bss_end__+0x10c6ffc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	34202955 	strtcc	r2, [r0], #-2389	; 0x955
   c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000004f5 	strdeq	r0, [r0], -r5
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000001fb 	strdeq	r0, [r0], -fp
      10:	00015601 	andeq	r5, r1, r1, lsl #12
      14:	00025c00 	andeq	r5, r2, r0, lsl #24
      18:	00801000 	addeq	r1, r0, r0
      1c:	00026400 	andeq	r6, r2, r0, lsl #8
      20:	00000000 	andeq	r0, r0, r0
      24:	05040200 	streq	r0, [r4, #-512]	; 0x200
      28:	00746e69 	rsbseq	r6, r4, r9, ror #28
      2c:	34070403 	strcc	r0, [r7], #-1027	; 0x403
      30:	03000000 	movweq	r0, #0
      34:	01e50601 	mvneq	r0, r1, lsl #12
      38:	02030000 	andeq	r0, r3, #0
      3c:	0001f105 	andeq	pc, r1, r5, lsl #2
      40:	05040300 	streq	r0, [r4, #-768]	; 0x300
      44:	00000077 	andeq	r0, r0, r7, ror r0
      48:	72050803 	andvc	r0, r5, #196608	; 0x30000
      4c:	03000000 	movweq	r0, #0
      50:	01e30801 	mvneq	r0, r1, lsl #16
      54:	02030000 	andeq	r0, r3, #0
      58:	00013707 	andeq	r3, r1, r7, lsl #14
      5c:	07040300 	streq	r0, [r4, -r0, lsl #6]
      60:	0000002f 	andeq	r0, r0, pc, lsr #32
      64:	2a070803 	bcs	1c2078 <__bss_end__+0x1b8350>
      68:	03000000 	movweq	r0, #0
      6c:	018c0704 	orreq	r0, ip, r4, lsl #14
      70:	04040000 	streq	r0, [r4], #-0
      74:	ec080103 	stfs	f0, [r8], {3}
      78:	05000001 	streq	r0, [r0, #-1]
      7c:	00008104 	andeq	r8, r0, r4, lsl #2
      80:	00740600 	rsbseq	r0, r4, r0, lsl #12
      84:	04070000 	streq	r0, [r7], #-0
      88:	00f33302 	rscseq	r3, r3, r2, lsl #6
      8c:	c4080000 	strgt	r0, [r8], #-0
      90:	80000000 	andhi	r0, r0, r0
      94:	028082e8 	addeq	r8, r0, #232, 4	; 0x8000000e
      98:	0000b508 	andeq	fp, r0, r8, lsl #10
      9c:	82e88000 	rschi	r8, r8, #0
      a0:	f4080280 	vst1.32	{d0-d3}, [r8], r0
      a4:	84000002 	strhi	r0, [r0], #-2
      a8:	028082e8 	addeq	r8, r0, #232, 4	; 0x8000000e
      ac:	00009908 	andeq	r9, r0, r8, lsl #18
      b0:	82e88800 	rschi	r8, r8, #0, 16
      b4:	04080280 	streq	r0, [r8], #-640	; 0x280
      b8:	8c000003 	stchi	0, cr0, [r0], {3}
      bc:	028082e8 	addeq	r8, r0, #232, 4	; 0x8000000e
      c0:	00000808 	andeq	r0, r0, r8, lsl #16
      c4:	82e89000 	rschi	r9, r8, #0
      c8:	e7080280 	str	r0, [r8, -r0, lsl #5]
      cc:	94000000 	strls	r0, [r0], #-0
      d0:	028082e8 	addeq	r8, r0, #232, 4	; 0x8000000e
      d4:	00019508 	andeq	r9, r1, r8, lsl #10
      d8:	82e89800 	rschi	r9, r8, #0, 16
      dc:	b4080280 	strlt	r0, [r8], #-640	; 0x280
      e0:	9c000002 	stcls	0, cr0, [r0], {2}
      e4:	028082e8 	addeq	r8, r0, #232, 4	; 0x8000000e
      e8:	00036608 	andeq	r6, r3, r8, lsl #12
      ec:	82e8a000 	rschi	sl, r8, #0
      f0:	07000280 	streq	r0, [r0, -r0, lsl #5]
      f4:	6a140304 	bvs	500d0c <__bss_end__+0x4f6fe4>
      f8:	08000001 	stmdaeq	r0, {r0}
      fc:	000000d3 	ldrdeq	r0, [r0], -r3
     100:	8082e480 	addhi	lr, r2, r0, lsl #9
     104:	02c90802 	sbceq	r0, r9, #131072	; 0x20000
     108:	e4800000 	str	r0, [r0], #0
     10c:	08028082 	stmdaeq	r2, {r1, r7, pc}
     110:	000000fb 	strdeq	r0, [r0], -fp
     114:	8082e484 	addhi	lr, r2, r4, lsl #9
     118:	01090802 	tsteq	r9, r2, lsl #16
     11c:	e4880000 	str	r0, [r8], #0
     120:	08028082 	stmdaeq	r2, {r1, r7, pc}
     124:	0000034b 	andeq	r0, r0, fp, asr #6
     128:	8082e48c 	addhi	lr, r2, ip, lsl #9
     12c:	015e0802 	cmpeq	lr, r2, lsl #16
     130:	e4900000 	ldr	r0, [r0], #0
     134:	08028082 	stmdaeq	r2, {r1, r7, pc}
     138:	0000016c 	andeq	r0, r0, ip, ror #2
     13c:	8082e494 	umullhi	lr, r2, r4, r4
     140:	02db0802 	sbcseq	r0, fp, #131072	; 0x20000
     144:	e4980000 	ldr	r0, [r8], #0
     148:	08028082 	stmdaeq	r2, {r1, r7, pc}
     14c:	0000004c 	andeq	r0, r0, ip, asr #32
     150:	8082e49c 	umullhi	lr, r2, ip, r4
     154:	005b0802 	subseq	r0, fp, r2, lsl #16
     158:	e4a00000 	strt	r0, [r0], #0
     15c:	08028082 	stmdaeq	r2, {r1, r7, pc}
     160:	00000117 	andeq	r0, r0, r7, lsl r1
     164:	8082e4a4 	addhi	lr, r2, r4, lsr #9
     168:	08090002 	stmdaeq	r9, {r1}
     16c:	018b1601 	orreq	r1, fp, r1, lsl #12
     170:	800a0000 	andhi	r0, sl, r0
     174:	01000000 	mrseq	r0, (UNDEF: 0)
     178:	00002c17 	andeq	r2, r0, r7, lsl ip
     17c:	ce0a0000 	cdpgt	0, 0, cr0, cr10, cr0, {0}
     180:	01000001 	tsteq	r0, r1
     184:	00002c18 	andeq	r2, r0, r8, lsl ip
     188:	0b000400 	bleq	1190 <_start-0x6e70>
     18c:	000002ed 	andeq	r0, r0, sp, ror #5
     190:	016a1901 	cmneq	sl, r1, lsl #18
     194:	520c0000 	andpl	r0, ip, #0
     198:	01000002 	tsteq	r0, r2
     19c:	0080102f 	addeq	r1, r0, pc, lsr #32
     1a0:	00007800 	andeq	r7, r0, r0, lsl #16
     1a4:	c59c0100 	ldrgt	r0, [ip, #256]	; 0x100
     1a8:	0d000001 	stceq	0, cr0, [r0, #-4]
     1ac:	01006370 	tsteq	r0, r0, ror r3
     1b0:	00002c2f 	andeq	r2, r0, pc, lsr #24
     1b4:	0e500100 	rdfeqs	f0, f0, f0
     1b8:	31010069 	tstcc	r1, r9, rrx
     1bc:	00000025 	andeq	r0, r0, r5, lsr #32
     1c0:	00000000 	andeq	r0, r0, r0
     1c4:	00410c00 	subeq	r0, r1, r0, lsl #24
     1c8:	42010000 	andmi	r0, r1, #0
     1cc:	00008088 	andeq	r8, r0, r8, lsl #1
     1d0:	0000005c 	andeq	r0, r0, ip, asr r0
     1d4:	02079c01 	andeq	r9, r7, #256	; 0x100
     1d8:	6a0f0000 	bvs	3c01e0 <__bss_end__+0x3b64b8>
     1dc:	01000000 	mrseq	r0, (UNDEF: 0)
     1e0:	00002c42 	andeq	r2, r0, r2, asr #24
     1e4:	00002a00 	andeq	r2, r0, r0, lsl #20
     1e8:	00690e00 	rsbeq	r0, r9, r0, lsl #28
     1ec:	00254301 	eoreq	r4, r5, r1, lsl #6
     1f0:	00480000 	subeq	r0, r8, r0
     1f4:	c4100000 	ldrgt	r0, [r0], #-0
     1f8:	57000080 	strpl	r0, [r0, -r0, lsl #1]
     1fc:	11000004 	tstne	r0, r4
     200:	78025001 	stmdavc	r2, {r0, ip, lr}
     204:	12000000 	andne	r0, r0, #0
     208:	000000dc 	ldrdeq	r0, [r0], -ip
     20c:	002c2001 	eoreq	r2, ip, r1
     210:	80e40000 	rschi	r0, r4, r0
     214:	004c0000 	subeq	r0, ip, r0
     218:	9c010000 	stcls	0, cr0, [r1], {-0}
     21c:	00000244 	andeq	r0, r0, r4, asr #4
     220:	0100690e 	tsteq	r0, lr, lsl #18
     224:	00002523 	andeq	r2, r0, r3, lsr #10
     228:	00006700 	andeq	r6, r0, r0, lsl #14
     22c:	80f41000 	rscshi	r1, r4, r0
     230:	046d0000 	strbteq	r0, [sp], #-0
     234:	01110000 	tsteq	r1, r0
     238:	11380151 	teqne	r8, r1, asr r1
     23c:	40035001 	andmi	r5, r3, r1
     240:	0000243c 	andeq	r2, r0, ip, lsr r4
     244:	00047a13 	andeq	r7, r4, r3, lsl sl
     248:	30550100 	subscc	r0, r5, r0, lsl #2
     24c:	70000081 	andvc	r0, r0, r1, lsl #1
     250:	01000000 	mrseq	r0, (UNDEF: 0)
     254:	0002ee9c 	muleq	r2, ip, lr
     258:	63701400 	cmnvs	r0, #0, 8
     25c:	2c550100 	ldfcse	f0, [r5], {-0}
     260:	86000000 	strhi	r0, [r0], -r0
     264:	15000000 	strne	r0, [r0, #-0]
     268:	000002d3 	ldrdeq	r0, [r0], -r3
     26c:	002c5701 	eoreq	r5, ip, r1, lsl #14
     270:	00a40000 	adceq	r0, r4, r0
     274:	57160000 	ldrpl	r0, [r6, -r0]
     278:	01000003 	tsteq	r0, r3
     27c:	00002c69 	andeq	r2, r0, r9, ror #24
     280:	14030500 	strne	r0, [r3], #-1280	; 0x500
     284:	17000099 			; <UNDEFINED> instruction: 0x17000099
     288:	006b6c63 	rsbeq	r6, fp, r3, ror #24
     28c:	002c6a01 	eoreq	r6, ip, r1, lsl #20
     290:	50010000 	andpl	r0, r1, r0
     294:	00813c18 	addeq	r3, r1, r8, lsl ip
     298:	00048700 	andeq	r8, r4, r0, lsl #14
     29c:	81441900 	cmphi	r4, r0, lsl #18
     2a0:	048e0000 	streq	r0, [lr], #0
     2a4:	02b40000 	adcseq	r0, r4, #0
     2a8:	01110000 	tsteq	r1, r0
     2ac:	000c0550 	andeq	r0, ip, r0, asr r5
     2b0:	002000b2 	strhteq	r0, [r0], -r2
     2b4:	00815819 	addeq	r5, r1, r9, lsl r8
     2b8:	0004a300 	andeq	sl, r4, r0, lsl #6
     2bc:	0002d000 	andeq	sp, r2, r0
     2c0:	51011100 	mrspl	r1, (UNDEF: 17)
     2c4:	01113101 	tsteq	r1, r1, lsl #2
     2c8:	0c0c0550 	cfstr32eq	mvfx0, [ip], {80}	; 0x50
     2cc:	002000b4 	strhteq	r0, [r0], -r4
     2d0:	00817019 	addeq	r7, r1, r9, lsl r0
     2d4:	00019600 	andeq	r9, r1, r0, lsl #12
     2d8:	0002e400 	andeq	lr, r2, r0, lsl #8
     2dc:	50011100 	andpl	r1, r1, r0, lsl #2
     2e0:	00007502 	andeq	r7, r0, r2, lsl #10
     2e4:	00817418 	addeq	r7, r1, r8, lsl r4
     2e8:	0004b900 	andeq	fp, r4, r0, lsl #18
     2ec:	001a0000 	andseq	r0, sl, r0
     2f0:	01000000 	mrseq	r0, (UNDEF: 0)
     2f4:	0081a073 	addeq	sl, r1, r3, ror r0
     2f8:	0000d400 	andeq	sp, r0, r0, lsl #8
     2fc:	f79c0100 			; <UNDEFINED> instruction: 0xf79c0100
     300:	15000003 	strne	r0, [r0, #-3]
     304:	0000017a 	andeq	r0, r0, sl, ror r1
     308:	002c8901 	eoreq	r8, ip, r1, lsl #18
     30c:	00b70000 	adcseq	r0, r7, r0
     310:	ac180000 	ldcge	0, cr0, [r8], {-0}
     314:	c4000081 	strgt	r0, [r0], #-129	; 0x81
     318:	19000004 	stmdbne	r0, {r2}
     31c:	000081b4 			; <UNDEFINED> instruction: 0x000081b4
     320:	00000457 	andeq	r0, r0, r7, asr r4
     324:	00000332 	andeq	r0, r0, r2, lsr r3
     328:	05500111 	ldrbeq	r0, [r0, #-273]	; 0x111
     32c:	0093d803 	addseq	sp, r3, r3, lsl #16
     330:	b8180000 	ldmdalt	r8, {}	; <UNPREDICTABLE>
     334:	cb000081 	blgt	540 <_start-0x7ac0>
     338:	19000004 	stmdbne	r0, {r2}
     33c:	000081c0 	andeq	r8, r0, r0, asr #3
     340:	00000457 	andeq	r0, r0, r7, asr r4
     344:	00000352 	andeq	r0, r0, r2, asr r3
     348:	05500111 	ldrbeq	r0, [r0, #-273]	; 0x111
     34c:	0093f403 	addseq	pc, r3, r3, lsl #8
     350:	c8190000 	ldmdagt	r9, {}	; <UNPREDICTABLE>
     354:	d2000081 	andle	r0, r0, #129	; 0x81
     358:	65000004 	strvs	r0, [r0, #-4]
     35c:	11000003 	tstne	r0, r3
     360:	40015001 	andmi	r5, r1, r1
     364:	81d41900 	bicshi	r1, r4, r0, lsl #18
     368:	04570000 	ldrbeq	r0, [r7], #-0
     36c:	03790000 	cmneq	r9, #0
     370:	01110000 	tsteq	r1, r0
     374:	00740250 	rsbseq	r0, r4, r0, asr r2
     378:	81d81800 	bicshi	r1, r8, r0, lsl #16
     37c:	04e30000 	strbteq	r0, [r3], #0
     380:	dc180000 	ldcle	0, cr0, [r8], {-0}
     384:	07000081 	streq	r0, [r0, -r1, lsl #1]
     388:	19000002 	stmdbne	r0, {r1}
     38c:	000081e4 	andeq	r8, r0, r4, ror #3
     390:	00000457 	andeq	r0, r0, r7, asr r4
     394:	0000039f 	muleq	r0, pc, r3	; <UNPREDICTABLE>
     398:	02500111 	subseq	r0, r0, #1073741828	; 0x40000004
     39c:	18000074 	stmdane	r0, {r2, r4, r5, r6}
     3a0:	000081e8 	andeq	r8, r0, r8, ror #3
     3a4:	000004ea 	andeq	r0, r0, sl, ror #9
     3a8:	0081f019 	addeq	pc, r1, r9, lsl r0	; <UNPREDICTABLE>
     3ac:	00045700 	andeq	r5, r4, r0, lsl #14
     3b0:	0003bf00 	andeq	fp, r3, r0, lsl #30
     3b4:	50011100 	andpl	r1, r1, r0, lsl #2
     3b8:	94340305 	ldrtls	r0, [r4], #-773	; 0x305
     3bc:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     3c0:	00008224 	andeq	r8, r0, r4, lsr #4
     3c4:	00000457 	andeq	r0, r0, r7, asr r4
     3c8:	000003d9 	ldrdeq	r0, [r0], -r9
     3cc:	02510111 	subseq	r0, r1, #1073741828	; 0x40000004
     3d0:	01110074 	tsteq	r1, r4, ror r0
     3d4:	00770250 	rsbseq	r0, r7, r0, asr r2
     3d8:	82481900 	subhi	r1, r8, #0, 18
     3dc:	01c50000 	biceq	r0, r5, r0
     3e0:	03ed0000 	mvneq	r0, #0
     3e4:	01110000 	tsteq	r1, r0
     3e8:	00780250 	rsbseq	r0, r8, r0, asr r2
     3ec:	82581800 	subshi	r1, r8, #0, 16
     3f0:	04f10000 	ldrbteq	r0, [r1], #0
     3f4:	16000000 	strne	r0, [r0], -r0
     3f8:	000001d8 	ldrdeq	r0, [r0], -r8
     3fc:	04081b01 	streq	r1, [r8], #-2817	; 0xb01
     400:	03050000 	movweq	r0, #20480	; 0x5000
     404:	0000990c 	andeq	r9, r0, ip, lsl #18
     408:	018b0405 	orreq	r0, fp, r5, lsl #8
     40c:	ab160000 	blge	580414 <__bss_end__+0x5766ec>
     410:	01000000 	mrseq	r0, (UNDEF: 0)
     414:	0000251c 	andeq	r2, r0, ip, lsl r5
     418:	48030500 	stmdami	r3, {r8, sl}
     41c:	17000093 			; <UNDEFINED> instruction: 0x17000093
     420:	00746e63 	rsbseq	r6, r4, r3, ror #28
     424:	04305101 	ldrteq	r5, [r0], #-257	; 0x101
     428:	03050000 	movweq	r0, #20480	; 0x5000
     42c:	00009910 	andeq	r9, r0, r0, lsl r9
     430:	00002c1b 	andeq	r2, r0, fp, lsl ip
     434:	00231600 	eoreq	r1, r3, r0, lsl #12
     438:	52010000 	andpl	r0, r1, #0
     43c:	00000430 	andeq	r0, r0, r0, lsr r4
     440:	99180305 	ldmdbls	r8, {r0, r2, r8, r9}
     444:	3b1c0000 	blcc	70044c <__bss_end__+0x6f6724>
     448:	02000003 	andeq	r0, r0, #3
     44c:	00008680 	andeq	r8, r0, r0, lsl #13
     450:	24030500 	strcs	r0, [r3], #-1280	; 0x500
     454:	1d00009d 	stcne	0, cr0, [r0, #-628]	; 0xfffffd8c
     458:	00000569 	andeq	r0, r0, r9, ror #10
     45c:	00252704 	eoreq	r2, r5, r4, lsl #14
     460:	046d0000 	strbteq	r0, [sp], #-0
     464:	7b1e0000 	blvc	78046c <__bss_end__+0x776744>
     468:	1f000000 	svcne	0x00000000
     46c:	00891d00 	addeq	r1, r9, r0, lsl #26
     470:	6b040000 	blvs	100478 <__bss_end__+0xf6750>
     474:	00000072 	andeq	r0, r0, r2, ror r0
     478:	00000487 	andeq	r0, r0, r7, lsl #9
     47c:	00002c1e 	andeq	r2, r0, lr, lsl ip
     480:	002c1e00 	eoreq	r1, ip, r0, lsl #28
     484:	20000000 	andcs	r0, r0, r0
     488:	0000014a 	andeq	r0, r0, sl, asr #2
     48c:	a61d8404 	ldrge	r8, [sp], -r4, lsl #8
     490:	04000001 	streq	r0, [r0], #-1
     494:	00002ca0 	andeq	r2, r0, r0, lsr #25
     498:	0004a300 	andeq	sl, r4, r0, lsl #6
     49c:	002c1e00 	eoreq	r1, ip, r0, lsl #28
     4a0:	21000000 	mrscs	r0, (UNDEF: 0)
     4a4:	00000360 	andeq	r0, r0, r0, ror #6
     4a8:	04b99404 	ldrteq	r9, [r9], #1028	; 0x404
     4ac:	2c1e0000 	ldccs	0, cr0, [lr], {-0}
     4b0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     4b4:	0000002c 	andeq	r0, r0, ip, lsr #32
     4b8:	03172200 	tsteq	r7, #0, 4
     4bc:	52040000 	andpl	r0, r4, #0
     4c0:	0000002c 	andeq	r0, r0, ip, lsr #32
     4c4:	00001920 	andeq	r1, r0, r0, lsr #18
     4c8:	20380400 	eorscs	r0, r8, r0, lsl #8
     4cc:	000001ac 	andeq	r0, r0, ip, lsr #3
     4d0:	26212703 	strtcs	r2, [r1], -r3, lsl #14
     4d4:	05000003 	streq	r0, [r0, #-3]
     4d8:	0004e308 	andeq	lr, r4, r8, lsl #6
     4dc:	002c1e00 	eoreq	r1, ip, r0, lsl #28
     4e0:	20000000 	andcs	r0, r0, r0
     4e4:	0000012a 	andeq	r0, r0, sl, lsr #2
     4e8:	b5206e04 	strlt	r6, [r0, #-3588]!	; 0xe04
     4ec:	03000001 	movweq	r0, #1
     4f0:	017f2025 	cmneq	pc, r5, lsr #32
     4f4:	63040000 	movwvs	r0, #16384	; 0x4000
     4f8:	00055600 	andeq	r5, r5, r0, lsl #12
     4fc:	ec000400 	cfstrs	mvf0, [r0], {-0}
     500:	04000001 	streq	r0, [r0], #-1
     504:	0001fb01 	andeq	pc, r1, r1, lsl #22
     508:	03f30100 	mvnseq	r0, #0, 2
     50c:	03990000 	orrseq	r0, r9, #0
     510:	83280000 	teqhi	r8, #0
     514:	01d00000 	bicseq	r0, r0, r0
     518:	01470000 	mrseq	r0, (UNDEF: 71)
     51c:	04020000 	streq	r0, [r2], #-0
     520:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
     524:	07040300 	streq	r0, [r4, -r0, lsl #6]
     528:	00000034 	andeq	r0, r0, r4, lsr r0
     52c:	e5060103 	str	r0, [r6, #-259]	; 0x103
     530:	03000001 	movweq	r0, #1
     534:	01f10502 	mvnseq	r0, r2, lsl #10
     538:	04030000 	streq	r0, [r3], #-0
     53c:	00007705 	andeq	r7, r0, r5, lsl #14
     540:	05080300 	streq	r0, [r8, #-768]	; 0x300
     544:	00000072 	andeq	r0, r0, r2, ror r0
     548:	e3080103 	movw	r0, #33027	; 0x8103
     54c:	03000001 	movweq	r0, #1
     550:	01370702 	teqeq	r7, r2, lsl #14
     554:	04030000 	streq	r0, [r3], #-0
     558:	00002f07 	andeq	r2, r0, r7, lsl #30
     55c:	07080300 	streq	r0, [r8, -r0, lsl #6]
     560:	0000002a 	andeq	r0, r0, sl, lsr #32
     564:	8c070403 	cfstrshi	mvf0, [r7], {3}
     568:	03000001 	movweq	r0, #1
     56c:	01ec0801 	mvneq	r0, r1, lsl #16
     570:	04040000 	streq	r0, [r4], #-0
     574:	0000007f 	andeq	r0, r0, pc, ror r0
     578:	00007205 	andeq	r7, r0, r5, lsl #4
     57c:	00720600 	rsbseq	r0, r2, r0, lsl #12
     580:	00940000 	addseq	r0, r4, r0
     584:	6b070000 	blvs	1c058c <__bss_end__+0x1b6864>
     588:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     58c:	03040800 	movweq	r0, #18432	; 0x4800
     590:	00010b14 	andeq	r0, r1, r4, lsl fp
     594:	00d30900 	sbcseq	r0, r3, r0, lsl #18
     598:	e4800000 	str	r0, [r0], #0
     59c:	09028082 	stmdbeq	r2, {r1, r7, pc}
     5a0:	000002c9 	andeq	r0, r0, r9, asr #5
     5a4:	8082e480 	addhi	lr, r2, r0, lsl #9
     5a8:	00fb0902 	rscseq	r0, fp, r2, lsl #18
     5ac:	e4840000 	str	r0, [r4], #0
     5b0:	09028082 	stmdbeq	r2, {r1, r7, pc}
     5b4:	00000109 	andeq	r0, r0, r9, lsl #2
     5b8:	8082e488 	addhi	lr, r2, r8, lsl #9
     5bc:	034b0902 	movteq	r0, #47362	; 0xb902
     5c0:	e48c0000 	str	r0, [ip], #0
     5c4:	09028082 	stmdbeq	r2, {r1, r7, pc}
     5c8:	0000015e 	andeq	r0, r0, lr, asr r1
     5cc:	8082e490 	umullhi	lr, r2, r0, r4
     5d0:	016c0902 	cmneq	ip, r2, lsl #18
     5d4:	e4940000 	ldr	r0, [r4], #0
     5d8:	09028082 	stmdbeq	r2, {r1, r7, pc}
     5dc:	000002db 	ldrdeq	r0, [r0], -fp
     5e0:	8082e498 	umullhi	lr, r2, r8, r4
     5e4:	004c0902 	subeq	r0, ip, r2, lsl #18
     5e8:	e49c0000 	ldr	r0, [ip], #0
     5ec:	09028082 	stmdbeq	r2, {r1, r7, pc}
     5f0:	0000005b 	andeq	r0, r0, fp, asr r0
     5f4:	8082e4a0 	addhi	lr, r2, r0, lsr #9
     5f8:	01170902 	tsteq	r7, r2, lsl #18
     5fc:	e4a40000 	strt	r0, [r4], #0
     600:	00028082 	andeq	r8, r2, r2, lsl #1
     604:	0001ac0a 	andeq	sl, r1, sl, lsl #24
     608:	28050100 	stmdacs	r5, {r8}
     60c:	68000083 	stmdavs	r0, {r0, r1, r7}
     610:	01000000 	mrseq	r0, (UNDEF: 0)
     614:	0001b79c 	muleq	r1, ip, r7
     618:	04020b00 	streq	r0, [r2], #-2816	; 0xb00
     61c:	11010000 	mrsne	r0, (UNDEF: 1)
     620:	0000002c 	andeq	r0, r0, ip, lsr #32
     624:	0004130b 	andeq	r1, r4, fp, lsl #6
     628:	2c120100 	ldfcss	f0, [r2], {-0}
     62c:	0c000000 	stceq	0, cr0, [r0], {-0}
     630:	00747364 	rsbseq	r7, r4, r4, ror #6
     634:	01b71601 			; <UNDEFINED> instruction: 0x01b71601
     638:	0d000000 	stceq	0, cr0, [r0, #-0]
     63c:	00637273 	rsbeq	r7, r3, r3, ror r2
     640:	01b71701 			; <UNDEFINED> instruction: 0x01b71701
     644:	6e0e0000 	cdpvs	0, 0, cr0, cr14, cr0, {0}
     648:	2c180100 	ldfcss	f0, [r8], {-0}
     64c:	01000000 	mrseq	r0, (UNDEF: 0)
     650:	83580f50 	cmphi	r8, #80, 30	; 0x140
     654:	00240000 	eoreq	r0, r4, r0
     658:	01730000 	cmneq	r3, r0
     65c:	69100000 	ldmdbvs	r0, {}	; <UNPREDICTABLE>
     660:	25190100 	ldrcs	r0, [r9, #-256]	; 0x100
     664:	d6000000 	strle	r0, [r0], -r0
     668:	00000000 	andeq	r0, r0, r0
     66c:	00833811 	addeq	r3, r3, r1, lsl r8
     670:	00051f00 	andeq	r1, r5, r0, lsl #30
     674:	00019000 	andeq	r9, r1, r0
     678:	51011200 	mrspl	r1, R9_usr
     67c:	12ff0902 	rscsne	r0, pc, #32768	; 0x8000
     680:	0c055001 	stceq	0, cr5, [r5], {1}
     684:	2000b21c 	andcs	fp, r0, ip, lsl r2
     688:	83441100 	movthi	r1, #16640	; 0x4100
     68c:	051f0000 	ldreq	r0, [pc, #-0]	; 694 <_start-0x796c>
     690:	01ad0000 			; <UNDEFINED> instruction: 0x01ad0000
     694:	01120000 	tsteq	r2, r0
     698:	ff090251 			; <UNDEFINED> instruction: 0xff090251
     69c:	05500112 	ldrbeq	r0, [r0, #-274]	; 0x112
     6a0:	00b2200c 	adcseq	r2, r2, ip
     6a4:	48130020 	ldmdami	r3, {r5}
     6a8:	35000083 	strcc	r0, [r0, #-131]	; 0x83
     6ac:	00000005 	andeq	r0, r0, r5
     6b0:	002c0404 	eoreq	r0, ip, r4, lsl #8
     6b4:	8b0a0000 	blhi	2806bc <__bss_end__+0x276994>
     6b8:	01000004 	tsteq	r0, r4
     6bc:	0083901f 	addeq	r9, r3, pc, lsl r0
     6c0:	00003c00 	andeq	r3, r0, r0, lsl #24
     6c4:	3a9c0100 	bcc	fe700acc <__bss_end__+0xfe6f6da4>
     6c8:	14000002 	strne	r0, [r0], #-2
     6cc:	01006370 	tsteq	r0, r0, ror r3
     6d0:	00002c1f 	andeq	r2, r0, pc, lsl ip
     6d4:	0000f500 	andeq	pc, r0, r0, lsl #10
     6d8:	04281500 	strteq	r1, [r8], #-1280	; 0x500
     6dc:	024a0000 	subeq	r0, sl, #0
     6e0:	03050000 	movweq	r0, #20480	; 0x5000
     6e4:	00009468 	andeq	r9, r0, r8, ror #8
     6e8:	0083b811 	addeq	fp, r3, r1, lsl r8
     6ec:	00053c00 	andeq	r3, r5, r0, lsl #24
     6f0:	00023000 	andeq	r3, r2, r0
     6f4:	53011200 	movwpl	r1, #4608	; 0x1200
     6f8:	12200802 	eorne	r0, r0, #131072	; 0x20000
     6fc:	03055201 	movweq	r5, #20993	; 0x5201
     700:	00009468 	andeq	r9, r0, r8, ror #8
     704:	05510112 	ldrbeq	r0, [r1, #-274]	; 0x112
     708:	00953403 	addseq	r3, r5, r3, lsl #8
     70c:	50011200 	andpl	r1, r1, r0, lsl #4
     710:	94f80305 	ldrbtls	r0, [r8], #773	; 0x305
     714:	02120000 	andseq	r0, r2, #0
     718:	f303047d 	vqshl.u8	q0, <illegal reg q14.5>, <illegal reg q1.5>
     71c:	02125001 	andseq	r5, r2, #1
     720:	0305007d 	movweq	r0, #20605	; 0x507d
     724:	00009544 	andeq	r9, r0, r4, asr #10
     728:	83bc1300 			; <UNDEFINED> instruction: 0x83bc1300
     72c:	05520000 	ldrbeq	r0, [r2, #-0]
     730:	06000000 	streq	r0, [r0], -r0
     734:	00000072 	andeq	r0, r0, r2, ror r0
     738:	0000024a 	andeq	r0, r0, sl, asr #4
     73c:	00006b07 	andeq	r6, r0, r7, lsl #22
     740:	05001500 	streq	r1, [r0, #-1280]	; 0x500
     744:	0000023a 	andeq	r0, r0, sl, lsr r2
     748:	0004710a 	andeq	r7, r4, sl, lsl #2
     74c:	cc240100 	stfgts	f0, [r4], #-0
     750:	3c000083 	stccc	0, cr0, [r0], {131}	; 0x83
     754:	01000000 	mrseq	r0, (UNDEF: 0)
     758:	0002cc9c 	muleq	r2, ip, ip
     75c:	63701400 	cmnvs	r0, #0, 8
     760:	2c240100 	stfcss	f0, [r4], #-0
     764:	22000000 	andcs	r0, r0, #0
     768:	15000001 	strne	r0, [r0, #-1]
     76c:	00000428 	andeq	r0, r0, r8, lsr #8
     770:	000002cc 	andeq	r0, r0, ip, asr #5
     774:	94800305 	strls	r0, [r0], #773	; 0x305
     778:	f4110000 			; <UNDEFINED> instruction: 0xf4110000
     77c:	3c000083 	stccc	0, cr0, [r0], {131}	; 0x83
     780:	c2000005 	andgt	r0, r0, #5
     784:	12000002 	andne	r0, r0, #2
     788:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     78c:	52011225 	andpl	r1, r1, #1342177282	; 0x50000002
     790:	94800305 	strls	r0, [r0], #773	; 0x305
     794:	01120000 	tsteq	r2, r0
     798:	34030551 	strcc	r0, [r3], #-1361	; 0x551
     79c:	12000095 	andne	r0, r0, #149	; 0x95
     7a0:	03055001 	movweq	r5, #20481	; 0x5001
     7a4:	000094f8 	strdeq	r9, [r0], -r8
     7a8:	047d0212 	ldrbteq	r0, [sp], #-530	; 0x212
     7ac:	5001f303 	andpl	pc, r1, r3, lsl #6
     7b0:	007d0212 	rsbseq	r0, sp, r2, lsl r2
     7b4:	954c0305 	strbls	r0, [ip, #-773]	; 0x305
     7b8:	13000000 	movwne	r0, #0
     7bc:	000083f8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
     7c0:	00000552 	andeq	r0, r0, r2, asr r5
     7c4:	00840500 	addeq	r0, r4, r0, lsl #10
     7c8:	640a0000 	strvs	r0, [sl], #-0
     7cc:	01000004 	tsteq	r0, r4
     7d0:	00840827 	addeq	r0, r4, r7, lsr #16
     7d4:	00003c00 	andeq	r3, r0, r0, lsl #24
     7d8:	4e9c0100 	fmlmie	f0, f4, f0
     7dc:	14000003 	strne	r0, [r0], #-3
     7e0:	01006370 	tsteq	r0, r0, ror r3
     7e4:	00002c27 	andeq	r2, r0, r7, lsr #24
     7e8:	00014f00 	andeq	r4, r1, r0, lsl #30
     7ec:	04281500 	strteq	r1, [r8], #-1280	; 0x500
     7f0:	035e0000 	cmpeq	lr, #0
     7f4:	03050000 	movweq	r0, #20480	; 0x5000
     7f8:	0000949c 	muleq	r0, ip, r4
     7fc:	00843011 	addeq	r3, r4, r1, lsl r0
     800:	00053c00 	andeq	r3, r5, r0, lsl #24
     804:	00034400 	andeq	r4, r3, r0, lsl #8
     808:	53011200 	movwpl	r1, #4608	; 0x1200
     80c:	12280802 	eorne	r0, r8, #131072	; 0x20000
     810:	03055201 	movweq	r5, #20993	; 0x5201
     814:	0000949c 	muleq	r0, ip, r4
     818:	05510112 	ldrbeq	r0, [r1, #-274]	; 0x112
     81c:	00953403 	addseq	r3, r5, r3, lsl #8
     820:	50011200 	andpl	r1, r1, r0, lsl #4
     824:	94f80305 	ldrbtls	r0, [r8], #773	; 0x305
     828:	02120000 	andseq	r0, r2, #0
     82c:	f303047d 	vqshl.u8	q0, <illegal reg q14.5>, <illegal reg q1.5>
     830:	02125001 	andseq	r5, r2, #1
     834:	0305007d 	movweq	r0, #20605	; 0x507d
     838:	0000955c 	andeq	r9, r0, ip, asr r5
     83c:	84341300 	ldrthi	r1, [r4], #-768	; 0x300
     840:	05520000 	ldrbeq	r0, [r2, #-0]
     844:	06000000 	streq	r0, [r0], -r0
     848:	00000072 	andeq	r0, r0, r2, ror r0
     84c:	0000035e 	andeq	r0, r0, lr, asr r3
     850:	00006b07 	andeq	r6, r0, r7, lsl #22
     854:	05000c00 	streq	r0, [r0, #-3072]	; 0xc00
     858:	0000034e 	andeq	r0, r0, lr, asr #6
     85c:	0004470a 	andeq	r4, r4, sl, lsl #14
     860:	442a0100 	strtmi	r0, [sl], #-256	; 0x100
     864:	3c000084 	stccc	0, cr0, [r0], {132}	; 0x84
     868:	01000000 	mrseq	r0, (UNDEF: 0)
     86c:	0003e09c 	muleq	r3, ip, r0
     870:	63701400 	cmnvs	r0, #0, 8
     874:	2c2a0100 	stfcss	f0, [sl], #-0
     878:	7c000000 	stcvc	0, cr0, [r0], {-0}
     87c:	15000001 	strne	r0, [r0, #-1]
     880:	00000428 	andeq	r0, r0, r8, lsr #8
     884:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     888:	94ac0305 	strtls	r0, [ip], #773	; 0x305
     88c:	6c110000 	ldcvs	0, cr0, [r1], {-0}
     890:	3c000084 	stccc	0, cr0, [r0], {132}	; 0x84
     894:	d6000005 	strle	r0, [r0], -r5
     898:	12000003 	andne	r0, r0, #3
     89c:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     8a0:	5201122b 	andpl	r1, r1, #-1342177278	; 0xb0000002
     8a4:	94ac0305 	strtls	r0, [ip], #773	; 0x305
     8a8:	01120000 	tsteq	r2, r0
     8ac:	34030551 	strcc	r0, [r3], #-1361	; 0x551
     8b0:	12000095 	andne	r0, r0, #149	; 0x95
     8b4:	03055001 	movweq	r5, #20481	; 0x5001
     8b8:	000094f8 	strdeq	r9, [r0], -r8
     8bc:	047d0212 	ldrbteq	r0, [sp], #-530	; 0x212
     8c0:	5001f303 	andpl	pc, r1, r3, lsl #6
     8c4:	007d0212 	rsbseq	r0, sp, r2, lsl r2
     8c8:	956c0305 	strbls	r0, [ip, #-773]!	; 0x305
     8cc:	13000000 	movwne	r0, #0
     8d0:	00008470 	andeq	r8, r0, r0, ror r4
     8d4:	00000552 	andeq	r0, r0, r2, asr r5
     8d8:	00720600 	rsbseq	r0, r2, r0, lsl #12
     8dc:	03f00000 	mvnseq	r0, #0
     8e0:	6b070000 	blvs	1c08e8 <__bss_end__+0x1b6bc0>
     8e4:	1c000000 	stcne	0, cr0, [r0], {-0}
     8e8:	03e00500 	mvneq	r0, #0, 10
     8ec:	830a0000 	movwhi	r0, #40960	; 0xa000
     8f0:	01000003 	tsteq	r0, r3
     8f4:	0084802d 	addeq	r8, r4, sp, lsr #32
     8f8:	00003c00 	andeq	r3, r0, r0, lsl #24
     8fc:	729c0100 	addsvc	r0, ip, #0, 2
     900:	14000004 	strne	r0, [r0], #-4
     904:	01006370 	tsteq	r0, r0, ror r3
     908:	00002c2d 	andeq	r2, r0, sp, lsr #24
     90c:	0001a900 	andeq	sl, r1, r0, lsl #18
     910:	04281500 	strteq	r1, [r8], #-1280	; 0x500
     914:	04720000 	ldrbteq	r0, [r2], #-0
     918:	03050000 	movweq	r0, #20480	; 0x5000
     91c:	000094cc 	andeq	r9, r0, ip, asr #9
     920:	0084a811 	addeq	sl, r4, r1, lsl r8
     924:	00053c00 	andeq	r3, r5, r0, lsl #24
     928:	00046800 	andeq	r6, r4, r0, lsl #16
     92c:	53011200 	movwpl	r1, #4608	; 0x1200
     930:	122e0802 	eorne	r0, lr, #131072	; 0x20000
     934:	03055201 	movweq	r5, #20993	; 0x5201
     938:	000094cc 	andeq	r9, r0, ip, asr #9
     93c:	05510112 	ldrbeq	r0, [r1, #-274]	; 0x112
     940:	00953403 	addseq	r3, r5, r3, lsl #8
     944:	50011200 	andpl	r1, r1, r0, lsl #4
     948:	94f80305 	ldrbtls	r0, [r8], #773	; 0x305
     94c:	02120000 	andseq	r0, r2, #0
     950:	f303047d 	vqshl.u8	q0, <illegal reg q14.5>, <illegal reg q1.5>
     954:	02125001 	andseq	r5, r2, #1
     958:	0305007d 	movweq	r0, #20605	; 0x507d
     95c:	00009584 	andeq	r9, r0, r4, lsl #11
     960:	84ac1300 	strthi	r1, [ip], #768	; 0x300
     964:	05520000 	ldrbeq	r0, [r2, #-0]
     968:	05000000 	streq	r0, [r0, #-0]
     96c:	0000023a 	andeq	r0, r0, sl, lsr r2
     970:	0004350a 	andeq	r3, r4, sl, lsl #10
     974:	bc300100 	ldflts	f0, [r0], #-0
     978:	3c000084 	stccc	0, cr0, [r0], {132}	; 0x84
     97c:	01000000 	mrseq	r0, (UNDEF: 0)
     980:	0004f49c 	muleq	r4, ip, r4
     984:	63701400 	cmnvs	r0, #0, 8
     988:	2c300100 	ldfcss	f0, [r0], #-0
     98c:	d6000000 	strle	r0, [r0], -r0
     990:	15000001 	strne	r0, [r0, #-1]
     994:	00000428 	andeq	r0, r0, r8, lsr #8
     998:	00000504 	andeq	r0, r0, r4, lsl #10
     99c:	94e40305 	strbtls	r0, [r4], #773	; 0x305
     9a0:	e4110000 	ldr	r0, [r1], #-0
     9a4:	3c000084 	stccc	0, cr0, [r0], {132}	; 0x84
     9a8:	ea000005 	b	9c4 <_start-0x763c>
     9ac:	12000004 	andne	r0, r0, #4
     9b0:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     9b4:	52011231 	andpl	r1, r1, #268435459	; 0x10000003
     9b8:	94e40305 	strbtls	r0, [r4], #773	; 0x305
     9bc:	01120000 	tsteq	r2, r0
     9c0:	34030551 	strcc	r0, [r3], #-1361	; 0x551
     9c4:	12000095 	andne	r0, r0, #149	; 0x95
     9c8:	03055001 	movweq	r5, #20481	; 0x5001
     9cc:	000094f8 	strdeq	r9, [r0], -r8
     9d0:	047d0212 	ldrbteq	r0, [sp], #-530	; 0x212
     9d4:	5001f303 	andpl	pc, r1, r3, lsl #6
     9d8:	007d0212 	rsbseq	r0, sp, r2, lsl r2
     9dc:	95940305 	ldrls	r0, [r4, #773]	; 0x305
     9e0:	13000000 	movwne	r0, #0
     9e4:	000084e8 	andeq	r8, r0, r8, ror #9
     9e8:	00000552 	andeq	r0, r0, r2, asr r5
     9ec:	00720600 	rsbseq	r0, r2, r0, lsl #12
     9f0:	05040000 	streq	r0, [r4, #-0]
     9f4:	6b070000 	blvs	1c09fc <__bss_end__+0x1b6cd4>
     9f8:	11000000 	mrsne	r0, (UNDEF: 0)
     9fc:	04f40500 	ldrbteq	r0, [r4], #1280	; 0x500
     a00:	020b0000 	andeq	r0, fp, #0
     a04:	01000004 	tsteq	r0, r4
     a08:	00002c11 	andeq	r2, r0, r1, lsl ip
     a0c:	04130b00 	ldreq	r0, [r3], #-2816	; 0xb00
     a10:	12010000 	andne	r0, r1, #0
     a14:	0000002c 	andeq	r0, r0, ip, lsr #32
     a18:	00036016 	andeq	r6, r3, r6, lsl r0
     a1c:	35940200 	ldrcc	r0, [r4, #512]	; 0x200
     a20:	17000005 	strne	r0, [r0, -r5]
     a24:	0000002c 	andeq	r0, r0, ip, lsr #32
     a28:	00002c17 	andeq	r2, r0, r7, lsl ip
     a2c:	4a180000 	bmi	600a34 <__bss_end__+0x5f6d0c>
     a30:	02000001 	andeq	r0, r0, #1
     a34:	05691984 	strbeq	r1, [r9, #-2436]!	; 0x984
     a38:	27020000 	strcs	r0, [r2, -r0]
     a3c:	00000025 	andeq	r0, r0, r5, lsr #32
     a40:	00000552 	andeq	r0, r0, r2, asr r5
     a44:	00007917 	andeq	r7, r0, r7, lsl r9
     a48:	18001a00 	stmdane	r0, {r9, fp, ip}
     a4c:	0000017f 	andeq	r0, r0, pc, ror r1
     a50:	e4006302 	str	r6, [r0], #-770	; 0x302
     a54:	04000002 	streq	r0, [r0], #-2
     a58:	00034300 	andeq	r4, r3, r0, lsl #6
     a5c:	fb010400 	blx	41a66 <__bss_end__+0x37d3e>
     a60:	01000001 	tsteq	r0, r1
     a64:	000004fe 	strdeq	r0, [r0], -lr
     a68:	0000025c 	andeq	r0, r0, ip, asr r2
     a6c:	000084f8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
     a70:	0000005c 	andeq	r0, r0, ip, asr r0
     a74:	00000210 	andeq	r0, r0, r0, lsl r2
     a78:	69050402 	stmdbvs	r5, {r1, sl}
     a7c:	0300746e 	movweq	r7, #1134	; 0x46e
     a80:	00340704 	eorseq	r0, r4, r4, lsl #14
     a84:	01030000 	mrseq	r0, (UNDEF: 3)
     a88:	0001e506 	andeq	lr, r1, r6, lsl #10
     a8c:	05020300 	streq	r0, [r2, #-768]	; 0x300
     a90:	000001f1 	strdeq	r0, [r0], -r1
     a94:	77050403 	strvc	r0, [r5, -r3, lsl #8]
     a98:	03000000 	movweq	r0, #0
     a9c:	00720508 	rsbseq	r0, r2, r8, lsl #10
     aa0:	01030000 	mrseq	r0, (UNDEF: 3)
     aa4:	0001e308 	andeq	lr, r1, r8, lsl #6
     aa8:	07020300 	streq	r0, [r2, -r0, lsl #6]
     aac:	00000137 	andeq	r0, r0, r7, lsr r1
     ab0:	00054004 	andeq	r4, r5, r4
     ab4:	68340300 	ldmdavs	r4!, {r8, r9}
     ab8:	03000000 	movweq	r0, #0
     abc:	002f0704 	eoreq	r0, pc, r4, lsl #14
     ac0:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     ac4:	00002a07 	andeq	r2, r0, r7, lsl #20
     ac8:	07040300 	streq	r0, [r4, -r0, lsl #6]
     acc:	0000018c 	andeq	r0, r0, ip, lsl #3
     ad0:	ec080103 	stfs	f0, [r8], {3}
     ad4:	05000001 	streq	r0, [r0, #-1]
     ad8:	00008a04 	andeq	r8, r0, r4, lsl #20
     adc:	007d0600 	rsbseq	r0, sp, r0, lsl #12
     ae0:	04070000 	streq	r0, [r7], #-0
     ae4:	00f21e02 	rscseq	r1, r2, r2, lsl #28
     ae8:	e0080000 	and	r0, r8, r0
     aec:	02000004 	andeq	r0, r0, #4
     af0:	00005d21 	andeq	r5, r0, r1, lsr #26
     af4:	1e010400 	cfcpysne	mvf0, mvf1
     af8:	05360800 	ldreq	r0, [r6, #-2048]!	; 0x800
     afc:	22020000 	andcs	r0, r2, #0
     b00:	0000005d 	andeq	r0, r0, sp, asr r0
     b04:	001c0204 	andseq	r0, ip, r4, lsl #4
     b08:	0004f208 	andeq	pc, r4, r8, lsl #4
     b0c:	5d270200 	sfmpl	f0, 4, [r7, #-0]
     b10:	04000000 	streq	r0, [r0], #-0
     b14:	08001a01 	stmdaeq	r0, {r0, r9, fp, ip}
     b18:	000004a1 	andeq	r0, r0, r1, lsr #9
     b1c:	005d2902 	subseq	r2, sp, r2, lsl #18
     b20:	01040000 	mrseq	r0, (UNDEF: 4)
     b24:	1e080018 	mcrne	0, 0, r0, cr8, cr8, {0}
     b28:	02000005 	andeq	r0, r0, #5
     b2c:	00005d2b 	andeq	r5, r0, fp, lsr #26
     b30:	16010400 	strne	r0, [r1], -r0, lsl #8
     b34:	052e0800 	streq	r0, [lr, #-2048]!	; 0x800
     b38:	2d020000 	stccs	0, cr0, [r2, #-0]
     b3c:	0000005d 	andeq	r0, r0, sp, asr r0
     b40:	00090704 	andeq	r0, r9, r4, lsl #14
     b44:	04c30400 	strbeq	r0, [r3], #1024	; 0x400
     b48:	2f020000 	svccs	0x00020000
     b4c:	0000008f 	andeq	r0, r0, pc, lsl #1
     b50:	33020409 	movwcc	r0, #9225	; 0x2409
     b54:	0000016a 	andeq	r0, r0, sl, ror #2
     b58:	0000c40a 	andeq	ip, r0, sl, lsl #8
     b5c:	82e88000 	rschi	r8, r8, #0
     b60:	b50a0280 	strlt	r0, [sl, #-640]	; 0x280
     b64:	80000000 	andhi	r0, r0, r0
     b68:	028082e8 	addeq	r8, r0, #232, 4	; 0x8000000e
     b6c:	0002f40a 	andeq	pc, r2, sl, lsl #8
     b70:	82e88400 	rschi	r8, r8, #0, 8
     b74:	990a0280 	stmdbls	sl, {r7, r9}
     b78:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
     b7c:	028082e8 	addeq	r8, r0, #232, 4	; 0x8000000e
     b80:	0003040a 	andeq	r0, r3, sl, lsl #8
     b84:	82e88c00 	rschi	r8, r8, #0, 24
     b88:	080a0280 	stmdaeq	sl, {r7, r9}
     b8c:	90000000 	andls	r0, r0, r0
     b90:	028082e8 	addeq	r8, r0, #232, 4	; 0x8000000e
     b94:	0000e70a 	andeq	lr, r0, sl, lsl #14
     b98:	82e89400 	rschi	r9, r8, #0, 8
     b9c:	950a0280 	strls	r0, [sl, #-640]	; 0x280
     ba0:	98000001 	stmdals	r0, {r0}
     ba4:	028082e8 	addeq	r8, r0, #232, 4	; 0x8000000e
     ba8:	0002b40a 	andeq	fp, r2, sl, lsl #8
     bac:	82e89c00 	rschi	r9, r8, #0, 24
     bb0:	660a0280 	strvs	r0, [sl], -r0, lsl #5
     bb4:	a0000003 	andge	r0, r0, r3
     bb8:	028082e8 	addeq	r8, r0, #232, 4	; 0x8000000e
     bbc:	04040900 	streq	r0, [r4], #-2304	; 0x900
     bc0:	0001e114 	andeq	lr, r1, r4, lsl r1
     bc4:	00d30a00 	sbcseq	r0, r3, r0, lsl #20
     bc8:	e4800000 	str	r0, [r0], #0
     bcc:	0a028082 	beq	a0ddc <__bss_end__+0x970b4>
     bd0:	000002c9 	andeq	r0, r0, r9, asr #5
     bd4:	8082e480 	addhi	lr, r2, r0, lsl #9
     bd8:	00fb0a02 	rscseq	r0, fp, r2, lsl #20
     bdc:	e4840000 	str	r0, [r4], #0
     be0:	0a028082 	beq	a0df0 <__bss_end__+0x970c8>
     be4:	00000109 	andeq	r0, r0, r9, lsl #2
     be8:	8082e488 	addhi	lr, r2, r8, lsl #9
     bec:	034b0a02 	movteq	r0, #47618	; 0xba02
     bf0:	e48c0000 	str	r0, [ip], #0
     bf4:	0a028082 	beq	a0e04 <__bss_end__+0x970dc>
     bf8:	0000015e 	andeq	r0, r0, lr, asr r1
     bfc:	8082e490 	umullhi	lr, r2, r0, r4
     c00:	016c0a02 	cmneq	ip, r2, lsl #20
     c04:	e4940000 	ldr	r0, [r4], #0
     c08:	0a028082 	beq	a0e18 <__bss_end__+0x970f0>
     c0c:	000002db 	ldrdeq	r0, [r0], -fp
     c10:	8082e498 	umullhi	lr, r2, r8, r4
     c14:	004c0a02 	subeq	r0, ip, r2, lsl #20
     c18:	e49c0000 	ldr	r0, [ip], #0
     c1c:	0a028082 	beq	a0e2c <__bss_end__+0x97104>
     c20:	0000005b 	andeq	r0, r0, fp, asr r0
     c24:	8082e4a0 	addhi	lr, r2, r0, lsr #9
     c28:	01170a02 	tsteq	r7, r2, lsl #20
     c2c:	e4a40000 	strt	r0, [r4], #0
     c30:	00028082 	andeq	r8, r2, r2, lsl #1
     c34:	0004af0b 	andeq	sl, r4, fp, lsl #30
     c38:	f83f0100 			; <UNDEFINED> instruction: 0xf83f0100
     c3c:	1c000084 	stcne	0, cr0, [r0], {132}	; 0x84
     c40:	01000000 	mrseq	r0, (UNDEF: 0)
     c44:	0002199c 	muleq	r2, ip, r9
     c48:	04280c00 	strteq	r0, [r8], #-3072	; 0xc00
     c4c:	02290000 	eoreq	r0, r9, #0
     c50:	03050000 	movweq	r0, #20480	; 0x5000
     c54:	000095a0 	andeq	r9, r0, r0, lsr #11
     c58:	0085080d 	addeq	r0, r5, sp, lsl #16
     c5c:	0002bf00 	andeq	fp, r2, r0, lsl #30
     c60:	50010e00 	andpl	r0, r1, r0, lsl #28
     c64:	96d00305 	ldrbls	r0, [r0], r5, lsl #6
     c68:	00000000 	andeq	r0, r0, r0
     c6c:	00007d0f 	andeq	r7, r0, pc, lsl #26
     c70:	00022900 	andeq	r2, r2, r0, lsl #18
     c74:	00761000 	rsbseq	r1, r6, r0
     c78:	00130000 	andseq	r0, r3, r0
     c7c:	00021906 	andeq	r1, r2, r6, lsl #18
     c80:	03261100 	teqeq	r6, #0, 2
     c84:	11010000 	mrsne	r0, (UNDEF: 1)
     c88:	00008514 	andeq	r8, r0, r4, lsl r5
     c8c:	00000040 	andeq	r0, r0, r0, asr #32
     c90:	02ae9c01 	adceq	r9, lr, #256	; 0x100
     c94:	d8120000 	ldmdale	r2, {}	; <UNPREDICTABLE>
     c98:	01000004 	tsteq	r0, r4
     c9c:	00002c11 	andeq	r2, r0, r1, lsl ip
     ca0:	00020300 	andeq	r0, r2, r0, lsl #6
     ca4:	85201300 	strhi	r1, [r0, #-768]!	; 0x300
     ca8:	01e10000 	mvneq	r0, r0
     cac:	2c140000 	ldccs	0, cr0, [r4], {-0}
     cb0:	d5000085 	strle	r0, [r0, #-133]	; 0x85
     cb4:	77000002 	strvc	r0, [r0, -r2]
     cb8:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
     cbc:	31015101 	tstcc	r1, r1, lsl #2
     cc0:	0550010e 	ldrbeq	r0, [r0, #-270]	; 0x10e
     cc4:	00b2180c 	adcseq	r1, r2, ip, lsl #16
     cc8:	38140020 	ldmdacc	r4, {r5}
     ccc:	d5000085 	strle	r0, [r0, #-133]	; 0x85
     cd0:	94000002 	strls	r0, [r0], #-2
     cd4:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
     cd8:	74025101 	strvc	r5, [r2], #-257	; 0x101
     cdc:	50010e00 	andpl	r0, r1, r0, lsl #28
     ce0:	b4000c05 	strlt	r0, [r0], #-3077	; 0xc05
     ce4:	0d002000 	stceq	0, cr2, [r0, #-0]
     ce8:	00008544 	andeq	r8, r0, r4, asr #10
     cec:	000002d5 	ldrdeq	r0, [r0], -r5
     cf0:	0251010e 	subseq	r0, r1, #-2147483645	; 0x80000003
     cf4:	010eaa08 	tsteq	lr, r8, lsl #20
     cf8:	080c0550 	stmdaeq	ip, {r4, r6, r8, sl}
     cfc:	002000b4 	strhteq	r0, [r0], -r4
     d00:	033b1500 	teqeq	fp, #0, 10
     d04:	80020000 	andhi	r0, r2, r0
     d08:	000000fd 	strdeq	r0, [r0], -sp
     d0c:	9d240305 	stcls	3, cr0, [r4, #-20]!	; 0xffffffec
     d10:	69160000 	ldmdbvs	r6, {}	; <UNPREDICTABLE>
     d14:	05000005 	streq	r0, [r0, #-5]
     d18:	00002527 	andeq	r2, r0, r7, lsr #10
     d1c:	0002d500 	andeq	sp, r2, r0, lsl #10
     d20:	00841700 	addeq	r1, r4, r0, lsl #14
     d24:	00180000 	andseq	r0, r8, r0
     d28:	00036019 	andeq	r6, r3, r9, lsl r0
     d2c:	17940500 	ldrne	r0, [r4, r0, lsl #10]
     d30:	0000002c 	andeq	r0, r0, ip, lsr #32
     d34:	00002c17 	andeq	r2, r0, r7, lsl ip
     d38:	91000000 	mrsls	r0, (UNDEF: 0)
     d3c:	04000001 	streq	r0, [r0], #-1
     d40:	00049400 	andeq	r9, r4, r0, lsl #8
     d44:	fb010400 	blx	41d4e <__bss_end__+0x38026>
     d48:	01000001 	tsteq	r0, r1
     d4c:	00000558 	andeq	r0, r0, r8, asr r5
     d50:	0000057a 	andeq	r0, r0, sl, ror r5
     d54:	00008554 	andeq	r8, r0, r4, asr r5
     d58:	00000058 	andeq	r0, r0, r8, asr r0
     d5c:	0000033e 	andeq	r0, r0, lr, lsr r3
     d60:	00054902 	andeq	r4, r5, r2, lsl #18
     d64:	30280200 	eorcc	r0, r8, r0, lsl #4
     d68:	03000000 	movweq	r0, #0
     d6c:	00000570 	andeq	r0, r0, r0, ror r5
     d70:	47000304 	strmi	r0, [r0, -r4, lsl #6]
     d74:	04000000 	streq	r0, [r0], #-0
     d78:	000005c3 	andeq	r0, r0, r3, asr #11
     d7c:	00000047 	andeq	r0, r0, r7, asr #32
     d80:	04050000 	streq	r0, [r5], #-0
     d84:	00057202 	andeq	r7, r5, r2, lsl #4
     d88:	25620200 	strbcs	r0, [r2, #-512]!	; 0x200
     d8c:	06000000 	streq	r0, [r0], -r0
     d90:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     d94:	04070074 	streq	r0, [r7], #-116	; 0x74
     d98:	00003407 	andeq	r3, r0, r7, lsl #8
     d9c:	06010700 	streq	r0, [r1], -r0, lsl #14
     da0:	000001e5 	andeq	r0, r0, r5, ror #3
     da4:	f1050207 			; <UNDEFINED> instruction: 0xf1050207
     da8:	07000001 	streq	r0, [r0, -r1]
     dac:	00770504 	rsbseq	r0, r7, r4, lsl #10
     db0:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
     db4:	00007205 	andeq	r7, r0, r5, lsl #4
     db8:	08010700 	stmdaeq	r1, {r8, r9, sl}
     dbc:	000001e3 	andeq	r0, r0, r3, ror #3
     dc0:	37070207 	strcc	r0, [r7, -r7, lsl #4]
     dc4:	07000001 	streq	r0, [r0, -r1]
     dc8:	002f0704 	eoreq	r0, pc, r4, lsl #14
     dcc:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
     dd0:	00002a07 	andeq	r2, r0, r7, lsl #20
     dd4:	07040700 	streq	r0, [r4, -r0, lsl #14]
     dd8:	0000018c 	andeq	r0, r0, ip, lsl #3
     ddc:	00a70408 	adceq	r0, r7, r8, lsl #8
     de0:	01070000 	mrseq	r0, (UNDEF: 7)
     de4:	0001ec08 	andeq	lr, r1, r8, lsl #24
     de8:	b4040800 	strlt	r0, [r4], #-2048	; 0x800
     dec:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     df0:	000000a7 	andeq	r0, r0, r7, lsr #1
     df4:	0005690a 	andeq	r6, r5, sl, lsl #18
     df8:	54060100 	strpl	r0, [r6], #-256	; 0x100
     dfc:	54000000 	strpl	r0, [r0], #-0
     e00:	58000085 	stmdapl	r0, {r0, r2, r7}
     e04:	01000000 	mrseq	r0, (UNDEF: 0)
     e08:	0001439c 	muleq	r1, ip, r3
     e0c:	6d660b00 	vstmdbvs	r6!, {d16-d15}
     e10:	06010074 			; <UNDEFINED> instruction: 0x06010074
     e14:	000000ae 	andeq	r0, r0, lr, lsr #1
     e18:	0c709102 	ldfeqp	f1, [r0], #-8
     e1c:	6675620d 	ldrbtvs	r6, [r5], -sp, lsl #4
     e20:	43080100 	movwmi	r0, #33024	; 0x8100
     e24:	05000001 	streq	r0, [r0, #-1]
     e28:	00991c03 	addseq	r1, r9, r3, lsl #24
     e2c:	05be0e00 	ldreq	r0, [lr, #3584]!	; 0xe00
     e30:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
     e34:	00000049 	andeq	r0, r0, r9, asr #32
     e38:	0f5c9102 	svceq	0x005c9102
     e3c:	01007a73 	tsteq	r0, r3, ror sl
     e40:	0000540c 	andeq	r5, r0, ip, lsl #8
     e44:	00022100 	andeq	r2, r2, r0, lsl #2
     e48:	857c1000 	ldrbhi	r1, [ip, #-0]!
     e4c:	01740000 	cmneq	r4, r0
     e50:	01360000 	teqeq	r6, r0
     e54:	01110000 	tsteq	r1, r0
     e58:	4c910253 	lfmmi	f0, 4, [r1], {83}	; 0x53
     e5c:	03520111 	cmpeq	r2, #1073741828	; 0x40000004
     e60:	11064891 			; <UNDEFINED> instruction: 0x11064891
     e64:	0a035101 	beq	d5270 <__bss_end__+0xcb548>
     e68:	01110400 	tsteq	r1, r0, lsl #8
     e6c:	00740250 	rsbseq	r0, r4, r0, asr r2
     e70:	85901200 	ldrhi	r1, [r0, #512]	; 0x200
     e74:	01110000 	tsteq	r1, r0
     e78:	00740250 	rsbseq	r0, r4, r0, asr r2
     e7c:	a7130000 	ldrge	r0, [r3, -r0]
     e80:	54000000 	strpl	r0, [r0], #-0
     e84:	14000001 	strne	r0, [r0], #-1
     e88:	0000009a 	muleq	r0, sl, r0
     e8c:	150003ff 	strne	r0, [r0, #-1023]	; 0x3ff
     e90:	00000054 	andeq	r0, r0, r4, asr r0
     e94:	00000163 	andeq	r0, r0, r3, ror #2
     e98:	0000ae16 	andeq	sl, r0, r6, lsl lr
     e9c:	dd170000 	ldcle	0, cr0, [r7, #-0]
     ea0:	04000005 	streq	r0, [r0], #-5
     ea4:	00016e20 	andeq	r6, r1, r0, lsr #28
     ea8:	54040800 	strpl	r0, [r4], #-2048	; 0x800
     eac:	18000001 	stmdane	r0, {r0}
     eb0:	00000566 	andeq	r0, r0, r6, ror #10
     eb4:	00540205 	subseq	r0, r4, r5, lsl #4
     eb8:	a1160000 	tstge	r6, r0
     ebc:	16000000 	strne	r0, [r0], -r0
     ec0:	00000054 	andeq	r0, r0, r4, asr r0
     ec4:	0000ae16 	andeq	sl, r0, r6, lsl lr
     ec8:	00491600 	subeq	r1, r9, r0, lsl #12
     ecc:	00000000 	andeq	r0, r0, r0
     ed0:	000000ee 	andeq	r0, r0, lr, ror #1
     ed4:	05c50004 	strbeq	r0, [r5, #4]
     ed8:	01040000 	mrseq	r0, (UNDEF: 4)
     edc:	000001fb 	strdeq	r0, [r0], -fp
     ee0:	0005c801 	andeq	ip, r5, r1, lsl #16
     ee4:	00057a00 	andeq	r7, r5, r0, lsl #20
     ee8:	0085ac00 	addeq	sl, r5, r0, lsl #24
     eec:	00003400 	andeq	r3, r0, r0, lsl #8
     ef0:	00044400 	andeq	r4, r4, r0, lsl #8
     ef4:	05040200 	streq	r0, [r4, #-512]	; 0x200
     ef8:	00746e69 	rsbseq	r6, r4, r9, ror #28
     efc:	34070403 	strcc	r0, [r7], #-1027	; 0x403
     f00:	03000000 	movweq	r0, #0
     f04:	01e50601 	mvneq	r0, r1, lsl #12
     f08:	02030000 	andeq	r0, r3, #0
     f0c:	0001f105 	andeq	pc, r1, r5, lsl #2
     f10:	05040300 	streq	r0, [r4, #-768]	; 0x300
     f14:	00000077 	andeq	r0, r0, r7, ror r0
     f18:	72050803 	andvc	r0, r5, #196608	; 0x30000
     f1c:	03000000 	movweq	r0, #0
     f20:	01e30801 	mvneq	r0, r1, lsl #16
     f24:	02030000 	andeq	r0, r3, #0
     f28:	00013707 	andeq	r3, r1, r7, lsl #14
     f2c:	07040300 	streq	r0, [r4, -r0, lsl #6]
     f30:	0000002f 	andeq	r0, r0, pc, lsr #32
     f34:	2a070803 	bcs	1c2f48 <__bss_end__+0x1b9220>
     f38:	03000000 	movweq	r0, #0
     f3c:	018c0704 	orreq	r0, ip, r4, lsl #14
     f40:	01030000 	mrseq	r0, (UNDEF: 3)
     f44:	0001ec08 	andeq	lr, r1, r8, lsl #24
     f48:	7f040400 	svcvc	0x00040400
     f4c:	05000000 	streq	r0, [r0, #-0]
     f50:	00000072 	andeq	r0, r0, r2, ror r0
     f54:	0005d406 	andeq	sp, r5, r6, lsl #8
     f58:	25040100 	strcs	r0, [r4, #-256]	; 0x100
     f5c:	ac000000 	stcge	0, cr0, [r0], {-0}
     f60:	34000085 	strcc	r0, [r0], #-133	; 0x85
     f64:	01000000 	mrseq	r0, (UNDEF: 0)
     f68:	0000ab9c 	muleq	r0, ip, fp
     f6c:	00700700 	rsbseq	r0, r0, r0, lsl #14
     f70:	00790401 	rsbseq	r0, r9, r1, lsl #8
     f74:	024a0000 	subeq	r0, sl, #0
     f78:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     f7c:	00000025 	andeq	r0, r0, r5, lsr #32
     f80:	000000ba 	strheq	r0, [r0], -sl
     f84:	00002509 	andeq	r2, r0, r9, lsl #10
     f88:	e20a0000 	and	r0, sl, #0
     f8c:	02000005 	andeq	r0, r0, #5
     f90:	0000c51d 	andeq	ip, r0, sp, lsl r5
     f94:	ab040400 	blge	101f9c <__bss_end__+0xf8274>
     f98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     f9c:	00000025 	andeq	r0, r0, r5, lsr #32
     fa0:	000000da 	ldrdeq	r0, [r0], -sl
     fa4:	00007909 	andeq	r7, r0, r9, lsl #18
     fa8:	dd0b0000 	stcle	0, cr0, [fp, #-0]
     fac:	01000005 	tsteq	r0, r5
     fb0:	0000eb0c 	andeq	lr, r0, ip, lsl #22
     fb4:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
     fb8:	04000093 	streq	r0, [r0], #-147	; 0x93
     fbc:	0000cb04 	andeq	ip, r0, r4, lsl #22
     fc0:	06540000 	ldrbeq	r0, [r4], -r0
     fc4:	00040000 	andeq	r0, r4, r0
     fc8:	0000065e 	andeq	r0, r0, lr, asr r6
     fcc:	01fb0104 	mvnseq	r0, r4, lsl #2
     fd0:	1a010000 	bne	40fd8 <__bss_end__+0x372b0>
     fd4:	7a000006 	bvc	ff4 <_start-0x700c>
     fd8:	e0000005 	and	r0, r0, r5
     fdc:	f0000085 			; <UNDEFINED> instruction: 0xf0000085
     fe0:	de000004 	cdple	0, 0, cr0, cr0, cr4, {0}
     fe4:	02000004 	andeq	r0, r0, #4
     fe8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     fec:	04030074 	streq	r0, [r3], #-116	; 0x74
     ff0:	00003407 	andeq	r3, r0, r7, lsl #8
     ff4:	06010300 	streq	r0, [r1], -r0, lsl #6
     ff8:	000001e5 	andeq	r0, r0, r5, ror #3
     ffc:	f1050203 			; <UNDEFINED> instruction: 0xf1050203
    1000:	03000001 	movweq	r0, #1
    1004:	00770504 	rsbseq	r0, r7, r4, lsl #10
    1008:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    100c:	00007205 	andeq	r7, r0, r5, lsl #4
    1010:	08010300 	stmdaeq	r1, {r8, r9}
    1014:	000001e3 	andeq	r0, r0, r3, ror #3
    1018:	37070203 	strcc	r0, [r7, -r3, lsl #4]
    101c:	03000001 	movweq	r0, #1
    1020:	002f0704 	eoreq	r0, pc, r4, lsl #14
    1024:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1028:	00002a07 	andeq	r2, r0, r7, lsl #20
    102c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1030:	0000018c 	andeq	r0, r0, ip, lsl #3
    1034:	04050404 	streq	r0, [r5], #-1028	; 0x404
    1038:	0000007a 	andeq	r0, r0, sl, ror r0
    103c:	ec080103 	stfs	f0, [r8], {3}
    1040:	05000001 	streq	r0, [r0, #-1]
    1044:	00008704 	andeq	r8, r0, r4, lsl #14
    1048:	007a0600 	rsbseq	r0, sl, r0, lsl #12
    104c:	49070000 	stmdbmi	r7, {}	; <UNPREDICTABLE>
    1050:	02000005 	andeq	r0, r0, #5
    1054:	00009728 	andeq	r9, r0, r8, lsr #14
    1058:	05700800 	ldrbeq	r0, [r0, #-2048]!	; 0x800
    105c:	04040000 	streq	r0, [r4], #-0
    1060:	0000ae00 	andeq	sl, r0, r0, lsl #28
    1064:	05c30900 	strbeq	r0, [r3, #2304]	; 0x900
    1068:	00720000 	rsbseq	r0, r2, r0
    106c:	00000000 	andeq	r0, r0, r0
    1070:	00057207 	andeq	r7, r5, r7, lsl #4
    1074:	8c620200 	sfmhi	f0, 2, [r2], #-0
    1078:	0a000000 	beq	1080 <_start-0x6f80>
    107c:	000005fc 	strdeq	r0, [r0], -ip
    1080:	00252701 	eoreq	r2, r5, r1, lsl #14
    1084:	85e00000 	strbhi	r0, [r0, #0]!
    1088:	00140000 	andseq	r0, r4, r0
    108c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1090:	000000e0 	andeq	r0, r0, r0, ror #1
    1094:	0100630b 	tsteq	r0, fp, lsl #6
    1098:	00002527 	andeq	r2, r0, r7, lsr #10
    109c:	00026800 	andeq	r6, r2, r0, lsl #16
    10a0:	700c0000 	andvc	r0, ip, r0
    10a4:	01006461 	tsteq	r0, r1, ror #8
    10a8:	0000742e 	andeq	r7, r0, lr, lsr #8
    10ac:	0085f400 	addeq	pc, r5, r0, lsl #8
    10b0:	00002c00 	andeq	r2, r0, r0, lsl #24
    10b4:	309c0100 	addscc	r0, ip, r0, lsl #2
    10b8:	0b000001 	bleq	10c4 <_start-0x6f3c>
    10bc:	2e010070 	mcrcs	0, 0, r0, cr1, cr0, {3}
    10c0:	00000074 	andeq	r0, r0, r4, ror r0
    10c4:	00000296 	muleq	r0, r6, r2
    10c8:	00060c0d 	andeq	r0, r6, sp, lsl #24
    10cc:	742e0100 	strtvc	r0, [lr], #-256	; 0x100
    10d0:	c1000000 	mrsgt	r0, (UNDEF: 0)
    10d4:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    10d8:	0000063a 	andeq	r0, r0, sl, lsr r6
    10dc:	00252e01 	eoreq	r2, r5, r1, lsl #28
    10e0:	52010000 	andpl	r0, r1, #0
    10e4:	6e656c0f 	cdpvs	12, 6, cr6, cr5, cr15, {0}
    10e8:	252f0100 	strcs	r0, [pc, #-256]!	; ff0 <_start-0x7010>
    10ec:	01000000 	mrseq	r0, (UNDEF: 0)
    10f0:	f40a0051 	vst4.16	{d0-d3}, [sl :64], r1
    10f4:	01000005 	tsteq	r0, r5
    10f8:	00007437 	andeq	r7, r0, r7, lsr r4
    10fc:	00862000 	addeq	r2, r6, r0
    1100:	00004000 	andeq	r4, r0, r0
    1104:	9c9c0100 	ldflss	f0, [ip], {0}
    1108:	0b000001 	bleq	1114 <_start-0x6eec>
    110c:	00747364 	rsbseq	r7, r4, r4, ror #6
    1110:	00743701 	rsbseq	r3, r4, r1, lsl #14
    1114:	02e20000 	rsceq	r0, r2, #0
    1118:	6e0b0000 	cdpvs	0, 0, cr0, cr11, cr0, {0}
    111c:	25370100 	ldrcs	r0, [r7, #-256]!	; 0x100
    1120:	1a000000 	bne	1128 <_start-0x6ed8>
    1124:	0b000003 	bleq	1138 <_start-0x6ec8>
    1128:	37010070 	smlsdxcc	r1, r0, r0, r0
    112c:	00000074 	andeq	r0, r0, r4, ror r0
    1130:	0000033b 	andeq	r0, r0, fp, lsr r3
    1134:	0006b30d 	andeq	fp, r6, sp, lsl #6
    1138:	74370100 	ldrtvc	r0, [r7], #-256	; 0x100
    113c:	71000000 	mrsvc	r0, (UNDEF: 0)
    1140:	10000003 	andne	r0, r0, r3
    1144:	006e656c 	rsbeq	r6, lr, ip, ror #10
    1148:	00253901 	eoreq	r3, r5, r1, lsl #18
    114c:	038f0000 	orreq	r0, pc, #0
    1150:	730f0000 	movwvc	r0, #61440	; 0xf000
    1154:	743d0100 	ldrtvc	r0, [sp], #-256	; 0x100
    1158:	01000000 	mrseq	r0, (UNDEF: 0)
    115c:	480a0050 	stmdami	sl, {r4, r6}
    1160:	01000006 	tsteq	r0, r6
    1164:	00007447 	andeq	r7, r0, r7, asr #8
    1168:	00866000 	addeq	r6, r6, r0
    116c:	00019800 	andeq	r9, r1, r0, lsl #16
    1170:	ca9c0100 	bgt	fe701578 <__bss_end__+0xfe6f7850>
    1174:	0d000002 	stceq	0, cr0, [r0, #-8]
    1178:	0000060c 	andeq	r0, r0, ip, lsl #12
    117c:	002c4701 	eoreq	r4, ip, r1, lsl #14
    1180:	03b60000 			; <UNDEFINED> instruction: 0x03b60000
    1184:	640b0000 	strvs	r0, [fp], #-0
    1188:	01007473 	tsteq	r0, r3, ror r4
    118c:	00007447 	andeq	r7, r0, r7, asr #8
    1190:	0003e400 	andeq	lr, r3, r0, lsl #8
    1194:	006e0b00 	rsbeq	r0, lr, r0, lsl #22
    1198:	00254701 	eoreq	r4, r5, r1, lsl #14
    119c:	04520000 	ldrbeq	r0, [r2], #-0
    11a0:	760b0000 	strvc	r0, [fp], -r0
    11a4:	01006c61 	tsteq	r0, r1, ror #24
    11a8:	00002547 	andeq	r2, r0, r7, asr #10
    11ac:	00047e00 	andeq	r7, r4, r0, lsl #28
    11b0:	063a0d00 	ldrteq	r0, [sl], -r0, lsl #26
    11b4:	47010000 	strmi	r0, [r1, -r0]
    11b8:	00000025 	andeq	r0, r0, r5, lsr #32
    11bc:	00000508 	andeq	r0, r0, r8, lsl #10
    11c0:	0006110e 	andeq	r1, r6, lr, lsl #2
    11c4:	25470100 	strbcs	r0, [r7, #-256]	; 0x100
    11c8:	02000000 	andeq	r0, r0, #0
    11cc:	620f0491 	andvs	r0, pc, #-1862270976	; 0x91000000
    11d0:	01006675 	tsteq	r0, r5, ror r6
    11d4:	0002ca4c 	andeq	ip, r2, ip, asr #20
    11d8:	a8910300 	ldmge	r1, {r8, r9}
    11dc:	0070107f 	rsbseq	r1, r0, pc, ror r0
    11e0:	00744c01 	rsbseq	r4, r4, r1, lsl #24
    11e4:	05320000 	ldreq	r0, [r2, #-0]!
    11e8:	75100000 	ldrvc	r0, [r0, #-0]
    11ec:	2c4d0100 	stfcse	f0, [sp], {-0}
    11f0:	d7000000 	strle	r0, [r0, -r0]
    11f4:	11000005 	tstne	r0, r5
    11f8:	00000428 	andeq	r0, r0, r8, lsr #8
    11fc:	000002ea 	andeq	r0, r0, sl, ror #5
    1200:	96e80305 	strbtls	r0, [r8], r5, lsl #6
    1204:	cc120000 	ldcgt	0, cr0, [r2], {-0}
    1208:	74000086 	strvc	r0, [r0], #-134	; 0x86
    120c:	61000000 	mrsvs	r0, (UNDEF: 0)
    1210:	13000002 	movwne	r0, #2
    1214:	000005ee 	andeq	r0, r0, lr, ror #11
    1218:	002c5201 	eoreq	r5, ip, r1, lsl #4
    121c:	06e70000 	strbteq	r0, [r7], r0
    1220:	14000000 	strne	r0, [r0], #-0
    1224:	000087b0 			; <UNDEFINED> instruction: 0x000087b0
    1228:	0000063a 	andeq	r0, r0, sl, lsr r6
    122c:	00000290 	muleq	r0, r0, r2
    1230:	02530115 	subseq	r0, r3, #1073741829	; 0x40000005
    1234:	01157508 	tsteq	r5, r8, lsl #10
    1238:	e8030552 	stmda	r3, {r1, r4, r6, r8, sl}
    123c:	15000096 	strne	r0, [r0, #-150]	; 0x96
    1240:	03055101 	movweq	r5, #20737	; 0x5101
    1244:	00009720 	andeq	r9, r0, r0, lsr #14
    1248:	05500115 	ldrbeq	r0, [r0, #-277]	; 0x115
    124c:	00970c03 	addseq	r0, r7, r3, lsl #24
    1250:	b4160000 	ldrlt	r0, [r6], #-0
    1254:	50000087 	andpl	r0, r0, r7, lsl #1
    1258:	14000006 	strne	r0, [r0], #-6
    125c:	000087c0 	andeq	r8, r0, r0, asr #15
    1260:	000000e0 	andeq	r0, r0, r0, ror #1
    1264:	000002ad 	andeq	r0, r0, sp, lsr #5
    1268:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    126c:	1700007d 	smlsdxne	r0, sp, r0, r0
    1270:	000087d4 	ldrdeq	r8, [r0], -r4
    1274:	00000130 	andeq	r0, r0, r0, lsr r1
    1278:	02530115 	subseq	r0, r3, #1073741829	; 0x40000005
    127c:	0115007d 	tsteq	r5, sp, ror r0
    1280:	00740251 	rsbseq	r0, r4, r1, asr r2
    1284:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    1288:	00000075 	andeq	r0, r0, r5, ror r0
    128c:	00007a18 	andeq	r7, r0, r8, lsl sl
    1290:	0002da00 	andeq	sp, r2, r0, lsl #20
    1294:	006b1900 	rsbeq	r1, fp, r0, lsl #18
    1298:	003f0000 	eorseq	r0, pc, r0
    129c:	00007a18 	andeq	r7, r0, r8, lsl sl
    12a0:	0002ea00 	andeq	lr, r2, r0, lsl #20
    12a4:	006b1900 	rsbeq	r1, fp, r0, lsl #18
    12a8:	00040000 	andeq	r0, r4, r0
    12ac:	0002da06 	andeq	sp, r2, r6, lsl #20
    12b0:	062b1a00 	strteq	r1, [fp], -r0, lsl #20
    12b4:	1f010000 	svcne	0x00010000
    12b8:	000087f8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    12bc:	00000050 	andeq	r0, r0, r0, asr r0
    12c0:	036a9c01 	cmneq	sl, #256	; 0x100
    12c4:	400d0000 	andmi	r0, sp, r0
    12c8:	01000006 	tsteq	r0, r6
    12cc:	0003791f 	andeq	r7, r3, pc, lsl r9
    12d0:	00071300 	andeq	r1, r7, r0, lsl #6
    12d4:	06040d00 	streq	r0, [r4], -r0, lsl #26
    12d8:	1f010000 	svcne	0x00010000
    12dc:	0000038e 	andeq	r0, r0, lr, lsl #7
    12e0:	0000073f 	andeq	r0, r0, pc, lsr r7
    12e4:	00042811 	andeq	r2, r4, r1, lsl r8
    12e8:	0003a400 	andeq	sl, r3, r0, lsl #8
    12ec:	f0030500 			; <UNDEFINED> instruction: 0xf0030500
    12f0:	14000096 	strne	r0, [r0], #-150	; 0x96
    12f4:	00008818 	andeq	r8, r0, r8, lsl r8
    12f8:	0000063a 	andeq	r0, r0, sl, lsr r6
    12fc:	00000360 	andeq	r0, r0, r0, ror #6
    1300:	02530115 	subseq	r0, r3, #1073741829	; 0x40000005
    1304:	01152008 	tsteq	r5, r8
    1308:	f0030552 			; <UNDEFINED> instruction: 0xf0030552
    130c:	15000096 	strne	r0, [r0, #-150]	; 0x96
    1310:	03055101 	movweq	r5, #20737	; 0x5101
    1314:	00009720 	andeq	r9, r0, r0, lsr #14
    1318:	05500115 	ldrbeq	r0, [r0, #-277]	; 0x115
    131c:	00975803 	addseq	r5, r7, r3, lsl #16
    1320:	1c160000 	ldcne	0, cr0, [r6], {-0}
    1324:	50000088 	andpl	r0, r0, r8, lsl #1
    1328:	00000006 	andeq	r0, r0, r6
    132c:	0000251b 	andeq	r2, r0, fp, lsl r5
    1330:	00037900 	andeq	r7, r3, r0, lsl #18
    1334:	00251c00 	eoreq	r1, r5, r0, lsl #24
    1338:	05000000 	streq	r0, [r0, #-0]
    133c:	00036a04 	andeq	r6, r3, r4, lsl #20
    1340:	00251b00 	eoreq	r1, r5, r0, lsl #22
    1344:	038e0000 	orreq	r0, lr, #0
    1348:	811c0000 	tsthi	ip, r0
    134c:	00000000 	andeq	r0, r0, r0
    1350:	037f0405 	cmneq	pc, #83886080	; 0x5000000
    1354:	7a180000 	bvc	60135c <__bss_end__+0x5f7634>
    1358:	a4000000 	strge	r0, [r0], #-0
    135c:	19000003 	stmdbne	r0, {r0, r1}
    1360:	0000006b 	andeq	r0, r0, fp, rrx
    1364:	9406000e 	strls	r0, [r6], #-14
    1368:	1d000003 	stcne	0, cr0, [r0, #-12]
    136c:	00000566 	andeq	r0, r0, r6, ror #10
    1370:	00257d01 	eoreq	r7, r5, r1, lsl #26
    1374:	88480000 	stmdahi	r8, {}^	; <UNPREDICTABLE>
    1378:	02880000 	addeq	r0, r8, #0
    137c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1380:	000005ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1384:	6675620b 	ldrbtvs	r6, [r5], -fp, lsl #4
    1388:	747d0100 	ldrbtvc	r0, [sp], #-256	; 0x100
    138c:	6b000000 	blvs	1394 <_start-0x6c6c>
    1390:	0b000007 	bleq	13b4 <_start-0x6c4c>
    1394:	7d01006e 	stcvc	0, cr0, [r1, #-440]	; 0xfffffe48
    1398:	00000025 	andeq	r0, r0, r5, lsr #32
    139c:	00000797 	muleq	r0, r7, r7
    13a0:	746d660b 	strbtvc	r6, [sp], #-1547	; 0x60b
    13a4:	817d0100 	cmnhi	sp, r0, lsl #2
    13a8:	c5000000 	strgt	r0, [r0, #-0]
    13ac:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
    13b0:	000005be 			; <UNDEFINED> instruction: 0x000005be
    13b4:	00ae7d01 	adceq	r7, lr, r1, lsl #26
    13b8:	07f90000 	ldrbeq	r0, [r9, r0]!
    13bc:	70100000 	andsvc	r0, r0, r0
    13c0:	747e0100 	ldrbtvc	r0, [lr], #-256	; 0x100
    13c4:	0c000000 	stceq	0, cr0, [r0], {-0}
    13c8:	10000008 	andne	r0, r0, r8
    13cc:	7e010065 	cdpvc	0, 0, cr0, cr1, cr5, {3}
    13d0:	00000074 	andeq	r0, r0, r4, ror r0
    13d4:	0000088a 	andeq	r0, r0, sl, lsl #17
    13d8:	00042811 	andeq	r2, r4, r1, lsl r8
    13dc:	00060f00 	andeq	r0, r6, r0, lsl #30
    13e0:	00030500 	andeq	r0, r3, r0, lsl #10
    13e4:	1e000097 	mcrne	0, 0, r0, cr0, cr7, {4}
    13e8:	0000889c 	muleq	r0, ip, r8
    13ec:	000001f4 	strdeq	r0, [r0], -r4
    13f0:	01007310 	tsteq	r0, r0, lsl r3
    13f4:	0000748b 	andeq	r7, r0, fp, lsl #9
    13f8:	0008b100 	andeq	fp, r8, r0, lsl #2
    13fc:	756e0f00 	strbvc	r0, [lr, #-3840]!	; 0xf00
    1400:	8b01006d 	blhi	415bc <__bss_end__+0x37894>
    1404:	00000614 	andeq	r0, r0, r4, lsl r6
    1408:	7ed89103 	atnvce	f1, f3
    140c:	00063a13 	andeq	r3, r6, r3, lsl sl
    1410:	2c8c0100 	stfcss	f0, [ip], {0}
    1414:	06000000 	streq	r0, [r0], -r0
    1418:	14000009 	strne	r0, [r0], #-9
    141c:	000088cc 	andeq	r8, r0, ip, asr #17
    1420:	000000b9 	strheq	r0, [r0], -r9
    1424:	0000046d 	andeq	r0, r0, sp, ror #8
    1428:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    142c:	14000075 	strne	r0, [r0], #-117	; 0x75
    1430:	000088f0 	strdeq	r8, [r0], -r0
    1434:	0000063a 	andeq	r0, r0, sl, lsr r6
    1438:	0000049c 	muleq	r0, ip, r4
    143c:	02530115 	subseq	r0, r3, #1073741829	; 0x40000005
    1440:	01159208 	tsteq	r5, r8, lsl #4
    1444:	00030552 	andeq	r0, r3, r2, asr r5
    1448:	15000097 	strne	r0, [r0, #-151]	; 0x97
    144c:	03055101 	movweq	r5, #20737	; 0x5101
    1450:	00009720 	andeq	r9, r0, r0, lsr #14
    1454:	05500115 	ldrbeq	r0, [r0, #-277]	; 0x115
    1458:	00977003 	addseq	r7, r7, r3
    145c:	f4160000 			; <UNDEFINED> instruction: 0xf4160000
    1460:	50000088 	andpl	r0, r0, r8, lsl #1
    1464:	14000006 	strne	r0, [r0], #-6
    1468:	00008974 	andeq	r8, r0, r4, ror r9
    146c:	0000063a 	andeq	r0, r0, sl, lsr r6
    1470:	000004d4 	ldrdeq	r0, [r0], -r4
    1474:	02530115 	subseq	r0, r3, #1073741829	; 0x40000005
    1478:	01159808 	tsteq	r5, r8, lsl #16
    147c:	00030552 	andeq	r0, r3, r2, asr r5
    1480:	15000097 	strne	r0, [r0, #-151]	; 0x97
    1484:	03055101 	movweq	r5, #20737	; 0x5101
    1488:	00009720 	andeq	r9, r0, r0, lsr #14
    148c:	05500115 	ldrbeq	r0, [r0, #-277]	; 0x115
    1490:	00978c03 	addseq	r8, r7, r3, lsl #24
    1494:	78160000 	ldmdavc	r6, {}	; <UNPREDICTABLE>
    1498:	50000089 	andpl	r0, r0, r9, lsl #1
    149c:	14000006 	strne	r0, [r0], #-6
    14a0:	0000899c 	muleq	r0, ip, r9
    14a4:	0000019c 	muleq	r0, ip, r1
    14a8:	0000050a 	andeq	r0, r0, sl, lsl #10
    14ac:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    14b0:	01158008 	tsteq	r5, r8
    14b4:	d0910351 	addsle	r0, r1, r1, asr r3
    14b8:	5001157e 	andpl	r1, r1, lr, ror r5
    14bc:	02153a01 	andseq	r3, r5, #4096	; 0x1000
    14c0:	3101047d 	tstcc	r1, sp, ror r4
    14c4:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    14c8:	00007702 	andeq	r7, r0, r2, lsl #14
    14cc:	0089c414 	addeq	ip, r9, r4, lsl r4
    14d0:	00019c00 	andeq	r9, r1, r0, lsl #24
    14d4:	00053700 	andeq	r3, r5, r0, lsl #14
    14d8:	52011500 	andpl	r1, r1, #0, 10
    14dc:	15800802 	strne	r0, [r0, #2050]	; 0x802
    14e0:	91035101 	tstls	r3, r1, lsl #2
    14e4:	01157ed0 			; <UNDEFINED> instruction: 0x01157ed0
    14e8:	153a0150 	ldrne	r0, [sl, #-336]!	; 0x150
    14ec:	01047d02 	tsteq	r4, r2, lsl #26
    14f0:	7d021530 	cfstr32vc	mvfx1, [r2, #-192]	; 0xffffff40
    14f4:	00770200 	rsbseq	r0, r7, r0, lsl #4
    14f8:	89ec1400 	stmibhi	ip!, {sl, ip}^
    14fc:	019c0000 	orrseq	r0, ip, r0
    1500:	05640000 	strbeq	r0, [r4, #-0]!
    1504:	01150000 	tsteq	r5, r0
    1508:	80080252 	andhi	r0, r8, r2, asr r2
    150c:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    1510:	157ed091 	ldrbne	sp, [lr, #-145]!	; 0x91
    1514:	40015001 	andmi	r5, r1, r1
    1518:	047d0215 	ldrbteq	r0, [sp], #-533	; 0x215
    151c:	02153001 	andseq	r3, r5, #1
    1520:	7702007d 	smlsdxvc	r2, sp, r0, r0
    1524:	14140000 	ldrne	r0, [r4], #-0
    1528:	9c00008a 	stcls	0, cr0, [r0], {138}	; 0x8a
    152c:	91000001 	tstls	r0, r1
    1530:	15000005 	strne	r0, [r0, #-5]
    1534:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    1538:	51011580 	smlabbpl	r1, r0, r5, r1
    153c:	7ed09103 	atnvcs	f1, f3
    1540:	01500115 	cmpeq	r0, r5, lsl r1
    1544:	7d021532 	cfstr32vc	mvfx1, [r2, #-200]	; 0xffffff38
    1548:	15300104 	ldrne	r0, [r0, #-260]!	; 0x104
    154c:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    1550:	14000077 	strne	r0, [r0], #-119	; 0x77
    1554:	00008a48 	andeq	r8, r0, r8, asr #20
    1558:	0000019c 	muleq	r0, ip, r1
    155c:	000005be 			; <UNDEFINED> instruction: 0x000005be
    1560:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    1564:	01158008 	tsteq	r5, r8
    1568:	d0910351 	addsle	r0, r1, r1, asr r3
    156c:	5001157e 	andpl	r1, r1, lr, ror r5
    1570:	02153801 	andseq	r3, r5, #65536	; 0x10000
    1574:	3001047d 	andcc	r0, r1, sp, ror r4
    1578:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    157c:	00007702 	andeq	r7, r0, r2, lsl #14
    1580:	008a6414 	addeq	r6, sl, r4, lsl r4
    1584:	00063a00 	andeq	r3, r6, r0, lsl #20
    1588:	0005f400 	andeq	pc, r5, r0, lsl #8
    158c:	53011500 	movwpl	r1, #5376	; 0x1500
    1590:	15b90802 	ldrne	r0, [r9, #2050]!	; 0x802
    1594:	03055201 	movweq	r5, #20993	; 0x5201
    1598:	00009700 	andeq	r9, r0, r0, lsl #14
    159c:	05510115 	ldrbeq	r0, [r1, #-277]	; 0x115
    15a0:	00972003 	addseq	r2, r7, r3
    15a4:	50011500 	andpl	r1, r1, r0, lsl #10
    15a8:	97b40305 	ldrls	r0, [r4, r5, lsl #6]!
    15ac:	02150000 	andseq	r0, r5, #0
    15b0:	7902007d 	stmdbvc	r2, {r0, r2, r3, r4, r5, r6}
    15b4:	68160000 	ldmdavs	r6, {}	; <UNPREDICTABLE>
    15b8:	5000008a 	andpl	r0, r0, sl, lsl #1
    15bc:	00000006 	andeq	r0, r0, r6
    15c0:	007a1800 	rsbseq	r1, sl, r0, lsl #16
    15c4:	060f0000 	streq	r0, [pc], -r0
    15c8:	6b190000 	blvs	6415d0 <__bss_end__+0x6378a8>
    15cc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    15d0:	05ff0600 	ldrbeq	r0, [pc, #1536]!	; 1bd8 <_start-0x6428>
    15d4:	7a180000 	bvc	6015dc <__bss_end__+0x5f78b4>
    15d8:	24000000 	strcs	r0, [r0], #-0
    15dc:	19000006 	stmdbne	r0, {r1, r2}
    15e0:	0000006b 	andeq	r0, r0, fp, rrx
    15e4:	e21f007f 	ands	r0, pc, #127	; 0x7f
    15e8:	03000005 	movweq	r0, #5
    15ec:	0003791d 	andeq	r7, r3, sp, lsl r9
    15f0:	05dd1f00 	ldrbeq	r1, [sp, #3840]	; 0xf00
    15f4:	20030000 	andcs	r0, r3, r0
    15f8:	0000038e 	andeq	r0, r0, lr, lsl #7
    15fc:	00056920 	andeq	r6, r5, r0, lsr #18
    1600:	25270300 	strcs	r0, [r7, #-768]!	; 0x300
    1604:	50000000 	andpl	r0, r0, r0
    1608:	1c000006 	stcne	0, cr0, [r0], {6}
    160c:	00000081 	andeq	r0, r0, r1, lsl #1
    1610:	7f220021 	svcvc	0x00220021
    1614:	03000001 	movweq	r0, #1
    1618:	00ff0063 	rscseq	r0, pc, r3, rrx
    161c:	00040000 	andeq	r0, r4, r0
    1620:	0000083c 	andeq	r0, r0, ip, lsr r8
    1624:	01fb0104 	mvnseq	r0, r4, lsl #2
    1628:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    162c:	7a000006 	bvc	164c <_start-0x69b4>
    1630:	d0000005 	andle	r0, r0, r5
    1634:	2800008a 	stmdacs	r0, {r1, r3, r7}
    1638:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    163c:	02000006 	andeq	r0, r0, #6
    1640:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1644:	04030074 	streq	r0, [r3], #-116	; 0x74
    1648:	00003407 	andeq	r3, r0, r7, lsl #8
    164c:	06010300 	streq	r0, [r1], -r0, lsl #6
    1650:	000001e5 	andeq	r0, r0, r5, ror #3
    1654:	f1050203 			; <UNDEFINED> instruction: 0xf1050203
    1658:	03000001 	movweq	r0, #1
    165c:	00770504 	rsbseq	r0, r7, r4, lsl #10
    1660:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1664:	00007205 	andeq	r7, r0, r5, lsl #4
    1668:	08010300 	stmdaeq	r1, {r8, r9}
    166c:	000001e3 	andeq	r0, r0, r3, ror #3
    1670:	37070203 	strcc	r0, [r7, -r3, lsl #4]
    1674:	03000001 	movweq	r0, #1
    1678:	002f0704 	eoreq	r0, pc, r4, lsl #14
    167c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1680:	00002a07 	andeq	r2, r0, r7, lsl #20
    1684:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1688:	0000018c 	andeq	r0, r0, ip, lsl #3
    168c:	ec080103 	stfs	f0, [r8], {3}
    1690:	04000001 	streq	r0, [r0], #-1
    1694:	00007f04 	andeq	r7, r0, r4, lsl #30
    1698:	00720500 	rsbseq	r0, r2, r0, lsl #10
    169c:	7f060000 	svcvc	0x00060000
    16a0:	01000001 	tsteq	r0, r1
    16a4:	008ad004 	addeq	sp, sl, r4
    16a8:	00002800 	andeq	r2, r0, r0, lsl #16
    16ac:	ca9c0100 	bgt	fe701ab4 <__bss_end__+0xfe6f7d8c>
    16b0:	07000000 	streq	r0, [r0, -r0]
    16b4:	00008ae4 	andeq	r8, r0, r4, ror #21
    16b8:	000000ac 	andeq	r0, r0, ip, lsr #1
    16bc:	05500108 	ldrbeq	r0, [r0, #-264]	; 0x108
    16c0:	0097ec03 	addseq	lr, r7, r3, lsl #24
    16c4:	ec090000 	stc	0, cr0, [r9], {-0}
    16c8:	ea00008a 	b	18f8 <_start-0x6708>
    16cc:	c0000000 	andgt	r0, r0, r0
    16d0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    16d4:	08025001 	stmdaeq	r2, {r0, ip, lr}
    16d8:	f00a0064 			; <UNDEFINED> instruction: 0xf00a0064
    16dc:	fb00008a 	blx	190e <_start-0x66f2>
    16e0:	00000000 	andeq	r0, r0, r0
    16e4:	0000250b 	andeq	r2, r0, fp, lsl #10
    16e8:	0000d900 	andeq	sp, r0, r0, lsl #18
    16ec:	00790c00 	rsbseq	r0, r9, r0, lsl #24
    16f0:	0d000000 	stceq	0, cr0, [r0, #-0]
    16f4:	000005dd 	ldrdeq	r0, [r0], -sp
    16f8:	00e42002 	rsceq	r2, r4, r2
    16fc:	04040000 	streq	r0, [r4], #-0
    1700:	000000ca 	andeq	r0, r0, sl, asr #1
    1704:	0006720e 	andeq	r7, r6, lr, lsl #4
    1708:	fb4d0200 	blx	1341f12 <__bss_end__+0x13381ea>
    170c:	0c000000 	stceq	0, cr0, [r0], {-0}
    1710:	0000002c 	andeq	r0, r0, ip, lsr #32
    1714:	064d0f00 	strbeq	r0, [sp], -r0, lsl #30
    1718:	60020000 	andvs	r0, r2, r0
    171c:	00010b00 	andeq	r0, r1, r0, lsl #22
    1720:	06000400 	streq	r0, [r0], -r0, lsl #8
    1724:	04000009 	streq	r0, [r0], #-9
    1728:	0001fb01 	andeq	pc, r1, r1, lsl #22
    172c:	067b0100 	ldrbteq	r0, [fp], -r0, lsl #2
    1730:	057a0000 	ldrbeq	r0, [sl, #-0]!
    1734:	8af80000 	bhi	ffe0173c <__bss_end__+0xffdf7a14>
    1738:	00340000 	eorseq	r0, r4, r0
    173c:	07550000 	ldrbeq	r0, [r5, -r0]
    1740:	04020000 	streq	r0, [r2], #-0
    1744:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    1748:	07040300 	streq	r0, [r4, -r0, lsl #6]
    174c:	00000034 	andeq	r0, r0, r4, lsr r0
    1750:	e5060103 	str	r0, [r6, #-259]	; 0x103
    1754:	03000001 	movweq	r0, #1
    1758:	01f10502 	mvnseq	r0, r2, lsl #10
    175c:	04030000 	streq	r0, [r3], #-0
    1760:	00007705 	andeq	r7, r0, r5, lsl #14
    1764:	05080300 	streq	r0, [r8, #-768]	; 0x300
    1768:	00000072 	andeq	r0, r0, r2, ror r0
    176c:	e3080103 	movw	r0, #33027	; 0x8103
    1770:	03000001 	movweq	r0, #1
    1774:	01370702 	teqeq	r7, r2, lsl #14
    1778:	04030000 	streq	r0, [r3], #-0
    177c:	00002f07 	andeq	r2, r0, r7, lsl #30
    1780:	07080300 	streq	r0, [r8, -r0, lsl #6]
    1784:	0000002a 	andeq	r0, r0, sl, lsr #32
    1788:	8c070403 	cfstrshi	mvf0, [r7], {3}
    178c:	03000001 	movweq	r0, #1
    1790:	01ec0801 	mvneq	r0, r1, lsl #16
    1794:	b1040000 	mrslt	r0, (UNDEF: 4)
    1798:	01000006 	tsteq	r0, r6
    179c:	008af803 	addeq	pc, sl, r3, lsl #16
    17a0:	00003400 	andeq	r3, r0, r0, lsl #8
    17a4:	de9c0100 	fmllee	f0, f4, f0
    17a8:	05000000 	streq	r0, [r0, #-0]
    17ac:	0000068f 	andeq	r0, r0, pc, lsl #13
    17b0:	00250401 	eoreq	r0, r5, r1, lsl #8
    17b4:	9d050000 	stcls	0, cr0, [r5, #-0]
    17b8:	01000006 	tsteq	r0, r6
    17bc:	00002504 	andeq	r2, r0, r4, lsl #10
    17c0:	00000600 	andeq	r0, r0, r0, lsl #12
    17c4:	05010000 	streq	r0, [r1, #-0]
    17c8:	000000b1 	strheq	r0, [r0], -r1
    17cc:	62080007 	andvs	r0, r8, #7
    17d0:	01007373 	tsteq	r0, r3, ror r3
    17d4:	0000de07 	andeq	sp, r0, r7, lsl #28
    17d8:	00093000 	andeq	r3, r9, r0
    17dc:	06a90900 	strteq	r0, [r9], r0, lsl #18
    17e0:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    17e4:	000000de 	ldrdeq	r0, [r0], -lr
    17e8:	008b200a 	addeq	r2, fp, sl
    17ec:	0000fa00 	andeq	pc, r0, r0, lsl #20
    17f0:	8b240a00 	blhi	903ff8 <__bss_end__+0x8fa2d0>
    17f4:	01070000 	mrseq	r0, (UNDEF: 7)
    17f8:	0b000000 	bleq	1800 <_start-0x6800>
    17fc:	00002504 	andeq	r2, r0, r4, lsl #10
    1800:	068f0500 	streq	r0, [pc], r0, lsl #10
    1804:	04010000 	streq	r0, [r1], #-0
    1808:	00000025 	andeq	r0, r0, r5, lsr #32
    180c:	00069d05 	andeq	r9, r6, r5, lsl #26
    1810:	25040100 	strcs	r0, [r4, #-256]	; 0x100
    1814:	06000000 	streq	r0, [r0], -r0
    1818:	00000000 	andeq	r0, r0, r0
    181c:	01070501 	tsteq	r7, r1, lsl #10
    1820:	00070000 	andeq	r0, r7, r0
    1824:	00064d0c 	andeq	r4, r6, ip, lsl #26
    1828:	00600200 	rsbeq	r0, r0, r0, lsl #4
    182c:	000001ad 	andeq	r0, r0, sp, lsr #3
    1830:	09b00004 	ldmibeq	r0!, {r2}
    1834:	01040000 	mrseq	r0, (UNDEF: 4)
    1838:	000001fb 	strdeq	r0, [r0], -fp
    183c:	0006d301 	andeq	sp, r6, r1, lsl #6
    1840:	00057a00 	andeq	r7, r5, r0, lsl #20
	...
    184c:	0007ef00 	andeq	lr, r7, r0, lsl #30
    1850:	05040200 	streq	r0, [r4, #-512]	; 0x200
    1854:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1858:	34070403 	strcc	r0, [r7], #-1027	; 0x403
    185c:	03000000 	movweq	r0, #0
    1860:	01e50601 	mvneq	r0, r1, lsl #12
    1864:	02030000 	andeq	r0, r3, #0
    1868:	0001f105 	andeq	pc, r1, r5, lsl #2
    186c:	05040300 	streq	r0, [r4, #-768]	; 0x300
    1870:	00000077 	andeq	r0, r0, r7, ror r0
    1874:	72050803 	andvc	r0, r5, #196608	; 0x30000
    1878:	03000000 	movweq	r0, #0
    187c:	01e30801 	mvneq	r0, r1, lsl #16
    1880:	02030000 	andeq	r0, r3, #0
    1884:	00013707 	andeq	r3, r1, r7, lsl #14
    1888:	07040300 	streq	r0, [r4, -r0, lsl #6]
    188c:	0000002f 	andeq	r0, r0, pc, lsr #32
    1890:	2a070803 	bcs	1c38a4 <__bss_end__+0x1b9b7c>
    1894:	03000000 	movweq	r0, #0
    1898:	018c0704 	orreq	r0, ip, r4, lsl #14
    189c:	01030000 	mrseq	r0, (UNDEF: 3)
    18a0:	0001ec08 	andeq	lr, r1, r8, lsl #24
    18a4:	06b90400 	ldrteq	r0, [r9], r0, lsl #8
    18a8:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    18ac:	00000025 	andeq	r0, r0, r5, lsr #32
    18b0:	00008b2c 	andeq	r8, r0, ip, lsr #22
    18b4:	00000018 	andeq	r0, r0, r8, lsl r0
    18b8:	00a29c01 	adceq	r9, r2, r1, lsl #24
    18bc:	1f050000 	svcne	0x00050000
    18c0:	01000007 	tsteq	r0, r7
    18c4:	00002c0f 	andeq	r2, r0, pc, lsl #24
    18c8:	00095000 	andeq	r5, r9, r0
    18cc:	08060000 	stmdaeq	r6, {}	; <UNPREDICTABLE>
    18d0:	01000007 	tsteq	r0, r7
    18d4:	008b4417 	addeq	r4, fp, r7, lsl r4
    18d8:	00001400 	andeq	r1, r0, r0, lsl #8
    18dc:	c79c0100 	ldrgt	r0, [ip, r0, lsl #2]
    18e0:	05000000 	streq	r0, [r0, #-0]
    18e4:	0000071f 	andeq	r0, r0, pc, lsl r7
    18e8:	002c1801 	eoreq	r1, ip, r1, lsl #16
    18ec:	096f0000 	stmdbeq	pc!, {}^	; <UNPREDICTABLE>
    18f0:	06000000 	streq	r0, [r0], -r0
    18f4:	0000064d 	andeq	r0, r0, sp, asr #12
    18f8:	8b581f01 	blhi	1609504 <__bss_end__+0x15ff7dc>
    18fc:	00480000 	subeq	r0, r8, r0
    1900:	9c010000 	stcls	0, cr0, [r1], {-0}
    1904:	00000177 	andeq	r0, r0, r7, ror r1
    1908:	00071707 	andeq	r1, r7, r7, lsl #14
    190c:	772a0100 	strvc	r0, [sl, -r0, lsl #2]!
    1910:	1c000001 	stcne	0, cr0, [r0], {1}
    1914:	07201000 	streq	r1, [r0, -r0]!
    1918:	00000700 	andeq	r0, r0, r0, lsl #14
    191c:	01772b01 	cmneq	r7, r1, lsl #22
    1920:	00240000 	eoreq	r0, r4, r0
    1924:	c7072010 	smladgt	r7, r0, r0, r2
    1928:	01000006 	tsteq	r0, r6
    192c:	0001772c 	andeq	r7, r1, ip, lsr #14
    1930:	00000000 	andeq	r0, r0, r0
    1934:	06e7085a 	usateq	r0, #7, sl, asr #16
    1938:	2d010000 	stccs	0, cr0, [r1, #-0]
    193c:	00000177 	andeq	r0, r0, r7, ror r1
    1940:	8b600920 	blhi	1803dc8 <__bss_end__+0x17fa0a0>
    1944:	00790000 	rsbseq	r0, r9, r0
    1948:	6c090000 	stcvs	0, cr0, [r9], {-0}
    194c:	a200008b 	andge	r0, r0, #139	; 0x8b
    1950:	0a000000 	beq	1958 <_start-0x66a8>
    1954:	00008b74 	andeq	r8, r0, r4, ror fp
    1958:	0000018d 	andeq	r0, r0, sp, lsl #3
    195c:	0000013a 	andeq	r0, r0, sl, lsr r1
    1960:	0150010b 	cmpeq	r0, fp, lsl #2
    1964:	800a004e 	andhi	r0, sl, lr, asr #32
    1968:	9e00008b 	cdpls	0, 0, cr0, cr0, cr11, {4}
    196c:	5a000001 	bpl	1978 <_start-0x6688>
    1970:	0b000001 	bleq	197c <_start-0x6684>
    1974:	0c055101 	stfeqs	f5, [r5], {1}
    1978:	5a000001 	bpl	1984 <_start-0x667c>
    197c:	0550010b 	ldrbeq	r0, [r0, #-267]	; 0x10b
    1980:	1000240c 	andne	r2, r0, ip, lsl #8
    1984:	8c0c0020 	stchi	0, cr0, [ip], {32}
    1988:	9e00008b 	cdpls	0, 0, cr0, cr0, cr11, {4}
    198c:	0b000001 	bleq	1998 <_start-0x6668>
    1990:	0c055101 	stfeqs	f5, [r5], {1}
    1994:	5a000020 	bpl	1a1c <_start-0x65e4>
    1998:	0550010b 	ldrbeq	r0, [r0, #-267]	; 0x10b
    199c:	10001c0c 	andne	r1, r0, ip, lsl #24
    19a0:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    19a4:	00000025 	andeq	r0, r0, r5, lsr #32
    19a8:	0006bc08 	andeq	fp, r6, r8, lsl #24
    19ac:	880d0100 	stmdahi	sp, {r8}
    19b0:	10000001 	andne	r0, r0, r1
    19b4:	00002c0d 	andeq	r2, r0, sp, lsl #24
    19b8:	06720e00 	ldrbteq	r0, [r2], -r0, lsl #28
    19bc:	4d020000 	stcmi	0, cr0, [r2, #-0]
    19c0:	0000019e 	muleq	r0, lr, r1
    19c4:	00002c0f 	andeq	r2, r0, pc, lsl #24
    19c8:	60100000 	andsvs	r0, r0, r0
    19cc:	02000003 	andeq	r0, r0, #3
    19d0:	002c0f94 	mlaeq	ip, r4, pc, r0	; <UNPREDICTABLE>
    19d4:	2c0f0000 	stccs	0, cr0, [pc], {-0}
    19d8:	00000000 	andeq	r0, r0, r0
    19dc:	0001f700 	andeq	pc, r1, r0, lsl #14
    19e0:	9e000400 	cfcpysls	mvf0, mvf0
    19e4:	0400000a 	streq	r0, [r0], #-10
    19e8:	0001fb01 	andeq	pc, r1, r1, lsl #22
    19ec:	07410100 	strbeq	r0, [r1, -r0, lsl #2]
    19f0:	057a0000 	ldrbeq	r0, [sl, #-0]!
    19f4:	8ba00000 	blhi	fe8019fc <__bss_end__+0xfe7f7cd4>
    19f8:	00980000 	addseq	r0, r8, r0
    19fc:	088c0000 	stmeq	ip, {}	; <UNPREDICTABLE>
    1a00:	04020000 	streq	r0, [r2], #-0
    1a04:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    1a08:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1a0c:	00000034 	andeq	r0, r0, r4, lsr r0
    1a10:	e5060103 	str	r0, [r6, #-259]	; 0x103
    1a14:	03000001 	movweq	r0, #1
    1a18:	01f10502 	mvnseq	r0, r2, lsl #10
    1a1c:	04030000 	streq	r0, [r3], #-0
    1a20:	00007705 	andeq	r7, r0, r5, lsl #14
    1a24:	05080300 	streq	r0, [r8, #-768]	; 0x300
    1a28:	00000072 	andeq	r0, r0, r2, ror r0
    1a2c:	e3080103 	movw	r0, #33027	; 0x8103
    1a30:	03000001 	movweq	r0, #1
    1a34:	01370702 	teqeq	r7, r2, lsl #14
    1a38:	04030000 	streq	r0, [r3], #-0
    1a3c:	00002f07 	andeq	r2, r0, r7, lsl #30
    1a40:	07080300 	streq	r0, [r8, -r0, lsl #6]
    1a44:	0000002a 	andeq	r0, r0, sl, lsr #32
    1a48:	8c070403 	cfstrshi	mvf0, [r7], {3}
    1a4c:	03000001 	movweq	r0, #1
    1a50:	01ec0801 	mvneq	r0, r1, lsl #16
    1a54:	5a040000 	bpl	101a5c <__bss_end__+0xf7d34>
    1a58:	01000007 	tsteq	r0, r7
    1a5c:	008ba005 	addeq	sl, fp, r5
    1a60:	00001c00 	andeq	r1, r0, r0, lsl #24
    1a64:	9e9c0100 	fmllse	f0, f4, f0
    1a68:	05000000 	streq	r0, [r0, #-0]
    1a6c:	00000754 	andeq	r0, r0, r4, asr r7
    1a70:	002c0501 	eoreq	r0, ip, r1, lsl #10
    1a74:	09990000 	ldmibeq	r9, {}	; <UNPREDICTABLE>
    1a78:	06000000 	streq	r0, [r0], -r0
    1a7c:	00000724 	andeq	r0, r0, r4, lsr #14
    1a80:	002c0b01 	eoreq	r0, ip, r1, lsl #22
    1a84:	8bbc0000 	blhi	fef01a8c <__bss_end__+0xfeef7d64>
    1a88:	00140000 	andseq	r0, r4, r0
    1a8c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a90:	000000cb 	andeq	r0, r0, fp, asr #1
    1a94:	008bc807 	addeq	ip, fp, r7, lsl #16
    1a98:	0001de00 	andeq	sp, r1, r0, lsl #28
    1a9c:	50010800 	andpl	r0, r1, r0, lsl #16
    1aa0:	30040c05 	andcc	r0, r4, r5, lsl #24
    1aa4:	00002000 	andeq	r2, r0, r0
    1aa8:	00031706 	andeq	r1, r3, r6, lsl #14
    1aac:	2c100100 	ldfcss	f0, [r0], {-0}
    1ab0:	d0000000 	andle	r0, r0, r0
    1ab4:	1c00008b 	stcne	0, cr0, [r0], {139}	; 0x8b
    1ab8:	01000000 	mrseq	r0, (UNDEF: 0)
    1abc:	00010d9c 	muleq	r1, ip, sp
    1ac0:	00750900 	rsbseq	r0, r5, r0, lsl #18
    1ac4:	002c1201 	eoreq	r1, ip, r1, lsl #4
    1ac8:	09cd0000 	stmibeq	sp, {}^	; <UNPREDICTABLE>
    1acc:	d80a0000 	stmdale	sl, {}	; <UNPREDICTABLE>
    1ad0:	f300008b 	vhadd.u8	d0, d16, d11
    1ad4:	0a000001 	beq	1ae0 <_start-0x6520>
    1ad8:	00008bdc 	ldrdeq	r8, [r0], -ip
    1adc:	0000009e 	muleq	r0, lr, r0
    1ae0:	008be40a 	addeq	lr, fp, sl, lsl #8
    1ae4:	0001f300 	andeq	pc, r1, r0, lsl #6
    1ae8:	67040000 	strvs	r0, [r4, -r0]
    1aec:	01000007 	tsteq	r0, r7
    1af0:	008bec17 	addeq	lr, fp, r7, lsl ip
    1af4:	00002400 	andeq	r2, r0, r0, lsl #8
    1af8:	6b9c0100 	blvs	fe701f00 <__bss_end__+0xfe6f81d8>
    1afc:	0b000001 	bleq	1b08 <_start-0x64f8>
    1b00:	01007375 	tsteq	r0, r5, ror r3
    1b04:	00002c17 	andeq	r2, r0, r7, lsl ip
    1b08:	0009eb00 	andeq	lr, r9, r0, lsl #22
    1b0c:	62720c00 	rsbsvs	r0, r2, #0, 24
    1b10:	2c180100 	ldfcss	f0, [r8], {-0}
    1b14:	01000000 	mrseq	r0, (UNDEF: 0)
    1b18:	8bfc0d54 	blhi	fff05070 <__bss_end__+0xffefb348>
    1b1c:	00100000 	andseq	r0, r0, r0
    1b20:	01610000 	cmneq	r1, r0
    1b24:	72090000 	andvc	r0, r9, #0
    1b28:	1a010061 	bne	41cb4 <__bss_end__+0x37f8c>
    1b2c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1b30:	00000a09 	andeq	r0, r0, r9, lsl #20
    1b34:	008c000a 	addeq	r0, ip, sl
    1b38:	0000cb00 	andeq	ip, r0, r0, lsl #22
    1b3c:	f80a0000 			; <UNDEFINED> instruction: 0xf80a0000
    1b40:	cb00008b 	blgt	1d74 <_start-0x628c>
    1b44:	00000000 	andeq	r0, r0, r0
    1b48:	00067204 	andeq	r7, r6, r4, lsl #4
    1b4c:	10200100 	eorne	r0, r0, r0, lsl #2
    1b50:	1400008c 	strne	r0, [r0], #-140	; 0x8c
    1b54:	01000000 	mrseq	r0, (UNDEF: 0)
    1b58:	0001a49c 	muleq	r1, ip, r4
    1b5c:	736d0b00 	cmnvc	sp, #0, 22
    1b60:	2c200100 	stfcss	f0, [r0], #-0
    1b64:	1c000000 	stcne	0, cr0, [r0], {-0}
    1b68:	0700000a 	streq	r0, [r0, -sl]
    1b6c:	00008c20 	andeq	r8, r0, r0, lsr #24
    1b70:	0000010d 	andeq	r0, r0, sp, lsl #2
    1b74:	07500108 	ldrbeq	r0, [r0, -r8, lsl #2]
    1b78:	0a5001f3 	beq	140234c <__bss_end__+0x13f8624>
    1b7c:	001e03e8 	andseq	r0, lr, r8, ror #7
    1b80:	07370400 	ldreq	r0, [r7, -r0, lsl #8]!
    1b84:	23010000 	movwcs	r0, #4096	; 0x1000
    1b88:	00008c24 	andeq	r8, r0, r4, lsr #24
    1b8c:	00000014 	andeq	r0, r0, r4, lsl r0
    1b90:	01de9c01 	bicseq	r9, lr, r1, lsl #24
    1b94:	730b0000 	movwvc	r0, #45056	; 0xb000
    1b98:	01006365 	tsteq	r0, r5, ror #6
    1b9c:	00002c23 	andeq	r2, r0, r3, lsr #24
    1ba0:	000a3d00 	andeq	r3, sl, r0, lsl #26
    1ba4:	8c340700 	ldchi	7, cr0, [r4], #-0
    1ba8:	016b0000 	cmneq	fp, r0
    1bac:	01080000 	mrseq	r0, (UNDEF: 8)
    1bb0:	01f30750 	mvnseq	r0, r0, asr r7
    1bb4:	03e80a50 	mvneq	r0, #80, 20	; 0x50000
    1bb8:	0e00001e 	mcreq	0, 0, r0, cr0, cr14, {0}
    1bbc:	000001a6 	andeq	r0, r0, r6, lsr #3
    1bc0:	002ca002 	eoreq	sl, ip, r2
    1bc4:	01f30000 	mvnseq	r0, r0
    1bc8:	2c0f0000 	stccs	0, cr0, [pc], {-0}
    1bcc:	00000000 	andeq	r0, r0, r0
    1bd0:	00014a10 	andeq	r4, r1, r0, lsl sl
    1bd4:	00840200 	addeq	r0, r4, r0, lsl #4
    1bd8:	00000348 	andeq	r0, r0, r8, asr #6
    1bdc:	0b940004 	bleq	fe501bf4 <__bss_end__+0xfe4f7ecc>
    1be0:	01040000 	mrseq	r0, (UNDEF: 4)
    1be4:	000001fb 	strdeq	r0, [r0], -fp
    1be8:	0007a101 	andeq	sl, r7, r1, lsl #2
    1bec:	00057a00 	andeq	r7, r5, r0, lsl #20
    1bf0:	008c3800 	addeq	r3, ip, r0, lsl #16
    1bf4:	00017800 	andeq	r7, r1, r0, lsl #16
    1bf8:	00093500 	andeq	r3, r9, r0, lsl #10
    1bfc:	05040200 	streq	r0, [r4, #-512]	; 0x200
    1c00:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1c04:	00077003 	andeq	r7, r7, r3
    1c08:	37d40200 	ldrbcc	r0, [r4, r0, lsl #4]
    1c0c:	04000000 	streq	r0, [r0], #-0
    1c10:	00340704 	eorseq	r0, r4, r4, lsl #14
    1c14:	01040000 	mrseq	r0, (UNDEF: 4)
    1c18:	0001e506 	andeq	lr, r1, r6, lsl #10
    1c1c:	05020400 	streq	r0, [r2, #-1024]	; 0x400
    1c20:	000001f1 	strdeq	r0, [r0], -r1
    1c24:	77050404 	strvc	r0, [r5, -r4, lsl #8]
    1c28:	04000000 	streq	r0, [r0], #-0
    1c2c:	00720508 	rsbseq	r0, r2, r8, lsl #10
    1c30:	01040000 	mrseq	r0, (UNDEF: 4)
    1c34:	0001e308 	andeq	lr, r1, r8, lsl #6
    1c38:	07020400 	streq	r0, [r2, -r0, lsl #8]
    1c3c:	00000137 	andeq	r0, r0, r7, lsr r1
    1c40:	2f070404 	svccs	0x00070404
    1c44:	04000000 	streq	r0, [r0], #-0
    1c48:	002a0708 	eoreq	r0, sl, r8, lsl #14
    1c4c:	04040000 	streq	r0, [r4], #-0
    1c50:	00018c07 	andeq	r8, r1, r7, lsl #24
    1c54:	06040500 	streq	r0, [r4], -r0, lsl #10
    1c58:	00008504 	andeq	r8, r0, r4, lsl #10
    1c5c:	08010400 	stmdaeq	r1, {sl}
    1c60:	000001ec 	andeq	r0, r0, ip, ror #3
    1c64:	00920406 	addseq	r0, r2, r6, lsl #8
    1c68:	85070000 	strhi	r0, [r7, #-0]
    1c6c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1c70:	00000085 	andeq	r0, r0, r5, lsl #1
    1c74:	000000a7 	andeq	r0, r0, r7, lsr #1
    1c78:	00007609 	andeq	r7, r0, r9, lsl #12
    1c7c:	0a000700 	beq	3884 <_start-0x477c>
    1c80:	00000792 	muleq	r0, r2, r7
    1c84:	007d1901 	rsbseq	r1, sp, r1, lsl #18
    1c88:	8c380000 	ldchi	0, cr0, [r8], #-0
    1c8c:	00640000 	rsbeq	r0, r4, r0
    1c90:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c94:	0000015c 	andeq	r0, r0, ip, asr r1
    1c98:	0007cb0b 	andeq	ip, r7, fp, lsl #22
    1c9c:	37190100 	ldrcc	r0, [r9, -r0, lsl #2]
    1ca0:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    1ca4:	0c00000a 	stceq	0, cr0, [r0], {10}
    1ca8:	00000428 	andeq	r0, r0, r8, lsr #8
    1cac:	0000015c 	andeq	r0, r0, ip, asr r1
    1cb0:	97f80305 	ldrbls	r0, [r8, r5, lsl #6]!
    1cb4:	f20d0000 	vhadd.s8	d0, d13, d0
    1cb8:	01000007 	tsteq	r0, r7
    1cbc:	00007d1c 	andeq	r7, r0, ip, lsl sp
    1cc0:	0e540100 	rdfeqs	f0, f4, f0
    1cc4:	000007c3 	andeq	r0, r0, r3, asr #15
    1cc8:	00371d01 	eorseq	r1, r7, r1, lsl #26
    1ccc:	0a980000 	beq	fe601cd4 <__bss_end__+0xfe5f7fac>
    1cd0:	600f0000 	andvs	r0, pc, r0
    1cd4:	1300008c 	movwne	r0, #140	; 0x8c
    1cd8:	28000003 	stmdacs	r0, {r0, r1}
    1cdc:	10000001 	andne	r0, r0, r1
    1ce0:	4a015301 	bmi	568ec <__bss_end__+0x4cbc4>
    1ce4:	05520110 	ldrbeq	r0, [r2, #-272]	; 0x110
    1ce8:	0097f803 	addseq	pc, r7, r3, lsl #16
    1cec:	51011000 	mrspl	r1, (UNDEF: 1)
    1cf0:	98600305 	stmdals	r0!, {r0, r2, r8, r9}^
    1cf4:	01100000 	tsteq	r0, r0
    1cf8:	20030550 	andcs	r0, r3, r0, asr r5
    1cfc:	00000098 	muleq	r0, r8, r0
    1d00:	008c6411 	addeq	r6, ip, r1, lsl r4
    1d04:	00032900 	andeq	r2, r3, r0, lsl #18
    1d08:	8c841200 	sfmhi	f1, 4, [r4], {0}
    1d0c:	03300000 	teqeq	r0, #0
    1d10:	01100000 	tsteq	r0, r0
    1d14:	01f30852 	mvnseq	r0, r2, asr r8
    1d18:	09032350 	stmdbeq	r3, {r4, r6, r8, r9, sp}
    1d1c:	01101afc 			; <UNDEFINED> instruction: 0x01101afc
    1d20:	10300151 	eorsne	r0, r0, r1, asr r1
    1d24:	f30b5001 	vhadd.u8	d5, d11, d1
    1d28:	03235001 	teqeq	r3, #1
    1d2c:	741afc09 	ldrvc	pc, [sl], #-3081	; 0xc09
    1d30:	00002200 	andeq	r2, r0, r0, lsl #4
    1d34:	00009707 	andeq	r9, r0, r7, lsl #14
    1d38:	00890a00 	addeq	r0, r9, r0, lsl #20
    1d3c:	26010000 	strcs	r0, [r1], -r0
    1d40:	0000007d 	andeq	r0, r0, sp, ror r0
    1d44:	00008c9c 	muleq	r0, ip, ip
    1d48:	00000094 	muleq	r0, r4, r0
    1d4c:	02399c01 	eorseq	r9, r9, #256	; 0x100
    1d50:	cb0b0000 	blgt	2c1d58 <__bss_end__+0x2b8030>
    1d54:	01000007 	tsteq	r0, r7
    1d58:	00003726 	andeq	r3, r0, r6, lsr #14
    1d5c:	000abe00 	andeq	fp, sl, r0, lsl #28
    1d60:	07b90b00 	ldreq	r0, [r9, r0, lsl #22]!
    1d64:	26010000 	strcs	r0, [r1], -r0
    1d68:	00000037 	andeq	r0, r0, r7, lsr r0
    1d6c:	00000b2a 	andeq	r0, r0, sl, lsr #22
    1d70:	0004280c 	andeq	r2, r4, ip, lsl #16
    1d74:	00024900 	andeq	r4, r2, r0, lsl #18
    1d78:	00030500 	andeq	r0, r3, r0, lsl #10
    1d7c:	0e000098 	mcreq	0, 0, r0, cr0, cr8, {4}
    1d80:	00000781 	andeq	r0, r0, r1, lsl #15
    1d84:	00372c01 	eorseq	r2, r7, r1, lsl #24
    1d88:	0ba40000 	bleq	fe901d90 <__bss_end__+0xfe8f8068>
    1d8c:	c40f0000 	strgt	r0, [pc], #-0	; 1d94 <_start-0x626c>
    1d90:	1300008c 	movwne	r0, #140	; 0x8c
    1d94:	e5000003 	str	r0, [r0, #-3]
    1d98:	10000001 	andne	r0, r0, r1
    1d9c:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    1da0:	52011027 	andpl	r1, r1, #39	; 0x27
    1da4:	98000305 	stmdals	r0, {r0, r2, r8, r9}
    1da8:	01100000 	tsteq	r0, r0
    1dac:	60030551 	andvs	r0, r3, r1, asr r5
    1db0:	10000098 	mulne	r0, r8, r0
    1db4:	03055001 	movweq	r5, #20481	; 0x5001
    1db8:	00009820 	andeq	r9, r0, r0, lsr #16
    1dbc:	8cc81100 	stfhie	f1, [r8], {0}
    1dc0:	03290000 	teqeq	r9, #0
    1dc4:	d4110000 	ldrle	r0, [r1], #-0
    1dc8:	a700008c 	strge	r0, [r0, -ip, lsl #1]
    1dcc:	0f000000 	svceq	0x00000000
    1dd0:	00008cf4 	strdeq	r8, [r0], -r4
    1dd4:	00000313 	andeq	r0, r0, r3, lsl r3
    1dd8:	00000226 	andeq	r0, r0, r6, lsr #4
    1ddc:	02530110 	subseq	r0, r3, #16, 2
    1de0:	01102b08 	tsteq	r0, r8, lsl #22
    1de4:	00030552 	andeq	r0, r3, r2, asr r5
    1de8:	10000098 	mulne	r0, r8, r0
    1dec:	03055101 	movweq	r5, #20737	; 0x5101
    1df0:	00009860 	andeq	r9, r0, r0, ror #16
    1df4:	05500110 	ldrbeq	r0, [r0, #-272]	; 0x110
    1df8:	00987403 	addseq	r7, r8, r3, lsl #8
    1dfc:	f8110000 			; <UNDEFINED> instruction: 0xf8110000
    1e00:	2900008c 	stmdbcs	r0, {r2, r3, r7}
    1e04:	11000003 	tstne	r0, r3
    1e08:	00008d18 	andeq	r8, r0, r8, lsl sp
    1e0c:	000000a7 	andeq	r0, r0, r7, lsr #1
    1e10:	00850800 	addeq	r0, r5, r0, lsl #16
    1e14:	02490000 	subeq	r0, r9, #0
    1e18:	76090000 	strvc	r0, [r9], -r0
    1e1c:	0f000000 	svceq	0x00000000
    1e20:	02390700 	eorseq	r0, r9, #0, 14
    1e24:	2a130000 	bcs	4c1e2c <__bss_end__+0x4b8104>
    1e28:	01000001 	tsteq	r0, r1
    1e2c:	008d303b 	addeq	r3, sp, fp, lsr r0
    1e30:	00005800 	andeq	r5, r0, r0, lsl #16
    1e34:	ab9c0100 	blge	fe70223c <__bss_end__+0xfe6f8514>
    1e38:	0c000002 	stceq	0, cr0, [r0], {2}
    1e3c:	00000428 	andeq	r0, r0, r8, lsr #8
    1e40:	000002bb 			; <UNDEFINED> instruction: 0x000002bb
    1e44:	98100305 	ldmdals	r0, {r0, r2, r8, r9}
    1e48:	580f0000 	stmdapl	pc, {}	; <UNPREDICTABLE>
    1e4c:	1300008d 	movwne	r0, #141	; 0x8d
    1e50:	a1000003 	tstge	r0, r3
    1e54:	10000002 	andne	r0, r0, r2
    1e58:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    1e5c:	5201103c 	andpl	r1, r1, #60	; 0x3c
    1e60:	98100305 	ldmdals	r0, {r0, r2, r8, r9}
    1e64:	01100000 	tsteq	r0, r0
    1e68:	60030551 	andvs	r0, r3, r1, asr r5
    1e6c:	10000098 	mulne	r0, r8, r0
    1e70:	03055001 	movweq	r5, #20481	; 0x5001
    1e74:	000098cc 	andeq	r9, r0, ip, asr #17
    1e78:	8d5c1100 	ldfhie	f1, [ip, #-0]
    1e7c:	03290000 	teqeq	r9, #0
    1e80:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1e84:	00000085 	andeq	r0, r0, r5, lsl #1
    1e88:	000002bb 			; <UNDEFINED> instruction: 0x000002bb
    1e8c:	00007609 	andeq	r7, r0, r9, lsl #12
    1e90:	07000c00 	streq	r0, [r0, -r0, lsl #24]
    1e94:	000002ab 	andeq	r0, r0, fp, lsr #5
    1e98:	00077714 	andeq	r7, r7, r4, lsl r7
    1e9c:	88450100 	stmdahi	r5, {r8}^
    1ea0:	1800008d 	stmdane	r0, {r0, r2, r3, r7}
    1ea4:	01000000 	mrseq	r0, (UNDEF: 0)
    1ea8:	07d2159c 	bfieq	r1, ip, #11, #8
    1eac:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    1eb0:	0000007d 	andeq	r0, r0, sp, ror r0
    1eb4:	00008da0 	andeq	r8, r0, r0, lsr #27
    1eb8:	00000010 	andeq	r0, r0, r0, lsl r0
    1ebc:	b20d9c01 	andlt	r9, sp, #256	; 0x100
    1ec0:	01000007 	tsteq	r0, r7
    1ec4:	00002508 	andeq	r2, r0, r8, lsl #10
    1ec8:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
    1ecc:	0d00009d 	stceq	0, cr0, [r0, #-628]	; 0xfffffd8c
    1ed0:	000007da 	ldrdeq	r0, [r0], -sl
    1ed4:	007f0b01 	rsbseq	r0, pc, r1, lsl #22
    1ed8:	03050000 	movweq	r0, #20480	; 0x5000
    1edc:	00009d20 	andeq	r9, r0, r0, lsr #26
    1ee0:	0007e316 	andeq	lr, r7, r6, lsl r3
    1ee4:	85050100 	strhi	r0, [r5, #-256]	; 0x100
    1ee8:	17000000 	strne	r0, [r0, -r0]
    1eec:	00000569 	andeq	r0, r0, r9, ror #10
    1ef0:	00252703 	eoreq	r2, r5, r3, lsl #14
    1ef4:	03290000 	teqeq	r9, #0
    1ef8:	8c180000 	ldchi	0, cr0, [r8], {-0}
    1efc:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    1f00:	017f1a00 	cmneq	pc, r0, lsl #20
    1f04:	63030000 	movwvs	r0, #12288	; 0x3000
    1f08:	00079a1b 	andeq	r9, r7, fp, lsl sl
    1f0c:	7d1b0400 	cfldrsvc	mvf0, [fp, #-0]
    1f10:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1f14:	0000007d 	andeq	r0, r0, sp, ror r0
    1f18:	00002518 	andeq	r2, r0, r8, lsl r5
    1f1c:	002c1800 	eoreq	r1, ip, r0, lsl #16
    1f20:	00000000 	andeq	r0, r0, r0
    1f24:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1f28:	0d1b0004 	ldceq	0, cr0, [fp, #-16]
    1f2c:	01040000 	mrseq	r0, (UNDEF: 4)
    1f30:	000001fb 	strdeq	r0, [r0], -fp
    1f34:	00087601 	andeq	r7, r8, r1, lsl #12
    1f38:	00057a00 	andeq	r7, r5, r0, lsl #20
    1f3c:	008e1400 	addeq	r1, lr, r0, lsl #8
    1f40:	00015400 	andeq	r5, r1, r0, lsl #8
    1f44:	000aa400 	andeq	sl, sl, r0, lsl #8
    1f48:	05040200 	streq	r0, [r4, #-512]	; 0x200
    1f4c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1f50:	34070403 	strcc	r0, [r7], #-1027	; 0x403
    1f54:	03000000 	movweq	r0, #0
    1f58:	01e50601 	mvneq	r0, r1, lsl #12
    1f5c:	02030000 	andeq	r0, r3, #0
    1f60:	0001f105 	andeq	pc, r1, r5, lsl #2
    1f64:	05040300 	streq	r0, [r4, #-768]	; 0x300
    1f68:	00000077 	andeq	r0, r0, r7, ror r0
    1f6c:	72050803 	andvc	r0, r5, #196608	; 0x30000
    1f70:	03000000 	movweq	r0, #0
    1f74:	01e30801 	mvneq	r0, r1, lsl #16
    1f78:	02030000 	andeq	r0, r3, #0
    1f7c:	00013707 	andeq	r3, r1, r7, lsl #14
    1f80:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1f84:	0000002f 	andeq	r0, r0, pc, lsr #32
    1f88:	2a070803 	bcs	1c3f9c <__bss_end__+0x1ba274>
    1f8c:	03000000 	movweq	r0, #0
    1f90:	018c0704 	orreq	r0, ip, r4, lsl #14
    1f94:	01030000 	mrseq	r0, (UNDEF: 3)
    1f98:	0001ec08 	andeq	lr, r1, r8, lsl #24
    1f9c:	02010400 	andeq	r0, r1, #0, 8
    1fa0:	0000b20c 	andeq	fp, r0, ip, lsl #4
    1fa4:	097e0500 	ldmdbeq	lr!, {r8, sl}^
    1fa8:	05000000 	streq	r0, [r0, #-0]
    1fac:	00000865 	andeq	r0, r0, r5, ror #16
    1fb0:	082a0501 	stmdaeq	sl!, {r0, r8, sl}
    1fb4:	05040000 	streq	r0, [r4, #-0]
    1fb8:	0000087d 	andeq	r0, r0, sp, ror r8
    1fbc:	088c0505 	stmeq	ip, {r0, r2, r8, sl}
    1fc0:	05060000 	streq	r0, [r6, #-0]
    1fc4:	0000089b 	muleq	r0, fp, r8
    1fc8:	09350507 	ldmdbeq	r5!, {r0, r1, r2, r8, sl}
    1fcc:	05030000 	streq	r0, [r3, #-0]
    1fd0:	000008aa 	andeq	r0, r0, sl, lsr #17
    1fd4:	e7060002 	str	r0, [r6, -r2]
    1fd8:	02000008 	andeq	r0, r0, #8
    1fdc:	00007915 	andeq	r7, r0, r5, lsl r9
    1fe0:	08390700 	ldmdaeq	r9!, {r8, r9, sl}
    1fe4:	57010000 	strpl	r0, [r1, -r0]
    1fe8:	00000025 	andeq	r0, r0, r5, lsr #32
    1fec:	00008e14 	andeq	r8, r0, r4, lsl lr
    1ff0:	0000001c 	andeq	r0, r0, ip, lsl r0
    1ff4:	00e09c01 	rsceq	r9, r0, r1, lsl #24
    1ff8:	24080000 	strcs	r0, [r8], #-0
    1ffc:	a800008e 	stmdage	r0, {r1, r2, r3, r7}
    2000:	00000003 	andeq	r0, r0, r3
    2004:	00001909 	andeq	r1, r0, r9, lsl #18
    2008:	30370100 	eorscc	r0, r7, r0, lsl #2
    200c:	9c00008e 	stcls	0, cr0, [r0], {142}	; 0x8e
    2010:	01000000 	mrseq	r0, (UNDEF: 0)
    2014:	0001e69c 	muleq	r1, ip, r6
    2018:	8e380800 	cdphi	8, 3, cr0, cr8, cr0, {0}
    201c:	03c90000 	biceq	r0, r9, #0
    2020:	440a0000 	strmi	r0, [sl], #-0
    2024:	d000008e 	andle	r0, r0, lr, lsl #1
    2028:	16000003 	strne	r0, [r0], -r3
    202c:	0b000001 	bleq	2038 <_start-0x5fc8>
    2030:	32015101 	andcc	r5, r1, #1073741824	; 0x40000000
    2034:	0150010b 	cmpeq	r0, fp, lsl #2
    2038:	500a003e 	andpl	r0, sl, lr, lsr r0
    203c:	d000008e 	andle	r0, r0, lr, lsl #1
    2040:	2e000003 	cdpcs	0, 0, cr0, cr0, cr3, {0}
    2044:	0b000001 	bleq	2050 <_start-0x5fb0>
    2048:	32015101 	andcc	r5, r1, #1073741824	; 0x40000000
    204c:	0150010b 	cmpeq	r0, fp, lsl #2
    2050:	5408003f 	strpl	r0, [r8], #-63	; 0x3f
    2054:	c900008e 	stmdbgt	r0, {r1, r2, r3, r7}
    2058:	0a000003 	beq	206c <_start-0x5f94>
    205c:	00008e64 	andeq	r8, r0, r4, ror #28
    2060:	000003a8 	andeq	r0, r0, r8, lsr #7
    2064:	0000014b 	andeq	r0, r0, fp, asr #2
    2068:	0250010b 	subseq	r0, r0, #-1073741822	; 0xc0000002
    206c:	0a000075 	beq	2248 <_start-0x5db8>
    2070:	00008e70 	andeq	r8, r0, r0, ror lr
    2074:	000003e6 	andeq	r0, r0, r6, ror #7
    2078:	0000015f 	andeq	r0, r0, pc, asr r1
    207c:	0250010b 	subseq	r0, r0, #-1073741822	; 0xc0000002
    2080:	08000075 	stmdaeq	r0, {r0, r2, r4, r5, r6}
    2084:	00008e74 	andeq	r8, r0, r4, ror lr
    2088:	000003c9 	andeq	r0, r0, r9, asr #7
    208c:	008e800a 	addeq	r8, lr, sl
    2090:	0003e600 	andeq	lr, r3, r0, lsl #12
    2094:	00017b00 	andeq	r7, r1, r0, lsl #22
    2098:	51010b00 	tstpl	r1, r0, lsl #22
    209c:	0a003001 	beq	e0a8 <__bss_end__+0x4380>
    20a0:	00008e8c 	andeq	r8, r0, ip, lsl #29
    20a4:	000003e6 	andeq	r0, r0, r6, ror #7
    20a8:	0000018e 	andeq	r0, r0, lr, lsl #3
    20ac:	0151010b 	cmpeq	r1, fp, lsl #2
    20b0:	980a0030 	stmdals	sl, {r4, r5}
    20b4:	e600008e 	str	r0, [r0], -lr, lsl #1
    20b8:	a1000003 	tstge	r0, r3
    20bc:	0b000001 	bleq	20c8 <_start-0x5f38>
    20c0:	36015101 	strcc	r5, [r1], -r1, lsl #2
    20c4:	8ea40a00 	vfmahi.f32	s0, s8, s0
    20c8:	03e60000 	mvneq	r0, #0
    20cc:	01b40000 			; <UNDEFINED> instruction: 0x01b40000
    20d0:	010b0000 	mrseq	r0, (UNDEF: 11)
    20d4:	00330151 	eorseq	r0, r3, r1, asr r1
    20d8:	008eb00a 	addeq	fp, lr, sl
    20dc:	0003e600 	andeq	lr, r3, r0, lsl #12
    20e0:	0001c900 	andeq	ip, r1, r0, lsl #18
    20e4:	51010b00 	tstpl	r1, r0, lsl #22
    20e8:	010e0a03 	tsteq	lr, r3, lsl #20
    20ec:	8ebc0a00 	vmovhi.f32	s0, #192	; 0xc0
    20f0:	03e60000 	mvneq	r0, #0
    20f4:	01dc0000 	bicseq	r0, ip, r0
    20f8:	010b0000 	mrseq	r0, (UNDEF: 11)
    20fc:	00330151 	eorseq	r0, r3, r1, asr r1
    2100:	008ec008 	addeq	ip, lr, r8
    2104:	0003c900 	andeq	ip, r3, r0, lsl #18
    2108:	ce0c0000 	cdpgt	0, 0, cr0, cr12, cr0, {0}
    210c:	01000008 	tsteq	r0, r8
    2110:	0000255d 	andeq	r2, r0, sp, asr r5
    2114:	008ecc00 	addeq	ip, lr, r0, lsl #24
    2118:	00002800 	andeq	r2, r0, r0, lsl #16
    211c:	129c0100 	addsne	r0, ip, #0, 2
    2120:	08000002 	stmdaeq	r0, {r1}
    2124:	00008ed4 	ldrdeq	r8, [r0], -r4
    2128:	000000bd 	strheq	r0, [r0], -sp
    212c:	008ee808 	addeq	lr, lr, r8, lsl #16
    2130:	0003a800 	andeq	sl, r3, r0, lsl #16
    2134:	f30c0000 	vhadd.u8	d0, d12, d0
    2138:	01000008 	tsteq	r0, r8
    213c:	00002564 	andeq	r2, r0, r4, ror #10
    2140:	008ef400 	addeq	pc, lr, r0, lsl #8
    2144:	00001c00 	andeq	r1, r0, r0, lsl #24
    2148:	359c0100 	ldrcc	r0, [ip, #256]	; 0x100
    214c:	08000002 	stmdaeq	r0, {r1}
    2150:	00008f04 	andeq	r8, r0, r4, lsl #30
    2154:	000003a8 	andeq	r0, r0, r8, lsr #7
    2158:	09650900 	stmdbeq	r5!, {r8, fp}^
    215c:	6a010000 	bvs	42164 <__bss_end__+0x3843c>
    2160:	00008f10 	andeq	r8, r0, r0, lsl pc
    2164:	0000002c 	andeq	r0, r0, ip, lsr #32
    2168:	02719c01 	rsbseq	r9, r1, #256	; 0x100
    216c:	630d0000 	movwvs	r0, #53248	; 0xd000
    2170:	2c6a0100 	stfcse	f0, [sl], #-0
    2174:	d1000000 	mrsle	r0, (UNDEF: 0)
    2178:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    217c:	00008f1c 	andeq	r8, r0, ip, lsl pc
    2180:	00000212 	andeq	r0, r0, r2, lsl r2
    2184:	008f340e 	addeq	r3, pc, lr, lsl #8
    2188:	0003e600 	andeq	lr, r3, r0, lsl #12
    218c:	51010b00 	tstpl	r1, r0, lsl #22
    2190:	00007402 	andeq	r7, r0, r2, lsl #8
    2194:	08570c00 	ldmdaeq	r7, {sl, fp}^
    2198:	74010000 	strvc	r0, [r1], #-0
    219c:	00000025 	andeq	r0, r0, r5, lsr #32
    21a0:	00008f3c 	andeq	r8, r0, ip, lsr pc
    21a4:	0000000c 	andeq	r0, r0, ip
    21a8:	02949c01 	addseq	r9, r4, #256	; 0x100
    21ac:	44080000 	strmi	r0, [r8], #-0
    21b0:	bd00008f 	stclt	0, cr0, [r0, #-572]	; 0xfffffdc4
    21b4:	00000000 	andeq	r0, r0, r0
    21b8:	00099d0c 	andeq	r9, r9, ip, lsl #26
    21bc:	25780100 	ldrbcs	r0, [r8, #-256]!	; 0x100
    21c0:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    21c4:	2000008f 	andcs	r0, r0, pc, lsl #1
    21c8:	01000000 	mrseq	r0, (UNDEF: 0)
    21cc:	0002c09c 	muleq	r2, ip, r0
    21d0:	8f500800 	svchi	0x00500800
    21d4:	02710000 	rsbseq	r0, r1, #0
    21d8:	5c080000 	stcpl	0, cr0, [r8], {-0}
    21dc:	e600008f 	str	r0, [r0], -pc, lsl #1
    21e0:	00000001 	andeq	r0, r0, r1
    21e4:	00090d0f 	andeq	r0, r9, pc, lsl #26
    21e8:	d1160100 	tstle	r6, r0, lsl #2
    21ec:	05000002 	streq	r0, [r0, #-2]
    21f0:	00938003 	addseq	r8, r3, r3
    21f4:	d7041000 	strle	r1, [r4, -r0]
    21f8:	11000002 	tstne	r0, r2
    21fc:	0000002c 	andeq	r0, r0, ip, lsr #32
    2200:	0009010f 	andeq	r0, r9, pc, lsl #2
    2204:	d1170100 	tstle	r7, r0, lsl #2
    2208:	05000002 	streq	r0, [r0, #-2]
    220c:	00935403 	addseq	r5, r3, r3, lsl #8
    2210:	080d0f00 	stmdaeq	sp, {r8, r9, sl, fp}
    2214:	1a010000 	bne	4221c <__bss_end__+0x384f4>
    2218:	000002d1 	ldrdeq	r0, [r0], -r1
    221c:	936c0305 	cmnls	ip, #335544320	; 0x14000000
    2220:	b90f0000 	stmdblt	pc, {}	; <UNPREDICTABLE>
    2224:	01000008 	tsteq	r0, r8
    2228:	0002d11b 	andeq	sp, r2, fp, lsl r1
    222c:	5c030500 	cfstr32pl	mvfx0, [r3], {-0}
    2230:	0f000093 	svceq	0x00000093
    2234:	000008d8 	ldrdeq	r0, [r0], -r8
    2238:	02d11c01 	sbcseq	r1, r1, #256	; 0x100
    223c:	03050000 	movweq	r0, #20480	; 0x5000
    2240:	00009360 	andeq	r9, r0, r0, ror #6
    2244:	00096f0f 	andeq	r6, r9, pc, lsl #30
    2248:	d11d0100 	tstle	sp, r0, lsl #2
    224c:	05000002 	streq	r0, [r0, #-2]
    2250:	00936403 	addseq	r6, r3, r3, lsl #8
    2254:	07fe0f00 	ldrbeq	r0, [lr, r0, lsl #30]!
    2258:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    225c:	000002d1 	ldrdeq	r0, [r0], -r1
    2260:	937c0305 	cmnls	ip, #335544320	; 0x14000000
    2264:	8e0f0000 	cdphi	0, 0, cr0, cr15, cr0, {0}
    2268:	01000009 	tsteq	r0, r9
    226c:	0002d11f 	andeq	sp, r2, pc, lsl r1
    2270:	50030500 	andpl	r0, r3, r0, lsl #10
    2274:	0f000093 	svceq	0x00000093
    2278:	0000081b 	andeq	r0, r0, fp, lsl r8
    227c:	02d12001 	sbcseq	r2, r1, #1
    2280:	03050000 	movweq	r0, #20480	; 0x5000
    2284:	00009378 	andeq	r9, r0, r8, ror r3
    2288:	0009560f 	andeq	r5, r9, pc, lsl #12
    228c:	d1210100 	teqle	r1, r0, lsl #2
    2290:	05000002 	streq	r0, [r0, #-2]
    2294:	00937403 	addseq	r7, r3, r3, lsl #8
    2298:	08470f00 	stmdaeq	r7, {r8, r9, sl, fp}^
    229c:	22010000 	andcs	r0, r1, #0
    22a0:	000002d1 	ldrdeq	r0, [r0], -r1
    22a4:	93580305 	cmpls	r8, #335544320	; 0x14000000
    22a8:	250f0000 	strcs	r0, [pc, #-0]	; 22b0 <_start-0x5d50>
    22ac:	01000009 	tsteq	r0, r9
    22b0:	0002d123 	andeq	sp, r2, r3, lsr #2
    22b4:	70030500 	andvc	r0, r3, r0, lsl #10
    22b8:	0f000093 	svceq	0x00000093
    22bc:	00000915 	andeq	r0, r0, r5, lsl r9
    22c0:	02d12401 	sbcseq	r2, r1, #16777216	; 0x1000000
    22c4:	03050000 	movweq	r0, #20480	; 0x5000
    22c8:	00009368 	andeq	r9, r0, r8, ror #6
    22cc:	0009ad12 	andeq	sl, r9, r2, lsl sp
    22d0:	2ca10300 	stccs	3, cr0, [r1]
    22d4:	bd000000 	stclt	0, cr0, [r0, #-0]
    22d8:	13000003 	movwne	r0, #3
    22dc:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    22e0:	c3041000 	movwgt	r1, #16384	; 0x4000
    22e4:	14000003 	strne	r0, [r0], #-3
    22e8:	000003c8 	andeq	r0, r0, r8, asr #7
    22ec:	014a1615 	cmpeq	sl, r5, lsl r6
    22f0:	84030000 	strhi	r0, [r3], #-0
    22f4:	00094417 	andeq	r4, r9, r7, lsl r4
    22f8:	e6190200 	ldr	r0, [r9], -r0, lsl #4
    22fc:	13000003 	movwne	r0, #3
    2300:	0000002c 	andeq	r0, r0, ip, lsr #32
    2304:	0000b213 	andeq	fp, r0, r3, lsl r2
    2308:	c8170000 	ldmdagt	r7, {}	; <UNPREDICTABLE>
    230c:	03000008 	movweq	r0, #8
    2310:	0003fc95 	muleq	r3, r5, ip
    2314:	03fc1300 	mvnseq	r1, #0, 6
    2318:	2c130000 	ldccs	0, cr0, [r3], {-0}
    231c:	00000000 	andeq	r0, r0, r0
    2320:	03c80410 	biceq	r0, r8, #16, 8	; 0x10000000
    2324:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    2328:	04000005 	streq	r0, [r0], #-5
    232c:	000e6300 	andeq	r6, lr, r0, lsl #6
    2330:	fb010400 	blx	4333a <__bss_end__+0x39612>
    2334:	01000001 	tsteq	r0, r1
    2338:	00000a62 	andeq	r0, r0, r2, ror #20
    233c:	0000057a 	andeq	r0, r0, sl, ror r5
    2340:	00008f68 	andeq	r8, r0, r8, ror #30
    2344:	000003ac 	andeq	r0, r0, ip, lsr #7
    2348:	00000b1f 	andeq	r0, r0, pc, lsl fp
    234c:	2a070802 	bcs	1c435c <__bss_end__+0x1ba634>
    2350:	02000000 	andeq	r0, r0, #0
    2354:	00340704 	eorseq	r0, r4, r4, lsl #14
    2358:	01020000 	mrseq	r0, (UNDEF: 2)
    235c:	0001e506 	andeq	lr, r1, r6, lsl #10
    2360:	05020200 	streq	r0, [r2, #-512]	; 0x200
    2364:	000001f1 	strdeq	r0, [r0], -r1
    2368:	77050402 	strvc	r0, [r5, -r2, lsl #8]
    236c:	02000000 	andeq	r0, r0, #0
    2370:	00720508 	rsbseq	r0, r2, r8, lsl #10
    2374:	01020000 	mrseq	r0, (UNDEF: 2)
    2378:	0001e308 	andeq	lr, r1, r8, lsl #6
    237c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    2380:	00000137 	andeq	r0, r0, r7, lsr r1
    2384:	2f070402 	svccs	0x00070402
    2388:	03000000 	movweq	r0, #0
    238c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2390:	04020074 	streq	r0, [r2], #-116	; 0x74
    2394:	00018c07 	andeq	r8, r1, r7, lsl #24
    2398:	08010200 	stmdaeq	r1, {r9}
    239c:	000001ec 	andeq	r0, r0, ip, ror #3
    23a0:	0c020104 	stfeqs	f0, [r2], {4}
    23a4:	000000b2 	strheq	r0, [r0], -r2
    23a8:	00097e05 	andeq	r7, r9, r5, lsl #28
    23ac:	65050000 	strvs	r0, [r5, #-0]
    23b0:	01000008 	tsteq	r0, r8
    23b4:	00082a05 	andeq	r2, r8, r5, lsl #20
    23b8:	7d050400 	cfstrsvc	mvf0, [r5, #-0]
    23bc:	05000008 	streq	r0, [r0, #-8]
    23c0:	00088c05 	andeq	r8, r8, r5, lsl #24
    23c4:	9b050600 	blls	143bcc <__bss_end__+0x139ea4>
    23c8:	07000008 	streq	r0, [r0, -r8]
    23cc:	00093505 	andeq	r3, r9, r5, lsl #10
    23d0:	aa050300 	bge	142fd8 <__bss_end__+0x1392b0>
    23d4:	02000008 	andeq	r0, r0, #8
    23d8:	08e70600 	stmiaeq	r7!, {r9, sl}^
    23dc:	15020000 	strne	r0, [r2, #-0]
    23e0:	00000079 	andeq	r0, r0, r9, ror r0
    23e4:	000a3207 	andeq	r3, sl, r7, lsl #4
    23e8:	683f0100 	ldmdavs	pc!, {r8}	; <UNPREDICTABLE>
    23ec:	d400008f 	strle	r0, [r0], #-143	; 0x8f
    23f0:	01000000 	mrseq	r0, (UNDEF: 0)
    23f4:	0001339c 	muleq	r1, ip, r3
    23f8:	69700800 	ldmdbvs	r0!, {fp}^
    23fc:	3f01006e 	svccc	0x0001006e
    2400:	0000002c 	andeq	r0, r0, ip, lsr #32
    2404:	00000bef 	andeq	r0, r0, pc, ror #23
    2408:	000a6909 	andeq	r6, sl, r9, lsl #18
    240c:	33470100 	movtcc	r0, #28928	; 0x7100
    2410:	0d000001 	stceq	0, cr0, [r0, #-4]
    2414:	0900000c 	stmdbeq	r0, {r2, r3}
    2418:	00000a4f 	andeq	r0, r0, pc, asr #20
    241c:	002c4901 	eoreq	r4, ip, r1, lsl #18
    2420:	0c620000 	stcleq	0, cr0, [r2], #-0
    2424:	5a090000 	bpl	24242c <__bss_end__+0x238704>
    2428:	0100000a 	tsteq	r0, sl
    242c:	00002c57 	andeq	r2, r0, r7, asr ip
    2430:	000e2e00 	andeq	r2, lr, r0, lsl #28
    2434:	8ffc0a00 	svchi	0x00fc0a00
    2438:	052e0000 	streq	r0, [lr, #-0]!
    243c:	01220000 	teqeq	r2, r0
    2440:	010b0000 	mrseq	r0, (UNDEF: 11)
    2444:	00750250 	rsbseq	r0, r5, r0, asr r2
    2448:	90300c00 	eorsls	r0, r0, r0, lsl #24
    244c:	054f0000 	strbeq	r0, [pc, #-0]	; 2454 <_start-0x5bac>
    2450:	010b0000 	mrseq	r0, (UNDEF: 11)
    2454:	00750250 	rsbseq	r0, r5, r0, asr r2
    2458:	040d0000 	streq	r0, [sp], #-0
    245c:	00000139 	andeq	r0, r0, r9, lsr r1
    2460:	00002c0e 	andeq	r2, r0, lr, lsl #24
    2464:	09ee0f00 	stmibeq	lr!, {r8, r9, sl, fp}^
    2468:	60010000 	andvs	r0, r1, r0
    246c:	00016c03 	andeq	r6, r1, r3, lsl #24
    2470:	69701000 	ldmdbvs	r0!, {ip}^
    2474:	6001006e 	andvs	r0, r1, lr, rrx
    2478:	0000002c 	andeq	r0, r0, ip, lsr #32
    247c:	000a6911 	andeq	r6, sl, r1, lsl r9
    2480:	33670100 	cmncc	r7, #0, 2
    2484:	11000001 	tstne	r0, r1
    2488:	00000a5a 	andeq	r0, r0, sl, asr sl
    248c:	002c6801 	eoreq	r6, ip, r1, lsl #16
    2490:	12000000 	andne	r0, r0, #0
    2494:	0000013e 	andeq	r0, r0, lr, lsr r1
    2498:	0000903c 	andeq	r9, r0, ip, lsr r0
    249c:	00000038 	andeq	r0, r0, r8, lsr r0
    24a0:	01b09c01 	lslseq	r9, r1, #24
    24a4:	4a130000 	bmi	4c24ac <__bss_end__+0x4b8784>
    24a8:	5e000001 	cdppl	0, 0, cr0, cr0, cr1, {0}
    24ac:	1400000e 	strne	r0, [r0], #-14
    24b0:	00000155 	andeq	r0, r0, r5, asr r1
    24b4:	00000e7f 	andeq	r0, r0, pc, ror lr
    24b8:	00016014 	andeq	r6, r1, r4, lsl r0
    24bc:	000eb500 	andeq	fp, lr, r0, lsl #10
    24c0:	906c0c00 	rsbls	r0, ip, r0, lsl #24
    24c4:	054f0000 	strbeq	r0, [pc, #-0]	; 24cc <_start-0x5b34>
    24c8:	010b0000 	mrseq	r0, (UNDEF: 11)
    24cc:	f3310751 	vaba.u<illegal width 64>	q0, <illegal reg q0.5>, <illegal reg q0.5>
    24d0:	1a4f5001 	bne	13d64dc <__bss_end__+0x13cc7b4>
    24d4:	0f000024 	svceq	0x00000024
    24d8:	00000a25 	andeq	r0, r0, r5, lsr #20
    24dc:	de037b01 	vmlale.f64	d7, d3, d1
    24e0:	10000001 	andne	r0, r0, r1
    24e4:	006e6970 	rsbeq	r6, lr, r0, ror r9
    24e8:	002c7b01 	eoreq	r7, ip, r1, lsl #22
    24ec:	69110000 	ldmdbvs	r1, {}	; <UNPREDICTABLE>
    24f0:	0100000a 	tsteq	r0, sl
    24f4:	00013381 	andeq	r3, r1, r1, lsl #7
    24f8:	0a5a1100 	beq	1686900 <__bss_end__+0x167cbd8>
    24fc:	82010000 	andhi	r0, r1, #0
    2500:	0000002c 	andeq	r0, r0, ip, lsr #32
    2504:	01b01200 	lslseq	r1, r0, #4
    2508:	90740000 	rsbsls	r0, r4, r0
    250c:	00380000 	eorseq	r0, r8, r0
    2510:	9c010000 	stcls	0, cr0, [r1], {-0}
    2514:	00000222 	andeq	r0, r0, r2, lsr #4
    2518:	0001bc13 	andeq	fp, r1, r3, lsl ip
    251c:	000ef500 	andeq	pc, lr, r0, lsl #10
    2520:	01c71400 	biceq	r1, r7, r0, lsl #8
    2524:	0f160000 	svceq	0x00160000
    2528:	d2140000 	andsle	r0, r4, #0
    252c:	4c000001 	stcmi	0, cr0, [r0], {1}
    2530:	0c00000f 	stceq	0, cr0, [r0], {15}
    2534:	000090a4 	andeq	r9, r0, r4, lsr #1
    2538:	0000054f 	andeq	r0, r0, pc, asr #10
    253c:	0751010b 	ldrbeq	r0, [r1, -fp, lsl #2]
    2540:	5001f331 	andpl	pc, r1, r1, lsr r3	; <UNPREDICTABLE>
    2544:	00241a4f 	eoreq	r1, r4, pc, asr #20
    2548:	0a0f0700 	beq	3c4150 <__bss_end__+0x3ba428>
    254c:	95010000 	strls	r0, [r1, #-0]
    2550:	000090ac 	andeq	r9, r0, ip, lsr #1
    2554:	000000cc 	andeq	r0, r0, ip, asr #1
    2558:	02989c01 	addseq	r9, r8, #256	; 0x100
    255c:	70080000 	andvc	r0, r8, r0
    2560:	01006e69 	tsteq	r0, r9, ror #28
    2564:	00002c95 	muleq	r0, r5, ip
    2568:	000f8c00 	andeq	r8, pc, r0, lsl #24
    256c:	0a690900 	beq	1a44974 <__bss_end__+0x1a3ac4c>
    2570:	9b010000 	blls	42578 <__bss_end__+0x38850>
    2574:	00000133 	andeq	r0, r0, r3, lsr r1
    2578:	00000faa 	andeq	r0, r0, sl, lsr #31
    257c:	000a4f09 	andeq	r4, sl, r9, lsl #30
    2580:	2c9d0100 	ldfcss	f0, [sp], {0}
    2584:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    2588:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
    258c:	00000a5a 	andeq	r0, r0, sl, asr sl
    2590:	002cab01 	eoreq	sl, ip, r1, lsl #22
    2594:	11cb0000 	bicne	r0, fp, r0
    2598:	400a0000 	andmi	r0, sl, r0
    259c:	2e000091 	mcrcs	0, 0, r0, cr0, cr1, {4}
    25a0:	87000005 	strhi	r0, [r0, -r5]
    25a4:	0b000002 	bleq	25b4 <_start-0x5a4c>
    25a8:	75025001 	strvc	r5, [r2, #-1]
    25ac:	6c0c0000 	stcvs	0, cr0, [ip], {-0}
    25b0:	4f000091 	svcmi	0x00000091
    25b4:	0b000005 	bleq	25d0 <_start-0x5a30>
    25b8:	75025001 	strvc	r5, [r2, #-1]
    25bc:	15000000 	strne	r0, [r0, #-0]
    25c0:	000009e4 	andeq	r0, r0, r4, ror #19
    25c4:	0064b301 	rsbeq	fp, r4, r1, lsl #6
    25c8:	91780000 	cmnls	r8, r0
    25cc:	004c0000 	subeq	r0, ip, r0
    25d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    25d4:	000002e0 	andeq	r0, r0, r0, ror #5
    25d8:	6e697008 	cdpvs	0, 6, cr7, cr9, cr8, {0}
    25dc:	2cb30100 	ldfcss	f0, [r3]
    25e0:	e9000000 	stmdb	r0, {}	; <UNPREDICTABLE>
    25e4:	16000011 			; <UNDEFINED> instruction: 0x16000011
    25e8:	b9010076 	stmdblt	r1, {r1, r2, r4, r5, r6}
    25ec:	0000002c 	andeq	r0, r0, ip, lsr #32
    25f0:	00001241 	andeq	r1, r0, r1, asr #4
    25f4:	00919817 	addseq	r9, r1, r7, lsl r8
    25f8:	00052e00 	andeq	r2, r5, r0, lsl #28
    25fc:	91a81700 			; <UNDEFINED> instruction: 0x91a81700
    2600:	052e0000 	streq	r0, [lr, #-0]!
    2604:	07000000 	streq	r0, [r0, -r0]
    2608:	000009c7 	andeq	r0, r0, r7, asr #19
    260c:	91c4c501 	bicls	ip, r4, r1, lsl #10
    2610:	00780000 	rsbseq	r0, r8, r0
    2614:	9c010000 	stcls	0, cr0, [r1], {-0}
    2618:	000003aa 	andeq	r0, r0, sl, lsr #7
    261c:	6e697008 	cdpvs	0, 6, cr7, cr9, cr8, {0}
    2620:	2cc50100 	stfcse	f0, [r5], {0}
    2624:	77000000 	strvc	r0, [r0, -r0]
    2628:	08000012 	stmdaeq	r0, {r1, r4}
    262c:	c5010076 	strgt	r0, [r1, #-118]	; 0x76
    2630:	0000002c 	andeq	r0, r0, ip, lsr #32
    2634:	000012b1 			; <UNDEFINED> instruction: 0x000012b1
    2638:	00013e18 	andeq	r3, r1, r8, lsl lr
    263c:	0091d800 	addseq	sp, r1, r0, lsl #16
    2640:	00003000 	andeq	r3, r0, r0
    2644:	5fcc0100 	svcpl	0x00cc0100
    2648:	13000003 	movwne	r0, #3
    264c:	0000014a 	andeq	r0, r0, sl, asr #2
    2650:	000012eb 	andeq	r1, r0, fp, ror #5
    2654:	0091d819 	addseq	sp, r1, r9, lsl r8
    2658:	00003000 	andeq	r3, r0, r0
    265c:	01551400 	cmpeq	r5, r0, lsl #8
    2660:	130c0000 	movwne	r0, #49152	; 0xc000
    2664:	60140000 	andsvs	r0, r4, r0
    2668:	42000001 	andmi	r0, r0, #1
    266c:	0c000013 	stceq	0, cr0, [r0], {19}
    2670:	00009204 	andeq	r9, r0, r4, lsl #4
    2674:	0000054f 	andeq	r0, r0, pc, asr #10
    2678:	0751010b 	ldrbeq	r0, [r1, -fp, lsl #2]
    267c:	5001f331 	andpl	pc, r1, r1, lsr r3	; <UNPREDICTABLE>
    2680:	00241a4f 	eoreq	r1, r4, pc, asr #20
    2684:	b01a0000 	andslt	r0, sl, r0
    2688:	08000001 	stmdaeq	r0, {r0}
    268c:	34000092 	strcc	r0, [r0], #-146	; 0x92
    2690:	01000000 	mrseq	r0, (UNDEF: 0)
    2694:	01bc13ce 			; <UNDEFINED> instruction: 0x01bc13ce
    2698:	13820000 	orrne	r0, r2, #0
    269c:	08190000 	ldmdaeq	r9, {}	; <UNPREDICTABLE>
    26a0:	34000092 	strcc	r0, [r0], #-146	; 0x92
    26a4:	14000000 	strne	r0, [r0], #-0
    26a8:	000001c7 	andeq	r0, r0, r7, asr #3
    26ac:	000013a3 	andeq	r1, r0, r3, lsr #7
    26b0:	0001d214 	andeq	sp, r1, r4, lsl r2
    26b4:	0013d900 	andseq	sp, r3, r0, lsl #18
    26b8:	92340c00 	eorsls	r0, r4, #0, 24
    26bc:	054f0000 	strbeq	r0, [pc, #-0]	; 26c4 <_start-0x593c>
    26c0:	010b0000 	mrseq	r0, (UNDEF: 11)
    26c4:	f3310751 	vaba.u<illegal width 64>	q0, <illegal reg q0.5>, <illegal reg q0.5>
    26c8:	1a4f5001 	bne	13d66d4 <__bss_end__+0x13cc9ac>
    26cc:	00000024 	andeq	r0, r0, r4, lsr #32
    26d0:	09440700 	stmdbeq	r4, {r8, r9, sl}^
    26d4:	d1010000 	mrsle	r0, (UNDEF: 1)
    26d8:	0000923c 	andeq	r9, r0, ip, lsr r2
    26dc:	000000d8 	ldrdeq	r0, [r0], -r8
    26e0:	042f9c01 	strteq	r9, [pc], #-3073	; 26e8 <_start-0x5918>
    26e4:	70080000 	andvc	r0, r8, r0
    26e8:	01006e69 	tsteq	r0, r9, ror #28
    26ec:	00002cd1 	ldrdeq	r2, [r0], -r1
    26f0:	00141900 	andseq	r1, r4, r0, lsl #18
    26f4:	0a4a1b00 	beq	12892fc <__bss_end__+0x127f5d4>
    26f8:	d1010000 	mrsle	r0, (UNDEF: 1)
    26fc:	000000b2 	strheq	r0, [r0], -r2
    2700:	00001437 	andeq	r1, r0, r7, lsr r4
    2704:	000a6909 	andeq	r6, sl, r9, lsl #18
    2708:	33d90100 	bicscc	r0, r9, #0, 2
    270c:	58000001 	stmdapl	r0, {r0}
    2710:	09000014 	stmdbeq	r0, {r2, r4}
    2714:	00000a4f 	andeq	r0, r0, pc, asr #20
    2718:	002cda01 	eoreq	sp, ip, r1, lsl #20
    271c:	14ad0000 	strtne	r0, [sp], #0
    2720:	5a090000 	bpl	242728 <__bss_end__+0x238a00>
    2724:	0100000a 	tsteq	r0, sl
    2728:	00002ce8 	andeq	r2, r0, r8, ror #25
    272c:	00167900 	andseq	r7, r6, r0, lsl #18
    2730:	92d80a00 	sbcsls	r0, r8, #0, 20
    2734:	052e0000 	streq	r0, [lr, #-0]!
    2738:	041e0000 	ldreq	r0, [lr], #-0
    273c:	010b0000 	mrseq	r0, (UNDEF: 11)
    2740:	00760250 	rsbseq	r0, r6, r0, asr r2
    2744:	93080c00 	movwls	r0, #35840	; 0x8c00
    2748:	054f0000 	strbeq	r0, [pc, #-0]	; 2750 <_start-0x58b0>
    274c:	010b0000 	mrseq	r0, (UNDEF: 11)
    2750:	00760250 	rsbseq	r0, r6, r0, asr r2
    2754:	d21c0000 	andsle	r0, ip, #0
    2758:	01000009 	tsteq	r0, r9
    275c:	00013328 	andeq	r3, r1, r8, lsr #6
    2760:	bc030500 	cfstr32lt	mvfx0, [r3], {-0}
    2764:	1c000093 	stcne	0, cr0, [r0], {147}	; 0x93
    2768:	000009bd 			; <UNDEFINED> instruction: 0x000009bd
    276c:	01332901 	teqeq	r3, r1, lsl #18
    2770:	03050000 	movweq	r0, #20480	; 0x5000
    2774:	000093b8 			; <UNDEFINED> instruction: 0x000093b8
    2778:	0009b31c 	andeq	fp, r9, ip, lsl r3
    277c:	332a0100 	teqcc	sl, #0, 2
    2780:	05000001 	streq	r0, [r0, #-1]
    2784:	0093b403 	addseq	fp, r3, r3, lsl #8
    2788:	0a721c00 	beq	1c89790 <__bss_end__+0x1c7fa68>
    278c:	2c010000 	stccs	0, cr0, [r1], {-0}
    2790:	00000133 	andeq	r0, r0, r3, lsr r1
    2794:	93840305 	orrls	r0, r4, #335544320	; 0x14000000
    2798:	421c0000 	andsmi	r0, ip, #0
    279c:	0100000a 	tsteq	r0, sl
    27a0:	0001332d 	andeq	r3, r1, sp, lsr #6
    27a4:	88030500 	stmdahi	r3, {r8, sl}
    27a8:	1c000093 	stcne	0, cr0, [r0], {147}	; 0x93
    27ac:	00000a81 	andeq	r0, r0, r1, lsl #21
    27b0:	01332e01 	teqeq	r3, r1, lsl #28
    27b4:	03050000 	movweq	r0, #20480	; 0x5000
    27b8:	0000938c 	andeq	r9, r0, ip, lsl #7
    27bc:	000a891c 	andeq	r8, sl, ip, lsl r9
    27c0:	332f0100 	teqcc	pc, #0, 2
    27c4:	05000001 	streq	r0, [r0, #-1]
    27c8:	00939003 	addseq	r9, r3, r3
    27cc:	0a911c00 	beq	fe4497d4 <__bss_end__+0xfe43faac>
    27d0:	30010000 	andcc	r0, r1, r0
    27d4:	00000133 	andeq	r0, r0, r3, lsr r1
    27d8:	93940305 	orrsls	r0, r4, #335544320	; 0x14000000
    27dc:	991c0000 	ldmdbls	ip, {}	; <UNPREDICTABLE>
    27e0:	0100000a 	tsteq	r0, sl
    27e4:	00013331 	andeq	r3, r1, r1, lsr r3
    27e8:	98030500 	stmdals	r3, {r8, sl}
    27ec:	1c000093 	stcne	0, cr0, [r0], {147}	; 0x93
    27f0:	00000a1e 	andeq	r0, r0, lr, lsl sl
    27f4:	01333301 	teqeq	r3, r1, lsl #6
    27f8:	03050000 	movweq	r0, #20480	; 0x5000
    27fc:	0000939c 	muleq	r0, ip, r3
    2800:	000a011c 	andeq	r0, sl, ip, lsl r1
    2804:	33340100 	teqcc	r4, #0, 2
    2808:	05000001 	streq	r0, [r0, #-1]
    280c:	0093a003 	addseq	sl, r3, r3
    2810:	0a081c00 	beq	209818 <__bss_end__+0x1ffaf0>
    2814:	36010000 	strcc	r0, [r1], -r0
    2818:	00000133 	andeq	r0, r0, r3, lsr r1
    281c:	93a40305 			; <UNDEFINED> instruction: 0x93a40305
    2820:	dd1c0000 	ldcle	0, cr0, [ip, #-0]
    2824:	01000009 	tsteq	r0, r9
    2828:	00013337 	andeq	r3, r1, r7, lsr r3
    282c:	a8030500 	stmdage	r3, {r8, sl}
    2830:	1c000093 	stcne	0, cr0, [r0], {147}	; 0x93
    2834:	00000a7a 	andeq	r0, r0, sl, ror sl
    2838:	01333901 	teqeq	r3, r1, lsl #18
    283c:	03050000 	movweq	r0, #20480	; 0x5000
    2840:	000093ac 	andeq	r9, r0, ip, lsr #7
    2844:	0009fa1c 	andeq	pc, r9, ip, lsl sl	; <UNPREDICTABLE>
    2848:	333a0100 	teqcc	sl, #0, 2
    284c:	05000001 	streq	r0, [r0, #-1]
    2850:	0093b003 	addseq	fp, r3, r3
    2854:	09ad1d00 	stmibeq	sp!, {r8, sl, fp, ip}
    2858:	20010000 	andcs	r0, r1, r0
    285c:	0000002c 	andeq	r0, r0, ip, lsr #32
    2860:	00000543 	andeq	r0, r0, r3, asr #10
    2864:	0005431e 	andeq	r4, r5, lr, lsl r3
    2868:	040d0000 	streq	r0, [sp], #-0
    286c:	00000549 	andeq	r0, r0, r9, asr #10
    2870:	00054e1f 	andeq	r4, r5, pc, lsl lr
    2874:	c8212000 	stmdagt	r1!, {sp}
    2878:	01000008 	tsteq	r0, r8
    287c:	0005651e 	andeq	r6, r5, lr, lsl r5
    2880:	05651e00 	strbeq	r1, [r5, #-3584]!	; 0xe00
    2884:	2c1e0000 	ldccs	0, cr0, [lr], {-0}
    2888:	00000000 	andeq	r0, r0, r0
    288c:	054e040d 	strbeq	r0, [lr, #-1037]	; 0x40d
    2890:	db000000 	blle	2898 <_start-0x5768>
    2894:	04000000 	streq	r0, [r0], #-0
    2898:	00102700 	andseq	r2, r0, r0, lsl #14
    289c:	fb010400 	blx	438a6 <__bss_end__+0x39b7e>
    28a0:	01000001 	tsteq	r0, r1
    28a4:	00000aa1 	andeq	r0, r0, r1, lsr #21
    28a8:	0000057a 	andeq	r0, r0, sl, ror r5
    28ac:	00009314 	andeq	r9, r0, r4, lsl r3
    28b0:	00000020 	andeq	r0, r0, r0, lsr #32
    28b4:	00000bc8 	andeq	r0, r0, r8, asr #23
    28b8:	e5060102 	str	r0, [r6, #-258]	; 0x102
    28bc:	02000001 	andeq	r0, r0, #1
    28c0:	01e30801 	mvneq	r0, r1, lsl #16
    28c4:	02020000 	andeq	r0, r2, #0
    28c8:	0001f105 	andeq	pc, r1, r5, lsl #2
    28cc:	07020200 	streq	r0, [r2, -r0, lsl #4]
    28d0:	00000137 	andeq	r0, r0, r7, lsr r1
    28d4:	69050403 	stmdbvs	r5, {r0, r1, sl}
    28d8:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    28dc:	00340704 	eorseq	r0, r4, r4, lsl #14
    28e0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    28e4:	00007205 	andeq	r7, r0, r5, lsl #4
    28e8:	07080200 	streq	r0, [r8, -r0, lsl #4]
    28ec:	0000002a 	andeq	r0, r0, sl, lsr #32
    28f0:	77050402 	strvc	r0, [r5, -r2, lsl #8]
    28f4:	02000000 	andeq	r0, r0, #0
    28f8:	018c0704 	orreq	r0, ip, r4, lsl #14
    28fc:	04040000 	streq	r0, [r4], #-0
    2900:	2f070402 	svccs	0x00070402
    2904:	05000000 	streq	r0, [r0, #-0]
    2908:	00007a04 	andeq	r7, r0, r4, lsl #20
    290c:	08010200 	stmdaeq	r1, {r9}
    2910:	000001ec 	andeq	r0, r0, ip, ror #3
    2914:	00077006 	andeq	r7, r7, r6
    2918:	48d40200 	ldmmi	r4, {r9}^
    291c:	07000000 	streq	r0, [r0, -r0]
    2920:	0000079a 	muleq	r0, sl, r7
    2924:	006b1b03 	rsbeq	r1, fp, r3, lsl #22
    2928:	93140000 	tstls	r4, #0
    292c:	00200000 	eoreq	r0, r0, r0
    2930:	9c010000 	stcls	0, cr0, [r1], {-0}
    2934:	00705f08 	rsbseq	r5, r0, r8, lsl #30
    2938:	006b0301 	rsbeq	r0, fp, r1, lsl #6
    293c:	50010000 	andpl	r0, r1, r0
    2940:	01006308 	tsteq	r0, r8, lsl #6
    2944:	00004103 	andeq	r4, r0, r3, lsl #2
    2948:	09510100 	ldmdbeq	r1, {r8}^
    294c:	0301006e 	movweq	r0, #4206	; 0x106e
    2950:	00000081 	andeq	r0, r0, r1, lsl #1
    2954:	000016aa 	andeq	r1, r0, sl, lsr #13
    2958:	0100700a 	tsteq	r0, sl
    295c:	00007404 	andeq	r7, r0, r4, lsl #8
    2960:	0016cb00 	andseq	ip, r6, r0, lsl #22
    2964:	00650b00 	rsbeq	r0, r5, r0, lsl #22
    2968:	00740401 	rsbseq	r0, r4, r1, lsl #8
    296c:	52010000 	andpl	r0, r1, #0
    2970:	00e00000 	rsceq	r0, r0, r0
    2974:	00040000 	andeq	r0, r4, r0
    2978:	000010c4 	andeq	r1, r0, r4, asr #1
    297c:	01fb0104 	mvnseq	r0, r4, lsl #2
    2980:	c0010000 	andgt	r0, r1, r0
    2984:	7a00000a 	bvc	29b4 <_start-0x564c>
    2988:	34000005 	strcc	r0, [r0], #-5
    298c:	14000093 	strne	r0, [r0], #-147	; 0x93
    2990:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    2994:	0200000c 	andeq	r0, r0, #12
    2998:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    299c:	04030074 	streq	r0, [r3], #-116	; 0x74
    29a0:	00003407 	andeq	r3, r0, r7, lsl #8
    29a4:	06010300 	streq	r0, [r1], -r0, lsl #6
    29a8:	000001e5 	andeq	r0, r0, r5, ror #3
    29ac:	f1050203 			; <UNDEFINED> instruction: 0xf1050203
    29b0:	03000001 	movweq	r0, #1
    29b4:	00770504 	rsbseq	r0, r7, r4, lsl #10
    29b8:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    29bc:	00007205 	andeq	r7, r0, r5, lsl #4
    29c0:	08010300 	stmdaeq	r1, {r8, r9}
    29c4:	000001e3 	andeq	r0, r0, r3, ror #3
    29c8:	37070203 	strcc	r0, [r7, -r3, lsl #4]
    29cc:	03000001 	movweq	r0, #1
    29d0:	002f0704 	eoreq	r0, pc, r4, lsl #14
    29d4:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    29d8:	00002a07 	andeq	r2, r0, r7, lsl #20
    29dc:	07040300 	streq	r0, [r4, -r0, lsl #6]
    29e0:	0000018c 	andeq	r0, r0, ip, lsl #3
    29e4:	ec080103 	stfs	f0, [r8], {3}
    29e8:	04000001 	streq	r0, [r0], #-1
    29ec:	00000aaf 	andeq	r0, r0, pc, lsr #21
    29f0:	00250301 	eoreq	r0, r5, r1, lsl #6
    29f4:	93340000 	teqls	r4, #0
    29f8:	00140000 	andseq	r0, r4, r0
    29fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a00:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    2a04:	01006305 	tsteq	r0, r5, lsl #6
    2a08:	00002503 	andeq	r2, r0, r3, lsl #10
    2a0c:	0016f600 	andseq	pc, r6, r0, lsl #12
    2a10:	93400600 	movtls	r0, #1536	; 0x600
    2a14:	00d60000 	sbcseq	r0, r6, r0
    2a18:	01070000 	mrseq	r0, (UNDEF: 7)
    2a1c:	00740250 	rsbseq	r0, r4, r0, asr r2
    2a20:	25080000 	strcs	r0, [r8, #-0]
    2a24:	bf000000 	svclt	0x00000000
    2a28:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2a2c:	00000025 	andeq	r0, r0, r5, lsr #32
    2a30:	05e20a00 	strbeq	r0, [r2, #2560]!	; 0xa00
    2a34:	06010000 	streq	r0, [r1], -r0
    2a38:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2a3c:	93c00305 	bicls	r0, r0, #335544320	; 0x14000000
    2a40:	040b0000 	streq	r0, [fp], #-0
    2a44:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    2a48:	0009650c 	andeq	r6, r9, ip, lsl #10
    2a4c:	093a0200 	ldmdbeq	sl!, {r9}
    2a50:	0000002c 	andeq	r0, r0, ip, lsr #32
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	110e1b0e 	tstne	lr, lr, lsl #22
       c:	10061201 	andne	r1, r6, r1, lsl #4
      10:	02000017 	andeq	r0, r0, #23
      14:	0b0b0024 	bleq	2c00ac <__bss_end__+0x2b6384>
      18:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
      1c:	24030000 	strcs	r0, [r3], #-0
      20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
      24:	000e030b 	andeq	r0, lr, fp, lsl #6
      28:	000f0400 	andeq	r0, pc, r0, lsl #8
      2c:	00000b0b 	andeq	r0, r0, fp, lsl #22
      30:	0b000f05 	bleq	3c4c <_start-0x43b4>
      34:	0013490b 	andseq	r4, r3, fp, lsl #18
      38:	00260600 	eoreq	r0, r6, r0, lsl #12
      3c:	00001349 	andeq	r1, r0, r9, asr #6
      40:	0b010407 	bleq	41064 <__bss_end__+0x3733c>
      44:	3b0b3a0b 	blcc	2ce878 <__bss_end__+0x2c4b50>
      48:	0013010b 	andseq	r0, r3, fp, lsl #2
      4c:	00280800 	eoreq	r0, r8, r0, lsl #16
      50:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
      54:	13090000 	movwne	r0, #36864	; 0x9000
      58:	3a0b0b01 	bcc	2c2c64 <__bss_end__+0x2b8f3c>
      5c:	010b3b0b 	tsteq	fp, fp, lsl #22
      60:	0a000013 	beq	b4 <_start-0x7f4c>
      64:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
      68:	0b3b0b3a 	bleq	ec2d58 <__bss_end__+0xeb9030>
      6c:	0b381349 	bleq	e04d98 <__bss_end__+0xdfb070>
      70:	160b0000 	strne	r0, [fp], -r0
      74:	3a0e0300 	bcc	380c7c <__bss_end__+0x376f54>
      78:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      7c:	0c000013 	stceq	0, cr0, [r0], {19}
      80:	0e03012e 	adfeqsp	f0, f3, #0.5
      84:	0b3b0b3a 	bleq	ec2d74 <__bss_end__+0xeb904c>
      88:	01111927 	tsteq	r1, r7, lsr #18
      8c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
      90:	01194297 			; <UNDEFINED> instruction: 0x01194297
      94:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
      98:	08030005 	stmdaeq	r3, {r0, r2}
      9c:	0b3b0b3a 	bleq	ec2d8c <__bss_end__+0xeb9064>
      a0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
      a4:	340e0000 	strcc	r0, [lr], #-0
      a8:	3a080300 	bcc	200cb0 <__bss_end__+0x1f6f88>
      ac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      b0:	00170213 	andseq	r0, r7, r3, lsl r2
      b4:	00050f00 	andeq	r0, r5, r0, lsl #30
      b8:	0b3a0e03 	bleq	e838cc <__bss_end__+0xe79ba4>
      bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      c0:	00001702 	andeq	r1, r0, r2, lsl #14
      c4:	01828910 	orreq	r8, r2, r0, lsl r9
      c8:	31011101 	tstcc	r1, r1, lsl #2
      cc:	11000013 	tstne	r0, r3, lsl r0
      d0:	0001828a 	andeq	r8, r1, sl, lsl #5
      d4:	42911802 	addsmi	r1, r1, #131072	; 0x20000
      d8:	12000018 	andne	r0, r0, #24
      dc:	0e03012e 	adfeqsp	f0, f3, #0.5
      e0:	0b3b0b3a 	bleq	ec2dd0 <__bss_end__+0xeb90a8>
      e4:	13491927 	movtne	r1, #39207	; 0x9927
      e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
      ec:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
      f0:	00130119 	andseq	r0, r3, r9, lsl r1
      f4:	012e1300 	teqeq	lr, r0, lsl #6
      f8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
      fc:	0b3b0b3a 	bleq	ec2dec <__bss_end__+0xeb90c4>
     100:	01111927 	tsteq	r1, r7, lsr #18
     104:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     108:	01194297 			; <UNDEFINED> instruction: 0x01194297
     10c:	14000013 	strne	r0, [r0], #-19
     110:	08030005 	stmdaeq	r3, {r0, r2}
     114:	0b3b0b3a 	bleq	ec2e04 <__bss_end__+0xeb90dc>
     118:	17021349 	strne	r1, [r2, -r9, asr #6]
     11c:	34150000 	ldrcc	r0, [r5], #-0
     120:	3a0e0300 	bcc	380d28 <__bss_end__+0x377000>
     124:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     128:	00170213 	andseq	r0, r7, r3, lsl r2
     12c:	00341600 	eorseq	r1, r4, r0, lsl #12
     130:	0b3a0e03 	bleq	e83944 <__bss_end__+0xe79c1c>
     134:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     138:	00001802 	andeq	r1, r0, r2, lsl #16
     13c:	03003417 	movweq	r3, #1047	; 0x417
     140:	3b0b3a08 	blcc	2ce968 <__bss_end__+0x2c4c40>
     144:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     148:	18000018 	stmdane	r0, {r3, r4}
     14c:	00018289 	andeq	r8, r1, r9, lsl #5
     150:	13310111 	teqne	r1, #1073741828	; 0x40000004
     154:	89190000 	ldmdbhi	r9, {}	; <UNPREDICTABLE>
     158:	11010182 	smlabbne	r1, r2, r1, r0
     15c:	01133101 	tsteq	r3, r1, lsl #2
     160:	1a000013 	bne	1b4 <_start-0x7e4c>
     164:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     168:	0b3a0e03 	bleq	e8397c <__bss_end__+0xe79c54>
     16c:	01110b3b 	tsteq	r1, fp, lsr fp
     170:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     174:	01194297 			; <UNDEFINED> instruction: 0x01194297
     178:	1b000013 	blne	1cc <_start-0x7e34>
     17c:	13490035 	movtne	r0, #36917	; 0x9035
     180:	341c0000 	ldrcc	r0, [ip], #-0
     184:	3a0e0300 	bcc	380d8c <__bss_end__+0x377064>
     188:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     18c:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     190:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
     194:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     198:	0b3a0e03 	bleq	e839ac <__bss_end__+0xe79c84>
     19c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     1a0:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     1a4:	00001301 	andeq	r1, r0, r1, lsl #6
     1a8:	4900051e 	stmdbmi	r0, {r1, r2, r3, r4, r8, sl}
     1ac:	1f000013 	svcne	0x00000013
     1b0:	00000018 	andeq	r0, r0, r8, lsl r0
     1b4:	3f002e20 	svccc	0x00002e20
     1b8:	3a0e0319 	bcc	380e24 <__bss_end__+0x3770fc>
     1bc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     1c0:	00193c19 	andseq	r3, r9, r9, lsl ip
     1c4:	012e2100 	teqeq	lr, r0, lsl #2
     1c8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     1cc:	0b3b0b3a 	bleq	ec2ebc <__bss_end__+0xeb9194>
     1d0:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     1d4:	00001301 	andeq	r1, r0, r1, lsl #6
     1d8:	3f002e22 	svccc	0x00002e22
     1dc:	3a0e0319 	bcc	380e48 <__bss_end__+0x377120>
     1e0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     1e4:	3c134919 	ldccc	9, cr4, [r3], {25}
     1e8:	00000019 	andeq	r0, r0, r9, lsl r0
     1ec:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     1f0:	030b130e 	movweq	r1, #45838	; 0xb30e
     1f4:	110e1b0e 	tstne	lr, lr, lsl #22
     1f8:	10061201 	andne	r1, r6, r1, lsl #4
     1fc:	02000017 	andeq	r0, r0, #23
     200:	0b0b0024 	bleq	2c0298 <__bss_end__+0x2b6570>
     204:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     208:	24030000 	strcs	r0, [r3], #-0
     20c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     210:	000e030b 	andeq	r0, lr, fp, lsl #6
     214:	000f0400 	andeq	r0, pc, r0, lsl #8
     218:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     21c:	26050000 	strcs	r0, [r5], -r0
     220:	00134900 	andseq	r4, r3, r0, lsl #18
     224:	01010600 	tsteq	r1, r0, lsl #12
     228:	13011349 	movwne	r1, #4937	; 0x1349
     22c:	21070000 	mrscs	r0, (UNDEF: 7)
     230:	2f134900 	svccs	0x00134900
     234:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     238:	0b0b0104 	bleq	2c0650 <__bss_end__+0x2b6928>
     23c:	0b3b0b3a 	bleq	ec2f2c <__bss_end__+0xeb9204>
     240:	00001301 	andeq	r1, r0, r1, lsl #6
     244:	03002809 	movweq	r2, #2057	; 0x809
     248:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     24c:	012e0a00 	teqeq	lr, r0, lsl #20
     250:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     254:	0b3b0b3a 	bleq	ec2f44 <__bss_end__+0xeb921c>
     258:	01111927 	tsteq	r1, r7, lsr #18
     25c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     260:	01194297 			; <UNDEFINED> instruction: 0x01194297
     264:	0b000013 	bleq	2b8 <_start-0x7d48>
     268:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     26c:	0b3b0b3a 	bleq	ec2f5c <__bss_end__+0xeb9234>
     270:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     274:	0000193c 	andeq	r1, r0, ip, lsr r9
     278:	0300340c 	movweq	r3, #1036	; 0x40c
     27c:	3b0b3a08 	blcc	2ceaa4 <__bss_end__+0x2c4d7c>
     280:	1c13490b 	ldcne	9, cr4, [r3], {11}
     284:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
     288:	08030034 	stmdaeq	r3, {r2, r4, r5}
     28c:	0b3b0b3a 	bleq	ec2f7c <__bss_end__+0xeb9254>
     290:	00001349 	andeq	r1, r0, r9, asr #6
     294:	0300340e 	movweq	r3, #1038	; 0x40e
     298:	3b0b3a08 	blcc	2ceac0 <__bss_end__+0x2c4d98>
     29c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     2a0:	0f000018 	svceq	0x00000018
     2a4:	0111010b 	tsteq	r1, fp, lsl #2
     2a8:	13010612 	movwne	r0, #5650	; 0x1612
     2ac:	34100000 	ldrcc	r0, [r0], #-0
     2b0:	3a080300 	bcc	200eb8 <__bss_end__+0x1f7190>
     2b4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2b8:	00170213 	andseq	r0, r7, r3, lsl r2
     2bc:	82891100 	addhi	r1, r9, #0, 2
     2c0:	01110101 	tsteq	r1, r1, lsl #2
     2c4:	13011331 	movwne	r1, #4913	; 0x1331
     2c8:	8a120000 	bhi	4802d0 <__bss_end__+0x4765a8>
     2cc:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     2d0:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     2d4:	89130000 	ldmdbhi	r3, {}	; <UNPREDICTABLE>
     2d8:	11000182 	smlabbne	r0, r2, r1, r0
     2dc:	00133101 	andseq	r3, r3, r1, lsl #2
     2e0:	00051400 	andeq	r1, r5, r0, lsl #8
     2e4:	0b3a0803 	bleq	e822f8 <__bss_end__+0xe785d0>
     2e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     2ec:	00001702 	andeq	r1, r0, r2, lsl #14
     2f0:	03003415 	movweq	r3, #1045	; 0x415
     2f4:	3413490e 	ldrcc	r4, [r3], #-2318	; 0x90e
     2f8:	00180219 	andseq	r0, r8, r9, lsl r2
     2fc:	012e1600 	teqeq	lr, r0, lsl #12
     300:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     304:	0b3b0b3a 	bleq	ec2ff4 <__bss_end__+0xeb92cc>
     308:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     30c:	00001301 	andeq	r1, r0, r1, lsl #6
     310:	49000517 	stmdbmi	r0, {r0, r1, r2, r4, r8, sl}
     314:	18000013 	stmdane	r0, {r0, r1, r4}
     318:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     31c:	0b3a0e03 	bleq	e83b30 <__bss_end__+0xe79e08>
     320:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     324:	0000193c 	andeq	r1, r0, ip, lsr r9
     328:	3f012e19 	svccc	0x00012e19
     32c:	3a0e0319 	bcc	380f98 <__bss_end__+0x377270>
     330:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     334:	3c134919 	ldccc	9, cr4, [r3], {25}
     338:	00130119 	andseq	r0, r3, r9, lsl r1
     33c:	00181a00 	andseq	r1, r8, r0, lsl #20
     340:	01000000 	mrseq	r0, (UNDEF: 0)
     344:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     348:	0e030b13 	vmoveq.32	d3[0], r0
     34c:	01110e1b 	tsteq	r1, fp, lsl lr
     350:	17100612 			; <UNDEFINED> instruction: 0x17100612
     354:	24020000 	strcs	r0, [r2], #-0
     358:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     35c:	0008030b 	andeq	r0, r8, fp, lsl #6
     360:	00240300 	eoreq	r0, r4, r0, lsl #6
     364:	0b3e0b0b 	bleq	f82f98 <__bss_end__+0xf79270>
     368:	00000e03 	andeq	r0, r0, r3, lsl #28
     36c:	03001604 	movweq	r1, #1540	; 0x604
     370:	3b0b3a0e 	blcc	2cebb0 <__bss_end__+0x2c4e88>
     374:	0013490b 	andseq	r4, r3, fp, lsl #18
     378:	000f0500 	andeq	r0, pc, r0, lsl #10
     37c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     380:	26060000 	strcs	r0, [r6], -r0
     384:	00134900 	andseq	r4, r3, r0, lsl #18
     388:	01130700 	tsteq	r3, r0, lsl #14
     38c:	0b3a0b0b 	bleq	e82fc0 <__bss_end__+0xe79298>
     390:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     394:	0d080000 	stceq	0, cr0, [r8, #-0]
     398:	3a0e0300 	bcc	380fa0 <__bss_end__+0x377278>
     39c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3a0:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
     3a4:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
     3a8:	0900000b 	stmdbeq	r0, {r0, r1, r3}
     3ac:	0b0b0104 	bleq	2c07c4 <__bss_end__+0x2b6a9c>
     3b0:	0b3b0b3a 	bleq	ec30a0 <__bss_end__+0xeb9378>
     3b4:	00001301 	andeq	r1, r0, r1, lsl #6
     3b8:	0300280a 	movweq	r2, #2058	; 0x80a
     3bc:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     3c0:	012e0b00 	teqeq	lr, r0, lsl #22
     3c4:	0b3a0e03 	bleq	e83bd8 <__bss_end__+0xe79eb0>
     3c8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     3cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     3d0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     3d4:	00130119 	andseq	r0, r3, r9, lsl r1
     3d8:	00340c00 	eorseq	r0, r4, r0, lsl #24
     3dc:	13490e03 	movtne	r0, #40451	; 0x9e03
     3e0:	18021934 	stmdane	r2, {r2, r4, r5, r8, fp, ip}
     3e4:	890d0000 	stmdbhi	sp, {}	; <UNPREDICTABLE>
     3e8:	11010182 	smlabbne	r1, r2, r1, r0
     3ec:	00133101 	andseq	r3, r3, r1, lsl #2
     3f0:	828a0e00 	addhi	r0, sl, #0, 28
     3f4:	18020001 	stmdane	r2, {r0}
     3f8:	00184291 	mulseq	r8, r1, r2
     3fc:	01010f00 	tsteq	r1, r0, lsl #30
     400:	13011349 	movwne	r1, #4937	; 0x1349
     404:	21100000 	tstcs	r0, r0
     408:	2f134900 	svccs	0x00134900
     40c:	1100000b 	tstne	r0, fp
     410:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     414:	0b3a0e03 	bleq	e83c28 <__bss_end__+0xe79f00>
     418:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     41c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     420:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     424:	00130119 	andseq	r0, r3, r9, lsl r1
     428:	00051200 	andeq	r1, r5, r0, lsl #4
     42c:	0b3a0e03 	bleq	e83c40 <__bss_end__+0xe79f18>
     430:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     434:	00001702 	andeq	r1, r0, r2, lsl #14
     438:	01828913 	orreq	r8, r2, r3, lsl r9
     43c:	31011100 	mrscc	r1, (UNDEF: 17)
     440:	14000013 	strne	r0, [r0], #-19
     444:	01018289 	smlabbeq	r1, r9, r2, r8
     448:	13310111 	teqne	r1, #1073741828	; 0x40000004
     44c:	00001301 	andeq	r1, r0, r1, lsl #6
     450:	03003415 	movweq	r3, #1045	; 0x415
     454:	3b0b3a0e 	blcc	2cec94 <__bss_end__+0x2c4f6c>
     458:	3f13490b 	svccc	0x0013490b
     45c:	00180219 	andseq	r0, r8, r9, lsl r2
     460:	012e1600 	teqeq	lr, r0, lsl #12
     464:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     468:	0b3b0b3a 	bleq	ec3158 <__bss_end__+0xeb9430>
     46c:	13491927 	movtne	r1, #39207	; 0x9927
     470:	1301193c 	movwne	r1, #6460	; 0x193c
     474:	05170000 	ldreq	r0, [r7, #-0]
     478:	00134900 	andseq	r4, r3, r0, lsl #18
     47c:	00181800 	andseq	r1, r8, r0, lsl #16
     480:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
     484:	03193f01 	tsteq	r9, #1, 30
     488:	3b0b3a0e 	blcc	2cecc8 <__bss_end__+0x2c4fa0>
     48c:	3c19270b 	ldccc	7, cr2, [r9], {11}
     490:	00000019 	andeq	r0, r0, r9, lsl r0
     494:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     498:	030b130e 	movweq	r1, #45838	; 0xb30e
     49c:	110e1b0e 	tstne	lr, lr, lsl #22
     4a0:	10061201 	andne	r1, r6, r1, lsl #4
     4a4:	02000017 	andeq	r0, r0, #23
     4a8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     4ac:	0b3b0b3a 	bleq	ec319c <__bss_end__+0xeb9474>
     4b0:	00001349 	andeq	r1, r0, r9, asr #6
     4b4:	03011303 	movweq	r1, #4867	; 0x1303
     4b8:	3a0b0b0e 	bcc	2c30f8 <__bss_end__+0x2b93d0>
     4bc:	010b3b0b 	tsteq	fp, fp, lsl #22
     4c0:	04000013 	streq	r0, [r0], #-19
     4c4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     4c8:	0b381349 	bleq	e051f4 <__bss_end__+0xdfb4cc>
     4cc:	00001934 	andeq	r1, r0, r4, lsr r9
     4d0:	0b000f05 	bleq	40ec <_start-0x3f14>
     4d4:	0600000b 	streq	r0, [r0], -fp
     4d8:	0b0b0024 	bleq	2c0570 <__bss_end__+0x2b6848>
     4dc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     4e0:	24070000 	strcs	r0, [r7], #-0
     4e4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     4e8:	000e030b 	andeq	r0, lr, fp, lsl #6
     4ec:	000f0800 	andeq	r0, pc, r0, lsl #16
     4f0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     4f4:	26090000 	strcs	r0, [r9], -r0
     4f8:	00134900 	andseq	r4, r3, r0, lsl #18
     4fc:	012e0a00 	teqeq	lr, r0, lsl #20
     500:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     504:	0b3b0b3a 	bleq	ec31f4 <__bss_end__+0xeb94cc>
     508:	13491927 	movtne	r1, #39207	; 0x9927
     50c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     510:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     514:	00130119 	andseq	r0, r3, r9, lsl r1
     518:	00050b00 	andeq	r0, r5, r0, lsl #22
     51c:	0b3a0803 	bleq	e82530 <__bss_end__+0xe78808>
     520:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     524:	00001802 	andeq	r1, r0, r2, lsl #16
     528:	0000180c 	andeq	r1, r0, ip, lsl #16
     52c:	00340d00 	eorseq	r0, r4, r0, lsl #26
     530:	0b3a0803 	bleq	e82544 <__bss_end__+0xe7881c>
     534:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     538:	00001802 	andeq	r1, r0, r2, lsl #16
     53c:	0300340e 	movweq	r3, #1038	; 0x40e
     540:	3b0b3a0e 	blcc	2ced80 <__bss_end__+0x2c5058>
     544:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     548:	0f000018 	svceq	0x00000018
     54c:	08030034 	stmdaeq	r3, {r2, r4, r5}
     550:	0b3b0b3a 	bleq	ec3240 <__bss_end__+0xeb9518>
     554:	17021349 	strne	r1, [r2, -r9, asr #6]
     558:	89100000 	ldmdbhi	r0, {}	; <UNPREDICTABLE>
     55c:	11010182 	smlabbne	r1, r2, r1, r0
     560:	01133101 	tsteq	r3, r1, lsl #2
     564:	11000013 	tstne	r0, r3, lsl r0
     568:	0001828a 	andeq	r8, r1, sl, lsl #5
     56c:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     570:	12000018 	andne	r0, r0, #24
     574:	01018289 	smlabbeq	r1, r9, r2, r8
     578:	00000111 	andeq	r0, r0, r1, lsl r1
     57c:	49010113 	stmdbmi	r1, {r0, r1, r4, r8}
     580:	00130113 	andseq	r0, r3, r3, lsl r1
     584:	00211400 	eoreq	r1, r1, r0, lsl #8
     588:	052f1349 	streq	r1, [pc, #-841]!	; 247 <_start-0x7db9>
     58c:	15150000 	ldrne	r0, [r5, #-0]
     590:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
     594:	00130113 	andseq	r0, r3, r3, lsl r1
     598:	00051600 	andeq	r1, r5, r0, lsl #12
     59c:	00001349 	andeq	r1, r0, r9, asr #6
     5a0:	03003417 	movweq	r3, #1047	; 0x417
     5a4:	3b0b3a0e 	blcc	2cede4 <__bss_end__+0x2c50bc>
     5a8:	3f13490b 	svccc	0x0013490b
     5ac:	00193c19 	andseq	r3, r9, r9, lsl ip
     5b0:	012e1800 	teqeq	lr, r0, lsl #16
     5b4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     5b8:	0b3b0b3a 	bleq	ec32a8 <__bss_end__+0xeb9580>
     5bc:	13491927 	movtne	r1, #39207	; 0x9927
     5c0:	0000193c 	andeq	r1, r0, ip, lsr r9
     5c4:	01110100 	tsteq	r1, r0, lsl #2
     5c8:	0b130e25 	bleq	4c3e64 <__bss_end__+0x4ba13c>
     5cc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     5d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     5d4:	00001710 	andeq	r1, r0, r0, lsl r7
     5d8:	0b002402 	bleq	95e8 <__FUNCTION__.4188+0x48>
     5dc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     5e0:	03000008 	movweq	r0, #8
     5e4:	0b0b0024 	bleq	2c067c <__bss_end__+0x2b6954>
     5e8:	0e030b3e 	vmoveq.16	d3[0], r0
     5ec:	0f040000 	svceq	0x00040000
     5f0:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     5f4:	05000013 	streq	r0, [r0, #-19]
     5f8:	13490026 	movtne	r0, #36902	; 0x9026
     5fc:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
     600:	03193f01 	tsteq	r9, #1, 30
     604:	3b0b3a0e 	blcc	2cee44 <__bss_end__+0x2c511c>
     608:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     60c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     610:	96184006 	ldrls	r4, [r8], -r6
     614:	13011942 	movwne	r1, #6466	; 0x1942
     618:	05070000 	streq	r0, [r7, #-0]
     61c:	3a080300 	bcc	201224 <__bss_end__+0x1f74fc>
     620:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     624:	00170213 	andseq	r0, r7, r3, lsl r2
     628:	01150800 	tsteq	r5, r0, lsl #16
     62c:	13491927 	movtne	r1, #39207	; 0x9927
     630:	00001301 	andeq	r1, r0, r1, lsl #6
     634:	49000509 	stmdbmi	r0, {r0, r3, r8, sl}
     638:	0a000013 	beq	68c <_start-0x7974>
     63c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     640:	0b3b0b3a 	bleq	ec3330 <__bss_end__+0xeb9608>
     644:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     648:	0000193c 	andeq	r1, r0, ip, lsr r9
     64c:	0300340b 	movweq	r3, #1035	; 0x40b
     650:	3b0b3a0e 	blcc	2cee90 <__bss_end__+0x2c5168>
     654:	3f13490b 	svccc	0x0013490b
     658:	00180219 	andseq	r0, r8, r9, lsl r2
     65c:	11010000 	mrsne	r0, (UNDEF: 1)
     660:	130e2501 	movwne	r2, #58625	; 0xe501
     664:	1b0e030b 	blne	381298 <__bss_end__+0x377570>
     668:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     66c:	00171006 	andseq	r1, r7, r6
     670:	00240200 	eoreq	r0, r4, r0, lsl #4
     674:	0b3e0b0b 	bleq	f832a8 <__bss_end__+0xf79580>
     678:	00000803 	andeq	r0, r0, r3, lsl #16
     67c:	0b002403 	bleq	9690 <__FUNCTION__.4188+0xf0>
     680:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     684:	0400000e 	streq	r0, [r0], #-14
     688:	0b0b000f 	bleq	2c06cc <__bss_end__+0x2b69a4>
     68c:	0f050000 	svceq	0x00050000
     690:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     694:	06000013 			; <UNDEFINED> instruction: 0x06000013
     698:	13490026 	movtne	r0, #36902	; 0x9026
     69c:	16070000 	strne	r0, [r7], -r0
     6a0:	3a0e0300 	bcc	3812a8 <__bss_end__+0x377580>
     6a4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     6a8:	08000013 	stmdaeq	r0, {r0, r1, r4}
     6ac:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     6b0:	0b3a0b0b 	bleq	e832e4 <__bss_end__+0xe795bc>
     6b4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     6b8:	0d090000 	stceq	0, cr0, [r9, #-0]
     6bc:	490e0300 	stmdbmi	lr, {r8, r9}
     6c0:	340b3813 	strcc	r3, [fp], #-2067	; 0x813
     6c4:	0a000019 	beq	730 <_start-0x78d0>
     6c8:	0e03012e 	adfeqsp	f0, f3, #0.5
     6cc:	0b3b0b3a 	bleq	ec33bc <__bss_end__+0xeb9694>
     6d0:	13491927 	movtne	r1, #39207	; 0x9927
     6d4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     6d8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     6dc:	00130119 	andseq	r0, r3, r9, lsl r1
     6e0:	00050b00 	andeq	r0, r5, r0, lsl #22
     6e4:	0b3a0803 	bleq	e826f8 <__bss_end__+0xe789d0>
     6e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     6ec:	00001702 	andeq	r1, r0, r2, lsl #14
     6f0:	03012e0c 	movweq	r2, #7692	; 0x1e0c
     6f4:	3b0b3a08 	blcc	2cef1c <__bss_end__+0x2c51f4>
     6f8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     6fc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     700:	97184006 	ldrls	r4, [r8, -r6]
     704:	13011942 	movwne	r1, #6466	; 0x1942
     708:	050d0000 	streq	r0, [sp, #-0]
     70c:	3a0e0300 	bcc	381314 <__bss_end__+0x3775ec>
     710:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     714:	00170213 	andseq	r0, r7, r3, lsl r2
     718:	00050e00 	andeq	r0, r5, r0, lsl #28
     71c:	0b3a0e03 	bleq	e83f30 <__bss_end__+0xe7a208>
     720:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     724:	00001802 	andeq	r1, r0, r2, lsl #16
     728:	0300340f 	movweq	r3, #1039	; 0x40f
     72c:	3b0b3a08 	blcc	2cef54 <__bss_end__+0x2c522c>
     730:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     734:	10000018 	andne	r0, r0, r8, lsl r0
     738:	08030034 	stmdaeq	r3, {r2, r4, r5}
     73c:	0b3b0b3a 	bleq	ec342c <__bss_end__+0xeb9704>
     740:	17021349 	strne	r1, [r2, -r9, asr #6]
     744:	34110000 	ldrcc	r0, [r1], #-0
     748:	490e0300 	stmdbmi	lr, {r8, r9}
     74c:	02193413 	andseq	r3, r9, #318767104	; 0x13000000
     750:	12000018 	andne	r0, r0, #24
     754:	0111010b 	tsteq	r1, fp, lsl #2
     758:	13010612 	movwne	r0, #5650	; 0x1612
     75c:	34130000 	ldrcc	r0, [r3], #-0
     760:	3a0e0300 	bcc	381368 <__bss_end__+0x377640>
     764:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     768:	00170213 	andseq	r0, r7, r3, lsl r2
     76c:	82891400 	addhi	r1, r9, #0, 8
     770:	01110101 	tsteq	r1, r1, lsl #2
     774:	13011331 	movwne	r1, #4913	; 0x1331
     778:	8a150000 	bhi	540780 <__bss_end__+0x536a58>
     77c:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     780:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     784:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
     788:	11000182 	smlabbne	r0, r2, r1, r0
     78c:	00133101 	andseq	r3, r3, r1, lsl #2
     790:	82891700 	addhi	r1, r9, #0, 14
     794:	01110101 	tsteq	r1, r1, lsl #2
     798:	00001331 	andeq	r1, r0, r1, lsr r3
     79c:	49010118 	stmdbmi	r1, {r3, r4, r8}
     7a0:	00130113 	andseq	r0, r3, r3, lsl r1
     7a4:	00211900 	eoreq	r1, r1, r0, lsl #18
     7a8:	0b2f1349 	bleq	bc54d4 <__bss_end__+0xbbb7ac>
     7ac:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
     7b0:	03193f01 	tsteq	r9, #1, 30
     7b4:	3b0b3a0e 	blcc	2ceff4 <__bss_end__+0x2c52cc>
     7b8:	1119270b 	tstne	r9, fp, lsl #14
     7bc:	40061201 	andmi	r1, r6, r1, lsl #4
     7c0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     7c4:	00001301 	andeq	r1, r0, r1, lsl #6
     7c8:	2701151b 	smladcs	r1, fp, r5, r1
     7cc:	01134919 	tsteq	r3, r9, lsl r9
     7d0:	1c000013 	stcne	0, cr0, [r0], {19}
     7d4:	13490005 	movtne	r0, #36869	; 0x9005
     7d8:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
     7dc:	03193f01 	tsteq	r9, #1, 30
     7e0:	3b0b3a0e 	blcc	2cf020 <__bss_end__+0x2c52f8>
     7e4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     7e8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     7ec:	97184006 	ldrls	r4, [r8, -r6]
     7f0:	13011942 	movwne	r1, #6466	; 0x1942
     7f4:	0b1e0000 	bleq	7807fc <__bss_end__+0x776ad4>
     7f8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     7fc:	1f000006 	svcne	0x00000006
     800:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     804:	0b3b0b3a 	bleq	ec34f4 <__bss_end__+0xeb97cc>
     808:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     80c:	0000193c 	andeq	r1, r0, ip, lsr r9
     810:	3f012e20 	svccc	0x00012e20
     814:	3a0e0319 	bcc	381480 <__bss_end__+0x377758>
     818:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     81c:	3c134919 	ldccc	9, cr4, [r3], {25}
     820:	00130119 	andseq	r0, r3, r9, lsl r1
     824:	00182100 	andseq	r2, r8, r0, lsl #2
     828:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
     82c:	03193f00 	tsteq	r9, #0, 30
     830:	3b0b3a0e 	blcc	2cf070 <__bss_end__+0x2c5348>
     834:	3c19270b 	ldccc	7, cr2, [r9], {11}
     838:	00000019 	andeq	r0, r0, r9, lsl r0
     83c:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     840:	030b130e 	movweq	r1, #45838	; 0xb30e
     844:	110e1b0e 	tstne	lr, lr, lsl #22
     848:	10061201 	andne	r1, r6, r1, lsl #4
     84c:	02000017 	andeq	r0, r0, #23
     850:	0b0b0024 	bleq	2c08e8 <__bss_end__+0x2b6bc0>
     854:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     858:	24030000 	strcs	r0, [r3], #-0
     85c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     860:	000e030b 	andeq	r0, lr, fp, lsl #6
     864:	000f0400 	andeq	r0, pc, r0, lsl #8
     868:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     86c:	26050000 	strcs	r0, [r5], -r0
     870:	00134900 	andseq	r4, r3, r0, lsl #18
     874:	012e0600 	teqeq	lr, r0, lsl #12
     878:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     87c:	0b3b0b3a 	bleq	ec356c <__bss_end__+0xeb9844>
     880:	01111927 	tsteq	r1, r7, lsr #18
     884:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     888:	01194297 			; <UNDEFINED> instruction: 0x01194297
     88c:	07000013 	smladeq	r0, r3, r0, r0
     890:	01018289 	smlabbeq	r1, r9, r2, r8
     894:	13010111 	movwne	r0, #4369	; 0x1111
     898:	8a080000 	bhi	2008a0 <__bss_end__+0x1f6b78>
     89c:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     8a0:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     8a4:	89090000 	stmdbhi	r9, {}	; <UNPREDICTABLE>
     8a8:	11010182 	smlabbne	r1, r2, r1, r0
     8ac:	01133101 	tsteq	r3, r1, lsl #2
     8b0:	0a000013 	beq	904 <_start-0x76fc>
     8b4:	00018289 	andeq	r8, r1, r9, lsl #5
     8b8:	13310111 	teqne	r1, #1073741828	; 0x40000004
     8bc:	150b0000 	strne	r0, [fp, #-0]
     8c0:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
     8c4:	00130113 	andseq	r0, r3, r3, lsl r1
     8c8:	00050c00 	andeq	r0, r5, r0, lsl #24
     8cc:	00001349 	andeq	r1, r0, r9, asr #6
     8d0:	0300340d 	movweq	r3, #1037	; 0x40d
     8d4:	3b0b3a0e 	blcc	2cf114 <__bss_end__+0x2c53ec>
     8d8:	3f13490b 	svccc	0x0013490b
     8dc:	00193c19 	andseq	r3, r9, r9, lsl ip
     8e0:	012e0e00 	teqeq	lr, r0, lsl #28
     8e4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     8e8:	0b3b0b3a 	bleq	ec35d8 <__bss_end__+0xeb98b0>
     8ec:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     8f0:	00001301 	andeq	r1, r0, r1, lsl #6
     8f4:	3f002e0f 	svccc	0x00002e0f
     8f8:	3a0e0319 	bcc	381564 <__bss_end__+0x37783c>
     8fc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     900:	00193c19 	andseq	r3, r9, r9, lsl ip
     904:	11010000 	mrsne	r0, (UNDEF: 1)
     908:	130e2501 	movwne	r2, #58625	; 0xe501
     90c:	1b0e030b 	blne	381540 <__bss_end__+0x377818>
     910:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     914:	00171006 	andseq	r1, r7, r6
     918:	00240200 	eoreq	r0, r4, r0, lsl #4
     91c:	0b3e0b0b 	bleq	f83550 <__bss_end__+0xf79828>
     920:	00000803 	andeq	r0, r0, r3, lsl #16
     924:	0b002403 	bleq	9938 <buf.4135+0x1c>
     928:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     92c:	0400000e 	streq	r0, [r0], #-14
     930:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     934:	0b3a0e03 	bleq	e84148 <__bss_end__+0xe7a420>
     938:	01110b3b 	tsteq	r1, fp, lsr fp
     93c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     940:	01194297 			; <UNDEFINED> instruction: 0x01194297
     944:	05000013 	streq	r0, [r0, #-19]
     948:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     94c:	0b3b0b3a 	bleq	ec363c <__bss_end__+0xeb9914>
     950:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     954:	0000193c 	andeq	r1, r0, ip, lsr r9
     958:	3f012e06 	svccc	0x00012e06
     95c:	3a0e0319 	bcc	3815c8 <__bss_end__+0x3778a0>
     960:	3c0b3b0b 	stccc	11, cr3, [fp], {11}
     964:	00130119 	andseq	r0, r3, r9, lsl r1
     968:	00180700 	andseq	r0, r8, r0, lsl #14
     96c:	34080000 	strcc	r0, [r8], #-0
     970:	3a080300 	bcc	201578 <__bss_end__+0x1f7850>
     974:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     978:	00170213 	andseq	r0, r7, r3, lsl r2
     97c:	00340900 	eorseq	r0, r4, r0, lsl #18
     980:	0b3a0e03 	bleq	e84194 <__bss_end__+0xe7a46c>
     984:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     988:	890a0000 	stmdbhi	sl, {}	; <UNPREDICTABLE>
     98c:	11000182 	smlabbne	r0, r2, r1, r0
     990:	00133101 	andseq	r3, r3, r1, lsl #2
     994:	000f0b00 	andeq	r0, pc, r0, lsl #22
     998:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     99c:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
     9a0:	03193f00 	tsteq	r9, #0, 30
     9a4:	3b0b3a0e 	blcc	2cf1e4 <__bss_end__+0x2c54bc>
     9a8:	3c19270b 	ldccc	7, cr2, [r9], {11}
     9ac:	00000019 	andeq	r0, r0, r9, lsl r0
     9b0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     9b4:	030b130e 	movweq	r1, #45838	; 0xb30e
     9b8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
     9bc:	10011117 	andne	r1, r1, r7, lsl r1
     9c0:	02000017 	andeq	r0, r0, #23
     9c4:	0b0b0024 	bleq	2c0a5c <__bss_end__+0x2b6d34>
     9c8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     9cc:	24030000 	strcs	r0, [r3], #-0
     9d0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     9d4:	000e030b 	andeq	r0, lr, fp, lsl #6
     9d8:	012e0400 	teqeq	lr, r0, lsl #8
     9dc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     9e0:	0b3b0b3a 	bleq	ec36d0 <__bss_end__+0xeb99a8>
     9e4:	13491927 	movtne	r1, #39207	; 0x9927
     9e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     9ec:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     9f0:	00130119 	andseq	r0, r3, r9, lsl r1
     9f4:	00340500 	eorseq	r0, r4, r0, lsl #10
     9f8:	0b3a0e03 	bleq	e8420c <__bss_end__+0xe7a4e4>
     9fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     a00:	00001702 	andeq	r1, r0, r2, lsl #14
     a04:	3f012e06 	svccc	0x00012e06
     a08:	3a0e0319 	bcc	381674 <__bss_end__+0x37794c>
     a0c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     a10:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     a14:	97184006 	ldrls	r4, [r8, -r6]
     a18:	13011942 	movwne	r1, #6466	; 0x1942
     a1c:	34070000 	strcc	r0, [r7], #-0
     a20:	3a0e0300 	bcc	381628 <__bss_end__+0x377900>
     a24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a28:	00061c13 	andeq	r1, r6, r3, lsl ip
     a2c:	00340800 	eorseq	r0, r4, r0, lsl #16
     a30:	0b3a0e03 	bleq	e84244 <__bss_end__+0xe7a51c>
     a34:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     a38:	00000b1c 	andeq	r0, r0, ip, lsl fp
     a3c:	01828909 	orreq	r8, r2, r9, lsl #18
     a40:	31011100 	mrscc	r1, (UNDEF: 17)
     a44:	0a000013 	beq	a98 <_start-0x7568>
     a48:	01018289 	smlabbeq	r1, r9, r2, r8
     a4c:	13310111 	teqne	r1, #1073741828	; 0x40000004
     a50:	00001301 	andeq	r1, r0, r1, lsl #6
     a54:	01828a0b 	orreq	r8, r2, fp, lsl #20
     a58:	91180200 	tstls	r8, r0, lsl #4
     a5c:	00001842 	andeq	r1, r0, r2, asr #16
     a60:	0182890c 	orreq	r8, r2, ip, lsl #18
     a64:	31011101 	tstcc	r1, r1, lsl #2
     a68:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     a6c:	13490026 	movtne	r0, #36902	; 0x9026
     a70:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
     a74:	03193f01 	tsteq	r9, #1, 30
     a78:	3b0b3a0e 	blcc	2cf2b8 <__bss_end__+0x2c5590>
     a7c:	3c19270b 	ldccc	7, cr2, [r9], {11}
     a80:	00130119 	andseq	r0, r3, r9, lsl r1
     a84:	00050f00 	andeq	r0, r5, r0, lsl #30
     a88:	00001349 	andeq	r1, r0, r9, asr #6
     a8c:	3f012e10 	svccc	0x00012e10
     a90:	3a0e0319 	bcc	3816fc <__bss_end__+0x3779d4>
     a94:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     a98:	00193c19 	andseq	r3, r9, r9, lsl ip
     a9c:	11010000 	mrsne	r0, (UNDEF: 1)
     aa0:	130e2501 	movwne	r2, #58625	; 0xe501
     aa4:	1b0e030b 	blne	3816d8 <__bss_end__+0x3779b0>
     aa8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     aac:	00171006 	andseq	r1, r7, r6
     ab0:	00240200 	eoreq	r0, r4, r0, lsl #4
     ab4:	0b3e0b0b 	bleq	f836e8 <__bss_end__+0xf799c0>
     ab8:	00000803 	andeq	r0, r0, r3, lsl #16
     abc:	0b002403 	bleq	9ad0 <buf.4135+0x1b4>
     ac0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     ac4:	0400000e 	streq	r0, [r0], #-14
     ac8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     acc:	0b3a0e03 	bleq	e842e0 <__bss_end__+0xe7a5b8>
     ad0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     ad4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     ad8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     adc:	00130119 	andseq	r0, r3, r9, lsl r1
     ae0:	00050500 	andeq	r0, r5, r0, lsl #10
     ae4:	0b3a0e03 	bleq	e842f8 <__bss_end__+0xe7a5d0>
     ae8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     aec:	00001702 	andeq	r1, r0, r2, lsl #14
     af0:	3f012e06 	svccc	0x00012e06
     af4:	3a0e0319 	bcc	381760 <__bss_end__+0x377a38>
     af8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     afc:	11134919 	tstne	r3, r9, lsl r9
     b00:	40061201 	andmi	r1, r6, r1, lsl #4
     b04:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     b08:	00001301 	andeq	r1, r0, r1, lsl #6
     b0c:	01828907 	orreq	r8, r2, r7, lsl #18
     b10:	31011101 	tstcc	r1, r1, lsl #2
     b14:	08000013 	stmdaeq	r0, {r0, r1, r4}
     b18:	0001828a 	andeq	r8, r1, sl, lsl #5
     b1c:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     b20:	09000018 	stmdbeq	r0, {r3, r4}
     b24:	08030034 	stmdaeq	r3, {r2, r4, r5}
     b28:	0b3b0b3a 	bleq	ec3818 <__bss_end__+0xeb9af0>
     b2c:	17021349 	strne	r1, [r2, -r9, asr #6]
     b30:	890a0000 	stmdbhi	sl, {}	; <UNPREDICTABLE>
     b34:	11000182 	smlabbne	r0, r2, r1, r0
     b38:	00133101 	andseq	r3, r3, r1, lsl #2
     b3c:	00050b00 	andeq	r0, r5, r0, lsl #22
     b40:	0b3a0803 	bleq	e82b54 <__bss_end__+0xe78e2c>
     b44:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     b48:	00001702 	andeq	r1, r0, r2, lsl #14
     b4c:	0300340c 	movweq	r3, #1036	; 0x40c
     b50:	3b0b3a08 	blcc	2cf378 <__bss_end__+0x2c5650>
     b54:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     b58:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
     b5c:	0111010b 	tsteq	r1, fp, lsl #2
     b60:	13010612 	movwne	r0, #5650	; 0x1612
     b64:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
     b68:	03193f01 	tsteq	r9, #1, 30
     b6c:	3b0b3a0e 	blcc	2cf3ac <__bss_end__+0x2c5684>
     b70:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     b74:	01193c13 	tsteq	r9, r3, lsl ip
     b78:	0f000013 	svceq	0x00000013
     b7c:	13490005 	movtne	r0, #36869	; 0x9005
     b80:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
     b84:	03193f00 	tsteq	r9, #0, 30
     b88:	3b0b3a0e 	blcc	2cf3c8 <__bss_end__+0x2c56a0>
     b8c:	3c19270b 	ldccc	7, cr2, [r9], {11}
     b90:	00000019 	andeq	r0, r0, r9, lsl r0
     b94:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     b98:	030b130e 	movweq	r1, #45838	; 0xb30e
     b9c:	110e1b0e 	tstne	lr, lr, lsl #22
     ba0:	10061201 	andne	r1, r6, r1, lsl #4
     ba4:	02000017 	andeq	r0, r0, #23
     ba8:	0b0b0024 	bleq	2c0c40 <__bss_end__+0x2b6f18>
     bac:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     bb0:	16030000 	strne	r0, [r3], -r0
     bb4:	3a0e0300 	bcc	3817bc <__bss_end__+0x377a94>
     bb8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     bbc:	04000013 	streq	r0, [r0], #-19
     bc0:	0b0b0024 	bleq	2c0c58 <__bss_end__+0x2b6f30>
     bc4:	0e030b3e 	vmoveq.16	d3[0], r0
     bc8:	0f050000 	svceq	0x00050000
     bcc:	000b0b00 	andeq	r0, fp, r0, lsl #22
     bd0:	000f0600 	andeq	r0, pc, r0, lsl #12
     bd4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     bd8:	26070000 	strcs	r0, [r7], -r0
     bdc:	00134900 	andseq	r4, r3, r0, lsl #18
     be0:	01010800 	tsteq	r1, r0, lsl #16
     be4:	13011349 	movwne	r1, #4937	; 0x1349
     be8:	21090000 	mrscs	r0, (UNDEF: 9)
     bec:	2f134900 	svccs	0x00134900
     bf0:	0a00000b 	beq	c24 <_start-0x73dc>
     bf4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     bf8:	0b3a0e03 	bleq	e8440c <__bss_end__+0xe7a6e4>
     bfc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     c00:	01111349 	tsteq	r1, r9, asr #6
     c04:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     c08:	01194297 			; <UNDEFINED> instruction: 0x01194297
     c0c:	0b000013 	bleq	c60 <_start-0x73a0>
     c10:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     c14:	0b3b0b3a 	bleq	ec3904 <__bss_end__+0xeb9bdc>
     c18:	17021349 	strne	r1, [r2, -r9, asr #6]
     c1c:	340c0000 	strcc	r0, [ip], #-0
     c20:	490e0300 	stmdbmi	lr, {r8, r9}
     c24:	02193413 	andseq	r3, r9, #318767104	; 0x13000000
     c28:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
     c2c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     c30:	0b3b0b3a 	bleq	ec3920 <__bss_end__+0xeb9bf8>
     c34:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     c38:	340e0000 	strcc	r0, [lr], #-0
     c3c:	3a0e0300 	bcc	381844 <__bss_end__+0x377b1c>
     c40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c44:	00170213 	andseq	r0, r7, r3, lsl r2
     c48:	82890f00 	addhi	r0, r9, #0, 30
     c4c:	01110101 	tsteq	r1, r1, lsl #2
     c50:	13011331 	movwne	r1, #4913	; 0x1331
     c54:	8a100000 	bhi	400c5c <__bss_end__+0x3f6f34>
     c58:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     c5c:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     c60:	89110000 	ldmdbhi	r1, {}	; <UNPREDICTABLE>
     c64:	11000182 	smlabbne	r0, r2, r1, r0
     c68:	00133101 	andseq	r3, r3, r1, lsl #2
     c6c:	82891200 	addhi	r1, r9, #0, 4
     c70:	01110101 	tsteq	r1, r1, lsl #2
     c74:	00001331 	andeq	r1, r0, r1, lsr r3
     c78:	3f012e13 	svccc	0x00012e13
     c7c:	3a0e0319 	bcc	3818e8 <__bss_end__+0x377bc0>
     c80:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     c84:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     c88:	97184006 	ldrls	r4, [r8, -r6]
     c8c:	13011942 	movwne	r1, #6466	; 0x1942
     c90:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
     c94:	03193f00 	tsteq	r9, #0, 30
     c98:	3b0b3a0e 	blcc	2cf4d8 <__bss_end__+0x2c57b0>
     c9c:	1119270b 	tstne	r9, fp, lsl #14
     ca0:	40061201 	andmi	r1, r6, r1, lsl #4
     ca4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     ca8:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
     cac:	03193f00 	tsteq	r9, #0, 30
     cb0:	3b0b3a0e 	blcc	2cf4f0 <__bss_end__+0x2c57c8>
     cb4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     cb8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     cbc:	97184006 	ldrls	r4, [r8, -r6]
     cc0:	00001942 	andeq	r1, r0, r2, asr #18
     cc4:	03003416 	movweq	r3, #1046	; 0x416
     cc8:	3b0b3a0e 	blcc	2cf508 <__bss_end__+0x2c57e0>
     ccc:	3f13490b 	svccc	0x0013490b
     cd0:	00193c19 	andseq	r3, r9, r9, lsl ip
     cd4:	012e1700 	teqeq	lr, r0, lsl #14
     cd8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     cdc:	0b3b0b3a 	bleq	ec39cc <__bss_end__+0xeb9ca4>
     ce0:	13491927 	movtne	r1, #39207	; 0x9927
     ce4:	1301193c 	movwne	r1, #6460	; 0x193c
     ce8:	05180000 	ldreq	r0, [r8, #-0]
     cec:	00134900 	andseq	r4, r3, r0, lsl #18
     cf0:	00181900 	andseq	r1, r8, r0, lsl #18
     cf4:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
     cf8:	03193f00 	tsteq	r9, #0, 30
     cfc:	3b0b3a0e 	blcc	2cf53c <__bss_end__+0x2c5814>
     d00:	3c19270b 	ldccc	7, cr2, [r9], {11}
     d04:	1b000019 	blne	d70 <_start-0x7290>
     d08:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     d0c:	0b3a0e03 	bleq	e84520 <__bss_end__+0xe7a7f8>
     d10:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     d14:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     d18:	01000000 	mrseq	r0, (UNDEF: 0)
     d1c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     d20:	0e030b13 	vmoveq.32	d3[0], r0
     d24:	01110e1b 	tsteq	r1, fp, lsl lr
     d28:	17100612 			; <UNDEFINED> instruction: 0x17100612
     d2c:	24020000 	strcs	r0, [r2], #-0
     d30:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     d34:	0008030b 	andeq	r0, r8, fp, lsl #6
     d38:	00240300 	eoreq	r0, r4, r0, lsl #6
     d3c:	0b3e0b0b 	bleq	f83970 <__bss_end__+0xf79c48>
     d40:	00000e03 	andeq	r0, r0, r3, lsl #28
     d44:	0b010404 	bleq	41d5c <__bss_end__+0x38034>
     d48:	3b0b3a0b 	blcc	2cf57c <__bss_end__+0x2c5854>
     d4c:	0013010b 	andseq	r0, r3, fp, lsl #2
     d50:	00280500 	eoreq	r0, r8, r0, lsl #10
     d54:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     d58:	16060000 	strne	r0, [r6], -r0
     d5c:	3a0e0300 	bcc	381964 <__bss_end__+0x377c3c>
     d60:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d64:	07000013 	smladeq	r0, r3, r0, r0
     d68:	0e03012e 	adfeqsp	f0, f3, #0.5
     d6c:	0b3b0b3a 	bleq	ec3a5c <__bss_end__+0xeb9d34>
     d70:	13491927 	movtne	r1, #39207	; 0x9927
     d74:	06120111 			; <UNDEFINED> instruction: 0x06120111
     d78:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     d7c:	00130119 	andseq	r0, r3, r9, lsl r1
     d80:	82890800 	addhi	r0, r9, #0, 16
     d84:	01110001 	tsteq	r1, r1
     d88:	00001331 	andeq	r1, r0, r1, lsr r3
     d8c:	3f012e09 	svccc	0x00012e09
     d90:	3a0e0319 	bcc	3819fc <__bss_end__+0x377cd4>
     d94:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     d98:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     d9c:	97184006 	ldrls	r4, [r8, -r6]
     da0:	13011942 	movwne	r1, #6466	; 0x1942
     da4:	890a0000 	stmdbhi	sl, {}	; <UNPREDICTABLE>
     da8:	11010182 	smlabbne	r1, r2, r1, r0
     dac:	01133101 	tsteq	r3, r1, lsl #2
     db0:	0b000013 	bleq	e04 <_start-0x71fc>
     db4:	0001828a 	andeq	r8, r1, sl, lsl #5
     db8:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     dbc:	0c000018 	stceq	0, cr0, [r0], {24}
     dc0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     dc4:	0b3a0e03 	bleq	e845d8 <__bss_end__+0xe7a8b0>
     dc8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     dcc:	01111349 	tsteq	r1, r9, asr #6
     dd0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     dd4:	01194297 			; <UNDEFINED> instruction: 0x01194297
     dd8:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     ddc:	08030005 	stmdaeq	r3, {r0, r2}
     de0:	0b3b0b3a 	bleq	ec3ad0 <__bss_end__+0xeb9da8>
     de4:	17021349 	strne	r1, [r2, -r9, asr #6]
     de8:	890e0000 	stmdbhi	lr, {}	; <UNPREDICTABLE>
     dec:	11010182 	smlabbne	r1, r2, r1, r0
     df0:	00133101 	andseq	r3, r3, r1, lsl #2
     df4:	00340f00 	eorseq	r0, r4, r0, lsl #30
     df8:	0b3a0e03 	bleq	e8460c <__bss_end__+0xe7a8e4>
     dfc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e00:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     e04:	0f100000 	svceq	0x00100000
     e08:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     e0c:	11000013 	tstne	r0, r3, lsl r0
     e10:	13490035 	movtne	r0, #36917	; 0x9035
     e14:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
     e18:	03193f01 	tsteq	r9, #1, 30
     e1c:	3b0b3a0e 	blcc	2cf65c <__bss_end__+0x2c5934>
     e20:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     e24:	01193c13 	tsteq	r9, r3, lsl ip
     e28:	13000013 	movwne	r0, #19
     e2c:	13490005 	movtne	r0, #36869	; 0x9005
     e30:	26140000 	ldrcs	r0, [r4], -r0
     e34:	00134900 	andseq	r4, r3, r0, lsl #18
     e38:	00351500 	eorseq	r1, r5, r0, lsl #10
     e3c:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
     e40:	03193f00 	tsteq	r9, #0, 30
     e44:	3b0b3a0e 	blcc	2cf684 <__bss_end__+0x2c595c>
     e48:	3c19270b 	ldccc	7, cr2, [r9], {11}
     e4c:	17000019 	smladne	r0, r9, r0, r0
     e50:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     e54:	0b3a0e03 	bleq	e84668 <__bss_end__+0xe7a940>
     e58:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     e5c:	1301193c 	movwne	r1, #6460	; 0x193c
     e60:	01000000 	mrseq	r0, (UNDEF: 0)
     e64:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     e68:	0e030b13 	vmoveq.32	d3[0], r0
     e6c:	01110e1b 	tsteq	r1, fp, lsl lr
     e70:	17100612 			; <UNDEFINED> instruction: 0x17100612
     e74:	24020000 	strcs	r0, [r2], #-0
     e78:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     e7c:	000e030b 	andeq	r0, lr, fp, lsl #6
     e80:	00240300 	eoreq	r0, r4, r0, lsl #6
     e84:	0b3e0b0b 	bleq	f83ab8 <__bss_end__+0xf79d90>
     e88:	00000803 	andeq	r0, r0, r3, lsl #16
     e8c:	0b010404 	bleq	41ea4 <__bss_end__+0x3817c>
     e90:	3b0b3a0b 	blcc	2cf6c4 <__bss_end__+0x2c599c>
     e94:	0013010b 	andseq	r0, r3, fp, lsl #2
     e98:	00280500 	eoreq	r0, r8, r0, lsl #10
     e9c:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     ea0:	16060000 	strne	r0, [r6], -r0
     ea4:	3a0e0300 	bcc	381aac <__bss_end__+0x377d84>
     ea8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     eac:	07000013 	smladeq	r0, r3, r0, r0
     eb0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     eb4:	0b3a0e03 	bleq	e846c8 <__bss_end__+0xe7a9a0>
     eb8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     ebc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     ec0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     ec4:	00130119 	andseq	r0, r3, r9, lsl r1
     ec8:	00050800 	andeq	r0, r5, r0, lsl #16
     ecc:	0b3a0803 	bleq	e82ee0 <__bss_end__+0xe791b8>
     ed0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ed4:	00001702 	andeq	r1, r0, r2, lsl #14
     ed8:	03003409 	movweq	r3, #1033	; 0x409
     edc:	3b0b3a0e 	blcc	2cf71c <__bss_end__+0x2c59f4>
     ee0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     ee4:	0a000017 	beq	f48 <_start-0x70b8>
     ee8:	01018289 	smlabbeq	r1, r9, r2, r8
     eec:	13310111 	teqne	r1, #1073741828	; 0x40000004
     ef0:	00001301 	andeq	r1, r0, r1, lsl #6
     ef4:	01828a0b 	orreq	r8, r2, fp, lsl #20
     ef8:	91180200 	tstls	r8, r0, lsl #4
     efc:	00001842 	andeq	r1, r0, r2, asr #16
     f00:	0182890c 	orreq	r8, r2, ip, lsl #18
     f04:	31011101 	tstcc	r1, r1, lsl #2
     f08:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     f0c:	0b0b000f 	bleq	2c0f50 <__bss_end__+0x2b7228>
     f10:	00001349 	andeq	r1, r0, r9, asr #6
     f14:	4900350e 	stmdbmi	r0, {r1, r2, r3, r8, sl, ip, sp}
     f18:	0f000013 	svceq	0x00000013
     f1c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     f20:	0b3a0e03 	bleq	e84734 <__bss_end__+0xe7aa0c>
     f24:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     f28:	13010b20 	movwne	r0, #6944	; 0x1b20
     f2c:	05100000 	ldreq	r0, [r0, #-0]
     f30:	3a080300 	bcc	201b38 <__bss_end__+0x1f7e10>
     f34:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f38:	11000013 	tstne	r0, r3, lsl r0
     f3c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     f40:	0b3b0b3a 	bleq	ec3c30 <__bss_end__+0xeb9f08>
     f44:	00001349 	andeq	r1, r0, r9, asr #6
     f48:	31012e12 	tstcc	r1, r2, lsl lr
     f4c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     f50:	97184006 	ldrls	r4, [r8, -r6]
     f54:	13011942 	movwne	r1, #6466	; 0x1942
     f58:	05130000 	ldreq	r0, [r3, #-0]
     f5c:	02133100 	andseq	r3, r3, #0, 2
     f60:	14000017 	strne	r0, [r0], #-23
     f64:	13310034 	teqne	r1, #52	; 0x34
     f68:	00001702 	andeq	r1, r0, r2, lsl #14
     f6c:	3f012e15 	svccc	0x00012e15
     f70:	3a0e0319 	bcc	381bdc <__bss_end__+0x377eb4>
     f74:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     f78:	11134919 	tstne	r3, r9, lsl r9
     f7c:	40061201 	andmi	r1, r6, r1, lsl #4
     f80:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     f84:	00001301 	andeq	r1, r0, r1, lsl #6
     f88:	03003416 	movweq	r3, #1046	; 0x416
     f8c:	3b0b3a08 	blcc	2cf7b4 <__bss_end__+0x2c5a8c>
     f90:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     f94:	17000017 	smladne	r0, r7, r0, r0
     f98:	00018289 	andeq	r8, r1, r9, lsl #5
     f9c:	13310111 	teqne	r1, #1073741828	; 0x40000004
     fa0:	1d180000 	ldcne	0, cr0, [r8, #-0]
     fa4:	11133101 	tstne	r3, r1, lsl #2
     fa8:	58061201 	stmdapl	r6, {r0, r9, ip}
     fac:	010b590b 	tsteq	fp, fp, lsl #18
     fb0:	19000013 	stmdbne	r0, {r0, r1, r4}
     fb4:	0111010b 	tsteq	r1, fp, lsl #2
     fb8:	00000612 	andeq	r0, r0, r2, lsl r6
     fbc:	31011d1a 	tstcc	r1, sl, lsl sp
     fc0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     fc4:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     fc8:	1b00000b 	blne	ffc <_start-0x7004>
     fcc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     fd0:	0b3b0b3a 	bleq	ec3cc0 <__bss_end__+0xeb9f98>
     fd4:	17021349 	strne	r1, [r2, -r9, asr #6]
     fd8:	341c0000 	ldrcc	r0, [ip], #-0
     fdc:	3a0e0300 	bcc	381be4 <__bss_end__+0x377ebc>
     fe0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fe4:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     fe8:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
     fec:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     ff0:	0b3a0e03 	bleq	e84804 <__bss_end__+0xe7aadc>
     ff4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     ff8:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     ffc:	00001301 	andeq	r1, r0, r1, lsl #6
    1000:	4900051e 	stmdbmi	r0, {r1, r2, r3, r4, r8, sl}
    1004:	1f000013 	svcne	0x00000013
    1008:	13490026 	movtne	r0, #36902	; 0x9026
    100c:	35200000 	strcc	r0, [r0, #-0]!
    1010:	21000000 	mrscs	r0, (UNDEF: 0)
    1014:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1018:	0b3a0e03 	bleq	e8482c <__bss_end__+0xe7ab04>
    101c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1020:	1301193c 	movwne	r1, #6460	; 0x193c
    1024:	01000000 	mrseq	r0, (UNDEF: 0)
    1028:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    102c:	0e030b13 	vmoveq.32	d3[0], r0
    1030:	01110e1b 	tsteq	r1, fp, lsl lr
    1034:	17100612 			; <UNDEFINED> instruction: 0x17100612
    1038:	24020000 	strcs	r0, [r2], #-0
    103c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1040:	000e030b 	andeq	r0, lr, fp, lsl #6
    1044:	00240300 	eoreq	r0, r4, r0, lsl #6
    1048:	0b3e0b0b 	bleq	f83c7c <__bss_end__+0xf79f54>
    104c:	00000803 	andeq	r0, r0, r3, lsl #16
    1050:	0b000f04 	bleq	4c68 <_start-0x3398>
    1054:	0500000b 	streq	r0, [r0, #-11]
    1058:	0b0b000f 	bleq	2c109c <__bss_end__+0x2b7374>
    105c:	00001349 	andeq	r1, r0, r9, asr #6
    1060:	03001606 	movweq	r1, #1542	; 0x606
    1064:	3b0b3a0e 	blcc	2cf8a4 <__bss_end__+0x2c5b7c>
    1068:	0013490b 	andseq	r4, r3, fp, lsl #18
    106c:	012e0700 	teqeq	lr, r0, lsl #14
    1070:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1074:	0b3b0b3a 	bleq	ec3d64 <__bss_end__+0xeba03c>
    1078:	13491927 	movtne	r1, #39207	; 0x9927
    107c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1080:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1084:	08000019 	stmdaeq	r0, {r0, r3, r4}
    1088:	08030005 	stmdaeq	r3, {r0, r2}
    108c:	0b3b0b3a 	bleq	ec3d7c <__bss_end__+0xeba054>
    1090:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1094:	05090000 	streq	r0, [r9, #-0]
    1098:	3a080300 	bcc	201ca0 <__bss_end__+0x1f7f78>
    109c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    10a0:	00170213 	andseq	r0, r7, r3, lsl r2
    10a4:	00340a00 	eorseq	r0, r4, r0, lsl #20
    10a8:	0b3a0803 	bleq	e830bc <__bss_end__+0xe79394>
    10ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    10b0:	00001702 	andeq	r1, r0, r2, lsl #14
    10b4:	0300340b 	movweq	r3, #1035	; 0x40b
    10b8:	3b0b3a08 	blcc	2cf8e0 <__bss_end__+0x2c5bb8>
    10bc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    10c0:	00000018 	andeq	r0, r0, r8, lsl r0
    10c4:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    10c8:	030b130e 	movweq	r1, #45838	; 0xb30e
    10cc:	110e1b0e 	tstne	lr, lr, lsl #22
    10d0:	10061201 	andne	r1, r6, r1, lsl #4
    10d4:	02000017 	andeq	r0, r0, #23
    10d8:	0b0b0024 	bleq	2c1170 <__bss_end__+0x2b7448>
    10dc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    10e0:	24030000 	strcs	r0, [r3], #-0
    10e4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    10e8:	000e030b 	andeq	r0, lr, fp, lsl #6
    10ec:	012e0400 	teqeq	lr, r0, lsl #8
    10f0:	0b3a0e03 	bleq	e84904 <__bss_end__+0xe7abdc>
    10f4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    10f8:	01111349 	tsteq	r1, r9, asr #6
    10fc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1100:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1104:	05000013 	streq	r0, [r0, #-19]
    1108:	08030005 	stmdaeq	r3, {r0, r2}
    110c:	0b3b0b3a 	bleq	ec3dfc <__bss_end__+0xeba0d4>
    1110:	17021349 	strne	r1, [r2, -r9, asr #6]
    1114:	89060000 	stmdbhi	r6, {}	; <UNPREDICTABLE>
    1118:	11010182 	smlabbne	r1, r2, r1, r0
    111c:	00133101 	andseq	r3, r3, r1, lsl #2
    1120:	828a0700 	addhi	r0, sl, #0, 14
    1124:	18020001 	stmdane	r2, {r0}
    1128:	00184291 	mulseq	r8, r1, r2
    112c:	01150800 	tsteq	r5, r0, lsl #16
    1130:	13491927 	movtne	r1, #39207	; 0x9927
    1134:	00001301 	andeq	r1, r0, r1, lsl #6
    1138:	49000509 	stmdbmi	r0, {r0, r3, r8, sl}
    113c:	0a000013 	beq	1190 <_start-0x6e70>
    1140:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1144:	0b3b0b3a 	bleq	ec3e34 <__bss_end__+0xeba10c>
    1148:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    114c:	00001802 	andeq	r1, r0, r2, lsl #16
    1150:	0b000f0b 	bleq	4d84 <_start-0x327c>
    1154:	0013490b 	andseq	r4, r3, fp, lsl #18
    1158:	012e0c00 	teqeq	lr, r0, lsl #24
    115c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1160:	0b3b0b3a 	bleq	ec3e50 <__bss_end__+0xeba128>
    1164:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    1168:	Address 0x0000000000001168 is out of bounds.


Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	00000004 	andeq	r0, r0, r4
       4:	00000014 	andeq	r0, r0, r4, lsl r0
       8:	9f300002 	svcls	0x00300002
       c:	00000014 	andeq	r0, r0, r4, lsl r0
      10:	00000028 	andeq	r0, r0, r8, lsr #32
      14:	34530001 	ldrbcc	r0, [r3], #-1
      18:	4c000000 	stcmi	0, cr0, [r0], {-0}
      1c:	01000000 	mrseq	r0, (UNDEF: 0)
      20:	00005300 	andeq	r5, r0, r0, lsl #6
      24:	00000000 	andeq	r0, r0, r0
      28:	00780000 	rsbseq	r0, r8, r0
      2c:	00940000 	addseq	r0, r4, r0
      30:	00010000 	andeq	r0, r1, r0
      34:	00009450 	andeq	r9, r0, r0, asr r4
      38:	0000d400 	andeq	sp, r0, r0, lsl #8
      3c:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
      48:	00000080 	andeq	r0, r0, r0, lsl #1
      4c:	00000094 	muleq	r0, r4, r0
      50:	9f300002 	svcls	0x00300002
      54:	00000094 	muleq	r0, r4, r0
      58:	000000d4 	ldrdeq	r0, [r0], -r4
      5c:	00540001 	subseq	r0, r4, r1
      60:	00000000 	andeq	r0, r0, r0
      64:	ec000000 	stc	0, cr0, [r0], {-0}
      68:	fc000000 	stc2	0, cr0, [r0], {-0}
      6c:	02000000 	andeq	r0, r0, #0
      70:	fc9f3000 	ldc2	0, cr3, [pc], {0}
      74:	20000000 	andcs	r0, r0, r0
      78:	01000001 	tsteq	r0, r1
      7c:	00005300 	andeq	r5, r0, r0, lsl #6
      80:	00000000 	andeq	r0, r0, r0
      84:	01200000 	teqeq	r0, r0
      88:	012b0000 	teqeq	fp, r0
      8c:	00010000 	andeq	r0, r1, r0
      90:	00012b50 	andeq	r2, r1, r0, asr fp
      94:	00019000 	andeq	r9, r1, r0
      98:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
      a4:	00000134 	andeq	r0, r0, r4, lsr r1
      a8:	00000140 	andeq	r0, r0, r0, asr #2
      ac:	00500001 	subseq	r0, r0, r1
      b0:	00000000 	andeq	r0, r0, r0
      b4:	e0000000 	and	r0, r0, r0
      b8:	f8000001 			; <UNDEFINED> instruction: 0xf8000001
      bc:	02000001 	andeq	r0, r0, #1
      c0:	f89f3000 			; <UNDEFINED> instruction: 0xf89f3000
      c4:	64000001 	strvs	r0, [r0], #-1
      c8:	01000002 	tsteq	r0, r2
      cc:	00005400 	andeq	r5, r0, r0, lsl #8
      d0:	00000000 	andeq	r0, r0, r0
      d4:	00300000 	eorseq	r0, r0, r0
      d8:	003c0000 	eorseq	r0, ip, r0
      dc:	00020000 	andeq	r0, r2, r0
      e0:	003c9f30 	eorseq	r9, ip, r0, lsr pc
      e4:	00680000 	rsbeq	r0, r8, r0
      e8:	00010000 	andeq	r0, r1, r0
      ec:	00000053 	andeq	r0, r0, r3, asr r0
      f0:	00000000 	andeq	r0, r0, r0
      f4:	00006800 	andeq	r6, r0, r0, lsl #16
      f8:	00008000 	andeq	r8, r0, r0
      fc:	50000100 	andpl	r0, r0, r0, lsl #2
     100:	00000080 	andeq	r0, r0, r0, lsl #1
     104:	0000008f 	andeq	r0, r0, pc, lsl #1
     108:	6c910002 	ldcvs	0, cr0, [r1], {2}
     10c:	0000008f 	andeq	r0, r0, pc, lsl #1
     110:	000000a4 	andeq	r0, r0, r4, lsr #1
     114:	01f30004 	mvnseq	r0, r4
     118:	00009f50 	andeq	r9, r0, r0, asr pc
     11c:	00000000 	andeq	r0, r0, r0
     120:	00a40000 	adceq	r0, r4, r0
     124:	00bc0000 	adcseq	r0, ip, r0
     128:	00010000 	andeq	r0, r1, r0
     12c:	0000bc50 	andeq	fp, r0, r0, asr ip
     130:	0000cb00 	andeq	ip, r0, r0, lsl #22
     134:	91000200 	mrsls	r0, R8_usr
     138:	0000cb6c 	andeq	ip, r0, ip, ror #22
     13c:	0000e000 	andeq	lr, r0, r0
     140:	f3000400 	vshl.u8	d0, d0, d0
     144:	009f5001 	addseq	r5, pc, r1
     148:	00000000 	andeq	r0, r0, r0
     14c:	e0000000 	and	r0, r0, r0
     150:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
     154:	01000000 	mrseq	r0, (UNDEF: 0)
     158:	00f85000 	rscseq	r5, r8, r0
     15c:	01070000 	mrseq	r0, (UNDEF: 7)
     160:	00020000 	andeq	r0, r2, r0
     164:	01076c91 			; <UNDEFINED> instruction: 0x01076c91
     168:	011c0000 	tsteq	ip, r0
     16c:	00040000 	andeq	r0, r4, r0
     170:	9f5001f3 	svcls	0x005001f3
	...
     17c:	0000011c 	andeq	r0, r0, ip, lsl r1
     180:	00000134 	andeq	r0, r0, r4, lsr r1
     184:	34500001 	ldrbcc	r0, [r0], #-1
     188:	43000001 	movwmi	r0, #1
     18c:	02000001 	andeq	r0, r0, #1
     190:	436c9100 	cmnmi	ip, #0, 2
     194:	58000001 	stmdapl	r0, {r0}
     198:	04000001 	streq	r0, [r0], #-1
     19c:	5001f300 	andpl	pc, r1, r0, lsl #6
     1a0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     1a4:	00000000 	andeq	r0, r0, r0
     1a8:	00015800 	andeq	r5, r1, r0, lsl #16
     1ac:	00017000 	andeq	r7, r1, r0
     1b0:	50000100 	andpl	r0, r0, r0, lsl #2
     1b4:	00000170 	andeq	r0, r0, r0, ror r1
     1b8:	0000017f 	andeq	r0, r0, pc, ror r1
     1bc:	6c910002 	ldcvs	0, cr0, [r1], {2}
     1c0:	0000017f 	andeq	r0, r0, pc, ror r1
     1c4:	00000194 	muleq	r0, r4, r1
     1c8:	01f30004 	mvnseq	r0, r4
     1cc:	00009f50 	andeq	r9, r0, r0, asr pc
     1d0:	00000000 	andeq	r0, r0, r0
     1d4:	01940000 	orrseq	r0, r4, r0
     1d8:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
     1dc:	00010000 	andeq	r0, r1, r0
     1e0:	0001ac50 	andeq	sl, r1, r0, asr ip
     1e4:	0001bb00 	andeq	fp, r1, r0, lsl #22
     1e8:	91000200 	mrsls	r0, R8_usr
     1ec:	0001bb6c 	andeq	fp, r1, ip, ror #22
     1f0:	0001d000 	andeq	sp, r1, r0
     1f4:	f3000400 	vshl.u8	d0, d0, d0
     1f8:	009f5001 	addseq	r5, pc, r1
     1fc:	00000000 	andeq	r0, r0, r0
     200:	1c000000 	stcne	0, cr0, [r0], {-0}
     204:	27000000 	strcs	r0, [r0, -r0]
     208:	01000000 	mrseq	r0, (UNDEF: 0)
     20c:	00275000 	eoreq	r5, r7, r0
     210:	005c0000 	subseq	r0, ip, r0
     214:	00010000 	andeq	r0, r1, r0
     218:	00000054 	andeq	r0, r0, r4, asr r0
     21c:	00000000 	andeq	r0, r0, r0
     220:	00002c00 	andeq	r2, r0, r0, lsl #24
     224:	00003800 	andeq	r3, r0, r0, lsl #16
     228:	50000100 	andpl	r0, r0, r0, lsl #2
     22c:	00000038 	andeq	r0, r0, r8, lsr r0
     230:	00000048 	andeq	r0, r0, r8, asr #32
     234:	48550001 	ldmdami	r5, {r0}^
     238:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     23c:	01000000 	mrseq	r0, (UNDEF: 0)
     240:	00005000 	andeq	r5, r0, r0
	...
     24c:	00100000 	andseq	r0, r0, r0
     250:	00010000 	andeq	r0, r1, r0
     254:	00001050 	andeq	r1, r0, r0, asr r0
     258:	00003400 	andeq	r3, r0, r0, lsl #8
     25c:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     26c:	00000004 	andeq	r0, r0, r4
     270:	04500001 	ldrbeq	r0, [r0], #-1
     274:	0c000000 	stceq	0, cr0, [r0], {-0}
     278:	03000000 	movweq	r0, #0
     27c:	9f307000 	svcls	0x00307000
     280:	0000000c 	andeq	r0, r0, ip
     284:	00000014 	andeq	r0, r0, r4, lsl r0
     288:	01f30004 	mvnseq	r0, r4
     28c:	00009f50 	andeq	r9, r0, r0, asr pc
     290:	00000000 	andeq	r0, r0, r0
     294:	00140000 	andseq	r0, r4, r0
     298:	00200000 	eoreq	r0, r0, r0
     29c:	00010000 	andeq	r0, r1, r0
     2a0:	00002050 	andeq	r2, r0, r0, asr r0
     2a4:	00002c00 	andeq	r2, r0, r0, lsl #24
     2a8:	70000300 	andvc	r0, r0, r0, lsl #6
     2ac:	002c9f01 	eoreq	r9, ip, r1, lsl #30
     2b0:	00400000 	subeq	r0, r0, r0
     2b4:	00010000 	andeq	r0, r1, r0
     2b8:	00000050 	andeq	r0, r0, r0, asr r0
     2bc:	00000000 	andeq	r0, r0, r0
     2c0:	00001400 	andeq	r1, r0, r0, lsl #8
     2c4:	00001800 	andeq	r1, r0, r0, lsl #16
     2c8:	51000100 	mrspl	r0, (UNDEF: 16)
     2cc:	00000018 	andeq	r0, r0, r8, lsl r0
     2d0:	00000040 	andeq	r0, r0, r0, asr #32
     2d4:	01f30004 	mvnseq	r0, r4
     2d8:	00009f51 	andeq	r9, r0, r1, asr pc
     2dc:	00000000 	andeq	r0, r0, r0
     2e0:	00400000 	subeq	r0, r0, r0
     2e4:	00600000 	rsbeq	r0, r0, r0
     2e8:	00010000 	andeq	r0, r1, r0
     2ec:	00006050 	andeq	r6, r0, r0, asr r0
     2f0:	00006c00 	andeq	r6, r0, r0, lsl #24
     2f4:	71000300 	mrsvc	r0, LR_irq
     2f8:	006c9f01 	rsbeq	r9, ip, r1, lsl #30
     2fc:	00740000 	rsbseq	r0, r4, r0
     300:	00010000 	andeq	r0, r1, r0
     304:	00007451 	andeq	r7, r0, r1, asr r4
     308:	00008000 	andeq	r8, r0, r0
     30c:	71000300 	mrsvc	r0, LR_irq
     310:	00009f01 	andeq	r9, r0, r1, lsl #30
     314:	00000000 	andeq	r0, r0, r0
     318:	00400000 	subeq	r0, r0, r0
     31c:	00500000 	subseq	r0, r0, r0
     320:	00010000 	andeq	r0, r1, r0
     324:	00005051 	andeq	r5, r0, r1, asr r0
     328:	00008000 	andeq	r8, r0, r0
     32c:	f3000400 	vshl.u8	d0, d0, d0
     330:	009f5101 	addseq	r5, pc, r1, lsl #2
     334:	00000000 	andeq	r0, r0, r0
     338:	40000000 	andmi	r0, r0, r0
     33c:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     340:	01000000 	mrseq	r0, (UNDEF: 0)
     344:	00585200 	subseq	r5, r8, r0, lsl #4
     348:	00640000 	rsbeq	r0, r4, r0
     34c:	00010000 	andeq	r0, r1, r0
     350:	00006452 	andeq	r6, r0, r2, asr r4
     354:	00006800 	andeq	r6, r0, r0, lsl #16
     358:	72000300 	andvc	r0, r0, #0, 6
     35c:	00689f01 	rsbeq	r9, r8, r1, lsl #30
     360:	00800000 	addeq	r0, r0, r0
     364:	00010000 	andeq	r0, r1, r0
     368:	00000052 	andeq	r0, r0, r2, asr r0
     36c:	00000000 	andeq	r0, r0, r0
     370:	00004000 	andeq	r4, r0, r0
     374:	00005400 	andeq	r5, r0, r0, lsl #8
     378:	53000100 	movwpl	r0, #256	; 0x100
     37c:	00000054 	andeq	r0, r0, r4, asr r0
     380:	00000078 	andeq	r0, r0, r8, ror r0
     384:	00530001 	subseq	r0, r3, r1
     388:	00000000 	andeq	r0, r0, r0
     38c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     390:	60000000 	andvs	r0, r0, r0
     394:	01000000 	mrseq	r0, (UNDEF: 0)
     398:	00605c00 	rsbeq	r5, r0, r0, lsl #24
     39c:	00800000 	addeq	r0, r0, r0
     3a0:	000a0000 	andeq	r0, sl, r0
     3a4:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
     3a8:	231c5301 	tstcs	ip, #67108864	; 0x4000000
     3ac:	00009f01 	andeq	r9, r0, r1, lsl #30
     3b0:	00000000 	andeq	r0, r0, r0
     3b4:	00800000 	addeq	r0, r0, r0
     3b8:	00a40000 	adceq	r0, r4, r0
     3bc:	00010000 	andeq	r0, r1, r0
     3c0:	0000a450 	andeq	sl, r0, r0, asr r4
     3c4:	00011800 	andeq	r1, r1, r0, lsl #16
     3c8:	70000300 	andvc	r0, r0, r0, lsl #6
     3cc:	01189f02 	tsteq	r8, r2, lsl #30
     3d0:	02180000 	andseq	r0, r8, #0
     3d4:	00040000 	andeq	r0, r4, r0
     3d8:	9f5001f3 	svcls	0x005001f3
	...
     3e4:	00000080 	andeq	r0, r0, r0, lsl #1
     3e8:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     3ec:	f0510001 			; <UNDEFINED> instruction: 0xf0510001
     3f0:	60000000 	andvs	r0, r0, r0
     3f4:	01000001 	tsteq	r0, r1
     3f8:	01605500 	cmneq	r0, r0, lsl #10
     3fc:	01680000 	cmneq	r8, r0
     400:	00010000 	andeq	r0, r1, r0
     404:	00016851 	andeq	r6, r1, r1, asr r8
     408:	00018800 	andeq	r8, r1, r0, lsl #16
     40c:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     410:	00000188 	andeq	r0, r0, r8, lsl #3
     414:	0000019c 	muleq	r0, ip, r1
     418:	9c510001 	mrrcls	0, 0, r0, r1, cr1
     41c:	bc000001 	stclt	0, cr0, [r0], {1}
     420:	01000001 	tsteq	r0, r1
     424:	01bc5500 			; <UNDEFINED> instruction: 0x01bc5500
     428:	01c40000 	biceq	r0, r4, r0
     42c:	00010000 	andeq	r0, r1, r0
     430:	0001c451 	andeq	ip, r1, r1, asr r4
     434:	0001fc00 	andeq	pc, r1, r0, lsl #24
     438:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     43c:	000001fc 	strdeq	r0, [r0], -ip
     440:	00000218 	andeq	r0, r0, r8, lsl r2
     444:	01f30004 	mvnseq	r0, r4
     448:	00009f51 	andeq	r9, r0, r1, asr pc
     44c:	00000000 	andeq	r0, r0, r0
     450:	00800000 	addeq	r0, r0, r0
     454:	00940000 	addseq	r0, r4, r0
     458:	00010000 	andeq	r0, r1, r0
     45c:	00009452 	andeq	r9, r0, r2, asr r4
     460:	0001fc00 	andeq	pc, r1, r0, lsl #24
     464:	54000100 	strpl	r0, [r0], #-256	; 0x100
     468:	000001fc 	strdeq	r0, [r0], -ip
     46c:	00000218 	andeq	r0, r0, r8, lsl r2
     470:	01f30004 	mvnseq	r0, r4
     474:	00009f52 	andeq	r9, r0, r2, asr pc
     478:	00000000 	andeq	r0, r0, r0
     47c:	00800000 	addeq	r0, r0, r0
     480:	01000000 	mrseq	r0, (UNDEF: 0)
     484:	00010000 	andeq	r0, r1, r0
     488:	00010453 	andeq	r0, r1, r3, asr r4
     48c:	00010800 	andeq	r0, r1, r0, lsl #16
     490:	53000100 	movwpl	r0, #256	; 0x100
     494:	00000160 	andeq	r0, r0, r0, ror #2
     498:	00000168 	andeq	r0, r0, r8, ror #2
     49c:	68530001 	ldmdavs	r3, {r0}^
     4a0:	88000001 	stmdahi	r0, {r0}
     4a4:	04000001 	streq	r0, [r0], #-1
     4a8:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
     4ac:	0001889f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
     4b0:	00019000 	andeq	r9, r1, r0
     4b4:	53000100 	movwpl	r0, #256	; 0x100
     4b8:	00000190 	muleq	r0, r0, r1
     4bc:	00000194 	muleq	r0, r4, r1
     4c0:	945c0001 	ldrbls	r0, [ip], #-1
     4c4:	9c000001 	stcls	0, cr0, [r0], {1}
     4c8:	01000001 	tsteq	r0, r1
     4cc:	019c5300 	orrseq	r5, ip, r0, lsl #6
     4d0:	01bc0000 			; <UNDEFINED> instruction: 0x01bc0000
     4d4:	00040000 	andeq	r0, r4, r0
     4d8:	9f5301f3 	svcls	0x005301f3
     4dc:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     4e0:	000001cc 	andeq	r0, r0, ip, asr #3
     4e4:	cc530001 	mrrcgt	0, 0, r0, r3, cr1
     4e8:	cf000001 	svcgt	0x00000001
     4ec:	01000001 	tsteq	r0, r1
     4f0:	01cf5c00 	biceq	r5, pc, r0, lsl #24
     4f4:	01d40000 	bicseq	r0, r4, r0
     4f8:	00040000 	andeq	r0, r4, r0
     4fc:	9f5301f3 	svcls	0x005301f3
	...
     508:	00000080 	andeq	r0, r0, r0, lsl #1
     50c:	0000009c 	muleq	r0, ip, r0
     510:	00910002 	addseq	r0, r1, r2
     514:	0000009c 	muleq	r0, ip, r0
     518:	000001c8 	andeq	r0, r0, r8, asr #3
     51c:	d4520001 	ldrble	r0, [r2], #-1
     520:	df000001 	svcle	0x00000001
     524:	01000001 	tsteq	r0, r1
     528:	00005200 	andeq	r5, r0, r0, lsl #4
     52c:	00000000 	andeq	r0, r0, r0
     530:	009c0000 	addseq	r0, ip, r0
     534:	01180000 	tsteq	r8, r0
     538:	00010000 	andeq	r0, r1, r0
     53c:	0001185d 	andeq	r1, r1, sp, asr r8
     540:	00011c00 	andeq	r1, r1, r0, lsl #24
     544:	53000100 	movwpl	r0, #256	; 0x100
     548:	0000011c 	andeq	r0, r0, ip, lsl r1
     54c:	00000120 	andeq	r0, r0, r0, lsr #2
     550:	20510001 	subscs	r0, r1, r1
     554:	60000001 	andvs	r0, r0, r1
     558:	01000001 	tsteq	r0, r1
     55c:	01605300 	cmneq	r0, r0, lsl #6
     560:	01680000 	cmneq	r8, r0
     564:	00010000 	andeq	r0, r1, r0
     568:	0001685d 	andeq	r6, r1, sp, asr r8
     56c:	00016c00 	andeq	r6, r1, r0, lsl #24
     570:	5e000100 	adfpls	f0, f0, f0
     574:	0000016c 	andeq	r0, r0, ip, ror #2
     578:	00000188 	andeq	r0, r0, r8, lsl #3
     57c:	88530001 	ldmdahi	r3, {r0}^
     580:	90000001 	andls	r0, r0, r1
     584:	04000001 	streq	r0, [r0], #-1
     588:	7fa19100 	svcvc	0x00a19100
     58c:	0001909f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
     590:	00019400 	andeq	r9, r1, r0, lsl #8
     594:	53000100 	movwpl	r0, #256	; 0x100
     598:	00000194 	muleq	r0, r4, r1
     59c:	0000019c 	muleq	r0, ip, r1
     5a0:	9c5d0001 	mrrcls	0, 0, r0, sp, cr1
     5a4:	a0000001 	andge	r0, r0, r1
     5a8:	01000001 	tsteq	r0, r1
     5ac:	01a05e00 	lsleq	r5, r0, #28
     5b0:	01bc0000 			; <UNDEFINED> instruction: 0x01bc0000
     5b4:	00010000 	andeq	r0, r1, r0
     5b8:	0001bc53 	andeq	fp, r1, r3, asr ip
     5bc:	0001d400 	andeq	sp, r1, r0, lsl #8
     5c0:	5d000100 	stfpls	f0, [r0, #-0]
     5c4:	000001d4 	ldrdeq	r0, [r0], -r4
     5c8:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     5cc:	00530001 	subseq	r0, r3, r1
     5d0:	00000000 	andeq	r0, r0, r0
     5d4:	a0000000 	andge	r0, r0, r0
     5d8:	ec000000 	stc	0, cr0, [r0], {-0}
     5dc:	01000000 	mrseq	r0, (UNDEF: 0)
     5e0:	00ec5c00 	rsceq	r5, ip, r0, lsl #24
     5e4:	01000000 	mrseq	r0, (UNDEF: 0)
     5e8:	00010000 	andeq	r0, r1, r0
     5ec:	00010053 	andeq	r0, r1, r3, asr r0
     5f0:	00010400 	andeq	r0, r1, r0, lsl #8
     5f4:	5c000100 	stfpls	f0, [r0], {-0}
     5f8:	00000104 	andeq	r0, r0, r4, lsl #2
     5fc:	00000108 	andeq	r0, r0, r8, lsl #2
     600:	08530001 	ldmdaeq	r3, {r0}^
     604:	18000001 	stmdane	r0, {r0}
     608:	01000001 	tsteq	r0, r1
     60c:	01185c00 	tsteq	r8, r0, lsl #24
     610:	011c0000 	tsteq	ip, r0
     614:	00010000 	andeq	r0, r1, r0
     618:	00011c50 	andeq	r1, r1, r0, asr ip
     61c:	00013c00 	andeq	r3, r1, r0, lsl #24
     620:	5c000100 	stfpls	f0, [r0], {-0}
     624:	00000144 	andeq	r0, r0, r4, asr #2
     628:	00000158 	andeq	r0, r0, r8, asr r1
     62c:	58500001 	ldmdapl	r0, {r0}^
     630:	60000001 	andvs	r0, r0, r1
     634:	01000001 	tsteq	r0, r1
     638:	01605c00 	cmneq	r0, r0, lsl #24
     63c:	01680000 	cmneq	r8, r0
     640:	00010000 	andeq	r0, r1, r0
     644:	00016853 	andeq	r6, r1, r3, asr r8
     648:	00017800 	andeq	r7, r1, r0, lsl #16
     64c:	5c000100 	stfpls	f0, [r0], {-0}
     650:	00000178 	andeq	r0, r0, r8, ror r1
     654:	00000180 	andeq	r0, r0, r0, lsl #3
     658:	007c0005 	rsbseq	r0, ip, r5
     65c:	809f2534 	addshi	r2, pc, r4, lsr r5	; <UNPREDICTABLE>
     660:	88000001 	stmdahi	r0, {r0}
     664:	01000001 	tsteq	r0, r1
     668:	01885c00 	orreq	r5, r8, r0, lsl #24
     66c:	01900000 	orrseq	r0, r0, r0
     670:	00010000 	andeq	r0, r1, r0
     674:	00019053 	andeq	r9, r1, r3, asr r0
     678:	00019400 	andeq	r9, r1, r0, lsl #8
     67c:	5c000100 	stfpls	f0, [r0], {-0}
     680:	00000194 	muleq	r0, r4, r1
     684:	0000019c 	muleq	r0, ip, r1
     688:	9c530001 	mrrcls	0, 0, r0, r3, cr1
     68c:	ac000001 	stcge	0, cr0, [r0], {1}
     690:	01000001 	tsteq	r0, r1
     694:	01ac5c00 			; <UNDEFINED> instruction: 0x01ac5c00
     698:	01b40000 			; <UNDEFINED> instruction: 0x01b40000
     69c:	00050000 	andeq	r0, r5, r0
     6a0:	2531007c 	ldrcs	r0, [r1, #-124]!	; 0x7c
     6a4:	0001b49f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
     6a8:	0001bc00 	andeq	fp, r1, r0, lsl #24
     6ac:	5c000100 	stfpls	f0, [r0], {-0}
     6b0:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     6b4:	000001cc 	andeq	r0, r0, ip, asr #3
     6b8:	cc530001 	mrrcgt	0, 0, r0, r3, cr1
     6bc:	cf000001 	svcgt	0x00000001
     6c0:	01000001 	tsteq	r0, r1
     6c4:	01cf5c00 	biceq	r5, pc, r0, lsl #24
     6c8:	01d40000 	bicseq	r0, r4, r0
     6cc:	00040000 	andeq	r0, r4, r0
     6d0:	9f5301f3 	svcls	0x005301f3
     6d4:	000001d4 	ldrdeq	r0, [r0], -r4
     6d8:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     6dc:	005c0001 	subseq	r0, ip, r1
     6e0:	00000000 	andeq	r0, r0, r0
     6e4:	ec000000 	stc	0, cr0, [r0], {-0}
     6e8:	fc000000 	stc2	0, cr0, [r0], {-0}
     6ec:	02000000 	andeq	r0, r0, #0
     6f0:	fc9f3000 	ldc2	0, cr3, [pc], {0}
     6f4:	04000000 	streq	r0, [r0], #-0
     6f8:	02000001 	andeq	r0, r0, #1
     6fc:	049f3100 	ldreq	r3, [pc], #256	; 704 <_start-0x78fc>
     700:	08000001 	stmdaeq	r0, {r0}
     704:	02000001 	andeq	r0, r0, #1
     708:	009f3000 	addseq	r3, pc, r0
     70c:	00000000 	andeq	r0, r0, r0
     710:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     714:	28000002 	stmdacs	r0, {r1}
     718:	01000002 	tsteq	r0, r2
     71c:	02285000 	eoreq	r5, r8, #0
     720:	023c0000 	eorseq	r0, ip, #0
     724:	00040000 	andeq	r0, r4, r0
     728:	9f5001f3 	svcls	0x005001f3
     72c:	0000023c 	andeq	r0, r0, ip, lsr r2
     730:	00000268 	andeq	r0, r0, r8, ror #4
     734:	00500001 	subseq	r0, r0, r1
     738:	00000000 	andeq	r0, r0, r0
     73c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     740:	2c000002 	stccs	0, cr0, [r0], {2}
     744:	01000002 	tsteq	r0, r2
     748:	022c5100 	eoreq	r5, ip, #0, 2
     74c:	023c0000 	eorseq	r0, ip, #0
     750:	00040000 	andeq	r0, r4, r0
     754:	9f5101f3 	svcls	0x005101f3
     758:	0000023c 	andeq	r0, r0, ip, lsr r2
     75c:	00000268 	andeq	r0, r0, r8, ror #4
     760:	00510001 	subseq	r0, r1, r1
     764:	00000000 	andeq	r0, r0, r0
     768:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     76c:	90000002 	andls	r0, r0, r2
     770:	01000002 	tsteq	r0, r2
     774:	02905000 	addseq	r5, r0, #0
     778:	04dc0000 	ldrbeq	r0, [ip], #0
     77c:	00010000 	andeq	r0, r1, r0
     780:	0004dc5b 	andeq	sp, r4, fp, asr ip
     784:	0004f000 	andeq	pc, r4, r0
     788:	f3000400 	vshl.u8	d0, d0, d0
     78c:	009f5001 	addseq	r5, pc, r1
     790:	00000000 	andeq	r0, r0, r0
     794:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     798:	7c000002 	stcvc	0, cr0, [r0], {2}
     79c:	01000002 	tsteq	r0, r2
     7a0:	027c5100 	rsbseq	r5, ip, #0, 2
     7a4:	02900000 	addseq	r0, r0, #0
     7a8:	00030000 	andeq	r0, r3, r0
     7ac:	909f0171 	addsls	r0, pc, r1, ror r1	; <UNPREDICTABLE>
     7b0:	f0000002 			; <UNDEFINED> instruction: 0xf0000002
     7b4:	04000004 	streq	r0, [r0], #-4
     7b8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     7bc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     7c0:	00000000 	andeq	r0, r0, r0
     7c4:	00026800 	andeq	r6, r2, r0, lsl #16
     7c8:	00029800 	andeq	r9, r2, r0, lsl #16
     7cc:	52000100 	andpl	r0, r0, #0, 2
     7d0:	00000298 	muleq	r0, r8, r2
     7d4:	000002c0 	andeq	r0, r0, r0, asr #5
     7d8:	c0520001 	subsgt	r0, r2, r1
     7dc:	8c000002 	stchi	0, cr0, [r0], {2}
     7e0:	01000004 	tsteq	r0, r4
     7e4:	048c5600 	streq	r5, [ip], #1536	; 0x600
     7e8:	04f00000 	ldrbteq	r0, [r0], #0
     7ec:	00010000 	andeq	r0, r1, r0
     7f0:	00000052 	andeq	r0, r0, r2, asr r0
     7f4:	00000000 	andeq	r0, r0, r0
     7f8:	00026800 	andeq	r6, r2, r0, lsl #16
     7fc:	00028400 	andeq	r8, r2, r0, lsl #8
     800:	53000100 	movwpl	r0, #256	; 0x100
	...
     80c:	00000278 	andeq	r0, r0, r8, ror r2
     810:	00000290 	muleq	r0, r0, r2
     814:	90500001 	subsls	r0, r0, r1
     818:	94000002 	strls	r0, [r0], #-2
     81c:	01000002 	tsteq	r0, r2
     820:	02945400 	addseq	r5, r4, #0, 8
     824:	02a00000 	adceq	r0, r0, #0
     828:	00030000 	andeq	r0, r3, r0
     82c:	a09f0174 	addsge	r0, pc, r4, ror r1	; <UNPREDICTABLE>
     830:	ac000002 	stcge	0, cr0, [r0], {2}
     834:	01000002 	tsteq	r0, r2
     838:	02ac5400 	adceq	r5, ip, #0, 8
     83c:	02b80000 	adcseq	r0, r8, #0
     840:	00030000 	andeq	r0, r3, r0
     844:	b89f0174 	ldmlt	pc, {r2, r4, r5, r6, r8}	; <UNPREDICTABLE>
     848:	90000002 	andls	r0, r0, r2
     84c:	01000004 	tsteq	r0, r4
     850:	04905400 	ldreq	r5, [r0], #1024	; 0x400
     854:	049c0000 	ldreq	r0, [ip], #0
     858:	00030000 	andeq	r0, r3, r0
     85c:	9c9f0174 	ldflss	f0, [pc], {116}	; 0x74
     860:	c8000004 	stmdagt	r0, {r2}
     864:	01000004 	tsteq	r0, r4
     868:	04c85400 	strbeq	r5, [r8], #1024	; 0x400
     86c:	04d40000 	ldrbeq	r0, [r4], #0
     870:	00010000 	andeq	r0, r1, r0
     874:	0004d450 	andeq	sp, r4, r0, asr r4
     878:	0004dc00 	andeq	sp, r4, r0, lsl #24
     87c:	74000300 	strvc	r0, [r0], #-768	; 0x300
     880:	00009f01 	andeq	r9, r0, r1, lsl #30
     884:	00000000 	andeq	r0, r0, r0
     888:	02800000 	addeq	r0, r0, #0
     88c:	04dc0000 	ldrbeq	r0, [ip], #0
     890:	00010000 	andeq	r0, r1, r0
     894:	0004dc58 	andeq	sp, r4, r8, asr ip
     898:	0004f000 	andeq	pc, r4, r0
     89c:	f3000a00 	vpmax.u8	d0, d0, d0
     8a0:	01f35101 	mvnseq	r5, r1, lsl #2
     8a4:	1c312250 	lfmne	f2, 4, [r1], #-320	; 0xfffffec0
     8a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     8ac:	00000000 	andeq	r0, r0, r0
     8b0:	0003bc00 	andeq	fp, r3, r0, lsl #24
     8b4:	0003c000 	andeq	ip, r3, r0
     8b8:	50000100 	andpl	r0, r0, r0, lsl #2
     8bc:	000003e4 	andeq	r0, r0, r4, ror #7
     8c0:	000003e8 	andeq	r0, r0, r8, ror #7
     8c4:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     8c8:	10000004 	andne	r0, r0, r4
     8cc:	01000004 	tsteq	r0, r4
     8d0:	04345000 	ldrteq	r5, [r4], #-0
     8d4:	04380000 	ldrteq	r0, [r8], #-0
     8d8:	00010000 	andeq	r0, r1, r0
     8dc:	00044050 	andeq	r4, r4, r0, asr r0
     8e0:	00044400 	andeq	r4, r4, r0, lsl #8
     8e4:	50000100 	andpl	r0, r0, r0, lsl #2
     8e8:	00000468 	andeq	r0, r0, r8, ror #8
     8ec:	0000046c 	andeq	r0, r0, ip, ror #8
     8f0:	88500001 	ldmdahi	r0, {r0}^
     8f4:	b0000004 	andlt	r0, r0, r4
     8f8:	01000004 	tsteq	r0, r4
     8fc:	00005000 	andeq	r5, r0, r0
     900:	00000000 	andeq	r0, r0, r0
     904:	02c00000 	sbceq	r0, r0, #0
     908:	02c80000 	sbceq	r0, r8, #0
     90c:	00020000 	andeq	r0, r2, r0
     910:	02c89f30 	sbceq	r9, r8, #48, 30	; 0xc0
     914:	02cc0000 	sbceq	r0, ip, #0
     918:	00010000 	andeq	r0, r1, r0
     91c:	0002d857 	andeq	sp, r2, r7, asr r8
     920:	0004b000 	andeq	fp, r4, r0
     924:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
     930:	00000014 	andeq	r0, r0, r4, lsl r0
     934:	0000001c 	andeq	r0, r0, ip, lsl r0
     938:	04730003 	ldrbteq	r0, [r3], #-3
     93c:	00001c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
     940:	00002700 	andeq	r2, r0, r0, lsl #14
     944:	53000100 	movwpl	r0, #256	; 0x100
	...
     950:	00008b2c 	andeq	r8, r0, ip, lsr #22
     954:	00008b30 	andeq	r8, r0, r0, lsr fp
     958:	9f300002 	svcls	0x00300002
     95c:	00008b30 	andeq	r8, r0, r0, lsr fp
     960:	00008b34 	andeq	r8, r0, r4, lsr fp
     964:	00500001 	subseq	r0, r0, r1
     968:	00000000 	andeq	r0, r0, r0
     96c:	44000000 	strmi	r0, [r0], #-0
     970:	4800008b 	stmdami	r0, {r0, r1, r3, r7}
     974:	0200008b 	andeq	r0, r0, #139	; 0x8b
     978:	489f3000 	ldmmi	pc, {ip, sp}	; <UNPREDICTABLE>
     97c:	4c00008b 	stcmi	0, cr0, [r0], {139}	; 0x8b
     980:	0100008b 	smlabbeq	r0, fp, r0, r0
     984:	8b505300 	blhi	141558c <__bss_end__+0x140b864>
     988:	8b580000 	blhi	1600990 <__bss_end__+0x15f6c68>
     98c:	00010000 	andeq	r0, r1, r0
     990:	00000053 	andeq	r0, r0, r3, asr r0
	...
     99c:	00000400 	andeq	r0, r0, r0, lsl #8
     9a0:	50000100 	andpl	r0, r0, r0, lsl #2
     9a4:	00000004 	andeq	r0, r0, r4
     9a8:	0000000c 	andeq	r0, r0, ip
     9ac:	0c530001 	mrrceq	0, 0, r0, r3, cr1
     9b0:	10000000 	andne	r0, r0, r0
     9b4:	01000000 	mrseq	r0, (UNDEF: 0)
     9b8:	00105000 	andseq	r5, r0, r0
     9bc:	001c0000 	andseq	r0, ip, r0
     9c0:	00010000 	andeq	r0, r1, r0
     9c4:	00000053 	andeq	r0, r0, r3, asr r0
     9c8:	00000000 	andeq	r0, r0, r0
     9cc:	00004000 	andeq	r4, r0, r0
     9d0:	00004300 	andeq	r4, r0, r0, lsl #6
     9d4:	50000100 	andpl	r0, r0, r0, lsl #2
     9d8:	00000043 	andeq	r0, r0, r3, asr #32
     9dc:	0000004c 	andeq	r0, r0, ip, asr #32
     9e0:	00540001 	subseq	r0, r4, r1
     9e4:	00000000 	andeq	r0, r0, r0
     9e8:	4c000000 	stcmi	0, cr0, [r0], {-0}
     9ec:	57000000 	strpl	r0, [r0, -r0]
     9f0:	01000000 	mrseq	r0, (UNDEF: 0)
     9f4:	00575000 	subseq	r5, r7, r0
     9f8:	00700000 	rsbseq	r0, r0, r0
     9fc:	00010000 	andeq	r0, r1, r0
     a00:	00000055 	andeq	r0, r0, r5, asr r0
     a04:	00000000 	andeq	r0, r0, r0
     a08:	00006000 	andeq	r6, r0, r0
     a0c:	00006400 	andeq	r6, r0, r0, lsl #8
     a10:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     a1c:	00000070 	andeq	r0, r0, r0, ror r0
     a20:	0000007c 	andeq	r0, r0, ip, ror r0
     a24:	7c500001 	mrrcvc	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     a28:	84000000 	strhi	r0, [r0], #-0
     a2c:	04000000 	streq	r0, [r0], #-0
     a30:	5001f300 	andpl	pc, r1, r0, lsl #6
     a34:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     a38:	00000000 	andeq	r0, r0, r0
     a3c:	00008400 	andeq	r8, r0, r0, lsl #8
     a40:	00009000 	andeq	r9, r0, r0
     a44:	50000100 	andpl	r0, r0, r0, lsl #2
     a48:	00000090 	muleq	r0, r0, r0
     a4c:	00000098 	muleq	r0, r8, r0
     a50:	01f30004 	mvnseq	r0, r4
     a54:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     a60:	00180000 	andseq	r0, r8, r0
     a64:	00010000 	andeq	r0, r1, r0
     a68:	00001850 	andeq	r1, r0, r0, asr r8
     a6c:	00002c00 	andeq	r2, r0, r0, lsl #24
     a70:	f3000400 	vshl.u8	d0, d0, d0
     a74:	2c9f5001 	ldccs	0, cr5, [pc], {1}
     a78:	40000000 	andmi	r0, r0, r0
     a7c:	01000000 	mrseq	r0, (UNDEF: 0)
     a80:	00405000 	subeq	r5, r0, r0
     a84:	00640000 	rsbeq	r0, r4, r0
     a88:	00040000 	andeq	r0, r4, r0
     a8c:	9f5001f3 	svcls	0x005001f3
	...
     a98:	0000003c 	andeq	r0, r0, ip, lsr r0
     a9c:	0000004b 	andeq	r0, r0, fp, asr #32
     aa0:	4b520001 	blmi	1480aac <__bss_end__+0x1476d84>
     aa4:	64000000 	strvs	r0, [r0], #-0
     aa8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     aac:	5001f300 	andpl	pc, r1, r0, lsl #6
     ab0:	fc090323 	stc2	3, cr0, [r9], {35}	; 0x23
     ab4:	00009f1a 	andeq	r9, r0, sl, lsl pc
     ab8:	00000000 	andeq	r0, r0, r0
     abc:	00640000 	rsbeq	r0, r4, r0
     ac0:	007c0000 	rsbseq	r0, ip, r0
     ac4:	00010000 	andeq	r0, r1, r0
     ac8:	00007c50 	andeq	r7, r0, r0, asr ip
     acc:	00009000 	andeq	r9, r0, r0
     ad0:	f3000400 	vshl.u8	d0, d0, d0
     ad4:	909f5001 	addsls	r5, pc, r1
     ad8:	9b000000 	blls	ae0 <_start-0x7520>
     adc:	01000000 	mrseq	r0, (UNDEF: 0)
     ae0:	009b5000 	addseq	r5, fp, r0
     ae4:	00a00000 	adceq	r0, r0, r0
     ae8:	00040000 	andeq	r0, r4, r0
     aec:	9f5001f3 	svcls	0x005001f3
     af0:	000000a0 	andeq	r0, r0, r0, lsr #1
     af4:	000000ac 	andeq	r0, r0, ip, lsr #1
     af8:	ac500001 	mrrcge	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     afc:	c0000000 	andgt	r0, r0, r0
     b00:	04000000 	streq	r0, [r0], #-0
     b04:	5001f300 	andpl	pc, r1, r0, lsl #6
     b08:	0000c09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     b0c:	0000df00 	andeq	sp, r0, r0, lsl #30
     b10:	50000100 	andpl	r0, r0, r0, lsl #2
     b14:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     b18:	000000f8 	strdeq	r0, [r0], -r8
     b1c:	01f30004 	mvnseq	r0, r4
     b20:	00009f50 	andeq	r9, r0, r0, asr pc
     b24:	00000000 	andeq	r0, r0, r0
     b28:	00640000 	rsbeq	r0, r4, r0
     b2c:	00800000 	addeq	r0, r0, r0
     b30:	00010000 	andeq	r0, r1, r0
     b34:	00008051 	andeq	r8, r0, r1, asr r0
     b38:	00009000 	andeq	r9, r0, r0
     b3c:	f3000400 	vshl.u8	d0, d0, d0
     b40:	909f5101 	addsls	r5, pc, r1, lsl #2
     b44:	9b000000 	blls	b4c <_start-0x74b4>
     b48:	01000000 	mrseq	r0, (UNDEF: 0)
     b4c:	009b5100 	addseq	r5, fp, r0, lsl #2
     b50:	00a00000 	adceq	r0, r0, r0
     b54:	00040000 	andeq	r0, r4, r0
     b58:	9f5101f3 	svcls	0x005101f3
     b5c:	000000a0 	andeq	r0, r0, r0, lsr #1
     b60:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     b64:	b0510001 	subslt	r0, r1, r1
     b68:	c0000000 	andgt	r0, r0, r0
     b6c:	04000000 	streq	r0, [r0], #-0
     b70:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     b74:	0000c09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     b78:	0000d400 	andeq	sp, r0, r0, lsl #8
     b7c:	51000100 	mrspl	r0, (UNDEF: 16)
     b80:	000000d4 	ldrdeq	r0, [r0], -r4
     b84:	000000d8 	ldrdeq	r0, [r0], -r8
     b88:	00710004 	rsbseq	r0, r1, r4
     b8c:	00d89f1f 	sbcseq	r9, r8, pc, lsl pc
     b90:	00f80000 	rscseq	r0, r8, r0
     b94:	00040000 	andeq	r0, r4, r0
     b98:	9f5101f3 	svcls	0x005101f3
	...
     ba4:	000000c8 	andeq	r0, r0, r8, asr #1
     ba8:	000000cc 	andeq	r0, r0, ip, asr #1
     bac:	cc520001 	mrrcgt	0, 0, r0, r2, cr1
     bb0:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
     bb4:	05000000 	streq	r0, [r0, #-0]
     bb8:	9d200300 	stcls	3, cr0, [r0, #-0]
     bbc:	00d80000 	sbcseq	r0, r8, r0
     bc0:	00df0000 	sbcseq	r0, pc, r0
     bc4:	00010000 	andeq	r0, r1, r0
     bc8:	00000051 	andeq	r0, r0, r1, asr r0
     bcc:	00000000 	andeq	r0, r0, r0
     bd0:	0000fc00 	andeq	pc, r0, r0, lsl #24
     bd4:	00010400 	andeq	r0, r1, r0, lsl #8
     bd8:	50000100 	andpl	r0, r0, r0, lsl #2
     bdc:	00000104 	andeq	r0, r0, r4, lsl #2
     be0:	00000128 	andeq	r0, r0, r8, lsr #2
     be4:	00540001 	subseq	r0, r4, r1
	...
     bf0:	90000000 	andls	r0, r0, r0
     bf4:	01000000 	mrseq	r0, (UNDEF: 0)
     bf8:	00905000 	addseq	r5, r0, r0
     bfc:	00d40000 	sbcseq	r0, r4, r0
     c00:	00010000 	andeq	r0, r1, r0
     c04:	00000054 	andeq	r0, r0, r4, asr r0
     c08:	00000000 	andeq	r0, r0, r0
     c0c:	00004800 	andeq	r4, r0, r0, lsl #16
     c10:	00004c00 	andeq	r4, r0, r0, lsl #24
     c14:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     c18:	00000054 	andeq	r0, r0, r4, asr r0
     c1c:	00000058 	andeq	r0, r0, r8, asr r0
     c20:	60550001 	subsvs	r0, r5, r1
     c24:	64000000 	strvs	r0, [r0], #-0
     c28:	01000000 	mrseq	r0, (UNDEF: 0)
     c2c:	006c5500 	rsbeq	r5, ip, r0, lsl #10
     c30:	00700000 	rsbseq	r0, r0, r0
     c34:	00010000 	andeq	r0, r1, r0
     c38:	00007855 	andeq	r7, r0, r5, asr r8
     c3c:	00007c00 	andeq	r7, r0, r0, lsl #24
     c40:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     c44:	00000084 	andeq	r0, r0, r4, lsl #1
     c48:	00000088 	andeq	r0, r0, r8, lsl #1
     c4c:	8c550001 	mrrchi	0, 0, r0, r5, cr1
     c50:	d4000000 	strle	r0, [r0], #-0
     c54:	01000000 	mrseq	r0, (UNDEF: 0)
     c58:	00005500 	andeq	r5, r0, r0, lsl #10
     c5c:	00000000 	andeq	r0, r0, r0
     c60:	001c0000 	andseq	r0, ip, r0
     c64:	00440000 	subeq	r0, r4, r0
     c68:	00010000 	andeq	r0, r1, r0
     c6c:	00004453 	andeq	r4, r0, r3, asr r4
     c70:	00004c00 	andeq	r4, r0, r0, lsl #24
     c74:	70001c00 	andvc	r1, r0, r0, lsl #24
     c78:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
     c7c:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
     c80:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
     c84:	00000000 	andeq	r0, r0, r0
     c88:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
     c8c:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
     c90:	4c9f2533 	cfldr32mi	mvfx2, [pc], {51}	; 0x33
     c94:	50000000 	andpl	r0, r0, r0
     c98:	01000000 	mrseq	r0, (UNDEF: 0)
     c9c:	00505300 	subseq	r5, r0, r0, lsl #6
     ca0:	00580000 	subseq	r0, r8, r0
     ca4:	001c0000 	andseq	r0, ip, r0
     ca8:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
     cac:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
     cb0:	cccccd08 	stclgt	13, cr12, [ip], {8}
     cb4:	000000cc 	andeq	r0, r0, ip, asr #1
     cb8:	20081e00 	andcs	r1, r8, r0, lsl #28
     cbc:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
     cc0:	9f25332c 	svcls	0x0025332c
     cc4:	00000058 	andeq	r0, r0, r8, asr r0
     cc8:	0000005c 	andeq	r0, r0, ip, asr r0
     ccc:	5c530001 	mrrcpl	0, 0, r0, r3, cr1
     cd0:	64000000 	strvs	r0, [r0], #-0
     cd4:	1c000000 	stcne	0, cr0, [r0], {-0}
     cd8:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
     cdc:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
     ce0:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
     ce4:	0000cccc 	andeq	ip, r0, ip, asr #25
     ce8:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
     cec:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
     cf0:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
     cf4:	0000649f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
     cf8:	00006800 	andeq	r6, r0, r0, lsl #16
     cfc:	53000100 	movwpl	r0, #256	; 0x100
     d00:	00000068 	andeq	r0, r0, r8, rrx
     d04:	00000070 	andeq	r0, r0, r0, ror r0
     d08:	0070001c 	rsbseq	r0, r0, ip, lsl r0
     d0c:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
     d10:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
     d14:	00cccccc 	sbceq	ip, ip, ip, asr #25
     d18:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     d1c:	25f72008 	ldrbcs	r2, [r7, #8]!
     d20:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
     d24:	00709f25 	rsbseq	r9, r0, r5, lsr #30
     d28:	00740000 	rsbseq	r0, r4, r0
     d2c:	00010000 	andeq	r0, r1, r0
     d30:	00007453 	andeq	r7, r0, r3, asr r4
     d34:	00007c00 	andeq	r7, r0, r0, lsl #24
     d38:	70001c00 	andvc	r1, r0, r0, lsl #24
     d3c:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
     d40:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
     d44:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
     d48:	00000000 	andeq	r0, r0, r0
     d4c:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
     d50:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
     d54:	7c9f2533 	cfldr32vc	mvfx2, [pc], {51}	; 0x33
     d58:	80000000 	andhi	r0, r0, r0
     d5c:	01000000 	mrseq	r0, (UNDEF: 0)
     d60:	00805300 	addeq	r5, r0, r0, lsl #6
     d64:	00880000 	addeq	r0, r8, r0
     d68:	001c0000 	andseq	r0, ip, r0
     d6c:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
     d70:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
     d74:	cccccd08 	stclgt	13, cr12, [ip], {8}
     d78:	000000cc 	andeq	r0, r0, ip, asr #1
     d7c:	20081e00 	andcs	r1, r8, r0, lsl #28
     d80:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
     d84:	9f25332c 	svcls	0x0025332c
     d88:	00000088 	andeq	r0, r0, r8, lsl #1
     d8c:	0000008c 	andeq	r0, r0, ip, lsl #1
     d90:	8c530001 	mrrchi	0, 0, r0, r3, cr1
     d94:	90000000 	andls	r0, r0, r0
     d98:	1c000000 	stcne	0, cr0, [r0], {-0}
     d9c:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
     da0:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
     da4:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
     da8:	0000cccc 	andeq	ip, r0, ip, asr #25
     dac:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
     db0:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
     db4:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
     db8:	0000909f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     dbc:	00009800 	andeq	r9, r0, r0, lsl #16
     dc0:	74001c00 	strvc	r1, [r0], #-3072	; 0xc00
     dc4:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
     dc8:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
     dcc:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
     dd0:	00000000 	andeq	r0, r0, r0
     dd4:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
     dd8:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
     ddc:	989f2533 	ldmls	pc, {r0, r1, r4, r5, r8, sl, sp}	; <UNPREDICTABLE>
     de0:	9c000000 	stcls	0, cr0, [r0], {-0}
     de4:	17000000 	strne	r0, [r0, -r0]
     de8:	f7007400 			; <UNDEFINED> instruction: 0xf7007400
     dec:	7125f72c 	msrvc	SP_abt, ip
     df0:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
     df4:	20081e25 	andcs	r1, r8, r5, lsr #28
     df8:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
     dfc:	9f25332c 	svcls	0x0025332c
     e00:	0000009c 	muleq	r0, ip, r0
     e04:	000000d4 	ldrdeq	r0, [r0], -r4
     e08:	0074001c 	rsbseq	r0, r4, ip, lsl r0
     e0c:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
     e10:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
     e14:	00cccccc 	sbceq	ip, ip, ip, asr #25
     e18:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     e1c:	25f72008 	ldrbcs	r2, [r7, #8]!
     e20:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
     e24:	00009f25 	andeq	r9, r0, r5, lsr #30
     e28:	00000000 	andeq	r0, r0, r0
     e2c:	00940000 	addseq	r0, r4, r0
     e30:	00b80000 	adcseq	r0, r8, r0
     e34:	00010000 	andeq	r0, r1, r0
     e38:	0000b850 	andeq	fp, r0, r0, asr r8
     e3c:	0000c400 	andeq	ip, r0, r0, lsl #8
     e40:	31000800 	tstcc	r0, r0, lsl #16
     e44:	73240071 	teqvc	r4, #113	; 0x71
     e48:	c49f2100 	ldrgt	r2, [pc], #256	; e50 <_start-0x71b0>
     e4c:	c7000000 	strgt	r0, [r0, -r0]
     e50:	01000000 	mrseq	r0, (UNDEF: 0)
     e54:	00005100 	andeq	r5, r0, r0, lsl #2
     e58:	00000000 	andeq	r0, r0, r0
     e5c:	00d40000 	sbcseq	r0, r4, r0
     e60:	00f80000 	rscseq	r0, r8, r0
     e64:	00010000 	andeq	r0, r1, r0
     e68:	0000f850 	andeq	pc, r0, r0, asr r8	; <UNPREDICTABLE>
     e6c:	00010c00 	andeq	r0, r1, r0, lsl #24
     e70:	f3000400 	vshl.u8	d0, d0, d0
     e74:	009f5001 	addseq	r5, pc, r1
     e78:	00000000 	andeq	r0, r0, r0
     e7c:	e0000000 	and	r0, r0, r0
     e80:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
     e84:	02000000 	andeq	r0, r0, #0
     e88:	e89f3000 	ldm	pc, {ip, sp}	; <UNPREDICTABLE>
     e8c:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
     e90:	01000000 	mrseq	r0, (UNDEF: 0)
     e94:	00e85200 	rsceq	r5, r8, r0, lsl #4
     e98:	00f00000 	rscseq	r0, r0, r0
     e9c:	00020000 	andeq	r0, r2, r0
     ea0:	00f09f30 	rscseq	r9, r0, r0, lsr pc
     ea4:	01030000 	mrseq	r0, (UNDEF: 3)
     ea8:	00010000 	andeq	r0, r1, r0
     eac:	00000052 	andeq	r0, r0, r2, asr r0
     eb0:	00000000 	andeq	r0, r0, r0
     eb4:	0000e000 	andeq	lr, r0, r0
     eb8:	0000f400 	andeq	pc, r0, r0, lsl #8
     ebc:	30000200 	andcc	r0, r0, r0, lsl #4
     ec0:	0000f49f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
     ec4:	00010000 	andeq	r0, r1, r0
     ec8:	31000500 	tstcc	r0, r0, lsl #10
     ecc:	9f240073 	svcls	0x00240073
     ed0:	00000100 	andeq	r0, r0, r0, lsl #2
     ed4:	00000103 	andeq	r0, r0, r3, lsl #2
     ed8:	03510001 	cmpeq	r1, #1
     edc:	0c000001 	stceq	0, cr0, [r0], {1}
     ee0:	08000001 	stmdaeq	r0, {r0}
     ee4:	01f33100 	mvnseq	r3, r0, lsl #2
     ee8:	241a4f50 	ldrcs	r4, [sl], #-3920	; 0xf50
     eec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     ef0:	00000000 	andeq	r0, r0, r0
     ef4:	00010c00 	andeq	r0, r1, r0, lsl #24
     ef8:	00013000 	andeq	r3, r1, r0
     efc:	50000100 	andpl	r0, r0, r0, lsl #2
     f00:	00000130 	andeq	r0, r0, r0, lsr r1
     f04:	00000144 	andeq	r0, r0, r4, asr #2
     f08:	01f30004 	mvnseq	r0, r4
     f0c:	00009f50 	andeq	r9, r0, r0, asr pc
     f10:	00000000 	andeq	r0, r0, r0
     f14:	01180000 	tsteq	r8, r0
     f18:	01200000 	teqeq	r0, r0
     f1c:	00020000 	andeq	r0, r2, r0
     f20:	01209f30 	teqeq	r0, r0, lsr pc
     f24:	01200000 	teqeq	r0, r0
     f28:	00010000 	andeq	r0, r1, r0
     f2c:	00012052 	andeq	r2, r1, r2, asr r0
     f30:	00012800 	andeq	r2, r1, r0, lsl #16
     f34:	30000200 	andcc	r0, r0, r0, lsl #4
     f38:	0001289f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
     f3c:	00013b00 	andeq	r3, r1, r0, lsl #22
     f40:	52000100 	andpl	r0, r0, #0, 2
	...
     f4c:	00000118 	andeq	r0, r0, r8, lsl r1
     f50:	0000012c 	andeq	r0, r0, ip, lsr #2
     f54:	9f300002 	svcls	0x00300002
     f58:	0000012c 	andeq	r0, r0, ip, lsr #2
     f5c:	00000138 	andeq	r0, r0, r8, lsr r1
     f60:	73310005 	teqvc	r1, #5
     f64:	389f2400 	ldmcc	pc, {sl, sp}	; <UNPREDICTABLE>
     f68:	3b000001 	blcc	f74 <_start-0x708c>
     f6c:	01000001 	tsteq	r0, r1
     f70:	013b5100 	teqeq	fp, r0, lsl #2
     f74:	01440000 	mrseq	r0, (UNDEF: 68)
     f78:	00080000 	andeq	r0, r8, r0
     f7c:	5001f331 	andpl	pc, r1, r1, lsr r3	; <UNPREDICTABLE>
     f80:	9f241a4f 	svcls	0x00241a4f
	...
     f8c:	00000144 	andeq	r0, r0, r4, asr #2
     f90:	000001d4 	ldrdeq	r0, [r0], -r4
     f94:	d4500001 	ldrble	r0, [r0], #-1
     f98:	10000001 	andne	r0, r0, r1
     f9c:	01000002 	tsteq	r0, r2
     fa0:	00005400 	andeq	r5, r0, r0, lsl #8
     fa4:	00000000 	andeq	r0, r0, r0
     fa8:	018c0000 	orreq	r0, ip, r0
     fac:	01900000 	orrseq	r0, r0, r0
     fb0:	00010000 	andeq	r0, r1, r0
     fb4:	00019855 	andeq	r9, r1, r5, asr r8
     fb8:	00019c00 	andeq	r9, r1, r0, lsl #24
     fbc:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     fc0:	000001a4 	andeq	r0, r0, r4, lsr #3
     fc4:	000001a8 	andeq	r0, r0, r8, lsr #3
     fc8:	b0550001 	subslt	r0, r5, r1
     fcc:	b4000001 	strlt	r0, [r0], #-1
     fd0:	01000001 	tsteq	r0, r1
     fd4:	01bc5500 			; <UNDEFINED> instruction: 0x01bc5500
     fd8:	01c00000 	biceq	r0, r0, r0
     fdc:	00010000 	andeq	r0, r1, r0
     fe0:	0001c855 	andeq	ip, r1, r5, asr r8
     fe4:	0001cc00 	andeq	ip, r1, r0, lsl #24
     fe8:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     fec:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     ff0:	00000210 	andeq	r0, r0, r0, lsl r2
     ff4:	00550001 	subseq	r0, r5, r1
     ff8:	00000000 	andeq	r0, r0, r0
     ffc:	60000000 	andvs	r0, r0, r0
    1000:	88000001 	stmdahi	r0, {r0}
    1004:	01000001 	tsteq	r0, r1
    1008:	01885300 	orreq	r5, r8, r0, lsl #6
    100c:	01900000 	orrseq	r0, r0, r0
    1010:	001c0000 	andseq	r0, ip, r0
    1014:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    1018:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    101c:	cccccd08 	stclgt	13, cr12, [ip], {8}
    1020:	000000cc 	andeq	r0, r0, ip, asr #1
    1024:	20081e00 	andcs	r1, r8, r0, lsl #28
    1028:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    102c:	9f25332c 	svcls	0x0025332c
    1030:	00000190 	muleq	r0, r0, r1
    1034:	00000194 	muleq	r0, r4, r1
    1038:	94530001 	ldrbls	r0, [r3], #-1
    103c:	9c000001 	stcls	0, cr0, [r0], {1}
    1040:	1c000001 	stcne	0, cr0, [r0], {1}
    1044:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    1048:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    104c:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1050:	0000cccc 	andeq	ip, r0, ip, asr #25
    1054:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1058:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    105c:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1060:	00019c9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
    1064:	0001a000 	andeq	sl, r1, r0
    1068:	53000100 	movwpl	r0, #256	; 0x100
    106c:	000001a0 	andeq	r0, r0, r0, lsr #3
    1070:	000001a8 	andeq	r0, r0, r8, lsr #3
    1074:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    1078:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    107c:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1080:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1084:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1088:	25f72008 	ldrbcs	r2, [r7, #8]!
    108c:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1090:	01a89f25 			; <UNDEFINED> instruction: 0x01a89f25
    1094:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
    1098:	00010000 	andeq	r0, r1, r0
    109c:	0001ac53 	andeq	sl, r1, r3, asr ip
    10a0:	0001b400 	andeq	fp, r1, r0, lsl #8
    10a4:	70001c00 	andvc	r1, r0, r0, lsl #24
    10a8:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    10ac:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    10b0:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    10b4:	00000000 	andeq	r0, r0, r0
    10b8:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    10bc:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    10c0:	b49f2533 	ldrlt	r2, [pc], #1331	; 10c8 <_start-0x6f38>
    10c4:	b8000001 	stmdalt	r0, {r0}
    10c8:	01000001 	tsteq	r0, r1
    10cc:	01b85300 			; <UNDEFINED> instruction: 0x01b85300
    10d0:	01c00000 	biceq	r0, r0, r0
    10d4:	001c0000 	andseq	r0, ip, r0
    10d8:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    10dc:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    10e0:	cccccd08 	stclgt	13, cr12, [ip], {8}
    10e4:	000000cc 	andeq	r0, r0, ip, asr #1
    10e8:	20081e00 	andcs	r1, r8, r0, lsl #28
    10ec:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    10f0:	9f25332c 	svcls	0x0025332c
    10f4:	000001c0 	andeq	r0, r0, r0, asr #3
    10f8:	000001c4 	andeq	r0, r0, r4, asr #3
    10fc:	c4530001 	ldrbgt	r0, [r3], #-1
    1100:	cc000001 	stcgt	0, cr0, [r0], {1}
    1104:	1c000001 	stcne	0, cr0, [r0], {1}
    1108:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    110c:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    1110:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1114:	0000cccc 	andeq	ip, r0, ip, asr #25
    1118:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    111c:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1120:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1124:	0001cc9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
    1128:	0001d000 	andeq	sp, r1, r0
    112c:	53000100 	movwpl	r0, #256	; 0x100
    1130:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1134:	000001d4 	ldrdeq	r0, [r0], -r4
    1138:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    113c:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1140:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1144:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1148:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    114c:	25f72008 	ldrbcs	r2, [r7, #8]!
    1150:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1154:	01d49f25 	bicseq	r9, r4, r5, lsr #30
    1158:	01dc0000 	bicseq	r0, ip, r0
    115c:	001c0000 	andseq	r0, ip, r0
    1160:	2cf70074 	ldclcs	0, cr0, [r7], #464	; 0x1d0
    1164:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    1168:	cccccd08 	stclgt	13, cr12, [ip], {8}
    116c:	000000cc 	andeq	r0, r0, ip, asr #1
    1170:	20081e00 	andcs	r1, r8, r0, lsl #28
    1174:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1178:	9f25332c 	svcls	0x0025332c
    117c:	000001dc 	ldrdeq	r0, [r0], -ip
    1180:	000001e0 	andeq	r0, r0, r0, ror #3
    1184:	00740017 	rsbseq	r0, r4, r7, lsl r0
    1188:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    118c:	2cf70071 	ldclcs	0, cr0, [r7], #452	; 0x1c4
    1190:	081e25f7 	ldmdaeq	lr, {r0, r1, r2, r4, r5, r6, r7, r8, sl, sp}
    1194:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1198:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    119c:	0001e09f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
    11a0:	00021000 	andeq	r1, r2, r0
    11a4:	74001c00 	strvc	r1, [r0], #-3072	; 0xc00
    11a8:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    11ac:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    11b0:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    11b4:	00000000 	andeq	r0, r0, r0
    11b8:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    11bc:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    11c0:	009f2533 	addseq	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
    11c4:	00000000 	andeq	r0, r0, r0
    11c8:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    11cc:	fc000001 	stc2	0, cr0, [r0], {1}
    11d0:	01000001 	tsteq	r0, r1
    11d4:	01fc5000 	mvnseq	r5, r0
    11d8:	02030000 	andeq	r0, r3, #0
    11dc:	00010000 	andeq	r0, r1, r0
    11e0:	00000051 	andeq	r0, r0, r1, asr r0
    11e4:	00000000 	andeq	r0, r0, r0
    11e8:	00021000 	andeq	r1, r2, r0
    11ec:	00022c00 	andeq	r2, r2, r0, lsl #24
    11f0:	50000100 	andpl	r0, r0, r0, lsl #2
    11f4:	0000022c 	andeq	r0, r0, ip, lsr #4
    11f8:	00000234 	andeq	r0, r0, r4, lsr r2
    11fc:	34540001 	ldrbcc	r0, [r4], #-1
    1200:	3c000002 	stccc	0, cr0, [r0], {2}
    1204:	01000002 	tsteq	r0, r2
    1208:	023c5000 	eorseq	r5, ip, #0
    120c:	02440000 	subeq	r0, r4, #0
    1210:	00010000 	andeq	r0, r1, r0
    1214:	00024454 	andeq	r4, r2, r4, asr r4
    1218:	00025000 	andeq	r5, r2, r0
    121c:	f3000400 	vshl.u8	d0, d0, d0
    1220:	509f5001 	addspl	r5, pc, r1
    1224:	54000002 	strpl	r0, [r0], #-2
    1228:	01000002 	tsteq	r0, r2
    122c:	02545000 	subseq	r5, r4, #0
    1230:	025c0000 	subseq	r0, ip, #0
    1234:	00010000 	andeq	r0, r1, r0
    1238:	00000054 	andeq	r0, r0, r4, asr r0
    123c:	00000000 	andeq	r0, r0, r0
    1240:	00022000 	andeq	r2, r2, r0
    1244:	00023000 	andeq	r3, r2, r0
    1248:	30000200 	andcc	r0, r0, r0, lsl #4
    124c:	0002309f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
    1250:	00023400 	andeq	r3, r2, r0, lsl #8
    1254:	50000100 	andpl	r0, r0, r0, lsl #2
    1258:	00000234 	andeq	r0, r0, r4, lsr r2
    125c:	00000240 	andeq	r0, r0, r0, asr #4
    1260:	9f300002 	svcls	0x00300002
    1264:	00000240 	andeq	r0, r0, r0, asr #4
    1268:	0000024c 	andeq	r0, r0, ip, asr #4
    126c:	00500001 	subseq	r0, r0, r1
    1270:	00000000 	andeq	r0, r0, r0
    1274:	5c000000 	stcpl	0, cr0, [r0], {-0}
    1278:	90000002 	andls	r0, r0, r2
    127c:	01000002 	tsteq	r0, r2
    1280:	02905000 	addseq	r5, r0, #0
    1284:	02a00000 	adceq	r0, r0, #0
    1288:	00040000 	andeq	r0, r4, r0
    128c:	9f5001f3 	svcls	0x005001f3
    1290:	000002a0 	andeq	r0, r0, r0, lsr #5
    1294:	000002c0 	andeq	r0, r0, r0, asr #5
    1298:	c0500001 	subsgt	r0, r0, r1
    129c:	d4000002 	strle	r0, [r0], #-2
    12a0:	04000002 	streq	r0, [r0], #-2
    12a4:	5001f300 	andpl	pc, r1, r0, lsl #6
    12a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    12ac:	00000000 	andeq	r0, r0, r0
    12b0:	00025c00 	andeq	r5, r2, r0, lsl #24
    12b4:	00029400 	andeq	r9, r2, r0, lsl #8
    12b8:	51000100 	mrspl	r0, (UNDEF: 16)
    12bc:	00000294 	muleq	r0, r4, r2
    12c0:	000002a0 	andeq	r0, r0, r0, lsr #5
    12c4:	01f30004 	mvnseq	r0, r4
    12c8:	02a09f51 	adceq	r9, r0, #324	; 0x144
    12cc:	02c40000 	sbceq	r0, r4, #0
    12d0:	00010000 	andeq	r0, r1, r0
    12d4:	0002c451 	andeq	ip, r2, r1, asr r4
    12d8:	0002d400 	andeq	sp, r2, r0, lsl #8
    12dc:	f3000400 	vshl.u8	d0, d0, d0
    12e0:	009f5101 	addseq	r5, pc, r1, lsl #2
    12e4:	00000000 	andeq	r0, r0, r0
    12e8:	70000000 	andvc	r0, r0, r0
    12ec:	90000002 	andls	r0, r0, r2
    12f0:	01000002 	tsteq	r0, r2
    12f4:	02905000 	addseq	r5, r0, #0
    12f8:	02a00000 	adceq	r0, r0, #0
    12fc:	00040000 	andeq	r0, r4, r0
    1300:	9f5001f3 	svcls	0x005001f3
	...
    130c:	00000278 	andeq	r0, r0, r8, ror r2
    1310:	00000280 	andeq	r0, r0, r0, lsl #5
    1314:	9f300002 	svcls	0x00300002
    1318:	00000280 	andeq	r0, r0, r0, lsl #5
    131c:	00000280 	andeq	r0, r0, r0, lsl #5
    1320:	80520001 	subshi	r0, r2, r1
    1324:	88000002 	stmdahi	r0, {r1}
    1328:	02000002 	andeq	r0, r0, #2
    132c:	889f3000 	ldmhi	pc, {ip, sp}	; <UNPREDICTABLE>
    1330:	9b000002 	blls	1340 <_start-0x6cc0>
    1334:	01000002 	tsteq	r0, r2
    1338:	00005200 	andeq	r5, r0, r0, lsl #4
    133c:	00000000 	andeq	r0, r0, r0
    1340:	02780000 	rsbseq	r0, r8, #0
    1344:	028c0000 	addeq	r0, ip, #0
    1348:	00020000 	andeq	r0, r2, r0
    134c:	028c9f30 	addeq	r9, ip, #48, 30	; 0xc0
    1350:	02980000 	addseq	r0, r8, #0
    1354:	00050000 	andeq	r0, r5, r0
    1358:	24007331 	strcs	r7, [r0], #-817	; 0x331
    135c:	0002989f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
    1360:	00029b00 	andeq	r9, r2, r0, lsl #22
    1364:	51000100 	mrspl	r0, (UNDEF: 16)
    1368:	0000029b 	muleq	r0, fp, r2
    136c:	000002a0 	andeq	r0, r0, r0, lsr #5
    1370:	f3310008 	vhadd.u<illegal width 64>	d0, d1, d8
    1374:	1a4f5001 	bne	13d5380 <__bss_end__+0x13cb658>
    1378:	00009f24 	andeq	r9, r0, r4, lsr #30
    137c:	00000000 	andeq	r0, r0, r0
    1380:	02a00000 	adceq	r0, r0, #0
    1384:	02c00000 	sbceq	r0, r0, #0
    1388:	00010000 	andeq	r0, r1, r0
    138c:	0002c050 	andeq	ip, r2, r0, asr r0
    1390:	0002d400 	andeq	sp, r2, r0, lsl #8
    1394:	f3000400 	vshl.u8	d0, d0, d0
    1398:	009f5001 	addseq	r5, pc, r1
    139c:	00000000 	andeq	r0, r0, r0
    13a0:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    13a4:	b0000002 	andlt	r0, r0, r2
    13a8:	02000002 	andeq	r0, r0, #2
    13ac:	b09f3000 	addslt	r3, pc, r0
    13b0:	b0000002 	andlt	r0, r0, r2
    13b4:	01000002 	tsteq	r0, r2
    13b8:	02b05200 	adcseq	r5, r0, #0, 4
    13bc:	02b80000 	adcseq	r0, r8, #0
    13c0:	00020000 	andeq	r0, r2, r0
    13c4:	02b89f30 	adcseq	r9, r8, #48, 30	; 0xc0
    13c8:	02cb0000 	sbceq	r0, fp, #0
    13cc:	00010000 	andeq	r0, r1, r0
    13d0:	00000052 	andeq	r0, r0, r2, asr r0
    13d4:	00000000 	andeq	r0, r0, r0
    13d8:	0002a800 	andeq	sl, r2, r0, lsl #16
    13dc:	0002bc00 	andeq	fp, r2, r0, lsl #24
    13e0:	30000200 	andcc	r0, r0, r0, lsl #4
    13e4:	0002bc9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
    13e8:	0002c800 	andeq	ip, r2, r0, lsl #16
    13ec:	31000500 	tstcc	r0, r0, lsl #10
    13f0:	9f240073 	svcls	0x00240073
    13f4:	000002c8 	andeq	r0, r0, r8, asr #5
    13f8:	000002cb 	andeq	r0, r0, fp, asr #5
    13fc:	cb510001 	blgt	1441408 <__bss_end__+0x14376e0>
    1400:	d4000002 	strle	r0, [r0], #-2
    1404:	08000002 	stmdaeq	r0, {r1}
    1408:	01f33100 	mvnseq	r3, r0, lsl #2
    140c:	241a4f50 	ldrcs	r4, [sl], #-3920	; 0xf50
    1410:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1414:	00000000 	andeq	r0, r0, r0
    1418:	0002d400 	andeq	sp, r2, r0, lsl #8
    141c:	00036c00 	andeq	r6, r3, r0, lsl #24
    1420:	50000100 	andpl	r0, r0, r0, lsl #2
    1424:	0000036c 	andeq	r0, r0, ip, ror #6
    1428:	000003ac 	andeq	r0, r0, ip, lsr #7
    142c:	00540001 	subseq	r0, r4, r1
    1430:	00000000 	andeq	r0, r0, r0
    1434:	d4000000 	strle	r0, [r0], #-0
    1438:	6f000002 	svcvs	0x00000002
    143c:	01000003 	tsteq	r0, r3
    1440:	036f5100 	cmneq	pc, #0, 2
    1444:	03ac0000 			; <UNDEFINED> instruction: 0x03ac0000
    1448:	00040000 	andeq	r0, r4, r0
    144c:	9f5101f3 	svcls	0x005101f3
	...
    1458:	00000324 	andeq	r0, r0, r4, lsr #6
    145c:	00000328 	andeq	r0, r0, r8, lsr #6
    1460:	30560001 	subscc	r0, r6, r1
    1464:	34000003 	strcc	r0, [r0], #-3
    1468:	01000003 	tsteq	r0, r3
    146c:	033c5600 	teqeq	ip, #0, 12
    1470:	03400000 	movteq	r0, #0
    1474:	00010000 	andeq	r0, r1, r0
    1478:	00034856 	andeq	r4, r3, r6, asr r8
    147c:	00034c00 	andeq	r4, r3, r0, lsl #24
    1480:	56000100 	strpl	r0, [r0], -r0, lsl #2
    1484:	00000354 	andeq	r0, r0, r4, asr r3
    1488:	00000358 	andeq	r0, r0, r8, asr r3
    148c:	60560001 	subsvs	r0, r6, r1
    1490:	64000003 	strvs	r0, [r0], #-3
    1494:	01000003 	tsteq	r0, r3
    1498:	03685600 	cmneq	r8, #0, 12
    149c:	03ac0000 			; <UNDEFINED> instruction: 0x03ac0000
    14a0:	00010000 	andeq	r0, r1, r0
    14a4:	00000056 	andeq	r0, r0, r6, asr r0
    14a8:	00000000 	andeq	r0, r0, r0
    14ac:	0002f800 	andeq	pc, r2, r0, lsl #16
    14b0:	00032000 	andeq	r2, r3, r0
    14b4:	53000100 	movwpl	r0, #256	; 0x100
    14b8:	00000320 	andeq	r0, r0, r0, lsr #6
    14bc:	00000328 	andeq	r0, r0, r8, lsr #6
    14c0:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    14c4:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    14c8:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    14cc:	00cccccc 	sbceq	ip, ip, ip, asr #25
    14d0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    14d4:	25f72008 	ldrbcs	r2, [r7, #8]!
    14d8:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    14dc:	03289f25 	teqeq	r8, #37, 30	; 0x94
    14e0:	032c0000 	teqeq	ip, #0
    14e4:	00010000 	andeq	r0, r1, r0
    14e8:	00032c53 	andeq	r2, r3, r3, asr ip
    14ec:	00033400 	andeq	r3, r3, r0, lsl #8
    14f0:	70001c00 	andvc	r1, r0, r0, lsl #24
    14f4:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    14f8:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    14fc:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1500:	00000000 	andeq	r0, r0, r0
    1504:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1508:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    150c:	349f2533 	ldrcc	r2, [pc], #1331	; 1514 <_start-0x6aec>
    1510:	38000003 	stmdacc	r0, {r0, r1}
    1514:	01000003 	tsteq	r0, r3
    1518:	03385300 	teqeq	r8, #0, 6
    151c:	03400000 	movteq	r0, #0
    1520:	001c0000 	andseq	r0, ip, r0
    1524:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    1528:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    152c:	cccccd08 	stclgt	13, cr12, [ip], {8}
    1530:	000000cc 	andeq	r0, r0, ip, asr #1
    1534:	20081e00 	andcs	r1, r8, r0, lsl #28
    1538:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    153c:	9f25332c 	svcls	0x0025332c
    1540:	00000340 	andeq	r0, r0, r0, asr #6
    1544:	00000344 	andeq	r0, r0, r4, asr #6
    1548:	44530001 	ldrbmi	r0, [r3], #-1
    154c:	4c000003 	stcmi	0, cr0, [r0], {3}
    1550:	1c000003 	stcne	0, cr0, [r0], {3}
    1554:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    1558:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    155c:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1560:	0000cccc 	andeq	ip, r0, ip, asr #25
    1564:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1568:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    156c:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1570:	00034c9f 	muleq	r3, pc, ip	; <UNPREDICTABLE>
    1574:	00035000 	andeq	r5, r3, r0
    1578:	53000100 	movwpl	r0, #256	; 0x100
    157c:	00000350 	andeq	r0, r0, r0, asr r3
    1580:	00000358 	andeq	r0, r0, r8, asr r3
    1584:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    1588:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    158c:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1590:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1594:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1598:	25f72008 	ldrbcs	r2, [r7, #8]!
    159c:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    15a0:	03589f25 	cmpeq	r8, #37, 30	; 0x94
    15a4:	035c0000 	cmpeq	ip, #0
    15a8:	00010000 	andeq	r0, r1, r0
    15ac:	00035c53 	andeq	r5, r3, r3, asr ip
    15b0:	00036400 	andeq	r6, r3, r0, lsl #8
    15b4:	70001c00 	andvc	r1, r0, r0, lsl #24
    15b8:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    15bc:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    15c0:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    15c4:	00000000 	andeq	r0, r0, r0
    15c8:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    15cc:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    15d0:	649f2533 	ldrvs	r2, [pc], #1331	; 15d8 <_start-0x6a28>
    15d4:	68000003 	stmdavs	r0, {r0, r1}
    15d8:	01000003 	tsteq	r0, r3
    15dc:	03685300 	cmneq	r8, #0, 6
    15e0:	036c0000 	cmneq	ip, #0
    15e4:	001c0000 	andseq	r0, ip, r0
    15e8:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    15ec:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    15f0:	cccccd08 	stclgt	13, cr12, [ip], {8}
    15f4:	000000cc 	andeq	r0, r0, ip, asr #1
    15f8:	20081e00 	andcs	r1, r8, r0, lsl #28
    15fc:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1600:	9f25332c 	svcls	0x0025332c
    1604:	0000036c 	andeq	r0, r0, ip, ror #6
    1608:	00000374 	andeq	r0, r0, r4, ror r3
    160c:	0074001c 	rsbseq	r0, r4, ip, lsl r0
    1610:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1614:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1618:	00cccccc 	sbceq	ip, ip, ip, asr #25
    161c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1620:	25f72008 	ldrbcs	r2, [r7, #8]!
    1624:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1628:	03749f25 	cmneq	r4, #37, 30	; 0x94
    162c:	03780000 	cmneq	r8, #0
    1630:	00170000 	andseq	r0, r7, r0
    1634:	2cf70074 	ldclcs	0, cr0, [r7], #464	; 0x1d0
    1638:	007325f7 	ldrshteq	r2, [r3], #-87	; 0xffffffa9
    163c:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1640:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1644:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1648:	789f2533 	ldmvc	pc, {r0, r1, r4, r5, r8, sl, sp}	; <UNPREDICTABLE>
    164c:	ac000003 	stcge	0, cr0, [r0], {3}
    1650:	1c000003 	stcne	0, cr0, [r0], {3}
    1654:	f7007400 			; <UNDEFINED> instruction: 0xf7007400
    1658:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    165c:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1660:	0000cccc 	andeq	ip, r0, ip, asr #25
    1664:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1668:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    166c:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1670:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1674:	00000000 	andeq	r0, r0, r0
    1678:	00037000 	andeq	r7, r3, r0
    167c:	00039400 	andeq	r9, r3, r0, lsl #8
    1680:	50000100 	andpl	r0, r0, r0, lsl #2
    1684:	00000394 	muleq	r0, r4, r3
    1688:	0000039c 	muleq	r0, ip, r3
    168c:	00750009 	rsbseq	r0, r5, r9
    1690:	71240073 	teqvc	r4, r3, ror r0
    1694:	9c9f2100 	ldflss	f2, [pc], {0}
    1698:	9f000003 	svcls	0x00000003
    169c:	01000003 	tsteq	r0, r3
    16a0:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    16ac:	00040000 	andeq	r0, r4, r0
    16b0:	00010000 	andeq	r0, r1, r0
    16b4:	00000452 	andeq	r0, r0, r2, asr r4
    16b8:	00002000 	andeq	r2, r0, r0
    16bc:	f3000400 	vshl.u8	d0, d0, d0
    16c0:	009f5201 	addseq	r5, pc, r1, lsl #4
	...
    16cc:	0c000000 	stceq	0, cr0, [r0], {-0}
    16d0:	01000000 	mrseq	r0, (UNDEF: 0)
    16d4:	000c5000 	andeq	r5, ip, r0
    16d8:	00140000 	andseq	r0, r4, r0
    16dc:	00030000 	andeq	r0, r3, r0
    16e0:	149f0173 	ldrne	r0, [pc], #371	; 16e8 <_start-0x6918>
    16e4:	20000000 	andcs	r0, r0, r0
    16e8:	01000000 	mrseq	r0, (UNDEF: 0)
    16ec:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    16f8:	000b0000 	andeq	r0, fp, r0
    16fc:	00010000 	andeq	r0, r1, r0
    1700:	00000b50 	andeq	r0, r0, r0, asr fp
    1704:	00001400 	andeq	r1, r0, r0, lsl #8
    1708:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	00008010 	andeq	r8, r0, r0, lsl r0
  14:	00000264 	andeq	r0, r0, r4, ror #4
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	04f90002 	ldrbteq	r0, [r9], #2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	00008328 	andeq	r8, r0, r8, lsr #6
  34:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	0a530002 	beq	14c0054 <__bss_end__+0x14b632c>
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	000084f8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
  54:	0000005c 	andeq	r0, r0, ip, asr r0
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	0d3b0002 	ldceq	0, cr0, [fp, #-8]!
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	00008554 	andeq	r8, r0, r4, asr r5
  74:	00000058 	andeq	r0, r0, r8, asr r0
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	0ed00002 	cdpeq	0, 13, cr0, cr0, cr2, {0}
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	000085ac 	andeq	r8, r0, ip, lsr #11
  94:	00000034 	andeq	r0, r0, r4, lsr r0
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	0fc20002 	svceq	0x00c20002
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	000085e0 	andeq	r8, r0, r0, ror #11
  b4:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	161a0002 	ldrne	r0, [sl], -r2
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	00008ad0 	ldrdeq	r8, [r0], -r0
  d4:	00000028 	andeq	r0, r0, r8, lsr #32
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	171d0002 	ldrne	r0, [sp, -r2]
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	00008af8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
  f4:	00000034 	andeq	r0, r0, r4, lsr r0
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	182c0002 	stmdane	ip!, {r1}
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	00008b2c 	andeq	r8, r0, ip, lsr #22
 114:	00000074 	andeq	r0, r0, r4, ror r0
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	19dd0002 	ldmibne	sp, {r1}^
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	00008ba0 	andeq	r8, r0, r0, lsr #23
 134:	00000098 	muleq	r0, r8, r0
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	1bd80002 	blne	ff600154 <__bss_end__+0xff5f642c>
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	00008c38 	andeq	r8, r0, r8, lsr ip
 154:	00000178 	andeq	r0, r0, r8, ror r1
	...
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	1f240002 	svcne	0x00240002
 168:	00040000 	andeq	r0, r4, r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	00008e14 	andeq	r8, r0, r4, lsl lr
 174:	00000154 	andeq	r0, r0, r4, asr r1
	...
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	23270002 	teqcs	r7, #2
 188:	00040000 	andeq	r0, r4, r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	00008f68 	andeq	r8, r0, r8, ror #30
 194:	000003ac 	andeq	r0, r0, ip, lsr #7
	...
 1a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a4:	28930002 	ldmcs	r3, {r1}
 1a8:	00040000 	andeq	r0, r4, r0
 1ac:	00000000 	andeq	r0, r0, r0
 1b0:	00009314 	andeq	r9, r0, r4, lsl r3
 1b4:	00000020 	andeq	r0, r0, r0, lsr #32
	...
 1c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c4:	29720002 	ldmdbcs	r2!, {r1}^
 1c8:	00040000 	andeq	r0, r4, r0
 1cc:	00000000 	andeq	r0, r0, r0
 1d0:	00009334 	andeq	r9, r0, r4, lsr r3
 1d4:	00000014 	andeq	r0, r0, r4, lsl r0
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000143 	andeq	r0, r0, r3, asr #2
   4:	00b30002 	adcseq	r0, r3, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
  1c:	69742f2e 	ldmdbvs	r4!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
  20:	2d72656d 	cfldr64cs	mvdx6, [r2, #-436]!	; 0xfffffe4c
  24:	00746e69 	rsbseq	r6, r4, r9, ror #28
  28:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
  2c:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
  30:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
  34:	2f6e756a 	svccs	0x006e756a
  38:	6b736544 	blvs	1cd9550 <__bss_end__+0x1ccf828>
  3c:	2f706f74 	svccs	0x00706f74
  40:	6f686373 	svcvs	0x00686373
  44:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
  48:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
  4c:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
  50:	53432f30 	movtpl	r2, #16176	; 0x3f30
  54:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
  58:	3173632f 	cmncc	r3, pc, lsr #6
  5c:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
  60:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
  64:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
  68:	00697062 	rsbeq	r7, r9, r2, rrx
  6c:	72706700 	rsbsvc	r6, r0, #0, 14
  70:	632e666f 	teqvs	lr, #116391936	; 0x6f00000
  74:	00000000 	andeq	r0, r0, r0
  78:	2d697072 	stclcs	0, cr7, [r9, #-456]!	; 0xfffffe38
  7c:	746d7261 	strbtvc	r7, [sp], #-609	; 0x261
  80:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
  84:	0100682e 	tsteq	r0, lr, lsr #16
  88:	70720000 	rsbsvc	r0, r2, r0
  8c:	6e692d69 	cdpvs	13, 6, cr2, cr9, cr9, {3}
  90:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
  94:	73747075 	cmnvc	r4, #117	; 0x75
  98:	0100682e 	tsteq	r0, lr, lsr #16
  9c:	70720000 	rsbsvc	r0, r2, r0
  a0:	00682e69 	rsbeq	r2, r8, r9, ror #28
  a4:	74000002 	strvc	r0, [r0], #-2
  a8:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
  ac:	746e692d 	strbtvc	r6, [lr], #-2349	; 0x92d
  b0:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
  b4:	682e7470 	stmdavs	lr!, {r4, r5, r6, sl, ip, sp, lr}
  b8:	00000100 	andeq	r0, r0, r0, lsl #2
  bc:	02050000 	andeq	r0, r5, #0
  c0:	00008010 	andeq	r8, r0, r0, lsl r0
  c4:	31012e03 	tstcc	r1, r3, lsl #28
  c8:	832f2d4b 	teqhi	pc, #4800	; 0x12c0
  cc:	02002b67 	andeq	r2, r0, #105472	; 0x19c00
  d0:	2e060104 	adfcss	f0, f6, f4
  d4:	83676e06 	cmnhi	r7, #6, 28	; 0x60
  d8:	4b4c874b 	blmi	1321e0c <__bss_end__+0x13180e4>
  dc:	9f2f2c2f 	svcls	0x002f2c2f
  e0:	04020064 	streq	r0, [r2], #-100	; 0x64
  e4:	062e0601 	strteq	r0, [lr], -r1, lsl #12
  e8:	8256036c 	subshi	r0, r6, #108, 6	; 0xb0000001
  ec:	2d4ba230 	sfmcs	f2, 3, [fp, #-192]	; 0xffffff40
  f0:	02040200 	andeq	r0, r4, #0, 4
  f4:	0402002f 	streq	r0, [r2], #-47	; 0x2f
  f8:	02004b02 	andeq	r4, r0, #2048	; 0x800
  fc:	002c0204 	eoreq	r0, ip, r4, lsl #4
 100:	06010402 	streq	r0, [r1], -r2, lsl #8
 104:	034f062e 	movteq	r0, #63022	; 0xf62e
 108:	2f4b662a 	svccs	0x004b662a
 10c:	4a09034e 	bmi	240e4c <__bss_end__+0x237124>
 110:	2f4d8467 	svccs	0x004d8467
 114:	01040200 	mrseq	r0, R12_usr
 118:	002e4a06 	eoreq	r4, lr, r6, lsl #20
 11c:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 120:	03040200 	movweq	r0, #16896	; 0x4200
 124:	4ba54b06 	blmi	fe952d44 <__bss_end__+0xfe94901c>
 128:	4c304b30 	ldcmi	11, cr4, [r0], #-192	; 0xffffff40
 12c:	312f694c 	teqcc	pc, ip, asr #18
 130:	2f4d2f4b 	svccs	0x004d2f4b
 134:	292f312f 	stmdbcs	pc!, {r0, r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
 138:	bb2fd82f 	bllt	bf61fc <__bss_end__+0xbec4d4>
 13c:	01040200 	mrseq	r0, R12_usr
 140:	10026d45 	andne	r6, r2, r5, asr #26
 144:	c5010100 	strgt	r0, [r1, #-256]	; 0x100
 148:	02000000 	andeq	r0, r0, #0
 14c:	00008600 	andeq	r8, r0, r0, lsl #12
 150:	fb010200 	blx	4095a <__bss_end__+0x36c32>
 154:	01000d0e 	tsteq	r0, lr, lsl #26
 158:	00010101 	andeq	r0, r1, r1, lsl #2
 15c:	00010000 	andeq	r0, r1, r0
 160:	552f0100 	strpl	r0, [pc, #-256]!	; 68 <_start-0x7f98>
 164:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 168:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 16c:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 170:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 174:	6f746b73 	svcvs	0x00746b73
 178:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 17c:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; ffffffe4 <__bss_end__+0xffff62bc>
 180:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 184:	31726574 	cmncc	r2, r4, ror r5
 188:	2f303239 	svccs	0x00303239
 18c:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 190:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 194:	30343173 	eorscc	r3, r4, r3, ror r1
 198:	30322d65 	eorscc	r2, r2, r5, ror #26
 19c:	2f6e6977 	svccs	0x006e6977
 1a0:	7062696c 	rsbvc	r6, r2, ip, ror #18
 1a4:	69000069 	stmdbvs	r0, {r0, r3, r5, r6}
 1a8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 1ac:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
 1b0:	2e632d73 	mcrcs	13, 3, r2, cr3, cr3, {3}
 1b4:	00000063 	andeq	r0, r0, r3, rrx
 1b8:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 1bc:	0100682e 	tsteq	r0, lr, lsr #16
 1c0:	70720000 	rsbsvc	r0, r2, r0
 1c4:	6e692d69 	cdpvs	13, 6, cr2, cr9, cr9, {3}
 1c8:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
 1cc:	73747075 	cmnvc	r4, #117	; 0x75
 1d0:	0000682e 	andeq	r6, r0, lr, lsr #16
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	83280205 	teqhi	r8, #1342177280	; 0x50000000
 1dc:	31160000 	tstcc	r6, r0
 1e0:	0e036767 	cdpeq	7, 0, cr6, cr3, cr7, {3}
 1e4:	2d2f832e 	stccs	3, cr8, [pc, #-184]!	; 134 <_start-0x7ecc>
 1e8:	02040200 	andeq	r0, r4, #0, 4
 1ec:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 1f0:	02006502 	andeq	r6, r0, #8388608	; 0x800000
 1f4:	2e060104 	adfcss	f0, f6, f4
 1f8:	4ba24c06 	blmi	fe893218 <__bss_end__+0xfe8894f0>
 1fc:	084b9408 	stmdaeq	fp, {r3, sl, ip, pc}^
 200:	92084b92 	andls	r4, r8, #149504	; 0x24800
 204:	4b92084b 	blmi	fe482338 <__bss_end__+0xfe478610>
 208:	024b9208 	subeq	r9, fp, #8, 4	; 0x80000000
 20c:	0101001a 	tsteq	r1, sl, lsl r0
 210:	0000012a 	andeq	r0, r0, sl, lsr #2
 214:	010a0002 	tsteq	sl, r2
 218:	01020000 	mrseq	r0, (UNDEF: 2)
 21c:	000d0efb 	strdeq	r0, [sp], -fp
 220:	01010101 	tsteq	r1, r1, lsl #2
 224:	01000000 	mrseq	r0, (UNDEF: 0)
 228:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
 22c:	69742f2e 	ldmdbvs	r4!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 230:	2d72656d 	cfldr64cs	mvdx6, [r2, #-436]!	; 0xfffffe4c
 234:	2f746e69 	svccs	0x00746e69
 238:	73752f00 	cmnvc	r5, #0, 30
 23c:	6f6c2f72 	svcvs	0x006c2f72
 240:	2f6c6163 	svccs	0x006c6163
 244:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
 248:	612f7261 	teqvs	pc, r1, ror #4
 24c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 250:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 254:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 258:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 25c:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
 260:	30373173 	eorscc	r3, r7, r3, ror r1
 264:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 268:	63672f62 	cmnvs	r7, #392	; 0x188
 26c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
 270:	6f6e2d6d 	svcvs	0x006e2d6d
 274:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 278:	2f696261 	svccs	0x00696261
 27c:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 280:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
 284:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
 288:	552f0065 	strpl	r0, [pc, #-101]!	; 22b <_start-0x7dd5>
 28c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 290:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 294:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 298:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 29c:	6f746b73 	svcvs	0x00746b73
 2a0:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 2a4:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 10c <_start-0x7ef4>
 2a8:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 2ac:	31726574 	cmncc	r2, r4, ror r5
 2b0:	2f303239 	svccs	0x00303239
 2b4:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 2b8:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 2bc:	30343173 	eorscc	r3, r4, r3, ror r1
 2c0:	30322d65 	eorscc	r2, r2, r5, ror #26
 2c4:	2f6e6977 	svccs	0x006e6977
 2c8:	7062696c 	rsbvc	r6, r2, ip, ror #18
 2cc:	74000069 	strvc	r0, [r0], #-105	; 0x69
 2d0:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 2d4:	746e692d 	strbtvc	r6, [lr], #-2349	; 0x92d
 2d8:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
 2dc:	632e7470 	teqvs	lr, #112, 8	; 0x70000000
 2e0:	00000100 	andeq	r0, r0, r0, lsl #2
 2e4:	2d697072 	stclcs	0, cr7, [r9, #-456]!	; 0xfffffe38
 2e8:	746d7261 	strbtvc	r7, [sp], #-609	; 0x261
 2ec:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 2f0:	0100682e 	tsteq	r0, lr, lsr #16
 2f4:	74730000 	ldrbtvc	r0, [r3], #-0
 2f8:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
 2fc:	6363672d 	cmnvs	r3, #11796480	; 0xb40000
 300:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 304:	70720000 	rsbsvc	r0, r2, r0
 308:	6e692d69 	cdpvs	13, 6, cr2, cr9, cr9, {3}
 30c:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
 310:	73747075 	cmnvc	r4, #117	; 0x75
 314:	0100682e 	tsteq	r0, lr, lsr #16
 318:	70720000 	rsbsvc	r0, r2, r0
 31c:	00682e69 	rsbeq	r2, r8, r9, ror #28
 320:	00000003 	andeq	r0, r0, r3
 324:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
 328:	03000084 	movweq	r0, #132	; 0x84
 32c:	0b03013e 	bleq	c082c <__bss_end__+0xb6b04>
 330:	46034b4a 	strmi	r4, [r3], -sl, asr #22
 334:	6a324b66 	bvs	c930d4 <__bss_end__+0xc893ac>
 338:	000e026a 	andeq	r0, lr, sl, ror #4
 33c:	01020101 	tsteq	r2, r1, lsl #2
 340:	00020000 	andeq	r0, r2, r0
 344:	000000eb 	andeq	r0, r0, fp, ror #1
 348:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 34c:	0101000d 	tsteq	r1, sp
 350:	00000101 	andeq	r0, r0, r1, lsl #2
 354:	00000100 	andeq	r0, r0, r0, lsl #2
 358:	62696c01 	rsbvs	r6, r9, #256	; 0x100
 35c:	752f0063 	strvc	r0, [pc, #-99]!	; 301 <_start-0x7cff>
 360:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 19c <_start-0x7e64>
 364:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 368:	6c65432f 	stclvs	3, cr4, [r5], #-188	; 0xffffff44
 36c:	2f72616c 	svccs	0x0072616c
 370:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 374:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 378:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 37c:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 380:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
 384:	37317363 	ldrcc	r7, [r1, -r3, ror #6]!
 388:	6c2f6530 	cfstr32vs	mvfx6, [pc], #-192	; 2d0 <_start-0x7d30>
 38c:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
 390:	612f6363 	teqvs	pc, r3, ror #6
 394:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 398:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 39c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 3a0:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 3a4:	692f332e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, r9, ip, sp}	; <UNPREDICTABLE>
 3a8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
 3ac:	2f006564 	svccs	0x00006564
 3b0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 3b4:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 3b8:	6a6e6169 	bvs	1b98964 <__bss_end__+0x1b8ec3c>
 3bc:	442f6e75 	strtmi	r6, [pc], #-3701	; 3c4 <_start-0x7c3c>
 3c0:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 3c4:	732f706f 	teqvc	pc, #111	; 0x6f
 3c8:	6f6f6863 	svcvs	0x006f6863
 3cc:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 3d0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 3d4:	30323931 	eorscc	r3, r2, r1, lsr r9
 3d8:	3153432f 	cmpcc	r3, pc, lsr #6
 3dc:	2f453034 	svccs	0x00453034
 3e0:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 3e4:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 3e8:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 3ec:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 3f0:	00006970 	andeq	r6, r0, r0, ror r9
 3f4:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 3f8:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
 3fc:	00000100 	andeq	r0, r0, r0, lsl #2
 400:	61647473 	smcvs	18243	; 0x4743
 404:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
 408:	00000200 	andeq	r0, r0, r0, lsl #4
 40c:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
 410:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
 414:	00003e6e 	andeq	r3, r0, lr, ror #28
 418:	70720000 	rsbsvc	r0, r2, r0
 41c:	00682e69 	rsbeq	r2, r8, r9, ror #28
 420:	76000003 	strvc	r0, [r0], -r3
 424:	72702d61 	rsbsvc	r2, r0, #6208	; 0x1840
 428:	6b746e69 	blvs	1d1bdd4 <__bss_end__+0x1d120ac>
 42c:	0100682e 	tsteq	r0, lr, lsr #16
 430:	00000000 	andeq	r0, r0, r0
 434:	85540205 	ldrbhi	r0, [r4, #-517]	; 0x205
 438:	6b170000 	blvs	5c0440 <__bss_end__+0x5b6718>
 43c:	0289bf4b 	addeq	fp, r9, #300	; 0x12c
 440:	0101000e 	tsteq	r1, lr
 444:	00000096 	muleq	r0, r6, r0
 448:	006f0002 	rsbeq	r0, pc, r2
 44c:	01020000 	mrseq	r0, (UNDEF: 2)
 450:	000d0efb 	strdeq	r0, [sp], -fp
 454:	01010101 	tsteq	r1, r1, lsl #2
 458:	01000000 	mrseq	r0, (UNDEF: 0)
 45c:	6c010000 	stcvs	0, cr0, [r1], {-0}
 460:	00636269 	rsbeq	r6, r3, r9, ror #4
 464:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 468:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 46c:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 470:	2f6e756a 	svccs	0x006e756a
 474:	6b736544 	blvs	1cd998c <__bss_end__+0x1ccfc64>
 478:	2f706f74 	svccs	0x00706f74
 47c:	6f686373 	svcvs	0x00686373
 480:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 484:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 488:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 48c:	53432f30 	movtpl	r2, #16176	; 0x3f30
 490:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 494:	3173632f 	cmncc	r3, pc, lsr #6
 498:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 49c:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 4a0:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 4a4:	00697062 	rsbeq	r7, r9, r2, rrx
 4a8:	74757000 	ldrbtvc	r7, [r5], #-0
 4ac:	00632e6b 	rsbeq	r2, r3, fp, ror #28
 4b0:	72000001 	andvc	r0, r0, #1
 4b4:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 4b8:	00000200 	andeq	r0, r0, r0, lsl #4
 4bc:	02050000 	andeq	r0, r5, #0
 4c0:	000085ac 	andeq	r8, r0, ip, lsr #11
 4c4:	002d4c15 	eoreq	r4, sp, r5, lsl ip
 4c8:	2f020402 	svccs	0x00020402
 4cc:	02040200 	andeq	r0, r4, #0, 4
 4d0:	04020049 	streq	r0, [r2], #-73	; 0x49
 4d4:	062e0601 	strteq	r0, [lr], -r1, lsl #12
 4d8:	0006026b 	andeq	r0, r6, fp, ror #4
 4dc:	01dc0101 	bicseq	r0, ip, r1, lsl #2
 4e0:	00020000 	andeq	r0, r2, r0
 4e4:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 4e8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 4ec:	0101000d 	tsteq	r1, sp
 4f0:	00000101 	andeq	r0, r0, r1, lsl #2
 4f4:	00000100 	andeq	r0, r0, r0, lsl #2
 4f8:	62696c01 	rsbvs	r6, r9, #256	; 0x100
 4fc:	752f0063 	strvc	r0, [pc, #-99]!	; 4a1 <_start-0x7b5f>
 500:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 33c <_start-0x7cc4>
 504:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 508:	6c65432f 	stclvs	3, cr4, [r5], #-188	; 0xffffff44
 50c:	2f72616c 	svccs	0x0072616c
 510:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 514:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 518:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 51c:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 520:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
 524:	37317363 	ldrcc	r7, [r1, -r3, ror #6]!
 528:	6c2f6530 	cfstr32vs	mvfx6, [pc], #-192	; 470 <_start-0x7b90>
 52c:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
 530:	612f6363 	teqvs	pc, r3, ror #6
 534:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 538:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 53c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 540:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 544:	692f332e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, r9, ip, sp}	; <UNPREDICTABLE>
 548:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
 54c:	2f006564 	svccs	0x00006564
 550:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 554:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 558:	6a6e6169 	bvs	1b98b04 <__bss_end__+0x1b8eddc>
 55c:	442f6e75 	strtmi	r6, [pc], #-3701	; 564 <_start-0x7a9c>
 560:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 564:	732f706f 	teqvc	pc, #111	; 0x6f
 568:	6f6f6863 	svcvs	0x006f6863
 56c:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 570:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 574:	30323931 	eorscc	r3, r2, r1, lsr r9
 578:	3153432f 	cmpcc	r3, pc, lsr #6
 57c:	2f453034 	svccs	0x00453034
 580:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 584:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 588:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 58c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 590:	00006970 	andeq	r6, r0, r0, ror r9
 594:	702d6176 	eorvc	r6, sp, r6, ror r1
 598:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 59c:	00632e6b 	rsbeq	r2, r3, fp, ror #28
 5a0:	73000001 	movwvc	r0, #1
 5a4:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
 5a8:	00682e67 	rsbeq	r2, r8, r7, ror #28
 5ac:	72000002 	andvc	r0, r0, #2
 5b0:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 5b4:	00000300 	andeq	r0, r0, r0, lsl #6
 5b8:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
 5bc:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
 5c0:	00003e6e 	andeq	r3, r0, lr, ror #28
 5c4:	00000000 	andeq	r0, r0, r0
 5c8:	85e00205 	strbhi	r0, [r0, #517]!	; 0x205
 5cc:	26030000 	strcs	r0, [r3], -r0
 5d0:	13a50101 			; <UNDEFINED> instruction: 0x13a50101
 5d4:	02002d31 	andeq	r2, r0, #3136	; 0xc40
 5d8:	002f0204 	eoreq	r0, pc, r4, lsl #4
 5dc:	2d020402 	cfstrscs	mvf0, [r2, #-8]
 5e0:	02040200 	andeq	r0, r4, #0, 4
 5e4:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 5e8:	4c4c2d01 	mcrrmi	13, 0, r2, ip, cr1
 5ec:	2f4b1430 	svccs	0x004b1430
 5f0:	0402004f 	streq	r0, [r2], #-79	; 0x4f
 5f4:	02006702 	andeq	r6, r0, #524288	; 0x80000
 5f8:	4c650104 	stfmie	f0, [r5], #-16
 5fc:	2fa0304d 	svccs	0x00a0304d
 600:	26023031 			; <UNDEFINED> instruction: 0x26023031
 604:	2c2d8416 	cfstrscs	mvf8, [sp], #-88	; 0xffffffa8
 608:	01040200 	mrseq	r0, R12_usr
 60c:	04020030 	streq	r0, [r2], #-48	; 0x30
 610:	66063301 	strvs	r3, [r6], -r1, lsl #6
 614:	01040200 	mrseq	r0, R12_usr
 618:	0402002e 	streq	r0, [r2], #-46	; 0x2e
 61c:	21080601 	tstcs	r8, r1, lsl #12
 620:	73032f67 	movwvc	r2, #16231	; 0x3f67
 624:	2e130382 	cdpcs	3, 1, cr0, cr3, cr2, {4}
 628:	01040200 	mrseq	r0, R12_usr
 62c:	02002e06 	andeq	r2, r0, #6, 28	; 0x60
 630:	9f060104 	svcls	0x00060104
 634:	67034b6a 	strvs	r4, [r3, -sl, ror #22]
 638:	2e21032e 	cdpcs	3, 2, cr0, cr1, cr14, {1}
 63c:	01040200 	mrseq	r0, R12_usr
 640:	02002e06 	andeq	r2, r0, #6, 28	; 0x60
 644:	9f060104 	svcls	0x00060104
 648:	01040200 	mrseq	r0, R12_usr
 64c:	03f3bd6a 	mvnseq	fp, #6784	; 0x1a80
 650:	20087fa6 	andcs	r7, r8, r6, lsr #31
 654:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 658:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 65c:	032f4bbb 	teqeq	pc, #191488	; 0x2ec00
 660:	83f200da 	mvnshi	r0, #218	; 0xda
 664:	2f31484c 	svccs	0x0031484c
 668:	2f4b842f 	svccs	0x004b842f
 66c:	30314d2d 	eorscc	r4, r1, sp, lsr #26
 670:	0200832f 	andeq	r8, r0, #-1140850688	; 0xbc000000
 674:	be2c0104 	suflte	f0, f4, f4
 678:	01040200 	mrseq	r0, R12_usr
 67c:	bc064a06 	stclt	10, cr4, [r6], {6}
 680:	03163602 	tsteq	r6, #2097152	; 0x200000
 684:	2108ba0e 	tstcs	r8, lr, lsl #20
 688:	31210830 	teqcc	r1, r0, lsr r8
 68c:	08302108 	ldmdaeq	r0!, {r3, r8, sp}
 690:	304b3021 	subcc	r3, fp, r1, lsr #32
 694:	d9302108 	ldmdble	r0!, {r3, r8, sp}
 698:	02002f31 	andeq	r2, r0, #49, 30	; 0xc4
 69c:	00650104 	rsbeq	r0, r5, r4, lsl #2
 6a0:	06020402 	streq	r0, [r2], -r2, lsl #8
 6a4:	0402004a 	streq	r0, [r2], #-74	; 0x4a
 6a8:	42030601 	andmi	r0, r3, #1048576	; 0x100000
 6ac:	04020066 	streq	r0, [r2], #-102	; 0x66
 6b0:	06660602 	strbteq	r0, [r6], -r2, lsl #12
 6b4:	4a00c203 	bmi	30ec8 <__bss_end__+0x271a0>
 6b8:	00100268 	andseq	r0, r0, r8, ror #4
 6bc:	00930101 	addseq	r0, r3, r1, lsl #2
 6c0:	00020000 	andeq	r0, r2, r0
 6c4:	0000007d 	andeq	r0, r0, sp, ror r0
 6c8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 6cc:	0101000d 	tsteq	r1, sp
 6d0:	00000101 	andeq	r0, r0, r1, lsl #2
 6d4:	00000100 	andeq	r0, r0, r0, lsl #2
 6d8:	31736301 	cmncc	r3, r1, lsl #6
 6dc:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 6e0:	00637273 	rsbeq	r7, r3, r3, ror r2
 6e4:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 6e8:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 6ec:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 6f0:	2f6e756a 	svccs	0x006e756a
 6f4:	6b736544 	blvs	1cd9c0c <__bss_end__+0x1ccfee4>
 6f8:	2f706f74 	svccs	0x00706f74
 6fc:	6f686373 	svcvs	0x00686373
 700:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 704:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 708:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 70c:	53432f30 	movtpl	r2, #16176	; 0x3f30
 710:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 714:	3173632f 	cmncc	r3, pc, lsr #6
 718:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 71c:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 720:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 724:	00697062 	rsbeq	r7, r9, r2, rrx
 728:	656c6300 	strbvs	r6, [ip, #-768]!	; 0x300
 72c:	722d6e61 	eorvc	r6, sp, #1552	; 0x610
 730:	6f6f6265 	svcvs	0x006f6265
 734:	00632e74 	rsbeq	r2, r3, r4, ror lr
 738:	72000001 	andvc	r0, r0, #1
 73c:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 740:	00000200 	andeq	r0, r0, r0, lsl #4
 744:	02050000 	andeq	r0, r5, #0
 748:	00008ad0 	ldrdeq	r8, [r0], -r0
 74c:	4b832f15 	blmi	fe0cc3a8 <__bss_end__+0xfe0c2680>
 750:	01000602 	tsteq	r0, r2, lsl #12
 754:	00009601 	andeq	r9, r0, r1, lsl #12
 758:	77000200 	strvc	r0, [r0, -r0, lsl #4]
 75c:	02000000 	andeq	r0, r0, #0
 760:	0d0efb01 	vstreq	d15, [lr, #-4]
 764:	01010100 	mrseq	r0, (UNDEF: 17)
 768:	00000001 	andeq	r0, r0, r1
 76c:	01000001 	tsteq	r0, r1
 770:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 774:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
 778:	2f006372 	svccs	0x00006372
 77c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 780:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 784:	6a6e6169 	bvs	1b98d30 <__bss_end__+0x1b8f008>
 788:	442f6e75 	strtmi	r6, [pc], #-3701	; 790 <_start-0x7870>
 78c:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 790:	732f706f 	teqvc	pc, #111	; 0x6f
 794:	6f6f6863 	svcvs	0x006f6863
 798:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 79c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 7a0:	30323931 	eorscc	r3, r2, r1, lsr r9
 7a4:	3153432f 	cmpcc	r3, pc, lsr #6
 7a8:	2f453034 	svccs	0x00453034
 7ac:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 7b0:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 7b4:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 7b8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 7bc:	00006970 	andeq	r6, r0, r0, ror r9
 7c0:	61747363 	cmnvs	r4, r3, ror #6
 7c4:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
 7c8:	00000100 	andeq	r0, r0, r0, lsl #2
 7cc:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 7d0:	00020068 	andeq	r0, r2, r8, rrx
 7d4:	05000000 	streq	r0, [r0, #-0]
 7d8:	008af802 	addeq	pc, sl, r2, lsl #16
 7dc:	31321400 	teqcc	r2, r0, lsl #8
 7e0:	002f2d2f 	eoreq	r2, pc, pc, lsr #26
 7e4:	49010402 	stmdbmi	r1, {r1, sl}
 7e8:	06022f4d 	streq	r2, [r2], -sp, asr #30
 7ec:	99010100 	stmdbls	r1, {r8}
 7f0:	02000000 	andeq	r0, r0, #0
 7f4:	00007700 	andeq	r7, r0, r0, lsl #14
 7f8:	fb010200 	blx	41002 <__bss_end__+0x372da>
 7fc:	01000d0e 	tsteq	r0, lr, lsl #26
 800:	00010101 	andeq	r0, r1, r1, lsl #2
 804:	00010000 	andeq	r0, r1, r0
 808:	73630100 	cmnvc	r3, #0, 2
 80c:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 810:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 814:	73552f00 	cmpvc	r5, #0, 30
 818:	2f737265 	svccs	0x00737265
 81c:	61697262 	cmnvs	r9, r2, ror #4
 820:	6e756a6e 	vsubvs.f32	s13, s10, s29
 824:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 828:	706f746b 	rsbvc	r7, pc, fp, ror #8
 82c:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 830:	2f6c6f6f 	svccs	0x006c6f6f
 834:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 838:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 83c:	432f3032 	teqmi	pc, #50	; 0x32
 840:	30343153 	eorscc	r3, r4, r3, asr r1
 844:	73632f45 	cmnvc	r3, #276	; 0x114
 848:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 84c:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 850:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 6b4 <_start-0x794c>
 854:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 858:	65720000 	ldrbvs	r0, [r2, #-0]!
 85c:	746f6f62 	strbtvc	r6, [pc], #-3938	; 864 <_start-0x779c>
 860:	0100632e 	tsteq	r0, lr, lsr #6
 864:	70720000 	rsbsvc	r0, r2, r0
 868:	00682e69 	rsbeq	r2, r8, r9, ror #28
 86c:	00000002 	andeq	r0, r0, r2
 870:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
 874:	0300008b 	movweq	r0, #139	; 0x8b
 878:	3114010d 	tstcc	r4, sp, lsl #2
 87c:	2f15852f 	svccs	0x0015852f
 880:	672f4d4b 	strvs	r4, [pc, -fp, asr #26]!
 884:	02675235 	rsbeq	r5, r7, #1342177283	; 0x50000003
 888:	01010010 	tsteq	r1, r0, lsl r0
 88c:	000000a5 	andeq	r0, r0, r5, lsr #1
 890:	00760002 	rsbseq	r0, r6, r2
 894:	01020000 	mrseq	r0, (UNDEF: 2)
 898:	000d0efb 	strdeq	r0, [sp], -fp
 89c:	01010101 	tsteq	r1, r1, lsl #2
 8a0:	01000000 	mrseq	r0, (UNDEF: 0)
 8a4:	63010000 	movwvs	r0, #4096	; 0x1000
 8a8:	30343173 	eorscc	r3, r4, r3, ror r1
 8ac:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 8b0:	552f0063 	strpl	r0, [pc, #-99]!	; 855 <_start-0x77ab>
 8b4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 8b8:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 8bc:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 8c0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 8c4:	6f746b73 	svcvs	0x00746b73
 8c8:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 8cc:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 734 <_start-0x78cc>
 8d0:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 8d4:	31726574 	cmncc	r2, r4, ror r5
 8d8:	2f303239 	svccs	0x00303239
 8dc:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 8e0:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 8e4:	30343173 	eorscc	r3, r4, r3, ror r1
 8e8:	30322d65 	eorscc	r2, r2, r5, ror #26
 8ec:	2f6e6977 	svccs	0x006e6977
 8f0:	7062696c 	rsbvc	r6, r2, ip, ror #18
 8f4:	74000069 	strvc	r0, [r0], #-105	; 0x69
 8f8:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 8fc:	0100632e 	tsteq	r0, lr, lsr #6
 900:	70720000 	rsbsvc	r0, r2, r0
 904:	00682e69 	rsbeq	r2, r8, r9, ror #28
 908:	00000002 	andeq	r0, r0, r2
 90c:	a0020500 	andge	r0, r2, r0, lsl #10
 910:	1600008b 	strne	r0, [r0], -fp, lsl #1
 914:	002d2f13 	eoreq	r2, sp, r3, lsl pc
 918:	06010402 	streq	r0, [r1], -r2, lsl #8
 91c:	3168062e 	cmncc	r8, lr, lsr #12
 920:	2f4d4b2f 	svccs	0x004d4b2f
 924:	4c304b2f 	ldcmi	11, cr4, [r0], #-188	; 0xffffff44
 928:	6a2f4c4b 	bvs	bd3a5c <__bss_end__+0xbc9d34>
 92c:	2f842f2f 	svccs	0x00842f2f
 930:	01000802 	tsteq	r0, r2, lsl #16
 934:	00016b01 	andeq	r6, r1, r1, lsl #22
 938:	20000200 	andcs	r0, r0, r0, lsl #4
 93c:	02000001 	andeq	r0, r0, #1
 940:	0d0efb01 	vstreq	d15, [lr, #-4]
 944:	01010100 	mrseq	r0, (UNDEF: 17)
 948:	00000001 	andeq	r0, r0, r1
 94c:	01000001 	tsteq	r0, r1
 950:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
 954:	2f006372 	svccs	0x00006372
 958:	2f727375 	svccs	0x00727375
 95c:	61636f6c 	cmnvs	r3, ip, ror #30
 960:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
 964:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
 968:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 96c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 970:	61652d65 	cmnvs	r5, r5, ror #26
 974:	342f6962 	strtcc	r6, [pc], #-2402	; 97c <_start-0x7684>
 978:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 97c:	3173632d 	cmncc	r3, sp, lsr #6
 980:	2f653037 	svccs	0x00653037
 984:	2f62696c 	svccs	0x0062696c
 988:	2f636367 	svccs	0x00636367
 98c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 990:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 994:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 998:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 99c:	2f332e38 	svccs	0x00332e38
 9a0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 9a4:	00656475 	rsbeq	r6, r5, r5, ror r4
 9a8:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 9ac:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 9b0:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 9b4:	2f6e756a 	svccs	0x006e756a
 9b8:	6b736544 	blvs	1cd9ed0 <__bss_end__+0x1cd01a8>
 9bc:	2f706f74 	svccs	0x00706f74
 9c0:	6f686373 	svcvs	0x00686373
 9c4:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 9c8:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 9cc:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 9d0:	53432f30 	movtpl	r2, #16176	; 0x3f30
 9d4:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 9d8:	3173632f 	cmncc	r3, pc, lsr #6
 9dc:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 9e0:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 9e4:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 9e8:	00697062 	rsbeq	r7, r9, r2, rrx
 9ec:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 9f0:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
 9f4:	432f6c61 	teqmi	pc, #24832	; 0x6100
 9f8:	616c6c65 	cmnvs	ip, r5, ror #24
 9fc:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 a00:	6f6e2d6d 	svcvs	0x006e2d6d
 a04:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 a08:	2f696261 	svccs	0x00696261
 a0c:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 a10:	73632d33 	cmnvc	r3, #3264	; 0xcc0
 a14:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
 a18:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 a1c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 a20:	61652d65 	cmnvs	r5, r5, ror #26
 a24:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
 a28:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
 a2c:	00006564 	andeq	r6, r0, r4, ror #10
 a30:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
 a34:	2e636f6c 	cdpcs	15, 6, cr6, cr3, cr12, {3}
 a38:	00010063 	andeq	r0, r1, r3, rrx
 a3c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
 a40:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
 a44:	00020068 	andeq	r0, r2, r8, rrx
 a48:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 a4c:	0300682e 	movweq	r6, #2094	; 0x82e
 a50:	74730000 	ldrbtvc	r0, [r3], #-0
 a54:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
 a58:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
 a5c:	00000000 	andeq	r0, r0, r0
 a60:	8c380205 	lfmhi	f0, 4, [r8], #-20	; 0xffffffec
 a64:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
 a68:	02002f01 	andeq	r2, r0, #1, 30
 a6c:	82060104 	andhi	r0, r6, #4, 2
 a70:	4b4bbc06 	blmi	12efa90 <__bss_end__+0x12e5d68>
 a74:	2fbe4d4b 	svccs	0x00be4d4b
 a78:	01040200 	mrseq	r0, R12_usr
 a7c:	bc068206 	sfmlt	f0, 1, [r6], {6}
 a80:	02004b4b 	andeq	r4, r0, #76800	; 0x12c00
 a84:	4a060104 	bmi	180e9c <__bss_end__+0x177174>
 a88:	834bbb06 	movthi	fp, #47878	; 0xbb06
 a8c:	0a032f30 	beq	cc754 <__bss_end__+0xc2a2c>
 a90:	02002fba 	andeq	r2, r0, #744	; 0x2e8
 a94:	82060104 	andhi	r0, r6, #4, 2
 a98:	f967bb06 			; <UNDEFINED> instruction: 0xf967bb06
 a9c:	0214c213 	andseq	ip, r4, #805306369	; 0x30000001
 aa0:	01010008 	tsteq	r1, r8
 aa4:	00000077 	andeq	r0, r0, r7, ror r0
 aa8:	003b0002 	eorseq	r0, fp, r2
 aac:	01020000 	mrseq	r0, (UNDEF: 2)
 ab0:	000d0efb 	strdeq	r0, [sp], -fp
 ab4:	01010101 	tsteq	r1, r1, lsl #2
 ab8:	01000000 	mrseq	r0, (UNDEF: 0)
 abc:	63010000 	movwvs	r0, #4096	; 0x1000
 ac0:	30343173 	eorscc	r3, r4, r3, ror r1
 ac4:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 ac8:	75000063 	strvc	r0, [r0, #-99]	; 0x63
 acc:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
 ad0:	00000063 	andeq	r0, r0, r3, rrx
 ad4:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 ad8:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 adc:	72000001 	andvc	r0, r0, #1
 ae0:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 ae4:	00000000 	andeq	r0, r0, r0
 ae8:	02050000 	andeq	r0, r5, #0
 aec:	00008e14 	andeq	r8, r0, r4, lsl lr
 af0:	0100d603 	tsteq	r0, r3, lsl #12
 af4:	5e03672f 	cdppl	7, 0, cr6, cr3, cr15, {1}
 af8:	67333066 	ldrvs	r3, [r3, -r6, rrx]!
 afc:	30d8306d 	sbcscc	r3, r8, sp, rrx
 b00:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
 b04:	0a036867 	beq	daca8 <__bss_end__+0xd0f80>
 b08:	67673082 	strbvs	r3, [r7, -r2, lsl #1]!
 b0c:	6a672f69 	bvs	19cc8b8 <__bss_end__+0x19c2b90>
 b10:	2fc1674c 	svccs	0x00c1674c
 b14:	682f302f 	stmdavs	pc!, {r0, r1, r2, r3, r5, ip, sp}	; <UNPREDICTABLE>
 b18:	02023049 	andeq	r3, r2, #73	; 0x49
 b1c:	a5010100 	strge	r0, [r1, #-256]	; 0x100
 b20:	02000000 	andeq	r0, r0, #0
 b24:	00003200 	andeq	r3, r0, r0, lsl #4
 b28:	fb010200 	blx	41332 <__bss_end__+0x3760a>
 b2c:	01000d0e 	tsteq	r0, lr, lsl #26
 b30:	00010101 	andeq	r0, r1, r1, lsl #2
 b34:	00010000 	andeq	r0, r1, r0
 b38:	73630100 	cmnvc	r3, #0, 2
 b3c:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 b40:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 b44:	70670000 	rsbvc	r0, r7, r0
 b48:	632e6f69 	teqvs	lr, #420	; 0x1a4
 b4c:	00000000 	andeq	r0, r0, r0
 b50:	6f697067 	svcvs	0x00697067
 b54:	0100682e 	tsteq	r0, lr, lsr #16
 b58:	00000000 	andeq	r0, r0, r0
 b5c:	8f680205 	svchi	0x00680205
 b60:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
 b64:	69504e01 	ldmdbvs	r0, {r0, r9, sl, fp, lr}^
 b68:	67672108 	strbvs	r2, [r7, -r8, lsl #2]!
 b6c:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
 b70:	22084b32 	andcs	r4, r8, #51200	; 0xc800
 b74:	135131dc 	cmpne	r1, #220, 2	; 0x37
 b78:	be30504e 	cdplt	0, 3, cr5, cr0, cr14, {2}
 b7c:	4d135031 	ldcmi	0, cr5, [r3, #-196]	; 0xffffff3c
 b80:	4cc0304f 	stclmi	0, cr3, [r0], {79}	; 0x4f
 b84:	21086950 	tstcs	r8, r0, asr r9
 b88:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
 b8c:	4b326767 	blmi	c9a930 <__bss_end__+0xc90c08>
 b90:	4ca42108 	stfmis	f2, [r4], #32
 b94:	69842f50 	stmibvs	r4, {r4, r6, r8, r9, sl, fp, sp}
 b98:	03827503 	orreq	r7, r2, #12582912	; 0xc00000
 b9c:	304d2e0c 	subcc	r2, sp, ip, lsl #28
 ba0:	7f98034e 	svcvc	0x0098034e
 ba4:	4e13514a 	mufmism	f5, f3, #2.0
 ba8:	50a53050 	adcpl	r3, r5, r0, asr r0
 bac:	304f4d13 	subcc	r4, pc, r3, lsl sp	; <UNPREDICTABLE>
 bb0:	ba00c203 	blt	313c4 <__bss_end__+0x2769c>
 bb4:	08696b6a 	stmdaeq	r9!, {r1, r3, r5, r6, r8, r9, fp, sp, lr}^
 bb8:	67676721 	strbvs	r6, [r7, -r1, lsr #14]!
 bbc:	32676767 	rsbcc	r6, r7, #27000832	; 0x19c0000
 bc0:	0222084b 	eoreq	r0, r2, #4915200	; 0x4b0000
 bc4:	0101000c 	tsteq	r1, ip
 bc8:	000000ec 	andeq	r0, r0, ip, ror #1
 bcc:	00d00002 	sbcseq	r0, r0, r2
 bd0:	01020000 	mrseq	r0, (UNDEF: 2)
 bd4:	000d0efb 	strdeq	r0, [sp], -fp
 bd8:	01010101 	tsteq	r1, r1, lsl #2
 bdc:	01000000 	mrseq	r0, (UNDEF: 0)
 be0:	6c010000 	stcvs	0, cr0, [r1], {-0}
 be4:	00636269 	rsbeq	r6, r3, r9, ror #4
 be8:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 bec:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
 bf0:	432f6c61 	teqmi	pc, #24832	; 0x6100
 bf4:	616c6c65 	cmnvs	ip, r5, ror #24
 bf8:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 bfc:	6f6e2d6d 	svcvs	0x006e2d6d
 c00:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 c04:	2f696261 	svccs	0x00696261
 c08:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 c0c:	73632d33 	cmnvc	r3, #3264	; 0xcc0
 c10:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
 c14:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 c18:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
 c1c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 c20:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 c24:	61652d65 	cmnvs	r5, r5, ror #26
 c28:	342f6962 	strtcc	r6, [pc], #-2402	; c30 <_start-0x73d0>
 c2c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 c30:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 c34:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
 c38:	73752f00 	cmnvc	r5, #0, 30
 c3c:	6f6c2f72 	svcvs	0x006c2f72
 c40:	2f6c6163 	svccs	0x006c6163
 c44:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
 c48:	612f7261 	teqvs	pc, r1, ror #4
 c4c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 c50:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 c54:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 c58:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 c5c:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
 c60:	30373173 	eorscc	r3, r7, r3, ror r1
 c64:	72612f65 	rsbvc	r2, r1, #404	; 0x194
 c68:	6f6e2d6d 	svcvs	0x006e2d6d
 c6c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 c70:	2f696261 	svccs	0x00696261
 c74:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 c78:	00656475 	rsbeq	r6, r5, r5, ror r4
 c7c:	6d656d00 	stclvs	13, cr6, [r5, #-0]
 c80:	2e746573 	mrccs	5, 3, r6, cr4, cr3, {3}
 c84:	00010063 	andeq	r0, r1, r3, rrx
 c88:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
 c8c:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
 c90:	00020068 	andeq	r0, r2, r8, rrx
 c94:	72747300 	rsbsvc	r7, r4, #0, 6
 c98:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
 c9c:	00030068 	andeq	r0, r3, r8, rrx
 ca0:	05000000 	streq	r0, [r0, #-0]
 ca4:	00931402 	addseq	r1, r3, r2, lsl #8
 ca8:	4c131400 	cfldrsmi	mvf1, [r3], {-0}
 cac:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 cb0:	024d4901 	subeq	r4, sp, #16384	; 0x4000
 cb4:	01010002 	tsteq	r1, r2
 cb8:	00000086 	andeq	r0, r0, r6, lsl #1
 cbc:	00720002 	rsbseq	r0, r2, r2
 cc0:	01020000 	mrseq	r0, (UNDEF: 2)
 cc4:	000d0efb 	strdeq	r0, [sp], -fp
 cc8:	01010101 	tsteq	r1, r1, lsl #2
 ccc:	01000000 	mrseq	r0, (UNDEF: 0)
 cd0:	6c010000 	stcvs	0, cr0, [r1], {-0}
 cd4:	00636269 	rsbeq	r6, r3, r9, ror #4
 cd8:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 cdc:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 ce0:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 ce4:	2f6e756a 	svccs	0x006e756a
 ce8:	6b736544 	blvs	1cda200 <__bss_end__+0x1cd04d8>
 cec:	2f706f74 	svccs	0x00706f74
 cf0:	6f686373 	svcvs	0x00686373
 cf4:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 cf8:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 cfc:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 d00:	53432f30 	movtpl	r2, #16176	; 0x3f30
 d04:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 d08:	3173632f 	cmncc	r3, pc, lsr #6
 d0c:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 d10:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 d14:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 d18:	00697062 	rsbeq	r7, r9, r2, rrx
 d1c:	74757000 	ldrbtvc	r7, [r5], #-0
 d20:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 d24:	0100632e 	tsteq	r0, lr, lsr #6
 d28:	70720000 	rsbsvc	r0, r2, r0
 d2c:	00682e69 	rsbeq	r2, r8, r9, ror #28
 d30:	00000002 	andeq	r0, r0, r2
 d34:	34020500 	strcc	r0, [r2], #-1280	; 0x500
 d38:	14000093 	strne	r0, [r0], #-147	; 0x93
 d3c:	0006024a 	andeq	r0, r6, sl, asr #4
 d40:	Address 0x0000000000000d40 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6d746f6e 	ldclvs	15, cr6, [r4, #-440]!	; 0xfffffe48
   4:	006e6961 	rsbeq	r6, lr, r1, ror #18
   8:	5f6d7261 	svcpl	0x006d7261
   c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
  10:	41525f72 	cmpmi	r2, r2, ror pc
  14:	51524957 	cmppl	r2, r7, asr r9
  18:	72617500 	rsbvc	r7, r1, #0, 10
  1c:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
  20:	70007469 	andvc	r7, r0, r9, ror #8
  24:	6f697265 	svcvs	0x00697265
  28:	6f6c0064 	svcvs	0x006c0064
  2c:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
  30:	20676e6f 	rsbcs	r6, r7, pc, ror #28
  34:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  38:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
  3c:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
  40:	72706700 	rsbsvc	r6, r0, #0, 14
  44:	645f666f 	ldrbvs	r6, [pc], #-1647	; 4c <_start-0x7fb4>
  48:	00706d75 	rsbseq	r6, r0, r5, ror sp
  4c:	61736944 	cmnvs	r3, r4, asr #18
  50:	5f656c62 	svcpl	0x00656c62
  54:	73515249 	cmpvc	r1, #-1879048188	; 0x90000004
  58:	4400315f 	strmi	r3, [r0], #-351	; 0x15f
  5c:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
  60:	495f656c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
  64:	5f735152 	svcpl	0x00735152
  68:	696d0032 	stmdbvs	sp!, {r1, r4, r5}^
  6c:	61765f6e 	cmnvs	r6, lr, ror #30
  70:	6f6c006c 	svcvs	0x006c006c
  74:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
  78:	20676e6f 	rsbcs	r6, r7, pc, ror #28
  7c:	00746e69 	rsbseq	r6, r4, r9, ror #28
  80:	655f6370 	ldrbvs	r6, [pc, #-880]	; fffffd18 <__bss_end__+0xffff5ff0>
  84:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
  88:	616d6b00 	cmnvs	sp, r0, lsl #22
  8c:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
  90:	696c615f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r8, sp, lr}^
  94:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
  98:	6d726100 	ldfvse	f6, [r2, #-0]
  9c:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
  a0:	435f7265 	cmpmi	pc, #1342177286	; 0x50000006
  a4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
  a8:	66006c6f 	strvs	r6, [r0], -pc, ror #24
  ac:	746e6f72 	strbtvc	r6, [lr], #-3954	; 0xf72
  b0:	706f7473 	rsbvc	r7, pc, r3, ror r4	; <UNPREDICTABLE>
  b4:	6d726100 	ldfvse	f6, [r2, #-0]
  b8:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
  bc:	4c5f7265 	lfmmi	f7, 2, [pc], {101}	; 0x65
  c0:	0064616f 	rsbeq	r6, r4, pc, ror #2
  c4:	5f6d7261 	svcpl	0x006d7261
  c8:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
  cc:	61425f72 	hvcvs	9714	; 0x25f2
  d0:	49006573 	stmdbmi	r0, {r0, r1, r4, r5, r6, r8, sl, sp, lr}
  d4:	425f5152 	subsmi	r5, pc, #-2147483628	; 0x80000014
  d8:	00657361 	rsbeq	r7, r5, r1, ror #6
  dc:	6f727067 	svcvs	0x00727067
  e0:	6e695f66 	cdpvs	15, 6, cr5, cr9, cr6, {3}
  e4:	61007469 	tstvs	r0, r9, ror #8
  e8:	745f6d72 	ldrbvc	r6, [pc], #-3442	; f0 <_start-0x7f10>
  ec:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
  f0:	73614d5f 	cmnvc	r1, #6080	; 0x17c0
  f4:	4964656b 	stmdbmi	r4!, {r0, r1, r3, r5, r6, r8, sl, sp, lr}^
  f8:	49005152 	stmdbmi	r0, {r1, r4, r6, r8, ip, lr}
  fc:	705f5152 	subsvc	r5, pc, r2, asr r1	; <UNPREDICTABLE>
 100:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 104:	315f676e 	cmpcc	pc, lr, ror #14
 108:	51524900 	cmppl	r2, r0, lsl #18
 10c:	6e65705f 	mcrvs	0, 3, r7, cr5, cr15, {2}
 110:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
 114:	4400325f 	strmi	r3, [r0], #-607	; 0x25f
 118:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
 11c:	425f656c 	subsmi	r6, pc, #108, 10	; 0x1b000000
 120:	63697361 	cmnvs	r9, #-2080374783	; 0x84000001
 124:	5152495f 	cmppl	r2, pc, asr r9
 128:	6d6b0073 	stclvs	0, cr0, [fp, #-460]!	; 0xfffffe34
 12c:	6f6c6c61 	svcvs	0x006c6c61
 130:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 134:	73007469 	movwvc	r7, #1129	; 0x469
 138:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xf68
 13c:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 140:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
 144:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 148:	65640074 	strbvs	r0, [r4, #-116]!	; 0x74
 14c:	61625f76 	smcvs	9718	; 0x25f6
 150:	65697272 	strbvs	r7, [r9, #-626]!	; 0x272
 154:	70670072 	rsbvc	r0, r7, r2, ror r0
 158:	2e666f72 	mcrcs	15, 3, r6, cr6, cr2, {3}
 15c:	6e450063 	cdpvs	0, 4, cr0, cr5, cr3, {3}
 160:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
 164:	5152495f 	cmppl	r2, pc, asr r9
 168:	00315f73 	eorseq	r5, r1, r3, ror pc
 16c:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
 170:	495f656c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
 174:	5f735152 	svcpl	0x00735152
 178:	74690032 	strbtvc	r0, [r9], #-50	; 0x32
 17c:	63007265 	movwvs	r7, #613	; 0x265
 180:	6e61656c 	cdpvs	5, 6, cr6, cr1, cr12, {3}
 184:	6265725f 	rsbvs	r7, r5, #-268435451	; 0xf0000005
 188:	00746f6f 	rsbseq	r6, r4, pc, ror #30
 18c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
 190:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
 194:	6d726100 	ldfvse	f6, [r2, #-0]
 198:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
 19c:	525f7265 	subspl	r7, pc, #1342177286	; 0x50000006
 1a0:	616f6c65 	cmnvs	pc, r5, ror #24
 1a4:	45470064 	strbmi	r0, [r7, #-100]	; 0x64
 1a8:	00323354 	eorseq	r3, r2, r4, asr r3
 1ac:	5f746e69 	svcpl	0x00746e69
 1b0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
 1b4:	73797300 	cmnvc	r9, #0, 6
 1b8:	5f6d6574 	svcpl	0x006d6574
 1bc:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 1c0:	695f656c 	ldmdbvs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
 1c4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 1c8:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
 1cc:	69680073 	stmdbvs	r8!, {r0, r1, r4, r5, r6}^
 1d0:	6f635f74 	svcvs	0x00635f74
 1d4:	00746e75 	rsbseq	r6, r4, r5, ror lr
 1d8:	6f727067 	svcvs	0x00727067
 1dc:	69685f66 	stmdbvs	r8!, {r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 1e0:	75007473 	strvc	r7, [r0, #-1139]	; 0x473
 1e4:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 1e8:	2064656e 	rsbcs	r6, r4, lr, ror #10
 1ec:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 1f0:	6f687300 	svcvs	0x00687300
 1f4:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
 1f8:	4700746e 	strmi	r7, [r0, -lr, ror #8]
 1fc:	4320554e 	teqmi	r0, #327155712	; 0x13800000
 200:	382e3420 	stmdacc	lr!, {r5, sl, ip, sp}
 204:	2d20332e 	stccs	3, cr3, [r0, #-184]!	; 0xffffff48
 208:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0x36d
 20c:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 210:	36373131 			; <UNDEFINED> instruction: 0x36373131
 214:	2d667a6a 	vstmdbcs	r6!, {s15-s120}
 218:	6d2d2073 	stcvs	0, cr2, [sp, #-460]!	; 0xfffffe34
 21c:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0x574
 220:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 224:	36373131 			; <UNDEFINED> instruction: 0x36373131
 228:	2d667a6a 	vstmdbcs	r6!, {s15-s120}
 22c:	672d2073 			; <UNDEFINED> instruction: 0x672d2073
 230:	20626467 	rsbcs	r6, r2, r7, ror #8
 234:	20674f2d 	rsbcs	r4, r7, sp, lsr #30
 238:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0x32d
 23c:	756e673d 	strbvc	r6, [lr, #-1853]!	; 0x73d
 240:	2d203939 	stccs	9, cr3, [r0, #-228]!	; 0xffffff1c
 244:	65726666 	ldrbvs	r6, [r2, #-1638]!	; 0x666
 248:	61747365 	cmnvs	r4, r5, ror #6
 24c:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
 250:	70670067 	rsbvc	r0, r7, r7, rrx
 254:	5f666f72 	svcpl	0x00666f72
 258:	00636e69 	rsbeq	r6, r3, r9, ror #28
 25c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 260:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 264:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 268:	2f6e756a 	svccs	0x006e756a
 26c:	6b736544 	blvs	1cd9784 <__bss_end__+0x1ccfa5c>
 270:	2f706f74 	svccs	0x00706f74
 274:	6f686373 	svcvs	0x00686373
 278:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 27c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 280:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 284:	53432f30 	movtpl	r2, #16176	; 0x3f30
 288:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 28c:	3173632f 	cmncc	r3, pc, lsr #6
 290:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 294:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 298:	616c2f6e 	cmnvs	ip, lr, ror #30
 29c:	372f7362 	strcc	r7, [pc, -r2, ror #6]!
 2a0:	746e692d 	strbtvc	r6, [lr], #-2349	; 0x92d
 2a4:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
 2a8:	2f737470 	svccs	0x00737470
 2ac:	70672d32 	rsbvc	r2, r7, r2, lsr sp
 2b0:	00666f72 	rsbeq	r6, r6, r2, ror pc
 2b4:	5f6d7261 	svcpl	0x006d7261
 2b8:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 2bc:	72505f72 	subsvc	r5, r0, #456	; 0x1c8
 2c0:	76694465 	strbtvc	r4, [r9], -r5, ror #8
 2c4:	72656469 	rsbvc	r6, r5, #1761607680	; 0x69000000
 2c8:	51524900 	cmppl	r2, r0, lsl #18
 2cc:	7361625f 	cmnvc	r1, #-268435451	; 0xf0000005
 2d0:	705f6369 	subsvc	r6, pc, r9, ror #6
 2d4:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 2d8:	4500676e 	strmi	r6, [r0, #-1902]	; 0x76e
 2dc:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
 2e0:	61425f65 	cmpvs	r2, r5, ror #30
 2e4:	5f636973 	svcpl	0x00636973
 2e8:	73515249 	cmpvc	r1, #-1879048188	; 0x90000004
 2ec:	73696800 	cmnvc	r9, #0, 16
 2f0:	00745f74 	rsbseq	r5, r4, r4, ror pc
 2f4:	5f6d7261 	svcpl	0x006d7261
 2f8:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 2fc:	61565f72 	cmpvs	r6, r2, ror pc
 300:	0065756c 	rsbeq	r7, r5, ip, ror #10
 304:	5f6d7261 	svcpl	0x006d7261
 308:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 30c:	52495f72 	subpl	r5, r9, #456	; 0x1c8
 310:	656c4351 	strbvs	r4, [ip, #-849]!	; 0x351
 314:	74007261 	strvc	r7, [r0], #-609	; 0x261
 318:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 31c:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 320:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0x55f
 324:	69740063 	ldmdbvs	r4!, {r0, r1, r5, r6}^
 328:	5f72656d 	svcpl	0x0072656d
 32c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 330:	70757272 	rsbsvc	r7, r5, r2, ror r2
 334:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
 338:	72007469 	andvc	r7, r0, #1761607680	; 0x69000000
 33c:	615f6970 	cmpvs	pc, r0, ror r9	; <UNPREDICTABLE>
 340:	745f6d72 	ldrbvc	r6, [pc], #-3442	; 348 <_start-0x7cb8>
 344:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 348:	4600745f 			; <UNDEFINED> instruction: 0x4600745f
 34c:	635f5149 	cmpvs	pc, #1073741842	; 0x40000012
 350:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 354:	6c006c6f 	stcvs	12, cr6, [r0], {111}	; 0x6f
 358:	5f747361 	svcpl	0x00747361
 35c:	006b6c63 	rsbeq	r6, fp, r3, ror #24
 360:	33545550 	cmpcc	r4, #80, 10	; 0x14000000
 364:	72610032 	rsbvc	r0, r1, #50	; 0x32
 368:	69745f6d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 36c:	5f72656d 	svcpl	0x0072656d
 370:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
 374:	6e6e7552 	mcrvs	5, 3, r7, cr14, cr2, {2}
 378:	43676e69 	cmnmi	r7, #1680	; 0x690
 37c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
 380:	70007265 	andvc	r7, r0, r5, ror #4
 384:	65666572 	strbvs	r6, [r6, #-1394]!	; 0x572
 388:	5f686374 	svcpl	0x00686374
 38c:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 390:	65765f74 	ldrbvs	r5, [r6, #-3956]!	; 0xf74
 394:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 398:	73552f00 	cmpvc	r5, #0, 30
 39c:	2f737265 	svccs	0x00737265
 3a0:	61697262 	cmnvs	r9, r2, ror #4
 3a4:	6e756a6e 	vsubvs.f32	s13, s10, s29
 3a8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 3ac:	706f746b 	rsbvc	r7, pc, fp, ror #8
 3b0:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 3b4:	2f6c6f6f 	svccs	0x006c6f6f
 3b8:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 3bc:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 3c0:	432f3032 	teqmi	pc, #50	; 0x32
 3c4:	30343153 	eorscc	r3, r4, r3, asr r1
 3c8:	73632f45 	cmnvc	r3, #276	; 0x114
 3cc:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 3d0:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 3d4:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 238 <_start-0x7dc8>
 3d8:	2f736261 	svccs	0x00736261
 3dc:	6e692d37 	mcrvs	13, 3, r2, cr9, cr7, {1}
 3e0:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
 3e4:	73747075 	cmnvc	r4, #117	; 0x75
 3e8:	6d69742f 	cfstrdvs	mvd7, [r9, #-188]!	; 0xffffff44
 3ec:	692d7265 	pushvs	{r0, r2, r5, r6, r9, ip, sp, lr}
 3f0:	6900746e 	stmdbvs	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 3f4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 3f8:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
 3fc:	2e632d73 	mcrcs	13, 3, r2, cr3, cr3, {3}
 400:	695f0063 	ldmdbvs	pc, {r0, r1, r5, r6}^	; <UNPREDICTABLE>
 404:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 408:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
 40c:	6261745f 	rsbvs	r7, r1, #1593835520	; 0x5f000000
 410:	5f00656c 	svcpl	0x0000656c
 414:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 418:	70757272 	rsbsvc	r7, r5, r2, ror r2
 41c:	61745f74 	cmnvs	r4, r4, ror pc
 420:	5f656c62 	svcpl	0x00656c62
 424:	00646e65 	rsbeq	r6, r4, r5, ror #28
 428:	55465f5f 	strbpl	r5, [r6, #-3935]	; 0xf5f
 42c:	4954434e 	ldmdbmi	r4, {r1, r2, r3, r6, r8, r9, lr}^
 430:	5f5f4e4f 	svcpl	0x005f4e4f
 434:	74616400 	strbtvc	r6, [r1], #-1024	; 0x400
 438:	62615f61 	rsbvs	r5, r1, #388	; 0x184
 43c:	5f74726f 	svcpl	0x0074726f
 440:	74636576 	strbtvc	r6, [r3], #-1398	; 0x576
 444:	7500726f 	strvc	r7, [r0, #-623]	; 0x26f
 448:	6665646e 	strbtvs	r6, [r5], -lr, ror #8
 44c:	64656e69 	strbtvs	r6, [r5], #-3689	; 0xe69
 450:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
 454:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
 458:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
 45c:	6365765f 	cmnvs	r5, #99614720	; 0x5f00000
 460:	00726f74 	rsbseq	r6, r2, r4, ror pc
 464:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0x572
 468:	65765f74 	ldrbvs	r5, [r6, #-3956]!	; 0xf74
 46c:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 470:	666f7300 	strbtvs	r7, [pc], -r0, lsl #6
 474:	72617774 	rsbvc	r7, r1, #116, 14	; 0x1d00000
 478:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
 47c:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
 480:	5f747075 	svcpl	0x00747075
 484:	74636576 	strbtvc	r6, [r3], #-1398	; 0x576
 488:	6600726f 	strvs	r7, [r0], -pc, ror #4
 48c:	5f747361 	svcpl	0x00747361
 490:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 494:	70757272 	rsbsvc	r7, r5, r2, ror r2
 498:	65765f74 	ldrbvs	r5, [r6, #-3956]!	; 0xf74
 49c:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 4a0:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
 4a4:	655f7265 	ldrbvs	r7, [pc, #-613]	; 247 <_start-0x7db9>
 4a8:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
 4ac:	74006465 	strvc	r6, [r0], #-1125	; 0x465
 4b0:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 4b4:	6568635f 	strbvs	r6, [r8, #-863]!	; 0x35f
 4b8:	6f5f6b63 	svcvs	0x005f6b63
 4bc:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0x666
 4c0:	72007374 	andvc	r7, r0, #116, 6	; 0xd0000001
 4c4:	615f6970 	cmpvs	pc, r0, ror r9	; <UNPREDICTABLE>
 4c8:	745f6d72 	ldrbvc	r6, [pc], #-3442	; 4d0 <_start-0x7b30>
 4cc:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 4d0:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 4d4:	00745f6c 	rsbseq	r5, r4, ip, ror #30
 4d8:	6379636e 	cmnvs	r9, #-1207959551	; 0xb8000001
 4dc:	0073656c 	rsbseq	r6, r3, ip, ror #10
 4e0:	5f657375 	svcpl	0x00657375
 4e4:	69623233 	stmdbvs	r2!, {r0, r1, r4, r5, r9, ip, sp}^
 4e8:	6f635f74 	svcvs	0x00635f74
 4ec:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xe75
 4f0:	6e690072 	mcrvs	0, 3, r0, cr9, cr2, {3}
 4f4:	6e655f74 	mcrvs	15, 3, r5, cr5, cr4, {3}
 4f8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
 4fc:	2e2e0064 	cdpcs	0, 2, cr0, cr14, cr4, {3}
 500:	6d69742f 	cfstrdvs	mvd7, [r9, #-188]!	; 0xffffff44
 504:	692d7265 	pushvs	{r0, r2, r5, r6, r9, ip, sp, lr}
 508:	2f2f746e 	svccs	0x002f746e
 50c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 510:	6e692d72 	mcrvs	13, 3, r2, cr9, cr2, {3}
 514:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
 518:	2e747075 	mrccs	0, 3, r7, cr4, cr5, {3}
 51c:	6f630063 	svcvs	0x00630063
 520:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xe75
 524:	6e655f72 	mcrvs	15, 3, r5, cr5, cr2, {3}
 528:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
 52c:	6f630064 	svcvs	0x00630064
 530:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xe75
 534:	72705f72 	rsbsvc	r5, r0, #456	; 0x1c8
 538:	61637365 	cmnvs	r3, r5, ror #6
 53c:	0072656c 	rsbseq	r6, r2, ip, ror #10
 540:	746e6975 	strbtvc	r6, [lr], #-2421	; 0x975
 544:	745f3233 	ldrbvc	r3, [pc], #-563	; 54c <_start-0x7ab4>
 548:	675f5f00 	ldrbvs	r5, [pc, -r0, lsl #30]
 54c:	5f63756e 	svcpl	0x0063756e
 550:	6c5f6176 	ldfvse	f6, [pc], {118}	; 0x76
 554:	00747369 	rsbseq	r7, r4, r9, ror #6
 558:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 55c:	6972702f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, ip, sp, lr}^
 560:	2e6b746e 	cdpcs	4, 6, cr7, cr11, cr14, {3}
 564:	61760063 	cmnvs	r6, r3, rrx
 568:	6972705f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
 56c:	006b746e 	rsbeq	r7, fp, lr, ror #8
 570:	61765f5f 	cmnvs	r6, pc, asr pc
 574:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
 578:	552f0074 	strpl	r0, [pc, #-116]!	; 50c <_start-0x7af4>
 57c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 580:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 584:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 588:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 58c:	6f746b73 	svcvs	0x00746b73
 590:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 594:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 3fc <_start-0x7c04>
 598:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 59c:	31726574 	cmncc	r2, r4, ror r5
 5a0:	2f303239 	svccs	0x00303239
 5a4:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 5a8:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 5ac:	30343173 	eorscc	r3, r4, r3, ror r1
 5b0:	30322d65 	eorscc	r2, r2, r5, ror #26
 5b4:	2f6e6977 	svccs	0x006e6977
 5b8:	7062696c 	rsbvc	r6, r2, ip, ror #18
 5bc:	72610069 	rsbvc	r0, r1, #105	; 0x69
 5c0:	5f007367 	svcpl	0x00007367
 5c4:	0070615f 	rsbseq	r6, r0, pc, asr r1
 5c8:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 5cc:	7475702f 	ldrbtvc	r7, [r5], #-47	; 0x2f
 5d0:	00632e6b 	rsbeq	r2, r3, fp, ror #28
 5d4:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 5d8:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
 5dc:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
 5e0:	7072006b 	rsbsvc	r0, r2, fp, rrx
 5e4:	75705f69 	ldrbvc	r5, [r0, #-3945]!	; 0xf69
 5e8:	61686374 	smcvs	34356	; 0x8634
 5ec:	656e0072 	strbvs	r0, [lr, #-114]!	; 0x72
 5f0:	00705f67 	rsbseq	r5, r0, r7, ror #30
 5f4:	65766572 	ldrbvs	r6, [r6, #-1394]!	; 0x572
 5f8:	00657372 	rsbeq	r7, r5, r2, ror r3
 5fc:	69647369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
 600:	00746967 	rsbseq	r6, r4, r7, ror #18
 604:	73747570 	cmnvc	r4, #112, 10	; 0x1c000000
 608:	0070665f 	rsbseq	r6, r0, pc, asr r6
 60c:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0x162
 610:	67697300 	strbvs	r7, [r9, -r0, lsl #6]!
 614:	5f64656e 	svcpl	0x0064656e
 618:	696c0070 	stmdbvs	ip!, {r4, r5, r6}^
 61c:	762f6362 	strtvc	r6, [pc], -r2, ror #6
 620:	72702d61 	rsbsvc	r2, r0, #6208	; 0x1840
 624:	6b746e69 	blvs	1d1bfd0 <__bss_end__+0x1d122a8>
 628:	7200632e 	andvc	r6, r0, #-1207959552	; 0xb8000000
 62c:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
 630:	6f5f7465 	svcvs	0x005f7465
 634:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0x475
 638:	69770074 	ldmdbvs	r7!, {r2, r4, r5, r6}^
 63c:	00687464 	rsbeq	r7, r8, r4, ror #8
 640:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 644:	0070665f 	rsbseq	r6, r0, pc, asr r6
 648:	74696d65 	strbtvc	r6, [r9], #-3429	; 0xd65
 64c:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 650:	6265725f 	rsbvs	r7, r5, #-268435451	; 0xf0000005
 654:	00746f6f 	rsbseq	r6, r4, pc, ror #30
 658:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 65c:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
 660:	632f6372 	teqvs	pc, #-939524095	; 0xc8000001
 664:	6e61656c 	cdpvs	5, 6, cr6, cr1, cr12, {3}
 668:	6265722d 	rsbvs	r7, r5, #-805306366	; 0xd0000002
 66c:	2e746f6f 	cdpcs	15, 7, cr6, cr4, cr15, {3}
 670:	65640063 	strbvs	r0, [r4, #-99]!	; 0x63
 674:	5f79616c 	svcpl	0x0079616c
 678:	6300736d 	movwvs	r7, #877	; 0x36d
 67c:	30343173 	eorscc	r3, r4, r3, ror r1
 680:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 684:	73632f63 	cmnvc	r3, #396	; 0x18c
 688:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
 68c:	5f00632e 	svcpl	0x0000632e
 690:	7373625f 	cmnvc	r3, #-268435451	; 0xf0000005
 694:	6174735f 	cmnvs	r4, pc, asr r3
 698:	5f5f7472 	svcpl	0x005f7472
 69c:	625f5f00 	subsvs	r5, pc, #0, 30
 6a0:	655f7373 	ldrbvs	r7, [pc, #-883]	; 335 <_start-0x7ccb>
 6a4:	5f5f646e 	svcpl	0x005f646e
 6a8:	73736200 	cmnvc	r3, #0, 4
 6ac:	646e655f 	strbtvs	r6, [lr], #-1375	; 0x55f
 6b0:	73635f00 	cmnvc	r3, #0, 30
 6b4:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
 6b8:	5f746100 	svcpl	0x00746100
 6bc:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
 6c0:	76656c5f 			; <UNDEFINED> instruction: 0x76656c5f
 6c4:	50006c65 	andpl	r6, r0, r5, ror #24
 6c8:	41505f4d 	cmpmi	r0, sp, asr #30
 6cc:	4f575353 	svcmi	0x00575353
 6d0:	63004452 	movwvs	r4, #1106	; 0x452
 6d4:	30343173 	eorscc	r3, r4, r3, ror r1
 6d8:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 6dc:	65722f63 	ldrbvs	r2, [r2, #-3939]!	; 0xf63
 6e0:	746f6f62 	strbtvc	r6, [pc], #-3938	; 6e8 <_start-0x7918>
 6e4:	5000632e 	andpl	r6, r0, lr, lsr #6
 6e8:	53525f4d 	cmppl	r2, #308	; 0x134
 6ec:	575f4354 			; <UNDEFINED> instruction: 0x575f4354
 6f0:	47464352 	smlsldmi	r4, r6, r2, r3
 6f4:	4c55465f 	mrrcmi	6, 5, r4, r5, cr15
 6f8:	45525f4c 	ldrbmi	r5, [r2, #-3916]	; 0xf4c
 6fc:	00544553 	subseq	r4, r4, r3, asr r5
 700:	575f4d50 			; <UNDEFINED> instruction: 0x575f4d50
 704:	00474f44 	subeq	r4, r7, r4, asr #30
 708:	5f746573 	svcpl	0x00746573
 70c:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
 710:	76656c5f 			; <UNDEFINED> instruction: 0x76656c5f
 714:	50006c65 	andpl	r6, r0, r5, ror #24
 718:	53525f4d 	cmppl	r2, #308	; 0x134
 71c:	63004354 	movwvs	r4, #852	; 0x354
 720:	00727370 	rsbseq	r7, r2, r0, ror r3
 724:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 728:	65675f72 	strbvs	r5, [r7, #-3954]!	; 0xf72
 72c:	73755f74 	cmnvc	r5, #116, 30	; 0x1d0
 730:	725f6365 	subsvc	r6, pc, #-1811939327	; 0x94000001
 734:	64007761 	strvs	r7, [r0], #-1889	; 0x761
 738:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 73c:	6365735f 	cmnvs	r5, #2080374785	; 0x7c000001
 740:	31736300 	cmncc	r3, r0, lsl #6
 744:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 748:	2f637273 	svccs	0x00637273
 74c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 750:	00632e72 	rsbeq	r2, r3, r2, ror lr
 754:	6b636974 	blvs	18dad2c <__bss_end__+0x18d1004>
 758:	65640073 	strbvs	r0, [r4, #-115]!	; 0x73
 75c:	5f79616c 	svcpl	0x0079616c
 760:	6c637963 	stclvs	9, cr7, [r3], #-396	; 0xfffffe74
 764:	64007365 	strvs	r7, [r0], #-869	; 0x365
 768:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 76c:	0073755f 	rsbseq	r7, r3, pc, asr r5
 770:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
 774:	6b00745f 	blvs	1d8f8 <__bss_end__+0x13bd0>
 778:	65657266 	strbvs	r7, [r5, #-614]!	; 0x266
 77c:	6c6c615f 	stfvse	f6, [ip], #-380	; 0xfffffe84
 780:	696c6100 	stmdbvs	ip!, {r8, sp, lr}^
 784:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
 788:	6165685f 	cmnvs	r5, pc, asr r8
 78c:	74705f70 	ldrbtvc	r5, [r0], #-3952	; 0xf70
 790:	6d6b0072 	stclvs	0, cr0, [fp, #-456]!	; 0xfffffe38
 794:	6f6c6c61 	svcvs	0x006c6c61
 798:	656d0063 	strbvs	r0, [sp, #-99]!	; 0x63
 79c:	7465736d 	strbtvc	r7, [r5], #-877	; 0x36d
 7a0:	2d796d00 	ldclcs	13, cr6, [r9, #-0]
 7a4:	2f637273 	svccs	0x00637273
 7a8:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
 7ac:	2e636f6c 	cdpcs	15, 6, cr6, cr3, cr12, {3}
 7b0:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
 7b4:	705f7469 	subsvc	r7, pc, r9, ror #8
 7b8:	696c6100 	stmdbvs	ip!, {r8, sp, lr}^
 7bc:	656d6e67 	strbvs	r6, [sp, #-3687]!	; 0xe67
 7c0:	7200746e 	andvc	r7, r0, #1845493760	; 0x6e000000
 7c4:	646e756f 	strbtvs	r7, [lr], #-1391	; 0x56f
 7c8:	6e5f6465 	cdpvs	4, 5, cr6, cr15, cr5, {3}
 7cc:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
 7d0:	6d6b0073 	stclvs	0, cr0, [fp, #-460]!	; 0xfffffe34
 7d4:	6f6c6c61 	svcvs	0x006c6c61
 7d8:	65685f63 	strbvs	r5, [r8, #-3939]!	; 0xf63
 7dc:	705f7061 	subsvc	r7, pc, r1, rrx
 7e0:	5f007274 	svcpl	0x00007274
 7e4:	6165685f 	cmnvs	r5, pc, asr r8
 7e8:	74735f70 	ldrbtvc	r5, [r3], #-3952	; 0xf70
 7ec:	5f747261 	svcpl	0x00747261
 7f0:	6f74005f 	svcvs	0x0074005f
 7f4:	6c6c615f 	stfvse	f6, [ip], #-380	; 0xfffffe84
 7f8:	7461636f 	strbtvc	r6, [r1], #-879	; 0x36f
 7fc:	55410065 	strbpl	r0, [r1, #-101]	; 0x65
 800:	554d5f58 	strbpl	r5, [sp, #-3928]	; 0xf58
 804:	52434d5f 	subpl	r4, r3, #6080	; 0x17c0
 808:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
 80c:	58554100 	ldmdapl	r5, {r8, lr}^
 810:	5f554d5f 	svcpl	0x00554d5f
 814:	525f4f49 	subspl	r4, pc, #292	; 0x124
 818:	41004745 	tstmi	r0, r5, asr #14
 81c:	4d5f5855 	ldclmi	8, cr5, [pc, #-340]	; 6d0 <_start-0x7930>
 820:	534d5f55 	movtpl	r5, #57173	; 0xdf55
 824:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xf52
 828:	50470047 	subpl	r0, r7, r7, asr #32
 82c:	465f4f49 	ldrbmi	r4, [pc], -r9, asr #30
 830:	5f434e55 	svcpl	0x00434e55
 834:	30544c41 	subscc	r4, r4, r1, asr #24
 838:	72617500 	rsbvc	r7, r1, #0, 10
 83c:	61635f74 	smcvs	13812	; 0x35f4
 840:	65675f6e 	strbvs	r5, [r7, #-3950]!	; 0xf6e
 844:	41006374 	tstmi	r0, r4, ror r3
 848:	4d5f5855 	ldclmi	8, cr5, [pc, #-340]	; 6fc <_start-0x7904>
 84c:	4e435f55 	mcrmi	15, 2, r5, cr3, cr5, {2}
 850:	525f4c54 	subspl	r4, pc, #84, 24	; 0x5400
 854:	75004745 	strvc	r4, [r0, #-1861]	; 0x745
 858:	5f747261 	svcpl	0x00747261
 85c:	5f736168 	svcpl	0x00736168
 860:	61746164 	cmnvs	r4, r4, ror #2
 864:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 868:	55465f4f 	strbpl	r5, [r6, #-3919]	; 0xf4f
 86c:	4f5f434e 	svcmi	0x005f434e
 870:	55505455 	ldrbpl	r5, [r0, #-1109]	; 0x455
 874:	61750054 	cmnvs	r5, r4, asr r0
 878:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
 87c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 880:	55465f4f 	strbpl	r5, [r6, #-3919]	; 0xf4f
 884:	415f434e 	cmpmi	pc, lr, asr #6
 888:	0031544c 	eorseq	r5, r1, ip, asr #8
 88c:	4f495047 	svcmi	0x00495047
 890:	4e55465f 	mrcmi	6, 2, r4, cr5, cr15, {2}
 894:	4c415f43 	mcrrmi	15, 4, r5, r1, cr3
 898:	47003254 	smlsdmi	r0, r4, r2, r3
 89c:	5f4f4950 	svcpl	0x004f4950
 8a0:	434e5546 	movtmi	r5, #58694	; 0xe546
 8a4:	544c415f 	strbpl	r4, [ip], #-351	; 0x15f
 8a8:	50470033 	subpl	r0, r7, r3, lsr r0
 8ac:	465f4f49 	ldrbmi	r4, [pc], -r9, asr #30
 8b0:	5f434e55 	svcpl	0x00434e55
 8b4:	35544c41 	ldrbcc	r4, [r4, #-3137]	; 0xc41
 8b8:	58554100 	ldmdapl	r5, {r8, lr}^
 8bc:	5f554d5f 	svcpl	0x00554d5f
 8c0:	5f524549 	svcpl	0x00524549
 8c4:	00474552 	subeq	r4, r7, r2, asr r5
 8c8:	33747570 	cmncc	r4, #112, 10	; 0x1c000000
 8cc:	61750032 	cmnvs	r5, r2, lsr r0
 8d0:	675f7472 			; <UNDEFINED> instruction: 0x675f7472
 8d4:	00637465 	rsbeq	r7, r3, r5, ror #8
 8d8:	5f585541 	svcpl	0x00585541
 8dc:	495f554d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, sl, ip, lr}^	; <UNPREDICTABLE>
 8e0:	525f5249 	subspl	r5, pc, #-1879048188	; 0x90000004
 8e4:	67004745 	strvs	r4, [r0, -r5, asr #14]
 8e8:	5f6f6970 	svcpl	0x006f6970
 8ec:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 8f0:	7500745f 	strvc	r7, [r0, #-1119]	; 0x45f
 8f4:	5f747261 	svcpl	0x00747261
 8f8:	5f6e6163 	svcpl	0x006e6163
 8fc:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 900:	58554100 	ldmdapl	r5, {r8, lr}^
 904:	414e455f 	cmpmi	lr, pc, asr r5
 908:	53454c42 	movtpl	r4, #23618	; 0x5c42
 90c:	58554100 	ldmdapl	r5, {r8, lr}^
 910:	5152495f 	cmppl	r2, pc, asr r9
 914:	58554100 	ldmdapl	r5, {r8, lr}^
 918:	5f554d5f 	svcpl	0x00554d5f
 91c:	44554142 	ldrbmi	r4, [r5], #-322	; 0x142
 920:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
 924:	58554100 	ldmdapl	r5, {r8, lr}^
 928:	5f554d5f 	svcpl	0x00554d5f
 92c:	54415453 	strbpl	r5, [r1], #-1107	; 0x453
 930:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
 934:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 938:	55465f4f 	strbpl	r5, [r6, #-3919]	; 0xf4f
 93c:	415f434e 	cmpmi	pc, lr, asr #6
 940:	0034544c 	eorseq	r5, r4, ip, asr #8
 944:	6f697067 	svcvs	0x00697067
 948:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
 94c:	6e75665f 	mrcvs	6, 3, r6, cr5, cr15, {2}
 950:	6f697463 	svcvs	0x00697463
 954:	5541006e 	strbpl	r0, [r1, #-110]	; 0x6e
 958:	554d5f58 	strbpl	r5, [sp, #-3928]	; 0xf58
 95c:	5243535f 	subpl	r5, r3, #2080374785	; 0x7c000001
 960:	48435441 	stmdami	r3, {r0, r6, sl, ip, lr}^
 964:	72617500 	rsbvc	r7, r1, #0, 10
 968:	75705f74 	ldrbvc	r5, [r0, #-3956]!	; 0xf74
 96c:	41006374 	tstmi	r0, r4, ror r3
 970:	4d5f5855 	ldclmi	8, cr5, [pc, #-340]	; 824 <_start-0x77dc>
 974:	434c5f55 	movtmi	r5, #53077	; 0xcf55
 978:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xf52
 97c:	50470047 	subpl	r0, r7, r7, asr #32
 980:	465f4f49 	ldrbmi	r4, [pc], -r9, asr #30
 984:	5f434e55 	svcpl	0x00434e55
 988:	55504e49 	ldrbpl	r4, [r0, #-3657]	; 0xe49
 98c:	55410054 	strbpl	r0, [r1, #-84]	; 0x54
 990:	554d5f58 	strbpl	r5, [sp, #-3928]	; 0xf58
 994:	52534c5f 	subspl	r4, r3, #24320	; 0x5f00
 998:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
 99c:	72617500 	rsbvc	r7, r1, #0, 10
 9a0:	65675f74 	strbvs	r5, [r7, #-3956]!	; 0xf74
 9a4:	615f6374 	cmpvs	pc, r4, ror r3	; <UNPREDICTABLE>
 9a8:	636e7973 	cmnvs	lr, #1884160	; 0x1cc000
 9ac:	74656700 	strbtvc	r6, [r5], #-1792	; 0x700
 9b0:	67003233 	smladxvs	r0, r3, r2, r3
 9b4:	5f6f6970 	svcpl	0x006f6970
 9b8:	30726c63 	rsbscc	r6, r2, r3, ror #24
 9bc:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 9c0:	65735f6f 	ldrbvs	r5, [r3, #-3951]!	; 0xf6f
 9c4:	67003074 	smlsdxvs	r0, r4, r0, r3
 9c8:	5f6f6970 	svcpl	0x006f6970
 9cc:	74697277 	strbtvc	r7, [r9], #-631	; 0x277
 9d0:	70670065 	rsbvc	r0, r7, r5, rrx
 9d4:	665f6f69 	ldrbvs	r6, [pc], -r9, ror #30
 9d8:	306c6573 	rsbcc	r6, ip, r3, ror r5
 9dc:	43504700 	cmpmi	r0, #0, 14
 9e0:	0031524c 	eorseq	r5, r1, ip, asr #4
 9e4:	6f697067 	svcvs	0x00697067
 9e8:	6165725f 	cmnvs	r5, pc, asr r2
 9ec:	70670064 	rsbvc	r0, r7, r4, rrx
 9f0:	735f6f69 	cmpvc	pc, #420	; 0x1a4
 9f4:	6f5f7465 	svcvs	0x005f7465
 9f8:	5047006e 	subpl	r0, r7, lr, rrx
 9fc:	3156454c 	cmpcc	r6, ip, asr #10
 a00:	53504700 	cmppl	r0, #0, 14
 a04:	00315445 	eorseq	r5, r1, r5, asr #8
 a08:	4c435047 	mcrrmi	0, 4, r5, r3, cr7
 a0c:	67003052 	smlsdvs	r0, r2, r0, r3
 a10:	5f6f6970 	svcpl	0x006f6970
 a14:	5f746573 	svcpl	0x00746573
 a18:	75706e69 	ldrbvc	r6, [r0, #-3689]!	; 0xe69
 a1c:	50470074 	subpl	r0, r7, r4, ror r0
 a20:	30544553 	subscc	r4, r4, r3, asr r5
 a24:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 a28:	65735f6f 	ldrbvs	r5, [r3, #-3951]!	; 0xf6f
 a2c:	666f5f74 	uqsub16vs	r5, pc, r4	; <UNPREDICTABLE>
 a30:	70670066 	rsbvc	r0, r7, r6, rrx
 a34:	735f6f69 	cmpvc	pc, #420	; 0x1a4
 a38:	6f5f7465 	svcvs	0x005f7465
 a3c:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0x475
 a40:	50470074 	subpl	r0, r7, r4, ror r0
 a44:	4c455346 	mcrrmi	3, 4, r5, r5, cr6
 a48:	75660031 	strbvc	r0, [r6, #-49]!	; 0x31
 a4c:	7200636e 	andvc	r6, r0, #-1207959551	; 0xb8000001
 a50:	735f6765 	cmpvc	pc, #26476544	; 0x1940000
 a54:	63656c65 	cmnvs	r5, #25856	; 0x6500
 a58:	69620074 	stmdbvs	r2!, {r2, r4, r5, r6}^
 a5c:	73616d74 	cmnvc	r1, #116, 26	; 0x1d00
 a60:	7067006b 	rsbvc	r0, r7, fp, rrx
 a64:	632e6f69 	teqvs	lr, #420	; 0x1a4
 a68:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 a6c:	65725f6f 	ldrbvs	r5, [r2, #-3951]!	; 0xf6f
 a70:	50470067 	subpl	r0, r7, r7, rrx
 a74:	4c455346 	mcrrmi	3, 4, r5, r5, cr6
 a78:	50470030 	subpl	r0, r7, r0, lsr r0
 a7c:	3056454c 	subscc	r4, r6, ip, asr #10
 a80:	46504700 	ldrbmi	r4, [r0], -r0, lsl #14
 a84:	324c4553 	subcc	r4, ip, #348127232	; 0x14c00000
 a88:	46504700 	ldrbmi	r4, [r0], -r0, lsl #14
 a8c:	334c4553 	movtcc	r4, #50515	; 0xc553
 a90:	46504700 	ldrbmi	r4, [r0], -r0, lsl #14
 a94:	344c4553 	strbcc	r4, [ip], #-1363	; 0x553
 a98:	46504700 	ldrbmi	r4, [r0], -r0, lsl #14
 a9c:	354c4553 	strbcc	r4, [ip, #-1363]	; 0x553
 aa0:	62696c00 	rsbvs	r6, r9, #0, 24
 aa4:	656d2f63 	strbvs	r2, [sp, #-3939]!	; 0xf63
 aa8:	7465736d 	strbtvc	r7, [r5], #-877	; 0x36d
 aac:	6900632e 	stmdbvs	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
 ab0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 ab4:	5f6c616e 	svcpl	0x006c616e
 ab8:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 abc:	00726168 	rsbseq	r6, r2, r8, ror #2
 ac0:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 ac4:	7475702f 	ldrbtvc	r7, [r5], #-47	; 0x2f
 ac8:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 acc:	Address 0x0000000000000acc is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000014 	andeq	r0, r0, r4, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	00008010 	andeq	r8, r0, r0, lsl r0
  1c:	00000078 	andeq	r0, r0, r8, ror r0
  20:	84040e42 	strhi	r0, [r4], #-3650	; 0xe42
  24:	00000001 	andeq	r0, r0, r1
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	00008088 	andeq	r8, r0, r8, lsl #1
  34:	0000005c 	andeq	r0, r0, ip, asr r0
  38:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
  3c:	86058506 	strhi	r8, [r5], -r6, lsl #10
  40:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
  44:	00018e02 	andeq	r8, r1, r2, lsl #28
  48:	00000014 	andeq	r0, r0, r4, lsl r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	000080e4 	andeq	r8, r0, r4, ror #1
  54:	0000004c 	andeq	r0, r0, ip, asr #32
  58:	83080e42 	movwhi	r0, #36418	; 0x8e42
  5c:	00018e02 	andeq	r8, r1, r2, lsl #28
  60:	00000018 	andeq	r0, r0, r8, lsl r0
  64:	00000000 	andeq	r0, r0, r0
  68:	00008130 	andeq	r8, r0, r0, lsr r1
  6c:	00000070 	andeq	r0, r0, r0, ror r0
  70:	83100e42 	tsthi	r0, #1056	; 0x420
  74:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
  78:	00018e02 	andeq	r8, r1, r2, lsl #28
  7c:	00000020 	andeq	r0, r0, r0, lsr #32
  80:	00000000 	andeq	r0, r0, r0
  84:	000081a0 	andeq	r8, r0, r0, lsr #3
  88:	000000d4 	ldrdeq	r0, [r0], -r4
  8c:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
  90:	86058506 	strhi	r8, [r5], -r6, lsl #10
  94:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
  98:	42018e02 	andmi	r8, r1, #2, 28
  9c:	0000200e 	andeq	r2, r0, lr
  a0:	0000000c 	andeq	r0, r0, ip
  a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  a8:	7c020001 	stcvc	0, cr0, [r2], {1}
  ac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  b0:	00000014 	andeq	r0, r0, r4, lsl r0
  b4:	000000a0 	andeq	r0, r0, r0, lsr #1
  b8:	00008328 	andeq	r8, r0, r8, lsr #6
  bc:	00000068 	andeq	r0, r0, r8, rrx
  c0:	83080e42 	movwhi	r0, #36418	; 0x8e42
  c4:	00018e02 	andeq	r8, r1, r2, lsl #28
  c8:	00000014 	andeq	r0, r0, r4, lsl r0
  cc:	000000a0 	andeq	r0, r0, r0, lsr #1
  d0:	00008390 	muleq	r0, r0, r3
  d4:	0000003c 	andeq	r0, r0, ip, lsr r0
  d8:	8e040e42 	cdphi	14, 0, cr0, cr4, cr2, {2}
  dc:	100e4201 	andne	r4, lr, r1, lsl #4
  e0:	00000014 	andeq	r0, r0, r4, lsl r0
  e4:	000000a0 	andeq	r0, r0, r0, lsr #1
  e8:	000083cc 	andeq	r8, r0, ip, asr #7
  ec:	0000003c 	andeq	r0, r0, ip, lsr r0
  f0:	8e040e42 	cdphi	14, 0, cr0, cr4, cr2, {2}
  f4:	100e4201 	andne	r4, lr, r1, lsl #4
  f8:	00000014 	andeq	r0, r0, r4, lsl r0
  fc:	000000a0 	andeq	r0, r0, r0, lsr #1
 100:	00008408 	andeq	r8, r0, r8, lsl #8
 104:	0000003c 	andeq	r0, r0, ip, lsr r0
 108:	8e040e42 	cdphi	14, 0, cr0, cr4, cr2, {2}
 10c:	100e4201 	andne	r4, lr, r1, lsl #4
 110:	00000014 	andeq	r0, r0, r4, lsl r0
 114:	000000a0 	andeq	r0, r0, r0, lsr #1
 118:	00008444 	andeq	r8, r0, r4, asr #8
 11c:	0000003c 	andeq	r0, r0, ip, lsr r0
 120:	8e040e42 	cdphi	14, 0, cr0, cr4, cr2, {2}
 124:	100e4201 	andne	r4, lr, r1, lsl #4
 128:	00000014 	andeq	r0, r0, r4, lsl r0
 12c:	000000a0 	andeq	r0, r0, r0, lsr #1
 130:	00008480 	andeq	r8, r0, r0, lsl #9
 134:	0000003c 	andeq	r0, r0, ip, lsr r0
 138:	8e040e42 	cdphi	14, 0, cr0, cr4, cr2, {2}
 13c:	100e4201 	andne	r4, lr, r1, lsl #4
 140:	00000014 	andeq	r0, r0, r4, lsl r0
 144:	000000a0 	andeq	r0, r0, r0, lsr #1
 148:	000084bc 			; <UNDEFINED> instruction: 0x000084bc
 14c:	0000003c 	andeq	r0, r0, ip, lsr r0
 150:	8e040e42 	cdphi	14, 0, cr0, cr4, cr2, {2}
 154:	100e4201 	andne	r4, lr, r1, lsl #4
 158:	0000000c 	andeq	r0, r0, ip
 15c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 160:	7c020001 	stcvc	0, cr0, [r2], {1}
 164:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 168:	00000014 	andeq	r0, r0, r4, lsl r0
 16c:	00000158 	andeq	r0, r0, r8, asr r1
 170:	000084f8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
 174:	0000001c 	andeq	r0, r0, ip, lsl r0
 178:	8e040e42 	cdphi	14, 0, cr0, cr4, cr2, {2}
 17c:	200e4201 	andcs	r4, lr, r1, lsl #4
 180:	00000014 	andeq	r0, r0, r4, lsl r0
 184:	00000158 	andeq	r0, r0, r8, asr r1
 188:	00008514 	andeq	r8, r0, r4, lsl r5
 18c:	00000040 	andeq	r0, r0, r0, asr #32
 190:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 194:	00018e02 	andeq	r8, r1, r2, lsl #28
 198:	0000000c 	andeq	r0, r0, ip
 19c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1a0:	7c020001 	stcvc	0, cr0, [r2], {1}
 1a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1a8:	00000024 	andeq	r0, r0, r4, lsr #32
 1ac:	00000198 	muleq	r0, r8, r1
 1b0:	00008554 	andeq	r8, r0, r4, asr r5
 1b4:	00000058 	andeq	r0, r0, r8, asr r0
 1b8:	80100e42 	andshi	r0, r0, r2, asr #28
 1bc:	82038104 	andhi	r8, r3, #4, 2
 1c0:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
 1c4:	07841c0e 	streq	r1, [r4, lr, lsl #24]
 1c8:	058e0685 	streq	r0, [lr, #1669]	; 0x685
 1cc:	00280e42 	eoreq	r0, r8, r2, asr #28
 1d0:	0000000c 	andeq	r0, r0, ip
 1d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1d8:	7c020001 	stcvc	0, cr0, [r2], {1}
 1dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1e0:	00000018 	andeq	r0, r0, r8, lsl r0
 1e4:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 1e8:	000085ac 	andeq	r8, r0, ip, lsr #11
 1ec:	00000034 	andeq	r0, r0, r4, lsr r0
 1f0:	83100e42 	tsthi	r0, #1056	; 0x420
 1f4:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 1f8:	00018e02 	andeq	r8, r1, r2, lsl #28
 1fc:	0000000c 	andeq	r0, r0, ip
 200:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 204:	7c020001 	stcvc	0, cr0, [r2], {1}
 208:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 20c:	0000000c 	andeq	r0, r0, ip
 210:	000001fc 	strdeq	r0, [r0], -ip
 214:	000085e0 	andeq	r8, r0, r0, ror #11
 218:	00000014 	andeq	r0, r0, r4, lsl r0
 21c:	0000000c 	andeq	r0, r0, ip
 220:	000001fc 	strdeq	r0, [r0], -ip
 224:	000085f4 	strdeq	r8, [r0], -r4
 228:	0000002c 	andeq	r0, r0, ip, lsr #32
 22c:	0000000c 	andeq	r0, r0, ip
 230:	000001fc 	strdeq	r0, [r0], -ip
 234:	00008620 	andeq	r8, r0, r0, lsr #12
 238:	00000040 	andeq	r0, r0, r0, asr #32
 23c:	00000020 	andeq	r0, r0, r0, lsr #32
 240:	000001fc 	strdeq	r0, [r0], -ip
 244:	00008660 	andeq	r8, r0, r0, ror #12
 248:	00000198 	muleq	r0, r8, r1
 24c:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 250:	86058506 	strhi	r8, [r5], -r6, lsl #10
 254:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 258:	42018e02 	andmi	r8, r1, #2, 28
 25c:	0000580e 	andeq	r5, r0, lr, lsl #16
 260:	00000014 	andeq	r0, r0, r4, lsl r0
 264:	000001fc 	strdeq	r0, [r0], -ip
 268:	000087f8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
 26c:	00000050 	andeq	r0, r0, r0, asr r0
 270:	83080e42 	movwhi	r0, #36418	; 0x8e42
 274:	00018e02 	andeq	r8, r1, r2, lsl #28
 278:	00000028 	andeq	r0, r0, r8, lsr #32
 27c:	000001fc 	strdeq	r0, [r0], -ip
 280:	00008848 	andeq	r8, r0, r8, asr #16
 284:	00000288 	andeq	r0, r0, r8, lsl #5
 288:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
 28c:	86088509 	strhi	r8, [r8], -r9, lsl #10
 290:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
 294:	8a048905 	bhi	1226b0 <__bss_end__+0x118988>
 298:	8e028b03 	vmlahi.f64	d8, d2, d3
 29c:	b00e4201 	andlt	r4, lr, r1, lsl #4
 2a0:	00000001 	andeq	r0, r0, r1
 2a4:	0000000c 	andeq	r0, r0, ip
 2a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2ac:	7c020001 	stcvc	0, cr0, [r2], {1}
 2b0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2b4:	00000014 	andeq	r0, r0, r4, lsl r0
 2b8:	000002a4 	andeq	r0, r0, r4, lsr #5
 2bc:	00008ad0 	ldrdeq	r8, [r0], -r0
 2c0:	00000028 	andeq	r0, r0, r8, lsr #32
 2c4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 2c8:	00018e02 	andeq	r8, r1, r2, lsl #28
 2cc:	0000000c 	andeq	r0, r0, ip
 2d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2d4:	7c020001 	stcvc	0, cr0, [r2], {1}
 2d8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2dc:	00000014 	andeq	r0, r0, r4, lsl r0
 2e0:	000002cc 	andeq	r0, r0, ip, asr #5
 2e4:	00008af8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
 2e8:	00000034 	andeq	r0, r0, r4, lsr r0
 2ec:	83080e42 	movwhi	r0, #36418	; 0x8e42
 2f0:	00018e02 	andeq	r8, r1, r2, lsl #28
 2f4:	0000000c 	andeq	r0, r0, ip
 2f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2fc:	7c020001 	stcvc	0, cr0, [r2], {1}
 300:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 304:	0000000c 	andeq	r0, r0, ip
 308:	000002f4 	strdeq	r0, [r0], -r4
 30c:	00008b2c 	andeq	r8, r0, ip, lsr #22
 310:	00000018 	andeq	r0, r0, r8, lsl r0
 314:	0000000c 	andeq	r0, r0, ip
 318:	000002f4 	strdeq	r0, [r0], -r4
 31c:	00008b44 	andeq	r8, r0, r4, asr #22
 320:	00000014 	andeq	r0, r0, r4, lsl r0
 324:	00000014 	andeq	r0, r0, r4, lsl r0
 328:	000002f4 	strdeq	r0, [r0], -r4
 32c:	00008b58 	andeq	r8, r0, r8, asr fp
 330:	00000048 	andeq	r0, r0, r8, asr #32
 334:	83080e42 	movwhi	r0, #36418	; 0x8e42
 338:	00018e02 	andeq	r8, r1, r2, lsl #28
 33c:	0000000c 	andeq	r0, r0, ip
 340:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 344:	7c020001 	stcvc	0, cr0, [r2], {1}
 348:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 34c:	0000000c 	andeq	r0, r0, ip
 350:	0000033c 	andeq	r0, r0, ip, lsr r3
 354:	00008ba0 	andeq	r8, r0, r0, lsr #23
 358:	0000001c 	andeq	r0, r0, ip, lsl r0
 35c:	00000014 	andeq	r0, r0, r4, lsl r0
 360:	0000033c 	andeq	r0, r0, ip, lsr r3
 364:	00008bbc 			; <UNDEFINED> instruction: 0x00008bbc
 368:	00000014 	andeq	r0, r0, r4, lsl r0
 36c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 370:	00018e02 	andeq	r8, r1, r2, lsl #28
 374:	00000014 	andeq	r0, r0, r4, lsl r0
 378:	0000033c 	andeq	r0, r0, ip, lsr r3
 37c:	00008bd0 	ldrdeq	r8, [r0], -r0
 380:	0000001c 	andeq	r0, r0, ip, lsl r0
 384:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 388:	00018e02 	andeq	r8, r1, r2, lsl #28
 38c:	00000018 	andeq	r0, r0, r8, lsl r0
 390:	0000033c 	andeq	r0, r0, ip, lsr r3
 394:	00008bec 	andeq	r8, r0, ip, ror #23
 398:	00000024 	andeq	r0, r0, r4, lsr #32
 39c:	83100e42 	tsthi	r0, #1056	; 0x420
 3a0:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 3a4:	00018e02 	andeq	r8, r1, r2, lsl #28
 3a8:	00000014 	andeq	r0, r0, r4, lsl r0
 3ac:	0000033c 	andeq	r0, r0, ip, lsr r3
 3b0:	00008c10 	andeq	r8, r0, r0, lsl ip
 3b4:	00000014 	andeq	r0, r0, r4, lsl r0
 3b8:	83080e42 	movwhi	r0, #36418	; 0x8e42
 3bc:	00018e02 	andeq	r8, r1, r2, lsl #28
 3c0:	00000014 	andeq	r0, r0, r4, lsl r0
 3c4:	0000033c 	andeq	r0, r0, ip, lsr r3
 3c8:	00008c24 	andeq	r8, r0, r4, lsr #24
 3cc:	00000014 	andeq	r0, r0, r4, lsl r0
 3d0:	83080e42 	movwhi	r0, #36418	; 0x8e42
 3d4:	00018e02 	andeq	r8, r1, r2, lsl #28
 3d8:	0000000c 	andeq	r0, r0, ip
 3dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3e0:	7c020001 	stcvc	0, cr0, [r2], {1}
 3e4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3e8:	00000014 	andeq	r0, r0, r4, lsl r0
 3ec:	000003d8 	ldrdeq	r0, [r0], -r8
 3f0:	00008c38 	andeq	r8, r0, r8, lsr ip
 3f4:	00000064 	andeq	r0, r0, r4, rrx
 3f8:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 3fc:	00018e02 	andeq	r8, r1, r2, lsl #28
 400:	00000014 	andeq	r0, r0, r4, lsl r0
 404:	000003d8 	ldrdeq	r0, [r0], -r8
 408:	00008c9c 	muleq	r0, ip, ip
 40c:	00000094 	muleq	r0, r4, r0
 410:	83080e42 	movwhi	r0, #36418	; 0x8e42
 414:	00018e02 	andeq	r8, r1, r2, lsl #28
 418:	00000014 	andeq	r0, r0, r4, lsl r0
 41c:	000003d8 	ldrdeq	r0, [r0], -r8
 420:	00008d30 	andeq	r8, r0, r0, lsr sp
 424:	00000058 	andeq	r0, r0, r8, asr r0
 428:	83080e42 	movwhi	r0, #36418	; 0x8e42
 42c:	00018e02 	andeq	r8, r1, r2, lsl #28
 430:	0000000c 	andeq	r0, r0, ip
 434:	000003d8 	ldrdeq	r0, [r0], -r8
 438:	00008d88 	andeq	r8, r0, r8, lsl #27
 43c:	00000018 	andeq	r0, r0, r8, lsl r0
 440:	0000000c 	andeq	r0, r0, ip
 444:	000003d8 	ldrdeq	r0, [r0], -r8
 448:	00008da0 	andeq	r8, r0, r0, lsr #27
 44c:	00000010 	andeq	r0, r0, r0, lsl r0
 450:	0000000c 	andeq	r0, r0, ip
 454:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 458:	7c020001 	stcvc	0, cr0, [r2], {1}
 45c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 460:	00000014 	andeq	r0, r0, r4, lsl r0
 464:	00000450 	andeq	r0, r0, r0, asr r4
 468:	00008e14 	andeq	r8, r0, r4, lsl lr
 46c:	0000001c 	andeq	r0, r0, ip, lsl r0
 470:	83080e42 	movwhi	r0, #36418	; 0x8e42
 474:	00018e02 	andeq	r8, r1, r2, lsl #28
 478:	00000018 	andeq	r0, r0, r8, lsl r0
 47c:	00000450 	andeq	r0, r0, r0, asr r4
 480:	00008e30 	andeq	r8, r0, r0, lsr lr
 484:	0000009c 	muleq	r0, ip, r0
 488:	83100e42 	tsthi	r0, #1056	; 0x420
 48c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 490:	00018e02 	andeq	r8, r1, r2, lsl #28
 494:	00000014 	andeq	r0, r0, r4, lsl r0
 498:	00000450 	andeq	r0, r0, r0, asr r4
 49c:	00008ecc 	andeq	r8, r0, ip, asr #29
 4a0:	00000028 	andeq	r0, r0, r8, lsr #32
 4a4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 4a8:	00018e02 	andeq	r8, r1, r2, lsl #28
 4ac:	00000014 	andeq	r0, r0, r4, lsl r0
 4b0:	00000450 	andeq	r0, r0, r0, asr r4
 4b4:	00008ef4 	strdeq	r8, [r0], -r4
 4b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4bc:	83080e42 	movwhi	r0, #36418	; 0x8e42
 4c0:	00018e02 	andeq	r8, r1, r2, lsl #28
 4c4:	00000014 	andeq	r0, r0, r4, lsl r0
 4c8:	00000450 	andeq	r0, r0, r0, asr r4
 4cc:	00008f10 	andeq	r8, r0, r0, lsl pc
 4d0:	0000002c 	andeq	r0, r0, ip, lsr #32
 4d4:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 4d8:	00018e02 	andeq	r8, r1, r2, lsl #28
 4dc:	00000014 	andeq	r0, r0, r4, lsl r0
 4e0:	00000450 	andeq	r0, r0, r0, asr r4
 4e4:	00008f3c 	andeq	r8, r0, ip, lsr pc
 4e8:	0000000c 	andeq	r0, r0, ip
 4ec:	83080e42 	movwhi	r0, #36418	; 0x8e42
 4f0:	00018e02 	andeq	r8, r1, r2, lsl #28
 4f4:	00000014 	andeq	r0, r0, r4, lsl r0
 4f8:	00000450 	andeq	r0, r0, r0, asr r4
 4fc:	00008f48 	andeq	r8, r0, r8, asr #30
 500:	00000020 	andeq	r0, r0, r0, lsr #32
 504:	83080e42 	movwhi	r0, #36418	; 0x8e42
 508:	00018e02 	andeq	r8, r1, r2, lsl #28
 50c:	0000000c 	andeq	r0, r0, ip
 510:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 514:	7c020001 	stcvc	0, cr0, [r2], {1}
 518:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 51c:	00000018 	andeq	r0, r0, r8, lsl r0
 520:	0000050c 	andeq	r0, r0, ip, lsl #10
 524:	00008f68 	andeq	r8, r0, r8, ror #30
 528:	000000d4 	ldrdeq	r0, [r0], -r4
 52c:	83100e42 	tsthi	r0, #1056	; 0x420
 530:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 534:	00018e02 	andeq	r8, r1, r2, lsl #28
 538:	00000014 	andeq	r0, r0, r4, lsl r0
 53c:	0000050c 	andeq	r0, r0, ip, lsl #10
 540:	0000903c 	andeq	r9, r0, ip, lsr r0
 544:	00000038 	andeq	r0, r0, r8, lsr r0
 548:	83080e42 	movwhi	r0, #36418	; 0x8e42
 54c:	00018e02 	andeq	r8, r1, r2, lsl #28
 550:	00000014 	andeq	r0, r0, r4, lsl r0
 554:	0000050c 	andeq	r0, r0, ip, lsl #10
 558:	00009074 	andeq	r9, r0, r4, ror r0
 55c:	00000038 	andeq	r0, r0, r8, lsr r0
 560:	83080e42 	movwhi	r0, #36418	; 0x8e42
 564:	00018e02 	andeq	r8, r1, r2, lsl #28
 568:	00000018 	andeq	r0, r0, r8, lsl r0
 56c:	0000050c 	andeq	r0, r0, ip, lsl #10
 570:	000090ac 	andeq	r9, r0, ip, lsr #1
 574:	000000cc 	andeq	r0, r0, ip, asr #1
 578:	83100e42 	tsthi	r0, #1056	; 0x420
 57c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 580:	00018e02 	andeq	r8, r1, r2, lsl #28
 584:	00000014 	andeq	r0, r0, r4, lsl r0
 588:	0000050c 	andeq	r0, r0, ip, lsl #10
 58c:	00009178 	andeq	r9, r0, r8, ror r1
 590:	0000004c 	andeq	r0, r0, ip, asr #32
 594:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 598:	00018e02 	andeq	r8, r1, r2, lsl #28
 59c:	00000014 	andeq	r0, r0, r4, lsl r0
 5a0:	0000050c 	andeq	r0, r0, ip, lsl #10
 5a4:	000091c4 	andeq	r9, r0, r4, asr #3
 5a8:	00000078 	andeq	r0, r0, r8, ror r0
 5ac:	83080e42 	movwhi	r0, #36418	; 0x8e42
 5b0:	00018e02 	andeq	r8, r1, r2, lsl #28
 5b4:	00000018 	andeq	r0, r0, r8, lsl r0
 5b8:	0000050c 	andeq	r0, r0, ip, lsl #10
 5bc:	0000923c 	andeq	r9, r0, ip, lsr r2
 5c0:	000000d8 	ldrdeq	r0, [r0], -r8
 5c4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 5c8:	86038504 	strhi	r8, [r3], -r4, lsl #10
 5cc:	00018e02 	andeq	r8, r1, r2, lsl #28
 5d0:	0000000c 	andeq	r0, r0, ip
 5d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 5d8:	7c020001 	stcvc	0, cr0, [r2], {1}
 5dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 5e0:	0000000c 	andeq	r0, r0, ip
 5e4:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 5e8:	00009314 	andeq	r9, r0, r4, lsl r3
 5ec:	00000020 	andeq	r0, r0, r0, lsr #32
 5f0:	0000000c 	andeq	r0, r0, ip
 5f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 5f8:	7c020001 	stcvc	0, cr0, [r2], {1}
 5fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 600:	00000014 	andeq	r0, r0, r4, lsl r0
 604:	000005f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 608:	00009334 	andeq	r9, r0, r4, lsr r3
 60c:	00000014 	andeq	r0, r0, r4, lsl r0
 610:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 614:	00018e02 	andeq	r8, r1, r2, lsl #28

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	00008b2c 	andeq	r8, r0, ip, lsr #22
   4:	00008ba0 	andeq	r8, r0, r0, lsr #23
	...
