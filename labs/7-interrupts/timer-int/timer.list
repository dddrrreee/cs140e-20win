
timer.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e3a0d302 	mov	sp, #134217728	; 0x8000000
    8004:	e3a0b000 	mov	fp, #0
    8008:	eb0002cb 	bl	8b3c <_cstart>
    800c:	eb0002e2 	bl	8b9c <rpi_reboot>

00008010 <interrupt_vector>:

// Q: if you make not volatile?
static volatile unsigned cnt, period, period_sum;

// client has to define this.
void interrupt_vector(unsigned pc) {
    8010:	e92d4010 	push	{r4, lr}
    dev_barrier();
    8014:	eb000318 	bl	8c7c <dev_barrier>
    unsigned pending = GET32(IRQ_basic_pending);
    8018:	e59f005c 	ldr	r0, [pc, #92]	; 807c <interrupt_vector+0x6c>
    801c:	eb00032a 	bl	8ccc <GET32>

    // if this isn't true, could be a GPU interrupt (as discussed in Broadcom):
    // just return.  [confusing, since we didn't enable!]
    if((pending & RPI_BASIC_ARM_TIMER_IRQ) == 0)
    8020:	e3100001 	tst	r0, #1
    8024:	08bd8010 	popeq	{r4, pc}
     * enabled, so we don't have to work out which interrupt source
     * caused us to interrupt 
     *
     * Q: what happens, exactly, if we delete?
     */
    PUT32(arm_timer_IRQClear, 1);
    8028:	e59f0050 	ldr	r0, [pc, #80]	; 8080 <interrupt_vector+0x70>
    802c:	e3a01001 	mov	r1, #1
    8030:	eb000319 	bl	8c9c <PUT32>
     * different device, then the broadcom doc states we need to have a
     * memory barrier.   NOTE: we have largely been living in sin and completely
     * ignoring this requirement for UART.   (And also the GPIO overall.)  
     * This is probably not a good idea and we should be more careful.
     */
    dev_barrier();    
    8034:	eb000310 	bl	8c7c <dev_barrier>
    cnt++;
    8038:	e59f4044 	ldr	r4, [pc, #68]	; 8084 <interrupt_vector+0x74>
    803c:	e5943000 	ldr	r3, [r4]
    8040:	e2833001 	add	r3, r3, #1
    8044:	e5843000 	str	r3, [r4]

    // compute time since the last interrupt.
    static unsigned last_clk = 0;
    unsigned clk = timer_get_usec();
    8048:	eb0002f1 	bl	8c14 <timer_get_usec>
    period = last_clk ? clk - last_clk : 0;
    804c:	e5943004 	ldr	r3, [r4, #4]
    8050:	e3530000 	cmp	r3, #0
    8054:	10632000 	rsbne	r2, r3, r0
    8058:	03a02000 	moveq	r2, #0
    805c:	e59f3020 	ldr	r3, [pc, #32]	; 8084 <interrupt_vector+0x74>
    8060:	e5832008 	str	r2, [r3, #8]
    period_sum += period;
    8064:	e593100c 	ldr	r1, [r3, #12]
    8068:	e5932008 	ldr	r2, [r3, #8]
    806c:	e0812002 	add	r2, r1, r2
    8070:	e583200c 	str	r2, [r3, #12]
    last_clk = clk;
    8074:	e5830004 	str	r0, [r3, #4]
    8078:	e8bd8010 	pop	{r4, pc}
    807c:	2000b200 	andcs	fp, r0, r0, lsl #4
    8080:	2000b40c 	andcs	fp, r0, ip, lsl #8
    8084:	0000982c 	andeq	r9, r0, ip, lsr #16

00008088 <notmain>:
    // Q: what happens (&why) if you uncomment the print statement?
    // printk("In interrupt handler at time: %d\n", clk);
}

#include "cs140e-src/cycle-count.h"
void notmain() {
    8088:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    uart_init();
    808c:	eb00031a 	bl	8cfc <uart_init>
	
    printk("about to install handlers\n");
    8090:	e59f01b4 	ldr	r0, [pc, #436]	; 824c <notmain+0x1c4>
    8094:	eb00013f 	bl	8598 <printk>
    int_init();
    8098:	eb0000b3 	bl	836c <int_init>

    printk("setting up timer interrupts\n");
    809c:	e59f01ac 	ldr	r0, [pc, #428]	; 8250 <notmain+0x1c8>
    80a0:	eb00013c 	bl	8598 <printk>
    // Q: if you change 0x100?
    timer_interrupt_init(0x100);
    80a4:	e3a00c01 	mov	r0, #256	; 0x100
    80a8:	eb00012a 	bl	8558 <timer_interrupt_init>

    printk("gonna enable ints globally!\n");
    80ac:	e59f01a0 	ldr	r0, [pc, #416]	; 8254 <notmain+0x1cc>
    80b0:	eb000138 	bl	8598 <printk>
    // Q: what happens (&why) if you don't do?
    system_enable_interrupts();
    80b4:	eb00007f 	bl	82b8 <system_enable_interrupts>
    printk("enabled!\n");
    80b8:	e59f0198 	ldr	r0, [pc, #408]	; 8258 <notmain+0x1d0>
    80bc:	eb000135 	bl	8598 <printk>

    unsigned start = timer_get_usec();
    80c0:	eb0002d3 	bl	8c14 <timer_get_usec>
    80c4:	e1a05000 	mov	r5, r0

    // Q: what happens if you enable cache?  Why are some parts
    // the same, some change?
    //enable_cache(); 	
    unsigned iter = 0, sum = 0;
    80c8:	e3a04000 	mov	r4, #0
#   define N 20
    while(cnt < N) {
    80cc:	e59f2188 	ldr	r2, [pc, #392]	; 825c <notmain+0x1d4>
    80d0:	ea000000 	b	80d8 <notmain+0x50>
        // Q: if you comment this out?  why do #'s change?
#if 0
        printk("iter=%d: cnt = %d, time between interrupts = %d usec (%x)\n", 
                                    iter,cnt, period,period);
#endif
        iter++;
    80d4:	e2844001 	add	r4, r4, #1
    // Q: what happens if you enable cache?  Why are some parts
    // the same, some change?
    //enable_cache(); 	
    unsigned iter = 0, sum = 0;
#   define N 20
    while(cnt < N) {
    80d8:	e5923000 	ldr	r3, [r2]
    80dc:	e3530013 	cmp	r3, #19
    80e0:	9afffffb 	bls	80d4 <notmain+0x4c>
    }

    // overly complicated calculation of sec/ms/usec breakdown
    // make it easier to tell the overhead of different changes.
    // not really specific to interrupt handling.
    unsigned tot = timer_get_usec() - start,
    80e4:	eb0002ca 	bl	8c14 <timer_get_usec>
    80e8:	e0650000 	rsb	r0, r5, r0
             tot_sec    = tot / (1000*1000),
    80ec:	e59f716c 	ldr	r7, [pc, #364]	; 8260 <notmain+0x1d8>
    80f0:	e0871097 	umull	r1, r7, r7, r0
    80f4:	e1a07927 	lsr	r7, r7, #18
             tot_ms     = (tot / 1000) % 1000,
    80f8:	e59f5164 	ldr	r5, [pc, #356]	; 8264 <notmain+0x1dc>
    80fc:	e08c2095 	umull	r2, ip, r5, r0
    8100:	e1a0c32c 	lsr	ip, ip, #6
    8104:	e0853c95 	umull	r3, r5, r5, ip
    8108:	e1a05325 	lsr	r5, r5, #6
    810c:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    8110:	e0050593 	mul	r5, r3, r5
    8114:	e065500c 	rsb	r5, r5, ip
             tot_usec   = (tot % 1000);
    8118:	e00c0c93 	mul	ip, r3, ip
    811c:	e06c6000 	rsb	r6, ip, r0
    printk("-----------------------------------------\n");
    8120:	e59f0140 	ldr	r0, [pc, #320]	; 8268 <notmain+0x1e0>
    8124:	eb00011b 	bl	8598 <printk>
    printk("summary:\n");
    8128:	e59f013c 	ldr	r0, [pc, #316]	; 826c <notmain+0x1e4>
    812c:	eb000119 	bl	8598 <printk>
    printk("\t%10d: total iterations\n", iter);
    8130:	e59f0138 	ldr	r0, [pc, #312]	; 8270 <notmain+0x1e8>
    8134:	e1a01004 	mov	r1, r4
    8138:	eb000116 	bl	8598 <printk>
    printk("\t%10d: tot interrupts\n", N);
    813c:	e59f0130 	ldr	r0, [pc, #304]	; 8274 <notmain+0x1ec>
    8140:	e3a01014 	mov	r1, #20
    8144:	eb000113 	bl	8598 <printk>
    printk("\t%10d: iterations / interrupt\n", iter/N);
    8148:	e59f3128 	ldr	r3, [pc, #296]	; 8278 <notmain+0x1f0>
    814c:	e0812493 	umull	r2, r1, r3, r4
    8150:	e59f0124 	ldr	r0, [pc, #292]	; 827c <notmain+0x1f4>
    8154:	e1a01221 	lsr	r1, r1, #4
    8158:	eb00010e 	bl	8598 <printk>
    printk("\t%10d: average period\n\n", period_sum/(N-1));
    815c:	e59f30f8 	ldr	r3, [pc, #248]	; 825c <notmain+0x1d4>
    8160:	e593200c 	ldr	r2, [r3, #12]
    8164:	e59f3114 	ldr	r3, [pc, #276]	; 8280 <notmain+0x1f8>
    8168:	e0831293 	umull	r1, r3, r3, r2
    816c:	e0632002 	rsb	r2, r3, r2
    8170:	e08310a2 	add	r1, r3, r2, lsr #1
    8174:	e59f0108 	ldr	r0, [pc, #264]	; 8284 <notmain+0x1fc>
    8178:	e1a01221 	lsr	r1, r1, #4
    817c:	eb000105 	bl	8598 <printk>
    printk("total execution time: %dsec.%dms.%dusec\n", 
    8180:	e59f0100 	ldr	r0, [pc, #256]	; 8288 <notmain+0x200>
    8184:	e1a01007 	mov	r1, r7
    8188:	e1a02005 	mov	r2, r5
    818c:	e1a03006 	mov	r3, r6
    8190:	eb000100 	bl	8598 <printk>
                    tot_sec, tot_ms, tot_usec);

    printk("\nmeasuring cost of different operations (pi A+ = 700 cyc / usec)\n");
    8194:	e59f00f0 	ldr	r0, [pc, #240]	; 828c <notmain+0x204>
    8198:	eb0000fe 	bl	8598 <printk>
    cycle_cnt_init();
    819c:	e3a03001 	mov	r3, #1
    81a0:	ee0f3f1c 	mcr	15, 0, r3, cr15, cr12, {0}
    TIME_CYC_PRINT("\tread/write barrier", dev_barrier());
    81a4:	ee1f5f3c 	mrc	15, 0, r5, cr15, cr12, {1}
    81a8:	eb0002b3 	bl	8c7c <dev_barrier>
    81ac:	ee1f2f3c 	mrc	15, 0, r2, cr15, cr12, {1}
    81b0:	e59f40d8 	ldr	r4, [pc, #216]	; 8290 <notmain+0x208>
    81b4:	e1a00004 	mov	r0, r4
    81b8:	e59f10d4 	ldr	r1, [pc, #212]	; 8294 <notmain+0x20c>
    81bc:	e0652002 	rsb	r2, r5, r2
    81c0:	e59f30d0 	ldr	r3, [pc, #208]	; 8298 <notmain+0x210>
    81c4:	eb0000f3 	bl	8598 <printk>
    TIME_CYC_PRINT("\tread barrier", dmb());
    81c8:	ee1f5f3c 	mrc	15, 0, r5, cr15, cr12, {1}
    81cc:	eb0002ab 	bl	8c80 <dmb>
    81d0:	ee1f2f3c 	mrc	15, 0, r2, cr15, cr12, {1}
    81d4:	e1a00004 	mov	r0, r4
    81d8:	e59f10bc 	ldr	r1, [pc, #188]	; 829c <notmain+0x214>
    81dc:	e0652002 	rsb	r2, r5, r2
    81e0:	e59f30b8 	ldr	r3, [pc, #184]	; 82a0 <notmain+0x218>
    81e4:	eb0000eb 	bl	8598 <printk>
    TIME_CYC_PRINT("\tsafe timer", timer_get_usec());
    81e8:	ee1f5f3c 	mrc	15, 0, r5, cr15, cr12, {1}
    81ec:	eb000288 	bl	8c14 <timer_get_usec>
    81f0:	ee1f2f3c 	mrc	15, 0, r2, cr15, cr12, {1}
    81f4:	e1a00004 	mov	r0, r4
    81f8:	e59f10a4 	ldr	r1, [pc, #164]	; 82a4 <notmain+0x21c>
    81fc:	e0652002 	rsb	r2, r5, r2
    8200:	e59f30a0 	ldr	r3, [pc, #160]	; 82a8 <notmain+0x220>
    8204:	eb0000e3 	bl	8598 <printk>
    TIME_CYC_PRINT("\tunsafe timer", timer_get_usec_raw());
    8208:	ee1f5f3c 	mrc	15, 0, r5, cr15, cr12, {1}
    820c:	eb00027b 	bl	8c00 <timer_get_usec_raw>
    8210:	ee1f2f3c 	mrc	15, 0, r2, cr15, cr12, {1}
    8214:	e1a00004 	mov	r0, r4
    8218:	e59f108c 	ldr	r1, [pc, #140]	; 82ac <notmain+0x224>
    821c:	e0652002 	rsb	r2, r5, r2
    8220:	e59f3088 	ldr	r3, [pc, #136]	; 82b0 <notmain+0x228>
    8224:	eb0000db 	bl	8598 <printk>
    // macro expansion messes up the printk
    printk("\t<cycle_cnt_read()>: %d\n", TIME_CYC(cycle_cnt_read()));
    8228:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    822c:	ee1f2f3c 	mrc	15, 0, r2, cr15, cr12, {1}
    8230:	ee1f1f3c 	mrc	15, 0, r1, cr15, cr12, {1}
    8234:	e59f0078 	ldr	r0, [pc, #120]	; 82b4 <notmain+0x22c>
    8238:	e0631001 	rsb	r1, r3, r1
    823c:	eb0000d5 	bl	8598 <printk>
    printk("-----------------------------------------\n");
    8240:	e59f0020 	ldr	r0, [pc, #32]	; 8268 <notmain+0x1e0>
    8244:	eb0000d3 	bl	8598 <printk>

    clean_reboot();
    8248:	eb000231 	bl	8b14 <clean_reboot>
    824c:	0000926c 	andeq	r9, r0, ip, ror #4
    8250:	00009288 	andeq	r9, r0, r8, lsl #5
    8254:	000092a8 	andeq	r9, r0, r8, lsr #5
    8258:	000092c8 	andeq	r9, r0, r8, asr #5
    825c:	0000982c 	andeq	r9, r0, ip, lsr #16
    8260:	431bde83 	tstmi	fp, #2096	; 0x830
    8264:	10624dd3 	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>
    8268:	000092d4 	ldrdeq	r9, [r0], -r4
    826c:	00009300 	andeq	r9, r0, r0, lsl #6
    8270:	0000930c 	andeq	r9, r0, ip, lsl #6
    8274:	00009328 	andeq	r9, r0, r8, lsr #6
    8278:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    827c:	00009340 	andeq	r9, r0, r0, asr #6
    8280:	af286bcb 	svcge	0x00286bcb
    8284:	00009360 	andeq	r9, r0, r0, ror #6
    8288:	00009378 	andeq	r9, r0, r8, ror r3
    828c:	000093a4 	andeq	r9, r0, r4, lsr #7
    8290:	000093e8 	andeq	r9, r0, r8, ror #7
    8294:	000093fc 	strdeq	r9, [r0], -ip
    8298:	00009410 	andeq	r9, r0, r0, lsl r4
    829c:	00009420 	andeq	r9, r0, r0, lsr #8
    82a0:	00009430 	andeq	r9, r0, r0, lsr r4
    82a4:	00009438 	andeq	r9, r0, r8, lsr r4
    82a8:	00009444 	andeq	r9, r0, r4, asr #8
    82ac:	00009458 	andeq	r9, r0, r8, asr r4
    82b0:	00009468 	andeq	r9, r0, r8, ror #8
    82b4:	00009480 	andeq	r9, r0, r0, lsl #9

000082b8 <system_enable_interrupts>:
    82b8:	e10f0000 	mrs	r0, CPSR
    82bc:	e3c00080 	bic	r0, r0, #128	; 0x80
    82c0:	e121f000 	msr	CPSR_c, r0
    82c4:	e12fff1e 	bx	lr

000082c8 <system_disable_interrupts>:
    82c8:	e10f0000 	mrs	r0, CPSR
    82cc:	e3800080 	orr	r0, r0, #128	; 0x80
    82d0:	e121f000 	msr	CPSR_c, r0
    82d4:	e12fff1e 	bx	lr

000082d8 <_interrupt_table>:
    82d8:	e59ff030 	ldr	pc, [pc, #48]	; 8310 <_reset_asm>
    82dc:	e59ff030 	ldr	pc, [pc, #48]	; 8314 <_undefined_instruction_asm>
    82e0:	e59ff030 	ldr	pc, [pc, #48]	; 8318 <_software_interrupt_asm>
    82e4:	e59ff030 	ldr	pc, [pc, #48]	; 831c <_prefetch_abort_asm>
    82e8:	e59ff030 	ldr	pc, [pc, #48]	; 8320 <_data_abort_asm>
    82ec:	e59ff01c 	ldr	pc, [pc, #28]	; 8310 <_reset_asm>
    82f0:	e59ff02c 	ldr	pc, [pc, #44]	; 8324 <_interrupt_asm>

000082f4 <fast_interrupt_asm>:
    82f4:	e24ee004 	sub	lr, lr, #4
    82f8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    82fc:	e92d1fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    8300:	e1a0000e 	mov	r0, lr
    8304:	eb000032 	bl	83d4 <fast_interrupt_vector>
    8308:	e8bd1fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    830c:	e8fd8000 	ldm	sp!, {pc}^

00008310 <_reset_asm>:
    8310:	00008344 	andeq	r8, r0, r4, asr #6

00008314 <_undefined_instruction_asm>:
    8314:	0000834c 	andeq	r8, r0, ip, asr #6

00008318 <_software_interrupt_asm>:
    8318:	00008354 	andeq	r8, r0, r4, asr r3

0000831c <_prefetch_abort_asm>:
    831c:	0000835c 	andeq	r8, r0, ip, asr r3

00008320 <_data_abort_asm>:
    8320:	00008364 	andeq	r8, r0, r4, ror #6

00008324 <_interrupt_asm>:
    8324:	00008328 	andeq	r8, r0, r8, lsr #6

00008328 <_interrupt_table_end>:
    8328:	e3a0d409 	mov	sp, #150994944	; 0x9000000
    832c:	e24ee004 	sub	lr, lr, #4
    8330:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    8334:	e1a0000e 	mov	r0, lr
    8338:	ebffff34 	bl	8010 <interrupt_vector>
    833c:	e8bd5fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    8340:	e1b0f00e 	movs	pc, lr

00008344 <reset_asm>:
    8344:	e24ee004 	sub	lr, lr, #4
    8348:	eb00003f 	bl	844c <reset_vector>

0000834c <undefined_instruction_asm>:
    834c:	e24ee004 	sub	lr, lr, #4
    8350:	eb00004c 	bl	8488 <undefined_instruction_vector>

00008354 <software_interrupt_asm>:
    8354:	e24ee004 	sub	lr, lr, #4
    8358:	eb00002c 	bl	8410 <software_interrupt_vector>

0000835c <prefetch_abort_asm>:
    835c:	e24ee004 	sub	lr, lr, #4
    8360:	eb000057 	bl	84c4 <prefetch_abort_vector>

00008364 <data_abort_asm>:
    8364:	e24ee004 	sub	lr, lr, #4
    8368:	eb000064 	bl	8500 <data_abort_vector>

0000836c <int_init>:
#include "rpi.h"
#include "rpi-interrupts.h"

// initialize global interrupt state.
void int_init(void) {
    836c:	e92d4008 	push	{r3, lr}
    // put interrupt flags in known state. 
    //  BCM2835 manual, section 7.5
    PUT32(Disable_IRQs_1, 0xffffffff);
    8370:	e59f004c 	ldr	r0, [pc, #76]	; 83c4 <int_init+0x58>
    8374:	e3e01000 	mvn	r1, #0
    8378:	eb000247 	bl	8c9c <PUT32>
    PUT32(Disable_IRQs_2, 0xffffffff);
    837c:	e59f0044 	ldr	r0, [pc, #68]	; 83c8 <int_init+0x5c>
    8380:	e3e01000 	mvn	r1, #0
    8384:	eb000244 	bl	8c9c <PUT32>
    dev_barrier();
    8388:	eb00023b 	bl	8c7c <dev_barrier>

    // where the interrupt handlers go.
#   define RPI_VECTOR_START  0
    unsigned *dst = (void*)RPI_VECTOR_START,
                 *src = &_interrupt_table,
                 n = &_interrupt_table_end - src;
    838c:	e59f3038 	ldr	r3, [pc, #56]	; 83cc <int_init+0x60>
    8390:	e59f0038 	ldr	r0, [pc, #56]	; 83d0 <int_init+0x64>
    8394:	e0630000 	rsb	r0, r3, r0
    8398:	e1a00140 	asr	r0, r0, #2
    for(int i = 0; i < n; i++)
    839c:	e3a03000 	mov	r3, #0
        dst[i] = src[i];
    83a0:	e59fc024 	ldr	ip, [pc, #36]	; 83cc <int_init+0x60>
    // where the interrupt handlers go.
#   define RPI_VECTOR_START  0
    unsigned *dst = (void*)RPI_VECTOR_START,
                 *src = &_interrupt_table,
                 n = &_interrupt_table_end - src;
    for(int i = 0; i < n; i++)
    83a4:	ea000003 	b	83b8 <int_init+0x4c>
        dst[i] = src[i];
    83a8:	e1a02103 	lsl	r2, r3, #2
    83ac:	e79c1103 	ldr	r1, [ip, r3, lsl #2]
    83b0:	e5821000 	str	r1, [r2]
    // where the interrupt handlers go.
#   define RPI_VECTOR_START  0
    unsigned *dst = (void*)RPI_VECTOR_START,
                 *src = &_interrupt_table,
                 n = &_interrupt_table_end - src;
    for(int i = 0; i < n; i++)
    83b4:	e2833001 	add	r3, r3, #1
    83b8:	e1530000 	cmp	r3, r0
    83bc:	3afffff9 	bcc	83a8 <int_init+0x3c>
        dst[i] = src[i];
}
    83c0:	e8bd8008 	pop	{r3, pc}
    83c4:	2000b21c 	andcs	fp, r0, ip, lsl r2
    83c8:	2000b220 	andcs	fp, r0, r0, lsr #4
    83cc:	000082d8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    83d0:	00008328 	andeq	r8, r0, r8, lsr #6

000083d4 <fast_interrupt_vector>:

#define UNHANDLED(msg,r) \
	panic("ERROR: unhandled exception <%s> at PC=%x\n", msg,r)
void fast_interrupt_vector(unsigned pc) {
    83d4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    83d8:	e24dd00c 	sub	sp, sp, #12
	UNHANDLED("fast", pc);
    83dc:	e59f301c 	ldr	r3, [pc, #28]	; 8400 <fast_interrupt_vector+0x2c>
    83e0:	e58d3000 	str	r3, [sp]
    83e4:	e58d0004 	str	r0, [sp, #4]
    83e8:	e59f0014 	ldr	r0, [pc, #20]	; 8404 <fast_interrupt_vector+0x30>
    83ec:	e59f1014 	ldr	r1, [pc, #20]	; 8408 <fast_interrupt_vector+0x34>
    83f0:	e59f2014 	ldr	r2, [pc, #20]	; 840c <fast_interrupt_vector+0x38>
    83f4:	e3a03020 	mov	r3, #32
    83f8:	eb000066 	bl	8598 <printk>
    83fc:	eb0001c4 	bl	8b14 <clean_reboot>
    8400:	00009578 	andeq	r9, r0, r8, ror r5
    8404:	0000952c 	andeq	r9, r0, ip, lsr #10
    8408:	00009568 	andeq	r9, r0, r8, ror #10
    840c:	0000949c 	muleq	r0, ip, r4

00008410 <software_interrupt_vector>:
}

// this is used for syscalls.
void software_interrupt_vector(unsigned pc) {
    8410:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8414:	e24dd00c 	sub	sp, sp, #12
	UNHANDLED("soft interrupt", pc);
    8418:	e59f301c 	ldr	r3, [pc, #28]	; 843c <software_interrupt_vector+0x2c>
    841c:	e58d3000 	str	r3, [sp]
    8420:	e58d0004 	str	r0, [sp, #4]
    8424:	e59f0014 	ldr	r0, [pc, #20]	; 8440 <software_interrupt_vector+0x30>
    8428:	e59f1014 	ldr	r1, [pc, #20]	; 8444 <software_interrupt_vector+0x34>
    842c:	e59f2014 	ldr	r2, [pc, #20]	; 8448 <software_interrupt_vector+0x38>
    8430:	e3a03025 	mov	r3, #37	; 0x25
    8434:	eb000057 	bl	8598 <printk>
    8438:	eb0001b5 	bl	8b14 <clean_reboot>
    843c:	00009580 	andeq	r9, r0, r0, lsl #11
    8440:	0000952c 	andeq	r9, r0, ip, lsr #10
    8444:	00009568 	andeq	r9, r0, r8, ror #10
    8448:	000094b4 			; <UNDEFINED> instruction: 0x000094b4

0000844c <reset_vector>:
}
void reset_vector(unsigned pc) {
    844c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8450:	e24dd00c 	sub	sp, sp, #12
	UNHANDLED("reset vector", pc);
    8454:	e59f301c 	ldr	r3, [pc, #28]	; 8478 <reset_vector+0x2c>
    8458:	e58d3000 	str	r3, [sp]
    845c:	e58d0004 	str	r0, [sp, #4]
    8460:	e59f0014 	ldr	r0, [pc, #20]	; 847c <reset_vector+0x30>
    8464:	e59f1014 	ldr	r1, [pc, #20]	; 8480 <reset_vector+0x34>
    8468:	e59f2014 	ldr	r2, [pc, #20]	; 8484 <reset_vector+0x38>
    846c:	e3a03028 	mov	r3, #40	; 0x28
    8470:	eb000048 	bl	8598 <printk>
    8474:	eb0001a6 	bl	8b14 <clean_reboot>
    8478:	00009590 	muleq	r0, r0, r5
    847c:	0000952c 	andeq	r9, r0, ip, lsr #10
    8480:	00009568 	andeq	r9, r0, r8, ror #10
    8484:	000094d0 	ldrdeq	r9, [r0], -r0

00008488 <undefined_instruction_vector>:
}
void undefined_instruction_vector(unsigned pc) {
    8488:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    848c:	e24dd00c 	sub	sp, sp, #12
	UNHANDLED("undefined instruction", pc);
    8490:	e59f301c 	ldr	r3, [pc, #28]	; 84b4 <undefined_instruction_vector+0x2c>
    8494:	e58d3000 	str	r3, [sp]
    8498:	e58d0004 	str	r0, [sp, #4]
    849c:	e59f0014 	ldr	r0, [pc, #20]	; 84b8 <undefined_instruction_vector+0x30>
    84a0:	e59f1014 	ldr	r1, [pc, #20]	; 84bc <undefined_instruction_vector+0x34>
    84a4:	e59f2014 	ldr	r2, [pc, #20]	; 84c0 <undefined_instruction_vector+0x38>
    84a8:	e3a0302b 	mov	r3, #43	; 0x2b
    84ac:	eb000039 	bl	8598 <printk>
    84b0:	eb000197 	bl	8b14 <clean_reboot>
    84b4:	000095a0 	andeq	r9, r0, r0, lsr #11
    84b8:	0000952c 	andeq	r9, r0, ip, lsr #10
    84bc:	00009568 	andeq	r9, r0, r8, ror #10
    84c0:	000094e0 	andeq	r9, r0, r0, ror #9

000084c4 <prefetch_abort_vector>:
}
void prefetch_abort_vector(unsigned pc) {
    84c4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    84c8:	e24dd00c 	sub	sp, sp, #12
	UNHANDLED("prefetch abort", pc);
    84cc:	e59f301c 	ldr	r3, [pc, #28]	; 84f0 <prefetch_abort_vector+0x2c>
    84d0:	e58d3000 	str	r3, [sp]
    84d4:	e58d0004 	str	r0, [sp, #4]
    84d8:	e59f0014 	ldr	r0, [pc, #20]	; 84f4 <prefetch_abort_vector+0x30>
    84dc:	e59f1014 	ldr	r1, [pc, #20]	; 84f8 <prefetch_abort_vector+0x34>
    84e0:	e59f2014 	ldr	r2, [pc, #20]	; 84fc <prefetch_abort_vector+0x38>
    84e4:	e3a0302e 	mov	r3, #46	; 0x2e
    84e8:	eb00002a 	bl	8598 <printk>
    84ec:	eb000188 	bl	8b14 <clean_reboot>
    84f0:	000095b8 			; <UNDEFINED> instruction: 0x000095b8
    84f4:	0000952c 	andeq	r9, r0, ip, lsr #10
    84f8:	00009568 	andeq	r9, r0, r8, ror #10
    84fc:	00009500 	andeq	r9, r0, r0, lsl #10

00008500 <data_abort_vector>:
}
void data_abort_vector(unsigned pc) {
    8500:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8504:	e24dd00c 	sub	sp, sp, #12
	UNHANDLED("data abort", pc);
    8508:	e59f301c 	ldr	r3, [pc, #28]	; 852c <data_abort_vector+0x2c>
    850c:	e58d3000 	str	r3, [sp]
    8510:	e58d0004 	str	r0, [sp, #4]
    8514:	e59f0014 	ldr	r0, [pc, #20]	; 8530 <data_abort_vector+0x30>
    8518:	e59f1014 	ldr	r1, [pc, #20]	; 8534 <data_abort_vector+0x34>
    851c:	e59f2014 	ldr	r2, [pc, #20]	; 8538 <data_abort_vector+0x38>
    8520:	e3a03031 	mov	r3, #49	; 0x31
    8524:	eb00001b 	bl	8598 <printk>
    8528:	eb000179 	bl	8b14 <clean_reboot>
    852c:	000095c8 	andeq	r9, r0, r8, asr #11
    8530:	0000952c 	andeq	r9, r0, ip, lsr #10
    8534:	00009568 	andeq	r9, r0, r8, ror #10
    8538:	00009518 	andeq	r9, r0, r8, lsl r5

0000853c <timer_check_offsets>:
    // ready.
}

// Q: how does the libpi/libc/assert.h:AssertNow macro work?
// Q: what happens / why when you change some of these constants?
static void timer_check_offsets(void) {
    853c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8540:	e24dd01c 	sub	sp, sp, #28
    check_bitfield(rpi_arm_timer_ctrl_t, int_enabled,        5, 1);
    check_bitfield(rpi_arm_timer_ctrl_t, timer_enabled,      7, 1);
    check_bitfield(rpi_arm_timer_ctrl_t, counter_enabled,    9, 1);
    check_bitfield(rpi_arm_timer_ctrl_t, counter_prescaler,          16, 7);
    AssertNow(sizeof(rpi_arm_timer_ctrl_t) == 4);
    printk("offsets checked out!\n");
    8544:	e59f0008 	ldr	r0, [pc, #8]	; 8554 <timer_check_offsets+0x18>
    8548:	eb000012 	bl	8598 <printk>
}
    854c:	e28dd01c 	add	sp, sp, #28
    8550:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    8554:	00009704 	andeq	r9, r0, r4, lsl #14

00008558 <timer_interrupt_init>:
// macros to help deal with structures and put/get
#include "libc/helper-macros.h"

static void timer_check_offsets(void);

void timer_interrupt_init(unsigned ncycles) {
    8558:	e92d4010 	push	{r4, lr}
    855c:	e1a04000 	mov	r4, r0
    timer_check_offsets();
    8560:	ebfffff5 	bl	853c <timer_check_offsets>

    // from valvers:
    //	 Enable the timer interrupt IRQ
    PUT32(Enable_Basic_IRQs, RPI_BASIC_ARM_TIMER_IRQ);
    8564:	e59f0020 	ldr	r0, [pc, #32]	; 858c <timer_interrupt_init+0x34>
    8568:	e3a01001 	mov	r1, #1
    856c:	eb0001ca 	bl	8c9c <PUT32>

    /* Setup the system timer interrupt */
    /* Timer frequency = Clk/256 * Load --- so smaller = more frequent. */
    PUT32(arm_timer_Load, ncycles);
    8570:	e59f0018 	ldr	r0, [pc, #24]	; 8590 <timer_interrupt_init+0x38>
    8574:	e1a01004 	mov	r1, r4
    8578:	eb0001c7 	bl	8c9c <PUT32>

    // Setup the ARM Timer: experiment by changing the prescale [defined on p197]
#if 1
    PUT32(arm_timer_Control,
    857c:	e59f0010 	ldr	r0, [pc, #16]	; 8594 <timer_interrupt_init+0x3c>
    8580:	e3a010aa 	mov	r1, #170	; 0xaa
    8584:	eb0001c4 	bl	8c9c <PUT32>
    8588:	e8bd8010 	pop	{r4, pc}
    858c:	2000b218 	andcs	fp, r0, r8, lsl r2
    8590:	2000b400 	andcs	fp, r0, r0, lsl #8
    8594:	2000b408 	andcs	fp, r0, r8, lsl #8

00008598 <printk>:
#include <stdarg.h>

#include "rpi.h"
#include "va-printk.h"

int printk(const char *fmt, ...) {
    8598:	e92d000f 	push	{r0, r1, r2, r3}
    859c:	e92d4030 	push	{r4, r5, lr}
    85a0:	e24dd00c 	sub	sp, sp, #12
    // this is a really huge buffer for a pi.   could do this better.
    static char buf[1024];
    va_list args;

    va_start(args, fmt);
    85a4:	e28d301c 	add	r3, sp, #28
    85a8:	e58d3004 	str	r3, [sp, #4]
        int sz = va_printk(buf, sizeof buf, fmt, args);
    85ac:	e59f4034 	ldr	r4, [pc, #52]	; 85e8 <printk+0x50>
    85b0:	e1a00004 	mov	r0, r4
    85b4:	e3a01b01 	mov	r1, #1024	; 0x400
    85b8:	e59d2018 	ldr	r2, [sp, #24]
    85bc:	eb0000b2 	bl	888c <va_printk>
    85c0:	e1a05000 	mov	r5, r0
    va_end(args);


#if 1
    putk(buf);
    85c4:	e59f3020 	ldr	r3, [pc, #32]	; 85ec <printk+0x54>
    85c8:	e5933000 	ldr	r3, [r3]
    85cc:	e1a00004 	mov	r0, r4
    85d0:	e12fff33 	blx	r3
    int i;
    for(i = 0; buf[i]; i++)
        rpi_putchar(buf[i]);
#endif
    return sz;
}
    85d4:	e1a00005 	mov	r0, r5
    85d8:	e28dd00c 	add	sp, sp, #12
    85dc:	e8bd4030 	pop	{r4, r5, lr}
    85e0:	e28dd010 	add	sp, sp, #16
    85e4:	e12fff1e 	bx	lr
    85e8:	0000983c 	andeq	r9, r0, ip, lsr r8
    85ec:	000091f4 	strdeq	r9, [r0], -r4

000085f0 <internal_putk>:
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    85f0:	e92d4038 	push	{r3, r4, r5, lr}
    85f4:	e1a04000 	mov	r4, r0
    for(; *p; p++)
        rpi_putchar(*p);
    85f8:	e59f5020 	ldr	r5, [pc, #32]	; 8620 <internal_putk+0x30>
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    85fc:	ea000002 	b	860c <internal_putk+0x1c>
        rpi_putchar(*p);
    8600:	e5953000 	ldr	r3, [r5]
    8604:	e12fff33 	blx	r3
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    8608:	e2844001 	add	r4, r4, #1
    860c:	e5d40000 	ldrb	r0, [r4]
    8610:	e3500000 	cmp	r0, #0
    8614:	1afffff9 	bne	8600 <internal_putk+0x10>
        rpi_putchar(*p);
//  we were adding this.
//  rpi_putchar('\n');
    return 1;
}
    8618:	e3a00001 	mov	r0, #1
    861c:	e8bd8038 	pop	{r3, r4, r5, pc}
    8620:	00009268 	andeq	r9, r0, r8, ror #4

00008624 <isdigit>:
    if(puts_fp)
        putk = puts_fp;
}

// XXX: check sign promotion.
static int isdigit(int c) { return c >= '0' && c <= '9'; }
    8624:	e2400030 	sub	r0, r0, #48	; 0x30
    8628:	e3500009 	cmp	r0, #9
    862c:	83a00000 	movhi	r0, #0
    8630:	93a00001 	movls	r0, #1
    8634:	e12fff1e 	bx	lr

00008638 <pad>:

// don't move: can't be inlined, gcc seems to have a bug.
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
    8638:	e0611000 	rsb	r1, r1, r0
	// pad with leading spaces
	for(; len < width; len++)
		*p++ = ' ';
    863c:	e3a03020 	mov	r3, #32
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8640:	ea000002 	b	8650 <pad+0x18>
		*p++ = ' ';
    8644:	e5c03000 	strb	r3, [r0]
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8648:	e2811001 	add	r1, r1, #1
		*p++ = ' ';
    864c:	e2800001 	add	r0, r0, #1
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8650:	e1510002 	cmp	r1, r2
    8654:	bafffffa 	blt	8644 <pad+0xc>
		*p++ = ' ';
	*p = 0;
    8658:	e3a03000 	mov	r3, #0
    865c:	e5c03000 	strb	r3, [r0]
	return p;
}
    8660:	e12fff1e 	bx	lr

00008664 <reverse>:

static char* reverse(char *dst, int n, char *p, char *start) {
	// drop the lower chars if the string is too big.
	int len = p - start + 1; // include \0
    8664:	e063c002 	rsb	ip, r3, r2
    8668:	e28cc001 	add	ip, ip, #1
	if(len > n)
    866c:	e15c0001 	cmp	ip, r1
		start += (len - n);
    8670:	c061100c 	rsbgt	r1, r1, ip
    8674:	c0833001 	addgt	r3, r3, r1

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    8678:	e2422001 	sub	r2, r2, #1
    867c:	e1a01000 	mov	r1, r0
    8680:	ea000002 	b	8690 <reverse+0x2c>
		*dst++ = *p;
    8684:	e452c001 	ldrb	ip, [r2], #-1
    8688:	e5c1c000 	strb	ip, [r1]
    868c:	e2811001 	add	r1, r1, #1
		start += (len - n);

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    8690:	e1520003 	cmp	r2, r3
    8694:	2afffffa 	bcs	8684 <reverse+0x20>
		*dst++ = *p;
	*dst++ = 0;
    8698:	e3a03000 	mov	r3, #0
    869c:	e5c13000 	strb	r3, [r1]

	return s;
}
    86a0:	e12fff1e 	bx	lr

000086a4 <emit>:

static char* emit(unsigned base, char *dst, int n, int val, int width, int signed_p) {
    86a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    86a8:	e24dd040 	sub	sp, sp, #64	; 0x40
    86ac:	e1a05001 	mov	r5, r1
    86b0:	e1a04002 	mov	r4, r2
    86b4:	e59d2058 	ldr	r2, [sp, #88]	; 0x58
	// XXX: constrain width to be >= bit size: can change this.
	if(width > n)
    86b8:	e1520004 	cmp	r2, r4
		width = n - 1;
    86bc:	c2442001 	subgt	r2, r4, #1

	char buf[64], *p = buf; 
	unsigned u = val;
    86c0:	e1a0c003 	mov	ip, r3

	switch(base) { 
    86c4:	e2400002 	sub	r0, r0, #2
    86c8:	e350000e 	cmp	r0, #14
    86cc:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
    86d0:	ea000042 	b	87e0 <emit+0x13c>
    86d4:	000087b8 			; <UNDEFINED> instruction: 0x000087b8
    86d8:	000087e0 	andeq	r8, r0, r0, ror #15
    86dc:	000087e0 	andeq	r8, r0, r0, ror #15
    86e0:	000087e0 	andeq	r8, r0, r0, ror #15
    86e4:	000087e0 	andeq	r8, r0, r0, ror #15
    86e8:	000087e0 	andeq	r8, r0, r0, ror #15
    86ec:	000087ac 	andeq	r8, r0, ip, lsr #15
    86f0:	000087e0 	andeq	r8, r0, r0, ror #15
    86f4:	00008710 	andeq	r8, r0, r0, lsl r7
    86f8:	000087e0 	andeq	r8, r0, r0, ror #15
    86fc:	000087e0 	andeq	r8, r0, r0, ror #15
    8700:	000087e0 	andeq	r8, r0, r0, ror #15
    8704:	000087e0 	andeq	r8, r0, r0, ror #15
    8708:	000087e0 	andeq	r8, r0, r0, ror #15
    870c:	00008784 	andeq	r8, r0, r4, lsl #15
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
    8710:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
    8714:	e2911000 	adds	r1, r1, #0
    8718:	13a01001 	movne	r1, #1
    871c:	e0111fa3 	ands	r1, r1, r3, lsr #31
				neg_p = 1;
				val = -val;
    8720:	1263c000 	rsbne	ip, r3, #0
	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
				neg_p = 1;
    8724:	13a08001 	movne	r8, #1
	unsigned u = val;

	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
    8728:	03a08000 	moveq	r8, #0
			if(val < 0 && signed_p) {
				neg_p = 1;
    872c:	e1a0100d 	mov	r1, sp
				val = -val;
				u = val;
			}
			do { 
				*p++ = "0123456789"[u % 10];
    8730:	e59f70e8 	ldr	r7, [pc, #232]	; 8820 <emit+0x17c>
    8734:	e59f60e8 	ldr	r6, [pc, #232]	; 8824 <emit+0x180>
    8738:	ea000000 	b	8740 <emit+0x9c>
    873c:	e1a01003 	mov	r1, r3
    8740:	e2813001 	add	r3, r1, #1
    8744:	e08e0c97 	umull	r0, lr, r7, ip
    8748:	e1a0e1ae 	lsr	lr, lr, #3
    874c:	e1a0000e 	mov	r0, lr
    8750:	e08ee10e 	add	lr, lr, lr, lsl #2
    8754:	e1a0e08e 	lsl	lr, lr, #1
    8758:	e06ee00c 	rsb	lr, lr, ip
    875c:	e7d6c00e 	ldrb	ip, [r6, lr]
    8760:	e5c1c000 	strb	ip, [r1]
			} while(u /= 10); 
    8764:	e1a0c000 	mov	ip, r0
    8768:	e3500000 	cmp	r0, #0
    876c:	1afffff2 	bne	873c <emit+0x98>
			if(neg_p)
    8770:	e3580000 	cmp	r8, #0
				*p++ = '-';
    8774:	12813002 	addne	r3, r1, #2
    8778:	13a0002d 	movne	r0, #45	; 0x2d
    877c:	15c10001 	strbne	r0, [r1, #1]
    8780:	ea00001c 	b	87f8 <emit+0x154>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    8784:	e1a0e00d 	mov	lr, sp
			break;
		}
		case 16:
			u = val;
                        do {
                                *p++ = "0123456789abcdef"[u % 16];
    8788:	e59f0098 	ldr	r0, [pc, #152]	; 8828 <emit+0x184>
    878c:	e28e3001 	add	r3, lr, #1
    8790:	e20c100f 	and	r1, ip, #15
    8794:	e7d01001 	ldrb	r1, [r0, r1]
    8798:	e5ce1000 	strb	r1, [lr]
    879c:	e1a0e003 	mov	lr, r3
                        } while(u /= 16);
    87a0:	e1b0c22c 	lsrs	ip, ip, #4
    87a4:	1afffff8 	bne	878c <emit+0xe8>
    87a8:	ea000012 	b	87f8 <emit+0x154>
                        break;
		// just a single char
		case 8:
			*p++ = val;
    87ac:	e5cd3000 	strb	r3, [sp]
    87b0:	e28d3001 	add	r3, sp, #1
			break;
    87b4:	ea00000f 	b	87f8 <emit+0x154>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    87b8:	e1a0e00d 	mov	lr, sp
#if 0
			for(int i = 0; i < 32; i++)
				*p++ = "01"[(u & (1<<i)) != 0];
#else
                        do {
                        	*p++ = "01"[u % 2];
    87bc:	e59f0068 	ldr	r0, [pc, #104]	; 882c <emit+0x188>
    87c0:	e28e3001 	add	r3, lr, #1
    87c4:	e20c1001 	and	r1, ip, #1
    87c8:	e7d01001 	ldrb	r1, [r0, r1]
    87cc:	e5ce1000 	strb	r1, [lr]
    87d0:	e1a0e003 	mov	lr, r3
			} while(u /= 2);
    87d4:	e1b0c0ac 	lsrs	ip, ip, #1
    87d8:	1afffff8 	bne	87c0 <emit+0x11c>
    87dc:	ea000005 	b	87f8 <emit+0x154>
#endif
			break;
		default:
			assert(0);
    87e0:	e59f0048 	ldr	r0, [pc, #72]	; 8830 <emit+0x18c>
    87e4:	e59f1048 	ldr	r1, [pc, #72]	; 8834 <emit+0x190>
    87e8:	e59f2048 	ldr	r2, [pc, #72]	; 8838 <emit+0x194>
    87ec:	e3a03075 	mov	r3, #117	; 0x75
    87f0:	ebffff68 	bl	8598 <printk>
    87f4:	eb0000c6 	bl	8b14 <clean_reboot>
	}
	// number string is reversed, so re-reverse it.
	return reverse(dst, n, pad(p, buf, width), buf);
    87f8:	e1a00003 	mov	r0, r3
    87fc:	e1a0100d 	mov	r1, sp
    8800:	ebffff8c 	bl	8638 <pad>
    8804:	e1a02000 	mov	r2, r0
    8808:	e1a00005 	mov	r0, r5
    880c:	e1a01004 	mov	r1, r4
    8810:	e1a0300d 	mov	r3, sp
    8814:	ebffff92 	bl	8664 <reverse>
}
    8818:	e28dd040 	add	sp, sp, #64	; 0x40
    881c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8820:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    8824:	00009768 	andeq	r9, r0, r8, ror #14
    8828:	00009774 	andeq	r9, r0, r4, ror r7
    882c:	00009788 	andeq	r9, r0, r8, lsl #15
    8830:	00009740 	andeq	r9, r0, r0, asr #14
    8834:	00009754 	andeq	r9, r0, r4, asr r7
    8838:	0000971c 	andeq	r9, r0, ip, lsl r7

0000883c <rpi_set_output>:
// override this is going through the network.
int (*rpi_putchar)(int c) = internal_putchar;
#endif


void rpi_set_output(int (*putc_fp)(int), int (*puts_fp)(const char *)) {
    883c:	e92d4008 	push	{r3, lr}
    assert(putc_fp);
    8840:	e3500000 	cmp	r0, #0
    8844:	1a000005 	bne	8860 <rpi_set_output+0x24>
    8848:	e59f0028 	ldr	r0, [pc, #40]	; 8878 <rpi_set_output+0x3c>
    884c:	e59f1028 	ldr	r1, [pc, #40]	; 887c <rpi_set_output+0x40>
    8850:	e59f2028 	ldr	r2, [pc, #40]	; 8880 <rpi_set_output+0x44>
    8854:	e3a03020 	mov	r3, #32
    8858:	ebffff4e 	bl	8598 <printk>
    885c:	eb0000ac 	bl	8b14 <clean_reboot>
    rpi_putchar = putc_fp;
    8860:	e59f301c 	ldr	r3, [pc, #28]	; 8884 <rpi_set_output+0x48>
    8864:	e5830000 	str	r0, [r3]
    if(puts_fp)
    8868:	e3510000 	cmp	r1, #0
        putk = puts_fp;
    886c:	159f3014 	ldrne	r3, [pc, #20]	; 8888 <rpi_set_output+0x4c>
    8870:	15831000 	strne	r1, [r3]
    8874:	e8bd8008 	pop	{r3, pc}
    8878:	0000978c 	andeq	r9, r0, ip, lsl #15
    887c:	00009754 	andeq	r9, r0, r4, asr r7
    8880:	00009724 	andeq	r9, r0, r4, lsr #14
    8884:	00009268 	andeq	r9, r0, r8, ror #4
    8888:	000091f4 	strdeq	r9, [r0], -r4

0000888c <va_printk>:
	return reverse(dst, n, pad(p, buf, width), buf);
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
    888c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8890:	e24dd08c 	sub	sp, sp, #140	; 0x8c
    8894:	e1a0b000 	mov	fp, r0
    8898:	e1a0a003 	mov	sl, r3
	char *p = buf, *e = buf + n - 1;
    889c:	e2411001 	sub	r1, r1, #1
    88a0:	e0808001 	add	r8, r0, r1

	buf[0] = 0;
    88a4:	e3a03000 	mov	r3, #0
    88a8:	e5c03000 	strb	r3, [r0]
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;
    88ac:	e1a04000 	mov	r4, r0

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    88b0:	ea000087 	b	8ad4 <va_printk+0x248>
		if(*fmt != '%')
    88b4:	e3530025 	cmp	r3, #37	; 0x25
			*p++ = *fmt++;
    88b8:	12822001 	addne	r2, r2, #1
    88bc:	15c43000 	strbne	r3, [r4]
    88c0:	12844001 	addne	r4, r4, #1
    88c4:	1a000082 	bne	8ad4 <va_printk+0x248>
		
		else if(fmt[1] == '%') {
    88c8:	e5d21001 	ldrb	r1, [r2, #1]
    88cc:	e3510025 	cmp	r1, #37	; 0x25
			*p++ = *fmt;
    88d0:	05c43000 	strbeq	r3, [r4]
			fmt+=2;
    88d4:	02822002 	addeq	r2, r2, #2
	for(; *fmt && p < e; ) {
		if(*fmt != '%')
			*p++ = *fmt++;
		
		else if(fmt[1] == '%') {
			*p++ = *fmt;
    88d8:	02844001 	addeq	r4, r4, #1
    88dc:	0a00007c 	beq	8ad4 <va_printk+0x248>
			fmt+=2;
		} else {	
			fmt++;
    88e0:	e2826001 	add	r6, r2, #1

			char *s, num[128];
			unsigned width = 0;
    88e4:	e3a07000 	mov	r7, #0

			while(isdigit(*fmt)) {
    88e8:	ea000004 	b	8900 <va_printk+0x74>
				width = width*10 + *fmt - '0';
    88ec:	e0877107 	add	r7, r7, r7, lsl #2
    88f0:	e1a07087 	lsl	r7, r7, #1
    88f4:	e0877005 	add	r7, r7, r5
    88f8:	e2477030 	sub	r7, r7, #48	; 0x30
				fmt++;
    88fc:	e2866001 	add	r6, r6, #1
			fmt++;

			char *s, num[128];
			unsigned width = 0;

			while(isdigit(*fmt)) {
    8900:	e5d65000 	ldrb	r5, [r6]
    8904:	e1a09005 	mov	r9, r5
    8908:	e1a00005 	mov	r0, r5
    890c:	ebffff44 	bl	8624 <isdigit>
    8910:	e3500000 	cmp	r0, #0
    8914:	1afffff4 	bne	88ec <va_printk+0x60>
				width = width*10 + *fmt - '0';
				fmt++;
			}
			assert(width < 32);
    8918:	e357001f 	cmp	r7, #31
    891c:	9a000005 	bls	8938 <va_printk+0xac>
    8920:	e59f01d8 	ldr	r0, [pc, #472]	; 8b00 <va_printk+0x274>
    8924:	e59f11d8 	ldr	r1, [pc, #472]	; 8b04 <va_printk+0x278>
    8928:	e59f21d8 	ldr	r2, [pc, #472]	; 8b08 <va_printk+0x27c>
    892c:	e3a03092 	mov	r3, #146	; 0x92
    8930:	ebffff18 	bl	8598 <printk>
    8934:	eb000076 	bl	8b14 <clean_reboot>
			
			switch(*fmt) {
    8938:	e2455062 	sub	r5, r5, #98	; 0x62
    893c:	e3550016 	cmp	r5, #22
    8940:	979ff105 	ldrls	pc, [pc, r5, lsl #2]
    8944:	ea000051 	b	8a90 <va_printk+0x204>
    8948:	00008a34 	andeq	r8, r0, r4, lsr sl
    894c:	00008a68 	andeq	r8, r0, r8, ror #20
    8950:	000089bc 			; <UNDEFINED> instruction: 0x000089bc
    8954:	00008a90 	muleq	r0, r0, sl
    8958:	000089a4 	andeq	r8, r0, r4, lsr #19
    895c:	00008a90 	muleq	r0, r0, sl
    8960:	00008a90 	muleq	r0, r0, sl
    8964:	00008a90 	muleq	r0, r0, sl
    8968:	00008a90 	muleq	r0, r0, sl
    896c:	00008a90 	muleq	r0, r0, sl
    8970:	00008a90 	muleq	r0, r0, sl
    8974:	00008a90 	muleq	r0, r0, sl
    8978:	00008a90 	muleq	r0, r0, sl
    897c:	00008a90 	muleq	r0, r0, sl
    8980:	00008a0c 	andeq	r8, r0, ip, lsl #20
    8984:	00008a90 	muleq	r0, r0, sl
    8988:	00008a90 	muleq	r0, r0, sl
    898c:	00008a5c 	andeq	r8, r0, ip, asr sl
    8990:	00008a90 	muleq	r0, r0, sl
    8994:	000089e4 	andeq	r8, r0, r4, ror #19
    8998:	00008a90 	muleq	r0, r0, sl
    899c:	00008a90 	muleq	r0, r0, sl
    89a0:	00008a0c 	andeq	r8, r0, ip, lsl #20
			case 'f':
			{
#ifndef RPI_FP_ENABLED
				panic("float not enabled!!!");
    89a4:	e59f0160 	ldr	r0, [pc, #352]	; 8b0c <va_printk+0x280>
    89a8:	e59f1154 	ldr	r1, [pc, #340]	; 8b04 <va_printk+0x278>
    89ac:	e59f2154 	ldr	r2, [pc, #340]	; 8b08 <va_printk+0x27c>
    89b0:	e3a03098 	mov	r3, #152	; 0x98
    89b4:	ebfffef7 	bl	8598 <printk>
    89b8:	eb000055 	bl	8b14 <clean_reboot>

				break;
#endif
			}
			case 'd':
				s = emit(10, num, 128, va_arg(args, int), width, 1);
    89bc:	e59a3000 	ldr	r3, [sl]
    89c0:	e28aa004 	add	sl, sl, #4
    89c4:	e58d7000 	str	r7, [sp]
    89c8:	e3a02001 	mov	r2, #1
    89cc:	e58d2004 	str	r2, [sp, #4]
    89d0:	e3a0000a 	mov	r0, #10
    89d4:	e28d1008 	add	r1, sp, #8
    89d8:	e3a02080 	mov	r2, #128	; 0x80
    89dc:	ebffff30 	bl	86a4 <emit>
				break;
    89e0:	ea000031 	b	8aac <va_printk+0x220>
			case 'u':
				s = emit(10, num, 128, va_arg(args, unsigned), width, 0);
    89e4:	e59a3000 	ldr	r3, [sl]
    89e8:	e28aa004 	add	sl, sl, #4
    89ec:	e58d7000 	str	r7, [sp]
    89f0:	e3a02000 	mov	r2, #0
    89f4:	e58d2004 	str	r2, [sp, #4]
    89f8:	e3a0000a 	mov	r0, #10
    89fc:	e28d1008 	add	r1, sp, #8
    8a00:	e3a02080 	mov	r2, #128	; 0x80
    8a04:	ebffff26 	bl	86a4 <emit>
				break;
    8a08:	ea000027 	b	8aac <va_printk+0x220>
			case 'p':
			case 'x':
				s = emit(16, num, 128, va_arg(args, unsigned), width, 0);
    8a0c:	e59a3000 	ldr	r3, [sl]
    8a10:	e28aa004 	add	sl, sl, #4
    8a14:	e58d7000 	str	r7, [sp]
    8a18:	e3a02000 	mov	r2, #0
    8a1c:	e58d2004 	str	r2, [sp, #4]
    8a20:	e3a00010 	mov	r0, #16
    8a24:	e28d1008 	add	r1, sp, #8
    8a28:	e3a02080 	mov	r2, #128	; 0x80
    8a2c:	ebffff1c 	bl	86a4 <emit>
				break;
    8a30:	ea00001d 	b	8aac <va_printk+0x220>
			case 'b':
				s = emit(2, num, 128, va_arg(args, unsigned), width, 0);
    8a34:	e59a3000 	ldr	r3, [sl]
    8a38:	e28aa004 	add	sl, sl, #4
    8a3c:	e58d7000 	str	r7, [sp]
    8a40:	e3a02000 	mov	r2, #0
    8a44:	e58d2004 	str	r2, [sp, #4]
    8a48:	e3a00002 	mov	r0, #2
    8a4c:	e28d1008 	add	r1, sp, #8
    8a50:	e3a02080 	mov	r2, #128	; 0x80
    8a54:	ebffff12 	bl	86a4 <emit>
				break;
    8a58:	ea000013 	b	8aac <va_printk+0x220>
			case 's':
				s = va_arg(args, char *);
    8a5c:	e59a0000 	ldr	r0, [sl]
    8a60:	e28aa004 	add	sl, sl, #4
				break;
    8a64:	ea000010 	b	8aac <va_printk+0x220>
			case 'c':
				s = emit(8, num, 128, va_arg(args, int),width,0);
    8a68:	e59a3000 	ldr	r3, [sl]
    8a6c:	e28aa004 	add	sl, sl, #4
    8a70:	e58d7000 	str	r7, [sp]
    8a74:	e3a02000 	mov	r2, #0
    8a78:	e58d2004 	str	r2, [sp, #4]
    8a7c:	e3a00008 	mov	r0, #8
    8a80:	e08d1000 	add	r1, sp, r0
    8a84:	e3a02080 	mov	r2, #128	; 0x80
    8a88:	ebffff05 	bl	86a4 <emit>
				break;
    8a8c:	ea000006 	b	8aac <va_printk+0x220>
			default: 
				panic("printk: not handling specifier '%c'\n", *fmt);
    8a90:	e58d9000 	str	r9, [sp]
    8a94:	e59f0074 	ldr	r0, [pc, #116]	; 8b10 <va_printk+0x284>
    8a98:	e59f1064 	ldr	r1, [pc, #100]	; 8b04 <va_printk+0x278>
    8a9c:	e59f2064 	ldr	r2, [pc, #100]	; 8b08 <va_printk+0x27c>
    8aa0:	e3a030b9 	mov	r3, #185	; 0xb9
    8aa4:	ebfffebb 	bl	8598 <printk>
    8aa8:	eb000019 	bl	8b14 <clean_reboot>
				return 0;   // ugh
			}
			fmt++;
    8aac:	e2862001 	add	r2, r6, #1

			// safe string copy
			for(; p < e && *s; )
    8ab0:	ea000002 	b	8ac0 <va_printk+0x234>
				*p++ = *s++;
    8ab4:	e2800001 	add	r0, r0, #1
    8ab8:	e5c43000 	strb	r3, [r4]
    8abc:	e2844001 	add	r4, r4, #1
				return 0;   // ugh
			}
			fmt++;

			// safe string copy
			for(; p < e && *s; )
    8ac0:	e1540008 	cmp	r4, r8
    8ac4:	2a000002 	bcs	8ad4 <va_printk+0x248>
    8ac8:	e5d03000 	ldrb	r3, [r0]
    8acc:	e3530000 	cmp	r3, #0
    8ad0:	1afffff7 	bne	8ab4 <va_printk+0x228>

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    8ad4:	e5d23000 	ldrb	r3, [r2]
    8ad8:	e3530000 	cmp	r3, #0
    8adc:	0a000001 	beq	8ae8 <va_printk+0x25c>
    8ae0:	e1540008 	cmp	r4, r8
    8ae4:	3affff72 	bcc	88b4 <va_printk+0x28>
			// safe string copy
			for(; p < e && *s; )
				*p++ = *s++;
		}
	}
	*p++ = 0;
    8ae8:	e2840001 	add	r0, r4, #1
    8aec:	e3a03000 	mov	r3, #0
    8af0:	e5c43000 	strb	r3, [r4]
	return p - buf;
}
    8af4:	e06b0000 	rsb	r0, fp, r0
    8af8:	e28dd08c 	add	sp, sp, #140	; 0x8c
    8afc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8b00:	000097a4 	andeq	r9, r0, r4, lsr #15
    8b04:	00009754 	andeq	r9, r0, r4, asr r7
    8b08:	00009734 	andeq	r9, r0, r4, lsr r7
    8b0c:	000097c0 	andeq	r9, r0, r0, asr #15
    8b10:	000097e8 	andeq	r9, r0, r8, ror #15

00008b14 <clean_reboot>:
#include "rpi.h"

// print out a special message so bootloader exits
void clean_reboot(void) {
    8b14:	e92d4008 	push	{r3, lr}
    putk("DONE!!!\n");
    8b18:	e59f3014 	ldr	r3, [pc, #20]	; 8b34 <clean_reboot+0x20>
    8b1c:	e5933000 	ldr	r3, [r3]
    8b20:	e59f0010 	ldr	r0, [pc, #16]	; 8b38 <clean_reboot+0x24>
    8b24:	e12fff33 	blx	r3
    delay_ms(100);       // (hopefully) enough time for message to get flushed.
    8b28:	e3a00064 	mov	r0, #100	; 0x64
    8b2c:	eb000048 	bl	8c54 <delay_ms>
    rpi_reboot();
    8b30:	eb000019 	bl	8b9c <rpi_reboot>
    8b34:	000091f4 	strdeq	r9, [r0], -r4
    8b38:	00009820 	andeq	r9, r0, r0, lsr #16

00008b3c <_cstart>:
#include "rpi.h"

void _cstart() {
    8b3c:	e92d4008 	push	{r3, lr}
    extern int __bss_start__, __bss_end__;
	void notmain();

    int* bss = &__bss_start__;
    8b40:	e59f3020 	ldr	r3, [pc, #32]	; 8b68 <_cstart+0x2c>
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    8b44:	e59f2020 	ldr	r2, [pc, #32]	; 8b6c <_cstart+0x30>
        *bss++ = 0;
    8b48:	e3a01000 	mov	r1, #0
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    8b4c:	ea000001 	b	8b58 <_cstart+0x1c>
        *bss++ = 0;
    8b50:	e5831000 	str	r1, [r3]
    8b54:	e2833004 	add	r3, r3, #4
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    8b58:	e1530002 	cmp	r3, r2
    8b5c:	3afffffb 	bcc	8b50 <_cstart+0x14>
        *bss++ = 0;

    notmain(); 
    8b60:	ebfffd48 	bl	8088 <notmain>
	rpi_reboot();
    8b64:	eb00000c 	bl	8b9c <rpi_reboot>
    8b68:	0000982c 	andeq	r9, r0, ip, lsr #16
    8b6c:	00009c40 	andeq	r9, r0, r0, asr #24

00008b70 <at_user_level>:
 * works if we have a trashed stack pointer?
 */
static unsigned user_level = 0b10000;
int at_user_level(void) {
    unsigned cpsr = 0;
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    8b70:	e10f0000 	mrs	r0, CPSR

    // user level = lower 5 bits = 0b10000);
    return (cpsr  & 0b11111)  == user_level;
    8b74:	e200001f 	and	r0, r0, #31
}
    8b78:	e3500010 	cmp	r0, #16
    8b7c:	13a00000 	movne	r0, #0
    8b80:	03a00001 	moveq	r0, #1
    8b84:	e12fff1e 	bx	lr

00008b88 <set_user_level>:

// this is just used by the reboot code.
void set_user_level(void) {
    unsigned cpsr = 0;
    // XXX: shouldn't we just set the one bit?
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    8b88:	e10f3000 	mrs	r3, CPSR
        cpsr = (cpsr & ~0b11111) | user_level;
    8b8c:	e3c3301f 	bic	r3, r3, #31
    8b90:	e3833010 	orr	r3, r3, #16
    asm volatile("msr cpsr, %0" :: "r"(cpsr));
    8b94:	e129f003 	msr	CPSR_fc, r3
    8b98:	e12fff1e 	bx	lr

00008b9c <rpi_reboot>:
}

void rpi_reboot(void) {
    8b9c:	e92d4008 	push	{r3, lr}
    if(at_user_level()) {
    8ba0:	ebfffff2 	bl	8b70 <at_user_level>
    8ba4:	e3500000 	cmp	r0, #0
    8ba8:	0a000000 	beq	8bb0 <rpi_reboot+0x14>
        set_user_level();
    8bac:	ebfffff5 	bl	8b88 <set_user_level>
        // of stuff.
        // assert(!at_user_level());
    }

    // gives uart time to flush: should just call flush directly.
    delay_ms(30);
    8bb0:	e3a0001e 	mov	r0, #30
    8bb4:	eb000026 	bl	8c54 <delay_ms>
    const int PM_WDOG = 0x20100024;
    const int PM_PASSWORD = 0x5a000000;
    const int PM_RSTC_WRCFG_FULL_RESET = 0x00000020;

    // timeout = 1/16th of a second? (whatever)
    PUT32(PM_WDOG, PM_PASSWORD | 1);
    8bb8:	e59f0014 	ldr	r0, [pc, #20]	; 8bd4 <rpi_reboot+0x38>
    8bbc:	e59f1014 	ldr	r1, [pc, #20]	; 8bd8 <rpi_reboot+0x3c>
    8bc0:	eb000035 	bl	8c9c <PUT32>
    PUT32(PM_RSTC, PM_PASSWORD | PM_RSTC_WRCFG_FULL_RESET);
    8bc4:	e59f0010 	ldr	r0, [pc, #16]	; 8bdc <rpi_reboot+0x40>
    8bc8:	e59f1010 	ldr	r1, [pc, #16]	; 8be0 <rpi_reboot+0x44>
    8bcc:	eb000032 	bl	8c9c <PUT32>
    8bd0:	eafffffe 	b	8bd0 <rpi_reboot+0x34>
    8bd4:	20100024 	andscs	r0, r0, r4, lsr #32
    8bd8:	5a000001 	bpl	8be4 <delay_cycles>
    8bdc:	2010001c 	andscs	r0, r0, ip, lsl r0
    8be0:	5a000020 	bpl	8c68 <delay_sec>

00008be4 <delay_cycles>:
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    8be4:	ea000001 	b	8bf0 <delay_cycles+0xc>
        asm("add r1, r1, #0");
    8be8:	e2811000 	add	r1, r1, #0
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    8bec:	e1a00003 	mov	r0, r3
    8bf0:	e2403001 	sub	r3, r0, #1
    8bf4:	e3500000 	cmp	r0, #0
    8bf8:	1afffffa 	bne	8be8 <delay_cycles+0x4>
        asm("add r1, r1, #0");
}
    8bfc:	e12fff1e 	bx	lr

00008c00 <timer_get_usec_raw>:

// no dev barrier.
unsigned timer_get_usec_raw(void) {
    8c00:	e92d4008 	push	{r3, lr}
    return GET32(0x20003004);
    8c04:	e59f0004 	ldr	r0, [pc, #4]	; 8c10 <timer_get_usec_raw+0x10>
    8c08:	eb00002f 	bl	8ccc <GET32>
}
    8c0c:	e8bd8008 	pop	{r3, pc}
    8c10:	20003004 	andcs	r3, r0, r4

00008c14 <timer_get_usec>:

// in usec
unsigned timer_get_usec(void) {
    8c14:	e92d4010 	push	{r4, lr}
    dev_barrier();
    8c18:	eb000017 	bl	8c7c <dev_barrier>
    unsigned u = timer_get_usec_raw();
    8c1c:	ebfffff7 	bl	8c00 <timer_get_usec_raw>
    8c20:	e1a04000 	mov	r4, r0
    dev_barrier();
    8c24:	eb000014 	bl	8c7c <dev_barrier>
    return u;
}
    8c28:	e1a00004 	mov	r0, r4
    8c2c:	e8bd8010 	pop	{r4, pc}

00008c30 <delay_us>:

void delay_us(unsigned us) {
    8c30:	e92d4038 	push	{r3, r4, r5, lr}
    8c34:	e1a05000 	mov	r5, r0
    unsigned rb = timer_get_usec();
    8c38:	ebfffff5 	bl	8c14 <timer_get_usec>
    8c3c:	e1a04000 	mov	r4, r0
    while (1) {
        unsigned ra = timer_get_usec();
    8c40:	ebfffff3 	bl	8c14 <timer_get_usec>
        if ((ra - rb) >= us) {
    8c44:	e0640000 	rsb	r0, r4, r0
    8c48:	e1500005 	cmp	r0, r5
    8c4c:	3afffffb 	bcc	8c40 <delay_us+0x10>
            break;
        }
    }
}
    8c50:	e8bd8038 	pop	{r3, r4, r5, pc}

00008c54 <delay_ms>:
void delay_ms(unsigned ms) {
    8c54:	e92d4008 	push	{r3, lr}
    delay_us(ms*1000);
    8c58:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    8c5c:	e0000093 	mul	r0, r3, r0
    8c60:	ebfffff2 	bl	8c30 <delay_us>
    8c64:	e8bd8008 	pop	{r3, pc}

00008c68 <delay_sec>:
}
void delay_sec(unsigned sec) {
    8c68:	e92d4008 	push	{r3, lr}
    delay_ms(sec*1000);
    8c6c:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    8c70:	e0000093 	mul	r0, r3, r0
    8c74:	ebfffff6 	bl	8c54 <delay_ms>
    8c78:	e8bd8008 	pop	{r3, pc}

00008c7c <dev_barrier>:
    8c7c:	ea000002 	b	8c8c <dsb>

00008c80 <dmb>:
    8c80:	e3a00000 	mov	r0, #0
    8c84:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
    8c88:	e12fff1e 	bx	lr

00008c8c <dsb>:
    8c8c:	ee070f9a 	mcr	15, 0, r0, cr7, cr10, {4}
    8c90:	e12fff1e 	bx	lr

00008c94 <put32>:
    8c94:	e5801000 	str	r1, [r0]
    8c98:	e12fff1e 	bx	lr

00008c9c <PUT32>:
    8c9c:	e5801000 	str	r1, [r0]
    8ca0:	e12fff1e 	bx	lr

00008ca4 <put16>:
    8ca4:	e1c010b0 	strh	r1, [r0]
    8ca8:	e12fff1e 	bx	lr

00008cac <PUT16>:
    8cac:	e1c010b0 	strh	r1, [r0]
    8cb0:	e12fff1e 	bx	lr

00008cb4 <put8>:
    8cb4:	e5c01000 	strb	r1, [r0]
    8cb8:	e12fff1e 	bx	lr

00008cbc <PUT8>:
    8cbc:	e5c01000 	strb	r1, [r0]
    8cc0:	e12fff1e 	bx	lr

00008cc4 <get32>:
    8cc4:	e5900000 	ldr	r0, [r0]
    8cc8:	e12fff1e 	bx	lr

00008ccc <GET32>:
    8ccc:	e5900000 	ldr	r0, [r0]
    8cd0:	e12fff1e 	bx	lr

00008cd4 <GETPC>:
    8cd4:	e1a0000e 	mov	r0, lr
    8cd8:	e12fff1e 	bx	lr

00008cdc <dummy>:
    8cdc:	e12fff1e 	bx	lr

00008ce0 <uart_can_getc>:

	dev_barrier();
}

// 1 = at least one byte on rx queue, 0 otherwise
static int uart_can_getc(void) {
    8ce0:	e92d4008 	push	{r3, lr}
    return get32(AUX_MU_LSR_REG) & RX_READY;
    8ce4:	e59f300c 	ldr	r3, [pc, #12]	; 8cf8 <uart_can_getc+0x18>
    8ce8:	e5930000 	ldr	r0, [r3]
    8cec:	ebfffff4 	bl	8cc4 <get32>
}
    8cf0:	e2000001 	and	r0, r0, #1
    8cf4:	e8bd8008 	pop	{r3, pc}
    8cf8:	000091f8 	strdeq	r9, [r0], -r8

00008cfc <uart_init>:
#define RX_READY 0x1
#define TX_READY 0x10
#define TX_EMPTY 0x20

// note: if you need memory barriers, use <dev_barrier()>
void uart_init(void) {
    8cfc:	e92d4038 	push	{r3, r4, r5, lr}
    
	dev_barrier();
    8d00:	ebffffdd 	bl	8c7c <dev_barrier>

	// set GPIO 14 and 15 to alternate function 0
    //volatile unsigned* gpio_reg = (void*) 0x20200004;
    //unsigned bitmask = get32(gpio_reg);
    gpio_set_function(14, GPIO_FUNC_ALT5);
    8d04:	e3a0000e 	mov	r0, #14
    8d08:	e3a01002 	mov	r1, #2
    8d0c:	eb0000fd 	bl	9108 <gpio_set_function>
	gpio_set_function(15, GPIO_FUNC_ALT5);
    8d10:	e3a0000f 	mov	r0, #15
    8d14:	e3a01002 	mov	r1, #2
    8d18:	eb0000fa 	bl	9108 <gpio_set_function>
    //bitmask &= ~(0b111 << ((UART0_RX % 10) * 3));
    //bitmask |= (0b010 << ((UART0_TX % 10) * 3));
    //bitmask |= (0b010 << ((UART0_RX % 10) * 3));
    //put32(gpio_reg, bitmask);

	dev_barrier();
    8d1c:	ebffffd6 	bl	8c7c <dev_barrier>

    put32(AUX_ENABLES, get32(AUX_ENABLES) | (ENABLE_UART));
    8d20:	e59f4068 	ldr	r4, [pc, #104]	; 8d90 <uart_init+0x94>
    8d24:	e5945004 	ldr	r5, [r4, #4]
    8d28:	e1a00005 	mov	r0, r5
    8d2c:	ebffffe4 	bl	8cc4 <get32>
    8d30:	e3801001 	orr	r1, r0, #1
    8d34:	e1a00005 	mov	r0, r5
    8d38:	ebffffd5 	bl	8c94 <put32>
	
	dev_barrier();
    8d3c:	ebffffce 	bl	8c7c <dev_barrier>
	
    put32(AUX_MU_CNTL_REG, 0x0);
    8d40:	e5940008 	ldr	r0, [r4, #8]
    8d44:	e3a01000 	mov	r1, #0
    8d48:	ebffffd1 	bl	8c94 <put32>
    put32(AUX_MU_IER_REG, 0x0);
    8d4c:	e594000c 	ldr	r0, [r4, #12]
    8d50:	e3a01000 	mov	r1, #0
    8d54:	ebffffce 	bl	8c94 <put32>
    put32(AUX_MU_IIR_REG, CLEAR_RX_FIFO | CLEAR_TX_FIFO);
    8d58:	e5940010 	ldr	r0, [r4, #16]
    8d5c:	e3a01006 	mov	r1, #6
    8d60:	ebffffcb 	bl	8c94 <put32>
	put32(AUX_MU_LCR_REG, ENABLE_8BIT_MODE);
    8d64:	e5940014 	ldr	r0, [r4, #20]
    8d68:	e3a01003 	mov	r1, #3
    8d6c:	ebffffc8 	bl	8c94 <put32>
    put32(AUX_MU_BAUD_REG, BAUD_115200);
    8d70:	e5940018 	ldr	r0, [r4, #24]
    8d74:	e59f1018 	ldr	r1, [pc, #24]	; 8d94 <uart_init+0x98>
    8d78:	ebffffc5 	bl	8c94 <put32>
    put32(AUX_MU_CNTL_REG, ENABLE_TXER | ENABLE_RXER);
    8d7c:	e5940008 	ldr	r0, [r4, #8]
    8d80:	e3a01003 	mov	r1, #3
    8d84:	ebffffc2 	bl	8c94 <put32>

	dev_barrier();
    8d88:	ebffffbb 	bl	8c7c <dev_barrier>
    8d8c:	e8bd8038 	pop	{r3, r4, r5, pc}
    8d90:	000091f8 	strdeq	r9, [r0], -r8
    8d94:	0000010e 	andeq	r0, r0, lr, lsl #2

00008d98 <uart_getc>:
    return get32(AUX_MU_LSR_REG) & RX_READY;
}

// returns one byte from the rx queue, if needed
// blocks until there is one.
int uart_getc(void) {
    8d98:	e92d4008 	push	{r3, lr}
    while(1)
        if(uart_can_getc())  break;
    8d9c:	ebffffcf 	bl	8ce0 <uart_can_getc>
    8da0:	e3500000 	cmp	r0, #0
    8da4:	0afffffc 	beq	8d9c <uart_getc+0x4>
    return get32(AUX_MU_IO_REG) & 0xFF;
    8da8:	e59f300c 	ldr	r3, [pc, #12]	; 8dbc <uart_getc+0x24>
    8dac:	e593001c 	ldr	r0, [r3, #28]
    8db0:	ebffffc3 	bl	8cc4 <get32>
}
    8db4:	e6ef0070 	uxtb	r0, r0
    8db8:	e8bd8008 	pop	{r3, pc}
    8dbc:	000091f8 	strdeq	r9, [r0], -r8

00008dc0 <uart_can_putc>:

// 1 = space to put at least one byte, 0 otherwise.
int uart_can_putc(void) {
    8dc0:	e92d4008 	push	{r3, lr}
    return get32(AUX_MU_LSR_REG) & TX_EMPTY;
    8dc4:	e59f300c 	ldr	r3, [pc, #12]	; 8dd8 <uart_can_putc+0x18>
    8dc8:	e5930000 	ldr	r0, [r3]
    8dcc:	ebffffbc 	bl	8cc4 <get32>
}
    8dd0:	e2000020 	and	r0, r0, #32
    8dd4:	e8bd8008 	pop	{r3, pc}
    8dd8:	000091f8 	strdeq	r9, [r0], -r8

00008ddc <uart_putc>:

// put one byte on the tx qqueue, if needed, blocks
// until TX has space.
void uart_putc(unsigned c) {
    8ddc:	e92d4010 	push	{r4, lr}
    8de0:	e1a04000 	mov	r4, r0
    while(1)
            if(uart_can_putc())  break;
    8de4:	ebfffff5 	bl	8dc0 <uart_can_putc>
    8de8:	e3500000 	cmp	r0, #0
    8dec:	0afffffc 	beq	8de4 <uart_putc+0x8>
    put32(AUX_MU_IO_REG, c);
    8df0:	e59f300c 	ldr	r3, [pc, #12]	; 8e04 <uart_putc+0x28>
    8df4:	e593001c 	ldr	r0, [r3, #28]
    8df8:	e1a01004 	mov	r1, r4
    8dfc:	ebffffa4 	bl	8c94 <put32>
    8e00:	e8bd8010 	pop	{r4, pc}
    8e04:	000091f8 	strdeq	r9, [r0], -r8

00008e08 <uart_has_data>:


// simple wrapper routines useful later.

// a maybe-more intuitive name for clients.
int uart_has_data(void) {
    8e08:	e92d4008 	push	{r3, lr}
    return uart_can_getc();
    8e0c:	ebffffb3 	bl	8ce0 <uart_can_getc>
}
    8e10:	e8bd8008 	pop	{r3, pc}

00008e14 <uart_getc_async>:

int uart_getc_async(void) { 
    8e14:	e92d4008 	push	{r3, lr}
    if(!uart_has_data())
    8e18:	ebfffffa 	bl	8e08 <uart_has_data>
    8e1c:	e3500000 	cmp	r0, #0
    8e20:	0a000001 	beq	8e2c <uart_getc_async+0x18>
        return -1;
    return uart_getc();
    8e24:	ebffffdb 	bl	8d98 <uart_getc>
    8e28:	e8bd8008 	pop	{r3, pc}
    return uart_can_getc();
}

int uart_getc_async(void) { 
    if(!uart_has_data())
        return -1;
    8e2c:	e3e00000 	mvn	r0, #0
    return uart_getc();
}
    8e30:	e8bd8008 	pop	{r3, pc}

00008e34 <gpio_set_output>:
volatile unsigned *GPLEV1 = (void*) 0x20200038;
// Part 1 implement gpio_set_on, gpio_set_off, gpio_set_output

// set <pin> to be an output pin.  note: fsel0, fsel1, fsel2 are contiguous in memory,
// so you can use array calculations!
void gpio_set_output(unsigned pin) {
    8e34:	e92d4038 	push	{r3, r4, r5, lr}
    8e38:	e1a04000 	mov	r4, r0
    // implement this
    // use gpio_fsel0
    
    if (pin >= 32) {
    8e3c:	e350001f 	cmp	r0, #31
    8e40:	88bd8038 	pophi	{r3, r4, r5, pc}
        return;
    }
    
    volatile unsigned* gpio_reg;
    
    unsigned reg_select = pin / 10;
    8e44:	e59f30b4 	ldr	r3, [pc, #180]	; 8f00 <gpio_set_output+0xcc>
    8e48:	e0832093 	umull	r2, r3, r3, r0
    8e4c:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    8e50:	e3530005 	cmp	r3, #5
    8e54:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    8e58:	ea000017 	b	8ebc <gpio_set_output+0x88>
    8e5c:	00008e74 	andeq	r8, r0, r4, ror lr
    8e60:	00008e80 	andeq	r8, r0, r0, lsl #29
    8e64:	00008e8c 	andeq	r8, r0, ip, lsl #29
    8e68:	00008e98 	muleq	r0, r8, lr
    8e6c:	00008ea4 	andeq	r8, r0, r4, lsr #29
    8e70:	00008eb0 			; <UNDEFINED> instruction: 0x00008eb0
        case 0: {gpio_reg = GPFSEL0; break;}
    8e74:	e59f3088 	ldr	r3, [pc, #136]	; 8f04 <gpio_set_output+0xd0>
    8e78:	e5935000 	ldr	r5, [r3]
    8e7c:	ea00000f 	b	8ec0 <gpio_set_output+0x8c>
        case 1: {gpio_reg = GPFSEL1; break;}
    8e80:	e59f307c 	ldr	r3, [pc, #124]	; 8f04 <gpio_set_output+0xd0>
    8e84:	e5935004 	ldr	r5, [r3, #4]
    8e88:	ea00000c 	b	8ec0 <gpio_set_output+0x8c>
        case 2: {gpio_reg = GPFSEL2; break;}
    8e8c:	e59f3070 	ldr	r3, [pc, #112]	; 8f04 <gpio_set_output+0xd0>
    8e90:	e5935008 	ldr	r5, [r3, #8]
    8e94:	ea000009 	b	8ec0 <gpio_set_output+0x8c>
        case 3: {gpio_reg = GPFSEL3; break;}
    8e98:	e59f3064 	ldr	r3, [pc, #100]	; 8f04 <gpio_set_output+0xd0>
    8e9c:	e593500c 	ldr	r5, [r3, #12]
    8ea0:	ea000006 	b	8ec0 <gpio_set_output+0x8c>
        case 4: {gpio_reg = GPFSEL4; break;}
    8ea4:	e59f3058 	ldr	r3, [pc, #88]	; 8f04 <gpio_set_output+0xd0>
    8ea8:	e5935010 	ldr	r5, [r3, #16]
    8eac:	ea000003 	b	8ec0 <gpio_set_output+0x8c>
        case 5: {gpio_reg = GPFSEL5; break;}
    8eb0:	e59f304c 	ldr	r3, [pc, #76]	; 8f04 <gpio_set_output+0xd0>
    8eb4:	e5935014 	ldr	r5, [r3, #20]
    8eb8:	ea000000 	b	8ec0 <gpio_set_output+0x8c>
        default: gpio_reg = 0x0;
    8ebc:	e3a05000 	mov	r5, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    8ec0:	e1a00005 	mov	r0, r5
    8ec4:	ebffff7e 	bl	8cc4 <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    8ec8:	e59f1030 	ldr	r1, [pc, #48]	; 8f00 <gpio_set_output+0xcc>
    8ecc:	e0813491 	umull	r3, r1, r1, r4
    8ed0:	e1a011a1 	lsr	r1, r1, #3
    8ed4:	e0811101 	add	r1, r1, r1, lsl #2
    8ed8:	e1a01081 	lsl	r1, r1, #1
    8edc:	e0611004 	rsb	r1, r1, r4
    8ee0:	e0811081 	add	r1, r1, r1, lsl #1
    8ee4:	e3a03007 	mov	r3, #7
    8ee8:	e1c03113 	bic	r3, r0, r3, lsl r1
    bitmask |= (1 << ((pin % 10) * 3));
    put32(gpio_reg, bitmask);
    8eec:	e1a00005 	mov	r0, r5
    8ef0:	e3a02001 	mov	r2, #1
    8ef4:	e1831112 	orr	r1, r3, r2, lsl r1
    8ef8:	ebffff65 	bl	8c94 <put32>
    8efc:	e8bd8038 	pop	{r3, r4, r5, pc}
    8f00:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    8f04:	0000922c 	andeq	r9, r0, ip, lsr #4

00008f08 <gpio_set_on>:
    
}


// set GPIO <pin> on.
inline void gpio_set_on(unsigned pin) {
    8f08:	e92d4008 	push	{r3, lr}
    // implement this
    // use gpio_set0
    if (pin >= 32) {
    8f0c:	e350001f 	cmp	r0, #31
    8f10:	88bd8008 	pophi	{r3, pc}
    // Get current register value
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPSET0;
    8f14:	959f3020 	ldrls	r3, [pc, #32]	; 8f3c <gpio_set_on+0x34>
    8f18:	95932018 	ldrls	r2, [r3, #24]
        // TODO: why do we not want this statement?
        //bitmask = get32(GPSET0);
    } else {
        gpio_reg = GPSET1;
    8f1c:	859f3018 	ldrhi	r3, [pc, #24]	; 8f3c <gpio_set_on+0x34>
    8f20:	8593201c 	ldrhi	r2, [r3, #28]
        //bitmask = get32(GPSET1);
        // TODO: why do we not want this statement?
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    8f24:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    8f28:	e1a00002 	mov	r0, r2
    8f2c:	e3a01001 	mov	r1, #1
    8f30:	e1a01311 	lsl	r1, r1, r3
    8f34:	ebffff56 	bl	8c94 <put32>
    8f38:	e8bd8008 	pop	{r3, pc}
    8f3c:	0000922c 	andeq	r9, r0, ip, lsr #4

00008f40 <gpio_set_off>:
}

// set GPIO <pin> off
inline void gpio_set_off(unsigned pin) {
    8f40:	e92d4008 	push	{r3, lr}
    // implement this
    // use gpio_clr0
    if(pin >= 32) {
    8f44:	e350001f 	cmp	r0, #31
    8f48:	88bd8008 	pophi	{r3, pc}
    }
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPCLR0;
    8f4c:	959f3020 	ldrls	r3, [pc, #32]	; 8f74 <gpio_set_off+0x34>
    8f50:	95932020 	ldrls	r2, [r3, #32]
        //bitmask = get32(GPCLR0);
    } else {
        gpio_reg = GPCLR1;
    8f54:	859f3018 	ldrhi	r3, [pc, #24]	; 8f74 <gpio_set_off+0x34>
    8f58:	85932024 	ldrhi	r2, [r3, #36]	; 0x24
        //bitmask = get32(GPCLR1);
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    8f5c:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    8f60:	e1a00002 	mov	r0, r2
    8f64:	e3a01001 	mov	r1, #1
    8f68:	e1a01311 	lsl	r1, r1, r3
    8f6c:	ebffff48 	bl	8c94 <put32>
    8f70:	e8bd8008 	pop	{r3, pc}
    8f74:	0000922c 	andeq	r9, r0, ip, lsr #4

00008f78 <gpio_set_input>:
}

// Part 2: implement gpio_set_input and gpio_read

// set <pin> to input.
void gpio_set_input(unsigned pin) {
    8f78:	e92d4038 	push	{r3, r4, r5, lr}
    8f7c:	e1a04000 	mov	r4, r0
    // implement.
    if(pin >= 32) {
    8f80:	e350001f 	cmp	r0, #31
    8f84:	88bd8038 	pophi	{r3, r4, r5, pc}
        return;
    }
    
    volatile unsigned* gpio_reg;
    
    unsigned reg_select = pin / 10;
    8f88:	e59f30ac 	ldr	r3, [pc, #172]	; 903c <gpio_set_input+0xc4>
    8f8c:	e0832093 	umull	r2, r3, r3, r0
    8f90:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    8f94:	e3530005 	cmp	r3, #5
    8f98:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    8f9c:	ea000017 	b	9000 <gpio_set_input+0x88>
    8fa0:	00008fb8 			; <UNDEFINED> instruction: 0x00008fb8
    8fa4:	00008fc4 	andeq	r8, r0, r4, asr #31
    8fa8:	00008fd0 	ldrdeq	r8, [r0], -r0
    8fac:	00008fdc 	ldrdeq	r8, [r0], -ip
    8fb0:	00008fe8 	andeq	r8, r0, r8, ror #31
    8fb4:	00008ff4 	strdeq	r8, [r0], -r4
        case 0: {gpio_reg = GPFSEL0; break;}
    8fb8:	e59f3080 	ldr	r3, [pc, #128]	; 9040 <gpio_set_input+0xc8>
    8fbc:	e5935000 	ldr	r5, [r3]
    8fc0:	ea00000f 	b	9004 <gpio_set_input+0x8c>
        case 1: {gpio_reg = GPFSEL1; break;}
    8fc4:	e59f3074 	ldr	r3, [pc, #116]	; 9040 <gpio_set_input+0xc8>
    8fc8:	e5935004 	ldr	r5, [r3, #4]
    8fcc:	ea00000c 	b	9004 <gpio_set_input+0x8c>
        case 2: {gpio_reg = GPFSEL2; break;}
    8fd0:	e59f3068 	ldr	r3, [pc, #104]	; 9040 <gpio_set_input+0xc8>
    8fd4:	e5935008 	ldr	r5, [r3, #8]
    8fd8:	ea000009 	b	9004 <gpio_set_input+0x8c>
        case 3: {gpio_reg = GPFSEL3; break;}
    8fdc:	e59f305c 	ldr	r3, [pc, #92]	; 9040 <gpio_set_input+0xc8>
    8fe0:	e593500c 	ldr	r5, [r3, #12]
    8fe4:	ea000006 	b	9004 <gpio_set_input+0x8c>
        case 4: {gpio_reg = GPFSEL4; break;}
    8fe8:	e59f3050 	ldr	r3, [pc, #80]	; 9040 <gpio_set_input+0xc8>
    8fec:	e5935010 	ldr	r5, [r3, #16]
    8ff0:	ea000003 	b	9004 <gpio_set_input+0x8c>
        case 5: {gpio_reg = GPFSEL5; break;}
    8ff4:	e59f3044 	ldr	r3, [pc, #68]	; 9040 <gpio_set_input+0xc8>
    8ff8:	e5935014 	ldr	r5, [r3, #20]
    8ffc:	ea000000 	b	9004 <gpio_set_input+0x8c>
        default: gpio_reg = 0x0;
    9000:	e3a05000 	mov	r5, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    9004:	e1a00005 	mov	r0, r5
    9008:	ebffff2d 	bl	8cc4 <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    900c:	e59f1028 	ldr	r1, [pc, #40]	; 903c <gpio_set_input+0xc4>
    9010:	e0813491 	umull	r3, r1, r1, r4
    9014:	e1a011a1 	lsr	r1, r1, #3
    9018:	e0811101 	add	r1, r1, r1, lsl #2
    901c:	e1a01081 	lsl	r1, r1, #1
    9020:	e0611004 	rsb	r1, r1, r4
    9024:	e0811081 	add	r1, r1, r1, lsl #1
    9028:	e3a03007 	mov	r3, #7
    902c:	e1c01113 	bic	r1, r0, r3, lsl r1
    put32(gpio_reg, bitmask);
    9030:	e1a00005 	mov	r0, r5
    9034:	ebffff16 	bl	8c94 <put32>
    9038:	e8bd8038 	pop	{r3, r4, r5, pc}
    903c:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    9040:	0000922c 	andeq	r9, r0, ip, lsr #4

00009044 <gpio_read>:
    
    
}

// return the value of <pin>
inline int gpio_read(unsigned pin) {
    9044:	e92d4010 	push	{r4, lr}
    9048:	e1a04000 	mov	r4, r0
    
    if(pin >= 32) {
    904c:	e350001f 	cmp	r0, #31
    9050:	8a00000b 	bhi	9084 <gpio_read+0x40>
        return -1;
    }
    
    unsigned v = 0;
    
    if (pin <= 31){
    9054:	8a000003 	bhi	9068 <gpio_read+0x24>
        v = get32(GPLEV0);
    9058:	e59f302c 	ldr	r3, [pc, #44]	; 908c <gpio_read+0x48>
    905c:	e5930028 	ldr	r0, [r3, #40]	; 0x28
    9060:	ebffff17 	bl	8cc4 <get32>
    9064:	ea000002 	b	9074 <gpio_read+0x30>
    } else {
        v = get32(GPLEV1);
    9068:	e59f301c 	ldr	r3, [pc, #28]	; 908c <gpio_read+0x48>
    906c:	e593002c 	ldr	r0, [r3, #44]	; 0x2c
    9070:	ebffff13 	bl	8cc4 <get32>
    }
    
    return (v & (1 << (pin % 32)));
    9074:	e204401f 	and	r4, r4, #31
    9078:	e3a03001 	mov	r3, #1
    907c:	e0000413 	and	r0, r0, r3, lsl r4
    9080:	e8bd8010 	pop	{r4, pc}

// return the value of <pin>
inline int gpio_read(unsigned pin) {
    
    if(pin >= 32) {
        return -1;
    9084:	e3e00000 	mvn	r0, #0
    } else {
        v = get32(GPLEV1);
    }
    
    return (v & (1 << (pin % 32)));
}
    9088:	e8bd8010 	pop	{r4, pc}
    908c:	0000922c 	andeq	r9, r0, ip, lsr #4

00009090 <gpio_write>:

// set <pin> to <v> (v \in {0,1})
inline void gpio_write(unsigned pin, unsigned v) {
    9090:	e92d4008 	push	{r3, lr}
    
    if(pin >= 32) {
    9094:	e350001f 	cmp	r0, #31
    9098:	88bd8008 	pophi	{r3, pc}
        return;
    }
    
    if(v)
    909c:	e3510000 	cmp	r1, #0
    90a0:	0a00000b 	beq	90d4 <gpio_write+0x44>

// set GPIO <pin> on.
inline void gpio_set_on(unsigned pin) {
    // implement this
    // use gpio_set0
    if (pin >= 32) {
    90a4:	e350001f 	cmp	r0, #31
    90a8:	88bd8008 	pophi	{r3, pc}
    // Get current register value
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPSET0;
    90ac:	959f3050 	ldrls	r3, [pc, #80]	; 9104 <gpio_write+0x74>
    90b0:	95932018 	ldrls	r2, [r3, #24]
        // TODO: why do we not want this statement?
        //bitmask = get32(GPSET0);
    } else {
        gpio_reg = GPSET1;
    90b4:	859f3048 	ldrhi	r3, [pc, #72]	; 9104 <gpio_write+0x74>
    90b8:	8593201c 	ldrhi	r2, [r3, #28]
        //bitmask = get32(GPSET1);
        // TODO: why do we not want this statement?
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    90bc:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    90c0:	e1a00002 	mov	r0, r2
    90c4:	e3a01001 	mov	r1, #1
    90c8:	e1a01311 	lsl	r1, r1, r3
    90cc:	ebfffef0 	bl	8c94 <put32>
    90d0:	e8bd8008 	pop	{r3, pc}

// set GPIO <pin> off
inline void gpio_set_off(unsigned pin) {
    // implement this
    // use gpio_clr0
    if(pin >= 32) {
    90d4:	e350001f 	cmp	r0, #31
    90d8:	88bd8008 	pophi	{r3, pc}
    }
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPCLR0;
    90dc:	959f3020 	ldrls	r3, [pc, #32]	; 9104 <gpio_write+0x74>
    90e0:	95932020 	ldrls	r2, [r3, #32]
        //bitmask = get32(GPCLR0);
    } else {
        gpio_reg = GPCLR1;
    90e4:	859f3018 	ldrhi	r3, [pc, #24]	; 9104 <gpio_write+0x74>
    90e8:	85932024 	ldrhi	r2, [r3, #36]	; 0x24
        //bitmask = get32(GPCLR1);
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    90ec:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    90f0:	e1a00002 	mov	r0, r2
    90f4:	e3a01001 	mov	r1, #1
    90f8:	e1a01311 	lsl	r1, r1, r3
    90fc:	ebfffee4 	bl	8c94 <put32>
    9100:	e8bd8008 	pop	{r3, pc}
    9104:	0000922c 	andeq	r9, r0, ip, lsr #4

00009108 <gpio_set_function>:
        gpio_set_on(pin);
    else
        gpio_set_off(pin);
}

void gpio_set_function(unsigned pin, gpio_func_t func) {
    9108:	e92d4070 	push	{r4, r5, r6, lr}
    910c:	e1a04000 	mov	r4, r0
    9110:	e1a05001 	mov	r5, r1
    // implement this
    // use gpio_fsel0
    
    if (pin >= 32 || func >= 8) {
    9114:	e3510007 	cmp	r1, #7
    9118:	9350001f 	cmpls	r0, #31
    911c:	88bd8070 	pophi	{r4, r5, r6, pc}
        return;
    }

    volatile unsigned* gpio_reg;
    unsigned reg_select = pin / 10;
    9120:	e59f30b0 	ldr	r3, [pc, #176]	; 91d8 <gpio_set_function+0xd0>
    9124:	e0832093 	umull	r2, r3, r3, r0
    9128:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    912c:	e3530005 	cmp	r3, #5
    9130:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    9134:	ea000017 	b	9198 <gpio_set_function+0x90>
    9138:	00009150 	andeq	r9, r0, r0, asr r1
    913c:	0000915c 	andeq	r9, r0, ip, asr r1
    9140:	00009168 	andeq	r9, r0, r8, ror #2
    9144:	00009174 	andeq	r9, r0, r4, ror r1
    9148:	00009180 	andeq	r9, r0, r0, lsl #3
    914c:	0000918c 	andeq	r9, r0, ip, lsl #3
        case 0: {gpio_reg = GPFSEL0; break;}
    9150:	e59f3084 	ldr	r3, [pc, #132]	; 91dc <gpio_set_function+0xd4>
    9154:	e5936000 	ldr	r6, [r3]
    9158:	ea00000f 	b	919c <gpio_set_function+0x94>
        case 1: {gpio_reg = GPFSEL1; break;}
    915c:	e59f3078 	ldr	r3, [pc, #120]	; 91dc <gpio_set_function+0xd4>
    9160:	e5936004 	ldr	r6, [r3, #4]
    9164:	ea00000c 	b	919c <gpio_set_function+0x94>
        case 2: {gpio_reg = GPFSEL2; break;}
    9168:	e59f306c 	ldr	r3, [pc, #108]	; 91dc <gpio_set_function+0xd4>
    916c:	e5936008 	ldr	r6, [r3, #8]
    9170:	ea000009 	b	919c <gpio_set_function+0x94>
        case 3: {gpio_reg = GPFSEL3; break;}
    9174:	e59f3060 	ldr	r3, [pc, #96]	; 91dc <gpio_set_function+0xd4>
    9178:	e593600c 	ldr	r6, [r3, #12]
    917c:	ea000006 	b	919c <gpio_set_function+0x94>
        case 4: {gpio_reg = GPFSEL4; break;}
    9180:	e59f3054 	ldr	r3, [pc, #84]	; 91dc <gpio_set_function+0xd4>
    9184:	e5936010 	ldr	r6, [r3, #16]
    9188:	ea000003 	b	919c <gpio_set_function+0x94>
        case 5: {gpio_reg = GPFSEL5; break;}
    918c:	e59f3048 	ldr	r3, [pc, #72]	; 91dc <gpio_set_function+0xd4>
    9190:	e5936014 	ldr	r6, [r3, #20]
    9194:	ea000000 	b	919c <gpio_set_function+0x94>
        default: gpio_reg = 0x0;
    9198:	e3a06000 	mov	r6, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    919c:	e1a00006 	mov	r0, r6
    91a0:	ebfffec7 	bl	8cc4 <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    91a4:	e59f302c 	ldr	r3, [pc, #44]	; 91d8 <gpio_set_function+0xd0>
    91a8:	e0832493 	umull	r2, r3, r3, r4
    91ac:	e1a031a3 	lsr	r3, r3, #3
    91b0:	e0833103 	add	r3, r3, r3, lsl #2
    91b4:	e1a03083 	lsl	r3, r3, #1
    91b8:	e0633004 	rsb	r3, r3, r4
    91bc:	e0833083 	add	r3, r3, r3, lsl #1
    91c0:	e3a01007 	mov	r1, #7
    91c4:	e1c01311 	bic	r1, r0, r1, lsl r3
    bitmask |= (func << ((pin % 10) * 3));
    put32(gpio_reg, bitmask);
    91c8:	e1a00006 	mov	r0, r6
    91cc:	e1811315 	orr	r1, r1, r5, lsl r3
    91d0:	ebfffeaf 	bl	8c94 <put32>
    91d4:	e8bd8070 	pop	{r4, r5, r6, pc}
    91d8:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    91dc:	0000922c 	andeq	r9, r0, ip, lsr #4

000091e0 <internal_putchar>:
#include "rpi.h"

static int internal_putchar(int c) { uart_putc(c); return c; }
    91e0:	e92d4010 	push	{r4, lr}
    91e4:	e1a04000 	mov	r4, r0
    91e8:	ebfffefb 	bl	8ddc <uart_putc>
    91ec:	e1a00004 	mov	r0, r4
    91f0:	e8bd8010 	pop	{r4, pc}

Disassembly of section .data:

000091f4 <putk>:
    91f4:	000085f0 	strdeq	r8, [r0], -r0

000091f8 <AUX_MU_LSR_REG>:
    91f8:	20215054 	eorcs	r5, r1, r4, asr r0

000091fc <AUX_ENABLES>:
    91fc:	20215004 	eorcs	r5, r1, r4

00009200 <AUX_MU_CNTL_REG>:
    9200:	20215060 	eorcs	r5, r1, r0, rrx

00009204 <AUX_MU_IER_REG>:
    9204:	20215044 	eorcs	r5, r1, r4, asr #32

00009208 <AUX_MU_IIR_REG>:
    9208:	20215048 	eorcs	r5, r1, r8, asr #32

0000920c <AUX_MU_LCR_REG>:
    920c:	2021504c 	eorcs	r5, r1, ip, asr #32

00009210 <AUX_MU_BAUD_REG>:
    9210:	20215068 	eorcs	r5, r1, r8, rrx

00009214 <AUX_MU_IO_REG>:
    9214:	20215040 	eorcs	r5, r1, r0, asr #32

00009218 <AUX_MU_STAT_REG>:
    9218:	20215064 	eorcs	r5, r1, r4, rrx

0000921c <AUX_MU_SCRATCH>:
    921c:	2021505c 	eorcs	r5, r1, ip, asr r0

00009220 <AUX_MU_MSR_REG>:
    9220:	20215058 	eorcs	r5, r1, r8, asr r0

00009224 <AUX_MU_MCR_REG>:
    9224:	20215050 	eorcs	r5, r1, r0, asr r0

00009228 <AUX_IRQ>:
    9228:	20215000 	eorcs	r5, r1, r0

0000922c <GPFSEL0>:
    922c:	20200000 	eorcs	r0, r0, r0

00009230 <GPFSEL1>:
    9230:	20200004 	eorcs	r0, r0, r4

00009234 <GPFSEL2>:
    9234:	20200008 	eorcs	r0, r0, r8

00009238 <GPFSEL3>:
    9238:	2020000c 	eorcs	r0, r0, ip

0000923c <GPFSEL4>:
    923c:	20200010 	eorcs	r0, r0, r0, lsl r0

00009240 <GPFSEL5>:
    9240:	20200014 	eorcs	r0, r0, r4, lsl r0

00009244 <GPSET0>:
    9244:	2020001c 	eorcs	r0, r0, ip, lsl r0

00009248 <GPSET1>:
    9248:	20200020 	eorcs	r0, r0, r0, lsr #32

0000924c <GPCLR0>:
    924c:	20200028 	eorcs	r0, r0, r8, lsr #32

00009250 <GPCLR1>:
    9250:	2020002c 	eorcs	r0, r0, ip, lsr #32

00009254 <GPLEV0>:
    9254:	20200034 	eorcs	r0, r0, r4, lsr r0

00009258 <GPLEV1>:
    9258:	20200038 	eorcs	r0, r0, r8, lsr r0

0000925c <gpio_clr0>:
    925c:	20200028 	eorcs	r0, r0, r8, lsr #32

00009260 <gpio_set0>:
    9260:	2020001c 	eorcs	r0, r0, ip, lsl r0

00009264 <gpio_fsel0>:
    9264:	20200000 	eorcs	r0, r0, r0

00009268 <rpi_putchar>:
    9268:	000091e0 	andeq	r9, r0, r0, ror #3

Disassembly of section .rodata:

0000926c <__FUNCTION__.4160-0x230>:
    926c:	756f6261 	strbvc	r6, [pc, #-609]!	; 9013 <gpio_set_input+0x9b>
    9270:	6f742074 	svcvs	0x00742074
    9274:	736e6920 	cmnvc	lr, #32, 18	; 0x80000
    9278:	6c6c6174 	stfvse	f6, [ip], #-464	; 0xfffffe30
    927c:	6e616820 	cdpvs	8, 6, cr6, cr1, cr0, {1}
    9280:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    9284:	00000a73 	andeq	r0, r0, r3, ror sl
    9288:	74746573 	ldrbtvc	r6, [r4], #-1395	; 0x573
    928c:	20676e69 	rsbcs	r6, r7, r9, ror #28
    9290:	74207075 	strtvc	r7, [r0], #-117	; 0x75
    9294:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    9298:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
    929c:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
    92a0:	0a737470 	beq	1ce6468 <__bss_end__+0x1cdc828>
    92a4:	00000000 	andeq	r0, r0, r0
    92a8:	6e6e6f67 	cdpvs	15, 6, cr6, cr14, cr7, {3}
    92ac:	6e652061 	cdpvs	0, 6, cr2, cr5, cr1, {3}
    92b0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
    92b4:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
    92b8:	6c672073 	stclvs	0, cr2, [r7], #-460	; 0xfffffe34
    92bc:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
    92c0:	0a21796c 	beq	867878 <__bss_end__+0x85dc38>
    92c4:	00000000 	andeq	r0, r0, r0
    92c8:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    92cc:	2164656c 	cmncs	r4, ip, ror #10
    92d0:	0000000a 	andeq	r0, r0, sl
    92d4:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    92d8:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    92dc:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    92e0:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    92e4:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    92e8:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    92ec:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    92f0:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    92f4:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    92f8:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    92fc:	00000a2d 	andeq	r0, r0, sp, lsr #20
    9300:	6d6d7573 	cfstr64vs	mvdx7, [sp, #-460]!	; 0xfffffe34
    9304:	3a797261 	bcc	1e65c90 <__bss_end__+0x1e5c050>
    9308:	0000000a 	andeq	r0, r0, sl
    930c:	30312509 	eorscc	r2, r1, r9, lsl #10
    9310:	74203a64 	strtvc	r3, [r0], #-2660	; 0xa64
    9314:	6c61746f 	cfstrdvs	mvd7, [r1], #-444	; 0xfffffe44
    9318:	65746920 	ldrbvs	r6, [r4, #-2336]!	; 0x920
    931c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    9320:	0a736e6f 	beq	1ce4ce4 <__bss_end__+0x1cdb0a4>
    9324:	00000000 	andeq	r0, r0, r0
    9328:	30312509 	eorscc	r2, r1, r9, lsl #10
    932c:	74203a64 	strtvc	r3, [r0], #-2660	; 0xa64
    9330:	6920746f 	stmdbvs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
    9334:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    9338:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
    933c:	00000a73 	andeq	r0, r0, r3, ror sl
    9340:	30312509 	eorscc	r2, r1, r9, lsl #10
    9344:	69203a64 	stmdbvs	r0!, {r2, r5, r6, r9, fp, ip, sp}
    9348:	61726574 	cmnvs	r2, r4, ror r5
    934c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    9350:	202f2073 	eorcs	r2, pc, r3, ror r0	; <UNPREDICTABLE>
    9354:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    9358:	70757272 	rsbsvc	r7, r5, r2, ror r2
    935c:	00000a74 	andeq	r0, r0, r4, ror sl
    9360:	30312509 	eorscc	r2, r1, r9, lsl #10
    9364:	61203a64 	teqvs	r0, r4, ror #20
    9368:	61726576 	cmnvs	r2, r6, ror r5
    936c:	70206567 	eorvc	r6, r0, r7, ror #10
    9370:	6f697265 	svcvs	0x00697265
    9374:	000a0a64 	andeq	r0, sl, r4, ror #20
    9378:	61746f74 	cmnvs	r4, r4, ror pc
    937c:	7865206c 	stmdavc	r5!, {r2, r3, r5, r6, sp}^
    9380:	74756365 	ldrbtvc	r6, [r5], #-869	; 0x365
    9384:	206e6f69 	rsbcs	r6, lr, r9, ror #30
    9388:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    938c:	6425203a 	strtvs	r2, [r5], #-58	; 0x3a
    9390:	2e636573 	mcrcs	5, 3, r6, cr3, cr3, {3}
    9394:	736d6425 	cmnvc	sp, #620756992	; 0x25000000
    9398:	7564252e 	strbvc	r2, [r4, #-1326]!	; 0x52e
    939c:	0a636573 	beq	18e2970 <__bss_end__+0x18d8d30>
    93a0:	00000000 	andeq	r0, r0, r0
    93a4:	61656d0a 	cmnvs	r5, sl, lsl #26
    93a8:	69727573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, ip, sp, lr}^
    93ac:	6320676e 	teqvs	r0, #28835840	; 0x1b80000
    93b0:	2074736f 	rsbscs	r7, r4, pc, ror #6
    93b4:	6420666f 	strtvs	r6, [r0], #-1647	; 0x66f
    93b8:	65666669 	strbvs	r6, [r6, #-1641]!	; 0x669
    93bc:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
    93c0:	65706f20 	ldrbvs	r6, [r0, #-3872]!	; 0xf20
    93c4:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    93c8:	20736e6f 	rsbscs	r6, r3, pc, ror #28
    93cc:	20697028 	rsbcs	r7, r9, r8, lsr #32
    93d0:	3d202b41 	fstmdbxcc	r0!, {d2-d33}	;@ Deprecated
    93d4:	30303720 	eorscc	r3, r0, r0, lsr #14
    93d8:	63796320 	cmnvs	r9, #32, 6	; 0x80000000
    93dc:	75202f20 	strvc	r2, [r0, #-3872]!	; 0xf20
    93e0:	29636573 	stmdbcs	r3!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    93e4:	0000000a 	andeq	r0, r0, sl
    93e8:	203a7325 	eorscs	r7, sl, r5, lsr #6
    93ec:	63206425 	teqvs	r0, #620756992	; 0x25000000
    93f0:	656c6379 	strbvs	r6, [ip, #-889]!	; 0x379
    93f4:	253c2073 	ldrcs	r2, [ip, #-115]!	; 0x73
    93f8:	000a3e73 	andeq	r3, sl, r3, ror lr
    93fc:	61657209 	cmnvs	r5, r9, lsl #4
    9400:	72772f64 	rsbsvc	r2, r7, #100, 30	; 0x190
    9404:	20657469 	rsbcs	r7, r5, r9, ror #8
    9408:	72726162 	rsbsvc	r6, r2, #-2147483624	; 0x80000018
    940c:	00726569 	rsbseq	r6, r2, r9, ror #10
    9410:	5f766564 	svcpl	0x00766564
    9414:	72726162 	rsbsvc	r6, r2, #-2147483624	; 0x80000018
    9418:	28726569 	ldmdacs	r2!, {r0, r3, r5, r6, r8, sl, sp, lr}^
    941c:	00000029 	andeq	r0, r0, r9, lsr #32
    9420:	61657209 	cmnvs	r5, r9, lsl #4
    9424:	61622064 	cmnvs	r2, r4, rrx
    9428:	65697272 	strbvs	r7, [r9, #-626]!	; 0x272
    942c:	00000072 	andeq	r0, r0, r2, ror r0
    9430:	28626d64 	stmdacs	r2!, {r2, r5, r6, r8, sl, fp, sp, lr}^
    9434:	00000029 	andeq	r0, r0, r9, lsr #32
    9438:	66617309 	strbtvs	r7, [r1], -r9, lsl #6
    943c:	69742065 	ldmdbvs	r4!, {r0, r2, r5, r6, sp}^
    9440:	0072656d 	rsbseq	r6, r2, sp, ror #10
    9444:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    9448:	65675f72 	strbvs	r5, [r7, #-3954]!	; 0xf72
    944c:	73755f74 	cmnvc	r5, #116, 30	; 0x1d0
    9450:	29286365 	stmdbcs	r8!, {r0, r2, r5, r6, r8, r9, sp, lr}
    9454:	00000000 	andeq	r0, r0, r0
    9458:	736e7509 	cmnvc	lr, #37748736	; 0x2400000
    945c:	20656661 	rsbcs	r6, r5, r1, ror #12
    9460:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    9464:	00000072 	andeq	r0, r0, r2, ror r0
    9468:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    946c:	65675f72 	strbvs	r5, [r7, #-3954]!	; 0xf72
    9470:	73755f74 	cmnvc	r5, #116, 30	; 0x1d0
    9474:	725f6365 	subsvc	r6, pc, #-1811939327	; 0x94000001
    9478:	29287761 	stmdbcs	r8!, {r0, r5, r6, r8, r9, sl, ip, sp, lr}
    947c:	00000000 	andeq	r0, r0, r0
    9480:	79633c09 	stmdbvc	r3!, {r0, r3, sl, fp, ip, sp}^
    9484:	5f656c63 	svcpl	0x00656c63
    9488:	5f746e63 	svcpl	0x00746e63
    948c:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
    9490:	3a3e2928 	bcc	f93938 <__bss_end__+0xf89cf8>
    9494:	0a642520 	beq	191291c <__bss_end__+0x1908cdc>
    9498:	00000000 	andeq	r0, r0, r0

0000949c <__FUNCTION__.4160>:
    949c:	74736166 	ldrbtvc	r6, [r3], #-358	; 0x166
    94a0:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
    94a4:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
    94a8:	765f7470 			; <UNDEFINED> instruction: 0x765f7470
    94ac:	6f746365 	svcvs	0x00746365
    94b0:	00000072 	andeq	r0, r0, r2, ror r0

000094b4 <__FUNCTION__.4164>:
    94b4:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xf73
    94b8:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
    94bc:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
    94c0:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
    94c4:	765f7470 			; <UNDEFINED> instruction: 0x765f7470
    94c8:	6f746365 	svcvs	0x00746365
    94cc:	00000072 	andeq	r0, r0, r2, ror r0

000094d0 <__FUNCTION__.4168>:
    94d0:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0x572
    94d4:	65765f74 	ldrbvs	r5, [r6, #-3956]!	; 0xf74
    94d8:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    94dc:	00000000 	andeq	r0, r0, r0

000094e0 <__FUNCTION__.4172>:
    94e0:	65646e75 	strbvs	r6, [r4, #-3701]!	; 0xe75
    94e4:	656e6966 	strbvs	r6, [lr, #-2406]!	; 0x966
    94e8:	6e695f64 	cdpvs	15, 6, cr5, cr9, cr4, {3}
    94ec:	75727473 	ldrbvc	r7, [r2, #-1139]!	; 0x473
    94f0:	6f697463 	svcvs	0x00697463
    94f4:	65765f6e 	ldrbvs	r5, [r6, #-3950]!	; 0xf6e
    94f8:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    94fc:	00000000 	andeq	r0, r0, r0

00009500 <__FUNCTION__.4176>:
    9500:	66657270 			; <UNDEFINED> instruction: 0x66657270
    9504:	68637465 	stmdavs	r3!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    9508:	6f62615f 	svcvs	0x0062615f
    950c:	765f7472 			; <UNDEFINED> instruction: 0x765f7472
    9510:	6f746365 	svcvs	0x00746365
    9514:	00000072 	andeq	r0, r0, r2, ror r0

00009518 <__FUNCTION__.4180>:
    9518:	61746164 	cmnvs	r4, r4, ror #2
    951c:	6f62615f 	svcvs	0x0062615f
    9520:	765f7472 			; <UNDEFINED> instruction: 0x765f7472
    9524:	6f746365 	svcvs	0x00746365
    9528:	00000072 	andeq	r0, r0, r2, ror r0
    952c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9530:	73253a43 	teqvc	r5, #274432	; 0x43000
    9534:	3a73253a 	bcc	1cd2a24 <__bss_end__+0x1cc8de4>
    9538:	453a6425 	ldrmi	r6, [sl, #-1061]!	; 0x425
    953c:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
    9540:	6e75203a 	mrcvs	0, 3, r2, cr5, cr10, {1}
    9544:	646e6168 	strbtvs	r6, [lr], #-360	; 0x168
    9548:	2064656c 	rsbcs	r6, r4, ip, ror #10
    954c:	65637865 	strbvs	r7, [r3, #-2149]!	; 0x865
    9550:	6f697470 	svcvs	0x00697470
    9554:	253c206e 	ldrcs	r2, [ip, #-110]!	; 0x6e
    9558:	61203e73 	teqvs	r0, r3, ror lr
    955c:	43502074 	cmpmi	r0, #116	; 0x74
    9560:	0a78253d 	beq	1e12a5c <__bss_end__+0x1e08e1c>
    9564:	0000000a 	andeq	r0, r0, sl
    9568:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    956c:	70757272 	rsbsvc	r7, r5, r2, ror r2
    9570:	632d7374 	teqvs	sp, #116, 6	; 0xd0000001
    9574:	0000632e 	andeq	r6, r0, lr, lsr #6
    9578:	74736166 	ldrbtvc	r6, [r3], #-358	; 0x166
    957c:	00000000 	andeq	r0, r0, r0
    9580:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xf73
    9584:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
    9588:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
    958c:	00007470 	andeq	r7, r0, r0, ror r4
    9590:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0x572
    9594:	65762074 	ldrbvs	r2, [r6, #-116]!	; 0x74
    9598:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    959c:	00000000 	andeq	r0, r0, r0
    95a0:	65646e75 	strbvs	r6, [r4, #-3701]!	; 0xe75
    95a4:	656e6966 	strbvs	r6, [lr, #-2406]!	; 0x966
    95a8:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
    95ac:	75727473 	ldrbvc	r7, [r2, #-1139]!	; 0x473
    95b0:	6f697463 	svcvs	0x00697463
    95b4:	0000006e 	andeq	r0, r0, lr, rrx
    95b8:	66657270 			; <UNDEFINED> instruction: 0x66657270
    95bc:	68637465 	stmdavs	r3!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    95c0:	6f626120 	svcvs	0x00626120
    95c4:	00007472 	andeq	r7, r0, r2, ror r4
    95c8:	61746164 	cmnvs	r4, r4, ror #2
    95cc:	6f626120 	svcvs	0x00626120
    95d0:	00007472 	andeq	r7, r0, r2, ror r4

000095d4 <__FUNCTION__.4188>:
    95d4:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    95d8:	68635f72 	stmdavs	r3!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    95dc:	5f6b6365 	svcpl	0x006b6365
    95e0:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
    95e4:	00737465 	rsbseq	r7, r3, r5, ror #8
    95e8:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    95ec:	73253a43 	teqvc	r5, #274432	; 0x43000
    95f0:	3a73253a 	bcc	1cd2ae0 <__bss_end__+0x1cc8ea0>
    95f4:	6f3a6425 	svcvs	0x003a6425
    95f8:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0x666
    95fc:	72772074 	rsbsvc	r2, r7, #116	; 0x74
    9600:	3a676e6f 	bcc	19e4fc4 <__bss_end__+0x19db384>
    9604:	70786520 	rsbsvc	r6, r8, r0, lsr #10
    9608:	20746365 	rsbscs	r6, r4, r5, ror #6
    960c:	67207825 	strvs	r7, [r0, -r5, lsr #16]!
    9610:	2520746f 	strcs	r7, [r0, #-1135]!	; 0x46f
    9614:	73252078 	teqvc	r5, #120	; 0x78
    9618:	666f5b20 	strbtvs	r5, [pc], -r0, lsr #22
    961c:	64253d66 	strtvs	r3, [r5], #-3430	; 0xd66
    9620:	69626e2c 	stmdbvs	r2!, {r2, r3, r5, r9, sl, fp, sp, lr}^
    9624:	253d7374 	ldrcs	r7, [sp, #-884]!	; 0x374
    9628:	0a0a5d64 	beq	2a0bc0 <__bss_end__+0x296f80>
    962c:	00000000 	andeq	r0, r0, r0
    9630:	742f2e2e 	strtvc	r2, [pc], #-3630	; 9638 <__FUNCTION__.4188+0x64>
    9634:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    9638:	746e692d 	strbtvc	r6, [lr], #-2349	; 0x92d
    963c:	69742f2f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    9640:	2d72656d 	cfldr64cs	mvdx6, [r2, #-436]!	; 0xfffffe4c
    9644:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    9648:	70757272 	rsbsvc	r7, r5, r2, ror r2
    964c:	00632e74 	rsbeq	r2, r3, r4, ror lr
    9650:	5f657375 	svcpl	0x00657375
    9654:	69623233 	stmdbvs	r2!, {r0, r1, r4, r5, r9, ip, sp}^
    9658:	6f635f74 	svcvs	0x00635f74
    965c:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xe75
    9660:	00000072 	andeq	r0, r0, r2, ror r0
    9664:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9668:	73253a43 	teqvc	r5, #274432	; 0x43000
    966c:	3a73253a 	bcc	1cd2b5c <__bss_end__+0x1cc8f1c>
    9670:	783a6425 	ldmdavc	sl!, {r0, r2, r5, sl, sp, lr}
    9674:	3d20752e 	cfstr32cc	mvfx7, [r0, #-184]!	; 0xffffff48
    9678:	7865203d 	stmdavc	r5!, {r0, r2, r3, r4, r5, sp}^
    967c:	00000a70 	andeq	r0, r0, r0, ror sl
    9680:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9684:	73253a43 	teqvc	r5, #274432	; 0x43000
    9688:	3a73253a 	bcc	1cd2b78 <__bss_end__+0x1cc8f38>
    968c:	773a6425 	ldrvc	r6, [sl, -r5, lsr #8]!
    9690:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
    9694:	6f727720 	svcvs	0x00727720
    9698:	203a676e 	eorscs	r6, sl, lr, ror #14
    969c:	65707865 	ldrbvs	r7, [r0, #-2149]!	; 0x865
    96a0:	25207463 	strcs	r7, [r0, #-1123]!	; 0x463
    96a4:	6f672078 	svcvs	0x00672078
    96a8:	78252074 	stmdavc	r5!, {r2, r4, r5, r6, sp}
    96ac:	20732520 	rsbscs	r2, r3, r0, lsr #10
    96b0:	66666f5b 	uqsaxvs	r6, r6, fp
    96b4:	2c64253d 	cfstr64cs	mvdx2, [r4], #-244	; 0xffffff0c
    96b8:	7469626e 	strbtvc	r6, [r9], #-622	; 0x26e
    96bc:	64253d73 	strtvs	r3, [r5], #-3443	; 0xd73
    96c0:	000a0a5d 	andeq	r0, sl, sp, asr sl
    96c4:	5f746e69 	svcpl	0x00746e69
    96c8:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    96cc:	0064656c 	rsbeq	r6, r4, ip, ror #10
    96d0:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    96d4:	6e655f72 	mcrvs	15, 3, r5, cr5, cr2, {3}
    96d8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
    96dc:	00000064 	andeq	r0, r0, r4, rrx
    96e0:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    96e4:	5f726574 	svcpl	0x00726574
    96e8:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    96ec:	0064656c 	rsbeq	r6, r4, ip, ror #10
    96f0:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    96f4:	5f726574 	svcpl	0x00726574
    96f8:	73657270 	cmnvc	r5, #112, 4
    96fc:	656c6163 	strbvs	r6, [ip, #-355]!	; 0x163
    9700:	00000072 	andeq	r0, r0, r2, ror r0
    9704:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
    9708:	20737465 	rsbscs	r7, r3, r5, ror #8
    970c:	63656863 	cmnvs	r5, #6488064	; 0x630000
    9710:	2064656b 	rsbcs	r6, r4, fp, ror #10
    9714:	2174756f 	cmncs	r4, pc, ror #10
    9718:	0000000a 	andeq	r0, r0, sl

0000971c <__FUNCTION__.4187>:
    971c:	74696d65 	strbtvc	r6, [r9], #-3429	; 0xd65
    9720:	00000000 	andeq	r0, r0, r0

00009724 <__FUNCTION__.4135>:
    9724:	5f697072 	svcpl	0x00697072
    9728:	5f746573 	svcpl	0x00746573
    972c:	7074756f 	rsbsvc	r7, r4, pc, ror #10
    9730:	00007475 	andeq	r7, r0, r5, ror r4

00009734 <__FUNCTION__.4209>:
    9734:	705f6176 	subsvc	r6, pc, r6, ror r1	; <UNPREDICTABLE>
    9738:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    973c:	0000006b 	andeq	r0, r0, fp, rrx
    9740:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9744:	73253a43 	teqvc	r5, #274432	; 0x43000
    9748:	3a73253a 	bcc	1cd2c38 <__bss_end__+0x1cc8ff8>
    974c:	303a6425 	eorscc	r6, sl, r5, lsr #8
    9750:	0000000a 	andeq	r0, r0, sl
    9754:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    9758:	2d61762f 	stclcs	6, cr7, [r1, #-188]!	; 0xffffff44
    975c:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    9760:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
    9764:	00000000 	andeq	r0, r0, r0
    9768:	33323130 	teqcc	r2, #48, 2
    976c:	37363534 			; <UNDEFINED> instruction: 0x37363534
    9770:	00003938 	andeq	r3, r0, r8, lsr r9
    9774:	33323130 	teqcc	r2, #48, 2
    9778:	37363534 			; <UNDEFINED> instruction: 0x37363534
    977c:	62613938 	rsbvs	r3, r1, #56, 18	; 0xe0000
    9780:	66656463 	strbtvs	r6, [r5], -r3, ror #8
    9784:	00000000 	andeq	r0, r0, r0
    9788:	00003130 	andeq	r3, r0, r0, lsr r1
    978c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9790:	73253a43 	teqvc	r5, #274432	; 0x43000
    9794:	3a73253a 	bcc	1cd2c84 <__bss_end__+0x1cc9044>
    9798:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    979c:	5f637475 	svcpl	0x00637475
    97a0:	000a7066 	andeq	r7, sl, r6, rrx
    97a4:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    97a8:	73253a43 	teqvc	r5, #274432	; 0x43000
    97ac:	3a73253a 	bcc	1cd2c9c <__bss_end__+0x1cc905c>
    97b0:	773a6425 	ldrvc	r6, [sl, -r5, lsr #8]!
    97b4:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
    97b8:	33203c20 	teqcc	r0, #32, 24	; 0x2000
    97bc:	00000a32 	andeq	r0, r0, r2, lsr sl
    97c0:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    97c4:	73253a43 	teqvc	r5, #274432	; 0x43000
    97c8:	3a73253a 	bcc	1cd2cb8 <__bss_end__+0x1cc9078>
    97cc:	663a6425 	ldrtvs	r6, [sl], -r5, lsr #8
    97d0:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xf6c
    97d4:	746f6e20 	strbtvc	r6, [pc], #-3616	; 97dc <__FUNCTION__.4209+0xa8>
    97d8:	616e6520 	cmnvs	lr, r0, lsr #10
    97dc:	64656c62 	strbtvs	r6, [r5], #-3170	; 0xc62
    97e0:	0a212121 	beq	851c6c <__bss_end__+0x84802c>
    97e4:	00000000 	andeq	r0, r0, r0
    97e8:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    97ec:	73253a43 	teqvc	r5, #274432	; 0x43000
    97f0:	3a73253a 	bcc	1cd2ce0 <__bss_end__+0x1cc90a0>
    97f4:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    97f8:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    97fc:	6e203a6b 	vnmulvs.f32	s6, s0, s23
    9800:	6820746f 	stmdavs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
    9804:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    9808:	20676e69 	rsbcs	r6, r7, r9, ror #28
    980c:	63657073 	cmnvs	r5, #115	; 0x73
    9810:	65696669 	strbvs	r6, [r9, #-1641]!	; 0x669
    9814:	25272072 	strcs	r2, [r7, #-114]!	; 0x72
    9818:	0a0a2763 	beq	2935ac <__bss_end__+0x28996c>
    981c:	00000000 	andeq	r0, r0, r0
    9820:	454e4f44 	strbmi	r4, [lr, #-3908]	; 0xf44
    9824:	0a212121 	beq	851cb0 <__bss_end__+0x848070>
    9828:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss:

0000982c <__bss_start__>:
    982c:	00000000 	andeq	r0, r0, r0

00009830 <last_clk.4180>:
    9830:	00000000 	andeq	r0, r0, r0

00009834 <period>:
    9834:	00000000 	andeq	r0, r0, r0

00009838 <period_sum>:
    9838:	00000000 	andeq	r0, r0, r0

0000983c <buf.4135>:
	...

00009c3c <rpi_arm_timer_t>:
    9c3c:	00000000 	andeq	r0, r0, r0

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4b5a3605 	blmi	168d82c <__bss_end__+0x1683bec>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	12010901 	andne	r0, r1, #16384	; 0x4000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0x404
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	22011a01 	andcs	r1, r1, #4096	; 0x1000
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__bss_end__+0x10c70e4>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	34202955 	strtcc	r2, [r0], #-2389	; 0x955
   c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000007fe 	strdeq	r0, [r0], -lr
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000232 	andeq	r0, r0, r2, lsr r2
      10:	0006f801 	andeq	pc, r6, r1, lsl #16
      14:	00000900 	andeq	r0, r0, r0, lsl #18
      18:	00801000 	addeq	r1, r0, r0
      1c:	0002a800 	andeq	sl, r2, r0, lsl #16
      20:	00000000 	andeq	r0, r0, r0
      24:	07080200 	streq	r0, [r8, -r0, lsl #4]
      28:	00000085 	andeq	r0, r0, r5, lsl #1
      2c:	8f070402 	svchi	0x00070402
      30:	03000000 	movweq	r0, #0
      34:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
      38:	01020074 	tsteq	r2, r4, ror r0
      3c:	00021c06 	andeq	r1, r2, r6, lsl #24
      40:	05020200 	streq	r0, [r2, #-512]	; 0x200
      44:	00000228 	andeq	r0, r0, r8, lsr #4
      48:	bf050402 	svclt	0x00050402
      4c:	02000000 	andeq	r0, r0, #0
      50:	00ba0508 	adcseq	r0, sl, r8, lsl #10
      54:	01020000 	mrseq	r0, (UNDEF: 2)
      58:	00021a08 	andeq	r1, r2, r8, lsl #20
      5c:	07020200 	streq	r0, [r2, -r0, lsl #4]
      60:	0000016c 	andeq	r0, r0, ip, ror #2
      64:	8a070402 	bhi	1c1074 <__bss_end__+0x1b7434>
      68:	02000000 	andeq	r0, r0, #0
      6c:	01b90704 			; <UNDEFINED> instruction: 0x01b90704
      70:	01020000 	mrseq	r0, (UNDEF: 2)
      74:	00022308 	andeq	r2, r2, r8, lsl #6
      78:	7f040400 	svcvc	0x00040400
      7c:	05000000 	streq	r0, [r0, #-0]
      80:	00000072 	andeq	r0, r0, r2, ror r0
      84:	33020406 	movwcc	r0, #9222	; 0x2406
      88:	000000f1 	strdeq	r0, [r0], -r1
      8c:	00010907 	andeq	r0, r1, r7, lsl #18
      90:	82e88000 	rschi	r8, r8, #0
      94:	fa070280 	blx	1c0a9c <__bss_end__+0x1b6e5c>
      98:	80000000 	andhi	r0, r0, r0
      9c:	028082e8 	addeq	r8, r0, #232, 4	; 0x8000000e
      a0:	0002c207 	andeq	ip, r2, r7, lsl #4
      a4:	82e88400 	rschi	r8, r8, #0, 8
      a8:	e8070280 	stmda	r7, {r7, r9}
      ac:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
      b0:	028082e8 	addeq	r8, r0, #232, 4	; 0x8000000e
      b4:	0002d207 	andeq	sp, r2, r7, lsl #4
      b8:	82e88c00 	rschi	r8, r8, #0, 24
      bc:	63070280 	movwvs	r0, #29312	; 0x7280
      c0:	90000000 	andls	r0, r0, r0
      c4:	028082e8 	addeq	r8, r0, #232, 4	; 0x8000000e
      c8:	00012907 	andeq	r2, r1, r7, lsl #18
      cc:	82e89400 	rschi	r9, r8, #0, 8
      d0:	c9070280 	stmdbgt	r7, {r7, r9}
      d4:	98000001 	stmdals	r0, {r0}
      d8:	028082e8 	addeq	r8, r0, #232, 4	; 0x8000000e
      dc:	00028907 	andeq	r8, r2, r7, lsl #18
      e0:	82e89c00 	rschi	r9, r8, #0, 24
      e4:	27070280 	strcs	r0, [r7, -r0, lsl #5]
      e8:	a0000003 	andge	r0, r0, r3
      ec:	028082e8 	addeq	r8, r0, #232, 4	; 0x8000000e
      f0:	03040600 	movweq	r0, #17920	; 0x4600
      f4:	00016814 	andeq	r6, r1, r4, lsl r8
      f8:	01180700 	tsteq	r8, r0, lsl #14
      fc:	e4800000 	str	r0, [r0], #0
     100:	07028082 	streq	r8, [r2, -r2, lsl #1]
     104:	0000029e 	muleq	r0, lr, r2
     108:	8082e480 	addhi	lr, r2, r0, lsl #9
     10c:	013d0702 	teqeq	sp, r2, lsl #14
     110:	e4840000 	str	r0, [r4], #0
     114:	07028082 	streq	r8, [r2, -r2, lsl #1]
     118:	0000014b 	andeq	r0, r0, fp, asr #2
     11c:	8082e488 	addhi	lr, r2, r8, lsl #9
     120:	03040702 	movweq	r0, #18178	; 0x4702
     124:	e48c0000 	str	r0, [ip], #0
     128:	07028082 	streq	r8, [r2, -r2, lsl #1]
     12c:	0000018b 	andeq	r0, r0, fp, lsl #3
     130:	8082e490 	umullhi	lr, r2, r0, r4
     134:	01990702 	orrseq	r0, r9, r2, lsl #14
     138:	e4940000 	ldr	r0, [r4], #0
     13c:	07028082 	streq	r8, [r2, -r2, lsl #1]
     140:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
     144:	8082e498 	umullhi	lr, r2, r8, r4
     148:	009c0702 	addseq	r0, ip, r2, lsl #14
     14c:	e49c0000 	ldr	r0, [ip], #0
     150:	07028082 	streq	r8, [r2, -r2, lsl #1]
     154:	000000ab 	andeq	r0, r0, fp, lsr #1
     158:	8082e4a0 	addhi	lr, r2, r0, lsr #9
     15c:	01590702 	cmpeq	r9, r2, lsl #14
     160:	e4a40000 	strt	r0, [r4], #0
     164:	00028082 	andeq	r8, r2, r2, lsl #1
     168:	0003e108 	andeq	lr, r3, r8, lsl #2
     16c:	100f0100 	andne	r0, pc, r0, lsl #2
     170:	78000080 	stmdavc	r0, {r7}
     174:	01000000 	mrseq	r0, (UNDEF: 0)
     178:	0002079c 	muleq	r2, ip, r7
     17c:	63700900 	cmnvs	r0, #0, 18
     180:	2c0f0100 	stfcss	f0, [pc], {-0}
     184:	00000000 	andeq	r0, r0, r0
     188:	0a000000 	beq	190 <_start-0x7e70>
     18c:	000002a8 	andeq	r0, r0, r8, lsr #5
     190:	002c1101 	eoreq	r1, ip, r1, lsl #2
     194:	00210000 	eoreq	r0, r1, r0
     198:	180b0000 	stmdane	fp, {}	; <UNPREDICTABLE>
     19c:	01000003 	tsteq	r0, r3
     1a0:	00002c30 	andeq	r2, r0, r0, lsr ip
     1a4:	30030500 	andcc	r0, r3, r0, lsl #10
     1a8:	0c000098 	stceq	0, cr0, [r0], {152}	; 0x98
     1ac:	006b6c63 	rsbeq	r6, fp, r3, ror #24
     1b0:	002c3101 	eoreq	r3, ip, r1, lsl #2
     1b4:	50010000 	andpl	r0, r1, r0
     1b8:	0080180d 	addeq	r1, r0, sp, lsl #16
     1bc:	00076f00 	andeq	r6, r7, r0, lsl #30
     1c0:	80200e00 	eorhi	r0, r0, r0, lsl #28
     1c4:	07760000 	ldrbeq	r0, [r6, -r0]!
     1c8:	01d80000 	bicseq	r0, r8, r0
     1cc:	010f0000 	mrseq	r0, CPSR
     1d0:	000c0550 	andeq	r0, ip, r0, asr r5
     1d4:	002000b2 	strhteq	r0, [r0], -r2
     1d8:	0080340e 	addeq	r3, r0, lr, lsl #8
     1dc:	00078b00 	andeq	r8, r7, r0, lsl #22
     1e0:	0001f400 	andeq	pc, r1, r0, lsl #8
     1e4:	51010f00 	tstpl	r1, r0, lsl #30
     1e8:	010f3101 	tsteq	pc, r1, lsl #2
     1ec:	0c0c0550 	cfstr32eq	mvfx0, [ip], {80}	; 0x50
     1f0:	002000b4 	strhteq	r0, [r0], -r4
     1f4:	0080380d 	addeq	r3, r0, sp, lsl #16
     1f8:	00076f00 	andeq	r6, r7, r0, lsl #30
     1fc:	804c0d00 	subhi	r0, ip, r0, lsl #26
     200:	07a10000 	streq	r0, [r1, r0]!
     204:	10000000 	andne	r0, r0, r0
     208:	00000121 	andeq	r0, r0, r1, lsr #2
     20c:	80883b01 	addhi	r3, r8, r1, lsl #22
     210:	02300000 	eorseq	r0, r0, #0
     214:	9c010000 	stcls	0, cr0, [r1], {-0}
     218:	00000726 	andeq	r0, r0, r6, lsr #14
     21c:	0006720a 	andeq	r7, r6, sl, lsl #4
     220:	2c4a0100 	stfcse	f0, [sl], {-0}
     224:	34000000 	strcc	r0, [r0], #-0
     228:	0a000000 	beq	230 <_start-0x7dd0>
     22c:	000001a7 	andeq	r0, r0, r7, lsr #3
     230:	002c4f01 	eoreq	r4, ip, r1, lsl #30
     234:	00520000 	subseq	r0, r2, r0
     238:	73110000 	tstvc	r1, #0
     23c:	01006d75 	tsteq	r0, r5, ror sp
     240:	00002c4f 	andeq	r2, r0, pc, asr #24
     244:	74120000 	ldrvc	r0, [r2], #-0
     248:	0100746f 	tsteq	r0, pc, ror #8
     24c:	00002c5d 	andeq	r2, r0, sp, asr ip
     250:	00007100 	andeq	r7, r0, r0, lsl #2
     254:	03100b00 	tsteq	r0, #0, 22
     258:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
     25c:	0000002c 	andeq	r0, r0, ip, lsr #32
     260:	c20a5701 	andgt	r5, sl, #262144	; 0x40000
     264:	01000001 	tsteq	r0, r1
     268:	00002c5f 	andeq	r2, r0, pc, asr ip
     26c:	00008400 	andeq	r8, r0, r0, lsl #8
     270:	00000b00 	andeq	r0, r0, r0, lsl #22
     274:	60010000 	andvs	r0, r1, r0
     278:	0000002c 	andeq	r0, r0, ip, lsr #32
     27c:	9c135601 	ldcls	6, cr5, [r3], {1}
     280:	08000081 	stmdaeq	r0, {r0, r7}
     284:	97000000 	strls	r0, [r0, -r0]
     288:	11000002 	tstne	r0, r2
     28c:	01006e69 	tsteq	r0, r9, ror #28
     290:	00002c6b 	andeq	r2, r0, fp, ror #24
     294:	13000100 	movwne	r0, #256	; 0x100
     298:	000081a4 	andeq	r8, r0, r4, lsr #3
     29c:	00000024 	andeq	r0, r0, r4, lsr #32
     2a0:	0000032e 	andeq	r0, r0, lr, lsr #6
     2a4:	00745f14 	rsbseq	r5, r4, r4, lsl pc
     2a8:	002c6c01 	eoreq	r6, ip, r1, lsl #24
     2ac:	a4130000 	ldrge	r0, [r3], #-0
     2b0:	0c000081 	stceq	0, cr0, [r0], {129}	; 0x81
     2b4:	0b000000 	bleq	2bc <_start-0x7d44>
     2b8:	14000003 	strne	r0, [r0], #-3
     2bc:	0100735f 	tsteq	r0, pc, asr r3
     2c0:	00002c6c 	andeq	r2, r0, ip, ror #24
     2c4:	655f1400 	ldrbvs	r1, [pc, #-1024]	; fffffecc <__bss_end__+0xffff628c>
     2c8:	2c6c0100 	stfcse	f0, [ip], #-0
     2cc:	13000000 	movwne	r0, #0
     2d0:	000081a4 	andeq	r8, r0, r4, lsr #3
     2d4:	00000004 	andeq	r0, r0, r4
     2d8:	000002e8 	andeq	r0, r0, r8, ror #5
     2dc:	0001e915 	andeq	lr, r1, r5, lsl r9
     2e0:	2c6c0100 	stfcse	f0, [ip], #-0
     2e4:	00000000 	andeq	r0, r0, r0
     2e8:	0081ac13 	addeq	sl, r1, r3, lsl ip
     2ec:	00000400 	andeq	r0, r0, r0, lsl #8
     2f0:	00030100 	andeq	r0, r3, r0, lsl #2
     2f4:	01e91500 	mvneq	r1, r0, lsl #10
     2f8:	6c010000 	stcvs	0, cr0, [r1], {-0}
     2fc:	0000002c 	andeq	r0, r0, ip, lsr #32
     300:	81ac0d00 			; <UNDEFINED> instruction: 0x81ac0d00
     304:	076f0000 	strbeq	r0, [pc, -r0]!
     308:	16000000 	strne	r0, [r0], -r0
     30c:	000081c8 	andeq	r8, r0, r8, asr #3
     310:	000007ac 	andeq	r0, r0, ip, lsr #15
     314:	0553010f 	ldrbeq	r0, [r3, #-271]	; 0x10f
     318:	00941003 	addseq	r1, r4, r3
     31c:	51010f00 	tstpl	r1, r0, lsl #30
     320:	93fc0305 	mvnsls	r0, #335544320	; 0x14000000
     324:	010f0000 	mrseq	r0, CPSR
     328:	00740250 	rsbseq	r0, r4, r0, asr r2
     32c:	c8130000 	ldmdagt	r3, {}	; <UNPREDICTABLE>
     330:	20000081 	andcs	r0, r0, r1, lsl #1
     334:	c5000000 	strgt	r0, [r0, #-0]
     338:	14000003 	strne	r0, [r0], #-3
     33c:	0100745f 	tsteq	r0, pc, asr r4
     340:	00002c6d 	andeq	r2, r0, sp, ror #24
     344:	81c81300 	bichi	r1, r8, r0, lsl #6
     348:	000c0000 	andeq	r0, ip, r0
     34c:	03a20000 			; <UNDEFINED> instruction: 0x03a20000
     350:	5f140000 	svcpl	0x00140000
     354:	6d010073 	stcvs	0, cr0, [r1, #-460]	; 0xfffffe34
     358:	0000002c 	andeq	r0, r0, ip, lsr #32
     35c:	00655f14 	rsbeq	r5, r5, r4, lsl pc
     360:	002c6d01 	eoreq	r6, ip, r1, lsl #26
     364:	c8130000 	ldmdagt	r3, {}	; <UNPREDICTABLE>
     368:	04000081 	streq	r0, [r0], #-129	; 0x81
     36c:	7f000000 	svcvc	0x00000000
     370:	15000003 	strne	r0, [r0, #-3]
     374:	000001e9 	andeq	r0, r0, r9, ror #3
     378:	002c6d01 	eoreq	r6, ip, r1, lsl #26
     37c:	13000000 	movwne	r0, #0
     380:	000081d0 	ldrdeq	r8, [r0], -r0
     384:	00000004 	andeq	r0, r0, r4
     388:	00000398 	muleq	r0, r8, r3
     38c:	0001e915 	andeq	lr, r1, r5, lsl r9
     390:	2c6d0100 	stfcse	f0, [sp], #-0
     394:	00000000 	andeq	r0, r0, r0
     398:	0081d00d 	addeq	sp, r1, sp
     39c:	0007c200 	andeq	ip, r7, r0, lsl #4
     3a0:	e8160000 	ldmda	r6, {}	; <UNPREDICTABLE>
     3a4:	ac000081 	stcge	0, cr0, [r0], {129}	; 0x81
     3a8:	0f000007 	svceq	0x00000007
     3ac:	03055301 	movweq	r5, #21249	; 0x5301
     3b0:	00009430 	andeq	r9, r0, r0, lsr r4
     3b4:	0551010f 	ldrbeq	r0, [r1, #-271]	; 0x10f
     3b8:	00942003 	addseq	r2, r4, r3
     3bc:	50010f00 	andpl	r0, r1, r0, lsl #30
     3c0:	00007402 	andeq	r7, r0, r2, lsl #8
     3c4:	81e81300 	mvnhi	r1, r0, lsl #6
     3c8:	00200000 	eoreq	r0, r0, r0
     3cc:	045c0000 	ldrbeq	r0, [ip], #-0
     3d0:	5f140000 	svcpl	0x00140000
     3d4:	6e010074 	mcrvs	0, 0, r0, cr1, cr4, {3}
     3d8:	0000002c 	andeq	r0, r0, ip, lsr #32
     3dc:	0081e813 	addeq	lr, r1, r3, lsl r8
     3e0:	00000c00 	andeq	r0, r0, r0, lsl #24
     3e4:	00043900 	andeq	r3, r4, r0, lsl #18
     3e8:	735f1400 	cmpvc	pc, #0, 8
     3ec:	2c6e0100 	stfcse	f0, [lr], #-0
     3f0:	14000000 	strne	r0, [r0], #-0
     3f4:	0100655f 	tsteq	r0, pc, asr r5
     3f8:	00002c6e 	andeq	r2, r0, lr, ror #24
     3fc:	81e81300 	mvnhi	r1, r0, lsl #6
     400:	00040000 	andeq	r0, r4, r0
     404:	04160000 	ldreq	r0, [r6], #-0
     408:	e9150000 	ldmdb	r5, {}	; <UNPREDICTABLE>
     40c:	01000001 	tsteq	r0, r1
     410:	00002c6e 	andeq	r2, r0, lr, ror #24
     414:	f0130000 			; <UNDEFINED> instruction: 0xf0130000
     418:	04000081 	streq	r0, [r0], #-129	; 0x81
     41c:	2f000000 	svccs	0x00000000
     420:	15000004 	strne	r0, [r0, #-4]
     424:	000001e9 	andeq	r0, r0, r9, ror #3
     428:	002c6e01 	eoreq	r6, ip, r1, lsl #28
     42c:	0d000000 	stceq	0, cr0, [r0, #-0]
     430:	000081f0 	strdeq	r8, [r0], -r0
     434:	000007a1 	andeq	r0, r0, r1, lsr #15
     438:	82081600 	andhi	r1, r8, #0, 12
     43c:	07ac0000 	streq	r0, [ip, r0]!
     440:	010f0000 	mrseq	r0, CPSR
     444:	44030553 	strmi	r0, [r3], #-1363	; 0x553
     448:	0f000094 	svceq	0x00000094
     44c:	03055101 	movweq	r5, #20737	; 0x5101
     450:	00009438 	andeq	r9, r0, r8, lsr r4
     454:	0250010f 	subseq	r0, r0, #-1073741821	; 0xc0000003
     458:	00000074 	andeq	r0, r0, r4, ror r0
     45c:	00820813 	addeq	r0, r2, r3, lsl r8
     460:	00002000 	andeq	r2, r0, r0
     464:	0004f300 	andeq	pc, r4, r0, lsl #6
     468:	745f1400 	ldrbvc	r1, [pc], #-1024	; 470 <_start-0x7b90>
     46c:	2c6f0100 	stfcse	f0, [pc], #-0	; 474 <_start-0x7b8c>
     470:	13000000 	movwne	r0, #0
     474:	00008208 	andeq	r8, r0, r8, lsl #4
     478:	0000000c 	andeq	r0, r0, ip
     47c:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     480:	00735f14 	rsbseq	r5, r3, r4, lsl pc
     484:	002c6f01 	eoreq	r6, ip, r1, lsl #30
     488:	5f140000 	svcpl	0x00140000
     48c:	6f010065 	svcvs	0x00010065
     490:	0000002c 	andeq	r0, r0, ip, lsr #32
     494:	00820813 	addeq	r0, r2, r3, lsl r8
     498:	00000400 	andeq	r0, r0, r0, lsl #8
     49c:	0004ad00 	andeq	sl, r4, r0, lsl #26
     4a0:	01e91500 	mvneq	r1, r0, lsl #10
     4a4:	6f010000 	svcvs	0x00010000
     4a8:	0000002c 	andeq	r0, r0, ip, lsr #32
     4ac:	82101300 	andshi	r1, r0, #0, 6
     4b0:	00040000 	andeq	r0, r4, r0
     4b4:	04c60000 	strbeq	r0, [r6], #0
     4b8:	e9150000 	ldmdb	r5, {}	; <UNPREDICTABLE>
     4bc:	01000001 	tsteq	r0, r1
     4c0:	00002c6f 	andeq	r2, r0, pc, ror #24
     4c4:	100d0000 	andne	r0, sp, r0
     4c8:	c9000082 	stmdbgt	r0, {r1, r7}
     4cc:	00000007 	andeq	r0, r0, r7
     4d0:	00822816 	addeq	r2, r2, r6, lsl r8
     4d4:	0007ac00 	andeq	sl, r7, r0, lsl #24
     4d8:	53010f00 	movwpl	r0, #7936	; 0x1f00
     4dc:	94680305 	strbtls	r0, [r8], #-773	; 0x305
     4e0:	010f0000 	mrseq	r0, CPSR
     4e4:	58030551 	stmdapl	r3, {r0, r4, r6, r8, sl}
     4e8:	0f000094 	svceq	0x00000094
     4ec:	74025001 	strvc	r5, [r2], #-1
     4f0:	13000000 	movwne	r0, #0
     4f4:	00008228 	andeq	r8, r0, r8, lsr #4
     4f8:	0000000c 	andeq	r0, r0, ip
     4fc:	0000055c 	andeq	r0, r0, ip, asr r5
     500:	00735f14 	rsbseq	r5, r3, r4, lsl pc
     504:	002c7101 	eoreq	r7, ip, r1, lsl #2
     508:	5f140000 	svcpl	0x00140000
     50c:	71010065 	tstvc	r1, r5, rrx
     510:	0000002c 	andeq	r0, r0, ip, lsr #32
     514:	00822813 	addeq	r2, r2, r3, lsl r8
     518:	00000400 	andeq	r0, r0, r0, lsl #8
     51c:	00052d00 	andeq	r2, r5, r0, lsl #26
     520:	01e91500 	mvneq	r1, r0, lsl #10
     524:	71010000 	mrsvc	r0, (UNDEF: 1)
     528:	0000002c 	andeq	r0, r0, ip, lsr #32
     52c:	822c1300 	eorhi	r1, ip, #0, 6
     530:	00040000 	andeq	r0, r4, r0
     534:	05460000 	strbeq	r0, [r6, #-0]
     538:	e9150000 	ldmdb	r5, {}	; <UNPREDICTABLE>
     53c:	01000001 	tsteq	r0, r1
     540:	00002c71 	andeq	r2, r0, r1, ror ip
     544:	30170000 	andscc	r0, r7, r0
     548:	04000082 	streq	r0, [r0], #-130	; 0x82
     54c:	15000000 	strne	r0, [r0, #-0]
     550:	000001e9 	andeq	r0, r0, r9, ror #3
     554:	002c7101 	eoreq	r7, ip, r1, lsl #2
     558:	00000000 	andeq	r0, r0, r0
     55c:	0080900d 	addeq	r9, r0, sp
     560:	0007d400 	andeq	sp, r7, r0, lsl #8
     564:	80980e00 	addshi	r0, r8, r0, lsl #28
     568:	07ac0000 	streq	r0, [ip, r0]!
     56c:	057c0000 	ldrbeq	r0, [ip, #-0]!
     570:	010f0000 	mrseq	r0, CPSR
     574:	6c030550 	cfstr32vs	mvfx0, [r3], {80}	; 0x50
     578:	00000092 	muleq	r0, r2, r0
     57c:	00809c0d 	addeq	r9, r0, sp, lsl #24
     580:	0007db00 	andeq	sp, r7, r0, lsl #22
     584:	80a40e00 	adchi	r0, r4, r0, lsl #28
     588:	07ac0000 	streq	r0, [ip, r0]!
     58c:	059c0000 	ldreq	r0, [ip]
     590:	010f0000 	mrseq	r0, CPSR
     594:	88030550 	stmdahi	r3, {r4, r6, r8, sl}
     598:	00000092 	muleq	r0, r2, r0
     59c:	0080ac0e 	addeq	sl, r0, lr, lsl #24
     5a0:	0007e200 	andeq	lr, r7, r0, lsl #4
     5a4:	0005b100 	andeq	fp, r5, r0, lsl #2
     5a8:	50010f00 	andpl	r0, r1, r0, lsl #30
     5ac:	01000a03 	tsteq	r0, r3, lsl #20
     5b0:	80b40e00 	adcshi	r0, r4, r0, lsl #28
     5b4:	07ac0000 	streq	r0, [ip, r0]!
     5b8:	05c80000 	strbeq	r0, [r8]
     5bc:	010f0000 	mrseq	r0, CPSR
     5c0:	a8030550 	stmdage	r3, {r4, r6, r8, sl}
     5c4:	00000092 	muleq	r0, r2, r0
     5c8:	0080b80d 	addeq	fp, r0, sp, lsl #16
     5cc:	0007f300 	andeq	pc, r7, r0, lsl #6
     5d0:	80c00e00 	sbchi	r0, r0, r0, lsl #28
     5d4:	07ac0000 	streq	r0, [ip, r0]!
     5d8:	05e80000 	strbeq	r0, [r8, #0]!
     5dc:	010f0000 	mrseq	r0, CPSR
     5e0:	c8030550 	stmdagt	r3, {r4, r6, r8, sl}
     5e4:	00000092 	muleq	r0, r2, r0
     5e8:	0080c40d 	addeq	ip, r0, sp, lsl #8
     5ec:	0007a100 	andeq	sl, r7, r0, lsl #2
     5f0:	80e80d00 	rschi	r0, r8, r0, lsl #26
     5f4:	07a10000 	streq	r0, [r1, r0]!
     5f8:	280e0000 	stmdacs	lr, {}	; <UNPREDICTABLE>
     5fc:	ac000081 	stcge	0, cr0, [r0], {129}	; 0x81
     600:	11000007 	tstne	r0, r7
     604:	0f000006 	svceq	0x00000006
     608:	03055001 	movweq	r5, #20481	; 0x5001
     60c:	000092d4 	ldrdeq	r9, [r0], -r4
     610:	81300e00 	teqhi	r0, r0, lsl #28
     614:	07ac0000 	streq	r0, [ip, r0]!
     618:	06280000 	strteq	r0, [r8], -r0
     61c:	010f0000 	mrseq	r0, CPSR
     620:	00030550 	andeq	r0, r3, r0, asr r5
     624:	00000093 	muleq	r0, r3, r0
     628:	00813c0e 	addeq	r3, r1, lr, lsl #24
     62c:	0007ac00 	andeq	sl, r7, r0, lsl #24
     630:	00064500 	andeq	r4, r6, r0, lsl #10
     634:	51010f00 	tstpl	r1, r0, lsl #30
     638:	0f007402 	svceq	0x00007402
     63c:	03055001 	movweq	r5, #20481	; 0x5001
     640:	0000930c 	andeq	r9, r0, ip, lsl #6
     644:	81480e00 	cmphi	r8, r0, lsl #28
     648:	07ac0000 	streq	r0, [ip, r0]!
     64c:	06610000 	strbteq	r0, [r1], -r0
     650:	010f0000 	mrseq	r0, CPSR
     654:	0f440151 	svceq	0x00440151
     658:	03055001 	movweq	r5, #20481	; 0x5001
     65c:	00009328 	andeq	r9, r0, r8, lsr #6
     660:	815c0e00 	cmphi	ip, r0, lsl #28
     664:	07ac0000 	streq	r0, [ip, r0]!
     668:	06970000 	ldreq	r0, [r7], r0
     66c:	010f0000 	mrseq	r0, CPSR
     670:	00741b51 	rsbseq	r1, r4, r1, asr fp
     674:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
     678:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
     67c:	00cccccc 	sbceq	ip, ip, ip, asr #25
     680:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     684:	25f72008 	ldrbcs	r2, [r7, #8]!
     688:	342cf725 	strtcc	pc, [ip], #-1829	; 0x725
     68c:	50010f25 	andpl	r0, r1, r5, lsr #30
     690:	93400305 	movtls	r0, #773	; 0x305
     694:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     698:	00008180 	andeq	r8, r0, r0, lsl #3
     69c:	000007ac 	andeq	r0, r0, ip, lsr #15
     6a0:	000006ae 	andeq	r0, r0, lr, lsr #13
     6a4:	0550010f 	ldrbeq	r0, [r0, #-271]	; 0x10f
     6a8:	00936003 	addseq	r6, r3, r3
     6ac:	940e0000 	strls	r0, [lr], #-0
     6b0:	ac000081 	stcge	0, cr0, [r0], {129}	; 0x81
     6b4:	d7000007 	strle	r0, [r0, -r7]
     6b8:	0f000006 	svceq	0x00000006
     6bc:	76025301 	strvc	r5, [r2], -r1, lsl #6
     6c0:	52010f00 	andpl	r0, r1, #0, 30
     6c4:	0f007502 	svceq	0x00007502
     6c8:	77025101 	strvc	r5, [r2, -r1, lsl #2]
     6cc:	50010f00 	andpl	r0, r1, r0, lsl #30
     6d0:	93780305 	cmnls	r8, #335544320	; 0x14000000
     6d4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     6d8:	0000819c 	muleq	r0, ip, r1
     6dc:	000007ac 	andeq	r0, r0, ip, lsr #15
     6e0:	000006ee 	andeq	r0, r0, lr, ror #13
     6e4:	0550010f 	ldrbeq	r0, [r0, #-271]	; 0x10f
     6e8:	0093a403 	addseq	sl, r3, r3, lsl #8
     6ec:	400e0000 	andmi	r0, lr, r0
     6f0:	ac000082 	stcge	0, cr0, [r0], {130}	; 0x82
     6f4:	05000007 	streq	r0, [r0, #-7]
     6f8:	0f000007 	svceq	0x00000007
     6fc:	03055001 	movweq	r5, #20481	; 0x5001
     700:	00009480 	andeq	r9, r0, r0, lsl #9
     704:	82480e00 	subhi	r0, r8, #0, 28
     708:	07ac0000 	streq	r0, [ip, r0]!
     70c:	071c0000 	ldreq	r0, [ip, -r0]
     710:	010f0000 	mrseq	r0, CPSR
     714:	d4030550 	strle	r0, [r3], #-1360	; 0x550
     718:	00000092 	muleq	r0, r2, r0
     71c:	00824c0d 	addeq	r4, r2, sp, lsl #24
     720:	0007fa00 	andeq	pc, r7, r0, lsl #20
     724:	630c0000 	movwvs	r0, #49152	; 0xc000
     728:	0100746e 	tsteq	r0, lr, ror #8
     72c:	0007370c 	andeq	r3, r7, ip, lsl #14
     730:	2c030500 	cfstr32cs	mvfx0, [r3], {-0}
     734:	18000098 	stmdane	r0, {r3, r4, r7}
     738:	0000002c 	andeq	r0, r0, ip, lsr #32
     73c:	00007e0b 	andeq	r7, r0, fp, lsl #28
     740:	370c0100 	strcc	r0, [ip, -r0, lsl #2]
     744:	05000007 	streq	r0, [r0, #-7]
     748:	00983403 	addseq	r3, r8, r3, lsl #8
     74c:	00dd0b00 	sbcseq	r0, sp, r0, lsl #22
     750:	0c010000 	stceq	0, cr0, [r1], {-0}
     754:	00000737 	andeq	r0, r0, r7, lsr r7
     758:	98380305 	ldmdals	r8!, {r0, r2, r8, r9}
     75c:	f4190000 			; <UNDEFINED> instruction: 0xf4190000
     760:	02000002 	andeq	r0, r0, #2
     764:	00008480 	andeq	r8, r0, r0, lsl #9
     768:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
     76c:	1a00009c 	bne	9e4 <_start-0x761c>
     770:	0000017f 	andeq	r0, r0, pc, ror r1
     774:	da1b8404 	ble	6e178c <__bss_end__+0x6d7b4c>
     778:	04000001 	streq	r0, [r0], #-1
     77c:	00002ca0 	andeq	r2, r0, r0, lsr #25
     780:	00078b00 	andeq	r8, r7, r0, lsl #22
     784:	002c1c00 	eoreq	r1, ip, r0, lsl #24
     788:	1d000000 	stcne	0, cr0, [r0, #-0]
     78c:	00000321 	andeq	r0, r0, r1, lsr #6
     790:	07a19404 	streq	r9, [r1, r4, lsl #8]!
     794:	2c1c0000 	ldccs	0, cr0, [ip], {-0}
     798:	1c000000 	stcne	0, cr0, [r0], {-0}
     79c:	0000002c 	andeq	r0, r0, ip, lsr #32
     7a0:	02e51e00 	rsceq	r1, r5, #0, 28
     7a4:	52040000 	andpl	r0, r4, #0
     7a8:	0000002c 	andeq	r0, r0, ip, lsr #32
     7ac:	0005281b 	andeq	r2, r5, fp, lsl r8
     7b0:	33270400 	teqcc	r7, #0, 8
     7b4:	c2000000 	andgt	r0, r0, #0
     7b8:	1c000007 	stcne	0, cr0, [r0], {7}
     7bc:	00000079 	andeq	r0, r0, r9, ror r0
     7c0:	6420001f 	strtvs	r0, [r0], #-31
     7c4:	0400626d 	streq	r6, [r0], #-621	; 0x26d
     7c8:	01ee1e7f 	mvneq	r1, pc, ror lr
     7cc:	54040000 	strpl	r0, [r4], #-0
     7d0:	0000002c 	andeq	r0, r0, ip, lsr #32
     7d4:	0000741a 	andeq	r7, r0, sl, lsl r4
     7d8:	1a380400 	bne	e017e0 <__bss_end__+0xdf7ba0>
     7dc:	000001e0 	andeq	r0, r0, r0, ror #3
     7e0:	c81d2703 	ldmdagt	sp, {r0, r1, r8, r9, sl, sp}
     7e4:	05000000 	streq	r0, [r0, #-0]
     7e8:	0007f308 	andeq	pc, r7, r8, lsl #6
     7ec:	002c1c00 	eoreq	r1, ip, r0, lsl #24
     7f0:	1a000000 	bne	7f8 <_start-0x7808>
     7f4:	00000201 	andeq	r0, r0, r1, lsl #4
     7f8:	ac1a2503 	cfldr32ge	mvfx2, [sl], {3}
     7fc:	04000001 	streq	r0, [r0], #-1
     800:	05560063 	ldrbeq	r0, [r6, #-99]	; 0x63
     804:	00040000 	andeq	r0, r4, r0
     808:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
     80c:	02320104 	eorseq	r0, r2, #4, 2
     810:	5a010000 	bpl	40818 <__bss_end__+0x36bd8>
     814:	09000003 	stmdbeq	r0, {r0, r1}
     818:	6c000000 	stcvs	0, cr0, [r0], {-0}
     81c:	d0000083 	andle	r0, r0, r3, lsl #1
     820:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     824:	02000001 	andeq	r0, r0, #1
     828:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     82c:	04030074 	streq	r0, [r3], #-116	; 0x74
     830:	00008f07 	andeq	r8, r0, r7, lsl #30
     834:	06010300 	streq	r0, [r1], -r0, lsl #6
     838:	0000021c 	andeq	r0, r0, ip, lsl r2
     83c:	28050203 	stmdacs	r5, {r0, r1, r9}
     840:	03000002 	movweq	r0, #2
     844:	00bf0504 	adcseq	r0, pc, r4, lsl #10
     848:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     84c:	0000ba05 	andeq	fp, r0, r5, lsl #20
     850:	08010300 	stmdaeq	r1, {r8, r9}
     854:	0000021a 	andeq	r0, r0, sl, lsl r2
     858:	6c070203 	sfmvs	f0, 4, [r7], {3}
     85c:	03000001 	movweq	r0, #1
     860:	008a0704 	addeq	r0, sl, r4, lsl #14
     864:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     868:	00008507 	andeq	r8, r0, r7, lsl #10
     86c:	07040300 	streq	r0, [r4, -r0, lsl #6]
     870:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
     874:	23080103 	movwcs	r0, #33027	; 0x8103
     878:	04000002 	streq	r0, [r0], #-2
     87c:	00007f04 	andeq	r7, r0, r4, lsl #30
     880:	00720500 	rsbseq	r0, r2, r0, lsl #10
     884:	72060000 	andvc	r0, r6, #0
     888:	94000000 	strls	r0, [r0], #-0
     88c:	07000000 	streq	r0, [r0, -r0]
     890:	0000006b 	andeq	r0, r0, fp, rrx
     894:	04080019 	streq	r0, [r8], #-25
     898:	010b1403 	tsteq	fp, r3, lsl #8
     89c:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
     8a0:	80000001 	andhi	r0, r0, r1
     8a4:	028082e4 	addeq	r8, r0, #228, 4	; 0x4000000e
     8a8:	00029e09 	andeq	r9, r2, r9, lsl #28
     8ac:	82e48000 	rschi	r8, r4, #0
     8b0:	3d090280 	sfmcc	f0, 4, [r9, #-512]	; 0xfffffe00
     8b4:	84000001 	strhi	r0, [r0], #-1
     8b8:	028082e4 	addeq	r8, r0, #228, 4	; 0x4000000e
     8bc:	00014b09 	andeq	r4, r1, r9, lsl #22
     8c0:	82e48800 	rschi	r8, r4, #0, 16
     8c4:	04090280 	streq	r0, [r9], #-640	; 0x280
     8c8:	8c000003 	stchi	0, cr0, [r0], {3}
     8cc:	028082e4 	addeq	r8, r0, #228, 4	; 0x4000000e
     8d0:	00018b09 	andeq	r8, r1, r9, lsl #22
     8d4:	82e49000 	rschi	r9, r4, #0
     8d8:	99090280 	stmdbls	r9, {r7, r9}
     8dc:	94000001 	strls	r0, [r0], #-1
     8e0:	028082e4 	addeq	r8, r0, #228, 4	; 0x4000000e
     8e4:	0002b009 	andeq	fp, r2, r9
     8e8:	82e49800 	rschi	r9, r4, #0, 16
     8ec:	9c090280 	sfmls	f0, 4, [r9], {128}	; 0x80
     8f0:	9c000000 	stcls	0, cr0, [r0], {-0}
     8f4:	028082e4 	addeq	r8, r0, #228, 4	; 0x4000000e
     8f8:	0000ab09 	andeq	sl, r0, r9, lsl #22
     8fc:	82e4a000 	rschi	sl, r4, #0
     900:	59090280 	stmdbpl	r9, {r7, r9}
     904:	a4000001 	strge	r0, [r0], #-1
     908:	028082e4 	addeq	r8, r0, #228, 4	; 0x4000000e
     90c:	01e00a00 	mvneq	r0, r0, lsl #20
     910:	05010000 	streq	r0, [r1, #-0]
     914:	0000836c 	andeq	r8, r0, ip, ror #6
     918:	00000068 	andeq	r0, r0, r8, rrx
     91c:	01b79c01 			; <UNDEFINED> instruction: 0x01b79c01
     920:	690b0000 	stmdbvs	fp, {}	; <UNPREDICTABLE>
     924:	01000003 	tsteq	r0, r3
     928:	00002c11 	andeq	r2, r0, r1, lsl ip
     92c:	037a0b00 	cmneq	sl, #0, 22
     930:	12010000 	andne	r0, r1, #0
     934:	0000002c 	andeq	r0, r0, ip, lsr #32
     938:	7473640c 	ldrbtvc	r6, [r3], #-1036	; 0x40c
     93c:	b7160100 	ldrlt	r0, [r6, -r0, lsl #2]
     940:	00000001 	andeq	r0, r0, r1
     944:	6372730d 	cmnvs	r2, #872415232	; 0x34000000
     948:	b7170100 	ldrlt	r0, [r7, -r0, lsl #2]
     94c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     950:	1801006e 	stmdane	r1, {r1, r2, r3, r5, r6}
     954:	0000002c 	andeq	r0, r0, ip, lsr #32
     958:	9c0f5001 	stcls	0, cr5, [pc], {1}
     95c:	24000083 	strcs	r0, [r0], #-131	; 0x83
     960:	73000000 	movwvc	r0, #0
     964:	10000001 	andne	r0, r0, r1
     968:	19010069 	stmdbne	r1, {r0, r3, r5, r6}
     96c:	00000025 	andeq	r0, r0, r5, lsr #32
     970:	00000097 	muleq	r0, r7, r0
     974:	837c1100 	cmnhi	ip, #0, 2
     978:	051f0000 	ldreq	r0, [pc, #-0]	; 980 <_start-0x7680>
     97c:	01900000 	orrseq	r0, r0, r0
     980:	01120000 	tsteq	r2, r0
     984:	ff090251 			; <UNDEFINED> instruction: 0xff090251
     988:	05500112 	ldrbeq	r0, [r0, #-274]	; 0x112
     98c:	00b21c0c 	adcseq	r1, r2, ip, lsl #24
     990:	88110020 	ldmdahi	r1, {r5}
     994:	1f000083 	svcne	0x00000083
     998:	ad000005 	stcge	0, cr0, [r0, #-20]	; 0xffffffec
     99c:	12000001 	andne	r0, r0, #1
     9a0:	09025101 	stmdbeq	r2, {r0, r8, ip, lr}
     9a4:	500112ff 	strdpl	r1, [r1], -pc	; <UNPREDICTABLE>
     9a8:	b2200c05 	eorlt	r0, r0, #1280	; 0x500
     9ac:	13002000 	movwne	r2, #0
     9b0:	0000838c 	andeq	r8, r0, ip, lsl #7
     9b4:	00000535 	andeq	r0, r0, r5, lsr r5
     9b8:	2c040400 	cfstrscs	mvf0, [r4], {-0}
     9bc:	0a000000 	beq	9c4 <_start-0x763c>
     9c0:	000003f2 	strdeq	r0, [r0], -r2
     9c4:	83d41f01 	bicshi	r1, r4, #1, 30
     9c8:	003c0000 	eorseq	r0, ip, r0
     9cc:	9c010000 	stcls	0, cr0, [r1], {-0}
     9d0:	0000023a 	andeq	r0, r0, sl, lsr r2
     9d4:	00637014 	rsbeq	r7, r3, r4, lsl r0
     9d8:	002c1f01 	eoreq	r1, ip, r1, lsl #30
     9dc:	00b60000 	adcseq	r0, r6, r0
     9e0:	8f150000 	svchi	0x00150000
     9e4:	4a000003 	bmi	9f8 <_start-0x7608>
     9e8:	05000002 	streq	r0, [r0, #-2]
     9ec:	00949c03 	addseq	r9, r4, r3, lsl #24
     9f0:	83fc1100 	mvnshi	r1, #0, 2
     9f4:	053c0000 	ldreq	r0, [ip, #-0]!
     9f8:	02300000 	eorseq	r0, r0, #0
     9fc:	01120000 	tsteq	r2, r0
     a00:	20080253 	andcs	r0, r8, r3, asr r2
     a04:	05520112 	ldrbeq	r0, [r2, #-274]	; 0x112
     a08:	00949c03 	addseq	r9, r4, r3, lsl #24
     a0c:	51011200 	mrspl	r1, R9_usr
     a10:	95680305 	strbls	r0, [r8, #-773]!	; 0x305
     a14:	01120000 	tsteq	r2, r0
     a18:	2c030550 	cfstr32cs	mvfx0, [r3], {80}	; 0x50
     a1c:	12000095 	andne	r0, r0, #149	; 0x95
     a20:	03047d02 	movweq	r7, #19714	; 0x4d02
     a24:	125001f3 	subsne	r0, r0, #-1073741764	; 0xc000003c
     a28:	05007d02 	streq	r7, [r0, #-3330]	; 0xd02
     a2c:	00957803 	addseq	r7, r5, r3, lsl #16
     a30:	00130000 	andseq	r0, r3, r0
     a34:	52000084 	andpl	r0, r0, #132	; 0x84
     a38:	00000005 	andeq	r0, r0, r5
     a3c:	00007206 	andeq	r7, r0, r6, lsl #4
     a40:	00024a00 	andeq	r4, r2, r0, lsl #20
     a44:	006b0700 	rsbeq	r0, fp, r0, lsl #14
     a48:	00150000 	andseq	r0, r5, r0
     a4c:	00023a05 	andeq	r3, r2, r5, lsl #20
     a50:	03d80a00 	bicseq	r0, r8, #0, 20
     a54:	24010000 	strcs	r0, [r1], #-0
     a58:	00008410 	andeq	r8, r0, r0, lsl r4
     a5c:	0000003c 	andeq	r0, r0, ip, lsr r0
     a60:	02cc9c01 	sbceq	r9, ip, #256	; 0x100
     a64:	70140000 	andsvc	r0, r4, r0
     a68:	24010063 	strcs	r0, [r1], #-99	; 0x63
     a6c:	0000002c 	andeq	r0, r0, ip, lsr #32
     a70:	000000e3 	andeq	r0, r0, r3, ror #1
     a74:	00038f15 	andeq	r8, r3, r5, lsl pc
     a78:	0002cc00 	andeq	ip, r2, r0, lsl #24
     a7c:	b4030500 	strlt	r0, [r3], #-1280	; 0x500
     a80:	11000094 	swpne	r0, r4, [r0]	; <UNPREDICTABLE>
     a84:	00008438 	andeq	r8, r0, r8, lsr r4
     a88:	0000053c 	andeq	r0, r0, ip, lsr r5
     a8c:	000002c2 	andeq	r0, r0, r2, asr #5
     a90:	02530112 	subseq	r0, r3, #-2147483644	; 0x80000004
     a94:	01122508 	tsteq	r2, r8, lsl #10
     a98:	b4030552 	strlt	r0, [r3], #-1362	; 0x552
     a9c:	12000094 	andne	r0, r0, #148	; 0x94
     aa0:	03055101 	movweq	r5, #20737	; 0x5101
     aa4:	00009568 	andeq	r9, r0, r8, ror #10
     aa8:	05500112 	ldrbeq	r0, [r0, #-274]	; 0x112
     aac:	00952c03 	addseq	r2, r5, r3, lsl #24
     ab0:	7d021200 	sfmvc	f1, 4, [r2, #-0]
     ab4:	01f30304 	mvnseq	r0, r4, lsl #6
     ab8:	7d021250 	sfmvc	f1, 4, [r2, #-320]	; 0xfffffec0
     abc:	80030500 	andhi	r0, r3, r0, lsl #10
     ac0:	00000095 	muleq	r0, r5, r0
     ac4:	00843c13 	addeq	r3, r4, r3, lsl ip
     ac8:	00055200 	andeq	r5, r5, r0, lsl #4
     acc:	84050000 	strhi	r0, [r5], #-0
     ad0:	0a000000 	beq	ad8 <_start-0x7528>
     ad4:	000003cb 	andeq	r0, r0, fp, asr #7
     ad8:	844c2701 	strbhi	r2, [ip], #-1793	; 0x701
     adc:	003c0000 	eorseq	r0, ip, r0
     ae0:	9c010000 	stcls	0, cr0, [r1], {-0}
     ae4:	0000034e 	andeq	r0, r0, lr, asr #6
     ae8:	00637014 	rsbeq	r7, r3, r4, lsl r0
     aec:	002c2701 	eoreq	r2, ip, r1, lsl #14
     af0:	01100000 	tsteq	r0, r0
     af4:	8f150000 	svchi	0x00150000
     af8:	5e000003 	cdppl	0, 0, cr0, cr0, cr3, {0}
     afc:	05000003 	streq	r0, [r0, #-3]
     b00:	0094d003 	addseq	sp, r4, r3
     b04:	84741100 	ldrbthi	r1, [r4], #-256	; 0x100
     b08:	053c0000 	ldreq	r0, [ip, #-0]!
     b0c:	03440000 	movteq	r0, #16384	; 0x4000
     b10:	01120000 	tsteq	r2, r0
     b14:	28080253 	stmdacs	r8, {r0, r1, r4, r6, r9}
     b18:	05520112 	ldrbeq	r0, [r2, #-274]	; 0x112
     b1c:	0094d003 	addseq	sp, r4, r3
     b20:	51011200 	mrspl	r1, R9_usr
     b24:	95680305 	strbls	r0, [r8, #-773]!	; 0x305
     b28:	01120000 	tsteq	r2, r0
     b2c:	2c030550 	cfstr32cs	mvfx0, [r3], {80}	; 0x50
     b30:	12000095 	andne	r0, r0, #149	; 0x95
     b34:	03047d02 	movweq	r7, #19714	; 0x4d02
     b38:	125001f3 	subsne	r0, r0, #-1073741764	; 0xc000003c
     b3c:	05007d02 	streq	r7, [r0, #-3330]	; 0xd02
     b40:	00959003 	addseq	r9, r5, r3
     b44:	78130000 	ldmdavc	r3, {}	; <UNPREDICTABLE>
     b48:	52000084 	andpl	r0, r0, #132	; 0x84
     b4c:	00000005 	andeq	r0, r0, r5
     b50:	00007206 	andeq	r7, r0, r6, lsl #4
     b54:	00035e00 	andeq	r5, r3, r0, lsl #28
     b58:	006b0700 	rsbeq	r0, fp, r0, lsl #14
     b5c:	000c0000 	andeq	r0, ip, r0
     b60:	00034e05 	andeq	r4, r3, r5, lsl #28
     b64:	03ae0a00 			; <UNDEFINED> instruction: 0x03ae0a00
     b68:	2a010000 	bcs	40b70 <__bss_end__+0x36f30>
     b6c:	00008488 	andeq	r8, r0, r8, lsl #9
     b70:	0000003c 	andeq	r0, r0, ip, lsr r0
     b74:	03e09c01 	mvneq	r9, #256	; 0x100
     b78:	70140000 	andsvc	r0, r4, r0
     b7c:	2a010063 	bcs	40d10 <__bss_end__+0x370d0>
     b80:	0000002c 	andeq	r0, r0, ip, lsr #32
     b84:	0000013d 	andeq	r0, r0, sp, lsr r1
     b88:	00038f15 	andeq	r8, r3, r5, lsl pc
     b8c:	0003f000 	andeq	pc, r3, r0
     b90:	e0030500 	and	r0, r3, r0, lsl #10
     b94:	11000094 	swpne	r0, r4, [r0]	; <UNPREDICTABLE>
     b98:	000084b0 			; <UNDEFINED> instruction: 0x000084b0
     b9c:	0000053c 	andeq	r0, r0, ip, lsr r5
     ba0:	000003d6 	ldrdeq	r0, [r0], -r6
     ba4:	02530112 	subseq	r0, r3, #-2147483644	; 0x80000004
     ba8:	01122b08 	tsteq	r2, r8, lsl #22
     bac:	e0030552 	and	r0, r3, r2, asr r5
     bb0:	12000094 	andne	r0, r0, #148	; 0x94
     bb4:	03055101 	movweq	r5, #20737	; 0x5101
     bb8:	00009568 	andeq	r9, r0, r8, ror #10
     bbc:	05500112 	ldrbeq	r0, [r0, #-274]	; 0x112
     bc0:	00952c03 	addseq	r2, r5, r3, lsl #24
     bc4:	7d021200 	sfmvc	f1, 4, [r2, #-0]
     bc8:	01f30304 	mvnseq	r0, r4, lsl #6
     bcc:	7d021250 	sfmvc	f1, 4, [r2, #-320]	; 0xfffffec0
     bd0:	a0030500 	andge	r0, r3, r0, lsl #10
     bd4:	00000095 	muleq	r0, r5, r0
     bd8:	0084b413 	addeq	fp, r4, r3, lsl r4
     bdc:	00055200 	andeq	r5, r5, r0, lsl #4
     be0:	72060000 	andvc	r0, r6, #0
     be4:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
     be8:	07000003 	streq	r0, [r0, -r3]
     bec:	0000006b 	andeq	r0, r0, fp, rrx
     bf0:	e005001c 	and	r0, r5, ip, lsl r0
     bf4:	0a000003 	beq	c08 <_start-0x73f8>
     bf8:	00000344 	andeq	r0, r0, r4, asr #6
     bfc:	84c42d01 	strbhi	r2, [r4], #3329	; 0xd01
     c00:	003c0000 	eorseq	r0, ip, r0
     c04:	9c010000 	stcls	0, cr0, [r1], {-0}
     c08:	00000472 	andeq	r0, r0, r2, ror r4
     c0c:	00637014 	rsbeq	r7, r3, r4, lsl r0
     c10:	002c2d01 	eoreq	r2, ip, r1, lsl #26
     c14:	016a0000 	cmneq	sl, r0
     c18:	8f150000 	svchi	0x00150000
     c1c:	72000003 	andvc	r0, r0, #3
     c20:	05000004 	streq	r0, [r0, #-4]
     c24:	00950003 	addseq	r0, r5, r3
     c28:	84ec1100 	strbthi	r1, [ip], #256	; 0x100
     c2c:	053c0000 	ldreq	r0, [ip, #-0]!
     c30:	04680000 	strbteq	r0, [r8], #-0
     c34:	01120000 	tsteq	r2, r0
     c38:	2e080253 	mcrcs	2, 0, r0, cr8, cr3, {2}
     c3c:	05520112 	ldrbeq	r0, [r2, #-274]	; 0x112
     c40:	00950003 	addseq	r0, r5, r3
     c44:	51011200 	mrspl	r1, R9_usr
     c48:	95680305 	strbls	r0, [r8, #-773]!	; 0x305
     c4c:	01120000 	tsteq	r2, r0
     c50:	2c030550 	cfstr32cs	mvfx0, [r3], {80}	; 0x50
     c54:	12000095 	andne	r0, r0, #149	; 0x95
     c58:	03047d02 	movweq	r7, #19714	; 0x4d02
     c5c:	125001f3 	subsne	r0, r0, #-1073741764	; 0xc000003c
     c60:	05007d02 	streq	r7, [r0, #-3330]	; 0xd02
     c64:	0095b803 	addseq	fp, r5, r3, lsl #16
     c68:	f0130000 			; <UNDEFINED> instruction: 0xf0130000
     c6c:	52000084 	andpl	r0, r0, #132	; 0x84
     c70:	00000005 	andeq	r0, r0, r5
     c74:	00023a05 	andeq	r3, r2, r5, lsl #20
     c78:	039c0a00 	orrseq	r0, ip, #0, 20
     c7c:	30010000 	andcc	r0, r1, r0
     c80:	00008500 	andeq	r8, r0, r0, lsl #10
     c84:	0000003c 	andeq	r0, r0, ip, lsr r0
     c88:	04f49c01 	ldrbteq	r9, [r4], #3073	; 0xc01
     c8c:	70140000 	andsvc	r0, r4, r0
     c90:	30010063 	andcc	r0, r1, r3, rrx
     c94:	0000002c 	andeq	r0, r0, ip, lsr #32
     c98:	00000197 	muleq	r0, r7, r1
     c9c:	00038f15 	andeq	r8, r3, r5, lsl pc
     ca0:	00050400 	andeq	r0, r5, r0, lsl #8
     ca4:	18030500 	stmdane	r3, {r8, sl}
     ca8:	11000095 	swpne	r0, r5, [r0]	; <UNPREDICTABLE>
     cac:	00008528 	andeq	r8, r0, r8, lsr #10
     cb0:	0000053c 	andeq	r0, r0, ip, lsr r5
     cb4:	000004ea 	andeq	r0, r0, sl, ror #9
     cb8:	02530112 	subseq	r0, r3, #-2147483644	; 0x80000004
     cbc:	01123108 	tsteq	r2, r8, lsl #2
     cc0:	18030552 	stmdane	r3, {r1, r4, r6, r8, sl}
     cc4:	12000095 	andne	r0, r0, #149	; 0x95
     cc8:	03055101 	movweq	r5, #20737	; 0x5101
     ccc:	00009568 	andeq	r9, r0, r8, ror #10
     cd0:	05500112 	ldrbeq	r0, [r0, #-274]	; 0x112
     cd4:	00952c03 	addseq	r2, r5, r3, lsl #24
     cd8:	7d021200 	sfmvc	f1, 4, [r2, #-0]
     cdc:	01f30304 	mvnseq	r0, r4, lsl #6
     ce0:	7d021250 	sfmvc	f1, 4, [r2, #-320]	; 0xfffffec0
     ce4:	c8030500 	stmdagt	r3, {r8, sl}
     ce8:	00000095 	muleq	r0, r5, r0
     cec:	00852c13 	addeq	r2, r5, r3, lsl ip
     cf0:	00055200 	andeq	r5, r5, r0, lsl #4
     cf4:	72060000 	andvc	r0, r6, #0
     cf8:	04000000 	streq	r0, [r0], #-0
     cfc:	07000005 	streq	r0, [r0, -r5]
     d00:	0000006b 	andeq	r0, r0, fp, rrx
     d04:	f4050011 	vst4.8	{d0-d3}, [r5 :64], r1
     d08:	0b000004 	bleq	d20 <_start-0x72e0>
     d0c:	00000369 	andeq	r0, r0, r9, ror #6
     d10:	002c1101 	eoreq	r1, ip, r1, lsl #2
     d14:	7a0b0000 	bvc	2c0d1c <__bss_end__+0x2b70dc>
     d18:	01000003 	tsteq	r0, r3
     d1c:	00002c12 	andeq	r2, r0, r2, lsl ip
     d20:	03211600 	teqeq	r1, #0, 12
     d24:	94020000 	strls	r0, [r2], #-0
     d28:	00000535 	andeq	r0, r0, r5, lsr r5
     d2c:	00002c17 	andeq	r2, r0, r7, lsl ip
     d30:	002c1700 	eoreq	r1, ip, r0, lsl #14
     d34:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     d38:	0000017f 	andeq	r0, r0, pc, ror r1
     d3c:	28198402 	ldmdacs	r9, {r1, sl, pc}
     d40:	02000005 	andeq	r0, r0, #5
     d44:	00002527 	andeq	r2, r0, r7, lsr #10
     d48:	00055200 	andeq	r5, r5, r0, lsl #4
     d4c:	00791700 	rsbseq	r1, r9, r0, lsl #14
     d50:	001a0000 	andseq	r0, sl, r0
     d54:	0001ac18 	andeq	sl, r1, r8, lsl ip
     d58:	00630200 	rsbeq	r0, r3, r0, lsl #4
     d5c:	000002e4 	andeq	r0, r0, r4, ror #5
     d60:	03110004 	tsteq	r1, #4
     d64:	01040000 	mrseq	r0, (UNDEF: 4)
     d68:	00000232 	andeq	r0, r0, r2, lsr r2
     d6c:	00046501 	andeq	r6, r4, r1, lsl #10
     d70:	00048500 	andeq	r8, r4, r0, lsl #10
     d74:	00853c00 	addeq	r3, r5, r0, lsl #24
     d78:	00005c00 	andeq	r5, r0, r0, lsl #24
     d7c:	0001d700 	andeq	sp, r1, r0, lsl #14
     d80:	05040200 	streq	r0, [r4, #-512]	; 0x200
     d84:	00746e69 	rsbseq	r6, r4, r9, ror #28
     d88:	8f070403 	svchi	0x00070403
     d8c:	03000000 	movweq	r0, #0
     d90:	021c0601 	andseq	r0, ip, #1048576	; 0x100000
     d94:	02030000 	andeq	r0, r3, #0
     d98:	00022805 	andeq	r2, r2, r5, lsl #16
     d9c:	05040300 	streq	r0, [r4, #-768]	; 0x300
     da0:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
     da4:	ba050803 	blt	142db8 <__bss_end__+0x139178>
     da8:	03000000 	movweq	r0, #0
     dac:	021a0801 	andseq	r0, sl, #65536	; 0x10000
     db0:	02030000 	andeq	r0, r3, #0
     db4:	00016c07 	andeq	r6, r1, r7, lsl #24
     db8:	04ff0400 	ldrbteq	r0, [pc], #1024	; dc0 <_start-0x7240>
     dbc:	34030000 	strcc	r0, [r3], #-0
     dc0:	00000068 	andeq	r0, r0, r8, rrx
     dc4:	8a070403 	bhi	1c1dd8 <__bss_end__+0x1b8198>
     dc8:	03000000 	movweq	r0, #0
     dcc:	00850708 	addeq	r0, r5, r8, lsl #14
     dd0:	04030000 	streq	r0, [r3], #-0
     dd4:	0001b907 	andeq	fp, r1, r7, lsl #18
     dd8:	08010300 	stmdaeq	r1, {r8, r9}
     ddc:	00000223 	andeq	r0, r0, r3, lsr #4
     de0:	008a0405 	addeq	r0, sl, r5, lsl #8
     de4:	7d060000 	stcvc	0, cr0, [r6, #-0]
     de8:	07000000 	streq	r0, [r0, -r0]
     dec:	f21e0204 	vhsub.s16	d0, d14, d4
     df0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     df4:	00000447 	andeq	r0, r0, r7, asr #8
     df8:	005d2102 	subseq	r2, sp, r2, lsl #2
     dfc:	01040000 	mrseq	r0, (UNDEF: 4)
     e00:	f508001e 			; <UNDEFINED> instruction: 0xf508001e
     e04:	02000004 	andeq	r0, r0, #4
     e08:	00005d22 	andeq	r5, r0, r2, lsr #26
     e0c:	1c020400 	cfstrsne	mvf0, [r2], {-0}
     e10:	04590800 	ldrbeq	r0, [r9], #-2048	; 0x800
     e14:	27020000 	strcs	r0, [r2, -r0]
     e18:	0000005d 	andeq	r0, r0, sp, asr r0
     e1c:	001a0104 	andseq	r0, sl, r4, lsl #2
     e20:	00040808 	andeq	r0, r4, r8, lsl #16
     e24:	5d290200 	sfmpl	f0, 4, [r9, #-0]
     e28:	04000000 	streq	r0, [r0], #-0
     e2c:	08001801 	stmdaeq	r0, {r0, fp, ip}
     e30:	000004dd 	ldrdeq	r0, [r0], -sp
     e34:	005d2b02 	subseq	r2, sp, r2, lsl #22
     e38:	01040000 	mrseq	r0, (UNDEF: 4)
     e3c:	ed080016 	stc	0, cr0, [r8, #-88]	; 0xffffffa8
     e40:	02000004 	andeq	r0, r0, #4
     e44:	00005d2d 	andeq	r5, r0, sp, lsr #26
     e48:	09070400 	stmdbeq	r7, {sl}
     e4c:	2a040000 	bcs	100e54 <__bss_end__+0xf7214>
     e50:	02000004 	andeq	r0, r0, #4
     e54:	00008f2f 	andeq	r8, r0, pc, lsr #30
     e58:	02040900 	andeq	r0, r4, #0, 18
     e5c:	00016a33 	andeq	r6, r1, r3, lsr sl
     e60:	01090a00 	tsteq	r9, r0, lsl #20
     e64:	e8800000 	stm	r0, {}	; <UNPREDICTABLE>
     e68:	0a028082 	beq	a1078 <__bss_end__+0x97438>
     e6c:	000000fa 	strdeq	r0, [r0], -sl
     e70:	8082e880 	addhi	lr, r2, r0, lsl #17
     e74:	02c20a02 	sbceq	r0, r2, #8192	; 0x2000
     e78:	e8840000 	stm	r4, {}	; <UNPREDICTABLE>
     e7c:	0a028082 	beq	a108c <__bss_end__+0x9744c>
     e80:	000000e8 	andeq	r0, r0, r8, ror #1
     e84:	8082e888 	addhi	lr, r2, r8, lsl #17
     e88:	02d20a02 	sbcseq	r0, r2, #8192	; 0x2000
     e8c:	e88c0000 	stm	ip, {}	; <UNPREDICTABLE>
     e90:	0a028082 	beq	a10a0 <__bss_end__+0x97460>
     e94:	00000063 	andeq	r0, r0, r3, rrx
     e98:	8082e890 	umullhi	lr, r2, r0, r8
     e9c:	01290a02 	teqeq	r9, r2, lsl #20
     ea0:	e8940000 	ldm	r4, {}	; <UNPREDICTABLE>
     ea4:	0a028082 	beq	a10b4 <__bss_end__+0x97474>
     ea8:	000001c9 	andeq	r0, r0, r9, asr #3
     eac:	8082e898 	umullhi	lr, r2, r8, r8
     eb0:	02890a02 	addeq	r0, r9, #8192	; 0x2000
     eb4:	e89c0000 	ldm	ip, {}	; <UNPREDICTABLE>
     eb8:	0a028082 	beq	a10c8 <__bss_end__+0x97488>
     ebc:	00000327 	andeq	r0, r0, r7, lsr #6
     ec0:	8082e8a0 	addhi	lr, r2, r0, lsr #17
     ec4:	04090002 	streq	r0, [r9], #-2
     ec8:	01e11404 	mvneq	r1, r4, lsl #8
     ecc:	180a0000 	stmdane	sl, {}	; <UNPREDICTABLE>
     ed0:	80000001 	andhi	r0, r0, r1
     ed4:	028082e4 	addeq	r8, r0, #228, 4	; 0x4000000e
     ed8:	00029e0a 	andeq	r9, r2, sl, lsl #28
     edc:	82e48000 	rschi	r8, r4, #0
     ee0:	3d0a0280 	sfmcc	f0, 4, [sl, #-512]	; 0xfffffe00
     ee4:	84000001 	strhi	r0, [r0], #-1
     ee8:	028082e4 	addeq	r8, r0, #228, 4	; 0x4000000e
     eec:	00014b0a 	andeq	r4, r1, sl, lsl #22
     ef0:	82e48800 	rschi	r8, r4, #0, 16
     ef4:	040a0280 	streq	r0, [sl], #-640	; 0x280
     ef8:	8c000003 	stchi	0, cr0, [r0], {3}
     efc:	028082e4 	addeq	r8, r0, #228, 4	; 0x4000000e
     f00:	00018b0a 	andeq	r8, r1, sl, lsl #22
     f04:	82e49000 	rschi	r9, r4, #0
     f08:	990a0280 	stmdbls	sl, {r7, r9}
     f0c:	94000001 	strls	r0, [r0], #-1
     f10:	028082e4 	addeq	r8, r0, #228, 4	; 0x4000000e
     f14:	0002b00a 	andeq	fp, r2, sl
     f18:	82e49800 	rschi	r9, r4, #0, 16
     f1c:	9c0a0280 	sfmls	f0, 4, [sl], {128}	; 0x80
     f20:	9c000000 	stcls	0, cr0, [r0], {-0}
     f24:	028082e4 	addeq	r8, r0, #228, 4	; 0x4000000e
     f28:	0000ab0a 	andeq	sl, r0, sl, lsl #22
     f2c:	82e4a000 	rschi	sl, r4, #0
     f30:	590a0280 	stmdbpl	sl, {r7, r9}
     f34:	a4000001 	strge	r0, [r0], #-1
     f38:	028082e4 	addeq	r8, r0, #228, 4	; 0x4000000e
     f3c:	04160b00 	ldreq	r0, [r6], #-2816	; 0xb00
     f40:	3f010000 	svccc	0x00010000
     f44:	0000853c 	andeq	r8, r0, ip, lsr r5
     f48:	0000001c 	andeq	r0, r0, ip, lsl r0
     f4c:	02199c01 	andseq	r9, r9, #256	; 0x100
     f50:	8f0c0000 	svchi	0x000c0000
     f54:	29000003 	stmdbcs	r0, {r0, r1}
     f58:	05000002 	streq	r0, [r0, #-2]
     f5c:	0095d403 	addseq	sp, r5, r3, lsl #8
     f60:	854c0d00 	strbhi	r0, [ip, #-3328]	; 0xd00
     f64:	02bf0000 	adcseq	r0, pc, #0
     f68:	010e0000 	mrseq	r0, (UNDEF: 14)
     f6c:	04030550 	streq	r0, [r3], #-1360	; 0x550
     f70:	00000097 	muleq	r0, r7, r0
     f74:	007d0f00 	rsbseq	r0, sp, r0, lsl #30
     f78:	02290000 	eoreq	r0, r9, #0
     f7c:	76100000 	ldrvc	r0, [r0], -r0
     f80:	13000000 	movwne	r0, #0
     f84:	02190600 	andseq	r0, r9, #0, 12
     f88:	c8110000 	ldmdagt	r1, {}	; <UNPREDICTABLE>
     f8c:	01000000 	mrseq	r0, (UNDEF: 0)
     f90:	00855811 	addeq	r5, r5, r1, lsl r8
     f94:	00004000 	andeq	r4, r0, r0
     f98:	ae9c0100 	fmlgee	f0, f4, f0
     f9c:	12000002 	andne	r0, r0, #2
     fa0:	0000043f 	andeq	r0, r0, pc, lsr r4
     fa4:	002c1101 	eoreq	r1, ip, r1, lsl #2
     fa8:	01c40000 	biceq	r0, r4, r0
     fac:	64130000 	ldrvs	r0, [r3], #-0
     fb0:	e1000085 	smlabb	r0, r5, r0, r0
     fb4:	14000001 	strne	r0, [r0], #-1
     fb8:	00008570 	andeq	r8, r0, r0, ror r5
     fbc:	000002d5 	ldrdeq	r0, [r0], -r5
     fc0:	00000277 	andeq	r0, r0, r7, ror r2
     fc4:	0151010e 	cmpeq	r1, lr, lsl #2
     fc8:	50010e31 	andpl	r0, r1, r1, lsr lr
     fcc:	b2180c05 	andslt	r0, r8, #1280	; 0x500
     fd0:	14002000 	strne	r2, [r0], #-0
     fd4:	0000857c 	andeq	r8, r0, ip, ror r5
     fd8:	000002d5 	ldrdeq	r0, [r0], -r5
     fdc:	00000294 	muleq	r0, r4, r2
     fe0:	0251010e 	subseq	r0, r1, #-2147483645	; 0x80000003
     fe4:	010e0074 	tsteq	lr, r4, ror r0
     fe8:	000c0550 	andeq	r0, ip, r0, asr r5
     fec:	002000b4 	strhteq	r0, [r0], -r4
     ff0:	0085880d 	addeq	r8, r5, sp, lsl #16
     ff4:	0002d500 	andeq	sp, r2, r0, lsl #10
     ff8:	51010e00 	tstpl	r1, r0, lsl #28
     ffc:	0eaa0802 	cdpeq	8, 10, cr0, cr10, cr2, {0}
    1000:	0c055001 	stceq	0, cr5, [r5], {1}
    1004:	2000b408 	andcs	fp, r0, r8, lsl #8
    1008:	f4150000 			; <UNDEFINED> instruction: 0xf4150000
    100c:	02000002 	andeq	r0, r0, #2
    1010:	0000fd80 	andeq	pc, r0, r0, lsl #27
    1014:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
    1018:	1600009c 			; <UNDEFINED> instruction: 0x1600009c
    101c:	00000528 	andeq	r0, r0, r8, lsr #10
    1020:	00252705 	eoreq	r2, r5, r5, lsl #14
    1024:	02d50000 	sbcseq	r0, r5, #0
    1028:	84170000 	ldrhi	r0, [r7], #-0
    102c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1030:	03211900 	teqeq	r1, #0, 18
    1034:	94050000 	strls	r0, [r5], #-0
    1038:	00002c17 	andeq	r2, r0, r7, lsl ip
    103c:	002c1700 	eoreq	r1, ip, r0, lsl #14
    1040:	00000000 	andeq	r0, r0, r0
    1044:	00000191 	muleq	r0, r1, r1
    1048:	04620004 	strbteq	r0, [r2], #-4
    104c:	01040000 	mrseq	r0, (UNDEF: 4)
    1050:	00000232 	andeq	r0, r0, r2, lsr r2
    1054:	00051701 	andeq	r1, r5, r1, lsl #14
    1058:	00053900 	andeq	r3, r5, r0, lsl #18
    105c:	00859800 	addeq	r9, r5, r0, lsl #16
    1060:	00005800 	andeq	r5, r0, r0, lsl #16
    1064:	00030500 	andeq	r0, r3, r0, lsl #10
    1068:	05080200 	streq	r0, [r8, #-512]	; 0x200
    106c:	28020000 	stmdacs	r2, {}	; <UNPREDICTABLE>
    1070:	00000030 	andeq	r0, r0, r0, lsr r0
    1074:	00052f03 	andeq	r2, r5, r3, lsl #30
    1078:	00030400 	andeq	r0, r3, r0, lsl #8
    107c:	00000047 	andeq	r0, r0, r7, asr #32
    1080:	00058204 	andeq	r8, r5, r4, lsl #4
    1084:	00004700 	andeq	r4, r0, r0, lsl #14
    1088:	05000000 	streq	r0, [r0, #-0]
    108c:	05310204 	ldreq	r0, [r1, #-516]!	; 0x204
    1090:	62020000 	andvs	r0, r2, #0
    1094:	00000025 	andeq	r0, r0, r5, lsr #32
    1098:	69050406 	stmdbvs	r5, {r1, r2, sl}
    109c:	0700746e 	streq	r7, [r0, -lr, ror #8]
    10a0:	008f0704 	addeq	r0, pc, r4, lsl #14
    10a4:	01070000 	mrseq	r0, (UNDEF: 7)
    10a8:	00021c06 	andeq	r1, r2, r6, lsl #24
    10ac:	05020700 	streq	r0, [r2, #-1792]	; 0x700
    10b0:	00000228 	andeq	r0, r0, r8, lsr #4
    10b4:	bf050407 	svclt	0x00050407
    10b8:	07000000 	streq	r0, [r0, -r0]
    10bc:	00ba0508 	adcseq	r0, sl, r8, lsl #10
    10c0:	01070000 	mrseq	r0, (UNDEF: 7)
    10c4:	00021a08 	andeq	r1, r2, r8, lsl #20
    10c8:	07020700 	streq	r0, [r2, -r0, lsl #14]
    10cc:	0000016c 	andeq	r0, r0, ip, ror #2
    10d0:	8a070407 	bhi	1c20f4 <__bss_end__+0x1b84b4>
    10d4:	07000000 	streq	r0, [r0, -r0]
    10d8:	00850708 	addeq	r0, r5, r8, lsl #14
    10dc:	04070000 	streq	r0, [r7], #-0
    10e0:	0001b907 	andeq	fp, r1, r7, lsl #18
    10e4:	a7040800 	strge	r0, [r4, -r0, lsl #16]
    10e8:	07000000 	streq	r0, [r0, -r0]
    10ec:	02230801 	eoreq	r0, r3, #65536	; 0x10000
    10f0:	04080000 	streq	r0, [r8], #-0
    10f4:	000000b4 	strheq	r0, [r0], -r4
    10f8:	0000a709 	andeq	sl, r0, r9, lsl #14
    10fc:	05280a00 	streq	r0, [r8, #-2560]!	; 0xa00
    1100:	06010000 	streq	r0, [r1], -r0
    1104:	00000054 	andeq	r0, r0, r4, asr r0
    1108:	00008598 	muleq	r0, r8, r5
    110c:	00000058 	andeq	r0, r0, r8, asr r0
    1110:	01439c01 	cmpeq	r3, r1, lsl #24
    1114:	660b0000 	strvs	r0, [fp], -r0
    1118:	0100746d 	tsteq	r0, sp, ror #8
    111c:	0000ae06 	andeq	sl, r0, r6, lsl #28
    1120:	70910200 	addsvc	r0, r1, r0, lsl #4
    1124:	75620d0c 	strbvc	r0, [r2, #-3340]!	; 0xd0c
    1128:	08010066 	stmdaeq	r1, {r1, r2, r5, r6}
    112c:	00000143 	andeq	r0, r0, r3, asr #2
    1130:	983c0305 	ldmdals	ip!, {r0, r2, r8, r9}
    1134:	7d0e0000 	stcvc	0, cr0, [lr, #-0]
    1138:	01000005 	tsteq	r0, r5
    113c:	00004909 	andeq	r4, r0, r9, lsl #18
    1140:	5c910200 	lfmpl	f0, 4, [r1], {0}
    1144:	007a730f 	rsbseq	r7, sl, pc, lsl #6
    1148:	00540c01 	subseq	r0, r4, r1, lsl #24
    114c:	01e20000 	mvneq	r0, r0
    1150:	c0100000 	andsgt	r0, r0, r0
    1154:	74000085 	strvc	r0, [r0], #-133	; 0x85
    1158:	36000001 	strcc	r0, [r0], -r1
    115c:	11000001 	tstne	r0, r1
    1160:	91025301 	tstls	r2, r1, lsl #6
    1164:	5201114c 	andpl	r1, r1, #76, 2
    1168:	06489103 	strbeq	r9, [r8], -r3, lsl #2
    116c:	03510111 	cmpeq	r1, #1073741828	; 0x40000004
    1170:	1104000a 	tstne	r4, sl
    1174:	74025001 	strvc	r5, [r2], #-1
    1178:	d4120000 	ldrle	r0, [r2], #-0
    117c:	11000085 	smlabbne	r0, r5, r0, r0
    1180:	74025001 	strvc	r5, [r2], #-1
    1184:	13000000 	movwne	r0, #0
    1188:	000000a7 	andeq	r0, r0, r7, lsr #1
    118c:	00000154 	andeq	r0, r0, r4, asr r1
    1190:	00009a14 	andeq	r9, r0, r4, lsl sl
    1194:	0003ff00 	andeq	pc, r3, r0, lsl #30
    1198:	00005415 	andeq	r5, r0, r5, lsl r4
    119c:	00016300 	andeq	r6, r1, r0, lsl #6
    11a0:	00ae1600 	adceq	r1, lr, r0, lsl #12
    11a4:	17000000 	strne	r0, [r0, -r0]
    11a8:	0000059c 	muleq	r0, ip, r5
    11ac:	016e2004 	cmneq	lr, r4
    11b0:	04080000 	streq	r0, [r8], #-0
    11b4:	00000154 	andeq	r0, r0, r4, asr r1
    11b8:	00052518 	andeq	r2, r5, r8, lsl r5
    11bc:	54020500 	strpl	r0, [r2], #-1280	; 0x500
    11c0:	16000000 	strne	r0, [r0], -r0
    11c4:	000000a1 	andeq	r0, r0, r1, lsr #1
    11c8:	00005416 	andeq	r5, r0, r6, lsl r4
    11cc:	00ae1600 	adceq	r1, lr, r0, lsl #12
    11d0:	49160000 	ldmdbmi	r6, {}	; <UNPREDICTABLE>
    11d4:	00000000 	andeq	r0, r0, r0
    11d8:	0000ee00 	andeq	lr, r0, r0, lsl #28
    11dc:	93000400 	movwls	r0, #1024	; 0x400
    11e0:	04000005 	streq	r0, [r0], #-5
    11e4:	00023201 	andeq	r3, r2, r1, lsl #4
    11e8:	05870100 	streq	r0, [r7, #256]	; 0x100
    11ec:	05390000 	ldreq	r0, [r9, #-0]!
    11f0:	85f00000 	ldrbhi	r0, [r0, #0]!
    11f4:	00340000 	eorseq	r0, r4, r0
    11f8:	040b0000 	streq	r0, [fp], #-0
    11fc:	04020000 	streq	r0, [r2], #-0
    1200:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    1204:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1208:	0000008f 	andeq	r0, r0, pc, lsl #1
    120c:	1c060103 	stfnes	f0, [r6], {3}
    1210:	03000002 	movweq	r0, #2
    1214:	02280502 	eoreq	r0, r8, #8388608	; 0x800000
    1218:	04030000 	streq	r0, [r3], #-0
    121c:	0000bf05 	andeq	fp, r0, r5, lsl #30
    1220:	05080300 	streq	r0, [r8, #-768]	; 0x300
    1224:	000000ba 	strheq	r0, [r0], -sl
    1228:	1a080103 	bne	20163c <__bss_end__+0x1f79fc>
    122c:	03000002 	movweq	r0, #2
    1230:	016c0702 	cmneq	ip, r2, lsl #14
    1234:	04030000 	streq	r0, [r3], #-0
    1238:	00008a07 	andeq	r8, r0, r7, lsl #20
    123c:	07080300 	streq	r0, [r8, -r0, lsl #6]
    1240:	00000085 	andeq	r0, r0, r5, lsl #1
    1244:	b9070403 	stmdblt	r7, {r0, r1, sl}
    1248:	03000001 	movweq	r0, #1
    124c:	02230801 	eoreq	r0, r3, #65536	; 0x10000
    1250:	04040000 	streq	r0, [r4], #-0
    1254:	0000007f 	andeq	r0, r0, pc, ror r0
    1258:	00007205 	andeq	r7, r0, r5, lsl #4
    125c:	05930600 	ldreq	r0, [r3, #1536]	; 0x600
    1260:	04010000 	streq	r0, [r1], #-0
    1264:	00000025 	andeq	r0, r0, r5, lsr #32
    1268:	000085f0 	strdeq	r8, [r0], -r0
    126c:	00000034 	andeq	r0, r0, r4, lsr r0
    1270:	00ab9c01 	adceq	r9, fp, r1, lsl #24
    1274:	70070000 	andvc	r0, r7, r0
    1278:	79040100 	stmdbvc	r4, {r8}
    127c:	0b000000 	bleq	1284 <_start-0x6d7c>
    1280:	00000002 	andeq	r0, r0, r2
    1284:	00002508 	andeq	r2, r0, r8, lsl #10
    1288:	0000ba00 	andeq	fp, r0, r0, lsl #20
    128c:	00250900 	eoreq	r0, r5, r0, lsl #18
    1290:	0a000000 	beq	1298 <_start-0x6d68>
    1294:	000005a1 	andeq	r0, r0, r1, lsr #11
    1298:	00c51d02 	sbceq	r1, r5, r2, lsl #26
    129c:	04040000 	streq	r0, [r4], #-0
    12a0:	000000ab 	andeq	r0, r0, fp, lsr #1
    12a4:	00002508 	andeq	r2, r0, r8, lsl #10
    12a8:	0000da00 	andeq	sp, r0, r0, lsl #20
    12ac:	00790900 	rsbseq	r0, r9, r0, lsl #18
    12b0:	0b000000 	bleq	12b8 <_start-0x6d48>
    12b4:	0000059c 	muleq	r0, ip, r5
    12b8:	00eb0c01 	rsceq	r0, fp, r1, lsl #24
    12bc:	03050000 	movweq	r0, #20480	; 0x5000
    12c0:	000091f4 	strdeq	r9, [r0], -r4
    12c4:	00cb0404 	sbceq	r0, fp, r4, lsl #8
    12c8:	54000000 	strpl	r0, [r0], #-0
    12cc:	04000006 	streq	r0, [r0], #-6
    12d0:	00062c00 	andeq	r2, r6, r0, lsl #24
    12d4:	32010400 	andcc	r0, r1, #0, 8
    12d8:	01000002 	tsteq	r0, r2
    12dc:	000005d9 	ldrdeq	r0, [r0], -r9
    12e0:	00000539 	andeq	r0, r0, r9, lsr r5
    12e4:	00008624 	andeq	r8, r0, r4, lsr #12
    12e8:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    12ec:	000004a5 	andeq	r0, r0, r5, lsr #9
    12f0:	69050402 	stmdbvs	r5, {r1, sl}
    12f4:	0300746e 	movweq	r7, #1134	; 0x46e
    12f8:	008f0704 	addeq	r0, pc, r4, lsl #14
    12fc:	01030000 	mrseq	r0, (UNDEF: 3)
    1300:	00021c06 	andeq	r1, r2, r6, lsl #24
    1304:	05020300 	streq	r0, [r2, #-768]	; 0x300
    1308:	00000228 	andeq	r0, r0, r8, lsr #4
    130c:	bf050403 	svclt	0x00050403
    1310:	03000000 	movweq	r0, #0
    1314:	00ba0508 	adcseq	r0, sl, r8, lsl #10
    1318:	01030000 	mrseq	r0, (UNDEF: 3)
    131c:	00021a08 	andeq	r1, r2, r8, lsl #20
    1320:	07020300 	streq	r0, [r2, -r0, lsl #6]
    1324:	0000016c 	andeq	r0, r0, ip, ror #2
    1328:	8a070403 	bhi	1c233c <__bss_end__+0x1b86fc>
    132c:	03000000 	movweq	r0, #0
    1330:	00850708 	addeq	r0, r5, r8, lsl #14
    1334:	04030000 	streq	r0, [r3], #-0
    1338:	0001b907 	andeq	fp, r1, r7, lsl #18
    133c:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    1340:	00007a04 	andeq	r7, r0, r4, lsl #20
    1344:	08010300 	stmdaeq	r1, {r8, r9}
    1348:	00000223 	andeq	r0, r0, r3, lsr #4
    134c:	00870405 	addeq	r0, r7, r5, lsl #8
    1350:	7a060000 	bvc	181358 <__bss_end__+0x177718>
    1354:	07000000 	streq	r0, [r0, -r0]
    1358:	00000508 	andeq	r0, r0, r8, lsl #10
    135c:	00972802 	addseq	r2, r7, r2, lsl #16
    1360:	2f080000 	svccs	0x00080000
    1364:	04000005 	streq	r0, [r0], #-5
    1368:	00ae0004 	adceq	r0, lr, r4
    136c:	82090000 	andhi	r0, r9, #0
    1370:	72000005 	andvc	r0, r0, #5
    1374:	00000000 	andeq	r0, r0, r0
    1378:	05310700 	ldreq	r0, [r1, #-1792]!	; 0x700
    137c:	62020000 	andvs	r0, r2, #0
    1380:	0000008c 	andeq	r0, r0, ip, lsl #1
    1384:	0005bb0a 	andeq	fp, r5, sl, lsl #22
    1388:	25270100 	strcs	r0, [r7, #-256]!	; 0x100
    138c:	24000000 	strcs	r0, [r0], #-0
    1390:	14000086 	strne	r0, [r0], #-134	; 0x86
    1394:	01000000 	mrseq	r0, (UNDEF: 0)
    1398:	0000e09c 	muleq	r0, ip, r0
    139c:	00630b00 	rsbeq	r0, r3, r0, lsl #22
    13a0:	00252701 	eoreq	r2, r5, r1, lsl #14
    13a4:	02290000 	eoreq	r0, r9, #0
    13a8:	0c000000 	stceq	0, cr0, [r0], {-0}
    13ac:	00646170 	rsbeq	r6, r4, r0, ror r1
    13b0:	00742e01 	rsbseq	r2, r4, r1, lsl #28
    13b4:	86380000 	ldrthi	r0, [r8], -r0
    13b8:	002c0000 	eoreq	r0, ip, r0
    13bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    13c0:	00000130 	andeq	r0, r0, r0, lsr r1
    13c4:	0100700b 	tsteq	r0, fp
    13c8:	0000742e 	andeq	r7, r0, lr, lsr #8
    13cc:	00025700 	andeq	r5, r2, r0, lsl #14
    13d0:	05cb0d00 	strbeq	r0, [fp, #3328]	; 0xd00
    13d4:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    13d8:	00000074 	andeq	r0, r0, r4, ror r0
    13dc:	00000282 	andeq	r0, r0, r2, lsl #5
    13e0:	0005f90e 	andeq	pc, r5, lr, lsl #18
    13e4:	252e0100 	strcs	r0, [lr, #-256]!	; 0x100
    13e8:	01000000 	mrseq	r0, (UNDEF: 0)
    13ec:	656c0f52 	strbvs	r0, [ip, #-3922]!	; 0xf52
    13f0:	2f01006e 	svccs	0x0001006e
    13f4:	00000025 	andeq	r0, r0, r5, lsr #32
    13f8:	0a005101 	beq	15804 <__bss_end__+0xbbc4>
    13fc:	000005b3 			; <UNDEFINED> instruction: 0x000005b3
    1400:	00743701 	rsbseq	r3, r4, r1, lsl #14
    1404:	86640000 	strbthi	r0, [r4], -r0
    1408:	00400000 	subeq	r0, r0, r0
    140c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1410:	0000019c 	muleq	r0, ip, r1
    1414:	7473640b 	ldrbtvc	r6, [r3], #-1035	; 0x40b
    1418:	74370100 	ldrtvc	r0, [r7], #-256	; 0x100
    141c:	a3000000 	movwge	r0, #0
    1420:	0b000002 	bleq	1430 <_start-0x6bd0>
    1424:	3701006e 	strcc	r0, [r1, -lr, rrx]
    1428:	00000025 	andeq	r0, r0, r5, lsr #32
    142c:	000002db 	ldrdeq	r0, [r0], -fp
    1430:	0100700b 	tsteq	r0, fp
    1434:	00007437 	andeq	r7, r0, r7, lsr r4
    1438:	0002fc00 	andeq	pc, r2, r0, lsl #24
    143c:	06720d00 	ldrbteq	r0, [r2], -r0, lsl #26
    1440:	37010000 	strcc	r0, [r1, -r0]
    1444:	00000074 	andeq	r0, r0, r4, ror r0
    1448:	00000332 	andeq	r0, r0, r2, lsr r3
    144c:	6e656c10 	mcrvs	12, 3, r6, cr5, cr0, {0}
    1450:	25390100 	ldrcs	r0, [r9, #-256]!	; 0x100
    1454:	50000000 	andpl	r0, r0, r0
    1458:	0f000003 	svceq	0x00000003
    145c:	3d010073 	stccc	0, cr0, [r1, #-460]	; 0xfffffe34
    1460:	00000074 	andeq	r0, r0, r4, ror r0
    1464:	0a005001 	beq	15470 <__bss_end__+0xb830>
    1468:	00000607 	andeq	r0, r0, r7, lsl #12
    146c:	00744701 	rsbseq	r4, r4, r1, lsl #14
    1470:	86a40000 	strthi	r0, [r4], r0
    1474:	01980000 	orrseq	r0, r8, r0
    1478:	9c010000 	stcls	0, cr0, [r1], {-0}
    147c:	000002ca 	andeq	r0, r0, sl, asr #5
    1480:	0005cb0d 	andeq	ip, r5, sp, lsl #22
    1484:	2c470100 	stfcse	f0, [r7], {-0}
    1488:	77000000 	strvc	r0, [r0, -r0]
    148c:	0b000003 	bleq	14a0 <_start-0x6b60>
    1490:	00747364 	rsbseq	r7, r4, r4, ror #6
    1494:	00744701 	rsbseq	r4, r4, r1, lsl #14
    1498:	03a50000 			; <UNDEFINED> instruction: 0x03a50000
    149c:	6e0b0000 	cdpvs	0, 0, cr0, cr11, cr0, {0}
    14a0:	25470100 	strbcs	r0, [r7, #-256]	; 0x100
    14a4:	13000000 	movwne	r0, #0
    14a8:	0b000004 	bleq	14c0 <_start-0x6b40>
    14ac:	006c6176 	rsbeq	r6, ip, r6, ror r1
    14b0:	00254701 	eoreq	r4, r5, r1, lsl #14
    14b4:	043f0000 	ldrteq	r0, [pc], #-0	; 14bc <_start-0x6b44>
    14b8:	f90d0000 			; <UNDEFINED> instruction: 0xf90d0000
    14bc:	01000005 	tsteq	r0, r5
    14c0:	00002547 	andeq	r2, r0, r7, asr #10
    14c4:	0004c900 	andeq	ip, r4, r0, lsl #18
    14c8:	05d00e00 	ldrbeq	r0, [r0, #3584]	; 0xe00
    14cc:	47010000 	strmi	r0, [r1, -r0]
    14d0:	00000025 	andeq	r0, r0, r5, lsr #32
    14d4:	0f049102 	svceq	0x00049102
    14d8:	00667562 	rsbeq	r7, r6, r2, ror #10
    14dc:	02ca4c01 	sbceq	r4, sl, #256	; 0x100
    14e0:	91030000 	mrsls	r0, (UNDEF: 3)
    14e4:	70107fa8 	andsvc	r7, r0, r8, lsr #31
    14e8:	744c0100 	strbvc	r0, [ip], #-256	; 0x100
    14ec:	f3000000 	vhadd.u8	d0, d0, d0
    14f0:	10000004 	andne	r0, r0, r4
    14f4:	4d010075 	stcmi	0, cr0, [r1, #-468]	; 0xfffffe2c
    14f8:	0000002c 	andeq	r0, r0, ip, lsr #32
    14fc:	00000598 	muleq	r0, r8, r5
    1500:	00038f11 	andeq	r8, r3, r1, lsl pc
    1504:	0002ea00 	andeq	lr, r2, r0, lsl #20
    1508:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
    150c:	12000097 	andne	r0, r0, #151	; 0x97
    1510:	00008710 	andeq	r8, r0, r0, lsl r7
    1514:	00000074 	andeq	r0, r0, r4, ror r0
    1518:	00000261 	andeq	r0, r0, r1, ror #4
    151c:	0005ad13 	andeq	sl, r5, r3, lsl sp
    1520:	2c520100 	ldfcse	f0, [r2], {-0}
    1524:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    1528:	00000006 	andeq	r0, r0, r6
    152c:	0087f414 	addeq	pc, r7, r4, lsl r4	; <UNPREDICTABLE>
    1530:	00063a00 	andeq	r3, r6, r0, lsl #20
    1534:	00029000 	andeq	r9, r2, r0
    1538:	53011500 	movwpl	r1, #5376	; 0x1500
    153c:	15750802 	ldrbne	r0, [r5, #-2050]!	; 0x802
    1540:	03055201 	movweq	r5, #20993	; 0x5201
    1544:	0000971c 	andeq	r9, r0, ip, lsl r7
    1548:	05510115 	ldrbeq	r0, [r1, #-277]	; 0x115
    154c:	00975403 	addseq	r5, r7, r3, lsl #8
    1550:	50011500 	andpl	r1, r1, r0, lsl #10
    1554:	97400305 	strbls	r0, [r0, -r5, lsl #6]
    1558:	16000000 	strne	r0, [r0], -r0
    155c:	000087f8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    1560:	00000650 	andeq	r0, r0, r0, asr r6
    1564:	00880414 	addeq	r0, r8, r4, lsl r4
    1568:	0000e000 	andeq	lr, r0, r0
    156c:	0002ad00 	andeq	sl, r2, r0, lsl #26
    1570:	51011500 	tstpl	r1, r0, lsl #10
    1574:	00007d02 	andeq	r7, r0, r2, lsl #26
    1578:	00881817 	addeq	r1, r8, r7, lsl r8
    157c:	00013000 	andeq	r3, r1, r0
    1580:	53011500 	movwpl	r1, #5376	; 0x1500
    1584:	15007d02 	strne	r7, [r0, #-3330]	; 0xd02
    1588:	74025101 	strvc	r5, [r2], #-257	; 0x101
    158c:	50011500 	andpl	r1, r1, r0, lsl #10
    1590:	00007502 	andeq	r7, r0, r2, lsl #10
    1594:	007a1800 	rsbseq	r1, sl, r0, lsl #16
    1598:	02da0000 	sbcseq	r0, sl, #0
    159c:	6b190000 	blvs	6415a4 <__bss_end__+0x637964>
    15a0:	3f000000 	svccc	0x00000000
    15a4:	007a1800 	rsbseq	r1, sl, r0, lsl #16
    15a8:	02ea0000 	rsceq	r0, sl, #0
    15ac:	6b190000 	blvs	6415b4 <__bss_end__+0x637974>
    15b0:	04000000 	streq	r0, [r0], #-0
    15b4:	02da0600 	sbcseq	r0, sl, #0, 12
    15b8:	ea1a0000 	b	6815c0 <__bss_end__+0x677980>
    15bc:	01000005 	tsteq	r0, r5
    15c0:	00883c1f 	addeq	r3, r8, pc, lsl ip
    15c4:	00005000 	andeq	r5, r0, r0
    15c8:	6a9c0100 	bvs	fe7019d0 <__bss_end__+0xfe6f7d90>
    15cc:	0d000003 	stceq	0, cr0, [r0, #-12]
    15d0:	000005ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    15d4:	03791f01 	cmneq	r9, #1, 30
    15d8:	06d40000 	ldrbeq	r0, [r4], r0
    15dc:	c30d0000 	movwgt	r0, #53248	; 0xd000
    15e0:	01000005 	tsteq	r0, r5
    15e4:	00038e1f 	andeq	r8, r3, pc, lsl lr
    15e8:	00070000 	andeq	r0, r7, r0
    15ec:	038f1100 	orreq	r1, pc, #0, 2
    15f0:	03a40000 			; <UNDEFINED> instruction: 0x03a40000
    15f4:	03050000 	movweq	r0, #20480	; 0x5000
    15f8:	00009724 	andeq	r9, r0, r4, lsr #14
    15fc:	00885c14 	addeq	r5, r8, r4, lsl ip
    1600:	00063a00 	andeq	r3, r6, r0, lsl #20
    1604:	00036000 	andeq	r6, r3, r0
    1608:	53011500 	movwpl	r1, #5376	; 0x1500
    160c:	15200802 	strne	r0, [r0, #-2050]!	; 0x802
    1610:	03055201 	movweq	r5, #20993	; 0x5201
    1614:	00009724 	andeq	r9, r0, r4, lsr #14
    1618:	05510115 	ldrbeq	r0, [r1, #-277]	; 0x115
    161c:	00975403 	addseq	r5, r7, r3, lsl #8
    1620:	50011500 	andpl	r1, r1, r0, lsl #10
    1624:	978c0305 	strls	r0, [ip, r5, lsl #6]
    1628:	16000000 	strne	r0, [r0], -r0
    162c:	00008860 	andeq	r8, r0, r0, ror #16
    1630:	00000650 	andeq	r0, r0, r0, asr r6
    1634:	00251b00 	eoreq	r1, r5, r0, lsl #22
    1638:	03790000 	cmneq	r9, #0
    163c:	251c0000 	ldrcs	r0, [ip, #-0]
    1640:	00000000 	andeq	r0, r0, r0
    1644:	036a0405 	cmneq	sl, #83886080	; 0x5000000
    1648:	251b0000 	ldrcs	r0, [fp, #-0]
    164c:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    1650:	1c000003 	stcne	0, cr0, [r0], {3}
    1654:	00000081 	andeq	r0, r0, r1, lsl #1
    1658:	7f040500 	svcvc	0x00040500
    165c:	18000003 	stmdane	r0, {r0, r1}
    1660:	0000007a 	andeq	r0, r0, sl, ror r0
    1664:	000003a4 	andeq	r0, r0, r4, lsr #7
    1668:	00006b19 	andeq	r6, r0, r9, lsl fp
    166c:	06000e00 	streq	r0, [r0], -r0, lsl #28
    1670:	00000394 	muleq	r0, r4, r3
    1674:	0005251d 	andeq	r2, r5, sp, lsl r5
    1678:	257d0100 	ldrbcs	r0, [sp, #-256]!	; 0x100
    167c:	8c000000 	stchi	0, cr0, [r0], {-0}
    1680:	88000088 	stmdahi	r0, {r3, r7}
    1684:	01000002 	tsteq	r0, r2
    1688:	0005ff9c 	muleq	r5, ip, pc	; <UNPREDICTABLE>
    168c:	75620b00 	strbvc	r0, [r2, #-2816]!	; 0xb00
    1690:	7d010066 	stcvc	0, cr0, [r1, #-408]	; 0xfffffe68
    1694:	00000074 	andeq	r0, r0, r4, ror r0
    1698:	0000072c 	andeq	r0, r0, ip, lsr #14
    169c:	01006e0b 	tsteq	r0, fp, lsl #28
    16a0:	0000257d 	andeq	r2, r0, sp, ror r5
    16a4:	00075800 	andeq	r5, r7, r0, lsl #16
    16a8:	6d660b00 	vstmdbvs	r6!, {d16-d15}
    16ac:	7d010074 	stcvc	0, cr0, [r1, #-464]	; 0xfffffe30
    16b0:	00000081 	andeq	r0, r0, r1, lsl #1
    16b4:	00000786 	andeq	r0, r0, r6, lsl #15
    16b8:	00057d0d 	andeq	r7, r5, sp, lsl #26
    16bc:	ae7d0100 	rpwgee	f0, f5, f0
    16c0:	ba000000 	blt	16c8 <_start-0x6938>
    16c4:	10000007 	andne	r0, r0, r7
    16c8:	7e010070 	mcrvc	0, 0, r0, cr1, cr0, {3}
    16cc:	00000074 	andeq	r0, r0, r4, ror r0
    16d0:	000007cd 	andeq	r0, r0, sp, asr #15
    16d4:	01006510 	tsteq	r0, r0, lsl r5
    16d8:	0000747e 	andeq	r7, r0, lr, ror r4
    16dc:	00084b00 	andeq	r4, r8, r0, lsl #22
    16e0:	038f1100 	orreq	r1, pc, #0, 2
    16e4:	060f0000 	streq	r0, [pc], -r0
    16e8:	03050000 	movweq	r0, #20480	; 0x5000
    16ec:	00009734 	andeq	r9, r0, r4, lsr r7
    16f0:	0088e01e 	addeq	lr, r8, lr, lsl r0
    16f4:	0001f400 	andeq	pc, r1, r0, lsl #8
    16f8:	00731000 	rsbseq	r1, r3, r0
    16fc:	00748b01 	rsbseq	r8, r4, r1, lsl #22
    1700:	08720000 	ldmdaeq	r2!, {}^	; <UNPREDICTABLE>
    1704:	6e0f0000 	cdpvs	0, 0, cr0, cr15, cr0, {0}
    1708:	01006d75 	tsteq	r0, r5, ror sp
    170c:	0006148b 	andeq	r1, r6, fp, lsl #9
    1710:	d8910300 	ldmle	r1, {r8, r9}
    1714:	05f9137e 	ldrbeq	r1, [r9, #894]!	; 0x37e
    1718:	8c010000 	stchi	0, cr0, [r1], {-0}
    171c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1720:	000008c7 	andeq	r0, r0, r7, asr #17
    1724:	00891014 	addeq	r1, r9, r4, lsl r0
    1728:	0000b900 	andeq	fp, r0, r0, lsl #18
    172c:	00046d00 	andeq	r6, r4, r0, lsl #26
    1730:	50011500 	andpl	r1, r1, r0, lsl #10
    1734:	00007502 	andeq	r7, r0, r2, lsl #10
    1738:	00893414 	addeq	r3, r9, r4, lsl r4
    173c:	00063a00 	andeq	r3, r6, r0, lsl #20
    1740:	00049c00 	andeq	r9, r4, r0, lsl #24
    1744:	53011500 	movwpl	r1, #5376	; 0x1500
    1748:	15920802 	ldrne	r0, [r2, #2050]	; 0x802
    174c:	03055201 	movweq	r5, #20993	; 0x5201
    1750:	00009734 	andeq	r9, r0, r4, lsr r7
    1754:	05510115 	ldrbeq	r0, [r1, #-277]	; 0x115
    1758:	00975403 	addseq	r5, r7, r3, lsl #8
    175c:	50011500 	andpl	r1, r1, r0, lsl #10
    1760:	97a40305 	strls	r0, [r4, r5, lsl #6]!
    1764:	16000000 	strne	r0, [r0], -r0
    1768:	00008938 	andeq	r8, r0, r8, lsr r9
    176c:	00000650 	andeq	r0, r0, r0, asr r6
    1770:	0089b814 	addeq	fp, r9, r4, lsl r8
    1774:	00063a00 	andeq	r3, r6, r0, lsl #20
    1778:	0004d400 	andeq	sp, r4, r0, lsl #8
    177c:	53011500 	movwpl	r1, #5376	; 0x1500
    1780:	15980802 	ldrne	r0, [r8, #2050]	; 0x802
    1784:	03055201 	movweq	r5, #20993	; 0x5201
    1788:	00009734 	andeq	r9, r0, r4, lsr r7
    178c:	05510115 	ldrbeq	r0, [r1, #-277]	; 0x115
    1790:	00975403 	addseq	r5, r7, r3, lsl #8
    1794:	50011500 	andpl	r1, r1, r0, lsl #10
    1798:	97c00305 	strbls	r0, [r0, r5, lsl #6]
    179c:	16000000 	strne	r0, [r0], -r0
    17a0:	000089bc 			; <UNDEFINED> instruction: 0x000089bc
    17a4:	00000650 	andeq	r0, r0, r0, asr r6
    17a8:	0089e014 	addeq	lr, r9, r4, lsl r0
    17ac:	00019c00 	andeq	r9, r1, r0, lsl #24
    17b0:	00050a00 	andeq	r0, r5, r0, lsl #20
    17b4:	52011500 	andpl	r1, r1, #0, 10
    17b8:	15800802 	strne	r0, [r0, #2050]	; 0x802
    17bc:	91035101 	tstls	r3, r1, lsl #2
    17c0:	01157ed0 			; <UNDEFINED> instruction: 0x01157ed0
    17c4:	153a0150 	ldrne	r0, [sl, #-336]!	; 0x150
    17c8:	01047d02 	tsteq	r4, r2, lsl #26
    17cc:	7d021531 	cfstr32vc	mvfx1, [r2, #-196]	; 0xffffff3c
    17d0:	00770200 	rsbseq	r0, r7, r0, lsl #4
    17d4:	8a081400 	bhi	2067dc <__bss_end__+0x1fcb9c>
    17d8:	019c0000 	orrseq	r0, ip, r0
    17dc:	05370000 	ldreq	r0, [r7, #-0]!
    17e0:	01150000 	tsteq	r5, r0
    17e4:	80080252 	andhi	r0, r8, r2, asr r2
    17e8:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    17ec:	157ed091 	ldrbne	sp, [lr, #-145]!	; 0x91
    17f0:	3a015001 	bcc	557fc <__bss_end__+0x4bbbc>
    17f4:	047d0215 	ldrbteq	r0, [sp], #-533	; 0x215
    17f8:	02153001 	andseq	r3, r5, #1
    17fc:	7702007d 	smlsdxvc	r2, sp, r0, r0
    1800:	30140000 	andscc	r0, r4, r0
    1804:	9c00008a 	stcls	0, cr0, [r0], {138}	; 0x8a
    1808:	64000001 	strvs	r0, [r0], #-1
    180c:	15000005 	strne	r0, [r0, #-5]
    1810:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    1814:	51011580 	smlabbpl	r1, r0, r5, r1
    1818:	7ed09103 	atnvcs	f1, f3
    181c:	01500115 	cmpeq	r0, r5, lsl r1
    1820:	7d021540 	cfstr32vc	mvfx1, [r2, #-256]	; 0xffffff00
    1824:	15300104 	ldrne	r0, [r0, #-260]!	; 0x104
    1828:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    182c:	14000077 	strne	r0, [r0], #-119	; 0x77
    1830:	00008a58 	andeq	r8, r0, r8, asr sl
    1834:	0000019c 	muleq	r0, ip, r1
    1838:	00000591 	muleq	r0, r1, r5
    183c:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    1840:	01158008 	tsteq	r5, r8
    1844:	d0910351 	addsle	r0, r1, r1, asr r3
    1848:	5001157e 	andpl	r1, r1, lr, ror r5
    184c:	02153201 	andseq	r3, r5, #268435456	; 0x10000000
    1850:	3001047d 	andcc	r0, r1, sp, ror r4
    1854:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    1858:	00007702 	andeq	r7, r0, r2, lsl #14
    185c:	008a8c14 	addeq	r8, sl, r4, lsl ip
    1860:	00019c00 	andeq	r9, r1, r0, lsl #24
    1864:	0005be00 	andeq	fp, r5, r0, lsl #28
    1868:	52011500 	andpl	r1, r1, #0, 10
    186c:	15800802 	strne	r0, [r0, #2050]	; 0x802
    1870:	91035101 	tstls	r3, r1, lsl #2
    1874:	01157ed0 			; <UNDEFINED> instruction: 0x01157ed0
    1878:	15380150 	ldrne	r0, [r8, #-336]!	; 0x150
    187c:	01047d02 	tsteq	r4, r2, lsl #26
    1880:	7d021530 	cfstr32vc	mvfx1, [r2, #-192]	; 0xffffff40
    1884:	00770200 	rsbseq	r0, r7, r0, lsl #4
    1888:	8aa81400 	bhi	fea06890 <__bss_end__+0xfe9fcc50>
    188c:	063a0000 	ldrteq	r0, [sl], -r0
    1890:	05f40000 	ldrbeq	r0, [r4, #0]!
    1894:	01150000 	tsteq	r5, r0
    1898:	b9080253 	stmdblt	r8, {r0, r1, r4, r6, r9}
    189c:	05520115 	ldrbeq	r0, [r2, #-277]	; 0x115
    18a0:	00973403 	addseq	r3, r7, r3, lsl #8
    18a4:	51011500 	tstpl	r1, r0, lsl #10
    18a8:	97540305 	ldrbls	r0, [r4, -r5, lsl #6]
    18ac:	01150000 	tsteq	r5, r0
    18b0:	e8030550 	stmda	r3, {r4, r6, r8, sl}
    18b4:	15000097 	strne	r0, [r0, #-151]	; 0x97
    18b8:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    18bc:	16000079 			; <UNDEFINED> instruction: 0x16000079
    18c0:	00008aac 	andeq	r8, r0, ip, lsr #21
    18c4:	00000650 	andeq	r0, r0, r0, asr r6
    18c8:	7a180000 	bvc	6018d0 <__bss_end__+0x5f7c90>
    18cc:	0f000000 	svceq	0x00000000
    18d0:	19000006 	stmdbne	r0, {r1, r2}
    18d4:	0000006b 	andeq	r0, r0, fp, rrx
    18d8:	ff060009 			; <UNDEFINED> instruction: 0xff060009
    18dc:	18000005 	stmdane	r0, {r0, r2}
    18e0:	0000007a 	andeq	r0, r0, sl, ror r0
    18e4:	00000624 	andeq	r0, r0, r4, lsr #12
    18e8:	00006b19 	andeq	r6, r0, r9, lsl fp
    18ec:	1f007f00 	svcne	0x00007f00
    18f0:	000005a1 	andeq	r0, r0, r1, lsr #11
    18f4:	03791d03 	cmneq	r9, #3, 26	; 0xc0
    18f8:	9c1f0000 	ldcls	0, cr0, [pc], {-0}
    18fc:	03000005 	movweq	r0, #5
    1900:	00038e20 	andeq	r8, r3, r0, lsr #28
    1904:	05282000 	streq	r2, [r8, #-0]!
    1908:	27030000 	strcs	r0, [r3, -r0]
    190c:	00000025 	andeq	r0, r0, r5, lsr #32
    1910:	00000650 	andeq	r0, r0, r0, asr r6
    1914:	0000811c 	andeq	r8, r0, ip, lsl r1
    1918:	22002100 	andcs	r2, r0, #0, 2
    191c:	000001ac 	andeq	r0, r0, ip, lsr #3
    1920:	ff006303 			; <UNDEFINED> instruction: 0xff006303
    1924:	04000000 	streq	r0, [r0], #-0
    1928:	00080a00 	andeq	r0, r8, r0, lsl #20
    192c:	32010400 	andcc	r0, r1, #0, 8
    1930:	01000002 	tsteq	r0, r2
    1934:	00000617 	andeq	r0, r0, r7, lsl r6
    1938:	00000539 	andeq	r0, r0, r9, lsr r5
    193c:	00008b14 	andeq	r8, r0, r4, lsl fp
    1940:	00000028 	andeq	r0, r0, r8, lsr #32
    1944:	00000685 	andeq	r0, r0, r5, lsl #13
    1948:	69050402 	stmdbvs	r5, {r1, sl}
    194c:	0300746e 	movweq	r7, #1134	; 0x46e
    1950:	008f0704 	addeq	r0, pc, r4, lsl #14
    1954:	01030000 	mrseq	r0, (UNDEF: 3)
    1958:	00021c06 	andeq	r1, r2, r6, lsl #24
    195c:	05020300 	streq	r0, [r2, #-768]	; 0x300
    1960:	00000228 	andeq	r0, r0, r8, lsr #4
    1964:	bf050403 	svclt	0x00050403
    1968:	03000000 	movweq	r0, #0
    196c:	00ba0508 	adcseq	r0, sl, r8, lsl #10
    1970:	01030000 	mrseq	r0, (UNDEF: 3)
    1974:	00021a08 	andeq	r1, r2, r8, lsl #20
    1978:	07020300 	streq	r0, [r2, -r0, lsl #6]
    197c:	0000016c 	andeq	r0, r0, ip, ror #2
    1980:	8a070403 	bhi	1c2994 <__bss_end__+0x1b8d54>
    1984:	03000000 	movweq	r0, #0
    1988:	00850708 	addeq	r0, r5, r8, lsl #14
    198c:	04030000 	streq	r0, [r3], #-0
    1990:	0001b907 	andeq	fp, r1, r7, lsl #18
    1994:	08010300 	stmdaeq	r1, {r8, r9}
    1998:	00000223 	andeq	r0, r0, r3, lsr #4
    199c:	007f0404 	rsbseq	r0, pc, r4, lsl #8
    19a0:	72050000 	andvc	r0, r5, #0
    19a4:	06000000 	streq	r0, [r0], -r0
    19a8:	000001ac 	andeq	r0, r0, ip, lsr #3
    19ac:	8b140401 	blhi	5029b8 <__bss_end__+0x4f8d78>
    19b0:	00280000 	eoreq	r0, r8, r0
    19b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    19b8:	000000ca 	andeq	r0, r0, sl, asr #1
    19bc:	008b2807 	addeq	r2, fp, r7, lsl #16
    19c0:	0000ac00 	andeq	sl, r0, r0, lsl #24
    19c4:	50010800 	andpl	r0, r1, r0, lsl #16
    19c8:	98200305 	stmdals	r0!, {r0, r2, r8, r9}
    19cc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    19d0:	00008b30 	andeq	r8, r0, r0, lsr fp
    19d4:	000000ea 	andeq	r0, r0, sl, ror #1
    19d8:	000000c0 	andeq	r0, r0, r0, asr #1
    19dc:	02500108 	subseq	r0, r0, #8, 2
    19e0:	0a006408 	beq	1aa08 <__bss_end__+0x10dc8>
    19e4:	00008b34 	andeq	r8, r0, r4, lsr fp
    19e8:	000000fb 	strdeq	r0, [r0], -fp
    19ec:	00250b00 	eoreq	r0, r5, r0, lsl #22
    19f0:	00d90000 	sbcseq	r0, r9, r0
    19f4:	790c0000 	stmdbvc	ip, {}	; <UNPREDICTABLE>
    19f8:	00000000 	andeq	r0, r0, r0
    19fc:	00059c0d 	andeq	r9, r5, sp, lsl #24
    1a00:	e4200200 	strt	r0, [r0], #-512	; 0x200
    1a04:	04000000 	streq	r0, [r0], #-0
    1a08:	0000ca04 	andeq	ip, r0, r4, lsl #20
    1a0c:	06310e00 	ldrteq	r0, [r1], -r0, lsl #28
    1a10:	4d020000 	stcmi	0, cr0, [r2, #-0]
    1a14:	000000fb 	strdeq	r0, [r0], -fp
    1a18:	00002c0c 	andeq	r2, r0, ip, lsl #24
    1a1c:	0c0f0000 	stceq	0, cr0, [pc], {-0}
    1a20:	02000006 	andeq	r0, r0, #6
    1a24:	010b0060 	tsteq	fp, r0, rrx
    1a28:	00040000 	andeq	r0, r4, r0
    1a2c:	000008d4 	ldrdeq	r0, [r0], -r4
    1a30:	02320104 	eorseq	r0, r2, #4, 2
    1a34:	3a010000 	bcc	41a3c <__bss_end__+0x37dfc>
    1a38:	39000006 	stmdbcc	r0, {r1, r2}
    1a3c:	3c000005 	stccc	0, cr0, [r0], {5}
    1a40:	3400008b 	strcc	r0, [r0], #-139	; 0x8b
    1a44:	1c000000 	stcne	0, cr0, [r0], {-0}
    1a48:	02000007 	andeq	r0, r0, #7
    1a4c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1a50:	04030074 	streq	r0, [r3], #-116	; 0x74
    1a54:	00008f07 	andeq	r8, r0, r7, lsl #30
    1a58:	06010300 	streq	r0, [r1], -r0, lsl #6
    1a5c:	0000021c 	andeq	r0, r0, ip, lsl r2
    1a60:	28050203 	stmdacs	r5, {r0, r1, r9}
    1a64:	03000002 	movweq	r0, #2
    1a68:	00bf0504 	adcseq	r0, pc, r4, lsl #10
    1a6c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1a70:	0000ba05 	andeq	fp, r0, r5, lsl #20
    1a74:	08010300 	stmdaeq	r1, {r8, r9}
    1a78:	0000021a 	andeq	r0, r0, sl, lsl r2
    1a7c:	6c070203 	sfmvs	f0, 4, [r7], {3}
    1a80:	03000001 	movweq	r0, #1
    1a84:	008a0704 	addeq	r0, sl, r4, lsl #14
    1a88:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1a8c:	00008507 	andeq	r8, r0, r7, lsl #10
    1a90:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1a94:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
    1a98:	23080103 	movwcs	r0, #33027	; 0x8103
    1a9c:	04000002 	streq	r0, [r0], #-2
    1aa0:	00000670 	andeq	r0, r0, r0, ror r6
    1aa4:	8b3c0301 	blhi	f026b0 <__bss_end__+0xef8a70>
    1aa8:	00340000 	eorseq	r0, r4, r0
    1aac:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ab0:	000000de 	ldrdeq	r0, [r0], -lr
    1ab4:	00064e05 	andeq	r4, r6, r5, lsl #28
    1ab8:	25040100 	strcs	r0, [r4, #-256]	; 0x100
    1abc:	05000000 	streq	r0, [r0, #-0]
    1ac0:	0000065c 	andeq	r0, r0, ip, asr r6
    1ac4:	00250401 	eoreq	r0, r5, r1, lsl #8
    1ac8:	21060000 	mrscs	r0, (UNDEF: 6)
    1acc:	01000001 	tsteq	r0, r1
    1ad0:	0000b105 	andeq	fp, r0, r5, lsl #2
    1ad4:	08000700 	stmdaeq	r0, {r8, r9, sl}
    1ad8:	00737362 	rsbseq	r7, r3, r2, ror #6
    1adc:	00de0701 	sbcseq	r0, lr, r1, lsl #14
    1ae0:	08f10000 	ldmeq	r1!, {}^	; <UNPREDICTABLE>
    1ae4:	68090000 	stmdavs	r9, {}	; <UNPREDICTABLE>
    1ae8:	01000006 	tsteq	r0, r6
    1aec:	0000de08 	andeq	sp, r0, r8, lsl #28
    1af0:	8b640a00 	blhi	19042f8 <__bss_end__+0x18fa6b8>
    1af4:	00fa0000 	rscseq	r0, sl, r0
    1af8:	680a0000 	stmdavs	sl, {}	; <UNPREDICTABLE>
    1afc:	0700008b 	streq	r0, [r0, -fp, lsl #1]
    1b00:	00000001 	andeq	r0, r0, r1
    1b04:	0025040b 	eoreq	r0, r5, fp, lsl #8
    1b08:	4e050000 	cdpmi	0, 0, cr0, cr5, cr0, {0}
    1b0c:	01000006 	tsteq	r0, r6
    1b10:	00002504 	andeq	r2, r0, r4, lsl #10
    1b14:	065c0500 	ldrbeq	r0, [ip], -r0, lsl #10
    1b18:	04010000 	streq	r0, [r1], #-0
    1b1c:	00000025 	andeq	r0, r0, r5, lsr #32
    1b20:	00012106 	andeq	r2, r1, r6, lsl #2
    1b24:	07050100 	streq	r0, [r5, -r0, lsl #2]
    1b28:	07000001 	streq	r0, [r0, -r1]
    1b2c:	060c0c00 	streq	r0, [ip], -r0, lsl #24
    1b30:	60020000 	andvs	r0, r2, r0
    1b34:	0001ad00 	andeq	sl, r1, r0, lsl #26
    1b38:	7e000400 	cfcpysvc	mvf0, mvf0
    1b3c:	04000009 	streq	r0, [r0], #-9
    1b40:	00023201 	andeq	r3, r2, r1, lsl #4
    1b44:	06920100 	ldreq	r0, [r2], r0, lsl #2
    1b48:	05390000 	ldreq	r0, [r9, #-0]!
	...
    1b54:	07b60000 	ldreq	r0, [r6, r0]!
    1b58:	04020000 	streq	r0, [r2], #-0
    1b5c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    1b60:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1b64:	0000008f 	andeq	r0, r0, pc, lsl #1
    1b68:	1c060103 	stfnes	f0, [r6], {3}
    1b6c:	03000002 	movweq	r0, #2
    1b70:	02280502 	eoreq	r0, r8, #8388608	; 0x800000
    1b74:	04030000 	streq	r0, [r3], #-0
    1b78:	0000bf05 	andeq	fp, r0, r5, lsl #30
    1b7c:	05080300 	streq	r0, [r8, #-768]	; 0x300
    1b80:	000000ba 	strheq	r0, [r0], -sl
    1b84:	1a080103 	bne	201f98 <__bss_end__+0x1f8358>
    1b88:	03000002 	movweq	r0, #2
    1b8c:	016c0702 	cmneq	ip, r2, lsl #14
    1b90:	04030000 	streq	r0, [r3], #-0
    1b94:	00008a07 	andeq	r8, r0, r7, lsl #20
    1b98:	07080300 	streq	r0, [r8, -r0, lsl #6]
    1b9c:	00000085 	andeq	r0, r0, r5, lsl #1
    1ba0:	b9070403 	stmdblt	r7, {r0, r1, sl}
    1ba4:	03000001 	movweq	r0, #1
    1ba8:	02230801 	eoreq	r0, r3, #65536	; 0x10000
    1bac:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
    1bb0:	01000006 	tsteq	r0, r6
    1bb4:	0000250e 	andeq	r2, r0, lr, lsl #10
    1bb8:	008b7000 	addeq	r7, fp, r0
    1bbc:	00001800 	andeq	r1, r0, r0, lsl #16
    1bc0:	a29c0100 	addsge	r0, ip, #0, 2
    1bc4:	05000000 	streq	r0, [r0, #-0]
    1bc8:	000006de 	ldrdeq	r0, [r0], -lr
    1bcc:	002c0f01 	eoreq	r0, ip, r1, lsl #30
    1bd0:	09110000 	ldmdbeq	r1, {}	; <UNPREDICTABLE>
    1bd4:	06000000 	streq	r0, [r0], -r0
    1bd8:	000006c7 	andeq	r0, r0, r7, asr #13
    1bdc:	8b881701 	blhi	fe2077e8 <__bss_end__+0xfe1fdba8>
    1be0:	00140000 	andseq	r0, r4, r0
    1be4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1be8:	000000c7 	andeq	r0, r0, r7, asr #1
    1bec:	0006de05 	andeq	sp, r6, r5, lsl #28
    1bf0:	2c180100 	ldfcss	f0, [r8], {-0}
    1bf4:	30000000 	andcc	r0, r0, r0
    1bf8:	00000009 	andeq	r0, r0, r9
    1bfc:	00060c06 	andeq	r0, r6, r6, lsl #24
    1c00:	9c1f0100 	ldflss	f0, [pc], {-0}
    1c04:	4800008b 	stmdami	r0, {r0, r1, r3, r7}
    1c08:	01000000 	mrseq	r0, (UNDEF: 0)
    1c0c:	0001779c 	muleq	r1, ip, r7
    1c10:	06d60700 	ldrbeq	r0, [r6], r0, lsl #14
    1c14:	2a010000 	bcs	41c1c <__bss_end__+0x37fdc>
    1c18:	00000177 	andeq	r0, r0, r7, ror r1
    1c1c:	2010001c 	andscs	r0, r0, ip, lsl r0
    1c20:	0006bf07 	andeq	fp, r6, r7, lsl #30
    1c24:	772b0100 	strvc	r0, [fp, -r0, lsl #2]!
    1c28:	24000001 	strcs	r0, [r0], #-1
    1c2c:	07201000 	streq	r1, [r0, -r0]!
    1c30:	00000686 	andeq	r0, r0, r6, lsl #13
    1c34:	01772c01 	cmneq	r7, r1, lsl #24
    1c38:	00000000 	andeq	r0, r0, r0
    1c3c:	a6085a00 	strge	r5, [r8], -r0, lsl #20
    1c40:	01000006 	tsteq	r0, r6
    1c44:	0001772d 	andeq	r7, r1, sp, lsr #14
    1c48:	a4092000 	strge	r2, [r9], #-0
    1c4c:	7900008b 	stmdbvc	r0, {r0, r1, r3, r7}
    1c50:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1c54:	00008bb0 			; <UNDEFINED> instruction: 0x00008bb0
    1c58:	000000a2 	andeq	r0, r0, r2, lsr #1
    1c5c:	008bb80a 	addeq	fp, fp, sl, lsl #16
    1c60:	00018d00 	andeq	r8, r1, r0, lsl #26
    1c64:	00013a00 	andeq	r3, r1, r0, lsl #20
    1c68:	50010b00 	andpl	r0, r1, r0, lsl #22
    1c6c:	0a004e01 	beq	15478 <__bss_end__+0xb838>
    1c70:	00008bc4 	andeq	r8, r0, r4, asr #23
    1c74:	0000019e 	muleq	r0, lr, r1
    1c78:	0000015a 	andeq	r0, r0, sl, asr r1
    1c7c:	0551010b 	ldrbeq	r0, [r1, #-267]	; 0x10b
    1c80:	0000010c 	andeq	r0, r0, ip, lsl #2
    1c84:	50010b5a 	andpl	r0, r1, sl, asr fp
    1c88:	00240c05 	eoreq	r0, r4, r5, lsl #24
    1c8c:	0c002010 	stceq	0, cr2, [r0], {16}
    1c90:	00008bd0 	ldrdeq	r8, [r0], -r0
    1c94:	0000019e 	muleq	r0, lr, r1
    1c98:	0551010b 	ldrbeq	r0, [r1, #-267]	; 0x10b
    1c9c:	0000200c 	andeq	r2, r0, ip
    1ca0:	50010b5a 	andpl	r0, r1, sl, asr fp
    1ca4:	001c0c05 	andseq	r0, ip, r5, lsl #24
    1ca8:	00002010 	andeq	r2, r0, r0, lsl r0
    1cac:	0000250d 	andeq	r2, r0, sp, lsl #10
    1cb0:	067b0800 	ldrbteq	r0, [fp], -r0, lsl #16
    1cb4:	0d010000 	stceq	0, cr0, [r1, #-0]
    1cb8:	00000188 	andeq	r0, r0, r8, lsl #3
    1cbc:	002c0d10 	eoreq	r0, ip, r0, lsl sp
    1cc0:	310e0000 	mrscc	r0, (UNDEF: 14)
    1cc4:	02000006 	andeq	r0, r0, #6
    1cc8:	00019e4d 	andeq	r9, r1, sp, asr #28
    1ccc:	002c0f00 	eoreq	r0, ip, r0, lsl #30
    1cd0:	10000000 	andne	r0, r0, r0
    1cd4:	00000321 	andeq	r0, r0, r1, lsr #6
    1cd8:	2c0f9402 	cfstrscs	mvf9, [pc], {2}
    1cdc:	0f000000 	svceq	0x00000000
    1ce0:	0000002c 	andeq	r0, r0, ip, lsr #32
    1ce4:	01f70000 	mvnseq	r0, r0
    1ce8:	00040000 	andeq	r0, r4, r0
    1cec:	00000a6c 	andeq	r0, r0, ip, ror #20
    1cf0:	02320104 	eorseq	r0, r2, #4, 2
    1cf4:	ed010000 	stc	0, cr0, [r1, #-0]
    1cf8:	39000006 	stmdbcc	r0, {r1, r2}
    1cfc:	e4000005 	str	r0, [r0], #-5
    1d00:	9800008b 	stmdals	r0, {r0, r1, r3, r7}
    1d04:	53000000 	movwpl	r0, #0
    1d08:	02000008 	andeq	r0, r0, #8
    1d0c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1d10:	04030074 	streq	r0, [r3], #-116	; 0x74
    1d14:	00008f07 	andeq	r8, r0, r7, lsl #30
    1d18:	06010300 	streq	r0, [r1], -r0, lsl #6
    1d1c:	0000021c 	andeq	r0, r0, ip, lsl r2
    1d20:	28050203 	stmdacs	r5, {r0, r1, r9}
    1d24:	03000002 	movweq	r0, #2
    1d28:	00bf0504 	adcseq	r0, pc, r4, lsl #10
    1d2c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1d30:	0000ba05 	andeq	fp, r0, r5, lsl #20
    1d34:	08010300 	stmdaeq	r1, {r8, r9}
    1d38:	0000021a 	andeq	r0, r0, sl, lsl r2
    1d3c:	6c070203 	sfmvs	f0, 4, [r7], {3}
    1d40:	03000001 	movweq	r0, #1
    1d44:	008a0704 	addeq	r0, sl, r4, lsl #14
    1d48:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1d4c:	00008507 	andeq	r8, r0, r7, lsl #10
    1d50:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1d54:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
    1d58:	23080103 	movwcs	r0, #33027	; 0x8103
    1d5c:	04000002 	streq	r0, [r0], #-2
    1d60:	00000706 	andeq	r0, r0, r6, lsl #14
    1d64:	8be40501 	blhi	ff903170 <__bss_end__+0xff8f9530>
    1d68:	001c0000 	andseq	r0, ip, r0
    1d6c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d70:	0000009e 	muleq	r0, lr, r0
    1d74:	00070005 	andeq	r0, r7, r5
    1d78:	2c050100 	stfcss	f0, [r5], {-0}
    1d7c:	5a000000 	bpl	1d84 <_start-0x627c>
    1d80:	00000009 	andeq	r0, r0, r9
    1d84:	0001ee06 	andeq	lr, r1, r6, lsl #28
    1d88:	2c0b0100 	stfcss	f0, [fp], {-0}
    1d8c:	00000000 	andeq	r0, r0, r0
    1d90:	1400008c 	strne	r0, [r0], #-140	; 0x8c
    1d94:	01000000 	mrseq	r0, (UNDEF: 0)
    1d98:	0000cb9c 	muleq	r0, ip, fp
    1d9c:	8c0c0700 	stchi	7, cr0, [ip], {-0}
    1da0:	01de0000 	bicseq	r0, lr, r0
    1da4:	01080000 	mrseq	r0, (UNDEF: 8)
    1da8:	040c0550 	streq	r0, [ip], #-1360	; 0x550
    1dac:	00200030 	eoreq	r0, r0, r0, lsr r0
    1db0:	02e50600 	rsceq	r0, r5, #0, 12
    1db4:	10010000 	andne	r0, r1, r0
    1db8:	0000002c 	andeq	r0, r0, ip, lsr #32
    1dbc:	00008c14 	andeq	r8, r0, r4, lsl ip
    1dc0:	0000001c 	andeq	r0, r0, ip, lsl r0
    1dc4:	010d9c01 	tsteq	sp, r1, lsl #24
    1dc8:	75090000 	strvc	r0, [r9, #-0]
    1dcc:	2c120100 	ldfcss	f0, [r2], {-0}
    1dd0:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    1dd4:	0a000009 	beq	1e00 <_start-0x6200>
    1dd8:	00008c1c 	andeq	r8, r0, ip, lsl ip
    1ddc:	000001f3 	strdeq	r0, [r0], -r3
    1de0:	008c200a 	addeq	r2, ip, sl
    1de4:	00009e00 	andeq	r9, r0, r0, lsl #28
    1de8:	8c280a00 	stchi	10, cr0, [r8], #-0
    1dec:	01f30000 	mvnseq	r0, r0
    1df0:	04000000 	streq	r0, [r0], #-0
    1df4:	00000713 	andeq	r0, r0, r3, lsl r7
    1df8:	8c301701 	ldchi	7, cr1, [r0], #-4
    1dfc:	00240000 	eoreq	r0, r4, r0
    1e00:	9c010000 	stcls	0, cr0, [r1], {-0}
    1e04:	0000016b 	andeq	r0, r0, fp, ror #2
    1e08:	0073750b 	rsbseq	r7, r3, fp, lsl #10
    1e0c:	002c1701 	eoreq	r1, ip, r1, lsl #14
    1e10:	09ac0000 	stmibeq	ip!, {}	; <UNPREDICTABLE>
    1e14:	720c0000 	andvc	r0, ip, #0
    1e18:	18010062 	stmdane	r1, {r1, r5, r6}
    1e1c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1e20:	400d5401 	andmi	r5, sp, r1, lsl #8
    1e24:	1000008c 	andne	r0, r0, ip, lsl #1
    1e28:	61000000 	mrsvs	r0, (UNDEF: 0)
    1e2c:	09000001 	stmdbeq	r0, {r0}
    1e30:	01006172 	tsteq	r0, r2, ror r1
    1e34:	00002c1a 	andeq	r2, r0, sl, lsl ip
    1e38:	0009ca00 	andeq	ip, r9, r0, lsl #20
    1e3c:	8c440a00 	mcrrhi	10, 0, r0, r4, cr0
    1e40:	00cb0000 	sbceq	r0, fp, r0
    1e44:	0a000000 	beq	1e4c <_start-0x61b4>
    1e48:	00008c3c 	andeq	r8, r0, ip, lsr ip
    1e4c:	000000cb 	andeq	r0, r0, fp, asr #1
    1e50:	06310400 	ldrteq	r0, [r1], -r0, lsl #8
    1e54:	20010000 	andcs	r0, r1, r0
    1e58:	00008c54 	andeq	r8, r0, r4, asr ip
    1e5c:	00000014 	andeq	r0, r0, r4, lsl r0
    1e60:	01a49c01 			; <UNDEFINED> instruction: 0x01a49c01
    1e64:	6d0b0000 	stcvs	0, cr0, [fp, #-0]
    1e68:	20010073 	andcs	r0, r1, r3, ror r0
    1e6c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1e70:	000009dd 	ldrdeq	r0, [r0], -sp
    1e74:	008c6407 	addeq	r6, ip, r7, lsl #8
    1e78:	00010d00 	andeq	r0, r1, r0, lsl #26
    1e7c:	50010800 	andpl	r0, r1, r0, lsl #16
    1e80:	5001f307 	andpl	pc, r1, r7, lsl #6
    1e84:	1e03e80a 	cdpne	8, 0, cr14, cr3, cr10, {0}
    1e88:	e3040000 	movw	r0, #16384	; 0x4000
    1e8c:	01000006 	tsteq	r0, r6
    1e90:	008c6823 	addeq	r6, ip, r3, lsr #16
    1e94:	00001400 	andeq	r1, r0, r0, lsl #8
    1e98:	de9c0100 	fmllee	f0, f4, f0
    1e9c:	0b000001 	bleq	1ea8 <_start-0x6158>
    1ea0:	00636573 	rsbeq	r6, r3, r3, ror r5
    1ea4:	002c2301 	eoreq	r2, ip, r1, lsl #6
    1ea8:	09fe0000 	ldmibeq	lr!, {}^	; <UNPREDICTABLE>
    1eac:	78070000 	stmdavc	r7, {}	; <UNPREDICTABLE>
    1eb0:	6b00008c 	blvs	20e8 <_start-0x5f18>
    1eb4:	08000001 	stmdaeq	r0, {r0}
    1eb8:	f3075001 	vhadd.u8	d5, d7, d1
    1ebc:	e80a5001 	stmda	sl, {r0, ip, lr}
    1ec0:	00001e03 	andeq	r1, r0, r3, lsl #28
    1ec4:	0001da0e 	andeq	sp, r1, lr, lsl #20
    1ec8:	2ca00200 	sfmcs	f0, 4, [r0]
    1ecc:	f3000000 	vhadd.u8	d0, d0, d0
    1ed0:	0f000001 	svceq	0x00000001
    1ed4:	0000002c 	andeq	r0, r0, ip, lsr #32
    1ed8:	017f1000 	cmneq	pc, r0
    1edc:	84020000 	strhi	r0, [r2], #-0
    1ee0:	0003ff00 	andeq	pc, r3, r0, lsl #30
    1ee4:	62000400 	andvs	r0, r0, #0, 8
    1ee8:	0400000b 	streq	r0, [r0], #-11
    1eec:	00023201 	andeq	r3, r2, r1, lsl #4
    1ef0:	07940100 	ldreq	r0, [r4, r0, lsl #2]
    1ef4:	05390000 	ldreq	r0, [r9, #-0]!
    1ef8:	8ce00000 	stclhi	0, cr0, [r0]
    1efc:	01540000 	cmpeq	r4, r0
    1f00:	08fc0000 	ldmeq	ip!, {}^	; <UNPREDICTABLE>
    1f04:	04020000 	streq	r0, [r2], #-0
    1f08:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    1f0c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1f10:	0000008f 	andeq	r0, r0, pc, lsl #1
    1f14:	1c060103 	stfnes	f0, [r6], {3}
    1f18:	03000002 	movweq	r0, #2
    1f1c:	02280502 	eoreq	r0, r8, #8388608	; 0x800000
    1f20:	04030000 	streq	r0, [r3], #-0
    1f24:	0000bf05 	andeq	fp, r0, r5, lsl #30
    1f28:	05080300 	streq	r0, [r8, #-768]	; 0x300
    1f2c:	000000ba 	strheq	r0, [r0], -sl
    1f30:	1a080103 	bne	202344 <__bss_end__+0x1f8704>
    1f34:	03000002 	movweq	r0, #2
    1f38:	016c0702 	cmneq	ip, r2, lsl #14
    1f3c:	04030000 	streq	r0, [r3], #-0
    1f40:	00008a07 	andeq	r8, r0, r7, lsl #20
    1f44:	07080300 	streq	r0, [r8, -r0, lsl #6]
    1f48:	00000085 	andeq	r0, r0, r5, lsl #1
    1f4c:	b9070403 	stmdblt	r7, {r0, r1, sl}
    1f50:	03000001 	movweq	r0, #1
    1f54:	02230801 	eoreq	r0, r3, #65536	; 0x10000
    1f58:	01040000 	mrseq	r0, (UNDEF: 4)
    1f5c:	00b20c02 	adcseq	r0, r2, r2, lsl #24
    1f60:	9c050000 	stcls	0, cr0, [r5], {-0}
    1f64:	00000008 	andeq	r0, r0, r8
    1f68:	00078305 	andeq	r8, r7, r5, lsl #6
    1f6c:	48050100 	stmdami	r5, {r8}
    1f70:	04000007 	streq	r0, [r0], #-7
    1f74:	00079b05 	andeq	r9, r7, r5, lsl #22
    1f78:	aa050500 	bge	143380 <__bss_end__+0x139740>
    1f7c:	06000007 	streq	r0, [r0], -r7
    1f80:	0007b905 	andeq	fp, r7, r5, lsl #18
    1f84:	53050700 	movwpl	r0, #22272	; 0x5700
    1f88:	03000008 	movweq	r0, #8
    1f8c:	0007c805 	andeq	ip, r7, r5, lsl #16
    1f90:	06000200 	streq	r0, [r0], -r0, lsl #4
    1f94:	00000805 	andeq	r0, r0, r5, lsl #16
    1f98:	00791502 	rsbseq	r1, r9, r2, lsl #10
    1f9c:	57070000 	strpl	r0, [r7, -r0]
    1fa0:	01000007 	tsteq	r0, r7
    1fa4:	00002557 	andeq	r2, r0, r7, asr r5
    1fa8:	008ce000 	addeq	lr, ip, r0
    1fac:	00001c00 	andeq	r1, r0, r0, lsl #24
    1fb0:	e09c0100 	adds	r0, ip, r0, lsl #2
    1fb4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1fb8:	00008cf0 	strdeq	r8, [r0], -r0
    1fbc:	000003a8 	andeq	r0, r0, r8, lsr #7
    1fc0:	00740900 	rsbseq	r0, r4, r0, lsl #18
    1fc4:	37010000 	strcc	r0, [r1, -r0]
    1fc8:	00008cfc 	strdeq	r8, [r0], -ip
    1fcc:	0000009c 	muleq	r0, ip, r0
    1fd0:	01e69c01 	mvneq	r9, r1, lsl #24
    1fd4:	04080000 	streq	r0, [r8], #-0
    1fd8:	c900008d 	stmdbgt	r0, {r0, r2, r3, r7}
    1fdc:	0a000003 	beq	1ff0 <_start-0x6010>
    1fe0:	00008d10 	andeq	r8, r0, r0, lsl sp
    1fe4:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1fe8:	00000116 	andeq	r0, r0, r6, lsl r1
    1fec:	0151010b 	cmpeq	r1, fp, lsl #2
    1ff0:	50010b32 	andpl	r0, r1, r2, lsr fp
    1ff4:	0a003e01 	beq	11800 <__bss_end__+0x7bc0>
    1ff8:	00008d1c 	andeq	r8, r0, ip, lsl sp
    1ffc:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2000:	0000012e 	andeq	r0, r0, lr, lsr #2
    2004:	0151010b 	cmpeq	r1, fp, lsl #2
    2008:	50010b32 	andpl	r0, r1, r2, lsr fp
    200c:	08003f01 	stmdaeq	r0, {r0, r8, r9, sl, fp, ip, sp}
    2010:	00008d20 	andeq	r8, r0, r0, lsr #26
    2014:	000003c9 	andeq	r0, r0, r9, asr #7
    2018:	008d300a 	addeq	r3, sp, sl
    201c:	0003a800 	andeq	sl, r3, r0, lsl #16
    2020:	00014b00 	andeq	r4, r1, r0, lsl #22
    2024:	50010b00 	andpl	r0, r1, r0, lsl #22
    2028:	00007502 	andeq	r7, r0, r2, lsl #10
    202c:	008d3c0a 	addeq	r3, sp, sl, lsl #24
    2030:	0003e600 	andeq	lr, r3, r0, lsl #12
    2034:	00015f00 	andeq	r5, r1, r0, lsl #30
    2038:	50010b00 	andpl	r0, r1, r0, lsl #22
    203c:	00007502 	andeq	r7, r0, r2, lsl #10
    2040:	008d4008 	addeq	r4, sp, r8
    2044:	0003c900 	andeq	ip, r3, r0, lsl #18
    2048:	8d4c0a00 	vstrhi	s1, [ip, #-0]
    204c:	03e60000 	mvneq	r0, #0
    2050:	017b0000 	cmneq	fp, r0
    2054:	010b0000 	mrseq	r0, (UNDEF: 11)
    2058:	00300151 	eorseq	r0, r0, r1, asr r1
    205c:	008d580a 	addeq	r5, sp, sl, lsl #16
    2060:	0003e600 	andeq	lr, r3, r0, lsl #12
    2064:	00018e00 	andeq	r8, r1, r0, lsl #28
    2068:	51010b00 	tstpl	r1, r0, lsl #22
    206c:	0a003001 	beq	e078 <__bss_end__+0x4438>
    2070:	00008d64 	andeq	r8, r0, r4, ror #26
    2074:	000003e6 	andeq	r0, r0, r6, ror #7
    2078:	000001a1 	andeq	r0, r0, r1, lsr #3
    207c:	0151010b 	cmpeq	r1, fp, lsl #2
    2080:	700a0036 	andvc	r0, sl, r6, lsr r0
    2084:	e600008d 	str	r0, [r0], -sp, lsl #1
    2088:	b4000003 	strlt	r0, [r0], #-3
    208c:	0b000001 	bleq	2098 <_start-0x5f68>
    2090:	33015101 	movwcc	r5, #4353	; 0x1101
    2094:	8d7c0a00 	vldmdbhi	ip!, {s1-s0}
    2098:	03e60000 	mvneq	r0, #0
    209c:	01c90000 	biceq	r0, r9, r0
    20a0:	010b0000 	mrseq	r0, (UNDEF: 11)
    20a4:	0e0a0351 	mcreq	3, 0, r0, cr10, cr1, {2}
    20a8:	880a0001 	stmdahi	sl, {r0}
    20ac:	e600008d 	str	r0, [r0], -sp, lsl #1
    20b0:	dc000003 	stcle	0, cr0, [r0], {3}
    20b4:	0b000001 	bleq	20c0 <_start-0x5f40>
    20b8:	33015101 	movwcc	r5, #4353	; 0x1101
    20bc:	8d8c0800 	stchi	8, cr0, [ip]
    20c0:	03c90000 	biceq	r0, r9, #0
    20c4:	0c000000 	stceq	0, cr0, [r0], {-0}
    20c8:	000007ec 	andeq	r0, r0, ip, ror #15
    20cc:	00255d01 	eoreq	r5, r5, r1, lsl #26
    20d0:	8d980000 	ldchi	0, cr0, [r8]
    20d4:	00280000 	eoreq	r0, r8, r0
    20d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    20dc:	00000212 	andeq	r0, r0, r2, lsl r2
    20e0:	008da008 	addeq	sl, sp, r8
    20e4:	0000bd00 	andeq	fp, r0, r0, lsl #26
    20e8:	8db40800 	ldchi	8, cr0, [r4]
    20ec:	03a80000 			; <UNDEFINED> instruction: 0x03a80000
    20f0:	0c000000 	stceq	0, cr0, [r0], {-0}
    20f4:	00000811 	andeq	r0, r0, r1, lsl r8
    20f8:	00256401 	eoreq	r6, r5, r1, lsl #8
    20fc:	8dc00000 	stclhi	0, cr0, [r0]
    2100:	001c0000 	andseq	r0, ip, r0
    2104:	9c010000 	stcls	0, cr0, [r1], {-0}
    2108:	00000235 	andeq	r0, r0, r5, lsr r2
    210c:	008dd008 	addeq	sp, sp, r8
    2110:	0003a800 	andeq	sl, r3, r0, lsl #16
    2114:	83090000 	movwhi	r0, #36864	; 0x9000
    2118:	01000008 	tsteq	r0, r8
    211c:	008ddc6a 	addeq	sp, sp, sl, ror #24
    2120:	00002c00 	andeq	r2, r0, r0, lsl #24
    2124:	719c0100 	orrsvc	r0, ip, r0, lsl #2
    2128:	0d000002 	stceq	0, cr0, [r0, #-8]
    212c:	6a010063 	bvs	422c0 <__bss_end__+0x38680>
    2130:	0000002c 	andeq	r0, r0, ip, lsr #32
    2134:	00000a1f 	andeq	r0, r0, pc, lsl sl
    2138:	008de808 	addeq	lr, sp, r8, lsl #16
    213c:	00021200 	andeq	r1, r2, r0, lsl #4
    2140:	8e000e00 	cdphi	14, 0, cr0, cr0, cr0, {0}
    2144:	03e60000 	mvneq	r0, #0
    2148:	010b0000 	mrseq	r0, (UNDEF: 11)
    214c:	00740251 	rsbseq	r0, r4, r1, asr r2
    2150:	750c0000 	strvc	r0, [ip, #-0]
    2154:	01000007 	tsteq	r0, r7
    2158:	00002574 	andeq	r2, r0, r4, ror r5
    215c:	008e0800 	addeq	r0, lr, r0, lsl #16
    2160:	00000c00 	andeq	r0, r0, r0, lsl #24
    2164:	949c0100 	ldrls	r0, [ip], #256	; 0x100
    2168:	08000002 	stmdaeq	r0, {r1}
    216c:	00008e10 	andeq	r8, r0, r0, lsl lr
    2170:	000000bd 	strheq	r0, [r0], -sp
    2174:	08bb0c00 	ldmeq	fp!, {sl, fp}
    2178:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    217c:	00000025 	andeq	r0, r0, r5, lsr #32
    2180:	00008e14 	andeq	r8, r0, r4, lsl lr
    2184:	00000020 	andeq	r0, r0, r0, lsr #32
    2188:	02c09c01 	sbceq	r9, r0, #256	; 0x100
    218c:	1c080000 	stcne	0, cr0, [r8], {-0}
    2190:	7100008e 	smlabbvc	r0, lr, r0, r0
    2194:	08000002 	stmdaeq	r0, {r1}
    2198:	00008e28 	andeq	r8, r0, r8, lsr #28
    219c:	000001e6 	andeq	r0, r0, r6, ror #3
    21a0:	082b0f00 	stmdaeq	fp!, {r8, r9, sl, fp}
    21a4:	16010000 	strne	r0, [r1], -r0
    21a8:	000002d1 	ldrdeq	r0, [r0], -r1
    21ac:	92280305 	eorls	r0, r8, #335544320	; 0x14000000
    21b0:	04100000 	ldreq	r0, [r0], #-0
    21b4:	000002d7 	ldrdeq	r0, [r0], -r7
    21b8:	00002c11 	andeq	r2, r0, r1, lsl ip
    21bc:	081f0f00 	ldmdaeq	pc, {r8, r9, sl, fp}	; <UNPREDICTABLE>
    21c0:	17010000 	strne	r0, [r1, -r0]
    21c4:	000002d1 	ldrdeq	r0, [r0], -r1
    21c8:	91fc0305 	mvnsls	r0, r5, lsl #6
    21cc:	2b0f0000 	blcs	3c21d4 <__bss_end__+0x3b8594>
    21d0:	01000007 	tsteq	r0, r7
    21d4:	0002d11a 	andeq	sp, r2, sl, lsl r1
    21d8:	14030500 	strne	r0, [r3], #-1280	; 0x500
    21dc:	0f000092 	svceq	0x00000092
    21e0:	000007d7 	ldrdeq	r0, [r0], -r7
    21e4:	02d11b01 	sbcseq	r1, r1, #1024	; 0x400
    21e8:	03050000 	movweq	r0, #20480	; 0x5000
    21ec:	00009204 	andeq	r9, r0, r4, lsl #4
    21f0:	0007f60f 	andeq	pc, r7, pc, lsl #12
    21f4:	d11c0100 	tstle	ip, r0, lsl #2
    21f8:	05000002 	streq	r0, [r0, #-2]
    21fc:	00920803 	addseq	r0, r2, r3, lsl #16
    2200:	088d0f00 	stmeq	sp, {r8, r9, sl, fp}
    2204:	1d010000 	stcne	0, cr0, [r1, #-0]
    2208:	000002d1 	ldrdeq	r0, [r0], -r1
    220c:	920c0305 	andls	r0, ip, #335544320	; 0x14000000
    2210:	1c0f0000 	stcne	0, cr0, [pc], {-0}
    2214:	01000007 	tsteq	r0, r7
    2218:	0002d11e 	andeq	sp, r2, lr, lsl r1
    221c:	24030500 	strcs	r0, [r3], #-1280	; 0x500
    2220:	0f000092 	svceq	0x00000092
    2224:	000008ac 	andeq	r0, r0, ip, lsr #17
    2228:	02d11f01 	sbcseq	r1, r1, #1, 30
    222c:	03050000 	movweq	r0, #20480	; 0x5000
    2230:	000091f8 	strdeq	r9, [r0], -r8
    2234:	0007390f 	andeq	r3, r7, pc, lsl #18
    2238:	d1200100 	teqle	r0, r0, lsl #2
    223c:	05000002 	streq	r0, [r0, #-2]
    2240:	00922003 	addseq	r2, r2, r3
    2244:	08740f00 	ldmdaeq	r4!, {r8, r9, sl, fp}^
    2248:	21010000 	mrscs	r0, (UNDEF: 1)
    224c:	000002d1 	ldrdeq	r0, [r0], -r1
    2250:	921c0305 	andsls	r0, ip, #335544320	; 0x14000000
    2254:	650f0000 	strvs	r0, [pc, #-0]	; 225c <_start-0x5da4>
    2258:	01000007 	tsteq	r0, r7
    225c:	0002d122 	andeq	sp, r2, r2, lsr #2
    2260:	00030500 	andeq	r0, r3, r0, lsl #10
    2264:	0f000092 	svceq	0x00000092
    2268:	00000843 	andeq	r0, r0, r3, asr #16
    226c:	02d12301 	sbcseq	r2, r1, #67108864	; 0x4000000
    2270:	03050000 	movweq	r0, #20480	; 0x5000
    2274:	00009218 	andeq	r9, r0, r8, lsl r2
    2278:	0008330f 	andeq	r3, r8, pc, lsl #6
    227c:	d1240100 	teqle	r4, r0, lsl #2
    2280:	05000002 	streq	r0, [r0, #-2]
    2284:	00921003 	addseq	r1, r2, r3
    2288:	08cb1200 	stmiaeq	fp, {r9, ip}^
    228c:	a1030000 	mrsge	r0, (UNDEF: 3)
    2290:	0000002c 	andeq	r0, r0, ip, lsr #32
    2294:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    2298:	0003bd13 	andeq	fp, r3, r3, lsl sp
    229c:	04100000 	ldreq	r0, [r0], #-0
    22a0:	000003c3 	andeq	r0, r0, r3, asr #7
    22a4:	0003c814 	andeq	ip, r3, r4, lsl r8
    22a8:	7f161500 	svcvc	0x00161500
    22ac:	03000001 	movweq	r0, #1
    22b0:	08621784 	stmdaeq	r2!, {r2, r7, r8, r9, sl, ip}^
    22b4:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
    22b8:	000003e6 	andeq	r0, r0, r6, ror #7
    22bc:	00002c13 	andeq	r2, r0, r3, lsl ip
    22c0:	00b21300 	adcseq	r1, r2, r0, lsl #6
    22c4:	17000000 	strne	r0, [r0, -r0]
    22c8:	000007e6 	andeq	r0, r0, r6, ror #15
    22cc:	03fc9503 	mvnseq	r9, #12582912	; 0xc00000
    22d0:	fc130000 	ldc2	0, cr0, [r3], {-0}
    22d4:	13000003 	movwne	r0, #3
    22d8:	0000002c 	andeq	r0, r0, ip, lsr #32
    22dc:	c8041000 	stmdagt	r4, {ip}
    22e0:	00000003 	andeq	r0, r0, r3
    22e4:	00000568 	andeq	r0, r0, r8, ror #10
    22e8:	0caa0004 	stceq	0, cr0, [sl], #16
    22ec:	01040000 	mrseq	r0, (UNDEF: 4)
    22f0:	00000232 	andeq	r0, r0, r2, lsr r2
    22f4:	00098001 	andeq	r8, r9, r1
    22f8:	00053900 	andeq	r3, r5, r0, lsl #18
    22fc:	008e3400 	addeq	r3, lr, r0, lsl #8
    2300:	0003ac00 	andeq	sl, r3, r0, lsl #24
    2304:	00097700 	andeq	r7, r9, r0, lsl #14
    2308:	07080200 	streq	r0, [r8, -r0, lsl #4]
    230c:	00000085 	andeq	r0, r0, r5, lsl #1
    2310:	8f070402 	svchi	0x00070402
    2314:	02000000 	andeq	r0, r0, #0
    2318:	021c0601 	andseq	r0, ip, #1048576	; 0x100000
    231c:	02020000 	andeq	r0, r2, #0
    2320:	00022805 	andeq	r2, r2, r5, lsl #16
    2324:	05040200 	streq	r0, [r4, #-512]	; 0x200
    2328:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    232c:	ba050802 	blt	14433c <__bss_end__+0x13a6fc>
    2330:	02000000 	andeq	r0, r0, #0
    2334:	021a0801 	andseq	r0, sl, #65536	; 0x10000
    2338:	02020000 	andeq	r0, r2, #0
    233c:	00016c07 	andeq	r6, r1, r7, lsl #24
    2340:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2344:	0000008a 	andeq	r0, r0, sl, lsl #1
    2348:	69050403 	stmdbvs	r5, {r0, r1, sl}
    234c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    2350:	01b90704 			; <UNDEFINED> instruction: 0x01b90704
    2354:	01020000 	mrseq	r0, (UNDEF: 2)
    2358:	00022308 	andeq	r2, r2, r8, lsl #6
    235c:	02010400 	andeq	r0, r1, #0, 8
    2360:	0000b20c 	andeq	fp, r0, ip, lsl #4
    2364:	089c0500 	ldmeq	ip, {r8, sl}
    2368:	05000000 	streq	r0, [r0, #-0]
    236c:	00000783 	andeq	r0, r0, r3, lsl #15
    2370:	07480501 	strbeq	r0, [r8, -r1, lsl #10]
    2374:	05040000 	streq	r0, [r4, #-0]
    2378:	0000079b 	muleq	r0, fp, r7
    237c:	07aa0505 	streq	r0, [sl, r5, lsl #10]!
    2380:	05060000 	streq	r0, [r6, #-0]
    2384:	000007b9 			; <UNDEFINED> instruction: 0x000007b9
    2388:	08530507 	ldmdaeq	r3, {r0, r1, r2, r8, sl}^
    238c:	05030000 	streq	r0, [r3, #-0]
    2390:	000007c8 	andeq	r0, r0, r8, asr #15
    2394:	05060002 	streq	r0, [r6, #-2]
    2398:	02000008 	andeq	r0, r0, #8
    239c:	00007915 	andeq	r7, r0, r5, lsl r9
    23a0:	09500700 	ldmdbeq	r0, {r8, r9, sl}^
    23a4:	3f010000 	svccc	0x00010000
    23a8:	00008e34 	andeq	r8, r0, r4, lsr lr
    23ac:	000000d4 	ldrdeq	r0, [r0], -r4
    23b0:	01339c01 	teqeq	r3, r1, lsl #24
    23b4:	70080000 	andvc	r0, r8, r0
    23b8:	01006e69 	tsteq	r0, r9, ror #28
    23bc:	00002c3f 	andeq	r2, r0, pc, lsr ip
    23c0:	000a3d00 	andeq	r3, sl, r0, lsl #26
    23c4:	09870900 	stmibeq	r7, {r8, fp}
    23c8:	47010000 	strmi	r0, [r1, -r0]
    23cc:	00000133 	andeq	r0, r0, r3, lsr r1
    23d0:	00000a5b 	andeq	r0, r0, fp, asr sl
    23d4:	00096d09 	andeq	r6, r9, r9, lsl #26
    23d8:	2c490100 	stfcse	f0, [r9], {-0}
    23dc:	b0000000 	andlt	r0, r0, r0
    23e0:	0900000a 	stmdbeq	r0, {r1, r3}
    23e4:	00000978 	andeq	r0, r0, r8, ror r9
    23e8:	002c5701 	eoreq	r5, ip, r1, lsl #14
    23ec:	0c7c0000 	ldcleq	0, cr0, [ip], #-0
    23f0:	c80a0000 	stmdagt	sl, {}	; <UNPREDICTABLE>
    23f4:	2e00008e 	cdpcs	0, 0, cr0, cr0, cr14, {4}
    23f8:	22000005 	andcs	r0, r0, #5
    23fc:	0b000001 	bleq	2408 <_start-0x5bf8>
    2400:	75025001 	strvc	r5, [r2, #-1]
    2404:	fc0c0000 	stc2	0, cr0, [ip], {-0}
    2408:	4f00008e 	svcmi	0x0000008e
    240c:	0b000005 	bleq	2428 <_start-0x5bd8>
    2410:	75025001 	strvc	r5, [r2, #-1]
    2414:	0d000000 	stceq	0, cr0, [r0, #-0]
    2418:	00013904 	andeq	r3, r1, r4, lsl #18
    241c:	002c0e00 	eoreq	r0, ip, r0, lsl #28
    2420:	0c0f0000 	stceq	0, cr0, [pc], {-0}
    2424:	01000009 	tsteq	r0, r9
    2428:	016c0360 	cmneq	ip, r0, ror #6
    242c:	70100000 	andsvc	r0, r0, r0
    2430:	01006e69 	tsteq	r0, r9, ror #28
    2434:	00002c60 	andeq	r2, r0, r0, ror #24
    2438:	09871100 	stmibeq	r7, {r8, ip}
    243c:	67010000 	strvs	r0, [r1, -r0]
    2440:	00000133 	andeq	r0, r0, r3, lsr r1
    2444:	00097811 	andeq	r7, r9, r1, lsl r8
    2448:	2c680100 	stfcse	f0, [r8], #-0
    244c:	00000000 	andeq	r0, r0, r0
    2450:	00013e12 	andeq	r3, r1, r2, lsl lr
    2454:	008f0800 	addeq	r0, pc, r0, lsl #16
    2458:	00003800 	andeq	r3, r0, r0, lsl #16
    245c:	b09c0100 	addslt	r0, ip, r0, lsl #2
    2460:	13000001 	movwne	r0, #1
    2464:	0000014a 	andeq	r0, r0, sl, asr #2
    2468:	00000cac 	andeq	r0, r0, ip, lsr #25
    246c:	00015514 	andeq	r5, r1, r4, lsl r5
    2470:	000ccd00 	andeq	ip, ip, r0, lsl #26
    2474:	01601400 	cmneq	r0, r0, lsl #8
    2478:	0d030000 	stceq	0, cr0, [r3, #-0]
    247c:	380c0000 	stmdacc	ip, {}	; <UNPREDICTABLE>
    2480:	4f00008f 	svcmi	0x0000008f
    2484:	0b000005 	bleq	24a0 <_start-0x5b60>
    2488:	31075101 	tstcc	r7, r1, lsl #2
    248c:	4f5001f3 	svcmi	0x005001f3
    2490:	0000241a 	andeq	r2, r0, sl, lsl r4
    2494:	0009430f 	andeq	r4, r9, pc, lsl #6
    2498:	037b0100 	cmneq	fp, #0, 2
    249c:	000001de 	ldrdeq	r0, [r0], -lr
    24a0:	6e697010 	mcrvs	0, 3, r7, cr9, cr0, {0}
    24a4:	2c7b0100 	ldfcse	f0, [fp], #-0
    24a8:	11000000 	mrsne	r0, (UNDEF: 0)
    24ac:	00000987 	andeq	r0, r0, r7, lsl #19
    24b0:	01338101 	teqeq	r3, r1, lsl #2
    24b4:	78110000 	ldmdavc	r1, {}	; <UNPREDICTABLE>
    24b8:	01000009 	tsteq	r0, r9
    24bc:	00002c82 	andeq	r2, r0, r2, lsl #25
    24c0:	b0120000 	andslt	r0, r2, r0
    24c4:	40000001 	andmi	r0, r0, r1
    24c8:	3800008f 	stmdacc	r0, {r0, r1, r2, r3, r7}
    24cc:	01000000 	mrseq	r0, (UNDEF: 0)
    24d0:	0002229c 	muleq	r2, ip, r2
    24d4:	01bc1300 			; <UNDEFINED> instruction: 0x01bc1300
    24d8:	0d430000 	stcleq	0, cr0, [r3, #-0]
    24dc:	c7140000 	ldrgt	r0, [r4, -r0]
    24e0:	64000001 	strvs	r0, [r0], #-1
    24e4:	1400000d 	strne	r0, [r0], #-13
    24e8:	000001d2 	ldrdeq	r0, [r0], -r2
    24ec:	00000d9a 	muleq	r0, sl, sp
    24f0:	008f700c 	addeq	r7, pc, ip
    24f4:	00054f00 	andeq	r4, r5, r0, lsl #30
    24f8:	51010b00 	tstpl	r1, r0, lsl #22
    24fc:	01f33107 	mvnseq	r3, r7, lsl #2
    2500:	241a4f50 	ldrcs	r4, [sl], #-3920	; 0xf50
    2504:	2d070000 	stccs	0, cr0, [r7, #-0]
    2508:	01000009 	tsteq	r0, r9
    250c:	008f7895 	umulleq	r7, pc, r5, r8	; <UNPREDICTABLE>
    2510:	0000cc00 	andeq	ip, r0, r0, lsl #24
    2514:	989c0100 	ldmls	ip, {r8}
    2518:	08000002 	stmdaeq	r0, {r1}
    251c:	006e6970 	rsbeq	r6, lr, r0, ror r9
    2520:	002c9501 	eoreq	r9, ip, r1, lsl #10
    2524:	0dda0000 	ldcleq	0, cr0, [sl]
    2528:	87090000 	strhi	r0, [r9, -r0]
    252c:	01000009 	tsteq	r0, r9
    2530:	0001339b 	muleq	r1, fp, r3
    2534:	000df800 	andeq	pc, sp, r0, lsl #16
    2538:	096d0900 	stmdbeq	sp!, {r8, fp}^
    253c:	9d010000 	stcls	0, cr0, [r1, #-0]
    2540:	0000002c 	andeq	r0, r0, ip, lsr #32
    2544:	00000e4d 	andeq	r0, r0, sp, asr #28
    2548:	00097809 	andeq	r7, r9, r9, lsl #16
    254c:	2cab0100 	stfcss	f0, [fp]
    2550:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    2554:	0a000010 	beq	259c <_start-0x5a64>
    2558:	0000900c 	andeq	r9, r0, ip
    255c:	0000052e 	andeq	r0, r0, lr, lsr #10
    2560:	00000287 	andeq	r0, r0, r7, lsl #5
    2564:	0250010b 	subseq	r0, r0, #-1073741822	; 0xc0000002
    2568:	0c000075 	stceq	0, cr0, [r0], {117}	; 0x75
    256c:	00009038 	andeq	r9, r0, r8, lsr r0
    2570:	0000054f 	andeq	r0, r0, pc, asr #10
    2574:	0250010b 	subseq	r0, r0, #-1073741822	; 0xc0000002
    2578:	00000075 	andeq	r0, r0, r5, ror r0
    257c:	00090215 	andeq	r0, r9, r5, lsl r2
    2580:	64b30100 	ldrtvs	r0, [r3], #256	; 0x100
    2584:	44000000 	strmi	r0, [r0], #-0
    2588:	4c000090 	stcmi	0, cr0, [r0], {144}	; 0x90
    258c:	01000000 	mrseq	r0, (UNDEF: 0)
    2590:	0002e09c 	muleq	r2, ip, r0
    2594:	69700800 	ldmdbvs	r0!, {fp}^
    2598:	b301006e 	movwlt	r0, #4206	; 0x106e
    259c:	0000002c 	andeq	r0, r0, ip, lsr #32
    25a0:	00001037 	andeq	r1, r0, r7, lsr r0
    25a4:	01007616 	tsteq	r0, r6, lsl r6
    25a8:	00002cb9 			; <UNDEFINED> instruction: 0x00002cb9
    25ac:	00108f00 	andseq	r8, r0, r0, lsl #30
    25b0:	90641700 	rsbls	r1, r4, r0, lsl #14
    25b4:	052e0000 	streq	r0, [lr, #-0]!
    25b8:	74170000 	ldrvc	r0, [r7], #-0
    25bc:	2e000090 	mcrcs	0, 0, r0, cr0, cr0, {4}
    25c0:	00000005 	andeq	r0, r0, r5
    25c4:	0008e507 	andeq	lr, r8, r7, lsl #10
    25c8:	90c50100 	sbcls	r0, r5, r0, lsl #2
    25cc:	78000090 	stmdavc	r0, {r4, r7}
    25d0:	01000000 	mrseq	r0, (UNDEF: 0)
    25d4:	0003aa9c 	muleq	r3, ip, sl
    25d8:	69700800 	ldmdbvs	r0!, {fp}^
    25dc:	c501006e 	strgt	r0, [r1, #-110]	; 0x6e
    25e0:	0000002c 	andeq	r0, r0, ip, lsr #32
    25e4:	000010c5 	andeq	r1, r0, r5, asr #1
    25e8:	01007608 	tsteq	r0, r8, lsl #12
    25ec:	00002cc5 	andeq	r2, r0, r5, asr #25
    25f0:	0010ff00 	andseq	pc, r0, r0, lsl #30
    25f4:	013e1800 	teqeq	lr, r0, lsl #16
    25f8:	90a40000 	adcls	r0, r4, r0
    25fc:	00300000 	eorseq	r0, r0, r0
    2600:	cc010000 	stcgt	0, cr0, [r1], {-0}
    2604:	0000035f 	andeq	r0, r0, pc, asr r3
    2608:	00014a13 	andeq	r4, r1, r3, lsl sl
    260c:	00113900 	andseq	r3, r1, r0, lsl #18
    2610:	90a41900 	adcls	r1, r4, r0, lsl #18
    2614:	00300000 	eorseq	r0, r0, r0
    2618:	55140000 	ldrpl	r0, [r4, #-0]
    261c:	5a000001 	bpl	2628 <_start-0x59d8>
    2620:	14000011 	strne	r0, [r0], #-17
    2624:	00000160 	andeq	r0, r0, r0, ror #2
    2628:	00001190 	muleq	r0, r0, r1
    262c:	0090d00c 	addseq	sp, r0, ip
    2630:	00054f00 	andeq	r4, r5, r0, lsl #30
    2634:	51010b00 	tstpl	r1, r0, lsl #22
    2638:	01f33107 	mvnseq	r3, r7, lsl #2
    263c:	241a4f50 	ldrcs	r4, [sl], #-3920	; 0xf50
    2640:	1a000000 	bne	2648 <_start-0x59b8>
    2644:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    2648:	000090d4 	ldrdeq	r9, [r0], -r4
    264c:	00000034 	andeq	r0, r0, r4, lsr r0
    2650:	bc13ce01 	ldclt	14, cr12, [r3], {1}
    2654:	d0000001 	andle	r0, r0, r1
    2658:	19000011 	stmdbne	r0, {r0, r4}
    265c:	000090d4 	ldrdeq	r9, [r0], -r4
    2660:	00000034 	andeq	r0, r0, r4, lsr r0
    2664:	0001c714 	andeq	ip, r1, r4, lsl r7
    2668:	0011f100 	andseq	pc, r1, r0, lsl #2
    266c:	01d21400 	bicseq	r1, r2, r0, lsl #8
    2670:	12270000 	eorne	r0, r7, #0
    2674:	000c0000 	andeq	r0, ip, r0
    2678:	4f000091 	svcmi	0x00000091
    267c:	0b000005 	bleq	2698 <_start-0x5968>
    2680:	31075101 	tstcc	r7, r1, lsl #2
    2684:	4f5001f3 	svcmi	0x005001f3
    2688:	0000241a 	andeq	r2, r0, sl, lsl r4
    268c:	62070000 	andvs	r0, r7, #0
    2690:	01000008 	tsteq	r0, r8
    2694:	009108d1 			; <UNDEFINED> instruction: 0x009108d1
    2698:	0000d800 	andeq	sp, r0, r0, lsl #16
    269c:	2f9c0100 	svccs	0x009c0100
    26a0:	08000004 	stmdaeq	r0, {r2}
    26a4:	006e6970 	rsbeq	r6, lr, r0, ror r9
    26a8:	002cd101 	eoreq	sp, ip, r1, lsl #2
    26ac:	12670000 	rsbne	r0, r7, #0
    26b0:	681b0000 	ldmdavs	fp, {}	; <UNPREDICTABLE>
    26b4:	01000009 	tsteq	r0, r9
    26b8:	0000b2d1 	ldrdeq	fp, [r0], -r1
    26bc:	00128500 	andseq	r8, r2, r0, lsl #10
    26c0:	09870900 	stmibeq	r7, {r8, fp}
    26c4:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    26c8:	00000133 	andeq	r0, r0, r3, lsr r1
    26cc:	000012a6 	andeq	r1, r0, r6, lsr #5
    26d0:	00096d09 	andeq	r6, r9, r9, lsl #26
    26d4:	2cda0100 	ldfcse	f0, [sl], {0}
    26d8:	fb000000 	blx	26e2 <_start-0x591e>
    26dc:	09000012 	stmdbeq	r0, {r1, r4}
    26e0:	00000978 	andeq	r0, r0, r8, ror r9
    26e4:	002ce801 	eoreq	lr, ip, r1, lsl #16
    26e8:	14c70000 	strbne	r0, [r7], #0
    26ec:	a40a0000 	strge	r0, [sl], #-0
    26f0:	2e000091 	mcrcs	0, 0, r0, cr0, cr1, {4}
    26f4:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    26f8:	0b000004 	bleq	2710 <_start-0x58f0>
    26fc:	76025001 	strvc	r5, [r2], -r1
    2700:	d40c0000 	strle	r0, [ip], #-0
    2704:	4f000091 	svcmi	0x00000091
    2708:	0b000005 	bleq	2724 <_start-0x58dc>
    270c:	76025001 	strvc	r5, [r2], -r1
    2710:	1c000000 	stcne	0, cr0, [r0], {-0}
    2714:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2718:	01332801 	teqeq	r3, r1, lsl #16
    271c:	03050000 	movweq	r0, #20480	; 0x5000
    2720:	00009264 	andeq	r9, r0, r4, ror #4
    2724:	0008db1c 	andeq	sp, r8, ip, lsl fp
    2728:	33290100 	teqcc	r9, #0, 2
    272c:	05000001 	streq	r0, [r0, #-1]
    2730:	00926003 	addseq	r6, r2, r3
    2734:	08d11c00 	ldmeq	r1, {sl, fp, ip}^
    2738:	2a010000 	bcs	42740 <__bss_end__+0x38b00>
    273c:	00000133 	andeq	r0, r0, r3, lsr r1
    2740:	925c0305 	subsls	r0, ip, #335544320	; 0x14000000
    2744:	901c0000 	andsls	r0, ip, r0
    2748:	01000009 	tsteq	r0, r9
    274c:	0001332c 	andeq	r3, r1, ip, lsr #6
    2750:	2c030500 	cfstr32cs	mvfx0, [r3], {-0}
    2754:	1c000092 	stcne	0, cr0, [r0], {146}	; 0x92
    2758:	00000960 	andeq	r0, r0, r0, ror #18
    275c:	01332d01 	teqeq	r3, r1, lsl #26
    2760:	03050000 	movweq	r0, #20480	; 0x5000
    2764:	00009230 	andeq	r9, r0, r0, lsr r2
    2768:	00099f1c 	andeq	r9, r9, ip, lsl pc
    276c:	332e0100 	teqcc	lr, #0, 2
    2770:	05000001 	streq	r0, [r0, #-1]
    2774:	00923403 	addseq	r3, r2, r3, lsl #8
    2778:	09a71c00 	stmibeq	r7!, {sl, fp, ip}
    277c:	2f010000 	svccs	0x00010000
    2780:	00000133 	andeq	r0, r0, r3, lsr r1
    2784:	92380305 	eorsls	r0, r8, #335544320	; 0x14000000
    2788:	af1c0000 	svcge	0x001c0000
    278c:	01000009 	tsteq	r0, r9
    2790:	00013330 	andeq	r3, r1, r0, lsr r3
    2794:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
    2798:	1c000092 	stcne	0, cr0, [r0], {146}	; 0x92
    279c:	000009b7 			; <UNDEFINED> instruction: 0x000009b7
    27a0:	01333101 	teqeq	r3, r1, lsl #2
    27a4:	03050000 	movweq	r0, #20480	; 0x5000
    27a8:	00009240 	andeq	r9, r0, r0, asr #4
    27ac:	00093c1c 	andeq	r3, r9, ip, lsl ip
    27b0:	33330100 	teqcc	r3, #0, 2
    27b4:	05000001 	streq	r0, [r0, #-1]
    27b8:	00924403 	addseq	r4, r2, r3, lsl #8
    27bc:	091f1c00 	ldmdbeq	pc, {sl, fp, ip}	; <UNPREDICTABLE>
    27c0:	34010000 	strcc	r0, [r1], #-0
    27c4:	00000133 	andeq	r0, r0, r3, lsr r1
    27c8:	92480305 	subls	r0, r8, #335544320	; 0x14000000
    27cc:	261c0000 	ldrcs	r0, [ip], -r0
    27d0:	01000009 	tsteq	r0, r9
    27d4:	00013336 	andeq	r3, r1, r6, lsr r3
    27d8:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
    27dc:	1c000092 	stcne	0, cr0, [r0], {146}	; 0x92
    27e0:	000008fb 	strdeq	r0, [r0], -fp
    27e4:	01333701 	teqeq	r3, r1, lsl #14
    27e8:	03050000 	movweq	r0, #20480	; 0x5000
    27ec:	00009250 	andeq	r9, r0, r0, asr r2
    27f0:	0009981c 	andeq	r9, r9, ip, lsl r8
    27f4:	33390100 	teqcc	r9, #0, 2
    27f8:	05000001 	streq	r0, [r0, #-1]
    27fc:	00925403 	addseq	r5, r2, r3, lsl #8
    2800:	09181c00 	ldmdbeq	r8, {sl, fp, ip}
    2804:	3a010000 	bcc	4280c <__bss_end__+0x38bcc>
    2808:	00000133 	andeq	r0, r0, r3, lsr r1
    280c:	92580305 	subsls	r0, r8, #335544320	; 0x14000000
    2810:	cb1d0000 	blgt	742818 <__bss_end__+0x738bd8>
    2814:	01000008 	tsteq	r0, r8
    2818:	00002c20 	andeq	r2, r0, r0, lsr #24
    281c:	00054300 	andeq	r4, r5, r0, lsl #6
    2820:	05431e00 	strbeq	r1, [r3, #-3584]	; 0xe00
    2824:	0d000000 	stceq	0, cr0, [r0, #-0]
    2828:	00054904 	andeq	r4, r5, r4, lsl #18
    282c:	054e1f00 	strbeq	r1, [lr, #-3840]	; 0xf00
    2830:	21200000 	teqcs	r0, r0
    2834:	000007e6 	andeq	r0, r0, r6, ror #15
    2838:	05651e01 	strbeq	r1, [r5, #-3585]!	; 0xe01
    283c:	651e0000 	ldrvs	r0, [lr, #-0]
    2840:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    2844:	0000002c 	andeq	r0, r0, ip, lsr #32
    2848:	4e040d00 	cdpmi	13, 0, cr0, cr4, cr0, {0}
    284c:	00000005 	andeq	r0, r0, r5
    2850:	000000e0 	andeq	r0, r0, r0, ror #1
    2854:	0e6e0004 	cdpeq	0, 6, cr0, cr14, cr4, {0}
    2858:	01040000 	mrseq	r0, (UNDEF: 4)
    285c:	00000232 	andeq	r0, r0, r2, lsr r2
    2860:	0009d001 	andeq	sp, r9, r1
    2864:	00053900 	andeq	r3, r5, r0, lsl #18
    2868:	0091e000 	addseq	lr, r1, r0
    286c:	00001400 	andeq	r1, r0, r0, lsl #8
    2870:	000a2000 	andeq	r2, sl, r0
    2874:	05040200 	streq	r0, [r4, #-512]	; 0x200
    2878:	00746e69 	rsbseq	r6, r4, r9, ror #28
    287c:	8f070403 	svchi	0x00070403
    2880:	03000000 	movweq	r0, #0
    2884:	021c0601 	andseq	r0, ip, #1048576	; 0x100000
    2888:	02030000 	andeq	r0, r3, #0
    288c:	00022805 	andeq	r2, r2, r5, lsl #16
    2890:	05040300 	streq	r0, [r4, #-768]	; 0x300
    2894:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    2898:	ba050803 	blt	1448ac <__bss_end__+0x13ac6c>
    289c:	03000000 	movweq	r0, #0
    28a0:	021a0801 	andseq	r0, sl, #65536	; 0x10000
    28a4:	02030000 	andeq	r0, r3, #0
    28a8:	00016c07 	andeq	r6, r1, r7, lsl #24
    28ac:	07040300 	streq	r0, [r4, -r0, lsl #6]
    28b0:	0000008a 	andeq	r0, r0, sl, lsl #1
    28b4:	85070803 	strhi	r0, [r7, #-2051]	; 0x803
    28b8:	03000000 	movweq	r0, #0
    28bc:	01b90704 			; <UNDEFINED> instruction: 0x01b90704
    28c0:	01030000 	mrseq	r0, (UNDEF: 3)
    28c4:	00022308 	andeq	r2, r2, r8, lsl #6
    28c8:	09bf0400 	ldmibeq	pc!, {sl}	; <UNPREDICTABLE>
    28cc:	03010000 	movweq	r0, #4096	; 0x1000
    28d0:	00000025 	andeq	r0, r0, r5, lsr #32
    28d4:	000091e0 	andeq	r9, r0, r0, ror #3
    28d8:	00000014 	andeq	r0, r0, r4, lsl r0
    28dc:	00b09c01 	adcseq	r9, r0, r1, lsl #24
    28e0:	63050000 	movwvs	r0, #20480	; 0x5000
    28e4:	25030100 	strcs	r0, [r3, #-256]	; 0x100
    28e8:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    28ec:	06000014 			; <UNDEFINED> instruction: 0x06000014
    28f0:	000091ec 	andeq	r9, r0, ip, ror #3
    28f4:	000000d6 	ldrdeq	r0, [r0], -r6
    28f8:	02500107 	subseq	r0, r0, #-1073741823	; 0xc0000001
    28fc:	00000074 	andeq	r0, r0, r4, ror r0
    2900:	00002508 	andeq	r2, r0, r8, lsl #10
    2904:	0000bf00 	andeq	fp, r0, r0, lsl #30
    2908:	00250900 	eoreq	r0, r5, r0, lsl #18
    290c:	0a000000 	beq	2914 <_start-0x56ec>
    2910:	000005a1 	andeq	r0, r0, r1, lsr #11
    2914:	00d00601 	sbcseq	r0, r0, r1, lsl #12
    2918:	03050000 	movweq	r0, #20480	; 0x5000
    291c:	00009268 	andeq	r9, r0, r8, ror #4
    2920:	00b0040b 	adcseq	r0, r0, fp, lsl #8
    2924:	830c0000 	movwhi	r0, #49152	; 0xc000
    2928:	02000008 	andeq	r0, r0, #8
    292c:	002c093a 	eoreq	r0, ip, sl, lsr r9
    2930:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <__bss_end__+0x2b646c>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	24030000 	strcs	r0, [r3], #-0
  20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  24:	0008030b 	andeq	r0, r8, fp, lsl #6
  28:	000f0400 	andeq	r0, pc, r0, lsl #8
  2c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  30:	26050000 	strcs	r0, [r5], -r0
  34:	00134900 	andseq	r4, r3, r0, lsl #18
  38:	01040600 	tsteq	r4, r0, lsl #12
  3c:	0b3a0b0b 	bleq	e82c70 <__bss_end__+0xe79030>
  40:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  44:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
  48:	1c0e0300 	stcne	3, cr0, [lr], {-0}
  4c:	0800000d 	stmdaeq	r0, {r0, r2, r3}
  50:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  54:	0b3a0e03 	bleq	e83868 <__bss_end__+0xe79c28>
  58:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  5c:	06120111 			; <UNDEFINED> instruction: 0x06120111
  60:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  64:	00130119 	andseq	r0, r3, r9, lsl r1
  68:	00050900 	andeq	r0, r5, r0, lsl #18
  6c:	0b3a0803 	bleq	e82080 <__bss_end__+0xe78440>
  70:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  74:	00001702 	andeq	r1, r0, r2, lsl #14
  78:	0300340a 	movweq	r3, #1034	; 0x40a
  7c:	3b0b3a0e 	blcc	2ce8bc <__bss_end__+0x2c4c7c>
  80:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  84:	0b000017 	bleq	e8 <_start-0x7f18>
  88:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  8c:	0b3b0b3a 	bleq	ec2d7c <__bss_end__+0xeb913c>
  90:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  94:	340c0000 	strcc	r0, [ip], #-0
  98:	3a080300 	bcc	200ca0 <__bss_end__+0x1f7060>
  9c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  a0:	00180213 	andseq	r0, r8, r3, lsl r2
  a4:	82890d00 	addhi	r0, r9, #0, 26
  a8:	01110001 	tsteq	r1, r1
  ac:	00001331 	andeq	r1, r0, r1, lsr r3
  b0:	0182890e 	orreq	r8, r2, lr, lsl #18
  b4:	31011101 	tstcc	r1, r1, lsl #2
  b8:	00130113 	andseq	r0, r3, r3, lsl r1
  bc:	828a0f00 	addhi	r0, sl, #0, 30
  c0:	18020001 	stmdane	r2, {r0}
  c4:	00184291 	mulseq	r8, r1, r2
  c8:	012e1000 	teqeq	lr, r0
  cc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
  d0:	0b3b0b3a 	bleq	ec2dc0 <__bss_end__+0xeb9180>
  d4:	06120111 			; <UNDEFINED> instruction: 0x06120111
  d8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  dc:	00130119 	andseq	r0, r3, r9, lsl r1
  e0:	00341100 	eorseq	r1, r4, r0, lsl #2
  e4:	0b3a0803 	bleq	e820f8 <__bss_end__+0xe784b8>
  e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  ec:	00000b1c 	andeq	r0, r0, ip, lsl fp
  f0:	03003412 	movweq	r3, #1042	; 0x412
  f4:	3b0b3a08 	blcc	2ce91c <__bss_end__+0x2c4cdc>
  f8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  fc:	13000017 	movwne	r0, #23
 100:	0111010b 	tsteq	r1, fp, lsl #2
 104:	13010612 	movwne	r0, #5650	; 0x1612
 108:	34140000 	ldrcc	r0, [r4], #-0
 10c:	3a080300 	bcc	200d14 <__bss_end__+0x1f70d4>
 110:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 114:	15000013 	strne	r0, [r0, #-19]
 118:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 11c:	0b3b0b3a 	bleq	ec2e0c <__bss_end__+0xeb91cc>
 120:	00001349 	andeq	r1, r0, r9, asr #6
 124:	01828916 	orreq	r8, r2, r6, lsl r9
 128:	31011101 	tstcc	r1, r1, lsl #2
 12c:	17000013 	smladne	r0, r3, r0, r0
 130:	0111010b 	tsteq	r1, fp, lsl #2
 134:	00000612 	andeq	r0, r0, r2, lsl r6
 138:	49003518 	stmdbmi	r0, {r3, r4, r8, sl, ip, sp}
 13c:	19000013 	stmdbne	r0, {r0, r1, r4}
 140:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 144:	0b3b0b3a 	bleq	ec2e34 <__bss_end__+0xeb91f4>
 148:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 14c:	00001802 	andeq	r1, r0, r2, lsl #16
 150:	3f002e1a 	svccc	0x00002e1a
 154:	3a0e0319 	bcc	380dc0 <__bss_end__+0x377180>
 158:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 15c:	00193c19 	andseq	r3, r9, r9, lsl ip
 160:	012e1b00 	teqeq	lr, r0, lsl #22
 164:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 168:	0b3b0b3a 	bleq	ec2e58 <__bss_end__+0xeb9218>
 16c:	13491927 	movtne	r1, #39207	; 0x9927
 170:	1301193c 	movwne	r1, #6460	; 0x193c
 174:	051c0000 	ldreq	r0, [ip, #-0]
 178:	00134900 	andseq	r4, r3, r0, lsl #18
 17c:	012e1d00 	teqeq	lr, r0, lsl #26
 180:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 184:	0b3b0b3a 	bleq	ec2e74 <__bss_end__+0xeb9234>
 188:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 18c:	00001301 	andeq	r1, r0, r1, lsl #6
 190:	3f002e1e 	svccc	0x00002e1e
 194:	3a0e0319 	bcc	380e00 <__bss_end__+0x3771c0>
 198:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 19c:	3c134919 	ldccc	9, cr4, [r3], {25}
 1a0:	1f000019 	svcne	0x00000019
 1a4:	00000018 	andeq	r0, r0, r8, lsl r0
 1a8:	3f002e20 	svccc	0x00002e20
 1ac:	3a080319 	bcc	200e18 <__bss_end__+0x1f71d8>
 1b0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 1b4:	00193c19 	andseq	r3, r9, r9, lsl ip
 1b8:	11010000 	mrsne	r0, (UNDEF: 1)
 1bc:	130e2501 	movwne	r2, #58625	; 0xe501
 1c0:	1b0e030b 	blne	380df4 <__bss_end__+0x3771b4>
 1c4:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 1c8:	00171006 	andseq	r1, r7, r6
 1cc:	00240200 	eoreq	r0, r4, r0, lsl #4
 1d0:	0b3e0b0b 	bleq	f82e04 <__bss_end__+0xf791c4>
 1d4:	00000803 	andeq	r0, r0, r3, lsl #16
 1d8:	0b002403 	bleq	91ec <internal_putchar+0xc>
 1dc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 1e0:	0400000e 	streq	r0, [r0], #-14
 1e4:	0b0b000f 	bleq	2c0228 <__bss_end__+0x2b65e8>
 1e8:	00001349 	andeq	r1, r0, r9, asr #6
 1ec:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
 1f0:	06000013 			; <UNDEFINED> instruction: 0x06000013
 1f4:	13490101 	movtne	r0, #37121	; 0x9101
 1f8:	00001301 	andeq	r1, r0, r1, lsl #6
 1fc:	49002107 	stmdbmi	r0, {r0, r1, r2, r8, sp}
 200:	000b2f13 	andeq	r2, fp, r3, lsl pc
 204:	01040800 	tsteq	r4, r0, lsl #16
 208:	0b3a0b0b 	bleq	e82e3c <__bss_end__+0xe791fc>
 20c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 210:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
 214:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 218:	0a00000d 	beq	254 <_start-0x7dac>
 21c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 220:	0b3a0e03 	bleq	e83a34 <__bss_end__+0xe79df4>
 224:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 228:	06120111 			; <UNDEFINED> instruction: 0x06120111
 22c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 230:	00130119 	andseq	r0, r3, r9, lsl r1
 234:	00340b00 	eorseq	r0, r4, r0, lsl #22
 238:	0b3a0e03 	bleq	e83a4c <__bss_end__+0xe79e0c>
 23c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 240:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 244:	340c0000 	strcc	r0, [ip], #-0
 248:	3a080300 	bcc	200e50 <__bss_end__+0x1f7210>
 24c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 250:	000b1c13 	andeq	r1, fp, r3, lsl ip
 254:	00340d00 	eorseq	r0, r4, r0, lsl #26
 258:	0b3a0803 	bleq	e8226c <__bss_end__+0xe7862c>
 25c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 260:	340e0000 	strcc	r0, [lr], #-0
 264:	3a080300 	bcc	200e6c <__bss_end__+0x1f722c>
 268:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 26c:	00180213 	andseq	r0, r8, r3, lsl r2
 270:	010b0f00 	tsteq	fp, r0, lsl #30
 274:	06120111 			; <UNDEFINED> instruction: 0x06120111
 278:	00001301 	andeq	r1, r0, r1, lsl #6
 27c:	03003410 	movweq	r3, #1040	; 0x410
 280:	3b0b3a08 	blcc	2ceaa8 <__bss_end__+0x2c4e68>
 284:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 288:	11000017 	tstne	r0, r7, lsl r0
 28c:	01018289 	smlabbeq	r1, r9, r2, r8
 290:	13310111 	teqne	r1, #1073741828	; 0x40000004
 294:	00001301 	andeq	r1, r0, r1, lsl #6
 298:	01828a12 	orreq	r8, r2, r2, lsl sl
 29c:	91180200 	tstls	r8, r0, lsl #4
 2a0:	00001842 	andeq	r1, r0, r2, asr #16
 2a4:	01828913 	orreq	r8, r2, r3, lsl r9
 2a8:	31011100 	mrscc	r1, (UNDEF: 17)
 2ac:	14000013 	strne	r0, [r0], #-19
 2b0:	08030005 	stmdaeq	r3, {r0, r2}
 2b4:	0b3b0b3a 	bleq	ec2fa4 <__bss_end__+0xeb9364>
 2b8:	17021349 	strne	r1, [r2, -r9, asr #6]
 2bc:	34150000 	ldrcc	r0, [r5], #-0
 2c0:	490e0300 	stmdbmi	lr, {r8, r9}
 2c4:	02193413 	andseq	r3, r9, #318767104	; 0x13000000
 2c8:	16000018 			; <UNDEFINED> instruction: 0x16000018
 2cc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2d0:	0b3a0e03 	bleq	e83ae4 <__bss_end__+0xe79ea4>
 2d4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 2d8:	1301193c 	movwne	r1, #6460	; 0x193c
 2dc:	05170000 	ldreq	r0, [r7, #-0]
 2e0:	00134900 	andseq	r4, r3, r0, lsl #18
 2e4:	002e1800 	eoreq	r1, lr, r0, lsl #16
 2e8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 2ec:	0b3b0b3a 	bleq	ec2fdc <__bss_end__+0xeb939c>
 2f0:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 2f4:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 2f8:	03193f01 	tsteq	r9, #1, 30
 2fc:	3b0b3a0e 	blcc	2ceb3c <__bss_end__+0x2c4efc>
 300:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 304:	01193c13 	tsteq	r9, r3, lsl ip
 308:	1a000013 	bne	35c <_start-0x7ca4>
 30c:	00000018 	andeq	r0, r0, r8, lsl r0
 310:	01110100 	tsteq	r1, r0, lsl #2
 314:	0b130e25 	bleq	4c3bb0 <__bss_end__+0x4b9f70>
 318:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 31c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 320:	00001710 	andeq	r1, r0, r0, lsl r7
 324:	0b002402 	bleq	9334 <rpi_putchar+0xcc>
 328:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 32c:	03000008 	movweq	r0, #8
 330:	0b0b0024 	bleq	2c03c8 <__bss_end__+0x2b6788>
 334:	0e030b3e 	vmoveq.16	d3[0], r0
 338:	16040000 	strne	r0, [r4], -r0
 33c:	3a0e0300 	bcc	380f44 <__bss_end__+0x377304>
 340:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 344:	05000013 	streq	r0, [r0, #-19]
 348:	0b0b000f 	bleq	2c038c <__bss_end__+0x2b674c>
 34c:	00001349 	andeq	r1, r0, r9, asr #6
 350:	49002606 	stmdbmi	r0, {r1, r2, r9, sl, sp}
 354:	07000013 	smladeq	r0, r3, r0, r0
 358:	0b0b0113 	bleq	2c07ac <__bss_end__+0x2b6b6c>
 35c:	0b3b0b3a 	bleq	ec304c <__bss_end__+0xeb940c>
 360:	00001301 	andeq	r1, r0, r1, lsl #6
 364:	03000d08 	movweq	r0, #3336	; 0xd08
 368:	3b0b3a0e 	blcc	2ceba8 <__bss_end__+0x2c4f68>
 36c:	0b13490b 	bleq	4d27a0 <__bss_end__+0x4c8b60>
 370:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
 374:	000b380b 	andeq	r3, fp, fp, lsl #16
 378:	01040900 	tsteq	r4, r0, lsl #18
 37c:	0b3a0b0b 	bleq	e82fb0 <__bss_end__+0xe79370>
 380:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 384:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
 388:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 38c:	0b00000d 	bleq	3c8 <_start-0x7c38>
 390:	0e03012e 	adfeqsp	f0, f3, #0.5
 394:	0b3b0b3a 	bleq	ec3084 <__bss_end__+0xeb9444>
 398:	01111927 	tsteq	r1, r7, lsr #18
 39c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3a0:	01194297 			; <UNDEFINED> instruction: 0x01194297
 3a4:	0c000013 	stceq	0, cr0, [r0], {19}
 3a8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 3ac:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
 3b0:	00001802 	andeq	r1, r0, r2, lsl #16
 3b4:	0182890d 	orreq	r8, r2, sp, lsl #18
 3b8:	31011101 	tstcc	r1, r1, lsl #2
 3bc:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 3c0:	0001828a 	andeq	r8, r1, sl, lsl #5
 3c4:	42911802 	addsmi	r1, r1, #131072	; 0x20000
 3c8:	0f000018 	svceq	0x00000018
 3cc:	13490101 	movtne	r0, #37121	; 0x9101
 3d0:	00001301 	andeq	r1, r0, r1, lsl #6
 3d4:	49002110 	stmdbmi	r0, {r4, r8, sp}
 3d8:	000b2f13 	andeq	r2, fp, r3, lsl pc
 3dc:	012e1100 	teqeq	lr, r0, lsl #2
 3e0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 3e4:	0b3b0b3a 	bleq	ec30d4 <__bss_end__+0xeb9494>
 3e8:	01111927 	tsteq	r1, r7, lsr #18
 3ec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3f0:	01194297 			; <UNDEFINED> instruction: 0x01194297
 3f4:	12000013 	andne	r0, r0, #19
 3f8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 3fc:	0b3b0b3a 	bleq	ec30ec <__bss_end__+0xeb94ac>
 400:	17021349 	strne	r1, [r2, -r9, asr #6]
 404:	89130000 	ldmdbhi	r3, {}	; <UNPREDICTABLE>
 408:	11000182 	smlabbne	r0, r2, r1, r0
 40c:	00133101 	andseq	r3, r3, r1, lsl #2
 410:	82891400 	addhi	r1, r9, #0, 8
 414:	01110101 	tsteq	r1, r1, lsl #2
 418:	13011331 	movwne	r1, #4913	; 0x1331
 41c:	34150000 	ldrcc	r0, [r5], #-0
 420:	3a0e0300 	bcc	381028 <__bss_end__+0x3773e8>
 424:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 428:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 42c:	16000018 			; <UNDEFINED> instruction: 0x16000018
 430:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 434:	0b3a0e03 	bleq	e83c48 <__bss_end__+0xe7a008>
 438:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 43c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 440:	00001301 	andeq	r1, r0, r1, lsl #6
 444:	49000517 	stmdbmi	r0, {r0, r1, r2, r4, r8, sl}
 448:	18000013 	stmdane	r0, {r0, r1, r4}
 44c:	00000018 	andeq	r0, r0, r8, lsl r0
 450:	3f012e19 	svccc	0x00012e19
 454:	3a0e0319 	bcc	3810c0 <__bss_end__+0x377480>
 458:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 45c:	00193c19 	andseq	r3, r9, r9, lsl ip
 460:	11010000 	mrsne	r0, (UNDEF: 1)
 464:	130e2501 	movwne	r2, #58625	; 0xe501
 468:	1b0e030b 	blne	38109c <__bss_end__+0x37745c>
 46c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 470:	00171006 	andseq	r1, r7, r6
 474:	00160200 	andseq	r0, r6, r0, lsl #4
 478:	0b3a0e03 	bleq	e83c8c <__bss_end__+0xe7a04c>
 47c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 480:	13030000 	movwne	r0, #12288	; 0x3000
 484:	0b0e0301 	bleq	381090 <__bss_end__+0x377450>
 488:	3b0b3a0b 	blcc	2cecbc <__bss_end__+0x2c507c>
 48c:	0013010b 	andseq	r0, r3, fp, lsl #2
 490:	000d0400 	andeq	r0, sp, r0, lsl #8
 494:	13490e03 	movtne	r0, #40451	; 0x9e03
 498:	19340b38 	ldmdbne	r4!, {r3, r4, r5, r8, r9, fp}
 49c:	0f050000 	svceq	0x00050000
 4a0:	000b0b00 	andeq	r0, fp, r0, lsl #22
 4a4:	00240600 	eoreq	r0, r4, r0, lsl #12
 4a8:	0b3e0b0b 	bleq	f830dc <__bss_end__+0xf7949c>
 4ac:	00000803 	andeq	r0, r0, r3, lsl #16
 4b0:	0b002407 	bleq	94d4 <__FUNCTION__.4168+0x4>
 4b4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 4b8:	0800000e 	stmdaeq	r0, {r1, r2, r3}
 4bc:	0b0b000f 	bleq	2c0500 <__bss_end__+0x2b68c0>
 4c0:	00001349 	andeq	r1, r0, r9, asr #6
 4c4:	49002609 	stmdbmi	r0, {r0, r3, r9, sl, sp}
 4c8:	0a000013 	beq	51c <_start-0x7ae4>
 4cc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 4d0:	0b3a0e03 	bleq	e83ce4 <__bss_end__+0xe7a0a4>
 4d4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 4d8:	01111349 	tsteq	r1, r9, asr #6
 4dc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4e0:	01194297 			; <UNDEFINED> instruction: 0x01194297
 4e4:	0b000013 	bleq	538 <_start-0x7ac8>
 4e8:	08030005 	stmdaeq	r3, {r0, r2}
 4ec:	0b3b0b3a 	bleq	ec31dc <__bss_end__+0xeb959c>
 4f0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 4f4:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
 4f8:	0d000000 	stceq	0, cr0, [r0, #-0]
 4fc:	08030034 	stmdaeq	r3, {r2, r4, r5}
 500:	0b3b0b3a 	bleq	ec31f0 <__bss_end__+0xeb95b0>
 504:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 508:	340e0000 	strcc	r0, [lr], #-0
 50c:	3a0e0300 	bcc	381114 <__bss_end__+0x3774d4>
 510:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 514:	00180213 	andseq	r0, r8, r3, lsl r2
 518:	00340f00 	eorseq	r0, r4, r0, lsl #30
 51c:	0b3a0803 	bleq	e82530 <__bss_end__+0xe788f0>
 520:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 524:	00001702 	andeq	r1, r0, r2, lsl #14
 528:	01828910 	orreq	r8, r2, r0, lsl r9
 52c:	31011101 	tstcc	r1, r1, lsl #2
 530:	00130113 	andseq	r0, r3, r3, lsl r1
 534:	828a1100 	addhi	r1, sl, #0, 2
 538:	18020001 	stmdane	r2, {r0}
 53c:	00184291 	mulseq	r8, r1, r2
 540:	82891200 	addhi	r1, r9, #0, 4
 544:	01110101 	tsteq	r1, r1, lsl #2
 548:	01130000 	tsteq	r3, r0
 54c:	01134901 	tsteq	r3, r1, lsl #18
 550:	14000013 	strne	r0, [r0], #-19
 554:	13490021 	movtne	r0, #36897	; 0x9021
 558:	0000052f 	andeq	r0, r0, pc, lsr #10
 55c:	27011515 	smladcs	r1, r5, r5, r1
 560:	01134919 	tsteq	r3, r9, lsl r9
 564:	16000013 			; <UNDEFINED> instruction: 0x16000013
 568:	13490005 	movtne	r0, #36869	; 0x9005
 56c:	34170000 	ldrcc	r0, [r7], #-0
 570:	3a0e0300 	bcc	381178 <__bss_end__+0x377538>
 574:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 578:	3c193f13 	ldccc	15, cr3, [r9], {19}
 57c:	18000019 	stmdane	r0, {r0, r3, r4}
 580:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 584:	0b3a0e03 	bleq	e83d98 <__bss_end__+0xe7a158>
 588:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 58c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 590:	01000000 	mrseq	r0, (UNDEF: 0)
 594:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 598:	0e030b13 	vmoveq.32	d3[0], r0
 59c:	01110e1b 	tsteq	r1, fp, lsl lr
 5a0:	17100612 			; <UNDEFINED> instruction: 0x17100612
 5a4:	24020000 	strcs	r0, [r2], #-0
 5a8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 5ac:	0008030b 	andeq	r0, r8, fp, lsl #6
 5b0:	00240300 	eoreq	r0, r4, r0, lsl #6
 5b4:	0b3e0b0b 	bleq	f831e8 <__bss_end__+0xf795a8>
 5b8:	00000e03 	andeq	r0, r0, r3, lsl #28
 5bc:	0b000f04 	bleq	41d4 <_start-0x3e2c>
 5c0:	0013490b 	andseq	r4, r3, fp, lsl #18
 5c4:	00260500 	eoreq	r0, r6, r0, lsl #10
 5c8:	00001349 	andeq	r1, r0, r9, asr #6
 5cc:	3f012e06 	svccc	0x00012e06
 5d0:	3a0e0319 	bcc	38123c <__bss_end__+0x3775fc>
 5d4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 5d8:	11134919 	tstne	r3, r9, lsl r9
 5dc:	40061201 	andmi	r1, r6, r1, lsl #4
 5e0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 5e4:	00001301 	andeq	r1, r0, r1, lsl #6
 5e8:	03000507 	movweq	r0, #1287	; 0x507
 5ec:	3b0b3a08 	blcc	2cee14 <__bss_end__+0x2c51d4>
 5f0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 5f4:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
 5f8:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 5fc:	13011349 	movwne	r1, #4937	; 0x1349
 600:	05090000 	streq	r0, [r9, #-0]
 604:	00134900 	andseq	r4, r3, r0, lsl #18
 608:	00340a00 	eorseq	r0, r4, r0, lsl #20
 60c:	0b3a0e03 	bleq	e83e20 <__bss_end__+0xe7a1e0>
 610:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 614:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 618:	340b0000 	strcc	r0, [fp], #-0
 61c:	3a0e0300 	bcc	381224 <__bss_end__+0x3775e4>
 620:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 624:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 628:	00000018 	andeq	r0, r0, r8, lsl r0
 62c:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 630:	030b130e 	movweq	r1, #45838	; 0xb30e
 634:	110e1b0e 	tstne	lr, lr, lsl #22
 638:	10061201 	andne	r1, r6, r1, lsl #4
 63c:	02000017 	andeq	r0, r0, #23
 640:	0b0b0024 	bleq	2c06d8 <__bss_end__+0x2b6a98>
 644:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 648:	24030000 	strcs	r0, [r3], #-0
 64c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 650:	000e030b 	andeq	r0, lr, fp, lsl #6
 654:	000f0400 	andeq	r0, pc, r0, lsl #8
 658:	00000b0b 	andeq	r0, r0, fp, lsl #22
 65c:	0b000f05 	bleq	4278 <_start-0x3d88>
 660:	0013490b 	andseq	r4, r3, fp, lsl #18
 664:	00260600 	eoreq	r0, r6, r0, lsl #12
 668:	00001349 	andeq	r1, r0, r9, asr #6
 66c:	03001607 	movweq	r1, #1543	; 0x607
 670:	3b0b3a0e 	blcc	2ceeb0 <__bss_end__+0x2c5270>
 674:	0013490b 	andseq	r4, r3, fp, lsl #18
 678:	01130800 	tsteq	r3, r0, lsl #16
 67c:	0b0b0e03 	bleq	2c3e90 <__bss_end__+0x2ba250>
 680:	0b3b0b3a 	bleq	ec3370 <__bss_end__+0xeb9730>
 684:	00001301 	andeq	r1, r0, r1, lsl #6
 688:	03000d09 	movweq	r0, #3337	; 0xd09
 68c:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
 690:	0019340b 	andseq	r3, r9, fp, lsl #8
 694:	012e0a00 	teqeq	lr, r0, lsl #20
 698:	0b3a0e03 	bleq	e83eac <__bss_end__+0xe7a26c>
 69c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 6a0:	01111349 	tsteq	r1, r9, asr #6
 6a4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 6a8:	01194297 			; <UNDEFINED> instruction: 0x01194297
 6ac:	0b000013 	bleq	700 <_start-0x7900>
 6b0:	08030005 	stmdaeq	r3, {r0, r2}
 6b4:	0b3b0b3a 	bleq	ec33a4 <__bss_end__+0xeb9764>
 6b8:	17021349 	strne	r1, [r2, -r9, asr #6]
 6bc:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
 6c0:	3a080301 	bcc	2012cc <__bss_end__+0x1f768c>
 6c4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 6c8:	11134919 	tstne	r3, r9, lsl r9
 6cc:	40061201 	andmi	r1, r6, r1, lsl #4
 6d0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 6d4:	00001301 	andeq	r1, r0, r1, lsl #6
 6d8:	0300050d 	movweq	r0, #1293	; 0x50d
 6dc:	3b0b3a0e 	blcc	2cef1c <__bss_end__+0x2c52dc>
 6e0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 6e4:	0e000017 	mcreq	0, 0, r0, cr0, cr7, {0}
 6e8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 6ec:	0b3b0b3a 	bleq	ec33dc <__bss_end__+0xeb979c>
 6f0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 6f4:	340f0000 	strcc	r0, [pc], #-0	; 6fc <_start-0x7904>
 6f8:	3a080300 	bcc	201300 <__bss_end__+0x1f76c0>
 6fc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 700:	00180213 	andseq	r0, r8, r3, lsl r2
 704:	00341000 	eorseq	r1, r4, r0
 708:	0b3a0803 	bleq	e8271c <__bss_end__+0xe78adc>
 70c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 710:	00001702 	andeq	r1, r0, r2, lsl #14
 714:	03003411 	movweq	r3, #1041	; 0x411
 718:	3413490e 	ldrcc	r4, [r3], #-2318	; 0x90e
 71c:	00180219 	andseq	r0, r8, r9, lsl r2
 720:	010b1200 	mrseq	r1, R11_fiq
 724:	06120111 			; <UNDEFINED> instruction: 0x06120111
 728:	00001301 	andeq	r1, r0, r1, lsl #6
 72c:	03003413 	movweq	r3, #1043	; 0x413
 730:	3b0b3a0e 	blcc	2cef70 <__bss_end__+0x2c5330>
 734:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 738:	14000017 	strne	r0, [r0], #-23
 73c:	01018289 	smlabbeq	r1, r9, r2, r8
 740:	13310111 	teqne	r1, #1073741828	; 0x40000004
 744:	00001301 	andeq	r1, r0, r1, lsl #6
 748:	01828a15 	orreq	r8, r2, r5, lsl sl
 74c:	91180200 	tstls	r8, r0, lsl #4
 750:	00001842 	andeq	r1, r0, r2, asr #16
 754:	01828916 	orreq	r8, r2, r6, lsl r9
 758:	31011100 	mrscc	r1, (UNDEF: 17)
 75c:	17000013 	smladne	r0, r3, r0, r0
 760:	01018289 	smlabbeq	r1, r9, r2, r8
 764:	13310111 	teqne	r1, #1073741828	; 0x40000004
 768:	01180000 	tsteq	r8, r0
 76c:	01134901 	tsteq	r3, r1, lsl #18
 770:	19000013 	stmdbne	r0, {r0, r1, r4}
 774:	13490021 	movtne	r0, #36897	; 0x9021
 778:	00000b2f 	andeq	r0, r0, pc, lsr #22
 77c:	3f012e1a 	svccc	0x00012e1a
 780:	3a0e0319 	bcc	3813ec <__bss_end__+0x3777ac>
 784:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 788:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 78c:	97184006 	ldrls	r4, [r8, -r6]
 790:	13011942 	movwne	r1, #6466	; 0x1942
 794:	151b0000 	ldrne	r0, [fp, #-0]
 798:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
 79c:	00130113 	andseq	r0, r3, r3, lsl r1
 7a0:	00051c00 	andeq	r1, r5, r0, lsl #24
 7a4:	00001349 	andeq	r1, r0, r9, asr #6
 7a8:	3f012e1d 	svccc	0x00012e1d
 7ac:	3a0e0319 	bcc	381418 <__bss_end__+0x3777d8>
 7b0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 7b4:	11134919 	tstne	r3, r9, lsl r9
 7b8:	40061201 	andmi	r1, r6, r1, lsl #4
 7bc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 7c0:	00001301 	andeq	r1, r0, r1, lsl #6
 7c4:	11010b1e 	tstne	r1, lr, lsl fp
 7c8:	00061201 	andeq	r1, r6, r1, lsl #4
 7cc:	00341f00 	eorseq	r1, r4, r0, lsl #30
 7d0:	0b3a0e03 	bleq	e83fe4 <__bss_end__+0xe7a3a4>
 7d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 7d8:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 7dc:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
 7e0:	03193f01 	tsteq	r9, #1, 30
 7e4:	3b0b3a0e 	blcc	2cf024 <__bss_end__+0x2c53e4>
 7e8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 7ec:	01193c13 	tsteq	r9, r3, lsl ip
 7f0:	21000013 	tstcs	r0, r3, lsl r0
 7f4:	00000018 	andeq	r0, r0, r8, lsl r0
 7f8:	3f002e22 	svccc	0x00002e22
 7fc:	3a0e0319 	bcc	381468 <__bss_end__+0x377828>
 800:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 804:	00193c19 	andseq	r3, r9, r9, lsl ip
 808:	11010000 	mrsne	r0, (UNDEF: 1)
 80c:	130e2501 	movwne	r2, #58625	; 0xe501
 810:	1b0e030b 	blne	381444 <__bss_end__+0x377804>
 814:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 818:	00171006 	andseq	r1, r7, r6
 81c:	00240200 	eoreq	r0, r4, r0, lsl #4
 820:	0b3e0b0b 	bleq	f83454 <__bss_end__+0xf79814>
 824:	00000803 	andeq	r0, r0, r3, lsl #16
 828:	0b002403 	bleq	983c <buf.4135>
 82c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 830:	0400000e 	streq	r0, [r0], #-14
 834:	0b0b000f 	bleq	2c0878 <__bss_end__+0x2b6c38>
 838:	00001349 	andeq	r1, r0, r9, asr #6
 83c:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
 840:	06000013 			; <UNDEFINED> instruction: 0x06000013
 844:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 848:	0b3a0e03 	bleq	e8405c <__bss_end__+0xe7a41c>
 84c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 850:	06120111 			; <UNDEFINED> instruction: 0x06120111
 854:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 858:	00130119 	andseq	r0, r3, r9, lsl r1
 85c:	82890700 	addhi	r0, r9, #0, 14
 860:	01110101 	tsteq	r1, r1, lsl #2
 864:	00001301 	andeq	r1, r0, r1, lsl #6
 868:	01828a08 	orreq	r8, r2, r8, lsl #20
 86c:	91180200 	tstls	r8, r0, lsl #4
 870:	00001842 	andeq	r1, r0, r2, asr #16
 874:	01828909 	orreq	r8, r2, r9, lsl #18
 878:	31011101 	tstcc	r1, r1, lsl #2
 87c:	00130113 	andseq	r0, r3, r3, lsl r1
 880:	82890a00 	addhi	r0, r9, #0, 20
 884:	01110001 	tsteq	r1, r1
 888:	00001331 	andeq	r1, r0, r1, lsr r3
 88c:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
 890:	01134919 	tsteq	r3, r9, lsl r9
 894:	0c000013 	stceq	0, cr0, [r0], {19}
 898:	13490005 	movtne	r0, #36869	; 0x9005
 89c:	340d0000 	strcc	r0, [sp], #-0
 8a0:	3a0e0300 	bcc	3814a8 <__bss_end__+0x377868>
 8a4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 8a8:	3c193f13 	ldccc	15, cr3, [r9], {19}
 8ac:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
 8b0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 8b4:	0b3a0e03 	bleq	e840c8 <__bss_end__+0xe7a488>
 8b8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 8bc:	1301193c 	movwne	r1, #6460	; 0x193c
 8c0:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 8c4:	03193f00 	tsteq	r9, #0, 30
 8c8:	3b0b3a0e 	blcc	2cf108 <__bss_end__+0x2c54c8>
 8cc:	3c19270b 	ldccc	7, cr2, [r9], {11}
 8d0:	00000019 	andeq	r0, r0, r9, lsl r0
 8d4:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 8d8:	030b130e 	movweq	r1, #45838	; 0xb30e
 8dc:	110e1b0e 	tstne	lr, lr, lsl #22
 8e0:	10061201 	andne	r1, r6, r1, lsl #4
 8e4:	02000017 	andeq	r0, r0, #23
 8e8:	0b0b0024 	bleq	2c0980 <__bss_end__+0x2b6d40>
 8ec:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 8f0:	24030000 	strcs	r0, [r3], #-0
 8f4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 8f8:	000e030b 	andeq	r0, lr, fp, lsl #6
 8fc:	012e0400 	teqeq	lr, r0, lsl #8
 900:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 904:	0b3b0b3a 	bleq	ec35f4 <__bss_end__+0xeb99b4>
 908:	06120111 			; <UNDEFINED> instruction: 0x06120111
 90c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 910:	00130119 	andseq	r0, r3, r9, lsl r1
 914:	00340500 	eorseq	r0, r4, r0, lsl #10
 918:	0b3a0e03 	bleq	e8412c <__bss_end__+0xe7a4ec>
 91c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 920:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 924:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
 928:	03193f01 	tsteq	r9, #1, 30
 92c:	3b0b3a0e 	blcc	2cf16c <__bss_end__+0x2c552c>
 930:	01193c0b 	tsteq	r9, fp, lsl #24
 934:	07000013 	smladeq	r0, r3, r0, r0
 938:	00000018 	andeq	r0, r0, r8, lsl r0
 93c:	03003408 	movweq	r3, #1032	; 0x408
 940:	3b0b3a08 	blcc	2cf168 <__bss_end__+0x2c5528>
 944:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 948:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
 94c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 950:	0b3b0b3a 	bleq	ec3640 <__bss_end__+0xeb9a00>
 954:	00001349 	andeq	r1, r0, r9, asr #6
 958:	0182890a 	orreq	r8, r2, sl, lsl #18
 95c:	31011100 	mrscc	r1, (UNDEF: 17)
 960:	0b000013 	bleq	9b4 <_start-0x764c>
 964:	0b0b000f 	bleq	2c09a8 <__bss_end__+0x2b6d68>
 968:	00001349 	andeq	r1, r0, r9, asr #6
 96c:	3f002e0c 	svccc	0x00002e0c
 970:	3a0e0319 	bcc	3815dc <__bss_end__+0x37799c>
 974:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 978:	00193c19 	andseq	r3, r9, r9, lsl ip
 97c:	11010000 	mrsne	r0, (UNDEF: 1)
 980:	130e2501 	movwne	r2, #58625	; 0xe501
 984:	1b0e030b 	blne	3815b8 <__bss_end__+0x377978>
 988:	1117550e 	tstne	r7, lr, lsl #10
 98c:	00171001 	andseq	r1, r7, r1
 990:	00240200 	eoreq	r0, r4, r0, lsl #4
 994:	0b3e0b0b 	bleq	f835c8 <__bss_end__+0xf79988>
 998:	00000803 	andeq	r0, r0, r3, lsl #16
 99c:	0b002403 	bleq	99b0 <buf.4135+0x174>
 9a0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 9a4:	0400000e 	streq	r0, [r0], #-14
 9a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 9ac:	0b3a0e03 	bleq	e841c0 <__bss_end__+0xe7a580>
 9b0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 9b4:	01111349 	tsteq	r1, r9, asr #6
 9b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 9bc:	01194297 			; <UNDEFINED> instruction: 0x01194297
 9c0:	05000013 	streq	r0, [r0, #-19]
 9c4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 9c8:	0b3b0b3a 	bleq	ec36b8 <__bss_end__+0xeb9a78>
 9cc:	17021349 	strne	r1, [r2, -r9, asr #6]
 9d0:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
 9d4:	03193f01 	tsteq	r9, #1, 30
 9d8:	3b0b3a0e 	blcc	2cf218 <__bss_end__+0x2c55d8>
 9dc:	1119270b 	tstne	r9, fp, lsl #14
 9e0:	40061201 	andmi	r1, r6, r1, lsl #4
 9e4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 9e8:	00001301 	andeq	r1, r0, r1, lsl #6
 9ec:	03003407 	movweq	r3, #1031	; 0x407
 9f0:	3b0b3a0e 	blcc	2cf230 <__bss_end__+0x2c55f0>
 9f4:	1c13490b 	ldcne	9, cr4, [r3], {11}
 9f8:	08000006 	stmdaeq	r0, {r1, r2}
 9fc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 a00:	0b3b0b3a 	bleq	ec36f0 <__bss_end__+0xeb9ab0>
 a04:	0b1c1349 	bleq	705730 <__bss_end__+0x6fbaf0>
 a08:	89090000 	stmdbhi	r9, {}	; <UNPREDICTABLE>
 a0c:	11000182 	smlabbne	r0, r2, r1, r0
 a10:	00133101 	andseq	r3, r3, r1, lsl #2
 a14:	82890a00 	addhi	r0, r9, #0, 20
 a18:	01110101 	tsteq	r1, r1, lsl #2
 a1c:	13011331 	movwne	r1, #4913	; 0x1331
 a20:	8a0b0000 	bhi	2c0a28 <__bss_end__+0x2b6de8>
 a24:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
 a28:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
 a2c:	890c0000 	stmdbhi	ip, {}	; <UNPREDICTABLE>
 a30:	11010182 	smlabbne	r1, r2, r1, r0
 a34:	00133101 	andseq	r3, r3, r1, lsl #2
 a38:	00260d00 	eoreq	r0, r6, r0, lsl #26
 a3c:	00001349 	andeq	r1, r0, r9, asr #6
 a40:	3f012e0e 	svccc	0x00012e0e
 a44:	3a0e0319 	bcc	3816b0 <__bss_end__+0x377a70>
 a48:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 a4c:	01193c19 	tsteq	r9, r9, lsl ip
 a50:	0f000013 	svceq	0x00000013
 a54:	13490005 	movtne	r0, #36869	; 0x9005
 a58:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 a5c:	03193f01 	tsteq	r9, #1, 30
 a60:	3b0b3a0e 	blcc	2cf2a0 <__bss_end__+0x2c5660>
 a64:	3c19270b 	ldccc	7, cr2, [r9], {11}
 a68:	00000019 	andeq	r0, r0, r9, lsl r0
 a6c:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 a70:	030b130e 	movweq	r1, #45838	; 0xb30e
 a74:	110e1b0e 	tstne	lr, lr, lsl #22
 a78:	10061201 	andne	r1, r6, r1, lsl #4
 a7c:	02000017 	andeq	r0, r0, #23
 a80:	0b0b0024 	bleq	2c0b18 <__bss_end__+0x2b6ed8>
 a84:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 a88:	24030000 	strcs	r0, [r3], #-0
 a8c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 a90:	000e030b 	andeq	r0, lr, fp, lsl #6
 a94:	012e0400 	teqeq	lr, r0, lsl #8
 a98:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 a9c:	0b3b0b3a 	bleq	ec378c <__bss_end__+0xeb9b4c>
 aa0:	01111927 	tsteq	r1, r7, lsr #18
 aa4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 aa8:	01194297 			; <UNDEFINED> instruction: 0x01194297
 aac:	05000013 	streq	r0, [r0, #-19]
 ab0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 ab4:	0b3b0b3a 	bleq	ec37a4 <__bss_end__+0xeb9b64>
 ab8:	17021349 	strne	r1, [r2, -r9, asr #6]
 abc:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
 ac0:	03193f01 	tsteq	r9, #1, 30
 ac4:	3b0b3a0e 	blcc	2cf304 <__bss_end__+0x2c56c4>
 ac8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 acc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 ad0:	97184006 	ldrls	r4, [r8, -r6]
 ad4:	13011942 	movwne	r1, #6466	; 0x1942
 ad8:	89070000 	stmdbhi	r7, {}	; <UNPREDICTABLE>
 adc:	11010182 	smlabbne	r1, r2, r1, r0
 ae0:	00133101 	andseq	r3, r3, r1, lsl #2
 ae4:	828a0800 	addhi	r0, sl, #0, 16
 ae8:	18020001 	stmdane	r2, {r0}
 aec:	00184291 	mulseq	r8, r1, r2
 af0:	00340900 	eorseq	r0, r4, r0, lsl #18
 af4:	0b3a0803 	bleq	e82b08 <__bss_end__+0xe78ec8>
 af8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 afc:	00001702 	andeq	r1, r0, r2, lsl #14
 b00:	0182890a 	orreq	r8, r2, sl, lsl #18
 b04:	31011100 	mrscc	r1, (UNDEF: 17)
 b08:	0b000013 	bleq	b5c <_start-0x74a4>
 b0c:	08030005 	stmdaeq	r3, {r0, r2}
 b10:	0b3b0b3a 	bleq	ec3800 <__bss_end__+0xeb9bc0>
 b14:	17021349 	strne	r1, [r2, -r9, asr #6]
 b18:	340c0000 	strcc	r0, [ip], #-0
 b1c:	3a080300 	bcc	201724 <__bss_end__+0x1f7ae4>
 b20:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 b24:	00180213 	andseq	r0, r8, r3, lsl r2
 b28:	010b0d00 	tsteq	fp, r0, lsl #26
 b2c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 b30:	00001301 	andeq	r1, r0, r1, lsl #6
 b34:	3f012e0e 	svccc	0x00012e0e
 b38:	3a0e0319 	bcc	3817a4 <__bss_end__+0x377b64>
 b3c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 b40:	3c134919 	ldccc	9, cr4, [r3], {25}
 b44:	00130119 	andseq	r0, r3, r9, lsl r1
 b48:	00050f00 	andeq	r0, r5, r0, lsl #30
 b4c:	00001349 	andeq	r1, r0, r9, asr #6
 b50:	3f002e10 	svccc	0x00002e10
 b54:	3a0e0319 	bcc	3817c0 <__bss_end__+0x377b80>
 b58:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 b5c:	00193c19 	andseq	r3, r9, r9, lsl ip
 b60:	11010000 	mrsne	r0, (UNDEF: 1)
 b64:	130e2501 	movwne	r2, #58625	; 0xe501
 b68:	1b0e030b 	blne	38179c <__bss_end__+0x377b5c>
 b6c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 b70:	00171006 	andseq	r1, r7, r6
 b74:	00240200 	eoreq	r0, r4, r0, lsl #4
 b78:	0b3e0b0b 	bleq	f837ac <__bss_end__+0xf79b6c>
 b7c:	00000803 	andeq	r0, r0, r3, lsl #16
 b80:	0b002403 	bleq	9b94 <buf.4135+0x358>
 b84:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 b88:	0400000e 	streq	r0, [r0], #-14
 b8c:	0b0b0104 	bleq	2c0fa4 <__bss_end__+0x2b7364>
 b90:	0b3b0b3a 	bleq	ec3880 <__bss_end__+0xeb9c40>
 b94:	00001301 	andeq	r1, r0, r1, lsl #6
 b98:	03002805 	movweq	r2, #2053	; 0x805
 b9c:	000d1c0e 	andeq	r1, sp, lr, lsl #24
 ba0:	00160600 	andseq	r0, r6, r0, lsl #12
 ba4:	0b3a0e03 	bleq	e843b8 <__bss_end__+0xe7a778>
 ba8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 bac:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
 bb0:	3a0e0301 	bcc	3817bc <__bss_end__+0x377b7c>
 bb4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 bb8:	11134919 	tstne	r3, r9, lsl r9
 bbc:	40061201 	andmi	r1, r6, r1, lsl #4
 bc0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 bc4:	00001301 	andeq	r1, r0, r1, lsl #6
 bc8:	01828908 	orreq	r8, r2, r8, lsl #18
 bcc:	31011100 	mrscc	r1, (UNDEF: 17)
 bd0:	09000013 	stmdbeq	r0, {r0, r1, r4}
 bd4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 bd8:	0b3a0e03 	bleq	e843ec <__bss_end__+0xe7a7ac>
 bdc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 be0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 be4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 be8:	00130119 	andseq	r0, r3, r9, lsl r1
 bec:	82890a00 	addhi	r0, r9, #0, 20
 bf0:	01110101 	tsteq	r1, r1, lsl #2
 bf4:	13011331 	movwne	r1, #4913	; 0x1331
 bf8:	8a0b0000 	bhi	2c0c00 <__bss_end__+0x2b6fc0>
 bfc:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
 c00:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
 c04:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
 c08:	03193f01 	tsteq	r9, #1, 30
 c0c:	3b0b3a0e 	blcc	2cf44c <__bss_end__+0x2c580c>
 c10:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 c14:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 c18:	97184006 	ldrls	r4, [r8, -r6]
 c1c:	13011942 	movwne	r1, #6466	; 0x1942
 c20:	050d0000 	streq	r0, [sp, #-0]
 c24:	3a080300 	bcc	20182c <__bss_end__+0x1f7bec>
 c28:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 c2c:	00170213 	andseq	r0, r7, r3, lsl r2
 c30:	82890e00 	addhi	r0, r9, #0, 28
 c34:	01110101 	tsteq	r1, r1, lsl #2
 c38:	00001331 	andeq	r1, r0, r1, lsr r3
 c3c:	0300340f 	movweq	r3, #1039	; 0x40f
 c40:	3b0b3a0e 	blcc	2cf480 <__bss_end__+0x2c5840>
 c44:	3f13490b 	svccc	0x0013490b
 c48:	00180219 	andseq	r0, r8, r9, lsl r2
 c4c:	000f1000 	andeq	r1, pc, r0
 c50:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 c54:	35110000 	ldrcc	r0, [r1, #-0]
 c58:	00134900 	andseq	r4, r3, r0, lsl #18
 c5c:	012e1200 	teqeq	lr, r0, lsl #4
 c60:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 c64:	0b3b0b3a 	bleq	ec3954 <__bss_end__+0xeb9d14>
 c68:	13491927 	movtne	r1, #39207	; 0x9927
 c6c:	1301193c 	movwne	r1, #6460	; 0x193c
 c70:	05130000 	ldreq	r0, [r3, #-0]
 c74:	00134900 	andseq	r4, r3, r0, lsl #18
 c78:	00261400 	eoreq	r1, r6, r0, lsl #8
 c7c:	00001349 	andeq	r1, r0, r9, asr #6
 c80:	00003515 	andeq	r3, r0, r5, lsl r5
 c84:	002e1600 	eoreq	r1, lr, r0, lsl #12
 c88:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 c8c:	0b3b0b3a 	bleq	ec397c <__bss_end__+0xeb9d3c>
 c90:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 c94:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 c98:	03193f01 	tsteq	r9, #1, 30
 c9c:	3b0b3a0e 	blcc	2cf4dc <__bss_end__+0x2c589c>
 ca0:	3c19270b 	ldccc	7, cr2, [r9], {11}
 ca4:	00130119 	andseq	r0, r3, r9, lsl r1
 ca8:	11010000 	mrsne	r0, (UNDEF: 1)
 cac:	130e2501 	movwne	r2, #58625	; 0xe501
 cb0:	1b0e030b 	blne	3818e4 <__bss_end__+0x377ca4>
 cb4:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 cb8:	00171006 	andseq	r1, r7, r6
 cbc:	00240200 	eoreq	r0, r4, r0, lsl #4
 cc0:	0b3e0b0b 	bleq	f838f4 <__bss_end__+0xf79cb4>
 cc4:	00000e03 	andeq	r0, r0, r3, lsl #28
 cc8:	0b002403 	bleq	9cdc <__bss_end__+0x9c>
 ccc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 cd0:	04000008 	streq	r0, [r0], #-8
 cd4:	0b0b0104 	bleq	2c10ec <__bss_end__+0x2b74ac>
 cd8:	0b3b0b3a 	bleq	ec39c8 <__bss_end__+0xeb9d88>
 cdc:	00001301 	andeq	r1, r0, r1, lsl #6
 ce0:	03002805 	movweq	r2, #2053	; 0x805
 ce4:	000d1c0e 	andeq	r1, sp, lr, lsl #24
 ce8:	00160600 	andseq	r0, r6, r0, lsl #12
 cec:	0b3a0e03 	bleq	e84500 <__bss_end__+0xe7a8c0>
 cf0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 cf4:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
 cf8:	03193f01 	tsteq	r9, #1, 30
 cfc:	3b0b3a0e 	blcc	2cf53c <__bss_end__+0x2c58fc>
 d00:	1119270b 	tstne	r9, fp, lsl #14
 d04:	40061201 	andmi	r1, r6, r1, lsl #4
 d08:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 d0c:	00001301 	andeq	r1, r0, r1, lsl #6
 d10:	03000508 	movweq	r0, #1288	; 0x508
 d14:	3b0b3a08 	blcc	2cf53c <__bss_end__+0x2c58fc>
 d18:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 d1c:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
 d20:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 d24:	0b3b0b3a 	bleq	ec3a14 <__bss_end__+0xeb9dd4>
 d28:	17021349 	strne	r1, [r2, -r9, asr #6]
 d2c:	890a0000 	stmdbhi	sl, {}	; <UNPREDICTABLE>
 d30:	11010182 	smlabbne	r1, r2, r1, r0
 d34:	01133101 	tsteq	r3, r1, lsl #2
 d38:	0b000013 	bleq	d8c <_start-0x7274>
 d3c:	0001828a 	andeq	r8, r1, sl, lsl #5
 d40:	42911802 	addsmi	r1, r1, #131072	; 0x20000
 d44:	0c000018 	stceq	0, cr0, [r0], {24}
 d48:	01018289 	smlabbeq	r1, r9, r2, r8
 d4c:	13310111 	teqne	r1, #1073741828	; 0x40000004
 d50:	0f0d0000 	svceq	0x000d0000
 d54:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 d58:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 d5c:	13490035 	movtne	r0, #36917	; 0x9035
 d60:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 d64:	03193f01 	tsteq	r9, #1, 30
 d68:	3b0b3a0e 	blcc	2cf5a8 <__bss_end__+0x2c5968>
 d6c:	2019270b 	andscs	r2, r9, fp, lsl #14
 d70:	0013010b 	andseq	r0, r3, fp, lsl #2
 d74:	00051000 	andeq	r1, r5, r0
 d78:	0b3a0803 	bleq	e82d8c <__bss_end__+0xe7914c>
 d7c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 d80:	34110000 	ldrcc	r0, [r1], #-0
 d84:	3a0e0300 	bcc	38198c <__bss_end__+0x377d4c>
 d88:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 d8c:	12000013 	andne	r0, r0, #19
 d90:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
 d94:	06120111 			; <UNDEFINED> instruction: 0x06120111
 d98:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 d9c:	00130119 	andseq	r0, r3, r9, lsl r1
 da0:	00051300 	andeq	r1, r5, r0, lsl #6
 da4:	17021331 	smladxne	r2, r1, r3, r1
 da8:	34140000 	ldrcc	r0, [r4], #-0
 dac:	02133100 	andseq	r3, r3, #0, 2
 db0:	15000017 	strne	r0, [r0, #-23]
 db4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 db8:	0b3a0e03 	bleq	e845cc <__bss_end__+0xe7a98c>
 dbc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 dc0:	01111349 	tsteq	r1, r9, asr #6
 dc4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 dc8:	01194297 			; <UNDEFINED> instruction: 0x01194297
 dcc:	16000013 			; <UNDEFINED> instruction: 0x16000013
 dd0:	08030034 	stmdaeq	r3, {r2, r4, r5}
 dd4:	0b3b0b3a 	bleq	ec3ac4 <__bss_end__+0xeb9e84>
 dd8:	17021349 	strne	r1, [r2, -r9, asr #6]
 ddc:	89170000 	ldmdbhi	r7, {}	; <UNPREDICTABLE>
 de0:	11000182 	smlabbne	r0, r2, r1, r0
 de4:	00133101 	andseq	r3, r3, r1, lsl #2
 de8:	011d1800 	tsteq	sp, r0, lsl #16
 dec:	01111331 	tsteq	r1, r1, lsr r3
 df0:	0b580612 	bleq	1602640 <__bss_end__+0x15f8a00>
 df4:	13010b59 	movwne	r0, #7001	; 0x1b59
 df8:	0b190000 	bleq	640e00 <__bss_end__+0x6371c0>
 dfc:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 e00:	1a000006 	bne	e20 <_start-0x71e0>
 e04:	1331011d 	teqne	r1, #1073741831	; 0x40000007
 e08:	06120111 			; <UNDEFINED> instruction: 0x06120111
 e0c:	0b590b58 	bleq	1643b74 <__bss_end__+0x1639f34>
 e10:	051b0000 	ldreq	r0, [fp, #-0]
 e14:	3a0e0300 	bcc	381a1c <__bss_end__+0x377ddc>
 e18:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 e1c:	00170213 	andseq	r0, r7, r3, lsl r2
 e20:	00341c00 	eorseq	r1, r4, r0, lsl #24
 e24:	0b3a0e03 	bleq	e84638 <__bss_end__+0xe7a9f8>
 e28:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 e2c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 e30:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 e34:	03193f01 	tsteq	r9, #1, 30
 e38:	3b0b3a0e 	blcc	2cf678 <__bss_end__+0x2c5a38>
 e3c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 e40:	01193c13 	tsteq	r9, r3, lsl ip
 e44:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
 e48:	13490005 	movtne	r0, #36869	; 0x9005
 e4c:	261f0000 	ldrcs	r0, [pc], -r0
 e50:	00134900 	andseq	r4, r3, r0, lsl #18
 e54:	00352000 	eorseq	r2, r5, r0
 e58:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
 e5c:	03193f01 	tsteq	r9, #1, 30
 e60:	3b0b3a0e 	blcc	2cf6a0 <__bss_end__+0x2c5a60>
 e64:	3c19270b 	ldccc	7, cr2, [r9], {11}
 e68:	00130119 	andseq	r0, r3, r9, lsl r1
 e6c:	11010000 	mrsne	r0, (UNDEF: 1)
 e70:	130e2501 	movwne	r2, #58625	; 0xe501
 e74:	1b0e030b 	blne	381aa8 <__bss_end__+0x377e68>
 e78:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 e7c:	00171006 	andseq	r1, r7, r6
 e80:	00240200 	eoreq	r0, r4, r0, lsl #4
 e84:	0b3e0b0b 	bleq	f83ab8 <__bss_end__+0xf79e78>
 e88:	00000803 	andeq	r0, r0, r3, lsl #16
 e8c:	0b002403 	bleq	9ea0 <__bss_end__+0x260>
 e90:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 e94:	0400000e 	streq	r0, [r0], #-14
 e98:	0e03012e 	adfeqsp	f0, f3, #0.5
 e9c:	0b3b0b3a 	bleq	ec3b8c <__bss_end__+0xeb9f4c>
 ea0:	13491927 	movtne	r1, #39207	; 0x9927
 ea4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 ea8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 eac:	00130119 	andseq	r0, r3, r9, lsl r1
 eb0:	00050500 	andeq	r0, r5, r0, lsl #10
 eb4:	0b3a0803 	bleq	e82ec8 <__bss_end__+0xe79288>
 eb8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 ebc:	00001702 	andeq	r1, r0, r2, lsl #14
 ec0:	01828906 	orreq	r8, r2, r6, lsl #18
 ec4:	31011101 	tstcc	r1, r1, lsl #2
 ec8:	07000013 	smladeq	r0, r3, r0, r0
 ecc:	0001828a 	andeq	r8, r1, sl, lsl #5
 ed0:	42911802 	addsmi	r1, r1, #131072	; 0x20000
 ed4:	08000018 	stmdaeq	r0, {r3, r4}
 ed8:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 edc:	13011349 	movwne	r1, #4937	; 0x1349
 ee0:	05090000 	streq	r0, [r9, #-0]
 ee4:	00134900 	andseq	r4, r3, r0, lsl #18
 ee8:	00340a00 	eorseq	r0, r4, r0, lsl #20
 eec:	0b3a0e03 	bleq	e84700 <__bss_end__+0xe7aac0>
 ef0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 ef4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 ef8:	0f0b0000 	svceq	0x000b0000
 efc:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 f00:	0c000013 	stceq	0, cr0, [r0], {19}
 f04:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 f08:	0b3a0e03 	bleq	e8471c <__bss_end__+0xe7aadc>
 f0c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 f10:	0000193c 	andeq	r1, r0, ip, lsr r9
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	00000000 	andeq	r0, r0, r0
       4:	00000007 	andeq	r0, r0, r7
       8:	07500001 	ldrbeq	r0, [r0, -r1]
       c:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
      10:	04000000 	streq	r0, [r0], #-0
      14:	5001f300 	andpl	pc, r1, r0, lsl #6
      18:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      1c:	00000000 	andeq	r0, r0, r0
      20:	00001000 	andeq	r1, r0, r0
      24:	00001c00 	andeq	r1, r0, r0, lsl #24
      28:	50000100 	andpl	r0, r0, r0, lsl #2
	...
      34:	000000b8 	strheq	r0, [r0], -r8
      38:	000000d7 	ldrdeq	r0, [r0], -r7
      3c:	d7500001 	ldrble	r0, [r0, -r1]
      40:	ec000000 	stc	0, cr0, [r0], {-0}
      44:	01000000 	mrseq	r0, (UNDEF: 0)
      48:	00005500 	andeq	r5, r0, r0, lsl #10
      4c:	00000000 	andeq	r0, r0, r0
      50:	00b80000 	adcseq	r0, r8, r0
      54:	00c40000 	sbceq	r0, r4, r0
      58:	00020000 	andeq	r0, r2, r0
      5c:	00c49f30 	sbceq	r9, r4, r0, lsr pc
      60:	01a40000 			; <UNDEFINED> instruction: 0x01a40000
      64:	00010000 	andeq	r0, r1, r0
      68:	00000054 	andeq	r0, r0, r4, asr r0
      6c:	00000000 	andeq	r0, r0, r0
      70:	0000dc00 	andeq	sp, r0, r0, lsl #24
      74:	00011400 	andeq	r1, r1, r0, lsl #8
      78:	50000100 	andpl	r0, r0, r0, lsl #2
	...
      84:	00000108 	andeq	r0, r0, r8, lsl #2
      88:	00000198 	muleq	r0, r8, r1
      8c:	00550001 	subseq	r0, r5, r1
      90:	00000000 	andeq	r0, r0, r0
      94:	30000000 	andcc	r0, r0, r0
      98:	3c000000 	stccc	0, cr0, [r0], {-0}
      9c:	02000000 	andeq	r0, r0, #0
      a0:	3c9f3000 	ldccc	0, cr3, [pc], {0}
      a4:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
      a8:	01000000 	mrseq	r0, (UNDEF: 0)
      ac:	00005300 	andeq	r5, r0, r0, lsl #6
      b0:	00000000 	andeq	r0, r0, r0
      b4:	00680000 	rsbeq	r0, r8, r0
      b8:	00800000 	addeq	r0, r0, r0
      bc:	00010000 	andeq	r0, r1, r0
      c0:	00008050 	andeq	r8, r0, r0, asr r0
      c4:	00008f00 	andeq	r8, r0, r0, lsl #30
      c8:	91000200 	mrsls	r0, R8_usr
      cc:	00008f6c 	andeq	r8, r0, ip, ror #30
      d0:	0000a400 	andeq	sl, r0, r0, lsl #8
      d4:	f3000400 	vshl.u8	d0, d0, d0
      d8:	009f5001 	addseq	r5, pc, r1
      dc:	00000000 	andeq	r0, r0, r0
      e0:	a4000000 	strge	r0, [r0], #-0
      e4:	bc000000 	stclt	0, cr0, [r0], {-0}
      e8:	01000000 	mrseq	r0, (UNDEF: 0)
      ec:	00bc5000 	adcseq	r5, ip, r0
      f0:	00cb0000 	sbceq	r0, fp, r0
      f4:	00020000 	andeq	r0, r2, r0
      f8:	00cb6c91 	smulleq	r6, fp, r1, ip
      fc:	00e00000 	rsceq	r0, r0, r0
     100:	00040000 	andeq	r0, r4, r0
     104:	9f5001f3 	svcls	0x005001f3
	...
     110:	000000e0 	andeq	r0, r0, r0, ror #1
     114:	000000f8 	strdeq	r0, [r0], -r8
     118:	f8500001 			; <UNDEFINED> instruction: 0xf8500001
     11c:	07000000 	streq	r0, [r0, -r0]
     120:	02000001 	andeq	r0, r0, #1
     124:	076c9100 	strbeq	r9, [ip, -r0, lsl #2]!
     128:	1c000001 	stcne	0, cr0, [r0], {1}
     12c:	04000001 	streq	r0, [r0], #-1
     130:	5001f300 	andpl	pc, r1, r0, lsl #6
     134:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     138:	00000000 	andeq	r0, r0, r0
     13c:	00011c00 	andeq	r1, r1, r0, lsl #24
     140:	00013400 	andeq	r3, r1, r0, lsl #8
     144:	50000100 	andpl	r0, r0, r0, lsl #2
     148:	00000134 	andeq	r0, r0, r4, lsr r1
     14c:	00000143 	andeq	r0, r0, r3, asr #2
     150:	6c910002 	ldcvs	0, cr0, [r1], {2}
     154:	00000143 	andeq	r0, r0, r3, asr #2
     158:	00000158 	andeq	r0, r0, r8, asr r1
     15c:	01f30004 	mvnseq	r0, r4
     160:	00009f50 	andeq	r9, r0, r0, asr pc
     164:	00000000 	andeq	r0, r0, r0
     168:	01580000 	cmpeq	r8, r0
     16c:	01700000 	cmneq	r0, r0
     170:	00010000 	andeq	r0, r1, r0
     174:	00017050 	andeq	r7, r1, r0, asr r0
     178:	00017f00 	andeq	r7, r1, r0, lsl #30
     17c:	91000200 	mrsls	r0, R8_usr
     180:	00017f6c 	andeq	r7, r1, ip, ror #30
     184:	00019400 	andeq	r9, r1, r0, lsl #8
     188:	f3000400 	vshl.u8	d0, d0, d0
     18c:	009f5001 	addseq	r5, pc, r1
     190:	00000000 	andeq	r0, r0, r0
     194:	94000000 	strls	r0, [r0], #-0
     198:	ac000001 	stcge	0, cr0, [r0], {1}
     19c:	01000001 	tsteq	r0, r1
     1a0:	01ac5000 			; <UNDEFINED> instruction: 0x01ac5000
     1a4:	01bb0000 			; <UNDEFINED> instruction: 0x01bb0000
     1a8:	00020000 	andeq	r0, r2, r0
     1ac:	01bb6c91 			; <UNDEFINED> instruction: 0x01bb6c91
     1b0:	01d00000 	bicseq	r0, r0, r0
     1b4:	00040000 	andeq	r0, r4, r0
     1b8:	9f5001f3 	svcls	0x005001f3
	...
     1c4:	0000001c 	andeq	r0, r0, ip, lsl r0
     1c8:	00000027 	andeq	r0, r0, r7, lsr #32
     1cc:	27500001 	ldrbcs	r0, [r0, -r1]
     1d0:	5c000000 	stcpl	0, cr0, [r0], {-0}
     1d4:	01000000 	mrseq	r0, (UNDEF: 0)
     1d8:	00005400 	andeq	r5, r0, r0, lsl #8
     1dc:	00000000 	andeq	r0, r0, r0
     1e0:	002c0000 	eoreq	r0, ip, r0
     1e4:	00380000 	eorseq	r0, r8, r0
     1e8:	00010000 	andeq	r0, r1, r0
     1ec:	00003850 	andeq	r3, r0, r0, asr r8
     1f0:	00004800 	andeq	r4, r0, r0, lsl #16
     1f4:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     1f8:	00000048 	andeq	r0, r0, r8, asr #32
     1fc:	00000058 	andeq	r0, r0, r8, asr r0
     200:	00500001 	subseq	r0, r0, r1
	...
     20c:	10000000 	andne	r0, r0, r0
     210:	01000000 	mrseq	r0, (UNDEF: 0)
     214:	00105000 	andseq	r5, r0, r0
     218:	00340000 	eorseq	r0, r4, r0
     21c:	00010000 	andeq	r0, r1, r0
     220:	00000054 	andeq	r0, r0, r4, asr r0
	...
     22c:	00000400 	andeq	r0, r0, r0, lsl #8
     230:	50000100 	andpl	r0, r0, r0, lsl #2
     234:	00000004 	andeq	r0, r0, r4
     238:	0000000c 	andeq	r0, r0, ip
     23c:	30700003 	rsbscc	r0, r0, r3
     240:	00000c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
     244:	00001400 	andeq	r1, r0, r0, lsl #8
     248:	f3000400 	vshl.u8	d0, d0, d0
     24c:	009f5001 	addseq	r5, pc, r1
     250:	00000000 	andeq	r0, r0, r0
     254:	14000000 	strne	r0, [r0], #-0
     258:	20000000 	andcs	r0, r0, r0
     25c:	01000000 	mrseq	r0, (UNDEF: 0)
     260:	00205000 	eoreq	r5, r0, r0
     264:	002c0000 	eoreq	r0, ip, r0
     268:	00030000 	andeq	r0, r3, r0
     26c:	2c9f0170 	ldfcss	f0, [pc], {112}	; 0x70
     270:	40000000 	andmi	r0, r0, r0
     274:	01000000 	mrseq	r0, (UNDEF: 0)
     278:	00005000 	andeq	r5, r0, r0
     27c:	00000000 	andeq	r0, r0, r0
     280:	00140000 	andseq	r0, r4, r0
     284:	00180000 	andseq	r0, r8, r0
     288:	00010000 	andeq	r0, r1, r0
     28c:	00001851 	andeq	r1, r0, r1, asr r8
     290:	00004000 	andeq	r4, r0, r0
     294:	f3000400 	vshl.u8	d0, d0, d0
     298:	009f5101 	addseq	r5, pc, r1, lsl #2
     29c:	00000000 	andeq	r0, r0, r0
     2a0:	40000000 	andmi	r0, r0, r0
     2a4:	60000000 	andvs	r0, r0, r0
     2a8:	01000000 	mrseq	r0, (UNDEF: 0)
     2ac:	00605000 	rsbeq	r5, r0, r0
     2b0:	006c0000 	rsbeq	r0, ip, r0
     2b4:	00030000 	andeq	r0, r3, r0
     2b8:	6c9f0171 	ldfvss	f0, [pc], {113}	; 0x71
     2bc:	74000000 	strvc	r0, [r0], #-0
     2c0:	01000000 	mrseq	r0, (UNDEF: 0)
     2c4:	00745100 	rsbseq	r5, r4, r0, lsl #2
     2c8:	00800000 	addeq	r0, r0, r0
     2cc:	00030000 	andeq	r0, r3, r0
     2d0:	009f0171 	addseq	r0, pc, r1, ror r1	; <UNPREDICTABLE>
     2d4:	00000000 	andeq	r0, r0, r0
     2d8:	40000000 	andmi	r0, r0, r0
     2dc:	50000000 	andpl	r0, r0, r0
     2e0:	01000000 	mrseq	r0, (UNDEF: 0)
     2e4:	00505100 	subseq	r5, r0, r0, lsl #2
     2e8:	00800000 	addeq	r0, r0, r0
     2ec:	00040000 	andeq	r0, r4, r0
     2f0:	9f5101f3 	svcls	0x005101f3
	...
     2fc:	00000040 	andeq	r0, r0, r0, asr #32
     300:	00000058 	andeq	r0, r0, r8, asr r0
     304:	58520001 	ldmdapl	r2, {r0}^
     308:	64000000 	strvs	r0, [r0], #-0
     30c:	01000000 	mrseq	r0, (UNDEF: 0)
     310:	00645200 	rsbeq	r5, r4, r0, lsl #4
     314:	00680000 	rsbeq	r0, r8, r0
     318:	00030000 	andeq	r0, r3, r0
     31c:	689f0172 	ldmvs	pc, {r1, r4, r5, r6, r8}	; <UNPREDICTABLE>
     320:	80000000 	andhi	r0, r0, r0
     324:	01000000 	mrseq	r0, (UNDEF: 0)
     328:	00005200 	andeq	r5, r0, r0, lsl #4
     32c:	00000000 	andeq	r0, r0, r0
     330:	00400000 	subeq	r0, r0, r0
     334:	00540000 	subseq	r0, r4, r0
     338:	00010000 	andeq	r0, r1, r0
     33c:	00005453 	andeq	r5, r0, r3, asr r4
     340:	00007800 	andeq	r7, r0, r0, lsl #16
     344:	53000100 	movwpl	r0, #256	; 0x100
	...
     350:	00000048 	andeq	r0, r0, r8, asr #32
     354:	00000060 	andeq	r0, r0, r0, rrx
     358:	605c0001 	subsvs	r0, ip, r1
     35c:	80000000 	andhi	r0, r0, r0
     360:	0a000000 	beq	368 <_start-0x7c98>
     364:	5201f300 	andpl	pc, r1, #0, 6
     368:	1c5301f3 	ldfnee	f0, [r3], {243}	; 0xf3
     36c:	009f0123 	addseq	r0, pc, r3, lsr #2
     370:	00000000 	andeq	r0, r0, r0
     374:	80000000 	andhi	r0, r0, r0
     378:	a4000000 	strge	r0, [r0], #-0
     37c:	01000000 	mrseq	r0, (UNDEF: 0)
     380:	00a45000 	adceq	r5, r4, r0
     384:	01180000 	tsteq	r8, r0
     388:	00030000 	andeq	r0, r3, r0
     38c:	189f0270 	ldmne	pc, {r4, r5, r6, r9}	; <UNPREDICTABLE>
     390:	18000001 	stmdane	r0, {r0}
     394:	04000002 	streq	r0, [r0], #-2
     398:	5001f300 	andpl	pc, r1, r0, lsl #6
     39c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     3a0:	00000000 	andeq	r0, r0, r0
     3a4:	00008000 	andeq	r8, r0, r0
     3a8:	0000f000 	andeq	pc, r0, r0
     3ac:	51000100 	mrspl	r0, (UNDEF: 16)
     3b0:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     3b4:	00000160 	andeq	r0, r0, r0, ror #2
     3b8:	60550001 	subsvs	r0, r5, r1
     3bc:	68000001 	stmdavs	r0, {r0}
     3c0:	01000001 	tsteq	r0, r1
     3c4:	01685100 	cmneq	r8, r0, lsl #2
     3c8:	01880000 	orreq	r0, r8, r0
     3cc:	00010000 	andeq	r0, r1, r0
     3d0:	00018855 	andeq	r8, r1, r5, asr r8
     3d4:	00019c00 	andeq	r9, r1, r0, lsl #24
     3d8:	51000100 	mrspl	r0, (UNDEF: 16)
     3dc:	0000019c 	muleq	r0, ip, r1
     3e0:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     3e4:	bc550001 	mrrclt	0, 0, r0, r5, cr1
     3e8:	c4000001 	strgt	r0, [r0], #-1
     3ec:	01000001 	tsteq	r0, r1
     3f0:	01c45100 	biceq	r5, r4, r0, lsl #2
     3f4:	01fc0000 	mvnseq	r0, r0
     3f8:	00010000 	andeq	r0, r1, r0
     3fc:	0001fc55 	andeq	pc, r1, r5, asr ip	; <UNPREDICTABLE>
     400:	00021800 	andeq	r1, r2, r0, lsl #16
     404:	f3000400 	vshl.u8	d0, d0, d0
     408:	009f5101 	addseq	r5, pc, r1, lsl #2
     40c:	00000000 	andeq	r0, r0, r0
     410:	80000000 	andhi	r0, r0, r0
     414:	94000000 	strls	r0, [r0], #-0
     418:	01000000 	mrseq	r0, (UNDEF: 0)
     41c:	00945200 	addseq	r5, r4, r0, lsl #4
     420:	01fc0000 	mvnseq	r0, r0
     424:	00010000 	andeq	r0, r1, r0
     428:	0001fc54 	andeq	pc, r1, r4, asr ip	; <UNPREDICTABLE>
     42c:	00021800 	andeq	r1, r2, r0, lsl #16
     430:	f3000400 	vshl.u8	d0, d0, d0
     434:	009f5201 	addseq	r5, pc, r1, lsl #4
     438:	00000000 	andeq	r0, r0, r0
     43c:	80000000 	andhi	r0, r0, r0
     440:	00000000 	andeq	r0, r0, r0
     444:	01000001 	tsteq	r0, r1
     448:	01045300 	mrseq	r5, LR_abt
     44c:	01080000 	mrseq	r0, (UNDEF: 8)
     450:	00010000 	andeq	r0, r1, r0
     454:	00016053 	andeq	r6, r1, r3, asr r0
     458:	00016800 	andeq	r6, r1, r0, lsl #16
     45c:	53000100 	movwpl	r0, #256	; 0x100
     460:	00000168 	andeq	r0, r0, r8, ror #2
     464:	00000188 	andeq	r0, r0, r8, lsl #3
     468:	01f30004 	mvnseq	r0, r4
     46c:	01889f53 	orreq	r9, r8, r3, asr pc
     470:	01900000 	orrseq	r0, r0, r0
     474:	00010000 	andeq	r0, r1, r0
     478:	00019053 	andeq	r9, r1, r3, asr r0
     47c:	00019400 	andeq	r9, r1, r0, lsl #8
     480:	5c000100 	stfpls	f0, [r0], {-0}
     484:	00000194 	muleq	r0, r4, r1
     488:	0000019c 	muleq	r0, ip, r1
     48c:	9c530001 	mrrcls	0, 0, r0, r3, cr1
     490:	bc000001 	stclt	0, cr0, [r0], {1}
     494:	04000001 	streq	r0, [r0], #-1
     498:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
     49c:	0001bc9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
     4a0:	0001cc00 	andeq	ip, r1, r0, lsl #24
     4a4:	53000100 	movwpl	r0, #256	; 0x100
     4a8:	000001cc 	andeq	r0, r0, ip, asr #3
     4ac:	000001cf 	andeq	r0, r0, pc, asr #3
     4b0:	cf5c0001 	svcgt	0x005c0001
     4b4:	d4000001 	strle	r0, [r0], #-1
     4b8:	04000001 	streq	r0, [r0], #-1
     4bc:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
     4c0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     4c4:	00000000 	andeq	r0, r0, r0
     4c8:	00008000 	andeq	r8, r0, r0
     4cc:	00009c00 	andeq	r9, r0, r0, lsl #24
     4d0:	91000200 	mrsls	r0, R8_usr
     4d4:	00009c00 	andeq	r9, r0, r0, lsl #24
     4d8:	0001c800 	andeq	ip, r1, r0, lsl #16
     4dc:	52000100 	andpl	r0, r0, #0, 2
     4e0:	000001d4 	ldrdeq	r0, [r0], -r4
     4e4:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     4e8:	00520001 	subseq	r0, r2, r1
     4ec:	00000000 	andeq	r0, r0, r0
     4f0:	9c000000 	stcls	0, cr0, [r0], {-0}
     4f4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     4f8:	01000001 	tsteq	r0, r1
     4fc:	01185d00 	tsteq	r8, r0, lsl #26
     500:	011c0000 	tsteq	ip, r0
     504:	00010000 	andeq	r0, r1, r0
     508:	00011c53 	andeq	r1, r1, r3, asr ip
     50c:	00012000 	andeq	r2, r1, r0
     510:	51000100 	mrspl	r0, (UNDEF: 16)
     514:	00000120 	andeq	r0, r0, r0, lsr #2
     518:	00000160 	andeq	r0, r0, r0, ror #2
     51c:	60530001 	subsvs	r0, r3, r1
     520:	68000001 	stmdavs	r0, {r0}
     524:	01000001 	tsteq	r0, r1
     528:	01685d00 	cmneq	r8, r0, lsl #26
     52c:	016c0000 	cmneq	ip, r0
     530:	00010000 	andeq	r0, r1, r0
     534:	00016c5e 	andeq	r6, r1, lr, asr ip
     538:	00018800 	andeq	r8, r1, r0, lsl #16
     53c:	53000100 	movwpl	r0, #256	; 0x100
     540:	00000188 	andeq	r0, r0, r8, lsl #3
     544:	00000190 	muleq	r0, r0, r1
     548:	a1910004 	orrsge	r0, r1, r4
     54c:	01909f7f 	orrseq	r9, r0, pc, ror pc
     550:	01940000 	orrseq	r0, r4, r0
     554:	00010000 	andeq	r0, r1, r0
     558:	00019453 	andeq	r9, r1, r3, asr r4
     55c:	00019c00 	andeq	r9, r1, r0, lsl #24
     560:	5d000100 	stfpls	f0, [r0, #-0]
     564:	0000019c 	muleq	r0, ip, r1
     568:	000001a0 	andeq	r0, r0, r0, lsr #3
     56c:	a05e0001 	subsge	r0, lr, r1
     570:	bc000001 	stclt	0, cr0, [r0], {1}
     574:	01000001 	tsteq	r0, r1
     578:	01bc5300 			; <UNDEFINED> instruction: 0x01bc5300
     57c:	01d40000 	bicseq	r0, r4, r0
     580:	00010000 	andeq	r0, r1, r0
     584:	0001d45d 	andeq	sp, r1, sp, asr r4
     588:	0001df00 	andeq	sp, r1, r0, lsl #30
     58c:	53000100 	movwpl	r0, #256	; 0x100
	...
     598:	000000a0 	andeq	r0, r0, r0, lsr #1
     59c:	000000ec 	andeq	r0, r0, ip, ror #1
     5a0:	ec5c0001 	mrrc	0, 0, r0, ip, cr1
     5a4:	00000000 	andeq	r0, r0, r0
     5a8:	01000001 	tsteq	r0, r1
     5ac:	01005300 	mrseq	r5, LR_irq
     5b0:	01040000 	mrseq	r0, (UNDEF: 4)
     5b4:	00010000 	andeq	r0, r1, r0
     5b8:	0001045c 	andeq	r0, r1, ip, asr r4
     5bc:	00010800 	andeq	r0, r1, r0, lsl #16
     5c0:	53000100 	movwpl	r0, #256	; 0x100
     5c4:	00000108 	andeq	r0, r0, r8, lsl #2
     5c8:	00000118 	andeq	r0, r0, r8, lsl r1
     5cc:	185c0001 	ldmdane	ip, {r0}^
     5d0:	1c000001 	stcne	0, cr0, [r0], {1}
     5d4:	01000001 	tsteq	r0, r1
     5d8:	011c5000 	tsteq	ip, r0
     5dc:	013c0000 	teqeq	ip, r0
     5e0:	00010000 	andeq	r0, r1, r0
     5e4:	0001445c 	andeq	r4, r1, ip, asr r4
     5e8:	00015800 	andeq	r5, r1, r0, lsl #16
     5ec:	50000100 	andpl	r0, r0, r0, lsl #2
     5f0:	00000158 	andeq	r0, r0, r8, asr r1
     5f4:	00000160 	andeq	r0, r0, r0, ror #2
     5f8:	605c0001 	subsvs	r0, ip, r1
     5fc:	68000001 	stmdavs	r0, {r0}
     600:	01000001 	tsteq	r0, r1
     604:	01685300 	cmneq	r8, r0, lsl #6
     608:	01780000 	cmneq	r8, r0
     60c:	00010000 	andeq	r0, r1, r0
     610:	0001785c 	andeq	r7, r1, ip, asr r8
     614:	00018000 	andeq	r8, r1, r0
     618:	7c000500 	cfstr32vc	mvfx0, [r0], {-0}
     61c:	9f253400 	svcls	0x00253400
     620:	00000180 	andeq	r0, r0, r0, lsl #3
     624:	00000188 	andeq	r0, r0, r8, lsl #3
     628:	885c0001 	ldmdahi	ip, {r0}^
     62c:	90000001 	andls	r0, r0, r1
     630:	01000001 	tsteq	r0, r1
     634:	01905300 	orrseq	r5, r0, r0, lsl #6
     638:	01940000 	orrseq	r0, r4, r0
     63c:	00010000 	andeq	r0, r1, r0
     640:	0001945c 	andeq	r9, r1, ip, asr r4
     644:	00019c00 	andeq	r9, r1, r0, lsl #24
     648:	53000100 	movwpl	r0, #256	; 0x100
     64c:	0000019c 	muleq	r0, ip, r1
     650:	000001ac 	andeq	r0, r0, ip, lsr #3
     654:	ac5c0001 	mrrcge	0, 0, r0, ip, cr1
     658:	b4000001 	strlt	r0, [r0], #-1
     65c:	05000001 	streq	r0, [r0, #-1]
     660:	31007c00 	tstcc	r0, r0, lsl #24
     664:	01b49f25 			; <UNDEFINED> instruction: 0x01b49f25
     668:	01bc0000 			; <UNDEFINED> instruction: 0x01bc0000
     66c:	00010000 	andeq	r0, r1, r0
     670:	0001bc5c 	andeq	fp, r1, ip, asr ip
     674:	0001cc00 	andeq	ip, r1, r0, lsl #24
     678:	53000100 	movwpl	r0, #256	; 0x100
     67c:	000001cc 	andeq	r0, r0, ip, asr #3
     680:	000001cf 	andeq	r0, r0, pc, asr #3
     684:	cf5c0001 	svcgt	0x005c0001
     688:	d4000001 	strle	r0, [r0], #-1
     68c:	04000001 	streq	r0, [r0], #-1
     690:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
     694:	0001d49f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
     698:	0001df00 	andeq	sp, r1, r0, lsl #30
     69c:	5c000100 	stfpls	f0, [r0], {-0}
	...
     6a8:	000000ec 	andeq	r0, r0, ip, ror #1
     6ac:	000000fc 	strdeq	r0, [r0], -ip
     6b0:	9f300002 	svcls	0x00300002
     6b4:	000000fc 	strdeq	r0, [r0], -ip
     6b8:	00000104 	andeq	r0, r0, r4, lsl #2
     6bc:	9f310002 	svcls	0x00310002
     6c0:	00000104 	andeq	r0, r0, r4, lsl #2
     6c4:	00000108 	andeq	r0, r0, r8, lsl #2
     6c8:	9f300002 	svcls	0x00300002
	...
     6d4:	00000218 	andeq	r0, r0, r8, lsl r2
     6d8:	00000228 	andeq	r0, r0, r8, lsr #4
     6dc:	28500001 	ldmdacs	r0, {r0}^
     6e0:	3c000002 	stccc	0, cr0, [r0], {2}
     6e4:	04000002 	streq	r0, [r0], #-2
     6e8:	5001f300 	andpl	pc, r1, r0, lsl #6
     6ec:	00023c9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
     6f0:	00026800 	andeq	r6, r2, r0, lsl #16
     6f4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     700:	00000218 	andeq	r0, r0, r8, lsl r2
     704:	0000022c 	andeq	r0, r0, ip, lsr #4
     708:	2c510001 	mrrccs	0, 0, r0, r1, cr1
     70c:	3c000002 	stccc	0, cr0, [r0], {2}
     710:	04000002 	streq	r0, [r0], #-2
     714:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     718:	00023c9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
     71c:	00026800 	andeq	r6, r2, r0, lsl #16
     720:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     72c:	00000268 	andeq	r0, r0, r8, ror #4
     730:	00000290 	muleq	r0, r0, r2
     734:	90500001 	subsls	r0, r0, r1
     738:	dc000002 	stcle	0, cr0, [r0], {2}
     73c:	01000004 	tsteq	r0, r4
     740:	04dc5b00 	ldrbeq	r5, [ip], #2816	; 0xb00
     744:	04f00000 	ldrbteq	r0, [r0], #0
     748:	00040000 	andeq	r0, r4, r0
     74c:	9f5001f3 	svcls	0x005001f3
	...
     758:	00000268 	andeq	r0, r0, r8, ror #4
     75c:	0000027c 	andeq	r0, r0, ip, ror r2
     760:	7c510001 	mrrcvc	0, 0, r0, r1, cr1
     764:	90000002 	andls	r0, r0, r2
     768:	03000002 	movweq	r0, #2
     76c:	9f017100 	svcls	0x00017100
     770:	00000290 	muleq	r0, r0, r2
     774:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     778:	01f30004 	mvnseq	r0, r4
     77c:	00009f51 	andeq	r9, r0, r1, asr pc
     780:	00000000 	andeq	r0, r0, r0
     784:	02680000 	rsbeq	r0, r8, #0
     788:	02980000 	addseq	r0, r8, #0
     78c:	00010000 	andeq	r0, r1, r0
     790:	00029852 	andeq	r9, r2, r2, asr r8
     794:	0002c000 	andeq	ip, r2, r0
     798:	52000100 	andpl	r0, r0, #0, 2
     79c:	000002c0 	andeq	r0, r0, r0, asr #5
     7a0:	0000048c 	andeq	r0, r0, ip, lsl #9
     7a4:	8c560001 	mrrchi	0, 0, r0, r6, cr1
     7a8:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
     7ac:	01000004 	tsteq	r0, r4
     7b0:	00005200 	andeq	r5, r0, r0, lsl #4
     7b4:	00000000 	andeq	r0, r0, r0
     7b8:	02680000 	rsbeq	r0, r8, #0
     7bc:	02840000 	addeq	r0, r4, #0
     7c0:	00010000 	andeq	r0, r1, r0
     7c4:	00000053 	andeq	r0, r0, r3, asr r0
     7c8:	00000000 	andeq	r0, r0, r0
     7cc:	00027800 	andeq	r7, r2, r0, lsl #16
     7d0:	00029000 	andeq	r9, r2, r0
     7d4:	50000100 	andpl	r0, r0, r0, lsl #2
     7d8:	00000290 	muleq	r0, r0, r2
     7dc:	00000294 	muleq	r0, r4, r2
     7e0:	94540001 	ldrbls	r0, [r4], #-1
     7e4:	a0000002 	andge	r0, r0, r2
     7e8:	03000002 	movweq	r0, #2
     7ec:	9f017400 	svcls	0x00017400
     7f0:	000002a0 	andeq	r0, r0, r0, lsr #5
     7f4:	000002ac 	andeq	r0, r0, ip, lsr #5
     7f8:	ac540001 	mrrcge	0, 0, r0, r4, cr1
     7fc:	b8000002 	stmdalt	r0, {r1}
     800:	03000002 	movweq	r0, #2
     804:	9f017400 	svcls	0x00017400
     808:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
     80c:	00000490 	muleq	r0, r0, r4
     810:	90540001 	subsls	r0, r4, r1
     814:	9c000004 	stcls	0, cr0, [r0], {4}
     818:	03000004 	movweq	r0, #4
     81c:	9f017400 	svcls	0x00017400
     820:	0000049c 	muleq	r0, ip, r4
     824:	000004c8 	andeq	r0, r0, r8, asr #9
     828:	c8540001 	ldmdagt	r4, {r0}^
     82c:	d4000004 	strle	r0, [r0], #-4
     830:	01000004 	tsteq	r0, r4
     834:	04d45000 	ldrbeq	r5, [r4], #0
     838:	04dc0000 	ldrbeq	r0, [ip], #0
     83c:	00030000 	andeq	r0, r3, r0
     840:	009f0174 	addseq	r0, pc, r4, ror r1	; <UNPREDICTABLE>
     844:	00000000 	andeq	r0, r0, r0
     848:	80000000 	andhi	r0, r0, r0
     84c:	dc000002 	stcle	0, cr0, [r0], {2}
     850:	01000004 	tsteq	r0, r4
     854:	04dc5800 	ldrbeq	r5, [ip], #2048	; 0x800
     858:	04f00000 	ldrbteq	r0, [r0], #0
     85c:	000a0000 	andeq	r0, sl, r0
     860:	f35101f3 	vbsl	q8, <illegal reg q8.5>, <illegal reg q9.5>
     864:	31225001 	teqcc	r2, r1
     868:	00009f1c 	andeq	r9, r0, ip, lsl pc
     86c:	00000000 	andeq	r0, r0, r0
     870:	03bc0000 			; <UNDEFINED> instruction: 0x03bc0000
     874:	03c00000 	biceq	r0, r0, #0
     878:	00010000 	andeq	r0, r1, r0
     87c:	0003e450 	andeq	lr, r3, r0, asr r4
     880:	0003e800 	andeq	lr, r3, r0, lsl #16
     884:	50000100 	andpl	r0, r0, r0, lsl #2
     888:	0000040c 	andeq	r0, r0, ip, lsl #8
     88c:	00000410 	andeq	r0, r0, r0, lsl r4
     890:	34500001 	ldrbcc	r0, [r0], #-1
     894:	38000004 	stmdacc	r0, {r2}
     898:	01000004 	tsteq	r0, r4
     89c:	04405000 	strbeq	r5, [r0], #-0
     8a0:	04440000 	strbeq	r0, [r4], #-0
     8a4:	00010000 	andeq	r0, r1, r0
     8a8:	00046850 	andeq	r6, r4, r0, asr r8
     8ac:	00046c00 	andeq	r6, r4, r0, lsl #24
     8b0:	50000100 	andpl	r0, r0, r0, lsl #2
     8b4:	00000488 	andeq	r0, r0, r8, lsl #9
     8b8:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
     8bc:	00500001 	subseq	r0, r0, r1
     8c0:	00000000 	andeq	r0, r0, r0
     8c4:	c0000000 	andgt	r0, r0, r0
     8c8:	c8000002 	stmdagt	r0, {r1}
     8cc:	02000002 	andeq	r0, r0, #2
     8d0:	c89f3000 	ldmgt	pc, {ip, sp}	; <UNPREDICTABLE>
     8d4:	cc000002 	stcgt	0, cr0, [r0], {2}
     8d8:	01000002 	tsteq	r0, r2
     8dc:	02d85700 	sbcseq	r5, r8, #0, 14
     8e0:	04b00000 	ldrteq	r0, [r0], #0
     8e4:	00010000 	andeq	r0, r1, r0
     8e8:	00000057 	andeq	r0, r0, r7, asr r0
     8ec:	00000000 	andeq	r0, r0, r0
     8f0:	00001400 	andeq	r1, r0, r0, lsl #8
     8f4:	00001c00 	andeq	r1, r0, r0, lsl #24
     8f8:	73000300 	movwvc	r0, #768	; 0x300
     8fc:	001c9f04 	andseq	r9, ip, r4, lsl #30
     900:	00270000 	eoreq	r0, r7, r0
     904:	00010000 	andeq	r0, r1, r0
     908:	00000053 	andeq	r0, r0, r3, asr r0
     90c:	00000000 	andeq	r0, r0, r0
     910:	008b7000 	addeq	r7, fp, r0
     914:	008b7400 	addeq	r7, fp, r0, lsl #8
     918:	30000200 	andcc	r0, r0, r0, lsl #4
     91c:	008b749f 	umulleq	r7, fp, pc, r4	; <UNPREDICTABLE>
     920:	008b7800 	addeq	r7, fp, r0, lsl #16
     924:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     930:	00008b88 	andeq	r8, r0, r8, lsl #23
     934:	00008b8c 	andeq	r8, r0, ip, lsl #23
     938:	9f300002 	svcls	0x00300002
     93c:	00008b8c 	andeq	r8, r0, ip, lsl #23
     940:	00008b90 	muleq	r0, r0, fp
     944:	94530001 	ldrbls	r0, [r3], #-1
     948:	9c00008b 	stcls	0, cr0, [r0], {139}	; 0x8b
     94c:	0100008b 	smlabbeq	r0, fp, r0, r0
     950:	00005300 	andeq	r5, r0, r0, lsl #6
	...
     95c:	00040000 	andeq	r0, r4, r0
     960:	00010000 	andeq	r0, r1, r0
     964:	00000450 	andeq	r0, r0, r0, asr r4
     968:	00000c00 	andeq	r0, r0, r0, lsl #24
     96c:	53000100 	movwpl	r0, #256	; 0x100
     970:	0000000c 	andeq	r0, r0, ip
     974:	00000010 	andeq	r0, r0, r0, lsl r0
     978:	10500001 	subsne	r0, r0, r1
     97c:	1c000000 	stcne	0, cr0, [r0], {-0}
     980:	01000000 	mrseq	r0, (UNDEF: 0)
     984:	00005300 	andeq	r5, r0, r0, lsl #6
     988:	00000000 	andeq	r0, r0, r0
     98c:	00400000 	subeq	r0, r0, r0
     990:	00430000 	subeq	r0, r3, r0
     994:	00010000 	andeq	r0, r1, r0
     998:	00004350 	andeq	r4, r0, r0, asr r3
     99c:	00004c00 	andeq	r4, r0, r0, lsl #24
     9a0:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     9ac:	0000004c 	andeq	r0, r0, ip, asr #32
     9b0:	00000057 	andeq	r0, r0, r7, asr r0
     9b4:	57500001 	ldrbpl	r0, [r0, -r1]
     9b8:	70000000 	andvc	r0, r0, r0
     9bc:	01000000 	mrseq	r0, (UNDEF: 0)
     9c0:	00005500 	andeq	r5, r0, r0, lsl #10
     9c4:	00000000 	andeq	r0, r0, r0
     9c8:	00600000 	rsbeq	r0, r0, r0
     9cc:	00640000 	rsbeq	r0, r4, r0
     9d0:	00010000 	andeq	r0, r1, r0
     9d4:	00000050 	andeq	r0, r0, r0, asr r0
     9d8:	00000000 	andeq	r0, r0, r0
     9dc:	00007000 	andeq	r7, r0, r0
     9e0:	00007c00 	andeq	r7, r0, r0, lsl #24
     9e4:	50000100 	andpl	r0, r0, r0, lsl #2
     9e8:	0000007c 	andeq	r0, r0, ip, ror r0
     9ec:	00000084 	andeq	r0, r0, r4, lsl #1
     9f0:	01f30004 	mvnseq	r0, r4
     9f4:	00009f50 	andeq	r9, r0, r0, asr pc
     9f8:	00000000 	andeq	r0, r0, r0
     9fc:	00840000 	addeq	r0, r4, r0
     a00:	00900000 	addseq	r0, r0, r0
     a04:	00010000 	andeq	r0, r1, r0
     a08:	00009050 	andeq	r9, r0, r0, asr r0
     a0c:	00009800 	andeq	r9, r0, r0, lsl #16
     a10:	f3000400 	vshl.u8	d0, d0, d0
     a14:	009f5001 	addseq	r5, pc, r1
     a18:	00000000 	andeq	r0, r0, r0
     a1c:	fc000000 	stc2	0, cr0, [r0], {-0}
     a20:	04000000 	streq	r0, [r0], #-0
     a24:	01000001 	tsteq	r0, r1
     a28:	01045000 	mrseq	r5, (UNDEF: 4)
     a2c:	01280000 	teqeq	r8, r0
     a30:	00010000 	andeq	r0, r1, r0
     a34:	00000054 	andeq	r0, r0, r4, asr r0
	...
     a40:	00009000 	andeq	r9, r0, r0
     a44:	50000100 	andpl	r0, r0, r0, lsl #2
     a48:	00000090 	muleq	r0, r0, r0
     a4c:	000000d4 	ldrdeq	r0, [r0], -r4
     a50:	00540001 	subseq	r0, r4, r1
     a54:	00000000 	andeq	r0, r0, r0
     a58:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     a5c:	4c000000 	stcmi	0, cr0, [r0], {-0}
     a60:	01000000 	mrseq	r0, (UNDEF: 0)
     a64:	00545500 	subseq	r5, r4, r0, lsl #10
     a68:	00580000 	subseq	r0, r8, r0
     a6c:	00010000 	andeq	r0, r1, r0
     a70:	00006055 	andeq	r6, r0, r5, asr r0
     a74:	00006400 	andeq	r6, r0, r0, lsl #8
     a78:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     a7c:	0000006c 	andeq	r0, r0, ip, rrx
     a80:	00000070 	andeq	r0, r0, r0, ror r0
     a84:	78550001 	ldmdavc	r5, {r0}^
     a88:	7c000000 	stcvc	0, cr0, [r0], {-0}
     a8c:	01000000 	mrseq	r0, (UNDEF: 0)
     a90:	00845500 	addeq	r5, r4, r0, lsl #10
     a94:	00880000 	addeq	r0, r8, r0
     a98:	00010000 	andeq	r0, r1, r0
     a9c:	00008c55 	andeq	r8, r0, r5, asr ip
     aa0:	0000d400 	andeq	sp, r0, r0, lsl #8
     aa4:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
     ab0:	0000001c 	andeq	r0, r0, ip, lsl r0
     ab4:	00000044 	andeq	r0, r0, r4, asr #32
     ab8:	44530001 	ldrbmi	r0, [r3], #-1
     abc:	4c000000 	stcmi	0, cr0, [r0], {-0}
     ac0:	1c000000 	stcne	0, cr0, [r0], {-0}
     ac4:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
     ac8:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
     acc:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
     ad0:	0000cccc 	andeq	ip, r0, ip, asr #25
     ad4:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
     ad8:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
     adc:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
     ae0:	00004c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
     ae4:	00005000 	andeq	r5, r0, r0
     ae8:	53000100 	movwpl	r0, #256	; 0x100
     aec:	00000050 	andeq	r0, r0, r0, asr r0
     af0:	00000058 	andeq	r0, r0, r8, asr r0
     af4:	0070001c 	rsbseq	r0, r0, ip, lsl r0
     af8:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
     afc:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
     b00:	00cccccc 	sbceq	ip, ip, ip, asr #25
     b04:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     b08:	25f72008 	ldrbcs	r2, [r7, #8]!
     b0c:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
     b10:	00589f25 	subseq	r9, r8, r5, lsr #30
     b14:	005c0000 	subseq	r0, ip, r0
     b18:	00010000 	andeq	r0, r1, r0
     b1c:	00005c53 	andeq	r5, r0, r3, asr ip
     b20:	00006400 	andeq	r6, r0, r0, lsl #8
     b24:	70001c00 	andvc	r1, r0, r0, lsl #24
     b28:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
     b2c:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
     b30:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
     b34:	00000000 	andeq	r0, r0, r0
     b38:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
     b3c:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
     b40:	649f2533 	ldrvs	r2, [pc], #1331	; b48 <_start-0x74b8>
     b44:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     b48:	01000000 	mrseq	r0, (UNDEF: 0)
     b4c:	00685300 	rsbeq	r5, r8, r0, lsl #6
     b50:	00700000 	rsbseq	r0, r0, r0
     b54:	001c0000 	andseq	r0, ip, r0
     b58:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
     b5c:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
     b60:	cccccd08 	stclgt	13, cr12, [ip], {8}
     b64:	000000cc 	andeq	r0, r0, ip, asr #1
     b68:	20081e00 	andcs	r1, r8, r0, lsl #28
     b6c:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
     b70:	9f25332c 	svcls	0x0025332c
     b74:	00000070 	andeq	r0, r0, r0, ror r0
     b78:	00000074 	andeq	r0, r0, r4, ror r0
     b7c:	74530001 	ldrbvc	r0, [r3], #-1
     b80:	7c000000 	stcvc	0, cr0, [r0], {-0}
     b84:	1c000000 	stcne	0, cr0, [r0], {-0}
     b88:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
     b8c:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
     b90:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
     b94:	0000cccc 	andeq	ip, r0, ip, asr #25
     b98:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
     b9c:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
     ba0:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
     ba4:	00007c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
     ba8:	00008000 	andeq	r8, r0, r0
     bac:	53000100 	movwpl	r0, #256	; 0x100
     bb0:	00000080 	andeq	r0, r0, r0, lsl #1
     bb4:	00000088 	andeq	r0, r0, r8, lsl #1
     bb8:	0070001c 	rsbseq	r0, r0, ip, lsl r0
     bbc:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
     bc0:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
     bc4:	00cccccc 	sbceq	ip, ip, ip, asr #25
     bc8:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     bcc:	25f72008 	ldrbcs	r2, [r7, #8]!
     bd0:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
     bd4:	00889f25 	addeq	r9, r8, r5, lsr #30
     bd8:	008c0000 	addeq	r0, ip, r0
     bdc:	00010000 	andeq	r0, r1, r0
     be0:	00008c53 	andeq	r8, r0, r3, asr ip
     be4:	00009000 	andeq	r9, r0, r0
     be8:	70001c00 	andvc	r1, r0, r0, lsl #24
     bec:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
     bf0:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
     bf4:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
     bf8:	00000000 	andeq	r0, r0, r0
     bfc:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
     c00:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
     c04:	909f2533 	addsls	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
     c08:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
     c0c:	1c000000 	stcne	0, cr0, [r0], {-0}
     c10:	f7007400 			; <UNDEFINED> instruction: 0xf7007400
     c14:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
     c18:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
     c1c:	0000cccc 	andeq	ip, r0, ip, asr #25
     c20:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
     c24:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
     c28:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
     c2c:	0000989f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
     c30:	00009c00 	andeq	r9, r0, r0, lsl #24
     c34:	74001700 	strvc	r1, [r0], #-1792	; 0x700
     c38:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
     c3c:	f7007125 			; <UNDEFINED> instruction: 0xf7007125
     c40:	1e25f72c 	cdpne	7, 2, cr15, cr5, cr12, {1}
     c44:	25f72008 	ldrbcs	r2, [r7, #8]!
     c48:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
     c4c:	009c9f25 	addseq	r9, ip, r5, lsr #30
     c50:	00d40000 	sbcseq	r0, r4, r0
     c54:	001c0000 	andseq	r0, ip, r0
     c58:	2cf70074 	ldclcs	0, cr0, [r7], #464	; 0x1d0
     c5c:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
     c60:	cccccd08 	stclgt	13, cr12, [ip], {8}
     c64:	000000cc 	andeq	r0, r0, ip, asr #1
     c68:	20081e00 	andcs	r1, r8, r0, lsl #28
     c6c:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
     c70:	9f25332c 	svcls	0x0025332c
	...
     c7c:	00000094 	muleq	r0, r4, r0
     c80:	000000b8 	strheq	r0, [r0], -r8
     c84:	b8500001 	ldmdalt	r0, {r0}^
     c88:	c4000000 	strgt	r0, [r0], #-0
     c8c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     c90:	00713100 	rsbseq	r3, r1, r0, lsl #2
     c94:	21007324 	tstcs	r0, r4, lsr #6
     c98:	0000c49f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
     c9c:	0000c700 	andeq	ip, r0, r0, lsl #14
     ca0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     cac:	000000d4 	ldrdeq	r0, [r0], -r4
     cb0:	000000f8 	strdeq	r0, [r0], -r8
     cb4:	f8500001 			; <UNDEFINED> instruction: 0xf8500001
     cb8:	0c000000 	stceq	0, cr0, [r0], {-0}
     cbc:	04000001 	streq	r0, [r0], #-1
     cc0:	5001f300 	andpl	pc, r1, r0, lsl #6
     cc4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     cc8:	00000000 	andeq	r0, r0, r0
     ccc:	0000e000 	andeq	lr, r0, r0
     cd0:	0000e800 	andeq	lr, r0, r0, lsl #16
     cd4:	30000200 	andcc	r0, r0, r0, lsl #4
     cd8:	0000e89f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
     cdc:	0000e800 	andeq	lr, r0, r0, lsl #16
     ce0:	52000100 	andpl	r0, r0, #0, 2
     ce4:	000000e8 	andeq	r0, r0, r8, ror #1
     ce8:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     cec:	9f300002 	svcls	0x00300002
     cf0:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     cf4:	00000103 	andeq	r0, r0, r3, lsl #2
     cf8:	00520001 	subseq	r0, r2, r1
     cfc:	00000000 	andeq	r0, r0, r0
     d00:	e0000000 	and	r0, r0, r0
     d04:	f4000000 	vst4.8	{d0-d3}, [r0], r0
     d08:	02000000 	andeq	r0, r0, #0
     d0c:	f49f3000 			; <UNDEFINED> instruction: 0xf49f3000
     d10:	00000000 	andeq	r0, r0, r0
     d14:	05000001 	streq	r0, [r0, #-1]
     d18:	00733100 	rsbseq	r3, r3, r0, lsl #2
     d1c:	01009f24 	tsteq	r0, r4, lsr #30
     d20:	01030000 	mrseq	r0, (UNDEF: 3)
     d24:	00010000 	andeq	r0, r1, r0
     d28:	00010351 	andeq	r0, r1, r1, asr r3
     d2c:	00010c00 	andeq	r0, r1, r0, lsl #24
     d30:	31000800 	tstcc	r0, r0, lsl #16
     d34:	4f5001f3 	svcmi	0x005001f3
     d38:	009f241a 	addseq	r2, pc, sl, lsl r4	; <UNPREDICTABLE>
     d3c:	00000000 	andeq	r0, r0, r0
     d40:	0c000000 	stceq	0, cr0, [r0], {-0}
     d44:	30000001 	andcc	r0, r0, r1
     d48:	01000001 	tsteq	r0, r1
     d4c:	01305000 	teqeq	r0, r0
     d50:	01440000 	mrseq	r0, (UNDEF: 68)
     d54:	00040000 	andeq	r0, r4, r0
     d58:	9f5001f3 	svcls	0x005001f3
	...
     d64:	00000118 	andeq	r0, r0, r8, lsl r1
     d68:	00000120 	andeq	r0, r0, r0, lsr #2
     d6c:	9f300002 	svcls	0x00300002
     d70:	00000120 	andeq	r0, r0, r0, lsr #2
     d74:	00000120 	andeq	r0, r0, r0, lsr #2
     d78:	20520001 	subscs	r0, r2, r1
     d7c:	28000001 	stmdacs	r0, {r0}
     d80:	02000001 	andeq	r0, r0, #1
     d84:	289f3000 	ldmcs	pc, {ip, sp}	; <UNPREDICTABLE>
     d88:	3b000001 	blcc	d94 <_start-0x726c>
     d8c:	01000001 	tsteq	r0, r1
     d90:	00005200 	andeq	r5, r0, r0, lsl #4
     d94:	00000000 	andeq	r0, r0, r0
     d98:	01180000 	tsteq	r8, r0
     d9c:	012c0000 	teqeq	ip, r0
     da0:	00020000 	andeq	r0, r2, r0
     da4:	012c9f30 	teqeq	ip, r0, lsr pc
     da8:	01380000 	teqeq	r8, r0
     dac:	00050000 	andeq	r0, r5, r0
     db0:	24007331 	strcs	r7, [r0], #-817	; 0x331
     db4:	0001389f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
     db8:	00013b00 	andeq	r3, r1, r0, lsl #22
     dbc:	51000100 	mrspl	r0, (UNDEF: 16)
     dc0:	0000013b 	andeq	r0, r0, fp, lsr r1
     dc4:	00000144 	andeq	r0, r0, r4, asr #2
     dc8:	f3310008 	vhadd.u<illegal width 64>	d0, d1, d8
     dcc:	1a4f5001 	bne	13d4dd8 <__bss_end__+0x13cb198>
     dd0:	00009f24 	andeq	r9, r0, r4, lsr #30
     dd4:	00000000 	andeq	r0, r0, r0
     dd8:	01440000 	mrseq	r0, (UNDEF: 68)
     ddc:	01d40000 	bicseq	r0, r4, r0
     de0:	00010000 	andeq	r0, r1, r0
     de4:	0001d450 	andeq	sp, r1, r0, asr r4
     de8:	00021000 	andeq	r1, r2, r0
     dec:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     df8:	0000018c 	andeq	r0, r0, ip, lsl #3
     dfc:	00000190 	muleq	r0, r0, r1
     e00:	98550001 	ldmdals	r5, {r0}^
     e04:	9c000001 	stcls	0, cr0, [r0], {1}
     e08:	01000001 	tsteq	r0, r1
     e0c:	01a45500 			; <UNDEFINED> instruction: 0x01a45500
     e10:	01a80000 			; <UNDEFINED> instruction: 0x01a80000
     e14:	00010000 	andeq	r0, r1, r0
     e18:	0001b055 	andeq	fp, r1, r5, asr r0
     e1c:	0001b400 	andeq	fp, r1, r0, lsl #8
     e20:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     e24:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     e28:	000001c0 	andeq	r0, r0, r0, asr #3
     e2c:	c8550001 	ldmdagt	r5, {r0}^
     e30:	cc000001 	stcgt	0, cr0, [r0], {1}
     e34:	01000001 	tsteq	r0, r1
     e38:	01d05500 	bicseq	r5, r0, r0, lsl #10
     e3c:	02100000 	andseq	r0, r0, #0
     e40:	00010000 	andeq	r0, r1, r0
     e44:	00000055 	andeq	r0, r0, r5, asr r0
     e48:	00000000 	andeq	r0, r0, r0
     e4c:	00016000 	andeq	r6, r1, r0
     e50:	00018800 	andeq	r8, r1, r0, lsl #16
     e54:	53000100 	movwpl	r0, #256	; 0x100
     e58:	00000188 	andeq	r0, r0, r8, lsl #3
     e5c:	00000190 	muleq	r0, r0, r1
     e60:	0070001c 	rsbseq	r0, r0, ip, lsl r0
     e64:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
     e68:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
     e6c:	00cccccc 	sbceq	ip, ip, ip, asr #25
     e70:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     e74:	25f72008 	ldrbcs	r2, [r7, #8]!
     e78:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
     e7c:	01909f25 	orrseq	r9, r0, r5, lsr #30
     e80:	01940000 	orrseq	r0, r4, r0
     e84:	00010000 	andeq	r0, r1, r0
     e88:	00019453 	andeq	r9, r1, r3, asr r4
     e8c:	00019c00 	andeq	r9, r1, r0, lsl #24
     e90:	70001c00 	andvc	r1, r0, r0, lsl #24
     e94:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
     e98:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
     e9c:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
     ea0:	00000000 	andeq	r0, r0, r0
     ea4:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
     ea8:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
     eac:	9c9f2533 	cfldr32ls	mvfx2, [pc], {51}	; 0x33
     eb0:	a0000001 	andge	r0, r0, r1
     eb4:	01000001 	tsteq	r0, r1
     eb8:	01a05300 	lsleq	r5, r0, #6
     ebc:	01a80000 			; <UNDEFINED> instruction: 0x01a80000
     ec0:	001c0000 	andseq	r0, ip, r0
     ec4:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
     ec8:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
     ecc:	cccccd08 	stclgt	13, cr12, [ip], {8}
     ed0:	000000cc 	andeq	r0, r0, ip, asr #1
     ed4:	20081e00 	andcs	r1, r8, r0, lsl #28
     ed8:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
     edc:	9f25332c 	svcls	0x0025332c
     ee0:	000001a8 	andeq	r0, r0, r8, lsr #3
     ee4:	000001ac 	andeq	r0, r0, ip, lsr #3
     ee8:	ac530001 	mrrcge	0, 0, r0, r3, cr1
     eec:	b4000001 	strlt	r0, [r0], #-1
     ef0:	1c000001 	stcne	0, cr0, [r0], {1}
     ef4:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
     ef8:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
     efc:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
     f00:	0000cccc 	andeq	ip, r0, ip, asr #25
     f04:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
     f08:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
     f0c:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
     f10:	0001b49f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
     f14:	0001b800 	andeq	fp, r1, r0, lsl #16
     f18:	53000100 	movwpl	r0, #256	; 0x100
     f1c:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     f20:	000001c0 	andeq	r0, r0, r0, asr #3
     f24:	0070001c 	rsbseq	r0, r0, ip, lsl r0
     f28:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
     f2c:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
     f30:	00cccccc 	sbceq	ip, ip, ip, asr #25
     f34:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     f38:	25f72008 	ldrbcs	r2, [r7, #8]!
     f3c:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
     f40:	01c09f25 	biceq	r9, r0, r5, lsr #30
     f44:	01c40000 	biceq	r0, r4, r0
     f48:	00010000 	andeq	r0, r1, r0
     f4c:	0001c453 	andeq	ip, r1, r3, asr r4
     f50:	0001cc00 	andeq	ip, r1, r0, lsl #24
     f54:	70001c00 	andvc	r1, r0, r0, lsl #24
     f58:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
     f5c:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
     f60:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
     f64:	00000000 	andeq	r0, r0, r0
     f68:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
     f6c:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
     f70:	cc9f2533 	cfldr32gt	mvfx2, [pc], {51}	; 0x33
     f74:	d0000001 	andle	r0, r0, r1
     f78:	01000001 	tsteq	r0, r1
     f7c:	01d05300 	bicseq	r5, r0, r0, lsl #6
     f80:	01d40000 	bicseq	r0, r4, r0
     f84:	001c0000 	andseq	r0, ip, r0
     f88:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
     f8c:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
     f90:	cccccd08 	stclgt	13, cr12, [ip], {8}
     f94:	000000cc 	andeq	r0, r0, ip, asr #1
     f98:	20081e00 	andcs	r1, r8, r0, lsl #28
     f9c:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
     fa0:	9f25332c 	svcls	0x0025332c
     fa4:	000001d4 	ldrdeq	r0, [r0], -r4
     fa8:	000001dc 	ldrdeq	r0, [r0], -ip
     fac:	0074001c 	rsbseq	r0, r4, ip, lsl r0
     fb0:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
     fb4:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
     fb8:	00cccccc 	sbceq	ip, ip, ip, asr #25
     fbc:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     fc0:	25f72008 	ldrbcs	r2, [r7, #8]!
     fc4:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
     fc8:	01dc9f25 	bicseq	r9, ip, r5, lsr #30
     fcc:	01e00000 	mvneq	r0, r0
     fd0:	00170000 	andseq	r0, r7, r0
     fd4:	2cf70074 	ldclcs	0, cr0, [r7], #464	; 0x1d0
     fd8:	007125f7 	ldrshteq	r2, [r1], #-87	; 0xffffffa9
     fdc:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
     fe0:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
     fe4:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
     fe8:	e09f2533 	adds	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
     fec:	10000001 	andne	r0, r0, r1
     ff0:	1c000002 	stcne	0, cr0, [r0], {2}
     ff4:	f7007400 			; <UNDEFINED> instruction: 0xf7007400
     ff8:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
     ffc:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1000:	0000cccc 	andeq	ip, r0, ip, asr #25
    1004:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1008:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    100c:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1010:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1014:	00000000 	andeq	r0, r0, r0
    1018:	0001d800 	andeq	sp, r1, r0, lsl #16
    101c:	0001fc00 	andeq	pc, r1, r0, lsl #24
    1020:	50000100 	andpl	r0, r0, r0, lsl #2
    1024:	000001fc 	strdeq	r0, [r0], -ip
    1028:	00000203 	andeq	r0, r0, r3, lsl #4
    102c:	00510001 	subseq	r0, r1, r1
    1030:	00000000 	andeq	r0, r0, r0
    1034:	10000000 	andne	r0, r0, r0
    1038:	2c000002 	stccs	0, cr0, [r0], {2}
    103c:	01000002 	tsteq	r0, r2
    1040:	022c5000 	eoreq	r5, ip, #0
    1044:	02340000 	eorseq	r0, r4, #0
    1048:	00010000 	andeq	r0, r1, r0
    104c:	00023454 	andeq	r3, r2, r4, asr r4
    1050:	00023c00 	andeq	r3, r2, r0, lsl #24
    1054:	50000100 	andpl	r0, r0, r0, lsl #2
    1058:	0000023c 	andeq	r0, r0, ip, lsr r2
    105c:	00000244 	andeq	r0, r0, r4, asr #4
    1060:	44540001 	ldrbmi	r0, [r4], #-1
    1064:	50000002 	andpl	r0, r0, r2
    1068:	04000002 	streq	r0, [r0], #-2
    106c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1070:	0002509f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
    1074:	00025400 	andeq	r5, r2, r0, lsl #8
    1078:	50000100 	andpl	r0, r0, r0, lsl #2
    107c:	00000254 	andeq	r0, r0, r4, asr r2
    1080:	0000025c 	andeq	r0, r0, ip, asr r2
    1084:	00540001 	subseq	r0, r4, r1
    1088:	00000000 	andeq	r0, r0, r0
    108c:	20000000 	andcs	r0, r0, r0
    1090:	30000002 	andcc	r0, r0, r2
    1094:	02000002 	andeq	r0, r0, #2
    1098:	309f3000 	addscc	r3, pc, r0
    109c:	34000002 	strcc	r0, [r0], #-2
    10a0:	01000002 	tsteq	r0, r2
    10a4:	02345000 	eorseq	r5, r4, #0
    10a8:	02400000 	subeq	r0, r0, #0
    10ac:	00020000 	andeq	r0, r2, r0
    10b0:	02409f30 	subeq	r9, r0, #48, 30	; 0xc0
    10b4:	024c0000 	subeq	r0, ip, #0
    10b8:	00010000 	andeq	r0, r1, r0
    10bc:	00000050 	andeq	r0, r0, r0, asr r0
    10c0:	00000000 	andeq	r0, r0, r0
    10c4:	00025c00 	andeq	r5, r2, r0, lsl #24
    10c8:	00029000 	andeq	r9, r2, r0
    10cc:	50000100 	andpl	r0, r0, r0, lsl #2
    10d0:	00000290 	muleq	r0, r0, r2
    10d4:	000002a0 	andeq	r0, r0, r0, lsr #5
    10d8:	01f30004 	mvnseq	r0, r4
    10dc:	02a09f50 	adceq	r9, r0, #80, 30	; 0x140
    10e0:	02c00000 	sbceq	r0, r0, #0
    10e4:	00010000 	andeq	r0, r1, r0
    10e8:	0002c050 	andeq	ip, r2, r0, asr r0
    10ec:	0002d400 	andeq	sp, r2, r0, lsl #8
    10f0:	f3000400 	vshl.u8	d0, d0, d0
    10f4:	009f5001 	addseq	r5, pc, r1
    10f8:	00000000 	andeq	r0, r0, r0
    10fc:	5c000000 	stcpl	0, cr0, [r0], {-0}
    1100:	94000002 	strls	r0, [r0], #-2
    1104:	01000002 	tsteq	r0, r2
    1108:	02945100 	addseq	r5, r4, #0, 2
    110c:	02a00000 	adceq	r0, r0, #0
    1110:	00040000 	andeq	r0, r4, r0
    1114:	9f5101f3 	svcls	0x005101f3
    1118:	000002a0 	andeq	r0, r0, r0, lsr #5
    111c:	000002c4 	andeq	r0, r0, r4, asr #5
    1120:	c4510001 	ldrbgt	r0, [r1], #-1
    1124:	d4000002 	strle	r0, [r0], #-2
    1128:	04000002 	streq	r0, [r0], #-2
    112c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1130:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1134:	00000000 	andeq	r0, r0, r0
    1138:	00027000 	andeq	r7, r2, r0
    113c:	00029000 	andeq	r9, r2, r0
    1140:	50000100 	andpl	r0, r0, r0, lsl #2
    1144:	00000290 	muleq	r0, r0, r2
    1148:	000002a0 	andeq	r0, r0, r0, lsr #5
    114c:	01f30004 	mvnseq	r0, r4
    1150:	00009f50 	andeq	r9, r0, r0, asr pc
    1154:	00000000 	andeq	r0, r0, r0
    1158:	02780000 	rsbseq	r0, r8, #0
    115c:	02800000 	addeq	r0, r0, #0
    1160:	00020000 	andeq	r0, r2, r0
    1164:	02809f30 	addeq	r9, r0, #48, 30	; 0xc0
    1168:	02800000 	addeq	r0, r0, #0
    116c:	00010000 	andeq	r0, r1, r0
    1170:	00028052 	andeq	r8, r2, r2, asr r0
    1174:	00028800 	andeq	r8, r2, r0, lsl #16
    1178:	30000200 	andcc	r0, r0, r0, lsl #4
    117c:	0002889f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
    1180:	00029b00 	andeq	r9, r2, r0, lsl #22
    1184:	52000100 	andpl	r0, r0, #0, 2
	...
    1190:	00000278 	andeq	r0, r0, r8, ror r2
    1194:	0000028c 	andeq	r0, r0, ip, lsl #5
    1198:	9f300002 	svcls	0x00300002
    119c:	0000028c 	andeq	r0, r0, ip, lsl #5
    11a0:	00000298 	muleq	r0, r8, r2
    11a4:	73310005 	teqvc	r1, #5
    11a8:	989f2400 	ldmls	pc, {sl, sp}	; <UNPREDICTABLE>
    11ac:	9b000002 	blls	11bc <_start-0x6e44>
    11b0:	01000002 	tsteq	r0, r2
    11b4:	029b5100 	addseq	r5, fp, #0, 2
    11b8:	02a00000 	adceq	r0, r0, #0
    11bc:	00080000 	andeq	r0, r8, r0
    11c0:	5001f331 	andpl	pc, r1, r1, lsr r3	; <UNPREDICTABLE>
    11c4:	9f241a4f 	svcls	0x00241a4f
	...
    11d0:	000002a0 	andeq	r0, r0, r0, lsr #5
    11d4:	000002c0 	andeq	r0, r0, r0, asr #5
    11d8:	c0500001 	subsgt	r0, r0, r1
    11dc:	d4000002 	strle	r0, [r0], #-2
    11e0:	04000002 	streq	r0, [r0], #-2
    11e4:	5001f300 	andpl	pc, r1, r0, lsl #6
    11e8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    11ec:	00000000 	andeq	r0, r0, r0
    11f0:	0002a800 	andeq	sl, r2, r0, lsl #16
    11f4:	0002b000 	andeq	fp, r2, r0
    11f8:	30000200 	andcc	r0, r0, r0, lsl #4
    11fc:	0002b09f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
    1200:	0002b000 	andeq	fp, r2, r0
    1204:	52000100 	andpl	r0, r0, #0, 2
    1208:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
    120c:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    1210:	9f300002 	svcls	0x00300002
    1214:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    1218:	000002cb 	andeq	r0, r0, fp, asr #5
    121c:	00520001 	subseq	r0, r2, r1
    1220:	00000000 	andeq	r0, r0, r0
    1224:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    1228:	bc000002 	stclt	0, cr0, [r0], {2}
    122c:	02000002 	andeq	r0, r0, #2
    1230:	bc9f3000 	ldclt	0, cr3, [pc], {0}
    1234:	c8000002 	stmdagt	r0, {r1}
    1238:	05000002 	streq	r0, [r0, #-2]
    123c:	00733100 	rsbseq	r3, r3, r0, lsl #2
    1240:	02c89f24 	sbceq	r9, r8, #36, 30	; 0x90
    1244:	02cb0000 	sbceq	r0, fp, #0
    1248:	00010000 	andeq	r0, r1, r0
    124c:	0002cb51 	andeq	ip, r2, r1, asr fp
    1250:	0002d400 	andeq	sp, r2, r0, lsl #8
    1254:	31000800 	tstcc	r0, r0, lsl #16
    1258:	4f5001f3 	svcmi	0x005001f3
    125c:	009f241a 	addseq	r2, pc, sl, lsl r4	; <UNPREDICTABLE>
    1260:	00000000 	andeq	r0, r0, r0
    1264:	d4000000 	strle	r0, [r0], #-0
    1268:	6c000002 	stcvs	0, cr0, [r0], {2}
    126c:	01000003 	tsteq	r0, r3
    1270:	036c5000 	cmneq	ip, #0
    1274:	03ac0000 			; <UNDEFINED> instruction: 0x03ac0000
    1278:	00010000 	andeq	r0, r1, r0
    127c:	00000054 	andeq	r0, r0, r4, asr r0
    1280:	00000000 	andeq	r0, r0, r0
    1284:	0002d400 	andeq	sp, r2, r0, lsl #8
    1288:	00036f00 	andeq	r6, r3, r0, lsl #30
    128c:	51000100 	mrspl	r0, (UNDEF: 16)
    1290:	0000036f 	andeq	r0, r0, pc, ror #6
    1294:	000003ac 	andeq	r0, r0, ip, lsr #7
    1298:	01f30004 	mvnseq	r0, r4
    129c:	00009f51 	andeq	r9, r0, r1, asr pc
    12a0:	00000000 	andeq	r0, r0, r0
    12a4:	03240000 	teqeq	r4, #0
    12a8:	03280000 	teqeq	r8, #0
    12ac:	00010000 	andeq	r0, r1, r0
    12b0:	00033056 	andeq	r3, r3, r6, asr r0
    12b4:	00033400 	andeq	r3, r3, r0, lsl #8
    12b8:	56000100 	strpl	r0, [r0], -r0, lsl #2
    12bc:	0000033c 	andeq	r0, r0, ip, lsr r3
    12c0:	00000340 	andeq	r0, r0, r0, asr #6
    12c4:	48560001 	ldmdami	r6, {r0}^
    12c8:	4c000003 	stcmi	0, cr0, [r0], {3}
    12cc:	01000003 	tsteq	r0, r3
    12d0:	03545600 	cmpeq	r4, #0, 12
    12d4:	03580000 	cmpeq	r8, #0
    12d8:	00010000 	andeq	r0, r1, r0
    12dc:	00036056 	andeq	r6, r3, r6, asr r0
    12e0:	00036400 	andeq	r6, r3, r0, lsl #8
    12e4:	56000100 	strpl	r0, [r0], -r0, lsl #2
    12e8:	00000368 	andeq	r0, r0, r8, ror #6
    12ec:	000003ac 	andeq	r0, r0, ip, lsr #7
    12f0:	00560001 	subseq	r0, r6, r1
    12f4:	00000000 	andeq	r0, r0, r0
    12f8:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    12fc:	20000002 	andcs	r0, r0, r2
    1300:	01000003 	tsteq	r0, r3
    1304:	03205300 	teqeq	r0, #0, 6
    1308:	03280000 	teqeq	r8, #0
    130c:	001c0000 	andseq	r0, ip, r0
    1310:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    1314:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    1318:	cccccd08 	stclgt	13, cr12, [ip], {8}
    131c:	000000cc 	andeq	r0, r0, ip, asr #1
    1320:	20081e00 	andcs	r1, r8, r0, lsl #28
    1324:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1328:	9f25332c 	svcls	0x0025332c
    132c:	00000328 	andeq	r0, r0, r8, lsr #6
    1330:	0000032c 	andeq	r0, r0, ip, lsr #6
    1334:	2c530001 	mrrccs	0, 0, r0, r3, cr1
    1338:	34000003 	strcc	r0, [r0], #-3
    133c:	1c000003 	stcne	0, cr0, [r0], {3}
    1340:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    1344:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    1348:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    134c:	0000cccc 	andeq	ip, r0, ip, asr #25
    1350:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1354:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1358:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    135c:	0003349f 	muleq	r3, pc, r4	; <UNPREDICTABLE>
    1360:	00033800 	andeq	r3, r3, r0, lsl #16
    1364:	53000100 	movwpl	r0, #256	; 0x100
    1368:	00000338 	andeq	r0, r0, r8, lsr r3
    136c:	00000340 	andeq	r0, r0, r0, asr #6
    1370:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    1374:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1378:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    137c:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1380:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1384:	25f72008 	ldrbcs	r2, [r7, #8]!
    1388:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    138c:	03409f25 	movteq	r9, #3877	; 0xf25
    1390:	03440000 	movteq	r0, #16384	; 0x4000
    1394:	00010000 	andeq	r0, r1, r0
    1398:	00034453 	andeq	r4, r3, r3, asr r4
    139c:	00034c00 	andeq	r4, r3, r0, lsl #24
    13a0:	70001c00 	andvc	r1, r0, r0, lsl #24
    13a4:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    13a8:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    13ac:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    13b0:	00000000 	andeq	r0, r0, r0
    13b4:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    13b8:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    13bc:	4c9f2533 	cfldr32mi	mvfx2, [pc], {51}	; 0x33
    13c0:	50000003 	andpl	r0, r0, r3
    13c4:	01000003 	tsteq	r0, r3
    13c8:	03505300 	cmpeq	r0, #0, 6
    13cc:	03580000 	cmpeq	r8, #0
    13d0:	001c0000 	andseq	r0, ip, r0
    13d4:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    13d8:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    13dc:	cccccd08 	stclgt	13, cr12, [ip], {8}
    13e0:	000000cc 	andeq	r0, r0, ip, asr #1
    13e4:	20081e00 	andcs	r1, r8, r0, lsl #28
    13e8:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    13ec:	9f25332c 	svcls	0x0025332c
    13f0:	00000358 	andeq	r0, r0, r8, asr r3
    13f4:	0000035c 	andeq	r0, r0, ip, asr r3
    13f8:	5c530001 	mrrcpl	0, 0, r0, r3, cr1
    13fc:	64000003 	strvs	r0, [r0], #-3
    1400:	1c000003 	stcne	0, cr0, [r0], {3}
    1404:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    1408:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    140c:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1410:	0000cccc 	andeq	ip, r0, ip, asr #25
    1414:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1418:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    141c:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1420:	0003649f 	muleq	r3, pc, r4	; <UNPREDICTABLE>
    1424:	00036800 	andeq	r6, r3, r0, lsl #16
    1428:	53000100 	movwpl	r0, #256	; 0x100
    142c:	00000368 	andeq	r0, r0, r8, ror #6
    1430:	0000036c 	andeq	r0, r0, ip, ror #6
    1434:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    1438:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    143c:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1440:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1444:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1448:	25f72008 	ldrbcs	r2, [r7, #8]!
    144c:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1450:	036c9f25 	cmneq	ip, #37, 30	; 0x94
    1454:	03740000 	cmneq	r4, #0
    1458:	001c0000 	andseq	r0, ip, r0
    145c:	2cf70074 	ldclcs	0, cr0, [r7], #464	; 0x1d0
    1460:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    1464:	cccccd08 	stclgt	13, cr12, [ip], {8}
    1468:	000000cc 	andeq	r0, r0, ip, asr #1
    146c:	20081e00 	andcs	r1, r8, r0, lsl #28
    1470:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1474:	9f25332c 	svcls	0x0025332c
    1478:	00000374 	andeq	r0, r0, r4, ror r3
    147c:	00000378 	andeq	r0, r0, r8, ror r3
    1480:	00740017 	rsbseq	r0, r4, r7, lsl r0
    1484:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1488:	2cf70073 	ldclcs	0, cr0, [r7], #460	; 0x1cc
    148c:	081e25f7 	ldmdaeq	lr, {r0, r1, r2, r4, r5, r6, r7, r8, sl, sp}
    1490:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1494:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1498:	0003789f 	muleq	r3, pc, r8	; <UNPREDICTABLE>
    149c:	0003ac00 	andeq	sl, r3, r0, lsl #24
    14a0:	74001c00 	strvc	r1, [r0], #-3072	; 0xc00
    14a4:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    14a8:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    14ac:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    14b0:	00000000 	andeq	r0, r0, r0
    14b4:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    14b8:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    14bc:	009f2533 	addseq	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
    14c0:	00000000 	andeq	r0, r0, r0
    14c4:	70000000 	andvc	r0, r0, r0
    14c8:	94000003 	strls	r0, [r0], #-3
    14cc:	01000003 	tsteq	r0, r3
    14d0:	03945000 	orrseq	r5, r4, #0
    14d4:	039c0000 	orrseq	r0, ip, #0
    14d8:	00090000 	andeq	r0, r9, r0
    14dc:	00730075 	rsbseq	r0, r3, r5, ror r0
    14e0:	21007124 	tstcs	r0, r4, lsr #2
    14e4:	00039c9f 	muleq	r3, pc, ip	; <UNPREDICTABLE>
    14e8:	00039f00 	andeq	r9, r3, r0, lsl #30
    14ec:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    14fc:	0000000b 	andeq	r0, r0, fp
    1500:	0b500001 	bleq	140150c <__bss_end__+0x13f78cc>
    1504:	14000000 	strne	r0, [r0], #-0
    1508:	01000000 	mrseq	r0, (UNDEF: 0)
    150c:	00005400 	andeq	r5, r0, r0, lsl #8
    1510:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	00008010 	andeq	r8, r0, r0, lsl r0
  14:	000002a8 	andeq	r0, r0, r8, lsr #5
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	08020002 	stmdaeq	r2, {r1}
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	0000836c 	andeq	r8, r0, ip, ror #6
  34:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	0d5c0002 	ldcleq	0, cr0, [ip, #-8]
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	0000853c 	andeq	r8, r0, ip, lsr r5
  54:	0000005c 	andeq	r0, r0, ip, asr r0
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	10440002 	subne	r0, r4, r2
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	00008598 	muleq	r0, r8, r5
  74:	00000058 	andeq	r0, r0, r8, asr r0
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	11d90002 	bicsne	r0, r9, r2
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	000085f0 	strdeq	r8, [r0], -r0
  94:	00000034 	andeq	r0, r0, r4, lsr r0
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	12cb0002 	sbcne	r0, fp, #2
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	00008624 	andeq	r8, r0, r4, lsr #12
  b4:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	19230002 	stmdbne	r3!, {r1}
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	00008b14 	andeq	r8, r0, r4, lsl fp
  d4:	00000028 	andeq	r0, r0, r8, lsr #32
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	1a260002 	bne	9800f4 <__bss_end__+0x9764b4>
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	00008b3c 	andeq	r8, r0, ip, lsr fp
  f4:	00000034 	andeq	r0, r0, r4, lsr r0
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	1b350002 	blne	d40114 <__bss_end__+0xd364d4>
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	00008b70 	andeq	r8, r0, r0, ror fp
 114:	00000074 	andeq	r0, r0, r4, ror r0
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	1ce60002 	stclne	0, cr0, [r6], #8
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	00008be4 	andeq	r8, r0, r4, ror #23
 134:	00000098 	muleq	r0, r8, r0
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	1ee10002 	cdpne	0, 14, cr0, cr1, cr2, {0}
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	00008ce0 	andeq	r8, r0, r0, ror #25
 154:	00000154 	andeq	r0, r0, r4, asr r1
	...
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	22e40002 	rsccs	r0, r4, #2
 168:	00040000 	andeq	r0, r4, r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	00008e34 	andeq	r8, r0, r4, lsr lr
 174:	000003ac 	andeq	r0, r0, ip, lsr #7
	...
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	28500002 	ldmdacs	r0, {r1}^
 188:	00040000 	andeq	r0, r4, r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	000091e0 	andeq	r9, r0, r0, ror #3
 194:	00000014 	andeq	r0, r0, r4, lsl r0
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000010a 	andeq	r0, r0, sl, lsl #2
   4:	00a60002 	adceq	r0, r6, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2f010000 	svccs	0x00010000
  1c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  20:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
  24:	6a6e6169 	bvs	1b985d0 <__bss_end__+0x1b8e990>
  28:	442f6e75 	strtmi	r6, [pc], #-3701	; 30 <_start-0x7fd0>
  2c:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
  30:	732f706f 	teqvc	pc, #111	; 0x6f
  34:	6f6f6863 	svcvs	0x006f6863
  38:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
  3c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
  40:	30323931 	eorscc	r3, r2, r1, lsr r9
  44:	3153432f 	cmpcc	r3, pc, lsr #6
  48:	2f453034 	svccs	0x00453034
  4c:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
  50:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
  54:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
  58:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
  5c:	00006970 	andeq	r6, r0, r0, ror r9
  60:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
  64:	00632e72 	rsbeq	r2, r3, r2, ror lr
  68:	72000000 	andvc	r0, r0, #0
  6c:	612d6970 	teqvs	sp, r0, ror r9
  70:	69746d72 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
  74:	2e72656d 	cdpcs	5, 7, cr6, cr2, cr13, {3}
  78:	00000068 	andeq	r0, r0, r8, rrx
  7c:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
  80:	746e692d 	strbtvc	r6, [lr], #-2349	; 0x92d
  84:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
  88:	2e737470 	mrccs	4, 3, r7, cr3, cr0, {3}
  8c:	00000068 	andeq	r0, r0, r8, rrx
  90:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
  94:	0100682e 	tsteq	r0, lr, lsr #16
  98:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
  9c:	2d72656d 	cfldr64cs	mvdx6, [r2, #-436]!	; 0xfffffe4c
  a0:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
  a4:	70757272 	rsbsvc	r7, r5, r2, ror r2
  a8:	00682e74 	rsbeq	r2, r8, r4, ror lr
  ac:	00000000 	andeq	r0, r0, r0
  b0:	10020500 	andne	r0, r2, r0, lsl #10
  b4:	03000080 	movweq	r0, #128	; 0x80
  b8:	2f2f010e 	svccs	0x002f010e
  bc:	4a0d034e 	bmi	340dfc <__bss_end__+0x3371bc>
  c0:	2f660a03 	svccs	0x00660a03
  c4:	02002f86 	andeq	r2, r0, #536	; 0x218
  c8:	4a060104 	bmi	1804e0 <__bss_end__+0x1768a0>
  cc:	0402002e 	streq	r0, [r2], #-46	; 0x2e
  d0:	02002e03 	andeq	r2, r0, #3, 28	; 0x30
  d4:	4b060304 	blmi	180cec <__bss_end__+0x1770ac>
  d8:	03040200 	movweq	r0, #16896	; 0x4200
  dc:	302fa583 	eorcc	sl, pc, r3, lsl #11
  e0:	4c4c304b 	mcrrmi	0, 4, r3, ip, cr11
  e4:	4f4c2f4c 	svcmi	0x004c2f4c
  e8:	02005030 	andeq	r5, r0, #48	; 0x30
  ec:	7a030104 	bvc	c0504 <__bss_end__+0xb68c4>
  f0:	660c032e 	strvs	r0, [ip], -lr, lsr #6
  f4:	4bf3674b 	blmi	ffcd9e28 <__bss_end__+0xffcd01e8>
  f8:	67674b4b 	strbvs	r4, [r7, -fp, asr #22]!
  fc:	a121089f 			; <UNDEFINED> instruction: 0xa121089f
 100:	21084b4b 	tstcs	r8, fp, asr #22
 104:	bbf4f3f3 	bllt	ffd3d0d8 <__bss_end__+0xffd33498>
 108:	0038024c 	eorseq	r0, r8, ip, asr #4
 10c:	00c50101 	sbceq	r0, r5, r1, lsl #2
 110:	00020000 	andeq	r0, r2, r0
 114:	00000086 	andeq	r0, r0, r6, lsl #1
 118:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 11c:	0101000d 	tsteq	r1, sp
 120:	00000101 	andeq	r0, r0, r1, lsl #2
 124:	00000100 	andeq	r0, r0, r0, lsl #2
 128:	73552f01 	cmpvc	r5, #1, 30
 12c:	2f737265 	svccs	0x00737265
 130:	61697262 	cmnvs	r9, r2, ror #4
 134:	6e756a6e 	vsubvs.f32	s13, s10, s29
 138:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 13c:	706f746b 	rsbvc	r7, pc, fp, ror #8
 140:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 144:	2f6c6f6f 	svccs	0x006c6f6f
 148:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 14c:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 150:	432f3032 	teqmi	pc, #50	; 0x32
 154:	30343153 	eorscc	r3, r4, r3, asr r1
 158:	73632f45 	cmnvc	r3, #276	; 0x114
 15c:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 160:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 164:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; ffffffc8 <__bss_end__+0xffff6388>
 168:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 16c:	6e690000 	cdpvs	0, 6, cr0, cr9, cr0, {0}
 170:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
 174:	73747075 	cmnvc	r4, #117	; 0x75
 178:	632e632d 	teqvs	lr, #-1275068416	; 0xb4000000
 17c:	00000000 	andeq	r0, r0, r0
 180:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 184:	00010068 	andeq	r0, r1, r8, rrx
 188:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 18c:	746e692d 	strbtvc	r6, [lr], #-2349	; 0x92d
 190:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
 194:	2e737470 	mrccs	4, 3, r7, cr3, cr0, {3}
 198:	00000068 	andeq	r0, r0, r8, rrx
 19c:	05000000 	streq	r0, [r0, #-0]
 1a0:	00836c02 	addeq	r6, r3, r2, lsl #24
 1a4:	67311600 	ldrvs	r1, [r1, -r0, lsl #12]!
 1a8:	2e0e0367 	cdpcs	3, 0, cr0, cr14, cr7, {3}
 1ac:	002d2f83 	eoreq	r2, sp, r3, lsl #31
 1b0:	2f020402 	svccs	0x00020402
 1b4:	02040200 	andeq	r0, r4, #0, 4
 1b8:	04020065 	streq	r0, [r2], #-101	; 0x65
 1bc:	062e0601 	strteq	r0, [lr], -r1, lsl #12
 1c0:	084ba24c 	stmdaeq	fp, {r2, r3, r6, r9, sp, pc}^
 1c4:	92084b94 	andls	r4, r8, #148, 22	; 0x25000
 1c8:	4b92084b 	blmi	fe4822fc <__bss_end__+0xfe4786bc>
 1cc:	084b9208 	stmdaeq	fp, {r3, r9, ip, pc}^
 1d0:	1a024b92 	bne	93020 <__bss_end__+0x893e0>
 1d4:	2a010100 	bcs	405dc <__bss_end__+0x3699c>
 1d8:	02000001 	andeq	r0, r0, #1
 1dc:	00010a00 	andeq	r0, r1, r0, lsl #20
 1e0:	fb010200 	blx	409ea <__bss_end__+0x36daa>
 1e4:	01000d0e 	tsteq	r0, lr, lsl #26
 1e8:	00010101 	andeq	r0, r1, r1, lsl #2
 1ec:	00010000 	andeq	r0, r1, r0
 1f0:	2e2e0100 	sufcse	f0, f6, f0
 1f4:	6d69742f 	cfstrdvs	mvd7, [r9, #-188]!	; 0xffffff44
 1f8:	692d7265 	pushvs	{r0, r2, r5, r6, r9, ip, sp, lr}
 1fc:	002f746e 	eoreq	r7, pc, lr, ror #8
 200:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 204:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
 208:	432f6c61 	teqmi	pc, #24832	; 0x6100
 20c:	616c6c65 	cmnvs	ip, r5, ror #24
 210:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 214:	6f6e2d6d 	svcvs	0x006e2d6d
 218:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 21c:	2f696261 	svccs	0x00696261
 220:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 224:	73632d33 	cmnvc	r3, #3264	; 0xcc0
 228:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
 22c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 230:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
 234:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 238:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 23c:	61652d65 	cmnvs	r5, r5, ror #26
 240:	342f6962 	strtcc	r6, [pc], #-2402	; 248 <_start-0x7db8>
 244:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 248:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 24c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
 250:	73552f00 	cmpvc	r5, #0, 30
 254:	2f737265 	svccs	0x00737265
 258:	61697262 	cmnvs	r9, r2, ror #4
 25c:	6e756a6e 	vsubvs.f32	s13, s10, s29
 260:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 264:	706f746b 	rsbvc	r7, pc, fp, ror #8
 268:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 26c:	2f6c6f6f 	svccs	0x006c6f6f
 270:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 274:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 278:	432f3032 	teqmi	pc, #50	; 0x32
 27c:	30343153 	eorscc	r3, r4, r3, asr r1
 280:	73632f45 	cmnvc	r3, #276	; 0x114
 284:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 288:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 28c:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; f0 <_start-0x7f10>
 290:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 294:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
 298:	2d72656d 	cfldr64cs	mvdx6, [r2, #-436]!	; 0xfffffe4c
 29c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 2a0:	70757272 	rsbsvc	r7, r5, r2, ror r2
 2a4:	00632e74 	rsbeq	r2, r3, r4, ror lr
 2a8:	72000001 	andvc	r0, r0, #1
 2ac:	612d6970 	teqvs	sp, r0, ror r9
 2b0:	69746d72 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
 2b4:	2e72656d 	cdpcs	5, 7, cr6, cr2, cr13, {3}
 2b8:	00010068 	andeq	r0, r1, r8, rrx
 2bc:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
 2c0:	2d746e69 	ldclcs	14, cr6, [r4, #-420]!	; 0xfffffe5c
 2c4:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
 2c8:	00020068 	andeq	r0, r2, r8, rrx
 2cc:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 2d0:	746e692d 	strbtvc	r6, [lr], #-2349	; 0x92d
 2d4:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
 2d8:	2e737470 	mrccs	4, 3, r7, cr3, cr0, {3}
 2dc:	00010068 	andeq	r0, r1, r8, rrx
 2e0:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 2e4:	0300682e 	movweq	r6, #2094	; 0x82e
 2e8:	00000000 	andeq	r0, r0, r0
 2ec:	853c0205 	ldrhi	r0, [ip, #-517]!	; 0x205
 2f0:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
 2f4:	4a0b0301 	bmi	2c0f00 <__bss_end__+0x2b72c0>
 2f8:	6646034b 	strbvs	r0, [r6], -fp, asr #6
 2fc:	6a6a324b 	bvs	1a8cc30 <__bss_end__+0x1a82ff0>
 300:	01000e02 	tsteq	r0, r2, lsl #28
 304:	00010201 	andeq	r0, r1, r1, lsl #4
 308:	eb000200 	bl	b10 <_start-0x74f0>
 30c:	02000000 	andeq	r0, r0, #0
 310:	0d0efb01 	vstreq	d15, [lr, #-4]
 314:	01010100 	mrseq	r0, (UNDEF: 17)
 318:	00000001 	andeq	r0, r0, r1
 31c:	01000001 	tsteq	r0, r1
 320:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 324:	73752f00 	cmnvc	r5, #0, 30
 328:	6f6c2f72 	svcvs	0x006c2f72
 32c:	2f6c6163 	svccs	0x006c6163
 330:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
 334:	612f7261 	teqvs	pc, r1, ror #4
 338:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 33c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 340:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 344:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 348:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
 34c:	30373173 	eorscc	r3, r7, r3, ror r1
 350:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 354:	63672f62 	cmnvs	r7, #392	; 0x188
 358:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
 35c:	6f6e2d6d 	svcvs	0x006e2d6d
 360:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 364:	2f696261 	svccs	0x00696261
 368:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 36c:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
 370:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
 374:	552f0065 	strpl	r0, [pc, #-101]!	; 317 <_start-0x7ce9>
 378:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 37c:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 380:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 384:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 388:	6f746b73 	svcvs	0x00746b73
 38c:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 390:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 1f8 <_start-0x7e08>
 394:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 398:	31726574 	cmncc	r2, r4, ror r5
 39c:	2f303239 	svccs	0x00303239
 3a0:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 3a4:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 3a8:	30343173 	eorscc	r3, r4, r3, ror r1
 3ac:	30322d65 	eorscc	r2, r2, r5, ror #26
 3b0:	2f6e6977 	svccs	0x006e6977
 3b4:	7062696c 	rsbvc	r6, r2, ip, ror #18
 3b8:	70000069 	andvc	r0, r0, r9, rrx
 3bc:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 3c0:	00632e6b 	rsbeq	r2, r3, fp, ror #28
 3c4:	73000001 	movwvc	r0, #1
 3c8:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
 3cc:	00682e67 	rsbeq	r2, r8, r7, ror #28
 3d0:	3c000002 	stccc	0, cr0, [r0], {2}
 3d4:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 3d8:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
 3dc:	0000003e 	andeq	r0, r0, lr, lsr r0
 3e0:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 3e4:	0300682e 	movweq	r6, #2094	; 0x82e
 3e8:	61760000 	cmnvs	r6, r0
 3ec:	6972702d 	ldmdbvs	r2!, {r0, r2, r3, r5, ip, sp, lr}^
 3f0:	2e6b746e 	cdpcs	4, 6, cr7, cr11, cr14, {3}
 3f4:	00010068 	andeq	r0, r1, r8, rrx
 3f8:	05000000 	streq	r0, [r0, #-0]
 3fc:	00859802 	addeq	r9, r5, r2, lsl #16
 400:	4b6b1700 	blmi	1ac6008 <__bss_end__+0x1abc3c8>
 404:	0e0289bf 	mcreq	9, 0, r8, cr2, cr15, {5}
 408:	96010100 	strls	r0, [r1], -r0, lsl #2
 40c:	02000000 	andeq	r0, r0, #0
 410:	00006f00 	andeq	r6, r0, r0, lsl #30
 414:	fb010200 	blx	40c1e <__bss_end__+0x36fde>
 418:	01000d0e 	tsteq	r0, lr, lsl #26
 41c:	00010101 	andeq	r0, r1, r1, lsl #2
 420:	00010000 	andeq	r0, r1, r0
 424:	696c0100 	stmdbvs	ip!, {r8}^
 428:	2f006362 	svccs	0x00006362
 42c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 430:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 434:	6a6e6169 	bvs	1b989e0 <__bss_end__+0x1b8eda0>
 438:	442f6e75 	strtmi	r6, [pc], #-3701	; 440 <_start-0x7bc0>
 43c:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 440:	732f706f 	teqvc	pc, #111	; 0x6f
 444:	6f6f6863 	svcvs	0x006f6863
 448:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 44c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 450:	30323931 	eorscc	r3, r2, r1, lsr r9
 454:	3153432f 	cmpcc	r3, pc, lsr #6
 458:	2f453034 	svccs	0x00453034
 45c:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 460:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 464:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 468:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 46c:	00006970 	andeq	r6, r0, r0, ror r9
 470:	6b747570 	blvs	1d1da38 <__bss_end__+0x1d13df8>
 474:	0100632e 	tsteq	r0, lr, lsr #6
 478:	70720000 	rsbsvc	r0, r2, r0
 47c:	00682e69 	rsbeq	r2, r8, r9, ror #28
 480:	00000002 	andeq	r0, r0, r2
 484:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
 488:	15000085 	strne	r0, [r0, #-133]	; 0x85
 48c:	02002d4c 	andeq	r2, r0, #76, 26	; 0x1300
 490:	002f0204 	eoreq	r0, pc, r4, lsl #4
 494:	49020402 	stmdbmi	r2, {r1, sl}
 498:	01040200 	mrseq	r0, R12_usr
 49c:	6b062e06 	blvs	18bcbc <__bss_end__+0x18207c>
 4a0:	01000602 	tsteq	r0, r2, lsl #12
 4a4:	0001dc01 	andeq	sp, r1, r1, lsl #24
 4a8:	df000200 	svcle	0x00000200
 4ac:	02000000 	andeq	r0, r0, #0
 4b0:	0d0efb01 	vstreq	d15, [lr, #-4]
 4b4:	01010100 	mrseq	r0, (UNDEF: 17)
 4b8:	00000001 	andeq	r0, r0, r1
 4bc:	01000001 	tsteq	r0, r1
 4c0:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 4c4:	73752f00 	cmnvc	r5, #0, 30
 4c8:	6f6c2f72 	svcvs	0x006c2f72
 4cc:	2f6c6163 	svccs	0x006c6163
 4d0:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
 4d4:	612f7261 	teqvs	pc, r1, ror #4
 4d8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 4dc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 4e0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 4e4:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 4e8:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
 4ec:	30373173 	eorscc	r3, r7, r3, ror r1
 4f0:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 4f4:	63672f62 	cmnvs	r7, #392	; 0x188
 4f8:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
 4fc:	6f6e2d6d 	svcvs	0x006e2d6d
 500:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 504:	2f696261 	svccs	0x00696261
 508:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 50c:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
 510:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
 514:	552f0065 	strpl	r0, [pc, #-101]!	; 4b7 <_start-0x7b49>
 518:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 51c:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 520:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 524:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 528:	6f746b73 	svcvs	0x00746b73
 52c:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 530:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 398 <_start-0x7c68>
 534:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 538:	31726574 	cmncc	r2, r4, ror r5
 53c:	2f303239 	svccs	0x00303239
 540:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 544:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 548:	30343173 	eorscc	r3, r4, r3, ror r1
 54c:	30322d65 	eorscc	r2, r2, r5, ror #26
 550:	2f6e6977 	svccs	0x006e6977
 554:	7062696c 	rsbvc	r6, r2, ip, ror #18
 558:	76000069 	strvc	r0, [r0], -r9, rrx
 55c:	72702d61 	rsbsvc	r2, r0, #6208	; 0x1840
 560:	6b746e69 	blvs	1d1bf0c <__bss_end__+0x1d122cc>
 564:	0100632e 	tsteq	r0, lr, lsr #6
 568:	74730000 	ldrbtvc	r0, [r3], #-0
 56c:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
 570:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 574:	70720000 	rsbsvc	r0, r2, r0
 578:	00682e69 	rsbeq	r2, r8, r9, ror #28
 57c:	3c000003 	stccc	0, cr0, [r0], {3}
 580:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 584:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
 588:	0000003e 	andeq	r0, r0, lr, lsr r0
 58c:	05000000 	streq	r0, [r0, #-0]
 590:	00862402 	addeq	r2, r6, r2, lsl #8
 594:	01260300 	teqeq	r6, r0, lsl #6
 598:	3113a501 	tstcc	r3, r1, lsl #10
 59c:	0402002d 	streq	r0, [r2], #-45	; 0x2d
 5a0:	02002f02 	andeq	r2, r0, #2, 30
 5a4:	002d0204 	eoreq	r0, sp, r4, lsl #4
 5a8:	2f020402 	svccs	0x00020402
 5ac:	01040200 	mrseq	r0, R12_usr
 5b0:	304c4c2d 	subcc	r4, ip, sp, lsr #24
 5b4:	4f2f4b14 	svcmi	0x002f4b14
 5b8:	02040200 	andeq	r0, r4, #0, 4
 5bc:	04020067 	streq	r0, [r2], #-103	; 0x67
 5c0:	4d4c6501 	cfstr64mi	mvdx6, [ip, #-4]
 5c4:	312fa030 	teqcc	pc, r0, lsr r0	; <UNPREDICTABLE>
 5c8:	16260230 			; <UNDEFINED> instruction: 0x16260230
 5cc:	002c2d84 	eoreq	r2, ip, r4, lsl #27
 5d0:	30010402 	andcc	r0, r1, r2, lsl #8
 5d4:	01040200 	mrseq	r0, R12_usr
 5d8:	00660633 	rsbeq	r0, r6, r3, lsr r6
 5dc:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 5e0:	01040200 	mrseq	r0, R12_usr
 5e4:	67210806 	strvs	r0, [r1, -r6, lsl #16]!
 5e8:	8273032f 	rsbshi	r0, r3, #-1140850688	; 0xbc000000
 5ec:	002e1303 	eoreq	r1, lr, r3, lsl #6
 5f0:	06010402 	streq	r0, [r1], -r2, lsl #8
 5f4:	0402002e 	streq	r0, [r2], #-46	; 0x2e
 5f8:	6a9f0601 	bvs	fe7c1e04 <__bss_end__+0xfe7b81c4>
 5fc:	2e67034b 	cdpcs	3, 6, cr0, cr7, cr11, {2}
 600:	002e2103 	eoreq	r2, lr, r3, lsl #2
 604:	06010402 	streq	r0, [r1], -r2, lsl #8
 608:	0402002e 	streq	r0, [r2], #-46	; 0x2e
 60c:	009f0601 	addseq	r0, pc, r1, lsl #12
 610:	6a010402 	bvs	41620 <__bss_end__+0x379e0>
 614:	a603f3bd 			; <UNDEFINED> instruction: 0xa603f3bd
 618:	2f20087f 	svccs	0x0020087f
 61c:	01040200 	mrseq	r0, R12_usr
 620:	bb064a06 	bllt	192e40 <__bss_end__+0x189200>
 624:	da032f4b 	ble	cc358 <__bss_end__+0xc2718>
 628:	4c83f200 	sfmmi	f7, 1, [r3], {0}
 62c:	2f2f3148 	svccs	0x002f3148
 630:	2d2f4b84 	vstmdbcs	pc!, {d4-d5}
 634:	2f30314d 	svccs	0x0030314d
 638:	04020083 	streq	r0, [r2], #-131	; 0x83
 63c:	00be2c01 	adcseq	r2, lr, r1, lsl #24
 640:	06010402 	streq	r0, [r1], -r2, lsl #8
 644:	02bc064a 	adcseq	r0, ip, #77594624	; 0x4a00000
 648:	0e031636 	mcreq	6, 0, r1, cr3, cr6, {1}
 64c:	302108ba 	strhtcc	r0, [r1], -sl
 650:	08312108 	ldmdaeq	r1!, {r3, r8, sp}
 654:	21083021 	tstcs	r8, r1, lsr #32
 658:	08304b30 	ldmdaeq	r0!, {r4, r5, r8, r9, fp, lr}
 65c:	31d93021 	bicscc	r3, r9, r1, lsr #32
 660:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 664:	02006501 	andeq	r6, r0, #4194304	; 0x400000
 668:	4a060204 	bmi	180e80 <__bss_end__+0x177240>
 66c:	01040200 	mrseq	r0, R12_usr
 670:	66420306 	strbvs	r0, [r2], -r6, lsl #6
 674:	02040200 	andeq	r0, r4, #0, 4
 678:	03066606 	movweq	r6, #26118	; 0x6606
 67c:	684a00c2 	stmdavs	sl, {r1, r6, r7}^
 680:	01001002 	tsteq	r0, r2
 684:	00009301 	andeq	r9, r0, r1, lsl #6
 688:	7d000200 	sfmvc	f0, 4, [r0, #-0]
 68c:	02000000 	andeq	r0, r0, #0
 690:	0d0efb01 	vstreq	d15, [lr, #-4]
 694:	01010100 	mrseq	r0, (UNDEF: 17)
 698:	00000001 	andeq	r0, r0, r1
 69c:	01000001 	tsteq	r0, r1
 6a0:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 6a4:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
 6a8:	2f006372 	svccs	0x00006372
 6ac:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 6b0:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 6b4:	6a6e6169 	bvs	1b98c60 <__bss_end__+0x1b8f020>
 6b8:	442f6e75 	strtmi	r6, [pc], #-3701	; 6c0 <_start-0x7940>
 6bc:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 6c0:	732f706f 	teqvc	pc, #111	; 0x6f
 6c4:	6f6f6863 	svcvs	0x006f6863
 6c8:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 6cc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 6d0:	30323931 	eorscc	r3, r2, r1, lsr r9
 6d4:	3153432f 	cmpcc	r3, pc, lsr #6
 6d8:	2f453034 	svccs	0x00453034
 6dc:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 6e0:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 6e4:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 6e8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 6ec:	00006970 	andeq	r6, r0, r0, ror r9
 6f0:	61656c63 	cmnvs	r5, r3, ror #24
 6f4:	65722d6e 	ldrbvs	r2, [r2, #-3438]!	; 0xd6e
 6f8:	746f6f62 	strbtvc	r6, [pc], #-3938	; 700 <_start-0x7900>
 6fc:	0100632e 	tsteq	r0, lr, lsr #6
 700:	70720000 	rsbsvc	r0, r2, r0
 704:	00682e69 	rsbeq	r2, r8, r9, ror #28
 708:	00000002 	andeq	r0, r0, r2
 70c:	14020500 	strne	r0, [r2], #-1280	; 0x500
 710:	1500008b 	strne	r0, [r0, #-139]	; 0x8b
 714:	024b832f 	subeq	r8, fp, #-1140850688	; 0xbc000000
 718:	01010006 	tsteq	r1, r6
 71c:	00000096 	muleq	r0, r6, r0
 720:	00770002 	rsbseq	r0, r7, r2
 724:	01020000 	mrseq	r0, (UNDEF: 2)
 728:	000d0efb 	strdeq	r0, [sp], -fp
 72c:	01010101 	tsteq	r1, r1, lsl #2
 730:	01000000 	mrseq	r0, (UNDEF: 0)
 734:	63010000 	movwvs	r0, #4096	; 0x1000
 738:	30343173 	eorscc	r3, r4, r3, ror r1
 73c:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 740:	552f0063 	strpl	r0, [pc, #-99]!	; 6e5 <_start-0x791b>
 744:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 748:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 74c:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 750:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 754:	6f746b73 	svcvs	0x00746b73
 758:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 75c:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 5c4 <_start-0x7a3c>
 760:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 764:	31726574 	cmncc	r2, r4, ror r5
 768:	2f303239 	svccs	0x00303239
 76c:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 770:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 774:	30343173 	eorscc	r3, r4, r3, ror r1
 778:	30322d65 	eorscc	r2, r2, r5, ror #26
 77c:	2f6e6977 	svccs	0x006e6977
 780:	7062696c 	rsbvc	r6, r2, ip, ror #18
 784:	63000069 	movwvs	r0, #105	; 0x69
 788:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 78c:	00632e74 	rsbeq	r2, r3, r4, ror lr
 790:	72000001 	andvc	r0, r0, #1
 794:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 798:	00000200 	andeq	r0, r0, r0, lsl #4
 79c:	02050000 	andeq	r0, r5, #0
 7a0:	00008b3c 	andeq	r8, r0, ip, lsr fp
 7a4:	2f313214 	svccs	0x00313214
 7a8:	02002f2d 	andeq	r2, r0, #45, 30	; 0xb4
 7ac:	4d490104 	stfmie	f0, [r9, #-16]
 7b0:	0006022f 	andeq	r0, r6, pc, lsr #4
 7b4:	00990101 	addseq	r0, r9, r1, lsl #2
 7b8:	00020000 	andeq	r0, r2, r0
 7bc:	00000077 	andeq	r0, r0, r7, ror r0
 7c0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 7c4:	0101000d 	tsteq	r1, sp
 7c8:	00000101 	andeq	r0, r0, r1, lsl #2
 7cc:	00000100 	andeq	r0, r0, r0, lsl #2
 7d0:	31736301 	cmncc	r3, r1, lsl #6
 7d4:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 7d8:	00637273 	rsbeq	r7, r3, r3, ror r2
 7dc:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 7e0:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 7e4:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 7e8:	2f6e756a 	svccs	0x006e756a
 7ec:	6b736544 	blvs	1cd9d04 <__bss_end__+0x1cd00c4>
 7f0:	2f706f74 	svccs	0x00706f74
 7f4:	6f686373 	svcvs	0x00686373
 7f8:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 7fc:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 800:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 804:	53432f30 	movtpl	r2, #16176	; 0x3f30
 808:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 80c:	3173632f 	cmncc	r3, pc, lsr #6
 810:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 814:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 818:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 81c:	00697062 	rsbeq	r7, r9, r2, rrx
 820:	62657200 	rsbvs	r7, r5, #0, 4
 824:	2e746f6f 	cdpcs	15, 7, cr6, cr4, cr15, {3}
 828:	00010063 	andeq	r0, r1, r3, rrx
 82c:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 830:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 834:	00000000 	andeq	r0, r0, r0
 838:	8b700205 	blhi	1c01054 <__bss_end__+0x1bf7414>
 83c:	0d030000 	stceq	0, cr0, [r3, #-0]
 840:	2f311401 	svccs	0x00311401
 844:	4b2f1585 	blmi	bc5e60 <__bss_end__+0xbbc220>
 848:	35672f4d 	strbcc	r2, [r7, #-3917]!	; 0xf4d
 84c:	10026752 	andne	r6, r2, r2, asr r7
 850:	a5010100 	strge	r0, [r1, #-256]	; 0x100
 854:	02000000 	andeq	r0, r0, #0
 858:	00007600 	andeq	r7, r0, r0, lsl #12
 85c:	fb010200 	blx	41066 <__bss_end__+0x37426>
 860:	01000d0e 	tsteq	r0, lr, lsl #26
 864:	00010101 	andeq	r0, r1, r1, lsl #2
 868:	00010000 	andeq	r0, r1, r0
 86c:	73630100 	cmnvc	r3, #0, 2
 870:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 874:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 878:	73552f00 	cmpvc	r5, #0, 30
 87c:	2f737265 	svccs	0x00737265
 880:	61697262 	cmnvs	r9, r2, ror #4
 884:	6e756a6e 	vsubvs.f32	s13, s10, s29
 888:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 88c:	706f746b 	rsbvc	r7, pc, fp, ror #8
 890:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 894:	2f6c6f6f 	svccs	0x006c6f6f
 898:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 89c:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 8a0:	432f3032 	teqmi	pc, #50	; 0x32
 8a4:	30343153 	eorscc	r3, r4, r3, asr r1
 8a8:	73632f45 	cmnvc	r3, #276	; 0x114
 8ac:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 8b0:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 8b4:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 718 <_start-0x78e8>
 8b8:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 8bc:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
 8c0:	2e72656d 	cdpcs	5, 7, cr6, cr2, cr13, {3}
 8c4:	00010063 	andeq	r0, r1, r3, rrx
 8c8:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 8cc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 8d0:	00000000 	andeq	r0, r0, r0
 8d4:	8be40205 	blhi	ff9010f0 <__bss_end__+0xff8f74b0>
 8d8:	13160000 	tstne	r6, #0
 8dc:	02002d2f 	andeq	r2, r0, #3008	; 0xbc0
 8e0:	2e060104 	adfcss	f0, f6, f4
 8e4:	2f316806 	svccs	0x00316806
 8e8:	2f2f4d4b 	svccs	0x002f4d4b
 8ec:	4b4c304b 	blmi	130ca20 <__bss_end__+0x1302de0>
 8f0:	2f6a2f4c 	svccs	0x006a2f4c
 8f4:	022f842f 	eoreq	r8, pc, #788529152	; 0x2f000000
 8f8:	01010008 	tsteq	r1, r8
 8fc:	00000077 	andeq	r0, r0, r7, ror r0
 900:	003b0002 	eorseq	r0, fp, r2
 904:	01020000 	mrseq	r0, (UNDEF: 2)
 908:	000d0efb 	strdeq	r0, [sp], -fp
 90c:	01010101 	tsteq	r1, r1, lsl #2
 910:	01000000 	mrseq	r0, (UNDEF: 0)
 914:	63010000 	movwvs	r0, #4096	; 0x1000
 918:	30343173 	eorscc	r3, r4, r3, ror r1
 91c:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 920:	75000063 	strvc	r0, [r0, #-99]	; 0x63
 924:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
 928:	00000063 	andeq	r0, r0, r3, rrx
 92c:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 930:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 934:	72000001 	andvc	r0, r0, #1
 938:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 93c:	00000000 	andeq	r0, r0, r0
 940:	02050000 	andeq	r0, r5, #0
 944:	00008ce0 	andeq	r8, r0, r0, ror #25
 948:	0100d603 	tsteq	r0, r3, lsl #12
 94c:	5e03672f 	cdppl	7, 0, cr6, cr3, cr15, {1}
 950:	67333066 	ldrvs	r3, [r3, -r6, rrx]!
 954:	30d8306d 	sbcscc	r3, r8, sp, rrx
 958:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
 95c:	0a036867 	beq	dab00 <__bss_end__+0xd0ec0>
 960:	67673082 	strbvs	r3, [r7, -r2, lsl #1]!
 964:	6a672f69 	bvs	19cc710 <__bss_end__+0x19c2ad0>
 968:	2fc1674c 	svccs	0x00c1674c
 96c:	682f302f 	stmdavs	pc!, {r0, r1, r2, r3, r5, ip, sp}	; <UNPREDICTABLE>
 970:	02023049 	andeq	r3, r2, #73	; 0x49
 974:	a5010100 	strge	r0, [r1, #-256]	; 0x100
 978:	02000000 	andeq	r0, r0, #0
 97c:	00003200 	andeq	r3, r0, r0, lsl #4
 980:	fb010200 	blx	4118a <__bss_end__+0x3754a>
 984:	01000d0e 	tsteq	r0, lr, lsl #26
 988:	00010101 	andeq	r0, r1, r1, lsl #2
 98c:	00010000 	andeq	r0, r1, r0
 990:	73630100 	cmnvc	r3, #0, 2
 994:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 998:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 99c:	70670000 	rsbvc	r0, r7, r0
 9a0:	632e6f69 	teqvs	lr, #420	; 0x1a4
 9a4:	00000000 	andeq	r0, r0, r0
 9a8:	6f697067 	svcvs	0x00697067
 9ac:	0100682e 	tsteq	r0, lr, lsr #16
 9b0:	00000000 	andeq	r0, r0, r0
 9b4:	8e340205 	cdphi	2, 3, cr0, cr4, cr5, {0}
 9b8:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
 9bc:	69504e01 	ldmdbvs	r0, {r0, r9, sl, fp, lr}^
 9c0:	67672108 	strbvs	r2, [r7, -r8, lsl #2]!
 9c4:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
 9c8:	22084b32 	andcs	r4, r8, #51200	; 0xc800
 9cc:	135131dc 	cmpne	r1, #220, 2	; 0x37
 9d0:	be30504e 	cdplt	0, 3, cr5, cr0, cr14, {2}
 9d4:	4d135031 	ldcmi	0, cr5, [r3, #-196]	; 0xffffff3c
 9d8:	4cc0304f 	stclmi	0, cr3, [r0], {79}	; 0x4f
 9dc:	21086950 	tstcs	r8, r0, asr r9
 9e0:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
 9e4:	4b326767 	blmi	c9a788 <__bss_end__+0xc90b48>
 9e8:	4ca42108 	stfmis	f2, [r4], #32
 9ec:	69842f50 	stmibvs	r4, {r4, r6, r8, r9, sl, fp, sp}
 9f0:	03827503 	orreq	r7, r2, #12582912	; 0xc00000
 9f4:	304d2e0c 	subcc	r2, sp, ip, lsl #28
 9f8:	7f98034e 	svcvc	0x0098034e
 9fc:	4e13514a 	mufmism	f5, f3, #2.0
 a00:	50a53050 	adcpl	r3, r5, r0, asr r0
 a04:	304f4d13 	subcc	r4, pc, r3, lsl sp	; <UNPREDICTABLE>
 a08:	ba00c203 	blt	3121c <__bss_end__+0x275dc>
 a0c:	08696b6a 	stmdaeq	r9!, {r1, r3, r5, r6, r8, r9, fp, sp, lr}^
 a10:	67676721 	strbvs	r6, [r7, -r1, lsr #14]!
 a14:	32676767 	rsbcc	r6, r7, #27000832	; 0x19c0000
 a18:	0222084b 	eoreq	r0, r2, #4915200	; 0x4b0000
 a1c:	0101000c 	tsteq	r1, ip
 a20:	00000086 	andeq	r0, r0, r6, lsl #1
 a24:	00720002 	rsbseq	r0, r2, r2
 a28:	01020000 	mrseq	r0, (UNDEF: 2)
 a2c:	000d0efb 	strdeq	r0, [sp], -fp
 a30:	01010101 	tsteq	r1, r1, lsl #2
 a34:	01000000 	mrseq	r0, (UNDEF: 0)
 a38:	6c010000 	stcvs	0, cr0, [r1], {-0}
 a3c:	00636269 	rsbeq	r6, r3, r9, ror #4
 a40:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 a44:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 a48:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 a4c:	2f6e756a 	svccs	0x006e756a
 a50:	6b736544 	blvs	1cd9f68 <__bss_end__+0x1cd0328>
 a54:	2f706f74 	svccs	0x00706f74
 a58:	6f686373 	svcvs	0x00686373
 a5c:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 a60:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 a64:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 a68:	53432f30 	movtpl	r2, #16176	; 0x3f30
 a6c:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 a70:	3173632f 	cmncc	r3, pc, lsr #6
 a74:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 a78:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 a7c:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 a80:	00697062 	rsbeq	r7, r9, r2, rrx
 a84:	74757000 	ldrbtvc	r7, [r5], #-0
 a88:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 a8c:	0100632e 	tsteq	r0, lr, lsr #6
 a90:	70720000 	rsbsvc	r0, r2, r0
 a94:	00682e69 	rsbeq	r2, r8, r9, ror #28
 a98:	00000002 	andeq	r0, r0, r2
 a9c:	e0020500 	and	r0, r2, r0, lsl #10
 aa0:	14000091 	strne	r0, [r0], #-145	; 0x91
 aa4:	0006024a 	andeq	r0, r6, sl, asr #4
 aa8:	Address 0x0000000000000aa8 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	5f746f74 	svcpl	0x00746f74
   4:	63657375 	cmnvs	r5, #-738197503	; 0xd4000001
   8:	73552f00 	cmpvc	r5, #0, 30
   c:	2f737265 	svccs	0x00737265
  10:	61697262 	cmnvs	r9, r2, ror #4
  14:	6e756a6e 	vsubvs.f32	s13, s10, s29
  18:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
  1c:	706f746b 	rsbvc	r7, pc, fp, ror #8
  20:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
  24:	2f6c6f6f 	svccs	0x006c6f6f
  28:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
  2c:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
  30:	432f3032 	teqmi	pc, #50	; 0x32
  34:	30343153 	eorscc	r3, r4, r3, asr r1
  38:	73632f45 	cmnvc	r3, #276	; 0x114
  3c:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
  40:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
  44:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; fffffea8 <__bss_end__+0xffff6268>
  48:	2f736261 	svccs	0x00736261
  4c:	6e692d37 	mcrvs	13, 3, r2, cr9, cr7, {1}
  50:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
  54:	73747075 	cmnvc	r4, #117	; 0x75
  58:	6d69742f 	cfstrdvs	mvd7, [r9, #-188]!	; 0xffffff44
  5c:	692d7265 	pushvs	{r0, r2, r5, r6, r9, ip, sp, lr}
  60:	6100746e 	tstvs	r0, lr, ror #8
  64:	745f6d72 	ldrbvc	r6, [pc], #-3442	; 6c <_start-0x7f94>
  68:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
  6c:	5741525f 	smlsldpl	r5, r1, pc, r2	; <UNPREDICTABLE>
  70:	00515249 	subseq	r5, r1, r9, asr #4
  74:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
  78:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
  7c:	65700074 	ldrbvs	r0, [r0, #-116]!	; 0x74
  80:	646f6972 	strbtvs	r6, [pc], #-2418	; 88 <_start-0x7f78>
  84:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
  88:	6f6c2067 	svcvs	0x006c2067
  8c:	7520676e 	strvc	r6, [r0, #-1902]!	; 0x76e
  90:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  94:	2064656e 	rsbcs	r6, r4, lr, ror #10
  98:	00746e69 	rsbseq	r6, r4, r9, ror #28
  9c:	61736944 	cmnvs	r3, r4, asr #18
  a0:	5f656c62 	svcpl	0x00656c62
  a4:	73515249 	cmpvc	r1, #-1879048188	; 0x90000004
  a8:	4400315f 	strmi	r3, [r0], #-351	; 0x15f
  ac:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
  b0:	495f656c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
  b4:	5f735152 	svcpl	0x00735152
  b8:	6f6c0032 	svcvs	0x006c0032
  bc:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
  c0:	20676e6f 	rsbcs	r6, r7, pc, ror #28
  c4:	00746e69 	rsbseq	r6, r4, r9, ror #28
  c8:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
  cc:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
  d0:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
  d4:	5f747075 	svcpl	0x00747075
  d8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
  dc:	72657000 	rsbvc	r7, r5, #0
  e0:	5f646f69 	svcpl	0x00646f69
  e4:	006d7573 	rsbeq	r7, sp, r3, ror r5
  e8:	5f6d7261 	svcpl	0x006d7261
  ec:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
  f0:	6f435f72 	svcvs	0x00435f72
  f4:	6f72746e 	svcvs	0x0072746e
  f8:	7261006c 	rsbvc	r0, r1, #108	; 0x6c
  fc:	69745f6d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 100:	5f72656d 	svcpl	0x0072656d
 104:	64616f4c 	strbtvs	r6, [r1], #-3916	; 0xf4c
 108:	6d726100 	ldfvse	f6, [r2, #-0]
 10c:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
 110:	425f7265 	subsmi	r7, pc, #1342177286	; 0x50000006
 114:	00657361 	rsbeq	r7, r5, r1, ror #6
 118:	5f515249 	svcpl	0x00515249
 11c:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0x142
 120:	746f6e00 	strbtvc	r6, [pc], #-3584	; 128 <_start-0x7ed8>
 124:	6e69616d 	powvsez	f6, f1, #5.0
 128:	6d726100 	ldfvse	f6, [r2, #-0]
 12c:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
 130:	4d5f7265 	lfmmi	f7, 2, [pc, #-404]	; ffffffa4 <__bss_end__+0xffff6364>
 134:	656b7361 	strbvs	r7, [fp, #-865]!	; 0x361
 138:	51524964 	cmppl	r2, r4, ror #18
 13c:	51524900 	cmppl	r2, r0, lsl #18
 140:	6e65705f 	mcrvs	0, 3, r7, cr5, cr15, {2}
 144:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
 148:	4900315f 	stmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, ip, sp}
 14c:	705f5152 	subsvc	r5, pc, r2, asr r1	; <UNPREDICTABLE>
 150:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 154:	325f676e 	subscc	r6, pc, #28835840	; 0x1b80000
 158:	73694400 	cmnvc	r9, #0, 8
 15c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
 160:	7361425f 	cmnvc	r1, #-268435451	; 0xf0000005
 164:	495f6369 	ldmdbmi	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 168:	00735152 	rsbseq	r5, r3, r2, asr r1
 16c:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 170:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
 174:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
 178:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 17c:	6400746e 	strvs	r7, [r0], #-1134	; 0x46e
 180:	625f7665 	subsvs	r7, pc, #105906176	; 0x6500000
 184:	69727261 	ldmdbvs	r2!, {r0, r5, r6, r9, ip, sp, lr}^
 188:	45007265 	strmi	r7, [r0, #-613]	; 0x265
 18c:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
 190:	52495f65 	subpl	r5, r9, #404	; 0x194
 194:	315f7351 	cmpcc	pc, r1, asr r3	; <UNPREDICTABLE>
 198:	616e4500 	cmnvs	lr, r0, lsl #10
 19c:	5f656c62 	svcpl	0x00656c62
 1a0:	73515249 	cmpvc	r1, #-1879048188	; 0x90000004
 1a4:	6900325f 	stmdbvs	r0, {r0, r1, r2, r3, r4, r6, r9, ip, sp}
 1a8:	00726574 	rsbseq	r6, r2, r4, ror r5
 1ac:	61656c63 	cmnvs	r5, r3, ror #24
 1b0:	65725f6e 	ldrbvs	r5, [r2, #-3950]!	; 0xf6e
 1b4:	746f6f62 	strbtvc	r6, [pc], #-3938	; 1bc <_start-0x7e44>
 1b8:	7a697300 	bvc	1a5cdc0 <__bss_end__+0x1a53180>
 1bc:	70797465 	rsbsvc	r7, r9, r5, ror #8
 1c0:	6f740065 	svcvs	0x00740065
 1c4:	736d5f74 	cmnvc	sp, #116, 30	; 0x1d0
 1c8:	6d726100 	ldfvse	f6, [r2, #-0]
 1cc:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
 1d0:	525f7265 	subspl	r7, pc, #1342177286	; 0x50000006
 1d4:	616f6c65 	cmnvs	pc, r5, ror #24
 1d8:	45470064 	strbmi	r0, [r7, #-100]	; 0x64
 1dc:	00323354 	eorseq	r3, r2, r4, asr r3
 1e0:	5f746e69 	svcpl	0x00746e69
 1e4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
 1e8:	756f5f00 	strbvc	r5, [pc, #-3840]!	; fffff2f0 <__bss_end__+0xffff56b0>
 1ec:	69740074 	ldmdbvs	r4!, {r2, r4, r5, r6}^
 1f0:	5f72656d 	svcpl	0x0072656d
 1f4:	5f746567 	svcpl	0x00746567
 1f8:	63657375 	cmnvs	r5, #-738197503	; 0xd4000001
 1fc:	7761725f 			; <UNDEFINED> instruction: 0x7761725f
 200:	73797300 	cmnvc	r9, #0, 6
 204:	5f6d6574 	svcpl	0x006d6574
 208:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 20c:	695f656c 	ldmdbvs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
 210:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 214:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
 218:	6e750073 	mrcvs	0, 3, r0, cr5, cr3, {3}
 21c:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
 220:	63206465 	teqvs	r0, #1694498816	; 0x65000000
 224:	00726168 	rsbseq	r6, r2, r8, ror #2
 228:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 22c:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
 230:	4e470074 	mcrmi	0, 2, r0, cr7, cr4, {3}
 234:	20432055 	subcs	r2, r3, r5, asr r0
 238:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 23c:	6d2d2033 	stcvs	0, cr2, [sp, #-204]!	; 0xffffff34
 240:	3d757063 	ldclcc	0, cr7, [r5, #-396]!	; 0xfffffe74
 244:	316d7261 	cmncc	sp, r1, ror #4
 248:	6a363731 	bvs	d8df14 <__bss_end__+0xd842d4>
 24c:	732d667a 	teqvc	sp, #127926272	; 0x7a00000
 250:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xd20
 254:	3d656e75 	stclcc	14, cr6, [r5, #-468]!	; 0xfffffe2c
 258:	316d7261 	cmncc	sp, r1, ror #4
 25c:	6a363731 	bvs	d8df28 <__bss_end__+0xd842e8>
 260:	732d667a 	teqvc	sp, #127926272	; 0x7a00000
 264:	67672d20 	strbvs	r2, [r7, -r0, lsr #26]!
 268:	2d206264 	sfmcs	f6, 4, [r0, #-400]!	; 0xfffffe70
 26c:	2d20674f 	stccs	7, cr6, [r0, #-316]!	; 0xfffffec4
 270:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
 274:	39756e67 	ldmdbcc	r5!, {r0, r1, r2, r5, r6, r9, sl, fp, sp, lr}^
 278:	662d2039 			; <UNDEFINED> instruction: 0x662d2039
 27c:	65657266 	strbvs	r7, [r5, #-614]!	; 0x266
 280:	6e617473 	mcrvs	4, 3, r7, cr1, cr3, {3}
 284:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
 288:	6d726100 	ldfvse	f6, [r2, #-0]
 28c:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
 290:	505f7265 	subspl	r7, pc, r5, ror #4
 294:	69446572 	stmdbvs	r4, {r1, r4, r5, r6, r8, sl, sp, lr}^
 298:	65646976 	strbvs	r6, [r4, #-2422]!	; 0x976
 29c:	52490072 	subpl	r0, r9, #114	; 0x72
 2a0:	61625f51 	cmnvs	r2, r1, asr pc
 2a4:	5f636973 	svcpl	0x00636973
 2a8:	646e6570 	strbtvs	r6, [lr], #-1392	; 0x570
 2ac:	00676e69 	rsbeq	r6, r7, r9, ror #28
 2b0:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
 2b4:	425f656c 	subsmi	r6, pc, #108, 10	; 0x1b000000
 2b8:	63697361 	cmnvs	r9, #-2080374783	; 0x84000001
 2bc:	5152495f 	cmppl	r2, pc, asr r9
 2c0:	72610073 	rsbvc	r0, r1, #115	; 0x73
 2c4:	69745f6d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 2c8:	5f72656d 	svcpl	0x0072656d
 2cc:	756c6156 	strbvc	r6, [ip, #-342]!	; 0x156
 2d0:	72610065 	rsbvc	r0, r1, #101	; 0x65
 2d4:	69745f6d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 2d8:	5f72656d 	svcpl	0x0072656d
 2dc:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
 2e0:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 2e4:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
 2e8:	675f7265 	ldrbvs	r7, [pc, -r5, ror #4]
 2ec:	755f7465 	ldrbvc	r7, [pc, #-1125]	; fffffe8f <__bss_end__+0xffff624f>
 2f0:	00636573 	rsbeq	r6, r3, r3, ror r5
 2f4:	5f697072 	svcpl	0x00697072
 2f8:	5f6d7261 	svcpl	0x006d7261
 2fc:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 300:	00745f72 	rsbseq	r5, r4, r2, ror pc
 304:	5f514946 	svcpl	0x00514946
 308:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xf63
 30c:	006c6f72 	rsbeq	r6, ip, r2, ror pc
 310:	5f746f74 	svcpl	0x00746f74
 314:	00636573 	rsbeq	r6, r3, r3, ror r5
 318:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0x16c
 31c:	6b6c635f 	blvs	1b190a0 <__bss_end__+0x1b0f460>
 320:	54555000 	ldrbpl	r5, [r5], #-0
 324:	61003233 	tstvs	r0, r3, lsr r2
 328:	745f6d72 	ldrbvc	r6, [pc], #-3442	; 330 <_start-0x7cd0>
 32c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 330:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0x65f
 334:	6e755265 	cdpvs	2, 7, cr5, cr5, cr5, {3}
 338:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
 33c:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
 340:	00726574 	rsbseq	r6, r2, r4, ror r5
 344:	66657270 			; <UNDEFINED> instruction: 0x66657270
 348:	68637465 	stmdavs	r3!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 34c:	6f62615f 	svcvs	0x0062615f
 350:	765f7472 			; <UNDEFINED> instruction: 0x765f7472
 354:	6f746365 	svcvs	0x00746365
 358:	6e690072 	mcrvs	0, 3, r0, cr9, cr2, {3}
 35c:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
 360:	73747075 	cmnvc	r4, #117	; 0x75
 364:	632e632d 	teqvs	lr, #-1275068416	; 0xb4000000
 368:	6e695f00 	cdpvs	15, 6, cr5, cr9, cr0, {0}
 36c:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
 370:	5f747075 	svcpl	0x00747075
 374:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
 378:	695f0065 	ldmdbvs	pc, {r0, r2, r5, r6}^	; <UNPREDICTABLE>
 37c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 380:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
 384:	6261745f 	rsbvs	r7, r1, #1593835520	; 0x5f000000
 388:	655f656c 	ldrbvs	r6, [pc, #-1388]	; fffffe24 <__bss_end__+0xffff61e4>
 38c:	5f00646e 	svcpl	0x0000646e
 390:	4e55465f 	mrcmi	6, 2, r4, cr5, cr15, {2}
 394:	4f495443 	svcmi	0x00495443
 398:	005f5f4e 	subseq	r5, pc, lr, asr #30
 39c:	61746164 	cmnvs	r4, r4, ror #2
 3a0:	6f62615f 	svcvs	0x0062615f
 3a4:	765f7472 			; <UNDEFINED> instruction: 0x765f7472
 3a8:	6f746365 	svcvs	0x00746365
 3ac:	6e750072 	mrcvs	0, 3, r0, cr5, cr2, {3}
 3b0:	69666564 	stmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 3b4:	5f64656e 	svcpl	0x0064656e
 3b8:	74736e69 	ldrbtvc	r6, [r3], #-3689	; 0xe69
 3bc:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
 3c0:	5f6e6f69 	svcpl	0x006e6f69
 3c4:	74636576 	strbtvc	r6, [r3], #-1398	; 0x576
 3c8:	7200726f 	andvc	r7, r0, #-268435450	; 0xf0000006
 3cc:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
 3d0:	6365765f 	cmnvs	r5, #99614720	; 0x5f00000
 3d4:	00726f74 	rsbseq	r6, r2, r4, ror pc
 3d8:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xf73
 3dc:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
 3e0:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
 3e4:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
 3e8:	765f7470 			; <UNDEFINED> instruction: 0x765f7470
 3ec:	6f746365 	svcvs	0x00746365
 3f0:	61660072 	smcvs	24578	; 0x6002
 3f4:	695f7473 	ldmdbvs	pc, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 3f8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 3fc:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
 400:	6365765f 	cmnvs	r5, #99614720	; 0x5f00000
 404:	00726f74 	rsbseq	r6, r2, r4, ror pc
 408:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 40c:	6e655f72 	mcrvs	15, 3, r5, cr5, cr2, {3}
 410:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
 414:	69740064 	ldmdbvs	r4!, {r2, r5, r6}^
 418:	5f72656d 	svcpl	0x0072656d
 41c:	63656863 	cmnvs	r5, #6488064	; 0x630000
 420:	666f5f6b 	strbtvs	r5, [pc], -fp, ror #30
 424:	74657366 	strbtvc	r7, [r5], #-870	; 0x366
 428:	70720073 	rsbsvc	r0, r2, r3, ror r0
 42c:	72615f69 	rsbvc	r5, r1, #420	; 0x1a4
 430:	69745f6d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 434:	5f72656d 	svcpl	0x0072656d
 438:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 43c:	6e00745f 	cfmvsrvs	mvf0, r7
 440:	6c637963 	stclvs	9, cr7, [r3], #-396	; 0xfffffe74
 444:	75007365 	strvc	r7, [r0, #-869]	; 0x365
 448:	335f6573 	cmpcc	pc, #482344960	; 0x1cc00000
 44c:	74696232 	strbtvc	r6, [r9], #-562	; 0x232
 450:	756f635f 	strbvc	r6, [pc, #-863]!	; f9 <_start-0x7f07>
 454:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 458:	746e6900 	strbtvc	r6, [lr], #-2304	; 0x900
 45c:	616e655f 	cmnvs	lr, pc, asr r5
 460:	64656c62 	strbtvs	r6, [r5], #-3170	; 0xc62
 464:	2f2e2e00 	svccs	0x002e2e00
 468:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 46c:	6e692d72 	mcrvs	13, 3, r2, cr9, cr2, {3}
 470:	742f2f74 	strtvc	r2, [pc], #-3956	; 478 <_start-0x7b88>
 474:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 478:	746e692d 	strbtvc	r6, [lr], #-2349	; 0x92d
 47c:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
 480:	632e7470 	teqvs	lr, #112, 8	; 0x70000000
 484:	73552f00 	cmpvc	r5, #0, 30
 488:	2f737265 	svccs	0x00737265
 48c:	61697262 	cmnvs	r9, r2, ror #4
 490:	6e756a6e 	vsubvs.f32	s13, s10, s29
 494:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 498:	706f746b 	rsbvc	r7, pc, fp, ror #8
 49c:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 4a0:	2f6c6f6f 	svccs	0x006c6f6f
 4a4:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 4a8:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 4ac:	432f3032 	teqmi	pc, #50	; 0x32
 4b0:	30343153 	eorscc	r3, r4, r3, asr r1
 4b4:	73632f45 	cmnvc	r3, #276	; 0x114
 4b8:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 4bc:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 4c0:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 324 <_start-0x7cdc>
 4c4:	2f736261 	svccs	0x00736261
 4c8:	6e692d37 	mcrvs	13, 3, r2, cr9, cr7, {1}
 4cc:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
 4d0:	73747075 	cmnvc	r4, #117	; 0x75
 4d4:	672d322f 	strvs	r3, [sp, -pc, lsr #4]!
 4d8:	666f7270 			; <UNDEFINED> instruction: 0x666f7270
 4dc:	756f6300 	strbvc	r6, [pc, #-768]!	; 1e4 <_start-0x7e1c>
 4e0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 4e4:	616e655f 	cmnvs	lr, pc, asr r5
 4e8:	64656c62 	strbtvs	r6, [r5], #-3170	; 0xc62
 4ec:	756f6300 	strbvc	r6, [pc, #-768]!	; 1f4 <_start-0x7e0c>
 4f0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 4f4:	6572705f 	ldrbvs	r7, [r2, #-95]!	; 0x5f
 4f8:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
 4fc:	75007265 	strvc	r7, [r0, #-613]	; 0x265
 500:	33746e69 	cmncc	r4, #1680	; 0x690
 504:	00745f32 	rsbseq	r5, r4, r2, lsr pc
 508:	6e675f5f 	mcrvs	15, 3, r5, cr7, cr15, {2}
 50c:	765f6375 			; <UNDEFINED> instruction: 0x765f6375
 510:	696c5f61 	stmdbvs	ip!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
 514:	6c007473 	cfstrsvs	mvf7, [r0], {115}	; 0x73
 518:	2f636269 	svccs	0x00636269
 51c:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 520:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
 524:	5f617600 	svcpl	0x00617600
 528:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 52c:	5f006b74 	svcpl	0x00006b74
 530:	5f61765f 	svcpl	0x0061765f
 534:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
 538:	73552f00 	cmpvc	r5, #0, 30
 53c:	2f737265 	svccs	0x00737265
 540:	61697262 	cmnvs	r9, r2, ror #4
 544:	6e756a6e 	vsubvs.f32	s13, s10, s29
 548:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 54c:	706f746b 	rsbvc	r7, pc, fp, ror #8
 550:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 554:	2f6c6f6f 	svccs	0x006c6f6f
 558:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 55c:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 560:	432f3032 	teqmi	pc, #50	; 0x32
 564:	30343153 	eorscc	r3, r4, r3, asr r1
 568:	73632f45 	cmnvc	r3, #276	; 0x114
 56c:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 570:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 574:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 3d8 <_start-0x7c28>
 578:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 57c:	67726100 	ldrbvs	r6, [r2, -r0, lsl #2]!
 580:	5f5f0073 	svcpl	0x005f0073
 584:	6c007061 	stcvs	0, cr7, [r0], {97}	; 0x61
 588:	2f636269 	svccs	0x00636269
 58c:	6b747570 	blvs	1d1db54 <__bss_end__+0x1d13f14>
 590:	6900632e 	stmdbvs	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
 594:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 598:	5f6c616e 	svcpl	0x006c616e
 59c:	6b747570 	blvs	1d1db64 <__bss_end__+0x1d13f24>
 5a0:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 5a4:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
 5a8:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 5ac:	67656e00 	strbvs	r6, [r5, -r0, lsl #28]!
 5b0:	7200705f 	andvc	r7, r0, #95	; 0x5f
 5b4:	72657665 	rsbvc	r7, r5, #105906176	; 0x6500000
 5b8:	69006573 	stmdbvs	r0, {r0, r1, r4, r5, r6, r8, sl, sp, lr}
 5bc:	67696473 			; <UNDEFINED> instruction: 0x67696473
 5c0:	70007469 	andvc	r7, r0, r9, ror #8
 5c4:	5f737475 	svcpl	0x00737475
 5c8:	62007066 	andvs	r7, r0, #102	; 0x66
 5cc:	00657361 	rsbeq	r7, r5, r1, ror #6
 5d0:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
 5d4:	705f6465 	subsvc	r6, pc, r5, ror #8
 5d8:	62696c00 	rsbvs	r6, r9, #0, 24
 5dc:	61762f63 	cmnvs	r6, r3, ror #30
 5e0:	6972702d 	ldmdbvs	r2!, {r0, r2, r3, r5, ip, sp, lr}^
 5e4:	2e6b746e 	cdpcs	4, 6, cr7, cr11, cr14, {3}
 5e8:	70720063 	rsbsvc	r0, r2, r3, rrx
 5ec:	65735f69 	ldrbvs	r5, [r3, #-3945]!	; 0xf69
 5f0:	756f5f74 	strbvc	r5, [pc, #-3956]!	; fffff684 <__bss_end__+0xffff5a44>
 5f4:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
 5f8:	64697700 	strbtvs	r7, [r9], #-1792	; 0x700
 5fc:	70006874 	andvc	r6, r0, r4, ror r8
 600:	5f637475 	svcpl	0x00637475
 604:	65007066 	strvs	r7, [r0, #-102]	; 0x66
 608:	0074696d 	rsbseq	r6, r4, sp, ror #18
 60c:	5f697072 	svcpl	0x00697072
 610:	6f626572 	svcvs	0x00626572
 614:	6300746f 	movwvs	r7, #1135	; 0x46f
 618:	30343173 	eorscc	r3, r4, r3, ror r1
 61c:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 620:	6c632f63 	stclvs	15, cr2, [r3], #-396	; 0xfffffe74
 624:	2d6e6165 	stfcse	f6, [lr, #-404]!	; 0xfffffe6c
 628:	6f626572 	svcvs	0x00626572
 62c:	632e746f 	teqvs	lr, #1862270976	; 0x6f000000
 630:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 634:	6d5f7961 	ldclvs	9, cr7, [pc, #-388]	; 4b8 <_start-0x7b48>
 638:	73630073 	cmnvc	r3, #115	; 0x73
 63c:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 640:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 644:	7473632f 	ldrbtvc	r6, [r3], #-815	; 0x32f
 648:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
 64c:	5f5f0063 	svcpl	0x005f0063
 650:	5f737362 	svcpl	0x00737362
 654:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 658:	005f5f74 	subseq	r5, pc, r4, ror pc	; <UNPREDICTABLE>
 65c:	73625f5f 	cmnvc	r2, #380	; 0x17c
 660:	6e655f73 	mcrvs	15, 3, r5, cr5, cr3, {3}
 664:	005f5f64 	subseq	r5, pc, r4, ror #30
 668:	5f737362 	svcpl	0x00737362
 66c:	00646e65 	rsbeq	r6, r4, r5, ror #28
 670:	7473635f 	ldrbtvc	r6, [r3], #-863	; 0x35f
 674:	00747261 	rsbseq	r7, r4, r1, ror #4
 678:	755f7461 	ldrbvc	r7, [pc, #-1121]	; 21f <_start-0x7de1>
 67c:	5f726573 	svcpl	0x00726573
 680:	6576656c 	ldrbvs	r6, [r6, #-1388]!	; 0x56c
 684:	4d50006c 	ldclmi	0, cr0, [r0, #-432]	; 0xfffffe50
 688:	5341505f 	movtpl	r5, #4191	; 0x105f
 68c:	524f5753 	subpl	r5, pc, #21757952	; 0x14c0000
 690:	73630044 	cmnvc	r3, #68	; 0x44
 694:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 698:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 69c:	6265722f 	rsbvs	r7, r5, #-268435454	; 0xf0000002
 6a0:	2e746f6f 	cdpcs	15, 7, cr6, cr4, cr15, {3}
 6a4:	4d500063 	ldclmi	0, cr0, [r0, #-396]	; 0xfffffe74
 6a8:	5453525f 	ldrbpl	r5, [r3], #-607	; 0x25f
 6ac:	52575f43 	subspl	r5, r7, #268	; 0x10c
 6b0:	5f474643 	svcpl	0x00474643
 6b4:	4c4c5546 	cfstr64mi	mvdx5, [ip], {70}	; 0x46
 6b8:	5345525f 	movtpl	r5, #21087	; 0x525f
 6bc:	50005445 	andpl	r5, r0, r5, asr #8
 6c0:	44575f4d 	ldrbmi	r5, [r7], #-3917	; 0xf4d
 6c4:	7300474f 	movwvc	r4, #1871	; 0x74f
 6c8:	755f7465 	ldrbvc	r7, [pc, #-1125]	; 26b <_start-0x7d95>
 6cc:	5f726573 	svcpl	0x00726573
 6d0:	6576656c 	ldrbvs	r6, [r6, #-1388]!	; 0x56c
 6d4:	4d50006c 	ldclmi	0, cr0, [r0, #-432]	; 0xfffffe50
 6d8:	5453525f 	ldrbpl	r5, [r3], #-607	; 0x25f
 6dc:	70630043 	rsbvc	r0, r3, r3, asr #32
 6e0:	64007273 	strvs	r7, [r0], #-627	; 0x273
 6e4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 6e8:	6365735f 	cmnvs	r5, #2080374785	; 0x7c000001
 6ec:	31736300 	cmncc	r3, r0, lsl #6
 6f0:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 6f4:	2f637273 	svccs	0x00637273
 6f8:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 6fc:	00632e72 	rsbeq	r2, r3, r2, ror lr
 700:	6b636974 	blvs	18dacd8 <__bss_end__+0x18d1098>
 704:	65640073 	strbvs	r0, [r4, #-115]!	; 0x73
 708:	5f79616c 	svcpl	0x0079616c
 70c:	6c637963 	stclvs	9, cr7, [r3], #-396	; 0xfffffe74
 710:	64007365 	strvs	r7, [r0], #-869	; 0x365
 714:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 718:	0073755f 	rsbseq	r7, r3, pc, asr r5
 71c:	5f585541 	svcpl	0x00585541
 720:	4d5f554d 	cfldr64mi	mvdx5, [pc, #-308]	; 5f4 <_start-0x7a0c>
 724:	525f5243 	subspl	r5, pc, #805306372	; 0x30000004
 728:	41004745 	tstmi	r0, r5, asr #14
 72c:	4d5f5855 	ldclmi	8, cr5, [pc, #-340]	; 5e0 <_start-0x7a20>
 730:	4f495f55 	svcmi	0x00495f55
 734:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
 738:	58554100 	ldmdapl	r5, {r8, lr}^
 73c:	5f554d5f 	svcpl	0x00554d5f
 740:	5f52534d 	svcpl	0x0052534d
 744:	00474552 	subeq	r4, r7, r2, asr r5
 748:	4f495047 	svcmi	0x00495047
 74c:	4e55465f 	mrcmi	6, 2, r4, cr5, cr15, {2}
 750:	4c415f43 	mcrrmi	15, 4, r5, r1, cr3
 754:	75003054 	strvc	r3, [r0, #-84]	; 0x54
 758:	5f747261 	svcpl	0x00747261
 75c:	5f6e6163 	svcpl	0x006e6163
 760:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
 764:	58554100 	ldmdapl	r5, {r8, lr}^
 768:	5f554d5f 	svcpl	0x00554d5f
 76c:	4c544e43 	mrrcmi	14, 4, r4, r4, cr3	; <UNPREDICTABLE>
 770:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
 774:	72617500 	rsbvc	r7, r1, #0, 10
 778:	61685f74 	smcvs	34292	; 0x85f4
 77c:	61645f73 	smcvs	17907	; 0x45f3
 780:	47006174 	smlsdxmi	r0, r4, r1, r6
 784:	5f4f4950 	svcpl	0x004f4950
 788:	434e5546 	movtmi	r5, #58694	; 0xe546
 78c:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xf5f
 790:	00545550 	subseq	r5, r4, r0, asr r5
 794:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 798:	4700632e 	strmi	r6, [r0, -lr, lsr #6]
 79c:	5f4f4950 	svcpl	0x004f4950
 7a0:	434e5546 	movtmi	r5, #58694	; 0xe546
 7a4:	544c415f 	strbpl	r4, [ip], #-351	; 0x15f
 7a8:	50470031 	subpl	r0, r7, r1, lsr r0
 7ac:	465f4f49 	ldrbmi	r4, [pc], -r9, asr #30
 7b0:	5f434e55 	svcpl	0x00434e55
 7b4:	32544c41 	subscc	r4, r4, #16640	; 0x4100
 7b8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 7bc:	55465f4f 	strbpl	r5, [r6, #-3919]	; 0xf4f
 7c0:	415f434e 	cmpmi	pc, lr, asr #6
 7c4:	0033544c 	eorseq	r5, r3, ip, asr #8
 7c8:	4f495047 	svcmi	0x00495047
 7cc:	4e55465f 	mrcmi	6, 2, r4, cr5, cr15, {2}
 7d0:	4c415f43 	mcrrmi	15, 4, r5, r1, cr3
 7d4:	41003554 	tstmi	r0, r4, asr r5
 7d8:	4d5f5855 	ldclmi	8, cr5, [pc, #-340]	; 68c <_start-0x7974>
 7dc:	45495f55 	strbmi	r5, [r9, #-3925]	; 0xf55
 7e0:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xf52
 7e4:	75700047 	ldrbvc	r0, [r0, #-71]!	; 0x47
 7e8:	00323374 	eorseq	r3, r2, r4, ror r3
 7ec:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 7f0:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 7f4:	55410063 	strbpl	r0, [r1, #-99]	; 0x63
 7f8:	554d5f58 	strbpl	r5, [sp, #-3928]	; 0xf58
 7fc:	5249495f 	subpl	r4, r9, #1556480	; 0x17c000
 800:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
 804:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 808:	75665f6f 	strbvc	r5, [r6, #-3951]!	; 0xf6f
 80c:	745f636e 	ldrbvc	r6, [pc], #-878	; 814 <_start-0x77ec>
 810:	72617500 	rsbvc	r7, r1, #0, 10
 814:	61635f74 	smcvs	13812	; 0x35f4
 818:	75705f6e 	ldrbvc	r5, [r0, #-3950]!	; 0xf6e
 81c:	41006374 	tstmi	r0, r4, ror r3
 820:	455f5855 	ldrbmi	r5, [pc, #-2133]	; ffffffd3 <__bss_end__+0xffff6393>
 824:	4c42414e 	stfmie	f4, [r2], {78}	; 0x4e
 828:	41005345 	tstmi	r0, r5, asr #6
 82c:	495f5855 	ldmdbmi	pc, {r0, r2, r4, r6, fp, ip, lr}^	; <UNPREDICTABLE>
 830:	41005152 	tstmi	r0, r2, asr r1
 834:	4d5f5855 	ldclmi	8, cr5, [pc, #-340]	; 6e8 <_start-0x7918>
 838:	41425f55 	cmpmi	r2, r5, asr pc
 83c:	525f4455 	subspl	r4, pc, #1426063360	; 0x55000000
 840:	41004745 	tstmi	r0, r5, asr #14
 844:	4d5f5855 	ldclmi	8, cr5, [pc, #-340]	; 6f8 <_start-0x7908>
 848:	54535f55 	ldrbpl	r5, [r3], #-3925	; 0xf55
 84c:	525f5441 	subspl	r5, pc, #1090519040	; 0x41000000
 850:	47004745 	strmi	r4, [r0, -r5, asr #14]
 854:	5f4f4950 	svcpl	0x004f4950
 858:	434e5546 	movtmi	r5, #58694	; 0xe546
 85c:	544c415f 	strbpl	r4, [ip], #-351	; 0x15f
 860:	70670034 	rsbvc	r0, r7, r4, lsr r0
 864:	735f6f69 	cmpvc	pc, #420	; 0x1a4
 868:	665f7465 	ldrbvs	r7, [pc], -r5, ror #8
 86c:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xe75
 870:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 874:	5f585541 	svcpl	0x00585541
 878:	535f554d 	cmppl	pc, #322961408	; 0x13400000
 87c:	54415243 	strbpl	r5, [r1], #-579	; 0x243
 880:	75004843 	strvc	r4, [r0, #-2115]	; 0x843
 884:	5f747261 	svcpl	0x00747261
 888:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 88c:	58554100 	ldmdapl	r5, {r8, lr}^
 890:	5f554d5f 	svcpl	0x00554d5f
 894:	5f52434c 	svcpl	0x0052434c
 898:	00474552 	subeq	r4, r7, r2, asr r5
 89c:	4f495047 	svcmi	0x00495047
 8a0:	4e55465f 	mrcmi	6, 2, r4, cr5, cr15, {2}
 8a4:	4e495f43 	cdpmi	15, 4, cr5, cr9, cr3, {2}
 8a8:	00545550 	subseq	r5, r4, r0, asr r5
 8ac:	5f585541 	svcpl	0x00585541
 8b0:	4c5f554d 	cfldr64mi	mvdx5, [pc], {77}	; 0x4d
 8b4:	525f5253 	subspl	r5, pc, #805306373	; 0x30000005
 8b8:	75004745 	strvc	r4, [r0, #-1861]	; 0x745
 8bc:	5f747261 	svcpl	0x00747261
 8c0:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
 8c4:	7973615f 	ldmdbvc	r3!, {r0, r1, r2, r3, r4, r6, r8, sp, lr}^
 8c8:	6700636e 	strvs	r6, [r0, -lr, ror #6]
 8cc:	32337465 	eorscc	r7, r3, #1694498816	; 0x65000000
 8d0:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 8d4:	6c635f6f 	stclvs	15, cr5, [r3], #-444	; 0xfffffe44
 8d8:	67003072 	smlsdxvs	r0, r2, r0, r3
 8dc:	5f6f6970 	svcpl	0x006f6970
 8e0:	30746573 	rsbscc	r6, r4, r3, ror r5
 8e4:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 8e8:	72775f6f 	rsbsvc	r5, r7, #444	; 0x1bc
 8ec:	00657469 	rsbeq	r7, r5, r9, ror #8
 8f0:	6f697067 	svcvs	0x00697067
 8f4:	6573665f 	ldrbvs	r6, [r3, #-1631]!	; 0x65f
 8f8:	4700306c 	strmi	r3, [r0, -ip, rrx]
 8fc:	524c4350 	subpl	r4, ip, #80, 6	; 0x40000001
 900:	70670031 	rsbvc	r0, r7, r1, lsr r0
 904:	725f6f69 	subsvc	r6, pc, #420	; 0x1a4
 908:	00646165 	rsbeq	r6, r4, r5, ror #2
 90c:	6f697067 	svcvs	0x00697067
 910:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
 914:	006e6f5f 	rsbeq	r6, lr, pc, asr pc
 918:	454c5047 	strbmi	r5, [ip, #-71]	; 0x47
 91c:	47003156 	smlsdmi	r0, r6, r1, r3
 920:	54455350 	strbpl	r5, [r5], #-848	; 0x350
 924:	50470031 	subpl	r0, r7, r1, lsr r0
 928:	30524c43 	subscc	r4, r2, r3, asr #24
 92c:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 930:	65735f6f 	ldrbvs	r5, [r3, #-3951]!	; 0xf6f
 934:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
 938:	00747570 	rsbseq	r7, r4, r0, ror r5
 93c:	45535047 	ldrbmi	r5, [r3, #-71]	; 0x47
 940:	67003054 	smlsdvs	r0, r4, r0, r3
 944:	5f6f6970 	svcpl	0x006f6970
 948:	5f746573 	svcpl	0x00746573
 94c:	0066666f 	rsbeq	r6, r6, pc, ror #12
 950:	6f697067 	svcvs	0x00697067
 954:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
 958:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xf5f
 95c:	00747570 	rsbseq	r7, r4, r0, ror r5
 960:	53465047 	movtpl	r5, #24647	; 0x6047
 964:	00314c45 	eorseq	r4, r1, r5, asr #24
 968:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 96c:	67657200 	strbvs	r7, [r5, -r0, lsl #4]!
 970:	6c65735f 	stclvs	3, cr7, [r5], #-380	; 0xfffffe84
 974:	00746365 	rsbseq	r6, r4, r5, ror #6
 978:	6d746962 	ldclvs	9, cr6, [r4, #-392]!	; 0xfffffe78
 97c:	006b7361 	rsbeq	r7, fp, r1, ror #6
 980:	6f697067 	svcvs	0x00697067
 984:	6700632e 	strvs	r6, [r0, -lr, lsr #6]
 988:	5f6f6970 	svcpl	0x006f6970
 98c:	00676572 	rsbeq	r6, r7, r2, ror r5
 990:	53465047 	movtpl	r5, #24647	; 0x6047
 994:	00304c45 	eorseq	r4, r0, r5, asr #24
 998:	454c5047 	strbmi	r5, [ip, #-71]	; 0x47
 99c:	47003056 	smlsdmi	r0, r6, r0, r3
 9a0:	45534650 	ldrbmi	r4, [r3, #-1616]	; 0x650
 9a4:	4700324c 	strmi	r3, [r0, -ip, asr #4]
 9a8:	45534650 	ldrbmi	r4, [r3, #-1616]	; 0x650
 9ac:	4700334c 	strmi	r3, [r0, -ip, asr #6]
 9b0:	45534650 	ldrbmi	r4, [r3, #-1616]	; 0x650
 9b4:	4700344c 	strmi	r3, [r0, -ip, asr #8]
 9b8:	45534650 	ldrbmi	r4, [r3, #-1616]	; 0x650
 9bc:	6900354c 	stmdbvs	r0, {r2, r3, r6, r8, sl, ip, sp}
 9c0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 9c4:	5f6c616e 	svcpl	0x006c616e
 9c8:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 9cc:	00726168 	rsbseq	r6, r2, r8, ror #2
 9d0:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 9d4:	7475702f 	ldrbtvc	r7, [r5], #-47	; 0x2f
 9d8:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 9dc:	Address 0x00000000000009dc is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000014 	andeq	r0, r0, r4, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	00008010 	andeq	r8, r0, r0, lsl r0
  1c:	00000078 	andeq	r0, r0, r8, ror r0
  20:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
  24:	00018e02 	andeq	r8, r1, r2, lsl #28
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	00008088 	andeq	r8, r0, r8, lsl #1
  34:	00000230 	andeq	r0, r0, r0, lsr r2
  38:	83180e42 	tsthi	r8, #1056	; 0x420
  3c:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
  40:	87038604 	strhi	r8, [r3, -r4, lsl #12]
  44:	00018e02 	andeq	r8, r1, r2, lsl #28
  48:	0000000c 	andeq	r0, r0, ip
  4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  50:	7c020001 	stcvc	0, cr0, [r2], {1}
  54:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  58:	00000014 	andeq	r0, r0, r4, lsl r0
  5c:	00000048 	andeq	r0, r0, r8, asr #32
  60:	0000836c 	andeq	r8, r0, ip, ror #6
  64:	00000068 	andeq	r0, r0, r8, rrx
  68:	83080e42 	movwhi	r0, #36418	; 0x8e42
  6c:	00018e02 	andeq	r8, r1, r2, lsl #28
  70:	00000014 	andeq	r0, r0, r4, lsl r0
  74:	00000048 	andeq	r0, r0, r8, asr #32
  78:	000083d4 	ldrdeq	r8, [r0], -r4
  7c:	0000003c 	andeq	r0, r0, ip, lsr r0
  80:	8e040e42 	cdphi	14, 0, cr0, cr4, cr2, {2}
  84:	100e4201 	andne	r4, lr, r1, lsl #4
  88:	00000014 	andeq	r0, r0, r4, lsl r0
  8c:	00000048 	andeq	r0, r0, r8, asr #32
  90:	00008410 	andeq	r8, r0, r0, lsl r4
  94:	0000003c 	andeq	r0, r0, ip, lsr r0
  98:	8e040e42 	cdphi	14, 0, cr0, cr4, cr2, {2}
  9c:	100e4201 	andne	r4, lr, r1, lsl #4
  a0:	00000014 	andeq	r0, r0, r4, lsl r0
  a4:	00000048 	andeq	r0, r0, r8, asr #32
  a8:	0000844c 	andeq	r8, r0, ip, asr #8
  ac:	0000003c 	andeq	r0, r0, ip, lsr r0
  b0:	8e040e42 	cdphi	14, 0, cr0, cr4, cr2, {2}
  b4:	100e4201 	andne	r4, lr, r1, lsl #4
  b8:	00000014 	andeq	r0, r0, r4, lsl r0
  bc:	00000048 	andeq	r0, r0, r8, asr #32
  c0:	00008488 	andeq	r8, r0, r8, lsl #9
  c4:	0000003c 	andeq	r0, r0, ip, lsr r0
  c8:	8e040e42 	cdphi	14, 0, cr0, cr4, cr2, {2}
  cc:	100e4201 	andne	r4, lr, r1, lsl #4
  d0:	00000014 	andeq	r0, r0, r4, lsl r0
  d4:	00000048 	andeq	r0, r0, r8, asr #32
  d8:	000084c4 	andeq	r8, r0, r4, asr #9
  dc:	0000003c 	andeq	r0, r0, ip, lsr r0
  e0:	8e040e42 	cdphi	14, 0, cr0, cr4, cr2, {2}
  e4:	100e4201 	andne	r4, lr, r1, lsl #4
  e8:	00000014 	andeq	r0, r0, r4, lsl r0
  ec:	00000048 	andeq	r0, r0, r8, asr #32
  f0:	00008500 	andeq	r8, r0, r0, lsl #10
  f4:	0000003c 	andeq	r0, r0, ip, lsr r0
  f8:	8e040e42 	cdphi	14, 0, cr0, cr4, cr2, {2}
  fc:	100e4201 	andne	r4, lr, r1, lsl #4
 100:	0000000c 	andeq	r0, r0, ip
 104:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 108:	7c020001 	stcvc	0, cr0, [r2], {1}
 10c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 110:	00000014 	andeq	r0, r0, r4, lsl r0
 114:	00000100 	andeq	r0, r0, r0, lsl #2
 118:	0000853c 	andeq	r8, r0, ip, lsr r5
 11c:	0000001c 	andeq	r0, r0, ip, lsl r0
 120:	8e040e42 	cdphi	14, 0, cr0, cr4, cr2, {2}
 124:	200e4201 	andcs	r4, lr, r1, lsl #4
 128:	00000014 	andeq	r0, r0, r4, lsl r0
 12c:	00000100 	andeq	r0, r0, r0, lsl #2
 130:	00008558 	andeq	r8, r0, r8, asr r5
 134:	00000040 	andeq	r0, r0, r0, asr #32
 138:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 13c:	00018e02 	andeq	r8, r1, r2, lsl #28
 140:	0000000c 	andeq	r0, r0, ip
 144:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 148:	7c020001 	stcvc	0, cr0, [r2], {1}
 14c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 150:	00000024 	andeq	r0, r0, r4, lsr #32
 154:	00000140 	andeq	r0, r0, r0, asr #2
 158:	00008598 	muleq	r0, r8, r5
 15c:	00000058 	andeq	r0, r0, r8, asr r0
 160:	80100e42 	andshi	r0, r0, r2, asr #28
 164:	82038104 	andhi	r8, r3, #4, 2
 168:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
 16c:	07841c0e 	streq	r1, [r4, lr, lsl #24]
 170:	058e0685 	streq	r0, [lr, #1669]	; 0x685
 174:	00280e42 	eoreq	r0, r8, r2, asr #28
 178:	0000000c 	andeq	r0, r0, ip
 17c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 180:	7c020001 	stcvc	0, cr0, [r2], {1}
 184:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 188:	00000018 	andeq	r0, r0, r8, lsl r0
 18c:	00000178 	andeq	r0, r0, r8, ror r1
 190:	000085f0 	strdeq	r8, [r0], -r0
 194:	00000034 	andeq	r0, r0, r4, lsr r0
 198:	83100e42 	tsthi	r0, #1056	; 0x420
 19c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 1a0:	00018e02 	andeq	r8, r1, r2, lsl #28
 1a4:	0000000c 	andeq	r0, r0, ip
 1a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1ac:	7c020001 	stcvc	0, cr0, [r2], {1}
 1b0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1b4:	0000000c 	andeq	r0, r0, ip
 1b8:	000001a4 	andeq	r0, r0, r4, lsr #3
 1bc:	00008624 	andeq	r8, r0, r4, lsr #12
 1c0:	00000014 	andeq	r0, r0, r4, lsl r0
 1c4:	0000000c 	andeq	r0, r0, ip
 1c8:	000001a4 	andeq	r0, r0, r4, lsr #3
 1cc:	00008638 	andeq	r8, r0, r8, lsr r6
 1d0:	0000002c 	andeq	r0, r0, ip, lsr #32
 1d4:	0000000c 	andeq	r0, r0, ip
 1d8:	000001a4 	andeq	r0, r0, r4, lsr #3
 1dc:	00008664 	andeq	r8, r0, r4, ror #12
 1e0:	00000040 	andeq	r0, r0, r0, asr #32
 1e4:	00000020 	andeq	r0, r0, r0, lsr #32
 1e8:	000001a4 	andeq	r0, r0, r4, lsr #3
 1ec:	000086a4 	andeq	r8, r0, r4, lsr #13
 1f0:	00000198 	muleq	r0, r8, r1
 1f4:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 1f8:	86058506 	strhi	r8, [r5], -r6, lsl #10
 1fc:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 200:	42018e02 	andmi	r8, r1, #2, 28
 204:	0000580e 	andeq	r5, r0, lr, lsl #16
 208:	00000014 	andeq	r0, r0, r4, lsl r0
 20c:	000001a4 	andeq	r0, r0, r4, lsr #3
 210:	0000883c 	andeq	r8, r0, ip, lsr r8
 214:	00000050 	andeq	r0, r0, r0, asr r0
 218:	83080e42 	movwhi	r0, #36418	; 0x8e42
 21c:	00018e02 	andeq	r8, r1, r2, lsl #28
 220:	00000028 	andeq	r0, r0, r8, lsr #32
 224:	000001a4 	andeq	r0, r0, r4, lsr #3
 228:	0000888c 	andeq	r8, r0, ip, lsl #17
 22c:	00000288 	andeq	r0, r0, r8, lsl #5
 230:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
 234:	86088509 	strhi	r8, [r8], -r9, lsl #10
 238:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
 23c:	8a048905 	bhi	122658 <__bss_end__+0x118a18>
 240:	8e028b03 	vmlahi.f64	d8, d2, d3
 244:	b00e4201 	andlt	r4, lr, r1, lsl #4
 248:	00000001 	andeq	r0, r0, r1
 24c:	0000000c 	andeq	r0, r0, ip
 250:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 254:	7c020001 	stcvc	0, cr0, [r2], {1}
 258:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 25c:	00000014 	andeq	r0, r0, r4, lsl r0
 260:	0000024c 	andeq	r0, r0, ip, asr #4
 264:	00008b14 	andeq	r8, r0, r4, lsl fp
 268:	00000028 	andeq	r0, r0, r8, lsr #32
 26c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 270:	00018e02 	andeq	r8, r1, r2, lsl #28
 274:	0000000c 	andeq	r0, r0, ip
 278:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 27c:	7c020001 	stcvc	0, cr0, [r2], {1}
 280:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 284:	00000014 	andeq	r0, r0, r4, lsl r0
 288:	00000274 	andeq	r0, r0, r4, ror r2
 28c:	00008b3c 	andeq	r8, r0, ip, lsr fp
 290:	00000034 	andeq	r0, r0, r4, lsr r0
 294:	83080e42 	movwhi	r0, #36418	; 0x8e42
 298:	00018e02 	andeq	r8, r1, r2, lsl #28
 29c:	0000000c 	andeq	r0, r0, ip
 2a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2a4:	7c020001 	stcvc	0, cr0, [r2], {1}
 2a8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2ac:	0000000c 	andeq	r0, r0, ip
 2b0:	0000029c 	muleq	r0, ip, r2
 2b4:	00008b70 	andeq	r8, r0, r0, ror fp
 2b8:	00000018 	andeq	r0, r0, r8, lsl r0
 2bc:	0000000c 	andeq	r0, r0, ip
 2c0:	0000029c 	muleq	r0, ip, r2
 2c4:	00008b88 	andeq	r8, r0, r8, lsl #23
 2c8:	00000014 	andeq	r0, r0, r4, lsl r0
 2cc:	00000014 	andeq	r0, r0, r4, lsl r0
 2d0:	0000029c 	muleq	r0, ip, r2
 2d4:	00008b9c 	muleq	r0, ip, fp
 2d8:	00000048 	andeq	r0, r0, r8, asr #32
 2dc:	83080e42 	movwhi	r0, #36418	; 0x8e42
 2e0:	00018e02 	andeq	r8, r1, r2, lsl #28
 2e4:	0000000c 	andeq	r0, r0, ip
 2e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2ec:	7c020001 	stcvc	0, cr0, [r2], {1}
 2f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2f4:	0000000c 	andeq	r0, r0, ip
 2f8:	000002e4 	andeq	r0, r0, r4, ror #5
 2fc:	00008be4 	andeq	r8, r0, r4, ror #23
 300:	0000001c 	andeq	r0, r0, ip, lsl r0
 304:	00000014 	andeq	r0, r0, r4, lsl r0
 308:	000002e4 	andeq	r0, r0, r4, ror #5
 30c:	00008c00 	andeq	r8, r0, r0, lsl #24
 310:	00000014 	andeq	r0, r0, r4, lsl r0
 314:	83080e42 	movwhi	r0, #36418	; 0x8e42
 318:	00018e02 	andeq	r8, r1, r2, lsl #28
 31c:	00000014 	andeq	r0, r0, r4, lsl r0
 320:	000002e4 	andeq	r0, r0, r4, ror #5
 324:	00008c14 	andeq	r8, r0, r4, lsl ip
 328:	0000001c 	andeq	r0, r0, ip, lsl r0
 32c:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 330:	00018e02 	andeq	r8, r1, r2, lsl #28
 334:	00000018 	andeq	r0, r0, r8, lsl r0
 338:	000002e4 	andeq	r0, r0, r4, ror #5
 33c:	00008c30 	andeq	r8, r0, r0, lsr ip
 340:	00000024 	andeq	r0, r0, r4, lsr #32
 344:	83100e42 	tsthi	r0, #1056	; 0x420
 348:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 34c:	00018e02 	andeq	r8, r1, r2, lsl #28
 350:	00000014 	andeq	r0, r0, r4, lsl r0
 354:	000002e4 	andeq	r0, r0, r4, ror #5
 358:	00008c54 	andeq	r8, r0, r4, asr ip
 35c:	00000014 	andeq	r0, r0, r4, lsl r0
 360:	83080e42 	movwhi	r0, #36418	; 0x8e42
 364:	00018e02 	andeq	r8, r1, r2, lsl #28
 368:	00000014 	andeq	r0, r0, r4, lsl r0
 36c:	000002e4 	andeq	r0, r0, r4, ror #5
 370:	00008c68 	andeq	r8, r0, r8, ror #24
 374:	00000014 	andeq	r0, r0, r4, lsl r0
 378:	83080e42 	movwhi	r0, #36418	; 0x8e42
 37c:	00018e02 	andeq	r8, r1, r2, lsl #28
 380:	0000000c 	andeq	r0, r0, ip
 384:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 388:	7c020001 	stcvc	0, cr0, [r2], {1}
 38c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 390:	00000014 	andeq	r0, r0, r4, lsl r0
 394:	00000380 	andeq	r0, r0, r0, lsl #7
 398:	00008ce0 	andeq	r8, r0, r0, ror #25
 39c:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a0:	83080e42 	movwhi	r0, #36418	; 0x8e42
 3a4:	00018e02 	andeq	r8, r1, r2, lsl #28
 3a8:	00000018 	andeq	r0, r0, r8, lsl r0
 3ac:	00000380 	andeq	r0, r0, r0, lsl #7
 3b0:	00008cfc 	strdeq	r8, [r0], -ip
 3b4:	0000009c 	muleq	r0, ip, r0
 3b8:	83100e42 	tsthi	r0, #1056	; 0x420
 3bc:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 3c0:	00018e02 	andeq	r8, r1, r2, lsl #28
 3c4:	00000014 	andeq	r0, r0, r4, lsl r0
 3c8:	00000380 	andeq	r0, r0, r0, lsl #7
 3cc:	00008d98 	muleq	r0, r8, sp
 3d0:	00000028 	andeq	r0, r0, r8, lsr #32
 3d4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 3d8:	00018e02 	andeq	r8, r1, r2, lsl #28
 3dc:	00000014 	andeq	r0, r0, r4, lsl r0
 3e0:	00000380 	andeq	r0, r0, r0, lsl #7
 3e4:	00008dc0 	andeq	r8, r0, r0, asr #27
 3e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3ec:	83080e42 	movwhi	r0, #36418	; 0x8e42
 3f0:	00018e02 	andeq	r8, r1, r2, lsl #28
 3f4:	00000014 	andeq	r0, r0, r4, lsl r0
 3f8:	00000380 	andeq	r0, r0, r0, lsl #7
 3fc:	00008ddc 	ldrdeq	r8, [r0], -ip
 400:	0000002c 	andeq	r0, r0, ip, lsr #32
 404:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 408:	00018e02 	andeq	r8, r1, r2, lsl #28
 40c:	00000014 	andeq	r0, r0, r4, lsl r0
 410:	00000380 	andeq	r0, r0, r0, lsl #7
 414:	00008e08 	andeq	r8, r0, r8, lsl #28
 418:	0000000c 	andeq	r0, r0, ip
 41c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 420:	00018e02 	andeq	r8, r1, r2, lsl #28
 424:	00000014 	andeq	r0, r0, r4, lsl r0
 428:	00000380 	andeq	r0, r0, r0, lsl #7
 42c:	00008e14 	andeq	r8, r0, r4, lsl lr
 430:	00000020 	andeq	r0, r0, r0, lsr #32
 434:	83080e42 	movwhi	r0, #36418	; 0x8e42
 438:	00018e02 	andeq	r8, r1, r2, lsl #28
 43c:	0000000c 	andeq	r0, r0, ip
 440:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 444:	7c020001 	stcvc	0, cr0, [r2], {1}
 448:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 44c:	00000018 	andeq	r0, r0, r8, lsl r0
 450:	0000043c 	andeq	r0, r0, ip, lsr r4
 454:	00008e34 	andeq	r8, r0, r4, lsr lr
 458:	000000d4 	ldrdeq	r0, [r0], -r4
 45c:	83100e42 	tsthi	r0, #1056	; 0x420
 460:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 464:	00018e02 	andeq	r8, r1, r2, lsl #28
 468:	00000014 	andeq	r0, r0, r4, lsl r0
 46c:	0000043c 	andeq	r0, r0, ip, lsr r4
 470:	00008f08 	andeq	r8, r0, r8, lsl #30
 474:	00000038 	andeq	r0, r0, r8, lsr r0
 478:	83080e42 	movwhi	r0, #36418	; 0x8e42
 47c:	00018e02 	andeq	r8, r1, r2, lsl #28
 480:	00000014 	andeq	r0, r0, r4, lsl r0
 484:	0000043c 	andeq	r0, r0, ip, lsr r4
 488:	00008f40 	andeq	r8, r0, r0, asr #30
 48c:	00000038 	andeq	r0, r0, r8, lsr r0
 490:	83080e42 	movwhi	r0, #36418	; 0x8e42
 494:	00018e02 	andeq	r8, r1, r2, lsl #28
 498:	00000018 	andeq	r0, r0, r8, lsl r0
 49c:	0000043c 	andeq	r0, r0, ip, lsr r4
 4a0:	00008f78 	andeq	r8, r0, r8, ror pc
 4a4:	000000cc 	andeq	r0, r0, ip, asr #1
 4a8:	83100e42 	tsthi	r0, #1056	; 0x420
 4ac:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 4b0:	00018e02 	andeq	r8, r1, r2, lsl #28
 4b4:	00000014 	andeq	r0, r0, r4, lsl r0
 4b8:	0000043c 	andeq	r0, r0, ip, lsr r4
 4bc:	00009044 	andeq	r9, r0, r4, asr #32
 4c0:	0000004c 	andeq	r0, r0, ip, asr #32
 4c4:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 4c8:	00018e02 	andeq	r8, r1, r2, lsl #28
 4cc:	00000014 	andeq	r0, r0, r4, lsl r0
 4d0:	0000043c 	andeq	r0, r0, ip, lsr r4
 4d4:	00009090 	muleq	r0, r0, r0
 4d8:	00000078 	andeq	r0, r0, r8, ror r0
 4dc:	83080e42 	movwhi	r0, #36418	; 0x8e42
 4e0:	00018e02 	andeq	r8, r1, r2, lsl #28
 4e4:	00000018 	andeq	r0, r0, r8, lsl r0
 4e8:	0000043c 	andeq	r0, r0, ip, lsr r4
 4ec:	00009108 	andeq	r9, r0, r8, lsl #2
 4f0:	000000d8 	ldrdeq	r0, [r0], -r8
 4f4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 4f8:	86038504 	strhi	r8, [r3], -r4, lsl #10
 4fc:	00018e02 	andeq	r8, r1, r2, lsl #28
 500:	0000000c 	andeq	r0, r0, ip
 504:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 508:	7c020001 	stcvc	0, cr0, [r2], {1}
 50c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 510:	00000014 	andeq	r0, r0, r4, lsl r0
 514:	00000500 	andeq	r0, r0, r0, lsl #10
 518:	000091e0 	andeq	r9, r0, r0, ror #3
 51c:	00000014 	andeq	r0, r0, r4, lsl r0
 520:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 524:	00018e02 	andeq	r8, r1, r2, lsl #28

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	00008b70 	andeq	r8, r0, r0, ror fp
   4:	00008be4 	andeq	r8, r0, r4, ror #23
	...
