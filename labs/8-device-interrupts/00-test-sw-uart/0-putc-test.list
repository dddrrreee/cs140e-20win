
0-putc-test.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e3a0d302 	mov	sp, #134217728	; 0x8000000
    8004:	e3a0b000 	mov	fp, #0
    8008:	eb000312 	bl	8c58 <_cstart>
    800c:	eb000329 	bl	8cb8 <rpi_reboot>

00008010 <notmain>:
// trivial test of putk: this is the easiest one, since the uart hardware
// is pretty tolerant of errors.
#include "rpi.h"
#include "sw-uart.h"

void notmain(void) {
    8010:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8014:	e24dd01c 	sub	sp, sp, #28
    uart_init();
    8018:	eb00037e 	bl	8e18 <uart_init>
    enable_cache();
    801c:	eb0002fb 	bl	8c10 <enable_cache>

    // use pin 20 for tx, 21 for rx
    sw_uart_t u = sw_uart_init(20,21, 115200);
    8020:	e59f305c 	ldr	r3, [pc, #92]	; 8084 <notmain+0x74>
    8024:	e58d3000 	str	r3, [sp]
    8028:	e28d000c 	add	r0, sp, #12
    802c:	e3a01014 	mov	r1, #20
    8030:	e3a02015 	mov	r2, #21
    8034:	e59f304c 	ldr	r3, [pc, #76]	; 8088 <notmain+0x78>
    8038:	eb00011e 	bl	84b8 <sw_uart_init_helper>

    for(int i = 0; i < 10; i++) {
    803c:	e3a04000 	mov	r4, #0
        printk("%d: going to print hello world\n", i);
    8040:	e59f7044 	ldr	r7, [pc, #68]	; 808c <notmain+0x7c>
        sw_uart_printk(&u, "hello world: %d\n", i);
    8044:	e59f6044 	ldr	r6, [pc, #68]	; 8090 <notmain+0x80>
        delay_ms(1000);
    8048:	e3a05ffa 	mov	r5, #1000	; 0x3e8
    enable_cache();

    // use pin 20 for tx, 21 for rx
    sw_uart_t u = sw_uart_init(20,21, 115200);

    for(int i = 0; i < 10; i++) {
    804c:	ea000009 	b	8078 <notmain+0x68>
        printk("%d: going to print hello world\n", i);
    8050:	e1a00007 	mov	r0, r7
    8054:	e1a01004 	mov	r1, r4
    8058:	eb00018d 	bl	8694 <printk>
        sw_uart_printk(&u, "hello world: %d\n", i);
    805c:	e28d000c 	add	r0, sp, #12
    8060:	e1a01006 	mov	r1, r6
    8064:	e1a02004 	mov	r2, r4
    8068:	eb000157 	bl	85cc <sw_uart_printk>
        delay_ms(1000);
    806c:	e1a00005 	mov	r0, r5
    8070:	eb00033e 	bl	8d70 <delay_ms>
    enable_cache();

    // use pin 20 for tx, 21 for rx
    sw_uart_t u = sw_uart_init(20,21, 115200);

    for(int i = 0; i < 10; i++) {
    8074:	e2844001 	add	r4, r4, #1
    8078:	e3540009 	cmp	r4, #9
    807c:	dafffff3 	ble	8050 <notmain+0x40>
        printk("%d: going to print hello world\n", i);
        sw_uart_printk(&u, "hello world: %d\n", i);
        delay_ms(1000);
    }

    clean_reboot();
    8080:	eb0002ea 	bl	8c30 <clean_reboot>
    8084:	000017bc 			; <UNDEFINED> instruction: 0x000017bc
    8088:	0001c200 	andeq	ip, r1, r0, lsl #4
    808c:	00009388 	andeq	r9, r0, r8, lsl #7
    8090:	000093a8 	andeq	r9, r0, r8, lsr #7

00008094 <sw_uart_putc>:
 */ 
#include "rpi.h"
#include "sw-uart.h"
#include "cycle-util.h"

void sw_uart_putc(sw_uart_t *uart, unsigned char c) {
    8094:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8098:	e1a07001 	mov	r7, r1
    // use local variables to minimize any loads or stores
    int tx = uart->tx;
    809c:	e5d06000 	ldrb	r6, [r0]
    uint32_t n = uart->cycle_per_bit,
    80a0:	e5905008 	ldr	r5, [r0, #8]
             u = n,
             s = cycle_cnt_read();
    80a4:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
	
	// get start conditions
	unsigned end = n;
	unsigned start = cycle_cnt_read();
    80a8:	ee1f4f3c 	mrc	15, 0, r4, cr15, cr12, {1}
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    80ac:	e1a00006 	mov	r0, r6
    80b0:	e3a01000 	mov	r1, #0
    80b4:	eb00043c 	bl	91ac <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    80b8:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    80bc:	e0643003 	rsb	r3, r4, r3
    80c0:	e1550003 	cmp	r5, r3
    80c4:	8afffffb 	bhi	80b8 <sw_uart_putc+0x24>

	// lower line (line idling)
	write_cyc_until(tx, 0, start, end);
	end += n; 
    80c8:	e1a08085 	lsl	r8, r5, #1
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    80cc:	e1a00006 	mov	r0, r6
    80d0:	e2071001 	and	r1, r7, #1
    80d4:	eb000434 	bl	91ac <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    80d8:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    80dc:	e0643003 	rsb	r3, r4, r3
    80e0:	e1580003 	cmp	r8, r3
    80e4:	8afffffb 	bhi	80d8 <sw_uart_putc+0x44>
	write_cyc_until(tx, c & 1, start, end);
	end += n; 
    80e8:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    80ec:	e1a00006 	mov	r0, r6
    80f0:	e2071002 	and	r1, r7, #2
    80f4:	eb00042c 	bl	91ac <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    80f8:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    80fc:	e0643003 	rsb	r3, r4, r3
    8100:	e1580003 	cmp	r8, r3
    8104:	8afffffb 	bhi	80f8 <sw_uart_putc+0x64>
	write_cyc_until(tx, c & 2, start, end);
	end += n; 
    8108:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    810c:	e1a00006 	mov	r0, r6
    8110:	e2071004 	and	r1, r7, #4
    8114:	eb000424 	bl	91ac <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    8118:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    811c:	e0643003 	rsb	r3, r4, r3
    8120:	e1580003 	cmp	r8, r3
    8124:	8afffffb 	bhi	8118 <sw_uart_putc+0x84>
	write_cyc_until(tx, c & 4, start, end);
	end += n; 
    8128:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    812c:	e1a00006 	mov	r0, r6
    8130:	e2071008 	and	r1, r7, #8
    8134:	eb00041c 	bl	91ac <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    8138:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    813c:	e0643003 	rsb	r3, r4, r3
    8140:	e1580003 	cmp	r8, r3
    8144:	8afffffb 	bhi	8138 <sw_uart_putc+0xa4>
	write_cyc_until(tx, c & 8, start, end);
	end += n; 
    8148:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    814c:	e1a00006 	mov	r0, r6
    8150:	e2071010 	and	r1, r7, #16
    8154:	eb000414 	bl	91ac <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    8158:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    815c:	e0643003 	rsb	r3, r4, r3
    8160:	e1580003 	cmp	r8, r3
    8164:	8afffffb 	bhi	8158 <sw_uart_putc+0xc4>
	write_cyc_until(tx, c & 16, start, end);
	end += n; 
    8168:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    816c:	e1a00006 	mov	r0, r6
    8170:	e2071020 	and	r1, r7, #32
    8174:	eb00040c 	bl	91ac <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    8178:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    817c:	e0643003 	rsb	r3, r4, r3
    8180:	e1580003 	cmp	r8, r3
    8184:	8afffffb 	bhi	8178 <sw_uart_putc+0xe4>
	write_cyc_until(tx, c & 32, start, end);
	end += n; 
    8188:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    818c:	e1a00006 	mov	r0, r6
    8190:	e2071040 	and	r1, r7, #64	; 0x40
    8194:	eb000404 	bl	91ac <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    8198:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    819c:	e0643003 	rsb	r3, r4, r3
    81a0:	e1580003 	cmp	r8, r3
    81a4:	8afffffb 	bhi	8198 <sw_uart_putc+0x104>
	write_cyc_until(tx, c & 64, start, end);
	end += n; 
    81a8:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    81ac:	e1a00006 	mov	r0, r6
    81b0:	e2071080 	and	r1, r7, #128	; 0x80
    81b4:	eb0003fc 	bl	91ac <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    81b8:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    81bc:	e0643003 	rsb	r3, r4, r3
    81c0:	e1580003 	cmp	r8, r3
    81c4:	8afffffb 	bhi	81b8 <sw_uart_putc+0x124>
	write_cyc_until(tx, c & 128, start, end);
	end += n; 
    81c8:	e0885005 	add	r5, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    81cc:	e1a00006 	mov	r0, r6
    81d0:	e3a01001 	mov	r1, #1
    81d4:	eb0003f4 	bl	91ac <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    81d8:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    81dc:	e0643003 	rsb	r3, r4, r3
    81e0:	e1550003 	cmp	r5, r3
    81e4:	8afffffb 	bhi	81d8 <sw_uart_putc+0x144>
	write_cyc_until(tx, 1, start, end);
}
    81e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000081ec <sw_uart_getc_timeout>:
}

// do this second: you can type in pi-cat to send stuff.
//      EASY BUG: if you are reading input, but you do not get here in 
//      time it will disappear.
int sw_uart_getc_timeout(sw_uart_t *uart, int timeout_usec) {
    81ec:	e92d43f8 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
    81f0:	e1a09000 	mov	r9, r0
   int rx = uart->rx;
    81f4:	e5d07001 	ldrb	r7, [r0, #1]
    81f8:	e1a05007 	mov	r5, r7

    // get start bit: timeout_usec=0 implies you return right away.
    while(!wait_until_usec(rx, 0, timeout_usec))
    81fc:	e1a06001 	mov	r6, r1
	write_cyc_until(tx, 1, start, end);
}

// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    8200:	eb0002c5 	bl	8d1c <timer_get_usec_raw>
    8204:	e1a04000 	mov	r4, r0
    while(1) {
        if(gpio_read(rx) == v)
    8208:	e1a00005 	mov	r0, r5
    820c:	eb0003d3 	bl	9160 <gpio_read>
    8210:	e3500000 	cmp	r0, #0
    8214:	0a000005 	beq	8230 <sw_uart_getc_timeout+0x44>
            return 1;
        if(timer_get_usec_raw() - start > timeout_usec)
    8218:	eb0002bf 	bl	8d1c <timer_get_usec_raw>
    821c:	e0640000 	rsb	r0, r4, r0
    8220:	e1560000 	cmp	r6, r0
    8224:	2afffff7 	bcs	8208 <sw_uart_getc_timeout+0x1c>
            return 0;
    8228:	e3a03000 	mov	r3, #0
    822c:	ea000000 	b	8234 <sw_uart_getc_timeout+0x48>
// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    while(1) {
        if(gpio_read(rx) == v)
            return 1;
    8230:	e3a03001 	mov	r3, #1
//      time it will disappear.
int sw_uart_getc_timeout(sw_uart_t *uart, int timeout_usec) {
   int rx = uart->rx;

    // get start bit: timeout_usec=0 implies you return right away.
    while(!wait_until_usec(rx, 0, timeout_usec))
    8234:	e3530000 	cmp	r3, #0
    8238:	0a000059 	beq	83a4 <sw_uart_getc_timeout+0x1b8>
        return -1;

    // do this first so we have a tighter bound (maybe)
    unsigned s = cycle_cnt_read();  // subtract off slop?
    823c:	ee1f8f3c 	mrc	15, 0, r8, cr15, cr12, {1}

    // store these in locals to minimize load stores later.
    uint32_t u = uart->cycle_per_bit;
    8240:	e5994008 	ldr	r4, [r9, #8]
    unsigned n = u/2;
    unsigned c = 0;

    // wait one period + 1/2 to get in the middle of the next read.
    delay_ncycles(s, n + 1*u);
    8244:	e08420a4 	add	r2, r4, r4, lsr #1
    8248:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    824c:	e0683003 	rsb	r3, r8, r3
    8250:	e1520003 	cmp	r2, r3
    8254:	8afffffb 	bhi	8248 <sw_uart_getc_timeout+0x5c>
	
	s += u;
    8258:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx);
    825c:	e1a00007 	mov	r0, r7
    8260:	eb0003be 	bl	9160 <gpio_read>
    8264:	e1a09750 	asr	r9, r0, r7
    8268:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    826c:	e0683003 	rsb	r3, r8, r3
    8270:	e1540003 	cmp	r4, r3
    8274:	8afffffb 	bhi	8268 <sw_uart_getc_timeout+0x7c>
    delay_ncycles(s, u);
	s += u; 
    8278:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 1;
    827c:	e1a00007 	mov	r0, r7
    8280:	eb0003b6 	bl	9160 <gpio_read>
    8284:	e1a00750 	asr	r0, r0, r7
    8288:	e1899080 	orr	r9, r9, r0, lsl #1
    828c:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8290:	e0683003 	rsb	r3, r8, r3
    8294:	e1540003 	cmp	r4, r3
    8298:	8afffffb 	bhi	828c <sw_uart_getc_timeout+0xa0>
    delay_ncycles(s, u);
	s += u;
    829c:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 2;
    82a0:	e1a00007 	mov	r0, r7
    82a4:	eb0003ad 	bl	9160 <gpio_read>
    82a8:	e1a00750 	asr	r0, r0, r7
    82ac:	e1899100 	orr	r9, r9, r0, lsl #2
    82b0:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    82b4:	e0683003 	rsb	r3, r8, r3
    82b8:	e1540003 	cmp	r4, r3
    82bc:	8afffffb 	bhi	82b0 <sw_uart_getc_timeout+0xc4>
    delay_ncycles(s, u);
	s += u;
    82c0:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 3;
    82c4:	e1a00007 	mov	r0, r7
    82c8:	eb0003a4 	bl	9160 <gpio_read>
    82cc:	e1a00750 	asr	r0, r0, r7
    82d0:	e1899180 	orr	r9, r9, r0, lsl #3
    82d4:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    82d8:	e0683003 	rsb	r3, r8, r3
    82dc:	e1540003 	cmp	r4, r3
    82e0:	8afffffb 	bhi	82d4 <sw_uart_getc_timeout+0xe8>
    delay_ncycles(s, u);
	s += u;
    82e4:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 4;
    82e8:	e1a00007 	mov	r0, r7
    82ec:	eb00039b 	bl	9160 <gpio_read>
    82f0:	e1a00750 	asr	r0, r0, r7
    82f4:	e1899200 	orr	r9, r9, r0, lsl #4
    82f8:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    82fc:	e0683003 	rsb	r3, r8, r3
    8300:	e1540003 	cmp	r4, r3
    8304:	8afffffb 	bhi	82f8 <sw_uart_getc_timeout+0x10c>
    delay_ncycles(s, u);
	s += u;
    8308:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 5;
    830c:	e1a00007 	mov	r0, r7
    8310:	eb000392 	bl	9160 <gpio_read>
    8314:	e1a00750 	asr	r0, r0, r7
    8318:	e1899280 	orr	r9, r9, r0, lsl #5
    831c:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8320:	e0683003 	rsb	r3, r8, r3
    8324:	e1540003 	cmp	r4, r3
    8328:	8afffffb 	bhi	831c <sw_uart_getc_timeout+0x130>
    delay_ncycles(s, u);
	s += u;
    832c:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 6;
    8330:	e1a00007 	mov	r0, r7
    8334:	eb000389 	bl	9160 <gpio_read>
    8338:	e1a00750 	asr	r0, r0, r7
    833c:	e1899300 	orr	r9, r9, r0, lsl #6
    8340:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8344:	e0683003 	rsb	r3, r8, r3
    8348:	e1540003 	cmp	r4, r3
    834c:	8afffffb 	bhi	8340 <sw_uart_getc_timeout+0x154>
    delay_ncycles(s, u);
	s += u;
    c |= (gpio_read(rx) >> rx) << 7;
    8350:	e1a00007 	mov	r0, r7
    8354:	eb000381 	bl	9160 <gpio_read>
    8358:	e1a00750 	asr	r0, r0, r7
    835c:	e1899380 	orr	r9, r9, r0, lsl #7
	write_cyc_until(tx, 1, start, end);
}

// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    8360:	eb00026d 	bl	8d1c <timer_get_usec_raw>
    8364:	e1a04000 	mov	r4, r0
    while(1) {
        if(gpio_read(rx) == v)
    8368:	e1a00005 	mov	r0, r5
    836c:	eb00037b 	bl	9160 <gpio_read>
    8370:	e3500000 	cmp	r0, #0
    8374:	0a000005 	beq	8390 <sw_uart_getc_timeout+0x1a4>
            return 1;
        if(timer_get_usec_raw() - start > timeout_usec)
    8378:	eb000267 	bl	8d1c <timer_get_usec_raw>
    837c:	e0640000 	rsb	r0, r4, r0
    8380:	e1560000 	cmp	r6, r0
    8384:	2afffff7 	bcs	8368 <sw_uart_getc_timeout+0x17c>
            return 0;
    8388:	e3a03000 	mov	r3, #0
    838c:	ea000000 	b	8394 <sw_uart_getc_timeout+0x1a8>
// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    while(1) {
        if(gpio_read(rx) == v)
            return 1;
    8390:	e3a03001 	mov	r3, #1
    c |= (gpio_read(rx) >> rx) << 7;
    //delay_ncycles(s, u);
	//s += u;
    
	// make sure you wait for a stop bit: otherwise the next read may fail.
    while(!wait_until_usec(rx, 0, timeout_usec))
    8394:	e3530000 	cmp	r3, #0
    8398:	0a000003 	beq	83ac <sw_uart_getc_timeout+0x1c0>
        return -1;
	// delay_ncycles(s, n);

    return (int)c;
    839c:	e1a00009 	mov	r0, r9
    83a0:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
int sw_uart_getc_timeout(sw_uart_t *uart, int timeout_usec) {
   int rx = uart->rx;

    // get start bit: timeout_usec=0 implies you return right away.
    while(!wait_until_usec(rx, 0, timeout_usec))
        return -1;
    83a4:	e3e00000 	mvn	r0, #0
    83a8:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
    //delay_ncycles(s, u);
	//s += u;
    
	// make sure you wait for a stop bit: otherwise the next read may fail.
    while(!wait_until_usec(rx, 0, timeout_usec))
        return -1;
    83ac:	e3e00000 	mvn	r0, #0
	// delay_ncycles(s, n);

    return (int)c;
}
    83b0:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}

000083b4 <sw_uart_gets_until>:


// read characters using <sw_uart_getc()> until:
//       <sw_uart_getc() == <end>>
// returns -nbytes read if timeout (could be 0).
int sw_uart_gets_until(sw_uart_t *u, uint8_t *buf, uint32_t nbytes, uint8_t end, uint32_t usec_timeout) {
    83b4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    83b8:	e1a08000 	mov	r8, r0
    83bc:	e1a06001 	mov	r6, r1
    83c0:	e1a09003 	mov	r9, r3
    83c4:	e59da020 	ldr	sl, [sp, #32]
    assert(nbytes>0);
    83c8:	e3520000 	cmp	r2, #0
    83cc:	1a000005 	bne	83e8 <sw_uart_gets_until+0x34>
    83d0:	e59f005c 	ldr	r0, [pc, #92]	; 8434 <sw_uart_gets_until+0x80>
    83d4:	e59f105c 	ldr	r1, [pc, #92]	; 8438 <sw_uart_gets_until+0x84>
    83d8:	e59f205c 	ldr	r2, [pc, #92]	; 843c <sw_uart_gets_until+0x88>
    83dc:	e3a03071 	mov	r3, #113	; 0x71
    83e0:	eb0000ab 	bl	8694 <printk>
    83e4:	eb000211 	bl	8c30 <clean_reboot>
    buf[0] = 0;
    83e8:	e3a04000 	mov	r4, #0
    83ec:	e5c14000 	strb	r4, [r1]

    int i;
	uint8_t char_in;
    for(i = 0; i < nbytes-1; i++) {
    83f0:	e2427001 	sub	r7, r2, #1
    83f4:	ea000007 	b	8418 <sw_uart_gets_until+0x64>
        if((char_in = (uint8_t)sw_uart_getc_timeout(u, usec_timeout)) != end) {
    83f8:	e1a00008 	mov	r0, r8
    83fc:	e1a0100a 	mov	r1, sl
    8400:	ebffff79 	bl	81ec <sw_uart_getc_timeout>
    8404:	e6ef0070 	uxtb	r0, r0
    8408:	e1500009 	cmp	r0, r9
    840c:	0a000004 	beq	8424 <sw_uart_gets_until+0x70>
			buf[i] = char_in;
    8410:	e7c60005 	strb	r0, [r6, r5]
    assert(nbytes>0);
    buf[0] = 0;

    int i;
	uint8_t char_in;
    for(i = 0; i < nbytes-1; i++) {
    8414:	e2844001 	add	r4, r4, #1
    8418:	e1a05004 	mov	r5, r4
    841c:	e1540007 	cmp	r4, r7
    8420:	3afffff4 	bcc	83f8 <sw_uart_gets_until+0x44>
			buf[i] = char_in;
		} else {
			break;
		}
    }
    buf[i] = 0;
    8424:	e3a03000 	mov	r3, #0
    8428:	e7c63005 	strb	r3, [r6, r5]
    return i;
}
    842c:	e1a00004 	mov	r0, r4
    8430:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8434:	00009434 	andeq	r9, r0, r4, lsr r4
    8438:	00009450 	andeq	r9, r0, r0, asr r4
    843c:	000093bc 			; <UNDEFINED> instruction: 0x000093bc

00008440 <sw_uart_gets_timeout>:

// read characters using <sw_uart_getc()> until:
//      we do not receive any characters for <timeout> usec.
// make sure to 0 terminate!
int sw_uart_gets_timeout(sw_uart_t *u, uint8_t *buf, 
                    uint32_t nbytes, uint32_t usec_timeout) {
    8440:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8444:	e1a07000 	mov	r7, r0
    8448:	e1a05001 	mov	r5, r1
    844c:	e1a08003 	mov	r8, r3

    assert(nbytes>0);
    8450:	e3520000 	cmp	r2, #0
    8454:	1a000005 	bne	8470 <sw_uart_gets_timeout+0x30>
    8458:	e59f004c 	ldr	r0, [pc, #76]	; 84ac <sw_uart_gets_timeout+0x6c>
    845c:	e59f104c 	ldr	r1, [pc, #76]	; 84b0 <sw_uart_gets_timeout+0x70>
    8460:	e59f204c 	ldr	r2, [pc, #76]	; 84b4 <sw_uart_gets_timeout+0x74>
    8464:	e3a03087 	mov	r3, #135	; 0x87
    8468:	eb000089 	bl	8694 <printk>
    846c:	eb0001ef 	bl	8c30 <clean_reboot>
    buf[0] = 0;
    8470:	e3a04000 	mov	r4, #0
    8474:	e5c14000 	strb	r4, [r1]

    int i;
    for(i = 0; i < nbytes-1; i++) {
    8478:	e2426001 	sub	r6, r2, #1
    847c:	ea000004 	b	8494 <sw_uart_gets_timeout+0x54>
        buf[i] = (uint8_t) sw_uart_getc_timeout(u, usec_timeout);
    8480:	e1a00007 	mov	r0, r7
    8484:	e1a01008 	mov	r1, r8
    8488:	ebffff57 	bl	81ec <sw_uart_getc_timeout>
    848c:	e7c50004 	strb	r0, [r5, r4]

    assert(nbytes>0);
    buf[0] = 0;

    int i;
    for(i = 0; i < nbytes-1; i++) {
    8490:	e2844001 	add	r4, r4, #1
    8494:	e1540006 	cmp	r4, r6
    8498:	3afffff8 	bcc	8480 <sw_uart_gets_timeout+0x40>
        buf[i] = (uint8_t) sw_uart_getc_timeout(u, usec_timeout);
    }
    buf[i] = 0;
    849c:	e3a03000 	mov	r3, #0
    84a0:	e7c53004 	strb	r3, [r5, r4]
    return i;
}
    84a4:	e1a00004 	mov	r0, r4
    84a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    84ac:	00009434 	andeq	r9, r0, r4, lsr r4
    84b0:	00009450 	andeq	r9, r0, r0, asr r4
    84b4:	000093d0 	ldrdeq	r9, [r0], -r0

000084b8 <sw_uart_init_helper>:
/**************************************************************************
 * this code is implemented for you
 */

sw_uart_t 
sw_uart_init_helper(uint8_t tx, uint8_t rx, uint32_t baud, uint32_t cyc_per_bit) {
    84b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    84bc:	e1a04000 	mov	r4, r0
    84c0:	e1a08001 	mov	r8, r1
    84c4:	e1a07002 	mov	r7, r2
    84c8:	e1a05003 	mov	r5, r3
    84cc:	e59d6018 	ldr	r6, [sp, #24]
    // maybe enable the cache?  don't think will work otherwise.
    gpio_set_output(tx);
    84d0:	e1a00001 	mov	r0, r1
    84d4:	eb00029d 	bl	8f50 <gpio_set_output>
    gpio_set_input(rx);
    84d8:	e1a00007 	mov	r0, r7
    84dc:	eb0002ec 	bl	9094 <gpio_set_input>
    cycle_cnt_init();       
    84e0:	e3a03001 	mov	r3, #1
    84e4:	ee0f3f1c 	mcr	15, 0, r3, cr15, cr12, {0}


    // make sure it makes sense.
    unsigned mhz = 700 * 1000 * 1000;
    unsigned derived = cyc_per_bit * baud;
    84e8:	e0020695 	mul	r2, r5, r6
    assert((mhz - baud) <= derived && derived <= (mhz + baud));
    84ec:	e59f3064 	ldr	r3, [pc, #100]	; 8558 <sw_uart_init_helper+0xa0>
    84f0:	e0653003 	rsb	r3, r5, r3
    84f4:	e1530002 	cmp	r3, r2
    84f8:	8a000005 	bhi	8514 <sw_uart_init_helper+0x5c>
    84fc:	e59f3054 	ldr	r3, [pc, #84]	; 8558 <sw_uart_init_helper+0xa0>
    8500:	e0853003 	add	r3, r5, r3
    8504:	e1530002 	cmp	r3, r2
    8508:	2a000003 	bcs	851c <sw_uart_init_helper+0x64>
    850c:	e3a03000 	mov	r3, #0
    8510:	ea000002 	b	8520 <sw_uart_init_helper+0x68>
    8514:	e3a03000 	mov	r3, #0
    8518:	ea000000 	b	8520 <sw_uart_init_helper+0x68>
    851c:	e3a03001 	mov	r3, #1
    8520:	e3530000 	cmp	r3, #0
    8524:	1a000005 	bne	8540 <sw_uart_init_helper+0x88>
    8528:	e59f002c 	ldr	r0, [pc, #44]	; 855c <sw_uart_init_helper+0xa4>
    852c:	e59f102c 	ldr	r1, [pc, #44]	; 8560 <sw_uart_init_helper+0xa8>
    8530:	e59f202c 	ldr	r2, [pc, #44]	; 8564 <sw_uart_init_helper+0xac>
    8534:	e3a030a1 	mov	r3, #161	; 0xa1
    8538:	eb000055 	bl	8694 <printk>
    853c:	eb0001bb 	bl	8c30 <clean_reboot>
    // panic("cyc_per_bit = %d * baud = %d\n", cyc_per_bit, cyc_per_bit * baud);

    return (sw_uart_t) { 
    8540:	e5c48000 	strb	r8, [r4]
    8544:	e5c47001 	strb	r7, [r4, #1]
    8548:	e5845004 	str	r5, [r4, #4]
    854c:	e5846008 	str	r6, [r4, #8]
            .tx = tx, 
            .rx = rx, 
            .baud = baud, 
            .cycle_per_bit = cyc_per_bit 
    };
}
    8550:	e1a00004 	mov	r0, r4
    8554:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8558:	29b92700 	ldmibcs	r9!, {r8, r9, sl, sp}
    855c:	0000945c 	andeq	r9, r0, ip, asr r4
    8560:	00009450 	andeq	r9, r0, r0, asr r4
    8564:	000093e8 	andeq	r9, r0, r8, ror #7

00008568 <sw_uart_getc>:

// blocking read.
int sw_uart_getc(sw_uart_t *uart) {
    8568:	e92d4008 	push	{r3, lr}
    int res = sw_uart_getc_timeout(uart, ~0);
    856c:	e3e01000 	mvn	r1, #0
    8570:	ebffff1d 	bl	81ec <sw_uart_getc_timeout>
    if(res < 0)
    8574:	e3500000 	cmp	r0, #0
    8578:	a8bd8008 	popge	{r3, pc}
        panic("impossible: have an infinite timeout!\n");
    857c:	e59f0010 	ldr	r0, [pc, #16]	; 8594 <sw_uart_getc+0x2c>
    8580:	e59f1010 	ldr	r1, [pc, #16]	; 8598 <sw_uart_getc+0x30>
    8584:	e59f2010 	ldr	r2, [pc, #16]	; 859c <sw_uart_getc+0x34>
    8588:	e3a030b0 	mov	r3, #176	; 0xb0
    858c:	eb000040 	bl	8694 <printk>
    8590:	eb0001a6 	bl	8c30 <clean_reboot>
    8594:	000094a0 	andeq	r9, r0, r0, lsr #9
    8598:	00009450 	andeq	r9, r0, r0, asr r4
    859c:	000093fc 	strdeq	r9, [r0], -ip

000085a0 <sw_uart_putk>:
    return res;
}

void sw_uart_putk(sw_uart_t *uart, const char *msg) {
    85a0:	e92d4038 	push	{r3, r4, r5, lr}
    85a4:	e1a05000 	mov	r5, r0
    85a8:	e1a04001 	mov	r4, r1
    for(; *msg; msg++)
    85ac:	ea000002 	b	85bc <sw_uart_putk+0x1c>
        sw_uart_putc(uart, *msg);
    85b0:	e1a00005 	mov	r0, r5
    85b4:	ebfffeb6 	bl	8094 <sw_uart_putc>
        panic("impossible: have an infinite timeout!\n");
    return res;
}

void sw_uart_putk(sw_uart_t *uart, const char *msg) {
    for(; *msg; msg++)
    85b8:	e2844001 	add	r4, r4, #1
    85bc:	e5d41000 	ldrb	r1, [r4]
    85c0:	e3510000 	cmp	r1, #0
    85c4:	1afffff9 	bne	85b0 <sw_uart_putk+0x10>
        sw_uart_putc(uart, *msg);
}
    85c8:	e8bd8038 	pop	{r3, r4, r5, pc}

000085cc <sw_uart_printk>:

// don't pollute the rest of the code with all the stuff in the 
// <stdarg.h> header.
#include <stdarg.h>
#include "libc/va-printk.h"
int sw_uart_printk(sw_uart_t *uart, const char *fmt, ...) {
    85cc:	e92d000e 	push	{r1, r2, r3}
    85d0:	e92d4030 	push	{r4, r5, lr}
    85d4:	e24dde1d 	sub	sp, sp, #464	; 0x1d0
    85d8:	e1a05000 	mov	r5, r0
    char buf[460];

    va_list args;
    va_start(args, fmt);
    85dc:	e28d3e1e 	add	r3, sp, #480	; 0x1e0
    85e0:	e58d3000 	str	r3, [sp]
        int sz = va_printk(buf, sizeof buf, fmt, args);
    85e4:	e28d0004 	add	r0, sp, #4
    85e8:	e3a01f73 	mov	r1, #460	; 0x1cc
    85ec:	e59d21dc 	ldr	r2, [sp, #476]	; 0x1dc
    85f0:	eb0000e4 	bl	8988 <va_printk>
    85f4:	e1a04000 	mov	r4, r0
    va_end(args);
    assert(sz < sizeof buf-1);
    85f8:	e59f303c 	ldr	r3, [pc, #60]	; 863c <sw_uart_printk+0x70>
    85fc:	e1500003 	cmp	r0, r3
    8600:	9a000005 	bls	861c <sw_uart_printk+0x50>
    8604:	e59f0034 	ldr	r0, [pc, #52]	; 8640 <sw_uart_printk+0x74>
    8608:	e59f1034 	ldr	r1, [pc, #52]	; 8644 <sw_uart_printk+0x78>
    860c:	e59f2034 	ldr	r2, [pc, #52]	; 8648 <sw_uart_printk+0x7c>
    8610:	e3a030c4 	mov	r3, #196	; 0xc4
    8614:	eb00001e 	bl	8694 <printk>
    8618:	eb000184 	bl	8c30 <clean_reboot>
    sw_uart_putk(uart,buf);
    861c:	e1a00005 	mov	r0, r5
    8620:	e28d1004 	add	r1, sp, #4
    8624:	ebffffdd 	bl	85a0 <sw_uart_putk>
    return sz;
}
    8628:	e1a00004 	mov	r0, r4
    862c:	e28dde1d 	add	sp, sp, #464	; 0x1d0
    8630:	e8bd4030 	pop	{r4, r5, lr}
    8634:	e28dd00c 	add	sp, sp, #12
    8638:	e12fff1e 	bx	lr
    863c:	000001ca 	andeq	r0, r0, sl, asr #3
    8640:	000094d8 	ldrdeq	r9, [r0], -r8
    8644:	00009450 	andeq	r9, r0, r0, asr r4
    8648:	0000940c 	andeq	r9, r0, ip, lsl #8

0000864c <sw_uart_gets_until_blk>:

int sw_uart_gets_until_blk(sw_uart_t *u, uint8_t *buf, uint32_t nbytes, uint8_t end) {
    864c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8650:	e24dd00c 	sub	sp, sp, #12
    int res = sw_uart_gets_until(u, buf, nbytes, end, ~0);
    8654:	e3e0c000 	mvn	ip, #0
    8658:	e58dc000 	str	ip, [sp]
    865c:	ebffff54 	bl	83b4 <sw_uart_gets_until>
    if(res < 0)
    8660:	e3500000 	cmp	r0, #0
    8664:	aa000005 	bge	8680 <sw_uart_gets_until_blk+0x34>
        panic("impossible: have an infinite timeout!\n");
    8668:	e59f0018 	ldr	r0, [pc, #24]	; 8688 <sw_uart_gets_until_blk+0x3c>
    866c:	e59f1018 	ldr	r1, [pc, #24]	; 868c <sw_uart_gets_until_blk+0x40>
    8670:	e59f2018 	ldr	r2, [pc, #24]	; 8690 <sw_uart_gets_until_blk+0x44>
    8674:	e3a030cc 	mov	r3, #204	; 0xcc
    8678:	eb000005 	bl	8694 <printk>
    867c:	eb00016b 	bl	8c30 <clean_reboot>
    return res;
}
    8680:	e28dd00c 	add	sp, sp, #12
    8684:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    8688:	000094a0 	andeq	r9, r0, r0, lsr #9
    868c:	00009450 	andeq	r9, r0, r0, asr r4
    8690:	0000941c 	andeq	r9, r0, ip, lsl r4

00008694 <printk>:
#include <stdarg.h>

#include "rpi.h"
#include "va-printk.h"

int printk(const char *fmt, ...) {
    8694:	e92d000f 	push	{r0, r1, r2, r3}
    8698:	e92d4030 	push	{r4, r5, lr}
    869c:	e24dd00c 	sub	sp, sp, #12
    // this is a really huge buffer for a pi.   could do this better.
    static char buf[1024];
    va_list args;

    va_start(args, fmt);
    86a0:	e28d301c 	add	r3, sp, #28
    86a4:	e58d3004 	str	r3, [sp, #4]
        int sz = va_printk(buf, sizeof buf, fmt, args);
    86a8:	e59f4034 	ldr	r4, [pc, #52]	; 86e4 <printk+0x50>
    86ac:	e1a00004 	mov	r0, r4
    86b0:	e3a01b01 	mov	r1, #1024	; 0x400
    86b4:	e59d2018 	ldr	r2, [sp, #24]
    86b8:	eb0000b2 	bl	8988 <va_printk>
    86bc:	e1a05000 	mov	r5, r0
    va_end(args);


#if 1
    putk(buf);
    86c0:	e59f3020 	ldr	r3, [pc, #32]	; 86e8 <printk+0x54>
    86c4:	e5933000 	ldr	r3, [r3]
    86c8:	e1a00004 	mov	r0, r4
    86cc:	e12fff33 	blx	r3
    int i;
    for(i = 0; buf[i]; i++)
        rpi_putchar(buf[i]);
#endif
    return sz;
}
    86d0:	e1a00005 	mov	r0, r5
    86d4:	e28dd00c 	add	sp, sp, #12
    86d8:	e8bd4030 	pop	{r4, r5, lr}
    86dc:	e28dd010 	add	sp, sp, #16
    86e0:	e12fff1e 	bx	lr
    86e4:	0000960c 	andeq	r9, r0, ip, lsl #12
    86e8:	00009310 	andeq	r9, r0, r0, lsl r3

000086ec <internal_putk>:
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    86ec:	e92d4038 	push	{r3, r4, r5, lr}
    86f0:	e1a04000 	mov	r4, r0
    for(; *p; p++)
        rpi_putchar(*p);
    86f4:	e59f5020 	ldr	r5, [pc, #32]	; 871c <internal_putk+0x30>
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    86f8:	ea000002 	b	8708 <internal_putk+0x1c>
        rpi_putchar(*p);
    86fc:	e5953000 	ldr	r3, [r5]
    8700:	e12fff33 	blx	r3
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    8704:	e2844001 	add	r4, r4, #1
    8708:	e5d40000 	ldrb	r0, [r4]
    870c:	e3500000 	cmp	r0, #0
    8710:	1afffff9 	bne	86fc <internal_putk+0x10>
        rpi_putchar(*p);
//  we were adding this.
//  rpi_putchar('\n');
    return 1;
}
    8714:	e3a00001 	mov	r0, #1
    8718:	e8bd8038 	pop	{r3, r4, r5, pc}
    871c:	00009384 	andeq	r9, r0, r4, lsl #7

00008720 <isdigit>:
    if(puts_fp)
        putk = puts_fp;
}

// XXX: check sign promotion.
static int isdigit(int c) { return c >= '0' && c <= '9'; }
    8720:	e2400030 	sub	r0, r0, #48	; 0x30
    8724:	e3500009 	cmp	r0, #9
    8728:	83a00000 	movhi	r0, #0
    872c:	93a00001 	movls	r0, #1
    8730:	e12fff1e 	bx	lr

00008734 <pad>:

// don't move: can't be inlined, gcc seems to have a bug.
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
    8734:	e0611000 	rsb	r1, r1, r0
	// pad with leading spaces
	for(; len < width; len++)
		*p++ = ' ';
    8738:	e3a03020 	mov	r3, #32
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    873c:	ea000002 	b	874c <pad+0x18>
		*p++ = ' ';
    8740:	e5c03000 	strb	r3, [r0]
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8744:	e2811001 	add	r1, r1, #1
		*p++ = ' ';
    8748:	e2800001 	add	r0, r0, #1
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    874c:	e1510002 	cmp	r1, r2
    8750:	bafffffa 	blt	8740 <pad+0xc>
		*p++ = ' ';
	*p = 0;
    8754:	e3a03000 	mov	r3, #0
    8758:	e5c03000 	strb	r3, [r0]
	return p;
}
    875c:	e12fff1e 	bx	lr

00008760 <reverse>:

static char* reverse(char *dst, int n, char *p, char *start) {
	// drop the lower chars if the string is too big.
	int len = p - start + 1; // include \0
    8760:	e063c002 	rsb	ip, r3, r2
    8764:	e28cc001 	add	ip, ip, #1
	if(len > n)
    8768:	e15c0001 	cmp	ip, r1
		start += (len - n);
    876c:	c061100c 	rsbgt	r1, r1, ip
    8770:	c0833001 	addgt	r3, r3, r1

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    8774:	e2422001 	sub	r2, r2, #1
    8778:	e1a01000 	mov	r1, r0
    877c:	ea000002 	b	878c <reverse+0x2c>
		*dst++ = *p;
    8780:	e452c001 	ldrb	ip, [r2], #-1
    8784:	e5c1c000 	strb	ip, [r1]
    8788:	e2811001 	add	r1, r1, #1
		start += (len - n);

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    878c:	e1520003 	cmp	r2, r3
    8790:	2afffffa 	bcs	8780 <reverse+0x20>
		*dst++ = *p;
	*dst++ = 0;
    8794:	e3a03000 	mov	r3, #0
    8798:	e5c13000 	strb	r3, [r1]

	return s;
}
    879c:	e12fff1e 	bx	lr

000087a0 <emit>:

static char* emit(unsigned base, char *dst, int n, int val, int width, int signed_p) {
    87a0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    87a4:	e24dd040 	sub	sp, sp, #64	; 0x40
    87a8:	e1a05001 	mov	r5, r1
    87ac:	e1a04002 	mov	r4, r2
    87b0:	e59d2058 	ldr	r2, [sp, #88]	; 0x58
	// XXX: constrain width to be >= bit size: can change this.
	if(width > n)
    87b4:	e1520004 	cmp	r2, r4
		width = n - 1;
    87b8:	c2442001 	subgt	r2, r4, #1

	char buf[64], *p = buf; 
	unsigned u = val;
    87bc:	e1a0c003 	mov	ip, r3

	switch(base) { 
    87c0:	e2400002 	sub	r0, r0, #2
    87c4:	e350000e 	cmp	r0, #14
    87c8:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
    87cc:	ea000042 	b	88dc <emit+0x13c>
    87d0:	000088b4 			; <UNDEFINED> instruction: 0x000088b4
    87d4:	000088dc 	ldrdeq	r8, [r0], -ip
    87d8:	000088dc 	ldrdeq	r8, [r0], -ip
    87dc:	000088dc 	ldrdeq	r8, [r0], -ip
    87e0:	000088dc 	ldrdeq	r8, [r0], -ip
    87e4:	000088dc 	ldrdeq	r8, [r0], -ip
    87e8:	000088a8 	andeq	r8, r0, r8, lsr #17
    87ec:	000088dc 	ldrdeq	r8, [r0], -ip
    87f0:	0000880c 	andeq	r8, r0, ip, lsl #16
    87f4:	000088dc 	ldrdeq	r8, [r0], -ip
    87f8:	000088dc 	ldrdeq	r8, [r0], -ip
    87fc:	000088dc 	ldrdeq	r8, [r0], -ip
    8800:	000088dc 	ldrdeq	r8, [r0], -ip
    8804:	000088dc 	ldrdeq	r8, [r0], -ip
    8808:	00008880 	andeq	r8, r0, r0, lsl #17
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
    880c:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
    8810:	e2911000 	adds	r1, r1, #0
    8814:	13a01001 	movne	r1, #1
    8818:	e0111fa3 	ands	r1, r1, r3, lsr #31
				neg_p = 1;
				val = -val;
    881c:	1263c000 	rsbne	ip, r3, #0
	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
				neg_p = 1;
    8820:	13a08001 	movne	r8, #1
	unsigned u = val;

	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
    8824:	03a08000 	moveq	r8, #0
			if(val < 0 && signed_p) {
				neg_p = 1;
    8828:	e1a0100d 	mov	r1, sp
				val = -val;
				u = val;
			}
			do { 
				*p++ = "0123456789"[u % 10];
    882c:	e59f70e8 	ldr	r7, [pc, #232]	; 891c <emit+0x17c>
    8830:	e59f60e8 	ldr	r6, [pc, #232]	; 8920 <emit+0x180>
    8834:	ea000000 	b	883c <emit+0x9c>
    8838:	e1a01003 	mov	r1, r3
    883c:	e2813001 	add	r3, r1, #1
    8840:	e08e0c97 	umull	r0, lr, r7, ip
    8844:	e1a0e1ae 	lsr	lr, lr, #3
    8848:	e1a0000e 	mov	r0, lr
    884c:	e08ee10e 	add	lr, lr, lr, lsl #2
    8850:	e1a0e08e 	lsl	lr, lr, #1
    8854:	e06ee00c 	rsb	lr, lr, ip
    8858:	e7d6c00e 	ldrb	ip, [r6, lr]
    885c:	e5c1c000 	strb	ip, [r1]
			} while(u /= 10); 
    8860:	e1a0c000 	mov	ip, r0
    8864:	e3500000 	cmp	r0, #0
    8868:	1afffff2 	bne	8838 <emit+0x98>
			if(neg_p)
    886c:	e3580000 	cmp	r8, #0
				*p++ = '-';
    8870:	12813002 	addne	r3, r1, #2
    8874:	13a0002d 	movne	r0, #45	; 0x2d
    8878:	15c10001 	strbne	r0, [r1, #1]
    887c:	ea00001c 	b	88f4 <emit+0x154>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    8880:	e1a0e00d 	mov	lr, sp
			break;
		}
		case 16:
			u = val;
                        do {
                                *p++ = "0123456789abcdef"[u % 16];
    8884:	e59f0098 	ldr	r0, [pc, #152]	; 8924 <emit+0x184>
    8888:	e28e3001 	add	r3, lr, #1
    888c:	e20c100f 	and	r1, ip, #15
    8890:	e7d01001 	ldrb	r1, [r0, r1]
    8894:	e5ce1000 	strb	r1, [lr]
    8898:	e1a0e003 	mov	lr, r3
                        } while(u /= 16);
    889c:	e1b0c22c 	lsrs	ip, ip, #4
    88a0:	1afffff8 	bne	8888 <emit+0xe8>
    88a4:	ea000012 	b	88f4 <emit+0x154>
                        break;
		// just a single char
		case 8:
			*p++ = val;
    88a8:	e5cd3000 	strb	r3, [sp]
    88ac:	e28d3001 	add	r3, sp, #1
			break;
    88b0:	ea00000f 	b	88f4 <emit+0x154>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    88b4:	e1a0e00d 	mov	lr, sp
#if 0
			for(int i = 0; i < 32; i++)
				*p++ = "01"[(u & (1<<i)) != 0];
#else
                        do {
                        	*p++ = "01"[u % 2];
    88b8:	e59f0068 	ldr	r0, [pc, #104]	; 8928 <emit+0x188>
    88bc:	e28e3001 	add	r3, lr, #1
    88c0:	e20c1001 	and	r1, ip, #1
    88c4:	e7d01001 	ldrb	r1, [r0, r1]
    88c8:	e5ce1000 	strb	r1, [lr]
    88cc:	e1a0e003 	mov	lr, r3
			} while(u /= 2);
    88d0:	e1b0c0ac 	lsrs	ip, ip, #1
    88d4:	1afffff8 	bne	88bc <emit+0x11c>
    88d8:	ea000005 	b	88f4 <emit+0x154>
#endif
			break;
		default:
			assert(0);
    88dc:	e59f0048 	ldr	r0, [pc, #72]	; 892c <emit+0x18c>
    88e0:	e59f1048 	ldr	r1, [pc, #72]	; 8930 <emit+0x190>
    88e4:	e59f2048 	ldr	r2, [pc, #72]	; 8934 <emit+0x194>
    88e8:	e3a03075 	mov	r3, #117	; 0x75
    88ec:	ebffff68 	bl	8694 <printk>
    88f0:	eb0000ce 	bl	8c30 <clean_reboot>
	}
	// number string is reversed, so re-reverse it.
	return reverse(dst, n, pad(p, buf, width), buf);
    88f4:	e1a00003 	mov	r0, r3
    88f8:	e1a0100d 	mov	r1, sp
    88fc:	ebffff8c 	bl	8734 <pad>
    8900:	e1a02000 	mov	r2, r0
    8904:	e1a00005 	mov	r0, r5
    8908:	e1a01004 	mov	r1, r4
    890c:	e1a0300d 	mov	r3, sp
    8910:	ebffff92 	bl	8760 <reverse>
}
    8914:	e28dd040 	add	sp, sp, #64	; 0x40
    8918:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    891c:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    8920:	00009548 	andeq	r9, r0, r8, asr #10
    8924:	00009554 	andeq	r9, r0, r4, asr r5
    8928:	00009568 	andeq	r9, r0, r8, ror #10
    892c:	00009520 	andeq	r9, r0, r0, lsr #10
    8930:	00009534 	andeq	r9, r0, r4, lsr r5
    8934:	000094fc 	strdeq	r9, [r0], -ip

00008938 <rpi_set_output>:
// override this is going through the network.
int (*rpi_putchar)(int c) = internal_putchar;
#endif


void rpi_set_output(int (*putc_fp)(int), int (*puts_fp)(const char *)) {
    8938:	e92d4008 	push	{r3, lr}
    assert(putc_fp);
    893c:	e3500000 	cmp	r0, #0
    8940:	1a000005 	bne	895c <rpi_set_output+0x24>
    8944:	e59f0028 	ldr	r0, [pc, #40]	; 8974 <rpi_set_output+0x3c>
    8948:	e59f1028 	ldr	r1, [pc, #40]	; 8978 <rpi_set_output+0x40>
    894c:	e59f2028 	ldr	r2, [pc, #40]	; 897c <rpi_set_output+0x44>
    8950:	e3a03020 	mov	r3, #32
    8954:	ebffff4e 	bl	8694 <printk>
    8958:	eb0000b4 	bl	8c30 <clean_reboot>
    rpi_putchar = putc_fp;
    895c:	e59f301c 	ldr	r3, [pc, #28]	; 8980 <rpi_set_output+0x48>
    8960:	e5830000 	str	r0, [r3]
    if(puts_fp)
    8964:	e3510000 	cmp	r1, #0
        putk = puts_fp;
    8968:	159f3014 	ldrne	r3, [pc, #20]	; 8984 <rpi_set_output+0x4c>
    896c:	15831000 	strne	r1, [r3]
    8970:	e8bd8008 	pop	{r3, pc}
    8974:	0000956c 	andeq	r9, r0, ip, ror #10
    8978:	00009534 	andeq	r9, r0, r4, lsr r5
    897c:	00009504 	andeq	r9, r0, r4, lsl #10
    8980:	00009384 	andeq	r9, r0, r4, lsl #7
    8984:	00009310 	andeq	r9, r0, r0, lsl r3

00008988 <va_printk>:
	return reverse(dst, n, pad(p, buf, width), buf);
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
    8988:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    898c:	e24dd08c 	sub	sp, sp, #140	; 0x8c
    8990:	e1a0b000 	mov	fp, r0
    8994:	e1a0a003 	mov	sl, r3
	char *p = buf, *e = buf + n - 1;
    8998:	e2411001 	sub	r1, r1, #1
    899c:	e0808001 	add	r8, r0, r1

	buf[0] = 0;
    89a0:	e3a03000 	mov	r3, #0
    89a4:	e5c03000 	strb	r3, [r0]
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;
    89a8:	e1a04000 	mov	r4, r0

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    89ac:	ea000087 	b	8bd0 <va_printk+0x248>
		if(*fmt != '%')
    89b0:	e3530025 	cmp	r3, #37	; 0x25
			*p++ = *fmt++;
    89b4:	12822001 	addne	r2, r2, #1
    89b8:	15c43000 	strbne	r3, [r4]
    89bc:	12844001 	addne	r4, r4, #1
    89c0:	1a000082 	bne	8bd0 <va_printk+0x248>
		
		else if(fmt[1] == '%') {
    89c4:	e5d21001 	ldrb	r1, [r2, #1]
    89c8:	e3510025 	cmp	r1, #37	; 0x25
			*p++ = *fmt;
    89cc:	05c43000 	strbeq	r3, [r4]
			fmt+=2;
    89d0:	02822002 	addeq	r2, r2, #2
	for(; *fmt && p < e; ) {
		if(*fmt != '%')
			*p++ = *fmt++;
		
		else if(fmt[1] == '%') {
			*p++ = *fmt;
    89d4:	02844001 	addeq	r4, r4, #1
    89d8:	0a00007c 	beq	8bd0 <va_printk+0x248>
			fmt+=2;
		} else {	
			fmt++;
    89dc:	e2826001 	add	r6, r2, #1

			char *s, num[128];
			unsigned width = 0;
    89e0:	e3a07000 	mov	r7, #0

			while(isdigit(*fmt)) {
    89e4:	ea000004 	b	89fc <va_printk+0x74>
				width = width*10 + *fmt - '0';
    89e8:	e0877107 	add	r7, r7, r7, lsl #2
    89ec:	e1a07087 	lsl	r7, r7, #1
    89f0:	e0877005 	add	r7, r7, r5
    89f4:	e2477030 	sub	r7, r7, #48	; 0x30
				fmt++;
    89f8:	e2866001 	add	r6, r6, #1
			fmt++;

			char *s, num[128];
			unsigned width = 0;

			while(isdigit(*fmt)) {
    89fc:	e5d65000 	ldrb	r5, [r6]
    8a00:	e1a09005 	mov	r9, r5
    8a04:	e1a00005 	mov	r0, r5
    8a08:	ebffff44 	bl	8720 <isdigit>
    8a0c:	e3500000 	cmp	r0, #0
    8a10:	1afffff4 	bne	89e8 <va_printk+0x60>
				width = width*10 + *fmt - '0';
				fmt++;
			}
			assert(width < 32);
    8a14:	e357001f 	cmp	r7, #31
    8a18:	9a000005 	bls	8a34 <va_printk+0xac>
    8a1c:	e59f01d8 	ldr	r0, [pc, #472]	; 8bfc <va_printk+0x274>
    8a20:	e59f11d8 	ldr	r1, [pc, #472]	; 8c00 <va_printk+0x278>
    8a24:	e59f21d8 	ldr	r2, [pc, #472]	; 8c04 <va_printk+0x27c>
    8a28:	e3a03092 	mov	r3, #146	; 0x92
    8a2c:	ebffff18 	bl	8694 <printk>
    8a30:	eb00007e 	bl	8c30 <clean_reboot>
			
			switch(*fmt) {
    8a34:	e2455062 	sub	r5, r5, #98	; 0x62
    8a38:	e3550016 	cmp	r5, #22
    8a3c:	979ff105 	ldrls	pc, [pc, r5, lsl #2]
    8a40:	ea000051 	b	8b8c <va_printk+0x204>
    8a44:	00008b30 	andeq	r8, r0, r0, lsr fp
    8a48:	00008b64 	andeq	r8, r0, r4, ror #22
    8a4c:	00008ab8 			; <UNDEFINED> instruction: 0x00008ab8
    8a50:	00008b8c 	andeq	r8, r0, ip, lsl #23
    8a54:	00008aa0 	andeq	r8, r0, r0, lsr #21
    8a58:	00008b8c 	andeq	r8, r0, ip, lsl #23
    8a5c:	00008b8c 	andeq	r8, r0, ip, lsl #23
    8a60:	00008b8c 	andeq	r8, r0, ip, lsl #23
    8a64:	00008b8c 	andeq	r8, r0, ip, lsl #23
    8a68:	00008b8c 	andeq	r8, r0, ip, lsl #23
    8a6c:	00008b8c 	andeq	r8, r0, ip, lsl #23
    8a70:	00008b8c 	andeq	r8, r0, ip, lsl #23
    8a74:	00008b8c 	andeq	r8, r0, ip, lsl #23
    8a78:	00008b8c 	andeq	r8, r0, ip, lsl #23
    8a7c:	00008b08 	andeq	r8, r0, r8, lsl #22
    8a80:	00008b8c 	andeq	r8, r0, ip, lsl #23
    8a84:	00008b8c 	andeq	r8, r0, ip, lsl #23
    8a88:	00008b58 	andeq	r8, r0, r8, asr fp
    8a8c:	00008b8c 	andeq	r8, r0, ip, lsl #23
    8a90:	00008ae0 	andeq	r8, r0, r0, ror #21
    8a94:	00008b8c 	andeq	r8, r0, ip, lsl #23
    8a98:	00008b8c 	andeq	r8, r0, ip, lsl #23
    8a9c:	00008b08 	andeq	r8, r0, r8, lsl #22
			case 'f':
			{
#ifndef RPI_FP_ENABLED
				panic("float not enabled!!!");
    8aa0:	e59f0160 	ldr	r0, [pc, #352]	; 8c08 <va_printk+0x280>
    8aa4:	e59f1154 	ldr	r1, [pc, #340]	; 8c00 <va_printk+0x278>
    8aa8:	e59f2154 	ldr	r2, [pc, #340]	; 8c04 <va_printk+0x27c>
    8aac:	e3a03098 	mov	r3, #152	; 0x98
    8ab0:	ebfffef7 	bl	8694 <printk>
    8ab4:	eb00005d 	bl	8c30 <clean_reboot>

				break;
#endif
			}
			case 'd':
				s = emit(10, num, 128, va_arg(args, int), width, 1);
    8ab8:	e59a3000 	ldr	r3, [sl]
    8abc:	e28aa004 	add	sl, sl, #4
    8ac0:	e58d7000 	str	r7, [sp]
    8ac4:	e3a02001 	mov	r2, #1
    8ac8:	e58d2004 	str	r2, [sp, #4]
    8acc:	e3a0000a 	mov	r0, #10
    8ad0:	e28d1008 	add	r1, sp, #8
    8ad4:	e3a02080 	mov	r2, #128	; 0x80
    8ad8:	ebffff30 	bl	87a0 <emit>
				break;
    8adc:	ea000031 	b	8ba8 <va_printk+0x220>
			case 'u':
				s = emit(10, num, 128, va_arg(args, unsigned), width, 0);
    8ae0:	e59a3000 	ldr	r3, [sl]
    8ae4:	e28aa004 	add	sl, sl, #4
    8ae8:	e58d7000 	str	r7, [sp]
    8aec:	e3a02000 	mov	r2, #0
    8af0:	e58d2004 	str	r2, [sp, #4]
    8af4:	e3a0000a 	mov	r0, #10
    8af8:	e28d1008 	add	r1, sp, #8
    8afc:	e3a02080 	mov	r2, #128	; 0x80
    8b00:	ebffff26 	bl	87a0 <emit>
				break;
    8b04:	ea000027 	b	8ba8 <va_printk+0x220>
			case 'p':
			case 'x':
				s = emit(16, num, 128, va_arg(args, unsigned), width, 0);
    8b08:	e59a3000 	ldr	r3, [sl]
    8b0c:	e28aa004 	add	sl, sl, #4
    8b10:	e58d7000 	str	r7, [sp]
    8b14:	e3a02000 	mov	r2, #0
    8b18:	e58d2004 	str	r2, [sp, #4]
    8b1c:	e3a00010 	mov	r0, #16
    8b20:	e28d1008 	add	r1, sp, #8
    8b24:	e3a02080 	mov	r2, #128	; 0x80
    8b28:	ebffff1c 	bl	87a0 <emit>
				break;
    8b2c:	ea00001d 	b	8ba8 <va_printk+0x220>
			case 'b':
				s = emit(2, num, 128, va_arg(args, unsigned), width, 0);
    8b30:	e59a3000 	ldr	r3, [sl]
    8b34:	e28aa004 	add	sl, sl, #4
    8b38:	e58d7000 	str	r7, [sp]
    8b3c:	e3a02000 	mov	r2, #0
    8b40:	e58d2004 	str	r2, [sp, #4]
    8b44:	e3a00002 	mov	r0, #2
    8b48:	e28d1008 	add	r1, sp, #8
    8b4c:	e3a02080 	mov	r2, #128	; 0x80
    8b50:	ebffff12 	bl	87a0 <emit>
				break;
    8b54:	ea000013 	b	8ba8 <va_printk+0x220>
			case 's':
				s = va_arg(args, char *);
    8b58:	e59a0000 	ldr	r0, [sl]
    8b5c:	e28aa004 	add	sl, sl, #4
				break;
    8b60:	ea000010 	b	8ba8 <va_printk+0x220>
			case 'c':
				s = emit(8, num, 128, va_arg(args, int),width,0);
    8b64:	e59a3000 	ldr	r3, [sl]
    8b68:	e28aa004 	add	sl, sl, #4
    8b6c:	e58d7000 	str	r7, [sp]
    8b70:	e3a02000 	mov	r2, #0
    8b74:	e58d2004 	str	r2, [sp, #4]
    8b78:	e3a00008 	mov	r0, #8
    8b7c:	e08d1000 	add	r1, sp, r0
    8b80:	e3a02080 	mov	r2, #128	; 0x80
    8b84:	ebffff05 	bl	87a0 <emit>
				break;
    8b88:	ea000006 	b	8ba8 <va_printk+0x220>
			default: 
				panic("printk: not handling specifier '%c'\n", *fmt);
    8b8c:	e58d9000 	str	r9, [sp]
    8b90:	e59f0074 	ldr	r0, [pc, #116]	; 8c0c <va_printk+0x284>
    8b94:	e59f1064 	ldr	r1, [pc, #100]	; 8c00 <va_printk+0x278>
    8b98:	e59f2064 	ldr	r2, [pc, #100]	; 8c04 <va_printk+0x27c>
    8b9c:	e3a030b9 	mov	r3, #185	; 0xb9
    8ba0:	ebfffebb 	bl	8694 <printk>
    8ba4:	eb000021 	bl	8c30 <clean_reboot>
				return 0;   // ugh
			}
			fmt++;
    8ba8:	e2862001 	add	r2, r6, #1

			// safe string copy
			for(; p < e && *s; )
    8bac:	ea000002 	b	8bbc <va_printk+0x234>
				*p++ = *s++;
    8bb0:	e2800001 	add	r0, r0, #1
    8bb4:	e5c43000 	strb	r3, [r4]
    8bb8:	e2844001 	add	r4, r4, #1
				return 0;   // ugh
			}
			fmt++;

			// safe string copy
			for(; p < e && *s; )
    8bbc:	e1540008 	cmp	r4, r8
    8bc0:	2a000002 	bcs	8bd0 <va_printk+0x248>
    8bc4:	e5d03000 	ldrb	r3, [r0]
    8bc8:	e3530000 	cmp	r3, #0
    8bcc:	1afffff7 	bne	8bb0 <va_printk+0x228>

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    8bd0:	e5d23000 	ldrb	r3, [r2]
    8bd4:	e3530000 	cmp	r3, #0
    8bd8:	0a000001 	beq	8be4 <va_printk+0x25c>
    8bdc:	e1540008 	cmp	r4, r8
    8be0:	3affff72 	bcc	89b0 <va_printk+0x28>
			// safe string copy
			for(; p < e && *s; )
				*p++ = *s++;
		}
	}
	*p++ = 0;
    8be4:	e2840001 	add	r0, r4, #1
    8be8:	e3a03000 	mov	r3, #0
    8bec:	e5c43000 	strb	r3, [r4]
	return p - buf;
}
    8bf0:	e06b0000 	rsb	r0, fp, r0
    8bf4:	e28dd08c 	add	sp, sp, #140	; 0x8c
    8bf8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8bfc:	00009584 	andeq	r9, r0, r4, lsl #11
    8c00:	00009534 	andeq	r9, r0, r4, lsr r5
    8c04:	00009514 	andeq	r9, r0, r4, lsl r5
    8c08:	000095a0 	andeq	r9, r0, r0, lsr #11
    8c0c:	000095c8 	andeq	r9, r0, r8, asr #11

00008c10 <enable_cache>:
#include "rpi.h"

void enable_cache(void) {
    unsigned r;
    asm volatile ("MRC p15, 0, %0, c1, c0, 0" : "=r" (r));
    8c10:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	r |= (1 << 12); // l1 instruction cache
	r |= (1 << 11); // branch prediction
    8c14:	e3833b06 	orr	r3, r3, #6144	; 0x1800
    asm volatile ("MCR p15, 0, %0, c1, c0, 0" :: "r" (r));
    8c18:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    8c1c:	e12fff1e 	bx	lr

00008c20 <disable_cache>:
}

// should we flush icache?
void disable_cache(void) {
    unsigned r;
    asm volatile ("MRC p15, 0, %0, c1, c0, 0" : "=r" (r));
    8c20:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    //r |= 0x1800;
	r &= ~(1 << 12); // l1 instruction cache
	r &= ~(1 << 11); // branch prediction
    8c24:	e3c33b06 	bic	r3, r3, #6144	; 0x1800
    asm volatile ("MCR p15, 0, %0, c1, c0, 0" :: "r" (r));
    8c28:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    8c2c:	e12fff1e 	bx	lr

00008c30 <clean_reboot>:
#include "rpi.h"

// print out a special message so bootloader exits
void clean_reboot(void) {
    8c30:	e92d4008 	push	{r3, lr}
    putk("DONE!!!\n");
    8c34:	e59f3014 	ldr	r3, [pc, #20]	; 8c50 <clean_reboot+0x20>
    8c38:	e5933000 	ldr	r3, [r3]
    8c3c:	e59f0010 	ldr	r0, [pc, #16]	; 8c54 <clean_reboot+0x24>
    8c40:	e12fff33 	blx	r3
    delay_ms(100);       // (hopefully) enough time for message to get flushed.
    8c44:	e3a00064 	mov	r0, #100	; 0x64
    8c48:	eb000048 	bl	8d70 <delay_ms>
    rpi_reboot();
    8c4c:	eb000019 	bl	8cb8 <rpi_reboot>
    8c50:	00009310 	andeq	r9, r0, r0, lsl r3
    8c54:	00009600 	andeq	r9, r0, r0, lsl #12

00008c58 <_cstart>:
#include "rpi.h"

void _cstart() {
    8c58:	e92d4008 	push	{r3, lr}
    extern int __bss_start__, __bss_end__;
	void notmain();

    int* bss = &__bss_start__;
    8c5c:	e59f3020 	ldr	r3, [pc, #32]	; 8c84 <_cstart+0x2c>
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    8c60:	e59f2020 	ldr	r2, [pc, #32]	; 8c88 <_cstart+0x30>
        *bss++ = 0;
    8c64:	e3a01000 	mov	r1, #0
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    8c68:	ea000001 	b	8c74 <_cstart+0x1c>
        *bss++ = 0;
    8c6c:	e5831000 	str	r1, [r3]
    8c70:	e2833004 	add	r3, r3, #4
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    8c74:	e1530002 	cmp	r3, r2
    8c78:	3afffffb 	bcc	8c6c <_cstart+0x14>
        *bss++ = 0;

    notmain(); 
    8c7c:	ebfffce3 	bl	8010 <notmain>
	rpi_reboot();
    8c80:	eb00000c 	bl	8cb8 <rpi_reboot>
    8c84:	0000960c 	andeq	r9, r0, ip, lsl #12
    8c88:	00009a10 	andeq	r9, r0, r0, lsl sl

00008c8c <at_user_level>:
 * works if we have a trashed stack pointer?
 */
static unsigned user_level = 0b10000;
int at_user_level(void) {
    unsigned cpsr = 0;
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    8c8c:	e10f0000 	mrs	r0, CPSR

    // user level = lower 5 bits = 0b10000);
    return (cpsr  & 0b11111)  == user_level;
    8c90:	e200001f 	and	r0, r0, #31
}
    8c94:	e3500010 	cmp	r0, #16
    8c98:	13a00000 	movne	r0, #0
    8c9c:	03a00001 	moveq	r0, #1
    8ca0:	e12fff1e 	bx	lr

00008ca4 <set_user_level>:

// this is just used by the reboot code.
void set_user_level(void) {
    unsigned cpsr = 0;
    // XXX: shouldn't we just set the one bit?
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    8ca4:	e10f3000 	mrs	r3, CPSR
        cpsr = (cpsr & ~0b11111) | user_level;
    8ca8:	e3c3301f 	bic	r3, r3, #31
    8cac:	e3833010 	orr	r3, r3, #16
    asm volatile("msr cpsr, %0" :: "r"(cpsr));
    8cb0:	e129f003 	msr	CPSR_fc, r3
    8cb4:	e12fff1e 	bx	lr

00008cb8 <rpi_reboot>:
}

void rpi_reboot(void) {
    8cb8:	e92d4008 	push	{r3, lr}
    if(at_user_level()) {
    8cbc:	ebfffff2 	bl	8c8c <at_user_level>
    8cc0:	e3500000 	cmp	r0, #0
    8cc4:	0a000000 	beq	8ccc <rpi_reboot+0x14>
        set_user_level();
    8cc8:	ebfffff5 	bl	8ca4 <set_user_level>
        // of stuff.
        // assert(!at_user_level());
    }

    // gives uart time to flush: should just call flush directly.
    delay_ms(30);
    8ccc:	e3a0001e 	mov	r0, #30
    8cd0:	eb000026 	bl	8d70 <delay_ms>
    const int PM_WDOG = 0x20100024;
    const int PM_PASSWORD = 0x5a000000;
    const int PM_RSTC_WRCFG_FULL_RESET = 0x00000020;

    // timeout = 1/16th of a second? (whatever)
    PUT32(PM_WDOG, PM_PASSWORD | 1);
    8cd4:	e59f0014 	ldr	r0, [pc, #20]	; 8cf0 <rpi_reboot+0x38>
    8cd8:	e59f1014 	ldr	r1, [pc, #20]	; 8cf4 <rpi_reboot+0x3c>
    8cdc:	eb000035 	bl	8db8 <PUT32>
    PUT32(PM_RSTC, PM_PASSWORD | PM_RSTC_WRCFG_FULL_RESET);
    8ce0:	e59f0010 	ldr	r0, [pc, #16]	; 8cf8 <rpi_reboot+0x40>
    8ce4:	e59f1010 	ldr	r1, [pc, #16]	; 8cfc <rpi_reboot+0x44>
    8ce8:	eb000032 	bl	8db8 <PUT32>
    8cec:	eafffffe 	b	8cec <rpi_reboot+0x34>
    8cf0:	20100024 	andscs	r0, r0, r4, lsr #32
    8cf4:	5a000001 	bpl	8d00 <delay_cycles>
    8cf8:	2010001c 	andscs	r0, r0, ip, lsl r0
    8cfc:	5a000020 	bpl	8d84 <delay_sec>

00008d00 <delay_cycles>:
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    8d00:	ea000001 	b	8d0c <delay_cycles+0xc>
        asm("add r1, r1, #0");
    8d04:	e2811000 	add	r1, r1, #0
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    8d08:	e1a00003 	mov	r0, r3
    8d0c:	e2403001 	sub	r3, r0, #1
    8d10:	e3500000 	cmp	r0, #0
    8d14:	1afffffa 	bne	8d04 <delay_cycles+0x4>
        asm("add r1, r1, #0");
}
    8d18:	e12fff1e 	bx	lr

00008d1c <timer_get_usec_raw>:

// no dev barrier.
unsigned timer_get_usec_raw(void) {
    8d1c:	e92d4008 	push	{r3, lr}
    return GET32(0x20003004);
    8d20:	e59f0004 	ldr	r0, [pc, #4]	; 8d2c <timer_get_usec_raw+0x10>
    8d24:	eb00002f 	bl	8de8 <GET32>
}
    8d28:	e8bd8008 	pop	{r3, pc}
    8d2c:	20003004 	andcs	r3, r0, r4

00008d30 <timer_get_usec>:

// in usec
unsigned timer_get_usec(void) {
    8d30:	e92d4010 	push	{r4, lr}
    dev_barrier();
    8d34:	eb000017 	bl	8d98 <dev_barrier>
    unsigned u = timer_get_usec_raw();
    8d38:	ebfffff7 	bl	8d1c <timer_get_usec_raw>
    8d3c:	e1a04000 	mov	r4, r0
    dev_barrier();
    8d40:	eb000014 	bl	8d98 <dev_barrier>
    return u;
}
    8d44:	e1a00004 	mov	r0, r4
    8d48:	e8bd8010 	pop	{r4, pc}

00008d4c <delay_us>:

void delay_us(unsigned us) {
    8d4c:	e92d4038 	push	{r3, r4, r5, lr}
    8d50:	e1a05000 	mov	r5, r0
    unsigned rb = timer_get_usec();
    8d54:	ebfffff5 	bl	8d30 <timer_get_usec>
    8d58:	e1a04000 	mov	r4, r0
    while (1) {
        unsigned ra = timer_get_usec();
    8d5c:	ebfffff3 	bl	8d30 <timer_get_usec>
        if ((ra - rb) >= us) {
    8d60:	e0640000 	rsb	r0, r4, r0
    8d64:	e1500005 	cmp	r0, r5
    8d68:	3afffffb 	bcc	8d5c <delay_us+0x10>
            break;
        }
    }
}
    8d6c:	e8bd8038 	pop	{r3, r4, r5, pc}

00008d70 <delay_ms>:
void delay_ms(unsigned ms) {
    8d70:	e92d4008 	push	{r3, lr}
    delay_us(ms*1000);
    8d74:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    8d78:	e0000093 	mul	r0, r3, r0
    8d7c:	ebfffff2 	bl	8d4c <delay_us>
    8d80:	e8bd8008 	pop	{r3, pc}

00008d84 <delay_sec>:
}
void delay_sec(unsigned sec) {
    8d84:	e92d4008 	push	{r3, lr}
    delay_ms(sec*1000);
    8d88:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    8d8c:	e0000093 	mul	r0, r3, r0
    8d90:	ebfffff6 	bl	8d70 <delay_ms>
    8d94:	e8bd8008 	pop	{r3, pc}

00008d98 <dev_barrier>:
    8d98:	ea000002 	b	8da8 <dsb>

00008d9c <dmb>:
    8d9c:	e3a00000 	mov	r0, #0
    8da0:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
    8da4:	e12fff1e 	bx	lr

00008da8 <dsb>:
    8da8:	ee070f9a 	mcr	15, 0, r0, cr7, cr10, {4}
    8dac:	e12fff1e 	bx	lr

00008db0 <put32>:
    8db0:	e5801000 	str	r1, [r0]
    8db4:	e12fff1e 	bx	lr

00008db8 <PUT32>:
    8db8:	e5801000 	str	r1, [r0]
    8dbc:	e12fff1e 	bx	lr

00008dc0 <put16>:
    8dc0:	e1c010b0 	strh	r1, [r0]
    8dc4:	e12fff1e 	bx	lr

00008dc8 <PUT16>:
    8dc8:	e1c010b0 	strh	r1, [r0]
    8dcc:	e12fff1e 	bx	lr

00008dd0 <put8>:
    8dd0:	e5c01000 	strb	r1, [r0]
    8dd4:	e12fff1e 	bx	lr

00008dd8 <PUT8>:
    8dd8:	e5c01000 	strb	r1, [r0]
    8ddc:	e12fff1e 	bx	lr

00008de0 <get32>:
    8de0:	e5900000 	ldr	r0, [r0]
    8de4:	e12fff1e 	bx	lr

00008de8 <GET32>:
    8de8:	e5900000 	ldr	r0, [r0]
    8dec:	e12fff1e 	bx	lr

00008df0 <GETPC>:
    8df0:	e1a0000e 	mov	r0, lr
    8df4:	e12fff1e 	bx	lr

00008df8 <dummy>:
    8df8:	e12fff1e 	bx	lr

00008dfc <uart_can_getc>:

	dev_barrier();
}

// 1 = at least one byte on rx queue, 0 otherwise
static int uart_can_getc(void) {
    8dfc:	e92d4008 	push	{r3, lr}
    return get32(AUX_MU_LSR_REG) & RX_READY;
    8e00:	e59f300c 	ldr	r3, [pc, #12]	; 8e14 <uart_can_getc+0x18>
    8e04:	e5930000 	ldr	r0, [r3]
    8e08:	ebfffff4 	bl	8de0 <get32>
}
    8e0c:	e2000001 	and	r0, r0, #1
    8e10:	e8bd8008 	pop	{r3, pc}
    8e14:	00009314 	andeq	r9, r0, r4, lsl r3

00008e18 <uart_init>:
#define RX_READY 0x1
#define TX_READY 0x10
#define TX_EMPTY 0x20

// note: if you need memory barriers, use <dev_barrier()>
void uart_init(void) {
    8e18:	e92d4038 	push	{r3, r4, r5, lr}
    
	dev_barrier();
    8e1c:	ebffffdd 	bl	8d98 <dev_barrier>

	// set GPIO 14 and 15 to alternate function 0
    //volatile unsigned* gpio_reg = (void*) 0x20200004;
    //unsigned bitmask = get32(gpio_reg);
    gpio_set_function(14, GPIO_FUNC_ALT5);
    8e20:	e3a0000e 	mov	r0, #14
    8e24:	e3a01002 	mov	r1, #2
    8e28:	eb0000fd 	bl	9224 <gpio_set_function>
	gpio_set_function(15, GPIO_FUNC_ALT5);
    8e2c:	e3a0000f 	mov	r0, #15
    8e30:	e3a01002 	mov	r1, #2
    8e34:	eb0000fa 	bl	9224 <gpio_set_function>
    //bitmask &= ~(0b111 << ((UART0_RX % 10) * 3));
    //bitmask |= (0b010 << ((UART0_TX % 10) * 3));
    //bitmask |= (0b010 << ((UART0_RX % 10) * 3));
    //put32(gpio_reg, bitmask);

	dev_barrier();
    8e38:	ebffffd6 	bl	8d98 <dev_barrier>

    put32(AUX_ENABLES, get32(AUX_ENABLES) | (ENABLE_UART));
    8e3c:	e59f4068 	ldr	r4, [pc, #104]	; 8eac <uart_init+0x94>
    8e40:	e5945004 	ldr	r5, [r4, #4]
    8e44:	e1a00005 	mov	r0, r5
    8e48:	ebffffe4 	bl	8de0 <get32>
    8e4c:	e3801001 	orr	r1, r0, #1
    8e50:	e1a00005 	mov	r0, r5
    8e54:	ebffffd5 	bl	8db0 <put32>
	
	dev_barrier();
    8e58:	ebffffce 	bl	8d98 <dev_barrier>
	
    put32(AUX_MU_CNTL_REG, 0x0);
    8e5c:	e5940008 	ldr	r0, [r4, #8]
    8e60:	e3a01000 	mov	r1, #0
    8e64:	ebffffd1 	bl	8db0 <put32>
    put32(AUX_MU_IER_REG, 0x0);
    8e68:	e594000c 	ldr	r0, [r4, #12]
    8e6c:	e3a01000 	mov	r1, #0
    8e70:	ebffffce 	bl	8db0 <put32>
    put32(AUX_MU_IIR_REG, CLEAR_RX_FIFO | CLEAR_TX_FIFO);
    8e74:	e5940010 	ldr	r0, [r4, #16]
    8e78:	e3a01006 	mov	r1, #6
    8e7c:	ebffffcb 	bl	8db0 <put32>
	put32(AUX_MU_LCR_REG, ENABLE_8BIT_MODE);
    8e80:	e5940014 	ldr	r0, [r4, #20]
    8e84:	e3a01003 	mov	r1, #3
    8e88:	ebffffc8 	bl	8db0 <put32>
    put32(AUX_MU_BAUD_REG, BAUD_115200);
    8e8c:	e5940018 	ldr	r0, [r4, #24]
    8e90:	e59f1018 	ldr	r1, [pc, #24]	; 8eb0 <uart_init+0x98>
    8e94:	ebffffc5 	bl	8db0 <put32>
    put32(AUX_MU_CNTL_REG, ENABLE_TXER | ENABLE_RXER);
    8e98:	e5940008 	ldr	r0, [r4, #8]
    8e9c:	e3a01003 	mov	r1, #3
    8ea0:	ebffffc2 	bl	8db0 <put32>

	dev_barrier();
    8ea4:	ebffffbb 	bl	8d98 <dev_barrier>
    8ea8:	e8bd8038 	pop	{r3, r4, r5, pc}
    8eac:	00009314 	andeq	r9, r0, r4, lsl r3
    8eb0:	0000010e 	andeq	r0, r0, lr, lsl #2

00008eb4 <uart_getc>:
    return get32(AUX_MU_LSR_REG) & RX_READY;
}

// returns one byte from the rx queue, if needed
// blocks until there is one.
int uart_getc(void) {
    8eb4:	e92d4008 	push	{r3, lr}
    while(1)
        if(uart_can_getc())  break;
    8eb8:	ebffffcf 	bl	8dfc <uart_can_getc>
    8ebc:	e3500000 	cmp	r0, #0
    8ec0:	0afffffc 	beq	8eb8 <uart_getc+0x4>
    return get32(AUX_MU_IO_REG) & 0xFF;
    8ec4:	e59f300c 	ldr	r3, [pc, #12]	; 8ed8 <uart_getc+0x24>
    8ec8:	e593001c 	ldr	r0, [r3, #28]
    8ecc:	ebffffc3 	bl	8de0 <get32>
}
    8ed0:	e6ef0070 	uxtb	r0, r0
    8ed4:	e8bd8008 	pop	{r3, pc}
    8ed8:	00009314 	andeq	r9, r0, r4, lsl r3

00008edc <uart_can_putc>:

// 1 = space to put at least one byte, 0 otherwise.
int uart_can_putc(void) {
    8edc:	e92d4008 	push	{r3, lr}
    return get32(AUX_MU_LSR_REG) & TX_EMPTY;
    8ee0:	e59f300c 	ldr	r3, [pc, #12]	; 8ef4 <uart_can_putc+0x18>
    8ee4:	e5930000 	ldr	r0, [r3]
    8ee8:	ebffffbc 	bl	8de0 <get32>
}
    8eec:	e2000020 	and	r0, r0, #32
    8ef0:	e8bd8008 	pop	{r3, pc}
    8ef4:	00009314 	andeq	r9, r0, r4, lsl r3

00008ef8 <uart_putc>:

// put one byte on the tx qqueue, if needed, blocks
// until TX has space.
void uart_putc(unsigned c) {
    8ef8:	e92d4010 	push	{r4, lr}
    8efc:	e1a04000 	mov	r4, r0
    while(1)
            if(uart_can_putc())  break;
    8f00:	ebfffff5 	bl	8edc <uart_can_putc>
    8f04:	e3500000 	cmp	r0, #0
    8f08:	0afffffc 	beq	8f00 <uart_putc+0x8>
    put32(AUX_MU_IO_REG, c);
    8f0c:	e59f300c 	ldr	r3, [pc, #12]	; 8f20 <uart_putc+0x28>
    8f10:	e593001c 	ldr	r0, [r3, #28]
    8f14:	e1a01004 	mov	r1, r4
    8f18:	ebffffa4 	bl	8db0 <put32>
    8f1c:	e8bd8010 	pop	{r4, pc}
    8f20:	00009314 	andeq	r9, r0, r4, lsl r3

00008f24 <uart_has_data>:


// simple wrapper routines useful later.

// a maybe-more intuitive name for clients.
int uart_has_data(void) {
    8f24:	e92d4008 	push	{r3, lr}
    return uart_can_getc();
    8f28:	ebffffb3 	bl	8dfc <uart_can_getc>
}
    8f2c:	e8bd8008 	pop	{r3, pc}

00008f30 <uart_getc_async>:

int uart_getc_async(void) { 
    8f30:	e92d4008 	push	{r3, lr}
    if(!uart_has_data())
    8f34:	ebfffffa 	bl	8f24 <uart_has_data>
    8f38:	e3500000 	cmp	r0, #0
    8f3c:	0a000001 	beq	8f48 <uart_getc_async+0x18>
        return -1;
    return uart_getc();
    8f40:	ebffffdb 	bl	8eb4 <uart_getc>
    8f44:	e8bd8008 	pop	{r3, pc}
    return uart_can_getc();
}

int uart_getc_async(void) { 
    if(!uart_has_data())
        return -1;
    8f48:	e3e00000 	mvn	r0, #0
    return uart_getc();
}
    8f4c:	e8bd8008 	pop	{r3, pc}

00008f50 <gpio_set_output>:
volatile unsigned *GPLEV1 = (void*) 0x20200038;
// Part 1 implement gpio_set_on, gpio_set_off, gpio_set_output

// set <pin> to be an output pin.  note: fsel0, fsel1, fsel2 are contiguous in memory,
// so you can use array calculations!
void gpio_set_output(unsigned pin) {
    8f50:	e92d4038 	push	{r3, r4, r5, lr}
    8f54:	e1a04000 	mov	r4, r0
    // implement this
    // use gpio_fsel0
    
    if (pin >= 32) {
    8f58:	e350001f 	cmp	r0, #31
    8f5c:	88bd8038 	pophi	{r3, r4, r5, pc}
        return;
    }
    
    volatile unsigned* gpio_reg;
    
    unsigned reg_select = pin / 10;
    8f60:	e59f30b4 	ldr	r3, [pc, #180]	; 901c <gpio_set_output+0xcc>
    8f64:	e0832093 	umull	r2, r3, r3, r0
    8f68:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    8f6c:	e3530005 	cmp	r3, #5
    8f70:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    8f74:	ea000017 	b	8fd8 <gpio_set_output+0x88>
    8f78:	00008f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
    8f7c:	00008f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
    8f80:	00008fa8 	andeq	r8, r0, r8, lsr #31
    8f84:	00008fb4 			; <UNDEFINED> instruction: 0x00008fb4
    8f88:	00008fc0 	andeq	r8, r0, r0, asr #31
    8f8c:	00008fcc 	andeq	r8, r0, ip, asr #31
        case 0: {gpio_reg = GPFSEL0; break;}
    8f90:	e59f3088 	ldr	r3, [pc, #136]	; 9020 <gpio_set_output+0xd0>
    8f94:	e5935000 	ldr	r5, [r3]
    8f98:	ea00000f 	b	8fdc <gpio_set_output+0x8c>
        case 1: {gpio_reg = GPFSEL1; break;}
    8f9c:	e59f307c 	ldr	r3, [pc, #124]	; 9020 <gpio_set_output+0xd0>
    8fa0:	e5935004 	ldr	r5, [r3, #4]
    8fa4:	ea00000c 	b	8fdc <gpio_set_output+0x8c>
        case 2: {gpio_reg = GPFSEL2; break;}
    8fa8:	e59f3070 	ldr	r3, [pc, #112]	; 9020 <gpio_set_output+0xd0>
    8fac:	e5935008 	ldr	r5, [r3, #8]
    8fb0:	ea000009 	b	8fdc <gpio_set_output+0x8c>
        case 3: {gpio_reg = GPFSEL3; break;}
    8fb4:	e59f3064 	ldr	r3, [pc, #100]	; 9020 <gpio_set_output+0xd0>
    8fb8:	e593500c 	ldr	r5, [r3, #12]
    8fbc:	ea000006 	b	8fdc <gpio_set_output+0x8c>
        case 4: {gpio_reg = GPFSEL4; break;}
    8fc0:	e59f3058 	ldr	r3, [pc, #88]	; 9020 <gpio_set_output+0xd0>
    8fc4:	e5935010 	ldr	r5, [r3, #16]
    8fc8:	ea000003 	b	8fdc <gpio_set_output+0x8c>
        case 5: {gpio_reg = GPFSEL5; break;}
    8fcc:	e59f304c 	ldr	r3, [pc, #76]	; 9020 <gpio_set_output+0xd0>
    8fd0:	e5935014 	ldr	r5, [r3, #20]
    8fd4:	ea000000 	b	8fdc <gpio_set_output+0x8c>
        default: gpio_reg = 0x0;
    8fd8:	e3a05000 	mov	r5, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    8fdc:	e1a00005 	mov	r0, r5
    8fe0:	ebffff7e 	bl	8de0 <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    8fe4:	e59f1030 	ldr	r1, [pc, #48]	; 901c <gpio_set_output+0xcc>
    8fe8:	e0813491 	umull	r3, r1, r1, r4
    8fec:	e1a011a1 	lsr	r1, r1, #3
    8ff0:	e0811101 	add	r1, r1, r1, lsl #2
    8ff4:	e1a01081 	lsl	r1, r1, #1
    8ff8:	e0611004 	rsb	r1, r1, r4
    8ffc:	e0811081 	add	r1, r1, r1, lsl #1
    9000:	e3a03007 	mov	r3, #7
    9004:	e1c03113 	bic	r3, r0, r3, lsl r1
    bitmask |= (1 << ((pin % 10) * 3));
    put32(gpio_reg, bitmask);
    9008:	e1a00005 	mov	r0, r5
    900c:	e3a02001 	mov	r2, #1
    9010:	e1831112 	orr	r1, r3, r2, lsl r1
    9014:	ebffff65 	bl	8db0 <put32>
    9018:	e8bd8038 	pop	{r3, r4, r5, pc}
    901c:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    9020:	00009348 	andeq	r9, r0, r8, asr #6

00009024 <gpio_set_on>:
    
}


// set GPIO <pin> on.
inline void gpio_set_on(unsigned pin) {
    9024:	e92d4008 	push	{r3, lr}
    // implement this
    // use gpio_set0
    if (pin >= 32) {
    9028:	e350001f 	cmp	r0, #31
    902c:	88bd8008 	pophi	{r3, pc}
    // Get current register value
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPSET0;
    9030:	959f3020 	ldrls	r3, [pc, #32]	; 9058 <gpio_set_on+0x34>
    9034:	95932018 	ldrls	r2, [r3, #24]
        // TODO: why do we not want this statement?
        //bitmask = get32(GPSET0);
    } else {
        gpio_reg = GPSET1;
    9038:	859f3018 	ldrhi	r3, [pc, #24]	; 9058 <gpio_set_on+0x34>
    903c:	8593201c 	ldrhi	r2, [r3, #28]
        //bitmask = get32(GPSET1);
        // TODO: why do we not want this statement?
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    9040:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    9044:	e1a00002 	mov	r0, r2
    9048:	e3a01001 	mov	r1, #1
    904c:	e1a01311 	lsl	r1, r1, r3
    9050:	ebffff56 	bl	8db0 <put32>
    9054:	e8bd8008 	pop	{r3, pc}
    9058:	00009348 	andeq	r9, r0, r8, asr #6

0000905c <gpio_set_off>:
}

// set GPIO <pin> off
inline void gpio_set_off(unsigned pin) {
    905c:	e92d4008 	push	{r3, lr}
    // implement this
    // use gpio_clr0
    if(pin >= 32) {
    9060:	e350001f 	cmp	r0, #31
    9064:	88bd8008 	pophi	{r3, pc}
    }
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPCLR0;
    9068:	959f3020 	ldrls	r3, [pc, #32]	; 9090 <gpio_set_off+0x34>
    906c:	95932020 	ldrls	r2, [r3, #32]
        //bitmask = get32(GPCLR0);
    } else {
        gpio_reg = GPCLR1;
    9070:	859f3018 	ldrhi	r3, [pc, #24]	; 9090 <gpio_set_off+0x34>
    9074:	85932024 	ldrhi	r2, [r3, #36]	; 0x24
        //bitmask = get32(GPCLR1);
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    9078:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    907c:	e1a00002 	mov	r0, r2
    9080:	e3a01001 	mov	r1, #1
    9084:	e1a01311 	lsl	r1, r1, r3
    9088:	ebffff48 	bl	8db0 <put32>
    908c:	e8bd8008 	pop	{r3, pc}
    9090:	00009348 	andeq	r9, r0, r8, asr #6

00009094 <gpio_set_input>:
}

// Part 2: implement gpio_set_input and gpio_read

// set <pin> to input.
void gpio_set_input(unsigned pin) {
    9094:	e92d4038 	push	{r3, r4, r5, lr}
    9098:	e1a04000 	mov	r4, r0
    // implement.
    if(pin >= 32) {
    909c:	e350001f 	cmp	r0, #31
    90a0:	88bd8038 	pophi	{r3, r4, r5, pc}
        return;
    }
    
    volatile unsigned* gpio_reg;
    
    unsigned reg_select = pin / 10;
    90a4:	e59f30ac 	ldr	r3, [pc, #172]	; 9158 <gpio_set_input+0xc4>
    90a8:	e0832093 	umull	r2, r3, r3, r0
    90ac:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    90b0:	e3530005 	cmp	r3, #5
    90b4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    90b8:	ea000017 	b	911c <gpio_set_input+0x88>
    90bc:	000090d4 	ldrdeq	r9, [r0], -r4
    90c0:	000090e0 	andeq	r9, r0, r0, ror #1
    90c4:	000090ec 	andeq	r9, r0, ip, ror #1
    90c8:	000090f8 	strdeq	r9, [r0], -r8
    90cc:	00009104 	andeq	r9, r0, r4, lsl #2
    90d0:	00009110 	andeq	r9, r0, r0, lsl r1
        case 0: {gpio_reg = GPFSEL0; break;}
    90d4:	e59f3080 	ldr	r3, [pc, #128]	; 915c <gpio_set_input+0xc8>
    90d8:	e5935000 	ldr	r5, [r3]
    90dc:	ea00000f 	b	9120 <gpio_set_input+0x8c>
        case 1: {gpio_reg = GPFSEL1; break;}
    90e0:	e59f3074 	ldr	r3, [pc, #116]	; 915c <gpio_set_input+0xc8>
    90e4:	e5935004 	ldr	r5, [r3, #4]
    90e8:	ea00000c 	b	9120 <gpio_set_input+0x8c>
        case 2: {gpio_reg = GPFSEL2; break;}
    90ec:	e59f3068 	ldr	r3, [pc, #104]	; 915c <gpio_set_input+0xc8>
    90f0:	e5935008 	ldr	r5, [r3, #8]
    90f4:	ea000009 	b	9120 <gpio_set_input+0x8c>
        case 3: {gpio_reg = GPFSEL3; break;}
    90f8:	e59f305c 	ldr	r3, [pc, #92]	; 915c <gpio_set_input+0xc8>
    90fc:	e593500c 	ldr	r5, [r3, #12]
    9100:	ea000006 	b	9120 <gpio_set_input+0x8c>
        case 4: {gpio_reg = GPFSEL4; break;}
    9104:	e59f3050 	ldr	r3, [pc, #80]	; 915c <gpio_set_input+0xc8>
    9108:	e5935010 	ldr	r5, [r3, #16]
    910c:	ea000003 	b	9120 <gpio_set_input+0x8c>
        case 5: {gpio_reg = GPFSEL5; break;}
    9110:	e59f3044 	ldr	r3, [pc, #68]	; 915c <gpio_set_input+0xc8>
    9114:	e5935014 	ldr	r5, [r3, #20]
    9118:	ea000000 	b	9120 <gpio_set_input+0x8c>
        default: gpio_reg = 0x0;
    911c:	e3a05000 	mov	r5, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    9120:	e1a00005 	mov	r0, r5
    9124:	ebffff2d 	bl	8de0 <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    9128:	e59f1028 	ldr	r1, [pc, #40]	; 9158 <gpio_set_input+0xc4>
    912c:	e0813491 	umull	r3, r1, r1, r4
    9130:	e1a011a1 	lsr	r1, r1, #3
    9134:	e0811101 	add	r1, r1, r1, lsl #2
    9138:	e1a01081 	lsl	r1, r1, #1
    913c:	e0611004 	rsb	r1, r1, r4
    9140:	e0811081 	add	r1, r1, r1, lsl #1
    9144:	e3a03007 	mov	r3, #7
    9148:	e1c01113 	bic	r1, r0, r3, lsl r1
    put32(gpio_reg, bitmask);
    914c:	e1a00005 	mov	r0, r5
    9150:	ebffff16 	bl	8db0 <put32>
    9154:	e8bd8038 	pop	{r3, r4, r5, pc}
    9158:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    915c:	00009348 	andeq	r9, r0, r8, asr #6

00009160 <gpio_read>:
    
    
}

// return the value of <pin>
inline int gpio_read(unsigned pin) {
    9160:	e92d4010 	push	{r4, lr}
    9164:	e1a04000 	mov	r4, r0
    
    if(pin >= 32) {
    9168:	e350001f 	cmp	r0, #31
    916c:	8a00000b 	bhi	91a0 <gpio_read+0x40>
        return -1;
    }
    
    unsigned v = 0;
    
    if (pin <= 31){
    9170:	8a000003 	bhi	9184 <gpio_read+0x24>
        v = get32(GPLEV0);
    9174:	e59f302c 	ldr	r3, [pc, #44]	; 91a8 <gpio_read+0x48>
    9178:	e5930028 	ldr	r0, [r3, #40]	; 0x28
    917c:	ebffff17 	bl	8de0 <get32>
    9180:	ea000002 	b	9190 <gpio_read+0x30>
    } else {
        v = get32(GPLEV1);
    9184:	e59f301c 	ldr	r3, [pc, #28]	; 91a8 <gpio_read+0x48>
    9188:	e593002c 	ldr	r0, [r3, #44]	; 0x2c
    918c:	ebffff13 	bl	8de0 <get32>
    }
    
    return (v & (1 << (pin % 32)));
    9190:	e204401f 	and	r4, r4, #31
    9194:	e3a03001 	mov	r3, #1
    9198:	e0000413 	and	r0, r0, r3, lsl r4
    919c:	e8bd8010 	pop	{r4, pc}

// return the value of <pin>
inline int gpio_read(unsigned pin) {
    
    if(pin >= 32) {
        return -1;
    91a0:	e3e00000 	mvn	r0, #0
    } else {
        v = get32(GPLEV1);
    }
    
    return (v & (1 << (pin % 32)));
}
    91a4:	e8bd8010 	pop	{r4, pc}
    91a8:	00009348 	andeq	r9, r0, r8, asr #6

000091ac <gpio_write>:

// set <pin> to <v> (v \in {0,1})
inline void gpio_write(unsigned pin, unsigned v) {
    91ac:	e92d4008 	push	{r3, lr}
    
    if(pin >= 32) {
    91b0:	e350001f 	cmp	r0, #31
    91b4:	88bd8008 	pophi	{r3, pc}
        return;
    }
    
    if(v)
    91b8:	e3510000 	cmp	r1, #0
    91bc:	0a00000b 	beq	91f0 <gpio_write+0x44>

// set GPIO <pin> on.
inline void gpio_set_on(unsigned pin) {
    // implement this
    // use gpio_set0
    if (pin >= 32) {
    91c0:	e350001f 	cmp	r0, #31
    91c4:	88bd8008 	pophi	{r3, pc}
    // Get current register value
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPSET0;
    91c8:	959f3050 	ldrls	r3, [pc, #80]	; 9220 <gpio_write+0x74>
    91cc:	95932018 	ldrls	r2, [r3, #24]
        // TODO: why do we not want this statement?
        //bitmask = get32(GPSET0);
    } else {
        gpio_reg = GPSET1;
    91d0:	859f3048 	ldrhi	r3, [pc, #72]	; 9220 <gpio_write+0x74>
    91d4:	8593201c 	ldrhi	r2, [r3, #28]
        //bitmask = get32(GPSET1);
        // TODO: why do we not want this statement?
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    91d8:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    91dc:	e1a00002 	mov	r0, r2
    91e0:	e3a01001 	mov	r1, #1
    91e4:	e1a01311 	lsl	r1, r1, r3
    91e8:	ebfffef0 	bl	8db0 <put32>
    91ec:	e8bd8008 	pop	{r3, pc}

// set GPIO <pin> off
inline void gpio_set_off(unsigned pin) {
    // implement this
    // use gpio_clr0
    if(pin >= 32) {
    91f0:	e350001f 	cmp	r0, #31
    91f4:	88bd8008 	pophi	{r3, pc}
    }
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPCLR0;
    91f8:	959f3020 	ldrls	r3, [pc, #32]	; 9220 <gpio_write+0x74>
    91fc:	95932020 	ldrls	r2, [r3, #32]
        //bitmask = get32(GPCLR0);
    } else {
        gpio_reg = GPCLR1;
    9200:	859f3018 	ldrhi	r3, [pc, #24]	; 9220 <gpio_write+0x74>
    9204:	85932024 	ldrhi	r2, [r3, #36]	; 0x24
        //bitmask = get32(GPCLR1);
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    9208:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    920c:	e1a00002 	mov	r0, r2
    9210:	e3a01001 	mov	r1, #1
    9214:	e1a01311 	lsl	r1, r1, r3
    9218:	ebfffee4 	bl	8db0 <put32>
    921c:	e8bd8008 	pop	{r3, pc}
    9220:	00009348 	andeq	r9, r0, r8, asr #6

00009224 <gpio_set_function>:
        gpio_set_on(pin);
    else
        gpio_set_off(pin);
}

void gpio_set_function(unsigned pin, gpio_func_t func) {
    9224:	e92d4070 	push	{r4, r5, r6, lr}
    9228:	e1a04000 	mov	r4, r0
    922c:	e1a05001 	mov	r5, r1
    // implement this
    // use gpio_fsel0
    
    if (pin >= 32 || func >= 8) {
    9230:	e3510007 	cmp	r1, #7
    9234:	9350001f 	cmpls	r0, #31
    9238:	88bd8070 	pophi	{r4, r5, r6, pc}
        return;
    }

    volatile unsigned* gpio_reg;
    unsigned reg_select = pin / 10;
    923c:	e59f30b0 	ldr	r3, [pc, #176]	; 92f4 <gpio_set_function+0xd0>
    9240:	e0832093 	umull	r2, r3, r3, r0
    9244:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    9248:	e3530005 	cmp	r3, #5
    924c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    9250:	ea000017 	b	92b4 <gpio_set_function+0x90>
    9254:	0000926c 	andeq	r9, r0, ip, ror #4
    9258:	00009278 	andeq	r9, r0, r8, ror r2
    925c:	00009284 	andeq	r9, r0, r4, lsl #5
    9260:	00009290 	muleq	r0, r0, r2
    9264:	0000929c 	muleq	r0, ip, r2
    9268:	000092a8 	andeq	r9, r0, r8, lsr #5
        case 0: {gpio_reg = GPFSEL0; break;}
    926c:	e59f3084 	ldr	r3, [pc, #132]	; 92f8 <gpio_set_function+0xd4>
    9270:	e5936000 	ldr	r6, [r3]
    9274:	ea00000f 	b	92b8 <gpio_set_function+0x94>
        case 1: {gpio_reg = GPFSEL1; break;}
    9278:	e59f3078 	ldr	r3, [pc, #120]	; 92f8 <gpio_set_function+0xd4>
    927c:	e5936004 	ldr	r6, [r3, #4]
    9280:	ea00000c 	b	92b8 <gpio_set_function+0x94>
        case 2: {gpio_reg = GPFSEL2; break;}
    9284:	e59f306c 	ldr	r3, [pc, #108]	; 92f8 <gpio_set_function+0xd4>
    9288:	e5936008 	ldr	r6, [r3, #8]
    928c:	ea000009 	b	92b8 <gpio_set_function+0x94>
        case 3: {gpio_reg = GPFSEL3; break;}
    9290:	e59f3060 	ldr	r3, [pc, #96]	; 92f8 <gpio_set_function+0xd4>
    9294:	e593600c 	ldr	r6, [r3, #12]
    9298:	ea000006 	b	92b8 <gpio_set_function+0x94>
        case 4: {gpio_reg = GPFSEL4; break;}
    929c:	e59f3054 	ldr	r3, [pc, #84]	; 92f8 <gpio_set_function+0xd4>
    92a0:	e5936010 	ldr	r6, [r3, #16]
    92a4:	ea000003 	b	92b8 <gpio_set_function+0x94>
        case 5: {gpio_reg = GPFSEL5; break;}
    92a8:	e59f3048 	ldr	r3, [pc, #72]	; 92f8 <gpio_set_function+0xd4>
    92ac:	e5936014 	ldr	r6, [r3, #20]
    92b0:	ea000000 	b	92b8 <gpio_set_function+0x94>
        default: gpio_reg = 0x0;
    92b4:	e3a06000 	mov	r6, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    92b8:	e1a00006 	mov	r0, r6
    92bc:	ebfffec7 	bl	8de0 <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    92c0:	e59f302c 	ldr	r3, [pc, #44]	; 92f4 <gpio_set_function+0xd0>
    92c4:	e0832493 	umull	r2, r3, r3, r4
    92c8:	e1a031a3 	lsr	r3, r3, #3
    92cc:	e0833103 	add	r3, r3, r3, lsl #2
    92d0:	e1a03083 	lsl	r3, r3, #1
    92d4:	e0633004 	rsb	r3, r3, r4
    92d8:	e0833083 	add	r3, r3, r3, lsl #1
    92dc:	e3a01007 	mov	r1, #7
    92e0:	e1c01311 	bic	r1, r0, r1, lsl r3
    bitmask |= (func << ((pin % 10) * 3));
    put32(gpio_reg, bitmask);
    92e4:	e1a00006 	mov	r0, r6
    92e8:	e1811315 	orr	r1, r1, r5, lsl r3
    92ec:	ebfffeaf 	bl	8db0 <put32>
    92f0:	e8bd8070 	pop	{r4, r5, r6, pc}
    92f4:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    92f8:	00009348 	andeq	r9, r0, r8, asr #6

000092fc <internal_putchar>:
#include "rpi.h"

static int internal_putchar(int c) { uart_putc(c); return c; }
    92fc:	e92d4010 	push	{r4, lr}
    9300:	e1a04000 	mov	r4, r0
    9304:	ebfffefb 	bl	8ef8 <uart_putc>
    9308:	e1a00004 	mov	r0, r4
    930c:	e8bd8010 	pop	{r4, pc}

Disassembly of section .data:

00009310 <putk>:
    9310:	000086ec 	andeq	r8, r0, ip, ror #13

00009314 <AUX_MU_LSR_REG>:
    9314:	20215054 	eorcs	r5, r1, r4, asr r0

00009318 <AUX_ENABLES>:
    9318:	20215004 	eorcs	r5, r1, r4

0000931c <AUX_MU_CNTL_REG>:
    931c:	20215060 	eorcs	r5, r1, r0, rrx

00009320 <AUX_MU_IER_REG>:
    9320:	20215044 	eorcs	r5, r1, r4, asr #32

00009324 <AUX_MU_IIR_REG>:
    9324:	20215048 	eorcs	r5, r1, r8, asr #32

00009328 <AUX_MU_LCR_REG>:
    9328:	2021504c 	eorcs	r5, r1, ip, asr #32

0000932c <AUX_MU_BAUD_REG>:
    932c:	20215068 	eorcs	r5, r1, r8, rrx

00009330 <AUX_MU_IO_REG>:
    9330:	20215040 	eorcs	r5, r1, r0, asr #32

00009334 <AUX_MU_STAT_REG>:
    9334:	20215064 	eorcs	r5, r1, r4, rrx

00009338 <AUX_MU_SCRATCH>:
    9338:	2021505c 	eorcs	r5, r1, ip, asr r0

0000933c <AUX_MU_MSR_REG>:
    933c:	20215058 	eorcs	r5, r1, r8, asr r0

00009340 <AUX_MU_MCR_REG>:
    9340:	20215050 	eorcs	r5, r1, r0, asr r0

00009344 <AUX_IRQ>:
    9344:	20215000 	eorcs	r5, r1, r0

00009348 <GPFSEL0>:
    9348:	20200000 	eorcs	r0, r0, r0

0000934c <GPFSEL1>:
    934c:	20200004 	eorcs	r0, r0, r4

00009350 <GPFSEL2>:
    9350:	20200008 	eorcs	r0, r0, r8

00009354 <GPFSEL3>:
    9354:	2020000c 	eorcs	r0, r0, ip

00009358 <GPFSEL4>:
    9358:	20200010 	eorcs	r0, r0, r0, lsl r0

0000935c <GPFSEL5>:
    935c:	20200014 	eorcs	r0, r0, r4, lsl r0

00009360 <GPSET0>:
    9360:	2020001c 	eorcs	r0, r0, ip, lsl r0

00009364 <GPSET1>:
    9364:	20200020 	eorcs	r0, r0, r0, lsr #32

00009368 <GPCLR0>:
    9368:	20200028 	eorcs	r0, r0, r8, lsr #32

0000936c <GPCLR1>:
    936c:	2020002c 	eorcs	r0, r0, ip, lsr #32

00009370 <GPLEV0>:
    9370:	20200034 	eorcs	r0, r0, r4, lsr r0

00009374 <GPLEV1>:
    9374:	20200038 	eorcs	r0, r0, r8, lsr r0

00009378 <gpio_clr0>:
    9378:	20200028 	eorcs	r0, r0, r8, lsr #32

0000937c <gpio_set0>:
    937c:	2020001c 	eorcs	r0, r0, ip, lsl r0

00009380 <gpio_fsel0>:
    9380:	20200000 	eorcs	r0, r0, r0

00009384 <rpi_putchar>:
    9384:	000092fc 	strdeq	r9, [r0], -ip

Disassembly of section .rodata:

00009388 <__FUNCTION__.4245-0x34>:
    9388:	203a6425 	eorscs	r6, sl, r5, lsr #8
    938c:	6e696f67 	cdpvs	15, 6, cr6, cr9, cr7, {3}
    9390:	6f742067 	svcvs	0x00742067
    9394:	69727020 	ldmdbvs	r2!, {r5, ip, sp, lr}^
    9398:	6820746e 	stmdavs	r0!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    939c:	6f6c6c65 	svcvs	0x006c6c65
    93a0:	726f7720 	rsbvc	r7, pc, #32, 14	; 0x800000
    93a4:	000a646c 	andeq	r6, sl, ip, ror #8
    93a8:	6c6c6568 	cfstr64vs	mvdx6, [ip], #-416	; 0xfffffe60
    93ac:	6f77206f 	svcvs	0x0077206f
    93b0:	3a646c72 	bcc	1924580 <__bss_end__+0x191ab70>
    93b4:	0a642520 	beq	191283c <__bss_end__+0x1908e2c>
    93b8:	00000000 	andeq	r0, r0, r0

000093bc <__FUNCTION__.4245>:
    93bc:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 8c51 <clean_reboot+0x21>
    93c0:	5f747261 	svcpl	0x00747261
    93c4:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
    93c8:	746e755f 	strbtvc	r7, [lr], #-1375	; 0x55f
    93cc:	00006c69 	andeq	r6, r0, r9, ror #24

000093d0 <__FUNCTION__.4257>:
    93d0:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 8c65 <_cstart+0xd>
    93d4:	5f747261 	svcpl	0x00747261
    93d8:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
    93dc:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    93e0:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
    93e4:	00000000 	andeq	r0, r0, r0

000093e8 <__FUNCTION__.4271>:
    93e8:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 8c7d <_cstart+0x25>
    93ec:	5f747261 	svcpl	0x00747261
    93f0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    93f4:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
    93f8:	00726570 	rsbseq	r6, r2, r0, ror r5

000093fc <__FUNCTION__.4277>:
    93fc:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 8c91 <at_user_level+0x5>
    9400:	5f747261 	svcpl	0x00747261
    9404:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
    9408:	00000000 	andeq	r0, r0, r0

0000940c <__FUNCTION__.4299>:
    940c:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 8ca1 <at_user_level+0x15>
    9410:	5f747261 	svcpl	0x00747261
    9414:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    9418:	00006b74 	andeq	r6, r0, r4, ror fp

0000941c <__FUNCTION__.4307>:
    941c:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 8cb1 <set_user_level+0xd>
    9420:	5f747261 	svcpl	0x00747261
    9424:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
    9428:	746e755f 	strbtvc	r7, [lr], #-1375	; 0x55f
    942c:	625f6c69 	subsvs	r6, pc, #26880	; 0x6900
    9430:	00006b6c 	andeq	r6, r0, ip, ror #22
    9434:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9438:	73253a43 	teqvc	r5, #274432	; 0x43000
    943c:	3a73253a 	bcc	1cd292c <__bss_end__+0x1cc8f1c>
    9440:	6e3a6425 	cdpvs	4, 3, cr6, cr10, cr5, {1}
    9444:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
    9448:	0a303e73 	beq	c18e1c <__bss_end__+0xc0f40c>
    944c:	00000000 	andeq	r0, r0, r0
    9450:	752d7773 	strvc	r7, [sp, #-1907]!	; 0x773
    9454:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    9458:	00000063 	andeq	r0, r0, r3, rrx
    945c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9460:	73253a43 	teqvc	r5, #274432	; 0x43000
    9464:	3a73253a 	bcc	1cd2954 <__bss_end__+0x1cc8f44>
    9468:	283a6425 	ldmdacs	sl!, {r0, r2, r5, sl, sp, lr}
    946c:	207a686d 	rsbscs	r6, sl, sp, ror #16
    9470:	6162202d 	cmnvs	r2, sp, lsr #32
    9474:	20296475 	eorcs	r6, r9, r5, ror r4
    9478:	64203d3c 	strtvs	r3, [r0], #-3388	; 0xd3c
    947c:	76697265 	strbtvc	r7, [r9], -r5, ror #4
    9480:	26206465 	strtcs	r6, [r0], -r5, ror #8
    9484:	65642026 	strbvs	r2, [r4, #-38]!	; 0x26
    9488:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    948c:	3d3c2064 	ldccc	0, cr2, [ip, #-400]!	; 0xfffffe70
    9490:	686d2820 	stmdavs	sp!, {r5, fp, sp}^
    9494:	202b207a 	eorcs	r2, fp, sl, ror r0
    9498:	64756162 	ldrbtvs	r6, [r5], #-354	; 0x162
    949c:	00000a29 	andeq	r0, r0, r9, lsr #20
    94a0:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    94a4:	73253a43 	teqvc	r5, #274432	; 0x43000
    94a8:	3a73253a 	bcc	1cd2998 <__bss_end__+0x1cc8f88>
    94ac:	693a6425 	ldmdbvs	sl!, {r0, r2, r5, sl, sp, lr}
    94b0:	736f706d 	cmnvc	pc, #109	; 0x6d
    94b4:	6c626973 	stclvs	9, cr6, [r2], #-460	; 0xfffffe34
    94b8:	68203a65 	stmdavs	r0!, {r0, r2, r5, r6, r9, fp, ip, sp}
    94bc:	20657661 	rsbcs	r7, r5, r1, ror #12
    94c0:	69206e61 	stmdbvs	r0!, {r0, r5, r6, r9, sl, fp, sp, lr}
    94c4:	6e69666e 	cdpvs	6, 6, cr6, cr9, cr14, {3}
    94c8:	20657469 	rsbcs	r7, r5, r9, ror #8
    94cc:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    94d0:	2174756f 	cmncs	r4, pc, ror #10
    94d4:	00000a0a 	andeq	r0, r0, sl, lsl #20
    94d8:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    94dc:	73253a43 	teqvc	r5, #274432	; 0x43000
    94e0:	3a73253a 	bcc	1cd29d0 <__bss_end__+0x1cc8fc0>
    94e4:	733a6425 	teqvc	sl, #620756992	; 0x25000000
    94e8:	203c207a 	eorscs	r2, ip, sl, ror r0
    94ec:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
    94f0:	6220666f 	eorvs	r6, r0, #116391936	; 0x6f00000
    94f4:	312d6675 	teqcc	sp, r5, ror r6
    94f8:	0000000a 	andeq	r0, r0, sl

000094fc <__FUNCTION__.4197>:
    94fc:	74696d65 	strbtvc	r6, [r9], #-3429	; 0xd65
    9500:	00000000 	andeq	r0, r0, r0

00009504 <__FUNCTION__.4145>:
    9504:	5f697072 	svcpl	0x00697072
    9508:	5f746573 	svcpl	0x00746573
    950c:	7074756f 	rsbsvc	r7, r4, pc, ror #10
    9510:	00007475 	andeq	r7, r0, r5, ror r4

00009514 <__FUNCTION__.4219>:
    9514:	705f6176 	subsvc	r6, pc, r6, ror r1	; <UNPREDICTABLE>
    9518:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    951c:	0000006b 	andeq	r0, r0, fp, rrx
    9520:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9524:	73253a43 	teqvc	r5, #274432	; 0x43000
    9528:	3a73253a 	bcc	1cd2a18 <__bss_end__+0x1cc9008>
    952c:	303a6425 	eorscc	r6, sl, r5, lsr #8
    9530:	0000000a 	andeq	r0, r0, sl
    9534:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    9538:	2d61762f 	stclcs	6, cr7, [r1, #-188]!	; 0xffffff44
    953c:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    9540:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
    9544:	00000000 	andeq	r0, r0, r0
    9548:	33323130 	teqcc	r2, #48, 2
    954c:	37363534 			; <UNDEFINED> instruction: 0x37363534
    9550:	00003938 	andeq	r3, r0, r8, lsr r9
    9554:	33323130 	teqcc	r2, #48, 2
    9558:	37363534 			; <UNDEFINED> instruction: 0x37363534
    955c:	62613938 	rsbvs	r3, r1, #56, 18	; 0xe0000
    9560:	66656463 	strbtvs	r6, [r5], -r3, ror #8
    9564:	00000000 	andeq	r0, r0, r0
    9568:	00003130 	andeq	r3, r0, r0, lsr r1
    956c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9570:	73253a43 	teqvc	r5, #274432	; 0x43000
    9574:	3a73253a 	bcc	1cd2a64 <__bss_end__+0x1cc9054>
    9578:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    957c:	5f637475 	svcpl	0x00637475
    9580:	000a7066 	andeq	r7, sl, r6, rrx
    9584:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9588:	73253a43 	teqvc	r5, #274432	; 0x43000
    958c:	3a73253a 	bcc	1cd2a7c <__bss_end__+0x1cc906c>
    9590:	773a6425 	ldrvc	r6, [sl, -r5, lsr #8]!
    9594:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
    9598:	33203c20 	teqcc	r0, #32, 24	; 0x2000
    959c:	00000a32 	andeq	r0, r0, r2, lsr sl
    95a0:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    95a4:	73253a43 	teqvc	r5, #274432	; 0x43000
    95a8:	3a73253a 	bcc	1cd2a98 <__bss_end__+0x1cc9088>
    95ac:	663a6425 	ldrtvs	r6, [sl], -r5, lsr #8
    95b0:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xf6c
    95b4:	746f6e20 	strbtvc	r6, [pc], #-3616	; 95bc <__FUNCTION__.4219+0xa8>
    95b8:	616e6520 	cmnvs	lr, r0, lsr #10
    95bc:	64656c62 	strbtvs	r6, [r5], #-3170	; 0xc62
    95c0:	0a212121 	beq	851a4c <__bss_end__+0x84803c>
    95c4:	00000000 	andeq	r0, r0, r0
    95c8:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    95cc:	73253a43 	teqvc	r5, #274432	; 0x43000
    95d0:	3a73253a 	bcc	1cd2ac0 <__bss_end__+0x1cc90b0>
    95d4:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    95d8:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    95dc:	6e203a6b 	vnmulvs.f32	s6, s0, s23
    95e0:	6820746f 	stmdavs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
    95e4:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    95e8:	20676e69 	rsbcs	r6, r7, r9, ror #28
    95ec:	63657073 	cmnvs	r5, #115	; 0x73
    95f0:	65696669 	strbvs	r6, [r9, #-1641]!	; 0x669
    95f4:	25272072 	strcs	r2, [r7, #-114]!	; 0x72
    95f8:	0a0a2763 	beq	29338c <__bss_end__+0x28997c>
    95fc:	00000000 	andeq	r0, r0, r0
    9600:	454e4f44 	strbmi	r4, [lr, #-3908]	; 0xf44
    9604:	0a212121 	beq	851a90 <__bss_end__+0x848080>
    9608:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss:

0000960c <__bss_start__>:
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4b5a3605 	blmi	168d82c <__bss_end__+0x1683e1c>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	12010901 	andne	r0, r1, #16384	; 0x4000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0x404
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	22011a01 	andcs	r1, r1, #4096	; 0x1000
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__bss_end__+0x10c7314>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	34202955 	strtcc	r2, [r0], #-2389	; 0x955
   c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000022a 	andeq	r0, r0, sl, lsr #4
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000022 	andeq	r0, r0, r2, lsr #32
      10:	0000d101 	andeq	sp, r0, r1, lsl #2
      14:	00014400 	andeq	r4, r1, r0, lsl #8
      18:	00801000 	addeq	r1, r0, r0
      1c:	00008400 	andeq	r8, r0, r0, lsl #8
      20:	00000000 	andeq	r0, r0, r0
      24:	05040200 	streq	r0, [r4, #-512]	; 0x200
      28:	00746e69 	rsbseq	r6, r4, r9, ror #28
      2c:	f3070403 	vshl.u8	d0, d3, d7
      30:	03000000 	movweq	r0, #0
      34:	009c0601 	addseq	r0, ip, r1, lsl #12
      38:	02030000 	andeq	r0, r3, #0
      3c:	00012405 	andeq	r2, r1, r5, lsl #8
      40:	05040300 	streq	r0, [r4, #-768]	; 0x300
      44:	0000011b 	andeq	r0, r0, fp, lsl r1
      48:	16050803 	strne	r0, [r5], -r3, lsl #16
      4c:	04000001 	streq	r0, [r0], #-1
      50:	00000100 	andeq	r0, r0, r0, lsl #2
      54:	005a2e02 	subseq	r2, sl, r2, lsl #28
      58:	01030000 	mrseq	r0, (UNDEF: 3)
      5c:	00009a08 	andeq	r9, r0, r8, lsl #20
      60:	07020300 	streq	r0, [r2, -r0, lsl #6]
      64:	000000be 	strheq	r0, [r0], -lr
      68:	00013b04 	andeq	r3, r1, r4, lsl #22
      6c:	73340200 	teqvc	r4, #0, 4
      70:	03000000 	movweq	r0, #0
      74:	00ee0704 	rsceq	r0, lr, r4, lsl #14
      78:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
      7c:	0000e907 	andeq	lr, r0, r7, lsl #18
      80:	07040300 	streq	r0, [r4, -r0, lsl #6]
      84:	0000010d 	andeq	r0, r0, sp, lsl #2
      88:	a3080103 	movwge	r0, #33027	; 0x8103
      8c:	05000000 	streq	r0, [r0, #-0]
      90:	00009504 	andeq	r9, r0, r4, lsl #10
      94:	00880600 	addeq	r0, r8, r0, lsl #12
      98:	0c070000 	stceq	0, cr0, [r7], {-0}
      9c:	00d10e03 	sbcseq	r0, r1, r3, lsl #28
      a0:	74080000 	strvc	r0, [r8], #-0
      a4:	0f030078 	svceq	0x00030078
      a8:	0000004f 	andeq	r0, r0, pc, asr #32
      ac:	78720800 	ldmdavc	r2!, {fp}^
      b0:	4f0f0300 	svcmi	0x000f0300
      b4:	01000000 	mrseq	r0, (UNDEF: 0)
      b8:	00010809 	andeq	r0, r1, r9, lsl #16
      bc:	68100300 	ldmdavs	r0, {r8, r9}
      c0:	04000000 	streq	r0, [r0], #-0
      c4:	00000009 	andeq	r0, r0, r9
      c8:	68110300 	ldmdavs	r1, {r8, r9}
      cc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
      d0:	00df0400 	sbcseq	r0, pc, r0, lsl #8
      d4:	12030000 	andne	r0, r3, #0
      d8:	0000009a 	muleq	r0, sl, r0
      dc:	0000790a 	andeq	r7, r0, sl, lsl #18
      e0:	10060100 	andne	r0, r6, r0, lsl #2
      e4:	84000080 	strhi	r0, [r0], #-128	; 0x80
      e8:	01000000 	mrseq	r0, (UNDEF: 0)
      ec:	0001ac9c 	muleq	r1, ip, ip
      f0:	00750b00 	rsbseq	r0, r5, r0, lsl #22
      f4:	00d10b01 	sbcseq	r0, r1, r1, lsl #22
      f8:	91020000 	mrsls	r0, (UNDEF: 2)
      fc:	803c0c5c 	eorshi	r0, ip, ip, asr ip
     100:	00440000 	subeq	r0, r4, r0
     104:	01620000 	cmneq	r2, r0
     108:	690d0000 	stmdbvs	sp, {}	; <UNPREDICTABLE>
     10c:	250d0100 	strcs	r0, [sp, #-256]	; 0x100
     110:	00000000 	andeq	r0, r0, r0
     114:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     118:	0000805c 	andeq	r8, r0, ip, asr r0
     11c:	000001ac 	andeq	r0, r0, ip, lsr #3
     120:	00000131 	andeq	r0, r0, r1, lsr r1
     124:	0251010f 	subseq	r0, r1, #-1073741821	; 0xc0000003
     128:	010f0074 	tsteq	pc, r4, ror r0	; <UNPREDICTABLE>
     12c:	00770250 	rsbseq	r0, r7, r0, asr r2
     130:	806c0e00 	rsbhi	r0, ip, r0, lsl #28
     134:	01c20000 	biceq	r0, r2, r0
     138:	01510000 	cmpeq	r1, r0
     13c:	010f0000 	mrseq	r0, CPSR
     140:	00740252 	rsbseq	r0, r4, r2, asr r2
     144:	0251010f 	subseq	r0, r1, #-1073741821	; 0xc0000003
     148:	010f0076 	tsteq	pc, r6, ror r0	; <UNPREDICTABLE>
     14c:	54910250 	ldrpl	r0, [r1], #592	; 0x250
     150:	80741000 	rsbshi	r1, r4, r0
     154:	01e30000 	mvneq	r0, r0
     158:	010f0000 	mrseq	r0, CPSR
     15c:	00750250 	rsbseq	r0, r5, r0, asr r2
     160:	1c110000 	ldcne	0, cr0, [r1], {-0}
     164:	f4000080 	vst4.32	{d0-d3}, [r0], r0
     168:	11000001 	tstne	r0, r1
     16c:	00008020 	andeq	r8, r0, r0, lsr #32
     170:	000001fb 	strdeq	r0, [r0], -fp
     174:	00803c0e 	addeq	r3, r0, lr, lsl #24
     178:	00020200 	andeq	r0, r2, r0, lsl #4
     17c:	0001a200 	andeq	sl, r1, r0, lsl #4
     180:	53010f00 	movwpl	r0, #7936	; 0x1f00
     184:	39e10804 	stmibcc	r1!, {r2, fp}^
     188:	52010f24 	andpl	r0, r1, #36, 30	; 0x90
     18c:	010f4501 	tsteq	pc, r1, lsl #10
     190:	0f440151 	svceq	0x00440151
     194:	91025001 	tstls	r2, r1
     198:	7d020f54 	stcvc	15, cr0, [r2, #-336]	; 0xfffffeb0
     19c:	bc0a0300 	stclt	3, cr0, [sl], {-0}
     1a0:	84110017 	ldrhi	r0, [r1], #-23
     1a4:	26000080 	strcs	r0, [r0], -r0, lsl #1
     1a8:	00000002 	andeq	r0, r0, r2
     1ac:	00025312 	andeq	r5, r2, r2, lsl r3
     1b0:	25270400 	strcs	r0, [r7, #-1024]!	; 0x400
     1b4:	c2000000 	andgt	r0, r0, #0
     1b8:	13000001 	movwne	r0, #1
     1bc:	0000008f 	andeq	r0, r0, pc, lsl #1
     1c0:	8b120014 	blhi	480218 <__bss_end__+0x476808>
     1c4:	03000000 	movweq	r0, #0
     1c8:	00002515 	andeq	r2, r0, r5, lsl r5
     1cc:	0001dd00 	andeq	sp, r1, r0, lsl #26
     1d0:	01dd1300 	bicseq	r1, sp, r0, lsl #6
     1d4:	8f130000 	svchi	0x00130000
     1d8:	14000000 	strne	r0, [r0], #-0
     1dc:	d1040500 	tstle	r4, r0, lsl #10
     1e0:	15000000 	strne	r0, [r0, #-0]
     1e4:	000000a8 	andeq	r0, r0, r8, lsr #1
     1e8:	01f44d04 	mvnseq	r4, r4, lsl #26
     1ec:	2c130000 	ldccs	0, cr0, [r3], {-0}
     1f0:	00000000 	andeq	r0, r0, r0
     1f4:	00008116 	andeq	r8, r0, r6, lsl r1
     1f8:	16380400 	ldrtne	r0, [r8], -r0, lsl #8
     1fc:	0000012e 	andeq	r0, r0, lr, lsr #2
     200:	0e128804 	cdpeq	8, 1, cr8, cr2, cr4, {0}
     204:	03000000 	movweq	r0, #0
     208:	0000d11d 	andeq	sp, r0, sp, lsl r1
     20c:	00022600 	andeq	r2, r2, r0, lsl #12
     210:	004f1300 	subeq	r1, pc, r0, lsl #6
     214:	4f130000 	svcmi	0x00130000
     218:	13000000 	movwne	r0, #0
     21c:	00000068 	andeq	r0, r0, r8, rrx
     220:	00006813 	andeq	r6, r0, r3, lsl r8
     224:	b1160000 	tstlt	r6, r0
     228:	04000000 	streq	r0, [r0], #-0
     22c:	11a70063 			; <UNDEFINED> instruction: 0x11a70063
     230:	00040000 	andeq	r0, r4, r0
     234:	00000129 	andeq	r0, r0, r9, lsr #2
     238:	00220104 	eoreq	r0, r2, r4, lsl #2
     23c:	64010000 	strvs	r0, [r1], #-0
     240:	44000002 	strmi	r0, [r0], #-2
     244:	94000001 	strls	r0, [r0], #-1
     248:	00000080 	andeq	r0, r0, r0, lsl #1
     24c:	1a000006 	bne	26c <_start-0x7d94>
     250:	02000001 	andeq	r0, r0, #1
     254:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     258:	04030074 	streq	r0, [r3], #-116	; 0x74
     25c:	0000f307 	andeq	pc, r0, r7, lsl #6
     260:	06010300 	streq	r0, [r1], -r0, lsl #6
     264:	0000009c 	muleq	r0, ip, r0
     268:	24050203 	strcs	r0, [r5], #-515	; 0x203
     26c:	03000001 	movweq	r0, #1
     270:	011b0504 	tsteq	fp, r4, lsl #10
     274:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     278:	00011605 	andeq	r1, r1, r5, lsl #12
     27c:	01000400 	tsteq	r0, r0, lsl #8
     280:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
     284:	0000005a 	andeq	r0, r0, sl, asr r0
     288:	9a080103 	bls	20069c <__bss_end__+0x1f6c8c>
     28c:	03000000 	movweq	r0, #0
     290:	00be0702 	adcseq	r0, lr, r2, lsl #14
     294:	3b040000 	blcc	10029c <__bss_end__+0xf688c>
     298:	03000001 	movweq	r0, #1
     29c:	00007334 	andeq	r7, r0, r4, lsr r3
     2a0:	07040300 	streq	r0, [r4, -r0, lsl #6]
     2a4:	000000ee 	andeq	r0, r0, lr, ror #1
     2a8:	e9070803 	stmdb	r7, {r0, r1, fp}
     2ac:	03000000 	movweq	r0, #0
     2b0:	010d0704 	tsteq	sp, r4, lsl #14
     2b4:	04050000 	streq	r0, [r5], #-0
     2b8:	00900406 	addseq	r0, r0, r6, lsl #8
     2bc:	01030000 	mrseq	r0, (UNDEF: 3)
     2c0:	0000a308 	andeq	sl, r0, r8, lsl #6
     2c4:	9d040600 	stcls	6, cr0, [r4, #-0]
     2c8:	07000000 	streq	r0, [r0, -r0]
     2cc:	00000090 	muleq	r0, r0, r0
     2d0:	0e040c08 	cdpeq	12, 0, cr0, cr4, cr8, {0}
     2d4:	000000d9 	ldrdeq	r0, [r0], -r9
     2d8:	00787409 	rsbseq	r7, r8, r9, lsl #8
     2dc:	004f0f04 	subeq	r0, pc, r4, lsl #30
     2e0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     2e4:	04007872 	streq	r7, [r0], #-2162	; 0x872
     2e8:	00004f0f 	andeq	r4, r0, pc, lsl #30
     2ec:	080a0100 	stmdaeq	sl, {r8}
     2f0:	04000001 	streq	r0, [r0], #-1
     2f4:	00006810 	andeq	r6, r0, r0, lsl r8
     2f8:	000a0400 	andeq	r0, sl, r0, lsl #8
     2fc:	04000000 	streq	r0, [r0], #-0
     300:	00006811 	andeq	r6, r0, r1, lsl r8
     304:	04000800 	streq	r0, [r0], #-2048	; 0x800
     308:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     30c:	00a21204 	adceq	r1, r2, r4, lsl #4
     310:	76040000 	strvc	r0, [r4], -r0
     314:	05000002 	streq	r0, [r0, #-2]
     318:	0000ef28 	andeq	lr, r0, r8, lsr #30
     31c:	01ef0b00 	mvneq	r0, r0, lsl #22
     320:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
     324:	00010600 	andeq	r0, r1, r0, lsl #12
     328:	02f70c00 	rscseq	r0, r7, #0, 24
     32c:	00880000 	addeq	r0, r8, r0
     330:	00000000 	andeq	r0, r0, r0
     334:	0001f104 	andeq	pc, r1, r4, lsl #2
     338:	e4620500 	strbt	r0, [r2], #-1280	; 0x500
     33c:	0d000000 	stceq	0, cr0, [r0, #-0]
     340:	0000020e 	andeq	r0, r0, lr, lsl #4
     344:	3f030902 	svccc	0x00030902
     348:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     34c:	00000476 	andeq	r0, r0, r6, ror r4
     350:	002c0902 	eoreq	r0, ip, r2, lsl #18
     354:	6e0f0000 	cdpvs	0, 0, cr0, cr15, cr0, {0}
     358:	2c090200 	sfmcs	f0, 4, [r9], {-0}
     35c:	10000000 	andne	r0, r0, r0
     360:	00029a11 	andeq	r9, r2, r1, lsl sl
     364:	2c0c0200 	sfmcs	f0, 4, [ip], {-0}
     368:	00000000 	andeq	r0, r0, r0
     36c:	01b70d00 			; <UNDEFINED> instruction: 0x01b70d00
     370:	17020000 	strne	r0, [r2, -r0]
     374:	00017603 	andeq	r7, r1, r3, lsl #12
     378:	69700f00 	ldmdbvs	r0!, {r8, r9, sl, fp}^
     37c:	1702006e 	strne	r0, [r2, -lr, rrx]
     380:	0000002c 	andeq	r0, r0, ip, lsr #32
     384:	0200760f 	andeq	r7, r0, #15728640	; 0xf00000
     388:	00002c17 	andeq	r2, r0, r7, lsl ip
     38c:	04760e00 	ldrbteq	r0, [r6], #-3584	; 0xe00
     390:	17020000 	strne	r0, [r2, -r0]
     394:	0000002c 	andeq	r0, r0, ip, lsr #32
     398:	0002140e 	andeq	r1, r2, lr, lsl #8
     39c:	2c170200 	lfmcs	f0, 4, [r7], {-0}
     3a0:	00000000 	andeq	r0, r0, r0
     3a4:	00023612 	andeq	r3, r2, r2, lsl r6
     3a8:	94090100 	strls	r0, [r9], #-256	; 0x100
     3ac:	58000080 	stmdapl	r0, {r7}
     3b0:	01000001 	tsteq	r0, r1
     3b4:	0007559c 	muleq	r7, ip, r5
     3b8:	01a61300 			; <UNDEFINED> instruction: 0x01a61300
     3bc:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
     3c0:	00000755 	andeq	r0, r0, r5, asr r7
     3c4:	0000001f 	andeq	r0, r0, pc, lsl r0
     3c8:	01006314 	tsteq	r0, r4, lsl r3
     3cc:	00005a09 	andeq	r5, r0, r9, lsl #20
     3d0:	00004000 	andeq	r4, r0, r0
     3d4:	78741500 	ldmdavc	r4!, {r8, sl, ip}^
     3d8:	250b0100 	strcs	r0, [fp, #-256]	; 0x100
     3dc:	06000000 	streq	r0, [r0], -r0
     3e0:	ff080076 			; <UNDEFINED> instruction: 0xff080076
     3e4:	6e169f1a 	mrcvs	15, 0, r9, cr6, cr10, {0}
     3e8:	680c0100 	stmdavs	ip, {r8}
     3ec:	61000000 	mrsvs	r0, (UNDEF: 0)
     3f0:	16000000 	strne	r0, [r0], -r0
     3f4:	0d010075 	stceq	0, cr0, [r1, #-468]	; 0xfffffe2c
     3f8:	00000068 	andeq	r0, r0, r8, rrx
     3fc:	00000061 	andeq	r0, r0, r1, rrx
     400:	01007317 	tsteq	r0, r7, lsl r3
     404:	0000680e 	andeq	r6, r0, lr, lsl #16
     408:	6e651600 	cdpvs	6, 6, cr1, cr5, cr0, {0}
     40c:	11010064 	tstne	r1, r4, rrx
     410:	0000002c 	andeq	r0, r0, ip, lsr #32
     414:	00000074 	andeq	r0, r0, r4, ror r0
     418:	00047618 	andeq	r7, r4, r8, lsl r6
     41c:	2c120100 	ldfcss	f0, [r2], {-0}
     420:	01000000 	mrseq	r0, (UNDEF: 0)
     424:	80a41954 	adchi	r1, r4, r4, asr r9
     428:	00040000 	andeq	r0, r4, r0
     42c:	02100000 	andseq	r0, r0, #0
     430:	9a110000 	bls	440438 <__bss_end__+0x436a28>
     434:	01000002 	tsteq	r0, r2
     438:	00002c0e 	andeq	r2, r0, lr, lsl #24
     43c:	a8190000 	ldmdage	r9, {}	; <UNPREDICTABLE>
     440:	04000080 	streq	r0, [r0], #-128	; 0x80
     444:	2b000000 	blcs	44c <_start-0x7bb4>
     448:	18000002 	stmdane	r0, {r1}
     44c:	0000029a 	muleq	r0, sl, r2
     450:	002c1201 	eoreq	r1, ip, r1, lsl #4
     454:	54010000 	strpl	r0, [r1], #-0
     458:	013f1a00 	teqeq	pc, r0, lsl #20
     45c:	80ac0000 	adchi	r0, ip, r0
     460:	001c0000 	andseq	r0, ip, r0
     464:	15010000 	strne	r0, [r1, #-0]
     468:	000002a8 	andeq	r0, r0, r8, lsr #5
     46c:	00016a1b 	andeq	r6, r1, fp, lsl sl
     470:	00009d00 	andeq	r9, r0, r0, lsl #26
     474:	015f1c00 	cmpeq	pc, r0, lsl #24
     478:	54010000 	strpl	r0, [r1], #-0
     47c:	0001561d 	andeq	r5, r1, sp, lsl r6
     480:	4b1c0000 	blmi	700488 <__bss_end__+0x6f6a78>
     484:	01000001 	tsteq	r0, r1
     488:	01111a56 	tsteq	r1, r6, asr sl
     48c:	80b80000 	adcshi	r0, r8, r0
     490:	00100000 	andseq	r0, r0, r0
     494:	1a020000 	bne	8049c <__bss_end__+0x76a8c>
     498:	00000292 	muleq	r0, r2, r2
     49c:	0001281b 	andeq	r2, r1, fp, lsl r8
     4a0:	0000b000 	andeq	fp, r0, r0
     4a4:	011d1c00 	tsteq	sp, r0, lsl #24
     4a8:	54010000 	strpl	r0, [r1], #-0
     4ac:	0080b81e 	addeq	fp, r0, lr, lsl r8
     4b0:	00000400 	andeq	r0, r0, r0, lsl #8
     4b4:	01321f00 	teqeq	r2, r0, lsl #30
     4b8:	00c30000 	sbceq	r0, r3, r0
     4bc:	00000000 	andeq	r0, r0, r0
     4c0:	0080b820 	addeq	fp, r0, r0, lsr #16
     4c4:	00111500 	andseq	r1, r1, r0, lsl #10
     4c8:	51012100 	mrspl	r2, (UNDEF: 17)
     4cc:	01213001 	teqeq	r1, r1
     4d0:	00760250 	rsbseq	r0, r6, r0, asr r2
     4d4:	3f1a0000 	svccc	0x001a0000
     4d8:	cc000001 	stcgt	0, cr0, [r0], {1}
     4dc:	1c000080 	stcne	0, cr0, [r0], {128}	; 0x80
     4e0:	01000000 	mrseq	r0, (UNDEF: 0)
     4e4:	00032b17 	andeq	r2, r3, r7, lsl fp
     4e8:	016a1b00 	cmneq	sl, r0, lsl #22
     4ec:	00d60000 	sbcseq	r0, r6, r0
     4f0:	5f1c0000 	svcpl	0x001c0000
     4f4:	01000001 	tsteq	r0, r1
     4f8:	01561b54 	cmpeq	r6, r4, asr fp
     4fc:	00f80000 	rscseq	r0, r8, r0
     500:	4b1c0000 	blmi	700508 <__bss_end__+0x6f6af8>
     504:	01000001 	tsteq	r0, r1
     508:	01111a56 	tsteq	r1, r6, asr sl
     50c:	80d80000 	sbcshi	r0, r8, r0
     510:	00100000 	andseq	r0, r0, r0
     514:	1a020000 	bne	8051c <__bss_end__+0x76b0c>
     518:	00000312 	andeq	r0, r0, r2, lsl r3
     51c:	0001281b 	andeq	r2, r1, fp, lsl r8
     520:	00012900 	andeq	r2, r1, r0, lsl #18
     524:	011d1c00 	tsteq	sp, r0, lsl #24
     528:	54010000 	strpl	r0, [r1], #-0
     52c:	0080d81e 	addeq	sp, r0, lr, lsl r8
     530:	00000400 	andeq	r0, r0, r0, lsl #8
     534:	01321f00 	teqeq	r2, r0, lsl #30
     538:	014b0000 	mrseq	r0, (UNDEF: 75)
     53c:	00000000 	andeq	r0, r0, r0
     540:	0080d820 	addeq	sp, r0, r0, lsr #16
     544:	00111500 	andseq	r1, r1, r0, lsl #10
     548:	51012100 	mrspl	r2, (UNDEF: 17)
     54c:	31007704 	tstcc	r0, r4, lsl #14
     550:	5001211a 	andpl	r2, r1, sl, lsl r1
     554:	00007602 	andeq	r7, r0, r2, lsl #12
     558:	013f1a00 	teqeq	pc, r0, lsl #20
     55c:	80ec0000 	rschi	r0, ip, r0
     560:	001c0000 	andseq	r0, ip, r0
     564:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
     568:	000003b3 			; <UNDEFINED> instruction: 0x000003b3
     56c:	00016a1b 	andeq	r6, r1, fp, lsl sl
     570:	00015e00 	andeq	r5, r1, r0, lsl #28
     574:	015f1c00 	cmpeq	pc, r0, lsl #24
     578:	54010000 	strpl	r0, [r1], #-0
     57c:	0001561c 	andeq	r5, r1, ip, lsl r6
     580:	00770800 	rsbseq	r0, r7, r0, lsl #16
     584:	ff081a32 			; <UNDEFINED> instruction: 0xff081a32
     588:	4b1c9f1a 	blmi	7281f8 <__bss_end__+0x71e7e8>
     58c:	01000001 	tsteq	r0, r1
     590:	01111a56 	tsteq	r1, r6, asr sl
     594:	80f80000 	rscshi	r0, r8, r0
     598:	00100000 	andseq	r0, r0, r0
     59c:	1a020000 	bne	805a4 <__bss_end__+0x76b94>
     5a0:	0000039a 	muleq	r0, sl, r3
     5a4:	0001281b 	andeq	r2, r1, fp, lsl r8
     5a8:	00018300 	andeq	r8, r1, r0, lsl #6
     5ac:	011d1c00 	tsteq	sp, r0, lsl #24
     5b0:	54010000 	strpl	r0, [r1], #-0
     5b4:	0080f81e 	addeq	pc, r0, lr, lsl r8	; <UNPREDICTABLE>
     5b8:	00000400 	andeq	r0, r0, r0, lsl #8
     5bc:	01321f00 	teqeq	r2, r0, lsl #30
     5c0:	01a80000 			; <UNDEFINED> instruction: 0x01a80000
     5c4:	00000000 	andeq	r0, r0, r0
     5c8:	0080f820 	addeq	pc, r0, r0, lsr #16
     5cc:	00111500 	andseq	r1, r1, r0, lsl #10
     5d0:	51012100 	mrspl	r2, (UNDEF: 17)
     5d4:	32007704 	andcc	r7, r0, #4, 14	; 0x100000
     5d8:	5001211a 	andpl	r2, r1, sl, lsl r1
     5dc:	00007602 	andeq	r7, r0, r2, lsl #12
     5e0:	013f1a00 	teqeq	pc, r0, lsl #20
     5e4:	810c0000 	mrshi	r0, (UNDEF: 12)
     5e8:	001c0000 	andseq	r0, ip, r0
     5ec:	1b010000 	blne	405f4 <__bss_end__+0x36be4>
     5f0:	0000043b 	andeq	r0, r0, fp, lsr r4
     5f4:	00016a1b 	andeq	r6, r1, fp, lsl sl
     5f8:	0001bb00 	andeq	fp, r1, r0, lsl #22
     5fc:	015f1c00 	cmpeq	pc, r0, lsl #24
     600:	54010000 	strpl	r0, [r1], #-0
     604:	0001561c 	andeq	r5, r1, ip, lsl r6
     608:	00770800 	rsbseq	r0, r7, r0, lsl #16
     60c:	ff081a34 			; <UNDEFINED> instruction: 0xff081a34
     610:	4b1c9f1a 	blmi	728280 <__bss_end__+0x71e870>
     614:	01000001 	tsteq	r0, r1
     618:	01111a56 	tsteq	r1, r6, asr sl
     61c:	81180000 	tsthi	r8, r0
     620:	00100000 	andseq	r0, r0, r0
     624:	1a020000 	bne	8062c <__bss_end__+0x76c1c>
     628:	00000422 	andeq	r0, r0, r2, lsr #8
     62c:	0001281b 	andeq	r2, r1, fp, lsl r8
     630:	0001dd00 	andeq	sp, r1, r0, lsl #26
     634:	011d1c00 	tsteq	sp, r0, lsl #24
     638:	54010000 	strpl	r0, [r1], #-0
     63c:	0081181e 	addeq	r1, r1, lr, lsl r8
     640:	00000400 	andeq	r0, r0, r0, lsl #8
     644:	01321f00 	teqeq	r2, r0, lsl #30
     648:	01ff0000 	mvnseq	r0, r0
     64c:	00000000 	andeq	r0, r0, r0
     650:	00811820 	addeq	r1, r1, r0, lsr #16
     654:	00111500 	andseq	r1, r1, r0, lsl #10
     658:	51012100 	mrspl	r2, (UNDEF: 17)
     65c:	34007704 	strcc	r7, [r0], #-1796	; 0x704
     660:	5001211a 	andpl	r2, r1, sl, lsl r1
     664:	00007602 	andeq	r7, r0, r2, lsl #12
     668:	013f1a00 	teqeq	pc, r0, lsl #20
     66c:	812c0000 	teqhi	ip, r0
     670:	001c0000 	andseq	r0, ip, r0
     674:	1d010000 	stcne	0, cr0, [r1, #-0]
     678:	000004c3 	andeq	r0, r0, r3, asr #9
     67c:	00016a1b 	andeq	r6, r1, fp, lsl sl
     680:	00021200 	andeq	r1, r2, r0, lsl #4
     684:	015f1c00 	cmpeq	pc, r0, lsl #24
     688:	54010000 	strpl	r0, [r1], #-0
     68c:	0001561c 	andeq	r5, r1, ip, lsl r6
     690:	00770800 	rsbseq	r0, r7, r0, lsl #16
     694:	ff081a38 			; <UNDEFINED> instruction: 0xff081a38
     698:	4b1c9f1a 	blmi	728308 <__bss_end__+0x71e8f8>
     69c:	01000001 	tsteq	r0, r1
     6a0:	01111a56 	tsteq	r1, r6, asr sl
     6a4:	81380000 	teqhi	r8, r0
     6a8:	00100000 	andseq	r0, r0, r0
     6ac:	1a020000 	bne	806b4 <__bss_end__+0x76ca4>
     6b0:	000004aa 	andeq	r0, r0, sl, lsr #9
     6b4:	0001281b 	andeq	r2, r1, fp, lsl r8
     6b8:	00023700 	andeq	r3, r2, r0, lsl #14
     6bc:	011d1c00 	tsteq	sp, r0, lsl #24
     6c0:	54010000 	strpl	r0, [r1], #-0
     6c4:	0081381e 	addeq	r3, r1, lr, lsl r8
     6c8:	00000400 	andeq	r0, r0, r0, lsl #8
     6cc:	01321f00 	teqeq	r2, r0, lsl #30
     6d0:	025c0000 	subseq	r0, ip, #0
     6d4:	00000000 	andeq	r0, r0, r0
     6d8:	00813820 	addeq	r3, r1, r0, lsr #16
     6dc:	00111500 	andseq	r1, r1, r0, lsl #10
     6e0:	51012100 	mrspl	r2, (UNDEF: 17)
     6e4:	38007704 	stmdacc	r0, {r2, r8, r9, sl, ip, sp, lr}
     6e8:	5001211a 	andpl	r2, r1, sl, lsl r1
     6ec:	00007602 	andeq	r7, r0, r2, lsl #12
     6f0:	013f1a00 	teqeq	pc, r0, lsl #20
     6f4:	814c0000 	mrshi	r0, (UNDEF: 76)
     6f8:	001c0000 	andseq	r0, ip, r0
     6fc:	1f010000 	svcne	0x00010000
     700:	0000054b 	andeq	r0, r0, fp, asr #10
     704:	00016a1b 	andeq	r6, r1, fp, lsl sl
     708:	00026f00 	andeq	r6, r2, r0, lsl #30
     70c:	015f1c00 	cmpeq	pc, r0, lsl #24
     710:	54010000 	strpl	r0, [r1], #-0
     714:	0001561c 	andeq	r5, r1, ip, lsl r6
     718:	00770800 	rsbseq	r0, r7, r0, lsl #16
     71c:	ff081a40 			; <UNDEFINED> instruction: 0xff081a40
     720:	4b1c9f1a 	blmi	728390 <__bss_end__+0x71e980>
     724:	01000001 	tsteq	r0, r1
     728:	01111a56 	tsteq	r1, r6, asr sl
     72c:	81580000 	cmphi	r8, r0
     730:	00100000 	andseq	r0, r0, r0
     734:	1a020000 	bne	8073c <__bss_end__+0x76d2c>
     738:	00000532 	andeq	r0, r0, r2, lsr r5
     73c:	0001281b 	andeq	r2, r1, fp, lsl r8
     740:	00029600 	andeq	r9, r2, r0, lsl #12
     744:	011d1c00 	tsteq	sp, r0, lsl #24
     748:	54010000 	strpl	r0, [r1], #-0
     74c:	0081581e 	addeq	r5, r1, lr, lsl r8
     750:	00000400 	andeq	r0, r0, r0, lsl #8
     754:	01321f00 	teqeq	r2, r0, lsl #30
     758:	02bd0000 	adcseq	r0, sp, #0
     75c:	00000000 	andeq	r0, r0, r0
     760:	00815820 	addeq	r5, r1, r0, lsr #16
     764:	00111500 	andseq	r1, r1, r0, lsl #10
     768:	51012100 	mrspl	r2, (UNDEF: 17)
     76c:	40007704 	andmi	r7, r0, r4, lsl #14
     770:	5001211a 	andpl	r2, r1, sl, lsl r1
     774:	00007602 	andeq	r7, r0, r2, lsl #12
     778:	013f1a00 	teqeq	pc, r0, lsl #20
     77c:	816c0000 	cmnhi	ip, r0
     780:	001c0000 	andseq	r0, ip, r0
     784:	21010000 	mrscs	r0, (UNDEF: 1)
     788:	000005d5 	ldrdeq	r0, [r0], -r5
     78c:	00016a1b 	andeq	r6, r1, fp, lsl sl
     790:	0002d000 	andeq	sp, r2, r0
     794:	015f1c00 	cmpeq	pc, r0, lsl #24
     798:	54010000 	strpl	r0, [r1], #-0
     79c:	0001561c 	andeq	r5, r1, ip, lsl r6
     7a0:	00770900 	rsbseq	r0, r7, r0, lsl #18
     7a4:	081a2008 	ldmdaeq	sl, {r3, sp}
     7a8:	1c9f1aff 	vldmiane	pc, {s2-s256}
     7ac:	0000014b 	andeq	r0, r0, fp, asr #2
     7b0:	111a5601 	tstne	sl, r1, lsl #12
     7b4:	78000001 	stmdavc	r0, {r0}
     7b8:	10000081 	andne	r0, r0, r1, lsl #1
     7bc:	02000000 	andeq	r0, r0, #0
     7c0:	0005bb1a 	andeq	fp, r5, sl, lsl fp
     7c4:	01281b00 	teqeq	r8, r0, lsl #22
     7c8:	02fa0000 	rscseq	r0, sl, #0
     7cc:	1d1c0000 	ldcne	0, cr0, [ip, #-0]
     7d0:	01000001 	tsteq	r0, r1
     7d4:	81781e54 	cmnhi	r8, r4, asr lr
     7d8:	00040000 	andeq	r0, r4, r0
     7dc:	321f0000 	andscc	r0, pc, #0
     7e0:	24000001 	strcs	r0, [r0], #-1
     7e4:	00000003 	andeq	r0, r0, r3
     7e8:	81782000 	cmnhi	r8, r0
     7ec:	11150000 	tstne	r5, r0
     7f0:	01210000 	teqeq	r1, r0
     7f4:	00770551 	rsbseq	r0, r7, r1, asr r5
     7f8:	211a2008 	tstcs	sl, r8
     7fc:	76025001 	strvc	r5, [r2], -r1
     800:	1a000000 	bne	808 <_start-0x77f8>
     804:	0000013f 	andeq	r0, r0, pc, lsr r1
     808:	0000818c 	andeq	r8, r0, ip, lsl #3
     80c:	0000001c 	andeq	r0, r0, ip, lsl r0
     810:	065f2301 	ldrbeq	r2, [pc], -r1, lsl #6
     814:	6a1b0000 	bvs	6c081c <__bss_end__+0x6b6e0c>
     818:	37000001 	strcc	r0, [r0, -r1]
     81c:	1c000003 	stcne	0, cr0, [r0], {3}
     820:	0000015f 	andeq	r0, r0, pc, asr r1
     824:	561c5401 	ldrpl	r5, [ip], -r1, lsl #8
     828:	09000001 	stmdbeq	r0, {r0}
     82c:	40080077 	andmi	r0, r8, r7, ror r0
     830:	1aff081a 	bne	fffc28a0 <__bss_end__+0xfffb8e90>
     834:	014b1c9f 			; <UNDEFINED> instruction: 0x014b1c9f
     838:	56010000 	strpl	r0, [r1], -r0
     83c:	0001111a 	andeq	r1, r1, sl, lsl r1
     840:	00819800 	addeq	r9, r1, r0, lsl #16
     844:	00001000 	andeq	r1, r0, r0
     848:	451a0200 	ldrmi	r0, [sl, #-512]	; 0x200
     84c:	1b000006 	blne	86c <_start-0x7794>
     850:	00000128 	andeq	r0, r0, r8, lsr #2
     854:	00000359 	andeq	r0, r0, r9, asr r3
     858:	00011d1c 	andeq	r1, r1, ip, lsl sp
     85c:	1e540100 	rdfnes	f0, f4, f0
     860:	00008198 	muleq	r0, r8, r1
     864:	00000004 	andeq	r0, r0, r4
     868:	0001321f 	andeq	r3, r1, pc, lsl r2
     86c:	00037b00 	andeq	r7, r3, r0, lsl #22
     870:	20000000 	andcs	r0, r0, r0
     874:	00008198 	muleq	r0, r8, r1
     878:	00001115 	andeq	r1, r0, r5, lsl r1
     87c:	05510121 	ldrbeq	r0, [r1, #-289]	; 0x121
     880:	40080077 	andmi	r0, r8, r7, ror r0
     884:	5001211a 	andpl	r2, r1, sl, lsl r1
     888:	00007602 	andeq	r7, r0, r2, lsl #12
     88c:	013f1a00 	teqeq	pc, r0, lsl #20
     890:	81ac0000 			; <UNDEFINED> instruction: 0x81ac0000
     894:	001c0000 	andseq	r0, ip, r0
     898:	25010000 	strcs	r0, [r1, #-0]
     89c:	000006df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     8a0:	00016a1c 	andeq	r6, r1, ip, lsl sl
     8a4:	1c580100 	ldfnee	f0, [r8], {-0}
     8a8:	0000015f 	andeq	r0, r0, pc, asr r1
     8ac:	561b5401 	ldrpl	r5, [fp], -r1, lsl #8
     8b0:	8e000001 	cdphi	0, 0, cr0, cr0, cr1, {0}
     8b4:	1c000003 	stcne	0, cr0, [r0], {3}
     8b8:	0000014b 	andeq	r0, r0, fp, asr #2
     8bc:	111a5601 	tstne	sl, r1, lsl #12
     8c0:	b8000001 	stmdalt	r0, {r0}
     8c4:	10000081 	andne	r0, r0, r1, lsl #1
     8c8:	02000000 	andeq	r0, r0, #0
     8cc:	0006c51a 	andeq	ip, r6, sl, lsl r5
     8d0:	01281c00 	teqeq	r8, r0, lsl #24
     8d4:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
     8d8:	00011d1c 	andeq	r1, r1, ip, lsl sp
     8dc:	1e540100 	rdfnes	f0, f4, f0
     8e0:	000081b8 			; <UNDEFINED> instruction: 0x000081b8
     8e4:	00000004 	andeq	r0, r0, r4
     8e8:	0001321f 	andeq	r3, r1, pc, lsl r2
     8ec:	0003c100 	andeq	ip, r3, r0, lsl #2
     8f0:	20000000 	andcs	r0, r0, r0
     8f4:	000081b8 			; <UNDEFINED> instruction: 0x000081b8
     8f8:	00001115 	andeq	r1, r0, r5, lsl r1
     8fc:	05510121 	ldrbeq	r0, [r1, #-289]	; 0x121
     900:	80080077 	andhi	r0, r8, r7, ror r0
     904:	5001211a 	andpl	r2, r1, sl, lsl r1
     908:	00007602 	andeq	r7, r0, r2, lsl #12
     90c:	013f2200 	teqeq	pc, r0, lsl #4
     910:	81cc0000 	bichi	r0, ip, r0
     914:	001c0000 	andseq	r0, ip, r0
     918:	27010000 	strcs	r0, [r1, -r0]
     91c:	00016a1c 	andeq	r6, r1, ip, lsl sl
     920:	1c550100 	ldfnee	f0, [r5], {-0}
     924:	0000015f 	andeq	r0, r0, pc, asr r1
     928:	561d5401 	ldrpl	r5, [sp], -r1, lsl #8
     92c:	01000001 	tsteq	r0, r1
     930:	00014b1c 	andeq	r4, r1, ip, lsl fp
     934:	1a560100 	bne	1580d3c <__bss_end__+0x157732c>
     938:	00000111 	andeq	r0, r0, r1, lsl r1
     93c:	000081d8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
     940:	00000010 	andeq	r0, r0, r0, lsl r0
     944:	073e1a02 	ldreq	r1, [lr, -r2, lsl #20]!
     948:	281c0000 	ldmdacs	ip, {}	; <UNPREDICTABLE>
     94c:	01000001 	tsteq	r0, r1
     950:	011d1c55 	tsteq	sp, r5, asr ip
     954:	54010000 	strpl	r0, [r1], #-0
     958:	0081d81e 	addeq	sp, r1, lr, lsl r8
     95c:	00000400 	andeq	r0, r0, r0, lsl #8
     960:	01321f00 	teqeq	r2, r0, lsl #30
     964:	03d40000 	bicseq	r0, r4, #0
     968:	00000000 	andeq	r0, r0, r0
     96c:	0081d820 	addeq	sp, r1, r0, lsr #16
     970:	00111500 	andseq	r1, r1, r0, lsl #10
     974:	51012100 	mrspl	r2, (UNDEF: 17)
     978:	01213101 	teqeq	r1, r1, lsl #2
     97c:	00760250 	rsbseq	r0, r6, r0, asr r2
     980:	06000000 	streq	r0, [r0], -r0
     984:	0000d904 	andeq	sp, r0, r4, lsl #18
     988:	030c2300 	movweq	r2, #49920	; 0xc300
     98c:	2b010000 	blcs	40994 <__bss_end__+0x36f84>
     990:	00000025 	andeq	r0, r0, r5, lsr #32
     994:	00079503 	andeq	r9, r7, r3, lsl #10
     998:	78720f00 	ldmdavc	r2!, {r8, r9, sl, fp}^
     99c:	252b0100 	strcs	r0, [fp, #-256]!	; 0x100
     9a0:	0f000000 	svceq	0x00000000
     9a4:	2b010076 	blcs	40b84 <__bss_end__+0x37174>
     9a8:	00000025 	andeq	r0, r0, r5, lsr #32
     9ac:	0002290e 	andeq	r2, r2, lr, lsl #18
     9b0:	2c2b0100 	stfcss	f0, [fp], #-0
     9b4:	11000000 	mrsne	r0, (UNDEF: 0)
     9b8:	00000476 	andeq	r0, r0, r6, ror r4
     9bc:	002c2c01 	eoreq	r2, ip, r1, lsl #24
     9c0:	24000000 	strcs	r0, [r0], #-0
     9c4:	000001c7 	andeq	r0, r0, r7, asr #3
     9c8:	00253801 	eoreq	r3, r5, r1, lsl #16
     9cc:	81ec0000 	mvnhi	r0, r0
     9d0:	01c80000 	biceq	r0, r8, r0
     9d4:	9c010000 	stcls	0, cr0, [r1], {-0}
     9d8:	00000b51 	andeq	r0, r0, r1, asr fp
     9dc:	0001a613 	andeq	sl, r1, r3, lsl r6
     9e0:	55380100 	ldrpl	r0, [r8, #-256]!	; 0x100
     9e4:	e7000007 	str	r0, [r0, -r7]
     9e8:	13000003 	movwne	r0, #3
     9ec:	00000229 	andeq	r0, r0, r9, lsr #4
     9f0:	00253801 	eoreq	r3, r5, r1, lsl #16
     9f4:	042c0000 	strteq	r0, [ip], #-0
     9f8:	72150000 	andsvc	r0, r5, #0
     9fc:	39010078 	stmdbcc	r1, {r3, r4, r5, r6}
     a00:	00000025 	andeq	r0, r0, r5, lsr #32
     a04:	73165501 	tstvc	r6, #4194304	; 0x400000
     a08:	2c400100 	stfcse	f0, [r0], {-0}
     a0c:	4a000000 	bmi	a14 <_start-0x75ec>
     a10:	16000004 	strne	r0, [r0], -r4
     a14:	43010075 	movwmi	r0, #4213	; 0x1075
     a18:	00000068 	andeq	r0, r0, r8, rrx
     a1c:	0000045d 	andeq	r0, r0, sp, asr r4
     a20:	01006e16 	tsteq	r0, r6, lsl lr
     a24:	00002c44 	andeq	r2, r0, r4, asr #24
     a28:	00047000 	andeq	r7, r4, r0
     a2c:	00631600 	rsbeq	r1, r3, r0, lsl #12
     a30:	002c4501 	eoreq	r4, ip, r1, lsl #10
     a34:	04870000 	streq	r0, [r7], #0
     a38:	5b1a0000 	blpl	680a40 <__bss_end__+0x677030>
     a3c:	00000007 	andeq	r0, r0, r7
     a40:	34000082 	strcc	r0, [r0], #-130	; 0x82
     a44:	01000000 	mrseq	r0, (UNDEF: 0)
     a48:	00086f3c 	andeq	r6, r8, ip, lsr pc
     a4c:	077e1b00 	ldrbeq	r1, [lr, -r0, lsl #22]!
     a50:	04b10000 	ldrteq	r0, [r1], #0
     a54:	751d0000 	ldrvc	r0, [sp, #-0]
     a58:	00000007 	andeq	r0, r0, r7
     a5c:	00076b1c 	andeq	r6, r7, ip, lsl fp
     a60:	1e550100 	rdfnes	f0, f5, f0
     a64:	00008200 	andeq	r8, r0, r0, lsl #4
     a68:	00000034 	andeq	r0, r0, r4, lsr r0
     a6c:	0007891f 	andeq	r8, r7, pc, lsl r9
     a70:	0004cf00 	andeq	ip, r4, r0, lsl #30
     a74:	82042500 	andhi	r2, r4, #0, 10
     a78:	112b0000 	teqne	fp, r0
     a7c:	10260000 	eorne	r0, r6, r0
     a80:	36000082 	strcc	r0, [r0], -r2, lsl #1
     a84:	64000011 	strvs	r0, [r0], #-17
     a88:	21000008 	tstcs	r0, r8
     a8c:	75025001 	strvc	r5, [r2, #-1]
     a90:	1c250000 	stcne	0, cr0, [r5], #-0
     a94:	2b000082 	blcs	ca4 <_start-0x735c>
     a98:	00000011 	andeq	r0, r0, r1, lsl r0
     a9c:	823c1900 	eorshi	r1, ip, #0, 18
     aa0:	00040000 	andeq	r0, r4, r0
     aa4:	088c0000 	stmeq	ip, {}	; <UNPREDICTABLE>
     aa8:	9a270000 	bls	9c0ab0 <__bss_end__+0x9b70a0>
     aac:	01000002 	tsteq	r0, r2
     ab0:	00002c40 	andeq	r2, r0, r0, asr #24
     ab4:	0004ed00 	andeq	lr, r4, r0, lsl #26
     ab8:	111a0000 	tstne	sl, r0
     abc:	48000001 	stmdami	r0, {r0}
     ac0:	10000082 	andne	r0, r0, r2, lsl #1
     ac4:	01000000 	mrseq	r0, (UNDEF: 0)
     ac8:	0008c548 	andeq	ip, r8, r8, asr #10
     acc:	01281b00 	teqeq	r8, r0, lsl #22
     ad0:	05000000 	streq	r0, [r0, #-0]
     ad4:	1d1b0000 	ldcne	0, cr0, [fp, #-0]
     ad8:	25000001 	strcs	r0, [r0, #-1]
     adc:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
     ae0:	00008248 	andeq	r8, r0, r8, asr #4
     ae4:	00000004 	andeq	r0, r0, r4
     ae8:	0001321f 	andeq	r3, r1, pc, lsl r2
     aec:	00053800 	andeq	r3, r5, r0, lsl #16
     af0:	1a000000 	bne	af8 <_start-0x7508>
     af4:	00000111 	andeq	r0, r0, r1, lsl r1
     af8:	00008268 	andeq	r8, r0, r8, ror #4
     afc:	00000010 	andeq	r0, r0, r0, lsl r0
     b00:	08fe4c01 	ldmeq	lr!, {r0, sl, fp, lr}^
     b04:	281b0000 	ldmdacs	fp, {}	; <UNPREDICTABLE>
     b08:	4b000001 	blmi	b14 <_start-0x74ec>
     b0c:	1b000005 	blne	b28 <_start-0x74d8>
     b10:	0000011d 	andeq	r0, r0, sp, lsl r1
     b14:	0000055e 	andeq	r0, r0, lr, asr r5
     b18:	0082681e 	addeq	r6, r2, lr, lsl r8
     b1c:	00000400 	andeq	r0, r0, r0, lsl #8
     b20:	01321f00 	teqeq	r2, r0, lsl #30
     b24:	05710000 	ldrbeq	r0, [r1, #-0]!
     b28:	00000000 	andeq	r0, r0, r0
     b2c:	0001111a 	andeq	r1, r1, sl, lsl r1
     b30:	00828c00 	addeq	r8, r2, r0, lsl #24
     b34:	00001000 	andeq	r1, r0, r0
     b38:	374f0100 	strbcc	r0, [pc, -r0, lsl #2]
     b3c:	1b000009 	blne	b68 <_start-0x7498>
     b40:	00000128 	andeq	r0, r0, r8, lsr #2
     b44:	00000584 	andeq	r0, r0, r4, lsl #11
     b48:	00011d1b 	andeq	r1, r1, fp, lsl sp
     b4c:	00059700 	andeq	r9, r5, r0, lsl #14
     b50:	828c1e00 	addhi	r1, ip, #0, 28
     b54:	00040000 	andeq	r0, r4, r0
     b58:	321f0000 	andscc	r0, pc, #0
     b5c:	aa000001 	bge	b68 <_start-0x7498>
     b60:	00000005 	andeq	r0, r0, r5
     b64:	01111a00 	tsteq	r1, r0, lsl #20
     b68:	82b00000 	adcshi	r0, r0, #0
     b6c:	00100000 	andseq	r0, r0, r0
     b70:	52010000 	andpl	r0, r1, #0
     b74:	00000970 	andeq	r0, r0, r0, ror r9
     b78:	0001281b 	andeq	r2, r1, fp, lsl r8
     b7c:	0005bd00 	andeq	fp, r5, r0, lsl #26
     b80:	011d1b00 	tsteq	sp, r0, lsl #22
     b84:	05d00000 	ldrbeq	r0, [r0]
     b88:	b01e0000 	andslt	r0, lr, r0
     b8c:	04000082 	streq	r0, [r0], #-130	; 0x82
     b90:	1f000000 	svcne	0x00000000
     b94:	00000132 	andeq	r0, r0, r2, lsr r1
     b98:	000005e3 	andeq	r0, r0, r3, ror #11
     b9c:	111a0000 	tstne	sl, r0
     ba0:	d4000001 	strle	r0, [r0], #-1
     ba4:	10000082 	andne	r0, r0, r2, lsl #1
     ba8:	01000000 	mrseq	r0, (UNDEF: 0)
     bac:	0009a955 	andeq	sl, r9, r5, asr r9
     bb0:	01281b00 	teqeq	r8, r0, lsl #22
     bb4:	05f60000 	ldrbeq	r0, [r6, #0]!
     bb8:	1d1b0000 	ldcne	0, cr0, [fp, #-0]
     bbc:	09000001 	stmdbeq	r0, {r0}
     bc0:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
     bc4:	000082d4 	ldrdeq	r8, [r0], -r4
     bc8:	00000004 	andeq	r0, r0, r4
     bcc:	0001321f 	andeq	r3, r1, pc, lsl r2
     bd0:	00061c00 	andeq	r1, r6, r0, lsl #24
     bd4:	1a000000 	bne	bdc <_start-0x7424>
     bd8:	00000111 	andeq	r0, r0, r1, lsl r1
     bdc:	000082f8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
     be0:	00000010 	andeq	r0, r0, r0, lsl r0
     be4:	09e25801 	stmibeq	r2!, {r0, fp, ip, lr}^
     be8:	281b0000 	ldmdacs	fp, {}	; <UNPREDICTABLE>
     bec:	2f000001 	svccs	0x00000001
     bf0:	1b000006 	blne	c10 <_start-0x73f0>
     bf4:	0000011d 	andeq	r0, r0, sp, lsl r1
     bf8:	00000642 	andeq	r0, r0, r2, asr #12
     bfc:	0082f81e 	addeq	pc, r2, lr, lsl r8	; <UNPREDICTABLE>
     c00:	00000400 	andeq	r0, r0, r0, lsl #8
     c04:	01321f00 	teqeq	r2, r0, lsl #30
     c08:	06550000 	ldrbeq	r0, [r5], -r0
     c0c:	00000000 	andeq	r0, r0, r0
     c10:	0001111a 	andeq	r1, r1, sl, lsl r1
     c14:	00831c00 	addeq	r1, r3, r0, lsl #24
     c18:	00001000 	andeq	r1, r0, r0
     c1c:	1b5b0100 	blne	16c1024 <__bss_end__+0x16b7614>
     c20:	1b00000a 	blne	c50 <_start-0x73b0>
     c24:	00000128 	andeq	r0, r0, r8, lsr #2
     c28:	00000668 	andeq	r0, r0, r8, ror #12
     c2c:	00011d1b 	andeq	r1, r1, fp, lsl sp
     c30:	00067b00 	andeq	r7, r6, r0, lsl #22
     c34:	831c1e00 	tsthi	ip, #0, 28
     c38:	00040000 	andeq	r0, r4, r0
     c3c:	321f0000 	andscc	r0, pc, #0
     c40:	8e000001 	cdphi	0, 0, cr0, cr0, cr1, {0}
     c44:	00000006 	andeq	r0, r0, r6
     c48:	01111a00 	tsteq	r1, r0, lsl #20
     c4c:	83400000 	movthi	r0, #0
     c50:	00100000 	andseq	r0, r0, r0
     c54:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
     c58:	00000a50 	andeq	r0, r0, r0, asr sl
     c5c:	0001281b 	andeq	r2, r1, fp, lsl r8
     c60:	0006a100 	andeq	sl, r6, r0, lsl #2
     c64:	011d2800 	tsteq	sp, r0, lsl #16
     c68:	401e0000 	andsmi	r0, lr, r0
     c6c:	04000083 	streq	r0, [r0], #-131	; 0x83
     c70:	1f000000 	svcne	0x00000000
     c74:	00000132 	andeq	r0, r0, r2, lsr r1
     c78:	000006b4 			; <UNDEFINED> instruction: 0x000006b4
     c7c:	5b1a0000 	blpl	680c84 <__bss_end__+0x677274>
     c80:	60000007 	andvs	r0, r0, r7
     c84:	34000083 	strcc	r0, [r0], #-131	; 0x83
     c88:	01000000 	mrseq	r0, (UNDEF: 0)
     c8c:	000ab465 	andeq	fp, sl, r5, ror #8
     c90:	077e2800 	ldrbeq	r2, [lr, -r0, lsl #16]!
     c94:	751b0000 	ldrvc	r0, [fp, #-0]
     c98:	c7000007 	strgt	r0, [r0, -r7]
     c9c:	1b000006 	blne	cbc <_start-0x7344>
     ca0:	0000076b 	andeq	r0, r0, fp, ror #14
     ca4:	000006e7 	andeq	r0, r0, r7, ror #13
     ca8:	0083601e 	addeq	r6, r3, lr, lsl r0
     cac:	00003400 	andeq	r3, r0, r0, lsl #8
     cb0:	07891f00 	streq	r1, [r9, r0, lsl #30]
     cb4:	07050000 	streq	r0, [r5, -r0]
     cb8:	64250000 	strtvs	r0, [r5], #-0
     cbc:	2b000083 	blcs	ed0 <_start-0x7130>
     cc0:	26000011 			; <UNDEFINED> instruction: 0x26000011
     cc4:	00008370 	andeq	r8, r0, r0, ror r3
     cc8:	00001136 	andeq	r1, r0, r6, lsr r1
     ccc:	00000aa9 	andeq	r0, r0, r9, lsr #21
     cd0:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
     cd4:	25000075 	strcs	r0, [r0, #-117]	; 0x75
     cd8:	0000837c 	andeq	r8, r0, ip, ror r3
     cdc:	0000112b 	andeq	r1, r0, fp, lsr #2
     ce0:	64260000 	strtvs	r0, [r6], #-0
     ce4:	36000082 	strcc	r0, [r0], -r2, lsl #1
     ce8:	c8000011 	stmdagt	r0, {r0, r4}
     cec:	2100000a 	tstcs	r0, sl
     cf0:	75025001 	strvc	r5, [r2, #-1]
     cf4:	84260000 	strthi	r0, [r6], #-0
     cf8:	36000082 	strcc	r0, [r0], -r2, lsl #1
     cfc:	dc000011 	stcle	0, cr0, [r0], {17}
     d00:	2100000a 	tstcs	r0, sl
     d04:	75025001 	strvc	r5, [r2, #-1]
     d08:	a8260000 	stmdage	r6!, {}	; <UNPREDICTABLE>
     d0c:	36000082 	strcc	r0, [r0], -r2, lsl #1
     d10:	f0000011 			; <UNDEFINED> instruction: 0xf0000011
     d14:	2100000a 	tstcs	r0, sl
     d18:	75025001 	strvc	r5, [r2, #-1]
     d1c:	cc260000 	stcgt	0, cr0, [r6], #-0
     d20:	36000082 	strcc	r0, [r0], -r2, lsl #1
     d24:	04000011 	streq	r0, [r0], #-17
     d28:	2100000b 	tstcs	r0, fp
     d2c:	75025001 	strvc	r5, [r2, #-1]
     d30:	f0260000 			; <UNDEFINED> instruction: 0xf0260000
     d34:	36000082 	strcc	r0, [r0], -r2, lsl #1
     d38:	18000011 	stmdane	r0, {r0, r4}
     d3c:	2100000b 	tstcs	r0, fp
     d40:	75025001 	strvc	r5, [r2, #-1]
     d44:	14260000 	strtne	r0, [r6], #-0
     d48:	36000083 	strcc	r0, [r0], -r3, lsl #1
     d4c:	2c000011 	stccs	0, cr0, [r0], {17}
     d50:	2100000b 	tstcs	r0, fp
     d54:	75025001 	strvc	r5, [r2, #-1]
     d58:	38260000 	stmdacc	r6!, {}	; <UNPREDICTABLE>
     d5c:	36000083 	strcc	r0, [r0], -r3, lsl #1
     d60:	40000011 	andmi	r0, r0, r1, lsl r0
     d64:	2100000b 	tstcs	r0, fp
     d68:	75025001 	strvc	r5, [r2, #-1]
     d6c:	58200000 	stmdapl	r0!, {}	; <UNPREDICTABLE>
     d70:	36000083 	strcc	r0, [r0], -r3, lsl #1
     d74:	21000011 	tstcs	r0, r1, lsl r0
     d78:	75025001 	strvc	r5, [r2, #-1]
     d7c:	24000000 	strcs	r0, [r0], #-0
     d80:	000001dc 	ldrdeq	r0, [r0], -ip
     d84:	00257001 	eoreq	r7, r5, r1
     d88:	83b40000 			; <UNDEFINED> instruction: 0x83b40000
     d8c:	008c0000 	addeq	r0, ip, r0
     d90:	9c010000 	stcls	0, cr0, [r1], {-0}
     d94:	00000c2c 	andeq	r0, r0, ip, lsr #24
     d98:	01007514 	tsteq	r0, r4, lsl r5
     d9c:	00075570 	andeq	r5, r7, r0, ror r5
     da0:	00072300 	andeq	r2, r7, r0, lsl #6
     da4:	75621400 	strbvc	r1, [r2, #-1024]!	; 0x400
     da8:	70010066 	andvc	r0, r1, r6, rrx
     dac:	00000c2c 	andeq	r0, r0, ip, lsr #24
     db0:	00000757 	andeq	r0, r0, r7, asr r7
     db4:	0002b213 	andeq	fp, r2, r3, lsl r2
     db8:	68700100 	ldmdavs	r0!, {r8}^
     dbc:	8b000000 	blhi	dc4 <_start-0x723c>
     dc0:	14000007 	strne	r0, [r0], #-7
     dc4:	00646e65 	rsbeq	r6, r4, r5, ror #28
     dc8:	004f7001 	subeq	r7, pc, r1
     dcc:	07c40000 	strbeq	r0, [r4, r0]
     dd0:	c4290000 	strtgt	r0, [r9], #-0
     dd4:	01000002 	tsteq	r0, r2
     dd8:	00006870 	andeq	r6, r0, r0, ror r8
     ddc:	00910200 	addseq	r0, r1, r0, lsl #4
     de0:	00021c2a 	andeq	r1, r2, sl, lsr #24
     de4:	000c4200 	andeq	r4, ip, r0, lsl #4
     de8:	bc030500 	cfstr32lt	mvfx0, [r3], {-0}
     dec:	16000093 			; <UNDEFINED> instruction: 0x16000093
     df0:	74010069 	strvc	r0, [r1], #-105	; 0x69
     df4:	00000025 	andeq	r0, r0, r5, lsr #32
     df8:	000007fe 	strdeq	r0, [r0], -lr
     dfc:	00026e27 	andeq	r6, r2, r7, lsr #28
     e00:	4f750100 	svcmi	0x00750100
     e04:	1d000000 	stcne	0, cr0, [r0, #-0]
     e08:	26000008 	strcs	r0, [r0], -r8
     e0c:	000083e4 	andeq	r8, r0, r4, ror #7
     e10:	0000114b 	andeq	r1, r0, fp, asr #2
     e14:	00000c0c 	andeq	r0, r0, ip, lsl #24
     e18:	02530121 	subseq	r0, r3, #1073741832	; 0x40000008
     e1c:	01217108 	teqeq	r1, r8, lsl #2
     e20:	bc030552 	cfstr32lt	mvfx0, [r3], {82}	; 0x52
     e24:	21000093 	swpcs	r0, r3, [r0]	; <UNPREDICTABLE>
     e28:	03055101 	movweq	r5, #20737	; 0x5101
     e2c:	00009450 	andeq	r9, r0, r0, asr r4
     e30:	05500121 	ldrbeq	r0, [r0, #-289]	; 0x121
     e34:	00943403 	addseq	r3, r4, r3, lsl #8
     e38:	e8250000 	stmda	r5!, {}	; <UNPREDICTABLE>
     e3c:	61000083 	smlabbvs	r0, r3, r0, r0
     e40:	20000011 	andcs	r0, r0, r1, lsl r0
     e44:	00008404 	andeq	r8, r0, r4, lsl #8
     e48:	00000795 	muleq	r0, r5, r7
     e4c:	02510121 	subseq	r0, r1, #1073741832	; 0x40000008
     e50:	0121007a 	teqeq	r1, sl, ror r0
     e54:	00780250 	rsbseq	r0, r8, r0, asr r2
     e58:	04060000 	streq	r0, [r6], #-0
     e5c:	0000004f 	andeq	r0, r0, pc, asr #32
     e60:	0000902b 	andeq	r9, r0, fp, lsr #32
     e64:	000c4200 	andeq	r4, ip, r0, lsl #4
     e68:	00812c00 	addeq	r2, r1, r0, lsl #24
     e6c:	00120000 	andseq	r0, r2, r0
     e70:	000c3207 	andeq	r3, ip, r7, lsl #4
     e74:	02852400 	addeq	r2, r5, #0, 8
     e78:	84010000 	strhi	r0, [r1], #-0
     e7c:	00000025 	andeq	r0, r0, r5, lsr #32
     e80:	00008440 	andeq	r8, r0, r0, asr #8
     e84:	00000078 	andeq	r0, r0, r8, ror r0
     e88:	0d059c01 	stceq	12, cr9, [r5, #-4]
     e8c:	75140000 	ldrvc	r0, [r4, #-0]
     e90:	55840100 	strpl	r0, [r4, #256]	; 0x100
     e94:	30000007 	andcc	r0, r0, r7
     e98:	14000008 	strne	r0, [r0], #-8
     e9c:	00667562 	rsbeq	r7, r6, r2, ror #10
     ea0:	0c2c8401 	cfstrseq	mvf8, [ip], #-4
     ea4:	08640000 	stmdaeq	r4!, {}^	; <UNPREDICTABLE>
     ea8:	b2130000 	andslt	r0, r3, #0
     eac:	01000002 	tsteq	r0, r2
     eb0:	00006885 	andeq	r6, r0, r5, lsl #17
     eb4:	00089800 	andeq	r9, r8, r0, lsl #16
     eb8:	02c41300 	sbceq	r1, r4, #0, 6
     ebc:	85010000 	strhi	r0, [r1, #-0]
     ec0:	00000068 	andeq	r0, r0, r8, rrx
     ec4:	000008d1 	ldrdeq	r0, [r0], -r1
     ec8:	00021c2a 	andeq	r1, r2, sl, lsr #24
     ecc:	000d1500 	andeq	r1, sp, r0, lsl #10
     ed0:	d0030500 	andle	r0, r3, r0, lsl #10
     ed4:	16000093 			; <UNDEFINED> instruction: 0x16000093
     ed8:	8a010069 	bhi	41084 <__bss_end__+0x37674>
     edc:	00000025 	andeq	r0, r0, r5, lsr #32
     ee0:	00000905 	andeq	r0, r0, r5, lsl #18
     ee4:	00846c26 	addeq	r6, r4, r6, lsr #24
     ee8:	00114b00 	andseq	r4, r1, r0, lsl #22
     eec:	000ce500 	andeq	lr, ip, r0, lsl #10
     ef0:	53012100 	movwpl	r2, #4352	; 0x1100
     ef4:	21870802 	orrcs	r0, r7, r2, lsl #16
     ef8:	03055201 	movweq	r5, #20993	; 0x5201
     efc:	000093d0 	ldrdeq	r9, [r0], -r0
     f00:	05510121 	ldrbeq	r0, [r1, #-289]	; 0x121
     f04:	00945003 	addseq	r5, r4, r3
     f08:	50012100 	andpl	r2, r1, r0, lsl #2
     f0c:	94340305 	ldrtls	r0, [r4], #-773	; 0x305
     f10:	25000000 	strcs	r0, [r0, #-0]
     f14:	00008470 	andeq	r8, r0, r0, ror r4
     f18:	00001161 	andeq	r1, r0, r1, ror #2
     f1c:	00848c20 	addeq	r8, r4, r0, lsr #24
     f20:	00079500 	andeq	r9, r7, r0, lsl #10
     f24:	51012100 	mrspl	r2, (UNDEF: 17)
     f28:	21007802 	tstcs	r0, r2, lsl #16
     f2c:	77025001 	strvc	r5, [r2, -r1]
     f30:	2b000000 	blcs	f38 <_start-0x70c8>
     f34:	00000090 	muleq	r0, r0, r0
     f38:	00000d15 	andeq	r0, r0, r5, lsl sp
     f3c:	0000812c 	andeq	r8, r0, ip, lsr #2
     f40:	07001400 	streq	r1, [r0, -r0, lsl #8]
     f44:	00000d05 	andeq	r0, r0, r5, lsl #26
     f48:	00000e24 	andeq	r0, r0, r4, lsr #28
     f4c:	d9970100 	ldmible	r7, {r8}
     f50:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
     f54:	b0000084 	andlt	r0, r0, r4, lsl #1
     f58:	01000000 	mrseq	r0, (UNDEF: 0)
     f5c:	000e139c 	muleq	lr, ip, r3
     f60:	78741400 	ldmdavc	r4!, {sl, ip}^
     f64:	4f970100 	svcmi	0x00970100
     f68:	24000000 	strcs	r0, [r0], #-0
     f6c:	14000009 	strne	r0, [r0], #-9
     f70:	01007872 	tsteq	r0, r2, ror r8
     f74:	00004f97 	muleq	r0, r7, pc	; <UNPREDICTABLE>
     f78:	00094500 	andeq	r4, r9, r0, lsl #10
     f7c:	01081300 	mrseq	r1, (UNDEF: 56)
     f80:	97010000 	strls	r0, [r1, -r0]
     f84:	00000068 	andeq	r0, r0, r8, rrx
     f88:	00000966 	andeq	r0, r0, r6, ror #18
     f8c:	0001ab29 	andeq	sl, r1, r9, lsr #22
     f90:	68970100 	ldmvs	r7, {r8}
     f94:	02000000 	andeq	r0, r0, #0
     f98:	6d2d0091 	stcvs	0, cr0, [sp, #-580]!	; 0xfffffdbc
     f9c:	01007a68 	tsteq	r0, r8, ror #20
     fa0:	00002c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
     fa4:	b9270000 	stmdblt	r7!, {}	; <UNPREDICTABLE>
     fa8:	02062729 	andeq	r2, r6, #10747904	; 0xa40000
     fac:	a0010000 	andge	r0, r1, r0
     fb0:	0000002c 	andeq	r0, r0, ip, lsr #32
     fb4:	00000984 	andeq	r0, r0, r4, lsl #19
     fb8:	00021c2a 	andeq	r1, r2, sl, lsr #24
     fbc:	000e2300 	andeq	r2, lr, r0, lsl #6
     fc0:	e8030500 	stmda	r3, {r8, sl}
     fc4:	19000093 	stmdbne	r0, {r0, r1, r4, r7}
     fc8:	000084e0 	andeq	r8, r0, r0, ror #9
     fcc:	00000008 	andeq	r0, r0, r8
     fd0:	00000db2 			; <UNDEFINED> instruction: 0x00000db2
     fd4:	006e692e 	rsbeq	r6, lr, lr, lsr #18
     fd8:	002c9b01 	eoreq	r9, ip, r1, lsl #22
     fdc:	00010000 	andeq	r0, r1, r0
     fe0:	0084d826 	addeq	sp, r4, r6, lsr #16
     fe4:	00116800 	andseq	r6, r1, r0, lsl #16
     fe8:	000dc600 	andeq	ip, sp, r0, lsl #12
     fec:	50012100 	andpl	r2, r1, r0, lsl #2
     ff0:	00007802 	andeq	r7, r0, r2, lsl #16
     ff4:	0084e026 	addeq	lr, r4, r6, lsr #32
     ff8:	00117900 	andseq	r7, r1, r0, lsl #18
     ffc:	000dda00 	andeq	sp, sp, r0, lsl #20
    1000:	50012100 	andpl	r2, r1, r0, lsl #2
    1004:	00007702 	andeq	r7, r0, r2, lsl #14
    1008:	00853c26 	addeq	r3, r5, r6, lsr #24
    100c:	00114b00 	andseq	r4, r1, r0, lsl #22
    1010:	000e0900 	andeq	r0, lr, r0, lsl #18
    1014:	53012100 	movwpl	r2, #4352	; 0x1100
    1018:	21a10802 			; <UNDEFINED> instruction: 0x21a10802
    101c:	03055201 	movweq	r5, #20993	; 0x5201
    1020:	000093e8 	andeq	r9, r0, r8, ror #7
    1024:	05510121 	ldrbeq	r0, [r1, #-289]	; 0x121
    1028:	00945003 	addseq	r5, r4, r3
    102c:	50012100 	andpl	r2, r1, r0, lsl #2
    1030:	945c0305 	ldrbls	r0, [ip], #-773	; 0x305
    1034:	25000000 	strcs	r0, [r0, #-0]
    1038:	00008540 	andeq	r8, r0, r0, asr #10
    103c:	00001161 	andeq	r1, r0, r1, ror #2
    1040:	00902b00 	addseq	r2, r0, r0, lsl #22
    1044:	0e230000 	cdpeq	0, 2, cr0, cr3, cr0, {0}
    1048:	812c0000 	teqhi	ip, r0
    104c:	13000000 	movwne	r0, #0
    1050:	0e130700 	cdpeq	7, 1, cr0, cr3, cr0, {0}
    1054:	f9240000 			; <UNDEFINED> instruction: 0xf9240000
    1058:	01000001 	tsteq	r0, r1
    105c:	000025ad 	andeq	r2, r0, sp, lsr #11
    1060:	00856800 	addeq	r6, r5, r0, lsl #16
    1064:	00003800 	andeq	r3, r0, r0, lsl #16
    1068:	c29c0100 	addsgt	r0, ip, #0, 2
    106c:	1300000e 	movwne	r0, #14
    1070:	000001a6 	andeq	r0, r0, r6, lsr #3
    1074:	0755ad01 	ldrbeq	sl, [r5, -r1, lsl #26]
    1078:	09b20000 	ldmibeq	r2!, {}	; <UNPREDICTABLE>
    107c:	72160000 	andsvc	r0, r6, #0
    1080:	01007365 	tsteq	r0, r5, ror #6
    1084:	000025ae 	andeq	r2, r0, lr, lsr #11
    1088:	0009d300 	andeq	sp, r9, r0, lsl #6
    108c:	021c2a00 	andseq	r2, ip, #0, 20
    1090:	0ed20000 	cdpeq	0, 13, cr0, cr2, cr0, {0}
    1094:	03050000 	movweq	r0, #20480	; 0x5000
    1098:	000093fc 	strdeq	r9, [r0], -ip
    109c:	00857426 	addeq	r7, r5, r6, lsr #8
    10a0:	00079500 	andeq	r9, r7, r0, lsl #10
    10a4:	000e8900 	andeq	r8, lr, r0, lsl #18
    10a8:	51012100 	mrspl	r2, (UNDEF: 17)
    10ac:	21ff0902 	mvnscs	r0, r2, lsl #18
    10b0:	f3035001 	vhadd.u8	d5, d3, d1
    10b4:	26005001 	strcs	r5, [r0], -r1
    10b8:	00008590 	muleq	r0, r0, r5
    10bc:	0000114b 	andeq	r1, r0, fp, asr #2
    10c0:	00000eb8 			; <UNDEFINED> instruction: 0x00000eb8
    10c4:	02530121 	subseq	r0, r3, #1073741832	; 0x40000008
    10c8:	0121b008 	teqeq	r1, r8
    10cc:	fc030552 	stc2	5, cr0, [r3], {82}	; 0x52
    10d0:	21000093 	swpcs	r0, r3, [r0]	; <UNPREDICTABLE>
    10d4:	03055101 	movweq	r5, #20737	; 0x5101
    10d8:	00009450 	andeq	r9, r0, r0, asr r4
    10dc:	05500121 	ldrbeq	r0, [r0, #-289]	; 0x121
    10e0:	0094a003 	addseq	sl, r4, r3
    10e4:	94250000 	strtls	r0, [r5], #-0
    10e8:	61000085 	smlabbvs	r0, r5, r0, r0
    10ec:	00000011 	andeq	r0, r0, r1, lsl r0
    10f0:	0000902b 	andeq	r9, r0, fp, lsr #32
    10f4:	000ed200 	andeq	sp, lr, r0, lsl #4
    10f8:	00812c00 	addeq	r2, r1, r0, lsl #24
    10fc:	000c0000 	andeq	r0, ip, r0
    1100:	000ec207 	andeq	ip, lr, r7, lsl #4
    1104:	02431200 	subeq	r1, r3, #0, 4
    1108:	b4010000 	strlt	r0, [r1], #-0
    110c:	000085a0 	andeq	r8, r0, r0, lsr #11
    1110:	0000002c 	andeq	r0, r0, ip, lsr #32
    1114:	0f1b9c01 	svceq	0x001b9c01
    1118:	a6130000 	ldrge	r0, [r3], -r0
    111c:	01000001 	tsteq	r0, r1
    1120:	000755b4 			; <UNDEFINED> instruction: 0x000755b4
    1124:	0009e600 	andeq	lr, r9, r0, lsl #12
    1128:	736d1400 	cmnvc	sp, #0, 8
    112c:	b4010067 	strlt	r0, [r1], #-103	; 0x67
    1130:	00000097 	muleq	r0, r7, r0
    1134:	00000a04 	andeq	r0, r0, r4, lsl #20
    1138:	0085b820 	addeq	fp, r5, r0, lsr #16
    113c:	00017600 	andeq	r7, r1, r0, lsl #12
    1140:	50012100 	andpl	r2, r1, r0, lsl #2
    1144:	00007502 	andeq	r7, r0, r2, lsl #10
    1148:	008b2400 	addeq	r2, fp, r0, lsl #8
    114c:	bd010000 	stclt	0, cr0, [r1, #-0]
    1150:	00000025 	andeq	r0, r0, r5, lsr #32
    1154:	000085cc 	andeq	r8, r0, ip, asr #11
    1158:	00000080 	andeq	r0, r0, r0, lsl #1
    115c:	10069c01 	andne	r9, r6, r1, lsl #24
    1160:	a6130000 	ldrge	r0, [r3], -r0
    1164:	01000001 	tsteq	r0, r1
    1168:	000755bd 			; <UNDEFINED> instruction: 0x000755bd
    116c:	000a2200 	andeq	r2, sl, r0, lsl #4
    1170:	6d662f00 	stclvs	15, cr2, [r6, #-0]
    1174:	bd010074 	stclt	0, cr0, [r1, #-464]	; 0xfffffe30
    1178:	00000097 	muleq	r0, r7, r0
    117c:	30749102 	rsbscc	r9, r4, r2, lsl #2
    1180:	66756215 			; <UNDEFINED> instruction: 0x66756215
    1184:	06be0100 	ldrteq	r0, [lr], r0, lsl #2
    1188:	03000010 	movweq	r0, #16
    118c:	187c9c91 	ldmdane	ip!, {r0, r4, r7, sl, fp, ip, pc}^
    1190:	0000031c 	andeq	r0, r0, ip, lsl r3
    1194:	0106c001 	tsteq	r6, r1
    1198:	91030000 	mrsls	r0, (UNDEF: 3)
    119c:	73167c98 	tstvc	r6, #152, 24	; 0x9800
    11a0:	c201007a 	andgt	r0, r1, #122	; 0x7a
    11a4:	00000025 	andeq	r0, r0, r5, lsr #32
    11a8:	00000a4e 	andeq	r0, r0, lr, asr #20
    11ac:	00021c2a 	andeq	r1, r2, sl, lsr #24
    11b0:	00102700 	andseq	r2, r0, r0, lsl #14
    11b4:	0c030500 	cfstr32eq	mvfx0, [r3], {-0}
    11b8:	26000094 			; <UNDEFINED> instruction: 0x26000094
    11bc:	000085f4 	strdeq	r8, [r0], -r4
    11c0:	0000118a 	andeq	r1, r0, sl, lsl #3
    11c4:	00000fb6 			; <UNDEFINED> instruction: 0x00000fb6
    11c8:	02530121 	subseq	r0, r3, #1073741832	; 0x40000008
    11cc:	01215891 			; <UNDEFINED> instruction: 0x01215891
    11d0:	54910352 	ldrpl	r0, [r1], #850	; 0x352
    11d4:	51012106 	tstpl	r1, r6, lsl #2
    11d8:	01cc0a03 	biceq	r0, ip, r3, lsl #20
    11dc:	03500121 	cmpeq	r0, #1073741832	; 0x40000008
    11e0:	007bfc91 			; <UNDEFINED> instruction: 0x007bfc91
    11e4:	00861826 	addeq	r1, r6, r6, lsr #16
    11e8:	00114b00 	andseq	r4, r1, r0, lsl #22
    11ec:	000fe500 	andeq	lr, pc, r0, lsl #10
    11f0:	53012100 	movwpl	r2, #4352	; 0x1100
    11f4:	21c40802 	biccs	r0, r4, r2, lsl #16
    11f8:	03055201 	movweq	r5, #20993	; 0x5201
    11fc:	0000940c 	andeq	r9, r0, ip, lsl #8
    1200:	05510121 	ldrbeq	r0, [r1, #-289]	; 0x121
    1204:	00945003 	addseq	r5, r4, r3
    1208:	50012100 	andpl	r2, r1, r0, lsl #2
    120c:	94d80305 	ldrbls	r0, [r8], #773	; 0x305
    1210:	25000000 	strcs	r0, [r0, #-0]
    1214:	0000861c 	andeq	r8, r0, ip, lsl r6
    1218:	00001161 	andeq	r1, r0, r1, ror #2
    121c:	00862820 	addeq	r2, r6, r0, lsr #16
    1220:	000ed700 	andeq	sp, lr, r0, lsl #14
    1224:	51012100 	mrspl	r2, (UNDEF: 17)
    1228:	7bfc9103 	blvc	fff2563c <__bss_end__+0xfff1bc2c>
    122c:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
    1230:	00000075 	andeq	r0, r0, r5, ror r0
    1234:	0000902b 	andeq	r9, r0, fp, lsr #32
    1238:	00101700 	andseq	r1, r0, r0, lsl #14
    123c:	00813100 	addeq	r3, r1, r0, lsl #2
    1240:	01cb0000 	biceq	r0, fp, r0
    1244:	00902b00 	addseq	r2, r0, r0, lsl #22
    1248:	10270000 	eorne	r0, r7, r0
    124c:	812c0000 	teqhi	ip, r0
    1250:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1254:	10170700 	andsne	r0, r7, r0, lsl #14
    1258:	e0240000 	eor	r0, r4, r0
    125c:	01000002 	tsteq	r0, r2
    1260:	000025c9 	andeq	r2, r0, r9, asr #11
    1264:	00864c00 	addeq	r4, r6, r0, lsl #24
    1268:	00004800 	andeq	r4, r0, r0, lsl #16
    126c:	009c0100 	addseq	r0, ip, r0, lsl #2
    1270:	14000011 	strne	r0, [r0], #-17
    1274:	c9010075 	stmdbgt	r1, {r0, r2, r4, r5, r6}
    1278:	00000755 	andeq	r0, r0, r5, asr r7
    127c:	00000a8d 	andeq	r0, r0, sp, lsl #21
    1280:	66756214 			; <UNDEFINED> instruction: 0x66756214
    1284:	2cc90100 	stfcse	f0, [r9], {0}
    1288:	ae00000c 	cdpge	0, 0, cr0, cr0, cr12, {0}
    128c:	1300000a 	movwne	r0, #10
    1290:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
    1294:	0068c901 	rsbeq	ip, r8, r1, lsl #18
    1298:	0acf0000 	beq	ff3c12a0 <__bss_end__+0xff3b7890>
    129c:	65140000 	ldrvs	r0, [r4, #-0]
    12a0:	0100646e 	tsteq	r0, lr, ror #8
    12a4:	00004fc9 	andeq	r4, r0, r9, asr #31
    12a8:	000af000 	andeq	pc, sl, r0
    12ac:	65721600 	ldrbvs	r1, [r2, #-1536]!	; 0x600
    12b0:	ca010073 	bgt	41484 <__bss_end__+0x37a74>
    12b4:	00000025 	andeq	r0, r0, r5, lsr #32
    12b8:	00000b11 	andeq	r0, r0, r1, lsl fp
    12bc:	00021c2a 	andeq	r1, r2, sl, lsr #24
    12c0:	00111000 	andseq	r1, r1, r0
    12c4:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
    12c8:	26000094 			; <UNDEFINED> instruction: 0x26000094
    12cc:	00008660 	andeq	r8, r0, r0, ror #12
    12d0:	00000b51 	andeq	r0, r0, r1, asr fp
    12d4:	000010c7 	andeq	r1, r0, r7, asr #1
    12d8:	03520121 	cmpeq	r2, #1073741832	; 0x40000008
    12dc:	215201f3 	ldrshcs	r0, [r2, #-19]	; 0xffffffed
    12e0:	f3035101 	vrhadd.u8	d5, d3, d1
    12e4:	01215101 	teqeq	r1, r1, lsl #2
    12e8:	01f30350 	mvnseq	r0, r0, asr r3
    12ec:	7d022150 	stfvcs	f2, [r2, #-320]	; 0xfffffec0
    12f0:	ff090200 			; <UNDEFINED> instruction: 0xff090200
    12f4:	867c2600 	ldrbthi	r2, [ip], -r0, lsl #12
    12f8:	114b0000 	mrsne	r0, (UNDEF: 75)
    12fc:	10f60000 	rscsne	r0, r6, r0
    1300:	01210000 	teqeq	r1, r0
    1304:	cc080253 	sfmgt	f0, 4, [r8], {83}	; 0x53
    1308:	05520121 	ldrbeq	r0, [r2, #-289]	; 0x121
    130c:	00941c03 	addseq	r1, r4, r3, lsl #24
    1310:	51012100 	mrspl	r2, (UNDEF: 17)
    1314:	94500305 	ldrbls	r0, [r0], #-773	; 0x305
    1318:	01210000 	teqeq	r1, r0
    131c:	a0030550 	andge	r0, r3, r0, asr r5
    1320:	00000094 	muleq	r0, r4, r0
    1324:	00868025 	addeq	r8, r6, r5, lsr #32
    1328:	00116100 	andseq	r6, r1, r0, lsl #2
    132c:	902b0000 	eorls	r0, fp, r0
    1330:	10000000 	andne	r0, r0, r0
    1334:	2c000011 	stccs	0, cr0, [r0], {17}
    1338:	00000081 	andeq	r0, r0, r1, lsl #1
    133c:	00070016 	andeq	r0, r7, r6, lsl r0
    1340:	32000011 	andcc	r0, r0, #17
    1344:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
    1348:	112b2106 	teqne	fp, r6, lsl #2
    134c:	2c330000 	ldccs	0, cr0, [r3], #-0
    1350:	33000000 	movwcc	r0, #0
    1354:	0000002c 	andeq	r0, r0, ip, lsr #32
    1358:	029f3400 	addseq	r3, pc, #0, 8
    135c:	54070000 	strpl	r0, [r7], #-0
    1360:	0000002c 	andeq	r0, r0, ip, lsr #32
    1364:	00025a35 	andeq	r5, r2, r5, lsr sl
    1368:	25240600 	strcs	r0, [r4, #-1536]!	; 0x600
    136c:	4b000000 	blmi	1374 <_start-0x6c8c>
    1370:	33000011 	movwcc	r0, #17
    1374:	0000002c 	andeq	r0, r0, ip, lsr #32
    1378:	02533500 	subseq	r3, r3, #0, 10
    137c:	27070000 	strcs	r0, [r7, -r0]
    1380:	00000025 	andeq	r0, r0, r5, lsr #32
    1384:	00001161 	andeq	r1, r0, r1, ror #2
    1388:	00009733 	andeq	r9, r0, r3, lsr r7
    138c:	36003000 	strcc	r3, [r0], -r0
    1390:	000000b1 	strheq	r0, [r0], -r1
    1394:	fc326307 	ldc2	3, cr6, [r2], #-28	; 0xffffffe4
    1398:	06000002 	streq	r0, [r0], -r2
    139c:	0011791d 	andseq	r7, r1, sp, lsl r9
    13a0:	002c3300 	eoreq	r3, ip, r0, lsl #6
    13a4:	32000000 	andcc	r0, r0, #0
    13a8:	000002d1 	ldrdeq	r0, [r0], -r1
    13ac:	118a1c06 	orrne	r1, sl, r6, lsl #24
    13b0:	2c330000 	ldccs	0, cr0, [r3], #-0
    13b4:	00000000 	andeq	r0, r0, r0
    13b8:	00025037 	andeq	r5, r2, r7, lsr r0
    13bc:	25020800 	strcs	r0, [r2, #-2048]	; 0x800
    13c0:	33000000 	movwcc	r0, #0
    13c4:	0000008a 	andeq	r0, r0, sl, lsl #1
    13c8:	00002533 	andeq	r2, r0, r3, lsr r5
    13cc:	00973300 	addseq	r3, r7, r0, lsl #6
    13d0:	06330000 	ldrteq	r0, [r3], -r0
    13d4:	00000001 	andeq	r0, r0, r1
    13d8:	00019100 	andeq	r9, r1, r0, lsl #2
    13dc:	08000400 	stmdaeq	r0, {sl}
    13e0:	04000004 	streq	r0, [r0], #-4
    13e4:	00002201 	andeq	r2, r0, r1, lsl #4
    13e8:	03210100 	teqeq	r1, #0, 2
    13ec:	032f0000 	teqeq	pc, #0
    13f0:	86940000 	ldrhi	r0, [r4], r0
    13f4:	00580000 	subseq	r0, r8, r0
    13f8:	04640000 	strbteq	r0, [r4], #-0
    13fc:	76020000 	strvc	r0, [r2], -r0
    1400:	02000002 	andeq	r0, r0, #2
    1404:	00003028 	andeq	r3, r0, r8, lsr #32
    1408:	01ef0300 	mvneq	r0, r0, lsl #6
    140c:	03040000 	movweq	r0, #16384	; 0x4000
    1410:	00004700 	andeq	r4, r0, r0, lsl #14
    1414:	02f70400 	rscseq	r0, r7, #0, 8
    1418:	00470000 	subeq	r0, r7, r0
    141c:	00000000 	andeq	r0, r0, r0
    1420:	f1020405 			; <UNDEFINED> instruction: 0xf1020405
    1424:	02000001 	andeq	r0, r0, #1
    1428:	00002562 	andeq	r2, r0, r2, ror #10
    142c:	05040600 	streq	r0, [r4, #-1536]	; 0x600
    1430:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1434:	f3070407 	vshl.u8	d0, d7, d7
    1438:	07000000 	streq	r0, [r0, -r0]
    143c:	009c0601 	addseq	r0, ip, r1, lsl #12
    1440:	02070000 	andeq	r0, r7, #0
    1444:	00012405 	andeq	r2, r1, r5, lsl #8
    1448:	05040700 	streq	r0, [r4, #-1792]	; 0x700
    144c:	0000011b 	andeq	r0, r0, fp, lsl r1
    1450:	16050807 	strne	r0, [r5], -r7, lsl #16
    1454:	07000001 	streq	r0, [r0, -r1]
    1458:	009a0801 	addseq	r0, sl, r1, lsl #16
    145c:	02070000 	andeq	r0, r7, #0
    1460:	0000be07 	andeq	fp, r0, r7, lsl #28
    1464:	07040700 	streq	r0, [r4, -r0, lsl #14]
    1468:	000000ee 	andeq	r0, r0, lr, ror #1
    146c:	e9070807 	stmdb	r7, {r0, r1, r2, fp}
    1470:	07000000 	streq	r0, [r0, -r0]
    1474:	010d0704 	tsteq	sp, r4, lsl #14
    1478:	04080000 	streq	r0, [r8], #-0
    147c:	000000a7 	andeq	r0, r0, r7, lsr #1
    1480:	a3080107 	movwge	r0, #33031	; 0x8107
    1484:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1488:	0000b404 	andeq	fp, r0, r4, lsl #8
    148c:	00a70900 	adceq	r0, r7, r0, lsl #18
    1490:	530a0000 	movwpl	r0, #40960	; 0xa000
    1494:	01000002 	tsteq	r0, r2
    1498:	00005406 	andeq	r5, r0, r6, lsl #8
    149c:	00869400 	addeq	r9, r6, r0, lsl #8
    14a0:	00005800 	andeq	r5, r0, r0, lsl #16
    14a4:	439c0100 	orrsmi	r0, ip, #0, 2
    14a8:	0b000001 	bleq	14b4 <_start-0x6b4c>
    14ac:	00746d66 	rsbseq	r6, r4, r6, ror #26
    14b0:	00ae0601 	adceq	r0, lr, r1, lsl #12
    14b4:	91020000 	mrsls	r0, (UNDEF: 2)
    14b8:	620d0c70 	andvs	r0, sp, #112, 24	; 0x7000
    14bc:	01006675 	tsteq	r0, r5, ror r6
    14c0:	00014308 	andeq	r4, r1, r8, lsl #6
    14c4:	0c030500 	cfstr32eq	mvfx0, [r3], {-0}
    14c8:	0e000096 	mcreq	0, 0, r0, cr0, cr6, {4}
    14cc:	0000031c 	andeq	r0, r0, ip, lsl r3
    14d0:	00490901 	subeq	r0, r9, r1, lsl #18
    14d4:	91020000 	mrsls	r0, (UNDEF: 2)
    14d8:	7a730f5c 	bvc	1cc5250 <__bss_end__+0x1cbb840>
    14dc:	540c0100 	strpl	r0, [ip], #-256	; 0x100
    14e0:	2f000000 	svccs	0x00000000
    14e4:	1000000b 	andne	r0, r0, fp
    14e8:	000086bc 			; <UNDEFINED> instruction: 0x000086bc
    14ec:	00000174 	andeq	r0, r0, r4, ror r1
    14f0:	00000136 	andeq	r0, r0, r6, lsr r1
    14f4:	02530111 	subseq	r0, r3, #1073741828	; 0x40000004
    14f8:	01114c91 			; <UNDEFINED> instruction: 0x01114c91
    14fc:	48910352 	ldmmi	r1, {r1, r4, r6, r8, r9}
    1500:	51011106 	tstpl	r1, r6, lsl #2
    1504:	04000a03 	streq	r0, [r0], #-2563	; 0xa03
    1508:	02500111 	subseq	r0, r0, #1073741828	; 0x40000004
    150c:	12000074 	andne	r0, r0, #116	; 0x74
    1510:	000086d0 	ldrdeq	r8, [r0], -r0
    1514:	02500111 	subseq	r0, r0, #1073741828	; 0x40000004
    1518:	00000074 	andeq	r0, r0, r4, ror r0
    151c:	0000a713 	andeq	sl, r0, r3, lsl r7
    1520:	00015400 	andeq	r5, r1, r0, lsl #8
    1524:	009a1400 	addseq	r1, sl, r0, lsl #8
    1528:	03ff0000 	mvnseq	r0, #0
    152c:	00541500 	subseq	r1, r4, r0, lsl #10
    1530:	01630000 	cmneq	r3, r0
    1534:	ae160000 	cdpge	0, 1, cr0, cr6, cr0, {0}
    1538:	00000000 	andeq	r0, r0, r0
    153c:	00038817 	andeq	r8, r3, r7, lsl r8
    1540:	6e200400 	cdpvs	4, 2, cr0, cr0, cr0, {0}
    1544:	08000001 	stmdaeq	r0, {r0}
    1548:	00015404 	andeq	r5, r1, r4, lsl #8
    154c:	02501800 	subseq	r1, r0, #0, 16
    1550:	02050000 	andeq	r0, r5, #0
    1554:	00000054 	andeq	r0, r0, r4, asr r0
    1558:	0000a116 	andeq	sl, r0, r6, lsl r1
    155c:	00541600 	subseq	r1, r4, r0, lsl #12
    1560:	ae160000 	cdpge	0, 1, cr0, cr6, cr0, {0}
    1564:	16000000 	strne	r0, [r0], -r0
    1568:	00000049 	andeq	r0, r0, r9, asr #32
    156c:	00ee0000 	rsceq	r0, lr, r0
    1570:	00040000 	andeq	r0, r4, r0
    1574:	00000539 	andeq	r0, r0, r9, lsr r5
    1578:	00220104 	eoreq	r0, r2, r4, lsl #2
    157c:	73010000 	movwvc	r0, #4096	; 0x1000
    1580:	2f000003 	svccs	0x00000003
    1584:	ec000003 	stc	0, cr0, [r0], {3}
    1588:	34000086 	strcc	r0, [r0], #-134	; 0x86
    158c:	6a000000 	bvs	1594 <_start-0x6a6c>
    1590:	02000005 	andeq	r0, r0, #5
    1594:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1598:	04030074 	streq	r0, [r3], #-116	; 0x74
    159c:	0000f307 	andeq	pc, r0, r7, lsl #6
    15a0:	06010300 	streq	r0, [r1], -r0, lsl #6
    15a4:	0000009c 	muleq	r0, ip, r0
    15a8:	24050203 	strcs	r0, [r5], #-515	; 0x203
    15ac:	03000001 	movweq	r0, #1
    15b0:	011b0504 	tsteq	fp, r4, lsl #10
    15b4:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    15b8:	00011605 	andeq	r1, r1, r5, lsl #12
    15bc:	08010300 	stmdaeq	r1, {r8, r9}
    15c0:	0000009a 	muleq	r0, sl, r0
    15c4:	be070203 	cdplt	2, 0, cr0, cr7, cr3, {0}
    15c8:	03000000 	movweq	r0, #0
    15cc:	00ee0704 	rsceq	r0, lr, r4, lsl #14
    15d0:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    15d4:	0000e907 	andeq	lr, r0, r7, lsl #18
    15d8:	07040300 	streq	r0, [r4, -r0, lsl #6]
    15dc:	0000010d 	andeq	r0, r0, sp, lsl #2
    15e0:	a3080103 	movwge	r0, #33027	; 0x8103
    15e4:	04000000 	streq	r0, [r0], #-0
    15e8:	00007f04 	andeq	r7, r0, r4, lsl #30
    15ec:	00720500 	rsbseq	r0, r2, r0, lsl #10
    15f0:	7f060000 	svcvc	0x00060000
    15f4:	01000003 	tsteq	r0, r3
    15f8:	00002504 	andeq	r2, r0, r4, lsl #10
    15fc:	0086ec00 	addeq	lr, r6, r0, lsl #24
    1600:	00003400 	andeq	r3, r0, r0, lsl #8
    1604:	ab9c0100 	blge	fe701a0c <__bss_end__+0xfe6f7ffc>
    1608:	07000000 	streq	r0, [r0, -r0]
    160c:	04010070 	streq	r0, [r1], #-112	; 0x70
    1610:	00000079 	andeq	r0, r0, r9, ror r0
    1614:	00000b58 	andeq	r0, r0, r8, asr fp
    1618:	00250800 	eoreq	r0, r5, r0, lsl #16
    161c:	00ba0000 	adcseq	r0, sl, r0
    1620:	25090000 	strcs	r0, [r9, #-0]
    1624:	00000000 	andeq	r0, r0, r0
    1628:	00038d0a 	andeq	r8, r3, sl, lsl #26
    162c:	c51d0200 	ldrgt	r0, [sp, #-512]	; 0x200
    1630:	04000000 	streq	r0, [r0], #-0
    1634:	0000ab04 	andeq	sl, r0, r4, lsl #22
    1638:	00250800 	eoreq	r0, r5, r0, lsl #16
    163c:	00da0000 	sbcseq	r0, sl, r0
    1640:	79090000 	stmdbvc	r9, {}	; <UNPREDICTABLE>
    1644:	00000000 	andeq	r0, r0, r0
    1648:	0003880b 	andeq	r8, r3, fp, lsl #16
    164c:	eb0c0100 	bl	301a54 <__bss_end__+0x2f8044>
    1650:	05000000 	streq	r0, [r0, #-0]
    1654:	00931003 	addseq	r1, r3, r3
    1658:	cb040400 	blgt	102660 <__bss_end__+0xf8c50>
    165c:	00000000 	andeq	r0, r0, r0
    1660:	00000654 	andeq	r0, r0, r4, asr r6
    1664:	05d20004 	ldrbeq	r0, [r2, #4]
    1668:	01040000 	mrseq	r0, (UNDEF: 4)
    166c:	00000022 	andeq	r0, r0, r2, lsr #32
    1670:	0003c501 	andeq	ip, r3, r1, lsl #10
    1674:	00032f00 	andeq	r2, r3, r0, lsl #30
    1678:	00872000 	addeq	r2, r7, r0
    167c:	0004f000 	andeq	pc, r4, r0
    1680:	00060400 	andeq	r0, r6, r0, lsl #8
    1684:	05040200 	streq	r0, [r4, #-512]	; 0x200
    1688:	00746e69 	rsbseq	r6, r4, r9, ror #28
    168c:	f3070403 	vshl.u8	d0, d3, d7
    1690:	03000000 	movweq	r0, #0
    1694:	009c0601 	addseq	r0, ip, r1, lsl #12
    1698:	02030000 	andeq	r0, r3, #0
    169c:	00012405 	andeq	r2, r1, r5, lsl #8
    16a0:	05040300 	streq	r0, [r4, #-768]	; 0x300
    16a4:	0000011b 	andeq	r0, r0, fp, lsl r1
    16a8:	16050803 	strne	r0, [r5], -r3, lsl #16
    16ac:	03000001 	movweq	r0, #1
    16b0:	009a0801 	addseq	r0, sl, r1, lsl #16
    16b4:	02030000 	andeq	r0, r3, #0
    16b8:	0000be07 	andeq	fp, r0, r7, lsl #28
    16bc:	07040300 	streq	r0, [r4, -r0, lsl #6]
    16c0:	000000ee 	andeq	r0, r0, lr, ror #1
    16c4:	e9070803 	stmdb	r7, {r0, r1, fp}
    16c8:	03000000 	movweq	r0, #0
    16cc:	010d0704 	tsteq	sp, r4, lsl #14
    16d0:	04040000 	streq	r0, [r4], #-0
    16d4:	007a0405 	rsbseq	r0, sl, r5, lsl #8
    16d8:	01030000 	mrseq	r0, (UNDEF: 3)
    16dc:	0000a308 	andeq	sl, r0, r8, lsl #6
    16e0:	87040500 	strhi	r0, [r4, -r0, lsl #10]
    16e4:	06000000 	streq	r0, [r0], -r0
    16e8:	0000007a 	andeq	r0, r0, sl, ror r0
    16ec:	00027607 	andeq	r7, r2, r7, lsl #12
    16f0:	97280200 	strls	r0, [r8, -r0, lsl #4]!
    16f4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    16f8:	000001ef 	andeq	r0, r0, pc, ror #3
    16fc:	ae000404 	cdpge	4, 0, cr0, cr0, cr4, {0}
    1700:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1704:	000002f7 	strdeq	r0, [r0], -r7
    1708:	00000072 	andeq	r0, r0, r2, ror r0
    170c:	f1070000 			; <UNDEFINED> instruction: 0xf1070000
    1710:	02000001 	andeq	r0, r0, #1
    1714:	00008c62 	andeq	r8, r0, r2, ror #24
    1718:	03a70a00 			; <UNDEFINED> instruction: 0x03a70a00
    171c:	27010000 	strcs	r0, [r1, -r0]
    1720:	00000025 	andeq	r0, r0, r5, lsr #32
    1724:	00008720 	andeq	r8, r0, r0, lsr #14
    1728:	00000014 	andeq	r0, r0, r4, lsl r0
    172c:	00e09c01 	rsceq	r9, r0, r1, lsl #24
    1730:	630b0000 	movwvs	r0, #45056	; 0xb000
    1734:	25270100 	strcs	r0, [r7, #-256]!	; 0x100
    1738:	76000000 	strvc	r0, [r0], -r0
    173c:	0000000b 	andeq	r0, r0, fp
    1740:	6461700c 	strbtvs	r7, [r1], #-12
    1744:	742e0100 	strtvc	r0, [lr], #-256	; 0x100
    1748:	34000000 	strcc	r0, [r0], #-0
    174c:	2c000087 	stccs	0, cr0, [r0], {135}	; 0x87
    1750:	01000000 	mrseq	r0, (UNDEF: 0)
    1754:	0001309c 	muleq	r1, ip, r0
    1758:	00700b00 	rsbseq	r0, r0, r0, lsl #22
    175c:	00742e01 	rsbseq	r2, r4, r1, lsl #28
    1760:	0ba40000 	bleq	fe901768 <__bss_end__+0xfe8f7d58>
    1764:	b70d0000 	strlt	r0, [sp, -r0]
    1768:	01000003 	tsteq	r0, r3
    176c:	0000742e 	andeq	r7, r0, lr, lsr #8
    1770:	000bcf00 	andeq	ip, fp, r0, lsl #30
    1774:	03e50e00 	mvneq	r0, #0, 28
    1778:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    177c:	00000025 	andeq	r0, r0, r5, lsr #32
    1780:	6c0f5201 	sfmvs	f5, 4, [pc], {1}
    1784:	01006e65 	tsteq	r0, r5, ror #28
    1788:	0000252f 	andeq	r2, r0, pc, lsr #10
    178c:	00510100 	subseq	r0, r1, r0, lsl #2
    1790:	00039f0a 	andeq	r9, r3, sl, lsl #30
    1794:	74370100 	ldrtvc	r0, [r7], #-256	; 0x100
    1798:	60000000 	andvs	r0, r0, r0
    179c:	40000087 	andmi	r0, r0, r7, lsl #1
    17a0:	01000000 	mrseq	r0, (UNDEF: 0)
    17a4:	00019c9c 	muleq	r1, ip, ip
    17a8:	73640b00 	cmnvc	r4, #0, 22
    17ac:	37010074 	smlsdxcc	r1, r4, r0, r0
    17b0:	00000074 	andeq	r0, r0, r4, ror r0
    17b4:	00000bf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    17b8:	01006e0b 	tsteq	r0, fp, lsl #28
    17bc:	00002537 	andeq	r2, r0, r7, lsr r5
    17c0:	000c2800 	andeq	r2, ip, r0, lsl #16
    17c4:	00700b00 	rsbseq	r0, r0, r0, lsl #22
    17c8:	00743701 	rsbseq	r3, r4, r1, lsl #14
    17cc:	0c490000 	mareq	acc0, r0, r9
    17d0:	760d0000 	strvc	r0, [sp], -r0
    17d4:	01000004 	tsteq	r0, r4
    17d8:	00007437 	andeq	r7, r0, r7, lsr r4
    17dc:	000c7f00 	andeq	r7, ip, r0, lsl #30
    17e0:	656c1000 	strbvs	r1, [ip, #-0]!
    17e4:	3901006e 	stmdbcc	r1, {r1, r2, r3, r5, r6}
    17e8:	00000025 	andeq	r0, r0, r5, lsr #32
    17ec:	00000c9d 	muleq	r0, sp, ip
    17f0:	0100730f 	tsteq	r0, pc, lsl #6
    17f4:	0000743d 	andeq	r7, r0, sp, lsr r4
    17f8:	00500100 	subseq	r0, r0, r0, lsl #2
    17fc:	0003f30a 	andeq	pc, r3, sl, lsl #6
    1800:	74470100 	strbvc	r0, [r7], #-256	; 0x100
    1804:	a0000000 	andge	r0, r0, r0
    1808:	98000087 	stmdals	r0, {r0, r1, r2, r7}
    180c:	01000001 	tsteq	r0, r1
    1810:	0002ca9c 	muleq	r2, ip, sl
    1814:	03b70d00 			; <UNDEFINED> instruction: 0x03b70d00
    1818:	47010000 	strmi	r0, [r1, -r0]
    181c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1820:	00000cc4 	andeq	r0, r0, r4, asr #25
    1824:	7473640b 	ldrbtvc	r6, [r3], #-1035	; 0x40b
    1828:	74470100 	strbvc	r0, [r7], #-256	; 0x100
    182c:	f2000000 	vhadd.s8	d0, d0, d0
    1830:	0b00000c 	bleq	1868 <_start-0x6798>
    1834:	4701006e 	strmi	r0, [r1, -lr, rrx]
    1838:	00000025 	andeq	r0, r0, r5, lsr #32
    183c:	00000d60 	andeq	r0, r0, r0, ror #26
    1840:	6c61760b 	stclvs	6, cr7, [r1], #-44	; 0xffffffd4
    1844:	25470100 	strbcs	r0, [r7, #-256]	; 0x100
    1848:	8c000000 	stchi	0, cr0, [r0], {-0}
    184c:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
    1850:	000003e5 	andeq	r0, r0, r5, ror #7
    1854:	00254701 	eoreq	r4, r5, r1, lsl #14
    1858:	0e160000 	cdpeq	0, 1, cr0, cr6, cr0, {0}
    185c:	bc0e0000 	stclt	0, cr0, [lr], {-0}
    1860:	01000003 	tsteq	r0, r3
    1864:	00002547 	andeq	r2, r0, r7, asr #10
    1868:	04910200 	ldreq	r0, [r1], #512	; 0x200
    186c:	6675620f 	ldrbtvs	r6, [r5], -pc, lsl #4
    1870:	ca4c0100 	bgt	1301c78 <__bss_end__+0x12f8268>
    1874:	03000002 	movweq	r0, #2
    1878:	107fa891 			; <UNDEFINED> instruction: 0x107fa891
    187c:	4c010070 	stcmi	0, cr0, [r1], {112}	; 0x70
    1880:	00000074 	andeq	r0, r0, r4, ror r0
    1884:	00000e40 	andeq	r0, r0, r0, asr #28
    1888:	01007510 	tsteq	r0, r0, lsl r5
    188c:	00002c4d 	andeq	r2, r0, sp, asr #24
    1890:	000ee500 	andeq	lr, lr, r0, lsl #10
    1894:	021c1100 	andseq	r1, ip, #0, 2
    1898:	02ea0000 	rsceq	r0, sl, #0
    189c:	03050000 	movweq	r0, #20480	; 0x5000
    18a0:	000094fc 	strdeq	r9, [r0], -ip
    18a4:	00880c12 	addeq	r0, r8, r2, lsl ip
    18a8:	00007400 	andeq	r7, r0, r0, lsl #8
    18ac:	00026100 	andeq	r6, r2, r0, lsl #2
    18b0:	03991300 	orrseq	r1, r9, #0, 6
    18b4:	52010000 	andpl	r0, r1, #0
    18b8:	0000002c 	andeq	r0, r0, ip, lsr #32
    18bc:	00000ff5 	strdeq	r0, [r0], -r5
    18c0:	88f01400 	ldmhi	r0!, {sl, ip}^
    18c4:	063a0000 	ldrteq	r0, [sl], -r0
    18c8:	02900000 	addseq	r0, r0, #0
    18cc:	01150000 	tsteq	r5, r0
    18d0:	75080253 	strvc	r0, [r8, #-595]	; 0x253
    18d4:	05520115 	ldrbeq	r0, [r2, #-277]	; 0x115
    18d8:	0094fc03 	addseq	pc, r4, r3, lsl #24
    18dc:	51011500 	tstpl	r1, r0, lsl #10
    18e0:	95340305 	ldrls	r0, [r4, #-773]!	; 0x305
    18e4:	01150000 	tsteq	r5, r0
    18e8:	20030550 	andcs	r0, r3, r0, asr r5
    18ec:	00000095 	muleq	r0, r5, r0
    18f0:	0088f416 	addeq	pc, r8, r6, lsl r4	; <UNPREDICTABLE>
    18f4:	00065000 	andeq	r5, r6, r0
    18f8:	89001400 	stmdbhi	r0, {sl, ip}
    18fc:	00e00000 	rsceq	r0, r0, r0
    1900:	02ad0000 	adceq	r0, sp, #0
    1904:	01150000 	tsteq	r5, r0
    1908:	007d0251 	rsbseq	r0, sp, r1, asr r2
    190c:	89141700 	ldmdbhi	r4, {r8, r9, sl, ip}
    1910:	01300000 	teqeq	r0, r0
    1914:	01150000 	tsteq	r5, r0
    1918:	007d0253 	rsbseq	r0, sp, r3, asr r2
    191c:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    1920:	01150074 	tsteq	r5, r4, ror r0
    1924:	00750250 	rsbseq	r0, r5, r0, asr r2
    1928:	7a180000 	bvc	601930 <__bss_end__+0x5f7f20>
    192c:	da000000 	ble	1934 <_start-0x66cc>
    1930:	19000002 	stmdbne	r0, {r1}
    1934:	0000006b 	andeq	r0, r0, fp, rrx
    1938:	7a18003f 	bvc	601a3c <__bss_end__+0x5f802c>
    193c:	ea000000 	b	1944 <_start-0x66bc>
    1940:	19000002 	stmdbne	r0, {r1}
    1944:	0000006b 	andeq	r0, r0, fp, rrx
    1948:	da060004 	ble	181960 <__bss_end__+0x177f50>
    194c:	1a000002 	bne	195c <_start-0x66a4>
    1950:	000003d6 	ldrdeq	r0, [r0], -r6
    1954:	89381f01 	ldmdbhi	r8!, {r0, r8, r9, sl, fp, ip}
    1958:	00500000 	subseq	r0, r0, r0
    195c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1960:	0000036a 	andeq	r0, r0, sl, ror #6
    1964:	0003eb0d 	andeq	lr, r3, sp, lsl #22
    1968:	791f0100 	ldmdbvc	pc, {r8}	; <UNPREDICTABLE>
    196c:	21000003 	tstcs	r0, r3
    1970:	0d000010 	stceq	0, cr0, [r0, #-64]	; 0xffffffc0
    1974:	000003af 	andeq	r0, r0, pc, lsr #7
    1978:	038e1f01 	orreq	r1, lr, #1, 30
    197c:	104d0000 	subne	r0, sp, r0
    1980:	1c110000 	ldcne	0, cr0, [r1], {-0}
    1984:	a4000002 	strge	r0, [r0], #-2
    1988:	05000003 	streq	r0, [r0, #-3]
    198c:	00950403 	addseq	r0, r5, r3, lsl #8
    1990:	89581400 	ldmdbhi	r8, {sl, ip}^
    1994:	063a0000 	ldrteq	r0, [sl], -r0
    1998:	03600000 	cmneq	r0, #0
    199c:	01150000 	tsteq	r5, r0
    19a0:	20080253 	andcs	r0, r8, r3, asr r2
    19a4:	05520115 	ldrbeq	r0, [r2, #-277]	; 0x115
    19a8:	00950403 	addseq	r0, r5, r3, lsl #8
    19ac:	51011500 	tstpl	r1, r0, lsl #10
    19b0:	95340305 	ldrls	r0, [r4, #-773]!	; 0x305
    19b4:	01150000 	tsteq	r5, r0
    19b8:	6c030550 	cfstr32vs	mvfx0, [r3], {80}	; 0x50
    19bc:	00000095 	muleq	r0, r5, r0
    19c0:	00895c16 	addeq	r5, r9, r6, lsl ip
    19c4:	00065000 	andeq	r5, r6, r0
    19c8:	251b0000 	ldrcs	r0, [fp, #-0]
    19cc:	79000000 	stmdbvc	r0, {}	; <UNPREDICTABLE>
    19d0:	1c000003 	stcne	0, cr0, [r0], {3}
    19d4:	00000025 	andeq	r0, r0, r5, lsr #32
    19d8:	6a040500 	bvs	102de0 <__bss_end__+0xf93d0>
    19dc:	1b000003 	blne	19f0 <_start-0x6610>
    19e0:	00000025 	andeq	r0, r0, r5, lsr #32
    19e4:	0000038e 	andeq	r0, r0, lr, lsl #7
    19e8:	0000811c 	andeq	r8, r0, ip, lsl r1
    19ec:	04050000 	streq	r0, [r5], #-0
    19f0:	0000037f 	andeq	r0, r0, pc, ror r3
    19f4:	00007a18 	andeq	r7, r0, r8, lsl sl
    19f8:	0003a400 	andeq	sl, r3, r0, lsl #8
    19fc:	006b1900 	rsbeq	r1, fp, r0, lsl #18
    1a00:	000e0000 	andeq	r0, lr, r0
    1a04:	00039406 	andeq	r9, r3, r6, lsl #8
    1a08:	02501d00 	subseq	r1, r0, #0, 26
    1a0c:	7d010000 	stcvc	0, cr0, [r1, #-0]
    1a10:	00000025 	andeq	r0, r0, r5, lsr #32
    1a14:	00008988 	andeq	r8, r0, r8, lsl #19
    1a18:	00000288 	andeq	r0, r0, r8, lsl #5
    1a1c:	05ff9c01 	ldrbeq	r9, [pc, #3073]!	; 2625 <_start-0x59db>
    1a20:	620b0000 	andvs	r0, fp, #0
    1a24:	01006675 	tsteq	r0, r5, ror r6
    1a28:	0000747d 	andeq	r7, r0, sp, ror r4
    1a2c:	00107900 	andseq	r7, r0, r0, lsl #18
    1a30:	006e0b00 	rsbeq	r0, lr, r0, lsl #22
    1a34:	00257d01 	eoreq	r7, r5, r1, lsl #26
    1a38:	10a50000 	adcne	r0, r5, r0
    1a3c:	660b0000 	strvs	r0, [fp], -r0
    1a40:	0100746d 	tsteq	r0, sp, ror #8
    1a44:	0000817d 	andeq	r8, r0, sp, ror r1
    1a48:	0010d300 	andseq	sp, r0, r0, lsl #6
    1a4c:	031c0d00 	tsteq	ip, #0, 26
    1a50:	7d010000 	stcvc	0, cr0, [r1, #-0]
    1a54:	000000ae 	andeq	r0, r0, lr, lsr #1
    1a58:	00001107 	andeq	r1, r0, r7, lsl #2
    1a5c:	01007010 	tsteq	r0, r0, lsl r0
    1a60:	0000747e 	andeq	r7, r0, lr, ror r4
    1a64:	00111a00 	andseq	r1, r1, r0, lsl #20
    1a68:	00651000 	rsbeq	r1, r5, r0
    1a6c:	00747e01 	rsbseq	r7, r4, r1, lsl #28
    1a70:	11980000 	orrsne	r0, r8, r0
    1a74:	1c110000 	ldcne	0, cr0, [r1], {-0}
    1a78:	0f000002 	svceq	0x00000002
    1a7c:	05000006 	streq	r0, [r0, #-6]
    1a80:	00951403 	addseq	r1, r5, r3, lsl #8
    1a84:	89dc1e00 	ldmibhi	ip, {r9, sl, fp, ip}^
    1a88:	01f40000 	mvnseq	r0, r0
    1a8c:	73100000 	tstvc	r0, #0
    1a90:	748b0100 	strvc	r0, [fp], #256	; 0x100
    1a94:	bf000000 	svclt	0x00000000
    1a98:	0f000011 	svceq	0x00000011
    1a9c:	006d756e 	rsbeq	r7, sp, lr, ror #10
    1aa0:	06148b01 	ldreq	r8, [r4], -r1, lsl #22
    1aa4:	91030000 	mrsls	r0, (UNDEF: 3)
    1aa8:	e5137ed8 	ldr	r7, [r3, #-3800]	; 0xed8
    1aac:	01000003 	tsteq	r0, r3
    1ab0:	00002c8c 	andeq	r2, r0, ip, lsl #25
    1ab4:	00121400 	andseq	r1, r2, r0, lsl #8
    1ab8:	8a0c1400 	bhi	306ac0 <__bss_end__+0x2fd0b0>
    1abc:	00b90000 	adcseq	r0, r9, r0
    1ac0:	046d0000 	strbteq	r0, [sp], #-0
    1ac4:	01150000 	tsteq	r5, r0
    1ac8:	00750250 	rsbseq	r0, r5, r0, asr r2
    1acc:	8a301400 	bhi	c06ad4 <__bss_end__+0xbfd0c4>
    1ad0:	063a0000 	ldrteq	r0, [sl], -r0
    1ad4:	049c0000 	ldreq	r0, [ip], #0
    1ad8:	01150000 	tsteq	r5, r0
    1adc:	92080253 	andls	r0, r8, #805306373	; 0x30000005
    1ae0:	05520115 	ldrbeq	r0, [r2, #-277]	; 0x115
    1ae4:	00951403 	addseq	r1, r5, r3, lsl #8
    1ae8:	51011500 	tstpl	r1, r0, lsl #10
    1aec:	95340305 	ldrls	r0, [r4, #-773]!	; 0x305
    1af0:	01150000 	tsteq	r5, r0
    1af4:	84030550 	strhi	r0, [r3], #-1360	; 0x550
    1af8:	00000095 	muleq	r0, r5, r0
    1afc:	008a3416 	addeq	r3, sl, r6, lsl r4
    1b00:	00065000 	andeq	r5, r6, r0
    1b04:	8ab41400 	bhi	fed06b0c <__bss_end__+0xfecfd0fc>
    1b08:	063a0000 	ldrteq	r0, [sl], -r0
    1b0c:	04d40000 	ldrbeq	r0, [r4], #0
    1b10:	01150000 	tsteq	r5, r0
    1b14:	98080253 	stmdals	r8, {r0, r1, r4, r6, r9}
    1b18:	05520115 	ldrbeq	r0, [r2, #-277]	; 0x115
    1b1c:	00951403 	addseq	r1, r5, r3, lsl #8
    1b20:	51011500 	tstpl	r1, r0, lsl #10
    1b24:	95340305 	ldrls	r0, [r4, #-773]!	; 0x305
    1b28:	01150000 	tsteq	r5, r0
    1b2c:	a0030550 	andge	r0, r3, r0, asr r5
    1b30:	00000095 	muleq	r0, r5, r0
    1b34:	008ab816 	addeq	fp, sl, r6, lsl r8
    1b38:	00065000 	andeq	r5, r6, r0
    1b3c:	8adc1400 	bhi	ff706b44 <__bss_end__+0xff6fd134>
    1b40:	019c0000 	orrseq	r0, ip, r0
    1b44:	050a0000 	streq	r0, [sl, #-0]
    1b48:	01150000 	tsteq	r5, r0
    1b4c:	80080252 	andhi	r0, r8, r2, asr r2
    1b50:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    1b54:	157ed091 	ldrbne	sp, [lr, #-145]!	; 0x91
    1b58:	3a015001 	bcc	55b64 <__bss_end__+0x4c154>
    1b5c:	047d0215 	ldrbteq	r0, [sp], #-533	; 0x215
    1b60:	02153101 	andseq	r3, r5, #1073741824	; 0x40000000
    1b64:	7702007d 	smlsdxvc	r2, sp, r0, r0
    1b68:	04140000 	ldreq	r0, [r4], #-0
    1b6c:	9c00008b 	stcls	0, cr0, [r0], {139}	; 0x8b
    1b70:	37000001 	strcc	r0, [r0, -r1]
    1b74:	15000005 	strne	r0, [r0, #-5]
    1b78:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    1b7c:	51011580 	smlabbpl	r1, r0, r5, r1
    1b80:	7ed09103 	atnvcs	f1, f3
    1b84:	01500115 	cmpeq	r0, r5, lsl r1
    1b88:	7d02153a 	cfstr32vc	mvfx1, [r2, #-232]	; 0xffffff18
    1b8c:	15300104 	ldrne	r0, [r0, #-260]!	; 0x104
    1b90:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    1b94:	14000077 	strne	r0, [r0], #-119	; 0x77
    1b98:	00008b2c 	andeq	r8, r0, ip, lsr #22
    1b9c:	0000019c 	muleq	r0, ip, r1
    1ba0:	00000564 	andeq	r0, r0, r4, ror #10
    1ba4:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    1ba8:	01158008 	tsteq	r5, r8
    1bac:	d0910351 	addsle	r0, r1, r1, asr r3
    1bb0:	5001157e 	andpl	r1, r1, lr, ror r5
    1bb4:	02154001 	andseq	r4, r5, #1
    1bb8:	3001047d 	andcc	r0, r1, sp, ror r4
    1bbc:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    1bc0:	00007702 	andeq	r7, r0, r2, lsl #14
    1bc4:	008b5414 	addeq	r5, fp, r4, lsl r4
    1bc8:	00019c00 	andeq	r9, r1, r0, lsl #24
    1bcc:	00059100 	andeq	r9, r5, r0, lsl #2
    1bd0:	52011500 	andpl	r1, r1, #0, 10
    1bd4:	15800802 	strne	r0, [r0, #2050]	; 0x802
    1bd8:	91035101 	tstls	r3, r1, lsl #2
    1bdc:	01157ed0 			; <UNDEFINED> instruction: 0x01157ed0
    1be0:	15320150 	ldrne	r0, [r2, #-336]!	; 0x150
    1be4:	01047d02 	tsteq	r4, r2, lsl #26
    1be8:	7d021530 	cfstr32vc	mvfx1, [r2, #-192]	; 0xffffff40
    1bec:	00770200 	rsbseq	r0, r7, r0, lsl #4
    1bf0:	8b881400 	blhi	fe206bf8 <__bss_end__+0xfe1fd1e8>
    1bf4:	019c0000 	orrseq	r0, ip, r0
    1bf8:	05be0000 	ldreq	r0, [lr, #0]!
    1bfc:	01150000 	tsteq	r5, r0
    1c00:	80080252 	andhi	r0, r8, r2, asr r2
    1c04:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    1c08:	157ed091 	ldrbne	sp, [lr, #-145]!	; 0x91
    1c0c:	38015001 	stmdacc	r1, {r0, ip, lr}
    1c10:	047d0215 	ldrbteq	r0, [sp], #-533	; 0x215
    1c14:	02153001 	andseq	r3, r5, #1
    1c18:	7702007d 	smlsdxvc	r2, sp, r0, r0
    1c1c:	a4140000 	ldrge	r0, [r4], #-0
    1c20:	3a00008b 	bcc	1e54 <_start-0x61ac>
    1c24:	f4000006 	vst4.8	{d0-d3}, [r0], r6
    1c28:	15000005 	strne	r0, [r0, #-5]
    1c2c:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    1c30:	520115b9 	andpl	r1, r1, #775946240	; 0x2e400000
    1c34:	95140305 	ldrls	r0, [r4, #-773]	; 0x305
    1c38:	01150000 	tsteq	r5, r0
    1c3c:	34030551 	strcc	r0, [r3], #-1361	; 0x551
    1c40:	15000095 	strne	r0, [r0, #-149]	; 0x95
    1c44:	03055001 	movweq	r5, #20481	; 0x5001
    1c48:	000095c8 	andeq	r9, r0, r8, asr #11
    1c4c:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    1c50:	00007902 	andeq	r7, r0, r2, lsl #18
    1c54:	008ba816 	addeq	sl, fp, r6, lsl r8
    1c58:	00065000 	andeq	r5, r6, r0
    1c5c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1c60:	0000007a 	andeq	r0, r0, sl, ror r0
    1c64:	0000060f 	andeq	r0, r0, pc, lsl #12
    1c68:	00006b19 	andeq	r6, r0, r9, lsl fp
    1c6c:	06000900 	streq	r0, [r0], -r0, lsl #18
    1c70:	000005ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1c74:	00007a18 	andeq	r7, r0, r8, lsl sl
    1c78:	00062400 	andeq	r2, r6, r0, lsl #8
    1c7c:	006b1900 	rsbeq	r1, fp, r0, lsl #18
    1c80:	007f0000 	rsbseq	r0, pc, r0
    1c84:	00038d1f 	andeq	r8, r3, pc, lsl sp
    1c88:	791d0300 	ldmdbvc	sp, {r8, r9}
    1c8c:	1f000003 	svcne	0x00000003
    1c90:	00000388 	andeq	r0, r0, r8, lsl #7
    1c94:	038e2003 	orreq	r2, lr, #3
    1c98:	53200000 	teqpl	r0, #0
    1c9c:	03000002 	movweq	r0, #2
    1ca0:	00002527 	andeq	r2, r0, r7, lsr #10
    1ca4:	00065000 	andeq	r5, r6, r0
    1ca8:	00811c00 	addeq	r1, r1, r0, lsl #24
    1cac:	00210000 	eoreq	r0, r1, r0
    1cb0:	0000b122 	andeq	fp, r0, r2, lsr #2
    1cb4:	00630300 	rsbeq	r0, r3, r0, lsl #6
    1cb8:	000000b8 	strheq	r0, [r0], -r8
    1cbc:	07b00004 	ldreq	r0, [r0, r4]!
    1cc0:	01040000 	mrseq	r0, (UNDEF: 4)
    1cc4:	00000022 	andeq	r0, r0, r2, lsr #32
    1cc8:	00040601 	andeq	r0, r4, r1, lsl #12
    1ccc:	00032f00 	andeq	r2, r3, r0, lsl #30
    1cd0:	008c1000 	addeq	r1, ip, r0
    1cd4:	00002000 	andeq	r2, r0, r0
    1cd8:	0007e400 	andeq	lr, r7, r0, lsl #8
    1cdc:	05040200 	streq	r0, [r4, #-512]	; 0x200
    1ce0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1ce4:	f3070403 	vshl.u8	d0, d3, d7
    1ce8:	03000000 	movweq	r0, #0
    1cec:	009c0601 	addseq	r0, ip, r1, lsl #12
    1cf0:	02030000 	andeq	r0, r3, #0
    1cf4:	00012405 	andeq	r2, r1, r5, lsl #8
    1cf8:	05040300 	streq	r0, [r4, #-768]	; 0x300
    1cfc:	0000011b 	andeq	r0, r0, fp, lsl r1
    1d00:	16050803 	strne	r0, [r5], -r3, lsl #16
    1d04:	03000001 	movweq	r0, #1
    1d08:	009a0801 	addseq	r0, sl, r1, lsl #16
    1d0c:	02030000 	andeq	r0, r3, #0
    1d10:	0000be07 	andeq	fp, r0, r7, lsl #28
    1d14:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1d18:	000000ee 	andeq	r0, r0, lr, ror #1
    1d1c:	e9070803 	stmdb	r7, {r0, r1, fp}
    1d20:	03000000 	movweq	r0, #0
    1d24:	010d0704 	tsteq	sp, r4, lsl #14
    1d28:	01030000 	mrseq	r0, (UNDEF: 3)
    1d2c:	0000a308 	andeq	sl, r0, r8, lsl #6
    1d30:	012e0400 	teqeq	lr, r0, lsl #8
    1d34:	03010000 	movweq	r0, #4096	; 0x1000
    1d38:	00008c10 	andeq	r8, r0, r0, lsl ip
    1d3c:	00000010 	andeq	r0, r0, r0, lsl r0
    1d40:	009c9c01 	addseq	r9, ip, r1, lsl #24
    1d44:	72050000 	andvc	r0, r5, #0
    1d48:	2c040100 	stfcss	f0, [r4], {-0}
    1d4c:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    1d50:	00000012 	andeq	r0, r0, r2, lsl r0
    1d54:	0003f806 	andeq	pc, r3, r6, lsl #16
    1d58:	200c0100 	andcs	r0, ip, r0, lsl #2
    1d5c:	1000008c 	andne	r0, r0, ip, lsl #1
    1d60:	01000000 	mrseq	r0, (UNDEF: 0)
    1d64:	0072059c 			; <UNDEFINED> instruction: 0x0072059c
    1d68:	002c0d01 	eoreq	r0, ip, r1, lsl #26
    1d6c:	12620000 	rsbne	r0, r2, #0
    1d70:	00000000 	andeq	r0, r0, r0
    1d74:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1d78:	081b0004 	ldmdaeq	fp, {r2}
    1d7c:	01040000 	mrseq	r0, (UNDEF: 4)
    1d80:	00000022 	andeq	r0, r0, r2, lsr #32
    1d84:	00042401 	andeq	r2, r4, r1, lsl #8
    1d88:	00032f00 	andeq	r2, r3, r0, lsl #30
    1d8c:	008c3000 	addeq	r3, ip, r0
    1d90:	00002800 	andeq	r2, r0, r0, lsl #16
    1d94:	00082b00 	andeq	r2, r8, r0, lsl #22
    1d98:	05040200 	streq	r0, [r4, #-512]	; 0x200
    1d9c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1da0:	f3070403 	vshl.u8	d0, d3, d7
    1da4:	03000000 	movweq	r0, #0
    1da8:	009c0601 	addseq	r0, ip, r1, lsl #12
    1dac:	02030000 	andeq	r0, r3, #0
    1db0:	00012405 	andeq	r2, r1, r5, lsl #8
    1db4:	05040300 	streq	r0, [r4, #-768]	; 0x300
    1db8:	0000011b 	andeq	r0, r0, fp, lsl r1
    1dbc:	16050803 	strne	r0, [r5], -r3, lsl #16
    1dc0:	03000001 	movweq	r0, #1
    1dc4:	009a0801 	addseq	r0, sl, r1, lsl #16
    1dc8:	02030000 	andeq	r0, r3, #0
    1dcc:	0000be07 	andeq	fp, r0, r7, lsl #28
    1dd0:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1dd4:	000000ee 	andeq	r0, r0, lr, ror #1
    1dd8:	e9070803 	stmdb	r7, {r0, r1, fp}
    1ddc:	03000000 	movweq	r0, #0
    1de0:	010d0704 	tsteq	sp, r4, lsl #14
    1de4:	01030000 	mrseq	r0, (UNDEF: 3)
    1de8:	0000a308 	andeq	sl, r0, r8, lsl #6
    1dec:	7f040400 	svcvc	0x00040400
    1df0:	05000000 	streq	r0, [r0, #-0]
    1df4:	00000072 	andeq	r0, r0, r2, ror r0
    1df8:	0000b106 	andeq	fp, r0, r6, lsl #2
    1dfc:	30040100 	andcc	r0, r4, r0, lsl #2
    1e00:	2800008c 	stmdacs	r0, {r2, r3, r7}
    1e04:	01000000 	mrseq	r0, (UNDEF: 0)
    1e08:	0000ca9c 	muleq	r0, ip, sl
    1e0c:	8c440700 	mcrrhi	7, 0, r0, r4, cr0
    1e10:	00ac0000 	adceq	r0, ip, r0
    1e14:	01080000 	mrseq	r0, (UNDEF: 8)
    1e18:	00030550 	andeq	r0, r3, r0, asr r5
    1e1c:	00000096 	muleq	r0, r6, r0
    1e20:	008c4c09 	addeq	r4, ip, r9, lsl #24
    1e24:	0000ea00 	andeq	lr, r0, r0, lsl #20
    1e28:	0000c000 	andeq	ip, r0, r0
    1e2c:	50010800 	andpl	r0, r1, r0, lsl #16
    1e30:	00640802 	rsbeq	r0, r4, r2, lsl #16
    1e34:	008c500a 	addeq	r5, ip, sl
    1e38:	0000fb00 	andeq	pc, r0, r0, lsl #22
    1e3c:	250b0000 	strcs	r0, [fp, #-0]
    1e40:	d9000000 	stmdble	r0, {}	; <UNPREDICTABLE>
    1e44:	0c000000 	stceq	0, cr0, [r0], {-0}
    1e48:	00000079 	andeq	r0, r0, r9, ror r0
    1e4c:	03880d00 	orreq	r0, r8, #0, 26
    1e50:	20020000 	andcs	r0, r2, r0
    1e54:	000000e4 	andeq	r0, r0, r4, ror #1
    1e58:	00ca0404 	sbceq	r0, sl, r4, lsl #8
    1e5c:	a80e0000 	stmdage	lr, {}	; <UNPREDICTABLE>
    1e60:	02000000 	andeq	r0, r0, #0
    1e64:	0000fb4d 	andeq	pc, r0, sp, asr #22
    1e68:	002c0c00 	eoreq	r0, ip, r0, lsl #24
    1e6c:	0f000000 	svceq	0x00000000
    1e70:	00000419 	andeq	r0, r0, r9, lsl r4
    1e74:	0b006002 	bleq	19e84 <__bss_end__+0x10474>
    1e78:	04000001 	streq	r0, [r0], #-1
    1e7c:	0008e500 	andeq	lr, r8, r0, lsl #10
    1e80:	22010400 	andcs	r0, r1, #0, 8
    1e84:	01000000 	mrseq	r0, (UNDEF: 0)
    1e88:	0000043e 	andeq	r0, r0, lr, lsr r4
    1e8c:	0000032f 	andeq	r0, r0, pc, lsr #6
    1e90:	00008c58 	andeq	r8, r0, r8, asr ip
    1e94:	00000034 	andeq	r0, r0, r4, lsr r0
    1e98:	000008c2 	andeq	r0, r0, r2, asr #17
    1e9c:	69050402 	stmdbvs	r5, {r1, sl}
    1ea0:	0300746e 	movweq	r7, #1134	; 0x46e
    1ea4:	00f30704 	rscseq	r0, r3, r4, lsl #14
    1ea8:	01030000 	mrseq	r0, (UNDEF: 3)
    1eac:	00009c06 	andeq	r9, r0, r6, lsl #24
    1eb0:	05020300 	streq	r0, [r2, #-768]	; 0x300
    1eb4:	00000124 	andeq	r0, r0, r4, lsr #2
    1eb8:	1b050403 	blne	142ecc <__bss_end__+0x1394bc>
    1ebc:	03000001 	movweq	r0, #1
    1ec0:	01160508 	tsteq	r6, r8, lsl #10
    1ec4:	01030000 	mrseq	r0, (UNDEF: 3)
    1ec8:	00009a08 	andeq	r9, r0, r8, lsl #20
    1ecc:	07020300 	streq	r0, [r2, -r0, lsl #6]
    1ed0:	000000be 	strheq	r0, [r0], -lr
    1ed4:	ee070403 	cdp	4, 0, cr0, cr7, cr3, {0}
    1ed8:	03000000 	movweq	r0, #0
    1edc:	00e90708 	rsceq	r0, r9, r8, lsl #14
    1ee0:	04030000 	streq	r0, [r3], #-0
    1ee4:	00010d07 	andeq	r0, r1, r7, lsl #26
    1ee8:	08010300 	stmdaeq	r1, {r8, r9}
    1eec:	000000a3 	andeq	r0, r0, r3, lsr #1
    1ef0:	00047404 	andeq	r7, r4, r4, lsl #8
    1ef4:	58030100 	stmdapl	r3, {r8}
    1ef8:	3400008c 	strcc	r0, [r0], #-140	; 0x8c
    1efc:	01000000 	mrseq	r0, (UNDEF: 0)
    1f00:	0000de9c 	muleq	r0, ip, lr
    1f04:	04520500 	ldrbeq	r0, [r2], #-1280	; 0x500
    1f08:	04010000 	streq	r0, [r1], #-0
    1f0c:	00000025 	andeq	r0, r0, r5, lsr #32
    1f10:	00046005 	andeq	r6, r4, r5
    1f14:	25040100 	strcs	r0, [r4, #-256]	; 0x100
    1f18:	06000000 	streq	r0, [r0], -r0
    1f1c:	00000079 	andeq	r0, r0, r9, ror r0
    1f20:	00b10501 	adcseq	r0, r1, r1, lsl #10
    1f24:	00070000 	andeq	r0, r7, r0
    1f28:	73736208 	cmnvc	r3, #8, 4	; 0x80000000
    1f2c:	de070100 	adfles	f0, f7, f0
    1f30:	86000000 	strhi	r0, [r0], -r0
    1f34:	09000012 	stmdbeq	r0, {r1, r4}
    1f38:	0000046c 	andeq	r0, r0, ip, ror #8
    1f3c:	00de0801 	sbcseq	r0, lr, r1, lsl #16
    1f40:	800a0000 	andhi	r0, sl, r0
    1f44:	fa00008c 	blx	217c <_start-0x5e84>
    1f48:	0a000000 	beq	1f50 <_start-0x60b0>
    1f4c:	00008c84 	andeq	r8, r0, r4, lsl #25
    1f50:	00000107 	andeq	r0, r0, r7, lsl #2
    1f54:	25040b00 	strcs	r0, [r4, #-2816]	; 0xb00
    1f58:	05000000 	streq	r0, [r0, #-0]
    1f5c:	00000452 	andeq	r0, r0, r2, asr r4
    1f60:	00250401 	eoreq	r0, r5, r1, lsl #8
    1f64:	60050000 	andvs	r0, r5, r0
    1f68:	01000004 	tsteq	r0, r4
    1f6c:	00002504 	andeq	r2, r0, r4, lsl #10
    1f70:	00790600 	rsbseq	r0, r9, r0, lsl #12
    1f74:	05010000 	streq	r0, [r1, #-0]
    1f78:	00000107 	andeq	r0, r0, r7, lsl #2
    1f7c:	190c0007 	stmdbne	ip, {r0, r1, r2}
    1f80:	02000004 	andeq	r0, r0, #4
    1f84:	01ad0060 			; <UNDEFINED> instruction: 0x01ad0060
    1f88:	00040000 	andeq	r0, r4, r0
    1f8c:	0000098f 	andeq	r0, r0, pc, lsl #19
    1f90:	00220104 	eoreq	r0, r2, r4, lsl #2
    1f94:	96010000 	strls	r0, [r1], -r0
    1f98:	2f000004 	svccs	0x00000004
    1f9c:	00000003 	andeq	r0, r0, r3
    1fa0:	00000000 	andeq	r0, r0, r0
    1fa4:	5c000000 	stcpl	0, cr0, [r0], {-0}
    1fa8:	02000009 	andeq	r0, r0, #9
    1fac:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1fb0:	04030074 	streq	r0, [r3], #-116	; 0x74
    1fb4:	0000f307 	andeq	pc, r0, r7, lsl #6
    1fb8:	06010300 	streq	r0, [r1], -r0, lsl #6
    1fbc:	0000009c 	muleq	r0, ip, r0
    1fc0:	24050203 	strcs	r0, [r5], #-515	; 0x203
    1fc4:	03000001 	movweq	r0, #1
    1fc8:	011b0504 	tsteq	fp, r4, lsl #10
    1fcc:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1fd0:	00011605 	andeq	r1, r1, r5, lsl #12
    1fd4:	08010300 	stmdaeq	r1, {r8, r9}
    1fd8:	0000009a 	muleq	r0, sl, r0
    1fdc:	be070203 	cdplt	2, 0, cr0, cr7, cr3, {0}
    1fe0:	03000000 	movweq	r0, #0
    1fe4:	00ee0704 	rsceq	r0, lr, r4, lsl #14
    1fe8:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1fec:	0000e907 	andeq	lr, r0, r7, lsl #18
    1ff0:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1ff4:	0000010d 	andeq	r0, r0, sp, lsl #2
    1ff8:	a3080103 	movwge	r0, #33027	; 0x8103
    1ffc:	04000000 	streq	r0, [r0], #-0
    2000:	0000047c 	andeq	r0, r0, ip, ror r4
    2004:	00250e01 	eoreq	r0, r5, r1, lsl #28
    2008:	8c8c0000 	stchi	0, cr0, [ip], {0}
    200c:	00180000 	andseq	r0, r8, r0
    2010:	9c010000 	stcls	0, cr0, [r1], {-0}
    2014:	000000a2 	andeq	r0, r0, r2, lsr #1
    2018:	0004e805 	andeq	lr, r4, r5, lsl #16
    201c:	2c0f0100 	stfcss	f0, [pc], {-0}
    2020:	a6000000 	strge	r0, [r0], -r0
    2024:	00000012 	andeq	r0, r0, r2, lsl r0
    2028:	0004cb06 	andeq	ip, r4, r6, lsl #22
    202c:	a4170100 	ldrge	r0, [r7], #-256	; 0x100
    2030:	1400008c 	strne	r0, [r0], #-140	; 0x8c
    2034:	01000000 	mrseq	r0, (UNDEF: 0)
    2038:	0000c79c 	muleq	r0, ip, r7
    203c:	04e80500 	strbteq	r0, [r8], #1280	; 0x500
    2040:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    2044:	0000002c 	andeq	r0, r0, ip, lsr #32
    2048:	000012c5 	andeq	r1, r0, r5, asr #5
    204c:	04190600 	ldreq	r0, [r9], #-1536	; 0x600
    2050:	1f010000 	svcne	0x00010000
    2054:	00008cb8 			; <UNDEFINED> instruction: 0x00008cb8
    2058:	00000048 	andeq	r0, r0, r8, asr #32
    205c:	01779c01 	cmneq	r7, r1, lsl #24
    2060:	e0070000 	and	r0, r7, r0
    2064:	01000004 	tsteq	r0, r4
    2068:	0001772a 	andeq	r7, r1, sl, lsr #14
    206c:	10001c00 	andne	r1, r0, r0, lsl #24
    2070:	04c30720 	strbeq	r0, [r3], #1824	; 0x720
    2074:	2b010000 	blcs	4207c <__bss_end__+0x3866c>
    2078:	00000177 	andeq	r0, r0, r7, ror r1
    207c:	20100024 	andscs	r0, r0, r4, lsr #32
    2080:	00048a07 	andeq	r8, r4, r7, lsl #20
    2084:	772c0100 	strvc	r0, [ip, -r0, lsl #2]!
    2088:	00000001 	andeq	r0, r0, r1
    208c:	085a0000 	ldmdaeq	sl, {}^	; <UNPREDICTABLE>
    2090:	000004aa 	andeq	r0, r0, sl, lsr #9
    2094:	01772d01 	cmneq	r7, r1, lsl #26
    2098:	09200000 	stmdbeq	r0!, {}	; <UNPREDICTABLE>
    209c:	00008cc0 	andeq	r8, r0, r0, asr #25
    20a0:	00000079 	andeq	r0, r0, r9, ror r0
    20a4:	008ccc09 	addeq	ip, ip, r9, lsl #24
    20a8:	0000a200 	andeq	sl, r0, r0, lsl #4
    20ac:	8cd40a00 	vldmiahi	r4, {s1-s0}
    20b0:	018d0000 	orreq	r0, sp, r0
    20b4:	013a0000 	teqeq	sl, r0
    20b8:	010b0000 	mrseq	r0, (UNDEF: 11)
    20bc:	004e0150 	subeq	r0, lr, r0, asr r1
    20c0:	008ce00a 	addeq	lr, ip, sl
    20c4:	00019e00 	andeq	r9, r1, r0, lsl #28
    20c8:	00015a00 	andeq	r5, r1, r0, lsl #20
    20cc:	51010b00 	tstpl	r1, r0, lsl #22
    20d0:	00010c05 	andeq	r0, r1, r5, lsl #24
    20d4:	010b5a00 	tsteq	fp, r0, lsl #20
    20d8:	240c0550 	strcs	r0, [ip], #-1360	; 0x550
    20dc:	00201000 	eoreq	r1, r0, r0
    20e0:	008cec0c 	addeq	lr, ip, ip, lsl #24
    20e4:	00019e00 	andeq	r9, r1, r0, lsl #28
    20e8:	51010b00 	tstpl	r1, r0, lsl #22
    20ec:	00200c05 	eoreq	r0, r0, r5, lsl #24
    20f0:	010b5a00 	tsteq	fp, r0, lsl #20
    20f4:	1c0c0550 	cfstr32ne	mvfx0, [ip], {80}	; 0x50
    20f8:	00201000 	eoreq	r1, r0, r0
    20fc:	00250d00 	eoreq	r0, r5, r0, lsl #26
    2100:	7f080000 	svcvc	0x00080000
    2104:	01000004 	tsteq	r0, r4
    2108:	0001880d 	andeq	r8, r1, sp, lsl #16
    210c:	2c0d1000 	stccs	0, cr1, [sp], {-0}
    2110:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2114:	000000a8 	andeq	r0, r0, r8, lsr #1
    2118:	019e4d02 	orrseq	r4, lr, r2, lsl #26
    211c:	2c0f0000 	stccs	0, cr0, [pc], {-0}
    2120:	00000000 	andeq	r0, r0, r0
    2124:	0004da10 	andeq	sp, r4, r0, lsl sl
    2128:	0f940200 	svceq	0x00940200
    212c:	0000002c 	andeq	r0, r0, ip, lsr #32
    2130:	00002c0f 	andeq	r2, r0, pc, lsl #24
    2134:	f7000000 			; <UNDEFINED> instruction: 0xf7000000
    2138:	04000001 	streq	r0, [r0], #-1
    213c:	000a7d00 	andeq	r7, sl, r0, lsl #26
    2140:	22010400 	andcs	r0, r1, #0, 8
    2144:	01000000 	mrseq	r0, (UNDEF: 0)
    2148:	00000503 	andeq	r0, r0, r3, lsl #10
    214c:	0000032f 	andeq	r0, r0, pc, lsr #6
    2150:	00008d00 	andeq	r8, r0, r0, lsl #26
    2154:	00000098 	muleq	r0, r8, r0
    2158:	000009f9 	strdeq	r0, [r0], -r9
    215c:	69050402 	stmdbvs	r5, {r1, sl}
    2160:	0300746e 	movweq	r7, #1134	; 0x46e
    2164:	00f30704 	rscseq	r0, r3, r4, lsl #14
    2168:	01030000 	mrseq	r0, (UNDEF: 3)
    216c:	00009c06 	andeq	r9, r0, r6, lsl #24
    2170:	05020300 	streq	r0, [r2, #-768]	; 0x300
    2174:	00000124 	andeq	r0, r0, r4, lsr #2
    2178:	1b050403 	blne	14318c <__bss_end__+0x13977c>
    217c:	03000001 	movweq	r0, #1
    2180:	01160508 	tsteq	r6, r8, lsl #10
    2184:	01030000 	mrseq	r0, (UNDEF: 3)
    2188:	00009a08 	andeq	r9, r0, r8, lsl #20
    218c:	07020300 	streq	r0, [r2, -r0, lsl #6]
    2190:	000000be 	strheq	r0, [r0], -lr
    2194:	ee070403 	cdp	4, 0, cr0, cr7, cr3, {0}
    2198:	03000000 	movweq	r0, #0
    219c:	00e90708 	rsceq	r0, r9, r8, lsl #14
    21a0:	04030000 	streq	r0, [r3], #-0
    21a4:	00010d07 	andeq	r0, r1, r7, lsl #26
    21a8:	08010300 	stmdaeq	r1, {r8, r9}
    21ac:	000000a3 	andeq	r0, r0, r3, lsr #1
    21b0:	00052204 	andeq	r2, r5, r4, lsl #4
    21b4:	00050100 	andeq	r0, r5, r0, lsl #2
    21b8:	1c00008d 	stcne	0, cr0, [r0], {141}	; 0x8d
    21bc:	01000000 	mrseq	r0, (UNDEF: 0)
    21c0:	00009e9c 	muleq	r0, ip, lr
    21c4:	051c0500 	ldreq	r0, [ip, #-1280]	; 0x500
    21c8:	05010000 	streq	r0, [r1, #-0]
    21cc:	0000002c 	andeq	r0, r0, ip, lsr #32
    21d0:	000012ef 	andeq	r1, r0, pc, ror #5
    21d4:	029f0600 	addseq	r0, pc, #0, 12
    21d8:	0b010000 	bleq	421e0 <__bss_end__+0x387d0>
    21dc:	0000002c 	andeq	r0, r0, ip, lsr #32
    21e0:	00008d1c 	andeq	r8, r0, ip, lsl sp
    21e4:	00000014 	andeq	r0, r0, r4, lsl r0
    21e8:	00cb9c01 	sbceq	r9, fp, r1, lsl #24
    21ec:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
    21f0:	de00008d 	cdple	0, 0, cr0, cr0, cr13, {4}
    21f4:	08000001 	stmdaeq	r0, {r0}
    21f8:	0c055001 	stceq	0, cr5, [r5], {1}
    21fc:	20003004 	andcs	r3, r0, r4
    2200:	38060000 	stmdacc	r6, {}	; <UNPREDICTABLE>
    2204:	01000005 	tsteq	r0, r5
    2208:	00002c10 	andeq	r2, r0, r0, lsl ip
    220c:	008d3000 	addeq	r3, sp, r0
    2210:	00001c00 	andeq	r1, r0, r0, lsl #24
    2214:	0d9c0100 	ldfeqs	f0, [ip]
    2218:	09000001 	stmdbeq	r0, {r0}
    221c:	12010075 	andne	r0, r1, #117	; 0x75
    2220:	0000002c 	andeq	r0, r0, ip, lsr #32
    2224:	00001323 	andeq	r1, r0, r3, lsr #6
    2228:	008d380a 	addeq	r3, sp, sl, lsl #16
    222c:	0001f300 	andeq	pc, r1, r0, lsl #6
    2230:	8d3c0a00 	vldmdbhi	ip!, {s0-s-1}
    2234:	009e0000 	addseq	r0, lr, r0
    2238:	440a0000 	strmi	r0, [sl], #-0
    223c:	f300008d 	vhadd.u8	d0, d16, d13
    2240:	00000001 	andeq	r0, r0, r1
    2244:	00052f04 	andeq	r2, r5, r4, lsl #30
    2248:	4c170100 	ldfmis	f0, [r7], {-0}
    224c:	2400008d 	strcs	r0, [r0], #-141	; 0x8d
    2250:	01000000 	mrseq	r0, (UNDEF: 0)
    2254:	00016b9c 	muleq	r1, ip, fp
    2258:	73750b00 	cmnvc	r5, #0, 22
    225c:	2c170100 	ldfcss	f0, [r7], {-0}
    2260:	41000000 	mrsmi	r0, (UNDEF: 0)
    2264:	0c000013 	stceq	0, cr0, [r0], {19}
    2268:	01006272 	tsteq	r0, r2, ror r2
    226c:	00002c18 	andeq	r2, r0, r8, lsl ip
    2270:	0d540100 	ldfeqe	f0, [r4, #-0]
    2274:	00008d5c 	andeq	r8, r0, ip, asr sp
    2278:	00000010 	andeq	r0, r0, r0, lsl r0
    227c:	00000161 	andeq	r0, r0, r1, ror #2
    2280:	00617209 	rsbeq	r7, r1, r9, lsl #4
    2284:	002c1a01 	eoreq	r1, ip, r1, lsl #20
    2288:	135f0000 	cmpne	pc, #0
    228c:	600a0000 	andvs	r0, sl, r0
    2290:	cb00008d 	blgt	24cc <_start-0x5b34>
    2294:	00000000 	andeq	r0, r0, r0
    2298:	008d580a 	addeq	r5, sp, sl, lsl #16
    229c:	0000cb00 	andeq	ip, r0, r0, lsl #22
    22a0:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
    22a4:	01000000 	mrseq	r0, (UNDEF: 0)
    22a8:	008d7020 	addeq	r7, sp, r0, lsr #32
    22ac:	00001400 	andeq	r1, r0, r0, lsl #8
    22b0:	a49c0100 	ldrge	r0, [ip], #256	; 0x100
    22b4:	0b000001 	bleq	22c0 <_start-0x5d40>
    22b8:	0100736d 	tsteq	r0, sp, ror #6
    22bc:	00002c20 	andeq	r2, r0, r0, lsr #24
    22c0:	00137200 	andseq	r7, r3, r0, lsl #4
    22c4:	8d800700 	stchi	7, cr0, [r0]
    22c8:	010d0000 	mrseq	r0, (UNDEF: 13)
    22cc:	01080000 	mrseq	r0, (UNDEF: 8)
    22d0:	01f30750 	mvnseq	r0, r0, asr r7
    22d4:	03e80a50 	mvneq	r0, #80, 20	; 0x50000
    22d8:	0400001e 	streq	r0, [r0], #-30
    22dc:	000004f9 	strdeq	r0, [r0], -r9
    22e0:	8d842301 	stchi	3, cr2, [r4, #4]
    22e4:	00140000 	andseq	r0, r4, r0
    22e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    22ec:	000001de 	ldrdeq	r0, [r0], -lr
    22f0:	6365730b 	cmnvs	r5, #738197504	; 0x2c000000
    22f4:	2c230100 	stfcss	f0, [r3], #-0
    22f8:	93000000 	movwls	r0, #0
    22fc:	07000013 	smladeq	r0, r3, r0, r0
    2300:	00008d94 	muleq	r0, r4, sp
    2304:	0000016b 	andeq	r0, r0, fp, ror #2
    2308:	07500108 	ldrbeq	r0, [r0, -r8, lsl #2]
    230c:	0a5001f3 	beq	1402ae0 <__bss_end__+0x13f90d0>
    2310:	001e03e8 	andseq	r0, lr, r8, ror #7
    2314:	05160e00 	ldreq	r0, [r6, #-3584]	; 0xe00
    2318:	a0020000 	andge	r0, r2, r0
    231c:	0000002c 	andeq	r0, r0, ip, lsr #32
    2320:	000001f3 	strdeq	r0, [r0], -r3
    2324:	00002c0f 	andeq	r2, r0, pc, lsl #24
    2328:	ed100000 	ldc	0, cr0, [r0, #-0]
    232c:	02000004 	andeq	r0, r0, #4
    2330:	03ff0084 	mvnseq	r0, #132	; 0x84
    2334:	00040000 	andeq	r0, r4, r0
    2338:	00000b73 	andeq	r0, r0, r3, ror fp
    233c:	00220104 	eoreq	r0, r2, r4, lsl #2
    2340:	67010000 	strvs	r0, [r1, -r0]
    2344:	2f000002 	svccs	0x00000002
    2348:	fc000003 	stc2	0, cr0, [r0], {3}
    234c:	5400008d 	strpl	r0, [r0], #-141	; 0x8d
    2350:	a2000001 	andge	r0, r0, #1
    2354:	0200000a 	andeq	r0, r0, #10
    2358:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    235c:	04030074 	streq	r0, [r3], #-116	; 0x74
    2360:	0000f307 	andeq	pc, r0, r7, lsl #6
    2364:	06010300 	streq	r0, [r1], -r0, lsl #6
    2368:	0000009c 	muleq	r0, ip, r0
    236c:	24050203 	strcs	r0, [r5], #-515	; 0x203
    2370:	03000001 	movweq	r0, #1
    2374:	011b0504 	tsteq	fp, r4, lsl #10
    2378:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    237c:	00011605 	andeq	r1, r1, r5, lsl #12
    2380:	08010300 	stmdaeq	r1, {r8, r9}
    2384:	0000009a 	muleq	r0, sl, r0
    2388:	be070203 	cdplt	2, 0, cr0, cr7, cr3, {0}
    238c:	03000000 	movweq	r0, #0
    2390:	00ee0704 	rsceq	r0, lr, r4, lsl #14
    2394:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2398:	0000e907 	andeq	lr, r0, r7, lsl #18
    239c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    23a0:	0000010d 	andeq	r0, r0, sp, lsl #2
    23a4:	a3080103 	movwge	r0, #33027	; 0x8103
    23a8:	04000000 	streq	r0, [r0], #-0
    23ac:	b20c0201 	andlt	r0, ip, #268435456	; 0x10000000
    23b0:	05000000 	streq	r0, [r0, #-0]
    23b4:	000006ac 	andeq	r0, r0, ip, lsr #13
    23b8:	05ae0500 	streq	r0, [lr, #1280]!	; 0x500
    23bc:	05010000 	streq	r0, [r1, #-0]
    23c0:	00000573 	andeq	r0, r0, r3, ror r5
    23c4:	05bf0504 	ldreq	r0, [pc, #1284]!	; 28d0 <_start-0x5730>
    23c8:	05050000 	streq	r0, [r5, #-0]
    23cc:	000005ce 	andeq	r0, r0, lr, asr #11
    23d0:	05dd0506 	ldrbeq	r0, [sp, #1286]	; 0x506
    23d4:	05070000 	streq	r0, [r7, #-0]
    23d8:	0000066d 	andeq	r0, r0, sp, ror #12
    23dc:	05ec0503 	strbeq	r0, [ip, #1283]!	; 0x503
    23e0:	00020000 	andeq	r0, r2, r0
    23e4:	00061f06 	andeq	r1, r6, r6, lsl #30
    23e8:	79150200 	ldmdbvc	r5, {r9}
    23ec:	07000000 	streq	r0, [r0, -r0]
    23f0:	00000582 	andeq	r0, r0, r2, lsl #11
    23f4:	00255701 	eoreq	r5, r5, r1, lsl #14
    23f8:	8dfc0000 	ldclhi	0, cr0, [ip]
    23fc:	001c0000 	andseq	r0, ip, r0
    2400:	9c010000 	stcls	0, cr0, [r1], {-0}
    2404:	000000e0 	andeq	r0, r0, r0, ror #1
    2408:	008e0c08 	addeq	r0, lr, r8, lsl #24
    240c:	0003a800 	andeq	sl, r3, r0, lsl #16
    2410:	81090000 	mrshi	r0, (UNDEF: 9)
    2414:	01000000 	mrseq	r0, (UNDEF: 0)
    2418:	008e1837 	addeq	r1, lr, r7, lsr r8
    241c:	00009c00 	andeq	r9, r0, r0, lsl #24
    2420:	e69c0100 	ldr	r0, [ip], r0, lsl #2
    2424:	08000001 	stmdaeq	r0, {r0}
    2428:	00008e20 	andeq	r8, r0, r0, lsr #28
    242c:	000003c9 	andeq	r0, r0, r9, asr #7
    2430:	008e2c0a 	addeq	r2, lr, sl, lsl #24
    2434:	0003d000 	andeq	sp, r3, r0
    2438:	00011600 	andeq	r1, r1, r0, lsl #12
    243c:	51010b00 	tstpl	r1, r0, lsl #22
    2440:	010b3201 	tsteq	fp, r1, lsl #4
    2444:	003e0150 	eorseq	r0, lr, r0, asr r1
    2448:	008e380a 	addeq	r3, lr, sl, lsl #16
    244c:	0003d000 	andeq	sp, r3, r0
    2450:	00012e00 	andeq	r2, r1, r0, lsl #28
    2454:	51010b00 	tstpl	r1, r0, lsl #22
    2458:	010b3201 	tsteq	fp, r1, lsl #4
    245c:	003f0150 	eorseq	r0, pc, r0, asr r1	; <UNPREDICTABLE>
    2460:	008e3c08 	addeq	r3, lr, r8, lsl #24
    2464:	0003c900 	andeq	ip, r3, r0, lsl #18
    2468:	8e4c0a00 	vmlahi.f32	s1, s24, s0
    246c:	03a80000 			; <UNDEFINED> instruction: 0x03a80000
    2470:	014b0000 	mrseq	r0, (UNDEF: 75)
    2474:	010b0000 	mrseq	r0, (UNDEF: 11)
    2478:	00750250 	rsbseq	r0, r5, r0, asr r2
    247c:	8e580a00 	vnmlshi.f32	s1, s16, s0
    2480:	03e60000 	mvneq	r0, #0
    2484:	015f0000 	cmpeq	pc, r0
    2488:	010b0000 	mrseq	r0, (UNDEF: 11)
    248c:	00750250 	rsbseq	r0, r5, r0, asr r2
    2490:	8e5c0800 	cdphi	8, 5, cr0, cr12, cr0, {0}
    2494:	03c90000 	biceq	r0, r9, #0
    2498:	680a0000 	stmdavs	sl, {}	; <UNPREDICTABLE>
    249c:	e600008e 	str	r0, [r0], -lr, lsl #1
    24a0:	7b000003 	blvc	24b4 <_start-0x5b4c>
    24a4:	0b000001 	bleq	24b0 <_start-0x5b50>
    24a8:	30015101 	andcc	r5, r1, r1, lsl #2
    24ac:	8e740a00 	vaddhi.f32	s1, s8, s0
    24b0:	03e60000 	mvneq	r0, #0
    24b4:	018e0000 	orreq	r0, lr, r0
    24b8:	010b0000 	mrseq	r0, (UNDEF: 11)
    24bc:	00300151 	eorseq	r0, r0, r1, asr r1
    24c0:	008e800a 	addeq	r8, lr, sl
    24c4:	0003e600 	andeq	lr, r3, r0, lsl #12
    24c8:	0001a100 	andeq	sl, r1, r0, lsl #2
    24cc:	51010b00 	tstpl	r1, r0, lsl #22
    24d0:	0a003601 	beq	fcdc <__bss_end__+0x62cc>
    24d4:	00008e8c 	andeq	r8, r0, ip, lsl #29
    24d8:	000003e6 	andeq	r0, r0, r6, ror #7
    24dc:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
    24e0:	0151010b 	cmpeq	r1, fp, lsl #2
    24e4:	980a0033 	stmdals	sl, {r0, r1, r4, r5}
    24e8:	e600008e 	str	r0, [r0], -lr, lsl #1
    24ec:	c9000003 	stmdbgt	r0, {r0, r1}
    24f0:	0b000001 	bleq	24fc <_start-0x5b04>
    24f4:	0a035101 	beq	d6900 <__bss_end__+0xccef0>
    24f8:	0a00010e 	beq	2938 <_start-0x56c8>
    24fc:	00008ea4 	andeq	r8, r0, r4, lsr #29
    2500:	000003e6 	andeq	r0, r0, r6, ror #7
    2504:	000001dc 	ldrdeq	r0, [r0], -ip
    2508:	0151010b 	cmpeq	r1, fp, lsl #2
    250c:	a8080033 	stmdage	r8, {r0, r1, r4, r5}
    2510:	c900008e 	stmdbgt	r0, {r1, r2, r3, r7}
    2514:	00000003 	andeq	r0, r0, r3
    2518:	0001fc0c 	andeq	pc, r1, ip, lsl #24
    251c:	255d0100 	ldrbcs	r0, [sp, #-256]	; 0x100
    2520:	b4000000 	strlt	r0, [r0], #-0
    2524:	2800008e 	stmdacs	r0, {r1, r2, r3, r7}
    2528:	01000000 	mrseq	r0, (UNDEF: 0)
    252c:	0002129c 	muleq	r2, ip, r2
    2530:	8ebc0800 	cdphi	8, 11, cr0, cr12, cr0, {0}
    2534:	00bd0000 	adcseq	r0, sp, r0
    2538:	d0080000 	andle	r0, r8, r0
    253c:	a800008e 	stmdage	r0, {r1, r2, r3, r7}
    2540:	00000003 	andeq	r0, r0, r3
    2544:	00062b0c 	andeq	r2, r6, ip, lsl #22
    2548:	25640100 	strbcs	r0, [r4, #-256]!	; 0x100
    254c:	dc000000 	stcle	0, cr0, [r0], {-0}
    2550:	1c00008e 	stcne	0, cr0, [r0], {142}	; 0x8e
    2554:	01000000 	mrseq	r0, (UNDEF: 0)
    2558:	0002359c 	muleq	r2, ip, r5
    255c:	8eec0800 	cdphi	8, 14, cr0, cr12, cr0, {0}
    2560:	03a80000 			; <UNDEFINED> instruction: 0x03a80000
    2564:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2568:	00000239 	andeq	r0, r0, r9, lsr r2
    256c:	8ef86a01 	vmovhi.f32	s13, #129	; 0x81
    2570:	002c0000 	eoreq	r0, ip, r0
    2574:	9c010000 	stcls	0, cr0, [r1], {-0}
    2578:	00000271 	andeq	r0, r0, r1, ror r2
    257c:	0100630d 	tsteq	r0, sp, lsl #6
    2580:	00002c6a 	andeq	r2, r0, sl, ror #24
    2584:	0013b400 	andseq	fp, r3, r0, lsl #8
    2588:	8f040800 	svchi	0x00040800
    258c:	02120000 	andseq	r0, r2, #0
    2590:	1c0e0000 	stcne	0, cr0, [lr], {-0}
    2594:	e600008f 	str	r0, [r0], -pc, lsl #1
    2598:	0b000003 	bleq	25ac <_start-0x5a54>
    259c:	74025101 	strvc	r5, [r2], #-257	; 0x101
    25a0:	0c000000 	stceq	0, cr0, [r0], {-0}
    25a4:	000005a0 	andeq	r0, r0, r0, lsr #11
    25a8:	00257401 	eoreq	r7, r5, r1, lsl #8
    25ac:	8f240000 	svchi	0x00240000
    25b0:	000c0000 	andeq	r0, ip, r0
    25b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    25b8:	00000294 	muleq	r0, r4, r2
    25bc:	008f2c08 	addeq	r2, pc, r8, lsl #24
    25c0:	0000bd00 	andeq	fp, r0, r0, lsl #26
    25c4:	cb0c0000 	blgt	3025cc <__bss_end__+0x2f8bbc>
    25c8:	01000006 	tsteq	r0, r6
    25cc:	00002578 	andeq	r2, r0, r8, ror r5
    25d0:	008f3000 	addeq	r3, pc, r0
    25d4:	00002000 	andeq	r2, r0, r0
    25d8:	c09c0100 	addsgt	r0, ip, r0, lsl #2
    25dc:	08000002 	stmdaeq	r0, {r1}
    25e0:	00008f38 	andeq	r8, r0, r8, lsr pc
    25e4:	00000271 	andeq	r0, r0, r1, ror r2
    25e8:	008f4408 	addeq	r4, pc, r8, lsl #8
    25ec:	0001e600 	andeq	lr, r1, r0, lsl #12
    25f0:	450f0000 	strmi	r0, [pc, #-0]	; 25f8 <_start-0x5a08>
    25f4:	01000006 	tsteq	r0, r6
    25f8:	0002d116 	andeq	sp, r2, r6, lsl r1
    25fc:	44030500 	strmi	r0, [r3], #-1280	; 0x500
    2600:	10000093 	mulne	r0, r3, r0
    2604:	0002d704 	andeq	sp, r2, r4, lsl #14
    2608:	002c1100 	eoreq	r1, ip, r0, lsl #2
    260c:	390f0000 	stmdbcc	pc, {}	; <UNPREDICTABLE>
    2610:	01000006 	tsteq	r0, r6
    2614:	0002d117 	andeq	sp, r2, r7, lsl r1
    2618:	18030500 	stmdane	r3, {r8, sl}
    261c:	0f000093 	svceq	0x00000093
    2620:	00000556 	andeq	r0, r0, r6, asr r5
    2624:	02d11a01 	sbcseq	r1, r1, #4096	; 0x1000
    2628:	03050000 	movweq	r0, #20480	; 0x5000
    262c:	00009330 	andeq	r9, r0, r0, lsr r3
    2630:	0005fb0f 	andeq	pc, r5, pc, lsl #22
    2634:	d11b0100 	tstle	fp, r0, lsl #2
    2638:	05000002 	streq	r0, [r0, #-2]
    263c:	00932003 	addseq	r2, r3, r3
    2640:	06100f00 	ldreq	r0, [r0], -r0, lsl #30
    2644:	1c010000 	stcne	0, cr0, [r1], {-0}
    2648:	000002d1 	ldrdeq	r0, [r0], -r1
    264c:	93240305 	teqls	r4, #335544320	; 0x14000000
    2650:	9d0f0000 	stcls	0, cr0, [pc, #-0]	; 2658 <_start-0x59a8>
    2654:	01000006 	tsteq	r0, r6
    2658:	0002d11d 	andeq	sp, r2, sp, lsl r1
    265c:	28030500 	stmdacs	r3, {r8, sl}
    2660:	0f000093 	svceq	0x00000093
    2664:	00000547 	andeq	r0, r0, r7, asr #10
    2668:	02d11e01 	sbcseq	r1, r1, #1, 28
    266c:	03050000 	movweq	r0, #20480	; 0x5000
    2670:	00009340 	andeq	r9, r0, r0, asr #6
    2674:	0006bc0f 	andeq	fp, r6, pc, lsl #24
    2678:	d11f0100 	tstle	pc, r0, lsl #2
    267c:	05000002 	streq	r0, [r0, #-2]
    2680:	00931403 	addseq	r1, r3, r3, lsl #8
    2684:	05640f00 	strbeq	r0, [r4, #-3840]!	; 0xf00
    2688:	20010000 	andcs	r0, r1, r0
    268c:	000002d1 	ldrdeq	r0, [r0], -r1
    2690:	933c0305 	teqls	ip, #335544320	; 0x14000000
    2694:	8e0f0000 	cdphi	0, 0, cr0, cr15, cr0, {0}
    2698:	01000006 	tsteq	r0, r6
    269c:	0002d121 	andeq	sp, r2, r1, lsr #2
    26a0:	38030500 	stmdacc	r3, {r8, sl}
    26a4:	0f000093 	svceq	0x00000093
    26a8:	00000590 	muleq	r0, r0, r5
    26ac:	02d12201 	sbcseq	r2, r1, #268435456	; 0x10000000
    26b0:	03050000 	movweq	r0, #20480	; 0x5000
    26b4:	0000931c 	andeq	r9, r0, ip, lsl r3
    26b8:	00065d0f 	andeq	r5, r6, pc, lsl #26
    26bc:	d1230100 	teqle	r3, r0, lsl #2
    26c0:	05000002 	streq	r0, [r0, #-2]
    26c4:	00933403 	addseq	r3, r3, r3, lsl #8
    26c8:	064d0f00 	strbeq	r0, [sp], -r0, lsl #30
    26cc:	24010000 	strcs	r0, [r1], #-0
    26d0:	000002d1 	ldrdeq	r0, [r0], -r1
    26d4:	932c0305 	teqls	ip, #335544320	; 0x14000000
    26d8:	db120000 	blle	4826e0 <__bss_end__+0x478cd0>
    26dc:	03000006 	movweq	r0, #6
    26e0:	00002ca1 	andeq	r2, r0, r1, lsr #25
    26e4:	0003bd00 	andeq	fp, r3, r0, lsl #26
    26e8:	03bd1300 			; <UNDEFINED> instruction: 0x03bd1300
    26ec:	10000000 	andne	r0, r0, r0
    26f0:	0003c304 	andeq	ip, r3, r4, lsl #6
    26f4:	03c81400 	biceq	r1, r8, #0, 8
    26f8:	16150000 	ldrne	r0, [r5], -r0
    26fc:	000004ed 	andeq	r0, r0, sp, ror #9
    2700:	7c178403 	cfldrsvc	mvf8, [r7], {3}
    2704:	02000006 	andeq	r0, r0, #6
    2708:	0003e619 	andeq	lr, r3, r9, lsl r6
    270c:	002c1300 	eoreq	r1, ip, r0, lsl #6
    2710:	b2130000 	andslt	r0, r3, #0
    2714:	00000000 	andeq	r0, r0, r0
    2718:	00060a17 	andeq	r0, r6, r7, lsl sl
    271c:	fc950300 	ldc2	3, cr0, [r5], {0}
    2720:	13000003 	movwne	r0, #3
    2724:	000003fc 	strdeq	r0, [r0], -ip
    2728:	00002c13 	andeq	r2, r0, r3, lsl ip
    272c:	04100000 	ldreq	r0, [r0], #-0
    2730:	000003c8 	andeq	r0, r0, r8, asr #7
    2734:	00056800 	andeq	r6, r5, r0, lsl #16
    2738:	bb000400 	bllt	3740 <_start-0x48c0>
    273c:	0400000c 	streq	r0, [r0], #-12
    2740:	00002201 	andeq	r2, r0, r1, lsl #4
    2744:	075c0100 	ldrbeq	r0, [ip, -r0, lsl #2]
    2748:	032f0000 	teqeq	pc, #0
    274c:	8f500000 	svchi	0x00500000
    2750:	03ac0000 			; <UNDEFINED> instruction: 0x03ac0000
    2754:	0b1d0000 	bleq	74275c <__bss_end__+0x738d4c>
    2758:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    275c:	0000e907 	andeq	lr, r0, r7, lsl #18
    2760:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2764:	000000f3 	strdeq	r0, [r0], -r3
    2768:	9c060102 	stflss	f0, [r6], {2}
    276c:	02000000 	andeq	r0, r0, #0
    2770:	01240502 	teqeq	r4, r2, lsl #10
    2774:	04020000 	streq	r0, [r2], #-0
    2778:	00011b05 	andeq	r1, r1, r5, lsl #22
    277c:	05080200 	streq	r0, [r8, #-512]	; 0x200
    2780:	00000116 	andeq	r0, r0, r6, lsl r1
    2784:	9a080102 	bls	202b94 <__bss_end__+0x1f9184>
    2788:	02000000 	andeq	r0, r0, #0
    278c:	00be0702 	adcseq	r0, lr, r2, lsl #14
    2790:	04020000 	streq	r0, [r2], #-0
    2794:	0000ee07 	andeq	lr, r0, r7, lsl #28
    2798:	05040300 	streq	r0, [r4, #-768]	; 0x300
    279c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    27a0:	0d070402 	cfstrseq	mvf0, [r7, #-8]
    27a4:	02000001 	andeq	r0, r0, #1
    27a8:	00a30801 	adceq	r0, r3, r1, lsl #16
    27ac:	01040000 	mrseq	r0, (UNDEF: 4)
    27b0:	00b20c02 	adcseq	r0, r2, r2, lsl #24
    27b4:	ac050000 	stcge	0, cr0, [r5], {-0}
    27b8:	00000006 	andeq	r0, r0, r6
    27bc:	0005ae05 	andeq	sl, r5, r5, lsl #28
    27c0:	73050100 	movwvc	r0, #20736	; 0x5100
    27c4:	04000005 	streq	r0, [r0], #-5
    27c8:	0005bf05 	andeq	fp, r5, r5, lsl #30
    27cc:	ce050500 	cfsh32gt	mvfx0, mvfx5, #0
    27d0:	06000005 	streq	r0, [r0], -r5
    27d4:	0005dd05 	andeq	sp, r5, r5, lsl #26
    27d8:	6d050700 	stcvs	7, cr0, [r5, #-0]
    27dc:	03000006 	movweq	r0, #6
    27e0:	0005ec05 	andeq	lr, r5, r5, lsl #24
    27e4:	06000200 	streq	r0, [r0], -r0, lsl #4
    27e8:	0000061f 	andeq	r0, r0, pc, lsl r6
    27ec:	00791502 	rsbseq	r1, r9, r2, lsl #10
    27f0:	fc070000 	stc2	0, cr0, [r7], {-0}
    27f4:	01000002 	tsteq	r0, r2
    27f8:	008f503f 	addeq	r5, pc, pc, lsr r0	; <UNPREDICTABLE>
    27fc:	0000d400 	andeq	sp, r0, r0, lsl #8
    2800:	339c0100 	orrscc	r0, ip, #0, 2
    2804:	08000001 	stmdaeq	r0, {r0}
    2808:	006e6970 	rsbeq	r6, lr, r0, ror r9
    280c:	002c3f01 	eoreq	r3, ip, r1, lsl #30
    2810:	13d20000 	bicsne	r0, r2, #0
    2814:	63090000 	movwvs	r0, #36864	; 0x9000
    2818:	01000007 	tsteq	r0, r7
    281c:	00013347 	andeq	r3, r1, r7, asr #6
    2820:	0013f000 	andseq	pc, r3, r0
    2824:	07490900 	strbeq	r0, [r9, -r0, lsl #18]
    2828:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    282c:	0000002c 	andeq	r0, r0, ip, lsr #32
    2830:	00001445 	andeq	r1, r0, r5, asr #8
    2834:	00075409 	andeq	r5, r7, r9, lsl #8
    2838:	2c570100 	ldfcse	f0, [r7], {-0}
    283c:	11000000 	mrsne	r0, (UNDEF: 0)
    2840:	0a000016 	beq	28a0 <_start-0x5760>
    2844:	00008fe4 	andeq	r8, r0, r4, ror #31
    2848:	0000052e 	andeq	r0, r0, lr, lsr #10
    284c:	00000122 	andeq	r0, r0, r2, lsr #2
    2850:	0250010b 	subseq	r0, r0, #-1073741822	; 0xc0000002
    2854:	0c000075 	stceq	0, cr0, [r0], {117}	; 0x75
    2858:	00009018 	andeq	r9, r0, r8, lsl r0
    285c:	0000054f 	andeq	r0, r0, pc, asr #10
    2860:	0250010b 	subseq	r0, r0, #-1073741822	; 0xc0000002
    2864:	00000075 	andeq	r0, r0, r5, ror r0
    2868:	0139040d 	teqeq	r9, sp, lsl #8
    286c:	2c0e0000 	stccs	0, cr0, [lr], {-0}
    2870:	0f000000 	svceq	0x00000000
    2874:	00000707 	andeq	r0, r0, r7, lsl #14
    2878:	6c036001 	stcvs	0, cr6, [r3], {1}
    287c:	10000001 	andne	r0, r0, r1
    2880:	006e6970 	rsbeq	r6, lr, r0, ror r9
    2884:	002c6001 	eoreq	r6, ip, r1
    2888:	63110000 	tstvs	r1, #0
    288c:	01000007 	tsteq	r0, r7
    2890:	00013367 	andeq	r3, r1, r7, ror #6
    2894:	07541100 	ldrbeq	r1, [r4, -r0, lsl #2]
    2898:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    289c:	0000002c 	andeq	r0, r0, ip, lsr #32
    28a0:	013e1200 	teqeq	lr, r0, lsl #4
    28a4:	90240000 	eorls	r0, r4, r0
    28a8:	00380000 	eorseq	r0, r8, r0
    28ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    28b0:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    28b4:	00014a13 	andeq	r4, r1, r3, lsl sl
    28b8:	00164100 	andseq	r4, r6, r0, lsl #2
    28bc:	01551400 	cmpeq	r5, r0, lsl #8
    28c0:	16620000 	strbtne	r0, [r2], -r0
    28c4:	60140000 	andsvs	r0, r4, r0
    28c8:	98000001 	stmdals	r0, {r0}
    28cc:	0c000016 	stceq	0, cr0, [r0], {22}
    28d0:	00009054 	andeq	r9, r0, r4, asr r0
    28d4:	0000054f 	andeq	r0, r0, pc, asr #10
    28d8:	0751010b 	ldrbeq	r0, [r1, -fp, lsl #2]
    28dc:	5001f331 	andpl	pc, r1, r1, lsr r3	; <UNPREDICTABLE>
    28e0:	00241a4f 	eoreq	r1, r4, pc, asr #20
    28e4:	072f0f00 	streq	r0, [pc, -r0, lsl #30]!
    28e8:	7b010000 	blvc	428f0 <__bss_end__+0x38ee0>
    28ec:	0001de03 	andeq	sp, r1, r3, lsl #28
    28f0:	69701000 	ldmdbvs	r0!, {ip}^
    28f4:	7b01006e 	blvc	42ab4 <__bss_end__+0x390a4>
    28f8:	0000002c 	andeq	r0, r0, ip, lsr #32
    28fc:	00076311 	andeq	r6, r7, r1, lsl r3
    2900:	33810100 	orrcc	r0, r1, #0, 2
    2904:	11000001 	tstne	r0, r1
    2908:	00000754 	andeq	r0, r0, r4, asr r7
    290c:	002c8201 	eoreq	r8, ip, r1, lsl #4
    2910:	12000000 	andne	r0, r0, #0
    2914:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    2918:	0000905c 	andeq	r9, r0, ip, asr r0
    291c:	00000038 	andeq	r0, r0, r8, lsr r0
    2920:	02229c01 	eoreq	r9, r2, #256	; 0x100
    2924:	bc130000 	ldclt	0, cr0, [r3], {-0}
    2928:	d8000001 	stmdale	r0, {r0}
    292c:	14000016 	strne	r0, [r0], #-22
    2930:	000001c7 	andeq	r0, r0, r7, asr #3
    2934:	000016f9 	strdeq	r1, [r0], -r9
    2938:	0001d214 	andeq	sp, r1, r4, lsl r2
    293c:	00172f00 	andseq	r2, r7, r0, lsl #30
    2940:	908c0c00 	addls	r0, ip, r0, lsl #24
    2944:	054f0000 	strbeq	r0, [pc, #-0]	; 294c <_start-0x56b4>
    2948:	010b0000 	mrseq	r0, (UNDEF: 11)
    294c:	f3310751 	vaba.u<illegal width 64>	q0, <illegal reg q0.5>, <illegal reg q0.5>
    2950:	1a4f5001 	bne	13d695c <__bss_end__+0x13ccf4c>
    2954:	07000024 	streq	r0, [r0, -r4, lsr #32]
    2958:	000002d1 	ldrdeq	r0, [r0], -r1
    295c:	90949501 	addsls	r9, r4, r1, lsl #10
    2960:	00cc0000 	sbceq	r0, ip, r0
    2964:	9c010000 	stcls	0, cr0, [r1], {-0}
    2968:	00000298 	muleq	r0, r8, r2
    296c:	6e697008 	cdpvs	0, 6, cr7, cr9, cr8, {0}
    2970:	2c950100 	ldfcss	f0, [r5], {0}
    2974:	6f000000 	svcvs	0x00000000
    2978:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    297c:	00000763 	andeq	r0, r0, r3, ror #14
    2980:	01339b01 	teqeq	r3, r1, lsl #22
    2984:	178d0000 	strne	r0, [sp, r0]
    2988:	49090000 	stmdbmi	r9, {}	; <UNPREDICTABLE>
    298c:	01000007 	tsteq	r0, r7
    2990:	00002c9d 	muleq	r0, sp, ip
    2994:	0017e200 	andseq	lr, r7, r0, lsl #4
    2998:	07540900 	ldrbeq	r0, [r4, -r0, lsl #18]
    299c:	ab010000 	blge	429a4 <__bss_end__+0x38f94>
    29a0:	0000002c 	andeq	r0, r0, ip, lsr #32
    29a4:	000019ae 	andeq	r1, r0, lr, lsr #19
    29a8:	0091280a 	addseq	r2, r1, sl, lsl #16
    29ac:	00052e00 	andeq	r2, r5, r0, lsl #28
    29b0:	00028700 	andeq	r8, r2, r0, lsl #14
    29b4:	50010b00 	andpl	r0, r1, r0, lsl #22
    29b8:	00007502 	andeq	r7, r0, r2, lsl #10
    29bc:	0091540c 	addseq	r5, r1, ip, lsl #8
    29c0:	00054f00 	andeq	r4, r5, r0, lsl #30
    29c4:	50010b00 	andpl	r0, r1, r0, lsl #22
    29c8:	00007502 	andeq	r7, r0, r2, lsl #10
    29cc:	025a1500 	subseq	r1, sl, #0, 10
    29d0:	b3010000 	movwlt	r0, #4096	; 0x1000
    29d4:	00000064 	andeq	r0, r0, r4, rrx
    29d8:	00009160 	andeq	r9, r0, r0, ror #2
    29dc:	0000004c 	andeq	r0, r0, ip, asr #32
    29e0:	02e09c01 	rsceq	r9, r0, #256	; 0x100
    29e4:	70080000 	andvc	r0, r8, r0
    29e8:	01006e69 	tsteq	r0, r9, ror #28
    29ec:	00002cb3 			; <UNDEFINED> instruction: 0x00002cb3
    29f0:	0019cc00 	andseq	ip, r9, r0, lsl #24
    29f4:	00761600 	rsbseq	r1, r6, r0, lsl #12
    29f8:	002cb901 	eoreq	fp, ip, r1, lsl #18
    29fc:	1a240000 	bne	902a04 <__bss_end__+0x8f8ff4>
    2a00:	80170000 	andshi	r0, r7, r0
    2a04:	2e000091 	mcrcs	0, 0, r0, cr0, cr1, {4}
    2a08:	17000005 	strne	r0, [r0, -r5]
    2a0c:	00009190 	muleq	r0, r0, r1
    2a10:	0000052e 	andeq	r0, r0, lr, lsr #10
    2a14:	02b90700 	adcseq	r0, r9, #0, 14
    2a18:	c5010000 	strgt	r0, [r1, #-0]
    2a1c:	000091ac 	andeq	r9, r0, ip, lsr #3
    2a20:	00000078 	andeq	r0, r0, r8, ror r0
    2a24:	03aa9c01 			; <UNDEFINED> instruction: 0x03aa9c01
    2a28:	70080000 	andvc	r0, r8, r0
    2a2c:	01006e69 	tsteq	r0, r9, ror #28
    2a30:	00002cc5 	andeq	r2, r0, r5, asr #25
    2a34:	001a5a00 	andseq	r5, sl, r0, lsl #20
    2a38:	00760800 	rsbseq	r0, r6, r0, lsl #16
    2a3c:	002cc501 	eoreq	ip, ip, r1, lsl #10
    2a40:	1a940000 	bne	fe502a48 <__bss_end__+0xfe4f9038>
    2a44:	3e180000 	cdpcc	0, 1, cr0, cr8, cr0, {0}
    2a48:	c0000001 	andgt	r0, r0, r1
    2a4c:	30000091 	mulcc	r0, r1, r0
    2a50:	01000000 	mrseq	r0, (UNDEF: 0)
    2a54:	00035fcc 	andeq	r5, r3, ip, asr #31
    2a58:	014a1300 	mrseq	r1, (UNDEF: 122)
    2a5c:	1ace0000 	bne	ff382a64 <__bss_end__+0xff379054>
    2a60:	c0190000 	andsgt	r0, r9, r0
    2a64:	30000091 	mulcc	r0, r1, r0
    2a68:	14000000 	strne	r0, [r0], #-0
    2a6c:	00000155 	andeq	r0, r0, r5, asr r1
    2a70:	00001aef 	andeq	r1, r0, pc, ror #21
    2a74:	00016014 	andeq	r6, r1, r4, lsl r0
    2a78:	001b2500 	andseq	r2, fp, r0, lsl #10
    2a7c:	91ec0c00 	mvnls	r0, r0, lsl #24
    2a80:	054f0000 	strbeq	r0, [pc, #-0]	; 2a88 <_start-0x5578>
    2a84:	010b0000 	mrseq	r0, (UNDEF: 11)
    2a88:	f3310751 	vaba.u<illegal width 64>	q0, <illegal reg q0.5>, <illegal reg q0.5>
    2a8c:	1a4f5001 	bne	13d6a98 <__bss_end__+0x13cd088>
    2a90:	00000024 	andeq	r0, r0, r4, lsr #32
    2a94:	0001b01a 	andeq	fp, r1, sl, lsl r0
    2a98:	0091f000 	addseq	pc, r1, r0
    2a9c:	00003400 	andeq	r3, r0, r0, lsl #8
    2aa0:	13ce0100 	bicne	r0, lr, #0, 2
    2aa4:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    2aa8:	00001b65 	andeq	r1, r0, r5, ror #22
    2aac:	0091f019 	addseq	pc, r1, r9, lsl r0	; <UNPREDICTABLE>
    2ab0:	00003400 	andeq	r3, r0, r0, lsl #8
    2ab4:	01c71400 	biceq	r1, r7, r0, lsl #8
    2ab8:	1b860000 	blne	fe182ac0 <__bss_end__+0xfe1790b0>
    2abc:	d2140000 	andsle	r0, r4, #0
    2ac0:	bc000001 	stclt	0, cr0, [r0], {1}
    2ac4:	0c00001b 	stceq	0, cr0, [r0], {27}
    2ac8:	0000921c 	andeq	r9, r0, ip, lsl r2
    2acc:	0000054f 	andeq	r0, r0, pc, asr #10
    2ad0:	0751010b 	ldrbeq	r0, [r1, -fp, lsl #2]
    2ad4:	5001f331 	andpl	pc, r1, r1, lsr r3	; <UNPREDICTABLE>
    2ad8:	00241a4f 	eoreq	r1, r4, pc, asr #20
    2adc:	07000000 	streq	r0, [r0, -r0]
    2ae0:	0000067c 	andeq	r0, r0, ip, ror r6
    2ae4:	9224d101 	eorls	sp, r4, #1073741824	; 0x40000000
    2ae8:	00d80000 	sbcseq	r0, r8, r0
    2aec:	9c010000 	stcls	0, cr0, [r1], {-0}
    2af0:	0000042f 	andeq	r0, r0, pc, lsr #8
    2af4:	6e697008 	cdpvs	0, 6, cr7, cr9, cr8, {0}
    2af8:	2cd10100 	ldfcse	f0, [r1], {0}
    2afc:	fc000000 	stc2	0, cr0, [r0], {-0}
    2b00:	1b00001b 	blne	2b74 <_start-0x548c>
    2b04:	00000744 	andeq	r0, r0, r4, asr #14
    2b08:	00b2d101 	adcseq	sp, r2, r1, lsl #2
    2b0c:	1c1a0000 	ldcne	0, cr0, [sl], {-0}
    2b10:	63090000 	movwvs	r0, #36864	; 0x9000
    2b14:	01000007 	tsteq	r0, r7
    2b18:	000133d9 	ldrdeq	r3, [r1], -r9
    2b1c:	001c3b00 	andseq	r3, ip, r0, lsl #22
    2b20:	07490900 	strbeq	r0, [r9, -r0, lsl #18]
    2b24:	da010000 	ble	42b2c <__bss_end__+0x3911c>
    2b28:	0000002c 	andeq	r0, r0, ip, lsr #32
    2b2c:	00001c90 	muleq	r0, r0, ip
    2b30:	00075409 	andeq	r5, r7, r9, lsl #8
    2b34:	2ce80100 	stfcse	f0, [r8]
    2b38:	5c000000 	stcpl	0, cr0, [r0], {-0}
    2b3c:	0a00001e 	beq	2bbc <_start-0x5444>
    2b40:	000092c0 	andeq	r9, r0, r0, asr #5
    2b44:	0000052e 	andeq	r0, r0, lr, lsr #10
    2b48:	0000041e 	andeq	r0, r0, lr, lsl r4
    2b4c:	0250010b 	subseq	r0, r0, #-1073741822	; 0xc0000002
    2b50:	0c000076 	stceq	0, cr0, [r0], {118}	; 0x76
    2b54:	000092f0 	strdeq	r9, [r0], -r0
    2b58:	0000054f 	andeq	r0, r0, pc, asr #10
    2b5c:	0250010b 	subseq	r0, r0, #-1073741822	; 0xc0000002
    2b60:	00000076 	andeq	r0, r0, r6, ror r0
    2b64:	0006f51c 	andeq	pc, r6, ip, lsl r5	; <UNPREDICTABLE>
    2b68:	33280100 	teqcc	r8, #0, 2
    2b6c:	05000001 	streq	r0, [r0, #-1]
    2b70:	00938003 	addseq	r8, r3, r3
    2b74:	06eb1c00 	strbteq	r1, [fp], r0, lsl #24
    2b78:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    2b7c:	00000133 	andeq	r0, r0, r3, lsr r1
    2b80:	937c0305 	cmnls	ip, #335544320	; 0x14000000
    2b84:	e11c0000 	tst	ip, r0
    2b88:	01000006 	tsteq	r0, r6
    2b8c:	0001332a 	andeq	r3, r1, sl, lsr #6
    2b90:	78030500 	stmdavc	r3, {r8, sl}
    2b94:	1c000093 	stcne	0, cr0, [r0], {147}	; 0x93
    2b98:	0000076c 	andeq	r0, r0, ip, ror #14
    2b9c:	01332c01 	teqeq	r3, r1, lsl #24
    2ba0:	03050000 	movweq	r0, #20480	; 0x5000
    2ba4:	00009348 	andeq	r9, r0, r8, asr #6
    2ba8:	00073c1c 	andeq	r3, r7, ip, lsl ip
    2bac:	332d0100 	teqcc	sp, #0, 2
    2bb0:	05000001 	streq	r0, [r0, #-1]
    2bb4:	00934c03 	addseq	r4, r3, r3, lsl #24
    2bb8:	077b1c00 	ldrbeq	r1, [fp, -r0, lsl #24]!
    2bbc:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    2bc0:	00000133 	andeq	r0, r0, r3, lsr r1
    2bc4:	93500305 	cmpls	r0, #335544320	; 0x14000000
    2bc8:	831c0000 	tsthi	ip, #0
    2bcc:	01000007 	tsteq	r0, r7
    2bd0:	0001332f 	andeq	r3, r1, pc, lsr #6
    2bd4:	54030500 	strpl	r0, [r3], #-1280	; 0x500
    2bd8:	1c000093 	stcne	0, cr0, [r0], {147}	; 0x93
    2bdc:	0000078b 	andeq	r0, r0, fp, lsl #15
    2be0:	01333001 	teqeq	r3, r1
    2be4:	03050000 	movweq	r0, #20480	; 0x5000
    2be8:	00009358 	andeq	r9, r0, r8, asr r3
    2bec:	0007931c 	andeq	r9, r7, ip, lsl r3
    2bf0:	33310100 	teqcc	r1, #0, 2
    2bf4:	05000001 	streq	r0, [r0, #-1]
    2bf8:	00935c03 	addseq	r5, r3, r3, lsl #24
    2bfc:	07281c00 	streq	r1, [r8, -r0, lsl #24]!
    2c00:	33010000 	movwcc	r0, #4096	; 0x1000
    2c04:	00000133 	andeq	r0, r0, r3, lsr r1
    2c08:	93600305 	cmnls	r0, #335544320	; 0x14000000
    2c0c:	1a1c0000 	bne	702c14 <__bss_end__+0x6f9204>
    2c10:	01000007 	tsteq	r0, r7
    2c14:	00013334 	andeq	r3, r1, r4, lsr r3
    2c18:	64030500 	strvs	r0, [r3], #-1280	; 0x500
    2c1c:	1c000093 	stcne	0, cr0, [r0], {147}	; 0x93
    2c20:	00000721 	andeq	r0, r0, r1, lsr #14
    2c24:	01333601 	teqeq	r3, r1, lsl #12
    2c28:	03050000 	movweq	r0, #20480	; 0x5000
    2c2c:	00009368 	andeq	r9, r0, r8, ror #6
    2c30:	0007001c 	andeq	r0, r7, ip, lsl r0
    2c34:	33370100 	teqcc	r7, #0, 2
    2c38:	05000001 	streq	r0, [r0, #-1]
    2c3c:	00936c03 	addseq	r6, r3, r3, lsl #24
    2c40:	07741c00 	ldrbeq	r1, [r4, -r0, lsl #24]!
    2c44:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    2c48:	00000133 	andeq	r0, r0, r3, lsr r1
    2c4c:	93700305 	cmnls	r0, #335544320	; 0x14000000
    2c50:	131c0000 	tstne	ip, #0
    2c54:	01000007 	tsteq	r0, r7
    2c58:	0001333a 	andeq	r3, r1, sl, lsr r3
    2c5c:	74030500 	strvc	r0, [r3], #-1280	; 0x500
    2c60:	1d000093 	stcne	0, cr0, [r0, #-588]	; 0xfffffdb4
    2c64:	000006db 	ldrdeq	r0, [r0], -fp
    2c68:	002c2001 	eoreq	r2, ip, r1
    2c6c:	05430000 	strbeq	r0, [r3, #-0]
    2c70:	431e0000 	tstmi	lr, #0
    2c74:	00000005 	andeq	r0, r0, r5
    2c78:	0549040d 	strbeq	r0, [r9, #-1037]	; 0x40d
    2c7c:	4e1f0000 	cdpmi	0, 1, cr0, cr15, cr0, {0}
    2c80:	20000005 	andcs	r0, r0, r5
    2c84:	00060a21 	andeq	r0, r6, r1, lsr #20
    2c88:	651e0100 	ldrvs	r0, [lr, #-256]	; 0x100
    2c8c:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    2c90:	00000565 	andeq	r0, r0, r5, ror #10
    2c94:	00002c1e 	andeq	r2, r0, lr, lsl ip
    2c98:	040d0000 	streq	r0, [sp], #-0
    2c9c:	0000054e 	andeq	r0, r0, lr, asr #10
    2ca0:	0000e000 	andeq	lr, r0, r0
    2ca4:	7f000400 	svcvc	0x00000400
    2ca8:	0400000e 	streq	r0, [r0], #-14
    2cac:	00002201 	andeq	r2, r0, r1, lsl #4
    2cb0:	07ac0100 	streq	r0, [ip, r0, lsl #2]!
    2cb4:	032f0000 	teqeq	pc, #0
    2cb8:	92fc0000 	rscsls	r0, ip, #0
    2cbc:	00140000 	andseq	r0, r4, r0
    2cc0:	0bc60000 	bleq	ff182cc8 <__bss_end__+0xff1792b8>
    2cc4:	04020000 	streq	r0, [r2], #-0
    2cc8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    2ccc:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2cd0:	000000f3 	strdeq	r0, [r0], -r3
    2cd4:	9c060103 	stflss	f0, [r6], {3}
    2cd8:	03000000 	movweq	r0, #0
    2cdc:	01240502 	teqeq	r4, r2, lsl #10
    2ce0:	04030000 	streq	r0, [r3], #-0
    2ce4:	00011b05 	andeq	r1, r1, r5, lsl #22
    2ce8:	05080300 	streq	r0, [r8, #-768]	; 0x300
    2cec:	00000116 	andeq	r0, r0, r6, lsl r1
    2cf0:	9a080103 	bls	203104 <__bss_end__+0x1f96f4>
    2cf4:	03000000 	movweq	r0, #0
    2cf8:	00be0702 	adcseq	r0, lr, r2, lsl #14
    2cfc:	04030000 	streq	r0, [r3], #-0
    2d00:	0000ee07 	andeq	lr, r0, r7, lsl #28
    2d04:	07080300 	streq	r0, [r8, -r0, lsl #6]
    2d08:	000000e9 	andeq	r0, r0, r9, ror #1
    2d0c:	0d070403 	cfstrseq	mvf0, [r7, #-12]
    2d10:	03000001 	movweq	r0, #1
    2d14:	00a30801 	adceq	r0, r3, r1, lsl #16
    2d18:	9b040000 	blls	102d20 <__bss_end__+0xf9310>
    2d1c:	01000007 	tsteq	r0, r7
    2d20:	00002503 	andeq	r2, r0, r3, lsl #10
    2d24:	0092fc00 	addseq	pc, r2, r0, lsl #24
    2d28:	00001400 	andeq	r1, r0, r0, lsl #8
    2d2c:	b09c0100 	addslt	r0, ip, r0, lsl #2
    2d30:	05000000 	streq	r0, [r0, #-0]
    2d34:	03010063 	movweq	r0, #4195	; 0x1063
    2d38:	00000025 	andeq	r0, r0, r5, lsr #32
    2d3c:	00001e8d 	andeq	r1, r0, sp, lsl #29
    2d40:	00930806 	addseq	r0, r3, r6, lsl #16
    2d44:	0000d600 	andeq	sp, r0, r0, lsl #12
    2d48:	50010700 	andpl	r0, r1, r0, lsl #14
    2d4c:	00007402 	andeq	r7, r0, r2, lsl #8
    2d50:	00250800 	eoreq	r0, r5, r0, lsl #16
    2d54:	00bf0000 	adcseq	r0, pc, r0
    2d58:	25090000 	strcs	r0, [r9, #-0]
    2d5c:	00000000 	andeq	r0, r0, r0
    2d60:	00038d0a 	andeq	r8, r3, sl, lsl #26
    2d64:	d0060100 	andle	r0, r6, r0, lsl #2
    2d68:	05000000 	streq	r0, [r0, #-0]
    2d6c:	00938403 	addseq	r8, r3, r3, lsl #8
    2d70:	b0040b00 	andlt	r0, r4, r0, lsl #22
    2d74:	0c000000 	stceq	0, cr0, [r0], {-0}
    2d78:	00000239 	andeq	r0, r0, r9, lsr r2
    2d7c:	2c093a02 	stccs	10, cr3, [r9], {2}
    2d80:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <__bss_end__+0x2b669c>
  18:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  1c:	24030000 	strcs	r0, [r3], #-0
  20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  24:	000e030b 	andeq	r0, lr, fp, lsl #6
  28:	00160400 	andseq	r0, r6, r0, lsl #8
  2c:	0b3a0e03 	bleq	e83840 <__bss_end__+0xe79e30>
  30:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  34:	0f050000 	svceq	0x00050000
  38:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  3c:	06000013 			; <UNDEFINED> instruction: 0x06000013
  40:	13490026 	movtne	r0, #36902	; 0x9026
  44:	13070000 	movwne	r0, #28672	; 0x7000
  48:	3a0b0b01 	bcc	2c2c54 <__bss_end__+0x2b9244>
  4c:	010b3b0b 	tsteq	fp, fp, lsl #22
  50:	08000013 	stmdaeq	r0, {r0, r1, r4}
  54:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  58:	0b3b0b3a 	bleq	ec2d48 <__bss_end__+0xeb9338>
  5c:	0b381349 	bleq	e04d88 <__bss_end__+0xdfb378>
  60:	0d090000 	stceq	0, cr0, [r9, #-0]
  64:	3a0e0300 	bcc	380c6c <__bss_end__+0x37725c>
  68:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  6c:	000b3813 	andeq	r3, fp, r3, lsl r8
  70:	012e0a00 	teqeq	lr, r0, lsl #20
  74:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
  78:	0b3b0b3a 	bleq	ec2d68 <__bss_end__+0xeb9358>
  7c:	01111927 	tsteq	r1, r7, lsr #18
  80:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  84:	01194297 			; <UNDEFINED> instruction: 0x01194297
  88:	0b000013 	bleq	dc <_start-0x7f24>
  8c:	08030034 	stmdaeq	r3, {r2, r4, r5}
  90:	0b3b0b3a 	bleq	ec2d80 <__bss_end__+0xeb9370>
  94:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  98:	0b0c0000 	bleq	3000a0 <__bss_end__+0x2f6690>
  9c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
  a0:	00130106 	andseq	r0, r3, r6, lsl #2
  a4:	00340d00 	eorseq	r0, r4, r0, lsl #26
  a8:	0b3a0803 	bleq	e820bc <__bss_end__+0xe786ac>
  ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  b0:	00001702 	andeq	r1, r0, r2, lsl #14
  b4:	0182890e 	orreq	r8, r2, lr, lsl #18
  b8:	31011101 	tstcc	r1, r1, lsl #2
  bc:	00130113 	andseq	r0, r3, r3, lsl r1
  c0:	828a0f00 	addhi	r0, sl, #0, 30
  c4:	18020001 	stmdane	r2, {r0}
  c8:	00184291 	mulseq	r8, r1, r2
  cc:	82891000 	addhi	r1, r9, #0
  d0:	01110101 	tsteq	r1, r1, lsl #2
  d4:	00001331 	andeq	r1, r0, r1, lsr r3
  d8:	01828911 	orreq	r8, r2, r1, lsl r9
  dc:	31011100 	mrscc	r1, (UNDEF: 17)
  e0:	12000013 	andne	r0, r0, #19
  e4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  e8:	0b3a0e03 	bleq	e838fc <__bss_end__+0xe79eec>
  ec:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  f0:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
  f4:	00001301 	andeq	r1, r0, r1, lsl #6
  f8:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
  fc:	14000013 	strne	r0, [r0], #-19
 100:	00000018 	andeq	r0, r0, r8, lsl r0
 104:	3f012e15 	svccc	0x00012e15
 108:	3a0e0319 	bcc	380d74 <__bss_end__+0x377364>
 10c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 110:	01193c19 	tsteq	r9, r9, lsl ip
 114:	16000013 			; <UNDEFINED> instruction: 0x16000013
 118:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 11c:	0b3a0e03 	bleq	e83930 <__bss_end__+0xe79f20>
 120:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 124:	0000193c 	andeq	r1, r0, ip, lsr r9
 128:	01110100 	tsteq	r1, r0, lsl #2
 12c:	0b130e25 	bleq	4c39c8 <__bss_end__+0x4b9fb8>
 130:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 134:	06120111 			; <UNDEFINED> instruction: 0x06120111
 138:	00001710 	andeq	r1, r0, r0, lsl r7
 13c:	0b002402 	bleq	914c <gpio_set_input+0xb8>
 140:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 144:	03000008 	movweq	r0, #8
 148:	0b0b0024 	bleq	2c01e0 <__bss_end__+0x2b67d0>
 14c:	0e030b3e 	vmoveq.16	d3[0], r0
 150:	16040000 	strne	r0, [r4], -r0
 154:	3a0e0300 	bcc	380d5c <__bss_end__+0x37734c>
 158:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 15c:	05000013 	streq	r0, [r0, #-19]
 160:	0b0b000f 	bleq	2c01a4 <__bss_end__+0x2b6794>
 164:	0f060000 	svceq	0x00060000
 168:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 16c:	07000013 	smladeq	r0, r3, r0, r0
 170:	13490026 	movtne	r0, #36902	; 0x9026
 174:	13080000 	movwne	r0, #32768	; 0x8000
 178:	3a0b0b01 	bcc	2c2d84 <__bss_end__+0x2b9374>
 17c:	010b3b0b 	tsteq	fp, fp, lsl #22
 180:	09000013 	stmdbeq	r0, {r0, r1, r4}
 184:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 188:	0b3b0b3a 	bleq	ec2e78 <__bss_end__+0xeb9468>
 18c:	0b381349 	bleq	e04eb8 <__bss_end__+0xdfb4a8>
 190:	0d0a0000 	stceq	0, cr0, [sl, #-0]
 194:	3a0e0300 	bcc	380d9c <__bss_end__+0x37738c>
 198:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 19c:	000b3813 	andeq	r3, fp, r3, lsl r8
 1a0:	01130b00 	tsteq	r3, r0, lsl #22
 1a4:	0b0b0e03 	bleq	2c39b8 <__bss_end__+0x2b9fa8>
 1a8:	0b3b0b3a 	bleq	ec2e98 <__bss_end__+0xeb9488>
 1ac:	00001301 	andeq	r1, r0, r1, lsl #6
 1b0:	03000d0c 	movweq	r0, #3340	; 0xd0c
 1b4:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
 1b8:	0019340b 	andseq	r3, r9, fp, lsl #8
 1bc:	012e0d00 	teqeq	lr, r0, lsl #26
 1c0:	0b3a0e03 	bleq	e839d4 <__bss_end__+0xe79fc4>
 1c4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1c8:	13010b20 	movwne	r0, #6944	; 0x1b20
 1cc:	050e0000 	streq	r0, [lr, #-0]
 1d0:	3a0e0300 	bcc	380dd8 <__bss_end__+0x3773c8>
 1d4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1d8:	0f000013 	svceq	0x00000013
 1dc:	08030005 	stmdaeq	r3, {r0, r2}
 1e0:	0b3b0b3a 	bleq	ec2ed0 <__bss_end__+0xeb94c0>
 1e4:	00001349 	andeq	r1, r0, r9, asr #6
 1e8:	00010b10 	andeq	r0, r1, r0, lsl fp
 1ec:	00341100 	eorseq	r1, r4, r0, lsl #2
 1f0:	0b3a0e03 	bleq	e83a04 <__bss_end__+0xe79ff4>
 1f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1f8:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 1fc:	03193f01 	tsteq	r9, #1, 30
 200:	3b0b3a0e 	blcc	2cea40 <__bss_end__+0x2c5030>
 204:	1119270b 	tstne	r9, fp, lsl #14
 208:	40061201 	andmi	r1, r6, r1, lsl #4
 20c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 210:	00001301 	andeq	r1, r0, r1, lsl #6
 214:	03000513 	movweq	r0, #1299	; 0x513
 218:	3b0b3a0e 	blcc	2cea58 <__bss_end__+0x2c5048>
 21c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 220:	14000017 	strne	r0, [r0], #-23
 224:	08030005 	stmdaeq	r3, {r0, r2}
 228:	0b3b0b3a 	bleq	ec2f18 <__bss_end__+0xeb9508>
 22c:	17021349 	strne	r1, [r2, -r9, asr #6]
 230:	34150000 	ldrcc	r0, [r5], #-0
 234:	3a080300 	bcc	200e3c <__bss_end__+0x1f742c>
 238:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 23c:	00180213 	andseq	r0, r8, r3, lsl r2
 240:	00341600 	eorseq	r1, r4, r0, lsl #12
 244:	0b3a0803 	bleq	e82258 <__bss_end__+0xe78848>
 248:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 24c:	00001702 	andeq	r1, r0, r2, lsl #14
 250:	03003417 	movweq	r3, #1047	; 0x417
 254:	3b0b3a08 	blcc	2cea7c <__bss_end__+0x2c506c>
 258:	0013490b 	andseq	r4, r3, fp, lsl #18
 25c:	00341800 	eorseq	r1, r4, r0, lsl #16
 260:	0b3a0e03 	bleq	e83a74 <__bss_end__+0xe7a064>
 264:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 268:	00001802 	andeq	r1, r0, r2, lsl #16
 26c:	11010b19 	tstne	r1, r9, lsl fp
 270:	01061201 	tsteq	r6, r1, lsl #4
 274:	1a000013 	bne	2c8 <_start-0x7d38>
 278:	1331011d 	teqne	r1, #1073741831	; 0x40000007
 27c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 280:	0b590b58 	bleq	1642fe8 <__bss_end__+0x16395d8>
 284:	00001301 	andeq	r1, r0, r1, lsl #6
 288:	3100051b 	tstcc	r0, fp, lsl r5
 28c:	00170213 	andseq	r0, r7, r3, lsl r2
 290:	00051c00 	andeq	r1, r5, r0, lsl #24
 294:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
 298:	051d0000 	ldreq	r0, [sp, #-0]
 29c:	1c133100 	ldfnes	f3, [r3], {-0}
 2a0:	1e00000b 	cdpne	0, 0, cr0, cr0, cr11, {0}
 2a4:	0111010b 	tsteq	r1, fp, lsl #2
 2a8:	00000612 	andeq	r0, r0, r2, lsl r6
 2ac:	3100341f 	tstcc	r0, pc, lsl r4
 2b0:	00170213 	andseq	r0, r7, r3, lsl r2
 2b4:	82892000 	addhi	r2, r9, #0
 2b8:	01110101 	tsteq	r1, r1, lsl #2
 2bc:	00001331 	andeq	r1, r0, r1, lsr r3
 2c0:	01828a21 	orreq	r8, r2, r1, lsr #20
 2c4:	91180200 	tstls	r8, r0, lsl #4
 2c8:	00001842 	andeq	r1, r0, r2, asr #16
 2cc:	31011d22 	tstcc	r1, r2, lsr #26
 2d0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 2d4:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
 2d8:	2300000b 	movwcs	r0, #11
 2dc:	0e03012e 	adfeqsp	f0, f3, #0.5
 2e0:	0b3b0b3a 	bleq	ec2fd0 <__bss_end__+0xeb95c0>
 2e4:	13491927 	movtne	r1, #39207	; 0x9927
 2e8:	13010b20 	movwne	r0, #6944	; 0x1b20
 2ec:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
 2f0:	03193f01 	tsteq	r9, #1, 30
 2f4:	3b0b3a0e 	blcc	2ceb34 <__bss_end__+0x2c5124>
 2f8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 2fc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 300:	97184006 	ldrls	r4, [r8, -r6]
 304:	13011942 	movwne	r1, #6466	; 0x1942
 308:	89250000 	stmdbhi	r5!, {}	; <UNPREDICTABLE>
 30c:	11000182 	smlabbne	r0, r2, r1, r0
 310:	00133101 	andseq	r3, r3, r1, lsl #2
 314:	82892600 	addhi	r2, r9, #0, 12
 318:	01110101 	tsteq	r1, r1, lsl #2
 31c:	13011331 	movwne	r1, #4913	; 0x1331
 320:	34270000 	strtcc	r0, [r7], #-0
 324:	3a0e0300 	bcc	380f2c <__bss_end__+0x37751c>
 328:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 32c:	00170213 	andseq	r0, r7, r3, lsl r2
 330:	00052800 	andeq	r2, r5, r0, lsl #16
 334:	00001331 	andeq	r1, r0, r1, lsr r3
 338:	03000529 	movweq	r0, #1321	; 0x529
 33c:	3b0b3a0e 	blcc	2ceb7c <__bss_end__+0x2c516c>
 340:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 344:	2a000018 	bcs	3ac <_start-0x7c54>
 348:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 34c:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
 350:	00001802 	andeq	r1, r0, r2, lsl #16
 354:	4901012b 	stmdbmi	r1, {r0, r1, r3, r5, r8}
 358:	00130113 	andseq	r0, r3, r3, lsl r1
 35c:	00212c00 	eoreq	r2, r1, r0, lsl #24
 360:	0b2f1349 	bleq	bc508c <__bss_end__+0xbbb67c>
 364:	342d0000 	strtcc	r0, [sp], #-0
 368:	3a080300 	bcc	200f70 <__bss_end__+0x1f7560>
 36c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 370:	00061c13 	andeq	r1, r6, r3, lsl ip
 374:	00342e00 	eorseq	r2, r4, r0, lsl #28
 378:	0b3a0803 	bleq	e8238c <__bss_end__+0xe7897c>
 37c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 380:	00000b1c 	andeq	r0, r0, ip, lsl fp
 384:	0300052f 	movweq	r0, #1327	; 0x52f
 388:	3b0b3a08 	blcc	2cebb0 <__bss_end__+0x2c51a0>
 38c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 390:	30000018 	andcc	r0, r0, r8, lsl r0
 394:	00000018 	andeq	r0, r0, r8, lsl r0
 398:	49002131 	stmdbmi	r0, {r0, r4, r5, r8, sp}
 39c:	00052f13 	andeq	r2, r5, r3, lsl pc
 3a0:	012e3200 	teqeq	lr, r0, lsl #4
 3a4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 3a8:	0b3b0b3a 	bleq	ec3098 <__bss_end__+0xeb9688>
 3ac:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 3b0:	00001301 	andeq	r1, r0, r1, lsl #6
 3b4:	49000533 	stmdbmi	r0, {r0, r1, r4, r5, r8, sl}
 3b8:	34000013 	strcc	r0, [r0], #-19
 3bc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 3c0:	0b3a0e03 	bleq	e83bd4 <__bss_end__+0xe7a1c4>
 3c4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 3c8:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 3cc:	2e350000 	cdpcs	0, 3, cr0, cr5, cr0, {0}
 3d0:	03193f01 	tsteq	r9, #1, 30
 3d4:	3b0b3a0e 	blcc	2cec14 <__bss_end__+0x2c5204>
 3d8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 3dc:	01193c13 	tsteq	r9, r3, lsl ip
 3e0:	36000013 			; <UNDEFINED> instruction: 0x36000013
 3e4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 3e8:	0b3a0e03 	bleq	e83bfc <__bss_end__+0xe7a1ec>
 3ec:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 3f0:	0000193c 	andeq	r1, r0, ip, lsr r9
 3f4:	3f012e37 	svccc	0x00012e37
 3f8:	3a0e0319 	bcc	381064 <__bss_end__+0x377654>
 3fc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 400:	3c134919 	ldccc	9, cr4, [r3], {25}
 404:	00000019 	andeq	r0, r0, r9, lsl r0
 408:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 40c:	030b130e 	movweq	r1, #45838	; 0xb30e
 410:	110e1b0e 	tstne	lr, lr, lsl #22
 414:	10061201 	andne	r1, r6, r1, lsl #4
 418:	02000017 	andeq	r0, r0, #23
 41c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 420:	0b3b0b3a 	bleq	ec3110 <__bss_end__+0xeb9700>
 424:	00001349 	andeq	r1, r0, r9, asr #6
 428:	03011303 	movweq	r1, #4867	; 0x1303
 42c:	3a0b0b0e 	bcc	2c306c <__bss_end__+0x2b965c>
 430:	010b3b0b 	tsteq	fp, fp, lsl #22
 434:	04000013 	streq	r0, [r0], #-19
 438:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 43c:	0b381349 	bleq	e05168 <__bss_end__+0xdfb758>
 440:	00001934 	andeq	r1, r0, r4, lsr r9
 444:	0b000f05 	bleq	4060 <_start-0x3fa0>
 448:	0600000b 	streq	r0, [r0], -fp
 44c:	0b0b0024 	bleq	2c04e4 <__bss_end__+0x2b6ad4>
 450:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 454:	24070000 	strcs	r0, [r7], #-0
 458:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 45c:	000e030b 	andeq	r0, lr, fp, lsl #6
 460:	000f0800 	andeq	r0, pc, r0, lsl #16
 464:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 468:	26090000 	strcs	r0, [r9], -r0
 46c:	00134900 	andseq	r4, r3, r0, lsl #18
 470:	012e0a00 	teqeq	lr, r0, lsl #20
 474:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 478:	0b3b0b3a 	bleq	ec3168 <__bss_end__+0xeb9758>
 47c:	13491927 	movtne	r1, #39207	; 0x9927
 480:	06120111 			; <UNDEFINED> instruction: 0x06120111
 484:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 488:	00130119 	andseq	r0, r3, r9, lsl r1
 48c:	00050b00 	andeq	r0, r5, r0, lsl #22
 490:	0b3a0803 	bleq	e824a4 <__bss_end__+0xe78a94>
 494:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 498:	00001802 	andeq	r1, r0, r2, lsl #16
 49c:	0000180c 	andeq	r1, r0, ip, lsl #16
 4a0:	00340d00 	eorseq	r0, r4, r0, lsl #26
 4a4:	0b3a0803 	bleq	e824b8 <__bss_end__+0xe78aa8>
 4a8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 4ac:	00001802 	andeq	r1, r0, r2, lsl #16
 4b0:	0300340e 	movweq	r3, #1038	; 0x40e
 4b4:	3b0b3a0e 	blcc	2cecf4 <__bss_end__+0x2c52e4>
 4b8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 4bc:	0f000018 	svceq	0x00000018
 4c0:	08030034 	stmdaeq	r3, {r2, r4, r5}
 4c4:	0b3b0b3a 	bleq	ec31b4 <__bss_end__+0xeb97a4>
 4c8:	17021349 	strne	r1, [r2, -r9, asr #6]
 4cc:	89100000 	ldmdbhi	r0, {}	; <UNPREDICTABLE>
 4d0:	11010182 	smlabbne	r1, r2, r1, r0
 4d4:	01133101 	tsteq	r3, r1, lsl #2
 4d8:	11000013 	tstne	r0, r3, lsl r0
 4dc:	0001828a 	andeq	r8, r1, sl, lsl #5
 4e0:	42911802 	addsmi	r1, r1, #131072	; 0x20000
 4e4:	12000018 	andne	r0, r0, #24
 4e8:	01018289 	smlabbeq	r1, r9, r2, r8
 4ec:	00000111 	andeq	r0, r0, r1, lsl r1
 4f0:	49010113 	stmdbmi	r1, {r0, r1, r4, r8}
 4f4:	00130113 	andseq	r0, r3, r3, lsl r1
 4f8:	00211400 	eoreq	r1, r1, r0, lsl #8
 4fc:	052f1349 	streq	r1, [pc, #-841]!	; 1bb <_start-0x7e45>
 500:	15150000 	ldrne	r0, [r5, #-0]
 504:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
 508:	00130113 	andseq	r0, r3, r3, lsl r1
 50c:	00051600 	andeq	r1, r5, r0, lsl #12
 510:	00001349 	andeq	r1, r0, r9, asr #6
 514:	03003417 	movweq	r3, #1047	; 0x417
 518:	3b0b3a0e 	blcc	2ced58 <__bss_end__+0x2c5348>
 51c:	3f13490b 	svccc	0x0013490b
 520:	00193c19 	andseq	r3, r9, r9, lsl ip
 524:	012e1800 	teqeq	lr, r0, lsl #16
 528:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 52c:	0b3b0b3a 	bleq	ec321c <__bss_end__+0xeb980c>
 530:	13491927 	movtne	r1, #39207	; 0x9927
 534:	0000193c 	andeq	r1, r0, ip, lsr r9
 538:	01110100 	tsteq	r1, r0, lsl #2
 53c:	0b130e25 	bleq	4c3dd8 <__bss_end__+0x4ba3c8>
 540:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 544:	06120111 			; <UNDEFINED> instruction: 0x06120111
 548:	00001710 	andeq	r1, r0, r0, lsl r7
 54c:	0b002402 	bleq	955c <__FUNCTION__.4219+0x48>
 550:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 554:	03000008 	movweq	r0, #8
 558:	0b0b0024 	bleq	2c05f0 <__bss_end__+0x2b6be0>
 55c:	0e030b3e 	vmoveq.16	d3[0], r0
 560:	0f040000 	svceq	0x00040000
 564:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 568:	05000013 	streq	r0, [r0, #-19]
 56c:	13490026 	movtne	r0, #36902	; 0x9026
 570:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
 574:	03193f01 	tsteq	r9, #1, 30
 578:	3b0b3a0e 	blcc	2cedb8 <__bss_end__+0x2c53a8>
 57c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 580:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 584:	96184006 	ldrls	r4, [r8], -r6
 588:	13011942 	movwne	r1, #6466	; 0x1942
 58c:	05070000 	streq	r0, [r7, #-0]
 590:	3a080300 	bcc	201198 <__bss_end__+0x1f7788>
 594:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 598:	00170213 	andseq	r0, r7, r3, lsl r2
 59c:	01150800 	tsteq	r5, r0, lsl #16
 5a0:	13491927 	movtne	r1, #39207	; 0x9927
 5a4:	00001301 	andeq	r1, r0, r1, lsl #6
 5a8:	49000509 	stmdbmi	r0, {r0, r3, r8, sl}
 5ac:	0a000013 	beq	600 <_start-0x7a00>
 5b0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 5b4:	0b3b0b3a 	bleq	ec32a4 <__bss_end__+0xeb9894>
 5b8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 5bc:	0000193c 	andeq	r1, r0, ip, lsr r9
 5c0:	0300340b 	movweq	r3, #1035	; 0x40b
 5c4:	3b0b3a0e 	blcc	2cee04 <__bss_end__+0x2c53f4>
 5c8:	3f13490b 	svccc	0x0013490b
 5cc:	00180219 	andseq	r0, r8, r9, lsl r2
 5d0:	11010000 	mrsne	r0, (UNDEF: 1)
 5d4:	130e2501 	movwne	r2, #58625	; 0xe501
 5d8:	1b0e030b 	blne	38120c <__bss_end__+0x3777fc>
 5dc:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 5e0:	00171006 	andseq	r1, r7, r6
 5e4:	00240200 	eoreq	r0, r4, r0, lsl #4
 5e8:	0b3e0b0b 	bleq	f8321c <__bss_end__+0xf7980c>
 5ec:	00000803 	andeq	r0, r0, r3, lsl #16
 5f0:	0b002403 	bleq	9604 <__FUNCTION__.4219+0xf0>
 5f4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 5f8:	0400000e 	streq	r0, [r0], #-14
 5fc:	0b0b000f 	bleq	2c0640 <__bss_end__+0x2b6c30>
 600:	0f050000 	svceq	0x00050000
 604:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 608:	06000013 			; <UNDEFINED> instruction: 0x06000013
 60c:	13490026 	movtne	r0, #36902	; 0x9026
 610:	16070000 	strne	r0, [r7], -r0
 614:	3a0e0300 	bcc	38121c <__bss_end__+0x37780c>
 618:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 61c:	08000013 	stmdaeq	r0, {r0, r1, r4}
 620:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 624:	0b3a0b0b 	bleq	e83258 <__bss_end__+0xe79848>
 628:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 62c:	0d090000 	stceq	0, cr0, [r9, #-0]
 630:	490e0300 	stmdbmi	lr, {r8, r9}
 634:	340b3813 	strcc	r3, [fp], #-2067	; 0x813
 638:	0a000019 	beq	6a4 <_start-0x795c>
 63c:	0e03012e 	adfeqsp	f0, f3, #0.5
 640:	0b3b0b3a 	bleq	ec3330 <__bss_end__+0xeb9920>
 644:	13491927 	movtne	r1, #39207	; 0x9927
 648:	06120111 			; <UNDEFINED> instruction: 0x06120111
 64c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 650:	00130119 	andseq	r0, r3, r9, lsl r1
 654:	00050b00 	andeq	r0, r5, r0, lsl #22
 658:	0b3a0803 	bleq	e8266c <__bss_end__+0xe78c5c>
 65c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 660:	00001702 	andeq	r1, r0, r2, lsl #14
 664:	03012e0c 	movweq	r2, #7692	; 0x1e0c
 668:	3b0b3a08 	blcc	2cee90 <__bss_end__+0x2c5480>
 66c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 670:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 674:	97184006 	ldrls	r4, [r8, -r6]
 678:	13011942 	movwne	r1, #6466	; 0x1942
 67c:	050d0000 	streq	r0, [sp, #-0]
 680:	3a0e0300 	bcc	381288 <__bss_end__+0x377878>
 684:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 688:	00170213 	andseq	r0, r7, r3, lsl r2
 68c:	00050e00 	andeq	r0, r5, r0, lsl #28
 690:	0b3a0e03 	bleq	e83ea4 <__bss_end__+0xe7a494>
 694:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 698:	00001802 	andeq	r1, r0, r2, lsl #16
 69c:	0300340f 	movweq	r3, #1039	; 0x40f
 6a0:	3b0b3a08 	blcc	2ceec8 <__bss_end__+0x2c54b8>
 6a4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 6a8:	10000018 	andne	r0, r0, r8, lsl r0
 6ac:	08030034 	stmdaeq	r3, {r2, r4, r5}
 6b0:	0b3b0b3a 	bleq	ec33a0 <__bss_end__+0xeb9990>
 6b4:	17021349 	strne	r1, [r2, -r9, asr #6]
 6b8:	34110000 	ldrcc	r0, [r1], #-0
 6bc:	490e0300 	stmdbmi	lr, {r8, r9}
 6c0:	02193413 	andseq	r3, r9, #318767104	; 0x13000000
 6c4:	12000018 	andne	r0, r0, #24
 6c8:	0111010b 	tsteq	r1, fp, lsl #2
 6cc:	13010612 	movwne	r0, #5650	; 0x1612
 6d0:	34130000 	ldrcc	r0, [r3], #-0
 6d4:	3a0e0300 	bcc	3812dc <__bss_end__+0x3778cc>
 6d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6dc:	00170213 	andseq	r0, r7, r3, lsl r2
 6e0:	82891400 	addhi	r1, r9, #0, 8
 6e4:	01110101 	tsteq	r1, r1, lsl #2
 6e8:	13011331 	movwne	r1, #4913	; 0x1331
 6ec:	8a150000 	bhi	5406f4 <__bss_end__+0x536ce4>
 6f0:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
 6f4:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
 6f8:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
 6fc:	11000182 	smlabbne	r0, r2, r1, r0
 700:	00133101 	andseq	r3, r3, r1, lsl #2
 704:	82891700 	addhi	r1, r9, #0, 14
 708:	01110101 	tsteq	r1, r1, lsl #2
 70c:	00001331 	andeq	r1, r0, r1, lsr r3
 710:	49010118 	stmdbmi	r1, {r3, r4, r8}
 714:	00130113 	andseq	r0, r3, r3, lsl r1
 718:	00211900 	eoreq	r1, r1, r0, lsl #18
 71c:	0b2f1349 	bleq	bc5448 <__bss_end__+0xbbba38>
 720:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
 724:	03193f01 	tsteq	r9, #1, 30
 728:	3b0b3a0e 	blcc	2cef68 <__bss_end__+0x2c5558>
 72c:	1119270b 	tstne	r9, fp, lsl #14
 730:	40061201 	andmi	r1, r6, r1, lsl #4
 734:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 738:	00001301 	andeq	r1, r0, r1, lsl #6
 73c:	2701151b 	smladcs	r1, fp, r5, r1
 740:	01134919 	tsteq	r3, r9, lsl r9
 744:	1c000013 	stcne	0, cr0, [r0], {19}
 748:	13490005 	movtne	r0, #36869	; 0x9005
 74c:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 750:	03193f01 	tsteq	r9, #1, 30
 754:	3b0b3a0e 	blcc	2cef94 <__bss_end__+0x2c5584>
 758:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 75c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 760:	97184006 	ldrls	r4, [r8, -r6]
 764:	13011942 	movwne	r1, #6466	; 0x1942
 768:	0b1e0000 	bleq	780770 <__bss_end__+0x776d60>
 76c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 770:	1f000006 	svcne	0x00000006
 774:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 778:	0b3b0b3a 	bleq	ec3468 <__bss_end__+0xeb9a58>
 77c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 780:	0000193c 	andeq	r1, r0, ip, lsr r9
 784:	3f012e20 	svccc	0x00012e20
 788:	3a0e0319 	bcc	3813f4 <__bss_end__+0x3779e4>
 78c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 790:	3c134919 	ldccc	9, cr4, [r3], {25}
 794:	00130119 	andseq	r0, r3, r9, lsl r1
 798:	00182100 	andseq	r2, r8, r0, lsl #2
 79c:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
 7a0:	03193f00 	tsteq	r9, #0, 30
 7a4:	3b0b3a0e 	blcc	2cefe4 <__bss_end__+0x2c55d4>
 7a8:	3c19270b 	ldccc	7, cr2, [r9], {11}
 7ac:	00000019 	andeq	r0, r0, r9, lsl r0
 7b0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 7b4:	030b130e 	movweq	r1, #45838	; 0xb30e
 7b8:	110e1b0e 	tstne	lr, lr, lsl #22
 7bc:	10061201 	andne	r1, r6, r1, lsl #4
 7c0:	02000017 	andeq	r0, r0, #23
 7c4:	0b0b0024 	bleq	2c085c <__bss_end__+0x2b6e4c>
 7c8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 7cc:	24030000 	strcs	r0, [r3], #-0
 7d0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 7d4:	000e030b 	andeq	r0, lr, fp, lsl #6
 7d8:	012e0400 	teqeq	lr, r0, lsl #8
 7dc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 7e0:	0b3b0b3a 	bleq	ec34d0 <__bss_end__+0xeb9ac0>
 7e4:	01111927 	tsteq	r1, r7, lsr #18
 7e8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 7ec:	01194297 			; <UNDEFINED> instruction: 0x01194297
 7f0:	05000013 	streq	r0, [r0, #-19]
 7f4:	08030034 	stmdaeq	r3, {r2, r4, r5}
 7f8:	0b3b0b3a 	bleq	ec34e8 <__bss_end__+0xeb9ad8>
 7fc:	17021349 	strne	r1, [r2, -r9, asr #6]
 800:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
 804:	03193f01 	tsteq	r9, #1, 30
 808:	3b0b3a0e 	blcc	2cf048 <__bss_end__+0x2c5638>
 80c:	1119270b 	tstne	r9, fp, lsl #14
 810:	40061201 	andmi	r1, r6, r1, lsl #4
 814:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 818:	01000000 	mrseq	r0, (UNDEF: 0)
 81c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 820:	0e030b13 	vmoveq.32	d3[0], r0
 824:	01110e1b 	tsteq	r1, fp, lsl lr
 828:	17100612 			; <UNDEFINED> instruction: 0x17100612
 82c:	24020000 	strcs	r0, [r2], #-0
 830:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 834:	0008030b 	andeq	r0, r8, fp, lsl #6
 838:	00240300 	eoreq	r0, r4, r0, lsl #6
 83c:	0b3e0b0b 	bleq	f83470 <__bss_end__+0xf79a60>
 840:	00000e03 	andeq	r0, r0, r3, lsl #28
 844:	0b000f04 	bleq	445c <_start-0x3ba4>
 848:	0013490b 	andseq	r4, r3, fp, lsl #18
 84c:	00260500 	eoreq	r0, r6, r0, lsl #10
 850:	00001349 	andeq	r1, r0, r9, asr #6
 854:	3f012e06 	svccc	0x00012e06
 858:	3a0e0319 	bcc	3814c4 <__bss_end__+0x377ab4>
 85c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 860:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 864:	97184006 	ldrls	r4, [r8, -r6]
 868:	13011942 	movwne	r1, #6466	; 0x1942
 86c:	89070000 	stmdbhi	r7, {}	; <UNPREDICTABLE>
 870:	11010182 	smlabbne	r1, r2, r1, r0
 874:	00130101 	andseq	r0, r3, r1, lsl #2
 878:	828a0800 	addhi	r0, sl, #0, 16
 87c:	18020001 	stmdane	r2, {r0}
 880:	00184291 	mulseq	r8, r1, r2
 884:	82890900 	addhi	r0, r9, #0, 18
 888:	01110101 	tsteq	r1, r1, lsl #2
 88c:	13011331 	movwne	r1, #4913	; 0x1331
 890:	890a0000 	stmdbhi	sl, {}	; <UNPREDICTABLE>
 894:	11000182 	smlabbne	r0, r2, r1, r0
 898:	00133101 	andseq	r3, r3, r1, lsl #2
 89c:	01150b00 	tsteq	r5, r0, lsl #22
 8a0:	13491927 	movtne	r1, #39207	; 0x9927
 8a4:	00001301 	andeq	r1, r0, r1, lsl #6
 8a8:	4900050c 	stmdbmi	r0, {r2, r3, r8, sl}
 8ac:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 8b0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 8b4:	0b3b0b3a 	bleq	ec35a4 <__bss_end__+0xeb9b94>
 8b8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 8bc:	0000193c 	andeq	r1, r0, ip, lsr r9
 8c0:	3f012e0e 	svccc	0x00012e0e
 8c4:	3a0e0319 	bcc	381530 <__bss_end__+0x377b20>
 8c8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 8cc:	01193c19 	tsteq	r9, r9, lsl ip
 8d0:	0f000013 	svceq	0x00000013
 8d4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 8d8:	0b3a0e03 	bleq	e840ec <__bss_end__+0xe7a6dc>
 8dc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 8e0:	0000193c 	andeq	r1, r0, ip, lsr r9
 8e4:	01110100 	tsteq	r1, r0, lsl #2
 8e8:	0b130e25 	bleq	4c4184 <__bss_end__+0x4ba774>
 8ec:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 8f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 8f4:	00001710 	andeq	r1, r0, r0, lsl r7
 8f8:	0b002402 	bleq	9908 <__bss_start__+0x2fc>
 8fc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 900:	03000008 	movweq	r0, #8
 904:	0b0b0024 	bleq	2c099c <__bss_end__+0x2b6f8c>
 908:	0e030b3e 	vmoveq.16	d3[0], r0
 90c:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
 910:	03193f01 	tsteq	r9, #1, 30
 914:	3b0b3a0e 	blcc	2cf154 <__bss_end__+0x2c5744>
 918:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 91c:	97184006 	ldrls	r4, [r8, -r6]
 920:	13011942 	movwne	r1, #6466	; 0x1942
 924:	34050000 	strcc	r0, [r5], #-0
 928:	3a0e0300 	bcc	381530 <__bss_end__+0x377b20>
 92c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 930:	3c193f13 	ldccc	15, cr3, [r9], {19}
 934:	06000019 			; <UNDEFINED> instruction: 0x06000019
 938:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 93c:	0b3a0e03 	bleq	e84150 <__bss_end__+0xe7a740>
 940:	193c0b3b 	ldmdbne	ip!, {r0, r1, r3, r4, r5, r8, r9, fp}
 944:	00001301 	andeq	r1, r0, r1, lsl #6
 948:	00001807 	andeq	r1, r0, r7, lsl #16
 94c:	00340800 	eorseq	r0, r4, r0, lsl #16
 950:	0b3a0803 	bleq	e82964 <__bss_end__+0xe78f54>
 954:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 958:	00001702 	andeq	r1, r0, r2, lsl #14
 95c:	03003409 	movweq	r3, #1033	; 0x409
 960:	3b0b3a0e 	blcc	2cf1a0 <__bss_end__+0x2c5790>
 964:	0013490b 	andseq	r4, r3, fp, lsl #18
 968:	82890a00 	addhi	r0, r9, #0, 20
 96c:	01110001 	tsteq	r1, r1
 970:	00001331 	andeq	r1, r0, r1, lsr r3
 974:	0b000f0b 	bleq	45a8 <_start-0x3a58>
 978:	0013490b 	andseq	r4, r3, fp, lsl #18
 97c:	002e0c00 	eoreq	r0, lr, r0, lsl #24
 980:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 984:	0b3b0b3a 	bleq	ec3674 <__bss_end__+0xeb9c64>
 988:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 98c:	01000000 	mrseq	r0, (UNDEF: 0)
 990:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 994:	0e030b13 	vmoveq.32	d3[0], r0
 998:	17550e1b 	smmlane	r5, fp, lr, r0
 99c:	17100111 			; <UNDEFINED> instruction: 0x17100111
 9a0:	24020000 	strcs	r0, [r2], #-0
 9a4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 9a8:	0008030b 	andeq	r0, r8, fp, lsl #6
 9ac:	00240300 	eoreq	r0, r4, r0, lsl #6
 9b0:	0b3e0b0b 	bleq	f835e4 <__bss_end__+0xf79bd4>
 9b4:	00000e03 	andeq	r0, r0, r3, lsl #28
 9b8:	3f012e04 	svccc	0x00012e04
 9bc:	3a0e0319 	bcc	381628 <__bss_end__+0x377c18>
 9c0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 9c4:	11134919 	tstne	r3, r9, lsl r9
 9c8:	40061201 	andmi	r1, r6, r1, lsl #4
 9cc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 9d0:	00001301 	andeq	r1, r0, r1, lsl #6
 9d4:	03003405 	movweq	r3, #1029	; 0x405
 9d8:	3b0b3a0e 	blcc	2cf218 <__bss_end__+0x2c5808>
 9dc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 9e0:	06000017 			; <UNDEFINED> instruction: 0x06000017
 9e4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 9e8:	0b3a0e03 	bleq	e841fc <__bss_end__+0xe7a7ec>
 9ec:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 9f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 9f4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 9f8:	00130119 	andseq	r0, r3, r9, lsl r1
 9fc:	00340700 	eorseq	r0, r4, r0, lsl #14
 a00:	0b3a0e03 	bleq	e84214 <__bss_end__+0xe7a804>
 a04:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 a08:	0000061c 	andeq	r0, r0, ip, lsl r6
 a0c:	03003408 	movweq	r3, #1032	; 0x408
 a10:	3b0b3a0e 	blcc	2cf250 <__bss_end__+0x2c5840>
 a14:	1c13490b 	ldcne	9, cr4, [r3], {11}
 a18:	0900000b 	stmdbeq	r0, {r0, r1, r3}
 a1c:	00018289 	andeq	r8, r1, r9, lsl #5
 a20:	13310111 	teqne	r1, #1073741828	; 0x40000004
 a24:	890a0000 	stmdbhi	sl, {}	; <UNPREDICTABLE>
 a28:	11010182 	smlabbne	r1, r2, r1, r0
 a2c:	01133101 	tsteq	r3, r1, lsl #2
 a30:	0b000013 	bleq	a84 <_start-0x757c>
 a34:	0001828a 	andeq	r8, r1, sl, lsl #5
 a38:	42911802 	addsmi	r1, r1, #131072	; 0x20000
 a3c:	0c000018 	stceq	0, cr0, [r0], {24}
 a40:	01018289 	smlabbeq	r1, r9, r2, r8
 a44:	13310111 	teqne	r1, #1073741828	; 0x40000004
 a48:	260d0000 	strcs	r0, [sp], -r0
 a4c:	00134900 	andseq	r4, r3, r0, lsl #18
 a50:	012e0e00 	teqeq	lr, r0, lsl #28
 a54:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 a58:	0b3b0b3a 	bleq	ec3748 <__bss_end__+0xeb9d38>
 a5c:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 a60:	00001301 	andeq	r1, r0, r1, lsl #6
 a64:	4900050f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sl}
 a68:	10000013 	andne	r0, r0, r3, lsl r0
 a6c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 a70:	0b3a0e03 	bleq	e84284 <__bss_end__+0xe7a874>
 a74:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 a78:	0000193c 	andeq	r1, r0, ip, lsr r9
 a7c:	01110100 	tsteq	r1, r0, lsl #2
 a80:	0b130e25 	bleq	4c431c <__bss_end__+0x4ba90c>
 a84:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 a88:	06120111 			; <UNDEFINED> instruction: 0x06120111
 a8c:	00001710 	andeq	r1, r0, r0, lsl r7
 a90:	0b002402 	bleq	9aa0 <__bss_end__+0x90>
 a94:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 a98:	03000008 	movweq	r0, #8
 a9c:	0b0b0024 	bleq	2c0b34 <__bss_end__+0x2b7124>
 aa0:	0e030b3e 	vmoveq.16	d3[0], r0
 aa4:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
 aa8:	03193f01 	tsteq	r9, #1, 30
 aac:	3b0b3a0e 	blcc	2cf2ec <__bss_end__+0x2c58dc>
 ab0:	1119270b 	tstne	r9, fp, lsl #14
 ab4:	40061201 	andmi	r1, r6, r1, lsl #4
 ab8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 abc:	00001301 	andeq	r1, r0, r1, lsl #6
 ac0:	03000505 	movweq	r0, #1285	; 0x505
 ac4:	3b0b3a0e 	blcc	2cf304 <__bss_end__+0x2c58f4>
 ac8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 acc:	06000017 			; <UNDEFINED> instruction: 0x06000017
 ad0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 ad4:	0b3a0e03 	bleq	e842e8 <__bss_end__+0xe7a8d8>
 ad8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 adc:	01111349 	tsteq	r1, r9, asr #6
 ae0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 ae4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 ae8:	07000013 	smladeq	r0, r3, r0, r0
 aec:	01018289 	smlabbeq	r1, r9, r2, r8
 af0:	13310111 	teqne	r1, #1073741828	; 0x40000004
 af4:	8a080000 	bhi	200afc <__bss_end__+0x1f70ec>
 af8:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
 afc:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
 b00:	34090000 	strcc	r0, [r9], #-0
 b04:	3a080300 	bcc	20170c <__bss_end__+0x1f7cfc>
 b08:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 b0c:	00170213 	andseq	r0, r7, r3, lsl r2
 b10:	82890a00 	addhi	r0, r9, #0, 20
 b14:	01110001 	tsteq	r1, r1
 b18:	00001331 	andeq	r1, r0, r1, lsr r3
 b1c:	0300050b 	movweq	r0, #1291	; 0x50b
 b20:	3b0b3a08 	blcc	2cf348 <__bss_end__+0x2c5938>
 b24:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 b28:	0c000017 	stceq	0, cr0, [r0], {23}
 b2c:	08030034 	stmdaeq	r3, {r2, r4, r5}
 b30:	0b3b0b3a 	bleq	ec3820 <__bss_end__+0xeb9e10>
 b34:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 b38:	0b0d0000 	bleq	340b40 <__bss_end__+0x337130>
 b3c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 b40:	00130106 	andseq	r0, r3, r6, lsl #2
 b44:	012e0e00 	teqeq	lr, r0, lsl #28
 b48:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 b4c:	0b3b0b3a 	bleq	ec383c <__bss_end__+0xeb9e2c>
 b50:	13491927 	movtne	r1, #39207	; 0x9927
 b54:	1301193c 	movwne	r1, #6460	; 0x193c
 b58:	050f0000 	streq	r0, [pc, #-0]	; b60 <_start-0x74a0>
 b5c:	00134900 	andseq	r4, r3, r0, lsl #18
 b60:	002e1000 	eoreq	r1, lr, r0
 b64:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 b68:	0b3b0b3a 	bleq	ec3858 <__bss_end__+0xeb9e48>
 b6c:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 b70:	01000000 	mrseq	r0, (UNDEF: 0)
 b74:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 b78:	0e030b13 	vmoveq.32	d3[0], r0
 b7c:	01110e1b 	tsteq	r1, fp, lsl lr
 b80:	17100612 			; <UNDEFINED> instruction: 0x17100612
 b84:	24020000 	strcs	r0, [r2], #-0
 b88:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 b8c:	0008030b 	andeq	r0, r8, fp, lsl #6
 b90:	00240300 	eoreq	r0, r4, r0, lsl #6
 b94:	0b3e0b0b 	bleq	f837c8 <__bss_end__+0xf79db8>
 b98:	00000e03 	andeq	r0, r0, r3, lsl #28
 b9c:	0b010404 	bleq	41bb4 <__bss_end__+0x381a4>
 ba0:	3b0b3a0b 	blcc	2cf3d4 <__bss_end__+0x2c59c4>
 ba4:	0013010b 	andseq	r0, r3, fp, lsl #2
 ba8:	00280500 	eoreq	r0, r8, r0, lsl #10
 bac:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
 bb0:	16060000 	strne	r0, [r6], -r0
 bb4:	3a0e0300 	bcc	3817bc <__bss_end__+0x377dac>
 bb8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 bbc:	07000013 	smladeq	r0, r3, r0, r0
 bc0:	0e03012e 	adfeqsp	f0, f3, #0.5
 bc4:	0b3b0b3a 	bleq	ec38b4 <__bss_end__+0xeb9ea4>
 bc8:	13491927 	movtne	r1, #39207	; 0x9927
 bcc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 bd0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 bd4:	00130119 	andseq	r0, r3, r9, lsl r1
 bd8:	82890800 	addhi	r0, r9, #0, 16
 bdc:	01110001 	tsteq	r1, r1
 be0:	00001331 	andeq	r1, r0, r1, lsr r3
 be4:	3f012e09 	svccc	0x00012e09
 be8:	3a0e0319 	bcc	381854 <__bss_end__+0x377e44>
 bec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 bf0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 bf4:	97184006 	ldrls	r4, [r8, -r6]
 bf8:	13011942 	movwne	r1, #6466	; 0x1942
 bfc:	890a0000 	stmdbhi	sl, {}	; <UNPREDICTABLE>
 c00:	11010182 	smlabbne	r1, r2, r1, r0
 c04:	01133101 	tsteq	r3, r1, lsl #2
 c08:	0b000013 	bleq	c5c <_start-0x73a4>
 c0c:	0001828a 	andeq	r8, r1, sl, lsl #5
 c10:	42911802 	addsmi	r1, r1, #131072	; 0x20000
 c14:	0c000018 	stceq	0, cr0, [r0], {24}
 c18:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 c1c:	0b3a0e03 	bleq	e84430 <__bss_end__+0xe7aa20>
 c20:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 c24:	01111349 	tsteq	r1, r9, asr #6
 c28:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 c2c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 c30:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 c34:	08030005 	stmdaeq	r3, {r0, r2}
 c38:	0b3b0b3a 	bleq	ec3928 <__bss_end__+0xeb9f18>
 c3c:	17021349 	strne	r1, [r2, -r9, asr #6]
 c40:	890e0000 	stmdbhi	lr, {}	; <UNPREDICTABLE>
 c44:	11010182 	smlabbne	r1, r2, r1, r0
 c48:	00133101 	andseq	r3, r3, r1, lsl #2
 c4c:	00340f00 	eorseq	r0, r4, r0, lsl #30
 c50:	0b3a0e03 	bleq	e84464 <__bss_end__+0xe7aa54>
 c54:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 c58:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 c5c:	0f100000 	svceq	0x00100000
 c60:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 c64:	11000013 	tstne	r0, r3, lsl r0
 c68:	13490035 	movtne	r0, #36917	; 0x9035
 c6c:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 c70:	03193f01 	tsteq	r9, #1, 30
 c74:	3b0b3a0e 	blcc	2cf4b4 <__bss_end__+0x2c5aa4>
 c78:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 c7c:	01193c13 	tsteq	r9, r3, lsl ip
 c80:	13000013 	movwne	r0, #19
 c84:	13490005 	movtne	r0, #36869	; 0x9005
 c88:	26140000 	ldrcs	r0, [r4], -r0
 c8c:	00134900 	andseq	r4, r3, r0, lsl #18
 c90:	00351500 	eorseq	r1, r5, r0, lsl #10
 c94:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
 c98:	03193f00 	tsteq	r9, #0, 30
 c9c:	3b0b3a0e 	blcc	2cf4dc <__bss_end__+0x2c5acc>
 ca0:	3c19270b 	ldccc	7, cr2, [r9], {11}
 ca4:	17000019 	smladne	r0, r9, r0, r0
 ca8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 cac:	0b3a0e03 	bleq	e844c0 <__bss_end__+0xe7aab0>
 cb0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 cb4:	1301193c 	movwne	r1, #6460	; 0x193c
 cb8:	01000000 	mrseq	r0, (UNDEF: 0)
 cbc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 cc0:	0e030b13 	vmoveq.32	d3[0], r0
 cc4:	01110e1b 	tsteq	r1, fp, lsl lr
 cc8:	17100612 			; <UNDEFINED> instruction: 0x17100612
 ccc:	24020000 	strcs	r0, [r2], #-0
 cd0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 cd4:	000e030b 	andeq	r0, lr, fp, lsl #6
 cd8:	00240300 	eoreq	r0, r4, r0, lsl #6
 cdc:	0b3e0b0b 	bleq	f83910 <__bss_end__+0xf79f00>
 ce0:	00000803 	andeq	r0, r0, r3, lsl #16
 ce4:	0b010404 	bleq	41cfc <__bss_end__+0x382ec>
 ce8:	3b0b3a0b 	blcc	2cf51c <__bss_end__+0x2c5b0c>
 cec:	0013010b 	andseq	r0, r3, fp, lsl #2
 cf0:	00280500 	eoreq	r0, r8, r0, lsl #10
 cf4:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
 cf8:	16060000 	strne	r0, [r6], -r0
 cfc:	3a0e0300 	bcc	381904 <__bss_end__+0x377ef4>
 d00:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 d04:	07000013 	smladeq	r0, r3, r0, r0
 d08:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 d0c:	0b3a0e03 	bleq	e84520 <__bss_end__+0xe7ab10>
 d10:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 d14:	06120111 			; <UNDEFINED> instruction: 0x06120111
 d18:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 d1c:	00130119 	andseq	r0, r3, r9, lsl r1
 d20:	00050800 	andeq	r0, r5, r0, lsl #16
 d24:	0b3a0803 	bleq	e82d38 <__bss_end__+0xe79328>
 d28:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 d2c:	00001702 	andeq	r1, r0, r2, lsl #14
 d30:	03003409 	movweq	r3, #1033	; 0x409
 d34:	3b0b3a0e 	blcc	2cf574 <__bss_end__+0x2c5b64>
 d38:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 d3c:	0a000017 	beq	da0 <_start-0x7260>
 d40:	01018289 	smlabbeq	r1, r9, r2, r8
 d44:	13310111 	teqne	r1, #1073741828	; 0x40000004
 d48:	00001301 	andeq	r1, r0, r1, lsl #6
 d4c:	01828a0b 	orreq	r8, r2, fp, lsl #20
 d50:	91180200 	tstls	r8, r0, lsl #4
 d54:	00001842 	andeq	r1, r0, r2, asr #16
 d58:	0182890c 	orreq	r8, r2, ip, lsl #18
 d5c:	31011101 	tstcc	r1, r1, lsl #2
 d60:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 d64:	0b0b000f 	bleq	2c0da8 <__bss_end__+0x2b7398>
 d68:	00001349 	andeq	r1, r0, r9, asr #6
 d6c:	4900350e 	stmdbmi	r0, {r1, r2, r3, r8, sl, ip, sp}
 d70:	0f000013 	svceq	0x00000013
 d74:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 d78:	0b3a0e03 	bleq	e8458c <__bss_end__+0xe7ab7c>
 d7c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 d80:	13010b20 	movwne	r0, #6944	; 0x1b20
 d84:	05100000 	ldreq	r0, [r0, #-0]
 d88:	3a080300 	bcc	201990 <__bss_end__+0x1f7f80>
 d8c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 d90:	11000013 	tstne	r0, r3, lsl r0
 d94:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 d98:	0b3b0b3a 	bleq	ec3a88 <__bss_end__+0xeba078>
 d9c:	00001349 	andeq	r1, r0, r9, asr #6
 da0:	31012e12 	tstcc	r1, r2, lsl lr
 da4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 da8:	97184006 	ldrls	r4, [r8, -r6]
 dac:	13011942 	movwne	r1, #6466	; 0x1942
 db0:	05130000 	ldreq	r0, [r3, #-0]
 db4:	02133100 	andseq	r3, r3, #0, 2
 db8:	14000017 	strne	r0, [r0], #-23
 dbc:	13310034 	teqne	r1, #52	; 0x34
 dc0:	00001702 	andeq	r1, r0, r2, lsl #14
 dc4:	3f012e15 	svccc	0x00012e15
 dc8:	3a0e0319 	bcc	381a34 <__bss_end__+0x378024>
 dcc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 dd0:	11134919 	tstne	r3, r9, lsl r9
 dd4:	40061201 	andmi	r1, r6, r1, lsl #4
 dd8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 ddc:	00001301 	andeq	r1, r0, r1, lsl #6
 de0:	03003416 	movweq	r3, #1046	; 0x416
 de4:	3b0b3a08 	blcc	2cf60c <__bss_end__+0x2c5bfc>
 de8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 dec:	17000017 	smladne	r0, r7, r0, r0
 df0:	00018289 	andeq	r8, r1, r9, lsl #5
 df4:	13310111 	teqne	r1, #1073741828	; 0x40000004
 df8:	1d180000 	ldcne	0, cr0, [r8, #-0]
 dfc:	11133101 	tstne	r3, r1, lsl #2
 e00:	58061201 	stmdapl	r6, {r0, r9, ip}
 e04:	010b590b 	tsteq	fp, fp, lsl #18
 e08:	19000013 	stmdbne	r0, {r0, r1, r4}
 e0c:	0111010b 	tsteq	r1, fp, lsl #2
 e10:	00000612 	andeq	r0, r0, r2, lsl r6
 e14:	31011d1a 	tstcc	r1, sl, lsl sp
 e18:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 e1c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
 e20:	1b00000b 	blne	e54 <_start-0x71ac>
 e24:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 e28:	0b3b0b3a 	bleq	ec3b18 <__bss_end__+0xeba108>
 e2c:	17021349 	strne	r1, [r2, -r9, asr #6]
 e30:	341c0000 	ldrcc	r0, [ip], #-0
 e34:	3a0e0300 	bcc	381a3c <__bss_end__+0x37802c>
 e38:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 e3c:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 e40:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
 e44:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 e48:	0b3a0e03 	bleq	e8465c <__bss_end__+0xe7ac4c>
 e4c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 e50:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 e54:	00001301 	andeq	r1, r0, r1, lsl #6
 e58:	4900051e 	stmdbmi	r0, {r1, r2, r3, r4, r8, sl}
 e5c:	1f000013 	svcne	0x00000013
 e60:	13490026 	movtne	r0, #36902	; 0x9026
 e64:	35200000 	strcc	r0, [r0, #-0]!
 e68:	21000000 	mrscs	r0, (UNDEF: 0)
 e6c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 e70:	0b3a0e03 	bleq	e84684 <__bss_end__+0xe7ac74>
 e74:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 e78:	1301193c 	movwne	r1, #6460	; 0x193c
 e7c:	01000000 	mrseq	r0, (UNDEF: 0)
 e80:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 e84:	0e030b13 	vmoveq.32	d3[0], r0
 e88:	01110e1b 	tsteq	r1, fp, lsl lr
 e8c:	17100612 			; <UNDEFINED> instruction: 0x17100612
 e90:	24020000 	strcs	r0, [r2], #-0
 e94:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 e98:	0008030b 	andeq	r0, r8, fp, lsl #6
 e9c:	00240300 	eoreq	r0, r4, r0, lsl #6
 ea0:	0b3e0b0b 	bleq	f83ad4 <__bss_end__+0xf7a0c4>
 ea4:	00000e03 	andeq	r0, r0, r3, lsl #28
 ea8:	03012e04 	movweq	r2, #7684	; 0x1e04
 eac:	3b0b3a0e 	blcc	2cf6ec <__bss_end__+0x2c5cdc>
 eb0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 eb4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 eb8:	97184006 	ldrls	r4, [r8, -r6]
 ebc:	13011942 	movwne	r1, #6466	; 0x1942
 ec0:	05050000 	streq	r0, [r5, #-0]
 ec4:	3a080300 	bcc	201acc <__bss_end__+0x1f80bc>
 ec8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 ecc:	00170213 	andseq	r0, r7, r3, lsl r2
 ed0:	82890600 	addhi	r0, r9, #0, 12
 ed4:	01110101 	tsteq	r1, r1, lsl #2
 ed8:	00001331 	andeq	r1, r0, r1, lsr r3
 edc:	01828a07 	orreq	r8, r2, r7, lsl #20
 ee0:	91180200 	tstls	r8, r0, lsl #4
 ee4:	00001842 	andeq	r1, r0, r2, asr #16
 ee8:	27011508 	strcs	r1, [r1, -r8, lsl #10]
 eec:	01134919 	tsteq	r3, r9, lsl r9
 ef0:	09000013 	stmdbeq	r0, {r0, r1, r4}
 ef4:	13490005 	movtne	r0, #36869	; 0x9005
 ef8:	340a0000 	strcc	r0, [sl], #-0
 efc:	3a0e0300 	bcc	381b04 <__bss_end__+0x3780f4>
 f00:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 f04:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 f08:	0b000018 	bleq	f70 <_start-0x7090>
 f0c:	0b0b000f 	bleq	2c0f50 <__bss_end__+0x2b7540>
 f10:	00001349 	andeq	r1, r0, r9, asr #6
 f14:	3f012e0c 	svccc	0x00012e0c
 f18:	3a0e0319 	bcc	381b84 <__bss_end__+0x378174>
 f1c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 f20:	00193c19 	andseq	r3, r9, r9, lsl ip
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	0000002c 	andeq	r0, r0, ip, lsr #32
       4:	00000040 	andeq	r0, r0, r0, asr #32
       8:	9f300002 	svcls	0x00300002
       c:	00000040 	andeq	r0, r0, r0, asr #32
      10:	00000084 	andeq	r0, r0, r4, lsl #1
      14:	00540001 	subseq	r0, r4, r1
	...
      20:	1c000000 	stcne	0, cr0, [r0], {-0}
      24:	01000000 	mrseq	r0, (UNDEF: 0)
      28:	001c5000 	andseq	r5, ip, r0
      2c:	01580000 	cmpeq	r8, r0
      30:	00040000 	andeq	r0, r4, r0
      34:	9f5001f3 	svcls	0x005001f3
	...
      44:	00000020 	andeq	r0, r0, r0, lsr #32
      48:	20510001 	subscs	r0, r1, r1
      4c:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
      50:	04000001 	streq	r0, [r0], #-1
      54:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
      58:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      5c:	00000000 	andeq	r0, r0, r0
      60:	00001000 	andeq	r1, r0, r0
      64:	00013800 	andeq	r3, r1, r0, lsl #16
      68:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
      74:	00000014 	andeq	r0, r0, r4, lsl r0
      78:	00000038 	andeq	r0, r0, r8, lsr r0
      7c:	38550001 	ldmdacc	r5, {r0}^
      80:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
      84:	01000001 	tsteq	r0, r1
      88:	01385800 	teqeq	r8, r0, lsl #16
      8c:	01580000 	cmpeq	r8, r0
      90:	00010000 	andeq	r0, r1, r0
      94:	00000055 	andeq	r0, r0, r5, asr r0
      98:	00000000 	andeq	r0, r0, r0
      9c:	00001800 	andeq	r1, r0, r0, lsl #16
      a0:	00013800 	andeq	r3, r1, r0, lsl #16
      a4:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
      b0:	00000024 	andeq	r0, r0, r4, lsr #32
      b4:	00000138 	andeq	r0, r0, r8, lsr r1
      b8:	00550001 	subseq	r0, r5, r1
      bc:	00000000 	andeq	r0, r0, r0
      c0:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
      c4:	2c000000 	stccs	0, cr0, [r0], {-0}
      c8:	01000000 	mrseq	r0, (UNDEF: 0)
      cc:	00005300 	andeq	r5, r0, r0, lsl #6
      d0:	00000000 	andeq	r0, r0, r0
      d4:	00380000 	eorseq	r0, r8, r0
      d8:	00580000 	subseq	r0, r8, r0
      dc:	00010000 	andeq	r0, r1, r0
      e0:	00005858 	andeq	r5, r0, r8, asr r8
      e4:	00013800 	andeq	r3, r1, r0, lsl #16
      e8:	75000500 	strvc	r0, [r0, #-1280]	; 0x500
      ec:	9f243100 	svcls	0x00243100
	...
      f8:	00000038 	andeq	r0, r0, r8, lsr r0
      fc:	00000040 	andeq	r0, r0, r0, asr #32
     100:	00770005 	rsbseq	r0, r7, r5
     104:	409f1a31 	addsmi	r1, pc, r1, lsr sl	; <UNPREDICTABLE>
     108:	43000000 	movwmi	r0, #0
     10c:	01000000 	mrseq	r0, (UNDEF: 0)
     110:	00435100 	subeq	r5, r3, r0, lsl #2
     114:	01580000 	cmpeq	r8, r0
     118:	00050000 	andeq	r0, r5, r0
     11c:	1a310077 	bne	c40300 <__bss_end__+0xc368f0>
     120:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     124:	00000000 	andeq	r0, r0, r0
     128:	00004400 	andeq	r4, r0, r0, lsl #8
     12c:	00005800 	andeq	r5, r0, r0, lsl #16
     130:	58000100 	stmdapl	r0, {r8}
     134:	00000058 	andeq	r0, r0, r8, asr r0
     138:	00000138 	andeq	r0, r0, r8, lsr r1
     13c:	00750005 	rsbseq	r0, r5, r5
     140:	009f2431 	addseq	r2, pc, r1, lsr r4	; <UNPREDICTABLE>
     144:	00000000 	andeq	r0, r0, r0
     148:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     14c:	4c000000 	stcmi	0, cr0, [r0], {-0}
     150:	01000000 	mrseq	r0, (UNDEF: 0)
     154:	00005300 	andeq	r5, r0, r0, lsl #6
     158:	00000000 	andeq	r0, r0, r0
     15c:	00580000 	subseq	r0, r8, r0
     160:	00780000 	rsbseq	r0, r8, r0
     164:	00010000 	andeq	r0, r1, r0
     168:	00007858 	andeq	r7, r0, r8, asr r8
     16c:	00013800 	andeq	r3, r1, r0, lsl #16
     170:	75000800 	strvc	r0, [r0, #-2048]	; 0x800
     174:	75243100 	strvc	r3, [r4, #-256]!	; 0x100
     178:	009f2200 	addseq	r2, pc, r0, lsl #4
     17c:	00000000 	andeq	r0, r0, r0
     180:	64000000 	strvs	r0, [r0], #-0
     184:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
     188:	01000000 	mrseq	r0, (UNDEF: 0)
     18c:	00785800 	rsbseq	r5, r8, r0, lsl #16
     190:	01380000 	teqeq	r8, r0
     194:	00080000 	andeq	r0, r8, r0
     198:	24310075 	ldrtcs	r0, [r1], #-117	; 0x75
     19c:	9f220075 	svcls	0x00220075
	...
     1a8:	00000068 	andeq	r0, r0, r8, rrx
     1ac:	0000006c 	andeq	r0, r0, ip, rrx
     1b0:	00530001 	subseq	r0, r3, r1
     1b4:	00000000 	andeq	r0, r0, r0
     1b8:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
     1bc:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
     1c0:	01000000 	mrseq	r0, (UNDEF: 0)
     1c4:	00985800 	addseq	r5, r8, r0, lsl #16
     1c8:	01380000 	teqeq	r8, r0
     1cc:	00050000 	andeq	r0, r5, r0
     1d0:	24320075 	ldrtcs	r0, [r2], #-117	; 0x75
     1d4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     1d8:	00000000 	andeq	r0, r0, r0
     1dc:	00008400 	andeq	r8, r0, r0, lsl #8
     1e0:	00009800 	andeq	r9, r0, r0, lsl #16
     1e4:	58000100 	stmdapl	r0, {r8}
     1e8:	00000098 	muleq	r0, r8, r0
     1ec:	00000138 	andeq	r0, r0, r8, lsr r1
     1f0:	00750005 	rsbseq	r0, r5, r5
     1f4:	009f2432 	addseq	r2, pc, r2, lsr r4	; <UNPREDICTABLE>
     1f8:	00000000 	andeq	r0, r0, r0
     1fc:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
     200:	8c000000 	stchi	0, cr0, [r0], {-0}
     204:	01000000 	mrseq	r0, (UNDEF: 0)
     208:	00005300 	andeq	r5, r0, r0, lsl #6
     20c:	00000000 	andeq	r0, r0, r0
     210:	00980000 	addseq	r0, r8, r0
     214:	00b80000 	adcseq	r0, r8, r0
     218:	00010000 	andeq	r0, r1, r0
     21c:	0000b858 	andeq	fp, r0, r8, asr r8
     220:	00013800 	andeq	r3, r1, r0, lsl #16
     224:	75000800 	strvc	r0, [r0, #-2048]	; 0x800
     228:	75243200 	strvc	r3, [r4, #-512]!	; 0x200
     22c:	009f2200 	addseq	r2, pc, r0, lsl #4
     230:	00000000 	andeq	r0, r0, r0
     234:	a4000000 	strge	r0, [r0], #-0
     238:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
     23c:	01000000 	mrseq	r0, (UNDEF: 0)
     240:	00b85800 	adcseq	r5, r8, r0, lsl #16
     244:	01380000 	teqeq	r8, r0
     248:	00080000 	andeq	r0, r8, r0
     24c:	24320075 	ldrtcs	r0, [r2], #-117	; 0x75
     250:	9f220075 	svcls	0x00220075
	...
     25c:	000000a8 	andeq	r0, r0, r8, lsr #1
     260:	000000ac 	andeq	r0, r0, ip, lsr #1
     264:	00530001 	subseq	r0, r3, r1
     268:	00000000 	andeq	r0, r0, r0
     26c:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
     270:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
     274:	01000000 	mrseq	r0, (UNDEF: 0)
     278:	00d85800 	sbcseq	r5, r8, r0, lsl #16
     27c:	01380000 	teqeq	r8, r0
     280:	000a0000 	andeq	r0, sl, r0
     284:	24320075 	ldrtcs	r0, [r2], #-117	; 0x75
     288:	24310075 	ldrtcs	r0, [r1], #-117	; 0x75
     28c:	00009f22 	andeq	r9, r0, r2, lsr #30
     290:	00000000 	andeq	r0, r0, r0
     294:	00c40000 	sbceq	r0, r4, r0
     298:	00d80000 	sbcseq	r0, r8, r0
     29c:	00010000 	andeq	r0, r1, r0
     2a0:	0000d858 	andeq	sp, r0, r8, asr r8
     2a4:	00013800 	andeq	r3, r1, r0, lsl #16
     2a8:	75000a00 	strvc	r0, [r0, #-2560]	; 0xa00
     2ac:	75243200 	strvc	r3, [r4, #-512]!	; 0x200
     2b0:	22243100 	eorcs	r3, r4, #0, 2
     2b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     2b8:	00000000 	andeq	r0, r0, r0
     2bc:	0000c800 	andeq	ip, r0, r0, lsl #16
     2c0:	0000cc00 	andeq	ip, r0, r0, lsl #24
     2c4:	53000100 	movwpl	r0, #256	; 0x100
	...
     2d0:	000000d8 	ldrdeq	r0, [r0], -r8
     2d4:	000000f8 	strdeq	r0, [r0], -r8
     2d8:	f8580001 			; <UNDEFINED> instruction: 0xf8580001
     2dc:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     2e0:	0d000001 	stceq	0, cr0, [r0, #-4]
     2e4:	32007500 	andcc	r7, r0, #0, 10
     2e8:	31007524 	tstcc	r0, r4, lsr #10
     2ec:	00752224 	rsbseq	r2, r5, r4, lsr #4
     2f0:	00009f22 	andeq	r9, r0, r2, lsr #30
     2f4:	00000000 	andeq	r0, r0, r0
     2f8:	00e40000 	rsceq	r0, r4, r0
     2fc:	00f80000 	rscseq	r0, r8, r0
     300:	00010000 	andeq	r0, r1, r0
     304:	0000f858 	andeq	pc, r0, r8, asr r8	; <UNPREDICTABLE>
     308:	00013800 	andeq	r3, r1, r0, lsl #16
     30c:	75000d00 	strvc	r0, [r0, #-3328]	; 0xd00
     310:	75243200 	strvc	r3, [r4, #-512]!	; 0x200
     314:	22243100 	eorcs	r3, r4, #0, 2
     318:	9f220075 	svcls	0x00220075
	...
     324:	000000e8 	andeq	r0, r0, r8, ror #1
     328:	000000ec 	andeq	r0, r0, ip, ror #1
     32c:	00530001 	subseq	r0, r3, r1
     330:	00000000 	andeq	r0, r0, r0
     334:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
     338:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     33c:	01000001 	tsteq	r0, r1
     340:	01185800 	tsteq	r8, r0, lsl #16
     344:	01380000 	teqeq	r8, r0
     348:	00050000 	andeq	r0, r5, r0
     34c:	24330075 	ldrtcs	r0, [r3], #-117	; 0x75
     350:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     354:	00000000 	andeq	r0, r0, r0
     358:	00010400 	andeq	r0, r1, r0, lsl #8
     35c:	00011800 	andeq	r1, r1, r0, lsl #16
     360:	58000100 	stmdapl	r0, {r8}
     364:	00000118 	andeq	r0, r0, r8, lsl r1
     368:	00000138 	andeq	r0, r0, r8, lsr r1
     36c:	00750005 	rsbseq	r0, r5, r5
     370:	009f2433 	addseq	r2, pc, r3, lsr r4	; <UNPREDICTABLE>
     374:	00000000 	andeq	r0, r0, r0
     378:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     37c:	0c000001 	stceq	0, cr0, [r0], {1}
     380:	01000001 	tsteq	r0, r1
     384:	00005300 	andeq	r5, r0, r0, lsl #6
     388:	00000000 	andeq	r0, r0, r0
     38c:	01180000 	tsteq	r8, r0
     390:	01200000 	teqeq	r0, r0
     394:	00060000 	andeq	r0, r6, r0
     398:	80080077 	andhi	r0, r8, r7, ror r0
     39c:	01209f1a 	teqeq	r0, sl, lsl pc
     3a0:	01230000 	teqeq	r3, r0
     3a4:	00010000 	andeq	r0, r1, r0
     3a8:	00012351 	andeq	r2, r1, r1, asr r3
     3ac:	00015800 	andeq	r5, r1, r0, lsl #16
     3b0:	77000600 	strvc	r0, [r0, -r0, lsl #12]
     3b4:	1a800800 	bne	fe0023bc <__bss_end__+0xfdff89ac>
     3b8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     3bc:	00000000 	andeq	r0, r0, r0
     3c0:	00012800 	andeq	r2, r1, r0, lsl #16
     3c4:	00012c00 	andeq	r2, r1, r0, lsl #24
     3c8:	53000100 	movwpl	r0, #256	; 0x100
	...
     3d4:	00000148 	andeq	r0, r0, r8, asr #2
     3d8:	0000014c 	andeq	r0, r0, ip, asr #2
     3dc:	00530001 	subseq	r0, r3, r1
     3e0:	00000000 	andeq	r0, r0, r0
     3e4:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     3e8:	6f000001 	svcvs	0x00000001
     3ec:	01000001 	tsteq	r0, r1
     3f0:	016f5000 	cmneq	pc, r0
     3f4:	01d40000 	bicseq	r0, r4, r0
     3f8:	00010000 	andeq	r0, r1, r0
     3fc:	0001d459 	andeq	sp, r1, r9, asr r4
     400:	00031000 	andeq	r1, r3, r0
     404:	f3000400 	vshl.u8	d0, d0, d0
     408:	109f5001 	addsne	r5, pc, r1
     40c:	18000003 	stmdane	r0, {r0, r1}
     410:	01000003 	tsteq	r0, r3
     414:	03185900 	tsteq	r8, #0, 18
     418:	03200000 	teqeq	r0, #0
     41c:	00040000 	andeq	r0, r4, r0
     420:	9f5001f3 	svcls	0x005001f3
	...
     42c:	00000158 	andeq	r0, r0, r8, asr r1
     430:	0000016f 	andeq	r0, r0, pc, ror #2
     434:	6f510001 	svcvs	0x00510001
     438:	20000001 	andcs	r0, r0, r1
     43c:	01000003 	tsteq	r0, r3
     440:	00005600 	andeq	r5, r0, r0, lsl #12
     444:	00000000 	andeq	r0, r0, r0
     448:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
     44c:	029c0000 	addseq	r0, ip, #0
     450:	00010000 	andeq	r0, r1, r0
     454:	00000058 	andeq	r0, r0, r8, asr r0
     458:	00000000 	andeq	r0, r0, r0
     45c:	0001b000 	andeq	fp, r1, r0
     460:	0002d400 	andeq	sp, r2, r0, lsl #8
     464:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     470:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
     474:	000002d4 	ldrdeq	r0, [r0], -r4
     478:	00740005 	rsbseq	r0, r4, r5
     47c:	009f2531 	addseq	r2, pc, r1, lsr r5	; <UNPREDICTABLE>
     480:	00000000 	andeq	r0, r0, r0
     484:	b0000000 	andlt	r0, r0, r0
     488:	d4000001 	strle	r0, [r0], #-1
     48c:	02000001 	andeq	r0, r0, #1
     490:	d49f3000 	ldrle	r3, [pc], #0	; 498 <_start-0x7b68>
     494:	10000001 	andne	r0, r0, r1
     498:	01000003 	tsteq	r0, r3
     49c:	03185900 	tsteq	r8, #0, 18
     4a0:	03200000 	teqeq	r0, #0
     4a4:	00010000 	andeq	r0, r1, r0
     4a8:	00000059 	andeq	r0, r0, r9, asr r0
     4ac:	00000000 	andeq	r0, r0, r0
     4b0:	00016c00 	andeq	r6, r1, r0, lsl #24
     4b4:	00016f00 	andeq	r6, r1, r0, lsl #30
     4b8:	51000100 	mrspl	r0, (UNDEF: 16)
     4bc:	0000016f 	andeq	r0, r0, pc, ror #2
     4c0:	00000320 	andeq	r0, r0, r0, lsr #6
     4c4:	00560001 	subseq	r0, r6, r1
     4c8:	00000000 	andeq	r0, r0, r0
     4cc:	74000000 	strvc	r0, [r0], #-0
     4d0:	b0000001 	andlt	r0, r0, r1
     4d4:	01000001 	tsteq	r0, r1
     4d8:	03105400 	tsteq	r0, #0, 8
     4dc:	03180000 	tsteq	r8, #0
     4e0:	00010000 	andeq	r0, r1, r0
     4e4:	00000054 	andeq	r0, r0, r4, asr r0
     4e8:	00000000 	andeq	r0, r0, r0
     4ec:	0001ac00 	andeq	sl, r1, r0, lsl #24
     4f0:	0001c800 	andeq	ip, r1, r0, lsl #16
     4f4:	58000100 	stmdapl	r0, {r8}
	...
     500:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
     504:	000001cf 	andeq	r0, r0, pc, asr #3
     508:	cf520001 	svcgt	0x00520001
     50c:	d4000001 	strle	r0, [r0], #-1
     510:	08000002 	stmdaeq	r0, {r1}
     514:	31007400 	tstcc	r0, r0, lsl #8
     518:	22007425 	andcs	r7, r0, #620756992	; 0x25000000
     51c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     520:	00000000 	andeq	r0, r0, r0
     524:	0001b400 	andeq	fp, r1, r0, lsl #8
     528:	0001c800 	andeq	ip, r1, r0, lsl #16
     52c:	58000100 	stmdapl	r0, {r8}
	...
     538:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     53c:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     540:	00530001 	subseq	r0, r3, r1
     544:	00000000 	andeq	r0, r0, r0
     548:	d4000000 	strle	r0, [r0], #-0
     54c:	d4000001 	strle	r0, [r0], #-1
     550:	01000002 	tsteq	r0, r2
     554:	00005400 	andeq	r5, r0, r0, lsl #8
     558:	00000000 	andeq	r0, r0, r0
     55c:	01d40000 	bicseq	r0, r4, r0
     560:	01e80000 	mvneq	r0, r0
     564:	00010000 	andeq	r0, r1, r0
     568:	00000058 	andeq	r0, r0, r8, asr r0
     56c:	00000000 	andeq	r0, r0, r0
     570:	0001d800 	andeq	sp, r1, r0, lsl #16
     574:	0001dc00 	andeq	sp, r1, r0, lsl #24
     578:	53000100 	movwpl	r0, #256	; 0x100
	...
     584:	000001f8 	strdeq	r0, [r0], -r8
     588:	000002d4 	ldrdeq	r0, [r0], -r4
     58c:	00540001 	subseq	r0, r4, r1
     590:	00000000 	andeq	r0, r0, r0
     594:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
     598:	0c000001 	stceq	0, cr0, [r0], {1}
     59c:	01000002 	tsteq	r0, r2
     5a0:	00005800 	andeq	r5, r0, r0, lsl #16
     5a4:	00000000 	andeq	r0, r0, r0
     5a8:	01fc0000 	mvnseq	r0, r0
     5ac:	02000000 	andeq	r0, r0, #0
     5b0:	00010000 	andeq	r0, r1, r0
     5b4:	00000053 	andeq	r0, r0, r3, asr r0
     5b8:	00000000 	andeq	r0, r0, r0
     5bc:	00021c00 	andeq	r1, r2, r0, lsl #24
     5c0:	0002d400 	andeq	sp, r2, r0, lsl #8
     5c4:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     5d0:	0000021c 	andeq	r0, r0, ip, lsl r2
     5d4:	00000230 	andeq	r0, r0, r0, lsr r2
     5d8:	00580001 	subseq	r0, r8, r1
     5dc:	00000000 	andeq	r0, r0, r0
     5e0:	20000000 	andcs	r0, r0, r0
     5e4:	24000002 	strcs	r0, [r0], #-2
     5e8:	01000002 	tsteq	r0, r2
     5ec:	00005300 	andeq	r5, r0, r0, lsl #6
     5f0:	00000000 	andeq	r0, r0, r0
     5f4:	02400000 	subeq	r0, r0, #0
     5f8:	02d40000 	sbcseq	r0, r4, #0
     5fc:	00010000 	andeq	r0, r1, r0
     600:	00000054 	andeq	r0, r0, r4, asr r0
     604:	00000000 	andeq	r0, r0, r0
     608:	00024000 	andeq	r4, r2, r0
     60c:	00025400 	andeq	r5, r2, r0, lsl #8
     610:	58000100 	stmdapl	r0, {r8}
	...
     61c:	00000244 	andeq	r0, r0, r4, asr #4
     620:	00000248 	andeq	r0, r0, r8, asr #4
     624:	00530001 	subseq	r0, r3, r1
     628:	00000000 	andeq	r0, r0, r0
     62c:	64000000 	strvs	r0, [r0], #-0
     630:	d4000002 	strle	r0, [r0], #-2
     634:	01000002 	tsteq	r0, r2
     638:	00005400 	andeq	r5, r0, r0, lsl #8
     63c:	00000000 	andeq	r0, r0, r0
     640:	02640000 	rsbeq	r0, r4, #0
     644:	02780000 	rsbseq	r0, r8, #0
     648:	00010000 	andeq	r0, r1, r0
     64c:	00000058 	andeq	r0, r0, r8, asr r0
     650:	00000000 	andeq	r0, r0, r0
     654:	00026800 	andeq	r6, r2, r0, lsl #16
     658:	00026c00 	andeq	r6, r2, r0, lsl #24
     65c:	53000100 	movwpl	r0, #256	; 0x100
	...
     668:	00000288 	andeq	r0, r0, r8, lsl #5
     66c:	000002d4 	ldrdeq	r0, [r0], -r4
     670:	00540001 	subseq	r0, r4, r1
     674:	00000000 	andeq	r0, r0, r0
     678:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
     67c:	9c000002 	stcls	0, cr0, [r0], {2}
     680:	01000002 	tsteq	r0, r2
     684:	00005800 	andeq	r5, r0, r0, lsl #16
     688:	00000000 	andeq	r0, r0, r0
     68c:	028c0000 	addeq	r0, ip, #0
     690:	02900000 	addseq	r0, r0, #0
     694:	00010000 	andeq	r0, r1, r0
     698:	00000053 	andeq	r0, r0, r3, asr r0
     69c:	00000000 	andeq	r0, r0, r0
     6a0:	0002ac00 	andeq	sl, r2, r0, lsl #24
     6a4:	0002d400 	andeq	sp, r2, r0, lsl #8
     6a8:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     6b4:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
     6b8:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
     6bc:	00530001 	subseq	r0, r3, r1
     6c0:	00000000 	andeq	r0, r0, r0
     6c4:	cc000000 	stcgt	0, cr0, [r0], {-0}
     6c8:	10000002 	andne	r0, r0, r2
     6cc:	02000003 	andeq	r0, r0, #3
     6d0:	189f3000 	ldmne	pc, {ip, sp}	; <UNPREDICTABLE>
     6d4:	20000003 	andcs	r0, r0, r3
     6d8:	02000003 	andeq	r0, r0, #3
     6dc:	009f3000 	addseq	r3, pc, r0
     6e0:	00000000 	andeq	r0, r0, r0
     6e4:	cc000000 	stcgt	0, cr0, [r0], {-0}
     6e8:	10000002 	andne	r0, r0, r2
     6ec:	01000003 	tsteq	r0, r3
     6f0:	03185500 	tsteq	r8, #0, 10
     6f4:	03200000 	teqeq	r0, #0
     6f8:	00010000 	andeq	r0, r1, r0
     6fc:	00000055 	andeq	r0, r0, r5, asr r0
     700:	00000000 	andeq	r0, r0, r0
     704:	0002d400 	andeq	sp, r2, r0, lsl #8
     708:	00031000 	andeq	r1, r3, r0
     70c:	54000100 	strpl	r0, [r0], #-256	; 0x100
     710:	00000318 	andeq	r0, r0, r8, lsl r3
     714:	00000320 	andeq	r0, r0, r0, lsr #6
     718:	00540001 	subseq	r0, r4, r1
     71c:	00000000 	andeq	r0, r0, r0
     720:	20000000 	andcs	r0, r0, r0
     724:	40000003 	andmi	r0, r0, r3
     728:	01000003 	tsteq	r0, r3
     72c:	03405000 	movteq	r5, #0
     730:	03540000 	cmpeq	r4, #0
     734:	00010000 	andeq	r0, r1, r0
     738:	00035458 	andeq	r5, r3, r8, asr r4
     73c:	00036400 	andeq	r6, r3, r0, lsl #8
     740:	50000100 	andpl	r0, r0, r0, lsl #2
     744:	00000364 	andeq	r0, r0, r4, ror #6
     748:	000003ac 	andeq	r0, r0, ip, lsr #7
     74c:	00580001 	subseq	r0, r8, r1
     750:	00000000 	andeq	r0, r0, r0
     754:	20000000 	andcs	r0, r0, r0
     758:	44000003 	strmi	r0, [r0], #-3
     75c:	01000003 	tsteq	r0, r3
     760:	03445100 	movteq	r5, #16640	; 0x4100
     764:	03540000 	cmpeq	r4, #0
     768:	00010000 	andeq	r0, r1, r0
     76c:	00035456 	andeq	r5, r3, r6, asr r4
     770:	00036400 	andeq	r6, r3, r0, lsl #8
     774:	51000100 	mrspl	r0, (UNDEF: 16)
     778:	00000364 	andeq	r0, r0, r4, ror #6
     77c:	000003ac 	andeq	r0, r0, ip, lsr #7
     780:	00560001 	subseq	r0, r6, r1
     784:	00000000 	andeq	r0, r0, r0
     788:	20000000 	andcs	r0, r0, r0
     78c:	48000003 	stmdami	r0, {r0, r1}
     790:	01000003 	tsteq	r0, r3
     794:	03485200 	movteq	r5, #33280	; 0x8200
     798:	03540000 	cmpeq	r4, #0
     79c:	00040000 	andeq	r0, r4, r0
     7a0:	9f5201f3 	svcls	0x005201f3
     7a4:	00000354 	andeq	r0, r0, r4, asr r3
     7a8:	00000364 	andeq	r0, r0, r4, ror #6
     7ac:	64520001 	ldrbvs	r0, [r2], #-1
     7b0:	ac000003 	stcge	0, cr0, [r0], {3}
     7b4:	03000003 	movweq	r0, #3
     7b8:	9f017700 	svcls	0x00017700
	...
     7c4:	00000320 	andeq	r0, r0, r0, lsr #6
     7c8:	0000034c 	andeq	r0, r0, ip, asr #6
     7cc:	4c530001 	mrrcmi	0, 0, r0, r3, cr1
     7d0:	54000003 	strpl	r0, [r0], #-3
     7d4:	04000003 	streq	r0, [r0], #-3
     7d8:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
     7dc:	0003549f 	muleq	r3, pc, r4	; <UNPREDICTABLE>
     7e0:	00036400 	andeq	r6, r3, r0, lsl #8
     7e4:	53000100 	movwpl	r0, #256	; 0x100
     7e8:	00000364 	andeq	r0, r0, r4, ror #6
     7ec:	000003ac 	andeq	r0, r0, ip, lsr #7
     7f0:	01f30004 	mvnseq	r0, r4
     7f4:	00009f53 	andeq	r9, r0, r3, asr pc
     7f8:	00000000 	andeq	r0, r0, r0
     7fc:	035c0000 	cmpeq	ip, #0
     800:	03640000 	cmneq	r4, #0
     804:	00020000 	andeq	r0, r2, r0
     808:	03649f30 	cmneq	r4, #48, 30	; 0xc0
     80c:	03ac0000 			; <UNDEFINED> instruction: 0x03ac0000
     810:	00010000 	andeq	r0, r1, r0
     814:	00000054 	andeq	r0, r0, r4, asr r0
     818:	00000000 	andeq	r0, r0, r0
     81c:	00037400 	andeq	r7, r3, r0, lsl #8
     820:	00038400 	andeq	r8, r3, r0, lsl #8
     824:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     830:	000003ac 	andeq	r0, r0, ip, lsr #7
     834:	000003c8 	andeq	r0, r0, r8, asr #7
     838:	c8500001 	ldmdagt	r0, {r0}^
     83c:	dc000003 	stcle	0, cr0, [r0], {3}
     840:	01000003 	tsteq	r0, r3
     844:	03dc5700 	bicseq	r5, ip, #0, 14
     848:	03ec0000 	mvneq	r0, #0
     84c:	00010000 	andeq	r0, r1, r0
     850:	0003ec50 	andeq	lr, r3, r0, asr ip
     854:	00042400 	andeq	r2, r4, r0, lsl #8
     858:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
     864:	000003ac 	andeq	r0, r0, ip, lsr #7
     868:	000003cc 	andeq	r0, r0, ip, asr #7
     86c:	cc510001 	mrrcgt	0, 0, r0, r1, cr1
     870:	dc000003 	stcle	0, cr0, [r0], {3}
     874:	01000003 	tsteq	r0, r3
     878:	03dc5500 	bicseq	r5, ip, #0, 10
     87c:	03ec0000 	mvneq	r0, #0
     880:	00010000 	andeq	r0, r1, r0
     884:	0003ec51 	andeq	lr, r3, r1, asr ip
     888:	00042400 	andeq	r2, r4, r0, lsl #8
     88c:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
     898:	000003ac 	andeq	r0, r0, ip, lsr #7
     89c:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     8a0:	d0520001 	subsle	r0, r2, r1
     8a4:	dc000003 	stcle	0, cr0, [r0], {3}
     8a8:	04000003 	streq	r0, [r0], #-3
     8ac:	5201f300 	andpl	pc, r1, #0, 6
     8b0:	0003dc9f 	muleq	r3, pc, ip	; <UNPREDICTABLE>
     8b4:	0003ec00 	andeq	lr, r3, r0, lsl #24
     8b8:	52000100 	andpl	r0, r0, #0, 2
     8bc:	000003ec 	andeq	r0, r0, ip, ror #7
     8c0:	00000424 	andeq	r0, r0, r4, lsr #8
     8c4:	01760003 	cmneq	r6, r3
     8c8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     8cc:	00000000 	andeq	r0, r0, r0
     8d0:	0003ac00 	andeq	sl, r3, r0, lsl #24
     8d4:	0003d400 	andeq	sp, r3, r0, lsl #8
     8d8:	53000100 	movwpl	r0, #256	; 0x100
     8dc:	000003d4 	ldrdeq	r0, [r0], -r4
     8e0:	000003dc 	ldrdeq	r0, [r0], -ip
     8e4:	dc580001 	mrrcle	0, 0, r0, r8, cr1
     8e8:	ec000003 	stc	0, cr0, [r0], {3}
     8ec:	01000003 	tsteq	r0, r3
     8f0:	03ec5300 	mvneq	r5, #0, 6
     8f4:	04240000 	strteq	r0, [r4], #-0
     8f8:	00010000 	andeq	r0, r1, r0
     8fc:	00000058 	andeq	r0, r0, r8, asr r0
     900:	00000000 	andeq	r0, r0, r0
     904:	0003e400 	andeq	lr, r3, r0, lsl #8
     908:	0003ec00 	andeq	lr, r3, r0, lsl #24
     90c:	30000200 	andcc	r0, r0, r0, lsl #4
     910:	0003ec9f 	muleq	r3, pc, ip	; <UNPREDICTABLE>
     914:	00042400 	andeq	r2, r4, r0, lsl #8
     918:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     924:	00000424 	andeq	r0, r0, r4, lsr #8
     928:	00000443 	andeq	r0, r0, r3, asr #8
     92c:	43510001 	cmpmi	r1, #1
     930:	d4000004 	strle	r0, [r0], #-4
     934:	04000004 	streq	r0, [r0], #-4
     938:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     93c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     940:	00000000 	andeq	r0, r0, r0
     944:	00042400 	andeq	r2, r4, r0, lsl #8
     948:	00044300 	andeq	r4, r4, r0, lsl #6
     94c:	52000100 	andpl	r0, r0, #0, 2
     950:	00000443 	andeq	r0, r0, r3, asr #8
     954:	000004d4 	ldrdeq	r0, [r0], -r4
     958:	01f30004 	mvnseq	r0, r4
     95c:	00009f52 	andeq	r9, r0, r2, asr pc
     960:	00000000 	andeq	r0, r0, r0
     964:	04240000 	strteq	r0, [r4], #-0
     968:	04430000 	strbeq	r0, [r3], #-0
     96c:	00010000 	andeq	r0, r1, r0
     970:	00044353 	andeq	r4, r4, r3, asr r3
     974:	0004d400 	andeq	sp, r4, r0, lsl #8
     978:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
     984:	00000458 	andeq	r0, r0, r8, asr r4
     988:	000004a0 	andeq	r0, r0, r0, lsr #9
     98c:	a0520001 	subsge	r0, r2, r1
     990:	ac000004 	stcge	0, cr0, [r0], {4}
     994:	06000004 	streq	r0, [r0], -r4
     998:	76007500 	strvc	r7, [r0], -r0, lsl #10
     99c:	ac9f1e00 	ldcge	14, cr1, [pc], {0}
     9a0:	d4000004 	strle	r0, [r0], #-4
     9a4:	01000004 	tsteq	r0, r4
     9a8:	00005200 	andeq	r5, r0, r0, lsl #4
     9ac:	00000000 	andeq	r0, r0, r0
     9b0:	04d40000 	ldrbeq	r0, [r4], #0
     9b4:	04df0000 	ldrbeq	r0, [pc], #0	; 9bc <_start-0x7644>
     9b8:	00010000 	andeq	r0, r1, r0
     9bc:	0004df50 	andeq	sp, r4, r0, asr pc
     9c0:	00050c00 	andeq	r0, r5, r0, lsl #24
     9c4:	f3000400 	vshl.u8	d0, d0, d0
     9c8:	009f5001 	addseq	r5, pc, r1
     9cc:	00000000 	andeq	r0, r0, r0
     9d0:	e0000000 	and	r0, r0, r0
     9d4:	ec000004 	stc	0, cr0, [r0], {4}
     9d8:	01000004 	tsteq	r0, r4
     9dc:	00005000 	andeq	r5, r0, r0
     9e0:	00000000 	andeq	r0, r0, r0
     9e4:	050c0000 	streq	r0, [ip, #-0]
     9e8:	051c0000 	ldreq	r0, [ip, #-0]
     9ec:	00010000 	andeq	r0, r1, r0
     9f0:	00051c50 	andeq	r1, r5, r0, asr ip
     9f4:	00053800 	andeq	r3, r5, r0, lsl #16
     9f8:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
     a04:	0000050c 	andeq	r0, r0, ip, lsl #10
     a08:	0000051c 	andeq	r0, r0, ip, lsl r5
     a0c:	1c510001 	mrrcne	0, 0, r0, r1, cr1
     a10:	38000005 	stmdacc	r0, {r0, r2}
     a14:	01000005 	tsteq	r0, r5
     a18:	00005400 	andeq	r5, r0, r0, lsl #8
     a1c:	00000000 	andeq	r0, r0, r0
     a20:	05380000 	ldreq	r0, [r8, #-0]!
     a24:	05540000 	ldrbeq	r0, [r4, #-0]
     a28:	00010000 	andeq	r0, r1, r0
     a2c:	00055450 	andeq	r5, r5, r0, asr r4
     a30:	0005a000 	andeq	sl, r5, r0
     a34:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     a38:	000005a0 	andeq	r0, r0, r0, lsr #11
     a3c:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
     a40:	01f30004 	mvnseq	r0, r4
     a44:	00009f50 	andeq	r9, r0, r0, asr pc
     a48:	00000000 	andeq	r0, r0, r0
     a4c:	05640000 	strbeq	r0, [r4, #-0]!
     a50:	05740000 	ldrbeq	r0, [r4, #-0]!
     a54:	00010000 	andeq	r0, r1, r0
     a58:	00057450 	andeq	r7, r5, r0, asr r4
     a5c:	00058800 	andeq	r8, r5, r0, lsl #16
     a60:	54000100 	strpl	r0, [r0], #-256	; 0x100
     a64:	00000588 	andeq	r0, r0, r8, lsl #11
     a68:	0000058c 	andeq	r0, r0, ip, lsl #11
     a6c:	8c500001 	mrrchi	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     a70:	a0000005 	andge	r0, r0, r5
     a74:	01000005 	tsteq	r0, r5
     a78:	05a05400 	streq	r5, [r0, #1024]!	; 0x400
     a7c:	05b80000 	ldreq	r0, [r8, #0]!
     a80:	00010000 	andeq	r0, r1, r0
     a84:	00000050 	andeq	r0, r0, r0, asr r0
     a88:	00000000 	andeq	r0, r0, r0
     a8c:	0005b800 	andeq	fp, r5, r0, lsl #16
     a90:	0005cb00 	andeq	ip, r5, r0, lsl #22
     a94:	50000100 	andpl	r0, r0, r0, lsl #2
     a98:	000005cb 	andeq	r0, r0, fp, asr #11
     a9c:	00000600 	andeq	r0, r0, r0, lsl #12
     aa0:	01f30004 	mvnseq	r0, r4
     aa4:	00009f50 	andeq	r9, r0, r0, asr pc
     aa8:	00000000 	andeq	r0, r0, r0
     aac:	05b80000 	ldreq	r0, [r8, #0]!
     ab0:	05cb0000 	strbeq	r0, [fp]
     ab4:	00010000 	andeq	r0, r1, r0
     ab8:	0005cb51 	andeq	ip, r5, r1, asr fp
     abc:	00060000 	andeq	r0, r6, r0
     ac0:	f3000400 	vshl.u8	d0, d0, d0
     ac4:	009f5101 	addseq	r5, pc, r1, lsl #2
     ac8:	00000000 	andeq	r0, r0, r0
     acc:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
     ad0:	cb000005 	blgt	aec <_start-0x7514>
     ad4:	01000005 	tsteq	r0, r5
     ad8:	05cb5200 	strbeq	r5, [fp, #512]	; 0x200
     adc:	06000000 	streq	r0, [r0], -r0
     ae0:	00040000 	andeq	r0, r4, r0
     ae4:	9f5201f3 	svcls	0x005201f3
	...
     af0:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
     af4:	000005cb 	andeq	r0, r0, fp, asr #11
     af8:	cb530001 	blgt	14c0b04 <__bss_end__+0x14b70f4>
     afc:	00000005 	andeq	r0, r0, r5
     b00:	04000006 	streq	r0, [r0], #-6
     b04:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
     b08:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     b0c:	00000000 	andeq	r0, r0, r0
     b10:	0005cc00 	andeq	ip, r5, r0, lsl #24
     b14:	0005d800 	andeq	sp, r5, r0, lsl #16
     b18:	50000100 	andpl	r0, r0, r0, lsl #2
     b1c:	000005ec 	andeq	r0, r0, ip, ror #11
     b20:	00000600 	andeq	r0, r0, r0, lsl #12
     b24:	00500001 	subseq	r0, r0, r1
     b28:	00000000 	andeq	r0, r0, r0
     b2c:	2c000000 	stccs	0, cr0, [r0], {-0}
     b30:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     b34:	01000000 	mrseq	r0, (UNDEF: 0)
     b38:	00385000 	eorseq	r5, r8, r0
     b3c:	00480000 	subeq	r0, r8, r0
     b40:	00010000 	andeq	r0, r1, r0
     b44:	00004855 	andeq	r4, r0, r5, asr r8
     b48:	00005800 	andeq	r5, r0, r0, lsl #16
     b4c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     b5c:	00000010 	andeq	r0, r0, r0, lsl r0
     b60:	10500001 	subsne	r0, r0, r1
     b64:	34000000 	strcc	r0, [r0], #-0
     b68:	01000000 	mrseq	r0, (UNDEF: 0)
     b6c:	00005400 	andeq	r5, r0, r0, lsl #8
	...
     b78:	00040000 	andeq	r0, r4, r0
     b7c:	00010000 	andeq	r0, r1, r0
     b80:	00000450 	andeq	r0, r0, r0, asr r4
     b84:	00000c00 	andeq	r0, r0, r0, lsl #24
     b88:	70000300 	andvc	r0, r0, r0, lsl #6
     b8c:	000c9f30 	andeq	r9, ip, r0, lsr pc
     b90:	00140000 	andseq	r0, r4, r0
     b94:	00040000 	andeq	r0, r4, r0
     b98:	9f5001f3 	svcls	0x005001f3
	...
     ba4:	00000014 	andeq	r0, r0, r4, lsl r0
     ba8:	00000020 	andeq	r0, r0, r0, lsr #32
     bac:	20500001 	subscs	r0, r0, r1
     bb0:	2c000000 	stccs	0, cr0, [r0], {-0}
     bb4:	03000000 	movweq	r0, #0
     bb8:	9f017000 	svcls	0x00017000
     bbc:	0000002c 	andeq	r0, r0, ip, lsr #32
     bc0:	00000040 	andeq	r0, r0, r0, asr #32
     bc4:	00500001 	subseq	r0, r0, r1
     bc8:	00000000 	andeq	r0, r0, r0
     bcc:	14000000 	strne	r0, [r0], #-0
     bd0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     bd4:	01000000 	mrseq	r0, (UNDEF: 0)
     bd8:	00185100 	andseq	r5, r8, r0, lsl #2
     bdc:	00400000 	subeq	r0, r0, r0
     be0:	00040000 	andeq	r0, r4, r0
     be4:	9f5101f3 	svcls	0x005101f3
	...
     bf0:	00000040 	andeq	r0, r0, r0, asr #32
     bf4:	00000060 	andeq	r0, r0, r0, rrx
     bf8:	60500001 	subsvs	r0, r0, r1
     bfc:	6c000000 	stcvs	0, cr0, [r0], {-0}
     c00:	03000000 	movweq	r0, #0
     c04:	9f017100 	svcls	0x00017100
     c08:	0000006c 	andeq	r0, r0, ip, rrx
     c0c:	00000074 	andeq	r0, r0, r4, ror r0
     c10:	74510001 	ldrbvc	r0, [r1], #-1
     c14:	80000000 	andhi	r0, r0, r0
     c18:	03000000 	movweq	r0, #0
     c1c:	9f017100 	svcls	0x00017100
	...
     c28:	00000040 	andeq	r0, r0, r0, asr #32
     c2c:	00000050 	andeq	r0, r0, r0, asr r0
     c30:	50510001 	subspl	r0, r1, r1
     c34:	80000000 	andhi	r0, r0, r0
     c38:	04000000 	streq	r0, [r0], #-0
     c3c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     c40:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     c44:	00000000 	andeq	r0, r0, r0
     c48:	00004000 	andeq	r4, r0, r0
     c4c:	00005800 	andeq	r5, r0, r0, lsl #16
     c50:	52000100 	andpl	r0, r0, #0, 2
     c54:	00000058 	andeq	r0, r0, r8, asr r0
     c58:	00000064 	andeq	r0, r0, r4, rrx
     c5c:	64520001 	ldrbvs	r0, [r2], #-1
     c60:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     c64:	03000000 	movweq	r0, #0
     c68:	9f017200 	svcls	0x00017200
     c6c:	00000068 	andeq	r0, r0, r8, rrx
     c70:	00000080 	andeq	r0, r0, r0, lsl #1
     c74:	00520001 	subseq	r0, r2, r1
     c78:	00000000 	andeq	r0, r0, r0
     c7c:	40000000 	andmi	r0, r0, r0
     c80:	54000000 	strpl	r0, [r0], #-0
     c84:	01000000 	mrseq	r0, (UNDEF: 0)
     c88:	00545300 	subseq	r5, r4, r0, lsl #6
     c8c:	00780000 	rsbseq	r0, r8, r0
     c90:	00010000 	andeq	r0, r1, r0
     c94:	00000053 	andeq	r0, r0, r3, asr r0
     c98:	00000000 	andeq	r0, r0, r0
     c9c:	00004800 	andeq	r4, r0, r0, lsl #16
     ca0:	00006000 	andeq	r6, r0, r0
     ca4:	5c000100 	stfpls	f0, [r0], {-0}
     ca8:	00000060 	andeq	r0, r0, r0, rrx
     cac:	00000080 	andeq	r0, r0, r0, lsl #1
     cb0:	01f3000a 	mvnseq	r0, sl
     cb4:	5301f352 	movwpl	pc, #4946	; 0x1352	; <UNPREDICTABLE>
     cb8:	9f01231c 	svcls	0x0001231c
	...
     cc4:	00000080 	andeq	r0, r0, r0, lsl #1
     cc8:	000000a4 	andeq	r0, r0, r4, lsr #1
     ccc:	a4500001 	ldrbge	r0, [r0], #-1
     cd0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     cd4:	03000001 	movweq	r0, #1
     cd8:	9f027000 	svcls	0x00027000
     cdc:	00000118 	andeq	r0, r0, r8, lsl r1
     ce0:	00000218 	andeq	r0, r0, r8, lsl r2
     ce4:	01f30004 	mvnseq	r0, r4
     ce8:	00009f50 	andeq	r9, r0, r0, asr pc
     cec:	00000000 	andeq	r0, r0, r0
     cf0:	00800000 	addeq	r0, r0, r0
     cf4:	00f00000 	rscseq	r0, r0, r0
     cf8:	00010000 	andeq	r0, r1, r0
     cfc:	0000f051 	andeq	pc, r0, r1, asr r0	; <UNPREDICTABLE>
     d00:	00016000 	andeq	r6, r1, r0
     d04:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     d08:	00000160 	andeq	r0, r0, r0, ror #2
     d0c:	00000168 	andeq	r0, r0, r8, ror #2
     d10:	68510001 	ldmdavs	r1, {r0}^
     d14:	88000001 	stmdahi	r0, {r0}
     d18:	01000001 	tsteq	r0, r1
     d1c:	01885500 	orreq	r5, r8, r0, lsl #10
     d20:	019c0000 	orrseq	r0, ip, r0
     d24:	00010000 	andeq	r0, r1, r0
     d28:	00019c51 	andeq	r9, r1, r1, asr ip
     d2c:	0001bc00 	andeq	fp, r1, r0, lsl #24
     d30:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     d34:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     d38:	000001c4 	andeq	r0, r0, r4, asr #3
     d3c:	c4510001 	ldrbgt	r0, [r1], #-1
     d40:	fc000001 	stc2	0, cr0, [r0], {1}
     d44:	01000001 	tsteq	r0, r1
     d48:	01fc5500 	mvnseq	r5, r0, lsl #10
     d4c:	02180000 	andseq	r0, r8, #0
     d50:	00040000 	andeq	r0, r4, r0
     d54:	9f5101f3 	svcls	0x005101f3
	...
     d60:	00000080 	andeq	r0, r0, r0, lsl #1
     d64:	00000094 	muleq	r0, r4, r0
     d68:	94520001 	ldrbls	r0, [r2], #-1
     d6c:	fc000000 	stc2	0, cr0, [r0], {-0}
     d70:	01000001 	tsteq	r0, r1
     d74:	01fc5400 	mvnseq	r5, r0, lsl #8
     d78:	02180000 	andseq	r0, r8, #0
     d7c:	00040000 	andeq	r0, r4, r0
     d80:	9f5201f3 	svcls	0x005201f3
	...
     d8c:	00000080 	andeq	r0, r0, r0, lsl #1
     d90:	00000100 	andeq	r0, r0, r0, lsl #2
     d94:	04530001 	ldrbeq	r0, [r3], #-1
     d98:	08000001 	stmdaeq	r0, {r0}
     d9c:	01000001 	tsteq	r0, r1
     da0:	01605300 	cmneq	r0, r0, lsl #6
     da4:	01680000 	cmneq	r8, r0
     da8:	00010000 	andeq	r0, r1, r0
     dac:	00016853 	andeq	r6, r1, r3, asr r8
     db0:	00018800 	andeq	r8, r1, r0, lsl #16
     db4:	f3000400 	vshl.u8	d0, d0, d0
     db8:	889f5301 	ldmhi	pc, {r0, r8, r9, ip, lr}	; <UNPREDICTABLE>
     dbc:	90000001 	andls	r0, r0, r1
     dc0:	01000001 	tsteq	r0, r1
     dc4:	01905300 	orrseq	r5, r0, r0, lsl #6
     dc8:	01940000 	orrseq	r0, r4, r0
     dcc:	00010000 	andeq	r0, r1, r0
     dd0:	0001945c 	andeq	r9, r1, ip, asr r4
     dd4:	00019c00 	andeq	r9, r1, r0, lsl #24
     dd8:	53000100 	movwpl	r0, #256	; 0x100
     ddc:	0000019c 	muleq	r0, ip, r1
     de0:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     de4:	01f30004 	mvnseq	r0, r4
     de8:	01bc9f53 			; <UNDEFINED> instruction: 0x01bc9f53
     dec:	01cc0000 	biceq	r0, ip, r0
     df0:	00010000 	andeq	r0, r1, r0
     df4:	0001cc53 	andeq	ip, r1, r3, asr ip
     df8:	0001cf00 	andeq	ip, r1, r0, lsl #30
     dfc:	5c000100 	stfpls	f0, [r0], {-0}
     e00:	000001cf 	andeq	r0, r0, pc, asr #3
     e04:	000001d4 	ldrdeq	r0, [r0], -r4
     e08:	01f30004 	mvnseq	r0, r4
     e0c:	00009f53 	andeq	r9, r0, r3, asr pc
     e10:	00000000 	andeq	r0, r0, r0
     e14:	00800000 	addeq	r0, r0, r0
     e18:	009c0000 	addseq	r0, ip, r0
     e1c:	00020000 	andeq	r0, r2, r0
     e20:	009c0091 	umullseq	r0, ip, r1, r0
     e24:	01c80000 	biceq	r0, r8, r0
     e28:	00010000 	andeq	r0, r1, r0
     e2c:	0001d452 	andeq	sp, r1, r2, asr r4
     e30:	0001df00 	andeq	sp, r1, r0, lsl #30
     e34:	52000100 	andpl	r0, r0, #0, 2
	...
     e40:	0000009c 	muleq	r0, ip, r0
     e44:	00000118 	andeq	r0, r0, r8, lsl r1
     e48:	185d0001 	ldmdane	sp, {r0}^
     e4c:	1c000001 	stcne	0, cr0, [r0], {1}
     e50:	01000001 	tsteq	r0, r1
     e54:	011c5300 	tsteq	ip, r0, lsl #6
     e58:	01200000 	teqeq	r0, r0
     e5c:	00010000 	andeq	r0, r1, r0
     e60:	00012051 	andeq	r2, r1, r1, asr r0
     e64:	00016000 	andeq	r6, r1, r0
     e68:	53000100 	movwpl	r0, #256	; 0x100
     e6c:	00000160 	andeq	r0, r0, r0, ror #2
     e70:	00000168 	andeq	r0, r0, r8, ror #2
     e74:	685d0001 	ldmdavs	sp, {r0}^
     e78:	6c000001 	stcvs	0, cr0, [r0], {1}
     e7c:	01000001 	tsteq	r0, r1
     e80:	016c5e00 	cmneq	ip, r0, lsl #28
     e84:	01880000 	orreq	r0, r8, r0
     e88:	00010000 	andeq	r0, r1, r0
     e8c:	00018853 	andeq	r8, r1, r3, asr r8
     e90:	00019000 	andeq	r9, r1, r0
     e94:	91000400 	tstls	r0, r0, lsl #8
     e98:	909f7fa1 	addsls	r7, pc, r1, lsr #31
     e9c:	94000001 	strls	r0, [r0], #-1
     ea0:	01000001 	tsteq	r0, r1
     ea4:	01945300 	orrseq	r5, r4, r0, lsl #6
     ea8:	019c0000 	orrseq	r0, ip, r0
     eac:	00010000 	andeq	r0, r1, r0
     eb0:	00019c5d 	andeq	r9, r1, sp, asr ip
     eb4:	0001a000 	andeq	sl, r1, r0
     eb8:	5e000100 	adfpls	f0, f0, f0
     ebc:	000001a0 	andeq	r0, r0, r0, lsr #3
     ec0:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     ec4:	bc530001 	mrrclt	0, 0, r0, r3, cr1
     ec8:	d4000001 	strle	r0, [r0], #-1
     ecc:	01000001 	tsteq	r0, r1
     ed0:	01d45d00 	bicseq	r5, r4, r0, lsl #26
     ed4:	01df0000 	bicseq	r0, pc, r0
     ed8:	00010000 	andeq	r0, r1, r0
     edc:	00000053 	andeq	r0, r0, r3, asr r0
     ee0:	00000000 	andeq	r0, r0, r0
     ee4:	0000a000 	andeq	sl, r0, r0
     ee8:	0000ec00 	andeq	lr, r0, r0, lsl #24
     eec:	5c000100 	stfpls	f0, [r0], {-0}
     ef0:	000000ec 	andeq	r0, r0, ip, ror #1
     ef4:	00000100 	andeq	r0, r0, r0, lsl #2
     ef8:	00530001 	subseq	r0, r3, r1
     efc:	04000001 	streq	r0, [r0], #-1
     f00:	01000001 	tsteq	r0, r1
     f04:	01045c00 	tsteq	r4, r0, lsl #24
     f08:	01080000 	mrseq	r0, (UNDEF: 8)
     f0c:	00010000 	andeq	r0, r1, r0
     f10:	00010853 	andeq	r0, r1, r3, asr r8
     f14:	00011800 	andeq	r1, r1, r0, lsl #16
     f18:	5c000100 	stfpls	f0, [r0], {-0}
     f1c:	00000118 	andeq	r0, r0, r8, lsl r1
     f20:	0000011c 	andeq	r0, r0, ip, lsl r1
     f24:	1c500001 	mrrcne	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     f28:	3c000001 	stccc	0, cr0, [r0], {1}
     f2c:	01000001 	tsteq	r0, r1
     f30:	01445c00 	cmpeq	r4, r0, lsl #24
     f34:	01580000 	cmpeq	r8, r0
     f38:	00010000 	andeq	r0, r1, r0
     f3c:	00015850 	andeq	r5, r1, r0, asr r8
     f40:	00016000 	andeq	r6, r1, r0
     f44:	5c000100 	stfpls	f0, [r0], {-0}
     f48:	00000160 	andeq	r0, r0, r0, ror #2
     f4c:	00000168 	andeq	r0, r0, r8, ror #2
     f50:	68530001 	ldmdavs	r3, {r0}^
     f54:	78000001 	stmdavc	r0, {r0}
     f58:	01000001 	tsteq	r0, r1
     f5c:	01785c00 	cmneq	r8, r0, lsl #24
     f60:	01800000 	orreq	r0, r0, r0
     f64:	00050000 	andeq	r0, r5, r0
     f68:	2534007c 	ldrcs	r0, [r4, #-124]!	; 0x7c
     f6c:	0001809f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
     f70:	00018800 	andeq	r8, r1, r0, lsl #16
     f74:	5c000100 	stfpls	f0, [r0], {-0}
     f78:	00000188 	andeq	r0, r0, r8, lsl #3
     f7c:	00000190 	muleq	r0, r0, r1
     f80:	90530001 	subsls	r0, r3, r1
     f84:	94000001 	strls	r0, [r0], #-1
     f88:	01000001 	tsteq	r0, r1
     f8c:	01945c00 	orrseq	r5, r4, r0, lsl #24
     f90:	019c0000 	orrseq	r0, ip, r0
     f94:	00010000 	andeq	r0, r1, r0
     f98:	00019c53 	andeq	r9, r1, r3, asr ip
     f9c:	0001ac00 	andeq	sl, r1, r0, lsl #24
     fa0:	5c000100 	stfpls	f0, [r0], {-0}
     fa4:	000001ac 	andeq	r0, r0, ip, lsr #3
     fa8:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
     fac:	007c0005 	rsbseq	r0, ip, r5
     fb0:	b49f2531 	ldrlt	r2, [pc], #1329	; fb8 <_start-0x7048>
     fb4:	bc000001 	stclt	0, cr0, [r0], {1}
     fb8:	01000001 	tsteq	r0, r1
     fbc:	01bc5c00 			; <UNDEFINED> instruction: 0x01bc5c00
     fc0:	01cc0000 	biceq	r0, ip, r0
     fc4:	00010000 	andeq	r0, r1, r0
     fc8:	0001cc53 	andeq	ip, r1, r3, asr ip
     fcc:	0001cf00 	andeq	ip, r1, r0, lsl #30
     fd0:	5c000100 	stfpls	f0, [r0], {-0}
     fd4:	000001cf 	andeq	r0, r0, pc, asr #3
     fd8:	000001d4 	ldrdeq	r0, [r0], -r4
     fdc:	01f30004 	mvnseq	r0, r4
     fe0:	01d49f53 	bicseq	r9, r4, r3, asr pc
     fe4:	01df0000 	bicseq	r0, pc, r0
     fe8:	00010000 	andeq	r0, r1, r0
     fec:	0000005c 	andeq	r0, r0, ip, asr r0
     ff0:	00000000 	andeq	r0, r0, r0
     ff4:	0000ec00 	andeq	lr, r0, r0, lsl #24
     ff8:	0000fc00 	andeq	pc, r0, r0, lsl #24
     ffc:	30000200 	andcc	r0, r0, r0, lsl #4
    1000:	0000fc9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    1004:	00010400 	andeq	r0, r1, r0, lsl #8
    1008:	31000200 	mrscc	r0, R8_usr
    100c:	0001049f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
    1010:	00010800 	andeq	r0, r1, r0, lsl #16
    1014:	30000200 	andcc	r0, r0, r0, lsl #4
    1018:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    101c:	00000000 	andeq	r0, r0, r0
    1020:	00021800 	andeq	r1, r2, r0, lsl #16
    1024:	00022800 	andeq	r2, r2, r0, lsl #16
    1028:	50000100 	andpl	r0, r0, r0, lsl #2
    102c:	00000228 	andeq	r0, r0, r8, lsr #4
    1030:	0000023c 	andeq	r0, r0, ip, lsr r2
    1034:	01f30004 	mvnseq	r0, r4
    1038:	023c9f50 	eorseq	r9, ip, #80, 30	; 0x140
    103c:	02680000 	rsbeq	r0, r8, #0
    1040:	00010000 	andeq	r0, r1, r0
    1044:	00000050 	andeq	r0, r0, r0, asr r0
    1048:	00000000 	andeq	r0, r0, r0
    104c:	00021800 	andeq	r1, r2, r0, lsl #16
    1050:	00022c00 	andeq	r2, r2, r0, lsl #24
    1054:	51000100 	mrspl	r0, (UNDEF: 16)
    1058:	0000022c 	andeq	r0, r0, ip, lsr #4
    105c:	0000023c 	andeq	r0, r0, ip, lsr r2
    1060:	01f30004 	mvnseq	r0, r4
    1064:	023c9f51 	eorseq	r9, ip, #324	; 0x144
    1068:	02680000 	rsbeq	r0, r8, #0
    106c:	00010000 	andeq	r0, r1, r0
    1070:	00000051 	andeq	r0, r0, r1, asr r0
    1074:	00000000 	andeq	r0, r0, r0
    1078:	00026800 	andeq	r6, r2, r0, lsl #16
    107c:	00029000 	andeq	r9, r2, r0
    1080:	50000100 	andpl	r0, r0, r0, lsl #2
    1084:	00000290 	muleq	r0, r0, r2
    1088:	000004dc 	ldrdeq	r0, [r0], -ip
    108c:	dc5b0001 	mrrcle	0, 0, r0, fp, cr1
    1090:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
    1094:	04000004 	streq	r0, [r0], #-4
    1098:	5001f300 	andpl	pc, r1, r0, lsl #6
    109c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    10a0:	00000000 	andeq	r0, r0, r0
    10a4:	00026800 	andeq	r6, r2, r0, lsl #16
    10a8:	00027c00 	andeq	r7, r2, r0, lsl #24
    10ac:	51000100 	mrspl	r0, (UNDEF: 16)
    10b0:	0000027c 	andeq	r0, r0, ip, ror r2
    10b4:	00000290 	muleq	r0, r0, r2
    10b8:	01710003 	cmneq	r1, r3
    10bc:	0002909f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
    10c0:	0004f000 	andeq	pc, r4, r0
    10c4:	f3000400 	vshl.u8	d0, d0, d0
    10c8:	009f5101 	addseq	r5, pc, r1, lsl #2
    10cc:	00000000 	andeq	r0, r0, r0
    10d0:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    10d4:	98000002 	stmdals	r0, {r1}
    10d8:	01000002 	tsteq	r0, r2
    10dc:	02985200 	addseq	r5, r8, #0, 4
    10e0:	02c00000 	sbceq	r0, r0, #0
    10e4:	00010000 	andeq	r0, r1, r0
    10e8:	0002c052 	andeq	ip, r2, r2, asr r0
    10ec:	00048c00 	andeq	r8, r4, r0, lsl #24
    10f0:	56000100 	strpl	r0, [r0], -r0, lsl #2
    10f4:	0000048c 	andeq	r0, r0, ip, lsl #9
    10f8:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    10fc:	00520001 	subseq	r0, r2, r1
    1100:	00000000 	andeq	r0, r0, r0
    1104:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    1108:	84000002 	strhi	r0, [r0], #-2
    110c:	01000002 	tsteq	r0, r2
    1110:	00005300 	andeq	r5, r0, r0, lsl #6
    1114:	00000000 	andeq	r0, r0, r0
    1118:	02780000 	rsbseq	r0, r8, #0
    111c:	02900000 	addseq	r0, r0, #0
    1120:	00010000 	andeq	r0, r1, r0
    1124:	00029050 	andeq	r9, r2, r0, asr r0
    1128:	00029400 	andeq	r9, r2, r0, lsl #8
    112c:	54000100 	strpl	r0, [r0], #-256	; 0x100
    1130:	00000294 	muleq	r0, r4, r2
    1134:	000002a0 	andeq	r0, r0, r0, lsr #5
    1138:	01740003 	cmneq	r4, r3
    113c:	0002a09f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
    1140:	0002ac00 	andeq	sl, r2, r0, lsl #24
    1144:	54000100 	strpl	r0, [r0], #-256	; 0x100
    1148:	000002ac 	andeq	r0, r0, ip, lsr #5
    114c:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    1150:	01740003 	cmneq	r4, r3
    1154:	0002b89f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
    1158:	00049000 	andeq	r9, r4, r0
    115c:	54000100 	strpl	r0, [r0], #-256	; 0x100
    1160:	00000490 	muleq	r0, r0, r4
    1164:	0000049c 	muleq	r0, ip, r4
    1168:	01740003 	cmneq	r4, r3
    116c:	00049c9f 	muleq	r4, pc, ip	; <UNPREDICTABLE>
    1170:	0004c800 	andeq	ip, r4, r0, lsl #16
    1174:	54000100 	strpl	r0, [r0], #-256	; 0x100
    1178:	000004c8 	andeq	r0, r0, r8, asr #9
    117c:	000004d4 	ldrdeq	r0, [r0], -r4
    1180:	d4500001 	ldrble	r0, [r0], #-1
    1184:	dc000004 	stcle	0, cr0, [r0], {4}
    1188:	03000004 	movweq	r0, #4
    118c:	9f017400 	svcls	0x00017400
	...
    1198:	00000280 	andeq	r0, r0, r0, lsl #5
    119c:	000004dc 	ldrdeq	r0, [r0], -ip
    11a0:	dc580001 	mrrcle	0, 0, r0, r8, cr1
    11a4:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
    11a8:	0a000004 	beq	11c0 <_start-0x6e40>
    11ac:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    11b0:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    11b4:	009f1c31 	addseq	r1, pc, r1, lsr ip	; <UNPREDICTABLE>
    11b8:	00000000 	andeq	r0, r0, r0
    11bc:	bc000000 	stclt	0, cr0, [r0], {-0}
    11c0:	c0000003 	andgt	r0, r0, r3
    11c4:	01000003 	tsteq	r0, r3
    11c8:	03e45000 	mvneq	r5, #0
    11cc:	03e80000 	mvneq	r0, #0
    11d0:	00010000 	andeq	r0, r1, r0
    11d4:	00040c50 	andeq	r0, r4, r0, asr ip
    11d8:	00041000 	andeq	r1, r4, r0
    11dc:	50000100 	andpl	r0, r0, r0, lsl #2
    11e0:	00000434 	andeq	r0, r0, r4, lsr r4
    11e4:	00000438 	andeq	r0, r0, r8, lsr r4
    11e8:	40500001 	subsmi	r0, r0, r1
    11ec:	44000004 	strmi	r0, [r0], #-4
    11f0:	01000004 	tsteq	r0, r4
    11f4:	04685000 	strbteq	r5, [r8], #-0
    11f8:	046c0000 	strbteq	r0, [ip], #-0
    11fc:	00010000 	andeq	r0, r1, r0
    1200:	00048850 	andeq	r8, r4, r0, asr r8
    1204:	0004b000 	andeq	fp, r4, r0
    1208:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1214:	000002c0 	andeq	r0, r0, r0, asr #5
    1218:	000002c8 	andeq	r0, r0, r8, asr #5
    121c:	9f300002 	svcls	0x00300002
    1220:	000002c8 	andeq	r0, r0, r8, asr #5
    1224:	000002cc 	andeq	r0, r0, ip, asr #5
    1228:	d8570001 	ldmdale	r7, {r0}^
    122c:	b0000002 	andlt	r0, r0, r2
    1230:	01000004 	tsteq	r0, r4
    1234:	00005700 	andeq	r5, r0, r0, lsl #14
    1238:	00000000 	andeq	r0, r0, r0
    123c:	00040000 	andeq	r0, r4, r0
    1240:	00080000 	andeq	r0, r8, r0
    1244:	00070000 	andeq	r0, r7, r0
    1248:	000a0073 	andeq	r0, sl, r3, ror r0
    124c:	089f2110 	ldmeq	pc, {r4, r8, sp}	; <UNPREDICTABLE>
    1250:	10000000 	andne	r0, r0, r0
    1254:	01000000 	mrseq	r0, (UNDEF: 0)
    1258:	00005300 	andeq	r5, r0, r0, lsl #6
    125c:	00000000 	andeq	r0, r0, r0
    1260:	00140000 	andseq	r0, r4, r0
    1264:	00180000 	andseq	r0, r8, r0
    1268:	00070000 	andeq	r0, r7, r0
    126c:	ff0b0073 			; <UNDEFINED> instruction: 0xff0b0073
    1270:	189f1aef 	ldmne	pc, {r0, r1, r2, r3, r5, r6, r7, r9, fp, ip}	; <UNPREDICTABLE>
    1274:	20000000 	andcs	r0, r0, r0
    1278:	01000000 	mrseq	r0, (UNDEF: 0)
    127c:	00005300 	andeq	r5, r0, r0, lsl #6
    1280:	00000000 	andeq	r0, r0, r0
    1284:	00140000 	andseq	r0, r4, r0
    1288:	001c0000 	andseq	r0, ip, r0
    128c:	00030000 	andeq	r0, r3, r0
    1290:	1c9f0473 	cfldrsne	mvf0, [pc], {115}	; 0x73
    1294:	27000000 	strcs	r0, [r0, -r0]
    1298:	01000000 	mrseq	r0, (UNDEF: 0)
    129c:	00005300 	andeq	r5, r0, r0, lsl #6
    12a0:	00000000 	andeq	r0, r0, r0
    12a4:	8c8c0000 	stchi	0, cr0, [ip], {0}
    12a8:	8c900000 	ldchi	0, cr0, [r0], {0}
    12ac:	00020000 	andeq	r0, r2, r0
    12b0:	8c909f30 	ldchi	15, cr9, [r0], {48}	; 0x30
    12b4:	8c940000 	ldchi	0, cr0, [r4], {0}
    12b8:	00010000 	andeq	r0, r1, r0
    12bc:	00000050 	andeq	r0, r0, r0, asr r0
    12c0:	00000000 	andeq	r0, r0, r0
    12c4:	008ca400 	addeq	sl, ip, r0, lsl #8
    12c8:	008ca800 	addeq	sl, ip, r0, lsl #16
    12cc:	30000200 	andcc	r0, r0, r0, lsl #4
    12d0:	008ca89f 	umulleq	sl, ip, pc, r8	; <UNPREDICTABLE>
    12d4:	008cac00 	addeq	sl, ip, r0, lsl #24
    12d8:	53000100 	movwpl	r0, #256	; 0x100
    12dc:	00008cb0 			; <UNDEFINED> instruction: 0x00008cb0
    12e0:	00008cb8 			; <UNDEFINED> instruction: 0x00008cb8
    12e4:	00530001 	subseq	r0, r3, r1
	...
    12f0:	04000000 	streq	r0, [r0], #-0
    12f4:	01000000 	mrseq	r0, (UNDEF: 0)
    12f8:	00045000 	andeq	r5, r4, r0
    12fc:	000c0000 	andeq	r0, ip, r0
    1300:	00010000 	andeq	r0, r1, r0
    1304:	00000c53 	andeq	r0, r0, r3, asr ip
    1308:	00001000 	andeq	r1, r0, r0
    130c:	50000100 	andpl	r0, r0, r0, lsl #2
    1310:	00000010 	andeq	r0, r0, r0, lsl r0
    1314:	0000001c 	andeq	r0, r0, ip, lsl r0
    1318:	00530001 	subseq	r0, r3, r1
    131c:	00000000 	andeq	r0, r0, r0
    1320:	40000000 	andmi	r0, r0, r0
    1324:	43000000 	movwmi	r0, #0
    1328:	01000000 	mrseq	r0, (UNDEF: 0)
    132c:	00435000 	subeq	r5, r3, r0
    1330:	004c0000 	subeq	r0, ip, r0
    1334:	00010000 	andeq	r0, r1, r0
    1338:	00000054 	andeq	r0, r0, r4, asr r0
    133c:	00000000 	andeq	r0, r0, r0
    1340:	00004c00 	andeq	r4, r0, r0, lsl #24
    1344:	00005700 	andeq	r5, r0, r0, lsl #14
    1348:	50000100 	andpl	r0, r0, r0, lsl #2
    134c:	00000057 	andeq	r0, r0, r7, asr r0
    1350:	00000070 	andeq	r0, r0, r0, ror r0
    1354:	00550001 	subseq	r0, r5, r1
    1358:	00000000 	andeq	r0, r0, r0
    135c:	60000000 	andvs	r0, r0, r0
    1360:	64000000 	strvs	r0, [r0], #-0
    1364:	01000000 	mrseq	r0, (UNDEF: 0)
    1368:	00005000 	andeq	r5, r0, r0
    136c:	00000000 	andeq	r0, r0, r0
    1370:	00700000 	rsbseq	r0, r0, r0
    1374:	007c0000 	rsbseq	r0, ip, r0
    1378:	00010000 	andeq	r0, r1, r0
    137c:	00007c50 	andeq	r7, r0, r0, asr ip
    1380:	00008400 	andeq	r8, r0, r0, lsl #8
    1384:	f3000400 	vshl.u8	d0, d0, d0
    1388:	009f5001 	addseq	r5, pc, r1
    138c:	00000000 	andeq	r0, r0, r0
    1390:	84000000 	strhi	r0, [r0], #-0
    1394:	90000000 	andls	r0, r0, r0
    1398:	01000000 	mrseq	r0, (UNDEF: 0)
    139c:	00905000 	addseq	r5, r0, r0
    13a0:	00980000 	addseq	r0, r8, r0
    13a4:	00040000 	andeq	r0, r4, r0
    13a8:	9f5001f3 	svcls	0x005001f3
	...
    13b4:	000000fc 	strdeq	r0, [r0], -ip
    13b8:	00000104 	andeq	r0, r0, r4, lsl #2
    13bc:	04500001 	ldrbeq	r0, [r0], #-1
    13c0:	28000001 	stmdacs	r0, {r0}
    13c4:	01000001 	tsteq	r0, r1
    13c8:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    13d4:	00900000 	addseq	r0, r0, r0
    13d8:	00010000 	andeq	r0, r1, r0
    13dc:	00009050 	andeq	r9, r0, r0, asr r0
    13e0:	0000d400 	andeq	sp, r0, r0, lsl #8
    13e4:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    13f0:	00000048 	andeq	r0, r0, r8, asr #32
    13f4:	0000004c 	andeq	r0, r0, ip, asr #32
    13f8:	54550001 	ldrbpl	r0, [r5], #-1
    13fc:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    1400:	01000000 	mrseq	r0, (UNDEF: 0)
    1404:	00605500 	rsbeq	r5, r0, r0, lsl #10
    1408:	00640000 	rsbeq	r0, r4, r0
    140c:	00010000 	andeq	r0, r1, r0
    1410:	00006c55 	andeq	r6, r0, r5, asr ip
    1414:	00007000 	andeq	r7, r0, r0
    1418:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    141c:	00000078 	andeq	r0, r0, r8, ror r0
    1420:	0000007c 	andeq	r0, r0, ip, ror r0
    1424:	84550001 	ldrbhi	r0, [r5], #-1
    1428:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    142c:	01000000 	mrseq	r0, (UNDEF: 0)
    1430:	008c5500 	addeq	r5, ip, r0, lsl #10
    1434:	00d40000 	sbcseq	r0, r4, r0
    1438:	00010000 	andeq	r0, r1, r0
    143c:	00000055 	andeq	r0, r0, r5, asr r0
    1440:	00000000 	andeq	r0, r0, r0
    1444:	00001c00 	andeq	r1, r0, r0, lsl #24
    1448:	00004400 	andeq	r4, r0, r0, lsl #8
    144c:	53000100 	movwpl	r0, #256	; 0x100
    1450:	00000044 	andeq	r0, r0, r4, asr #32
    1454:	0000004c 	andeq	r0, r0, ip, asr #32
    1458:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    145c:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1460:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1464:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1468:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    146c:	25f72008 	ldrbcs	r2, [r7, #8]!
    1470:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1474:	004c9f25 	subeq	r9, ip, r5, lsr #30
    1478:	00500000 	subseq	r0, r0, r0
    147c:	00010000 	andeq	r0, r1, r0
    1480:	00005053 	andeq	r5, r0, r3, asr r0
    1484:	00005800 	andeq	r5, r0, r0, lsl #16
    1488:	70001c00 	andvc	r1, r0, r0, lsl #24
    148c:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1490:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1494:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1498:	00000000 	andeq	r0, r0, r0
    149c:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    14a0:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    14a4:	589f2533 	ldmpl	pc, {r0, r1, r4, r5, r8, sl, sp}	; <UNPREDICTABLE>
    14a8:	5c000000 	stcpl	0, cr0, [r0], {-0}
    14ac:	01000000 	mrseq	r0, (UNDEF: 0)
    14b0:	005c5300 	subseq	r5, ip, r0, lsl #6
    14b4:	00640000 	rsbeq	r0, r4, r0
    14b8:	001c0000 	andseq	r0, ip, r0
    14bc:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    14c0:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    14c4:	cccccd08 	stclgt	13, cr12, [ip], {8}
    14c8:	000000cc 	andeq	r0, r0, ip, asr #1
    14cc:	20081e00 	andcs	r1, r8, r0, lsl #28
    14d0:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    14d4:	9f25332c 	svcls	0x0025332c
    14d8:	00000064 	andeq	r0, r0, r4, rrx
    14dc:	00000068 	andeq	r0, r0, r8, rrx
    14e0:	68530001 	ldmdavs	r3, {r0}^
    14e4:	70000000 	andvc	r0, r0, r0
    14e8:	1c000000 	stcne	0, cr0, [r0], {-0}
    14ec:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    14f0:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    14f4:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    14f8:	0000cccc 	andeq	ip, r0, ip, asr #25
    14fc:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1500:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1504:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1508:	0000709f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    150c:	00007400 	andeq	r7, r0, r0, lsl #8
    1510:	53000100 	movwpl	r0, #256	; 0x100
    1514:	00000074 	andeq	r0, r0, r4, ror r0
    1518:	0000007c 	andeq	r0, r0, ip, ror r0
    151c:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    1520:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1524:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1528:	00cccccc 	sbceq	ip, ip, ip, asr #25
    152c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1530:	25f72008 	ldrbcs	r2, [r7, #8]!
    1534:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1538:	007c9f25 	rsbseq	r9, ip, r5, lsr #30
    153c:	00800000 	addeq	r0, r0, r0
    1540:	00010000 	andeq	r0, r1, r0
    1544:	00008053 	andeq	r8, r0, r3, asr r0
    1548:	00008800 	andeq	r8, r0, r0, lsl #16
    154c:	70001c00 	andvc	r1, r0, r0, lsl #24
    1550:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1554:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1558:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    155c:	00000000 	andeq	r0, r0, r0
    1560:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1564:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1568:	889f2533 	ldmhi	pc, {r0, r1, r4, r5, r8, sl, sp}	; <UNPREDICTABLE>
    156c:	8c000000 	stchi	0, cr0, [r0], {-0}
    1570:	01000000 	mrseq	r0, (UNDEF: 0)
    1574:	008c5300 	addeq	r5, ip, r0, lsl #6
    1578:	00900000 	addseq	r0, r0, r0
    157c:	001c0000 	andseq	r0, ip, r0
    1580:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    1584:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    1588:	cccccd08 	stclgt	13, cr12, [ip], {8}
    158c:	000000cc 	andeq	r0, r0, ip, asr #1
    1590:	20081e00 	andcs	r1, r8, r0, lsl #28
    1594:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1598:	9f25332c 	svcls	0x0025332c
    159c:	00000090 	muleq	r0, r0, r0
    15a0:	00000098 	muleq	r0, r8, r0
    15a4:	0074001c 	rsbseq	r0, r4, ip, lsl r0
    15a8:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    15ac:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    15b0:	00cccccc 	sbceq	ip, ip, ip, asr #25
    15b4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    15b8:	25f72008 	ldrbcs	r2, [r7, #8]!
    15bc:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    15c0:	00989f25 	addseq	r9, r8, r5, lsr #30
    15c4:	009c0000 	addseq	r0, ip, r0
    15c8:	00170000 	andseq	r0, r7, r0
    15cc:	2cf70074 	ldclcs	0, cr0, [r7], #464	; 0x1d0
    15d0:	007125f7 	ldrshteq	r2, [r1], #-87	; 0xffffffa9
    15d4:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    15d8:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    15dc:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    15e0:	9c9f2533 	cfldr32ls	mvfx2, [pc], {51}	; 0x33
    15e4:	d4000000 	strle	r0, [r0], #-0
    15e8:	1c000000 	stcne	0, cr0, [r0], {-0}
    15ec:	f7007400 			; <UNDEFINED> instruction: 0xf7007400
    15f0:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    15f4:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    15f8:	0000cccc 	andeq	ip, r0, ip, asr #25
    15fc:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1600:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1604:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1608:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    160c:	00000000 	andeq	r0, r0, r0
    1610:	00009400 	andeq	r9, r0, r0, lsl #8
    1614:	0000b800 	andeq	fp, r0, r0, lsl #16
    1618:	50000100 	andpl	r0, r0, r0, lsl #2
    161c:	000000b8 	strheq	r0, [r0], -r8
    1620:	000000c4 	andeq	r0, r0, r4, asr #1
    1624:	71310008 	teqvc	r1, r8
    1628:	00732400 	rsbseq	r2, r3, r0, lsl #8
    162c:	00c49f21 	sbceq	r9, r4, r1, lsr #30
    1630:	00c70000 	sbceq	r0, r7, r0
    1634:	00010000 	andeq	r0, r1, r0
    1638:	00000051 	andeq	r0, r0, r1, asr r0
    163c:	00000000 	andeq	r0, r0, r0
    1640:	0000d400 	andeq	sp, r0, r0, lsl #8
    1644:	0000f800 	andeq	pc, r0, r0, lsl #16
    1648:	50000100 	andpl	r0, r0, r0, lsl #2
    164c:	000000f8 	strdeq	r0, [r0], -r8
    1650:	0000010c 	andeq	r0, r0, ip, lsl #2
    1654:	01f30004 	mvnseq	r0, r4
    1658:	00009f50 	andeq	r9, r0, r0, asr pc
    165c:	00000000 	andeq	r0, r0, r0
    1660:	00e00000 	rsceq	r0, r0, r0
    1664:	00e80000 	rsceq	r0, r8, r0
    1668:	00020000 	andeq	r0, r2, r0
    166c:	00e89f30 	rsceq	r9, r8, r0, lsr pc
    1670:	00e80000 	rsceq	r0, r8, r0
    1674:	00010000 	andeq	r0, r1, r0
    1678:	0000e852 	andeq	lr, r0, r2, asr r8
    167c:	0000f000 	andeq	pc, r0, r0
    1680:	30000200 	andcc	r0, r0, r0, lsl #4
    1684:	0000f09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1688:	00010300 	andeq	r0, r1, r0, lsl #6
    168c:	52000100 	andpl	r0, r0, #0, 2
	...
    1698:	000000e0 	andeq	r0, r0, r0, ror #1
    169c:	000000f4 	strdeq	r0, [r0], -r4
    16a0:	9f300002 	svcls	0x00300002
    16a4:	000000f4 	strdeq	r0, [r0], -r4
    16a8:	00000100 	andeq	r0, r0, r0, lsl #2
    16ac:	73310005 	teqvc	r1, #5
    16b0:	009f2400 	addseq	r2, pc, r0, lsl #8
    16b4:	03000001 	movweq	r0, #1
    16b8:	01000001 	tsteq	r0, r1
    16bc:	01035100 	mrseq	r5, (UNDEF: 19)
    16c0:	010c0000 	mrseq	r0, (UNDEF: 12)
    16c4:	00080000 	andeq	r0, r8, r0
    16c8:	5001f331 	andpl	pc, r1, r1, lsr r3	; <UNPREDICTABLE>
    16cc:	9f241a4f 	svcls	0x00241a4f
	...
    16d8:	0000010c 	andeq	r0, r0, ip, lsl #2
    16dc:	00000130 	andeq	r0, r0, r0, lsr r1
    16e0:	30500001 	subscc	r0, r0, r1
    16e4:	44000001 	strmi	r0, [r0], #-1
    16e8:	04000001 	streq	r0, [r0], #-1
    16ec:	5001f300 	andpl	pc, r1, r0, lsl #6
    16f0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    16f4:	00000000 	andeq	r0, r0, r0
    16f8:	00011800 	andeq	r1, r1, r0, lsl #16
    16fc:	00012000 	andeq	r2, r1, r0
    1700:	30000200 	andcc	r0, r0, r0, lsl #4
    1704:	0001209f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
    1708:	00012000 	andeq	r2, r1, r0
    170c:	52000100 	andpl	r0, r0, #0, 2
    1710:	00000120 	andeq	r0, r0, r0, lsr #2
    1714:	00000128 	andeq	r0, r0, r8, lsr #2
    1718:	9f300002 	svcls	0x00300002
    171c:	00000128 	andeq	r0, r0, r8, lsr #2
    1720:	0000013b 	andeq	r0, r0, fp, lsr r1
    1724:	00520001 	subseq	r0, r2, r1
    1728:	00000000 	andeq	r0, r0, r0
    172c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1730:	2c000001 	stccs	0, cr0, [r0], {1}
    1734:	02000001 	andeq	r0, r0, #1
    1738:	2c9f3000 	ldccs	0, cr3, [pc], {0}
    173c:	38000001 	stmdacc	r0, {r0}
    1740:	05000001 	streq	r0, [r0, #-1]
    1744:	00733100 	rsbseq	r3, r3, r0, lsl #2
    1748:	01389f24 	teqeq	r8, r4, lsr #30
    174c:	013b0000 	teqeq	fp, r0
    1750:	00010000 	andeq	r0, r1, r0
    1754:	00013b51 	andeq	r3, r1, r1, asr fp
    1758:	00014400 	andeq	r4, r1, r0, lsl #8
    175c:	31000800 	tstcc	r0, r0, lsl #16
    1760:	4f5001f3 	svcmi	0x005001f3
    1764:	009f241a 	addseq	r2, pc, sl, lsl r4	; <UNPREDICTABLE>
    1768:	00000000 	andeq	r0, r0, r0
    176c:	44000000 	strmi	r0, [r0], #-0
    1770:	d4000001 	strle	r0, [r0], #-1
    1774:	01000001 	tsteq	r0, r1
    1778:	01d45000 	bicseq	r5, r4, r0
    177c:	02100000 	andseq	r0, r0, #0
    1780:	00010000 	andeq	r0, r1, r0
    1784:	00000054 	andeq	r0, r0, r4, asr r0
    1788:	00000000 	andeq	r0, r0, r0
    178c:	00018c00 	andeq	r8, r1, r0, lsl #24
    1790:	00019000 	andeq	r9, r1, r0
    1794:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    1798:	00000198 	muleq	r0, r8, r1
    179c:	0000019c 	muleq	r0, ip, r1
    17a0:	a4550001 	ldrbge	r0, [r5], #-1
    17a4:	a8000001 	stmdage	r0, {r0}
    17a8:	01000001 	tsteq	r0, r1
    17ac:	01b05500 	lslseq	r5, r0, #10
    17b0:	01b40000 			; <UNDEFINED> instruction: 0x01b40000
    17b4:	00010000 	andeq	r0, r1, r0
    17b8:	0001bc55 	andeq	fp, r1, r5, asr ip
    17bc:	0001c000 	andeq	ip, r1, r0
    17c0:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    17c4:	000001c8 	andeq	r0, r0, r8, asr #3
    17c8:	000001cc 	andeq	r0, r0, ip, asr #3
    17cc:	d0550001 	subsle	r0, r5, r1
    17d0:	10000001 	andne	r0, r0, r1
    17d4:	01000002 	tsteq	r0, r2
    17d8:	00005500 	andeq	r5, r0, r0, lsl #10
    17dc:	00000000 	andeq	r0, r0, r0
    17e0:	01600000 	cmneq	r0, r0
    17e4:	01880000 	orreq	r0, r8, r0
    17e8:	00010000 	andeq	r0, r1, r0
    17ec:	00018853 	andeq	r8, r1, r3, asr r8
    17f0:	00019000 	andeq	r9, r1, r0
    17f4:	70001c00 	andvc	r1, r0, r0, lsl #24
    17f8:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    17fc:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1800:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1804:	00000000 	andeq	r0, r0, r0
    1808:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    180c:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1810:	909f2533 	addsls	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
    1814:	94000001 	strls	r0, [r0], #-1
    1818:	01000001 	tsteq	r0, r1
    181c:	01945300 	orrseq	r5, r4, r0, lsl #6
    1820:	019c0000 	orrseq	r0, ip, r0
    1824:	001c0000 	andseq	r0, ip, r0
    1828:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    182c:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    1830:	cccccd08 	stclgt	13, cr12, [ip], {8}
    1834:	000000cc 	andeq	r0, r0, ip, asr #1
    1838:	20081e00 	andcs	r1, r8, r0, lsl #28
    183c:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1840:	9f25332c 	svcls	0x0025332c
    1844:	0000019c 	muleq	r0, ip, r1
    1848:	000001a0 	andeq	r0, r0, r0, lsr #3
    184c:	a0530001 	subsge	r0, r3, r1
    1850:	a8000001 	stmdage	r0, {r0}
    1854:	1c000001 	stcne	0, cr0, [r0], {1}
    1858:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    185c:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    1860:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1864:	0000cccc 	andeq	ip, r0, ip, asr #25
    1868:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    186c:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1870:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1874:	0001a89f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
    1878:	0001ac00 	andeq	sl, r1, r0, lsl #24
    187c:	53000100 	movwpl	r0, #256	; 0x100
    1880:	000001ac 	andeq	r0, r0, ip, lsr #3
    1884:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
    1888:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    188c:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1890:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1894:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1898:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    189c:	25f72008 	ldrbcs	r2, [r7, #8]!
    18a0:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    18a4:	01b49f25 			; <UNDEFINED> instruction: 0x01b49f25
    18a8:	01b80000 			; <UNDEFINED> instruction: 0x01b80000
    18ac:	00010000 	andeq	r0, r1, r0
    18b0:	0001b853 	andeq	fp, r1, r3, asr r8
    18b4:	0001c000 	andeq	ip, r1, r0
    18b8:	70001c00 	andvc	r1, r0, r0, lsl #24
    18bc:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    18c0:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    18c4:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    18c8:	00000000 	andeq	r0, r0, r0
    18cc:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    18d0:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    18d4:	c09f2533 	addsgt	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
    18d8:	c4000001 	strgt	r0, [r0], #-1
    18dc:	01000001 	tsteq	r0, r1
    18e0:	01c45300 	biceq	r5, r4, r0, lsl #6
    18e4:	01cc0000 	biceq	r0, ip, r0
    18e8:	001c0000 	andseq	r0, ip, r0
    18ec:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    18f0:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    18f4:	cccccd08 	stclgt	13, cr12, [ip], {8}
    18f8:	000000cc 	andeq	r0, r0, ip, asr #1
    18fc:	20081e00 	andcs	r1, r8, r0, lsl #28
    1900:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1904:	9f25332c 	svcls	0x0025332c
    1908:	000001cc 	andeq	r0, r0, ip, asr #3
    190c:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1910:	d0530001 	subsle	r0, r3, r1
    1914:	d4000001 	strle	r0, [r0], #-1
    1918:	1c000001 	stcne	0, cr0, [r0], {1}
    191c:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    1920:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    1924:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1928:	0000cccc 	andeq	ip, r0, ip, asr #25
    192c:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1930:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1934:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1938:	0001d49f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
    193c:	0001dc00 	andeq	sp, r1, r0, lsl #24
    1940:	74001c00 	strvc	r1, [r0], #-3072	; 0xc00
    1944:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1948:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    194c:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1950:	00000000 	andeq	r0, r0, r0
    1954:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1958:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    195c:	dc9f2533 	cfldr32le	mvfx2, [pc], {51}	; 0x33
    1960:	e0000001 	and	r0, r0, r1
    1964:	17000001 	strne	r0, [r0, -r1]
    1968:	f7007400 			; <UNDEFINED> instruction: 0xf7007400
    196c:	7125f72c 	msrvc	SP_abt, ip
    1970:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1974:	20081e25 	andcs	r1, r8, r5, lsr #28
    1978:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    197c:	9f25332c 	svcls	0x0025332c
    1980:	000001e0 	andeq	r0, r0, r0, ror #3
    1984:	00000210 	andeq	r0, r0, r0, lsl r2
    1988:	0074001c 	rsbseq	r0, r4, ip, lsl r0
    198c:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1990:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1994:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1998:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    199c:	25f72008 	ldrbcs	r2, [r7, #8]!
    19a0:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    19a4:	00009f25 	andeq	r9, r0, r5, lsr #30
    19a8:	00000000 	andeq	r0, r0, r0
    19ac:	01d80000 	bicseq	r0, r8, r0
    19b0:	01fc0000 	mvnseq	r0, r0
    19b4:	00010000 	andeq	r0, r1, r0
    19b8:	0001fc50 	andeq	pc, r1, r0, asr ip	; <UNPREDICTABLE>
    19bc:	00020300 	andeq	r0, r2, r0, lsl #6
    19c0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    19cc:	00000210 	andeq	r0, r0, r0, lsl r2
    19d0:	0000022c 	andeq	r0, r0, ip, lsr #4
    19d4:	2c500001 	mrrccs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    19d8:	34000002 	strcc	r0, [r0], #-2
    19dc:	01000002 	tsteq	r0, r2
    19e0:	02345400 	eorseq	r5, r4, #0, 8
    19e4:	023c0000 	eorseq	r0, ip, #0
    19e8:	00010000 	andeq	r0, r1, r0
    19ec:	00023c50 	andeq	r3, r2, r0, asr ip
    19f0:	00024400 	andeq	r4, r2, r0, lsl #8
    19f4:	54000100 	strpl	r0, [r0], #-256	; 0x100
    19f8:	00000244 	andeq	r0, r0, r4, asr #4
    19fc:	00000250 	andeq	r0, r0, r0, asr r2
    1a00:	01f30004 	mvnseq	r0, r4
    1a04:	02509f50 	subseq	r9, r0, #80, 30	; 0x140
    1a08:	02540000 	subseq	r0, r4, #0
    1a0c:	00010000 	andeq	r0, r1, r0
    1a10:	00025450 	andeq	r5, r2, r0, asr r4
    1a14:	00025c00 	andeq	r5, r2, r0, lsl #24
    1a18:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    1a24:	00000220 	andeq	r0, r0, r0, lsr #4
    1a28:	00000230 	andeq	r0, r0, r0, lsr r2
    1a2c:	9f300002 	svcls	0x00300002
    1a30:	00000230 	andeq	r0, r0, r0, lsr r2
    1a34:	00000234 	andeq	r0, r0, r4, lsr r2
    1a38:	34500001 	ldrbcc	r0, [r0], #-1
    1a3c:	40000002 	andmi	r0, r0, r2
    1a40:	02000002 	andeq	r0, r0, #2
    1a44:	409f3000 	addsmi	r3, pc, r0
    1a48:	4c000002 	stcmi	0, cr0, [r0], {2}
    1a4c:	01000002 	tsteq	r0, r2
    1a50:	00005000 	andeq	r5, r0, r0
    1a54:	00000000 	andeq	r0, r0, r0
    1a58:	025c0000 	subseq	r0, ip, #0
    1a5c:	02900000 	addseq	r0, r0, #0
    1a60:	00010000 	andeq	r0, r1, r0
    1a64:	00029050 	andeq	r9, r2, r0, asr r0
    1a68:	0002a000 	andeq	sl, r2, r0
    1a6c:	f3000400 	vshl.u8	d0, d0, d0
    1a70:	a09f5001 	addsge	r5, pc, r1
    1a74:	c0000002 	andgt	r0, r0, r2
    1a78:	01000002 	tsteq	r0, r2
    1a7c:	02c05000 	sbceq	r5, r0, #0
    1a80:	02d40000 	sbcseq	r0, r4, #0
    1a84:	00040000 	andeq	r0, r4, r0
    1a88:	9f5001f3 	svcls	0x005001f3
	...
    1a94:	0000025c 	andeq	r0, r0, ip, asr r2
    1a98:	00000294 	muleq	r0, r4, r2
    1a9c:	94510001 	ldrbls	r0, [r1], #-1
    1aa0:	a0000002 	andge	r0, r0, r2
    1aa4:	04000002 	streq	r0, [r0], #-2
    1aa8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1aac:	0002a09f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
    1ab0:	0002c400 	andeq	ip, r2, r0, lsl #8
    1ab4:	51000100 	mrspl	r0, (UNDEF: 16)
    1ab8:	000002c4 	andeq	r0, r0, r4, asr #5
    1abc:	000002d4 	ldrdeq	r0, [r0], -r4
    1ac0:	01f30004 	mvnseq	r0, r4
    1ac4:	00009f51 	andeq	r9, r0, r1, asr pc
    1ac8:	00000000 	andeq	r0, r0, r0
    1acc:	02700000 	rsbseq	r0, r0, #0
    1ad0:	02900000 	addseq	r0, r0, #0
    1ad4:	00010000 	andeq	r0, r1, r0
    1ad8:	00029050 	andeq	r9, r2, r0, asr r0
    1adc:	0002a000 	andeq	sl, r2, r0
    1ae0:	f3000400 	vshl.u8	d0, d0, d0
    1ae4:	009f5001 	addseq	r5, pc, r1
    1ae8:	00000000 	andeq	r0, r0, r0
    1aec:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    1af0:	80000002 	andhi	r0, r0, r2
    1af4:	02000002 	andeq	r0, r0, #2
    1af8:	809f3000 	addshi	r3, pc, r0
    1afc:	80000002 	andhi	r0, r0, r2
    1b00:	01000002 	tsteq	r0, r2
    1b04:	02805200 	addeq	r5, r0, #0, 4
    1b08:	02880000 	addeq	r0, r8, #0
    1b0c:	00020000 	andeq	r0, r2, r0
    1b10:	02889f30 	addeq	r9, r8, #48, 30	; 0xc0
    1b14:	029b0000 	addseq	r0, fp, #0
    1b18:	00010000 	andeq	r0, r1, r0
    1b1c:	00000052 	andeq	r0, r0, r2, asr r0
    1b20:	00000000 	andeq	r0, r0, r0
    1b24:	00027800 	andeq	r7, r2, r0, lsl #16
    1b28:	00028c00 	andeq	r8, r2, r0, lsl #24
    1b2c:	30000200 	andcc	r0, r0, r0, lsl #4
    1b30:	00028c9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
    1b34:	00029800 	andeq	r9, r2, r0, lsl #16
    1b38:	31000500 	tstcc	r0, r0, lsl #10
    1b3c:	9f240073 	svcls	0x00240073
    1b40:	00000298 	muleq	r0, r8, r2
    1b44:	0000029b 	muleq	r0, fp, r2
    1b48:	9b510001 	blls	1441b54 <__bss_end__+0x1438144>
    1b4c:	a0000002 	andge	r0, r0, r2
    1b50:	08000002 	stmdaeq	r0, {r1}
    1b54:	01f33100 	mvnseq	r3, r0, lsl #2
    1b58:	241a4f50 	ldrcs	r4, [sl], #-3920	; 0xf50
    1b5c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1b60:	00000000 	andeq	r0, r0, r0
    1b64:	0002a000 	andeq	sl, r2, r0
    1b68:	0002c000 	andeq	ip, r2, r0
    1b6c:	50000100 	andpl	r0, r0, r0, lsl #2
    1b70:	000002c0 	andeq	r0, r0, r0, asr #5
    1b74:	000002d4 	ldrdeq	r0, [r0], -r4
    1b78:	01f30004 	mvnseq	r0, r4
    1b7c:	00009f50 	andeq	r9, r0, r0, asr pc
    1b80:	00000000 	andeq	r0, r0, r0
    1b84:	02a80000 	adceq	r0, r8, #0
    1b88:	02b00000 	adcseq	r0, r0, #0
    1b8c:	00020000 	andeq	r0, r2, r0
    1b90:	02b09f30 	adcseq	r9, r0, #48, 30	; 0xc0
    1b94:	02b00000 	adcseq	r0, r0, #0
    1b98:	00010000 	andeq	r0, r1, r0
    1b9c:	0002b052 	andeq	fp, r2, r2, asr r0
    1ba0:	0002b800 	andeq	fp, r2, r0, lsl #16
    1ba4:	30000200 	andcc	r0, r0, r0, lsl #4
    1ba8:	0002b89f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
    1bac:	0002cb00 	andeq	ip, r2, r0, lsl #22
    1bb0:	52000100 	andpl	r0, r0, #0, 2
	...
    1bbc:	000002a8 	andeq	r0, r0, r8, lsr #5
    1bc0:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
    1bc4:	9f300002 	svcls	0x00300002
    1bc8:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
    1bcc:	000002c8 	andeq	r0, r0, r8, asr #5
    1bd0:	73310005 	teqvc	r1, #5
    1bd4:	c89f2400 	ldmgt	pc, {sl, sp}	; <UNPREDICTABLE>
    1bd8:	cb000002 	blgt	1be8 <_start-0x6418>
    1bdc:	01000002 	tsteq	r0, r2
    1be0:	02cb5100 	sbceq	r5, fp, #0, 2
    1be4:	02d40000 	sbcseq	r0, r4, #0
    1be8:	00080000 	andeq	r0, r8, r0
    1bec:	5001f331 	andpl	pc, r1, r1, lsr r3	; <UNPREDICTABLE>
    1bf0:	9f241a4f 	svcls	0x00241a4f
	...
    1bfc:	000002d4 	ldrdeq	r0, [r0], -r4
    1c00:	0000036c 	andeq	r0, r0, ip, ror #6
    1c04:	6c500001 	mrrcvs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    1c08:	ac000003 	stcge	0, cr0, [r0], {3}
    1c0c:	01000003 	tsteq	r0, r3
    1c10:	00005400 	andeq	r5, r0, r0, lsl #8
    1c14:	00000000 	andeq	r0, r0, r0
    1c18:	02d40000 	sbcseq	r0, r4, #0
    1c1c:	036f0000 	cmneq	pc, #0
    1c20:	00010000 	andeq	r0, r1, r0
    1c24:	00036f51 	andeq	r6, r3, r1, asr pc
    1c28:	0003ac00 	andeq	sl, r3, r0, lsl #24
    1c2c:	f3000400 	vshl.u8	d0, d0, d0
    1c30:	009f5101 	addseq	r5, pc, r1, lsl #2
    1c34:	00000000 	andeq	r0, r0, r0
    1c38:	24000000 	strcs	r0, [r0], #-0
    1c3c:	28000003 	stmdacs	r0, {r0, r1}
    1c40:	01000003 	tsteq	r0, r3
    1c44:	03305600 	teqeq	r0, #0, 12
    1c48:	03340000 	teqeq	r4, #0
    1c4c:	00010000 	andeq	r0, r1, r0
    1c50:	00033c56 	andeq	r3, r3, r6, asr ip
    1c54:	00034000 	andeq	r4, r3, r0
    1c58:	56000100 	strpl	r0, [r0], -r0, lsl #2
    1c5c:	00000348 	andeq	r0, r0, r8, asr #6
    1c60:	0000034c 	andeq	r0, r0, ip, asr #6
    1c64:	54560001 	ldrbpl	r0, [r6], #-1
    1c68:	58000003 	stmdapl	r0, {r0, r1}
    1c6c:	01000003 	tsteq	r0, r3
    1c70:	03605600 	cmneq	r0, #0, 12
    1c74:	03640000 	cmneq	r4, #0
    1c78:	00010000 	andeq	r0, r1, r0
    1c7c:	00036856 	andeq	r6, r3, r6, asr r8
    1c80:	0003ac00 	andeq	sl, r3, r0, lsl #24
    1c84:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    1c90:	000002f8 	strdeq	r0, [r0], -r8
    1c94:	00000320 	andeq	r0, r0, r0, lsr #6
    1c98:	20530001 	subscs	r0, r3, r1
    1c9c:	28000003 	stmdacs	r0, {r0, r1}
    1ca0:	1c000003 	stcne	0, cr0, [r0], {3}
    1ca4:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    1ca8:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    1cac:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1cb0:	0000cccc 	andeq	ip, r0, ip, asr #25
    1cb4:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1cb8:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1cbc:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1cc0:	0003289f 	muleq	r3, pc, r8	; <UNPREDICTABLE>
    1cc4:	00032c00 	andeq	r2, r3, r0, lsl #24
    1cc8:	53000100 	movwpl	r0, #256	; 0x100
    1ccc:	0000032c 	andeq	r0, r0, ip, lsr #6
    1cd0:	00000334 	andeq	r0, r0, r4, lsr r3
    1cd4:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    1cd8:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1cdc:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1ce0:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1ce4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1ce8:	25f72008 	ldrbcs	r2, [r7, #8]!
    1cec:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1cf0:	03349f25 	teqeq	r4, #37, 30	; 0x94
    1cf4:	03380000 	teqeq	r8, #0
    1cf8:	00010000 	andeq	r0, r1, r0
    1cfc:	00033853 	andeq	r3, r3, r3, asr r8
    1d00:	00034000 	andeq	r4, r3, r0
    1d04:	70001c00 	andvc	r1, r0, r0, lsl #24
    1d08:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1d0c:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1d10:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1d14:	00000000 	andeq	r0, r0, r0
    1d18:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1d1c:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1d20:	409f2533 	addsmi	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
    1d24:	44000003 	strmi	r0, [r0], #-3
    1d28:	01000003 	tsteq	r0, r3
    1d2c:	03445300 	movteq	r5, #17152	; 0x4300
    1d30:	034c0000 	movteq	r0, #49152	; 0xc000
    1d34:	001c0000 	andseq	r0, ip, r0
    1d38:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    1d3c:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    1d40:	cccccd08 	stclgt	13, cr12, [ip], {8}
    1d44:	000000cc 	andeq	r0, r0, ip, asr #1
    1d48:	20081e00 	andcs	r1, r8, r0, lsl #28
    1d4c:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1d50:	9f25332c 	svcls	0x0025332c
    1d54:	0000034c 	andeq	r0, r0, ip, asr #6
    1d58:	00000350 	andeq	r0, r0, r0, asr r3
    1d5c:	50530001 	subspl	r0, r3, r1
    1d60:	58000003 	stmdapl	r0, {r0, r1}
    1d64:	1c000003 	stcne	0, cr0, [r0], {3}
    1d68:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    1d6c:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    1d70:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1d74:	0000cccc 	andeq	ip, r0, ip, asr #25
    1d78:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1d7c:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1d80:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1d84:	0003589f 	muleq	r3, pc, r8	; <UNPREDICTABLE>
    1d88:	00035c00 	andeq	r5, r3, r0, lsl #24
    1d8c:	53000100 	movwpl	r0, #256	; 0x100
    1d90:	0000035c 	andeq	r0, r0, ip, asr r3
    1d94:	00000364 	andeq	r0, r0, r4, ror #6
    1d98:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    1d9c:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1da0:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1da4:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1da8:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1dac:	25f72008 	ldrbcs	r2, [r7, #8]!
    1db0:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1db4:	03649f25 	cmneq	r4, #37, 30	; 0x94
    1db8:	03680000 	cmneq	r8, #0
    1dbc:	00010000 	andeq	r0, r1, r0
    1dc0:	00036853 	andeq	r6, r3, r3, asr r8
    1dc4:	00036c00 	andeq	r6, r3, r0, lsl #24
    1dc8:	70001c00 	andvc	r1, r0, r0, lsl #24
    1dcc:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1dd0:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1dd4:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1dd8:	00000000 	andeq	r0, r0, r0
    1ddc:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1de0:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1de4:	6c9f2533 	cfldr32vs	mvfx2, [pc], {51}	; 0x33
    1de8:	74000003 	strvc	r0, [r0], #-3
    1dec:	1c000003 	stcne	0, cr0, [r0], {3}
    1df0:	f7007400 			; <UNDEFINED> instruction: 0xf7007400
    1df4:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    1df8:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1dfc:	0000cccc 	andeq	ip, r0, ip, asr #25
    1e00:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1e04:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1e08:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1e0c:	0003749f 	muleq	r3, pc, r4	; <UNPREDICTABLE>
    1e10:	00037800 	andeq	r7, r3, r0, lsl #16
    1e14:	74001700 	strvc	r1, [r0], #-1792	; 0x700
    1e18:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1e1c:	f7007325 			; <UNDEFINED> instruction: 0xf7007325
    1e20:	1e25f72c 	cdpne	7, 2, cr15, cr5, cr12, {1}
    1e24:	25f72008 	ldrbcs	r2, [r7, #8]!
    1e28:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1e2c:	03789f25 	cmneq	r8, #37, 30	; 0x94
    1e30:	03ac0000 			; <UNDEFINED> instruction: 0x03ac0000
    1e34:	001c0000 	andseq	r0, ip, r0
    1e38:	2cf70074 	ldclcs	0, cr0, [r7], #464	; 0x1d0
    1e3c:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    1e40:	cccccd08 	stclgt	13, cr12, [ip], {8}
    1e44:	000000cc 	andeq	r0, r0, ip, asr #1
    1e48:	20081e00 	andcs	r1, r8, r0, lsl #28
    1e4c:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1e50:	9f25332c 	svcls	0x0025332c
	...
    1e5c:	00000370 	andeq	r0, r0, r0, ror r3
    1e60:	00000394 	muleq	r0, r4, r3
    1e64:	94500001 	ldrbls	r0, [r0], #-1
    1e68:	9c000003 	stcls	0, cr0, [r0], {3}
    1e6c:	09000003 	stmdbeq	r0, {r0, r1}
    1e70:	73007500 	movwvc	r7, #1280	; 0x500
    1e74:	00712400 	rsbseq	r2, r1, r0, lsl #8
    1e78:	039c9f21 	orrseq	r9, ip, #33, 30	; 0x84
    1e7c:	039f0000 	orrseq	r0, pc, #0
    1e80:	00010000 	andeq	r0, r1, r0
    1e84:	00000051 	andeq	r0, r0, r1, asr r0
	...
    1e90:	00000b00 	andeq	r0, r0, r0, lsl #22
    1e94:	50000100 	andpl	r0, r0, r0, lsl #2
    1e98:	0000000b 	andeq	r0, r0, fp
    1e9c:	00000014 	andeq	r0, r0, r4, lsl r0
    1ea0:	00540001 	subseq	r0, r4, r1
    1ea4:	00000000 	andeq	r0, r0, r0
    1ea8:	Address 0x0000000000001ea8 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	00008010 	andeq	r8, r0, r0, lsl r0
  14:	00000084 	andeq	r0, r0, r4, lsl #1
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	022e0002 	eoreq	r0, lr, #2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	00008094 	muleq	r0, r4, r0
  34:	00000600 	andeq	r0, r0, r0, lsl #12
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	13d90002 	bicsne	r0, r9, #2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	00008694 	muleq	r0, r4, r6
  54:	00000058 	andeq	r0, r0, r8, asr r0
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	156e0002 	strbne	r0, [lr, #-2]!
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	000086ec 	andeq	r8, r0, ip, ror #13
  74:	00000034 	andeq	r0, r0, r4, lsr r0
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	16600002 	strbtne	r0, [r0], -r2
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	00008720 	andeq	r8, r0, r0, lsr #14
  94:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	1cb80002 	ldcne	0, cr0, [r8], #8
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	00008c10 	andeq	r8, r0, r0, lsl ip
  b4:	00000020 	andeq	r0, r0, r0, lsr #32
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	1d740002 	ldclne	0, cr0, [r4, #-8]!
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	00008c30 	andeq	r8, r0, r0, lsr ip
  d4:	00000028 	andeq	r0, r0, r8, lsr #32
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	1e770002 	cdpne	0, 7, cr0, cr7, cr2, {0}
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	00008c58 	andeq	r8, r0, r8, asr ip
  f4:	00000034 	andeq	r0, r0, r4, lsr r0
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	1f860002 	svcne	0x00860002
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	00008c8c 	andeq	r8, r0, ip, lsl #25
 114:	00000074 	andeq	r0, r0, r4, ror r0
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	21370002 	teqcs	r7, r2
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	00008d00 	andeq	r8, r0, r0, lsl #26
 134:	00000098 	muleq	r0, r8, r0
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	23320002 	teqcs	r2, #2
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	00008dfc 	strdeq	r8, [r0], -ip
 154:	00000154 	andeq	r0, r0, r4, asr r1
	...
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	27350002 	ldrcs	r0, [r5, -r2]!
 168:	00040000 	andeq	r0, r4, r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	00008f50 	andeq	r8, r0, r0, asr pc
 174:	000003ac 	andeq	r0, r0, ip, lsr #7
	...
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	2ca10002 	stccs	0, cr0, [r1], #8
 188:	00040000 	andeq	r0, r4, r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	000092fc 	strdeq	r9, [r0], -ip
 194:	00000014 	andeq	r0, r0, r4, lsl r0
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000116 	andeq	r0, r0, r6, lsl r1
   4:	00df0002 	sbcseq	r0, pc, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2f010000 	svccs	0x00010000
  1c:	2f727375 	svccs	0x00727375
  20:	61636f6c 	cmnvs	r3, ip, ror #30
  24:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
  28:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
  2c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
  30:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
  34:	61652d65 	cmnvs	r5, r5, ror #26
  38:	342f6962 	strtcc	r6, [pc], #-2402	; 40 <_start-0x7fc0>
  3c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
  40:	3173632d 	cmncc	r3, sp, lsr #6
  44:	2f653037 	svccs	0x00653037
  48:	2f62696c 	svccs	0x0062696c
  4c:	2f636367 	svccs	0x00636367
  50:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
  54:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
  58:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
  5c:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
  60:	2f332e38 	svccs	0x00332e38
  64:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  68:	00656475 	rsbeq	r6, r5, r5, ror r4
  6c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
  70:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
  74:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
  78:	2f6e756a 	svccs	0x006e756a
  7c:	6b736544 	blvs	1cd9594 <__bss_end__+0x1ccfb84>
  80:	2f706f74 	svccs	0x00706f74
  84:	6f686373 	svcvs	0x00686373
  88:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
  8c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
  90:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
  94:	53432f30 	movtpl	r2, #16176	; 0x3f30
  98:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
  9c:	3173632f 	cmncc	r3, pc, lsr #6
  a0:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
  a4:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
  a8:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
  ac:	00697062 	rsbeq	r7, r9, r2, rrx
  b0:	702d3000 	eorvc	r3, sp, r0
  b4:	2d637475 	cfstrdcs	mvd7, [r3, #-468]!	; 0xfffffe2c
  b8:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0x574
  bc:	0000632e 	andeq	r6, r0, lr, lsr #6
  c0:	74730000 	ldrbtvc	r0, [r3], #-0
  c4:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
  c8:	6363672d 	cmnvs	r3, #11796480	; 0xb40000
  cc:	0100682e 	tsteq	r0, lr, lsr #16
  d0:	77730000 	ldrbvc	r0, [r3, -r0]!
  d4:	7261752d 	rsbvc	r7, r1, #188743680	; 0xb400000
  d8:	00682e74 	rsbeq	r2, r8, r4, ror lr
  dc:	72000000 	andvc	r0, r0, #0
  e0:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
  e4:	00000200 	andeq	r0, r0, r0, lsl #4
  e8:	02050000 	andeq	r0, r5, #0
  ec:	00008010 	andeq	r8, r0, r0, lsl r0
  f0:	312f4b17 	teqcc	pc, r7, lsl fp	; <UNPREDICTABLE>
  f4:	2f2f2fd8 	svccs	0x002f2fd8
  f8:	0402002b 	streq	r0, [r2], #-43	; 0x2b
  fc:	02002f02 	andeq	r2, r0, #2, 30
 100:	00670204 	rsbeq	r0, r7, r4, lsl #4
 104:	83020402 	movwhi	r0, #9218	; 0x2402
 108:	02040200 	andeq	r0, r4, #0, 4
 10c:	04020047 	streq	r0, [r2], #-71	; 0x47
 110:	062e0601 	strteq	r0, [lr], -r1, lsl #12
 114:	000a0250 	andeq	r0, sl, r0, asr r2
 118:	03460101 	movteq	r0, #24833	; 0x6101
 11c:	00020000 	andeq	r0, r2, r0
 120:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
 124:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 128:	0101000d 	tsteq	r1, sp
 12c:	00000101 	andeq	r0, r0, r1, lsl #2
 130:	00000100 	andeq	r0, r0, r0, lsl #2
 134:	73752f01 	cmnvc	r5, #1, 30
 138:	6f6c2f72 	svcvs	0x006c2f72
 13c:	2f6c6163 	svccs	0x006c6163
 140:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
 144:	612f7261 	teqvs	pc, r1, ror #4
 148:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 14c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 150:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 154:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 158:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
 15c:	30373173 	eorscc	r3, r7, r3, ror r1
 160:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 164:	63672f62 	cmnvs	r7, #392	; 0x188
 168:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
 16c:	6f6e2d6d 	svcvs	0x006e2d6d
 170:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 174:	2f696261 	svccs	0x00696261
 178:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 17c:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
 180:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
 184:	552f0065 	strpl	r0, [pc, #-101]!	; 127 <_start-0x7ed9>
 188:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 18c:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 190:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 194:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 198:	6f746b73 	svcvs	0x00746b73
 19c:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 1a0:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 8 <_start-0x7ff8>
 1a4:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 1a8:	31726574 	cmncc	r2, r4, ror r5
 1ac:	2f303239 	svccs	0x00303239
 1b0:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 1b4:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 1b8:	30343173 	eorscc	r3, r4, r3, ror r1
 1bc:	30322d65 	eorscc	r2, r2, r5, ror #26
 1c0:	2f6e6977 	svccs	0x006e6977
 1c4:	7062696c 	rsbvc	r6, r2, ip, ror #18
 1c8:	73632f69 	cmnvc	r3, #420	; 0x1a4
 1cc:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 1d0:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 1d4:	73552f00 	cmpvc	r5, #0, 30
 1d8:	2f737265 	svccs	0x00737265
 1dc:	61697262 	cmnvs	r9, r2, ror #4
 1e0:	6e756a6e 	vsubvs.f32	s13, s10, s29
 1e4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 1e8:	706f746b 	rsbvc	r7, pc, fp, ror #8
 1ec:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 1f0:	2f6c6f6f 	svccs	0x006c6f6f
 1f4:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 1f8:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 1fc:	432f3032 	teqmi	pc, #50	; 0x32
 200:	30343153 	eorscc	r3, r4, r3, asr r1
 204:	73632f45 	cmnvc	r3, #276	; 0x114
 208:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 20c:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 210:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 74 <_start-0x7f8c>
 214:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 218:	73552f00 	cmpvc	r5, #0, 30
 21c:	2f737265 	svccs	0x00737265
 220:	61697262 	cmnvs	r9, r2, ror #4
 224:	6e756a6e 	vsubvs.f32	s13, s10, s29
 228:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 22c:	706f746b 	rsbvc	r7, pc, fp, ror #8
 230:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 234:	2f6c6f6f 	svccs	0x006c6f6f
 238:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 23c:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 240:	432f3032 	teqmi	pc, #50	; 0x32
 244:	30343153 	eorscc	r3, r4, r3, asr r1
 248:	73632f45 	cmnvc	r3, #276	; 0x114
 24c:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 250:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 254:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; b8 <_start-0x7f48>
 258:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 25c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 260:	73000063 	movwvc	r0, #99	; 0x63
 264:	61752d77 	cmnvs	r5, r7, ror sp
 268:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
 26c:	00000000 	andeq	r0, r0, r0
 270:	6c637963 	stclvs	9, cr7, [r3], #-396	; 0xfffffe74
 274:	74752d65 	ldrbtvc	r2, [r5], #-3429	; 0xd65
 278:	682e6c69 	stmdavs	lr!, {r0, r3, r5, r6, sl, fp, sp, lr}
 27c:	00000000 	andeq	r0, r0, r0
 280:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 284:	672d746e 	strvs	r7, [sp, -lr, ror #8]!
 288:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
 28c:	00000100 	andeq	r0, r0, r0, lsl #2
 290:	752d7773 	strvc	r7, [sp, #-1907]!	; 0x773
 294:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
 298:	00000068 	andeq	r0, r0, r8, rrx
 29c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
 2a0:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
 2a4:	00010068 	andeq	r0, r1, r8, rrx
 2a8:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 2ac:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 2b0:	72000002 	andvc	r0, r0, #2
 2b4:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 2b8:	00000300 	andeq	r0, r0, r0, lsl #6
 2bc:	702d6176 	eorvc	r6, sp, r6, ror r1
 2c0:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 2c4:	00682e6b 	rsbeq	r2, r8, fp, ror #28
 2c8:	3c000004 	stccc	0, cr0, [r0], {4}
 2cc:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 2d0:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
 2d4:	0000003e 	andeq	r0, r0, lr, lsr r0
 2d8:	05000000 	streq	r0, [r0, #-0]
 2dc:	00809402 	addeq	r9, r0, r2, lsl #8
 2e0:	2f4c1a00 	svccs	0x004c1a00
 2e4:	02043230 	andeq	r3, r4, #48, 4
 2e8:	66730335 			; <UNDEFINED> instruction: 0x66730335
 2ec:	0a030104 	beq	c0704 <__bss_end__+0xb6cf4>
 2f0:	31020482 	smlabbcc	r2, r2, r4, r0
 2f4:	04667303 	strbteq	r7, [r6], #-771	; 0x303
 2f8:	820c0301 	andhi	r0, ip, #67108864	; 0x4000000
 2fc:	032f0204 	teqeq	pc, #4, 4	; 0x40000000
 300:	01046673 	tsteq	r4, r3, ror r6
 304:	04820e03 	streq	r0, [r2], #3587	; 0xe03
 308:	73032d02 	movwvc	r2, #15618	; 0x3d02
 30c:	03010466 	movweq	r0, #5222	; 0x1466
 310:	02048210 	andeq	r8, r4, #16, 4
 314:	6673032b 	ldrbtvs	r0, [r3], -fp, lsr #6
 318:	12030104 	andne	r0, r3, #4, 2
 31c:	29020482 	stmdbcs	r2, {r1, r7, sl}
 320:	04667303 	strbteq	r7, [r6], #-771	; 0x303
 324:	82140301 	andshi	r0, r4, #67108864	; 0x4000000
 328:	79030204 	stmdbvc	r3, {r2, r9}
 32c:	6673032e 	ldrbtvs	r0, [r3], -lr, lsr #6
 330:	16030104 	strne	r0, [r3], -r4, lsl #2
 334:	03020482 	movweq	r0, #9346	; 0x2482
 338:	73032e77 	movwvc	r2, #15991	; 0x3e77
 33c:	03010466 	movweq	r0, #5222	; 0x1466
 340:	02048218 	andeq	r8, r4, #24, 4	; 0x80000001
 344:	032e7503 	teqeq	lr, #12582912	; 0xc00000
 348:	01046673 	tsteq	r4, r3, ror r6
 34c:	04821a03 	streq	r1, [r2], #2563	; 0xa03
 350:	2e730302 	cdpcs	3, 7, cr0, cr3, cr2, {0}
 354:	04667303 	strbteq	r7, [r6], #-771	; 0x303
 358:	821c0301 	andshi	r0, ip, #67108864	; 0x4000000
 35c:	4b2e1003 	blmi	b84370 <__bss_end__+0xb7a960>
 360:	2e70034d 	cdpcs	3, 7, cr0, cr0, cr13, {2}
 364:	4883844c 	stmmi	r3, {r2, r3, r6, sl, pc}
 368:	4e2e0d03 	cdpmi	13, 2, cr0, cr14, cr3, {0}
 36c:	02043331 	andeq	r3, r4, #-1006632960	; 0xc4000000
 370:	042e4403 	strteq	r4, [lr], #-1027	; 0x403
 374:	823e0301 	eorshi	r0, lr, #67108864	; 0x4000000
 378:	0302042f 	movweq	r0, #9263	; 0x242f
 37c:	01046641 	tsteq	r4, r1, asr #12
 380:	8200c103 	andhi	ip, r0, #-1073741824	; 0xc0000000
 384:	0302042f 	movweq	r0, #9263	; 0x242f
 388:	04827fbe 	streq	r7, [r2], #4030	; 0xfbe
 38c:	00c40301 	sbceq	r0, r4, r1, lsl #6
 390:	02042f82 	andeq	r2, r4, #520	; 0x208
 394:	827fbb03 	rsbshi	fp, pc, #3072	; 0xc00
 398:	c7030104 	strgt	r0, [r3, -r4, lsl #2]
 39c:	042f8200 	strteq	r8, [pc], #-512	; 3a4 <_start-0x7c5c>
 3a0:	7fb80302 	svcvc	0x00b80302
 3a4:	03010482 	movweq	r0, #5250	; 0x1482
 3a8:	2f8200ca 	svccs	0x008200ca
 3ac:	b5030204 	strlt	r0, [r3, #-516]	; 0x204
 3b0:	0104827f 	tsteq	r4, pc, ror r2
 3b4:	8200cd03 	andhi	ip, r0, #3, 26	; 0xc0
 3b8:	0302042f 	movweq	r0, #9263	; 0x242f
 3bc:	04827fb2 	streq	r7, [r2], #4018	; 0xfb2
 3c0:	00d00301 	sbcseq	r0, r0, r1, lsl #6
 3c4:	02042f82 	andeq	r2, r4, #520	; 0x208
 3c8:	827faf03 	rsbshi	sl, pc, #3, 30
 3cc:	d4030104 	strle	r0, [r3], #-260	; 0x104
 3d0:	4c038200 	sfmmi	f0, 1, [r3], {-0}
 3d4:	83844c82 	orrhi	r4, r4, #33280	; 0x8200
 3d8:	2e360348 	cdpcs	3, 3, cr0, cr6, cr8, {2}
 3dc:	4a54034e 	bmi	150111c <__bss_end__+0x14f770c>
 3e0:	324a2903 	subcc	r2, sl, #49152	; 0xc000
 3e4:	02009f34 	andeq	r9, r0, #52, 30	; 0xd0
 3e8:	4a060104 	bmi	180800 <__bss_end__+0x176df0>
 3ec:	4b4ebb06 	blmi	13af00c <__bss_end__+0x13a55fc>
 3f0:	02002cbb 	andeq	r2, r0, #47872	; 0xbb00
 3f4:	2e060104 	adfcss	f0, f6, f4
 3f8:	a44c6d06 	strbge	r6, [ip], #-3334	; 0xd06
 3fc:	04020084 	streq	r0, [r2], #-132	; 0x84
 400:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 404:	02004dbb 	andeq	r4, r0, #11968	; 0x2ec0
 408:	004b0204 	subeq	r0, fp, r4, lsl #4
 40c:	81020402 	tsthi	r2, r2, lsl #8
 410:	01040200 	mrseq	r0, R12_usr
 414:	4d062e06 	stcmi	14, cr2, [r6, #-24]	; 0xffffffe8
 418:	4bbca54c 	blmi	fef29950 <__bss_end__+0xfef1ff40>
 41c:	002f4f4b 	eoreq	r4, pc, fp, asr #30
 420:	06010402 	streq	r0, [r1], -r2, lsl #8
 424:	02008282 	andeq	r8, r0, #536870920	; 0x20000008
 428:	009e0404 	addseq	r0, lr, r4, lsl #8
 42c:	4a010402 	bmi	4143c <__bss_end__+0x37a2c>
 430:	bd88bd06 	stclt	13, cr11, [r8, #24]
 434:	084b4b2f 	stmdaeq	fp, {r0, r1, r2, r3, r5, r8, r9, fp, lr}^
 438:	02006724 	andeq	r6, r0, #36, 14	; 0x900000
 43c:	002f0204 	eoreq	r0, pc, r4, lsl #4
 440:	49020402 	stmdbmi	r2, {r1, sl}
 444:	01040200 	mrseq	r0, R12_usr
 448:	68062e06 	stmdavs	r6, {r1, r2, r9, sl, fp, sp}
 44c:	a04b8634 	subge	r8, fp, r4, lsr r6
 450:	01040200 	mrseq	r0, R12_usr
 454:	bb066606 	bllt	199c74 <__bss_end__+0x190264>
 458:	4b220868 	blmi	882600 <__bss_end__+0x878bf0>
 45c:	02bc4b67 	adcseq	r4, ip, #105472	; 0x19c00
 460:	0101000a 	tsteq	r1, sl
 464:	00000102 	andeq	r0, r0, r2, lsl #2
 468:	00eb0002 	rsceq	r0, fp, r2
 46c:	01020000 	mrseq	r0, (UNDEF: 2)
 470:	000d0efb 	strdeq	r0, [sp], -fp
 474:	01010101 	tsteq	r1, r1, lsl #2
 478:	01000000 	mrseq	r0, (UNDEF: 0)
 47c:	6c010000 	stcvs	0, cr0, [r1], {-0}
 480:	00636269 	rsbeq	r6, r3, r9, ror #4
 484:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 488:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
 48c:	432f6c61 	teqmi	pc, #24832	; 0x6100
 490:	616c6c65 	cmnvs	ip, r5, ror #24
 494:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 498:	6f6e2d6d 	svcvs	0x006e2d6d
 49c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 4a0:	2f696261 	svccs	0x00696261
 4a4:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 4a8:	73632d33 	cmnvc	r3, #3264	; 0xcc0
 4ac:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
 4b0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 4b4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
 4b8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 4bc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 4c0:	61652d65 	cmnvs	r5, r5, ror #26
 4c4:	342f6962 	strtcc	r6, [pc], #-2402	; 4cc <_start-0x7b34>
 4c8:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 4cc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 4d0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
 4d4:	73552f00 	cmpvc	r5, #0, 30
 4d8:	2f737265 	svccs	0x00737265
 4dc:	61697262 	cmnvs	r9, r2, ror #4
 4e0:	6e756a6e 	vsubvs.f32	s13, s10, s29
 4e4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 4e8:	706f746b 	rsbvc	r7, pc, fp, ror #8
 4ec:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 4f0:	2f6c6f6f 	svccs	0x006c6f6f
 4f4:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 4f8:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 4fc:	432f3032 	teqmi	pc, #50	; 0x32
 500:	30343153 	eorscc	r3, r4, r3, asr r1
 504:	73632f45 	cmnvc	r3, #276	; 0x114
 508:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 50c:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 510:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 374 <_start-0x7c8c>
 514:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 518:	72700000 	rsbsvc	r0, r0, #0
 51c:	6b746e69 	blvs	1d1bec8 <__bss_end__+0x1d124b8>
 520:	0100632e 	tsteq	r0, lr, lsr #6
 524:	74730000 	ldrbtvc	r0, [r3], #-0
 528:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
 52c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 530:	623c0000 	eorsvs	r0, ip, #0
 534:	746c6975 	strbtvc	r6, [ip], #-2421	; 0x975
 538:	3e6e692d 	cdpcc	9, 6, cr6, cr14, cr13, {1}
 53c:	00000000 	andeq	r0, r0, r0
 540:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 544:	00030068 	andeq	r0, r3, r8, rrx
 548:	2d617600 	stclcs	6, cr7, [r1, #-0]
 54c:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 550:	682e6b74 	stmdavs	lr!, {r2, r4, r5, r6, r8, r9, fp, sp, lr}
 554:	00000100 	andeq	r0, r0, r0, lsl #2
 558:	02050000 	andeq	r0, r5, #0
 55c:	00008694 	muleq	r0, r4, r6
 560:	bf4b6b17 	svclt	0x004b6b17
 564:	000e0289 	andeq	r0, lr, r9, lsl #5
 568:	00960101 	addseq	r0, r6, r1, lsl #2
 56c:	00020000 	andeq	r0, r2, r0
 570:	0000006f 	andeq	r0, r0, pc, rrx
 574:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 578:	0101000d 	tsteq	r1, sp
 57c:	00000101 	andeq	r0, r0, r1, lsl #2
 580:	00000100 	andeq	r0, r0, r0, lsl #2
 584:	62696c01 	rsbvs	r6, r9, #256	; 0x100
 588:	552f0063 	strpl	r0, [pc, #-99]!	; 52d <_start-0x7ad3>
 58c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 590:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 594:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 598:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 59c:	6f746b73 	svcvs	0x00746b73
 5a0:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 5a4:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 40c <_start-0x7bf4>
 5a8:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 5ac:	31726574 	cmncc	r2, r4, ror r5
 5b0:	2f303239 	svccs	0x00303239
 5b4:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 5b8:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 5bc:	30343173 	eorscc	r3, r4, r3, ror r1
 5c0:	30322d65 	eorscc	r2, r2, r5, ror #26
 5c4:	2f6e6977 	svccs	0x006e6977
 5c8:	7062696c 	rsbvc	r6, r2, ip, ror #18
 5cc:	70000069 	andvc	r0, r0, r9, rrx
 5d0:	2e6b7475 	mcrcs	4, 3, r7, cr11, cr5, {3}
 5d4:	00010063 	andeq	r0, r1, r3, rrx
 5d8:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 5dc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 5e0:	00000000 	andeq	r0, r0, r0
 5e4:	86ec0205 	strbthi	r0, [ip], r5, lsl #4
 5e8:	4c150000 	ldcmi	0, cr0, [r5], {-0}
 5ec:	0402002d 	streq	r0, [r2], #-45	; 0x2d
 5f0:	02002f02 	andeq	r2, r0, #2, 30
 5f4:	00490204 	subeq	r0, r9, r4, lsl #4
 5f8:	06010402 	streq	r0, [r1], -r2, lsl #8
 5fc:	026b062e 	rsbeq	r0, fp, #48234496	; 0x2e00000
 600:	01010006 	tsteq	r1, r6
 604:	000001dc 	ldrdeq	r0, [r0], -ip
 608:	00df0002 	sbcseq	r0, pc, r2
 60c:	01020000 	mrseq	r0, (UNDEF: 2)
 610:	000d0efb 	strdeq	r0, [sp], -fp
 614:	01010101 	tsteq	r1, r1, lsl #2
 618:	01000000 	mrseq	r0, (UNDEF: 0)
 61c:	6c010000 	stcvs	0, cr0, [r1], {-0}
 620:	00636269 	rsbeq	r6, r3, r9, ror #4
 624:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 628:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
 62c:	432f6c61 	teqmi	pc, #24832	; 0x6100
 630:	616c6c65 	cmnvs	ip, r5, ror #24
 634:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 638:	6f6e2d6d 	svcvs	0x006e2d6d
 63c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 640:	2f696261 	svccs	0x00696261
 644:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 648:	73632d33 	cmnvc	r3, #3264	; 0xcc0
 64c:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
 650:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 654:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
 658:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 65c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 660:	61652d65 	cmnvs	r5, r5, ror #26
 664:	342f6962 	strtcc	r6, [pc], #-2402	; 66c <_start-0x7994>
 668:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 66c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 670:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
 674:	73552f00 	cmpvc	r5, #0, 30
 678:	2f737265 	svccs	0x00737265
 67c:	61697262 	cmnvs	r9, r2, ror #4
 680:	6e756a6e 	vsubvs.f32	s13, s10, s29
 684:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 688:	706f746b 	rsbvc	r7, pc, fp, ror #8
 68c:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 690:	2f6c6f6f 	svccs	0x006c6f6f
 694:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 698:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 69c:	432f3032 	teqmi	pc, #50	; 0x32
 6a0:	30343153 	eorscc	r3, r4, r3, asr r1
 6a4:	73632f45 	cmnvc	r3, #276	; 0x114
 6a8:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 6ac:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 6b0:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 514 <_start-0x7aec>
 6b4:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 6b8:	61760000 	cmnvs	r6, r0
 6bc:	6972702d 	ldmdbvs	r2!, {r0, r2, r3, r5, ip, sp, lr}^
 6c0:	2e6b746e 	cdpcs	4, 6, cr7, cr11, cr14, {3}
 6c4:	00010063 	andeq	r0, r1, r3, rrx
 6c8:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
 6cc:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
 6d0:	00020068 	andeq	r0, r2, r8, rrx
 6d4:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 6d8:	0300682e 	movweq	r6, #2094	; 0x82e
 6dc:	623c0000 	eorsvs	r0, ip, #0
 6e0:	746c6975 	strbtvc	r6, [ip], #-2421	; 0x975
 6e4:	3e6e692d 	cdpcc	9, 6, cr6, cr14, cr13, {1}
 6e8:	00000000 	andeq	r0, r0, r0
 6ec:	02050000 	andeq	r0, r5, #0
 6f0:	00008720 	andeq	r8, r0, r0, lsr #14
 6f4:	01012603 	tsteq	r1, r3, lsl #12
 6f8:	2d3113a5 	ldccs	3, cr1, [r1, #-660]!	; 0xfffffd6c
 6fc:	02040200 	andeq	r0, r4, #0, 4
 700:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 704:	02002d02 	andeq	r2, r0, #2, 26	; 0x80
 708:	002f0204 	eoreq	r0, pc, r4, lsl #4
 70c:	2d010402 	cfstrscs	mvf0, [r1, #-8]
 710:	14304c4c 	ldrtne	r4, [r0], #-3148	; 0xc4c
 714:	004f2f4b 	subeq	r2, pc, fp, asr #30
 718:	67020402 	strvs	r0, [r2, -r2, lsl #8]
 71c:	01040200 	mrseq	r0, R12_usr
 720:	304d4c65 	subcc	r4, sp, r5, ror #24
 724:	30312fa0 	eorscc	r2, r1, r0, lsr #31
 728:	84162602 	ldrhi	r2, [r6], #-1538	; 0x602
 72c:	02002c2d 	andeq	r2, r0, #11520	; 0x2d00
 730:	00300104 	eorseq	r0, r0, r4, lsl #2
 734:	33010402 	movwcc	r0, #5122	; 0x1402
 738:	02006606 	andeq	r6, r0, #6291456	; 0x600000
 73c:	002e0104 	eoreq	r0, lr, r4, lsl #2
 740:	06010402 	streq	r0, [r1], -r2, lsl #8
 744:	2f672108 	svccs	0x00672108
 748:	03827303 	orreq	r7, r2, #201326592	; 0xc000000
 74c:	02002e13 	andeq	r2, r0, #304	; 0x130
 750:	2e060104 	adfcss	f0, f6, f4
 754:	01040200 	mrseq	r0, R12_usr
 758:	4b6a9f06 	blmi	1aa8378 <__bss_end__+0x1a9e968>
 75c:	032e6703 	teqeq	lr, #786432	; 0xc0000
 760:	02002e21 	andeq	r2, r0, #528	; 0x210
 764:	2e060104 	adfcss	f0, f6, f4
 768:	01040200 	mrseq	r0, R12_usr
 76c:	02009f06 	andeq	r9, r0, #6, 30
 770:	bd6a0104 	stflte	f0, [sl, #-16]!
 774:	7fa603f3 	svcvc	0x00a603f3
 778:	002f2008 	eoreq	r2, pc, r8
 77c:	06010402 	streq	r0, [r1], -r2, lsl #8
 780:	4bbb064a 	blmi	feec20b0 <__bss_end__+0xfeeb86a0>
 784:	00da032f 	sbcseq	r0, sl, pc, lsr #6
 788:	484c83f2 	stmdami	ip, {r1, r4, r5, r6, r7, r8, r9, pc}^
 78c:	842f2f31 	strthi	r2, [pc], #-3889	; 794 <_start-0x786c>
 790:	4d2d2f4b 	stcmi	15, cr2, [sp, #-300]!	; 0xfffffed4
 794:	832f3031 	teqhi	pc, #49	; 0x31
 798:	01040200 	mrseq	r0, R12_usr
 79c:	0200be2c 	andeq	fp, r0, #44, 28	; 0x2c0
 7a0:	4a060104 	bmi	180bb8 <__bss_end__+0x1771a8>
 7a4:	3602bc06 	strcc	fp, [r2], -r6, lsl #24
 7a8:	ba0e0316 	blt	381408 <__bss_end__+0x3779f8>
 7ac:	08302108 	ldmdaeq	r0!, {r3, r8, sp}
 7b0:	21083121 	tstcs	r8, r1, lsr #2
 7b4:	30210830 	eorcc	r0, r1, r0, lsr r8
 7b8:	2108304b 	tstcs	r8, fp, asr #32
 7bc:	2f31d930 	svccs	0x0031d930
 7c0:	01040200 	mrseq	r0, R12_usr
 7c4:	04020065 	streq	r0, [r2], #-101	; 0x65
 7c8:	004a0602 	subeq	r0, sl, r2, lsl #12
 7cc:	06010402 	streq	r0, [r1], -r2, lsl #8
 7d0:	00664203 	rsbeq	r4, r6, r3, lsl #4
 7d4:	06020402 	streq	r0, [r2], -r2, lsl #8
 7d8:	c2030666 	andgt	r0, r3, #106954752	; 0x6600000
 7dc:	02684a00 	rsbeq	r4, r8, #0, 20
 7e0:	01010010 	tsteq	r1, r0, lsl r0
 7e4:	00000043 	andeq	r0, r0, r3, asr #32
 7e8:	00290002 	eoreq	r0, r9, r2
 7ec:	01020000 	mrseq	r0, (UNDEF: 2)
 7f0:	000d0efb 	strdeq	r0, [sp], -fp
 7f4:	01010101 	tsteq	r1, r1, lsl #2
 7f8:	01000000 	mrseq	r0, (UNDEF: 0)
 7fc:	63010000 	movwvs	r0, #4096	; 0x1000
 800:	30343173 	eorscc	r3, r4, r3, ror r1
 804:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 808:	63000063 	movwvs	r0, #99	; 0x63
 80c:	65686361 	strbvs	r6, [r8, #-865]!	; 0x361
 810:	0100632e 	tsteq	r0, lr, lsr #6
 814:	00000000 	andeq	r0, r0, r0
 818:	8c100205 	lfmhi	f0, 4, [r0], {5}
 81c:	14140000 	ldrne	r0, [r4], #-0
 820:	144e2f30 	strbne	r2, [lr], #-3888	; 0xf30
 824:	04022f31 	streq	r2, [r2], #-3889	; 0xf31
 828:	93010100 	movwls	r0, #4352	; 0x1100
 82c:	02000000 	andeq	r0, r0, #0
 830:	00007d00 	andeq	r7, r0, r0, lsl #26
 834:	fb010200 	blx	4103e <__bss_end__+0x3762e>
 838:	01000d0e 	tsteq	r0, lr, lsl #26
 83c:	00010101 	andeq	r0, r1, r1, lsl #2
 840:	00010000 	andeq	r0, r1, r0
 844:	73630100 	cmnvc	r3, #0, 2
 848:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 84c:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 850:	73552f00 	cmpvc	r5, #0, 30
 854:	2f737265 	svccs	0x00737265
 858:	61697262 	cmnvs	r9, r2, ror #4
 85c:	6e756a6e 	vsubvs.f32	s13, s10, s29
 860:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 864:	706f746b 	rsbvc	r7, pc, fp, ror #8
 868:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 86c:	2f6c6f6f 	svccs	0x006c6f6f
 870:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 874:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 878:	432f3032 	teqmi	pc, #50	; 0x32
 87c:	30343153 	eorscc	r3, r4, r3, asr r1
 880:	73632f45 	cmnvc	r3, #276	; 0x114
 884:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 888:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 88c:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 6f0 <_start-0x7910>
 890:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 894:	6c630000 	stclvs	0, cr0, [r3], #-0
 898:	2d6e6165 	stfcse	f6, [lr, #-404]!	; 0xfffffe6c
 89c:	6f626572 	svcvs	0x00626572
 8a0:	632e746f 	teqvs	lr, #1862270976	; 0x6f000000
 8a4:	00000100 	andeq	r0, r0, r0, lsl #2
 8a8:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 8ac:	00020068 	andeq	r0, r2, r8, rrx
 8b0:	05000000 	streq	r0, [r0, #-0]
 8b4:	008c3002 	addeq	r3, ip, r2
 8b8:	832f1500 	teqhi	pc, #0, 10
 8bc:	0006024b 	andeq	r0, r6, fp, asr #4
 8c0:	00960101 	addseq	r0, r6, r1, lsl #2
 8c4:	00020000 	andeq	r0, r2, r0
 8c8:	00000077 	andeq	r0, r0, r7, ror r0
 8cc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 8d0:	0101000d 	tsteq	r1, sp
 8d4:	00000101 	andeq	r0, r0, r1, lsl #2
 8d8:	00000100 	andeq	r0, r0, r0, lsl #2
 8dc:	31736301 	cmncc	r3, r1, lsl #6
 8e0:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 8e4:	00637273 	rsbeq	r7, r3, r3, ror r2
 8e8:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 8ec:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 8f0:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 8f4:	2f6e756a 	svccs	0x006e756a
 8f8:	6b736544 	blvs	1cd9e10 <__bss_end__+0x1cd0400>
 8fc:	2f706f74 	svccs	0x00706f74
 900:	6f686373 	svcvs	0x00686373
 904:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 908:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 90c:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 910:	53432f30 	movtpl	r2, #16176	; 0x3f30
 914:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 918:	3173632f 	cmncc	r3, pc, lsr #6
 91c:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 920:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 924:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 928:	00697062 	rsbeq	r7, r9, r2, rrx
 92c:	74736300 	ldrbtvc	r6, [r3], #-768	; 0x300
 930:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
 934:	00010063 	andeq	r0, r1, r3, rrx
 938:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 93c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 940:	00000000 	andeq	r0, r0, r0
 944:	8c580205 	lfmhi	f0, 2, [r8], {5}
 948:	32140000 	andscc	r0, r4, #0
 94c:	2f2d2f31 	svccs	0x002d2f31
 950:	01040200 	mrseq	r0, R12_usr
 954:	022f4d49 	eoreq	r4, pc, #4672	; 0x1240
 958:	01010006 	tsteq	r1, r6
 95c:	00000099 	muleq	r0, r9, r0
 960:	00770002 	rsbseq	r0, r7, r2
 964:	01020000 	mrseq	r0, (UNDEF: 2)
 968:	000d0efb 	strdeq	r0, [sp], -fp
 96c:	01010101 	tsteq	r1, r1, lsl #2
 970:	01000000 	mrseq	r0, (UNDEF: 0)
 974:	63010000 	movwvs	r0, #4096	; 0x1000
 978:	30343173 	eorscc	r3, r4, r3, ror r1
 97c:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 980:	552f0063 	strpl	r0, [pc, #-99]!	; 925 <_start-0x76db>
 984:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 988:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 98c:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 990:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 994:	6f746b73 	svcvs	0x00746b73
 998:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 99c:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 804 <_start-0x77fc>
 9a0:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 9a4:	31726574 	cmncc	r2, r4, ror r5
 9a8:	2f303239 	svccs	0x00303239
 9ac:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 9b0:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 9b4:	30343173 	eorscc	r3, r4, r3, ror r1
 9b8:	30322d65 	eorscc	r2, r2, r5, ror #26
 9bc:	2f6e6977 	svccs	0x006e6977
 9c0:	7062696c 	rsbvc	r6, r2, ip, ror #18
 9c4:	72000069 	andvc	r0, r0, #105	; 0x69
 9c8:	6f6f6265 	svcvs	0x006f6265
 9cc:	00632e74 	rsbeq	r2, r3, r4, ror lr
 9d0:	72000001 	andvc	r0, r0, #1
 9d4:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 9d8:	00000200 	andeq	r0, r0, r0, lsl #4
 9dc:	02050000 	andeq	r0, r5, #0
 9e0:	00008c8c 	andeq	r8, r0, ip, lsl #25
 9e4:	14010d03 	strne	r0, [r1], #-3331	; 0xd03
 9e8:	15852f31 	strne	r2, [r5, #3889]	; 0xf31
 9ec:	2f4d4b2f 	svccs	0x004d4b2f
 9f0:	67523567 	ldrbvs	r3, [r2, -r7, ror #10]
 9f4:	01001002 	tsteq	r0, r2
 9f8:	0000a501 	andeq	sl, r0, r1, lsl #10
 9fc:	76000200 	strvc	r0, [r0], -r0, lsl #4
 a00:	02000000 	andeq	r0, r0, #0
 a04:	0d0efb01 	vstreq	d15, [lr, #-4]
 a08:	01010100 	mrseq	r0, (UNDEF: 17)
 a0c:	00000001 	andeq	r0, r0, r1
 a10:	01000001 	tsteq	r0, r1
 a14:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 a18:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
 a1c:	2f006372 	svccs	0x00006372
 a20:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 a24:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 a28:	6a6e6169 	bvs	1b98fd4 <__bss_end__+0x1b8f5c4>
 a2c:	442f6e75 	strtmi	r6, [pc], #-3701	; a34 <_start-0x75cc>
 a30:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 a34:	732f706f 	teqvc	pc, #111	; 0x6f
 a38:	6f6f6863 	svcvs	0x006f6863
 a3c:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 a40:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 a44:	30323931 	eorscc	r3, r2, r1, lsr r9
 a48:	3153432f 	cmpcc	r3, pc, lsr #6
 a4c:	2f453034 	svccs	0x00453034
 a50:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 a54:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 a58:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 a5c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 a60:	00006970 	andeq	r6, r0, r0, ror r9
 a64:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 a68:	00632e72 	rsbeq	r2, r3, r2, ror lr
 a6c:	72000001 	andvc	r0, r0, #1
 a70:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 a74:	00000200 	andeq	r0, r0, r0, lsl #4
 a78:	02050000 	andeq	r0, r5, #0
 a7c:	00008d00 	andeq	r8, r0, r0, lsl #26
 a80:	2d2f1316 	stccs	3, cr1, [pc, #-88]!	; a30 <_start-0x75d0>
 a84:	01040200 	mrseq	r0, R12_usr
 a88:	68062e06 	stmdavs	r6, {r1, r2, r9, sl, fp, sp}
 a8c:	4d4b2f31 	stclmi	15, cr2, [fp, #-196]	; 0xffffff3c
 a90:	304b2f2f 	subcc	r2, fp, pc, lsr #30
 a94:	2f4c4b4c 	svccs	0x004c4b4c
 a98:	842f2f6a 	strthi	r2, [pc], #-3946	; aa0 <_start-0x7560>
 a9c:	0008022f 	andeq	r0, r8, pc, lsr #4
 aa0:	00770101 	rsbseq	r0, r7, r1, lsl #2
 aa4:	00020000 	andeq	r0, r2, r0
 aa8:	0000003b 	andeq	r0, r0, fp, lsr r0
 aac:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 ab0:	0101000d 	tsteq	r1, sp
 ab4:	00000101 	andeq	r0, r0, r1, lsl #2
 ab8:	00000100 	andeq	r0, r0, r0, lsl #2
 abc:	31736301 	cmncc	r3, r1, lsl #6
 ac0:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 ac4:	00637273 	rsbeq	r7, r3, r3, ror r2
 ac8:	72617500 	rsbvc	r7, r1, #0, 10
 acc:	00632e74 	rsbeq	r2, r3, r4, ror lr
 ad0:	67000000 	strvs	r0, [r0, -r0]
 ad4:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
 ad8:	00010068 	andeq	r0, r1, r8, rrx
 adc:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 ae0:	0000682e 	andeq	r6, r0, lr, lsr #16
 ae4:	00000000 	andeq	r0, r0, r0
 ae8:	8dfc0205 	lfmhi	f0, 2, [ip, #20]!
 aec:	d6030000 	strle	r0, [r3], -r0
 af0:	672f0100 	strvs	r0, [pc, -r0, lsl #2]!
 af4:	30665e03 	rsbcc	r5, r6, r3, lsl #28
 af8:	306d6733 	rsbcc	r6, sp, r3, lsr r7
 afc:	676730d8 			; <UNDEFINED> instruction: 0x676730d8
 b00:	68676767 	stmdavs	r7!, {r0, r1, r2, r5, r6, r8, r9, sl, sp, lr}^
 b04:	30820a03 	addcc	r0, r2, r3, lsl #20
 b08:	2f696767 	svccs	0x00696767
 b0c:	674c6a67 	strbvs	r6, [ip, -r7, ror #20]
 b10:	302f2fc1 	eorcc	r2, pc, r1, asr #31
 b14:	3049682f 	subcc	r6, r9, pc, lsr #16
 b18:	01000202 	tsteq	r0, r2, lsl #4
 b1c:	0000a501 	andeq	sl, r0, r1, lsl #10
 b20:	32000200 	andcc	r0, r0, #0, 4
 b24:	02000000 	andeq	r0, r0, #0
 b28:	0d0efb01 	vstreq	d15, [lr, #-4]
 b2c:	01010100 	mrseq	r0, (UNDEF: 17)
 b30:	00000001 	andeq	r0, r0, r1
 b34:	01000001 	tsteq	r0, r1
 b38:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 b3c:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
 b40:	00006372 	andeq	r6, r0, r2, ror r3
 b44:	6f697067 	svcvs	0x00697067
 b48:	0000632e 	andeq	r6, r0, lr, lsr #6
 b4c:	70670000 	rsbvc	r0, r7, r0
 b50:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
 b54:	00000100 	andeq	r0, r0, r0, lsl #2
 b58:	02050000 	andeq	r0, r5, #0
 b5c:	00008f50 	andeq	r8, r0, r0, asr pc
 b60:	4e013e03 	cdpmi	14, 0, cr3, cr1, cr3, {0}
 b64:	21086950 	tstcs	r8, r0, asr r9
 b68:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
 b6c:	4b326767 	blmi	c9a910 <__bss_end__+0xc90f00>
 b70:	31dc2208 	bicscc	r2, ip, r8, lsl #4
 b74:	504e1351 	subpl	r1, lr, r1, asr r3
 b78:	5031be30 	eorspl	fp, r1, r0, lsr lr
 b7c:	304f4d13 	subcc	r4, pc, r3, lsl sp	; <UNPREDICTABLE>
 b80:	69504cc0 	ldmdbvs	r0, {r6, r7, sl, fp, lr}^
 b84:	67672108 	strbvs	r2, [r7, -r8, lsl #2]!
 b88:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
 b8c:	21084b32 	tstcs	r8, r2, lsr fp
 b90:	2f504ca4 	svccs	0x00504ca4
 b94:	75036984 	strvc	r6, [r3, #-2436]	; 0x984
 b98:	2e0c0382 	cdpcs	3, 0, cr0, cr12, cr2, {4}
 b9c:	034e304d 	movteq	r3, #57421	; 0xe04d
 ba0:	514a7f98 			; <UNDEFINED> instruction: 0x514a7f98
 ba4:	30504e13 	subscc	r4, r0, r3, lsl lr
 ba8:	4d1350a5 	ldcmi	0, cr5, [r3, #-660]	; 0xfffffd6c
 bac:	c203304f 	andgt	r3, r3, #79	; 0x4f
 bb0:	6b6aba00 	blvs	1aaf3b8 <__bss_end__+0x1aa59a8>
 bb4:	67210869 	strvs	r0, [r1, -r9, ror #16]!
 bb8:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
 bbc:	084b3267 	stmdaeq	fp, {r0, r1, r2, r5, r6, r9, ip, sp}^
 bc0:	000c0222 	andeq	r0, ip, r2, lsr #4
 bc4:	00860101 	addeq	r0, r6, r1, lsl #2
 bc8:	00020000 	andeq	r0, r2, r0
 bcc:	00000072 	andeq	r0, r0, r2, ror r0
 bd0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 bd4:	0101000d 	tsteq	r1, sp
 bd8:	00000101 	andeq	r0, r0, r1, lsl #2
 bdc:	00000100 	andeq	r0, r0, r0, lsl #2
 be0:	62696c01 	rsbvs	r6, r9, #256	; 0x100
 be4:	552f0063 	strpl	r0, [pc, #-99]!	; b89 <_start-0x7477>
 be8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 bec:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 bf0:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 bf4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 bf8:	6f746b73 	svcvs	0x00746b73
 bfc:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 c00:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; a68 <_start-0x7598>
 c04:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 c08:	31726574 	cmncc	r2, r4, ror r5
 c0c:	2f303239 	svccs	0x00303239
 c10:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 c14:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 c18:	30343173 	eorscc	r3, r4, r3, ror r1
 c1c:	30322d65 	eorscc	r2, r2, r5, ror #26
 c20:	2f6e6977 	svccs	0x006e6977
 c24:	7062696c 	rsbvc	r6, r2, ip, ror #18
 c28:	70000069 	andvc	r0, r0, r9, rrx
 c2c:	68637475 	stmdavs	r3!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
 c30:	632e7261 	teqvs	lr, #268435462	; 0x10000006
 c34:	00000100 	andeq	r0, r0, r0, lsl #2
 c38:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 c3c:	00020068 	andeq	r0, r2, r8, rrx
 c40:	05000000 	streq	r0, [r0, #-0]
 c44:	0092fc02 	addseq	pc, r2, r2, lsl #24
 c48:	024a1400 	subeq	r1, sl, #0, 8
 c4c:	01010006 	tsteq	r1, r6

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6c637963 	stclvs	9, cr7, [r3], #-396	; 0xfffffe74
   4:	65705f65 	ldrbvs	r5, [r0, #-3941]!	; 0xf65
   8:	69625f72 	stmdbvs	r2!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   c:	77730074 			; <UNDEFINED> instruction: 0x77730074
  10:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
  14:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
  18:	685f7469 	ldmdavs	pc, {r0, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
  1c:	65706c65 	ldrbvs	r6, [r0, #-3173]!	; 0xc65
  20:	4e470072 	mcrmi	0, 2, r0, cr7, cr2, {3}
  24:	20432055 	subcs	r2, r3, r5, asr r0
  28:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
  2c:	6d2d2033 	stcvs	0, cr2, [sp, #-204]!	; 0xffffff34
  30:	3d757063 	ldclcc	0, cr7, [r5, #-396]!	; 0xfffffe74
  34:	316d7261 	cmncc	sp, r1, ror #4
  38:	6a363731 	bvs	d8dd04 <__bss_end__+0xd842f4>
  3c:	732d667a 	teqvc	sp, #127926272	; 0x7a00000
  40:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xd20
  44:	3d656e75 	stclcc	14, cr6, [r5, #-468]!	; 0xfffffe2c
  48:	316d7261 	cmncc	sp, r1, ror #4
  4c:	6a363731 	bvs	d8dd18 <__bss_end__+0xd84308>
  50:	732d667a 	teqvc	sp, #127926272	; 0x7a00000
  54:	67672d20 	strbvs	r2, [r7, -r0, lsr #26]!
  58:	2d206264 	sfmcs	f6, 4, [r0, #-400]!	; 0xfffffe70
  5c:	2d20674f 	stccs	7, cr6, [r0, #-316]!	; 0xfffffec4
  60:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  64:	39756e67 	ldmdbcc	r5!, {r0, r1, r2, r5, r6, r9, sl, fp, sp, lr}^
  68:	662d2039 			; <UNDEFINED> instruction: 0x662d2039
  6c:	65657266 	strbvs	r7, [r5, #-614]!	; 0x266
  70:	6e617473 	mcrvs	4, 3, r7, cr1, cr3, {3}
  74:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
  78:	746f6e00 	strbtvc	r6, [pc], #-3584	; 80 <_start-0x7f80>
  7c:	6e69616d 	powvsez	f6, f1, #5.0
  80:	72617500 	rsbvc	r7, r1, #0, 10
  84:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
  88:	73007469 	movwvc	r7, #1129	; 0x469
  8c:	61755f77 	cmnvs	r5, r7, ror pc
  90:	705f7472 	subsvc	r7, pc, r2, ror r4	; <UNPREDICTABLE>
  94:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
  98:	6e75006b 	cdpvs	0, 7, cr0, cr5, cr11, {3}
  9c:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
  a0:	63206465 	teqvs	r0, #1694498816	; 0x65000000
  a4:	00726168 	rsbseq	r6, r2, r8, ror #2
  a8:	616c6564 	cmnvs	ip, r4, ror #10
  ac:	736d5f79 	cmnvc	sp, #484	; 0x1e4
  b0:	656c6300 	strbvs	r6, [ip, #-768]!	; 0x300
  b4:	725f6e61 	subsvc	r6, pc, #1552	; 0x610
  b8:	6f6f6265 	svcvs	0x006f6265
  bc:	68730074 	ldmdavs	r3!, {r2, r4, r5, r6}^
  c0:	2074726f 	rsbscs	r7, r4, pc, ror #4
  c4:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  c8:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
  cc:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
  d0:	702d3000 	eorvc	r3, sp, r0
  d4:	2d637475 	cfstrdcs	mvd7, [r3, #-468]!	; 0xfffffe2c
  d8:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0x574
  dc:	7300632e 	movwvc	r6, #814	; 0x32e
  e0:	61755f77 	cmnvs	r5, r7, ror pc
  e4:	745f7472 	ldrbvc	r7, [pc], #-1138	; ec <_start-0x7f14>
  e8:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
  ec:	6f6c2067 	svcvs	0x006c2067
  f0:	7520676e 	strvc	r6, [r0, #-1902]!	; 0x76e
  f4:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  f8:	2064656e 	rsbcs	r6, r4, lr, ror #10
  fc:	00746e69 	rsbseq	r6, r4, r9, ror #28
 100:	746e6975 	strbtvc	r6, [lr], #-2421	; 0x975
 104:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 108:	64756162 	ldrbtvs	r6, [r5], #-354	; 0x162
 10c:	7a697300 	bvc	1a5cd14 <__bss_end__+0x1a53304>
 110:	70797465 	rsbsvc	r7, r9, r5, ror #8
 114:	6f6c0065 	svcvs	0x006c0065
 118:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
 11c:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 120:	00746e69 	rsbseq	r6, r4, r9, ror #28
 124:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 128:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
 12c:	6e650074 	mcrvs	0, 3, r0, cr5, cr4, {3}
 130:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
 134:	6361635f 	cmnvs	r1, #2080374785	; 0x7c000001
 138:	75006568 	strvc	r6, [r0, #-1384]	; 0x568
 13c:	33746e69 	cmncc	r4, #1680	; 0x690
 140:	00745f32 	rsbseq	r5, r4, r2, lsr pc
 144:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 148:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 14c:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 150:	2f6e756a 	svccs	0x006e756a
 154:	6b736544 	blvs	1cd966c <__bss_end__+0x1ccfc5c>
 158:	2f706f74 	svccs	0x00706f74
 15c:	6f686373 	svcvs	0x00686373
 160:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 164:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 168:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 16c:	53432f30 	movtpl	r2, #16176	; 0x3f30
 170:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 174:	3173632f 	cmncc	r3, pc, lsr #6
 178:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 17c:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 180:	616c2f6e 	cmnvs	ip, lr, ror #30
 184:	382f7362 	stmdacc	pc!, {r1, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 188:	7665642d 	strbtvc	r6, [r5], -sp, lsr #8
 18c:	2d656369 	stclcs	3, cr6, [r5, #-420]!	; 0xfffffe5c
 190:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 194:	70757272 	rsbsvc	r7, r5, r2, ror r2
 198:	302f7374 	eorcc	r7, pc, r4, ror r3	; <UNPREDICTABLE>
 19c:	65742d30 	ldrbvs	r2, [r4, #-3376]!	; 0xd30
 1a0:	732d7473 	teqvc	sp, #1929379840	; 0x73000000
 1a4:	61752d77 	cmnvs	r5, r7, ror sp
 1a8:	63007472 	movwvs	r7, #1138	; 0x472
 1ac:	705f6379 	subsvc	r6, pc, r9, ror r3	; <UNPREDICTABLE>
 1b0:	625f7265 	subsvs	r7, pc, #1342177286	; 0x50000006
 1b4:	77007469 	strvc	r7, [r0, -r9, ror #8]
 1b8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
 1bc:	6379635f 	cmnvs	r9, #2080374785	; 0x7c000001
 1c0:	746e755f 	strbtvc	r7, [lr], #-1375	; 0x55f
 1c4:	73006c69 	movwvc	r6, #3177	; 0xc69
 1c8:	61755f77 	cmnvs	r5, r7, ror pc
 1cc:	675f7472 			; <UNDEFINED> instruction: 0x675f7472
 1d0:	5f637465 	svcpl	0x00637465
 1d4:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 1d8:	0074756f 	rsbseq	r7, r4, pc, ror #10
 1dc:	755f7773 	ldrbvc	r7, [pc, #-1907]	; fffffa71 <__bss_end__+0xffff6061>
 1e0:	5f747261 	svcpl	0x00747261
 1e4:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
 1e8:	746e755f 	strbtvc	r7, [lr], #-1375	; 0x55f
 1ec:	5f006c69 	svcpl	0x00006c69
 1f0:	5f61765f 	svcpl	0x0061765f
 1f4:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
 1f8:	5f777300 	svcpl	0x00777300
 1fc:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 200:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 204:	65640063 	strbvs	r0, [r4, #-99]!	; 0x63
 208:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
 20c:	65640064 	strbvs	r0, [r4, #-100]!	; 0x64
 210:	5f79616c 	svcpl	0x0079616c
 214:	6379636e 	cmnvs	r9, #-1207959551	; 0xb8000001
 218:	0073656c 	rsbseq	r6, r3, ip, ror #10
 21c:	55465f5f 	strbpl	r5, [r6, #-3935]	; 0xf5f
 220:	4954434e 	ldmdbmi	r4, {r1, r2, r3, r6, r8, r9, lr}^
 224:	5f5f4e4f 	svcpl	0x005f4e4f
 228:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
 22c:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
 230:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0x55f
 234:	77730063 	ldrbvc	r0, [r3, -r3, rrx]!
 238:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 23c:	75705f74 	ldrbvc	r5, [r0, #-3956]!	; 0xf74
 240:	73006374 	movwvc	r6, #884	; 0x374
 244:	61755f77 	cmnvs	r5, r7, ror pc
 248:	705f7472 	subsvc	r7, pc, r2, ror r4	; <UNPREDICTABLE>
 24c:	006b7475 	rsbeq	r7, fp, r5, ror r4
 250:	705f6176 	subsvc	r6, pc, r6, ror r1	; <UNPREDICTABLE>
 254:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 258:	7067006b 	rsbvc	r0, r7, fp, rrx
 25c:	725f6f69 	subsvc	r6, pc, #420	; 0x1a4
 260:	00646165 	rsbeq	r6, r4, r5, ror #2
 264:	752d7773 	strvc	r7, [sp, #-1907]!	; 0x773
 268:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
 26c:	68630063 	stmdavs	r3!, {r0, r1, r5, r6}^
 270:	695f7261 	ldmdbvs	pc, {r0, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
 274:	5f5f006e 	svcpl	0x005f006e
 278:	63756e67 	cmnvs	r5, #1648	; 0x670
 27c:	5f61765f 	svcpl	0x0061765f
 280:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
 284:	5f777300 	svcpl	0x00777300
 288:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 28c:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 290:	69745f73 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 294:	756f656d 	strbvc	r6, [pc, #-1389]!	; fffffd2f <__bss_end__+0xffff631f>
 298:	6f5f0074 	svcvs	0x005f0074
 29c:	74007475 	strvc	r7, [r0], #-1141	; 0x475
 2a0:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 2a4:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 2a8:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0x55f
 2ac:	61725f63 	cmnvs	r2, r3, ror #30
 2b0:	626e0077 	rsbvs	r0, lr, #119	; 0x77
 2b4:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
 2b8:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 2bc:	72775f6f 	rsbsvc	r5, r7, #444	; 0x1bc
 2c0:	00657469 	rsbeq	r7, r5, r9, ror #8
 2c4:	63657375 	cmnvs	r5, #-738197503	; 0xd4000001
 2c8:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
 2cc:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
 2d0:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 2d4:	65735f6f 	ldrbvs	r5, [r3, #-3951]!	; 0xf6f
 2d8:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
 2dc:	00747570 	rsbseq	r7, r4, r0, ror r5
 2e0:	755f7773 	ldrbvc	r7, [pc, #-1907]	; fffffb75 <__bss_end__+0xffff6165>
 2e4:	5f747261 	svcpl	0x00747261
 2e8:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
 2ec:	746e755f 	strbtvc	r7, [lr], #-1375	; 0x55f
 2f0:	625f6c69 	subsvs	r6, pc, #26880	; 0x6900
 2f4:	5f006b6c 	svcpl	0x00006b6c
 2f8:	0070615f 	rsbseq	r6, r0, pc, asr r1
 2fc:	6f697067 	svcvs	0x00697067
 300:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
 304:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xf5f
 308:	00747570 	rsbseq	r7, r4, r0, ror r5
 30c:	74696177 	strbtvc	r6, [r9], #-375	; 0x177
 310:	746e755f 	strbtvc	r7, [lr], #-1375	; 0x55f
 314:	755f6c69 	ldrbvc	r6, [pc, #-3177]	; fffff6b3 <__bss_end__+0xffff5ca3>
 318:	00636573 	rsbeq	r6, r3, r3, ror r5
 31c:	73677261 	cmnvc	r7, #268435462	; 0x10000006
 320:	62696c00 	rsbvs	r6, r9, #0, 24
 324:	72702f63 	rsbsvc	r2, r0, #396	; 0x18c
 328:	6b746e69 	blvs	1d1bcd4 <__bss_end__+0x1d122c4>
 32c:	2f00632e 	svccs	0x0000632e
 330:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 334:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 338:	6a6e6169 	bvs	1b988e4 <__bss_end__+0x1b8eed4>
 33c:	442f6e75 	strtmi	r6, [pc], #-3701	; 344 <_start-0x7cbc>
 340:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 344:	732f706f 	teqvc	pc, #111	; 0x6f
 348:	6f6f6863 	svcvs	0x006f6863
 34c:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 350:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 354:	30323931 	eorscc	r3, r2, r1, lsr r9
 358:	3153432f 	cmpcc	r3, pc, lsr #6
 35c:	2f453034 	svccs	0x00453034
 360:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 364:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 368:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 36c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 370:	6c006970 	stcvs	9, cr6, [r0], {112}	; 0x70
 374:	2f636269 	svccs	0x00636269
 378:	6b747570 	blvs	1d1d940 <__bss_end__+0x1d13f30>
 37c:	6900632e 	stmdbvs	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
 380:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 384:	5f6c616e 	svcpl	0x006c616e
 388:	6b747570 	blvs	1d1d950 <__bss_end__+0x1d13f40>
 38c:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 390:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
 394:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 398:	67656e00 	strbvs	r6, [r5, -r0, lsl #28]!
 39c:	7200705f 	andvc	r7, r0, #95	; 0x5f
 3a0:	72657665 	rsbvc	r7, r5, #105906176	; 0x6500000
 3a4:	69006573 	stmdbvs	r0, {r0, r1, r4, r5, r6, r8, sl, sp, lr}
 3a8:	67696473 			; <UNDEFINED> instruction: 0x67696473
 3ac:	70007469 	andvc	r7, r0, r9, ror #8
 3b0:	5f737475 	svcpl	0x00737475
 3b4:	62007066 	andvs	r7, r0, #102	; 0x66
 3b8:	00657361 	rsbeq	r7, r5, r1, ror #6
 3bc:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
 3c0:	705f6465 	subsvc	r6, pc, r5, ror #8
 3c4:	62696c00 	rsbvs	r6, r9, #0, 24
 3c8:	61762f63 	cmnvs	r6, r3, ror #30
 3cc:	6972702d 	ldmdbvs	r2!, {r0, r2, r3, r5, ip, sp, lr}^
 3d0:	2e6b746e 	cdpcs	4, 6, cr7, cr11, cr14, {3}
 3d4:	70720063 	rsbsvc	r0, r2, r3, rrx
 3d8:	65735f69 	ldrbvs	r5, [r3, #-3945]!	; 0xf69
 3dc:	756f5f74 	strbvc	r5, [pc, #-3956]!	; fffff470 <__bss_end__+0xffff5a60>
 3e0:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
 3e4:	64697700 	strbtvs	r7, [r9], #-1792	; 0x700
 3e8:	70006874 	andvc	r6, r0, r4, ror r8
 3ec:	5f637475 	svcpl	0x00637475
 3f0:	65007066 	strvs	r7, [r0, #-102]	; 0x66
 3f4:	0074696d 	rsbseq	r6, r4, sp, ror #18
 3f8:	61736964 	cmnvs	r3, r4, ror #18
 3fc:	5f656c62 	svcpl	0x00656c62
 400:	68636163 	stmdavs	r3!, {r0, r1, r5, r6, r8, sp, lr}^
 404:	73630065 	cmnvc	r3, #101	; 0x65
 408:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 40c:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 410:	6361632f 	cmnvs	r1, #-1140850688	; 0xbc000000
 414:	632e6568 	teqvs	lr, #104, 10	; 0x1a000000
 418:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 41c:	6265725f 	rsbvs	r7, r5, #-268435451	; 0xf0000005
 420:	00746f6f 	rsbseq	r6, r4, pc, ror #30
 424:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 428:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
 42c:	632f6372 	teqvs	pc, #-939524095	; 0xc8000001
 430:	6e61656c 	cdpvs	5, 6, cr6, cr1, cr12, {3}
 434:	6265722d 	rsbvs	r7, r5, #-805306366	; 0xd0000002
 438:	2e746f6f 	cdpcs	15, 7, cr6, cr4, cr15, {3}
 43c:	73630063 	cmnvc	r3, #99	; 0x63
 440:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 444:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 448:	7473632f 	ldrbtvc	r6, [r3], #-815	; 0x32f
 44c:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
 450:	5f5f0063 	svcpl	0x005f0063
 454:	5f737362 	svcpl	0x00737362
 458:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 45c:	005f5f74 	subseq	r5, pc, r4, ror pc	; <UNPREDICTABLE>
 460:	73625f5f 	cmnvc	r2, #380	; 0x17c
 464:	6e655f73 	mcrvs	15, 3, r5, cr5, cr3, {3}
 468:	005f5f64 	subseq	r5, pc, r4, ror #30
 46c:	5f737362 	svcpl	0x00737362
 470:	00646e65 	rsbeq	r6, r4, r5, ror #28
 474:	7473635f 	ldrbtvc	r6, [r3], #-863	; 0x35f
 478:	00747261 	rsbseq	r7, r4, r1, ror #4
 47c:	755f7461 	ldrbvc	r7, [pc, #-1121]	; 23 <_start-0x7fdd>
 480:	5f726573 	svcpl	0x00726573
 484:	6576656c 	ldrbvs	r6, [r6, #-1388]!	; 0x56c
 488:	4d50006c 	ldclmi	0, cr0, [r0, #-432]	; 0xfffffe50
 48c:	5341505f 	movtpl	r5, #4191	; 0x105f
 490:	524f5753 	subpl	r5, pc, #21757952	; 0x14c0000
 494:	73630044 	cmnvc	r3, #68	; 0x44
 498:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 49c:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 4a0:	6265722f 	rsbvs	r7, r5, #-268435454	; 0xf0000002
 4a4:	2e746f6f 	cdpcs	15, 7, cr6, cr4, cr15, {3}
 4a8:	4d500063 	ldclmi	0, cr0, [r0, #-396]	; 0xfffffe74
 4ac:	5453525f 	ldrbpl	r5, [r3], #-607	; 0x25f
 4b0:	52575f43 	subspl	r5, r7, #268	; 0x10c
 4b4:	5f474643 	svcpl	0x00474643
 4b8:	4c4c5546 	cfstr64mi	mvdx5, [ip], {70}	; 0x46
 4bc:	5345525f 	movtpl	r5, #21087	; 0x525f
 4c0:	50005445 	andpl	r5, r0, r5, asr #8
 4c4:	44575f4d 	ldrbmi	r5, [r7], #-3917	; 0xf4d
 4c8:	7300474f 	movwvc	r4, #1871	; 0x74f
 4cc:	755f7465 	ldrbvc	r7, [pc, #-1125]	; 6f <_start-0x7f91>
 4d0:	5f726573 	svcpl	0x00726573
 4d4:	6576656c 	ldrbvs	r6, [r6, #-1388]!	; 0x56c
 4d8:	5550006c 	ldrbpl	r0, [r0, #-108]	; 0x6c
 4dc:	00323354 	eorseq	r3, r2, r4, asr r3
 4e0:	525f4d50 	subspl	r4, pc, #80, 26	; 0x1400
 4e4:	00435453 	subeq	r5, r3, r3, asr r4
 4e8:	72737063 	rsbsvc	r7, r3, #99	; 0x63
 4ec:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
 4f0:	7261625f 	rsbvc	r6, r1, #-268435451	; 0xf0000005
 4f4:	72656972 	rsbvc	r6, r5, #1867776	; 0x1c8000
 4f8:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 4fc:	735f7961 	cmpvc	pc, #1589248	; 0x184000
 500:	63006365 	movwvs	r6, #869	; 0x365
 504:	30343173 	eorscc	r3, r4, r3, ror r1
 508:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 50c:	69742f63 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
 510:	2e72656d 	cdpcs	5, 7, cr6, cr2, cr13, {3}
 514:	45470063 	strbmi	r0, [r7, #-99]	; 0x63
 518:	00323354 	eorseq	r3, r2, r4, asr r3
 51c:	6b636974 	blvs	18daaf4 <__bss_end__+0x18d10e4>
 520:	65640073 	strbvs	r0, [r4, #-115]!	; 0x73
 524:	5f79616c 	svcpl	0x0079616c
 528:	6c637963 	stclvs	9, cr7, [r3], #-396	; 0xfffffe74
 52c:	64007365 	strvs	r7, [r0], #-869	; 0x365
 530:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 534:	0073755f 	rsbseq	r7, r3, pc, asr r5
 538:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 53c:	65675f72 	strbvs	r5, [r7, #-3954]!	; 0xf72
 540:	73755f74 	cmnvc	r5, #116, 30	; 0x1d0
 544:	41006365 	tstmi	r0, r5, ror #6
 548:	4d5f5855 	ldclmi	8, cr5, [pc, #-340]	; 3fc <_start-0x7c04>
 54c:	434d5f55 	movtmi	r5, #57173	; 0xdf55
 550:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xf52
 554:	55410047 	strbpl	r0, [r1, #-71]	; 0x47
 558:	554d5f58 	strbpl	r5, [sp, #-3928]	; 0xf58
 55c:	5f4f495f 	svcpl	0x004f495f
 560:	00474552 	subeq	r4, r7, r2, asr r5
 564:	5f585541 	svcpl	0x00585541
 568:	4d5f554d 	cfldr64mi	mvdx5, [pc, #-308]	; 43c <_start-0x7bc4>
 56c:	525f5253 	subspl	r5, pc, #805306373	; 0x30000005
 570:	47004745 	strmi	r4, [r0, -r5, asr #14]
 574:	5f4f4950 	svcpl	0x004f4950
 578:	434e5546 	movtmi	r5, #58694	; 0xe546
 57c:	544c415f 	strbpl	r4, [ip], #-351	; 0x15f
 580:	61750030 	cmnvs	r5, r0, lsr r0
 584:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
 588:	675f6e61 	ldrbvs	r6, [pc, -r1, ror #28]
 58c:	00637465 	rsbeq	r7, r3, r5, ror #8
 590:	5f585541 	svcpl	0x00585541
 594:	435f554d 	cmpmi	pc, #322961408	; 0x13400000
 598:	5f4c544e 	svcpl	0x004c544e
 59c:	00474552 	subeq	r4, r7, r2, asr r5
 5a0:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 5a4:	7361685f 	cmnvc	r1, #6225920	; 0x5f0000
 5a8:	7461645f 	strbtvc	r6, [r1], #-1119	; 0x45f
 5ac:	50470061 	subpl	r0, r7, r1, rrx
 5b0:	465f4f49 	ldrbmi	r4, [pc], -r9, asr #30
 5b4:	5f434e55 	svcpl	0x00434e55
 5b8:	5054554f 	subspl	r5, r4, pc, asr #10
 5bc:	47005455 	smlsdmi	r0, r5, r4, r5
 5c0:	5f4f4950 	svcpl	0x004f4950
 5c4:	434e5546 	movtmi	r5, #58694	; 0xe546
 5c8:	544c415f 	strbpl	r4, [ip], #-351	; 0x15f
 5cc:	50470031 	subpl	r0, r7, r1, lsr r0
 5d0:	465f4f49 	ldrbmi	r4, [pc], -r9, asr #30
 5d4:	5f434e55 	svcpl	0x00434e55
 5d8:	32544c41 	subscc	r4, r4, #16640	; 0x4100
 5dc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 5e0:	55465f4f 	strbpl	r5, [r6, #-3919]	; 0xf4f
 5e4:	415f434e 	cmpmi	pc, lr, asr #6
 5e8:	0033544c 	eorseq	r5, r3, ip, asr #8
 5ec:	4f495047 	svcmi	0x00495047
 5f0:	4e55465f 	mrcmi	6, 2, r4, cr5, cr15, {2}
 5f4:	4c415f43 	mcrrmi	15, 4, r5, r1, cr3
 5f8:	41003554 	tstmi	r0, r4, asr r5
 5fc:	4d5f5855 	ldclmi	8, cr5, [pc, #-340]	; 4b0 <_start-0x7b50>
 600:	45495f55 	strbmi	r5, [r9, #-3925]	; 0xf55
 604:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xf52
 608:	75700047 	ldrbvc	r0, [r0, #-71]!	; 0x47
 60c:	00323374 	eorseq	r3, r2, r4, ror r3
 610:	5f585541 	svcpl	0x00585541
 614:	495f554d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, sl, ip, lr}^	; <UNPREDICTABLE>
 618:	525f5249 	subspl	r5, pc, #-1879048188	; 0x90000004
 61c:	67004745 	strvs	r4, [r0, -r5, asr #14]
 620:	5f6f6970 	svcpl	0x006f6970
 624:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 628:	7500745f 	strvc	r7, [r0, #-1119]	; 0x45f
 62c:	5f747261 	svcpl	0x00747261
 630:	5f6e6163 	svcpl	0x006e6163
 634:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 638:	58554100 	ldmdapl	r5, {r8, lr}^
 63c:	414e455f 	cmpmi	lr, pc, asr r5
 640:	53454c42 	movtpl	r4, #23618	; 0x5c42
 644:	58554100 	ldmdapl	r5, {r8, lr}^
 648:	5152495f 	cmppl	r2, pc, asr r9
 64c:	58554100 	ldmdapl	r5, {r8, lr}^
 650:	5f554d5f 	svcpl	0x00554d5f
 654:	44554142 	ldrbmi	r4, [r5], #-322	; 0x142
 658:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
 65c:	58554100 	ldmdapl	r5, {r8, lr}^
 660:	5f554d5f 	svcpl	0x00554d5f
 664:	54415453 	strbpl	r5, [r1], #-1107	; 0x453
 668:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
 66c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 670:	55465f4f 	strbpl	r5, [r6, #-3919]	; 0xf4f
 674:	415f434e 	cmpmi	pc, lr, asr #6
 678:	0034544c 	eorseq	r5, r4, ip, asr #8
 67c:	6f697067 	svcvs	0x00697067
 680:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
 684:	6e75665f 	mrcvs	6, 3, r6, cr5, cr15, {2}
 688:	6f697463 	svcvs	0x00697463
 68c:	5541006e 	strbpl	r0, [r1, #-110]	; 0x6e
 690:	554d5f58 	strbpl	r5, [sp, #-3928]	; 0xf58
 694:	5243535f 	subpl	r5, r3, #2080374785	; 0x7c000001
 698:	48435441 	stmdami	r3, {r0, r6, sl, ip, lr}^
 69c:	58554100 	ldmdapl	r5, {r8, lr}^
 6a0:	5f554d5f 	svcpl	0x00554d5f
 6a4:	5f52434c 	svcpl	0x0052434c
 6a8:	00474552 	subeq	r4, r7, r2, asr r5
 6ac:	4f495047 	svcmi	0x00495047
 6b0:	4e55465f 	mrcmi	6, 2, r4, cr5, cr15, {2}
 6b4:	4e495f43 	cdpmi	15, 4, cr5, cr9, cr3, {2}
 6b8:	00545550 	subseq	r5, r4, r0, asr r5
 6bc:	5f585541 	svcpl	0x00585541
 6c0:	4c5f554d 	cfldr64mi	mvdx5, [pc], {77}	; 0x4d
 6c4:	525f5253 	subspl	r5, pc, #805306373	; 0x30000005
 6c8:	75004745 	strvc	r4, [r0, #-1861]	; 0x745
 6cc:	5f747261 	svcpl	0x00747261
 6d0:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
 6d4:	7973615f 	ldmdbvc	r3!, {r0, r1, r2, r3, r4, r6, r8, sp, lr}^
 6d8:	6700636e 	strvs	r6, [r0, -lr, ror #6]
 6dc:	32337465 	eorscc	r7, r3, #1694498816	; 0x65000000
 6e0:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 6e4:	6c635f6f 	stclvs	15, cr5, [r3], #-444	; 0xfffffe44
 6e8:	67003072 	smlsdxvs	r0, r2, r0, r3
 6ec:	5f6f6970 	svcpl	0x006f6970
 6f0:	30746573 	rsbscc	r6, r4, r3, ror r5
 6f4:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 6f8:	73665f6f 	cmnvc	r6, #444	; 0x1bc
 6fc:	00306c65 	eorseq	r6, r0, r5, ror #24
 700:	4c435047 	mcrrmi	0, 4, r5, r3, cr7
 704:	67003152 	smlsdvs	r0, r2, r1, r3
 708:	5f6f6970 	svcpl	0x006f6970
 70c:	5f746573 	svcpl	0x00746573
 710:	47006e6f 	strmi	r6, [r0, -pc, ror #28]
 714:	56454c50 			; <UNDEFINED> instruction: 0x56454c50
 718:	50470031 	subpl	r0, r7, r1, lsr r0
 71c:	31544553 	cmpcc	r4, r3, asr r5
 720:	43504700 	cmpmi	r0, #0, 14
 724:	0030524c 	eorseq	r5, r0, ip, asr #4
 728:	45535047 	ldrbmi	r5, [r3, #-71]	; 0x47
 72c:	67003054 	smlsdvs	r0, r4, r0, r3
 730:	5f6f6970 	svcpl	0x006f6970
 734:	5f746573 	svcpl	0x00746573
 738:	0066666f 	rsbeq	r6, r6, pc, ror #12
 73c:	53465047 	movtpl	r5, #24647	; 0x6047
 740:	00314c45 	eorseq	r4, r1, r5, asr #24
 744:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 748:	67657200 	strbvs	r7, [r5, -r0, lsl #4]!
 74c:	6c65735f 	stclvs	3, cr7, [r5], #-380	; 0xfffffe84
 750:	00746365 	rsbseq	r6, r4, r5, ror #6
 754:	6d746962 	ldclvs	9, cr6, [r4, #-392]!	; 0xfffffe78
 758:	006b7361 	rsbeq	r7, fp, r1, ror #6
 75c:	6f697067 	svcvs	0x00697067
 760:	6700632e 	strvs	r6, [r0, -lr, lsr #6]
 764:	5f6f6970 	svcpl	0x006f6970
 768:	00676572 	rsbeq	r6, r7, r2, ror r5
 76c:	53465047 	movtpl	r5, #24647	; 0x6047
 770:	00304c45 	eorseq	r4, r0, r5, asr #24
 774:	454c5047 	strbmi	r5, [ip, #-71]	; 0x47
 778:	47003056 	smlsdmi	r0, r6, r0, r3
 77c:	45534650 	ldrbmi	r4, [r3, #-1616]	; 0x650
 780:	4700324c 	strmi	r3, [r0, -ip, asr #4]
 784:	45534650 	ldrbmi	r4, [r3, #-1616]	; 0x650
 788:	4700334c 	strmi	r3, [r0, -ip, asr #6]
 78c:	45534650 	ldrbmi	r4, [r3, #-1616]	; 0x650
 790:	4700344c 	strmi	r3, [r0, -ip, asr #8]
 794:	45534650 	ldrbmi	r4, [r3, #-1616]	; 0x650
 798:	6900354c 	stmdbvs	r0, {r2, r3, r6, r8, sl, ip, sp}
 79c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 7a0:	5f6c616e 	svcpl	0x006c616e
 7a4:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 7a8:	00726168 	rsbseq	r6, r2, r8, ror #2
 7ac:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 7b0:	7475702f 	ldrbtvc	r7, [r5], #-47	; 0x2f
 7b4:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 7b8:	Address 0x00000000000007b8 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	00008010 	andeq	r8, r0, r0, lsl r0
  1c:	00000084 	andeq	r0, r0, r4, lsl #1
  20:	84140e42 	ldrhi	r0, [r4], #-3650	; 0xe42
  24:	86048505 	strhi	r8, [r4], -r5, lsl #10
  28:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
  2c:	300e4201 	andcc	r4, lr, r1, lsl #4
  30:	0000000c 	andeq	r0, r0, ip
  34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  38:	7c020001 	stcvc	0, cr0, [r2], {1}
  3c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	00000030 	andeq	r0, r0, r0, lsr r0
  48:	00008094 	muleq	r0, r4, r0
  4c:	00000158 	andeq	r0, r0, r8, asr r1
  50:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
  54:	86058506 	strhi	r8, [r5], -r6, lsl #10
  58:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
  5c:	00018e02 	andeq	r8, r1, r2, lsl #28
  60:	00000020 	andeq	r0, r0, r0, lsr #32
  64:	00000030 	andeq	r0, r0, r0, lsr r0
  68:	000081ec 	andeq	r8, r0, ip, ror #3
  6c:	000001c8 	andeq	r0, r0, r8, asr #3
  70:	83200e42 	teqhi	r0, #1056	; 0x420
  74:	85078408 	strhi	r8, [r7, #-1032]	; 0x408
  78:	87058606 	strhi	r8, [r5, -r6, lsl #12]
  7c:	89038804 	stmdbhi	r3, {r2, fp, pc}
  80:	00018e02 	andeq	r8, r1, r2, lsl #28
  84:	00000020 	andeq	r0, r0, r0, lsr #32
  88:	00000030 	andeq	r0, r0, r0, lsr r0
  8c:	000083b4 			; <UNDEFINED> instruction: 0x000083b4
  90:	0000008c 	andeq	r0, r0, ip, lsl #1
  94:	84200e42 	strthi	r0, [r0], #-3650	; 0xe42
  98:	86078508 	strhi	r8, [r7], -r8, lsl #10
  9c:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
  a0:	8a038904 	bhi	e24b8 <__bss_end__+0xd8aa8>
  a4:	00018e02 	andeq	r8, r1, r2, lsl #28
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	00000030 	andeq	r0, r0, r0, lsr r0
  b0:	00008440 	andeq	r8, r0, r0, asr #8
  b4:	00000078 	andeq	r0, r0, r8, ror r0
  b8:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
  bc:	86058506 	strhi	r8, [r5], -r6, lsl #10
  c0:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
  c4:	00018e02 	andeq	r8, r1, r2, lsl #28
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	00000030 	andeq	r0, r0, r0, lsr r0
  d0:	000084b8 			; <UNDEFINED> instruction: 0x000084b8
  d4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
  d8:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
  dc:	86058506 	strhi	r8, [r5], -r6, lsl #10
  e0:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
  e4:	00018e02 	andeq	r8, r1, r2, lsl #28
  e8:	00000014 	andeq	r0, r0, r4, lsl r0
  ec:	00000030 	andeq	r0, r0, r0, lsr r0
  f0:	00008568 	andeq	r8, r0, r8, ror #10
  f4:	00000038 	andeq	r0, r0, r8, lsr r0
  f8:	83080e42 	movwhi	r0, #36418	; 0x8e42
  fc:	00018e02 	andeq	r8, r1, r2, lsl #28
 100:	00000018 	andeq	r0, r0, r8, lsl r0
 104:	00000030 	andeq	r0, r0, r0, lsr r0
 108:	000085a0 	andeq	r8, r0, r0, lsr #11
 10c:	0000002c 	andeq	r0, r0, ip, lsr #32
 110:	83100e42 	tsthi	r0, #1056	; 0x420
 114:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 118:	00018e02 	andeq	r8, r1, r2, lsl #28
 11c:	00000024 	andeq	r0, r0, r4, lsr #32
 120:	00000030 	andeq	r0, r0, r0, lsr r0
 124:	000085cc 	andeq	r8, r0, ip, asr #11
 128:	00000080 	andeq	r0, r0, r0, lsl #1
 12c:	810c0e42 	tsthi	ip, r2, asr #28
 130:	83028203 	movwhi	r8, #8707	; 0x2203
 134:	180e4201 	stmdane	lr, {r0, r9, lr}
 138:	05850684 	streq	r0, [r5, #1668]	; 0x684
 13c:	0e42048e 	cdpeq	4, 4, cr0, cr2, cr14, {4}
 140:	000003e8 	andeq	r0, r0, r8, ror #7
 144:	00000014 	andeq	r0, r0, r4, lsl r0
 148:	00000030 	andeq	r0, r0, r0, lsr r0
 14c:	0000864c 	andeq	r8, r0, ip, asr #12
 150:	00000048 	andeq	r0, r0, r8, asr #32
 154:	8e040e42 	cdphi	14, 0, cr0, cr4, cr2, {2}
 158:	100e4201 	andne	r4, lr, r1, lsl #4
 15c:	0000000c 	andeq	r0, r0, ip
 160:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 164:	7c020001 	stcvc	0, cr0, [r2], {1}
 168:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 16c:	00000024 	andeq	r0, r0, r4, lsr #32
 170:	0000015c 	andeq	r0, r0, ip, asr r1
 174:	00008694 	muleq	r0, r4, r6
 178:	00000058 	andeq	r0, r0, r8, asr r0
 17c:	80100e42 	andshi	r0, r0, r2, asr #28
 180:	82038104 	andhi	r8, r3, #4, 2
 184:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
 188:	07841c0e 	streq	r1, [r4, lr, lsl #24]
 18c:	058e0685 	streq	r0, [lr, #1669]	; 0x685
 190:	00280e42 	eoreq	r0, r8, r2, asr #28
 194:	0000000c 	andeq	r0, r0, ip
 198:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 19c:	7c020001 	stcvc	0, cr0, [r2], {1}
 1a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1a4:	00000018 	andeq	r0, r0, r8, lsl r0
 1a8:	00000194 	muleq	r0, r4, r1
 1ac:	000086ec 	andeq	r8, r0, ip, ror #13
 1b0:	00000034 	andeq	r0, r0, r4, lsr r0
 1b4:	83100e42 	tsthi	r0, #1056	; 0x420
 1b8:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 1bc:	00018e02 	andeq	r8, r1, r2, lsl #28
 1c0:	0000000c 	andeq	r0, r0, ip
 1c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1c8:	7c020001 	stcvc	0, cr0, [r2], {1}
 1cc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1d0:	0000000c 	andeq	r0, r0, ip
 1d4:	000001c0 	andeq	r0, r0, r0, asr #3
 1d8:	00008720 	andeq	r8, r0, r0, lsr #14
 1dc:	00000014 	andeq	r0, r0, r4, lsl r0
 1e0:	0000000c 	andeq	r0, r0, ip
 1e4:	000001c0 	andeq	r0, r0, r0, asr #3
 1e8:	00008734 	andeq	r8, r0, r4, lsr r7
 1ec:	0000002c 	andeq	r0, r0, ip, lsr #32
 1f0:	0000000c 	andeq	r0, r0, ip
 1f4:	000001c0 	andeq	r0, r0, r0, asr #3
 1f8:	00008760 	andeq	r8, r0, r0, ror #14
 1fc:	00000040 	andeq	r0, r0, r0, asr #32
 200:	00000020 	andeq	r0, r0, r0, lsr #32
 204:	000001c0 	andeq	r0, r0, r0, asr #3
 208:	000087a0 	andeq	r8, r0, r0, lsr #15
 20c:	00000198 	muleq	r0, r8, r1
 210:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 214:	86058506 	strhi	r8, [r5], -r6, lsl #10
 218:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 21c:	42018e02 	andmi	r8, r1, #2, 28
 220:	0000580e 	andeq	r5, r0, lr, lsl #16
 224:	00000014 	andeq	r0, r0, r4, lsl r0
 228:	000001c0 	andeq	r0, r0, r0, asr #3
 22c:	00008938 	andeq	r8, r0, r8, lsr r9
 230:	00000050 	andeq	r0, r0, r0, asr r0
 234:	83080e42 	movwhi	r0, #36418	; 0x8e42
 238:	00018e02 	andeq	r8, r1, r2, lsl #28
 23c:	00000028 	andeq	r0, r0, r8, lsr #32
 240:	000001c0 	andeq	r0, r0, r0, asr #3
 244:	00008988 	andeq	r8, r0, r8, lsl #19
 248:	00000288 	andeq	r0, r0, r8, lsl #5
 24c:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
 250:	86088509 	strhi	r8, [r8], -r9, lsl #10
 254:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
 258:	8a048905 	bhi	122674 <__bss_end__+0x118c64>
 25c:	8e028b03 	vmlahi.f64	d8, d2, d3
 260:	b00e4201 	andlt	r4, lr, r1, lsl #4
 264:	00000001 	andeq	r0, r0, r1
 268:	0000000c 	andeq	r0, r0, ip
 26c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 270:	7c020001 	stcvc	0, cr0, [r2], {1}
 274:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 278:	0000000c 	andeq	r0, r0, ip
 27c:	00000268 	andeq	r0, r0, r8, ror #4
 280:	00008c10 	andeq	r8, r0, r0, lsl ip
 284:	00000010 	andeq	r0, r0, r0, lsl r0
 288:	0000000c 	andeq	r0, r0, ip
 28c:	00000268 	andeq	r0, r0, r8, ror #4
 290:	00008c20 	andeq	r8, r0, r0, lsr #24
 294:	00000010 	andeq	r0, r0, r0, lsl r0
 298:	0000000c 	andeq	r0, r0, ip
 29c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2a0:	7c020001 	stcvc	0, cr0, [r2], {1}
 2a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2a8:	00000014 	andeq	r0, r0, r4, lsl r0
 2ac:	00000298 	muleq	r0, r8, r2
 2b0:	00008c30 	andeq	r8, r0, r0, lsr ip
 2b4:	00000028 	andeq	r0, r0, r8, lsr #32
 2b8:	83080e42 	movwhi	r0, #36418	; 0x8e42
 2bc:	00018e02 	andeq	r8, r1, r2, lsl #28
 2c0:	0000000c 	andeq	r0, r0, ip
 2c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2c8:	7c020001 	stcvc	0, cr0, [r2], {1}
 2cc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2d0:	00000014 	andeq	r0, r0, r4, lsl r0
 2d4:	000002c0 	andeq	r0, r0, r0, asr #5
 2d8:	00008c58 	andeq	r8, r0, r8, asr ip
 2dc:	00000034 	andeq	r0, r0, r4, lsr r0
 2e0:	83080e42 	movwhi	r0, #36418	; 0x8e42
 2e4:	00018e02 	andeq	r8, r1, r2, lsl #28
 2e8:	0000000c 	andeq	r0, r0, ip
 2ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2f0:	7c020001 	stcvc	0, cr0, [r2], {1}
 2f4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2f8:	0000000c 	andeq	r0, r0, ip
 2fc:	000002e8 	andeq	r0, r0, r8, ror #5
 300:	00008c8c 	andeq	r8, r0, ip, lsl #25
 304:	00000018 	andeq	r0, r0, r8, lsl r0
 308:	0000000c 	andeq	r0, r0, ip
 30c:	000002e8 	andeq	r0, r0, r8, ror #5
 310:	00008ca4 	andeq	r8, r0, r4, lsr #25
 314:	00000014 	andeq	r0, r0, r4, lsl r0
 318:	00000014 	andeq	r0, r0, r4, lsl r0
 31c:	000002e8 	andeq	r0, r0, r8, ror #5
 320:	00008cb8 			; <UNDEFINED> instruction: 0x00008cb8
 324:	00000048 	andeq	r0, r0, r8, asr #32
 328:	83080e42 	movwhi	r0, #36418	; 0x8e42
 32c:	00018e02 	andeq	r8, r1, r2, lsl #28
 330:	0000000c 	andeq	r0, r0, ip
 334:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 338:	7c020001 	stcvc	0, cr0, [r2], {1}
 33c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 340:	0000000c 	andeq	r0, r0, ip
 344:	00000330 	andeq	r0, r0, r0, lsr r3
 348:	00008d00 	andeq	r8, r0, r0, lsl #26
 34c:	0000001c 	andeq	r0, r0, ip, lsl r0
 350:	00000014 	andeq	r0, r0, r4, lsl r0
 354:	00000330 	andeq	r0, r0, r0, lsr r3
 358:	00008d1c 	andeq	r8, r0, ip, lsl sp
 35c:	00000014 	andeq	r0, r0, r4, lsl r0
 360:	83080e42 	movwhi	r0, #36418	; 0x8e42
 364:	00018e02 	andeq	r8, r1, r2, lsl #28
 368:	00000014 	andeq	r0, r0, r4, lsl r0
 36c:	00000330 	andeq	r0, r0, r0, lsr r3
 370:	00008d30 	andeq	r8, r0, r0, lsr sp
 374:	0000001c 	andeq	r0, r0, ip, lsl r0
 378:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 37c:	00018e02 	andeq	r8, r1, r2, lsl #28
 380:	00000018 	andeq	r0, r0, r8, lsl r0
 384:	00000330 	andeq	r0, r0, r0, lsr r3
 388:	00008d4c 	andeq	r8, r0, ip, asr #26
 38c:	00000024 	andeq	r0, r0, r4, lsr #32
 390:	83100e42 	tsthi	r0, #1056	; 0x420
 394:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 398:	00018e02 	andeq	r8, r1, r2, lsl #28
 39c:	00000014 	andeq	r0, r0, r4, lsl r0
 3a0:	00000330 	andeq	r0, r0, r0, lsr r3
 3a4:	00008d70 	andeq	r8, r0, r0, ror sp
 3a8:	00000014 	andeq	r0, r0, r4, lsl r0
 3ac:	83080e42 	movwhi	r0, #36418	; 0x8e42
 3b0:	00018e02 	andeq	r8, r1, r2, lsl #28
 3b4:	00000014 	andeq	r0, r0, r4, lsl r0
 3b8:	00000330 	andeq	r0, r0, r0, lsr r3
 3bc:	00008d84 	andeq	r8, r0, r4, lsl #27
 3c0:	00000014 	andeq	r0, r0, r4, lsl r0
 3c4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 3c8:	00018e02 	andeq	r8, r1, r2, lsl #28
 3cc:	0000000c 	andeq	r0, r0, ip
 3d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3d4:	7c020001 	stcvc	0, cr0, [r2], {1}
 3d8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3dc:	00000014 	andeq	r0, r0, r4, lsl r0
 3e0:	000003cc 	andeq	r0, r0, ip, asr #7
 3e4:	00008dfc 	strdeq	r8, [r0], -ip
 3e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3ec:	83080e42 	movwhi	r0, #36418	; 0x8e42
 3f0:	00018e02 	andeq	r8, r1, r2, lsl #28
 3f4:	00000018 	andeq	r0, r0, r8, lsl r0
 3f8:	000003cc 	andeq	r0, r0, ip, asr #7
 3fc:	00008e18 	andeq	r8, r0, r8, lsl lr
 400:	0000009c 	muleq	r0, ip, r0
 404:	83100e42 	tsthi	r0, #1056	; 0x420
 408:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 40c:	00018e02 	andeq	r8, r1, r2, lsl #28
 410:	00000014 	andeq	r0, r0, r4, lsl r0
 414:	000003cc 	andeq	r0, r0, ip, asr #7
 418:	00008eb4 			; <UNDEFINED> instruction: 0x00008eb4
 41c:	00000028 	andeq	r0, r0, r8, lsr #32
 420:	83080e42 	movwhi	r0, #36418	; 0x8e42
 424:	00018e02 	andeq	r8, r1, r2, lsl #28
 428:	00000014 	andeq	r0, r0, r4, lsl r0
 42c:	000003cc 	andeq	r0, r0, ip, asr #7
 430:	00008edc 	ldrdeq	r8, [r0], -ip
 434:	0000001c 	andeq	r0, r0, ip, lsl r0
 438:	83080e42 	movwhi	r0, #36418	; 0x8e42
 43c:	00018e02 	andeq	r8, r1, r2, lsl #28
 440:	00000014 	andeq	r0, r0, r4, lsl r0
 444:	000003cc 	andeq	r0, r0, ip, asr #7
 448:	00008ef8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
 44c:	0000002c 	andeq	r0, r0, ip, lsr #32
 450:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 454:	00018e02 	andeq	r8, r1, r2, lsl #28
 458:	00000014 	andeq	r0, r0, r4, lsl r0
 45c:	000003cc 	andeq	r0, r0, ip, asr #7
 460:	00008f24 	andeq	r8, r0, r4, lsr #30
 464:	0000000c 	andeq	r0, r0, ip
 468:	83080e42 	movwhi	r0, #36418	; 0x8e42
 46c:	00018e02 	andeq	r8, r1, r2, lsl #28
 470:	00000014 	andeq	r0, r0, r4, lsl r0
 474:	000003cc 	andeq	r0, r0, ip, asr #7
 478:	00008f30 	andeq	r8, r0, r0, lsr pc
 47c:	00000020 	andeq	r0, r0, r0, lsr #32
 480:	83080e42 	movwhi	r0, #36418	; 0x8e42
 484:	00018e02 	andeq	r8, r1, r2, lsl #28
 488:	0000000c 	andeq	r0, r0, ip
 48c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 490:	7c020001 	stcvc	0, cr0, [r2], {1}
 494:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 498:	00000018 	andeq	r0, r0, r8, lsl r0
 49c:	00000488 	andeq	r0, r0, r8, lsl #9
 4a0:	00008f50 	andeq	r8, r0, r0, asr pc
 4a4:	000000d4 	ldrdeq	r0, [r0], -r4
 4a8:	83100e42 	tsthi	r0, #1056	; 0x420
 4ac:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 4b0:	00018e02 	andeq	r8, r1, r2, lsl #28
 4b4:	00000014 	andeq	r0, r0, r4, lsl r0
 4b8:	00000488 	andeq	r0, r0, r8, lsl #9
 4bc:	00009024 	andeq	r9, r0, r4, lsr #32
 4c0:	00000038 	andeq	r0, r0, r8, lsr r0
 4c4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 4c8:	00018e02 	andeq	r8, r1, r2, lsl #28
 4cc:	00000014 	andeq	r0, r0, r4, lsl r0
 4d0:	00000488 	andeq	r0, r0, r8, lsl #9
 4d4:	0000905c 	andeq	r9, r0, ip, asr r0
 4d8:	00000038 	andeq	r0, r0, r8, lsr r0
 4dc:	83080e42 	movwhi	r0, #36418	; 0x8e42
 4e0:	00018e02 	andeq	r8, r1, r2, lsl #28
 4e4:	00000018 	andeq	r0, r0, r8, lsl r0
 4e8:	00000488 	andeq	r0, r0, r8, lsl #9
 4ec:	00009094 	muleq	r0, r4, r0
 4f0:	000000cc 	andeq	r0, r0, ip, asr #1
 4f4:	83100e42 	tsthi	r0, #1056	; 0x420
 4f8:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 4fc:	00018e02 	andeq	r8, r1, r2, lsl #28
 500:	00000014 	andeq	r0, r0, r4, lsl r0
 504:	00000488 	andeq	r0, r0, r8, lsl #9
 508:	00009160 	andeq	r9, r0, r0, ror #2
 50c:	0000004c 	andeq	r0, r0, ip, asr #32
 510:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 514:	00018e02 	andeq	r8, r1, r2, lsl #28
 518:	00000014 	andeq	r0, r0, r4, lsl r0
 51c:	00000488 	andeq	r0, r0, r8, lsl #9
 520:	000091ac 	andeq	r9, r0, ip, lsr #3
 524:	00000078 	andeq	r0, r0, r8, ror r0
 528:	83080e42 	movwhi	r0, #36418	; 0x8e42
 52c:	00018e02 	andeq	r8, r1, r2, lsl #28
 530:	00000018 	andeq	r0, r0, r8, lsl r0
 534:	00000488 	andeq	r0, r0, r8, lsl #9
 538:	00009224 	andeq	r9, r0, r4, lsr #4
 53c:	000000d8 	ldrdeq	r0, [r0], -r8
 540:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 544:	86038504 	strhi	r8, [r3], -r4, lsl #10
 548:	00018e02 	andeq	r8, r1, r2, lsl #28
 54c:	0000000c 	andeq	r0, r0, ip
 550:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 554:	7c020001 	stcvc	0, cr0, [r2], {1}
 558:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 55c:	00000014 	andeq	r0, r0, r4, lsl r0
 560:	0000054c 	andeq	r0, r0, ip, asr #10
 564:	000092fc 	strdeq	r9, [r0], -ip
 568:	00000014 	andeq	r0, r0, r4, lsl r0
 56c:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 570:	00018e02 	andeq	r8, r1, r2, lsl #28

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	00008c8c 	andeq	r8, r0, ip, lsl #25
   4:	00008d00 	andeq	r8, r0, r0, lsl #26
	...
