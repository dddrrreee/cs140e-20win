
1-getc-test.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e3a0d302 	mov	sp, #134217728	; 0x8000000
    8004:	e3a0b000 	mov	fp, #0
    8008:	eb000325 	bl	8ca4 <_cstart>
    800c:	eb00033c 	bl	8d04 <rpi_reboot>

00008010 <notmain>:
//      1. if we make timing mistakes can start missing input.
//      2. also we have to be listening when the input arrives.
#include "rpi.h"
#include "sw-uart.h"

void notmain(void) {
    8010:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    8014:	e24dd01c 	sub	sp, sp, #28
    uart_init();
    8018:	eb000391 	bl	8e64 <uart_init>
    enable_cache();
    801c:	eb00030e 	bl	8c5c <enable_cache>

    // use pin 20 for tx, 21 for rx
    sw_uart_t u = sw_uart_init(20,21, 115200);
    8020:	e59f309c 	ldr	r3, [pc, #156]	; 80c4 <notmain+0xb4>
    8024:	e58d3000 	str	r3, [sp]
    8028:	e28d000c 	add	r0, sp, #12
    802c:	e3a01014 	mov	r1, #20
    8030:	e3a02015 	mov	r2, #21
    8034:	e59f308c 	ldr	r3, [pc, #140]	; 80c8 <notmain+0xb8>
    8038:	eb000131 	bl	8504 <sw_uart_init_helper>

    // just loop asking for one character.  enough delay that should work fine.
    for(int i = 0; i < 4; i++) {
    803c:	e3a04000 	mov	r4, #0
        printk("%d: asking to print on sw-uart\n", i);
    8040:	e59f7084 	ldr	r7, [pc, #132]	; 80cc <notmain+0xbc>

        unsigned timeout = 5;
        sw_uart_printk(&u, "%d: enter a character (timeout=%dsec): ", i,timeout);
    8044:	e59f6084 	ldr	r6, [pc, #132]	; 80d0 <notmain+0xc0>
        int res = sw_uart_getc_timeout(&u, timeout*1000*1000);
    8048:	e59f5084 	ldr	r5, [pc, #132]	; 80d4 <notmain+0xc4>
        if(res < 0)
            printk("timeout: res=%d!\n", res);
        else
            printk("\nSW-UART: got char <%c> (intval=%d, bits=%b)\n",
    804c:	e59f8084 	ldr	r8, [pc, #132]	; 80d8 <notmain+0xc8>

        unsigned timeout = 5;
        sw_uart_printk(&u, "%d: enter a character (timeout=%dsec): ", i,timeout);
        int res = sw_uart_getc_timeout(&u, timeout*1000*1000);
        if(res < 0)
            printk("timeout: res=%d!\n", res);
    8050:	e59f9084 	ldr	r9, [pc, #132]	; 80dc <notmain+0xcc>

    // use pin 20 for tx, 21 for rx
    sw_uart_t u = sw_uart_init(20,21, 115200);

    // just loop asking for one character.  enough delay that should work fine.
    for(int i = 0; i < 4; i++) {
    8054:	ea000017 	b	80b8 <notmain+0xa8>
        printk("%d: asking to print on sw-uart\n", i);
    8058:	e1a00007 	mov	r0, r7
    805c:	e1a01004 	mov	r1, r4
    8060:	eb00019e 	bl	86e0 <printk>

        unsigned timeout = 5;
        sw_uart_printk(&u, "%d: enter a character (timeout=%dsec): ", i,timeout);
    8064:	e28d000c 	add	r0, sp, #12
    8068:	e1a01006 	mov	r1, r6
    806c:	e1a02004 	mov	r2, r4
    8070:	e3a03005 	mov	r3, #5
    8074:	eb000167 	bl	8618 <sw_uart_printk>
        int res = sw_uart_getc_timeout(&u, timeout*1000*1000);
    8078:	e28d000c 	add	r0, sp, #12
    807c:	e1a01005 	mov	r1, r5
    8080:	eb00006c 	bl	8238 <sw_uart_getc_timeout>
        if(res < 0)
    8084:	e2503000 	subs	r3, r0, #0
    8088:	aa000003 	bge	809c <notmain+0x8c>
            printk("timeout: res=%d!\n", res);
    808c:	e1a00009 	mov	r0, r9
    8090:	e1a01003 	mov	r1, r3
    8094:	eb000191 	bl	86e0 <printk>
    8098:	ea000003 	b	80ac <notmain+0x9c>
        else
            printk("\nSW-UART: got char <%c> (intval=%d, bits=%b)\n",
    809c:	e1a00008 	mov	r0, r8
    80a0:	e1a01003 	mov	r1, r3
    80a4:	e1a02003 	mov	r2, r3
    80a8:	eb00018c 	bl	86e0 <printk>
                            res, res, res);
        delay_ms(2000);
    80ac:	e3a00e7d 	mov	r0, #2000	; 0x7d0
    80b0:	eb000341 	bl	8dbc <delay_ms>

    // use pin 20 for tx, 21 for rx
    sw_uart_t u = sw_uart_init(20,21, 115200);

    // just loop asking for one character.  enough delay that should work fine.
    for(int i = 0; i < 4; i++) {
    80b4:	e2844001 	add	r4, r4, #1
    80b8:	e3540003 	cmp	r4, #3
    80bc:	daffffe5 	ble	8058 <notmain+0x48>
        else
            printk("\nSW-UART: got char <%c> (intval=%d, bits=%b)\n",
                            res, res, res);
        delay_ms(2000);
    }
    clean_reboot();
    80c0:	eb0002ed 	bl	8c7c <clean_reboot>
    80c4:	000017bc 			; <UNDEFINED> instruction: 0x000017bc
    80c8:	0001c200 	andeq	ip, r1, r0, lsl #4
    80cc:	000093d4 	ldrdeq	r9, [r0], -r4
    80d0:	000093f4 	strdeq	r9, [r0], -r4
    80d4:	004c4b40 	subeq	r4, ip, r0, asr #22
    80d8:	00009430 	andeq	r9, r0, r0, lsr r4
    80dc:	0000941c 	andeq	r9, r0, ip, lsl r4

000080e0 <sw_uart_putc>:
 */ 
#include "rpi.h"
#include "sw-uart.h"
#include "cycle-util.h"

void sw_uart_putc(sw_uart_t *uart, unsigned char c) {
    80e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    80e4:	e1a07001 	mov	r7, r1
    // use local variables to minimize any loads or stores
    int tx = uart->tx;
    80e8:	e5d06000 	ldrb	r6, [r0]
    uint32_t n = uart->cycle_per_bit,
    80ec:	e5905008 	ldr	r5, [r0, #8]
             u = n,
             s = cycle_cnt_read();
    80f0:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
	
	// get start conditions
	unsigned end = n;
	unsigned start = cycle_cnt_read();
    80f4:	ee1f4f3c 	mrc	15, 0, r4, cr15, cr12, {1}
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    80f8:	e1a00006 	mov	r0, r6
    80fc:	e3a01000 	mov	r1, #0
    8100:	eb00043c 	bl	91f8 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    8104:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8108:	e0643003 	rsb	r3, r4, r3
    810c:	e1550003 	cmp	r5, r3
    8110:	8afffffb 	bhi	8104 <sw_uart_putc+0x24>

	// lower line (line idling)
	write_cyc_until(tx, 0, start, end);
	end += n; 
    8114:	e1a08085 	lsl	r8, r5, #1
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8118:	e1a00006 	mov	r0, r6
    811c:	e2071001 	and	r1, r7, #1
    8120:	eb000434 	bl	91f8 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    8124:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8128:	e0643003 	rsb	r3, r4, r3
    812c:	e1580003 	cmp	r8, r3
    8130:	8afffffb 	bhi	8124 <sw_uart_putc+0x44>
	write_cyc_until(tx, c & 1, start, end);
	end += n; 
    8134:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8138:	e1a00006 	mov	r0, r6
    813c:	e2071002 	and	r1, r7, #2
    8140:	eb00042c 	bl	91f8 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    8144:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8148:	e0643003 	rsb	r3, r4, r3
    814c:	e1580003 	cmp	r8, r3
    8150:	8afffffb 	bhi	8144 <sw_uart_putc+0x64>
	write_cyc_until(tx, c & 2, start, end);
	end += n; 
    8154:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8158:	e1a00006 	mov	r0, r6
    815c:	e2071004 	and	r1, r7, #4
    8160:	eb000424 	bl	91f8 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    8164:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8168:	e0643003 	rsb	r3, r4, r3
    816c:	e1580003 	cmp	r8, r3
    8170:	8afffffb 	bhi	8164 <sw_uart_putc+0x84>
	write_cyc_until(tx, c & 4, start, end);
	end += n; 
    8174:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8178:	e1a00006 	mov	r0, r6
    817c:	e2071008 	and	r1, r7, #8
    8180:	eb00041c 	bl	91f8 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    8184:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8188:	e0643003 	rsb	r3, r4, r3
    818c:	e1580003 	cmp	r8, r3
    8190:	8afffffb 	bhi	8184 <sw_uart_putc+0xa4>
	write_cyc_until(tx, c & 8, start, end);
	end += n; 
    8194:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8198:	e1a00006 	mov	r0, r6
    819c:	e2071010 	and	r1, r7, #16
    81a0:	eb000414 	bl	91f8 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    81a4:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    81a8:	e0643003 	rsb	r3, r4, r3
    81ac:	e1580003 	cmp	r8, r3
    81b0:	8afffffb 	bhi	81a4 <sw_uart_putc+0xc4>
	write_cyc_until(tx, c & 16, start, end);
	end += n; 
    81b4:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    81b8:	e1a00006 	mov	r0, r6
    81bc:	e2071020 	and	r1, r7, #32
    81c0:	eb00040c 	bl	91f8 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    81c4:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    81c8:	e0643003 	rsb	r3, r4, r3
    81cc:	e1580003 	cmp	r8, r3
    81d0:	8afffffb 	bhi	81c4 <sw_uart_putc+0xe4>
	write_cyc_until(tx, c & 32, start, end);
	end += n; 
    81d4:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    81d8:	e1a00006 	mov	r0, r6
    81dc:	e2071040 	and	r1, r7, #64	; 0x40
    81e0:	eb000404 	bl	91f8 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    81e4:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    81e8:	e0643003 	rsb	r3, r4, r3
    81ec:	e1580003 	cmp	r8, r3
    81f0:	8afffffb 	bhi	81e4 <sw_uart_putc+0x104>
	write_cyc_until(tx, c & 64, start, end);
	end += n; 
    81f4:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    81f8:	e1a00006 	mov	r0, r6
    81fc:	e2071080 	and	r1, r7, #128	; 0x80
    8200:	eb0003fc 	bl	91f8 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    8204:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8208:	e0643003 	rsb	r3, r4, r3
    820c:	e1580003 	cmp	r8, r3
    8210:	8afffffb 	bhi	8204 <sw_uart_putc+0x124>
	write_cyc_until(tx, c & 128, start, end);
	end += n; 
    8214:	e0885005 	add	r5, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8218:	e1a00006 	mov	r0, r6
    821c:	e3a01001 	mov	r1, #1
    8220:	eb0003f4 	bl	91f8 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    8224:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8228:	e0643003 	rsb	r3, r4, r3
    822c:	e1550003 	cmp	r5, r3
    8230:	8afffffb 	bhi	8224 <sw_uart_putc+0x144>
	write_cyc_until(tx, 1, start, end);
}
    8234:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008238 <sw_uart_getc_timeout>:
}

// do this second: you can type in pi-cat to send stuff.
//      EASY BUG: if you are reading input, but you do not get here in 
//      time it will disappear.
int sw_uart_getc_timeout(sw_uart_t *uart, int timeout_usec) {
    8238:	e92d43f8 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
    823c:	e1a09000 	mov	r9, r0
   int rx = uart->rx;
    8240:	e5d07001 	ldrb	r7, [r0, #1]
    8244:	e1a05007 	mov	r5, r7

    // get start bit: timeout_usec=0 implies you return right away.
    while(!wait_until_usec(rx, 0, timeout_usec))
    8248:	e1a06001 	mov	r6, r1
	write_cyc_until(tx, 1, start, end);
}

// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    824c:	eb0002c5 	bl	8d68 <timer_get_usec_raw>
    8250:	e1a04000 	mov	r4, r0
    while(1) {
        if(gpio_read(rx) == v)
    8254:	e1a00005 	mov	r0, r5
    8258:	eb0003d3 	bl	91ac <gpio_read>
    825c:	e3500000 	cmp	r0, #0
    8260:	0a000005 	beq	827c <sw_uart_getc_timeout+0x44>
            return 1;
        if(timer_get_usec_raw() - start > timeout_usec)
    8264:	eb0002bf 	bl	8d68 <timer_get_usec_raw>
    8268:	e0640000 	rsb	r0, r4, r0
    826c:	e1560000 	cmp	r6, r0
    8270:	2afffff7 	bcs	8254 <sw_uart_getc_timeout+0x1c>
            return 0;
    8274:	e3a03000 	mov	r3, #0
    8278:	ea000000 	b	8280 <sw_uart_getc_timeout+0x48>
// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    while(1) {
        if(gpio_read(rx) == v)
            return 1;
    827c:	e3a03001 	mov	r3, #1
//      time it will disappear.
int sw_uart_getc_timeout(sw_uart_t *uart, int timeout_usec) {
   int rx = uart->rx;

    // get start bit: timeout_usec=0 implies you return right away.
    while(!wait_until_usec(rx, 0, timeout_usec))
    8280:	e3530000 	cmp	r3, #0
    8284:	0a000059 	beq	83f0 <sw_uart_getc_timeout+0x1b8>
        return -1;

    // do this first so we have a tighter bound (maybe)
    unsigned s = cycle_cnt_read();  // subtract off slop?
    8288:	ee1f8f3c 	mrc	15, 0, r8, cr15, cr12, {1}

    // store these in locals to minimize load stores later.
    uint32_t u = uart->cycle_per_bit;
    828c:	e5994008 	ldr	r4, [r9, #8]
    unsigned n = u/2;
    unsigned c = 0;

    // wait one period + 1/2 to get in the middle of the next read.
    delay_ncycles(s, n + 1*u);
    8290:	e08420a4 	add	r2, r4, r4, lsr #1
    8294:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8298:	e0683003 	rsb	r3, r8, r3
    829c:	e1520003 	cmp	r2, r3
    82a0:	8afffffb 	bhi	8294 <sw_uart_getc_timeout+0x5c>
	
	s += u;
    82a4:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx);
    82a8:	e1a00007 	mov	r0, r7
    82ac:	eb0003be 	bl	91ac <gpio_read>
    82b0:	e1a09750 	asr	r9, r0, r7
    82b4:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    82b8:	e0683003 	rsb	r3, r8, r3
    82bc:	e1540003 	cmp	r4, r3
    82c0:	8afffffb 	bhi	82b4 <sw_uart_getc_timeout+0x7c>
    delay_ncycles(s, u);
	s += u; 
    82c4:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 1;
    82c8:	e1a00007 	mov	r0, r7
    82cc:	eb0003b6 	bl	91ac <gpio_read>
    82d0:	e1a00750 	asr	r0, r0, r7
    82d4:	e1899080 	orr	r9, r9, r0, lsl #1
    82d8:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    82dc:	e0683003 	rsb	r3, r8, r3
    82e0:	e1540003 	cmp	r4, r3
    82e4:	8afffffb 	bhi	82d8 <sw_uart_getc_timeout+0xa0>
    delay_ncycles(s, u);
	s += u;
    82e8:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 2;
    82ec:	e1a00007 	mov	r0, r7
    82f0:	eb0003ad 	bl	91ac <gpio_read>
    82f4:	e1a00750 	asr	r0, r0, r7
    82f8:	e1899100 	orr	r9, r9, r0, lsl #2
    82fc:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8300:	e0683003 	rsb	r3, r8, r3
    8304:	e1540003 	cmp	r4, r3
    8308:	8afffffb 	bhi	82fc <sw_uart_getc_timeout+0xc4>
    delay_ncycles(s, u);
	s += u;
    830c:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 3;
    8310:	e1a00007 	mov	r0, r7
    8314:	eb0003a4 	bl	91ac <gpio_read>
    8318:	e1a00750 	asr	r0, r0, r7
    831c:	e1899180 	orr	r9, r9, r0, lsl #3
    8320:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8324:	e0683003 	rsb	r3, r8, r3
    8328:	e1540003 	cmp	r4, r3
    832c:	8afffffb 	bhi	8320 <sw_uart_getc_timeout+0xe8>
    delay_ncycles(s, u);
	s += u;
    8330:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 4;
    8334:	e1a00007 	mov	r0, r7
    8338:	eb00039b 	bl	91ac <gpio_read>
    833c:	e1a00750 	asr	r0, r0, r7
    8340:	e1899200 	orr	r9, r9, r0, lsl #4
    8344:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8348:	e0683003 	rsb	r3, r8, r3
    834c:	e1540003 	cmp	r4, r3
    8350:	8afffffb 	bhi	8344 <sw_uart_getc_timeout+0x10c>
    delay_ncycles(s, u);
	s += u;
    8354:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 5;
    8358:	e1a00007 	mov	r0, r7
    835c:	eb000392 	bl	91ac <gpio_read>
    8360:	e1a00750 	asr	r0, r0, r7
    8364:	e1899280 	orr	r9, r9, r0, lsl #5
    8368:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    836c:	e0683003 	rsb	r3, r8, r3
    8370:	e1540003 	cmp	r4, r3
    8374:	8afffffb 	bhi	8368 <sw_uart_getc_timeout+0x130>
    delay_ncycles(s, u);
	s += u;
    8378:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 6;
    837c:	e1a00007 	mov	r0, r7
    8380:	eb000389 	bl	91ac <gpio_read>
    8384:	e1a00750 	asr	r0, r0, r7
    8388:	e1899300 	orr	r9, r9, r0, lsl #6
    838c:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8390:	e0683003 	rsb	r3, r8, r3
    8394:	e1540003 	cmp	r4, r3
    8398:	8afffffb 	bhi	838c <sw_uart_getc_timeout+0x154>
    delay_ncycles(s, u);
	s += u;
    c |= (gpio_read(rx) >> rx) << 7;
    839c:	e1a00007 	mov	r0, r7
    83a0:	eb000381 	bl	91ac <gpio_read>
    83a4:	e1a00750 	asr	r0, r0, r7
    83a8:	e1899380 	orr	r9, r9, r0, lsl #7
	write_cyc_until(tx, 1, start, end);
}

// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    83ac:	eb00026d 	bl	8d68 <timer_get_usec_raw>
    83b0:	e1a04000 	mov	r4, r0
    while(1) {
        if(gpio_read(rx) == v)
    83b4:	e1a00005 	mov	r0, r5
    83b8:	eb00037b 	bl	91ac <gpio_read>
    83bc:	e3500000 	cmp	r0, #0
    83c0:	0a000005 	beq	83dc <sw_uart_getc_timeout+0x1a4>
            return 1;
        if(timer_get_usec_raw() - start > timeout_usec)
    83c4:	eb000267 	bl	8d68 <timer_get_usec_raw>
    83c8:	e0640000 	rsb	r0, r4, r0
    83cc:	e1560000 	cmp	r6, r0
    83d0:	2afffff7 	bcs	83b4 <sw_uart_getc_timeout+0x17c>
            return 0;
    83d4:	e3a03000 	mov	r3, #0
    83d8:	ea000000 	b	83e0 <sw_uart_getc_timeout+0x1a8>
// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    while(1) {
        if(gpio_read(rx) == v)
            return 1;
    83dc:	e3a03001 	mov	r3, #1
    c |= (gpio_read(rx) >> rx) << 7;
    //delay_ncycles(s, u);
	//s += u;
    
	// make sure you wait for a stop bit: otherwise the next read may fail.
    while(!wait_until_usec(rx, 0, timeout_usec))
    83e0:	e3530000 	cmp	r3, #0
    83e4:	0a000003 	beq	83f8 <sw_uart_getc_timeout+0x1c0>
        return -1;
	// delay_ncycles(s, n);

    return (int)c;
    83e8:	e1a00009 	mov	r0, r9
    83ec:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
int sw_uart_getc_timeout(sw_uart_t *uart, int timeout_usec) {
   int rx = uart->rx;

    // get start bit: timeout_usec=0 implies you return right away.
    while(!wait_until_usec(rx, 0, timeout_usec))
        return -1;
    83f0:	e3e00000 	mvn	r0, #0
    83f4:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
    //delay_ncycles(s, u);
	//s += u;
    
	// make sure you wait for a stop bit: otherwise the next read may fail.
    while(!wait_until_usec(rx, 0, timeout_usec))
        return -1;
    83f8:	e3e00000 	mvn	r0, #0
	// delay_ncycles(s, n);

    return (int)c;
}
    83fc:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}

00008400 <sw_uart_gets_until>:


// read characters using <sw_uart_getc()> until:
//       <sw_uart_getc() == <end>>
// returns -nbytes read if timeout (could be 0).
int sw_uart_gets_until(sw_uart_t *u, uint8_t *buf, uint32_t nbytes, uint8_t end, uint32_t usec_timeout) {
    8400:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8404:	e1a08000 	mov	r8, r0
    8408:	e1a06001 	mov	r6, r1
    840c:	e1a09003 	mov	r9, r3
    8410:	e59da020 	ldr	sl, [sp, #32]
    assert(nbytes>0);
    8414:	e3520000 	cmp	r2, #0
    8418:	1a000005 	bne	8434 <sw_uart_gets_until+0x34>
    841c:	e59f005c 	ldr	r0, [pc, #92]	; 8480 <sw_uart_gets_until+0x80>
    8420:	e59f105c 	ldr	r1, [pc, #92]	; 8484 <sw_uart_gets_until+0x84>
    8424:	e59f205c 	ldr	r2, [pc, #92]	; 8488 <sw_uart_gets_until+0x88>
    8428:	e3a03071 	mov	r3, #113	; 0x71
    842c:	eb0000ab 	bl	86e0 <printk>
    8430:	eb000211 	bl	8c7c <clean_reboot>
    buf[0] = 0;
    8434:	e3a04000 	mov	r4, #0
    8438:	e5c14000 	strb	r4, [r1]

    int i;
	uint8_t char_in;
    for(i = 0; i < nbytes-1; i++) {
    843c:	e2427001 	sub	r7, r2, #1
    8440:	ea000007 	b	8464 <sw_uart_gets_until+0x64>
        if((char_in = (uint8_t)sw_uart_getc_timeout(u, usec_timeout)) != end) {
    8444:	e1a00008 	mov	r0, r8
    8448:	e1a0100a 	mov	r1, sl
    844c:	ebffff79 	bl	8238 <sw_uart_getc_timeout>
    8450:	e6ef0070 	uxtb	r0, r0
    8454:	e1500009 	cmp	r0, r9
    8458:	0a000004 	beq	8470 <sw_uart_gets_until+0x70>
			buf[i] = char_in;
    845c:	e7c60005 	strb	r0, [r6, r5]
    assert(nbytes>0);
    buf[0] = 0;

    int i;
	uint8_t char_in;
    for(i = 0; i < nbytes-1; i++) {
    8460:	e2844001 	add	r4, r4, #1
    8464:	e1a05004 	mov	r5, r4
    8468:	e1540007 	cmp	r4, r7
    846c:	3afffff4 	bcc	8444 <sw_uart_gets_until+0x44>
			buf[i] = char_in;
		} else {
			break;
		}
    }
    buf[i] = 0;
    8470:	e3a03000 	mov	r3, #0
    8474:	e7c63005 	strb	r3, [r6, r5]
    return i;
}
    8478:	e1a00004 	mov	r0, r4
    847c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8480:	000094d8 	ldrdeq	r9, [r0], -r8
    8484:	000094f4 	strdeq	r9, [r0], -r4
    8488:	00009460 	andeq	r9, r0, r0, ror #8

0000848c <sw_uart_gets_timeout>:

// read characters using <sw_uart_getc()> until:
//      we do not receive any characters for <timeout> usec.
// make sure to 0 terminate!
int sw_uart_gets_timeout(sw_uart_t *u, uint8_t *buf, 
                    uint32_t nbytes, uint32_t usec_timeout) {
    848c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8490:	e1a07000 	mov	r7, r0
    8494:	e1a05001 	mov	r5, r1
    8498:	e1a08003 	mov	r8, r3

    assert(nbytes>0);
    849c:	e3520000 	cmp	r2, #0
    84a0:	1a000005 	bne	84bc <sw_uart_gets_timeout+0x30>
    84a4:	e59f004c 	ldr	r0, [pc, #76]	; 84f8 <sw_uart_gets_timeout+0x6c>
    84a8:	e59f104c 	ldr	r1, [pc, #76]	; 84fc <sw_uart_gets_timeout+0x70>
    84ac:	e59f204c 	ldr	r2, [pc, #76]	; 8500 <sw_uart_gets_timeout+0x74>
    84b0:	e3a03087 	mov	r3, #135	; 0x87
    84b4:	eb000089 	bl	86e0 <printk>
    84b8:	eb0001ef 	bl	8c7c <clean_reboot>
    buf[0] = 0;
    84bc:	e3a04000 	mov	r4, #0
    84c0:	e5c14000 	strb	r4, [r1]

    int i;
    for(i = 0; i < nbytes-1; i++) {
    84c4:	e2426001 	sub	r6, r2, #1
    84c8:	ea000004 	b	84e0 <sw_uart_gets_timeout+0x54>
        buf[i] = (uint8_t) sw_uart_getc_timeout(u, usec_timeout);
    84cc:	e1a00007 	mov	r0, r7
    84d0:	e1a01008 	mov	r1, r8
    84d4:	ebffff57 	bl	8238 <sw_uart_getc_timeout>
    84d8:	e7c50004 	strb	r0, [r5, r4]

    assert(nbytes>0);
    buf[0] = 0;

    int i;
    for(i = 0; i < nbytes-1; i++) {
    84dc:	e2844001 	add	r4, r4, #1
    84e0:	e1540006 	cmp	r4, r6
    84e4:	3afffff8 	bcc	84cc <sw_uart_gets_timeout+0x40>
        buf[i] = (uint8_t) sw_uart_getc_timeout(u, usec_timeout);
    }
    buf[i] = 0;
    84e8:	e3a03000 	mov	r3, #0
    84ec:	e7c53004 	strb	r3, [r5, r4]
    return i;
}
    84f0:	e1a00004 	mov	r0, r4
    84f4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    84f8:	000094d8 	ldrdeq	r9, [r0], -r8
    84fc:	000094f4 	strdeq	r9, [r0], -r4
    8500:	00009474 	andeq	r9, r0, r4, ror r4

00008504 <sw_uart_init_helper>:
/**************************************************************************
 * this code is implemented for you
 */

sw_uart_t 
sw_uart_init_helper(uint8_t tx, uint8_t rx, uint32_t baud, uint32_t cyc_per_bit) {
    8504:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8508:	e1a04000 	mov	r4, r0
    850c:	e1a08001 	mov	r8, r1
    8510:	e1a07002 	mov	r7, r2
    8514:	e1a05003 	mov	r5, r3
    8518:	e59d6018 	ldr	r6, [sp, #24]
    // maybe enable the cache?  don't think will work otherwise.
    gpio_set_output(tx);
    851c:	e1a00001 	mov	r0, r1
    8520:	eb00029d 	bl	8f9c <gpio_set_output>
    gpio_set_input(rx);
    8524:	e1a00007 	mov	r0, r7
    8528:	eb0002ec 	bl	90e0 <gpio_set_input>
    cycle_cnt_init();       
    852c:	e3a03001 	mov	r3, #1
    8530:	ee0f3f1c 	mcr	15, 0, r3, cr15, cr12, {0}


    // make sure it makes sense.
    unsigned mhz = 700 * 1000 * 1000;
    unsigned derived = cyc_per_bit * baud;
    8534:	e0020695 	mul	r2, r5, r6
    assert((mhz - baud) <= derived && derived <= (mhz + baud));
    8538:	e59f3064 	ldr	r3, [pc, #100]	; 85a4 <sw_uart_init_helper+0xa0>
    853c:	e0653003 	rsb	r3, r5, r3
    8540:	e1530002 	cmp	r3, r2
    8544:	8a000005 	bhi	8560 <sw_uart_init_helper+0x5c>
    8548:	e59f3054 	ldr	r3, [pc, #84]	; 85a4 <sw_uart_init_helper+0xa0>
    854c:	e0853003 	add	r3, r5, r3
    8550:	e1530002 	cmp	r3, r2
    8554:	2a000003 	bcs	8568 <sw_uart_init_helper+0x64>
    8558:	e3a03000 	mov	r3, #0
    855c:	ea000002 	b	856c <sw_uart_init_helper+0x68>
    8560:	e3a03000 	mov	r3, #0
    8564:	ea000000 	b	856c <sw_uart_init_helper+0x68>
    8568:	e3a03001 	mov	r3, #1
    856c:	e3530000 	cmp	r3, #0
    8570:	1a000005 	bne	858c <sw_uart_init_helper+0x88>
    8574:	e59f002c 	ldr	r0, [pc, #44]	; 85a8 <sw_uart_init_helper+0xa4>
    8578:	e59f102c 	ldr	r1, [pc, #44]	; 85ac <sw_uart_init_helper+0xa8>
    857c:	e59f202c 	ldr	r2, [pc, #44]	; 85b0 <sw_uart_init_helper+0xac>
    8580:	e3a030a1 	mov	r3, #161	; 0xa1
    8584:	eb000055 	bl	86e0 <printk>
    8588:	eb0001bb 	bl	8c7c <clean_reboot>
    // panic("cyc_per_bit = %d * baud = %d\n", cyc_per_bit, cyc_per_bit * baud);

    return (sw_uart_t) { 
    858c:	e5c48000 	strb	r8, [r4]
    8590:	e5c47001 	strb	r7, [r4, #1]
    8594:	e5845004 	str	r5, [r4, #4]
    8598:	e5846008 	str	r6, [r4, #8]
            .tx = tx, 
            .rx = rx, 
            .baud = baud, 
            .cycle_per_bit = cyc_per_bit 
    };
}
    859c:	e1a00004 	mov	r0, r4
    85a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    85a4:	29b92700 	ldmibcs	r9!, {r8, r9, sl, sp}
    85a8:	00009500 	andeq	r9, r0, r0, lsl #10
    85ac:	000094f4 	strdeq	r9, [r0], -r4
    85b0:	0000948c 	andeq	r9, r0, ip, lsl #9

000085b4 <sw_uart_getc>:

// blocking read.
int sw_uart_getc(sw_uart_t *uart) {
    85b4:	e92d4008 	push	{r3, lr}
    int res = sw_uart_getc_timeout(uart, ~0);
    85b8:	e3e01000 	mvn	r1, #0
    85bc:	ebffff1d 	bl	8238 <sw_uart_getc_timeout>
    if(res < 0)
    85c0:	e3500000 	cmp	r0, #0
    85c4:	a8bd8008 	popge	{r3, pc}
        panic("impossible: have an infinite timeout!\n");
    85c8:	e59f0010 	ldr	r0, [pc, #16]	; 85e0 <sw_uart_getc+0x2c>
    85cc:	e59f1010 	ldr	r1, [pc, #16]	; 85e4 <sw_uart_getc+0x30>
    85d0:	e59f2010 	ldr	r2, [pc, #16]	; 85e8 <sw_uart_getc+0x34>
    85d4:	e3a030b0 	mov	r3, #176	; 0xb0
    85d8:	eb000040 	bl	86e0 <printk>
    85dc:	eb0001a6 	bl	8c7c <clean_reboot>
    85e0:	00009544 	andeq	r9, r0, r4, asr #10
    85e4:	000094f4 	strdeq	r9, [r0], -r4
    85e8:	000094a0 	andeq	r9, r0, r0, lsr #9

000085ec <sw_uart_putk>:
    return res;
}

void sw_uart_putk(sw_uart_t *uart, const char *msg) {
    85ec:	e92d4038 	push	{r3, r4, r5, lr}
    85f0:	e1a05000 	mov	r5, r0
    85f4:	e1a04001 	mov	r4, r1
    for(; *msg; msg++)
    85f8:	ea000002 	b	8608 <sw_uart_putk+0x1c>
        sw_uart_putc(uart, *msg);
    85fc:	e1a00005 	mov	r0, r5
    8600:	ebfffeb6 	bl	80e0 <sw_uart_putc>
        panic("impossible: have an infinite timeout!\n");
    return res;
}

void sw_uart_putk(sw_uart_t *uart, const char *msg) {
    for(; *msg; msg++)
    8604:	e2844001 	add	r4, r4, #1
    8608:	e5d41000 	ldrb	r1, [r4]
    860c:	e3510000 	cmp	r1, #0
    8610:	1afffff9 	bne	85fc <sw_uart_putk+0x10>
        sw_uart_putc(uart, *msg);
}
    8614:	e8bd8038 	pop	{r3, r4, r5, pc}

00008618 <sw_uart_printk>:

// don't pollute the rest of the code with all the stuff in the 
// <stdarg.h> header.
#include <stdarg.h>
#include "libc/va-printk.h"
int sw_uart_printk(sw_uart_t *uart, const char *fmt, ...) {
    8618:	e92d000e 	push	{r1, r2, r3}
    861c:	e92d4030 	push	{r4, r5, lr}
    8620:	e24dde1d 	sub	sp, sp, #464	; 0x1d0
    8624:	e1a05000 	mov	r5, r0
    char buf[460];

    va_list args;
    va_start(args, fmt);
    8628:	e28d3e1e 	add	r3, sp, #480	; 0x1e0
    862c:	e58d3000 	str	r3, [sp]
        int sz = va_printk(buf, sizeof buf, fmt, args);
    8630:	e28d0004 	add	r0, sp, #4
    8634:	e3a01f73 	mov	r1, #460	; 0x1cc
    8638:	e59d21dc 	ldr	r2, [sp, #476]	; 0x1dc
    863c:	eb0000e4 	bl	89d4 <va_printk>
    8640:	e1a04000 	mov	r4, r0
    va_end(args);
    assert(sz < sizeof buf-1);
    8644:	e59f303c 	ldr	r3, [pc, #60]	; 8688 <sw_uart_printk+0x70>
    8648:	e1500003 	cmp	r0, r3
    864c:	9a000005 	bls	8668 <sw_uart_printk+0x50>
    8650:	e59f0034 	ldr	r0, [pc, #52]	; 868c <sw_uart_printk+0x74>
    8654:	e59f1034 	ldr	r1, [pc, #52]	; 8690 <sw_uart_printk+0x78>
    8658:	e59f2034 	ldr	r2, [pc, #52]	; 8694 <sw_uart_printk+0x7c>
    865c:	e3a030c4 	mov	r3, #196	; 0xc4
    8660:	eb00001e 	bl	86e0 <printk>
    8664:	eb000184 	bl	8c7c <clean_reboot>
    sw_uart_putk(uart,buf);
    8668:	e1a00005 	mov	r0, r5
    866c:	e28d1004 	add	r1, sp, #4
    8670:	ebffffdd 	bl	85ec <sw_uart_putk>
    return sz;
}
    8674:	e1a00004 	mov	r0, r4
    8678:	e28dde1d 	add	sp, sp, #464	; 0x1d0
    867c:	e8bd4030 	pop	{r4, r5, lr}
    8680:	e28dd00c 	add	sp, sp, #12
    8684:	e12fff1e 	bx	lr
    8688:	000001ca 	andeq	r0, r0, sl, asr #3
    868c:	0000957c 	andeq	r9, r0, ip, ror r5
    8690:	000094f4 	strdeq	r9, [r0], -r4
    8694:	000094b0 			; <UNDEFINED> instruction: 0x000094b0

00008698 <sw_uart_gets_until_blk>:

int sw_uart_gets_until_blk(sw_uart_t *u, uint8_t *buf, uint32_t nbytes, uint8_t end) {
    8698:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    869c:	e24dd00c 	sub	sp, sp, #12
    int res = sw_uart_gets_until(u, buf, nbytes, end, ~0);
    86a0:	e3e0c000 	mvn	ip, #0
    86a4:	e58dc000 	str	ip, [sp]
    86a8:	ebffff54 	bl	8400 <sw_uart_gets_until>
    if(res < 0)
    86ac:	e3500000 	cmp	r0, #0
    86b0:	aa000005 	bge	86cc <sw_uart_gets_until_blk+0x34>
        panic("impossible: have an infinite timeout!\n");
    86b4:	e59f0018 	ldr	r0, [pc, #24]	; 86d4 <sw_uart_gets_until_blk+0x3c>
    86b8:	e59f1018 	ldr	r1, [pc, #24]	; 86d8 <sw_uart_gets_until_blk+0x40>
    86bc:	e59f2018 	ldr	r2, [pc, #24]	; 86dc <sw_uart_gets_until_blk+0x44>
    86c0:	e3a030cc 	mov	r3, #204	; 0xcc
    86c4:	eb000005 	bl	86e0 <printk>
    86c8:	eb00016b 	bl	8c7c <clean_reboot>
    return res;
}
    86cc:	e28dd00c 	add	sp, sp, #12
    86d0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    86d4:	00009544 	andeq	r9, r0, r4, asr #10
    86d8:	000094f4 	strdeq	r9, [r0], -r4
    86dc:	000094c0 	andeq	r9, r0, r0, asr #9

000086e0 <printk>:
#include <stdarg.h>

#include "rpi.h"
#include "va-printk.h"

int printk(const char *fmt, ...) {
    86e0:	e92d000f 	push	{r0, r1, r2, r3}
    86e4:	e92d4030 	push	{r4, r5, lr}
    86e8:	e24dd00c 	sub	sp, sp, #12
    // this is a really huge buffer for a pi.   could do this better.
    static char buf[1024];
    va_list args;

    va_start(args, fmt);
    86ec:	e28d301c 	add	r3, sp, #28
    86f0:	e58d3004 	str	r3, [sp, #4]
        int sz = va_printk(buf, sizeof buf, fmt, args);
    86f4:	e59f4034 	ldr	r4, [pc, #52]	; 8730 <printk+0x50>
    86f8:	e1a00004 	mov	r0, r4
    86fc:	e3a01b01 	mov	r1, #1024	; 0x400
    8700:	e59d2018 	ldr	r2, [sp, #24]
    8704:	eb0000b2 	bl	89d4 <va_printk>
    8708:	e1a05000 	mov	r5, r0
    va_end(args);


#if 1
    putk(buf);
    870c:	e59f3020 	ldr	r3, [pc, #32]	; 8734 <printk+0x54>
    8710:	e5933000 	ldr	r3, [r3]
    8714:	e1a00004 	mov	r0, r4
    8718:	e12fff33 	blx	r3
    int i;
    for(i = 0; buf[i]; i++)
        rpi_putchar(buf[i]);
#endif
    return sz;
}
    871c:	e1a00005 	mov	r0, r5
    8720:	e28dd00c 	add	sp, sp, #12
    8724:	e8bd4030 	pop	{r4, r5, lr}
    8728:	e28dd010 	add	sp, sp, #16
    872c:	e12fff1e 	bx	lr
    8730:	000096b0 			; <UNDEFINED> instruction: 0x000096b0
    8734:	0000935c 	andeq	r9, r0, ip, asr r3

00008738 <internal_putk>:
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    8738:	e92d4038 	push	{r3, r4, r5, lr}
    873c:	e1a04000 	mov	r4, r0
    for(; *p; p++)
        rpi_putchar(*p);
    8740:	e59f5020 	ldr	r5, [pc, #32]	; 8768 <internal_putk+0x30>
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    8744:	ea000002 	b	8754 <internal_putk+0x1c>
        rpi_putchar(*p);
    8748:	e5953000 	ldr	r3, [r5]
    874c:	e12fff33 	blx	r3
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    8750:	e2844001 	add	r4, r4, #1
    8754:	e5d40000 	ldrb	r0, [r4]
    8758:	e3500000 	cmp	r0, #0
    875c:	1afffff9 	bne	8748 <internal_putk+0x10>
        rpi_putchar(*p);
//  we were adding this.
//  rpi_putchar('\n');
    return 1;
}
    8760:	e3a00001 	mov	r0, #1
    8764:	e8bd8038 	pop	{r3, r4, r5, pc}
    8768:	000093d0 	ldrdeq	r9, [r0], -r0

0000876c <isdigit>:
    if(puts_fp)
        putk = puts_fp;
}

// XXX: check sign promotion.
static int isdigit(int c) { return c >= '0' && c <= '9'; }
    876c:	e2400030 	sub	r0, r0, #48	; 0x30
    8770:	e3500009 	cmp	r0, #9
    8774:	83a00000 	movhi	r0, #0
    8778:	93a00001 	movls	r0, #1
    877c:	e12fff1e 	bx	lr

00008780 <pad>:

// don't move: can't be inlined, gcc seems to have a bug.
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
    8780:	e0611000 	rsb	r1, r1, r0
	// pad with leading spaces
	for(; len < width; len++)
		*p++ = ' ';
    8784:	e3a03020 	mov	r3, #32
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8788:	ea000002 	b	8798 <pad+0x18>
		*p++ = ' ';
    878c:	e5c03000 	strb	r3, [r0]
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8790:	e2811001 	add	r1, r1, #1
		*p++ = ' ';
    8794:	e2800001 	add	r0, r0, #1
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8798:	e1510002 	cmp	r1, r2
    879c:	bafffffa 	blt	878c <pad+0xc>
		*p++ = ' ';
	*p = 0;
    87a0:	e3a03000 	mov	r3, #0
    87a4:	e5c03000 	strb	r3, [r0]
	return p;
}
    87a8:	e12fff1e 	bx	lr

000087ac <reverse>:

static char* reverse(char *dst, int n, char *p, char *start) {
	// drop the lower chars if the string is too big.
	int len = p - start + 1; // include \0
    87ac:	e063c002 	rsb	ip, r3, r2
    87b0:	e28cc001 	add	ip, ip, #1
	if(len > n)
    87b4:	e15c0001 	cmp	ip, r1
		start += (len - n);
    87b8:	c061100c 	rsbgt	r1, r1, ip
    87bc:	c0833001 	addgt	r3, r3, r1

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    87c0:	e2422001 	sub	r2, r2, #1
    87c4:	e1a01000 	mov	r1, r0
    87c8:	ea000002 	b	87d8 <reverse+0x2c>
		*dst++ = *p;
    87cc:	e452c001 	ldrb	ip, [r2], #-1
    87d0:	e5c1c000 	strb	ip, [r1]
    87d4:	e2811001 	add	r1, r1, #1
		start += (len - n);

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    87d8:	e1520003 	cmp	r2, r3
    87dc:	2afffffa 	bcs	87cc <reverse+0x20>
		*dst++ = *p;
	*dst++ = 0;
    87e0:	e3a03000 	mov	r3, #0
    87e4:	e5c13000 	strb	r3, [r1]

	return s;
}
    87e8:	e12fff1e 	bx	lr

000087ec <emit>:

static char* emit(unsigned base, char *dst, int n, int val, int width, int signed_p) {
    87ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    87f0:	e24dd040 	sub	sp, sp, #64	; 0x40
    87f4:	e1a05001 	mov	r5, r1
    87f8:	e1a04002 	mov	r4, r2
    87fc:	e59d2058 	ldr	r2, [sp, #88]	; 0x58
	// XXX: constrain width to be >= bit size: can change this.
	if(width > n)
    8800:	e1520004 	cmp	r2, r4
		width = n - 1;
    8804:	c2442001 	subgt	r2, r4, #1

	char buf[64], *p = buf; 
	unsigned u = val;
    8808:	e1a0c003 	mov	ip, r3

	switch(base) { 
    880c:	e2400002 	sub	r0, r0, #2
    8810:	e350000e 	cmp	r0, #14
    8814:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
    8818:	ea000042 	b	8928 <emit+0x13c>
    881c:	00008900 	andeq	r8, r0, r0, lsl #18
    8820:	00008928 	andeq	r8, r0, r8, lsr #18
    8824:	00008928 	andeq	r8, r0, r8, lsr #18
    8828:	00008928 	andeq	r8, r0, r8, lsr #18
    882c:	00008928 	andeq	r8, r0, r8, lsr #18
    8830:	00008928 	andeq	r8, r0, r8, lsr #18
    8834:	000088f4 	strdeq	r8, [r0], -r4
    8838:	00008928 	andeq	r8, r0, r8, lsr #18
    883c:	00008858 	andeq	r8, r0, r8, asr r8
    8840:	00008928 	andeq	r8, r0, r8, lsr #18
    8844:	00008928 	andeq	r8, r0, r8, lsr #18
    8848:	00008928 	andeq	r8, r0, r8, lsr #18
    884c:	00008928 	andeq	r8, r0, r8, lsr #18
    8850:	00008928 	andeq	r8, r0, r8, lsr #18
    8854:	000088cc 	andeq	r8, r0, ip, asr #17
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
    8858:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
    885c:	e2911000 	adds	r1, r1, #0
    8860:	13a01001 	movne	r1, #1
    8864:	e0111fa3 	ands	r1, r1, r3, lsr #31
				neg_p = 1;
				val = -val;
    8868:	1263c000 	rsbne	ip, r3, #0
	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
				neg_p = 1;
    886c:	13a08001 	movne	r8, #1
	unsigned u = val;

	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
    8870:	03a08000 	moveq	r8, #0
			if(val < 0 && signed_p) {
				neg_p = 1;
    8874:	e1a0100d 	mov	r1, sp
				val = -val;
				u = val;
			}
			do { 
				*p++ = "0123456789"[u % 10];
    8878:	e59f70e8 	ldr	r7, [pc, #232]	; 8968 <emit+0x17c>
    887c:	e59f60e8 	ldr	r6, [pc, #232]	; 896c <emit+0x180>
    8880:	ea000000 	b	8888 <emit+0x9c>
    8884:	e1a01003 	mov	r1, r3
    8888:	e2813001 	add	r3, r1, #1
    888c:	e08e0c97 	umull	r0, lr, r7, ip
    8890:	e1a0e1ae 	lsr	lr, lr, #3
    8894:	e1a0000e 	mov	r0, lr
    8898:	e08ee10e 	add	lr, lr, lr, lsl #2
    889c:	e1a0e08e 	lsl	lr, lr, #1
    88a0:	e06ee00c 	rsb	lr, lr, ip
    88a4:	e7d6c00e 	ldrb	ip, [r6, lr]
    88a8:	e5c1c000 	strb	ip, [r1]
			} while(u /= 10); 
    88ac:	e1a0c000 	mov	ip, r0
    88b0:	e3500000 	cmp	r0, #0
    88b4:	1afffff2 	bne	8884 <emit+0x98>
			if(neg_p)
    88b8:	e3580000 	cmp	r8, #0
				*p++ = '-';
    88bc:	12813002 	addne	r3, r1, #2
    88c0:	13a0002d 	movne	r0, #45	; 0x2d
    88c4:	15c10001 	strbne	r0, [r1, #1]
    88c8:	ea00001c 	b	8940 <emit+0x154>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    88cc:	e1a0e00d 	mov	lr, sp
			break;
		}
		case 16:
			u = val;
                        do {
                                *p++ = "0123456789abcdef"[u % 16];
    88d0:	e59f0098 	ldr	r0, [pc, #152]	; 8970 <emit+0x184>
    88d4:	e28e3001 	add	r3, lr, #1
    88d8:	e20c100f 	and	r1, ip, #15
    88dc:	e7d01001 	ldrb	r1, [r0, r1]
    88e0:	e5ce1000 	strb	r1, [lr]
    88e4:	e1a0e003 	mov	lr, r3
                        } while(u /= 16);
    88e8:	e1b0c22c 	lsrs	ip, ip, #4
    88ec:	1afffff8 	bne	88d4 <emit+0xe8>
    88f0:	ea000012 	b	8940 <emit+0x154>
                        break;
		// just a single char
		case 8:
			*p++ = val;
    88f4:	e5cd3000 	strb	r3, [sp]
    88f8:	e28d3001 	add	r3, sp, #1
			break;
    88fc:	ea00000f 	b	8940 <emit+0x154>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    8900:	e1a0e00d 	mov	lr, sp
#if 0
			for(int i = 0; i < 32; i++)
				*p++ = "01"[(u & (1<<i)) != 0];
#else
                        do {
                        	*p++ = "01"[u % 2];
    8904:	e59f0068 	ldr	r0, [pc, #104]	; 8974 <emit+0x188>
    8908:	e28e3001 	add	r3, lr, #1
    890c:	e20c1001 	and	r1, ip, #1
    8910:	e7d01001 	ldrb	r1, [r0, r1]
    8914:	e5ce1000 	strb	r1, [lr]
    8918:	e1a0e003 	mov	lr, r3
			} while(u /= 2);
    891c:	e1b0c0ac 	lsrs	ip, ip, #1
    8920:	1afffff8 	bne	8908 <emit+0x11c>
    8924:	ea000005 	b	8940 <emit+0x154>
#endif
			break;
		default:
			assert(0);
    8928:	e59f0048 	ldr	r0, [pc, #72]	; 8978 <emit+0x18c>
    892c:	e59f1048 	ldr	r1, [pc, #72]	; 897c <emit+0x190>
    8930:	e59f2048 	ldr	r2, [pc, #72]	; 8980 <emit+0x194>
    8934:	e3a03075 	mov	r3, #117	; 0x75
    8938:	ebffff68 	bl	86e0 <printk>
    893c:	eb0000ce 	bl	8c7c <clean_reboot>
	}
	// number string is reversed, so re-reverse it.
	return reverse(dst, n, pad(p, buf, width), buf);
    8940:	e1a00003 	mov	r0, r3
    8944:	e1a0100d 	mov	r1, sp
    8948:	ebffff8c 	bl	8780 <pad>
    894c:	e1a02000 	mov	r2, r0
    8950:	e1a00005 	mov	r0, r5
    8954:	e1a01004 	mov	r1, r4
    8958:	e1a0300d 	mov	r3, sp
    895c:	ebffff92 	bl	87ac <reverse>
}
    8960:	e28dd040 	add	sp, sp, #64	; 0x40
    8964:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8968:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    896c:	000095ec 	andeq	r9, r0, ip, ror #11
    8970:	000095f8 	strdeq	r9, [r0], -r8
    8974:	0000960c 	andeq	r9, r0, ip, lsl #12
    8978:	000095c4 	andeq	r9, r0, r4, asr #11
    897c:	000095d8 	ldrdeq	r9, [r0], -r8
    8980:	000095a0 	andeq	r9, r0, r0, lsr #11

00008984 <rpi_set_output>:
// override this is going through the network.
int (*rpi_putchar)(int c) = internal_putchar;
#endif


void rpi_set_output(int (*putc_fp)(int), int (*puts_fp)(const char *)) {
    8984:	e92d4008 	push	{r3, lr}
    assert(putc_fp);
    8988:	e3500000 	cmp	r0, #0
    898c:	1a000005 	bne	89a8 <rpi_set_output+0x24>
    8990:	e59f0028 	ldr	r0, [pc, #40]	; 89c0 <rpi_set_output+0x3c>
    8994:	e59f1028 	ldr	r1, [pc, #40]	; 89c4 <rpi_set_output+0x40>
    8998:	e59f2028 	ldr	r2, [pc, #40]	; 89c8 <rpi_set_output+0x44>
    899c:	e3a03020 	mov	r3, #32
    89a0:	ebffff4e 	bl	86e0 <printk>
    89a4:	eb0000b4 	bl	8c7c <clean_reboot>
    rpi_putchar = putc_fp;
    89a8:	e59f301c 	ldr	r3, [pc, #28]	; 89cc <rpi_set_output+0x48>
    89ac:	e5830000 	str	r0, [r3]
    if(puts_fp)
    89b0:	e3510000 	cmp	r1, #0
        putk = puts_fp;
    89b4:	159f3014 	ldrne	r3, [pc, #20]	; 89d0 <rpi_set_output+0x4c>
    89b8:	15831000 	strne	r1, [r3]
    89bc:	e8bd8008 	pop	{r3, pc}
    89c0:	00009610 	andeq	r9, r0, r0, lsl r6
    89c4:	000095d8 	ldrdeq	r9, [r0], -r8
    89c8:	000095a8 	andeq	r9, r0, r8, lsr #11
    89cc:	000093d0 	ldrdeq	r9, [r0], -r0
    89d0:	0000935c 	andeq	r9, r0, ip, asr r3

000089d4 <va_printk>:
	return reverse(dst, n, pad(p, buf, width), buf);
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
    89d4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    89d8:	e24dd08c 	sub	sp, sp, #140	; 0x8c
    89dc:	e1a0b000 	mov	fp, r0
    89e0:	e1a0a003 	mov	sl, r3
	char *p = buf, *e = buf + n - 1;
    89e4:	e2411001 	sub	r1, r1, #1
    89e8:	e0808001 	add	r8, r0, r1

	buf[0] = 0;
    89ec:	e3a03000 	mov	r3, #0
    89f0:	e5c03000 	strb	r3, [r0]
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;
    89f4:	e1a04000 	mov	r4, r0

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    89f8:	ea000087 	b	8c1c <va_printk+0x248>
		if(*fmt != '%')
    89fc:	e3530025 	cmp	r3, #37	; 0x25
			*p++ = *fmt++;
    8a00:	12822001 	addne	r2, r2, #1
    8a04:	15c43000 	strbne	r3, [r4]
    8a08:	12844001 	addne	r4, r4, #1
    8a0c:	1a000082 	bne	8c1c <va_printk+0x248>
		
		else if(fmt[1] == '%') {
    8a10:	e5d21001 	ldrb	r1, [r2, #1]
    8a14:	e3510025 	cmp	r1, #37	; 0x25
			*p++ = *fmt;
    8a18:	05c43000 	strbeq	r3, [r4]
			fmt+=2;
    8a1c:	02822002 	addeq	r2, r2, #2
	for(; *fmt && p < e; ) {
		if(*fmt != '%')
			*p++ = *fmt++;
		
		else if(fmt[1] == '%') {
			*p++ = *fmt;
    8a20:	02844001 	addeq	r4, r4, #1
    8a24:	0a00007c 	beq	8c1c <va_printk+0x248>
			fmt+=2;
		} else {	
			fmt++;
    8a28:	e2826001 	add	r6, r2, #1

			char *s, num[128];
			unsigned width = 0;
    8a2c:	e3a07000 	mov	r7, #0

			while(isdigit(*fmt)) {
    8a30:	ea000004 	b	8a48 <va_printk+0x74>
				width = width*10 + *fmt - '0';
    8a34:	e0877107 	add	r7, r7, r7, lsl #2
    8a38:	e1a07087 	lsl	r7, r7, #1
    8a3c:	e0877005 	add	r7, r7, r5
    8a40:	e2477030 	sub	r7, r7, #48	; 0x30
				fmt++;
    8a44:	e2866001 	add	r6, r6, #1
			fmt++;

			char *s, num[128];
			unsigned width = 0;

			while(isdigit(*fmt)) {
    8a48:	e5d65000 	ldrb	r5, [r6]
    8a4c:	e1a09005 	mov	r9, r5
    8a50:	e1a00005 	mov	r0, r5
    8a54:	ebffff44 	bl	876c <isdigit>
    8a58:	e3500000 	cmp	r0, #0
    8a5c:	1afffff4 	bne	8a34 <va_printk+0x60>
				width = width*10 + *fmt - '0';
				fmt++;
			}
			assert(width < 32);
    8a60:	e357001f 	cmp	r7, #31
    8a64:	9a000005 	bls	8a80 <va_printk+0xac>
    8a68:	e59f01d8 	ldr	r0, [pc, #472]	; 8c48 <va_printk+0x274>
    8a6c:	e59f11d8 	ldr	r1, [pc, #472]	; 8c4c <va_printk+0x278>
    8a70:	e59f21d8 	ldr	r2, [pc, #472]	; 8c50 <va_printk+0x27c>
    8a74:	e3a03092 	mov	r3, #146	; 0x92
    8a78:	ebffff18 	bl	86e0 <printk>
    8a7c:	eb00007e 	bl	8c7c <clean_reboot>
			
			switch(*fmt) {
    8a80:	e2455062 	sub	r5, r5, #98	; 0x62
    8a84:	e3550016 	cmp	r5, #22
    8a88:	979ff105 	ldrls	pc, [pc, r5, lsl #2]
    8a8c:	ea000051 	b	8bd8 <va_printk+0x204>
    8a90:	00008b7c 	andeq	r8, r0, ip, ror fp
    8a94:	00008bb0 			; <UNDEFINED> instruction: 0x00008bb0
    8a98:	00008b04 	andeq	r8, r0, r4, lsl #22
    8a9c:	00008bd8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    8aa0:	00008aec 	andeq	r8, r0, ip, ror #21
    8aa4:	00008bd8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    8aa8:	00008bd8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    8aac:	00008bd8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    8ab0:	00008bd8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    8ab4:	00008bd8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    8ab8:	00008bd8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    8abc:	00008bd8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    8ac0:	00008bd8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    8ac4:	00008bd8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    8ac8:	00008b54 	andeq	r8, r0, r4, asr fp
    8acc:	00008bd8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    8ad0:	00008bd8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    8ad4:	00008ba4 	andeq	r8, r0, r4, lsr #23
    8ad8:	00008bd8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    8adc:	00008b2c 	andeq	r8, r0, ip, lsr #22
    8ae0:	00008bd8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    8ae4:	00008bd8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    8ae8:	00008b54 	andeq	r8, r0, r4, asr fp
			case 'f':
			{
#ifndef RPI_FP_ENABLED
				panic("float not enabled!!!");
    8aec:	e59f0160 	ldr	r0, [pc, #352]	; 8c54 <va_printk+0x280>
    8af0:	e59f1154 	ldr	r1, [pc, #340]	; 8c4c <va_printk+0x278>
    8af4:	e59f2154 	ldr	r2, [pc, #340]	; 8c50 <va_printk+0x27c>
    8af8:	e3a03098 	mov	r3, #152	; 0x98
    8afc:	ebfffef7 	bl	86e0 <printk>
    8b00:	eb00005d 	bl	8c7c <clean_reboot>

				break;
#endif
			}
			case 'd':
				s = emit(10, num, 128, va_arg(args, int), width, 1);
    8b04:	e59a3000 	ldr	r3, [sl]
    8b08:	e28aa004 	add	sl, sl, #4
    8b0c:	e58d7000 	str	r7, [sp]
    8b10:	e3a02001 	mov	r2, #1
    8b14:	e58d2004 	str	r2, [sp, #4]
    8b18:	e3a0000a 	mov	r0, #10
    8b1c:	e28d1008 	add	r1, sp, #8
    8b20:	e3a02080 	mov	r2, #128	; 0x80
    8b24:	ebffff30 	bl	87ec <emit>
				break;
    8b28:	ea000031 	b	8bf4 <va_printk+0x220>
			case 'u':
				s = emit(10, num, 128, va_arg(args, unsigned), width, 0);
    8b2c:	e59a3000 	ldr	r3, [sl]
    8b30:	e28aa004 	add	sl, sl, #4
    8b34:	e58d7000 	str	r7, [sp]
    8b38:	e3a02000 	mov	r2, #0
    8b3c:	e58d2004 	str	r2, [sp, #4]
    8b40:	e3a0000a 	mov	r0, #10
    8b44:	e28d1008 	add	r1, sp, #8
    8b48:	e3a02080 	mov	r2, #128	; 0x80
    8b4c:	ebffff26 	bl	87ec <emit>
				break;
    8b50:	ea000027 	b	8bf4 <va_printk+0x220>
			case 'p':
			case 'x':
				s = emit(16, num, 128, va_arg(args, unsigned), width, 0);
    8b54:	e59a3000 	ldr	r3, [sl]
    8b58:	e28aa004 	add	sl, sl, #4
    8b5c:	e58d7000 	str	r7, [sp]
    8b60:	e3a02000 	mov	r2, #0
    8b64:	e58d2004 	str	r2, [sp, #4]
    8b68:	e3a00010 	mov	r0, #16
    8b6c:	e28d1008 	add	r1, sp, #8
    8b70:	e3a02080 	mov	r2, #128	; 0x80
    8b74:	ebffff1c 	bl	87ec <emit>
				break;
    8b78:	ea00001d 	b	8bf4 <va_printk+0x220>
			case 'b':
				s = emit(2, num, 128, va_arg(args, unsigned), width, 0);
    8b7c:	e59a3000 	ldr	r3, [sl]
    8b80:	e28aa004 	add	sl, sl, #4
    8b84:	e58d7000 	str	r7, [sp]
    8b88:	e3a02000 	mov	r2, #0
    8b8c:	e58d2004 	str	r2, [sp, #4]
    8b90:	e3a00002 	mov	r0, #2
    8b94:	e28d1008 	add	r1, sp, #8
    8b98:	e3a02080 	mov	r2, #128	; 0x80
    8b9c:	ebffff12 	bl	87ec <emit>
				break;
    8ba0:	ea000013 	b	8bf4 <va_printk+0x220>
			case 's':
				s = va_arg(args, char *);
    8ba4:	e59a0000 	ldr	r0, [sl]
    8ba8:	e28aa004 	add	sl, sl, #4
				break;
    8bac:	ea000010 	b	8bf4 <va_printk+0x220>
			case 'c':
				s = emit(8, num, 128, va_arg(args, int),width,0);
    8bb0:	e59a3000 	ldr	r3, [sl]
    8bb4:	e28aa004 	add	sl, sl, #4
    8bb8:	e58d7000 	str	r7, [sp]
    8bbc:	e3a02000 	mov	r2, #0
    8bc0:	e58d2004 	str	r2, [sp, #4]
    8bc4:	e3a00008 	mov	r0, #8
    8bc8:	e08d1000 	add	r1, sp, r0
    8bcc:	e3a02080 	mov	r2, #128	; 0x80
    8bd0:	ebffff05 	bl	87ec <emit>
				break;
    8bd4:	ea000006 	b	8bf4 <va_printk+0x220>
			default: 
				panic("printk: not handling specifier '%c'\n", *fmt);
    8bd8:	e58d9000 	str	r9, [sp]
    8bdc:	e59f0074 	ldr	r0, [pc, #116]	; 8c58 <va_printk+0x284>
    8be0:	e59f1064 	ldr	r1, [pc, #100]	; 8c4c <va_printk+0x278>
    8be4:	e59f2064 	ldr	r2, [pc, #100]	; 8c50 <va_printk+0x27c>
    8be8:	e3a030b9 	mov	r3, #185	; 0xb9
    8bec:	ebfffebb 	bl	86e0 <printk>
    8bf0:	eb000021 	bl	8c7c <clean_reboot>
				return 0;   // ugh
			}
			fmt++;
    8bf4:	e2862001 	add	r2, r6, #1

			// safe string copy
			for(; p < e && *s; )
    8bf8:	ea000002 	b	8c08 <va_printk+0x234>
				*p++ = *s++;
    8bfc:	e2800001 	add	r0, r0, #1
    8c00:	e5c43000 	strb	r3, [r4]
    8c04:	e2844001 	add	r4, r4, #1
				return 0;   // ugh
			}
			fmt++;

			// safe string copy
			for(; p < e && *s; )
    8c08:	e1540008 	cmp	r4, r8
    8c0c:	2a000002 	bcs	8c1c <va_printk+0x248>
    8c10:	e5d03000 	ldrb	r3, [r0]
    8c14:	e3530000 	cmp	r3, #0
    8c18:	1afffff7 	bne	8bfc <va_printk+0x228>

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    8c1c:	e5d23000 	ldrb	r3, [r2]
    8c20:	e3530000 	cmp	r3, #0
    8c24:	0a000001 	beq	8c30 <va_printk+0x25c>
    8c28:	e1540008 	cmp	r4, r8
    8c2c:	3affff72 	bcc	89fc <va_printk+0x28>
			// safe string copy
			for(; p < e && *s; )
				*p++ = *s++;
		}
	}
	*p++ = 0;
    8c30:	e2840001 	add	r0, r4, #1
    8c34:	e3a03000 	mov	r3, #0
    8c38:	e5c43000 	strb	r3, [r4]
	return p - buf;
}
    8c3c:	e06b0000 	rsb	r0, fp, r0
    8c40:	e28dd08c 	add	sp, sp, #140	; 0x8c
    8c44:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c48:	00009628 	andeq	r9, r0, r8, lsr #12
    8c4c:	000095d8 	ldrdeq	r9, [r0], -r8
    8c50:	000095b8 			; <UNDEFINED> instruction: 0x000095b8
    8c54:	00009644 	andeq	r9, r0, r4, asr #12
    8c58:	0000966c 	andeq	r9, r0, ip, ror #12

00008c5c <enable_cache>:
#include "rpi.h"

void enable_cache(void) {
    unsigned r;
    asm volatile ("MRC p15, 0, %0, c1, c0, 0" : "=r" (r));
    8c5c:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	r |= (1 << 12); // l1 instruction cache
	r |= (1 << 11); // branch prediction
    8c60:	e3833b06 	orr	r3, r3, #6144	; 0x1800
    asm volatile ("MCR p15, 0, %0, c1, c0, 0" :: "r" (r));
    8c64:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    8c68:	e12fff1e 	bx	lr

00008c6c <disable_cache>:
}

// should we flush icache?
void disable_cache(void) {
    unsigned r;
    asm volatile ("MRC p15, 0, %0, c1, c0, 0" : "=r" (r));
    8c6c:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    //r |= 0x1800;
	r &= ~(1 << 12); // l1 instruction cache
	r &= ~(1 << 11); // branch prediction
    8c70:	e3c33b06 	bic	r3, r3, #6144	; 0x1800
    asm volatile ("MCR p15, 0, %0, c1, c0, 0" :: "r" (r));
    8c74:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    8c78:	e12fff1e 	bx	lr

00008c7c <clean_reboot>:
#include "rpi.h"

// print out a special message so bootloader exits
void clean_reboot(void) {
    8c7c:	e92d4008 	push	{r3, lr}
    putk("DONE!!!\n");
    8c80:	e59f3014 	ldr	r3, [pc, #20]	; 8c9c <clean_reboot+0x20>
    8c84:	e5933000 	ldr	r3, [r3]
    8c88:	e59f0010 	ldr	r0, [pc, #16]	; 8ca0 <clean_reboot+0x24>
    8c8c:	e12fff33 	blx	r3
    delay_ms(100);       // (hopefully) enough time for message to get flushed.
    8c90:	e3a00064 	mov	r0, #100	; 0x64
    8c94:	eb000048 	bl	8dbc <delay_ms>
    rpi_reboot();
    8c98:	eb000019 	bl	8d04 <rpi_reboot>
    8c9c:	0000935c 	andeq	r9, r0, ip, asr r3
    8ca0:	000096a4 	andeq	r9, r0, r4, lsr #13

00008ca4 <_cstart>:
#include "rpi.h"

void _cstart() {
    8ca4:	e92d4008 	push	{r3, lr}
    extern int __bss_start__, __bss_end__;
	void notmain();

    int* bss = &__bss_start__;
    8ca8:	e59f3020 	ldr	r3, [pc, #32]	; 8cd0 <_cstart+0x2c>
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    8cac:	e59f2020 	ldr	r2, [pc, #32]	; 8cd4 <_cstart+0x30>
        *bss++ = 0;
    8cb0:	e3a01000 	mov	r1, #0
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    8cb4:	ea000001 	b	8cc0 <_cstart+0x1c>
        *bss++ = 0;
    8cb8:	e5831000 	str	r1, [r3]
    8cbc:	e2833004 	add	r3, r3, #4
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    8cc0:	e1530002 	cmp	r3, r2
    8cc4:	3afffffb 	bcc	8cb8 <_cstart+0x14>
        *bss++ = 0;

    notmain(); 
    8cc8:	ebfffcd0 	bl	8010 <notmain>
	rpi_reboot();
    8ccc:	eb00000c 	bl	8d04 <rpi_reboot>
    8cd0:	000096b0 			; <UNDEFINED> instruction: 0x000096b0
    8cd4:	00009ab0 			; <UNDEFINED> instruction: 0x00009ab0

00008cd8 <at_user_level>:
 * works if we have a trashed stack pointer?
 */
static unsigned user_level = 0b10000;
int at_user_level(void) {
    unsigned cpsr = 0;
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    8cd8:	e10f0000 	mrs	r0, CPSR

    // user level = lower 5 bits = 0b10000);
    return (cpsr  & 0b11111)  == user_level;
    8cdc:	e200001f 	and	r0, r0, #31
}
    8ce0:	e3500010 	cmp	r0, #16
    8ce4:	13a00000 	movne	r0, #0
    8ce8:	03a00001 	moveq	r0, #1
    8cec:	e12fff1e 	bx	lr

00008cf0 <set_user_level>:

// this is just used by the reboot code.
void set_user_level(void) {
    unsigned cpsr = 0;
    // XXX: shouldn't we just set the one bit?
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    8cf0:	e10f3000 	mrs	r3, CPSR
        cpsr = (cpsr & ~0b11111) | user_level;
    8cf4:	e3c3301f 	bic	r3, r3, #31
    8cf8:	e3833010 	orr	r3, r3, #16
    asm volatile("msr cpsr, %0" :: "r"(cpsr));
    8cfc:	e129f003 	msr	CPSR_fc, r3
    8d00:	e12fff1e 	bx	lr

00008d04 <rpi_reboot>:
}

void rpi_reboot(void) {
    8d04:	e92d4008 	push	{r3, lr}
    if(at_user_level()) {
    8d08:	ebfffff2 	bl	8cd8 <at_user_level>
    8d0c:	e3500000 	cmp	r0, #0
    8d10:	0a000000 	beq	8d18 <rpi_reboot+0x14>
        set_user_level();
    8d14:	ebfffff5 	bl	8cf0 <set_user_level>
        // of stuff.
        // assert(!at_user_level());
    }

    // gives uart time to flush: should just call flush directly.
    delay_ms(30);
    8d18:	e3a0001e 	mov	r0, #30
    8d1c:	eb000026 	bl	8dbc <delay_ms>
    const int PM_WDOG = 0x20100024;
    const int PM_PASSWORD = 0x5a000000;
    const int PM_RSTC_WRCFG_FULL_RESET = 0x00000020;

    // timeout = 1/16th of a second? (whatever)
    PUT32(PM_WDOG, PM_PASSWORD | 1);
    8d20:	e59f0014 	ldr	r0, [pc, #20]	; 8d3c <rpi_reboot+0x38>
    8d24:	e59f1014 	ldr	r1, [pc, #20]	; 8d40 <rpi_reboot+0x3c>
    8d28:	eb000035 	bl	8e04 <PUT32>
    PUT32(PM_RSTC, PM_PASSWORD | PM_RSTC_WRCFG_FULL_RESET);
    8d2c:	e59f0010 	ldr	r0, [pc, #16]	; 8d44 <rpi_reboot+0x40>
    8d30:	e59f1010 	ldr	r1, [pc, #16]	; 8d48 <rpi_reboot+0x44>
    8d34:	eb000032 	bl	8e04 <PUT32>
    8d38:	eafffffe 	b	8d38 <rpi_reboot+0x34>
    8d3c:	20100024 	andscs	r0, r0, r4, lsr #32
    8d40:	5a000001 	bpl	8d4c <delay_cycles>
    8d44:	2010001c 	andscs	r0, r0, ip, lsl r0
    8d48:	5a000020 	bpl	8dd0 <delay_sec>

00008d4c <delay_cycles>:
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    8d4c:	ea000001 	b	8d58 <delay_cycles+0xc>
        asm("add r1, r1, #0");
    8d50:	e2811000 	add	r1, r1, #0
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    8d54:	e1a00003 	mov	r0, r3
    8d58:	e2403001 	sub	r3, r0, #1
    8d5c:	e3500000 	cmp	r0, #0
    8d60:	1afffffa 	bne	8d50 <delay_cycles+0x4>
        asm("add r1, r1, #0");
}
    8d64:	e12fff1e 	bx	lr

00008d68 <timer_get_usec_raw>:

// no dev barrier.
unsigned timer_get_usec_raw(void) {
    8d68:	e92d4008 	push	{r3, lr}
    return GET32(0x20003004);
    8d6c:	e59f0004 	ldr	r0, [pc, #4]	; 8d78 <timer_get_usec_raw+0x10>
    8d70:	eb00002f 	bl	8e34 <GET32>
}
    8d74:	e8bd8008 	pop	{r3, pc}
    8d78:	20003004 	andcs	r3, r0, r4

00008d7c <timer_get_usec>:

// in usec
unsigned timer_get_usec(void) {
    8d7c:	e92d4010 	push	{r4, lr}
    dev_barrier();
    8d80:	eb000017 	bl	8de4 <dev_barrier>
    unsigned u = timer_get_usec_raw();
    8d84:	ebfffff7 	bl	8d68 <timer_get_usec_raw>
    8d88:	e1a04000 	mov	r4, r0
    dev_barrier();
    8d8c:	eb000014 	bl	8de4 <dev_barrier>
    return u;
}
    8d90:	e1a00004 	mov	r0, r4
    8d94:	e8bd8010 	pop	{r4, pc}

00008d98 <delay_us>:

void delay_us(unsigned us) {
    8d98:	e92d4038 	push	{r3, r4, r5, lr}
    8d9c:	e1a05000 	mov	r5, r0
    unsigned rb = timer_get_usec();
    8da0:	ebfffff5 	bl	8d7c <timer_get_usec>
    8da4:	e1a04000 	mov	r4, r0
    while (1) {
        unsigned ra = timer_get_usec();
    8da8:	ebfffff3 	bl	8d7c <timer_get_usec>
        if ((ra - rb) >= us) {
    8dac:	e0640000 	rsb	r0, r4, r0
    8db0:	e1500005 	cmp	r0, r5
    8db4:	3afffffb 	bcc	8da8 <delay_us+0x10>
            break;
        }
    }
}
    8db8:	e8bd8038 	pop	{r3, r4, r5, pc}

00008dbc <delay_ms>:
void delay_ms(unsigned ms) {
    8dbc:	e92d4008 	push	{r3, lr}
    delay_us(ms*1000);
    8dc0:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    8dc4:	e0000093 	mul	r0, r3, r0
    8dc8:	ebfffff2 	bl	8d98 <delay_us>
    8dcc:	e8bd8008 	pop	{r3, pc}

00008dd0 <delay_sec>:
}
void delay_sec(unsigned sec) {
    8dd0:	e92d4008 	push	{r3, lr}
    delay_ms(sec*1000);
    8dd4:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    8dd8:	e0000093 	mul	r0, r3, r0
    8ddc:	ebfffff6 	bl	8dbc <delay_ms>
    8de0:	e8bd8008 	pop	{r3, pc}

00008de4 <dev_barrier>:
    8de4:	ea000002 	b	8df4 <dsb>

00008de8 <dmb>:
    8de8:	e3a00000 	mov	r0, #0
    8dec:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
    8df0:	e12fff1e 	bx	lr

00008df4 <dsb>:
    8df4:	ee070f9a 	mcr	15, 0, r0, cr7, cr10, {4}
    8df8:	e12fff1e 	bx	lr

00008dfc <put32>:
    8dfc:	e5801000 	str	r1, [r0]
    8e00:	e12fff1e 	bx	lr

00008e04 <PUT32>:
    8e04:	e5801000 	str	r1, [r0]
    8e08:	e12fff1e 	bx	lr

00008e0c <put16>:
    8e0c:	e1c010b0 	strh	r1, [r0]
    8e10:	e12fff1e 	bx	lr

00008e14 <PUT16>:
    8e14:	e1c010b0 	strh	r1, [r0]
    8e18:	e12fff1e 	bx	lr

00008e1c <put8>:
    8e1c:	e5c01000 	strb	r1, [r0]
    8e20:	e12fff1e 	bx	lr

00008e24 <PUT8>:
    8e24:	e5c01000 	strb	r1, [r0]
    8e28:	e12fff1e 	bx	lr

00008e2c <get32>:
    8e2c:	e5900000 	ldr	r0, [r0]
    8e30:	e12fff1e 	bx	lr

00008e34 <GET32>:
    8e34:	e5900000 	ldr	r0, [r0]
    8e38:	e12fff1e 	bx	lr

00008e3c <GETPC>:
    8e3c:	e1a0000e 	mov	r0, lr
    8e40:	e12fff1e 	bx	lr

00008e44 <dummy>:
    8e44:	e12fff1e 	bx	lr

00008e48 <uart_can_getc>:

	dev_barrier();
}

// 1 = at least one byte on rx queue, 0 otherwise
static int uart_can_getc(void) {
    8e48:	e92d4008 	push	{r3, lr}
    return get32(AUX_MU_LSR_REG) & RX_READY;
    8e4c:	e59f300c 	ldr	r3, [pc, #12]	; 8e60 <uart_can_getc+0x18>
    8e50:	e5930000 	ldr	r0, [r3]
    8e54:	ebfffff4 	bl	8e2c <get32>
}
    8e58:	e2000001 	and	r0, r0, #1
    8e5c:	e8bd8008 	pop	{r3, pc}
    8e60:	00009360 	andeq	r9, r0, r0, ror #6

00008e64 <uart_init>:
#define RX_READY 0x1
#define TX_READY 0x10
#define TX_EMPTY 0x20

// note: if you need memory barriers, use <dev_barrier()>
void uart_init(void) {
    8e64:	e92d4038 	push	{r3, r4, r5, lr}
    
	dev_barrier();
    8e68:	ebffffdd 	bl	8de4 <dev_barrier>

	// set GPIO 14 and 15 to alternate function 0
    //volatile unsigned* gpio_reg = (void*) 0x20200004;
    //unsigned bitmask = get32(gpio_reg);
    gpio_set_function(14, GPIO_FUNC_ALT5);
    8e6c:	e3a0000e 	mov	r0, #14
    8e70:	e3a01002 	mov	r1, #2
    8e74:	eb0000fd 	bl	9270 <gpio_set_function>
	gpio_set_function(15, GPIO_FUNC_ALT5);
    8e78:	e3a0000f 	mov	r0, #15
    8e7c:	e3a01002 	mov	r1, #2
    8e80:	eb0000fa 	bl	9270 <gpio_set_function>
    //bitmask &= ~(0b111 << ((UART0_RX % 10) * 3));
    //bitmask |= (0b010 << ((UART0_TX % 10) * 3));
    //bitmask |= (0b010 << ((UART0_RX % 10) * 3));
    //put32(gpio_reg, bitmask);

	dev_barrier();
    8e84:	ebffffd6 	bl	8de4 <dev_barrier>

    put32(AUX_ENABLES, get32(AUX_ENABLES) | (ENABLE_UART));
    8e88:	e59f4068 	ldr	r4, [pc, #104]	; 8ef8 <uart_init+0x94>
    8e8c:	e5945004 	ldr	r5, [r4, #4]
    8e90:	e1a00005 	mov	r0, r5
    8e94:	ebffffe4 	bl	8e2c <get32>
    8e98:	e3801001 	orr	r1, r0, #1
    8e9c:	e1a00005 	mov	r0, r5
    8ea0:	ebffffd5 	bl	8dfc <put32>
	
	dev_barrier();
    8ea4:	ebffffce 	bl	8de4 <dev_barrier>
	
    put32(AUX_MU_CNTL_REG, 0x0);
    8ea8:	e5940008 	ldr	r0, [r4, #8]
    8eac:	e3a01000 	mov	r1, #0
    8eb0:	ebffffd1 	bl	8dfc <put32>
    put32(AUX_MU_IER_REG, 0x0);
    8eb4:	e594000c 	ldr	r0, [r4, #12]
    8eb8:	e3a01000 	mov	r1, #0
    8ebc:	ebffffce 	bl	8dfc <put32>
    put32(AUX_MU_IIR_REG, CLEAR_RX_FIFO | CLEAR_TX_FIFO);
    8ec0:	e5940010 	ldr	r0, [r4, #16]
    8ec4:	e3a01006 	mov	r1, #6
    8ec8:	ebffffcb 	bl	8dfc <put32>
	put32(AUX_MU_LCR_REG, ENABLE_8BIT_MODE);
    8ecc:	e5940014 	ldr	r0, [r4, #20]
    8ed0:	e3a01003 	mov	r1, #3
    8ed4:	ebffffc8 	bl	8dfc <put32>
    put32(AUX_MU_BAUD_REG, BAUD_115200);
    8ed8:	e5940018 	ldr	r0, [r4, #24]
    8edc:	e59f1018 	ldr	r1, [pc, #24]	; 8efc <uart_init+0x98>
    8ee0:	ebffffc5 	bl	8dfc <put32>
    put32(AUX_MU_CNTL_REG, ENABLE_TXER | ENABLE_RXER);
    8ee4:	e5940008 	ldr	r0, [r4, #8]
    8ee8:	e3a01003 	mov	r1, #3
    8eec:	ebffffc2 	bl	8dfc <put32>

	dev_barrier();
    8ef0:	ebffffbb 	bl	8de4 <dev_barrier>
    8ef4:	e8bd8038 	pop	{r3, r4, r5, pc}
    8ef8:	00009360 	andeq	r9, r0, r0, ror #6
    8efc:	0000010e 	andeq	r0, r0, lr, lsl #2

00008f00 <uart_getc>:
    return get32(AUX_MU_LSR_REG) & RX_READY;
}

// returns one byte from the rx queue, if needed
// blocks until there is one.
int uart_getc(void) {
    8f00:	e92d4008 	push	{r3, lr}
    while(1)
        if(uart_can_getc())  break;
    8f04:	ebffffcf 	bl	8e48 <uart_can_getc>
    8f08:	e3500000 	cmp	r0, #0
    8f0c:	0afffffc 	beq	8f04 <uart_getc+0x4>
    return get32(AUX_MU_IO_REG) & 0xFF;
    8f10:	e59f300c 	ldr	r3, [pc, #12]	; 8f24 <uart_getc+0x24>
    8f14:	e593001c 	ldr	r0, [r3, #28]
    8f18:	ebffffc3 	bl	8e2c <get32>
}
    8f1c:	e6ef0070 	uxtb	r0, r0
    8f20:	e8bd8008 	pop	{r3, pc}
    8f24:	00009360 	andeq	r9, r0, r0, ror #6

00008f28 <uart_can_putc>:

// 1 = space to put at least one byte, 0 otherwise.
int uart_can_putc(void) {
    8f28:	e92d4008 	push	{r3, lr}
    return get32(AUX_MU_LSR_REG) & TX_EMPTY;
    8f2c:	e59f300c 	ldr	r3, [pc, #12]	; 8f40 <uart_can_putc+0x18>
    8f30:	e5930000 	ldr	r0, [r3]
    8f34:	ebffffbc 	bl	8e2c <get32>
}
    8f38:	e2000020 	and	r0, r0, #32
    8f3c:	e8bd8008 	pop	{r3, pc}
    8f40:	00009360 	andeq	r9, r0, r0, ror #6

00008f44 <uart_putc>:

// put one byte on the tx qqueue, if needed, blocks
// until TX has space.
void uart_putc(unsigned c) {
    8f44:	e92d4010 	push	{r4, lr}
    8f48:	e1a04000 	mov	r4, r0
    while(1)
            if(uart_can_putc())  break;
    8f4c:	ebfffff5 	bl	8f28 <uart_can_putc>
    8f50:	e3500000 	cmp	r0, #0
    8f54:	0afffffc 	beq	8f4c <uart_putc+0x8>
    put32(AUX_MU_IO_REG, c);
    8f58:	e59f300c 	ldr	r3, [pc, #12]	; 8f6c <uart_putc+0x28>
    8f5c:	e593001c 	ldr	r0, [r3, #28]
    8f60:	e1a01004 	mov	r1, r4
    8f64:	ebffffa4 	bl	8dfc <put32>
    8f68:	e8bd8010 	pop	{r4, pc}
    8f6c:	00009360 	andeq	r9, r0, r0, ror #6

00008f70 <uart_has_data>:


// simple wrapper routines useful later.

// a maybe-more intuitive name for clients.
int uart_has_data(void) {
    8f70:	e92d4008 	push	{r3, lr}
    return uart_can_getc();
    8f74:	ebffffb3 	bl	8e48 <uart_can_getc>
}
    8f78:	e8bd8008 	pop	{r3, pc}

00008f7c <uart_getc_async>:

int uart_getc_async(void) { 
    8f7c:	e92d4008 	push	{r3, lr}
    if(!uart_has_data())
    8f80:	ebfffffa 	bl	8f70 <uart_has_data>
    8f84:	e3500000 	cmp	r0, #0
    8f88:	0a000001 	beq	8f94 <uart_getc_async+0x18>
        return -1;
    return uart_getc();
    8f8c:	ebffffdb 	bl	8f00 <uart_getc>
    8f90:	e8bd8008 	pop	{r3, pc}
    return uart_can_getc();
}

int uart_getc_async(void) { 
    if(!uart_has_data())
        return -1;
    8f94:	e3e00000 	mvn	r0, #0
    return uart_getc();
}
    8f98:	e8bd8008 	pop	{r3, pc}

00008f9c <gpio_set_output>:
volatile unsigned *GPLEV1 = (void*) 0x20200038;
// Part 1 implement gpio_set_on, gpio_set_off, gpio_set_output

// set <pin> to be an output pin.  note: fsel0, fsel1, fsel2 are contiguous in memory,
// so you can use array calculations!
void gpio_set_output(unsigned pin) {
    8f9c:	e92d4038 	push	{r3, r4, r5, lr}
    8fa0:	e1a04000 	mov	r4, r0
    // implement this
    // use gpio_fsel0
    
    if (pin >= 32) {
    8fa4:	e350001f 	cmp	r0, #31
    8fa8:	88bd8038 	pophi	{r3, r4, r5, pc}
        return;
    }
    
    volatile unsigned* gpio_reg;
    
    unsigned reg_select = pin / 10;
    8fac:	e59f30b4 	ldr	r3, [pc, #180]	; 9068 <gpio_set_output+0xcc>
    8fb0:	e0832093 	umull	r2, r3, r3, r0
    8fb4:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    8fb8:	e3530005 	cmp	r3, #5
    8fbc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    8fc0:	ea000017 	b	9024 <gpio_set_output+0x88>
    8fc4:	00008fdc 	ldrdeq	r8, [r0], -ip
    8fc8:	00008fe8 	andeq	r8, r0, r8, ror #31
    8fcc:	00008ff4 	strdeq	r8, [r0], -r4
    8fd0:	00009000 	andeq	r9, r0, r0
    8fd4:	0000900c 	andeq	r9, r0, ip
    8fd8:	00009018 	andeq	r9, r0, r8, lsl r0
        case 0: {gpio_reg = GPFSEL0; break;}
    8fdc:	e59f3088 	ldr	r3, [pc, #136]	; 906c <gpio_set_output+0xd0>
    8fe0:	e5935000 	ldr	r5, [r3]
    8fe4:	ea00000f 	b	9028 <gpio_set_output+0x8c>
        case 1: {gpio_reg = GPFSEL1; break;}
    8fe8:	e59f307c 	ldr	r3, [pc, #124]	; 906c <gpio_set_output+0xd0>
    8fec:	e5935004 	ldr	r5, [r3, #4]
    8ff0:	ea00000c 	b	9028 <gpio_set_output+0x8c>
        case 2: {gpio_reg = GPFSEL2; break;}
    8ff4:	e59f3070 	ldr	r3, [pc, #112]	; 906c <gpio_set_output+0xd0>
    8ff8:	e5935008 	ldr	r5, [r3, #8]
    8ffc:	ea000009 	b	9028 <gpio_set_output+0x8c>
        case 3: {gpio_reg = GPFSEL3; break;}
    9000:	e59f3064 	ldr	r3, [pc, #100]	; 906c <gpio_set_output+0xd0>
    9004:	e593500c 	ldr	r5, [r3, #12]
    9008:	ea000006 	b	9028 <gpio_set_output+0x8c>
        case 4: {gpio_reg = GPFSEL4; break;}
    900c:	e59f3058 	ldr	r3, [pc, #88]	; 906c <gpio_set_output+0xd0>
    9010:	e5935010 	ldr	r5, [r3, #16]
    9014:	ea000003 	b	9028 <gpio_set_output+0x8c>
        case 5: {gpio_reg = GPFSEL5; break;}
    9018:	e59f304c 	ldr	r3, [pc, #76]	; 906c <gpio_set_output+0xd0>
    901c:	e5935014 	ldr	r5, [r3, #20]
    9020:	ea000000 	b	9028 <gpio_set_output+0x8c>
        default: gpio_reg = 0x0;
    9024:	e3a05000 	mov	r5, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    9028:	e1a00005 	mov	r0, r5
    902c:	ebffff7e 	bl	8e2c <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    9030:	e59f1030 	ldr	r1, [pc, #48]	; 9068 <gpio_set_output+0xcc>
    9034:	e0813491 	umull	r3, r1, r1, r4
    9038:	e1a011a1 	lsr	r1, r1, #3
    903c:	e0811101 	add	r1, r1, r1, lsl #2
    9040:	e1a01081 	lsl	r1, r1, #1
    9044:	e0611004 	rsb	r1, r1, r4
    9048:	e0811081 	add	r1, r1, r1, lsl #1
    904c:	e3a03007 	mov	r3, #7
    9050:	e1c03113 	bic	r3, r0, r3, lsl r1
    bitmask |= (1 << ((pin % 10) * 3));
    put32(gpio_reg, bitmask);
    9054:	e1a00005 	mov	r0, r5
    9058:	e3a02001 	mov	r2, #1
    905c:	e1831112 	orr	r1, r3, r2, lsl r1
    9060:	ebffff65 	bl	8dfc <put32>
    9064:	e8bd8038 	pop	{r3, r4, r5, pc}
    9068:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    906c:	00009394 	muleq	r0, r4, r3

00009070 <gpio_set_on>:
    
}


// set GPIO <pin> on.
inline void gpio_set_on(unsigned pin) {
    9070:	e92d4008 	push	{r3, lr}
    // implement this
    // use gpio_set0
    if (pin >= 32) {
    9074:	e350001f 	cmp	r0, #31
    9078:	88bd8008 	pophi	{r3, pc}
    // Get current register value
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPSET0;
    907c:	959f3020 	ldrls	r3, [pc, #32]	; 90a4 <gpio_set_on+0x34>
    9080:	95932018 	ldrls	r2, [r3, #24]
        // TODO: why do we not want this statement?
        //bitmask = get32(GPSET0);
    } else {
        gpio_reg = GPSET1;
    9084:	859f3018 	ldrhi	r3, [pc, #24]	; 90a4 <gpio_set_on+0x34>
    9088:	8593201c 	ldrhi	r2, [r3, #28]
        //bitmask = get32(GPSET1);
        // TODO: why do we not want this statement?
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    908c:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    9090:	e1a00002 	mov	r0, r2
    9094:	e3a01001 	mov	r1, #1
    9098:	e1a01311 	lsl	r1, r1, r3
    909c:	ebffff56 	bl	8dfc <put32>
    90a0:	e8bd8008 	pop	{r3, pc}
    90a4:	00009394 	muleq	r0, r4, r3

000090a8 <gpio_set_off>:
}

// set GPIO <pin> off
inline void gpio_set_off(unsigned pin) {
    90a8:	e92d4008 	push	{r3, lr}
    // implement this
    // use gpio_clr0
    if(pin >= 32) {
    90ac:	e350001f 	cmp	r0, #31
    90b0:	88bd8008 	pophi	{r3, pc}
    }
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPCLR0;
    90b4:	959f3020 	ldrls	r3, [pc, #32]	; 90dc <gpio_set_off+0x34>
    90b8:	95932020 	ldrls	r2, [r3, #32]
        //bitmask = get32(GPCLR0);
    } else {
        gpio_reg = GPCLR1;
    90bc:	859f3018 	ldrhi	r3, [pc, #24]	; 90dc <gpio_set_off+0x34>
    90c0:	85932024 	ldrhi	r2, [r3, #36]	; 0x24
        //bitmask = get32(GPCLR1);
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    90c4:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    90c8:	e1a00002 	mov	r0, r2
    90cc:	e3a01001 	mov	r1, #1
    90d0:	e1a01311 	lsl	r1, r1, r3
    90d4:	ebffff48 	bl	8dfc <put32>
    90d8:	e8bd8008 	pop	{r3, pc}
    90dc:	00009394 	muleq	r0, r4, r3

000090e0 <gpio_set_input>:
}

// Part 2: implement gpio_set_input and gpio_read

// set <pin> to input.
void gpio_set_input(unsigned pin) {
    90e0:	e92d4038 	push	{r3, r4, r5, lr}
    90e4:	e1a04000 	mov	r4, r0
    // implement.
    if(pin >= 32) {
    90e8:	e350001f 	cmp	r0, #31
    90ec:	88bd8038 	pophi	{r3, r4, r5, pc}
        return;
    }
    
    volatile unsigned* gpio_reg;
    
    unsigned reg_select = pin / 10;
    90f0:	e59f30ac 	ldr	r3, [pc, #172]	; 91a4 <gpio_set_input+0xc4>
    90f4:	e0832093 	umull	r2, r3, r3, r0
    90f8:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    90fc:	e3530005 	cmp	r3, #5
    9100:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    9104:	ea000017 	b	9168 <gpio_set_input+0x88>
    9108:	00009120 	andeq	r9, r0, r0, lsr #2
    910c:	0000912c 	andeq	r9, r0, ip, lsr #2
    9110:	00009138 	andeq	r9, r0, r8, lsr r1
    9114:	00009144 	andeq	r9, r0, r4, asr #2
    9118:	00009150 	andeq	r9, r0, r0, asr r1
    911c:	0000915c 	andeq	r9, r0, ip, asr r1
        case 0: {gpio_reg = GPFSEL0; break;}
    9120:	e59f3080 	ldr	r3, [pc, #128]	; 91a8 <gpio_set_input+0xc8>
    9124:	e5935000 	ldr	r5, [r3]
    9128:	ea00000f 	b	916c <gpio_set_input+0x8c>
        case 1: {gpio_reg = GPFSEL1; break;}
    912c:	e59f3074 	ldr	r3, [pc, #116]	; 91a8 <gpio_set_input+0xc8>
    9130:	e5935004 	ldr	r5, [r3, #4]
    9134:	ea00000c 	b	916c <gpio_set_input+0x8c>
        case 2: {gpio_reg = GPFSEL2; break;}
    9138:	e59f3068 	ldr	r3, [pc, #104]	; 91a8 <gpio_set_input+0xc8>
    913c:	e5935008 	ldr	r5, [r3, #8]
    9140:	ea000009 	b	916c <gpio_set_input+0x8c>
        case 3: {gpio_reg = GPFSEL3; break;}
    9144:	e59f305c 	ldr	r3, [pc, #92]	; 91a8 <gpio_set_input+0xc8>
    9148:	e593500c 	ldr	r5, [r3, #12]
    914c:	ea000006 	b	916c <gpio_set_input+0x8c>
        case 4: {gpio_reg = GPFSEL4; break;}
    9150:	e59f3050 	ldr	r3, [pc, #80]	; 91a8 <gpio_set_input+0xc8>
    9154:	e5935010 	ldr	r5, [r3, #16]
    9158:	ea000003 	b	916c <gpio_set_input+0x8c>
        case 5: {gpio_reg = GPFSEL5; break;}
    915c:	e59f3044 	ldr	r3, [pc, #68]	; 91a8 <gpio_set_input+0xc8>
    9160:	e5935014 	ldr	r5, [r3, #20]
    9164:	ea000000 	b	916c <gpio_set_input+0x8c>
        default: gpio_reg = 0x0;
    9168:	e3a05000 	mov	r5, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    916c:	e1a00005 	mov	r0, r5
    9170:	ebffff2d 	bl	8e2c <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    9174:	e59f1028 	ldr	r1, [pc, #40]	; 91a4 <gpio_set_input+0xc4>
    9178:	e0813491 	umull	r3, r1, r1, r4
    917c:	e1a011a1 	lsr	r1, r1, #3
    9180:	e0811101 	add	r1, r1, r1, lsl #2
    9184:	e1a01081 	lsl	r1, r1, #1
    9188:	e0611004 	rsb	r1, r1, r4
    918c:	e0811081 	add	r1, r1, r1, lsl #1
    9190:	e3a03007 	mov	r3, #7
    9194:	e1c01113 	bic	r1, r0, r3, lsl r1
    put32(gpio_reg, bitmask);
    9198:	e1a00005 	mov	r0, r5
    919c:	ebffff16 	bl	8dfc <put32>
    91a0:	e8bd8038 	pop	{r3, r4, r5, pc}
    91a4:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    91a8:	00009394 	muleq	r0, r4, r3

000091ac <gpio_read>:
    
    
}

// return the value of <pin>
inline int gpio_read(unsigned pin) {
    91ac:	e92d4010 	push	{r4, lr}
    91b0:	e1a04000 	mov	r4, r0
    
    if(pin >= 32) {
    91b4:	e350001f 	cmp	r0, #31
    91b8:	8a00000b 	bhi	91ec <gpio_read+0x40>
        return -1;
    }
    
    unsigned v = 0;
    
    if (pin <= 31){
    91bc:	8a000003 	bhi	91d0 <gpio_read+0x24>
        v = get32(GPLEV0);
    91c0:	e59f302c 	ldr	r3, [pc, #44]	; 91f4 <gpio_read+0x48>
    91c4:	e5930028 	ldr	r0, [r3, #40]	; 0x28
    91c8:	ebffff17 	bl	8e2c <get32>
    91cc:	ea000002 	b	91dc <gpio_read+0x30>
    } else {
        v = get32(GPLEV1);
    91d0:	e59f301c 	ldr	r3, [pc, #28]	; 91f4 <gpio_read+0x48>
    91d4:	e593002c 	ldr	r0, [r3, #44]	; 0x2c
    91d8:	ebffff13 	bl	8e2c <get32>
    }
    
    return (v & (1 << (pin % 32)));
    91dc:	e204401f 	and	r4, r4, #31
    91e0:	e3a03001 	mov	r3, #1
    91e4:	e0000413 	and	r0, r0, r3, lsl r4
    91e8:	e8bd8010 	pop	{r4, pc}

// return the value of <pin>
inline int gpio_read(unsigned pin) {
    
    if(pin >= 32) {
        return -1;
    91ec:	e3e00000 	mvn	r0, #0
    } else {
        v = get32(GPLEV1);
    }
    
    return (v & (1 << (pin % 32)));
}
    91f0:	e8bd8010 	pop	{r4, pc}
    91f4:	00009394 	muleq	r0, r4, r3

000091f8 <gpio_write>:

// set <pin> to <v> (v \in {0,1})
inline void gpio_write(unsigned pin, unsigned v) {
    91f8:	e92d4008 	push	{r3, lr}
    
    if(pin >= 32) {
    91fc:	e350001f 	cmp	r0, #31
    9200:	88bd8008 	pophi	{r3, pc}
        return;
    }
    
    if(v)
    9204:	e3510000 	cmp	r1, #0
    9208:	0a00000b 	beq	923c <gpio_write+0x44>

// set GPIO <pin> on.
inline void gpio_set_on(unsigned pin) {
    // implement this
    // use gpio_set0
    if (pin >= 32) {
    920c:	e350001f 	cmp	r0, #31
    9210:	88bd8008 	pophi	{r3, pc}
    // Get current register value
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPSET0;
    9214:	959f3050 	ldrls	r3, [pc, #80]	; 926c <gpio_write+0x74>
    9218:	95932018 	ldrls	r2, [r3, #24]
        // TODO: why do we not want this statement?
        //bitmask = get32(GPSET0);
    } else {
        gpio_reg = GPSET1;
    921c:	859f3048 	ldrhi	r3, [pc, #72]	; 926c <gpio_write+0x74>
    9220:	8593201c 	ldrhi	r2, [r3, #28]
        //bitmask = get32(GPSET1);
        // TODO: why do we not want this statement?
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    9224:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    9228:	e1a00002 	mov	r0, r2
    922c:	e3a01001 	mov	r1, #1
    9230:	e1a01311 	lsl	r1, r1, r3
    9234:	ebfffef0 	bl	8dfc <put32>
    9238:	e8bd8008 	pop	{r3, pc}

// set GPIO <pin> off
inline void gpio_set_off(unsigned pin) {
    // implement this
    // use gpio_clr0
    if(pin >= 32) {
    923c:	e350001f 	cmp	r0, #31
    9240:	88bd8008 	pophi	{r3, pc}
    }
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPCLR0;
    9244:	959f3020 	ldrls	r3, [pc, #32]	; 926c <gpio_write+0x74>
    9248:	95932020 	ldrls	r2, [r3, #32]
        //bitmask = get32(GPCLR0);
    } else {
        gpio_reg = GPCLR1;
    924c:	859f3018 	ldrhi	r3, [pc, #24]	; 926c <gpio_write+0x74>
    9250:	85932024 	ldrhi	r2, [r3, #36]	; 0x24
        //bitmask = get32(GPCLR1);
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    9254:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    9258:	e1a00002 	mov	r0, r2
    925c:	e3a01001 	mov	r1, #1
    9260:	e1a01311 	lsl	r1, r1, r3
    9264:	ebfffee4 	bl	8dfc <put32>
    9268:	e8bd8008 	pop	{r3, pc}
    926c:	00009394 	muleq	r0, r4, r3

00009270 <gpio_set_function>:
        gpio_set_on(pin);
    else
        gpio_set_off(pin);
}

void gpio_set_function(unsigned pin, gpio_func_t func) {
    9270:	e92d4070 	push	{r4, r5, r6, lr}
    9274:	e1a04000 	mov	r4, r0
    9278:	e1a05001 	mov	r5, r1
    // implement this
    // use gpio_fsel0
    
    if (pin >= 32 || func >= 8) {
    927c:	e3510007 	cmp	r1, #7
    9280:	9350001f 	cmpls	r0, #31
    9284:	88bd8070 	pophi	{r4, r5, r6, pc}
        return;
    }

    volatile unsigned* gpio_reg;
    unsigned reg_select = pin / 10;
    9288:	e59f30b0 	ldr	r3, [pc, #176]	; 9340 <gpio_set_function+0xd0>
    928c:	e0832093 	umull	r2, r3, r3, r0
    9290:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    9294:	e3530005 	cmp	r3, #5
    9298:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    929c:	ea000017 	b	9300 <gpio_set_function+0x90>
    92a0:	000092b8 			; <UNDEFINED> instruction: 0x000092b8
    92a4:	000092c4 	andeq	r9, r0, r4, asr #5
    92a8:	000092d0 	ldrdeq	r9, [r0], -r0
    92ac:	000092dc 	ldrdeq	r9, [r0], -ip
    92b0:	000092e8 	andeq	r9, r0, r8, ror #5
    92b4:	000092f4 	strdeq	r9, [r0], -r4
        case 0: {gpio_reg = GPFSEL0; break;}
    92b8:	e59f3084 	ldr	r3, [pc, #132]	; 9344 <gpio_set_function+0xd4>
    92bc:	e5936000 	ldr	r6, [r3]
    92c0:	ea00000f 	b	9304 <gpio_set_function+0x94>
        case 1: {gpio_reg = GPFSEL1; break;}
    92c4:	e59f3078 	ldr	r3, [pc, #120]	; 9344 <gpio_set_function+0xd4>
    92c8:	e5936004 	ldr	r6, [r3, #4]
    92cc:	ea00000c 	b	9304 <gpio_set_function+0x94>
        case 2: {gpio_reg = GPFSEL2; break;}
    92d0:	e59f306c 	ldr	r3, [pc, #108]	; 9344 <gpio_set_function+0xd4>
    92d4:	e5936008 	ldr	r6, [r3, #8]
    92d8:	ea000009 	b	9304 <gpio_set_function+0x94>
        case 3: {gpio_reg = GPFSEL3; break;}
    92dc:	e59f3060 	ldr	r3, [pc, #96]	; 9344 <gpio_set_function+0xd4>
    92e0:	e593600c 	ldr	r6, [r3, #12]
    92e4:	ea000006 	b	9304 <gpio_set_function+0x94>
        case 4: {gpio_reg = GPFSEL4; break;}
    92e8:	e59f3054 	ldr	r3, [pc, #84]	; 9344 <gpio_set_function+0xd4>
    92ec:	e5936010 	ldr	r6, [r3, #16]
    92f0:	ea000003 	b	9304 <gpio_set_function+0x94>
        case 5: {gpio_reg = GPFSEL5; break;}
    92f4:	e59f3048 	ldr	r3, [pc, #72]	; 9344 <gpio_set_function+0xd4>
    92f8:	e5936014 	ldr	r6, [r3, #20]
    92fc:	ea000000 	b	9304 <gpio_set_function+0x94>
        default: gpio_reg = 0x0;
    9300:	e3a06000 	mov	r6, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    9304:	e1a00006 	mov	r0, r6
    9308:	ebfffec7 	bl	8e2c <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    930c:	e59f302c 	ldr	r3, [pc, #44]	; 9340 <gpio_set_function+0xd0>
    9310:	e0832493 	umull	r2, r3, r3, r4
    9314:	e1a031a3 	lsr	r3, r3, #3
    9318:	e0833103 	add	r3, r3, r3, lsl #2
    931c:	e1a03083 	lsl	r3, r3, #1
    9320:	e0633004 	rsb	r3, r3, r4
    9324:	e0833083 	add	r3, r3, r3, lsl #1
    9328:	e3a01007 	mov	r1, #7
    932c:	e1c01311 	bic	r1, r0, r1, lsl r3
    bitmask |= (func << ((pin % 10) * 3));
    put32(gpio_reg, bitmask);
    9330:	e1a00006 	mov	r0, r6
    9334:	e1811315 	orr	r1, r1, r5, lsl r3
    9338:	ebfffeaf 	bl	8dfc <put32>
    933c:	e8bd8070 	pop	{r4, r5, r6, pc}
    9340:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    9344:	00009394 	muleq	r0, r4, r3

00009348 <internal_putchar>:
#include "rpi.h"

static int internal_putchar(int c) { uart_putc(c); return c; }
    9348:	e92d4010 	push	{r4, lr}
    934c:	e1a04000 	mov	r4, r0
    9350:	ebfffefb 	bl	8f44 <uart_putc>
    9354:	e1a00004 	mov	r0, r4
    9358:	e8bd8010 	pop	{r4, pc}

Disassembly of section .data:

0000935c <putk>:
    935c:	00008738 	andeq	r8, r0, r8, lsr r7

00009360 <AUX_MU_LSR_REG>:
    9360:	20215054 	eorcs	r5, r1, r4, asr r0

00009364 <AUX_ENABLES>:
    9364:	20215004 	eorcs	r5, r1, r4

00009368 <AUX_MU_CNTL_REG>:
    9368:	20215060 	eorcs	r5, r1, r0, rrx

0000936c <AUX_MU_IER_REG>:
    936c:	20215044 	eorcs	r5, r1, r4, asr #32

00009370 <AUX_MU_IIR_REG>:
    9370:	20215048 	eorcs	r5, r1, r8, asr #32

00009374 <AUX_MU_LCR_REG>:
    9374:	2021504c 	eorcs	r5, r1, ip, asr #32

00009378 <AUX_MU_BAUD_REG>:
    9378:	20215068 	eorcs	r5, r1, r8, rrx

0000937c <AUX_MU_IO_REG>:
    937c:	20215040 	eorcs	r5, r1, r0, asr #32

00009380 <AUX_MU_STAT_REG>:
    9380:	20215064 	eorcs	r5, r1, r4, rrx

00009384 <AUX_MU_SCRATCH>:
    9384:	2021505c 	eorcs	r5, r1, ip, asr r0

00009388 <AUX_MU_MSR_REG>:
    9388:	20215058 	eorcs	r5, r1, r8, asr r0

0000938c <AUX_MU_MCR_REG>:
    938c:	20215050 	eorcs	r5, r1, r0, asr r0

00009390 <AUX_IRQ>:
    9390:	20215000 	eorcs	r5, r1, r0

00009394 <GPFSEL0>:
    9394:	20200000 	eorcs	r0, r0, r0

00009398 <GPFSEL1>:
    9398:	20200004 	eorcs	r0, r0, r4

0000939c <GPFSEL2>:
    939c:	20200008 	eorcs	r0, r0, r8

000093a0 <GPFSEL3>:
    93a0:	2020000c 	eorcs	r0, r0, ip

000093a4 <GPFSEL4>:
    93a4:	20200010 	eorcs	r0, r0, r0, lsl r0

000093a8 <GPFSEL5>:
    93a8:	20200014 	eorcs	r0, r0, r4, lsl r0

000093ac <GPSET0>:
    93ac:	2020001c 	eorcs	r0, r0, ip, lsl r0

000093b0 <GPSET1>:
    93b0:	20200020 	eorcs	r0, r0, r0, lsr #32

000093b4 <GPCLR0>:
    93b4:	20200028 	eorcs	r0, r0, r8, lsr #32

000093b8 <GPCLR1>:
    93b8:	2020002c 	eorcs	r0, r0, ip, lsr #32

000093bc <GPLEV0>:
    93bc:	20200034 	eorcs	r0, r0, r4, lsr r0

000093c0 <GPLEV1>:
    93c0:	20200038 	eorcs	r0, r0, r8, lsr r0

000093c4 <gpio_clr0>:
    93c4:	20200028 	eorcs	r0, r0, r8, lsr #32

000093c8 <gpio_set0>:
    93c8:	2020001c 	eorcs	r0, r0, ip, lsl r0

000093cc <gpio_fsel0>:
    93cc:	20200000 	eorcs	r0, r0, r0

000093d0 <rpi_putchar>:
    93d0:	00009348 	andeq	r9, r0, r8, asr #6

Disassembly of section .rodata:

000093d4 <__FUNCTION__.4245-0x8c>:
    93d4:	203a6425 	eorscs	r6, sl, r5, lsr #8
    93d8:	696b7361 	stmdbvs	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    93dc:	7420676e 	strtvc	r6, [r0], #-1902	; 0x76e
    93e0:	7270206f 	rsbsvc	r2, r0, #111	; 0x6f
    93e4:	20746e69 	rsbscs	r6, r4, r9, ror #28
    93e8:	73206e6f 	teqvc	r0, #1776	; 0x6f0
    93ec:	61752d77 	cmnvs	r5, r7, ror sp
    93f0:	000a7472 	andeq	r7, sl, r2, ror r4
    93f4:	203a6425 	eorscs	r6, sl, r5, lsr #8
    93f8:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xe65
    93fc:	20612072 	rsbcs	r2, r1, r2, ror r0
    9400:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    9404:	65746361 	ldrbvs	r6, [r4, #-865]!	; 0x361
    9408:	74282072 	strtvc	r2, [r8], #-114	; 0x72
    940c:	6f656d69 	svcvs	0x00656d69
    9410:	253d7475 	ldrcs	r7, [sp, #-1141]!	; 0x475
    9414:	63657364 	cmnvs	r5, #100, 6	; 0x90000001
    9418:	00203a29 	eoreq	r3, r0, r9, lsr #20
    941c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    9420:	3a74756f 	bcc	1d269e4 <__bss_end__+0x1d1cf34>
    9424:	73657220 	cmnvc	r5, #32, 4
    9428:	2164253d 	cmncs	r4, sp, lsr r5
    942c:	0000000a 	andeq	r0, r0, sl
    9430:	2d57530a 	ldclcs	3, cr5, [r7, #-40]	; 0xffffffd8
    9434:	54524155 	ldrbpl	r4, [r2], #-341	; 0x155
    9438:	6f67203a 	svcvs	0x0067203a
    943c:	68632074 	stmdavs	r3!, {r2, r4, r5, r6, sp}^
    9440:	3c207261 	sfmcc	f7, 4, [r0], #-388	; 0xfffffe7c
    9444:	203e6325 	eorscs	r6, lr, r5, lsr #6
    9448:	746e6928 	strbtvc	r6, [lr], #-2344	; 0x928
    944c:	3d6c6176 	stfcce	f6, [ip, #-472]!	; 0xfffffe28
    9450:	202c6425 	eorcs	r6, ip, r5, lsr #8
    9454:	73746962 	cmnvc	r4, #1605632	; 0x188000
    9458:	2962253d 	stmdbcs	r2!, {r0, r2, r3, r4, r5, r8, sl, sp}^
    945c:	0000000a 	andeq	r0, r0, sl

00009460 <__FUNCTION__.4245>:
    9460:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 8cf5 <set_user_level+0x5>
    9464:	5f747261 	svcpl	0x00747261
    9468:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
    946c:	746e755f 	strbtvc	r7, [lr], #-1375	; 0x55f
    9470:	00006c69 	andeq	r6, r0, r9, ror #24

00009474 <__FUNCTION__.4257>:
    9474:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 8d09 <rpi_reboot+0x5>
    9478:	5f747261 	svcpl	0x00747261
    947c:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
    9480:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    9484:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
    9488:	00000000 	andeq	r0, r0, r0

0000948c <__FUNCTION__.4271>:
    948c:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 8d21 <rpi_reboot+0x1d>
    9490:	5f747261 	svcpl	0x00747261
    9494:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    9498:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
    949c:	00726570 	rsbseq	r6, r2, r0, ror r5

000094a0 <__FUNCTION__.4277>:
    94a0:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 8d35 <rpi_reboot+0x31>
    94a4:	5f747261 	svcpl	0x00747261
    94a8:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
    94ac:	00000000 	andeq	r0, r0, r0

000094b0 <__FUNCTION__.4299>:
    94b0:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 8d45 <rpi_reboot+0x41>
    94b4:	5f747261 	svcpl	0x00747261
    94b8:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    94bc:	00006b74 	andeq	r6, r0, r4, ror fp

000094c0 <__FUNCTION__.4307>:
    94c0:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 8d55 <delay_cycles+0x9>
    94c4:	5f747261 	svcpl	0x00747261
    94c8:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
    94cc:	746e755f 	strbtvc	r7, [lr], #-1375	; 0x55f
    94d0:	625f6c69 	subsvs	r6, pc, #26880	; 0x6900
    94d4:	00006b6c 	andeq	r6, r0, ip, ror #22
    94d8:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    94dc:	73253a43 	teqvc	r5, #274432	; 0x43000
    94e0:	3a73253a 	bcc	1cd29d0 <__bss_end__+0x1cc8f20>
    94e4:	6e3a6425 	cdpvs	4, 3, cr6, cr10, cr5, {1}
    94e8:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
    94ec:	0a303e73 	beq	c18ec0 <__bss_end__+0xc0f410>
    94f0:	00000000 	andeq	r0, r0, r0
    94f4:	752d7773 	strvc	r7, [sp, #-1907]!	; 0x773
    94f8:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    94fc:	00000063 	andeq	r0, r0, r3, rrx
    9500:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9504:	73253a43 	teqvc	r5, #274432	; 0x43000
    9508:	3a73253a 	bcc	1cd29f8 <__bss_end__+0x1cc8f48>
    950c:	283a6425 	ldmdacs	sl!, {r0, r2, r5, sl, sp, lr}
    9510:	207a686d 	rsbscs	r6, sl, sp, ror #16
    9514:	6162202d 	cmnvs	r2, sp, lsr #32
    9518:	20296475 	eorcs	r6, r9, r5, ror r4
    951c:	64203d3c 	strtvs	r3, [r0], #-3388	; 0xd3c
    9520:	76697265 	strbtvc	r7, [r9], -r5, ror #4
    9524:	26206465 	strtcs	r6, [r0], -r5, ror #8
    9528:	65642026 	strbvs	r2, [r4, #-38]!	; 0x26
    952c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    9530:	3d3c2064 	ldccc	0, cr2, [ip, #-400]!	; 0xfffffe70
    9534:	686d2820 	stmdavs	sp!, {r5, fp, sp}^
    9538:	202b207a 	eorcs	r2, fp, sl, ror r0
    953c:	64756162 	ldrbtvs	r6, [r5], #-354	; 0x162
    9540:	00000a29 	andeq	r0, r0, r9, lsr #20
    9544:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9548:	73253a43 	teqvc	r5, #274432	; 0x43000
    954c:	3a73253a 	bcc	1cd2a3c <__bss_end__+0x1cc8f8c>
    9550:	693a6425 	ldmdbvs	sl!, {r0, r2, r5, sl, sp, lr}
    9554:	736f706d 	cmnvc	pc, #109	; 0x6d
    9558:	6c626973 	stclvs	9, cr6, [r2], #-460	; 0xfffffe34
    955c:	68203a65 	stmdavs	r0!, {r0, r2, r5, r6, r9, fp, ip, sp}
    9560:	20657661 	rsbcs	r7, r5, r1, ror #12
    9564:	69206e61 	stmdbvs	r0!, {r0, r5, r6, r9, sl, fp, sp, lr}
    9568:	6e69666e 	cdpvs	6, 6, cr6, cr9, cr14, {3}
    956c:	20657469 	rsbcs	r7, r5, r9, ror #8
    9570:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    9574:	2174756f 	cmncs	r4, pc, ror #10
    9578:	00000a0a 	andeq	r0, r0, sl, lsl #20
    957c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9580:	73253a43 	teqvc	r5, #274432	; 0x43000
    9584:	3a73253a 	bcc	1cd2a74 <__bss_end__+0x1cc8fc4>
    9588:	733a6425 	teqvc	sl, #620756992	; 0x25000000
    958c:	203c207a 	eorscs	r2, ip, sl, ror r0
    9590:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
    9594:	6220666f 	eorvs	r6, r0, #116391936	; 0x6f00000
    9598:	312d6675 	teqcc	sp, r5, ror r6
    959c:	0000000a 	andeq	r0, r0, sl

000095a0 <__FUNCTION__.4197>:
    95a0:	74696d65 	strbtvc	r6, [r9], #-3429	; 0xd65
    95a4:	00000000 	andeq	r0, r0, r0

000095a8 <__FUNCTION__.4145>:
    95a8:	5f697072 	svcpl	0x00697072
    95ac:	5f746573 	svcpl	0x00746573
    95b0:	7074756f 	rsbsvc	r7, r4, pc, ror #10
    95b4:	00007475 	andeq	r7, r0, r5, ror r4

000095b8 <__FUNCTION__.4219>:
    95b8:	705f6176 	subsvc	r6, pc, r6, ror r1	; <UNPREDICTABLE>
    95bc:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    95c0:	0000006b 	andeq	r0, r0, fp, rrx
    95c4:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    95c8:	73253a43 	teqvc	r5, #274432	; 0x43000
    95cc:	3a73253a 	bcc	1cd2abc <__bss_end__+0x1cc900c>
    95d0:	303a6425 	eorscc	r6, sl, r5, lsr #8
    95d4:	0000000a 	andeq	r0, r0, sl
    95d8:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    95dc:	2d61762f 	stclcs	6, cr7, [r1, #-188]!	; 0xffffff44
    95e0:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    95e4:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
    95e8:	00000000 	andeq	r0, r0, r0
    95ec:	33323130 	teqcc	r2, #48, 2
    95f0:	37363534 			; <UNDEFINED> instruction: 0x37363534
    95f4:	00003938 	andeq	r3, r0, r8, lsr r9
    95f8:	33323130 	teqcc	r2, #48, 2
    95fc:	37363534 			; <UNDEFINED> instruction: 0x37363534
    9600:	62613938 	rsbvs	r3, r1, #56, 18	; 0xe0000
    9604:	66656463 	strbtvs	r6, [r5], -r3, ror #8
    9608:	00000000 	andeq	r0, r0, r0
    960c:	00003130 	andeq	r3, r0, r0, lsr r1
    9610:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9614:	73253a43 	teqvc	r5, #274432	; 0x43000
    9618:	3a73253a 	bcc	1cd2b08 <__bss_end__+0x1cc9058>
    961c:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    9620:	5f637475 	svcpl	0x00637475
    9624:	000a7066 	andeq	r7, sl, r6, rrx
    9628:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    962c:	73253a43 	teqvc	r5, #274432	; 0x43000
    9630:	3a73253a 	bcc	1cd2b20 <__bss_end__+0x1cc9070>
    9634:	773a6425 	ldrvc	r6, [sl, -r5, lsr #8]!
    9638:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
    963c:	33203c20 	teqcc	r0, #32, 24	; 0x2000
    9640:	00000a32 	andeq	r0, r0, r2, lsr sl
    9644:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9648:	73253a43 	teqvc	r5, #274432	; 0x43000
    964c:	3a73253a 	bcc	1cd2b3c <__bss_end__+0x1cc908c>
    9650:	663a6425 	ldrtvs	r6, [sl], -r5, lsr #8
    9654:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xf6c
    9658:	746f6e20 	strbtvc	r6, [pc], #-3616	; 9660 <__FUNCTION__.4219+0xa8>
    965c:	616e6520 	cmnvs	lr, r0, lsr #10
    9660:	64656c62 	strbtvs	r6, [r5], #-3170	; 0xc62
    9664:	0a212121 	beq	851af0 <__bss_end__+0x848040>
    9668:	00000000 	andeq	r0, r0, r0
    966c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9670:	73253a43 	teqvc	r5, #274432	; 0x43000
    9674:	3a73253a 	bcc	1cd2b64 <__bss_end__+0x1cc90b4>
    9678:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    967c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    9680:	6e203a6b 	vnmulvs.f32	s6, s0, s23
    9684:	6820746f 	stmdavs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
    9688:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    968c:	20676e69 	rsbcs	r6, r7, r9, ror #28
    9690:	63657073 	cmnvs	r5, #115	; 0x73
    9694:	65696669 	strbvs	r6, [r9, #-1641]!	; 0x669
    9698:	25272072 	strcs	r2, [r7, #-114]!	; 0x72
    969c:	0a0a2763 	beq	293430 <__bss_end__+0x289980>
    96a0:	00000000 	andeq	r0, r0, r0
    96a4:	454e4f44 	strbmi	r4, [lr, #-3908]	; 0xf44
    96a8:	0a212121 	beq	851b34 <__bss_end__+0x848084>
    96ac:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss:

000096b0 <__bss_start__>:
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4b5a3605 	blmi	168d82c <__bss_end__+0x1683d7c>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	12010901 	andne	r0, r1, #16384	; 0x4000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0x404
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	22011a01 	andcs	r1, r1, #4096	; 0x1000
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__bss_end__+0x10c7274>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	34202955 	strtcc	r2, [r0], #-2389	; 0x955
   c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000030 	andeq	r0, r0, r0, lsr r0
      10:	00000e01 	andeq	r0, r0, r1, lsl #28
      14:	00015900 	andeq	r5, r1, r0, lsl #18
      18:	00801000 	addeq	r1, r0, r0
      1c:	0000d000 	andeq	sp, r0, r0
      20:	00000000 	andeq	r0, r0, r0
      24:	05040200 	streq	r0, [r4, #-512]	; 0x200
      28:	00746e69 	rsbseq	r6, r4, r9, ror #28
      2c:	f3070403 	vshl.u8	d0, d3, d7
      30:	03000000 	movweq	r0, #0
      34:	00aa0601 	adceq	r0, sl, r1, lsl #12
      38:	02030000 	andeq	r0, r3, #0
      3c:	00013905 	andeq	r3, r1, r5, lsl #18
      40:	05040300 	streq	r0, [r4, #-768]	; 0x300
      44:	00000130 	andeq	r0, r0, r0, lsr r1
      48:	2b050803 	blcs	14205c <__bss_end__+0x1385ac>
      4c:	04000001 	streq	r0, [r0], #-1
      50:	00000100 	andeq	r0, r0, r0, lsl #2
      54:	005a2e02 	subseq	r2, sl, r2, lsl #28
      58:	01030000 	mrseq	r0, (UNDEF: 3)
      5c:	0000a808 	andeq	sl, r0, r8, lsl #16
      60:	07020300 	streq	r0, [r2, -r0, lsl #6]
      64:	000000cc 	andeq	r0, r0, ip, asr #1
      68:	00015004 	andeq	r5, r1, r4
      6c:	73340200 	teqvc	r4, #0, 4
      70:	03000000 	movweq	r0, #0
      74:	00ee0704 	rsceq	r0, lr, r4, lsl #14
      78:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
      7c:	0000e907 	andeq	lr, r0, r7, lsl #18
      80:	07040300 	streq	r0, [r4, -r0, lsl #6]
      84:	00000122 	andeq	r0, r0, r2, lsr #2
      88:	b1080103 	tstlt	r8, r3, lsl #2
      8c:	05000000 	streq	r0, [r0, #-0]
      90:	00009504 	andeq	r9, r0, r4, lsl #10
      94:	00880600 	addeq	r0, r8, r0, lsl #12
      98:	0c070000 	stceq	0, cr0, [r7], {-0}
      9c:	00d10e03 	sbcseq	r0, r1, r3, lsl #28
      a0:	74080000 	strvc	r0, [r8], #-0
      a4:	0f030078 	svceq	0x00030078
      a8:	0000004f 	andeq	r0, r0, pc, asr #32
      ac:	78720800 	ldmdavc	r2!, {fp}^
      b0:	4f0f0300 	svcmi	0x000f0300
      b4:	01000000 	mrseq	r0, (UNDEF: 0)
      b8:	00010809 	andeq	r0, r1, r9, lsl #16
      bc:	68100300 	ldmdavs	r0, {r8, r9}
      c0:	04000000 	streq	r0, [r0], #-0
      c4:	00000009 	andeq	r0, r0, r9
      c8:	68110300 	ldmdavs	r1, {r8, r9}
      cc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
      d0:	00df0400 	sbcseq	r0, pc, r0, lsl #8
      d4:	12030000 	andne	r0, r3, #0
      d8:	0000009a 	muleq	r0, sl, r0
      dc:	0000870a 	andeq	r8, r0, sl, lsl #14
      e0:	10070100 	andne	r0, r7, r0, lsl #2
      e4:	d0000080 	andle	r0, r0, r0, lsl #1
      e8:	01000000 	mrseq	r0, (UNDEF: 0)
      ec:	0002189c 	muleq	r2, ip, r8
      f0:	00750b00 	rsbseq	r0, r5, r0, lsl #22
      f4:	00d10c01 	sbcseq	r0, r1, r1, lsl #24
      f8:	91020000 	mrsls	r0, (UNDEF: 2)
      fc:	803c0c54 	eorshi	r0, ip, r4, asr ip
     100:	00840000 	addeq	r0, r4, r0
     104:	01ce0000 	biceq	r0, lr, r0
     108:	690d0000 	stmdbvs	sp, {}	; <UNPREDICTABLE>
     10c:	250f0100 	strcs	r0, [pc, #-256]	; 14 <_start-0x7fec>
     110:	00000000 	andeq	r0, r0, r0
     114:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     118:	00000000 	andeq	r0, r0, r0
     11c:	0002c90f 	andeq	ip, r2, pc, lsl #18
     120:	2c120100 	ldfcss	f0, [r2], {-0}
     124:	1f000000 	svcne	0x00000000
     128:	0d000000 	stceq	0, cr0, [r0, #-0]
     12c:	00736572 	rsbseq	r6, r3, r2, ror r5
     130:	00251401 	eoreq	r1, r5, r1, lsl #8
     134:	00330000 	eorseq	r0, r3, r0
     138:	64100000 	ldrvs	r0, [r0], #-0
     13c:	18000080 	stmdane	r0, {r7}
     140:	54000002 	strpl	r0, [r0], #-2
     144:	11000001 	tstne	r0, r1
     148:	74025101 	strvc	r5, [r2], #-257	; 0x101
     14c:	50011100 	andpl	r1, r1, r0, lsl #2
     150:	00007702 	andeq	r7, r0, r2, lsl #14
     154:	00807810 	addeq	r7, r0, r0, lsl r8
     158:	00022e00 	andeq	r2, r2, r0, lsl #28
     15c:	00017900 	andeq	r7, r1, r0, lsl #18
     160:	53011100 	movwpl	r1, #4352	; 0x1100
     164:	01113501 	tsteq	r1, r1, lsl #10
     168:	00740252 	rsbseq	r0, r4, r2, asr r2
     16c:	02510111 	subseq	r0, r1, #1073741828	; 0x40000004
     170:	01110076 	tsteq	r1, r6, ror r0
     174:	4c910250 	lfmmi	f0, 4, [r1], {80}	; 0x50
     178:	80841000 	addhi	r1, r4, r0
     17c:	024f0000 	subeq	r0, pc, #0
     180:	01930000 	orrseq	r0, r3, r0
     184:	01110000 	tsteq	r1, r0
     188:	00750251 	rsbseq	r0, r5, r1, asr r2
     18c:	02500111 	subseq	r0, r0, #1073741828	; 0x40000004
     190:	10004c91 	mulne	r0, r1, ip
     194:	00008098 	muleq	r0, r8, r0
     198:	00000218 	andeq	r0, r0, r8, lsl r2
     19c:	000001a7 	andeq	r0, r0, r7, lsr #3
     1a0:	02500111 	subseq	r0, r0, #1073741828	; 0x40000004
     1a4:	10000079 	andne	r0, r0, r9, ror r0
     1a8:	000080ac 	andeq	r8, r0, ip, lsr #1
     1ac:	00000218 	andeq	r0, r0, r8, lsl r2
     1b0:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
     1b4:	02500111 	subseq	r0, r0, #1073741828	; 0x40000004
     1b8:	12000078 	andne	r0, r0, #120	; 0x78
     1bc:	000080b4 	strheq	r8, [r0], -r4
     1c0:	00000269 	andeq	r0, r0, r9, ror #4
     1c4:	03500111 	cmpeq	r0, #1073741828	; 0x40000004
     1c8:	0007d00a 	andeq	sp, r7, sl
     1cc:	1c130000 	ldcne	0, cr0, [r3], {-0}
     1d0:	7a000080 	bvc	3d8 <_start-0x7c28>
     1d4:	13000002 	movwne	r0, #2
     1d8:	00008020 	andeq	r8, r0, r0, lsr #32
     1dc:	00000281 	andeq	r0, r0, r1, lsl #5
     1e0:	00803c10 	addeq	r3, r0, r0, lsl ip
     1e4:	00028800 	andeq	r8, r2, r0, lsl #16
     1e8:	00020e00 	andeq	r0, r2, r0, lsl #28
     1ec:	53011100 	movwpl	r1, #4352	; 0x1100
     1f0:	39e10804 	stmibcc	r1!, {r2, fp}^
     1f4:	52011124 	andpl	r1, r1, #36, 2
     1f8:	01114501 	tsteq	r1, r1, lsl #10
     1fc:	11440151 	cmpne	r4, r1, asr r1
     200:	91025001 	tstls	r2, r1
     204:	7d02114c 	stfvcs	f1, [r2, #-304]	; 0xfffffed0
     208:	bc0a0300 	stclt	3, cr0, [sl], {-0}
     20c:	c4130017 	ldrgt	r0, [r3], #-23
     210:	ac000080 	stcge	0, cr0, [r0], {128}	; 0x80
     214:	00000002 	andeq	r0, r0, r2
     218:	00025314 	andeq	r5, r2, r4, lsl r3
     21c:	25270400 	strcs	r0, [r7, #-1024]!	; 0x400
     220:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
     224:	15000002 	strne	r0, [r0, #-2]
     228:	0000008f 	andeq	r0, r0, pc, lsl #1
     22c:	99140016 	ldmdbls	r4, {r1, r2, r4}
     230:	03000000 	movweq	r0, #0
     234:	00002515 	andeq	r2, r0, r5, lsl r5
     238:	00024900 	andeq	r4, r2, r0, lsl #18
     23c:	02491500 	subeq	r1, r9, #0, 10
     240:	8f150000 	svchi	0x00150000
     244:	16000000 	strne	r0, [r0], -r0
     248:	d1040500 	tstle	r4, r0, lsl #10
     24c:	14000000 	strne	r0, [r0], #-0
     250:	0000010d 	andeq	r0, r0, sp, lsl #2
     254:	00252d03 	eoreq	r2, r5, r3, lsl #26
     258:	02690000 	rsbeq	r0, r9, #0
     25c:	49150000 	ldmdbmi	r5, {}	; <UNPREDICTABLE>
     260:	15000002 	strne	r0, [r0, #-2]
     264:	00000025 	andeq	r0, r0, r5, lsr #32
     268:	00b61700 	adcseq	r1, r6, r0, lsl #14
     26c:	4d040000 	stcmi	0, cr0, [r4, #-0]
     270:	0000027a 	andeq	r0, r0, sl, ror r2
     274:	00002c15 	andeq	r2, r0, r5, lsl ip
     278:	8f180000 	svchi	0x00180000
     27c:	04000000 	streq	r0, [r0], #-0
     280:	01431838 	cmpeq	r3, r8, lsr r8
     284:	88040000 	stmdahi	r4, {}	; <UNPREDICTABLE>
     288:	00001c14 	andeq	r1, r0, r4, lsl ip
     28c:	d11d0300 	tstle	sp, r0, lsl #6
     290:	ac000000 	stcge	0, cr0, [r0], {-0}
     294:	15000002 	strne	r0, [r0, #-2]
     298:	0000004f 	andeq	r0, r0, pc, asr #32
     29c:	00004f15 	andeq	r4, r0, r5, lsl pc
     2a0:	00681500 	rsbeq	r1, r8, r0, lsl #10
     2a4:	68150000 	ldmdavs	r5, {}	; <UNPREDICTABLE>
     2a8:	00000000 	andeq	r0, r0, r0
     2ac:	0000bf18 	andeq	fp, r0, r8, lsl pc
     2b0:	00630400 	rsbeq	r0, r3, r0, lsl #8
     2b4:	000011a7 	andeq	r1, r0, r7, lsr #3
     2b8:	013f0004 	teqeq	pc, r4
     2bc:	01040000 	mrseq	r0, (UNDEF: 4)
     2c0:	00000030 	andeq	r0, r0, r0, lsr r0
     2c4:	00026401 	andeq	r6, r2, r1, lsl #8
     2c8:	00015900 	andeq	r5, r1, r0, lsl #18
     2cc:	0080e000 	addeq	lr, r0, r0
     2d0:	00060000 	andeq	r0, r6, r0
     2d4:	00011600 	andeq	r1, r1, r0, lsl #12
     2d8:	05040200 	streq	r0, [r4, #-512]	; 0x200
     2dc:	00746e69 	rsbseq	r6, r4, r9, ror #28
     2e0:	f3070403 	vshl.u8	d0, d3, d7
     2e4:	03000000 	movweq	r0, #0
     2e8:	00aa0601 	adceq	r0, sl, r1, lsl #12
     2ec:	02030000 	andeq	r0, r3, #0
     2f0:	00013905 	andeq	r3, r1, r5, lsl #18
     2f4:	05040300 	streq	r0, [r4, #-768]	; 0x300
     2f8:	00000130 	andeq	r0, r0, r0, lsr r1
     2fc:	2b050803 	blcs	142310 <__bss_end__+0x138860>
     300:	04000001 	streq	r0, [r0], #-1
     304:	00000100 	andeq	r0, r0, r0, lsl #2
     308:	005a2e03 	subseq	r2, sl, r3, lsl #28
     30c:	01030000 	mrseq	r0, (UNDEF: 3)
     310:	0000a808 	andeq	sl, r0, r8, lsl #16
     314:	07020300 	streq	r0, [r2, -r0, lsl #6]
     318:	000000cc 	andeq	r0, r0, ip, asr #1
     31c:	00015004 	andeq	r5, r1, r4
     320:	73340300 	teqvc	r4, #0, 6
     324:	03000000 	movweq	r0, #0
     328:	00ee0704 	rsceq	r0, lr, r4, lsl #14
     32c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     330:	0000e907 	andeq	lr, r0, r7, lsl #18
     334:	07040300 	streq	r0, [r4, -r0, lsl #6]
     338:	00000122 	andeq	r0, r0, r2, lsr #2
     33c:	04060405 	streq	r0, [r6], #-1029	; 0x405
     340:	00000090 	muleq	r0, r0, r0
     344:	b1080103 	tstlt	r8, r3, lsl #2
     348:	06000000 	streq	r0, [r0], -r0
     34c:	00009d04 	andeq	r9, r0, r4, lsl #26
     350:	00900700 	addseq	r0, r0, r0, lsl #14
     354:	0c080000 	stceq	0, cr0, [r8], {-0}
     358:	00d90e04 	sbcseq	r0, r9, r4, lsl #28
     35c:	74090000 	strvc	r0, [r9], #-0
     360:	0f040078 	svceq	0x00040078
     364:	0000004f 	andeq	r0, r0, pc, asr #32
     368:	78720900 	ldmdavc	r2!, {r8, fp}^
     36c:	4f0f0400 	svcmi	0x000f0400
     370:	01000000 	mrseq	r0, (UNDEF: 0)
     374:	0001080a 	andeq	r0, r1, sl, lsl #16
     378:	68100400 	ldmdavs	r0, {sl}
     37c:	04000000 	streq	r0, [r0], #-0
     380:	0000000a 	andeq	r0, r0, sl
     384:	68110400 	ldmdavs	r1, {sl}
     388:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     38c:	00df0400 	sbcseq	r0, pc, r0, lsl #8
     390:	12040000 	andne	r0, r4, #0
     394:	000000a2 	andeq	r0, r0, r2, lsr #1
     398:	00027604 	andeq	r7, r2, r4, lsl #12
     39c:	ef280500 	svc	0x00280500
     3a0:	0b000000 	bleq	3a8 <_start-0x7c58>
     3a4:	000001ef 	andeq	r0, r0, pc, ror #3
     3a8:	06000904 	streq	r0, [r0], -r4, lsl #18
     3ac:	0c000001 	stceq	0, cr0, [r0], {1}
     3b0:	000002f7 	strdeq	r0, [r0], -r7
     3b4:	00000088 	andeq	r0, r0, r8, lsl #1
     3b8:	f1040000 	cps	#0
     3bc:	05000001 	streq	r0, [r0, #-1]
     3c0:	0000e462 	andeq	lr, r0, r2, ror #8
     3c4:	020e0d00 	andeq	r0, lr, #0, 26
     3c8:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
     3cc:	00013f03 	andeq	r3, r1, r3, lsl #30
     3d0:	04760e00 	ldrbteq	r0, [r6], #-3584	; 0xe00
     3d4:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
     3d8:	0000002c 	andeq	r0, r0, ip, lsr #32
     3dc:	02006e0f 	andeq	r6, r0, #15, 28	; 0xf0
     3e0:	00002c09 	andeq	r2, r0, r9, lsl #24
     3e4:	9a111000 	bls	4443ec <__bss_end__+0x43a93c>
     3e8:	02000002 	andeq	r0, r0, #2
     3ec:	00002c0c 	andeq	r2, r0, ip, lsl #24
     3f0:	0d000000 	stceq	0, cr0, [r0, #-0]
     3f4:	000001cc 	andeq	r0, r0, ip, asr #3
     3f8:	76031702 	strvc	r1, [r3], -r2, lsl #14
     3fc:	0f000001 	svceq	0x00000001
     400:	006e6970 	rsbeq	r6, lr, r0, ror r9
     404:	002c1702 	eoreq	r1, ip, r2, lsl #14
     408:	760f0000 	strvc	r0, [pc], -r0
     40c:	2c170200 	lfmcs	f0, 4, [r7], {-0}
     410:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     414:	00000476 	andeq	r0, r0, r6, ror r4
     418:	002c1702 	eoreq	r1, ip, r2, lsl #14
     41c:	140e0000 	strne	r0, [lr], #-0
     420:	02000002 	andeq	r0, r0, #2
     424:	00002c17 	andeq	r2, r0, r7, lsl ip
     428:	36120000 	ldrcc	r0, [r2], -r0
     42c:	01000002 	tsteq	r0, r2
     430:	0080e009 	addeq	lr, r0, r9
     434:	00015800 	andeq	r5, r1, r0, lsl #16
     438:	559c0100 	ldrpl	r0, [ip, #256]	; 0x100
     43c:	13000007 	movwne	r0, #7
     440:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
     444:	07550901 	ldrbeq	r0, [r5, -r1, lsl #18]
     448:	00670000 	rsbeq	r0, r7, r0
     44c:	63140000 	tstvs	r4, #0
     450:	5a090100 	bpl	240858 <__bss_end__+0x236da8>
     454:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
     458:	15000000 	strne	r0, [r0, #-0]
     45c:	01007874 	tsteq	r0, r4, ror r8
     460:	0000250b 	andeq	r2, r0, fp, lsl #10
     464:	00760600 	rsbseq	r0, r6, r0, lsl #12
     468:	9f1aff08 	svcls	0x001aff08
     46c:	01006e16 	tsteq	r0, r6, lsl lr
     470:	0000680c 	andeq	r6, r0, ip, lsl #16
     474:	0000a900 	andeq	sl, r0, r0, lsl #18
     478:	00751600 	rsbseq	r1, r5, r0, lsl #12
     47c:	00680d01 	rsbeq	r0, r8, r1, lsl #26
     480:	00a90000 	adceq	r0, r9, r0
     484:	73170000 	tstvc	r7, #0
     488:	680e0100 	stmdavs	lr, {r8}
     48c:	16000000 	strne	r0, [r0], -r0
     490:	00646e65 	rsbeq	r6, r4, r5, ror #28
     494:	002c1101 	eoreq	r1, ip, r1, lsl #2
     498:	00bc0000 	adcseq	r0, ip, r0
     49c:	76180000 	ldrvc	r0, [r8], -r0
     4a0:	01000004 	tsteq	r0, r4
     4a4:	00002c12 	andeq	r2, r0, r2, lsl ip
     4a8:	19540100 	ldmdbne	r4, {r8}^
     4ac:	000080f0 	strdeq	r8, [r0], -r0
     4b0:	00000004 	andeq	r0, r0, r4
     4b4:	00000210 	andeq	r0, r0, r0, lsl r2
     4b8:	00029a11 	andeq	r9, r2, r1, lsl sl
     4bc:	2c0e0100 	stfcss	f0, [lr], {-0}
     4c0:	00000000 	andeq	r0, r0, r0
     4c4:	0080f419 	addeq	pc, r0, r9, lsl r4	; <UNPREDICTABLE>
     4c8:	00000400 	andeq	r0, r0, r0, lsl #8
     4cc:	00022b00 	andeq	r2, r2, r0, lsl #22
     4d0:	029a1800 	addseq	r1, sl, #0, 16
     4d4:	12010000 	andne	r0, r1, #0
     4d8:	0000002c 	andeq	r0, r0, ip, lsr #32
     4dc:	1a005401 	bne	154e8 <__bss_end__+0xba38>
     4e0:	0000013f 	andeq	r0, r0, pc, lsr r1
     4e4:	000080f8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
     4e8:	0000001c 	andeq	r0, r0, ip, lsl r0
     4ec:	02a81501 	adceq	r1, r8, #4194304	; 0x400000
     4f0:	6a1b0000 	bvs	6c04f8 <__bss_end__+0x6b6a48>
     4f4:	e5000001 	str	r0, [r0, #-1]
     4f8:	1c000000 	stcne	0, cr0, [r0], {-0}
     4fc:	0000015f 	andeq	r0, r0, pc, asr r1
     500:	561d5401 	ldrpl	r5, [sp], -r1, lsl #8
     504:	00000001 	andeq	r0, r0, r1
     508:	00014b1c 	andeq	r4, r1, ip, lsl fp
     50c:	1a560100 	bne	1580914 <__bss_end__+0x1576e64>
     510:	00000111 	andeq	r0, r0, r1, lsl r1
     514:	00008104 	andeq	r8, r0, r4, lsl #2
     518:	00000010 	andeq	r0, r0, r0, lsl r0
     51c:	02921a02 	addseq	r1, r2, #8192	; 0x2000
     520:	281b0000 	ldmdacs	fp, {}	; <UNPREDICTABLE>
     524:	f8000001 			; <UNDEFINED> instruction: 0xf8000001
     528:	1c000000 	stcne	0, cr0, [r0], {-0}
     52c:	0000011d 	andeq	r0, r0, sp, lsl r1
     530:	041e5401 	ldreq	r5, [lr], #-1025	; 0x401
     534:	04000081 	streq	r0, [r0], #-129	; 0x81
     538:	1f000000 	svcne	0x00000000
     53c:	00000132 	andeq	r0, r0, r2, lsr r1
     540:	0000010b 	andeq	r0, r0, fp, lsl #2
     544:	04200000 	strteq	r0, [r0], #-0
     548:	15000081 	strne	r0, [r0, #-129]	; 0x81
     54c:	21000011 	tstcs	r0, r1, lsl r0
     550:	30015101 	andcc	r5, r1, r1, lsl #2
     554:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
     558:	00000076 	andeq	r0, r0, r6, ror r0
     55c:	00013f1a 	andeq	r3, r1, sl, lsl pc
     560:	00811800 	addeq	r1, r1, r0, lsl #16
     564:	00001c00 	andeq	r1, r0, r0, lsl #24
     568:	2b170100 	blcs	5c0970 <__bss_end__+0x5b6ec0>
     56c:	1b000003 	blne	580 <_start-0x7a80>
     570:	0000016a 	andeq	r0, r0, sl, ror #2
     574:	0000011e 	andeq	r0, r0, lr, lsl r1
     578:	00015f1c 	andeq	r5, r1, ip, lsl pc
     57c:	1b540100 	blne	1500984 <__bss_end__+0x14f6ed4>
     580:	00000156 	andeq	r0, r0, r6, asr r1
     584:	00000140 	andeq	r0, r0, r0, asr #2
     588:	00014b1c 	andeq	r4, r1, ip, lsl fp
     58c:	1a560100 	bne	1580994 <__bss_end__+0x1576ee4>
     590:	00000111 	andeq	r0, r0, r1, lsl r1
     594:	00008124 	andeq	r8, r0, r4, lsr #2
     598:	00000010 	andeq	r0, r0, r0, lsl r0
     59c:	03121a02 	tsteq	r2, #8192	; 0x2000
     5a0:	281b0000 	ldmdacs	fp, {}	; <UNPREDICTABLE>
     5a4:	71000001 	tstvc	r0, r1
     5a8:	1c000001 	stcne	0, cr0, [r0], {1}
     5ac:	0000011d 	andeq	r0, r0, sp, lsl r1
     5b0:	241e5401 	ldrcs	r5, [lr], #-1025	; 0x401
     5b4:	04000081 	streq	r0, [r0], #-129	; 0x81
     5b8:	1f000000 	svcne	0x00000000
     5bc:	00000132 	andeq	r0, r0, r2, lsr r1
     5c0:	00000193 	muleq	r0, r3, r1
     5c4:	24200000 	strtcs	r0, [r0], #-0
     5c8:	15000081 	strne	r0, [r0, #-129]	; 0x81
     5cc:	21000011 	tstcs	r0, r1, lsl r0
     5d0:	77045101 	strvc	r5, [r4, -r1, lsl #2]
     5d4:	211a3100 	tstcs	sl, r0, lsl #2
     5d8:	76025001 	strvc	r5, [r2], -r1
     5dc:	1a000000 	bne	5e4 <_start-0x7a1c>
     5e0:	0000013f 	andeq	r0, r0, pc, lsr r1
     5e4:	00008138 	andeq	r8, r0, r8, lsr r1
     5e8:	0000001c 	andeq	r0, r0, ip, lsl r0
     5ec:	03b31901 			; <UNDEFINED> instruction: 0x03b31901
     5f0:	6a1b0000 	bvs	6c05f8 <__bss_end__+0x6b6b48>
     5f4:	a6000001 	strge	r0, [r0], -r1
     5f8:	1c000001 	stcne	0, cr0, [r0], {1}
     5fc:	0000015f 	andeq	r0, r0, pc, asr r1
     600:	561c5401 	ldrpl	r5, [ip], -r1, lsl #8
     604:	08000001 	stmdaeq	r0, {r0}
     608:	1a320077 	bne	c807ec <__bss_end__+0xc76d3c>
     60c:	9f1aff08 	svcls	0x001aff08
     610:	00014b1c 	andeq	r4, r1, ip, lsl fp
     614:	1a560100 	bne	1580a1c <__bss_end__+0x1576f6c>
     618:	00000111 	andeq	r0, r0, r1, lsl r1
     61c:	00008144 	andeq	r8, r0, r4, asr #2
     620:	00000010 	andeq	r0, r0, r0, lsl r0
     624:	039a1a02 	orrseq	r1, sl, #8192	; 0x2000
     628:	281b0000 	ldmdacs	fp, {}	; <UNPREDICTABLE>
     62c:	cb000001 	blgt	638 <_start-0x79c8>
     630:	1c000001 	stcne	0, cr0, [r0], {1}
     634:	0000011d 	andeq	r0, r0, sp, lsl r1
     638:	441e5401 	ldrmi	r5, [lr], #-1025	; 0x401
     63c:	04000081 	streq	r0, [r0], #-129	; 0x81
     640:	1f000000 	svcne	0x00000000
     644:	00000132 	andeq	r0, r0, r2, lsr r1
     648:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     64c:	44200000 	strtmi	r0, [r0], #-0
     650:	15000081 	strne	r0, [r0, #-129]	; 0x81
     654:	21000011 	tstcs	r0, r1, lsl r0
     658:	77045101 	strvc	r5, [r4, -r1, lsl #2]
     65c:	211a3200 	tstcs	sl, r0, lsl #4
     660:	76025001 	strvc	r5, [r2], -r1
     664:	1a000000 	bne	66c <_start-0x7994>
     668:	0000013f 	andeq	r0, r0, pc, lsr r1
     66c:	00008158 	andeq	r8, r0, r8, asr r1
     670:	0000001c 	andeq	r0, r0, ip, lsl r0
     674:	043b1b01 	ldrteq	r1, [fp], #-2817	; 0xb01
     678:	6a1b0000 	bvs	6c0680 <__bss_end__+0x6b6bd0>
     67c:	03000001 	movweq	r0, #1
     680:	1c000002 	stcne	0, cr0, [r0], {2}
     684:	0000015f 	andeq	r0, r0, pc, asr r1
     688:	561c5401 	ldrpl	r5, [ip], -r1, lsl #8
     68c:	08000001 	stmdaeq	r0, {r0}
     690:	1a340077 	bne	d00874 <__bss_end__+0xcf6dc4>
     694:	9f1aff08 	svcls	0x001aff08
     698:	00014b1c 	andeq	r4, r1, ip, lsl fp
     69c:	1a560100 	bne	1580aa4 <__bss_end__+0x1576ff4>
     6a0:	00000111 	andeq	r0, r0, r1, lsl r1
     6a4:	00008164 	andeq	r8, r0, r4, ror #2
     6a8:	00000010 	andeq	r0, r0, r0, lsl r0
     6ac:	04221a02 	strteq	r1, [r2], #-2562	; 0xa02
     6b0:	281b0000 	ldmdacs	fp, {}	; <UNPREDICTABLE>
     6b4:	25000001 	strcs	r0, [r0, #-1]
     6b8:	1c000002 	stcne	0, cr0, [r0], {2}
     6bc:	0000011d 	andeq	r0, r0, sp, lsl r1
     6c0:	641e5401 	ldrvs	r5, [lr], #-1025	; 0x401
     6c4:	04000081 	streq	r0, [r0], #-129	; 0x81
     6c8:	1f000000 	svcne	0x00000000
     6cc:	00000132 	andeq	r0, r0, r2, lsr r1
     6d0:	00000247 	andeq	r0, r0, r7, asr #4
     6d4:	64200000 	strtvs	r0, [r0], #-0
     6d8:	15000081 	strne	r0, [r0, #-129]	; 0x81
     6dc:	21000011 	tstcs	r0, r1, lsl r0
     6e0:	77045101 	strvc	r5, [r4, -r1, lsl #2]
     6e4:	211a3400 	tstcs	sl, r0, lsl #8
     6e8:	76025001 	strvc	r5, [r2], -r1
     6ec:	1a000000 	bne	6f4 <_start-0x790c>
     6f0:	0000013f 	andeq	r0, r0, pc, lsr r1
     6f4:	00008178 	andeq	r8, r0, r8, ror r1
     6f8:	0000001c 	andeq	r0, r0, ip, lsl r0
     6fc:	04c31d01 	strbeq	r1, [r3], #3329	; 0xd01
     700:	6a1b0000 	bvs	6c0708 <__bss_end__+0x6b6c58>
     704:	5a000001 	bpl	710 <_start-0x78f0>
     708:	1c000002 	stcne	0, cr0, [r0], {2}
     70c:	0000015f 	andeq	r0, r0, pc, asr r1
     710:	561c5401 	ldrpl	r5, [ip], -r1, lsl #8
     714:	08000001 	stmdaeq	r0, {r0}
     718:	1a380077 	bne	e008fc <__bss_end__+0xdf6e4c>
     71c:	9f1aff08 	svcls	0x001aff08
     720:	00014b1c 	andeq	r4, r1, ip, lsl fp
     724:	1a560100 	bne	1580b2c <__bss_end__+0x157707c>
     728:	00000111 	andeq	r0, r0, r1, lsl r1
     72c:	00008184 	andeq	r8, r0, r4, lsl #3
     730:	00000010 	andeq	r0, r0, r0, lsl r0
     734:	04aa1a02 	strteq	r1, [sl], #2562	; 0xa02
     738:	281b0000 	ldmdacs	fp, {}	; <UNPREDICTABLE>
     73c:	7f000001 	svcvc	0x00000001
     740:	1c000002 	stcne	0, cr0, [r0], {2}
     744:	0000011d 	andeq	r0, r0, sp, lsl r1
     748:	841e5401 	ldrhi	r5, [lr], #-1025	; 0x401
     74c:	04000081 	streq	r0, [r0], #-129	; 0x81
     750:	1f000000 	svcne	0x00000000
     754:	00000132 	andeq	r0, r0, r2, lsr r1
     758:	000002a4 	andeq	r0, r0, r4, lsr #5
     75c:	84200000 	strthi	r0, [r0], #-0
     760:	15000081 	strne	r0, [r0, #-129]	; 0x81
     764:	21000011 	tstcs	r0, r1, lsl r0
     768:	77045101 	strvc	r5, [r4, -r1, lsl #2]
     76c:	211a3800 	tstcs	sl, r0, lsl #16
     770:	76025001 	strvc	r5, [r2], -r1
     774:	1a000000 	bne	77c <_start-0x7884>
     778:	0000013f 	andeq	r0, r0, pc, lsr r1
     77c:	00008198 	muleq	r0, r8, r1
     780:	0000001c 	andeq	r0, r0, ip, lsl r0
     784:	054b1f01 	strbeq	r1, [fp, #-3841]	; 0xf01
     788:	6a1b0000 	bvs	6c0790 <__bss_end__+0x6b6ce0>
     78c:	b7000001 	strlt	r0, [r0, -r1]
     790:	1c000002 	stcne	0, cr0, [r0], {2}
     794:	0000015f 	andeq	r0, r0, pc, asr r1
     798:	561c5401 	ldrpl	r5, [ip], -r1, lsl #8
     79c:	08000001 	stmdaeq	r0, {r0}
     7a0:	1a400077 	bne	1000984 <__bss_end__+0xff6ed4>
     7a4:	9f1aff08 	svcls	0x001aff08
     7a8:	00014b1c 	andeq	r4, r1, ip, lsl fp
     7ac:	1a560100 	bne	1580bb4 <__bss_end__+0x1577104>
     7b0:	00000111 	andeq	r0, r0, r1, lsl r1
     7b4:	000081a4 	andeq	r8, r0, r4, lsr #3
     7b8:	00000010 	andeq	r0, r0, r0, lsl r0
     7bc:	05321a02 	ldreq	r1, [r2, #-2562]!	; 0xa02
     7c0:	281b0000 	ldmdacs	fp, {}	; <UNPREDICTABLE>
     7c4:	de000001 	cdple	0, 0, cr0, cr0, cr1, {0}
     7c8:	1c000002 	stcne	0, cr0, [r0], {2}
     7cc:	0000011d 	andeq	r0, r0, sp, lsl r1
     7d0:	a41e5401 	ldrge	r5, [lr], #-1025	; 0x401
     7d4:	04000081 	streq	r0, [r0], #-129	; 0x81
     7d8:	1f000000 	svcne	0x00000000
     7dc:	00000132 	andeq	r0, r0, r2, lsr r1
     7e0:	00000305 	andeq	r0, r0, r5, lsl #6
     7e4:	a4200000 	strtge	r0, [r0], #-0
     7e8:	15000081 	strne	r0, [r0, #-129]	; 0x81
     7ec:	21000011 	tstcs	r0, r1, lsl r0
     7f0:	77045101 	strvc	r5, [r4, -r1, lsl #2]
     7f4:	211a4000 	tstcs	sl, r0
     7f8:	76025001 	strvc	r5, [r2], -r1
     7fc:	1a000000 	bne	804 <_start-0x77fc>
     800:	0000013f 	andeq	r0, r0, pc, lsr r1
     804:	000081b8 			; <UNDEFINED> instruction: 0x000081b8
     808:	0000001c 	andeq	r0, r0, ip, lsl r0
     80c:	05d52101 	ldrbeq	r2, [r5, #257]	; 0x101
     810:	6a1b0000 	bvs	6c0818 <__bss_end__+0x6b6d68>
     814:	18000001 	stmdane	r0, {r0}
     818:	1c000003 	stcne	0, cr0, [r0], {3}
     81c:	0000015f 	andeq	r0, r0, pc, asr r1
     820:	561c5401 	ldrpl	r5, [ip], -r1, lsl #8
     824:	09000001 	stmdbeq	r0, {r0}
     828:	20080077 	andcs	r0, r8, r7, ror r0
     82c:	1aff081a 	bne	fffc289c <__bss_end__+0xfffb8dec>
     830:	014b1c9f 			; <UNDEFINED> instruction: 0x014b1c9f
     834:	56010000 	strpl	r0, [r1], -r0
     838:	0001111a 	andeq	r1, r1, sl, lsl r1
     83c:	0081c400 	addeq	ip, r1, r0, lsl #8
     840:	00001000 	andeq	r1, r0, r0
     844:	bb1a0200 	bllt	68104c <__bss_end__+0x67759c>
     848:	1b000005 	blne	864 <_start-0x779c>
     84c:	00000128 	andeq	r0, r0, r8, lsr #2
     850:	00000342 	andeq	r0, r0, r2, asr #6
     854:	00011d1c 	andeq	r1, r1, ip, lsl sp
     858:	1e540100 	rdfnes	f0, f4, f0
     85c:	000081c4 	andeq	r8, r0, r4, asr #3
     860:	00000004 	andeq	r0, r0, r4
     864:	0001321f 	andeq	r3, r1, pc, lsl r2
     868:	00036c00 	andeq	r6, r3, r0, lsl #24
     86c:	20000000 	andcs	r0, r0, r0
     870:	000081c4 	andeq	r8, r0, r4, asr #3
     874:	00001115 	andeq	r1, r0, r5, lsl r1
     878:	05510121 	ldrbeq	r0, [r1, #-289]	; 0x121
     87c:	20080077 	andcs	r0, r8, r7, ror r0
     880:	5001211a 	andpl	r2, r1, sl, lsl r1
     884:	00007602 	andeq	r7, r0, r2, lsl #12
     888:	013f1a00 	teqeq	pc, r0, lsl #20
     88c:	81d80000 	bicshi	r0, r8, r0
     890:	001c0000 	andseq	r0, ip, r0
     894:	23010000 	movwcs	r0, #4096	; 0x1000
     898:	0000065f 	andeq	r0, r0, pc, asr r6
     89c:	00016a1b 	andeq	r6, r1, fp, lsl sl
     8a0:	00037f00 	andeq	r7, r3, r0, lsl #30
     8a4:	015f1c00 	cmpeq	pc, r0, lsl #24
     8a8:	54010000 	strpl	r0, [r1], #-0
     8ac:	0001561c 	andeq	r5, r1, ip, lsl r6
     8b0:	00770900 	rsbseq	r0, r7, r0, lsl #18
     8b4:	081a4008 	ldmdaeq	sl, {r3, lr}
     8b8:	1c9f1aff 	vldmiane	pc, {s2-s256}
     8bc:	0000014b 	andeq	r0, r0, fp, asr #2
     8c0:	111a5601 	tstne	sl, r1, lsl #12
     8c4:	e4000001 	str	r0, [r0], #-1
     8c8:	10000081 	andne	r0, r0, r1, lsl #1
     8cc:	02000000 	andeq	r0, r0, #0
     8d0:	0006451a 	andeq	r4, r6, sl, lsl r5
     8d4:	01281b00 	teqeq	r8, r0, lsl #22
     8d8:	03a10000 			; <UNDEFINED> instruction: 0x03a10000
     8dc:	1d1c0000 	ldcne	0, cr0, [ip, #-0]
     8e0:	01000001 	tsteq	r0, r1
     8e4:	81e41e54 	mvnhi	r1, r4, asr lr
     8e8:	00040000 	andeq	r0, r4, r0
     8ec:	321f0000 	andscc	r0, pc, #0
     8f0:	c3000001 	movwgt	r0, #1
     8f4:	00000003 	andeq	r0, r0, r3
     8f8:	81e42000 	mvnhi	r2, r0
     8fc:	11150000 	tstne	r5, r0
     900:	01210000 	teqeq	r1, r0
     904:	00770551 	rsbseq	r0, r7, r1, asr r5
     908:	211a4008 	tstcs	sl, r8
     90c:	76025001 	strvc	r5, [r2], -r1
     910:	1a000000 	bne	918 <_start-0x76e8>
     914:	0000013f 	andeq	r0, r0, pc, lsr r1
     918:	000081f8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
     91c:	0000001c 	andeq	r0, r0, ip, lsl r0
     920:	06df2501 	ldrbeq	r2, [pc], r1, lsl #10
     924:	6a1c0000 	bvs	70092c <__bss_end__+0x6f6e7c>
     928:	01000001 	tsteq	r0, r1
     92c:	015f1c58 	cmpeq	pc, r8, asr ip	; <UNPREDICTABLE>
     930:	54010000 	strpl	r0, [r1], #-0
     934:	0001561b 	andeq	r5, r1, fp, lsl r6
     938:	0003d600 	andeq	sp, r3, r0, lsl #12
     93c:	014b1c00 	cmpeq	fp, r0, lsl #24
     940:	56010000 	strpl	r0, [r1], -r0
     944:	0001111a 	andeq	r1, r1, sl, lsl r1
     948:	00820400 	addeq	r0, r2, r0, lsl #8
     94c:	00001000 	andeq	r1, r0, r0
     950:	c51a0200 	ldrgt	r0, [sl, #-512]	; 0x200
     954:	1c000006 	stcne	0, cr0, [r0], {6}
     958:	00000128 	andeq	r0, r0, r8, lsr #2
     95c:	1d1c5801 	ldcne	8, cr5, [ip, #-4]
     960:	01000001 	tsteq	r0, r1
     964:	82041e54 	andhi	r1, r4, #84, 28	; 0x540
     968:	00040000 	andeq	r0, r4, r0
     96c:	321f0000 	andscc	r0, pc, #0
     970:	09000001 	stmdbeq	r0, {r0}
     974:	00000004 	andeq	r0, r0, r4
     978:	82042000 	andhi	r2, r4, #0
     97c:	11150000 	tstne	r5, r0
     980:	01210000 	teqeq	r1, r0
     984:	00770551 	rsbseq	r0, r7, r1, asr r5
     988:	211a8008 	tstcs	sl, r8
     98c:	76025001 	strvc	r5, [r2], -r1
     990:	22000000 	andcs	r0, r0, #0
     994:	0000013f 	andeq	r0, r0, pc, lsr r1
     998:	00008218 	andeq	r8, r0, r8, lsl r2
     99c:	0000001c 	andeq	r0, r0, ip, lsl r0
     9a0:	6a1c2701 	bvs	70a5ac <__bss_end__+0x700afc>
     9a4:	01000001 	tsteq	r0, r1
     9a8:	015f1c55 	cmpeq	pc, r5, asr ip	; <UNPREDICTABLE>
     9ac:	54010000 	strpl	r0, [r1], #-0
     9b0:	0001561d 	andeq	r5, r1, sp, lsl r6
     9b4:	4b1c0100 	blmi	700dbc <__bss_end__+0x6f730c>
     9b8:	01000001 	tsteq	r0, r1
     9bc:	01111a56 	tsteq	r1, r6, asr sl
     9c0:	82240000 	eorhi	r0, r4, #0
     9c4:	00100000 	andseq	r0, r0, r0
     9c8:	1a020000 	bne	809d0 <__bss_end__+0x76f20>
     9cc:	0000073e 	andeq	r0, r0, lr, lsr r7
     9d0:	0001281c 	andeq	r2, r1, ip, lsl r8
     9d4:	1c550100 	ldfnee	f0, [r5], {-0}
     9d8:	0000011d 	andeq	r0, r0, sp, lsl r1
     9dc:	241e5401 	ldrcs	r5, [lr], #-1025	; 0x401
     9e0:	04000082 	streq	r0, [r0], #-130	; 0x82
     9e4:	1f000000 	svcne	0x00000000
     9e8:	00000132 	andeq	r0, r0, r2, lsr r1
     9ec:	0000041c 	andeq	r0, r0, ip, lsl r4
     9f0:	24200000 	strtcs	r0, [r0], #-0
     9f4:	15000082 	strne	r0, [r0, #-130]	; 0x82
     9f8:	21000011 	tstcs	r0, r1, lsl r0
     9fc:	31015101 	tstcc	r1, r1, lsl #2
     a00:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
     a04:	00000076 	andeq	r0, r0, r6, ror r0
     a08:	d9040600 	stmdble	r4, {r9, sl}
     a0c:	23000000 	movwcs	r0, #0
     a10:	0000030c 	andeq	r0, r0, ip, lsl #6
     a14:	00252b01 	eoreq	r2, r5, r1, lsl #22
     a18:	95030000 	strls	r0, [r3, #-0]
     a1c:	0f000007 	svceq	0x00000007
     a20:	01007872 	tsteq	r0, r2, ror r8
     a24:	0000252b 	andeq	r2, r0, fp, lsr #10
     a28:	00760f00 	rsbseq	r0, r6, r0, lsl #30
     a2c:	00252b01 	eoreq	r2, r5, r1, lsl #22
     a30:	290e0000 	stmdbcs	lr, {}	; <UNPREDICTABLE>
     a34:	01000002 	tsteq	r0, r2
     a38:	00002c2b 	andeq	r2, r0, fp, lsr #24
     a3c:	04761100 	ldrbteq	r1, [r6], #-256	; 0x100
     a40:	2c010000 	stccs	0, cr0, [r1], {-0}
     a44:	0000002c 	andeq	r0, r0, ip, lsr #32
     a48:	010d2400 	tsteq	sp, r0, lsl #8
     a4c:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
     a50:	00000025 	andeq	r0, r0, r5, lsr #32
     a54:	00008238 	andeq	r8, r0, r8, lsr r2
     a58:	000001c8 	andeq	r0, r0, r8, asr #3
     a5c:	0b519c01 	bleq	1467a68 <__bss_end__+0x145dfb8>
     a60:	bb130000 	bllt	4c0a68 <__bss_end__+0x4b6fb8>
     a64:	01000001 	tsteq	r0, r1
     a68:	00075538 	andeq	r5, r7, r8, lsr r5
     a6c:	00042f00 	andeq	r2, r4, r0, lsl #30
     a70:	02291300 	eoreq	r1, r9, #0, 6
     a74:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
     a78:	00000025 	andeq	r0, r0, r5, lsr #32
     a7c:	00000474 	andeq	r0, r0, r4, ror r4
     a80:	00787215 	rsbseq	r7, r8, r5, lsl r2
     a84:	00253901 	eoreq	r3, r5, r1, lsl #18
     a88:	55010000 	strpl	r0, [r1, #-0]
     a8c:	01007316 	tsteq	r0, r6, lsl r3
     a90:	00002c40 	andeq	r2, r0, r0, asr #24
     a94:	00049200 	andeq	r9, r4, r0, lsl #4
     a98:	00751600 	rsbseq	r1, r5, r0, lsl #12
     a9c:	00684301 	rsbeq	r4, r8, r1, lsl #6
     aa0:	04a50000 	strteq	r0, [r5], #0
     aa4:	6e160000 	cdpvs	0, 1, cr0, cr6, cr0, {0}
     aa8:	2c440100 	stfcse	f0, [r4], {-0}
     aac:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
     ab0:	16000004 	strne	r0, [r0], -r4
     ab4:	45010063 	strmi	r0, [r1, #-99]	; 0x63
     ab8:	0000002c 	andeq	r0, r0, ip, lsr #32
     abc:	000004cf 	andeq	r0, r0, pc, asr #9
     ac0:	00075b1a 	andeq	r5, r7, sl, lsl fp
     ac4:	00824c00 	addeq	r4, r2, r0, lsl #24
     ac8:	00003400 	andeq	r3, r0, r0, lsl #8
     acc:	6f3c0100 	svcvs	0x003c0100
     ad0:	1b000008 	blne	af8 <_start-0x7508>
     ad4:	0000077e 	andeq	r0, r0, lr, ror r7
     ad8:	000004f9 	strdeq	r0, [r0], -r9
     adc:	0007751d 	andeq	r7, r7, sp, lsl r5
     ae0:	6b1c0000 	blvs	700ae8 <__bss_end__+0x6f7038>
     ae4:	01000007 	tsteq	r0, r7
     ae8:	824c1e55 	subhi	r1, ip, #1360	; 0x550
     aec:	00340000 	eorseq	r0, r4, r0
     af0:	891f0000 	ldmdbhi	pc, {}	; <UNPREDICTABLE>
     af4:	17000007 	strne	r0, [r0, -r7]
     af8:	25000005 	strcs	r0, [r0, #-5]
     afc:	00008250 	andeq	r8, r0, r0, asr r2
     b00:	0000112b 	andeq	r1, r0, fp, lsr #2
     b04:	00825c26 	addeq	r5, r2, r6, lsr #24
     b08:	00113600 	andseq	r3, r1, r0, lsl #12
     b0c:	00086400 	andeq	r6, r8, r0, lsl #8
     b10:	50012100 	andpl	r2, r1, r0, lsl #2
     b14:	00007502 	andeq	r7, r0, r2, lsl #10
     b18:	00826825 	addeq	r6, r2, r5, lsr #16
     b1c:	00112b00 	andseq	r2, r1, r0, lsl #22
     b20:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     b24:	00008288 	andeq	r8, r0, r8, lsl #5
     b28:	00000004 	andeq	r0, r0, r4
     b2c:	0000088c 	andeq	r0, r0, ip, lsl #17
     b30:	00029a27 	andeq	r9, r2, r7, lsr #20
     b34:	2c400100 	stfcse	f0, [r0], {-0}
     b38:	35000000 	strcc	r0, [r0, #-0]
     b3c:	00000005 	andeq	r0, r0, r5
     b40:	0001111a 	andeq	r1, r1, sl, lsl r1
     b44:	00829400 	addeq	r9, r2, r0, lsl #8
     b48:	00001000 	andeq	r1, r0, r0
     b4c:	c5480100 	strbgt	r0, [r8, #-256]	; 0x100
     b50:	1b000008 	blne	b78 <_start-0x7488>
     b54:	00000128 	andeq	r0, r0, r8, lsr #2
     b58:	00000548 	andeq	r0, r0, r8, asr #10
     b5c:	00011d1b 	andeq	r1, r1, fp, lsl sp
     b60:	00056d00 	andeq	r6, r5, r0, lsl #26
     b64:	82941e00 	addshi	r1, r4, #0, 28
     b68:	00040000 	andeq	r0, r4, r0
     b6c:	321f0000 	andscc	r0, pc, #0
     b70:	80000001 	andhi	r0, r0, r1
     b74:	00000005 	andeq	r0, r0, r5
     b78:	01111a00 	tsteq	r1, r0, lsl #20
     b7c:	82b40000 	adcshi	r0, r4, #0
     b80:	00100000 	andseq	r0, r0, r0
     b84:	4c010000 	stcmi	0, cr0, [r1], {-0}
     b88:	000008fe 	strdeq	r0, [r0], -lr
     b8c:	0001281b 	andeq	r2, r1, fp, lsl r8
     b90:	00059300 	andeq	r9, r5, r0, lsl #6
     b94:	011d1b00 	tsteq	sp, r0, lsl #22
     b98:	05a60000 	streq	r0, [r6, #0]!
     b9c:	b41e0000 	ldrlt	r0, [lr], #-0
     ba0:	04000082 	streq	r0, [r0], #-130	; 0x82
     ba4:	1f000000 	svcne	0x00000000
     ba8:	00000132 	andeq	r0, r0, r2, lsr r1
     bac:	000005b9 			; <UNDEFINED> instruction: 0x000005b9
     bb0:	111a0000 	tstne	sl, r0
     bb4:	d8000001 	stmdale	r0, {r0}
     bb8:	10000082 	andne	r0, r0, r2, lsl #1
     bbc:	01000000 	mrseq	r0, (UNDEF: 0)
     bc0:	0009374f 	andeq	r3, r9, pc, asr #14
     bc4:	01281b00 	teqeq	r8, r0, lsl #22
     bc8:	05cc0000 	strbeq	r0, [ip]
     bcc:	1d1b0000 	ldcne	0, cr0, [fp, #-0]
     bd0:	df000001 	svcle	0x00000001
     bd4:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
     bd8:	000082d8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
     bdc:	00000004 	andeq	r0, r0, r4
     be0:	0001321f 	andeq	r3, r1, pc, lsl r2
     be4:	0005f200 	andeq	pc, r5, r0, lsl #4
     be8:	1a000000 	bne	bf0 <_start-0x7410>
     bec:	00000111 	andeq	r0, r0, r1, lsl r1
     bf0:	000082fc 	strdeq	r8, [r0], -ip
     bf4:	00000010 	andeq	r0, r0, r0, lsl r0
     bf8:	09705201 	ldmdbeq	r0!, {r0, r9, ip, lr}^
     bfc:	281b0000 	ldmdacs	fp, {}	; <UNPREDICTABLE>
     c00:	05000001 	streq	r0, [r0, #-1]
     c04:	1b000006 	blne	c24 <_start-0x73dc>
     c08:	0000011d 	andeq	r0, r0, sp, lsl r1
     c0c:	00000618 	andeq	r0, r0, r8, lsl r6
     c10:	0082fc1e 	addeq	pc, r2, lr, lsl ip	; <UNPREDICTABLE>
     c14:	00000400 	andeq	r0, r0, r0, lsl #8
     c18:	01321f00 	teqeq	r2, r0, lsl #30
     c1c:	062b0000 	strteq	r0, [fp], -r0
     c20:	00000000 	andeq	r0, r0, r0
     c24:	0001111a 	andeq	r1, r1, sl, lsl r1
     c28:	00832000 	addeq	r2, r3, r0
     c2c:	00001000 	andeq	r1, r0, r0
     c30:	a9550100 	ldmdbge	r5, {r8}^
     c34:	1b000009 	blne	c60 <_start-0x73a0>
     c38:	00000128 	andeq	r0, r0, r8, lsr #2
     c3c:	0000063e 	andeq	r0, r0, lr, lsr r6
     c40:	00011d1b 	andeq	r1, r1, fp, lsl sp
     c44:	00065100 	andeq	r5, r6, r0, lsl #2
     c48:	83201e00 	teqhi	r0, #0, 28
     c4c:	00040000 	andeq	r0, r4, r0
     c50:	321f0000 	andscc	r0, pc, #0
     c54:	64000001 	strvs	r0, [r0], #-1
     c58:	00000006 	andeq	r0, r0, r6
     c5c:	01111a00 	tsteq	r1, r0, lsl #20
     c60:	83440000 	movthi	r0, #16384	; 0x4000
     c64:	00100000 	andseq	r0, r0, r0
     c68:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
     c6c:	000009e2 	andeq	r0, r0, r2, ror #19
     c70:	0001281b 	andeq	r2, r1, fp, lsl r8
     c74:	00067700 	andeq	r7, r6, r0, lsl #14
     c78:	011d1b00 	tsteq	sp, r0, lsl #22
     c7c:	068a0000 	streq	r0, [sl], r0
     c80:	441e0000 	ldrmi	r0, [lr], #-0
     c84:	04000083 	streq	r0, [r0], #-131	; 0x83
     c88:	1f000000 	svcne	0x00000000
     c8c:	00000132 	andeq	r0, r0, r2, lsr r1
     c90:	0000069d 	muleq	r0, sp, r6
     c94:	111a0000 	tstne	sl, r0
     c98:	68000001 	stmdavs	r0, {r0}
     c9c:	10000083 	andne	r0, r0, r3, lsl #1
     ca0:	01000000 	mrseq	r0, (UNDEF: 0)
     ca4:	000a1b5b 	andeq	r1, sl, fp, asr fp
     ca8:	01281b00 	teqeq	r8, r0, lsl #22
     cac:	06b00000 	ldrteq	r0, [r0], r0
     cb0:	1d1b0000 	ldcne	0, cr0, [fp, #-0]
     cb4:	c3000001 	movwgt	r0, #1
     cb8:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
     cbc:	00008368 	andeq	r8, r0, r8, ror #6
     cc0:	00000004 	andeq	r0, r0, r4
     cc4:	0001321f 	andeq	r3, r1, pc, lsl r2
     cc8:	0006d600 	andeq	sp, r6, r0, lsl #12
     ccc:	1a000000 	bne	cd4 <_start-0x732c>
     cd0:	00000111 	andeq	r0, r0, r1, lsl r1
     cd4:	0000838c 	andeq	r8, r0, ip, lsl #7
     cd8:	00000010 	andeq	r0, r0, r0, lsl r0
     cdc:	0a505e01 	beq	14184e8 <__bss_end__+0x140ea38>
     ce0:	281b0000 	ldmdacs	fp, {}	; <UNPREDICTABLE>
     ce4:	e9000001 	stmdb	r0, {r0}
     ce8:	28000006 	stmdacs	r0, {r1, r2}
     cec:	0000011d 	andeq	r0, r0, sp, lsl r1
     cf0:	00838c1e 	addeq	r8, r3, lr, lsl ip
     cf4:	00000400 	andeq	r0, r0, r0, lsl #8
     cf8:	01321f00 	teqeq	r2, r0, lsl #30
     cfc:	06fc0000 	ldrbteq	r0, [ip], r0
     d00:	00000000 	andeq	r0, r0, r0
     d04:	00075b1a 	andeq	r5, r7, sl, lsl fp
     d08:	0083ac00 	addeq	sl, r3, r0, lsl #24
     d0c:	00003400 	andeq	r3, r0, r0, lsl #8
     d10:	b4650100 	strbtlt	r0, [r5], #-256	; 0x100
     d14:	2800000a 	stmdacs	r0, {r1, r3}
     d18:	0000077e 	andeq	r0, r0, lr, ror r7
     d1c:	0007751b 	andeq	r7, r7, fp, lsl r5
     d20:	00070f00 	andeq	r0, r7, r0, lsl #30
     d24:	076b1b00 	strbeq	r1, [fp, -r0, lsl #22]!
     d28:	072f0000 	streq	r0, [pc, -r0]!
     d2c:	ac1e0000 	ldcge	0, cr0, [lr], {-0}
     d30:	34000083 	strcc	r0, [r0], #-131	; 0x83
     d34:	1f000000 	svcne	0x00000000
     d38:	00000789 	andeq	r0, r0, r9, lsl #15
     d3c:	0000074d 	andeq	r0, r0, sp, asr #14
     d40:	0083b025 	addeq	fp, r3, r5, lsr #32
     d44:	00112b00 	andseq	r2, r1, r0, lsl #22
     d48:	83bc2600 			; <UNDEFINED> instruction: 0x83bc2600
     d4c:	11360000 	teqne	r6, r0
     d50:	0aa90000 	beq	fea40d58 <__bss_end__+0xfea372a8>
     d54:	01210000 	teqeq	r1, r0
     d58:	00750250 	rsbseq	r0, r5, r0, asr r2
     d5c:	83c82500 	bichi	r2, r8, #0, 10
     d60:	112b0000 	teqne	fp, r0
     d64:	00000000 	andeq	r0, r0, r0
     d68:	0082b026 	addeq	fp, r2, r6, lsr #32
     d6c:	00113600 	andseq	r3, r1, r0, lsl #12
     d70:	000ac800 	andeq	ip, sl, r0, lsl #16
     d74:	50012100 	andpl	r2, r1, r0, lsl #2
     d78:	00007502 	andeq	r7, r0, r2, lsl #10
     d7c:	0082d026 	addeq	sp, r2, r6, lsr #32
     d80:	00113600 	andseq	r3, r1, r0, lsl #12
     d84:	000adc00 	andeq	sp, sl, r0, lsl #24
     d88:	50012100 	andpl	r2, r1, r0, lsl #2
     d8c:	00007502 	andeq	r7, r0, r2, lsl #10
     d90:	0082f426 	addeq	pc, r2, r6, lsr #8
     d94:	00113600 	andseq	r3, r1, r0, lsl #12
     d98:	000af000 	andeq	pc, sl, r0
     d9c:	50012100 	andpl	r2, r1, r0, lsl #2
     da0:	00007502 	andeq	r7, r0, r2, lsl #10
     da4:	00831826 	addeq	r1, r3, r6, lsr #16
     da8:	00113600 	andseq	r3, r1, r0, lsl #12
     dac:	000b0400 	andeq	r0, fp, r0, lsl #8
     db0:	50012100 	andpl	r2, r1, r0, lsl #2
     db4:	00007502 	andeq	r7, r0, r2, lsl #10
     db8:	00833c26 	addeq	r3, r3, r6, lsr #24
     dbc:	00113600 	andseq	r3, r1, r0, lsl #12
     dc0:	000b1800 	andeq	r1, fp, r0, lsl #16
     dc4:	50012100 	andpl	r2, r1, r0, lsl #2
     dc8:	00007502 	andeq	r7, r0, r2, lsl #10
     dcc:	00836026 	addeq	r6, r3, r6, lsr #32
     dd0:	00113600 	andseq	r3, r1, r0, lsl #12
     dd4:	000b2c00 	andeq	r2, fp, r0, lsl #24
     dd8:	50012100 	andpl	r2, r1, r0, lsl #2
     ddc:	00007502 	andeq	r7, r0, r2, lsl #10
     de0:	00838426 	addeq	r8, r3, r6, lsr #8
     de4:	00113600 	andseq	r3, r1, r0, lsl #12
     de8:	000b4000 	andeq	r4, fp, r0
     dec:	50012100 	andpl	r2, r1, r0, lsl #2
     df0:	00007502 	andeq	r7, r0, r2, lsl #10
     df4:	0083a420 	addeq	sl, r3, r0, lsr #8
     df8:	00113600 	andseq	r3, r1, r0, lsl #12
     dfc:	50012100 	andpl	r2, r1, r0, lsl #2
     e00:	00007502 	andeq	r7, r0, r2, lsl #10
     e04:	01dc2400 	bicseq	r2, ip, r0, lsl #8
     e08:	70010000 	andvc	r0, r1, r0
     e0c:	00000025 	andeq	r0, r0, r5, lsr #32
     e10:	00008400 	andeq	r8, r0, r0, lsl #8
     e14:	0000008c 	andeq	r0, r0, ip, lsl #1
     e18:	0c2c9c01 	stceq	12, cr9, [ip], #-4
     e1c:	75140000 	ldrvc	r0, [r4, #-0]
     e20:	55700100 	ldrbpl	r0, [r0, #-256]!	; 0x100
     e24:	6b000007 	blvs	e48 <_start-0x71b8>
     e28:	14000007 	strne	r0, [r0], #-7
     e2c:	00667562 	rsbeq	r7, r6, r2, ror #10
     e30:	0c2c7001 	stceq	0, cr7, [ip], #-4
     e34:	079f0000 	ldreq	r0, [pc, r0]
     e38:	b2130000 	andslt	r0, r3, #0
     e3c:	01000002 	tsteq	r0, r2
     e40:	00006870 	andeq	r6, r0, r0, ror r8
     e44:	0007d300 	andeq	sp, r7, r0, lsl #6
     e48:	6e651400 	cdpvs	4, 6, cr1, cr5, cr0, {0}
     e4c:	70010064 	andvc	r0, r1, r4, rrx
     e50:	0000004f 	andeq	r0, r0, pc, asr #32
     e54:	0000080c 	andeq	r0, r0, ip, lsl #16
     e58:	0002c429 	andeq	ip, r2, r9, lsr #8
     e5c:	68700100 	ldmdavs	r0!, {r8}^
     e60:	02000000 	andeq	r0, r0, #0
     e64:	1c2a0091 	stcne	0, cr0, [sl], #-580	; 0xfffffdbc
     e68:	42000002 	andmi	r0, r0, #2
     e6c:	0500000c 	streq	r0, [r0, #-12]
     e70:	00946003 	addseq	r6, r4, r3
     e74:	00691600 	rsbeq	r1, r9, r0, lsl #12
     e78:	00257401 	eoreq	r7, r5, r1, lsl #8
     e7c:	08460000 	stmdaeq	r6, {}^	; <UNPREDICTABLE>
     e80:	6e270000 	cdpvs	0, 2, cr0, cr7, cr0, {0}
     e84:	01000002 	tsteq	r0, r2
     e88:	00004f75 	andeq	r4, r0, r5, ror pc
     e8c:	00086500 	andeq	r6, r8, r0, lsl #10
     e90:	84302600 	ldrthi	r2, [r0], #-1536	; 0x600
     e94:	114b0000 	mrsne	r0, (UNDEF: 75)
     e98:	0c0c0000 	stceq	0, cr0, [ip], {-0}
     e9c:	01210000 	teqeq	r1, r0
     ea0:	71080253 	tstvc	r8, r3, asr r2
     ea4:	05520121 	ldrbeq	r0, [r2, #-289]	; 0x121
     ea8:	00946003 	addseq	r6, r4, r3
     eac:	51012100 	mrspl	r2, (UNDEF: 17)
     eb0:	94f40305 	ldrbtls	r0, [r4], #773	; 0x305
     eb4:	01210000 	teqeq	r1, r0
     eb8:	d8030550 	stmdale	r3, {r4, r6, r8, sl}
     ebc:	00000094 	muleq	r0, r4, r0
     ec0:	00843425 	addeq	r3, r4, r5, lsr #8
     ec4:	00116100 	andseq	r6, r1, r0, lsl #2
     ec8:	84502000 	ldrbhi	r2, [r0], #-0
     ecc:	07950000 	ldreq	r0, [r5, r0]
     ed0:	01210000 	teqeq	r1, r0
     ed4:	007a0251 	rsbseq	r0, sl, r1, asr r2
     ed8:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
     edc:	00000078 	andeq	r0, r0, r8, ror r0
     ee0:	004f0406 	subeq	r0, pc, r6, lsl #8
     ee4:	902b0000 	eorls	r0, fp, r0
     ee8:	42000000 	andmi	r0, r0, #0
     eec:	2c00000c 	stccs	0, cr0, [r0], {12}
     ef0:	00000081 	andeq	r0, r0, r1, lsl #1
     ef4:	32070012 	andcc	r0, r7, #18
     ef8:	2400000c 	strcs	r0, [r0], #-12
     efc:	00000285 	andeq	r0, r0, r5, lsl #5
     f00:	00258401 	eoreq	r8, r5, r1, lsl #8
     f04:	848c0000 	strhi	r0, [ip], #0
     f08:	00780000 	rsbseq	r0, r8, r0
     f0c:	9c010000 	stcls	0, cr0, [r1], {-0}
     f10:	00000d05 	andeq	r0, r0, r5, lsl #26
     f14:	01007514 	tsteq	r0, r4, lsl r5
     f18:	00075584 	andeq	r5, r7, r4, lsl #11
     f1c:	00087800 	andeq	r7, r8, r0, lsl #16
     f20:	75621400 	strbvc	r1, [r2, #-1024]!	; 0x400
     f24:	84010066 	strhi	r0, [r1], #-102	; 0x66
     f28:	00000c2c 	andeq	r0, r0, ip, lsr #24
     f2c:	000008ac 	andeq	r0, r0, ip, lsr #17
     f30:	0002b213 	andeq	fp, r2, r3, lsl r2
     f34:	68850100 	stmvs	r5, {r8}
     f38:	e0000000 	and	r0, r0, r0
     f3c:	13000008 	movwne	r0, #8
     f40:	000002c4 	andeq	r0, r0, r4, asr #5
     f44:	00688501 	rsbeq	r8, r8, r1, lsl #10
     f48:	09190000 	ldmdbeq	r9, {}	; <UNPREDICTABLE>
     f4c:	1c2a0000 	stcne	0, cr0, [sl], #-0
     f50:	15000002 	strne	r0, [r0, #-2]
     f54:	0500000d 	streq	r0, [r0, #-13]
     f58:	00947403 	addseq	r7, r4, r3, lsl #8
     f5c:	00691600 	rsbeq	r1, r9, r0, lsl #12
     f60:	00258a01 	eoreq	r8, r5, r1, lsl #20
     f64:	094d0000 	stmdbeq	sp, {}^	; <UNPREDICTABLE>
     f68:	b8260000 	stmdalt	r6!, {}	; <UNPREDICTABLE>
     f6c:	4b000084 	blmi	1184 <_start-0x6e7c>
     f70:	e5000011 	str	r0, [r0, #-17]
     f74:	2100000c 	tstcs	r0, ip
     f78:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     f7c:	52012187 	andpl	r2, r1, #-1073741791	; 0xc0000021
     f80:	94740305 	ldrbtls	r0, [r4], #-773	; 0x305
     f84:	01210000 	teqeq	r1, r0
     f88:	f4030551 	vst3.16	{d0,d2,d4}, [r3 :64], r1
     f8c:	21000094 	swpcs	r0, r4, [r0]	; <UNPREDICTABLE>
     f90:	03055001 	movweq	r5, #20481	; 0x5001
     f94:	000094d8 	ldrdeq	r9, [r0], -r8
     f98:	84bc2500 	ldrthi	r2, [ip], #1280	; 0x500
     f9c:	11610000 	cmnne	r1, r0
     fa0:	d8200000 	stmdale	r0!, {}	; <UNPREDICTABLE>
     fa4:	95000084 	strls	r0, [r0, #-132]	; 0x84
     fa8:	21000007 	tstcs	r0, r7
     fac:	78025101 	stmdavc	r2, {r0, r8, ip, lr}
     fb0:	50012100 	andpl	r2, r1, r0, lsl #2
     fb4:	00007702 	andeq	r7, r0, r2, lsl #14
     fb8:	00902b00 	addseq	r2, r0, r0, lsl #22
     fbc:	0d150000 	ldceq	0, cr0, [r5, #-0]
     fc0:	812c0000 	teqhi	ip, r0
     fc4:	14000000 	strne	r0, [r0], #-0
     fc8:	0d050700 	stceq	7, cr0, [r5, #-0]
     fcc:	1c240000 	stcne	0, cr0, [r4], #-0
     fd0:	01000000 	mrseq	r0, (UNDEF: 0)
     fd4:	0000d997 	muleq	r0, r7, r9
     fd8:	00850400 	addeq	r0, r5, r0, lsl #8
     fdc:	0000b000 	andeq	fp, r0, r0
     fe0:	139c0100 	orrsne	r0, ip, #0, 2
     fe4:	1400000e 	strne	r0, [r0], #-14
     fe8:	01007874 	tsteq	r0, r4, ror r8
     fec:	00004f97 	muleq	r0, r7, pc	; <UNPREDICTABLE>
     ff0:	00096c00 	andeq	r6, r9, r0, lsl #24
     ff4:	78721400 	ldmdavc	r2!, {sl, ip}^
     ff8:	4f970100 	svcmi	0x00970100
     ffc:	8d000000 	stchi	0, cr0, [r0, #-0]
    1000:	13000009 	movwne	r0, #9
    1004:	00000108 	andeq	r0, r0, r8, lsl #2
    1008:	00689701 	rsbeq	r9, r8, r1, lsl #14
    100c:	09ae0000 	stmibeq	lr!, {}	; <UNPREDICTABLE>
    1010:	c0290000 	eorgt	r0, r9, r0
    1014:	01000001 	tsteq	r0, r1
    1018:	00006897 	muleq	r0, r7, r8
    101c:	00910200 	addseq	r0, r1, r0, lsl #4
    1020:	7a686d2d 	bvc	1a1c4dc <__bss_end__+0x1a12a2c>
    1024:	2c9f0100 	ldfcss	f0, [pc], {0}
    1028:	00000000 	andeq	r0, r0, r0
    102c:	2729b927 	strcs	fp, [r9, -r7, lsr #18]!
    1030:	00000206 	andeq	r0, r0, r6, lsl #4
    1034:	002ca001 	eoreq	sl, ip, r1
    1038:	09cc0000 	stmibeq	ip, {}^	; <UNPREDICTABLE>
    103c:	1c2a0000 	stcne	0, cr0, [sl], #-0
    1040:	23000002 	movwcs	r0, #2
    1044:	0500000e 	streq	r0, [r0, #-14]
    1048:	00948c03 	addseq	r8, r4, r3, lsl #24
    104c:	852c1900 	strhi	r1, [ip, #-2304]!	; 0x900
    1050:	00080000 	andeq	r0, r8, r0
    1054:	0db20000 	ldceq	0, cr0, [r2]
    1058:	692e0000 	stmdbvs	lr!, {}	; <UNPREDICTABLE>
    105c:	9b01006e 	blls	4121c <__bss_end__+0x3776c>
    1060:	0000002c 	andeq	r0, r0, ip, lsr #32
    1064:	24260001 	strtcs	r0, [r6], #-1
    1068:	68000085 	stmdavs	r0, {r0, r2, r7}
    106c:	c6000011 			; <UNDEFINED> instruction: 0xc6000011
    1070:	2100000d 	tstcs	r0, sp
    1074:	78025001 	stmdavc	r2, {r0, ip, lr}
    1078:	2c260000 	stccs	0, cr0, [r6], #-0
    107c:	79000085 	stmdbvc	r0, {r0, r2, r7}
    1080:	da000011 	ble	10cc <_start-0x6f34>
    1084:	2100000d 	tstcs	r0, sp
    1088:	77025001 	strvc	r5, [r2, -r1]
    108c:	88260000 	stmdahi	r6!, {}	; <UNPREDICTABLE>
    1090:	4b000085 	blmi	12ac <_start-0x6d54>
    1094:	09000011 	stmdbeq	r0, {r0, r4}
    1098:	2100000e 	tstcs	r0, lr
    109c:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    10a0:	520121a1 	andpl	r2, r1, #1073741864	; 0x40000028
    10a4:	948c0305 	strls	r0, [ip], #773	; 0x305
    10a8:	01210000 	teqeq	r1, r0
    10ac:	f4030551 	vst3.16	{d0,d2,d4}, [r3 :64], r1
    10b0:	21000094 	swpcs	r0, r4, [r0]	; <UNPREDICTABLE>
    10b4:	03055001 	movweq	r5, #20481	; 0x5001
    10b8:	00009500 	andeq	r9, r0, r0, lsl #10
    10bc:	858c2500 	strhi	r2, [ip, #1280]	; 0x500
    10c0:	11610000 	cmnne	r1, r0
    10c4:	2b000000 	blcs	10cc <_start-0x6f34>
    10c8:	00000090 	muleq	r0, r0, r0
    10cc:	00000e23 	andeq	r0, r0, r3, lsr #28
    10d0:	0000812c 	andeq	r8, r0, ip, lsr #2
    10d4:	07001300 	streq	r1, [r0, -r0, lsl #6]
    10d8:	00000e13 	andeq	r0, r0, r3, lsl lr
    10dc:	0001f924 	andeq	pc, r1, r4, lsr #18
    10e0:	25ad0100 	strcs	r0, [sp, #256]!	; 0x100
    10e4:	b4000000 	strlt	r0, [r0], #-0
    10e8:	38000085 	stmdacc	r0, {r0, r2, r7}
    10ec:	01000000 	mrseq	r0, (UNDEF: 0)
    10f0:	000ec29c 	muleq	lr, ip, r2
    10f4:	01bb1300 			; <UNDEFINED> instruction: 0x01bb1300
    10f8:	ad010000 	stcge	0, cr0, [r1, #-0]
    10fc:	00000755 	andeq	r0, r0, r5, asr r7
    1100:	000009fa 	strdeq	r0, [r0], -sl
    1104:	73657216 	cmnvc	r5, #1610612737	; 0x60000001
    1108:	25ae0100 	strcs	r0, [lr, #256]!	; 0x100
    110c:	1b000000 	blne	1114 <_start-0x6eec>
    1110:	2a00000a 	bcs	1140 <_start-0x6ec0>
    1114:	0000021c 	andeq	r0, r0, ip, lsl r2
    1118:	00000ed2 	ldrdeq	r0, [r0], -r2
    111c:	94a00305 	strtls	r0, [r0], #773	; 0x305
    1120:	c0260000 	eorgt	r0, r6, r0
    1124:	95000085 	strls	r0, [r0, #-133]	; 0x85
    1128:	89000007 	stmdbhi	r0, {r0, r1, r2}
    112c:	2100000e 	tstcs	r0, lr
    1130:	09025101 	stmdbeq	r2, {r0, r8, ip, lr}
    1134:	500121ff 	strdpl	r2, [r1], -pc	; <UNPREDICTABLE>
    1138:	5001f303 	andpl	pc, r1, r3, lsl #6
    113c:	85dc2600 	ldrbhi	r2, [ip, #1536]	; 0x600
    1140:	114b0000 	mrsne	r0, (UNDEF: 75)
    1144:	0eb80000 	cdpeq	0, 11, cr0, cr8, cr0, {0}
    1148:	01210000 	teqeq	r1, r0
    114c:	b0080253 	andlt	r0, r8, r3, asr r2
    1150:	05520121 	ldrbeq	r0, [r2, #-289]	; 0x121
    1154:	0094a003 	addseq	sl, r4, r3
    1158:	51012100 	mrspl	r2, (UNDEF: 17)
    115c:	94f40305 	ldrbtls	r0, [r4], #773	; 0x305
    1160:	01210000 	teqeq	r1, r0
    1164:	44030550 	strmi	r0, [r3], #-1360	; 0x550
    1168:	00000095 	muleq	r0, r5, r0
    116c:	0085e025 	addeq	lr, r5, r5, lsr #32
    1170:	00116100 	andseq	r6, r1, r0, lsl #2
    1174:	902b0000 	eorls	r0, fp, r0
    1178:	d2000000 	andle	r0, r0, #0
    117c:	2c00000e 	stccs	0, cr0, [r0], {14}
    1180:	00000081 	andeq	r0, r0, r1, lsl #1
    1184:	c207000c 	andgt	r0, r7, #12
    1188:	1200000e 	andne	r0, r0, #14
    118c:	00000243 	andeq	r0, r0, r3, asr #4
    1190:	85ecb401 	strbhi	fp, [ip, #1025]!	; 0x401
    1194:	002c0000 	eoreq	r0, ip, r0
    1198:	9c010000 	stcls	0, cr0, [r1], {-0}
    119c:	00000f1b 	andeq	r0, r0, fp, lsl pc
    11a0:	0001bb13 	andeq	fp, r1, r3, lsl fp
    11a4:	55b40100 	ldrpl	r0, [r4, #256]!	; 0x100
    11a8:	2e000007 	cdpcs	0, 0, cr0, cr0, cr7, {0}
    11ac:	1400000a 	strne	r0, [r0], #-10
    11b0:	0067736d 	rsbeq	r7, r7, sp, ror #6
    11b4:	0097b401 	addseq	fp, r7, r1, lsl #8
    11b8:	0a4c0000 	beq	13011c0 <__bss_end__+0x12f7710>
    11bc:	04200000 	strteq	r0, [r0], #-0
    11c0:	76000086 	strvc	r0, [r0], -r6, lsl #1
    11c4:	21000001 	tstcs	r0, r1
    11c8:	75025001 	strvc	r5, [r2, #-1]
    11cc:	24000000 	strcs	r0, [r0], #-0
    11d0:	00000099 	muleq	r0, r9, r0
    11d4:	0025bd01 	eoreq	fp, r5, r1, lsl #26
    11d8:	86180000 	ldrhi	r0, [r8], -r0
    11dc:	00800000 	addeq	r0, r0, r0
    11e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    11e4:	00001006 	andeq	r1, r0, r6
    11e8:	0001bb13 	andeq	fp, r1, r3, lsl fp
    11ec:	55bd0100 	ldrpl	r0, [sp, #256]!	; 0x100
    11f0:	6a000007 	bvs	1214 <_start-0x6dec>
    11f4:	2f00000a 	svccs	0x0000000a
    11f8:	00746d66 	rsbseq	r6, r4, r6, ror #26
    11fc:	0097bd01 	addseq	fp, r7, r1, lsl #26
    1200:	91020000 	mrsls	r0, (UNDEF: 2)
    1204:	62153074 	andsvs	r3, r5, #116	; 0x74
    1208:	01006675 	tsteq	r0, r5, ror r6
    120c:	001006be 			; <UNDEFINED> instruction: 0x001006be
    1210:	9c910300 	ldcls	3, cr0, [r1], {0}
    1214:	031c187c 	tsteq	ip, #124, 16	; 0x7c0000
    1218:	c0010000 	andgt	r0, r1, r0
    121c:	00000106 	andeq	r0, r0, r6, lsl #2
    1220:	7c989103 	ldfvcd	f1, [r8], {3}
    1224:	007a7316 	rsbseq	r7, sl, r6, lsl r3
    1228:	0025c201 	eoreq	ip, r5, r1, lsl #4
    122c:	0a960000 	beq	fe581234 <__bss_end__+0xfe577784>
    1230:	1c2a0000 	stcne	0, cr0, [sl], #-0
    1234:	27000002 	strcs	r0, [r0, -r2]
    1238:	05000010 	streq	r0, [r0, #-16]
    123c:	0094b003 	addseq	fp, r4, r3
    1240:	86402600 	strbhi	r2, [r0], -r0, lsl #12
    1244:	118a0000 	orrne	r0, sl, r0
    1248:	0fb60000 	svceq	0x00b60000
    124c:	01210000 	teqeq	r1, r0
    1250:	58910253 	ldmpl	r1, {r0, r1, r4, r6, r9}
    1254:	03520121 	cmpeq	r2, #1073741832	; 0x40000008
    1258:	21065491 			; <UNDEFINED> instruction: 0x21065491
    125c:	0a035101 	beq	d5668 <__bss_end__+0xcbbb8>
    1260:	012101cc 	smlawteq	r1, ip, r1, r0
    1264:	fc910350 	ldc2	3, cr0, [r1], {80}	; 0x50
    1268:	6426007b 	strtvs	r0, [r6], #-123	; 0x7b
    126c:	4b000086 	blmi	148c <_start-0x6b74>
    1270:	e5000011 	str	r0, [r0, #-17]
    1274:	2100000f 	tstcs	r0, pc
    1278:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    127c:	520121c4 	andpl	r2, r1, #196, 2	; 0x31
    1280:	94b00305 	ldrtls	r0, [r0], #773	; 0x305
    1284:	01210000 	teqeq	r1, r0
    1288:	f4030551 	vst3.16	{d0,d2,d4}, [r3 :64], r1
    128c:	21000094 	swpcs	r0, r4, [r0]	; <UNPREDICTABLE>
    1290:	03055001 	movweq	r5, #20481	; 0x5001
    1294:	0000957c 	andeq	r9, r0, ip, ror r5
    1298:	86682500 	strbthi	r2, [r8], -r0, lsl #10
    129c:	11610000 	cmnne	r1, r0
    12a0:	74200000 	strtvc	r0, [r0], #-0
    12a4:	d7000086 	strle	r0, [r0, -r6, lsl #1]
    12a8:	2100000e 	tstcs	r0, lr
    12ac:	91035101 	tstls	r3, r1, lsl #2
    12b0:	01217bfc 	strdeq	r7, [r1, -ip]!
    12b4:	00750250 	rsbseq	r0, r5, r0, asr r2
    12b8:	902b0000 	eorls	r0, fp, r0
    12bc:	17000000 	strne	r0, [r0, -r0]
    12c0:	31000010 	tstcc	r0, r0, lsl r0
    12c4:	00000081 	andeq	r0, r0, r1, lsl #1
    12c8:	2b0001cb 	blcs	19fc <_start-0x6604>
    12cc:	00000090 	muleq	r0, r0, r0
    12d0:	00001027 	andeq	r1, r0, r7, lsr #32
    12d4:	0000812c 	andeq	r8, r0, ip, lsr #2
    12d8:	07000e00 	streq	r0, [r0, -r0, lsl #28]
    12dc:	00001017 	andeq	r1, r0, r7, lsl r0
    12e0:	0002e024 	andeq	lr, r2, r4, lsr #32
    12e4:	25c90100 	strbcs	r0, [r9, #256]	; 0x100
    12e8:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    12ec:	48000086 	stmdami	r0, {r1, r2, r7}
    12f0:	01000000 	mrseq	r0, (UNDEF: 0)
    12f4:	0011009c 	mulseq	r1, ip, r0
    12f8:	00751400 	rsbseq	r1, r5, r0, lsl #8
    12fc:	0755c901 	ldrbeq	ip, [r5, -r1, lsl #18]
    1300:	0ad50000 	beq	ff541308 <__bss_end__+0xff537858>
    1304:	62140000 	andsvs	r0, r4, #0
    1308:	01006675 	tsteq	r0, r5, ror r6
    130c:	000c2cc9 	andeq	r2, ip, r9, asr #25
    1310:	000af600 	andeq	pc, sl, r0, lsl #12
    1314:	02b21300 	adcseq	r1, r2, #0, 6
    1318:	c9010000 	stmdbgt	r1, {}	; <UNPREDICTABLE>
    131c:	00000068 	andeq	r0, r0, r8, rrx
    1320:	00000b17 	andeq	r0, r0, r7, lsl fp
    1324:	646e6514 	strbtvs	r6, [lr], #-1300	; 0x514
    1328:	4fc90100 	svcmi	0x00c90100
    132c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    1330:	1600000b 	strne	r0, [r0], -fp
    1334:	00736572 	rsbseq	r6, r3, r2, ror r5
    1338:	0025ca01 	eoreq	ip, r5, r1, lsl #20
    133c:	0b590000 	bleq	1641344 <__bss_end__+0x1637894>
    1340:	1c2a0000 	stcne	0, cr0, [sl], #-0
    1344:	10000002 	andne	r0, r0, r2
    1348:	05000011 	streq	r0, [r0, #-17]
    134c:	0094c003 	addseq	ip, r4, r3
    1350:	86ac2600 	strthi	r2, [ip], r0, lsl #12
    1354:	0b510000 	bleq	144135c <__bss_end__+0x14378ac>
    1358:	10c70000 	sbcne	r0, r7, r0
    135c:	01210000 	teqeq	r1, r0
    1360:	01f30352 	mvnseq	r0, r2, asr r3
    1364:	51012152 	tstpl	r1, r2, asr r1
    1368:	5101f303 	tstpl	r1, r3, lsl #6
    136c:	03500121 	cmpeq	r0, #1073741832	; 0x40000008
    1370:	215001f3 	ldrshcs	r0, [r0, #-19]	; 0xffffffed
    1374:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    1378:	2600ff09 	strcs	pc, [r0], -r9, lsl #30
    137c:	000086c8 	andeq	r8, r0, r8, asr #13
    1380:	0000114b 	andeq	r1, r0, fp, asr #2
    1384:	000010f6 	strdeq	r1, [r0], -r6
    1388:	02530121 	subseq	r0, r3, #1073741832	; 0x40000008
    138c:	0121cc08 	teqeq	r1, r8, lsl #24
    1390:	c0030552 	andgt	r0, r3, r2, asr r5
    1394:	21000094 	swpcs	r0, r4, [r0]	; <UNPREDICTABLE>
    1398:	03055101 	movweq	r5, #20737	; 0x5101
    139c:	000094f4 	strdeq	r9, [r0], -r4
    13a0:	05500121 	ldrbeq	r0, [r0, #-289]	; 0x121
    13a4:	00954403 	addseq	r4, r5, r3, lsl #8
    13a8:	cc250000 	stcgt	0, cr0, [r5], #-0
    13ac:	61000086 	smlabbvs	r0, r6, r0, r0
    13b0:	00000011 	andeq	r0, r0, r1, lsl r0
    13b4:	0000902b 	andeq	r9, r0, fp, lsr #32
    13b8:	00111000 	andseq	r1, r1, r0
    13bc:	00812c00 	addeq	r2, r1, r0, lsl #24
    13c0:	00160000 	andseq	r0, r6, r0
    13c4:	00110007 	andseq	r0, r1, r7
    13c8:	02b93200 	adcseq	r3, r9, #0, 4
    13cc:	21060000 	mrscs	r0, (UNDEF: 6)
    13d0:	0000112b 	andeq	r1, r0, fp, lsr #2
    13d4:	00002c33 	andeq	r2, r0, r3, lsr ip
    13d8:	002c3300 	eoreq	r3, ip, r0, lsl #6
    13dc:	34000000 	strcc	r0, [r0], #-0
    13e0:	0000029f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    13e4:	002c5407 	eoreq	r5, ip, r7, lsl #8
    13e8:	5a350000 	bpl	d413f0 <__bss_end__+0xd37940>
    13ec:	06000002 	streq	r0, [r0], -r2
    13f0:	00002524 	andeq	r2, r0, r4, lsr #10
    13f4:	00114b00 	andseq	r4, r1, r0, lsl #22
    13f8:	002c3300 	eoreq	r3, ip, r0, lsl #6
    13fc:	35000000 	strcc	r0, [r0, #-0]
    1400:	00000253 	andeq	r0, r0, r3, asr r2
    1404:	00252707 	eoreq	r2, r5, r7, lsl #14
    1408:	11610000 	cmnne	r1, r0
    140c:	97330000 	ldrls	r0, [r3, -r0]!
    1410:	30000000 	andcc	r0, r0, r0
    1414:	00bf3600 	adcseq	r3, pc, r0, lsl #12
    1418:	63070000 	movwvs	r0, #28672	; 0x7000
    141c:	0002fc32 	andeq	pc, r2, r2, lsr ip	; <UNPREDICTABLE>
    1420:	791d0600 	ldmdbvc	sp, {r9, sl}
    1424:	33000011 	movwcc	r0, #17
    1428:	0000002c 	andeq	r0, r0, ip, lsr #32
    142c:	02d13200 	sbcseq	r3, r1, #0, 4
    1430:	1c060000 	stcne	0, cr0, [r6], {-0}
    1434:	0000118a 	andeq	r1, r0, sl, lsl #3
    1438:	00002c33 	andeq	r2, r0, r3, lsr ip
    143c:	50370000 	eorspl	r0, r7, r0
    1440:	08000002 	stmdaeq	r0, {r1}
    1444:	00002502 	andeq	r2, r0, r2, lsl #10
    1448:	008a3300 	addeq	r3, sl, r0, lsl #6
    144c:	25330000 	ldrcs	r0, [r3, #-0]!
    1450:	33000000 	movwcc	r0, #0
    1454:	00000097 	muleq	r0, r7, r0
    1458:	00010633 	andeq	r0, r1, r3, lsr r6
    145c:	91000000 	mrsls	r0, (UNDEF: 0)
    1460:	04000001 	streq	r0, [r0], #-1
    1464:	00041e00 	andeq	r1, r4, r0, lsl #28
    1468:	30010400 	andcc	r0, r1, r0, lsl #8
    146c:	01000000 	mrseq	r0, (UNDEF: 0)
    1470:	00000321 	andeq	r0, r0, r1, lsr #6
    1474:	0000032f 	andeq	r0, r0, pc, lsr #6
    1478:	000086e0 	andeq	r8, r0, r0, ror #13
    147c:	00000058 	andeq	r0, r0, r8, asr r0
    1480:	00000460 	andeq	r0, r0, r0, ror #8
    1484:	00027602 	andeq	r7, r2, r2, lsl #12
    1488:	30280200 	eorcc	r0, r8, r0, lsl #4
    148c:	03000000 	movweq	r0, #0
    1490:	000001ef 	andeq	r0, r0, pc, ror #3
    1494:	47000304 	strmi	r0, [r0, -r4, lsl #6]
    1498:	04000000 	streq	r0, [r0], #-0
    149c:	000002f7 	strdeq	r0, [r0], -r7
    14a0:	00000047 	andeq	r0, r0, r7, asr #32
    14a4:	04050000 	streq	r0, [r5], #-0
    14a8:	0001f102 	andeq	pc, r1, r2, lsl #2
    14ac:	25620200 	strbcs	r0, [r2, #-512]!	; 0x200
    14b0:	06000000 	streq	r0, [r0], -r0
    14b4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    14b8:	04070074 	streq	r0, [r7], #-116	; 0x74
    14bc:	0000f307 	andeq	pc, r0, r7, lsl #6
    14c0:	06010700 	streq	r0, [r1], -r0, lsl #14
    14c4:	000000aa 	andeq	r0, r0, sl, lsr #1
    14c8:	39050207 	stmdbcc	r5, {r0, r1, r2, r9}
    14cc:	07000001 	streq	r0, [r0, -r1]
    14d0:	01300504 	teqeq	r0, r4, lsl #10
    14d4:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    14d8:	00012b05 	andeq	r2, r1, r5, lsl #22
    14dc:	08010700 	stmdaeq	r1, {r8, r9, sl}
    14e0:	000000a8 	andeq	r0, r0, r8, lsr #1
    14e4:	cc070207 	sfmgt	f0, 4, [r7], {7}
    14e8:	07000000 	streq	r0, [r0, -r0]
    14ec:	00ee0704 	rsceq	r0, lr, r4, lsl #14
    14f0:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    14f4:	0000e907 	andeq	lr, r0, r7, lsl #18
    14f8:	07040700 	streq	r0, [r4, -r0, lsl #14]
    14fc:	00000122 	andeq	r0, r0, r2, lsr #2
    1500:	00a70408 	adceq	r0, r7, r8, lsl #8
    1504:	01070000 	mrseq	r0, (UNDEF: 7)
    1508:	0000b108 	andeq	fp, r0, r8, lsl #2
    150c:	b4040800 	strlt	r0, [r4], #-2048	; 0x800
    1510:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1514:	000000a7 	andeq	r0, r0, r7, lsr #1
    1518:	0002530a 	andeq	r5, r2, sl, lsl #6
    151c:	54060100 	strpl	r0, [r6], #-256	; 0x100
    1520:	e0000000 	and	r0, r0, r0
    1524:	58000086 	stmdapl	r0, {r1, r2, r7}
    1528:	01000000 	mrseq	r0, (UNDEF: 0)
    152c:	0001439c 	muleq	r1, ip, r3
    1530:	6d660b00 	vstmdbvs	r6!, {d16-d15}
    1534:	06010074 			; <UNDEFINED> instruction: 0x06010074
    1538:	000000ae 	andeq	r0, r0, lr, lsr #1
    153c:	0c709102 	ldfeqp	f1, [r0], #-8
    1540:	6675620d 	ldrbtvs	r6, [r5], -sp, lsl #4
    1544:	43080100 	movwmi	r0, #33024	; 0x8100
    1548:	05000001 	streq	r0, [r0, #-1]
    154c:	0096b003 	addseq	fp, r6, r3
    1550:	031c0e00 	tsteq	ip, #0, 28
    1554:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1558:	00000049 	andeq	r0, r0, r9, asr #32
    155c:	0f5c9102 	svceq	0x005c9102
    1560:	01007a73 	tsteq	r0, r3, ror sl
    1564:	0000540c 	andeq	r5, r0, ip, lsl #8
    1568:	000b7700 	andeq	r7, fp, r0, lsl #14
    156c:	87081000 	strhi	r1, [r8, -r0]
    1570:	01740000 	cmneq	r4, r0
    1574:	01360000 	teqeq	r6, r0
    1578:	01110000 	tsteq	r1, r0
    157c:	4c910253 	lfmmi	f0, 4, [r1], {83}	; 0x53
    1580:	03520111 	cmpeq	r2, #1073741828	; 0x40000004
    1584:	11064891 			; <UNDEFINED> instruction: 0x11064891
    1588:	0a035101 	beq	d5994 <__bss_end__+0xcbee4>
    158c:	01110400 	tsteq	r1, r0, lsl #8
    1590:	00740250 	rsbseq	r0, r4, r0, asr r2
    1594:	871c1200 	ldrhi	r1, [ip, -r0, lsl #4]
    1598:	01110000 	tsteq	r1, r0
    159c:	00740250 	rsbseq	r0, r4, r0, asr r2
    15a0:	a7130000 	ldrge	r0, [r3, -r0]
    15a4:	54000000 	strpl	r0, [r0], #-0
    15a8:	14000001 	strne	r0, [r0], #-1
    15ac:	0000009a 	muleq	r0, sl, r0
    15b0:	150003ff 	strne	r0, [r0, #-1023]	; 0x3ff
    15b4:	00000054 	andeq	r0, r0, r4, asr r0
    15b8:	00000163 	andeq	r0, r0, r3, ror #2
    15bc:	0000ae16 	andeq	sl, r0, r6, lsl lr
    15c0:	88170000 	ldmdahi	r7, {}	; <UNPREDICTABLE>
    15c4:	04000003 	streq	r0, [r0], #-3
    15c8:	00016e20 	andeq	r6, r1, r0, lsr #28
    15cc:	54040800 	strpl	r0, [r4], #-2048	; 0x800
    15d0:	18000001 	stmdane	r0, {r0}
    15d4:	00000250 	andeq	r0, r0, r0, asr r2
    15d8:	00540205 	subseq	r0, r4, r5, lsl #4
    15dc:	a1160000 	tstge	r6, r0
    15e0:	16000000 	strne	r0, [r0], -r0
    15e4:	00000054 	andeq	r0, r0, r4, asr r0
    15e8:	0000ae16 	andeq	sl, r0, r6, lsl lr
    15ec:	00491600 	subeq	r1, r9, r0, lsl #12
    15f0:	00000000 	andeq	r0, r0, r0
    15f4:	000000ee 	andeq	r0, r0, lr, ror #1
    15f8:	054f0004 	strbeq	r0, [pc, #-4]	; 15fc <_start-0x6a04>
    15fc:	01040000 	mrseq	r0, (UNDEF: 4)
    1600:	00000030 	andeq	r0, r0, r0, lsr r0
    1604:	00037301 	andeq	r7, r3, r1, lsl #6
    1608:	00032f00 	andeq	r2, r3, r0, lsl #30
    160c:	00873800 	addeq	r3, r7, r0, lsl #16
    1610:	00003400 	andeq	r3, r0, r0, lsl #8
    1614:	00056600 	andeq	r6, r5, r0, lsl #12
    1618:	05040200 	streq	r0, [r4, #-512]	; 0x200
    161c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1620:	f3070403 	vshl.u8	d0, d3, d7
    1624:	03000000 	movweq	r0, #0
    1628:	00aa0601 	adceq	r0, sl, r1, lsl #12
    162c:	02030000 	andeq	r0, r3, #0
    1630:	00013905 	andeq	r3, r1, r5, lsl #18
    1634:	05040300 	streq	r0, [r4, #-768]	; 0x300
    1638:	00000130 	andeq	r0, r0, r0, lsr r1
    163c:	2b050803 	blcs	143650 <__bss_end__+0x139ba0>
    1640:	03000001 	movweq	r0, #1
    1644:	00a80801 	adceq	r0, r8, r1, lsl #16
    1648:	02030000 	andeq	r0, r3, #0
    164c:	0000cc07 	andeq	ip, r0, r7, lsl #24
    1650:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1654:	000000ee 	andeq	r0, r0, lr, ror #1
    1658:	e9070803 	stmdb	r7, {r0, r1, fp}
    165c:	03000000 	movweq	r0, #0
    1660:	01220704 	teqeq	r2, r4, lsl #14
    1664:	01030000 	mrseq	r0, (UNDEF: 3)
    1668:	0000b108 	andeq	fp, r0, r8, lsl #2
    166c:	7f040400 	svcvc	0x00040400
    1670:	05000000 	streq	r0, [r0, #-0]
    1674:	00000072 	andeq	r0, r0, r2, ror r0
    1678:	00037f06 	andeq	r7, r3, r6, lsl #30
    167c:	25040100 	strcs	r0, [r4, #-256]	; 0x100
    1680:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    1684:	34000087 	strcc	r0, [r0], #-135	; 0x87
    1688:	01000000 	mrseq	r0, (UNDEF: 0)
    168c:	0000ab9c 	muleq	r0, ip, fp
    1690:	00700700 	rsbseq	r0, r0, r0, lsl #14
    1694:	00790401 	rsbseq	r0, r9, r1, lsl #8
    1698:	0ba00000 	bleq	fe8016a0 <__bss_end__+0xfe7f7bf0>
    169c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    16a0:	00000025 	andeq	r0, r0, r5, lsr #32
    16a4:	000000ba 	strheq	r0, [r0], -sl
    16a8:	00002509 	andeq	r2, r0, r9, lsl #10
    16ac:	8d0a0000 	stchi	0, cr0, [sl, #-0]
    16b0:	02000003 	andeq	r0, r0, #3
    16b4:	0000c51d 	andeq	ip, r0, sp, lsl r5
    16b8:	ab040400 	blge	1026c0 <__bss_end__+0xf8c10>
    16bc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    16c0:	00000025 	andeq	r0, r0, r5, lsr #32
    16c4:	000000da 	ldrdeq	r0, [r0], -sl
    16c8:	00007909 	andeq	r7, r0, r9, lsl #18
    16cc:	880b0000 	stmdahi	fp, {}	; <UNPREDICTABLE>
    16d0:	01000003 	tsteq	r0, r3
    16d4:	0000eb0c 	andeq	lr, r0, ip, lsl #22
    16d8:	5c030500 	cfstr32pl	mvfx0, [r3], {-0}
    16dc:	04000093 	streq	r0, [r0], #-147	; 0x93
    16e0:	0000cb04 	andeq	ip, r0, r4, lsl #22
    16e4:	06540000 	ldrbeq	r0, [r4], -r0
    16e8:	00040000 	andeq	r0, r4, r0
    16ec:	000005e8 	andeq	r0, r0, r8, ror #11
    16f0:	00300104 	eorseq	r0, r0, r4, lsl #2
    16f4:	c5010000 	strgt	r0, [r1, #-0]
    16f8:	2f000003 	svccs	0x00000003
    16fc:	6c000003 	stcvs	0, cr0, [r0], {3}
    1700:	f0000087 			; <UNDEFINED> instruction: 0xf0000087
    1704:	00000004 	andeq	r0, r0, r4
    1708:	02000006 	andeq	r0, r0, #6
    170c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1710:	04030074 	streq	r0, [r3], #-116	; 0x74
    1714:	0000f307 	andeq	pc, r0, r7, lsl #6
    1718:	06010300 	streq	r0, [r1], -r0, lsl #6
    171c:	000000aa 	andeq	r0, r0, sl, lsr #1
    1720:	39050203 	stmdbcc	r5, {r0, r1, r9}
    1724:	03000001 	movweq	r0, #1
    1728:	01300504 	teqeq	r0, r4, lsl #10
    172c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1730:	00012b05 	andeq	r2, r1, r5, lsl #22
    1734:	08010300 	stmdaeq	r1, {r8, r9}
    1738:	000000a8 	andeq	r0, r0, r8, lsr #1
    173c:	cc070203 	sfmgt	f0, 4, [r7], {3}
    1740:	03000000 	movweq	r0, #0
    1744:	00ee0704 	rsceq	r0, lr, r4, lsl #14
    1748:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    174c:	0000e907 	andeq	lr, r0, r7, lsl #18
    1750:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1754:	00000122 	andeq	r0, r0, r2, lsr #2
    1758:	04050404 	streq	r0, [r5], #-1028	; 0x404
    175c:	0000007a 	andeq	r0, r0, sl, ror r0
    1760:	b1080103 	tstlt	r8, r3, lsl #2
    1764:	05000000 	streq	r0, [r0, #-0]
    1768:	00008704 	andeq	r8, r0, r4, lsl #14
    176c:	007a0600 	rsbseq	r0, sl, r0, lsl #12
    1770:	76070000 	strvc	r0, [r7], -r0
    1774:	02000002 	andeq	r0, r0, #2
    1778:	00009728 	andeq	r9, r0, r8, lsr #14
    177c:	01ef0800 	mvneq	r0, r0, lsl #16
    1780:	04040000 	streq	r0, [r4], #-0
    1784:	0000ae00 	andeq	sl, r0, r0, lsl #28
    1788:	02f70900 	rscseq	r0, r7, #0, 18
    178c:	00720000 	rsbseq	r0, r2, r0
    1790:	00000000 	andeq	r0, r0, r0
    1794:	0001f107 	andeq	pc, r1, r7, lsl #2
    1798:	8c620200 	sfmhi	f0, 2, [r2], #-0
    179c:	0a000000 	beq	17a4 <_start-0x685c>
    17a0:	000003a7 	andeq	r0, r0, r7, lsr #7
    17a4:	00252701 	eoreq	r2, r5, r1, lsl #14
    17a8:	876c0000 	strbhi	r0, [ip, -r0]!
    17ac:	00140000 	andseq	r0, r4, r0
    17b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    17b4:	000000e0 	andeq	r0, r0, r0, ror #1
    17b8:	0100630b 	tsteq	r0, fp, lsl #6
    17bc:	00002527 	andeq	r2, r0, r7, lsr #10
    17c0:	000bbe00 	andeq	fp, fp, r0, lsl #28
    17c4:	700c0000 	andvc	r0, ip, r0
    17c8:	01006461 	tsteq	r0, r1, ror #8
    17cc:	0000742e 	andeq	r7, r0, lr, lsr #8
    17d0:	00878000 	addeq	r8, r7, r0
    17d4:	00002c00 	andeq	r2, r0, r0, lsl #24
    17d8:	309c0100 	addscc	r0, ip, r0, lsl #2
    17dc:	0b000001 	bleq	17e8 <_start-0x6818>
    17e0:	2e010070 	mcrcs	0, 0, r0, cr1, cr0, {3}
    17e4:	00000074 	andeq	r0, r0, r4, ror r0
    17e8:	00000bec 	andeq	r0, r0, ip, ror #23
    17ec:	0003b70d 	andeq	fp, r3, sp, lsl #14
    17f0:	742e0100 	strtvc	r0, [lr], #-256	; 0x100
    17f4:	17000000 	strne	r0, [r0, -r0]
    17f8:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
    17fc:	000003e5 	andeq	r0, r0, r5, ror #7
    1800:	00252e01 	eoreq	r2, r5, r1, lsl #28
    1804:	52010000 	andpl	r0, r1, #0
    1808:	6e656c0f 	cdpvs	12, 6, cr6, cr5, cr15, {0}
    180c:	252f0100 	strcs	r0, [pc, #-256]!	; 1714 <_start-0x68ec>
    1810:	01000000 	mrseq	r0, (UNDEF: 0)
    1814:	9f0a0051 	svcls	0x000a0051
    1818:	01000003 	tsteq	r0, r3
    181c:	00007437 	andeq	r7, r0, r7, lsr r4
    1820:	0087ac00 	addeq	sl, r7, r0, lsl #24
    1824:	00004000 	andeq	r4, r0, r0
    1828:	9c9c0100 	ldflss	f0, [ip], {0}
    182c:	0b000001 	bleq	1838 <_start-0x67c8>
    1830:	00747364 	rsbseq	r7, r4, r4, ror #6
    1834:	00743701 	rsbseq	r3, r4, r1, lsl #14
    1838:	0c380000 	ldceq	0, cr0, [r8], #-0
    183c:	6e0b0000 	cdpvs	0, 0, cr0, cr11, cr0, {0}
    1840:	25370100 	ldrcs	r0, [r7, #-256]!	; 0x100
    1844:	70000000 	andvc	r0, r0, r0
    1848:	0b00000c 	bleq	1880 <_start-0x6780>
    184c:	37010070 	smlsdxcc	r1, r0, r0, r0
    1850:	00000074 	andeq	r0, r0, r4, ror r0
    1854:	00000c91 	muleq	r0, r1, ip
    1858:	0004760d 	andeq	r7, r4, sp, lsl #12
    185c:	74370100 	ldrtvc	r0, [r7], #-256	; 0x100
    1860:	c7000000 	strgt	r0, [r0, -r0]
    1864:	1000000c 	andne	r0, r0, ip
    1868:	006e656c 	rsbeq	r6, lr, ip, ror #10
    186c:	00253901 	eoreq	r3, r5, r1, lsl #18
    1870:	0ce50000 	stcleq	0, cr0, [r5]
    1874:	730f0000 	movwvc	r0, #61440	; 0xf000
    1878:	743d0100 	ldrtvc	r0, [sp], #-256	; 0x100
    187c:	01000000 	mrseq	r0, (UNDEF: 0)
    1880:	f30a0050 	vqadd.u8	q0, q5, q0
    1884:	01000003 	tsteq	r0, r3
    1888:	00007447 	andeq	r7, r0, r7, asr #8
    188c:	0087ec00 	addeq	lr, r7, r0, lsl #24
    1890:	00019800 	andeq	r9, r1, r0, lsl #16
    1894:	ca9c0100 	bgt	fe701c9c <__bss_end__+0xfe6f81ec>
    1898:	0d000002 	stceq	0, cr0, [r0, #-8]
    189c:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
    18a0:	002c4701 	eoreq	r4, ip, r1, lsl #14
    18a4:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    18a8:	640b0000 	strvs	r0, [fp], #-0
    18ac:	01007473 	tsteq	r0, r3, ror r4
    18b0:	00007447 	andeq	r7, r0, r7, asr #8
    18b4:	000d3a00 	andeq	r3, sp, r0, lsl #20
    18b8:	006e0b00 	rsbeq	r0, lr, r0, lsl #22
    18bc:	00254701 	eoreq	r4, r5, r1, lsl #14
    18c0:	0da80000 	stceq	0, cr0, [r8]
    18c4:	760b0000 	strvc	r0, [fp], -r0
    18c8:	01006c61 	tsteq	r0, r1, ror #24
    18cc:	00002547 	andeq	r2, r0, r7, asr #10
    18d0:	000dd400 	andeq	sp, sp, r0, lsl #8
    18d4:	03e50d00 	mvneq	r0, #0, 26
    18d8:	47010000 	strmi	r0, [r1, -r0]
    18dc:	00000025 	andeq	r0, r0, r5, lsr #32
    18e0:	00000e5e 	andeq	r0, r0, lr, asr lr
    18e4:	0003bc0e 	andeq	fp, r3, lr, lsl #24
    18e8:	25470100 	strbcs	r0, [r7, #-256]	; 0x100
    18ec:	02000000 	andeq	r0, r0, #0
    18f0:	620f0491 	andvs	r0, pc, #-1862270976	; 0x91000000
    18f4:	01006675 	tsteq	r0, r5, ror r6
    18f8:	0002ca4c 	andeq	ip, r2, ip, asr #20
    18fc:	a8910300 	ldmge	r1, {r8, r9}
    1900:	0070107f 	rsbseq	r1, r0, pc, ror r0
    1904:	00744c01 	rsbseq	r4, r4, r1, lsl #24
    1908:	0e880000 	cdpeq	0, 8, cr0, cr8, cr0, {0}
    190c:	75100000 	ldrvc	r0, [r0, #-0]
    1910:	2c4d0100 	stfcse	f0, [sp], {-0}
    1914:	2d000000 	stccs	0, cr0, [r0, #-0]
    1918:	1100000f 	tstne	r0, pc
    191c:	0000021c 	andeq	r0, r0, ip, lsl r2
    1920:	000002ea 	andeq	r0, r0, sl, ror #5
    1924:	95a00305 	strls	r0, [r0, #773]!	; 0x305
    1928:	58120000 	ldmdapl	r2, {}	; <UNPREDICTABLE>
    192c:	74000088 	strvc	r0, [r0], #-136	; 0x88
    1930:	61000000 	mrsvs	r0, (UNDEF: 0)
    1934:	13000002 	movwne	r0, #2
    1938:	00000399 	muleq	r0, r9, r3
    193c:	002c5201 	eoreq	r5, ip, r1, lsl #4
    1940:	103d0000 	eorsne	r0, sp, r0
    1944:	14000000 	strne	r0, [r0], #-0
    1948:	0000893c 	andeq	r8, r0, ip, lsr r9
    194c:	0000063a 	andeq	r0, r0, sl, lsr r6
    1950:	00000290 	muleq	r0, r0, r2
    1954:	02530115 	subseq	r0, r3, #1073741829	; 0x40000005
    1958:	01157508 	tsteq	r5, r8, lsl #10
    195c:	a0030552 	andge	r0, r3, r2, asr r5
    1960:	15000095 	strne	r0, [r0, #-149]	; 0x95
    1964:	03055101 	movweq	r5, #20737	; 0x5101
    1968:	000095d8 	ldrdeq	r9, [r0], -r8
    196c:	05500115 	ldrbeq	r0, [r0, #-277]	; 0x115
    1970:	0095c403 	addseq	ip, r5, r3, lsl #8
    1974:	40160000 	andsmi	r0, r6, r0
    1978:	50000089 	andpl	r0, r0, r9, lsl #1
    197c:	14000006 	strne	r0, [r0], #-6
    1980:	0000894c 	andeq	r8, r0, ip, asr #18
    1984:	000000e0 	andeq	r0, r0, r0, ror #1
    1988:	000002ad 	andeq	r0, r0, sp, lsr #5
    198c:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    1990:	1700007d 	smlsdxne	r0, sp, r0, r0
    1994:	00008960 	andeq	r8, r0, r0, ror #18
    1998:	00000130 	andeq	r0, r0, r0, lsr r1
    199c:	02530115 	subseq	r0, r3, #1073741829	; 0x40000005
    19a0:	0115007d 	tsteq	r5, sp, ror r0
    19a4:	00740251 	rsbseq	r0, r4, r1, asr r2
    19a8:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    19ac:	00000075 	andeq	r0, r0, r5, ror r0
    19b0:	00007a18 	andeq	r7, r0, r8, lsl sl
    19b4:	0002da00 	andeq	sp, r2, r0, lsl #20
    19b8:	006b1900 	rsbeq	r1, fp, r0, lsl #18
    19bc:	003f0000 	eorseq	r0, pc, r0
    19c0:	00007a18 	andeq	r7, r0, r8, lsl sl
    19c4:	0002ea00 	andeq	lr, r2, r0, lsl #20
    19c8:	006b1900 	rsbeq	r1, fp, r0, lsl #18
    19cc:	00040000 	andeq	r0, r4, r0
    19d0:	0002da06 	andeq	sp, r2, r6, lsl #20
    19d4:	03d61a00 	bicseq	r1, r6, #0, 20
    19d8:	1f010000 	svcne	0x00010000
    19dc:	00008984 	andeq	r8, r0, r4, lsl #19
    19e0:	00000050 	andeq	r0, r0, r0, asr r0
    19e4:	036a9c01 	cmneq	sl, #256	; 0x100
    19e8:	eb0d0000 	bl	3419f0 <__bss_end__+0x337f40>
    19ec:	01000003 	tsteq	r0, r3
    19f0:	0003791f 	andeq	r7, r3, pc, lsl r9
    19f4:	00106900 	andseq	r6, r0, r0, lsl #18
    19f8:	03af0d00 			; <UNDEFINED> instruction: 0x03af0d00
    19fc:	1f010000 	svcne	0x00010000
    1a00:	0000038e 	andeq	r0, r0, lr, lsl #7
    1a04:	00001095 	muleq	r0, r5, r0
    1a08:	00021c11 	andeq	r1, r2, r1, lsl ip
    1a0c:	0003a400 	andeq	sl, r3, r0, lsl #8
    1a10:	a8030500 	stmdage	r3, {r8, sl}
    1a14:	14000095 	strne	r0, [r0], #-149	; 0x95
    1a18:	000089a4 	andeq	r8, r0, r4, lsr #19
    1a1c:	0000063a 	andeq	r0, r0, sl, lsr r6
    1a20:	00000360 	andeq	r0, r0, r0, ror #6
    1a24:	02530115 	subseq	r0, r3, #1073741829	; 0x40000005
    1a28:	01152008 	tsteq	r5, r8
    1a2c:	a8030552 	stmdage	r3, {r1, r4, r6, r8, sl}
    1a30:	15000095 	strne	r0, [r0, #-149]	; 0x95
    1a34:	03055101 	movweq	r5, #20737	; 0x5101
    1a38:	000095d8 	ldrdeq	r9, [r0], -r8
    1a3c:	05500115 	ldrbeq	r0, [r0, #-277]	; 0x115
    1a40:	00961003 	addseq	r1, r6, r3
    1a44:	a8160000 	ldmdage	r6, {}	; <UNPREDICTABLE>
    1a48:	50000089 	andpl	r0, r0, r9, lsl #1
    1a4c:	00000006 	andeq	r0, r0, r6
    1a50:	0000251b 	andeq	r2, r0, fp, lsl r5
    1a54:	00037900 	andeq	r7, r3, r0, lsl #18
    1a58:	00251c00 	eoreq	r1, r5, r0, lsl #24
    1a5c:	05000000 	streq	r0, [r0, #-0]
    1a60:	00036a04 	andeq	r6, r3, r4, lsl #20
    1a64:	00251b00 	eoreq	r1, r5, r0, lsl #22
    1a68:	038e0000 	orreq	r0, lr, #0
    1a6c:	811c0000 	tsthi	ip, r0
    1a70:	00000000 	andeq	r0, r0, r0
    1a74:	037f0405 	cmneq	pc, #83886080	; 0x5000000
    1a78:	7a180000 	bvc	601a80 <__bss_end__+0x5f7fd0>
    1a7c:	a4000000 	strge	r0, [r0], #-0
    1a80:	19000003 	stmdbne	r0, {r0, r1}
    1a84:	0000006b 	andeq	r0, r0, fp, rrx
    1a88:	9406000e 	strls	r0, [r6], #-14
    1a8c:	1d000003 	stcne	0, cr0, [r0, #-12]
    1a90:	00000250 	andeq	r0, r0, r0, asr r2
    1a94:	00257d01 	eoreq	r7, r5, r1, lsl #26
    1a98:	89d40000 	ldmibhi	r4, {}^	; <UNPREDICTABLE>
    1a9c:	02880000 	addeq	r0, r8, #0
    1aa0:	9c010000 	stcls	0, cr0, [r1], {-0}
    1aa4:	000005ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1aa8:	6675620b 	ldrbtvs	r6, [r5], -fp, lsl #4
    1aac:	747d0100 	ldrbtvc	r0, [sp], #-256	; 0x100
    1ab0:	c1000000 	mrsgt	r0, (UNDEF: 0)
    1ab4:	0b000010 	bleq	1afc <_start-0x6504>
    1ab8:	7d01006e 	stcvc	0, cr0, [r1, #-440]	; 0xfffffe48
    1abc:	00000025 	andeq	r0, r0, r5, lsr #32
    1ac0:	000010ed 	andeq	r1, r0, sp, ror #1
    1ac4:	746d660b 	strbtvc	r6, [sp], #-1547	; 0x60b
    1ac8:	817d0100 	cmnhi	sp, r0, lsl #2
    1acc:	1b000000 	blne	1ad4 <_start-0x652c>
    1ad0:	0d000011 	stceq	0, cr0, [r0, #-68]	; 0xffffffbc
    1ad4:	0000031c 	andeq	r0, r0, ip, lsl r3
    1ad8:	00ae7d01 	adceq	r7, lr, r1, lsl #26
    1adc:	114f0000 	mrsne	r0, SPSR
    1ae0:	70100000 	andsvc	r0, r0, r0
    1ae4:	747e0100 	ldrbtvc	r0, [lr], #-256	; 0x100
    1ae8:	62000000 	andvs	r0, r0, #0
    1aec:	10000011 	andne	r0, r0, r1, lsl r0
    1af0:	7e010065 	cdpvc	0, 0, cr0, cr1, cr5, {3}
    1af4:	00000074 	andeq	r0, r0, r4, ror r0
    1af8:	000011e0 	andeq	r1, r0, r0, ror #3
    1afc:	00021c11 	andeq	r1, r2, r1, lsl ip
    1b00:	00060f00 	andeq	r0, r6, r0, lsl #30
    1b04:	b8030500 	stmdalt	r3, {r8, sl}
    1b08:	1e000095 	mcrne	0, 0, r0, cr0, cr5, {4}
    1b0c:	00008a28 	andeq	r8, r0, r8, lsr #20
    1b10:	000001f4 	strdeq	r0, [r0], -r4
    1b14:	01007310 	tsteq	r0, r0, lsl r3
    1b18:	0000748b 	andeq	r7, r0, fp, lsl #9
    1b1c:	00120700 	andseq	r0, r2, r0, lsl #14
    1b20:	756e0f00 	strbvc	r0, [lr, #-3840]!	; 0xf00
    1b24:	8b01006d 	blhi	41ce0 <__bss_end__+0x38230>
    1b28:	00000614 	andeq	r0, r0, r4, lsl r6
    1b2c:	7ed89103 	atnvce	f1, f3
    1b30:	0003e513 	andeq	lr, r3, r3, lsl r5
    1b34:	2c8c0100 	stfcss	f0, [ip], {0}
    1b38:	5c000000 	stcpl	0, cr0, [r0], {-0}
    1b3c:	14000012 	strne	r0, [r0], #-18
    1b40:	00008a58 	andeq	r8, r0, r8, asr sl
    1b44:	000000b9 	strheq	r0, [r0], -r9
    1b48:	0000046d 	andeq	r0, r0, sp, ror #8
    1b4c:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    1b50:	14000075 	strne	r0, [r0], #-117	; 0x75
    1b54:	00008a7c 	andeq	r8, r0, ip, ror sl
    1b58:	0000063a 	andeq	r0, r0, sl, lsr r6
    1b5c:	0000049c 	muleq	r0, ip, r4
    1b60:	02530115 	subseq	r0, r3, #1073741829	; 0x40000005
    1b64:	01159208 	tsteq	r5, r8, lsl #4
    1b68:	b8030552 	stmdalt	r3, {r1, r4, r6, r8, sl}
    1b6c:	15000095 	strne	r0, [r0, #-149]	; 0x95
    1b70:	03055101 	movweq	r5, #20737	; 0x5101
    1b74:	000095d8 	ldrdeq	r9, [r0], -r8
    1b78:	05500115 	ldrbeq	r0, [r0, #-277]	; 0x115
    1b7c:	00962803 	addseq	r2, r6, r3, lsl #16
    1b80:	80160000 	andshi	r0, r6, r0
    1b84:	5000008a 	andpl	r0, r0, sl, lsl #1
    1b88:	14000006 	strne	r0, [r0], #-6
    1b8c:	00008b00 	andeq	r8, r0, r0, lsl #22
    1b90:	0000063a 	andeq	r0, r0, sl, lsr r6
    1b94:	000004d4 	ldrdeq	r0, [r0], -r4
    1b98:	02530115 	subseq	r0, r3, #1073741829	; 0x40000005
    1b9c:	01159808 	tsteq	r5, r8, lsl #16
    1ba0:	b8030552 	stmdalt	r3, {r1, r4, r6, r8, sl}
    1ba4:	15000095 	strne	r0, [r0, #-149]	; 0x95
    1ba8:	03055101 	movweq	r5, #20737	; 0x5101
    1bac:	000095d8 	ldrdeq	r9, [r0], -r8
    1bb0:	05500115 	ldrbeq	r0, [r0, #-277]	; 0x115
    1bb4:	00964403 	addseq	r4, r6, r3, lsl #8
    1bb8:	04160000 	ldreq	r0, [r6], #-0
    1bbc:	5000008b 	andpl	r0, r0, fp, lsl #1
    1bc0:	14000006 	strne	r0, [r0], #-6
    1bc4:	00008b28 	andeq	r8, r0, r8, lsr #22
    1bc8:	0000019c 	muleq	r0, ip, r1
    1bcc:	0000050a 	andeq	r0, r0, sl, lsl #10
    1bd0:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    1bd4:	01158008 	tsteq	r5, r8
    1bd8:	d0910351 	addsle	r0, r1, r1, asr r3
    1bdc:	5001157e 	andpl	r1, r1, lr, ror r5
    1be0:	02153a01 	andseq	r3, r5, #4096	; 0x1000
    1be4:	3101047d 	tstcc	r1, sp, ror r4
    1be8:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    1bec:	00007702 	andeq	r7, r0, r2, lsl #14
    1bf0:	008b5014 	addeq	r5, fp, r4, lsl r0
    1bf4:	00019c00 	andeq	r9, r1, r0, lsl #24
    1bf8:	00053700 	andeq	r3, r5, r0, lsl #14
    1bfc:	52011500 	andpl	r1, r1, #0, 10
    1c00:	15800802 	strne	r0, [r0, #2050]	; 0x802
    1c04:	91035101 	tstls	r3, r1, lsl #2
    1c08:	01157ed0 			; <UNDEFINED> instruction: 0x01157ed0
    1c0c:	153a0150 	ldrne	r0, [sl, #-336]!	; 0x150
    1c10:	01047d02 	tsteq	r4, r2, lsl #26
    1c14:	7d021530 	cfstr32vc	mvfx1, [r2, #-192]	; 0xffffff40
    1c18:	00770200 	rsbseq	r0, r7, r0, lsl #4
    1c1c:	8b781400 	blhi	1e06c24 <__bss_end__+0x1dfd174>
    1c20:	019c0000 	orrseq	r0, ip, r0
    1c24:	05640000 	strbeq	r0, [r4, #-0]!
    1c28:	01150000 	tsteq	r5, r0
    1c2c:	80080252 	andhi	r0, r8, r2, asr r2
    1c30:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    1c34:	157ed091 	ldrbne	sp, [lr, #-145]!	; 0x91
    1c38:	40015001 	andmi	r5, r1, r1
    1c3c:	047d0215 	ldrbteq	r0, [sp], #-533	; 0x215
    1c40:	02153001 	andseq	r3, r5, #1
    1c44:	7702007d 	smlsdxvc	r2, sp, r0, r0
    1c48:	a0140000 	andsge	r0, r4, r0
    1c4c:	9c00008b 	stcls	0, cr0, [r0], {139}	; 0x8b
    1c50:	91000001 	tstls	r0, r1
    1c54:	15000005 	strne	r0, [r0, #-5]
    1c58:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    1c5c:	51011580 	smlabbpl	r1, r0, r5, r1
    1c60:	7ed09103 	atnvcs	f1, f3
    1c64:	01500115 	cmpeq	r0, r5, lsl r1
    1c68:	7d021532 	cfstr32vc	mvfx1, [r2, #-200]	; 0xffffff38
    1c6c:	15300104 	ldrne	r0, [r0, #-260]!	; 0x104
    1c70:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    1c74:	14000077 	strne	r0, [r0], #-119	; 0x77
    1c78:	00008bd4 	ldrdeq	r8, [r0], -r4
    1c7c:	0000019c 	muleq	r0, ip, r1
    1c80:	000005be 			; <UNDEFINED> instruction: 0x000005be
    1c84:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    1c88:	01158008 	tsteq	r5, r8
    1c8c:	d0910351 	addsle	r0, r1, r1, asr r3
    1c90:	5001157e 	andpl	r1, r1, lr, ror r5
    1c94:	02153801 	andseq	r3, r5, #65536	; 0x10000
    1c98:	3001047d 	andcc	r0, r1, sp, ror r4
    1c9c:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    1ca0:	00007702 	andeq	r7, r0, r2, lsl #14
    1ca4:	008bf014 	addeq	pc, fp, r4, lsl r0	; <UNPREDICTABLE>
    1ca8:	00063a00 	andeq	r3, r6, r0, lsl #20
    1cac:	0005f400 	andeq	pc, r5, r0, lsl #8
    1cb0:	53011500 	movwpl	r1, #5376	; 0x1500
    1cb4:	15b90802 	ldrne	r0, [r9, #2050]!	; 0x802
    1cb8:	03055201 	movweq	r5, #20993	; 0x5201
    1cbc:	000095b8 			; <UNDEFINED> instruction: 0x000095b8
    1cc0:	05510115 	ldrbeq	r0, [r1, #-277]	; 0x115
    1cc4:	0095d803 	addseq	sp, r5, r3, lsl #16
    1cc8:	50011500 	andpl	r1, r1, r0, lsl #10
    1ccc:	966c0305 	strbtls	r0, [ip], -r5, lsl #6
    1cd0:	02150000 	andseq	r0, r5, #0
    1cd4:	7902007d 	stmdbvc	r2, {r0, r2, r3, r4, r5, r6}
    1cd8:	f4160000 			; <UNDEFINED> instruction: 0xf4160000
    1cdc:	5000008b 	andpl	r0, r0, fp, lsl #1
    1ce0:	00000006 	andeq	r0, r0, r6
    1ce4:	007a1800 	rsbseq	r1, sl, r0, lsl #16
    1ce8:	060f0000 	streq	r0, [pc], -r0
    1cec:	6b190000 	blvs	641cf4 <__bss_end__+0x638244>
    1cf0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1cf4:	05ff0600 	ldrbeq	r0, [pc, #1536]!	; 22fc <_start-0x5d04>
    1cf8:	7a180000 	bvc	601d00 <__bss_end__+0x5f8250>
    1cfc:	24000000 	strcs	r0, [r0], #-0
    1d00:	19000006 	stmdbne	r0, {r1, r2}
    1d04:	0000006b 	andeq	r0, r0, fp, rrx
    1d08:	8d1f007f 	ldchi	0, cr0, [pc, #-508]	; 1b14 <_start-0x64ec>
    1d0c:	03000003 	movweq	r0, #3
    1d10:	0003791d 	andeq	r7, r3, sp, lsl r9
    1d14:	03881f00 	orreq	r1, r8, #0, 30
    1d18:	20030000 	andcs	r0, r3, r0
    1d1c:	0000038e 	andeq	r0, r0, lr, lsl #7
    1d20:	00025320 	andeq	r5, r2, r0, lsr #6
    1d24:	25270300 	strcs	r0, [r7, #-768]!	; 0x300
    1d28:	50000000 	andpl	r0, r0, r0
    1d2c:	1c000006 	stcne	0, cr0, [r0], {6}
    1d30:	00000081 	andeq	r0, r0, r1, lsl #1
    1d34:	bf220021 	svclt	0x00220021
    1d38:	03000000 	movweq	r0, #0
    1d3c:	00b80063 	adcseq	r0, r8, r3, rrx
    1d40:	00040000 	andeq	r0, r4, r0
    1d44:	000007c6 	andeq	r0, r0, r6, asr #15
    1d48:	00300104 	eorseq	r0, r0, r4, lsl #2
    1d4c:	06010000 	streq	r0, [r1], -r0
    1d50:	2f000004 	svccs	0x00000004
    1d54:	5c000003 	stcpl	0, cr0, [r0], {3}
    1d58:	2000008c 	andcs	r0, r0, ip, lsl #1
    1d5c:	e0000000 	and	r0, r0, r0
    1d60:	02000007 	andeq	r0, r0, #7
    1d64:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1d68:	04030074 	streq	r0, [r3], #-116	; 0x74
    1d6c:	0000f307 	andeq	pc, r0, r7, lsl #6
    1d70:	06010300 	streq	r0, [r1], -r0, lsl #6
    1d74:	000000aa 	andeq	r0, r0, sl, lsr #1
    1d78:	39050203 	stmdbcc	r5, {r0, r1, r9}
    1d7c:	03000001 	movweq	r0, #1
    1d80:	01300504 	teqeq	r0, r4, lsl #10
    1d84:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1d88:	00012b05 	andeq	r2, r1, r5, lsl #22
    1d8c:	08010300 	stmdaeq	r1, {r8, r9}
    1d90:	000000a8 	andeq	r0, r0, r8, lsr #1
    1d94:	cc070203 	sfmgt	f0, 4, [r7], {3}
    1d98:	03000000 	movweq	r0, #0
    1d9c:	00ee0704 	rsceq	r0, lr, r4, lsl #14
    1da0:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1da4:	0000e907 	andeq	lr, r0, r7, lsl #18
    1da8:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1dac:	00000122 	andeq	r0, r0, r2, lsr #2
    1db0:	b1080103 	tstlt	r8, r3, lsl #2
    1db4:	04000000 	streq	r0, [r0], #-0
    1db8:	00000143 	andeq	r0, r0, r3, asr #2
    1dbc:	8c5c0301 	mrrchi	3, 0, r0, ip, cr1
    1dc0:	00100000 	andseq	r0, r0, r0
    1dc4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1dc8:	0000009c 	muleq	r0, ip, r0
    1dcc:	01007205 	tsteq	r0, r5, lsl #4
    1dd0:	00002c04 	andeq	r2, r0, r4, lsl #24
    1dd4:	00128600 	andseq	r8, r2, r0, lsl #12
    1dd8:	f8060000 			; <UNDEFINED> instruction: 0xf8060000
    1ddc:	01000003 	tsteq	r0, r3
    1de0:	008c6c0c 	addeq	r6, ip, ip, lsl #24
    1de4:	00001000 	andeq	r1, r0, r0
    1de8:	059c0100 	ldreq	r0, [ip, #256]	; 0x100
    1dec:	0d010072 	stceq	0, cr0, [r1, #-456]	; 0xfffffe38
    1df0:	0000002c 	andeq	r0, r0, ip, lsr #32
    1df4:	000012aa 	andeq	r1, r0, sl, lsr #5
    1df8:	00ff0000 	rscseq	r0, pc, r0
    1dfc:	00040000 	andeq	r0, r4, r0
    1e00:	00000831 	andeq	r0, r0, r1, lsr r8
    1e04:	00300104 	eorseq	r0, r0, r4, lsl #2
    1e08:	24010000 	strcs	r0, [r1], #-0
    1e0c:	2f000004 	svccs	0x00000004
    1e10:	7c000003 	stcvc	0, cr0, [r0], {3}
    1e14:	2800008c 	stmdacs	r0, {r2, r3, r7}
    1e18:	27000000 	strcs	r0, [r0, -r0]
    1e1c:	02000008 	andeq	r0, r0, #8
    1e20:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1e24:	04030074 	streq	r0, [r3], #-116	; 0x74
    1e28:	0000f307 	andeq	pc, r0, r7, lsl #6
    1e2c:	06010300 	streq	r0, [r1], -r0, lsl #6
    1e30:	000000aa 	andeq	r0, r0, sl, lsr #1
    1e34:	39050203 	stmdbcc	r5, {r0, r1, r9}
    1e38:	03000001 	movweq	r0, #1
    1e3c:	01300504 	teqeq	r0, r4, lsl #10
    1e40:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1e44:	00012b05 	andeq	r2, r1, r5, lsl #22
    1e48:	08010300 	stmdaeq	r1, {r8, r9}
    1e4c:	000000a8 	andeq	r0, r0, r8, lsr #1
    1e50:	cc070203 	sfmgt	f0, 4, [r7], {3}
    1e54:	03000000 	movweq	r0, #0
    1e58:	00ee0704 	rsceq	r0, lr, r4, lsl #14
    1e5c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1e60:	0000e907 	andeq	lr, r0, r7, lsl #18
    1e64:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1e68:	00000122 	andeq	r0, r0, r2, lsr #2
    1e6c:	b1080103 	tstlt	r8, r3, lsl #2
    1e70:	04000000 	streq	r0, [r0], #-0
    1e74:	00007f04 	andeq	r7, r0, r4, lsl #30
    1e78:	00720500 	rsbseq	r0, r2, r0, lsl #10
    1e7c:	bf060000 	svclt	0x00060000
    1e80:	01000000 	mrseq	r0, (UNDEF: 0)
    1e84:	008c7c04 	addeq	r7, ip, r4, lsl #24
    1e88:	00002800 	andeq	r2, r0, r0, lsl #16
    1e8c:	ca9c0100 	bgt	fe702294 <__bss_end__+0xfe6f87e4>
    1e90:	07000000 	streq	r0, [r0, -r0]
    1e94:	00008c90 	muleq	r0, r0, ip
    1e98:	000000ac 	andeq	r0, r0, ip, lsr #1
    1e9c:	05500108 	ldrbeq	r0, [r0, #-264]	; 0x108
    1ea0:	0096a403 	addseq	sl, r6, r3, lsl #8
    1ea4:	98090000 	stmdals	r9, {}	; <UNPREDICTABLE>
    1ea8:	ea00008c 	b	20e0 <_start-0x5f20>
    1eac:	c0000000 	andgt	r0, r0, r0
    1eb0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1eb4:	08025001 	stmdaeq	r2, {r0, ip, lr}
    1eb8:	9c0a0064 	stcls	0, cr0, [sl], {100}	; 0x64
    1ebc:	fb00008c 	blx	20f6 <_start-0x5f0a>
    1ec0:	00000000 	andeq	r0, r0, r0
    1ec4:	0000250b 	andeq	r2, r0, fp, lsl #10
    1ec8:	0000d900 	andeq	sp, r0, r0, lsl #18
    1ecc:	00790c00 	rsbseq	r0, r9, r0, lsl #24
    1ed0:	0d000000 	stceq	0, cr0, [r0, #-0]
    1ed4:	00000388 	andeq	r0, r0, r8, lsl #7
    1ed8:	00e42002 	rsceq	r2, r4, r2
    1edc:	04040000 	streq	r0, [r4], #-0
    1ee0:	000000ca 	andeq	r0, r0, sl, asr #1
    1ee4:	0000b60e 	andeq	fp, r0, lr, lsl #12
    1ee8:	fb4d0200 	blx	13426f2 <__bss_end__+0x1338c42>
    1eec:	0c000000 	stceq	0, cr0, [r0], {-0}
    1ef0:	0000002c 	andeq	r0, r0, ip, lsr #32
    1ef4:	04190f00 	ldreq	r0, [r9], #-3840	; 0xf00
    1ef8:	60020000 	andvs	r0, r2, r0
    1efc:	00010b00 	andeq	r0, r1, r0, lsl #22
    1f00:	fb000400 	blx	2f0a <_start-0x50f6>
    1f04:	04000008 	streq	r0, [r0], #-8
    1f08:	00003001 	andeq	r3, r0, r1
    1f0c:	043e0100 	ldrteq	r0, [lr], #-256	; 0x100
    1f10:	032f0000 	teqeq	pc, #0
    1f14:	8ca40000 	stchi	0, cr0, [r4]
    1f18:	00340000 	eorseq	r0, r4, r0
    1f1c:	08be0000 	ldmeq	lr!, {}	; <UNPREDICTABLE>
    1f20:	04020000 	streq	r0, [r2], #-0
    1f24:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    1f28:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1f2c:	000000f3 	strdeq	r0, [r0], -r3
    1f30:	aa060103 	bge	182344 <__bss_end__+0x178894>
    1f34:	03000000 	movweq	r0, #0
    1f38:	01390502 	teqeq	r9, r2, lsl #10
    1f3c:	04030000 	streq	r0, [r3], #-0
    1f40:	00013005 	andeq	r3, r1, r5
    1f44:	05080300 	streq	r0, [r8, #-768]	; 0x300
    1f48:	0000012b 	andeq	r0, r0, fp, lsr #2
    1f4c:	a8080103 	stmdage	r8, {r0, r1, r8}
    1f50:	03000000 	movweq	r0, #0
    1f54:	00cc0702 	sbceq	r0, ip, r2, lsl #14
    1f58:	04030000 	streq	r0, [r3], #-0
    1f5c:	0000ee07 	andeq	lr, r0, r7, lsl #28
    1f60:	07080300 	streq	r0, [r8, -r0, lsl #6]
    1f64:	000000e9 	andeq	r0, r0, r9, ror #1
    1f68:	22070403 	andcs	r0, r7, #50331648	; 0x3000000
    1f6c:	03000001 	movweq	r0, #1
    1f70:	00b10801 	adcseq	r0, r1, r1, lsl #16
    1f74:	74040000 	strvc	r0, [r4], #-0
    1f78:	01000004 	tsteq	r0, r4
    1f7c:	008ca403 	addeq	sl, ip, r3, lsl #8
    1f80:	00003400 	andeq	r3, r0, r0, lsl #8
    1f84:	de9c0100 	fmllee	f0, f4, f0
    1f88:	05000000 	streq	r0, [r0, #-0]
    1f8c:	00000452 	andeq	r0, r0, r2, asr r4
    1f90:	00250401 	eoreq	r0, r5, r1, lsl #8
    1f94:	60050000 	andvs	r0, r5, r0
    1f98:	01000004 	tsteq	r0, r4
    1f9c:	00002504 	andeq	r2, r0, r4, lsl #10
    1fa0:	00870600 	addeq	r0, r7, r0, lsl #12
    1fa4:	05010000 	streq	r0, [r1, #-0]
    1fa8:	000000b1 	strheq	r0, [r0], -r1
    1fac:	62080007 	andvs	r0, r8, #7
    1fb0:	01007373 	tsteq	r0, r3, ror r3
    1fb4:	0000de07 	andeq	sp, r0, r7, lsl #28
    1fb8:	0012ce00 	andseq	ip, r2, r0, lsl #28
    1fbc:	046c0900 	strbteq	r0, [ip], #-2304	; 0x900
    1fc0:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    1fc4:	000000de 	ldrdeq	r0, [r0], -lr
    1fc8:	008ccc0a 	addeq	ip, ip, sl, lsl #24
    1fcc:	0000fa00 	andeq	pc, r0, r0, lsl #20
    1fd0:	8cd00a00 	vldmiahi	r0, {s1-s0}
    1fd4:	01070000 	mrseq	r0, (UNDEF: 7)
    1fd8:	0b000000 	bleq	1fe0 <_start-0x6020>
    1fdc:	00002504 	andeq	r2, r0, r4, lsl #10
    1fe0:	04520500 	ldrbeq	r0, [r2], #-1280	; 0x500
    1fe4:	04010000 	streq	r0, [r1], #-0
    1fe8:	00000025 	andeq	r0, r0, r5, lsr #32
    1fec:	00046005 	andeq	r6, r4, r5
    1ff0:	25040100 	strcs	r0, [r4, #-256]	; 0x100
    1ff4:	06000000 	streq	r0, [r0], -r0
    1ff8:	00000087 	andeq	r0, r0, r7, lsl #1
    1ffc:	01070501 	tsteq	r7, r1, lsl #10
    2000:	00070000 	andeq	r0, r7, r0
    2004:	0004190c 	andeq	r1, r4, ip, lsl #18
    2008:	00600200 	rsbeq	r0, r0, r0, lsl #4
    200c:	000001ad 	andeq	r0, r0, sp, lsr #3
    2010:	09a50004 	stmibeq	r5!, {r2}
    2014:	01040000 	mrseq	r0, (UNDEF: 4)
    2018:	00000030 	andeq	r0, r0, r0, lsr r0
    201c:	00049601 	andeq	r9, r4, r1, lsl #12
    2020:	00032f00 	andeq	r2, r3, r0, lsl #30
    2024:	00001800 	andeq	r1, r0, r0, lsl #16
    2028:	00000000 	andeq	r0, r0, r0
    202c:	00095800 	andeq	r5, r9, r0, lsl #16
    2030:	05040200 	streq	r0, [r4, #-512]	; 0x200
    2034:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2038:	f3070403 	vshl.u8	d0, d3, d7
    203c:	03000000 	movweq	r0, #0
    2040:	00aa0601 	adceq	r0, sl, r1, lsl #12
    2044:	02030000 	andeq	r0, r3, #0
    2048:	00013905 	andeq	r3, r1, r5, lsl #18
    204c:	05040300 	streq	r0, [r4, #-768]	; 0x300
    2050:	00000130 	andeq	r0, r0, r0, lsr r1
    2054:	2b050803 	blcs	144068 <__bss_end__+0x13a5b8>
    2058:	03000001 	movweq	r0, #1
    205c:	00a80801 	adceq	r0, r8, r1, lsl #16
    2060:	02030000 	andeq	r0, r3, #0
    2064:	0000cc07 	andeq	ip, r0, r7, lsl #24
    2068:	07040300 	streq	r0, [r4, -r0, lsl #6]
    206c:	000000ee 	andeq	r0, r0, lr, ror #1
    2070:	e9070803 	stmdb	r7, {r0, r1, fp}
    2074:	03000000 	movweq	r0, #0
    2078:	01220704 	teqeq	r2, r4, lsl #14
    207c:	01030000 	mrseq	r0, (UNDEF: 3)
    2080:	0000b108 	andeq	fp, r0, r8, lsl #2
    2084:	047c0400 	ldrbteq	r0, [ip], #-1024	; 0x400
    2088:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    208c:	00000025 	andeq	r0, r0, r5, lsr #32
    2090:	00008cd8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    2094:	00000018 	andeq	r0, r0, r8, lsl r0
    2098:	00a29c01 	adceq	r9, r2, r1, lsl #24
    209c:	e8050000 	stmda	r5, {}	; <UNPREDICTABLE>
    20a0:	01000004 	tsteq	r0, r4
    20a4:	00002c0f 	andeq	r2, r0, pc, lsl #24
    20a8:	0012ee00 	andseq	lr, r2, r0, lsl #28
    20ac:	cb060000 	blgt	1820b4 <__bss_end__+0x178604>
    20b0:	01000004 	tsteq	r0, r4
    20b4:	008cf017 	addeq	pc, ip, r7, lsl r0	; <UNPREDICTABLE>
    20b8:	00001400 	andeq	r1, r0, r0, lsl #8
    20bc:	c79c0100 	ldrgt	r0, [ip, r0, lsl #2]
    20c0:	05000000 	streq	r0, [r0, #-0]
    20c4:	000004e8 	andeq	r0, r0, r8, ror #9
    20c8:	002c1801 	eoreq	r1, ip, r1, lsl #16
    20cc:	130d0000 	movwne	r0, #53248	; 0xd000
    20d0:	06000000 	streq	r0, [r0], -r0
    20d4:	00000419 	andeq	r0, r0, r9, lsl r4
    20d8:	8d041f01 	stchi	15, cr1, [r4, #-4]
    20dc:	00480000 	subeq	r0, r8, r0
    20e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    20e4:	00000177 	andeq	r0, r0, r7, ror r1
    20e8:	0004e007 	andeq	lr, r4, r7
    20ec:	772a0100 	strvc	r0, [sl, -r0, lsl #2]!
    20f0:	1c000001 	stcne	0, cr0, [r0], {1}
    20f4:	07201000 	streq	r1, [r0, -r0]!
    20f8:	000004c3 	andeq	r0, r0, r3, asr #9
    20fc:	01772b01 	cmneq	r7, r1, lsl #22
    2100:	00240000 	eoreq	r0, r4, r0
    2104:	8a072010 	bhi	1ca14c <__bss_end__+0x1c069c>
    2108:	01000004 	tsteq	r0, r4
    210c:	0001772c 	andeq	r7, r1, ip, lsr #14
    2110:	00000000 	andeq	r0, r0, r0
    2114:	04aa085a 	strteq	r0, [sl], #2138	; 0x85a
    2118:	2d010000 	stccs	0, cr0, [r1, #-0]
    211c:	00000177 	andeq	r0, r0, r7, ror r1
    2120:	8d0c0920 	stchi	9, cr0, [ip, #-128]	; 0xffffff80
    2124:	00790000 	rsbseq	r0, r9, r0
    2128:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
    212c:	a200008d 	andge	r0, r0, #141	; 0x8d
    2130:	0a000000 	beq	2138 <_start-0x5ec8>
    2134:	00008d20 	andeq	r8, r0, r0, lsr #26
    2138:	0000018d 	andeq	r0, r0, sp, lsl #3
    213c:	0000013a 	andeq	r0, r0, sl, lsr r1
    2140:	0150010b 	cmpeq	r0, fp, lsl #2
    2144:	2c0a004e 	stccs	0, cr0, [sl], {78}	; 0x4e
    2148:	9e00008d 	cdpls	0, 0, cr0, cr0, cr13, {4}
    214c:	5a000001 	bpl	2158 <_start-0x5ea8>
    2150:	0b000001 	bleq	215c <_start-0x5ea4>
    2154:	0c055101 	stfeqs	f5, [r5], {1}
    2158:	5a000001 	bpl	2164 <_start-0x5e9c>
    215c:	0550010b 	ldrbeq	r0, [r0, #-267]	; 0x10b
    2160:	1000240c 	andne	r2, r0, ip, lsl #8
    2164:	380c0020 	stmdacc	ip, {r5}
    2168:	9e00008d 	cdpls	0, 0, cr0, cr0, cr13, {4}
    216c:	0b000001 	bleq	2178 <_start-0x5e88>
    2170:	0c055101 	stfeqs	f5, [r5], {1}
    2174:	5a000020 	bpl	21fc <_start-0x5e04>
    2178:	0550010b 	ldrbeq	r0, [r0, #-267]	; 0x10b
    217c:	10001c0c 	andne	r1, r0, ip, lsl #24
    2180:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    2184:	00000025 	andeq	r0, r0, r5, lsr #32
    2188:	00047f08 	andeq	r7, r4, r8, lsl #30
    218c:	880d0100 	stmdahi	sp, {r8}
    2190:	10000001 	andne	r0, r0, r1
    2194:	00002c0d 	andeq	r2, r0, sp, lsl #24
    2198:	00b60e00 	adcseq	r0, r6, r0, lsl #28
    219c:	4d020000 	stcmi	0, cr0, [r2, #-0]
    21a0:	0000019e 	muleq	r0, lr, r1
    21a4:	00002c0f 	andeq	r2, r0, pc, lsl #24
    21a8:	da100000 	ble	4021b0 <__bss_end__+0x3f8700>
    21ac:	02000004 	andeq	r0, r0, #4
    21b0:	002c0f94 	mlaeq	ip, r4, pc, r0	; <UNPREDICTABLE>
    21b4:	2c0f0000 	stccs	0, cr0, [pc], {-0}
    21b8:	00000000 	andeq	r0, r0, r0
    21bc:	0001f700 	andeq	pc, r1, r0, lsl #14
    21c0:	93000400 	movwls	r0, #1024	; 0x400
    21c4:	0400000a 	streq	r0, [r0], #-10
    21c8:	00003001 	andeq	r3, r0, r1
    21cc:	05030100 	streq	r0, [r3, #-256]	; 0x100
    21d0:	032f0000 	teqeq	pc, #0
    21d4:	8d4c0000 	stclhi	0, cr0, [ip, #-0]
    21d8:	00980000 	addseq	r0, r8, r0
    21dc:	09f50000 	ldmibeq	r5!, {}^	; <UNPREDICTABLE>
    21e0:	04020000 	streq	r0, [r2], #-0
    21e4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    21e8:	07040300 	streq	r0, [r4, -r0, lsl #6]
    21ec:	000000f3 	strdeq	r0, [r0], -r3
    21f0:	aa060103 	bge	182604 <__bss_end__+0x178b54>
    21f4:	03000000 	movweq	r0, #0
    21f8:	01390502 	teqeq	r9, r2, lsl #10
    21fc:	04030000 	streq	r0, [r3], #-0
    2200:	00013005 	andeq	r3, r1, r5
    2204:	05080300 	streq	r0, [r8, #-768]	; 0x300
    2208:	0000012b 	andeq	r0, r0, fp, lsr #2
    220c:	a8080103 	stmdage	r8, {r0, r1, r8}
    2210:	03000000 	movweq	r0, #0
    2214:	00cc0702 	sbceq	r0, ip, r2, lsl #14
    2218:	04030000 	streq	r0, [r3], #-0
    221c:	0000ee07 	andeq	lr, r0, r7, lsl #28
    2220:	07080300 	streq	r0, [r8, -r0, lsl #6]
    2224:	000000e9 	andeq	r0, r0, r9, ror #1
    2228:	22070403 	andcs	r0, r7, #50331648	; 0x3000000
    222c:	03000001 	movweq	r0, #1
    2230:	00b10801 	adcseq	r0, r1, r1, lsl #16
    2234:	22040000 	andcs	r0, r4, #0
    2238:	01000005 	tsteq	r0, r5
    223c:	008d4c05 	addeq	r4, sp, r5, lsl #24
    2240:	00001c00 	andeq	r1, r0, r0, lsl #24
    2244:	9e9c0100 	fmllse	f0, f4, f0
    2248:	05000000 	streq	r0, [r0, #-0]
    224c:	0000051c 	andeq	r0, r0, ip, lsl r5
    2250:	002c0501 	eoreq	r0, ip, r1, lsl #10
    2254:	13370000 	teqne	r7, #0
    2258:	06000000 	streq	r0, [r0], -r0
    225c:	0000029f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    2260:	002c0b01 	eoreq	r0, ip, r1, lsl #22
    2264:	8d680000 	stclhi	0, cr0, [r8, #-0]
    2268:	00140000 	andseq	r0, r4, r0
    226c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2270:	000000cb 	andeq	r0, r0, fp, asr #1
    2274:	008d7407 	addeq	r7, sp, r7, lsl #8
    2278:	0001de00 	andeq	sp, r1, r0, lsl #28
    227c:	50010800 	andpl	r0, r1, r0, lsl #16
    2280:	30040c05 	andcc	r0, r4, r5, lsl #24
    2284:	00002000 	andeq	r2, r0, r0
    2288:	00053806 	andeq	r3, r5, r6, lsl #16
    228c:	2c100100 	ldfcss	f0, [r0], {-0}
    2290:	7c000000 	stcvc	0, cr0, [r0], {-0}
    2294:	1c00008d 	stcne	0, cr0, [r0], {141}	; 0x8d
    2298:	01000000 	mrseq	r0, (UNDEF: 0)
    229c:	00010d9c 	muleq	r1, ip, sp
    22a0:	00750900 	rsbseq	r0, r5, r0, lsl #18
    22a4:	002c1201 	eoreq	r1, ip, r1, lsl #4
    22a8:	136b0000 	cmnne	fp, #0
    22ac:	840a0000 	strhi	r0, [sl], #-0
    22b0:	f300008d 	vhadd.u8	d0, d16, d13
    22b4:	0a000001 	beq	22c0 <_start-0x5d40>
    22b8:	00008d88 	andeq	r8, r0, r8, lsl #27
    22bc:	0000009e 	muleq	r0, lr, r0
    22c0:	008d900a 	addeq	r9, sp, sl
    22c4:	0001f300 	andeq	pc, r1, r0, lsl #6
    22c8:	2f040000 	svccs	0x00040000
    22cc:	01000005 	tsteq	r0, r5
    22d0:	008d9817 	addeq	r9, sp, r7, lsl r8
    22d4:	00002400 	andeq	r2, r0, r0, lsl #8
    22d8:	6b9c0100 	blvs	fe7026e0 <__bss_end__+0xfe6f8c30>
    22dc:	0b000001 	bleq	22e8 <_start-0x5d18>
    22e0:	01007375 	tsteq	r0, r5, ror r3
    22e4:	00002c17 	andeq	r2, r0, r7, lsl ip
    22e8:	00138900 	andseq	r8, r3, r0, lsl #18
    22ec:	62720c00 	rsbsvs	r0, r2, #0, 24
    22f0:	2c180100 	ldfcss	f0, [r8], {-0}
    22f4:	01000000 	mrseq	r0, (UNDEF: 0)
    22f8:	8da80d54 	stchi	13, cr0, [r8, #336]!	; 0x150
    22fc:	00100000 	andseq	r0, r0, r0
    2300:	01610000 	cmneq	r1, r0
    2304:	72090000 	andvc	r0, r9, #0
    2308:	1a010061 	bne	42494 <__bss_end__+0x389e4>
    230c:	0000002c 	andeq	r0, r0, ip, lsr #32
    2310:	000013a7 	andeq	r1, r0, r7, lsr #7
    2314:	008dac0a 	addeq	sl, sp, sl, lsl #24
    2318:	0000cb00 	andeq	ip, r0, r0, lsl #22
    231c:	a40a0000 	strge	r0, [sl], #-0
    2320:	cb00008d 	blgt	255c <_start-0x5aa4>
    2324:	00000000 	andeq	r0, r0, r0
    2328:	0000b604 	andeq	fp, r0, r4, lsl #12
    232c:	bc200100 	stflts	f0, [r0], #-0
    2330:	1400008d 	strne	r0, [r0], #-141	; 0x8d
    2334:	01000000 	mrseq	r0, (UNDEF: 0)
    2338:	0001a49c 	muleq	r1, ip, r4
    233c:	736d0b00 	cmnvc	sp, #0, 22
    2340:	2c200100 	stfcss	f0, [r0], #-0
    2344:	ba000000 	blt	234c <_start-0x5cb4>
    2348:	07000013 	smladeq	r0, r3, r0, r0
    234c:	00008dcc 	andeq	r8, r0, ip, asr #27
    2350:	0000010d 	andeq	r0, r0, sp, lsl #2
    2354:	07500108 	ldrbeq	r0, [r0, -r8, lsl #2]
    2358:	0a5001f3 	beq	1402b2c <__bss_end__+0x13f907c>
    235c:	001e03e8 	andseq	r0, lr, r8, ror #7
    2360:	04f90400 	ldrbteq	r0, [r9], #1024	; 0x400
    2364:	23010000 	movwcs	r0, #4096	; 0x1000
    2368:	00008dd0 	ldrdeq	r8, [r0], -r0
    236c:	00000014 	andeq	r0, r0, r4, lsl r0
    2370:	01de9c01 	bicseq	r9, lr, r1, lsl #24
    2374:	730b0000 	movwvc	r0, #45056	; 0xb000
    2378:	01006365 	tsteq	r0, r5, ror #6
    237c:	00002c23 	andeq	r2, r0, r3, lsr #24
    2380:	0013db00 	andseq	sp, r3, r0, lsl #22
    2384:	8de00700 	stclhi	7, cr0, [r0]
    2388:	016b0000 	cmneq	fp, r0
    238c:	01080000 	mrseq	r0, (UNDEF: 8)
    2390:	01f30750 	mvnseq	r0, r0, asr r7
    2394:	03e80a50 	mvneq	r0, #80, 20	; 0x50000
    2398:	0e00001e 	mcreq	0, 0, r0, cr0, cr14, {0}
    239c:	00000516 	andeq	r0, r0, r6, lsl r5
    23a0:	002ca002 	eoreq	sl, ip, r2
    23a4:	01f30000 	mvnseq	r0, r0
    23a8:	2c0f0000 	stccs	0, cr0, [pc], {-0}
    23ac:	00000000 	andeq	r0, r0, r0
    23b0:	0004ed10 	andeq	lr, r4, r0, lsl sp
    23b4:	00840200 	addeq	r0, r4, r0, lsl #4
    23b8:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    23bc:	0b890004 	bleq	fe2423d4 <__bss_end__+0xfe238924>
    23c0:	01040000 	mrseq	r0, (UNDEF: 4)
    23c4:	00000030 	andeq	r0, r0, r0, lsr r0
    23c8:	00026701 	andeq	r6, r2, r1, lsl #14
    23cc:	00032f00 	andeq	r2, r3, r0, lsl #30
    23d0:	008e4800 	addeq	r4, lr, r0, lsl #16
    23d4:	00015400 	andeq	r5, r1, r0, lsl #8
    23d8:	000a9e00 	andeq	r9, sl, r0, lsl #28
    23dc:	05040200 	streq	r0, [r4, #-512]	; 0x200
    23e0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    23e4:	f3070403 	vshl.u8	d0, d3, d7
    23e8:	03000000 	movweq	r0, #0
    23ec:	00aa0601 	adceq	r0, sl, r1, lsl #12
    23f0:	02030000 	andeq	r0, r3, #0
    23f4:	00013905 	andeq	r3, r1, r5, lsl #18
    23f8:	05040300 	streq	r0, [r4, #-768]	; 0x300
    23fc:	00000130 	andeq	r0, r0, r0, lsr r1
    2400:	2b050803 	blcs	144414 <__bss_end__+0x13a964>
    2404:	03000001 	movweq	r0, #1
    2408:	00a80801 	adceq	r0, r8, r1, lsl #16
    240c:	02030000 	andeq	r0, r3, #0
    2410:	0000cc07 	andeq	ip, r0, r7, lsl #24
    2414:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2418:	000000ee 	andeq	r0, r0, lr, ror #1
    241c:	e9070803 	stmdb	r7, {r0, r1, fp}
    2420:	03000000 	movweq	r0, #0
    2424:	01220704 	teqeq	r2, r4, lsl #14
    2428:	01030000 	mrseq	r0, (UNDEF: 3)
    242c:	0000b108 	andeq	fp, r0, r8, lsl #2
    2430:	02010400 	andeq	r0, r1, #0, 8
    2434:	0000b20c 	andeq	fp, r0, ip, lsl #4
    2438:	06ac0500 	strteq	r0, [ip], r0, lsl #10
    243c:	05000000 	streq	r0, [r0, #-0]
    2440:	000005ae 	andeq	r0, r0, lr, lsr #11
    2444:	05730501 	ldrbeq	r0, [r3, #-1281]!	; 0x501
    2448:	05040000 	streq	r0, [r4, #-0]
    244c:	000005bf 			; <UNDEFINED> instruction: 0x000005bf
    2450:	05ce0505 	strbeq	r0, [lr, #1285]	; 0x505
    2454:	05060000 	streq	r0, [r6, #-0]
    2458:	000005dd 	ldrdeq	r0, [r0], -sp
    245c:	066d0507 	strbteq	r0, [sp], -r7, lsl #10
    2460:	05030000 	streq	r0, [r3, #-0]
    2464:	000005ec 	andeq	r0, r0, ip, ror #11
    2468:	1f060002 	svcne	0x00060002
    246c:	02000006 	andeq	r0, r0, #6
    2470:	00007915 	andeq	r7, r0, r5, lsl r9
    2474:	05820700 	streq	r0, [r2, #1792]	; 0x700
    2478:	57010000 	strpl	r0, [r1, -r0]
    247c:	00000025 	andeq	r0, r0, r5, lsr #32
    2480:	00008e48 	andeq	r8, r0, r8, asr #28
    2484:	0000001c 	andeq	r0, r0, ip, lsl r0
    2488:	00e09c01 	rsceq	r9, r0, r1, lsl #24
    248c:	58080000 	stmdapl	r8, {}	; <UNPREDICTABLE>
    2490:	a800008e 	stmdage	r0, {r1, r2, r3, r7}
    2494:	00000003 	andeq	r0, r0, r3
    2498:	00008f09 	andeq	r8, r0, r9, lsl #30
    249c:	64370100 	ldrtvs	r0, [r7], #-256	; 0x100
    24a0:	9c00008e 	stcls	0, cr0, [r0], {142}	; 0x8e
    24a4:	01000000 	mrseq	r0, (UNDEF: 0)
    24a8:	0001e69c 	muleq	r1, ip, r6
    24ac:	8e6c0800 	cdphi	8, 6, cr0, cr12, cr0, {0}
    24b0:	03c90000 	biceq	r0, r9, #0
    24b4:	780a0000 	stmdavc	sl, {}	; <UNPREDICTABLE>
    24b8:	d000008e 	andle	r0, r0, lr, lsl #1
    24bc:	16000003 	strne	r0, [r0], -r3
    24c0:	0b000001 	bleq	24cc <_start-0x5b34>
    24c4:	32015101 	andcc	r5, r1, #1073741824	; 0x40000000
    24c8:	0150010b 	cmpeq	r0, fp, lsl #2
    24cc:	840a003e 	strhi	r0, [sl], #-62	; 0x3e
    24d0:	d000008e 	andle	r0, r0, lr, lsl #1
    24d4:	2e000003 	cdpcs	0, 0, cr0, cr0, cr3, {0}
    24d8:	0b000001 	bleq	24e4 <_start-0x5b1c>
    24dc:	32015101 	andcc	r5, r1, #1073741824	; 0x40000000
    24e0:	0150010b 	cmpeq	r0, fp, lsl #2
    24e4:	8808003f 	stmdahi	r8, {r0, r1, r2, r3, r4, r5}
    24e8:	c900008e 	stmdbgt	r0, {r1, r2, r3, r7}
    24ec:	0a000003 	beq	2500 <_start-0x5b00>
    24f0:	00008e98 	muleq	r0, r8, lr
    24f4:	000003a8 	andeq	r0, r0, r8, lsr #7
    24f8:	0000014b 	andeq	r0, r0, fp, asr #2
    24fc:	0250010b 	subseq	r0, r0, #-1073741822	; 0xc0000002
    2500:	0a000075 	beq	26dc <_start-0x5924>
    2504:	00008ea4 	andeq	r8, r0, r4, lsr #29
    2508:	000003e6 	andeq	r0, r0, r6, ror #7
    250c:	0000015f 	andeq	r0, r0, pc, asr r1
    2510:	0250010b 	subseq	r0, r0, #-1073741822	; 0xc0000002
    2514:	08000075 	stmdaeq	r0, {r0, r2, r4, r5, r6}
    2518:	00008ea8 	andeq	r8, r0, r8, lsr #29
    251c:	000003c9 	andeq	r0, r0, r9, asr #7
    2520:	008eb40a 	addeq	fp, lr, sl, lsl #8
    2524:	0003e600 	andeq	lr, r3, r0, lsl #12
    2528:	00017b00 	andeq	r7, r1, r0, lsl #22
    252c:	51010b00 	tstpl	r1, r0, lsl #22
    2530:	0a003001 	beq	e53c <__bss_end__+0x4a8c>
    2534:	00008ec0 	andeq	r8, r0, r0, asr #29
    2538:	000003e6 	andeq	r0, r0, r6, ror #7
    253c:	0000018e 	andeq	r0, r0, lr, lsl #3
    2540:	0151010b 	cmpeq	r1, fp, lsl #2
    2544:	cc0a0030 	stcgt	0, cr0, [sl], {48}	; 0x30
    2548:	e600008e 	str	r0, [r0], -lr, lsl #1
    254c:	a1000003 	tstge	r0, r3
    2550:	0b000001 	bleq	255c <_start-0x5aa4>
    2554:	36015101 	strcc	r5, [r1], -r1, lsl #2
    2558:	8ed80a00 	vfnmshi.f32	s1, s16, s0
    255c:	03e60000 	mvneq	r0, #0
    2560:	01b40000 			; <UNDEFINED> instruction: 0x01b40000
    2564:	010b0000 	mrseq	r0, (UNDEF: 11)
    2568:	00330151 	eorseq	r0, r3, r1, asr r1
    256c:	008ee40a 	addeq	lr, lr, sl, lsl #8
    2570:	0003e600 	andeq	lr, r3, r0, lsl #12
    2574:	0001c900 	andeq	ip, r1, r0, lsl #18
    2578:	51010b00 	tstpl	r1, r0, lsl #22
    257c:	010e0a03 	tsteq	lr, r3, lsl #20
    2580:	8ef00a00 	vmovhi.f32	s1, #0
    2584:	03e60000 	mvneq	r0, #0
    2588:	01dc0000 	bicseq	r0, ip, r0
    258c:	010b0000 	mrseq	r0, (UNDEF: 11)
    2590:	00330151 	eorseq	r0, r3, r1, asr r1
    2594:	008ef408 	addeq	pc, lr, r8, lsl #8
    2598:	0003c900 	andeq	ip, r3, r0, lsl #18
    259c:	fc0c0000 	stc2	0, cr0, [ip], {-0}
    25a0:	01000001 	tsteq	r0, r1
    25a4:	0000255d 	andeq	r2, r0, sp, asr r5
    25a8:	008f0000 	addeq	r0, pc, r0
    25ac:	00002800 	andeq	r2, r0, r0, lsl #16
    25b0:	129c0100 	addsne	r0, ip, #0, 2
    25b4:	08000002 	stmdaeq	r0, {r1}
    25b8:	00008f08 	andeq	r8, r0, r8, lsl #30
    25bc:	000000bd 	strheq	r0, [r0], -sp
    25c0:	008f1c08 	addeq	r1, pc, r8, lsl #24
    25c4:	0003a800 	andeq	sl, r3, r0, lsl #16
    25c8:	2b0c0000 	blcs	3025d0 <__bss_end__+0x2f8b20>
    25cc:	01000006 	tsteq	r0, r6
    25d0:	00002564 	andeq	r2, r0, r4, ror #10
    25d4:	008f2800 	addeq	r2, pc, r0, lsl #16
    25d8:	00001c00 	andeq	r1, r0, r0, lsl #24
    25dc:	359c0100 	ldrcc	r0, [ip, #256]	; 0x100
    25e0:	08000002 	stmdaeq	r0, {r1}
    25e4:	00008f38 	andeq	r8, r0, r8, lsr pc
    25e8:	000003a8 	andeq	r0, r0, r8, lsr #7
    25ec:	02390900 	eorseq	r0, r9, #0, 18
    25f0:	6a010000 	bvs	425f8 <__bss_end__+0x38b48>
    25f4:	00008f44 	andeq	r8, r0, r4, asr #30
    25f8:	0000002c 	andeq	r0, r0, ip, lsr #32
    25fc:	02719c01 	rsbseq	r9, r1, #256	; 0x100
    2600:	630d0000 	movwvs	r0, #53248	; 0xd000
    2604:	2c6a0100 	stfcse	f0, [sl], #-0
    2608:	fc000000 	stc2	0, cr0, [r0], {-0}
    260c:	08000013 	stmdaeq	r0, {r0, r1, r4}
    2610:	00008f50 	andeq	r8, r0, r0, asr pc
    2614:	00000212 	andeq	r0, r0, r2, lsl r2
    2618:	008f680e 	addeq	r6, pc, lr, lsl #16
    261c:	0003e600 	andeq	lr, r3, r0, lsl #12
    2620:	51010b00 	tstpl	r1, r0, lsl #22
    2624:	00007402 	andeq	r7, r0, r2, lsl #8
    2628:	05a00c00 	streq	r0, [r0, #3072]!	; 0xc00
    262c:	74010000 	strvc	r0, [r1], #-0
    2630:	00000025 	andeq	r0, r0, r5, lsr #32
    2634:	00008f70 	andeq	r8, r0, r0, ror pc
    2638:	0000000c 	andeq	r0, r0, ip
    263c:	02949c01 	addseq	r9, r4, #256	; 0x100
    2640:	78080000 	stmdavc	r8, {}	; <UNPREDICTABLE>
    2644:	bd00008f 	stclt	0, cr0, [r0, #-572]	; 0xfffffdc4
    2648:	00000000 	andeq	r0, r0, r0
    264c:	0006cb0c 	andeq	ip, r6, ip, lsl #22
    2650:	25780100 	ldrbcs	r0, [r8, #-256]!	; 0x100
    2654:	7c000000 	stcvc	0, cr0, [r0], {-0}
    2658:	2000008f 	andcs	r0, r0, pc, lsl #1
    265c:	01000000 	mrseq	r0, (UNDEF: 0)
    2660:	0002c09c 	muleq	r2, ip, r0
    2664:	8f840800 	svchi	0x00840800
    2668:	02710000 	rsbseq	r0, r1, #0
    266c:	90080000 	andls	r0, r8, r0
    2670:	e600008f 	str	r0, [r0], -pc, lsl #1
    2674:	00000001 	andeq	r0, r0, r1
    2678:	0006450f 	andeq	r4, r6, pc, lsl #10
    267c:	d1160100 	tstle	r6, r0, lsl #2
    2680:	05000002 	streq	r0, [r0, #-2]
    2684:	00939003 	addseq	r9, r3, r3
    2688:	d7041000 	strle	r1, [r4, -r0]
    268c:	11000002 	tstne	r0, r2
    2690:	0000002c 	andeq	r0, r0, ip, lsr #32
    2694:	0006390f 	andeq	r3, r6, pc, lsl #18
    2698:	d1170100 	tstle	r7, r0, lsl #2
    269c:	05000002 	streq	r0, [r0, #-2]
    26a0:	00936403 	addseq	r6, r3, r3, lsl #8
    26a4:	05560f00 	ldrbeq	r0, [r6, #-3840]	; 0xf00
    26a8:	1a010000 	bne	426b0 <__bss_end__+0x38c00>
    26ac:	000002d1 	ldrdeq	r0, [r0], -r1
    26b0:	937c0305 	cmnls	ip, #335544320	; 0x14000000
    26b4:	fb0f0000 	blx	3c26be <__bss_end__+0x3b8c0e>
    26b8:	01000005 	tsteq	r0, r5
    26bc:	0002d11b 	andeq	sp, r2, fp, lsl r1
    26c0:	6c030500 	cfstr32vs	mvfx0, [r3], {-0}
    26c4:	0f000093 	svceq	0x00000093
    26c8:	00000610 	andeq	r0, r0, r0, lsl r6
    26cc:	02d11c01 	sbcseq	r1, r1, #256	; 0x100
    26d0:	03050000 	movweq	r0, #20480	; 0x5000
    26d4:	00009370 	andeq	r9, r0, r0, ror r3
    26d8:	00069d0f 	andeq	r9, r6, pc, lsl #26
    26dc:	d11d0100 	tstle	sp, r0, lsl #2
    26e0:	05000002 	streq	r0, [r0, #-2]
    26e4:	00937403 	addseq	r7, r3, r3, lsl #8
    26e8:	05470f00 	strbeq	r0, [r7, #-3840]	; 0xf00
    26ec:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    26f0:	000002d1 	ldrdeq	r0, [r0], -r1
    26f4:	938c0305 	orrls	r0, ip, #335544320	; 0x14000000
    26f8:	bc0f0000 	stclt	0, cr0, [pc], {-0}
    26fc:	01000006 	tsteq	r0, r6
    2700:	0002d11f 	andeq	sp, r2, pc, lsl r1
    2704:	60030500 	andvs	r0, r3, r0, lsl #10
    2708:	0f000093 	svceq	0x00000093
    270c:	00000564 	andeq	r0, r0, r4, ror #10
    2710:	02d12001 	sbcseq	r2, r1, #1
    2714:	03050000 	movweq	r0, #20480	; 0x5000
    2718:	00009388 	andeq	r9, r0, r8, lsl #7
    271c:	00068e0f 	andeq	r8, r6, pc, lsl #28
    2720:	d1210100 	teqle	r1, r0, lsl #2
    2724:	05000002 	streq	r0, [r0, #-2]
    2728:	00938403 	addseq	r8, r3, r3, lsl #8
    272c:	05900f00 	ldreq	r0, [r0, #3840]	; 0xf00
    2730:	22010000 	andcs	r0, r1, #0
    2734:	000002d1 	ldrdeq	r0, [r0], -r1
    2738:	93680305 	cmnls	r8, #335544320	; 0x14000000
    273c:	5d0f0000 	stcpl	0, cr0, [pc, #-0]	; 2744 <_start-0x58bc>
    2740:	01000006 	tsteq	r0, r6
    2744:	0002d123 	andeq	sp, r2, r3, lsr #2
    2748:	80030500 	andhi	r0, r3, r0, lsl #10
    274c:	0f000093 	svceq	0x00000093
    2750:	0000064d 	andeq	r0, r0, sp, asr #12
    2754:	02d12401 	sbcseq	r2, r1, #16777216	; 0x1000000
    2758:	03050000 	movweq	r0, #20480	; 0x5000
    275c:	00009378 	andeq	r9, r0, r8, ror r3
    2760:	0006db12 	andeq	sp, r6, r2, lsl fp
    2764:	2ca10300 	stccs	3, cr0, [r1]
    2768:	bd000000 	stclt	0, cr0, [r0, #-0]
    276c:	13000003 	movwne	r0, #3
    2770:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    2774:	c3041000 	movwgt	r1, #16384	; 0x4000
    2778:	14000003 	strne	r0, [r0], #-3
    277c:	000003c8 	andeq	r0, r0, r8, asr #7
    2780:	04ed1615 	strbteq	r1, [sp], #1557	; 0x615
    2784:	84030000 	strhi	r0, [r3], #-0
    2788:	00067c17 	andeq	r7, r6, r7, lsl ip
    278c:	e6190200 	ldr	r0, [r9], -r0, lsl #4
    2790:	13000003 	movwne	r0, #3
    2794:	0000002c 	andeq	r0, r0, ip, lsr #32
    2798:	0000b213 	andeq	fp, r0, r3, lsl r2
    279c:	0a170000 	beq	5c27a4 <__bss_end__+0x5b8cf4>
    27a0:	03000006 	movweq	r0, #6
    27a4:	0003fc95 	muleq	r3, r5, ip
    27a8:	03fc1300 	mvnseq	r1, #0, 6
    27ac:	2c130000 	ldccs	0, cr0, [r3], {-0}
    27b0:	00000000 	andeq	r0, r0, r0
    27b4:	03c80410 	biceq	r0, r8, #16, 8	; 0x10000000
    27b8:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    27bc:	04000005 	streq	r0, [r0], #-5
    27c0:	000cd100 	andeq	sp, ip, r0, lsl #2
    27c4:	30010400 	andcc	r0, r1, r0, lsl #8
    27c8:	01000000 	mrseq	r0, (UNDEF: 0)
    27cc:	0000075c 	andeq	r0, r0, ip, asr r7
    27d0:	0000032f 	andeq	r0, r0, pc, lsr #6
    27d4:	00008f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
    27d8:	000003ac 	andeq	r0, r0, ip, lsr #7
    27dc:	00000b19 	andeq	r0, r0, r9, lsl fp
    27e0:	e9070802 	stmdb	r7, {r1, fp}
    27e4:	02000000 	andeq	r0, r0, #0
    27e8:	00f30704 	rscseq	r0, r3, r4, lsl #14
    27ec:	01020000 	mrseq	r0, (UNDEF: 2)
    27f0:	0000aa06 	andeq	sl, r0, r6, lsl #20
    27f4:	05020200 	streq	r0, [r2, #-512]	; 0x200
    27f8:	00000139 	andeq	r0, r0, r9, lsr r1
    27fc:	30050402 	andcc	r0, r5, r2, lsl #8
    2800:	02000001 	andeq	r0, r0, #1
    2804:	012b0508 	teqeq	fp, r8, lsl #10
    2808:	01020000 	mrseq	r0, (UNDEF: 2)
    280c:	0000a808 	andeq	sl, r0, r8, lsl #16
    2810:	07020200 	streq	r0, [r2, -r0, lsl #4]
    2814:	000000cc 	andeq	r0, r0, ip, asr #1
    2818:	ee070402 	cdp	4, 0, cr0, cr7, cr2, {0}
    281c:	03000000 	movweq	r0, #0
    2820:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2824:	04020074 	streq	r0, [r2], #-116	; 0x74
    2828:	00012207 	andeq	r2, r1, r7, lsl #4
    282c:	08010200 	stmdaeq	r1, {r9}
    2830:	000000b1 	strheq	r0, [r0], -r1
    2834:	0c020104 	stfeqs	f0, [r2], {4}
    2838:	000000b2 	strheq	r0, [r0], -r2
    283c:	0006ac05 	andeq	sl, r6, r5, lsl #24
    2840:	ae050000 	cdpge	0, 0, cr0, cr5, cr0, {0}
    2844:	01000005 	tsteq	r0, r5
    2848:	00057305 	andeq	r7, r5, r5, lsl #6
    284c:	bf050400 	svclt	0x00050400
    2850:	05000005 	streq	r0, [r0, #-5]
    2854:	0005ce05 	andeq	ip, r5, r5, lsl #28
    2858:	dd050600 	stcle	6, cr0, [r5, #-0]
    285c:	07000005 	streq	r0, [r0, -r5]
    2860:	00066d05 	andeq	r6, r6, r5, lsl #26
    2864:	ec050300 	stc	3, cr0, [r5], {-0}
    2868:	02000005 	andeq	r0, r0, #5
    286c:	061f0600 	ldreq	r0, [pc], -r0, lsl #12
    2870:	15020000 	strne	r0, [r2, #-0]
    2874:	00000079 	andeq	r0, r0, r9, ror r0
    2878:	0002fc07 	andeq	pc, r2, r7, lsl #24
    287c:	9c3f0100 	ldflss	f0, [pc], #-0	; 2884 <_start-0x577c>
    2880:	d400008f 	strle	r0, [r0], #-143	; 0x8f
    2884:	01000000 	mrseq	r0, (UNDEF: 0)
    2888:	0001339c 	muleq	r1, ip, r3
    288c:	69700800 	ldmdbvs	r0!, {fp}^
    2890:	3f01006e 	svccc	0x0001006e
    2894:	0000002c 	andeq	r0, r0, ip, lsr #32
    2898:	0000141a 	andeq	r1, r0, sl, lsl r4
    289c:	00076309 	andeq	r6, r7, r9, lsl #6
    28a0:	33470100 	movtcc	r0, #28928	; 0x7100
    28a4:	38000001 	stmdacc	r0, {r0}
    28a8:	09000014 	stmdbeq	r0, {r2, r4}
    28ac:	00000749 	andeq	r0, r0, r9, asr #14
    28b0:	002c4901 	eoreq	r4, ip, r1, lsl #18
    28b4:	148d0000 	strne	r0, [sp], #0
    28b8:	54090000 	strpl	r0, [r9], #-0
    28bc:	01000007 	tsteq	r0, r7
    28c0:	00002c57 	andeq	r2, r0, r7, asr ip
    28c4:	00165900 	andseq	r5, r6, r0, lsl #18
    28c8:	90300a00 	eorsls	r0, r0, r0, lsl #20
    28cc:	052e0000 	streq	r0, [lr, #-0]!
    28d0:	01220000 	teqeq	r2, r0
    28d4:	010b0000 	mrseq	r0, (UNDEF: 11)
    28d8:	00750250 	rsbseq	r0, r5, r0, asr r2
    28dc:	90640c00 	rsbls	r0, r4, r0, lsl #24
    28e0:	054f0000 	strbeq	r0, [pc, #-0]	; 28e8 <_start-0x5718>
    28e4:	010b0000 	mrseq	r0, (UNDEF: 11)
    28e8:	00750250 	rsbseq	r0, r5, r0, asr r2
    28ec:	040d0000 	streq	r0, [sp], #-0
    28f0:	00000139 	andeq	r0, r0, r9, lsr r1
    28f4:	00002c0e 	andeq	r2, r0, lr, lsl #24
    28f8:	07070f00 	streq	r0, [r7, -r0, lsl #30]
    28fc:	60010000 	andvs	r0, r1, r0
    2900:	00016c03 	andeq	r6, r1, r3, lsl #24
    2904:	69701000 	ldmdbvs	r0!, {ip}^
    2908:	6001006e 	andvs	r0, r1, lr, rrx
    290c:	0000002c 	andeq	r0, r0, ip, lsr #32
    2910:	00076311 	andeq	r6, r7, r1, lsl r3
    2914:	33670100 	cmncc	r7, #0, 2
    2918:	11000001 	tstne	r0, r1
    291c:	00000754 	andeq	r0, r0, r4, asr r7
    2920:	002c6801 	eoreq	r6, ip, r1, lsl #16
    2924:	12000000 	andne	r0, r0, #0
    2928:	0000013e 	andeq	r0, r0, lr, lsr r1
    292c:	00009070 	andeq	r9, r0, r0, ror r0
    2930:	00000038 	andeq	r0, r0, r8, lsr r0
    2934:	01b09c01 	lslseq	r9, r1, #24
    2938:	4a130000 	bmi	4c2940 <__bss_end__+0x4b8e90>
    293c:	89000001 	stmdbhi	r0, {r0}
    2940:	14000016 	strne	r0, [r0], #-22
    2944:	00000155 	andeq	r0, r0, r5, asr r1
    2948:	000016aa 	andeq	r1, r0, sl, lsr #13
    294c:	00016014 	andeq	r6, r1, r4, lsl r0
    2950:	0016e000 	andseq	lr, r6, r0
    2954:	90a00c00 	adcls	r0, r0, r0, lsl #24
    2958:	054f0000 	strbeq	r0, [pc, #-0]	; 2960 <_start-0x56a0>
    295c:	010b0000 	mrseq	r0, (UNDEF: 11)
    2960:	f3310751 	vaba.u<illegal width 64>	q0, <illegal reg q0.5>, <illegal reg q0.5>
    2964:	1a4f5001 	bne	13d6970 <__bss_end__+0x13ccec0>
    2968:	0f000024 	svceq	0x00000024
    296c:	0000072f 	andeq	r0, r0, pc, lsr #14
    2970:	de037b01 	vmlale.f64	d7, d3, d1
    2974:	10000001 	andne	r0, r0, r1
    2978:	006e6970 	rsbeq	r6, lr, r0, ror r9
    297c:	002c7b01 	eoreq	r7, ip, r1, lsl #22
    2980:	63110000 	tstvs	r1, #0
    2984:	01000007 	tsteq	r0, r7
    2988:	00013381 	andeq	r3, r1, r1, lsl #7
    298c:	07541100 	ldrbeq	r1, [r4, -r0, lsl #2]
    2990:	82010000 	andhi	r0, r1, #0
    2994:	0000002c 	andeq	r0, r0, ip, lsr #32
    2998:	01b01200 	lslseq	r1, r0, #4
    299c:	90a80000 	adcls	r0, r8, r0
    29a0:	00380000 	eorseq	r0, r8, r0
    29a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    29a8:	00000222 	andeq	r0, r0, r2, lsr #4
    29ac:	0001bc13 	andeq	fp, r1, r3, lsl ip
    29b0:	00172000 	andseq	r2, r7, r0
    29b4:	01c71400 	biceq	r1, r7, r0, lsl #8
    29b8:	17410000 	strbne	r0, [r1, -r0]
    29bc:	d2140000 	andsle	r0, r4, #0
    29c0:	77000001 	strvc	r0, [r0, -r1]
    29c4:	0c000017 	stceq	0, cr0, [r0], {23}
    29c8:	000090d8 	ldrdeq	r9, [r0], -r8
    29cc:	0000054f 	andeq	r0, r0, pc, asr #10
    29d0:	0751010b 	ldrbeq	r0, [r1, -fp, lsl #2]
    29d4:	5001f331 	andpl	pc, r1, r1, lsr r3	; <UNPREDICTABLE>
    29d8:	00241a4f 	eoreq	r1, r4, pc, asr #20
    29dc:	02d10700 	sbcseq	r0, r1, #0, 14
    29e0:	95010000 	strls	r0, [r1, #-0]
    29e4:	000090e0 	andeq	r9, r0, r0, ror #1
    29e8:	000000cc 	andeq	r0, r0, ip, asr #1
    29ec:	02989c01 	addseq	r9, r8, #256	; 0x100
    29f0:	70080000 	andvc	r0, r8, r0
    29f4:	01006e69 	tsteq	r0, r9, ror #28
    29f8:	00002c95 	muleq	r0, r5, ip
    29fc:	0017b700 	andseq	fp, r7, r0, lsl #14
    2a00:	07630900 	strbeq	r0, [r3, -r0, lsl #18]!
    2a04:	9b010000 	blls	42a0c <__bss_end__+0x38f5c>
    2a08:	00000133 	andeq	r0, r0, r3, lsr r1
    2a0c:	000017d5 	ldrdeq	r1, [r0], -r5
    2a10:	00074909 	andeq	r4, r7, r9, lsl #18
    2a14:	2c9d0100 	ldfcss	f0, [sp], {0}
    2a18:	2a000000 	bcs	2a20 <_start-0x55e0>
    2a1c:	09000018 	stmdbeq	r0, {r3, r4}
    2a20:	00000754 	andeq	r0, r0, r4, asr r7
    2a24:	002cab01 	eoreq	sl, ip, r1, lsl #22
    2a28:	19f60000 	ldmibne	r6!, {}^	; <UNPREDICTABLE>
    2a2c:	740a0000 	strvc	r0, [sl], #-0
    2a30:	2e000091 	mcrcs	0, 0, r0, cr0, cr1, {4}
    2a34:	87000005 	strhi	r0, [r0, -r5]
    2a38:	0b000002 	bleq	2a48 <_start-0x55b8>
    2a3c:	75025001 	strvc	r5, [r2, #-1]
    2a40:	a00c0000 	andge	r0, ip, r0
    2a44:	4f000091 	svcmi	0x00000091
    2a48:	0b000005 	bleq	2a64 <_start-0x559c>
    2a4c:	75025001 	strvc	r5, [r2, #-1]
    2a50:	15000000 	strne	r0, [r0, #-0]
    2a54:	0000025a 	andeq	r0, r0, sl, asr r2
    2a58:	0064b301 	rsbeq	fp, r4, r1, lsl #6
    2a5c:	91ac0000 			; <UNDEFINED> instruction: 0x91ac0000
    2a60:	004c0000 	subeq	r0, ip, r0
    2a64:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a68:	000002e0 	andeq	r0, r0, r0, ror #5
    2a6c:	6e697008 	cdpvs	0, 6, cr7, cr9, cr8, {0}
    2a70:	2cb30100 	ldfcss	f0, [r3]
    2a74:	14000000 	strne	r0, [r0], #-0
    2a78:	1600001a 			; <UNDEFINED> instruction: 0x1600001a
    2a7c:	b9010076 	stmdblt	r1, {r1, r2, r4, r5, r6}
    2a80:	0000002c 	andeq	r0, r0, ip, lsr #32
    2a84:	00001a6c 	andeq	r1, r0, ip, ror #20
    2a88:	0091cc17 	addseq	ip, r1, r7, lsl ip
    2a8c:	00052e00 	andeq	r2, r5, r0, lsl #28
    2a90:	91dc1700 	bicsls	r1, ip, r0, lsl #14
    2a94:	052e0000 	streq	r0, [lr, #-0]!
    2a98:	07000000 	streq	r0, [r0, -r0]
    2a9c:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
    2aa0:	91f8c501 	mvnsls	ip, r1, lsl #10
    2aa4:	00780000 	rsbseq	r0, r8, r0
    2aa8:	9c010000 	stcls	0, cr0, [r1], {-0}
    2aac:	000003aa 	andeq	r0, r0, sl, lsr #7
    2ab0:	6e697008 	cdpvs	0, 6, cr7, cr9, cr8, {0}
    2ab4:	2cc50100 	stfcse	f0, [r5], {0}
    2ab8:	a2000000 	andge	r0, r0, #0
    2abc:	0800001a 	stmdaeq	r0, {r1, r3, r4}
    2ac0:	c5010076 	strgt	r0, [r1, #-118]	; 0x76
    2ac4:	0000002c 	andeq	r0, r0, ip, lsr #32
    2ac8:	00001adc 	ldrdeq	r1, [r0], -ip
    2acc:	00013e18 	andeq	r3, r1, r8, lsl lr
    2ad0:	00920c00 	addseq	r0, r2, r0, lsl #24
    2ad4:	00003000 	andeq	r3, r0, r0
    2ad8:	5fcc0100 	svcpl	0x00cc0100
    2adc:	13000003 	movwne	r0, #3
    2ae0:	0000014a 	andeq	r0, r0, sl, asr #2
    2ae4:	00001b16 	andeq	r1, r0, r6, lsl fp
    2ae8:	00920c19 	addseq	r0, r2, r9, lsl ip
    2aec:	00003000 	andeq	r3, r0, r0
    2af0:	01551400 	cmpeq	r5, r0, lsl #8
    2af4:	1b370000 	blne	dc2afc <__bss_end__+0xdb904c>
    2af8:	60140000 	andsvs	r0, r4, r0
    2afc:	6d000001 	stcvs	0, cr0, [r0, #-4]
    2b00:	0c00001b 	stceq	0, cr0, [r0], {27}
    2b04:	00009238 	andeq	r9, r0, r8, lsr r2
    2b08:	0000054f 	andeq	r0, r0, pc, asr #10
    2b0c:	0751010b 	ldrbeq	r0, [r1, -fp, lsl #2]
    2b10:	5001f331 	andpl	pc, r1, r1, lsr r3	; <UNPREDICTABLE>
    2b14:	00241a4f 	eoreq	r1, r4, pc, asr #20
    2b18:	b01a0000 	andslt	r0, sl, r0
    2b1c:	3c000001 	stccc	0, cr0, [r0], {1}
    2b20:	34000092 	strcc	r0, [r0], #-146	; 0x92
    2b24:	01000000 	mrseq	r0, (UNDEF: 0)
    2b28:	01bc13ce 			; <UNDEFINED> instruction: 0x01bc13ce
    2b2c:	1bad0000 	blne	feb42b34 <__bss_end__+0xfeb39084>
    2b30:	3c190000 	ldccc	0, cr0, [r9], {-0}
    2b34:	34000092 	strcc	r0, [r0], #-146	; 0x92
    2b38:	14000000 	strne	r0, [r0], #-0
    2b3c:	000001c7 	andeq	r0, r0, r7, asr #3
    2b40:	00001bce 	andeq	r1, r0, lr, asr #23
    2b44:	0001d214 	andeq	sp, r1, r4, lsl r2
    2b48:	001c0400 	andseq	r0, ip, r0, lsl #8
    2b4c:	92680c00 	rsbls	r0, r8, #0, 24
    2b50:	054f0000 	strbeq	r0, [pc, #-0]	; 2b58 <_start-0x54a8>
    2b54:	010b0000 	mrseq	r0, (UNDEF: 11)
    2b58:	f3310751 	vaba.u<illegal width 64>	q0, <illegal reg q0.5>, <illegal reg q0.5>
    2b5c:	1a4f5001 	bne	13d6b68 <__bss_end__+0x13cd0b8>
    2b60:	00000024 	andeq	r0, r0, r4, lsr #32
    2b64:	067c0700 	ldrbteq	r0, [ip], -r0, lsl #14
    2b68:	d1010000 	mrsle	r0, (UNDEF: 1)
    2b6c:	00009270 	andeq	r9, r0, r0, ror r2
    2b70:	000000d8 	ldrdeq	r0, [r0], -r8
    2b74:	042f9c01 	strteq	r9, [pc], #-3073	; 2b7c <_start-0x5484>
    2b78:	70080000 	andvc	r0, r8, r0
    2b7c:	01006e69 	tsteq	r0, r9, ror #28
    2b80:	00002cd1 	ldrdeq	r2, [r0], -r1
    2b84:	001c4400 	andseq	r4, ip, r0, lsl #8
    2b88:	07441b00 	strbeq	r1, [r4, -r0, lsl #22]
    2b8c:	d1010000 	mrsle	r0, (UNDEF: 1)
    2b90:	000000b2 	strheq	r0, [r0], -r2
    2b94:	00001c62 	andeq	r1, r0, r2, ror #24
    2b98:	00076309 	andeq	r6, r7, r9, lsl #6
    2b9c:	33d90100 	bicscc	r0, r9, #0, 2
    2ba0:	83000001 	movwhi	r0, #1
    2ba4:	0900001c 	stmdbeq	r0, {r2, r3, r4}
    2ba8:	00000749 	andeq	r0, r0, r9, asr #14
    2bac:	002cda01 	eoreq	sp, ip, r1, lsl #20
    2bb0:	1cd80000 	ldclne	0, cr0, [r8], {0}
    2bb4:	54090000 	strpl	r0, [r9], #-0
    2bb8:	01000007 	tsteq	r0, r7
    2bbc:	00002ce8 	andeq	r2, r0, r8, ror #25
    2bc0:	001ea400 	andseq	sl, lr, r0, lsl #8
    2bc4:	930c0a00 	movwls	r0, #51712	; 0xca00
    2bc8:	052e0000 	streq	r0, [lr, #-0]!
    2bcc:	041e0000 	ldreq	r0, [lr], #-0
    2bd0:	010b0000 	mrseq	r0, (UNDEF: 11)
    2bd4:	00760250 	rsbseq	r0, r6, r0, asr r2
    2bd8:	933c0c00 	teqls	ip, #0, 24
    2bdc:	054f0000 	strbeq	r0, [pc, #-0]	; 2be4 <_start-0x541c>
    2be0:	010b0000 	mrseq	r0, (UNDEF: 11)
    2be4:	00760250 	rsbseq	r0, r6, r0, asr r2
    2be8:	f51c0000 			; <UNDEFINED> instruction: 0xf51c0000
    2bec:	01000006 	tsteq	r0, r6
    2bf0:	00013328 	andeq	r3, r1, r8, lsr #6
    2bf4:	cc030500 	cfstr32gt	mvfx0, [r3], {-0}
    2bf8:	1c000093 	stcne	0, cr0, [r0], {147}	; 0x93
    2bfc:	000006eb 	andeq	r0, r0, fp, ror #13
    2c00:	01332901 	teqeq	r3, r1, lsl #18
    2c04:	03050000 	movweq	r0, #20480	; 0x5000
    2c08:	000093c8 	andeq	r9, r0, r8, asr #7
    2c0c:	0006e11c 	andeq	lr, r6, ip, lsl r1
    2c10:	332a0100 	teqcc	sl, #0, 2
    2c14:	05000001 	streq	r0, [r0, #-1]
    2c18:	0093c403 	addseq	ip, r3, r3, lsl #8
    2c1c:	076c1c00 	strbeq	r1, [ip, -r0, lsl #24]!
    2c20:	2c010000 	stccs	0, cr0, [r1], {-0}
    2c24:	00000133 	andeq	r0, r0, r3, lsr r1
    2c28:	93940305 	orrsls	r0, r4, #335544320	; 0x14000000
    2c2c:	3c1c0000 	ldccc	0, cr0, [ip], {-0}
    2c30:	01000007 	tsteq	r0, r7
    2c34:	0001332d 	andeq	r3, r1, sp, lsr #6
    2c38:	98030500 	stmdals	r3, {r8, sl}
    2c3c:	1c000093 	stcne	0, cr0, [r0], {147}	; 0x93
    2c40:	0000077b 	andeq	r0, r0, fp, ror r7
    2c44:	01332e01 	teqeq	r3, r1, lsl #28
    2c48:	03050000 	movweq	r0, #20480	; 0x5000
    2c4c:	0000939c 	muleq	r0, ip, r3
    2c50:	0007831c 	andeq	r8, r7, ip, lsl r3
    2c54:	332f0100 	teqcc	pc, #0, 2
    2c58:	05000001 	streq	r0, [r0, #-1]
    2c5c:	0093a003 	addseq	sl, r3, r3
    2c60:	078b1c00 	streq	r1, [fp, r0, lsl #24]
    2c64:	30010000 	andcc	r0, r1, r0
    2c68:	00000133 	andeq	r0, r0, r3, lsr r1
    2c6c:	93a40305 			; <UNDEFINED> instruction: 0x93a40305
    2c70:	931c0000 	tstls	ip, #0
    2c74:	01000007 	tsteq	r0, r7
    2c78:	00013331 	andeq	r3, r1, r1, lsr r3
    2c7c:	a8030500 	stmdage	r3, {r8, sl}
    2c80:	1c000093 	stcne	0, cr0, [r0], {147}	; 0x93
    2c84:	00000728 	andeq	r0, r0, r8, lsr #14
    2c88:	01333301 	teqeq	r3, r1, lsl #6
    2c8c:	03050000 	movweq	r0, #20480	; 0x5000
    2c90:	000093ac 	andeq	r9, r0, ip, lsr #7
    2c94:	00071a1c 	andeq	r1, r7, ip, lsl sl
    2c98:	33340100 	teqcc	r4, #0, 2
    2c9c:	05000001 	streq	r0, [r0, #-1]
    2ca0:	0093b003 	addseq	fp, r3, r3
    2ca4:	07211c00 	streq	r1, [r1, -r0, lsl #24]!
    2ca8:	36010000 	strcc	r0, [r1], -r0
    2cac:	00000133 	andeq	r0, r0, r3, lsr r1
    2cb0:	93b40305 			; <UNDEFINED> instruction: 0x93b40305
    2cb4:	001c0000 	andseq	r0, ip, r0
    2cb8:	01000007 	tsteq	r0, r7
    2cbc:	00013337 	andeq	r3, r1, r7, lsr r3
    2cc0:	b8030500 	stmdalt	r3, {r8, sl}
    2cc4:	1c000093 	stcne	0, cr0, [r0], {147}	; 0x93
    2cc8:	00000774 	andeq	r0, r0, r4, ror r7
    2ccc:	01333901 	teqeq	r3, r1, lsl #18
    2cd0:	03050000 	movweq	r0, #20480	; 0x5000
    2cd4:	000093bc 			; <UNDEFINED> instruction: 0x000093bc
    2cd8:	0007131c 	andeq	r1, r7, ip, lsl r3
    2cdc:	333a0100 	teqcc	sl, #0, 2
    2ce0:	05000001 	streq	r0, [r0, #-1]
    2ce4:	0093c003 	addseq	ip, r3, r3
    2ce8:	06db1d00 	ldrbeq	r1, [fp], r0, lsl #26
    2cec:	20010000 	andcs	r0, r1, r0
    2cf0:	0000002c 	andeq	r0, r0, ip, lsr #32
    2cf4:	00000543 	andeq	r0, r0, r3, asr #10
    2cf8:	0005431e 	andeq	r4, r5, lr, lsl r3
    2cfc:	040d0000 	streq	r0, [sp], #-0
    2d00:	00000549 	andeq	r0, r0, r9, asr #10
    2d04:	00054e1f 	andeq	r4, r5, pc, lsl lr
    2d08:	0a212000 	beq	84ad10 <__bss_end__+0x841260>
    2d0c:	01000006 	tsteq	r0, r6
    2d10:	0005651e 	andeq	r6, r5, lr, lsl r5
    2d14:	05651e00 	strbeq	r1, [r5, #-3584]!	; 0xe00
    2d18:	2c1e0000 	ldccs	0, cr0, [lr], {-0}
    2d1c:	00000000 	andeq	r0, r0, r0
    2d20:	054e040d 	strbeq	r0, [lr, #-1037]	; 0x40d
    2d24:	e0000000 	and	r0, r0, r0
    2d28:	04000000 	streq	r0, [r0], #-0
    2d2c:	000e9500 	andeq	r9, lr, r0, lsl #10
    2d30:	30010400 	andcc	r0, r1, r0, lsl #8
    2d34:	01000000 	mrseq	r0, (UNDEF: 0)
    2d38:	000007ac 	andeq	r0, r0, ip, lsr #15
    2d3c:	0000032f 	andeq	r0, r0, pc, lsr #6
    2d40:	00009348 	andeq	r9, r0, r8, asr #6
    2d44:	00000014 	andeq	r0, r0, r4, lsl r0
    2d48:	00000bc2 	andeq	r0, r0, r2, asr #23
    2d4c:	69050402 	stmdbvs	r5, {r1, sl}
    2d50:	0300746e 	movweq	r7, #1134	; 0x46e
    2d54:	00f30704 	rscseq	r0, r3, r4, lsl #14
    2d58:	01030000 	mrseq	r0, (UNDEF: 3)
    2d5c:	0000aa06 	andeq	sl, r0, r6, lsl #20
    2d60:	05020300 	streq	r0, [r2, #-768]	; 0x300
    2d64:	00000139 	andeq	r0, r0, r9, lsr r1
    2d68:	30050403 	andcc	r0, r5, r3, lsl #8
    2d6c:	03000001 	movweq	r0, #1
    2d70:	012b0508 	teqeq	fp, r8, lsl #10
    2d74:	01030000 	mrseq	r0, (UNDEF: 3)
    2d78:	0000a808 	andeq	sl, r0, r8, lsl #16
    2d7c:	07020300 	streq	r0, [r2, -r0, lsl #6]
    2d80:	000000cc 	andeq	r0, r0, ip, asr #1
    2d84:	ee070403 	cdp	4, 0, cr0, cr7, cr3, {0}
    2d88:	03000000 	movweq	r0, #0
    2d8c:	00e90708 	rsceq	r0, r9, r8, lsl #14
    2d90:	04030000 	streq	r0, [r3], #-0
    2d94:	00012207 	andeq	r2, r1, r7, lsl #4
    2d98:	08010300 	stmdaeq	r1, {r8, r9}
    2d9c:	000000b1 	strheq	r0, [r0], -r1
    2da0:	00079b04 	andeq	r9, r7, r4, lsl #22
    2da4:	25030100 	strcs	r0, [r3, #-256]	; 0x100
    2da8:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    2dac:	14000093 	strne	r0, [r0], #-147	; 0x93
    2db0:	01000000 	mrseq	r0, (UNDEF: 0)
    2db4:	0000b09c 	muleq	r0, ip, r0
    2db8:	00630500 	rsbeq	r0, r3, r0, lsl #10
    2dbc:	00250301 	eoreq	r0, r5, r1, lsl #6
    2dc0:	1ed50000 	cdpne	0, 13, cr0, cr5, cr0, {0}
    2dc4:	54060000 	strpl	r0, [r6], #-0
    2dc8:	d6000093 			; <UNDEFINED> instruction: 0xd6000093
    2dcc:	07000000 	streq	r0, [r0, -r0]
    2dd0:	74025001 	strvc	r5, [r2], #-1
    2dd4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2dd8:	00000025 	andeq	r0, r0, r5, lsr #32
    2ddc:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    2de0:	00002509 	andeq	r2, r0, r9, lsl #10
    2de4:	8d0a0000 	stchi	0, cr0, [sl, #-0]
    2de8:	01000003 	tsteq	r0, r3
    2dec:	0000d006 	andeq	sp, r0, r6
    2df0:	d0030500 	andle	r0, r3, r0, lsl #10
    2df4:	0b000093 	bleq	3048 <_start-0x4fb8>
    2df8:	0000b004 	andeq	fp, r0, r4
    2dfc:	02390c00 	eorseq	r0, r9, #0, 24
    2e00:	3a020000 	bcc	82e08 <__bss_end__+0x79358>
    2e04:	00002c09 	andeq	r2, r0, r9, lsl #24
    2e08:	Address 0x0000000000002e08 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <__bss_end__+0x2b65fc>
  18:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  1c:	24030000 	strcs	r0, [r3], #-0
  20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  24:	000e030b 	andeq	r0, lr, fp, lsl #6
  28:	00160400 	andseq	r0, r6, r0, lsl #8
  2c:	0b3a0e03 	bleq	e83840 <__bss_end__+0xe79d90>
  30:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  34:	0f050000 	svceq	0x00050000
  38:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  3c:	06000013 			; <UNDEFINED> instruction: 0x06000013
  40:	13490026 	movtne	r0, #36902	; 0x9026
  44:	13070000 	movwne	r0, #28672	; 0x7000
  48:	3a0b0b01 	bcc	2c2c54 <__bss_end__+0x2b91a4>
  4c:	010b3b0b 	tsteq	fp, fp, lsl #22
  50:	08000013 	stmdaeq	r0, {r0, r1, r4}
  54:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  58:	0b3b0b3a 	bleq	ec2d48 <__bss_end__+0xeb9298>
  5c:	0b381349 	bleq	e04d88 <__bss_end__+0xdfb2d8>
  60:	0d090000 	stceq	0, cr0, [r9, #-0]
  64:	3a0e0300 	bcc	380c6c <__bss_end__+0x3771bc>
  68:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  6c:	000b3813 	andeq	r3, fp, r3, lsl r8
  70:	012e0a00 	teqeq	lr, r0, lsl #20
  74:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
  78:	0b3b0b3a 	bleq	ec2d68 <__bss_end__+0xeb92b8>
  7c:	01111927 	tsteq	r1, r7, lsr #18
  80:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  84:	01194297 			; <UNDEFINED> instruction: 0x01194297
  88:	0b000013 	bleq	dc <_start-0x7f24>
  8c:	08030034 	stmdaeq	r3, {r2, r4, r5}
  90:	0b3b0b3a 	bleq	ec2d80 <__bss_end__+0xeb92d0>
  94:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  98:	0b0c0000 	bleq	3000a0 <__bss_end__+0x2f65f0>
  9c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
  a0:	00130106 	andseq	r0, r3, r6, lsl #2
  a4:	00340d00 	eorseq	r0, r4, r0, lsl #26
  a8:	0b3a0803 	bleq	e820bc <__bss_end__+0xe7860c>
  ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  b0:	00001702 	andeq	r1, r0, r2, lsl #14
  b4:	55010b0e 	strpl	r0, [r1, #-2830]	; 0xb0e
  b8:	0f000017 	svceq	0x00000017
  bc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  c0:	0b3b0b3a 	bleq	ec2db0 <__bss_end__+0xeb9300>
  c4:	17021349 	strne	r1, [r2, -r9, asr #6]
  c8:	89100000 	ldmdbhi	r0, {}	; <UNPREDICTABLE>
  cc:	11010182 	smlabbne	r1, r2, r1, r0
  d0:	01133101 	tsteq	r3, r1, lsl #2
  d4:	11000013 	tstne	r0, r3, lsl r0
  d8:	0001828a 	andeq	r8, r1, sl, lsl #5
  dc:	42911802 	addsmi	r1, r1, #131072	; 0x20000
  e0:	12000018 	andne	r0, r0, #24
  e4:	01018289 	smlabbeq	r1, r9, r2, r8
  e8:	13310111 	teqne	r1, #1073741828	; 0x40000004
  ec:	89130000 	ldmdbhi	r3, {}	; <UNPREDICTABLE>
  f0:	11000182 	smlabbne	r0, r2, r1, r0
  f4:	00133101 	andseq	r3, r3, r1, lsl #2
  f8:	012e1400 	teqeq	lr, r0, lsl #8
  fc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 100:	0b3b0b3a 	bleq	ec2df0 <__bss_end__+0xeb9340>
 104:	13491927 	movtne	r1, #39207	; 0x9927
 108:	1301193c 	movwne	r1, #6460	; 0x193c
 10c:	05150000 	ldreq	r0, [r5, #-0]
 110:	00134900 	andseq	r4, r3, r0, lsl #18
 114:	00181600 	andseq	r1, r8, r0, lsl #12
 118:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 11c:	03193f01 	tsteq	r9, #1, 30
 120:	3b0b3a0e 	blcc	2ce960 <__bss_end__+0x2c4eb0>
 124:	3c19270b 	ldccc	7, cr2, [r9], {11}
 128:	00130119 	andseq	r0, r3, r9, lsl r1
 12c:	002e1800 	eoreq	r1, lr, r0, lsl #16
 130:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 134:	0b3b0b3a 	bleq	ec2e24 <__bss_end__+0xeb9374>
 138:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 13c:	01000000 	mrseq	r0, (UNDEF: 0)
 140:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 144:	0e030b13 	vmoveq.32	d3[0], r0
 148:	01110e1b 	tsteq	r1, fp, lsl lr
 14c:	17100612 			; <UNDEFINED> instruction: 0x17100612
 150:	24020000 	strcs	r0, [r2], #-0
 154:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 158:	0008030b 	andeq	r0, r8, fp, lsl #6
 15c:	00240300 	eoreq	r0, r4, r0, lsl #6
 160:	0b3e0b0b 	bleq	f82d94 <__bss_end__+0xf792e4>
 164:	00000e03 	andeq	r0, r0, r3, lsl #28
 168:	03001604 	movweq	r1, #1540	; 0x604
 16c:	3b0b3a0e 	blcc	2ce9ac <__bss_end__+0x2c4efc>
 170:	0013490b 	andseq	r4, r3, fp, lsl #18
 174:	000f0500 	andeq	r0, pc, r0, lsl #10
 178:	00000b0b 	andeq	r0, r0, fp, lsl #22
 17c:	0b000f06 	bleq	3d9c <_start-0x4264>
 180:	0013490b 	andseq	r4, r3, fp, lsl #18
 184:	00260700 	eoreq	r0, r6, r0, lsl #14
 188:	00001349 	andeq	r1, r0, r9, asr #6
 18c:	0b011308 	bleq	44db4 <__bss_end__+0x3b304>
 190:	3b0b3a0b 	blcc	2ce9c4 <__bss_end__+0x2c4f14>
 194:	0013010b 	andseq	r0, r3, fp, lsl #2
 198:	000d0900 	andeq	r0, sp, r0, lsl #18
 19c:	0b3a0803 	bleq	e821b0 <__bss_end__+0xe78700>
 1a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1a4:	00000b38 	andeq	r0, r0, r8, lsr fp
 1a8:	03000d0a 	movweq	r0, #3338	; 0xd0a
 1ac:	3b0b3a0e 	blcc	2ce9ec <__bss_end__+0x2c4f3c>
 1b0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 1b4:	0b00000b 	bleq	1e8 <_start-0x7e18>
 1b8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 1bc:	0b3a0b0b 	bleq	e82df0 <__bss_end__+0xe79340>
 1c0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 1c4:	0d0c0000 	stceq	0, cr0, [ip, #-0]
 1c8:	490e0300 	stmdbmi	lr, {r8, r9}
 1cc:	340b3813 	strcc	r3, [fp], #-2067	; 0x813
 1d0:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
 1d4:	0e03012e 	adfeqsp	f0, f3, #0.5
 1d8:	0b3b0b3a 	bleq	ec2ec8 <__bss_end__+0xeb9418>
 1dc:	0b201927 	bleq	806680 <__bss_end__+0x7fcbd0>
 1e0:	00001301 	andeq	r1, r0, r1, lsl #6
 1e4:	0300050e 	movweq	r0, #1294	; 0x50e
 1e8:	3b0b3a0e 	blcc	2cea28 <__bss_end__+0x2c4f78>
 1ec:	0013490b 	andseq	r4, r3, fp, lsl #18
 1f0:	00050f00 	andeq	r0, r5, r0, lsl #30
 1f4:	0b3a0803 	bleq	e82208 <__bss_end__+0xe78758>
 1f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1fc:	0b100000 	bleq	400204 <__bss_end__+0x3f6754>
 200:	11000001 	tstne	r0, r1
 204:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 208:	0b3b0b3a 	bleq	ec2ef8 <__bss_end__+0xeb9448>
 20c:	00001349 	andeq	r1, r0, r9, asr #6
 210:	3f012e12 	svccc	0x00012e12
 214:	3a0e0319 	bcc	380e80 <__bss_end__+0x3773d0>
 218:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 21c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 220:	97184006 	ldrls	r4, [r8, -r6]
 224:	13011942 	movwne	r1, #6466	; 0x1942
 228:	05130000 	ldreq	r0, [r3, #-0]
 22c:	3a0e0300 	bcc	380e34 <__bss_end__+0x377384>
 230:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 234:	00170213 	andseq	r0, r7, r3, lsl r2
 238:	00051400 	andeq	r1, r5, r0, lsl #8
 23c:	0b3a0803 	bleq	e82250 <__bss_end__+0xe787a0>
 240:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 244:	00001702 	andeq	r1, r0, r2, lsl #14
 248:	03003415 	movweq	r3, #1045	; 0x415
 24c:	3b0b3a08 	blcc	2cea74 <__bss_end__+0x2c4fc4>
 250:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 254:	16000018 			; <UNDEFINED> instruction: 0x16000018
 258:	08030034 	stmdaeq	r3, {r2, r4, r5}
 25c:	0b3b0b3a 	bleq	ec2f4c <__bss_end__+0xeb949c>
 260:	17021349 	strne	r1, [r2, -r9, asr #6]
 264:	34170000 	ldrcc	r0, [r7], #-0
 268:	3a080300 	bcc	200e70 <__bss_end__+0x1f73c0>
 26c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 270:	18000013 	stmdane	r0, {r0, r1, r4}
 274:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 278:	0b3b0b3a 	bleq	ec2f68 <__bss_end__+0xeb94b8>
 27c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 280:	0b190000 	bleq	640288 <__bss_end__+0x6367d8>
 284:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 288:	00130106 	andseq	r0, r3, r6, lsl #2
 28c:	011d1a00 	tsteq	sp, r0, lsl #20
 290:	01111331 	tsteq	r1, r1, lsr r3
 294:	0b580612 	bleq	1601ae4 <__bss_end__+0x15f8034>
 298:	13010b59 	movwne	r0, #7001	; 0x1b59
 29c:	051b0000 	ldreq	r0, [fp, #-0]
 2a0:	02133100 	andseq	r3, r3, #0, 2
 2a4:	1c000017 	stcne	0, cr0, [r0], {23}
 2a8:	13310005 	teqne	r1, #5
 2ac:	00001802 	andeq	r1, r0, r2, lsl #16
 2b0:	3100051d 	tstcc	r0, sp, lsl r5
 2b4:	000b1c13 	andeq	r1, fp, r3, lsl ip
 2b8:	010b1e00 	tsteq	fp, r0, lsl #28
 2bc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2c0:	341f0000 	ldrcc	r0, [pc], #-0	; 2c8 <_start-0x7d38>
 2c4:	02133100 	andseq	r3, r3, #0, 2
 2c8:	20000017 	andcs	r0, r0, r7, lsl r0
 2cc:	01018289 	smlabbeq	r1, r9, r2, r8
 2d0:	13310111 	teqne	r1, #1073741828	; 0x40000004
 2d4:	8a210000 	bhi	8402dc <__bss_end__+0x83682c>
 2d8:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
 2dc:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
 2e0:	1d220000 	stcne	0, cr0, [r2, #-0]
 2e4:	11133101 	tstne	r3, r1, lsl #2
 2e8:	58061201 	stmdapl	r6, {r0, r9, ip}
 2ec:	000b590b 	andeq	r5, fp, fp, lsl #18
 2f0:	012e2300 	teqeq	lr, r0, lsl #6
 2f4:	0b3a0e03 	bleq	e83b08 <__bss_end__+0xe7a058>
 2f8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 2fc:	0b201349 	bleq	805028 <__bss_end__+0x7fb578>
 300:	00001301 	andeq	r1, r0, r1, lsl #6
 304:	3f012e24 	svccc	0x00012e24
 308:	3a0e0319 	bcc	380f74 <__bss_end__+0x3774c4>
 30c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 310:	11134919 	tstne	r3, r9, lsl r9
 314:	40061201 	andmi	r1, r6, r1, lsl #4
 318:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 31c:	00001301 	andeq	r1, r0, r1, lsl #6
 320:	01828925 	orreq	r8, r2, r5, lsr #18
 324:	31011100 	mrscc	r1, (UNDEF: 17)
 328:	26000013 			; <UNDEFINED> instruction: 0x26000013
 32c:	01018289 	smlabbeq	r1, r9, r2, r8
 330:	13310111 	teqne	r1, #1073741828	; 0x40000004
 334:	00001301 	andeq	r1, r0, r1, lsl #6
 338:	03003427 	movweq	r3, #1063	; 0x427
 33c:	3b0b3a0e 	blcc	2ceb7c <__bss_end__+0x2c50cc>
 340:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 344:	28000017 	stmdacs	r0, {r0, r1, r2, r4}
 348:	13310005 	teqne	r1, #5
 34c:	05290000 	streq	r0, [r9, #-0]!
 350:	3a0e0300 	bcc	380f58 <__bss_end__+0x3774a8>
 354:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 358:	00180213 	andseq	r0, r8, r3, lsl r2
 35c:	00342a00 	eorseq	r2, r4, r0, lsl #20
 360:	13490e03 	movtne	r0, #40451	; 0x9e03
 364:	18021934 	stmdane	r2, {r2, r4, r5, r8, fp, ip}
 368:	012b0000 	teqeq	fp, r0
 36c:	01134901 	tsteq	r3, r1, lsl #18
 370:	2c000013 	stccs	0, cr0, [r0], {19}
 374:	13490021 	movtne	r0, #36897	; 0x9021
 378:	00000b2f 	andeq	r0, r0, pc, lsr #22
 37c:	0300342d 	movweq	r3, #1069	; 0x42d
 380:	3b0b3a08 	blcc	2ceba8 <__bss_end__+0x2c50f8>
 384:	1c13490b 	ldcne	9, cr4, [r3], {11}
 388:	2e000006 	cdpcs	0, 0, cr0, cr0, cr6, {0}
 38c:	08030034 	stmdaeq	r3, {r2, r4, r5}
 390:	0b3b0b3a 	bleq	ec3080 <__bss_end__+0xeb95d0>
 394:	0b1c1349 	bleq	7050c0 <__bss_end__+0x6fb610>
 398:	052f0000 	streq	r0, [pc, #-0]!	; 3a0 <_start-0x7c60>
 39c:	3a080300 	bcc	200fa4 <__bss_end__+0x1f74f4>
 3a0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3a4:	00180213 	andseq	r0, r8, r3, lsl r2
 3a8:	00183000 	andseq	r3, r8, r0
 3ac:	21310000 	teqcs	r1, r0
 3b0:	2f134900 	svccs	0x00134900
 3b4:	32000005 	andcc	r0, r0, #5
 3b8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 3bc:	0b3a0e03 	bleq	e83bd0 <__bss_end__+0xe7a120>
 3c0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 3c4:	1301193c 	movwne	r1, #6460	; 0x193c
 3c8:	05330000 	ldreq	r0, [r3, #-0]!
 3cc:	00134900 	andseq	r4, r3, r0, lsl #18
 3d0:	002e3400 	eoreq	r3, lr, r0, lsl #8
 3d4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 3d8:	0b3b0b3a 	bleq	ec30c8 <__bss_end__+0xeb9618>
 3dc:	13491927 	movtne	r1, #39207	; 0x9927
 3e0:	0000193c 	andeq	r1, r0, ip, lsr r9
 3e4:	3f012e35 	svccc	0x00012e35
 3e8:	3a0e0319 	bcc	381054 <__bss_end__+0x3775a4>
 3ec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 3f0:	3c134919 	ldccc	9, cr4, [r3], {25}
 3f4:	00130119 	andseq	r0, r3, r9, lsl r1
 3f8:	002e3600 	eoreq	r3, lr, r0, lsl #12
 3fc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 400:	0b3b0b3a 	bleq	ec30f0 <__bss_end__+0xeb9640>
 404:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 408:	2e370000 	cdpcs	0, 3, cr0, cr7, cr0, {0}
 40c:	03193f01 	tsteq	r9, #1, 30
 410:	3b0b3a0e 	blcc	2cec50 <__bss_end__+0x2c51a0>
 414:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 418:	00193c13 	andseq	r3, r9, r3, lsl ip
 41c:	11010000 	mrsne	r0, (UNDEF: 1)
 420:	130e2501 	movwne	r2, #58625	; 0xe501
 424:	1b0e030b 	blne	381058 <__bss_end__+0x3775a8>
 428:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 42c:	00171006 	andseq	r1, r7, r6
 430:	00160200 	andseq	r0, r6, r0, lsl #4
 434:	0b3a0e03 	bleq	e83c48 <__bss_end__+0xe7a198>
 438:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 43c:	13030000 	movwne	r0, #12288	; 0x3000
 440:	0b0e0301 	bleq	38104c <__bss_end__+0x37759c>
 444:	3b0b3a0b 	blcc	2cec78 <__bss_end__+0x2c51c8>
 448:	0013010b 	andseq	r0, r3, fp, lsl #2
 44c:	000d0400 	andeq	r0, sp, r0, lsl #8
 450:	13490e03 	movtne	r0, #40451	; 0x9e03
 454:	19340b38 	ldmdbne	r4!, {r3, r4, r5, r8, r9, fp}
 458:	0f050000 	svceq	0x00050000
 45c:	000b0b00 	andeq	r0, fp, r0, lsl #22
 460:	00240600 	eoreq	r0, r4, r0, lsl #12
 464:	0b3e0b0b 	bleq	f83098 <__bss_end__+0xf795e8>
 468:	00000803 	andeq	r0, r0, r3, lsl #16
 46c:	0b002407 	bleq	9490 <__FUNCTION__.4271+0x4>
 470:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 474:	0800000e 	stmdaeq	r0, {r1, r2, r3}
 478:	0b0b000f 	bleq	2c04bc <__bss_end__+0x2b6a0c>
 47c:	00001349 	andeq	r1, r0, r9, asr #6
 480:	49002609 	stmdbmi	r0, {r0, r3, r9, sl, sp}
 484:	0a000013 	beq	4d8 <_start-0x7b28>
 488:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 48c:	0b3a0e03 	bleq	e83ca0 <__bss_end__+0xe7a1f0>
 490:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 494:	01111349 	tsteq	r1, r9, asr #6
 498:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 49c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 4a0:	0b000013 	bleq	4f4 <_start-0x7b0c>
 4a4:	08030005 	stmdaeq	r3, {r0, r2}
 4a8:	0b3b0b3a 	bleq	ec3198 <__bss_end__+0xeb96e8>
 4ac:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 4b0:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
 4b4:	0d000000 	stceq	0, cr0, [r0, #-0]
 4b8:	08030034 	stmdaeq	r3, {r2, r4, r5}
 4bc:	0b3b0b3a 	bleq	ec31ac <__bss_end__+0xeb96fc>
 4c0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 4c4:	340e0000 	strcc	r0, [lr], #-0
 4c8:	3a0e0300 	bcc	3810d0 <__bss_end__+0x377620>
 4cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4d0:	00180213 	andseq	r0, r8, r3, lsl r2
 4d4:	00340f00 	eorseq	r0, r4, r0, lsl #30
 4d8:	0b3a0803 	bleq	e824ec <__bss_end__+0xe78a3c>
 4dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 4e0:	00001702 	andeq	r1, r0, r2, lsl #14
 4e4:	01828910 	orreq	r8, r2, r0, lsl r9
 4e8:	31011101 	tstcc	r1, r1, lsl #2
 4ec:	00130113 	andseq	r0, r3, r3, lsl r1
 4f0:	828a1100 	addhi	r1, sl, #0, 2
 4f4:	18020001 	stmdane	r2, {r0}
 4f8:	00184291 	mulseq	r8, r1, r2
 4fc:	82891200 	addhi	r1, r9, #0, 4
 500:	01110101 	tsteq	r1, r1, lsl #2
 504:	01130000 	tsteq	r3, r0
 508:	01134901 	tsteq	r3, r1, lsl #18
 50c:	14000013 	strne	r0, [r0], #-19
 510:	13490021 	movtne	r0, #36897	; 0x9021
 514:	0000052f 	andeq	r0, r0, pc, lsr #10
 518:	27011515 	smladcs	r1, r5, r5, r1
 51c:	01134919 	tsteq	r3, r9, lsl r9
 520:	16000013 			; <UNDEFINED> instruction: 0x16000013
 524:	13490005 	movtne	r0, #36869	; 0x9005
 528:	34170000 	ldrcc	r0, [r7], #-0
 52c:	3a0e0300 	bcc	381134 <__bss_end__+0x377684>
 530:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 534:	3c193f13 	ldccc	15, cr3, [r9], {19}
 538:	18000019 	stmdane	r0, {r0, r3, r4}
 53c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 540:	0b3a0e03 	bleq	e83d54 <__bss_end__+0xe7a2a4>
 544:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 548:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 54c:	01000000 	mrseq	r0, (UNDEF: 0)
 550:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 554:	0e030b13 	vmoveq.32	d3[0], r0
 558:	01110e1b 	tsteq	r1, fp, lsl lr
 55c:	17100612 			; <UNDEFINED> instruction: 0x17100612
 560:	24020000 	strcs	r0, [r2], #-0
 564:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 568:	0008030b 	andeq	r0, r8, fp, lsl #6
 56c:	00240300 	eoreq	r0, r4, r0, lsl #6
 570:	0b3e0b0b 	bleq	f831a4 <__bss_end__+0xf796f4>
 574:	00000e03 	andeq	r0, r0, r3, lsl #28
 578:	0b000f04 	bleq	4190 <_start-0x3e70>
 57c:	0013490b 	andseq	r4, r3, fp, lsl #18
 580:	00260500 	eoreq	r0, r6, r0, lsl #10
 584:	00001349 	andeq	r1, r0, r9, asr #6
 588:	3f012e06 	svccc	0x00012e06
 58c:	3a0e0319 	bcc	3811f8 <__bss_end__+0x377748>
 590:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 594:	11134919 	tstne	r3, r9, lsl r9
 598:	40061201 	andmi	r1, r6, r1, lsl #4
 59c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 5a0:	00001301 	andeq	r1, r0, r1, lsl #6
 5a4:	03000507 	movweq	r0, #1287	; 0x507
 5a8:	3b0b3a08 	blcc	2cedd0 <__bss_end__+0x2c5320>
 5ac:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 5b0:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
 5b4:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 5b8:	13011349 	movwne	r1, #4937	; 0x1349
 5bc:	05090000 	streq	r0, [r9, #-0]
 5c0:	00134900 	andseq	r4, r3, r0, lsl #18
 5c4:	00340a00 	eorseq	r0, r4, r0, lsl #20
 5c8:	0b3a0e03 	bleq	e83ddc <__bss_end__+0xe7a32c>
 5cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 5d0:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 5d4:	340b0000 	strcc	r0, [fp], #-0
 5d8:	3a0e0300 	bcc	3811e0 <__bss_end__+0x377730>
 5dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 5e0:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 5e4:	00000018 	andeq	r0, r0, r8, lsl r0
 5e8:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 5ec:	030b130e 	movweq	r1, #45838	; 0xb30e
 5f0:	110e1b0e 	tstne	lr, lr, lsl #22
 5f4:	10061201 	andne	r1, r6, r1, lsl #4
 5f8:	02000017 	andeq	r0, r0, #23
 5fc:	0b0b0024 	bleq	2c0694 <__bss_end__+0x2b6be4>
 600:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 604:	24030000 	strcs	r0, [r3], #-0
 608:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 60c:	000e030b 	andeq	r0, lr, fp, lsl #6
 610:	000f0400 	andeq	r0, pc, r0, lsl #8
 614:	00000b0b 	andeq	r0, r0, fp, lsl #22
 618:	0b000f05 	bleq	4234 <_start-0x3dcc>
 61c:	0013490b 	andseq	r4, r3, fp, lsl #18
 620:	00260600 	eoreq	r0, r6, r0, lsl #12
 624:	00001349 	andeq	r1, r0, r9, asr #6
 628:	03001607 	movweq	r1, #1543	; 0x607
 62c:	3b0b3a0e 	blcc	2cee6c <__bss_end__+0x2c53bc>
 630:	0013490b 	andseq	r4, r3, fp, lsl #18
 634:	01130800 	tsteq	r3, r0, lsl #16
 638:	0b0b0e03 	bleq	2c3e4c <__bss_end__+0x2ba39c>
 63c:	0b3b0b3a 	bleq	ec332c <__bss_end__+0xeb987c>
 640:	00001301 	andeq	r1, r0, r1, lsl #6
 644:	03000d09 	movweq	r0, #3337	; 0xd09
 648:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
 64c:	0019340b 	andseq	r3, r9, fp, lsl #8
 650:	012e0a00 	teqeq	lr, r0, lsl #20
 654:	0b3a0e03 	bleq	e83e68 <__bss_end__+0xe7a3b8>
 658:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 65c:	01111349 	tsteq	r1, r9, asr #6
 660:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 664:	01194297 			; <UNDEFINED> instruction: 0x01194297
 668:	0b000013 	bleq	6bc <_start-0x7944>
 66c:	08030005 	stmdaeq	r3, {r0, r2}
 670:	0b3b0b3a 	bleq	ec3360 <__bss_end__+0xeb98b0>
 674:	17021349 	strne	r1, [r2, -r9, asr #6]
 678:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
 67c:	3a080301 	bcc	201288 <__bss_end__+0x1f77d8>
 680:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 684:	11134919 	tstne	r3, r9, lsl r9
 688:	40061201 	andmi	r1, r6, r1, lsl #4
 68c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 690:	00001301 	andeq	r1, r0, r1, lsl #6
 694:	0300050d 	movweq	r0, #1293	; 0x50d
 698:	3b0b3a0e 	blcc	2ceed8 <__bss_end__+0x2c5428>
 69c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 6a0:	0e000017 	mcreq	0, 0, r0, cr0, cr7, {0}
 6a4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 6a8:	0b3b0b3a 	bleq	ec3398 <__bss_end__+0xeb98e8>
 6ac:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 6b0:	340f0000 	strcc	r0, [pc], #-0	; 6b8 <_start-0x7948>
 6b4:	3a080300 	bcc	2012bc <__bss_end__+0x1f780c>
 6b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6bc:	00180213 	andseq	r0, r8, r3, lsl r2
 6c0:	00341000 	eorseq	r1, r4, r0
 6c4:	0b3a0803 	bleq	e826d8 <__bss_end__+0xe78c28>
 6c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 6cc:	00001702 	andeq	r1, r0, r2, lsl #14
 6d0:	03003411 	movweq	r3, #1041	; 0x411
 6d4:	3413490e 	ldrcc	r4, [r3], #-2318	; 0x90e
 6d8:	00180219 	andseq	r0, r8, r9, lsl r2
 6dc:	010b1200 	mrseq	r1, R11_fiq
 6e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 6e4:	00001301 	andeq	r1, r0, r1, lsl #6
 6e8:	03003413 	movweq	r3, #1043	; 0x413
 6ec:	3b0b3a0e 	blcc	2cef2c <__bss_end__+0x2c547c>
 6f0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 6f4:	14000017 	strne	r0, [r0], #-23
 6f8:	01018289 	smlabbeq	r1, r9, r2, r8
 6fc:	13310111 	teqne	r1, #1073741828	; 0x40000004
 700:	00001301 	andeq	r1, r0, r1, lsl #6
 704:	01828a15 	orreq	r8, r2, r5, lsl sl
 708:	91180200 	tstls	r8, r0, lsl #4
 70c:	00001842 	andeq	r1, r0, r2, asr #16
 710:	01828916 	orreq	r8, r2, r6, lsl r9
 714:	31011100 	mrscc	r1, (UNDEF: 17)
 718:	17000013 	smladne	r0, r3, r0, r0
 71c:	01018289 	smlabbeq	r1, r9, r2, r8
 720:	13310111 	teqne	r1, #1073741828	; 0x40000004
 724:	01180000 	tsteq	r8, r0
 728:	01134901 	tsteq	r3, r1, lsl #18
 72c:	19000013 	stmdbne	r0, {r0, r1, r4}
 730:	13490021 	movtne	r0, #36897	; 0x9021
 734:	00000b2f 	andeq	r0, r0, pc, lsr #22
 738:	3f012e1a 	svccc	0x00012e1a
 73c:	3a0e0319 	bcc	3813a8 <__bss_end__+0x3778f8>
 740:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 744:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 748:	97184006 	ldrls	r4, [r8, -r6]
 74c:	13011942 	movwne	r1, #6466	; 0x1942
 750:	151b0000 	ldrne	r0, [fp, #-0]
 754:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
 758:	00130113 	andseq	r0, r3, r3, lsl r1
 75c:	00051c00 	andeq	r1, r5, r0, lsl #24
 760:	00001349 	andeq	r1, r0, r9, asr #6
 764:	3f012e1d 	svccc	0x00012e1d
 768:	3a0e0319 	bcc	3813d4 <__bss_end__+0x377924>
 76c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 770:	11134919 	tstne	r3, r9, lsl r9
 774:	40061201 	andmi	r1, r6, r1, lsl #4
 778:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 77c:	00001301 	andeq	r1, r0, r1, lsl #6
 780:	11010b1e 	tstne	r1, lr, lsl fp
 784:	00061201 	andeq	r1, r6, r1, lsl #4
 788:	00341f00 	eorseq	r1, r4, r0, lsl #30
 78c:	0b3a0e03 	bleq	e83fa0 <__bss_end__+0xe7a4f0>
 790:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 794:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 798:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
 79c:	03193f01 	tsteq	r9, #1, 30
 7a0:	3b0b3a0e 	blcc	2cefe0 <__bss_end__+0x2c5530>
 7a4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 7a8:	01193c13 	tsteq	r9, r3, lsl ip
 7ac:	21000013 	tstcs	r0, r3, lsl r0
 7b0:	00000018 	andeq	r0, r0, r8, lsl r0
 7b4:	3f002e22 	svccc	0x00002e22
 7b8:	3a0e0319 	bcc	381424 <__bss_end__+0x377974>
 7bc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 7c0:	00193c19 	andseq	r3, r9, r9, lsl ip
 7c4:	11010000 	mrsne	r0, (UNDEF: 1)
 7c8:	130e2501 	movwne	r2, #58625	; 0xe501
 7cc:	1b0e030b 	blne	381400 <__bss_end__+0x377950>
 7d0:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 7d4:	00171006 	andseq	r1, r7, r6
 7d8:	00240200 	eoreq	r0, r4, r0, lsl #4
 7dc:	0b3e0b0b 	bleq	f83410 <__bss_end__+0xf79960>
 7e0:	00000803 	andeq	r0, r0, r3, lsl #16
 7e4:	0b002403 	bleq	97f8 <__bss_start__+0x148>
 7e8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 7ec:	0400000e 	streq	r0, [r0], #-14
 7f0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 7f4:	0b3a0e03 	bleq	e84008 <__bss_end__+0xe7a558>
 7f8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 7fc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 800:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 804:	00130119 	andseq	r0, r3, r9, lsl r1
 808:	00340500 	eorseq	r0, r4, r0, lsl #10
 80c:	0b3a0803 	bleq	e82820 <__bss_end__+0xe78d70>
 810:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 814:	00001702 	andeq	r1, r0, r2, lsl #14
 818:	3f012e06 	svccc	0x00012e06
 81c:	3a0e0319 	bcc	381488 <__bss_end__+0x3779d8>
 820:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 824:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 828:	97184006 	ldrls	r4, [r8, -r6]
 82c:	00001942 	andeq	r1, r0, r2, asr #18
 830:	01110100 	tsteq	r1, r0, lsl #2
 834:	0b130e25 	bleq	4c40d0 <__bss_end__+0x4ba620>
 838:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 83c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 840:	00001710 	andeq	r1, r0, r0, lsl r7
 844:	0b002402 	bleq	9854 <__bss_start__+0x1a4>
 848:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 84c:	03000008 	movweq	r0, #8
 850:	0b0b0024 	bleq	2c08e8 <__bss_end__+0x2b6e38>
 854:	0e030b3e 	vmoveq.16	d3[0], r0
 858:	0f040000 	svceq	0x00040000
 85c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 860:	05000013 	streq	r0, [r0, #-19]
 864:	13490026 	movtne	r0, #36902	; 0x9026
 868:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
 86c:	03193f01 	tsteq	r9, #1, 30
 870:	3b0b3a0e 	blcc	2cf0b0 <__bss_end__+0x2c5600>
 874:	1119270b 	tstne	r9, fp, lsl #14
 878:	40061201 	andmi	r1, r6, r1, lsl #4
 87c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 880:	00001301 	andeq	r1, r0, r1, lsl #6
 884:	01828907 	orreq	r8, r2, r7, lsl #18
 888:	01011101 	tsteq	r1, r1, lsl #2
 88c:	08000013 	stmdaeq	r0, {r0, r1, r4}
 890:	0001828a 	andeq	r8, r1, sl, lsl #5
 894:	42911802 	addsmi	r1, r1, #131072	; 0x20000
 898:	09000018 	stmdbeq	r0, {r3, r4}
 89c:	01018289 	smlabbeq	r1, r9, r2, r8
 8a0:	13310111 	teqne	r1, #1073741828	; 0x40000004
 8a4:	00001301 	andeq	r1, r0, r1, lsl #6
 8a8:	0182890a 	orreq	r8, r2, sl, lsl #18
 8ac:	31011100 	mrscc	r1, (UNDEF: 17)
 8b0:	0b000013 	bleq	904 <_start-0x76fc>
 8b4:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 8b8:	13011349 	movwne	r1, #4937	; 0x1349
 8bc:	050c0000 	streq	r0, [ip, #-0]
 8c0:	00134900 	andseq	r4, r3, r0, lsl #18
 8c4:	00340d00 	eorseq	r0, r4, r0, lsl #26
 8c8:	0b3a0e03 	bleq	e840dc <__bss_end__+0xe7a62c>
 8cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 8d0:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 8d4:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
 8d8:	03193f01 	tsteq	r9, #1, 30
 8dc:	3b0b3a0e 	blcc	2cf11c <__bss_end__+0x2c566c>
 8e0:	3c19270b 	ldccc	7, cr2, [r9], {11}
 8e4:	00130119 	andseq	r0, r3, r9, lsl r1
 8e8:	002e0f00 	eoreq	r0, lr, r0, lsl #30
 8ec:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 8f0:	0b3b0b3a 	bleq	ec35e0 <__bss_end__+0xeb9b30>
 8f4:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 8f8:	01000000 	mrseq	r0, (UNDEF: 0)
 8fc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 900:	0e030b13 	vmoveq.32	d3[0], r0
 904:	01110e1b 	tsteq	r1, fp, lsl lr
 908:	17100612 			; <UNDEFINED> instruction: 0x17100612
 90c:	24020000 	strcs	r0, [r2], #-0
 910:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 914:	0008030b 	andeq	r0, r8, fp, lsl #6
 918:	00240300 	eoreq	r0, r4, r0, lsl #6
 91c:	0b3e0b0b 	bleq	f83550 <__bss_end__+0xf79aa0>
 920:	00000e03 	andeq	r0, r0, r3, lsl #28
 924:	3f012e04 	svccc	0x00012e04
 928:	3a0e0319 	bcc	381594 <__bss_end__+0x377ae4>
 92c:	110b3b0b 	tstne	fp, fp, lsl #22
 930:	40061201 	andmi	r1, r6, r1, lsl #4
 934:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 938:	00001301 	andeq	r1, r0, r1, lsl #6
 93c:	03003405 	movweq	r3, #1029	; 0x405
 940:	3b0b3a0e 	blcc	2cf180 <__bss_end__+0x2c56d0>
 944:	3f13490b 	svccc	0x0013490b
 948:	00193c19 	andseq	r3, r9, r9, lsl ip
 94c:	012e0600 	teqeq	lr, r0, lsl #12
 950:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 954:	0b3b0b3a 	bleq	ec3644 <__bss_end__+0xeb9b94>
 958:	1301193c 	movwne	r1, #6460	; 0x193c
 95c:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
 960:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 964:	08030034 	stmdaeq	r3, {r2, r4, r5}
 968:	0b3b0b3a 	bleq	ec3658 <__bss_end__+0xeb9ba8>
 96c:	17021349 	strne	r1, [r2, -r9, asr #6]
 970:	34090000 	strcc	r0, [r9], #-0
 974:	3a0e0300 	bcc	38157c <__bss_end__+0x377acc>
 978:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 97c:	0a000013 	beq	9d0 <_start-0x7630>
 980:	00018289 	andeq	r8, r1, r9, lsl #5
 984:	13310111 	teqne	r1, #1073741828	; 0x40000004
 988:	0f0b0000 	svceq	0x000b0000
 98c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 990:	0c000013 	stceq	0, cr0, [r0], {19}
 994:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 998:	0b3a0e03 	bleq	e841ac <__bss_end__+0xe7a6fc>
 99c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 9a0:	0000193c 	andeq	r1, r0, ip, lsr r9
 9a4:	01110100 	tsteq	r1, r0, lsl #2
 9a8:	0b130e25 	bleq	4c4244 <__bss_end__+0x4ba794>
 9ac:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 9b0:	01111755 	tsteq	r1, r5, asr r7
 9b4:	00001710 	andeq	r1, r0, r0, lsl r7
 9b8:	0b002402 	bleq	99c8 <__bss_start__+0x318>
 9bc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 9c0:	03000008 	movweq	r0, #8
 9c4:	0b0b0024 	bleq	2c0a5c <__bss_end__+0x2b6fac>
 9c8:	0e030b3e 	vmoveq.16	d3[0], r0
 9cc:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
 9d0:	03193f01 	tsteq	r9, #1, 30
 9d4:	3b0b3a0e 	blcc	2cf214 <__bss_end__+0x2c5764>
 9d8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 9dc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 9e0:	97184006 	ldrls	r4, [r8, -r6]
 9e4:	13011942 	movwne	r1, #6466	; 0x1942
 9e8:	34050000 	strcc	r0, [r5], #-0
 9ec:	3a0e0300 	bcc	3815f4 <__bss_end__+0x377b44>
 9f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 9f4:	00170213 	andseq	r0, r7, r3, lsl r2
 9f8:	012e0600 	teqeq	lr, r0, lsl #12
 9fc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 a00:	0b3b0b3a 	bleq	ec36f0 <__bss_end__+0xeb9c40>
 a04:	01111927 	tsteq	r1, r7, lsr #18
 a08:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 a0c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 a10:	07000013 	smladeq	r0, r3, r0, r0
 a14:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 a18:	0b3b0b3a 	bleq	ec3708 <__bss_end__+0xeb9c58>
 a1c:	061c1349 	ldreq	r1, [ip], -r9, asr #6
 a20:	34080000 	strcc	r0, [r8], #-0
 a24:	3a0e0300 	bcc	38162c <__bss_end__+0x377b7c>
 a28:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 a2c:	000b1c13 	andeq	r1, fp, r3, lsl ip
 a30:	82890900 	addhi	r0, r9, #0, 18
 a34:	01110001 	tsteq	r1, r1
 a38:	00001331 	andeq	r1, r0, r1, lsr r3
 a3c:	0182890a 	orreq	r8, r2, sl, lsl #18
 a40:	31011101 	tstcc	r1, r1, lsl #2
 a44:	00130113 	andseq	r0, r3, r3, lsl r1
 a48:	828a0b00 	addhi	r0, sl, #0, 22
 a4c:	18020001 	stmdane	r2, {r0}
 a50:	00184291 	mulseq	r8, r1, r2
 a54:	82890c00 	addhi	r0, r9, #0, 24
 a58:	01110101 	tsteq	r1, r1, lsl #2
 a5c:	00001331 	andeq	r1, r0, r1, lsr r3
 a60:	4900260d 	stmdbmi	r0, {r0, r2, r3, r9, sl, sp}
 a64:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 a68:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 a6c:	0b3a0e03 	bleq	e84280 <__bss_end__+0xe7a7d0>
 a70:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 a74:	1301193c 	movwne	r1, #6460	; 0x193c
 a78:	050f0000 	streq	r0, [pc, #-0]	; a80 <_start-0x7580>
 a7c:	00134900 	andseq	r4, r3, r0, lsl #18
 a80:	012e1000 	teqeq	lr, r0
 a84:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 a88:	0b3b0b3a 	bleq	ec3778 <__bss_end__+0xeb9cc8>
 a8c:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 a90:	01000000 	mrseq	r0, (UNDEF: 0)
 a94:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 a98:	0e030b13 	vmoveq.32	d3[0], r0
 a9c:	01110e1b 	tsteq	r1, fp, lsl lr
 aa0:	17100612 			; <UNDEFINED> instruction: 0x17100612
 aa4:	24020000 	strcs	r0, [r2], #-0
 aa8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 aac:	0008030b 	andeq	r0, r8, fp, lsl #6
 ab0:	00240300 	eoreq	r0, r4, r0, lsl #6
 ab4:	0b3e0b0b 	bleq	f836e8 <__bss_end__+0xf79c38>
 ab8:	00000e03 	andeq	r0, r0, r3, lsl #28
 abc:	3f012e04 	svccc	0x00012e04
 ac0:	3a0e0319 	bcc	38172c <__bss_end__+0x377c7c>
 ac4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 ac8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 acc:	97184006 	ldrls	r4, [r8, -r6]
 ad0:	13011942 	movwne	r1, #6466	; 0x1942
 ad4:	05050000 	streq	r0, [r5, #-0]
 ad8:	3a0e0300 	bcc	3816e0 <__bss_end__+0x377c30>
 adc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 ae0:	00170213 	andseq	r0, r7, r3, lsl r2
 ae4:	012e0600 	teqeq	lr, r0, lsl #12
 ae8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 aec:	0b3b0b3a 	bleq	ec37dc <__bss_end__+0xeb9d2c>
 af0:	13491927 	movtne	r1, #39207	; 0x9927
 af4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 af8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 afc:	00130119 	andseq	r0, r3, r9, lsl r1
 b00:	82890700 	addhi	r0, r9, #0, 14
 b04:	01110101 	tsteq	r1, r1, lsl #2
 b08:	00001331 	andeq	r1, r0, r1, lsr r3
 b0c:	01828a08 	orreq	r8, r2, r8, lsl #20
 b10:	91180200 	tstls	r8, r0, lsl #4
 b14:	00001842 	andeq	r1, r0, r2, asr #16
 b18:	03003409 	movweq	r3, #1033	; 0x409
 b1c:	3b0b3a08 	blcc	2cf344 <__bss_end__+0x2c5894>
 b20:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 b24:	0a000017 	beq	b88 <_start-0x7478>
 b28:	00018289 	andeq	r8, r1, r9, lsl #5
 b2c:	13310111 	teqne	r1, #1073741828	; 0x40000004
 b30:	050b0000 	streq	r0, [fp, #-0]
 b34:	3a080300 	bcc	20173c <__bss_end__+0x1f7c8c>
 b38:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 b3c:	00170213 	andseq	r0, r7, r3, lsl r2
 b40:	00340c00 	eorseq	r0, r4, r0, lsl #24
 b44:	0b3a0803 	bleq	e82b58 <__bss_end__+0xe790a8>
 b48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 b4c:	00001802 	andeq	r1, r0, r2, lsl #16
 b50:	11010b0d 	tstne	r1, sp, lsl #22
 b54:	01061201 	tsteq	r6, r1, lsl #4
 b58:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 b5c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 b60:	0b3a0e03 	bleq	e84374 <__bss_end__+0xe7a8c4>
 b64:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 b68:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 b6c:	00001301 	andeq	r1, r0, r1, lsl #6
 b70:	4900050f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sl}
 b74:	10000013 	andne	r0, r0, r3, lsl r0
 b78:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 b7c:	0b3a0e03 	bleq	e84390 <__bss_end__+0xe7a8e0>
 b80:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 b84:	0000193c 	andeq	r1, r0, ip, lsr r9
 b88:	01110100 	tsteq	r1, r0, lsl #2
 b8c:	0b130e25 	bleq	4c4428 <__bss_end__+0x4ba978>
 b90:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 b94:	06120111 			; <UNDEFINED> instruction: 0x06120111
 b98:	00001710 	andeq	r1, r0, r0, lsl r7
 b9c:	0b002402 	bleq	9bac <__bss_end__+0xfc>
 ba0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 ba4:	03000008 	movweq	r0, #8
 ba8:	0b0b0024 	bleq	2c0c40 <__bss_end__+0x2b7190>
 bac:	0e030b3e 	vmoveq.16	d3[0], r0
 bb0:	04040000 	streq	r0, [r4], #-0
 bb4:	3a0b0b01 	bcc	2c37c0 <__bss_end__+0x2b9d10>
 bb8:	010b3b0b 	tsteq	fp, fp, lsl #22
 bbc:	05000013 	streq	r0, [r0, #-19]
 bc0:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 bc4:	00000d1c 	andeq	r0, r0, ip, lsl sp
 bc8:	03001606 	movweq	r1, #1542	; 0x606
 bcc:	3b0b3a0e 	blcc	2cf40c <__bss_end__+0x2c595c>
 bd0:	0013490b 	andseq	r4, r3, fp, lsl #18
 bd4:	012e0700 	teqeq	lr, r0, lsl #14
 bd8:	0b3a0e03 	bleq	e843ec <__bss_end__+0xe7a93c>
 bdc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 be0:	01111349 	tsteq	r1, r9, asr #6
 be4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 be8:	01194297 			; <UNDEFINED> instruction: 0x01194297
 bec:	08000013 	stmdaeq	r0, {r0, r1, r4}
 bf0:	00018289 	andeq	r8, r1, r9, lsl #5
 bf4:	13310111 	teqne	r1, #1073741828	; 0x40000004
 bf8:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
 bfc:	03193f01 	tsteq	r9, #1, 30
 c00:	3b0b3a0e 	blcc	2cf440 <__bss_end__+0x2c5990>
 c04:	1119270b 	tstne	r9, fp, lsl #14
 c08:	40061201 	andmi	r1, r6, r1, lsl #4
 c0c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 c10:	00001301 	andeq	r1, r0, r1, lsl #6
 c14:	0182890a 	orreq	r8, r2, sl, lsl #18
 c18:	31011101 	tstcc	r1, r1, lsl #2
 c1c:	00130113 	andseq	r0, r3, r3, lsl r1
 c20:	828a0b00 	addhi	r0, sl, #0, 22
 c24:	18020001 	stmdane	r2, {r0}
 c28:	00184291 	mulseq	r8, r1, r2
 c2c:	012e0c00 	teqeq	lr, r0, lsl #24
 c30:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 c34:	0b3b0b3a 	bleq	ec3924 <__bss_end__+0xeb9e74>
 c38:	13491927 	movtne	r1, #39207	; 0x9927
 c3c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 c40:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 c44:	00130119 	andseq	r0, r3, r9, lsl r1
 c48:	00050d00 	andeq	r0, r5, r0, lsl #26
 c4c:	0b3a0803 	bleq	e82c60 <__bss_end__+0xe791b0>
 c50:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 c54:	00001702 	andeq	r1, r0, r2, lsl #14
 c58:	0182890e 	orreq	r8, r2, lr, lsl #18
 c5c:	31011101 	tstcc	r1, r1, lsl #2
 c60:	0f000013 	svceq	0x00000013
 c64:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 c68:	0b3b0b3a 	bleq	ec3958 <__bss_end__+0xeb9ea8>
 c6c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 c70:	00001802 	andeq	r1, r0, r2, lsl #16
 c74:	0b000f10 	bleq	48bc <_start-0x3744>
 c78:	0013490b 	andseq	r4, r3, fp, lsl #18
 c7c:	00351100 	eorseq	r1, r5, r0, lsl #2
 c80:	00001349 	andeq	r1, r0, r9, asr #6
 c84:	3f012e12 	svccc	0x00012e12
 c88:	3a0e0319 	bcc	3818f4 <__bss_end__+0x377e44>
 c8c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 c90:	3c134919 	ldccc	9, cr4, [r3], {25}
 c94:	00130119 	andseq	r0, r3, r9, lsl r1
 c98:	00051300 	andeq	r1, r5, r0, lsl #6
 c9c:	00001349 	andeq	r1, r0, r9, asr #6
 ca0:	49002614 	stmdbmi	r0, {r2, r4, r9, sl, sp}
 ca4:	15000013 	strne	r0, [r0, #-19]
 ca8:	00000035 	andeq	r0, r0, r5, lsr r0
 cac:	3f002e16 	svccc	0x00002e16
 cb0:	3a0e0319 	bcc	38191c <__bss_end__+0x377e6c>
 cb4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 cb8:	00193c19 	andseq	r3, r9, r9, lsl ip
 cbc:	012e1700 	teqeq	lr, r0, lsl #14
 cc0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 cc4:	0b3b0b3a 	bleq	ec39b4 <__bss_end__+0xeb9f04>
 cc8:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 ccc:	00001301 	andeq	r1, r0, r1, lsl #6
 cd0:	01110100 	tsteq	r1, r0, lsl #2
 cd4:	0b130e25 	bleq	4c4570 <__bss_end__+0x4baac0>
 cd8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 cdc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 ce0:	00001710 	andeq	r1, r0, r0, lsl r7
 ce4:	0b002402 	bleq	9cf4 <__bss_end__+0x244>
 ce8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 cec:	0300000e 	movweq	r0, #14
 cf0:	0b0b0024 	bleq	2c0d88 <__bss_end__+0x2b72d8>
 cf4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 cf8:	04040000 	streq	r0, [r4], #-0
 cfc:	3a0b0b01 	bcc	2c3908 <__bss_end__+0x2b9e58>
 d00:	010b3b0b 	tsteq	fp, fp, lsl #22
 d04:	05000013 	streq	r0, [r0, #-19]
 d08:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 d0c:	00000d1c 	andeq	r0, r0, ip, lsl sp
 d10:	03001606 	movweq	r1, #1542	; 0x606
 d14:	3b0b3a0e 	blcc	2cf554 <__bss_end__+0x2c5aa4>
 d18:	0013490b 	andseq	r4, r3, fp, lsl #18
 d1c:	012e0700 	teqeq	lr, r0, lsl #14
 d20:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 d24:	0b3b0b3a 	bleq	ec3a14 <__bss_end__+0xeb9f64>
 d28:	01111927 	tsteq	r1, r7, lsr #18
 d2c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 d30:	01194297 			; <UNDEFINED> instruction: 0x01194297
 d34:	08000013 	stmdaeq	r0, {r0, r1, r4}
 d38:	08030005 	stmdaeq	r3, {r0, r2}
 d3c:	0b3b0b3a 	bleq	ec3a2c <__bss_end__+0xeb9f7c>
 d40:	17021349 	strne	r1, [r2, -r9, asr #6]
 d44:	34090000 	strcc	r0, [r9], #-0
 d48:	3a0e0300 	bcc	381950 <__bss_end__+0x377ea0>
 d4c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 d50:	00170213 	andseq	r0, r7, r3, lsl r2
 d54:	82890a00 	addhi	r0, r9, #0, 20
 d58:	01110101 	tsteq	r1, r1, lsl #2
 d5c:	13011331 	movwne	r1, #4913	; 0x1331
 d60:	8a0b0000 	bhi	2c0d68 <__bss_end__+0x2b72b8>
 d64:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
 d68:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
 d6c:	890c0000 	stmdbhi	ip, {}	; <UNPREDICTABLE>
 d70:	11010182 	smlabbne	r1, r2, r1, r0
 d74:	00133101 	andseq	r3, r3, r1, lsl #2
 d78:	000f0d00 	andeq	r0, pc, r0, lsl #26
 d7c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 d80:	350e0000 	strcc	r0, [lr, #-0]
 d84:	00134900 	andseq	r4, r3, r0, lsl #18
 d88:	012e0f00 	teqeq	lr, r0, lsl #30
 d8c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 d90:	0b3b0b3a 	bleq	ec3a80 <__bss_end__+0xeb9fd0>
 d94:	0b201927 	bleq	807238 <__bss_end__+0x7fd788>
 d98:	00001301 	andeq	r1, r0, r1, lsl #6
 d9c:	03000510 	movweq	r0, #1296	; 0x510
 da0:	3b0b3a08 	blcc	2cf5c8 <__bss_end__+0x2c5b18>
 da4:	0013490b 	andseq	r4, r3, fp, lsl #18
 da8:	00341100 	eorseq	r1, r4, r0, lsl #2
 dac:	0b3a0e03 	bleq	e845c0 <__bss_end__+0xe7ab10>
 db0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 db4:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 db8:	11133101 	tstne	r3, r1, lsl #2
 dbc:	40061201 	andmi	r1, r6, r1, lsl #4
 dc0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 dc4:	00001301 	andeq	r1, r0, r1, lsl #6
 dc8:	31000513 	tstcc	r0, r3, lsl r5
 dcc:	00170213 	andseq	r0, r7, r3, lsl r2
 dd0:	00341400 	eorseq	r1, r4, r0, lsl #8
 dd4:	17021331 	smladxne	r2, r1, r3, r1
 dd8:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 ddc:	03193f01 	tsteq	r9, #1, 30
 de0:	3b0b3a0e 	blcc	2cf620 <__bss_end__+0x2c5b70>
 de4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 de8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 dec:	97184006 	ldrls	r4, [r8, -r6]
 df0:	13011942 	movwne	r1, #6466	; 0x1942
 df4:	34160000 	ldrcc	r0, [r6], #-0
 df8:	3a080300 	bcc	201a00 <__bss_end__+0x1f7f50>
 dfc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 e00:	00170213 	andseq	r0, r7, r3, lsl r2
 e04:	82891700 	addhi	r1, r9, #0, 14
 e08:	01110001 	tsteq	r1, r1
 e0c:	00001331 	andeq	r1, r0, r1, lsr r3
 e10:	31011d18 	tstcc	r1, r8, lsl sp
 e14:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 e18:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
 e1c:	0013010b 	andseq	r0, r3, fp, lsl #2
 e20:	010b1900 	tsteq	fp, r0, lsl #18
 e24:	06120111 			; <UNDEFINED> instruction: 0x06120111
 e28:	1d1a0000 	ldcne	0, cr0, [sl, #-0]
 e2c:	11133101 	tstne	r3, r1, lsl #2
 e30:	58061201 	stmdapl	r6, {r0, r9, ip}
 e34:	000b590b 	andeq	r5, fp, fp, lsl #18
 e38:	00051b00 	andeq	r1, r5, r0, lsl #22
 e3c:	0b3a0e03 	bleq	e84650 <__bss_end__+0xe7aba0>
 e40:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 e44:	00001702 	andeq	r1, r0, r2, lsl #14
 e48:	0300341c 	movweq	r3, #1052	; 0x41c
 e4c:	3b0b3a0e 	blcc	2cf68c <__bss_end__+0x2c5bdc>
 e50:	3f13490b 	svccc	0x0013490b
 e54:	00180219 	andseq	r0, r8, r9, lsl r2
 e58:	012e1d00 	teqeq	lr, r0, lsl #26
 e5c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 e60:	0b3b0b3a 	bleq	ec3b50 <__bss_end__+0xeba0a0>
 e64:	13491927 	movtne	r1, #39207	; 0x9927
 e68:	1301193c 	movwne	r1, #6460	; 0x193c
 e6c:	051e0000 	ldreq	r0, [lr, #-0]
 e70:	00134900 	andseq	r4, r3, r0, lsl #18
 e74:	00261f00 	eoreq	r1, r6, r0, lsl #30
 e78:	00001349 	andeq	r1, r0, r9, asr #6
 e7c:	00003520 	andeq	r3, r0, r0, lsr #10
 e80:	012e2100 	teqeq	lr, r0, lsl #2
 e84:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 e88:	0b3b0b3a 	bleq	ec3b78 <__bss_end__+0xeba0c8>
 e8c:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 e90:	00001301 	andeq	r1, r0, r1, lsl #6
 e94:	01110100 	tsteq	r1, r0, lsl #2
 e98:	0b130e25 	bleq	4c4734 <__bss_end__+0x4bac84>
 e9c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 ea0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 ea4:	00001710 	andeq	r1, r0, r0, lsl r7
 ea8:	0b002402 	bleq	9eb8 <__bss_end__+0x408>
 eac:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 eb0:	03000008 	movweq	r0, #8
 eb4:	0b0b0024 	bleq	2c0f4c <__bss_end__+0x2b749c>
 eb8:	0e030b3e 	vmoveq.16	d3[0], r0
 ebc:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
 ec0:	3a0e0301 	bcc	381acc <__bss_end__+0x37801c>
 ec4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 ec8:	11134919 	tstne	r3, r9, lsl r9
 ecc:	40061201 	andmi	r1, r6, r1, lsl #4
 ed0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 ed4:	00001301 	andeq	r1, r0, r1, lsl #6
 ed8:	03000505 	movweq	r0, #1285	; 0x505
 edc:	3b0b3a08 	blcc	2cf704 <__bss_end__+0x2c5c54>
 ee0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 ee4:	06000017 			; <UNDEFINED> instruction: 0x06000017
 ee8:	01018289 	smlabbeq	r1, r9, r2, r8
 eec:	13310111 	teqne	r1, #1073741828	; 0x40000004
 ef0:	8a070000 	bhi	1c0ef8 <__bss_end__+0x1b7448>
 ef4:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
 ef8:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
 efc:	15080000 	strne	r0, [r8, #-0]
 f00:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
 f04:	00130113 	andseq	r0, r3, r3, lsl r1
 f08:	00050900 	andeq	r0, r5, r0, lsl #18
 f0c:	00001349 	andeq	r1, r0, r9, asr #6
 f10:	0300340a 	movweq	r3, #1034	; 0x40a
 f14:	3b0b3a0e 	blcc	2cf754 <__bss_end__+0x2c5ca4>
 f18:	3f13490b 	svccc	0x0013490b
 f1c:	00180219 	andseq	r0, r8, r9, lsl r2
 f20:	000f0b00 	andeq	r0, pc, r0, lsl #22
 f24:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 f28:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
 f2c:	03193f01 	tsteq	r9, #1, 30
 f30:	3b0b3a0e 	blcc	2cf770 <__bss_end__+0x2c5cc0>
 f34:	3c19270b 	ldccc	7, cr2, [r9], {11}
 f38:	00000019 	andeq	r0, r0, r9, lsl r0

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	0000002c 	andeq	r0, r0, ip, lsr #32
       4:	00000048 	andeq	r0, r0, r8, asr #32
       8:	9f300002 	svcls	0x00300002
       c:	00000048 	andeq	r0, r0, r8, asr #32
      10:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
      14:	00540001 	subseq	r0, r4, r1
      18:	00000000 	andeq	r0, r0, r0
      1c:	54000000 	strpl	r0, [r0], #-0
      20:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
      24:	02000000 	andeq	r0, r0, #0
      28:	009f3500 	addseq	r3, pc, r0, lsl #10
      2c:	00000000 	andeq	r0, r0, r0
      30:	74000000 	strvc	r0, [r0], #-0
      34:	80000000 	andhi	r0, r0, r0
      38:	01000000 	mrseq	r0, (UNDEF: 0)
      3c:	00805000 	addeq	r5, r0, r0
      40:	00870000 	addeq	r0, r7, r0
      44:	00010000 	andeq	r0, r1, r0
      48:	00008c53 	andeq	r8, r0, r3, asr ip
      4c:	00009000 	andeq	r9, r0, r0
      50:	50000100 	andpl	r0, r0, r0, lsl #2
      54:	00000090 	muleq	r0, r0, r0
      58:	0000009b 	muleq	r0, fp, r0
      5c:	00530001 	subseq	r0, r3, r1
	...
      68:	1c000000 	stcne	0, cr0, [r0], {-0}
      6c:	01000000 	mrseq	r0, (UNDEF: 0)
      70:	001c5000 	andseq	r5, ip, r0
      74:	01580000 	cmpeq	r8, r0
      78:	00040000 	andeq	r0, r4, r0
      7c:	9f5001f3 	svcls	0x005001f3
	...
      8c:	00000020 	andeq	r0, r0, r0, lsr #32
      90:	20510001 	subscs	r0, r1, r1
      94:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
      98:	04000001 	streq	r0, [r0], #-1
      9c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
      a0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      a4:	00000000 	andeq	r0, r0, r0
      a8:	00001000 	andeq	r1, r0, r0
      ac:	00013800 	andeq	r3, r1, r0, lsl #16
      b0:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
      bc:	00000014 	andeq	r0, r0, r4, lsl r0
      c0:	00000038 	andeq	r0, r0, r8, lsr r0
      c4:	38550001 	ldmdacc	r5, {r0}^
      c8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
      cc:	01000001 	tsteq	r0, r1
      d0:	01385800 	teqeq	r8, r0, lsl #16
      d4:	01580000 	cmpeq	r8, r0
      d8:	00010000 	andeq	r0, r1, r0
      dc:	00000055 	andeq	r0, r0, r5, asr r0
      e0:	00000000 	andeq	r0, r0, r0
      e4:	00001800 	andeq	r1, r0, r0, lsl #16
      e8:	00013800 	andeq	r3, r1, r0, lsl #16
      ec:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
      f8:	00000024 	andeq	r0, r0, r4, lsr #32
      fc:	00000138 	andeq	r0, r0, r8, lsr r1
     100:	00550001 	subseq	r0, r5, r1
     104:	00000000 	andeq	r0, r0, r0
     108:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     10c:	2c000000 	stccs	0, cr0, [r0], {-0}
     110:	01000000 	mrseq	r0, (UNDEF: 0)
     114:	00005300 	andeq	r5, r0, r0, lsl #6
     118:	00000000 	andeq	r0, r0, r0
     11c:	00380000 	eorseq	r0, r8, r0
     120:	00580000 	subseq	r0, r8, r0
     124:	00010000 	andeq	r0, r1, r0
     128:	00005858 	andeq	r5, r0, r8, asr r8
     12c:	00013800 	andeq	r3, r1, r0, lsl #16
     130:	75000500 	strvc	r0, [r0, #-1280]	; 0x500
     134:	9f243100 	svcls	0x00243100
	...
     140:	00000038 	andeq	r0, r0, r8, lsr r0
     144:	00000040 	andeq	r0, r0, r0, asr #32
     148:	00770005 	rsbseq	r0, r7, r5
     14c:	409f1a31 	addsmi	r1, pc, r1, lsr sl	; <UNPREDICTABLE>
     150:	43000000 	movwmi	r0, #0
     154:	01000000 	mrseq	r0, (UNDEF: 0)
     158:	00435100 	subeq	r5, r3, r0, lsl #2
     15c:	01580000 	cmpeq	r8, r0
     160:	00050000 	andeq	r0, r5, r0
     164:	1a310077 	bne	c40348 <__bss_end__+0xc36898>
     168:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     16c:	00000000 	andeq	r0, r0, r0
     170:	00004400 	andeq	r4, r0, r0, lsl #8
     174:	00005800 	andeq	r5, r0, r0, lsl #16
     178:	58000100 	stmdapl	r0, {r8}
     17c:	00000058 	andeq	r0, r0, r8, asr r0
     180:	00000138 	andeq	r0, r0, r8, lsr r1
     184:	00750005 	rsbseq	r0, r5, r5
     188:	009f2431 	addseq	r2, pc, r1, lsr r4	; <UNPREDICTABLE>
     18c:	00000000 	andeq	r0, r0, r0
     190:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     194:	4c000000 	stcmi	0, cr0, [r0], {-0}
     198:	01000000 	mrseq	r0, (UNDEF: 0)
     19c:	00005300 	andeq	r5, r0, r0, lsl #6
     1a0:	00000000 	andeq	r0, r0, r0
     1a4:	00580000 	subseq	r0, r8, r0
     1a8:	00780000 	rsbseq	r0, r8, r0
     1ac:	00010000 	andeq	r0, r1, r0
     1b0:	00007858 	andeq	r7, r0, r8, asr r8
     1b4:	00013800 	andeq	r3, r1, r0, lsl #16
     1b8:	75000800 	strvc	r0, [r0, #-2048]	; 0x800
     1bc:	75243100 	strvc	r3, [r4, #-256]!	; 0x100
     1c0:	009f2200 	addseq	r2, pc, r0, lsl #4
     1c4:	00000000 	andeq	r0, r0, r0
     1c8:	64000000 	strvs	r0, [r0], #-0
     1cc:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
     1d0:	01000000 	mrseq	r0, (UNDEF: 0)
     1d4:	00785800 	rsbseq	r5, r8, r0, lsl #16
     1d8:	01380000 	teqeq	r8, r0
     1dc:	00080000 	andeq	r0, r8, r0
     1e0:	24310075 	ldrtcs	r0, [r1], #-117	; 0x75
     1e4:	9f220075 	svcls	0x00220075
	...
     1f0:	00000068 	andeq	r0, r0, r8, rrx
     1f4:	0000006c 	andeq	r0, r0, ip, rrx
     1f8:	00530001 	subseq	r0, r3, r1
     1fc:	00000000 	andeq	r0, r0, r0
     200:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
     204:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
     208:	01000000 	mrseq	r0, (UNDEF: 0)
     20c:	00985800 	addseq	r5, r8, r0, lsl #16
     210:	01380000 	teqeq	r8, r0
     214:	00050000 	andeq	r0, r5, r0
     218:	24320075 	ldrtcs	r0, [r2], #-117	; 0x75
     21c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     220:	00000000 	andeq	r0, r0, r0
     224:	00008400 	andeq	r8, r0, r0, lsl #8
     228:	00009800 	andeq	r9, r0, r0, lsl #16
     22c:	58000100 	stmdapl	r0, {r8}
     230:	00000098 	muleq	r0, r8, r0
     234:	00000138 	andeq	r0, r0, r8, lsr r1
     238:	00750005 	rsbseq	r0, r5, r5
     23c:	009f2432 	addseq	r2, pc, r2, lsr r4	; <UNPREDICTABLE>
     240:	00000000 	andeq	r0, r0, r0
     244:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
     248:	8c000000 	stchi	0, cr0, [r0], {-0}
     24c:	01000000 	mrseq	r0, (UNDEF: 0)
     250:	00005300 	andeq	r5, r0, r0, lsl #6
     254:	00000000 	andeq	r0, r0, r0
     258:	00980000 	addseq	r0, r8, r0
     25c:	00b80000 	adcseq	r0, r8, r0
     260:	00010000 	andeq	r0, r1, r0
     264:	0000b858 	andeq	fp, r0, r8, asr r8
     268:	00013800 	andeq	r3, r1, r0, lsl #16
     26c:	75000800 	strvc	r0, [r0, #-2048]	; 0x800
     270:	75243200 	strvc	r3, [r4, #-512]!	; 0x200
     274:	009f2200 	addseq	r2, pc, r0, lsl #4
     278:	00000000 	andeq	r0, r0, r0
     27c:	a4000000 	strge	r0, [r0], #-0
     280:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
     284:	01000000 	mrseq	r0, (UNDEF: 0)
     288:	00b85800 	adcseq	r5, r8, r0, lsl #16
     28c:	01380000 	teqeq	r8, r0
     290:	00080000 	andeq	r0, r8, r0
     294:	24320075 	ldrtcs	r0, [r2], #-117	; 0x75
     298:	9f220075 	svcls	0x00220075
	...
     2a4:	000000a8 	andeq	r0, r0, r8, lsr #1
     2a8:	000000ac 	andeq	r0, r0, ip, lsr #1
     2ac:	00530001 	subseq	r0, r3, r1
     2b0:	00000000 	andeq	r0, r0, r0
     2b4:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
     2b8:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
     2bc:	01000000 	mrseq	r0, (UNDEF: 0)
     2c0:	00d85800 	sbcseq	r5, r8, r0, lsl #16
     2c4:	01380000 	teqeq	r8, r0
     2c8:	000a0000 	andeq	r0, sl, r0
     2cc:	24320075 	ldrtcs	r0, [r2], #-117	; 0x75
     2d0:	24310075 	ldrtcs	r0, [r1], #-117	; 0x75
     2d4:	00009f22 	andeq	r9, r0, r2, lsr #30
     2d8:	00000000 	andeq	r0, r0, r0
     2dc:	00c40000 	sbceq	r0, r4, r0
     2e0:	00d80000 	sbcseq	r0, r8, r0
     2e4:	00010000 	andeq	r0, r1, r0
     2e8:	0000d858 	andeq	sp, r0, r8, asr r8
     2ec:	00013800 	andeq	r3, r1, r0, lsl #16
     2f0:	75000a00 	strvc	r0, [r0, #-2560]	; 0xa00
     2f4:	75243200 	strvc	r3, [r4, #-512]!	; 0x200
     2f8:	22243100 	eorcs	r3, r4, #0, 2
     2fc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     300:	00000000 	andeq	r0, r0, r0
     304:	0000c800 	andeq	ip, r0, r0, lsl #16
     308:	0000cc00 	andeq	ip, r0, r0, lsl #24
     30c:	53000100 	movwpl	r0, #256	; 0x100
	...
     318:	000000d8 	ldrdeq	r0, [r0], -r8
     31c:	000000f8 	strdeq	r0, [r0], -r8
     320:	f8580001 			; <UNDEFINED> instruction: 0xf8580001
     324:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     328:	0d000001 	stceq	0, cr0, [r0, #-4]
     32c:	32007500 	andcc	r7, r0, #0, 10
     330:	31007524 	tstcc	r0, r4, lsr #10
     334:	00752224 	rsbseq	r2, r5, r4, lsr #4
     338:	00009f22 	andeq	r9, r0, r2, lsr #30
     33c:	00000000 	andeq	r0, r0, r0
     340:	00e40000 	rsceq	r0, r4, r0
     344:	00f80000 	rscseq	r0, r8, r0
     348:	00010000 	andeq	r0, r1, r0
     34c:	0000f858 	andeq	pc, r0, r8, asr r8	; <UNPREDICTABLE>
     350:	00013800 	andeq	r3, r1, r0, lsl #16
     354:	75000d00 	strvc	r0, [r0, #-3328]	; 0xd00
     358:	75243200 	strvc	r3, [r4, #-512]!	; 0x200
     35c:	22243100 	eorcs	r3, r4, #0, 2
     360:	9f220075 	svcls	0x00220075
	...
     36c:	000000e8 	andeq	r0, r0, r8, ror #1
     370:	000000ec 	andeq	r0, r0, ip, ror #1
     374:	00530001 	subseq	r0, r3, r1
     378:	00000000 	andeq	r0, r0, r0
     37c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
     380:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     384:	01000001 	tsteq	r0, r1
     388:	01185800 	tsteq	r8, r0, lsl #16
     38c:	01380000 	teqeq	r8, r0
     390:	00050000 	andeq	r0, r5, r0
     394:	24330075 	ldrtcs	r0, [r3], #-117	; 0x75
     398:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     39c:	00000000 	andeq	r0, r0, r0
     3a0:	00010400 	andeq	r0, r1, r0, lsl #8
     3a4:	00011800 	andeq	r1, r1, r0, lsl #16
     3a8:	58000100 	stmdapl	r0, {r8}
     3ac:	00000118 	andeq	r0, r0, r8, lsl r1
     3b0:	00000138 	andeq	r0, r0, r8, lsr r1
     3b4:	00750005 	rsbseq	r0, r5, r5
     3b8:	009f2433 	addseq	r2, pc, r3, lsr r4	; <UNPREDICTABLE>
     3bc:	00000000 	andeq	r0, r0, r0
     3c0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     3c4:	0c000001 	stceq	0, cr0, [r0], {1}
     3c8:	01000001 	tsteq	r0, r1
     3cc:	00005300 	andeq	r5, r0, r0, lsl #6
     3d0:	00000000 	andeq	r0, r0, r0
     3d4:	01180000 	tsteq	r8, r0
     3d8:	01200000 	teqeq	r0, r0
     3dc:	00060000 	andeq	r0, r6, r0
     3e0:	80080077 	andhi	r0, r8, r7, ror r0
     3e4:	01209f1a 	teqeq	r0, sl, lsl pc
     3e8:	01230000 	teqeq	r3, r0
     3ec:	00010000 	andeq	r0, r1, r0
     3f0:	00012351 	andeq	r2, r1, r1, asr r3
     3f4:	00015800 	andeq	r5, r1, r0, lsl #16
     3f8:	77000600 	strvc	r0, [r0, -r0, lsl #12]
     3fc:	1a800800 	bne	fe002404 <__bss_end__+0xfdff8954>
     400:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     404:	00000000 	andeq	r0, r0, r0
     408:	00012800 	andeq	r2, r1, r0, lsl #16
     40c:	00012c00 	andeq	r2, r1, r0, lsl #24
     410:	53000100 	movwpl	r0, #256	; 0x100
	...
     41c:	00000148 	andeq	r0, r0, r8, asr #2
     420:	0000014c 	andeq	r0, r0, ip, asr #2
     424:	00530001 	subseq	r0, r3, r1
     428:	00000000 	andeq	r0, r0, r0
     42c:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     430:	6f000001 	svcvs	0x00000001
     434:	01000001 	tsteq	r0, r1
     438:	016f5000 	cmneq	pc, r0
     43c:	01d40000 	bicseq	r0, r4, r0
     440:	00010000 	andeq	r0, r1, r0
     444:	0001d459 	andeq	sp, r1, r9, asr r4
     448:	00031000 	andeq	r1, r3, r0
     44c:	f3000400 	vshl.u8	d0, d0, d0
     450:	109f5001 	addsne	r5, pc, r1
     454:	18000003 	stmdane	r0, {r0, r1}
     458:	01000003 	tsteq	r0, r3
     45c:	03185900 	tsteq	r8, #0, 18
     460:	03200000 	teqeq	r0, #0
     464:	00040000 	andeq	r0, r4, r0
     468:	9f5001f3 	svcls	0x005001f3
	...
     474:	00000158 	andeq	r0, r0, r8, asr r1
     478:	0000016f 	andeq	r0, r0, pc, ror #2
     47c:	6f510001 	svcvs	0x00510001
     480:	20000001 	andcs	r0, r0, r1
     484:	01000003 	tsteq	r0, r3
     488:	00005600 	andeq	r5, r0, r0, lsl #12
     48c:	00000000 	andeq	r0, r0, r0
     490:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
     494:	029c0000 	addseq	r0, ip, #0
     498:	00010000 	andeq	r0, r1, r0
     49c:	00000058 	andeq	r0, r0, r8, asr r0
     4a0:	00000000 	andeq	r0, r0, r0
     4a4:	0001b000 	andeq	fp, r1, r0
     4a8:	0002d400 	andeq	sp, r2, r0, lsl #8
     4ac:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     4b8:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
     4bc:	000002d4 	ldrdeq	r0, [r0], -r4
     4c0:	00740005 	rsbseq	r0, r4, r5
     4c4:	009f2531 	addseq	r2, pc, r1, lsr r5	; <UNPREDICTABLE>
     4c8:	00000000 	andeq	r0, r0, r0
     4cc:	b0000000 	andlt	r0, r0, r0
     4d0:	d4000001 	strle	r0, [r0], #-1
     4d4:	02000001 	andeq	r0, r0, #1
     4d8:	d49f3000 	ldrle	r3, [pc], #0	; 4e0 <_start-0x7b20>
     4dc:	10000001 	andne	r0, r0, r1
     4e0:	01000003 	tsteq	r0, r3
     4e4:	03185900 	tsteq	r8, #0, 18
     4e8:	03200000 	teqeq	r0, #0
     4ec:	00010000 	andeq	r0, r1, r0
     4f0:	00000059 	andeq	r0, r0, r9, asr r0
     4f4:	00000000 	andeq	r0, r0, r0
     4f8:	00016c00 	andeq	r6, r1, r0, lsl #24
     4fc:	00016f00 	andeq	r6, r1, r0, lsl #30
     500:	51000100 	mrspl	r0, (UNDEF: 16)
     504:	0000016f 	andeq	r0, r0, pc, ror #2
     508:	00000320 	andeq	r0, r0, r0, lsr #6
     50c:	00560001 	subseq	r0, r6, r1
     510:	00000000 	andeq	r0, r0, r0
     514:	74000000 	strvc	r0, [r0], #-0
     518:	b0000001 	andlt	r0, r0, r1
     51c:	01000001 	tsteq	r0, r1
     520:	03105400 	tsteq	r0, #0, 8
     524:	03180000 	tsteq	r8, #0
     528:	00010000 	andeq	r0, r1, r0
     52c:	00000054 	andeq	r0, r0, r4, asr r0
     530:	00000000 	andeq	r0, r0, r0
     534:	0001ac00 	andeq	sl, r1, r0, lsl #24
     538:	0001c800 	andeq	ip, r1, r0, lsl #16
     53c:	58000100 	stmdapl	r0, {r8}
	...
     548:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
     54c:	000001cf 	andeq	r0, r0, pc, asr #3
     550:	cf520001 	svcgt	0x00520001
     554:	d4000001 	strle	r0, [r0], #-1
     558:	08000002 	stmdaeq	r0, {r1}
     55c:	31007400 	tstcc	r0, r0, lsl #8
     560:	22007425 	andcs	r7, r0, #620756992	; 0x25000000
     564:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     568:	00000000 	andeq	r0, r0, r0
     56c:	0001b400 	andeq	fp, r1, r0, lsl #8
     570:	0001c800 	andeq	ip, r1, r0, lsl #16
     574:	58000100 	stmdapl	r0, {r8}
	...
     580:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     584:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     588:	00530001 	subseq	r0, r3, r1
     58c:	00000000 	andeq	r0, r0, r0
     590:	d4000000 	strle	r0, [r0], #-0
     594:	d4000001 	strle	r0, [r0], #-1
     598:	01000002 	tsteq	r0, r2
     59c:	00005400 	andeq	r5, r0, r0, lsl #8
     5a0:	00000000 	andeq	r0, r0, r0
     5a4:	01d40000 	bicseq	r0, r4, r0
     5a8:	01e80000 	mvneq	r0, r0
     5ac:	00010000 	andeq	r0, r1, r0
     5b0:	00000058 	andeq	r0, r0, r8, asr r0
     5b4:	00000000 	andeq	r0, r0, r0
     5b8:	0001d800 	andeq	sp, r1, r0, lsl #16
     5bc:	0001dc00 	andeq	sp, r1, r0, lsl #24
     5c0:	53000100 	movwpl	r0, #256	; 0x100
	...
     5cc:	000001f8 	strdeq	r0, [r0], -r8
     5d0:	000002d4 	ldrdeq	r0, [r0], -r4
     5d4:	00540001 	subseq	r0, r4, r1
     5d8:	00000000 	andeq	r0, r0, r0
     5dc:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
     5e0:	0c000001 	stceq	0, cr0, [r0], {1}
     5e4:	01000002 	tsteq	r0, r2
     5e8:	00005800 	andeq	r5, r0, r0, lsl #16
     5ec:	00000000 	andeq	r0, r0, r0
     5f0:	01fc0000 	mvnseq	r0, r0
     5f4:	02000000 	andeq	r0, r0, #0
     5f8:	00010000 	andeq	r0, r1, r0
     5fc:	00000053 	andeq	r0, r0, r3, asr r0
     600:	00000000 	andeq	r0, r0, r0
     604:	00021c00 	andeq	r1, r2, r0, lsl #24
     608:	0002d400 	andeq	sp, r2, r0, lsl #8
     60c:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     618:	0000021c 	andeq	r0, r0, ip, lsl r2
     61c:	00000230 	andeq	r0, r0, r0, lsr r2
     620:	00580001 	subseq	r0, r8, r1
     624:	00000000 	andeq	r0, r0, r0
     628:	20000000 	andcs	r0, r0, r0
     62c:	24000002 	strcs	r0, [r0], #-2
     630:	01000002 	tsteq	r0, r2
     634:	00005300 	andeq	r5, r0, r0, lsl #6
     638:	00000000 	andeq	r0, r0, r0
     63c:	02400000 	subeq	r0, r0, #0
     640:	02d40000 	sbcseq	r0, r4, #0
     644:	00010000 	andeq	r0, r1, r0
     648:	00000054 	andeq	r0, r0, r4, asr r0
     64c:	00000000 	andeq	r0, r0, r0
     650:	00024000 	andeq	r4, r2, r0
     654:	00025400 	andeq	r5, r2, r0, lsl #8
     658:	58000100 	stmdapl	r0, {r8}
	...
     664:	00000244 	andeq	r0, r0, r4, asr #4
     668:	00000248 	andeq	r0, r0, r8, asr #4
     66c:	00530001 	subseq	r0, r3, r1
     670:	00000000 	andeq	r0, r0, r0
     674:	64000000 	strvs	r0, [r0], #-0
     678:	d4000002 	strle	r0, [r0], #-2
     67c:	01000002 	tsteq	r0, r2
     680:	00005400 	andeq	r5, r0, r0, lsl #8
     684:	00000000 	andeq	r0, r0, r0
     688:	02640000 	rsbeq	r0, r4, #0
     68c:	02780000 	rsbseq	r0, r8, #0
     690:	00010000 	andeq	r0, r1, r0
     694:	00000058 	andeq	r0, r0, r8, asr r0
     698:	00000000 	andeq	r0, r0, r0
     69c:	00026800 	andeq	r6, r2, r0, lsl #16
     6a0:	00026c00 	andeq	r6, r2, r0, lsl #24
     6a4:	53000100 	movwpl	r0, #256	; 0x100
	...
     6b0:	00000288 	andeq	r0, r0, r8, lsl #5
     6b4:	000002d4 	ldrdeq	r0, [r0], -r4
     6b8:	00540001 	subseq	r0, r4, r1
     6bc:	00000000 	andeq	r0, r0, r0
     6c0:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
     6c4:	9c000002 	stcls	0, cr0, [r0], {2}
     6c8:	01000002 	tsteq	r0, r2
     6cc:	00005800 	andeq	r5, r0, r0, lsl #16
     6d0:	00000000 	andeq	r0, r0, r0
     6d4:	028c0000 	addeq	r0, ip, #0
     6d8:	02900000 	addseq	r0, r0, #0
     6dc:	00010000 	andeq	r0, r1, r0
     6e0:	00000053 	andeq	r0, r0, r3, asr r0
     6e4:	00000000 	andeq	r0, r0, r0
     6e8:	0002ac00 	andeq	sl, r2, r0, lsl #24
     6ec:	0002d400 	andeq	sp, r2, r0, lsl #8
     6f0:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     6fc:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
     700:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
     704:	00530001 	subseq	r0, r3, r1
     708:	00000000 	andeq	r0, r0, r0
     70c:	cc000000 	stcgt	0, cr0, [r0], {-0}
     710:	10000002 	andne	r0, r0, r2
     714:	02000003 	andeq	r0, r0, #3
     718:	189f3000 	ldmne	pc, {ip, sp}	; <UNPREDICTABLE>
     71c:	20000003 	andcs	r0, r0, r3
     720:	02000003 	andeq	r0, r0, #3
     724:	009f3000 	addseq	r3, pc, r0
     728:	00000000 	andeq	r0, r0, r0
     72c:	cc000000 	stcgt	0, cr0, [r0], {-0}
     730:	10000002 	andne	r0, r0, r2
     734:	01000003 	tsteq	r0, r3
     738:	03185500 	tsteq	r8, #0, 10
     73c:	03200000 	teqeq	r0, #0
     740:	00010000 	andeq	r0, r1, r0
     744:	00000055 	andeq	r0, r0, r5, asr r0
     748:	00000000 	andeq	r0, r0, r0
     74c:	0002d400 	andeq	sp, r2, r0, lsl #8
     750:	00031000 	andeq	r1, r3, r0
     754:	54000100 	strpl	r0, [r0], #-256	; 0x100
     758:	00000318 	andeq	r0, r0, r8, lsl r3
     75c:	00000320 	andeq	r0, r0, r0, lsr #6
     760:	00540001 	subseq	r0, r4, r1
     764:	00000000 	andeq	r0, r0, r0
     768:	20000000 	andcs	r0, r0, r0
     76c:	40000003 	andmi	r0, r0, r3
     770:	01000003 	tsteq	r0, r3
     774:	03405000 	movteq	r5, #0
     778:	03540000 	cmpeq	r4, #0
     77c:	00010000 	andeq	r0, r1, r0
     780:	00035458 	andeq	r5, r3, r8, asr r4
     784:	00036400 	andeq	r6, r3, r0, lsl #8
     788:	50000100 	andpl	r0, r0, r0, lsl #2
     78c:	00000364 	andeq	r0, r0, r4, ror #6
     790:	000003ac 	andeq	r0, r0, ip, lsr #7
     794:	00580001 	subseq	r0, r8, r1
     798:	00000000 	andeq	r0, r0, r0
     79c:	20000000 	andcs	r0, r0, r0
     7a0:	44000003 	strmi	r0, [r0], #-3
     7a4:	01000003 	tsteq	r0, r3
     7a8:	03445100 	movteq	r5, #16640	; 0x4100
     7ac:	03540000 	cmpeq	r4, #0
     7b0:	00010000 	andeq	r0, r1, r0
     7b4:	00035456 	andeq	r5, r3, r6, asr r4
     7b8:	00036400 	andeq	r6, r3, r0, lsl #8
     7bc:	51000100 	mrspl	r0, (UNDEF: 16)
     7c0:	00000364 	andeq	r0, r0, r4, ror #6
     7c4:	000003ac 	andeq	r0, r0, ip, lsr #7
     7c8:	00560001 	subseq	r0, r6, r1
     7cc:	00000000 	andeq	r0, r0, r0
     7d0:	20000000 	andcs	r0, r0, r0
     7d4:	48000003 	stmdami	r0, {r0, r1}
     7d8:	01000003 	tsteq	r0, r3
     7dc:	03485200 	movteq	r5, #33280	; 0x8200
     7e0:	03540000 	cmpeq	r4, #0
     7e4:	00040000 	andeq	r0, r4, r0
     7e8:	9f5201f3 	svcls	0x005201f3
     7ec:	00000354 	andeq	r0, r0, r4, asr r3
     7f0:	00000364 	andeq	r0, r0, r4, ror #6
     7f4:	64520001 	ldrbvs	r0, [r2], #-1
     7f8:	ac000003 	stcge	0, cr0, [r0], {3}
     7fc:	03000003 	movweq	r0, #3
     800:	9f017700 	svcls	0x00017700
	...
     80c:	00000320 	andeq	r0, r0, r0, lsr #6
     810:	0000034c 	andeq	r0, r0, ip, asr #6
     814:	4c530001 	mrrcmi	0, 0, r0, r3, cr1
     818:	54000003 	strpl	r0, [r0], #-3
     81c:	04000003 	streq	r0, [r0], #-3
     820:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
     824:	0003549f 	muleq	r3, pc, r4	; <UNPREDICTABLE>
     828:	00036400 	andeq	r6, r3, r0, lsl #8
     82c:	53000100 	movwpl	r0, #256	; 0x100
     830:	00000364 	andeq	r0, r0, r4, ror #6
     834:	000003ac 	andeq	r0, r0, ip, lsr #7
     838:	01f30004 	mvnseq	r0, r4
     83c:	00009f53 	andeq	r9, r0, r3, asr pc
     840:	00000000 	andeq	r0, r0, r0
     844:	035c0000 	cmpeq	ip, #0
     848:	03640000 	cmneq	r4, #0
     84c:	00020000 	andeq	r0, r2, r0
     850:	03649f30 	cmneq	r4, #48, 30	; 0xc0
     854:	03ac0000 			; <UNDEFINED> instruction: 0x03ac0000
     858:	00010000 	andeq	r0, r1, r0
     85c:	00000054 	andeq	r0, r0, r4, asr r0
     860:	00000000 	andeq	r0, r0, r0
     864:	00037400 	andeq	r7, r3, r0, lsl #8
     868:	00038400 	andeq	r8, r3, r0, lsl #8
     86c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     878:	000003ac 	andeq	r0, r0, ip, lsr #7
     87c:	000003c8 	andeq	r0, r0, r8, asr #7
     880:	c8500001 	ldmdagt	r0, {r0}^
     884:	dc000003 	stcle	0, cr0, [r0], {3}
     888:	01000003 	tsteq	r0, r3
     88c:	03dc5700 	bicseq	r5, ip, #0, 14
     890:	03ec0000 	mvneq	r0, #0
     894:	00010000 	andeq	r0, r1, r0
     898:	0003ec50 	andeq	lr, r3, r0, asr ip
     89c:	00042400 	andeq	r2, r4, r0, lsl #8
     8a0:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
     8ac:	000003ac 	andeq	r0, r0, ip, lsr #7
     8b0:	000003cc 	andeq	r0, r0, ip, asr #7
     8b4:	cc510001 	mrrcgt	0, 0, r0, r1, cr1
     8b8:	dc000003 	stcle	0, cr0, [r0], {3}
     8bc:	01000003 	tsteq	r0, r3
     8c0:	03dc5500 	bicseq	r5, ip, #0, 10
     8c4:	03ec0000 	mvneq	r0, #0
     8c8:	00010000 	andeq	r0, r1, r0
     8cc:	0003ec51 	andeq	lr, r3, r1, asr ip
     8d0:	00042400 	andeq	r2, r4, r0, lsl #8
     8d4:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
     8e0:	000003ac 	andeq	r0, r0, ip, lsr #7
     8e4:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     8e8:	d0520001 	subsle	r0, r2, r1
     8ec:	dc000003 	stcle	0, cr0, [r0], {3}
     8f0:	04000003 	streq	r0, [r0], #-3
     8f4:	5201f300 	andpl	pc, r1, #0, 6
     8f8:	0003dc9f 	muleq	r3, pc, ip	; <UNPREDICTABLE>
     8fc:	0003ec00 	andeq	lr, r3, r0, lsl #24
     900:	52000100 	andpl	r0, r0, #0, 2
     904:	000003ec 	andeq	r0, r0, ip, ror #7
     908:	00000424 	andeq	r0, r0, r4, lsr #8
     90c:	01760003 	cmneq	r6, r3
     910:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     914:	00000000 	andeq	r0, r0, r0
     918:	0003ac00 	andeq	sl, r3, r0, lsl #24
     91c:	0003d400 	andeq	sp, r3, r0, lsl #8
     920:	53000100 	movwpl	r0, #256	; 0x100
     924:	000003d4 	ldrdeq	r0, [r0], -r4
     928:	000003dc 	ldrdeq	r0, [r0], -ip
     92c:	dc580001 	mrrcle	0, 0, r0, r8, cr1
     930:	ec000003 	stc	0, cr0, [r0], {3}
     934:	01000003 	tsteq	r0, r3
     938:	03ec5300 	mvneq	r5, #0, 6
     93c:	04240000 	strteq	r0, [r4], #-0
     940:	00010000 	andeq	r0, r1, r0
     944:	00000058 	andeq	r0, r0, r8, asr r0
     948:	00000000 	andeq	r0, r0, r0
     94c:	0003e400 	andeq	lr, r3, r0, lsl #8
     950:	0003ec00 	andeq	lr, r3, r0, lsl #24
     954:	30000200 	andcc	r0, r0, r0, lsl #4
     958:	0003ec9f 	muleq	r3, pc, ip	; <UNPREDICTABLE>
     95c:	00042400 	andeq	r2, r4, r0, lsl #8
     960:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     96c:	00000424 	andeq	r0, r0, r4, lsr #8
     970:	00000443 	andeq	r0, r0, r3, asr #8
     974:	43510001 	cmpmi	r1, #1
     978:	d4000004 	strle	r0, [r0], #-4
     97c:	04000004 	streq	r0, [r0], #-4
     980:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     984:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     988:	00000000 	andeq	r0, r0, r0
     98c:	00042400 	andeq	r2, r4, r0, lsl #8
     990:	00044300 	andeq	r4, r4, r0, lsl #6
     994:	52000100 	andpl	r0, r0, #0, 2
     998:	00000443 	andeq	r0, r0, r3, asr #8
     99c:	000004d4 	ldrdeq	r0, [r0], -r4
     9a0:	01f30004 	mvnseq	r0, r4
     9a4:	00009f52 	andeq	r9, r0, r2, asr pc
     9a8:	00000000 	andeq	r0, r0, r0
     9ac:	04240000 	strteq	r0, [r4], #-0
     9b0:	04430000 	strbeq	r0, [r3], #-0
     9b4:	00010000 	andeq	r0, r1, r0
     9b8:	00044353 	andeq	r4, r4, r3, asr r3
     9bc:	0004d400 	andeq	sp, r4, r0, lsl #8
     9c0:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
     9cc:	00000458 	andeq	r0, r0, r8, asr r4
     9d0:	000004a0 	andeq	r0, r0, r0, lsr #9
     9d4:	a0520001 	subsge	r0, r2, r1
     9d8:	ac000004 	stcge	0, cr0, [r0], {4}
     9dc:	06000004 	streq	r0, [r0], -r4
     9e0:	76007500 	strvc	r7, [r0], -r0, lsl #10
     9e4:	ac9f1e00 	ldcge	14, cr1, [pc], {0}
     9e8:	d4000004 	strle	r0, [r0], #-4
     9ec:	01000004 	tsteq	r0, r4
     9f0:	00005200 	andeq	r5, r0, r0, lsl #4
     9f4:	00000000 	andeq	r0, r0, r0
     9f8:	04d40000 	ldrbeq	r0, [r4], #0
     9fc:	04df0000 	ldrbeq	r0, [pc], #0	; a04 <_start-0x75fc>
     a00:	00010000 	andeq	r0, r1, r0
     a04:	0004df50 	andeq	sp, r4, r0, asr pc
     a08:	00050c00 	andeq	r0, r5, r0, lsl #24
     a0c:	f3000400 	vshl.u8	d0, d0, d0
     a10:	009f5001 	addseq	r5, pc, r1
     a14:	00000000 	andeq	r0, r0, r0
     a18:	e0000000 	and	r0, r0, r0
     a1c:	ec000004 	stc	0, cr0, [r0], {4}
     a20:	01000004 	tsteq	r0, r4
     a24:	00005000 	andeq	r5, r0, r0
     a28:	00000000 	andeq	r0, r0, r0
     a2c:	050c0000 	streq	r0, [ip, #-0]
     a30:	051c0000 	ldreq	r0, [ip, #-0]
     a34:	00010000 	andeq	r0, r1, r0
     a38:	00051c50 	andeq	r1, r5, r0, asr ip
     a3c:	00053800 	andeq	r3, r5, r0, lsl #16
     a40:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
     a4c:	0000050c 	andeq	r0, r0, ip, lsl #10
     a50:	0000051c 	andeq	r0, r0, ip, lsl r5
     a54:	1c510001 	mrrcne	0, 0, r0, r1, cr1
     a58:	38000005 	stmdacc	r0, {r0, r2}
     a5c:	01000005 	tsteq	r0, r5
     a60:	00005400 	andeq	r5, r0, r0, lsl #8
     a64:	00000000 	andeq	r0, r0, r0
     a68:	05380000 	ldreq	r0, [r8, #-0]!
     a6c:	05540000 	ldrbeq	r0, [r4, #-0]
     a70:	00010000 	andeq	r0, r1, r0
     a74:	00055450 	andeq	r5, r5, r0, asr r4
     a78:	0005a000 	andeq	sl, r5, r0
     a7c:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     a80:	000005a0 	andeq	r0, r0, r0, lsr #11
     a84:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
     a88:	01f30004 	mvnseq	r0, r4
     a8c:	00009f50 	andeq	r9, r0, r0, asr pc
     a90:	00000000 	andeq	r0, r0, r0
     a94:	05640000 	strbeq	r0, [r4, #-0]!
     a98:	05740000 	ldrbeq	r0, [r4, #-0]!
     a9c:	00010000 	andeq	r0, r1, r0
     aa0:	00057450 	andeq	r7, r5, r0, asr r4
     aa4:	00058800 	andeq	r8, r5, r0, lsl #16
     aa8:	54000100 	strpl	r0, [r0], #-256	; 0x100
     aac:	00000588 	andeq	r0, r0, r8, lsl #11
     ab0:	0000058c 	andeq	r0, r0, ip, lsl #11
     ab4:	8c500001 	mrrchi	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     ab8:	a0000005 	andge	r0, r0, r5
     abc:	01000005 	tsteq	r0, r5
     ac0:	05a05400 	streq	r5, [r0, #1024]!	; 0x400
     ac4:	05b80000 	ldreq	r0, [r8, #0]!
     ac8:	00010000 	andeq	r0, r1, r0
     acc:	00000050 	andeq	r0, r0, r0, asr r0
     ad0:	00000000 	andeq	r0, r0, r0
     ad4:	0005b800 	andeq	fp, r5, r0, lsl #16
     ad8:	0005cb00 	andeq	ip, r5, r0, lsl #22
     adc:	50000100 	andpl	r0, r0, r0, lsl #2
     ae0:	000005cb 	andeq	r0, r0, fp, asr #11
     ae4:	00000600 	andeq	r0, r0, r0, lsl #12
     ae8:	01f30004 	mvnseq	r0, r4
     aec:	00009f50 	andeq	r9, r0, r0, asr pc
     af0:	00000000 	andeq	r0, r0, r0
     af4:	05b80000 	ldreq	r0, [r8, #0]!
     af8:	05cb0000 	strbeq	r0, [fp]
     afc:	00010000 	andeq	r0, r1, r0
     b00:	0005cb51 	andeq	ip, r5, r1, asr fp
     b04:	00060000 	andeq	r0, r6, r0
     b08:	f3000400 	vshl.u8	d0, d0, d0
     b0c:	009f5101 	addseq	r5, pc, r1, lsl #2
     b10:	00000000 	andeq	r0, r0, r0
     b14:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
     b18:	cb000005 	blgt	b34 <_start-0x74cc>
     b1c:	01000005 	tsteq	r0, r5
     b20:	05cb5200 	strbeq	r5, [fp, #512]	; 0x200
     b24:	06000000 	streq	r0, [r0], -r0
     b28:	00040000 	andeq	r0, r4, r0
     b2c:	9f5201f3 	svcls	0x005201f3
	...
     b38:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
     b3c:	000005cb 	andeq	r0, r0, fp, asr #11
     b40:	cb530001 	blgt	14c0b4c <__bss_end__+0x14b709c>
     b44:	00000005 	andeq	r0, r0, r5
     b48:	04000006 	streq	r0, [r0], #-6
     b4c:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
     b50:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     b54:	00000000 	andeq	r0, r0, r0
     b58:	0005cc00 	andeq	ip, r5, r0, lsl #24
     b5c:	0005d800 	andeq	sp, r5, r0, lsl #16
     b60:	50000100 	andpl	r0, r0, r0, lsl #2
     b64:	000005ec 	andeq	r0, r0, ip, ror #11
     b68:	00000600 	andeq	r0, r0, r0, lsl #12
     b6c:	00500001 	subseq	r0, r0, r1
     b70:	00000000 	andeq	r0, r0, r0
     b74:	2c000000 	stccs	0, cr0, [r0], {-0}
     b78:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     b7c:	01000000 	mrseq	r0, (UNDEF: 0)
     b80:	00385000 	eorseq	r5, r8, r0
     b84:	00480000 	subeq	r0, r8, r0
     b88:	00010000 	andeq	r0, r1, r0
     b8c:	00004855 	andeq	r4, r0, r5, asr r8
     b90:	00005800 	andeq	r5, r0, r0, lsl #16
     b94:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     ba4:	00000010 	andeq	r0, r0, r0, lsl r0
     ba8:	10500001 	subsne	r0, r0, r1
     bac:	34000000 	strcc	r0, [r0], #-0
     bb0:	01000000 	mrseq	r0, (UNDEF: 0)
     bb4:	00005400 	andeq	r5, r0, r0, lsl #8
	...
     bc0:	00040000 	andeq	r0, r4, r0
     bc4:	00010000 	andeq	r0, r1, r0
     bc8:	00000450 	andeq	r0, r0, r0, asr r4
     bcc:	00000c00 	andeq	r0, r0, r0, lsl #24
     bd0:	70000300 	andvc	r0, r0, r0, lsl #6
     bd4:	000c9f30 	andeq	r9, ip, r0, lsr pc
     bd8:	00140000 	andseq	r0, r4, r0
     bdc:	00040000 	andeq	r0, r4, r0
     be0:	9f5001f3 	svcls	0x005001f3
	...
     bec:	00000014 	andeq	r0, r0, r4, lsl r0
     bf0:	00000020 	andeq	r0, r0, r0, lsr #32
     bf4:	20500001 	subscs	r0, r0, r1
     bf8:	2c000000 	stccs	0, cr0, [r0], {-0}
     bfc:	03000000 	movweq	r0, #0
     c00:	9f017000 	svcls	0x00017000
     c04:	0000002c 	andeq	r0, r0, ip, lsr #32
     c08:	00000040 	andeq	r0, r0, r0, asr #32
     c0c:	00500001 	subseq	r0, r0, r1
     c10:	00000000 	andeq	r0, r0, r0
     c14:	14000000 	strne	r0, [r0], #-0
     c18:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     c1c:	01000000 	mrseq	r0, (UNDEF: 0)
     c20:	00185100 	andseq	r5, r8, r0, lsl #2
     c24:	00400000 	subeq	r0, r0, r0
     c28:	00040000 	andeq	r0, r4, r0
     c2c:	9f5101f3 	svcls	0x005101f3
	...
     c38:	00000040 	andeq	r0, r0, r0, asr #32
     c3c:	00000060 	andeq	r0, r0, r0, rrx
     c40:	60500001 	subsvs	r0, r0, r1
     c44:	6c000000 	stcvs	0, cr0, [r0], {-0}
     c48:	03000000 	movweq	r0, #0
     c4c:	9f017100 	svcls	0x00017100
     c50:	0000006c 	andeq	r0, r0, ip, rrx
     c54:	00000074 	andeq	r0, r0, r4, ror r0
     c58:	74510001 	ldrbvc	r0, [r1], #-1
     c5c:	80000000 	andhi	r0, r0, r0
     c60:	03000000 	movweq	r0, #0
     c64:	9f017100 	svcls	0x00017100
	...
     c70:	00000040 	andeq	r0, r0, r0, asr #32
     c74:	00000050 	andeq	r0, r0, r0, asr r0
     c78:	50510001 	subspl	r0, r1, r1
     c7c:	80000000 	andhi	r0, r0, r0
     c80:	04000000 	streq	r0, [r0], #-0
     c84:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     c88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     c8c:	00000000 	andeq	r0, r0, r0
     c90:	00004000 	andeq	r4, r0, r0
     c94:	00005800 	andeq	r5, r0, r0, lsl #16
     c98:	52000100 	andpl	r0, r0, #0, 2
     c9c:	00000058 	andeq	r0, r0, r8, asr r0
     ca0:	00000064 	andeq	r0, r0, r4, rrx
     ca4:	64520001 	ldrbvs	r0, [r2], #-1
     ca8:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     cac:	03000000 	movweq	r0, #0
     cb0:	9f017200 	svcls	0x00017200
     cb4:	00000068 	andeq	r0, r0, r8, rrx
     cb8:	00000080 	andeq	r0, r0, r0, lsl #1
     cbc:	00520001 	subseq	r0, r2, r1
     cc0:	00000000 	andeq	r0, r0, r0
     cc4:	40000000 	andmi	r0, r0, r0
     cc8:	54000000 	strpl	r0, [r0], #-0
     ccc:	01000000 	mrseq	r0, (UNDEF: 0)
     cd0:	00545300 	subseq	r5, r4, r0, lsl #6
     cd4:	00780000 	rsbseq	r0, r8, r0
     cd8:	00010000 	andeq	r0, r1, r0
     cdc:	00000053 	andeq	r0, r0, r3, asr r0
     ce0:	00000000 	andeq	r0, r0, r0
     ce4:	00004800 	andeq	r4, r0, r0, lsl #16
     ce8:	00006000 	andeq	r6, r0, r0
     cec:	5c000100 	stfpls	f0, [r0], {-0}
     cf0:	00000060 	andeq	r0, r0, r0, rrx
     cf4:	00000080 	andeq	r0, r0, r0, lsl #1
     cf8:	01f3000a 	mvnseq	r0, sl
     cfc:	5301f352 	movwpl	pc, #4946	; 0x1352	; <UNPREDICTABLE>
     d00:	9f01231c 	svcls	0x0001231c
	...
     d0c:	00000080 	andeq	r0, r0, r0, lsl #1
     d10:	000000a4 	andeq	r0, r0, r4, lsr #1
     d14:	a4500001 	ldrbge	r0, [r0], #-1
     d18:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     d1c:	03000001 	movweq	r0, #1
     d20:	9f027000 	svcls	0x00027000
     d24:	00000118 	andeq	r0, r0, r8, lsl r1
     d28:	00000218 	andeq	r0, r0, r8, lsl r2
     d2c:	01f30004 	mvnseq	r0, r4
     d30:	00009f50 	andeq	r9, r0, r0, asr pc
     d34:	00000000 	andeq	r0, r0, r0
     d38:	00800000 	addeq	r0, r0, r0
     d3c:	00f00000 	rscseq	r0, r0, r0
     d40:	00010000 	andeq	r0, r1, r0
     d44:	0000f051 	andeq	pc, r0, r1, asr r0	; <UNPREDICTABLE>
     d48:	00016000 	andeq	r6, r1, r0
     d4c:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     d50:	00000160 	andeq	r0, r0, r0, ror #2
     d54:	00000168 	andeq	r0, r0, r8, ror #2
     d58:	68510001 	ldmdavs	r1, {r0}^
     d5c:	88000001 	stmdahi	r0, {r0}
     d60:	01000001 	tsteq	r0, r1
     d64:	01885500 	orreq	r5, r8, r0, lsl #10
     d68:	019c0000 	orrseq	r0, ip, r0
     d6c:	00010000 	andeq	r0, r1, r0
     d70:	00019c51 	andeq	r9, r1, r1, asr ip
     d74:	0001bc00 	andeq	fp, r1, r0, lsl #24
     d78:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     d7c:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     d80:	000001c4 	andeq	r0, r0, r4, asr #3
     d84:	c4510001 	ldrbgt	r0, [r1], #-1
     d88:	fc000001 	stc2	0, cr0, [r0], {1}
     d8c:	01000001 	tsteq	r0, r1
     d90:	01fc5500 	mvnseq	r5, r0, lsl #10
     d94:	02180000 	andseq	r0, r8, #0
     d98:	00040000 	andeq	r0, r4, r0
     d9c:	9f5101f3 	svcls	0x005101f3
	...
     da8:	00000080 	andeq	r0, r0, r0, lsl #1
     dac:	00000094 	muleq	r0, r4, r0
     db0:	94520001 	ldrbls	r0, [r2], #-1
     db4:	fc000000 	stc2	0, cr0, [r0], {-0}
     db8:	01000001 	tsteq	r0, r1
     dbc:	01fc5400 	mvnseq	r5, r0, lsl #8
     dc0:	02180000 	andseq	r0, r8, #0
     dc4:	00040000 	andeq	r0, r4, r0
     dc8:	9f5201f3 	svcls	0x005201f3
	...
     dd4:	00000080 	andeq	r0, r0, r0, lsl #1
     dd8:	00000100 	andeq	r0, r0, r0, lsl #2
     ddc:	04530001 	ldrbeq	r0, [r3], #-1
     de0:	08000001 	stmdaeq	r0, {r0}
     de4:	01000001 	tsteq	r0, r1
     de8:	01605300 	cmneq	r0, r0, lsl #6
     dec:	01680000 	cmneq	r8, r0
     df0:	00010000 	andeq	r0, r1, r0
     df4:	00016853 	andeq	r6, r1, r3, asr r8
     df8:	00018800 	andeq	r8, r1, r0, lsl #16
     dfc:	f3000400 	vshl.u8	d0, d0, d0
     e00:	889f5301 	ldmhi	pc, {r0, r8, r9, ip, lr}	; <UNPREDICTABLE>
     e04:	90000001 	andls	r0, r0, r1
     e08:	01000001 	tsteq	r0, r1
     e0c:	01905300 	orrseq	r5, r0, r0, lsl #6
     e10:	01940000 	orrseq	r0, r4, r0
     e14:	00010000 	andeq	r0, r1, r0
     e18:	0001945c 	andeq	r9, r1, ip, asr r4
     e1c:	00019c00 	andeq	r9, r1, r0, lsl #24
     e20:	53000100 	movwpl	r0, #256	; 0x100
     e24:	0000019c 	muleq	r0, ip, r1
     e28:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     e2c:	01f30004 	mvnseq	r0, r4
     e30:	01bc9f53 			; <UNDEFINED> instruction: 0x01bc9f53
     e34:	01cc0000 	biceq	r0, ip, r0
     e38:	00010000 	andeq	r0, r1, r0
     e3c:	0001cc53 	andeq	ip, r1, r3, asr ip
     e40:	0001cf00 	andeq	ip, r1, r0, lsl #30
     e44:	5c000100 	stfpls	f0, [r0], {-0}
     e48:	000001cf 	andeq	r0, r0, pc, asr #3
     e4c:	000001d4 	ldrdeq	r0, [r0], -r4
     e50:	01f30004 	mvnseq	r0, r4
     e54:	00009f53 	andeq	r9, r0, r3, asr pc
     e58:	00000000 	andeq	r0, r0, r0
     e5c:	00800000 	addeq	r0, r0, r0
     e60:	009c0000 	addseq	r0, ip, r0
     e64:	00020000 	andeq	r0, r2, r0
     e68:	009c0091 	umullseq	r0, ip, r1, r0
     e6c:	01c80000 	biceq	r0, r8, r0
     e70:	00010000 	andeq	r0, r1, r0
     e74:	0001d452 	andeq	sp, r1, r2, asr r4
     e78:	0001df00 	andeq	sp, r1, r0, lsl #30
     e7c:	52000100 	andpl	r0, r0, #0, 2
	...
     e88:	0000009c 	muleq	r0, ip, r0
     e8c:	00000118 	andeq	r0, r0, r8, lsl r1
     e90:	185d0001 	ldmdane	sp, {r0}^
     e94:	1c000001 	stcne	0, cr0, [r0], {1}
     e98:	01000001 	tsteq	r0, r1
     e9c:	011c5300 	tsteq	ip, r0, lsl #6
     ea0:	01200000 	teqeq	r0, r0
     ea4:	00010000 	andeq	r0, r1, r0
     ea8:	00012051 	andeq	r2, r1, r1, asr r0
     eac:	00016000 	andeq	r6, r1, r0
     eb0:	53000100 	movwpl	r0, #256	; 0x100
     eb4:	00000160 	andeq	r0, r0, r0, ror #2
     eb8:	00000168 	andeq	r0, r0, r8, ror #2
     ebc:	685d0001 	ldmdavs	sp, {r0}^
     ec0:	6c000001 	stcvs	0, cr0, [r0], {1}
     ec4:	01000001 	tsteq	r0, r1
     ec8:	016c5e00 	cmneq	ip, r0, lsl #28
     ecc:	01880000 	orreq	r0, r8, r0
     ed0:	00010000 	andeq	r0, r1, r0
     ed4:	00018853 	andeq	r8, r1, r3, asr r8
     ed8:	00019000 	andeq	r9, r1, r0
     edc:	91000400 	tstls	r0, r0, lsl #8
     ee0:	909f7fa1 	addsls	r7, pc, r1, lsr #31
     ee4:	94000001 	strls	r0, [r0], #-1
     ee8:	01000001 	tsteq	r0, r1
     eec:	01945300 	orrseq	r5, r4, r0, lsl #6
     ef0:	019c0000 	orrseq	r0, ip, r0
     ef4:	00010000 	andeq	r0, r1, r0
     ef8:	00019c5d 	andeq	r9, r1, sp, asr ip
     efc:	0001a000 	andeq	sl, r1, r0
     f00:	5e000100 	adfpls	f0, f0, f0
     f04:	000001a0 	andeq	r0, r0, r0, lsr #3
     f08:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     f0c:	bc530001 	mrrclt	0, 0, r0, r3, cr1
     f10:	d4000001 	strle	r0, [r0], #-1
     f14:	01000001 	tsteq	r0, r1
     f18:	01d45d00 	bicseq	r5, r4, r0, lsl #26
     f1c:	01df0000 	bicseq	r0, pc, r0
     f20:	00010000 	andeq	r0, r1, r0
     f24:	00000053 	andeq	r0, r0, r3, asr r0
     f28:	00000000 	andeq	r0, r0, r0
     f2c:	0000a000 	andeq	sl, r0, r0
     f30:	0000ec00 	andeq	lr, r0, r0, lsl #24
     f34:	5c000100 	stfpls	f0, [r0], {-0}
     f38:	000000ec 	andeq	r0, r0, ip, ror #1
     f3c:	00000100 	andeq	r0, r0, r0, lsl #2
     f40:	00530001 	subseq	r0, r3, r1
     f44:	04000001 	streq	r0, [r0], #-1
     f48:	01000001 	tsteq	r0, r1
     f4c:	01045c00 	tsteq	r4, r0, lsl #24
     f50:	01080000 	mrseq	r0, (UNDEF: 8)
     f54:	00010000 	andeq	r0, r1, r0
     f58:	00010853 	andeq	r0, r1, r3, asr r8
     f5c:	00011800 	andeq	r1, r1, r0, lsl #16
     f60:	5c000100 	stfpls	f0, [r0], {-0}
     f64:	00000118 	andeq	r0, r0, r8, lsl r1
     f68:	0000011c 	andeq	r0, r0, ip, lsl r1
     f6c:	1c500001 	mrrcne	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     f70:	3c000001 	stccc	0, cr0, [r0], {1}
     f74:	01000001 	tsteq	r0, r1
     f78:	01445c00 	cmpeq	r4, r0, lsl #24
     f7c:	01580000 	cmpeq	r8, r0
     f80:	00010000 	andeq	r0, r1, r0
     f84:	00015850 	andeq	r5, r1, r0, asr r8
     f88:	00016000 	andeq	r6, r1, r0
     f8c:	5c000100 	stfpls	f0, [r0], {-0}
     f90:	00000160 	andeq	r0, r0, r0, ror #2
     f94:	00000168 	andeq	r0, r0, r8, ror #2
     f98:	68530001 	ldmdavs	r3, {r0}^
     f9c:	78000001 	stmdavc	r0, {r0}
     fa0:	01000001 	tsteq	r0, r1
     fa4:	01785c00 	cmneq	r8, r0, lsl #24
     fa8:	01800000 	orreq	r0, r0, r0
     fac:	00050000 	andeq	r0, r5, r0
     fb0:	2534007c 	ldrcs	r0, [r4, #-124]!	; 0x7c
     fb4:	0001809f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
     fb8:	00018800 	andeq	r8, r1, r0, lsl #16
     fbc:	5c000100 	stfpls	f0, [r0], {-0}
     fc0:	00000188 	andeq	r0, r0, r8, lsl #3
     fc4:	00000190 	muleq	r0, r0, r1
     fc8:	90530001 	subsls	r0, r3, r1
     fcc:	94000001 	strls	r0, [r0], #-1
     fd0:	01000001 	tsteq	r0, r1
     fd4:	01945c00 	orrseq	r5, r4, r0, lsl #24
     fd8:	019c0000 	orrseq	r0, ip, r0
     fdc:	00010000 	andeq	r0, r1, r0
     fe0:	00019c53 	andeq	r9, r1, r3, asr ip
     fe4:	0001ac00 	andeq	sl, r1, r0, lsl #24
     fe8:	5c000100 	stfpls	f0, [r0], {-0}
     fec:	000001ac 	andeq	r0, r0, ip, lsr #3
     ff0:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
     ff4:	007c0005 	rsbseq	r0, ip, r5
     ff8:	b49f2531 	ldrlt	r2, [pc], #1329	; 1000 <_start-0x7000>
     ffc:	bc000001 	stclt	0, cr0, [r0], {1}
    1000:	01000001 	tsteq	r0, r1
    1004:	01bc5c00 			; <UNDEFINED> instruction: 0x01bc5c00
    1008:	01cc0000 	biceq	r0, ip, r0
    100c:	00010000 	andeq	r0, r1, r0
    1010:	0001cc53 	andeq	ip, r1, r3, asr ip
    1014:	0001cf00 	andeq	ip, r1, r0, lsl #30
    1018:	5c000100 	stfpls	f0, [r0], {-0}
    101c:	000001cf 	andeq	r0, r0, pc, asr #3
    1020:	000001d4 	ldrdeq	r0, [r0], -r4
    1024:	01f30004 	mvnseq	r0, r4
    1028:	01d49f53 	bicseq	r9, r4, r3, asr pc
    102c:	01df0000 	bicseq	r0, pc, r0
    1030:	00010000 	andeq	r0, r1, r0
    1034:	0000005c 	andeq	r0, r0, ip, asr r0
    1038:	00000000 	andeq	r0, r0, r0
    103c:	0000ec00 	andeq	lr, r0, r0, lsl #24
    1040:	0000fc00 	andeq	pc, r0, r0, lsl #24
    1044:	30000200 	andcc	r0, r0, r0, lsl #4
    1048:	0000fc9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    104c:	00010400 	andeq	r0, r1, r0, lsl #8
    1050:	31000200 	mrscc	r0, R8_usr
    1054:	0001049f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
    1058:	00010800 	andeq	r0, r1, r0, lsl #16
    105c:	30000200 	andcc	r0, r0, r0, lsl #4
    1060:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1064:	00000000 	andeq	r0, r0, r0
    1068:	00021800 	andeq	r1, r2, r0, lsl #16
    106c:	00022800 	andeq	r2, r2, r0, lsl #16
    1070:	50000100 	andpl	r0, r0, r0, lsl #2
    1074:	00000228 	andeq	r0, r0, r8, lsr #4
    1078:	0000023c 	andeq	r0, r0, ip, lsr r2
    107c:	01f30004 	mvnseq	r0, r4
    1080:	023c9f50 	eorseq	r9, ip, #80, 30	; 0x140
    1084:	02680000 	rsbeq	r0, r8, #0
    1088:	00010000 	andeq	r0, r1, r0
    108c:	00000050 	andeq	r0, r0, r0, asr r0
    1090:	00000000 	andeq	r0, r0, r0
    1094:	00021800 	andeq	r1, r2, r0, lsl #16
    1098:	00022c00 	andeq	r2, r2, r0, lsl #24
    109c:	51000100 	mrspl	r0, (UNDEF: 16)
    10a0:	0000022c 	andeq	r0, r0, ip, lsr #4
    10a4:	0000023c 	andeq	r0, r0, ip, lsr r2
    10a8:	01f30004 	mvnseq	r0, r4
    10ac:	023c9f51 	eorseq	r9, ip, #324	; 0x144
    10b0:	02680000 	rsbeq	r0, r8, #0
    10b4:	00010000 	andeq	r0, r1, r0
    10b8:	00000051 	andeq	r0, r0, r1, asr r0
    10bc:	00000000 	andeq	r0, r0, r0
    10c0:	00026800 	andeq	r6, r2, r0, lsl #16
    10c4:	00029000 	andeq	r9, r2, r0
    10c8:	50000100 	andpl	r0, r0, r0, lsl #2
    10cc:	00000290 	muleq	r0, r0, r2
    10d0:	000004dc 	ldrdeq	r0, [r0], -ip
    10d4:	dc5b0001 	mrrcle	0, 0, r0, fp, cr1
    10d8:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
    10dc:	04000004 	streq	r0, [r0], #-4
    10e0:	5001f300 	andpl	pc, r1, r0, lsl #6
    10e4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    10e8:	00000000 	andeq	r0, r0, r0
    10ec:	00026800 	andeq	r6, r2, r0, lsl #16
    10f0:	00027c00 	andeq	r7, r2, r0, lsl #24
    10f4:	51000100 	mrspl	r0, (UNDEF: 16)
    10f8:	0000027c 	andeq	r0, r0, ip, ror r2
    10fc:	00000290 	muleq	r0, r0, r2
    1100:	01710003 	cmneq	r1, r3
    1104:	0002909f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
    1108:	0004f000 	andeq	pc, r4, r0
    110c:	f3000400 	vshl.u8	d0, d0, d0
    1110:	009f5101 	addseq	r5, pc, r1, lsl #2
    1114:	00000000 	andeq	r0, r0, r0
    1118:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    111c:	98000002 	stmdals	r0, {r1}
    1120:	01000002 	tsteq	r0, r2
    1124:	02985200 	addseq	r5, r8, #0, 4
    1128:	02c00000 	sbceq	r0, r0, #0
    112c:	00010000 	andeq	r0, r1, r0
    1130:	0002c052 	andeq	ip, r2, r2, asr r0
    1134:	00048c00 	andeq	r8, r4, r0, lsl #24
    1138:	56000100 	strpl	r0, [r0], -r0, lsl #2
    113c:	0000048c 	andeq	r0, r0, ip, lsl #9
    1140:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1144:	00520001 	subseq	r0, r2, r1
    1148:	00000000 	andeq	r0, r0, r0
    114c:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    1150:	84000002 	strhi	r0, [r0], #-2
    1154:	01000002 	tsteq	r0, r2
    1158:	00005300 	andeq	r5, r0, r0, lsl #6
    115c:	00000000 	andeq	r0, r0, r0
    1160:	02780000 	rsbseq	r0, r8, #0
    1164:	02900000 	addseq	r0, r0, #0
    1168:	00010000 	andeq	r0, r1, r0
    116c:	00029050 	andeq	r9, r2, r0, asr r0
    1170:	00029400 	andeq	r9, r2, r0, lsl #8
    1174:	54000100 	strpl	r0, [r0], #-256	; 0x100
    1178:	00000294 	muleq	r0, r4, r2
    117c:	000002a0 	andeq	r0, r0, r0, lsr #5
    1180:	01740003 	cmneq	r4, r3
    1184:	0002a09f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
    1188:	0002ac00 	andeq	sl, r2, r0, lsl #24
    118c:	54000100 	strpl	r0, [r0], #-256	; 0x100
    1190:	000002ac 	andeq	r0, r0, ip, lsr #5
    1194:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    1198:	01740003 	cmneq	r4, r3
    119c:	0002b89f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
    11a0:	00049000 	andeq	r9, r4, r0
    11a4:	54000100 	strpl	r0, [r0], #-256	; 0x100
    11a8:	00000490 	muleq	r0, r0, r4
    11ac:	0000049c 	muleq	r0, ip, r4
    11b0:	01740003 	cmneq	r4, r3
    11b4:	00049c9f 	muleq	r4, pc, ip	; <UNPREDICTABLE>
    11b8:	0004c800 	andeq	ip, r4, r0, lsl #16
    11bc:	54000100 	strpl	r0, [r0], #-256	; 0x100
    11c0:	000004c8 	andeq	r0, r0, r8, asr #9
    11c4:	000004d4 	ldrdeq	r0, [r0], -r4
    11c8:	d4500001 	ldrble	r0, [r0], #-1
    11cc:	dc000004 	stcle	0, cr0, [r0], {4}
    11d0:	03000004 	movweq	r0, #4
    11d4:	9f017400 	svcls	0x00017400
	...
    11e0:	00000280 	andeq	r0, r0, r0, lsl #5
    11e4:	000004dc 	ldrdeq	r0, [r0], -ip
    11e8:	dc580001 	mrrcle	0, 0, r0, r8, cr1
    11ec:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
    11f0:	0a000004 	beq	1208 <_start-0x6df8>
    11f4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    11f8:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    11fc:	009f1c31 	addseq	r1, pc, r1, lsr ip	; <UNPREDICTABLE>
    1200:	00000000 	andeq	r0, r0, r0
    1204:	bc000000 	stclt	0, cr0, [r0], {-0}
    1208:	c0000003 	andgt	r0, r0, r3
    120c:	01000003 	tsteq	r0, r3
    1210:	03e45000 	mvneq	r5, #0
    1214:	03e80000 	mvneq	r0, #0
    1218:	00010000 	andeq	r0, r1, r0
    121c:	00040c50 	andeq	r0, r4, r0, asr ip
    1220:	00041000 	andeq	r1, r4, r0
    1224:	50000100 	andpl	r0, r0, r0, lsl #2
    1228:	00000434 	andeq	r0, r0, r4, lsr r4
    122c:	00000438 	andeq	r0, r0, r8, lsr r4
    1230:	40500001 	subsmi	r0, r0, r1
    1234:	44000004 	strmi	r0, [r0], #-4
    1238:	01000004 	tsteq	r0, r4
    123c:	04685000 	strbteq	r5, [r8], #-0
    1240:	046c0000 	strbteq	r0, [ip], #-0
    1244:	00010000 	andeq	r0, r1, r0
    1248:	00048850 	andeq	r8, r4, r0, asr r8
    124c:	0004b000 	andeq	fp, r4, r0
    1250:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    125c:	000002c0 	andeq	r0, r0, r0, asr #5
    1260:	000002c8 	andeq	r0, r0, r8, asr #5
    1264:	9f300002 	svcls	0x00300002
    1268:	000002c8 	andeq	r0, r0, r8, asr #5
    126c:	000002cc 	andeq	r0, r0, ip, asr #5
    1270:	d8570001 	ldmdale	r7, {r0}^
    1274:	b0000002 	andlt	r0, r0, r2
    1278:	01000004 	tsteq	r0, r4
    127c:	00005700 	andeq	r5, r0, r0, lsl #14
    1280:	00000000 	andeq	r0, r0, r0
    1284:	00040000 	andeq	r0, r4, r0
    1288:	00080000 	andeq	r0, r8, r0
    128c:	00070000 	andeq	r0, r7, r0
    1290:	000a0073 	andeq	r0, sl, r3, ror r0
    1294:	089f2110 	ldmeq	pc, {r4, r8, sp}	; <UNPREDICTABLE>
    1298:	10000000 	andne	r0, r0, r0
    129c:	01000000 	mrseq	r0, (UNDEF: 0)
    12a0:	00005300 	andeq	r5, r0, r0, lsl #6
    12a4:	00000000 	andeq	r0, r0, r0
    12a8:	00140000 	andseq	r0, r4, r0
    12ac:	00180000 	andseq	r0, r8, r0
    12b0:	00070000 	andeq	r0, r7, r0
    12b4:	ff0b0073 			; <UNDEFINED> instruction: 0xff0b0073
    12b8:	189f1aef 	ldmne	pc, {r0, r1, r2, r3, r5, r6, r7, r9, fp, ip}	; <UNPREDICTABLE>
    12bc:	20000000 	andcs	r0, r0, r0
    12c0:	01000000 	mrseq	r0, (UNDEF: 0)
    12c4:	00005300 	andeq	r5, r0, r0, lsl #6
    12c8:	00000000 	andeq	r0, r0, r0
    12cc:	00140000 	andseq	r0, r4, r0
    12d0:	001c0000 	andseq	r0, ip, r0
    12d4:	00030000 	andeq	r0, r3, r0
    12d8:	1c9f0473 	cfldrsne	mvf0, [pc], {115}	; 0x73
    12dc:	27000000 	strcs	r0, [r0, -r0]
    12e0:	01000000 	mrseq	r0, (UNDEF: 0)
    12e4:	00005300 	andeq	r5, r0, r0, lsl #6
    12e8:	00000000 	andeq	r0, r0, r0
    12ec:	8cd80000 	ldclhi	0, cr0, [r8], {0}
    12f0:	8cdc0000 	ldclhi	0, cr0, [ip], {0}
    12f4:	00020000 	andeq	r0, r2, r0
    12f8:	8cdc9f30 	ldclhi	15, cr9, [ip], {48}	; 0x30
    12fc:	8ce00000 	stclhi	0, cr0, [r0]
    1300:	00010000 	andeq	r0, r1, r0
    1304:	00000050 	andeq	r0, r0, r0, asr r0
    1308:	00000000 	andeq	r0, r0, r0
    130c:	008cf000 	addeq	pc, ip, r0
    1310:	008cf400 	addeq	pc, ip, r0, lsl #8
    1314:	30000200 	andcc	r0, r0, r0, lsl #4
    1318:	008cf49f 	umulleq	pc, ip, pc, r4	; <UNPREDICTABLE>
    131c:	008cf800 	addeq	pc, ip, r0, lsl #16
    1320:	53000100 	movwpl	r0, #256	; 0x100
    1324:	00008cfc 	strdeq	r8, [r0], -ip
    1328:	00008d04 	andeq	r8, r0, r4, lsl #26
    132c:	00530001 	subseq	r0, r3, r1
	...
    1338:	04000000 	streq	r0, [r0], #-0
    133c:	01000000 	mrseq	r0, (UNDEF: 0)
    1340:	00045000 	andeq	r5, r4, r0
    1344:	000c0000 	andeq	r0, ip, r0
    1348:	00010000 	andeq	r0, r1, r0
    134c:	00000c53 	andeq	r0, r0, r3, asr ip
    1350:	00001000 	andeq	r1, r0, r0
    1354:	50000100 	andpl	r0, r0, r0, lsl #2
    1358:	00000010 	andeq	r0, r0, r0, lsl r0
    135c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1360:	00530001 	subseq	r0, r3, r1
    1364:	00000000 	andeq	r0, r0, r0
    1368:	40000000 	andmi	r0, r0, r0
    136c:	43000000 	movwmi	r0, #0
    1370:	01000000 	mrseq	r0, (UNDEF: 0)
    1374:	00435000 	subeq	r5, r3, r0
    1378:	004c0000 	subeq	r0, ip, r0
    137c:	00010000 	andeq	r0, r1, r0
    1380:	00000054 	andeq	r0, r0, r4, asr r0
    1384:	00000000 	andeq	r0, r0, r0
    1388:	00004c00 	andeq	r4, r0, r0, lsl #24
    138c:	00005700 	andeq	r5, r0, r0, lsl #14
    1390:	50000100 	andpl	r0, r0, r0, lsl #2
    1394:	00000057 	andeq	r0, r0, r7, asr r0
    1398:	00000070 	andeq	r0, r0, r0, ror r0
    139c:	00550001 	subseq	r0, r5, r1
    13a0:	00000000 	andeq	r0, r0, r0
    13a4:	60000000 	andvs	r0, r0, r0
    13a8:	64000000 	strvs	r0, [r0], #-0
    13ac:	01000000 	mrseq	r0, (UNDEF: 0)
    13b0:	00005000 	andeq	r5, r0, r0
    13b4:	00000000 	andeq	r0, r0, r0
    13b8:	00700000 	rsbseq	r0, r0, r0
    13bc:	007c0000 	rsbseq	r0, ip, r0
    13c0:	00010000 	andeq	r0, r1, r0
    13c4:	00007c50 	andeq	r7, r0, r0, asr ip
    13c8:	00008400 	andeq	r8, r0, r0, lsl #8
    13cc:	f3000400 	vshl.u8	d0, d0, d0
    13d0:	009f5001 	addseq	r5, pc, r1
    13d4:	00000000 	andeq	r0, r0, r0
    13d8:	84000000 	strhi	r0, [r0], #-0
    13dc:	90000000 	andls	r0, r0, r0
    13e0:	01000000 	mrseq	r0, (UNDEF: 0)
    13e4:	00905000 	addseq	r5, r0, r0
    13e8:	00980000 	addseq	r0, r8, r0
    13ec:	00040000 	andeq	r0, r4, r0
    13f0:	9f5001f3 	svcls	0x005001f3
	...
    13fc:	000000fc 	strdeq	r0, [r0], -ip
    1400:	00000104 	andeq	r0, r0, r4, lsl #2
    1404:	04500001 	ldrbeq	r0, [r0], #-1
    1408:	28000001 	stmdacs	r0, {r0}
    140c:	01000001 	tsteq	r0, r1
    1410:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    141c:	00900000 	addseq	r0, r0, r0
    1420:	00010000 	andeq	r0, r1, r0
    1424:	00009050 	andeq	r9, r0, r0, asr r0
    1428:	0000d400 	andeq	sp, r0, r0, lsl #8
    142c:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    1438:	00000048 	andeq	r0, r0, r8, asr #32
    143c:	0000004c 	andeq	r0, r0, ip, asr #32
    1440:	54550001 	ldrbpl	r0, [r5], #-1
    1444:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    1448:	01000000 	mrseq	r0, (UNDEF: 0)
    144c:	00605500 	rsbeq	r5, r0, r0, lsl #10
    1450:	00640000 	rsbeq	r0, r4, r0
    1454:	00010000 	andeq	r0, r1, r0
    1458:	00006c55 	andeq	r6, r0, r5, asr ip
    145c:	00007000 	andeq	r7, r0, r0
    1460:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    1464:	00000078 	andeq	r0, r0, r8, ror r0
    1468:	0000007c 	andeq	r0, r0, ip, ror r0
    146c:	84550001 	ldrbhi	r0, [r5], #-1
    1470:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    1474:	01000000 	mrseq	r0, (UNDEF: 0)
    1478:	008c5500 	addeq	r5, ip, r0, lsl #10
    147c:	00d40000 	sbcseq	r0, r4, r0
    1480:	00010000 	andeq	r0, r1, r0
    1484:	00000055 	andeq	r0, r0, r5, asr r0
    1488:	00000000 	andeq	r0, r0, r0
    148c:	00001c00 	andeq	r1, r0, r0, lsl #24
    1490:	00004400 	andeq	r4, r0, r0, lsl #8
    1494:	53000100 	movwpl	r0, #256	; 0x100
    1498:	00000044 	andeq	r0, r0, r4, asr #32
    149c:	0000004c 	andeq	r0, r0, ip, asr #32
    14a0:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    14a4:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    14a8:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    14ac:	00cccccc 	sbceq	ip, ip, ip, asr #25
    14b0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    14b4:	25f72008 	ldrbcs	r2, [r7, #8]!
    14b8:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    14bc:	004c9f25 	subeq	r9, ip, r5, lsr #30
    14c0:	00500000 	subseq	r0, r0, r0
    14c4:	00010000 	andeq	r0, r1, r0
    14c8:	00005053 	andeq	r5, r0, r3, asr r0
    14cc:	00005800 	andeq	r5, r0, r0, lsl #16
    14d0:	70001c00 	andvc	r1, r0, r0, lsl #24
    14d4:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    14d8:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    14dc:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    14e0:	00000000 	andeq	r0, r0, r0
    14e4:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    14e8:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    14ec:	589f2533 	ldmpl	pc, {r0, r1, r4, r5, r8, sl, sp}	; <UNPREDICTABLE>
    14f0:	5c000000 	stcpl	0, cr0, [r0], {-0}
    14f4:	01000000 	mrseq	r0, (UNDEF: 0)
    14f8:	005c5300 	subseq	r5, ip, r0, lsl #6
    14fc:	00640000 	rsbeq	r0, r4, r0
    1500:	001c0000 	andseq	r0, ip, r0
    1504:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    1508:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    150c:	cccccd08 	stclgt	13, cr12, [ip], {8}
    1510:	000000cc 	andeq	r0, r0, ip, asr #1
    1514:	20081e00 	andcs	r1, r8, r0, lsl #28
    1518:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    151c:	9f25332c 	svcls	0x0025332c
    1520:	00000064 	andeq	r0, r0, r4, rrx
    1524:	00000068 	andeq	r0, r0, r8, rrx
    1528:	68530001 	ldmdavs	r3, {r0}^
    152c:	70000000 	andvc	r0, r0, r0
    1530:	1c000000 	stcne	0, cr0, [r0], {-0}
    1534:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    1538:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    153c:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1540:	0000cccc 	andeq	ip, r0, ip, asr #25
    1544:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1548:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    154c:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1550:	0000709f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1554:	00007400 	andeq	r7, r0, r0, lsl #8
    1558:	53000100 	movwpl	r0, #256	; 0x100
    155c:	00000074 	andeq	r0, r0, r4, ror r0
    1560:	0000007c 	andeq	r0, r0, ip, ror r0
    1564:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    1568:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    156c:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1570:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1574:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1578:	25f72008 	ldrbcs	r2, [r7, #8]!
    157c:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1580:	007c9f25 	rsbseq	r9, ip, r5, lsr #30
    1584:	00800000 	addeq	r0, r0, r0
    1588:	00010000 	andeq	r0, r1, r0
    158c:	00008053 	andeq	r8, r0, r3, asr r0
    1590:	00008800 	andeq	r8, r0, r0, lsl #16
    1594:	70001c00 	andvc	r1, r0, r0, lsl #24
    1598:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    159c:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    15a0:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    15a4:	00000000 	andeq	r0, r0, r0
    15a8:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    15ac:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    15b0:	889f2533 	ldmhi	pc, {r0, r1, r4, r5, r8, sl, sp}	; <UNPREDICTABLE>
    15b4:	8c000000 	stchi	0, cr0, [r0], {-0}
    15b8:	01000000 	mrseq	r0, (UNDEF: 0)
    15bc:	008c5300 	addeq	r5, ip, r0, lsl #6
    15c0:	00900000 	addseq	r0, r0, r0
    15c4:	001c0000 	andseq	r0, ip, r0
    15c8:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    15cc:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    15d0:	cccccd08 	stclgt	13, cr12, [ip], {8}
    15d4:	000000cc 	andeq	r0, r0, ip, asr #1
    15d8:	20081e00 	andcs	r1, r8, r0, lsl #28
    15dc:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    15e0:	9f25332c 	svcls	0x0025332c
    15e4:	00000090 	muleq	r0, r0, r0
    15e8:	00000098 	muleq	r0, r8, r0
    15ec:	0074001c 	rsbseq	r0, r4, ip, lsl r0
    15f0:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    15f4:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    15f8:	00cccccc 	sbceq	ip, ip, ip, asr #25
    15fc:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1600:	25f72008 	ldrbcs	r2, [r7, #8]!
    1604:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1608:	00989f25 	addseq	r9, r8, r5, lsr #30
    160c:	009c0000 	addseq	r0, ip, r0
    1610:	00170000 	andseq	r0, r7, r0
    1614:	2cf70074 	ldclcs	0, cr0, [r7], #464	; 0x1d0
    1618:	007125f7 	ldrshteq	r2, [r1], #-87	; 0xffffffa9
    161c:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1620:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1624:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1628:	9c9f2533 	cfldr32ls	mvfx2, [pc], {51}	; 0x33
    162c:	d4000000 	strle	r0, [r0], #-0
    1630:	1c000000 	stcne	0, cr0, [r0], {-0}
    1634:	f7007400 			; <UNDEFINED> instruction: 0xf7007400
    1638:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    163c:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1640:	0000cccc 	andeq	ip, r0, ip, asr #25
    1644:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1648:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    164c:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1650:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1654:	00000000 	andeq	r0, r0, r0
    1658:	00009400 	andeq	r9, r0, r0, lsl #8
    165c:	0000b800 	andeq	fp, r0, r0, lsl #16
    1660:	50000100 	andpl	r0, r0, r0, lsl #2
    1664:	000000b8 	strheq	r0, [r0], -r8
    1668:	000000c4 	andeq	r0, r0, r4, asr #1
    166c:	71310008 	teqvc	r1, r8
    1670:	00732400 	rsbseq	r2, r3, r0, lsl #8
    1674:	00c49f21 	sbceq	r9, r4, r1, lsr #30
    1678:	00c70000 	sbceq	r0, r7, r0
    167c:	00010000 	andeq	r0, r1, r0
    1680:	00000051 	andeq	r0, r0, r1, asr r0
    1684:	00000000 	andeq	r0, r0, r0
    1688:	0000d400 	andeq	sp, r0, r0, lsl #8
    168c:	0000f800 	andeq	pc, r0, r0, lsl #16
    1690:	50000100 	andpl	r0, r0, r0, lsl #2
    1694:	000000f8 	strdeq	r0, [r0], -r8
    1698:	0000010c 	andeq	r0, r0, ip, lsl #2
    169c:	01f30004 	mvnseq	r0, r4
    16a0:	00009f50 	andeq	r9, r0, r0, asr pc
    16a4:	00000000 	andeq	r0, r0, r0
    16a8:	00e00000 	rsceq	r0, r0, r0
    16ac:	00e80000 	rsceq	r0, r8, r0
    16b0:	00020000 	andeq	r0, r2, r0
    16b4:	00e89f30 	rsceq	r9, r8, r0, lsr pc
    16b8:	00e80000 	rsceq	r0, r8, r0
    16bc:	00010000 	andeq	r0, r1, r0
    16c0:	0000e852 	andeq	lr, r0, r2, asr r8
    16c4:	0000f000 	andeq	pc, r0, r0
    16c8:	30000200 	andcc	r0, r0, r0, lsl #4
    16cc:	0000f09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    16d0:	00010300 	andeq	r0, r1, r0, lsl #6
    16d4:	52000100 	andpl	r0, r0, #0, 2
	...
    16e0:	000000e0 	andeq	r0, r0, r0, ror #1
    16e4:	000000f4 	strdeq	r0, [r0], -r4
    16e8:	9f300002 	svcls	0x00300002
    16ec:	000000f4 	strdeq	r0, [r0], -r4
    16f0:	00000100 	andeq	r0, r0, r0, lsl #2
    16f4:	73310005 	teqvc	r1, #5
    16f8:	009f2400 	addseq	r2, pc, r0, lsl #8
    16fc:	03000001 	movweq	r0, #1
    1700:	01000001 	tsteq	r0, r1
    1704:	01035100 	mrseq	r5, (UNDEF: 19)
    1708:	010c0000 	mrseq	r0, (UNDEF: 12)
    170c:	00080000 	andeq	r0, r8, r0
    1710:	5001f331 	andpl	pc, r1, r1, lsr r3	; <UNPREDICTABLE>
    1714:	9f241a4f 	svcls	0x00241a4f
	...
    1720:	0000010c 	andeq	r0, r0, ip, lsl #2
    1724:	00000130 	andeq	r0, r0, r0, lsr r1
    1728:	30500001 	subscc	r0, r0, r1
    172c:	44000001 	strmi	r0, [r0], #-1
    1730:	04000001 	streq	r0, [r0], #-1
    1734:	5001f300 	andpl	pc, r1, r0, lsl #6
    1738:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    173c:	00000000 	andeq	r0, r0, r0
    1740:	00011800 	andeq	r1, r1, r0, lsl #16
    1744:	00012000 	andeq	r2, r1, r0
    1748:	30000200 	andcc	r0, r0, r0, lsl #4
    174c:	0001209f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
    1750:	00012000 	andeq	r2, r1, r0
    1754:	52000100 	andpl	r0, r0, #0, 2
    1758:	00000120 	andeq	r0, r0, r0, lsr #2
    175c:	00000128 	andeq	r0, r0, r8, lsr #2
    1760:	9f300002 	svcls	0x00300002
    1764:	00000128 	andeq	r0, r0, r8, lsr #2
    1768:	0000013b 	andeq	r0, r0, fp, lsr r1
    176c:	00520001 	subseq	r0, r2, r1
    1770:	00000000 	andeq	r0, r0, r0
    1774:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1778:	2c000001 	stccs	0, cr0, [r0], {1}
    177c:	02000001 	andeq	r0, r0, #1
    1780:	2c9f3000 	ldccs	0, cr3, [pc], {0}
    1784:	38000001 	stmdacc	r0, {r0}
    1788:	05000001 	streq	r0, [r0, #-1]
    178c:	00733100 	rsbseq	r3, r3, r0, lsl #2
    1790:	01389f24 	teqeq	r8, r4, lsr #30
    1794:	013b0000 	teqeq	fp, r0
    1798:	00010000 	andeq	r0, r1, r0
    179c:	00013b51 	andeq	r3, r1, r1, asr fp
    17a0:	00014400 	andeq	r4, r1, r0, lsl #8
    17a4:	31000800 	tstcc	r0, r0, lsl #16
    17a8:	4f5001f3 	svcmi	0x005001f3
    17ac:	009f241a 	addseq	r2, pc, sl, lsl r4	; <UNPREDICTABLE>
    17b0:	00000000 	andeq	r0, r0, r0
    17b4:	44000000 	strmi	r0, [r0], #-0
    17b8:	d4000001 	strle	r0, [r0], #-1
    17bc:	01000001 	tsteq	r0, r1
    17c0:	01d45000 	bicseq	r5, r4, r0
    17c4:	02100000 	andseq	r0, r0, #0
    17c8:	00010000 	andeq	r0, r1, r0
    17cc:	00000054 	andeq	r0, r0, r4, asr r0
    17d0:	00000000 	andeq	r0, r0, r0
    17d4:	00018c00 	andeq	r8, r1, r0, lsl #24
    17d8:	00019000 	andeq	r9, r1, r0
    17dc:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    17e0:	00000198 	muleq	r0, r8, r1
    17e4:	0000019c 	muleq	r0, ip, r1
    17e8:	a4550001 	ldrbge	r0, [r5], #-1
    17ec:	a8000001 	stmdage	r0, {r0}
    17f0:	01000001 	tsteq	r0, r1
    17f4:	01b05500 	lslseq	r5, r0, #10
    17f8:	01b40000 			; <UNDEFINED> instruction: 0x01b40000
    17fc:	00010000 	andeq	r0, r1, r0
    1800:	0001bc55 	andeq	fp, r1, r5, asr ip
    1804:	0001c000 	andeq	ip, r1, r0
    1808:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    180c:	000001c8 	andeq	r0, r0, r8, asr #3
    1810:	000001cc 	andeq	r0, r0, ip, asr #3
    1814:	d0550001 	subsle	r0, r5, r1
    1818:	10000001 	andne	r0, r0, r1
    181c:	01000002 	tsteq	r0, r2
    1820:	00005500 	andeq	r5, r0, r0, lsl #10
    1824:	00000000 	andeq	r0, r0, r0
    1828:	01600000 	cmneq	r0, r0
    182c:	01880000 	orreq	r0, r8, r0
    1830:	00010000 	andeq	r0, r1, r0
    1834:	00018853 	andeq	r8, r1, r3, asr r8
    1838:	00019000 	andeq	r9, r1, r0
    183c:	70001c00 	andvc	r1, r0, r0, lsl #24
    1840:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1844:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1848:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    184c:	00000000 	andeq	r0, r0, r0
    1850:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1854:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1858:	909f2533 	addsls	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
    185c:	94000001 	strls	r0, [r0], #-1
    1860:	01000001 	tsteq	r0, r1
    1864:	01945300 	orrseq	r5, r4, r0, lsl #6
    1868:	019c0000 	orrseq	r0, ip, r0
    186c:	001c0000 	andseq	r0, ip, r0
    1870:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    1874:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    1878:	cccccd08 	stclgt	13, cr12, [ip], {8}
    187c:	000000cc 	andeq	r0, r0, ip, asr #1
    1880:	20081e00 	andcs	r1, r8, r0, lsl #28
    1884:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1888:	9f25332c 	svcls	0x0025332c
    188c:	0000019c 	muleq	r0, ip, r1
    1890:	000001a0 	andeq	r0, r0, r0, lsr #3
    1894:	a0530001 	subsge	r0, r3, r1
    1898:	a8000001 	stmdage	r0, {r0}
    189c:	1c000001 	stcne	0, cr0, [r0], {1}
    18a0:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    18a4:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    18a8:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    18ac:	0000cccc 	andeq	ip, r0, ip, asr #25
    18b0:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    18b4:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    18b8:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    18bc:	0001a89f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
    18c0:	0001ac00 	andeq	sl, r1, r0, lsl #24
    18c4:	53000100 	movwpl	r0, #256	; 0x100
    18c8:	000001ac 	andeq	r0, r0, ip, lsr #3
    18cc:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
    18d0:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    18d4:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    18d8:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    18dc:	00cccccc 	sbceq	ip, ip, ip, asr #25
    18e0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    18e4:	25f72008 	ldrbcs	r2, [r7, #8]!
    18e8:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    18ec:	01b49f25 			; <UNDEFINED> instruction: 0x01b49f25
    18f0:	01b80000 			; <UNDEFINED> instruction: 0x01b80000
    18f4:	00010000 	andeq	r0, r1, r0
    18f8:	0001b853 	andeq	fp, r1, r3, asr r8
    18fc:	0001c000 	andeq	ip, r1, r0
    1900:	70001c00 	andvc	r1, r0, r0, lsl #24
    1904:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1908:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    190c:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1910:	00000000 	andeq	r0, r0, r0
    1914:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1918:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    191c:	c09f2533 	addsgt	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
    1920:	c4000001 	strgt	r0, [r0], #-1
    1924:	01000001 	tsteq	r0, r1
    1928:	01c45300 	biceq	r5, r4, r0, lsl #6
    192c:	01cc0000 	biceq	r0, ip, r0
    1930:	001c0000 	andseq	r0, ip, r0
    1934:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    1938:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    193c:	cccccd08 	stclgt	13, cr12, [ip], {8}
    1940:	000000cc 	andeq	r0, r0, ip, asr #1
    1944:	20081e00 	andcs	r1, r8, r0, lsl #28
    1948:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    194c:	9f25332c 	svcls	0x0025332c
    1950:	000001cc 	andeq	r0, r0, ip, asr #3
    1954:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1958:	d0530001 	subsle	r0, r3, r1
    195c:	d4000001 	strle	r0, [r0], #-1
    1960:	1c000001 	stcne	0, cr0, [r0], {1}
    1964:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    1968:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    196c:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1970:	0000cccc 	andeq	ip, r0, ip, asr #25
    1974:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1978:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    197c:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1980:	0001d49f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
    1984:	0001dc00 	andeq	sp, r1, r0, lsl #24
    1988:	74001c00 	strvc	r1, [r0], #-3072	; 0xc00
    198c:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1990:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1994:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1998:	00000000 	andeq	r0, r0, r0
    199c:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    19a0:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    19a4:	dc9f2533 	cfldr32le	mvfx2, [pc], {51}	; 0x33
    19a8:	e0000001 	and	r0, r0, r1
    19ac:	17000001 	strne	r0, [r0, -r1]
    19b0:	f7007400 			; <UNDEFINED> instruction: 0xf7007400
    19b4:	7125f72c 	msrvc	SP_abt, ip
    19b8:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    19bc:	20081e25 	andcs	r1, r8, r5, lsr #28
    19c0:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    19c4:	9f25332c 	svcls	0x0025332c
    19c8:	000001e0 	andeq	r0, r0, r0, ror #3
    19cc:	00000210 	andeq	r0, r0, r0, lsl r2
    19d0:	0074001c 	rsbseq	r0, r4, ip, lsl r0
    19d4:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    19d8:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    19dc:	00cccccc 	sbceq	ip, ip, ip, asr #25
    19e0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    19e4:	25f72008 	ldrbcs	r2, [r7, #8]!
    19e8:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    19ec:	00009f25 	andeq	r9, r0, r5, lsr #30
    19f0:	00000000 	andeq	r0, r0, r0
    19f4:	01d80000 	bicseq	r0, r8, r0
    19f8:	01fc0000 	mvnseq	r0, r0
    19fc:	00010000 	andeq	r0, r1, r0
    1a00:	0001fc50 	andeq	pc, r1, r0, asr ip	; <UNPREDICTABLE>
    1a04:	00020300 	andeq	r0, r2, r0, lsl #6
    1a08:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1a14:	00000210 	andeq	r0, r0, r0, lsl r2
    1a18:	0000022c 	andeq	r0, r0, ip, lsr #4
    1a1c:	2c500001 	mrrccs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    1a20:	34000002 	strcc	r0, [r0], #-2
    1a24:	01000002 	tsteq	r0, r2
    1a28:	02345400 	eorseq	r5, r4, #0, 8
    1a2c:	023c0000 	eorseq	r0, ip, #0
    1a30:	00010000 	andeq	r0, r1, r0
    1a34:	00023c50 	andeq	r3, r2, r0, asr ip
    1a38:	00024400 	andeq	r4, r2, r0, lsl #8
    1a3c:	54000100 	strpl	r0, [r0], #-256	; 0x100
    1a40:	00000244 	andeq	r0, r0, r4, asr #4
    1a44:	00000250 	andeq	r0, r0, r0, asr r2
    1a48:	01f30004 	mvnseq	r0, r4
    1a4c:	02509f50 	subseq	r9, r0, #80, 30	; 0x140
    1a50:	02540000 	subseq	r0, r4, #0
    1a54:	00010000 	andeq	r0, r1, r0
    1a58:	00025450 	andeq	r5, r2, r0, asr r4
    1a5c:	00025c00 	andeq	r5, r2, r0, lsl #24
    1a60:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    1a6c:	00000220 	andeq	r0, r0, r0, lsr #4
    1a70:	00000230 	andeq	r0, r0, r0, lsr r2
    1a74:	9f300002 	svcls	0x00300002
    1a78:	00000230 	andeq	r0, r0, r0, lsr r2
    1a7c:	00000234 	andeq	r0, r0, r4, lsr r2
    1a80:	34500001 	ldrbcc	r0, [r0], #-1
    1a84:	40000002 	andmi	r0, r0, r2
    1a88:	02000002 	andeq	r0, r0, #2
    1a8c:	409f3000 	addsmi	r3, pc, r0
    1a90:	4c000002 	stcmi	0, cr0, [r0], {2}
    1a94:	01000002 	tsteq	r0, r2
    1a98:	00005000 	andeq	r5, r0, r0
    1a9c:	00000000 	andeq	r0, r0, r0
    1aa0:	025c0000 	subseq	r0, ip, #0
    1aa4:	02900000 	addseq	r0, r0, #0
    1aa8:	00010000 	andeq	r0, r1, r0
    1aac:	00029050 	andeq	r9, r2, r0, asr r0
    1ab0:	0002a000 	andeq	sl, r2, r0
    1ab4:	f3000400 	vshl.u8	d0, d0, d0
    1ab8:	a09f5001 	addsge	r5, pc, r1
    1abc:	c0000002 	andgt	r0, r0, r2
    1ac0:	01000002 	tsteq	r0, r2
    1ac4:	02c05000 	sbceq	r5, r0, #0
    1ac8:	02d40000 	sbcseq	r0, r4, #0
    1acc:	00040000 	andeq	r0, r4, r0
    1ad0:	9f5001f3 	svcls	0x005001f3
	...
    1adc:	0000025c 	andeq	r0, r0, ip, asr r2
    1ae0:	00000294 	muleq	r0, r4, r2
    1ae4:	94510001 	ldrbls	r0, [r1], #-1
    1ae8:	a0000002 	andge	r0, r0, r2
    1aec:	04000002 	streq	r0, [r0], #-2
    1af0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1af4:	0002a09f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
    1af8:	0002c400 	andeq	ip, r2, r0, lsl #8
    1afc:	51000100 	mrspl	r0, (UNDEF: 16)
    1b00:	000002c4 	andeq	r0, r0, r4, asr #5
    1b04:	000002d4 	ldrdeq	r0, [r0], -r4
    1b08:	01f30004 	mvnseq	r0, r4
    1b0c:	00009f51 	andeq	r9, r0, r1, asr pc
    1b10:	00000000 	andeq	r0, r0, r0
    1b14:	02700000 	rsbseq	r0, r0, #0
    1b18:	02900000 	addseq	r0, r0, #0
    1b1c:	00010000 	andeq	r0, r1, r0
    1b20:	00029050 	andeq	r9, r2, r0, asr r0
    1b24:	0002a000 	andeq	sl, r2, r0
    1b28:	f3000400 	vshl.u8	d0, d0, d0
    1b2c:	009f5001 	addseq	r5, pc, r1
    1b30:	00000000 	andeq	r0, r0, r0
    1b34:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    1b38:	80000002 	andhi	r0, r0, r2
    1b3c:	02000002 	andeq	r0, r0, #2
    1b40:	809f3000 	addshi	r3, pc, r0
    1b44:	80000002 	andhi	r0, r0, r2
    1b48:	01000002 	tsteq	r0, r2
    1b4c:	02805200 	addeq	r5, r0, #0, 4
    1b50:	02880000 	addeq	r0, r8, #0
    1b54:	00020000 	andeq	r0, r2, r0
    1b58:	02889f30 	addeq	r9, r8, #48, 30	; 0xc0
    1b5c:	029b0000 	addseq	r0, fp, #0
    1b60:	00010000 	andeq	r0, r1, r0
    1b64:	00000052 	andeq	r0, r0, r2, asr r0
    1b68:	00000000 	andeq	r0, r0, r0
    1b6c:	00027800 	andeq	r7, r2, r0, lsl #16
    1b70:	00028c00 	andeq	r8, r2, r0, lsl #24
    1b74:	30000200 	andcc	r0, r0, r0, lsl #4
    1b78:	00028c9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
    1b7c:	00029800 	andeq	r9, r2, r0, lsl #16
    1b80:	31000500 	tstcc	r0, r0, lsl #10
    1b84:	9f240073 	svcls	0x00240073
    1b88:	00000298 	muleq	r0, r8, r2
    1b8c:	0000029b 	muleq	r0, fp, r2
    1b90:	9b510001 	blls	1441b9c <__bss_end__+0x14380ec>
    1b94:	a0000002 	andge	r0, r0, r2
    1b98:	08000002 	stmdaeq	r0, {r1}
    1b9c:	01f33100 	mvnseq	r3, r0, lsl #2
    1ba0:	241a4f50 	ldrcs	r4, [sl], #-3920	; 0xf50
    1ba4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1ba8:	00000000 	andeq	r0, r0, r0
    1bac:	0002a000 	andeq	sl, r2, r0
    1bb0:	0002c000 	andeq	ip, r2, r0
    1bb4:	50000100 	andpl	r0, r0, r0, lsl #2
    1bb8:	000002c0 	andeq	r0, r0, r0, asr #5
    1bbc:	000002d4 	ldrdeq	r0, [r0], -r4
    1bc0:	01f30004 	mvnseq	r0, r4
    1bc4:	00009f50 	andeq	r9, r0, r0, asr pc
    1bc8:	00000000 	andeq	r0, r0, r0
    1bcc:	02a80000 	adceq	r0, r8, #0
    1bd0:	02b00000 	adcseq	r0, r0, #0
    1bd4:	00020000 	andeq	r0, r2, r0
    1bd8:	02b09f30 	adcseq	r9, r0, #48, 30	; 0xc0
    1bdc:	02b00000 	adcseq	r0, r0, #0
    1be0:	00010000 	andeq	r0, r1, r0
    1be4:	0002b052 	andeq	fp, r2, r2, asr r0
    1be8:	0002b800 	andeq	fp, r2, r0, lsl #16
    1bec:	30000200 	andcc	r0, r0, r0, lsl #4
    1bf0:	0002b89f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
    1bf4:	0002cb00 	andeq	ip, r2, r0, lsl #22
    1bf8:	52000100 	andpl	r0, r0, #0, 2
	...
    1c04:	000002a8 	andeq	r0, r0, r8, lsr #5
    1c08:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
    1c0c:	9f300002 	svcls	0x00300002
    1c10:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
    1c14:	000002c8 	andeq	r0, r0, r8, asr #5
    1c18:	73310005 	teqvc	r1, #5
    1c1c:	c89f2400 	ldmgt	pc, {sl, sp}	; <UNPREDICTABLE>
    1c20:	cb000002 	blgt	1c30 <_start-0x63d0>
    1c24:	01000002 	tsteq	r0, r2
    1c28:	02cb5100 	sbceq	r5, fp, #0, 2
    1c2c:	02d40000 	sbcseq	r0, r4, #0
    1c30:	00080000 	andeq	r0, r8, r0
    1c34:	5001f331 	andpl	pc, r1, r1, lsr r3	; <UNPREDICTABLE>
    1c38:	9f241a4f 	svcls	0x00241a4f
	...
    1c44:	000002d4 	ldrdeq	r0, [r0], -r4
    1c48:	0000036c 	andeq	r0, r0, ip, ror #6
    1c4c:	6c500001 	mrrcvs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    1c50:	ac000003 	stcge	0, cr0, [r0], {3}
    1c54:	01000003 	tsteq	r0, r3
    1c58:	00005400 	andeq	r5, r0, r0, lsl #8
    1c5c:	00000000 	andeq	r0, r0, r0
    1c60:	02d40000 	sbcseq	r0, r4, #0
    1c64:	036f0000 	cmneq	pc, #0
    1c68:	00010000 	andeq	r0, r1, r0
    1c6c:	00036f51 	andeq	r6, r3, r1, asr pc
    1c70:	0003ac00 	andeq	sl, r3, r0, lsl #24
    1c74:	f3000400 	vshl.u8	d0, d0, d0
    1c78:	009f5101 	addseq	r5, pc, r1, lsl #2
    1c7c:	00000000 	andeq	r0, r0, r0
    1c80:	24000000 	strcs	r0, [r0], #-0
    1c84:	28000003 	stmdacs	r0, {r0, r1}
    1c88:	01000003 	tsteq	r0, r3
    1c8c:	03305600 	teqeq	r0, #0, 12
    1c90:	03340000 	teqeq	r4, #0
    1c94:	00010000 	andeq	r0, r1, r0
    1c98:	00033c56 	andeq	r3, r3, r6, asr ip
    1c9c:	00034000 	andeq	r4, r3, r0
    1ca0:	56000100 	strpl	r0, [r0], -r0, lsl #2
    1ca4:	00000348 	andeq	r0, r0, r8, asr #6
    1ca8:	0000034c 	andeq	r0, r0, ip, asr #6
    1cac:	54560001 	ldrbpl	r0, [r6], #-1
    1cb0:	58000003 	stmdapl	r0, {r0, r1}
    1cb4:	01000003 	tsteq	r0, r3
    1cb8:	03605600 	cmneq	r0, #0, 12
    1cbc:	03640000 	cmneq	r4, #0
    1cc0:	00010000 	andeq	r0, r1, r0
    1cc4:	00036856 	andeq	r6, r3, r6, asr r8
    1cc8:	0003ac00 	andeq	sl, r3, r0, lsl #24
    1ccc:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    1cd8:	000002f8 	strdeq	r0, [r0], -r8
    1cdc:	00000320 	andeq	r0, r0, r0, lsr #6
    1ce0:	20530001 	subscs	r0, r3, r1
    1ce4:	28000003 	stmdacs	r0, {r0, r1}
    1ce8:	1c000003 	stcne	0, cr0, [r0], {3}
    1cec:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    1cf0:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    1cf4:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1cf8:	0000cccc 	andeq	ip, r0, ip, asr #25
    1cfc:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1d00:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1d04:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1d08:	0003289f 	muleq	r3, pc, r8	; <UNPREDICTABLE>
    1d0c:	00032c00 	andeq	r2, r3, r0, lsl #24
    1d10:	53000100 	movwpl	r0, #256	; 0x100
    1d14:	0000032c 	andeq	r0, r0, ip, lsr #6
    1d18:	00000334 	andeq	r0, r0, r4, lsr r3
    1d1c:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    1d20:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1d24:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1d28:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1d2c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1d30:	25f72008 	ldrbcs	r2, [r7, #8]!
    1d34:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1d38:	03349f25 	teqeq	r4, #37, 30	; 0x94
    1d3c:	03380000 	teqeq	r8, #0
    1d40:	00010000 	andeq	r0, r1, r0
    1d44:	00033853 	andeq	r3, r3, r3, asr r8
    1d48:	00034000 	andeq	r4, r3, r0
    1d4c:	70001c00 	andvc	r1, r0, r0, lsl #24
    1d50:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1d54:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1d58:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1d5c:	00000000 	andeq	r0, r0, r0
    1d60:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1d64:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1d68:	409f2533 	addsmi	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
    1d6c:	44000003 	strmi	r0, [r0], #-3
    1d70:	01000003 	tsteq	r0, r3
    1d74:	03445300 	movteq	r5, #17152	; 0x4300
    1d78:	034c0000 	movteq	r0, #49152	; 0xc000
    1d7c:	001c0000 	andseq	r0, ip, r0
    1d80:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    1d84:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    1d88:	cccccd08 	stclgt	13, cr12, [ip], {8}
    1d8c:	000000cc 	andeq	r0, r0, ip, asr #1
    1d90:	20081e00 	andcs	r1, r8, r0, lsl #28
    1d94:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1d98:	9f25332c 	svcls	0x0025332c
    1d9c:	0000034c 	andeq	r0, r0, ip, asr #6
    1da0:	00000350 	andeq	r0, r0, r0, asr r3
    1da4:	50530001 	subspl	r0, r3, r1
    1da8:	58000003 	stmdapl	r0, {r0, r1}
    1dac:	1c000003 	stcne	0, cr0, [r0], {3}
    1db0:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    1db4:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    1db8:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1dbc:	0000cccc 	andeq	ip, r0, ip, asr #25
    1dc0:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1dc4:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1dc8:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1dcc:	0003589f 	muleq	r3, pc, r8	; <UNPREDICTABLE>
    1dd0:	00035c00 	andeq	r5, r3, r0, lsl #24
    1dd4:	53000100 	movwpl	r0, #256	; 0x100
    1dd8:	0000035c 	andeq	r0, r0, ip, asr r3
    1ddc:	00000364 	andeq	r0, r0, r4, ror #6
    1de0:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    1de4:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1de8:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1dec:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1df0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1df4:	25f72008 	ldrbcs	r2, [r7, #8]!
    1df8:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1dfc:	03649f25 	cmneq	r4, #37, 30	; 0x94
    1e00:	03680000 	cmneq	r8, #0
    1e04:	00010000 	andeq	r0, r1, r0
    1e08:	00036853 	andeq	r6, r3, r3, asr r8
    1e0c:	00036c00 	andeq	r6, r3, r0, lsl #24
    1e10:	70001c00 	andvc	r1, r0, r0, lsl #24
    1e14:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1e18:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1e1c:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1e20:	00000000 	andeq	r0, r0, r0
    1e24:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1e28:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1e2c:	6c9f2533 	cfldr32vs	mvfx2, [pc], {51}	; 0x33
    1e30:	74000003 	strvc	r0, [r0], #-3
    1e34:	1c000003 	stcne	0, cr0, [r0], {3}
    1e38:	f7007400 			; <UNDEFINED> instruction: 0xf7007400
    1e3c:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    1e40:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1e44:	0000cccc 	andeq	ip, r0, ip, asr #25
    1e48:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1e4c:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1e50:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1e54:	0003749f 	muleq	r3, pc, r4	; <UNPREDICTABLE>
    1e58:	00037800 	andeq	r7, r3, r0, lsl #16
    1e5c:	74001700 	strvc	r1, [r0], #-1792	; 0x700
    1e60:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1e64:	f7007325 			; <UNDEFINED> instruction: 0xf7007325
    1e68:	1e25f72c 	cdpne	7, 2, cr15, cr5, cr12, {1}
    1e6c:	25f72008 	ldrbcs	r2, [r7, #8]!
    1e70:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1e74:	03789f25 	cmneq	r8, #37, 30	; 0x94
    1e78:	03ac0000 			; <UNDEFINED> instruction: 0x03ac0000
    1e7c:	001c0000 	andseq	r0, ip, r0
    1e80:	2cf70074 	ldclcs	0, cr0, [r7], #464	; 0x1d0
    1e84:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    1e88:	cccccd08 	stclgt	13, cr12, [ip], {8}
    1e8c:	000000cc 	andeq	r0, r0, ip, asr #1
    1e90:	20081e00 	andcs	r1, r8, r0, lsl #28
    1e94:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1e98:	9f25332c 	svcls	0x0025332c
	...
    1ea4:	00000370 	andeq	r0, r0, r0, ror r3
    1ea8:	00000394 	muleq	r0, r4, r3
    1eac:	94500001 	ldrbls	r0, [r0], #-1
    1eb0:	9c000003 	stcls	0, cr0, [r0], {3}
    1eb4:	09000003 	stmdbeq	r0, {r0, r1}
    1eb8:	73007500 	movwvc	r7, #1280	; 0x500
    1ebc:	00712400 	rsbseq	r2, r1, r0, lsl #8
    1ec0:	039c9f21 	orrseq	r9, ip, #33, 30	; 0x84
    1ec4:	039f0000 	orrseq	r0, pc, #0
    1ec8:	00010000 	andeq	r0, r1, r0
    1ecc:	00000051 	andeq	r0, r0, r1, asr r0
	...
    1ed8:	00000b00 	andeq	r0, r0, r0, lsl #22
    1edc:	50000100 	andpl	r0, r0, r0, lsl #2
    1ee0:	0000000b 	andeq	r0, r0, fp
    1ee4:	00000014 	andeq	r0, r0, r4, lsl r0
    1ee8:	00540001 	subseq	r0, r4, r1
    1eec:	00000000 	andeq	r0, r0, r0
    1ef0:	Address 0x0000000000001ef0 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	00008010 	andeq	r8, r0, r0, lsl r0
  14:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	02b40002 	adcseq	r0, r4, #2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	000080e0 	andeq	r8, r0, r0, ror #1
  34:	00000600 	andeq	r0, r0, r0, lsl #12
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	145f0002 	ldrbne	r0, [pc], #-2	; 4c <_start-0x7fb4>
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	000086e0 	andeq	r8, r0, r0, ror #13
  54:	00000058 	andeq	r0, r0, r8, asr r0
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	15f40002 	ldrbne	r0, [r4, #2]!
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	00008738 	andeq	r8, r0, r8, lsr r7
  74:	00000034 	andeq	r0, r0, r4, lsr r0
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	16e60002 	strbtne	r0, [r6], r2
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	0000876c 	andeq	r8, r0, ip, ror #14
  94:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	1d3e0002 	ldcne	0, cr0, [lr, #-8]!
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	00008c5c 	andeq	r8, r0, ip, asr ip
  b4:	00000020 	andeq	r0, r0, r0, lsr #32
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	1dfa0002 	ldclne	0, cr0, [sl, #8]!
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	00008c7c 	andeq	r8, r0, ip, ror ip
  d4:	00000028 	andeq	r0, r0, r8, lsr #32
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	1efd0002 	cdpne	0, 15, cr0, cr13, cr2, {0}
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	00008ca4 	andeq	r8, r0, r4, lsr #25
  f4:	00000034 	andeq	r0, r0, r4, lsr r0
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	200c0002 	andcs	r0, ip, r2
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	00008cd8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
 114:	00000074 	andeq	r0, r0, r4, ror r0
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	21bd0002 			; <UNDEFINED> instruction: 0x21bd0002
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	00008d4c 	andeq	r8, r0, ip, asr #26
 134:	00000098 	muleq	r0, r8, r0
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	23b80002 			; <UNDEFINED> instruction: 0x23b80002
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	00008e48 	andeq	r8, r0, r8, asr #28
 154:	00000154 	andeq	r0, r0, r4, asr r1
	...
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	27bb0002 	ldrcs	r0, [fp, r2]!
 168:	00040000 	andeq	r0, r4, r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	00008f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
 174:	000003ac 	andeq	r0, r0, ip, lsr #7
	...
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	2d270002 	stccs	0, cr0, [r7, #-8]!
 188:	00040000 	andeq	r0, r4, r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	00009348 	andeq	r9, r0, r8, asr #6
 194:	00000014 	andeq	r0, r0, r4, lsl r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	00000030 	andeq	r0, r0, r0, lsr r0
   4:	00000044 	andeq	r0, r0, r4, asr #32
   8:	00000048 	andeq	r0, r0, r8, asr #32
   c:	000000a4 	andeq	r0, r0, r4, lsr #1
	...
  18:	00008cd8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
  1c:	00008d4c 	andeq	r8, r0, ip, asr #26
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000112 	andeq	r0, r0, r2, lsl r1
   4:	00df0002 	sbcseq	r0, pc, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2f010000 	svccs	0x00010000
  1c:	2f727375 	svccs	0x00727375
  20:	61636f6c 	cmnvs	r3, ip, ror #30
  24:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
  28:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
  2c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
  30:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
  34:	61652d65 	cmnvs	r5, r5, ror #26
  38:	342f6962 	strtcc	r6, [pc], #-2402	; 40 <_start-0x7fc0>
  3c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
  40:	3173632d 	cmncc	r3, sp, lsr #6
  44:	2f653037 	svccs	0x00653037
  48:	2f62696c 	svccs	0x0062696c
  4c:	2f636367 	svccs	0x00636367
  50:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
  54:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
  58:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
  5c:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
  60:	2f332e38 	svccs	0x00332e38
  64:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  68:	00656475 	rsbeq	r6, r5, r5, ror r4
  6c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
  70:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
  74:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
  78:	2f6e756a 	svccs	0x006e756a
  7c:	6b736544 	blvs	1cd9594 <__bss_end__+0x1ccfae4>
  80:	2f706f74 	svccs	0x00706f74
  84:	6f686373 	svcvs	0x00686373
  88:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
  8c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
  90:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
  94:	53432f30 	movtpl	r2, #16176	; 0x3f30
  98:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
  9c:	3173632f 	cmncc	r3, pc, lsr #6
  a0:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
  a4:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
  a8:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
  ac:	00697062 	rsbeq	r7, r9, r2, rrx
  b0:	672d3100 	strvs	r3, [sp, -r0, lsl #2]!
  b4:	2d637465 	cfstrdcs	mvd7, [r3, #-404]!	; 0xfffffe6c
  b8:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0x574
  bc:	0000632e 	andeq	r6, r0, lr, lsr #6
  c0:	74730000 	ldrbtvc	r0, [r3], #-0
  c4:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
  c8:	6363672d 	cmnvs	r3, #11796480	; 0xb40000
  cc:	0100682e 	tsteq	r0, lr, lsr #16
  d0:	77730000 	ldrbvc	r0, [r3, -r0]!
  d4:	7261752d 	rsbvc	r7, r1, #188743680	; 0xb400000
  d8:	00682e74 	rsbeq	r2, r8, r4, ror lr
  dc:	72000000 	andvc	r0, r0, #0
  e0:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
  e4:	00000200 	andeq	r0, r0, r0, lsl #4
  e8:	02050000 	andeq	r0, r5, #0
  ec:	00008010 	andeq	r8, r0, r0, lsl r0
  f0:	312f4b18 	teqcc	pc, r8, lsl fp	; <UNPREDICTABLE>
  f4:	2f312fd9 	svccs	0x00312fd9
  f8:	79032c32 	stmdbvc	r3, {r1, r4, r5, sl, fp, sp}
  fc:	9f692f2e 	svcls	0x00692f2e
 100:	84844b67 	strhi	r4, [r4], #2919	; 0xb67
 104:	004a7503 	subeq	r7, sl, r3, lsl #10
 108:	06010402 	streq	r0, [r1], -r2, lsl #8
 10c:	0d03062e 	stceq	6, cr0, [r3, #-184]	; 0xffffff48
 110:	0010024a 	andseq	r0, r0, sl, asr #4
 114:	03460101 	movteq	r0, #24833	; 0x6101
 118:	00020000 	andeq	r0, r2, r0
 11c:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
 120:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 124:	0101000d 	tsteq	r1, sp
 128:	00000101 	andeq	r0, r0, r1, lsl #2
 12c:	00000100 	andeq	r0, r0, r0, lsl #2
 130:	73752f01 	cmnvc	r5, #1, 30
 134:	6f6c2f72 	svcvs	0x006c2f72
 138:	2f6c6163 	svccs	0x006c6163
 13c:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
 140:	612f7261 	teqvs	pc, r1, ror #4
 144:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 148:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 14c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 150:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 154:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
 158:	30373173 	eorscc	r3, r7, r3, ror r1
 15c:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 160:	63672f62 	cmnvs	r7, #392	; 0x188
 164:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
 168:	6f6e2d6d 	svcvs	0x006e2d6d
 16c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 170:	2f696261 	svccs	0x00696261
 174:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 178:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
 17c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
 180:	552f0065 	strpl	r0, [pc, #-101]!	; 123 <_start-0x7edd>
 184:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 188:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 18c:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 190:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 194:	6f746b73 	svcvs	0x00746b73
 198:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 19c:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 4 <_start-0x7ffc>
 1a0:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 1a4:	31726574 	cmncc	r2, r4, ror r5
 1a8:	2f303239 	svccs	0x00303239
 1ac:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 1b0:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 1b4:	30343173 	eorscc	r3, r4, r3, ror r1
 1b8:	30322d65 	eorscc	r2, r2, r5, ror #26
 1bc:	2f6e6977 	svccs	0x006e6977
 1c0:	7062696c 	rsbvc	r6, r2, ip, ror #18
 1c4:	73632f69 	cmnvc	r3, #420	; 0x1a4
 1c8:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 1cc:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 1d0:	73552f00 	cmpvc	r5, #0, 30
 1d4:	2f737265 	svccs	0x00737265
 1d8:	61697262 	cmnvs	r9, r2, ror #4
 1dc:	6e756a6e 	vsubvs.f32	s13, s10, s29
 1e0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 1e4:	706f746b 	rsbvc	r7, pc, fp, ror #8
 1e8:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 1ec:	2f6c6f6f 	svccs	0x006c6f6f
 1f0:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 1f4:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 1f8:	432f3032 	teqmi	pc, #50	; 0x32
 1fc:	30343153 	eorscc	r3, r4, r3, asr r1
 200:	73632f45 	cmnvc	r3, #276	; 0x114
 204:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 208:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 20c:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 70 <_start-0x7f90>
 210:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 214:	73552f00 	cmpvc	r5, #0, 30
 218:	2f737265 	svccs	0x00737265
 21c:	61697262 	cmnvs	r9, r2, ror #4
 220:	6e756a6e 	vsubvs.f32	s13, s10, s29
 224:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 228:	706f746b 	rsbvc	r7, pc, fp, ror #8
 22c:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 230:	2f6c6f6f 	svccs	0x006c6f6f
 234:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 238:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 23c:	432f3032 	teqmi	pc, #50	; 0x32
 240:	30343153 	eorscc	r3, r4, r3, asr r1
 244:	73632f45 	cmnvc	r3, #276	; 0x114
 248:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 24c:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 250:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; b4 <_start-0x7f4c>
 254:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 258:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 25c:	73000063 	movwvc	r0, #99	; 0x63
 260:	61752d77 	cmnvs	r5, r7, ror sp
 264:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
 268:	00000000 	andeq	r0, r0, r0
 26c:	6c637963 	stclvs	9, cr7, [r3], #-396	; 0xfffffe74
 270:	74752d65 	ldrbtvc	r2, [r5], #-3429	; 0xd65
 274:	682e6c69 	stmdavs	lr!, {r0, r3, r5, r6, sl, fp, sp, lr}
 278:	00000000 	andeq	r0, r0, r0
 27c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 280:	672d746e 	strvs	r7, [sp, -lr, ror #8]!
 284:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
 288:	00000100 	andeq	r0, r0, r0, lsl #2
 28c:	752d7773 	strvc	r7, [sp, #-1907]!	; 0x773
 290:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
 294:	00000068 	andeq	r0, r0, r8, rrx
 298:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
 29c:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
 2a0:	00010068 	andeq	r0, r1, r8, rrx
 2a4:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 2a8:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 2ac:	72000002 	andvc	r0, r0, #2
 2b0:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 2b4:	00000300 	andeq	r0, r0, r0, lsl #6
 2b8:	702d6176 	eorvc	r6, sp, r6, ror r1
 2bc:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 2c0:	00682e6b 	rsbeq	r2, r8, fp, ror #28
 2c4:	3c000004 	stccc	0, cr0, [r0], {4}
 2c8:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 2cc:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
 2d0:	0000003e 	andeq	r0, r0, lr, lsr r0
 2d4:	05000000 	streq	r0, [r0, #-0]
 2d8:	0080e002 	addeq	lr, r0, r2
 2dc:	2f4c1a00 	svccs	0x004c1a00
 2e0:	02043230 	andeq	r3, r4, #48, 4
 2e4:	66730335 			; <UNDEFINED> instruction: 0x66730335
 2e8:	0a030104 	beq	c0700 <__bss_end__+0xb6c50>
 2ec:	31020482 	smlabbcc	r2, r2, r4, r0
 2f0:	04667303 	strbteq	r7, [r6], #-771	; 0x303
 2f4:	820c0301 	andhi	r0, ip, #67108864	; 0x4000000
 2f8:	032f0204 	teqeq	pc, #4, 4	; 0x40000000
 2fc:	01046673 	tsteq	r4, r3, ror r6
 300:	04820e03 	streq	r0, [r2], #3587	; 0xe03
 304:	73032d02 	movwvc	r2, #15618	; 0x3d02
 308:	03010466 	movweq	r0, #5222	; 0x1466
 30c:	02048210 	andeq	r8, r4, #16, 4
 310:	6673032b 	ldrbtvs	r0, [r3], -fp, lsr #6
 314:	12030104 	andne	r0, r3, #4, 2
 318:	29020482 	stmdbcs	r2, {r1, r7, sl}
 31c:	04667303 	strbteq	r7, [r6], #-771	; 0x303
 320:	82140301 	andshi	r0, r4, #67108864	; 0x4000000
 324:	79030204 	stmdbvc	r3, {r2, r9}
 328:	6673032e 	ldrbtvs	r0, [r3], -lr, lsr #6
 32c:	16030104 	strne	r0, [r3], -r4, lsl #2
 330:	03020482 	movweq	r0, #9346	; 0x2482
 334:	73032e77 	movwvc	r2, #15991	; 0x3e77
 338:	03010466 	movweq	r0, #5222	; 0x1466
 33c:	02048218 	andeq	r8, r4, #24, 4	; 0x80000001
 340:	032e7503 	teqeq	lr, #12582912	; 0xc00000
 344:	01046673 	tsteq	r4, r3, ror r6
 348:	04821a03 	streq	r1, [r2], #2563	; 0xa03
 34c:	2e730302 	cdpcs	3, 7, cr0, cr3, cr2, {0}
 350:	04667303 	strbteq	r7, [r6], #-771	; 0x303
 354:	821c0301 	andshi	r0, ip, #67108864	; 0x4000000
 358:	4b2e1003 	blmi	b8436c <__bss_end__+0xb7a8bc>
 35c:	2e70034d 	cdpcs	3, 7, cr0, cr0, cr13, {2}
 360:	4883844c 	stmmi	r3, {r2, r3, r6, sl, pc}
 364:	4e2e0d03 	cdpmi	13, 2, cr0, cr14, cr3, {0}
 368:	02043331 	andeq	r3, r4, #-1006632960	; 0xc4000000
 36c:	042e4403 	strteq	r4, [lr], #-1027	; 0x403
 370:	823e0301 	eorshi	r0, lr, #67108864	; 0x4000000
 374:	0302042f 	movweq	r0, #9263	; 0x242f
 378:	01046641 	tsteq	r4, r1, asr #12
 37c:	8200c103 	andhi	ip, r0, #-1073741824	; 0xc0000000
 380:	0302042f 	movweq	r0, #9263	; 0x242f
 384:	04827fbe 	streq	r7, [r2], #4030	; 0xfbe
 388:	00c40301 	sbceq	r0, r4, r1, lsl #6
 38c:	02042f82 	andeq	r2, r4, #520	; 0x208
 390:	827fbb03 	rsbshi	fp, pc, #3072	; 0xc00
 394:	c7030104 	strgt	r0, [r3, -r4, lsl #2]
 398:	042f8200 	strteq	r8, [pc], #-512	; 3a0 <_start-0x7c60>
 39c:	7fb80302 	svcvc	0x00b80302
 3a0:	03010482 	movweq	r0, #5250	; 0x1482
 3a4:	2f8200ca 	svccs	0x008200ca
 3a8:	b5030204 	strlt	r0, [r3, #-516]	; 0x204
 3ac:	0104827f 	tsteq	r4, pc, ror r2
 3b0:	8200cd03 	andhi	ip, r0, #3, 26	; 0xc0
 3b4:	0302042f 	movweq	r0, #9263	; 0x242f
 3b8:	04827fb2 	streq	r7, [r2], #4018	; 0xfb2
 3bc:	00d00301 	sbcseq	r0, r0, r1, lsl #6
 3c0:	02042f82 	andeq	r2, r4, #520	; 0x208
 3c4:	827faf03 	rsbshi	sl, pc, #3, 30
 3c8:	d4030104 	strle	r0, [r3], #-260	; 0x104
 3cc:	4c038200 	sfmmi	f0, 1, [r3], {-0}
 3d0:	83844c82 	orrhi	r4, r4, #33280	; 0x8200
 3d4:	2e360348 	cdpcs	3, 3, cr0, cr6, cr8, {2}
 3d8:	4a54034e 	bmi	1501118 <__bss_end__+0x14f7668>
 3dc:	324a2903 	subcc	r2, sl, #49152	; 0xc000
 3e0:	02009f34 	andeq	r9, r0, #52, 30	; 0xd0
 3e4:	4a060104 	bmi	1807fc <__bss_end__+0x176d4c>
 3e8:	4b4ebb06 	blmi	13af008 <__bss_end__+0x13a5558>
 3ec:	02002cbb 	andeq	r2, r0, #47872	; 0xbb00
 3f0:	2e060104 	adfcss	f0, f6, f4
 3f4:	a44c6d06 	strbge	r6, [ip], #-3334	; 0xd06
 3f8:	04020084 	streq	r0, [r2], #-132	; 0x84
 3fc:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 400:	02004dbb 	andeq	r4, r0, #11968	; 0x2ec0
 404:	004b0204 	subeq	r0, fp, r4, lsl #4
 408:	81020402 	tsthi	r2, r2, lsl #8
 40c:	01040200 	mrseq	r0, R12_usr
 410:	4d062e06 	stcmi	14, cr2, [r6, #-24]	; 0xffffffe8
 414:	4bbca54c 	blmi	fef2994c <__bss_end__+0xfef1fe9c>
 418:	002f4f4b 	eoreq	r4, pc, fp, asr #30
 41c:	06010402 	streq	r0, [r1], -r2, lsl #8
 420:	02008282 	andeq	r8, r0, #536870920	; 0x20000008
 424:	009e0404 	addseq	r0, lr, r4, lsl #8
 428:	4a010402 	bmi	41438 <__bss_end__+0x37988>
 42c:	bd88bd06 	stclt	13, cr11, [r8, #24]
 430:	084b4b2f 	stmdaeq	fp, {r0, r1, r2, r3, r5, r8, r9, fp, lr}^
 434:	02006724 	andeq	r6, r0, #36, 14	; 0x900000
 438:	002f0204 	eoreq	r0, pc, r4, lsl #4
 43c:	49020402 	stmdbmi	r2, {r1, sl}
 440:	01040200 	mrseq	r0, R12_usr
 444:	68062e06 	stmdavs	r6, {r1, r2, r9, sl, fp, sp}
 448:	a04b8634 	subge	r8, fp, r4, lsr r6
 44c:	01040200 	mrseq	r0, R12_usr
 450:	bb066606 	bllt	199c70 <__bss_end__+0x1901c0>
 454:	4b220868 	blmi	8825fc <__bss_end__+0x878b4c>
 458:	02bc4b67 	adcseq	r4, ip, #105472	; 0x19c00
 45c:	0101000a 	tsteq	r1, sl
 460:	00000102 	andeq	r0, r0, r2, lsl #2
 464:	00eb0002 	rsceq	r0, fp, r2
 468:	01020000 	mrseq	r0, (UNDEF: 2)
 46c:	000d0efb 	strdeq	r0, [sp], -fp
 470:	01010101 	tsteq	r1, r1, lsl #2
 474:	01000000 	mrseq	r0, (UNDEF: 0)
 478:	6c010000 	stcvs	0, cr0, [r1], {-0}
 47c:	00636269 	rsbeq	r6, r3, r9, ror #4
 480:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 484:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
 488:	432f6c61 	teqmi	pc, #24832	; 0x6100
 48c:	616c6c65 	cmnvs	ip, r5, ror #24
 490:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 494:	6f6e2d6d 	svcvs	0x006e2d6d
 498:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 49c:	2f696261 	svccs	0x00696261
 4a0:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 4a4:	73632d33 	cmnvc	r3, #3264	; 0xcc0
 4a8:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
 4ac:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 4b0:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
 4b4:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 4b8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 4bc:	61652d65 	cmnvs	r5, r5, ror #26
 4c0:	342f6962 	strtcc	r6, [pc], #-2402	; 4c8 <_start-0x7b38>
 4c4:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 4c8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 4cc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
 4d0:	73552f00 	cmpvc	r5, #0, 30
 4d4:	2f737265 	svccs	0x00737265
 4d8:	61697262 	cmnvs	r9, r2, ror #4
 4dc:	6e756a6e 	vsubvs.f32	s13, s10, s29
 4e0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 4e4:	706f746b 	rsbvc	r7, pc, fp, ror #8
 4e8:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 4ec:	2f6c6f6f 	svccs	0x006c6f6f
 4f0:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 4f4:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 4f8:	432f3032 	teqmi	pc, #50	; 0x32
 4fc:	30343153 	eorscc	r3, r4, r3, asr r1
 500:	73632f45 	cmnvc	r3, #276	; 0x114
 504:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 508:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 50c:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 370 <_start-0x7c90>
 510:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 514:	72700000 	rsbsvc	r0, r0, #0
 518:	6b746e69 	blvs	1d1bec4 <__bss_end__+0x1d12414>
 51c:	0100632e 	tsteq	r0, lr, lsr #6
 520:	74730000 	ldrbtvc	r0, [r3], #-0
 524:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
 528:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 52c:	623c0000 	eorsvs	r0, ip, #0
 530:	746c6975 	strbtvc	r6, [ip], #-2421	; 0x975
 534:	3e6e692d 	cdpcc	9, 6, cr6, cr14, cr13, {1}
 538:	00000000 	andeq	r0, r0, r0
 53c:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 540:	00030068 	andeq	r0, r3, r8, rrx
 544:	2d617600 	stclcs	6, cr7, [r1, #-0]
 548:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 54c:	682e6b74 	stmdavs	lr!, {r2, r4, r5, r6, r8, r9, fp, sp, lr}
 550:	00000100 	andeq	r0, r0, r0, lsl #2
 554:	02050000 	andeq	r0, r5, #0
 558:	000086e0 	andeq	r8, r0, r0, ror #13
 55c:	bf4b6b17 	svclt	0x004b6b17
 560:	000e0289 	andeq	r0, lr, r9, lsl #5
 564:	00960101 	addseq	r0, r6, r1, lsl #2
 568:	00020000 	andeq	r0, r2, r0
 56c:	0000006f 	andeq	r0, r0, pc, rrx
 570:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 574:	0101000d 	tsteq	r1, sp
 578:	00000101 	andeq	r0, r0, r1, lsl #2
 57c:	00000100 	andeq	r0, r0, r0, lsl #2
 580:	62696c01 	rsbvs	r6, r9, #256	; 0x100
 584:	552f0063 	strpl	r0, [pc, #-99]!	; 529 <_start-0x7ad7>
 588:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 58c:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 590:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 594:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 598:	6f746b73 	svcvs	0x00746b73
 59c:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 5a0:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 408 <_start-0x7bf8>
 5a4:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 5a8:	31726574 	cmncc	r2, r4, ror r5
 5ac:	2f303239 	svccs	0x00303239
 5b0:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 5b4:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 5b8:	30343173 	eorscc	r3, r4, r3, ror r1
 5bc:	30322d65 	eorscc	r2, r2, r5, ror #26
 5c0:	2f6e6977 	svccs	0x006e6977
 5c4:	7062696c 	rsbvc	r6, r2, ip, ror #18
 5c8:	70000069 	andvc	r0, r0, r9, rrx
 5cc:	2e6b7475 	mcrcs	4, 3, r7, cr11, cr5, {3}
 5d0:	00010063 	andeq	r0, r1, r3, rrx
 5d4:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 5d8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 5dc:	00000000 	andeq	r0, r0, r0
 5e0:	87380205 	ldrhi	r0, [r8, -r5, lsl #4]!
 5e4:	4c150000 	ldcmi	0, cr0, [r5], {-0}
 5e8:	0402002d 	streq	r0, [r2], #-45	; 0x2d
 5ec:	02002f02 	andeq	r2, r0, #2, 30
 5f0:	00490204 	subeq	r0, r9, r4, lsl #4
 5f4:	06010402 	streq	r0, [r1], -r2, lsl #8
 5f8:	026b062e 	rsbeq	r0, fp, #48234496	; 0x2e00000
 5fc:	01010006 	tsteq	r1, r6
 600:	000001dc 	ldrdeq	r0, [r0], -ip
 604:	00df0002 	sbcseq	r0, pc, r2
 608:	01020000 	mrseq	r0, (UNDEF: 2)
 60c:	000d0efb 	strdeq	r0, [sp], -fp
 610:	01010101 	tsteq	r1, r1, lsl #2
 614:	01000000 	mrseq	r0, (UNDEF: 0)
 618:	6c010000 	stcvs	0, cr0, [r1], {-0}
 61c:	00636269 	rsbeq	r6, r3, r9, ror #4
 620:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 624:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
 628:	432f6c61 	teqmi	pc, #24832	; 0x6100
 62c:	616c6c65 	cmnvs	ip, r5, ror #24
 630:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 634:	6f6e2d6d 	svcvs	0x006e2d6d
 638:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 63c:	2f696261 	svccs	0x00696261
 640:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 644:	73632d33 	cmnvc	r3, #3264	; 0xcc0
 648:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
 64c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 650:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
 654:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 658:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 65c:	61652d65 	cmnvs	r5, r5, ror #26
 660:	342f6962 	strtcc	r6, [pc], #-2402	; 668 <_start-0x7998>
 664:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 668:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 66c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
 670:	73552f00 	cmpvc	r5, #0, 30
 674:	2f737265 	svccs	0x00737265
 678:	61697262 	cmnvs	r9, r2, ror #4
 67c:	6e756a6e 	vsubvs.f32	s13, s10, s29
 680:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 684:	706f746b 	rsbvc	r7, pc, fp, ror #8
 688:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 68c:	2f6c6f6f 	svccs	0x006c6f6f
 690:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 694:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 698:	432f3032 	teqmi	pc, #50	; 0x32
 69c:	30343153 	eorscc	r3, r4, r3, asr r1
 6a0:	73632f45 	cmnvc	r3, #276	; 0x114
 6a4:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 6a8:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 6ac:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 510 <_start-0x7af0>
 6b0:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 6b4:	61760000 	cmnvs	r6, r0
 6b8:	6972702d 	ldmdbvs	r2!, {r0, r2, r3, r5, ip, sp, lr}^
 6bc:	2e6b746e 	cdpcs	4, 6, cr7, cr11, cr14, {3}
 6c0:	00010063 	andeq	r0, r1, r3, rrx
 6c4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
 6c8:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
 6cc:	00020068 	andeq	r0, r2, r8, rrx
 6d0:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 6d4:	0300682e 	movweq	r6, #2094	; 0x82e
 6d8:	623c0000 	eorsvs	r0, ip, #0
 6dc:	746c6975 	strbtvc	r6, [ip], #-2421	; 0x975
 6e0:	3e6e692d 	cdpcc	9, 6, cr6, cr14, cr13, {1}
 6e4:	00000000 	andeq	r0, r0, r0
 6e8:	02050000 	andeq	r0, r5, #0
 6ec:	0000876c 	andeq	r8, r0, ip, ror #14
 6f0:	01012603 	tsteq	r1, r3, lsl #12
 6f4:	2d3113a5 	ldccs	3, cr1, [r1, #-660]!	; 0xfffffd6c
 6f8:	02040200 	andeq	r0, r4, #0, 4
 6fc:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 700:	02002d02 	andeq	r2, r0, #2, 26	; 0x80
 704:	002f0204 	eoreq	r0, pc, r4, lsl #4
 708:	2d010402 	cfstrscs	mvf0, [r1, #-8]
 70c:	14304c4c 	ldrtne	r4, [r0], #-3148	; 0xc4c
 710:	004f2f4b 	subeq	r2, pc, fp, asr #30
 714:	67020402 	strvs	r0, [r2, -r2, lsl #8]
 718:	01040200 	mrseq	r0, R12_usr
 71c:	304d4c65 	subcc	r4, sp, r5, ror #24
 720:	30312fa0 	eorscc	r2, r1, r0, lsr #31
 724:	84162602 	ldrhi	r2, [r6], #-1538	; 0x602
 728:	02002c2d 	andeq	r2, r0, #11520	; 0x2d00
 72c:	00300104 	eorseq	r0, r0, r4, lsl #2
 730:	33010402 	movwcc	r0, #5122	; 0x1402
 734:	02006606 	andeq	r6, r0, #6291456	; 0x600000
 738:	002e0104 	eoreq	r0, lr, r4, lsl #2
 73c:	06010402 	streq	r0, [r1], -r2, lsl #8
 740:	2f672108 	svccs	0x00672108
 744:	03827303 	orreq	r7, r2, #201326592	; 0xc000000
 748:	02002e13 	andeq	r2, r0, #304	; 0x130
 74c:	2e060104 	adfcss	f0, f6, f4
 750:	01040200 	mrseq	r0, R12_usr
 754:	4b6a9f06 	blmi	1aa8374 <__bss_end__+0x1a9e8c4>
 758:	032e6703 	teqeq	lr, #786432	; 0xc0000
 75c:	02002e21 	andeq	r2, r0, #528	; 0x210
 760:	2e060104 	adfcss	f0, f6, f4
 764:	01040200 	mrseq	r0, R12_usr
 768:	02009f06 	andeq	r9, r0, #6, 30
 76c:	bd6a0104 	stflte	f0, [sl, #-16]!
 770:	7fa603f3 	svcvc	0x00a603f3
 774:	002f2008 	eoreq	r2, pc, r8
 778:	06010402 	streq	r0, [r1], -r2, lsl #8
 77c:	4bbb064a 	blmi	feec20ac <__bss_end__+0xfeeb85fc>
 780:	00da032f 	sbcseq	r0, sl, pc, lsr #6
 784:	484c83f2 	stmdami	ip, {r1, r4, r5, r6, r7, r8, r9, pc}^
 788:	842f2f31 	strthi	r2, [pc], #-3889	; 790 <_start-0x7870>
 78c:	4d2d2f4b 	stcmi	15, cr2, [sp, #-300]!	; 0xfffffed4
 790:	832f3031 	teqhi	pc, #49	; 0x31
 794:	01040200 	mrseq	r0, R12_usr
 798:	0200be2c 	andeq	fp, r0, #44, 28	; 0x2c0
 79c:	4a060104 	bmi	180bb4 <__bss_end__+0x177104>
 7a0:	3602bc06 	strcc	fp, [r2], -r6, lsl #24
 7a4:	ba0e0316 	blt	381404 <__bss_end__+0x377954>
 7a8:	08302108 	ldmdaeq	r0!, {r3, r8, sp}
 7ac:	21083121 	tstcs	r8, r1, lsr #2
 7b0:	30210830 	eorcc	r0, r1, r0, lsr r8
 7b4:	2108304b 	tstcs	r8, fp, asr #32
 7b8:	2f31d930 	svccs	0x0031d930
 7bc:	01040200 	mrseq	r0, R12_usr
 7c0:	04020065 	streq	r0, [r2], #-101	; 0x65
 7c4:	004a0602 	subeq	r0, sl, r2, lsl #12
 7c8:	06010402 	streq	r0, [r1], -r2, lsl #8
 7cc:	00664203 	rsbeq	r4, r6, r3, lsl #4
 7d0:	06020402 	streq	r0, [r2], -r2, lsl #8
 7d4:	c2030666 	andgt	r0, r3, #106954752	; 0x6600000
 7d8:	02684a00 	rsbeq	r4, r8, #0, 20
 7dc:	01010010 	tsteq	r1, r0, lsl r0
 7e0:	00000043 	andeq	r0, r0, r3, asr #32
 7e4:	00290002 	eoreq	r0, r9, r2
 7e8:	01020000 	mrseq	r0, (UNDEF: 2)
 7ec:	000d0efb 	strdeq	r0, [sp], -fp
 7f0:	01010101 	tsteq	r1, r1, lsl #2
 7f4:	01000000 	mrseq	r0, (UNDEF: 0)
 7f8:	63010000 	movwvs	r0, #4096	; 0x1000
 7fc:	30343173 	eorscc	r3, r4, r3, ror r1
 800:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 804:	63000063 	movwvs	r0, #99	; 0x63
 808:	65686361 	strbvs	r6, [r8, #-865]!	; 0x361
 80c:	0100632e 	tsteq	r0, lr, lsr #6
 810:	00000000 	andeq	r0, r0, r0
 814:	8c5c0205 	lfmhi	f0, 2, [ip], {5}
 818:	14140000 	ldrne	r0, [r4], #-0
 81c:	144e2f30 	strbne	r2, [lr], #-3888	; 0xf30
 820:	04022f31 	streq	r2, [r2], #-3889	; 0xf31
 824:	93010100 	movwls	r0, #4352	; 0x1100
 828:	02000000 	andeq	r0, r0, #0
 82c:	00007d00 	andeq	r7, r0, r0, lsl #26
 830:	fb010200 	blx	4103a <__bss_end__+0x3758a>
 834:	01000d0e 	tsteq	r0, lr, lsl #26
 838:	00010101 	andeq	r0, r1, r1, lsl #2
 83c:	00010000 	andeq	r0, r1, r0
 840:	73630100 	cmnvc	r3, #0, 2
 844:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 848:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 84c:	73552f00 	cmpvc	r5, #0, 30
 850:	2f737265 	svccs	0x00737265
 854:	61697262 	cmnvs	r9, r2, ror #4
 858:	6e756a6e 	vsubvs.f32	s13, s10, s29
 85c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 860:	706f746b 	rsbvc	r7, pc, fp, ror #8
 864:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 868:	2f6c6f6f 	svccs	0x006c6f6f
 86c:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 870:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 874:	432f3032 	teqmi	pc, #50	; 0x32
 878:	30343153 	eorscc	r3, r4, r3, asr r1
 87c:	73632f45 	cmnvc	r3, #276	; 0x114
 880:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 884:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 888:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 6ec <_start-0x7914>
 88c:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 890:	6c630000 	stclvs	0, cr0, [r3], #-0
 894:	2d6e6165 	stfcse	f6, [lr, #-404]!	; 0xfffffe6c
 898:	6f626572 	svcvs	0x00626572
 89c:	632e746f 	teqvs	lr, #1862270976	; 0x6f000000
 8a0:	00000100 	andeq	r0, r0, r0, lsl #2
 8a4:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 8a8:	00020068 	andeq	r0, r2, r8, rrx
 8ac:	05000000 	streq	r0, [r0, #-0]
 8b0:	008c7c02 	addeq	r7, ip, r2, lsl #24
 8b4:	832f1500 	teqhi	pc, #0, 10
 8b8:	0006024b 	andeq	r0, r6, fp, asr #4
 8bc:	00960101 	addseq	r0, r6, r1, lsl #2
 8c0:	00020000 	andeq	r0, r2, r0
 8c4:	00000077 	andeq	r0, r0, r7, ror r0
 8c8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 8cc:	0101000d 	tsteq	r1, sp
 8d0:	00000101 	andeq	r0, r0, r1, lsl #2
 8d4:	00000100 	andeq	r0, r0, r0, lsl #2
 8d8:	31736301 	cmncc	r3, r1, lsl #6
 8dc:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 8e0:	00637273 	rsbeq	r7, r3, r3, ror r2
 8e4:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 8e8:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 8ec:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 8f0:	2f6e756a 	svccs	0x006e756a
 8f4:	6b736544 	blvs	1cd9e0c <__bss_end__+0x1cd035c>
 8f8:	2f706f74 	svccs	0x00706f74
 8fc:	6f686373 	svcvs	0x00686373
 900:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 904:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 908:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 90c:	53432f30 	movtpl	r2, #16176	; 0x3f30
 910:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 914:	3173632f 	cmncc	r3, pc, lsr #6
 918:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 91c:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 920:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 924:	00697062 	rsbeq	r7, r9, r2, rrx
 928:	74736300 	ldrbtvc	r6, [r3], #-768	; 0x300
 92c:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
 930:	00010063 	andeq	r0, r1, r3, rrx
 934:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 938:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 93c:	00000000 	andeq	r0, r0, r0
 940:	8ca40205 	sfmhi	f0, 4, [r4], #20
 944:	32140000 	andscc	r0, r4, #0
 948:	2f2d2f31 	svccs	0x002d2f31
 94c:	01040200 	mrseq	r0, R12_usr
 950:	022f4d49 	eoreq	r4, pc, #4672	; 0x1240
 954:	01010006 	tsteq	r1, r6
 958:	00000099 	muleq	r0, r9, r0
 95c:	00770002 	rsbseq	r0, r7, r2
 960:	01020000 	mrseq	r0, (UNDEF: 2)
 964:	000d0efb 	strdeq	r0, [sp], -fp
 968:	01010101 	tsteq	r1, r1, lsl #2
 96c:	01000000 	mrseq	r0, (UNDEF: 0)
 970:	63010000 	movwvs	r0, #4096	; 0x1000
 974:	30343173 	eorscc	r3, r4, r3, ror r1
 978:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 97c:	552f0063 	strpl	r0, [pc, #-99]!	; 921 <_start-0x76df>
 980:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 984:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 988:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 98c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 990:	6f746b73 	svcvs	0x00746b73
 994:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 998:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 800 <_start-0x7800>
 99c:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 9a0:	31726574 	cmncc	r2, r4, ror r5
 9a4:	2f303239 	svccs	0x00303239
 9a8:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 9ac:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 9b0:	30343173 	eorscc	r3, r4, r3, ror r1
 9b4:	30322d65 	eorscc	r2, r2, r5, ror #26
 9b8:	2f6e6977 	svccs	0x006e6977
 9bc:	7062696c 	rsbvc	r6, r2, ip, ror #18
 9c0:	72000069 	andvc	r0, r0, #105	; 0x69
 9c4:	6f6f6265 	svcvs	0x006f6265
 9c8:	00632e74 	rsbeq	r2, r3, r4, ror lr
 9cc:	72000001 	andvc	r0, r0, #1
 9d0:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 9d4:	00000200 	andeq	r0, r0, r0, lsl #4
 9d8:	02050000 	andeq	r0, r5, #0
 9dc:	00008cd8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
 9e0:	14010d03 	strne	r0, [r1], #-3331	; 0xd03
 9e4:	15852f31 	strne	r2, [r5, #3889]	; 0xf31
 9e8:	2f4d4b2f 	svccs	0x004d4b2f
 9ec:	67523567 	ldrbvs	r3, [r2, -r7, ror #10]
 9f0:	01001002 	tsteq	r0, r2
 9f4:	0000a501 	andeq	sl, r0, r1, lsl #10
 9f8:	76000200 	strvc	r0, [r0], -r0, lsl #4
 9fc:	02000000 	andeq	r0, r0, #0
 a00:	0d0efb01 	vstreq	d15, [lr, #-4]
 a04:	01010100 	mrseq	r0, (UNDEF: 17)
 a08:	00000001 	andeq	r0, r0, r1
 a0c:	01000001 	tsteq	r0, r1
 a10:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 a14:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
 a18:	2f006372 	svccs	0x00006372
 a1c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 a20:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 a24:	6a6e6169 	bvs	1b98fd0 <__bss_end__+0x1b8f520>
 a28:	442f6e75 	strtmi	r6, [pc], #-3701	; a30 <_start-0x75d0>
 a2c:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 a30:	732f706f 	teqvc	pc, #111	; 0x6f
 a34:	6f6f6863 	svcvs	0x006f6863
 a38:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 a3c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 a40:	30323931 	eorscc	r3, r2, r1, lsr r9
 a44:	3153432f 	cmpcc	r3, pc, lsr #6
 a48:	2f453034 	svccs	0x00453034
 a4c:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 a50:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 a54:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 a58:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 a5c:	00006970 	andeq	r6, r0, r0, ror r9
 a60:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 a64:	00632e72 	rsbeq	r2, r3, r2, ror lr
 a68:	72000001 	andvc	r0, r0, #1
 a6c:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 a70:	00000200 	andeq	r0, r0, r0, lsl #4
 a74:	02050000 	andeq	r0, r5, #0
 a78:	00008d4c 	andeq	r8, r0, ip, asr #26
 a7c:	2d2f1316 	stccs	3, cr1, [pc, #-88]!	; a2c <_start-0x75d4>
 a80:	01040200 	mrseq	r0, R12_usr
 a84:	68062e06 	stmdavs	r6, {r1, r2, r9, sl, fp, sp}
 a88:	4d4b2f31 	stclmi	15, cr2, [fp, #-196]	; 0xffffff3c
 a8c:	304b2f2f 	subcc	r2, fp, pc, lsr #30
 a90:	2f4c4b4c 	svccs	0x004c4b4c
 a94:	842f2f6a 	strthi	r2, [pc], #-3946	; a9c <_start-0x7564>
 a98:	0008022f 	andeq	r0, r8, pc, lsr #4
 a9c:	00770101 	rsbseq	r0, r7, r1, lsl #2
 aa0:	00020000 	andeq	r0, r2, r0
 aa4:	0000003b 	andeq	r0, r0, fp, lsr r0
 aa8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 aac:	0101000d 	tsteq	r1, sp
 ab0:	00000101 	andeq	r0, r0, r1, lsl #2
 ab4:	00000100 	andeq	r0, r0, r0, lsl #2
 ab8:	31736301 	cmncc	r3, r1, lsl #6
 abc:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 ac0:	00637273 	rsbeq	r7, r3, r3, ror r2
 ac4:	72617500 	rsbvc	r7, r1, #0, 10
 ac8:	00632e74 	rsbeq	r2, r3, r4, ror lr
 acc:	67000000 	strvs	r0, [r0, -r0]
 ad0:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
 ad4:	00010068 	andeq	r0, r1, r8, rrx
 ad8:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 adc:	0000682e 	andeq	r6, r0, lr, lsr #16
 ae0:	00000000 	andeq	r0, r0, r0
 ae4:	8e480205 	cdphi	2, 4, cr0, cr8, cr5, {0}
 ae8:	d6030000 	strle	r0, [r3], -r0
 aec:	672f0100 	strvs	r0, [pc, -r0, lsl #2]!
 af0:	30665e03 	rsbcc	r5, r6, r3, lsl #28
 af4:	306d6733 	rsbcc	r6, sp, r3, lsr r7
 af8:	676730d8 			; <UNDEFINED> instruction: 0x676730d8
 afc:	68676767 	stmdavs	r7!, {r0, r1, r2, r5, r6, r8, r9, sl, sp, lr}^
 b00:	30820a03 	addcc	r0, r2, r3, lsl #20
 b04:	2f696767 	svccs	0x00696767
 b08:	674c6a67 	strbvs	r6, [ip, -r7, ror #20]
 b0c:	302f2fc1 	eorcc	r2, pc, r1, asr #31
 b10:	3049682f 	subcc	r6, r9, pc, lsr #16
 b14:	01000202 	tsteq	r0, r2, lsl #4
 b18:	0000a501 	andeq	sl, r0, r1, lsl #10
 b1c:	32000200 	andcc	r0, r0, #0, 4
 b20:	02000000 	andeq	r0, r0, #0
 b24:	0d0efb01 	vstreq	d15, [lr, #-4]
 b28:	01010100 	mrseq	r0, (UNDEF: 17)
 b2c:	00000001 	andeq	r0, r0, r1
 b30:	01000001 	tsteq	r0, r1
 b34:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 b38:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
 b3c:	00006372 	andeq	r6, r0, r2, ror r3
 b40:	6f697067 	svcvs	0x00697067
 b44:	0000632e 	andeq	r6, r0, lr, lsr #6
 b48:	70670000 	rsbvc	r0, r7, r0
 b4c:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
 b50:	00000100 	andeq	r0, r0, r0, lsl #2
 b54:	02050000 	andeq	r0, r5, #0
 b58:	00008f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
 b5c:	4e013e03 	cdpmi	14, 0, cr3, cr1, cr3, {0}
 b60:	21086950 	tstcs	r8, r0, asr r9
 b64:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
 b68:	4b326767 	blmi	c9a90c <__bss_end__+0xc90e5c>
 b6c:	31dc2208 	bicscc	r2, ip, r8, lsl #4
 b70:	504e1351 	subpl	r1, lr, r1, asr r3
 b74:	5031be30 	eorspl	fp, r1, r0, lsr lr
 b78:	304f4d13 	subcc	r4, pc, r3, lsl sp	; <UNPREDICTABLE>
 b7c:	69504cc0 	ldmdbvs	r0, {r6, r7, sl, fp, lr}^
 b80:	67672108 	strbvs	r2, [r7, -r8, lsl #2]!
 b84:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
 b88:	21084b32 	tstcs	r8, r2, lsr fp
 b8c:	2f504ca4 	svccs	0x00504ca4
 b90:	75036984 	strvc	r6, [r3, #-2436]	; 0x984
 b94:	2e0c0382 	cdpcs	3, 0, cr0, cr12, cr2, {4}
 b98:	034e304d 	movteq	r3, #57421	; 0xe04d
 b9c:	514a7f98 			; <UNDEFINED> instruction: 0x514a7f98
 ba0:	30504e13 	subscc	r4, r0, r3, lsl lr
 ba4:	4d1350a5 	ldcmi	0, cr5, [r3, #-660]	; 0xfffffd6c
 ba8:	c203304f 	andgt	r3, r3, #79	; 0x4f
 bac:	6b6aba00 	blvs	1aaf3b4 <__bss_end__+0x1aa5904>
 bb0:	67210869 	strvs	r0, [r1, -r9, ror #16]!
 bb4:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
 bb8:	084b3267 	stmdaeq	fp, {r0, r1, r2, r5, r6, r9, ip, sp}^
 bbc:	000c0222 	andeq	r0, ip, r2, lsr #4
 bc0:	00860101 	addeq	r0, r6, r1, lsl #2
 bc4:	00020000 	andeq	r0, r2, r0
 bc8:	00000072 	andeq	r0, r0, r2, ror r0
 bcc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 bd0:	0101000d 	tsteq	r1, sp
 bd4:	00000101 	andeq	r0, r0, r1, lsl #2
 bd8:	00000100 	andeq	r0, r0, r0, lsl #2
 bdc:	62696c01 	rsbvs	r6, r9, #256	; 0x100
 be0:	552f0063 	strpl	r0, [pc, #-99]!	; b85 <_start-0x747b>
 be4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 be8:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 bec:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 bf0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 bf4:	6f746b73 	svcvs	0x00746b73
 bf8:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 bfc:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; a64 <_start-0x759c>
 c00:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 c04:	31726574 	cmncc	r2, r4, ror r5
 c08:	2f303239 	svccs	0x00303239
 c0c:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 c10:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 c14:	30343173 	eorscc	r3, r4, r3, ror r1
 c18:	30322d65 	eorscc	r2, r2, r5, ror #26
 c1c:	2f6e6977 	svccs	0x006e6977
 c20:	7062696c 	rsbvc	r6, r2, ip, ror #18
 c24:	70000069 	andvc	r0, r0, r9, rrx
 c28:	68637475 	stmdavs	r3!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
 c2c:	632e7261 	teqvs	lr, #268435462	; 0x10000006
 c30:	00000100 	andeq	r0, r0, r0, lsl #2
 c34:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 c38:	00020068 	andeq	r0, r2, r8, rrx
 c3c:	05000000 	streq	r0, [r0, #-0]
 c40:	00934802 	addseq	r4, r3, r2, lsl #16
 c44:	024a1400 	subeq	r1, sl, #0, 8
 c48:	01010006 	tsteq	r1, r6

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6c637963 	stclvs	9, cr7, [r3], #-396	; 0xfffffe74
   4:	65705f65 	ldrbvs	r5, [r0, #-3941]!	; 0xf65
   8:	69625f72 	stmdbvs	r2!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   c:	2d310074 	ldccs	0, cr0, [r1, #-464]!	; 0xfffffe30
  10:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
  14:	7365742d 	cmnvc	r5, #754974720	; 0x2d000000
  18:	00632e74 	rsbeq	r2, r3, r4, ror lr
  1c:	755f7773 	ldrbvc	r7, [pc, #-1907]	; fffff8b1 <__bss_end__+0xffff5e01>
  20:	5f747261 	svcpl	0x00747261
  24:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
  28:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
  2c:	00726570 	rsbseq	r6, r2, r0, ror r5
  30:	20554e47 	subscs	r4, r5, r7, asr #28
  34:	2e342043 	cdpcs	0, 3, cr2, cr4, cr3, {2}
  38:	20332e38 	eorscs	r2, r3, r8, lsr lr
  3c:	70636d2d 	rsbvc	r6, r3, sp, lsr #26
  40:	72613d75 	rsbvc	r3, r1, #7488	; 0x1d40
  44:	3731316d 	ldrcc	r3, [r1, -sp, ror #2]!
  48:	667a6a36 			; <UNDEFINED> instruction: 0x667a6a36
  4c:	2d20732d 	stccs	3, cr7, [r0, #-180]!	; 0xffffff4c
  50:	6e75746d 	cdpvs	4, 7, cr7, cr5, cr13, {3}
  54:	72613d65 	rsbvc	r3, r1, #6464	; 0x1940
  58:	3731316d 	ldrcc	r3, [r1, -sp, ror #2]!
  5c:	667a6a36 			; <UNDEFINED> instruction: 0x667a6a36
  60:	2d20732d 	stccs	3, cr7, [r0, #-180]!	; 0xffffff4c
  64:	62646767 	rsbvs	r6, r4, #27000832	; 0x19c0000
  68:	674f2d20 	strbvs	r2, [pc, -r0, lsr #26]
  6c:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xd20
  70:	6e673d64 	cdpvs	13, 6, cr3, cr7, cr4, {3}
  74:	20393975 	eorscs	r3, r9, r5, ror r9
  78:	7266662d 	rsbvc	r6, r6, #47185920	; 0x2d00000
  7c:	74736565 	ldrbtvc	r6, [r3], #-1381	; 0x565
  80:	69646e61 	stmdbvs	r4!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  84:	6e00676e 	cdpvs	7, 0, cr6, cr0, cr14, {3}
  88:	616d746f 	cmnvs	sp, pc, ror #8
  8c:	75006e69 	strvc	r6, [r0, #-3689]	; 0xe69
  90:	5f747261 	svcpl	0x00747261
  94:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
  98:	5f777300 	svcpl	0x00777300
  9c:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
  a0:	6972705f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
  a4:	006b746e 	rsbeq	r7, fp, lr, ror #8
  a8:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  ac:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
  b0:	61686320 	cmnvs	r8, r0, lsr #6
  b4:	65640072 	strbvs	r0, [r4, #-114]!	; 0x72
  b8:	5f79616c 	svcpl	0x0079616c
  bc:	6300736d 	movwvs	r7, #877	; 0x36d
  c0:	6e61656c 	cdpvs	5, 6, cr6, cr1, cr12, {3}
  c4:	6265725f 	rsbvs	r7, r5, #-268435451	; 0xf0000005
  c8:	00746f6f 	rsbseq	r6, r4, pc, ror #30
  cc:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
  d0:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
  d4:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
  d8:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
  dc:	7300746e 	movwvc	r7, #1134	; 0x46e
  e0:	61755f77 	cmnvs	r5, r7, ror pc
  e4:	745f7472 	ldrbvc	r7, [pc], #-1138	; ec <_start-0x7f14>
  e8:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
  ec:	6f6c2067 	svcvs	0x006c2067
  f0:	7520676e 	strvc	r6, [r0, #-1902]!	; 0x76e
  f4:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  f8:	2064656e 	rsbcs	r6, r4, lr, ror #10
  fc:	00746e69 	rsbseq	r6, r4, r9, ror #28
 100:	746e6975 	strbtvc	r6, [lr], #-2421	; 0x975
 104:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 108:	64756162 	ldrbtvs	r6, [r5], #-354	; 0x162
 10c:	5f777300 	svcpl	0x00777300
 110:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 114:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 118:	69745f63 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
 11c:	756f656d 	strbvc	r6, [pc, #-1389]!	; fffffbb7 <__bss_end__+0xffff6107>
 120:	69730074 	ldmdbvs	r3!, {r2, r4, r5, r6}^
 124:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
 128:	6c006570 	cfstr32vs	mvfx6, [r0], {112}	; 0x70
 12c:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 130:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 134:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
 138:	6f687300 	svcvs	0x00687300
 13c:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
 140:	6500746e 	strvs	r7, [r0, #-1134]	; 0x46e
 144:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
 148:	61635f65 	cmnvs	r3, r5, ror #30
 14c:	00656863 	rsbeq	r6, r5, r3, ror #16
 150:	746e6975 	strbtvc	r6, [lr], #-2421	; 0x975
 154:	745f3233 	ldrbvc	r3, [pc], #-563	; 15c <_start-0x7ea4>
 158:	73552f00 	cmpvc	r5, #0, 30
 15c:	2f737265 	svccs	0x00737265
 160:	61697262 	cmnvs	r9, r2, ror #4
 164:	6e756a6e 	vsubvs.f32	s13, s10, s29
 168:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 16c:	706f746b 	rsbvc	r7, pc, fp, ror #8
 170:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 174:	2f6c6f6f 	svccs	0x006c6f6f
 178:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 17c:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 180:	432f3032 	teqmi	pc, #50	; 0x32
 184:	30343153 	eorscc	r3, r4, r3, asr r1
 188:	73632f45 	cmnvc	r3, #276	; 0x114
 18c:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 190:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 194:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; fffffff8 <__bss_end__+0xffff6548>
 198:	2f736261 	svccs	0x00736261
 19c:	65642d38 	strbvs	r2, [r4, #-3384]!	; 0xd38
 1a0:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
 1a4:	746e692d 	strbtvc	r6, [lr], #-2349	; 0x92d
 1a8:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
 1ac:	2f737470 	svccs	0x00737470
 1b0:	742d3030 	strtvc	r3, [sp], #-48	; 0x30
 1b4:	2d747365 	ldclcs	3, cr7, [r4, #-404]!	; 0xfffffe6c
 1b8:	752d7773 	strvc	r7, [sp, #-1907]!	; 0x773
 1bc:	00747261 	rsbseq	r7, r4, r1, ror #4
 1c0:	5f637963 	svcpl	0x00637963
 1c4:	5f726570 	svcpl	0x00726570
 1c8:	00746962 	rsbseq	r6, r4, r2, ror #18
 1cc:	74697277 	strbtvc	r7, [r9], #-631	; 0x277
 1d0:	79635f65 	stmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 1d4:	6e755f63 	cdpvs	15, 7, cr5, cr5, cr3, {3}
 1d8:	006c6974 	rsbeq	r6, ip, r4, ror r9
 1dc:	755f7773 	ldrbvc	r7, [pc, #-1907]	; fffffa71 <__bss_end__+0xffff5fc1>
 1e0:	5f747261 	svcpl	0x00747261
 1e4:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
 1e8:	746e755f 	strbtvc	r7, [lr], #-1375	; 0x55f
 1ec:	5f006c69 	svcpl	0x00006c69
 1f0:	5f61765f 	svcpl	0x0061765f
 1f4:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
 1f8:	5f777300 	svcpl	0x00777300
 1fc:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 200:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 204:	65640063 	strbvs	r0, [r4, #-99]!	; 0x63
 208:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
 20c:	65640064 	strbvs	r0, [r4, #-100]!	; 0x64
 210:	5f79616c 	svcpl	0x0079616c
 214:	6379636e 	cmnvs	r9, #-1207959551	; 0xb8000001
 218:	0073656c 	rsbseq	r6, r3, ip, ror #10
 21c:	55465f5f 	strbpl	r5, [r6, #-3935]	; 0xf5f
 220:	4954434e 	ldmdbmi	r4, {r1, r2, r3, r6, r8, r9, lr}^
 224:	5f5f4e4f 	svcpl	0x005f4e4f
 228:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
 22c:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
 230:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0x55f
 234:	77730063 	ldrbvc	r0, [r3, -r3, rrx]!
 238:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 23c:	75705f74 	ldrbvc	r5, [r0, #-3956]!	; 0xf74
 240:	73006374 	movwvc	r6, #884	; 0x374
 244:	61755f77 	cmnvs	r5, r7, ror pc
 248:	705f7472 	subsvc	r7, pc, r2, ror r4	; <UNPREDICTABLE>
 24c:	006b7475 	rsbeq	r7, fp, r5, ror r4
 250:	705f6176 	subsvc	r6, pc, r6, ror r1	; <UNPREDICTABLE>
 254:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 258:	7067006b 	rsbvc	r0, r7, fp, rrx
 25c:	725f6f69 	subsvc	r6, pc, #420	; 0x1a4
 260:	00646165 	rsbeq	r6, r4, r5, ror #2
 264:	752d7773 	strvc	r7, [sp, #-1907]!	; 0x773
 268:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
 26c:	68630063 	stmdavs	r3!, {r0, r1, r5, r6}^
 270:	695f7261 	ldmdbvs	pc, {r0, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
 274:	5f5f006e 	svcpl	0x005f006e
 278:	63756e67 	cmnvs	r5, #1648	; 0x670
 27c:	5f61765f 	svcpl	0x0061765f
 280:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
 284:	5f777300 	svcpl	0x00777300
 288:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 28c:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 290:	69745f73 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 294:	756f656d 	strbvc	r6, [pc, #-1389]!	; fffffd2f <__bss_end__+0xffff627f>
 298:	6f5f0074 	svcvs	0x005f0074
 29c:	74007475 	strvc	r7, [r0], #-1141	; 0x475
 2a0:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 2a4:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 2a8:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0x55f
 2ac:	61725f63 	cmnvs	r2, r3, ror #30
 2b0:	626e0077 	rsbvs	r0, lr, #119	; 0x77
 2b4:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
 2b8:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 2bc:	72775f6f 	rsbsvc	r5, r7, #444	; 0x1bc
 2c0:	00657469 	rsbeq	r7, r5, r9, ror #8
 2c4:	63657375 	cmnvs	r5, #-738197503	; 0xd4000001
 2c8:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
 2cc:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
 2d0:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 2d4:	65735f6f 	ldrbvs	r5, [r3, #-3951]!	; 0xf6f
 2d8:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
 2dc:	00747570 	rsbseq	r7, r4, r0, ror r5
 2e0:	755f7773 	ldrbvc	r7, [pc, #-1907]	; fffffb75 <__bss_end__+0xffff60c5>
 2e4:	5f747261 	svcpl	0x00747261
 2e8:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
 2ec:	746e755f 	strbtvc	r7, [lr], #-1375	; 0x55f
 2f0:	625f6c69 	subsvs	r6, pc, #26880	; 0x6900
 2f4:	5f006b6c 	svcpl	0x00006b6c
 2f8:	0070615f 	rsbseq	r6, r0, pc, asr r1
 2fc:	6f697067 	svcvs	0x00697067
 300:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
 304:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xf5f
 308:	00747570 	rsbseq	r7, r4, r0, ror r5
 30c:	74696177 	strbtvc	r6, [r9], #-375	; 0x177
 310:	746e755f 	strbtvc	r7, [lr], #-1375	; 0x55f
 314:	755f6c69 	ldrbvc	r6, [pc, #-3177]	; fffff6b3 <__bss_end__+0xffff5c03>
 318:	00636573 	rsbeq	r6, r3, r3, ror r5
 31c:	73677261 	cmnvc	r7, #268435462	; 0x10000006
 320:	62696c00 	rsbvs	r6, r9, #0, 24
 324:	72702f63 	rsbsvc	r2, r0, #396	; 0x18c
 328:	6b746e69 	blvs	1d1bcd4 <__bss_end__+0x1d12224>
 32c:	2f00632e 	svccs	0x0000632e
 330:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 334:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 338:	6a6e6169 	bvs	1b988e4 <__bss_end__+0x1b8ee34>
 33c:	442f6e75 	strtmi	r6, [pc], #-3701	; 344 <_start-0x7cbc>
 340:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 344:	732f706f 	teqvc	pc, #111	; 0x6f
 348:	6f6f6863 	svcvs	0x006f6863
 34c:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 350:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 354:	30323931 	eorscc	r3, r2, r1, lsr r9
 358:	3153432f 	cmpcc	r3, pc, lsr #6
 35c:	2f453034 	svccs	0x00453034
 360:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 364:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 368:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 36c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 370:	6c006970 	stcvs	9, cr6, [r0], {112}	; 0x70
 374:	2f636269 	svccs	0x00636269
 378:	6b747570 	blvs	1d1d940 <__bss_end__+0x1d13e90>
 37c:	6900632e 	stmdbvs	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
 380:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 384:	5f6c616e 	svcpl	0x006c616e
 388:	6b747570 	blvs	1d1d950 <__bss_end__+0x1d13ea0>
 38c:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 390:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
 394:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 398:	67656e00 	strbvs	r6, [r5, -r0, lsl #28]!
 39c:	7200705f 	andvc	r7, r0, #95	; 0x5f
 3a0:	72657665 	rsbvc	r7, r5, #105906176	; 0x6500000
 3a4:	69006573 	stmdbvs	r0, {r0, r1, r4, r5, r6, r8, sl, sp, lr}
 3a8:	67696473 			; <UNDEFINED> instruction: 0x67696473
 3ac:	70007469 	andvc	r7, r0, r9, ror #8
 3b0:	5f737475 	svcpl	0x00737475
 3b4:	62007066 	andvs	r7, r0, #102	; 0x66
 3b8:	00657361 	rsbeq	r7, r5, r1, ror #6
 3bc:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
 3c0:	705f6465 	subsvc	r6, pc, r5, ror #8
 3c4:	62696c00 	rsbvs	r6, r9, #0, 24
 3c8:	61762f63 	cmnvs	r6, r3, ror #30
 3cc:	6972702d 	ldmdbvs	r2!, {r0, r2, r3, r5, ip, sp, lr}^
 3d0:	2e6b746e 	cdpcs	4, 6, cr7, cr11, cr14, {3}
 3d4:	70720063 	rsbsvc	r0, r2, r3, rrx
 3d8:	65735f69 	ldrbvs	r5, [r3, #-3945]!	; 0xf69
 3dc:	756f5f74 	strbvc	r5, [pc, #-3956]!	; fffff470 <__bss_end__+0xffff59c0>
 3e0:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
 3e4:	64697700 	strbtvs	r7, [r9], #-1792	; 0x700
 3e8:	70006874 	andvc	r6, r0, r4, ror r8
 3ec:	5f637475 	svcpl	0x00637475
 3f0:	65007066 	strvs	r7, [r0, #-102]	; 0x66
 3f4:	0074696d 	rsbseq	r6, r4, sp, ror #18
 3f8:	61736964 	cmnvs	r3, r4, ror #18
 3fc:	5f656c62 	svcpl	0x00656c62
 400:	68636163 	stmdavs	r3!, {r0, r1, r5, r6, r8, sp, lr}^
 404:	73630065 	cmnvc	r3, #101	; 0x65
 408:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 40c:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 410:	6361632f 	cmnvs	r1, #-1140850688	; 0xbc000000
 414:	632e6568 	teqvs	lr, #104, 10	; 0x1a000000
 418:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 41c:	6265725f 	rsbvs	r7, r5, #-268435451	; 0xf0000005
 420:	00746f6f 	rsbseq	r6, r4, pc, ror #30
 424:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 428:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
 42c:	632f6372 	teqvs	pc, #-939524095	; 0xc8000001
 430:	6e61656c 	cdpvs	5, 6, cr6, cr1, cr12, {3}
 434:	6265722d 	rsbvs	r7, r5, #-805306366	; 0xd0000002
 438:	2e746f6f 	cdpcs	15, 7, cr6, cr4, cr15, {3}
 43c:	73630063 	cmnvc	r3, #99	; 0x63
 440:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 444:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 448:	7473632f 	ldrbtvc	r6, [r3], #-815	; 0x32f
 44c:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
 450:	5f5f0063 	svcpl	0x005f0063
 454:	5f737362 	svcpl	0x00737362
 458:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 45c:	005f5f74 	subseq	r5, pc, r4, ror pc	; <UNPREDICTABLE>
 460:	73625f5f 	cmnvc	r2, #380	; 0x17c
 464:	6e655f73 	mcrvs	15, 3, r5, cr5, cr3, {3}
 468:	005f5f64 	subseq	r5, pc, r4, ror #30
 46c:	5f737362 	svcpl	0x00737362
 470:	00646e65 	rsbeq	r6, r4, r5, ror #28
 474:	7473635f 	ldrbtvc	r6, [r3], #-863	; 0x35f
 478:	00747261 	rsbseq	r7, r4, r1, ror #4
 47c:	755f7461 	ldrbvc	r7, [pc, #-1121]	; 23 <_start-0x7fdd>
 480:	5f726573 	svcpl	0x00726573
 484:	6576656c 	ldrbvs	r6, [r6, #-1388]!	; 0x56c
 488:	4d50006c 	ldclmi	0, cr0, [r0, #-432]	; 0xfffffe50
 48c:	5341505f 	movtpl	r5, #4191	; 0x105f
 490:	524f5753 	subpl	r5, pc, #21757952	; 0x14c0000
 494:	73630044 	cmnvc	r3, #68	; 0x44
 498:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 49c:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 4a0:	6265722f 	rsbvs	r7, r5, #-268435454	; 0xf0000002
 4a4:	2e746f6f 	cdpcs	15, 7, cr6, cr4, cr15, {3}
 4a8:	4d500063 	ldclmi	0, cr0, [r0, #-396]	; 0xfffffe74
 4ac:	5453525f 	ldrbpl	r5, [r3], #-607	; 0x25f
 4b0:	52575f43 	subspl	r5, r7, #268	; 0x10c
 4b4:	5f474643 	svcpl	0x00474643
 4b8:	4c4c5546 	cfstr64mi	mvdx5, [ip], {70}	; 0x46
 4bc:	5345525f 	movtpl	r5, #21087	; 0x525f
 4c0:	50005445 	andpl	r5, r0, r5, asr #8
 4c4:	44575f4d 	ldrbmi	r5, [r7], #-3917	; 0xf4d
 4c8:	7300474f 	movwvc	r4, #1871	; 0x74f
 4cc:	755f7465 	ldrbvc	r7, [pc, #-1125]	; 6f <_start-0x7f91>
 4d0:	5f726573 	svcpl	0x00726573
 4d4:	6576656c 	ldrbvs	r6, [r6, #-1388]!	; 0x56c
 4d8:	5550006c 	ldrbpl	r0, [r0, #-108]	; 0x6c
 4dc:	00323354 	eorseq	r3, r2, r4, asr r3
 4e0:	525f4d50 	subspl	r4, pc, #80, 26	; 0x1400
 4e4:	00435453 	subeq	r5, r3, r3, asr r4
 4e8:	72737063 	rsbsvc	r7, r3, #99	; 0x63
 4ec:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
 4f0:	7261625f 	rsbvc	r6, r1, #-268435451	; 0xf0000005
 4f4:	72656972 	rsbvc	r6, r5, #1867776	; 0x1c8000
 4f8:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 4fc:	735f7961 	cmpvc	pc, #1589248	; 0x184000
 500:	63006365 	movwvs	r6, #869	; 0x365
 504:	30343173 	eorscc	r3, r4, r3, ror r1
 508:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 50c:	69742f63 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
 510:	2e72656d 	cdpcs	5, 7, cr6, cr2, cr13, {3}
 514:	45470063 	strbmi	r0, [r7, #-99]	; 0x63
 518:	00323354 	eorseq	r3, r2, r4, asr r3
 51c:	6b636974 	blvs	18daaf4 <__bss_end__+0x18d1044>
 520:	65640073 	strbvs	r0, [r4, #-115]!	; 0x73
 524:	5f79616c 	svcpl	0x0079616c
 528:	6c637963 	stclvs	9, cr7, [r3], #-396	; 0xfffffe74
 52c:	64007365 	strvs	r7, [r0], #-869	; 0x365
 530:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 534:	0073755f 	rsbseq	r7, r3, pc, asr r5
 538:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 53c:	65675f72 	strbvs	r5, [r7, #-3954]!	; 0xf72
 540:	73755f74 	cmnvc	r5, #116, 30	; 0x1d0
 544:	41006365 	tstmi	r0, r5, ror #6
 548:	4d5f5855 	ldclmi	8, cr5, [pc, #-340]	; 3fc <_start-0x7c04>
 54c:	434d5f55 	movtmi	r5, #57173	; 0xdf55
 550:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xf52
 554:	55410047 	strbpl	r0, [r1, #-71]	; 0x47
 558:	554d5f58 	strbpl	r5, [sp, #-3928]	; 0xf58
 55c:	5f4f495f 	svcpl	0x004f495f
 560:	00474552 	subeq	r4, r7, r2, asr r5
 564:	5f585541 	svcpl	0x00585541
 568:	4d5f554d 	cfldr64mi	mvdx5, [pc, #-308]	; 43c <_start-0x7bc4>
 56c:	525f5253 	subspl	r5, pc, #805306373	; 0x30000005
 570:	47004745 	strmi	r4, [r0, -r5, asr #14]
 574:	5f4f4950 	svcpl	0x004f4950
 578:	434e5546 	movtmi	r5, #58694	; 0xe546
 57c:	544c415f 	strbpl	r4, [ip], #-351	; 0x15f
 580:	61750030 	cmnvs	r5, r0, lsr r0
 584:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
 588:	675f6e61 	ldrbvs	r6, [pc, -r1, ror #28]
 58c:	00637465 	rsbeq	r7, r3, r5, ror #8
 590:	5f585541 	svcpl	0x00585541
 594:	435f554d 	cmpmi	pc, #322961408	; 0x13400000
 598:	5f4c544e 	svcpl	0x004c544e
 59c:	00474552 	subeq	r4, r7, r2, asr r5
 5a0:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 5a4:	7361685f 	cmnvc	r1, #6225920	; 0x5f0000
 5a8:	7461645f 	strbtvc	r6, [r1], #-1119	; 0x45f
 5ac:	50470061 	subpl	r0, r7, r1, rrx
 5b0:	465f4f49 	ldrbmi	r4, [pc], -r9, asr #30
 5b4:	5f434e55 	svcpl	0x00434e55
 5b8:	5054554f 	subspl	r5, r4, pc, asr #10
 5bc:	47005455 	smlsdmi	r0, r5, r4, r5
 5c0:	5f4f4950 	svcpl	0x004f4950
 5c4:	434e5546 	movtmi	r5, #58694	; 0xe546
 5c8:	544c415f 	strbpl	r4, [ip], #-351	; 0x15f
 5cc:	50470031 	subpl	r0, r7, r1, lsr r0
 5d0:	465f4f49 	ldrbmi	r4, [pc], -r9, asr #30
 5d4:	5f434e55 	svcpl	0x00434e55
 5d8:	32544c41 	subscc	r4, r4, #16640	; 0x4100
 5dc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 5e0:	55465f4f 	strbpl	r5, [r6, #-3919]	; 0xf4f
 5e4:	415f434e 	cmpmi	pc, lr, asr #6
 5e8:	0033544c 	eorseq	r5, r3, ip, asr #8
 5ec:	4f495047 	svcmi	0x00495047
 5f0:	4e55465f 	mrcmi	6, 2, r4, cr5, cr15, {2}
 5f4:	4c415f43 	mcrrmi	15, 4, r5, r1, cr3
 5f8:	41003554 	tstmi	r0, r4, asr r5
 5fc:	4d5f5855 	ldclmi	8, cr5, [pc, #-340]	; 4b0 <_start-0x7b50>
 600:	45495f55 	strbmi	r5, [r9, #-3925]	; 0xf55
 604:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xf52
 608:	75700047 	ldrbvc	r0, [r0, #-71]!	; 0x47
 60c:	00323374 	eorseq	r3, r2, r4, ror r3
 610:	5f585541 	svcpl	0x00585541
 614:	495f554d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, sl, ip, lr}^	; <UNPREDICTABLE>
 618:	525f5249 	subspl	r5, pc, #-1879048188	; 0x90000004
 61c:	67004745 	strvs	r4, [r0, -r5, asr #14]
 620:	5f6f6970 	svcpl	0x006f6970
 624:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 628:	7500745f 	strvc	r7, [r0, #-1119]	; 0x45f
 62c:	5f747261 	svcpl	0x00747261
 630:	5f6e6163 	svcpl	0x006e6163
 634:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 638:	58554100 	ldmdapl	r5, {r8, lr}^
 63c:	414e455f 	cmpmi	lr, pc, asr r5
 640:	53454c42 	movtpl	r4, #23618	; 0x5c42
 644:	58554100 	ldmdapl	r5, {r8, lr}^
 648:	5152495f 	cmppl	r2, pc, asr r9
 64c:	58554100 	ldmdapl	r5, {r8, lr}^
 650:	5f554d5f 	svcpl	0x00554d5f
 654:	44554142 	ldrbmi	r4, [r5], #-322	; 0x142
 658:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
 65c:	58554100 	ldmdapl	r5, {r8, lr}^
 660:	5f554d5f 	svcpl	0x00554d5f
 664:	54415453 	strbpl	r5, [r1], #-1107	; 0x453
 668:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
 66c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 670:	55465f4f 	strbpl	r5, [r6, #-3919]	; 0xf4f
 674:	415f434e 	cmpmi	pc, lr, asr #6
 678:	0034544c 	eorseq	r5, r4, ip, asr #8
 67c:	6f697067 	svcvs	0x00697067
 680:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
 684:	6e75665f 	mrcvs	6, 3, r6, cr5, cr15, {2}
 688:	6f697463 	svcvs	0x00697463
 68c:	5541006e 	strbpl	r0, [r1, #-110]	; 0x6e
 690:	554d5f58 	strbpl	r5, [sp, #-3928]	; 0xf58
 694:	5243535f 	subpl	r5, r3, #2080374785	; 0x7c000001
 698:	48435441 	stmdami	r3, {r0, r6, sl, ip, lr}^
 69c:	58554100 	ldmdapl	r5, {r8, lr}^
 6a0:	5f554d5f 	svcpl	0x00554d5f
 6a4:	5f52434c 	svcpl	0x0052434c
 6a8:	00474552 	subeq	r4, r7, r2, asr r5
 6ac:	4f495047 	svcmi	0x00495047
 6b0:	4e55465f 	mrcmi	6, 2, r4, cr5, cr15, {2}
 6b4:	4e495f43 	cdpmi	15, 4, cr5, cr9, cr3, {2}
 6b8:	00545550 	subseq	r5, r4, r0, asr r5
 6bc:	5f585541 	svcpl	0x00585541
 6c0:	4c5f554d 	cfldr64mi	mvdx5, [pc], {77}	; 0x4d
 6c4:	525f5253 	subspl	r5, pc, #805306373	; 0x30000005
 6c8:	75004745 	strvc	r4, [r0, #-1861]	; 0x745
 6cc:	5f747261 	svcpl	0x00747261
 6d0:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
 6d4:	7973615f 	ldmdbvc	r3!, {r0, r1, r2, r3, r4, r6, r8, sp, lr}^
 6d8:	6700636e 	strvs	r6, [r0, -lr, ror #6]
 6dc:	32337465 	eorscc	r7, r3, #1694498816	; 0x65000000
 6e0:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 6e4:	6c635f6f 	stclvs	15, cr5, [r3], #-444	; 0xfffffe44
 6e8:	67003072 	smlsdxvs	r0, r2, r0, r3
 6ec:	5f6f6970 	svcpl	0x006f6970
 6f0:	30746573 	rsbscc	r6, r4, r3, ror r5
 6f4:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 6f8:	73665f6f 	cmnvc	r6, #444	; 0x1bc
 6fc:	00306c65 	eorseq	r6, r0, r5, ror #24
 700:	4c435047 	mcrrmi	0, 4, r5, r3, cr7
 704:	67003152 	smlsdvs	r0, r2, r1, r3
 708:	5f6f6970 	svcpl	0x006f6970
 70c:	5f746573 	svcpl	0x00746573
 710:	47006e6f 	strmi	r6, [r0, -pc, ror #28]
 714:	56454c50 			; <UNDEFINED> instruction: 0x56454c50
 718:	50470031 	subpl	r0, r7, r1, lsr r0
 71c:	31544553 	cmpcc	r4, r3, asr r5
 720:	43504700 	cmpmi	r0, #0, 14
 724:	0030524c 	eorseq	r5, r0, ip, asr #4
 728:	45535047 	ldrbmi	r5, [r3, #-71]	; 0x47
 72c:	67003054 	smlsdvs	r0, r4, r0, r3
 730:	5f6f6970 	svcpl	0x006f6970
 734:	5f746573 	svcpl	0x00746573
 738:	0066666f 	rsbeq	r6, r6, pc, ror #12
 73c:	53465047 	movtpl	r5, #24647	; 0x6047
 740:	00314c45 	eorseq	r4, r1, r5, asr #24
 744:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 748:	67657200 	strbvs	r7, [r5, -r0, lsl #4]!
 74c:	6c65735f 	stclvs	3, cr7, [r5], #-380	; 0xfffffe84
 750:	00746365 	rsbseq	r6, r4, r5, ror #6
 754:	6d746962 	ldclvs	9, cr6, [r4, #-392]!	; 0xfffffe78
 758:	006b7361 	rsbeq	r7, fp, r1, ror #6
 75c:	6f697067 	svcvs	0x00697067
 760:	6700632e 	strvs	r6, [r0, -lr, lsr #6]
 764:	5f6f6970 	svcpl	0x006f6970
 768:	00676572 	rsbeq	r6, r7, r2, ror r5
 76c:	53465047 	movtpl	r5, #24647	; 0x6047
 770:	00304c45 	eorseq	r4, r0, r5, asr #24
 774:	454c5047 	strbmi	r5, [ip, #-71]	; 0x47
 778:	47003056 	smlsdmi	r0, r6, r0, r3
 77c:	45534650 	ldrbmi	r4, [r3, #-1616]	; 0x650
 780:	4700324c 	strmi	r3, [r0, -ip, asr #4]
 784:	45534650 	ldrbmi	r4, [r3, #-1616]	; 0x650
 788:	4700334c 	strmi	r3, [r0, -ip, asr #6]
 78c:	45534650 	ldrbmi	r4, [r3, #-1616]	; 0x650
 790:	4700344c 	strmi	r3, [r0, -ip, asr #8]
 794:	45534650 	ldrbmi	r4, [r3, #-1616]	; 0x650
 798:	6900354c 	stmdbvs	r0, {r2, r3, r6, r8, sl, ip, sp}
 79c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 7a0:	5f6c616e 	svcpl	0x006c616e
 7a4:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 7a8:	00726168 	rsbseq	r6, r2, r8, ror #2
 7ac:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 7b0:	7475702f 	ldrbtvc	r7, [r5], #-47	; 0x2f
 7b4:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 7b8:	Address 0x00000000000007b8 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000020 	andeq	r0, r0, r0, lsr #32
  14:	00000000 	andeq	r0, r0, r0
  18:	00008010 	andeq	r8, r0, r0, lsl r0
  1c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  20:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xe42
  24:	86068507 	strhi	r8, [r6], -r7, lsl #10
  28:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
  2c:	8e028903 	cdphi	9, 0, cr8, cr2, cr3, {0}
  30:	380e4201 	stmdacc	lr, {r0, r9, lr}
  34:	0000000c 	andeq	r0, r0, ip
  38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  3c:	7c020001 	stcvc	0, cr0, [r2], {1}
  40:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  44:	0000001c 	andeq	r0, r0, ip, lsl r0
  48:	00000034 	andeq	r0, r0, r4, lsr r0
  4c:	000080e0 	andeq	r8, r0, r0, ror #1
  50:	00000158 	andeq	r0, r0, r8, asr r1
  54:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
  58:	86058506 	strhi	r8, [r5], -r6, lsl #10
  5c:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
  60:	00018e02 	andeq	r8, r1, r2, lsl #28
  64:	00000020 	andeq	r0, r0, r0, lsr #32
  68:	00000034 	andeq	r0, r0, r4, lsr r0
  6c:	00008238 	andeq	r8, r0, r8, lsr r2
  70:	000001c8 	andeq	r0, r0, r8, asr #3
  74:	83200e42 	teqhi	r0, #1056	; 0x420
  78:	85078408 	strhi	r8, [r7, #-1032]	; 0x408
  7c:	87058606 	strhi	r8, [r5, -r6, lsl #12]
  80:	89038804 	stmdbhi	r3, {r2, fp, pc}
  84:	00018e02 	andeq	r8, r1, r2, lsl #28
  88:	00000020 	andeq	r0, r0, r0, lsr #32
  8c:	00000034 	andeq	r0, r0, r4, lsr r0
  90:	00008400 	andeq	r8, r0, r0, lsl #8
  94:	0000008c 	andeq	r0, r0, ip, lsl #1
  98:	84200e42 	strthi	r0, [r0], #-3650	; 0xe42
  9c:	86078508 	strhi	r8, [r7], -r8, lsl #10
  a0:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
  a4:	8a038904 	bhi	e24bc <__bss_end__+0xd8a0c>
  a8:	00018e02 	andeq	r8, r1, r2, lsl #28
  ac:	0000001c 	andeq	r0, r0, ip, lsl r0
  b0:	00000034 	andeq	r0, r0, r4, lsr r0
  b4:	0000848c 	andeq	r8, r0, ip, lsl #9
  b8:	00000078 	andeq	r0, r0, r8, ror r0
  bc:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
  c0:	86058506 	strhi	r8, [r5], -r6, lsl #10
  c4:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
  c8:	00018e02 	andeq	r8, r1, r2, lsl #28
  cc:	0000001c 	andeq	r0, r0, ip, lsl r0
  d0:	00000034 	andeq	r0, r0, r4, lsr r0
  d4:	00008504 	andeq	r8, r0, r4, lsl #10
  d8:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
  dc:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
  e0:	86058506 	strhi	r8, [r5], -r6, lsl #10
  e4:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
  e8:	00018e02 	andeq	r8, r1, r2, lsl #28
  ec:	00000014 	andeq	r0, r0, r4, lsl r0
  f0:	00000034 	andeq	r0, r0, r4, lsr r0
  f4:	000085b4 			; <UNDEFINED> instruction: 0x000085b4
  f8:	00000038 	andeq	r0, r0, r8, lsr r0
  fc:	83080e42 	movwhi	r0, #36418	; 0x8e42
 100:	00018e02 	andeq	r8, r1, r2, lsl #28
 104:	00000018 	andeq	r0, r0, r8, lsl r0
 108:	00000034 	andeq	r0, r0, r4, lsr r0
 10c:	000085ec 	andeq	r8, r0, ip, ror #11
 110:	0000002c 	andeq	r0, r0, ip, lsr #32
 114:	83100e42 	tsthi	r0, #1056	; 0x420
 118:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 11c:	00018e02 	andeq	r8, r1, r2, lsl #28
 120:	00000024 	andeq	r0, r0, r4, lsr #32
 124:	00000034 	andeq	r0, r0, r4, lsr r0
 128:	00008618 	andeq	r8, r0, r8, lsl r6
 12c:	00000080 	andeq	r0, r0, r0, lsl #1
 130:	810c0e42 	tsthi	ip, r2, asr #28
 134:	83028203 	movwhi	r8, #8707	; 0x2203
 138:	180e4201 	stmdane	lr, {r0, r9, lr}
 13c:	05850684 	streq	r0, [r5, #1668]	; 0x684
 140:	0e42048e 	cdpeq	4, 4, cr0, cr2, cr14, {4}
 144:	000003e8 	andeq	r0, r0, r8, ror #7
 148:	00000014 	andeq	r0, r0, r4, lsl r0
 14c:	00000034 	andeq	r0, r0, r4, lsr r0
 150:	00008698 	muleq	r0, r8, r6
 154:	00000048 	andeq	r0, r0, r8, asr #32
 158:	8e040e42 	cdphi	14, 0, cr0, cr4, cr2, {2}
 15c:	100e4201 	andne	r4, lr, r1, lsl #4
 160:	0000000c 	andeq	r0, r0, ip
 164:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 168:	7c020001 	stcvc	0, cr0, [r2], {1}
 16c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 170:	00000024 	andeq	r0, r0, r4, lsr #32
 174:	00000160 	andeq	r0, r0, r0, ror #2
 178:	000086e0 	andeq	r8, r0, r0, ror #13
 17c:	00000058 	andeq	r0, r0, r8, asr r0
 180:	80100e42 	andshi	r0, r0, r2, asr #28
 184:	82038104 	andhi	r8, r3, #4, 2
 188:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
 18c:	07841c0e 	streq	r1, [r4, lr, lsl #24]
 190:	058e0685 	streq	r0, [lr, #1669]	; 0x685
 194:	00280e42 	eoreq	r0, r8, r2, asr #28
 198:	0000000c 	andeq	r0, r0, ip
 19c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1a0:	7c020001 	stcvc	0, cr0, [r2], {1}
 1a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1a8:	00000018 	andeq	r0, r0, r8, lsl r0
 1ac:	00000198 	muleq	r0, r8, r1
 1b0:	00008738 	andeq	r8, r0, r8, lsr r7
 1b4:	00000034 	andeq	r0, r0, r4, lsr r0
 1b8:	83100e42 	tsthi	r0, #1056	; 0x420
 1bc:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 1c0:	00018e02 	andeq	r8, r1, r2, lsl #28
 1c4:	0000000c 	andeq	r0, r0, ip
 1c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1cc:	7c020001 	stcvc	0, cr0, [r2], {1}
 1d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1d4:	0000000c 	andeq	r0, r0, ip
 1d8:	000001c4 	andeq	r0, r0, r4, asr #3
 1dc:	0000876c 	andeq	r8, r0, ip, ror #14
 1e0:	00000014 	andeq	r0, r0, r4, lsl r0
 1e4:	0000000c 	andeq	r0, r0, ip
 1e8:	000001c4 	andeq	r0, r0, r4, asr #3
 1ec:	00008780 	andeq	r8, r0, r0, lsl #15
 1f0:	0000002c 	andeq	r0, r0, ip, lsr #32
 1f4:	0000000c 	andeq	r0, r0, ip
 1f8:	000001c4 	andeq	r0, r0, r4, asr #3
 1fc:	000087ac 	andeq	r8, r0, ip, lsr #15
 200:	00000040 	andeq	r0, r0, r0, asr #32
 204:	00000020 	andeq	r0, r0, r0, lsr #32
 208:	000001c4 	andeq	r0, r0, r4, asr #3
 20c:	000087ec 	andeq	r8, r0, ip, ror #15
 210:	00000198 	muleq	r0, r8, r1
 214:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 218:	86058506 	strhi	r8, [r5], -r6, lsl #10
 21c:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 220:	42018e02 	andmi	r8, r1, #2, 28
 224:	0000580e 	andeq	r5, r0, lr, lsl #16
 228:	00000014 	andeq	r0, r0, r4, lsl r0
 22c:	000001c4 	andeq	r0, r0, r4, asr #3
 230:	00008984 	andeq	r8, r0, r4, lsl #19
 234:	00000050 	andeq	r0, r0, r0, asr r0
 238:	83080e42 	movwhi	r0, #36418	; 0x8e42
 23c:	00018e02 	andeq	r8, r1, r2, lsl #28
 240:	00000028 	andeq	r0, r0, r8, lsr #32
 244:	000001c4 	andeq	r0, r0, r4, asr #3
 248:	000089d4 	ldrdeq	r8, [r0], -r4
 24c:	00000288 	andeq	r0, r0, r8, lsl #5
 250:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
 254:	86088509 	strhi	r8, [r8], -r9, lsl #10
 258:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
 25c:	8a048905 	bhi	122678 <__bss_end__+0x118bc8>
 260:	8e028b03 	vmlahi.f64	d8, d2, d3
 264:	b00e4201 	andlt	r4, lr, r1, lsl #4
 268:	00000001 	andeq	r0, r0, r1
 26c:	0000000c 	andeq	r0, r0, ip
 270:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 274:	7c020001 	stcvc	0, cr0, [r2], {1}
 278:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 27c:	0000000c 	andeq	r0, r0, ip
 280:	0000026c 	andeq	r0, r0, ip, ror #4
 284:	00008c5c 	andeq	r8, r0, ip, asr ip
 288:	00000010 	andeq	r0, r0, r0, lsl r0
 28c:	0000000c 	andeq	r0, r0, ip
 290:	0000026c 	andeq	r0, r0, ip, ror #4
 294:	00008c6c 	andeq	r8, r0, ip, ror #24
 298:	00000010 	andeq	r0, r0, r0, lsl r0
 29c:	0000000c 	andeq	r0, r0, ip
 2a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2a4:	7c020001 	stcvc	0, cr0, [r2], {1}
 2a8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2ac:	00000014 	andeq	r0, r0, r4, lsl r0
 2b0:	0000029c 	muleq	r0, ip, r2
 2b4:	00008c7c 	andeq	r8, r0, ip, ror ip
 2b8:	00000028 	andeq	r0, r0, r8, lsr #32
 2bc:	83080e42 	movwhi	r0, #36418	; 0x8e42
 2c0:	00018e02 	andeq	r8, r1, r2, lsl #28
 2c4:	0000000c 	andeq	r0, r0, ip
 2c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2cc:	7c020001 	stcvc	0, cr0, [r2], {1}
 2d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2d4:	00000014 	andeq	r0, r0, r4, lsl r0
 2d8:	000002c4 	andeq	r0, r0, r4, asr #5
 2dc:	00008ca4 	andeq	r8, r0, r4, lsr #25
 2e0:	00000034 	andeq	r0, r0, r4, lsr r0
 2e4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 2e8:	00018e02 	andeq	r8, r1, r2, lsl #28
 2ec:	0000000c 	andeq	r0, r0, ip
 2f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2f4:	7c020001 	stcvc	0, cr0, [r2], {1}
 2f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2fc:	0000000c 	andeq	r0, r0, ip
 300:	000002ec 	andeq	r0, r0, ip, ror #5
 304:	00008cd8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
 308:	00000018 	andeq	r0, r0, r8, lsl r0
 30c:	0000000c 	andeq	r0, r0, ip
 310:	000002ec 	andeq	r0, r0, ip, ror #5
 314:	00008cf0 	strdeq	r8, [r0], -r0
 318:	00000014 	andeq	r0, r0, r4, lsl r0
 31c:	00000014 	andeq	r0, r0, r4, lsl r0
 320:	000002ec 	andeq	r0, r0, ip, ror #5
 324:	00008d04 	andeq	r8, r0, r4, lsl #26
 328:	00000048 	andeq	r0, r0, r8, asr #32
 32c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 330:	00018e02 	andeq	r8, r1, r2, lsl #28
 334:	0000000c 	andeq	r0, r0, ip
 338:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 33c:	7c020001 	stcvc	0, cr0, [r2], {1}
 340:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 344:	0000000c 	andeq	r0, r0, ip
 348:	00000334 	andeq	r0, r0, r4, lsr r3
 34c:	00008d4c 	andeq	r8, r0, ip, asr #26
 350:	0000001c 	andeq	r0, r0, ip, lsl r0
 354:	00000014 	andeq	r0, r0, r4, lsl r0
 358:	00000334 	andeq	r0, r0, r4, lsr r3
 35c:	00008d68 	andeq	r8, r0, r8, ror #26
 360:	00000014 	andeq	r0, r0, r4, lsl r0
 364:	83080e42 	movwhi	r0, #36418	; 0x8e42
 368:	00018e02 	andeq	r8, r1, r2, lsl #28
 36c:	00000014 	andeq	r0, r0, r4, lsl r0
 370:	00000334 	andeq	r0, r0, r4, lsr r3
 374:	00008d7c 	andeq	r8, r0, ip, ror sp
 378:	0000001c 	andeq	r0, r0, ip, lsl r0
 37c:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 380:	00018e02 	andeq	r8, r1, r2, lsl #28
 384:	00000018 	andeq	r0, r0, r8, lsl r0
 388:	00000334 	andeq	r0, r0, r4, lsr r3
 38c:	00008d98 	muleq	r0, r8, sp
 390:	00000024 	andeq	r0, r0, r4, lsr #32
 394:	83100e42 	tsthi	r0, #1056	; 0x420
 398:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 39c:	00018e02 	andeq	r8, r1, r2, lsl #28
 3a0:	00000014 	andeq	r0, r0, r4, lsl r0
 3a4:	00000334 	andeq	r0, r0, r4, lsr r3
 3a8:	00008dbc 			; <UNDEFINED> instruction: 0x00008dbc
 3ac:	00000014 	andeq	r0, r0, r4, lsl r0
 3b0:	83080e42 	movwhi	r0, #36418	; 0x8e42
 3b4:	00018e02 	andeq	r8, r1, r2, lsl #28
 3b8:	00000014 	andeq	r0, r0, r4, lsl r0
 3bc:	00000334 	andeq	r0, r0, r4, lsr r3
 3c0:	00008dd0 	ldrdeq	r8, [r0], -r0
 3c4:	00000014 	andeq	r0, r0, r4, lsl r0
 3c8:	83080e42 	movwhi	r0, #36418	; 0x8e42
 3cc:	00018e02 	andeq	r8, r1, r2, lsl #28
 3d0:	0000000c 	andeq	r0, r0, ip
 3d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3d8:	7c020001 	stcvc	0, cr0, [r2], {1}
 3dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3e0:	00000014 	andeq	r0, r0, r4, lsl r0
 3e4:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 3e8:	00008e48 	andeq	r8, r0, r8, asr #28
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	83080e42 	movwhi	r0, #36418	; 0x8e42
 3f4:	00018e02 	andeq	r8, r1, r2, lsl #28
 3f8:	00000018 	andeq	r0, r0, r8, lsl r0
 3fc:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 400:	00008e64 	andeq	r8, r0, r4, ror #28
 404:	0000009c 	muleq	r0, ip, r0
 408:	83100e42 	tsthi	r0, #1056	; 0x420
 40c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 410:	00018e02 	andeq	r8, r1, r2, lsl #28
 414:	00000014 	andeq	r0, r0, r4, lsl r0
 418:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 41c:	00008f00 	andeq	r8, r0, r0, lsl #30
 420:	00000028 	andeq	r0, r0, r8, lsr #32
 424:	83080e42 	movwhi	r0, #36418	; 0x8e42
 428:	00018e02 	andeq	r8, r1, r2, lsl #28
 42c:	00000014 	andeq	r0, r0, r4, lsl r0
 430:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 434:	00008f28 	andeq	r8, r0, r8, lsr #30
 438:	0000001c 	andeq	r0, r0, ip, lsl r0
 43c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 440:	00018e02 	andeq	r8, r1, r2, lsl #28
 444:	00000014 	andeq	r0, r0, r4, lsl r0
 448:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 44c:	00008f44 	andeq	r8, r0, r4, asr #30
 450:	0000002c 	andeq	r0, r0, ip, lsr #32
 454:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 458:	00018e02 	andeq	r8, r1, r2, lsl #28
 45c:	00000014 	andeq	r0, r0, r4, lsl r0
 460:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 464:	00008f70 	andeq	r8, r0, r0, ror pc
 468:	0000000c 	andeq	r0, r0, ip
 46c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 470:	00018e02 	andeq	r8, r1, r2, lsl #28
 474:	00000014 	andeq	r0, r0, r4, lsl r0
 478:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 47c:	00008f7c 	andeq	r8, r0, ip, ror pc
 480:	00000020 	andeq	r0, r0, r0, lsr #32
 484:	83080e42 	movwhi	r0, #36418	; 0x8e42
 488:	00018e02 	andeq	r8, r1, r2, lsl #28
 48c:	0000000c 	andeq	r0, r0, ip
 490:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 494:	7c020001 	stcvc	0, cr0, [r2], {1}
 498:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 49c:	00000018 	andeq	r0, r0, r8, lsl r0
 4a0:	0000048c 	andeq	r0, r0, ip, lsl #9
 4a4:	00008f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
 4a8:	000000d4 	ldrdeq	r0, [r0], -r4
 4ac:	83100e42 	tsthi	r0, #1056	; 0x420
 4b0:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 4b4:	00018e02 	andeq	r8, r1, r2, lsl #28
 4b8:	00000014 	andeq	r0, r0, r4, lsl r0
 4bc:	0000048c 	andeq	r0, r0, ip, lsl #9
 4c0:	00009070 	andeq	r9, r0, r0, ror r0
 4c4:	00000038 	andeq	r0, r0, r8, lsr r0
 4c8:	83080e42 	movwhi	r0, #36418	; 0x8e42
 4cc:	00018e02 	andeq	r8, r1, r2, lsl #28
 4d0:	00000014 	andeq	r0, r0, r4, lsl r0
 4d4:	0000048c 	andeq	r0, r0, ip, lsl #9
 4d8:	000090a8 	andeq	r9, r0, r8, lsr #1
 4dc:	00000038 	andeq	r0, r0, r8, lsr r0
 4e0:	83080e42 	movwhi	r0, #36418	; 0x8e42
 4e4:	00018e02 	andeq	r8, r1, r2, lsl #28
 4e8:	00000018 	andeq	r0, r0, r8, lsl r0
 4ec:	0000048c 	andeq	r0, r0, ip, lsl #9
 4f0:	000090e0 	andeq	r9, r0, r0, ror #1
 4f4:	000000cc 	andeq	r0, r0, ip, asr #1
 4f8:	83100e42 	tsthi	r0, #1056	; 0x420
 4fc:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 500:	00018e02 	andeq	r8, r1, r2, lsl #28
 504:	00000014 	andeq	r0, r0, r4, lsl r0
 508:	0000048c 	andeq	r0, r0, ip, lsl #9
 50c:	000091ac 	andeq	r9, r0, ip, lsr #3
 510:	0000004c 	andeq	r0, r0, ip, asr #32
 514:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 518:	00018e02 	andeq	r8, r1, r2, lsl #28
 51c:	00000014 	andeq	r0, r0, r4, lsl r0
 520:	0000048c 	andeq	r0, r0, ip, lsl #9
 524:	000091f8 	strdeq	r9, [r0], -r8
 528:	00000078 	andeq	r0, r0, r8, ror r0
 52c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 530:	00018e02 	andeq	r8, r1, r2, lsl #28
 534:	00000018 	andeq	r0, r0, r8, lsl r0
 538:	0000048c 	andeq	r0, r0, ip, lsl #9
 53c:	00009270 	andeq	r9, r0, r0, ror r2
 540:	000000d8 	ldrdeq	r0, [r0], -r8
 544:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 548:	86038504 	strhi	r8, [r3], -r4, lsl #10
 54c:	00018e02 	andeq	r8, r1, r2, lsl #28
 550:	0000000c 	andeq	r0, r0, ip
 554:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 558:	7c020001 	stcvc	0, cr0, [r2], {1}
 55c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 560:	00000014 	andeq	r0, r0, r4, lsl r0
 564:	00000550 	andeq	r0, r0, r0, asr r5
 568:	00009348 	andeq	r9, r0, r8, asr #6
 56c:	00000014 	andeq	r0, r0, r4, lsl r0
 570:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 574:	00018e02 	andeq	r8, r1, r2, lsl #28
