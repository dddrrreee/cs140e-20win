
2-gets-until-test.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e3a0d302 	mov	sp, #134217728	; 0x8000000
    8004:	e3a0b000 	mov	fp, #0
    8008:	eb000345 	bl	8d24 <_cstart>
    800c:	eb00035c 	bl	8d84 <rpi_reboot>

00008010 <notmain>:
// test of gets_until: enter lines in pi-cat.  if you hit newline will send to the pi
#include "rpi.h"
#include "sw-uart.h"

void notmain(void) {
    8010:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8014:	e24dde41 	sub	sp, sp, #1040	; 0x410
    8018:	e24dd00c 	sub	sp, sp, #12
    uart_init();
    801c:	eb0003b0 	bl	8ee4 <uart_init>
    enable_cache();
    8020:	eb00032d 	bl	8cdc <enable_cache>

    // use pin 20 for tx, 21 for rx
    sw_uart_t u = sw_uart_init(20,21, 115200);
    8024:	e59f30e8 	ldr	r3, [pc, #232]	; 8114 <notmain+0x104>
    8028:	e58d3000 	str	r3, [sp]
    802c:	e28d0b01 	add	r0, sp, #1024	; 0x400
    8030:	e280000c 	add	r0, r0, #12
    8034:	e3a01014 	mov	r1, #20
    8038:	e3a02015 	mov	r2, #21
    803c:	e59f30d4 	ldr	r3, [pc, #212]	; 8118 <notmain+0x108>
    8040:	eb000147 	bl	8564 <sw_uart_init_helper>

    for(int i = 0; i < 4; i++) {
    8044:	e3a04000 	mov	r4, #0
        unsigned timeout = 5;
        printk("iter=%d, going to do a get of a whole line (timeout=%d)\n", i, timeout);
    8048:	e59f80cc 	ldr	r8, [pc, #204]	; 811c <notmain+0x10c>

        sw_uart_printk(&u, "enter a line: ");
    804c:	e59f70cc 	ldr	r7, [pc, #204]	; 8120 <notmain+0x110>

        char buf[1024];
        int res = sw_uart_gets_until(&u, buf, sizeof buf, '\n', timeout*1000*1000);
    8050:	e59f60cc 	ldr	r6, [pc, #204]	; 8124 <notmain+0x114>
        if(res <= 0)
            printk("timeout: res=%d!!\n", res);
        else {
            assert(strlen(buf) == res);
            // kill newline.
            buf[res-1] = 0;
    8054:	e59fa0cc 	ldr	sl, [pc, #204]	; 8128 <notmain+0x118>
            printk("SW-UART: got string <%s>\n", buf);
    8058:	e59f90cc 	ldr	r9, [pc, #204]	; 812c <notmain+0x11c>

        char buf[1024];
        int res = sw_uart_gets_until(&u, buf, sizeof buf, '\n', timeout*1000*1000);

        if(res <= 0)
            printk("timeout: res=%d!!\n", res);
    805c:	e59fb0cc 	ldr	fp, [pc, #204]	; 8130 <notmain+0x120>
    enable_cache();

    // use pin 20 for tx, 21 for rx
    sw_uart_t u = sw_uart_init(20,21, 115200);

    for(int i = 0; i < 4; i++) {
    8060:	ea000028 	b	8108 <notmain+0xf8>
        unsigned timeout = 5;
        printk("iter=%d, going to do a get of a whole line (timeout=%d)\n", i, timeout);
    8064:	e1a00008 	mov	r0, r8
    8068:	e1a01004 	mov	r1, r4
    806c:	e3a02005 	mov	r2, #5
    8070:	eb0001b2 	bl	8740 <printk>

        sw_uart_printk(&u, "enter a line: ");
    8074:	e28d0b01 	add	r0, sp, #1024	; 0x400
    8078:	e280000c 	add	r0, r0, #12
    807c:	e1a01007 	mov	r1, r7
    8080:	eb00017c 	bl	8678 <sw_uart_printk>

        char buf[1024];
        int res = sw_uart_gets_until(&u, buf, sizeof buf, '\n', timeout*1000*1000);
    8084:	e58d6000 	str	r6, [sp]
    8088:	e28d0b01 	add	r0, sp, #1024	; 0x400
    808c:	e280000c 	add	r0, r0, #12
    8090:	e28d100c 	add	r1, sp, #12
    8094:	e3a02b01 	mov	r2, #1024	; 0x400
    8098:	e3a0300a 	mov	r3, #10
    809c:	eb0000ef 	bl	8460 <sw_uart_gets_until>

        if(res <= 0)
    80a0:	e2505000 	subs	r5, r0, #0
    80a4:	ca000003 	bgt	80b8 <notmain+0xa8>
            printk("timeout: res=%d!!\n", res);
    80a8:	e1a0000b 	mov	r0, fp
    80ac:	e1a01005 	mov	r1, r5
    80b0:	eb0001a2 	bl	8740 <printk>
    80b4:	ea000012 	b	8104 <notmain+0xf4>
        else {
            assert(strlen(buf) == res);
    80b8:	e28d000c 	add	r0, sp, #12
    80bc:	eb0001c2 	bl	87cc <strlen>
    80c0:	e1500005 	cmp	r0, r5
    80c4:	0a000005 	beq	80e0 <notmain+0xd0>
    80c8:	e59f0064 	ldr	r0, [pc, #100]	; 8134 <notmain+0x124>
    80cc:	e59f1064 	ldr	r1, [pc, #100]	; 8138 <notmain+0x128>
    80d0:	e59f2064 	ldr	r2, [pc, #100]	; 813c <notmain+0x12c>
    80d4:	e3a03018 	mov	r3, #24
    80d8:	eb000198 	bl	8740 <printk>
    80dc:	eb000306 	bl	8cfc <clean_reboot>
            // kill newline.
            buf[res-1] = 0;
    80e0:	e2455001 	sub	r5, r5, #1
    80e4:	e28d3e41 	add	r3, sp, #1040	; 0x410
    80e8:	e2833008 	add	r3, r3, #8
    80ec:	e0835005 	add	r5, r3, r5
    80f0:	e3a03000 	mov	r3, #0
    80f4:	e7c5300a 	strb	r3, [r5, sl]
            printk("SW-UART: got string <%s>\n", buf);
    80f8:	e1a00009 	mov	r0, r9
    80fc:	e28d100c 	add	r1, sp, #12
    8100:	eb00018e 	bl	8740 <printk>
    enable_cache();

    // use pin 20 for tx, 21 for rx
    sw_uart_t u = sw_uart_init(20,21, 115200);

    for(int i = 0; i < 4; i++) {
    8104:	e2844001 	add	r4, r4, #1
    8108:	e3540003 	cmp	r4, #3
    810c:	daffffd4 	ble	8064 <notmain+0x54>
            // kill newline.
            buf[res-1] = 0;
            printk("SW-UART: got string <%s>\n", buf);
        }
    }
    clean_reboot();
    8110:	eb0002f9 	bl	8cfc <clean_reboot>
    8114:	000017bc 			; <UNDEFINED> instruction: 0x000017bc
    8118:	0001c200 	andeq	ip, r1, r0, lsl #4
    811c:	0000945c 	andeq	r9, r0, ip, asr r4
    8120:	00009498 	muleq	r0, r8, r4
    8124:	004c4b40 	subeq	r4, ip, r0, asr #22
    8128:	fffffbf4 			; <UNDEFINED> instruction: 0xfffffbf4
    812c:	000094f4 	strdeq	r9, [r0], -r4
    8130:	000094a8 	andeq	r9, r0, r8, lsr #9
    8134:	000094bc 			; <UNDEFINED> instruction: 0x000094bc
    8138:	000094e0 	andeq	r9, r0, r0, ror #9
    813c:	00009454 	andeq	r9, r0, r4, asr r4

00008140 <sw_uart_putc>:
 */ 
#include "rpi.h"
#include "sw-uart.h"
#include "cycle-util.h"

void sw_uart_putc(sw_uart_t *uart, unsigned char c) {
    8140:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8144:	e1a07001 	mov	r7, r1
    // use local variables to minimize any loads or stores
    int tx = uart->tx;
    8148:	e5d06000 	ldrb	r6, [r0]
    uint32_t n = uart->cycle_per_bit,
    814c:	e5905008 	ldr	r5, [r0, #8]
             u = n,
             s = cycle_cnt_read();
    8150:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
	
	// get start conditions
	unsigned end = n;
	unsigned start = cycle_cnt_read();
    8154:	ee1f4f3c 	mrc	15, 0, r4, cr15, cr12, {1}
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8158:	e1a00006 	mov	r0, r6
    815c:	e3a01000 	mov	r1, #0
    8160:	eb000444 	bl	9278 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    8164:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8168:	e0643003 	rsb	r3, r4, r3
    816c:	e1550003 	cmp	r5, r3
    8170:	8afffffb 	bhi	8164 <sw_uart_putc+0x24>

	// lower line (line idling)
	write_cyc_until(tx, 0, start, end);
	end += n; 
    8174:	e1a08085 	lsl	r8, r5, #1
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8178:	e1a00006 	mov	r0, r6
    817c:	e2071001 	and	r1, r7, #1
    8180:	eb00043c 	bl	9278 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    8184:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8188:	e0643003 	rsb	r3, r4, r3
    818c:	e1580003 	cmp	r8, r3
    8190:	8afffffb 	bhi	8184 <sw_uart_putc+0x44>
	write_cyc_until(tx, c & 1, start, end);
	end += n; 
    8194:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8198:	e1a00006 	mov	r0, r6
    819c:	e2071002 	and	r1, r7, #2
    81a0:	eb000434 	bl	9278 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    81a4:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    81a8:	e0643003 	rsb	r3, r4, r3
    81ac:	e1580003 	cmp	r8, r3
    81b0:	8afffffb 	bhi	81a4 <sw_uart_putc+0x64>
	write_cyc_until(tx, c & 2, start, end);
	end += n; 
    81b4:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    81b8:	e1a00006 	mov	r0, r6
    81bc:	e2071004 	and	r1, r7, #4
    81c0:	eb00042c 	bl	9278 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    81c4:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    81c8:	e0643003 	rsb	r3, r4, r3
    81cc:	e1580003 	cmp	r8, r3
    81d0:	8afffffb 	bhi	81c4 <sw_uart_putc+0x84>
	write_cyc_until(tx, c & 4, start, end);
	end += n; 
    81d4:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    81d8:	e1a00006 	mov	r0, r6
    81dc:	e2071008 	and	r1, r7, #8
    81e0:	eb000424 	bl	9278 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    81e4:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    81e8:	e0643003 	rsb	r3, r4, r3
    81ec:	e1580003 	cmp	r8, r3
    81f0:	8afffffb 	bhi	81e4 <sw_uart_putc+0xa4>
	write_cyc_until(tx, c & 8, start, end);
	end += n; 
    81f4:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    81f8:	e1a00006 	mov	r0, r6
    81fc:	e2071010 	and	r1, r7, #16
    8200:	eb00041c 	bl	9278 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    8204:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8208:	e0643003 	rsb	r3, r4, r3
    820c:	e1580003 	cmp	r8, r3
    8210:	8afffffb 	bhi	8204 <sw_uart_putc+0xc4>
	write_cyc_until(tx, c & 16, start, end);
	end += n; 
    8214:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8218:	e1a00006 	mov	r0, r6
    821c:	e2071020 	and	r1, r7, #32
    8220:	eb000414 	bl	9278 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    8224:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8228:	e0643003 	rsb	r3, r4, r3
    822c:	e1580003 	cmp	r8, r3
    8230:	8afffffb 	bhi	8224 <sw_uart_putc+0xe4>
	write_cyc_until(tx, c & 32, start, end);
	end += n; 
    8234:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8238:	e1a00006 	mov	r0, r6
    823c:	e2071040 	and	r1, r7, #64	; 0x40
    8240:	eb00040c 	bl	9278 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    8244:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8248:	e0643003 	rsb	r3, r4, r3
    824c:	e1580003 	cmp	r8, r3
    8250:	8afffffb 	bhi	8244 <sw_uart_putc+0x104>
	write_cyc_until(tx, c & 64, start, end);
	end += n; 
    8254:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8258:	e1a00006 	mov	r0, r6
    825c:	e2071080 	and	r1, r7, #128	; 0x80
    8260:	eb000404 	bl	9278 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    8264:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8268:	e0643003 	rsb	r3, r4, r3
    826c:	e1580003 	cmp	r8, r3
    8270:	8afffffb 	bhi	8264 <sw_uart_putc+0x124>
	write_cyc_until(tx, c & 128, start, end);
	end += n; 
    8274:	e0885005 	add	r5, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8278:	e1a00006 	mov	r0, r6
    827c:	e3a01001 	mov	r1, #1
    8280:	eb0003fc 	bl	9278 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    8284:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8288:	e0643003 	rsb	r3, r4, r3
    828c:	e1550003 	cmp	r5, r3
    8290:	8afffffb 	bhi	8284 <sw_uart_putc+0x144>
	write_cyc_until(tx, 1, start, end);
}
    8294:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008298 <sw_uart_getc_timeout>:
}

// do this second: you can type in pi-cat to send stuff.
//      EASY BUG: if you are reading input, but you do not get here in 
//      time it will disappear.
int sw_uart_getc_timeout(sw_uart_t *uart, int timeout_usec) {
    8298:	e92d43f8 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
    829c:	e1a09000 	mov	r9, r0
   int rx = uart->rx;
    82a0:	e5d07001 	ldrb	r7, [r0, #1]
    82a4:	e1a05007 	mov	r5, r7

    // get start bit: timeout_usec=0 implies you return right away.
    while(!wait_until_usec(rx, 0, timeout_usec))
    82a8:	e1a06001 	mov	r6, r1
	write_cyc_until(tx, 1, start, end);
}

// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    82ac:	eb0002cd 	bl	8de8 <timer_get_usec_raw>
    82b0:	e1a04000 	mov	r4, r0
    while(1) {
        if(gpio_read(rx) == v)
    82b4:	e1a00005 	mov	r0, r5
    82b8:	eb0003db 	bl	922c <gpio_read>
    82bc:	e3500000 	cmp	r0, #0
    82c0:	0a000005 	beq	82dc <sw_uart_getc_timeout+0x44>
            return 1;
        if(timer_get_usec_raw() - start > timeout_usec)
    82c4:	eb0002c7 	bl	8de8 <timer_get_usec_raw>
    82c8:	e0640000 	rsb	r0, r4, r0
    82cc:	e1560000 	cmp	r6, r0
    82d0:	2afffff7 	bcs	82b4 <sw_uart_getc_timeout+0x1c>
            return 0;
    82d4:	e3a03000 	mov	r3, #0
    82d8:	ea000000 	b	82e0 <sw_uart_getc_timeout+0x48>
// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    while(1) {
        if(gpio_read(rx) == v)
            return 1;
    82dc:	e3a03001 	mov	r3, #1
//      time it will disappear.
int sw_uart_getc_timeout(sw_uart_t *uart, int timeout_usec) {
   int rx = uart->rx;

    // get start bit: timeout_usec=0 implies you return right away.
    while(!wait_until_usec(rx, 0, timeout_usec))
    82e0:	e3530000 	cmp	r3, #0
    82e4:	0a000059 	beq	8450 <sw_uart_getc_timeout+0x1b8>
        return -1;

    // do this first so we have a tighter bound (maybe)
    unsigned s = cycle_cnt_read();  // subtract off slop?
    82e8:	ee1f8f3c 	mrc	15, 0, r8, cr15, cr12, {1}

    // store these in locals to minimize load stores later.
    uint32_t u = uart->cycle_per_bit;
    82ec:	e5994008 	ldr	r4, [r9, #8]
    unsigned n = u/2;
    unsigned c = 0;

    // wait one period + 1/2 to get in the middle of the next read.
    delay_ncycles(s, n + 1*u);
    82f0:	e08420a4 	add	r2, r4, r4, lsr #1
    82f4:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    82f8:	e0683003 	rsb	r3, r8, r3
    82fc:	e1520003 	cmp	r2, r3
    8300:	8afffffb 	bhi	82f4 <sw_uart_getc_timeout+0x5c>
	
	s += u;
    8304:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx);
    8308:	e1a00007 	mov	r0, r7
    830c:	eb0003c6 	bl	922c <gpio_read>
    8310:	e1a09750 	asr	r9, r0, r7
    8314:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8318:	e0683003 	rsb	r3, r8, r3
    831c:	e1540003 	cmp	r4, r3
    8320:	8afffffb 	bhi	8314 <sw_uart_getc_timeout+0x7c>
    delay_ncycles(s, u);
	s += u; 
    8324:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 1;
    8328:	e1a00007 	mov	r0, r7
    832c:	eb0003be 	bl	922c <gpio_read>
    8330:	e1a00750 	asr	r0, r0, r7
    8334:	e1899080 	orr	r9, r9, r0, lsl #1
    8338:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    833c:	e0683003 	rsb	r3, r8, r3
    8340:	e1540003 	cmp	r4, r3
    8344:	8afffffb 	bhi	8338 <sw_uart_getc_timeout+0xa0>
    delay_ncycles(s, u);
	s += u;
    8348:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 2;
    834c:	e1a00007 	mov	r0, r7
    8350:	eb0003b5 	bl	922c <gpio_read>
    8354:	e1a00750 	asr	r0, r0, r7
    8358:	e1899100 	orr	r9, r9, r0, lsl #2
    835c:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8360:	e0683003 	rsb	r3, r8, r3
    8364:	e1540003 	cmp	r4, r3
    8368:	8afffffb 	bhi	835c <sw_uart_getc_timeout+0xc4>
    delay_ncycles(s, u);
	s += u;
    836c:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 3;
    8370:	e1a00007 	mov	r0, r7
    8374:	eb0003ac 	bl	922c <gpio_read>
    8378:	e1a00750 	asr	r0, r0, r7
    837c:	e1899180 	orr	r9, r9, r0, lsl #3
    8380:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8384:	e0683003 	rsb	r3, r8, r3
    8388:	e1540003 	cmp	r4, r3
    838c:	8afffffb 	bhi	8380 <sw_uart_getc_timeout+0xe8>
    delay_ncycles(s, u);
	s += u;
    8390:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 4;
    8394:	e1a00007 	mov	r0, r7
    8398:	eb0003a3 	bl	922c <gpio_read>
    839c:	e1a00750 	asr	r0, r0, r7
    83a0:	e1899200 	orr	r9, r9, r0, lsl #4
    83a4:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    83a8:	e0683003 	rsb	r3, r8, r3
    83ac:	e1540003 	cmp	r4, r3
    83b0:	8afffffb 	bhi	83a4 <sw_uart_getc_timeout+0x10c>
    delay_ncycles(s, u);
	s += u;
    83b4:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 5;
    83b8:	e1a00007 	mov	r0, r7
    83bc:	eb00039a 	bl	922c <gpio_read>
    83c0:	e1a00750 	asr	r0, r0, r7
    83c4:	e1899280 	orr	r9, r9, r0, lsl #5
    83c8:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    83cc:	e0683003 	rsb	r3, r8, r3
    83d0:	e1540003 	cmp	r4, r3
    83d4:	8afffffb 	bhi	83c8 <sw_uart_getc_timeout+0x130>
    delay_ncycles(s, u);
	s += u;
    83d8:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 6;
    83dc:	e1a00007 	mov	r0, r7
    83e0:	eb000391 	bl	922c <gpio_read>
    83e4:	e1a00750 	asr	r0, r0, r7
    83e8:	e1899300 	orr	r9, r9, r0, lsl #6
    83ec:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    83f0:	e0683003 	rsb	r3, r8, r3
    83f4:	e1540003 	cmp	r4, r3
    83f8:	8afffffb 	bhi	83ec <sw_uart_getc_timeout+0x154>
    delay_ncycles(s, u);
	s += u;
    c |= (gpio_read(rx) >> rx) << 7;
    83fc:	e1a00007 	mov	r0, r7
    8400:	eb000389 	bl	922c <gpio_read>
    8404:	e1a00750 	asr	r0, r0, r7
    8408:	e1899380 	orr	r9, r9, r0, lsl #7
	write_cyc_until(tx, 1, start, end);
}

// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    840c:	eb000275 	bl	8de8 <timer_get_usec_raw>
    8410:	e1a04000 	mov	r4, r0
    while(1) {
        if(gpio_read(rx) == v)
    8414:	e1a00005 	mov	r0, r5
    8418:	eb000383 	bl	922c <gpio_read>
    841c:	e3500000 	cmp	r0, #0
    8420:	0a000005 	beq	843c <sw_uart_getc_timeout+0x1a4>
            return 1;
        if(timer_get_usec_raw() - start > timeout_usec)
    8424:	eb00026f 	bl	8de8 <timer_get_usec_raw>
    8428:	e0640000 	rsb	r0, r4, r0
    842c:	e1560000 	cmp	r6, r0
    8430:	2afffff7 	bcs	8414 <sw_uart_getc_timeout+0x17c>
            return 0;
    8434:	e3a03000 	mov	r3, #0
    8438:	ea000000 	b	8440 <sw_uart_getc_timeout+0x1a8>
// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    while(1) {
        if(gpio_read(rx) == v)
            return 1;
    843c:	e3a03001 	mov	r3, #1
    c |= (gpio_read(rx) >> rx) << 7;
    //delay_ncycles(s, u);
	//s += u;
    
	// make sure you wait for a stop bit: otherwise the next read may fail.
    while(!wait_until_usec(rx, 0, timeout_usec))
    8440:	e3530000 	cmp	r3, #0
    8444:	0a000003 	beq	8458 <sw_uart_getc_timeout+0x1c0>
        return -1;
	// delay_ncycles(s, n);

    return (int)c;
    8448:	e1a00009 	mov	r0, r9
    844c:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
int sw_uart_getc_timeout(sw_uart_t *uart, int timeout_usec) {
   int rx = uart->rx;

    // get start bit: timeout_usec=0 implies you return right away.
    while(!wait_until_usec(rx, 0, timeout_usec))
        return -1;
    8450:	e3e00000 	mvn	r0, #0
    8454:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
    //delay_ncycles(s, u);
	//s += u;
    
	// make sure you wait for a stop bit: otherwise the next read may fail.
    while(!wait_until_usec(rx, 0, timeout_usec))
        return -1;
    8458:	e3e00000 	mvn	r0, #0
	// delay_ncycles(s, n);

    return (int)c;
}
    845c:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}

00008460 <sw_uart_gets_until>:


// read characters using <sw_uart_getc()> until:
//       <sw_uart_getc() == <end>>
// returns -nbytes read if timeout (could be 0).
int sw_uart_gets_until(sw_uart_t *u, uint8_t *buf, uint32_t nbytes, uint8_t end, uint32_t usec_timeout) {
    8460:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8464:	e1a08000 	mov	r8, r0
    8468:	e1a06001 	mov	r6, r1
    846c:	e1a09003 	mov	r9, r3
    8470:	e59da020 	ldr	sl, [sp, #32]
    assert(nbytes>0);
    8474:	e3520000 	cmp	r2, #0
    8478:	1a000005 	bne	8494 <sw_uart_gets_until+0x34>
    847c:	e59f005c 	ldr	r0, [pc, #92]	; 84e0 <sw_uart_gets_until+0x80>
    8480:	e59f105c 	ldr	r1, [pc, #92]	; 84e4 <sw_uart_gets_until+0x84>
    8484:	e59f205c 	ldr	r2, [pc, #92]	; 84e8 <sw_uart_gets_until+0x88>
    8488:	e3a03071 	mov	r3, #113	; 0x71
    848c:	eb0000ab 	bl	8740 <printk>
    8490:	eb000219 	bl	8cfc <clean_reboot>
    buf[0] = 0;
    8494:	e3a04000 	mov	r4, #0
    8498:	e5c14000 	strb	r4, [r1]

    int i;
	uint8_t char_in;
    for(i = 0; i < nbytes-1; i++) {
    849c:	e2427001 	sub	r7, r2, #1
    84a0:	ea000007 	b	84c4 <sw_uart_gets_until+0x64>
        if((char_in = (uint8_t)sw_uart_getc_timeout(u, usec_timeout)) != end) {
    84a4:	e1a00008 	mov	r0, r8
    84a8:	e1a0100a 	mov	r1, sl
    84ac:	ebffff79 	bl	8298 <sw_uart_getc_timeout>
    84b0:	e6ef0070 	uxtb	r0, r0
    84b4:	e1500009 	cmp	r0, r9
    84b8:	0a000004 	beq	84d0 <sw_uart_gets_until+0x70>
			buf[i] = char_in;
    84bc:	e7c60005 	strb	r0, [r6, r5]
    assert(nbytes>0);
    buf[0] = 0;

    int i;
	uint8_t char_in;
    for(i = 0; i < nbytes-1; i++) {
    84c0:	e2844001 	add	r4, r4, #1
    84c4:	e1a05004 	mov	r5, r4
    84c8:	e1540007 	cmp	r4, r7
    84cc:	3afffff4 	bcc	84a4 <sw_uart_gets_until+0x44>
			buf[i] = char_in;
		} else {
			break;
		}
    }
    buf[i] = 0;
    84d0:	e3a03000 	mov	r3, #0
    84d4:	e7c63005 	strb	r3, [r6, r5]
    return i;
}
    84d8:	e1a00004 	mov	r0, r4
    84dc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    84e0:	00009588 	andeq	r9, r0, r8, lsl #11
    84e4:	000095a4 	andeq	r9, r0, r4, lsr #11
    84e8:	00009510 	andeq	r9, r0, r0, lsl r5

000084ec <sw_uart_gets_timeout>:

// read characters using <sw_uart_getc()> until:
//      we do not receive any characters for <timeout> usec.
// make sure to 0 terminate!
int sw_uart_gets_timeout(sw_uart_t *u, uint8_t *buf, 
                    uint32_t nbytes, uint32_t usec_timeout) {
    84ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    84f0:	e1a07000 	mov	r7, r0
    84f4:	e1a05001 	mov	r5, r1
    84f8:	e1a08003 	mov	r8, r3

    assert(nbytes>0);
    84fc:	e3520000 	cmp	r2, #0
    8500:	1a000005 	bne	851c <sw_uart_gets_timeout+0x30>
    8504:	e59f004c 	ldr	r0, [pc, #76]	; 8558 <sw_uart_gets_timeout+0x6c>
    8508:	e59f104c 	ldr	r1, [pc, #76]	; 855c <sw_uart_gets_timeout+0x70>
    850c:	e59f204c 	ldr	r2, [pc, #76]	; 8560 <sw_uart_gets_timeout+0x74>
    8510:	e3a03087 	mov	r3, #135	; 0x87
    8514:	eb000089 	bl	8740 <printk>
    8518:	eb0001f7 	bl	8cfc <clean_reboot>
    buf[0] = 0;
    851c:	e3a04000 	mov	r4, #0
    8520:	e5c14000 	strb	r4, [r1]

    int i;
    for(i = 0; i < nbytes-1; i++) {
    8524:	e2426001 	sub	r6, r2, #1
    8528:	ea000004 	b	8540 <sw_uart_gets_timeout+0x54>
        buf[i] = (uint8_t) sw_uart_getc_timeout(u, usec_timeout);
    852c:	e1a00007 	mov	r0, r7
    8530:	e1a01008 	mov	r1, r8
    8534:	ebffff57 	bl	8298 <sw_uart_getc_timeout>
    8538:	e7c50004 	strb	r0, [r5, r4]

    assert(nbytes>0);
    buf[0] = 0;

    int i;
    for(i = 0; i < nbytes-1; i++) {
    853c:	e2844001 	add	r4, r4, #1
    8540:	e1540006 	cmp	r4, r6
    8544:	3afffff8 	bcc	852c <sw_uart_gets_timeout+0x40>
        buf[i] = (uint8_t) sw_uart_getc_timeout(u, usec_timeout);
    }
    buf[i] = 0;
    8548:	e3a03000 	mov	r3, #0
    854c:	e7c53004 	strb	r3, [r5, r4]
    return i;
}
    8550:	e1a00004 	mov	r0, r4
    8554:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8558:	00009588 	andeq	r9, r0, r8, lsl #11
    855c:	000095a4 	andeq	r9, r0, r4, lsr #11
    8560:	00009524 	andeq	r9, r0, r4, lsr #10

00008564 <sw_uart_init_helper>:
/**************************************************************************
 * this code is implemented for you
 */

sw_uart_t 
sw_uart_init_helper(uint8_t tx, uint8_t rx, uint32_t baud, uint32_t cyc_per_bit) {
    8564:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8568:	e1a04000 	mov	r4, r0
    856c:	e1a08001 	mov	r8, r1
    8570:	e1a07002 	mov	r7, r2
    8574:	e1a05003 	mov	r5, r3
    8578:	e59d6018 	ldr	r6, [sp, #24]
    // maybe enable the cache?  don't think will work otherwise.
    gpio_set_output(tx);
    857c:	e1a00001 	mov	r0, r1
    8580:	eb0002a5 	bl	901c <gpio_set_output>
    gpio_set_input(rx);
    8584:	e1a00007 	mov	r0, r7
    8588:	eb0002f4 	bl	9160 <gpio_set_input>
    cycle_cnt_init();       
    858c:	e3a03001 	mov	r3, #1
    8590:	ee0f3f1c 	mcr	15, 0, r3, cr15, cr12, {0}


    // make sure it makes sense.
    unsigned mhz = 700 * 1000 * 1000;
    unsigned derived = cyc_per_bit * baud;
    8594:	e0020695 	mul	r2, r5, r6
    assert((mhz - baud) <= derived && derived <= (mhz + baud));
    8598:	e59f3064 	ldr	r3, [pc, #100]	; 8604 <sw_uart_init_helper+0xa0>
    859c:	e0653003 	rsb	r3, r5, r3
    85a0:	e1530002 	cmp	r3, r2
    85a4:	8a000005 	bhi	85c0 <sw_uart_init_helper+0x5c>
    85a8:	e59f3054 	ldr	r3, [pc, #84]	; 8604 <sw_uart_init_helper+0xa0>
    85ac:	e0853003 	add	r3, r5, r3
    85b0:	e1530002 	cmp	r3, r2
    85b4:	2a000003 	bcs	85c8 <sw_uart_init_helper+0x64>
    85b8:	e3a03000 	mov	r3, #0
    85bc:	ea000002 	b	85cc <sw_uart_init_helper+0x68>
    85c0:	e3a03000 	mov	r3, #0
    85c4:	ea000000 	b	85cc <sw_uart_init_helper+0x68>
    85c8:	e3a03001 	mov	r3, #1
    85cc:	e3530000 	cmp	r3, #0
    85d0:	1a000005 	bne	85ec <sw_uart_init_helper+0x88>
    85d4:	e59f002c 	ldr	r0, [pc, #44]	; 8608 <sw_uart_init_helper+0xa4>
    85d8:	e59f102c 	ldr	r1, [pc, #44]	; 860c <sw_uart_init_helper+0xa8>
    85dc:	e59f202c 	ldr	r2, [pc, #44]	; 8610 <sw_uart_init_helper+0xac>
    85e0:	e3a030a1 	mov	r3, #161	; 0xa1
    85e4:	eb000055 	bl	8740 <printk>
    85e8:	eb0001c3 	bl	8cfc <clean_reboot>
    // panic("cyc_per_bit = %d * baud = %d\n", cyc_per_bit, cyc_per_bit * baud);

    return (sw_uart_t) { 
    85ec:	e5c48000 	strb	r8, [r4]
    85f0:	e5c47001 	strb	r7, [r4, #1]
    85f4:	e5845004 	str	r5, [r4, #4]
    85f8:	e5846008 	str	r6, [r4, #8]
            .tx = tx, 
            .rx = rx, 
            .baud = baud, 
            .cycle_per_bit = cyc_per_bit 
    };
}
    85fc:	e1a00004 	mov	r0, r4
    8600:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8604:	29b92700 	ldmibcs	r9!, {r8, r9, sl, sp}
    8608:	000095b0 			; <UNDEFINED> instruction: 0x000095b0
    860c:	000095a4 	andeq	r9, r0, r4, lsr #11
    8610:	0000953c 	andeq	r9, r0, ip, lsr r5

00008614 <sw_uart_getc>:

// blocking read.
int sw_uart_getc(sw_uart_t *uart) {
    8614:	e92d4008 	push	{r3, lr}
    int res = sw_uart_getc_timeout(uart, ~0);
    8618:	e3e01000 	mvn	r1, #0
    861c:	ebffff1d 	bl	8298 <sw_uart_getc_timeout>
    if(res < 0)
    8620:	e3500000 	cmp	r0, #0
    8624:	a8bd8008 	popge	{r3, pc}
        panic("impossible: have an infinite timeout!\n");
    8628:	e59f0010 	ldr	r0, [pc, #16]	; 8640 <sw_uart_getc+0x2c>
    862c:	e59f1010 	ldr	r1, [pc, #16]	; 8644 <sw_uart_getc+0x30>
    8630:	e59f2010 	ldr	r2, [pc, #16]	; 8648 <sw_uart_getc+0x34>
    8634:	e3a030b0 	mov	r3, #176	; 0xb0
    8638:	eb000040 	bl	8740 <printk>
    863c:	eb0001ae 	bl	8cfc <clean_reboot>
    8640:	000095f4 	strdeq	r9, [r0], -r4
    8644:	000095a4 	andeq	r9, r0, r4, lsr #11
    8648:	00009550 	andeq	r9, r0, r0, asr r5

0000864c <sw_uart_putk>:
    return res;
}

void sw_uart_putk(sw_uart_t *uart, const char *msg) {
    864c:	e92d4038 	push	{r3, r4, r5, lr}
    8650:	e1a05000 	mov	r5, r0
    8654:	e1a04001 	mov	r4, r1
    for(; *msg; msg++)
    8658:	ea000002 	b	8668 <sw_uart_putk+0x1c>
        sw_uart_putc(uart, *msg);
    865c:	e1a00005 	mov	r0, r5
    8660:	ebfffeb6 	bl	8140 <sw_uart_putc>
        panic("impossible: have an infinite timeout!\n");
    return res;
}

void sw_uart_putk(sw_uart_t *uart, const char *msg) {
    for(; *msg; msg++)
    8664:	e2844001 	add	r4, r4, #1
    8668:	e5d41000 	ldrb	r1, [r4]
    866c:	e3510000 	cmp	r1, #0
    8670:	1afffff9 	bne	865c <sw_uart_putk+0x10>
        sw_uart_putc(uart, *msg);
}
    8674:	e8bd8038 	pop	{r3, r4, r5, pc}

00008678 <sw_uart_printk>:

// don't pollute the rest of the code with all the stuff in the 
// <stdarg.h> header.
#include <stdarg.h>
#include "libc/va-printk.h"
int sw_uart_printk(sw_uart_t *uart, const char *fmt, ...) {
    8678:	e92d000e 	push	{r1, r2, r3}
    867c:	e92d4030 	push	{r4, r5, lr}
    8680:	e24dde1d 	sub	sp, sp, #464	; 0x1d0
    8684:	e1a05000 	mov	r5, r0
    char buf[460];

    va_list args;
    va_start(args, fmt);
    8688:	e28d3e1e 	add	r3, sp, #480	; 0x1e0
    868c:	e58d3000 	str	r3, [sp]
        int sz = va_printk(buf, sizeof buf, fmt, args);
    8690:	e28d0004 	add	r0, sp, #4
    8694:	e3a01f73 	mov	r1, #460	; 0x1cc
    8698:	e59d21dc 	ldr	r2, [sp, #476]	; 0x1dc
    869c:	eb0000ec 	bl	8a54 <va_printk>
    86a0:	e1a04000 	mov	r4, r0
    va_end(args);
    assert(sz < sizeof buf-1);
    86a4:	e59f303c 	ldr	r3, [pc, #60]	; 86e8 <sw_uart_printk+0x70>
    86a8:	e1500003 	cmp	r0, r3
    86ac:	9a000005 	bls	86c8 <sw_uart_printk+0x50>
    86b0:	e59f0034 	ldr	r0, [pc, #52]	; 86ec <sw_uart_printk+0x74>
    86b4:	e59f1034 	ldr	r1, [pc, #52]	; 86f0 <sw_uart_printk+0x78>
    86b8:	e59f2034 	ldr	r2, [pc, #52]	; 86f4 <sw_uart_printk+0x7c>
    86bc:	e3a030c4 	mov	r3, #196	; 0xc4
    86c0:	eb00001e 	bl	8740 <printk>
    86c4:	eb00018c 	bl	8cfc <clean_reboot>
    sw_uart_putk(uart,buf);
    86c8:	e1a00005 	mov	r0, r5
    86cc:	e28d1004 	add	r1, sp, #4
    86d0:	ebffffdd 	bl	864c <sw_uart_putk>
    return sz;
}
    86d4:	e1a00004 	mov	r0, r4
    86d8:	e28dde1d 	add	sp, sp, #464	; 0x1d0
    86dc:	e8bd4030 	pop	{r4, r5, lr}
    86e0:	e28dd00c 	add	sp, sp, #12
    86e4:	e12fff1e 	bx	lr
    86e8:	000001ca 	andeq	r0, r0, sl, asr #3
    86ec:	0000962c 	andeq	r9, r0, ip, lsr #12
    86f0:	000095a4 	andeq	r9, r0, r4, lsr #11
    86f4:	00009560 	andeq	r9, r0, r0, ror #10

000086f8 <sw_uart_gets_until_blk>:

int sw_uart_gets_until_blk(sw_uart_t *u, uint8_t *buf, uint32_t nbytes, uint8_t end) {
    86f8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    86fc:	e24dd00c 	sub	sp, sp, #12
    int res = sw_uart_gets_until(u, buf, nbytes, end, ~0);
    8700:	e3e0c000 	mvn	ip, #0
    8704:	e58dc000 	str	ip, [sp]
    8708:	ebffff54 	bl	8460 <sw_uart_gets_until>
    if(res < 0)
    870c:	e3500000 	cmp	r0, #0
    8710:	aa000005 	bge	872c <sw_uart_gets_until_blk+0x34>
        panic("impossible: have an infinite timeout!\n");
    8714:	e59f0018 	ldr	r0, [pc, #24]	; 8734 <sw_uart_gets_until_blk+0x3c>
    8718:	e59f1018 	ldr	r1, [pc, #24]	; 8738 <sw_uart_gets_until_blk+0x40>
    871c:	e59f2018 	ldr	r2, [pc, #24]	; 873c <sw_uart_gets_until_blk+0x44>
    8720:	e3a030cc 	mov	r3, #204	; 0xcc
    8724:	eb000005 	bl	8740 <printk>
    8728:	eb000173 	bl	8cfc <clean_reboot>
    return res;
}
    872c:	e28dd00c 	add	sp, sp, #12
    8730:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    8734:	000095f4 	strdeq	r9, [r0], -r4
    8738:	000095a4 	andeq	r9, r0, r4, lsr #11
    873c:	00009570 	andeq	r9, r0, r0, ror r5

00008740 <printk>:
#include <stdarg.h>

#include "rpi.h"
#include "va-printk.h"

int printk(const char *fmt, ...) {
    8740:	e92d000f 	push	{r0, r1, r2, r3}
    8744:	e92d4030 	push	{r4, r5, lr}
    8748:	e24dd00c 	sub	sp, sp, #12
    // this is a really huge buffer for a pi.   could do this better.
    static char buf[1024];
    va_list args;

    va_start(args, fmt);
    874c:	e28d301c 	add	r3, sp, #28
    8750:	e58d3004 	str	r3, [sp, #4]
        int sz = va_printk(buf, sizeof buf, fmt, args);
    8754:	e59f4034 	ldr	r4, [pc, #52]	; 8790 <printk+0x50>
    8758:	e1a00004 	mov	r0, r4
    875c:	e3a01b01 	mov	r1, #1024	; 0x400
    8760:	e59d2018 	ldr	r2, [sp, #24]
    8764:	eb0000ba 	bl	8a54 <va_printk>
    8768:	e1a05000 	mov	r5, r0
    va_end(args);


#if 1
    putk(buf);
    876c:	e59f3020 	ldr	r3, [pc, #32]	; 8794 <printk+0x54>
    8770:	e5933000 	ldr	r3, [r3]
    8774:	e1a00004 	mov	r0, r4
    8778:	e12fff33 	blx	r3
    int i;
    for(i = 0; buf[i]; i++)
        rpi_putchar(buf[i]);
#endif
    return sz;
}
    877c:	e1a00005 	mov	r0, r5
    8780:	e28dd00c 	add	sp, sp, #12
    8784:	e8bd4030 	pop	{r4, r5, lr}
    8788:	e28dd010 	add	sp, sp, #16
    878c:	e12fff1e 	bx	lr
    8790:	00009760 	andeq	r9, r0, r0, ror #14
    8794:	000093dc 	ldrdeq	r9, [r0], -ip

00008798 <internal_putk>:
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    8798:	e92d4038 	push	{r3, r4, r5, lr}
    879c:	e1a04000 	mov	r4, r0
    for(; *p; p++)
        rpi_putchar(*p);
    87a0:	e59f5020 	ldr	r5, [pc, #32]	; 87c8 <internal_putk+0x30>
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    87a4:	ea000002 	b	87b4 <internal_putk+0x1c>
        rpi_putchar(*p);
    87a8:	e5953000 	ldr	r3, [r5]
    87ac:	e12fff33 	blx	r3
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    87b0:	e2844001 	add	r4, r4, #1
    87b4:	e5d40000 	ldrb	r0, [r4]
    87b8:	e3500000 	cmp	r0, #0
    87bc:	1afffff9 	bne	87a8 <internal_putk+0x10>
        rpi_putchar(*p);
//  we were adding this.
//  rpi_putchar('\n');
    return 1;
}
    87c0:	e3a00001 	mov	r0, #1
    87c4:	e8bd8038 	pop	{r3, r4, r5, pc}
    87c8:	00009450 	andeq	r9, r0, r0, asr r4

000087cc <strlen>:
#include <string.h>

size_t strlen(const char *p) {
    size_t ret;
    for (ret = 0; p[ret]; ++ret)
    87cc:	e3a03000 	mov	r3, #0
    87d0:	ea000000 	b	87d8 <strlen+0xc>
    87d4:	e2833001 	add	r3, r3, #1
    87d8:	e7d02003 	ldrb	r2, [r0, r3]
    87dc:	e3520000 	cmp	r2, #0
    87e0:	1afffffb 	bne	87d4 <strlen+0x8>
        ;
    return ret;
}
    87e4:	e1a00003 	mov	r0, r3
    87e8:	e12fff1e 	bx	lr

000087ec <isdigit>:
    if(puts_fp)
        putk = puts_fp;
}

// XXX: check sign promotion.
static int isdigit(int c) { return c >= '0' && c <= '9'; }
    87ec:	e2400030 	sub	r0, r0, #48	; 0x30
    87f0:	e3500009 	cmp	r0, #9
    87f4:	83a00000 	movhi	r0, #0
    87f8:	93a00001 	movls	r0, #1
    87fc:	e12fff1e 	bx	lr

00008800 <pad>:

// don't move: can't be inlined, gcc seems to have a bug.
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
    8800:	e0611000 	rsb	r1, r1, r0
	// pad with leading spaces
	for(; len < width; len++)
		*p++ = ' ';
    8804:	e3a03020 	mov	r3, #32
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8808:	ea000002 	b	8818 <pad+0x18>
		*p++ = ' ';
    880c:	e5c03000 	strb	r3, [r0]
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8810:	e2811001 	add	r1, r1, #1
		*p++ = ' ';
    8814:	e2800001 	add	r0, r0, #1
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8818:	e1510002 	cmp	r1, r2
    881c:	bafffffa 	blt	880c <pad+0xc>
		*p++ = ' ';
	*p = 0;
    8820:	e3a03000 	mov	r3, #0
    8824:	e5c03000 	strb	r3, [r0]
	return p;
}
    8828:	e12fff1e 	bx	lr

0000882c <reverse>:

static char* reverse(char *dst, int n, char *p, char *start) {
	// drop the lower chars if the string is too big.
	int len = p - start + 1; // include \0
    882c:	e063c002 	rsb	ip, r3, r2
    8830:	e28cc001 	add	ip, ip, #1
	if(len > n)
    8834:	e15c0001 	cmp	ip, r1
		start += (len - n);
    8838:	c061100c 	rsbgt	r1, r1, ip
    883c:	c0833001 	addgt	r3, r3, r1

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    8840:	e2422001 	sub	r2, r2, #1
    8844:	e1a01000 	mov	r1, r0
    8848:	ea000002 	b	8858 <reverse+0x2c>
		*dst++ = *p;
    884c:	e452c001 	ldrb	ip, [r2], #-1
    8850:	e5c1c000 	strb	ip, [r1]
    8854:	e2811001 	add	r1, r1, #1
		start += (len - n);

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    8858:	e1520003 	cmp	r2, r3
    885c:	2afffffa 	bcs	884c <reverse+0x20>
		*dst++ = *p;
	*dst++ = 0;
    8860:	e3a03000 	mov	r3, #0
    8864:	e5c13000 	strb	r3, [r1]

	return s;
}
    8868:	e12fff1e 	bx	lr

0000886c <emit>:

static char* emit(unsigned base, char *dst, int n, int val, int width, int signed_p) {
    886c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8870:	e24dd040 	sub	sp, sp, #64	; 0x40
    8874:	e1a05001 	mov	r5, r1
    8878:	e1a04002 	mov	r4, r2
    887c:	e59d2058 	ldr	r2, [sp, #88]	; 0x58
	// XXX: constrain width to be >= bit size: can change this.
	if(width > n)
    8880:	e1520004 	cmp	r2, r4
		width = n - 1;
    8884:	c2442001 	subgt	r2, r4, #1

	char buf[64], *p = buf; 
	unsigned u = val;
    8888:	e1a0c003 	mov	ip, r3

	switch(base) { 
    888c:	e2400002 	sub	r0, r0, #2
    8890:	e350000e 	cmp	r0, #14
    8894:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
    8898:	ea000042 	b	89a8 <emit+0x13c>
    889c:	00008980 	andeq	r8, r0, r0, lsl #19
    88a0:	000089a8 	andeq	r8, r0, r8, lsr #19
    88a4:	000089a8 	andeq	r8, r0, r8, lsr #19
    88a8:	000089a8 	andeq	r8, r0, r8, lsr #19
    88ac:	000089a8 	andeq	r8, r0, r8, lsr #19
    88b0:	000089a8 	andeq	r8, r0, r8, lsr #19
    88b4:	00008974 	andeq	r8, r0, r4, ror r9
    88b8:	000089a8 	andeq	r8, r0, r8, lsr #19
    88bc:	000088d8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    88c0:	000089a8 	andeq	r8, r0, r8, lsr #19
    88c4:	000089a8 	andeq	r8, r0, r8, lsr #19
    88c8:	000089a8 	andeq	r8, r0, r8, lsr #19
    88cc:	000089a8 	andeq	r8, r0, r8, lsr #19
    88d0:	000089a8 	andeq	r8, r0, r8, lsr #19
    88d4:	0000894c 	andeq	r8, r0, ip, asr #18
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
    88d8:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
    88dc:	e2911000 	adds	r1, r1, #0
    88e0:	13a01001 	movne	r1, #1
    88e4:	e0111fa3 	ands	r1, r1, r3, lsr #31
				neg_p = 1;
				val = -val;
    88e8:	1263c000 	rsbne	ip, r3, #0
	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
				neg_p = 1;
    88ec:	13a08001 	movne	r8, #1
	unsigned u = val;

	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
    88f0:	03a08000 	moveq	r8, #0
			if(val < 0 && signed_p) {
				neg_p = 1;
    88f4:	e1a0100d 	mov	r1, sp
				val = -val;
				u = val;
			}
			do { 
				*p++ = "0123456789"[u % 10];
    88f8:	e59f70e8 	ldr	r7, [pc, #232]	; 89e8 <emit+0x17c>
    88fc:	e59f60e8 	ldr	r6, [pc, #232]	; 89ec <emit+0x180>
    8900:	ea000000 	b	8908 <emit+0x9c>
    8904:	e1a01003 	mov	r1, r3
    8908:	e2813001 	add	r3, r1, #1
    890c:	e08e0c97 	umull	r0, lr, r7, ip
    8910:	e1a0e1ae 	lsr	lr, lr, #3
    8914:	e1a0000e 	mov	r0, lr
    8918:	e08ee10e 	add	lr, lr, lr, lsl #2
    891c:	e1a0e08e 	lsl	lr, lr, #1
    8920:	e06ee00c 	rsb	lr, lr, ip
    8924:	e7d6c00e 	ldrb	ip, [r6, lr]
    8928:	e5c1c000 	strb	ip, [r1]
			} while(u /= 10); 
    892c:	e1a0c000 	mov	ip, r0
    8930:	e3500000 	cmp	r0, #0
    8934:	1afffff2 	bne	8904 <emit+0x98>
			if(neg_p)
    8938:	e3580000 	cmp	r8, #0
				*p++ = '-';
    893c:	12813002 	addne	r3, r1, #2
    8940:	13a0002d 	movne	r0, #45	; 0x2d
    8944:	15c10001 	strbne	r0, [r1, #1]
    8948:	ea00001c 	b	89c0 <emit+0x154>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    894c:	e1a0e00d 	mov	lr, sp
			break;
		}
		case 16:
			u = val;
                        do {
                                *p++ = "0123456789abcdef"[u % 16];
    8950:	e59f0098 	ldr	r0, [pc, #152]	; 89f0 <emit+0x184>
    8954:	e28e3001 	add	r3, lr, #1
    8958:	e20c100f 	and	r1, ip, #15
    895c:	e7d01001 	ldrb	r1, [r0, r1]
    8960:	e5ce1000 	strb	r1, [lr]
    8964:	e1a0e003 	mov	lr, r3
                        } while(u /= 16);
    8968:	e1b0c22c 	lsrs	ip, ip, #4
    896c:	1afffff8 	bne	8954 <emit+0xe8>
    8970:	ea000012 	b	89c0 <emit+0x154>
                        break;
		// just a single char
		case 8:
			*p++ = val;
    8974:	e5cd3000 	strb	r3, [sp]
    8978:	e28d3001 	add	r3, sp, #1
			break;
    897c:	ea00000f 	b	89c0 <emit+0x154>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    8980:	e1a0e00d 	mov	lr, sp
#if 0
			for(int i = 0; i < 32; i++)
				*p++ = "01"[(u & (1<<i)) != 0];
#else
                        do {
                        	*p++ = "01"[u % 2];
    8984:	e59f0068 	ldr	r0, [pc, #104]	; 89f4 <emit+0x188>
    8988:	e28e3001 	add	r3, lr, #1
    898c:	e20c1001 	and	r1, ip, #1
    8990:	e7d01001 	ldrb	r1, [r0, r1]
    8994:	e5ce1000 	strb	r1, [lr]
    8998:	e1a0e003 	mov	lr, r3
			} while(u /= 2);
    899c:	e1b0c0ac 	lsrs	ip, ip, #1
    89a0:	1afffff8 	bne	8988 <emit+0x11c>
    89a4:	ea000005 	b	89c0 <emit+0x154>
#endif
			break;
		default:
			assert(0);
    89a8:	e59f0048 	ldr	r0, [pc, #72]	; 89f8 <emit+0x18c>
    89ac:	e59f1048 	ldr	r1, [pc, #72]	; 89fc <emit+0x190>
    89b0:	e59f2048 	ldr	r2, [pc, #72]	; 8a00 <emit+0x194>
    89b4:	e3a03075 	mov	r3, #117	; 0x75
    89b8:	ebffff60 	bl	8740 <printk>
    89bc:	eb0000ce 	bl	8cfc <clean_reboot>
	}
	// number string is reversed, so re-reverse it.
	return reverse(dst, n, pad(p, buf, width), buf);
    89c0:	e1a00003 	mov	r0, r3
    89c4:	e1a0100d 	mov	r1, sp
    89c8:	ebffff8c 	bl	8800 <pad>
    89cc:	e1a02000 	mov	r2, r0
    89d0:	e1a00005 	mov	r0, r5
    89d4:	e1a01004 	mov	r1, r4
    89d8:	e1a0300d 	mov	r3, sp
    89dc:	ebffff92 	bl	882c <reverse>
}
    89e0:	e28dd040 	add	sp, sp, #64	; 0x40
    89e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    89e8:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    89ec:	0000969c 	muleq	r0, ip, r6
    89f0:	000096a8 	andeq	r9, r0, r8, lsr #13
    89f4:	000096bc 			; <UNDEFINED> instruction: 0x000096bc
    89f8:	00009674 	andeq	r9, r0, r4, ror r6
    89fc:	00009688 	andeq	r9, r0, r8, lsl #13
    8a00:	00009650 	andeq	r9, r0, r0, asr r6

00008a04 <rpi_set_output>:
// override this is going through the network.
int (*rpi_putchar)(int c) = internal_putchar;
#endif


void rpi_set_output(int (*putc_fp)(int), int (*puts_fp)(const char *)) {
    8a04:	e92d4008 	push	{r3, lr}
    assert(putc_fp);
    8a08:	e3500000 	cmp	r0, #0
    8a0c:	1a000005 	bne	8a28 <rpi_set_output+0x24>
    8a10:	e59f0028 	ldr	r0, [pc, #40]	; 8a40 <rpi_set_output+0x3c>
    8a14:	e59f1028 	ldr	r1, [pc, #40]	; 8a44 <rpi_set_output+0x40>
    8a18:	e59f2028 	ldr	r2, [pc, #40]	; 8a48 <rpi_set_output+0x44>
    8a1c:	e3a03020 	mov	r3, #32
    8a20:	ebffff46 	bl	8740 <printk>
    8a24:	eb0000b4 	bl	8cfc <clean_reboot>
    rpi_putchar = putc_fp;
    8a28:	e59f301c 	ldr	r3, [pc, #28]	; 8a4c <rpi_set_output+0x48>
    8a2c:	e5830000 	str	r0, [r3]
    if(puts_fp)
    8a30:	e3510000 	cmp	r1, #0
        putk = puts_fp;
    8a34:	159f3014 	ldrne	r3, [pc, #20]	; 8a50 <rpi_set_output+0x4c>
    8a38:	15831000 	strne	r1, [r3]
    8a3c:	e8bd8008 	pop	{r3, pc}
    8a40:	000096c0 	andeq	r9, r0, r0, asr #13
    8a44:	00009688 	andeq	r9, r0, r8, lsl #13
    8a48:	00009658 	andeq	r9, r0, r8, asr r6
    8a4c:	00009450 	andeq	r9, r0, r0, asr r4
    8a50:	000093dc 	ldrdeq	r9, [r0], -ip

00008a54 <va_printk>:
	return reverse(dst, n, pad(p, buf, width), buf);
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
    8a54:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a58:	e24dd08c 	sub	sp, sp, #140	; 0x8c
    8a5c:	e1a0b000 	mov	fp, r0
    8a60:	e1a0a003 	mov	sl, r3
	char *p = buf, *e = buf + n - 1;
    8a64:	e2411001 	sub	r1, r1, #1
    8a68:	e0808001 	add	r8, r0, r1

	buf[0] = 0;
    8a6c:	e3a03000 	mov	r3, #0
    8a70:	e5c03000 	strb	r3, [r0]
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;
    8a74:	e1a04000 	mov	r4, r0

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    8a78:	ea000087 	b	8c9c <va_printk+0x248>
		if(*fmt != '%')
    8a7c:	e3530025 	cmp	r3, #37	; 0x25
			*p++ = *fmt++;
    8a80:	12822001 	addne	r2, r2, #1
    8a84:	15c43000 	strbne	r3, [r4]
    8a88:	12844001 	addne	r4, r4, #1
    8a8c:	1a000082 	bne	8c9c <va_printk+0x248>
		
		else if(fmt[1] == '%') {
    8a90:	e5d21001 	ldrb	r1, [r2, #1]
    8a94:	e3510025 	cmp	r1, #37	; 0x25
			*p++ = *fmt;
    8a98:	05c43000 	strbeq	r3, [r4]
			fmt+=2;
    8a9c:	02822002 	addeq	r2, r2, #2
	for(; *fmt && p < e; ) {
		if(*fmt != '%')
			*p++ = *fmt++;
		
		else if(fmt[1] == '%') {
			*p++ = *fmt;
    8aa0:	02844001 	addeq	r4, r4, #1
    8aa4:	0a00007c 	beq	8c9c <va_printk+0x248>
			fmt+=2;
		} else {	
			fmt++;
    8aa8:	e2826001 	add	r6, r2, #1

			char *s, num[128];
			unsigned width = 0;
    8aac:	e3a07000 	mov	r7, #0

			while(isdigit(*fmt)) {
    8ab0:	ea000004 	b	8ac8 <va_printk+0x74>
				width = width*10 + *fmt - '0';
    8ab4:	e0877107 	add	r7, r7, r7, lsl #2
    8ab8:	e1a07087 	lsl	r7, r7, #1
    8abc:	e0877005 	add	r7, r7, r5
    8ac0:	e2477030 	sub	r7, r7, #48	; 0x30
				fmt++;
    8ac4:	e2866001 	add	r6, r6, #1
			fmt++;

			char *s, num[128];
			unsigned width = 0;

			while(isdigit(*fmt)) {
    8ac8:	e5d65000 	ldrb	r5, [r6]
    8acc:	e1a09005 	mov	r9, r5
    8ad0:	e1a00005 	mov	r0, r5
    8ad4:	ebffff44 	bl	87ec <isdigit>
    8ad8:	e3500000 	cmp	r0, #0
    8adc:	1afffff4 	bne	8ab4 <va_printk+0x60>
				width = width*10 + *fmt - '0';
				fmt++;
			}
			assert(width < 32);
    8ae0:	e357001f 	cmp	r7, #31
    8ae4:	9a000005 	bls	8b00 <va_printk+0xac>
    8ae8:	e59f01d8 	ldr	r0, [pc, #472]	; 8cc8 <va_printk+0x274>
    8aec:	e59f11d8 	ldr	r1, [pc, #472]	; 8ccc <va_printk+0x278>
    8af0:	e59f21d8 	ldr	r2, [pc, #472]	; 8cd0 <va_printk+0x27c>
    8af4:	e3a03092 	mov	r3, #146	; 0x92
    8af8:	ebffff10 	bl	8740 <printk>
    8afc:	eb00007e 	bl	8cfc <clean_reboot>
			
			switch(*fmt) {
    8b00:	e2455062 	sub	r5, r5, #98	; 0x62
    8b04:	e3550016 	cmp	r5, #22
    8b08:	979ff105 	ldrls	pc, [pc, r5, lsl #2]
    8b0c:	ea000051 	b	8c58 <va_printk+0x204>
    8b10:	00008bfc 	strdeq	r8, [r0], -ip
    8b14:	00008c30 	andeq	r8, r0, r0, lsr ip
    8b18:	00008b84 	andeq	r8, r0, r4, lsl #23
    8b1c:	00008c58 	andeq	r8, r0, r8, asr ip
    8b20:	00008b6c 	andeq	r8, r0, ip, ror #22
    8b24:	00008c58 	andeq	r8, r0, r8, asr ip
    8b28:	00008c58 	andeq	r8, r0, r8, asr ip
    8b2c:	00008c58 	andeq	r8, r0, r8, asr ip
    8b30:	00008c58 	andeq	r8, r0, r8, asr ip
    8b34:	00008c58 	andeq	r8, r0, r8, asr ip
    8b38:	00008c58 	andeq	r8, r0, r8, asr ip
    8b3c:	00008c58 	andeq	r8, r0, r8, asr ip
    8b40:	00008c58 	andeq	r8, r0, r8, asr ip
    8b44:	00008c58 	andeq	r8, r0, r8, asr ip
    8b48:	00008bd4 	ldrdeq	r8, [r0], -r4
    8b4c:	00008c58 	andeq	r8, r0, r8, asr ip
    8b50:	00008c58 	andeq	r8, r0, r8, asr ip
    8b54:	00008c24 	andeq	r8, r0, r4, lsr #24
    8b58:	00008c58 	andeq	r8, r0, r8, asr ip
    8b5c:	00008bac 	andeq	r8, r0, ip, lsr #23
    8b60:	00008c58 	andeq	r8, r0, r8, asr ip
    8b64:	00008c58 	andeq	r8, r0, r8, asr ip
    8b68:	00008bd4 	ldrdeq	r8, [r0], -r4
			case 'f':
			{
#ifndef RPI_FP_ENABLED
				panic("float not enabled!!!");
    8b6c:	e59f0160 	ldr	r0, [pc, #352]	; 8cd4 <va_printk+0x280>
    8b70:	e59f1154 	ldr	r1, [pc, #340]	; 8ccc <va_printk+0x278>
    8b74:	e59f2154 	ldr	r2, [pc, #340]	; 8cd0 <va_printk+0x27c>
    8b78:	e3a03098 	mov	r3, #152	; 0x98
    8b7c:	ebfffeef 	bl	8740 <printk>
    8b80:	eb00005d 	bl	8cfc <clean_reboot>

				break;
#endif
			}
			case 'd':
				s = emit(10, num, 128, va_arg(args, int), width, 1);
    8b84:	e59a3000 	ldr	r3, [sl]
    8b88:	e28aa004 	add	sl, sl, #4
    8b8c:	e58d7000 	str	r7, [sp]
    8b90:	e3a02001 	mov	r2, #1
    8b94:	e58d2004 	str	r2, [sp, #4]
    8b98:	e3a0000a 	mov	r0, #10
    8b9c:	e28d1008 	add	r1, sp, #8
    8ba0:	e3a02080 	mov	r2, #128	; 0x80
    8ba4:	ebffff30 	bl	886c <emit>
				break;
    8ba8:	ea000031 	b	8c74 <va_printk+0x220>
			case 'u':
				s = emit(10, num, 128, va_arg(args, unsigned), width, 0);
    8bac:	e59a3000 	ldr	r3, [sl]
    8bb0:	e28aa004 	add	sl, sl, #4
    8bb4:	e58d7000 	str	r7, [sp]
    8bb8:	e3a02000 	mov	r2, #0
    8bbc:	e58d2004 	str	r2, [sp, #4]
    8bc0:	e3a0000a 	mov	r0, #10
    8bc4:	e28d1008 	add	r1, sp, #8
    8bc8:	e3a02080 	mov	r2, #128	; 0x80
    8bcc:	ebffff26 	bl	886c <emit>
				break;
    8bd0:	ea000027 	b	8c74 <va_printk+0x220>
			case 'p':
			case 'x':
				s = emit(16, num, 128, va_arg(args, unsigned), width, 0);
    8bd4:	e59a3000 	ldr	r3, [sl]
    8bd8:	e28aa004 	add	sl, sl, #4
    8bdc:	e58d7000 	str	r7, [sp]
    8be0:	e3a02000 	mov	r2, #0
    8be4:	e58d2004 	str	r2, [sp, #4]
    8be8:	e3a00010 	mov	r0, #16
    8bec:	e28d1008 	add	r1, sp, #8
    8bf0:	e3a02080 	mov	r2, #128	; 0x80
    8bf4:	ebffff1c 	bl	886c <emit>
				break;
    8bf8:	ea00001d 	b	8c74 <va_printk+0x220>
			case 'b':
				s = emit(2, num, 128, va_arg(args, unsigned), width, 0);
    8bfc:	e59a3000 	ldr	r3, [sl]
    8c00:	e28aa004 	add	sl, sl, #4
    8c04:	e58d7000 	str	r7, [sp]
    8c08:	e3a02000 	mov	r2, #0
    8c0c:	e58d2004 	str	r2, [sp, #4]
    8c10:	e3a00002 	mov	r0, #2
    8c14:	e28d1008 	add	r1, sp, #8
    8c18:	e3a02080 	mov	r2, #128	; 0x80
    8c1c:	ebffff12 	bl	886c <emit>
				break;
    8c20:	ea000013 	b	8c74 <va_printk+0x220>
			case 's':
				s = va_arg(args, char *);
    8c24:	e59a0000 	ldr	r0, [sl]
    8c28:	e28aa004 	add	sl, sl, #4
				break;
    8c2c:	ea000010 	b	8c74 <va_printk+0x220>
			case 'c':
				s = emit(8, num, 128, va_arg(args, int),width,0);
    8c30:	e59a3000 	ldr	r3, [sl]
    8c34:	e28aa004 	add	sl, sl, #4
    8c38:	e58d7000 	str	r7, [sp]
    8c3c:	e3a02000 	mov	r2, #0
    8c40:	e58d2004 	str	r2, [sp, #4]
    8c44:	e3a00008 	mov	r0, #8
    8c48:	e08d1000 	add	r1, sp, r0
    8c4c:	e3a02080 	mov	r2, #128	; 0x80
    8c50:	ebffff05 	bl	886c <emit>
				break;
    8c54:	ea000006 	b	8c74 <va_printk+0x220>
			default: 
				panic("printk: not handling specifier '%c'\n", *fmt);
    8c58:	e58d9000 	str	r9, [sp]
    8c5c:	e59f0074 	ldr	r0, [pc, #116]	; 8cd8 <va_printk+0x284>
    8c60:	e59f1064 	ldr	r1, [pc, #100]	; 8ccc <va_printk+0x278>
    8c64:	e59f2064 	ldr	r2, [pc, #100]	; 8cd0 <va_printk+0x27c>
    8c68:	e3a030b9 	mov	r3, #185	; 0xb9
    8c6c:	ebfffeb3 	bl	8740 <printk>
    8c70:	eb000021 	bl	8cfc <clean_reboot>
				return 0;   // ugh
			}
			fmt++;
    8c74:	e2862001 	add	r2, r6, #1

			// safe string copy
			for(; p < e && *s; )
    8c78:	ea000002 	b	8c88 <va_printk+0x234>
				*p++ = *s++;
    8c7c:	e2800001 	add	r0, r0, #1
    8c80:	e5c43000 	strb	r3, [r4]
    8c84:	e2844001 	add	r4, r4, #1
				return 0;   // ugh
			}
			fmt++;

			// safe string copy
			for(; p < e && *s; )
    8c88:	e1540008 	cmp	r4, r8
    8c8c:	2a000002 	bcs	8c9c <va_printk+0x248>
    8c90:	e5d03000 	ldrb	r3, [r0]
    8c94:	e3530000 	cmp	r3, #0
    8c98:	1afffff7 	bne	8c7c <va_printk+0x228>

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    8c9c:	e5d23000 	ldrb	r3, [r2]
    8ca0:	e3530000 	cmp	r3, #0
    8ca4:	0a000001 	beq	8cb0 <va_printk+0x25c>
    8ca8:	e1540008 	cmp	r4, r8
    8cac:	3affff72 	bcc	8a7c <va_printk+0x28>
			// safe string copy
			for(; p < e && *s; )
				*p++ = *s++;
		}
	}
	*p++ = 0;
    8cb0:	e2840001 	add	r0, r4, #1
    8cb4:	e3a03000 	mov	r3, #0
    8cb8:	e5c43000 	strb	r3, [r4]
	return p - buf;
}
    8cbc:	e06b0000 	rsb	r0, fp, r0
    8cc0:	e28dd08c 	add	sp, sp, #140	; 0x8c
    8cc4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8cc8:	000096d8 	ldrdeq	r9, [r0], -r8
    8ccc:	00009688 	andeq	r9, r0, r8, lsl #13
    8cd0:	00009668 	andeq	r9, r0, r8, ror #12
    8cd4:	000096f4 	strdeq	r9, [r0], -r4
    8cd8:	0000971c 	andeq	r9, r0, ip, lsl r7

00008cdc <enable_cache>:
#include "rpi.h"

void enable_cache(void) {
    unsigned r;
    asm volatile ("MRC p15, 0, %0, c1, c0, 0" : "=r" (r));
    8cdc:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	r |= (1 << 12); // l1 instruction cache
	r |= (1 << 11); // branch prediction
    8ce0:	e3833b06 	orr	r3, r3, #6144	; 0x1800
    asm volatile ("MCR p15, 0, %0, c1, c0, 0" :: "r" (r));
    8ce4:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    8ce8:	e12fff1e 	bx	lr

00008cec <disable_cache>:
}

// should we flush icache?
void disable_cache(void) {
    unsigned r;
    asm volatile ("MRC p15, 0, %0, c1, c0, 0" : "=r" (r));
    8cec:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    //r |= 0x1800;
	r &= ~(1 << 12); // l1 instruction cache
	r &= ~(1 << 11); // branch prediction
    8cf0:	e3c33b06 	bic	r3, r3, #6144	; 0x1800
    asm volatile ("MCR p15, 0, %0, c1, c0, 0" :: "r" (r));
    8cf4:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    8cf8:	e12fff1e 	bx	lr

00008cfc <clean_reboot>:
#include "rpi.h"

// print out a special message so bootloader exits
void clean_reboot(void) {
    8cfc:	e92d4008 	push	{r3, lr}
    putk("DONE!!!\n");
    8d00:	e59f3014 	ldr	r3, [pc, #20]	; 8d1c <clean_reboot+0x20>
    8d04:	e5933000 	ldr	r3, [r3]
    8d08:	e59f0010 	ldr	r0, [pc, #16]	; 8d20 <clean_reboot+0x24>
    8d0c:	e12fff33 	blx	r3
    delay_ms(100);       // (hopefully) enough time for message to get flushed.
    8d10:	e3a00064 	mov	r0, #100	; 0x64
    8d14:	eb000048 	bl	8e3c <delay_ms>
    rpi_reboot();
    8d18:	eb000019 	bl	8d84 <rpi_reboot>
    8d1c:	000093dc 	ldrdeq	r9, [r0], -ip
    8d20:	00009754 	andeq	r9, r0, r4, asr r7

00008d24 <_cstart>:
#include "rpi.h"

void _cstart() {
    8d24:	e92d4008 	push	{r3, lr}
    extern int __bss_start__, __bss_end__;
	void notmain();

    int* bss = &__bss_start__;
    8d28:	e59f3020 	ldr	r3, [pc, #32]	; 8d50 <_cstart+0x2c>
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    8d2c:	e59f2020 	ldr	r2, [pc, #32]	; 8d54 <_cstart+0x30>
        *bss++ = 0;
    8d30:	e3a01000 	mov	r1, #0
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    8d34:	ea000001 	b	8d40 <_cstart+0x1c>
        *bss++ = 0;
    8d38:	e5831000 	str	r1, [r3]
    8d3c:	e2833004 	add	r3, r3, #4
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    8d40:	e1530002 	cmp	r3, r2
    8d44:	3afffffb 	bcc	8d38 <_cstart+0x14>
        *bss++ = 0;

    notmain(); 
    8d48:	ebfffcb0 	bl	8010 <notmain>
	rpi_reboot();
    8d4c:	eb00000c 	bl	8d84 <rpi_reboot>
    8d50:	00009760 	andeq	r9, r0, r0, ror #14
    8d54:	00009b60 	andeq	r9, r0, r0, ror #22

00008d58 <at_user_level>:
 * works if we have a trashed stack pointer?
 */
static unsigned user_level = 0b10000;
int at_user_level(void) {
    unsigned cpsr = 0;
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    8d58:	e10f0000 	mrs	r0, CPSR

    // user level = lower 5 bits = 0b10000);
    return (cpsr  & 0b11111)  == user_level;
    8d5c:	e200001f 	and	r0, r0, #31
}
    8d60:	e3500010 	cmp	r0, #16
    8d64:	13a00000 	movne	r0, #0
    8d68:	03a00001 	moveq	r0, #1
    8d6c:	e12fff1e 	bx	lr

00008d70 <set_user_level>:

// this is just used by the reboot code.
void set_user_level(void) {
    unsigned cpsr = 0;
    // XXX: shouldn't we just set the one bit?
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    8d70:	e10f3000 	mrs	r3, CPSR
        cpsr = (cpsr & ~0b11111) | user_level;
    8d74:	e3c3301f 	bic	r3, r3, #31
    8d78:	e3833010 	orr	r3, r3, #16
    asm volatile("msr cpsr, %0" :: "r"(cpsr));
    8d7c:	e129f003 	msr	CPSR_fc, r3
    8d80:	e12fff1e 	bx	lr

00008d84 <rpi_reboot>:
}

void rpi_reboot(void) {
    8d84:	e92d4008 	push	{r3, lr}
    if(at_user_level()) {
    8d88:	ebfffff2 	bl	8d58 <at_user_level>
    8d8c:	e3500000 	cmp	r0, #0
    8d90:	0a000000 	beq	8d98 <rpi_reboot+0x14>
        set_user_level();
    8d94:	ebfffff5 	bl	8d70 <set_user_level>
        // of stuff.
        // assert(!at_user_level());
    }

    // gives uart time to flush: should just call flush directly.
    delay_ms(30);
    8d98:	e3a0001e 	mov	r0, #30
    8d9c:	eb000026 	bl	8e3c <delay_ms>
    const int PM_WDOG = 0x20100024;
    const int PM_PASSWORD = 0x5a000000;
    const int PM_RSTC_WRCFG_FULL_RESET = 0x00000020;

    // timeout = 1/16th of a second? (whatever)
    PUT32(PM_WDOG, PM_PASSWORD | 1);
    8da0:	e59f0014 	ldr	r0, [pc, #20]	; 8dbc <rpi_reboot+0x38>
    8da4:	e59f1014 	ldr	r1, [pc, #20]	; 8dc0 <rpi_reboot+0x3c>
    8da8:	eb000035 	bl	8e84 <PUT32>
    PUT32(PM_RSTC, PM_PASSWORD | PM_RSTC_WRCFG_FULL_RESET);
    8dac:	e59f0010 	ldr	r0, [pc, #16]	; 8dc4 <rpi_reboot+0x40>
    8db0:	e59f1010 	ldr	r1, [pc, #16]	; 8dc8 <rpi_reboot+0x44>
    8db4:	eb000032 	bl	8e84 <PUT32>
    8db8:	eafffffe 	b	8db8 <rpi_reboot+0x34>
    8dbc:	20100024 	andscs	r0, r0, r4, lsr #32
    8dc0:	5a000001 	bpl	8dcc <delay_cycles>
    8dc4:	2010001c 	andscs	r0, r0, ip, lsl r0
    8dc8:	5a000020 	bpl	8e50 <delay_sec>

00008dcc <delay_cycles>:
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    8dcc:	ea000001 	b	8dd8 <delay_cycles+0xc>
        asm("add r1, r1, #0");
    8dd0:	e2811000 	add	r1, r1, #0
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    8dd4:	e1a00003 	mov	r0, r3
    8dd8:	e2403001 	sub	r3, r0, #1
    8ddc:	e3500000 	cmp	r0, #0
    8de0:	1afffffa 	bne	8dd0 <delay_cycles+0x4>
        asm("add r1, r1, #0");
}
    8de4:	e12fff1e 	bx	lr

00008de8 <timer_get_usec_raw>:

// no dev barrier.
unsigned timer_get_usec_raw(void) {
    8de8:	e92d4008 	push	{r3, lr}
    return GET32(0x20003004);
    8dec:	e59f0004 	ldr	r0, [pc, #4]	; 8df8 <timer_get_usec_raw+0x10>
    8df0:	eb00002f 	bl	8eb4 <GET32>
}
    8df4:	e8bd8008 	pop	{r3, pc}
    8df8:	20003004 	andcs	r3, r0, r4

00008dfc <timer_get_usec>:

// in usec
unsigned timer_get_usec(void) {
    8dfc:	e92d4010 	push	{r4, lr}
    dev_barrier();
    8e00:	eb000017 	bl	8e64 <dev_barrier>
    unsigned u = timer_get_usec_raw();
    8e04:	ebfffff7 	bl	8de8 <timer_get_usec_raw>
    8e08:	e1a04000 	mov	r4, r0
    dev_barrier();
    8e0c:	eb000014 	bl	8e64 <dev_barrier>
    return u;
}
    8e10:	e1a00004 	mov	r0, r4
    8e14:	e8bd8010 	pop	{r4, pc}

00008e18 <delay_us>:

void delay_us(unsigned us) {
    8e18:	e92d4038 	push	{r3, r4, r5, lr}
    8e1c:	e1a05000 	mov	r5, r0
    unsigned rb = timer_get_usec();
    8e20:	ebfffff5 	bl	8dfc <timer_get_usec>
    8e24:	e1a04000 	mov	r4, r0
    while (1) {
        unsigned ra = timer_get_usec();
    8e28:	ebfffff3 	bl	8dfc <timer_get_usec>
        if ((ra - rb) >= us) {
    8e2c:	e0640000 	rsb	r0, r4, r0
    8e30:	e1500005 	cmp	r0, r5
    8e34:	3afffffb 	bcc	8e28 <delay_us+0x10>
            break;
        }
    }
}
    8e38:	e8bd8038 	pop	{r3, r4, r5, pc}

00008e3c <delay_ms>:
void delay_ms(unsigned ms) {
    8e3c:	e92d4008 	push	{r3, lr}
    delay_us(ms*1000);
    8e40:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    8e44:	e0000093 	mul	r0, r3, r0
    8e48:	ebfffff2 	bl	8e18 <delay_us>
    8e4c:	e8bd8008 	pop	{r3, pc}

00008e50 <delay_sec>:
}
void delay_sec(unsigned sec) {
    8e50:	e92d4008 	push	{r3, lr}
    delay_ms(sec*1000);
    8e54:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    8e58:	e0000093 	mul	r0, r3, r0
    8e5c:	ebfffff6 	bl	8e3c <delay_ms>
    8e60:	e8bd8008 	pop	{r3, pc}

00008e64 <dev_barrier>:
    8e64:	ea000002 	b	8e74 <dsb>

00008e68 <dmb>:
    8e68:	e3a00000 	mov	r0, #0
    8e6c:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
    8e70:	e12fff1e 	bx	lr

00008e74 <dsb>:
    8e74:	ee070f9a 	mcr	15, 0, r0, cr7, cr10, {4}
    8e78:	e12fff1e 	bx	lr

00008e7c <put32>:
    8e7c:	e5801000 	str	r1, [r0]
    8e80:	e12fff1e 	bx	lr

00008e84 <PUT32>:
    8e84:	e5801000 	str	r1, [r0]
    8e88:	e12fff1e 	bx	lr

00008e8c <put16>:
    8e8c:	e1c010b0 	strh	r1, [r0]
    8e90:	e12fff1e 	bx	lr

00008e94 <PUT16>:
    8e94:	e1c010b0 	strh	r1, [r0]
    8e98:	e12fff1e 	bx	lr

00008e9c <put8>:
    8e9c:	e5c01000 	strb	r1, [r0]
    8ea0:	e12fff1e 	bx	lr

00008ea4 <PUT8>:
    8ea4:	e5c01000 	strb	r1, [r0]
    8ea8:	e12fff1e 	bx	lr

00008eac <get32>:
    8eac:	e5900000 	ldr	r0, [r0]
    8eb0:	e12fff1e 	bx	lr

00008eb4 <GET32>:
    8eb4:	e5900000 	ldr	r0, [r0]
    8eb8:	e12fff1e 	bx	lr

00008ebc <GETPC>:
    8ebc:	e1a0000e 	mov	r0, lr
    8ec0:	e12fff1e 	bx	lr

00008ec4 <dummy>:
    8ec4:	e12fff1e 	bx	lr

00008ec8 <uart_can_getc>:

	dev_barrier();
}

// 1 = at least one byte on rx queue, 0 otherwise
static int uart_can_getc(void) {
    8ec8:	e92d4008 	push	{r3, lr}
    return get32(AUX_MU_LSR_REG) & RX_READY;
    8ecc:	e59f300c 	ldr	r3, [pc, #12]	; 8ee0 <uart_can_getc+0x18>
    8ed0:	e5930000 	ldr	r0, [r3]
    8ed4:	ebfffff4 	bl	8eac <get32>
}
    8ed8:	e2000001 	and	r0, r0, #1
    8edc:	e8bd8008 	pop	{r3, pc}
    8ee0:	000093e0 	andeq	r9, r0, r0, ror #7

00008ee4 <uart_init>:
#define RX_READY 0x1
#define TX_READY 0x10
#define TX_EMPTY 0x20

// note: if you need memory barriers, use <dev_barrier()>
void uart_init(void) {
    8ee4:	e92d4038 	push	{r3, r4, r5, lr}
    
	dev_barrier();
    8ee8:	ebffffdd 	bl	8e64 <dev_barrier>

	// set GPIO 14 and 15 to alternate function 0
    //volatile unsigned* gpio_reg = (void*) 0x20200004;
    //unsigned bitmask = get32(gpio_reg);
    gpio_set_function(14, GPIO_FUNC_ALT5);
    8eec:	e3a0000e 	mov	r0, #14
    8ef0:	e3a01002 	mov	r1, #2
    8ef4:	eb0000fd 	bl	92f0 <gpio_set_function>
	gpio_set_function(15, GPIO_FUNC_ALT5);
    8ef8:	e3a0000f 	mov	r0, #15
    8efc:	e3a01002 	mov	r1, #2
    8f00:	eb0000fa 	bl	92f0 <gpio_set_function>
    //bitmask &= ~(0b111 << ((UART0_RX % 10) * 3));
    //bitmask |= (0b010 << ((UART0_TX % 10) * 3));
    //bitmask |= (0b010 << ((UART0_RX % 10) * 3));
    //put32(gpio_reg, bitmask);

	dev_barrier();
    8f04:	ebffffd6 	bl	8e64 <dev_barrier>

    put32(AUX_ENABLES, get32(AUX_ENABLES) | (ENABLE_UART));
    8f08:	e59f4068 	ldr	r4, [pc, #104]	; 8f78 <uart_init+0x94>
    8f0c:	e5945004 	ldr	r5, [r4, #4]
    8f10:	e1a00005 	mov	r0, r5
    8f14:	ebffffe4 	bl	8eac <get32>
    8f18:	e3801001 	orr	r1, r0, #1
    8f1c:	e1a00005 	mov	r0, r5
    8f20:	ebffffd5 	bl	8e7c <put32>
	
	dev_barrier();
    8f24:	ebffffce 	bl	8e64 <dev_barrier>
	
    put32(AUX_MU_CNTL_REG, 0x0);
    8f28:	e5940008 	ldr	r0, [r4, #8]
    8f2c:	e3a01000 	mov	r1, #0
    8f30:	ebffffd1 	bl	8e7c <put32>
    put32(AUX_MU_IER_REG, 0x0);
    8f34:	e594000c 	ldr	r0, [r4, #12]
    8f38:	e3a01000 	mov	r1, #0
    8f3c:	ebffffce 	bl	8e7c <put32>
    put32(AUX_MU_IIR_REG, CLEAR_RX_FIFO | CLEAR_TX_FIFO);
    8f40:	e5940010 	ldr	r0, [r4, #16]
    8f44:	e3a01006 	mov	r1, #6
    8f48:	ebffffcb 	bl	8e7c <put32>
	put32(AUX_MU_LCR_REG, ENABLE_8BIT_MODE);
    8f4c:	e5940014 	ldr	r0, [r4, #20]
    8f50:	e3a01003 	mov	r1, #3
    8f54:	ebffffc8 	bl	8e7c <put32>
    put32(AUX_MU_BAUD_REG, BAUD_115200);
    8f58:	e5940018 	ldr	r0, [r4, #24]
    8f5c:	e59f1018 	ldr	r1, [pc, #24]	; 8f7c <uart_init+0x98>
    8f60:	ebffffc5 	bl	8e7c <put32>
    put32(AUX_MU_CNTL_REG, ENABLE_TXER | ENABLE_RXER);
    8f64:	e5940008 	ldr	r0, [r4, #8]
    8f68:	e3a01003 	mov	r1, #3
    8f6c:	ebffffc2 	bl	8e7c <put32>

	dev_barrier();
    8f70:	ebffffbb 	bl	8e64 <dev_barrier>
    8f74:	e8bd8038 	pop	{r3, r4, r5, pc}
    8f78:	000093e0 	andeq	r9, r0, r0, ror #7
    8f7c:	0000010e 	andeq	r0, r0, lr, lsl #2

00008f80 <uart_getc>:
    return get32(AUX_MU_LSR_REG) & RX_READY;
}

// returns one byte from the rx queue, if needed
// blocks until there is one.
int uart_getc(void) {
    8f80:	e92d4008 	push	{r3, lr}
    while(1)
        if(uart_can_getc())  break;
    8f84:	ebffffcf 	bl	8ec8 <uart_can_getc>
    8f88:	e3500000 	cmp	r0, #0
    8f8c:	0afffffc 	beq	8f84 <uart_getc+0x4>
    return get32(AUX_MU_IO_REG) & 0xFF;
    8f90:	e59f300c 	ldr	r3, [pc, #12]	; 8fa4 <uart_getc+0x24>
    8f94:	e593001c 	ldr	r0, [r3, #28]
    8f98:	ebffffc3 	bl	8eac <get32>
}
    8f9c:	e6ef0070 	uxtb	r0, r0
    8fa0:	e8bd8008 	pop	{r3, pc}
    8fa4:	000093e0 	andeq	r9, r0, r0, ror #7

00008fa8 <uart_can_putc>:

// 1 = space to put at least one byte, 0 otherwise.
int uart_can_putc(void) {
    8fa8:	e92d4008 	push	{r3, lr}
    return get32(AUX_MU_LSR_REG) & TX_EMPTY;
    8fac:	e59f300c 	ldr	r3, [pc, #12]	; 8fc0 <uart_can_putc+0x18>
    8fb0:	e5930000 	ldr	r0, [r3]
    8fb4:	ebffffbc 	bl	8eac <get32>
}
    8fb8:	e2000020 	and	r0, r0, #32
    8fbc:	e8bd8008 	pop	{r3, pc}
    8fc0:	000093e0 	andeq	r9, r0, r0, ror #7

00008fc4 <uart_putc>:

// put one byte on the tx qqueue, if needed, blocks
// until TX has space.
void uart_putc(unsigned c) {
    8fc4:	e92d4010 	push	{r4, lr}
    8fc8:	e1a04000 	mov	r4, r0
    while(1)
            if(uart_can_putc())  break;
    8fcc:	ebfffff5 	bl	8fa8 <uart_can_putc>
    8fd0:	e3500000 	cmp	r0, #0
    8fd4:	0afffffc 	beq	8fcc <uart_putc+0x8>
    put32(AUX_MU_IO_REG, c);
    8fd8:	e59f300c 	ldr	r3, [pc, #12]	; 8fec <uart_putc+0x28>
    8fdc:	e593001c 	ldr	r0, [r3, #28]
    8fe0:	e1a01004 	mov	r1, r4
    8fe4:	ebffffa4 	bl	8e7c <put32>
    8fe8:	e8bd8010 	pop	{r4, pc}
    8fec:	000093e0 	andeq	r9, r0, r0, ror #7

00008ff0 <uart_has_data>:


// simple wrapper routines useful later.

// a maybe-more intuitive name for clients.
int uart_has_data(void) {
    8ff0:	e92d4008 	push	{r3, lr}
    return uart_can_getc();
    8ff4:	ebffffb3 	bl	8ec8 <uart_can_getc>
}
    8ff8:	e8bd8008 	pop	{r3, pc}

00008ffc <uart_getc_async>:

int uart_getc_async(void) { 
    8ffc:	e92d4008 	push	{r3, lr}
    if(!uart_has_data())
    9000:	ebfffffa 	bl	8ff0 <uart_has_data>
    9004:	e3500000 	cmp	r0, #0
    9008:	0a000001 	beq	9014 <uart_getc_async+0x18>
        return -1;
    return uart_getc();
    900c:	ebffffdb 	bl	8f80 <uart_getc>
    9010:	e8bd8008 	pop	{r3, pc}
    return uart_can_getc();
}

int uart_getc_async(void) { 
    if(!uart_has_data())
        return -1;
    9014:	e3e00000 	mvn	r0, #0
    return uart_getc();
}
    9018:	e8bd8008 	pop	{r3, pc}

0000901c <gpio_set_output>:
volatile unsigned *GPLEV1 = (void*) 0x20200038;
// Part 1 implement gpio_set_on, gpio_set_off, gpio_set_output

// set <pin> to be an output pin.  note: fsel0, fsel1, fsel2 are contiguous in memory,
// so you can use array calculations!
void gpio_set_output(unsigned pin) {
    901c:	e92d4038 	push	{r3, r4, r5, lr}
    9020:	e1a04000 	mov	r4, r0
    // implement this
    // use gpio_fsel0
    
    if (pin >= 32) {
    9024:	e350001f 	cmp	r0, #31
    9028:	88bd8038 	pophi	{r3, r4, r5, pc}
        return;
    }
    
    volatile unsigned* gpio_reg;
    
    unsigned reg_select = pin / 10;
    902c:	e59f30b4 	ldr	r3, [pc, #180]	; 90e8 <gpio_set_output+0xcc>
    9030:	e0832093 	umull	r2, r3, r3, r0
    9034:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    9038:	e3530005 	cmp	r3, #5
    903c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    9040:	ea000017 	b	90a4 <gpio_set_output+0x88>
    9044:	0000905c 	andeq	r9, r0, ip, asr r0
    9048:	00009068 	andeq	r9, r0, r8, rrx
    904c:	00009074 	andeq	r9, r0, r4, ror r0
    9050:	00009080 	andeq	r9, r0, r0, lsl #1
    9054:	0000908c 	andeq	r9, r0, ip, lsl #1
    9058:	00009098 	muleq	r0, r8, r0
        case 0: {gpio_reg = GPFSEL0; break;}
    905c:	e59f3088 	ldr	r3, [pc, #136]	; 90ec <gpio_set_output+0xd0>
    9060:	e5935000 	ldr	r5, [r3]
    9064:	ea00000f 	b	90a8 <gpio_set_output+0x8c>
        case 1: {gpio_reg = GPFSEL1; break;}
    9068:	e59f307c 	ldr	r3, [pc, #124]	; 90ec <gpio_set_output+0xd0>
    906c:	e5935004 	ldr	r5, [r3, #4]
    9070:	ea00000c 	b	90a8 <gpio_set_output+0x8c>
        case 2: {gpio_reg = GPFSEL2; break;}
    9074:	e59f3070 	ldr	r3, [pc, #112]	; 90ec <gpio_set_output+0xd0>
    9078:	e5935008 	ldr	r5, [r3, #8]
    907c:	ea000009 	b	90a8 <gpio_set_output+0x8c>
        case 3: {gpio_reg = GPFSEL3; break;}
    9080:	e59f3064 	ldr	r3, [pc, #100]	; 90ec <gpio_set_output+0xd0>
    9084:	e593500c 	ldr	r5, [r3, #12]
    9088:	ea000006 	b	90a8 <gpio_set_output+0x8c>
        case 4: {gpio_reg = GPFSEL4; break;}
    908c:	e59f3058 	ldr	r3, [pc, #88]	; 90ec <gpio_set_output+0xd0>
    9090:	e5935010 	ldr	r5, [r3, #16]
    9094:	ea000003 	b	90a8 <gpio_set_output+0x8c>
        case 5: {gpio_reg = GPFSEL5; break;}
    9098:	e59f304c 	ldr	r3, [pc, #76]	; 90ec <gpio_set_output+0xd0>
    909c:	e5935014 	ldr	r5, [r3, #20]
    90a0:	ea000000 	b	90a8 <gpio_set_output+0x8c>
        default: gpio_reg = 0x0;
    90a4:	e3a05000 	mov	r5, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    90a8:	e1a00005 	mov	r0, r5
    90ac:	ebffff7e 	bl	8eac <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    90b0:	e59f1030 	ldr	r1, [pc, #48]	; 90e8 <gpio_set_output+0xcc>
    90b4:	e0813491 	umull	r3, r1, r1, r4
    90b8:	e1a011a1 	lsr	r1, r1, #3
    90bc:	e0811101 	add	r1, r1, r1, lsl #2
    90c0:	e1a01081 	lsl	r1, r1, #1
    90c4:	e0611004 	rsb	r1, r1, r4
    90c8:	e0811081 	add	r1, r1, r1, lsl #1
    90cc:	e3a03007 	mov	r3, #7
    90d0:	e1c03113 	bic	r3, r0, r3, lsl r1
    bitmask |= (1 << ((pin % 10) * 3));
    put32(gpio_reg, bitmask);
    90d4:	e1a00005 	mov	r0, r5
    90d8:	e3a02001 	mov	r2, #1
    90dc:	e1831112 	orr	r1, r3, r2, lsl r1
    90e0:	ebffff65 	bl	8e7c <put32>
    90e4:	e8bd8038 	pop	{r3, r4, r5, pc}
    90e8:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    90ec:	00009414 	andeq	r9, r0, r4, lsl r4

000090f0 <gpio_set_on>:
    
}


// set GPIO <pin> on.
inline void gpio_set_on(unsigned pin) {
    90f0:	e92d4008 	push	{r3, lr}
    // implement this
    // use gpio_set0
    if (pin >= 32) {
    90f4:	e350001f 	cmp	r0, #31
    90f8:	88bd8008 	pophi	{r3, pc}
    // Get current register value
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPSET0;
    90fc:	959f3020 	ldrls	r3, [pc, #32]	; 9124 <gpio_set_on+0x34>
    9100:	95932018 	ldrls	r2, [r3, #24]
        // TODO: why do we not want this statement?
        //bitmask = get32(GPSET0);
    } else {
        gpio_reg = GPSET1;
    9104:	859f3018 	ldrhi	r3, [pc, #24]	; 9124 <gpio_set_on+0x34>
    9108:	8593201c 	ldrhi	r2, [r3, #28]
        //bitmask = get32(GPSET1);
        // TODO: why do we not want this statement?
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    910c:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    9110:	e1a00002 	mov	r0, r2
    9114:	e3a01001 	mov	r1, #1
    9118:	e1a01311 	lsl	r1, r1, r3
    911c:	ebffff56 	bl	8e7c <put32>
    9120:	e8bd8008 	pop	{r3, pc}
    9124:	00009414 	andeq	r9, r0, r4, lsl r4

00009128 <gpio_set_off>:
}

// set GPIO <pin> off
inline void gpio_set_off(unsigned pin) {
    9128:	e92d4008 	push	{r3, lr}
    // implement this
    // use gpio_clr0
    if(pin >= 32) {
    912c:	e350001f 	cmp	r0, #31
    9130:	88bd8008 	pophi	{r3, pc}
    }
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPCLR0;
    9134:	959f3020 	ldrls	r3, [pc, #32]	; 915c <gpio_set_off+0x34>
    9138:	95932020 	ldrls	r2, [r3, #32]
        //bitmask = get32(GPCLR0);
    } else {
        gpio_reg = GPCLR1;
    913c:	859f3018 	ldrhi	r3, [pc, #24]	; 915c <gpio_set_off+0x34>
    9140:	85932024 	ldrhi	r2, [r3, #36]	; 0x24
        //bitmask = get32(GPCLR1);
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    9144:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    9148:	e1a00002 	mov	r0, r2
    914c:	e3a01001 	mov	r1, #1
    9150:	e1a01311 	lsl	r1, r1, r3
    9154:	ebffff48 	bl	8e7c <put32>
    9158:	e8bd8008 	pop	{r3, pc}
    915c:	00009414 	andeq	r9, r0, r4, lsl r4

00009160 <gpio_set_input>:
}

// Part 2: implement gpio_set_input and gpio_read

// set <pin> to input.
void gpio_set_input(unsigned pin) {
    9160:	e92d4038 	push	{r3, r4, r5, lr}
    9164:	e1a04000 	mov	r4, r0
    // implement.
    if(pin >= 32) {
    9168:	e350001f 	cmp	r0, #31
    916c:	88bd8038 	pophi	{r3, r4, r5, pc}
        return;
    }
    
    volatile unsigned* gpio_reg;
    
    unsigned reg_select = pin / 10;
    9170:	e59f30ac 	ldr	r3, [pc, #172]	; 9224 <gpio_set_input+0xc4>
    9174:	e0832093 	umull	r2, r3, r3, r0
    9178:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    917c:	e3530005 	cmp	r3, #5
    9180:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    9184:	ea000017 	b	91e8 <gpio_set_input+0x88>
    9188:	000091a0 	andeq	r9, r0, r0, lsr #3
    918c:	000091ac 	andeq	r9, r0, ip, lsr #3
    9190:	000091b8 			; <UNDEFINED> instruction: 0x000091b8
    9194:	000091c4 	andeq	r9, r0, r4, asr #3
    9198:	000091d0 	ldrdeq	r9, [r0], -r0
    919c:	000091dc 	ldrdeq	r9, [r0], -ip
        case 0: {gpio_reg = GPFSEL0; break;}
    91a0:	e59f3080 	ldr	r3, [pc, #128]	; 9228 <gpio_set_input+0xc8>
    91a4:	e5935000 	ldr	r5, [r3]
    91a8:	ea00000f 	b	91ec <gpio_set_input+0x8c>
        case 1: {gpio_reg = GPFSEL1; break;}
    91ac:	e59f3074 	ldr	r3, [pc, #116]	; 9228 <gpio_set_input+0xc8>
    91b0:	e5935004 	ldr	r5, [r3, #4]
    91b4:	ea00000c 	b	91ec <gpio_set_input+0x8c>
        case 2: {gpio_reg = GPFSEL2; break;}
    91b8:	e59f3068 	ldr	r3, [pc, #104]	; 9228 <gpio_set_input+0xc8>
    91bc:	e5935008 	ldr	r5, [r3, #8]
    91c0:	ea000009 	b	91ec <gpio_set_input+0x8c>
        case 3: {gpio_reg = GPFSEL3; break;}
    91c4:	e59f305c 	ldr	r3, [pc, #92]	; 9228 <gpio_set_input+0xc8>
    91c8:	e593500c 	ldr	r5, [r3, #12]
    91cc:	ea000006 	b	91ec <gpio_set_input+0x8c>
        case 4: {gpio_reg = GPFSEL4; break;}
    91d0:	e59f3050 	ldr	r3, [pc, #80]	; 9228 <gpio_set_input+0xc8>
    91d4:	e5935010 	ldr	r5, [r3, #16]
    91d8:	ea000003 	b	91ec <gpio_set_input+0x8c>
        case 5: {gpio_reg = GPFSEL5; break;}
    91dc:	e59f3044 	ldr	r3, [pc, #68]	; 9228 <gpio_set_input+0xc8>
    91e0:	e5935014 	ldr	r5, [r3, #20]
    91e4:	ea000000 	b	91ec <gpio_set_input+0x8c>
        default: gpio_reg = 0x0;
    91e8:	e3a05000 	mov	r5, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    91ec:	e1a00005 	mov	r0, r5
    91f0:	ebffff2d 	bl	8eac <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    91f4:	e59f1028 	ldr	r1, [pc, #40]	; 9224 <gpio_set_input+0xc4>
    91f8:	e0813491 	umull	r3, r1, r1, r4
    91fc:	e1a011a1 	lsr	r1, r1, #3
    9200:	e0811101 	add	r1, r1, r1, lsl #2
    9204:	e1a01081 	lsl	r1, r1, #1
    9208:	e0611004 	rsb	r1, r1, r4
    920c:	e0811081 	add	r1, r1, r1, lsl #1
    9210:	e3a03007 	mov	r3, #7
    9214:	e1c01113 	bic	r1, r0, r3, lsl r1
    put32(gpio_reg, bitmask);
    9218:	e1a00005 	mov	r0, r5
    921c:	ebffff16 	bl	8e7c <put32>
    9220:	e8bd8038 	pop	{r3, r4, r5, pc}
    9224:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    9228:	00009414 	andeq	r9, r0, r4, lsl r4

0000922c <gpio_read>:
    
    
}

// return the value of <pin>
inline int gpio_read(unsigned pin) {
    922c:	e92d4010 	push	{r4, lr}
    9230:	e1a04000 	mov	r4, r0
    
    if(pin >= 32) {
    9234:	e350001f 	cmp	r0, #31
    9238:	8a00000b 	bhi	926c <gpio_read+0x40>
        return -1;
    }
    
    unsigned v = 0;
    
    if (pin <= 31){
    923c:	8a000003 	bhi	9250 <gpio_read+0x24>
        v = get32(GPLEV0);
    9240:	e59f302c 	ldr	r3, [pc, #44]	; 9274 <gpio_read+0x48>
    9244:	e5930028 	ldr	r0, [r3, #40]	; 0x28
    9248:	ebffff17 	bl	8eac <get32>
    924c:	ea000002 	b	925c <gpio_read+0x30>
    } else {
        v = get32(GPLEV1);
    9250:	e59f301c 	ldr	r3, [pc, #28]	; 9274 <gpio_read+0x48>
    9254:	e593002c 	ldr	r0, [r3, #44]	; 0x2c
    9258:	ebffff13 	bl	8eac <get32>
    }
    
    return (v & (1 << (pin % 32)));
    925c:	e204401f 	and	r4, r4, #31
    9260:	e3a03001 	mov	r3, #1
    9264:	e0000413 	and	r0, r0, r3, lsl r4
    9268:	e8bd8010 	pop	{r4, pc}

// return the value of <pin>
inline int gpio_read(unsigned pin) {
    
    if(pin >= 32) {
        return -1;
    926c:	e3e00000 	mvn	r0, #0
    } else {
        v = get32(GPLEV1);
    }
    
    return (v & (1 << (pin % 32)));
}
    9270:	e8bd8010 	pop	{r4, pc}
    9274:	00009414 	andeq	r9, r0, r4, lsl r4

00009278 <gpio_write>:

// set <pin> to <v> (v \in {0,1})
inline void gpio_write(unsigned pin, unsigned v) {
    9278:	e92d4008 	push	{r3, lr}
    
    if(pin >= 32) {
    927c:	e350001f 	cmp	r0, #31
    9280:	88bd8008 	pophi	{r3, pc}
        return;
    }
    
    if(v)
    9284:	e3510000 	cmp	r1, #0
    9288:	0a00000b 	beq	92bc <gpio_write+0x44>

// set GPIO <pin> on.
inline void gpio_set_on(unsigned pin) {
    // implement this
    // use gpio_set0
    if (pin >= 32) {
    928c:	e350001f 	cmp	r0, #31
    9290:	88bd8008 	pophi	{r3, pc}
    // Get current register value
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPSET0;
    9294:	959f3050 	ldrls	r3, [pc, #80]	; 92ec <gpio_write+0x74>
    9298:	95932018 	ldrls	r2, [r3, #24]
        // TODO: why do we not want this statement?
        //bitmask = get32(GPSET0);
    } else {
        gpio_reg = GPSET1;
    929c:	859f3048 	ldrhi	r3, [pc, #72]	; 92ec <gpio_write+0x74>
    92a0:	8593201c 	ldrhi	r2, [r3, #28]
        //bitmask = get32(GPSET1);
        // TODO: why do we not want this statement?
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    92a4:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    92a8:	e1a00002 	mov	r0, r2
    92ac:	e3a01001 	mov	r1, #1
    92b0:	e1a01311 	lsl	r1, r1, r3
    92b4:	ebfffef0 	bl	8e7c <put32>
    92b8:	e8bd8008 	pop	{r3, pc}

// set GPIO <pin> off
inline void gpio_set_off(unsigned pin) {
    // implement this
    // use gpio_clr0
    if(pin >= 32) {
    92bc:	e350001f 	cmp	r0, #31
    92c0:	88bd8008 	pophi	{r3, pc}
    }
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPCLR0;
    92c4:	959f3020 	ldrls	r3, [pc, #32]	; 92ec <gpio_write+0x74>
    92c8:	95932020 	ldrls	r2, [r3, #32]
        //bitmask = get32(GPCLR0);
    } else {
        gpio_reg = GPCLR1;
    92cc:	859f3018 	ldrhi	r3, [pc, #24]	; 92ec <gpio_write+0x74>
    92d0:	85932024 	ldrhi	r2, [r3, #36]	; 0x24
        //bitmask = get32(GPCLR1);
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    92d4:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    92d8:	e1a00002 	mov	r0, r2
    92dc:	e3a01001 	mov	r1, #1
    92e0:	e1a01311 	lsl	r1, r1, r3
    92e4:	ebfffee4 	bl	8e7c <put32>
    92e8:	e8bd8008 	pop	{r3, pc}
    92ec:	00009414 	andeq	r9, r0, r4, lsl r4

000092f0 <gpio_set_function>:
        gpio_set_on(pin);
    else
        gpio_set_off(pin);
}

void gpio_set_function(unsigned pin, gpio_func_t func) {
    92f0:	e92d4070 	push	{r4, r5, r6, lr}
    92f4:	e1a04000 	mov	r4, r0
    92f8:	e1a05001 	mov	r5, r1
    // implement this
    // use gpio_fsel0
    
    if (pin >= 32 || func >= 8) {
    92fc:	e3510007 	cmp	r1, #7
    9300:	9350001f 	cmpls	r0, #31
    9304:	88bd8070 	pophi	{r4, r5, r6, pc}
        return;
    }

    volatile unsigned* gpio_reg;
    unsigned reg_select = pin / 10;
    9308:	e59f30b0 	ldr	r3, [pc, #176]	; 93c0 <gpio_set_function+0xd0>
    930c:	e0832093 	umull	r2, r3, r3, r0
    9310:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    9314:	e3530005 	cmp	r3, #5
    9318:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    931c:	ea000017 	b	9380 <gpio_set_function+0x90>
    9320:	00009338 	andeq	r9, r0, r8, lsr r3
    9324:	00009344 	andeq	r9, r0, r4, asr #6
    9328:	00009350 	andeq	r9, r0, r0, asr r3
    932c:	0000935c 	andeq	r9, r0, ip, asr r3
    9330:	00009368 	andeq	r9, r0, r8, ror #6
    9334:	00009374 	andeq	r9, r0, r4, ror r3
        case 0: {gpio_reg = GPFSEL0; break;}
    9338:	e59f3084 	ldr	r3, [pc, #132]	; 93c4 <gpio_set_function+0xd4>
    933c:	e5936000 	ldr	r6, [r3]
    9340:	ea00000f 	b	9384 <gpio_set_function+0x94>
        case 1: {gpio_reg = GPFSEL1; break;}
    9344:	e59f3078 	ldr	r3, [pc, #120]	; 93c4 <gpio_set_function+0xd4>
    9348:	e5936004 	ldr	r6, [r3, #4]
    934c:	ea00000c 	b	9384 <gpio_set_function+0x94>
        case 2: {gpio_reg = GPFSEL2; break;}
    9350:	e59f306c 	ldr	r3, [pc, #108]	; 93c4 <gpio_set_function+0xd4>
    9354:	e5936008 	ldr	r6, [r3, #8]
    9358:	ea000009 	b	9384 <gpio_set_function+0x94>
        case 3: {gpio_reg = GPFSEL3; break;}
    935c:	e59f3060 	ldr	r3, [pc, #96]	; 93c4 <gpio_set_function+0xd4>
    9360:	e593600c 	ldr	r6, [r3, #12]
    9364:	ea000006 	b	9384 <gpio_set_function+0x94>
        case 4: {gpio_reg = GPFSEL4; break;}
    9368:	e59f3054 	ldr	r3, [pc, #84]	; 93c4 <gpio_set_function+0xd4>
    936c:	e5936010 	ldr	r6, [r3, #16]
    9370:	ea000003 	b	9384 <gpio_set_function+0x94>
        case 5: {gpio_reg = GPFSEL5; break;}
    9374:	e59f3048 	ldr	r3, [pc, #72]	; 93c4 <gpio_set_function+0xd4>
    9378:	e5936014 	ldr	r6, [r3, #20]
    937c:	ea000000 	b	9384 <gpio_set_function+0x94>
        default: gpio_reg = 0x0;
    9380:	e3a06000 	mov	r6, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    9384:	e1a00006 	mov	r0, r6
    9388:	ebfffec7 	bl	8eac <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    938c:	e59f302c 	ldr	r3, [pc, #44]	; 93c0 <gpio_set_function+0xd0>
    9390:	e0832493 	umull	r2, r3, r3, r4
    9394:	e1a031a3 	lsr	r3, r3, #3
    9398:	e0833103 	add	r3, r3, r3, lsl #2
    939c:	e1a03083 	lsl	r3, r3, #1
    93a0:	e0633004 	rsb	r3, r3, r4
    93a4:	e0833083 	add	r3, r3, r3, lsl #1
    93a8:	e3a01007 	mov	r1, #7
    93ac:	e1c01311 	bic	r1, r0, r1, lsl r3
    bitmask |= (func << ((pin % 10) * 3));
    put32(gpio_reg, bitmask);
    93b0:	e1a00006 	mov	r0, r6
    93b4:	e1811315 	orr	r1, r1, r5, lsl r3
    93b8:	ebfffeaf 	bl	8e7c <put32>
    93bc:	e8bd8070 	pop	{r4, r5, r6, pc}
    93c0:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    93c4:	00009414 	andeq	r9, r0, r4, lsl r4

000093c8 <internal_putchar>:
#include "rpi.h"

static int internal_putchar(int c) { uart_putc(c); return c; }
    93c8:	e92d4010 	push	{r4, lr}
    93cc:	e1a04000 	mov	r4, r0
    93d0:	ebfffefb 	bl	8fc4 <uart_putc>
    93d4:	e1a00004 	mov	r0, r4
    93d8:	e8bd8010 	pop	{r4, pc}

Disassembly of section .data:

000093dc <putk>:
    93dc:	00008798 	muleq	r0, r8, r7

000093e0 <AUX_MU_LSR_REG>:
    93e0:	20215054 	eorcs	r5, r1, r4, asr r0

000093e4 <AUX_ENABLES>:
    93e4:	20215004 	eorcs	r5, r1, r4

000093e8 <AUX_MU_CNTL_REG>:
    93e8:	20215060 	eorcs	r5, r1, r0, rrx

000093ec <AUX_MU_IER_REG>:
    93ec:	20215044 	eorcs	r5, r1, r4, asr #32

000093f0 <AUX_MU_IIR_REG>:
    93f0:	20215048 	eorcs	r5, r1, r8, asr #32

000093f4 <AUX_MU_LCR_REG>:
    93f4:	2021504c 	eorcs	r5, r1, ip, asr #32

000093f8 <AUX_MU_BAUD_REG>:
    93f8:	20215068 	eorcs	r5, r1, r8, rrx

000093fc <AUX_MU_IO_REG>:
    93fc:	20215040 	eorcs	r5, r1, r0, asr #32

00009400 <AUX_MU_STAT_REG>:
    9400:	20215064 	eorcs	r5, r1, r4, rrx

00009404 <AUX_MU_SCRATCH>:
    9404:	2021505c 	eorcs	r5, r1, ip, asr r0

00009408 <AUX_MU_MSR_REG>:
    9408:	20215058 	eorcs	r5, r1, r8, asr r0

0000940c <AUX_MU_MCR_REG>:
    940c:	20215050 	eorcs	r5, r1, r0, asr r0

00009410 <AUX_IRQ>:
    9410:	20215000 	eorcs	r5, r1, r0

00009414 <GPFSEL0>:
    9414:	20200000 	eorcs	r0, r0, r0

00009418 <GPFSEL1>:
    9418:	20200004 	eorcs	r0, r0, r4

0000941c <GPFSEL2>:
    941c:	20200008 	eorcs	r0, r0, r8

00009420 <GPFSEL3>:
    9420:	2020000c 	eorcs	r0, r0, ip

00009424 <GPFSEL4>:
    9424:	20200010 	eorcs	r0, r0, r0, lsl r0

00009428 <GPFSEL5>:
    9428:	20200014 	eorcs	r0, r0, r4, lsl r0

0000942c <GPSET0>:
    942c:	2020001c 	eorcs	r0, r0, ip, lsl r0

00009430 <GPSET1>:
    9430:	20200020 	eorcs	r0, r0, r0, lsr #32

00009434 <GPCLR0>:
    9434:	20200028 	eorcs	r0, r0, r8, lsr #32

00009438 <GPCLR1>:
    9438:	2020002c 	eorcs	r0, r0, ip, lsr #32

0000943c <GPLEV0>:
    943c:	20200034 	eorcs	r0, r0, r4, lsr r0

00009440 <GPLEV1>:
    9440:	20200038 	eorcs	r0, r0, r8, lsr r0

00009444 <gpio_clr0>:
    9444:	20200028 	eorcs	r0, r0, r8, lsr #32

00009448 <gpio_set0>:
    9448:	2020001c 	eorcs	r0, r0, ip, lsl r0

0000944c <gpio_fsel0>:
    944c:	20200000 	eorcs	r0, r0, r0

00009450 <rpi_putchar>:
    9450:	000093c8 	andeq	r9, r0, r8, asr #7

Disassembly of section .rodata:

00009454 <__FUNCTION__.4184>:
    9454:	6d746f6e 	ldclvs	15, cr6, [r4, #-440]!	; 0xfffffe48
    9458:	006e6961 	rsbeq	r6, lr, r1, ror #18
    945c:	72657469 	rsbvc	r7, r5, #1761607680	; 0x69000000
    9460:	2c64253d 	cfstr64cs	mvdx2, [r4], #-244	; 0xffffff0c
    9464:	696f6720 	stmdbvs	pc!, {r5, r8, r9, sl, sp, lr}^	; <UNPREDICTABLE>
    9468:	7420676e 	strtvc	r6, [r0], #-1902	; 0x76e
    946c:	6f64206f 	svcvs	0x0064206f
    9470:	67206120 	strvs	r6, [r0, -r0, lsr #2]!
    9474:	6f207465 	svcvs	0x00207465
    9478:	20612066 	rsbcs	r2, r1, r6, rrx
    947c:	6c6f6877 	stclvs	8, cr6, [pc], #-476	; 92a8 <gpio_write+0x30>
    9480:	696c2065 	stmdbvs	ip!, {r0, r2, r5, r6, sp}^
    9484:	2820656e 	stmdacs	r0!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}
    9488:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    948c:	3d74756f 	cfldr64cc	mvdx7, [r4, #-444]!	; 0xfffffe44
    9490:	0a296425 	beq	a6252c <__bss_end__+0xa589cc>
    9494:	00000000 	andeq	r0, r0, r0
    9498:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xe65
    949c:	20612072 	rsbcs	r2, r1, r2, ror r0
    94a0:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0x96c
    94a4:	0000203a 	andeq	r2, r0, sl, lsr r0
    94a8:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    94ac:	3a74756f 	bcc	1d26a70 <__bss_end__+0x1d1cf10>
    94b0:	73657220 	cmnvc	r5, #32, 4
    94b4:	2164253d 	cmncs	r4, sp, lsr r5
    94b8:	00000a21 	andeq	r0, r0, r1, lsr #20
    94bc:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    94c0:	73253a43 	teqvc	r5, #274432	; 0x43000
    94c4:	3a73253a 	bcc	1cd29b4 <__bss_end__+0x1cc8e54>
    94c8:	733a6425 	teqvc	sl, #620756992	; 0x25000000
    94cc:	656c7274 	strbvs	r7, [ip, #-628]!	; 0x274
    94d0:	7562286e 	strbvc	r2, [r2, #-2158]!	; 0x86e
    94d4:	3d202966 	stccc	9, cr2, [r0, #-408]!	; 0xfffffe68
    94d8:	6572203d 	ldrbvs	r2, [r2, #-61]!	; 0x3d
    94dc:	00000a73 	andeq	r0, r0, r3, ror sl
    94e0:	65672d32 	strbvs	r2, [r7, #-3378]!	; 0xd32
    94e4:	752d7374 	strvc	r7, [sp, #-884]!	; 0x374
    94e8:	6c69746e 	cfstrdvs	mvd7, [r9], #-440	; 0xfffffe48
    94ec:	7365742d 	cmnvc	r5, #754974720	; 0x2d000000
    94f0:	00632e74 	rsbeq	r2, r3, r4, ror lr
    94f4:	552d5753 	strpl	r5, [sp, #-1875]!	; 0x753
    94f8:	3a545241 	bcc	151de04 <__bss_end__+0x15142a4>
    94fc:	746f6720 	strbtvc	r6, [pc], #-1824	; 9504 <__FUNCTION__.4184+0xb0>
    9500:	72747320 	rsbsvc	r7, r4, #32, 6	; 0x80000000
    9504:	20676e69 	rsbcs	r6, r7, r9, ror #28
    9508:	3e73253c 	mrccc	5, 3, r2, cr3, cr12, {1}
    950c:	0000000a 	andeq	r0, r0, sl

00009510 <__FUNCTION__.4245>:
    9510:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 8da5 <rpi_reboot+0x21>
    9514:	5f747261 	svcpl	0x00747261
    9518:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
    951c:	746e755f 	strbtvc	r7, [lr], #-1375	; 0x55f
    9520:	00006c69 	andeq	r6, r0, r9, ror #24

00009524 <__FUNCTION__.4257>:
    9524:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 8db9 <rpi_reboot+0x35>
    9528:	5f747261 	svcpl	0x00747261
    952c:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
    9530:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    9534:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
    9538:	00000000 	andeq	r0, r0, r0

0000953c <__FUNCTION__.4271>:
    953c:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 8dd1 <delay_cycles+0x5>
    9540:	5f747261 	svcpl	0x00747261
    9544:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    9548:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
    954c:	00726570 	rsbseq	r6, r2, r0, ror r5

00009550 <__FUNCTION__.4277>:
    9550:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 8de5 <delay_cycles+0x19>
    9554:	5f747261 	svcpl	0x00747261
    9558:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
    955c:	00000000 	andeq	r0, r0, r0

00009560 <__FUNCTION__.4299>:
    9560:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 8df5 <timer_get_usec_raw+0xd>
    9564:	5f747261 	svcpl	0x00747261
    9568:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    956c:	00006b74 	andeq	r6, r0, r4, ror fp

00009570 <__FUNCTION__.4307>:
    9570:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 8e05 <timer_get_usec+0x9>
    9574:	5f747261 	svcpl	0x00747261
    9578:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
    957c:	746e755f 	strbtvc	r7, [lr], #-1375	; 0x55f
    9580:	625f6c69 	subsvs	r6, pc, #26880	; 0x6900
    9584:	00006b6c 	andeq	r6, r0, ip, ror #22
    9588:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    958c:	73253a43 	teqvc	r5, #274432	; 0x43000
    9590:	3a73253a 	bcc	1cd2a80 <__bss_end__+0x1cc8f20>
    9594:	6e3a6425 	cdpvs	4, 3, cr6, cr10, cr5, {1}
    9598:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
    959c:	0a303e73 	beq	c18f70 <__bss_end__+0xc0f410>
    95a0:	00000000 	andeq	r0, r0, r0
    95a4:	752d7773 	strvc	r7, [sp, #-1907]!	; 0x773
    95a8:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    95ac:	00000063 	andeq	r0, r0, r3, rrx
    95b0:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    95b4:	73253a43 	teqvc	r5, #274432	; 0x43000
    95b8:	3a73253a 	bcc	1cd2aa8 <__bss_end__+0x1cc8f48>
    95bc:	283a6425 	ldmdacs	sl!, {r0, r2, r5, sl, sp, lr}
    95c0:	207a686d 	rsbscs	r6, sl, sp, ror #16
    95c4:	6162202d 	cmnvs	r2, sp, lsr #32
    95c8:	20296475 	eorcs	r6, r9, r5, ror r4
    95cc:	64203d3c 	strtvs	r3, [r0], #-3388	; 0xd3c
    95d0:	76697265 	strbtvc	r7, [r9], -r5, ror #4
    95d4:	26206465 	strtcs	r6, [r0], -r5, ror #8
    95d8:	65642026 	strbvs	r2, [r4, #-38]!	; 0x26
    95dc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    95e0:	3d3c2064 	ldccc	0, cr2, [ip, #-400]!	; 0xfffffe70
    95e4:	686d2820 	stmdavs	sp!, {r5, fp, sp}^
    95e8:	202b207a 	eorcs	r2, fp, sl, ror r0
    95ec:	64756162 	ldrbtvs	r6, [r5], #-354	; 0x162
    95f0:	00000a29 	andeq	r0, r0, r9, lsr #20
    95f4:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    95f8:	73253a43 	teqvc	r5, #274432	; 0x43000
    95fc:	3a73253a 	bcc	1cd2aec <__bss_end__+0x1cc8f8c>
    9600:	693a6425 	ldmdbvs	sl!, {r0, r2, r5, sl, sp, lr}
    9604:	736f706d 	cmnvc	pc, #109	; 0x6d
    9608:	6c626973 	stclvs	9, cr6, [r2], #-460	; 0xfffffe34
    960c:	68203a65 	stmdavs	r0!, {r0, r2, r5, r6, r9, fp, ip, sp}
    9610:	20657661 	rsbcs	r7, r5, r1, ror #12
    9614:	69206e61 	stmdbvs	r0!, {r0, r5, r6, r9, sl, fp, sp, lr}
    9618:	6e69666e 	cdpvs	6, 6, cr6, cr9, cr14, {3}
    961c:	20657469 	rsbcs	r7, r5, r9, ror #8
    9620:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    9624:	2174756f 	cmncs	r4, pc, ror #10
    9628:	00000a0a 	andeq	r0, r0, sl, lsl #20
    962c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9630:	73253a43 	teqvc	r5, #274432	; 0x43000
    9634:	3a73253a 	bcc	1cd2b24 <__bss_end__+0x1cc8fc4>
    9638:	733a6425 	teqvc	sl, #620756992	; 0x25000000
    963c:	203c207a 	eorscs	r2, ip, sl, ror r0
    9640:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
    9644:	6220666f 	eorvs	r6, r0, #116391936	; 0x6f00000
    9648:	312d6675 	teqcc	sp, r5, ror r6
    964c:	0000000a 	andeq	r0, r0, sl

00009650 <__FUNCTION__.4197>:
    9650:	74696d65 	strbtvc	r6, [r9], #-3429	; 0xd65
    9654:	00000000 	andeq	r0, r0, r0

00009658 <__FUNCTION__.4145>:
    9658:	5f697072 	svcpl	0x00697072
    965c:	5f746573 	svcpl	0x00746573
    9660:	7074756f 	rsbsvc	r7, r4, pc, ror #10
    9664:	00007475 	andeq	r7, r0, r5, ror r4

00009668 <__FUNCTION__.4219>:
    9668:	705f6176 	subsvc	r6, pc, r6, ror r1	; <UNPREDICTABLE>
    966c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    9670:	0000006b 	andeq	r0, r0, fp, rrx
    9674:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9678:	73253a43 	teqvc	r5, #274432	; 0x43000
    967c:	3a73253a 	bcc	1cd2b6c <__bss_end__+0x1cc900c>
    9680:	303a6425 	eorscc	r6, sl, r5, lsr #8
    9684:	0000000a 	andeq	r0, r0, sl
    9688:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    968c:	2d61762f 	stclcs	6, cr7, [r1, #-188]!	; 0xffffff44
    9690:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    9694:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
    9698:	00000000 	andeq	r0, r0, r0
    969c:	33323130 	teqcc	r2, #48, 2
    96a0:	37363534 			; <UNDEFINED> instruction: 0x37363534
    96a4:	00003938 	andeq	r3, r0, r8, lsr r9
    96a8:	33323130 	teqcc	r2, #48, 2
    96ac:	37363534 			; <UNDEFINED> instruction: 0x37363534
    96b0:	62613938 	rsbvs	r3, r1, #56, 18	; 0xe0000
    96b4:	66656463 	strbtvs	r6, [r5], -r3, ror #8
    96b8:	00000000 	andeq	r0, r0, r0
    96bc:	00003130 	andeq	r3, r0, r0, lsr r1
    96c0:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    96c4:	73253a43 	teqvc	r5, #274432	; 0x43000
    96c8:	3a73253a 	bcc	1cd2bb8 <__bss_end__+0x1cc9058>
    96cc:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    96d0:	5f637475 	svcpl	0x00637475
    96d4:	000a7066 	andeq	r7, sl, r6, rrx
    96d8:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    96dc:	73253a43 	teqvc	r5, #274432	; 0x43000
    96e0:	3a73253a 	bcc	1cd2bd0 <__bss_end__+0x1cc9070>
    96e4:	773a6425 	ldrvc	r6, [sl, -r5, lsr #8]!
    96e8:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
    96ec:	33203c20 	teqcc	r0, #32, 24	; 0x2000
    96f0:	00000a32 	andeq	r0, r0, r2, lsr sl
    96f4:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    96f8:	73253a43 	teqvc	r5, #274432	; 0x43000
    96fc:	3a73253a 	bcc	1cd2bec <__bss_end__+0x1cc908c>
    9700:	663a6425 	ldrtvs	r6, [sl], -r5, lsr #8
    9704:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xf6c
    9708:	746f6e20 	strbtvc	r6, [pc], #-3616	; 9710 <__FUNCTION__.4219+0xa8>
    970c:	616e6520 	cmnvs	lr, r0, lsr #10
    9710:	64656c62 	strbtvs	r6, [r5], #-3170	; 0xc62
    9714:	0a212121 	beq	851ba0 <__bss_end__+0x848040>
    9718:	00000000 	andeq	r0, r0, r0
    971c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9720:	73253a43 	teqvc	r5, #274432	; 0x43000
    9724:	3a73253a 	bcc	1cd2c14 <__bss_end__+0x1cc90b4>
    9728:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    972c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    9730:	6e203a6b 	vnmulvs.f32	s6, s0, s23
    9734:	6820746f 	stmdavs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
    9738:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    973c:	20676e69 	rsbcs	r6, r7, r9, ror #28
    9740:	63657073 	cmnvs	r5, #115	; 0x73
    9744:	65696669 	strbvs	r6, [r9, #-1641]!	; 0x669
    9748:	25272072 	strcs	r2, [r7, #-114]!	; 0x72
    974c:	0a0a2763 	beq	2934e0 <__bss_end__+0x289980>
    9750:	00000000 	andeq	r0, r0, r0
    9754:	454e4f44 	strbmi	r4, [lr, #-3908]	; 0xf44
    9758:	0a212121 	beq	851be4 <__bss_end__+0x848084>
    975c:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss:

00009760 <__bss_start__>:
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4b5a3605 	blmi	168d82c <__bss_end__+0x1683ccc>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	12010901 	andne	r0, r1, #16384	; 0x4000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0x404
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	22011a01 	andcs	r1, r1, #4096	; 0x1000
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__bss_end__+0x10c71c4>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	34202955 	strtcc	r2, [r0], #-2389	; 0x955
   c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000366 	andeq	r0, r0, r6, ror #6
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000029 	andeq	r0, r0, r9, lsr #32
      10:	00013401 	andeq	r3, r1, r1, lsl #8
      14:	00016f00 	andeq	r6, r1, r0, lsl #30
      18:	00801000 	addeq	r1, r0, r0
      1c:	00013000 	andeq	r3, r1, r0
      20:	00000000 	andeq	r0, r0, r0
      24:	05040200 	streq	r0, [r4, #-512]	; 0x200
      28:	00746e69 	rsbseq	r6, r4, r9, ror #28
      2c:	00000e03 	andeq	r0, r0, r3, lsl #28
      30:	37d40200 	ldrbcc	r0, [r4, r0, lsl #4]
      34:	04000000 	streq	r0, [r0], #-0
      38:	01030704 	tsteq	r3, r4, lsl #14
      3c:	01040000 	mrseq	r0, (UNDEF: 4)
      40:	0000b606 	andeq	fp, r0, r6, lsl #12
      44:	05020400 	streq	r0, [r2, #-1024]	; 0x400
      48:	00000148 	andeq	r0, r0, r8, asr #2
      4c:	2b050404 	blcs	141064 <__bss_end__+0x137504>
      50:	04000001 	streq	r0, [r0], #-1
      54:	01260508 	teqeq	r6, r8, lsl #10
      58:	10030000 	andne	r0, r3, r0
      5c:	03000001 	movweq	r0, #1
      60:	0000652e 	andeq	r6, r0, lr, lsr #10
      64:	08010400 	stmdaeq	r1, {sl}
      68:	000000b4 	strheq	r0, [r0], -r4
      6c:	cf070204 	svcgt	0x00070204
      70:	03000000 	movweq	r0, #0
      74:	0000015f 	andeq	r0, r0, pc, asr r1
      78:	007e3403 	rsbseq	r3, lr, r3, lsl #8
      7c:	04040000 	streq	r0, [r4], #-0
      80:	0000fe07 	andeq	pc, r0, r7, lsl #28
      84:	07080400 	streq	r0, [r8, -r0, lsl #8]
      88:	000000f9 	strdeq	r0, [r0], -r9
      8c:	1d070404 	cfstrsne	mvf0, [r7, #-16]
      90:	04000001 	streq	r0, [r0], #-1
      94:	00bd0801 	adcseq	r0, sp, r1, lsl #16
      98:	04050000 	streq	r0, [r5], #-0
      9c:	000000a0 	andeq	r0, r0, r0, lsr #1
      a0:	00009306 	andeq	r9, r0, r6, lsl #6
      a4:	00930700 	addseq	r0, r3, r0, lsl #14
      a8:	00b50000 	adcseq	r0, r5, r0
      ac:	8c080000 	stchi	0, cr0, [r8], {-0}
      b0:	07000000 	streq	r0, [r0, -r0]
      b4:	040c0900 	streq	r0, [ip], #-2304	; 0x900
      b8:	0000ec0e 	andeq	lr, r0, lr, lsl #24
      bc:	78740a00 	ldmdavc	r4!, {r9, fp}^
      c0:	5a0f0400 	bpl	3c10c8 <__bss_end__+0x3b7568>
      c4:	00000000 	andeq	r0, r0, r0
      c8:	0078720a 	rsbseq	r7, r8, sl, lsl #4
      cc:	005a0f04 	subseq	r0, sl, r4, lsl #30
      d0:	0b010000 	bleq	400d8 <__bss_end__+0x36578>
      d4:	00000118 	andeq	r0, r0, r8, lsl r1
      d8:	00731004 	rsbseq	r1, r3, r4
      dc:	0b040000 	bleq	1000e4 <__bss_end__+0xf6584>
      e0:	00000000 	andeq	r0, r0, r0
      e4:	00731104 	rsbseq	r1, r3, r4, lsl #2
      e8:	00080000 	andeq	r0, r8, r0
      ec:	0000e203 	andeq	lr, r0, r3, lsl #4
      f0:	b5120400 	ldrlt	r0, [r2, #-1024]	; 0x400
      f4:	0c000000 	stceq	0, cr0, [r0], {-0}
      f8:	00000080 	andeq	r0, r0, r0, lsl #1
      fc:	80100501 	andshi	r0, r0, r1, lsl #10
     100:	01300000 	teqeq	r0, r0
     104:	9c010000 	stcls	0, cr0, [r1], {-0}
     108:	000002a3 	andeq	r0, r0, r3, lsr #5
     10c:	0100750d 	tsteq	r0, sp, lsl #10
     110:	0000ec0a 	andeq	lr, r0, sl, lsl #24
     114:	4c910200 	lfmmi	f0, 4, [r1], {0}
     118:	0000ec0e 	andeq	lr, r0, lr, lsl #24
     11c:	0002a300 	andeq	sl, r2, r0, lsl #6
     120:	54030500 	strpl	r0, [r3], #-1280	; 0x500
     124:	0f000094 	svceq	0x00000094
     128:	00008044 	andeq	r8, r0, r4, asr #32
     12c:	000000cc 	andeq	r0, r0, ip, asr #1
     130:	00000259 	andeq	r0, r0, r9, asr r2
     134:	01006910 	tsteq	r0, r0, lsl r9
     138:	0000250c 	andeq	r2, r0, ip, lsl #10
     13c:	00000000 	andeq	r0, r0, r0
     140:	00001100 	andeq	r1, r0, r0, lsl #2
     144:	d4120000 	ldrle	r0, [r2], #-0
     148:	01000002 	tsteq	r0, r2
     14c:	0000370d 	andeq	r3, r0, sp, lsl #14
     150:	00001f00 	andeq	r1, r0, r0, lsl #30
     154:	75620d00 	strbvc	r0, [r2, #-3328]!	; 0xd00
     158:	12010066 	andne	r0, r1, #102	; 0x66
     15c:	000002a8 	andeq	r0, r0, r8, lsr #5
     160:	77cc9103 	strbvc	r9, [ip, r3, lsl #2]
     164:	73657210 	cmnvc	r5, #16, 4
     168:	25130100 	ldrcs	r0, [r3, #-256]	; 0x100
     16c:	33000000 	movwcc	r0, #0
     170:	13000000 	movwne	r0, #0
     174:	00008074 	andeq	r8, r0, r4, ror r0
     178:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
     17c:	00000192 	muleq	r0, r2, r1
     180:	01520114 	cmpeq	r2, r4, lsl r1
     184:	51011435 	tstpl	r1, r5, lsr r4
     188:	14007402 	strne	r7, [r0], #-1026	; 0x402
     18c:	78025001 	stmdavc	r2, {r0, ip, lr}
     190:	84130000 	ldrhi	r0, [r3], #-0
     194:	cf000080 	svcgt	0x00000080
     198:	ac000002 	stcge	0, cr0, [r0], {2}
     19c:	14000001 	strne	r0, [r0], #-1
     1a0:	77025101 	strvc	r5, [r2, -r1, lsl #2]
     1a4:	50011400 	andpl	r1, r1, r0, lsl #8
     1a8:	00449102 	subeq	r9, r4, r2, lsl #2
     1ac:	0080a013 	addeq	sl, r0, r3, lsl r0
     1b0:	0002f000 	andeq	pc, r2, r0
     1b4:	0001da00 	andeq	sp, r1, r0, lsl #20
     1b8:	53011400 	movwpl	r1, #5120	; 0x1400
     1bc:	01143a01 	tsteq	r4, r1, lsl #20
     1c0:	000a0352 	andeq	r0, sl, r2, asr r3
     1c4:	51011404 	tstpl	r1, r4, lsl #8
     1c8:	77c49103 	strbvc	r9, [r4, r3, lsl #2]
     1cc:	02500114 	subseq	r0, r0, #20, 2
     1d0:	02144491 	andseq	r4, r4, #-1862270976	; 0x91000000
     1d4:	7602007d 			; <UNDEFINED> instruction: 0x7602007d
     1d8:	b4130000 	ldrlt	r0, [r3], #-0
     1dc:	b9000080 	stmdblt	r0, {r7}
     1e0:	f4000002 	vst4.8	{d0-d3}, [r0], r2
     1e4:	14000001 	strne	r0, [r0], #-1
     1e8:	75025101 	strvc	r5, [r2, #-257]	; 0x101
     1ec:	50011400 	andpl	r1, r1, r0, lsl #8
     1f0:	00007b02 	andeq	r7, r0, r2, lsl #22
     1f4:	0080c013 	addeq	ip, r0, r3, lsl r0
     1f8:	00031f00 	andeq	r1, r3, r0, lsl #30
     1fc:	00020900 	andeq	r0, r2, r0, lsl #18
     200:	50011400 	andpl	r1, r1, r0, lsl #8
     204:	77c49103 	strbvc	r9, [r4, r3, lsl #2]
     208:	80dc1300 	sbcshi	r1, ip, r0, lsl #6
     20c:	02b90000 	adcseq	r0, r9, #0
     210:	02370000 	eorseq	r0, r7, #0
     214:	01140000 	tsteq	r4, r0
     218:	14480153 	strbne	r0, [r8], #-339	; 0x153
     21c:	03055201 	movweq	r5, #20993	; 0x5201
     220:	00009454 	andeq	r9, r0, r4, asr r4
     224:	05510114 	ldrbeq	r0, [r1, #-276]	; 0x114
     228:	0094e003 	addseq	lr, r4, r3
     22c:	50011400 	andpl	r1, r1, r0, lsl #8
     230:	94bc0305 	ldrtls	r0, [ip], #773	; 0x305
     234:	15000000 	strne	r0, [r0, #-0]
     238:	000080e0 	andeq	r8, r0, r0, ror #1
     23c:	00000334 	andeq	r0, r0, r4, lsr r3
     240:	00810416 	addeq	r0, r1, r6, lsl r4
     244:	0002b900 	andeq	fp, r2, r0, lsl #18
     248:	51011400 	tstpl	r1, r0, lsl #8
     24c:	77c49103 	strbvc	r9, [r4, r3, lsl #2]
     250:	02500114 	subseq	r0, r0, #20, 2
     254:	00000079 	andeq	r0, r0, r9, ror r0
     258:	80201500 	eorhi	r1, r0, r0, lsl #10
     25c:	033b0000 	teqeq	fp, #0
     260:	24150000 	ldrcs	r0, [r5], #-0
     264:	42000080 	andmi	r0, r0, #128	; 0x80
     268:	13000003 	movwne	r0, #3
     26c:	00008044 	andeq	r8, r0, r4, asr #32
     270:	00000349 	andeq	r0, r0, r9, asr #6
     274:	00000299 	muleq	r0, r9, r2
     278:	04530114 	ldrbeq	r0, [r3], #-276	; 0x114
     27c:	2439e108 	ldrtcs	lr, [r9], #-264	; 0x108
     280:	01520114 	cmpeq	r2, r4, lsl r1
     284:	51011445 	tstpl	r1, r5, asr #8
     288:	01144401 	tsteq	r4, r1, lsl #8
     28c:	44910250 	ldrmi	r0, [r1], #592	; 0x250
     290:	007d0214 	rsbseq	r0, sp, r4, lsl r2
     294:	17bc0a03 	ldrne	r0, [ip, r3, lsl #20]!
     298:	81141500 	tsthi	r4, r0, lsl #10
     29c:	03340000 	teqeq	r4, #0
     2a0:	06000000 	streq	r0, [r0], -r0
     2a4:	000000a5 	andeq	r0, r0, r5, lsr #1
     2a8:	00009307 	andeq	r9, r0, r7, lsl #6
     2ac:	0002b900 	andeq	fp, r2, r0, lsl #18
     2b0:	008c1700 	addeq	r1, ip, r0, lsl #14
     2b4:	03ff0000 	mvnseq	r0, #0
     2b8:	025e1800 	subseq	r1, lr, #0, 16
     2bc:	27050000 	strcs	r0, [r5, -r0]
     2c0:	00000025 	andeq	r0, r0, r5, lsr #32
     2c4:	000002cf 	andeq	r0, r0, pc, asr #5
     2c8:	00009a19 	andeq	r9, r0, r9, lsl sl
     2cc:	18001a00 	stmdane	r0, {r9, fp, ip}
     2d0:	00000092 	muleq	r0, r2, r0
     2d4:	00251504 	eoreq	r1, r5, r4, lsl #10
     2d8:	02ea0000 	rsceq	r0, sl, #0
     2dc:	ea190000 	b	6402e4 <__bss_end__+0x636784>
     2e0:	19000002 	stmdbne	r0, {r1}
     2e4:	0000009a 	muleq	r0, sl, r0
     2e8:	0405001a 	streq	r0, [r5], #-26
     2ec:	000000ec 	andeq	r0, r0, ip, ror #1
     2f0:	0000a118 	andeq	sl, r0, r8, lsl r1
     2f4:	25360400 	ldrcs	r0, [r6, #-1024]!	; 0x400
     2f8:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     2fc:	19000003 	stmdbne	r0, {r0, r1}
     300:	000002ea 	andeq	r0, r0, sl, ror #5
     304:	00031919 	andeq	r1, r3, r9, lsl r9
     308:	00731900 	rsbseq	r1, r3, r0, lsl #18
     30c:	5a190000 	bpl	640314 <__bss_end__+0x6367b4>
     310:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     314:	00000073 	andeq	r0, r0, r3, ror r0
     318:	5a040500 	bpl	101720 <__bss_end__+0xf7bc0>
     31c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     320:	00000168 	andeq	r0, r0, r8, ror #2
     324:	002c2306 	eoreq	r2, ip, r6, lsl #6
     328:	03340000 	teqeq	r4, #0
     32c:	9a190000 	bls	640334 <__bss_end__+0x6367d4>
     330:	00000000 	andeq	r0, r0, r0
     334:	0000c21b 	andeq	ip, r0, fp, lsl r2
     338:	1b630500 	blne	18c1740 <__bss_end__+0x18b7be0>
     33c:	00000088 	andeq	r0, r0, r8, lsl #1
     340:	521b3805 	andspl	r3, fp, #327680	; 0x50000
     344:	05000001 	streq	r0, [r0, #-1]
     348:	00151c88 	andseq	r1, r5, r8, lsl #25
     34c:	1d040000 	stcne	0, cr0, [r4, #-0]
     350:	000000ec 	andeq	r0, r0, ip, ror #1
     354:	00005a19 	andeq	r5, r0, r9, lsl sl
     358:	005a1900 	subseq	r1, sl, r0, lsl #18
     35c:	73190000 	tstvc	r9, #0
     360:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     364:	00000073 	andeq	r0, r0, r3, ror r0
     368:	11a70000 			; <UNDEFINED> instruction: 0x11a70000
     36c:	00040000 	andeq	r0, r4, r0
     370:	00000167 	andeq	r0, r0, r7, ror #2
     374:	00290104 	eoreq	r0, r9, r4, lsl #2
     378:	6f010000 	svcvs	0x00010000
     37c:	6f000002 	svcvs	0x00000002
     380:	40000001 	andmi	r0, r0, r1
     384:	00000081 	andeq	r0, r0, r1, lsl #1
     388:	7d000006 	stcvc	0, cr0, [r0, #-24]	; 0xffffffe8
     38c:	02000001 	andeq	r0, r0, #1
     390:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     394:	04030074 	streq	r0, [r3], #-116	; 0x74
     398:	00010307 	andeq	r0, r1, r7, lsl #6
     39c:	06010300 	streq	r0, [r1], -r0, lsl #6
     3a0:	000000b6 	strheq	r0, [r0], -r6
     3a4:	48050203 	stmdami	r5, {r0, r1, r9}
     3a8:	03000001 	movweq	r0, #1
     3ac:	012b0504 	teqeq	fp, r4, lsl #10
     3b0:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     3b4:	00012605 	andeq	r2, r1, r5, lsl #12
     3b8:	01100400 	tsteq	r0, r0, lsl #8
     3bc:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
     3c0:	0000005a 	andeq	r0, r0, sl, asr r0
     3c4:	b4080103 	strlt	r0, [r8], #-259	; 0x103
     3c8:	03000000 	movweq	r0, #0
     3cc:	00cf0702 	sbceq	r0, pc, r2, lsl #14
     3d0:	5f040000 	svcpl	0x00040000
     3d4:	03000001 	movweq	r0, #1
     3d8:	00007334 	andeq	r7, r0, r4, lsr r3
     3dc:	07040300 	streq	r0, [r4, -r0, lsl #6]
     3e0:	000000fe 	strdeq	r0, [r0], -lr
     3e4:	f9070803 			; <UNDEFINED> instruction: 0xf9070803
     3e8:	03000000 	movweq	r0, #0
     3ec:	011d0704 	tsteq	sp, r4, lsl #14
     3f0:	04050000 	streq	r0, [r5], #-0
     3f4:	00900406 	addseq	r0, r0, r6, lsl #8
     3f8:	01030000 	mrseq	r0, (UNDEF: 3)
     3fc:	0000bd08 	andeq	fp, r0, r8, lsl #26
     400:	9d040600 	stcls	6, cr0, [r4, #-0]
     404:	07000000 	streq	r0, [r0, -r0]
     408:	00000090 	muleq	r0, r0, r0
     40c:	0e040c08 	cdpeq	12, 0, cr0, cr4, cr8, {0}
     410:	000000d9 	ldrdeq	r0, [r0], -r9
     414:	00787409 	rsbseq	r7, r8, r9, lsl #8
     418:	004f0f04 	subeq	r0, pc, r4, lsl #30
     41c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     420:	04007872 	streq	r7, [r0], #-2162	; 0x872
     424:	00004f0f 	andeq	r4, r0, pc, lsl #30
     428:	180a0100 	stmdane	sl, {r8}
     42c:	04000001 	streq	r0, [r0], #-1
     430:	00006810 	andeq	r6, r0, r0, lsl r8
     434:	000a0400 	andeq	r0, sl, r0, lsl #8
     438:	04000000 	streq	r0, [r0], #-0
     43c:	00006811 	andeq	r6, r0, r1, lsl r8
     440:	04000800 	streq	r0, [r0], #-2048	; 0x800
     444:	000000e2 	andeq	r0, r0, r2, ror #1
     448:	00a21204 	adceq	r1, r2, r4, lsl #4
     44c:	81040000 	mrshi	r0, (UNDEF: 4)
     450:	05000002 	streq	r0, [r0, #-2]
     454:	0000ef28 	andeq	lr, r0, r8, lsr #30
     458:	02070b00 	andeq	r0, r7, #0, 22
     45c:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
     460:	00010600 	andeq	r0, r1, r0, lsl #12
     464:	03020c00 	movweq	r0, #11264	; 0x2c00
     468:	00880000 	addeq	r0, r8, r0
     46c:	00000000 	andeq	r0, r0, r0
     470:	00020904 	andeq	r0, r2, r4, lsl #18
     474:	e4620500 	strbt	r0, [r2], #-1280	; 0x500
     478:	0d000000 	stceq	0, cr0, [r0, #-0]
     47c:	00000226 	andeq	r0, r0, r6, lsr #4
     480:	3f030902 	svccc	0x00030902
     484:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     488:	00000498 	muleq	r0, r8, r4
     48c:	002c0902 	eoreq	r0, ip, r2, lsl #18
     490:	6e0f0000 	cdpvs	0, 0, cr0, cr15, cr0, {0}
     494:	2c090200 	sfmcs	f0, 4, [r9], {-0}
     498:	10000000 	andne	r0, r0, r0
     49c:	0002a511 	andeq	sl, r2, r1, lsl r5
     4a0:	2c0c0200 	sfmcs	f0, 4, [ip], {-0}
     4a4:	00000000 	andeq	r0, r0, r0
     4a8:	01e20d00 	mvneq	r0, r0, lsl #26
     4ac:	17020000 	strne	r0, [r2, -r0]
     4b0:	00017603 	andeq	r7, r1, r3, lsl #12
     4b4:	69700f00 	ldmdbvs	r0!, {r8, r9, sl, fp}^
     4b8:	1702006e 	strne	r0, [r2, -lr, rrx]
     4bc:	0000002c 	andeq	r0, r0, ip, lsr #32
     4c0:	0200760f 	andeq	r7, r0, #15728640	; 0xf00000
     4c4:	00002c17 	andeq	r2, r0, r7, lsl ip
     4c8:	04980e00 	ldreq	r0, [r8], #3584	; 0xe00
     4cc:	17020000 	strne	r0, [r2, -r0]
     4d0:	0000002c 	andeq	r0, r0, ip, lsr #32
     4d4:	00022c0e 	andeq	r2, r2, lr, lsl #24
     4d8:	2c170200 	lfmcs	f0, 4, [r7], {-0}
     4dc:	00000000 	andeq	r0, r0, r0
     4e0:	00024112 	andeq	r4, r2, r2, lsl r1
     4e4:	40090100 	andmi	r0, r9, r0, lsl #2
     4e8:	58000081 	stmdapl	r0, {r0, r7}
     4ec:	01000001 	tsteq	r0, r1
     4f0:	0007559c 	muleq	r7, ip, r5
     4f4:	01d11300 	bicseq	r1, r1, r0, lsl #6
     4f8:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
     4fc:	00000755 	andeq	r0, r0, r5, asr r7
     500:	00000074 	andeq	r0, r0, r4, ror r0
     504:	01006314 	tsteq	r0, r4, lsl r3
     508:	00005a09 	andeq	r5, r0, r9, lsl #20
     50c:	00009500 	andeq	r9, r0, r0, lsl #10
     510:	78741500 	ldmdavc	r4!, {r8, sl, ip}^
     514:	250b0100 	strcs	r0, [fp, #-256]	; 0x100
     518:	06000000 	streq	r0, [r0], -r0
     51c:	ff080076 			; <UNDEFINED> instruction: 0xff080076
     520:	6e169f1a 	mrcvs	15, 0, r9, cr6, cr10, {0}
     524:	680c0100 	stmdavs	ip, {r8}
     528:	b6000000 	strlt	r0, [r0], -r0
     52c:	16000000 	strne	r0, [r0], -r0
     530:	0d010075 	stceq	0, cr0, [r1, #-468]	; 0xfffffe2c
     534:	00000068 	andeq	r0, r0, r8, rrx
     538:	000000b6 	strheq	r0, [r0], -r6
     53c:	01007317 	tsteq	r0, r7, lsl r3
     540:	0000680e 	andeq	r6, r0, lr, lsl #16
     544:	6e651600 	cdpvs	6, 6, cr1, cr5, cr0, {0}
     548:	11010064 	tstne	r1, r4, rrx
     54c:	0000002c 	andeq	r0, r0, ip, lsr #32
     550:	000000c9 	andeq	r0, r0, r9, asr #1
     554:	00049818 	andeq	r9, r4, r8, lsl r8
     558:	2c120100 	ldfcss	f0, [r2], {-0}
     55c:	01000000 	mrseq	r0, (UNDEF: 0)
     560:	81501954 	cmphi	r0, r4, asr r9
     564:	00040000 	andeq	r0, r4, r0
     568:	02100000 	andseq	r0, r0, #0
     56c:	a5110000 	ldrge	r0, [r1, #-0]
     570:	01000002 	tsteq	r0, r2
     574:	00002c0e 	andeq	r2, r0, lr, lsl #24
     578:	54190000 	ldrpl	r0, [r9], #-0
     57c:	04000081 	streq	r0, [r0], #-129	; 0x81
     580:	2b000000 	blcs	588 <_start-0x7a78>
     584:	18000002 	stmdane	r0, {r1}
     588:	000002a5 	andeq	r0, r0, r5, lsr #5
     58c:	002c1201 	eoreq	r1, ip, r1, lsl #4
     590:	54010000 	strpl	r0, [r1], #-0
     594:	013f1a00 	teqeq	pc, r0, lsl #20
     598:	81580000 	cmphi	r8, r0
     59c:	001c0000 	andseq	r0, ip, r0
     5a0:	15010000 	strne	r0, [r1, #-0]
     5a4:	000002a8 	andeq	r0, r0, r8, lsr #5
     5a8:	00016a1b 	andeq	r6, r1, fp, lsl sl
     5ac:	0000f200 	andeq	pc, r0, r0, lsl #4
     5b0:	015f1c00 	cmpeq	pc, r0, lsl #24
     5b4:	54010000 	strpl	r0, [r1], #-0
     5b8:	0001561d 	andeq	r5, r1, sp, lsl r6
     5bc:	4b1c0000 	blmi	7005c4 <__bss_end__+0x6f6a64>
     5c0:	01000001 	tsteq	r0, r1
     5c4:	01111a56 	tsteq	r1, r6, asr sl
     5c8:	81640000 	cmnhi	r4, r0
     5cc:	00100000 	andseq	r0, r0, r0
     5d0:	1a020000 	bne	805d8 <__bss_end__+0x76a78>
     5d4:	00000292 	muleq	r0, r2, r2
     5d8:	0001281b 	andeq	r2, r1, fp, lsl r8
     5dc:	00010500 	andeq	r0, r1, r0, lsl #10
     5e0:	011d1c00 	tsteq	sp, r0, lsl #24
     5e4:	54010000 	strpl	r0, [r1], #-0
     5e8:	0081641e 	addeq	r6, r1, lr, lsl r4
     5ec:	00000400 	andeq	r0, r0, r0, lsl #8
     5f0:	01321f00 	teqeq	r2, r0, lsl #30
     5f4:	01180000 	tsteq	r8, r0
     5f8:	00000000 	andeq	r0, r0, r0
     5fc:	00816420 	addeq	r6, r1, r0, lsr #8
     600:	00111500 	andseq	r1, r1, r0, lsl #10
     604:	51012100 	mrspl	r2, (UNDEF: 17)
     608:	01213001 	teqeq	r1, r1
     60c:	00760250 	rsbseq	r0, r6, r0, asr r2
     610:	3f1a0000 	svccc	0x001a0000
     614:	78000001 	stmdavc	r0, {r0}
     618:	1c000081 	stcne	0, cr0, [r0], {129}	; 0x81
     61c:	01000000 	mrseq	r0, (UNDEF: 0)
     620:	00032b17 	andeq	r2, r3, r7, lsl fp
     624:	016a1b00 	cmneq	sl, r0, lsl #22
     628:	012b0000 	teqeq	fp, r0
     62c:	5f1c0000 	svcpl	0x001c0000
     630:	01000001 	tsteq	r0, r1
     634:	01561b54 	cmpeq	r6, r4, asr fp
     638:	014d0000 	mrseq	r0, (UNDEF: 77)
     63c:	4b1c0000 	blmi	700644 <__bss_end__+0x6f6ae4>
     640:	01000001 	tsteq	r0, r1
     644:	01111a56 	tsteq	r1, r6, asr sl
     648:	81840000 	orrhi	r0, r4, r0
     64c:	00100000 	andseq	r0, r0, r0
     650:	1a020000 	bne	80658 <__bss_end__+0x76af8>
     654:	00000312 	andeq	r0, r0, r2, lsl r3
     658:	0001281b 	andeq	r2, r1, fp, lsl r8
     65c:	00017e00 	andeq	r7, r1, r0, lsl #28
     660:	011d1c00 	tsteq	sp, r0, lsl #24
     664:	54010000 	strpl	r0, [r1], #-0
     668:	0081841e 	addeq	r8, r1, lr, lsl r4
     66c:	00000400 	andeq	r0, r0, r0, lsl #8
     670:	01321f00 	teqeq	r2, r0, lsl #30
     674:	01a00000 	moveq	r0, r0
     678:	00000000 	andeq	r0, r0, r0
     67c:	00818420 	addeq	r8, r1, r0, lsr #8
     680:	00111500 	andseq	r1, r1, r0, lsl #10
     684:	51012100 	mrspl	r2, (UNDEF: 17)
     688:	31007704 	tstcc	r0, r4, lsl #14
     68c:	5001211a 	andpl	r2, r1, sl, lsl r1
     690:	00007602 	andeq	r7, r0, r2, lsl #12
     694:	013f1a00 	teqeq	pc, r0, lsl #20
     698:	81980000 	orrshi	r0, r8, r0
     69c:	001c0000 	andseq	r0, ip, r0
     6a0:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
     6a4:	000003b3 			; <UNDEFINED> instruction: 0x000003b3
     6a8:	00016a1b 	andeq	r6, r1, fp, lsl sl
     6ac:	0001b300 	andeq	fp, r1, r0, lsl #6
     6b0:	015f1c00 	cmpeq	pc, r0, lsl #24
     6b4:	54010000 	strpl	r0, [r1], #-0
     6b8:	0001561c 	andeq	r5, r1, ip, lsl r6
     6bc:	00770800 	rsbseq	r0, r7, r0, lsl #16
     6c0:	ff081a32 			; <UNDEFINED> instruction: 0xff081a32
     6c4:	4b1c9f1a 	blmi	728334 <__bss_end__+0x71e7d4>
     6c8:	01000001 	tsteq	r0, r1
     6cc:	01111a56 	tsteq	r1, r6, asr sl
     6d0:	81a40000 			; <UNDEFINED> instruction: 0x81a40000
     6d4:	00100000 	andseq	r0, r0, r0
     6d8:	1a020000 	bne	806e0 <__bss_end__+0x76b80>
     6dc:	0000039a 	muleq	r0, sl, r3
     6e0:	0001281b 	andeq	r2, r1, fp, lsl r8
     6e4:	0001d800 	andeq	sp, r1, r0, lsl #16
     6e8:	011d1c00 	tsteq	sp, r0, lsl #24
     6ec:	54010000 	strpl	r0, [r1], #-0
     6f0:	0081a41e 	addeq	sl, r1, lr, lsl r4
     6f4:	00000400 	andeq	r0, r0, r0, lsl #8
     6f8:	01321f00 	teqeq	r2, r0, lsl #30
     6fc:	01fd0000 	mvnseq	r0, r0
     700:	00000000 	andeq	r0, r0, r0
     704:	0081a420 	addeq	sl, r1, r0, lsr #8
     708:	00111500 	andseq	r1, r1, r0, lsl #10
     70c:	51012100 	mrspl	r2, (UNDEF: 17)
     710:	32007704 	andcc	r7, r0, #4, 14	; 0x100000
     714:	5001211a 	andpl	r2, r1, sl, lsl r1
     718:	00007602 	andeq	r7, r0, r2, lsl #12
     71c:	013f1a00 	teqeq	pc, r0, lsl #20
     720:	81b80000 			; <UNDEFINED> instruction: 0x81b80000
     724:	001c0000 	andseq	r0, ip, r0
     728:	1b010000 	blne	40730 <__bss_end__+0x36bd0>
     72c:	0000043b 	andeq	r0, r0, fp, lsr r4
     730:	00016a1b 	andeq	r6, r1, fp, lsl sl
     734:	00021000 	andeq	r1, r2, r0
     738:	015f1c00 	cmpeq	pc, r0, lsl #24
     73c:	54010000 	strpl	r0, [r1], #-0
     740:	0001561c 	andeq	r5, r1, ip, lsl r6
     744:	00770800 	rsbseq	r0, r7, r0, lsl #16
     748:	ff081a34 			; <UNDEFINED> instruction: 0xff081a34
     74c:	4b1c9f1a 	blmi	7283bc <__bss_end__+0x71e85c>
     750:	01000001 	tsteq	r0, r1
     754:	01111a56 	tsteq	r1, r6, asr sl
     758:	81c40000 	bichi	r0, r4, r0
     75c:	00100000 	andseq	r0, r0, r0
     760:	1a020000 	bne	80768 <__bss_end__+0x76c08>
     764:	00000422 	andeq	r0, r0, r2, lsr #8
     768:	0001281b 	andeq	r2, r1, fp, lsl r8
     76c:	00023200 	andeq	r3, r2, r0, lsl #4
     770:	011d1c00 	tsteq	sp, r0, lsl #24
     774:	54010000 	strpl	r0, [r1], #-0
     778:	0081c41e 	addeq	ip, r1, lr, lsl r4
     77c:	00000400 	andeq	r0, r0, r0, lsl #8
     780:	01321f00 	teqeq	r2, r0, lsl #30
     784:	02540000 	subseq	r0, r4, #0
     788:	00000000 	andeq	r0, r0, r0
     78c:	0081c420 	addeq	ip, r1, r0, lsr #8
     790:	00111500 	andseq	r1, r1, r0, lsl #10
     794:	51012100 	mrspl	r2, (UNDEF: 17)
     798:	34007704 	strcc	r7, [r0], #-1796	; 0x704
     79c:	5001211a 	andpl	r2, r1, sl, lsl r1
     7a0:	00007602 	andeq	r7, r0, r2, lsl #12
     7a4:	013f1a00 	teqeq	pc, r0, lsl #20
     7a8:	81d80000 	bicshi	r0, r8, r0
     7ac:	001c0000 	andseq	r0, ip, r0
     7b0:	1d010000 	stcne	0, cr0, [r1, #-0]
     7b4:	000004c3 	andeq	r0, r0, r3, asr #9
     7b8:	00016a1b 	andeq	r6, r1, fp, lsl sl
     7bc:	00026700 	andeq	r6, r2, r0, lsl #14
     7c0:	015f1c00 	cmpeq	pc, r0, lsl #24
     7c4:	54010000 	strpl	r0, [r1], #-0
     7c8:	0001561c 	andeq	r5, r1, ip, lsl r6
     7cc:	00770800 	rsbseq	r0, r7, r0, lsl #16
     7d0:	ff081a38 			; <UNDEFINED> instruction: 0xff081a38
     7d4:	4b1c9f1a 	blmi	728444 <__bss_end__+0x71e8e4>
     7d8:	01000001 	tsteq	r0, r1
     7dc:	01111a56 	tsteq	r1, r6, asr sl
     7e0:	81e40000 	mvnhi	r0, r0
     7e4:	00100000 	andseq	r0, r0, r0
     7e8:	1a020000 	bne	807f0 <__bss_end__+0x76c90>
     7ec:	000004aa 	andeq	r0, r0, sl, lsr #9
     7f0:	0001281b 	andeq	r2, r1, fp, lsl r8
     7f4:	00028c00 	andeq	r8, r2, r0, lsl #24
     7f8:	011d1c00 	tsteq	sp, r0, lsl #24
     7fc:	54010000 	strpl	r0, [r1], #-0
     800:	0081e41e 	addeq	lr, r1, lr, lsl r4
     804:	00000400 	andeq	r0, r0, r0, lsl #8
     808:	01321f00 	teqeq	r2, r0, lsl #30
     80c:	02b10000 	adcseq	r0, r1, #0
     810:	00000000 	andeq	r0, r0, r0
     814:	0081e420 	addeq	lr, r1, r0, lsr #8
     818:	00111500 	andseq	r1, r1, r0, lsl #10
     81c:	51012100 	mrspl	r2, (UNDEF: 17)
     820:	38007704 	stmdacc	r0, {r2, r8, r9, sl, ip, sp, lr}
     824:	5001211a 	andpl	r2, r1, sl, lsl r1
     828:	00007602 	andeq	r7, r0, r2, lsl #12
     82c:	013f1a00 	teqeq	pc, r0, lsl #20
     830:	81f80000 	mvnshi	r0, r0
     834:	001c0000 	andseq	r0, ip, r0
     838:	1f010000 	svcne	0x00010000
     83c:	0000054b 	andeq	r0, r0, fp, asr #10
     840:	00016a1b 	andeq	r6, r1, fp, lsl sl
     844:	0002c400 	andeq	ip, r2, r0, lsl #8
     848:	015f1c00 	cmpeq	pc, r0, lsl #24
     84c:	54010000 	strpl	r0, [r1], #-0
     850:	0001561c 	andeq	r5, r1, ip, lsl r6
     854:	00770800 	rsbseq	r0, r7, r0, lsl #16
     858:	ff081a40 			; <UNDEFINED> instruction: 0xff081a40
     85c:	4b1c9f1a 	blmi	7284cc <__bss_end__+0x71e96c>
     860:	01000001 	tsteq	r0, r1
     864:	01111a56 	tsteq	r1, r6, asr sl
     868:	82040000 	andhi	r0, r4, #0
     86c:	00100000 	andseq	r0, r0, r0
     870:	1a020000 	bne	80878 <__bss_end__+0x76d18>
     874:	00000532 	andeq	r0, r0, r2, lsr r5
     878:	0001281b 	andeq	r2, r1, fp, lsl r8
     87c:	0002eb00 	andeq	lr, r2, r0, lsl #22
     880:	011d1c00 	tsteq	sp, r0, lsl #24
     884:	54010000 	strpl	r0, [r1], #-0
     888:	0082041e 	addeq	r0, r2, lr, lsl r4
     88c:	00000400 	andeq	r0, r0, r0, lsl #8
     890:	01321f00 	teqeq	r2, r0, lsl #30
     894:	03120000 	tsteq	r2, #0
     898:	00000000 	andeq	r0, r0, r0
     89c:	00820420 	addeq	r0, r2, r0, lsr #8
     8a0:	00111500 	andseq	r1, r1, r0, lsl #10
     8a4:	51012100 	mrspl	r2, (UNDEF: 17)
     8a8:	40007704 	andmi	r7, r0, r4, lsl #14
     8ac:	5001211a 	andpl	r2, r1, sl, lsl r1
     8b0:	00007602 	andeq	r7, r0, r2, lsl #12
     8b4:	013f1a00 	teqeq	pc, r0, lsl #20
     8b8:	82180000 	andshi	r0, r8, #0
     8bc:	001c0000 	andseq	r0, ip, r0
     8c0:	21010000 	mrscs	r0, (UNDEF: 1)
     8c4:	000005d5 	ldrdeq	r0, [r0], -r5
     8c8:	00016a1b 	andeq	r6, r1, fp, lsl sl
     8cc:	00032500 	andeq	r2, r3, r0, lsl #10
     8d0:	015f1c00 	cmpeq	pc, r0, lsl #24
     8d4:	54010000 	strpl	r0, [r1], #-0
     8d8:	0001561c 	andeq	r5, r1, ip, lsl r6
     8dc:	00770900 	rsbseq	r0, r7, r0, lsl #18
     8e0:	081a2008 	ldmdaeq	sl, {r3, sp}
     8e4:	1c9f1aff 	vldmiane	pc, {s2-s256}
     8e8:	0000014b 	andeq	r0, r0, fp, asr #2
     8ec:	111a5601 	tstne	sl, r1, lsl #12
     8f0:	24000001 	strcs	r0, [r0], #-1
     8f4:	10000082 	andne	r0, r0, r2, lsl #1
     8f8:	02000000 	andeq	r0, r0, #0
     8fc:	0005bb1a 	andeq	fp, r5, sl, lsl fp
     900:	01281b00 	teqeq	r8, r0, lsl #22
     904:	034f0000 	movteq	r0, #61440	; 0xf000
     908:	1d1c0000 	ldcne	0, cr0, [ip, #-0]
     90c:	01000001 	tsteq	r0, r1
     910:	82241e54 	eorhi	r1, r4, #84, 28	; 0x540
     914:	00040000 	andeq	r0, r4, r0
     918:	321f0000 	andscc	r0, pc, #0
     91c:	79000001 	stmdbvc	r0, {r0}
     920:	00000003 	andeq	r0, r0, r3
     924:	82242000 	eorhi	r2, r4, #0
     928:	11150000 	tstne	r5, r0
     92c:	01210000 	teqeq	r1, r0
     930:	00770551 	rsbseq	r0, r7, r1, asr r5
     934:	211a2008 	tstcs	sl, r8
     938:	76025001 	strvc	r5, [r2], -r1
     93c:	1a000000 	bne	944 <_start-0x76bc>
     940:	0000013f 	andeq	r0, r0, pc, lsr r1
     944:	00008238 	andeq	r8, r0, r8, lsr r2
     948:	0000001c 	andeq	r0, r0, ip, lsl r0
     94c:	065f2301 	ldrbeq	r2, [pc], -r1, lsl #6
     950:	6a1b0000 	bvs	6c0958 <__bss_end__+0x6b6df8>
     954:	8c000001 	stchi	0, cr0, [r0], {1}
     958:	1c000003 	stcne	0, cr0, [r0], {3}
     95c:	0000015f 	andeq	r0, r0, pc, asr r1
     960:	561c5401 	ldrpl	r5, [ip], -r1, lsl #8
     964:	09000001 	stmdbeq	r0, {r0}
     968:	40080077 	andmi	r0, r8, r7, ror r0
     96c:	1aff081a 	bne	fffc29dc <__bss_end__+0xfffb8e7c>
     970:	014b1c9f 			; <UNDEFINED> instruction: 0x014b1c9f
     974:	56010000 	strpl	r0, [r1], -r0
     978:	0001111a 	andeq	r1, r1, sl, lsl r1
     97c:	00824400 	addeq	r4, r2, r0, lsl #8
     980:	00001000 	andeq	r1, r0, r0
     984:	451a0200 	ldrmi	r0, [sl, #-512]	; 0x200
     988:	1b000006 	blne	9a8 <_start-0x7658>
     98c:	00000128 	andeq	r0, r0, r8, lsr #2
     990:	000003ae 	andeq	r0, r0, lr, lsr #7
     994:	00011d1c 	andeq	r1, r1, ip, lsl sp
     998:	1e540100 	rdfnes	f0, f4, f0
     99c:	00008244 	andeq	r8, r0, r4, asr #4
     9a0:	00000004 	andeq	r0, r0, r4
     9a4:	0001321f 	andeq	r3, r1, pc, lsl r2
     9a8:	0003d000 	andeq	sp, r3, r0
     9ac:	20000000 	andcs	r0, r0, r0
     9b0:	00008244 	andeq	r8, r0, r4, asr #4
     9b4:	00001115 	andeq	r1, r0, r5, lsl r1
     9b8:	05510121 	ldrbeq	r0, [r1, #-289]	; 0x121
     9bc:	40080077 	andmi	r0, r8, r7, ror r0
     9c0:	5001211a 	andpl	r2, r1, sl, lsl r1
     9c4:	00007602 	andeq	r7, r0, r2, lsl #12
     9c8:	013f1a00 	teqeq	pc, r0, lsl #20
     9cc:	82580000 	subshi	r0, r8, #0
     9d0:	001c0000 	andseq	r0, ip, r0
     9d4:	25010000 	strcs	r0, [r1, #-0]
     9d8:	000006df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     9dc:	00016a1c 	andeq	r6, r1, ip, lsl sl
     9e0:	1c580100 	ldfnee	f0, [r8], {-0}
     9e4:	0000015f 	andeq	r0, r0, pc, asr r1
     9e8:	561b5401 	ldrpl	r5, [fp], -r1, lsl #8
     9ec:	e3000001 	movw	r0, #1
     9f0:	1c000003 	stcne	0, cr0, [r0], {3}
     9f4:	0000014b 	andeq	r0, r0, fp, asr #2
     9f8:	111a5601 	tstne	sl, r1, lsl #12
     9fc:	64000001 	strvs	r0, [r0], #-1
     a00:	10000082 	andne	r0, r0, r2, lsl #1
     a04:	02000000 	andeq	r0, r0, #0
     a08:	0006c51a 	andeq	ip, r6, sl, lsl r5
     a0c:	01281c00 	teqeq	r8, r0, lsl #24
     a10:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
     a14:	00011d1c 	andeq	r1, r1, ip, lsl sp
     a18:	1e540100 	rdfnes	f0, f4, f0
     a1c:	00008264 	andeq	r8, r0, r4, ror #4
     a20:	00000004 	andeq	r0, r0, r4
     a24:	0001321f 	andeq	r3, r1, pc, lsl r2
     a28:	00041600 	andeq	r1, r4, r0, lsl #12
     a2c:	20000000 	andcs	r0, r0, r0
     a30:	00008264 	andeq	r8, r0, r4, ror #4
     a34:	00001115 	andeq	r1, r0, r5, lsl r1
     a38:	05510121 	ldrbeq	r0, [r1, #-289]	; 0x121
     a3c:	80080077 	andhi	r0, r8, r7, ror r0
     a40:	5001211a 	andpl	r2, r1, sl, lsl r1
     a44:	00007602 	andeq	r7, r0, r2, lsl #12
     a48:	013f2200 	teqeq	pc, r0, lsl #4
     a4c:	82780000 	rsbshi	r0, r8, #0
     a50:	001c0000 	andseq	r0, ip, r0
     a54:	27010000 	strcs	r0, [r1, -r0]
     a58:	00016a1c 	andeq	r6, r1, ip, lsl sl
     a5c:	1c550100 	ldfnee	f0, [r5], {-0}
     a60:	0000015f 	andeq	r0, r0, pc, asr r1
     a64:	561d5401 	ldrpl	r5, [sp], -r1, lsl #8
     a68:	01000001 	tsteq	r0, r1
     a6c:	00014b1c 	andeq	r4, r1, ip, lsl fp
     a70:	1a560100 	bne	1580e78 <__bss_end__+0x1577318>
     a74:	00000111 	andeq	r0, r0, r1, lsl r1
     a78:	00008284 	andeq	r8, r0, r4, lsl #5
     a7c:	00000010 	andeq	r0, r0, r0, lsl r0
     a80:	073e1a02 	ldreq	r1, [lr, -r2, lsl #20]!
     a84:	281c0000 	ldmdacs	ip, {}	; <UNPREDICTABLE>
     a88:	01000001 	tsteq	r0, r1
     a8c:	011d1c55 	tsteq	sp, r5, asr ip
     a90:	54010000 	strpl	r0, [r1], #-0
     a94:	0082841e 	addeq	r8, r2, lr, lsl r4
     a98:	00000400 	andeq	r0, r0, r0, lsl #8
     a9c:	01321f00 	teqeq	r2, r0, lsl #30
     aa0:	04290000 	strteq	r0, [r9], #-0
     aa4:	00000000 	andeq	r0, r0, r0
     aa8:	00828420 	addeq	r8, r2, r0, lsr #8
     aac:	00111500 	andseq	r1, r1, r0, lsl #10
     ab0:	51012100 	mrspl	r2, (UNDEF: 17)
     ab4:	01213101 	teqeq	r1, r1, lsl #2
     ab8:	00760250 	rsbseq	r0, r6, r0, asr r2
     abc:	06000000 	streq	r0, [r0], -r0
     ac0:	0000d904 	andeq	sp, r0, r4, lsl #18
     ac4:	03172300 	tsteq	r7, #0, 6
     ac8:	2b010000 	blcs	40ad0 <__bss_end__+0x36f70>
     acc:	00000025 	andeq	r0, r0, r5, lsr #32
     ad0:	00079503 	andeq	r9, r7, r3, lsl #10
     ad4:	78720f00 	ldmdavc	r2!, {r8, r9, sl, fp}^
     ad8:	252b0100 	strcs	r0, [fp, #-256]!	; 0x100
     adc:	0f000000 	svceq	0x00000000
     ae0:	2b010076 	blcs	40cc0 <__bss_end__+0x37160>
     ae4:	00000025 	andeq	r0, r0, r5, lsr #32
     ae8:	0002340e 	andeq	r3, r2, lr, lsl #8
     aec:	2c2b0100 	stfcss	f0, [fp], #-0
     af0:	11000000 	mrsne	r0, (UNDEF: 0)
     af4:	00000498 	muleq	r0, r8, r4
     af8:	002c2c01 	eoreq	r2, ip, r1, lsl #24
     afc:	24000000 	strcs	r0, [r0], #-0
     b00:	000001f2 	strdeq	r0, [r0], -r2
     b04:	00253801 	eoreq	r3, r5, r1, lsl #16
     b08:	82980000 	addshi	r0, r8, #0
     b0c:	01c80000 	biceq	r0, r8, r0
     b10:	9c010000 	stcls	0, cr0, [r1], {-0}
     b14:	00000b51 	andeq	r0, r0, r1, asr fp
     b18:	0001d113 	andeq	sp, r1, r3, lsl r1
     b1c:	55380100 	ldrpl	r0, [r8, #-256]!	; 0x100
     b20:	3c000007 	stccc	0, cr0, [r0], {7}
     b24:	13000004 	movwne	r0, #4
     b28:	00000234 	andeq	r0, r0, r4, lsr r2
     b2c:	00253801 	eoreq	r3, r5, r1, lsl #16
     b30:	04810000 	streq	r0, [r1], #0
     b34:	72150000 	andsvc	r0, r5, #0
     b38:	39010078 	stmdbcc	r1, {r3, r4, r5, r6}
     b3c:	00000025 	andeq	r0, r0, r5, lsr #32
     b40:	73165501 	tstvc	r6, #4194304	; 0x400000
     b44:	2c400100 	stfcse	f0, [r0], {-0}
     b48:	9f000000 	svcls	0x00000000
     b4c:	16000004 	strne	r0, [r0], -r4
     b50:	43010075 	movwmi	r0, #4213	; 0x1075
     b54:	00000068 	andeq	r0, r0, r8, rrx
     b58:	000004b2 			; <UNDEFINED> instruction: 0x000004b2
     b5c:	01006e16 	tsteq	r0, r6, lsl lr
     b60:	00002c44 	andeq	r2, r0, r4, asr #24
     b64:	0004c500 	andeq	ip, r4, r0, lsl #10
     b68:	00631600 	rsbeq	r1, r3, r0, lsl #12
     b6c:	002c4501 	eoreq	r4, ip, r1, lsl #10
     b70:	04dc0000 	ldrbeq	r0, [ip], #0
     b74:	5b1a0000 	blpl	680b7c <__bss_end__+0x67701c>
     b78:	ac000007 	stcge	0, cr0, [r0], {7}
     b7c:	34000082 	strcc	r0, [r0], #-130	; 0x82
     b80:	01000000 	mrseq	r0, (UNDEF: 0)
     b84:	00086f3c 	andeq	r6, r8, ip, lsr pc
     b88:	077e1b00 	ldrbeq	r1, [lr, -r0, lsl #22]!
     b8c:	05060000 	streq	r0, [r6, #-0]
     b90:	751d0000 	ldrvc	r0, [sp, #-0]
     b94:	00000007 	andeq	r0, r0, r7
     b98:	00076b1c 	andeq	r6, r7, ip, lsl fp
     b9c:	1e550100 	rdfnes	f0, f5, f0
     ba0:	000082ac 	andeq	r8, r0, ip, lsr #5
     ba4:	00000034 	andeq	r0, r0, r4, lsr r0
     ba8:	0007891f 	andeq	r8, r7, pc, lsl r9
     bac:	00052400 	andeq	r2, r5, r0, lsl #8
     bb0:	82b02500 	adcshi	r2, r0, #0, 10
     bb4:	112b0000 	teqne	fp, r0
     bb8:	bc260000 	stclt	0, cr0, [r6], #-0
     bbc:	36000082 	strcc	r0, [r0], -r2, lsl #1
     bc0:	64000011 	strvs	r0, [r0], #-17
     bc4:	21000008 	tstcs	r0, r8
     bc8:	75025001 	strvc	r5, [r2, #-1]
     bcc:	c8250000 	stmdagt	r5!, {}	; <UNPREDICTABLE>
     bd0:	2b000082 	blcs	de0 <_start-0x7220>
     bd4:	00000011 	andeq	r0, r0, r1, lsl r0
     bd8:	82e81900 	rschi	r1, r8, #0, 18
     bdc:	00040000 	andeq	r0, r4, r0
     be0:	088c0000 	stmeq	ip, {}	; <UNPREDICTABLE>
     be4:	a5270000 	strge	r0, [r7, #-0]!
     be8:	01000002 	tsteq	r0, r2
     bec:	00002c40 	andeq	r2, r0, r0, asr #24
     bf0:	00054200 	andeq	r4, r5, r0, lsl #4
     bf4:	111a0000 	tstne	sl, r0
     bf8:	f4000001 	vst4.8	{d0-d3}, [r0], r1
     bfc:	10000082 	andne	r0, r0, r2, lsl #1
     c00:	01000000 	mrseq	r0, (UNDEF: 0)
     c04:	0008c548 	andeq	ip, r8, r8, asr #10
     c08:	01281b00 	teqeq	r8, r0, lsl #22
     c0c:	05550000 	ldrbeq	r0, [r5, #-0]
     c10:	1d1b0000 	ldcne	0, cr0, [fp, #-0]
     c14:	7a000001 	bvc	c20 <_start-0x73e0>
     c18:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
     c1c:	000082f4 	strdeq	r8, [r0], -r4
     c20:	00000004 	andeq	r0, r0, r4
     c24:	0001321f 	andeq	r3, r1, pc, lsl r2
     c28:	00058d00 	andeq	r8, r5, r0, lsl #26
     c2c:	1a000000 	bne	c34 <_start-0x73cc>
     c30:	00000111 	andeq	r0, r0, r1, lsl r1
     c34:	00008314 	andeq	r8, r0, r4, lsl r3
     c38:	00000010 	andeq	r0, r0, r0, lsl r0
     c3c:	08fe4c01 	ldmeq	lr!, {r0, sl, fp, lr}^
     c40:	281b0000 	ldmdacs	fp, {}	; <UNPREDICTABLE>
     c44:	a0000001 	andge	r0, r0, r1
     c48:	1b000005 	blne	c64 <_start-0x739c>
     c4c:	0000011d 	andeq	r0, r0, sp, lsl r1
     c50:	000005b3 			; <UNDEFINED> instruction: 0x000005b3
     c54:	0083141e 	addeq	r1, r3, lr, lsl r4
     c58:	00000400 	andeq	r0, r0, r0, lsl #8
     c5c:	01321f00 	teqeq	r2, r0, lsl #30
     c60:	05c60000 	strbeq	r0, [r6]
     c64:	00000000 	andeq	r0, r0, r0
     c68:	0001111a 	andeq	r1, r1, sl, lsl r1
     c6c:	00833800 	addeq	r3, r3, r0, lsl #16
     c70:	00001000 	andeq	r1, r0, r0
     c74:	374f0100 	strbcc	r0, [pc, -r0, lsl #2]
     c78:	1b000009 	blne	ca4 <_start-0x735c>
     c7c:	00000128 	andeq	r0, r0, r8, lsr #2
     c80:	000005d9 	ldrdeq	r0, [r0], -r9
     c84:	00011d1b 	andeq	r1, r1, fp, lsl sp
     c88:	0005ec00 	andeq	lr, r5, r0, lsl #24
     c8c:	83381e00 	teqhi	r8, #0, 28
     c90:	00040000 	andeq	r0, r4, r0
     c94:	321f0000 	andscc	r0, pc, #0
     c98:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     c9c:	00000005 	andeq	r0, r0, r5
     ca0:	01111a00 	tsteq	r1, r0, lsl #20
     ca4:	835c0000 	cmphi	ip, #0
     ca8:	00100000 	andseq	r0, r0, r0
     cac:	52010000 	andpl	r0, r1, #0
     cb0:	00000970 	andeq	r0, r0, r0, ror r9
     cb4:	0001281b 	andeq	r2, r1, fp, lsl r8
     cb8:	00061200 	andeq	r1, r6, r0, lsl #4
     cbc:	011d1b00 	tsteq	sp, r0, lsl #22
     cc0:	06250000 	strteq	r0, [r5], -r0
     cc4:	5c1e0000 	ldcpl	0, cr0, [lr], {-0}
     cc8:	04000083 	streq	r0, [r0], #-131	; 0x83
     ccc:	1f000000 	svcne	0x00000000
     cd0:	00000132 	andeq	r0, r0, r2, lsr r1
     cd4:	00000638 	andeq	r0, r0, r8, lsr r6
     cd8:	111a0000 	tstne	sl, r0
     cdc:	80000001 	andhi	r0, r0, r1
     ce0:	10000083 	andne	r0, r0, r3, lsl #1
     ce4:	01000000 	mrseq	r0, (UNDEF: 0)
     ce8:	0009a955 	andeq	sl, r9, r5, asr r9
     cec:	01281b00 	teqeq	r8, r0, lsl #22
     cf0:	064b0000 	strbeq	r0, [fp], -r0
     cf4:	1d1b0000 	ldcne	0, cr0, [fp, #-0]
     cf8:	5e000001 	cdppl	0, 0, cr0, cr0, cr1, {0}
     cfc:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
     d00:	00008380 	andeq	r8, r0, r0, lsl #7
     d04:	00000004 	andeq	r0, r0, r4
     d08:	0001321f 	andeq	r3, r1, pc, lsl r2
     d0c:	00067100 	andeq	r7, r6, r0, lsl #2
     d10:	1a000000 	bne	d18 <_start-0x72e8>
     d14:	00000111 	andeq	r0, r0, r1, lsl r1
     d18:	000083a4 	andeq	r8, r0, r4, lsr #7
     d1c:	00000010 	andeq	r0, r0, r0, lsl r0
     d20:	09e25801 	stmibeq	r2!, {r0, fp, ip, lr}^
     d24:	281b0000 	ldmdacs	fp, {}	; <UNPREDICTABLE>
     d28:	84000001 	strhi	r0, [r0], #-1
     d2c:	1b000006 	blne	d4c <_start-0x72b4>
     d30:	0000011d 	andeq	r0, r0, sp, lsl r1
     d34:	00000697 	muleq	r0, r7, r6
     d38:	0083a41e 	addeq	sl, r3, lr, lsl r4
     d3c:	00000400 	andeq	r0, r0, r0, lsl #8
     d40:	01321f00 	teqeq	r2, r0, lsl #30
     d44:	06aa0000 	strteq	r0, [sl], r0
     d48:	00000000 	andeq	r0, r0, r0
     d4c:	0001111a 	andeq	r1, r1, sl, lsl r1
     d50:	0083c800 	addeq	ip, r3, r0, lsl #16
     d54:	00001000 	andeq	r1, r0, r0
     d58:	1b5b0100 	blne	16c1160 <__bss_end__+0x16b7600>
     d5c:	1b00000a 	blne	d8c <_start-0x7274>
     d60:	00000128 	andeq	r0, r0, r8, lsr #2
     d64:	000006bd 			; <UNDEFINED> instruction: 0x000006bd
     d68:	00011d1b 	andeq	r1, r1, fp, lsl sp
     d6c:	0006d000 	andeq	sp, r6, r0
     d70:	83c81e00 	bichi	r1, r8, #0, 28
     d74:	00040000 	andeq	r0, r4, r0
     d78:	321f0000 	andscc	r0, pc, #0
     d7c:	e3000001 	movw	r0, #1
     d80:	00000006 	andeq	r0, r0, r6
     d84:	01111a00 	tsteq	r1, r0, lsl #20
     d88:	83ec0000 	mvnhi	r0, #0
     d8c:	00100000 	andseq	r0, r0, r0
     d90:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
     d94:	00000a50 	andeq	r0, r0, r0, asr sl
     d98:	0001281b 	andeq	r2, r1, fp, lsl r8
     d9c:	0006f600 	andeq	pc, r6, r0, lsl #12
     da0:	011d2800 	tsteq	sp, r0, lsl #16
     da4:	ec1e0000 	ldc	0, cr0, [lr], {-0}
     da8:	04000083 	streq	r0, [r0], #-131	; 0x83
     dac:	1f000000 	svcne	0x00000000
     db0:	00000132 	andeq	r0, r0, r2, lsr r1
     db4:	00000709 	andeq	r0, r0, r9, lsl #14
     db8:	5b1a0000 	blpl	680dc0 <__bss_end__+0x677260>
     dbc:	0c000007 	stceq	0, cr0, [r0], {7}
     dc0:	34000084 	strcc	r0, [r0], #-132	; 0x84
     dc4:	01000000 	mrseq	r0, (UNDEF: 0)
     dc8:	000ab465 	andeq	fp, sl, r5, ror #8
     dcc:	077e2800 	ldrbeq	r2, [lr, -r0, lsl #16]!
     dd0:	751b0000 	ldrvc	r0, [fp, #-0]
     dd4:	1c000007 	stcne	0, cr0, [r0], {7}
     dd8:	1b000007 	blne	dfc <_start-0x7204>
     ddc:	0000076b 	andeq	r0, r0, fp, ror #14
     de0:	0000073c 	andeq	r0, r0, ip, lsr r7
     de4:	00840c1e 	addeq	r0, r4, lr, lsl ip
     de8:	00003400 	andeq	r3, r0, r0, lsl #8
     dec:	07891f00 	streq	r1, [r9, r0, lsl #30]
     df0:	075a0000 	ldrbeq	r0, [sl, -r0]
     df4:	10250000 	eorne	r0, r5, r0
     df8:	2b000084 	blcs	1010 <_start-0x6ff0>
     dfc:	26000011 			; <UNDEFINED> instruction: 0x26000011
     e00:	0000841c 	andeq	r8, r0, ip, lsl r4
     e04:	00001136 	andeq	r1, r0, r6, lsr r1
     e08:	00000aa9 	andeq	r0, r0, r9, lsr #21
     e0c:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
     e10:	25000075 	strcs	r0, [r0, #-117]	; 0x75
     e14:	00008428 	andeq	r8, r0, r8, lsr #8
     e18:	0000112b 	andeq	r1, r0, fp, lsr #2
     e1c:	10260000 	eorne	r0, r6, r0
     e20:	36000083 	strcc	r0, [r0], -r3, lsl #1
     e24:	c8000011 	stmdagt	r0, {r0, r4}
     e28:	2100000a 	tstcs	r0, sl
     e2c:	75025001 	strvc	r5, [r2, #-1]
     e30:	30260000 	eorcc	r0, r6, r0
     e34:	36000083 	strcc	r0, [r0], -r3, lsl #1
     e38:	dc000011 	stcle	0, cr0, [r0], {17}
     e3c:	2100000a 	tstcs	r0, sl
     e40:	75025001 	strvc	r5, [r2, #-1]
     e44:	54260000 	strtpl	r0, [r6], #-0
     e48:	36000083 	strcc	r0, [r0], -r3, lsl #1
     e4c:	f0000011 			; <UNDEFINED> instruction: 0xf0000011
     e50:	2100000a 	tstcs	r0, sl
     e54:	75025001 	strvc	r5, [r2, #-1]
     e58:	78260000 	stmdavc	r6!, {}	; <UNPREDICTABLE>
     e5c:	36000083 	strcc	r0, [r0], -r3, lsl #1
     e60:	04000011 	streq	r0, [r0], #-17
     e64:	2100000b 	tstcs	r0, fp
     e68:	75025001 	strvc	r5, [r2, #-1]
     e6c:	9c260000 	stcls	0, cr0, [r6], #-0
     e70:	36000083 	strcc	r0, [r0], -r3, lsl #1
     e74:	18000011 	stmdane	r0, {r0, r4}
     e78:	2100000b 	tstcs	r0, fp
     e7c:	75025001 	strvc	r5, [r2, #-1]
     e80:	c0260000 	eorgt	r0, r6, r0
     e84:	36000083 	strcc	r0, [r0], -r3, lsl #1
     e88:	2c000011 	stccs	0, cr0, [r0], {17}
     e8c:	2100000b 	tstcs	r0, fp
     e90:	75025001 	strvc	r5, [r2, #-1]
     e94:	e4260000 	strt	r0, [r6], #-0
     e98:	36000083 	strcc	r0, [r0], -r3, lsl #1
     e9c:	40000011 	andmi	r0, r0, r1, lsl r0
     ea0:	2100000b 	tstcs	r0, fp
     ea4:	75025001 	strvc	r5, [r2, #-1]
     ea8:	04200000 	strteq	r0, [r0], #-0
     eac:	36000084 	strcc	r0, [r0], -r4, lsl #1
     eb0:	21000011 	tstcs	r0, r1, lsl r0
     eb4:	75025001 	strvc	r5, [r2, #-1]
     eb8:	24000000 	strcs	r0, [r0], #-0
     ebc:	000000a1 	andeq	r0, r0, r1, lsr #1
     ec0:	00257001 	eoreq	r7, r5, r1
     ec4:	84600000 	strbthi	r0, [r0], #-0
     ec8:	008c0000 	addeq	r0, ip, r0
     ecc:	9c010000 	stcls	0, cr0, [r1], {-0}
     ed0:	00000c2c 	andeq	r0, r0, ip, lsr #24
     ed4:	01007514 	tsteq	r0, r4, lsl r5
     ed8:	00075570 	andeq	r5, r7, r0, ror r5
     edc:	00077800 	andeq	r7, r7, r0, lsl #16
     ee0:	75621400 	strbvc	r1, [r2, #-1024]!	; 0x400
     ee4:	70010066 	andvc	r0, r1, r6, rrx
     ee8:	00000c2c 	andeq	r0, r0, ip, lsr #24
     eec:	000007ac 	andeq	r0, r0, ip, lsr #15
     ef0:	0002bd13 	andeq	fp, r2, r3, lsl sp
     ef4:	68700100 	ldmdavs	r0!, {r8}^
     ef8:	e0000000 	and	r0, r0, r0
     efc:	14000007 	strne	r0, [r0], #-7
     f00:	00646e65 	rsbeq	r6, r4, r5, ror #28
     f04:	004f7001 	subeq	r7, pc, r1
     f08:	08190000 	ldmdaeq	r9, {}	; <UNPREDICTABLE>
     f0c:	cf290000 	svcgt	0x00290000
     f10:	01000002 	tsteq	r0, r2
     f14:	00006870 	andeq	r6, r0, r0, ror r8
     f18:	00910200 	addseq	r0, r1, r0, lsl #4
     f1c:	0000ec2a 	andeq	lr, r0, sl, lsr #24
     f20:	000c4200 	andeq	r4, ip, r0, lsl #4
     f24:	10030500 	andne	r0, r3, r0, lsl #10
     f28:	16000095 			; <UNDEFINED> instruction: 0x16000095
     f2c:	74010069 	strvc	r0, [r1], #-105	; 0x69
     f30:	00000025 	andeq	r0, r0, r5, lsr #32
     f34:	00000853 	andeq	r0, r0, r3, asr r8
     f38:	00027927 	andeq	r7, r2, r7, lsr #18
     f3c:	4f750100 	svcmi	0x00750100
     f40:	72000000 	andvc	r0, r0, #0
     f44:	26000008 	strcs	r0, [r0], -r8
     f48:	00008490 	muleq	r0, r0, r4
     f4c:	0000114b 	andeq	r1, r0, fp, asr #2
     f50:	00000c0c 	andeq	r0, r0, ip, lsl #24
     f54:	02530121 	subseq	r0, r3, #1073741832	; 0x40000008
     f58:	01217108 	teqeq	r1, r8, lsl #2
     f5c:	10030552 	andne	r0, r3, r2, asr r5
     f60:	21000095 	swpcs	r0, r5, [r0]	; <UNPREDICTABLE>
     f64:	03055101 	movweq	r5, #20737	; 0x5101
     f68:	000095a4 	andeq	r9, r0, r4, lsr #11
     f6c:	05500121 	ldrbeq	r0, [r0, #-289]	; 0x121
     f70:	00958803 	addseq	r8, r5, r3, lsl #16
     f74:	94250000 	strtls	r0, [r5], #-0
     f78:	61000084 	smlabbvs	r0, r4, r0, r0
     f7c:	20000011 	andcs	r0, r0, r1, lsl r0
     f80:	000084b0 			; <UNDEFINED> instruction: 0x000084b0
     f84:	00000795 	muleq	r0, r5, r7
     f88:	02510121 	subseq	r0, r1, #1073741832	; 0x40000008
     f8c:	0121007a 	teqeq	r1, sl, ror r0
     f90:	00780250 	rsbseq	r0, r8, r0, asr r2
     f94:	04060000 	streq	r0, [r6], #-0
     f98:	0000004f 	andeq	r0, r0, pc, asr #32
     f9c:	0000902b 	andeq	r9, r0, fp, lsr #32
     fa0:	000c4200 	andeq	r4, ip, r0, lsl #4
     fa4:	00812c00 	addeq	r2, r1, r0, lsl #24
     fa8:	00120000 	andseq	r0, r2, r0
     fac:	000c3207 	andeq	r3, ip, r7, lsl #4
     fb0:	02902400 	addseq	r2, r0, #0, 8
     fb4:	84010000 	strhi	r0, [r1], #-0
     fb8:	00000025 	andeq	r0, r0, r5, lsr #32
     fbc:	000084ec 	andeq	r8, r0, ip, ror #9
     fc0:	00000078 	andeq	r0, r0, r8, ror r0
     fc4:	0d059c01 	stceq	12, cr9, [r5, #-4]
     fc8:	75140000 	ldrvc	r0, [r4, #-0]
     fcc:	55840100 	strpl	r0, [r4, #256]	; 0x100
     fd0:	85000007 	strhi	r0, [r0, #-7]
     fd4:	14000008 	strne	r0, [r0], #-8
     fd8:	00667562 	rsbeq	r7, r6, r2, ror #10
     fdc:	0c2c8401 	cfstrseq	mvf8, [ip], #-4
     fe0:	08b90000 	ldmeq	r9!, {}	; <UNPREDICTABLE>
     fe4:	bd130000 	ldclt	0, cr0, [r3, #-0]
     fe8:	01000002 	tsteq	r0, r2
     fec:	00006885 	andeq	r6, r0, r5, lsl #17
     ff0:	0008ed00 	andeq	lr, r8, r0, lsl #26
     ff4:	02cf1300 	sbceq	r1, pc, #0, 6
     ff8:	85010000 	strhi	r0, [r1, #-0]
     ffc:	00000068 	andeq	r0, r0, r8, rrx
    1000:	00000926 	andeq	r0, r0, r6, lsr #18
    1004:	0000ec2a 	andeq	lr, r0, sl, lsr #24
    1008:	000d1500 	andeq	r1, sp, r0, lsl #10
    100c:	24030500 	strcs	r0, [r3], #-1280	; 0x500
    1010:	16000095 			; <UNDEFINED> instruction: 0x16000095
    1014:	8a010069 	bhi	411c0 <__bss_end__+0x37660>
    1018:	00000025 	andeq	r0, r0, r5, lsr #32
    101c:	0000095a 	andeq	r0, r0, sl, asr r9
    1020:	00851826 	addeq	r1, r5, r6, lsr #16
    1024:	00114b00 	andseq	r4, r1, r0, lsl #22
    1028:	000ce500 	andeq	lr, ip, r0, lsl #10
    102c:	53012100 	movwpl	r2, #4352	; 0x1100
    1030:	21870802 	orrcs	r0, r7, r2, lsl #16
    1034:	03055201 	movweq	r5, #20993	; 0x5201
    1038:	00009524 	andeq	r9, r0, r4, lsr #10
    103c:	05510121 	ldrbeq	r0, [r1, #-289]	; 0x121
    1040:	0095a403 	addseq	sl, r5, r3, lsl #8
    1044:	50012100 	andpl	r2, r1, r0, lsl #2
    1048:	95880305 	strls	r0, [r8, #773]	; 0x305
    104c:	25000000 	strcs	r0, [r0, #-0]
    1050:	0000851c 	andeq	r8, r0, ip, lsl r5
    1054:	00001161 	andeq	r1, r0, r1, ror #2
    1058:	00853820 	addeq	r3, r5, r0, lsr #16
    105c:	00079500 	andeq	r9, r7, r0, lsl #10
    1060:	51012100 	mrspl	r2, (UNDEF: 17)
    1064:	21007802 	tstcs	r0, r2, lsl #16
    1068:	77025001 	strvc	r5, [r2, -r1]
    106c:	2b000000 	blcs	1074 <_start-0x6f8c>
    1070:	00000090 	muleq	r0, r0, r0
    1074:	00000d15 	andeq	r0, r0, r5, lsl sp
    1078:	0000812c 	andeq	r8, r0, ip, lsr #2
    107c:	07001400 	streq	r1, [r0, -r0, lsl #8]
    1080:	00000d05 	andeq	r0, r0, r5, lsl #26
    1084:	00001524 	andeq	r1, r0, r4, lsr #10
    1088:	d9970100 	ldmible	r7, {r8}
    108c:	64000000 	strvs	r0, [r0], #-0
    1090:	b0000085 	andlt	r0, r0, r5, lsl #1
    1094:	01000000 	mrseq	r0, (UNDEF: 0)
    1098:	000e139c 	muleq	lr, ip, r3
    109c:	78741400 	ldmdavc	r4!, {sl, ip}^
    10a0:	4f970100 	svcmi	0x00970100
    10a4:	79000000 	stmdbvc	r0, {}	; <UNPREDICTABLE>
    10a8:	14000009 	strne	r0, [r0], #-9
    10ac:	01007872 	tsteq	r0, r2, ror r8
    10b0:	00004f97 	muleq	r0, r7, pc	; <UNPREDICTABLE>
    10b4:	00099a00 	andeq	r9, r9, r0, lsl #20
    10b8:	01181300 	tsteq	r8, r0, lsl #6
    10bc:	97010000 	strls	r0, [r1, -r0]
    10c0:	00000068 	andeq	r0, r0, r8, rrx
    10c4:	000009bb 			; <UNDEFINED> instruction: 0x000009bb
    10c8:	0001d629 	andeq	sp, r1, r9, lsr #12
    10cc:	68970100 	ldmvs	r7, {r8}
    10d0:	02000000 	andeq	r0, r0, #0
    10d4:	6d2d0091 	stcvs	0, cr0, [sp, #-580]!	; 0xfffffdbc
    10d8:	01007a68 	tsteq	r0, r8, ror #20
    10dc:	00002c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    10e0:	b9270000 	stmdblt	r7!, {}	; <UNPREDICTABLE>
    10e4:	021e2729 	andseq	r2, lr, #10747904	; 0xa40000
    10e8:	a0010000 	andge	r0, r1, r0
    10ec:	0000002c 	andeq	r0, r0, ip, lsr #32
    10f0:	000009d9 	ldrdeq	r0, [r0], -r9
    10f4:	0000ec2a 	andeq	lr, r0, sl, lsr #24
    10f8:	000e2300 	andeq	r2, lr, r0, lsl #6
    10fc:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
    1100:	19000095 	stmdbne	r0, {r0, r2, r4, r7}
    1104:	0000858c 	andeq	r8, r0, ip, lsl #11
    1108:	00000008 	andeq	r0, r0, r8
    110c:	00000db2 			; <UNDEFINED> instruction: 0x00000db2
    1110:	006e692e 	rsbeq	r6, lr, lr, lsr #18
    1114:	002c9b01 	eoreq	r9, ip, r1, lsl #22
    1118:	00010000 	andeq	r0, r1, r0
    111c:	00858426 	addeq	r8, r5, r6, lsr #8
    1120:	00116800 	andseq	r6, r1, r0, lsl #16
    1124:	000dc600 	andeq	ip, sp, r0, lsl #12
    1128:	50012100 	andpl	r2, r1, r0, lsl #2
    112c:	00007802 	andeq	r7, r0, r2, lsl #16
    1130:	00858c26 	addeq	r8, r5, r6, lsr #24
    1134:	00117900 	andseq	r7, r1, r0, lsl #18
    1138:	000dda00 	andeq	sp, sp, r0, lsl #20
    113c:	50012100 	andpl	r2, r1, r0, lsl #2
    1140:	00007702 	andeq	r7, r0, r2, lsl #14
    1144:	0085e826 	addeq	lr, r5, r6, lsr #16
    1148:	00114b00 	andseq	r4, r1, r0, lsl #22
    114c:	000e0900 	andeq	r0, lr, r0, lsl #18
    1150:	53012100 	movwpl	r2, #4352	; 0x1100
    1154:	21a10802 			; <UNDEFINED> instruction: 0x21a10802
    1158:	03055201 	movweq	r5, #20993	; 0x5201
    115c:	0000953c 	andeq	r9, r0, ip, lsr r5
    1160:	05510121 	ldrbeq	r0, [r1, #-289]	; 0x121
    1164:	0095a403 	addseq	sl, r5, r3, lsl #8
    1168:	50012100 	andpl	r2, r1, r0, lsl #2
    116c:	95b00305 	ldrls	r0, [r0, #773]!	; 0x305
    1170:	25000000 	strcs	r0, [r0, #-0]
    1174:	000085ec 	andeq	r8, r0, ip, ror #11
    1178:	00001161 	andeq	r1, r0, r1, ror #2
    117c:	00902b00 	addseq	r2, r0, r0, lsl #22
    1180:	0e230000 	cdpeq	0, 2, cr0, cr3, cr0, {0}
    1184:	812c0000 	teqhi	ip, r0
    1188:	13000000 	movwne	r0, #0
    118c:	0e130700 	cdpeq	7, 1, cr0, cr3, cr0, {0}
    1190:	11240000 	teqne	r4, r0
    1194:	01000002 	tsteq	r0, r2
    1198:	000025ad 	andeq	r2, r0, sp, lsr #11
    119c:	00861400 	addeq	r1, r6, r0, lsl #8
    11a0:	00003800 	andeq	r3, r0, r0, lsl #16
    11a4:	c29c0100 	addsgt	r0, ip, #0, 2
    11a8:	1300000e 	movwne	r0, #14
    11ac:	000001d1 	ldrdeq	r0, [r0], -r1
    11b0:	0755ad01 	ldrbeq	sl, [r5, -r1, lsl #26]
    11b4:	0a070000 	beq	1c11bc <__bss_end__+0x1b765c>
    11b8:	72160000 	andsvc	r0, r6, #0
    11bc:	01007365 	tsteq	r0, r5, ror #6
    11c0:	000025ae 	andeq	r2, r0, lr, lsr #11
    11c4:	000a2800 	andeq	r2, sl, r0, lsl #16
    11c8:	00ec2a00 	rsceq	r2, ip, r0, lsl #20
    11cc:	0ed20000 	cdpeq	0, 13, cr0, cr2, cr0, {0}
    11d0:	03050000 	movweq	r0, #20480	; 0x5000
    11d4:	00009550 	andeq	r9, r0, r0, asr r5
    11d8:	00862026 	addeq	r2, r6, r6, lsr #32
    11dc:	00079500 	andeq	r9, r7, r0, lsl #10
    11e0:	000e8900 	andeq	r8, lr, r0, lsl #18
    11e4:	51012100 	mrspl	r2, (UNDEF: 17)
    11e8:	21ff0902 	mvnscs	r0, r2, lsl #18
    11ec:	f3035001 	vhadd.u8	d5, d3, d1
    11f0:	26005001 	strcs	r5, [r0], -r1
    11f4:	0000863c 	andeq	r8, r0, ip, lsr r6
    11f8:	0000114b 	andeq	r1, r0, fp, asr #2
    11fc:	00000eb8 			; <UNDEFINED> instruction: 0x00000eb8
    1200:	02530121 	subseq	r0, r3, #1073741832	; 0x40000008
    1204:	0121b008 	teqeq	r1, r8
    1208:	50030552 	andpl	r0, r3, r2, asr r5
    120c:	21000095 	swpcs	r0, r5, [r0]	; <UNPREDICTABLE>
    1210:	03055101 	movweq	r5, #20737	; 0x5101
    1214:	000095a4 	andeq	r9, r0, r4, lsr #11
    1218:	05500121 	ldrbeq	r0, [r0, #-289]	; 0x121
    121c:	0095f403 	addseq	pc, r5, r3, lsl #8
    1220:	40250000 	eormi	r0, r5, r0
    1224:	61000086 	smlabbvs	r0, r6, r0, r0
    1228:	00000011 	andeq	r0, r0, r1, lsl r0
    122c:	0000902b 	andeq	r9, r0, fp, lsr #32
    1230:	000ed200 	andeq	sp, lr, r0, lsl #4
    1234:	00812c00 	addeq	r2, r1, r0, lsl #24
    1238:	000c0000 	andeq	r0, ip, r0
    123c:	000ec207 	andeq	ip, lr, r7, lsl #4
    1240:	024e1200 	subeq	r1, lr, #0, 4
    1244:	b4010000 	strlt	r0, [r1], #-0
    1248:	0000864c 	andeq	r8, r0, ip, asr #12
    124c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1250:	0f1b9c01 	svceq	0x001b9c01
    1254:	d1130000 	tstle	r3, r0
    1258:	01000001 	tsteq	r0, r1
    125c:	000755b4 			; <UNDEFINED> instruction: 0x000755b4
    1260:	000a3b00 	andeq	r3, sl, r0, lsl #22
    1264:	736d1400 	cmnvc	sp, #0, 8
    1268:	b4010067 	strlt	r0, [r1], #-103	; 0x67
    126c:	00000097 	muleq	r0, r7, r0
    1270:	00000a59 	andeq	r0, r0, r9, asr sl
    1274:	00866420 	addeq	r6, r6, r0, lsr #8
    1278:	00017600 	andeq	r7, r1, r0, lsl #12
    127c:	50012100 	andpl	r2, r1, r0, lsl #2
    1280:	00007502 	andeq	r7, r0, r2, lsl #10
    1284:	00922400 	addseq	r2, r2, r0, lsl #8
    1288:	bd010000 	stclt	0, cr0, [r1, #-0]
    128c:	00000025 	andeq	r0, r0, r5, lsr #32
    1290:	00008678 	andeq	r8, r0, r8, ror r6
    1294:	00000080 	andeq	r0, r0, r0, lsl #1
    1298:	10069c01 	andne	r9, r6, r1, lsl #24
    129c:	d1130000 	tstle	r3, r0
    12a0:	01000001 	tsteq	r0, r1
    12a4:	000755bd 			; <UNDEFINED> instruction: 0x000755bd
    12a8:	000a7700 	andeq	r7, sl, r0, lsl #14
    12ac:	6d662f00 	stclvs	15, cr2, [r6, #-0]
    12b0:	bd010074 	stclt	0, cr0, [r1, #-464]	; 0xfffffe30
    12b4:	00000097 	muleq	r0, r7, r0
    12b8:	30749102 	rsbscc	r9, r4, r2, lsl #2
    12bc:	66756215 			; <UNDEFINED> instruction: 0x66756215
    12c0:	06be0100 	ldrteq	r0, [lr], r0, lsl #2
    12c4:	03000010 	movweq	r0, #16
    12c8:	187c9c91 	ldmdane	ip!, {r0, r4, r7, sl, fp, ip, pc}^
    12cc:	00000327 	andeq	r0, r0, r7, lsr #6
    12d0:	0106c001 	tsteq	r6, r1
    12d4:	91030000 	mrsls	r0, (UNDEF: 3)
    12d8:	73167c98 	tstvc	r6, #152, 24	; 0x9800
    12dc:	c201007a 	andgt	r0, r1, #122	; 0x7a
    12e0:	00000025 	andeq	r0, r0, r5, lsr #32
    12e4:	00000aa3 	andeq	r0, r0, r3, lsr #21
    12e8:	0000ec2a 	andeq	lr, r0, sl, lsr #24
    12ec:	00102700 	andseq	r2, r0, r0, lsl #14
    12f0:	60030500 	andvs	r0, r3, r0, lsl #10
    12f4:	26000095 			; <UNDEFINED> instruction: 0x26000095
    12f8:	000086a0 	andeq	r8, r0, r0, lsr #13
    12fc:	0000118a 	andeq	r1, r0, sl, lsl #3
    1300:	00000fb6 			; <UNDEFINED> instruction: 0x00000fb6
    1304:	02530121 	subseq	r0, r3, #1073741832	; 0x40000008
    1308:	01215891 			; <UNDEFINED> instruction: 0x01215891
    130c:	54910352 	ldrpl	r0, [r1], #850	; 0x352
    1310:	51012106 	tstpl	r1, r6, lsl #2
    1314:	01cc0a03 	biceq	r0, ip, r3, lsl #20
    1318:	03500121 	cmpeq	r0, #1073741832	; 0x40000008
    131c:	007bfc91 			; <UNDEFINED> instruction: 0x007bfc91
    1320:	0086c426 	addeq	ip, r6, r6, lsr #8
    1324:	00114b00 	andseq	r4, r1, r0, lsl #22
    1328:	000fe500 	andeq	lr, pc, r0, lsl #10
    132c:	53012100 	movwpl	r2, #4352	; 0x1100
    1330:	21c40802 	biccs	r0, r4, r2, lsl #16
    1334:	03055201 	movweq	r5, #20993	; 0x5201
    1338:	00009560 	andeq	r9, r0, r0, ror #10
    133c:	05510121 	ldrbeq	r0, [r1, #-289]	; 0x121
    1340:	0095a403 	addseq	sl, r5, r3, lsl #8
    1344:	50012100 	andpl	r2, r1, r0, lsl #2
    1348:	962c0305 	strtls	r0, [ip], -r5, lsl #6
    134c:	25000000 	strcs	r0, [r0, #-0]
    1350:	000086c8 	andeq	r8, r0, r8, asr #13
    1354:	00001161 	andeq	r1, r0, r1, ror #2
    1358:	0086d420 	addeq	sp, r6, r0, lsr #8
    135c:	000ed700 	andeq	sp, lr, r0, lsl #14
    1360:	51012100 	mrspl	r2, (UNDEF: 17)
    1364:	7bfc9103 	blvc	fff25778 <__bss_end__+0xfff1bc18>
    1368:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
    136c:	00000075 	andeq	r0, r0, r5, ror r0
    1370:	0000902b 	andeq	r9, r0, fp, lsr #32
    1374:	00101700 	andseq	r1, r0, r0, lsl #14
    1378:	00813100 	addeq	r3, r1, r0, lsl #2
    137c:	01cb0000 	biceq	r0, fp, r0
    1380:	00902b00 	addseq	r2, r0, r0, lsl #22
    1384:	10270000 	eorne	r0, r7, r0
    1388:	812c0000 	teqhi	ip, r0
    138c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1390:	10170700 	andsne	r0, r7, r0, lsl #14
    1394:	eb240000 	bl	90139c <__bss_end__+0x8f783c>
    1398:	01000002 	tsteq	r0, r2
    139c:	000025c9 	andeq	r2, r0, r9, asr #11
    13a0:	0086f800 	addeq	pc, r6, r0, lsl #16
    13a4:	00004800 	andeq	r4, r0, r0, lsl #16
    13a8:	009c0100 	addseq	r0, ip, r0, lsl #2
    13ac:	14000011 	strne	r0, [r0], #-17
    13b0:	c9010075 	stmdbgt	r1, {r0, r2, r4, r5, r6}
    13b4:	00000755 	andeq	r0, r0, r5, asr r7
    13b8:	00000ae2 	andeq	r0, r0, r2, ror #21
    13bc:	66756214 			; <UNDEFINED> instruction: 0x66756214
    13c0:	2cc90100 	stfcse	f0, [r9], {0}
    13c4:	0300000c 	movweq	r0, #12
    13c8:	1300000b 	movwne	r0, #11
    13cc:	000002bd 			; <UNDEFINED> instruction: 0x000002bd
    13d0:	0068c901 	rsbeq	ip, r8, r1, lsl #18
    13d4:	0b240000 	bleq	9013dc <__bss_end__+0x8f787c>
    13d8:	65140000 	ldrvs	r0, [r4, #-0]
    13dc:	0100646e 	tsteq	r0, lr, ror #8
    13e0:	00004fc9 	andeq	r4, r0, r9, asr #31
    13e4:	000b4500 	andeq	r4, fp, r0, lsl #10
    13e8:	65721600 	ldrbvs	r1, [r2, #-1536]!	; 0x600
    13ec:	ca010073 	bgt	415c0 <__bss_end__+0x37a60>
    13f0:	00000025 	andeq	r0, r0, r5, lsr #32
    13f4:	00000b66 	andeq	r0, r0, r6, ror #22
    13f8:	0000ec2a 	andeq	lr, r0, sl, lsr #24
    13fc:	00111000 	andseq	r1, r1, r0
    1400:	70030500 	andvc	r0, r3, r0, lsl #10
    1404:	26000095 			; <UNDEFINED> instruction: 0x26000095
    1408:	0000870c 	andeq	r8, r0, ip, lsl #14
    140c:	00000b51 	andeq	r0, r0, r1, asr fp
    1410:	000010c7 	andeq	r1, r0, r7, asr #1
    1414:	03520121 	cmpeq	r2, #1073741832	; 0x40000008
    1418:	215201f3 	ldrshcs	r0, [r2, #-19]	; 0xffffffed
    141c:	f3035101 	vrhadd.u8	d5, d3, d1
    1420:	01215101 	teqeq	r1, r1, lsl #2
    1424:	01f30350 	mvnseq	r0, r0, asr r3
    1428:	7d022150 	stfvcs	f2, [r2, #-320]	; 0xfffffec0
    142c:	ff090200 			; <UNDEFINED> instruction: 0xff090200
    1430:	87282600 	strhi	r2, [r8, -r0, lsl #12]!
    1434:	114b0000 	mrsne	r0, (UNDEF: 75)
    1438:	10f60000 	rscsne	r0, r6, r0
    143c:	01210000 	teqeq	r1, r0
    1440:	cc080253 	sfmgt	f0, 4, [r8], {83}	; 0x53
    1444:	05520121 	ldrbeq	r0, [r2, #-289]	; 0x121
    1448:	00957003 	addseq	r7, r5, r3
    144c:	51012100 	mrspl	r2, (UNDEF: 17)
    1450:	95a40305 	strls	r0, [r4, #773]!	; 0x305
    1454:	01210000 	teqeq	r1, r0
    1458:	f4030550 	vst3.16	{d0,d2,d4}, [r3 :64], r0
    145c:	00000095 	muleq	r0, r5, r0
    1460:	00872c25 	addeq	r2, r7, r5, lsr #24
    1464:	00116100 	andseq	r6, r1, r0, lsl #2
    1468:	902b0000 	eorls	r0, fp, r0
    146c:	10000000 	andne	r0, r0, r0
    1470:	2c000011 	stccs	0, cr0, [r0], {17}
    1474:	00000081 	andeq	r0, r0, r1, lsl #1
    1478:	00070016 	andeq	r0, r7, r6, lsl r0
    147c:	32000011 	andcc	r0, r0, #17
    1480:	000002c4 	andeq	r0, r0, r4, asr #5
    1484:	112b2106 	teqne	fp, r6, lsl #2
    1488:	2c330000 	ldccs	0, cr0, [r3], #-0
    148c:	33000000 	movwcc	r0, #0
    1490:	0000002c 	andeq	r0, r0, ip, lsr #32
    1494:	02aa3400 	adceq	r3, sl, #0, 8
    1498:	54070000 	strpl	r0, [r7], #-0
    149c:	0000002c 	andeq	r0, r0, ip, lsr #32
    14a0:	00026535 	andeq	r6, r2, r5, lsr r5
    14a4:	25240600 	strcs	r0, [r4, #-1536]!	; 0x600
    14a8:	4b000000 	blmi	14b0 <_start-0x6b50>
    14ac:	33000011 	movwcc	r0, #17
    14b0:	0000002c 	andeq	r0, r0, ip, lsr #32
    14b4:	025e3500 	subseq	r3, lr, #0, 10
    14b8:	27070000 	strcs	r0, [r7, -r0]
    14bc:	00000025 	andeq	r0, r0, r5, lsr #32
    14c0:	00001161 	andeq	r1, r0, r1, ror #2
    14c4:	00009733 	andeq	r9, r0, r3, lsr r7
    14c8:	36003000 	strcc	r3, [r0], -r0
    14cc:	000000c2 	andeq	r0, r0, r2, asr #1
    14d0:	07326307 	ldreq	r6, [r2, -r7, lsl #6]!
    14d4:	06000003 	streq	r0, [r0], -r3
    14d8:	0011791d 	andseq	r7, r1, sp, lsl r9
    14dc:	002c3300 	eoreq	r3, ip, r0, lsl #6
    14e0:	32000000 	andcc	r0, r0, #0
    14e4:	000002dc 	ldrdeq	r0, [r0], -ip
    14e8:	118a1c06 	orrne	r1, sl, r6, lsl #24
    14ec:	2c330000 	ldccs	0, cr0, [r3], #-0
    14f0:	00000000 	andeq	r0, r0, r0
    14f4:	00025b37 	andeq	r5, r2, r7, lsr fp
    14f8:	25020800 	strcs	r0, [r2, #-2048]	; 0x800
    14fc:	33000000 	movwcc	r0, #0
    1500:	0000008a 	andeq	r0, r0, sl, lsl #1
    1504:	00002533 	andeq	r2, r0, r3, lsr r5
    1508:	00973300 	addseq	r3, r7, r0, lsl #6
    150c:	06330000 	ldrteq	r0, [r3], -r0
    1510:	00000001 	andeq	r0, r0, r1
    1514:	00019100 	andeq	r9, r1, r0, lsl #2
    1518:	46000400 	strmi	r0, [r0], -r0, lsl #8
    151c:	04000004 	streq	r0, [r0], #-4
    1520:	00002901 	andeq	r2, r0, r1, lsl #18
    1524:	032c0100 	teqeq	ip, #0, 2
    1528:	033a0000 	teqeq	sl, #0
    152c:	87400000 	strbhi	r0, [r0, -r0]
    1530:	00580000 	subseq	r0, r8, r0
    1534:	04c70000 	strbeq	r0, [r7], #0
    1538:	81020000 	mrshi	r0, (UNDEF: 2)
    153c:	02000002 	andeq	r0, r0, #2
    1540:	00003028 	andeq	r3, r0, r8, lsr #32
    1544:	02070300 	andeq	r0, r7, #0, 6
    1548:	03040000 	movweq	r0, #16384	; 0x4000
    154c:	00004700 	andeq	r4, r0, r0, lsl #14
    1550:	03020400 	movweq	r0, #9216	; 0x2400
    1554:	00470000 	subeq	r0, r7, r0
    1558:	00000000 	andeq	r0, r0, r0
    155c:	09020405 	stmdbeq	r2, {r0, r2, sl}
    1560:	02000002 	andeq	r0, r0, #2
    1564:	00002562 	andeq	r2, r0, r2, ror #10
    1568:	05040600 	streq	r0, [r4, #-1536]	; 0x600
    156c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1570:	03070407 	movweq	r0, #29703	; 0x7407
    1574:	07000001 	streq	r0, [r0, -r1]
    1578:	00b60601 	adcseq	r0, r6, r1, lsl #12
    157c:	02070000 	andeq	r0, r7, #0
    1580:	00014805 	andeq	r4, r1, r5, lsl #16
    1584:	05040700 	streq	r0, [r4, #-1792]	; 0x700
    1588:	0000012b 	andeq	r0, r0, fp, lsr #2
    158c:	26050807 	strcs	r0, [r5], -r7, lsl #16
    1590:	07000001 	streq	r0, [r0, -r1]
    1594:	00b40801 	adcseq	r0, r4, r1, lsl #16
    1598:	02070000 	andeq	r0, r7, #0
    159c:	0000cf07 	andeq	ip, r0, r7, lsl #30
    15a0:	07040700 	streq	r0, [r4, -r0, lsl #14]
    15a4:	000000fe 	strdeq	r0, [r0], -lr
    15a8:	f9070807 			; <UNDEFINED> instruction: 0xf9070807
    15ac:	07000000 	streq	r0, [r0, -r0]
    15b0:	011d0704 	tsteq	sp, r4, lsl #14
    15b4:	04080000 	streq	r0, [r8], #-0
    15b8:	000000a7 	andeq	r0, r0, r7, lsr #1
    15bc:	bd080107 	stflts	f0, [r8, #-28]	; 0xffffffe4
    15c0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    15c4:	0000b404 	andeq	fp, r0, r4, lsl #8
    15c8:	00a70900 	adceq	r0, r7, r0, lsl #18
    15cc:	5e0a0000 	cdppl	0, 0, cr0, cr10, cr0, {0}
    15d0:	01000002 	tsteq	r0, r2
    15d4:	00005406 	andeq	r5, r0, r6, lsl #8
    15d8:	00874000 	addeq	r4, r7, r0
    15dc:	00005800 	andeq	r5, r0, r0, lsl #16
    15e0:	439c0100 	orrsmi	r0, ip, #0, 2
    15e4:	0b000001 	bleq	15f0 <_start-0x6a10>
    15e8:	00746d66 	rsbseq	r6, r4, r6, ror #26
    15ec:	00ae0601 	adceq	r0, lr, r1, lsl #12
    15f0:	91020000 	mrsls	r0, (UNDEF: 2)
    15f4:	620d0c70 	andvs	r0, sp, #112, 24	; 0x7000
    15f8:	01006675 	tsteq	r0, r5, ror r6
    15fc:	00014308 	andeq	r4, r1, r8, lsl #6
    1600:	60030500 	andvs	r0, r3, r0, lsl #10
    1604:	0e000097 	mcreq	0, 0, r0, cr0, cr7, {4}
    1608:	00000327 	andeq	r0, r0, r7, lsr #6
    160c:	00490901 	subeq	r0, r9, r1, lsl #18
    1610:	91020000 	mrsls	r0, (UNDEF: 2)
    1614:	7a730f5c 	bvc	1cc538c <__bss_end__+0x1cbb82c>
    1618:	540c0100 	strpl	r0, [ip], #-256	; 0x100
    161c:	84000000 	strhi	r0, [r0], #-0
    1620:	1000000b 	andne	r0, r0, fp
    1624:	00008768 	andeq	r8, r0, r8, ror #14
    1628:	00000174 	andeq	r0, r0, r4, ror r1
    162c:	00000136 	andeq	r0, r0, r6, lsr r1
    1630:	02530111 	subseq	r0, r3, #1073741828	; 0x40000004
    1634:	01114c91 			; <UNDEFINED> instruction: 0x01114c91
    1638:	48910352 	ldmmi	r1, {r1, r4, r6, r8, r9}
    163c:	51011106 	tstpl	r1, r6, lsl #2
    1640:	04000a03 	streq	r0, [r0], #-2563	; 0xa03
    1644:	02500111 	subseq	r0, r0, #1073741828	; 0x40000004
    1648:	12000074 	andne	r0, r0, #116	; 0x74
    164c:	0000877c 	andeq	r8, r0, ip, ror r7
    1650:	02500111 	subseq	r0, r0, #1073741828	; 0x40000004
    1654:	00000074 	andeq	r0, r0, r4, ror r0
    1658:	0000a713 	andeq	sl, r0, r3, lsl r7
    165c:	00015400 	andeq	r5, r1, r0, lsl #8
    1660:	009a1400 	addseq	r1, sl, r0, lsl #8
    1664:	03ff0000 	mvnseq	r0, #0
    1668:	00541500 	subseq	r1, r4, r0, lsl #10
    166c:	01630000 	cmneq	r3, r0
    1670:	ae160000 	cdpge	0, 1, cr0, cr6, cr0, {0}
    1674:	00000000 	andeq	r0, r0, r0
    1678:	00039317 	andeq	r9, r3, r7, lsl r3
    167c:	6e200400 	cdpvs	4, 2, cr0, cr0, cr0, {0}
    1680:	08000001 	stmdaeq	r0, {r0}
    1684:	00015404 	andeq	r5, r1, r4, lsl #8
    1688:	025b1800 	subseq	r1, fp, #0, 16
    168c:	02050000 	andeq	r0, r5, #0
    1690:	00000054 	andeq	r0, r0, r4, asr r0
    1694:	0000a116 	andeq	sl, r0, r6, lsl r1
    1698:	00541600 	subseq	r1, r4, r0, lsl #12
    169c:	ae160000 	cdpge	0, 1, cr0, cr6, cr0, {0}
    16a0:	16000000 	strne	r0, [r0], -r0
    16a4:	00000049 	andeq	r0, r0, r9, asr #32
    16a8:	00ee0000 	rsceq	r0, lr, r0
    16ac:	00040000 	andeq	r0, r4, r0
    16b0:	00000577 	andeq	r0, r0, r7, ror r5
    16b4:	00290104 	eoreq	r0, r9, r4, lsl #2
    16b8:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    16bc:	3a000003 	bcc	16d0 <_start-0x6930>
    16c0:	98000003 	stmdals	r0, {r0, r1}
    16c4:	34000087 	strcc	r0, [r0], #-135	; 0x87
    16c8:	cd000000 	stcgt	0, cr0, [r0, #-0]
    16cc:	02000005 	andeq	r0, r0, #5
    16d0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    16d4:	04030074 	streq	r0, [r3], #-116	; 0x74
    16d8:	00010307 	andeq	r0, r1, r7, lsl #6
    16dc:	06010300 	streq	r0, [r1], -r0, lsl #6
    16e0:	000000b6 	strheq	r0, [r0], -r6
    16e4:	48050203 	stmdami	r5, {r0, r1, r9}
    16e8:	03000001 	movweq	r0, #1
    16ec:	012b0504 	teqeq	fp, r4, lsl #10
    16f0:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    16f4:	00012605 	andeq	r2, r1, r5, lsl #12
    16f8:	08010300 	stmdaeq	r1, {r8, r9}
    16fc:	000000b4 	strheq	r0, [r0], -r4
    1700:	cf070203 	svcgt	0x00070203
    1704:	03000000 	movweq	r0, #0
    1708:	00fe0704 	rscseq	r0, lr, r4, lsl #14
    170c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1710:	0000f907 	andeq	pc, r0, r7, lsl #18
    1714:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1718:	0000011d 	andeq	r0, r0, sp, lsl r1
    171c:	bd080103 	stflts	f0, [r8, #-12]
    1720:	04000000 	streq	r0, [r0], #-0
    1724:	00007f04 	andeq	r7, r0, r4, lsl #30
    1728:	00720500 	rsbseq	r0, r2, r0, lsl #10
    172c:	8a060000 	bhi	181734 <__bss_end__+0x177bd4>
    1730:	01000003 	tsteq	r0, r3
    1734:	00002504 	andeq	r2, r0, r4, lsl #10
    1738:	00879800 	addeq	r9, r7, r0, lsl #16
    173c:	00003400 	andeq	r3, r0, r0, lsl #8
    1740:	ab9c0100 	blge	fe701b48 <__bss_end__+0xfe6f7fe8>
    1744:	07000000 	streq	r0, [r0, -r0]
    1748:	04010070 	streq	r0, [r1], #-112	; 0x70
    174c:	00000079 	andeq	r0, r0, r9, ror r0
    1750:	00000bad 	andeq	r0, r0, sp, lsr #23
    1754:	00250800 	eoreq	r0, r5, r0, lsl #16
    1758:	00ba0000 	adcseq	r0, sl, r0
    175c:	25090000 	strcs	r0, [r9, #-0]
    1760:	00000000 	andeq	r0, r0, r0
    1764:	0003980a 	andeq	r9, r3, sl, lsl #16
    1768:	c51d0200 	ldrgt	r0, [sp, #-512]	; 0x200
    176c:	04000000 	streq	r0, [r0], #-0
    1770:	0000ab04 	andeq	sl, r0, r4, lsl #22
    1774:	00250800 	eoreq	r0, r5, r0, lsl #16
    1778:	00da0000 	sbcseq	r0, sl, r0
    177c:	79090000 	stmdbvc	r9, {}	; <UNPREDICTABLE>
    1780:	00000000 	andeq	r0, r0, r0
    1784:	0003930b 	andeq	r9, r3, fp, lsl #6
    1788:	eb0c0100 	bl	301b90 <__bss_end__+0x2f8030>
    178c:	05000000 	streq	r0, [r0, #-0]
    1790:	0093dc03 	addseq	sp, r3, r3, lsl #24
    1794:	cb040400 	blgt	10279c <__bss_end__+0xf8c3c>
    1798:	00000000 	andeq	r0, r0, r0
    179c:	000000be 	strheq	r0, [r0], -lr
    17a0:	06100004 	ldreq	r0, [r0], -r4
    17a4:	01040000 	mrseq	r0, (UNDEF: 4)
    17a8:	00000029 	andeq	r0, r0, r9, lsr #32
    17ac:	0003a401 	andeq	sl, r3, r1, lsl #8
    17b0:	00033a00 	andeq	r3, r3, r0, lsl #20
    17b4:	0087cc00 	addeq	ip, r7, r0, lsl #24
    17b8:	00002000 	andeq	r2, r0, r0
    17bc:	00066700 	andeq	r6, r6, r0, lsl #14
    17c0:	06010200 	streq	r0, [r1], -r0, lsl #4
    17c4:	000000b6 	strheq	r0, [r0], -r6
    17c8:	b4080102 	strlt	r0, [r8], #-258	; 0x102
    17cc:	02000000 	andeq	r0, r0, #0
    17d0:	01480502 	cmpeq	r8, r2, lsl #10
    17d4:	02020000 	andeq	r0, r2, #0
    17d8:	0000cf07 	andeq	ip, r0, r7, lsl #30
    17dc:	05040300 	streq	r0, [r4, #-768]	; 0x300
    17e0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    17e4:	03070402 	movweq	r0, #29698	; 0x7402
    17e8:	02000001 	andeq	r0, r0, #1
    17ec:	01260508 	teqeq	r6, r8, lsl #10
    17f0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    17f4:	0000f907 	andeq	pc, r0, r7, lsl #18
    17f8:	05040200 	streq	r0, [r4, #-512]	; 0x200
    17fc:	0000012b 	andeq	r0, r0, fp, lsr #2
    1800:	1d070402 	cfstrsne	mvf0, [r7, #-8]
    1804:	02000001 	andeq	r0, r0, #1
    1808:	00fe0704 	rscseq	r0, lr, r4, lsl #14
    180c:	01020000 	mrseq	r0, (UNDEF: 2)
    1810:	0000bd08 	andeq	fp, r0, r8, lsl #26
    1814:	7f040400 	svcvc	0x00040400
    1818:	05000000 	streq	r0, [r0, #-0]
    181c:	00000072 	andeq	r0, r0, r2, ror r0
    1820:	00000e06 	andeq	r0, r0, r6, lsl #28
    1824:	48d40200 	ldmmi	r4, {r9}^
    1828:	07000000 	streq	r0, [r0, -r0]
    182c:	00000168 	andeq	r0, r0, r8, ror #2
    1830:	00842303 	addeq	r2, r4, r3, lsl #6
    1834:	87cc0000 	strbhi	r0, [ip, r0]
    1838:	00200000 	eoreq	r0, r0, r0
    183c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1840:	01007008 	tsteq	r0, r8
    1844:	00007903 	andeq	r7, r0, r3, lsl #18
    1848:	000bcb00 	andeq	ip, fp, r0, lsl #22
    184c:	65720900 	ldrbvs	r0, [r2, #-2304]!	; 0x900
    1850:	04010074 	streq	r0, [r1], #-116	; 0x74
    1854:	00000084 	andeq	r0, r0, r4, lsl #1
    1858:	00000bec 	andeq	r0, r0, ip, ror #23
    185c:	06540000 	ldrbeq	r0, [r4], -r0
    1860:	00040000 	andeq	r0, r4, r0
    1864:	0000068f 	andeq	r0, r0, pc, lsl #13
    1868:	00290104 	eoreq	r0, r9, r4, lsl #2
    186c:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    1870:	3a000003 	bcc	1884 <_start-0x677c>
    1874:	ec000003 	stc	0, cr0, [r0], {3}
    1878:	f0000087 			; <UNDEFINED> instruction: 0xf0000087
    187c:	5c000004 	stcpl	0, cr0, [r0], {4}
    1880:	02000007 	andeq	r0, r0, #7
    1884:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1888:	04030074 	streq	r0, [r3], #-116	; 0x74
    188c:	00010307 	andeq	r0, r1, r7, lsl #6
    1890:	06010300 	streq	r0, [r1], -r0, lsl #6
    1894:	000000b6 	strheq	r0, [r0], -r6
    1898:	48050203 	stmdami	r5, {r0, r1, r9}
    189c:	03000001 	movweq	r0, #1
    18a0:	012b0504 	teqeq	fp, r4, lsl #10
    18a4:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    18a8:	00012605 	andeq	r2, r1, r5, lsl #12
    18ac:	08010300 	stmdaeq	r1, {r8, r9}
    18b0:	000000b4 	strheq	r0, [r0], -r4
    18b4:	cf070203 	svcgt	0x00070203
    18b8:	03000000 	movweq	r0, #0
    18bc:	00fe0704 	rscseq	r0, lr, r4, lsl #14
    18c0:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    18c4:	0000f907 	andeq	pc, r0, r7, lsl #18
    18c8:	07040300 	streq	r0, [r4, -r0, lsl #6]
    18cc:	0000011d 	andeq	r0, r0, sp, lsl r1
    18d0:	04050404 	streq	r0, [r5], #-1028	; 0x404
    18d4:	0000007a 	andeq	r0, r0, sl, ror r0
    18d8:	bd080103 	stflts	f0, [r8, #-12]
    18dc:	05000000 	streq	r0, [r0, #-0]
    18e0:	00008704 	andeq	r8, r0, r4, lsl #14
    18e4:	007a0600 	rsbseq	r0, sl, r0, lsl #12
    18e8:	81070000 	mrshi	r0, (UNDEF: 7)
    18ec:	02000002 	andeq	r0, r0, #2
    18f0:	00009728 	andeq	r9, r0, r8, lsr #14
    18f4:	02070800 	andeq	r0, r7, #0, 16
    18f8:	04040000 	streq	r0, [r4], #-0
    18fc:	0000ae00 	andeq	sl, r0, r0, lsl #28
    1900:	03020900 	movweq	r0, #10496	; 0x2900
    1904:	00720000 	rsbseq	r0, r2, r0
    1908:	00000000 	andeq	r0, r0, r0
    190c:	00020907 	andeq	r0, r2, r7, lsl #18
    1910:	8c620200 	sfmhi	f0, 2, [r2], #-0
    1914:	0a000000 	beq	191c <_start-0x66e4>
    1918:	000003c0 	andeq	r0, r0, r0, asr #7
    191c:	00252701 	eoreq	r2, r5, r1, lsl #14
    1920:	87ec0000 	strbhi	r0, [ip, r0]!
    1924:	00140000 	andseq	r0, r4, r0
    1928:	9c010000 	stcls	0, cr0, [r1], {-0}
    192c:	000000e0 	andeq	r0, r0, r0, ror #1
    1930:	0100630b 	tsteq	r0, fp, lsl #6
    1934:	00002527 	andeq	r2, r0, r7, lsr #10
    1938:	000c0b00 	andeq	r0, ip, r0, lsl #22
    193c:	700c0000 	andvc	r0, ip, r0
    1940:	01006461 	tsteq	r0, r1, ror #8
    1944:	0000742e 	andeq	r7, r0, lr, lsr #8
    1948:	00880000 	addeq	r0, r8, r0
    194c:	00002c00 	andeq	r2, r0, r0, lsl #24
    1950:	309c0100 	addscc	r0, ip, r0, lsl #2
    1954:	0b000001 	bleq	1960 <_start-0x66a0>
    1958:	2e010070 	mcrcs	0, 0, r0, cr1, cr0, {3}
    195c:	00000074 	andeq	r0, r0, r4, ror r0
    1960:	00000c39 	andeq	r0, r0, r9, lsr ip
    1964:	0003d00d 	andeq	sp, r3, sp
    1968:	742e0100 	strtvc	r0, [lr], #-256	; 0x100
    196c:	64000000 	strvs	r0, [r0], #-0
    1970:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
    1974:	000003fe 	strdeq	r0, [r0], -lr
    1978:	00252e01 	eoreq	r2, r5, r1, lsl #28
    197c:	52010000 	andpl	r0, r1, #0
    1980:	6e656c0f 	cdpvs	12, 6, cr6, cr5, cr15, {0}
    1984:	252f0100 	strcs	r0, [pc, #-256]!	; 188c <_start-0x6774>
    1988:	01000000 	mrseq	r0, (UNDEF: 0)
    198c:	b80a0051 	stmdalt	sl, {r0, r4, r6}
    1990:	01000003 	tsteq	r0, r3
    1994:	00007437 	andeq	r7, r0, r7, lsr r4
    1998:	00882c00 	addeq	r2, r8, r0, lsl #24
    199c:	00004000 	andeq	r4, r0, r0
    19a0:	9c9c0100 	ldflss	f0, [ip], {0}
    19a4:	0b000001 	bleq	19b0 <_start-0x6650>
    19a8:	00747364 	rsbseq	r7, r4, r4, ror #6
    19ac:	00743701 	rsbseq	r3, r4, r1, lsl #14
    19b0:	0c850000 	stceq	0, cr0, [r5], {0}
    19b4:	6e0b0000 	cdpvs	0, 0, cr0, cr11, cr0, {0}
    19b8:	25370100 	ldrcs	r0, [r7, #-256]!	; 0x100
    19bc:	bd000000 	stclt	0, cr0, [r0, #-0]
    19c0:	0b00000c 	bleq	19f8 <_start-0x6608>
    19c4:	37010070 	smlsdxcc	r1, r0, r0, r0
    19c8:	00000074 	andeq	r0, r0, r4, ror r0
    19cc:	00000cde 	ldrdeq	r0, [r0], -lr
    19d0:	0004980d 	andeq	r9, r4, sp, lsl #16
    19d4:	74370100 	ldrtvc	r0, [r7], #-256	; 0x100
    19d8:	14000000 	strne	r0, [r0], #-0
    19dc:	1000000d 	andne	r0, r0, sp
    19e0:	006e656c 	rsbeq	r6, lr, ip, ror #10
    19e4:	00253901 	eoreq	r3, r5, r1, lsl #18
    19e8:	0d320000 	ldceq	0, cr0, [r2, #-0]
    19ec:	730f0000 	movwvc	r0, #61440	; 0xf000
    19f0:	743d0100 	ldrtvc	r0, [sp], #-256	; 0x100
    19f4:	01000000 	mrseq	r0, (UNDEF: 0)
    19f8:	0c0a0050 	stceq	0, cr0, [sl], {80}	; 0x50
    19fc:	01000004 	tsteq	r0, r4
    1a00:	00007447 	andeq	r7, r0, r7, asr #8
    1a04:	00886c00 	addeq	r6, r8, r0, lsl #24
    1a08:	00019800 	andeq	r9, r1, r0, lsl #16
    1a0c:	ca9c0100 	bgt	fe701e14 <__bss_end__+0xfe6f82b4>
    1a10:	0d000002 	stceq	0, cr0, [r0, #-8]
    1a14:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1a18:	002c4701 	eoreq	r4, ip, r1, lsl #14
    1a1c:	0d590000 	ldcleq	0, cr0, [r9, #-0]
    1a20:	640b0000 	strvs	r0, [fp], #-0
    1a24:	01007473 	tsteq	r0, r3, ror r4
    1a28:	00007447 	andeq	r7, r0, r7, asr #8
    1a2c:	000d8700 	andeq	r8, sp, r0, lsl #14
    1a30:	006e0b00 	rsbeq	r0, lr, r0, lsl #22
    1a34:	00254701 	eoreq	r4, r5, r1, lsl #14
    1a38:	0df50000 	ldcleq	0, cr0, [r5]
    1a3c:	760b0000 	strvc	r0, [fp], -r0
    1a40:	01006c61 	tsteq	r0, r1, ror #24
    1a44:	00002547 	andeq	r2, r0, r7, asr #10
    1a48:	000e2100 	andeq	r2, lr, r0, lsl #2
    1a4c:	03fe0d00 	mvnseq	r0, #0, 26
    1a50:	47010000 	strmi	r0, [r1, -r0]
    1a54:	00000025 	andeq	r0, r0, r5, lsr #32
    1a58:	00000eab 	andeq	r0, r0, fp, lsr #29
    1a5c:	0003d50e 	andeq	sp, r3, lr, lsl #10
    1a60:	25470100 	strbcs	r0, [r7, #-256]	; 0x100
    1a64:	02000000 	andeq	r0, r0, #0
    1a68:	620f0491 	andvs	r0, pc, #-1862270976	; 0x91000000
    1a6c:	01006675 	tsteq	r0, r5, ror r6
    1a70:	0002ca4c 	andeq	ip, r2, ip, asr #20
    1a74:	a8910300 	ldmge	r1, {r8, r9}
    1a78:	0070107f 	rsbseq	r1, r0, pc, ror r0
    1a7c:	00744c01 	rsbseq	r4, r4, r1, lsl #24
    1a80:	0ed50000 	cdpeq	0, 13, cr0, cr5, cr0, {0}
    1a84:	75100000 	ldrvc	r0, [r0, #-0]
    1a88:	2c4d0100 	stfcse	f0, [sp], {-0}
    1a8c:	7a000000 	bvc	1a94 <_start-0x656c>
    1a90:	1100000f 	tstne	r0, pc
    1a94:	000000ec 	andeq	r0, r0, ip, ror #1
    1a98:	000002ea 	andeq	r0, r0, sl, ror #5
    1a9c:	96500305 	ldrbls	r0, [r0], -r5, lsl #6
    1aa0:	d8120000 	ldmdale	r2, {}	; <UNPREDICTABLE>
    1aa4:	74000088 	strvc	r0, [r0], #-136	; 0x88
    1aa8:	61000000 	mrsvs	r0, (UNDEF: 0)
    1aac:	13000002 	movwne	r0, #2
    1ab0:	000003b2 			; <UNDEFINED> instruction: 0x000003b2
    1ab4:	002c5201 	eoreq	r5, ip, r1, lsl #4
    1ab8:	108a0000 	addne	r0, sl, r0
    1abc:	14000000 	strne	r0, [r0], #-0
    1ac0:	000089bc 			; <UNDEFINED> instruction: 0x000089bc
    1ac4:	0000063a 	andeq	r0, r0, sl, lsr r6
    1ac8:	00000290 	muleq	r0, r0, r2
    1acc:	02530115 	subseq	r0, r3, #1073741829	; 0x40000005
    1ad0:	01157508 	tsteq	r5, r8, lsl #10
    1ad4:	50030552 	andpl	r0, r3, r2, asr r5
    1ad8:	15000096 	strne	r0, [r0, #-150]	; 0x96
    1adc:	03055101 	movweq	r5, #20737	; 0x5101
    1ae0:	00009688 	andeq	r9, r0, r8, lsl #13
    1ae4:	05500115 	ldrbeq	r0, [r0, #-277]	; 0x115
    1ae8:	00967403 	addseq	r7, r6, r3, lsl #8
    1aec:	c0160000 	andsgt	r0, r6, r0
    1af0:	50000089 	andpl	r0, r0, r9, lsl #1
    1af4:	14000006 	strne	r0, [r0], #-6
    1af8:	000089cc 	andeq	r8, r0, ip, asr #19
    1afc:	000000e0 	andeq	r0, r0, r0, ror #1
    1b00:	000002ad 	andeq	r0, r0, sp, lsr #5
    1b04:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    1b08:	1700007d 	smlsdxne	r0, sp, r0, r0
    1b0c:	000089e0 	andeq	r8, r0, r0, ror #19
    1b10:	00000130 	andeq	r0, r0, r0, lsr r1
    1b14:	02530115 	subseq	r0, r3, #1073741829	; 0x40000005
    1b18:	0115007d 	tsteq	r5, sp, ror r0
    1b1c:	00740251 	rsbseq	r0, r4, r1, asr r2
    1b20:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    1b24:	00000075 	andeq	r0, r0, r5, ror r0
    1b28:	00007a18 	andeq	r7, r0, r8, lsl sl
    1b2c:	0002da00 	andeq	sp, r2, r0, lsl #20
    1b30:	006b1900 	rsbeq	r1, fp, r0, lsl #18
    1b34:	003f0000 	eorseq	r0, pc, r0
    1b38:	00007a18 	andeq	r7, r0, r8, lsl sl
    1b3c:	0002ea00 	andeq	lr, r2, r0, lsl #20
    1b40:	006b1900 	rsbeq	r1, fp, r0, lsl #18
    1b44:	00040000 	andeq	r0, r4, r0
    1b48:	0002da06 	andeq	sp, r2, r6, lsl #20
    1b4c:	03ef1a00 	mvneq	r1, #0, 20
    1b50:	1f010000 	svcne	0x00010000
    1b54:	00008a04 	andeq	r8, r0, r4, lsl #20
    1b58:	00000050 	andeq	r0, r0, r0, asr r0
    1b5c:	036a9c01 	cmneq	sl, #256	; 0x100
    1b60:	040d0000 	streq	r0, [sp], #-0
    1b64:	01000004 	tsteq	r0, r4
    1b68:	0003791f 	andeq	r7, r3, pc, lsl r9
    1b6c:	0010b600 	andseq	fp, r0, r0, lsl #12
    1b70:	03c80d00 	biceq	r0, r8, #0, 26
    1b74:	1f010000 	svcne	0x00010000
    1b78:	0000038e 	andeq	r0, r0, lr, lsl #7
    1b7c:	000010e2 	andeq	r1, r0, r2, ror #1
    1b80:	0000ec11 	andeq	lr, r0, r1, lsl ip
    1b84:	0003a400 	andeq	sl, r3, r0, lsl #8
    1b88:	58030500 	stmdapl	r3, {r8, sl}
    1b8c:	14000096 	strne	r0, [r0], #-150	; 0x96
    1b90:	00008a24 	andeq	r8, r0, r4, lsr #20
    1b94:	0000063a 	andeq	r0, r0, sl, lsr r6
    1b98:	00000360 	andeq	r0, r0, r0, ror #6
    1b9c:	02530115 	subseq	r0, r3, #1073741829	; 0x40000005
    1ba0:	01152008 	tsteq	r5, r8
    1ba4:	58030552 	stmdapl	r3, {r1, r4, r6, r8, sl}
    1ba8:	15000096 	strne	r0, [r0, #-150]	; 0x96
    1bac:	03055101 	movweq	r5, #20737	; 0x5101
    1bb0:	00009688 	andeq	r9, r0, r8, lsl #13
    1bb4:	05500115 	ldrbeq	r0, [r0, #-277]	; 0x115
    1bb8:	0096c003 	addseq	ip, r6, r3
    1bbc:	28160000 	ldmdacs	r6, {}	; <UNPREDICTABLE>
    1bc0:	5000008a 	andpl	r0, r0, sl, lsl #1
    1bc4:	00000006 	andeq	r0, r0, r6
    1bc8:	0000251b 	andeq	r2, r0, fp, lsl r5
    1bcc:	00037900 	andeq	r7, r3, r0, lsl #18
    1bd0:	00251c00 	eoreq	r1, r5, r0, lsl #24
    1bd4:	05000000 	streq	r0, [r0, #-0]
    1bd8:	00036a04 	andeq	r6, r3, r4, lsl #20
    1bdc:	00251b00 	eoreq	r1, r5, r0, lsl #22
    1be0:	038e0000 	orreq	r0, lr, #0
    1be4:	811c0000 	tsthi	ip, r0
    1be8:	00000000 	andeq	r0, r0, r0
    1bec:	037f0405 	cmneq	pc, #83886080	; 0x5000000
    1bf0:	7a180000 	bvc	601bf8 <__bss_end__+0x5f8098>
    1bf4:	a4000000 	strge	r0, [r0], #-0
    1bf8:	19000003 	stmdbne	r0, {r0, r1}
    1bfc:	0000006b 	andeq	r0, r0, fp, rrx
    1c00:	9406000e 	strls	r0, [r6], #-14
    1c04:	1d000003 	stcne	0, cr0, [r0, #-12]
    1c08:	0000025b 	andeq	r0, r0, fp, asr r2
    1c0c:	00257d01 	eoreq	r7, r5, r1, lsl #26
    1c10:	8a540000 	bhi	1501c18 <__bss_end__+0x14f80b8>
    1c14:	02880000 	addeq	r0, r8, #0
    1c18:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c1c:	000005ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1c20:	6675620b 	ldrbtvs	r6, [r5], -fp, lsl #4
    1c24:	747d0100 	ldrbtvc	r0, [sp], #-256	; 0x100
    1c28:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1c2c:	0b000011 	bleq	1c78 <_start-0x6388>
    1c30:	7d01006e 	stcvc	0, cr0, [r1, #-440]	; 0xfffffe48
    1c34:	00000025 	andeq	r0, r0, r5, lsr #32
    1c38:	0000113a 	andeq	r1, r0, sl, lsr r1
    1c3c:	746d660b 	strbtvc	r6, [sp], #-1547	; 0x60b
    1c40:	817d0100 	cmnhi	sp, r0, lsl #2
    1c44:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    1c48:	0d000011 	stceq	0, cr0, [r0, #-68]	; 0xffffffbc
    1c4c:	00000327 	andeq	r0, r0, r7, lsr #6
    1c50:	00ae7d01 	adceq	r7, lr, r1, lsl #26
    1c54:	119c0000 	orrsne	r0, ip, r0
    1c58:	70100000 	andsvc	r0, r0, r0
    1c5c:	747e0100 	ldrbtvc	r0, [lr], #-256	; 0x100
    1c60:	af000000 	svcge	0x00000000
    1c64:	10000011 	andne	r0, r0, r1, lsl r0
    1c68:	7e010065 	cdpvc	0, 0, cr0, cr1, cr5, {3}
    1c6c:	00000074 	andeq	r0, r0, r4, ror r0
    1c70:	0000122d 	andeq	r1, r0, sp, lsr #4
    1c74:	0000ec11 	andeq	lr, r0, r1, lsl ip
    1c78:	00060f00 	andeq	r0, r6, r0, lsl #30
    1c7c:	68030500 	stmdavs	r3, {r8, sl}
    1c80:	1e000096 	mcrne	0, 0, r0, cr0, cr6, {4}
    1c84:	00008aa8 	andeq	r8, r0, r8, lsr #21
    1c88:	000001f4 	strdeq	r0, [r0], -r4
    1c8c:	01007310 	tsteq	r0, r0, lsl r3
    1c90:	0000748b 	andeq	r7, r0, fp, lsl #9
    1c94:	00125400 	andseq	r5, r2, r0, lsl #8
    1c98:	756e0f00 	strbvc	r0, [lr, #-3840]!	; 0xf00
    1c9c:	8b01006d 	blhi	41e58 <__bss_end__+0x382f8>
    1ca0:	00000614 	andeq	r0, r0, r4, lsl r6
    1ca4:	7ed89103 	atnvce	f1, f3
    1ca8:	0003fe13 	andeq	pc, r3, r3, lsl lr	; <UNPREDICTABLE>
    1cac:	2c8c0100 	stfcss	f0, [ip], {0}
    1cb0:	a9000000 	stmdbge	r0, {}	; <UNPREDICTABLE>
    1cb4:	14000012 	strne	r0, [r0], #-18
    1cb8:	00008ad8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    1cbc:	000000b9 	strheq	r0, [r0], -r9
    1cc0:	0000046d 	andeq	r0, r0, sp, ror #8
    1cc4:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    1cc8:	14000075 	strne	r0, [r0], #-117	; 0x75
    1ccc:	00008afc 	strdeq	r8, [r0], -ip
    1cd0:	0000063a 	andeq	r0, r0, sl, lsr r6
    1cd4:	0000049c 	muleq	r0, ip, r4
    1cd8:	02530115 	subseq	r0, r3, #1073741829	; 0x40000005
    1cdc:	01159208 	tsteq	r5, r8, lsl #4
    1ce0:	68030552 	stmdavs	r3, {r1, r4, r6, r8, sl}
    1ce4:	15000096 	strne	r0, [r0, #-150]	; 0x96
    1ce8:	03055101 	movweq	r5, #20737	; 0x5101
    1cec:	00009688 	andeq	r9, r0, r8, lsl #13
    1cf0:	05500115 	ldrbeq	r0, [r0, #-277]	; 0x115
    1cf4:	0096d803 	addseq	sp, r6, r3, lsl #16
    1cf8:	00160000 	andseq	r0, r6, r0
    1cfc:	5000008b 	andpl	r0, r0, fp, lsl #1
    1d00:	14000006 	strne	r0, [r0], #-6
    1d04:	00008b80 	andeq	r8, r0, r0, lsl #23
    1d08:	0000063a 	andeq	r0, r0, sl, lsr r6
    1d0c:	000004d4 	ldrdeq	r0, [r0], -r4
    1d10:	02530115 	subseq	r0, r3, #1073741829	; 0x40000005
    1d14:	01159808 	tsteq	r5, r8, lsl #16
    1d18:	68030552 	stmdavs	r3, {r1, r4, r6, r8, sl}
    1d1c:	15000096 	strne	r0, [r0, #-150]	; 0x96
    1d20:	03055101 	movweq	r5, #20737	; 0x5101
    1d24:	00009688 	andeq	r9, r0, r8, lsl #13
    1d28:	05500115 	ldrbeq	r0, [r0, #-277]	; 0x115
    1d2c:	0096f403 	addseq	pc, r6, r3, lsl #8
    1d30:	84160000 	ldrhi	r0, [r6], #-0
    1d34:	5000008b 	andpl	r0, r0, fp, lsl #1
    1d38:	14000006 	strne	r0, [r0], #-6
    1d3c:	00008ba8 	andeq	r8, r0, r8, lsr #23
    1d40:	0000019c 	muleq	r0, ip, r1
    1d44:	0000050a 	andeq	r0, r0, sl, lsl #10
    1d48:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    1d4c:	01158008 	tsteq	r5, r8
    1d50:	d0910351 	addsle	r0, r1, r1, asr r3
    1d54:	5001157e 	andpl	r1, r1, lr, ror r5
    1d58:	02153a01 	andseq	r3, r5, #4096	; 0x1000
    1d5c:	3101047d 	tstcc	r1, sp, ror r4
    1d60:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    1d64:	00007702 	andeq	r7, r0, r2, lsl #14
    1d68:	008bd014 	addeq	sp, fp, r4, lsl r0
    1d6c:	00019c00 	andeq	r9, r1, r0, lsl #24
    1d70:	00053700 	andeq	r3, r5, r0, lsl #14
    1d74:	52011500 	andpl	r1, r1, #0, 10
    1d78:	15800802 	strne	r0, [r0, #2050]	; 0x802
    1d7c:	91035101 	tstls	r3, r1, lsl #2
    1d80:	01157ed0 			; <UNDEFINED> instruction: 0x01157ed0
    1d84:	153a0150 	ldrne	r0, [sl, #-336]!	; 0x150
    1d88:	01047d02 	tsteq	r4, r2, lsl #26
    1d8c:	7d021530 	cfstr32vc	mvfx1, [r2, #-192]	; 0xffffff40
    1d90:	00770200 	rsbseq	r0, r7, r0, lsl #4
    1d94:	8bf81400 	blhi	ffe06d9c <__bss_end__+0xffdfd23c>
    1d98:	019c0000 	orrseq	r0, ip, r0
    1d9c:	05640000 	strbeq	r0, [r4, #-0]!
    1da0:	01150000 	tsteq	r5, r0
    1da4:	80080252 	andhi	r0, r8, r2, asr r2
    1da8:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    1dac:	157ed091 	ldrbne	sp, [lr, #-145]!	; 0x91
    1db0:	40015001 	andmi	r5, r1, r1
    1db4:	047d0215 	ldrbteq	r0, [sp], #-533	; 0x215
    1db8:	02153001 	andseq	r3, r5, #1
    1dbc:	7702007d 	smlsdxvc	r2, sp, r0, r0
    1dc0:	20140000 	andscs	r0, r4, r0
    1dc4:	9c00008c 	stcls	0, cr0, [r0], {140}	; 0x8c
    1dc8:	91000001 	tstls	r0, r1
    1dcc:	15000005 	strne	r0, [r0, #-5]
    1dd0:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    1dd4:	51011580 	smlabbpl	r1, r0, r5, r1
    1dd8:	7ed09103 	atnvcs	f1, f3
    1ddc:	01500115 	cmpeq	r0, r5, lsl r1
    1de0:	7d021532 	cfstr32vc	mvfx1, [r2, #-200]	; 0xffffff38
    1de4:	15300104 	ldrne	r0, [r0, #-260]!	; 0x104
    1de8:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    1dec:	14000077 	strne	r0, [r0], #-119	; 0x77
    1df0:	00008c54 	andeq	r8, r0, r4, asr ip
    1df4:	0000019c 	muleq	r0, ip, r1
    1df8:	000005be 			; <UNDEFINED> instruction: 0x000005be
    1dfc:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    1e00:	01158008 	tsteq	r5, r8
    1e04:	d0910351 	addsle	r0, r1, r1, asr r3
    1e08:	5001157e 	andpl	r1, r1, lr, ror r5
    1e0c:	02153801 	andseq	r3, r5, #65536	; 0x10000
    1e10:	3001047d 	andcc	r0, r1, sp, ror r4
    1e14:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    1e18:	00007702 	andeq	r7, r0, r2, lsl #14
    1e1c:	008c7014 	addeq	r7, ip, r4, lsl r0
    1e20:	00063a00 	andeq	r3, r6, r0, lsl #20
    1e24:	0005f400 	andeq	pc, r5, r0, lsl #8
    1e28:	53011500 	movwpl	r1, #5376	; 0x1500
    1e2c:	15b90802 	ldrne	r0, [r9, #2050]!	; 0x802
    1e30:	03055201 	movweq	r5, #20993	; 0x5201
    1e34:	00009668 	andeq	r9, r0, r8, ror #12
    1e38:	05510115 	ldrbeq	r0, [r1, #-277]	; 0x115
    1e3c:	00968803 	addseq	r8, r6, r3, lsl #16
    1e40:	50011500 	andpl	r1, r1, r0, lsl #10
    1e44:	971c0305 	ldrls	r0, [ip, -r5, lsl #6]
    1e48:	02150000 	andseq	r0, r5, #0
    1e4c:	7902007d 	stmdbvc	r2, {r0, r2, r3, r4, r5, r6}
    1e50:	74160000 	ldrvc	r0, [r6], #-0
    1e54:	5000008c 	andpl	r0, r0, ip, lsl #1
    1e58:	00000006 	andeq	r0, r0, r6
    1e5c:	007a1800 	rsbseq	r1, sl, r0, lsl #16
    1e60:	060f0000 	streq	r0, [pc], -r0
    1e64:	6b190000 	blvs	641e6c <__bss_end__+0x63830c>
    1e68:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1e6c:	05ff0600 	ldrbeq	r0, [pc, #1536]!	; 2474 <_start-0x5b8c>
    1e70:	7a180000 	bvc	601e78 <__bss_end__+0x5f8318>
    1e74:	24000000 	strcs	r0, [r0], #-0
    1e78:	19000006 	stmdbne	r0, {r1, r2}
    1e7c:	0000006b 	andeq	r0, r0, fp, rrx
    1e80:	981f007f 	ldmdals	pc, {r0, r1, r2, r3, r4, r5, r6}	; <UNPREDICTABLE>
    1e84:	03000003 	movweq	r0, #3
    1e88:	0003791d 	andeq	r7, r3, sp, lsl r9
    1e8c:	03931f00 	orrseq	r1, r3, #0, 30
    1e90:	20030000 	andcs	r0, r3, r0
    1e94:	0000038e 	andeq	r0, r0, lr, lsl #7
    1e98:	00025e20 	andeq	r5, r2, r0, lsr #28
    1e9c:	25270300 	strcs	r0, [r7, #-768]!	; 0x300
    1ea0:	50000000 	andpl	r0, r0, r0
    1ea4:	1c000006 	stcne	0, cr0, [r0], {6}
    1ea8:	00000081 	andeq	r0, r0, r1, lsl #1
    1eac:	c2220021 	eorgt	r0, r2, #33	; 0x21
    1eb0:	03000000 	movweq	r0, #0
    1eb4:	00b80063 	adcseq	r0, r8, r3, rrx
    1eb8:	00040000 	andeq	r0, r4, r0
    1ebc:	0000086d 	andeq	r0, r0, sp, ror #16
    1ec0:	00290104 	eoreq	r0, r9, r4, lsl #2
    1ec4:	1f010000 	svcne	0x00010000
    1ec8:	3a000004 	bcc	1ee0 <_start-0x6120>
    1ecc:	dc000003 	stcle	0, cr0, [r0], {3}
    1ed0:	2000008c 	andcs	r0, r0, ip, lsl #1
    1ed4:	3c000000 	stccc	0, cr0, [r0], {-0}
    1ed8:	02000009 	andeq	r0, r0, #9
    1edc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1ee0:	04030074 	streq	r0, [r3], #-116	; 0x74
    1ee4:	00010307 	andeq	r0, r1, r7, lsl #6
    1ee8:	06010300 	streq	r0, [r1], -r0, lsl #6
    1eec:	000000b6 	strheq	r0, [r0], -r6
    1ef0:	48050203 	stmdami	r5, {r0, r1, r9}
    1ef4:	03000001 	movweq	r0, #1
    1ef8:	012b0504 	teqeq	fp, r4, lsl #10
    1efc:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1f00:	00012605 	andeq	r2, r1, r5, lsl #12
    1f04:	08010300 	stmdaeq	r1, {r8, r9}
    1f08:	000000b4 	strheq	r0, [r0], -r4
    1f0c:	cf070203 	svcgt	0x00070203
    1f10:	03000000 	movweq	r0, #0
    1f14:	00fe0704 	rscseq	r0, lr, r4, lsl #14
    1f18:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1f1c:	0000f907 	andeq	pc, r0, r7, lsl #18
    1f20:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1f24:	0000011d 	andeq	r0, r0, sp, lsl r1
    1f28:	bd080103 	stflts	f0, [r8, #-12]
    1f2c:	04000000 	streq	r0, [r0], #-0
    1f30:	00000152 	andeq	r0, r0, r2, asr r1
    1f34:	8cdc0301 	ldclhi	3, cr0, [ip], {1}
    1f38:	00100000 	andseq	r0, r0, r0
    1f3c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f40:	0000009c 	muleq	r0, ip, r0
    1f44:	01007205 	tsteq	r0, r5, lsl #4
    1f48:	00002c04 	andeq	r2, r0, r4, lsl #24
    1f4c:	0012d300 	andseq	sp, r2, r0, lsl #6
    1f50:	11060000 	mrsne	r0, (UNDEF: 6)
    1f54:	01000004 	tsteq	r0, r4
    1f58:	008cec0c 	addeq	lr, ip, ip, lsl #24
    1f5c:	00001000 	andeq	r1, r0, r0
    1f60:	059c0100 	ldreq	r0, [ip, #256]	; 0x100
    1f64:	0d010072 	stceq	0, cr0, [r1, #-456]	; 0xfffffe38
    1f68:	0000002c 	andeq	r0, r0, ip, lsr #32
    1f6c:	000012f7 	strdeq	r1, [r0], -r7
    1f70:	00ff0000 	rscseq	r0, pc, r0
    1f74:	00040000 	andeq	r0, r4, r0
    1f78:	000008d8 	ldrdeq	r0, [r0], -r8
    1f7c:	00290104 	eoreq	r0, r9, r4, lsl #2
    1f80:	3d010000 	stccc	0, cr0, [r1, #-0]
    1f84:	3a000004 	bcc	1f9c <_start-0x6064>
    1f88:	fc000003 	stc2	0, cr0, [r0], {3}
    1f8c:	2800008c 	stmdacs	r0, {r2, r3, r7}
    1f90:	83000000 	movwhi	r0, #0
    1f94:	02000009 	andeq	r0, r0, #9
    1f98:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1f9c:	04030074 	streq	r0, [r3], #-116	; 0x74
    1fa0:	00010307 	andeq	r0, r1, r7, lsl #6
    1fa4:	06010300 	streq	r0, [r1], -r0, lsl #6
    1fa8:	000000b6 	strheq	r0, [r0], -r6
    1fac:	48050203 	stmdami	r5, {r0, r1, r9}
    1fb0:	03000001 	movweq	r0, #1
    1fb4:	012b0504 	teqeq	fp, r4, lsl #10
    1fb8:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1fbc:	00012605 	andeq	r2, r1, r5, lsl #12
    1fc0:	08010300 	stmdaeq	r1, {r8, r9}
    1fc4:	000000b4 	strheq	r0, [r0], -r4
    1fc8:	cf070203 	svcgt	0x00070203
    1fcc:	03000000 	movweq	r0, #0
    1fd0:	00fe0704 	rscseq	r0, lr, r4, lsl #14
    1fd4:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1fd8:	0000f907 	andeq	pc, r0, r7, lsl #18
    1fdc:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1fe0:	0000011d 	andeq	r0, r0, sp, lsl r1
    1fe4:	bd080103 	stflts	f0, [r8, #-12]
    1fe8:	04000000 	streq	r0, [r0], #-0
    1fec:	00007f04 	andeq	r7, r0, r4, lsl #30
    1ff0:	00720500 	rsbseq	r0, r2, r0, lsl #10
    1ff4:	c2060000 	andgt	r0, r6, #0
    1ff8:	01000000 	mrseq	r0, (UNDEF: 0)
    1ffc:	008cfc04 	addeq	pc, ip, r4, lsl #24
    2000:	00002800 	andeq	r2, r0, r0, lsl #16
    2004:	ca9c0100 	bgt	fe70240c <__bss_end__+0xfe6f88ac>
    2008:	07000000 	streq	r0, [r0, -r0]
    200c:	00008d10 	andeq	r8, r0, r0, lsl sp
    2010:	000000ac 	andeq	r0, r0, ip, lsr #1
    2014:	05500108 	ldrbeq	r0, [r0, #-264]	; 0x108
    2018:	00975403 	addseq	r5, r7, r3, lsl #8
    201c:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
    2020:	ea00008d 	b	225c <_start-0x5da4>
    2024:	c0000000 	andgt	r0, r0, r0
    2028:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    202c:	08025001 	stmdaeq	r2, {r0, ip, lr}
    2030:	1c0a0064 	stcne	0, cr0, [sl], {100}	; 0x64
    2034:	fb00008d 	blx	2272 <_start-0x5d8e>
    2038:	00000000 	andeq	r0, r0, r0
    203c:	0000250b 	andeq	r2, r0, fp, lsl #10
    2040:	0000d900 	andeq	sp, r0, r0, lsl #18
    2044:	00790c00 	rsbseq	r0, r9, r0, lsl #24
    2048:	0d000000 	stceq	0, cr0, [r0, #-0]
    204c:	00000393 	muleq	r0, r3, r3
    2050:	00e42002 	rsceq	r2, r4, r2
    2054:	04040000 	streq	r0, [r4], #-0
    2058:	000000ca 	andeq	r0, r0, sl, asr #1
    205c:	0004570e 	andeq	r5, r4, lr, lsl #14
    2060:	fb4d0200 	blx	134286a <__bss_end__+0x1338d0a>
    2064:	0c000000 	stceq	0, cr0, [r0], {-0}
    2068:	0000002c 	andeq	r0, r0, ip, lsr #32
    206c:	04320f00 	ldrteq	r0, [r2], #-3840	; 0xf00
    2070:	60020000 	andvs	r0, r2, r0
    2074:	00010b00 	andeq	r0, r1, r0, lsl #22
    2078:	a2000400 	andge	r0, r0, #0, 8
    207c:	04000009 	streq	r0, [r0], #-9
    2080:	00002901 	andeq	r2, r0, r1, lsl #18
    2084:	04600100 	strbteq	r0, [r0], #-256	; 0x100
    2088:	033a0000 	teqeq	sl, #0
    208c:	8d240000 	stchi	0, cr0, [r4, #-0]
    2090:	00340000 	eorseq	r0, r4, r0
    2094:	0a1a0000 	beq	68209c <__bss_end__+0x67853c>
    2098:	04020000 	streq	r0, [r2], #-0
    209c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    20a0:	07040300 	streq	r0, [r4, -r0, lsl #6]
    20a4:	00000103 	andeq	r0, r0, r3, lsl #2
    20a8:	b6060103 	strlt	r0, [r6], -r3, lsl #2
    20ac:	03000000 	movweq	r0, #0
    20b0:	01480502 	cmpeq	r8, r2, lsl #10
    20b4:	04030000 	streq	r0, [r3], #-0
    20b8:	00012b05 	andeq	r2, r1, r5, lsl #22
    20bc:	05080300 	streq	r0, [r8, #-768]	; 0x300
    20c0:	00000126 	andeq	r0, r0, r6, lsr #2
    20c4:	b4080103 	strlt	r0, [r8], #-259	; 0x103
    20c8:	03000000 	movweq	r0, #0
    20cc:	00cf0702 	sbceq	r0, pc, r2, lsl #14
    20d0:	04030000 	streq	r0, [r3], #-0
    20d4:	0000fe07 	andeq	pc, r0, r7, lsl #28
    20d8:	07080300 	streq	r0, [r8, -r0, lsl #6]
    20dc:	000000f9 	strdeq	r0, [r0], -r9
    20e0:	1d070403 	cfstrsne	mvf0, [r7, #-12]
    20e4:	03000001 	movweq	r0, #1
    20e8:	00bd0801 	adcseq	r0, sp, r1, lsl #16
    20ec:	96040000 	strls	r0, [r4], -r0
    20f0:	01000004 	tsteq	r0, r4
    20f4:	008d2403 	addeq	r2, sp, r3, lsl #8
    20f8:	00003400 	andeq	r3, r0, r0, lsl #8
    20fc:	de9c0100 	fmllee	f0, f4, f0
    2100:	05000000 	streq	r0, [r0, #-0]
    2104:	00000474 	andeq	r0, r0, r4, ror r4
    2108:	00250401 	eoreq	r0, r5, r1, lsl #8
    210c:	82050000 	andhi	r0, r5, #0
    2110:	01000004 	tsteq	r0, r4
    2114:	00002504 	andeq	r2, r0, r4, lsl #10
    2118:	00800600 	addeq	r0, r0, r0, lsl #12
    211c:	05010000 	streq	r0, [r1, #-0]
    2120:	000000b1 	strheq	r0, [r0], -r1
    2124:	62080007 	andvs	r0, r8, #7
    2128:	01007373 	tsteq	r0, r3, ror r3
    212c:	0000de07 	andeq	sp, r0, r7, lsl #28
    2130:	00131b00 	andseq	r1, r3, r0, lsl #22
    2134:	048e0900 	streq	r0, [lr], #2304	; 0x900
    2138:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    213c:	000000de 	ldrdeq	r0, [r0], -lr
    2140:	008d4c0a 	addeq	r4, sp, sl, lsl #24
    2144:	0000fa00 	andeq	pc, r0, r0, lsl #20
    2148:	8d500a00 	vldrhi	s1, [r0, #-0]
    214c:	01070000 	mrseq	r0, (UNDEF: 7)
    2150:	0b000000 	bleq	2158 <_start-0x5ea8>
    2154:	00002504 	andeq	r2, r0, r4, lsl #10
    2158:	04740500 	ldrbteq	r0, [r4], #-1280	; 0x500
    215c:	04010000 	streq	r0, [r1], #-0
    2160:	00000025 	andeq	r0, r0, r5, lsr #32
    2164:	00048205 	andeq	r8, r4, r5, lsl #4
    2168:	25040100 	strcs	r0, [r4, #-256]	; 0x100
    216c:	06000000 	streq	r0, [r0], -r0
    2170:	00000080 	andeq	r0, r0, r0, lsl #1
    2174:	01070501 	tsteq	r7, r1, lsl #10
    2178:	00070000 	andeq	r0, r7, r0
    217c:	0004320c 	andeq	r3, r4, ip, lsl #4
    2180:	00600200 	rsbeq	r0, r0, r0, lsl #4
    2184:	000001ad 	andeq	r0, r0, sp, lsr #3
    2188:	0a4c0004 	beq	13021a0 <__bss_end__+0x12f8640>
    218c:	01040000 	mrseq	r0, (UNDEF: 4)
    2190:	00000029 	andeq	r0, r0, r9, lsr #32
    2194:	0004b801 	andeq	fp, r4, r1, lsl #16
    2198:	00033a00 	andeq	r3, r3, r0, lsl #20
    219c:	00001800 	andeq	r1, r0, r0, lsl #16
    21a0:	00000000 	andeq	r0, r0, r0
    21a4:	000ab400 	andeq	fp, sl, r0, lsl #8
    21a8:	05040200 	streq	r0, [r4, #-512]	; 0x200
    21ac:	00746e69 	rsbseq	r6, r4, r9, ror #28
    21b0:	03070403 	movweq	r0, #29699	; 0x7403
    21b4:	03000001 	movweq	r0, #1
    21b8:	00b60601 	adcseq	r0, r6, r1, lsl #12
    21bc:	02030000 	andeq	r0, r3, #0
    21c0:	00014805 	andeq	r4, r1, r5, lsl #16
    21c4:	05040300 	streq	r0, [r4, #-768]	; 0x300
    21c8:	0000012b 	andeq	r0, r0, fp, lsr #2
    21cc:	26050803 	strcs	r0, [r5], -r3, lsl #16
    21d0:	03000001 	movweq	r0, #1
    21d4:	00b40801 	adcseq	r0, r4, r1, lsl #16
    21d8:	02030000 	andeq	r0, r3, #0
    21dc:	0000cf07 	andeq	ip, r0, r7, lsl #30
    21e0:	07040300 	streq	r0, [r4, -r0, lsl #6]
    21e4:	000000fe 	strdeq	r0, [r0], -lr
    21e8:	f9070803 			; <UNDEFINED> instruction: 0xf9070803
    21ec:	03000000 	movweq	r0, #0
    21f0:	011d0704 	tsteq	sp, r4, lsl #14
    21f4:	01030000 	mrseq	r0, (UNDEF: 3)
    21f8:	0000bd08 	andeq	fp, r0, r8, lsl #26
    21fc:	049e0400 	ldreq	r0, [lr], #1024	; 0x400
    2200:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    2204:	00000025 	andeq	r0, r0, r5, lsr #32
    2208:	00008d58 	andeq	r8, r0, r8, asr sp
    220c:	00000018 	andeq	r0, r0, r8, lsl r0
    2210:	00a29c01 	adceq	r9, r2, r1, lsl #24
    2214:	0a050000 	beq	14221c <__bss_end__+0x1386bc>
    2218:	01000005 	tsteq	r0, r5
    221c:	00002c0f 	andeq	r2, r0, pc, lsl #24
    2220:	00133b00 	andseq	r3, r3, r0, lsl #22
    2224:	ed060000 	stc	0, cr0, [r6, #-0]
    2228:	01000004 	tsteq	r0, r4
    222c:	008d7017 	addeq	r7, sp, r7, lsl r0
    2230:	00001400 	andeq	r1, r0, r0, lsl #8
    2234:	c79c0100 	ldrgt	r0, [ip, r0, lsl #2]
    2238:	05000000 	streq	r0, [r0, #-0]
    223c:	0000050a 	andeq	r0, r0, sl, lsl #10
    2240:	002c1801 	eoreq	r1, ip, r1, lsl #16
    2244:	135a0000 	cmpne	sl, #0
    2248:	06000000 	streq	r0, [r0], -r0
    224c:	00000432 	andeq	r0, r0, r2, lsr r4
    2250:	8d841f01 	stchi	15, cr1, [r4, #4]
    2254:	00480000 	subeq	r0, r8, r0
    2258:	9c010000 	stcls	0, cr0, [r1], {-0}
    225c:	00000177 	andeq	r0, r0, r7, ror r1
    2260:	00050207 	andeq	r0, r5, r7, lsl #4
    2264:	772a0100 	strvc	r0, [sl, -r0, lsl #2]!
    2268:	1c000001 	stcne	0, cr0, [r0], {1}
    226c:	07201000 	streq	r1, [r0, -r0]!
    2270:	000004e5 	andeq	r0, r0, r5, ror #9
    2274:	01772b01 	cmneq	r7, r1, lsl #22
    2278:	00240000 	eoreq	r0, r4, r0
    227c:	ac072010 	stcge	0, cr2, [r7], {16}
    2280:	01000004 	tsteq	r0, r4
    2284:	0001772c 	andeq	r7, r1, ip, lsr #14
    2288:	00000000 	andeq	r0, r0, r0
    228c:	04cc085a 	strbeq	r0, [ip], #2138	; 0x85a
    2290:	2d010000 	stccs	0, cr0, [r1, #-0]
    2294:	00000177 	andeq	r0, r0, r7, ror r1
    2298:	8d8c0920 	stchi	9, cr0, [ip, #128]	; 0x80
    229c:	00790000 	rsbseq	r0, r9, r0
    22a0:	98090000 	stmdals	r9, {}	; <UNPREDICTABLE>
    22a4:	a200008d 	andge	r0, r0, #141	; 0x8d
    22a8:	0a000000 	beq	22b0 <_start-0x5d50>
    22ac:	00008da0 	andeq	r8, r0, r0, lsr #27
    22b0:	0000018d 	andeq	r0, r0, sp, lsl #3
    22b4:	0000013a 	andeq	r0, r0, sl, lsr r1
    22b8:	0150010b 	cmpeq	r0, fp, lsl #2
    22bc:	ac0a004e 	stcge	0, cr0, [sl], {78}	; 0x4e
    22c0:	9e00008d 	cdpls	0, 0, cr0, cr0, cr13, {4}
    22c4:	5a000001 	bpl	22d0 <_start-0x5d30>
    22c8:	0b000001 	bleq	22d4 <_start-0x5d2c>
    22cc:	0c055101 	stfeqs	f5, [r5], {1}
    22d0:	5a000001 	bpl	22dc <_start-0x5d24>
    22d4:	0550010b 	ldrbeq	r0, [r0, #-267]	; 0x10b
    22d8:	1000240c 	andne	r2, r0, ip, lsl #8
    22dc:	b80c0020 	stmdalt	ip, {r5}
    22e0:	9e00008d 	cdpls	0, 0, cr0, cr0, cr13, {4}
    22e4:	0b000001 	bleq	22f0 <_start-0x5d10>
    22e8:	0c055101 	stfeqs	f5, [r5], {1}
    22ec:	5a000020 	bpl	2374 <_start-0x5c8c>
    22f0:	0550010b 	ldrbeq	r0, [r0, #-267]	; 0x10b
    22f4:	10001c0c 	andne	r1, r0, ip, lsl #24
    22f8:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    22fc:	00000025 	andeq	r0, r0, r5, lsr #32
    2300:	0004a108 	andeq	sl, r4, r8, lsl #2
    2304:	880d0100 	stmdahi	sp, {r8}
    2308:	10000001 	andne	r0, r0, r1
    230c:	00002c0d 	andeq	r2, r0, sp, lsl #24
    2310:	04570e00 	ldrbeq	r0, [r7], #-3584	; 0xe00
    2314:	4d020000 	stcmi	0, cr0, [r2, #-0]
    2318:	0000019e 	muleq	r0, lr, r1
    231c:	00002c0f 	andeq	r2, r0, pc, lsl #24
    2320:	fc100000 	ldc2	0, cr0, [r0], {-0}
    2324:	02000004 	andeq	r0, r0, #4
    2328:	002c0f94 	mlaeq	ip, r4, pc, r0	; <UNPREDICTABLE>
    232c:	2c0f0000 	stccs	0, cr0, [pc], {-0}
    2330:	00000000 	andeq	r0, r0, r0
    2334:	0001f700 	andeq	pc, r1, r0, lsl #14
    2338:	3a000400 	bcc	3340 <_start-0x4cc0>
    233c:	0400000b 	streq	r0, [r0], #-11
    2340:	00002901 	andeq	r2, r0, r1, lsl #18
    2344:	05250100 	streq	r0, [r5, #-256]!	; 0x100
    2348:	033a0000 	teqeq	sl, #0
    234c:	8dcc0000 	stclhi	0, cr0, [ip]
    2350:	00980000 	addseq	r0, r8, r0
    2354:	0b510000 	bleq	144235c <__bss_end__+0x14387fc>
    2358:	04020000 	streq	r0, [r2], #-0
    235c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    2360:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2364:	00000103 	andeq	r0, r0, r3, lsl #2
    2368:	b6060103 	strlt	r0, [r6], -r3, lsl #2
    236c:	03000000 	movweq	r0, #0
    2370:	01480502 	cmpeq	r8, r2, lsl #10
    2374:	04030000 	streq	r0, [r3], #-0
    2378:	00012b05 	andeq	r2, r1, r5, lsl #22
    237c:	05080300 	streq	r0, [r8, #-768]	; 0x300
    2380:	00000126 	andeq	r0, r0, r6, lsr #2
    2384:	b4080103 	strlt	r0, [r8], #-259	; 0x103
    2388:	03000000 	movweq	r0, #0
    238c:	00cf0702 	sbceq	r0, pc, r2, lsl #14
    2390:	04030000 	streq	r0, [r3], #-0
    2394:	0000fe07 	andeq	pc, r0, r7, lsl #28
    2398:	07080300 	streq	r0, [r8, -r0, lsl #6]
    239c:	000000f9 	strdeq	r0, [r0], -r9
    23a0:	1d070403 	cfstrsne	mvf0, [r7, #-12]
    23a4:	03000001 	movweq	r0, #1
    23a8:	00bd0801 	adcseq	r0, sp, r1, lsl #16
    23ac:	44040000 	strmi	r0, [r4], #-0
    23b0:	01000005 	tsteq	r0, r5
    23b4:	008dcc05 	addeq	ip, sp, r5, lsl #24
    23b8:	00001c00 	andeq	r1, r0, r0, lsl #24
    23bc:	9e9c0100 	fmllse	f0, f4, f0
    23c0:	05000000 	streq	r0, [r0, #-0]
    23c4:	0000053e 	andeq	r0, r0, lr, lsr r5
    23c8:	002c0501 	eoreq	r0, ip, r1, lsl #10
    23cc:	13840000 	orrne	r0, r4, #0
    23d0:	06000000 	streq	r0, [r0], -r0
    23d4:	000002aa 	andeq	r0, r0, sl, lsr #5
    23d8:	002c0b01 	eoreq	r0, ip, r1, lsl #22
    23dc:	8de80000 	stclhi	0, cr0, [r8]
    23e0:	00140000 	andseq	r0, r4, r0
    23e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    23e8:	000000cb 	andeq	r0, r0, fp, asr #1
    23ec:	008df407 	addeq	pc, sp, r7, lsl #8
    23f0:	0001de00 	andeq	sp, r1, r0, lsl #28
    23f4:	50010800 	andpl	r0, r1, r0, lsl #16
    23f8:	30040c05 	andcc	r0, r4, r5, lsl #24
    23fc:	00002000 	andeq	r2, r0, r0
    2400:	00055a06 	andeq	r5, r5, r6, lsl #20
    2404:	2c100100 	ldfcss	f0, [r0], {-0}
    2408:	fc000000 	stc2	0, cr0, [r0], {-0}
    240c:	1c00008d 	stcne	0, cr0, [r0], {141}	; 0x8d
    2410:	01000000 	mrseq	r0, (UNDEF: 0)
    2414:	00010d9c 	muleq	r1, ip, sp
    2418:	00750900 	rsbseq	r0, r5, r0, lsl #18
    241c:	002c1201 	eoreq	r1, ip, r1, lsl #4
    2420:	13b80000 			; <UNDEFINED> instruction: 0x13b80000
    2424:	040a0000 	streq	r0, [sl], #-0
    2428:	f300008e 	vhadd.u8	d0, d16, d14
    242c:	0a000001 	beq	2438 <_start-0x5bc8>
    2430:	00008e08 	andeq	r8, r0, r8, lsl #28
    2434:	0000009e 	muleq	r0, lr, r0
    2438:	008e100a 	addeq	r1, lr, sl
    243c:	0001f300 	andeq	pc, r1, r0, lsl #6
    2440:	51040000 	mrspl	r0, (UNDEF: 4)
    2444:	01000005 	tsteq	r0, r5
    2448:	008e1817 	addeq	r1, lr, r7, lsl r8
    244c:	00002400 	andeq	r2, r0, r0, lsl #8
    2450:	6b9c0100 	blvs	fe702858 <__bss_end__+0xfe6f8cf8>
    2454:	0b000001 	bleq	2460 <_start-0x5ba0>
    2458:	01007375 	tsteq	r0, r5, ror r3
    245c:	00002c17 	andeq	r2, r0, r7, lsl ip
    2460:	0013d600 	andseq	sp, r3, r0, lsl #12
    2464:	62720c00 	rsbsvs	r0, r2, #0, 24
    2468:	2c180100 	ldfcss	f0, [r8], {-0}
    246c:	01000000 	mrseq	r0, (UNDEF: 0)
    2470:	8e280d54 	mcrhi	13, 1, r0, cr8, cr4, {2}
    2474:	00100000 	andseq	r0, r0, r0
    2478:	01610000 	cmneq	r1, r0
    247c:	72090000 	andvc	r0, r9, #0
    2480:	1a010061 	bne	4260c <__bss_end__+0x38aac>
    2484:	0000002c 	andeq	r0, r0, ip, lsr #32
    2488:	000013f4 	strdeq	r1, [r0], -r4
    248c:	008e2c0a 	addeq	r2, lr, sl, lsl #24
    2490:	0000cb00 	andeq	ip, r0, r0, lsl #22
    2494:	240a0000 	strcs	r0, [sl], #-0
    2498:	cb00008e 	blgt	26d8 <_start-0x5928>
    249c:	00000000 	andeq	r0, r0, r0
    24a0:	00045704 	andeq	r5, r4, r4, lsl #14
    24a4:	3c200100 	stfccs	f0, [r0], #-0
    24a8:	1400008e 	strne	r0, [r0], #-142	; 0x8e
    24ac:	01000000 	mrseq	r0, (UNDEF: 0)
    24b0:	0001a49c 	muleq	r1, ip, r4
    24b4:	736d0b00 	cmnvc	sp, #0, 22
    24b8:	2c200100 	stfcss	f0, [r0], #-0
    24bc:	07000000 	streq	r0, [r0, -r0]
    24c0:	07000014 	smladeq	r0, r4, r0, r0
    24c4:	00008e4c 	andeq	r8, r0, ip, asr #28
    24c8:	0000010d 	andeq	r0, r0, sp, lsl #2
    24cc:	07500108 	ldrbeq	r0, [r0, -r8, lsl #2]
    24d0:	0a5001f3 	beq	1402ca4 <__bss_end__+0x13f9144>
    24d4:	001e03e8 	andseq	r0, lr, r8, ror #7
    24d8:	051b0400 	ldreq	r0, [fp, #-1024]	; 0x400
    24dc:	23010000 	movwcs	r0, #4096	; 0x1000
    24e0:	00008e50 	andeq	r8, r0, r0, asr lr
    24e4:	00000014 	andeq	r0, r0, r4, lsl r0
    24e8:	01de9c01 	bicseq	r9, lr, r1, lsl #24
    24ec:	730b0000 	movwvc	r0, #45056	; 0xb000
    24f0:	01006365 	tsteq	r0, r5, ror #6
    24f4:	00002c23 	andeq	r2, r0, r3, lsr #24
    24f8:	00142800 	andseq	r2, r4, r0, lsl #16
    24fc:	8e600700 	cdphi	7, 6, cr0, cr0, cr0, {0}
    2500:	016b0000 	cmneq	fp, r0
    2504:	01080000 	mrseq	r0, (UNDEF: 8)
    2508:	01f30750 	mvnseq	r0, r0, asr r7
    250c:	03e80a50 	mvneq	r0, #80, 20	; 0x50000
    2510:	0e00001e 	mcreq	0, 0, r0, cr0, cr14, {0}
    2514:	00000538 	andeq	r0, r0, r8, lsr r5
    2518:	002ca002 	eoreq	sl, ip, r2
    251c:	01f30000 	mvnseq	r0, r0
    2520:	2c0f0000 	stccs	0, cr0, [pc], {-0}
    2524:	00000000 	andeq	r0, r0, r0
    2528:	00050f10 	andeq	r0, r5, r0, lsl pc
    252c:	00840200 	addeq	r0, r4, r0, lsl #4
    2530:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2534:	0c300004 	ldceq	0, cr0, [r0], #-16
    2538:	01040000 	mrseq	r0, (UNDEF: 4)
    253c:	00000029 	andeq	r0, r0, r9, lsr #32
    2540:	00027201 	andeq	r7, r2, r1, lsl #4
    2544:	00033a00 	andeq	r3, r3, r0, lsl #20
    2548:	008ec800 	addeq	ip, lr, r0, lsl #16
    254c:	00015400 	andeq	r5, r1, r0, lsl #8
    2550:	000bfa00 	andeq	pc, fp, r0, lsl #20
    2554:	05040200 	streq	r0, [r4, #-512]	; 0x200
    2558:	00746e69 	rsbseq	r6, r4, r9, ror #28
    255c:	03070403 	movweq	r0, #29699	; 0x7403
    2560:	03000001 	movweq	r0, #1
    2564:	00b60601 	adcseq	r0, r6, r1, lsl #12
    2568:	02030000 	andeq	r0, r3, #0
    256c:	00014805 	andeq	r4, r1, r5, lsl #16
    2570:	05040300 	streq	r0, [r4, #-768]	; 0x300
    2574:	0000012b 	andeq	r0, r0, fp, lsr #2
    2578:	26050803 	strcs	r0, [r5], -r3, lsl #16
    257c:	03000001 	movweq	r0, #1
    2580:	00b40801 	adcseq	r0, r4, r1, lsl #16
    2584:	02030000 	andeq	r0, r3, #0
    2588:	0000cf07 	andeq	ip, r0, r7, lsl #30
    258c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2590:	000000fe 	strdeq	r0, [r0], -lr
    2594:	f9070803 			; <UNDEFINED> instruction: 0xf9070803
    2598:	03000000 	movweq	r0, #0
    259c:	011d0704 	tsteq	sp, r4, lsl #14
    25a0:	01030000 	mrseq	r0, (UNDEF: 3)
    25a4:	0000bd08 	andeq	fp, r0, r8, lsl #26
    25a8:	02010400 	andeq	r0, r1, #0, 8
    25ac:	0000b20c 	andeq	fp, r0, ip, lsl #4
    25b0:	06ce0500 	strbeq	r0, [lr], r0, lsl #10
    25b4:	05000000 	streq	r0, [r0, #-0]
    25b8:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    25bc:	05950501 	ldreq	r0, [r5, #1281]	; 0x501
    25c0:	05040000 	streq	r0, [r4, #-0]
    25c4:	000005e1 	andeq	r0, r0, r1, ror #11
    25c8:	05f00505 	ldrbeq	r0, [r0, #1285]!	; 0x505
    25cc:	05060000 	streq	r0, [r6, #-0]
    25d0:	000005ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    25d4:	068f0507 	streq	r0, [pc], r7, lsl #10
    25d8:	05030000 	streq	r0, [r3, #-0]
    25dc:	0000060e 	andeq	r0, r0, lr, lsl #12
    25e0:	41060002 	tstmi	r6, r2
    25e4:	02000006 	andeq	r0, r0, #6
    25e8:	00007915 	andeq	r7, r0, r5, lsl r9
    25ec:	05a40700 	streq	r0, [r4, #1792]!	; 0x700
    25f0:	57010000 	strpl	r0, [r1, -r0]
    25f4:	00000025 	andeq	r0, r0, r5, lsr #32
    25f8:	00008ec8 	andeq	r8, r0, r8, asr #29
    25fc:	0000001c 	andeq	r0, r0, ip, lsl r0
    2600:	00e09c01 	rsceq	r9, r0, r1, lsl #24
    2604:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    2608:	a800008e 	stmdage	r0, {r1, r2, r3, r7}
    260c:	00000003 	andeq	r0, r0, r3
    2610:	00008809 	andeq	r8, r0, r9, lsl #16
    2614:	e4370100 	ldrt	r0, [r7], #-256	; 0x100
    2618:	9c00008e 	stcls	0, cr0, [r0], {142}	; 0x8e
    261c:	01000000 	mrseq	r0, (UNDEF: 0)
    2620:	0001e69c 	muleq	r1, ip, r6
    2624:	8eec0800 	cdphi	8, 14, cr0, cr12, cr0, {0}
    2628:	03c90000 	biceq	r0, r9, #0
    262c:	f80a0000 			; <UNDEFINED> instruction: 0xf80a0000
    2630:	d000008e 	andle	r0, r0, lr, lsl #1
    2634:	16000003 	strne	r0, [r0], -r3
    2638:	0b000001 	bleq	2644 <_start-0x59bc>
    263c:	32015101 	andcc	r5, r1, #1073741824	; 0x40000000
    2640:	0150010b 	cmpeq	r0, fp, lsl #2
    2644:	040a003e 	streq	r0, [sl], #-62	; 0x3e
    2648:	d000008f 	andle	r0, r0, pc, lsl #1
    264c:	2e000003 	cdpcs	0, 0, cr0, cr0, cr3, {0}
    2650:	0b000001 	bleq	265c <_start-0x59a4>
    2654:	32015101 	andcc	r5, r1, #1073741824	; 0x40000000
    2658:	0150010b 	cmpeq	r0, fp, lsl #2
    265c:	0808003f 	stmdaeq	r8, {r0, r1, r2, r3, r4, r5}
    2660:	c900008f 	stmdbgt	r0, {r0, r1, r2, r3, r7}
    2664:	0a000003 	beq	2678 <_start-0x5988>
    2668:	00008f18 	andeq	r8, r0, r8, lsl pc
    266c:	000003a8 	andeq	r0, r0, r8, lsr #7
    2670:	0000014b 	andeq	r0, r0, fp, asr #2
    2674:	0250010b 	subseq	r0, r0, #-1073741822	; 0xc0000002
    2678:	0a000075 	beq	2854 <_start-0x57ac>
    267c:	00008f24 	andeq	r8, r0, r4, lsr #30
    2680:	000003e6 	andeq	r0, r0, r6, ror #7
    2684:	0000015f 	andeq	r0, r0, pc, asr r1
    2688:	0250010b 	subseq	r0, r0, #-1073741822	; 0xc0000002
    268c:	08000075 	stmdaeq	r0, {r0, r2, r4, r5, r6}
    2690:	00008f28 	andeq	r8, r0, r8, lsr #30
    2694:	000003c9 	andeq	r0, r0, r9, asr #7
    2698:	008f340a 	addeq	r3, pc, sl, lsl #8
    269c:	0003e600 	andeq	lr, r3, r0, lsl #12
    26a0:	00017b00 	andeq	r7, r1, r0, lsl #22
    26a4:	51010b00 	tstpl	r1, r0, lsl #22
    26a8:	0a003001 	beq	e6b4 <__bss_end__+0x4b54>
    26ac:	00008f40 	andeq	r8, r0, r0, asr #30
    26b0:	000003e6 	andeq	r0, r0, r6, ror #7
    26b4:	0000018e 	andeq	r0, r0, lr, lsl #3
    26b8:	0151010b 	cmpeq	r1, fp, lsl #2
    26bc:	4c0a0030 	stcmi	0, cr0, [sl], {48}	; 0x30
    26c0:	e600008f 	str	r0, [r0], -pc, lsl #1
    26c4:	a1000003 	tstge	r0, r3
    26c8:	0b000001 	bleq	26d4 <_start-0x592c>
    26cc:	36015101 	strcc	r5, [r1], -r1, lsl #2
    26d0:	8f580a00 	svchi	0x00580a00
    26d4:	03e60000 	mvneq	r0, #0
    26d8:	01b40000 			; <UNDEFINED> instruction: 0x01b40000
    26dc:	010b0000 	mrseq	r0, (UNDEF: 11)
    26e0:	00330151 	eorseq	r0, r3, r1, asr r1
    26e4:	008f640a 	addeq	r6, pc, sl, lsl #8
    26e8:	0003e600 	andeq	lr, r3, r0, lsl #12
    26ec:	0001c900 	andeq	ip, r1, r0, lsl #18
    26f0:	51010b00 	tstpl	r1, r0, lsl #22
    26f4:	010e0a03 	tsteq	lr, r3, lsl #20
    26f8:	8f700a00 	svchi	0x00700a00
    26fc:	03e60000 	mvneq	r0, #0
    2700:	01dc0000 	bicseq	r0, ip, r0
    2704:	010b0000 	mrseq	r0, (UNDEF: 11)
    2708:	00330151 	eorseq	r0, r3, r1, asr r1
    270c:	008f7408 	addeq	r7, pc, r8, lsl #8
    2710:	0003c900 	andeq	ip, r3, r0, lsl #18
    2714:	140c0000 	strne	r0, [ip], #-0
    2718:	01000002 	tsteq	r0, r2
    271c:	0000255d 	andeq	r2, r0, sp, asr r5
    2720:	008f8000 	addeq	r8, pc, r0
    2724:	00002800 	andeq	r2, r0, r0, lsl #16
    2728:	129c0100 	addsne	r0, ip, #0, 2
    272c:	08000002 	stmdaeq	r0, {r1}
    2730:	00008f88 	andeq	r8, r0, r8, lsl #31
    2734:	000000bd 	strheq	r0, [r0], -sp
    2738:	008f9c08 	addeq	r9, pc, r8, lsl #24
    273c:	0003a800 	andeq	sl, r3, r0, lsl #16
    2740:	4d0c0000 	stcmi	0, cr0, [ip, #-0]
    2744:	01000006 	tsteq	r0, r6
    2748:	00002564 	andeq	r2, r0, r4, ror #10
    274c:	008fa800 	addeq	sl, pc, r0, lsl #16
    2750:	00001c00 	andeq	r1, r0, r0, lsl #24
    2754:	359c0100 	ldrcc	r0, [ip, #256]	; 0x100
    2758:	08000002 	stmdaeq	r0, {r1}
    275c:	00008fb8 			; <UNDEFINED> instruction: 0x00008fb8
    2760:	000003a8 	andeq	r0, r0, r8, lsr #7
    2764:	02440900 	subeq	r0, r4, #0, 18
    2768:	6a010000 	bvs	42770 <__bss_end__+0x38c10>
    276c:	00008fc4 	andeq	r8, r0, r4, asr #31
    2770:	0000002c 	andeq	r0, r0, ip, lsr #32
    2774:	02719c01 	rsbseq	r9, r1, #256	; 0x100
    2778:	630d0000 	movwvs	r0, #53248	; 0xd000
    277c:	2c6a0100 	stfcse	f0, [sl], #-0
    2780:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
    2784:	08000014 	stmdaeq	r0, {r2, r4}
    2788:	00008fd0 	ldrdeq	r8, [r0], -r0
    278c:	00000212 	andeq	r0, r0, r2, lsl r2
    2790:	008fe80e 	addeq	lr, pc, lr, lsl #16
    2794:	0003e600 	andeq	lr, r3, r0, lsl #12
    2798:	51010b00 	tstpl	r1, r0, lsl #22
    279c:	00007402 	andeq	r7, r0, r2, lsl #8
    27a0:	05c20c00 	strbeq	r0, [r2, #3072]	; 0xc00
    27a4:	74010000 	strvc	r0, [r1], #-0
    27a8:	00000025 	andeq	r0, r0, r5, lsr #32
    27ac:	00008ff0 	strdeq	r8, [r0], -r0
    27b0:	0000000c 	andeq	r0, r0, ip
    27b4:	02949c01 	addseq	r9, r4, #256	; 0x100
    27b8:	f8080000 			; <UNDEFINED> instruction: 0xf8080000
    27bc:	bd00008f 	stclt	0, cr0, [r0, #-572]	; 0xfffffdc4
    27c0:	00000000 	andeq	r0, r0, r0
    27c4:	0006ed0c 	andeq	lr, r6, ip, lsl #26
    27c8:	25780100 	ldrbcs	r0, [r8, #-256]!	; 0x100
    27cc:	fc000000 	stc2	0, cr0, [r0], {-0}
    27d0:	2000008f 	andcs	r0, r0, pc, lsl #1
    27d4:	01000000 	mrseq	r0, (UNDEF: 0)
    27d8:	0002c09c 	muleq	r2, ip, r0
    27dc:	90040800 	andls	r0, r4, r0, lsl #16
    27e0:	02710000 	rsbseq	r0, r1, #0
    27e4:	10080000 	andne	r0, r8, r0
    27e8:	e6000090 			; <UNDEFINED> instruction: 0xe6000090
    27ec:	00000001 	andeq	r0, r0, r1
    27f0:	0006670f 	andeq	r6, r6, pc, lsl #14
    27f4:	d1160100 	tstle	r6, r0, lsl #2
    27f8:	05000002 	streq	r0, [r0, #-2]
    27fc:	00941003 	addseq	r1, r4, r3
    2800:	d7041000 	strle	r1, [r4, -r0]
    2804:	11000002 	tstne	r0, r2
    2808:	0000002c 	andeq	r0, r0, ip, lsr #32
    280c:	00065b0f 	andeq	r5, r6, pc, lsl #22
    2810:	d1170100 	tstle	r7, r0, lsl #2
    2814:	05000002 	streq	r0, [r0, #-2]
    2818:	0093e403 	addseq	lr, r3, r3, lsl #8
    281c:	05780f00 	ldrbeq	r0, [r8, #-3840]!	; 0xf00
    2820:	1a010000 	bne	42828 <__bss_end__+0x38cc8>
    2824:	000002d1 	ldrdeq	r0, [r0], -r1
    2828:	93fc0305 	mvnsls	r0, #335544320	; 0x14000000
    282c:	1d0f0000 	stcne	0, cr0, [pc, #-0]	; 2834 <_start-0x57cc>
    2830:	01000006 	tsteq	r0, r6
    2834:	0002d11b 	andeq	sp, r2, fp, lsl r1
    2838:	ec030500 	cfstr32	mvfx0, [r3], {-0}
    283c:	0f000093 	svceq	0x00000093
    2840:	00000632 	andeq	r0, r0, r2, lsr r6
    2844:	02d11c01 	sbcseq	r1, r1, #256	; 0x100
    2848:	03050000 	movweq	r0, #20480	; 0x5000
    284c:	000093f0 	strdeq	r9, [r0], -r0
    2850:	0006bf0f 	andeq	fp, r6, pc, lsl #30
    2854:	d11d0100 	tstle	sp, r0, lsl #2
    2858:	05000002 	streq	r0, [r0, #-2]
    285c:	0093f403 	addseq	pc, r3, r3, lsl #8
    2860:	05690f00 	strbeq	r0, [r9, #-3840]!	; 0xf00
    2864:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    2868:	000002d1 	ldrdeq	r0, [r0], -r1
    286c:	940c0305 	strls	r0, [ip], #-773	; 0x305
    2870:	de0f0000 	cdple	0, 0, cr0, cr15, cr0, {0}
    2874:	01000006 	tsteq	r0, r6
    2878:	0002d11f 	andeq	sp, r2, pc, lsl r1
    287c:	e0030500 	and	r0, r3, r0, lsl #10
    2880:	0f000093 	svceq	0x00000093
    2884:	00000586 	andeq	r0, r0, r6, lsl #11
    2888:	02d12001 	sbcseq	r2, r1, #1
    288c:	03050000 	movweq	r0, #20480	; 0x5000
    2890:	00009408 	andeq	r9, r0, r8, lsl #8
    2894:	0006b00f 	andeq	fp, r6, pc
    2898:	d1210100 	teqle	r1, r0, lsl #2
    289c:	05000002 	streq	r0, [r0, #-2]
    28a0:	00940403 	addseq	r0, r4, r3, lsl #8
    28a4:	05b20f00 	ldreq	r0, [r2, #3840]!	; 0xf00
    28a8:	22010000 	andcs	r0, r1, #0
    28ac:	000002d1 	ldrdeq	r0, [r0], -r1
    28b0:	93e80305 	mvnls	r0, #335544320	; 0x14000000
    28b4:	7f0f0000 	svcvc	0x000f0000
    28b8:	01000006 	tsteq	r0, r6
    28bc:	0002d123 	andeq	sp, r2, r3, lsr #2
    28c0:	00030500 	andeq	r0, r3, r0, lsl #10
    28c4:	0f000094 	svceq	0x00000094
    28c8:	0000066f 	andeq	r0, r0, pc, ror #12
    28cc:	02d12401 	sbcseq	r2, r1, #16777216	; 0x1000000
    28d0:	03050000 	movweq	r0, #20480	; 0x5000
    28d4:	000093f8 	strdeq	r9, [r0], -r8
    28d8:	0006fd12 	andeq	pc, r6, r2, lsl sp	; <UNPREDICTABLE>
    28dc:	2ca10300 	stccs	3, cr0, [r1]
    28e0:	bd000000 	stclt	0, cr0, [r0, #-0]
    28e4:	13000003 	movwne	r0, #3
    28e8:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    28ec:	c3041000 	movwgt	r1, #16384	; 0x4000
    28f0:	14000003 	strne	r0, [r0], #-3
    28f4:	000003c8 	andeq	r0, r0, r8, asr #7
    28f8:	050f1615 	streq	r1, [pc, #-1557]	; 22eb <_start-0x5d15>
    28fc:	84030000 	strhi	r0, [r3], #-0
    2900:	00069e17 	andeq	r9, r6, r7, lsl lr
    2904:	e6190200 	ldr	r0, [r9], -r0, lsl #4
    2908:	13000003 	movwne	r0, #3
    290c:	0000002c 	andeq	r0, r0, ip, lsr #32
    2910:	0000b213 	andeq	fp, r0, r3, lsl r2
    2914:	2c170000 	ldccs	0, cr0, [r7], {-0}
    2918:	03000006 	movweq	r0, #6
    291c:	0003fc95 	muleq	r3, r5, ip
    2920:	03fc1300 	mvnseq	r1, #0, 6
    2924:	2c130000 	ldccs	0, cr0, [r3], {-0}
    2928:	00000000 	andeq	r0, r0, r0
    292c:	03c80410 	biceq	r0, r8, #16, 8	; 0x10000000
    2930:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    2934:	04000005 	streq	r0, [r0], #-5
    2938:	000d7800 	andeq	r7, sp, r0, lsl #16
    293c:	29010400 	stmdbcs	r1, {sl}
    2940:	01000000 	mrseq	r0, (UNDEF: 0)
    2944:	0000077e 	andeq	r0, r0, lr, ror r7
    2948:	0000033a 	andeq	r0, r0, sl, lsr r3
    294c:	0000901c 	andeq	r9, r0, ip, lsl r0
    2950:	000003ac 	andeq	r0, r0, ip, lsr #7
    2954:	00000c75 	andeq	r0, r0, r5, ror ip
    2958:	f9070802 			; <UNDEFINED> instruction: 0xf9070802
    295c:	02000000 	andeq	r0, r0, #0
    2960:	01030704 	tsteq	r3, r4, lsl #14
    2964:	01020000 	mrseq	r0, (UNDEF: 2)
    2968:	0000b606 	andeq	fp, r0, r6, lsl #12
    296c:	05020200 	streq	r0, [r2, #-512]	; 0x200
    2970:	00000148 	andeq	r0, r0, r8, asr #2
    2974:	2b050402 	blcs	143984 <__bss_end__+0x139e24>
    2978:	02000001 	andeq	r0, r0, #1
    297c:	01260508 	teqeq	r6, r8, lsl #10
    2980:	01020000 	mrseq	r0, (UNDEF: 2)
    2984:	0000b408 	andeq	fp, r0, r8, lsl #8
    2988:	07020200 	streq	r0, [r2, -r0, lsl #4]
    298c:	000000cf 	andeq	r0, r0, pc, asr #1
    2990:	fe070402 	cdp2	4, 0, cr0, cr7, cr2, {0}
    2994:	03000000 	movweq	r0, #0
    2998:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    299c:	04020074 	streq	r0, [r2], #-116	; 0x74
    29a0:	00011d07 	andeq	r1, r1, r7, lsl #26
    29a4:	08010200 	stmdaeq	r1, {r9}
    29a8:	000000bd 	strheq	r0, [r0], -sp
    29ac:	0c020104 	stfeqs	f0, [r2], {4}
    29b0:	000000b2 	strheq	r0, [r0], -r2
    29b4:	0006ce05 	andeq	ip, r6, r5, lsl #28
    29b8:	d0050000 	andle	r0, r5, r0
    29bc:	01000005 	tsteq	r0, r5
    29c0:	00059505 	andeq	r9, r5, r5, lsl #10
    29c4:	e1050400 	tst	r5, r0, lsl #8
    29c8:	05000005 	streq	r0, [r0, #-5]
    29cc:	0005f005 	andeq	pc, r5, r5
    29d0:	ff050600 			; <UNDEFINED> instruction: 0xff050600
    29d4:	07000005 	streq	r0, [r0, -r5]
    29d8:	00068f05 	andeq	r8, r6, r5, lsl #30
    29dc:	0e050300 	cdpeq	3, 0, cr0, cr5, cr0, {0}
    29e0:	02000006 	andeq	r0, r0, #6
    29e4:	06410600 	strbeq	r0, [r1], -r0, lsl #12
    29e8:	15020000 	strne	r0, [r2, #-0]
    29ec:	00000079 	andeq	r0, r0, r9, ror r0
    29f0:	00030707 	andeq	r0, r3, r7, lsl #14
    29f4:	1c3f0100 	ldfnes	f0, [pc], #-0	; 29fc <_start-0x5604>
    29f8:	d4000090 	strle	r0, [r0], #-144	; 0x90
    29fc:	01000000 	mrseq	r0, (UNDEF: 0)
    2a00:	0001339c 	muleq	r1, ip, r3
    2a04:	69700800 	ldmdbvs	r0!, {fp}^
    2a08:	3f01006e 	svccc	0x0001006e
    2a0c:	0000002c 	andeq	r0, r0, ip, lsr #32
    2a10:	00001467 	andeq	r1, r0, r7, ror #8
    2a14:	00078509 	andeq	r8, r7, r9, lsl #10
    2a18:	33470100 	movtcc	r0, #28928	; 0x7100
    2a1c:	85000001 	strhi	r0, [r0, #-1]
    2a20:	09000014 	stmdbeq	r0, {r2, r4}
    2a24:	0000076b 	andeq	r0, r0, fp, ror #14
    2a28:	002c4901 	eoreq	r4, ip, r1, lsl #18
    2a2c:	14da0000 	ldrbne	r0, [sl], #0
    2a30:	76090000 	strvc	r0, [r9], -r0
    2a34:	01000007 	tsteq	r0, r7
    2a38:	00002c57 	andeq	r2, r0, r7, asr ip
    2a3c:	0016a600 	andseq	sl, r6, r0, lsl #12
    2a40:	90b00a00 	adcsls	r0, r0, r0, lsl #20
    2a44:	052e0000 	streq	r0, [lr, #-0]!
    2a48:	01220000 	teqeq	r2, r0
    2a4c:	010b0000 	mrseq	r0, (UNDEF: 11)
    2a50:	00750250 	rsbseq	r0, r5, r0, asr r2
    2a54:	90e40c00 	rscls	r0, r4, r0, lsl #24
    2a58:	054f0000 	strbeq	r0, [pc, #-0]	; 2a60 <_start-0x55a0>
    2a5c:	010b0000 	mrseq	r0, (UNDEF: 11)
    2a60:	00750250 	rsbseq	r0, r5, r0, asr r2
    2a64:	040d0000 	streq	r0, [sp], #-0
    2a68:	00000139 	andeq	r0, r0, r9, lsr r1
    2a6c:	00002c0e 	andeq	r2, r0, lr, lsl #24
    2a70:	07290f00 	streq	r0, [r9, -r0, lsl #30]!
    2a74:	60010000 	andvs	r0, r1, r0
    2a78:	00016c03 	andeq	r6, r1, r3, lsl #24
    2a7c:	69701000 	ldmdbvs	r0!, {ip}^
    2a80:	6001006e 	andvs	r0, r1, lr, rrx
    2a84:	0000002c 	andeq	r0, r0, ip, lsr #32
    2a88:	00078511 	andeq	r8, r7, r1, lsl r5
    2a8c:	33670100 	cmncc	r7, #0, 2
    2a90:	11000001 	tstne	r0, r1
    2a94:	00000776 	andeq	r0, r0, r6, ror r7
    2a98:	002c6801 	eoreq	r6, ip, r1, lsl #16
    2a9c:	12000000 	andne	r0, r0, #0
    2aa0:	0000013e 	andeq	r0, r0, lr, lsr r1
    2aa4:	000090f0 	strdeq	r9, [r0], -r0
    2aa8:	00000038 	andeq	r0, r0, r8, lsr r0
    2aac:	01b09c01 	lslseq	r9, r1, #24
    2ab0:	4a130000 	bmi	4c2ab8 <__bss_end__+0x4b8f58>
    2ab4:	d6000001 	strle	r0, [r0], -r1
    2ab8:	14000016 	strne	r0, [r0], #-22
    2abc:	00000155 	andeq	r0, r0, r5, asr r1
    2ac0:	000016f7 	strdeq	r1, [r0], -r7
    2ac4:	00016014 	andeq	r6, r1, r4, lsl r0
    2ac8:	00172d00 	andseq	r2, r7, r0, lsl #26
    2acc:	91200c00 	teqls	r0, r0, lsl #24
    2ad0:	054f0000 	strbeq	r0, [pc, #-0]	; 2ad8 <_start-0x5528>
    2ad4:	010b0000 	mrseq	r0, (UNDEF: 11)
    2ad8:	f3310751 	vaba.u<illegal width 64>	q0, <illegal reg q0.5>, <illegal reg q0.5>
    2adc:	1a4f5001 	bne	13d6ae8 <__bss_end__+0x13ccf88>
    2ae0:	0f000024 	svceq	0x00000024
    2ae4:	00000751 	andeq	r0, r0, r1, asr r7
    2ae8:	de037b01 	vmlale.f64	d7, d3, d1
    2aec:	10000001 	andne	r0, r0, r1
    2af0:	006e6970 	rsbeq	r6, lr, r0, ror r9
    2af4:	002c7b01 	eoreq	r7, ip, r1, lsl #22
    2af8:	85110000 	ldrhi	r0, [r1, #-0]
    2afc:	01000007 	tsteq	r0, r7
    2b00:	00013381 	andeq	r3, r1, r1, lsl #7
    2b04:	07761100 	ldrbeq	r1, [r6, -r0, lsl #2]!
    2b08:	82010000 	andhi	r0, r1, #0
    2b0c:	0000002c 	andeq	r0, r0, ip, lsr #32
    2b10:	01b01200 	lslseq	r1, r0, #4
    2b14:	91280000 	teqls	r8, r0
    2b18:	00380000 	eorseq	r0, r8, r0
    2b1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b20:	00000222 	andeq	r0, r0, r2, lsr #4
    2b24:	0001bc13 	andeq	fp, r1, r3, lsl ip
    2b28:	00176d00 	andseq	r6, r7, r0, lsl #26
    2b2c:	01c71400 	biceq	r1, r7, r0, lsl #8
    2b30:	178e0000 	strne	r0, [lr, r0]
    2b34:	d2140000 	andsle	r0, r4, #0
    2b38:	c4000001 	strgt	r0, [r0], #-1
    2b3c:	0c000017 	stceq	0, cr0, [r0], {23}
    2b40:	00009158 	andeq	r9, r0, r8, asr r1
    2b44:	0000054f 	andeq	r0, r0, pc, asr #10
    2b48:	0751010b 	ldrbeq	r0, [r1, -fp, lsl #2]
    2b4c:	5001f331 	andpl	pc, r1, r1, lsr r3	; <UNPREDICTABLE>
    2b50:	00241a4f 	eoreq	r1, r4, pc, asr #20
    2b54:	02dc0700 	sbcseq	r0, ip, #0, 14
    2b58:	95010000 	strls	r0, [r1, #-0]
    2b5c:	00009160 	andeq	r9, r0, r0, ror #2
    2b60:	000000cc 	andeq	r0, r0, ip, asr #1
    2b64:	02989c01 	addseq	r9, r8, #256	; 0x100
    2b68:	70080000 	andvc	r0, r8, r0
    2b6c:	01006e69 	tsteq	r0, r9, ror #28
    2b70:	00002c95 	muleq	r0, r5, ip
    2b74:	00180400 	andseq	r0, r8, r0, lsl #8
    2b78:	07850900 	streq	r0, [r5, r0, lsl #18]
    2b7c:	9b010000 	blls	42b84 <__bss_end__+0x39024>
    2b80:	00000133 	andeq	r0, r0, r3, lsr r1
    2b84:	00001822 	andeq	r1, r0, r2, lsr #16
    2b88:	00076b09 	andeq	r6, r7, r9, lsl #22
    2b8c:	2c9d0100 	ldfcss	f0, [sp], {0}
    2b90:	77000000 	strvc	r0, [r0, -r0]
    2b94:	09000018 	stmdbeq	r0, {r3, r4}
    2b98:	00000776 	andeq	r0, r0, r6, ror r7
    2b9c:	002cab01 	eoreq	sl, ip, r1, lsl #22
    2ba0:	1a430000 	bne	10c2ba8 <__bss_end__+0x10b9048>
    2ba4:	f40a0000 	vst4.8	{d0-d3}, [sl], r0
    2ba8:	2e000091 	mcrcs	0, 0, r0, cr0, cr1, {4}
    2bac:	87000005 	strhi	r0, [r0, -r5]
    2bb0:	0b000002 	bleq	2bc0 <_start-0x5440>
    2bb4:	75025001 	strvc	r5, [r2, #-1]
    2bb8:	200c0000 	andcs	r0, ip, r0
    2bbc:	4f000092 	svcmi	0x00000092
    2bc0:	0b000005 	bleq	2bdc <_start-0x5424>
    2bc4:	75025001 	strvc	r5, [r2, #-1]
    2bc8:	15000000 	strne	r0, [r0, #-0]
    2bcc:	00000265 	andeq	r0, r0, r5, ror #4
    2bd0:	0064b301 	rsbeq	fp, r4, r1, lsl #6
    2bd4:	922c0000 	eorls	r0, ip, #0
    2bd8:	004c0000 	subeq	r0, ip, r0
    2bdc:	9c010000 	stcls	0, cr0, [r1], {-0}
    2be0:	000002e0 	andeq	r0, r0, r0, ror #5
    2be4:	6e697008 	cdpvs	0, 6, cr7, cr9, cr8, {0}
    2be8:	2cb30100 	ldfcss	f0, [r3]
    2bec:	61000000 	mrsvs	r0, (UNDEF: 0)
    2bf0:	1600001a 			; <UNDEFINED> instruction: 0x1600001a
    2bf4:	b9010076 	stmdblt	r1, {r1, r2, r4, r5, r6}
    2bf8:	0000002c 	andeq	r0, r0, ip, lsr #32
    2bfc:	00001ab9 			; <UNDEFINED> instruction: 0x00001ab9
    2c00:	00924c17 	addseq	r4, r2, r7, lsl ip
    2c04:	00052e00 	andeq	r2, r5, r0, lsl #28
    2c08:	925c1700 	subsls	r1, ip, #0, 14
    2c0c:	052e0000 	streq	r0, [lr, #-0]!
    2c10:	07000000 	streq	r0, [r0, -r0]
    2c14:	000002c4 	andeq	r0, r0, r4, asr #5
    2c18:	9278c501 	rsbsls	ip, r8, #4194304	; 0x400000
    2c1c:	00780000 	rsbseq	r0, r8, r0
    2c20:	9c010000 	stcls	0, cr0, [r1], {-0}
    2c24:	000003aa 	andeq	r0, r0, sl, lsr #7
    2c28:	6e697008 	cdpvs	0, 6, cr7, cr9, cr8, {0}
    2c2c:	2cc50100 	stfcse	f0, [r5], {0}
    2c30:	ef000000 	svc	0x00000000
    2c34:	0800001a 	stmdaeq	r0, {r1, r3, r4}
    2c38:	c5010076 	strgt	r0, [r1, #-118]	; 0x76
    2c3c:	0000002c 	andeq	r0, r0, ip, lsr #32
    2c40:	00001b29 	andeq	r1, r0, r9, lsr #22
    2c44:	00013e18 	andeq	r3, r1, r8, lsl lr
    2c48:	00928c00 	addseq	r8, r2, r0, lsl #24
    2c4c:	00003000 	andeq	r3, r0, r0
    2c50:	5fcc0100 	svcpl	0x00cc0100
    2c54:	13000003 	movwne	r0, #3
    2c58:	0000014a 	andeq	r0, r0, sl, asr #2
    2c5c:	00001b63 	andeq	r1, r0, r3, ror #22
    2c60:	00928c19 	addseq	r8, r2, r9, lsl ip
    2c64:	00003000 	andeq	r3, r0, r0
    2c68:	01551400 	cmpeq	r5, r0, lsl #8
    2c6c:	1b840000 	blne	fe102c74 <__bss_end__+0xfe0f9114>
    2c70:	60140000 	andsvs	r0, r4, r0
    2c74:	ba000001 	blt	2c80 <_start-0x5380>
    2c78:	0c00001b 	stceq	0, cr0, [r0], {27}
    2c7c:	000092b8 			; <UNDEFINED> instruction: 0x000092b8
    2c80:	0000054f 	andeq	r0, r0, pc, asr #10
    2c84:	0751010b 	ldrbeq	r0, [r1, -fp, lsl #2]
    2c88:	5001f331 	andpl	pc, r1, r1, lsr r3	; <UNPREDICTABLE>
    2c8c:	00241a4f 	eoreq	r1, r4, pc, asr #20
    2c90:	b01a0000 	andslt	r0, sl, r0
    2c94:	bc000001 	stclt	0, cr0, [r0], {1}
    2c98:	34000092 	strcc	r0, [r0], #-146	; 0x92
    2c9c:	01000000 	mrseq	r0, (UNDEF: 0)
    2ca0:	01bc13ce 			; <UNDEFINED> instruction: 0x01bc13ce
    2ca4:	1bfa0000 	blne	ffe82cac <__bss_end__+0xffe7914c>
    2ca8:	bc190000 	ldclt	0, cr0, [r9], {-0}
    2cac:	34000092 	strcc	r0, [r0], #-146	; 0x92
    2cb0:	14000000 	strne	r0, [r0], #-0
    2cb4:	000001c7 	andeq	r0, r0, r7, asr #3
    2cb8:	00001c1b 	andeq	r1, r0, fp, lsl ip
    2cbc:	0001d214 	andeq	sp, r1, r4, lsl r2
    2cc0:	001c5100 	andseq	r5, ip, r0, lsl #2
    2cc4:	92e80c00 	rscls	r0, r8, #0, 24
    2cc8:	054f0000 	strbeq	r0, [pc, #-0]	; 2cd0 <_start-0x5330>
    2ccc:	010b0000 	mrseq	r0, (UNDEF: 11)
    2cd0:	f3310751 	vaba.u<illegal width 64>	q0, <illegal reg q0.5>, <illegal reg q0.5>
    2cd4:	1a4f5001 	bne	13d6ce0 <__bss_end__+0x13cd180>
    2cd8:	00000024 	andeq	r0, r0, r4, lsr #32
    2cdc:	069e0700 	ldreq	r0, [lr], r0, lsl #14
    2ce0:	d1010000 	mrsle	r0, (UNDEF: 1)
    2ce4:	000092f0 	strdeq	r9, [r0], -r0
    2ce8:	000000d8 	ldrdeq	r0, [r0], -r8
    2cec:	042f9c01 	strteq	r9, [pc], #-3073	; 2cf4 <_start-0x530c>
    2cf0:	70080000 	andvc	r0, r8, r0
    2cf4:	01006e69 	tsteq	r0, r9, ror #28
    2cf8:	00002cd1 	ldrdeq	r2, [r0], -r1
    2cfc:	001c9100 	andseq	r9, ip, r0, lsl #2
    2d00:	07661b00 	strbeq	r1, [r6, -r0, lsl #22]!
    2d04:	d1010000 	mrsle	r0, (UNDEF: 1)
    2d08:	000000b2 	strheq	r0, [r0], -r2
    2d0c:	00001caf 	andeq	r1, r0, pc, lsr #25
    2d10:	00078509 	andeq	r8, r7, r9, lsl #10
    2d14:	33d90100 	bicscc	r0, r9, #0, 2
    2d18:	d0000001 	andle	r0, r0, r1
    2d1c:	0900001c 	stmdbeq	r0, {r2, r3, r4}
    2d20:	0000076b 	andeq	r0, r0, fp, ror #14
    2d24:	002cda01 	eoreq	sp, ip, r1, lsl #20
    2d28:	1d250000 	stcne	0, cr0, [r5, #-0]
    2d2c:	76090000 	strvc	r0, [r9], -r0
    2d30:	01000007 	tsteq	r0, r7
    2d34:	00002ce8 	andeq	r2, r0, r8, ror #25
    2d38:	001ef100 	andseq	pc, lr, r0, lsl #2
    2d3c:	938c0a00 	orrls	r0, ip, #0, 20
    2d40:	052e0000 	streq	r0, [lr, #-0]!
    2d44:	041e0000 	ldreq	r0, [lr], #-0
    2d48:	010b0000 	mrseq	r0, (UNDEF: 11)
    2d4c:	00760250 	rsbseq	r0, r6, r0, asr r2
    2d50:	93bc0c00 			; <UNDEFINED> instruction: 0x93bc0c00
    2d54:	054f0000 	strbeq	r0, [pc, #-0]	; 2d5c <_start-0x52a4>
    2d58:	010b0000 	mrseq	r0, (UNDEF: 11)
    2d5c:	00760250 	rsbseq	r0, r6, r0, asr r2
    2d60:	171c0000 	ldrne	r0, [ip, -r0]
    2d64:	01000007 	tsteq	r0, r7
    2d68:	00013328 	andeq	r3, r1, r8, lsr #6
    2d6c:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
    2d70:	1c000094 	stcne	0, cr0, [r0], {148}	; 0x94
    2d74:	0000070d 	andeq	r0, r0, sp, lsl #14
    2d78:	01332901 	teqeq	r3, r1, lsl #18
    2d7c:	03050000 	movweq	r0, #20480	; 0x5000
    2d80:	00009448 	andeq	r9, r0, r8, asr #8
    2d84:	0007031c 	andeq	r0, r7, ip, lsl r3
    2d88:	332a0100 	teqcc	sl, #0, 2
    2d8c:	05000001 	streq	r0, [r0, #-1]
    2d90:	00944403 	addseq	r4, r4, r3, lsl #8
    2d94:	078e1c00 	streq	r1, [lr, r0, lsl #24]
    2d98:	2c010000 	stccs	0, cr0, [r1], {-0}
    2d9c:	00000133 	andeq	r0, r0, r3, lsr r1
    2da0:	94140305 	ldrls	r0, [r4], #-773	; 0x305
    2da4:	5e1c0000 	cdppl	0, 1, cr0, cr12, cr0, {0}
    2da8:	01000007 	tsteq	r0, r7
    2dac:	0001332d 	andeq	r3, r1, sp, lsr #6
    2db0:	18030500 	stmdane	r3, {r8, sl}
    2db4:	1c000094 	stcne	0, cr0, [r0], {148}	; 0x94
    2db8:	0000079d 	muleq	r0, sp, r7
    2dbc:	01332e01 	teqeq	r3, r1, lsl #28
    2dc0:	03050000 	movweq	r0, #20480	; 0x5000
    2dc4:	0000941c 	andeq	r9, r0, ip, lsl r4
    2dc8:	0007a51c 	andeq	sl, r7, ip, lsl r5
    2dcc:	332f0100 	teqcc	pc, #0, 2
    2dd0:	05000001 	streq	r0, [r0, #-1]
    2dd4:	00942003 	addseq	r2, r4, r3
    2dd8:	07ad1c00 	streq	r1, [sp, r0, lsl #24]!
    2ddc:	30010000 	andcc	r0, r1, r0
    2de0:	00000133 	andeq	r0, r0, r3, lsr r1
    2de4:	94240305 	strtls	r0, [r4], #-773	; 0x305
    2de8:	b51c0000 	ldrlt	r0, [ip, #-0]
    2dec:	01000007 	tsteq	r0, r7
    2df0:	00013331 	andeq	r3, r1, r1, lsr r3
    2df4:	28030500 	stmdacs	r3, {r8, sl}
    2df8:	1c000094 	stcne	0, cr0, [r0], {148}	; 0x94
    2dfc:	0000074a 	andeq	r0, r0, sl, asr #14
    2e00:	01333301 	teqeq	r3, r1, lsl #6
    2e04:	03050000 	movweq	r0, #20480	; 0x5000
    2e08:	0000942c 	andeq	r9, r0, ip, lsr #8
    2e0c:	00073c1c 	andeq	r3, r7, ip, lsl ip
    2e10:	33340100 	teqcc	r4, #0, 2
    2e14:	05000001 	streq	r0, [r0, #-1]
    2e18:	00943003 	addseq	r3, r4, r3
    2e1c:	07431c00 	strbeq	r1, [r3, -r0, lsl #24]
    2e20:	36010000 	strcc	r0, [r1], -r0
    2e24:	00000133 	andeq	r0, r0, r3, lsr r1
    2e28:	94340305 	ldrtls	r0, [r4], #-773	; 0x305
    2e2c:	221c0000 	andscs	r0, ip, #0
    2e30:	01000007 	tsteq	r0, r7
    2e34:	00013337 	andeq	r3, r1, r7, lsr r3
    2e38:	38030500 	stmdacc	r3, {r8, sl}
    2e3c:	1c000094 	stcne	0, cr0, [r0], {148}	; 0x94
    2e40:	00000796 	muleq	r0, r6, r7
    2e44:	01333901 	teqeq	r3, r1, lsl #18
    2e48:	03050000 	movweq	r0, #20480	; 0x5000
    2e4c:	0000943c 	andeq	r9, r0, ip, lsr r4
    2e50:	0007351c 	andeq	r3, r7, ip, lsl r5
    2e54:	333a0100 	teqcc	sl, #0, 2
    2e58:	05000001 	streq	r0, [r0, #-1]
    2e5c:	00944003 	addseq	r4, r4, r3
    2e60:	06fd1d00 	ldrbteq	r1, [sp], r0, lsl #26
    2e64:	20010000 	andcs	r0, r1, r0
    2e68:	0000002c 	andeq	r0, r0, ip, lsr #32
    2e6c:	00000543 	andeq	r0, r0, r3, asr #10
    2e70:	0005431e 	andeq	r4, r5, lr, lsl r3
    2e74:	040d0000 	streq	r0, [sp], #-0
    2e78:	00000549 	andeq	r0, r0, r9, asr #10
    2e7c:	00054e1f 	andeq	r4, r5, pc, lsl lr
    2e80:	2c212000 	stccs	0, cr2, [r1], #-0
    2e84:	01000006 	tsteq	r0, r6
    2e88:	0005651e 	andeq	r6, r5, lr, lsl r5
    2e8c:	05651e00 	strbeq	r1, [r5, #-3584]!	; 0xe00
    2e90:	2c1e0000 	ldccs	0, cr0, [lr], {-0}
    2e94:	00000000 	andeq	r0, r0, r0
    2e98:	054e040d 	strbeq	r0, [lr, #-1037]	; 0x40d
    2e9c:	e0000000 	and	r0, r0, r0
    2ea0:	04000000 	streq	r0, [r0], #-0
    2ea4:	000f3c00 	andeq	r3, pc, r0, lsl #24
    2ea8:	29010400 	stmdbcs	r1, {sl}
    2eac:	01000000 	mrseq	r0, (UNDEF: 0)
    2eb0:	000007ce 	andeq	r0, r0, lr, asr #15
    2eb4:	0000033a 	andeq	r0, r0, sl, lsr r3
    2eb8:	000093c8 	andeq	r9, r0, r8, asr #7
    2ebc:	00000014 	andeq	r0, r0, r4, lsl r0
    2ec0:	00000d1e 	andeq	r0, r0, lr, lsl sp
    2ec4:	69050402 	stmdbvs	r5, {r1, sl}
    2ec8:	0300746e 	movweq	r7, #1134	; 0x46e
    2ecc:	01030704 	tsteq	r3, r4, lsl #14
    2ed0:	01030000 	mrseq	r0, (UNDEF: 3)
    2ed4:	0000b606 	andeq	fp, r0, r6, lsl #12
    2ed8:	05020300 	streq	r0, [r2, #-768]	; 0x300
    2edc:	00000148 	andeq	r0, r0, r8, asr #2
    2ee0:	2b050403 	blcs	143ef4 <__bss_end__+0x13a394>
    2ee4:	03000001 	movweq	r0, #1
    2ee8:	01260508 	teqeq	r6, r8, lsl #10
    2eec:	01030000 	mrseq	r0, (UNDEF: 3)
    2ef0:	0000b408 	andeq	fp, r0, r8, lsl #8
    2ef4:	07020300 	streq	r0, [r2, -r0, lsl #6]
    2ef8:	000000cf 	andeq	r0, r0, pc, asr #1
    2efc:	fe070403 	cdp2	4, 0, cr0, cr7, cr3, {0}
    2f00:	03000000 	movweq	r0, #0
    2f04:	00f90708 	rscseq	r0, r9, r8, lsl #14
    2f08:	04030000 	streq	r0, [r3], #-0
    2f0c:	00011d07 	andeq	r1, r1, r7, lsl #26
    2f10:	08010300 	stmdaeq	r1, {r8, r9}
    2f14:	000000bd 	strheq	r0, [r0], -sp
    2f18:	0007bd04 	andeq	fp, r7, r4, lsl #26
    2f1c:	25030100 	strcs	r0, [r3, #-256]	; 0x100
    2f20:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    2f24:	14000093 	strne	r0, [r0], #-147	; 0x93
    2f28:	01000000 	mrseq	r0, (UNDEF: 0)
    2f2c:	0000b09c 	muleq	r0, ip, r0
    2f30:	00630500 	rsbeq	r0, r3, r0, lsl #10
    2f34:	00250301 	eoreq	r0, r5, r1, lsl #6
    2f38:	1f220000 	svcne	0x00220000
    2f3c:	d4060000 	strle	r0, [r6], #-0
    2f40:	d6000093 			; <UNDEFINED> instruction: 0xd6000093
    2f44:	07000000 	streq	r0, [r0, -r0]
    2f48:	74025001 	strvc	r5, [r2], #-1
    2f4c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2f50:	00000025 	andeq	r0, r0, r5, lsr #32
    2f54:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    2f58:	00002509 	andeq	r2, r0, r9, lsl #10
    2f5c:	980a0000 	stmdals	sl, {}	; <UNPREDICTABLE>
    2f60:	01000003 	tsteq	r0, r3
    2f64:	0000d006 	andeq	sp, r0, r6
    2f68:	50030500 	andpl	r0, r3, r0, lsl #10
    2f6c:	0b000094 	bleq	31c4 <_start-0x4e3c>
    2f70:	0000b004 	andeq	fp, r0, r4
    2f74:	02440c00 	subeq	r0, r4, #0, 24
    2f78:	3a020000 	bcc	82f80 <__bss_end__+0x79420>
    2f7c:	00002c09 	andeq	r2, r0, r9, lsl #24
    2f80:	Address 0x0000000000002f80 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <__bss_end__+0x2b654c>
  18:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  1c:	16030000 	strne	r0, [r3], -r0
  20:	3a0e0300 	bcc	380c28 <__bss_end__+0x3770c8>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	04000013 	streq	r0, [r0], #-19
  2c:	0b0b0024 	bleq	2c00c4 <__bss_end__+0x2b6564>
  30:	0e030b3e 	vmoveq.16	d3[0], r0
  34:	0f050000 	svceq	0x00050000
  38:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  3c:	06000013 			; <UNDEFINED> instruction: 0x06000013
  40:	13490026 	movtne	r0, #36902	; 0x9026
  44:	01070000 	mrseq	r0, (UNDEF: 7)
  48:	01134901 	tsteq	r3, r1, lsl #18
  4c:	08000013 	stmdaeq	r0, {r0, r1, r4}
  50:	13490021 	movtne	r0, #36897	; 0x9021
  54:	00000b2f 	andeq	r0, r0, pc, lsr #22
  58:	0b011309 	bleq	44c84 <__bss_end__+0x3b124>
  5c:	3b0b3a0b 	blcc	2ce890 <__bss_end__+0x2c4d30>
  60:	0013010b 	andseq	r0, r3, fp, lsl #2
  64:	000d0a00 	andeq	r0, sp, r0, lsl #20
  68:	0b3a0803 	bleq	e8207c <__bss_end__+0xe7851c>
  6c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  70:	00000b38 	andeq	r0, r0, r8, lsr fp
  74:	03000d0b 	movweq	r0, #3339	; 0xd0b
  78:	3b0b3a0e 	blcc	2ce8b8 <__bss_end__+0x2c4d58>
  7c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  80:	0c00000b 	stceq	0, cr0, [r0], {11}
  84:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  88:	0b3a0e03 	bleq	e8389c <__bss_end__+0xe79d3c>
  8c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  90:	06120111 			; <UNDEFINED> instruction: 0x06120111
  94:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  98:	00130119 	andseq	r0, r3, r9, lsl r1
  9c:	00340d00 	eorseq	r0, r4, r0, lsl #26
  a0:	0b3a0803 	bleq	e820b4 <__bss_end__+0xe78554>
  a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  a8:	00001802 	andeq	r1, r0, r2, lsl #16
  ac:	0300340e 	movweq	r3, #1038	; 0x40e
  b0:	3413490e 	ldrcc	r4, [r3], #-2318	; 0x90e
  b4:	00180219 	andseq	r0, r8, r9, lsl r2
  b8:	010b0f00 	tsteq	fp, r0, lsl #30
  bc:	06120111 			; <UNDEFINED> instruction: 0x06120111
  c0:	00001301 	andeq	r1, r0, r1, lsl #6
  c4:	03003410 	movweq	r3, #1040	; 0x410
  c8:	3b0b3a08 	blcc	2ce8f0 <__bss_end__+0x2c4d90>
  cc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  d0:	11000017 	tstne	r0, r7, lsl r0
  d4:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
  d8:	34120000 	ldrcc	r0, [r2], #-0
  dc:	3a0e0300 	bcc	380ce4 <__bss_end__+0x377184>
  e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  e4:	00170213 	andseq	r0, r7, r3, lsl r2
  e8:	82891300 	addhi	r1, r9, #0, 6
  ec:	01110101 	tsteq	r1, r1, lsl #2
  f0:	13011331 	movwne	r1, #4913	; 0x1331
  f4:	8a140000 	bhi	5000fc <__bss_end__+0x4f659c>
  f8:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
  fc:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
 100:	89150000 	ldmdbhi	r5, {}	; <UNPREDICTABLE>
 104:	11000182 	smlabbne	r0, r2, r1, r0
 108:	00133101 	andseq	r3, r3, r1, lsl #2
 10c:	82891600 	addhi	r1, r9, #0, 12
 110:	01110101 	tsteq	r1, r1, lsl #2
 114:	00001331 	andeq	r1, r0, r1, lsr r3
 118:	49002117 	stmdbmi	r0, {r0, r1, r2, r4, r8, sp}
 11c:	00052f13 	andeq	r2, r5, r3, lsl pc
 120:	012e1800 	teqeq	lr, r0, lsl #16
 124:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 128:	0b3b0b3a 	bleq	ec2e18 <__bss_end__+0xeb92b8>
 12c:	13491927 	movtne	r1, #39207	; 0x9927
 130:	1301193c 	movwne	r1, #6460	; 0x193c
 134:	05190000 	ldreq	r0, [r9, #-0]
 138:	00134900 	andseq	r4, r3, r0, lsl #18
 13c:	00181a00 	andseq	r1, r8, r0, lsl #20
 140:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
 144:	03193f00 	tsteq	r9, #0, 30
 148:	3b0b3a0e 	blcc	2ce988 <__bss_end__+0x2c4e28>
 14c:	3c19270b 	ldccc	7, cr2, [r9], {11}
 150:	1c000019 	stcne	0, cr0, [r0], {25}
 154:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 158:	0b3a0e03 	bleq	e8396c <__bss_end__+0xe79e0c>
 15c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 160:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 164:	01000000 	mrseq	r0, (UNDEF: 0)
 168:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 16c:	0e030b13 	vmoveq.32	d3[0], r0
 170:	01110e1b 	tsteq	r1, fp, lsl lr
 174:	17100612 			; <UNDEFINED> instruction: 0x17100612
 178:	24020000 	strcs	r0, [r2], #-0
 17c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 180:	0008030b 	andeq	r0, r8, fp, lsl #6
 184:	00240300 	eoreq	r0, r4, r0, lsl #6
 188:	0b3e0b0b 	bleq	f82dbc <__bss_end__+0xf7925c>
 18c:	00000e03 	andeq	r0, r0, r3, lsl #28
 190:	03001604 	movweq	r1, #1540	; 0x604
 194:	3b0b3a0e 	blcc	2ce9d4 <__bss_end__+0x2c4e74>
 198:	0013490b 	andseq	r4, r3, fp, lsl #18
 19c:	000f0500 	andeq	r0, pc, r0, lsl #10
 1a0:	00000b0b 	andeq	r0, r0, fp, lsl #22
 1a4:	0b000f06 	bleq	3dc4 <_start-0x423c>
 1a8:	0013490b 	andseq	r4, r3, fp, lsl #18
 1ac:	00260700 	eoreq	r0, r6, r0, lsl #14
 1b0:	00001349 	andeq	r1, r0, r9, asr #6
 1b4:	0b011308 	bleq	44ddc <__bss_end__+0x3b27c>
 1b8:	3b0b3a0b 	blcc	2ce9ec <__bss_end__+0x2c4e8c>
 1bc:	0013010b 	andseq	r0, r3, fp, lsl #2
 1c0:	000d0900 	andeq	r0, sp, r0, lsl #18
 1c4:	0b3a0803 	bleq	e821d8 <__bss_end__+0xe78678>
 1c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1cc:	00000b38 	andeq	r0, r0, r8, lsr fp
 1d0:	03000d0a 	movweq	r0, #3338	; 0xd0a
 1d4:	3b0b3a0e 	blcc	2cea14 <__bss_end__+0x2c4eb4>
 1d8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 1dc:	0b00000b 	bleq	210 <_start-0x7df0>
 1e0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 1e4:	0b3a0b0b 	bleq	e82e18 <__bss_end__+0xe792b8>
 1e8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 1ec:	0d0c0000 	stceq	0, cr0, [ip, #-0]
 1f0:	490e0300 	stmdbmi	lr, {r8, r9}
 1f4:	340b3813 	strcc	r3, [fp], #-2067	; 0x813
 1f8:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
 1fc:	0e03012e 	adfeqsp	f0, f3, #0.5
 200:	0b3b0b3a 	bleq	ec2ef0 <__bss_end__+0xeb9390>
 204:	0b201927 	bleq	8066a8 <__bss_end__+0x7fcb48>
 208:	00001301 	andeq	r1, r0, r1, lsl #6
 20c:	0300050e 	movweq	r0, #1294	; 0x50e
 210:	3b0b3a0e 	blcc	2cea50 <__bss_end__+0x2c4ef0>
 214:	0013490b 	andseq	r4, r3, fp, lsl #18
 218:	00050f00 	andeq	r0, r5, r0, lsl #30
 21c:	0b3a0803 	bleq	e82230 <__bss_end__+0xe786d0>
 220:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 224:	0b100000 	bleq	40022c <__bss_end__+0x3f66cc>
 228:	11000001 	tstne	r0, r1
 22c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 230:	0b3b0b3a 	bleq	ec2f20 <__bss_end__+0xeb93c0>
 234:	00001349 	andeq	r1, r0, r9, asr #6
 238:	3f012e12 	svccc	0x00012e12
 23c:	3a0e0319 	bcc	380ea8 <__bss_end__+0x377348>
 240:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 244:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 248:	97184006 	ldrls	r4, [r8, -r6]
 24c:	13011942 	movwne	r1, #6466	; 0x1942
 250:	05130000 	ldreq	r0, [r3, #-0]
 254:	3a0e0300 	bcc	380e5c <__bss_end__+0x3772fc>
 258:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 25c:	00170213 	andseq	r0, r7, r3, lsl r2
 260:	00051400 	andeq	r1, r5, r0, lsl #8
 264:	0b3a0803 	bleq	e82278 <__bss_end__+0xe78718>
 268:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 26c:	00001702 	andeq	r1, r0, r2, lsl #14
 270:	03003415 	movweq	r3, #1045	; 0x415
 274:	3b0b3a08 	blcc	2cea9c <__bss_end__+0x2c4f3c>
 278:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 27c:	16000018 			; <UNDEFINED> instruction: 0x16000018
 280:	08030034 	stmdaeq	r3, {r2, r4, r5}
 284:	0b3b0b3a 	bleq	ec2f74 <__bss_end__+0xeb9414>
 288:	17021349 	strne	r1, [r2, -r9, asr #6]
 28c:	34170000 	ldrcc	r0, [r7], #-0
 290:	3a080300 	bcc	200e98 <__bss_end__+0x1f7338>
 294:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 298:	18000013 	stmdane	r0, {r0, r1, r4}
 29c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 2a0:	0b3b0b3a 	bleq	ec2f90 <__bss_end__+0xeb9430>
 2a4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 2a8:	0b190000 	bleq	6402b0 <__bss_end__+0x636750>
 2ac:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 2b0:	00130106 	andseq	r0, r3, r6, lsl #2
 2b4:	011d1a00 	tsteq	sp, r0, lsl #20
 2b8:	01111331 	tsteq	r1, r1, lsr r3
 2bc:	0b580612 	bleq	1601b0c <__bss_end__+0x15f7fac>
 2c0:	13010b59 	movwne	r0, #7001	; 0x1b59
 2c4:	051b0000 	ldreq	r0, [fp, #-0]
 2c8:	02133100 	andseq	r3, r3, #0, 2
 2cc:	1c000017 	stcne	0, cr0, [r0], {23}
 2d0:	13310005 	teqne	r1, #5
 2d4:	00001802 	andeq	r1, r0, r2, lsl #16
 2d8:	3100051d 	tstcc	r0, sp, lsl r5
 2dc:	000b1c13 	andeq	r1, fp, r3, lsl ip
 2e0:	010b1e00 	tsteq	fp, r0, lsl #28
 2e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2e8:	341f0000 	ldrcc	r0, [pc], #-0	; 2f0 <_start-0x7d10>
 2ec:	02133100 	andseq	r3, r3, #0, 2
 2f0:	20000017 	andcs	r0, r0, r7, lsl r0
 2f4:	01018289 	smlabbeq	r1, r9, r2, r8
 2f8:	13310111 	teqne	r1, #1073741828	; 0x40000004
 2fc:	8a210000 	bhi	840304 <__bss_end__+0x8367a4>
 300:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
 304:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
 308:	1d220000 	stcne	0, cr0, [r2, #-0]
 30c:	11133101 	tstne	r3, r1, lsl #2
 310:	58061201 	stmdapl	r6, {r0, r9, ip}
 314:	000b590b 	andeq	r5, fp, fp, lsl #18
 318:	012e2300 	teqeq	lr, r0, lsl #6
 31c:	0b3a0e03 	bleq	e83b30 <__bss_end__+0xe79fd0>
 320:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 324:	0b201349 	bleq	805050 <__bss_end__+0x7fb4f0>
 328:	00001301 	andeq	r1, r0, r1, lsl #6
 32c:	3f012e24 	svccc	0x00012e24
 330:	3a0e0319 	bcc	380f9c <__bss_end__+0x37743c>
 334:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 338:	11134919 	tstne	r3, r9, lsl r9
 33c:	40061201 	andmi	r1, r6, r1, lsl #4
 340:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 344:	00001301 	andeq	r1, r0, r1, lsl #6
 348:	01828925 	orreq	r8, r2, r5, lsr #18
 34c:	31011100 	mrscc	r1, (UNDEF: 17)
 350:	26000013 			; <UNDEFINED> instruction: 0x26000013
 354:	01018289 	smlabbeq	r1, r9, r2, r8
 358:	13310111 	teqne	r1, #1073741828	; 0x40000004
 35c:	00001301 	andeq	r1, r0, r1, lsl #6
 360:	03003427 	movweq	r3, #1063	; 0x427
 364:	3b0b3a0e 	blcc	2ceba4 <__bss_end__+0x2c5044>
 368:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 36c:	28000017 	stmdacs	r0, {r0, r1, r2, r4}
 370:	13310005 	teqne	r1, #5
 374:	05290000 	streq	r0, [r9, #-0]!
 378:	3a0e0300 	bcc	380f80 <__bss_end__+0x377420>
 37c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 380:	00180213 	andseq	r0, r8, r3, lsl r2
 384:	00342a00 	eorseq	r2, r4, r0, lsl #20
 388:	13490e03 	movtne	r0, #40451	; 0x9e03
 38c:	18021934 	stmdane	r2, {r2, r4, r5, r8, fp, ip}
 390:	012b0000 	teqeq	fp, r0
 394:	01134901 	tsteq	r3, r1, lsl #18
 398:	2c000013 	stccs	0, cr0, [r0], {19}
 39c:	13490021 	movtne	r0, #36897	; 0x9021
 3a0:	00000b2f 	andeq	r0, r0, pc, lsr #22
 3a4:	0300342d 	movweq	r3, #1069	; 0x42d
 3a8:	3b0b3a08 	blcc	2cebd0 <__bss_end__+0x2c5070>
 3ac:	1c13490b 	ldcne	9, cr4, [r3], {11}
 3b0:	2e000006 	cdpcs	0, 0, cr0, cr0, cr6, {0}
 3b4:	08030034 	stmdaeq	r3, {r2, r4, r5}
 3b8:	0b3b0b3a 	bleq	ec30a8 <__bss_end__+0xeb9548>
 3bc:	0b1c1349 	bleq	7050e8 <__bss_end__+0x6fb588>
 3c0:	052f0000 	streq	r0, [pc, #-0]!	; 3c8 <_start-0x7c38>
 3c4:	3a080300 	bcc	200fcc <__bss_end__+0x1f746c>
 3c8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3cc:	00180213 	andseq	r0, r8, r3, lsl r2
 3d0:	00183000 	andseq	r3, r8, r0
 3d4:	21310000 	teqcs	r1, r0
 3d8:	2f134900 	svccs	0x00134900
 3dc:	32000005 	andcc	r0, r0, #5
 3e0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 3e4:	0b3a0e03 	bleq	e83bf8 <__bss_end__+0xe7a098>
 3e8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 3ec:	1301193c 	movwne	r1, #6460	; 0x193c
 3f0:	05330000 	ldreq	r0, [r3, #-0]!
 3f4:	00134900 	andseq	r4, r3, r0, lsl #18
 3f8:	002e3400 	eoreq	r3, lr, r0, lsl #8
 3fc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 400:	0b3b0b3a 	bleq	ec30f0 <__bss_end__+0xeb9590>
 404:	13491927 	movtne	r1, #39207	; 0x9927
 408:	0000193c 	andeq	r1, r0, ip, lsr r9
 40c:	3f012e35 	svccc	0x00012e35
 410:	3a0e0319 	bcc	38107c <__bss_end__+0x37751c>
 414:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 418:	3c134919 	ldccc	9, cr4, [r3], {25}
 41c:	00130119 	andseq	r0, r3, r9, lsl r1
 420:	002e3600 	eoreq	r3, lr, r0, lsl #12
 424:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 428:	0b3b0b3a 	bleq	ec3118 <__bss_end__+0xeb95b8>
 42c:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 430:	2e370000 	cdpcs	0, 3, cr0, cr7, cr0, {0}
 434:	03193f01 	tsteq	r9, #1, 30
 438:	3b0b3a0e 	blcc	2cec78 <__bss_end__+0x2c5118>
 43c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 440:	00193c13 	andseq	r3, r9, r3, lsl ip
 444:	11010000 	mrsne	r0, (UNDEF: 1)
 448:	130e2501 	movwne	r2, #58625	; 0xe501
 44c:	1b0e030b 	blne	381080 <__bss_end__+0x377520>
 450:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 454:	00171006 	andseq	r1, r7, r6
 458:	00160200 	andseq	r0, r6, r0, lsl #4
 45c:	0b3a0e03 	bleq	e83c70 <__bss_end__+0xe7a110>
 460:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 464:	13030000 	movwne	r0, #12288	; 0x3000
 468:	0b0e0301 	bleq	381074 <__bss_end__+0x377514>
 46c:	3b0b3a0b 	blcc	2ceca0 <__bss_end__+0x2c5140>
 470:	0013010b 	andseq	r0, r3, fp, lsl #2
 474:	000d0400 	andeq	r0, sp, r0, lsl #8
 478:	13490e03 	movtne	r0, #40451	; 0x9e03
 47c:	19340b38 	ldmdbne	r4!, {r3, r4, r5, r8, r9, fp}
 480:	0f050000 	svceq	0x00050000
 484:	000b0b00 	andeq	r0, fp, r0, lsl #22
 488:	00240600 	eoreq	r0, r4, r0, lsl #12
 48c:	0b3e0b0b 	bleq	f830c0 <__bss_end__+0xf79560>
 490:	00000803 	andeq	r0, r0, r3, lsl #16
 494:	0b002407 	bleq	94b8 <__FUNCTION__.4184+0x64>
 498:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 49c:	0800000e 	stmdaeq	r0, {r1, r2, r3}
 4a0:	0b0b000f 	bleq	2c04e4 <__bss_end__+0x2b6984>
 4a4:	00001349 	andeq	r1, r0, r9, asr #6
 4a8:	49002609 	stmdbmi	r0, {r0, r3, r9, sl, sp}
 4ac:	0a000013 	beq	500 <_start-0x7b00>
 4b0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 4b4:	0b3a0e03 	bleq	e83cc8 <__bss_end__+0xe7a168>
 4b8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 4bc:	01111349 	tsteq	r1, r9, asr #6
 4c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4c4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 4c8:	0b000013 	bleq	51c <_start-0x7ae4>
 4cc:	08030005 	stmdaeq	r3, {r0, r2}
 4d0:	0b3b0b3a 	bleq	ec31c0 <__bss_end__+0xeb9660>
 4d4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 4d8:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
 4dc:	0d000000 	stceq	0, cr0, [r0, #-0]
 4e0:	08030034 	stmdaeq	r3, {r2, r4, r5}
 4e4:	0b3b0b3a 	bleq	ec31d4 <__bss_end__+0xeb9674>
 4e8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 4ec:	340e0000 	strcc	r0, [lr], #-0
 4f0:	3a0e0300 	bcc	3810f8 <__bss_end__+0x377598>
 4f4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4f8:	00180213 	andseq	r0, r8, r3, lsl r2
 4fc:	00340f00 	eorseq	r0, r4, r0, lsl #30
 500:	0b3a0803 	bleq	e82514 <__bss_end__+0xe789b4>
 504:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 508:	00001702 	andeq	r1, r0, r2, lsl #14
 50c:	01828910 	orreq	r8, r2, r0, lsl r9
 510:	31011101 	tstcc	r1, r1, lsl #2
 514:	00130113 	andseq	r0, r3, r3, lsl r1
 518:	828a1100 	addhi	r1, sl, #0, 2
 51c:	18020001 	stmdane	r2, {r0}
 520:	00184291 	mulseq	r8, r1, r2
 524:	82891200 	addhi	r1, r9, #0, 4
 528:	01110101 	tsteq	r1, r1, lsl #2
 52c:	01130000 	tsteq	r3, r0
 530:	01134901 	tsteq	r3, r1, lsl #18
 534:	14000013 	strne	r0, [r0], #-19
 538:	13490021 	movtne	r0, #36897	; 0x9021
 53c:	0000052f 	andeq	r0, r0, pc, lsr #10
 540:	27011515 	smladcs	r1, r5, r5, r1
 544:	01134919 	tsteq	r3, r9, lsl r9
 548:	16000013 			; <UNDEFINED> instruction: 0x16000013
 54c:	13490005 	movtne	r0, #36869	; 0x9005
 550:	34170000 	ldrcc	r0, [r7], #-0
 554:	3a0e0300 	bcc	38115c <__bss_end__+0x3775fc>
 558:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 55c:	3c193f13 	ldccc	15, cr3, [r9], {19}
 560:	18000019 	stmdane	r0, {r0, r3, r4}
 564:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 568:	0b3a0e03 	bleq	e83d7c <__bss_end__+0xe7a21c>
 56c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 570:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 574:	01000000 	mrseq	r0, (UNDEF: 0)
 578:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 57c:	0e030b13 	vmoveq.32	d3[0], r0
 580:	01110e1b 	tsteq	r1, fp, lsl lr
 584:	17100612 			; <UNDEFINED> instruction: 0x17100612
 588:	24020000 	strcs	r0, [r2], #-0
 58c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 590:	0008030b 	andeq	r0, r8, fp, lsl #6
 594:	00240300 	eoreq	r0, r4, r0, lsl #6
 598:	0b3e0b0b 	bleq	f831cc <__bss_end__+0xf7966c>
 59c:	00000e03 	andeq	r0, r0, r3, lsl #28
 5a0:	0b000f04 	bleq	41b8 <_start-0x3e48>
 5a4:	0013490b 	andseq	r4, r3, fp, lsl #18
 5a8:	00260500 	eoreq	r0, r6, r0, lsl #10
 5ac:	00001349 	andeq	r1, r0, r9, asr #6
 5b0:	3f012e06 	svccc	0x00012e06
 5b4:	3a0e0319 	bcc	381220 <__bss_end__+0x3776c0>
 5b8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 5bc:	11134919 	tstne	r3, r9, lsl r9
 5c0:	40061201 	andmi	r1, r6, r1, lsl #4
 5c4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 5c8:	00001301 	andeq	r1, r0, r1, lsl #6
 5cc:	03000507 	movweq	r0, #1287	; 0x507
 5d0:	3b0b3a08 	blcc	2cedf8 <__bss_end__+0x2c5298>
 5d4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 5d8:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
 5dc:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 5e0:	13011349 	movwne	r1, #4937	; 0x1349
 5e4:	05090000 	streq	r0, [r9, #-0]
 5e8:	00134900 	andseq	r4, r3, r0, lsl #18
 5ec:	00340a00 	eorseq	r0, r4, r0, lsl #20
 5f0:	0b3a0e03 	bleq	e83e04 <__bss_end__+0xe7a2a4>
 5f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 5f8:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 5fc:	340b0000 	strcc	r0, [fp], #-0
 600:	3a0e0300 	bcc	381208 <__bss_end__+0x3776a8>
 604:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 608:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 60c:	00000018 	andeq	r0, r0, r8, lsl r0
 610:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 614:	030b130e 	movweq	r1, #45838	; 0xb30e
 618:	110e1b0e 	tstne	lr, lr, lsl #22
 61c:	10061201 	andne	r1, r6, r1, lsl #4
 620:	02000017 	andeq	r0, r0, #23
 624:	0b0b0024 	bleq	2c06bc <__bss_end__+0x2b6b5c>
 628:	0e030b3e 	vmoveq.16	d3[0], r0
 62c:	24030000 	strcs	r0, [r3], #-0
 630:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 634:	0008030b 	andeq	r0, r8, fp, lsl #6
 638:	000f0400 	andeq	r0, pc, r0, lsl #8
 63c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 640:	26050000 	strcs	r0, [r5], -r0
 644:	00134900 	andseq	r4, r3, r0, lsl #18
 648:	00160600 	andseq	r0, r6, r0, lsl #12
 64c:	0b3a0e03 	bleq	e83e60 <__bss_end__+0xe7a300>
 650:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 654:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
 658:	03193f01 	tsteq	r9, #1, 30
 65c:	3b0b3a0e 	blcc	2cee9c <__bss_end__+0x2c533c>
 660:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 664:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 668:	97184006 	ldrls	r4, [r8, -r6]
 66c:	00001942 	andeq	r1, r0, r2, asr #18
 670:	03000508 	movweq	r0, #1288	; 0x508
 674:	3b0b3a08 	blcc	2cee9c <__bss_end__+0x2c533c>
 678:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 67c:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
 680:	08030034 	stmdaeq	r3, {r2, r4, r5}
 684:	0b3b0b3a 	bleq	ec3374 <__bss_end__+0xeb9814>
 688:	17021349 	strne	r1, [r2, -r9, asr #6]
 68c:	01000000 	mrseq	r0, (UNDEF: 0)
 690:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 694:	0e030b13 	vmoveq.32	d3[0], r0
 698:	01110e1b 	tsteq	r1, fp, lsl lr
 69c:	17100612 			; <UNDEFINED> instruction: 0x17100612
 6a0:	24020000 	strcs	r0, [r2], #-0
 6a4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 6a8:	0008030b 	andeq	r0, r8, fp, lsl #6
 6ac:	00240300 	eoreq	r0, r4, r0, lsl #6
 6b0:	0b3e0b0b 	bleq	f832e4 <__bss_end__+0xf79784>
 6b4:	00000e03 	andeq	r0, r0, r3, lsl #28
 6b8:	0b000f04 	bleq	42d0 <_start-0x3d30>
 6bc:	0500000b 	streq	r0, [r0, #-11]
 6c0:	0b0b000f 	bleq	2c0704 <__bss_end__+0x2b6ba4>
 6c4:	00001349 	andeq	r1, r0, r9, asr #6
 6c8:	49002606 	stmdbmi	r0, {r1, r2, r9, sl, sp}
 6cc:	07000013 	smladeq	r0, r3, r0, r0
 6d0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 6d4:	0b3b0b3a 	bleq	ec33c4 <__bss_end__+0xeb9864>
 6d8:	00001349 	andeq	r1, r0, r9, asr #6
 6dc:	03011308 	movweq	r1, #4872	; 0x1308
 6e0:	3a0b0b0e 	bcc	2c3320 <__bss_end__+0x2b97c0>
 6e4:	010b3b0b 	tsteq	fp, fp, lsl #22
 6e8:	09000013 	stmdbeq	r0, {r0, r1, r4}
 6ec:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 6f0:	0b381349 	bleq	e0541c <__bss_end__+0xdfb8bc>
 6f4:	00001934 	andeq	r1, r0, r4, lsr r9
 6f8:	03012e0a 	movweq	r2, #7690	; 0x1e0a
 6fc:	3b0b3a0e 	blcc	2cef3c <__bss_end__+0x2c53dc>
 700:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 704:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 708:	97184006 	ldrls	r4, [r8, -r6]
 70c:	13011942 	movwne	r1, #6466	; 0x1942
 710:	050b0000 	streq	r0, [fp, #-0]
 714:	3a080300 	bcc	20131c <__bss_end__+0x1f77bc>
 718:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 71c:	00170213 	andseq	r0, r7, r3, lsl r2
 720:	012e0c00 	teqeq	lr, r0, lsl #24
 724:	0b3a0803 	bleq	e82738 <__bss_end__+0xe78bd8>
 728:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 72c:	01111349 	tsteq	r1, r9, asr #6
 730:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 734:	01194297 			; <UNDEFINED> instruction: 0x01194297
 738:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 73c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 740:	0b3b0b3a 	bleq	ec3430 <__bss_end__+0xeb98d0>
 744:	17021349 	strne	r1, [r2, -r9, asr #6]
 748:	050e0000 	streq	r0, [lr, #-0]
 74c:	3a0e0300 	bcc	381354 <__bss_end__+0x3777f4>
 750:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 754:	00180213 	andseq	r0, r8, r3, lsl r2
 758:	00340f00 	eorseq	r0, r4, r0, lsl #30
 75c:	0b3a0803 	bleq	e82770 <__bss_end__+0xe78c10>
 760:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 764:	00001802 	andeq	r1, r0, r2, lsl #16
 768:	03003410 	movweq	r3, #1040	; 0x410
 76c:	3b0b3a08 	blcc	2cef94 <__bss_end__+0x2c5434>
 770:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 774:	11000017 	tstne	r0, r7, lsl r0
 778:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 77c:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
 780:	00001802 	andeq	r1, r0, r2, lsl #16
 784:	11010b12 	tstne	r1, r2, lsl fp
 788:	01061201 	tsteq	r6, r1, lsl #4
 78c:	13000013 	movwne	r0, #19
 790:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 794:	0b3b0b3a 	bleq	ec3484 <__bss_end__+0xeb9924>
 798:	17021349 	strne	r1, [r2, -r9, asr #6]
 79c:	89140000 	ldmdbhi	r4, {}	; <UNPREDICTABLE>
 7a0:	11010182 	smlabbne	r1, r2, r1, r0
 7a4:	01133101 	tsteq	r3, r1, lsl #2
 7a8:	15000013 	strne	r0, [r0, #-19]
 7ac:	0001828a 	andeq	r8, r1, sl, lsl #5
 7b0:	42911802 	addsmi	r1, r1, #131072	; 0x20000
 7b4:	16000018 			; <UNDEFINED> instruction: 0x16000018
 7b8:	00018289 	andeq	r8, r1, r9, lsl #5
 7bc:	13310111 	teqne	r1, #1073741828	; 0x40000004
 7c0:	89170000 	ldmdbhi	r7, {}	; <UNPREDICTABLE>
 7c4:	11010182 	smlabbne	r1, r2, r1, r0
 7c8:	00133101 	andseq	r3, r3, r1, lsl #2
 7cc:	01011800 	tsteq	r1, r0, lsl #16
 7d0:	13011349 	movwne	r1, #4937	; 0x1349
 7d4:	21190000 	tstcs	r9, r0
 7d8:	2f134900 	svccs	0x00134900
 7dc:	1a00000b 	bne	810 <_start-0x77f0>
 7e0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 7e4:	0b3a0e03 	bleq	e83ff8 <__bss_end__+0xe7a498>
 7e8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 7ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
 7f0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 7f4:	00130119 	andseq	r0, r3, r9, lsl r1
 7f8:	01151b00 	tsteq	r5, r0, lsl #22
 7fc:	13491927 	movtne	r1, #39207	; 0x9927
 800:	00001301 	andeq	r1, r0, r1, lsl #6
 804:	4900051c 	stmdbmi	r0, {r2, r3, r4, r8, sl}
 808:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
 80c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 810:	0b3a0e03 	bleq	e84024 <__bss_end__+0xe7a4c4>
 814:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 818:	01111349 	tsteq	r1, r9, asr #6
 81c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 820:	01194297 			; <UNDEFINED> instruction: 0x01194297
 824:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
 828:	0111010b 	tsteq	r1, fp, lsl #2
 82c:	00000612 	andeq	r0, r0, r2, lsl r6
 830:	0300341f 	movweq	r3, #1055	; 0x41f
 834:	3b0b3a0e 	blcc	2cf074 <__bss_end__+0x2c5514>
 838:	3f13490b 	svccc	0x0013490b
 83c:	00193c19 	andseq	r3, r9, r9, lsl ip
 840:	012e2000 	teqeq	lr, r0
 844:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 848:	0b3b0b3a 	bleq	ec3538 <__bss_end__+0xeb99d8>
 84c:	13491927 	movtne	r1, #39207	; 0x9927
 850:	1301193c 	movwne	r1, #6460	; 0x193c
 854:	18210000 	stmdane	r1!, {}	; <UNPREDICTABLE>
 858:	22000000 	andcs	r0, r0, #0
 85c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 860:	0b3a0e03 	bleq	e84074 <__bss_end__+0xe7a514>
 864:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 868:	0000193c 	andeq	r1, r0, ip, lsr r9
 86c:	01110100 	tsteq	r1, r0, lsl #2
 870:	0b130e25 	bleq	4c410c <__bss_end__+0x4ba5ac>
 874:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 878:	06120111 			; <UNDEFINED> instruction: 0x06120111
 87c:	00001710 	andeq	r1, r0, r0, lsl r7
 880:	0b002402 	bleq	9890 <__bss_start__+0x130>
 884:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 888:	03000008 	movweq	r0, #8
 88c:	0b0b0024 	bleq	2c0924 <__bss_end__+0x2b6dc4>
 890:	0e030b3e 	vmoveq.16	d3[0], r0
 894:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
 898:	03193f01 	tsteq	r9, #1, 30
 89c:	3b0b3a0e 	blcc	2cf0dc <__bss_end__+0x2c557c>
 8a0:	1119270b 	tstne	r9, fp, lsl #14
 8a4:	40061201 	andmi	r1, r6, r1, lsl #4
 8a8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 8ac:	00001301 	andeq	r1, r0, r1, lsl #6
 8b0:	03003405 	movweq	r3, #1029	; 0x405
 8b4:	3b0b3a08 	blcc	2cf0dc <__bss_end__+0x2c557c>
 8b8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 8bc:	06000017 			; <UNDEFINED> instruction: 0x06000017
 8c0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 8c4:	0b3a0e03 	bleq	e840d8 <__bss_end__+0xe7a578>
 8c8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 8cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 8d0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 8d4:	00000019 	andeq	r0, r0, r9, lsl r0
 8d8:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 8dc:	030b130e 	movweq	r1, #45838	; 0xb30e
 8e0:	110e1b0e 	tstne	lr, lr, lsl #22
 8e4:	10061201 	andne	r1, r6, r1, lsl #4
 8e8:	02000017 	andeq	r0, r0, #23
 8ec:	0b0b0024 	bleq	2c0984 <__bss_end__+0x2b6e24>
 8f0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 8f4:	24030000 	strcs	r0, [r3], #-0
 8f8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 8fc:	000e030b 	andeq	r0, lr, fp, lsl #6
 900:	000f0400 	andeq	r0, pc, r0, lsl #8
 904:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 908:	26050000 	strcs	r0, [r5], -r0
 90c:	00134900 	andseq	r4, r3, r0, lsl #18
 910:	012e0600 	teqeq	lr, r0, lsl #12
 914:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 918:	0b3b0b3a 	bleq	ec3608 <__bss_end__+0xeb9aa8>
 91c:	01111927 	tsteq	r1, r7, lsr #18
 920:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 924:	01194297 			; <UNDEFINED> instruction: 0x01194297
 928:	07000013 	smladeq	r0, r3, r0, r0
 92c:	01018289 	smlabbeq	r1, r9, r2, r8
 930:	13010111 	movwne	r0, #4369	; 0x1111
 934:	8a080000 	bhi	20093c <__bss_end__+0x1f6ddc>
 938:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
 93c:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
 940:	89090000 	stmdbhi	r9, {}	; <UNPREDICTABLE>
 944:	11010182 	smlabbne	r1, r2, r1, r0
 948:	01133101 	tsteq	r3, r1, lsl #2
 94c:	0a000013 	beq	9a0 <_start-0x7660>
 950:	00018289 	andeq	r8, r1, r9, lsl #5
 954:	13310111 	teqne	r1, #1073741828	; 0x40000004
 958:	150b0000 	strne	r0, [fp, #-0]
 95c:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
 960:	00130113 	andseq	r0, r3, r3, lsl r1
 964:	00050c00 	andeq	r0, r5, r0, lsl #24
 968:	00001349 	andeq	r1, r0, r9, asr #6
 96c:	0300340d 	movweq	r3, #1037	; 0x40d
 970:	3b0b3a0e 	blcc	2cf1b0 <__bss_end__+0x2c5650>
 974:	3f13490b 	svccc	0x0013490b
 978:	00193c19 	andseq	r3, r9, r9, lsl ip
 97c:	012e0e00 	teqeq	lr, r0, lsl #28
 980:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 984:	0b3b0b3a 	bleq	ec3674 <__bss_end__+0xeb9b14>
 988:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 98c:	00001301 	andeq	r1, r0, r1, lsl #6
 990:	3f002e0f 	svccc	0x00002e0f
 994:	3a0e0319 	bcc	381600 <__bss_end__+0x377aa0>
 998:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 99c:	00193c19 	andseq	r3, r9, r9, lsl ip
 9a0:	11010000 	mrsne	r0, (UNDEF: 1)
 9a4:	130e2501 	movwne	r2, #58625	; 0xe501
 9a8:	1b0e030b 	blne	3815dc <__bss_end__+0x377a7c>
 9ac:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 9b0:	00171006 	andseq	r1, r7, r6
 9b4:	00240200 	eoreq	r0, r4, r0, lsl #4
 9b8:	0b3e0b0b 	bleq	f835ec <__bss_end__+0xf79a8c>
 9bc:	00000803 	andeq	r0, r0, r3, lsl #16
 9c0:	0b002403 	bleq	99d4 <__bss_start__+0x274>
 9c4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 9c8:	0400000e 	streq	r0, [r0], #-14
 9cc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 9d0:	0b3a0e03 	bleq	e841e4 <__bss_end__+0xe7a684>
 9d4:	01110b3b 	tsteq	r1, fp, lsr fp
 9d8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 9dc:	01194297 			; <UNDEFINED> instruction: 0x01194297
 9e0:	05000013 	streq	r0, [r0, #-19]
 9e4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 9e8:	0b3b0b3a 	bleq	ec36d8 <__bss_end__+0xeb9b78>
 9ec:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 9f0:	0000193c 	andeq	r1, r0, ip, lsr r9
 9f4:	3f012e06 	svccc	0x00012e06
 9f8:	3a0e0319 	bcc	381664 <__bss_end__+0x377b04>
 9fc:	3c0b3b0b 	stccc	11, cr3, [fp], {11}
 a00:	00130119 	andseq	r0, r3, r9, lsl r1
 a04:	00180700 	andseq	r0, r8, r0, lsl #14
 a08:	34080000 	strcc	r0, [r8], #-0
 a0c:	3a080300 	bcc	201614 <__bss_end__+0x1f7ab4>
 a10:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 a14:	00170213 	andseq	r0, r7, r3, lsl r2
 a18:	00340900 	eorseq	r0, r4, r0, lsl #18
 a1c:	0b3a0e03 	bleq	e84230 <__bss_end__+0xe7a6d0>
 a20:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 a24:	890a0000 	stmdbhi	sl, {}	; <UNPREDICTABLE>
 a28:	11000182 	smlabbne	r0, r2, r1, r0
 a2c:	00133101 	andseq	r3, r3, r1, lsl #2
 a30:	000f0b00 	andeq	r0, pc, r0, lsl #22
 a34:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 a38:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
 a3c:	03193f00 	tsteq	r9, #0, 30
 a40:	3b0b3a0e 	blcc	2cf280 <__bss_end__+0x2c5720>
 a44:	3c19270b 	ldccc	7, cr2, [r9], {11}
 a48:	00000019 	andeq	r0, r0, r9, lsl r0
 a4c:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 a50:	030b130e 	movweq	r1, #45838	; 0xb30e
 a54:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
 a58:	10011117 	andne	r1, r1, r7, lsl r1
 a5c:	02000017 	andeq	r0, r0, #23
 a60:	0b0b0024 	bleq	2c0af8 <__bss_end__+0x2b6f98>
 a64:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 a68:	24030000 	strcs	r0, [r3], #-0
 a6c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 a70:	000e030b 	andeq	r0, lr, fp, lsl #6
 a74:	012e0400 	teqeq	lr, r0, lsl #8
 a78:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 a7c:	0b3b0b3a 	bleq	ec376c <__bss_end__+0xeb9c0c>
 a80:	13491927 	movtne	r1, #39207	; 0x9927
 a84:	06120111 			; <UNDEFINED> instruction: 0x06120111
 a88:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 a8c:	00130119 	andseq	r0, r3, r9, lsl r1
 a90:	00340500 	eorseq	r0, r4, r0, lsl #10
 a94:	0b3a0e03 	bleq	e842a8 <__bss_end__+0xe7a748>
 a98:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 a9c:	00001702 	andeq	r1, r0, r2, lsl #14
 aa0:	3f012e06 	svccc	0x00012e06
 aa4:	3a0e0319 	bcc	381710 <__bss_end__+0x377bb0>
 aa8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 aac:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 ab0:	97184006 	ldrls	r4, [r8, -r6]
 ab4:	13011942 	movwne	r1, #6466	; 0x1942
 ab8:	34070000 	strcc	r0, [r7], #-0
 abc:	3a0e0300 	bcc	3816c4 <__bss_end__+0x377b64>
 ac0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 ac4:	00061c13 	andeq	r1, r6, r3, lsl ip
 ac8:	00340800 	eorseq	r0, r4, r0, lsl #16
 acc:	0b3a0e03 	bleq	e842e0 <__bss_end__+0xe7a780>
 ad0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 ad4:	00000b1c 	andeq	r0, r0, ip, lsl fp
 ad8:	01828909 	orreq	r8, r2, r9, lsl #18
 adc:	31011100 	mrscc	r1, (UNDEF: 17)
 ae0:	0a000013 	beq	b34 <_start-0x74cc>
 ae4:	01018289 	smlabbeq	r1, r9, r2, r8
 ae8:	13310111 	teqne	r1, #1073741828	; 0x40000004
 aec:	00001301 	andeq	r1, r0, r1, lsl #6
 af0:	01828a0b 	orreq	r8, r2, fp, lsl #20
 af4:	91180200 	tstls	r8, r0, lsl #4
 af8:	00001842 	andeq	r1, r0, r2, asr #16
 afc:	0182890c 	orreq	r8, r2, ip, lsl #18
 b00:	31011101 	tstcc	r1, r1, lsl #2
 b04:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 b08:	13490026 	movtne	r0, #36902	; 0x9026
 b0c:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
 b10:	03193f01 	tsteq	r9, #1, 30
 b14:	3b0b3a0e 	blcc	2cf354 <__bss_end__+0x2c57f4>
 b18:	3c19270b 	ldccc	7, cr2, [r9], {11}
 b1c:	00130119 	andseq	r0, r3, r9, lsl r1
 b20:	00050f00 	andeq	r0, r5, r0, lsl #30
 b24:	00001349 	andeq	r1, r0, r9, asr #6
 b28:	3f012e10 	svccc	0x00012e10
 b2c:	3a0e0319 	bcc	381798 <__bss_end__+0x377c38>
 b30:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 b34:	00193c19 	andseq	r3, r9, r9, lsl ip
 b38:	11010000 	mrsne	r0, (UNDEF: 1)
 b3c:	130e2501 	movwne	r2, #58625	; 0xe501
 b40:	1b0e030b 	blne	381774 <__bss_end__+0x377c14>
 b44:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 b48:	00171006 	andseq	r1, r7, r6
 b4c:	00240200 	eoreq	r0, r4, r0, lsl #4
 b50:	0b3e0b0b 	bleq	f83784 <__bss_end__+0xf79c24>
 b54:	00000803 	andeq	r0, r0, r3, lsl #16
 b58:	0b002403 	bleq	9b6c <__bss_end__+0xc>
 b5c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 b60:	0400000e 	streq	r0, [r0], #-14
 b64:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 b68:	0b3a0e03 	bleq	e8437c <__bss_end__+0xe7a81c>
 b6c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 b70:	06120111 			; <UNDEFINED> instruction: 0x06120111
 b74:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 b78:	00130119 	andseq	r0, r3, r9, lsl r1
 b7c:	00050500 	andeq	r0, r5, r0, lsl #10
 b80:	0b3a0e03 	bleq	e84394 <__bss_end__+0xe7a834>
 b84:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 b88:	00001702 	andeq	r1, r0, r2, lsl #14
 b8c:	3f012e06 	svccc	0x00012e06
 b90:	3a0e0319 	bcc	3817fc <__bss_end__+0x377c9c>
 b94:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 b98:	11134919 	tstne	r3, r9, lsl r9
 b9c:	40061201 	andmi	r1, r6, r1, lsl #4
 ba0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 ba4:	00001301 	andeq	r1, r0, r1, lsl #6
 ba8:	01828907 	orreq	r8, r2, r7, lsl #18
 bac:	31011101 	tstcc	r1, r1, lsl #2
 bb0:	08000013 	stmdaeq	r0, {r0, r1, r4}
 bb4:	0001828a 	andeq	r8, r1, sl, lsl #5
 bb8:	42911802 	addsmi	r1, r1, #131072	; 0x20000
 bbc:	09000018 	stmdbeq	r0, {r3, r4}
 bc0:	08030034 	stmdaeq	r3, {r2, r4, r5}
 bc4:	0b3b0b3a 	bleq	ec38b4 <__bss_end__+0xeb9d54>
 bc8:	17021349 	strne	r1, [r2, -r9, asr #6]
 bcc:	890a0000 	stmdbhi	sl, {}	; <UNPREDICTABLE>
 bd0:	11000182 	smlabbne	r0, r2, r1, r0
 bd4:	00133101 	andseq	r3, r3, r1, lsl #2
 bd8:	00050b00 	andeq	r0, r5, r0, lsl #22
 bdc:	0b3a0803 	bleq	e82bf0 <__bss_end__+0xe79090>
 be0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 be4:	00001702 	andeq	r1, r0, r2, lsl #14
 be8:	0300340c 	movweq	r3, #1036	; 0x40c
 bec:	3b0b3a08 	blcc	2cf414 <__bss_end__+0x2c58b4>
 bf0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 bf4:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
 bf8:	0111010b 	tsteq	r1, fp, lsl #2
 bfc:	13010612 	movwne	r0, #5650	; 0x1612
 c00:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
 c04:	03193f01 	tsteq	r9, #1, 30
 c08:	3b0b3a0e 	blcc	2cf448 <__bss_end__+0x2c58e8>
 c0c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 c10:	01193c13 	tsteq	r9, r3, lsl ip
 c14:	0f000013 	svceq	0x00000013
 c18:	13490005 	movtne	r0, #36869	; 0x9005
 c1c:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 c20:	03193f00 	tsteq	r9, #0, 30
 c24:	3b0b3a0e 	blcc	2cf464 <__bss_end__+0x2c5904>
 c28:	3c19270b 	ldccc	7, cr2, [r9], {11}
 c2c:	00000019 	andeq	r0, r0, r9, lsl r0
 c30:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 c34:	030b130e 	movweq	r1, #45838	; 0xb30e
 c38:	110e1b0e 	tstne	lr, lr, lsl #22
 c3c:	10061201 	andne	r1, r6, r1, lsl #4
 c40:	02000017 	andeq	r0, r0, #23
 c44:	0b0b0024 	bleq	2c0cdc <__bss_end__+0x2b717c>
 c48:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 c4c:	24030000 	strcs	r0, [r3], #-0
 c50:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 c54:	000e030b 	andeq	r0, lr, fp, lsl #6
 c58:	01040400 	tsteq	r4, r0, lsl #8
 c5c:	0b3a0b0b 	bleq	e83890 <__bss_end__+0xe79d30>
 c60:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 c64:	28050000 	stmdacs	r5, {}	; <UNPREDICTABLE>
 c68:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 c6c:	0600000d 	streq	r0, [r0], -sp
 c70:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 c74:	0b3b0b3a 	bleq	ec3964 <__bss_end__+0xeb9e04>
 c78:	00001349 	andeq	r1, r0, r9, asr #6
 c7c:	03012e07 	movweq	r2, #7687	; 0x1e07
 c80:	3b0b3a0e 	blcc	2cf4c0 <__bss_end__+0x2c5960>
 c84:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 c88:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 c8c:	97184006 	ldrls	r4, [r8, -r6]
 c90:	13011942 	movwne	r1, #6466	; 0x1942
 c94:	89080000 	stmdbhi	r8, {}	; <UNPREDICTABLE>
 c98:	11000182 	smlabbne	r0, r2, r1, r0
 c9c:	00133101 	andseq	r3, r3, r1, lsl #2
 ca0:	012e0900 	teqeq	lr, r0, lsl #18
 ca4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 ca8:	0b3b0b3a 	bleq	ec3998 <__bss_end__+0xeb9e38>
 cac:	01111927 	tsteq	r1, r7, lsr #18
 cb0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 cb4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 cb8:	0a000013 	beq	d0c <_start-0x72f4>
 cbc:	01018289 	smlabbeq	r1, r9, r2, r8
 cc0:	13310111 	teqne	r1, #1073741828	; 0x40000004
 cc4:	00001301 	andeq	r1, r0, r1, lsl #6
 cc8:	01828a0b 	orreq	r8, r2, fp, lsl #20
 ccc:	91180200 	tstls	r8, r0, lsl #4
 cd0:	00001842 	andeq	r1, r0, r2, asr #16
 cd4:	3f012e0c 	svccc	0x00012e0c
 cd8:	3a0e0319 	bcc	381944 <__bss_end__+0x377de4>
 cdc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 ce0:	11134919 	tstne	r3, r9, lsl r9
 ce4:	40061201 	andmi	r1, r6, r1, lsl #4
 ce8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 cec:	00001301 	andeq	r1, r0, r1, lsl #6
 cf0:	0300050d 	movweq	r0, #1293	; 0x50d
 cf4:	3b0b3a08 	blcc	2cf51c <__bss_end__+0x2c59bc>
 cf8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 cfc:	0e000017 	mcreq	0, 0, r0, cr0, cr7, {0}
 d00:	01018289 	smlabbeq	r1, r9, r2, r8
 d04:	13310111 	teqne	r1, #1073741828	; 0x40000004
 d08:	340f0000 	strcc	r0, [pc], #-0	; d10 <_start-0x72f0>
 d0c:	3a0e0300 	bcc	381914 <__bss_end__+0x377db4>
 d10:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 d14:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 d18:	10000018 	andne	r0, r0, r8, lsl r0
 d1c:	0b0b000f 	bleq	2c0d60 <__bss_end__+0x2b7200>
 d20:	00001349 	andeq	r1, r0, r9, asr #6
 d24:	49003511 	stmdbmi	r0, {r0, r4, r8, sl, ip, sp}
 d28:	12000013 	andne	r0, r0, #19
 d2c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 d30:	0b3a0e03 	bleq	e84544 <__bss_end__+0xe7a9e4>
 d34:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 d38:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 d3c:	00001301 	andeq	r1, r0, r1, lsl #6
 d40:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
 d44:	14000013 	strne	r0, [r0], #-19
 d48:	13490026 	movtne	r0, #36902	; 0x9026
 d4c:	35150000 	ldrcc	r0, [r5, #-0]
 d50:	16000000 	strne	r0, [r0], -r0
 d54:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 d58:	0b3a0e03 	bleq	e8456c <__bss_end__+0xe7aa0c>
 d5c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 d60:	0000193c 	andeq	r1, r0, ip, lsr r9
 d64:	3f012e17 	svccc	0x00012e17
 d68:	3a0e0319 	bcc	3819d4 <__bss_end__+0x377e74>
 d6c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 d70:	01193c19 	tsteq	r9, r9, lsl ip
 d74:	00000013 	andeq	r0, r0, r3, lsl r0
 d78:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 d7c:	030b130e 	movweq	r1, #45838	; 0xb30e
 d80:	110e1b0e 	tstne	lr, lr, lsl #22
 d84:	10061201 	andne	r1, r6, r1, lsl #4
 d88:	02000017 	andeq	r0, r0, #23
 d8c:	0b0b0024 	bleq	2c0e24 <__bss_end__+0x2b72c4>
 d90:	0e030b3e 	vmoveq.16	d3[0], r0
 d94:	24030000 	strcs	r0, [r3], #-0
 d98:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 d9c:	0008030b 	andeq	r0, r8, fp, lsl #6
 da0:	01040400 	tsteq	r4, r0, lsl #8
 da4:	0b3a0b0b 	bleq	e839d8 <__bss_end__+0xe79e78>
 da8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 dac:	28050000 	stmdacs	r5, {}	; <UNPREDICTABLE>
 db0:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 db4:	0600000d 	streq	r0, [r0], -sp
 db8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 dbc:	0b3b0b3a 	bleq	ec3aac <__bss_end__+0xeb9f4c>
 dc0:	00001349 	andeq	r1, r0, r9, asr #6
 dc4:	3f012e07 	svccc	0x00012e07
 dc8:	3a0e0319 	bcc	381a34 <__bss_end__+0x377ed4>
 dcc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 dd0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 dd4:	97184006 	ldrls	r4, [r8, -r6]
 dd8:	13011942 	movwne	r1, #6466	; 0x1942
 ddc:	05080000 	streq	r0, [r8, #-0]
 de0:	3a080300 	bcc	2019e8 <__bss_end__+0x1f7e88>
 de4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 de8:	00170213 	andseq	r0, r7, r3, lsl r2
 dec:	00340900 	eorseq	r0, r4, r0, lsl #18
 df0:	0b3a0e03 	bleq	e84604 <__bss_end__+0xe7aaa4>
 df4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 df8:	00001702 	andeq	r1, r0, r2, lsl #14
 dfc:	0182890a 	orreq	r8, r2, sl, lsl #18
 e00:	31011101 	tstcc	r1, r1, lsl #2
 e04:	00130113 	andseq	r0, r3, r3, lsl r1
 e08:	828a0b00 	addhi	r0, sl, #0, 22
 e0c:	18020001 	stmdane	r2, {r0}
 e10:	00184291 	mulseq	r8, r1, r2
 e14:	82890c00 	addhi	r0, r9, #0, 24
 e18:	01110101 	tsteq	r1, r1, lsl #2
 e1c:	00001331 	andeq	r1, r0, r1, lsr r3
 e20:	0b000f0d 	bleq	4a5c <_start-0x35a4>
 e24:	0013490b 	andseq	r4, r3, fp, lsl #18
 e28:	00350e00 	eorseq	r0, r5, r0, lsl #28
 e2c:	00001349 	andeq	r1, r0, r9, asr #6
 e30:	3f012e0f 	svccc	0x00012e0f
 e34:	3a0e0319 	bcc	381aa0 <__bss_end__+0x377f40>
 e38:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 e3c:	010b2019 	tsteq	fp, r9, lsl r0
 e40:	10000013 	andne	r0, r0, r3, lsl r0
 e44:	08030005 	stmdaeq	r3, {r0, r2}
 e48:	0b3b0b3a 	bleq	ec3b38 <__bss_end__+0xeb9fd8>
 e4c:	00001349 	andeq	r1, r0, r9, asr #6
 e50:	03003411 	movweq	r3, #1041	; 0x411
 e54:	3b0b3a0e 	blcc	2cf694 <__bss_end__+0x2c5b34>
 e58:	0013490b 	andseq	r4, r3, fp, lsl #18
 e5c:	012e1200 	teqeq	lr, r0, lsl #4
 e60:	01111331 	tsteq	r1, r1, lsr r3
 e64:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 e68:	01194297 			; <UNDEFINED> instruction: 0x01194297
 e6c:	13000013 	movwne	r0, #19
 e70:	13310005 	teqne	r1, #5
 e74:	00001702 	andeq	r1, r0, r2, lsl #14
 e78:	31003414 	tstcc	r0, r4, lsl r4
 e7c:	00170213 	andseq	r0, r7, r3, lsl r2
 e80:	012e1500 	teqeq	lr, r0, lsl #10
 e84:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 e88:	0b3b0b3a 	bleq	ec3b78 <__bss_end__+0xeba018>
 e8c:	13491927 	movtne	r1, #39207	; 0x9927
 e90:	06120111 			; <UNDEFINED> instruction: 0x06120111
 e94:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 e98:	00130119 	andseq	r0, r3, r9, lsl r1
 e9c:	00341600 	eorseq	r1, r4, r0, lsl #12
 ea0:	0b3a0803 	bleq	e82eb4 <__bss_end__+0xe79354>
 ea4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 ea8:	00001702 	andeq	r1, r0, r2, lsl #14
 eac:	01828917 	orreq	r8, r2, r7, lsl r9
 eb0:	31011100 	mrscc	r1, (UNDEF: 17)
 eb4:	18000013 	stmdane	r0, {r0, r1, r4}
 eb8:	1331011d 	teqne	r1, #1073741831	; 0x40000007
 ebc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 ec0:	0b590b58 	bleq	1643c28 <__bss_end__+0x163a0c8>
 ec4:	00001301 	andeq	r1, r0, r1, lsl #6
 ec8:	11010b19 	tstne	r1, r9, lsl fp
 ecc:	00061201 	andeq	r1, r6, r1, lsl #4
 ed0:	011d1a00 	tsteq	sp, r0, lsl #20
 ed4:	01111331 	tsteq	r1, r1, lsr r3
 ed8:	0b580612 	bleq	1602728 <__bss_end__+0x15f8bc8>
 edc:	00000b59 	andeq	r0, r0, r9, asr fp
 ee0:	0300051b 	movweq	r0, #1307	; 0x51b
 ee4:	3b0b3a0e 	blcc	2cf724 <__bss_end__+0x2c5bc4>
 ee8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 eec:	1c000017 	stcne	0, cr0, [r0], {23}
 ef0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 ef4:	0b3b0b3a 	bleq	ec3be4 <__bss_end__+0xeba084>
 ef8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 efc:	00001802 	andeq	r1, r0, r2, lsl #16
 f00:	3f012e1d 	svccc	0x00012e1d
 f04:	3a0e0319 	bcc	381b70 <__bss_end__+0x378010>
 f08:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 f0c:	3c134919 	ldccc	9, cr4, [r3], {25}
 f10:	00130119 	andseq	r0, r3, r9, lsl r1
 f14:	00051e00 	andeq	r1, r5, r0, lsl #28
 f18:	00001349 	andeq	r1, r0, r9, asr #6
 f1c:	4900261f 	stmdbmi	r0, {r0, r1, r2, r3, r4, r9, sl, sp}
 f20:	20000013 	andcs	r0, r0, r3, lsl r0
 f24:	00000035 	andeq	r0, r0, r5, lsr r0
 f28:	3f012e21 	svccc	0x00012e21
 f2c:	3a0e0319 	bcc	381b98 <__bss_end__+0x378038>
 f30:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 f34:	01193c19 	tsteq	r9, r9, lsl ip
 f38:	00000013 	andeq	r0, r0, r3, lsl r0
 f3c:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 f40:	030b130e 	movweq	r1, #45838	; 0xb30e
 f44:	110e1b0e 	tstne	lr, lr, lsl #22
 f48:	10061201 	andne	r1, r6, r1, lsl #4
 f4c:	02000017 	andeq	r0, r0, #23
 f50:	0b0b0024 	bleq	2c0fe8 <__bss_end__+0x2b7488>
 f54:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 f58:	24030000 	strcs	r0, [r3], #-0
 f5c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 f60:	000e030b 	andeq	r0, lr, fp, lsl #6
 f64:	012e0400 	teqeq	lr, r0, lsl #8
 f68:	0b3a0e03 	bleq	e8477c <__bss_end__+0xe7ac1c>
 f6c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 f70:	01111349 	tsteq	r1, r9, asr #6
 f74:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 f78:	01194297 			; <UNDEFINED> instruction: 0x01194297
 f7c:	05000013 	streq	r0, [r0, #-19]
 f80:	08030005 	stmdaeq	r3, {r0, r2}
 f84:	0b3b0b3a 	bleq	ec3c74 <__bss_end__+0xeba114>
 f88:	17021349 	strne	r1, [r2, -r9, asr #6]
 f8c:	89060000 	stmdbhi	r6, {}	; <UNPREDICTABLE>
 f90:	11010182 	smlabbne	r1, r2, r1, r0
 f94:	00133101 	andseq	r3, r3, r1, lsl #2
 f98:	828a0700 	addhi	r0, sl, #0, 14
 f9c:	18020001 	stmdane	r2, {r0}
 fa0:	00184291 	mulseq	r8, r1, r2
 fa4:	01150800 	tsteq	r5, r0, lsl #16
 fa8:	13491927 	movtne	r1, #39207	; 0x9927
 fac:	00001301 	andeq	r1, r0, r1, lsl #6
 fb0:	49000509 	stmdbmi	r0, {r0, r3, r8, sl}
 fb4:	0a000013 	beq	1008 <_start-0x6ff8>
 fb8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 fbc:	0b3b0b3a 	bleq	ec3cac <__bss_end__+0xeba14c>
 fc0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 fc4:	00001802 	andeq	r1, r0, r2, lsl #16
 fc8:	0b000f0b 	bleq	4bfc <_start-0x3404>
 fcc:	0013490b 	andseq	r4, r3, fp, lsl #18
 fd0:	012e0c00 	teqeq	lr, r0, lsl #24
 fd4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 fd8:	0b3b0b3a 	bleq	ec3cc8 <__bss_end__+0xeba168>
 fdc:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 fe0:	Address 0x0000000000000fe0 is out of bounds.


Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	00000034 	andeq	r0, r0, r4, lsr r0
       4:	00000054 	andeq	r0, r0, r4, asr r0
       8:	9f300002 	svcls	0x00300002
       c:	00000054 	andeq	r0, r0, r4, asr r0
      10:	00000130 	andeq	r0, r0, r0, lsr r1
      14:	00540001 	subseq	r0, r4, r1
      18:	00000000 	andeq	r0, r0, r0
      1c:	54000000 	strpl	r0, [r0], #-0
      20:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
      24:	02000000 	andeq	r0, r0, #0
      28:	009f3500 	addseq	r3, pc, r0, lsl #10
      2c:	00000000 	andeq	r0, r0, r0
      30:	90000000 	andls	r0, r0, r0
      34:	9c000000 	stcls	0, cr0, [r0], {-0}
      38:	01000000 	mrseq	r0, (UNDEF: 0)
      3c:	009c5000 	addseq	r5, ip, r0
      40:	00a80000 	adceq	r0, r8, r0
      44:	00010000 	andeq	r0, r1, r0
      48:	0000a855 	andeq	sl, r0, r5, asr r8
      4c:	0000ac00 	andeq	sl, r0, r0, lsl #24
      50:	50000100 	andpl	r0, r0, r0, lsl #2
      54:	000000ac 	andeq	r0, r0, ip, lsr #1
      58:	000000d4 	ldrdeq	r0, [r0], -r4
      5c:	d4550001 	ldrble	r0, [r5], #-1
      60:	e0000000 	and	r0, r0, r0
      64:	03000000 	movweq	r0, #0
      68:	9f017500 	svcls	0x00017500
	...
      78:	0000001c 	andeq	r0, r0, ip, lsl r0
      7c:	1c500001 	mrrcne	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
      80:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
      84:	04000001 	streq	r0, [r0], #-1
      88:	5001f300 	andpl	pc, r1, r0, lsl #6
      8c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
      98:	00002000 	andeq	r2, r0, r0
      9c:	51000100 	mrspl	r0, (UNDEF: 16)
      a0:	00000020 	andeq	r0, r0, r0, lsr #32
      a4:	00000158 	andeq	r0, r0, r8, asr r1
      a8:	01f30004 	mvnseq	r0, r4
      ac:	00009f51 	andeq	r9, r0, r1, asr pc
      b0:	00000000 	andeq	r0, r0, r0
      b4:	00100000 	andseq	r0, r0, r0
      b8:	01380000 	teqeq	r8, r0
      bc:	00010000 	andeq	r0, r1, r0
      c0:	00000055 	andeq	r0, r0, r5, asr r0
      c4:	00000000 	andeq	r0, r0, r0
      c8:	00001400 	andeq	r1, r0, r0, lsl #8
      cc:	00003800 	andeq	r3, r0, r0, lsl #16
      d0:	55000100 	strpl	r0, [r0, #-256]	; 0x100
      d4:	00000038 	andeq	r0, r0, r8, lsr r0
      d8:	00000138 	andeq	r0, r0, r8, lsr r1
      dc:	38580001 	ldmdacc	r8, {r0}^
      e0:	58000001 	stmdapl	r0, {r0}
      e4:	01000001 	tsteq	r0, r1
      e8:	00005500 	andeq	r5, r0, r0, lsl #10
      ec:	00000000 	andeq	r0, r0, r0
      f0:	00180000 	andseq	r0, r8, r0
      f4:	01380000 	teqeq	r8, r0
      f8:	00010000 	andeq	r0, r1, r0
      fc:	00000055 	andeq	r0, r0, r5, asr r0
     100:	00000000 	andeq	r0, r0, r0
     104:	00002400 	andeq	r2, r0, r0, lsl #8
     108:	00013800 	andeq	r3, r1, r0, lsl #16
     10c:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
     118:	00000028 	andeq	r0, r0, r8, lsr #32
     11c:	0000002c 	andeq	r0, r0, ip, lsr #32
     120:	00530001 	subseq	r0, r3, r1
     124:	00000000 	andeq	r0, r0, r0
     128:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     12c:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     130:	01000000 	mrseq	r0, (UNDEF: 0)
     134:	00585800 	subseq	r5, r8, r0, lsl #16
     138:	01380000 	teqeq	r8, r0
     13c:	00050000 	andeq	r0, r5, r0
     140:	24310075 	ldrtcs	r0, [r1], #-117	; 0x75
     144:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     148:	00000000 	andeq	r0, r0, r0
     14c:	00003800 	andeq	r3, r0, r0, lsl #16
     150:	00004000 	andeq	r4, r0, r0
     154:	77000500 	strvc	r0, [r0, -r0, lsl #10]
     158:	9f1a3100 	svcls	0x001a3100
     15c:	00000040 	andeq	r0, r0, r0, asr #32
     160:	00000043 	andeq	r0, r0, r3, asr #32
     164:	43510001 	cmpmi	r1, #1
     168:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     16c:	05000001 	streq	r0, [r0, #-1]
     170:	31007700 	tstcc	r0, r0, lsl #14
     174:	00009f1a 	andeq	r9, r0, sl, lsl pc
     178:	00000000 	andeq	r0, r0, r0
     17c:	00440000 	subeq	r0, r4, r0
     180:	00580000 	subseq	r0, r8, r0
     184:	00010000 	andeq	r0, r1, r0
     188:	00005858 	andeq	r5, r0, r8, asr r8
     18c:	00013800 	andeq	r3, r1, r0, lsl #16
     190:	75000500 	strvc	r0, [r0, #-1280]	; 0x500
     194:	9f243100 	svcls	0x00243100
	...
     1a0:	00000048 	andeq	r0, r0, r8, asr #32
     1a4:	0000004c 	andeq	r0, r0, ip, asr #32
     1a8:	00530001 	subseq	r0, r3, r1
     1ac:	00000000 	andeq	r0, r0, r0
     1b0:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     1b4:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
     1b8:	01000000 	mrseq	r0, (UNDEF: 0)
     1bc:	00785800 	rsbseq	r5, r8, r0, lsl #16
     1c0:	01380000 	teqeq	r8, r0
     1c4:	00080000 	andeq	r0, r8, r0
     1c8:	24310075 	ldrtcs	r0, [r1], #-117	; 0x75
     1cc:	9f220075 	svcls	0x00220075
	...
     1d8:	00000064 	andeq	r0, r0, r4, rrx
     1dc:	00000078 	andeq	r0, r0, r8, ror r0
     1e0:	78580001 	ldmdavc	r8, {r0}^
     1e4:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     1e8:	08000001 	stmdaeq	r0, {r0}
     1ec:	31007500 	tstcc	r0, r0, lsl #10
     1f0:	22007524 	andcs	r7, r0, #36, 10	; 0x9000000
     1f4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     1f8:	00000000 	andeq	r0, r0, r0
     1fc:	00006800 	andeq	r6, r0, r0, lsl #16
     200:	00006c00 	andeq	r6, r0, r0, lsl #24
     204:	53000100 	movwpl	r0, #256	; 0x100
	...
     210:	00000078 	andeq	r0, r0, r8, ror r0
     214:	00000098 	muleq	r0, r8, r0
     218:	98580001 	ldmdals	r8, {r0}^
     21c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     220:	05000001 	streq	r0, [r0, #-1]
     224:	32007500 	andcc	r7, r0, #0, 10
     228:	00009f24 	andeq	r9, r0, r4, lsr #30
     22c:	00000000 	andeq	r0, r0, r0
     230:	00840000 	addeq	r0, r4, r0
     234:	00980000 	addseq	r0, r8, r0
     238:	00010000 	andeq	r0, r1, r0
     23c:	00009858 	andeq	r9, r0, r8, asr r8
     240:	00013800 	andeq	r3, r1, r0, lsl #16
     244:	75000500 	strvc	r0, [r0, #-1280]	; 0x500
     248:	9f243200 	svcls	0x00243200
	...
     254:	00000088 	andeq	r0, r0, r8, lsl #1
     258:	0000008c 	andeq	r0, r0, ip, lsl #1
     25c:	00530001 	subseq	r0, r3, r1
     260:	00000000 	andeq	r0, r0, r0
     264:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
     268:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
     26c:	01000000 	mrseq	r0, (UNDEF: 0)
     270:	00b85800 	adcseq	r5, r8, r0, lsl #16
     274:	01380000 	teqeq	r8, r0
     278:	00080000 	andeq	r0, r8, r0
     27c:	24320075 	ldrtcs	r0, [r2], #-117	; 0x75
     280:	9f220075 	svcls	0x00220075
	...
     28c:	000000a4 	andeq	r0, r0, r4, lsr #1
     290:	000000b8 	strheq	r0, [r0], -r8
     294:	b8580001 	ldmdalt	r8, {r0}^
     298:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     29c:	08000001 	stmdaeq	r0, {r0}
     2a0:	32007500 	andcc	r7, r0, #0, 10
     2a4:	22007524 	andcs	r7, r0, #36, 10	; 0x9000000
     2a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     2ac:	00000000 	andeq	r0, r0, r0
     2b0:	0000a800 	andeq	sl, r0, r0, lsl #16
     2b4:	0000ac00 	andeq	sl, r0, r0, lsl #24
     2b8:	53000100 	movwpl	r0, #256	; 0x100
	...
     2c4:	000000b8 	strheq	r0, [r0], -r8
     2c8:	000000d8 	ldrdeq	r0, [r0], -r8
     2cc:	d8580001 	ldmdale	r8, {r0}^
     2d0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     2d4:	0a000001 	beq	2e0 <_start-0x7d20>
     2d8:	32007500 	andcc	r7, r0, #0, 10
     2dc:	31007524 	tstcc	r0, r4, lsr #10
     2e0:	009f2224 	addseq	r2, pc, r4, lsr #4
     2e4:	00000000 	andeq	r0, r0, r0
     2e8:	c4000000 	strgt	r0, [r0], #-0
     2ec:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
     2f0:	01000000 	mrseq	r0, (UNDEF: 0)
     2f4:	00d85800 	sbcseq	r5, r8, r0, lsl #16
     2f8:	01380000 	teqeq	r8, r0
     2fc:	000a0000 	andeq	r0, sl, r0
     300:	24320075 	ldrtcs	r0, [r2], #-117	; 0x75
     304:	24310075 	ldrtcs	r0, [r1], #-117	; 0x75
     308:	00009f22 	andeq	r9, r0, r2, lsr #30
     30c:	00000000 	andeq	r0, r0, r0
     310:	00c80000 	sbceq	r0, r8, r0
     314:	00cc0000 	sbceq	r0, ip, r0
     318:	00010000 	andeq	r0, r1, r0
     31c:	00000053 	andeq	r0, r0, r3, asr r0
     320:	00000000 	andeq	r0, r0, r0
     324:	0000d800 	andeq	sp, r0, r0, lsl #16
     328:	0000f800 	andeq	pc, r0, r0, lsl #16
     32c:	58000100 	stmdapl	r0, {r8}
     330:	000000f8 	strdeq	r0, [r0], -r8
     334:	00000138 	andeq	r0, r0, r8, lsr r1
     338:	0075000d 	rsbseq	r0, r5, sp
     33c:	00752432 	rsbseq	r2, r5, r2, lsr r4
     340:	75222431 	strvc	r2, [r2, #-1073]!	; 0x431
     344:	009f2200 	addseq	r2, pc, r0, lsl #4
     348:	00000000 	andeq	r0, r0, r0
     34c:	e4000000 	str	r0, [r0], #-0
     350:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
     354:	01000000 	mrseq	r0, (UNDEF: 0)
     358:	00f85800 	rscseq	r5, r8, r0, lsl #16
     35c:	01380000 	teqeq	r8, r0
     360:	000d0000 	andeq	r0, sp, r0
     364:	24320075 	ldrtcs	r0, [r2], #-117	; 0x75
     368:	24310075 	ldrtcs	r0, [r1], #-117	; 0x75
     36c:	22007522 	andcs	r7, r0, #142606336	; 0x8800000
     370:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     374:	00000000 	andeq	r0, r0, r0
     378:	0000e800 	andeq	lr, r0, r0, lsl #16
     37c:	0000ec00 	andeq	lr, r0, r0, lsl #24
     380:	53000100 	movwpl	r0, #256	; 0x100
	...
     38c:	000000f8 	strdeq	r0, [r0], -r8
     390:	00000118 	andeq	r0, r0, r8, lsl r1
     394:	18580001 	ldmdane	r8, {r0}^
     398:	38000001 	stmdacc	r0, {r0}
     39c:	05000001 	streq	r0, [r0, #-1]
     3a0:	33007500 	movwcc	r7, #1280	; 0x500
     3a4:	00009f24 	andeq	r9, r0, r4, lsr #30
     3a8:	00000000 	andeq	r0, r0, r0
     3ac:	01040000 	mrseq	r0, (UNDEF: 4)
     3b0:	01180000 	tsteq	r8, r0
     3b4:	00010000 	andeq	r0, r1, r0
     3b8:	00011858 	andeq	r1, r1, r8, asr r8
     3bc:	00013800 	andeq	r3, r1, r0, lsl #16
     3c0:	75000500 	strvc	r0, [r0, #-1280]	; 0x500
     3c4:	9f243300 	svcls	0x00243300
	...
     3d0:	00000108 	andeq	r0, r0, r8, lsl #2
     3d4:	0000010c 	andeq	r0, r0, ip, lsl #2
     3d8:	00530001 	subseq	r0, r3, r1
     3dc:	00000000 	andeq	r0, r0, r0
     3e0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     3e4:	20000001 	andcs	r0, r0, r1
     3e8:	06000001 	streq	r0, [r0], -r1
     3ec:	08007700 	stmdaeq	r0, {r8, r9, sl, ip, sp, lr}
     3f0:	209f1a80 	addscs	r1, pc, r0, lsl #21
     3f4:	23000001 	movwcs	r0, #1
     3f8:	01000001 	tsteq	r0, r1
     3fc:	01235100 	teqeq	r3, r0, lsl #2
     400:	01580000 	cmpeq	r8, r0
     404:	00060000 	andeq	r0, r6, r0
     408:	80080077 	andhi	r0, r8, r7, ror r0
     40c:	00009f1a 	andeq	r9, r0, sl, lsl pc
     410:	00000000 	andeq	r0, r0, r0
     414:	01280000 	teqeq	r8, r0
     418:	012c0000 	teqeq	ip, r0
     41c:	00010000 	andeq	r0, r1, r0
     420:	00000053 	andeq	r0, r0, r3, asr r0
     424:	00000000 	andeq	r0, r0, r0
     428:	00014800 	andeq	r4, r1, r0, lsl #16
     42c:	00014c00 	andeq	r4, r1, r0, lsl #24
     430:	53000100 	movwpl	r0, #256	; 0x100
	...
     43c:	00000158 	andeq	r0, r0, r8, asr r1
     440:	0000016f 	andeq	r0, r0, pc, ror #2
     444:	6f500001 	svcvs	0x00500001
     448:	d4000001 	strle	r0, [r0], #-1
     44c:	01000001 	tsteq	r0, r1
     450:	01d45900 	bicseq	r5, r4, r0, lsl #18
     454:	03100000 	tsteq	r0, #0
     458:	00040000 	andeq	r0, r4, r0
     45c:	9f5001f3 	svcls	0x005001f3
     460:	00000310 	andeq	r0, r0, r0, lsl r3
     464:	00000318 	andeq	r0, r0, r8, lsl r3
     468:	18590001 	ldmdane	r9, {r0}^
     46c:	20000003 	andcs	r0, r0, r3
     470:	04000003 	streq	r0, [r0], #-3
     474:	5001f300 	andpl	pc, r1, r0, lsl #6
     478:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     47c:	00000000 	andeq	r0, r0, r0
     480:	00015800 	andeq	r5, r1, r0, lsl #16
     484:	00016f00 	andeq	r6, r1, r0, lsl #30
     488:	51000100 	mrspl	r0, (UNDEF: 16)
     48c:	0000016f 	andeq	r0, r0, pc, ror #2
     490:	00000320 	andeq	r0, r0, r0, lsr #6
     494:	00560001 	subseq	r0, r6, r1
     498:	00000000 	andeq	r0, r0, r0
     49c:	ac000000 	stcge	0, cr0, [r0], {-0}
     4a0:	9c000001 	stcls	0, cr0, [r0], {1}
     4a4:	01000002 	tsteq	r0, r2
     4a8:	00005800 	andeq	r5, r0, r0, lsl #16
     4ac:	00000000 	andeq	r0, r0, r0
     4b0:	01b00000 	movseq	r0, r0
     4b4:	02d40000 	sbcseq	r0, r4, #0
     4b8:	00010000 	andeq	r0, r1, r0
     4bc:	00000054 	andeq	r0, r0, r4, asr r0
     4c0:	00000000 	andeq	r0, r0, r0
     4c4:	0001b000 	andeq	fp, r1, r0
     4c8:	0002d400 	andeq	sp, r2, r0, lsl #8
     4cc:	74000500 	strvc	r0, [r0], #-1280	; 0x500
     4d0:	9f253100 	svcls	0x00253100
	...
     4dc:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
     4e0:	000001d4 	ldrdeq	r0, [r0], -r4
     4e4:	9f300002 	svcls	0x00300002
     4e8:	000001d4 	ldrdeq	r0, [r0], -r4
     4ec:	00000310 	andeq	r0, r0, r0, lsl r3
     4f0:	18590001 	ldmdane	r9, {r0}^
     4f4:	20000003 	andcs	r0, r0, r3
     4f8:	01000003 	tsteq	r0, r3
     4fc:	00005900 	andeq	r5, r0, r0, lsl #18
     500:	00000000 	andeq	r0, r0, r0
     504:	016c0000 	cmneq	ip, r0
     508:	016f0000 	cmneq	pc, r0
     50c:	00010000 	andeq	r0, r1, r0
     510:	00016f51 	andeq	r6, r1, r1, asr pc
     514:	00032000 	andeq	r2, r3, r0
     518:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     524:	00000174 	andeq	r0, r0, r4, ror r1
     528:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
     52c:	10540001 	subsne	r0, r4, r1
     530:	18000003 	stmdane	r0, {r0, r1}
     534:	01000003 	tsteq	r0, r3
     538:	00005400 	andeq	r5, r0, r0, lsl #8
     53c:	00000000 	andeq	r0, r0, r0
     540:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
     544:	01c80000 	biceq	r0, r8, r0
     548:	00010000 	andeq	r0, r1, r0
     54c:	00000058 	andeq	r0, r0, r8, asr r0
     550:	00000000 	andeq	r0, r0, r0
     554:	0001b400 	andeq	fp, r1, r0, lsl #8
     558:	0001cf00 	andeq	ip, r1, r0, lsl #30
     55c:	52000100 	andpl	r0, r0, #0, 2
     560:	000001cf 	andeq	r0, r0, pc, asr #3
     564:	000002d4 	ldrdeq	r0, [r0], -r4
     568:	00740008 	rsbseq	r0, r4, r8
     56c:	00742531 	rsbseq	r2, r4, r1, lsr r5
     570:	00009f22 	andeq	r9, r0, r2, lsr #30
     574:	00000000 	andeq	r0, r0, r0
     578:	01b40000 			; <UNDEFINED> instruction: 0x01b40000
     57c:	01c80000 	biceq	r0, r8, r0
     580:	00010000 	andeq	r0, r1, r0
     584:	00000058 	andeq	r0, r0, r8, asr r0
     588:	00000000 	andeq	r0, r0, r0
     58c:	0001b800 	andeq	fp, r1, r0, lsl #16
     590:	0001bc00 	andeq	fp, r1, r0, lsl #24
     594:	53000100 	movwpl	r0, #256	; 0x100
	...
     5a0:	000001d4 	ldrdeq	r0, [r0], -r4
     5a4:	000002d4 	ldrdeq	r0, [r0], -r4
     5a8:	00540001 	subseq	r0, r4, r1
     5ac:	00000000 	andeq	r0, r0, r0
     5b0:	d4000000 	strle	r0, [r0], #-0
     5b4:	e8000001 	stmda	r0, {r0}
     5b8:	01000001 	tsteq	r0, r1
     5bc:	00005800 	andeq	r5, r0, r0, lsl #16
     5c0:	00000000 	andeq	r0, r0, r0
     5c4:	01d80000 	bicseq	r0, r8, r0
     5c8:	01dc0000 	bicseq	r0, ip, r0
     5cc:	00010000 	andeq	r0, r1, r0
     5d0:	00000053 	andeq	r0, r0, r3, asr r0
     5d4:	00000000 	andeq	r0, r0, r0
     5d8:	0001f800 	andeq	pc, r1, r0, lsl #16
     5dc:	0002d400 	andeq	sp, r2, r0, lsl #8
     5e0:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     5ec:	000001f8 	strdeq	r0, [r0], -r8
     5f0:	0000020c 	andeq	r0, r0, ip, lsl #4
     5f4:	00580001 	subseq	r0, r8, r1
     5f8:	00000000 	andeq	r0, r0, r0
     5fc:	fc000000 	stc2	0, cr0, [r0], {-0}
     600:	00000001 	andeq	r0, r0, r1
     604:	01000002 	tsteq	r0, r2
     608:	00005300 	andeq	r5, r0, r0, lsl #6
     60c:	00000000 	andeq	r0, r0, r0
     610:	021c0000 	andseq	r0, ip, #0
     614:	02d40000 	sbcseq	r0, r4, #0
     618:	00010000 	andeq	r0, r1, r0
     61c:	00000054 	andeq	r0, r0, r4, asr r0
     620:	00000000 	andeq	r0, r0, r0
     624:	00021c00 	andeq	r1, r2, r0, lsl #24
     628:	00023000 	andeq	r3, r2, r0
     62c:	58000100 	stmdapl	r0, {r8}
	...
     638:	00000220 	andeq	r0, r0, r0, lsr #4
     63c:	00000224 	andeq	r0, r0, r4, lsr #4
     640:	00530001 	subseq	r0, r3, r1
     644:	00000000 	andeq	r0, r0, r0
     648:	40000000 	andmi	r0, r0, r0
     64c:	d4000002 	strle	r0, [r0], #-2
     650:	01000002 	tsteq	r0, r2
     654:	00005400 	andeq	r5, r0, r0, lsl #8
     658:	00000000 	andeq	r0, r0, r0
     65c:	02400000 	subeq	r0, r0, #0
     660:	02540000 	subseq	r0, r4, #0
     664:	00010000 	andeq	r0, r1, r0
     668:	00000058 	andeq	r0, r0, r8, asr r0
     66c:	00000000 	andeq	r0, r0, r0
     670:	00024400 	andeq	r4, r2, r0, lsl #8
     674:	00024800 	andeq	r4, r2, r0, lsl #16
     678:	53000100 	movwpl	r0, #256	; 0x100
	...
     684:	00000264 	andeq	r0, r0, r4, ror #4
     688:	000002d4 	ldrdeq	r0, [r0], -r4
     68c:	00540001 	subseq	r0, r4, r1
     690:	00000000 	andeq	r0, r0, r0
     694:	64000000 	strvs	r0, [r0], #-0
     698:	78000002 	stmdavc	r0, {r1}
     69c:	01000002 	tsteq	r0, r2
     6a0:	00005800 	andeq	r5, r0, r0, lsl #16
     6a4:	00000000 	andeq	r0, r0, r0
     6a8:	02680000 	rsbeq	r0, r8, #0
     6ac:	026c0000 	rsbeq	r0, ip, #0
     6b0:	00010000 	andeq	r0, r1, r0
     6b4:	00000053 	andeq	r0, r0, r3, asr r0
     6b8:	00000000 	andeq	r0, r0, r0
     6bc:	00028800 	andeq	r8, r2, r0, lsl #16
     6c0:	0002d400 	andeq	sp, r2, r0, lsl #8
     6c4:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     6d0:	00000288 	andeq	r0, r0, r8, lsl #5
     6d4:	0000029c 	muleq	r0, ip, r2
     6d8:	00580001 	subseq	r0, r8, r1
     6dc:	00000000 	andeq	r0, r0, r0
     6e0:	8c000000 	stchi	0, cr0, [r0], {-0}
     6e4:	90000002 	andls	r0, r0, r2
     6e8:	01000002 	tsteq	r0, r2
     6ec:	00005300 	andeq	r5, r0, r0, lsl #6
     6f0:	00000000 	andeq	r0, r0, r0
     6f4:	02ac0000 	adceq	r0, ip, #0
     6f8:	02d40000 	sbcseq	r0, r4, #0
     6fc:	00010000 	andeq	r0, r1, r0
     700:	00000054 	andeq	r0, r0, r4, asr r0
     704:	00000000 	andeq	r0, r0, r0
     708:	0002b000 	andeq	fp, r2, r0
     70c:	0002b400 	andeq	fp, r2, r0, lsl #8
     710:	53000100 	movwpl	r0, #256	; 0x100
	...
     71c:	000002cc 	andeq	r0, r0, ip, asr #5
     720:	00000310 	andeq	r0, r0, r0, lsl r3
     724:	9f300002 	svcls	0x00300002
     728:	00000318 	andeq	r0, r0, r8, lsl r3
     72c:	00000320 	andeq	r0, r0, r0, lsr #6
     730:	9f300002 	svcls	0x00300002
	...
     73c:	000002cc 	andeq	r0, r0, ip, asr #5
     740:	00000310 	andeq	r0, r0, r0, lsl r3
     744:	18550001 	ldmdane	r5, {r0}^
     748:	20000003 	andcs	r0, r0, r3
     74c:	01000003 	tsteq	r0, r3
     750:	00005500 	andeq	r5, r0, r0, lsl #10
     754:	00000000 	andeq	r0, r0, r0
     758:	02d40000 	sbcseq	r0, r4, #0
     75c:	03100000 	tsteq	r0, #0
     760:	00010000 	andeq	r0, r1, r0
     764:	00031854 	andeq	r1, r3, r4, asr r8
     768:	00032000 	andeq	r2, r3, r0
     76c:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     778:	00000320 	andeq	r0, r0, r0, lsr #6
     77c:	00000340 	andeq	r0, r0, r0, asr #6
     780:	40500001 	subsmi	r0, r0, r1
     784:	54000003 	strpl	r0, [r0], #-3
     788:	01000003 	tsteq	r0, r3
     78c:	03545800 	cmpeq	r4, #0, 16
     790:	03640000 	cmneq	r4, #0
     794:	00010000 	andeq	r0, r1, r0
     798:	00036450 	andeq	r6, r3, r0, asr r4
     79c:	0003ac00 	andeq	sl, r3, r0, lsl #24
     7a0:	58000100 	stmdapl	r0, {r8}
	...
     7ac:	00000320 	andeq	r0, r0, r0, lsr #6
     7b0:	00000344 	andeq	r0, r0, r4, asr #6
     7b4:	44510001 	ldrbmi	r0, [r1], #-1
     7b8:	54000003 	strpl	r0, [r0], #-3
     7bc:	01000003 	tsteq	r0, r3
     7c0:	03545600 	cmpeq	r4, #0, 12
     7c4:	03640000 	cmneq	r4, #0
     7c8:	00010000 	andeq	r0, r1, r0
     7cc:	00036451 	andeq	r6, r3, r1, asr r4
     7d0:	0003ac00 	andeq	sl, r3, r0, lsl #24
     7d4:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     7e0:	00000320 	andeq	r0, r0, r0, lsr #6
     7e4:	00000348 	andeq	r0, r0, r8, asr #6
     7e8:	48520001 	ldmdami	r2, {r0}^
     7ec:	54000003 	strpl	r0, [r0], #-3
     7f0:	04000003 	streq	r0, [r0], #-3
     7f4:	5201f300 	andpl	pc, r1, #0, 6
     7f8:	0003549f 	muleq	r3, pc, r4	; <UNPREDICTABLE>
     7fc:	00036400 	andeq	r6, r3, r0, lsl #8
     800:	52000100 	andpl	r0, r0, #0, 2
     804:	00000364 	andeq	r0, r0, r4, ror #6
     808:	000003ac 	andeq	r0, r0, ip, lsr #7
     80c:	01770003 	cmneq	r7, r3
     810:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     814:	00000000 	andeq	r0, r0, r0
     818:	00032000 	andeq	r2, r3, r0
     81c:	00034c00 	andeq	r4, r3, r0, lsl #24
     820:	53000100 	movwpl	r0, #256	; 0x100
     824:	0000034c 	andeq	r0, r0, ip, asr #6
     828:	00000354 	andeq	r0, r0, r4, asr r3
     82c:	01f30004 	mvnseq	r0, r4
     830:	03549f53 	cmpeq	r4, #332	; 0x14c
     834:	03640000 	cmneq	r4, #0
     838:	00010000 	andeq	r0, r1, r0
     83c:	00036453 	andeq	r6, r3, r3, asr r4
     840:	0003ac00 	andeq	sl, r3, r0, lsl #24
     844:	f3000400 	vshl.u8	d0, d0, d0
     848:	009f5301 	addseq	r5, pc, r1, lsl #6
     84c:	00000000 	andeq	r0, r0, r0
     850:	5c000000 	stcpl	0, cr0, [r0], {-0}
     854:	64000003 	strvs	r0, [r0], #-3
     858:	02000003 	andeq	r0, r0, #3
     85c:	649f3000 	ldrvs	r3, [pc], #0	; 864 <_start-0x779c>
     860:	ac000003 	stcge	0, cr0, [r0], {3}
     864:	01000003 	tsteq	r0, r3
     868:	00005400 	andeq	r5, r0, r0, lsl #8
     86c:	00000000 	andeq	r0, r0, r0
     870:	03740000 	cmneq	r4, #0
     874:	03840000 	orreq	r0, r4, #0
     878:	00010000 	andeq	r0, r1, r0
     87c:	00000050 	andeq	r0, r0, r0, asr r0
     880:	00000000 	andeq	r0, r0, r0
     884:	0003ac00 	andeq	sl, r3, r0, lsl #24
     888:	0003c800 	andeq	ip, r3, r0, lsl #16
     88c:	50000100 	andpl	r0, r0, r0, lsl #2
     890:	000003c8 	andeq	r0, r0, r8, asr #7
     894:	000003dc 	ldrdeq	r0, [r0], -ip
     898:	dc570001 	mrrcle	0, 0, r0, r7, cr1
     89c:	ec000003 	stc	0, cr0, [r0], {3}
     8a0:	01000003 	tsteq	r0, r3
     8a4:	03ec5000 	mvneq	r5, #0
     8a8:	04240000 	strteq	r0, [r4], #-0
     8ac:	00010000 	andeq	r0, r1, r0
     8b0:	00000057 	andeq	r0, r0, r7, asr r0
     8b4:	00000000 	andeq	r0, r0, r0
     8b8:	0003ac00 	andeq	sl, r3, r0, lsl #24
     8bc:	0003cc00 	andeq	ip, r3, r0, lsl #24
     8c0:	51000100 	mrspl	r0, (UNDEF: 16)
     8c4:	000003cc 	andeq	r0, r0, ip, asr #7
     8c8:	000003dc 	ldrdeq	r0, [r0], -ip
     8cc:	dc550001 	mrrcle	0, 0, r0, r5, cr1
     8d0:	ec000003 	stc	0, cr0, [r0], {3}
     8d4:	01000003 	tsteq	r0, r3
     8d8:	03ec5100 	mvneq	r5, #0, 2
     8dc:	04240000 	strteq	r0, [r4], #-0
     8e0:	00010000 	andeq	r0, r1, r0
     8e4:	00000055 	andeq	r0, r0, r5, asr r0
     8e8:	00000000 	andeq	r0, r0, r0
     8ec:	0003ac00 	andeq	sl, r3, r0, lsl #24
     8f0:	0003d000 	andeq	sp, r3, r0
     8f4:	52000100 	andpl	r0, r0, #0, 2
     8f8:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     8fc:	000003dc 	ldrdeq	r0, [r0], -ip
     900:	01f30004 	mvnseq	r0, r4
     904:	03dc9f52 	bicseq	r9, ip, #328	; 0x148
     908:	03ec0000 	mvneq	r0, #0
     90c:	00010000 	andeq	r0, r1, r0
     910:	0003ec52 	andeq	lr, r3, r2, asr ip
     914:	00042400 	andeq	r2, r4, r0, lsl #8
     918:	76000300 	strvc	r0, [r0], -r0, lsl #6
     91c:	00009f01 	andeq	r9, r0, r1, lsl #30
     920:	00000000 	andeq	r0, r0, r0
     924:	03ac0000 			; <UNDEFINED> instruction: 0x03ac0000
     928:	03d40000 	bicseq	r0, r4, #0
     92c:	00010000 	andeq	r0, r1, r0
     930:	0003d453 	andeq	sp, r3, r3, asr r4
     934:	0003dc00 	andeq	sp, r3, r0, lsl #24
     938:	58000100 	stmdapl	r0, {r8}
     93c:	000003dc 	ldrdeq	r0, [r0], -ip
     940:	000003ec 	andeq	r0, r0, ip, ror #7
     944:	ec530001 	mrrc	0, 0, r0, r3, cr1
     948:	24000003 	strcs	r0, [r0], #-3
     94c:	01000004 	tsteq	r0, r4
     950:	00005800 	andeq	r5, r0, r0, lsl #16
     954:	00000000 	andeq	r0, r0, r0
     958:	03e40000 	mvneq	r0, #0
     95c:	03ec0000 	mvneq	r0, #0
     960:	00020000 	andeq	r0, r2, r0
     964:	03ec9f30 	mvneq	r9, #48, 30	; 0xc0
     968:	04240000 	strteq	r0, [r4], #-0
     96c:	00010000 	andeq	r0, r1, r0
     970:	00000054 	andeq	r0, r0, r4, asr r0
     974:	00000000 	andeq	r0, r0, r0
     978:	00042400 	andeq	r2, r4, r0, lsl #8
     97c:	00044300 	andeq	r4, r4, r0, lsl #6
     980:	51000100 	mrspl	r0, (UNDEF: 16)
     984:	00000443 	andeq	r0, r0, r3, asr #8
     988:	000004d4 	ldrdeq	r0, [r0], -r4
     98c:	01f30004 	mvnseq	r0, r4
     990:	00009f51 	andeq	r9, r0, r1, asr pc
     994:	00000000 	andeq	r0, r0, r0
     998:	04240000 	strteq	r0, [r4], #-0
     99c:	04430000 	strbeq	r0, [r3], #-0
     9a0:	00010000 	andeq	r0, r1, r0
     9a4:	00044352 	andeq	r4, r4, r2, asr r3
     9a8:	0004d400 	andeq	sp, r4, r0, lsl #8
     9ac:	f3000400 	vshl.u8	d0, d0, d0
     9b0:	009f5201 	addseq	r5, pc, r1, lsl #4
     9b4:	00000000 	andeq	r0, r0, r0
     9b8:	24000000 	strcs	r0, [r0], #-0
     9bc:	43000004 	movwmi	r0, #4
     9c0:	01000004 	tsteq	r0, r4
     9c4:	04435300 	strbeq	r5, [r3], #-768	; 0x300
     9c8:	04d40000 	ldrbeq	r0, [r4], #0
     9cc:	00010000 	andeq	r0, r1, r0
     9d0:	00000055 	andeq	r0, r0, r5, asr r0
     9d4:	00000000 	andeq	r0, r0, r0
     9d8:	00045800 	andeq	r5, r4, r0, lsl #16
     9dc:	0004a000 	andeq	sl, r4, r0
     9e0:	52000100 	andpl	r0, r0, #0, 2
     9e4:	000004a0 	andeq	r0, r0, r0, lsr #9
     9e8:	000004ac 	andeq	r0, r0, ip, lsr #9
     9ec:	00750006 	rsbseq	r0, r5, r6
     9f0:	9f1e0076 	svcls	0x001e0076
     9f4:	000004ac 	andeq	r0, r0, ip, lsr #9
     9f8:	000004d4 	ldrdeq	r0, [r0], -r4
     9fc:	00520001 	subseq	r0, r2, r1
     a00:	00000000 	andeq	r0, r0, r0
     a04:	d4000000 	strle	r0, [r0], #-0
     a08:	df000004 	svcle	0x00000004
     a0c:	01000004 	tsteq	r0, r4
     a10:	04df5000 	ldrbeq	r5, [pc], #0	; a18 <_start-0x75e8>
     a14:	050c0000 	streq	r0, [ip, #-0]
     a18:	00040000 	andeq	r0, r4, r0
     a1c:	9f5001f3 	svcls	0x005001f3
	...
     a28:	000004e0 	andeq	r0, r0, r0, ror #9
     a2c:	000004ec 	andeq	r0, r0, ip, ror #9
     a30:	00500001 	subseq	r0, r0, r1
     a34:	00000000 	andeq	r0, r0, r0
     a38:	0c000000 	stceq	0, cr0, [r0], {-0}
     a3c:	1c000005 	stcne	0, cr0, [r0], {5}
     a40:	01000005 	tsteq	r0, r5
     a44:	051c5000 	ldreq	r5, [ip, #-0]
     a48:	05380000 	ldreq	r0, [r8, #-0]!
     a4c:	00010000 	andeq	r0, r1, r0
     a50:	00000055 	andeq	r0, r0, r5, asr r0
     a54:	00000000 	andeq	r0, r0, r0
     a58:	00050c00 	andeq	r0, r5, r0, lsl #24
     a5c:	00051c00 	andeq	r1, r5, r0, lsl #24
     a60:	51000100 	mrspl	r0, (UNDEF: 16)
     a64:	0000051c 	andeq	r0, r0, ip, lsl r5
     a68:	00000538 	andeq	r0, r0, r8, lsr r5
     a6c:	00540001 	subseq	r0, r4, r1
     a70:	00000000 	andeq	r0, r0, r0
     a74:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     a78:	54000005 	strpl	r0, [r0], #-5
     a7c:	01000005 	tsteq	r0, r5
     a80:	05545000 	ldrbeq	r5, [r4, #-0]
     a84:	05a00000 	streq	r0, [r0, #0]!
     a88:	00010000 	andeq	r0, r1, r0
     a8c:	0005a055 	andeq	sl, r5, r5, asr r0
     a90:	0005b800 	andeq	fp, r5, r0, lsl #16
     a94:	f3000400 	vshl.u8	d0, d0, d0
     a98:	009f5001 	addseq	r5, pc, r1
     a9c:	00000000 	andeq	r0, r0, r0
     aa0:	64000000 	strvs	r0, [r0], #-0
     aa4:	74000005 	strvc	r0, [r0], #-5
     aa8:	01000005 	tsteq	r0, r5
     aac:	05745000 	ldrbeq	r5, [r4, #-0]!
     ab0:	05880000 	streq	r0, [r8]
     ab4:	00010000 	andeq	r0, r1, r0
     ab8:	00058854 	andeq	r8, r5, r4, asr r8
     abc:	00058c00 	andeq	r8, r5, r0, lsl #24
     ac0:	50000100 	andpl	r0, r0, r0, lsl #2
     ac4:	0000058c 	andeq	r0, r0, ip, lsl #11
     ac8:	000005a0 	andeq	r0, r0, r0, lsr #11
     acc:	a0540001 	subsge	r0, r4, r1
     ad0:	b8000005 	stmdalt	r0, {r0, r2}
     ad4:	01000005 	tsteq	r0, r5
     ad8:	00005000 	andeq	r5, r0, r0
     adc:	00000000 	andeq	r0, r0, r0
     ae0:	05b80000 	ldreq	r0, [r8, #0]!
     ae4:	05cb0000 	strbeq	r0, [fp]
     ae8:	00010000 	andeq	r0, r1, r0
     aec:	0005cb50 	andeq	ip, r5, r0, asr fp
     af0:	00060000 	andeq	r0, r6, r0
     af4:	f3000400 	vshl.u8	d0, d0, d0
     af8:	009f5001 	addseq	r5, pc, r1
     afc:	00000000 	andeq	r0, r0, r0
     b00:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
     b04:	cb000005 	blgt	b20 <_start-0x74e0>
     b08:	01000005 	tsteq	r0, r5
     b0c:	05cb5100 	strbeq	r5, [fp, #256]	; 0x100
     b10:	06000000 	streq	r0, [r0], -r0
     b14:	00040000 	andeq	r0, r4, r0
     b18:	9f5101f3 	svcls	0x005101f3
	...
     b24:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
     b28:	000005cb 	andeq	r0, r0, fp, asr #11
     b2c:	cb520001 	blgt	1480b38 <__bss_end__+0x1476fd8>
     b30:	00000005 	andeq	r0, r0, r5
     b34:	04000006 	streq	r0, [r0], #-6
     b38:	5201f300 	andpl	pc, r1, #0, 6
     b3c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     b40:	00000000 	andeq	r0, r0, r0
     b44:	0005b800 	andeq	fp, r5, r0, lsl #16
     b48:	0005cb00 	andeq	ip, r5, r0, lsl #22
     b4c:	53000100 	movwpl	r0, #256	; 0x100
     b50:	000005cb 	andeq	r0, r0, fp, asr #11
     b54:	00000600 	andeq	r0, r0, r0, lsl #12
     b58:	01f30004 	mvnseq	r0, r4
     b5c:	00009f53 	andeq	r9, r0, r3, asr pc
     b60:	00000000 	andeq	r0, r0, r0
     b64:	05cc0000 	strbeq	r0, [ip]
     b68:	05d80000 	ldrbeq	r0, [r8]
     b6c:	00010000 	andeq	r0, r1, r0
     b70:	0005ec50 	andeq	lr, r5, r0, asr ip
     b74:	00060000 	andeq	r0, r6, r0
     b78:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     b84:	0000002c 	andeq	r0, r0, ip, lsr #32
     b88:	00000038 	andeq	r0, r0, r8, lsr r0
     b8c:	38500001 	ldmdacc	r0, {r0}^
     b90:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     b94:	01000000 	mrseq	r0, (UNDEF: 0)
     b98:	00485500 	subeq	r5, r8, r0, lsl #10
     b9c:	00580000 	subseq	r0, r8, r0
     ba0:	00010000 	andeq	r0, r1, r0
     ba4:	00000050 	andeq	r0, r0, r0, asr r0
	...
     bb0:	00001000 	andeq	r1, r0, r0
     bb4:	50000100 	andpl	r0, r0, r0, lsl #2
     bb8:	00000010 	andeq	r0, r0, r0, lsl r0
     bbc:	00000034 	andeq	r0, r0, r4, lsr r0
     bc0:	00540001 	subseq	r0, r4, r1
	...
     bcc:	1c000000 	stcne	0, cr0, [r0], {-0}
     bd0:	01000000 	mrseq	r0, (UNDEF: 0)
     bd4:	001c5000 	andseq	r5, ip, r0
     bd8:	00200000 	eoreq	r0, r0, r0
     bdc:	00040000 	andeq	r0, r4, r0
     be0:	9f5001f3 	svcls	0x005001f3
	...
     bf0:	00000008 	andeq	r0, r0, r8
     bf4:	9f300002 	svcls	0x00300002
     bf8:	00000008 	andeq	r0, r0, r8
     bfc:	00000020 	andeq	r0, r0, r0, lsr #32
     c00:	00530001 	subseq	r0, r3, r1
	...
     c0c:	04000000 	streq	r0, [r0], #-0
     c10:	01000000 	mrseq	r0, (UNDEF: 0)
     c14:	00045000 	andeq	r5, r4, r0
     c18:	000c0000 	andeq	r0, ip, r0
     c1c:	00030000 	andeq	r0, r3, r0
     c20:	0c9f3070 	ldceq	0, cr3, [pc], {112}	; 0x70
     c24:	14000000 	strne	r0, [r0], #-0
     c28:	04000000 	streq	r0, [r0], #-0
     c2c:	5001f300 	andpl	pc, r1, r0, lsl #6
     c30:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     c34:	00000000 	andeq	r0, r0, r0
     c38:	00001400 	andeq	r1, r0, r0, lsl #8
     c3c:	00002000 	andeq	r2, r0, r0
     c40:	50000100 	andpl	r0, r0, r0, lsl #2
     c44:	00000020 	andeq	r0, r0, r0, lsr #32
     c48:	0000002c 	andeq	r0, r0, ip, lsr #32
     c4c:	01700003 	cmneq	r0, r3
     c50:	00002c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
     c54:	00004000 	andeq	r4, r0, r0
     c58:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     c64:	00000014 	andeq	r0, r0, r4, lsl r0
     c68:	00000018 	andeq	r0, r0, r8, lsl r0
     c6c:	18510001 	ldmdane	r1, {r0}^
     c70:	40000000 	andmi	r0, r0, r0
     c74:	04000000 	streq	r0, [r0], #-0
     c78:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     c7c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     c80:	00000000 	andeq	r0, r0, r0
     c84:	00004000 	andeq	r4, r0, r0
     c88:	00006000 	andeq	r6, r0, r0
     c8c:	50000100 	andpl	r0, r0, r0, lsl #2
     c90:	00000060 	andeq	r0, r0, r0, rrx
     c94:	0000006c 	andeq	r0, r0, ip, rrx
     c98:	01710003 	cmneq	r1, r3
     c9c:	00006c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
     ca0:	00007400 	andeq	r7, r0, r0, lsl #8
     ca4:	51000100 	mrspl	r0, (UNDEF: 16)
     ca8:	00000074 	andeq	r0, r0, r4, ror r0
     cac:	00000080 	andeq	r0, r0, r0, lsl #1
     cb0:	01710003 	cmneq	r1, r3
     cb4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     cb8:	00000000 	andeq	r0, r0, r0
     cbc:	00004000 	andeq	r4, r0, r0
     cc0:	00005000 	andeq	r5, r0, r0
     cc4:	51000100 	mrspl	r0, (UNDEF: 16)
     cc8:	00000050 	andeq	r0, r0, r0, asr r0
     ccc:	00000080 	andeq	r0, r0, r0, lsl #1
     cd0:	01f30004 	mvnseq	r0, r4
     cd4:	00009f51 	andeq	r9, r0, r1, asr pc
     cd8:	00000000 	andeq	r0, r0, r0
     cdc:	00400000 	subeq	r0, r0, r0
     ce0:	00580000 	subseq	r0, r8, r0
     ce4:	00010000 	andeq	r0, r1, r0
     ce8:	00005852 	andeq	r5, r0, r2, asr r8
     cec:	00006400 	andeq	r6, r0, r0, lsl #8
     cf0:	52000100 	andpl	r0, r0, #0, 2
     cf4:	00000064 	andeq	r0, r0, r4, rrx
     cf8:	00000068 	andeq	r0, r0, r8, rrx
     cfc:	01720003 	cmneq	r2, r3
     d00:	0000689f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
     d04:	00008000 	andeq	r8, r0, r0
     d08:	52000100 	andpl	r0, r0, #0, 2
	...
     d14:	00000040 	andeq	r0, r0, r0, asr #32
     d18:	00000054 	andeq	r0, r0, r4, asr r0
     d1c:	54530001 	ldrbpl	r0, [r3], #-1
     d20:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
     d24:	01000000 	mrseq	r0, (UNDEF: 0)
     d28:	00005300 	andeq	r5, r0, r0, lsl #6
     d2c:	00000000 	andeq	r0, r0, r0
     d30:	00480000 	subeq	r0, r8, r0
     d34:	00600000 	rsbeq	r0, r0, r0
     d38:	00010000 	andeq	r0, r1, r0
     d3c:	0000605c 	andeq	r6, r0, ip, asr r0
     d40:	00008000 	andeq	r8, r0, r0
     d44:	f3000a00 	vpmax.u8	d0, d0, d0
     d48:	01f35201 	mvnseq	r5, r1, lsl #4
     d4c:	01231c53 	teqeq	r3, r3, asr ip
     d50:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     d54:	00000000 	andeq	r0, r0, r0
     d58:	00008000 	andeq	r8, r0, r0
     d5c:	0000a400 	andeq	sl, r0, r0, lsl #8
     d60:	50000100 	andpl	r0, r0, r0, lsl #2
     d64:	000000a4 	andeq	r0, r0, r4, lsr #1
     d68:	00000118 	andeq	r0, r0, r8, lsl r1
     d6c:	02700003 	rsbseq	r0, r0, #3
     d70:	0001189f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
     d74:	00021800 	andeq	r1, r2, r0, lsl #16
     d78:	f3000400 	vshl.u8	d0, d0, d0
     d7c:	009f5001 	addseq	r5, pc, r1
     d80:	00000000 	andeq	r0, r0, r0
     d84:	80000000 	andhi	r0, r0, r0
     d88:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
     d8c:	01000000 	mrseq	r0, (UNDEF: 0)
     d90:	00f05100 	rscseq	r5, r0, r0, lsl #2
     d94:	01600000 	cmneq	r0, r0
     d98:	00010000 	andeq	r0, r1, r0
     d9c:	00016055 	andeq	r6, r1, r5, asr r0
     da0:	00016800 	andeq	r6, r1, r0, lsl #16
     da4:	51000100 	mrspl	r0, (UNDEF: 16)
     da8:	00000168 	andeq	r0, r0, r8, ror #2
     dac:	00000188 	andeq	r0, r0, r8, lsl #3
     db0:	88550001 	ldmdahi	r5, {r0}^
     db4:	9c000001 	stcls	0, cr0, [r0], {1}
     db8:	01000001 	tsteq	r0, r1
     dbc:	019c5100 	orrseq	r5, ip, r0, lsl #2
     dc0:	01bc0000 			; <UNDEFINED> instruction: 0x01bc0000
     dc4:	00010000 	andeq	r0, r1, r0
     dc8:	0001bc55 	andeq	fp, r1, r5, asr ip
     dcc:	0001c400 	andeq	ip, r1, r0, lsl #8
     dd0:	51000100 	mrspl	r0, (UNDEF: 16)
     dd4:	000001c4 	andeq	r0, r0, r4, asr #3
     dd8:	000001fc 	strdeq	r0, [r0], -ip
     ddc:	fc550001 	mrrc2	0, 0, r0, r5, cr1
     de0:	18000001 	stmdane	r0, {r0}
     de4:	04000002 	streq	r0, [r0], #-2
     de8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     dec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     df0:	00000000 	andeq	r0, r0, r0
     df4:	00008000 	andeq	r8, r0, r0
     df8:	00009400 	andeq	r9, r0, r0, lsl #8
     dfc:	52000100 	andpl	r0, r0, #0, 2
     e00:	00000094 	muleq	r0, r4, r0
     e04:	000001fc 	strdeq	r0, [r0], -ip
     e08:	fc540001 	mrrc2	0, 0, r0, r4, cr1
     e0c:	18000001 	stmdane	r0, {r0}
     e10:	04000002 	streq	r0, [r0], #-2
     e14:	5201f300 	andpl	pc, r1, #0, 6
     e18:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     e1c:	00000000 	andeq	r0, r0, r0
     e20:	00008000 	andeq	r8, r0, r0
     e24:	00010000 	andeq	r0, r1, r0
     e28:	53000100 	movwpl	r0, #256	; 0x100
     e2c:	00000104 	andeq	r0, r0, r4, lsl #2
     e30:	00000108 	andeq	r0, r0, r8, lsl #2
     e34:	60530001 	subsvs	r0, r3, r1
     e38:	68000001 	stmdavs	r0, {r0}
     e3c:	01000001 	tsteq	r0, r1
     e40:	01685300 	cmneq	r8, r0, lsl #6
     e44:	01880000 	orreq	r0, r8, r0
     e48:	00040000 	andeq	r0, r4, r0
     e4c:	9f5301f3 	svcls	0x005301f3
     e50:	00000188 	andeq	r0, r0, r8, lsl #3
     e54:	00000190 	muleq	r0, r0, r1
     e58:	90530001 	subsls	r0, r3, r1
     e5c:	94000001 	strls	r0, [r0], #-1
     e60:	01000001 	tsteq	r0, r1
     e64:	01945c00 	orrseq	r5, r4, r0, lsl #24
     e68:	019c0000 	orrseq	r0, ip, r0
     e6c:	00010000 	andeq	r0, r1, r0
     e70:	00019c53 	andeq	r9, r1, r3, asr ip
     e74:	0001bc00 	andeq	fp, r1, r0, lsl #24
     e78:	f3000400 	vshl.u8	d0, d0, d0
     e7c:	bc9f5301 	ldclt	3, cr5, [pc], {1}
     e80:	cc000001 	stcgt	0, cr0, [r0], {1}
     e84:	01000001 	tsteq	r0, r1
     e88:	01cc5300 	biceq	r5, ip, r0, lsl #6
     e8c:	01cf0000 	biceq	r0, pc, r0
     e90:	00010000 	andeq	r0, r1, r0
     e94:	0001cf5c 	andeq	ip, r1, ip, asr pc
     e98:	0001d400 	andeq	sp, r1, r0, lsl #8
     e9c:	f3000400 	vshl.u8	d0, d0, d0
     ea0:	009f5301 	addseq	r5, pc, r1, lsl #6
     ea4:	00000000 	andeq	r0, r0, r0
     ea8:	80000000 	andhi	r0, r0, r0
     eac:	9c000000 	stcls	0, cr0, [r0], {-0}
     eb0:	02000000 	andeq	r0, r0, #0
     eb4:	9c009100 	stflsd	f1, [r0], {-0}
     eb8:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
     ebc:	01000001 	tsteq	r0, r1
     ec0:	01d45200 	bicseq	r5, r4, r0, lsl #4
     ec4:	01df0000 	bicseq	r0, pc, r0
     ec8:	00010000 	andeq	r0, r1, r0
     ecc:	00000052 	andeq	r0, r0, r2, asr r0
     ed0:	00000000 	andeq	r0, r0, r0
     ed4:	00009c00 	andeq	r9, r0, r0, lsl #24
     ed8:	00011800 	andeq	r1, r1, r0, lsl #16
     edc:	5d000100 	stfpls	f0, [r0, #-0]
     ee0:	00000118 	andeq	r0, r0, r8, lsl r1
     ee4:	0000011c 	andeq	r0, r0, ip, lsl r1
     ee8:	1c530001 	mrrcne	0, 0, r0, r3, cr1
     eec:	20000001 	andcs	r0, r0, r1
     ef0:	01000001 	tsteq	r0, r1
     ef4:	01205100 	teqeq	r0, r0, lsl #2
     ef8:	01600000 	cmneq	r0, r0
     efc:	00010000 	andeq	r0, r1, r0
     f00:	00016053 	andeq	r6, r1, r3, asr r0
     f04:	00016800 	andeq	r6, r1, r0, lsl #16
     f08:	5d000100 	stfpls	f0, [r0, #-0]
     f0c:	00000168 	andeq	r0, r0, r8, ror #2
     f10:	0000016c 	andeq	r0, r0, ip, ror #2
     f14:	6c5e0001 	mrrcvs	0, 0, r0, lr, cr1
     f18:	88000001 	stmdahi	r0, {r0}
     f1c:	01000001 	tsteq	r0, r1
     f20:	01885300 	orreq	r5, r8, r0, lsl #6
     f24:	01900000 	orrseq	r0, r0, r0
     f28:	00040000 	andeq	r0, r4, r0
     f2c:	9f7fa191 	svcls	0x007fa191
     f30:	00000190 	muleq	r0, r0, r1
     f34:	00000194 	muleq	r0, r4, r1
     f38:	94530001 	ldrbls	r0, [r3], #-1
     f3c:	9c000001 	stcls	0, cr0, [r0], {1}
     f40:	01000001 	tsteq	r0, r1
     f44:	019c5d00 	orrseq	r5, ip, r0, lsl #26
     f48:	01a00000 	moveq	r0, r0
     f4c:	00010000 	andeq	r0, r1, r0
     f50:	0001a05e 	andeq	sl, r1, lr, asr r0
     f54:	0001bc00 	andeq	fp, r1, r0, lsl #24
     f58:	53000100 	movwpl	r0, #256	; 0x100
     f5c:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     f60:	000001d4 	ldrdeq	r0, [r0], -r4
     f64:	d45d0001 	ldrble	r0, [sp], #-1
     f68:	df000001 	svcle	0x00000001
     f6c:	01000001 	tsteq	r0, r1
     f70:	00005300 	andeq	r5, r0, r0, lsl #6
     f74:	00000000 	andeq	r0, r0, r0
     f78:	00a00000 	adceq	r0, r0, r0
     f7c:	00ec0000 	rsceq	r0, ip, r0
     f80:	00010000 	andeq	r0, r1, r0
     f84:	0000ec5c 	andeq	lr, r0, ip, asr ip
     f88:	00010000 	andeq	r0, r1, r0
     f8c:	53000100 	movwpl	r0, #256	; 0x100
     f90:	00000100 	andeq	r0, r0, r0, lsl #2
     f94:	00000104 	andeq	r0, r0, r4, lsl #2
     f98:	045c0001 	ldrbeq	r0, [ip], #-1
     f9c:	08000001 	stmdaeq	r0, {r0}
     fa0:	01000001 	tsteq	r0, r1
     fa4:	01085300 	mrseq	r5, (UNDEF: 56)
     fa8:	01180000 	tsteq	r8, r0
     fac:	00010000 	andeq	r0, r1, r0
     fb0:	0001185c 	andeq	r1, r1, ip, asr r8
     fb4:	00011c00 	andeq	r1, r1, r0, lsl #24
     fb8:	50000100 	andpl	r0, r0, r0, lsl #2
     fbc:	0000011c 	andeq	r0, r0, ip, lsl r1
     fc0:	0000013c 	andeq	r0, r0, ip, lsr r1
     fc4:	445c0001 	ldrbmi	r0, [ip], #-1
     fc8:	58000001 	stmdapl	r0, {r0}
     fcc:	01000001 	tsteq	r0, r1
     fd0:	01585000 	cmpeq	r8, r0
     fd4:	01600000 	cmneq	r0, r0
     fd8:	00010000 	andeq	r0, r1, r0
     fdc:	0001605c 	andeq	r6, r1, ip, asr r0
     fe0:	00016800 	andeq	r6, r1, r0, lsl #16
     fe4:	53000100 	movwpl	r0, #256	; 0x100
     fe8:	00000168 	andeq	r0, r0, r8, ror #2
     fec:	00000178 	andeq	r0, r0, r8, ror r1
     ff0:	785c0001 	ldmdavc	ip, {r0}^
     ff4:	80000001 	andhi	r0, r0, r1
     ff8:	05000001 	streq	r0, [r0, #-1]
     ffc:	34007c00 	strcc	r7, [r0], #-3072	; 0xc00
    1000:	01809f25 	orreq	r9, r0, r5, lsr #30
    1004:	01880000 	orreq	r0, r8, r0
    1008:	00010000 	andeq	r0, r1, r0
    100c:	0001885c 	andeq	r8, r1, ip, asr r8
    1010:	00019000 	andeq	r9, r1, r0
    1014:	53000100 	movwpl	r0, #256	; 0x100
    1018:	00000190 	muleq	r0, r0, r1
    101c:	00000194 	muleq	r0, r4, r1
    1020:	945c0001 	ldrbls	r0, [ip], #-1
    1024:	9c000001 	stcls	0, cr0, [r0], {1}
    1028:	01000001 	tsteq	r0, r1
    102c:	019c5300 	orrseq	r5, ip, r0, lsl #6
    1030:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
    1034:	00010000 	andeq	r0, r1, r0
    1038:	0001ac5c 	andeq	sl, r1, ip, asr ip
    103c:	0001b400 	andeq	fp, r1, r0, lsl #8
    1040:	7c000500 	cfstr32vc	mvfx0, [r0], {-0}
    1044:	9f253100 	svcls	0x00253100
    1048:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
    104c:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    1050:	bc5c0001 	mrrclt	0, 0, r0, ip, cr1
    1054:	cc000001 	stcgt	0, cr0, [r0], {1}
    1058:	01000001 	tsteq	r0, r1
    105c:	01cc5300 	biceq	r5, ip, r0, lsl #6
    1060:	01cf0000 	biceq	r0, pc, r0
    1064:	00010000 	andeq	r0, r1, r0
    1068:	0001cf5c 	andeq	ip, r1, ip, asr pc
    106c:	0001d400 	andeq	sp, r1, r0, lsl #8
    1070:	f3000400 	vshl.u8	d0, d0, d0
    1074:	d49f5301 	ldrle	r5, [pc], #769	; 107c <_start-0x6f84>
    1078:	df000001 	svcle	0x00000001
    107c:	01000001 	tsteq	r0, r1
    1080:	00005c00 	andeq	r5, r0, r0, lsl #24
    1084:	00000000 	andeq	r0, r0, r0
    1088:	00ec0000 	rsceq	r0, ip, r0
    108c:	00fc0000 	rscseq	r0, ip, r0
    1090:	00020000 	andeq	r0, r2, r0
    1094:	00fc9f30 	rscseq	r9, ip, r0, lsr pc
    1098:	01040000 	mrseq	r0, (UNDEF: 4)
    109c:	00020000 	andeq	r0, r2, r0
    10a0:	01049f31 	tsteq	r4, r1, lsr pc
    10a4:	01080000 	mrseq	r0, (UNDEF: 8)
    10a8:	00020000 	andeq	r0, r2, r0
    10ac:	00009f30 	andeq	r9, r0, r0, lsr pc
    10b0:	00000000 	andeq	r0, r0, r0
    10b4:	02180000 	andseq	r0, r8, #0
    10b8:	02280000 	eoreq	r0, r8, #0
    10bc:	00010000 	andeq	r0, r1, r0
    10c0:	00022850 	andeq	r2, r2, r0, asr r8
    10c4:	00023c00 	andeq	r3, r2, r0, lsl #24
    10c8:	f3000400 	vshl.u8	d0, d0, d0
    10cc:	3c9f5001 	ldccc	0, cr5, [pc], {1}
    10d0:	68000002 	stmdavs	r0, {r1}
    10d4:	01000002 	tsteq	r0, r2
    10d8:	00005000 	andeq	r5, r0, r0
    10dc:	00000000 	andeq	r0, r0, r0
    10e0:	02180000 	andseq	r0, r8, #0
    10e4:	022c0000 	eoreq	r0, ip, #0
    10e8:	00010000 	andeq	r0, r1, r0
    10ec:	00022c51 	andeq	r2, r2, r1, asr ip
    10f0:	00023c00 	andeq	r3, r2, r0, lsl #24
    10f4:	f3000400 	vshl.u8	d0, d0, d0
    10f8:	3c9f5101 	ldfccs	f5, [pc], {1}
    10fc:	68000002 	stmdavs	r0, {r1}
    1100:	01000002 	tsteq	r0, r2
    1104:	00005100 	andeq	r5, r0, r0, lsl #2
    1108:	00000000 	andeq	r0, r0, r0
    110c:	02680000 	rsbeq	r0, r8, #0
    1110:	02900000 	addseq	r0, r0, #0
    1114:	00010000 	andeq	r0, r1, r0
    1118:	00029050 	andeq	r9, r2, r0, asr r0
    111c:	0004dc00 	andeq	sp, r4, r0, lsl #24
    1120:	5b000100 	blpl	1528 <_start-0x6ad8>
    1124:	000004dc 	ldrdeq	r0, [r0], -ip
    1128:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    112c:	01f30004 	mvnseq	r0, r4
    1130:	00009f50 	andeq	r9, r0, r0, asr pc
    1134:	00000000 	andeq	r0, r0, r0
    1138:	02680000 	rsbeq	r0, r8, #0
    113c:	027c0000 	rsbseq	r0, ip, #0
    1140:	00010000 	andeq	r0, r1, r0
    1144:	00027c51 	andeq	r7, r2, r1, asr ip
    1148:	00029000 	andeq	r9, r2, r0
    114c:	71000300 	mrsvc	r0, LR_irq
    1150:	02909f01 	addseq	r9, r0, #1, 30
    1154:	04f00000 	ldrbteq	r0, [r0], #0
    1158:	00040000 	andeq	r0, r4, r0
    115c:	9f5101f3 	svcls	0x005101f3
	...
    1168:	00000268 	andeq	r0, r0, r8, ror #4
    116c:	00000298 	muleq	r0, r8, r2
    1170:	98520001 	ldmdals	r2, {r0}^
    1174:	c0000002 	andgt	r0, r0, r2
    1178:	01000002 	tsteq	r0, r2
    117c:	02c05200 	sbceq	r5, r0, #0, 4
    1180:	048c0000 	streq	r0, [ip], #0
    1184:	00010000 	andeq	r0, r1, r0
    1188:	00048c56 	andeq	r8, r4, r6, asr ip
    118c:	0004f000 	andeq	pc, r4, r0
    1190:	52000100 	andpl	r0, r0, #0, 2
	...
    119c:	00000268 	andeq	r0, r0, r8, ror #4
    11a0:	00000284 	andeq	r0, r0, r4, lsl #5
    11a4:	00530001 	subseq	r0, r3, r1
    11a8:	00000000 	andeq	r0, r0, r0
    11ac:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    11b0:	90000002 	andls	r0, r0, r2
    11b4:	01000002 	tsteq	r0, r2
    11b8:	02905000 	addseq	r5, r0, #0
    11bc:	02940000 	addseq	r0, r4, #0
    11c0:	00010000 	andeq	r0, r1, r0
    11c4:	00029454 	andeq	r9, r2, r4, asr r4
    11c8:	0002a000 	andeq	sl, r2, r0
    11cc:	74000300 	strvc	r0, [r0], #-768	; 0x300
    11d0:	02a09f01 	adceq	r9, r0, #1, 30
    11d4:	02ac0000 	adceq	r0, ip, #0
    11d8:	00010000 	andeq	r0, r1, r0
    11dc:	0002ac54 	andeq	sl, r2, r4, asr ip
    11e0:	0002b800 	andeq	fp, r2, r0, lsl #16
    11e4:	74000300 	strvc	r0, [r0], #-768	; 0x300
    11e8:	02b89f01 	adcseq	r9, r8, #1, 30
    11ec:	04900000 	ldreq	r0, [r0], #0
    11f0:	00010000 	andeq	r0, r1, r0
    11f4:	00049054 	andeq	r9, r4, r4, asr r0
    11f8:	00049c00 	andeq	r9, r4, r0, lsl #24
    11fc:	74000300 	strvc	r0, [r0], #-768	; 0x300
    1200:	049c9f01 	ldreq	r9, [ip], #3841	; 0xf01
    1204:	04c80000 	strbeq	r0, [r8], #0
    1208:	00010000 	andeq	r0, r1, r0
    120c:	0004c854 	andeq	ip, r4, r4, asr r8
    1210:	0004d400 	andeq	sp, r4, r0, lsl #8
    1214:	50000100 	andpl	r0, r0, r0, lsl #2
    1218:	000004d4 	ldrdeq	r0, [r0], -r4
    121c:	000004dc 	ldrdeq	r0, [r0], -ip
    1220:	01740003 	cmneq	r4, r3
    1224:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1228:	00000000 	andeq	r0, r0, r0
    122c:	00028000 	andeq	r8, r2, r0
    1230:	0004dc00 	andeq	sp, r4, r0, lsl #24
    1234:	58000100 	stmdapl	r0, {r8}
    1238:	000004dc 	ldrdeq	r0, [r0], -ip
    123c:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1240:	01f3000a 	mvnseq	r0, sl
    1244:	5001f351 	andpl	pc, r1, r1, asr r3	; <UNPREDICTABLE>
    1248:	9f1c3122 	svcls	0x001c3122
	...
    1254:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
    1258:	000003c0 	andeq	r0, r0, r0, asr #7
    125c:	e4500001 	ldrb	r0, [r0], #-1
    1260:	e8000003 	stmda	r0, {r0, r1}
    1264:	01000003 	tsteq	r0, r3
    1268:	040c5000 	streq	r5, [ip], #-0
    126c:	04100000 	ldreq	r0, [r0], #-0
    1270:	00010000 	andeq	r0, r1, r0
    1274:	00043450 	andeq	r3, r4, r0, asr r4
    1278:	00043800 	andeq	r3, r4, r0, lsl #16
    127c:	50000100 	andpl	r0, r0, r0, lsl #2
    1280:	00000440 	andeq	r0, r0, r0, asr #8
    1284:	00000444 	andeq	r0, r0, r4, asr #8
    1288:	68500001 	ldmdavs	r0, {r0}^
    128c:	6c000004 	stcvs	0, cr0, [r0], {4}
    1290:	01000004 	tsteq	r0, r4
    1294:	04885000 	streq	r5, [r8], #0
    1298:	04b00000 	ldrteq	r0, [r0], #0
    129c:	00010000 	andeq	r0, r1, r0
    12a0:	00000050 	andeq	r0, r0, r0, asr r0
    12a4:	00000000 	andeq	r0, r0, r0
    12a8:	0002c000 	andeq	ip, r2, r0
    12ac:	0002c800 	andeq	ip, r2, r0, lsl #16
    12b0:	30000200 	andcc	r0, r0, r0, lsl #4
    12b4:	0002c89f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
    12b8:	0002cc00 	andeq	ip, r2, r0, lsl #24
    12bc:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    12c0:	000002d8 	ldrdeq	r0, [r0], -r8
    12c4:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
    12c8:	00570001 	subseq	r0, r7, r1
    12cc:	00000000 	andeq	r0, r0, r0
    12d0:	04000000 	streq	r0, [r0], #-0
    12d4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    12d8:	07000000 	streq	r0, [r0, -r0]
    12dc:	0a007300 	beq	1dee4 <__bss_end__+0x14384>
    12e0:	9f211000 	svcls	0x00211000
    12e4:	00000008 	andeq	r0, r0, r8
    12e8:	00000010 	andeq	r0, r0, r0, lsl r0
    12ec:	00530001 	subseq	r0, r3, r1
    12f0:	00000000 	andeq	r0, r0, r0
    12f4:	14000000 	strne	r0, [r0], #-0
    12f8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    12fc:	07000000 	streq	r0, [r0, -r0]
    1300:	0b007300 	bleq	1df08 <__bss_end__+0x143a8>
    1304:	9f1aefff 	svcls	0x001aefff
    1308:	00000018 	andeq	r0, r0, r8, lsl r0
    130c:	00000020 	andeq	r0, r0, r0, lsr #32
    1310:	00530001 	subseq	r0, r3, r1
    1314:	00000000 	andeq	r0, r0, r0
    1318:	14000000 	strne	r0, [r0], #-0
    131c:	1c000000 	stcne	0, cr0, [r0], {-0}
    1320:	03000000 	movweq	r0, #0
    1324:	9f047300 	svcls	0x00047300
    1328:	0000001c 	andeq	r0, r0, ip, lsl r0
    132c:	00000027 	andeq	r0, r0, r7, lsr #32
    1330:	00530001 	subseq	r0, r3, r1
    1334:	00000000 	andeq	r0, r0, r0
    1338:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    133c:	5c00008d 	stcpl	0, cr0, [r0], {141}	; 0x8d
    1340:	0200008d 	andeq	r0, r0, #141	; 0x8d
    1344:	5c9f3000 	ldcpl	0, cr3, [pc], {0}
    1348:	6000008d 	andvs	r0, r0, sp, lsl #1
    134c:	0100008d 	smlabbeq	r0, sp, r0, r0
    1350:	00005000 	andeq	r5, r0, r0
    1354:	00000000 	andeq	r0, r0, r0
    1358:	8d700000 	ldclhi	0, cr0, [r0, #-0]
    135c:	8d740000 	ldclhi	0, cr0, [r4, #-0]
    1360:	00020000 	andeq	r0, r2, r0
    1364:	8d749f30 	ldclhi	15, cr9, [r4, #-192]!	; 0xffffff40
    1368:	8d780000 	ldclhi	0, cr0, [r8, #-0]
    136c:	00010000 	andeq	r0, r1, r0
    1370:	008d7c53 	addeq	r7, sp, r3, asr ip
    1374:	008d8400 	addeq	r8, sp, r0, lsl #8
    1378:	53000100 	movwpl	r0, #256	; 0x100
	...
    1388:	00000004 	andeq	r0, r0, r4
    138c:	04500001 	ldrbeq	r0, [r0], #-1
    1390:	0c000000 	stceq	0, cr0, [r0], {-0}
    1394:	01000000 	mrseq	r0, (UNDEF: 0)
    1398:	000c5300 	andeq	r5, ip, r0, lsl #6
    139c:	00100000 	andseq	r0, r0, r0
    13a0:	00010000 	andeq	r0, r1, r0
    13a4:	00001050 	andeq	r1, r0, r0, asr r0
    13a8:	00001c00 	andeq	r1, r0, r0, lsl #24
    13ac:	53000100 	movwpl	r0, #256	; 0x100
	...
    13b8:	00000040 	andeq	r0, r0, r0, asr #32
    13bc:	00000043 	andeq	r0, r0, r3, asr #32
    13c0:	43500001 	cmpmi	r0, #1
    13c4:	4c000000 	stcmi	0, cr0, [r0], {-0}
    13c8:	01000000 	mrseq	r0, (UNDEF: 0)
    13cc:	00005400 	andeq	r5, r0, r0, lsl #8
    13d0:	00000000 	andeq	r0, r0, r0
    13d4:	004c0000 	subeq	r0, ip, r0
    13d8:	00570000 	subseq	r0, r7, r0
    13dc:	00010000 	andeq	r0, r1, r0
    13e0:	00005750 	andeq	r5, r0, r0, asr r7
    13e4:	00007000 	andeq	r7, r0, r0
    13e8:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    13f4:	00000060 	andeq	r0, r0, r0, rrx
    13f8:	00000064 	andeq	r0, r0, r4, rrx
    13fc:	00500001 	subseq	r0, r0, r1
    1400:	00000000 	andeq	r0, r0, r0
    1404:	70000000 	andvc	r0, r0, r0
    1408:	7c000000 	stcvc	0, cr0, [r0], {-0}
    140c:	01000000 	mrseq	r0, (UNDEF: 0)
    1410:	007c5000 	rsbseq	r5, ip, r0
    1414:	00840000 	addeq	r0, r4, r0
    1418:	00040000 	andeq	r0, r4, r0
    141c:	9f5001f3 	svcls	0x005001f3
	...
    1428:	00000084 	andeq	r0, r0, r4, lsl #1
    142c:	00000090 	muleq	r0, r0, r0
    1430:	90500001 	subsls	r0, r0, r1
    1434:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    1438:	04000000 	streq	r0, [r0], #-0
    143c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1440:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1444:	00000000 	andeq	r0, r0, r0
    1448:	0000fc00 	andeq	pc, r0, r0, lsl #24
    144c:	00010400 	andeq	r0, r1, r0, lsl #8
    1450:	50000100 	andpl	r0, r0, r0, lsl #2
    1454:	00000104 	andeq	r0, r0, r4, lsl #2
    1458:	00000128 	andeq	r0, r0, r8, lsr #2
    145c:	00540001 	subseq	r0, r4, r1
	...
    1468:	90000000 	andls	r0, r0, r0
    146c:	01000000 	mrseq	r0, (UNDEF: 0)
    1470:	00905000 	addseq	r5, r0, r0
    1474:	00d40000 	sbcseq	r0, r4, r0
    1478:	00010000 	andeq	r0, r1, r0
    147c:	00000054 	andeq	r0, r0, r4, asr r0
    1480:	00000000 	andeq	r0, r0, r0
    1484:	00004800 	andeq	r4, r0, r0, lsl #16
    1488:	00004c00 	andeq	r4, r0, r0, lsl #24
    148c:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    1490:	00000054 	andeq	r0, r0, r4, asr r0
    1494:	00000058 	andeq	r0, r0, r8, asr r0
    1498:	60550001 	subsvs	r0, r5, r1
    149c:	64000000 	strvs	r0, [r0], #-0
    14a0:	01000000 	mrseq	r0, (UNDEF: 0)
    14a4:	006c5500 	rsbeq	r5, ip, r0, lsl #10
    14a8:	00700000 	rsbseq	r0, r0, r0
    14ac:	00010000 	andeq	r0, r1, r0
    14b0:	00007855 	andeq	r7, r0, r5, asr r8
    14b4:	00007c00 	andeq	r7, r0, r0, lsl #24
    14b8:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    14bc:	00000084 	andeq	r0, r0, r4, lsl #1
    14c0:	00000088 	andeq	r0, r0, r8, lsl #1
    14c4:	8c550001 	mrrchi	0, 0, r0, r5, cr1
    14c8:	d4000000 	strle	r0, [r0], #-0
    14cc:	01000000 	mrseq	r0, (UNDEF: 0)
    14d0:	00005500 	andeq	r5, r0, r0, lsl #10
    14d4:	00000000 	andeq	r0, r0, r0
    14d8:	001c0000 	andseq	r0, ip, r0
    14dc:	00440000 	subeq	r0, r4, r0
    14e0:	00010000 	andeq	r0, r1, r0
    14e4:	00004453 	andeq	r4, r0, r3, asr r4
    14e8:	00004c00 	andeq	r4, r0, r0, lsl #24
    14ec:	70001c00 	andvc	r1, r0, r0, lsl #24
    14f0:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    14f4:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    14f8:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    14fc:	00000000 	andeq	r0, r0, r0
    1500:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1504:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1508:	4c9f2533 	cfldr32mi	mvfx2, [pc], {51}	; 0x33
    150c:	50000000 	andpl	r0, r0, r0
    1510:	01000000 	mrseq	r0, (UNDEF: 0)
    1514:	00505300 	subseq	r5, r0, r0, lsl #6
    1518:	00580000 	subseq	r0, r8, r0
    151c:	001c0000 	andseq	r0, ip, r0
    1520:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    1524:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    1528:	cccccd08 	stclgt	13, cr12, [ip], {8}
    152c:	000000cc 	andeq	r0, r0, ip, asr #1
    1530:	20081e00 	andcs	r1, r8, r0, lsl #28
    1534:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1538:	9f25332c 	svcls	0x0025332c
    153c:	00000058 	andeq	r0, r0, r8, asr r0
    1540:	0000005c 	andeq	r0, r0, ip, asr r0
    1544:	5c530001 	mrrcpl	0, 0, r0, r3, cr1
    1548:	64000000 	strvs	r0, [r0], #-0
    154c:	1c000000 	stcne	0, cr0, [r0], {-0}
    1550:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    1554:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    1558:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    155c:	0000cccc 	andeq	ip, r0, ip, asr #25
    1560:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1564:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1568:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    156c:	0000649f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    1570:	00006800 	andeq	r6, r0, r0, lsl #16
    1574:	53000100 	movwpl	r0, #256	; 0x100
    1578:	00000068 	andeq	r0, r0, r8, rrx
    157c:	00000070 	andeq	r0, r0, r0, ror r0
    1580:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    1584:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1588:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    158c:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1590:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1594:	25f72008 	ldrbcs	r2, [r7, #8]!
    1598:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    159c:	00709f25 	rsbseq	r9, r0, r5, lsr #30
    15a0:	00740000 	rsbseq	r0, r4, r0
    15a4:	00010000 	andeq	r0, r1, r0
    15a8:	00007453 	andeq	r7, r0, r3, asr r4
    15ac:	00007c00 	andeq	r7, r0, r0, lsl #24
    15b0:	70001c00 	andvc	r1, r0, r0, lsl #24
    15b4:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    15b8:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    15bc:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    15c0:	00000000 	andeq	r0, r0, r0
    15c4:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    15c8:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    15cc:	7c9f2533 	cfldr32vc	mvfx2, [pc], {51}	; 0x33
    15d0:	80000000 	andhi	r0, r0, r0
    15d4:	01000000 	mrseq	r0, (UNDEF: 0)
    15d8:	00805300 	addeq	r5, r0, r0, lsl #6
    15dc:	00880000 	addeq	r0, r8, r0
    15e0:	001c0000 	andseq	r0, ip, r0
    15e4:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    15e8:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    15ec:	cccccd08 	stclgt	13, cr12, [ip], {8}
    15f0:	000000cc 	andeq	r0, r0, ip, asr #1
    15f4:	20081e00 	andcs	r1, r8, r0, lsl #28
    15f8:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    15fc:	9f25332c 	svcls	0x0025332c
    1600:	00000088 	andeq	r0, r0, r8, lsl #1
    1604:	0000008c 	andeq	r0, r0, ip, lsl #1
    1608:	8c530001 	mrrchi	0, 0, r0, r3, cr1
    160c:	90000000 	andls	r0, r0, r0
    1610:	1c000000 	stcne	0, cr0, [r0], {-0}
    1614:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    1618:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    161c:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1620:	0000cccc 	andeq	ip, r0, ip, asr #25
    1624:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1628:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    162c:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1630:	0000909f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1634:	00009800 	andeq	r9, r0, r0, lsl #16
    1638:	74001c00 	strvc	r1, [r0], #-3072	; 0xc00
    163c:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1640:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1644:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1648:	00000000 	andeq	r0, r0, r0
    164c:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1650:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1654:	989f2533 	ldmls	pc, {r0, r1, r4, r5, r8, sl, sp}	; <UNPREDICTABLE>
    1658:	9c000000 	stcls	0, cr0, [r0], {-0}
    165c:	17000000 	strne	r0, [r0, -r0]
    1660:	f7007400 			; <UNDEFINED> instruction: 0xf7007400
    1664:	7125f72c 	msrvc	SP_abt, ip
    1668:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    166c:	20081e25 	andcs	r1, r8, r5, lsr #28
    1670:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1674:	9f25332c 	svcls	0x0025332c
    1678:	0000009c 	muleq	r0, ip, r0
    167c:	000000d4 	ldrdeq	r0, [r0], -r4
    1680:	0074001c 	rsbseq	r0, r4, ip, lsl r0
    1684:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1688:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    168c:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1690:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1694:	25f72008 	ldrbcs	r2, [r7, #8]!
    1698:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    169c:	00009f25 	andeq	r9, r0, r5, lsr #30
    16a0:	00000000 	andeq	r0, r0, r0
    16a4:	00940000 	addseq	r0, r4, r0
    16a8:	00b80000 	adcseq	r0, r8, r0
    16ac:	00010000 	andeq	r0, r1, r0
    16b0:	0000b850 	andeq	fp, r0, r0, asr r8
    16b4:	0000c400 	andeq	ip, r0, r0, lsl #8
    16b8:	31000800 	tstcc	r0, r0, lsl #16
    16bc:	73240071 	teqvc	r4, #113	; 0x71
    16c0:	c49f2100 	ldrgt	r2, [pc], #256	; 16c8 <_start-0x6938>
    16c4:	c7000000 	strgt	r0, [r0, -r0]
    16c8:	01000000 	mrseq	r0, (UNDEF: 0)
    16cc:	00005100 	andeq	r5, r0, r0, lsl #2
    16d0:	00000000 	andeq	r0, r0, r0
    16d4:	00d40000 	sbcseq	r0, r4, r0
    16d8:	00f80000 	rscseq	r0, r8, r0
    16dc:	00010000 	andeq	r0, r1, r0
    16e0:	0000f850 	andeq	pc, r0, r0, asr r8	; <UNPREDICTABLE>
    16e4:	00010c00 	andeq	r0, r1, r0, lsl #24
    16e8:	f3000400 	vshl.u8	d0, d0, d0
    16ec:	009f5001 	addseq	r5, pc, r1
    16f0:	00000000 	andeq	r0, r0, r0
    16f4:	e0000000 	and	r0, r0, r0
    16f8:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    16fc:	02000000 	andeq	r0, r0, #0
    1700:	e89f3000 	ldm	pc, {ip, sp}	; <UNPREDICTABLE>
    1704:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    1708:	01000000 	mrseq	r0, (UNDEF: 0)
    170c:	00e85200 	rsceq	r5, r8, r0, lsl #4
    1710:	00f00000 	rscseq	r0, r0, r0
    1714:	00020000 	andeq	r0, r2, r0
    1718:	00f09f30 	rscseq	r9, r0, r0, lsr pc
    171c:	01030000 	mrseq	r0, (UNDEF: 3)
    1720:	00010000 	andeq	r0, r1, r0
    1724:	00000052 	andeq	r0, r0, r2, asr r0
    1728:	00000000 	andeq	r0, r0, r0
    172c:	0000e000 	andeq	lr, r0, r0
    1730:	0000f400 	andeq	pc, r0, r0, lsl #8
    1734:	30000200 	andcc	r0, r0, r0, lsl #4
    1738:	0000f49f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    173c:	00010000 	andeq	r0, r1, r0
    1740:	31000500 	tstcc	r0, r0, lsl #10
    1744:	9f240073 	svcls	0x00240073
    1748:	00000100 	andeq	r0, r0, r0, lsl #2
    174c:	00000103 	andeq	r0, r0, r3, lsl #2
    1750:	03510001 	cmpeq	r1, #1
    1754:	0c000001 	stceq	0, cr0, [r0], {1}
    1758:	08000001 	stmdaeq	r0, {r0}
    175c:	01f33100 	mvnseq	r3, r0, lsl #2
    1760:	241a4f50 	ldrcs	r4, [sl], #-3920	; 0xf50
    1764:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1768:	00000000 	andeq	r0, r0, r0
    176c:	00010c00 	andeq	r0, r1, r0, lsl #24
    1770:	00013000 	andeq	r3, r1, r0
    1774:	50000100 	andpl	r0, r0, r0, lsl #2
    1778:	00000130 	andeq	r0, r0, r0, lsr r1
    177c:	00000144 	andeq	r0, r0, r4, asr #2
    1780:	01f30004 	mvnseq	r0, r4
    1784:	00009f50 	andeq	r9, r0, r0, asr pc
    1788:	00000000 	andeq	r0, r0, r0
    178c:	01180000 	tsteq	r8, r0
    1790:	01200000 	teqeq	r0, r0
    1794:	00020000 	andeq	r0, r2, r0
    1798:	01209f30 	teqeq	r0, r0, lsr pc
    179c:	01200000 	teqeq	r0, r0
    17a0:	00010000 	andeq	r0, r1, r0
    17a4:	00012052 	andeq	r2, r1, r2, asr r0
    17a8:	00012800 	andeq	r2, r1, r0, lsl #16
    17ac:	30000200 	andcc	r0, r0, r0, lsl #4
    17b0:	0001289f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
    17b4:	00013b00 	andeq	r3, r1, r0, lsl #22
    17b8:	52000100 	andpl	r0, r0, #0, 2
	...
    17c4:	00000118 	andeq	r0, r0, r8, lsl r1
    17c8:	0000012c 	andeq	r0, r0, ip, lsr #2
    17cc:	9f300002 	svcls	0x00300002
    17d0:	0000012c 	andeq	r0, r0, ip, lsr #2
    17d4:	00000138 	andeq	r0, r0, r8, lsr r1
    17d8:	73310005 	teqvc	r1, #5
    17dc:	389f2400 	ldmcc	pc, {sl, sp}	; <UNPREDICTABLE>
    17e0:	3b000001 	blcc	17ec <_start-0x6814>
    17e4:	01000001 	tsteq	r0, r1
    17e8:	013b5100 	teqeq	fp, r0, lsl #2
    17ec:	01440000 	mrseq	r0, (UNDEF: 68)
    17f0:	00080000 	andeq	r0, r8, r0
    17f4:	5001f331 	andpl	pc, r1, r1, lsr r3	; <UNPREDICTABLE>
    17f8:	9f241a4f 	svcls	0x00241a4f
	...
    1804:	00000144 	andeq	r0, r0, r4, asr #2
    1808:	000001d4 	ldrdeq	r0, [r0], -r4
    180c:	d4500001 	ldrble	r0, [r0], #-1
    1810:	10000001 	andne	r0, r0, r1
    1814:	01000002 	tsteq	r0, r2
    1818:	00005400 	andeq	r5, r0, r0, lsl #8
    181c:	00000000 	andeq	r0, r0, r0
    1820:	018c0000 	orreq	r0, ip, r0
    1824:	01900000 	orrseq	r0, r0, r0
    1828:	00010000 	andeq	r0, r1, r0
    182c:	00019855 	andeq	r9, r1, r5, asr r8
    1830:	00019c00 	andeq	r9, r1, r0, lsl #24
    1834:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    1838:	000001a4 	andeq	r0, r0, r4, lsr #3
    183c:	000001a8 	andeq	r0, r0, r8, lsr #3
    1840:	b0550001 	subslt	r0, r5, r1
    1844:	b4000001 	strlt	r0, [r0], #-1
    1848:	01000001 	tsteq	r0, r1
    184c:	01bc5500 			; <UNDEFINED> instruction: 0x01bc5500
    1850:	01c00000 	biceq	r0, r0, r0
    1854:	00010000 	andeq	r0, r1, r0
    1858:	0001c855 	andeq	ip, r1, r5, asr r8
    185c:	0001cc00 	andeq	ip, r1, r0, lsl #24
    1860:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    1864:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1868:	00000210 	andeq	r0, r0, r0, lsl r2
    186c:	00550001 	subseq	r0, r5, r1
    1870:	00000000 	andeq	r0, r0, r0
    1874:	60000000 	andvs	r0, r0, r0
    1878:	88000001 	stmdahi	r0, {r0}
    187c:	01000001 	tsteq	r0, r1
    1880:	01885300 	orreq	r5, r8, r0, lsl #6
    1884:	01900000 	orrseq	r0, r0, r0
    1888:	001c0000 	andseq	r0, ip, r0
    188c:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    1890:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    1894:	cccccd08 	stclgt	13, cr12, [ip], {8}
    1898:	000000cc 	andeq	r0, r0, ip, asr #1
    189c:	20081e00 	andcs	r1, r8, r0, lsl #28
    18a0:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    18a4:	9f25332c 	svcls	0x0025332c
    18a8:	00000190 	muleq	r0, r0, r1
    18ac:	00000194 	muleq	r0, r4, r1
    18b0:	94530001 	ldrbls	r0, [r3], #-1
    18b4:	9c000001 	stcls	0, cr0, [r0], {1}
    18b8:	1c000001 	stcne	0, cr0, [r0], {1}
    18bc:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    18c0:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    18c4:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    18c8:	0000cccc 	andeq	ip, r0, ip, asr #25
    18cc:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    18d0:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    18d4:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    18d8:	00019c9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
    18dc:	0001a000 	andeq	sl, r1, r0
    18e0:	53000100 	movwpl	r0, #256	; 0x100
    18e4:	000001a0 	andeq	r0, r0, r0, lsr #3
    18e8:	000001a8 	andeq	r0, r0, r8, lsr #3
    18ec:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    18f0:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    18f4:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    18f8:	00cccccc 	sbceq	ip, ip, ip, asr #25
    18fc:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1900:	25f72008 	ldrbcs	r2, [r7, #8]!
    1904:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1908:	01a89f25 			; <UNDEFINED> instruction: 0x01a89f25
    190c:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
    1910:	00010000 	andeq	r0, r1, r0
    1914:	0001ac53 	andeq	sl, r1, r3, asr ip
    1918:	0001b400 	andeq	fp, r1, r0, lsl #8
    191c:	70001c00 	andvc	r1, r0, r0, lsl #24
    1920:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1924:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1928:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    192c:	00000000 	andeq	r0, r0, r0
    1930:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1934:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1938:	b49f2533 	ldrlt	r2, [pc], #1331	; 1940 <_start-0x66c0>
    193c:	b8000001 	stmdalt	r0, {r0}
    1940:	01000001 	tsteq	r0, r1
    1944:	01b85300 			; <UNDEFINED> instruction: 0x01b85300
    1948:	01c00000 	biceq	r0, r0, r0
    194c:	001c0000 	andseq	r0, ip, r0
    1950:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    1954:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    1958:	cccccd08 	stclgt	13, cr12, [ip], {8}
    195c:	000000cc 	andeq	r0, r0, ip, asr #1
    1960:	20081e00 	andcs	r1, r8, r0, lsl #28
    1964:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1968:	9f25332c 	svcls	0x0025332c
    196c:	000001c0 	andeq	r0, r0, r0, asr #3
    1970:	000001c4 	andeq	r0, r0, r4, asr #3
    1974:	c4530001 	ldrbgt	r0, [r3], #-1
    1978:	cc000001 	stcgt	0, cr0, [r0], {1}
    197c:	1c000001 	stcne	0, cr0, [r0], {1}
    1980:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    1984:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    1988:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    198c:	0000cccc 	andeq	ip, r0, ip, asr #25
    1990:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1994:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1998:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    199c:	0001cc9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
    19a0:	0001d000 	andeq	sp, r1, r0
    19a4:	53000100 	movwpl	r0, #256	; 0x100
    19a8:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    19ac:	000001d4 	ldrdeq	r0, [r0], -r4
    19b0:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    19b4:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    19b8:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    19bc:	00cccccc 	sbceq	ip, ip, ip, asr #25
    19c0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    19c4:	25f72008 	ldrbcs	r2, [r7, #8]!
    19c8:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    19cc:	01d49f25 	bicseq	r9, r4, r5, lsr #30
    19d0:	01dc0000 	bicseq	r0, ip, r0
    19d4:	001c0000 	andseq	r0, ip, r0
    19d8:	2cf70074 	ldclcs	0, cr0, [r7], #464	; 0x1d0
    19dc:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    19e0:	cccccd08 	stclgt	13, cr12, [ip], {8}
    19e4:	000000cc 	andeq	r0, r0, ip, asr #1
    19e8:	20081e00 	andcs	r1, r8, r0, lsl #28
    19ec:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    19f0:	9f25332c 	svcls	0x0025332c
    19f4:	000001dc 	ldrdeq	r0, [r0], -ip
    19f8:	000001e0 	andeq	r0, r0, r0, ror #3
    19fc:	00740017 	rsbseq	r0, r4, r7, lsl r0
    1a00:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1a04:	2cf70071 	ldclcs	0, cr0, [r7], #452	; 0x1c4
    1a08:	081e25f7 	ldmdaeq	lr, {r0, r1, r2, r4, r5, r6, r7, r8, sl, sp}
    1a0c:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1a10:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1a14:	0001e09f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
    1a18:	00021000 	andeq	r1, r2, r0
    1a1c:	74001c00 	strvc	r1, [r0], #-3072	; 0xc00
    1a20:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1a24:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1a28:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1a2c:	00000000 	andeq	r0, r0, r0
    1a30:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1a34:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1a38:	009f2533 	addseq	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
    1a3c:	00000000 	andeq	r0, r0, r0
    1a40:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    1a44:	fc000001 	stc2	0, cr0, [r0], {1}
    1a48:	01000001 	tsteq	r0, r1
    1a4c:	01fc5000 	mvnseq	r5, r0
    1a50:	02030000 	andeq	r0, r3, #0
    1a54:	00010000 	andeq	r0, r1, r0
    1a58:	00000051 	andeq	r0, r0, r1, asr r0
    1a5c:	00000000 	andeq	r0, r0, r0
    1a60:	00021000 	andeq	r1, r2, r0
    1a64:	00022c00 	andeq	r2, r2, r0, lsl #24
    1a68:	50000100 	andpl	r0, r0, r0, lsl #2
    1a6c:	0000022c 	andeq	r0, r0, ip, lsr #4
    1a70:	00000234 	andeq	r0, r0, r4, lsr r2
    1a74:	34540001 	ldrbcc	r0, [r4], #-1
    1a78:	3c000002 	stccc	0, cr0, [r0], {2}
    1a7c:	01000002 	tsteq	r0, r2
    1a80:	023c5000 	eorseq	r5, ip, #0
    1a84:	02440000 	subeq	r0, r4, #0
    1a88:	00010000 	andeq	r0, r1, r0
    1a8c:	00024454 	andeq	r4, r2, r4, asr r4
    1a90:	00025000 	andeq	r5, r2, r0
    1a94:	f3000400 	vshl.u8	d0, d0, d0
    1a98:	509f5001 	addspl	r5, pc, r1
    1a9c:	54000002 	strpl	r0, [r0], #-2
    1aa0:	01000002 	tsteq	r0, r2
    1aa4:	02545000 	subseq	r5, r4, #0
    1aa8:	025c0000 	subseq	r0, ip, #0
    1aac:	00010000 	andeq	r0, r1, r0
    1ab0:	00000054 	andeq	r0, r0, r4, asr r0
    1ab4:	00000000 	andeq	r0, r0, r0
    1ab8:	00022000 	andeq	r2, r2, r0
    1abc:	00023000 	andeq	r3, r2, r0
    1ac0:	30000200 	andcc	r0, r0, r0, lsl #4
    1ac4:	0002309f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
    1ac8:	00023400 	andeq	r3, r2, r0, lsl #8
    1acc:	50000100 	andpl	r0, r0, r0, lsl #2
    1ad0:	00000234 	andeq	r0, r0, r4, lsr r2
    1ad4:	00000240 	andeq	r0, r0, r0, asr #4
    1ad8:	9f300002 	svcls	0x00300002
    1adc:	00000240 	andeq	r0, r0, r0, asr #4
    1ae0:	0000024c 	andeq	r0, r0, ip, asr #4
    1ae4:	00500001 	subseq	r0, r0, r1
    1ae8:	00000000 	andeq	r0, r0, r0
    1aec:	5c000000 	stcpl	0, cr0, [r0], {-0}
    1af0:	90000002 	andls	r0, r0, r2
    1af4:	01000002 	tsteq	r0, r2
    1af8:	02905000 	addseq	r5, r0, #0
    1afc:	02a00000 	adceq	r0, r0, #0
    1b00:	00040000 	andeq	r0, r4, r0
    1b04:	9f5001f3 	svcls	0x005001f3
    1b08:	000002a0 	andeq	r0, r0, r0, lsr #5
    1b0c:	000002c0 	andeq	r0, r0, r0, asr #5
    1b10:	c0500001 	subsgt	r0, r0, r1
    1b14:	d4000002 	strle	r0, [r0], #-2
    1b18:	04000002 	streq	r0, [r0], #-2
    1b1c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1b20:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1b24:	00000000 	andeq	r0, r0, r0
    1b28:	00025c00 	andeq	r5, r2, r0, lsl #24
    1b2c:	00029400 	andeq	r9, r2, r0, lsl #8
    1b30:	51000100 	mrspl	r0, (UNDEF: 16)
    1b34:	00000294 	muleq	r0, r4, r2
    1b38:	000002a0 	andeq	r0, r0, r0, lsr #5
    1b3c:	01f30004 	mvnseq	r0, r4
    1b40:	02a09f51 	adceq	r9, r0, #324	; 0x144
    1b44:	02c40000 	sbceq	r0, r4, #0
    1b48:	00010000 	andeq	r0, r1, r0
    1b4c:	0002c451 	andeq	ip, r2, r1, asr r4
    1b50:	0002d400 	andeq	sp, r2, r0, lsl #8
    1b54:	f3000400 	vshl.u8	d0, d0, d0
    1b58:	009f5101 	addseq	r5, pc, r1, lsl #2
    1b5c:	00000000 	andeq	r0, r0, r0
    1b60:	70000000 	andvc	r0, r0, r0
    1b64:	90000002 	andls	r0, r0, r2
    1b68:	01000002 	tsteq	r0, r2
    1b6c:	02905000 	addseq	r5, r0, #0
    1b70:	02a00000 	adceq	r0, r0, #0
    1b74:	00040000 	andeq	r0, r4, r0
    1b78:	9f5001f3 	svcls	0x005001f3
	...
    1b84:	00000278 	andeq	r0, r0, r8, ror r2
    1b88:	00000280 	andeq	r0, r0, r0, lsl #5
    1b8c:	9f300002 	svcls	0x00300002
    1b90:	00000280 	andeq	r0, r0, r0, lsl #5
    1b94:	00000280 	andeq	r0, r0, r0, lsl #5
    1b98:	80520001 	subshi	r0, r2, r1
    1b9c:	88000002 	stmdahi	r0, {r1}
    1ba0:	02000002 	andeq	r0, r0, #2
    1ba4:	889f3000 	ldmhi	pc, {ip, sp}	; <UNPREDICTABLE>
    1ba8:	9b000002 	blls	1bb8 <_start-0x6448>
    1bac:	01000002 	tsteq	r0, r2
    1bb0:	00005200 	andeq	r5, r0, r0, lsl #4
    1bb4:	00000000 	andeq	r0, r0, r0
    1bb8:	02780000 	rsbseq	r0, r8, #0
    1bbc:	028c0000 	addeq	r0, ip, #0
    1bc0:	00020000 	andeq	r0, r2, r0
    1bc4:	028c9f30 	addeq	r9, ip, #48, 30	; 0xc0
    1bc8:	02980000 	addseq	r0, r8, #0
    1bcc:	00050000 	andeq	r0, r5, r0
    1bd0:	24007331 	strcs	r7, [r0], #-817	; 0x331
    1bd4:	0002989f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
    1bd8:	00029b00 	andeq	r9, r2, r0, lsl #22
    1bdc:	51000100 	mrspl	r0, (UNDEF: 16)
    1be0:	0000029b 	muleq	r0, fp, r2
    1be4:	000002a0 	andeq	r0, r0, r0, lsr #5
    1be8:	f3310008 	vhadd.u<illegal width 64>	d0, d1, d8
    1bec:	1a4f5001 	bne	13d5bf8 <__bss_end__+0x13cc098>
    1bf0:	00009f24 	andeq	r9, r0, r4, lsr #30
    1bf4:	00000000 	andeq	r0, r0, r0
    1bf8:	02a00000 	adceq	r0, r0, #0
    1bfc:	02c00000 	sbceq	r0, r0, #0
    1c00:	00010000 	andeq	r0, r1, r0
    1c04:	0002c050 	andeq	ip, r2, r0, asr r0
    1c08:	0002d400 	andeq	sp, r2, r0, lsl #8
    1c0c:	f3000400 	vshl.u8	d0, d0, d0
    1c10:	009f5001 	addseq	r5, pc, r1
    1c14:	00000000 	andeq	r0, r0, r0
    1c18:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    1c1c:	b0000002 	andlt	r0, r0, r2
    1c20:	02000002 	andeq	r0, r0, #2
    1c24:	b09f3000 	addslt	r3, pc, r0
    1c28:	b0000002 	andlt	r0, r0, r2
    1c2c:	01000002 	tsteq	r0, r2
    1c30:	02b05200 	adcseq	r5, r0, #0, 4
    1c34:	02b80000 	adcseq	r0, r8, #0
    1c38:	00020000 	andeq	r0, r2, r0
    1c3c:	02b89f30 	adcseq	r9, r8, #48, 30	; 0xc0
    1c40:	02cb0000 	sbceq	r0, fp, #0
    1c44:	00010000 	andeq	r0, r1, r0
    1c48:	00000052 	andeq	r0, r0, r2, asr r0
    1c4c:	00000000 	andeq	r0, r0, r0
    1c50:	0002a800 	andeq	sl, r2, r0, lsl #16
    1c54:	0002bc00 	andeq	fp, r2, r0, lsl #24
    1c58:	30000200 	andcc	r0, r0, r0, lsl #4
    1c5c:	0002bc9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
    1c60:	0002c800 	andeq	ip, r2, r0, lsl #16
    1c64:	31000500 	tstcc	r0, r0, lsl #10
    1c68:	9f240073 	svcls	0x00240073
    1c6c:	000002c8 	andeq	r0, r0, r8, asr #5
    1c70:	000002cb 	andeq	r0, r0, fp, asr #5
    1c74:	cb510001 	blgt	1441c80 <__bss_end__+0x1438120>
    1c78:	d4000002 	strle	r0, [r0], #-2
    1c7c:	08000002 	stmdaeq	r0, {r1}
    1c80:	01f33100 	mvnseq	r3, r0, lsl #2
    1c84:	241a4f50 	ldrcs	r4, [sl], #-3920	; 0xf50
    1c88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1c8c:	00000000 	andeq	r0, r0, r0
    1c90:	0002d400 	andeq	sp, r2, r0, lsl #8
    1c94:	00036c00 	andeq	r6, r3, r0, lsl #24
    1c98:	50000100 	andpl	r0, r0, r0, lsl #2
    1c9c:	0000036c 	andeq	r0, r0, ip, ror #6
    1ca0:	000003ac 	andeq	r0, r0, ip, lsr #7
    1ca4:	00540001 	subseq	r0, r4, r1
    1ca8:	00000000 	andeq	r0, r0, r0
    1cac:	d4000000 	strle	r0, [r0], #-0
    1cb0:	6f000002 	svcvs	0x00000002
    1cb4:	01000003 	tsteq	r0, r3
    1cb8:	036f5100 	cmneq	pc, #0, 2
    1cbc:	03ac0000 			; <UNDEFINED> instruction: 0x03ac0000
    1cc0:	00040000 	andeq	r0, r4, r0
    1cc4:	9f5101f3 	svcls	0x005101f3
	...
    1cd0:	00000324 	andeq	r0, r0, r4, lsr #6
    1cd4:	00000328 	andeq	r0, r0, r8, lsr #6
    1cd8:	30560001 	subscc	r0, r6, r1
    1cdc:	34000003 	strcc	r0, [r0], #-3
    1ce0:	01000003 	tsteq	r0, r3
    1ce4:	033c5600 	teqeq	ip, #0, 12
    1ce8:	03400000 	movteq	r0, #0
    1cec:	00010000 	andeq	r0, r1, r0
    1cf0:	00034856 	andeq	r4, r3, r6, asr r8
    1cf4:	00034c00 	andeq	r4, r3, r0, lsl #24
    1cf8:	56000100 	strpl	r0, [r0], -r0, lsl #2
    1cfc:	00000354 	andeq	r0, r0, r4, asr r3
    1d00:	00000358 	andeq	r0, r0, r8, asr r3
    1d04:	60560001 	subsvs	r0, r6, r1
    1d08:	64000003 	strvs	r0, [r0], #-3
    1d0c:	01000003 	tsteq	r0, r3
    1d10:	03685600 	cmneq	r8, #0, 12
    1d14:	03ac0000 			; <UNDEFINED> instruction: 0x03ac0000
    1d18:	00010000 	andeq	r0, r1, r0
    1d1c:	00000056 	andeq	r0, r0, r6, asr r0
    1d20:	00000000 	andeq	r0, r0, r0
    1d24:	0002f800 	andeq	pc, r2, r0, lsl #16
    1d28:	00032000 	andeq	r2, r3, r0
    1d2c:	53000100 	movwpl	r0, #256	; 0x100
    1d30:	00000320 	andeq	r0, r0, r0, lsr #6
    1d34:	00000328 	andeq	r0, r0, r8, lsr #6
    1d38:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    1d3c:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1d40:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1d44:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1d48:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1d4c:	25f72008 	ldrbcs	r2, [r7, #8]!
    1d50:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1d54:	03289f25 	teqeq	r8, #37, 30	; 0x94
    1d58:	032c0000 	teqeq	ip, #0
    1d5c:	00010000 	andeq	r0, r1, r0
    1d60:	00032c53 	andeq	r2, r3, r3, asr ip
    1d64:	00033400 	andeq	r3, r3, r0, lsl #8
    1d68:	70001c00 	andvc	r1, r0, r0, lsl #24
    1d6c:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1d70:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1d74:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1d78:	00000000 	andeq	r0, r0, r0
    1d7c:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1d80:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1d84:	349f2533 	ldrcc	r2, [pc], #1331	; 1d8c <_start-0x6274>
    1d88:	38000003 	stmdacc	r0, {r0, r1}
    1d8c:	01000003 	tsteq	r0, r3
    1d90:	03385300 	teqeq	r8, #0, 6
    1d94:	03400000 	movteq	r0, #0
    1d98:	001c0000 	andseq	r0, ip, r0
    1d9c:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    1da0:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    1da4:	cccccd08 	stclgt	13, cr12, [ip], {8}
    1da8:	000000cc 	andeq	r0, r0, ip, asr #1
    1dac:	20081e00 	andcs	r1, r8, r0, lsl #28
    1db0:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1db4:	9f25332c 	svcls	0x0025332c
    1db8:	00000340 	andeq	r0, r0, r0, asr #6
    1dbc:	00000344 	andeq	r0, r0, r4, asr #6
    1dc0:	44530001 	ldrbmi	r0, [r3], #-1
    1dc4:	4c000003 	stcmi	0, cr0, [r0], {3}
    1dc8:	1c000003 	stcne	0, cr0, [r0], {3}
    1dcc:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    1dd0:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    1dd4:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1dd8:	0000cccc 	andeq	ip, r0, ip, asr #25
    1ddc:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1de0:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1de4:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1de8:	00034c9f 	muleq	r3, pc, ip	; <UNPREDICTABLE>
    1dec:	00035000 	andeq	r5, r3, r0
    1df0:	53000100 	movwpl	r0, #256	; 0x100
    1df4:	00000350 	andeq	r0, r0, r0, asr r3
    1df8:	00000358 	andeq	r0, r0, r8, asr r3
    1dfc:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    1e00:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1e04:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1e08:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1e0c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1e10:	25f72008 	ldrbcs	r2, [r7, #8]!
    1e14:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1e18:	03589f25 	cmpeq	r8, #37, 30	; 0x94
    1e1c:	035c0000 	cmpeq	ip, #0
    1e20:	00010000 	andeq	r0, r1, r0
    1e24:	00035c53 	andeq	r5, r3, r3, asr ip
    1e28:	00036400 	andeq	r6, r3, r0, lsl #8
    1e2c:	70001c00 	andvc	r1, r0, r0, lsl #24
    1e30:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1e34:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1e38:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1e3c:	00000000 	andeq	r0, r0, r0
    1e40:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1e44:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1e48:	649f2533 	ldrvs	r2, [pc], #1331	; 1e50 <_start-0x61b0>
    1e4c:	68000003 	stmdavs	r0, {r0, r1}
    1e50:	01000003 	tsteq	r0, r3
    1e54:	03685300 	cmneq	r8, #0, 6
    1e58:	036c0000 	cmneq	ip, #0
    1e5c:	001c0000 	andseq	r0, ip, r0
    1e60:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    1e64:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    1e68:	cccccd08 	stclgt	13, cr12, [ip], {8}
    1e6c:	000000cc 	andeq	r0, r0, ip, asr #1
    1e70:	20081e00 	andcs	r1, r8, r0, lsl #28
    1e74:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1e78:	9f25332c 	svcls	0x0025332c
    1e7c:	0000036c 	andeq	r0, r0, ip, ror #6
    1e80:	00000374 	andeq	r0, r0, r4, ror r3
    1e84:	0074001c 	rsbseq	r0, r4, ip, lsl r0
    1e88:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1e8c:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1e90:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1e94:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1e98:	25f72008 	ldrbcs	r2, [r7, #8]!
    1e9c:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1ea0:	03749f25 	cmneq	r4, #37, 30	; 0x94
    1ea4:	03780000 	cmneq	r8, #0
    1ea8:	00170000 	andseq	r0, r7, r0
    1eac:	2cf70074 	ldclcs	0, cr0, [r7], #464	; 0x1d0
    1eb0:	007325f7 	ldrshteq	r2, [r3], #-87	; 0xffffffa9
    1eb4:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1eb8:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1ebc:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1ec0:	789f2533 	ldmvc	pc, {r0, r1, r4, r5, r8, sl, sp}	; <UNPREDICTABLE>
    1ec4:	ac000003 	stcge	0, cr0, [r0], {3}
    1ec8:	1c000003 	stcne	0, cr0, [r0], {3}
    1ecc:	f7007400 			; <UNDEFINED> instruction: 0xf7007400
    1ed0:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    1ed4:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1ed8:	0000cccc 	andeq	ip, r0, ip, asr #25
    1edc:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1ee0:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1ee4:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1ee8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1eec:	00000000 	andeq	r0, r0, r0
    1ef0:	00037000 	andeq	r7, r3, r0
    1ef4:	00039400 	andeq	r9, r3, r0, lsl #8
    1ef8:	50000100 	andpl	r0, r0, r0, lsl #2
    1efc:	00000394 	muleq	r0, r4, r3
    1f00:	0000039c 	muleq	r0, ip, r3
    1f04:	00750009 	rsbseq	r0, r5, r9
    1f08:	71240073 	teqvc	r4, r3, ror r0
    1f0c:	9c9f2100 	ldflss	f2, [pc], {0}
    1f10:	9f000003 	svcls	0x00000003
    1f14:	01000003 	tsteq	r0, r3
    1f18:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    1f24:	000b0000 	andeq	r0, fp, r0
    1f28:	00010000 	andeq	r0, r1, r0
    1f2c:	00000b50 	andeq	r0, r0, r0, asr fp
    1f30:	00001400 	andeq	r1, r0, r0, lsl #8
    1f34:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	00008010 	andeq	r8, r0, r0, lsl r0
  14:	00000130 	andeq	r0, r0, r0, lsr r1
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	036a0002 	cmneq	sl, #2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	00008140 	andeq	r8, r0, r0, asr #2
  34:	00000600 	andeq	r0, r0, r0, lsl #12
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	15150002 	ldrne	r0, [r5, #-2]
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	00008740 	andeq	r8, r0, r0, asr #14
  54:	00000058 	andeq	r0, r0, r8, asr r0
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	16aa0002 	strtne	r0, [sl], r2
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	00008798 	muleq	r0, r8, r7
  74:	00000034 	andeq	r0, r0, r4, lsr r0
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	179c0002 	ldrne	r0, [ip, r2]
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	000087cc 	andeq	r8, r0, ip, asr #15
  94:	00000020 	andeq	r0, r0, r0, lsr #32
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	185e0002 	ldmdane	lr, {r1}^
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	000087ec 	andeq	r8, r0, ip, ror #15
  b4:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	1eb60002 	cdpne	0, 11, cr0, cr6, cr2, {0}
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	00008cdc 	ldrdeq	r8, [r0], -ip
  d4:	00000020 	andeq	r0, r0, r0, lsr #32
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	1f720002 	svcne	0x00720002
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	00008cfc 	strdeq	r8, [r0], -ip
  f4:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	20750002 	rsbscs	r0, r5, r2
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	00008d24 	andeq	r8, r0, r4, lsr #26
 114:	00000034 	andeq	r0, r0, r4, lsr r0
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	21840002 	orrcs	r0, r4, r2
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	00008d58 	andeq	r8, r0, r8, asr sp
 134:	00000074 	andeq	r0, r0, r4, ror r0
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	23350002 	teqcs	r5, #2
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	00008dcc 	andeq	r8, r0, ip, asr #27
 154:	00000098 	muleq	r0, r8, r0
	...
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	25300002 	ldrcs	r0, [r0, #-2]!
 168:	00040000 	andeq	r0, r4, r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	00008ec8 	andeq	r8, r0, r8, asr #29
 174:	00000154 	andeq	r0, r0, r4, asr r1
	...
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	29330002 	ldmdbcs	r3!, {r1}
 188:	00040000 	andeq	r0, r4, r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	0000901c 	andeq	r9, r0, ip, lsl r0
 194:	000003ac 	andeq	r0, r0, ip, lsr #7
	...
 1a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a4:	2e9f0002 	cdpcs	0, 9, cr0, cr15, cr2, {0}
 1a8:	00040000 	andeq	r0, r4, r0
 1ac:	00000000 	andeq	r0, r0, r0
 1b0:	000093c8 	andeq	r9, r0, r8, asr #7
 1b4:	00000014 	andeq	r0, r0, r4, lsl r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	00000038 	andeq	r0, r0, r8, lsr r0
   4:	00000050 	andeq	r0, r0, r0, asr r0
   8:	00000054 	andeq	r0, r0, r4, asr r0
   c:	000000f4 	strdeq	r0, [r0], -r4
	...
  18:	00008d58 	andeq	r8, r0, r8, asr sp
  1c:	00008dcc 	andeq	r8, r0, ip, asr #27
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000179 	andeq	r0, r0, r9, ror r1
   4:	01400002 	cmpeq	r0, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2f010000 	svccs	0x00010000
  1c:	2f727375 	svccs	0x00727375
  20:	61636f6c 	cmnvs	r3, ip, ror #30
  24:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
  28:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
  2c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
  30:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
  34:	61652d65 	cmnvs	r5, r5, ror #26
  38:	342f6962 	strtcc	r6, [pc], #-2402	; 40 <_start-0x7fc0>
  3c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
  40:	3173632d 	cmncc	r3, sp, lsr #6
  44:	2f653037 	svccs	0x00653037
  48:	2f62696c 	svccs	0x0062696c
  4c:	2f636367 	svccs	0x00636367
  50:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
  54:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
  58:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
  5c:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
  60:	2f332e38 	svccs	0x00332e38
  64:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  68:	00656475 	rsbeq	r6, r5, r5, ror r4
  6c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
  70:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
  74:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
  78:	2f6e756a 	svccs	0x006e756a
  7c:	6b736544 	blvs	1cd9594 <__bss_end__+0x1ccfa34>
  80:	2f706f74 	svccs	0x00706f74
  84:	6f686373 	svcvs	0x00686373
  88:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
  8c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
  90:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
  94:	53432f30 	movtpl	r2, #16176	; 0x3f30
  98:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
  9c:	3173632f 	cmncc	r3, pc, lsr #6
  a0:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
  a4:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
  a8:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
  ac:	00697062 	rsbeq	r7, r9, r2, rrx
  b0:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
  b4:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
  b8:	432f6c61 	teqmi	pc, #24832	; 0x6100
  bc:	616c6c65 	cmnvs	ip, r5, ror #24
  c0:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
  c4:	6f6e2d6d 	svcvs	0x006e2d6d
  c8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
  cc:	2f696261 	svccs	0x00696261
  d0:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
  d4:	73632d33 	cmnvc	r3, #3264	; 0xcc0
  d8:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
  dc:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
  e0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
  e4:	61652d65 	cmnvs	r5, r5, ror #26
  e8:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
  ec:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
  f0:	00006564 	andeq	r6, r0, r4, ror #10
  f4:	65672d32 	strbvs	r2, [r7, #-3378]!	; 0xd32
  f8:	752d7374 	strvc	r7, [sp, #-884]!	; 0x374
  fc:	6c69746e 	cfstrdvs	mvd7, [r9], #-440	; 0xfffffe48
 100:	7365742d 	cmnvc	r5, #754974720	; 0x2d000000
 104:	00632e74 	rsbeq	r2, r3, r4, ror lr
 108:	73000000 	movwvc	r0, #0
 10c:	65646474 	strbvs	r6, [r4, #-1140]!	; 0x474
 110:	00682e66 	rsbeq	r2, r8, r6, ror #28
 114:	73000001 	movwvc	r0, #1
 118:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
 11c:	63672d74 	cmnvs	r7, #116, 26	; 0x1d00
 120:	00682e63 	rsbeq	r2, r8, r3, ror #28
 124:	73000001 	movwvc	r0, #1
 128:	61752d77 	cmnvs	r5, r7, ror sp
 12c:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
 130:	00000000 	andeq	r0, r0, r0
 134:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 138:	00020068 	andeq	r0, r2, r8, rrx
 13c:	72747300 	rsbsvc	r7, r4, #0, 6
 140:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
 144:	00030068 	andeq	r0, r3, r8, rrx
 148:	05000000 	streq	r0, [r0, #-0]
 14c:	00801002 	addeq	r1, r0, r2
 150:	2f671600 	svccs	0x00671600
 154:	3030f431 	eorscc	pc, r0, r1, lsr r4	; <UNPREDICTABLE>
 158:	292f3531 	stmdbcs	pc!, {r0, r4, r5, r8, sl, ip, sp}	; <UNPREDICTABLE>
 15c:	302e7603 	eorcc	r7, lr, r3, lsl #12
 160:	4bd88584 	blmi	ff621778 <__bss_end__+0xff617c18>
 164:	04020084 	streq	r0, [r2], #-132	; 0x84
 168:	06820601 	streq	r0, [r2], r1, lsl #12
 16c:	0200bbbc 	andeq	fp, r0, #188, 22	; 0x2f000
 170:	71030104 	tstvc	r3, r4, lsl #2
 174:	66120366 	ldrvs	r0, [r2], -r6, ror #6
 178:	01001802 	tsteq	r0, r2, lsl #16
 17c:	00034601 	andeq	r4, r3, r1, lsl #12
 180:	b6000200 	strlt	r0, [r0], -r0, lsl #4
 184:	02000001 	andeq	r0, r0, #1
 188:	0d0efb01 	vstreq	d15, [lr, #-4]
 18c:	01010100 	mrseq	r0, (UNDEF: 17)
 190:	00000001 	andeq	r0, r0, r1
 194:	01000001 	tsteq	r0, r1
 198:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 19c:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
 1a0:	432f6c61 	teqmi	pc, #24832	; 0x6100
 1a4:	616c6c65 	cmnvs	ip, r5, ror #24
 1a8:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 1ac:	6f6e2d6d 	svcvs	0x006e2d6d
 1b0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 1b4:	2f696261 	svccs	0x00696261
 1b8:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 1bc:	73632d33 	cmnvc	r3, #3264	; 0xcc0
 1c0:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
 1c4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 1c8:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
 1cc:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 1d0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 1d4:	61652d65 	cmnvs	r5, r5, ror #26
 1d8:	342f6962 	strtcc	r6, [pc], #-2402	; 1e0 <_start-0x7e20>
 1dc:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 1e0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 1e4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
 1e8:	73552f00 	cmpvc	r5, #0, 30
 1ec:	2f737265 	svccs	0x00737265
 1f0:	61697262 	cmnvs	r9, r2, ror #4
 1f4:	6e756a6e 	vsubvs.f32	s13, s10, s29
 1f8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 1fc:	706f746b 	rsbvc	r7, pc, fp, ror #8
 200:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 204:	2f6c6f6f 	svccs	0x006c6f6f
 208:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 20c:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 210:	432f3032 	teqmi	pc, #50	; 0x32
 214:	30343153 	eorscc	r3, r4, r3, asr r1
 218:	73632f45 	cmnvc	r3, #276	; 0x114
 21c:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 220:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 224:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 88 <_start-0x7f78>
 228:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 22c:	3173632f 	cmncc	r3, pc, lsr #6
 230:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 234:	00637273 	rsbeq	r7, r3, r3, ror r2
 238:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 23c:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 240:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 244:	2f6e756a 	svccs	0x006e756a
 248:	6b736544 	blvs	1cd9760 <__bss_end__+0x1ccfc00>
 24c:	2f706f74 	svccs	0x00706f74
 250:	6f686373 	svcvs	0x00686373
 254:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 258:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 25c:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 260:	53432f30 	movtpl	r2, #16176	; 0x3f30
 264:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 268:	3173632f 	cmncc	r3, pc, lsr #6
 26c:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 270:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 274:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 278:	00697062 	rsbeq	r7, r9, r2, rrx
 27c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 280:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 284:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 288:	2f6e756a 	svccs	0x006e756a
 28c:	6b736544 	blvs	1cd97a4 <__bss_end__+0x1ccfc44>
 290:	2f706f74 	svccs	0x00706f74
 294:	6f686373 	svcvs	0x00686373
 298:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 29c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 2a0:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 2a4:	53432f30 	movtpl	r2, #16176	; 0x3f30
 2a8:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 2ac:	3173632f 	cmncc	r3, pc, lsr #6
 2b0:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 2b4:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 2b8:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 2bc:	2f697062 	svccs	0x00697062
 2c0:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 2c4:	77730000 	ldrbvc	r0, [r3, -r0]!
 2c8:	7261752d 	rsbvc	r7, r1, #188743680	; 0xb400000
 2cc:	00632e74 	rsbeq	r2, r3, r4, ror lr
 2d0:	63000000 	movwvs	r0, #0
 2d4:	656c6379 	strbvs	r6, [ip, #-889]!	; 0x379
 2d8:	6974752d 	ldmdbvs	r4!, {r0, r2, r3, r5, r8, sl, ip, sp, lr}^
 2dc:	00682e6c 	rsbeq	r2, r8, ip, ror #28
 2e0:	73000000 	movwvc	r0, #0
 2e4:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
 2e8:	63672d74 	cmnvs	r7, #116, 26	; 0x1d00
 2ec:	00682e63 	rsbeq	r2, r8, r3, ror #28
 2f0:	73000001 	movwvc	r0, #1
 2f4:	61752d77 	cmnvs	r5, r7, ror sp
 2f8:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
 2fc:	00000000 	andeq	r0, r0, r0
 300:	61647473 	smcvs	18243	; 0x4743
 304:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
 308:	00000100 	andeq	r0, r0, r0, lsl #2
 30c:	6f697067 	svcvs	0x00697067
 310:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 314:	70720000 	rsbsvc	r0, r2, r0
 318:	00682e69 	rsbeq	r2, r8, r9, ror #28
 31c:	76000003 	strvc	r0, [r0], -r3
 320:	72702d61 	rsbsvc	r2, r0, #6208	; 0x1840
 324:	6b746e69 	blvs	1d1bcd0 <__bss_end__+0x1d12170>
 328:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
 32c:	623c0000 	eorsvs	r0, ip, #0
 330:	746c6975 	strbtvc	r6, [ip], #-2421	; 0x975
 334:	3e6e692d 	cdpcc	9, 6, cr6, cr14, cr13, {1}
 338:	00000000 	andeq	r0, r0, r0
 33c:	02050000 	andeq	r0, r5, #0
 340:	00008140 	andeq	r8, r0, r0, asr #2
 344:	302f4c1a 	eorcc	r4, pc, sl, lsl ip	; <UNPREDICTABLE>
 348:	35020432 	strcc	r0, [r2, #-1074]	; 0x432
 34c:	04667303 	strbteq	r7, [r6], #-771	; 0x303
 350:	820a0301 	andhi	r0, sl, #67108864	; 0x4000000
 354:	03310204 	teqeq	r1, #4, 4	; 0x40000000
 358:	01046673 	tsteq	r4, r3, ror r6
 35c:	04820c03 	streq	r0, [r2], #3075	; 0xc03
 360:	73032f02 	movwvc	r2, #16130	; 0x3f02
 364:	03010466 	movweq	r0, #5222	; 0x1466
 368:	0204820e 	andeq	r8, r4, #-536870912	; 0xe0000000
 36c:	6673032d 	ldrbtvs	r0, [r3], -sp, lsr #6
 370:	10030104 	andne	r0, r3, r4, lsl #2
 374:	2b020482 	blcs	81584 <__bss_end__+0x77a24>
 378:	04667303 	strbteq	r7, [r6], #-771	; 0x303
 37c:	82120301 	andshi	r0, r2, #67108864	; 0x4000000
 380:	03290204 	teqeq	r9, #4, 4	; 0x40000000
 384:	01046673 	tsteq	r4, r3, ror r6
 388:	04821403 	streq	r1, [r2], #1027	; 0x403
 38c:	2e790302 	cdpcs	3, 7, cr0, cr9, cr2, {0}
 390:	04667303 	strbteq	r7, [r6], #-771	; 0x303
 394:	82160301 	andshi	r0, r6, #67108864	; 0x4000000
 398:	77030204 	strvc	r0, [r3, -r4, lsl #4]
 39c:	6673032e 	ldrbtvs	r0, [r3], -lr, lsr #6
 3a0:	18030104 	stmdane	r3, {r2, r8}
 3a4:	03020482 	movweq	r0, #9346	; 0x2482
 3a8:	73032e75 	movwvc	r2, #15989	; 0x3e75
 3ac:	03010466 	movweq	r0, #5222	; 0x1466
 3b0:	0204821a 	andeq	r8, r4, #-1610612735	; 0xa0000001
 3b4:	032e7303 	teqeq	lr, #201326592	; 0xc000000
 3b8:	01046673 	tsteq	r4, r3, ror r6
 3bc:	03821c03 	orreq	r1, r2, #768	; 0x300
 3c0:	4d4b2e10 	stclmi	14, cr2, [fp, #-64]	; 0xffffffc0
 3c4:	4c2e7003 	stcmi	0, cr7, [lr], #-12
 3c8:	03488384 	movteq	r8, #33668	; 0x8384
 3cc:	314e2e0d 	cmpcc	lr, sp, lsl #28
 3d0:	03020433 	movweq	r0, #9267	; 0x2433
 3d4:	01042e44 	tsteq	r4, r4, asr #28
 3d8:	2f823e03 	svccs	0x00823e03
 3dc:	41030204 	tstmi	r3, r4, lsl #4
 3e0:	03010466 	movweq	r0, #5222	; 0x1466
 3e4:	2f8200c1 	svccs	0x008200c1
 3e8:	be030204 	cdplt	2, 0, cr0, cr3, cr4, {0}
 3ec:	0104827f 	tsteq	r4, pc, ror r2
 3f0:	8200c403 	andhi	ip, r0, #50331648	; 0x3000000
 3f4:	0302042f 	movweq	r0, #9263	; 0x242f
 3f8:	04827fbb 	streq	r7, [r2], #4027	; 0xfbb
 3fc:	00c70301 	sbceq	r0, r7, r1, lsl #6
 400:	02042f82 	andeq	r2, r4, #520	; 0x208
 404:	827fb803 	rsbshi	fp, pc, #196608	; 0x30000
 408:	ca030104 	bgt	c0820 <__bss_end__+0xb6cc0>
 40c:	042f8200 	strteq	r8, [pc], #-512	; 414 <_start-0x7bec>
 410:	7fb50302 	svcvc	0x00b50302
 414:	03010482 	movweq	r0, #5250	; 0x1482
 418:	2f8200cd 	svccs	0x008200cd
 41c:	b2030204 	andlt	r0, r3, #4, 4	; 0x40000000
 420:	0104827f 	tsteq	r4, pc, ror r2
 424:	8200d003 	andhi	sp, r0, #3
 428:	0302042f 	movweq	r0, #9263	; 0x242f
 42c:	04827faf 	streq	r7, [r2], #4015	; 0xfaf
 430:	00d40301 	sbcseq	r0, r4, r1, lsl #6
 434:	824c0382 	subhi	r0, ip, #134217730	; 0x8000002
 438:	4883844c 	stmmi	r3, {r2, r3, r6, sl, pc}
 43c:	4e2e3603 	cfmadda32mi	mvax0, mvax3, mvfx14, mvfx3
 440:	034a5403 	movteq	r5, #41987	; 0xa403
 444:	34324a29 	ldrtcc	r4, [r2], #-2601	; 0xa29
 448:	0402009f 	streq	r0, [r2], #-159	; 0x9f
 44c:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 450:	bb4b4ebb 	bllt	12d3f44 <__bss_end__+0x12ca3e4>
 454:	0402002c 	streq	r0, [r2], #-44	; 0x2c
 458:	062e0601 	strteq	r0, [lr], -r1, lsl #12
 45c:	84a44c6d 	strthi	r4, [r4], #3181	; 0xc6d
 460:	01040200 	mrseq	r0, R12_usr
 464:	bb064a06 	bllt	192c84 <__bss_end__+0x189124>
 468:	0402004d 	streq	r0, [r2], #-77	; 0x4d
 46c:	02004b02 	andeq	r4, r0, #2048	; 0x800
 470:	00810204 	addeq	r0, r1, r4, lsl #4
 474:	06010402 	streq	r0, [r1], -r2, lsl #8
 478:	4c4d062e 	mcrrmi	6, 2, r0, sp, cr14
 47c:	4b4bbca5 	blmi	12ef718 <__bss_end__+0x12e5bb8>
 480:	02002f4f 	andeq	r2, r0, #316	; 0x13c
 484:	82060104 	andhi	r0, r6, #4, 2
 488:	04020082 	streq	r0, [r2], #-130	; 0x82
 48c:	02009e04 	andeq	r9, r0, #4, 28	; 0x40
 490:	064a0104 	strbeq	r0, [sl], -r4, lsl #2
 494:	2fbd88bd 	svccs	0x00bd88bd
 498:	24084b4b 	strcs	r4, [r8], #-2891	; 0xb4b
 49c:	04020067 	streq	r0, [r2], #-103	; 0x67
 4a0:	02002f02 	andeq	r2, r0, #2, 30
 4a4:	00490204 	subeq	r0, r9, r4, lsl #4
 4a8:	06010402 	streq	r0, [r1], -r2, lsl #8
 4ac:	3468062e 	strbtcc	r0, [r8], #-1582	; 0x62e
 4b0:	00a04b86 	adceq	r4, r0, r6, lsl #23
 4b4:	06010402 	streq	r0, [r1], -r2, lsl #8
 4b8:	68bb0666 	ldmvs	fp!, {r1, r2, r5, r6, r9, sl}
 4bc:	674b2208 	strbvs	r2, [fp, -r8, lsl #4]
 4c0:	0a02bc4b 	beq	af5f4 <__bss_end__+0xa5a94>
 4c4:	02010100 	andeq	r0, r1, #0, 2
 4c8:	02000001 	andeq	r0, r0, #1
 4cc:	0000eb00 	andeq	lr, r0, r0, lsl #22
 4d0:	fb010200 	blx	40cda <__bss_end__+0x3717a>
 4d4:	01000d0e 	tsteq	r0, lr, lsl #26
 4d8:	00010101 	andeq	r0, r1, r1, lsl #2
 4dc:	00010000 	andeq	r0, r1, r0
 4e0:	696c0100 	stmdbvs	ip!, {r8}^
 4e4:	2f006362 	svccs	0x00006362
 4e8:	2f727375 	svccs	0x00727375
 4ec:	61636f6c 	cmnvs	r3, ip, ror #30
 4f0:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
 4f4:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
 4f8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 4fc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 500:	61652d65 	cmnvs	r5, r5, ror #26
 504:	342f6962 	strtcc	r6, [pc], #-2402	; 50c <_start-0x7af4>
 508:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 50c:	3173632d 	cmncc	r3, sp, lsr #6
 510:	2f653037 	svccs	0x00653037
 514:	2f62696c 	svccs	0x0062696c
 518:	2f636367 	svccs	0x00636367
 51c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 520:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 524:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 528:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 52c:	2f332e38 	svccs	0x00332e38
 530:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 534:	00656475 	rsbeq	r6, r5, r5, ror r4
 538:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 53c:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 540:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 544:	2f6e756a 	svccs	0x006e756a
 548:	6b736544 	blvs	1cd9a60 <__bss_end__+0x1ccff00>
 54c:	2f706f74 	svccs	0x00706f74
 550:	6f686373 	svcvs	0x00686373
 554:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 558:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 55c:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 560:	53432f30 	movtpl	r2, #16176	; 0x3f30
 564:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 568:	3173632f 	cmncc	r3, pc, lsr #6
 56c:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 570:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 574:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 578:	00697062 	rsbeq	r7, r9, r2, rrx
 57c:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
 580:	2e6b746e 	cdpcs	4, 6, cr7, cr11, cr14, {3}
 584:	00010063 	andeq	r0, r1, r3, rrx
 588:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
 58c:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
 590:	00020068 	andeq	r0, r2, r8, rrx
 594:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xc00
 598:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
 59c:	003e6e69 	eorseq	r6, lr, r9, ror #28
 5a0:	72000000 	andvc	r0, r0, #0
 5a4:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 5a8:	00000300 	andeq	r0, r0, r0, lsl #6
 5ac:	702d6176 	eorvc	r6, sp, r6, ror r1
 5b0:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 5b4:	00682e6b 	rsbeq	r2, r8, fp, ror #28
 5b8:	00000001 	andeq	r0, r0, r1
 5bc:	40020500 	andmi	r0, r2, r0, lsl #10
 5c0:	17000087 	strne	r0, [r0, -r7, lsl #1]
 5c4:	89bf4b6b 	ldmibhi	pc!, {r0, r1, r3, r5, r6, r8, r9, fp, lr}	; <UNPREDICTABLE>
 5c8:	01000e02 	tsteq	r0, r2, lsl #28
 5cc:	00009601 	andeq	r9, r0, r1, lsl #12
 5d0:	6f000200 	svcvs	0x00000200
 5d4:	02000000 	andeq	r0, r0, #0
 5d8:	0d0efb01 	vstreq	d15, [lr, #-4]
 5dc:	01010100 	mrseq	r0, (UNDEF: 17)
 5e0:	00000001 	andeq	r0, r0, r1
 5e4:	01000001 	tsteq	r0, r1
 5e8:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 5ec:	73552f00 	cmpvc	r5, #0, 30
 5f0:	2f737265 	svccs	0x00737265
 5f4:	61697262 	cmnvs	r9, r2, ror #4
 5f8:	6e756a6e 	vsubvs.f32	s13, s10, s29
 5fc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 600:	706f746b 	rsbvc	r7, pc, fp, ror #8
 604:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 608:	2f6c6f6f 	svccs	0x006c6f6f
 60c:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 610:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 614:	432f3032 	teqmi	pc, #50	; 0x32
 618:	30343153 	eorscc	r3, r4, r3, asr r1
 61c:	73632f45 	cmnvc	r3, #276	; 0x114
 620:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 624:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 628:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 48c <_start-0x7b74>
 62c:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 630:	75700000 	ldrbvc	r0, [r0, #-0]!
 634:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
 638:	00000100 	andeq	r0, r0, r0, lsl #2
 63c:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 640:	00020068 	andeq	r0, r2, r8, rrx
 644:	05000000 	streq	r0, [r0, #-0]
 648:	00879802 	addeq	r9, r7, r2, lsl #16
 64c:	2d4c1500 	cfstr64cs	mvdx1, [ip, #-0]
 650:	02040200 	andeq	r0, r4, #0, 4
 654:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 658:	02004902 	andeq	r4, r0, #32768	; 0x8000
 65c:	2e060104 	adfcss	f0, f6, f4
 660:	06026b06 	streq	r6, [r2], -r6, lsl #22
 664:	f1010100 	setend	le
 668:	02000000 	andeq	r0, r0, #0
 66c:	0000d000 	andeq	sp, r0, r0
 670:	fb010200 	blx	40e7a <__bss_end__+0x3731a>
 674:	01000d0e 	tsteq	r0, lr, lsl #26
 678:	00010101 	andeq	r0, r1, r1, lsl #2
 67c:	00010000 	andeq	r0, r1, r0
 680:	696c0100 	stmdbvs	ip!, {r8}^
 684:	2f006362 	svccs	0x00006362
 688:	2f727375 	svccs	0x00727375
 68c:	61636f6c 	cmnvs	r3, ip, ror #30
 690:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
 694:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
 698:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 69c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 6a0:	61652d65 	cmnvs	r5, r5, ror #26
 6a4:	342f6962 	strtcc	r6, [pc], #-2402	; 6ac <_start-0x7954>
 6a8:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 6ac:	3173632d 	cmncc	r3, sp, lsr #6
 6b0:	2f653037 	svccs	0x00653037
 6b4:	2f62696c 	svccs	0x0062696c
 6b8:	2f636367 	svccs	0x00636367
 6bc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 6c0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 6c4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 6c8:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 6cc:	2f332e38 	svccs	0x00332e38
 6d0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 6d4:	00656475 	rsbeq	r6, r5, r5, ror r4
 6d8:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 6dc:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
 6e0:	432f6c61 	teqmi	pc, #24832	; 0x6100
 6e4:	616c6c65 	cmnvs	ip, r5, ror #24
 6e8:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 6ec:	6f6e2d6d 	svcvs	0x006e2d6d
 6f0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 6f4:	2f696261 	svccs	0x00696261
 6f8:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 6fc:	73632d33 	cmnvc	r3, #3264	; 0xcc0
 700:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
 704:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 708:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 70c:	61652d65 	cmnvs	r5, r5, ror #26
 710:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
 714:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
 718:	00006564 	andeq	r6, r0, r4, ror #10
 71c:	6c727473 	cfldrdvs	mvd7, [r2], #-460	; 0xfffffe34
 720:	632e6e65 	teqvs	lr, #1616	; 0x650
 724:	00000100 	andeq	r0, r0, r0, lsl #2
 728:	64647473 	strbtvs	r7, [r4], #-1139	; 0x473
 72c:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
 730:	00000200 	andeq	r0, r0, r0, lsl #4
 734:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 738:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 73c:	00000300 	andeq	r0, r0, r0, lsl #6
 740:	02050000 	andeq	r0, r5, #0
 744:	000087cc 	andeq	r8, r0, ip, asr #15
 748:	02001414 	andeq	r1, r0, #20, 8	; 0x14000000
 74c:	4a060204 	bmi	180f64 <__bss_end__+0x177404>
 750:	01040200 	mrseq	r0, R12_usr
 754:	0269062e 	rsbeq	r0, r9, #48234496	; 0x2e00000
 758:	01010004 	tsteq	r1, r4
 75c:	000001dc 	ldrdeq	r0, [r0], -ip
 760:	00df0002 	sbcseq	r0, pc, r2
 764:	01020000 	mrseq	r0, (UNDEF: 2)
 768:	000d0efb 	strdeq	r0, [sp], -fp
 76c:	01010101 	tsteq	r1, r1, lsl #2
 770:	01000000 	mrseq	r0, (UNDEF: 0)
 774:	6c010000 	stcvs	0, cr0, [r1], {-0}
 778:	00636269 	rsbeq	r6, r3, r9, ror #4
 77c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 780:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
 784:	432f6c61 	teqmi	pc, #24832	; 0x6100
 788:	616c6c65 	cmnvs	ip, r5, ror #24
 78c:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 790:	6f6e2d6d 	svcvs	0x006e2d6d
 794:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
 798:	2f696261 	svccs	0x00696261
 79c:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
 7a0:	73632d33 	cmnvc	r3, #3264	; 0xcc0
 7a4:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
 7a8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 7ac:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
 7b0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 7b4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 7b8:	61652d65 	cmnvs	r5, r5, ror #26
 7bc:	342f6962 	strtcc	r6, [pc], #-2402	; 7c4 <_start-0x783c>
 7c0:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 7c4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 7c8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
 7cc:	73552f00 	cmpvc	r5, #0, 30
 7d0:	2f737265 	svccs	0x00737265
 7d4:	61697262 	cmnvs	r9, r2, ror #4
 7d8:	6e756a6e 	vsubvs.f32	s13, s10, s29
 7dc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 7e0:	706f746b 	rsbvc	r7, pc, fp, ror #8
 7e4:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 7e8:	2f6c6f6f 	svccs	0x006c6f6f
 7ec:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 7f0:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 7f4:	432f3032 	teqmi	pc, #50	; 0x32
 7f8:	30343153 	eorscc	r3, r4, r3, asr r1
 7fc:	73632f45 	cmnvc	r3, #276	; 0x114
 800:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 804:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 808:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 66c <_start-0x7994>
 80c:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 810:	61760000 	cmnvs	r6, r0
 814:	6972702d 	ldmdbvs	r2!, {r0, r2, r3, r5, ip, sp, lr}^
 818:	2e6b746e 	cdpcs	4, 6, cr7, cr11, cr14, {3}
 81c:	00010063 	andeq	r0, r1, r3, rrx
 820:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
 824:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
 828:	00020068 	andeq	r0, r2, r8, rrx
 82c:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 830:	0300682e 	movweq	r6, #2094	; 0x82e
 834:	623c0000 	eorsvs	r0, ip, #0
 838:	746c6975 	strbtvc	r6, [ip], #-2421	; 0x975
 83c:	3e6e692d 	cdpcc	9, 6, cr6, cr14, cr13, {1}
 840:	00000000 	andeq	r0, r0, r0
 844:	02050000 	andeq	r0, r5, #0
 848:	000087ec 	andeq	r8, r0, ip, ror #15
 84c:	01012603 	tsteq	r1, r3, lsl #12
 850:	2d3113a5 	ldccs	3, cr1, [r1, #-660]!	; 0xfffffd6c
 854:	02040200 	andeq	r0, r4, #0, 4
 858:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 85c:	02002d02 	andeq	r2, r0, #2, 26	; 0x80
 860:	002f0204 	eoreq	r0, pc, r4, lsl #4
 864:	2d010402 	cfstrscs	mvf0, [r1, #-8]
 868:	14304c4c 	ldrtne	r4, [r0], #-3148	; 0xc4c
 86c:	004f2f4b 	subeq	r2, pc, fp, asr #30
 870:	67020402 	strvs	r0, [r2, -r2, lsl #8]
 874:	01040200 	mrseq	r0, R12_usr
 878:	304d4c65 	subcc	r4, sp, r5, ror #24
 87c:	30312fa0 	eorscc	r2, r1, r0, lsr #31
 880:	84162602 	ldrhi	r2, [r6], #-1538	; 0x602
 884:	02002c2d 	andeq	r2, r0, #11520	; 0x2d00
 888:	00300104 	eorseq	r0, r0, r4, lsl #2
 88c:	33010402 	movwcc	r0, #5122	; 0x1402
 890:	02006606 	andeq	r6, r0, #6291456	; 0x600000
 894:	002e0104 	eoreq	r0, lr, r4, lsl #2
 898:	06010402 	streq	r0, [r1], -r2, lsl #8
 89c:	2f672108 	svccs	0x00672108
 8a0:	03827303 	orreq	r7, r2, #201326592	; 0xc000000
 8a4:	02002e13 	andeq	r2, r0, #304	; 0x130
 8a8:	2e060104 	adfcss	f0, f6, f4
 8ac:	01040200 	mrseq	r0, R12_usr
 8b0:	4b6a9f06 	blmi	1aa84d0 <__bss_end__+0x1a9e970>
 8b4:	032e6703 	teqeq	lr, #786432	; 0xc0000
 8b8:	02002e21 	andeq	r2, r0, #528	; 0x210
 8bc:	2e060104 	adfcss	f0, f6, f4
 8c0:	01040200 	mrseq	r0, R12_usr
 8c4:	02009f06 	andeq	r9, r0, #6, 30
 8c8:	bd6a0104 	stflte	f0, [sl, #-16]!
 8cc:	7fa603f3 	svcvc	0x00a603f3
 8d0:	002f2008 	eoreq	r2, pc, r8
 8d4:	06010402 	streq	r0, [r1], -r2, lsl #8
 8d8:	4bbb064a 	blmi	feec2208 <__bss_end__+0xfeeb86a8>
 8dc:	00da032f 	sbcseq	r0, sl, pc, lsr #6
 8e0:	484c83f2 	stmdami	ip, {r1, r4, r5, r6, r7, r8, r9, pc}^
 8e4:	842f2f31 	strthi	r2, [pc], #-3889	; 8ec <_start-0x7714>
 8e8:	4d2d2f4b 	stcmi	15, cr2, [sp, #-300]!	; 0xfffffed4
 8ec:	832f3031 	teqhi	pc, #49	; 0x31
 8f0:	01040200 	mrseq	r0, R12_usr
 8f4:	0200be2c 	andeq	fp, r0, #44, 28	; 0x2c0
 8f8:	4a060104 	bmi	180d10 <__bss_end__+0x1771b0>
 8fc:	3602bc06 	strcc	fp, [r2], -r6, lsl #24
 900:	ba0e0316 	blt	381560 <__bss_end__+0x377a00>
 904:	08302108 	ldmdaeq	r0!, {r3, r8, sp}
 908:	21083121 	tstcs	r8, r1, lsr #2
 90c:	30210830 	eorcc	r0, r1, r0, lsr r8
 910:	2108304b 	tstcs	r8, fp, asr #32
 914:	2f31d930 	svccs	0x0031d930
 918:	01040200 	mrseq	r0, R12_usr
 91c:	04020065 	streq	r0, [r2], #-101	; 0x65
 920:	004a0602 	subeq	r0, sl, r2, lsl #12
 924:	06010402 	streq	r0, [r1], -r2, lsl #8
 928:	00664203 	rsbeq	r4, r6, r3, lsl #4
 92c:	06020402 	streq	r0, [r2], -r2, lsl #8
 930:	c2030666 	andgt	r0, r3, #106954752	; 0x6600000
 934:	02684a00 	rsbeq	r4, r8, #0, 20
 938:	01010010 	tsteq	r1, r0, lsl r0
 93c:	00000043 	andeq	r0, r0, r3, asr #32
 940:	00290002 	eoreq	r0, r9, r2
 944:	01020000 	mrseq	r0, (UNDEF: 2)
 948:	000d0efb 	strdeq	r0, [sp], -fp
 94c:	01010101 	tsteq	r1, r1, lsl #2
 950:	01000000 	mrseq	r0, (UNDEF: 0)
 954:	63010000 	movwvs	r0, #4096	; 0x1000
 958:	30343173 	eorscc	r3, r4, r3, ror r1
 95c:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 960:	63000063 	movwvs	r0, #99	; 0x63
 964:	65686361 	strbvs	r6, [r8, #-865]!	; 0x361
 968:	0100632e 	tsteq	r0, lr, lsr #6
 96c:	00000000 	andeq	r0, r0, r0
 970:	8cdc0205 	lfmhi	f0, 2, [ip], {5}
 974:	14140000 	ldrne	r0, [r4], #-0
 978:	144e2f30 	strbne	r2, [lr], #-3888	; 0xf30
 97c:	04022f31 	streq	r2, [r2], #-3889	; 0xf31
 980:	93010100 	movwls	r0, #4352	; 0x1100
 984:	02000000 	andeq	r0, r0, #0
 988:	00007d00 	andeq	r7, r0, r0, lsl #26
 98c:	fb010200 	blx	41196 <__bss_end__+0x37636>
 990:	01000d0e 	tsteq	r0, lr, lsl #26
 994:	00010101 	andeq	r0, r1, r1, lsl #2
 998:	00010000 	andeq	r0, r1, r0
 99c:	73630100 	cmnvc	r3, #0, 2
 9a0:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 9a4:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 9a8:	73552f00 	cmpvc	r5, #0, 30
 9ac:	2f737265 	svccs	0x00737265
 9b0:	61697262 	cmnvs	r9, r2, ror #4
 9b4:	6e756a6e 	vsubvs.f32	s13, s10, s29
 9b8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 9bc:	706f746b 	rsbvc	r7, pc, fp, ror #8
 9c0:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 9c4:	2f6c6f6f 	svccs	0x006c6f6f
 9c8:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 9cc:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 9d0:	432f3032 	teqmi	pc, #50	; 0x32
 9d4:	30343153 	eorscc	r3, r4, r3, asr r1
 9d8:	73632f45 	cmnvc	r3, #276	; 0x114
 9dc:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 9e0:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 9e4:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 848 <_start-0x77b8>
 9e8:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 9ec:	6c630000 	stclvs	0, cr0, [r3], #-0
 9f0:	2d6e6165 	stfcse	f6, [lr, #-404]!	; 0xfffffe6c
 9f4:	6f626572 	svcvs	0x00626572
 9f8:	632e746f 	teqvs	lr, #1862270976	; 0x6f000000
 9fc:	00000100 	andeq	r0, r0, r0, lsl #2
 a00:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 a04:	00020068 	andeq	r0, r2, r8, rrx
 a08:	05000000 	streq	r0, [r0, #-0]
 a0c:	008cfc02 	addeq	pc, ip, r2, lsl #24
 a10:	832f1500 	teqhi	pc, #0, 10
 a14:	0006024b 	andeq	r0, r6, fp, asr #4
 a18:	00960101 	addseq	r0, r6, r1, lsl #2
 a1c:	00020000 	andeq	r0, r2, r0
 a20:	00000077 	andeq	r0, r0, r7, ror r0
 a24:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 a28:	0101000d 	tsteq	r1, sp
 a2c:	00000101 	andeq	r0, r0, r1, lsl #2
 a30:	00000100 	andeq	r0, r0, r0, lsl #2
 a34:	31736301 	cmncc	r3, r1, lsl #6
 a38:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 a3c:	00637273 	rsbeq	r7, r3, r3, ror r2
 a40:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 a44:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 a48:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 a4c:	2f6e756a 	svccs	0x006e756a
 a50:	6b736544 	blvs	1cd9f68 <__bss_end__+0x1cd0408>
 a54:	2f706f74 	svccs	0x00706f74
 a58:	6f686373 	svcvs	0x00686373
 a5c:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 a60:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 a64:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 a68:	53432f30 	movtpl	r2, #16176	; 0x3f30
 a6c:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 a70:	3173632f 	cmncc	r3, pc, lsr #6
 a74:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 a78:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 a7c:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 a80:	00697062 	rsbeq	r7, r9, r2, rrx
 a84:	74736300 	ldrbtvc	r6, [r3], #-768	; 0x300
 a88:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
 a8c:	00010063 	andeq	r0, r1, r3, rrx
 a90:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 a94:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 a98:	00000000 	andeq	r0, r0, r0
 a9c:	8d240205 	sfmhi	f0, 4, [r4, #-20]!	; 0xffffffec
 aa0:	32140000 	andscc	r0, r4, #0
 aa4:	2f2d2f31 	svccs	0x002d2f31
 aa8:	01040200 	mrseq	r0, R12_usr
 aac:	022f4d49 	eoreq	r4, pc, #4672	; 0x1240
 ab0:	01010006 	tsteq	r1, r6
 ab4:	00000099 	muleq	r0, r9, r0
 ab8:	00770002 	rsbseq	r0, r7, r2
 abc:	01020000 	mrseq	r0, (UNDEF: 2)
 ac0:	000d0efb 	strdeq	r0, [sp], -fp
 ac4:	01010101 	tsteq	r1, r1, lsl #2
 ac8:	01000000 	mrseq	r0, (UNDEF: 0)
 acc:	63010000 	movwvs	r0, #4096	; 0x1000
 ad0:	30343173 	eorscc	r3, r4, r3, ror r1
 ad4:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 ad8:	552f0063 	strpl	r0, [pc, #-99]!	; a7d <_start-0x7583>
 adc:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 ae0:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 ae4:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 ae8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 aec:	6f746b73 	svcvs	0x00746b73
 af0:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 af4:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 95c <_start-0x76a4>
 af8:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 afc:	31726574 	cmncc	r2, r4, ror r5
 b00:	2f303239 	svccs	0x00303239
 b04:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 b08:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 b0c:	30343173 	eorscc	r3, r4, r3, ror r1
 b10:	30322d65 	eorscc	r2, r2, r5, ror #26
 b14:	2f6e6977 	svccs	0x006e6977
 b18:	7062696c 	rsbvc	r6, r2, ip, ror #18
 b1c:	72000069 	andvc	r0, r0, #105	; 0x69
 b20:	6f6f6265 	svcvs	0x006f6265
 b24:	00632e74 	rsbeq	r2, r3, r4, ror lr
 b28:	72000001 	andvc	r0, r0, #1
 b2c:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 b30:	00000200 	andeq	r0, r0, r0, lsl #4
 b34:	02050000 	andeq	r0, r5, #0
 b38:	00008d58 	andeq	r8, r0, r8, asr sp
 b3c:	14010d03 	strne	r0, [r1], #-3331	; 0xd03
 b40:	15852f31 	strne	r2, [r5, #3889]	; 0xf31
 b44:	2f4d4b2f 	svccs	0x004d4b2f
 b48:	67523567 	ldrbvs	r3, [r2, -r7, ror #10]
 b4c:	01001002 	tsteq	r0, r2
 b50:	0000a501 	andeq	sl, r0, r1, lsl #10
 b54:	76000200 	strvc	r0, [r0], -r0, lsl #4
 b58:	02000000 	andeq	r0, r0, #0
 b5c:	0d0efb01 	vstreq	d15, [lr, #-4]
 b60:	01010100 	mrseq	r0, (UNDEF: 17)
 b64:	00000001 	andeq	r0, r0, r1
 b68:	01000001 	tsteq	r0, r1
 b6c:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 b70:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
 b74:	2f006372 	svccs	0x00006372
 b78:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 b7c:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 b80:	6a6e6169 	bvs	1b9912c <__bss_end__+0x1b8f5cc>
 b84:	442f6e75 	strtmi	r6, [pc], #-3701	; b8c <_start-0x7474>
 b88:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 b8c:	732f706f 	teqvc	pc, #111	; 0x6f
 b90:	6f6f6863 	svcvs	0x006f6863
 b94:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 b98:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 b9c:	30323931 	eorscc	r3, r2, r1, lsr r9
 ba0:	3153432f 	cmpcc	r3, pc, lsr #6
 ba4:	2f453034 	svccs	0x00453034
 ba8:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 bac:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 bb0:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 bb4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 bb8:	00006970 	andeq	r6, r0, r0, ror r9
 bbc:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 bc0:	00632e72 	rsbeq	r2, r3, r2, ror lr
 bc4:	72000001 	andvc	r0, r0, #1
 bc8:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 bcc:	00000200 	andeq	r0, r0, r0, lsl #4
 bd0:	02050000 	andeq	r0, r5, #0
 bd4:	00008dcc 	andeq	r8, r0, ip, asr #27
 bd8:	2d2f1316 	stccs	3, cr1, [pc, #-88]!	; b88 <_start-0x7478>
 bdc:	01040200 	mrseq	r0, R12_usr
 be0:	68062e06 	stmdavs	r6, {r1, r2, r9, sl, fp, sp}
 be4:	4d4b2f31 	stclmi	15, cr2, [fp, #-196]	; 0xffffff3c
 be8:	304b2f2f 	subcc	r2, fp, pc, lsr #30
 bec:	2f4c4b4c 	svccs	0x004c4b4c
 bf0:	842f2f6a 	strthi	r2, [pc], #-3946	; bf8 <_start-0x7408>
 bf4:	0008022f 	andeq	r0, r8, pc, lsr #4
 bf8:	00770101 	rsbseq	r0, r7, r1, lsl #2
 bfc:	00020000 	andeq	r0, r2, r0
 c00:	0000003b 	andeq	r0, r0, fp, lsr r0
 c04:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 c08:	0101000d 	tsteq	r1, sp
 c0c:	00000101 	andeq	r0, r0, r1, lsl #2
 c10:	00000100 	andeq	r0, r0, r0, lsl #2
 c14:	31736301 	cmncc	r3, r1, lsl #6
 c18:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 c1c:	00637273 	rsbeq	r7, r3, r3, ror r2
 c20:	72617500 	rsbvc	r7, r1, #0, 10
 c24:	00632e74 	rsbeq	r2, r3, r4, ror lr
 c28:	67000000 	strvs	r0, [r0, -r0]
 c2c:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
 c30:	00010068 	andeq	r0, r1, r8, rrx
 c34:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 c38:	0000682e 	andeq	r6, r0, lr, lsr #16
 c3c:	00000000 	andeq	r0, r0, r0
 c40:	8ec80205 	cdphi	2, 12, cr0, cr8, cr5, {0}
 c44:	d6030000 	strle	r0, [r3], -r0
 c48:	672f0100 	strvs	r0, [pc, -r0, lsl #2]!
 c4c:	30665e03 	rsbcc	r5, r6, r3, lsl #28
 c50:	306d6733 	rsbcc	r6, sp, r3, lsr r7
 c54:	676730d8 			; <UNDEFINED> instruction: 0x676730d8
 c58:	68676767 	stmdavs	r7!, {r0, r1, r2, r5, r6, r8, r9, sl, sp, lr}^
 c5c:	30820a03 	addcc	r0, r2, r3, lsl #20
 c60:	2f696767 	svccs	0x00696767
 c64:	674c6a67 	strbvs	r6, [ip, -r7, ror #20]
 c68:	302f2fc1 	eorcc	r2, pc, r1, asr #31
 c6c:	3049682f 	subcc	r6, r9, pc, lsr #16
 c70:	01000202 	tsteq	r0, r2, lsl #4
 c74:	0000a501 	andeq	sl, r0, r1, lsl #10
 c78:	32000200 	andcc	r0, r0, #0, 4
 c7c:	02000000 	andeq	r0, r0, #0
 c80:	0d0efb01 	vstreq	d15, [lr, #-4]
 c84:	01010100 	mrseq	r0, (UNDEF: 17)
 c88:	00000001 	andeq	r0, r0, r1
 c8c:	01000001 	tsteq	r0, r1
 c90:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 c94:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
 c98:	00006372 	andeq	r6, r0, r2, ror r3
 c9c:	6f697067 	svcvs	0x00697067
 ca0:	0000632e 	andeq	r6, r0, lr, lsr #6
 ca4:	70670000 	rsbvc	r0, r7, r0
 ca8:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
 cac:	00000100 	andeq	r0, r0, r0, lsl #2
 cb0:	02050000 	andeq	r0, r5, #0
 cb4:	0000901c 	andeq	r9, r0, ip, lsl r0
 cb8:	4e013e03 	cdpmi	14, 0, cr3, cr1, cr3, {0}
 cbc:	21086950 	tstcs	r8, r0, asr r9
 cc0:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
 cc4:	4b326767 	blmi	c9aa68 <__bss_end__+0xc90f08>
 cc8:	31dc2208 	bicscc	r2, ip, r8, lsl #4
 ccc:	504e1351 	subpl	r1, lr, r1, asr r3
 cd0:	5031be30 	eorspl	fp, r1, r0, lsr lr
 cd4:	304f4d13 	subcc	r4, pc, r3, lsl sp	; <UNPREDICTABLE>
 cd8:	69504cc0 	ldmdbvs	r0, {r6, r7, sl, fp, lr}^
 cdc:	67672108 	strbvs	r2, [r7, -r8, lsl #2]!
 ce0:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
 ce4:	21084b32 	tstcs	r8, r2, lsr fp
 ce8:	2f504ca4 	svccs	0x00504ca4
 cec:	75036984 	strvc	r6, [r3, #-2436]	; 0x984
 cf0:	2e0c0382 	cdpcs	3, 0, cr0, cr12, cr2, {4}
 cf4:	034e304d 	movteq	r3, #57421	; 0xe04d
 cf8:	514a7f98 			; <UNDEFINED> instruction: 0x514a7f98
 cfc:	30504e13 	subscc	r4, r0, r3, lsl lr
 d00:	4d1350a5 	ldcmi	0, cr5, [r3, #-660]	; 0xfffffd6c
 d04:	c203304f 	andgt	r3, r3, #79	; 0x4f
 d08:	6b6aba00 	blvs	1aaf510 <__bss_end__+0x1aa59b0>
 d0c:	67210869 	strvs	r0, [r1, -r9, ror #16]!
 d10:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
 d14:	084b3267 	stmdaeq	fp, {r0, r1, r2, r5, r6, r9, ip, sp}^
 d18:	000c0222 	andeq	r0, ip, r2, lsr #4
 d1c:	00860101 	addeq	r0, r6, r1, lsl #2
 d20:	00020000 	andeq	r0, r2, r0
 d24:	00000072 	andeq	r0, r0, r2, ror r0
 d28:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 d2c:	0101000d 	tsteq	r1, sp
 d30:	00000101 	andeq	r0, r0, r1, lsl #2
 d34:	00000100 	andeq	r0, r0, r0, lsl #2
 d38:	62696c01 	rsbvs	r6, r9, #256	; 0x100
 d3c:	552f0063 	strpl	r0, [pc, #-99]!	; ce1 <_start-0x731f>
 d40:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 d44:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 d48:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 d4c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 d50:	6f746b73 	svcvs	0x00746b73
 d54:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 d58:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; bc0 <_start-0x7440>
 d5c:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 d60:	31726574 	cmncc	r2, r4, ror r5
 d64:	2f303239 	svccs	0x00303239
 d68:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 d6c:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 d70:	30343173 	eorscc	r3, r4, r3, ror r1
 d74:	30322d65 	eorscc	r2, r2, r5, ror #26
 d78:	2f6e6977 	svccs	0x006e6977
 d7c:	7062696c 	rsbvc	r6, r2, ip, ror #18
 d80:	70000069 	andvc	r0, r0, r9, rrx
 d84:	68637475 	stmdavs	r3!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
 d88:	632e7261 	teqvs	lr, #268435462	; 0x10000006
 d8c:	00000100 	andeq	r0, r0, r0, lsl #2
 d90:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 d94:	00020068 	andeq	r0, r2, r8, rrx
 d98:	05000000 	streq	r0, [r0, #-0]
 d9c:	0093c802 	addseq	ip, r3, r2, lsl #16
 da0:	024a1400 	subeq	r1, sl, #0, 8
 da4:	01010006 	tsteq	r1, r6

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6c637963 	stclvs	9, cr7, [r3], #-396	; 0xfffffe74
   4:	65705f65 	ldrbvs	r5, [r0, #-3941]!	; 0xf65
   8:	69625f72 	stmdbvs	r2!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   c:	69730074 	ldmdbvs	r3!, {r2, r4, r5, r6}^
  10:	745f657a 	ldrbvc	r6, [pc], #-1402	; 18 <_start-0x7fe8>
  14:	5f777300 	svcpl	0x00777300
  18:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
  1c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
  20:	65685f74 	strbvs	r5, [r8, #-3956]!	; 0xf74
  24:	7265706c 	rsbvc	r7, r5, #108	; 0x6c
  28:	554e4700 	strbpl	r4, [lr, #-1792]	; 0x700
  2c:	34204320 	strtcc	r4, [r0], #-800	; 0x320
  30:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
  34:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
  38:	613d7570 	teqvs	sp, r0, ror r5
  3c:	31316d72 	teqcc	r1, r2, ror sp
  40:	7a6a3637 	bvc	1a8d924 <__bss_end__+0x1a83dc4>
  44:	20732d66 	rsbscs	r2, r3, r6, ror #26
  48:	75746d2d 	ldrbvc	r6, [r4, #-3373]!	; 0xd2d
  4c:	613d656e 	teqvs	sp, lr, ror #10
  50:	31316d72 	teqcc	r1, r2, ror sp
  54:	7a6a3637 	bvc	1a8d938 <__bss_end__+0x1a83dd8>
  58:	20732d66 	rsbscs	r2, r3, r6, ror #26
  5c:	6467672d 	strbtvs	r6, [r7], #-1837	; 0x72d
  60:	4f2d2062 	svcmi	0x002d2062
  64:	732d2067 	teqvc	sp, #103	; 0x67
  68:	673d6474 			; <UNDEFINED> instruction: 0x673d6474
  6c:	3939756e 	ldmdbcc	r9!, {r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}
  70:	66662d20 	strbtvs	r2, [r6], -r0, lsr #26
  74:	73656572 	cmnvc	r5, #478150656	; 0x1c800000
  78:	646e6174 	strbtvs	r6, [lr], #-372	; 0x174
  7c:	00676e69 	rsbeq	r6, r7, r9, ror #28
  80:	6d746f6e 	ldclvs	15, cr6, [r4, #-440]!	; 0xfffffe48
  84:	006e6961 	rsbeq	r6, lr, r1, ror #18
  88:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
  8c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
  90:	77730074 			; <UNDEFINED> instruction: 0x77730074
  94:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
  98:	72705f74 	rsbsvc	r5, r0, #116, 30	; 0x1d0
  9c:	6b746e69 	blvs	1d1ba48 <__bss_end__+0x1d11ee8>
  a0:	5f777300 	svcpl	0x00777300
  a4:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
  a8:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
  ac:	6e755f73 	mrcvs	15, 3, r5, cr5, cr3, {3}
  b0:	006c6974 	rsbeq	r6, ip, r4, ror r9
  b4:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  b8:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
  bc:	61686320 	cmnvs	r8, r0, lsr #6
  c0:	6c630072 	stclvs	0, cr0, [r3], #-456	; 0xfffffe38
  c4:	5f6e6165 	svcpl	0x006e6165
  c8:	6f626572 	svcvs	0x00626572
  cc:	7300746f 	movwvc	r7, #1135	; 0x46f
  d0:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xf68
  d4:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
  d8:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
  dc:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
  e0:	77730074 			; <UNDEFINED> instruction: 0x77730074
  e4:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
  e8:	00745f74 	rsbseq	r5, r4, r4, ror pc
  ec:	55465f5f 	strbpl	r5, [r6, #-3935]	; 0xf5f
  f0:	4954434e 	ldmdbmi	r4, {r1, r2, r3, r6, r8, r9, lr}^
  f4:	5f5f4e4f 	svcpl	0x005f4e4f
  f8:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
  fc:	6f6c2067 	svcvs	0x006c2067
 100:	7520676e 	strvc	r6, [r0, #-1902]!	; 0x76e
 104:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 108:	2064656e 	rsbcs	r6, r4, lr, ror #10
 10c:	00746e69 	rsbseq	r6, r4, r9, ror #28
 110:	746e6975 	strbtvc	r6, [lr], #-2421	; 0x975
 114:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 118:	64756162 	ldrbtvs	r6, [r5], #-354	; 0x162
 11c:	7a697300 	bvc	1a5cd24 <__bss_end__+0x1a531c4>
 120:	70797465 	rsbsvc	r7, r9, r5, ror #8
 124:	6f6c0065 	svcvs	0x006c0065
 128:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
 12c:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 130:	00746e69 	rsbseq	r6, r4, r9, ror #28
 134:	65672d32 	strbvs	r2, [r7, #-3378]!	; 0xd32
 138:	752d7374 	strvc	r7, [sp, #-884]!	; 0x374
 13c:	6c69746e 	cfstrdvs	mvd7, [r9], #-440	; 0xfffffe48
 140:	7365742d 	cmnvc	r5, #754974720	; 0x2d000000
 144:	00632e74 	rsbeq	r2, r3, r4, ror lr
 148:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 14c:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
 150:	6e650074 	mcrvs	0, 3, r0, cr5, cr4, {3}
 154:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
 158:	6361635f 	cmnvs	r1, #2080374785	; 0x7c000001
 15c:	75006568 	strvc	r6, [r0, #-1384]	; 0x568
 160:	33746e69 	cmncc	r4, #1680	; 0x690
 164:	00745f32 	rsbseq	r5, r4, r2, lsr pc
 168:	6c727473 	cfldrdvs	mvd7, [r2], #-460	; 0xfffffe34
 16c:	2f006e65 	svccs	0x00006e65
 170:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 174:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 178:	6a6e6169 	bvs	1b98724 <__bss_end__+0x1b8ebc4>
 17c:	442f6e75 	strtmi	r6, [pc], #-3701	; 184 <_start-0x7e7c>
 180:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 184:	732f706f 	teqvc	pc, #111	; 0x6f
 188:	6f6f6863 	svcvs	0x006f6863
 18c:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 190:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 194:	30323931 	eorscc	r3, r2, r1, lsr r9
 198:	3153432f 	cmpcc	r3, pc, lsr #6
 19c:	2f453034 	svccs	0x00453034
 1a0:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 1a4:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 1a8:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 1ac:	62616c2f 	rsbvs	r6, r1, #12032	; 0x2f00
 1b0:	2d382f73 	ldccs	15, cr2, [r8, #-460]!	; 0xfffffe34
 1b4:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 1b8:	692d6563 	pushvs	{r0, r1, r5, r6, r8, sl, sp, lr}
 1bc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 1c0:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
 1c4:	30302f73 	eorscc	r2, r0, r3, ror pc
 1c8:	7365742d 	cmnvc	r5, #754974720	; 0x2d000000
 1cc:	77732d74 			; <UNDEFINED> instruction: 0x77732d74
 1d0:	7261752d 	rsbvc	r7, r1, #188743680	; 0xb400000
 1d4:	79630074 	stmdbvc	r3!, {r2, r4, r5, r6}^
 1d8:	65705f63 	ldrbvs	r5, [r0, #-3939]!	; 0xf63
 1dc:	69625f72 	stmdbvs	r2!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 1e0:	72770074 	rsbsvc	r0, r7, #116	; 0x74
 1e4:	5f657469 	svcpl	0x00657469
 1e8:	5f637963 	svcpl	0x00637963
 1ec:	69746e75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 1f0:	7773006c 	ldrbvc	r0, [r3, -ip, rrx]!
 1f4:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 1f8:	65675f74 	strbvs	r5, [r7, #-3956]!	; 0xf74
 1fc:	745f6374 	ldrbvc	r6, [pc], #-884	; 204 <_start-0x7dfc>
 200:	6f656d69 	svcvs	0x00656d69
 204:	5f007475 	svcpl	0x00007475
 208:	5f61765f 	svcpl	0x0061765f
 20c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
 210:	5f777300 	svcpl	0x00777300
 214:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 218:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 21c:	65640063 	strbvs	r0, [r4, #-99]!	; 0x63
 220:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
 224:	65640064 	strbvs	r0, [r4, #-100]!	; 0x64
 228:	5f79616c 	svcpl	0x0079616c
 22c:	6379636e 	cmnvs	r9, #-1207959551	; 0xb8000001
 230:	0073656c 	rsbseq	r6, r3, ip, ror #10
 234:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 238:	5f74756f 	svcpl	0x0074756f
 23c:	63657375 	cmnvs	r5, #-738197503	; 0xd4000001
 240:	5f777300 	svcpl	0x00777300
 244:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 248:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
 24c:	77730063 	ldrbvc	r0, [r3, -r3, rrx]!
 250:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 254:	75705f74 	ldrbvc	r5, [r0, #-3956]!	; 0xf74
 258:	76006b74 			; <UNDEFINED> instruction: 0x76006b74
 25c:	72705f61 	rsbsvc	r5, r0, #388	; 0x184
 260:	6b746e69 	blvs	1d1bc0c <__bss_end__+0x1d120ac>
 264:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 268:	65725f6f 	ldrbvs	r5, [r2, #-3951]!	; 0xf6f
 26c:	73006461 	movwvc	r6, #1121	; 0x461
 270:	61752d77 	cmnvs	r5, r7, ror sp
 274:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
 278:	61686300 	cmnvs	r8, r0, lsl #6
 27c:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
 280:	675f5f00 	ldrbvs	r5, [pc, -r0, lsl #30]
 284:	5f63756e 	svcpl	0x0063756e
 288:	6c5f6176 	ldfvse	f6, [pc], {118}	; 0x76
 28c:	00747369 	rsbseq	r7, r4, r9, ror #6
 290:	755f7773 	ldrbvc	r7, [pc, #-1907]	; fffffb25 <__bss_end__+0xffff5fc5>
 294:	5f747261 	svcpl	0x00747261
 298:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
 29c:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
 2a0:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
 2a4:	756f5f00 	strbvc	r5, [pc, #-3840]!	; fffff3ac <__bss_end__+0xffff584c>
 2a8:	69740074 	ldmdbvs	r4!, {r2, r4, r5, r6}^
 2ac:	5f72656d 	svcpl	0x0072656d
 2b0:	5f746567 	svcpl	0x00746567
 2b4:	63657375 	cmnvs	r5, #-738197503	; 0xd4000001
 2b8:	7761725f 			; <UNDEFINED> instruction: 0x7761725f
 2bc:	79626e00 	stmdbvc	r2!, {r9, sl, fp, sp, lr}^
 2c0:	00736574 	rsbseq	r6, r3, r4, ror r5
 2c4:	6f697067 	svcvs	0x00697067
 2c8:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 2cc:	75006574 	strvc	r6, [r0, #-1396]	; 0x574
 2d0:	5f636573 	svcpl	0x00636573
 2d4:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 2d8:	0074756f 	rsbseq	r7, r4, pc, ror #10
 2dc:	6f697067 	svcvs	0x00697067
 2e0:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
 2e4:	706e695f 	rsbvc	r6, lr, pc, asr r9
 2e8:	73007475 	movwvc	r7, #1141	; 0x475
 2ec:	61755f77 	cmnvs	r5, r7, ror pc
 2f0:	675f7472 			; <UNDEFINED> instruction: 0x675f7472
 2f4:	5f737465 	svcpl	0x00737465
 2f8:	69746e75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 2fc:	6c625f6c 	stclvs	15, cr5, [r2], #-432	; 0xfffffe50
 300:	5f5f006b 	svcpl	0x005f006b
 304:	67007061 	strvs	r7, [r0, -r1, rrx]
 308:	5f6f6970 	svcpl	0x006f6970
 30c:	5f746573 	svcpl	0x00746573
 310:	7074756f 	rsbsvc	r7, r4, pc, ror #10
 314:	77007475 	smlsdxvc	r0, r5, r4, r7
 318:	5f746961 	svcpl	0x00746961
 31c:	69746e75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 320:	73755f6c 	cmnvc	r5, #108, 30	; 0x1b0
 324:	61006365 	tstvs	r0, r5, ror #6
 328:	00736772 	rsbseq	r6, r3, r2, ror r7
 32c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 330:	6972702f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, ip, sp, lr}^
 334:	2e6b746e 	cdpcs	4, 6, cr7, cr11, cr14, {3}
 338:	552f0063 	strpl	r0, [pc, #-99]!	; 2dd <_start-0x7d23>
 33c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 340:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 344:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 348:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 34c:	6f746b73 	svcvs	0x00746b73
 350:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 354:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 1bc <_start-0x7e44>
 358:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 35c:	31726574 	cmncc	r2, r4, ror r5
 360:	2f303239 	svccs	0x00303239
 364:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 368:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 36c:	30343173 	eorscc	r3, r4, r3, ror r1
 370:	30322d65 	eorscc	r2, r2, r5, ror #26
 374:	2f6e6977 	svccs	0x006e6977
 378:	7062696c 	rsbvc	r6, r2, ip, ror #18
 37c:	696c0069 	stmdbvs	ip!, {r0, r3, r5, r6}^
 380:	702f6362 	eorvc	r6, pc, r2, ror #6
 384:	2e6b7475 	mcrcs	4, 3, r7, cr11, cr5, {3}
 388:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
 38c:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
 390:	705f6c61 	subsvc	r6, pc, r1, ror #24
 394:	006b7475 	rsbeq	r7, fp, r5, ror r4
 398:	5f697072 	svcpl	0x00697072
 39c:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 3a0:	00726168 	rsbseq	r6, r2, r8, ror #2
 3a4:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 3a8:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
 3ac:	2e6e656c 	cdpcs	5, 6, cr6, cr14, cr12, {3}
 3b0:	656e0063 	strbvs	r0, [lr, #-99]!	; 0x63
 3b4:	00705f67 	rsbseq	r5, r0, r7, ror #30
 3b8:	65766572 	ldrbvs	r6, [r6, #-1394]!	; 0x572
 3bc:	00657372 	rsbeq	r7, r5, r2, ror r3
 3c0:	69647369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
 3c4:	00746967 	rsbseq	r6, r4, r7, ror #18
 3c8:	73747570 	cmnvc	r4, #112, 10	; 0x1c000000
 3cc:	0070665f 	rsbseq	r6, r0, pc, asr r6
 3d0:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0x162
 3d4:	67697300 	strbvs	r7, [r9, -r0, lsl #6]!
 3d8:	5f64656e 	svcpl	0x0064656e
 3dc:	696c0070 	stmdbvs	ip!, {r4, r5, r6}^
 3e0:	762f6362 	strtvc	r6, [pc], -r2, ror #6
 3e4:	72702d61 	rsbsvc	r2, r0, #6208	; 0x1840
 3e8:	6b746e69 	blvs	1d1bd94 <__bss_end__+0x1d12234>
 3ec:	7200632e 	andvc	r6, r0, #-1207959552	; 0xb8000000
 3f0:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
 3f4:	6f5f7465 	svcvs	0x005f7465
 3f8:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0x475
 3fc:	69770074 	ldmdbvs	r7!, {r2, r4, r5, r6}^
 400:	00687464 	rsbeq	r7, r8, r4, ror #8
 404:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 408:	0070665f 	rsbseq	r6, r0, pc, asr r6
 40c:	74696d65 	strbtvc	r6, [r9], #-3429	; 0xd65
 410:	73696400 	cmnvc	r9, #0, 8
 414:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
 418:	6361635f 	cmnvs	r1, #2080374785	; 0x7c000001
 41c:	63006568 	movwvs	r6, #1384	; 0x568
 420:	30343173 	eorscc	r3, r4, r3, ror r1
 424:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 428:	61632f63 	cmnvs	r3, r3, ror #30
 42c:	2e656863 	cdpcs	8, 6, cr6, cr5, cr3, {3}
 430:	70720063 	rsbsvc	r0, r2, r3, rrx
 434:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xf69
 438:	746f6f62 	strbtvc	r6, [pc], #-3938	; 440 <_start-0x7bc0>
 43c:	31736300 	cmncc	r3, r0, lsl #6
 440:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 444:	2f637273 	svccs	0x00637273
 448:	61656c63 	cmnvs	r5, r3, ror #24
 44c:	65722d6e 	ldrbvs	r2, [r2, #-3438]!	; 0xd6e
 450:	746f6f62 	strbtvc	r6, [pc], #-3938	; 458 <_start-0x7ba8>
 454:	6400632e 	strvs	r6, [r0], #-814	; 0x32e
 458:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 45c:	00736d5f 	rsbseq	r6, r3, pc, asr sp
 460:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 464:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
 468:	632f6372 	teqvs	pc, #-939524095	; 0xc8000001
 46c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 470:	00632e74 	rsbeq	r2, r3, r4, ror lr
 474:	73625f5f 	cmnvc	r2, #380	; 0x17c
 478:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xf73
 47c:	5f747261 	svcpl	0x00747261
 480:	5f5f005f 	svcpl	0x005f005f
 484:	5f737362 	svcpl	0x00737362
 488:	5f646e65 	svcpl	0x00646e65
 48c:	7362005f 	cmnvc	r2, #95	; 0x5f
 490:	6e655f73 	mcrvs	15, 3, r5, cr5, cr3, {3}
 494:	635f0064 	cmpvs	pc, #100	; 0x64
 498:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 49c:	74610074 	strbtvc	r0, [r1], #-116	; 0x74
 4a0:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0x55f
 4a4:	656c5f72 	strbvs	r5, [ip, #-3954]!	; 0xf72
 4a8:	006c6576 	rsbeq	r6, ip, r6, ror r5
 4ac:	505f4d50 	subspl	r4, pc, r0, asr sp	; <UNPREDICTABLE>
 4b0:	57535341 	ldrbpl	r5, [r3, -r1, asr #6]
 4b4:	0044524f 	subeq	r5, r4, pc, asr #4
 4b8:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 4bc:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
 4c0:	722f6372 	eorvc	r6, pc, #-939524095	; 0xc8000001
 4c4:	6f6f6265 	svcvs	0x006f6265
 4c8:	00632e74 	rsbeq	r2, r3, r4, ror lr
 4cc:	525f4d50 	subspl	r4, pc, #80, 26	; 0x1400
 4d0:	5f435453 	svcpl	0x00435453
 4d4:	46435257 			; <UNDEFINED> instruction: 0x46435257
 4d8:	55465f47 	strbpl	r5, [r6, #-3911]	; 0xf47
 4dc:	525f4c4c 	subspl	r4, pc, #76, 24	; 0x4c00
 4e0:	54455345 	strbpl	r5, [r5], #-837	; 0x345
 4e4:	5f4d5000 	svcpl	0x004d5000
 4e8:	474f4457 	smlsldmi	r4, pc, r7, r4	; <UNPREDICTABLE>
 4ec:	74657300 	strbtvc	r7, [r5], #-768	; 0x300
 4f0:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0x55f
 4f4:	656c5f72 	strbvs	r5, [ip, #-3954]!	; 0xf72
 4f8:	006c6576 	rsbeq	r6, ip, r6, ror r5
 4fc:	33545550 	cmpcc	r4, #80, 10	; 0x14000000
 500:	4d500032 	ldclmi	0, cr0, [r0, #-200]	; 0xffffff38
 504:	5453525f 	ldrbpl	r5, [r3], #-607	; 0x25f
 508:	70630043 	rsbvc	r0, r3, r3, asr #32
 50c:	64007273 	strvs	r7, [r0], #-627	; 0x273
 510:	625f7665 	subsvs	r7, pc, #105906176	; 0x6500000
 514:	69727261 	ldmdbvs	r2!, {r0, r5, r6, r9, ip, sp, lr}^
 518:	64007265 	strvs	r7, [r0], #-613	; 0x265
 51c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 520:	6365735f 	cmnvs	r5, #2080374785	; 0x7c000001
 524:	31736300 	cmncc	r3, r0, lsl #6
 528:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 52c:	2f637273 	svccs	0x00637273
 530:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 534:	00632e72 	rsbeq	r2, r3, r2, ror lr
 538:	33544547 	cmpcc	r4, #297795584	; 0x11c00000
 53c:	69740032 	ldmdbvs	r4!, {r1, r4, r5}^
 540:	00736b63 	rsbseq	r6, r3, r3, ror #22
 544:	616c6564 	cmnvs	ip, r4, ror #10
 548:	79635f79 	stmdbvc	r3!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 54c:	73656c63 	cmnvc	r5, #25344	; 0x6300
 550:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 554:	755f7961 	ldrbvc	r7, [pc, #-2401]	; fffffbfb <__bss_end__+0xffff609b>
 558:	69740073 	ldmdbvs	r4!, {r0, r1, r4, r5, r6}^
 55c:	5f72656d 	svcpl	0x0072656d
 560:	5f746567 	svcpl	0x00746567
 564:	63657375 	cmnvs	r5, #-738197503	; 0xd4000001
 568:	58554100 	ldmdapl	r5, {r8, lr}^
 56c:	5f554d5f 	svcpl	0x00554d5f
 570:	5f52434d 	svcpl	0x0052434d
 574:	00474552 	subeq	r4, r7, r2, asr r5
 578:	5f585541 	svcpl	0x00585541
 57c:	495f554d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, sl, ip, lr}^	; <UNPREDICTABLE>
 580:	45525f4f 	ldrbmi	r5, [r2, #-3919]	; 0xf4f
 584:	55410047 	strbpl	r0, [r1, #-71]	; 0x47
 588:	554d5f58 	strbpl	r5, [sp, #-3928]	; 0xf58
 58c:	52534d5f 	subspl	r4, r3, #6080	; 0x17c0
 590:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
 594:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 598:	55465f4f 	strbpl	r5, [r6, #-3919]	; 0xf4f
 59c:	415f434e 	cmpmi	pc, lr, asr #6
 5a0:	0030544c 	eorseq	r5, r0, ip, asr #8
 5a4:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 5a8:	6e61635f 	mcrvs	3, 3, r6, cr1, cr15, {2}
 5ac:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 5b0:	55410063 	strbpl	r0, [r1, #-99]	; 0x63
 5b4:	554d5f58 	strbpl	r5, [sp, #-3928]	; 0xf58
 5b8:	544e435f 	strbpl	r4, [lr], #-863	; 0x35f
 5bc:	45525f4c 	ldrbmi	r5, [r2, #-3916]	; 0xf4c
 5c0:	61750047 	cmnvs	r5, r7, asr #32
 5c4:	685f7472 	ldmdavs	pc, {r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 5c8:	645f7361 	ldrbvs	r7, [pc], #-865	; 5d0 <_start-0x7a30>
 5cc:	00617461 	rsbeq	r7, r1, r1, ror #8
 5d0:	4f495047 	svcmi	0x00495047
 5d4:	4e55465f 	mrcmi	6, 2, r4, cr5, cr15, {2}
 5d8:	554f5f43 	strbpl	r5, [pc, #-3907]	; fffff69d <__bss_end__+0xffff5b3d>
 5dc:	54555054 	ldrbpl	r5, [r5], #-84	; 0x54
 5e0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 5e4:	55465f4f 	strbpl	r5, [r6, #-3919]	; 0xf4f
 5e8:	415f434e 	cmpmi	pc, lr, asr #6
 5ec:	0031544c 	eorseq	r5, r1, ip, asr #8
 5f0:	4f495047 	svcmi	0x00495047
 5f4:	4e55465f 	mrcmi	6, 2, r4, cr5, cr15, {2}
 5f8:	4c415f43 	mcrrmi	15, 4, r5, r1, cr3
 5fc:	47003254 	smlsdmi	r0, r4, r2, r3
 600:	5f4f4950 	svcpl	0x004f4950
 604:	434e5546 	movtmi	r5, #58694	; 0xe546
 608:	544c415f 	strbpl	r4, [ip], #-351	; 0x15f
 60c:	50470033 	subpl	r0, r7, r3, lsr r0
 610:	465f4f49 	ldrbmi	r4, [pc], -r9, asr #30
 614:	5f434e55 	svcpl	0x00434e55
 618:	35544c41 	ldrbcc	r4, [r4, #-3137]	; 0xc41
 61c:	58554100 	ldmdapl	r5, {r8, lr}^
 620:	5f554d5f 	svcpl	0x00554d5f
 624:	5f524549 	svcpl	0x00524549
 628:	00474552 	subeq	r4, r7, r2, asr r5
 62c:	33747570 	cmncc	r4, #112, 10	; 0x1c000000
 630:	55410032 	strbpl	r0, [r1, #-50]	; 0x32
 634:	554d5f58 	strbpl	r5, [sp, #-3928]	; 0xf58
 638:	5249495f 	subpl	r4, r9, #1556480	; 0x17c000
 63c:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
 640:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 644:	75665f6f 	strbvc	r5, [r6, #-3951]!	; 0xf6f
 648:	745f636e 	ldrbvc	r6, [pc], #-878	; 650 <_start-0x79b0>
 64c:	72617500 	rsbvc	r7, r1, #0, 10
 650:	61635f74 	smcvs	13812	; 0x35f4
 654:	75705f6e 	ldrbvc	r5, [r0, #-3950]!	; 0xf6e
 658:	41006374 	tstmi	r0, r4, ror r3
 65c:	455f5855 	ldrbmi	r5, [pc, #-2133]	; fffffe0f <__bss_end__+0xffff62af>
 660:	4c42414e 	stfmie	f4, [r2], {78}	; 0x4e
 664:	41005345 	tstmi	r0, r5, asr #6
 668:	495f5855 	ldmdbmi	pc, {r0, r2, r4, r6, fp, ip, lr}^	; <UNPREDICTABLE>
 66c:	41005152 	tstmi	r0, r2, asr r1
 670:	4d5f5855 	ldclmi	8, cr5, [pc, #-340]	; 524 <_start-0x7adc>
 674:	41425f55 	cmpmi	r2, r5, asr pc
 678:	525f4455 	subspl	r4, pc, #1426063360	; 0x55000000
 67c:	41004745 	tstmi	r0, r5, asr #14
 680:	4d5f5855 	ldclmi	8, cr5, [pc, #-340]	; 534 <_start-0x7acc>
 684:	54535f55 	ldrbpl	r5, [r3], #-3925	; 0xf55
 688:	525f5441 	subspl	r5, pc, #1090519040	; 0x41000000
 68c:	47004745 	strmi	r4, [r0, -r5, asr #14]
 690:	5f4f4950 	svcpl	0x004f4950
 694:	434e5546 	movtmi	r5, #58694	; 0xe546
 698:	544c415f 	strbpl	r4, [ip], #-351	; 0x15f
 69c:	70670034 	rsbvc	r0, r7, r4, lsr r0
 6a0:	735f6f69 	cmpvc	pc, #420	; 0x1a4
 6a4:	665f7465 	ldrbvs	r7, [pc], -r5, ror #8
 6a8:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xe75
 6ac:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 6b0:	5f585541 	svcpl	0x00585541
 6b4:	535f554d 	cmppl	pc, #322961408	; 0x13400000
 6b8:	54415243 	strbpl	r5, [r1], #-579	; 0x243
 6bc:	41004843 	tstmi	r0, r3, asr #16
 6c0:	4d5f5855 	ldclmi	8, cr5, [pc, #-340]	; 574 <_start-0x7a8c>
 6c4:	434c5f55 	movtmi	r5, #53077	; 0xcf55
 6c8:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xf52
 6cc:	50470047 	subpl	r0, r7, r7, asr #32
 6d0:	465f4f49 	ldrbmi	r4, [pc], -r9, asr #30
 6d4:	5f434e55 	svcpl	0x00434e55
 6d8:	55504e49 	ldrbpl	r4, [r0, #-3657]	; 0xe49
 6dc:	55410054 	strbpl	r0, [r1, #-84]	; 0x54
 6e0:	554d5f58 	strbpl	r5, [sp, #-3928]	; 0xf58
 6e4:	52534c5f 	subspl	r4, r3, #24320	; 0x5f00
 6e8:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
 6ec:	72617500 	rsbvc	r7, r1, #0, 10
 6f0:	65675f74 	strbvs	r5, [r7, #-3956]!	; 0xf74
 6f4:	615f6374 	cmpvs	pc, r4, ror r3	; <UNPREDICTABLE>
 6f8:	636e7973 	cmnvs	lr, #1884160	; 0x1cc000
 6fc:	74656700 	strbtvc	r6, [r5], #-1792	; 0x700
 700:	67003233 	smladxvs	r0, r3, r2, r3
 704:	5f6f6970 	svcpl	0x006f6970
 708:	30726c63 	rsbscc	r6, r2, r3, ror #24
 70c:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 710:	65735f6f 	ldrbvs	r5, [r3, #-3951]!	; 0xf6f
 714:	67003074 	smlsdxvs	r0, r4, r0, r3
 718:	5f6f6970 	svcpl	0x006f6970
 71c:	6c657366 	stclvs	3, cr7, [r5], #-408	; 0xfffffe68
 720:	50470030 	subpl	r0, r7, r0, lsr r0
 724:	31524c43 	cmpcc	r2, r3, asr #24
 728:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 72c:	65735f6f 	ldrbvs	r5, [r3, #-3951]!	; 0xf6f
 730:	6e6f5f74 	mcrvs	15, 3, r5, cr15, cr4, {3}
 734:	4c504700 	mrrcmi	7, 0, r4, r0, cr0
 738:	00315645 	eorseq	r5, r1, r5, asr #12
 73c:	45535047 	ldrbmi	r5, [r3, #-71]	; 0x47
 740:	47003154 	smlsdmi	r0, r4, r1, r3
 744:	524c4350 	subpl	r4, ip, #80, 6	; 0x40000001
 748:	50470030 	subpl	r0, r7, r0, lsr r0
 74c:	30544553 	subscc	r4, r4, r3, asr r5
 750:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 754:	65735f6f 	ldrbvs	r5, [r3, #-3951]!	; 0xf6f
 758:	666f5f74 	uqsub16vs	r5, pc, r4	; <UNPREDICTABLE>
 75c:	50470066 	subpl	r0, r7, r6, rrx
 760:	4c455346 	mcrrmi	3, 4, r5, r5, cr6
 764:	75660031 	strbvc	r0, [r6, #-49]!	; 0x31
 768:	7200636e 	andvc	r6, r0, #-1207959551	; 0xb8000001
 76c:	735f6765 	cmpvc	pc, #26476544	; 0x1940000
 770:	63656c65 	cmnvs	r5, #25856	; 0x6500
 774:	69620074 	stmdbvs	r2!, {r2, r4, r5, r6}^
 778:	73616d74 	cmnvc	r1, #116, 26	; 0x1d00
 77c:	7067006b 	rsbvc	r0, r7, fp, rrx
 780:	632e6f69 	teqvs	lr, #420	; 0x1a4
 784:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 788:	65725f6f 	ldrbvs	r5, [r2, #-3951]!	; 0xf6f
 78c:	50470067 	subpl	r0, r7, r7, rrx
 790:	4c455346 	mcrrmi	3, 4, r5, r5, cr6
 794:	50470030 	subpl	r0, r7, r0, lsr r0
 798:	3056454c 	subscc	r4, r6, ip, asr #10
 79c:	46504700 	ldrbmi	r4, [r0], -r0, lsl #14
 7a0:	324c4553 	subcc	r4, ip, #348127232	; 0x14c00000
 7a4:	46504700 	ldrbmi	r4, [r0], -r0, lsl #14
 7a8:	334c4553 	movtcc	r4, #50515	; 0xc553
 7ac:	46504700 	ldrbmi	r4, [r0], -r0, lsl #14
 7b0:	344c4553 	strbcc	r4, [ip], #-1363	; 0x553
 7b4:	46504700 	ldrbmi	r4, [r0], -r0, lsl #14
 7b8:	354c4553 	strbcc	r4, [ip, #-1363]	; 0x553
 7bc:	746e6900 	strbtvc	r6, [lr], #-2304	; 0x900
 7c0:	616e7265 	cmnvs	lr, r5, ror #4
 7c4:	75705f6c 	ldrbvc	r5, [r0, #-3948]!	; 0xf6c
 7c8:	61686374 	smcvs	34356	; 0x8634
 7cc:	696c0072 	stmdbvs	ip!, {r1, r4, r5, r6}^
 7d0:	702f6362 	eorvc	r6, pc, r2, ror #6
 7d4:	68637475 	stmdavs	r3!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
 7d8:	632e7261 	teqvs	lr, #268435462	; 0x10000006
	...

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000002c 	andeq	r0, r0, ip, lsr #32
  14:	00000000 	andeq	r0, r0, r0
  18:	00008010 	andeq	r8, r0, r0, lsl r0
  1c:	00000130 	andeq	r0, r0, r0, lsr r1
  20:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
  24:	86088509 	strhi	r8, [r8], -r9, lsl #10
  28:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
  2c:	8a048905 	bhi	122448 <__bss_end__+0x1188e8>
  30:	8e028b03 	vmlahi.f64	d8, d2, d3
  34:	b40e4201 	strlt	r4, [lr], #-513	; 0x201
  38:	c00e4208 	andgt	r4, lr, r8, lsl #4
  3c:	00000008 	andeq	r0, r0, r8
  40:	0000000c 	andeq	r0, r0, ip
  44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  48:	7c020001 	stcvc	0, cr0, [r2], {1}
  4c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  50:	0000001c 	andeq	r0, r0, ip, lsl r0
  54:	00000040 	andeq	r0, r0, r0, asr #32
  58:	00008140 	andeq	r8, r0, r0, asr #2
  5c:	00000158 	andeq	r0, r0, r8, asr r1
  60:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
  64:	86058506 	strhi	r8, [r5], -r6, lsl #10
  68:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
  6c:	00018e02 	andeq	r8, r1, r2, lsl #28
  70:	00000020 	andeq	r0, r0, r0, lsr #32
  74:	00000040 	andeq	r0, r0, r0, asr #32
  78:	00008298 	muleq	r0, r8, r2
  7c:	000001c8 	andeq	r0, r0, r8, asr #3
  80:	83200e42 	teqhi	r0, #1056	; 0x420
  84:	85078408 	strhi	r8, [r7, #-1032]	; 0x408
  88:	87058606 	strhi	r8, [r5, -r6, lsl #12]
  8c:	89038804 	stmdbhi	r3, {r2, fp, pc}
  90:	00018e02 	andeq	r8, r1, r2, lsl #28
  94:	00000020 	andeq	r0, r0, r0, lsr #32
  98:	00000040 	andeq	r0, r0, r0, asr #32
  9c:	00008460 	andeq	r8, r0, r0, ror #8
  a0:	0000008c 	andeq	r0, r0, ip, lsl #1
  a4:	84200e42 	strthi	r0, [r0], #-3650	; 0xe42
  a8:	86078508 	strhi	r8, [r7], -r8, lsl #10
  ac:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
  b0:	8a038904 	bhi	e24c8 <__bss_end__+0xd8968>
  b4:	00018e02 	andeq	r8, r1, r2, lsl #28
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000040 	andeq	r0, r0, r0, asr #32
  c0:	000084ec 	andeq	r8, r0, ip, ror #9
  c4:	00000078 	andeq	r0, r0, r8, ror r0
  c8:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
  cc:	86058506 	strhi	r8, [r5], -r6, lsl #10
  d0:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
  d4:	00018e02 	andeq	r8, r1, r2, lsl #28
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000040 	andeq	r0, r0, r0, asr #32
  e0:	00008564 	andeq	r8, r0, r4, ror #10
  e4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
  e8:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
  ec:	86058506 	strhi	r8, [r5], -r6, lsl #10
  f0:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
  f4:	00018e02 	andeq	r8, r1, r2, lsl #28
  f8:	00000014 	andeq	r0, r0, r4, lsl r0
  fc:	00000040 	andeq	r0, r0, r0, asr #32
 100:	00008614 	andeq	r8, r0, r4, lsl r6
 104:	00000038 	andeq	r0, r0, r8, lsr r0
 108:	83080e42 	movwhi	r0, #36418	; 0x8e42
 10c:	00018e02 	andeq	r8, r1, r2, lsl #28
 110:	00000018 	andeq	r0, r0, r8, lsl r0
 114:	00000040 	andeq	r0, r0, r0, asr #32
 118:	0000864c 	andeq	r8, r0, ip, asr #12
 11c:	0000002c 	andeq	r0, r0, ip, lsr #32
 120:	83100e42 	tsthi	r0, #1056	; 0x420
 124:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 128:	00018e02 	andeq	r8, r1, r2, lsl #28
 12c:	00000024 	andeq	r0, r0, r4, lsr #32
 130:	00000040 	andeq	r0, r0, r0, asr #32
 134:	00008678 	andeq	r8, r0, r8, ror r6
 138:	00000080 	andeq	r0, r0, r0, lsl #1
 13c:	810c0e42 	tsthi	ip, r2, asr #28
 140:	83028203 	movwhi	r8, #8707	; 0x2203
 144:	180e4201 	stmdane	lr, {r0, r9, lr}
 148:	05850684 	streq	r0, [r5, #1668]	; 0x684
 14c:	0e42048e 	cdpeq	4, 4, cr0, cr2, cr14, {4}
 150:	000003e8 	andeq	r0, r0, r8, ror #7
 154:	00000014 	andeq	r0, r0, r4, lsl r0
 158:	00000040 	andeq	r0, r0, r0, asr #32
 15c:	000086f8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
 160:	00000048 	andeq	r0, r0, r8, asr #32
 164:	8e040e42 	cdphi	14, 0, cr0, cr4, cr2, {2}
 168:	100e4201 	andne	r4, lr, r1, lsl #4
 16c:	0000000c 	andeq	r0, r0, ip
 170:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 174:	7c020001 	stcvc	0, cr0, [r2], {1}
 178:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 17c:	00000024 	andeq	r0, r0, r4, lsr #32
 180:	0000016c 	andeq	r0, r0, ip, ror #2
 184:	00008740 	andeq	r8, r0, r0, asr #14
 188:	00000058 	andeq	r0, r0, r8, asr r0
 18c:	80100e42 	andshi	r0, r0, r2, asr #28
 190:	82038104 	andhi	r8, r3, #4, 2
 194:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
 198:	07841c0e 	streq	r1, [r4, lr, lsl #24]
 19c:	058e0685 	streq	r0, [lr, #1669]	; 0x685
 1a0:	00280e42 	eoreq	r0, r8, r2, asr #28
 1a4:	0000000c 	andeq	r0, r0, ip
 1a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1ac:	7c020001 	stcvc	0, cr0, [r2], {1}
 1b0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1b4:	00000018 	andeq	r0, r0, r8, lsl r0
 1b8:	000001a4 	andeq	r0, r0, r4, lsr #3
 1bc:	00008798 	muleq	r0, r8, r7
 1c0:	00000034 	andeq	r0, r0, r4, lsr r0
 1c4:	83100e42 	tsthi	r0, #1056	; 0x420
 1c8:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 1cc:	00018e02 	andeq	r8, r1, r2, lsl #28
 1d0:	0000000c 	andeq	r0, r0, ip
 1d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1d8:	7c020001 	stcvc	0, cr0, [r2], {1}
 1dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1e0:	0000000c 	andeq	r0, r0, ip
 1e4:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 1e8:	000087cc 	andeq	r8, r0, ip, asr #15
 1ec:	00000020 	andeq	r0, r0, r0, lsr #32
 1f0:	0000000c 	andeq	r0, r0, ip
 1f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1f8:	7c020001 	stcvc	0, cr0, [r2], {1}
 1fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 200:	0000000c 	andeq	r0, r0, ip
 204:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 208:	000087ec 	andeq	r8, r0, ip, ror #15
 20c:	00000014 	andeq	r0, r0, r4, lsl r0
 210:	0000000c 	andeq	r0, r0, ip
 214:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 218:	00008800 	andeq	r8, r0, r0, lsl #16
 21c:	0000002c 	andeq	r0, r0, ip, lsr #32
 220:	0000000c 	andeq	r0, r0, ip
 224:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 228:	0000882c 	andeq	r8, r0, ip, lsr #16
 22c:	00000040 	andeq	r0, r0, r0, asr #32
 230:	00000020 	andeq	r0, r0, r0, lsr #32
 234:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 238:	0000886c 	andeq	r8, r0, ip, ror #16
 23c:	00000198 	muleq	r0, r8, r1
 240:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 244:	86058506 	strhi	r8, [r5], -r6, lsl #10
 248:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 24c:	42018e02 	andmi	r8, r1, #2, 28
 250:	0000580e 	andeq	r5, r0, lr, lsl #16
 254:	00000014 	andeq	r0, r0, r4, lsl r0
 258:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 25c:	00008a04 	andeq	r8, r0, r4, lsl #20
 260:	00000050 	andeq	r0, r0, r0, asr r0
 264:	83080e42 	movwhi	r0, #36418	; 0x8e42
 268:	00018e02 	andeq	r8, r1, r2, lsl #28
 26c:	00000028 	andeq	r0, r0, r8, lsr #32
 270:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 274:	00008a54 	andeq	r8, r0, r4, asr sl
 278:	00000288 	andeq	r0, r0, r8, lsl #5
 27c:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
 280:	86088509 	strhi	r8, [r8], -r9, lsl #10
 284:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
 288:	8a048905 	bhi	1226a4 <__bss_end__+0x118b44>
 28c:	8e028b03 	vmlahi.f64	d8, d2, d3
 290:	b00e4201 	andlt	r4, lr, r1, lsl #4
 294:	00000001 	andeq	r0, r0, r1
 298:	0000000c 	andeq	r0, r0, ip
 29c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2a0:	7c020001 	stcvc	0, cr0, [r2], {1}
 2a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2a8:	0000000c 	andeq	r0, r0, ip
 2ac:	00000298 	muleq	r0, r8, r2
 2b0:	00008cdc 	ldrdeq	r8, [r0], -ip
 2b4:	00000010 	andeq	r0, r0, r0, lsl r0
 2b8:	0000000c 	andeq	r0, r0, ip
 2bc:	00000298 	muleq	r0, r8, r2
 2c0:	00008cec 	andeq	r8, r0, ip, ror #25
 2c4:	00000010 	andeq	r0, r0, r0, lsl r0
 2c8:	0000000c 	andeq	r0, r0, ip
 2cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2d0:	7c020001 	stcvc	0, cr0, [r2], {1}
 2d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2d8:	00000014 	andeq	r0, r0, r4, lsl r0
 2dc:	000002c8 	andeq	r0, r0, r8, asr #5
 2e0:	00008cfc 	strdeq	r8, [r0], -ip
 2e4:	00000028 	andeq	r0, r0, r8, lsr #32
 2e8:	83080e42 	movwhi	r0, #36418	; 0x8e42
 2ec:	00018e02 	andeq	r8, r1, r2, lsl #28
 2f0:	0000000c 	andeq	r0, r0, ip
 2f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2f8:	7c020001 	stcvc	0, cr0, [r2], {1}
 2fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 300:	00000014 	andeq	r0, r0, r4, lsl r0
 304:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 308:	00008d24 	andeq	r8, r0, r4, lsr #26
 30c:	00000034 	andeq	r0, r0, r4, lsr r0
 310:	83080e42 	movwhi	r0, #36418	; 0x8e42
 314:	00018e02 	andeq	r8, r1, r2, lsl #28
 318:	0000000c 	andeq	r0, r0, ip
 31c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 320:	7c020001 	stcvc	0, cr0, [r2], {1}
 324:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 328:	0000000c 	andeq	r0, r0, ip
 32c:	00000318 	andeq	r0, r0, r8, lsl r3
 330:	00008d58 	andeq	r8, r0, r8, asr sp
 334:	00000018 	andeq	r0, r0, r8, lsl r0
 338:	0000000c 	andeq	r0, r0, ip
 33c:	00000318 	andeq	r0, r0, r8, lsl r3
 340:	00008d70 	andeq	r8, r0, r0, ror sp
 344:	00000014 	andeq	r0, r0, r4, lsl r0
 348:	00000014 	andeq	r0, r0, r4, lsl r0
 34c:	00000318 	andeq	r0, r0, r8, lsl r3
 350:	00008d84 	andeq	r8, r0, r4, lsl #27
 354:	00000048 	andeq	r0, r0, r8, asr #32
 358:	83080e42 	movwhi	r0, #36418	; 0x8e42
 35c:	00018e02 	andeq	r8, r1, r2, lsl #28
 360:	0000000c 	andeq	r0, r0, ip
 364:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 368:	7c020001 	stcvc	0, cr0, [r2], {1}
 36c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 370:	0000000c 	andeq	r0, r0, ip
 374:	00000360 	andeq	r0, r0, r0, ror #6
 378:	00008dcc 	andeq	r8, r0, ip, asr #27
 37c:	0000001c 	andeq	r0, r0, ip, lsl r0
 380:	00000014 	andeq	r0, r0, r4, lsl r0
 384:	00000360 	andeq	r0, r0, r0, ror #6
 388:	00008de8 	andeq	r8, r0, r8, ror #27
 38c:	00000014 	andeq	r0, r0, r4, lsl r0
 390:	83080e42 	movwhi	r0, #36418	; 0x8e42
 394:	00018e02 	andeq	r8, r1, r2, lsl #28
 398:	00000014 	andeq	r0, r0, r4, lsl r0
 39c:	00000360 	andeq	r0, r0, r0, ror #6
 3a0:	00008dfc 	strdeq	r8, [r0], -ip
 3a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a8:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 3ac:	00018e02 	andeq	r8, r1, r2, lsl #28
 3b0:	00000018 	andeq	r0, r0, r8, lsl r0
 3b4:	00000360 	andeq	r0, r0, r0, ror #6
 3b8:	00008e18 	andeq	r8, r0, r8, lsl lr
 3bc:	00000024 	andeq	r0, r0, r4, lsr #32
 3c0:	83100e42 	tsthi	r0, #1056	; 0x420
 3c4:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 3c8:	00018e02 	andeq	r8, r1, r2, lsl #28
 3cc:	00000014 	andeq	r0, r0, r4, lsl r0
 3d0:	00000360 	andeq	r0, r0, r0, ror #6
 3d4:	00008e3c 	andeq	r8, r0, ip, lsr lr
 3d8:	00000014 	andeq	r0, r0, r4, lsl r0
 3dc:	83080e42 	movwhi	r0, #36418	; 0x8e42
 3e0:	00018e02 	andeq	r8, r1, r2, lsl #28
 3e4:	00000014 	andeq	r0, r0, r4, lsl r0
 3e8:	00000360 	andeq	r0, r0, r0, ror #6
 3ec:	00008e50 	andeq	r8, r0, r0, asr lr
 3f0:	00000014 	andeq	r0, r0, r4, lsl r0
 3f4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 3f8:	00018e02 	andeq	r8, r1, r2, lsl #28
 3fc:	0000000c 	andeq	r0, r0, ip
 400:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 404:	7c020001 	stcvc	0, cr0, [r2], {1}
 408:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 40c:	00000014 	andeq	r0, r0, r4, lsl r0
 410:	000003fc 	strdeq	r0, [r0], -ip
 414:	00008ec8 	andeq	r8, r0, r8, asr #29
 418:	0000001c 	andeq	r0, r0, ip, lsl r0
 41c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 420:	00018e02 	andeq	r8, r1, r2, lsl #28
 424:	00000018 	andeq	r0, r0, r8, lsl r0
 428:	000003fc 	strdeq	r0, [r0], -ip
 42c:	00008ee4 	andeq	r8, r0, r4, ror #29
 430:	0000009c 	muleq	r0, ip, r0
 434:	83100e42 	tsthi	r0, #1056	; 0x420
 438:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 43c:	00018e02 	andeq	r8, r1, r2, lsl #28
 440:	00000014 	andeq	r0, r0, r4, lsl r0
 444:	000003fc 	strdeq	r0, [r0], -ip
 448:	00008f80 	andeq	r8, r0, r0, lsl #31
 44c:	00000028 	andeq	r0, r0, r8, lsr #32
 450:	83080e42 	movwhi	r0, #36418	; 0x8e42
 454:	00018e02 	andeq	r8, r1, r2, lsl #28
 458:	00000014 	andeq	r0, r0, r4, lsl r0
 45c:	000003fc 	strdeq	r0, [r0], -ip
 460:	00008fa8 	andeq	r8, r0, r8, lsr #31
 464:	0000001c 	andeq	r0, r0, ip, lsl r0
 468:	83080e42 	movwhi	r0, #36418	; 0x8e42
 46c:	00018e02 	andeq	r8, r1, r2, lsl #28
 470:	00000014 	andeq	r0, r0, r4, lsl r0
 474:	000003fc 	strdeq	r0, [r0], -ip
 478:	00008fc4 	andeq	r8, r0, r4, asr #31
 47c:	0000002c 	andeq	r0, r0, ip, lsr #32
 480:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 484:	00018e02 	andeq	r8, r1, r2, lsl #28
 488:	00000014 	andeq	r0, r0, r4, lsl r0
 48c:	000003fc 	strdeq	r0, [r0], -ip
 490:	00008ff0 	strdeq	r8, [r0], -r0
 494:	0000000c 	andeq	r0, r0, ip
 498:	83080e42 	movwhi	r0, #36418	; 0x8e42
 49c:	00018e02 	andeq	r8, r1, r2, lsl #28
 4a0:	00000014 	andeq	r0, r0, r4, lsl r0
 4a4:	000003fc 	strdeq	r0, [r0], -ip
 4a8:	00008ffc 	strdeq	r8, [r0], -ip
 4ac:	00000020 	andeq	r0, r0, r0, lsr #32
 4b0:	83080e42 	movwhi	r0, #36418	; 0x8e42
 4b4:	00018e02 	andeq	r8, r1, r2, lsl #28
 4b8:	0000000c 	andeq	r0, r0, ip
 4bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4c0:	7c020001 	stcvc	0, cr0, [r2], {1}
 4c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4c8:	00000018 	andeq	r0, r0, r8, lsl r0
 4cc:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 4d0:	0000901c 	andeq	r9, r0, ip, lsl r0
 4d4:	000000d4 	ldrdeq	r0, [r0], -r4
 4d8:	83100e42 	tsthi	r0, #1056	; 0x420
 4dc:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 4e0:	00018e02 	andeq	r8, r1, r2, lsl #28
 4e4:	00000014 	andeq	r0, r0, r4, lsl r0
 4e8:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 4ec:	000090f0 	strdeq	r9, [r0], -r0
 4f0:	00000038 	andeq	r0, r0, r8, lsr r0
 4f4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 4f8:	00018e02 	andeq	r8, r1, r2, lsl #28
 4fc:	00000014 	andeq	r0, r0, r4, lsl r0
 500:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 504:	00009128 	andeq	r9, r0, r8, lsr #2
 508:	00000038 	andeq	r0, r0, r8, lsr r0
 50c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 510:	00018e02 	andeq	r8, r1, r2, lsl #28
 514:	00000018 	andeq	r0, r0, r8, lsl r0
 518:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 51c:	00009160 	andeq	r9, r0, r0, ror #2
 520:	000000cc 	andeq	r0, r0, ip, asr #1
 524:	83100e42 	tsthi	r0, #1056	; 0x420
 528:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 52c:	00018e02 	andeq	r8, r1, r2, lsl #28
 530:	00000014 	andeq	r0, r0, r4, lsl r0
 534:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 538:	0000922c 	andeq	r9, r0, ip, lsr #4
 53c:	0000004c 	andeq	r0, r0, ip, asr #32
 540:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 544:	00018e02 	andeq	r8, r1, r2, lsl #28
 548:	00000014 	andeq	r0, r0, r4, lsl r0
 54c:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 550:	00009278 	andeq	r9, r0, r8, ror r2
 554:	00000078 	andeq	r0, r0, r8, ror r0
 558:	83080e42 	movwhi	r0, #36418	; 0x8e42
 55c:	00018e02 	andeq	r8, r1, r2, lsl #28
 560:	00000018 	andeq	r0, r0, r8, lsl r0
 564:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 568:	000092f0 	strdeq	r9, [r0], -r0
 56c:	000000d8 	ldrdeq	r0, [r0], -r8
 570:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 574:	86038504 	strhi	r8, [r3], -r4, lsl #10
 578:	00018e02 	andeq	r8, r1, r2, lsl #28
 57c:	0000000c 	andeq	r0, r0, ip
 580:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 584:	7c020001 	stcvc	0, cr0, [r2], {1}
 588:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 58c:	00000014 	andeq	r0, r0, r4, lsl r0
 590:	0000057c 	andeq	r0, r0, ip, ror r5
 594:	000093c8 	andeq	r9, r0, r8, asr #7
 598:	00000014 	andeq	r0, r0, r4, lsl r0
 59c:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 5a0:	00018e02 	andeq	r8, r1, r2, lsl #28
