
3-gets-timeout-test.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e3a0d302 	mov	sp, #134217728	; 0x8000000
    8004:	e3a0b000 	mov	fp, #0
    8008:	eb00033f 	bl	8d0c <_cstart>
    800c:	eb000356 	bl	8d6c <rpi_reboot>

00008010 <notmain>:
// test of gets_timeout.   enter a bunch of text and hit return (so pi-cat sends back)
// or timeout.
#include "rpi.h"
#include "sw-uart.h"

void notmain(void) {
    8010:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8014:	e24dde41 	sub	sp, sp, #1040	; 0x410
    8018:	e24dd008 	sub	sp, sp, #8
    uart_init();
    801c:	eb0003aa 	bl	8ecc <uart_init>
    enable_cache();
    8020:	eb000327 	bl	8cc4 <enable_cache>

    // use pin 20 for tx, 21 for rx
    sw_uart_t u = sw_uart_init(20,21, 115200);
    8024:	e59f30d8 	ldr	r3, [pc, #216]	; 8104 <notmain+0xf4>
    8028:	e58d3000 	str	r3, [sp]
    802c:	e28d0b01 	add	r0, sp, #1024	; 0x400
    8030:	e280000c 	add	r0, r0, #12
    8034:	e3a01014 	mov	r1, #20
    8038:	e3a02015 	mov	r2, #21
    803c:	e59f30c4 	ldr	r3, [pc, #196]	; 8108 <notmain+0xf8>
    8040:	eb000141 	bl	854c <sw_uart_init_helper>

    for(int i = 0; i < 4; i++) {
    8044:	e3a04000 	mov	r4, #0
        unsigned timeout = 3;
        printk("%d: enter multiple lines, will stop reading when idle for=%dsec):\n", 
    8048:	e59f80bc 	ldr	r8, [pc, #188]	; 810c <notmain+0xfc>
                        i,timeout);

        char buf[1024];
        // will read until the line is idle for a timeout period.
        int res = sw_uart_gets_timeout(&u, buf, sizeof buf, timeout*1000*1000);
    804c:	e28d600c 	add	r6, sp, #12
    8050:	e59f70b8 	ldr	r7, [pc, #184]	; 8110 <notmain+0x100>
            printk("timeout: res=%d\n", res);
        else {
            assert(strlen(buf) == res);
            // kill newline.
            buf[res] = 0;
            printk("SW-UART: got nbytes=%d, string <%s>\n", res, buf);
    8054:	e59fa0b8 	ldr	sl, [pc, #184]	; 8114 <notmain+0x104>
        char buf[1024];
        // will read until the line is idle for a timeout period.
        int res = sw_uart_gets_timeout(&u, buf, sizeof buf, timeout*1000*1000);

        if(!res)
            printk("timeout: res=%d\n", res);
    8058:	e59f90b8 	ldr	r9, [pc, #184]	; 8118 <notmain+0x108>
    enable_cache();

    // use pin 20 for tx, 21 for rx
    sw_uart_t u = sw_uart_init(20,21, 115200);

    for(int i = 0; i < 4; i++) {
    805c:	ea000025 	b	80f8 <notmain+0xe8>
        unsigned timeout = 3;
        printk("%d: enter multiple lines, will stop reading when idle for=%dsec):\n", 
    8060:	e1a00008 	mov	r0, r8
    8064:	e1a01004 	mov	r1, r4
    8068:	e3a02003 	mov	r2, #3
    806c:	eb0001ad 	bl	8728 <printk>
                        i,timeout);

        char buf[1024];
        // will read until the line is idle for a timeout period.
        int res = sw_uart_gets_timeout(&u, buf, sizeof buf, timeout*1000*1000);
    8070:	e28d0b01 	add	r0, sp, #1024	; 0x400
    8074:	e280000c 	add	r0, r0, #12
    8078:	e1a01006 	mov	r1, r6
    807c:	e3a02b01 	mov	r2, #1024	; 0x400
    8080:	e1a03007 	mov	r3, r7
    8084:	eb000112 	bl	84d4 <sw_uart_gets_timeout>

        if(!res)
    8088:	e2505000 	subs	r5, r0, #0
    808c:	1a000003 	bne	80a0 <notmain+0x90>
            printk("timeout: res=%d\n", res);
    8090:	e1a00009 	mov	r0, r9
    8094:	e1a01005 	mov	r1, r5
    8098:	eb0001a2 	bl	8728 <printk>
    809c:	ea000012 	b	80ec <notmain+0xdc>
        else {
            assert(strlen(buf) == res);
    80a0:	e1a00006 	mov	r0, r6
    80a4:	eb0001c2 	bl	87b4 <strlen>
    80a8:	e1500005 	cmp	r0, r5
    80ac:	0a000005 	beq	80c8 <notmain+0xb8>
    80b0:	e59f0064 	ldr	r0, [pc, #100]	; 811c <notmain+0x10c>
    80b4:	e59f1064 	ldr	r1, [pc, #100]	; 8120 <notmain+0x110>
    80b8:	e59f2064 	ldr	r2, [pc, #100]	; 8124 <notmain+0x114>
    80bc:	e3a03019 	mov	r3, #25
    80c0:	eb000198 	bl	8728 <printk>
    80c4:	eb000306 	bl	8ce4 <clean_reboot>
            // kill newline.
            buf[res] = 0;
    80c8:	e28d2e41 	add	r2, sp, #1040	; 0x410
    80cc:	e2822008 	add	r2, r2, #8
    80d0:	e0823005 	add	r3, r2, r5
    80d4:	e3a02000 	mov	r2, #0
    80d8:	e543240c 	strb	r2, [r3, #-1036]	; 0x40c
            printk("SW-UART: got nbytes=%d, string <%s>\n", res, buf);
    80dc:	e1a0000a 	mov	r0, sl
    80e0:	e1a01005 	mov	r1, r5
    80e4:	e1a02006 	mov	r2, r6
    80e8:	eb00018e 	bl	8728 <printk>
        }
        delay_ms(2000);
    80ec:	e3a00e7d 	mov	r0, #2000	; 0x7d0
    80f0:	eb00034b 	bl	8e24 <delay_ms>
    enable_cache();

    // use pin 20 for tx, 21 for rx
    sw_uart_t u = sw_uart_init(20,21, 115200);

    for(int i = 0; i < 4; i++) {
    80f4:	e2844001 	add	r4, r4, #1
    80f8:	e3540003 	cmp	r4, #3
    80fc:	daffffd7 	ble	8060 <notmain+0x50>
            buf[res] = 0;
            printk("SW-UART: got nbytes=%d, string <%s>\n", res, buf);
        }
        delay_ms(2000);
    }
    clean_reboot();
    8100:	eb0002f7 	bl	8ce4 <clean_reboot>
    8104:	000017bc 			; <UNDEFINED> instruction: 0x000017bc
    8108:	0001c200 	andeq	ip, r1, r0, lsl #4
    810c:	00009444 	andeq	r9, r0, r4, asr #8
    8110:	002dc6c0 	eoreq	ip, sp, r0, asr #13
    8114:	000094d8 	ldrdeq	r9, [r0], -r8
    8118:	00009488 	andeq	r9, r0, r8, lsl #9
    811c:	0000949c 	muleq	r0, ip, r4
    8120:	000094c0 	andeq	r9, r0, r0, asr #9
    8124:	0000943c 	andeq	r9, r0, ip, lsr r4

00008128 <sw_uart_putc>:
 */ 
#include "rpi.h"
#include "sw-uart.h"
#include "cycle-util.h"

void sw_uart_putc(sw_uart_t *uart, unsigned char c) {
    8128:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    812c:	e1a07001 	mov	r7, r1
    // use local variables to minimize any loads or stores
    int tx = uart->tx;
    8130:	e5d06000 	ldrb	r6, [r0]
    uint32_t n = uart->cycle_per_bit,
    8134:	e5905008 	ldr	r5, [r0, #8]
             u = n,
             s = cycle_cnt_read();
    8138:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
	
	// get start conditions
	unsigned end = n;
	unsigned start = cycle_cnt_read();
    813c:	ee1f4f3c 	mrc	15, 0, r4, cr15, cr12, {1}
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8140:	e1a00006 	mov	r0, r6
    8144:	e3a01000 	mov	r1, #0
    8148:	eb000444 	bl	9260 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    814c:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8150:	e0643003 	rsb	r3, r4, r3
    8154:	e1550003 	cmp	r5, r3
    8158:	8afffffb 	bhi	814c <sw_uart_putc+0x24>

	// lower line (line idling)
	write_cyc_until(tx, 0, start, end);
	end += n; 
    815c:	e1a08085 	lsl	r8, r5, #1
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8160:	e1a00006 	mov	r0, r6
    8164:	e2071001 	and	r1, r7, #1
    8168:	eb00043c 	bl	9260 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    816c:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8170:	e0643003 	rsb	r3, r4, r3
    8174:	e1580003 	cmp	r8, r3
    8178:	8afffffb 	bhi	816c <sw_uart_putc+0x44>
	write_cyc_until(tx, c & 1, start, end);
	end += n; 
    817c:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8180:	e1a00006 	mov	r0, r6
    8184:	e2071002 	and	r1, r7, #2
    8188:	eb000434 	bl	9260 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    818c:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8190:	e0643003 	rsb	r3, r4, r3
    8194:	e1580003 	cmp	r8, r3
    8198:	8afffffb 	bhi	818c <sw_uart_putc+0x64>
	write_cyc_until(tx, c & 2, start, end);
	end += n; 
    819c:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    81a0:	e1a00006 	mov	r0, r6
    81a4:	e2071004 	and	r1, r7, #4
    81a8:	eb00042c 	bl	9260 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    81ac:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    81b0:	e0643003 	rsb	r3, r4, r3
    81b4:	e1580003 	cmp	r8, r3
    81b8:	8afffffb 	bhi	81ac <sw_uart_putc+0x84>
	write_cyc_until(tx, c & 4, start, end);
	end += n; 
    81bc:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    81c0:	e1a00006 	mov	r0, r6
    81c4:	e2071008 	and	r1, r7, #8
    81c8:	eb000424 	bl	9260 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    81cc:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    81d0:	e0643003 	rsb	r3, r4, r3
    81d4:	e1580003 	cmp	r8, r3
    81d8:	8afffffb 	bhi	81cc <sw_uart_putc+0xa4>
	write_cyc_until(tx, c & 8, start, end);
	end += n; 
    81dc:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    81e0:	e1a00006 	mov	r0, r6
    81e4:	e2071010 	and	r1, r7, #16
    81e8:	eb00041c 	bl	9260 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    81ec:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    81f0:	e0643003 	rsb	r3, r4, r3
    81f4:	e1580003 	cmp	r8, r3
    81f8:	8afffffb 	bhi	81ec <sw_uart_putc+0xc4>
	write_cyc_until(tx, c & 16, start, end);
	end += n; 
    81fc:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8200:	e1a00006 	mov	r0, r6
    8204:	e2071020 	and	r1, r7, #32
    8208:	eb000414 	bl	9260 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    820c:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8210:	e0643003 	rsb	r3, r4, r3
    8214:	e1580003 	cmp	r8, r3
    8218:	8afffffb 	bhi	820c <sw_uart_putc+0xe4>
	write_cyc_until(tx, c & 32, start, end);
	end += n; 
    821c:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8220:	e1a00006 	mov	r0, r6
    8224:	e2071040 	and	r1, r7, #64	; 0x40
    8228:	eb00040c 	bl	9260 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    822c:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8230:	e0643003 	rsb	r3, r4, r3
    8234:	e1580003 	cmp	r8, r3
    8238:	8afffffb 	bhi	822c <sw_uart_putc+0x104>
	write_cyc_until(tx, c & 64, start, end);
	end += n; 
    823c:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8240:	e1a00006 	mov	r0, r6
    8244:	e2071080 	and	r1, r7, #128	; 0x80
    8248:	eb000404 	bl	9260 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    824c:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8250:	e0643003 	rsb	r3, r4, r3
    8254:	e1580003 	cmp	r8, r3
    8258:	8afffffb 	bhi	824c <sw_uart_putc+0x124>
	write_cyc_until(tx, c & 128, start, end);
	end += n; 
    825c:	e0885005 	add	r5, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    8260:	e1a00006 	mov	r0, r6
    8264:	e3a01001 	mov	r1, #1
    8268:	eb0003fc 	bl	9260 <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    826c:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8270:	e0643003 	rsb	r3, r4, r3
    8274:	e1550003 	cmp	r5, r3
    8278:	8afffffb 	bhi	826c <sw_uart_putc+0x144>
	write_cyc_until(tx, 1, start, end);
}
    827c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008280 <sw_uart_getc_timeout>:
}

// do this second: you can type in pi-cat to send stuff.
//      EASY BUG: if you are reading input, but you do not get here in 
//      time it will disappear.
int sw_uart_getc_timeout(sw_uart_t *uart, int timeout_usec) {
    8280:	e92d43f8 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
    8284:	e1a09000 	mov	r9, r0
   int rx = uart->rx;
    8288:	e5d07001 	ldrb	r7, [r0, #1]
    828c:	e1a05007 	mov	r5, r7

    // get start bit: timeout_usec=0 implies you return right away.
    while(!wait_until_usec(rx, 0, timeout_usec))
    8290:	e1a06001 	mov	r6, r1
	write_cyc_until(tx, 1, start, end);
}

// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    8294:	eb0002cd 	bl	8dd0 <timer_get_usec_raw>
    8298:	e1a04000 	mov	r4, r0
    while(1) {
        if(gpio_read(rx) == v)
    829c:	e1a00005 	mov	r0, r5
    82a0:	eb0003db 	bl	9214 <gpio_read>
    82a4:	e3500000 	cmp	r0, #0
    82a8:	0a000005 	beq	82c4 <sw_uart_getc_timeout+0x44>
            return 1;
        if(timer_get_usec_raw() - start > timeout_usec)
    82ac:	eb0002c7 	bl	8dd0 <timer_get_usec_raw>
    82b0:	e0640000 	rsb	r0, r4, r0
    82b4:	e1560000 	cmp	r6, r0
    82b8:	2afffff7 	bcs	829c <sw_uart_getc_timeout+0x1c>
            return 0;
    82bc:	e3a03000 	mov	r3, #0
    82c0:	ea000000 	b	82c8 <sw_uart_getc_timeout+0x48>
// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    while(1) {
        if(gpio_read(rx) == v)
            return 1;
    82c4:	e3a03001 	mov	r3, #1
//      time it will disappear.
int sw_uart_getc_timeout(sw_uart_t *uart, int timeout_usec) {
   int rx = uart->rx;

    // get start bit: timeout_usec=0 implies you return right away.
    while(!wait_until_usec(rx, 0, timeout_usec))
    82c8:	e3530000 	cmp	r3, #0
    82cc:	0a000059 	beq	8438 <sw_uart_getc_timeout+0x1b8>
        return -1;

    // do this first so we have a tighter bound (maybe)
    unsigned s = cycle_cnt_read();  // subtract off slop?
    82d0:	ee1f8f3c 	mrc	15, 0, r8, cr15, cr12, {1}

    // store these in locals to minimize load stores later.
    uint32_t u = uart->cycle_per_bit;
    82d4:	e5994008 	ldr	r4, [r9, #8]
    unsigned n = u/2;
    unsigned c = 0;

    // wait one period + 1/2 to get in the middle of the next read.
    delay_ncycles(s, n + 1*u);
    82d8:	e08420a4 	add	r2, r4, r4, lsr #1
    82dc:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    82e0:	e0683003 	rsb	r3, r8, r3
    82e4:	e1520003 	cmp	r2, r3
    82e8:	8afffffb 	bhi	82dc <sw_uart_getc_timeout+0x5c>
	
	s += u;
    82ec:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx);
    82f0:	e1a00007 	mov	r0, r7
    82f4:	eb0003c6 	bl	9214 <gpio_read>
    82f8:	e1a09750 	asr	r9, r0, r7
    82fc:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8300:	e0683003 	rsb	r3, r8, r3
    8304:	e1540003 	cmp	r4, r3
    8308:	8afffffb 	bhi	82fc <sw_uart_getc_timeout+0x7c>
    delay_ncycles(s, u);
	s += u; 
    830c:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 1;
    8310:	e1a00007 	mov	r0, r7
    8314:	eb0003be 	bl	9214 <gpio_read>
    8318:	e1a00750 	asr	r0, r0, r7
    831c:	e1899080 	orr	r9, r9, r0, lsl #1
    8320:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8324:	e0683003 	rsb	r3, r8, r3
    8328:	e1540003 	cmp	r4, r3
    832c:	8afffffb 	bhi	8320 <sw_uart_getc_timeout+0xa0>
    delay_ncycles(s, u);
	s += u;
    8330:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 2;
    8334:	e1a00007 	mov	r0, r7
    8338:	eb0003b5 	bl	9214 <gpio_read>
    833c:	e1a00750 	asr	r0, r0, r7
    8340:	e1899100 	orr	r9, r9, r0, lsl #2
    8344:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8348:	e0683003 	rsb	r3, r8, r3
    834c:	e1540003 	cmp	r4, r3
    8350:	8afffffb 	bhi	8344 <sw_uart_getc_timeout+0xc4>
    delay_ncycles(s, u);
	s += u;
    8354:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 3;
    8358:	e1a00007 	mov	r0, r7
    835c:	eb0003ac 	bl	9214 <gpio_read>
    8360:	e1a00750 	asr	r0, r0, r7
    8364:	e1899180 	orr	r9, r9, r0, lsl #3
    8368:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    836c:	e0683003 	rsb	r3, r8, r3
    8370:	e1540003 	cmp	r4, r3
    8374:	8afffffb 	bhi	8368 <sw_uart_getc_timeout+0xe8>
    delay_ncycles(s, u);
	s += u;
    8378:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 4;
    837c:	e1a00007 	mov	r0, r7
    8380:	eb0003a3 	bl	9214 <gpio_read>
    8384:	e1a00750 	asr	r0, r0, r7
    8388:	e1899200 	orr	r9, r9, r0, lsl #4
    838c:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    8390:	e0683003 	rsb	r3, r8, r3
    8394:	e1540003 	cmp	r4, r3
    8398:	8afffffb 	bhi	838c <sw_uart_getc_timeout+0x10c>
    delay_ncycles(s, u);
	s += u;
    839c:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 5;
    83a0:	e1a00007 	mov	r0, r7
    83a4:	eb00039a 	bl	9214 <gpio_read>
    83a8:	e1a00750 	asr	r0, r0, r7
    83ac:	e1899280 	orr	r9, r9, r0, lsl #5
    83b0:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    83b4:	e0683003 	rsb	r3, r8, r3
    83b8:	e1540003 	cmp	r4, r3
    83bc:	8afffffb 	bhi	83b0 <sw_uart_getc_timeout+0x130>
    delay_ncycles(s, u);
	s += u;
    83c0:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 6;
    83c4:	e1a00007 	mov	r0, r7
    83c8:	eb000391 	bl	9214 <gpio_read>
    83cc:	e1a00750 	asr	r0, r0, r7
    83d0:	e1899300 	orr	r9, r9, r0, lsl #6
    83d4:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    83d8:	e0683003 	rsb	r3, r8, r3
    83dc:	e1540003 	cmp	r4, r3
    83e0:	8afffffb 	bhi	83d4 <sw_uart_getc_timeout+0x154>
    delay_ncycles(s, u);
	s += u;
    c |= (gpio_read(rx) >> rx) << 7;
    83e4:	e1a00007 	mov	r0, r7
    83e8:	eb000389 	bl	9214 <gpio_read>
    83ec:	e1a00750 	asr	r0, r0, r7
    83f0:	e1899380 	orr	r9, r9, r0, lsl #7
	write_cyc_until(tx, 1, start, end);
}

// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    83f4:	eb000275 	bl	8dd0 <timer_get_usec_raw>
    83f8:	e1a04000 	mov	r4, r0
    while(1) {
        if(gpio_read(rx) == v)
    83fc:	e1a00005 	mov	r0, r5
    8400:	eb000383 	bl	9214 <gpio_read>
    8404:	e3500000 	cmp	r0, #0
    8408:	0a000005 	beq	8424 <sw_uart_getc_timeout+0x1a4>
            return 1;
        if(timer_get_usec_raw() - start > timeout_usec)
    840c:	eb00026f 	bl	8dd0 <timer_get_usec_raw>
    8410:	e0640000 	rsb	r0, r4, r0
    8414:	e1560000 	cmp	r6, r0
    8418:	2afffff7 	bcs	83fc <sw_uart_getc_timeout+0x17c>
            return 0;
    841c:	e3a03000 	mov	r3, #0
    8420:	ea000000 	b	8428 <sw_uart_getc_timeout+0x1a8>
// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    while(1) {
        if(gpio_read(rx) == v)
            return 1;
    8424:	e3a03001 	mov	r3, #1
    c |= (gpio_read(rx) >> rx) << 7;
    //delay_ncycles(s, u);
	//s += u;
    
	// make sure you wait for a stop bit: otherwise the next read may fail.
    while(!wait_until_usec(rx, 0, timeout_usec))
    8428:	e3530000 	cmp	r3, #0
    842c:	0a000003 	beq	8440 <sw_uart_getc_timeout+0x1c0>
        return -1;
	// delay_ncycles(s, n);

    return (int)c;
    8430:	e1a00009 	mov	r0, r9
    8434:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
int sw_uart_getc_timeout(sw_uart_t *uart, int timeout_usec) {
   int rx = uart->rx;

    // get start bit: timeout_usec=0 implies you return right away.
    while(!wait_until_usec(rx, 0, timeout_usec))
        return -1;
    8438:	e3e00000 	mvn	r0, #0
    843c:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
    //delay_ncycles(s, u);
	//s += u;
    
	// make sure you wait for a stop bit: otherwise the next read may fail.
    while(!wait_until_usec(rx, 0, timeout_usec))
        return -1;
    8440:	e3e00000 	mvn	r0, #0
	// delay_ncycles(s, n);

    return (int)c;
}
    8444:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}

00008448 <sw_uart_gets_until>:


// read characters using <sw_uart_getc()> until:
//       <sw_uart_getc() == <end>>
// returns -nbytes read if timeout (could be 0).
int sw_uart_gets_until(sw_uart_t *u, uint8_t *buf, uint32_t nbytes, uint8_t end, uint32_t usec_timeout) {
    8448:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    844c:	e1a08000 	mov	r8, r0
    8450:	e1a06001 	mov	r6, r1
    8454:	e1a09003 	mov	r9, r3
    8458:	e59da020 	ldr	sl, [sp, #32]
    assert(nbytes>0);
    845c:	e3520000 	cmp	r2, #0
    8460:	1a000005 	bne	847c <sw_uart_gets_until+0x34>
    8464:	e59f005c 	ldr	r0, [pc, #92]	; 84c8 <sw_uart_gets_until+0x80>
    8468:	e59f105c 	ldr	r1, [pc, #92]	; 84cc <sw_uart_gets_until+0x84>
    846c:	e59f205c 	ldr	r2, [pc, #92]	; 84d0 <sw_uart_gets_until+0x88>
    8470:	e3a03071 	mov	r3, #113	; 0x71
    8474:	eb0000ab 	bl	8728 <printk>
    8478:	eb000219 	bl	8ce4 <clean_reboot>
    buf[0] = 0;
    847c:	e3a04000 	mov	r4, #0
    8480:	e5c14000 	strb	r4, [r1]

    int i;
	uint8_t char_in;
    for(i = 0; i < nbytes-1; i++) {
    8484:	e2427001 	sub	r7, r2, #1
    8488:	ea000007 	b	84ac <sw_uart_gets_until+0x64>
        if((char_in = (uint8_t)sw_uart_getc_timeout(u, usec_timeout)) != end) {
    848c:	e1a00008 	mov	r0, r8
    8490:	e1a0100a 	mov	r1, sl
    8494:	ebffff79 	bl	8280 <sw_uart_getc_timeout>
    8498:	e6ef0070 	uxtb	r0, r0
    849c:	e1500009 	cmp	r0, r9
    84a0:	0a000004 	beq	84b8 <sw_uart_gets_until+0x70>
			buf[i] = char_in;
    84a4:	e7c60005 	strb	r0, [r6, r5]
    assert(nbytes>0);
    buf[0] = 0;

    int i;
	uint8_t char_in;
    for(i = 0; i < nbytes-1; i++) {
    84a8:	e2844001 	add	r4, r4, #1
    84ac:	e1a05004 	mov	r5, r4
    84b0:	e1540007 	cmp	r4, r7
    84b4:	3afffff4 	bcc	848c <sw_uart_gets_until+0x44>
			buf[i] = char_in;
		} else {
			break;
		}
    }
    buf[i] = 0;
    84b8:	e3a03000 	mov	r3, #0
    84bc:	e7c63005 	strb	r3, [r6, r5]
    return i;
}
    84c0:	e1a00004 	mov	r0, r4
    84c4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    84c8:	00009578 	andeq	r9, r0, r8, ror r5
    84cc:	00009594 	muleq	r0, r4, r5
    84d0:	00009500 	andeq	r9, r0, r0, lsl #10

000084d4 <sw_uart_gets_timeout>:

// read characters using <sw_uart_getc()> until:
//      we do not receive any characters for <timeout> usec.
// make sure to 0 terminate!
int sw_uart_gets_timeout(sw_uart_t *u, uint8_t *buf, 
                    uint32_t nbytes, uint32_t usec_timeout) {
    84d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    84d8:	e1a07000 	mov	r7, r0
    84dc:	e1a05001 	mov	r5, r1
    84e0:	e1a08003 	mov	r8, r3

    assert(nbytes>0);
    84e4:	e3520000 	cmp	r2, #0
    84e8:	1a000005 	bne	8504 <sw_uart_gets_timeout+0x30>
    84ec:	e59f004c 	ldr	r0, [pc, #76]	; 8540 <sw_uart_gets_timeout+0x6c>
    84f0:	e59f104c 	ldr	r1, [pc, #76]	; 8544 <sw_uart_gets_timeout+0x70>
    84f4:	e59f204c 	ldr	r2, [pc, #76]	; 8548 <sw_uart_gets_timeout+0x74>
    84f8:	e3a03087 	mov	r3, #135	; 0x87
    84fc:	eb000089 	bl	8728 <printk>
    8500:	eb0001f7 	bl	8ce4 <clean_reboot>
    buf[0] = 0;
    8504:	e3a04000 	mov	r4, #0
    8508:	e5c14000 	strb	r4, [r1]

    int i;
    for(i = 0; i < nbytes-1; i++) {
    850c:	e2426001 	sub	r6, r2, #1
    8510:	ea000004 	b	8528 <sw_uart_gets_timeout+0x54>
        buf[i] = (uint8_t) sw_uart_getc_timeout(u, usec_timeout);
    8514:	e1a00007 	mov	r0, r7
    8518:	e1a01008 	mov	r1, r8
    851c:	ebffff57 	bl	8280 <sw_uart_getc_timeout>
    8520:	e7c50004 	strb	r0, [r5, r4]

    assert(nbytes>0);
    buf[0] = 0;

    int i;
    for(i = 0; i < nbytes-1; i++) {
    8524:	e2844001 	add	r4, r4, #1
    8528:	e1540006 	cmp	r4, r6
    852c:	3afffff8 	bcc	8514 <sw_uart_gets_timeout+0x40>
        buf[i] = (uint8_t) sw_uart_getc_timeout(u, usec_timeout);
    }
    buf[i] = 0;
    8530:	e3a03000 	mov	r3, #0
    8534:	e7c53004 	strb	r3, [r5, r4]
    return i;
}
    8538:	e1a00004 	mov	r0, r4
    853c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8540:	00009578 	andeq	r9, r0, r8, ror r5
    8544:	00009594 	muleq	r0, r4, r5
    8548:	00009514 	andeq	r9, r0, r4, lsl r5

0000854c <sw_uart_init_helper>:
/**************************************************************************
 * this code is implemented for you
 */

sw_uart_t 
sw_uart_init_helper(uint8_t tx, uint8_t rx, uint32_t baud, uint32_t cyc_per_bit) {
    854c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8550:	e1a04000 	mov	r4, r0
    8554:	e1a08001 	mov	r8, r1
    8558:	e1a07002 	mov	r7, r2
    855c:	e1a05003 	mov	r5, r3
    8560:	e59d6018 	ldr	r6, [sp, #24]
    // maybe enable the cache?  don't think will work otherwise.
    gpio_set_output(tx);
    8564:	e1a00001 	mov	r0, r1
    8568:	eb0002a5 	bl	9004 <gpio_set_output>
    gpio_set_input(rx);
    856c:	e1a00007 	mov	r0, r7
    8570:	eb0002f4 	bl	9148 <gpio_set_input>
    cycle_cnt_init();       
    8574:	e3a03001 	mov	r3, #1
    8578:	ee0f3f1c 	mcr	15, 0, r3, cr15, cr12, {0}


    // make sure it makes sense.
    unsigned mhz = 700 * 1000 * 1000;
    unsigned derived = cyc_per_bit * baud;
    857c:	e0020695 	mul	r2, r5, r6
    assert((mhz - baud) <= derived && derived <= (mhz + baud));
    8580:	e59f3064 	ldr	r3, [pc, #100]	; 85ec <sw_uart_init_helper+0xa0>
    8584:	e0653003 	rsb	r3, r5, r3
    8588:	e1530002 	cmp	r3, r2
    858c:	8a000005 	bhi	85a8 <sw_uart_init_helper+0x5c>
    8590:	e59f3054 	ldr	r3, [pc, #84]	; 85ec <sw_uart_init_helper+0xa0>
    8594:	e0853003 	add	r3, r5, r3
    8598:	e1530002 	cmp	r3, r2
    859c:	2a000003 	bcs	85b0 <sw_uart_init_helper+0x64>
    85a0:	e3a03000 	mov	r3, #0
    85a4:	ea000002 	b	85b4 <sw_uart_init_helper+0x68>
    85a8:	e3a03000 	mov	r3, #0
    85ac:	ea000000 	b	85b4 <sw_uart_init_helper+0x68>
    85b0:	e3a03001 	mov	r3, #1
    85b4:	e3530000 	cmp	r3, #0
    85b8:	1a000005 	bne	85d4 <sw_uart_init_helper+0x88>
    85bc:	e59f002c 	ldr	r0, [pc, #44]	; 85f0 <sw_uart_init_helper+0xa4>
    85c0:	e59f102c 	ldr	r1, [pc, #44]	; 85f4 <sw_uart_init_helper+0xa8>
    85c4:	e59f202c 	ldr	r2, [pc, #44]	; 85f8 <sw_uart_init_helper+0xac>
    85c8:	e3a030a1 	mov	r3, #161	; 0xa1
    85cc:	eb000055 	bl	8728 <printk>
    85d0:	eb0001c3 	bl	8ce4 <clean_reboot>
    // panic("cyc_per_bit = %d * baud = %d\n", cyc_per_bit, cyc_per_bit * baud);

    return (sw_uart_t) { 
    85d4:	e5c48000 	strb	r8, [r4]
    85d8:	e5c47001 	strb	r7, [r4, #1]
    85dc:	e5845004 	str	r5, [r4, #4]
    85e0:	e5846008 	str	r6, [r4, #8]
            .tx = tx, 
            .rx = rx, 
            .baud = baud, 
            .cycle_per_bit = cyc_per_bit 
    };
}
    85e4:	e1a00004 	mov	r0, r4
    85e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    85ec:	29b92700 	ldmibcs	r9!, {r8, r9, sl, sp}
    85f0:	000095a0 	andeq	r9, r0, r0, lsr #11
    85f4:	00009594 	muleq	r0, r4, r5
    85f8:	0000952c 	andeq	r9, r0, ip, lsr #10

000085fc <sw_uart_getc>:

// blocking read.
int sw_uart_getc(sw_uart_t *uart) {
    85fc:	e92d4008 	push	{r3, lr}
    int res = sw_uart_getc_timeout(uart, ~0);
    8600:	e3e01000 	mvn	r1, #0
    8604:	ebffff1d 	bl	8280 <sw_uart_getc_timeout>
    if(res < 0)
    8608:	e3500000 	cmp	r0, #0
    860c:	a8bd8008 	popge	{r3, pc}
        panic("impossible: have an infinite timeout!\n");
    8610:	e59f0010 	ldr	r0, [pc, #16]	; 8628 <sw_uart_getc+0x2c>
    8614:	e59f1010 	ldr	r1, [pc, #16]	; 862c <sw_uart_getc+0x30>
    8618:	e59f2010 	ldr	r2, [pc, #16]	; 8630 <sw_uart_getc+0x34>
    861c:	e3a030b0 	mov	r3, #176	; 0xb0
    8620:	eb000040 	bl	8728 <printk>
    8624:	eb0001ae 	bl	8ce4 <clean_reboot>
    8628:	000095e4 	andeq	r9, r0, r4, ror #11
    862c:	00009594 	muleq	r0, r4, r5
    8630:	00009540 	andeq	r9, r0, r0, asr #10

00008634 <sw_uart_putk>:
    return res;
}

void sw_uart_putk(sw_uart_t *uart, const char *msg) {
    8634:	e92d4038 	push	{r3, r4, r5, lr}
    8638:	e1a05000 	mov	r5, r0
    863c:	e1a04001 	mov	r4, r1
    for(; *msg; msg++)
    8640:	ea000002 	b	8650 <sw_uart_putk+0x1c>
        sw_uart_putc(uart, *msg);
    8644:	e1a00005 	mov	r0, r5
    8648:	ebfffeb6 	bl	8128 <sw_uart_putc>
        panic("impossible: have an infinite timeout!\n");
    return res;
}

void sw_uart_putk(sw_uart_t *uart, const char *msg) {
    for(; *msg; msg++)
    864c:	e2844001 	add	r4, r4, #1
    8650:	e5d41000 	ldrb	r1, [r4]
    8654:	e3510000 	cmp	r1, #0
    8658:	1afffff9 	bne	8644 <sw_uart_putk+0x10>
        sw_uart_putc(uart, *msg);
}
    865c:	e8bd8038 	pop	{r3, r4, r5, pc}

00008660 <sw_uart_printk>:

// don't pollute the rest of the code with all the stuff in the 
// <stdarg.h> header.
#include <stdarg.h>
#include "libc/va-printk.h"
int sw_uart_printk(sw_uart_t *uart, const char *fmt, ...) {
    8660:	e92d000e 	push	{r1, r2, r3}
    8664:	e92d4030 	push	{r4, r5, lr}
    8668:	e24dde1d 	sub	sp, sp, #464	; 0x1d0
    866c:	e1a05000 	mov	r5, r0
    char buf[460];

    va_list args;
    va_start(args, fmt);
    8670:	e28d3e1e 	add	r3, sp, #480	; 0x1e0
    8674:	e58d3000 	str	r3, [sp]
        int sz = va_printk(buf, sizeof buf, fmt, args);
    8678:	e28d0004 	add	r0, sp, #4
    867c:	e3a01f73 	mov	r1, #460	; 0x1cc
    8680:	e59d21dc 	ldr	r2, [sp, #476]	; 0x1dc
    8684:	eb0000ec 	bl	8a3c <va_printk>
    8688:	e1a04000 	mov	r4, r0
    va_end(args);
    assert(sz < sizeof buf-1);
    868c:	e59f303c 	ldr	r3, [pc, #60]	; 86d0 <sw_uart_printk+0x70>
    8690:	e1500003 	cmp	r0, r3
    8694:	9a000005 	bls	86b0 <sw_uart_printk+0x50>
    8698:	e59f0034 	ldr	r0, [pc, #52]	; 86d4 <sw_uart_printk+0x74>
    869c:	e59f1034 	ldr	r1, [pc, #52]	; 86d8 <sw_uart_printk+0x78>
    86a0:	e59f2034 	ldr	r2, [pc, #52]	; 86dc <sw_uart_printk+0x7c>
    86a4:	e3a030c4 	mov	r3, #196	; 0xc4
    86a8:	eb00001e 	bl	8728 <printk>
    86ac:	eb00018c 	bl	8ce4 <clean_reboot>
    sw_uart_putk(uart,buf);
    86b0:	e1a00005 	mov	r0, r5
    86b4:	e28d1004 	add	r1, sp, #4
    86b8:	ebffffdd 	bl	8634 <sw_uart_putk>
    return sz;
}
    86bc:	e1a00004 	mov	r0, r4
    86c0:	e28dde1d 	add	sp, sp, #464	; 0x1d0
    86c4:	e8bd4030 	pop	{r4, r5, lr}
    86c8:	e28dd00c 	add	sp, sp, #12
    86cc:	e12fff1e 	bx	lr
    86d0:	000001ca 	andeq	r0, r0, sl, asr #3
    86d4:	0000961c 	andeq	r9, r0, ip, lsl r6
    86d8:	00009594 	muleq	r0, r4, r5
    86dc:	00009550 	andeq	r9, r0, r0, asr r5

000086e0 <sw_uart_gets_until_blk>:

int sw_uart_gets_until_blk(sw_uart_t *u, uint8_t *buf, uint32_t nbytes, uint8_t end) {
    86e0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    86e4:	e24dd00c 	sub	sp, sp, #12
    int res = sw_uart_gets_until(u, buf, nbytes, end, ~0);
    86e8:	e3e0c000 	mvn	ip, #0
    86ec:	e58dc000 	str	ip, [sp]
    86f0:	ebffff54 	bl	8448 <sw_uart_gets_until>
    if(res < 0)
    86f4:	e3500000 	cmp	r0, #0
    86f8:	aa000005 	bge	8714 <sw_uart_gets_until_blk+0x34>
        panic("impossible: have an infinite timeout!\n");
    86fc:	e59f0018 	ldr	r0, [pc, #24]	; 871c <sw_uart_gets_until_blk+0x3c>
    8700:	e59f1018 	ldr	r1, [pc, #24]	; 8720 <sw_uart_gets_until_blk+0x40>
    8704:	e59f2018 	ldr	r2, [pc, #24]	; 8724 <sw_uart_gets_until_blk+0x44>
    8708:	e3a030cc 	mov	r3, #204	; 0xcc
    870c:	eb000005 	bl	8728 <printk>
    8710:	eb000173 	bl	8ce4 <clean_reboot>
    return res;
}
    8714:	e28dd00c 	add	sp, sp, #12
    8718:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    871c:	000095e4 	andeq	r9, r0, r4, ror #11
    8720:	00009594 	muleq	r0, r4, r5
    8724:	00009560 	andeq	r9, r0, r0, ror #10

00008728 <printk>:
#include <stdarg.h>

#include "rpi.h"
#include "va-printk.h"

int printk(const char *fmt, ...) {
    8728:	e92d000f 	push	{r0, r1, r2, r3}
    872c:	e92d4030 	push	{r4, r5, lr}
    8730:	e24dd00c 	sub	sp, sp, #12
    // this is a really huge buffer for a pi.   could do this better.
    static char buf[1024];
    va_list args;

    va_start(args, fmt);
    8734:	e28d301c 	add	r3, sp, #28
    8738:	e58d3004 	str	r3, [sp, #4]
        int sz = va_printk(buf, sizeof buf, fmt, args);
    873c:	e59f4034 	ldr	r4, [pc, #52]	; 8778 <printk+0x50>
    8740:	e1a00004 	mov	r0, r4
    8744:	e3a01b01 	mov	r1, #1024	; 0x400
    8748:	e59d2018 	ldr	r2, [sp, #24]
    874c:	eb0000ba 	bl	8a3c <va_printk>
    8750:	e1a05000 	mov	r5, r0
    va_end(args);


#if 1
    putk(buf);
    8754:	e59f3020 	ldr	r3, [pc, #32]	; 877c <printk+0x54>
    8758:	e5933000 	ldr	r3, [r3]
    875c:	e1a00004 	mov	r0, r4
    8760:	e12fff33 	blx	r3
    int i;
    for(i = 0; buf[i]; i++)
        rpi_putchar(buf[i]);
#endif
    return sz;
}
    8764:	e1a00005 	mov	r0, r5
    8768:	e28dd00c 	add	sp, sp, #12
    876c:	e8bd4030 	pop	{r4, r5, lr}
    8770:	e28dd010 	add	sp, sp, #16
    8774:	e12fff1e 	bx	lr
    8778:	00009750 	andeq	r9, r0, r0, asr r7
    877c:	000093c4 	andeq	r9, r0, r4, asr #7

00008780 <internal_putk>:
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    8780:	e92d4038 	push	{r3, r4, r5, lr}
    8784:	e1a04000 	mov	r4, r0
    for(; *p; p++)
        rpi_putchar(*p);
    8788:	e59f5020 	ldr	r5, [pc, #32]	; 87b0 <internal_putk+0x30>
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    878c:	ea000002 	b	879c <internal_putk+0x1c>
        rpi_putchar(*p);
    8790:	e5953000 	ldr	r3, [r5]
    8794:	e12fff33 	blx	r3
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    8798:	e2844001 	add	r4, r4, #1
    879c:	e5d40000 	ldrb	r0, [r4]
    87a0:	e3500000 	cmp	r0, #0
    87a4:	1afffff9 	bne	8790 <internal_putk+0x10>
        rpi_putchar(*p);
//  we were adding this.
//  rpi_putchar('\n');
    return 1;
}
    87a8:	e3a00001 	mov	r0, #1
    87ac:	e8bd8038 	pop	{r3, r4, r5, pc}
    87b0:	00009438 	andeq	r9, r0, r8, lsr r4

000087b4 <strlen>:
#include <string.h>

size_t strlen(const char *p) {
    size_t ret;
    for (ret = 0; p[ret]; ++ret)
    87b4:	e3a03000 	mov	r3, #0
    87b8:	ea000000 	b	87c0 <strlen+0xc>
    87bc:	e2833001 	add	r3, r3, #1
    87c0:	e7d02003 	ldrb	r2, [r0, r3]
    87c4:	e3520000 	cmp	r2, #0
    87c8:	1afffffb 	bne	87bc <strlen+0x8>
        ;
    return ret;
}
    87cc:	e1a00003 	mov	r0, r3
    87d0:	e12fff1e 	bx	lr

000087d4 <isdigit>:
    if(puts_fp)
        putk = puts_fp;
}

// XXX: check sign promotion.
static int isdigit(int c) { return c >= '0' && c <= '9'; }
    87d4:	e2400030 	sub	r0, r0, #48	; 0x30
    87d8:	e3500009 	cmp	r0, #9
    87dc:	83a00000 	movhi	r0, #0
    87e0:	93a00001 	movls	r0, #1
    87e4:	e12fff1e 	bx	lr

000087e8 <pad>:

// don't move: can't be inlined, gcc seems to have a bug.
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
    87e8:	e0611000 	rsb	r1, r1, r0
	// pad with leading spaces
	for(; len < width; len++)
		*p++ = ' ';
    87ec:	e3a03020 	mov	r3, #32
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    87f0:	ea000002 	b	8800 <pad+0x18>
		*p++ = ' ';
    87f4:	e5c03000 	strb	r3, [r0]
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    87f8:	e2811001 	add	r1, r1, #1
		*p++ = ' ';
    87fc:	e2800001 	add	r0, r0, #1
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8800:	e1510002 	cmp	r1, r2
    8804:	bafffffa 	blt	87f4 <pad+0xc>
		*p++ = ' ';
	*p = 0;
    8808:	e3a03000 	mov	r3, #0
    880c:	e5c03000 	strb	r3, [r0]
	return p;
}
    8810:	e12fff1e 	bx	lr

00008814 <reverse>:

static char* reverse(char *dst, int n, char *p, char *start) {
	// drop the lower chars if the string is too big.
	int len = p - start + 1; // include \0
    8814:	e063c002 	rsb	ip, r3, r2
    8818:	e28cc001 	add	ip, ip, #1
	if(len > n)
    881c:	e15c0001 	cmp	ip, r1
		start += (len - n);
    8820:	c061100c 	rsbgt	r1, r1, ip
    8824:	c0833001 	addgt	r3, r3, r1

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    8828:	e2422001 	sub	r2, r2, #1
    882c:	e1a01000 	mov	r1, r0
    8830:	ea000002 	b	8840 <reverse+0x2c>
		*dst++ = *p;
    8834:	e452c001 	ldrb	ip, [r2], #-1
    8838:	e5c1c000 	strb	ip, [r1]
    883c:	e2811001 	add	r1, r1, #1
		start += (len - n);

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    8840:	e1520003 	cmp	r2, r3
    8844:	2afffffa 	bcs	8834 <reverse+0x20>
		*dst++ = *p;
	*dst++ = 0;
    8848:	e3a03000 	mov	r3, #0
    884c:	e5c13000 	strb	r3, [r1]

	return s;
}
    8850:	e12fff1e 	bx	lr

00008854 <emit>:

static char* emit(unsigned base, char *dst, int n, int val, int width, int signed_p) {
    8854:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8858:	e24dd040 	sub	sp, sp, #64	; 0x40
    885c:	e1a05001 	mov	r5, r1
    8860:	e1a04002 	mov	r4, r2
    8864:	e59d2058 	ldr	r2, [sp, #88]	; 0x58
	// XXX: constrain width to be >= bit size: can change this.
	if(width > n)
    8868:	e1520004 	cmp	r2, r4
		width = n - 1;
    886c:	c2442001 	subgt	r2, r4, #1

	char buf[64], *p = buf; 
	unsigned u = val;
    8870:	e1a0c003 	mov	ip, r3

	switch(base) { 
    8874:	e2400002 	sub	r0, r0, #2
    8878:	e350000e 	cmp	r0, #14
    887c:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
    8880:	ea000042 	b	8990 <emit+0x13c>
    8884:	00008968 	andeq	r8, r0, r8, ror #18
    8888:	00008990 	muleq	r0, r0, r9
    888c:	00008990 	muleq	r0, r0, r9
    8890:	00008990 	muleq	r0, r0, r9
    8894:	00008990 	muleq	r0, r0, r9
    8898:	00008990 	muleq	r0, r0, r9
    889c:	0000895c 	andeq	r8, r0, ip, asr r9
    88a0:	00008990 	muleq	r0, r0, r9
    88a4:	000088c0 	andeq	r8, r0, r0, asr #17
    88a8:	00008990 	muleq	r0, r0, r9
    88ac:	00008990 	muleq	r0, r0, r9
    88b0:	00008990 	muleq	r0, r0, r9
    88b4:	00008990 	muleq	r0, r0, r9
    88b8:	00008990 	muleq	r0, r0, r9
    88bc:	00008934 	andeq	r8, r0, r4, lsr r9
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
    88c0:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
    88c4:	e2911000 	adds	r1, r1, #0
    88c8:	13a01001 	movne	r1, #1
    88cc:	e0111fa3 	ands	r1, r1, r3, lsr #31
				neg_p = 1;
				val = -val;
    88d0:	1263c000 	rsbne	ip, r3, #0
	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
				neg_p = 1;
    88d4:	13a08001 	movne	r8, #1
	unsigned u = val;

	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
    88d8:	03a08000 	moveq	r8, #0
			if(val < 0 && signed_p) {
				neg_p = 1;
    88dc:	e1a0100d 	mov	r1, sp
				val = -val;
				u = val;
			}
			do { 
				*p++ = "0123456789"[u % 10];
    88e0:	e59f70e8 	ldr	r7, [pc, #232]	; 89d0 <emit+0x17c>
    88e4:	e59f60e8 	ldr	r6, [pc, #232]	; 89d4 <emit+0x180>
    88e8:	ea000000 	b	88f0 <emit+0x9c>
    88ec:	e1a01003 	mov	r1, r3
    88f0:	e2813001 	add	r3, r1, #1
    88f4:	e08e0c97 	umull	r0, lr, r7, ip
    88f8:	e1a0e1ae 	lsr	lr, lr, #3
    88fc:	e1a0000e 	mov	r0, lr
    8900:	e08ee10e 	add	lr, lr, lr, lsl #2
    8904:	e1a0e08e 	lsl	lr, lr, #1
    8908:	e06ee00c 	rsb	lr, lr, ip
    890c:	e7d6c00e 	ldrb	ip, [r6, lr]
    8910:	e5c1c000 	strb	ip, [r1]
			} while(u /= 10); 
    8914:	e1a0c000 	mov	ip, r0
    8918:	e3500000 	cmp	r0, #0
    891c:	1afffff2 	bne	88ec <emit+0x98>
			if(neg_p)
    8920:	e3580000 	cmp	r8, #0
				*p++ = '-';
    8924:	12813002 	addne	r3, r1, #2
    8928:	13a0002d 	movne	r0, #45	; 0x2d
    892c:	15c10001 	strbne	r0, [r1, #1]
    8930:	ea00001c 	b	89a8 <emit+0x154>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    8934:	e1a0e00d 	mov	lr, sp
			break;
		}
		case 16:
			u = val;
                        do {
                                *p++ = "0123456789abcdef"[u % 16];
    8938:	e59f0098 	ldr	r0, [pc, #152]	; 89d8 <emit+0x184>
    893c:	e28e3001 	add	r3, lr, #1
    8940:	e20c100f 	and	r1, ip, #15
    8944:	e7d01001 	ldrb	r1, [r0, r1]
    8948:	e5ce1000 	strb	r1, [lr]
    894c:	e1a0e003 	mov	lr, r3
                        } while(u /= 16);
    8950:	e1b0c22c 	lsrs	ip, ip, #4
    8954:	1afffff8 	bne	893c <emit+0xe8>
    8958:	ea000012 	b	89a8 <emit+0x154>
                        break;
		// just a single char
		case 8:
			*p++ = val;
    895c:	e5cd3000 	strb	r3, [sp]
    8960:	e28d3001 	add	r3, sp, #1
			break;
    8964:	ea00000f 	b	89a8 <emit+0x154>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    8968:	e1a0e00d 	mov	lr, sp
#if 0
			for(int i = 0; i < 32; i++)
				*p++ = "01"[(u & (1<<i)) != 0];
#else
                        do {
                        	*p++ = "01"[u % 2];
    896c:	e59f0068 	ldr	r0, [pc, #104]	; 89dc <emit+0x188>
    8970:	e28e3001 	add	r3, lr, #1
    8974:	e20c1001 	and	r1, ip, #1
    8978:	e7d01001 	ldrb	r1, [r0, r1]
    897c:	e5ce1000 	strb	r1, [lr]
    8980:	e1a0e003 	mov	lr, r3
			} while(u /= 2);
    8984:	e1b0c0ac 	lsrs	ip, ip, #1
    8988:	1afffff8 	bne	8970 <emit+0x11c>
    898c:	ea000005 	b	89a8 <emit+0x154>
#endif
			break;
		default:
			assert(0);
    8990:	e59f0048 	ldr	r0, [pc, #72]	; 89e0 <emit+0x18c>
    8994:	e59f1048 	ldr	r1, [pc, #72]	; 89e4 <emit+0x190>
    8998:	e59f2048 	ldr	r2, [pc, #72]	; 89e8 <emit+0x194>
    899c:	e3a03075 	mov	r3, #117	; 0x75
    89a0:	ebffff60 	bl	8728 <printk>
    89a4:	eb0000ce 	bl	8ce4 <clean_reboot>
	}
	// number string is reversed, so re-reverse it.
	return reverse(dst, n, pad(p, buf, width), buf);
    89a8:	e1a00003 	mov	r0, r3
    89ac:	e1a0100d 	mov	r1, sp
    89b0:	ebffff8c 	bl	87e8 <pad>
    89b4:	e1a02000 	mov	r2, r0
    89b8:	e1a00005 	mov	r0, r5
    89bc:	e1a01004 	mov	r1, r4
    89c0:	e1a0300d 	mov	r3, sp
    89c4:	ebffff92 	bl	8814 <reverse>
}
    89c8:	e28dd040 	add	sp, sp, #64	; 0x40
    89cc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    89d0:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    89d4:	0000968c 	andeq	r9, r0, ip, lsl #13
    89d8:	00009698 	muleq	r0, r8, r6
    89dc:	000096ac 	andeq	r9, r0, ip, lsr #13
    89e0:	00009664 	andeq	r9, r0, r4, ror #12
    89e4:	00009678 	andeq	r9, r0, r8, ror r6
    89e8:	00009640 	andeq	r9, r0, r0, asr #12

000089ec <rpi_set_output>:
// override this is going through the network.
int (*rpi_putchar)(int c) = internal_putchar;
#endif


void rpi_set_output(int (*putc_fp)(int), int (*puts_fp)(const char *)) {
    89ec:	e92d4008 	push	{r3, lr}
    assert(putc_fp);
    89f0:	e3500000 	cmp	r0, #0
    89f4:	1a000005 	bne	8a10 <rpi_set_output+0x24>
    89f8:	e59f0028 	ldr	r0, [pc, #40]	; 8a28 <rpi_set_output+0x3c>
    89fc:	e59f1028 	ldr	r1, [pc, #40]	; 8a2c <rpi_set_output+0x40>
    8a00:	e59f2028 	ldr	r2, [pc, #40]	; 8a30 <rpi_set_output+0x44>
    8a04:	e3a03020 	mov	r3, #32
    8a08:	ebffff46 	bl	8728 <printk>
    8a0c:	eb0000b4 	bl	8ce4 <clean_reboot>
    rpi_putchar = putc_fp;
    8a10:	e59f301c 	ldr	r3, [pc, #28]	; 8a34 <rpi_set_output+0x48>
    8a14:	e5830000 	str	r0, [r3]
    if(puts_fp)
    8a18:	e3510000 	cmp	r1, #0
        putk = puts_fp;
    8a1c:	159f3014 	ldrne	r3, [pc, #20]	; 8a38 <rpi_set_output+0x4c>
    8a20:	15831000 	strne	r1, [r3]
    8a24:	e8bd8008 	pop	{r3, pc}
    8a28:	000096b0 			; <UNDEFINED> instruction: 0x000096b0
    8a2c:	00009678 	andeq	r9, r0, r8, ror r6
    8a30:	00009648 	andeq	r9, r0, r8, asr #12
    8a34:	00009438 	andeq	r9, r0, r8, lsr r4
    8a38:	000093c4 	andeq	r9, r0, r4, asr #7

00008a3c <va_printk>:
	return reverse(dst, n, pad(p, buf, width), buf);
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
    8a3c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a40:	e24dd08c 	sub	sp, sp, #140	; 0x8c
    8a44:	e1a0b000 	mov	fp, r0
    8a48:	e1a0a003 	mov	sl, r3
	char *p = buf, *e = buf + n - 1;
    8a4c:	e2411001 	sub	r1, r1, #1
    8a50:	e0808001 	add	r8, r0, r1

	buf[0] = 0;
    8a54:	e3a03000 	mov	r3, #0
    8a58:	e5c03000 	strb	r3, [r0]
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;
    8a5c:	e1a04000 	mov	r4, r0

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    8a60:	ea000087 	b	8c84 <va_printk+0x248>
		if(*fmt != '%')
    8a64:	e3530025 	cmp	r3, #37	; 0x25
			*p++ = *fmt++;
    8a68:	12822001 	addne	r2, r2, #1
    8a6c:	15c43000 	strbne	r3, [r4]
    8a70:	12844001 	addne	r4, r4, #1
    8a74:	1a000082 	bne	8c84 <va_printk+0x248>
		
		else if(fmt[1] == '%') {
    8a78:	e5d21001 	ldrb	r1, [r2, #1]
    8a7c:	e3510025 	cmp	r1, #37	; 0x25
			*p++ = *fmt;
    8a80:	05c43000 	strbeq	r3, [r4]
			fmt+=2;
    8a84:	02822002 	addeq	r2, r2, #2
	for(; *fmt && p < e; ) {
		if(*fmt != '%')
			*p++ = *fmt++;
		
		else if(fmt[1] == '%') {
			*p++ = *fmt;
    8a88:	02844001 	addeq	r4, r4, #1
    8a8c:	0a00007c 	beq	8c84 <va_printk+0x248>
			fmt+=2;
		} else {	
			fmt++;
    8a90:	e2826001 	add	r6, r2, #1

			char *s, num[128];
			unsigned width = 0;
    8a94:	e3a07000 	mov	r7, #0

			while(isdigit(*fmt)) {
    8a98:	ea000004 	b	8ab0 <va_printk+0x74>
				width = width*10 + *fmt - '0';
    8a9c:	e0877107 	add	r7, r7, r7, lsl #2
    8aa0:	e1a07087 	lsl	r7, r7, #1
    8aa4:	e0877005 	add	r7, r7, r5
    8aa8:	e2477030 	sub	r7, r7, #48	; 0x30
				fmt++;
    8aac:	e2866001 	add	r6, r6, #1
			fmt++;

			char *s, num[128];
			unsigned width = 0;

			while(isdigit(*fmt)) {
    8ab0:	e5d65000 	ldrb	r5, [r6]
    8ab4:	e1a09005 	mov	r9, r5
    8ab8:	e1a00005 	mov	r0, r5
    8abc:	ebffff44 	bl	87d4 <isdigit>
    8ac0:	e3500000 	cmp	r0, #0
    8ac4:	1afffff4 	bne	8a9c <va_printk+0x60>
				width = width*10 + *fmt - '0';
				fmt++;
			}
			assert(width < 32);
    8ac8:	e357001f 	cmp	r7, #31
    8acc:	9a000005 	bls	8ae8 <va_printk+0xac>
    8ad0:	e59f01d8 	ldr	r0, [pc, #472]	; 8cb0 <va_printk+0x274>
    8ad4:	e59f11d8 	ldr	r1, [pc, #472]	; 8cb4 <va_printk+0x278>
    8ad8:	e59f21d8 	ldr	r2, [pc, #472]	; 8cb8 <va_printk+0x27c>
    8adc:	e3a03092 	mov	r3, #146	; 0x92
    8ae0:	ebffff10 	bl	8728 <printk>
    8ae4:	eb00007e 	bl	8ce4 <clean_reboot>
			
			switch(*fmt) {
    8ae8:	e2455062 	sub	r5, r5, #98	; 0x62
    8aec:	e3550016 	cmp	r5, #22
    8af0:	979ff105 	ldrls	pc, [pc, r5, lsl #2]
    8af4:	ea000051 	b	8c40 <va_printk+0x204>
    8af8:	00008be4 	andeq	r8, r0, r4, ror #23
    8afc:	00008c18 	andeq	r8, r0, r8, lsl ip
    8b00:	00008b6c 	andeq	r8, r0, ip, ror #22
    8b04:	00008c40 	andeq	r8, r0, r0, asr #24
    8b08:	00008b54 	andeq	r8, r0, r4, asr fp
    8b0c:	00008c40 	andeq	r8, r0, r0, asr #24
    8b10:	00008c40 	andeq	r8, r0, r0, asr #24
    8b14:	00008c40 	andeq	r8, r0, r0, asr #24
    8b18:	00008c40 	andeq	r8, r0, r0, asr #24
    8b1c:	00008c40 	andeq	r8, r0, r0, asr #24
    8b20:	00008c40 	andeq	r8, r0, r0, asr #24
    8b24:	00008c40 	andeq	r8, r0, r0, asr #24
    8b28:	00008c40 	andeq	r8, r0, r0, asr #24
    8b2c:	00008c40 	andeq	r8, r0, r0, asr #24
    8b30:	00008bbc 			; <UNDEFINED> instruction: 0x00008bbc
    8b34:	00008c40 	andeq	r8, r0, r0, asr #24
    8b38:	00008c40 	andeq	r8, r0, r0, asr #24
    8b3c:	00008c0c 	andeq	r8, r0, ip, lsl #24
    8b40:	00008c40 	andeq	r8, r0, r0, asr #24
    8b44:	00008b94 	muleq	r0, r4, fp
    8b48:	00008c40 	andeq	r8, r0, r0, asr #24
    8b4c:	00008c40 	andeq	r8, r0, r0, asr #24
    8b50:	00008bbc 			; <UNDEFINED> instruction: 0x00008bbc
			case 'f':
			{
#ifndef RPI_FP_ENABLED
				panic("float not enabled!!!");
    8b54:	e59f0160 	ldr	r0, [pc, #352]	; 8cbc <va_printk+0x280>
    8b58:	e59f1154 	ldr	r1, [pc, #340]	; 8cb4 <va_printk+0x278>
    8b5c:	e59f2154 	ldr	r2, [pc, #340]	; 8cb8 <va_printk+0x27c>
    8b60:	e3a03098 	mov	r3, #152	; 0x98
    8b64:	ebfffeef 	bl	8728 <printk>
    8b68:	eb00005d 	bl	8ce4 <clean_reboot>

				break;
#endif
			}
			case 'd':
				s = emit(10, num, 128, va_arg(args, int), width, 1);
    8b6c:	e59a3000 	ldr	r3, [sl]
    8b70:	e28aa004 	add	sl, sl, #4
    8b74:	e58d7000 	str	r7, [sp]
    8b78:	e3a02001 	mov	r2, #1
    8b7c:	e58d2004 	str	r2, [sp, #4]
    8b80:	e3a0000a 	mov	r0, #10
    8b84:	e28d1008 	add	r1, sp, #8
    8b88:	e3a02080 	mov	r2, #128	; 0x80
    8b8c:	ebffff30 	bl	8854 <emit>
				break;
    8b90:	ea000031 	b	8c5c <va_printk+0x220>
			case 'u':
				s = emit(10, num, 128, va_arg(args, unsigned), width, 0);
    8b94:	e59a3000 	ldr	r3, [sl]
    8b98:	e28aa004 	add	sl, sl, #4
    8b9c:	e58d7000 	str	r7, [sp]
    8ba0:	e3a02000 	mov	r2, #0
    8ba4:	e58d2004 	str	r2, [sp, #4]
    8ba8:	e3a0000a 	mov	r0, #10
    8bac:	e28d1008 	add	r1, sp, #8
    8bb0:	e3a02080 	mov	r2, #128	; 0x80
    8bb4:	ebffff26 	bl	8854 <emit>
				break;
    8bb8:	ea000027 	b	8c5c <va_printk+0x220>
			case 'p':
			case 'x':
				s = emit(16, num, 128, va_arg(args, unsigned), width, 0);
    8bbc:	e59a3000 	ldr	r3, [sl]
    8bc0:	e28aa004 	add	sl, sl, #4
    8bc4:	e58d7000 	str	r7, [sp]
    8bc8:	e3a02000 	mov	r2, #0
    8bcc:	e58d2004 	str	r2, [sp, #4]
    8bd0:	e3a00010 	mov	r0, #16
    8bd4:	e28d1008 	add	r1, sp, #8
    8bd8:	e3a02080 	mov	r2, #128	; 0x80
    8bdc:	ebffff1c 	bl	8854 <emit>
				break;
    8be0:	ea00001d 	b	8c5c <va_printk+0x220>
			case 'b':
				s = emit(2, num, 128, va_arg(args, unsigned), width, 0);
    8be4:	e59a3000 	ldr	r3, [sl]
    8be8:	e28aa004 	add	sl, sl, #4
    8bec:	e58d7000 	str	r7, [sp]
    8bf0:	e3a02000 	mov	r2, #0
    8bf4:	e58d2004 	str	r2, [sp, #4]
    8bf8:	e3a00002 	mov	r0, #2
    8bfc:	e28d1008 	add	r1, sp, #8
    8c00:	e3a02080 	mov	r2, #128	; 0x80
    8c04:	ebffff12 	bl	8854 <emit>
				break;
    8c08:	ea000013 	b	8c5c <va_printk+0x220>
			case 's':
				s = va_arg(args, char *);
    8c0c:	e59a0000 	ldr	r0, [sl]
    8c10:	e28aa004 	add	sl, sl, #4
				break;
    8c14:	ea000010 	b	8c5c <va_printk+0x220>
			case 'c':
				s = emit(8, num, 128, va_arg(args, int),width,0);
    8c18:	e59a3000 	ldr	r3, [sl]
    8c1c:	e28aa004 	add	sl, sl, #4
    8c20:	e58d7000 	str	r7, [sp]
    8c24:	e3a02000 	mov	r2, #0
    8c28:	e58d2004 	str	r2, [sp, #4]
    8c2c:	e3a00008 	mov	r0, #8
    8c30:	e08d1000 	add	r1, sp, r0
    8c34:	e3a02080 	mov	r2, #128	; 0x80
    8c38:	ebffff05 	bl	8854 <emit>
				break;
    8c3c:	ea000006 	b	8c5c <va_printk+0x220>
			default: 
				panic("printk: not handling specifier '%c'\n", *fmt);
    8c40:	e58d9000 	str	r9, [sp]
    8c44:	e59f0074 	ldr	r0, [pc, #116]	; 8cc0 <va_printk+0x284>
    8c48:	e59f1064 	ldr	r1, [pc, #100]	; 8cb4 <va_printk+0x278>
    8c4c:	e59f2064 	ldr	r2, [pc, #100]	; 8cb8 <va_printk+0x27c>
    8c50:	e3a030b9 	mov	r3, #185	; 0xb9
    8c54:	ebfffeb3 	bl	8728 <printk>
    8c58:	eb000021 	bl	8ce4 <clean_reboot>
				return 0;   // ugh
			}
			fmt++;
    8c5c:	e2862001 	add	r2, r6, #1

			// safe string copy
			for(; p < e && *s; )
    8c60:	ea000002 	b	8c70 <va_printk+0x234>
				*p++ = *s++;
    8c64:	e2800001 	add	r0, r0, #1
    8c68:	e5c43000 	strb	r3, [r4]
    8c6c:	e2844001 	add	r4, r4, #1
				return 0;   // ugh
			}
			fmt++;

			// safe string copy
			for(; p < e && *s; )
    8c70:	e1540008 	cmp	r4, r8
    8c74:	2a000002 	bcs	8c84 <va_printk+0x248>
    8c78:	e5d03000 	ldrb	r3, [r0]
    8c7c:	e3530000 	cmp	r3, #0
    8c80:	1afffff7 	bne	8c64 <va_printk+0x228>

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    8c84:	e5d23000 	ldrb	r3, [r2]
    8c88:	e3530000 	cmp	r3, #0
    8c8c:	0a000001 	beq	8c98 <va_printk+0x25c>
    8c90:	e1540008 	cmp	r4, r8
    8c94:	3affff72 	bcc	8a64 <va_printk+0x28>
			// safe string copy
			for(; p < e && *s; )
				*p++ = *s++;
		}
	}
	*p++ = 0;
    8c98:	e2840001 	add	r0, r4, #1
    8c9c:	e3a03000 	mov	r3, #0
    8ca0:	e5c43000 	strb	r3, [r4]
	return p - buf;
}
    8ca4:	e06b0000 	rsb	r0, fp, r0
    8ca8:	e28dd08c 	add	sp, sp, #140	; 0x8c
    8cac:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8cb0:	000096c8 	andeq	r9, r0, r8, asr #13
    8cb4:	00009678 	andeq	r9, r0, r8, ror r6
    8cb8:	00009658 	andeq	r9, r0, r8, asr r6
    8cbc:	000096e4 	andeq	r9, r0, r4, ror #13
    8cc0:	0000970c 	andeq	r9, r0, ip, lsl #14

00008cc4 <enable_cache>:
#include "rpi.h"

void enable_cache(void) {
    unsigned r;
    asm volatile ("MRC p15, 0, %0, c1, c0, 0" : "=r" (r));
    8cc4:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
	r |= (1 << 12); // l1 instruction cache
	r |= (1 << 11); // branch prediction
    8cc8:	e3833b06 	orr	r3, r3, #6144	; 0x1800
    asm volatile ("MCR p15, 0, %0, c1, c0, 0" :: "r" (r));
    8ccc:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    8cd0:	e12fff1e 	bx	lr

00008cd4 <disable_cache>:
}

// should we flush icache?
void disable_cache(void) {
    unsigned r;
    asm volatile ("MRC p15, 0, %0, c1, c0, 0" : "=r" (r));
    8cd4:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    //r |= 0x1800;
	r &= ~(1 << 12); // l1 instruction cache
	r &= ~(1 << 11); // branch prediction
    8cd8:	e3c33b06 	bic	r3, r3, #6144	; 0x1800
    asm volatile ("MCR p15, 0, %0, c1, c0, 0" :: "r" (r));
    8cdc:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    8ce0:	e12fff1e 	bx	lr

00008ce4 <clean_reboot>:
#include "rpi.h"

// print out a special message so bootloader exits
void clean_reboot(void) {
    8ce4:	e92d4008 	push	{r3, lr}
    putk("DONE!!!\n");
    8ce8:	e59f3014 	ldr	r3, [pc, #20]	; 8d04 <clean_reboot+0x20>
    8cec:	e5933000 	ldr	r3, [r3]
    8cf0:	e59f0010 	ldr	r0, [pc, #16]	; 8d08 <clean_reboot+0x24>
    8cf4:	e12fff33 	blx	r3
    delay_ms(100);       // (hopefully) enough time for message to get flushed.
    8cf8:	e3a00064 	mov	r0, #100	; 0x64
    8cfc:	eb000048 	bl	8e24 <delay_ms>
    rpi_reboot();
    8d00:	eb000019 	bl	8d6c <rpi_reboot>
    8d04:	000093c4 	andeq	r9, r0, r4, asr #7
    8d08:	00009744 	andeq	r9, r0, r4, asr #14

00008d0c <_cstart>:
#include "rpi.h"

void _cstart() {
    8d0c:	e92d4008 	push	{r3, lr}
    extern int __bss_start__, __bss_end__;
	void notmain();

    int* bss = &__bss_start__;
    8d10:	e59f3020 	ldr	r3, [pc, #32]	; 8d38 <_cstart+0x2c>
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    8d14:	e59f2020 	ldr	r2, [pc, #32]	; 8d3c <_cstart+0x30>
        *bss++ = 0;
    8d18:	e3a01000 	mov	r1, #0
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    8d1c:	ea000001 	b	8d28 <_cstart+0x1c>
        *bss++ = 0;
    8d20:	e5831000 	str	r1, [r3]
    8d24:	e2833004 	add	r3, r3, #4
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    8d28:	e1530002 	cmp	r3, r2
    8d2c:	3afffffb 	bcc	8d20 <_cstart+0x14>
        *bss++ = 0;

    notmain(); 
    8d30:	ebfffcb6 	bl	8010 <notmain>
	rpi_reboot();
    8d34:	eb00000c 	bl	8d6c <rpi_reboot>
    8d38:	00009750 	andeq	r9, r0, r0, asr r7
    8d3c:	00009b50 	andeq	r9, r0, r0, asr fp

00008d40 <at_user_level>:
 * works if we have a trashed stack pointer?
 */
static unsigned user_level = 0b10000;
int at_user_level(void) {
    unsigned cpsr = 0;
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    8d40:	e10f0000 	mrs	r0, CPSR

    // user level = lower 5 bits = 0b10000);
    return (cpsr  & 0b11111)  == user_level;
    8d44:	e200001f 	and	r0, r0, #31
}
    8d48:	e3500010 	cmp	r0, #16
    8d4c:	13a00000 	movne	r0, #0
    8d50:	03a00001 	moveq	r0, #1
    8d54:	e12fff1e 	bx	lr

00008d58 <set_user_level>:

// this is just used by the reboot code.
void set_user_level(void) {
    unsigned cpsr = 0;
    // XXX: shouldn't we just set the one bit?
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    8d58:	e10f3000 	mrs	r3, CPSR
        cpsr = (cpsr & ~0b11111) | user_level;
    8d5c:	e3c3301f 	bic	r3, r3, #31
    8d60:	e3833010 	orr	r3, r3, #16
    asm volatile("msr cpsr, %0" :: "r"(cpsr));
    8d64:	e129f003 	msr	CPSR_fc, r3
    8d68:	e12fff1e 	bx	lr

00008d6c <rpi_reboot>:
}

void rpi_reboot(void) {
    8d6c:	e92d4008 	push	{r3, lr}
    if(at_user_level()) {
    8d70:	ebfffff2 	bl	8d40 <at_user_level>
    8d74:	e3500000 	cmp	r0, #0
    8d78:	0a000000 	beq	8d80 <rpi_reboot+0x14>
        set_user_level();
    8d7c:	ebfffff5 	bl	8d58 <set_user_level>
        // of stuff.
        // assert(!at_user_level());
    }

    // gives uart time to flush: should just call flush directly.
    delay_ms(30);
    8d80:	e3a0001e 	mov	r0, #30
    8d84:	eb000026 	bl	8e24 <delay_ms>
    const int PM_WDOG = 0x20100024;
    const int PM_PASSWORD = 0x5a000000;
    const int PM_RSTC_WRCFG_FULL_RESET = 0x00000020;

    // timeout = 1/16th of a second? (whatever)
    PUT32(PM_WDOG, PM_PASSWORD | 1);
    8d88:	e59f0014 	ldr	r0, [pc, #20]	; 8da4 <rpi_reboot+0x38>
    8d8c:	e59f1014 	ldr	r1, [pc, #20]	; 8da8 <rpi_reboot+0x3c>
    8d90:	eb000035 	bl	8e6c <PUT32>
    PUT32(PM_RSTC, PM_PASSWORD | PM_RSTC_WRCFG_FULL_RESET);
    8d94:	e59f0010 	ldr	r0, [pc, #16]	; 8dac <rpi_reboot+0x40>
    8d98:	e59f1010 	ldr	r1, [pc, #16]	; 8db0 <rpi_reboot+0x44>
    8d9c:	eb000032 	bl	8e6c <PUT32>
    8da0:	eafffffe 	b	8da0 <rpi_reboot+0x34>
    8da4:	20100024 	andscs	r0, r0, r4, lsr #32
    8da8:	5a000001 	bpl	8db4 <delay_cycles>
    8dac:	2010001c 	andscs	r0, r0, ip, lsl r0
    8db0:	5a000020 	bpl	8e38 <delay_sec>

00008db4 <delay_cycles>:
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    8db4:	ea000001 	b	8dc0 <delay_cycles+0xc>
        asm("add r1, r1, #0");
    8db8:	e2811000 	add	r1, r1, #0
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    8dbc:	e1a00003 	mov	r0, r3
    8dc0:	e2403001 	sub	r3, r0, #1
    8dc4:	e3500000 	cmp	r0, #0
    8dc8:	1afffffa 	bne	8db8 <delay_cycles+0x4>
        asm("add r1, r1, #0");
}
    8dcc:	e12fff1e 	bx	lr

00008dd0 <timer_get_usec_raw>:

// no dev barrier.
unsigned timer_get_usec_raw(void) {
    8dd0:	e92d4008 	push	{r3, lr}
    return GET32(0x20003004);
    8dd4:	e59f0004 	ldr	r0, [pc, #4]	; 8de0 <timer_get_usec_raw+0x10>
    8dd8:	eb00002f 	bl	8e9c <GET32>
}
    8ddc:	e8bd8008 	pop	{r3, pc}
    8de0:	20003004 	andcs	r3, r0, r4

00008de4 <timer_get_usec>:

// in usec
unsigned timer_get_usec(void) {
    8de4:	e92d4010 	push	{r4, lr}
    dev_barrier();
    8de8:	eb000017 	bl	8e4c <dev_barrier>
    unsigned u = timer_get_usec_raw();
    8dec:	ebfffff7 	bl	8dd0 <timer_get_usec_raw>
    8df0:	e1a04000 	mov	r4, r0
    dev_barrier();
    8df4:	eb000014 	bl	8e4c <dev_barrier>
    return u;
}
    8df8:	e1a00004 	mov	r0, r4
    8dfc:	e8bd8010 	pop	{r4, pc}

00008e00 <delay_us>:

void delay_us(unsigned us) {
    8e00:	e92d4038 	push	{r3, r4, r5, lr}
    8e04:	e1a05000 	mov	r5, r0
    unsigned rb = timer_get_usec();
    8e08:	ebfffff5 	bl	8de4 <timer_get_usec>
    8e0c:	e1a04000 	mov	r4, r0
    while (1) {
        unsigned ra = timer_get_usec();
    8e10:	ebfffff3 	bl	8de4 <timer_get_usec>
        if ((ra - rb) >= us) {
    8e14:	e0640000 	rsb	r0, r4, r0
    8e18:	e1500005 	cmp	r0, r5
    8e1c:	3afffffb 	bcc	8e10 <delay_us+0x10>
            break;
        }
    }
}
    8e20:	e8bd8038 	pop	{r3, r4, r5, pc}

00008e24 <delay_ms>:
void delay_ms(unsigned ms) {
    8e24:	e92d4008 	push	{r3, lr}
    delay_us(ms*1000);
    8e28:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    8e2c:	e0000093 	mul	r0, r3, r0
    8e30:	ebfffff2 	bl	8e00 <delay_us>
    8e34:	e8bd8008 	pop	{r3, pc}

00008e38 <delay_sec>:
}
void delay_sec(unsigned sec) {
    8e38:	e92d4008 	push	{r3, lr}
    delay_ms(sec*1000);
    8e3c:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    8e40:	e0000093 	mul	r0, r3, r0
    8e44:	ebfffff6 	bl	8e24 <delay_ms>
    8e48:	e8bd8008 	pop	{r3, pc}

00008e4c <dev_barrier>:
    8e4c:	ea000002 	b	8e5c <dsb>

00008e50 <dmb>:
    8e50:	e3a00000 	mov	r0, #0
    8e54:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
    8e58:	e12fff1e 	bx	lr

00008e5c <dsb>:
    8e5c:	ee070f9a 	mcr	15, 0, r0, cr7, cr10, {4}
    8e60:	e12fff1e 	bx	lr

00008e64 <put32>:
    8e64:	e5801000 	str	r1, [r0]
    8e68:	e12fff1e 	bx	lr

00008e6c <PUT32>:
    8e6c:	e5801000 	str	r1, [r0]
    8e70:	e12fff1e 	bx	lr

00008e74 <put16>:
    8e74:	e1c010b0 	strh	r1, [r0]
    8e78:	e12fff1e 	bx	lr

00008e7c <PUT16>:
    8e7c:	e1c010b0 	strh	r1, [r0]
    8e80:	e12fff1e 	bx	lr

00008e84 <put8>:
    8e84:	e5c01000 	strb	r1, [r0]
    8e88:	e12fff1e 	bx	lr

00008e8c <PUT8>:
    8e8c:	e5c01000 	strb	r1, [r0]
    8e90:	e12fff1e 	bx	lr

00008e94 <get32>:
    8e94:	e5900000 	ldr	r0, [r0]
    8e98:	e12fff1e 	bx	lr

00008e9c <GET32>:
    8e9c:	e5900000 	ldr	r0, [r0]
    8ea0:	e12fff1e 	bx	lr

00008ea4 <GETPC>:
    8ea4:	e1a0000e 	mov	r0, lr
    8ea8:	e12fff1e 	bx	lr

00008eac <dummy>:
    8eac:	e12fff1e 	bx	lr

00008eb0 <uart_can_getc>:

	dev_barrier();
}

// 1 = at least one byte on rx queue, 0 otherwise
static int uart_can_getc(void) {
    8eb0:	e92d4008 	push	{r3, lr}
    return get32(AUX_MU_LSR_REG) & RX_READY;
    8eb4:	e59f300c 	ldr	r3, [pc, #12]	; 8ec8 <uart_can_getc+0x18>
    8eb8:	e5930000 	ldr	r0, [r3]
    8ebc:	ebfffff4 	bl	8e94 <get32>
}
    8ec0:	e2000001 	and	r0, r0, #1
    8ec4:	e8bd8008 	pop	{r3, pc}
    8ec8:	000093c8 	andeq	r9, r0, r8, asr #7

00008ecc <uart_init>:
#define RX_READY 0x1
#define TX_READY 0x10
#define TX_EMPTY 0x20

// note: if you need memory barriers, use <dev_barrier()>
void uart_init(void) {
    8ecc:	e92d4038 	push	{r3, r4, r5, lr}
    
	dev_barrier();
    8ed0:	ebffffdd 	bl	8e4c <dev_barrier>

	// set GPIO 14 and 15 to alternate function 0
    //volatile unsigned* gpio_reg = (void*) 0x20200004;
    //unsigned bitmask = get32(gpio_reg);
    gpio_set_function(14, GPIO_FUNC_ALT5);
    8ed4:	e3a0000e 	mov	r0, #14
    8ed8:	e3a01002 	mov	r1, #2
    8edc:	eb0000fd 	bl	92d8 <gpio_set_function>
	gpio_set_function(15, GPIO_FUNC_ALT5);
    8ee0:	e3a0000f 	mov	r0, #15
    8ee4:	e3a01002 	mov	r1, #2
    8ee8:	eb0000fa 	bl	92d8 <gpio_set_function>
    //bitmask &= ~(0b111 << ((UART0_RX % 10) * 3));
    //bitmask |= (0b010 << ((UART0_TX % 10) * 3));
    //bitmask |= (0b010 << ((UART0_RX % 10) * 3));
    //put32(gpio_reg, bitmask);

	dev_barrier();
    8eec:	ebffffd6 	bl	8e4c <dev_barrier>

    put32(AUX_ENABLES, get32(AUX_ENABLES) | (ENABLE_UART));
    8ef0:	e59f4068 	ldr	r4, [pc, #104]	; 8f60 <uart_init+0x94>
    8ef4:	e5945004 	ldr	r5, [r4, #4]
    8ef8:	e1a00005 	mov	r0, r5
    8efc:	ebffffe4 	bl	8e94 <get32>
    8f00:	e3801001 	orr	r1, r0, #1
    8f04:	e1a00005 	mov	r0, r5
    8f08:	ebffffd5 	bl	8e64 <put32>
	
	dev_barrier();
    8f0c:	ebffffce 	bl	8e4c <dev_barrier>
	
    put32(AUX_MU_CNTL_REG, 0x0);
    8f10:	e5940008 	ldr	r0, [r4, #8]
    8f14:	e3a01000 	mov	r1, #0
    8f18:	ebffffd1 	bl	8e64 <put32>
    put32(AUX_MU_IER_REG, 0x0);
    8f1c:	e594000c 	ldr	r0, [r4, #12]
    8f20:	e3a01000 	mov	r1, #0
    8f24:	ebffffce 	bl	8e64 <put32>
    put32(AUX_MU_IIR_REG, CLEAR_RX_FIFO | CLEAR_TX_FIFO);
    8f28:	e5940010 	ldr	r0, [r4, #16]
    8f2c:	e3a01006 	mov	r1, #6
    8f30:	ebffffcb 	bl	8e64 <put32>
	put32(AUX_MU_LCR_REG, ENABLE_8BIT_MODE);
    8f34:	e5940014 	ldr	r0, [r4, #20]
    8f38:	e3a01003 	mov	r1, #3
    8f3c:	ebffffc8 	bl	8e64 <put32>
    put32(AUX_MU_BAUD_REG, BAUD_115200);
    8f40:	e5940018 	ldr	r0, [r4, #24]
    8f44:	e59f1018 	ldr	r1, [pc, #24]	; 8f64 <uart_init+0x98>
    8f48:	ebffffc5 	bl	8e64 <put32>
    put32(AUX_MU_CNTL_REG, ENABLE_TXER | ENABLE_RXER);
    8f4c:	e5940008 	ldr	r0, [r4, #8]
    8f50:	e3a01003 	mov	r1, #3
    8f54:	ebffffc2 	bl	8e64 <put32>

	dev_barrier();
    8f58:	ebffffbb 	bl	8e4c <dev_barrier>
    8f5c:	e8bd8038 	pop	{r3, r4, r5, pc}
    8f60:	000093c8 	andeq	r9, r0, r8, asr #7
    8f64:	0000010e 	andeq	r0, r0, lr, lsl #2

00008f68 <uart_getc>:
    return get32(AUX_MU_LSR_REG) & RX_READY;
}

// returns one byte from the rx queue, if needed
// blocks until there is one.
int uart_getc(void) {
    8f68:	e92d4008 	push	{r3, lr}
    while(1)
        if(uart_can_getc())  break;
    8f6c:	ebffffcf 	bl	8eb0 <uart_can_getc>
    8f70:	e3500000 	cmp	r0, #0
    8f74:	0afffffc 	beq	8f6c <uart_getc+0x4>
    return get32(AUX_MU_IO_REG) & 0xFF;
    8f78:	e59f300c 	ldr	r3, [pc, #12]	; 8f8c <uart_getc+0x24>
    8f7c:	e593001c 	ldr	r0, [r3, #28]
    8f80:	ebffffc3 	bl	8e94 <get32>
}
    8f84:	e6ef0070 	uxtb	r0, r0
    8f88:	e8bd8008 	pop	{r3, pc}
    8f8c:	000093c8 	andeq	r9, r0, r8, asr #7

00008f90 <uart_can_putc>:

// 1 = space to put at least one byte, 0 otherwise.
int uart_can_putc(void) {
    8f90:	e92d4008 	push	{r3, lr}
    return get32(AUX_MU_LSR_REG) & TX_EMPTY;
    8f94:	e59f300c 	ldr	r3, [pc, #12]	; 8fa8 <uart_can_putc+0x18>
    8f98:	e5930000 	ldr	r0, [r3]
    8f9c:	ebffffbc 	bl	8e94 <get32>
}
    8fa0:	e2000020 	and	r0, r0, #32
    8fa4:	e8bd8008 	pop	{r3, pc}
    8fa8:	000093c8 	andeq	r9, r0, r8, asr #7

00008fac <uart_putc>:

// put one byte on the tx qqueue, if needed, blocks
// until TX has space.
void uart_putc(unsigned c) {
    8fac:	e92d4010 	push	{r4, lr}
    8fb0:	e1a04000 	mov	r4, r0
    while(1)
            if(uart_can_putc())  break;
    8fb4:	ebfffff5 	bl	8f90 <uart_can_putc>
    8fb8:	e3500000 	cmp	r0, #0
    8fbc:	0afffffc 	beq	8fb4 <uart_putc+0x8>
    put32(AUX_MU_IO_REG, c);
    8fc0:	e59f300c 	ldr	r3, [pc, #12]	; 8fd4 <uart_putc+0x28>
    8fc4:	e593001c 	ldr	r0, [r3, #28]
    8fc8:	e1a01004 	mov	r1, r4
    8fcc:	ebffffa4 	bl	8e64 <put32>
    8fd0:	e8bd8010 	pop	{r4, pc}
    8fd4:	000093c8 	andeq	r9, r0, r8, asr #7

00008fd8 <uart_has_data>:


// simple wrapper routines useful later.

// a maybe-more intuitive name for clients.
int uart_has_data(void) {
    8fd8:	e92d4008 	push	{r3, lr}
    return uart_can_getc();
    8fdc:	ebffffb3 	bl	8eb0 <uart_can_getc>
}
    8fe0:	e8bd8008 	pop	{r3, pc}

00008fe4 <uart_getc_async>:

int uart_getc_async(void) { 
    8fe4:	e92d4008 	push	{r3, lr}
    if(!uart_has_data())
    8fe8:	ebfffffa 	bl	8fd8 <uart_has_data>
    8fec:	e3500000 	cmp	r0, #0
    8ff0:	0a000001 	beq	8ffc <uart_getc_async+0x18>
        return -1;
    return uart_getc();
    8ff4:	ebffffdb 	bl	8f68 <uart_getc>
    8ff8:	e8bd8008 	pop	{r3, pc}
    return uart_can_getc();
}

int uart_getc_async(void) { 
    if(!uart_has_data())
        return -1;
    8ffc:	e3e00000 	mvn	r0, #0
    return uart_getc();
}
    9000:	e8bd8008 	pop	{r3, pc}

00009004 <gpio_set_output>:
volatile unsigned *GPLEV1 = (void*) 0x20200038;
// Part 1 implement gpio_set_on, gpio_set_off, gpio_set_output

// set <pin> to be an output pin.  note: fsel0, fsel1, fsel2 are contiguous in memory,
// so you can use array calculations!
void gpio_set_output(unsigned pin) {
    9004:	e92d4038 	push	{r3, r4, r5, lr}
    9008:	e1a04000 	mov	r4, r0
    // implement this
    // use gpio_fsel0
    
    if (pin >= 32) {
    900c:	e350001f 	cmp	r0, #31
    9010:	88bd8038 	pophi	{r3, r4, r5, pc}
        return;
    }
    
    volatile unsigned* gpio_reg;
    
    unsigned reg_select = pin / 10;
    9014:	e59f30b4 	ldr	r3, [pc, #180]	; 90d0 <gpio_set_output+0xcc>
    9018:	e0832093 	umull	r2, r3, r3, r0
    901c:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    9020:	e3530005 	cmp	r3, #5
    9024:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    9028:	ea000017 	b	908c <gpio_set_output+0x88>
    902c:	00009044 	andeq	r9, r0, r4, asr #32
    9030:	00009050 	andeq	r9, r0, r0, asr r0
    9034:	0000905c 	andeq	r9, r0, ip, asr r0
    9038:	00009068 	andeq	r9, r0, r8, rrx
    903c:	00009074 	andeq	r9, r0, r4, ror r0
    9040:	00009080 	andeq	r9, r0, r0, lsl #1
        case 0: {gpio_reg = GPFSEL0; break;}
    9044:	e59f3088 	ldr	r3, [pc, #136]	; 90d4 <gpio_set_output+0xd0>
    9048:	e5935000 	ldr	r5, [r3]
    904c:	ea00000f 	b	9090 <gpio_set_output+0x8c>
        case 1: {gpio_reg = GPFSEL1; break;}
    9050:	e59f307c 	ldr	r3, [pc, #124]	; 90d4 <gpio_set_output+0xd0>
    9054:	e5935004 	ldr	r5, [r3, #4]
    9058:	ea00000c 	b	9090 <gpio_set_output+0x8c>
        case 2: {gpio_reg = GPFSEL2; break;}
    905c:	e59f3070 	ldr	r3, [pc, #112]	; 90d4 <gpio_set_output+0xd0>
    9060:	e5935008 	ldr	r5, [r3, #8]
    9064:	ea000009 	b	9090 <gpio_set_output+0x8c>
        case 3: {gpio_reg = GPFSEL3; break;}
    9068:	e59f3064 	ldr	r3, [pc, #100]	; 90d4 <gpio_set_output+0xd0>
    906c:	e593500c 	ldr	r5, [r3, #12]
    9070:	ea000006 	b	9090 <gpio_set_output+0x8c>
        case 4: {gpio_reg = GPFSEL4; break;}
    9074:	e59f3058 	ldr	r3, [pc, #88]	; 90d4 <gpio_set_output+0xd0>
    9078:	e5935010 	ldr	r5, [r3, #16]
    907c:	ea000003 	b	9090 <gpio_set_output+0x8c>
        case 5: {gpio_reg = GPFSEL5; break;}
    9080:	e59f304c 	ldr	r3, [pc, #76]	; 90d4 <gpio_set_output+0xd0>
    9084:	e5935014 	ldr	r5, [r3, #20]
    9088:	ea000000 	b	9090 <gpio_set_output+0x8c>
        default: gpio_reg = 0x0;
    908c:	e3a05000 	mov	r5, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    9090:	e1a00005 	mov	r0, r5
    9094:	ebffff7e 	bl	8e94 <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    9098:	e59f1030 	ldr	r1, [pc, #48]	; 90d0 <gpio_set_output+0xcc>
    909c:	e0813491 	umull	r3, r1, r1, r4
    90a0:	e1a011a1 	lsr	r1, r1, #3
    90a4:	e0811101 	add	r1, r1, r1, lsl #2
    90a8:	e1a01081 	lsl	r1, r1, #1
    90ac:	e0611004 	rsb	r1, r1, r4
    90b0:	e0811081 	add	r1, r1, r1, lsl #1
    90b4:	e3a03007 	mov	r3, #7
    90b8:	e1c03113 	bic	r3, r0, r3, lsl r1
    bitmask |= (1 << ((pin % 10) * 3));
    put32(gpio_reg, bitmask);
    90bc:	e1a00005 	mov	r0, r5
    90c0:	e3a02001 	mov	r2, #1
    90c4:	e1831112 	orr	r1, r3, r2, lsl r1
    90c8:	ebffff65 	bl	8e64 <put32>
    90cc:	e8bd8038 	pop	{r3, r4, r5, pc}
    90d0:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    90d4:	000093fc 	strdeq	r9, [r0], -ip

000090d8 <gpio_set_on>:
    
}


// set GPIO <pin> on.
inline void gpio_set_on(unsigned pin) {
    90d8:	e92d4008 	push	{r3, lr}
    // implement this
    // use gpio_set0
    if (pin >= 32) {
    90dc:	e350001f 	cmp	r0, #31
    90e0:	88bd8008 	pophi	{r3, pc}
    // Get current register value
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPSET0;
    90e4:	959f3020 	ldrls	r3, [pc, #32]	; 910c <gpio_set_on+0x34>
    90e8:	95932018 	ldrls	r2, [r3, #24]
        // TODO: why do we not want this statement?
        //bitmask = get32(GPSET0);
    } else {
        gpio_reg = GPSET1;
    90ec:	859f3018 	ldrhi	r3, [pc, #24]	; 910c <gpio_set_on+0x34>
    90f0:	8593201c 	ldrhi	r2, [r3, #28]
        //bitmask = get32(GPSET1);
        // TODO: why do we not want this statement?
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    90f4:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    90f8:	e1a00002 	mov	r0, r2
    90fc:	e3a01001 	mov	r1, #1
    9100:	e1a01311 	lsl	r1, r1, r3
    9104:	ebffff56 	bl	8e64 <put32>
    9108:	e8bd8008 	pop	{r3, pc}
    910c:	000093fc 	strdeq	r9, [r0], -ip

00009110 <gpio_set_off>:
}

// set GPIO <pin> off
inline void gpio_set_off(unsigned pin) {
    9110:	e92d4008 	push	{r3, lr}
    // implement this
    // use gpio_clr0
    if(pin >= 32) {
    9114:	e350001f 	cmp	r0, #31
    9118:	88bd8008 	pophi	{r3, pc}
    }
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPCLR0;
    911c:	959f3020 	ldrls	r3, [pc, #32]	; 9144 <gpio_set_off+0x34>
    9120:	95932020 	ldrls	r2, [r3, #32]
        //bitmask = get32(GPCLR0);
    } else {
        gpio_reg = GPCLR1;
    9124:	859f3018 	ldrhi	r3, [pc, #24]	; 9144 <gpio_set_off+0x34>
    9128:	85932024 	ldrhi	r2, [r3, #36]	; 0x24
        //bitmask = get32(GPCLR1);
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    912c:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    9130:	e1a00002 	mov	r0, r2
    9134:	e3a01001 	mov	r1, #1
    9138:	e1a01311 	lsl	r1, r1, r3
    913c:	ebffff48 	bl	8e64 <put32>
    9140:	e8bd8008 	pop	{r3, pc}
    9144:	000093fc 	strdeq	r9, [r0], -ip

00009148 <gpio_set_input>:
}

// Part 2: implement gpio_set_input and gpio_read

// set <pin> to input.
void gpio_set_input(unsigned pin) {
    9148:	e92d4038 	push	{r3, r4, r5, lr}
    914c:	e1a04000 	mov	r4, r0
    // implement.
    if(pin >= 32) {
    9150:	e350001f 	cmp	r0, #31
    9154:	88bd8038 	pophi	{r3, r4, r5, pc}
        return;
    }
    
    volatile unsigned* gpio_reg;
    
    unsigned reg_select = pin / 10;
    9158:	e59f30ac 	ldr	r3, [pc, #172]	; 920c <gpio_set_input+0xc4>
    915c:	e0832093 	umull	r2, r3, r3, r0
    9160:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    9164:	e3530005 	cmp	r3, #5
    9168:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    916c:	ea000017 	b	91d0 <gpio_set_input+0x88>
    9170:	00009188 	andeq	r9, r0, r8, lsl #3
    9174:	00009194 	muleq	r0, r4, r1
    9178:	000091a0 	andeq	r9, r0, r0, lsr #3
    917c:	000091ac 	andeq	r9, r0, ip, lsr #3
    9180:	000091b8 			; <UNDEFINED> instruction: 0x000091b8
    9184:	000091c4 	andeq	r9, r0, r4, asr #3
        case 0: {gpio_reg = GPFSEL0; break;}
    9188:	e59f3080 	ldr	r3, [pc, #128]	; 9210 <gpio_set_input+0xc8>
    918c:	e5935000 	ldr	r5, [r3]
    9190:	ea00000f 	b	91d4 <gpio_set_input+0x8c>
        case 1: {gpio_reg = GPFSEL1; break;}
    9194:	e59f3074 	ldr	r3, [pc, #116]	; 9210 <gpio_set_input+0xc8>
    9198:	e5935004 	ldr	r5, [r3, #4]
    919c:	ea00000c 	b	91d4 <gpio_set_input+0x8c>
        case 2: {gpio_reg = GPFSEL2; break;}
    91a0:	e59f3068 	ldr	r3, [pc, #104]	; 9210 <gpio_set_input+0xc8>
    91a4:	e5935008 	ldr	r5, [r3, #8]
    91a8:	ea000009 	b	91d4 <gpio_set_input+0x8c>
        case 3: {gpio_reg = GPFSEL3; break;}
    91ac:	e59f305c 	ldr	r3, [pc, #92]	; 9210 <gpio_set_input+0xc8>
    91b0:	e593500c 	ldr	r5, [r3, #12]
    91b4:	ea000006 	b	91d4 <gpio_set_input+0x8c>
        case 4: {gpio_reg = GPFSEL4; break;}
    91b8:	e59f3050 	ldr	r3, [pc, #80]	; 9210 <gpio_set_input+0xc8>
    91bc:	e5935010 	ldr	r5, [r3, #16]
    91c0:	ea000003 	b	91d4 <gpio_set_input+0x8c>
        case 5: {gpio_reg = GPFSEL5; break;}
    91c4:	e59f3044 	ldr	r3, [pc, #68]	; 9210 <gpio_set_input+0xc8>
    91c8:	e5935014 	ldr	r5, [r3, #20]
    91cc:	ea000000 	b	91d4 <gpio_set_input+0x8c>
        default: gpio_reg = 0x0;
    91d0:	e3a05000 	mov	r5, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    91d4:	e1a00005 	mov	r0, r5
    91d8:	ebffff2d 	bl	8e94 <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    91dc:	e59f1028 	ldr	r1, [pc, #40]	; 920c <gpio_set_input+0xc4>
    91e0:	e0813491 	umull	r3, r1, r1, r4
    91e4:	e1a011a1 	lsr	r1, r1, #3
    91e8:	e0811101 	add	r1, r1, r1, lsl #2
    91ec:	e1a01081 	lsl	r1, r1, #1
    91f0:	e0611004 	rsb	r1, r1, r4
    91f4:	e0811081 	add	r1, r1, r1, lsl #1
    91f8:	e3a03007 	mov	r3, #7
    91fc:	e1c01113 	bic	r1, r0, r3, lsl r1
    put32(gpio_reg, bitmask);
    9200:	e1a00005 	mov	r0, r5
    9204:	ebffff16 	bl	8e64 <put32>
    9208:	e8bd8038 	pop	{r3, r4, r5, pc}
    920c:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    9210:	000093fc 	strdeq	r9, [r0], -ip

00009214 <gpio_read>:
    
    
}

// return the value of <pin>
inline int gpio_read(unsigned pin) {
    9214:	e92d4010 	push	{r4, lr}
    9218:	e1a04000 	mov	r4, r0
    
    if(pin >= 32) {
    921c:	e350001f 	cmp	r0, #31
    9220:	8a00000b 	bhi	9254 <gpio_read+0x40>
        return -1;
    }
    
    unsigned v = 0;
    
    if (pin <= 31){
    9224:	8a000003 	bhi	9238 <gpio_read+0x24>
        v = get32(GPLEV0);
    9228:	e59f302c 	ldr	r3, [pc, #44]	; 925c <gpio_read+0x48>
    922c:	e5930028 	ldr	r0, [r3, #40]	; 0x28
    9230:	ebffff17 	bl	8e94 <get32>
    9234:	ea000002 	b	9244 <gpio_read+0x30>
    } else {
        v = get32(GPLEV1);
    9238:	e59f301c 	ldr	r3, [pc, #28]	; 925c <gpio_read+0x48>
    923c:	e593002c 	ldr	r0, [r3, #44]	; 0x2c
    9240:	ebffff13 	bl	8e94 <get32>
    }
    
    return (v & (1 << (pin % 32)));
    9244:	e204401f 	and	r4, r4, #31
    9248:	e3a03001 	mov	r3, #1
    924c:	e0000413 	and	r0, r0, r3, lsl r4
    9250:	e8bd8010 	pop	{r4, pc}

// return the value of <pin>
inline int gpio_read(unsigned pin) {
    
    if(pin >= 32) {
        return -1;
    9254:	e3e00000 	mvn	r0, #0
    } else {
        v = get32(GPLEV1);
    }
    
    return (v & (1 << (pin % 32)));
}
    9258:	e8bd8010 	pop	{r4, pc}
    925c:	000093fc 	strdeq	r9, [r0], -ip

00009260 <gpio_write>:

// set <pin> to <v> (v \in {0,1})
inline void gpio_write(unsigned pin, unsigned v) {
    9260:	e92d4008 	push	{r3, lr}
    
    if(pin >= 32) {
    9264:	e350001f 	cmp	r0, #31
    9268:	88bd8008 	pophi	{r3, pc}
        return;
    }
    
    if(v)
    926c:	e3510000 	cmp	r1, #0
    9270:	0a00000b 	beq	92a4 <gpio_write+0x44>

// set GPIO <pin> on.
inline void gpio_set_on(unsigned pin) {
    // implement this
    // use gpio_set0
    if (pin >= 32) {
    9274:	e350001f 	cmp	r0, #31
    9278:	88bd8008 	pophi	{r3, pc}
    // Get current register value
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPSET0;
    927c:	959f3050 	ldrls	r3, [pc, #80]	; 92d4 <gpio_write+0x74>
    9280:	95932018 	ldrls	r2, [r3, #24]
        // TODO: why do we not want this statement?
        //bitmask = get32(GPSET0);
    } else {
        gpio_reg = GPSET1;
    9284:	859f3048 	ldrhi	r3, [pc, #72]	; 92d4 <gpio_write+0x74>
    9288:	8593201c 	ldrhi	r2, [r3, #28]
        //bitmask = get32(GPSET1);
        // TODO: why do we not want this statement?
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    928c:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    9290:	e1a00002 	mov	r0, r2
    9294:	e3a01001 	mov	r1, #1
    9298:	e1a01311 	lsl	r1, r1, r3
    929c:	ebfffef0 	bl	8e64 <put32>
    92a0:	e8bd8008 	pop	{r3, pc}

// set GPIO <pin> off
inline void gpio_set_off(unsigned pin) {
    // implement this
    // use gpio_clr0
    if(pin >= 32) {
    92a4:	e350001f 	cmp	r0, #31
    92a8:	88bd8008 	pophi	{r3, pc}
    }
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPCLR0;
    92ac:	959f3020 	ldrls	r3, [pc, #32]	; 92d4 <gpio_write+0x74>
    92b0:	95932020 	ldrls	r2, [r3, #32]
        //bitmask = get32(GPCLR0);
    } else {
        gpio_reg = GPCLR1;
    92b4:	859f3018 	ldrhi	r3, [pc, #24]	; 92d4 <gpio_write+0x74>
    92b8:	85932024 	ldrhi	r2, [r3, #36]	; 0x24
        //bitmask = get32(GPCLR1);
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    92bc:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    92c0:	e1a00002 	mov	r0, r2
    92c4:	e3a01001 	mov	r1, #1
    92c8:	e1a01311 	lsl	r1, r1, r3
    92cc:	ebfffee4 	bl	8e64 <put32>
    92d0:	e8bd8008 	pop	{r3, pc}
    92d4:	000093fc 	strdeq	r9, [r0], -ip

000092d8 <gpio_set_function>:
        gpio_set_on(pin);
    else
        gpio_set_off(pin);
}

void gpio_set_function(unsigned pin, gpio_func_t func) {
    92d8:	e92d4070 	push	{r4, r5, r6, lr}
    92dc:	e1a04000 	mov	r4, r0
    92e0:	e1a05001 	mov	r5, r1
    // implement this
    // use gpio_fsel0
    
    if (pin >= 32 || func >= 8) {
    92e4:	e3510007 	cmp	r1, #7
    92e8:	9350001f 	cmpls	r0, #31
    92ec:	88bd8070 	pophi	{r4, r5, r6, pc}
        return;
    }

    volatile unsigned* gpio_reg;
    unsigned reg_select = pin / 10;
    92f0:	e59f30b0 	ldr	r3, [pc, #176]	; 93a8 <gpio_set_function+0xd0>
    92f4:	e0832093 	umull	r2, r3, r3, r0
    92f8:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    92fc:	e3530005 	cmp	r3, #5
    9300:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    9304:	ea000017 	b	9368 <gpio_set_function+0x90>
    9308:	00009320 	andeq	r9, r0, r0, lsr #6
    930c:	0000932c 	andeq	r9, r0, ip, lsr #6
    9310:	00009338 	andeq	r9, r0, r8, lsr r3
    9314:	00009344 	andeq	r9, r0, r4, asr #6
    9318:	00009350 	andeq	r9, r0, r0, asr r3
    931c:	0000935c 	andeq	r9, r0, ip, asr r3
        case 0: {gpio_reg = GPFSEL0; break;}
    9320:	e59f3084 	ldr	r3, [pc, #132]	; 93ac <gpio_set_function+0xd4>
    9324:	e5936000 	ldr	r6, [r3]
    9328:	ea00000f 	b	936c <gpio_set_function+0x94>
        case 1: {gpio_reg = GPFSEL1; break;}
    932c:	e59f3078 	ldr	r3, [pc, #120]	; 93ac <gpio_set_function+0xd4>
    9330:	e5936004 	ldr	r6, [r3, #4]
    9334:	ea00000c 	b	936c <gpio_set_function+0x94>
        case 2: {gpio_reg = GPFSEL2; break;}
    9338:	e59f306c 	ldr	r3, [pc, #108]	; 93ac <gpio_set_function+0xd4>
    933c:	e5936008 	ldr	r6, [r3, #8]
    9340:	ea000009 	b	936c <gpio_set_function+0x94>
        case 3: {gpio_reg = GPFSEL3; break;}
    9344:	e59f3060 	ldr	r3, [pc, #96]	; 93ac <gpio_set_function+0xd4>
    9348:	e593600c 	ldr	r6, [r3, #12]
    934c:	ea000006 	b	936c <gpio_set_function+0x94>
        case 4: {gpio_reg = GPFSEL4; break;}
    9350:	e59f3054 	ldr	r3, [pc, #84]	; 93ac <gpio_set_function+0xd4>
    9354:	e5936010 	ldr	r6, [r3, #16]
    9358:	ea000003 	b	936c <gpio_set_function+0x94>
        case 5: {gpio_reg = GPFSEL5; break;}
    935c:	e59f3048 	ldr	r3, [pc, #72]	; 93ac <gpio_set_function+0xd4>
    9360:	e5936014 	ldr	r6, [r3, #20]
    9364:	ea000000 	b	936c <gpio_set_function+0x94>
        default: gpio_reg = 0x0;
    9368:	e3a06000 	mov	r6, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    936c:	e1a00006 	mov	r0, r6
    9370:	ebfffec7 	bl	8e94 <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    9374:	e59f302c 	ldr	r3, [pc, #44]	; 93a8 <gpio_set_function+0xd0>
    9378:	e0832493 	umull	r2, r3, r3, r4
    937c:	e1a031a3 	lsr	r3, r3, #3
    9380:	e0833103 	add	r3, r3, r3, lsl #2
    9384:	e1a03083 	lsl	r3, r3, #1
    9388:	e0633004 	rsb	r3, r3, r4
    938c:	e0833083 	add	r3, r3, r3, lsl #1
    9390:	e3a01007 	mov	r1, #7
    9394:	e1c01311 	bic	r1, r0, r1, lsl r3
    bitmask |= (func << ((pin % 10) * 3));
    put32(gpio_reg, bitmask);
    9398:	e1a00006 	mov	r0, r6
    939c:	e1811315 	orr	r1, r1, r5, lsl r3
    93a0:	ebfffeaf 	bl	8e64 <put32>
    93a4:	e8bd8070 	pop	{r4, r5, r6, pc}
    93a8:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    93ac:	000093fc 	strdeq	r9, [r0], -ip

000093b0 <internal_putchar>:
#include "rpi.h"

static int internal_putchar(int c) { uart_putc(c); return c; }
    93b0:	e92d4010 	push	{r4, lr}
    93b4:	e1a04000 	mov	r4, r0
    93b8:	ebfffefb 	bl	8fac <uart_putc>
    93bc:	e1a00004 	mov	r0, r4
    93c0:	e8bd8010 	pop	{r4, pc}

Disassembly of section .data:

000093c4 <putk>:
    93c4:	00008780 	andeq	r8, r0, r0, lsl #15

000093c8 <AUX_MU_LSR_REG>:
    93c8:	20215054 	eorcs	r5, r1, r4, asr r0

000093cc <AUX_ENABLES>:
    93cc:	20215004 	eorcs	r5, r1, r4

000093d0 <AUX_MU_CNTL_REG>:
    93d0:	20215060 	eorcs	r5, r1, r0, rrx

000093d4 <AUX_MU_IER_REG>:
    93d4:	20215044 	eorcs	r5, r1, r4, asr #32

000093d8 <AUX_MU_IIR_REG>:
    93d8:	20215048 	eorcs	r5, r1, r8, asr #32

000093dc <AUX_MU_LCR_REG>:
    93dc:	2021504c 	eorcs	r5, r1, ip, asr #32

000093e0 <AUX_MU_BAUD_REG>:
    93e0:	20215068 	eorcs	r5, r1, r8, rrx

000093e4 <AUX_MU_IO_REG>:
    93e4:	20215040 	eorcs	r5, r1, r0, asr #32

000093e8 <AUX_MU_STAT_REG>:
    93e8:	20215064 	eorcs	r5, r1, r4, rrx

000093ec <AUX_MU_SCRATCH>:
    93ec:	2021505c 	eorcs	r5, r1, ip, asr r0

000093f0 <AUX_MU_MSR_REG>:
    93f0:	20215058 	eorcs	r5, r1, r8, asr r0

000093f4 <AUX_MU_MCR_REG>:
    93f4:	20215050 	eorcs	r5, r1, r0, asr r0

000093f8 <AUX_IRQ>:
    93f8:	20215000 	eorcs	r5, r1, r0

000093fc <GPFSEL0>:
    93fc:	20200000 	eorcs	r0, r0, r0

00009400 <GPFSEL1>:
    9400:	20200004 	eorcs	r0, r0, r4

00009404 <GPFSEL2>:
    9404:	20200008 	eorcs	r0, r0, r8

00009408 <GPFSEL3>:
    9408:	2020000c 	eorcs	r0, r0, ip

0000940c <GPFSEL4>:
    940c:	20200010 	eorcs	r0, r0, r0, lsl r0

00009410 <GPFSEL5>:
    9410:	20200014 	eorcs	r0, r0, r4, lsl r0

00009414 <GPSET0>:
    9414:	2020001c 	eorcs	r0, r0, ip, lsl r0

00009418 <GPSET1>:
    9418:	20200020 	eorcs	r0, r0, r0, lsr #32

0000941c <GPCLR0>:
    941c:	20200028 	eorcs	r0, r0, r8, lsr #32

00009420 <GPCLR1>:
    9420:	2020002c 	eorcs	r0, r0, ip, lsr #32

00009424 <GPLEV0>:
    9424:	20200034 	eorcs	r0, r0, r4, lsr r0

00009428 <GPLEV1>:
    9428:	20200038 	eorcs	r0, r0, r8, lsr r0

0000942c <gpio_clr0>:
    942c:	20200028 	eorcs	r0, r0, r8, lsr #32

00009430 <gpio_set0>:
    9430:	2020001c 	eorcs	r0, r0, ip, lsl r0

00009434 <gpio_fsel0>:
    9434:	20200000 	eorcs	r0, r0, r0

00009438 <rpi_putchar>:
    9438:	000093b0 			; <UNDEFINED> instruction: 0x000093b0

Disassembly of section .rodata:

0000943c <__FUNCTION__.4184>:
    943c:	6d746f6e 	ldclvs	15, cr6, [r4, #-440]!	; 0xfffffe48
    9440:	006e6961 	rsbeq	r6, lr, r1, ror #18
    9444:	203a6425 	eorscs	r6, sl, r5, lsr #8
    9448:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xe65
    944c:	756d2072 	strbvc	r2, [sp, #-114]!	; 0x72
    9450:	7069746c 	rsbvc	r7, r9, ip, ror #8
    9454:	6c20656c 	cfstr32vs	mvfx6, [r0], #-432	; 0xfffffe50
    9458:	73656e69 	cmnvc	r5, #1680	; 0x690
    945c:	6977202c 	ldmdbvs	r7!, {r2, r3, r5, sp}^
    9460:	73206c6c 	teqvc	r0, #108, 24	; 0x6c00
    9464:	20706f74 	rsbscs	r6, r0, r4, ror pc
    9468:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
    946c:	20676e69 	rsbcs	r6, r7, r9, ror #28
    9470:	6e656877 	mcrvs	8, 3, r6, cr5, cr7, {3}
    9474:	6c646920 	stclvs	9, cr6, [r4], #-128	; 0xffffff80
    9478:	6f662065 	svcvs	0x00662065
    947c:	64253d72 	strtvs	r3, [r5], #-3442	; 0xd72
    9480:	29636573 	stmdbcs	r3!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    9484:	00000a3a 	andeq	r0, r0, sl, lsr sl
    9488:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    948c:	3a74756f 	bcc	1d26a50 <__bss_end__+0x1d1cf00>
    9490:	73657220 	cmnvc	r5, #32, 4
    9494:	0a64253d 	beq	1912990 <__bss_end__+0x1908e40>
    9498:	00000000 	andeq	r0, r0, r0
    949c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    94a0:	73253a43 	teqvc	r5, #274432	; 0x43000
    94a4:	3a73253a 	bcc	1cd2994 <__bss_end__+0x1cc8e44>
    94a8:	733a6425 	teqvc	sl, #620756992	; 0x25000000
    94ac:	656c7274 	strbvs	r7, [ip, #-628]!	; 0x274
    94b0:	7562286e 	strbvc	r2, [r2, #-2158]!	; 0x86e
    94b4:	3d202966 	stccc	9, cr2, [r0, #-408]!	; 0xfffffe68
    94b8:	6572203d 	ldrbvs	r2, [r2, #-61]!	; 0x3d
    94bc:	00000a73 	andeq	r0, r0, r3, ror sl
    94c0:	65672d33 	strbvs	r2, [r7, #-3379]!	; 0xd33
    94c4:	742d7374 	strtvc	r7, [sp], #-884	; 0x374
    94c8:	6f656d69 	svcvs	0x00656d69
    94cc:	742d7475 	strtvc	r7, [sp], #-1141	; 0x475
    94d0:	2e747365 	cdpcs	3, 7, cr7, cr4, cr5, {3}
    94d4:	00000063 	andeq	r0, r0, r3, rrx
    94d8:	552d5753 	strpl	r5, [sp, #-1875]!	; 0x753
    94dc:	3a545241 	bcc	151dde8 <__bss_end__+0x1514298>
    94e0:	746f6720 	strbtvc	r6, [pc], #-1824	; 94e8 <__FUNCTION__.4184+0xac>
    94e4:	79626e20 	stmdbvc	r2!, {r5, r9, sl, fp, sp, lr}^
    94e8:	3d736574 	cfldr64cc	mvdx6, [r3, #-464]!	; 0xfffffe30
    94ec:	202c6425 	eorcs	r6, ip, r5, lsr #8
    94f0:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    94f4:	3c20676e 	stccc	7, cr6, [r0], #-440	; 0xfffffe48
    94f8:	0a3e7325 	beq	fa6194 <__bss_end__+0xf9c644>
    94fc:	00000000 	andeq	r0, r0, r0

00009500 <__FUNCTION__.4245>:
    9500:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 8d95 <rpi_reboot+0x29>
    9504:	5f747261 	svcpl	0x00747261
    9508:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
    950c:	746e755f 	strbtvc	r7, [lr], #-1375	; 0x55f
    9510:	00006c69 	andeq	r6, r0, r9, ror #24

00009514 <__FUNCTION__.4257>:
    9514:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 8da9 <rpi_reboot+0x3d>
    9518:	5f747261 	svcpl	0x00747261
    951c:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
    9520:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    9524:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
    9528:	00000000 	andeq	r0, r0, r0

0000952c <__FUNCTION__.4271>:
    952c:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 8dc1 <delay_cycles+0xd>
    9530:	5f747261 	svcpl	0x00747261
    9534:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    9538:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
    953c:	00726570 	rsbseq	r6, r2, r0, ror r5

00009540 <__FUNCTION__.4277>:
    9540:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 8dd5 <timer_get_usec_raw+0x5>
    9544:	5f747261 	svcpl	0x00747261
    9548:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
    954c:	00000000 	andeq	r0, r0, r0

00009550 <__FUNCTION__.4299>:
    9550:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 8de5 <timer_get_usec+0x1>
    9554:	5f747261 	svcpl	0x00747261
    9558:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    955c:	00006b74 	andeq	r6, r0, r4, ror fp

00009560 <__FUNCTION__.4307>:
    9560:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 8df5 <timer_get_usec+0x11>
    9564:	5f747261 	svcpl	0x00747261
    9568:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
    956c:	746e755f 	strbtvc	r7, [lr], #-1375	; 0x55f
    9570:	625f6c69 	subsvs	r6, pc, #26880	; 0x6900
    9574:	00006b6c 	andeq	r6, r0, ip, ror #22
    9578:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    957c:	73253a43 	teqvc	r5, #274432	; 0x43000
    9580:	3a73253a 	bcc	1cd2a70 <__bss_end__+0x1cc8f20>
    9584:	6e3a6425 	cdpvs	4, 3, cr6, cr10, cr5, {1}
    9588:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
    958c:	0a303e73 	beq	c18f60 <__bss_end__+0xc0f410>
    9590:	00000000 	andeq	r0, r0, r0
    9594:	752d7773 	strvc	r7, [sp, #-1907]!	; 0x773
    9598:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    959c:	00000063 	andeq	r0, r0, r3, rrx
    95a0:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    95a4:	73253a43 	teqvc	r5, #274432	; 0x43000
    95a8:	3a73253a 	bcc	1cd2a98 <__bss_end__+0x1cc8f48>
    95ac:	283a6425 	ldmdacs	sl!, {r0, r2, r5, sl, sp, lr}
    95b0:	207a686d 	rsbscs	r6, sl, sp, ror #16
    95b4:	6162202d 	cmnvs	r2, sp, lsr #32
    95b8:	20296475 	eorcs	r6, r9, r5, ror r4
    95bc:	64203d3c 	strtvs	r3, [r0], #-3388	; 0xd3c
    95c0:	76697265 	strbtvc	r7, [r9], -r5, ror #4
    95c4:	26206465 	strtcs	r6, [r0], -r5, ror #8
    95c8:	65642026 	strbvs	r2, [r4, #-38]!	; 0x26
    95cc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    95d0:	3d3c2064 	ldccc	0, cr2, [ip, #-400]!	; 0xfffffe70
    95d4:	686d2820 	stmdavs	sp!, {r5, fp, sp}^
    95d8:	202b207a 	eorcs	r2, fp, sl, ror r0
    95dc:	64756162 	ldrbtvs	r6, [r5], #-354	; 0x162
    95e0:	00000a29 	andeq	r0, r0, r9, lsr #20
    95e4:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    95e8:	73253a43 	teqvc	r5, #274432	; 0x43000
    95ec:	3a73253a 	bcc	1cd2adc <__bss_end__+0x1cc8f8c>
    95f0:	693a6425 	ldmdbvs	sl!, {r0, r2, r5, sl, sp, lr}
    95f4:	736f706d 	cmnvc	pc, #109	; 0x6d
    95f8:	6c626973 	stclvs	9, cr6, [r2], #-460	; 0xfffffe34
    95fc:	68203a65 	stmdavs	r0!, {r0, r2, r5, r6, r9, fp, ip, sp}
    9600:	20657661 	rsbcs	r7, r5, r1, ror #12
    9604:	69206e61 	stmdbvs	r0!, {r0, r5, r6, r9, sl, fp, sp, lr}
    9608:	6e69666e 	cdpvs	6, 6, cr6, cr9, cr14, {3}
    960c:	20657469 	rsbcs	r7, r5, r9, ror #8
    9610:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    9614:	2174756f 	cmncs	r4, pc, ror #10
    9618:	00000a0a 	andeq	r0, r0, sl, lsl #20
    961c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9620:	73253a43 	teqvc	r5, #274432	; 0x43000
    9624:	3a73253a 	bcc	1cd2b14 <__bss_end__+0x1cc8fc4>
    9628:	733a6425 	teqvc	sl, #620756992	; 0x25000000
    962c:	203c207a 	eorscs	r2, ip, sl, ror r0
    9630:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
    9634:	6220666f 	eorvs	r6, r0, #116391936	; 0x6f00000
    9638:	312d6675 	teqcc	sp, r5, ror r6
    963c:	0000000a 	andeq	r0, r0, sl

00009640 <__FUNCTION__.4197>:
    9640:	74696d65 	strbtvc	r6, [r9], #-3429	; 0xd65
    9644:	00000000 	andeq	r0, r0, r0

00009648 <__FUNCTION__.4145>:
    9648:	5f697072 	svcpl	0x00697072
    964c:	5f746573 	svcpl	0x00746573
    9650:	7074756f 	rsbsvc	r7, r4, pc, ror #10
    9654:	00007475 	andeq	r7, r0, r5, ror r4

00009658 <__FUNCTION__.4219>:
    9658:	705f6176 	subsvc	r6, pc, r6, ror r1	; <UNPREDICTABLE>
    965c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    9660:	0000006b 	andeq	r0, r0, fp, rrx
    9664:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9668:	73253a43 	teqvc	r5, #274432	; 0x43000
    966c:	3a73253a 	bcc	1cd2b5c <__bss_end__+0x1cc900c>
    9670:	303a6425 	eorscc	r6, sl, r5, lsr #8
    9674:	0000000a 	andeq	r0, r0, sl
    9678:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    967c:	2d61762f 	stclcs	6, cr7, [r1, #-188]!	; 0xffffff44
    9680:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    9684:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
    9688:	00000000 	andeq	r0, r0, r0
    968c:	33323130 	teqcc	r2, #48, 2
    9690:	37363534 			; <UNDEFINED> instruction: 0x37363534
    9694:	00003938 	andeq	r3, r0, r8, lsr r9
    9698:	33323130 	teqcc	r2, #48, 2
    969c:	37363534 			; <UNDEFINED> instruction: 0x37363534
    96a0:	62613938 	rsbvs	r3, r1, #56, 18	; 0xe0000
    96a4:	66656463 	strbtvs	r6, [r5], -r3, ror #8
    96a8:	00000000 	andeq	r0, r0, r0
    96ac:	00003130 	andeq	r3, r0, r0, lsr r1
    96b0:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    96b4:	73253a43 	teqvc	r5, #274432	; 0x43000
    96b8:	3a73253a 	bcc	1cd2ba8 <__bss_end__+0x1cc9058>
    96bc:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    96c0:	5f637475 	svcpl	0x00637475
    96c4:	000a7066 	andeq	r7, sl, r6, rrx
    96c8:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    96cc:	73253a43 	teqvc	r5, #274432	; 0x43000
    96d0:	3a73253a 	bcc	1cd2bc0 <__bss_end__+0x1cc9070>
    96d4:	773a6425 	ldrvc	r6, [sl, -r5, lsr #8]!
    96d8:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
    96dc:	33203c20 	teqcc	r0, #32, 24	; 0x2000
    96e0:	00000a32 	andeq	r0, r0, r2, lsr sl
    96e4:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    96e8:	73253a43 	teqvc	r5, #274432	; 0x43000
    96ec:	3a73253a 	bcc	1cd2bdc <__bss_end__+0x1cc908c>
    96f0:	663a6425 	ldrtvs	r6, [sl], -r5, lsr #8
    96f4:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xf6c
    96f8:	746f6e20 	strbtvc	r6, [pc], #-3616	; 9700 <__FUNCTION__.4219+0xa8>
    96fc:	616e6520 	cmnvs	lr, r0, lsr #10
    9700:	64656c62 	strbtvs	r6, [r5], #-3170	; 0xc62
    9704:	0a212121 	beq	851b90 <__bss_end__+0x848040>
    9708:	00000000 	andeq	r0, r0, r0
    970c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    9710:	73253a43 	teqvc	r5, #274432	; 0x43000
    9714:	3a73253a 	bcc	1cd2c04 <__bss_end__+0x1cc90b4>
    9718:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    971c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    9720:	6e203a6b 	vnmulvs.f32	s6, s0, s23
    9724:	6820746f 	stmdavs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
    9728:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    972c:	20676e69 	rsbcs	r6, r7, r9, ror #28
    9730:	63657073 	cmnvs	r5, #115	; 0x73
    9734:	65696669 	strbvs	r6, [r9, #-1641]!	; 0x669
    9738:	25272072 	strcs	r2, [r7, #-114]!	; 0x72
    973c:	0a0a2763 	beq	2934d0 <__bss_end__+0x289980>
    9740:	00000000 	andeq	r0, r0, r0
    9744:	454e4f44 	strbmi	r4, [lr, #-3908]	; 0xf44
    9748:	0a212121 	beq	851bd4 <__bss_end__+0x848084>
    974c:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss:

00009750 <__bss_start__>:
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4b5a3605 	blmi	168d82c <__bss_end__+0x1683cdc>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	12010901 	andne	r0, r1, #16384	; 0x4000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0x404
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	22011a01 	andcs	r1, r1, #4096	; 0x1000
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__bss_end__+0x10c71d4>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	34202955 	strtcc	r2, [r0], #-2389	; 0x955
   c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000034f 	andeq	r0, r0, pc, asr #6
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000029 	andeq	r0, r0, r9, lsr #32
      10:	00008801 	andeq	r8, r0, r1, lsl #16
      14:	00016d00 	andeq	r6, r1, r0, lsl #26
      18:	00801000 	addeq	r1, r0, r0
      1c:	00011800 	andeq	r1, r1, r0, lsl #16
      20:	00000000 	andeq	r0, r0, r0
      24:	05040200 	streq	r0, [r4, #-512]	; 0x200
      28:	00746e69 	rsbseq	r6, r4, r9, ror #28
      2c:	00000e03 	andeq	r0, r0, r3, lsl #28
      30:	37d40200 	ldrbcc	r0, [r4, r0, lsl #4]
      34:	04000000 	streq	r0, [r0], #-0
      38:	01000704 	tsteq	r0, r4, lsl #14
      3c:	01040000 	mrseq	r0, (UNDEF: 4)
      40:	0000aa06 	andeq	sl, r0, r6, lsl #20
      44:	05020400 	streq	r0, [r2, #-1024]	; 0x400
      48:	00000131 	andeq	r0, r0, r1, lsr r1
      4c:	28050404 	stmdacs	r5, {r2, sl}
      50:	04000001 	streq	r0, [r0], #-1
      54:	01230508 	teqeq	r3, r8, lsl #10
      58:	0d030000 	stceq	0, cr0, [r3, #-0]
      5c:	03000001 	movweq	r0, #1
      60:	0000652e 	andeq	r6, r0, lr, lsr #10
      64:	08010400 	stmdaeq	r1, {sl}
      68:	000000a8 	andeq	r0, r0, r8, lsr #1
      6c:	cc070204 	sfmgt	f0, 4, [r7], {4}
      70:	03000000 	movweq	r0, #0
      74:	0000015d 	andeq	r0, r0, sp, asr r1
      78:	007e3403 	rsbseq	r3, lr, r3, lsl #8
      7c:	04040000 	streq	r0, [r4], #-0
      80:	0000fb07 	andeq	pc, r0, r7, lsl #22
      84:	07080400 	streq	r0, [r8, -r0, lsl #8]
      88:	000000f6 	strdeq	r0, [r0], -r6
      8c:	1a070404 	bne	1c10a4 <__bss_end__+0x1b7554>
      90:	04000001 	streq	r0, [r0], #-1
      94:	00b10801 	adcseq	r0, r1, r1, lsl #16
      98:	04050000 	streq	r0, [r5], #-0
      9c:	000000a0 	andeq	r0, r0, r0, lsr #1
      a0:	00009306 	andeq	r9, r0, r6, lsl #6
      a4:	00930700 	addseq	r0, r3, r0, lsl #14
      a8:	00b50000 	adcseq	r0, r5, r0
      ac:	8c080000 	stchi	0, cr0, [r8], {-0}
      b0:	07000000 	streq	r0, [r0, -r0]
      b4:	040c0900 	streq	r0, [ip], #-2304	; 0x900
      b8:	0000ec0e 	andeq	lr, r0, lr, lsl #24
      bc:	78740a00 	ldmdavc	r4!, {r9, fp}^
      c0:	5a0f0400 	bpl	3c10c8 <__bss_end__+0x3b7578>
      c4:	00000000 	andeq	r0, r0, r0
      c8:	0078720a 	rsbseq	r7, r8, sl, lsl #4
      cc:	005a0f04 	subseq	r0, sl, r4, lsl #30
      d0:	0b010000 	bleq	400d8 <__bss_end__+0x36588>
      d4:	00000115 	andeq	r0, r0, r5, lsl r1
      d8:	00731004 	rsbseq	r1, r3, r4
      dc:	0b040000 	bleq	1000e4 <__bss_end__+0xf6594>
      e0:	00000000 	andeq	r0, r0, r0
      e4:	00731104 	rsbseq	r1, r3, r4, lsl #2
      e8:	00080000 	andeq	r0, r8, r0
      ec:	0000df03 	andeq	sp, r0, r3, lsl #30
      f0:	b5120400 	ldrlt	r0, [r2, #-1024]	; 0x400
      f4:	0c000000 	stceq	0, cr0, [r0], {-0}
      f8:	00000080 	andeq	r0, r0, r0, lsl #1
      fc:	80100601 	andshi	r0, r0, r1, lsl #12
     100:	01180000 	tsteq	r8, r0
     104:	9c010000 	stcls	0, cr0, [r1], {-0}
     108:	0000029b 	muleq	r0, fp, r2
     10c:	0100750d 	tsteq	r0, sp, lsl #10
     110:	0000ec0b 	andeq	lr, r0, fp, lsl #24
     114:	54910200 	ldrpl	r0, [r1], #512	; 0x200
     118:	0000e90e 	andeq	lr, r0, lr, lsl #18
     11c:	00029b00 	andeq	r9, r2, r0, lsl #22
     120:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
     124:	0f000094 	svceq	0x00000094
     128:	00008044 	andeq	r8, r0, r4, asr #32
     12c:	000000bc 	strheq	r0, [r0], -ip
     130:	00000251 	andeq	r0, r0, r1, asr r2
     134:	01006910 	tsteq	r0, r0, lsl r9
     138:	0000250d 	andeq	r2, r0, sp, lsl #10
     13c:	00000000 	andeq	r0, r0, r0
     140:	00001100 	andeq	r1, r0, r0, lsl #2
     144:	df120000 	svcle	0x00120000
     148:	01000002 	tsteq	r0, r2
     14c:	0000370e 	andeq	r3, r0, lr, lsl #14
     150:	00001f00 	andeq	r1, r0, r0, lsl #30
     154:	75620d00 	strbvc	r0, [r2, #-3328]!	; 0xd00
     158:	12010066 	andne	r0, r1, #102	; 0x66
     15c:	000002a0 	andeq	r0, r0, r0, lsr #5
     160:	77d49103 	ldrbvc	r9, [r4, r3, lsl #2]
     164:	73657210 	cmnvc	r5, #16, 4
     168:	25140100 	ldrcs	r0, [r4, #-256]	; 0x100
     16c:	33000000 	movwcc	r0, #0
     170:	13000000 	movwne	r0, #0
     174:	00008070 	andeq	r8, r0, r0, ror r0
     178:	000002b1 			; <UNDEFINED> instruction: 0x000002b1
     17c:	00000192 	muleq	r0, r2, r1
     180:	01520114 	cmpeq	r2, r4, lsl r1
     184:	51011433 	tstpl	r1, r3, lsr r4
     188:	14007402 	strne	r7, [r0], #-1026	; 0x402
     18c:	78025001 	stmdavc	r2, {r0, ip, lr}
     190:	88130000 	ldmdahi	r3, {}	; <UNPREDICTABLE>
     194:	c7000080 	strgt	r0, [r0, -r0, lsl #1]
     198:	b9000002 	stmdblt	r0, {r1}
     19c:	14000001 	strne	r0, [r0], #-1
     1a0:	77025301 	strvc	r5, [r2, -r1, lsl #6]
     1a4:	52011400 	andpl	r1, r1, #0, 8
     1a8:	04000a03 	streq	r0, [r0], #-2563	; 0xa03
     1ac:	02510114 	subseq	r0, r1, #20, 2
     1b0:	01140076 	tsteq	r4, r6, ror r0
     1b4:	4c910250 	lfmmi	f0, 4, [r1], {80}	; 0x50
     1b8:	809c1300 	addshi	r1, ip, r0, lsl #6
     1bc:	02b10000 	adcseq	r0, r1, #0
     1c0:	01d30000 	bicseq	r0, r3, r0
     1c4:	01140000 	tsteq	r4, r0
     1c8:	00750251 	rsbseq	r0, r5, r1, asr r2
     1cc:	02500114 	subseq	r0, r0, #20, 2
     1d0:	13000079 	movwne	r0, #121	; 0x79
     1d4:	000080a8 	andeq	r8, r0, r8, lsr #1
     1d8:	000002f7 	strdeq	r0, [r0], -r7
     1dc:	000001e7 	andeq	r0, r0, r7, ror #3
     1e0:	02500114 	subseq	r0, r0, #20, 2
     1e4:	13000076 	movwne	r0, #118	; 0x76
     1e8:	000080c4 	andeq	r8, r0, r4, asr #1
     1ec:	000002b1 			; <UNDEFINED> instruction: 0x000002b1
     1f0:	00000215 	andeq	r0, r0, r5, lsl r2
     1f4:	01530114 	cmpeq	r3, r4, lsl r1
     1f8:	52011449 	andpl	r1, r1, #1224736768	; 0x49000000
     1fc:	943c0305 	ldrtls	r0, [ip], #-773	; 0x305
     200:	01140000 	tsteq	r4, r0
     204:	c0030551 	andgt	r0, r3, r1, asr r5
     208:	14000094 	strne	r0, [r0], #-148	; 0x94
     20c:	03055001 	movweq	r5, #20481	; 0x5001
     210:	0000949c 	muleq	r0, ip, r4
     214:	80c81500 	sbchi	r1, r8, r0, lsl #10
     218:	030c0000 	movweq	r0, #49152	; 0xc000
     21c:	ec130000 	ldc	0, cr0, [r3], {-0}
     220:	b1000080 	smlabblt	r0, r0, r0, r0
     224:	3e000002 	cdpcc	0, 0, cr0, cr0, cr2, {0}
     228:	14000002 	strne	r0, [r0], #-2
     22c:	76025201 	strvc	r5, [r2], -r1, lsl #4
     230:	51011400 	tstpl	r1, r0, lsl #8
     234:	14007502 	strne	r7, [r0], #-1282	; 0x502
     238:	7a025001 	bvc	94244 <__bss_end__+0x8a6f4>
     23c:	f4160000 			; <UNDEFINED> instruction: 0xf4160000
     240:	13000080 	movwne	r0, #128	; 0x80
     244:	14000003 	strne	r0, [r0], #-3
     248:	0a035001 	beq	d4254 <__bss_end__+0xca704>
     24c:	000007d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     250:	80201500 	eorhi	r1, r0, r0, lsl #10
     254:	03240000 	teqeq	r4, #0
     258:	24150000 	ldrcs	r0, [r5], #-0
     25c:	2b000080 	blcs	464 <_start-0x7b9c>
     260:	13000003 	movwne	r0, #3
     264:	00008044 	andeq	r8, r0, r4, asr #32
     268:	00000332 	andeq	r0, r0, r2, lsr r3
     26c:	00000291 	muleq	r0, r1, r2
     270:	04530114 	ldrbeq	r0, [r3], #-276	; 0x114
     274:	2439e108 	ldrtcs	lr, [r9], #-264	; 0x108
     278:	01520114 	cmpeq	r2, r4, lsl r1
     27c:	51011445 	tstpl	r1, r5, asr #8
     280:	01144401 	tsteq	r4, r1, lsl #8
     284:	4c910250 	lfmmi	f0, 4, [r1], {80}	; 0x50
     288:	007d0214 	rsbseq	r0, sp, r4, lsl r2
     28c:	17bc0a03 	ldrne	r0, [ip, r3, lsl #20]!
     290:	81041500 	tsthi	r4, r0, lsl #10
     294:	030c0000 	movweq	r0, #49152	; 0xc000
     298:	06000000 	streq	r0, [r0], -r0
     29c:	000000a5 	andeq	r0, r0, r5, lsr #1
     2a0:	00009307 	andeq	r9, r0, r7, lsl #6
     2a4:	0002b100 	andeq	fp, r2, r0, lsl #2
     2a8:	008c1700 	addeq	r1, ip, r0, lsl #14
     2ac:	03ff0000 	mvnseq	r0, #0
     2b0:	026f1800 	rsbeq	r1, pc, #0, 16
     2b4:	27050000 	strcs	r0, [r5, -r0]
     2b8:	00000025 	andeq	r0, r0, r5, lsr #32
     2bc:	000002c7 	andeq	r0, r0, r7, asr #5
     2c0:	00009a19 	andeq	r9, r0, r9, lsl sl
     2c4:	18001a00 	stmdane	r0, {r9, fp, ip}
     2c8:	00000148 	andeq	r0, r0, r8, asr #2
     2cc:	00253c04 	eoreq	r3, r5, r4, lsl #24
     2d0:	02eb0000 	rsceq	r0, fp, #0
     2d4:	eb190000 	bl	6402dc <__bss_end__+0x63678c>
     2d8:	19000002 	stmdbne	r0, {r1}
     2dc:	000002f1 	strdeq	r0, [r0], -r1
     2e0:	00007319 	andeq	r7, r0, r9, lsl r3
     2e4:	00731900 	rsbseq	r1, r3, r0, lsl #18
     2e8:	05000000 	streq	r0, [r0, #-0]
     2ec:	0000ec04 	andeq	lr, r0, r4, lsl #24
     2f0:	5a040500 	bpl	1016f8 <__bss_end__+0xf7ba8>
     2f4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     2f8:	00000166 	andeq	r0, r0, r6, ror #2
     2fc:	002c2306 	eoreq	r2, ip, r6, lsl #6
     300:	030c0000 	movweq	r0, #49152	; 0xc000
     304:	9a190000 	bls	64030c <__bss_end__+0x6367bc>
     308:	00000000 	andeq	r0, r0, r0
     30c:	0000bf1b 	andeq	fp, r0, fp, lsl pc
     310:	1c630500 	cfstr64ne	mvdx0, [r3], #-0
     314:	000000b6 	strheq	r0, [r0], -r6
     318:	03244d05 	teqeq	r4, #320	; 0x140
     31c:	37190000 	ldrcc	r0, [r9, -r0]
     320:	00000000 	andeq	r0, r0, r0
     324:	00009e1b 	andeq	r9, r0, fp, lsl lr
     328:	1b380500 	blne	e01730 <__bss_end__+0xdf7be0>
     32c:	0000013b 	andeq	r0, r0, fp, lsr r1
     330:	151d8805 	ldrne	r8, [sp, #-2053]	; 0x805
     334:	04000000 	streq	r0, [r0], #-0
     338:	0000ec1d 	andeq	lr, r0, sp, lsl ip
     33c:	005a1900 	subseq	r1, sl, r0, lsl #18
     340:	5a190000 	bpl	640348 <__bss_end__+0x6367f8>
     344:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     348:	00000073 	andeq	r0, r0, r3, ror r0
     34c:	00007319 	andeq	r7, r0, r9, lsl r3
     350:	a7000000 	strge	r0, [r0, -r0]
     354:	04000011 	streq	r0, [r0], #-17
     358:	00017a00 	andeq	r7, r1, r0, lsl #20
     35c:	29010400 	stmdbcs	r1, {sl}
     360:	01000000 	mrseq	r0, (UNDEF: 0)
     364:	0000028f 	andeq	r0, r0, pc, lsl #5
     368:	0000016d 	andeq	r0, r0, sp, ror #2
     36c:	00008128 	andeq	r8, r0, r8, lsr #2
     370:	00000600 	andeq	r0, r0, r0, lsl #12
     374:	00000180 	andeq	r0, r0, r0, lsl #3
     378:	69050402 	stmdbvs	r5, {r1, sl}
     37c:	0300746e 	movweq	r7, #1134	; 0x46e
     380:	01000704 	tsteq	r0, r4, lsl #14
     384:	01030000 	mrseq	r0, (UNDEF: 3)
     388:	0000aa06 	andeq	sl, r0, r6, lsl #20
     38c:	05020300 	streq	r0, [r2, #-768]	; 0x300
     390:	00000131 	andeq	r0, r0, r1, lsr r1
     394:	28050403 	stmdacs	r5, {r0, r1, sl}
     398:	03000001 	movweq	r0, #1
     39c:	01230508 	teqeq	r3, r8, lsl #10
     3a0:	0d040000 	stceq	0, cr0, [r4, #-0]
     3a4:	03000001 	movweq	r0, #1
     3a8:	00005a2e 	andeq	r5, r0, lr, lsr #20
     3ac:	08010300 	stmdaeq	r1, {r8, r9}
     3b0:	000000a8 	andeq	r0, r0, r8, lsr #1
     3b4:	cc070203 	sfmgt	f0, 4, [r7], {3}
     3b8:	04000000 	streq	r0, [r0], #-0
     3bc:	0000015d 	andeq	r0, r0, sp, asr r1
     3c0:	00733403 	rsbseq	r3, r3, r3, lsl #8
     3c4:	04030000 	streq	r0, [r3], #-0
     3c8:	0000fb07 	andeq	pc, r0, r7, lsl #22
     3cc:	07080300 	streq	r0, [r8, -r0, lsl #6]
     3d0:	000000f6 	strdeq	r0, [r0], -r6
     3d4:	1a070403 	bne	1c13e8 <__bss_end__+0x1b7898>
     3d8:	05000001 	streq	r0, [r0, #-1]
     3dc:	90040604 	andls	r0, r4, r4, lsl #12
     3e0:	03000000 	movweq	r0, #0
     3e4:	00b10801 	adcseq	r0, r1, r1, lsl #16
     3e8:	04060000 	streq	r0, [r6], #-0
     3ec:	0000009d 	muleq	r0, sp, r0
     3f0:	00009007 	andeq	r9, r0, r7
     3f4:	040c0800 	streq	r0, [ip], #-2048	; 0x800
     3f8:	0000d90e 	andeq	sp, r0, lr, lsl #18
     3fc:	78740900 	ldmdavc	r4!, {r8, fp}^
     400:	4f0f0400 	svcmi	0x000f0400
     404:	00000000 	andeq	r0, r0, r0
     408:	00787209 	rsbseq	r7, r8, r9, lsl #4
     40c:	004f0f04 	subeq	r0, pc, r4, lsl #30
     410:	0a010000 	beq	40418 <__bss_end__+0x368c8>
     414:	00000115 	andeq	r0, r0, r5, lsl r1
     418:	00681004 	rsbeq	r1, r8, r4
     41c:	0a040000 	beq	100424 <__bss_end__+0xf68d4>
     420:	00000000 	andeq	r0, r0, r0
     424:	00681104 	rsbeq	r1, r8, r4, lsl #2
     428:	00080000 	andeq	r0, r8, r0
     42c:	0000df04 	andeq	sp, r0, r4, lsl #30
     430:	a2120400 	andsge	r0, r2, #0, 8
     434:	04000000 	streq	r0, [r0], #-0
     438:	000002a1 	andeq	r0, r0, r1, lsr #5
     43c:	00ef2805 	rsceq	r2, pc, r5, lsl #16
     440:	180b0000 	stmdane	fp, {}	; <UNPREDICTABLE>
     444:	04000002 	streq	r0, [r0], #-2
     448:	01060009 	tsteq	r6, r9
     44c:	0d0c0000 	stceq	0, cr0, [ip, #-0]
     450:	88000003 	stmdahi	r0, {r0, r1}
     454:	00000000 	andeq	r0, r0, r0
     458:	021a0400 	andseq	r0, sl, #0, 8
     45c:	62050000 	andvs	r0, r5, #0
     460:	000000e4 	andeq	r0, r0, r4, ror #1
     464:	0002370d 	andeq	r3, r2, sp, lsl #14
     468:	03090200 	movweq	r0, #37376	; 0x9200
     46c:	0000013f 	andeq	r0, r0, pc, lsr r1
     470:	00049a0e 	andeq	r9, r4, lr, lsl #20
     474:	2c090200 	sfmcs	f0, 4, [r9], {-0}
     478:	0f000000 	svceq	0x00000000
     47c:	0902006e 	stmdbeq	r2, {r1, r2, r3, r5, r6}
     480:	0000002c 	andeq	r0, r0, ip, lsr #32
     484:	02b01110 	adcseq	r1, r0, #16, 2
     488:	0c020000 	stceq	0, cr0, [r2], {-0}
     48c:	0000002c 	andeq	r0, r0, ip, lsr #32
     490:	e00d0000 	and	r0, sp, r0
     494:	02000001 	andeq	r0, r0, #1
     498:	01760317 	cmneq	r6, r7, lsl r3
     49c:	700f0000 	andvc	r0, pc, r0
     4a0:	02006e69 	andeq	r6, r0, #1680	; 0x690
     4a4:	00002c17 	andeq	r2, r0, r7, lsl ip
     4a8:	00760f00 	rsbseq	r0, r6, r0, lsl #30
     4ac:	002c1702 	eoreq	r1, ip, r2, lsl #14
     4b0:	9a0e0000 	bls	3804b8 <__bss_end__+0x376968>
     4b4:	02000004 	andeq	r0, r0, #4
     4b8:	00002c17 	andeq	r2, r0, r7, lsl ip
     4bc:	023d0e00 	eorseq	r0, sp, #0, 28
     4c0:	17020000 	strne	r0, [r2, -r0]
     4c4:	0000002c 	andeq	r0, r0, ip, lsr #32
     4c8:	02521200 	subseq	r1, r2, #0, 4
     4cc:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
     4d0:	00008128 	andeq	r8, r0, r8, lsr #2
     4d4:	00000158 	andeq	r0, r0, r8, asr r1
     4d8:	07559c01 	ldrbeq	r9, [r5, -r1, lsl #24]
     4dc:	cf130000 	svcgt	0x00130000
     4e0:	01000001 	tsteq	r0, r1
     4e4:	00075509 	andeq	r5, r7, r9, lsl #10
     4e8:	00006700 	andeq	r6, r0, r0, lsl #14
     4ec:	00631400 	rsbeq	r1, r3, r0, lsl #8
     4f0:	005a0901 	subseq	r0, sl, r1, lsl #18
     4f4:	00880000 	addeq	r0, r8, r0
     4f8:	74150000 	ldrvc	r0, [r5], #-0
     4fc:	0b010078 	bleq	406e4 <__bss_end__+0x36b94>
     500:	00000025 	andeq	r0, r0, r5, lsr #32
     504:	08007606 	stmdaeq	r0, {r1, r2, r9, sl, ip, sp, lr}
     508:	169f1aff 			; <UNDEFINED> instruction: 0x169f1aff
     50c:	0c01006e 	stceq	0, cr0, [r1], {110}	; 0x6e
     510:	00000068 	andeq	r0, r0, r8, rrx
     514:	000000a9 	andeq	r0, r0, r9, lsr #1
     518:	01007516 	tsteq	r0, r6, lsl r5
     51c:	0000680d 	andeq	r6, r0, sp, lsl #16
     520:	0000a900 	andeq	sl, r0, r0, lsl #18
     524:	00731700 	rsbseq	r1, r3, r0, lsl #14
     528:	00680e01 	rsbeq	r0, r8, r1, lsl #28
     52c:	65160000 	ldrvs	r0, [r6, #-0]
     530:	0100646e 	tsteq	r0, lr, ror #8
     534:	00002c11 	andeq	r2, r0, r1, lsl ip
     538:	0000bc00 	andeq	fp, r0, r0, lsl #24
     53c:	049a1800 	ldreq	r1, [sl], #2048	; 0x800
     540:	12010000 	andne	r0, r1, #0
     544:	0000002c 	andeq	r0, r0, ip, lsr #32
     548:	38195401 	ldmdacc	r9, {r0, sl, ip, lr}
     54c:	04000081 	streq	r0, [r0], #-129	; 0x81
     550:	10000000 	andne	r0, r0, r0
     554:	11000002 	tstne	r0, r2
     558:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
     55c:	002c0e01 	eoreq	r0, ip, r1, lsl #28
     560:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     564:	0000813c 	andeq	r8, r0, ip, lsr r1
     568:	00000004 	andeq	r0, r0, r4
     56c:	0000022b 	andeq	r0, r0, fp, lsr #4
     570:	0002b018 	andeq	fp, r2, r8, lsl r0
     574:	2c120100 	ldfcss	f0, [r2], {-0}
     578:	01000000 	mrseq	r0, (UNDEF: 0)
     57c:	3f1a0054 	svccc	0x001a0054
     580:	40000001 	andmi	r0, r0, r1
     584:	1c000081 	stcne	0, cr0, [r0], {129}	; 0x81
     588:	01000000 	mrseq	r0, (UNDEF: 0)
     58c:	0002a815 	andeq	sl, r2, r5, lsl r8
     590:	016a1b00 	cmneq	sl, r0, lsl #22
     594:	00e50000 	rsceq	r0, r5, r0
     598:	5f1c0000 	svcpl	0x001c0000
     59c:	01000001 	tsteq	r0, r1
     5a0:	01561d54 	cmpeq	r6, r4, asr sp
     5a4:	1c000000 	stcne	0, cr0, [r0], {-0}
     5a8:	0000014b 	andeq	r0, r0, fp, asr #2
     5ac:	111a5601 	tstne	sl, r1, lsl #12
     5b0:	4c000001 	stcmi	0, cr0, [r0], {1}
     5b4:	10000081 	andne	r0, r0, r1, lsl #1
     5b8:	02000000 	andeq	r0, r0, #0
     5bc:	0002921a 	andeq	r9, r2, sl, lsl r2
     5c0:	01281b00 	teqeq	r8, r0, lsl #22
     5c4:	00f80000 	rscseq	r0, r8, r0
     5c8:	1d1c0000 	ldcne	0, cr0, [ip, #-0]
     5cc:	01000001 	tsteq	r0, r1
     5d0:	814c1e54 	cmphi	ip, r4, asr lr
     5d4:	00040000 	andeq	r0, r4, r0
     5d8:	321f0000 	andscc	r0, pc, #0
     5dc:	0b000001 	bleq	5e8 <_start-0x7a18>
     5e0:	00000001 	andeq	r0, r0, r1
     5e4:	814c2000 	mrshi	r2, (UNDEF: 76)
     5e8:	11150000 	tstne	r5, r0
     5ec:	01210000 	teqeq	r1, r0
     5f0:	21300151 	teqcs	r0, r1, asr r1
     5f4:	76025001 	strvc	r5, [r2], -r1
     5f8:	1a000000 	bne	600 <_start-0x7a00>
     5fc:	0000013f 	andeq	r0, r0, pc, lsr r1
     600:	00008160 	andeq	r8, r0, r0, ror #2
     604:	0000001c 	andeq	r0, r0, ip, lsl r0
     608:	032b1701 	teqeq	fp, #262144	; 0x40000
     60c:	6a1b0000 	bvs	6c0614 <__bss_end__+0x6b6ac4>
     610:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
     614:	1c000001 	stcne	0, cr0, [r0], {1}
     618:	0000015f 	andeq	r0, r0, pc, asr r1
     61c:	561b5401 	ldrpl	r5, [fp], -r1, lsl #8
     620:	40000001 	andmi	r0, r0, r1
     624:	1c000001 	stcne	0, cr0, [r0], {1}
     628:	0000014b 	andeq	r0, r0, fp, asr #2
     62c:	111a5601 	tstne	sl, r1, lsl #12
     630:	6c000001 	stcvs	0, cr0, [r0], {1}
     634:	10000081 	andne	r0, r0, r1, lsl #1
     638:	02000000 	andeq	r0, r0, #0
     63c:	0003121a 	andeq	r1, r3, sl, lsl r2
     640:	01281b00 	teqeq	r8, r0, lsl #22
     644:	01710000 	cmneq	r1, r0
     648:	1d1c0000 	ldcne	0, cr0, [ip, #-0]
     64c:	01000001 	tsteq	r0, r1
     650:	816c1e54 	cmnhi	ip, r4, asr lr
     654:	00040000 	andeq	r0, r4, r0
     658:	321f0000 	andscc	r0, pc, #0
     65c:	93000001 	movwls	r0, #1
     660:	00000001 	andeq	r0, r0, r1
     664:	816c2000 	cmnhi	ip, r0
     668:	11150000 	tstne	r5, r0
     66c:	01210000 	teqeq	r1, r0
     670:	00770451 	rsbseq	r0, r7, r1, asr r4
     674:	01211a31 	teqeq	r1, r1, lsr sl
     678:	00760250 	rsbseq	r0, r6, r0, asr r2
     67c:	3f1a0000 	svccc	0x001a0000
     680:	80000001 	andhi	r0, r0, r1
     684:	1c000081 	stcne	0, cr0, [r0], {129}	; 0x81
     688:	01000000 	mrseq	r0, (UNDEF: 0)
     68c:	0003b319 	andeq	fp, r3, r9, lsl r3
     690:	016a1b00 	cmneq	sl, r0, lsl #22
     694:	01a60000 			; <UNDEFINED> instruction: 0x01a60000
     698:	5f1c0000 	svcpl	0x001c0000
     69c:	01000001 	tsteq	r0, r1
     6a0:	01561c54 	cmpeq	r6, r4, asr ip
     6a4:	77080000 	strvc	r0, [r8, -r0]
     6a8:	081a3200 	ldmdaeq	sl, {r9, ip, sp}
     6ac:	1c9f1aff 	vldmiane	pc, {s2-s256}
     6b0:	0000014b 	andeq	r0, r0, fp, asr #2
     6b4:	111a5601 	tstne	sl, r1, lsl #12
     6b8:	8c000001 	stchi	0, cr0, [r0], {1}
     6bc:	10000081 	andne	r0, r0, r1, lsl #1
     6c0:	02000000 	andeq	r0, r0, #0
     6c4:	00039a1a 	andeq	r9, r3, sl, lsl sl
     6c8:	01281b00 	teqeq	r8, r0, lsl #22
     6cc:	01cb0000 	biceq	r0, fp, r0
     6d0:	1d1c0000 	ldcne	0, cr0, [ip, #-0]
     6d4:	01000001 	tsteq	r0, r1
     6d8:	818c1e54 	orrhi	r1, ip, r4, asr lr
     6dc:	00040000 	andeq	r0, r4, r0
     6e0:	321f0000 	andscc	r0, pc, #0
     6e4:	f0000001 			; <UNDEFINED> instruction: 0xf0000001
     6e8:	00000001 	andeq	r0, r0, r1
     6ec:	818c2000 	orrhi	r2, ip, r0
     6f0:	11150000 	tstne	r5, r0
     6f4:	01210000 	teqeq	r1, r0
     6f8:	00770451 	rsbseq	r0, r7, r1, asr r4
     6fc:	01211a32 	teqeq	r1, r2, lsr sl
     700:	00760250 	rsbseq	r0, r6, r0, asr r2
     704:	3f1a0000 	svccc	0x001a0000
     708:	a0000001 	andge	r0, r0, r1
     70c:	1c000081 	stcne	0, cr0, [r0], {129}	; 0x81
     710:	01000000 	mrseq	r0, (UNDEF: 0)
     714:	00043b1b 	andeq	r3, r4, fp, lsl fp
     718:	016a1b00 	cmneq	sl, r0, lsl #22
     71c:	02030000 	andeq	r0, r3, #0
     720:	5f1c0000 	svcpl	0x001c0000
     724:	01000001 	tsteq	r0, r1
     728:	01561c54 	cmpeq	r6, r4, asr ip
     72c:	77080000 	strvc	r0, [r8, -r0]
     730:	081a3400 	ldmdaeq	sl, {sl, ip, sp}
     734:	1c9f1aff 	vldmiane	pc, {s2-s256}
     738:	0000014b 	andeq	r0, r0, fp, asr #2
     73c:	111a5601 	tstne	sl, r1, lsl #12
     740:	ac000001 	stcge	0, cr0, [r0], {1}
     744:	10000081 	andne	r0, r0, r1, lsl #1
     748:	02000000 	andeq	r0, r0, #0
     74c:	0004221a 	andeq	r2, r4, sl, lsl r2
     750:	01281b00 	teqeq	r8, r0, lsl #22
     754:	02250000 	eoreq	r0, r5, #0
     758:	1d1c0000 	ldcne	0, cr0, [ip, #-0]
     75c:	01000001 	tsteq	r0, r1
     760:	81ac1e54 			; <UNDEFINED> instruction: 0x81ac1e54
     764:	00040000 	andeq	r0, r4, r0
     768:	321f0000 	andscc	r0, pc, #0
     76c:	47000001 	strmi	r0, [r0, -r1]
     770:	00000002 	andeq	r0, r0, r2
     774:	81ac2000 			; <UNDEFINED> instruction: 0x81ac2000
     778:	11150000 	tstne	r5, r0
     77c:	01210000 	teqeq	r1, r0
     780:	00770451 	rsbseq	r0, r7, r1, asr r4
     784:	01211a34 	teqeq	r1, r4, lsr sl
     788:	00760250 	rsbseq	r0, r6, r0, asr r2
     78c:	3f1a0000 	svccc	0x001a0000
     790:	c0000001 	andgt	r0, r0, r1
     794:	1c000081 	stcne	0, cr0, [r0], {129}	; 0x81
     798:	01000000 	mrseq	r0, (UNDEF: 0)
     79c:	0004c31d 	andeq	ip, r4, sp, lsl r3
     7a0:	016a1b00 	cmneq	sl, r0, lsl #22
     7a4:	025a0000 	subseq	r0, sl, #0
     7a8:	5f1c0000 	svcpl	0x001c0000
     7ac:	01000001 	tsteq	r0, r1
     7b0:	01561c54 	cmpeq	r6, r4, asr ip
     7b4:	77080000 	strvc	r0, [r8, -r0]
     7b8:	081a3800 	ldmdaeq	sl, {fp, ip, sp}
     7bc:	1c9f1aff 	vldmiane	pc, {s2-s256}
     7c0:	0000014b 	andeq	r0, r0, fp, asr #2
     7c4:	111a5601 	tstne	sl, r1, lsl #12
     7c8:	cc000001 	stcgt	0, cr0, [r0], {1}
     7cc:	10000081 	andne	r0, r0, r1, lsl #1
     7d0:	02000000 	andeq	r0, r0, #0
     7d4:	0004aa1a 	andeq	sl, r4, sl, lsl sl
     7d8:	01281b00 	teqeq	r8, r0, lsl #22
     7dc:	027f0000 	rsbseq	r0, pc, #0
     7e0:	1d1c0000 	ldcne	0, cr0, [ip, #-0]
     7e4:	01000001 	tsteq	r0, r1
     7e8:	81cc1e54 	bichi	r1, ip, r4, asr lr
     7ec:	00040000 	andeq	r0, r4, r0
     7f0:	321f0000 	andscc	r0, pc, #0
     7f4:	a4000001 	strge	r0, [r0], #-1
     7f8:	00000002 	andeq	r0, r0, r2
     7fc:	81cc2000 	bichi	r2, ip, r0
     800:	11150000 	tstne	r5, r0
     804:	01210000 	teqeq	r1, r0
     808:	00770451 	rsbseq	r0, r7, r1, asr r4
     80c:	01211a38 	teqeq	r1, r8, lsr sl
     810:	00760250 	rsbseq	r0, r6, r0, asr r2
     814:	3f1a0000 	svccc	0x001a0000
     818:	e0000001 	and	r0, r0, r1
     81c:	1c000081 	stcne	0, cr0, [r0], {129}	; 0x81
     820:	01000000 	mrseq	r0, (UNDEF: 0)
     824:	00054b1f 	andeq	r4, r5, pc, lsl fp
     828:	016a1b00 	cmneq	sl, r0, lsl #22
     82c:	02b70000 	adcseq	r0, r7, #0
     830:	5f1c0000 	svcpl	0x001c0000
     834:	01000001 	tsteq	r0, r1
     838:	01561c54 	cmpeq	r6, r4, asr ip
     83c:	77080000 	strvc	r0, [r8, -r0]
     840:	081a4000 	ldmdaeq	sl, {lr}
     844:	1c9f1aff 	vldmiane	pc, {s2-s256}
     848:	0000014b 	andeq	r0, r0, fp, asr #2
     84c:	111a5601 	tstne	sl, r1, lsl #12
     850:	ec000001 	stc	0, cr0, [r0], {1}
     854:	10000081 	andne	r0, r0, r1, lsl #1
     858:	02000000 	andeq	r0, r0, #0
     85c:	0005321a 	andeq	r3, r5, sl, lsl r2
     860:	01281b00 	teqeq	r8, r0, lsl #22
     864:	02de0000 	sbcseq	r0, lr, #0
     868:	1d1c0000 	ldcne	0, cr0, [ip, #-0]
     86c:	01000001 	tsteq	r0, r1
     870:	81ec1e54 	mvnhi	r1, r4, asr lr
     874:	00040000 	andeq	r0, r4, r0
     878:	321f0000 	andscc	r0, pc, #0
     87c:	05000001 	streq	r0, [r0, #-1]
     880:	00000003 	andeq	r0, r0, r3
     884:	81ec2000 	mvnhi	r2, r0
     888:	11150000 	tstne	r5, r0
     88c:	01210000 	teqeq	r1, r0
     890:	00770451 	rsbseq	r0, r7, r1, asr r4
     894:	01211a40 	teqeq	r1, r0, asr #20
     898:	00760250 	rsbseq	r0, r6, r0, asr r2
     89c:	3f1a0000 	svccc	0x001a0000
     8a0:	00000001 	andeq	r0, r0, r1
     8a4:	1c000082 	stcne	0, cr0, [r0], {130}	; 0x82
     8a8:	01000000 	mrseq	r0, (UNDEF: 0)
     8ac:	0005d521 	andeq	sp, r5, r1, lsr #10
     8b0:	016a1b00 	cmneq	sl, r0, lsl #22
     8b4:	03180000 	tsteq	r8, #0
     8b8:	5f1c0000 	svcpl	0x001c0000
     8bc:	01000001 	tsteq	r0, r1
     8c0:	01561c54 	cmpeq	r6, r4, asr ip
     8c4:	77090000 	strvc	r0, [r9, -r0]
     8c8:	1a200800 	bne	8028d0 <__bss_end__+0x7f8d80>
     8cc:	9f1aff08 	svcls	0x001aff08
     8d0:	00014b1c 	andeq	r4, r1, ip, lsl fp
     8d4:	1a560100 	bne	1580cdc <__bss_end__+0x157718c>
     8d8:	00000111 	andeq	r0, r0, r1, lsl r1
     8dc:	0000820c 	andeq	r8, r0, ip, lsl #4
     8e0:	00000010 	andeq	r0, r0, r0, lsl r0
     8e4:	05bb1a02 	ldreq	r1, [fp, #2562]!	; 0xa02
     8e8:	281b0000 	ldmdacs	fp, {}	; <UNPREDICTABLE>
     8ec:	42000001 	andmi	r0, r0, #1
     8f0:	1c000003 	stcne	0, cr0, [r0], {3}
     8f4:	0000011d 	andeq	r0, r0, sp, lsl r1
     8f8:	0c1e5401 	cfldrseq	mvf5, [lr], {1}
     8fc:	04000082 	streq	r0, [r0], #-130	; 0x82
     900:	1f000000 	svcne	0x00000000
     904:	00000132 	andeq	r0, r0, r2, lsr r1
     908:	0000036c 	andeq	r0, r0, ip, ror #6
     90c:	0c200000 	stceq	0, cr0, [r0], #-0
     910:	15000082 	strne	r0, [r0, #-130]	; 0x82
     914:	21000011 	tstcs	r0, r1, lsl r0
     918:	77055101 	strvc	r5, [r5, -r1, lsl #2]
     91c:	1a200800 	bne	802924 <__bss_end__+0x7f8dd4>
     920:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
     924:	00000076 	andeq	r0, r0, r6, ror r0
     928:	00013f1a 	andeq	r3, r1, sl, lsl pc
     92c:	00822000 	addeq	r2, r2, r0
     930:	00001c00 	andeq	r1, r0, r0, lsl #24
     934:	5f230100 	svcpl	0x00230100
     938:	1b000006 	blne	958 <_start-0x76a8>
     93c:	0000016a 	andeq	r0, r0, sl, ror #2
     940:	0000037f 	andeq	r0, r0, pc, ror r3
     944:	00015f1c 	andeq	r5, r1, ip, lsl pc
     948:	1c540100 	ldfnee	f0, [r4], {-0}
     94c:	00000156 	andeq	r0, r0, r6, asr r1
     950:	08007709 	stmdaeq	r0, {r0, r3, r8, r9, sl, ip, sp, lr}
     954:	ff081a40 			; <UNDEFINED> instruction: 0xff081a40
     958:	4b1c9f1a 	blmi	7285c8 <__bss_end__+0x71ea78>
     95c:	01000001 	tsteq	r0, r1
     960:	01111a56 	tsteq	r1, r6, asr sl
     964:	822c0000 	eorhi	r0, ip, #0
     968:	00100000 	andseq	r0, r0, r0
     96c:	1a020000 	bne	80974 <__bss_end__+0x76e24>
     970:	00000645 	andeq	r0, r0, r5, asr #12
     974:	0001281b 	andeq	r2, r1, fp, lsl r8
     978:	0003a100 	andeq	sl, r3, r0, lsl #2
     97c:	011d1c00 	tsteq	sp, r0, lsl #24
     980:	54010000 	strpl	r0, [r1], #-0
     984:	00822c1e 	addeq	r2, r2, lr, lsl ip
     988:	00000400 	andeq	r0, r0, r0, lsl #8
     98c:	01321f00 	teqeq	r2, r0, lsl #30
     990:	03c30000 	biceq	r0, r3, #0
     994:	00000000 	andeq	r0, r0, r0
     998:	00822c20 	addeq	r2, r2, r0, lsr #24
     99c:	00111500 	andseq	r1, r1, r0, lsl #10
     9a0:	51012100 	mrspl	r2, (UNDEF: 17)
     9a4:	08007705 	stmdaeq	r0, {r0, r2, r8, r9, sl, ip, sp, lr}
     9a8:	01211a40 	teqeq	r1, r0, asr #20
     9ac:	00760250 	rsbseq	r0, r6, r0, asr r2
     9b0:	3f1a0000 	svccc	0x001a0000
     9b4:	40000001 	andmi	r0, r0, r1
     9b8:	1c000082 	stcne	0, cr0, [r0], {130}	; 0x82
     9bc:	01000000 	mrseq	r0, (UNDEF: 0)
     9c0:	0006df25 	andeq	sp, r6, r5, lsr #30
     9c4:	016a1c00 	cmneq	sl, r0, lsl #24
     9c8:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
     9cc:	00015f1c 	andeq	r5, r1, ip, lsl pc
     9d0:	1b540100 	blne	1500dd8 <__bss_end__+0x14f7288>
     9d4:	00000156 	andeq	r0, r0, r6, asr r1
     9d8:	000003d6 	ldrdeq	r0, [r0], -r6
     9dc:	00014b1c 	andeq	r4, r1, ip, lsl fp
     9e0:	1a560100 	bne	1580de8 <__bss_end__+0x1577298>
     9e4:	00000111 	andeq	r0, r0, r1, lsl r1
     9e8:	0000824c 	andeq	r8, r0, ip, asr #4
     9ec:	00000010 	andeq	r0, r0, r0, lsl r0
     9f0:	06c51a02 	strbeq	r1, [r5], r2, lsl #20
     9f4:	281c0000 	ldmdacs	ip, {}	; <UNPREDICTABLE>
     9f8:	01000001 	tsteq	r0, r1
     9fc:	011d1c58 	tsteq	sp, r8, asr ip
     a00:	54010000 	strpl	r0, [r1], #-0
     a04:	00824c1e 	addeq	r4, r2, lr, lsl ip
     a08:	00000400 	andeq	r0, r0, r0, lsl #8
     a0c:	01321f00 	teqeq	r2, r0, lsl #30
     a10:	04090000 	streq	r0, [r9], #-0
     a14:	00000000 	andeq	r0, r0, r0
     a18:	00824c20 	addeq	r4, r2, r0, lsr #24
     a1c:	00111500 	andseq	r1, r1, r0, lsl #10
     a20:	51012100 	mrspl	r2, (UNDEF: 17)
     a24:	08007705 	stmdaeq	r0, {r0, r2, r8, r9, sl, ip, sp, lr}
     a28:	01211a80 	smlawbeq	r1, r0, sl, r1
     a2c:	00760250 	rsbseq	r0, r6, r0, asr r2
     a30:	3f220000 	svccc	0x00220000
     a34:	60000001 	andvs	r0, r0, r1
     a38:	1c000082 	stcne	0, cr0, [r0], {130}	; 0x82
     a3c:	01000000 	mrseq	r0, (UNDEF: 0)
     a40:	016a1c27 	cmneq	sl, r7, lsr #24
     a44:	55010000 	strpl	r0, [r1, #-0]
     a48:	00015f1c 	andeq	r5, r1, ip, lsl pc
     a4c:	1d540100 	ldfnee	f0, [r4, #-0]
     a50:	00000156 	andeq	r0, r0, r6, asr r1
     a54:	014b1c01 	cmpeq	fp, r1, lsl #24
     a58:	56010000 	strpl	r0, [r1], -r0
     a5c:	0001111a 	andeq	r1, r1, sl, lsl r1
     a60:	00826c00 	addeq	r6, r2, r0, lsl #24
     a64:	00001000 	andeq	r1, r0, r0
     a68:	3e1a0200 	cdpcc	2, 1, cr0, cr10, cr0, {0}
     a6c:	1c000007 	stcne	0, cr0, [r0], {7}
     a70:	00000128 	andeq	r0, r0, r8, lsr #2
     a74:	1d1c5501 	cfldr32ne	mvfx5, [ip, #-4]
     a78:	01000001 	tsteq	r0, r1
     a7c:	826c1e54 	rsbhi	r1, ip, #84, 28	; 0x540
     a80:	00040000 	andeq	r0, r4, r0
     a84:	321f0000 	andscc	r0, pc, #0
     a88:	1c000001 	stcne	0, cr0, [r0], {1}
     a8c:	00000004 	andeq	r0, r0, r4
     a90:	826c2000 	rsbhi	r2, ip, #0
     a94:	11150000 	tstne	r5, r0
     a98:	01210000 	teqeq	r1, r0
     a9c:	21310151 	teqcs	r1, r1, asr r1
     aa0:	76025001 	strvc	r5, [r2], -r1
     aa4:	00000000 	andeq	r0, r0, r0
     aa8:	00d90406 	sbcseq	r0, r9, r6, lsl #8
     aac:	22230000 	eorcs	r0, r3, #0
     ab0:	01000003 	tsteq	r0, r3
     ab4:	0000252b 	andeq	r2, r0, fp, lsr #10
     ab8:	07950300 	ldreq	r0, [r5, r0, lsl #6]
     abc:	720f0000 	andvc	r0, pc, #0
     ac0:	2b010078 	blcs	40ca8 <__bss_end__+0x37158>
     ac4:	00000025 	andeq	r0, r0, r5, lsr #32
     ac8:	0100760f 	tsteq	r0, pc, lsl #12
     acc:	0000252b 	andeq	r2, r0, fp, lsr #10
     ad0:	02450e00 	subeq	r0, r5, #0, 28
     ad4:	2b010000 	blcs	40adc <__bss_end__+0x36f8c>
     ad8:	0000002c 	andeq	r0, r0, ip, lsr #32
     adc:	00049a11 	andeq	r9, r4, r1, lsl sl
     ae0:	2c2c0100 	stfcss	f0, [ip], #-0
     ae4:	00000000 	andeq	r0, r0, r0
     ae8:	0001f024 	andeq	pc, r1, r4, lsr #32
     aec:	25380100 	ldrcs	r0, [r8, #-256]!	; 0x100
     af0:	80000000 	andhi	r0, r0, r0
     af4:	c8000082 	stmdagt	r0, {r1, r7}
     af8:	01000001 	tsteq	r0, r1
     afc:	000b519c 	muleq	fp, ip, r1
     b00:	01cf1300 	biceq	r1, pc, r0, lsl #6
     b04:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
     b08:	00000755 	andeq	r0, r0, r5, asr r7
     b0c:	0000042f 	andeq	r0, r0, pc, lsr #8
     b10:	00024513 	andeq	r4, r2, r3, lsl r5
     b14:	25380100 	ldrcs	r0, [r8, #-256]!	; 0x100
     b18:	74000000 	strvc	r0, [r0], #-0
     b1c:	15000004 	strne	r0, [r0, #-4]
     b20:	01007872 	tsteq	r0, r2, ror r8
     b24:	00002539 	andeq	r2, r0, r9, lsr r5
     b28:	16550100 	ldrbne	r0, [r5], -r0, lsl #2
     b2c:	40010073 	andmi	r0, r1, r3, ror r0
     b30:	0000002c 	andeq	r0, r0, ip, lsr #32
     b34:	00000492 	muleq	r0, r2, r4
     b38:	01007516 	tsteq	r0, r6, lsl r5
     b3c:	00006843 	andeq	r6, r0, r3, asr #16
     b40:	0004a500 	andeq	sl, r4, r0, lsl #10
     b44:	006e1600 	rsbeq	r1, lr, r0, lsl #12
     b48:	002c4401 	eoreq	r4, ip, r1, lsl #8
     b4c:	04b80000 	ldrteq	r0, [r8], #0
     b50:	63160000 	tstvs	r6, #0
     b54:	2c450100 	stfcse	f0, [r5], {-0}
     b58:	cf000000 	svcgt	0x00000000
     b5c:	1a000004 	bne	b74 <_start-0x748c>
     b60:	0000075b 	andeq	r0, r0, fp, asr r7
     b64:	00008294 	muleq	r0, r4, r2
     b68:	00000034 	andeq	r0, r0, r4, lsr r0
     b6c:	086f3c01 	stmdaeq	pc!, {r0, sl, fp, ip, sp}^	; <UNPREDICTABLE>
     b70:	7e1b0000 	cdpvc	0, 1, cr0, cr11, cr0, {0}
     b74:	f9000007 			; <UNDEFINED> instruction: 0xf9000007
     b78:	1d000004 	stcne	0, cr0, [r0, #-16]
     b7c:	00000775 	andeq	r0, r0, r5, ror r7
     b80:	076b1c00 	strbeq	r1, [fp, -r0, lsl #24]!
     b84:	55010000 	strpl	r0, [r1, #-0]
     b88:	0082941e 	addeq	r9, r2, lr, lsl r4
     b8c:	00003400 	andeq	r3, r0, r0, lsl #8
     b90:	07891f00 	streq	r1, [r9, r0, lsl #30]
     b94:	05170000 	ldreq	r0, [r7, #-0]
     b98:	98250000 	stmdals	r5!, {}	; <UNPREDICTABLE>
     b9c:	2b000082 	blcs	dac <_start-0x7254>
     ba0:	26000011 			; <UNDEFINED> instruction: 0x26000011
     ba4:	000082a4 	andeq	r8, r0, r4, lsr #5
     ba8:	00001136 	andeq	r1, r0, r6, lsr r1
     bac:	00000864 	andeq	r0, r0, r4, ror #16
     bb0:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
     bb4:	25000075 	strcs	r0, [r0, #-117]	; 0x75
     bb8:	000082b0 			; <UNDEFINED> instruction: 0x000082b0
     bbc:	0000112b 	andeq	r1, r0, fp, lsr #2
     bc0:	d0190000 	andsle	r0, r9, r0
     bc4:	04000082 	streq	r0, [r0], #-130	; 0x82
     bc8:	8c000000 	stchi	0, cr0, [r0], {-0}
     bcc:	27000008 	strcs	r0, [r0, -r8]
     bd0:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
     bd4:	002c4001 	eoreq	r4, ip, r1
     bd8:	05350000 	ldreq	r0, [r5, #-0]!
     bdc:	1a000000 	bne	be4 <_start-0x741c>
     be0:	00000111 	andeq	r0, r0, r1, lsl r1
     be4:	000082dc 	ldrdeq	r8, [r0], -ip
     be8:	00000010 	andeq	r0, r0, r0, lsl r0
     bec:	08c54801 	stmiaeq	r5, {r0, fp, lr}^
     bf0:	281b0000 	ldmdacs	fp, {}	; <UNPREDICTABLE>
     bf4:	48000001 	stmdami	r0, {r0}
     bf8:	1b000005 	blne	c14 <_start-0x73ec>
     bfc:	0000011d 	andeq	r0, r0, sp, lsl r1
     c00:	0000056d 	andeq	r0, r0, sp, ror #10
     c04:	0082dc1e 	addeq	sp, r2, lr, lsl ip
     c08:	00000400 	andeq	r0, r0, r0, lsl #8
     c0c:	01321f00 	teqeq	r2, r0, lsl #30
     c10:	05800000 	streq	r0, [r0]
     c14:	00000000 	andeq	r0, r0, r0
     c18:	0001111a 	andeq	r1, r1, sl, lsl r1
     c1c:	0082fc00 	addeq	pc, r2, r0, lsl #24
     c20:	00001000 	andeq	r1, r0, r0
     c24:	fe4c0100 	cdp2	1, 4, cr0, cr12, cr0, {0}
     c28:	1b000008 	blne	c50 <_start-0x73b0>
     c2c:	00000128 	andeq	r0, r0, r8, lsr #2
     c30:	00000593 	muleq	r0, r3, r5
     c34:	00011d1b 	andeq	r1, r1, fp, lsl sp
     c38:	0005a600 	andeq	sl, r5, r0, lsl #12
     c3c:	82fc1e00 	rscshi	r1, ip, #0, 28
     c40:	00040000 	andeq	r0, r4, r0
     c44:	321f0000 	andscc	r0, pc, #0
     c48:	b9000001 	stmdblt	r0, {r0}
     c4c:	00000005 	andeq	r0, r0, r5
     c50:	01111a00 	tsteq	r1, r0, lsl #20
     c54:	83200000 	teqhi	r0, #0
     c58:	00100000 	andseq	r0, r0, r0
     c5c:	4f010000 	svcmi	0x00010000
     c60:	00000937 	andeq	r0, r0, r7, lsr r9
     c64:	0001281b 	andeq	r2, r1, fp, lsl r8
     c68:	0005cc00 	andeq	ip, r5, r0, lsl #24
     c6c:	011d1b00 	tsteq	sp, r0, lsl #22
     c70:	05df0000 	ldrbeq	r0, [pc]	; c78 <_start-0x7388>
     c74:	201e0000 	andscs	r0, lr, r0
     c78:	04000083 	streq	r0, [r0], #-131	; 0x83
     c7c:	1f000000 	svcne	0x00000000
     c80:	00000132 	andeq	r0, r0, r2, lsr r1
     c84:	000005f2 	strdeq	r0, [r0], -r2
     c88:	111a0000 	tstne	sl, r0
     c8c:	44000001 	strmi	r0, [r0], #-1
     c90:	10000083 	andne	r0, r0, r3, lsl #1
     c94:	01000000 	mrseq	r0, (UNDEF: 0)
     c98:	00097052 	andeq	r7, r9, r2, asr r0
     c9c:	01281b00 	teqeq	r8, r0, lsl #22
     ca0:	06050000 	streq	r0, [r5], -r0
     ca4:	1d1b0000 	ldcne	0, cr0, [fp, #-0]
     ca8:	18000001 	stmdane	r0, {r0}
     cac:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
     cb0:	00008344 	andeq	r8, r0, r4, asr #6
     cb4:	00000004 	andeq	r0, r0, r4
     cb8:	0001321f 	andeq	r3, r1, pc, lsl r2
     cbc:	00062b00 	andeq	r2, r6, r0, lsl #22
     cc0:	1a000000 	bne	cc8 <_start-0x7338>
     cc4:	00000111 	andeq	r0, r0, r1, lsl r1
     cc8:	00008368 	andeq	r8, r0, r8, ror #6
     ccc:	00000010 	andeq	r0, r0, r0, lsl r0
     cd0:	09a95501 	stmibeq	r9!, {r0, r8, sl, ip, lr}
     cd4:	281b0000 	ldmdacs	fp, {}	; <UNPREDICTABLE>
     cd8:	3e000001 	cdpcc	0, 0, cr0, cr0, cr1, {0}
     cdc:	1b000006 	blne	cfc <_start-0x7304>
     ce0:	0000011d 	andeq	r0, r0, sp, lsl r1
     ce4:	00000651 	andeq	r0, r0, r1, asr r6
     ce8:	0083681e 	addeq	r6, r3, lr, lsl r8
     cec:	00000400 	andeq	r0, r0, r0, lsl #8
     cf0:	01321f00 	teqeq	r2, r0, lsl #30
     cf4:	06640000 	strbteq	r0, [r4], -r0
     cf8:	00000000 	andeq	r0, r0, r0
     cfc:	0001111a 	andeq	r1, r1, sl, lsl r1
     d00:	00838c00 	addeq	r8, r3, r0, lsl #24
     d04:	00001000 	andeq	r1, r0, r0
     d08:	e2580100 	subs	r0, r8, #0, 2
     d0c:	1b000009 	blne	d38 <_start-0x72c8>
     d10:	00000128 	andeq	r0, r0, r8, lsr #2
     d14:	00000677 	andeq	r0, r0, r7, ror r6
     d18:	00011d1b 	andeq	r1, r1, fp, lsl sp
     d1c:	00068a00 	andeq	r8, r6, r0, lsl #20
     d20:	838c1e00 	orrhi	r1, ip, #0, 28
     d24:	00040000 	andeq	r0, r4, r0
     d28:	321f0000 	andscc	r0, pc, #0
     d2c:	9d000001 	stcls	0, cr0, [r0, #-4]
     d30:	00000006 	andeq	r0, r0, r6
     d34:	01111a00 	tsteq	r1, r0, lsl #20
     d38:	83b00000 	movshi	r0, #0
     d3c:	00100000 	andseq	r0, r0, r0
     d40:	5b010000 	blpl	40d48 <__bss_end__+0x371f8>
     d44:	00000a1b 	andeq	r0, r0, fp, lsl sl
     d48:	0001281b 	andeq	r2, r1, fp, lsl r8
     d4c:	0006b000 	andeq	fp, r6, r0
     d50:	011d1b00 	tsteq	sp, r0, lsl #22
     d54:	06c30000 	strbeq	r0, [r3], r0
     d58:	b01e0000 	andslt	r0, lr, r0
     d5c:	04000083 	streq	r0, [r0], #-131	; 0x83
     d60:	1f000000 	svcne	0x00000000
     d64:	00000132 	andeq	r0, r0, r2, lsr r1
     d68:	000006d6 	ldrdeq	r0, [r0], -r6
     d6c:	111a0000 	tstne	sl, r0
     d70:	d4000001 	strle	r0, [r0], #-1
     d74:	10000083 	andne	r0, r0, r3, lsl #1
     d78:	01000000 	mrseq	r0, (UNDEF: 0)
     d7c:	000a505e 	andeq	r5, sl, lr, asr r0
     d80:	01281b00 	teqeq	r8, r0, lsl #22
     d84:	06e90000 	strbteq	r0, [r9], r0
     d88:	1d280000 	stcne	0, cr0, [r8, #-0]
     d8c:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
     d90:	000083d4 	ldrdeq	r8, [r0], -r4
     d94:	00000004 	andeq	r0, r0, r4
     d98:	0001321f 	andeq	r3, r1, pc, lsl r2
     d9c:	0006fc00 	andeq	pc, r6, r0, lsl #24
     da0:	1a000000 	bne	da8 <_start-0x7258>
     da4:	0000075b 	andeq	r0, r0, fp, asr r7
     da8:	000083f4 	strdeq	r8, [r0], -r4
     dac:	00000034 	andeq	r0, r0, r4, lsr r0
     db0:	0ab46501 	beq	fed1a1bc <__bss_end__+0xfed1066c>
     db4:	7e280000 	cdpvc	0, 2, cr0, cr8, cr0, {0}
     db8:	1b000007 	blne	ddc <_start-0x7224>
     dbc:	00000775 	andeq	r0, r0, r5, ror r7
     dc0:	0000070f 	andeq	r0, r0, pc, lsl #14
     dc4:	00076b1b 	andeq	r6, r7, fp, lsl fp
     dc8:	00072f00 	andeq	r2, r7, r0, lsl #30
     dcc:	83f41e00 	mvnshi	r1, #0, 28
     dd0:	00340000 	eorseq	r0, r4, r0
     dd4:	891f0000 	ldmdbhi	pc, {}	; <UNPREDICTABLE>
     dd8:	4d000007 	stcmi	0, cr0, [r0, #-28]	; 0xffffffe4
     ddc:	25000007 	strcs	r0, [r0, #-7]
     de0:	000083f8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
     de4:	0000112b 	andeq	r1, r0, fp, lsr #2
     de8:	00840426 	addeq	r0, r4, r6, lsr #8
     dec:	00113600 	andseq	r3, r1, r0, lsl #12
     df0:	000aa900 	andeq	sl, sl, r0, lsl #18
     df4:	50012100 	andpl	r2, r1, r0, lsl #2
     df8:	00007502 	andeq	r7, r0, r2, lsl #10
     dfc:	00841025 	addeq	r1, r4, r5, lsr #32
     e00:	00112b00 	andseq	r2, r1, r0, lsl #22
     e04:	26000000 	strcs	r0, [r0], -r0
     e08:	000082f8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
     e0c:	00001136 	andeq	r1, r0, r6, lsr r1
     e10:	00000ac8 	andeq	r0, r0, r8, asr #21
     e14:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
     e18:	26000075 			; <UNDEFINED> instruction: 0x26000075
     e1c:	00008318 	andeq	r8, r0, r8, lsl r3
     e20:	00001136 	andeq	r1, r0, r6, lsr r1
     e24:	00000adc 	ldrdeq	r0, [r0], -ip
     e28:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
     e2c:	26000075 			; <UNDEFINED> instruction: 0x26000075
     e30:	0000833c 	andeq	r8, r0, ip, lsr r3
     e34:	00001136 	andeq	r1, r0, r6, lsr r1
     e38:	00000af0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     e3c:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
     e40:	26000075 			; <UNDEFINED> instruction: 0x26000075
     e44:	00008360 	andeq	r8, r0, r0, ror #6
     e48:	00001136 	andeq	r1, r0, r6, lsr r1
     e4c:	00000b04 	andeq	r0, r0, r4, lsl #22
     e50:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
     e54:	26000075 			; <UNDEFINED> instruction: 0x26000075
     e58:	00008384 	andeq	r8, r0, r4, lsl #7
     e5c:	00001136 	andeq	r1, r0, r6, lsr r1
     e60:	00000b18 	andeq	r0, r0, r8, lsl fp
     e64:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
     e68:	26000075 			; <UNDEFINED> instruction: 0x26000075
     e6c:	000083a8 	andeq	r8, r0, r8, lsr #7
     e70:	00001136 	andeq	r1, r0, r6, lsr r1
     e74:	00000b2c 	andeq	r0, r0, ip, lsr #22
     e78:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
     e7c:	26000075 			; <UNDEFINED> instruction: 0x26000075
     e80:	000083cc 	andeq	r8, r0, ip, asr #7
     e84:	00001136 	andeq	r1, r0, r6, lsr r1
     e88:	00000b40 	andeq	r0, r0, r0, asr #22
     e8c:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
     e90:	20000075 	andcs	r0, r0, r5, ror r0
     e94:	000083ec 	andeq	r8, r0, ip, ror #7
     e98:	00001136 	andeq	r1, r0, r6, lsr r1
     e9c:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
     ea0:	00000075 	andeq	r0, r0, r5, ror r0
     ea4:	00020524 	andeq	r0, r2, r4, lsr #10
     ea8:	25700100 	ldrbcs	r0, [r0, #-256]!	; 0x100
     eac:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     eb0:	8c000084 	stchi	0, cr0, [r0], {132}	; 0x84
     eb4:	01000000 	mrseq	r0, (UNDEF: 0)
     eb8:	000c2c9c 	muleq	ip, ip, ip
     ebc:	00751400 	rsbseq	r1, r5, r0, lsl #8
     ec0:	07557001 	ldrbeq	r7, [r5, -r1]
     ec4:	076b0000 	strbeq	r0, [fp, -r0]!
     ec8:	62140000 	andsvs	r0, r4, #0
     ecc:	01006675 	tsteq	r0, r5, ror r6
     ed0:	000c2c70 	andeq	r2, ip, r0, ror ip
     ed4:	00079f00 	andeq	r9, r7, r0, lsl #30
     ed8:	02c81300 	sbceq	r1, r8, #0, 6
     edc:	70010000 	andvc	r0, r1, r0
     ee0:	00000068 	andeq	r0, r0, r8, rrx
     ee4:	000007d3 	ldrdeq	r0, [r0], -r3
     ee8:	646e6514 	strbtvs	r6, [lr], #-1300	; 0x514
     eec:	4f700100 	svcmi	0x00700100
     ef0:	0c000000 	stceq	0, cr0, [r0], {-0}
     ef4:	29000008 	stmdbcs	r0, {r3}
     ef8:	000002da 	ldrdeq	r0, [r0], -sl
     efc:	00687001 	rsbeq	r7, r8, r1
     f00:	91020000 	mrsls	r0, (UNDEF: 2)
     f04:	00e92a00 	rsceq	r2, r9, r0, lsl #20
     f08:	0c420000 	mareq	acc0, r0, r2
     f0c:	03050000 	movweq	r0, #20480	; 0x5000
     f10:	00009500 	andeq	r9, r0, r0, lsl #10
     f14:	01006916 	tsteq	r0, r6, lsl r9
     f18:	00002574 	andeq	r2, r0, r4, ror r5
     f1c:	00084600 	andeq	r4, r8, r0, lsl #12
     f20:	02992700 	addseq	r2, r9, #0, 14
     f24:	75010000 	strvc	r0, [r1, #-0]
     f28:	0000004f 	andeq	r0, r0, pc, asr #32
     f2c:	00000865 	andeq	r0, r0, r5, ror #16
     f30:	00847826 	addeq	r7, r4, r6, lsr #16
     f34:	00114b00 	andseq	r4, r1, r0, lsl #22
     f38:	000c0c00 	andeq	r0, ip, r0, lsl #24
     f3c:	53012100 	movwpl	r2, #4352	; 0x1100
     f40:	21710802 	cmncs	r1, r2, lsl #16
     f44:	03055201 	movweq	r5, #20993	; 0x5201
     f48:	00009500 	andeq	r9, r0, r0, lsl #10
     f4c:	05510121 	ldrbeq	r0, [r1, #-289]	; 0x121
     f50:	00959403 	addseq	r9, r5, r3, lsl #8
     f54:	50012100 	andpl	r2, r1, r0, lsl #2
     f58:	95780305 	ldrbls	r0, [r8, #-773]!	; 0x305
     f5c:	25000000 	strcs	r0, [r0, #-0]
     f60:	0000847c 	andeq	r8, r0, ip, ror r4
     f64:	00001161 	andeq	r1, r0, r1, ror #2
     f68:	00849820 	addeq	r9, r4, r0, lsr #16
     f6c:	00079500 	andeq	r9, r7, r0, lsl #10
     f70:	51012100 	mrspl	r2, (UNDEF: 17)
     f74:	21007a02 	tstcs	r0, r2, lsl #20
     f78:	78025001 	stmdavc	r2, {r0, ip, lr}
     f7c:	06000000 	streq	r0, [r0], -r0
     f80:	00004f04 	andeq	r4, r0, r4, lsl #30
     f84:	00902b00 	addseq	r2, r0, r0, lsl #22
     f88:	0c420000 	mareq	acc0, r0, r2
     f8c:	812c0000 	teqhi	ip, r0
     f90:	12000000 	andne	r0, r0, #0
     f94:	0c320700 	ldceq	7, cr0, [r2], #-0
     f98:	48240000 	stmdami	r4!, {}	; <UNPREDICTABLE>
     f9c:	01000001 	tsteq	r0, r1
     fa0:	00002584 	andeq	r2, r0, r4, lsl #11
     fa4:	0084d400 	addeq	sp, r4, r0, lsl #8
     fa8:	00007800 	andeq	r7, r0, r0, lsl #16
     fac:	059c0100 	ldreq	r0, [ip, #256]	; 0x100
     fb0:	1400000d 	strne	r0, [r0], #-13
     fb4:	84010075 	strhi	r0, [r1], #-117	; 0x75
     fb8:	00000755 	andeq	r0, r0, r5, asr r7
     fbc:	00000878 	andeq	r0, r0, r8, ror r8
     fc0:	66756214 			; <UNDEFINED> instruction: 0x66756214
     fc4:	2c840100 	stfcss	f0, [r4], {0}
     fc8:	ac00000c 	stcge	0, cr0, [r0], {12}
     fcc:	13000008 	movwne	r0, #8
     fd0:	000002c8 	andeq	r0, r0, r8, asr #5
     fd4:	00688501 	rsbeq	r8, r8, r1, lsl #10
     fd8:	08e00000 	stmiaeq	r0!, {}^	; <UNPREDICTABLE>
     fdc:	da130000 	ble	4c0fe4 <__bss_end__+0x4b7494>
     fe0:	01000002 	tsteq	r0, r2
     fe4:	00006885 	andeq	r6, r0, r5, lsl #17
     fe8:	00091900 	andeq	r1, r9, r0, lsl #18
     fec:	00e92a00 	rsceq	r2, r9, r0, lsl #20
     ff0:	0d150000 	ldceq	0, cr0, [r5, #-0]
     ff4:	03050000 	movweq	r0, #20480	; 0x5000
     ff8:	00009514 	andeq	r9, r0, r4, lsl r5
     ffc:	01006916 	tsteq	r0, r6, lsl r9
    1000:	0000258a 	andeq	r2, r0, sl, lsl #11
    1004:	00094d00 	andeq	r4, r9, r0, lsl #26
    1008:	85002600 	strhi	r2, [r0, #-1536]	; 0x600
    100c:	114b0000 	mrsne	r0, (UNDEF: 75)
    1010:	0ce50000 	stcleq	0, cr0, [r5]
    1014:	01210000 	teqeq	r1, r0
    1018:	87080253 	smlsdhi	r8, r3, r2, r0
    101c:	05520121 	ldrbeq	r0, [r2, #-289]	; 0x121
    1020:	00951403 	addseq	r1, r5, r3, lsl #8
    1024:	51012100 	mrspl	r2, (UNDEF: 17)
    1028:	95940305 	ldrls	r0, [r4, #773]	; 0x305
    102c:	01210000 	teqeq	r1, r0
    1030:	78030550 	stmdavc	r3, {r4, r6, r8, sl}
    1034:	00000095 	muleq	r0, r5, r0
    1038:	00850425 	addeq	r0, r5, r5, lsr #8
    103c:	00116100 	andseq	r6, r1, r0, lsl #2
    1040:	85202000 	strhi	r2, [r0, #-0]!
    1044:	07950000 	ldreq	r0, [r5, r0]
    1048:	01210000 	teqeq	r1, r0
    104c:	00780251 	rsbseq	r0, r8, r1, asr r2
    1050:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
    1054:	00000077 	andeq	r0, r0, r7, ror r0
    1058:	0000902b 	andeq	r9, r0, fp, lsr #32
    105c:	000d1500 	andeq	r1, sp, r0, lsl #10
    1060:	00812c00 	addeq	r2, r1, r0, lsl #24
    1064:	00140000 	andseq	r0, r4, r0
    1068:	000d0507 	andeq	r0, sp, r7, lsl #10
    106c:	00152400 	andseq	r2, r5, r0, lsl #8
    1070:	97010000 	strls	r0, [r1, -r0]
    1074:	000000d9 	ldrdeq	r0, [r0], -r9
    1078:	0000854c 	andeq	r8, r0, ip, asr #10
    107c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    1080:	0e139c01 	cdpeq	12, 1, cr9, cr3, cr1, {0}
    1084:	74140000 	ldrvc	r0, [r4], #-0
    1088:	97010078 	smlsdxls	r1, r8, r0, r0
    108c:	0000004f 	andeq	r0, r0, pc, asr #32
    1090:	0000096c 	andeq	r0, r0, ip, ror #18
    1094:	00787214 	rsbseq	r7, r8, r4, lsl r2
    1098:	004f9701 	subeq	r9, pc, r1, lsl #14
    109c:	098d0000 	stmibeq	sp, {}	; <UNPREDICTABLE>
    10a0:	15130000 	ldrne	r0, [r3, #-0]
    10a4:	01000001 	tsteq	r0, r1
    10a8:	00006897 	muleq	r0, r7, r8
    10ac:	0009ae00 	andeq	sl, r9, r0, lsl #28
    10b0:	01d42900 	bicseq	r2, r4, r0, lsl #18
    10b4:	97010000 	strls	r0, [r1, -r0]
    10b8:	00000068 	andeq	r0, r0, r8, rrx
    10bc:	2d009102 	stfcsd	f1, [r0, #-8]
    10c0:	007a686d 	rsbseq	r6, sl, sp, ror #16
    10c4:	002c9f01 	eoreq	r9, ip, r1, lsl #30
    10c8:	27000000 	strcs	r0, [r0, -r0]
    10cc:	2f2729b9 	svccs	0x002729b9
    10d0:	01000002 	tsteq	r0, r2
    10d4:	00002ca0 	andeq	r2, r0, r0, lsr #25
    10d8:	0009cc00 	andeq	ip, r9, r0, lsl #24
    10dc:	00e92a00 	rsceq	r2, r9, r0, lsl #20
    10e0:	0e230000 	cdpeq	0, 2, cr0, cr3, cr0, {0}
    10e4:	03050000 	movweq	r0, #20480	; 0x5000
    10e8:	0000952c 	andeq	r9, r0, ip, lsr #10
    10ec:	00857419 	addeq	r7, r5, r9, lsl r4
    10f0:	00000800 	andeq	r0, r0, r0, lsl #16
    10f4:	000db200 	andeq	fp, sp, r0, lsl #4
    10f8:	6e692e00 	cdpvs	14, 6, cr2, cr9, cr0, {0}
    10fc:	2c9b0100 	ldfcss	f0, [fp], {0}
    1100:	01000000 	mrseq	r0, (UNDEF: 0)
    1104:	856c2600 	strbhi	r2, [ip, #-1536]!	; 0x600
    1108:	11680000 	cmnne	r8, r0
    110c:	0dc60000 	stcleq	0, cr0, [r6]
    1110:	01210000 	teqeq	r1, r0
    1114:	00780250 	rsbseq	r0, r8, r0, asr r2
    1118:	85742600 	ldrbhi	r2, [r4, #-1536]!	; 0x600
    111c:	11790000 	cmnne	r9, r0
    1120:	0dda0000 	ldcleq	0, cr0, [sl]
    1124:	01210000 	teqeq	r1, r0
    1128:	00770250 	rsbseq	r0, r7, r0, asr r2
    112c:	85d02600 	ldrbhi	r2, [r0, #1536]	; 0x600
    1130:	114b0000 	mrsne	r0, (UNDEF: 75)
    1134:	0e090000 	cdpeq	0, 0, cr0, cr9, cr0, {0}
    1138:	01210000 	teqeq	r1, r0
    113c:	a1080253 	tstge	r8, r3, asr r2
    1140:	05520121 	ldrbeq	r0, [r2, #-289]	; 0x121
    1144:	00952c03 	addseq	r2, r5, r3, lsl #24
    1148:	51012100 	mrspl	r2, (UNDEF: 17)
    114c:	95940305 	ldrls	r0, [r4, #773]	; 0x305
    1150:	01210000 	teqeq	r1, r0
    1154:	a0030550 	andge	r0, r3, r0, asr r5
    1158:	00000095 	muleq	r0, r5, r0
    115c:	0085d425 	addeq	sp, r5, r5, lsr #8
    1160:	00116100 	andseq	r6, r1, r0, lsl #2
    1164:	902b0000 	eorls	r0, fp, r0
    1168:	23000000 	movwcs	r0, #0
    116c:	2c00000e 	stccs	0, cr0, [r0], {14}
    1170:	00000081 	andeq	r0, r0, r1, lsl #1
    1174:	13070013 	movwne	r0, #28691	; 0x7013
    1178:	2400000e 	strcs	r0, [r0], #-14
    117c:	00000222 	andeq	r0, r0, r2, lsr #4
    1180:	0025ad01 	eoreq	sl, r5, r1, lsl #26
    1184:	85fc0000 	ldrbhi	r0, [ip, #0]!
    1188:	00380000 	eorseq	r0, r8, r0
    118c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1190:	00000ec2 	andeq	r0, r0, r2, asr #29
    1194:	0001cf13 	andeq	ip, r1, r3, lsl pc
    1198:	55ad0100 	strpl	r0, [sp, #256]!	; 0x100
    119c:	fa000007 	blx	11c0 <_start-0x6e40>
    11a0:	16000009 	strne	r0, [r0], -r9
    11a4:	00736572 	rsbseq	r6, r3, r2, ror r5
    11a8:	0025ae01 	eoreq	sl, r5, r1, lsl #28
    11ac:	0a1b0000 	beq	6c11b4 <__bss_end__+0x6b7664>
    11b0:	e92a0000 	stmdb	sl!, {}	; <UNPREDICTABLE>
    11b4:	d2000000 	andle	r0, r0, #0
    11b8:	0500000e 	streq	r0, [r0, #-14]
    11bc:	00954003 	addseq	r4, r5, r3
    11c0:	86082600 	strhi	r2, [r8], -r0, lsl #12
    11c4:	07950000 	ldreq	r0, [r5, r0]
    11c8:	0e890000 	cdpeq	0, 8, cr0, cr9, cr0, {0}
    11cc:	01210000 	teqeq	r1, r0
    11d0:	ff090251 			; <UNDEFINED> instruction: 0xff090251
    11d4:	03500121 	cmpeq	r0, #1073741832	; 0x40000008
    11d8:	005001f3 	ldrsheq	r0, [r0], #-19	; 0xffffffed
    11dc:	00862426 	addeq	r2, r6, r6, lsr #8
    11e0:	00114b00 	andseq	r4, r1, r0, lsl #22
    11e4:	000eb800 	andeq	fp, lr, r0, lsl #16
    11e8:	53012100 	movwpl	r2, #4352	; 0x1100
    11ec:	21b00802 	lslscs	r0, r2, #16
    11f0:	03055201 	movweq	r5, #20993	; 0x5201
    11f4:	00009540 	andeq	r9, r0, r0, asr #10
    11f8:	05510121 	ldrbeq	r0, [r1, #-289]	; 0x121
    11fc:	00959403 	addseq	r9, r5, r3, lsl #8
    1200:	50012100 	andpl	r2, r1, r0, lsl #2
    1204:	95e40305 	strbls	r0, [r4, #773]!	; 0x305
    1208:	25000000 	strcs	r0, [r0, #-0]
    120c:	00008628 	andeq	r8, r0, r8, lsr #12
    1210:	00001161 	andeq	r1, r0, r1, ror #2
    1214:	00902b00 	addseq	r2, r0, r0, lsl #22
    1218:	0ed20000 	cdpeq	0, 13, cr0, cr2, cr0, {0}
    121c:	812c0000 	teqhi	ip, r0
    1220:	0c000000 	stceq	0, cr0, [r0], {-0}
    1224:	0ec20700 	cdpeq	7, 12, cr0, cr2, cr0, {0}
    1228:	5f120000 	svcpl	0x00120000
    122c:	01000002 	tsteq	r0, r2
    1230:	008634b4 			; <UNDEFINED> instruction: 0x008634b4
    1234:	00002c00 	andeq	r2, r0, r0, lsl #24
    1238:	1b9c0100 	blne	fe701640 <__bss_end__+0xfe6f7af0>
    123c:	1300000f 	movwne	r0, #15
    1240:	000001cf 	andeq	r0, r0, pc, asr #3
    1244:	0755b401 	ldrbeq	fp, [r5, -r1, lsl #8]
    1248:	0a2e0000 	beq	b81250 <__bss_end__+0xb77700>
    124c:	6d140000 	ldcvs	0, cr0, [r4, #-0]
    1250:	01006773 	tsteq	r0, r3, ror r7
    1254:	000097b4 			; <UNDEFINED> instruction: 0x000097b4
    1258:	000a4c00 	andeq	r4, sl, r0, lsl #24
    125c:	864c2000 	strbhi	r2, [ip], -r0
    1260:	01760000 	cmneq	r6, r0
    1264:	01210000 	teqeq	r1, r0
    1268:	00750250 	rsbseq	r0, r5, r0, asr r2
    126c:	76240000 	strtvc	r0, [r4], -r0
    1270:	01000002 	tsteq	r0, r2
    1274:	000025bd 			; <UNDEFINED> instruction: 0x000025bd
    1278:	00866000 	addeq	r6, r6, r0
    127c:	00008000 	andeq	r8, r0, r0
    1280:	069c0100 	ldreq	r0, [ip], r0, lsl #2
    1284:	13000010 	movwne	r0, #16
    1288:	000001cf 	andeq	r0, r0, pc, asr #3
    128c:	0755bd01 	ldrbeq	fp, [r5, -r1, lsl #26]
    1290:	0a6a0000 	beq	1a81298 <__bss_end__+0x1a77748>
    1294:	662f0000 	strtvs	r0, [pc], -r0
    1298:	0100746d 	tsteq	r0, sp, ror #8
    129c:	000097bd 			; <UNDEFINED> instruction: 0x000097bd
    12a0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    12a4:	75621530 	strbvc	r1, [r2, #-1328]!	; 0x530
    12a8:	be010066 	cdplt	0, 0, cr0, cr1, cr6, {3}
    12ac:	00001006 	andeq	r1, r0, r6
    12b0:	7c9c9103 	ldfvcd	f1, [ip], {3}
    12b4:	00033218 	andeq	r3, r3, r8, lsl r2
    12b8:	06c00100 	strbeq	r0, [r0], r0, lsl #2
    12bc:	03000001 	movweq	r0, #1
    12c0:	167c9891 			; <UNDEFINED> instruction: 0x167c9891
    12c4:	01007a73 	tsteq	r0, r3, ror sl
    12c8:	000025c2 	andeq	r2, r0, r2, asr #11
    12cc:	000a9600 	andeq	r9, sl, r0, lsl #12
    12d0:	00e92a00 	rsceq	r2, r9, r0, lsl #20
    12d4:	10270000 	eorne	r0, r7, r0
    12d8:	03050000 	movweq	r0, #20480	; 0x5000
    12dc:	00009550 	andeq	r9, r0, r0, asr r5
    12e0:	00868826 	addeq	r8, r6, r6, lsr #16
    12e4:	00118a00 	andseq	r8, r1, r0, lsl #20
    12e8:	000fb600 	andeq	fp, pc, r0, lsl #12
    12ec:	53012100 	movwpl	r2, #4352	; 0x1100
    12f0:	21589102 	cmpcs	r8, r2, lsl #2
    12f4:	91035201 	tstls	r3, r1, lsl #4
    12f8:	01210654 	teqeq	r1, r4, asr r6
    12fc:	cc0a0351 	stcgt	3, cr0, [sl], {81}	; 0x51
    1300:	50012101 	andpl	r2, r1, r1, lsl #2
    1304:	7bfc9103 	blvc	fff25718 <__bss_end__+0xfff1bbc8>
    1308:	86ac2600 	strthi	r2, [ip], r0, lsl #12
    130c:	114b0000 	mrsne	r0, (UNDEF: 75)
    1310:	0fe50000 	svceq	0x00e50000
    1314:	01210000 	teqeq	r1, r0
    1318:	c4080253 	strgt	r0, [r8], #-595	; 0x253
    131c:	05520121 	ldrbeq	r0, [r2, #-289]	; 0x121
    1320:	00955003 	addseq	r5, r5, r3
    1324:	51012100 	mrspl	r2, (UNDEF: 17)
    1328:	95940305 	ldrls	r0, [r4, #773]	; 0x305
    132c:	01210000 	teqeq	r1, r0
    1330:	1c030550 	cfstr32ne	mvfx0, [r3], {80}	; 0x50
    1334:	00000096 	muleq	r0, r6, r0
    1338:	0086b025 	addeq	fp, r6, r5, lsr #32
    133c:	00116100 	andseq	r6, r1, r0, lsl #2
    1340:	86bc2000 	ldrthi	r2, [ip], r0
    1344:	0ed70000 	cdpeq	0, 13, cr0, cr7, cr0, {0}
    1348:	01210000 	teqeq	r1, r0
    134c:	fc910351 	ldc2	3, cr0, [r1], {81}	; 0x51
    1350:	5001217b 	andpl	r2, r1, fp, ror r1
    1354:	00007502 	andeq	r7, r0, r2, lsl #10
    1358:	00902b00 	addseq	r2, r0, r0, lsl #22
    135c:	10170000 	andsne	r0, r7, r0
    1360:	81310000 	teqhi	r1, r0
    1364:	cb000000 	blgt	136c <_start-0x6c94>
    1368:	902b0001 	eorls	r0, fp, r1
    136c:	27000000 	strcs	r0, [r0, -r0]
    1370:	2c000010 	stccs	0, cr0, [r0], {16}
    1374:	00000081 	andeq	r0, r0, r1, lsl #1
    1378:	1707000e 	strne	r0, [r7, -lr]
    137c:	24000010 	strcs	r0, [r0], #-16
    1380:	000002f6 	strdeq	r0, [r0], -r6
    1384:	0025c901 	eoreq	ip, r5, r1, lsl #18
    1388:	86e00000 	strbthi	r0, [r0], r0
    138c:	00480000 	subeq	r0, r8, r0
    1390:	9c010000 	stcls	0, cr0, [r1], {-0}
    1394:	00001100 	andeq	r1, r0, r0, lsl #2
    1398:	01007514 	tsteq	r0, r4, lsl r5
    139c:	000755c9 	andeq	r5, r7, r9, asr #11
    13a0:	000ad500 	andeq	sp, sl, r0, lsl #10
    13a4:	75621400 	strbvc	r1, [r2, #-1024]!	; 0x400
    13a8:	c9010066 	stmdbgt	r1, {r1, r2, r5, r6}
    13ac:	00000c2c 	andeq	r0, r0, ip, lsr #24
    13b0:	00000af6 	strdeq	r0, [r0], -r6
    13b4:	0002c813 	andeq	ip, r2, r3, lsl r8
    13b8:	68c90100 	stmiavs	r9, {r8}^
    13bc:	17000000 	strne	r0, [r0, -r0]
    13c0:	1400000b 	strne	r0, [r0], #-11
    13c4:	00646e65 	rsbeq	r6, r4, r5, ror #28
    13c8:	004fc901 	subeq	ip, pc, r1, lsl #18
    13cc:	0b380000 	bleq	e013d4 <__bss_end__+0xdf7884>
    13d0:	72160000 	andsvc	r0, r6, #0
    13d4:	01007365 	tsteq	r0, r5, ror #6
    13d8:	000025ca 	andeq	r2, r0, sl, asr #11
    13dc:	000b5900 	andeq	r5, fp, r0, lsl #18
    13e0:	00e92a00 	rsceq	r2, r9, r0, lsl #20
    13e4:	11100000 	tstne	r0, r0
    13e8:	03050000 	movweq	r0, #20480	; 0x5000
    13ec:	00009560 	andeq	r9, r0, r0, ror #10
    13f0:	0086f426 	addeq	pc, r6, r6, lsr #8
    13f4:	000b5100 	andeq	r5, fp, r0, lsl #2
    13f8:	0010c700 	andseq	ip, r0, r0, lsl #14
    13fc:	52012100 	andpl	r2, r1, #0, 2
    1400:	5201f303 	andpl	pc, r1, #201326592	; 0xc000000
    1404:	03510121 	cmpeq	r1, #1073741832	; 0x40000008
    1408:	215101f3 	ldrshcs	r0, [r1, #-19]	; 0xffffffed
    140c:	f3035001 	vhadd.u8	d5, d3, d1
    1410:	02215001 	eoreq	r5, r1, #1
    1414:	0902007d 	stmdbeq	r2, {r0, r2, r3, r4, r5, r6}
    1418:	102600ff 	strdne	r0, [r6], -pc	; <UNPREDICTABLE>
    141c:	4b000087 	blmi	1640 <_start-0x69c0>
    1420:	f6000011 			; <UNDEFINED> instruction: 0xf6000011
    1424:	21000010 	tstcs	r0, r0, lsl r0
    1428:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    142c:	520121cc 	andpl	r2, r1, #204, 2	; 0x33
    1430:	95600305 	strbls	r0, [r0, #-773]!	; 0x305
    1434:	01210000 	teqeq	r1, r0
    1438:	94030551 	strls	r0, [r3], #-1361	; 0x551
    143c:	21000095 	swpcs	r0, r5, [r0]	; <UNPREDICTABLE>
    1440:	03055001 	movweq	r5, #20481	; 0x5001
    1444:	000095e4 	andeq	r9, r0, r4, ror #11
    1448:	87142500 	ldrhi	r2, [r4, -r0, lsl #10]
    144c:	11610000 	cmnne	r1, r0
    1450:	2b000000 	blcs	1458 <_start-0x6ba8>
    1454:	00000090 	muleq	r0, r0, r0
    1458:	00001110 	andeq	r1, r0, r0, lsl r1
    145c:	0000812c 	andeq	r8, r0, ip, lsr #2
    1460:	07001600 	streq	r1, [r0, -r0, lsl #12]
    1464:	00001100 	andeq	r1, r0, r0, lsl #2
    1468:	0002cf32 	andeq	ip, r2, r2, lsr pc
    146c:	2b210600 	blcs	842c74 <__bss_end__+0x839124>
    1470:	33000011 	movwcc	r0, #17
    1474:	0000002c 	andeq	r0, r0, ip, lsr #32
    1478:	00002c33 	andeq	r2, r0, r3, lsr ip
    147c:	b5340000 	ldrlt	r0, [r4, #-0]!
    1480:	07000002 	streq	r0, [r0, -r2]
    1484:	00002c54 	andeq	r2, r0, r4, asr ip
    1488:	02853500 	addeq	r3, r5, #0, 10
    148c:	24060000 	strcs	r0, [r6], #-0
    1490:	00000025 	andeq	r0, r0, r5, lsr #32
    1494:	0000114b 	andeq	r1, r0, fp, asr #2
    1498:	00002c33 	andeq	r2, r0, r3, lsr ip
    149c:	6f350000 	svcvs	0x00350000
    14a0:	07000002 	streq	r0, [r0, -r2]
    14a4:	00002527 	andeq	r2, r0, r7, lsr #10
    14a8:	00116100 	andseq	r6, r1, r0, lsl #2
    14ac:	00973300 	addseq	r3, r7, r0, lsl #6
    14b0:	00300000 	eorseq	r0, r0, r0
    14b4:	0000bf36 	andeq	fp, r0, r6, lsr pc
    14b8:	32630700 	rsbcc	r0, r3, #0, 14
    14bc:	00000312 	andeq	r0, r0, r2, lsl r3
    14c0:	11791d06 	cmnne	r9, r6, lsl #26
    14c4:	2c330000 	ldccs	0, cr0, [r3], #-0
    14c8:	00000000 	andeq	r0, r0, r0
    14cc:	0002e732 	andeq	lr, r2, r2, lsr r7
    14d0:	8a1c0600 	bhi	702cd8 <__bss_end__+0x6f9188>
    14d4:	33000011 	movwcc	r0, #17
    14d8:	0000002c 	andeq	r0, r0, ip, lsr #32
    14dc:	026c3700 	rsbeq	r3, ip, #0, 14
    14e0:	02080000 	andeq	r0, r8, #0
    14e4:	00000025 	andeq	r0, r0, r5, lsr #32
    14e8:	00008a33 	andeq	r8, r0, r3, lsr sl
    14ec:	00253300 	eoreq	r3, r5, r0, lsl #6
    14f0:	97330000 	ldrls	r0, [r3, -r0]!
    14f4:	33000000 	movwcc	r0, #0
    14f8:	00000106 	andeq	r0, r0, r6, lsl #2
    14fc:	01910000 	orrseq	r0, r1, r0
    1500:	00040000 	andeq	r0, r4, r0
    1504:	00000459 	andeq	r0, r0, r9, asr r4
    1508:	00290104 	eoreq	r0, r9, r4, lsl #2
    150c:	37010000 	strcc	r0, [r1, -r0]
    1510:	45000003 	strmi	r0, [r0, #-3]
    1514:	28000003 	stmdacs	r0, {r0, r1}
    1518:	58000087 	stmdapl	r0, {r0, r1, r2, r7}
    151c:	ca000000 	bgt	1524 <_start-0x6adc>
    1520:	02000004 	andeq	r0, r0, #4
    1524:	000002a1 	andeq	r0, r0, r1, lsr #5
    1528:	00302802 	eorseq	r2, r0, r2, lsl #16
    152c:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    1530:	04000002 	streq	r0, [r0], #-2
    1534:	00470003 	subeq	r0, r7, r3
    1538:	0d040000 	stceq	0, cr0, [r4, #-0]
    153c:	47000003 	strmi	r0, [r0, -r3]
    1540:	00000000 	andeq	r0, r0, r0
    1544:	02040500 	andeq	r0, r4, #0, 10
    1548:	0000021a 	andeq	r0, r0, sl, lsl r2
    154c:	00256202 	eoreq	r6, r5, r2, lsl #4
    1550:	04060000 	streq	r0, [r6], #-0
    1554:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    1558:	07040700 	streq	r0, [r4, -r0, lsl #14]
    155c:	00000100 	andeq	r0, r0, r0, lsl #2
    1560:	aa060107 	bge	181984 <__bss_end__+0x177e34>
    1564:	07000000 	streq	r0, [r0, -r0]
    1568:	01310502 	teqeq	r1, r2, lsl #10
    156c:	04070000 	streq	r0, [r7], #-0
    1570:	00012805 	andeq	r2, r1, r5, lsl #16
    1574:	05080700 	streq	r0, [r8, #-1792]	; 0x700
    1578:	00000123 	andeq	r0, r0, r3, lsr #2
    157c:	a8080107 	stmdage	r8, {r0, r1, r2, r8}
    1580:	07000000 	streq	r0, [r0, -r0]
    1584:	00cc0702 	sbceq	r0, ip, r2, lsl #14
    1588:	04070000 	streq	r0, [r7], #-0
    158c:	0000fb07 	andeq	pc, r0, r7, lsl #22
    1590:	07080700 	streq	r0, [r8, -r0, lsl #14]
    1594:	000000f6 	strdeq	r0, [r0], -r6
    1598:	1a070407 	bne	1c25bc <__bss_end__+0x1b8a6c>
    159c:	08000001 	stmdaeq	r0, {r0}
    15a0:	0000a704 	andeq	sl, r0, r4, lsl #14
    15a4:	08010700 	stmdaeq	r1, {r8, r9, sl}
    15a8:	000000b1 	strheq	r0, [r0], -r1
    15ac:	00b40408 	adcseq	r0, r4, r8, lsl #8
    15b0:	a7090000 	strge	r0, [r9, -r0]
    15b4:	0a000000 	beq	15bc <_start-0x6a44>
    15b8:	0000026f 	andeq	r0, r0, pc, ror #4
    15bc:	00540601 	subseq	r0, r4, r1, lsl #12
    15c0:	87280000 	strhi	r0, [r8, -r0]!
    15c4:	00580000 	subseq	r0, r8, r0
    15c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    15cc:	00000143 	andeq	r0, r0, r3, asr #2
    15d0:	746d660b 	strbtvc	r6, [sp], #-1547	; 0x60b
    15d4:	ae060100 	adfges	f0, f6, f0
    15d8:	02000000 	andeq	r0, r0, #0
    15dc:	0d0c7091 	stceq	0, cr7, [ip, #-580]	; 0xfffffdbc
    15e0:	00667562 	rsbeq	r7, r6, r2, ror #10
    15e4:	01430801 	cmpeq	r3, r1, lsl #16
    15e8:	03050000 	movweq	r0, #20480	; 0x5000
    15ec:	00009750 	andeq	r9, r0, r0, asr r7
    15f0:	0003320e 	andeq	r3, r3, lr, lsl #4
    15f4:	49090100 	stmdbmi	r9, {r8}
    15f8:	02000000 	andeq	r0, r0, #0
    15fc:	730f5c91 	movwvc	r5, #64657	; 0xfc91
    1600:	0c01007a 	stceq	0, cr0, [r1], {122}	; 0x7a
    1604:	00000054 	andeq	r0, r0, r4, asr r0
    1608:	00000b77 	andeq	r0, r0, r7, ror fp
    160c:	00875010 	addeq	r5, r7, r0, lsl r0
    1610:	00017400 	andeq	r7, r1, r0, lsl #8
    1614:	00013600 	andeq	r3, r1, r0, lsl #12
    1618:	53011100 	movwpl	r1, #4352	; 0x1100
    161c:	114c9102 	cmpne	ip, r2, lsl #2
    1620:	91035201 	tstls	r3, r1, lsl #4
    1624:	01110648 	tsteq	r1, r8, asr #12
    1628:	000a0351 	andeq	r0, sl, r1, asr r3
    162c:	50011104 	andpl	r1, r1, r4, lsl #2
    1630:	00007402 	andeq	r7, r0, r2, lsl #8
    1634:	00876412 	addeq	r6, r7, r2, lsl r4
    1638:	50011100 	andpl	r1, r1, r0, lsl #2
    163c:	00007402 	andeq	r7, r0, r2, lsl #8
    1640:	00a71300 	adceq	r1, r7, r0, lsl #6
    1644:	01540000 	cmpeq	r4, r0
    1648:	9a140000 	bls	501650 <__bss_end__+0x4f7b00>
    164c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    1650:	54150003 	ldrpl	r0, [r5], #-3
    1654:	63000000 	movwvs	r0, #0
    1658:	16000001 	strne	r0, [r0], -r1
    165c:	000000ae 	andeq	r0, r0, lr, lsr #1
    1660:	039e1700 	orrseq	r1, lr, #0, 14
    1664:	20040000 	andcs	r0, r4, r0
    1668:	0000016e 	andeq	r0, r0, lr, ror #2
    166c:	01540408 	cmpeq	r4, r8, lsl #8
    1670:	6c180000 	ldcvs	0, cr0, [r8], {-0}
    1674:	05000002 	streq	r0, [r0, #-2]
    1678:	00005402 	andeq	r5, r0, r2, lsl #8
    167c:	00a11600 	adceq	r1, r1, r0, lsl #12
    1680:	54160000 	ldrpl	r0, [r6], #-0
    1684:	16000000 	strne	r0, [r0], -r0
    1688:	000000ae 	andeq	r0, r0, lr, lsr #1
    168c:	00004916 	andeq	r4, r0, r6, lsl r9
    1690:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
    1694:	04000000 	streq	r0, [r0], #-0
    1698:	00058a00 	andeq	r8, r5, r0, lsl #20
    169c:	29010400 	stmdbcs	r1, {sl}
    16a0:	01000000 	mrseq	r0, (UNDEF: 0)
    16a4:	00000389 	andeq	r0, r0, r9, lsl #7
    16a8:	00000345 	andeq	r0, r0, r5, asr #6
    16ac:	00008780 	andeq	r8, r0, r0, lsl #15
    16b0:	00000034 	andeq	r0, r0, r4, lsr r0
    16b4:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    16b8:	69050402 	stmdbvs	r5, {r1, sl}
    16bc:	0300746e 	movweq	r7, #1134	; 0x46e
    16c0:	01000704 	tsteq	r0, r4, lsl #14
    16c4:	01030000 	mrseq	r0, (UNDEF: 3)
    16c8:	0000aa06 	andeq	sl, r0, r6, lsl #20
    16cc:	05020300 	streq	r0, [r2, #-768]	; 0x300
    16d0:	00000131 	andeq	r0, r0, r1, lsr r1
    16d4:	28050403 	stmdacs	r5, {r0, r1, sl}
    16d8:	03000001 	movweq	r0, #1
    16dc:	01230508 	teqeq	r3, r8, lsl #10
    16e0:	01030000 	mrseq	r0, (UNDEF: 3)
    16e4:	0000a808 	andeq	sl, r0, r8, lsl #16
    16e8:	07020300 	streq	r0, [r2, -r0, lsl #6]
    16ec:	000000cc 	andeq	r0, r0, ip, asr #1
    16f0:	fb070403 	blx	1c2706 <__bss_end__+0x1b8bb6>
    16f4:	03000000 	movweq	r0, #0
    16f8:	00f60708 	rscseq	r0, r6, r8, lsl #14
    16fc:	04030000 	streq	r0, [r3], #-0
    1700:	00011a07 	andeq	r1, r1, r7, lsl #20
    1704:	08010300 	stmdaeq	r1, {r8, r9}
    1708:	000000b1 	strheq	r0, [r0], -r1
    170c:	007f0404 	rsbseq	r0, pc, r4, lsl #8
    1710:	72050000 	andvc	r0, r5, #0
    1714:	06000000 	streq	r0, [r0], -r0
    1718:	00000395 	muleq	r0, r5, r3
    171c:	00250401 	eoreq	r0, r5, r1, lsl #8
    1720:	87800000 	strhi	r0, [r0, r0]
    1724:	00340000 	eorseq	r0, r4, r0
    1728:	9c010000 	stcls	0, cr0, [r1], {-0}
    172c:	000000ab 	andeq	r0, r0, fp, lsr #1
    1730:	01007007 	tsteq	r0, r7
    1734:	00007904 	andeq	r7, r0, r4, lsl #18
    1738:	000ba000 	andeq	sl, fp, r0
    173c:	25080000 	strcs	r0, [r8, #-0]
    1740:	ba000000 	blt	1748 <_start-0x68b8>
    1744:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1748:	00000025 	andeq	r0, r0, r5, lsr #32
    174c:	03a30a00 			; <UNDEFINED> instruction: 0x03a30a00
    1750:	1d020000 	stcne	0, cr0, [r2, #-0]
    1754:	000000c5 	andeq	r0, r0, r5, asr #1
    1758:	00ab0404 	adceq	r0, fp, r4, lsl #8
    175c:	25080000 	strcs	r0, [r8, #-0]
    1760:	da000000 	ble	1768 <_start-0x6898>
    1764:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1768:	00000079 	andeq	r0, r0, r9, ror r0
    176c:	039e0b00 	orrseq	r0, lr, #0, 22
    1770:	0c010000 	stceq	0, cr0, [r1], {-0}
    1774:	000000eb 	andeq	r0, r0, fp, ror #1
    1778:	93c40305 	bicls	r0, r4, #335544320	; 0x14000000
    177c:	04040000 	streq	r0, [r4], #-0
    1780:	000000cb 	andeq	r0, r0, fp, asr #1
    1784:	0000be00 	andeq	fp, r0, r0, lsl #28
    1788:	23000400 	movwcs	r0, #1024	; 0x400
    178c:	04000006 	streq	r0, [r0], #-6
    1790:	00002901 	andeq	r2, r0, r1, lsl #18
    1794:	03af0100 			; <UNDEFINED> instruction: 0x03af0100
    1798:	03450000 	movteq	r0, #20480	; 0x5000
    179c:	87b40000 	ldrhi	r0, [r4, r0]!
    17a0:	00200000 	eoreq	r0, r0, r0
    17a4:	066a0000 	strbteq	r0, [sl], -r0
    17a8:	01020000 	mrseq	r0, (UNDEF: 2)
    17ac:	0000aa06 	andeq	sl, r0, r6, lsl #20
    17b0:	08010200 	stmdaeq	r1, {r9}
    17b4:	000000a8 	andeq	r0, r0, r8, lsr #1
    17b8:	31050202 	tstcc	r5, r2, lsl #4
    17bc:	02000001 	andeq	r0, r0, #1
    17c0:	00cc0702 	sbceq	r0, ip, r2, lsl #14
    17c4:	04030000 	streq	r0, [r3], #-0
    17c8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    17cc:	07040200 	streq	r0, [r4, -r0, lsl #4]
    17d0:	00000100 	andeq	r0, r0, r0, lsl #2
    17d4:	23050802 	movwcs	r0, #22530	; 0x5802
    17d8:	02000001 	andeq	r0, r0, #1
    17dc:	00f60708 	rscseq	r0, r6, r8, lsl #14
    17e0:	04020000 	streq	r0, [r2], #-0
    17e4:	00012805 	andeq	r2, r1, r5, lsl #16
    17e8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    17ec:	0000011a 	andeq	r0, r0, sl, lsl r1
    17f0:	fb070402 	blx	1c2802 <__bss_end__+0x1b8cb2>
    17f4:	02000000 	andeq	r0, r0, #0
    17f8:	00b10801 	adcseq	r0, r1, r1, lsl #16
    17fc:	04040000 	streq	r0, [r4], #-0
    1800:	0000007f 	andeq	r0, r0, pc, ror r0
    1804:	00007205 	andeq	r7, r0, r5, lsl #4
    1808:	000e0600 	andeq	r0, lr, r0, lsl #12
    180c:	d4020000 	strle	r0, [r2], #-0
    1810:	00000048 	andeq	r0, r0, r8, asr #32
    1814:	00016607 	andeq	r6, r1, r7, lsl #12
    1818:	84230300 	strthi	r0, [r3], #-768	; 0x300
    181c:	b4000000 	strlt	r0, [r0], #-0
    1820:	20000087 	andcs	r0, r0, r7, lsl #1
    1824:	01000000 	mrseq	r0, (UNDEF: 0)
    1828:	0070089c 			; <UNDEFINED> instruction: 0x0070089c
    182c:	00790301 	rsbseq	r0, r9, r1, lsl #6
    1830:	0bbe0000 	bleq	fef81838 <__bss_end__+0xfef77ce8>
    1834:	72090000 	andvc	r0, r9, #0
    1838:	01007465 	tsteq	r0, r5, ror #8
    183c:	00008404 	andeq	r8, r0, r4, lsl #8
    1840:	000bdf00 	andeq	sp, fp, r0, lsl #30
    1844:	54000000 	strpl	r0, [r0], #-0
    1848:	04000006 	streq	r0, [r0], #-6
    184c:	0006a200 	andeq	sl, r6, r0, lsl #4
    1850:	29010400 	stmdbcs	r1, {sl}
    1854:	01000000 	mrseq	r0, (UNDEF: 0)
    1858:	000003e9 	andeq	r0, r0, r9, ror #7
    185c:	00000345 	andeq	r0, r0, r5, asr #6
    1860:	000087d4 	ldrdeq	r8, [r0], -r4
    1864:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1868:	0000075f 	andeq	r0, r0, pc, asr r7
    186c:	69050402 	stmdbvs	r5, {r1, sl}
    1870:	0300746e 	movweq	r7, #1134	; 0x46e
    1874:	01000704 	tsteq	r0, r4, lsl #14
    1878:	01030000 	mrseq	r0, (UNDEF: 3)
    187c:	0000aa06 	andeq	sl, r0, r6, lsl #20
    1880:	05020300 	streq	r0, [r2, #-768]	; 0x300
    1884:	00000131 	andeq	r0, r0, r1, lsr r1
    1888:	28050403 	stmdacs	r5, {r0, r1, sl}
    188c:	03000001 	movweq	r0, #1
    1890:	01230508 	teqeq	r3, r8, lsl #10
    1894:	01030000 	mrseq	r0, (UNDEF: 3)
    1898:	0000a808 	andeq	sl, r0, r8, lsl #16
    189c:	07020300 	streq	r0, [r2, -r0, lsl #6]
    18a0:	000000cc 	andeq	r0, r0, ip, asr #1
    18a4:	fb070403 	blx	1c28ba <__bss_end__+0x1b8d6a>
    18a8:	03000000 	movweq	r0, #0
    18ac:	00f60708 	rscseq	r0, r6, r8, lsl #14
    18b0:	04030000 	streq	r0, [r3], #-0
    18b4:	00011a07 	andeq	r1, r1, r7, lsl #20
    18b8:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    18bc:	00007a04 	andeq	r7, r0, r4, lsl #20
    18c0:	08010300 	stmdaeq	r1, {r8, r9}
    18c4:	000000b1 	strheq	r0, [r0], -r1
    18c8:	00870405 	addeq	r0, r7, r5, lsl #8
    18cc:	7a060000 	bvc	1818d4 <__bss_end__+0x177d84>
    18d0:	07000000 	streq	r0, [r0, -r0]
    18d4:	000002a1 	andeq	r0, r0, r1, lsr #5
    18d8:	00972802 	addseq	r2, r7, r2, lsl #16
    18dc:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    18e0:	04000002 	streq	r0, [r0], #-2
    18e4:	00ae0004 	adceq	r0, lr, r4
    18e8:	0d090000 	stceq	0, cr0, [r9, #-0]
    18ec:	72000003 	andvc	r0, r0, #3
    18f0:	00000000 	andeq	r0, r0, r0
    18f4:	021a0700 	andseq	r0, sl, #0, 14
    18f8:	62020000 	andvs	r0, r2, #0
    18fc:	0000008c 	andeq	r0, r0, ip, lsl #1
    1900:	0003cb0a 	andeq	ip, r3, sl, lsl #22
    1904:	25270100 	strcs	r0, [r7, #-256]!	; 0x100
    1908:	d4000000 	strle	r0, [r0], #-0
    190c:	14000087 	strne	r0, [r0], #-135	; 0x87
    1910:	01000000 	mrseq	r0, (UNDEF: 0)
    1914:	0000e09c 	muleq	r0, ip, r0
    1918:	00630b00 	rsbeq	r0, r3, r0, lsl #22
    191c:	00252701 	eoreq	r2, r5, r1, lsl #14
    1920:	0bfe0000 	bleq	fff81928 <__bss_end__+0xfff77dd8>
    1924:	0c000000 	stceq	0, cr0, [r0], {-0}
    1928:	00646170 	rsbeq	r6, r4, r0, ror r1
    192c:	00742e01 	rsbseq	r2, r4, r1, lsl #28
    1930:	87e80000 	strbhi	r0, [r8, r0]!
    1934:	002c0000 	eoreq	r0, ip, r0
    1938:	9c010000 	stcls	0, cr0, [r1], {-0}
    193c:	00000130 	andeq	r0, r0, r0, lsr r1
    1940:	0100700b 	tsteq	r0, fp
    1944:	0000742e 	andeq	r7, r0, lr, lsr #8
    1948:	000c2c00 	andeq	r2, ip, r0, lsl #24
    194c:	03db0d00 	bicseq	r0, fp, #0, 26
    1950:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    1954:	00000074 	andeq	r0, r0, r4, ror r0
    1958:	00000c57 	andeq	r0, r0, r7, asr ip
    195c:	0004090e 	andeq	r0, r4, lr, lsl #18
    1960:	252e0100 	strcs	r0, [lr, #-256]!	; 0x100
    1964:	01000000 	mrseq	r0, (UNDEF: 0)
    1968:	656c0f52 	strbvs	r0, [ip, #-3922]!	; 0xf52
    196c:	2f01006e 	svccs	0x0001006e
    1970:	00000025 	andeq	r0, r0, r5, lsr #32
    1974:	0a005101 	beq	15d80 <__bss_end__+0xc230>
    1978:	000003c3 	andeq	r0, r0, r3, asr #7
    197c:	00743701 	rsbseq	r3, r4, r1, lsl #14
    1980:	88140000 	ldmdahi	r4, {}	; <UNPREDICTABLE>
    1984:	00400000 	subeq	r0, r0, r0
    1988:	9c010000 	stcls	0, cr0, [r1], {-0}
    198c:	0000019c 	muleq	r0, ip, r1
    1990:	7473640b 	ldrbtvc	r6, [r3], #-1035	; 0x40b
    1994:	74370100 	ldrtvc	r0, [r7], #-256	; 0x100
    1998:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    199c:	0b00000c 	bleq	19d4 <_start-0x662c>
    19a0:	3701006e 	strcc	r0, [r1, -lr, rrx]
    19a4:	00000025 	andeq	r0, r0, r5, lsr #32
    19a8:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
    19ac:	0100700b 	tsteq	r0, fp
    19b0:	00007437 	andeq	r7, r0, r7, lsr r4
    19b4:	000cd100 	andeq	sp, ip, r0, lsl #2
    19b8:	049a0d00 	ldreq	r0, [sl], #3328	; 0xd00
    19bc:	37010000 	strcc	r0, [r1, -r0]
    19c0:	00000074 	andeq	r0, r0, r4, ror r0
    19c4:	00000d07 	andeq	r0, r0, r7, lsl #26
    19c8:	6e656c10 	mcrvs	12, 3, r6, cr5, cr0, {0}
    19cc:	25390100 	ldrcs	r0, [r9, #-256]!	; 0x100
    19d0:	25000000 	strcs	r0, [r0, #-0]
    19d4:	0f00000d 	svceq	0x0000000d
    19d8:	3d010073 	stccc	0, cr0, [r1, #-460]	; 0xfffffe34
    19dc:	00000074 	andeq	r0, r0, r4, ror r0
    19e0:	0a005001 	beq	159ec <__bss_end__+0xbe9c>
    19e4:	00000417 	andeq	r0, r0, r7, lsl r4
    19e8:	00744701 	rsbseq	r4, r4, r1, lsl #14
    19ec:	88540000 	ldmdahi	r4, {}^	; <UNPREDICTABLE>
    19f0:	01980000 	orrseq	r0, r8, r0
    19f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    19f8:	000002ca 	andeq	r0, r0, sl, asr #5
    19fc:	0003db0d 	andeq	sp, r3, sp, lsl #22
    1a00:	2c470100 	stfcse	f0, [r7], {-0}
    1a04:	4c000000 	stcmi	0, cr0, [r0], {-0}
    1a08:	0b00000d 	bleq	1a44 <_start-0x65bc>
    1a0c:	00747364 	rsbseq	r7, r4, r4, ror #6
    1a10:	00744701 	rsbseq	r4, r4, r1, lsl #14
    1a14:	0d7a0000 	ldcleq	0, cr0, [sl, #-0]
    1a18:	6e0b0000 	cdpvs	0, 0, cr0, cr11, cr0, {0}
    1a1c:	25470100 	strbcs	r0, [r7, #-256]	; 0x100
    1a20:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    1a24:	0b00000d 	bleq	1a60 <_start-0x65a0>
    1a28:	006c6176 	rsbeq	r6, ip, r6, ror r1
    1a2c:	00254701 	eoreq	r4, r5, r1, lsl #14
    1a30:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
    1a34:	090d0000 	stmdbeq	sp, {}	; <UNPREDICTABLE>
    1a38:	01000004 	tsteq	r0, r4
    1a3c:	00002547 	andeq	r2, r0, r7, asr #10
    1a40:	000e9e00 	andeq	r9, lr, r0, lsl #28
    1a44:	03e00e00 	mvneq	r0, #0, 28
    1a48:	47010000 	strmi	r0, [r1, -r0]
    1a4c:	00000025 	andeq	r0, r0, r5, lsr #32
    1a50:	0f049102 	svceq	0x00049102
    1a54:	00667562 	rsbeq	r7, r6, r2, ror #10
    1a58:	02ca4c01 	sbceq	r4, sl, #256	; 0x100
    1a5c:	91030000 	mrsls	r0, (UNDEF: 3)
    1a60:	70107fa8 	andsvc	r7, r0, r8, lsr #31
    1a64:	744c0100 	strbvc	r0, [ip], #-256	; 0x100
    1a68:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    1a6c:	1000000e 	andne	r0, r0, lr
    1a70:	4d010075 	stcmi	0, cr0, [r1, #-468]	; 0xfffffe2c
    1a74:	0000002c 	andeq	r0, r0, ip, lsr #32
    1a78:	00000f6d 	andeq	r0, r0, sp, ror #30
    1a7c:	0000e911 	andeq	lr, r0, r1, lsl r9
    1a80:	0002ea00 	andeq	lr, r2, r0, lsl #20
    1a84:	40030500 	andmi	r0, r3, r0, lsl #10
    1a88:	12000096 	andne	r0, r0, #150	; 0x96
    1a8c:	000088c0 	andeq	r8, r0, r0, asr #17
    1a90:	00000074 	andeq	r0, r0, r4, ror r0
    1a94:	00000261 	andeq	r0, r0, r1, ror #4
    1a98:	0003bd13 	andeq	fp, r3, r3, lsl sp
    1a9c:	2c520100 	ldfcse	f0, [r2], {-0}
    1aa0:	7d000000 	stcvc	0, cr0, [r0, #-0]
    1aa4:	00000010 	andeq	r0, r0, r0, lsl r0
    1aa8:	0089a414 	addeq	sl, r9, r4, lsl r4
    1aac:	00063a00 	andeq	r3, r6, r0, lsl #20
    1ab0:	00029000 	andeq	r9, r2, r0
    1ab4:	53011500 	movwpl	r1, #5376	; 0x1500
    1ab8:	15750802 	ldrbne	r0, [r5, #-2050]!	; 0x802
    1abc:	03055201 	movweq	r5, #20993	; 0x5201
    1ac0:	00009640 	andeq	r9, r0, r0, asr #12
    1ac4:	05510115 	ldrbeq	r0, [r1, #-277]	; 0x115
    1ac8:	00967803 	addseq	r7, r6, r3, lsl #16
    1acc:	50011500 	andpl	r1, r1, r0, lsl #10
    1ad0:	96640305 	strbtls	r0, [r4], -r5, lsl #6
    1ad4:	16000000 	strne	r0, [r0], -r0
    1ad8:	000089a8 	andeq	r8, r0, r8, lsr #19
    1adc:	00000650 	andeq	r0, r0, r0, asr r6
    1ae0:	0089b414 	addeq	fp, r9, r4, lsl r4
    1ae4:	0000e000 	andeq	lr, r0, r0
    1ae8:	0002ad00 	andeq	sl, r2, r0, lsl #26
    1aec:	51011500 	tstpl	r1, r0, lsl #10
    1af0:	00007d02 	andeq	r7, r0, r2, lsl #26
    1af4:	0089c817 	addeq	ip, r9, r7, lsl r8
    1af8:	00013000 	andeq	r3, r1, r0
    1afc:	53011500 	movwpl	r1, #5376	; 0x1500
    1b00:	15007d02 	strne	r7, [r0, #-3330]	; 0xd02
    1b04:	74025101 	strvc	r5, [r2], #-257	; 0x101
    1b08:	50011500 	andpl	r1, r1, r0, lsl #10
    1b0c:	00007502 	andeq	r7, r0, r2, lsl #10
    1b10:	007a1800 	rsbseq	r1, sl, r0, lsl #16
    1b14:	02da0000 	sbcseq	r0, sl, #0
    1b18:	6b190000 	blvs	641b20 <__bss_end__+0x637fd0>
    1b1c:	3f000000 	svccc	0x00000000
    1b20:	007a1800 	rsbseq	r1, sl, r0, lsl #16
    1b24:	02ea0000 	rsceq	r0, sl, #0
    1b28:	6b190000 	blvs	641b30 <__bss_end__+0x637fe0>
    1b2c:	04000000 	streq	r0, [r0], #-0
    1b30:	02da0600 	sbcseq	r0, sl, #0, 12
    1b34:	fa1a0000 	blx	681b3c <__bss_end__+0x677fec>
    1b38:	01000003 	tsteq	r0, r3
    1b3c:	0089ec1f 	addeq	lr, r9, pc, lsl ip
    1b40:	00005000 	andeq	r5, r0, r0
    1b44:	6a9c0100 	bvs	fe701f4c <__bss_end__+0xfe6f83fc>
    1b48:	0d000003 	stceq	0, cr0, [r0, #-12]
    1b4c:	0000040f 	andeq	r0, r0, pc, lsl #8
    1b50:	03791f01 	cmneq	r9, #1, 30
    1b54:	10a90000 	adcne	r0, r9, r0
    1b58:	d30d0000 	movwle	r0, #53248	; 0xd000
    1b5c:	01000003 	tsteq	r0, r3
    1b60:	00038e1f 	andeq	r8, r3, pc, lsl lr
    1b64:	0010d500 	andseq	sp, r0, r0, lsl #10
    1b68:	00e91100 	rsceq	r1, r9, r0, lsl #2
    1b6c:	03a40000 			; <UNDEFINED> instruction: 0x03a40000
    1b70:	03050000 	movweq	r0, #20480	; 0x5000
    1b74:	00009648 	andeq	r9, r0, r8, asr #12
    1b78:	008a0c14 	addeq	r0, sl, r4, lsl ip
    1b7c:	00063a00 	andeq	r3, r6, r0, lsl #20
    1b80:	00036000 	andeq	r6, r3, r0
    1b84:	53011500 	movwpl	r1, #5376	; 0x1500
    1b88:	15200802 	strne	r0, [r0, #-2050]!	; 0x802
    1b8c:	03055201 	movweq	r5, #20993	; 0x5201
    1b90:	00009648 	andeq	r9, r0, r8, asr #12
    1b94:	05510115 	ldrbeq	r0, [r1, #-277]	; 0x115
    1b98:	00967803 	addseq	r7, r6, r3, lsl #16
    1b9c:	50011500 	andpl	r1, r1, r0, lsl #10
    1ba0:	96b00305 	ldrtls	r0, [r0], r5, lsl #6
    1ba4:	16000000 	strne	r0, [r0], -r0
    1ba8:	00008a10 	andeq	r8, r0, r0, lsl sl
    1bac:	00000650 	andeq	r0, r0, r0, asr r6
    1bb0:	00251b00 	eoreq	r1, r5, r0, lsl #22
    1bb4:	03790000 	cmneq	r9, #0
    1bb8:	251c0000 	ldrcs	r0, [ip, #-0]
    1bbc:	00000000 	andeq	r0, r0, r0
    1bc0:	036a0405 	cmneq	sl, #83886080	; 0x5000000
    1bc4:	251b0000 	ldrcs	r0, [fp, #-0]
    1bc8:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    1bcc:	1c000003 	stcne	0, cr0, [r0], {3}
    1bd0:	00000081 	andeq	r0, r0, r1, lsl #1
    1bd4:	7f040500 	svcvc	0x00040500
    1bd8:	18000003 	stmdane	r0, {r0, r1}
    1bdc:	0000007a 	andeq	r0, r0, sl, ror r0
    1be0:	000003a4 	andeq	r0, r0, r4, lsr #7
    1be4:	00006b19 	andeq	r6, r0, r9, lsl fp
    1be8:	06000e00 	streq	r0, [r0], -r0, lsl #28
    1bec:	00000394 	muleq	r0, r4, r3
    1bf0:	00026c1d 	andeq	r6, r2, sp, lsl ip
    1bf4:	257d0100 	ldrbcs	r0, [sp, #-256]!	; 0x100
    1bf8:	3c000000 	stccc	0, cr0, [r0], {-0}
    1bfc:	8800008a 	stmdahi	r0, {r1, r3, r7}
    1c00:	01000002 	tsteq	r0, r2
    1c04:	0005ff9c 	muleq	r5, ip, pc	; <UNPREDICTABLE>
    1c08:	75620b00 	strbvc	r0, [r2, #-2816]!	; 0xb00
    1c0c:	7d010066 	stcvc	0, cr0, [r1, #-408]	; 0xfffffe68
    1c10:	00000074 	andeq	r0, r0, r4, ror r0
    1c14:	00001101 	andeq	r1, r0, r1, lsl #2
    1c18:	01006e0b 	tsteq	r0, fp, lsl #28
    1c1c:	0000257d 	andeq	r2, r0, sp, ror r5
    1c20:	00112d00 	andseq	r2, r1, r0, lsl #26
    1c24:	6d660b00 	vstmdbvs	r6!, {d16-d15}
    1c28:	7d010074 	stcvc	0, cr0, [r1, #-464]	; 0xfffffe30
    1c2c:	00000081 	andeq	r0, r0, r1, lsl #1
    1c30:	0000115b 	andeq	r1, r0, fp, asr r1
    1c34:	0003320d 	andeq	r3, r3, sp, lsl #4
    1c38:	ae7d0100 	rpwgee	f0, f5, f0
    1c3c:	8f000000 	svchi	0x00000000
    1c40:	10000011 	andne	r0, r0, r1, lsl r0
    1c44:	7e010070 	mcrvc	0, 0, r0, cr1, cr0, {3}
    1c48:	00000074 	andeq	r0, r0, r4, ror r0
    1c4c:	000011a2 	andeq	r1, r0, r2, lsr #3
    1c50:	01006510 	tsteq	r0, r0, lsl r5
    1c54:	0000747e 	andeq	r7, r0, lr, ror r4
    1c58:	00122000 	andseq	r2, r2, r0
    1c5c:	00e91100 	rsceq	r1, r9, r0, lsl #2
    1c60:	060f0000 	streq	r0, [pc], -r0
    1c64:	03050000 	movweq	r0, #20480	; 0x5000
    1c68:	00009658 	andeq	r9, r0, r8, asr r6
    1c6c:	008a901e 	addeq	r9, sl, lr, lsl r0
    1c70:	0001f400 	andeq	pc, r1, r0, lsl #8
    1c74:	00731000 	rsbseq	r1, r3, r0
    1c78:	00748b01 	rsbseq	r8, r4, r1, lsl #22
    1c7c:	12470000 	subne	r0, r7, #0
    1c80:	6e0f0000 	cdpvs	0, 0, cr0, cr15, cr0, {0}
    1c84:	01006d75 	tsteq	r0, r5, ror sp
    1c88:	0006148b 	andeq	r1, r6, fp, lsl #9
    1c8c:	d8910300 	ldmle	r1, {r8, r9}
    1c90:	0409137e 	streq	r1, [r9], #-894	; 0x37e
    1c94:	8c010000 	stchi	0, cr0, [r1], {-0}
    1c98:	0000002c 	andeq	r0, r0, ip, lsr #32
    1c9c:	0000129c 	muleq	r0, ip, r2
    1ca0:	008ac014 	addeq	ip, sl, r4, lsl r0
    1ca4:	0000b900 	andeq	fp, r0, r0, lsl #18
    1ca8:	00046d00 	andeq	r6, r4, r0, lsl #26
    1cac:	50011500 	andpl	r1, r1, r0, lsl #10
    1cb0:	00007502 	andeq	r7, r0, r2, lsl #10
    1cb4:	008ae414 	addeq	lr, sl, r4, lsl r4
    1cb8:	00063a00 	andeq	r3, r6, r0, lsl #20
    1cbc:	00049c00 	andeq	r9, r4, r0, lsl #24
    1cc0:	53011500 	movwpl	r1, #5376	; 0x1500
    1cc4:	15920802 	ldrne	r0, [r2, #2050]	; 0x802
    1cc8:	03055201 	movweq	r5, #20993	; 0x5201
    1ccc:	00009658 	andeq	r9, r0, r8, asr r6
    1cd0:	05510115 	ldrbeq	r0, [r1, #-277]	; 0x115
    1cd4:	00967803 	addseq	r7, r6, r3, lsl #16
    1cd8:	50011500 	andpl	r1, r1, r0, lsl #10
    1cdc:	96c80305 	strbls	r0, [r8], r5, lsl #6
    1ce0:	16000000 	strne	r0, [r0], -r0
    1ce4:	00008ae8 	andeq	r8, r0, r8, ror #21
    1ce8:	00000650 	andeq	r0, r0, r0, asr r6
    1cec:	008b6814 	addeq	r6, fp, r4, lsl r8
    1cf0:	00063a00 	andeq	r3, r6, r0, lsl #20
    1cf4:	0004d400 	andeq	sp, r4, r0, lsl #8
    1cf8:	53011500 	movwpl	r1, #5376	; 0x1500
    1cfc:	15980802 	ldrne	r0, [r8, #2050]	; 0x802
    1d00:	03055201 	movweq	r5, #20993	; 0x5201
    1d04:	00009658 	andeq	r9, r0, r8, asr r6
    1d08:	05510115 	ldrbeq	r0, [r1, #-277]	; 0x115
    1d0c:	00967803 	addseq	r7, r6, r3, lsl #16
    1d10:	50011500 	andpl	r1, r1, r0, lsl #10
    1d14:	96e40305 	strbtls	r0, [r4], r5, lsl #6
    1d18:	16000000 	strne	r0, [r0], -r0
    1d1c:	00008b6c 	andeq	r8, r0, ip, ror #22
    1d20:	00000650 	andeq	r0, r0, r0, asr r6
    1d24:	008b9014 	addeq	r9, fp, r4, lsl r0
    1d28:	00019c00 	andeq	r9, r1, r0, lsl #24
    1d2c:	00050a00 	andeq	r0, r5, r0, lsl #20
    1d30:	52011500 	andpl	r1, r1, #0, 10
    1d34:	15800802 	strne	r0, [r0, #2050]	; 0x802
    1d38:	91035101 	tstls	r3, r1, lsl #2
    1d3c:	01157ed0 			; <UNDEFINED> instruction: 0x01157ed0
    1d40:	153a0150 	ldrne	r0, [sl, #-336]!	; 0x150
    1d44:	01047d02 	tsteq	r4, r2, lsl #26
    1d48:	7d021531 	cfstr32vc	mvfx1, [r2, #-196]	; 0xffffff3c
    1d4c:	00770200 	rsbseq	r0, r7, r0, lsl #4
    1d50:	8bb81400 	blhi	fee06d58 <__bss_end__+0xfedfd208>
    1d54:	019c0000 	orrseq	r0, ip, r0
    1d58:	05370000 	ldreq	r0, [r7, #-0]!
    1d5c:	01150000 	tsteq	r5, r0
    1d60:	80080252 	andhi	r0, r8, r2, asr r2
    1d64:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    1d68:	157ed091 	ldrbne	sp, [lr, #-145]!	; 0x91
    1d6c:	3a015001 	bcc	55d78 <__bss_end__+0x4c228>
    1d70:	047d0215 	ldrbteq	r0, [sp], #-533	; 0x215
    1d74:	02153001 	andseq	r3, r5, #1
    1d78:	7702007d 	smlsdxvc	r2, sp, r0, r0
    1d7c:	e0140000 	ands	r0, r4, r0
    1d80:	9c00008b 	stcls	0, cr0, [r0], {139}	; 0x8b
    1d84:	64000001 	strvs	r0, [r0], #-1
    1d88:	15000005 	strne	r0, [r0, #-5]
    1d8c:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    1d90:	51011580 	smlabbpl	r1, r0, r5, r1
    1d94:	7ed09103 	atnvcs	f1, f3
    1d98:	01500115 	cmpeq	r0, r5, lsl r1
    1d9c:	7d021540 	cfstr32vc	mvfx1, [r2, #-256]	; 0xffffff00
    1da0:	15300104 	ldrne	r0, [r0, #-260]!	; 0x104
    1da4:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    1da8:	14000077 	strne	r0, [r0], #-119	; 0x77
    1dac:	00008c08 	andeq	r8, r0, r8, lsl #24
    1db0:	0000019c 	muleq	r0, ip, r1
    1db4:	00000591 	muleq	r0, r1, r5
    1db8:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    1dbc:	01158008 	tsteq	r5, r8
    1dc0:	d0910351 	addsle	r0, r1, r1, asr r3
    1dc4:	5001157e 	andpl	r1, r1, lr, ror r5
    1dc8:	02153201 	andseq	r3, r5, #268435456	; 0x10000000
    1dcc:	3001047d 	andcc	r0, r1, sp, ror r4
    1dd0:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    1dd4:	00007702 	andeq	r7, r0, r2, lsl #14
    1dd8:	008c3c14 	addeq	r3, ip, r4, lsl ip
    1ddc:	00019c00 	andeq	r9, r1, r0, lsl #24
    1de0:	0005be00 	andeq	fp, r5, r0, lsl #28
    1de4:	52011500 	andpl	r1, r1, #0, 10
    1de8:	15800802 	strne	r0, [r0, #2050]	; 0x802
    1dec:	91035101 	tstls	r3, r1, lsl #2
    1df0:	01157ed0 			; <UNDEFINED> instruction: 0x01157ed0
    1df4:	15380150 	ldrne	r0, [r8, #-336]!	; 0x150
    1df8:	01047d02 	tsteq	r4, r2, lsl #26
    1dfc:	7d021530 	cfstr32vc	mvfx1, [r2, #-192]	; 0xffffff40
    1e00:	00770200 	rsbseq	r0, r7, r0, lsl #4
    1e04:	8c581400 	cfldrdhi	mvd1, [r8], {-0}
    1e08:	063a0000 	ldrteq	r0, [sl], -r0
    1e0c:	05f40000 	ldrbeq	r0, [r4, #0]!
    1e10:	01150000 	tsteq	r5, r0
    1e14:	b9080253 	stmdblt	r8, {r0, r1, r4, r6, r9}
    1e18:	05520115 	ldrbeq	r0, [r2, #-277]	; 0x115
    1e1c:	00965803 	addseq	r5, r6, r3, lsl #16
    1e20:	51011500 	tstpl	r1, r0, lsl #10
    1e24:	96780305 	ldrbtls	r0, [r8], -r5, lsl #6
    1e28:	01150000 	tsteq	r5, r0
    1e2c:	0c030550 	cfstr32eq	mvfx0, [r3], {80}	; 0x50
    1e30:	15000097 	strne	r0, [r0, #-151]	; 0x97
    1e34:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    1e38:	16000079 			; <UNDEFINED> instruction: 0x16000079
    1e3c:	00008c5c 	andeq	r8, r0, ip, asr ip
    1e40:	00000650 	andeq	r0, r0, r0, asr r6
    1e44:	7a180000 	bvc	601e4c <__bss_end__+0x5f82fc>
    1e48:	0f000000 	svceq	0x00000000
    1e4c:	19000006 	stmdbne	r0, {r1, r2}
    1e50:	0000006b 	andeq	r0, r0, fp, rrx
    1e54:	ff060009 			; <UNDEFINED> instruction: 0xff060009
    1e58:	18000005 	stmdane	r0, {r0, r2}
    1e5c:	0000007a 	andeq	r0, r0, sl, ror r0
    1e60:	00000624 	andeq	r0, r0, r4, lsr #12
    1e64:	00006b19 	andeq	r6, r0, r9, lsl fp
    1e68:	1f007f00 	svcne	0x00007f00
    1e6c:	000003a3 	andeq	r0, r0, r3, lsr #7
    1e70:	03791d03 	cmneq	r9, #3, 26	; 0xc0
    1e74:	9e1f0000 	cdpls	0, 1, cr0, cr15, cr0, {0}
    1e78:	03000003 	movweq	r0, #3
    1e7c:	00038e20 	andeq	r8, r3, r0, lsr #28
    1e80:	026f2000 	rsbeq	r2, pc, #0
    1e84:	27030000 	strcs	r0, [r3, -r0]
    1e88:	00000025 	andeq	r0, r0, r5, lsr #32
    1e8c:	00000650 	andeq	r0, r0, r0, asr r6
    1e90:	0000811c 	andeq	r8, r0, ip, lsl r1
    1e94:	22002100 	andcs	r2, r0, #0, 2
    1e98:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    1e9c:	b8006303 	stmdalt	r0, {r0, r1, r8, r9, sp, lr}
    1ea0:	04000000 	streq	r0, [r0], #-0
    1ea4:	00088000 	andeq	r8, r8, r0
    1ea8:	29010400 	stmdbcs	r1, {sl}
    1eac:	01000000 	mrseq	r0, (UNDEF: 0)
    1eb0:	0000042a 	andeq	r0, r0, sl, lsr #8
    1eb4:	00000345 	andeq	r0, r0, r5, asr #6
    1eb8:	00008cc4 	andeq	r8, r0, r4, asr #25
    1ebc:	00000020 	andeq	r0, r0, r0, lsr #32
    1ec0:	0000093f 	andeq	r0, r0, pc, lsr r9
    1ec4:	69050402 	stmdbvs	r5, {r1, sl}
    1ec8:	0300746e 	movweq	r7, #1134	; 0x46e
    1ecc:	01000704 	tsteq	r0, r4, lsl #14
    1ed0:	01030000 	mrseq	r0, (UNDEF: 3)
    1ed4:	0000aa06 	andeq	sl, r0, r6, lsl #20
    1ed8:	05020300 	streq	r0, [r2, #-768]	; 0x300
    1edc:	00000131 	andeq	r0, r0, r1, lsr r1
    1ee0:	28050403 	stmdacs	r5, {r0, r1, sl}
    1ee4:	03000001 	movweq	r0, #1
    1ee8:	01230508 	teqeq	r3, r8, lsl #10
    1eec:	01030000 	mrseq	r0, (UNDEF: 3)
    1ef0:	0000a808 	andeq	sl, r0, r8, lsl #16
    1ef4:	07020300 	streq	r0, [r2, -r0, lsl #6]
    1ef8:	000000cc 	andeq	r0, r0, ip, asr #1
    1efc:	fb070403 	blx	1c2f12 <__bss_end__+0x1b93c2>
    1f00:	03000000 	movweq	r0, #0
    1f04:	00f60708 	rscseq	r0, r6, r8, lsl #14
    1f08:	04030000 	streq	r0, [r3], #-0
    1f0c:	00011a07 	andeq	r1, r1, r7, lsl #20
    1f10:	08010300 	stmdaeq	r1, {r8, r9}
    1f14:	000000b1 	strheq	r0, [r0], -r1
    1f18:	00013b04 	andeq	r3, r1, r4, lsl #22
    1f1c:	c4030100 	strgt	r0, [r3], #-256	; 0x100
    1f20:	1000008c 	andne	r0, r0, ip, lsl #1
    1f24:	01000000 	mrseq	r0, (UNDEF: 0)
    1f28:	00009c9c 	muleq	r0, ip, ip
    1f2c:	00720500 	rsbseq	r0, r2, r0, lsl #10
    1f30:	002c0401 	eoreq	r0, ip, r1, lsl #8
    1f34:	12c60000 	sbcne	r0, r6, #0
    1f38:	06000000 	streq	r0, [r0], -r0
    1f3c:	0000041c 	andeq	r0, r0, ip, lsl r4
    1f40:	8cd40c01 	ldclhi	12, cr0, [r4], {1}
    1f44:	00100000 	andseq	r0, r0, r0
    1f48:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f4c:	01007205 	tsteq	r0, r5, lsl #4
    1f50:	00002c0d 	andeq	r2, r0, sp, lsl #24
    1f54:	0012ea00 	andseq	lr, r2, r0, lsl #20
    1f58:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    1f5c:	04000000 	streq	r0, [r0], #-0
    1f60:	0008eb00 	andeq	lr, r8, r0, lsl #22
    1f64:	29010400 	stmdbcs	r1, {sl}
    1f68:	01000000 	mrseq	r0, (UNDEF: 0)
    1f6c:	00000448 	andeq	r0, r0, r8, asr #8
    1f70:	00000345 	andeq	r0, r0, r5, asr #6
    1f74:	00008ce4 	andeq	r8, r0, r4, ror #25
    1f78:	00000028 	andeq	r0, r0, r8, lsr #32
    1f7c:	00000986 	andeq	r0, r0, r6, lsl #19
    1f80:	69050402 	stmdbvs	r5, {r1, sl}
    1f84:	0300746e 	movweq	r7, #1134	; 0x46e
    1f88:	01000704 	tsteq	r0, r4, lsl #14
    1f8c:	01030000 	mrseq	r0, (UNDEF: 3)
    1f90:	0000aa06 	andeq	sl, r0, r6, lsl #20
    1f94:	05020300 	streq	r0, [r2, #-768]	; 0x300
    1f98:	00000131 	andeq	r0, r0, r1, lsr r1
    1f9c:	28050403 	stmdacs	r5, {r0, r1, sl}
    1fa0:	03000001 	movweq	r0, #1
    1fa4:	01230508 	teqeq	r3, r8, lsl #10
    1fa8:	01030000 	mrseq	r0, (UNDEF: 3)
    1fac:	0000a808 	andeq	sl, r0, r8, lsl #16
    1fb0:	07020300 	streq	r0, [r2, -r0, lsl #6]
    1fb4:	000000cc 	andeq	r0, r0, ip, asr #1
    1fb8:	fb070403 	blx	1c2fce <__bss_end__+0x1b947e>
    1fbc:	03000000 	movweq	r0, #0
    1fc0:	00f60708 	rscseq	r0, r6, r8, lsl #14
    1fc4:	04030000 	streq	r0, [r3], #-0
    1fc8:	00011a07 	andeq	r1, r1, r7, lsl #20
    1fcc:	08010300 	stmdaeq	r1, {r8, r9}
    1fd0:	000000b1 	strheq	r0, [r0], -r1
    1fd4:	007f0404 	rsbseq	r0, pc, r4, lsl #8
    1fd8:	72050000 	andvc	r0, r5, #0
    1fdc:	06000000 	streq	r0, [r0], -r0
    1fe0:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    1fe4:	8ce40401 	cfstrdhi	mvd0, [r4], #4
    1fe8:	00280000 	eoreq	r0, r8, r0
    1fec:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ff0:	000000ca 	andeq	r0, r0, sl, asr #1
    1ff4:	008cf807 	addeq	pc, ip, r7, lsl #16
    1ff8:	0000ac00 	andeq	sl, r0, r0, lsl #24
    1ffc:	50010800 	andpl	r0, r1, r0, lsl #16
    2000:	97440305 	strbls	r0, [r4, -r5, lsl #6]
    2004:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2008:	00008d00 	andeq	r8, r0, r0, lsl #26
    200c:	000000ea 	andeq	r0, r0, sl, ror #1
    2010:	000000c0 	andeq	r0, r0, r0, asr #1
    2014:	02500108 	subseq	r0, r0, #8, 2
    2018:	0a006408 	beq	1b040 <__bss_end__+0x114f0>
    201c:	00008d04 	andeq	r8, r0, r4, lsl #26
    2020:	000000fb 	strdeq	r0, [r0], -fp
    2024:	00250b00 	eoreq	r0, r5, r0, lsl #22
    2028:	00d90000 	sbcseq	r0, r9, r0
    202c:	790c0000 	stmdbvc	ip, {}	; <UNPREDICTABLE>
    2030:	00000000 	andeq	r0, r0, r0
    2034:	00039e0d 	andeq	r9, r3, sp, lsl #28
    2038:	e4200200 	strt	r0, [r0], #-512	; 0x200
    203c:	04000000 	streq	r0, [r0], #-0
    2040:	0000ca04 	andeq	ip, r0, r4, lsl #20
    2044:	00b60e00 	adcseq	r0, r6, r0, lsl #28
    2048:	4d020000 	stcmi	0, cr0, [r2, #-0]
    204c:	000000fb 	strdeq	r0, [r0], -fp
    2050:	00002c0c 	andeq	r2, r0, ip, lsl #24
    2054:	3d0f0000 	stccc	0, cr0, [pc, #-0]	; 205c <_start-0x5fa4>
    2058:	02000004 	andeq	r0, r0, #4
    205c:	010b0060 	tsteq	fp, r0, rrx
    2060:	00040000 	andeq	r0, r4, r0
    2064:	000009b5 			; <UNDEFINED> instruction: 0x000009b5
    2068:	00290104 	eoreq	r0, r9, r4, lsl #2
    206c:	62010000 	andvs	r0, r1, #0
    2070:	45000004 	strmi	r0, [r0, #-4]
    2074:	0c000003 	stceq	0, cr0, [r0], {3}
    2078:	3400008d 	strcc	r0, [r0], #-141	; 0x8d
    207c:	1d000000 	stcne	0, cr0, [r0, #-0]
    2080:	0200000a 	andeq	r0, r0, #10
    2084:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2088:	04030074 	streq	r0, [r3], #-116	; 0x74
    208c:	00010007 	andeq	r0, r1, r7
    2090:	06010300 	streq	r0, [r1], -r0, lsl #6
    2094:	000000aa 	andeq	r0, r0, sl, lsr #1
    2098:	31050203 	tstcc	r5, r3, lsl #4
    209c:	03000001 	movweq	r0, #1
    20a0:	01280504 	teqeq	r8, r4, lsl #10
    20a4:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    20a8:	00012305 	andeq	r2, r1, r5, lsl #6
    20ac:	08010300 	stmdaeq	r1, {r8, r9}
    20b0:	000000a8 	andeq	r0, r0, r8, lsr #1
    20b4:	cc070203 	sfmgt	f0, 4, [r7], {3}
    20b8:	03000000 	movweq	r0, #0
    20bc:	00fb0704 	rscseq	r0, fp, r4, lsl #14
    20c0:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    20c4:	0000f607 	andeq	pc, r0, r7, lsl #12
    20c8:	07040300 	streq	r0, [r4, -r0, lsl #6]
    20cc:	0000011a 	andeq	r0, r0, sl, lsl r1
    20d0:	b1080103 	tstlt	r8, r3, lsl #2
    20d4:	04000000 	streq	r0, [r0], #-0
    20d8:	00000498 	muleq	r0, r8, r4
    20dc:	8d0c0301 	stchi	3, cr0, [ip, #-4]
    20e0:	00340000 	eorseq	r0, r4, r0
    20e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    20e8:	000000de 	ldrdeq	r0, [r0], -lr
    20ec:	00047605 	andeq	r7, r4, r5, lsl #12
    20f0:	25040100 	strcs	r0, [r4, #-256]	; 0x100
    20f4:	05000000 	streq	r0, [r0, #-0]
    20f8:	00000484 	andeq	r0, r0, r4, lsl #9
    20fc:	00250401 	eoreq	r0, r5, r1, lsl #8
    2100:	80060000 	andhi	r0, r6, r0
    2104:	01000000 	mrseq	r0, (UNDEF: 0)
    2108:	0000b105 	andeq	fp, r0, r5, lsl #2
    210c:	08000700 	stmdaeq	r0, {r8, r9, sl}
    2110:	00737362 	rsbseq	r7, r3, r2, ror #6
    2114:	00de0701 	sbcseq	r0, lr, r1, lsl #14
    2118:	130e0000 	movwne	r0, #57344	; 0xe000
    211c:	90090000 	andls	r0, r9, r0
    2120:	01000004 	tsteq	r0, r4
    2124:	0000de08 	andeq	sp, r0, r8, lsl #28
    2128:	8d340a00 	vldmdbhi	r4!, {s0-s-1}
    212c:	00fa0000 	rscseq	r0, sl, r0
    2130:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
    2134:	0700008d 	streq	r0, [r0, -sp, lsl #1]
    2138:	00000001 	andeq	r0, r0, r1
    213c:	0025040b 	eoreq	r0, r5, fp, lsl #8
    2140:	76050000 	strvc	r0, [r5], -r0
    2144:	01000004 	tsteq	r0, r4
    2148:	00002504 	andeq	r2, r0, r4, lsl #10
    214c:	04840500 	streq	r0, [r4], #1280	; 0x500
    2150:	04010000 	streq	r0, [r1], #-0
    2154:	00000025 	andeq	r0, r0, r5, lsr #32
    2158:	00008006 	andeq	r8, r0, r6
    215c:	07050100 	streq	r0, [r5, -r0, lsl #2]
    2160:	07000001 	streq	r0, [r0, -r1]
    2164:	043d0c00 	ldrteq	r0, [sp], #-3072	; 0xc00
    2168:	60020000 	andvs	r0, r2, r0
    216c:	0001ad00 	andeq	sl, r1, r0, lsl #26
    2170:	5f000400 	svcpl	0x00000400
    2174:	0400000a 	streq	r0, [r0], #-10
    2178:	00002901 	andeq	r2, r0, r1, lsl #18
    217c:	04ba0100 	ldrteq	r0, [sl], #256	; 0x100
    2180:	03450000 	movteq	r0, #20480	; 0x5000
    2184:	00180000 	andseq	r0, r8, r0
    2188:	00000000 	andeq	r0, r0, r0
    218c:	0ab70000 	beq	fedc2194 <__bss_end__+0xfedb8644>
    2190:	04020000 	streq	r0, [r2], #-0
    2194:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    2198:	07040300 	streq	r0, [r4, -r0, lsl #6]
    219c:	00000100 	andeq	r0, r0, r0, lsl #2
    21a0:	aa060103 	bge	1825b4 <__bss_end__+0x178a64>
    21a4:	03000000 	movweq	r0, #0
    21a8:	01310502 	teqeq	r1, r2, lsl #10
    21ac:	04030000 	streq	r0, [r3], #-0
    21b0:	00012805 	andeq	r2, r1, r5, lsl #16
    21b4:	05080300 	streq	r0, [r8, #-768]	; 0x300
    21b8:	00000123 	andeq	r0, r0, r3, lsr #2
    21bc:	a8080103 	stmdage	r8, {r0, r1, r8}
    21c0:	03000000 	movweq	r0, #0
    21c4:	00cc0702 	sbceq	r0, ip, r2, lsl #14
    21c8:	04030000 	streq	r0, [r3], #-0
    21cc:	0000fb07 	andeq	pc, r0, r7, lsl #22
    21d0:	07080300 	streq	r0, [r8, -r0, lsl #6]
    21d4:	000000f6 	strdeq	r0, [r0], -r6
    21d8:	1a070403 	bne	1c31ec <__bss_end__+0x1b969c>
    21dc:	03000001 	movweq	r0, #1
    21e0:	00b10801 	adcseq	r0, r1, r1, lsl #16
    21e4:	a0040000 	andge	r0, r4, r0
    21e8:	01000004 	tsteq	r0, r4
    21ec:	0000250e 	andeq	r2, r0, lr, lsl #10
    21f0:	008d4000 	addeq	r4, sp, r0
    21f4:	00001800 	andeq	r1, r0, r0, lsl #16
    21f8:	a29c0100 	addsge	r0, ip, #0, 2
    21fc:	05000000 	streq	r0, [r0, #-0]
    2200:	0000050c 	andeq	r0, r0, ip, lsl #10
    2204:	002c0f01 	eoreq	r0, ip, r1, lsl #30
    2208:	132e0000 	teqne	lr, #0
    220c:	06000000 	streq	r0, [r0], -r0
    2210:	000004ef 	andeq	r0, r0, pc, ror #9
    2214:	8d581701 	ldclhi	7, cr1, [r8, #-4]
    2218:	00140000 	andseq	r0, r4, r0
    221c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2220:	000000c7 	andeq	r0, r0, r7, asr #1
    2224:	00050c05 	andeq	r0, r5, r5, lsl #24
    2228:	2c180100 	ldfcss	f0, [r8], {-0}
    222c:	4d000000 	stcmi	0, cr0, [r0, #-0]
    2230:	00000013 	andeq	r0, r0, r3, lsl r0
    2234:	00043d06 	andeq	r3, r4, r6, lsl #26
    2238:	6c1f0100 	ldfvss	f0, [pc], {-0}
    223c:	4800008d 	stmdami	r0, {r0, r2, r3, r7}
    2240:	01000000 	mrseq	r0, (UNDEF: 0)
    2244:	0001779c 	muleq	r1, ip, r7
    2248:	05040700 	streq	r0, [r4, #-1792]	; 0x700
    224c:	2a010000 	bcs	42254 <__bss_end__+0x38704>
    2250:	00000177 	andeq	r0, r0, r7, ror r1
    2254:	2010001c 	andscs	r0, r0, ip, lsl r0
    2258:	0004e707 	andeq	lr, r4, r7, lsl #14
    225c:	772b0100 	strvc	r0, [fp, -r0, lsl #2]!
    2260:	24000001 	strcs	r0, [r0], #-1
    2264:	07201000 	streq	r1, [r0, -r0]!
    2268:	000004ae 	andeq	r0, r0, lr, lsr #9
    226c:	01772c01 	cmneq	r7, r1, lsl #24
    2270:	00000000 	andeq	r0, r0, r0
    2274:	ce085a00 	vmlagt.f32	s10, s16, s0
    2278:	01000004 	tsteq	r0, r4
    227c:	0001772d 	andeq	r7, r1, sp, lsr #14
    2280:	74092000 	strvc	r2, [r9], #-0
    2284:	7900008d 	stmdbvc	r0, {r0, r2, r3, r7}
    2288:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    228c:	00008d80 	andeq	r8, r0, r0, lsl #27
    2290:	000000a2 	andeq	r0, r0, r2, lsr #1
    2294:	008d880a 	addeq	r8, sp, sl, lsl #16
    2298:	00018d00 	andeq	r8, r1, r0, lsl #26
    229c:	00013a00 	andeq	r3, r1, r0, lsl #20
    22a0:	50010b00 	andpl	r0, r1, r0, lsl #22
    22a4:	0a004e01 	beq	15ab0 <__bss_end__+0xbf60>
    22a8:	00008d94 	muleq	r0, r4, sp
    22ac:	0000019e 	muleq	r0, lr, r1
    22b0:	0000015a 	andeq	r0, r0, sl, asr r1
    22b4:	0551010b 	ldrbeq	r0, [r1, #-267]	; 0x10b
    22b8:	0000010c 	andeq	r0, r0, ip, lsl #2
    22bc:	50010b5a 	andpl	r0, r1, sl, asr fp
    22c0:	00240c05 	eoreq	r0, r4, r5, lsl #24
    22c4:	0c002010 	stceq	0, cr2, [r0], {16}
    22c8:	00008da0 	andeq	r8, r0, r0, lsr #27
    22cc:	0000019e 	muleq	r0, lr, r1
    22d0:	0551010b 	ldrbeq	r0, [r1, #-267]	; 0x10b
    22d4:	0000200c 	andeq	r2, r0, ip
    22d8:	50010b5a 	andpl	r0, r1, sl, asr fp
    22dc:	001c0c05 	andseq	r0, ip, r5, lsl #24
    22e0:	00002010 	andeq	r2, r0, r0, lsl r0
    22e4:	0000250d 	andeq	r2, r0, sp, lsl #10
    22e8:	04a30800 	strteq	r0, [r3], #2048	; 0x800
    22ec:	0d010000 	stceq	0, cr0, [r1, #-0]
    22f0:	00000188 	andeq	r0, r0, r8, lsl #3
    22f4:	002c0d10 	eoreq	r0, ip, r0, lsl sp
    22f8:	b60e0000 	strlt	r0, [lr], -r0
    22fc:	02000000 	andeq	r0, r0, #0
    2300:	00019e4d 	andeq	r9, r1, sp, asr #28
    2304:	002c0f00 	eoreq	r0, ip, r0, lsl #30
    2308:	10000000 	andne	r0, r0, r0
    230c:	000004fe 	strdeq	r0, [r0], -lr
    2310:	2c0f9402 	cfstrscs	mvf9, [pc], {2}
    2314:	0f000000 	svceq	0x00000000
    2318:	0000002c 	andeq	r0, r0, ip, lsr #32
    231c:	01f70000 	mvnseq	r0, r0
    2320:	00040000 	andeq	r0, r4, r0
    2324:	00000b4d 	andeq	r0, r0, sp, asr #22
    2328:	00290104 	eoreq	r0, r9, r4, lsl #2
    232c:	27010000 	strcs	r0, [r1, -r0]
    2330:	45000005 	strmi	r0, [r0, #-5]
    2334:	b4000003 	strlt	r0, [r0], #-3
    2338:	9800008d 	stmdals	r0, {r0, r2, r3, r7}
    233c:	54000000 	strpl	r0, [r0], #-0
    2340:	0200000b 	andeq	r0, r0, #11
    2344:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2348:	04030074 	streq	r0, [r3], #-116	; 0x74
    234c:	00010007 	andeq	r0, r1, r7
    2350:	06010300 	streq	r0, [r1], -r0, lsl #6
    2354:	000000aa 	andeq	r0, r0, sl, lsr #1
    2358:	31050203 	tstcc	r5, r3, lsl #4
    235c:	03000001 	movweq	r0, #1
    2360:	01280504 	teqeq	r8, r4, lsl #10
    2364:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2368:	00012305 	andeq	r2, r1, r5, lsl #6
    236c:	08010300 	stmdaeq	r1, {r8, r9}
    2370:	000000a8 	andeq	r0, r0, r8, lsr #1
    2374:	cc070203 	sfmgt	f0, 4, [r7], {3}
    2378:	03000000 	movweq	r0, #0
    237c:	00fb0704 	rscseq	r0, fp, r4, lsl #14
    2380:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2384:	0000f607 	andeq	pc, r0, r7, lsl #12
    2388:	07040300 	streq	r0, [r4, -r0, lsl #6]
    238c:	0000011a 	andeq	r0, r0, sl, lsl r1
    2390:	b1080103 	tstlt	r8, r3, lsl #2
    2394:	04000000 	streq	r0, [r0], #-0
    2398:	00000546 	andeq	r0, r0, r6, asr #10
    239c:	8db40501 	cfldr32hi	mvfx0, [r4, #4]!
    23a0:	001c0000 	andseq	r0, ip, r0
    23a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    23a8:	0000009e 	muleq	r0, lr, r0
    23ac:	00054005 	andeq	r4, r5, r5
    23b0:	2c050100 	stfcss	f0, [r5], {-0}
    23b4:	77000000 	strvc	r0, [r0, -r0]
    23b8:	00000013 	andeq	r0, r0, r3, lsl r0
    23bc:	0002b506 	andeq	fp, r2, r6, lsl #10
    23c0:	2c0b0100 	stfcss	f0, [fp], {-0}
    23c4:	d0000000 	andle	r0, r0, r0
    23c8:	1400008d 	strne	r0, [r0], #-141	; 0x8d
    23cc:	01000000 	mrseq	r0, (UNDEF: 0)
    23d0:	0000cb9c 	muleq	r0, ip, fp
    23d4:	8ddc0700 	ldclhi	7, cr0, [ip]
    23d8:	01de0000 	bicseq	r0, lr, r0
    23dc:	01080000 	mrseq	r0, (UNDEF: 8)
    23e0:	040c0550 	streq	r0, [ip], #-1360	; 0x550
    23e4:	00200030 	eoreq	r0, r0, r0, lsr r0
    23e8:	055c0600 	ldrbeq	r0, [ip, #-1536]	; 0x600
    23ec:	10010000 	andne	r0, r1, r0
    23f0:	0000002c 	andeq	r0, r0, ip, lsr #32
    23f4:	00008de4 	andeq	r8, r0, r4, ror #27
    23f8:	0000001c 	andeq	r0, r0, ip, lsl r0
    23fc:	010d9c01 	tsteq	sp, r1, lsl #24
    2400:	75090000 	strvc	r0, [r9, #-0]
    2404:	2c120100 	ldfcss	f0, [r2], {-0}
    2408:	ab000000 	blge	2410 <_start-0x5bf0>
    240c:	0a000013 	beq	2460 <_start-0x5ba0>
    2410:	00008dec 	andeq	r8, r0, ip, ror #27
    2414:	000001f3 	strdeq	r0, [r0], -r3
    2418:	008df00a 	addeq	pc, sp, sl
    241c:	00009e00 	andeq	r9, r0, r0, lsl #28
    2420:	8df80a00 	ldclhi	10, cr0, [r8]
    2424:	01f30000 	mvnseq	r0, r0
    2428:	04000000 	streq	r0, [r0], #-0
    242c:	00000553 	andeq	r0, r0, r3, asr r5
    2430:	8e001701 	cdphi	7, 0, cr1, cr0, cr1, {0}
    2434:	00240000 	eoreq	r0, r4, r0
    2438:	9c010000 	stcls	0, cr0, [r1], {-0}
    243c:	0000016b 	andeq	r0, r0, fp, ror #2
    2440:	0073750b 	rsbseq	r7, r3, fp, lsl #10
    2444:	002c1701 	eoreq	r1, ip, r1, lsl #14
    2448:	13c90000 	bicne	r0, r9, #0
    244c:	720c0000 	andvc	r0, ip, #0
    2450:	18010062 	stmdane	r1, {r1, r5, r6}
    2454:	0000002c 	andeq	r0, r0, ip, lsr #32
    2458:	100d5401 	andne	r5, sp, r1, lsl #8
    245c:	1000008e 	andne	r0, r0, lr, lsl #1
    2460:	61000000 	mrsvs	r0, (UNDEF: 0)
    2464:	09000001 	stmdbeq	r0, {r0}
    2468:	01006172 	tsteq	r0, r2, ror r1
    246c:	00002c1a 	andeq	r2, r0, sl, lsl ip
    2470:	0013e700 	andseq	lr, r3, r0, lsl #14
    2474:	8e140a00 	vnmlshi.f32	s0, s8, s0
    2478:	00cb0000 	sbceq	r0, fp, r0
    247c:	0a000000 	beq	2484 <_start-0x5b7c>
    2480:	00008e0c 	andeq	r8, r0, ip, lsl #28
    2484:	000000cb 	andeq	r0, r0, fp, asr #1
    2488:	00b60400 	adcseq	r0, r6, r0, lsl #8
    248c:	20010000 	andcs	r0, r1, r0
    2490:	00008e24 	andeq	r8, r0, r4, lsr #28
    2494:	00000014 	andeq	r0, r0, r4, lsl r0
    2498:	01a49c01 			; <UNDEFINED> instruction: 0x01a49c01
    249c:	6d0b0000 	stcvs	0, cr0, [fp, #-0]
    24a0:	20010073 	andcs	r0, r1, r3, ror r0
    24a4:	0000002c 	andeq	r0, r0, ip, lsr #32
    24a8:	000013fa 	strdeq	r1, [r0], -sl
    24ac:	008e3407 	addeq	r3, lr, r7, lsl #8
    24b0:	00010d00 	andeq	r0, r1, r0, lsl #26
    24b4:	50010800 	andpl	r0, r1, r0, lsl #16
    24b8:	5001f307 	andpl	pc, r1, r7, lsl #6
    24bc:	1e03e80a 	cdpne	8, 0, cr14, cr3, cr10, {0}
    24c0:	1d040000 	stcne	0, cr0, [r4, #-0]
    24c4:	01000005 	tsteq	r0, r5
    24c8:	008e3823 	addeq	r3, lr, r3, lsr #16
    24cc:	00001400 	andeq	r1, r0, r0, lsl #8
    24d0:	de9c0100 	fmllee	f0, f4, f0
    24d4:	0b000001 	bleq	24e0 <_start-0x5b20>
    24d8:	00636573 	rsbeq	r6, r3, r3, ror r5
    24dc:	002c2301 	eoreq	r2, ip, r1, lsl #6
    24e0:	141b0000 	ldrne	r0, [fp], #-0
    24e4:	48070000 	stmdami	r7, {}	; <UNPREDICTABLE>
    24e8:	6b00008e 	blvs	2728 <_start-0x58d8>
    24ec:	08000001 	stmdaeq	r0, {r0}
    24f0:	f3075001 	vhadd.u8	d5, d7, d1
    24f4:	e80a5001 	stmda	sl, {r0, ip, lr}
    24f8:	00001e03 	andeq	r1, r0, r3, lsl #28
    24fc:	00053a0e 	andeq	r3, r5, lr, lsl #20
    2500:	2ca00200 	sfmcs	f0, 4, [r0]
    2504:	f3000000 	vhadd.u8	d0, d0, d0
    2508:	0f000001 	svceq	0x00000001
    250c:	0000002c 	andeq	r0, r0, ip, lsr #32
    2510:	05111000 	ldreq	r1, [r1, #-0]
    2514:	84020000 	strhi	r0, [r2], #-0
    2518:	0003ff00 	andeq	pc, r3, r0, lsl #30
    251c:	43000400 	movwmi	r0, #1024	; 0x400
    2520:	0400000c 	streq	r0, [r0], #-12
    2524:	00002901 	andeq	r2, r0, r1, lsl #18
    2528:	02920100 	addseq	r0, r2, #0, 2
    252c:	03450000 	movteq	r0, #20480	; 0x5000
    2530:	8eb00000 	cdphi	0, 11, cr0, cr0, cr0, {0}
    2534:	01540000 	cmpeq	r4, r0
    2538:	0bfd0000 	bleq	fff42540 <__bss_end__+0xfff389f0>
    253c:	04020000 	streq	r0, [r2], #-0
    2540:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    2544:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2548:	00000100 	andeq	r0, r0, r0, lsl #2
    254c:	aa060103 	bge	182960 <__bss_end__+0x178e10>
    2550:	03000000 	movweq	r0, #0
    2554:	01310502 	teqeq	r1, r2, lsl #10
    2558:	04030000 	streq	r0, [r3], #-0
    255c:	00012805 	andeq	r2, r1, r5, lsl #16
    2560:	05080300 	streq	r0, [r8, #-768]	; 0x300
    2564:	00000123 	andeq	r0, r0, r3, lsr #2
    2568:	a8080103 	stmdage	r8, {r0, r1, r8}
    256c:	03000000 	movweq	r0, #0
    2570:	00cc0702 	sbceq	r0, ip, r2, lsl #14
    2574:	04030000 	streq	r0, [r3], #-0
    2578:	0000fb07 	andeq	pc, r0, r7, lsl #22
    257c:	07080300 	streq	r0, [r8, -r0, lsl #6]
    2580:	000000f6 	strdeq	r0, [r0], -r6
    2584:	1a070403 	bne	1c3598 <__bss_end__+0x1b9a48>
    2588:	03000001 	movweq	r0, #1
    258c:	00b10801 	adcseq	r0, r1, r1, lsl #16
    2590:	01040000 	mrseq	r0, (UNDEF: 4)
    2594:	00b20c02 	adcseq	r0, r2, r2, lsl #24
    2598:	d0050000 	andle	r0, r5, r0
    259c:	00000006 	andeq	r0, r0, r6
    25a0:	0005d205 	andeq	sp, r5, r5, lsl #4
    25a4:	97050100 	strls	r0, [r5, -r0, lsl #2]
    25a8:	04000005 	streq	r0, [r0], #-5
    25ac:	0005e305 	andeq	lr, r5, r5, lsl #6
    25b0:	f2050500 	vrshl.s8	d0, d0, d5
    25b4:	06000005 	streq	r0, [r0], -r5
    25b8:	00060105 	andeq	r0, r6, r5, lsl #2
    25bc:	91050700 	tstls	r5, r0, lsl #14
    25c0:	03000006 	movweq	r0, #6
    25c4:	00061005 	andeq	r1, r6, r5
    25c8:	06000200 	streq	r0, [r0], -r0, lsl #4
    25cc:	00000643 	andeq	r0, r0, r3, asr #12
    25d0:	00791502 	rsbseq	r1, r9, r2, lsl #10
    25d4:	a6070000 	strge	r0, [r7], -r0
    25d8:	01000005 	tsteq	r0, r5
    25dc:	00002557 	andeq	r2, r0, r7, asr r5
    25e0:	008eb000 	addeq	fp, lr, r0
    25e4:	00001c00 	andeq	r1, r0, r0, lsl #24
    25e8:	e09c0100 	adds	r0, ip, r0, lsl #2
    25ec:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    25f0:	00008ec0 	andeq	r8, r0, r0, asr #29
    25f4:	000003a8 	andeq	r0, r0, r8, lsr #7
    25f8:	009e0900 	addseq	r0, lr, r0, lsl #18
    25fc:	37010000 	strcc	r0, [r1, -r0]
    2600:	00008ecc 	andeq	r8, r0, ip, asr #29
    2604:	0000009c 	muleq	r0, ip, r0
    2608:	01e69c01 	mvneq	r9, r1, lsl #24
    260c:	d4080000 	strle	r0, [r8], #-0
    2610:	c900008e 	stmdbgt	r0, {r1, r2, r3, r7}
    2614:	0a000003 	beq	2628 <_start-0x59d8>
    2618:	00008ee0 	andeq	r8, r0, r0, ror #29
    261c:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2620:	00000116 	andeq	r0, r0, r6, lsl r1
    2624:	0151010b 	cmpeq	r1, fp, lsl #2
    2628:	50010b32 	andpl	r0, r1, r2, lsr fp
    262c:	0a003e01 	beq	11e38 <__bss_end__+0x82e8>
    2630:	00008eec 	andeq	r8, r0, ip, ror #29
    2634:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2638:	0000012e 	andeq	r0, r0, lr, lsr #2
    263c:	0151010b 	cmpeq	r1, fp, lsl #2
    2640:	50010b32 	andpl	r0, r1, r2, lsr fp
    2644:	08003f01 	stmdaeq	r0, {r0, r8, r9, sl, fp, ip, sp}
    2648:	00008ef0 	strdeq	r8, [r0], -r0
    264c:	000003c9 	andeq	r0, r0, r9, asr #7
    2650:	008f000a 	addeq	r0, pc, sl
    2654:	0003a800 	andeq	sl, r3, r0, lsl #16
    2658:	00014b00 	andeq	r4, r1, r0, lsl #22
    265c:	50010b00 	andpl	r0, r1, r0, lsl #22
    2660:	00007502 	andeq	r7, r0, r2, lsl #10
    2664:	008f0c0a 	addeq	r0, pc, sl, lsl #24
    2668:	0003e600 	andeq	lr, r3, r0, lsl #12
    266c:	00015f00 	andeq	r5, r1, r0, lsl #30
    2670:	50010b00 	andpl	r0, r1, r0, lsl #22
    2674:	00007502 	andeq	r7, r0, r2, lsl #10
    2678:	008f1008 	addeq	r1, pc, r8
    267c:	0003c900 	andeq	ip, r3, r0, lsl #18
    2680:	8f1c0a00 	svchi	0x001c0a00
    2684:	03e60000 	mvneq	r0, #0
    2688:	017b0000 	cmneq	fp, r0
    268c:	010b0000 	mrseq	r0, (UNDEF: 11)
    2690:	00300151 	eorseq	r0, r0, r1, asr r1
    2694:	008f280a 	addeq	r2, pc, sl, lsl #16
    2698:	0003e600 	andeq	lr, r3, r0, lsl #12
    269c:	00018e00 	andeq	r8, r1, r0, lsl #28
    26a0:	51010b00 	tstpl	r1, r0, lsl #22
    26a4:	0a003001 	beq	e6b0 <__bss_end__+0x4b60>
    26a8:	00008f34 	andeq	r8, r0, r4, lsr pc
    26ac:	000003e6 	andeq	r0, r0, r6, ror #7
    26b0:	000001a1 	andeq	r0, r0, r1, lsr #3
    26b4:	0151010b 	cmpeq	r1, fp, lsl #2
    26b8:	400a0036 	andmi	r0, sl, r6, lsr r0
    26bc:	e600008f 	str	r0, [r0], -pc, lsl #1
    26c0:	b4000003 	strlt	r0, [r0], #-3
    26c4:	0b000001 	bleq	26d0 <_start-0x5930>
    26c8:	33015101 	movwcc	r5, #4353	; 0x1101
    26cc:	8f4c0a00 	svchi	0x004c0a00
    26d0:	03e60000 	mvneq	r0, #0
    26d4:	01c90000 	biceq	r0, r9, r0
    26d8:	010b0000 	mrseq	r0, (UNDEF: 11)
    26dc:	0e0a0351 	mcreq	3, 0, r0, cr10, cr1, {2}
    26e0:	580a0001 	stmdapl	sl, {r0}
    26e4:	e600008f 	str	r0, [r0], -pc, lsl #1
    26e8:	dc000003 	stcle	0, cr0, [r0], {3}
    26ec:	0b000001 	bleq	26f8 <_start-0x5908>
    26f0:	33015101 	movwcc	r5, #4353	; 0x1101
    26f4:	8f5c0800 	svchi	0x005c0800
    26f8:	03c90000 	biceq	r0, r9, #0
    26fc:	0c000000 	stceq	0, cr0, [r0], {-0}
    2700:	00000225 	andeq	r0, r0, r5, lsr #4
    2704:	00255d01 	eoreq	r5, r5, r1, lsl #26
    2708:	8f680000 	svchi	0x00680000
    270c:	00280000 	eoreq	r0, r8, r0
    2710:	9c010000 	stcls	0, cr0, [r1], {-0}
    2714:	00000212 	andeq	r0, r0, r2, lsl r2
    2718:	008f7008 	addeq	r7, pc, r8
    271c:	0000bd00 	andeq	fp, r0, r0, lsl #26
    2720:	8f840800 	svchi	0x00840800
    2724:	03a80000 			; <UNDEFINED> instruction: 0x03a80000
    2728:	0c000000 	stceq	0, cr0, [r0], {-0}
    272c:	0000064f 	andeq	r0, r0, pc, asr #12
    2730:	00256401 	eoreq	r6, r5, r1, lsl #8
    2734:	8f900000 	svchi	0x00900000
    2738:	001c0000 	andseq	r0, ip, r0
    273c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2740:	00000235 	andeq	r0, r0, r5, lsr r2
    2744:	008fa008 	addeq	sl, pc, r8
    2748:	0003a800 	andeq	sl, r3, r0, lsl #16
    274c:	55090000 	strpl	r0, [r9, #-0]
    2750:	01000002 	tsteq	r0, r2
    2754:	008fac6a 	addeq	sl, pc, sl, ror #24
    2758:	00002c00 	andeq	r2, r0, r0, lsl #24
    275c:	719c0100 	orrsvc	r0, ip, r0, lsl #2
    2760:	0d000002 	stceq	0, cr0, [r0, #-8]
    2764:	6a010063 	bvs	428f8 <__bss_end__+0x38da8>
    2768:	0000002c 	andeq	r0, r0, ip, lsr #32
    276c:	0000143c 	andeq	r1, r0, ip, lsr r4
    2770:	008fb808 	addeq	fp, pc, r8, lsl #16
    2774:	00021200 	andeq	r1, r2, r0, lsl #4
    2778:	8fd00e00 	svchi	0x00d00e00
    277c:	03e60000 	mvneq	r0, #0
    2780:	010b0000 	mrseq	r0, (UNDEF: 11)
    2784:	00740251 	rsbseq	r0, r4, r1, asr r2
    2788:	c40c0000 	strgt	r0, [ip], #-0
    278c:	01000005 	tsteq	r0, r5
    2790:	00002574 	andeq	r2, r0, r4, ror r5
    2794:	008fd800 	addeq	sp, pc, r0, lsl #16
    2798:	00000c00 	andeq	r0, r0, r0, lsl #24
    279c:	949c0100 	ldrls	r0, [ip], #256	; 0x100
    27a0:	08000002 	stmdaeq	r0, {r1}
    27a4:	00008fe0 	andeq	r8, r0, r0, ror #31
    27a8:	000000bd 	strheq	r0, [r0], -sp
    27ac:	06ef0c00 	strbteq	r0, [pc], r0, lsl #24
    27b0:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    27b4:	00000025 	andeq	r0, r0, r5, lsr #32
    27b8:	00008fe4 	andeq	r8, r0, r4, ror #31
    27bc:	00000020 	andeq	r0, r0, r0, lsr #32
    27c0:	02c09c01 	sbceq	r9, r0, #256	; 0x100
    27c4:	ec080000 	stc	0, cr0, [r8], {-0}
    27c8:	7100008f 	smlabbvc	r0, pc, r0, r0	; <UNPREDICTABLE>
    27cc:	08000002 	stmdaeq	r0, {r1}
    27d0:	00008ff8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    27d4:	000001e6 	andeq	r0, r0, r6, ror #3
    27d8:	06690f00 	strbteq	r0, [r9], -r0, lsl #30
    27dc:	16010000 	strne	r0, [r1], -r0
    27e0:	000002d1 	ldrdeq	r0, [r0], -r1
    27e4:	93f80305 	mvnsls	r0, #335544320	; 0x14000000
    27e8:	04100000 	ldreq	r0, [r0], #-0
    27ec:	000002d7 	ldrdeq	r0, [r0], -r7
    27f0:	00002c11 	andeq	r2, r0, r1, lsl ip
    27f4:	065d0f00 	ldrbeq	r0, [sp], -r0, lsl #30
    27f8:	17010000 	strne	r0, [r1, -r0]
    27fc:	000002d1 	ldrdeq	r0, [r0], -r1
    2800:	93cc0305 	bicls	r0, ip, #335544320	; 0x14000000
    2804:	7a0f0000 	bvc	3c280c <__bss_end__+0x3b8cbc>
    2808:	01000005 	tsteq	r0, r5
    280c:	0002d11a 	andeq	sp, r2, sl, lsl r1
    2810:	e4030500 	str	r0, [r3], #-1280	; 0x500
    2814:	0f000093 	svceq	0x00000093
    2818:	0000061f 	andeq	r0, r0, pc, lsl r6
    281c:	02d11b01 	sbcseq	r1, r1, #1024	; 0x400
    2820:	03050000 	movweq	r0, #20480	; 0x5000
    2824:	000093d4 	ldrdeq	r9, [r0], -r4
    2828:	0006340f 	andeq	r3, r6, pc, lsl #8
    282c:	d11c0100 	tstle	ip, r0, lsl #2
    2830:	05000002 	streq	r0, [r0, #-2]
    2834:	0093d803 	addseq	sp, r3, r3, lsl #16
    2838:	06c10f00 	strbeq	r0, [r1], r0, lsl #30
    283c:	1d010000 	stcne	0, cr0, [r1, #-0]
    2840:	000002d1 	ldrdeq	r0, [r0], -r1
    2844:	93dc0305 	bicsls	r0, ip, #335544320	; 0x14000000
    2848:	6b0f0000 	blvs	3c2850 <__bss_end__+0x3b8d00>
    284c:	01000005 	tsteq	r0, r5
    2850:	0002d11e 	andeq	sp, r2, lr, lsl r1
    2854:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
    2858:	0f000093 	svceq	0x00000093
    285c:	000006e0 	andeq	r0, r0, r0, ror #13
    2860:	02d11f01 	sbcseq	r1, r1, #1, 30
    2864:	03050000 	movweq	r0, #20480	; 0x5000
    2868:	000093c8 	andeq	r9, r0, r8, asr #7
    286c:	0005880f 	andeq	r8, r5, pc, lsl #16
    2870:	d1200100 	teqle	r0, r0, lsl #2
    2874:	05000002 	streq	r0, [r0, #-2]
    2878:	0093f003 	addseq	pc, r3, r3
    287c:	06b20f00 	ldrteq	r0, [r2], r0, lsl #30
    2880:	21010000 	mrscs	r0, (UNDEF: 1)
    2884:	000002d1 	ldrdeq	r0, [r0], -r1
    2888:	93ec0305 	mvnls	r0, #335544320	; 0x14000000
    288c:	b40f0000 	strlt	r0, [pc], #-0	; 2894 <_start-0x576c>
    2890:	01000005 	tsteq	r0, r5
    2894:	0002d122 	andeq	sp, r2, r2, lsr #2
    2898:	d0030500 	andle	r0, r3, r0, lsl #10
    289c:	0f000093 	svceq	0x00000093
    28a0:	00000681 	andeq	r0, r0, r1, lsl #13
    28a4:	02d12301 	sbcseq	r2, r1, #67108864	; 0x4000000
    28a8:	03050000 	movweq	r0, #20480	; 0x5000
    28ac:	000093e8 	andeq	r9, r0, r8, ror #7
    28b0:	0006710f 	andeq	r7, r6, pc, lsl #2
    28b4:	d1240100 	teqle	r4, r0, lsl #2
    28b8:	05000002 	streq	r0, [r0, #-2]
    28bc:	0093e003 	addseq	lr, r3, r3
    28c0:	06ff1200 	ldrbteq	r1, [pc], r0, lsl #4
    28c4:	a1030000 	mrsge	r0, (UNDEF: 3)
    28c8:	0000002c 	andeq	r0, r0, ip, lsr #32
    28cc:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    28d0:	0003bd13 	andeq	fp, r3, r3, lsl sp
    28d4:	04100000 	ldreq	r0, [r0], #-0
    28d8:	000003c3 	andeq	r0, r0, r3, asr #7
    28dc:	0003c814 	andeq	ip, r3, r4, lsl r8
    28e0:	11161500 	tstne	r6, r0, lsl #10
    28e4:	03000005 	movweq	r0, #5
    28e8:	06a01784 	strteq	r1, [r0], r4, lsl #15
    28ec:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
    28f0:	000003e6 	andeq	r0, r0, r6, ror #7
    28f4:	00002c13 	andeq	r2, r0, r3, lsl ip
    28f8:	00b21300 	adcseq	r1, r2, r0, lsl #6
    28fc:	17000000 	strne	r0, [r0, -r0]
    2900:	0000062e 	andeq	r0, r0, lr, lsr #12
    2904:	03fc9503 	mvnseq	r9, #12582912	; 0xc00000
    2908:	fc130000 	ldc2	0, cr0, [r3], {-0}
    290c:	13000003 	movwne	r0, #3
    2910:	0000002c 	andeq	r0, r0, ip, lsr #32
    2914:	c8041000 	stmdagt	r4, {ip}
    2918:	00000003 	andeq	r0, r0, r3
    291c:	00000568 	andeq	r0, r0, r8, ror #10
    2920:	0d8b0004 	stceq	0, cr0, [fp, #16]
    2924:	01040000 	mrseq	r0, (UNDEF: 4)
    2928:	00000029 	andeq	r0, r0, r9, lsr #32
    292c:	00078001 	andeq	r8, r7, r1
    2930:	00034500 	andeq	r4, r3, r0, lsl #10
    2934:	00900400 	addseq	r0, r0, r0, lsl #8
    2938:	0003ac00 	andeq	sl, r3, r0, lsl #24
    293c:	000c7800 	andeq	r7, ip, r0, lsl #16
    2940:	07080200 	streq	r0, [r8, -r0, lsl #4]
    2944:	000000f6 	strdeq	r0, [r0], -r6
    2948:	00070402 	andeq	r0, r7, r2, lsl #8
    294c:	02000001 	andeq	r0, r0, #1
    2950:	00aa0601 	adceq	r0, sl, r1, lsl #12
    2954:	02020000 	andeq	r0, r2, #0
    2958:	00013105 	andeq	r3, r1, r5, lsl #2
    295c:	05040200 	streq	r0, [r4, #-512]	; 0x200
    2960:	00000128 	andeq	r0, r0, r8, lsr #2
    2964:	23050802 	movwcs	r0, #22530	; 0x5802
    2968:	02000001 	andeq	r0, r0, #1
    296c:	00a80801 	adceq	r0, r8, r1, lsl #16
    2970:	02020000 	andeq	r0, r2, #0
    2974:	0000cc07 	andeq	ip, r0, r7, lsl #24
    2978:	07040200 	streq	r0, [r4, -r0, lsl #4]
    297c:	000000fb 	strdeq	r0, [r0], -fp
    2980:	69050403 	stmdbvs	r5, {r0, r1, sl}
    2984:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    2988:	011a0704 	tsteq	sl, r4, lsl #14
    298c:	01020000 	mrseq	r0, (UNDEF: 2)
    2990:	0000b108 	andeq	fp, r0, r8, lsl #2
    2994:	02010400 	andeq	r0, r1, #0, 8
    2998:	0000b20c 	andeq	fp, r0, ip, lsl #4
    299c:	06d00500 	ldrbeq	r0, [r0], r0, lsl #10
    29a0:	05000000 	streq	r0, [r0, #-0]
    29a4:	000005d2 	ldrdeq	r0, [r0], -r2
    29a8:	05970501 	ldreq	r0, [r7, #1281]	; 0x501
    29ac:	05040000 	streq	r0, [r4, #-0]
    29b0:	000005e3 	andeq	r0, r0, r3, ror #11
    29b4:	05f20505 	ldrbeq	r0, [r2, #1285]!	; 0x505
    29b8:	05060000 	streq	r0, [r6, #-0]
    29bc:	00000601 	andeq	r0, r0, r1, lsl #12
    29c0:	06910507 	ldreq	r0, [r1], r7, lsl #10
    29c4:	05030000 	streq	r0, [r3, #-0]
    29c8:	00000610 	andeq	r0, r0, r0, lsl r6
    29cc:	43060002 	movwmi	r0, #24578	; 0x6002
    29d0:	02000006 	andeq	r0, r0, #6
    29d4:	00007915 	andeq	r7, r0, r5, lsl r9
    29d8:	03120700 	tsteq	r2, #0, 14
    29dc:	3f010000 	svccc	0x00010000
    29e0:	00009004 	andeq	r9, r0, r4
    29e4:	000000d4 	ldrdeq	r0, [r0], -r4
    29e8:	01339c01 	teqeq	r3, r1, lsl #24
    29ec:	70080000 	andvc	r0, r8, r0
    29f0:	01006e69 	tsteq	r0, r9, ror #28
    29f4:	00002c3f 	andeq	r2, r0, pc, lsr ip
    29f8:	00145a00 	andseq	r5, r4, r0, lsl #20
    29fc:	07870900 	streq	r0, [r7, r0, lsl #18]
    2a00:	47010000 	strmi	r0, [r1, -r0]
    2a04:	00000133 	andeq	r0, r0, r3, lsr r1
    2a08:	00001478 	andeq	r1, r0, r8, ror r4
    2a0c:	00076d09 	andeq	r6, r7, r9, lsl #26
    2a10:	2c490100 	stfcse	f0, [r9], {-0}
    2a14:	cd000000 	stcgt	0, cr0, [r0, #-0]
    2a18:	09000014 	stmdbeq	r0, {r2, r4}
    2a1c:	00000778 	andeq	r0, r0, r8, ror r7
    2a20:	002c5701 	eoreq	r5, ip, r1, lsl #14
    2a24:	16990000 	ldrne	r0, [r9], r0
    2a28:	980a0000 	stmdals	sl, {}	; <UNPREDICTABLE>
    2a2c:	2e000090 	mcrcs	0, 0, r0, cr0, cr0, {4}
    2a30:	22000005 	andcs	r0, r0, #5
    2a34:	0b000001 	bleq	2a40 <_start-0x55c0>
    2a38:	75025001 	strvc	r5, [r2, #-1]
    2a3c:	cc0c0000 	stcgt	0, cr0, [ip], {-0}
    2a40:	4f000090 	svcmi	0x00000090
    2a44:	0b000005 	bleq	2a60 <_start-0x55a0>
    2a48:	75025001 	strvc	r5, [r2, #-1]
    2a4c:	0d000000 	stceq	0, cr0, [r0, #-0]
    2a50:	00013904 	andeq	r3, r1, r4, lsl #18
    2a54:	002c0e00 	eoreq	r0, ip, r0, lsl #28
    2a58:	2b0f0000 	blcs	3c2a60 <__bss_end__+0x3b8f10>
    2a5c:	01000007 	tsteq	r0, r7
    2a60:	016c0360 	cmneq	ip, r0, ror #6
    2a64:	70100000 	andsvc	r0, r0, r0
    2a68:	01006e69 	tsteq	r0, r9, ror #28
    2a6c:	00002c60 	andeq	r2, r0, r0, ror #24
    2a70:	07871100 	streq	r1, [r7, r0, lsl #2]
    2a74:	67010000 	strvs	r0, [r1, -r0]
    2a78:	00000133 	andeq	r0, r0, r3, lsr r1
    2a7c:	00077811 	andeq	r7, r7, r1, lsl r8
    2a80:	2c680100 	stfcse	f0, [r8], #-0
    2a84:	00000000 	andeq	r0, r0, r0
    2a88:	00013e12 	andeq	r3, r1, r2, lsl lr
    2a8c:	0090d800 	addseq	sp, r0, r0, lsl #16
    2a90:	00003800 	andeq	r3, r0, r0, lsl #16
    2a94:	b09c0100 	addslt	r0, ip, r0, lsl #2
    2a98:	13000001 	movwne	r0, #1
    2a9c:	0000014a 	andeq	r0, r0, sl, asr #2
    2aa0:	000016c9 	andeq	r1, r0, r9, asr #13
    2aa4:	00015514 	andeq	r5, r1, r4, lsl r5
    2aa8:	0016ea00 	andseq	lr, r6, r0, lsl #20
    2aac:	01601400 	cmneq	r0, r0, lsl #8
    2ab0:	17200000 	strne	r0, [r0, -r0]!
    2ab4:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
    2ab8:	4f000091 	svcmi	0x00000091
    2abc:	0b000005 	bleq	2ad8 <_start-0x5528>
    2ac0:	31075101 	tstcc	r7, r1, lsl #2
    2ac4:	4f5001f3 	svcmi	0x005001f3
    2ac8:	0000241a 	andeq	r2, r0, sl, lsl r4
    2acc:	0007530f 	andeq	r5, r7, pc, lsl #6
    2ad0:	037b0100 	cmneq	fp, #0, 2
    2ad4:	000001de 	ldrdeq	r0, [r0], -lr
    2ad8:	6e697010 	mcrvs	0, 3, r7, cr9, cr0, {0}
    2adc:	2c7b0100 	ldfcse	f0, [fp], #-0
    2ae0:	11000000 	mrsne	r0, (UNDEF: 0)
    2ae4:	00000787 	andeq	r0, r0, r7, lsl #15
    2ae8:	01338101 	teqeq	r3, r1, lsl #2
    2aec:	78110000 	ldmdavc	r1, {}	; <UNPREDICTABLE>
    2af0:	01000007 	tsteq	r0, r7
    2af4:	00002c82 	andeq	r2, r0, r2, lsl #25
    2af8:	b0120000 	andslt	r0, r2, r0
    2afc:	10000001 	andne	r0, r0, r1
    2b00:	38000091 	stmdacc	r0, {r0, r4, r7}
    2b04:	01000000 	mrseq	r0, (UNDEF: 0)
    2b08:	0002229c 	muleq	r2, ip, r2
    2b0c:	01bc1300 			; <UNDEFINED> instruction: 0x01bc1300
    2b10:	17600000 	strbne	r0, [r0, -r0]!
    2b14:	c7140000 	ldrgt	r0, [r4, -r0]
    2b18:	81000001 	tsthi	r0, r1
    2b1c:	14000017 	strne	r0, [r0], #-23
    2b20:	000001d2 	ldrdeq	r0, [r0], -r2
    2b24:	000017b7 			; <UNDEFINED> instruction: 0x000017b7
    2b28:	0091400c 	addseq	r4, r1, ip
    2b2c:	00054f00 	andeq	r4, r5, r0, lsl #30
    2b30:	51010b00 	tstpl	r1, r0, lsl #22
    2b34:	01f33107 	mvnseq	r3, r7, lsl #2
    2b38:	241a4f50 	ldrcs	r4, [sl], #-3920	; 0xf50
    2b3c:	e7070000 	str	r0, [r7, -r0]
    2b40:	01000002 	tsteq	r0, r2
    2b44:	00914895 	umullseq	r4, r1, r5, r8
    2b48:	0000cc00 	andeq	ip, r0, r0, lsl #24
    2b4c:	989c0100 	ldmls	ip, {r8}
    2b50:	08000002 	stmdaeq	r0, {r1}
    2b54:	006e6970 	rsbeq	r6, lr, r0, ror r9
    2b58:	002c9501 	eoreq	r9, ip, r1, lsl #10
    2b5c:	17f70000 	ldrbne	r0, [r7, r0]!
    2b60:	87090000 	strhi	r0, [r9, -r0]
    2b64:	01000007 	tsteq	r0, r7
    2b68:	0001339b 	muleq	r1, fp, r3
    2b6c:	00181500 	andseq	r1, r8, r0, lsl #10
    2b70:	076d0900 	strbeq	r0, [sp, -r0, lsl #18]!
    2b74:	9d010000 	stcls	0, cr0, [r1, #-0]
    2b78:	0000002c 	andeq	r0, r0, ip, lsr #32
    2b7c:	0000186a 	andeq	r1, r0, sl, ror #16
    2b80:	00077809 	andeq	r7, r7, r9, lsl #16
    2b84:	2cab0100 	stfcss	f0, [fp]
    2b88:	36000000 	strcc	r0, [r0], -r0
    2b8c:	0a00001a 	beq	2bfc <_start-0x5404>
    2b90:	000091dc 	ldrdeq	r9, [r0], -ip
    2b94:	0000052e 	andeq	r0, r0, lr, lsr #10
    2b98:	00000287 	andeq	r0, r0, r7, lsl #5
    2b9c:	0250010b 	subseq	r0, r0, #-1073741822	; 0xc0000002
    2ba0:	0c000075 	stceq	0, cr0, [r0], {117}	; 0x75
    2ba4:	00009208 	andeq	r9, r0, r8, lsl #4
    2ba8:	0000054f 	andeq	r0, r0, pc, asr #10
    2bac:	0250010b 	subseq	r0, r0, #-1073741822	; 0xc0000002
    2bb0:	00000075 	andeq	r0, r0, r5, ror r0
    2bb4:	00028515 	andeq	r8, r2, r5, lsl r5
    2bb8:	64b30100 	ldrtvs	r0, [r3], #256	; 0x100
    2bbc:	14000000 	strne	r0, [r0], #-0
    2bc0:	4c000092 	stcmi	0, cr0, [r0], {146}	; 0x92
    2bc4:	01000000 	mrseq	r0, (UNDEF: 0)
    2bc8:	0002e09c 	muleq	r2, ip, r0
    2bcc:	69700800 	ldmdbvs	r0!, {fp}^
    2bd0:	b301006e 	movwlt	r0, #4206	; 0x106e
    2bd4:	0000002c 	andeq	r0, r0, ip, lsr #32
    2bd8:	00001a54 	andeq	r1, r0, r4, asr sl
    2bdc:	01007616 	tsteq	r0, r6, lsl r6
    2be0:	00002cb9 			; <UNDEFINED> instruction: 0x00002cb9
    2be4:	001aac00 	andseq	sl, sl, r0, lsl #24
    2be8:	92341700 	eorsls	r1, r4, #0, 14
    2bec:	052e0000 	streq	r0, [lr, #-0]!
    2bf0:	44170000 	ldrmi	r0, [r7], #-0
    2bf4:	2e000092 	mcrcs	0, 0, r0, cr0, cr2, {4}
    2bf8:	00000005 	andeq	r0, r0, r5
    2bfc:	0002cf07 	andeq	ip, r2, r7, lsl #30
    2c00:	60c50100 	sbcvs	r0, r5, r0, lsl #2
    2c04:	78000092 	stmdavc	r0, {r1, r4, r7}
    2c08:	01000000 	mrseq	r0, (UNDEF: 0)
    2c0c:	0003aa9c 	muleq	r3, ip, sl
    2c10:	69700800 	ldmdbvs	r0!, {fp}^
    2c14:	c501006e 	strgt	r0, [r1, #-110]	; 0x6e
    2c18:	0000002c 	andeq	r0, r0, ip, lsr #32
    2c1c:	00001ae2 	andeq	r1, r0, r2, ror #21
    2c20:	01007608 	tsteq	r0, r8, lsl #12
    2c24:	00002cc5 	andeq	r2, r0, r5, asr #25
    2c28:	001b1c00 	andseq	r1, fp, r0, lsl #24
    2c2c:	013e1800 	teqeq	lr, r0, lsl #16
    2c30:	92740000 	rsbsls	r0, r4, #0
    2c34:	00300000 	eorseq	r0, r0, r0
    2c38:	cc010000 	stcgt	0, cr0, [r1], {-0}
    2c3c:	0000035f 	andeq	r0, r0, pc, asr r3
    2c40:	00014a13 	andeq	r4, r1, r3, lsl sl
    2c44:	001b5600 	andseq	r5, fp, r0, lsl #12
    2c48:	92741900 	rsbsls	r1, r4, #0, 18
    2c4c:	00300000 	eorseq	r0, r0, r0
    2c50:	55140000 	ldrpl	r0, [r4, #-0]
    2c54:	77000001 	strvc	r0, [r0, -r1]
    2c58:	1400001b 	strne	r0, [r0], #-27
    2c5c:	00000160 	andeq	r0, r0, r0, ror #2
    2c60:	00001bad 	andeq	r1, r0, sp, lsr #23
    2c64:	0092a00c 	addseq	sl, r2, ip
    2c68:	00054f00 	andeq	r4, r5, r0, lsl #30
    2c6c:	51010b00 	tstpl	r1, r0, lsl #22
    2c70:	01f33107 	mvnseq	r3, r7, lsl #2
    2c74:	241a4f50 	ldrcs	r4, [sl], #-3920	; 0xf50
    2c78:	1a000000 	bne	2c80 <_start-0x5380>
    2c7c:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    2c80:	000092a4 	andeq	r9, r0, r4, lsr #5
    2c84:	00000034 	andeq	r0, r0, r4, lsr r0
    2c88:	bc13ce01 	ldclt	14, cr12, [r3], {1}
    2c8c:	ed000001 	stc	0, cr0, [r0, #-4]
    2c90:	1900001b 	stmdbne	r0, {r0, r1, r3, r4}
    2c94:	000092a4 	andeq	r9, r0, r4, lsr #5
    2c98:	00000034 	andeq	r0, r0, r4, lsr r0
    2c9c:	0001c714 	andeq	ip, r1, r4, lsl r7
    2ca0:	001c0e00 	andseq	r0, ip, r0, lsl #28
    2ca4:	01d21400 	bicseq	r1, r2, r0, lsl #8
    2ca8:	1c440000 	marne	acc0, r0, r4
    2cac:	d00c0000 	andle	r0, ip, r0
    2cb0:	4f000092 	svcmi	0x00000092
    2cb4:	0b000005 	bleq	2cd0 <_start-0x5330>
    2cb8:	31075101 	tstcc	r7, r1, lsl #2
    2cbc:	4f5001f3 	svcmi	0x005001f3
    2cc0:	0000241a 	andeq	r2, r0, sl, lsl r4
    2cc4:	a0070000 	andge	r0, r7, r0
    2cc8:	01000006 	tsteq	r0, r6
    2ccc:	0092d8d1 			; <UNDEFINED> instruction: 0x0092d8d1
    2cd0:	0000d800 	andeq	sp, r0, r0, lsl #16
    2cd4:	2f9c0100 	svccs	0x009c0100
    2cd8:	08000004 	stmdaeq	r0, {r2}
    2cdc:	006e6970 	rsbeq	r6, lr, r0, ror r9
    2ce0:	002cd101 	eoreq	sp, ip, r1, lsl #2
    2ce4:	1c840000 	stcne	0, cr0, [r4], {0}
    2ce8:	681b0000 	ldmdavs	fp, {}	; <UNPREDICTABLE>
    2cec:	01000007 	tsteq	r0, r7
    2cf0:	0000b2d1 	ldrdeq	fp, [r0], -r1
    2cf4:	001ca200 	andseq	sl, ip, r0, lsl #4
    2cf8:	07870900 	streq	r0, [r7, r0, lsl #18]
    2cfc:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    2d00:	00000133 	andeq	r0, r0, r3, lsr r1
    2d04:	00001cc3 	andeq	r1, r0, r3, asr #25
    2d08:	00076d09 	andeq	r6, r7, r9, lsl #26
    2d0c:	2cda0100 	ldfcse	f0, [sl], {0}
    2d10:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    2d14:	0900001d 	stmdbeq	r0, {r0, r2, r3, r4}
    2d18:	00000778 	andeq	r0, r0, r8, ror r7
    2d1c:	002ce801 	eoreq	lr, ip, r1, lsl #16
    2d20:	1ee40000 	cdpne	0, 14, cr0, cr4, cr0, {0}
    2d24:	740a0000 	strvc	r0, [sl], #-0
    2d28:	2e000093 	mcrcs	0, 0, r0, cr0, cr3, {4}
    2d2c:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    2d30:	0b000004 	bleq	2d48 <_start-0x52b8>
    2d34:	76025001 	strvc	r5, [r2], -r1
    2d38:	a40c0000 	strge	r0, [ip], #-0
    2d3c:	4f000093 	svcmi	0x00000093
    2d40:	0b000005 	bleq	2d5c <_start-0x52a4>
    2d44:	76025001 	strvc	r5, [r2], -r1
    2d48:	1c000000 	stcne	0, cr0, [r0], {-0}
    2d4c:	00000719 	andeq	r0, r0, r9, lsl r7
    2d50:	01332801 	teqeq	r3, r1, lsl #16
    2d54:	03050000 	movweq	r0, #20480	; 0x5000
    2d58:	00009434 	andeq	r9, r0, r4, lsr r4
    2d5c:	00070f1c 	andeq	r0, r7, ip, lsl pc
    2d60:	33290100 	teqcc	r9, #0, 2
    2d64:	05000001 	streq	r0, [r0, #-1]
    2d68:	00943003 	addseq	r3, r4, r3
    2d6c:	07051c00 	streq	r1, [r5, -r0, lsl #24]
    2d70:	2a010000 	bcs	42d78 <__bss_end__+0x39228>
    2d74:	00000133 	andeq	r0, r0, r3, lsr r1
    2d78:	942c0305 	strtls	r0, [ip], #-773	; 0x305
    2d7c:	901c0000 	andsls	r0, ip, r0
    2d80:	01000007 	tsteq	r0, r7
    2d84:	0001332c 	andeq	r3, r1, ip, lsr #6
    2d88:	fc030500 	stc2	5, cr0, [r3], {-0}
    2d8c:	1c000093 	stcne	0, cr0, [r0], {147}	; 0x93
    2d90:	00000760 	andeq	r0, r0, r0, ror #14
    2d94:	01332d01 	teqeq	r3, r1, lsl #26
    2d98:	03050000 	movweq	r0, #20480	; 0x5000
    2d9c:	00009400 	andeq	r9, r0, r0, lsl #8
    2da0:	00079f1c 	andeq	r9, r7, ip, lsl pc
    2da4:	332e0100 	teqcc	lr, #0, 2
    2da8:	05000001 	streq	r0, [r0, #-1]
    2dac:	00940403 	addseq	r0, r4, r3, lsl #8
    2db0:	07a71c00 	streq	r1, [r7, r0, lsl #24]!
    2db4:	2f010000 	svccs	0x00010000
    2db8:	00000133 	andeq	r0, r0, r3, lsr r1
    2dbc:	94080305 	strls	r0, [r8], #-773	; 0x305
    2dc0:	af1c0000 	svcge	0x001c0000
    2dc4:	01000007 	tsteq	r0, r7
    2dc8:	00013330 	andeq	r3, r1, r0, lsr r3
    2dcc:	0c030500 	cfstr32eq	mvfx0, [r3], {-0}
    2dd0:	1c000094 	stcne	0, cr0, [r0], {148}	; 0x94
    2dd4:	000007b7 			; <UNDEFINED> instruction: 0x000007b7
    2dd8:	01333101 	teqeq	r3, r1, lsl #2
    2ddc:	03050000 	movweq	r0, #20480	; 0x5000
    2de0:	00009410 	andeq	r9, r0, r0, lsl r4
    2de4:	00074c1c 	andeq	r4, r7, ip, lsl ip
    2de8:	33330100 	teqcc	r3, #0, 2
    2dec:	05000001 	streq	r0, [r0, #-1]
    2df0:	00941403 	addseq	r1, r4, r3, lsl #8
    2df4:	073e1c00 	ldreq	r1, [lr, -r0, lsl #24]!
    2df8:	34010000 	strcc	r0, [r1], #-0
    2dfc:	00000133 	andeq	r0, r0, r3, lsr r1
    2e00:	94180305 	ldrls	r0, [r8], #-773	; 0x305
    2e04:	451c0000 	ldrmi	r0, [ip, #-0]
    2e08:	01000007 	tsteq	r0, r7
    2e0c:	00013336 	andeq	r3, r1, r6, lsr r3
    2e10:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
    2e14:	1c000094 	stcne	0, cr0, [r0], {148}	; 0x94
    2e18:	00000724 	andeq	r0, r0, r4, lsr #14
    2e1c:	01333701 	teqeq	r3, r1, lsl #14
    2e20:	03050000 	movweq	r0, #20480	; 0x5000
    2e24:	00009420 	andeq	r9, r0, r0, lsr #8
    2e28:	0007981c 	andeq	r9, r7, ip, lsl r8
    2e2c:	33390100 	teqcc	r9, #0, 2
    2e30:	05000001 	streq	r0, [r0, #-1]
    2e34:	00942403 	addseq	r2, r4, r3, lsl #8
    2e38:	07371c00 	ldreq	r1, [r7, -r0, lsl #24]!
    2e3c:	3a010000 	bcc	42e44 <__bss_end__+0x392f4>
    2e40:	00000133 	andeq	r0, r0, r3, lsr r1
    2e44:	94280305 	strtls	r0, [r8], #-773	; 0x305
    2e48:	ff1d0000 			; <UNDEFINED> instruction: 0xff1d0000
    2e4c:	01000006 	tsteq	r0, r6
    2e50:	00002c20 	andeq	r2, r0, r0, lsr #24
    2e54:	00054300 	andeq	r4, r5, r0, lsl #6
    2e58:	05431e00 	strbeq	r1, [r3, #-3584]	; 0xe00
    2e5c:	0d000000 	stceq	0, cr0, [r0, #-0]
    2e60:	00054904 	andeq	r4, r5, r4, lsl #18
    2e64:	054e1f00 	strbeq	r1, [lr, #-3840]	; 0xf00
    2e68:	21200000 	teqcs	r0, r0
    2e6c:	0000062e 	andeq	r0, r0, lr, lsr #12
    2e70:	05651e01 	strbeq	r1, [r5, #-3585]!	; 0xe01
    2e74:	651e0000 	ldrvs	r0, [lr, #-0]
    2e78:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    2e7c:	0000002c 	andeq	r0, r0, ip, lsr #32
    2e80:	4e040d00 	cdpmi	13, 0, cr0, cr4, cr0, {0}
    2e84:	00000005 	andeq	r0, r0, r5
    2e88:	000000e0 	andeq	r0, r0, r0, ror #1
    2e8c:	0f4f0004 	svceq	0x004f0004
    2e90:	01040000 	mrseq	r0, (UNDEF: 4)
    2e94:	00000029 	andeq	r0, r0, r9, lsr #32
    2e98:	0007d001 	andeq	sp, r7, r1
    2e9c:	00034500 	andeq	r4, r3, r0, lsl #10
    2ea0:	0093b000 	addseq	fp, r3, r0
    2ea4:	00001400 	andeq	r1, r0, r0, lsl #8
    2ea8:	000d2100 	andeq	r2, sp, r0, lsl #2
    2eac:	05040200 	streq	r0, [r4, #-512]	; 0x200
    2eb0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2eb4:	00070403 	andeq	r0, r7, r3, lsl #8
    2eb8:	03000001 	movweq	r0, #1
    2ebc:	00aa0601 	adceq	r0, sl, r1, lsl #12
    2ec0:	02030000 	andeq	r0, r3, #0
    2ec4:	00013105 	andeq	r3, r1, r5, lsl #2
    2ec8:	05040300 	streq	r0, [r4, #-768]	; 0x300
    2ecc:	00000128 	andeq	r0, r0, r8, lsr #2
    2ed0:	23050803 	movwcs	r0, #22531	; 0x5803
    2ed4:	03000001 	movweq	r0, #1
    2ed8:	00a80801 	adceq	r0, r8, r1, lsl #16
    2edc:	02030000 	andeq	r0, r3, #0
    2ee0:	0000cc07 	andeq	ip, r0, r7, lsl #24
    2ee4:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2ee8:	000000fb 	strdeq	r0, [r0], -fp
    2eec:	f6070803 			; <UNDEFINED> instruction: 0xf6070803
    2ef0:	03000000 	movweq	r0, #0
    2ef4:	011a0704 	tsteq	sl, r4, lsl #14
    2ef8:	01030000 	mrseq	r0, (UNDEF: 3)
    2efc:	0000b108 	andeq	fp, r0, r8, lsl #2
    2f00:	07bf0400 	ldreq	r0, [pc, r0, lsl #8]!
    2f04:	03010000 	movweq	r0, #4096	; 0x1000
    2f08:	00000025 	andeq	r0, r0, r5, lsr #32
    2f0c:	000093b0 			; <UNDEFINED> instruction: 0x000093b0
    2f10:	00000014 	andeq	r0, r0, r4, lsl r0
    2f14:	00b09c01 	adcseq	r9, r0, r1, lsl #24
    2f18:	63050000 	movwvs	r0, #20480	; 0x5000
    2f1c:	25030100 	strcs	r0, [r3, #-256]	; 0x100
    2f20:	15000000 	strne	r0, [r0, #-0]
    2f24:	0600001f 			; <UNDEFINED> instruction: 0x0600001f
    2f28:	000093bc 			; <UNDEFINED> instruction: 0x000093bc
    2f2c:	000000d6 	ldrdeq	r0, [r0], -r6
    2f30:	02500107 	subseq	r0, r0, #-1073741823	; 0xc0000001
    2f34:	00000074 	andeq	r0, r0, r4, ror r0
    2f38:	00002508 	andeq	r2, r0, r8, lsl #10
    2f3c:	0000bf00 	andeq	fp, r0, r0, lsl #30
    2f40:	00250900 	eoreq	r0, r5, r0, lsl #18
    2f44:	0a000000 	beq	2f4c <_start-0x50b4>
    2f48:	000003a3 	andeq	r0, r0, r3, lsr #7
    2f4c:	00d00601 	sbcseq	r0, r0, r1, lsl #12
    2f50:	03050000 	movweq	r0, #20480	; 0x5000
    2f54:	00009438 	andeq	r9, r0, r8, lsr r4
    2f58:	00b0040b 	adcseq	r0, r0, fp, lsl #8
    2f5c:	550c0000 	strpl	r0, [ip, #-0]
    2f60:	02000002 	andeq	r0, r0, #2
    2f64:	002c093a 	eoreq	r0, ip, sl, lsr r9
    2f68:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <__bss_end__+0x2b655c>
  18:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  1c:	16030000 	strne	r0, [r3], -r0
  20:	3a0e0300 	bcc	380c28 <__bss_end__+0x3770d8>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	04000013 	streq	r0, [r0], #-19
  2c:	0b0b0024 	bleq	2c00c4 <__bss_end__+0x2b6574>
  30:	0e030b3e 	vmoveq.16	d3[0], r0
  34:	0f050000 	svceq	0x00050000
  38:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  3c:	06000013 			; <UNDEFINED> instruction: 0x06000013
  40:	13490026 	movtne	r0, #36902	; 0x9026
  44:	01070000 	mrseq	r0, (UNDEF: 7)
  48:	01134901 	tsteq	r3, r1, lsl #18
  4c:	08000013 	stmdaeq	r0, {r0, r1, r4}
  50:	13490021 	movtne	r0, #36897	; 0x9021
  54:	00000b2f 	andeq	r0, r0, pc, lsr #22
  58:	0b011309 	bleq	44c84 <__bss_end__+0x3b134>
  5c:	3b0b3a0b 	blcc	2ce890 <__bss_end__+0x2c4d40>
  60:	0013010b 	andseq	r0, r3, fp, lsl #2
  64:	000d0a00 	andeq	r0, sp, r0, lsl #20
  68:	0b3a0803 	bleq	e8207c <__bss_end__+0xe7852c>
  6c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  70:	00000b38 	andeq	r0, r0, r8, lsr fp
  74:	03000d0b 	movweq	r0, #3339	; 0xd0b
  78:	3b0b3a0e 	blcc	2ce8b8 <__bss_end__+0x2c4d68>
  7c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  80:	0c00000b 	stceq	0, cr0, [r0], {11}
  84:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  88:	0b3a0e03 	bleq	e8389c <__bss_end__+0xe79d4c>
  8c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  90:	06120111 			; <UNDEFINED> instruction: 0x06120111
  94:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  98:	00130119 	andseq	r0, r3, r9, lsl r1
  9c:	00340d00 	eorseq	r0, r4, r0, lsl #26
  a0:	0b3a0803 	bleq	e820b4 <__bss_end__+0xe78564>
  a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  a8:	00001802 	andeq	r1, r0, r2, lsl #16
  ac:	0300340e 	movweq	r3, #1038	; 0x40e
  b0:	3413490e 	ldrcc	r4, [r3], #-2318	; 0x90e
  b4:	00180219 	andseq	r0, r8, r9, lsl r2
  b8:	010b0f00 	tsteq	fp, r0, lsl #30
  bc:	06120111 			; <UNDEFINED> instruction: 0x06120111
  c0:	00001301 	andeq	r1, r0, r1, lsl #6
  c4:	03003410 	movweq	r3, #1040	; 0x410
  c8:	3b0b3a08 	blcc	2ce8f0 <__bss_end__+0x2c4da0>
  cc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  d0:	11000017 	tstne	r0, r7, lsl r0
  d4:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
  d8:	34120000 	ldrcc	r0, [r2], #-0
  dc:	3a0e0300 	bcc	380ce4 <__bss_end__+0x377194>
  e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  e4:	00170213 	andseq	r0, r7, r3, lsl r2
  e8:	82891300 	addhi	r1, r9, #0, 6
  ec:	01110101 	tsteq	r1, r1, lsl #2
  f0:	13011331 	movwne	r1, #4913	; 0x1331
  f4:	8a140000 	bhi	5000fc <__bss_end__+0x4f65ac>
  f8:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
  fc:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
 100:	89150000 	ldmdbhi	r5, {}	; <UNPREDICTABLE>
 104:	11000182 	smlabbne	r0, r2, r1, r0
 108:	00133101 	andseq	r3, r3, r1, lsl #2
 10c:	82891600 	addhi	r1, r9, #0, 12
 110:	01110101 	tsteq	r1, r1, lsl #2
 114:	00001331 	andeq	r1, r0, r1, lsr r3
 118:	49002117 	stmdbmi	r0, {r0, r1, r2, r4, r8, sp}
 11c:	00052f13 	andeq	r2, r5, r3, lsl pc
 120:	012e1800 	teqeq	lr, r0, lsl #16
 124:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 128:	0b3b0b3a 	bleq	ec2e18 <__bss_end__+0xeb92c8>
 12c:	13491927 	movtne	r1, #39207	; 0x9927
 130:	1301193c 	movwne	r1, #6460	; 0x193c
 134:	05190000 	ldreq	r0, [r9, #-0]
 138:	00134900 	andseq	r4, r3, r0, lsl #18
 13c:	00181a00 	andseq	r1, r8, r0, lsl #20
 140:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
 144:	03193f00 	tsteq	r9, #0, 30
 148:	3b0b3a0e 	blcc	2ce988 <__bss_end__+0x2c4e38>
 14c:	3c19270b 	ldccc	7, cr2, [r9], {11}
 150:	1c000019 	stcne	0, cr0, [r0], {25}
 154:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 158:	0b3a0e03 	bleq	e8396c <__bss_end__+0xe79e1c>
 15c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 160:	1301193c 	movwne	r1, #6460	; 0x193c
 164:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 168:	03193f01 	tsteq	r9, #1, 30
 16c:	3b0b3a0e 	blcc	2ce9ac <__bss_end__+0x2c4e5c>
 170:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 174:	00193c13 	andseq	r3, r9, r3, lsl ip
 178:	11010000 	mrsne	r0, (UNDEF: 1)
 17c:	130e2501 	movwne	r2, #58625	; 0xe501
 180:	1b0e030b 	blne	380db4 <__bss_end__+0x377264>
 184:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 188:	00171006 	andseq	r1, r7, r6
 18c:	00240200 	eoreq	r0, r4, r0, lsl #4
 190:	0b3e0b0b 	bleq	f82dc4 <__bss_end__+0xf79274>
 194:	00000803 	andeq	r0, r0, r3, lsl #16
 198:	0b002403 	bleq	91ac <gpio_set_input+0x64>
 19c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 1a0:	0400000e 	streq	r0, [r0], #-14
 1a4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 1a8:	0b3b0b3a 	bleq	ec2e98 <__bss_end__+0xeb9348>
 1ac:	00001349 	andeq	r1, r0, r9, asr #6
 1b0:	0b000f05 	bleq	3dcc <_start-0x4234>
 1b4:	0600000b 	streq	r0, [r0], -fp
 1b8:	0b0b000f 	bleq	2c01fc <__bss_end__+0x2b66ac>
 1bc:	00001349 	andeq	r1, r0, r9, asr #6
 1c0:	49002607 	stmdbmi	r0, {r0, r1, r2, r9, sl, sp}
 1c4:	08000013 	stmdaeq	r0, {r0, r1, r4}
 1c8:	0b0b0113 	bleq	2c061c <__bss_end__+0x2b6acc>
 1cc:	0b3b0b3a 	bleq	ec2ebc <__bss_end__+0xeb936c>
 1d0:	00001301 	andeq	r1, r0, r1, lsl #6
 1d4:	03000d09 	movweq	r0, #3337	; 0xd09
 1d8:	3b0b3a08 	blcc	2cea00 <__bss_end__+0x2c4eb0>
 1dc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 1e0:	0a00000b 	beq	214 <_start-0x7dec>
 1e4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 1e8:	0b3b0b3a 	bleq	ec2ed8 <__bss_end__+0xeb9388>
 1ec:	0b381349 	bleq	e04f18 <__bss_end__+0xdfb3c8>
 1f0:	130b0000 	movwne	r0, #45056	; 0xb000
 1f4:	0b0e0301 	bleq	380e00 <__bss_end__+0x3772b0>
 1f8:	3b0b3a0b 	blcc	2cea2c <__bss_end__+0x2c4edc>
 1fc:	0013010b 	andseq	r0, r3, fp, lsl #2
 200:	000d0c00 	andeq	r0, sp, r0, lsl #24
 204:	13490e03 	movtne	r0, #40451	; 0x9e03
 208:	19340b38 	ldmdbne	r4!, {r3, r4, r5, r8, r9, fp}
 20c:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
 210:	3a0e0301 	bcc	380e1c <__bss_end__+0x3772cc>
 214:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 218:	010b2019 	tsteq	fp, r9, lsl r0
 21c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 220:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 224:	0b3b0b3a 	bleq	ec2f14 <__bss_end__+0xeb93c4>
 228:	00001349 	andeq	r1, r0, r9, asr #6
 22c:	0300050f 	movweq	r0, #1295	; 0x50f
 230:	3b0b3a08 	blcc	2cea58 <__bss_end__+0x2c4f08>
 234:	0013490b 	andseq	r4, r3, fp, lsl #18
 238:	010b1000 	mrseq	r1, (UNDEF: 11)
 23c:	34110000 	ldrcc	r0, [r1], #-0
 240:	3a0e0300 	bcc	380e48 <__bss_end__+0x3772f8>
 244:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 248:	12000013 	andne	r0, r0, #19
 24c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 250:	0b3a0e03 	bleq	e83a64 <__bss_end__+0xe79f14>
 254:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 258:	06120111 			; <UNDEFINED> instruction: 0x06120111
 25c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 260:	00130119 	andseq	r0, r3, r9, lsl r1
 264:	00051300 	andeq	r1, r5, r0, lsl #6
 268:	0b3a0e03 	bleq	e83a7c <__bss_end__+0xe79f2c>
 26c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 270:	00001702 	andeq	r1, r0, r2, lsl #14
 274:	03000514 	movweq	r0, #1300	; 0x514
 278:	3b0b3a08 	blcc	2ceaa0 <__bss_end__+0x2c4f50>
 27c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 280:	15000017 	strne	r0, [r0, #-23]
 284:	08030034 	stmdaeq	r3, {r2, r4, r5}
 288:	0b3b0b3a 	bleq	ec2f78 <__bss_end__+0xeb9428>
 28c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 290:	34160000 	ldrcc	r0, [r6], #-0
 294:	3a080300 	bcc	200e9c <__bss_end__+0x1f734c>
 298:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 29c:	00170213 	andseq	r0, r7, r3, lsl r2
 2a0:	00341700 	eorseq	r1, r4, r0, lsl #14
 2a4:	0b3a0803 	bleq	e822b8 <__bss_end__+0xe78768>
 2a8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2ac:	34180000 	ldrcc	r0, [r8], #-0
 2b0:	3a0e0300 	bcc	380eb8 <__bss_end__+0x377368>
 2b4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2b8:	00180213 	andseq	r0, r8, r3, lsl r2
 2bc:	010b1900 	tsteq	fp, r0, lsl #18
 2c0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2c4:	00001301 	andeq	r1, r0, r1, lsl #6
 2c8:	31011d1a 	tstcc	r1, sl, lsl sp
 2cc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 2d0:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
 2d4:	0013010b 	andseq	r0, r3, fp, lsl #2
 2d8:	00051b00 	andeq	r1, r5, r0, lsl #22
 2dc:	17021331 	smladxne	r2, r1, r3, r1
 2e0:	051c0000 	ldreq	r0, [ip, #-0]
 2e4:	02133100 	andseq	r3, r3, #0, 2
 2e8:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
 2ec:	13310005 	teqne	r1, #5
 2f0:	00000b1c 	andeq	r0, r0, ip, lsl fp
 2f4:	11010b1e 	tstne	r1, lr, lsl fp
 2f8:	00061201 	andeq	r1, r6, r1, lsl #4
 2fc:	00341f00 	eorseq	r1, r4, r0, lsl #30
 300:	17021331 	smladxne	r2, r1, r3, r1
 304:	89200000 	stmdbhi	r0!, {}	; <UNPREDICTABLE>
 308:	11010182 	smlabbne	r1, r2, r1, r0
 30c:	00133101 	andseq	r3, r3, r1, lsl #2
 310:	828a2100 	addhi	r2, sl, #0, 2
 314:	18020001 	stmdane	r2, {r0}
 318:	00184291 	mulseq	r8, r1, r2
 31c:	011d2200 	tsteq	sp, r0, lsl #4
 320:	01111331 	tsteq	r1, r1, lsr r3
 324:	0b580612 	bleq	1601b74 <__bss_end__+0x15f8024>
 328:	00000b59 	andeq	r0, r0, r9, asr fp
 32c:	03012e23 	movweq	r2, #7715	; 0x1e23
 330:	3b0b3a0e 	blcc	2ceb70 <__bss_end__+0x2c5020>
 334:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 338:	010b2013 	tsteq	fp, r3, lsl r0
 33c:	24000013 	strcs	r0, [r0], #-19
 340:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 344:	0b3a0e03 	bleq	e83b58 <__bss_end__+0xe7a008>
 348:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 34c:	01111349 	tsteq	r1, r9, asr #6
 350:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 354:	01194297 			; <UNDEFINED> instruction: 0x01194297
 358:	25000013 	strcs	r0, [r0, #-19]
 35c:	00018289 	andeq	r8, r1, r9, lsl #5
 360:	13310111 	teqne	r1, #1073741828	; 0x40000004
 364:	89260000 	stmdbhi	r6!, {}	; <UNPREDICTABLE>
 368:	11010182 	smlabbne	r1, r2, r1, r0
 36c:	01133101 	tsteq	r3, r1, lsl #2
 370:	27000013 	smladcs	r0, r3, r0, r0
 374:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 378:	0b3b0b3a 	bleq	ec3068 <__bss_end__+0xeb9518>
 37c:	17021349 	strne	r1, [r2, -r9, asr #6]
 380:	05280000 	streq	r0, [r8, #-0]!
 384:	00133100 	andseq	r3, r3, r0, lsl #2
 388:	00052900 	andeq	r2, r5, r0, lsl #18
 38c:	0b3a0e03 	bleq	e83ba0 <__bss_end__+0xe7a050>
 390:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 394:	00001802 	andeq	r1, r0, r2, lsl #16
 398:	0300342a 	movweq	r3, #1066	; 0x42a
 39c:	3413490e 	ldrcc	r4, [r3], #-2318	; 0x90e
 3a0:	00180219 	andseq	r0, r8, r9, lsl r2
 3a4:	01012b00 	tsteq	r1, r0, lsl #22
 3a8:	13011349 	movwne	r1, #4937	; 0x1349
 3ac:	212c0000 	teqcs	ip, r0
 3b0:	2f134900 	svccs	0x00134900
 3b4:	2d00000b 	stccs	0, cr0, [r0, #-44]	; 0xffffffd4
 3b8:	08030034 	stmdaeq	r3, {r2, r4, r5}
 3bc:	0b3b0b3a 	bleq	ec30ac <__bss_end__+0xeb955c>
 3c0:	061c1349 	ldreq	r1, [ip], -r9, asr #6
 3c4:	342e0000 	strtcc	r0, [lr], #-0
 3c8:	3a080300 	bcc	200fd0 <__bss_end__+0x1f7480>
 3cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3d0:	000b1c13 	andeq	r1, fp, r3, lsl ip
 3d4:	00052f00 	andeq	r2, r5, r0, lsl #30
 3d8:	0b3a0803 	bleq	e823ec <__bss_end__+0xe7889c>
 3dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3e0:	00001802 	andeq	r1, r0, r2, lsl #16
 3e4:	00001830 	andeq	r1, r0, r0, lsr r8
 3e8:	00213100 	eoreq	r3, r1, r0, lsl #2
 3ec:	052f1349 	streq	r1, [pc, #-841]!	; ab <_start-0x7f55>
 3f0:	2e320000 	cdpcs	0, 3, cr0, cr2, cr0, {0}
 3f4:	03193f01 	tsteq	r9, #1, 30
 3f8:	3b0b3a0e 	blcc	2cec38 <__bss_end__+0x2c50e8>
 3fc:	3c19270b 	ldccc	7, cr2, [r9], {11}
 400:	00130119 	andseq	r0, r3, r9, lsl r1
 404:	00053300 	andeq	r3, r5, r0, lsl #6
 408:	00001349 	andeq	r1, r0, r9, asr #6
 40c:	3f002e34 	svccc	0x00002e34
 410:	3a0e0319 	bcc	38107c <__bss_end__+0x37752c>
 414:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 418:	3c134919 	ldccc	9, cr4, [r3], {25}
 41c:	35000019 	strcc	r0, [r0, #-25]
 420:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 424:	0b3a0e03 	bleq	e83c38 <__bss_end__+0xe7a0e8>
 428:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 42c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 430:	00001301 	andeq	r1, r0, r1, lsl #6
 434:	3f002e36 	svccc	0x00002e36
 438:	3a0e0319 	bcc	3810a4 <__bss_end__+0x377554>
 43c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 440:	00193c19 	andseq	r3, r9, r9, lsl ip
 444:	012e3700 	teqeq	lr, r0, lsl #14
 448:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 44c:	0b3b0b3a 	bleq	ec313c <__bss_end__+0xeb95ec>
 450:	13491927 	movtne	r1, #39207	; 0x9927
 454:	0000193c 	andeq	r1, r0, ip, lsr r9
 458:	01110100 	tsteq	r1, r0, lsl #2
 45c:	0b130e25 	bleq	4c3cf8 <__bss_end__+0x4ba1a8>
 460:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 464:	06120111 			; <UNDEFINED> instruction: 0x06120111
 468:	00001710 	andeq	r1, r0, r0, lsl r7
 46c:	03001602 	movweq	r1, #1538	; 0x602
 470:	3b0b3a0e 	blcc	2cecb0 <__bss_end__+0x2c5160>
 474:	0013490b 	andseq	r4, r3, fp, lsl #18
 478:	01130300 	tsteq	r3, r0, lsl #6
 47c:	0b0b0e03 	bleq	2c3c90 <__bss_end__+0x2ba140>
 480:	0b3b0b3a 	bleq	ec3170 <__bss_end__+0xeb9620>
 484:	00001301 	andeq	r1, r0, r1, lsl #6
 488:	03000d04 	movweq	r0, #3332	; 0xd04
 48c:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
 490:	0019340b 	andseq	r3, r9, fp, lsl #8
 494:	000f0500 	andeq	r0, pc, r0, lsl #10
 498:	00000b0b 	andeq	r0, r0, fp, lsl #22
 49c:	0b002406 	bleq	94bc <__FUNCTION__.4184+0x80>
 4a0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 4a4:	07000008 	streq	r0, [r0, -r8]
 4a8:	0b0b0024 	bleq	2c0540 <__bss_end__+0x2b69f0>
 4ac:	0e030b3e 	vmoveq.16	d3[0], r0
 4b0:	0f080000 	svceq	0x00080000
 4b4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 4b8:	09000013 	stmdbeq	r0, {r0, r1, r4}
 4bc:	13490026 	movtne	r0, #36902	; 0x9026
 4c0:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
 4c4:	03193f01 	tsteq	r9, #1, 30
 4c8:	3b0b3a0e 	blcc	2ced08 <__bss_end__+0x2c51b8>
 4cc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 4d0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 4d4:	97184006 	ldrls	r4, [r8, -r6]
 4d8:	13011942 	movwne	r1, #6466	; 0x1942
 4dc:	050b0000 	streq	r0, [fp, #-0]
 4e0:	3a080300 	bcc	2010e8 <__bss_end__+0x1f7598>
 4e4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4e8:	00180213 	andseq	r0, r8, r3, lsl r2
 4ec:	00180c00 	andseq	r0, r8, r0, lsl #24
 4f0:	340d0000 	strcc	r0, [sp], #-0
 4f4:	3a080300 	bcc	2010fc <__bss_end__+0x1f75ac>
 4f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4fc:	00180213 	andseq	r0, r8, r3, lsl r2
 500:	00340e00 	eorseq	r0, r4, r0, lsl #28
 504:	0b3a0e03 	bleq	e83d18 <__bss_end__+0xe7a1c8>
 508:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 50c:	00001802 	andeq	r1, r0, r2, lsl #16
 510:	0300340f 	movweq	r3, #1039	; 0x40f
 514:	3b0b3a08 	blcc	2ced3c <__bss_end__+0x2c51ec>
 518:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 51c:	10000017 	andne	r0, r0, r7, lsl r0
 520:	01018289 	smlabbeq	r1, r9, r2, r8
 524:	13310111 	teqne	r1, #1073741828	; 0x40000004
 528:	00001301 	andeq	r1, r0, r1, lsl #6
 52c:	01828a11 	orreq	r8, r2, r1, lsl sl
 530:	91180200 	tstls	r8, r0, lsl #4
 534:	00001842 	andeq	r1, r0, r2, asr #16
 538:	01828912 	orreq	r8, r2, r2, lsl r9
 53c:	00011101 	andeq	r1, r1, r1, lsl #2
 540:	01011300 	mrseq	r1, SP_irq
 544:	13011349 	movwne	r1, #4937	; 0x1349
 548:	21140000 	tstcs	r4, r0
 54c:	2f134900 	svccs	0x00134900
 550:	15000005 	strne	r0, [r0, #-5]
 554:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 558:	13011349 	movwne	r1, #4937	; 0x1349
 55c:	05160000 	ldreq	r0, [r6, #-0]
 560:	00134900 	andseq	r4, r3, r0, lsl #18
 564:	00341700 	eorseq	r1, r4, r0, lsl #14
 568:	0b3a0e03 	bleq	e83d7c <__bss_end__+0xe7a22c>
 56c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 570:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 574:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
 578:	03193f01 	tsteq	r9, #1, 30
 57c:	3b0b3a0e 	blcc	2cedbc <__bss_end__+0x2c526c>
 580:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 584:	00193c13 	andseq	r3, r9, r3, lsl ip
 588:	11010000 	mrsne	r0, (UNDEF: 1)
 58c:	130e2501 	movwne	r2, #58625	; 0xe501
 590:	1b0e030b 	blne	3811c4 <__bss_end__+0x377674>
 594:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 598:	00171006 	andseq	r1, r7, r6
 59c:	00240200 	eoreq	r0, r4, r0, lsl #4
 5a0:	0b3e0b0b 	bleq	f831d4 <__bss_end__+0xf79684>
 5a4:	00000803 	andeq	r0, r0, r3, lsl #16
 5a8:	0b002403 	bleq	95bc <__FUNCTION__.4307+0x5c>
 5ac:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 5b0:	0400000e 	streq	r0, [r0], #-14
 5b4:	0b0b000f 	bleq	2c05f8 <__bss_end__+0x2b6aa8>
 5b8:	00001349 	andeq	r1, r0, r9, asr #6
 5bc:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
 5c0:	06000013 			; <UNDEFINED> instruction: 0x06000013
 5c4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 5c8:	0b3a0e03 	bleq	e83ddc <__bss_end__+0xe7a28c>
 5cc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 5d0:	01111349 	tsteq	r1, r9, asr #6
 5d4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 5d8:	01194296 			; <UNDEFINED> instruction: 0x01194296
 5dc:	07000013 	smladeq	r0, r3, r0, r0
 5e0:	08030005 	stmdaeq	r3, {r0, r2}
 5e4:	0b3b0b3a 	bleq	ec32d4 <__bss_end__+0xeb9784>
 5e8:	17021349 	strne	r1, [r2, -r9, asr #6]
 5ec:	15080000 	strne	r0, [r8, #-0]
 5f0:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
 5f4:	00130113 	andseq	r0, r3, r3, lsl r1
 5f8:	00050900 	andeq	r0, r5, r0, lsl #18
 5fc:	00001349 	andeq	r1, r0, r9, asr #6
 600:	0300340a 	movweq	r3, #1034	; 0x40a
 604:	3b0b3a0e 	blcc	2cee44 <__bss_end__+0x2c52f4>
 608:	3f13490b 	svccc	0x0013490b
 60c:	00193c19 	andseq	r3, r9, r9, lsl ip
 610:	00340b00 	eorseq	r0, r4, r0, lsl #22
 614:	0b3a0e03 	bleq	e83e28 <__bss_end__+0xe7a2d8>
 618:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 61c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 620:	01000000 	mrseq	r0, (UNDEF: 0)
 624:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 628:	0e030b13 	vmoveq.32	d3[0], r0
 62c:	01110e1b 	tsteq	r1, fp, lsl lr
 630:	17100612 			; <UNDEFINED> instruction: 0x17100612
 634:	24020000 	strcs	r0, [r2], #-0
 638:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 63c:	000e030b 	andeq	r0, lr, fp, lsl #6
 640:	00240300 	eoreq	r0, r4, r0, lsl #6
 644:	0b3e0b0b 	bleq	f83278 <__bss_end__+0xf79728>
 648:	00000803 	andeq	r0, r0, r3, lsl #16
 64c:	0b000f04 	bleq	4264 <_start-0x3d9c>
 650:	0013490b 	andseq	r4, r3, fp, lsl #18
 654:	00260500 	eoreq	r0, r6, r0, lsl #10
 658:	00001349 	andeq	r1, r0, r9, asr #6
 65c:	03001606 	movweq	r1, #1542	; 0x606
 660:	3b0b3a0e 	blcc	2ceea0 <__bss_end__+0x2c5350>
 664:	0013490b 	andseq	r4, r3, fp, lsl #18
 668:	012e0700 	teqeq	lr, r0, lsl #14
 66c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 670:	0b3b0b3a 	bleq	ec3360 <__bss_end__+0xeb9810>
 674:	13491927 	movtne	r1, #39207	; 0x9927
 678:	06120111 			; <UNDEFINED> instruction: 0x06120111
 67c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 680:	08000019 	stmdaeq	r0, {r0, r3, r4}
 684:	08030005 	stmdaeq	r3, {r0, r2}
 688:	0b3b0b3a 	bleq	ec3378 <__bss_end__+0xeb9828>
 68c:	17021349 	strne	r1, [r2, -r9, asr #6]
 690:	34090000 	strcc	r0, [r9], #-0
 694:	3a080300 	bcc	20129c <__bss_end__+0x1f774c>
 698:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 69c:	00170213 	andseq	r0, r7, r3, lsl r2
 6a0:	11010000 	mrsne	r0, (UNDEF: 1)
 6a4:	130e2501 	movwne	r2, #58625	; 0xe501
 6a8:	1b0e030b 	blne	3812dc <__bss_end__+0x37778c>
 6ac:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 6b0:	00171006 	andseq	r1, r7, r6
 6b4:	00240200 	eoreq	r0, r4, r0, lsl #4
 6b8:	0b3e0b0b 	bleq	f832ec <__bss_end__+0xf7979c>
 6bc:	00000803 	andeq	r0, r0, r3, lsl #16
 6c0:	0b002403 	bleq	96d4 <__FUNCTION__.4219+0x7c>
 6c4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 6c8:	0400000e 	streq	r0, [r0], #-14
 6cc:	0b0b000f 	bleq	2c0710 <__bss_end__+0x2b6bc0>
 6d0:	0f050000 	svceq	0x00050000
 6d4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 6d8:	06000013 			; <UNDEFINED> instruction: 0x06000013
 6dc:	13490026 	movtne	r0, #36902	; 0x9026
 6e0:	16070000 	strne	r0, [r7], -r0
 6e4:	3a0e0300 	bcc	3812ec <__bss_end__+0x37779c>
 6e8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6ec:	08000013 	stmdaeq	r0, {r0, r1, r4}
 6f0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 6f4:	0b3a0b0b 	bleq	e83328 <__bss_end__+0xe797d8>
 6f8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 6fc:	0d090000 	stceq	0, cr0, [r9, #-0]
 700:	490e0300 	stmdbmi	lr, {r8, r9}
 704:	340b3813 	strcc	r3, [fp], #-2067	; 0x813
 708:	0a000019 	beq	774 <_start-0x788c>
 70c:	0e03012e 	adfeqsp	f0, f3, #0.5
 710:	0b3b0b3a 	bleq	ec3400 <__bss_end__+0xeb98b0>
 714:	13491927 	movtne	r1, #39207	; 0x9927
 718:	06120111 			; <UNDEFINED> instruction: 0x06120111
 71c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 720:	00130119 	andseq	r0, r3, r9, lsl r1
 724:	00050b00 	andeq	r0, r5, r0, lsl #22
 728:	0b3a0803 	bleq	e8273c <__bss_end__+0xe78bec>
 72c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 730:	00001702 	andeq	r1, r0, r2, lsl #14
 734:	03012e0c 	movweq	r2, #7692	; 0x1e0c
 738:	3b0b3a08 	blcc	2cef60 <__bss_end__+0x2c5410>
 73c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 740:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 744:	97184006 	ldrls	r4, [r8, -r6]
 748:	13011942 	movwne	r1, #6466	; 0x1942
 74c:	050d0000 	streq	r0, [sp, #-0]
 750:	3a0e0300 	bcc	381358 <__bss_end__+0x377808>
 754:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 758:	00170213 	andseq	r0, r7, r3, lsl r2
 75c:	00050e00 	andeq	r0, r5, r0, lsl #28
 760:	0b3a0e03 	bleq	e83f74 <__bss_end__+0xe7a424>
 764:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 768:	00001802 	andeq	r1, r0, r2, lsl #16
 76c:	0300340f 	movweq	r3, #1039	; 0x40f
 770:	3b0b3a08 	blcc	2cef98 <__bss_end__+0x2c5448>
 774:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 778:	10000018 	andne	r0, r0, r8, lsl r0
 77c:	08030034 	stmdaeq	r3, {r2, r4, r5}
 780:	0b3b0b3a 	bleq	ec3470 <__bss_end__+0xeb9920>
 784:	17021349 	strne	r1, [r2, -r9, asr #6]
 788:	34110000 	ldrcc	r0, [r1], #-0
 78c:	490e0300 	stmdbmi	lr, {r8, r9}
 790:	02193413 	andseq	r3, r9, #318767104	; 0x13000000
 794:	12000018 	andne	r0, r0, #24
 798:	0111010b 	tsteq	r1, fp, lsl #2
 79c:	13010612 	movwne	r0, #5650	; 0x1612
 7a0:	34130000 	ldrcc	r0, [r3], #-0
 7a4:	3a0e0300 	bcc	3813ac <__bss_end__+0x37785c>
 7a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 7ac:	00170213 	andseq	r0, r7, r3, lsl r2
 7b0:	82891400 	addhi	r1, r9, #0, 8
 7b4:	01110101 	tsteq	r1, r1, lsl #2
 7b8:	13011331 	movwne	r1, #4913	; 0x1331
 7bc:	8a150000 	bhi	5407c4 <__bss_end__+0x536c74>
 7c0:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
 7c4:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
 7c8:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
 7cc:	11000182 	smlabbne	r0, r2, r1, r0
 7d0:	00133101 	andseq	r3, r3, r1, lsl #2
 7d4:	82891700 	addhi	r1, r9, #0, 14
 7d8:	01110101 	tsteq	r1, r1, lsl #2
 7dc:	00001331 	andeq	r1, r0, r1, lsr r3
 7e0:	49010118 	stmdbmi	r1, {r3, r4, r8}
 7e4:	00130113 	andseq	r0, r3, r3, lsl r1
 7e8:	00211900 	eoreq	r1, r1, r0, lsl #18
 7ec:	0b2f1349 	bleq	bc5518 <__bss_end__+0xbbb9c8>
 7f0:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
 7f4:	03193f01 	tsteq	r9, #1, 30
 7f8:	3b0b3a0e 	blcc	2cf038 <__bss_end__+0x2c54e8>
 7fc:	1119270b 	tstne	r9, fp, lsl #14
 800:	40061201 	andmi	r1, r6, r1, lsl #4
 804:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 808:	00001301 	andeq	r1, r0, r1, lsl #6
 80c:	2701151b 	smladcs	r1, fp, r5, r1
 810:	01134919 	tsteq	r3, r9, lsl r9
 814:	1c000013 	stcne	0, cr0, [r0], {19}
 818:	13490005 	movtne	r0, #36869	; 0x9005
 81c:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 820:	03193f01 	tsteq	r9, #1, 30
 824:	3b0b3a0e 	blcc	2cf064 <__bss_end__+0x2c5514>
 828:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 82c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 830:	97184006 	ldrls	r4, [r8, -r6]
 834:	13011942 	movwne	r1, #6466	; 0x1942
 838:	0b1e0000 	bleq	780840 <__bss_end__+0x776cf0>
 83c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 840:	1f000006 	svcne	0x00000006
 844:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 848:	0b3b0b3a 	bleq	ec3538 <__bss_end__+0xeb99e8>
 84c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 850:	0000193c 	andeq	r1, r0, ip, lsr r9
 854:	3f012e20 	svccc	0x00012e20
 858:	3a0e0319 	bcc	3814c4 <__bss_end__+0x377974>
 85c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 860:	3c134919 	ldccc	9, cr4, [r3], {25}
 864:	00130119 	andseq	r0, r3, r9, lsl r1
 868:	00182100 	andseq	r2, r8, r0, lsl #2
 86c:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
 870:	03193f00 	tsteq	r9, #0, 30
 874:	3b0b3a0e 	blcc	2cf0b4 <__bss_end__+0x2c5564>
 878:	3c19270b 	ldccc	7, cr2, [r9], {11}
 87c:	00000019 	andeq	r0, r0, r9, lsl r0
 880:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 884:	030b130e 	movweq	r1, #45838	; 0xb30e
 888:	110e1b0e 	tstne	lr, lr, lsl #22
 88c:	10061201 	andne	r1, r6, r1, lsl #4
 890:	02000017 	andeq	r0, r0, #23
 894:	0b0b0024 	bleq	2c092c <__bss_end__+0x2b6ddc>
 898:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 89c:	24030000 	strcs	r0, [r3], #-0
 8a0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 8a4:	000e030b 	andeq	r0, lr, fp, lsl #6
 8a8:	012e0400 	teqeq	lr, r0, lsl #8
 8ac:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 8b0:	0b3b0b3a 	bleq	ec35a0 <__bss_end__+0xeb9a50>
 8b4:	01111927 	tsteq	r1, r7, lsr #18
 8b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 8bc:	01194297 			; <UNDEFINED> instruction: 0x01194297
 8c0:	05000013 	streq	r0, [r0, #-19]
 8c4:	08030034 	stmdaeq	r3, {r2, r4, r5}
 8c8:	0b3b0b3a 	bleq	ec35b8 <__bss_end__+0xeb9a68>
 8cc:	17021349 	strne	r1, [r2, -r9, asr #6]
 8d0:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
 8d4:	03193f01 	tsteq	r9, #1, 30
 8d8:	3b0b3a0e 	blcc	2cf118 <__bss_end__+0x2c55c8>
 8dc:	1119270b 	tstne	r9, fp, lsl #14
 8e0:	40061201 	andmi	r1, r6, r1, lsl #4
 8e4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 8e8:	01000000 	mrseq	r0, (UNDEF: 0)
 8ec:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 8f0:	0e030b13 	vmoveq.32	d3[0], r0
 8f4:	01110e1b 	tsteq	r1, fp, lsl lr
 8f8:	17100612 			; <UNDEFINED> instruction: 0x17100612
 8fc:	24020000 	strcs	r0, [r2], #-0
 900:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 904:	0008030b 	andeq	r0, r8, fp, lsl #6
 908:	00240300 	eoreq	r0, r4, r0, lsl #6
 90c:	0b3e0b0b 	bleq	f83540 <__bss_end__+0xf799f0>
 910:	00000e03 	andeq	r0, r0, r3, lsl #28
 914:	0b000f04 	bleq	452c <_start-0x3ad4>
 918:	0013490b 	andseq	r4, r3, fp, lsl #18
 91c:	00260500 	eoreq	r0, r6, r0, lsl #10
 920:	00001349 	andeq	r1, r0, r9, asr #6
 924:	3f012e06 	svccc	0x00012e06
 928:	3a0e0319 	bcc	381594 <__bss_end__+0x377a44>
 92c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 930:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 934:	97184006 	ldrls	r4, [r8, -r6]
 938:	13011942 	movwne	r1, #6466	; 0x1942
 93c:	89070000 	stmdbhi	r7, {}	; <UNPREDICTABLE>
 940:	11010182 	smlabbne	r1, r2, r1, r0
 944:	00130101 	andseq	r0, r3, r1, lsl #2
 948:	828a0800 	addhi	r0, sl, #0, 16
 94c:	18020001 	stmdane	r2, {r0}
 950:	00184291 	mulseq	r8, r1, r2
 954:	82890900 	addhi	r0, r9, #0, 18
 958:	01110101 	tsteq	r1, r1, lsl #2
 95c:	13011331 	movwne	r1, #4913	; 0x1331
 960:	890a0000 	stmdbhi	sl, {}	; <UNPREDICTABLE>
 964:	11000182 	smlabbne	r0, r2, r1, r0
 968:	00133101 	andseq	r3, r3, r1, lsl #2
 96c:	01150b00 	tsteq	r5, r0, lsl #22
 970:	13491927 	movtne	r1, #39207	; 0x9927
 974:	00001301 	andeq	r1, r0, r1, lsl #6
 978:	4900050c 	stmdbmi	r0, {r2, r3, r8, sl}
 97c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 980:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 984:	0b3b0b3a 	bleq	ec3674 <__bss_end__+0xeb9b24>
 988:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 98c:	0000193c 	andeq	r1, r0, ip, lsr r9
 990:	3f012e0e 	svccc	0x00012e0e
 994:	3a0e0319 	bcc	381600 <__bss_end__+0x377ab0>
 998:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 99c:	01193c19 	tsteq	r9, r9, lsl ip
 9a0:	0f000013 	svceq	0x00000013
 9a4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 9a8:	0b3a0e03 	bleq	e841bc <__bss_end__+0xe7a66c>
 9ac:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 9b0:	0000193c 	andeq	r1, r0, ip, lsr r9
 9b4:	01110100 	tsteq	r1, r0, lsl #2
 9b8:	0b130e25 	bleq	4c4254 <__bss_end__+0x4ba704>
 9bc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 9c0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 9c4:	00001710 	andeq	r1, r0, r0, lsl r7
 9c8:	0b002402 	bleq	99d8 <__bss_start__+0x288>
 9cc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 9d0:	03000008 	movweq	r0, #8
 9d4:	0b0b0024 	bleq	2c0a6c <__bss_end__+0x2b6f1c>
 9d8:	0e030b3e 	vmoveq.16	d3[0], r0
 9dc:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
 9e0:	03193f01 	tsteq	r9, #1, 30
 9e4:	3b0b3a0e 	blcc	2cf224 <__bss_end__+0x2c56d4>
 9e8:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 9ec:	97184006 	ldrls	r4, [r8, -r6]
 9f0:	13011942 	movwne	r1, #6466	; 0x1942
 9f4:	34050000 	strcc	r0, [r5], #-0
 9f8:	3a0e0300 	bcc	381600 <__bss_end__+0x377ab0>
 9fc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 a00:	3c193f13 	ldccc	15, cr3, [r9], {19}
 a04:	06000019 			; <UNDEFINED> instruction: 0x06000019
 a08:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 a0c:	0b3a0e03 	bleq	e84220 <__bss_end__+0xe7a6d0>
 a10:	193c0b3b 	ldmdbne	ip!, {r0, r1, r3, r4, r5, r8, r9, fp}
 a14:	00001301 	andeq	r1, r0, r1, lsl #6
 a18:	00001807 	andeq	r1, r0, r7, lsl #16
 a1c:	00340800 	eorseq	r0, r4, r0, lsl #16
 a20:	0b3a0803 	bleq	e82a34 <__bss_end__+0xe78ee4>
 a24:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 a28:	00001702 	andeq	r1, r0, r2, lsl #14
 a2c:	03003409 	movweq	r3, #1033	; 0x409
 a30:	3b0b3a0e 	blcc	2cf270 <__bss_end__+0x2c5720>
 a34:	0013490b 	andseq	r4, r3, fp, lsl #18
 a38:	82890a00 	addhi	r0, r9, #0, 20
 a3c:	01110001 	tsteq	r1, r1
 a40:	00001331 	andeq	r1, r0, r1, lsr r3
 a44:	0b000f0b 	bleq	4678 <_start-0x3988>
 a48:	0013490b 	andseq	r4, r3, fp, lsl #18
 a4c:	002e0c00 	eoreq	r0, lr, r0, lsl #24
 a50:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 a54:	0b3b0b3a 	bleq	ec3744 <__bss_end__+0xeb9bf4>
 a58:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 a5c:	01000000 	mrseq	r0, (UNDEF: 0)
 a60:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 a64:	0e030b13 	vmoveq.32	d3[0], r0
 a68:	17550e1b 	smmlane	r5, fp, lr, r0
 a6c:	17100111 			; <UNDEFINED> instruction: 0x17100111
 a70:	24020000 	strcs	r0, [r2], #-0
 a74:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 a78:	0008030b 	andeq	r0, r8, fp, lsl #6
 a7c:	00240300 	eoreq	r0, r4, r0, lsl #6
 a80:	0b3e0b0b 	bleq	f836b4 <__bss_end__+0xf79b64>
 a84:	00000e03 	andeq	r0, r0, r3, lsl #28
 a88:	3f012e04 	svccc	0x00012e04
 a8c:	3a0e0319 	bcc	3816f8 <__bss_end__+0x377ba8>
 a90:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 a94:	11134919 	tstne	r3, r9, lsl r9
 a98:	40061201 	andmi	r1, r6, r1, lsl #4
 a9c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 aa0:	00001301 	andeq	r1, r0, r1, lsl #6
 aa4:	03003405 	movweq	r3, #1029	; 0x405
 aa8:	3b0b3a0e 	blcc	2cf2e8 <__bss_end__+0x2c5798>
 aac:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 ab0:	06000017 			; <UNDEFINED> instruction: 0x06000017
 ab4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 ab8:	0b3a0e03 	bleq	e842cc <__bss_end__+0xe7a77c>
 abc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 ac0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 ac4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 ac8:	00130119 	andseq	r0, r3, r9, lsl r1
 acc:	00340700 	eorseq	r0, r4, r0, lsl #14
 ad0:	0b3a0e03 	bleq	e842e4 <__bss_end__+0xe7a794>
 ad4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 ad8:	0000061c 	andeq	r0, r0, ip, lsl r6
 adc:	03003408 	movweq	r3, #1032	; 0x408
 ae0:	3b0b3a0e 	blcc	2cf320 <__bss_end__+0x2c57d0>
 ae4:	1c13490b 	ldcne	9, cr4, [r3], {11}
 ae8:	0900000b 	stmdbeq	r0, {r0, r1, r3}
 aec:	00018289 	andeq	r8, r1, r9, lsl #5
 af0:	13310111 	teqne	r1, #1073741828	; 0x40000004
 af4:	890a0000 	stmdbhi	sl, {}	; <UNPREDICTABLE>
 af8:	11010182 	smlabbne	r1, r2, r1, r0
 afc:	01133101 	tsteq	r3, r1, lsl #2
 b00:	0b000013 	bleq	b54 <_start-0x74ac>
 b04:	0001828a 	andeq	r8, r1, sl, lsl #5
 b08:	42911802 	addsmi	r1, r1, #131072	; 0x20000
 b0c:	0c000018 	stceq	0, cr0, [r0], {24}
 b10:	01018289 	smlabbeq	r1, r9, r2, r8
 b14:	13310111 	teqne	r1, #1073741828	; 0x40000004
 b18:	260d0000 	strcs	r0, [sp], -r0
 b1c:	00134900 	andseq	r4, r3, r0, lsl #18
 b20:	012e0e00 	teqeq	lr, r0, lsl #28
 b24:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 b28:	0b3b0b3a 	bleq	ec3818 <__bss_end__+0xeb9cc8>
 b2c:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 b30:	00001301 	andeq	r1, r0, r1, lsl #6
 b34:	4900050f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sl}
 b38:	10000013 	andne	r0, r0, r3, lsl r0
 b3c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 b40:	0b3a0e03 	bleq	e84354 <__bss_end__+0xe7a804>
 b44:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 b48:	0000193c 	andeq	r1, r0, ip, lsr r9
 b4c:	01110100 	tsteq	r1, r0, lsl #2
 b50:	0b130e25 	bleq	4c43ec <__bss_end__+0x4ba89c>
 b54:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 b58:	06120111 			; <UNDEFINED> instruction: 0x06120111
 b5c:	00001710 	andeq	r1, r0, r0, lsl r7
 b60:	0b002402 	bleq	9b70 <__bss_end__+0x20>
 b64:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 b68:	03000008 	movweq	r0, #8
 b6c:	0b0b0024 	bleq	2c0c04 <__bss_end__+0x2b70b4>
 b70:	0e030b3e 	vmoveq.16	d3[0], r0
 b74:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
 b78:	03193f01 	tsteq	r9, #1, 30
 b7c:	3b0b3a0e 	blcc	2cf3bc <__bss_end__+0x2c586c>
 b80:	1119270b 	tstne	r9, fp, lsl #14
 b84:	40061201 	andmi	r1, r6, r1, lsl #4
 b88:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 b8c:	00001301 	andeq	r1, r0, r1, lsl #6
 b90:	03000505 	movweq	r0, #1285	; 0x505
 b94:	3b0b3a0e 	blcc	2cf3d4 <__bss_end__+0x2c5884>
 b98:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 b9c:	06000017 			; <UNDEFINED> instruction: 0x06000017
 ba0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 ba4:	0b3a0e03 	bleq	e843b8 <__bss_end__+0xe7a868>
 ba8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 bac:	01111349 	tsteq	r1, r9, asr #6
 bb0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 bb4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 bb8:	07000013 	smladeq	r0, r3, r0, r0
 bbc:	01018289 	smlabbeq	r1, r9, r2, r8
 bc0:	13310111 	teqne	r1, #1073741828	; 0x40000004
 bc4:	8a080000 	bhi	200bcc <__bss_end__+0x1f707c>
 bc8:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
 bcc:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
 bd0:	34090000 	strcc	r0, [r9], #-0
 bd4:	3a080300 	bcc	2017dc <__bss_end__+0x1f7c8c>
 bd8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 bdc:	00170213 	andseq	r0, r7, r3, lsl r2
 be0:	82890a00 	addhi	r0, r9, #0, 20
 be4:	01110001 	tsteq	r1, r1
 be8:	00001331 	andeq	r1, r0, r1, lsr r3
 bec:	0300050b 	movweq	r0, #1291	; 0x50b
 bf0:	3b0b3a08 	blcc	2cf418 <__bss_end__+0x2c58c8>
 bf4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 bf8:	0c000017 	stceq	0, cr0, [r0], {23}
 bfc:	08030034 	stmdaeq	r3, {r2, r4, r5}
 c00:	0b3b0b3a 	bleq	ec38f0 <__bss_end__+0xeb9da0>
 c04:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 c08:	0b0d0000 	bleq	340c10 <__bss_end__+0x3370c0>
 c0c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 c10:	00130106 	andseq	r0, r3, r6, lsl #2
 c14:	012e0e00 	teqeq	lr, r0, lsl #28
 c18:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 c1c:	0b3b0b3a 	bleq	ec390c <__bss_end__+0xeb9dbc>
 c20:	13491927 	movtne	r1, #39207	; 0x9927
 c24:	1301193c 	movwne	r1, #6460	; 0x193c
 c28:	050f0000 	streq	r0, [pc, #-0]	; c30 <_start-0x73d0>
 c2c:	00134900 	andseq	r4, r3, r0, lsl #18
 c30:	002e1000 	eoreq	r1, lr, r0
 c34:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 c38:	0b3b0b3a 	bleq	ec3928 <__bss_end__+0xeb9dd8>
 c3c:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 c40:	01000000 	mrseq	r0, (UNDEF: 0)
 c44:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 c48:	0e030b13 	vmoveq.32	d3[0], r0
 c4c:	01110e1b 	tsteq	r1, fp, lsl lr
 c50:	17100612 			; <UNDEFINED> instruction: 0x17100612
 c54:	24020000 	strcs	r0, [r2], #-0
 c58:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 c5c:	0008030b 	andeq	r0, r8, fp, lsl #6
 c60:	00240300 	eoreq	r0, r4, r0, lsl #6
 c64:	0b3e0b0b 	bleq	f83898 <__bss_end__+0xf79d48>
 c68:	00000e03 	andeq	r0, r0, r3, lsl #28
 c6c:	0b010404 	bleq	41c84 <__bss_end__+0x38134>
 c70:	3b0b3a0b 	blcc	2cf4a4 <__bss_end__+0x2c5954>
 c74:	0013010b 	andseq	r0, r3, fp, lsl #2
 c78:	00280500 	eoreq	r0, r8, r0, lsl #10
 c7c:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
 c80:	16060000 	strne	r0, [r6], -r0
 c84:	3a0e0300 	bcc	38188c <__bss_end__+0x377d3c>
 c88:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 c8c:	07000013 	smladeq	r0, r3, r0, r0
 c90:	0e03012e 	adfeqsp	f0, f3, #0.5
 c94:	0b3b0b3a 	bleq	ec3984 <__bss_end__+0xeb9e34>
 c98:	13491927 	movtne	r1, #39207	; 0x9927
 c9c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 ca0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 ca4:	00130119 	andseq	r0, r3, r9, lsl r1
 ca8:	82890800 	addhi	r0, r9, #0, 16
 cac:	01110001 	tsteq	r1, r1
 cb0:	00001331 	andeq	r1, r0, r1, lsr r3
 cb4:	3f012e09 	svccc	0x00012e09
 cb8:	3a0e0319 	bcc	381924 <__bss_end__+0x377dd4>
 cbc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 cc0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 cc4:	97184006 	ldrls	r4, [r8, -r6]
 cc8:	13011942 	movwne	r1, #6466	; 0x1942
 ccc:	890a0000 	stmdbhi	sl, {}	; <UNPREDICTABLE>
 cd0:	11010182 	smlabbne	r1, r2, r1, r0
 cd4:	01133101 	tsteq	r3, r1, lsl #2
 cd8:	0b000013 	bleq	d2c <_start-0x72d4>
 cdc:	0001828a 	andeq	r8, r1, sl, lsl #5
 ce0:	42911802 	addsmi	r1, r1, #131072	; 0x20000
 ce4:	0c000018 	stceq	0, cr0, [r0], {24}
 ce8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 cec:	0b3a0e03 	bleq	e84500 <__bss_end__+0xe7a9b0>
 cf0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 cf4:	01111349 	tsteq	r1, r9, asr #6
 cf8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 cfc:	01194297 			; <UNDEFINED> instruction: 0x01194297
 d00:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 d04:	08030005 	stmdaeq	r3, {r0, r2}
 d08:	0b3b0b3a 	bleq	ec39f8 <__bss_end__+0xeb9ea8>
 d0c:	17021349 	strne	r1, [r2, -r9, asr #6]
 d10:	890e0000 	stmdbhi	lr, {}	; <UNPREDICTABLE>
 d14:	11010182 	smlabbne	r1, r2, r1, r0
 d18:	00133101 	andseq	r3, r3, r1, lsl #2
 d1c:	00340f00 	eorseq	r0, r4, r0, lsl #30
 d20:	0b3a0e03 	bleq	e84534 <__bss_end__+0xe7a9e4>
 d24:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 d28:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 d2c:	0f100000 	svceq	0x00100000
 d30:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 d34:	11000013 	tstne	r0, r3, lsl r0
 d38:	13490035 	movtne	r0, #36917	; 0x9035
 d3c:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 d40:	03193f01 	tsteq	r9, #1, 30
 d44:	3b0b3a0e 	blcc	2cf584 <__bss_end__+0x2c5a34>
 d48:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 d4c:	01193c13 	tsteq	r9, r3, lsl ip
 d50:	13000013 	movwne	r0, #19
 d54:	13490005 	movtne	r0, #36869	; 0x9005
 d58:	26140000 	ldrcs	r0, [r4], -r0
 d5c:	00134900 	andseq	r4, r3, r0, lsl #18
 d60:	00351500 	eorseq	r1, r5, r0, lsl #10
 d64:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
 d68:	03193f00 	tsteq	r9, #0, 30
 d6c:	3b0b3a0e 	blcc	2cf5ac <__bss_end__+0x2c5a5c>
 d70:	3c19270b 	ldccc	7, cr2, [r9], {11}
 d74:	17000019 	smladne	r0, r9, r0, r0
 d78:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 d7c:	0b3a0e03 	bleq	e84590 <__bss_end__+0xe7aa40>
 d80:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 d84:	1301193c 	movwne	r1, #6460	; 0x193c
 d88:	01000000 	mrseq	r0, (UNDEF: 0)
 d8c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 d90:	0e030b13 	vmoveq.32	d3[0], r0
 d94:	01110e1b 	tsteq	r1, fp, lsl lr
 d98:	17100612 			; <UNDEFINED> instruction: 0x17100612
 d9c:	24020000 	strcs	r0, [r2], #-0
 da0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 da4:	000e030b 	andeq	r0, lr, fp, lsl #6
 da8:	00240300 	eoreq	r0, r4, r0, lsl #6
 dac:	0b3e0b0b 	bleq	f839e0 <__bss_end__+0xf79e90>
 db0:	00000803 	andeq	r0, r0, r3, lsl #16
 db4:	0b010404 	bleq	41dcc <__bss_end__+0x3827c>
 db8:	3b0b3a0b 	blcc	2cf5ec <__bss_end__+0x2c5a9c>
 dbc:	0013010b 	andseq	r0, r3, fp, lsl #2
 dc0:	00280500 	eoreq	r0, r8, r0, lsl #10
 dc4:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
 dc8:	16060000 	strne	r0, [r6], -r0
 dcc:	3a0e0300 	bcc	3819d4 <__bss_end__+0x377e84>
 dd0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 dd4:	07000013 	smladeq	r0, r3, r0, r0
 dd8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 ddc:	0b3a0e03 	bleq	e845f0 <__bss_end__+0xe7aaa0>
 de0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 de4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 de8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 dec:	00130119 	andseq	r0, r3, r9, lsl r1
 df0:	00050800 	andeq	r0, r5, r0, lsl #16
 df4:	0b3a0803 	bleq	e82e08 <__bss_end__+0xe792b8>
 df8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 dfc:	00001702 	andeq	r1, r0, r2, lsl #14
 e00:	03003409 	movweq	r3, #1033	; 0x409
 e04:	3b0b3a0e 	blcc	2cf644 <__bss_end__+0x2c5af4>
 e08:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 e0c:	0a000017 	beq	e70 <_start-0x7190>
 e10:	01018289 	smlabbeq	r1, r9, r2, r8
 e14:	13310111 	teqne	r1, #1073741828	; 0x40000004
 e18:	00001301 	andeq	r1, r0, r1, lsl #6
 e1c:	01828a0b 	orreq	r8, r2, fp, lsl #20
 e20:	91180200 	tstls	r8, r0, lsl #4
 e24:	00001842 	andeq	r1, r0, r2, asr #16
 e28:	0182890c 	orreq	r8, r2, ip, lsl #18
 e2c:	31011101 	tstcc	r1, r1, lsl #2
 e30:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 e34:	0b0b000f 	bleq	2c0e78 <__bss_end__+0x2b7328>
 e38:	00001349 	andeq	r1, r0, r9, asr #6
 e3c:	4900350e 	stmdbmi	r0, {r1, r2, r3, r8, sl, ip, sp}
 e40:	0f000013 	svceq	0x00000013
 e44:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 e48:	0b3a0e03 	bleq	e8465c <__bss_end__+0xe7ab0c>
 e4c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 e50:	13010b20 	movwne	r0, #6944	; 0x1b20
 e54:	05100000 	ldreq	r0, [r0, #-0]
 e58:	3a080300 	bcc	201a60 <__bss_end__+0x1f7f10>
 e5c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 e60:	11000013 	tstne	r0, r3, lsl r0
 e64:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 e68:	0b3b0b3a 	bleq	ec3b58 <__bss_end__+0xeba008>
 e6c:	00001349 	andeq	r1, r0, r9, asr #6
 e70:	31012e12 	tstcc	r1, r2, lsl lr
 e74:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 e78:	97184006 	ldrls	r4, [r8, -r6]
 e7c:	13011942 	movwne	r1, #6466	; 0x1942
 e80:	05130000 	ldreq	r0, [r3, #-0]
 e84:	02133100 	andseq	r3, r3, #0, 2
 e88:	14000017 	strne	r0, [r0], #-23
 e8c:	13310034 	teqne	r1, #52	; 0x34
 e90:	00001702 	andeq	r1, r0, r2, lsl #14
 e94:	3f012e15 	svccc	0x00012e15
 e98:	3a0e0319 	bcc	381b04 <__bss_end__+0x377fb4>
 e9c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 ea0:	11134919 	tstne	r3, r9, lsl r9
 ea4:	40061201 	andmi	r1, r6, r1, lsl #4
 ea8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 eac:	00001301 	andeq	r1, r0, r1, lsl #6
 eb0:	03003416 	movweq	r3, #1046	; 0x416
 eb4:	3b0b3a08 	blcc	2cf6dc <__bss_end__+0x2c5b8c>
 eb8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 ebc:	17000017 	smladne	r0, r7, r0, r0
 ec0:	00018289 	andeq	r8, r1, r9, lsl #5
 ec4:	13310111 	teqne	r1, #1073741828	; 0x40000004
 ec8:	1d180000 	ldcne	0, cr0, [r8, #-0]
 ecc:	11133101 	tstne	r3, r1, lsl #2
 ed0:	58061201 	stmdapl	r6, {r0, r9, ip}
 ed4:	010b590b 	tsteq	fp, fp, lsl #18
 ed8:	19000013 	stmdbne	r0, {r0, r1, r4}
 edc:	0111010b 	tsteq	r1, fp, lsl #2
 ee0:	00000612 	andeq	r0, r0, r2, lsl r6
 ee4:	31011d1a 	tstcc	r1, sl, lsl sp
 ee8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 eec:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
 ef0:	1b00000b 	blne	f24 <_start-0x70dc>
 ef4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 ef8:	0b3b0b3a 	bleq	ec3be8 <__bss_end__+0xeba098>
 efc:	17021349 	strne	r1, [r2, -r9, asr #6]
 f00:	341c0000 	ldrcc	r0, [ip], #-0
 f04:	3a0e0300 	bcc	381b0c <__bss_end__+0x377fbc>
 f08:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 f0c:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 f10:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
 f14:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 f18:	0b3a0e03 	bleq	e8472c <__bss_end__+0xe7abdc>
 f1c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 f20:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 f24:	00001301 	andeq	r1, r0, r1, lsl #6
 f28:	4900051e 	stmdbmi	r0, {r1, r2, r3, r4, r8, sl}
 f2c:	1f000013 	svcne	0x00000013
 f30:	13490026 	movtne	r0, #36902	; 0x9026
 f34:	35200000 	strcc	r0, [r0, #-0]!
 f38:	21000000 	mrscs	r0, (UNDEF: 0)
 f3c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 f40:	0b3a0e03 	bleq	e84754 <__bss_end__+0xe7ac04>
 f44:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 f48:	1301193c 	movwne	r1, #6460	; 0x193c
 f4c:	01000000 	mrseq	r0, (UNDEF: 0)
 f50:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 f54:	0e030b13 	vmoveq.32	d3[0], r0
 f58:	01110e1b 	tsteq	r1, fp, lsl lr
 f5c:	17100612 			; <UNDEFINED> instruction: 0x17100612
 f60:	24020000 	strcs	r0, [r2], #-0
 f64:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 f68:	0008030b 	andeq	r0, r8, fp, lsl #6
 f6c:	00240300 	eoreq	r0, r4, r0, lsl #6
 f70:	0b3e0b0b 	bleq	f83ba4 <__bss_end__+0xf7a054>
 f74:	00000e03 	andeq	r0, r0, r3, lsl #28
 f78:	03012e04 	movweq	r2, #7684	; 0x1e04
 f7c:	3b0b3a0e 	blcc	2cf7bc <__bss_end__+0x2c5c6c>
 f80:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 f84:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 f88:	97184006 	ldrls	r4, [r8, -r6]
 f8c:	13011942 	movwne	r1, #6466	; 0x1942
 f90:	05050000 	streq	r0, [r5, #-0]
 f94:	3a080300 	bcc	201b9c <__bss_end__+0x1f804c>
 f98:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 f9c:	00170213 	andseq	r0, r7, r3, lsl r2
 fa0:	82890600 	addhi	r0, r9, #0, 12
 fa4:	01110101 	tsteq	r1, r1, lsl #2
 fa8:	00001331 	andeq	r1, r0, r1, lsr r3
 fac:	01828a07 	orreq	r8, r2, r7, lsl #20
 fb0:	91180200 	tstls	r8, r0, lsl #4
 fb4:	00001842 	andeq	r1, r0, r2, asr #16
 fb8:	27011508 	strcs	r1, [r1, -r8, lsl #10]
 fbc:	01134919 	tsteq	r3, r9, lsl r9
 fc0:	09000013 	stmdbeq	r0, {r0, r1, r4}
 fc4:	13490005 	movtne	r0, #36869	; 0x9005
 fc8:	340a0000 	strcc	r0, [sl], #-0
 fcc:	3a0e0300 	bcc	381bd4 <__bss_end__+0x378084>
 fd0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 fd4:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 fd8:	0b000018 	bleq	1040 <_start-0x6fc0>
 fdc:	0b0b000f 	bleq	2c1020 <__bss_end__+0x2b74d0>
 fe0:	00001349 	andeq	r1, r0, r9, asr #6
 fe4:	3f012e0c 	svccc	0x00012e0c
 fe8:	3a0e0319 	bcc	381c54 <__bss_end__+0x378104>
 fec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 ff0:	00193c19 	andseq	r3, r9, r9, lsl ip
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	00000034 	andeq	r0, r0, r4, lsr r0
       4:	00000050 	andeq	r0, r0, r0, asr r0
       8:	9f300002 	svcls	0x00300002
       c:	00000050 	andeq	r0, r0, r0, asr r0
      10:	00000118 	andeq	r0, r0, r8, lsl r1
      14:	00540001 	subseq	r0, r4, r1
      18:	00000000 	andeq	r0, r0, r0
      1c:	50000000 	andpl	r0, r0, r0
      20:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
      24:	02000000 	andeq	r0, r0, #0
      28:	009f3300 	addseq	r3, pc, r0, lsl #6
      2c:	00000000 	andeq	r0, r0, r0
      30:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
      34:	84000000 	strhi	r0, [r0], #-0
      38:	01000000 	mrseq	r0, (UNDEF: 0)
      3c:	00845000 	addeq	r5, r4, r0
      40:	00900000 	addseq	r0, r0, r0
      44:	00010000 	andeq	r0, r1, r0
      48:	00009055 	andeq	r9, r0, r5, asr r0
      4c:	00009400 	andeq	r9, r0, r0, lsl #8
      50:	50000100 	andpl	r0, r0, r0, lsl #2
      54:	00000094 	muleq	r0, r4, r0
      58:	000000e8 	andeq	r0, r0, r8, ror #1
      5c:	00550001 	subseq	r0, r5, r1
	...
      68:	1c000000 	stcne	0, cr0, [r0], {-0}
      6c:	01000000 	mrseq	r0, (UNDEF: 0)
      70:	001c5000 	andseq	r5, ip, r0
      74:	01580000 	cmpeq	r8, r0
      78:	00040000 	andeq	r0, r4, r0
      7c:	9f5001f3 	svcls	0x005001f3
	...
      8c:	00000020 	andeq	r0, r0, r0, lsr #32
      90:	20510001 	subscs	r0, r1, r1
      94:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
      98:	04000001 	streq	r0, [r0], #-1
      9c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
      a0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      a4:	00000000 	andeq	r0, r0, r0
      a8:	00001000 	andeq	r1, r0, r0
      ac:	00013800 	andeq	r3, r1, r0, lsl #16
      b0:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
      bc:	00000014 	andeq	r0, r0, r4, lsl r0
      c0:	00000038 	andeq	r0, r0, r8, lsr r0
      c4:	38550001 	ldmdacc	r5, {r0}^
      c8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
      cc:	01000001 	tsteq	r0, r1
      d0:	01385800 	teqeq	r8, r0, lsl #16
      d4:	01580000 	cmpeq	r8, r0
      d8:	00010000 	andeq	r0, r1, r0
      dc:	00000055 	andeq	r0, r0, r5, asr r0
      e0:	00000000 	andeq	r0, r0, r0
      e4:	00001800 	andeq	r1, r0, r0, lsl #16
      e8:	00013800 	andeq	r3, r1, r0, lsl #16
      ec:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
      f8:	00000024 	andeq	r0, r0, r4, lsr #32
      fc:	00000138 	andeq	r0, r0, r8, lsr r1
     100:	00550001 	subseq	r0, r5, r1
     104:	00000000 	andeq	r0, r0, r0
     108:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     10c:	2c000000 	stccs	0, cr0, [r0], {-0}
     110:	01000000 	mrseq	r0, (UNDEF: 0)
     114:	00005300 	andeq	r5, r0, r0, lsl #6
     118:	00000000 	andeq	r0, r0, r0
     11c:	00380000 	eorseq	r0, r8, r0
     120:	00580000 	subseq	r0, r8, r0
     124:	00010000 	andeq	r0, r1, r0
     128:	00005858 	andeq	r5, r0, r8, asr r8
     12c:	00013800 	andeq	r3, r1, r0, lsl #16
     130:	75000500 	strvc	r0, [r0, #-1280]	; 0x500
     134:	9f243100 	svcls	0x00243100
	...
     140:	00000038 	andeq	r0, r0, r8, lsr r0
     144:	00000040 	andeq	r0, r0, r0, asr #32
     148:	00770005 	rsbseq	r0, r7, r5
     14c:	409f1a31 	addsmi	r1, pc, r1, lsr sl	; <UNPREDICTABLE>
     150:	43000000 	movwmi	r0, #0
     154:	01000000 	mrseq	r0, (UNDEF: 0)
     158:	00435100 	subeq	r5, r3, r0, lsl #2
     15c:	01580000 	cmpeq	r8, r0
     160:	00050000 	andeq	r0, r5, r0
     164:	1a310077 	bne	c40348 <__bss_end__+0xc367f8>
     168:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     16c:	00000000 	andeq	r0, r0, r0
     170:	00004400 	andeq	r4, r0, r0, lsl #8
     174:	00005800 	andeq	r5, r0, r0, lsl #16
     178:	58000100 	stmdapl	r0, {r8}
     17c:	00000058 	andeq	r0, r0, r8, asr r0
     180:	00000138 	andeq	r0, r0, r8, lsr r1
     184:	00750005 	rsbseq	r0, r5, r5
     188:	009f2431 	addseq	r2, pc, r1, lsr r4	; <UNPREDICTABLE>
     18c:	00000000 	andeq	r0, r0, r0
     190:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     194:	4c000000 	stcmi	0, cr0, [r0], {-0}
     198:	01000000 	mrseq	r0, (UNDEF: 0)
     19c:	00005300 	andeq	r5, r0, r0, lsl #6
     1a0:	00000000 	andeq	r0, r0, r0
     1a4:	00580000 	subseq	r0, r8, r0
     1a8:	00780000 	rsbseq	r0, r8, r0
     1ac:	00010000 	andeq	r0, r1, r0
     1b0:	00007858 	andeq	r7, r0, r8, asr r8
     1b4:	00013800 	andeq	r3, r1, r0, lsl #16
     1b8:	75000800 	strvc	r0, [r0, #-2048]	; 0x800
     1bc:	75243100 	strvc	r3, [r4, #-256]!	; 0x100
     1c0:	009f2200 	addseq	r2, pc, r0, lsl #4
     1c4:	00000000 	andeq	r0, r0, r0
     1c8:	64000000 	strvs	r0, [r0], #-0
     1cc:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
     1d0:	01000000 	mrseq	r0, (UNDEF: 0)
     1d4:	00785800 	rsbseq	r5, r8, r0, lsl #16
     1d8:	01380000 	teqeq	r8, r0
     1dc:	00080000 	andeq	r0, r8, r0
     1e0:	24310075 	ldrtcs	r0, [r1], #-117	; 0x75
     1e4:	9f220075 	svcls	0x00220075
	...
     1f0:	00000068 	andeq	r0, r0, r8, rrx
     1f4:	0000006c 	andeq	r0, r0, ip, rrx
     1f8:	00530001 	subseq	r0, r3, r1
     1fc:	00000000 	andeq	r0, r0, r0
     200:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
     204:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
     208:	01000000 	mrseq	r0, (UNDEF: 0)
     20c:	00985800 	addseq	r5, r8, r0, lsl #16
     210:	01380000 	teqeq	r8, r0
     214:	00050000 	andeq	r0, r5, r0
     218:	24320075 	ldrtcs	r0, [r2], #-117	; 0x75
     21c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     220:	00000000 	andeq	r0, r0, r0
     224:	00008400 	andeq	r8, r0, r0, lsl #8
     228:	00009800 	andeq	r9, r0, r0, lsl #16
     22c:	58000100 	stmdapl	r0, {r8}
     230:	00000098 	muleq	r0, r8, r0
     234:	00000138 	andeq	r0, r0, r8, lsr r1
     238:	00750005 	rsbseq	r0, r5, r5
     23c:	009f2432 	addseq	r2, pc, r2, lsr r4	; <UNPREDICTABLE>
     240:	00000000 	andeq	r0, r0, r0
     244:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
     248:	8c000000 	stchi	0, cr0, [r0], {-0}
     24c:	01000000 	mrseq	r0, (UNDEF: 0)
     250:	00005300 	andeq	r5, r0, r0, lsl #6
     254:	00000000 	andeq	r0, r0, r0
     258:	00980000 	addseq	r0, r8, r0
     25c:	00b80000 	adcseq	r0, r8, r0
     260:	00010000 	andeq	r0, r1, r0
     264:	0000b858 	andeq	fp, r0, r8, asr r8
     268:	00013800 	andeq	r3, r1, r0, lsl #16
     26c:	75000800 	strvc	r0, [r0, #-2048]	; 0x800
     270:	75243200 	strvc	r3, [r4, #-512]!	; 0x200
     274:	009f2200 	addseq	r2, pc, r0, lsl #4
     278:	00000000 	andeq	r0, r0, r0
     27c:	a4000000 	strge	r0, [r0], #-0
     280:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
     284:	01000000 	mrseq	r0, (UNDEF: 0)
     288:	00b85800 	adcseq	r5, r8, r0, lsl #16
     28c:	01380000 	teqeq	r8, r0
     290:	00080000 	andeq	r0, r8, r0
     294:	24320075 	ldrtcs	r0, [r2], #-117	; 0x75
     298:	9f220075 	svcls	0x00220075
	...
     2a4:	000000a8 	andeq	r0, r0, r8, lsr #1
     2a8:	000000ac 	andeq	r0, r0, ip, lsr #1
     2ac:	00530001 	subseq	r0, r3, r1
     2b0:	00000000 	andeq	r0, r0, r0
     2b4:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
     2b8:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
     2bc:	01000000 	mrseq	r0, (UNDEF: 0)
     2c0:	00d85800 	sbcseq	r5, r8, r0, lsl #16
     2c4:	01380000 	teqeq	r8, r0
     2c8:	000a0000 	andeq	r0, sl, r0
     2cc:	24320075 	ldrtcs	r0, [r2], #-117	; 0x75
     2d0:	24310075 	ldrtcs	r0, [r1], #-117	; 0x75
     2d4:	00009f22 	andeq	r9, r0, r2, lsr #30
     2d8:	00000000 	andeq	r0, r0, r0
     2dc:	00c40000 	sbceq	r0, r4, r0
     2e0:	00d80000 	sbcseq	r0, r8, r0
     2e4:	00010000 	andeq	r0, r1, r0
     2e8:	0000d858 	andeq	sp, r0, r8, asr r8
     2ec:	00013800 	andeq	r3, r1, r0, lsl #16
     2f0:	75000a00 	strvc	r0, [r0, #-2560]	; 0xa00
     2f4:	75243200 	strvc	r3, [r4, #-512]!	; 0x200
     2f8:	22243100 	eorcs	r3, r4, #0, 2
     2fc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     300:	00000000 	andeq	r0, r0, r0
     304:	0000c800 	andeq	ip, r0, r0, lsl #16
     308:	0000cc00 	andeq	ip, r0, r0, lsl #24
     30c:	53000100 	movwpl	r0, #256	; 0x100
	...
     318:	000000d8 	ldrdeq	r0, [r0], -r8
     31c:	000000f8 	strdeq	r0, [r0], -r8
     320:	f8580001 			; <UNDEFINED> instruction: 0xf8580001
     324:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     328:	0d000001 	stceq	0, cr0, [r0, #-4]
     32c:	32007500 	andcc	r7, r0, #0, 10
     330:	31007524 	tstcc	r0, r4, lsr #10
     334:	00752224 	rsbseq	r2, r5, r4, lsr #4
     338:	00009f22 	andeq	r9, r0, r2, lsr #30
     33c:	00000000 	andeq	r0, r0, r0
     340:	00e40000 	rsceq	r0, r4, r0
     344:	00f80000 	rscseq	r0, r8, r0
     348:	00010000 	andeq	r0, r1, r0
     34c:	0000f858 	andeq	pc, r0, r8, asr r8	; <UNPREDICTABLE>
     350:	00013800 	andeq	r3, r1, r0, lsl #16
     354:	75000d00 	strvc	r0, [r0, #-3328]	; 0xd00
     358:	75243200 	strvc	r3, [r4, #-512]!	; 0x200
     35c:	22243100 	eorcs	r3, r4, #0, 2
     360:	9f220075 	svcls	0x00220075
	...
     36c:	000000e8 	andeq	r0, r0, r8, ror #1
     370:	000000ec 	andeq	r0, r0, ip, ror #1
     374:	00530001 	subseq	r0, r3, r1
     378:	00000000 	andeq	r0, r0, r0
     37c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
     380:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     384:	01000001 	tsteq	r0, r1
     388:	01185800 	tsteq	r8, r0, lsl #16
     38c:	01380000 	teqeq	r8, r0
     390:	00050000 	andeq	r0, r5, r0
     394:	24330075 	ldrtcs	r0, [r3], #-117	; 0x75
     398:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     39c:	00000000 	andeq	r0, r0, r0
     3a0:	00010400 	andeq	r0, r1, r0, lsl #8
     3a4:	00011800 	andeq	r1, r1, r0, lsl #16
     3a8:	58000100 	stmdapl	r0, {r8}
     3ac:	00000118 	andeq	r0, r0, r8, lsl r1
     3b0:	00000138 	andeq	r0, r0, r8, lsr r1
     3b4:	00750005 	rsbseq	r0, r5, r5
     3b8:	009f2433 	addseq	r2, pc, r3, lsr r4	; <UNPREDICTABLE>
     3bc:	00000000 	andeq	r0, r0, r0
     3c0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     3c4:	0c000001 	stceq	0, cr0, [r0], {1}
     3c8:	01000001 	tsteq	r0, r1
     3cc:	00005300 	andeq	r5, r0, r0, lsl #6
     3d0:	00000000 	andeq	r0, r0, r0
     3d4:	01180000 	tsteq	r8, r0
     3d8:	01200000 	teqeq	r0, r0
     3dc:	00060000 	andeq	r0, r6, r0
     3e0:	80080077 	andhi	r0, r8, r7, ror r0
     3e4:	01209f1a 	teqeq	r0, sl, lsl pc
     3e8:	01230000 	teqeq	r3, r0
     3ec:	00010000 	andeq	r0, r1, r0
     3f0:	00012351 	andeq	r2, r1, r1, asr r3
     3f4:	00015800 	andeq	r5, r1, r0, lsl #16
     3f8:	77000600 	strvc	r0, [r0, -r0, lsl #12]
     3fc:	1a800800 	bne	fe002404 <__bss_end__+0xfdff88b4>
     400:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     404:	00000000 	andeq	r0, r0, r0
     408:	00012800 	andeq	r2, r1, r0, lsl #16
     40c:	00012c00 	andeq	r2, r1, r0, lsl #24
     410:	53000100 	movwpl	r0, #256	; 0x100
	...
     41c:	00000148 	andeq	r0, r0, r8, asr #2
     420:	0000014c 	andeq	r0, r0, ip, asr #2
     424:	00530001 	subseq	r0, r3, r1
     428:	00000000 	andeq	r0, r0, r0
     42c:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     430:	6f000001 	svcvs	0x00000001
     434:	01000001 	tsteq	r0, r1
     438:	016f5000 	cmneq	pc, r0
     43c:	01d40000 	bicseq	r0, r4, r0
     440:	00010000 	andeq	r0, r1, r0
     444:	0001d459 	andeq	sp, r1, r9, asr r4
     448:	00031000 	andeq	r1, r3, r0
     44c:	f3000400 	vshl.u8	d0, d0, d0
     450:	109f5001 	addsne	r5, pc, r1
     454:	18000003 	stmdane	r0, {r0, r1}
     458:	01000003 	tsteq	r0, r3
     45c:	03185900 	tsteq	r8, #0, 18
     460:	03200000 	teqeq	r0, #0
     464:	00040000 	andeq	r0, r4, r0
     468:	9f5001f3 	svcls	0x005001f3
	...
     474:	00000158 	andeq	r0, r0, r8, asr r1
     478:	0000016f 	andeq	r0, r0, pc, ror #2
     47c:	6f510001 	svcvs	0x00510001
     480:	20000001 	andcs	r0, r0, r1
     484:	01000003 	tsteq	r0, r3
     488:	00005600 	andeq	r5, r0, r0, lsl #12
     48c:	00000000 	andeq	r0, r0, r0
     490:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
     494:	029c0000 	addseq	r0, ip, #0
     498:	00010000 	andeq	r0, r1, r0
     49c:	00000058 	andeq	r0, r0, r8, asr r0
     4a0:	00000000 	andeq	r0, r0, r0
     4a4:	0001b000 	andeq	fp, r1, r0
     4a8:	0002d400 	andeq	sp, r2, r0, lsl #8
     4ac:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     4b8:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
     4bc:	000002d4 	ldrdeq	r0, [r0], -r4
     4c0:	00740005 	rsbseq	r0, r4, r5
     4c4:	009f2531 	addseq	r2, pc, r1, lsr r5	; <UNPREDICTABLE>
     4c8:	00000000 	andeq	r0, r0, r0
     4cc:	b0000000 	andlt	r0, r0, r0
     4d0:	d4000001 	strle	r0, [r0], #-1
     4d4:	02000001 	andeq	r0, r0, #1
     4d8:	d49f3000 	ldrle	r3, [pc], #0	; 4e0 <_start-0x7b20>
     4dc:	10000001 	andne	r0, r0, r1
     4e0:	01000003 	tsteq	r0, r3
     4e4:	03185900 	tsteq	r8, #0, 18
     4e8:	03200000 	teqeq	r0, #0
     4ec:	00010000 	andeq	r0, r1, r0
     4f0:	00000059 	andeq	r0, r0, r9, asr r0
     4f4:	00000000 	andeq	r0, r0, r0
     4f8:	00016c00 	andeq	r6, r1, r0, lsl #24
     4fc:	00016f00 	andeq	r6, r1, r0, lsl #30
     500:	51000100 	mrspl	r0, (UNDEF: 16)
     504:	0000016f 	andeq	r0, r0, pc, ror #2
     508:	00000320 	andeq	r0, r0, r0, lsr #6
     50c:	00560001 	subseq	r0, r6, r1
     510:	00000000 	andeq	r0, r0, r0
     514:	74000000 	strvc	r0, [r0], #-0
     518:	b0000001 	andlt	r0, r0, r1
     51c:	01000001 	tsteq	r0, r1
     520:	03105400 	tsteq	r0, #0, 8
     524:	03180000 	tsteq	r8, #0
     528:	00010000 	andeq	r0, r1, r0
     52c:	00000054 	andeq	r0, r0, r4, asr r0
     530:	00000000 	andeq	r0, r0, r0
     534:	0001ac00 	andeq	sl, r1, r0, lsl #24
     538:	0001c800 	andeq	ip, r1, r0, lsl #16
     53c:	58000100 	stmdapl	r0, {r8}
	...
     548:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
     54c:	000001cf 	andeq	r0, r0, pc, asr #3
     550:	cf520001 	svcgt	0x00520001
     554:	d4000001 	strle	r0, [r0], #-1
     558:	08000002 	stmdaeq	r0, {r1}
     55c:	31007400 	tstcc	r0, r0, lsl #8
     560:	22007425 	andcs	r7, r0, #620756992	; 0x25000000
     564:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     568:	00000000 	andeq	r0, r0, r0
     56c:	0001b400 	andeq	fp, r1, r0, lsl #8
     570:	0001c800 	andeq	ip, r1, r0, lsl #16
     574:	58000100 	stmdapl	r0, {r8}
	...
     580:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     584:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     588:	00530001 	subseq	r0, r3, r1
     58c:	00000000 	andeq	r0, r0, r0
     590:	d4000000 	strle	r0, [r0], #-0
     594:	d4000001 	strle	r0, [r0], #-1
     598:	01000002 	tsteq	r0, r2
     59c:	00005400 	andeq	r5, r0, r0, lsl #8
     5a0:	00000000 	andeq	r0, r0, r0
     5a4:	01d40000 	bicseq	r0, r4, r0
     5a8:	01e80000 	mvneq	r0, r0
     5ac:	00010000 	andeq	r0, r1, r0
     5b0:	00000058 	andeq	r0, r0, r8, asr r0
     5b4:	00000000 	andeq	r0, r0, r0
     5b8:	0001d800 	andeq	sp, r1, r0, lsl #16
     5bc:	0001dc00 	andeq	sp, r1, r0, lsl #24
     5c0:	53000100 	movwpl	r0, #256	; 0x100
	...
     5cc:	000001f8 	strdeq	r0, [r0], -r8
     5d0:	000002d4 	ldrdeq	r0, [r0], -r4
     5d4:	00540001 	subseq	r0, r4, r1
     5d8:	00000000 	andeq	r0, r0, r0
     5dc:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
     5e0:	0c000001 	stceq	0, cr0, [r0], {1}
     5e4:	01000002 	tsteq	r0, r2
     5e8:	00005800 	andeq	r5, r0, r0, lsl #16
     5ec:	00000000 	andeq	r0, r0, r0
     5f0:	01fc0000 	mvnseq	r0, r0
     5f4:	02000000 	andeq	r0, r0, #0
     5f8:	00010000 	andeq	r0, r1, r0
     5fc:	00000053 	andeq	r0, r0, r3, asr r0
     600:	00000000 	andeq	r0, r0, r0
     604:	00021c00 	andeq	r1, r2, r0, lsl #24
     608:	0002d400 	andeq	sp, r2, r0, lsl #8
     60c:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     618:	0000021c 	andeq	r0, r0, ip, lsl r2
     61c:	00000230 	andeq	r0, r0, r0, lsr r2
     620:	00580001 	subseq	r0, r8, r1
     624:	00000000 	andeq	r0, r0, r0
     628:	20000000 	andcs	r0, r0, r0
     62c:	24000002 	strcs	r0, [r0], #-2
     630:	01000002 	tsteq	r0, r2
     634:	00005300 	andeq	r5, r0, r0, lsl #6
     638:	00000000 	andeq	r0, r0, r0
     63c:	02400000 	subeq	r0, r0, #0
     640:	02d40000 	sbcseq	r0, r4, #0
     644:	00010000 	andeq	r0, r1, r0
     648:	00000054 	andeq	r0, r0, r4, asr r0
     64c:	00000000 	andeq	r0, r0, r0
     650:	00024000 	andeq	r4, r2, r0
     654:	00025400 	andeq	r5, r2, r0, lsl #8
     658:	58000100 	stmdapl	r0, {r8}
	...
     664:	00000244 	andeq	r0, r0, r4, asr #4
     668:	00000248 	andeq	r0, r0, r8, asr #4
     66c:	00530001 	subseq	r0, r3, r1
     670:	00000000 	andeq	r0, r0, r0
     674:	64000000 	strvs	r0, [r0], #-0
     678:	d4000002 	strle	r0, [r0], #-2
     67c:	01000002 	tsteq	r0, r2
     680:	00005400 	andeq	r5, r0, r0, lsl #8
     684:	00000000 	andeq	r0, r0, r0
     688:	02640000 	rsbeq	r0, r4, #0
     68c:	02780000 	rsbseq	r0, r8, #0
     690:	00010000 	andeq	r0, r1, r0
     694:	00000058 	andeq	r0, r0, r8, asr r0
     698:	00000000 	andeq	r0, r0, r0
     69c:	00026800 	andeq	r6, r2, r0, lsl #16
     6a0:	00026c00 	andeq	r6, r2, r0, lsl #24
     6a4:	53000100 	movwpl	r0, #256	; 0x100
	...
     6b0:	00000288 	andeq	r0, r0, r8, lsl #5
     6b4:	000002d4 	ldrdeq	r0, [r0], -r4
     6b8:	00540001 	subseq	r0, r4, r1
     6bc:	00000000 	andeq	r0, r0, r0
     6c0:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
     6c4:	9c000002 	stcls	0, cr0, [r0], {2}
     6c8:	01000002 	tsteq	r0, r2
     6cc:	00005800 	andeq	r5, r0, r0, lsl #16
     6d0:	00000000 	andeq	r0, r0, r0
     6d4:	028c0000 	addeq	r0, ip, #0
     6d8:	02900000 	addseq	r0, r0, #0
     6dc:	00010000 	andeq	r0, r1, r0
     6e0:	00000053 	andeq	r0, r0, r3, asr r0
     6e4:	00000000 	andeq	r0, r0, r0
     6e8:	0002ac00 	andeq	sl, r2, r0, lsl #24
     6ec:	0002d400 	andeq	sp, r2, r0, lsl #8
     6f0:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     6fc:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
     700:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
     704:	00530001 	subseq	r0, r3, r1
     708:	00000000 	andeq	r0, r0, r0
     70c:	cc000000 	stcgt	0, cr0, [r0], {-0}
     710:	10000002 	andne	r0, r0, r2
     714:	02000003 	andeq	r0, r0, #3
     718:	189f3000 	ldmne	pc, {ip, sp}	; <UNPREDICTABLE>
     71c:	20000003 	andcs	r0, r0, r3
     720:	02000003 	andeq	r0, r0, #3
     724:	009f3000 	addseq	r3, pc, r0
     728:	00000000 	andeq	r0, r0, r0
     72c:	cc000000 	stcgt	0, cr0, [r0], {-0}
     730:	10000002 	andne	r0, r0, r2
     734:	01000003 	tsteq	r0, r3
     738:	03185500 	tsteq	r8, #0, 10
     73c:	03200000 	teqeq	r0, #0
     740:	00010000 	andeq	r0, r1, r0
     744:	00000055 	andeq	r0, r0, r5, asr r0
     748:	00000000 	andeq	r0, r0, r0
     74c:	0002d400 	andeq	sp, r2, r0, lsl #8
     750:	00031000 	andeq	r1, r3, r0
     754:	54000100 	strpl	r0, [r0], #-256	; 0x100
     758:	00000318 	andeq	r0, r0, r8, lsl r3
     75c:	00000320 	andeq	r0, r0, r0, lsr #6
     760:	00540001 	subseq	r0, r4, r1
     764:	00000000 	andeq	r0, r0, r0
     768:	20000000 	andcs	r0, r0, r0
     76c:	40000003 	andmi	r0, r0, r3
     770:	01000003 	tsteq	r0, r3
     774:	03405000 	movteq	r5, #0
     778:	03540000 	cmpeq	r4, #0
     77c:	00010000 	andeq	r0, r1, r0
     780:	00035458 	andeq	r5, r3, r8, asr r4
     784:	00036400 	andeq	r6, r3, r0, lsl #8
     788:	50000100 	andpl	r0, r0, r0, lsl #2
     78c:	00000364 	andeq	r0, r0, r4, ror #6
     790:	000003ac 	andeq	r0, r0, ip, lsr #7
     794:	00580001 	subseq	r0, r8, r1
     798:	00000000 	andeq	r0, r0, r0
     79c:	20000000 	andcs	r0, r0, r0
     7a0:	44000003 	strmi	r0, [r0], #-3
     7a4:	01000003 	tsteq	r0, r3
     7a8:	03445100 	movteq	r5, #16640	; 0x4100
     7ac:	03540000 	cmpeq	r4, #0
     7b0:	00010000 	andeq	r0, r1, r0
     7b4:	00035456 	andeq	r5, r3, r6, asr r4
     7b8:	00036400 	andeq	r6, r3, r0, lsl #8
     7bc:	51000100 	mrspl	r0, (UNDEF: 16)
     7c0:	00000364 	andeq	r0, r0, r4, ror #6
     7c4:	000003ac 	andeq	r0, r0, ip, lsr #7
     7c8:	00560001 	subseq	r0, r6, r1
     7cc:	00000000 	andeq	r0, r0, r0
     7d0:	20000000 	andcs	r0, r0, r0
     7d4:	48000003 	stmdami	r0, {r0, r1}
     7d8:	01000003 	tsteq	r0, r3
     7dc:	03485200 	movteq	r5, #33280	; 0x8200
     7e0:	03540000 	cmpeq	r4, #0
     7e4:	00040000 	andeq	r0, r4, r0
     7e8:	9f5201f3 	svcls	0x005201f3
     7ec:	00000354 	andeq	r0, r0, r4, asr r3
     7f0:	00000364 	andeq	r0, r0, r4, ror #6
     7f4:	64520001 	ldrbvs	r0, [r2], #-1
     7f8:	ac000003 	stcge	0, cr0, [r0], {3}
     7fc:	03000003 	movweq	r0, #3
     800:	9f017700 	svcls	0x00017700
	...
     80c:	00000320 	andeq	r0, r0, r0, lsr #6
     810:	0000034c 	andeq	r0, r0, ip, asr #6
     814:	4c530001 	mrrcmi	0, 0, r0, r3, cr1
     818:	54000003 	strpl	r0, [r0], #-3
     81c:	04000003 	streq	r0, [r0], #-3
     820:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
     824:	0003549f 	muleq	r3, pc, r4	; <UNPREDICTABLE>
     828:	00036400 	andeq	r6, r3, r0, lsl #8
     82c:	53000100 	movwpl	r0, #256	; 0x100
     830:	00000364 	andeq	r0, r0, r4, ror #6
     834:	000003ac 	andeq	r0, r0, ip, lsr #7
     838:	01f30004 	mvnseq	r0, r4
     83c:	00009f53 	andeq	r9, r0, r3, asr pc
     840:	00000000 	andeq	r0, r0, r0
     844:	035c0000 	cmpeq	ip, #0
     848:	03640000 	cmneq	r4, #0
     84c:	00020000 	andeq	r0, r2, r0
     850:	03649f30 	cmneq	r4, #48, 30	; 0xc0
     854:	03ac0000 			; <UNDEFINED> instruction: 0x03ac0000
     858:	00010000 	andeq	r0, r1, r0
     85c:	00000054 	andeq	r0, r0, r4, asr r0
     860:	00000000 	andeq	r0, r0, r0
     864:	00037400 	andeq	r7, r3, r0, lsl #8
     868:	00038400 	andeq	r8, r3, r0, lsl #8
     86c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     878:	000003ac 	andeq	r0, r0, ip, lsr #7
     87c:	000003c8 	andeq	r0, r0, r8, asr #7
     880:	c8500001 	ldmdagt	r0, {r0}^
     884:	dc000003 	stcle	0, cr0, [r0], {3}
     888:	01000003 	tsteq	r0, r3
     88c:	03dc5700 	bicseq	r5, ip, #0, 14
     890:	03ec0000 	mvneq	r0, #0
     894:	00010000 	andeq	r0, r1, r0
     898:	0003ec50 	andeq	lr, r3, r0, asr ip
     89c:	00042400 	andeq	r2, r4, r0, lsl #8
     8a0:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
     8ac:	000003ac 	andeq	r0, r0, ip, lsr #7
     8b0:	000003cc 	andeq	r0, r0, ip, asr #7
     8b4:	cc510001 	mrrcgt	0, 0, r0, r1, cr1
     8b8:	dc000003 	stcle	0, cr0, [r0], {3}
     8bc:	01000003 	tsteq	r0, r3
     8c0:	03dc5500 	bicseq	r5, ip, #0, 10
     8c4:	03ec0000 	mvneq	r0, #0
     8c8:	00010000 	andeq	r0, r1, r0
     8cc:	0003ec51 	andeq	lr, r3, r1, asr ip
     8d0:	00042400 	andeq	r2, r4, r0, lsl #8
     8d4:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
     8e0:	000003ac 	andeq	r0, r0, ip, lsr #7
     8e4:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     8e8:	d0520001 	subsle	r0, r2, r1
     8ec:	dc000003 	stcle	0, cr0, [r0], {3}
     8f0:	04000003 	streq	r0, [r0], #-3
     8f4:	5201f300 	andpl	pc, r1, #0, 6
     8f8:	0003dc9f 	muleq	r3, pc, ip	; <UNPREDICTABLE>
     8fc:	0003ec00 	andeq	lr, r3, r0, lsl #24
     900:	52000100 	andpl	r0, r0, #0, 2
     904:	000003ec 	andeq	r0, r0, ip, ror #7
     908:	00000424 	andeq	r0, r0, r4, lsr #8
     90c:	01760003 	cmneq	r6, r3
     910:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     914:	00000000 	andeq	r0, r0, r0
     918:	0003ac00 	andeq	sl, r3, r0, lsl #24
     91c:	0003d400 	andeq	sp, r3, r0, lsl #8
     920:	53000100 	movwpl	r0, #256	; 0x100
     924:	000003d4 	ldrdeq	r0, [r0], -r4
     928:	000003dc 	ldrdeq	r0, [r0], -ip
     92c:	dc580001 	mrrcle	0, 0, r0, r8, cr1
     930:	ec000003 	stc	0, cr0, [r0], {3}
     934:	01000003 	tsteq	r0, r3
     938:	03ec5300 	mvneq	r5, #0, 6
     93c:	04240000 	strteq	r0, [r4], #-0
     940:	00010000 	andeq	r0, r1, r0
     944:	00000058 	andeq	r0, r0, r8, asr r0
     948:	00000000 	andeq	r0, r0, r0
     94c:	0003e400 	andeq	lr, r3, r0, lsl #8
     950:	0003ec00 	andeq	lr, r3, r0, lsl #24
     954:	30000200 	andcc	r0, r0, r0, lsl #4
     958:	0003ec9f 	muleq	r3, pc, ip	; <UNPREDICTABLE>
     95c:	00042400 	andeq	r2, r4, r0, lsl #8
     960:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     96c:	00000424 	andeq	r0, r0, r4, lsr #8
     970:	00000443 	andeq	r0, r0, r3, asr #8
     974:	43510001 	cmpmi	r1, #1
     978:	d4000004 	strle	r0, [r0], #-4
     97c:	04000004 	streq	r0, [r0], #-4
     980:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     984:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     988:	00000000 	andeq	r0, r0, r0
     98c:	00042400 	andeq	r2, r4, r0, lsl #8
     990:	00044300 	andeq	r4, r4, r0, lsl #6
     994:	52000100 	andpl	r0, r0, #0, 2
     998:	00000443 	andeq	r0, r0, r3, asr #8
     99c:	000004d4 	ldrdeq	r0, [r0], -r4
     9a0:	01f30004 	mvnseq	r0, r4
     9a4:	00009f52 	andeq	r9, r0, r2, asr pc
     9a8:	00000000 	andeq	r0, r0, r0
     9ac:	04240000 	strteq	r0, [r4], #-0
     9b0:	04430000 	strbeq	r0, [r3], #-0
     9b4:	00010000 	andeq	r0, r1, r0
     9b8:	00044353 	andeq	r4, r4, r3, asr r3
     9bc:	0004d400 	andeq	sp, r4, r0, lsl #8
     9c0:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
     9cc:	00000458 	andeq	r0, r0, r8, asr r4
     9d0:	000004a0 	andeq	r0, r0, r0, lsr #9
     9d4:	a0520001 	subsge	r0, r2, r1
     9d8:	ac000004 	stcge	0, cr0, [r0], {4}
     9dc:	06000004 	streq	r0, [r0], -r4
     9e0:	76007500 	strvc	r7, [r0], -r0, lsl #10
     9e4:	ac9f1e00 	ldcge	14, cr1, [pc], {0}
     9e8:	d4000004 	strle	r0, [r0], #-4
     9ec:	01000004 	tsteq	r0, r4
     9f0:	00005200 	andeq	r5, r0, r0, lsl #4
     9f4:	00000000 	andeq	r0, r0, r0
     9f8:	04d40000 	ldrbeq	r0, [r4], #0
     9fc:	04df0000 	ldrbeq	r0, [pc], #0	; a04 <_start-0x75fc>
     a00:	00010000 	andeq	r0, r1, r0
     a04:	0004df50 	andeq	sp, r4, r0, asr pc
     a08:	00050c00 	andeq	r0, r5, r0, lsl #24
     a0c:	f3000400 	vshl.u8	d0, d0, d0
     a10:	009f5001 	addseq	r5, pc, r1
     a14:	00000000 	andeq	r0, r0, r0
     a18:	e0000000 	and	r0, r0, r0
     a1c:	ec000004 	stc	0, cr0, [r0], {4}
     a20:	01000004 	tsteq	r0, r4
     a24:	00005000 	andeq	r5, r0, r0
     a28:	00000000 	andeq	r0, r0, r0
     a2c:	050c0000 	streq	r0, [ip, #-0]
     a30:	051c0000 	ldreq	r0, [ip, #-0]
     a34:	00010000 	andeq	r0, r1, r0
     a38:	00051c50 	andeq	r1, r5, r0, asr ip
     a3c:	00053800 	andeq	r3, r5, r0, lsl #16
     a40:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
     a4c:	0000050c 	andeq	r0, r0, ip, lsl #10
     a50:	0000051c 	andeq	r0, r0, ip, lsl r5
     a54:	1c510001 	mrrcne	0, 0, r0, r1, cr1
     a58:	38000005 	stmdacc	r0, {r0, r2}
     a5c:	01000005 	tsteq	r0, r5
     a60:	00005400 	andeq	r5, r0, r0, lsl #8
     a64:	00000000 	andeq	r0, r0, r0
     a68:	05380000 	ldreq	r0, [r8, #-0]!
     a6c:	05540000 	ldrbeq	r0, [r4, #-0]
     a70:	00010000 	andeq	r0, r1, r0
     a74:	00055450 	andeq	r5, r5, r0, asr r4
     a78:	0005a000 	andeq	sl, r5, r0
     a7c:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     a80:	000005a0 	andeq	r0, r0, r0, lsr #11
     a84:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
     a88:	01f30004 	mvnseq	r0, r4
     a8c:	00009f50 	andeq	r9, r0, r0, asr pc
     a90:	00000000 	andeq	r0, r0, r0
     a94:	05640000 	strbeq	r0, [r4, #-0]!
     a98:	05740000 	ldrbeq	r0, [r4, #-0]!
     a9c:	00010000 	andeq	r0, r1, r0
     aa0:	00057450 	andeq	r7, r5, r0, asr r4
     aa4:	00058800 	andeq	r8, r5, r0, lsl #16
     aa8:	54000100 	strpl	r0, [r0], #-256	; 0x100
     aac:	00000588 	andeq	r0, r0, r8, lsl #11
     ab0:	0000058c 	andeq	r0, r0, ip, lsl #11
     ab4:	8c500001 	mrrchi	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     ab8:	a0000005 	andge	r0, r0, r5
     abc:	01000005 	tsteq	r0, r5
     ac0:	05a05400 	streq	r5, [r0, #1024]!	; 0x400
     ac4:	05b80000 	ldreq	r0, [r8, #0]!
     ac8:	00010000 	andeq	r0, r1, r0
     acc:	00000050 	andeq	r0, r0, r0, asr r0
     ad0:	00000000 	andeq	r0, r0, r0
     ad4:	0005b800 	andeq	fp, r5, r0, lsl #16
     ad8:	0005cb00 	andeq	ip, r5, r0, lsl #22
     adc:	50000100 	andpl	r0, r0, r0, lsl #2
     ae0:	000005cb 	andeq	r0, r0, fp, asr #11
     ae4:	00000600 	andeq	r0, r0, r0, lsl #12
     ae8:	01f30004 	mvnseq	r0, r4
     aec:	00009f50 	andeq	r9, r0, r0, asr pc
     af0:	00000000 	andeq	r0, r0, r0
     af4:	05b80000 	ldreq	r0, [r8, #0]!
     af8:	05cb0000 	strbeq	r0, [fp]
     afc:	00010000 	andeq	r0, r1, r0
     b00:	0005cb51 	andeq	ip, r5, r1, asr fp
     b04:	00060000 	andeq	r0, r6, r0
     b08:	f3000400 	vshl.u8	d0, d0, d0
     b0c:	009f5101 	addseq	r5, pc, r1, lsl #2
     b10:	00000000 	andeq	r0, r0, r0
     b14:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
     b18:	cb000005 	blgt	b34 <_start-0x74cc>
     b1c:	01000005 	tsteq	r0, r5
     b20:	05cb5200 	strbeq	r5, [fp, #512]	; 0x200
     b24:	06000000 	streq	r0, [r0], -r0
     b28:	00040000 	andeq	r0, r4, r0
     b2c:	9f5201f3 	svcls	0x005201f3
	...
     b38:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
     b3c:	000005cb 	andeq	r0, r0, fp, asr #11
     b40:	cb530001 	blgt	14c0b4c <__bss_end__+0x14b6ffc>
     b44:	00000005 	andeq	r0, r0, r5
     b48:	04000006 	streq	r0, [r0], #-6
     b4c:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
     b50:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     b54:	00000000 	andeq	r0, r0, r0
     b58:	0005cc00 	andeq	ip, r5, r0, lsl #24
     b5c:	0005d800 	andeq	sp, r5, r0, lsl #16
     b60:	50000100 	andpl	r0, r0, r0, lsl #2
     b64:	000005ec 	andeq	r0, r0, ip, ror #11
     b68:	00000600 	andeq	r0, r0, r0, lsl #12
     b6c:	00500001 	subseq	r0, r0, r1
     b70:	00000000 	andeq	r0, r0, r0
     b74:	2c000000 	stccs	0, cr0, [r0], {-0}
     b78:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     b7c:	01000000 	mrseq	r0, (UNDEF: 0)
     b80:	00385000 	eorseq	r5, r8, r0
     b84:	00480000 	subeq	r0, r8, r0
     b88:	00010000 	andeq	r0, r1, r0
     b8c:	00004855 	andeq	r4, r0, r5, asr r8
     b90:	00005800 	andeq	r5, r0, r0, lsl #16
     b94:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     ba4:	00000010 	andeq	r0, r0, r0, lsl r0
     ba8:	10500001 	subsne	r0, r0, r1
     bac:	34000000 	strcc	r0, [r0], #-0
     bb0:	01000000 	mrseq	r0, (UNDEF: 0)
     bb4:	00005400 	andeq	r5, r0, r0, lsl #8
	...
     bc0:	001c0000 	andseq	r0, ip, r0
     bc4:	00010000 	andeq	r0, r1, r0
     bc8:	00001c50 	andeq	r1, r0, r0, asr ip
     bcc:	00002000 	andeq	r2, r0, r0
     bd0:	f3000400 	vshl.u8	d0, d0, d0
     bd4:	009f5001 	addseq	r5, pc, r1
	...
     be0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     be4:	02000000 	andeq	r0, r0, #0
     be8:	089f3000 	ldmeq	pc, {ip, sp}	; <UNPREDICTABLE>
     bec:	20000000 	andcs	r0, r0, r0
     bf0:	01000000 	mrseq	r0, (UNDEF: 0)
     bf4:	00005300 	andeq	r5, r0, r0, lsl #6
	...
     c00:	00040000 	andeq	r0, r4, r0
     c04:	00010000 	andeq	r0, r1, r0
     c08:	00000450 	andeq	r0, r0, r0, asr r4
     c0c:	00000c00 	andeq	r0, r0, r0, lsl #24
     c10:	70000300 	andvc	r0, r0, r0, lsl #6
     c14:	000c9f30 	andeq	r9, ip, r0, lsr pc
     c18:	00140000 	andseq	r0, r4, r0
     c1c:	00040000 	andeq	r0, r4, r0
     c20:	9f5001f3 	svcls	0x005001f3
	...
     c2c:	00000014 	andeq	r0, r0, r4, lsl r0
     c30:	00000020 	andeq	r0, r0, r0, lsr #32
     c34:	20500001 	subscs	r0, r0, r1
     c38:	2c000000 	stccs	0, cr0, [r0], {-0}
     c3c:	03000000 	movweq	r0, #0
     c40:	9f017000 	svcls	0x00017000
     c44:	0000002c 	andeq	r0, r0, ip, lsr #32
     c48:	00000040 	andeq	r0, r0, r0, asr #32
     c4c:	00500001 	subseq	r0, r0, r1
     c50:	00000000 	andeq	r0, r0, r0
     c54:	14000000 	strne	r0, [r0], #-0
     c58:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     c5c:	01000000 	mrseq	r0, (UNDEF: 0)
     c60:	00185100 	andseq	r5, r8, r0, lsl #2
     c64:	00400000 	subeq	r0, r0, r0
     c68:	00040000 	andeq	r0, r4, r0
     c6c:	9f5101f3 	svcls	0x005101f3
	...
     c78:	00000040 	andeq	r0, r0, r0, asr #32
     c7c:	00000060 	andeq	r0, r0, r0, rrx
     c80:	60500001 	subsvs	r0, r0, r1
     c84:	6c000000 	stcvs	0, cr0, [r0], {-0}
     c88:	03000000 	movweq	r0, #0
     c8c:	9f017100 	svcls	0x00017100
     c90:	0000006c 	andeq	r0, r0, ip, rrx
     c94:	00000074 	andeq	r0, r0, r4, ror r0
     c98:	74510001 	ldrbvc	r0, [r1], #-1
     c9c:	80000000 	andhi	r0, r0, r0
     ca0:	03000000 	movweq	r0, #0
     ca4:	9f017100 	svcls	0x00017100
	...
     cb0:	00000040 	andeq	r0, r0, r0, asr #32
     cb4:	00000050 	andeq	r0, r0, r0, asr r0
     cb8:	50510001 	subspl	r0, r1, r1
     cbc:	80000000 	andhi	r0, r0, r0
     cc0:	04000000 	streq	r0, [r0], #-0
     cc4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     cc8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     ccc:	00000000 	andeq	r0, r0, r0
     cd0:	00004000 	andeq	r4, r0, r0
     cd4:	00005800 	andeq	r5, r0, r0, lsl #16
     cd8:	52000100 	andpl	r0, r0, #0, 2
     cdc:	00000058 	andeq	r0, r0, r8, asr r0
     ce0:	00000064 	andeq	r0, r0, r4, rrx
     ce4:	64520001 	ldrbvs	r0, [r2], #-1
     ce8:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     cec:	03000000 	movweq	r0, #0
     cf0:	9f017200 	svcls	0x00017200
     cf4:	00000068 	andeq	r0, r0, r8, rrx
     cf8:	00000080 	andeq	r0, r0, r0, lsl #1
     cfc:	00520001 	subseq	r0, r2, r1
     d00:	00000000 	andeq	r0, r0, r0
     d04:	40000000 	andmi	r0, r0, r0
     d08:	54000000 	strpl	r0, [r0], #-0
     d0c:	01000000 	mrseq	r0, (UNDEF: 0)
     d10:	00545300 	subseq	r5, r4, r0, lsl #6
     d14:	00780000 	rsbseq	r0, r8, r0
     d18:	00010000 	andeq	r0, r1, r0
     d1c:	00000053 	andeq	r0, r0, r3, asr r0
     d20:	00000000 	andeq	r0, r0, r0
     d24:	00004800 	andeq	r4, r0, r0, lsl #16
     d28:	00006000 	andeq	r6, r0, r0
     d2c:	5c000100 	stfpls	f0, [r0], {-0}
     d30:	00000060 	andeq	r0, r0, r0, rrx
     d34:	00000080 	andeq	r0, r0, r0, lsl #1
     d38:	01f3000a 	mvnseq	r0, sl
     d3c:	5301f352 	movwpl	pc, #4946	; 0x1352	; <UNPREDICTABLE>
     d40:	9f01231c 	svcls	0x0001231c
	...
     d4c:	00000080 	andeq	r0, r0, r0, lsl #1
     d50:	000000a4 	andeq	r0, r0, r4, lsr #1
     d54:	a4500001 	ldrbge	r0, [r0], #-1
     d58:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     d5c:	03000001 	movweq	r0, #1
     d60:	9f027000 	svcls	0x00027000
     d64:	00000118 	andeq	r0, r0, r8, lsl r1
     d68:	00000218 	andeq	r0, r0, r8, lsl r2
     d6c:	01f30004 	mvnseq	r0, r4
     d70:	00009f50 	andeq	r9, r0, r0, asr pc
     d74:	00000000 	andeq	r0, r0, r0
     d78:	00800000 	addeq	r0, r0, r0
     d7c:	00f00000 	rscseq	r0, r0, r0
     d80:	00010000 	andeq	r0, r1, r0
     d84:	0000f051 	andeq	pc, r0, r1, asr r0	; <UNPREDICTABLE>
     d88:	00016000 	andeq	r6, r1, r0
     d8c:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     d90:	00000160 	andeq	r0, r0, r0, ror #2
     d94:	00000168 	andeq	r0, r0, r8, ror #2
     d98:	68510001 	ldmdavs	r1, {r0}^
     d9c:	88000001 	stmdahi	r0, {r0}
     da0:	01000001 	tsteq	r0, r1
     da4:	01885500 	orreq	r5, r8, r0, lsl #10
     da8:	019c0000 	orrseq	r0, ip, r0
     dac:	00010000 	andeq	r0, r1, r0
     db0:	00019c51 	andeq	r9, r1, r1, asr ip
     db4:	0001bc00 	andeq	fp, r1, r0, lsl #24
     db8:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     dbc:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     dc0:	000001c4 	andeq	r0, r0, r4, asr #3
     dc4:	c4510001 	ldrbgt	r0, [r1], #-1
     dc8:	fc000001 	stc2	0, cr0, [r0], {1}
     dcc:	01000001 	tsteq	r0, r1
     dd0:	01fc5500 	mvnseq	r5, r0, lsl #10
     dd4:	02180000 	andseq	r0, r8, #0
     dd8:	00040000 	andeq	r0, r4, r0
     ddc:	9f5101f3 	svcls	0x005101f3
	...
     de8:	00000080 	andeq	r0, r0, r0, lsl #1
     dec:	00000094 	muleq	r0, r4, r0
     df0:	94520001 	ldrbls	r0, [r2], #-1
     df4:	fc000000 	stc2	0, cr0, [r0], {-0}
     df8:	01000001 	tsteq	r0, r1
     dfc:	01fc5400 	mvnseq	r5, r0, lsl #8
     e00:	02180000 	andseq	r0, r8, #0
     e04:	00040000 	andeq	r0, r4, r0
     e08:	9f5201f3 	svcls	0x005201f3
	...
     e14:	00000080 	andeq	r0, r0, r0, lsl #1
     e18:	00000100 	andeq	r0, r0, r0, lsl #2
     e1c:	04530001 	ldrbeq	r0, [r3], #-1
     e20:	08000001 	stmdaeq	r0, {r0}
     e24:	01000001 	tsteq	r0, r1
     e28:	01605300 	cmneq	r0, r0, lsl #6
     e2c:	01680000 	cmneq	r8, r0
     e30:	00010000 	andeq	r0, r1, r0
     e34:	00016853 	andeq	r6, r1, r3, asr r8
     e38:	00018800 	andeq	r8, r1, r0, lsl #16
     e3c:	f3000400 	vshl.u8	d0, d0, d0
     e40:	889f5301 	ldmhi	pc, {r0, r8, r9, ip, lr}	; <UNPREDICTABLE>
     e44:	90000001 	andls	r0, r0, r1
     e48:	01000001 	tsteq	r0, r1
     e4c:	01905300 	orrseq	r5, r0, r0, lsl #6
     e50:	01940000 	orrseq	r0, r4, r0
     e54:	00010000 	andeq	r0, r1, r0
     e58:	0001945c 	andeq	r9, r1, ip, asr r4
     e5c:	00019c00 	andeq	r9, r1, r0, lsl #24
     e60:	53000100 	movwpl	r0, #256	; 0x100
     e64:	0000019c 	muleq	r0, ip, r1
     e68:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     e6c:	01f30004 	mvnseq	r0, r4
     e70:	01bc9f53 			; <UNDEFINED> instruction: 0x01bc9f53
     e74:	01cc0000 	biceq	r0, ip, r0
     e78:	00010000 	andeq	r0, r1, r0
     e7c:	0001cc53 	andeq	ip, r1, r3, asr ip
     e80:	0001cf00 	andeq	ip, r1, r0, lsl #30
     e84:	5c000100 	stfpls	f0, [r0], {-0}
     e88:	000001cf 	andeq	r0, r0, pc, asr #3
     e8c:	000001d4 	ldrdeq	r0, [r0], -r4
     e90:	01f30004 	mvnseq	r0, r4
     e94:	00009f53 	andeq	r9, r0, r3, asr pc
     e98:	00000000 	andeq	r0, r0, r0
     e9c:	00800000 	addeq	r0, r0, r0
     ea0:	009c0000 	addseq	r0, ip, r0
     ea4:	00020000 	andeq	r0, r2, r0
     ea8:	009c0091 	umullseq	r0, ip, r1, r0
     eac:	01c80000 	biceq	r0, r8, r0
     eb0:	00010000 	andeq	r0, r1, r0
     eb4:	0001d452 	andeq	sp, r1, r2, asr r4
     eb8:	0001df00 	andeq	sp, r1, r0, lsl #30
     ebc:	52000100 	andpl	r0, r0, #0, 2
	...
     ec8:	0000009c 	muleq	r0, ip, r0
     ecc:	00000118 	andeq	r0, r0, r8, lsl r1
     ed0:	185d0001 	ldmdane	sp, {r0}^
     ed4:	1c000001 	stcne	0, cr0, [r0], {1}
     ed8:	01000001 	tsteq	r0, r1
     edc:	011c5300 	tsteq	ip, r0, lsl #6
     ee0:	01200000 	teqeq	r0, r0
     ee4:	00010000 	andeq	r0, r1, r0
     ee8:	00012051 	andeq	r2, r1, r1, asr r0
     eec:	00016000 	andeq	r6, r1, r0
     ef0:	53000100 	movwpl	r0, #256	; 0x100
     ef4:	00000160 	andeq	r0, r0, r0, ror #2
     ef8:	00000168 	andeq	r0, r0, r8, ror #2
     efc:	685d0001 	ldmdavs	sp, {r0}^
     f00:	6c000001 	stcvs	0, cr0, [r0], {1}
     f04:	01000001 	tsteq	r0, r1
     f08:	016c5e00 	cmneq	ip, r0, lsl #28
     f0c:	01880000 	orreq	r0, r8, r0
     f10:	00010000 	andeq	r0, r1, r0
     f14:	00018853 	andeq	r8, r1, r3, asr r8
     f18:	00019000 	andeq	r9, r1, r0
     f1c:	91000400 	tstls	r0, r0, lsl #8
     f20:	909f7fa1 	addsls	r7, pc, r1, lsr #31
     f24:	94000001 	strls	r0, [r0], #-1
     f28:	01000001 	tsteq	r0, r1
     f2c:	01945300 	orrseq	r5, r4, r0, lsl #6
     f30:	019c0000 	orrseq	r0, ip, r0
     f34:	00010000 	andeq	r0, r1, r0
     f38:	00019c5d 	andeq	r9, r1, sp, asr ip
     f3c:	0001a000 	andeq	sl, r1, r0
     f40:	5e000100 	adfpls	f0, f0, f0
     f44:	000001a0 	andeq	r0, r0, r0, lsr #3
     f48:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     f4c:	bc530001 	mrrclt	0, 0, r0, r3, cr1
     f50:	d4000001 	strle	r0, [r0], #-1
     f54:	01000001 	tsteq	r0, r1
     f58:	01d45d00 	bicseq	r5, r4, r0, lsl #26
     f5c:	01df0000 	bicseq	r0, pc, r0
     f60:	00010000 	andeq	r0, r1, r0
     f64:	00000053 	andeq	r0, r0, r3, asr r0
     f68:	00000000 	andeq	r0, r0, r0
     f6c:	0000a000 	andeq	sl, r0, r0
     f70:	0000ec00 	andeq	lr, r0, r0, lsl #24
     f74:	5c000100 	stfpls	f0, [r0], {-0}
     f78:	000000ec 	andeq	r0, r0, ip, ror #1
     f7c:	00000100 	andeq	r0, r0, r0, lsl #2
     f80:	00530001 	subseq	r0, r3, r1
     f84:	04000001 	streq	r0, [r0], #-1
     f88:	01000001 	tsteq	r0, r1
     f8c:	01045c00 	tsteq	r4, r0, lsl #24
     f90:	01080000 	mrseq	r0, (UNDEF: 8)
     f94:	00010000 	andeq	r0, r1, r0
     f98:	00010853 	andeq	r0, r1, r3, asr r8
     f9c:	00011800 	andeq	r1, r1, r0, lsl #16
     fa0:	5c000100 	stfpls	f0, [r0], {-0}
     fa4:	00000118 	andeq	r0, r0, r8, lsl r1
     fa8:	0000011c 	andeq	r0, r0, ip, lsl r1
     fac:	1c500001 	mrrcne	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     fb0:	3c000001 	stccc	0, cr0, [r0], {1}
     fb4:	01000001 	tsteq	r0, r1
     fb8:	01445c00 	cmpeq	r4, r0, lsl #24
     fbc:	01580000 	cmpeq	r8, r0
     fc0:	00010000 	andeq	r0, r1, r0
     fc4:	00015850 	andeq	r5, r1, r0, asr r8
     fc8:	00016000 	andeq	r6, r1, r0
     fcc:	5c000100 	stfpls	f0, [r0], {-0}
     fd0:	00000160 	andeq	r0, r0, r0, ror #2
     fd4:	00000168 	andeq	r0, r0, r8, ror #2
     fd8:	68530001 	ldmdavs	r3, {r0}^
     fdc:	78000001 	stmdavc	r0, {r0}
     fe0:	01000001 	tsteq	r0, r1
     fe4:	01785c00 	cmneq	r8, r0, lsl #24
     fe8:	01800000 	orreq	r0, r0, r0
     fec:	00050000 	andeq	r0, r5, r0
     ff0:	2534007c 	ldrcs	r0, [r4, #-124]!	; 0x7c
     ff4:	0001809f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
     ff8:	00018800 	andeq	r8, r1, r0, lsl #16
     ffc:	5c000100 	stfpls	f0, [r0], {-0}
    1000:	00000188 	andeq	r0, r0, r8, lsl #3
    1004:	00000190 	muleq	r0, r0, r1
    1008:	90530001 	subsls	r0, r3, r1
    100c:	94000001 	strls	r0, [r0], #-1
    1010:	01000001 	tsteq	r0, r1
    1014:	01945c00 	orrseq	r5, r4, r0, lsl #24
    1018:	019c0000 	orrseq	r0, ip, r0
    101c:	00010000 	andeq	r0, r1, r0
    1020:	00019c53 	andeq	r9, r1, r3, asr ip
    1024:	0001ac00 	andeq	sl, r1, r0, lsl #24
    1028:	5c000100 	stfpls	f0, [r0], {-0}
    102c:	000001ac 	andeq	r0, r0, ip, lsr #3
    1030:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
    1034:	007c0005 	rsbseq	r0, ip, r5
    1038:	b49f2531 	ldrlt	r2, [pc], #1329	; 1040 <_start-0x6fc0>
    103c:	bc000001 	stclt	0, cr0, [r0], {1}
    1040:	01000001 	tsteq	r0, r1
    1044:	01bc5c00 			; <UNDEFINED> instruction: 0x01bc5c00
    1048:	01cc0000 	biceq	r0, ip, r0
    104c:	00010000 	andeq	r0, r1, r0
    1050:	0001cc53 	andeq	ip, r1, r3, asr ip
    1054:	0001cf00 	andeq	ip, r1, r0, lsl #30
    1058:	5c000100 	stfpls	f0, [r0], {-0}
    105c:	000001cf 	andeq	r0, r0, pc, asr #3
    1060:	000001d4 	ldrdeq	r0, [r0], -r4
    1064:	01f30004 	mvnseq	r0, r4
    1068:	01d49f53 	bicseq	r9, r4, r3, asr pc
    106c:	01df0000 	bicseq	r0, pc, r0
    1070:	00010000 	andeq	r0, r1, r0
    1074:	0000005c 	andeq	r0, r0, ip, asr r0
    1078:	00000000 	andeq	r0, r0, r0
    107c:	0000ec00 	andeq	lr, r0, r0, lsl #24
    1080:	0000fc00 	andeq	pc, r0, r0, lsl #24
    1084:	30000200 	andcc	r0, r0, r0, lsl #4
    1088:	0000fc9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    108c:	00010400 	andeq	r0, r1, r0, lsl #8
    1090:	31000200 	mrscc	r0, R8_usr
    1094:	0001049f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
    1098:	00010800 	andeq	r0, r1, r0, lsl #16
    109c:	30000200 	andcc	r0, r0, r0, lsl #4
    10a0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    10a4:	00000000 	andeq	r0, r0, r0
    10a8:	00021800 	andeq	r1, r2, r0, lsl #16
    10ac:	00022800 	andeq	r2, r2, r0, lsl #16
    10b0:	50000100 	andpl	r0, r0, r0, lsl #2
    10b4:	00000228 	andeq	r0, r0, r8, lsr #4
    10b8:	0000023c 	andeq	r0, r0, ip, lsr r2
    10bc:	01f30004 	mvnseq	r0, r4
    10c0:	023c9f50 	eorseq	r9, ip, #80, 30	; 0x140
    10c4:	02680000 	rsbeq	r0, r8, #0
    10c8:	00010000 	andeq	r0, r1, r0
    10cc:	00000050 	andeq	r0, r0, r0, asr r0
    10d0:	00000000 	andeq	r0, r0, r0
    10d4:	00021800 	andeq	r1, r2, r0, lsl #16
    10d8:	00022c00 	andeq	r2, r2, r0, lsl #24
    10dc:	51000100 	mrspl	r0, (UNDEF: 16)
    10e0:	0000022c 	andeq	r0, r0, ip, lsr #4
    10e4:	0000023c 	andeq	r0, r0, ip, lsr r2
    10e8:	01f30004 	mvnseq	r0, r4
    10ec:	023c9f51 	eorseq	r9, ip, #324	; 0x144
    10f0:	02680000 	rsbeq	r0, r8, #0
    10f4:	00010000 	andeq	r0, r1, r0
    10f8:	00000051 	andeq	r0, r0, r1, asr r0
    10fc:	00000000 	andeq	r0, r0, r0
    1100:	00026800 	andeq	r6, r2, r0, lsl #16
    1104:	00029000 	andeq	r9, r2, r0
    1108:	50000100 	andpl	r0, r0, r0, lsl #2
    110c:	00000290 	muleq	r0, r0, r2
    1110:	000004dc 	ldrdeq	r0, [r0], -ip
    1114:	dc5b0001 	mrrcle	0, 0, r0, fp, cr1
    1118:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
    111c:	04000004 	streq	r0, [r0], #-4
    1120:	5001f300 	andpl	pc, r1, r0, lsl #6
    1124:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1128:	00000000 	andeq	r0, r0, r0
    112c:	00026800 	andeq	r6, r2, r0, lsl #16
    1130:	00027c00 	andeq	r7, r2, r0, lsl #24
    1134:	51000100 	mrspl	r0, (UNDEF: 16)
    1138:	0000027c 	andeq	r0, r0, ip, ror r2
    113c:	00000290 	muleq	r0, r0, r2
    1140:	01710003 	cmneq	r1, r3
    1144:	0002909f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
    1148:	0004f000 	andeq	pc, r4, r0
    114c:	f3000400 	vshl.u8	d0, d0, d0
    1150:	009f5101 	addseq	r5, pc, r1, lsl #2
    1154:	00000000 	andeq	r0, r0, r0
    1158:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    115c:	98000002 	stmdals	r0, {r1}
    1160:	01000002 	tsteq	r0, r2
    1164:	02985200 	addseq	r5, r8, #0, 4
    1168:	02c00000 	sbceq	r0, r0, #0
    116c:	00010000 	andeq	r0, r1, r0
    1170:	0002c052 	andeq	ip, r2, r2, asr r0
    1174:	00048c00 	andeq	r8, r4, r0, lsl #24
    1178:	56000100 	strpl	r0, [r0], -r0, lsl #2
    117c:	0000048c 	andeq	r0, r0, ip, lsl #9
    1180:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1184:	00520001 	subseq	r0, r2, r1
    1188:	00000000 	andeq	r0, r0, r0
    118c:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    1190:	84000002 	strhi	r0, [r0], #-2
    1194:	01000002 	tsteq	r0, r2
    1198:	00005300 	andeq	r5, r0, r0, lsl #6
    119c:	00000000 	andeq	r0, r0, r0
    11a0:	02780000 	rsbseq	r0, r8, #0
    11a4:	02900000 	addseq	r0, r0, #0
    11a8:	00010000 	andeq	r0, r1, r0
    11ac:	00029050 	andeq	r9, r2, r0, asr r0
    11b0:	00029400 	andeq	r9, r2, r0, lsl #8
    11b4:	54000100 	strpl	r0, [r0], #-256	; 0x100
    11b8:	00000294 	muleq	r0, r4, r2
    11bc:	000002a0 	andeq	r0, r0, r0, lsr #5
    11c0:	01740003 	cmneq	r4, r3
    11c4:	0002a09f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
    11c8:	0002ac00 	andeq	sl, r2, r0, lsl #24
    11cc:	54000100 	strpl	r0, [r0], #-256	; 0x100
    11d0:	000002ac 	andeq	r0, r0, ip, lsr #5
    11d4:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    11d8:	01740003 	cmneq	r4, r3
    11dc:	0002b89f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
    11e0:	00049000 	andeq	r9, r4, r0
    11e4:	54000100 	strpl	r0, [r0], #-256	; 0x100
    11e8:	00000490 	muleq	r0, r0, r4
    11ec:	0000049c 	muleq	r0, ip, r4
    11f0:	01740003 	cmneq	r4, r3
    11f4:	00049c9f 	muleq	r4, pc, ip	; <UNPREDICTABLE>
    11f8:	0004c800 	andeq	ip, r4, r0, lsl #16
    11fc:	54000100 	strpl	r0, [r0], #-256	; 0x100
    1200:	000004c8 	andeq	r0, r0, r8, asr #9
    1204:	000004d4 	ldrdeq	r0, [r0], -r4
    1208:	d4500001 	ldrble	r0, [r0], #-1
    120c:	dc000004 	stcle	0, cr0, [r0], {4}
    1210:	03000004 	movweq	r0, #4
    1214:	9f017400 	svcls	0x00017400
	...
    1220:	00000280 	andeq	r0, r0, r0, lsl #5
    1224:	000004dc 	ldrdeq	r0, [r0], -ip
    1228:	dc580001 	mrrcle	0, 0, r0, r8, cr1
    122c:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
    1230:	0a000004 	beq	1248 <_start-0x6db8>
    1234:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1238:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    123c:	009f1c31 	addseq	r1, pc, r1, lsr ip	; <UNPREDICTABLE>
    1240:	00000000 	andeq	r0, r0, r0
    1244:	bc000000 	stclt	0, cr0, [r0], {-0}
    1248:	c0000003 	andgt	r0, r0, r3
    124c:	01000003 	tsteq	r0, r3
    1250:	03e45000 	mvneq	r5, #0
    1254:	03e80000 	mvneq	r0, #0
    1258:	00010000 	andeq	r0, r1, r0
    125c:	00040c50 	andeq	r0, r4, r0, asr ip
    1260:	00041000 	andeq	r1, r4, r0
    1264:	50000100 	andpl	r0, r0, r0, lsl #2
    1268:	00000434 	andeq	r0, r0, r4, lsr r4
    126c:	00000438 	andeq	r0, r0, r8, lsr r4
    1270:	40500001 	subsmi	r0, r0, r1
    1274:	44000004 	strmi	r0, [r0], #-4
    1278:	01000004 	tsteq	r0, r4
    127c:	04685000 	strbteq	r5, [r8], #-0
    1280:	046c0000 	strbteq	r0, [ip], #-0
    1284:	00010000 	andeq	r0, r1, r0
    1288:	00048850 	andeq	r8, r4, r0, asr r8
    128c:	0004b000 	andeq	fp, r4, r0
    1290:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    129c:	000002c0 	andeq	r0, r0, r0, asr #5
    12a0:	000002c8 	andeq	r0, r0, r8, asr #5
    12a4:	9f300002 	svcls	0x00300002
    12a8:	000002c8 	andeq	r0, r0, r8, asr #5
    12ac:	000002cc 	andeq	r0, r0, ip, asr #5
    12b0:	d8570001 	ldmdale	r7, {r0}^
    12b4:	b0000002 	andlt	r0, r0, r2
    12b8:	01000004 	tsteq	r0, r4
    12bc:	00005700 	andeq	r5, r0, r0, lsl #14
    12c0:	00000000 	andeq	r0, r0, r0
    12c4:	00040000 	andeq	r0, r4, r0
    12c8:	00080000 	andeq	r0, r8, r0
    12cc:	00070000 	andeq	r0, r7, r0
    12d0:	000a0073 	andeq	r0, sl, r3, ror r0
    12d4:	089f2110 	ldmeq	pc, {r4, r8, sp}	; <UNPREDICTABLE>
    12d8:	10000000 	andne	r0, r0, r0
    12dc:	01000000 	mrseq	r0, (UNDEF: 0)
    12e0:	00005300 	andeq	r5, r0, r0, lsl #6
    12e4:	00000000 	andeq	r0, r0, r0
    12e8:	00140000 	andseq	r0, r4, r0
    12ec:	00180000 	andseq	r0, r8, r0
    12f0:	00070000 	andeq	r0, r7, r0
    12f4:	ff0b0073 			; <UNDEFINED> instruction: 0xff0b0073
    12f8:	189f1aef 	ldmne	pc, {r0, r1, r2, r3, r5, r6, r7, r9, fp, ip}	; <UNPREDICTABLE>
    12fc:	20000000 	andcs	r0, r0, r0
    1300:	01000000 	mrseq	r0, (UNDEF: 0)
    1304:	00005300 	andeq	r5, r0, r0, lsl #6
    1308:	00000000 	andeq	r0, r0, r0
    130c:	00140000 	andseq	r0, r4, r0
    1310:	001c0000 	andseq	r0, ip, r0
    1314:	00030000 	andeq	r0, r3, r0
    1318:	1c9f0473 	cfldrsne	mvf0, [pc], {115}	; 0x73
    131c:	27000000 	strcs	r0, [r0, -r0]
    1320:	01000000 	mrseq	r0, (UNDEF: 0)
    1324:	00005300 	andeq	r5, r0, r0, lsl #6
    1328:	00000000 	andeq	r0, r0, r0
    132c:	8d400000 	stclhi	0, cr0, [r0, #-0]
    1330:	8d440000 	stclhi	0, cr0, [r4, #-0]
    1334:	00020000 	andeq	r0, r2, r0
    1338:	8d449f30 	stclhi	15, cr9, [r4, #-192]	; 0xffffff40
    133c:	8d480000 	stclhi	0, cr0, [r8, #-0]
    1340:	00010000 	andeq	r0, r1, r0
    1344:	00000050 	andeq	r0, r0, r0, asr r0
    1348:	00000000 	andeq	r0, r0, r0
    134c:	008d5800 	addeq	r5, sp, r0, lsl #16
    1350:	008d5c00 	addeq	r5, sp, r0, lsl #24
    1354:	30000200 	andcc	r0, r0, r0, lsl #4
    1358:	008d5c9f 	umulleq	r5, sp, pc, ip	; <UNPREDICTABLE>
    135c:	008d6000 	addeq	r6, sp, r0
    1360:	53000100 	movwpl	r0, #256	; 0x100
    1364:	00008d64 	andeq	r8, r0, r4, ror #26
    1368:	00008d6c 	andeq	r8, r0, ip, ror #26
    136c:	00530001 	subseq	r0, r3, r1
	...
    1378:	04000000 	streq	r0, [r0], #-0
    137c:	01000000 	mrseq	r0, (UNDEF: 0)
    1380:	00045000 	andeq	r5, r4, r0
    1384:	000c0000 	andeq	r0, ip, r0
    1388:	00010000 	andeq	r0, r1, r0
    138c:	00000c53 	andeq	r0, r0, r3, asr ip
    1390:	00001000 	andeq	r1, r0, r0
    1394:	50000100 	andpl	r0, r0, r0, lsl #2
    1398:	00000010 	andeq	r0, r0, r0, lsl r0
    139c:	0000001c 	andeq	r0, r0, ip, lsl r0
    13a0:	00530001 	subseq	r0, r3, r1
    13a4:	00000000 	andeq	r0, r0, r0
    13a8:	40000000 	andmi	r0, r0, r0
    13ac:	43000000 	movwmi	r0, #0
    13b0:	01000000 	mrseq	r0, (UNDEF: 0)
    13b4:	00435000 	subeq	r5, r3, r0
    13b8:	004c0000 	subeq	r0, ip, r0
    13bc:	00010000 	andeq	r0, r1, r0
    13c0:	00000054 	andeq	r0, r0, r4, asr r0
    13c4:	00000000 	andeq	r0, r0, r0
    13c8:	00004c00 	andeq	r4, r0, r0, lsl #24
    13cc:	00005700 	andeq	r5, r0, r0, lsl #14
    13d0:	50000100 	andpl	r0, r0, r0, lsl #2
    13d4:	00000057 	andeq	r0, r0, r7, asr r0
    13d8:	00000070 	andeq	r0, r0, r0, ror r0
    13dc:	00550001 	subseq	r0, r5, r1
    13e0:	00000000 	andeq	r0, r0, r0
    13e4:	60000000 	andvs	r0, r0, r0
    13e8:	64000000 	strvs	r0, [r0], #-0
    13ec:	01000000 	mrseq	r0, (UNDEF: 0)
    13f0:	00005000 	andeq	r5, r0, r0
    13f4:	00000000 	andeq	r0, r0, r0
    13f8:	00700000 	rsbseq	r0, r0, r0
    13fc:	007c0000 	rsbseq	r0, ip, r0
    1400:	00010000 	andeq	r0, r1, r0
    1404:	00007c50 	andeq	r7, r0, r0, asr ip
    1408:	00008400 	andeq	r8, r0, r0, lsl #8
    140c:	f3000400 	vshl.u8	d0, d0, d0
    1410:	009f5001 	addseq	r5, pc, r1
    1414:	00000000 	andeq	r0, r0, r0
    1418:	84000000 	strhi	r0, [r0], #-0
    141c:	90000000 	andls	r0, r0, r0
    1420:	01000000 	mrseq	r0, (UNDEF: 0)
    1424:	00905000 	addseq	r5, r0, r0
    1428:	00980000 	addseq	r0, r8, r0
    142c:	00040000 	andeq	r0, r4, r0
    1430:	9f5001f3 	svcls	0x005001f3
	...
    143c:	000000fc 	strdeq	r0, [r0], -ip
    1440:	00000104 	andeq	r0, r0, r4, lsl #2
    1444:	04500001 	ldrbeq	r0, [r0], #-1
    1448:	28000001 	stmdacs	r0, {r0}
    144c:	01000001 	tsteq	r0, r1
    1450:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    145c:	00900000 	addseq	r0, r0, r0
    1460:	00010000 	andeq	r0, r1, r0
    1464:	00009050 	andeq	r9, r0, r0, asr r0
    1468:	0000d400 	andeq	sp, r0, r0, lsl #8
    146c:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    1478:	00000048 	andeq	r0, r0, r8, asr #32
    147c:	0000004c 	andeq	r0, r0, ip, asr #32
    1480:	54550001 	ldrbpl	r0, [r5], #-1
    1484:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    1488:	01000000 	mrseq	r0, (UNDEF: 0)
    148c:	00605500 	rsbeq	r5, r0, r0, lsl #10
    1490:	00640000 	rsbeq	r0, r4, r0
    1494:	00010000 	andeq	r0, r1, r0
    1498:	00006c55 	andeq	r6, r0, r5, asr ip
    149c:	00007000 	andeq	r7, r0, r0
    14a0:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    14a4:	00000078 	andeq	r0, r0, r8, ror r0
    14a8:	0000007c 	andeq	r0, r0, ip, ror r0
    14ac:	84550001 	ldrbhi	r0, [r5], #-1
    14b0:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    14b4:	01000000 	mrseq	r0, (UNDEF: 0)
    14b8:	008c5500 	addeq	r5, ip, r0, lsl #10
    14bc:	00d40000 	sbcseq	r0, r4, r0
    14c0:	00010000 	andeq	r0, r1, r0
    14c4:	00000055 	andeq	r0, r0, r5, asr r0
    14c8:	00000000 	andeq	r0, r0, r0
    14cc:	00001c00 	andeq	r1, r0, r0, lsl #24
    14d0:	00004400 	andeq	r4, r0, r0, lsl #8
    14d4:	53000100 	movwpl	r0, #256	; 0x100
    14d8:	00000044 	andeq	r0, r0, r4, asr #32
    14dc:	0000004c 	andeq	r0, r0, ip, asr #32
    14e0:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    14e4:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    14e8:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    14ec:	00cccccc 	sbceq	ip, ip, ip, asr #25
    14f0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    14f4:	25f72008 	ldrbcs	r2, [r7, #8]!
    14f8:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    14fc:	004c9f25 	subeq	r9, ip, r5, lsr #30
    1500:	00500000 	subseq	r0, r0, r0
    1504:	00010000 	andeq	r0, r1, r0
    1508:	00005053 	andeq	r5, r0, r3, asr r0
    150c:	00005800 	andeq	r5, r0, r0, lsl #16
    1510:	70001c00 	andvc	r1, r0, r0, lsl #24
    1514:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1518:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    151c:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1520:	00000000 	andeq	r0, r0, r0
    1524:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1528:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    152c:	589f2533 	ldmpl	pc, {r0, r1, r4, r5, r8, sl, sp}	; <UNPREDICTABLE>
    1530:	5c000000 	stcpl	0, cr0, [r0], {-0}
    1534:	01000000 	mrseq	r0, (UNDEF: 0)
    1538:	005c5300 	subseq	r5, ip, r0, lsl #6
    153c:	00640000 	rsbeq	r0, r4, r0
    1540:	001c0000 	andseq	r0, ip, r0
    1544:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    1548:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    154c:	cccccd08 	stclgt	13, cr12, [ip], {8}
    1550:	000000cc 	andeq	r0, r0, ip, asr #1
    1554:	20081e00 	andcs	r1, r8, r0, lsl #28
    1558:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    155c:	9f25332c 	svcls	0x0025332c
    1560:	00000064 	andeq	r0, r0, r4, rrx
    1564:	00000068 	andeq	r0, r0, r8, rrx
    1568:	68530001 	ldmdavs	r3, {r0}^
    156c:	70000000 	andvc	r0, r0, r0
    1570:	1c000000 	stcne	0, cr0, [r0], {-0}
    1574:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    1578:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    157c:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1580:	0000cccc 	andeq	ip, r0, ip, asr #25
    1584:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1588:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    158c:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1590:	0000709f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1594:	00007400 	andeq	r7, r0, r0, lsl #8
    1598:	53000100 	movwpl	r0, #256	; 0x100
    159c:	00000074 	andeq	r0, r0, r4, ror r0
    15a0:	0000007c 	andeq	r0, r0, ip, ror r0
    15a4:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    15a8:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    15ac:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    15b0:	00cccccc 	sbceq	ip, ip, ip, asr #25
    15b4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    15b8:	25f72008 	ldrbcs	r2, [r7, #8]!
    15bc:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    15c0:	007c9f25 	rsbseq	r9, ip, r5, lsr #30
    15c4:	00800000 	addeq	r0, r0, r0
    15c8:	00010000 	andeq	r0, r1, r0
    15cc:	00008053 	andeq	r8, r0, r3, asr r0
    15d0:	00008800 	andeq	r8, r0, r0, lsl #16
    15d4:	70001c00 	andvc	r1, r0, r0, lsl #24
    15d8:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    15dc:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    15e0:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    15e4:	00000000 	andeq	r0, r0, r0
    15e8:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    15ec:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    15f0:	889f2533 	ldmhi	pc, {r0, r1, r4, r5, r8, sl, sp}	; <UNPREDICTABLE>
    15f4:	8c000000 	stchi	0, cr0, [r0], {-0}
    15f8:	01000000 	mrseq	r0, (UNDEF: 0)
    15fc:	008c5300 	addeq	r5, ip, r0, lsl #6
    1600:	00900000 	addseq	r0, r0, r0
    1604:	001c0000 	andseq	r0, ip, r0
    1608:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    160c:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    1610:	cccccd08 	stclgt	13, cr12, [ip], {8}
    1614:	000000cc 	andeq	r0, r0, ip, asr #1
    1618:	20081e00 	andcs	r1, r8, r0, lsl #28
    161c:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1620:	9f25332c 	svcls	0x0025332c
    1624:	00000090 	muleq	r0, r0, r0
    1628:	00000098 	muleq	r0, r8, r0
    162c:	0074001c 	rsbseq	r0, r4, ip, lsl r0
    1630:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1634:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1638:	00cccccc 	sbceq	ip, ip, ip, asr #25
    163c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1640:	25f72008 	ldrbcs	r2, [r7, #8]!
    1644:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1648:	00989f25 	addseq	r9, r8, r5, lsr #30
    164c:	009c0000 	addseq	r0, ip, r0
    1650:	00170000 	andseq	r0, r7, r0
    1654:	2cf70074 	ldclcs	0, cr0, [r7], #464	; 0x1d0
    1658:	007125f7 	ldrshteq	r2, [r1], #-87	; 0xffffffa9
    165c:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1660:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1664:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1668:	9c9f2533 	cfldr32ls	mvfx2, [pc], {51}	; 0x33
    166c:	d4000000 	strle	r0, [r0], #-0
    1670:	1c000000 	stcne	0, cr0, [r0], {-0}
    1674:	f7007400 			; <UNDEFINED> instruction: 0xf7007400
    1678:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    167c:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1680:	0000cccc 	andeq	ip, r0, ip, asr #25
    1684:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1688:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    168c:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1690:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1694:	00000000 	andeq	r0, r0, r0
    1698:	00009400 	andeq	r9, r0, r0, lsl #8
    169c:	0000b800 	andeq	fp, r0, r0, lsl #16
    16a0:	50000100 	andpl	r0, r0, r0, lsl #2
    16a4:	000000b8 	strheq	r0, [r0], -r8
    16a8:	000000c4 	andeq	r0, r0, r4, asr #1
    16ac:	71310008 	teqvc	r1, r8
    16b0:	00732400 	rsbseq	r2, r3, r0, lsl #8
    16b4:	00c49f21 	sbceq	r9, r4, r1, lsr #30
    16b8:	00c70000 	sbceq	r0, r7, r0
    16bc:	00010000 	andeq	r0, r1, r0
    16c0:	00000051 	andeq	r0, r0, r1, asr r0
    16c4:	00000000 	andeq	r0, r0, r0
    16c8:	0000d400 	andeq	sp, r0, r0, lsl #8
    16cc:	0000f800 	andeq	pc, r0, r0, lsl #16
    16d0:	50000100 	andpl	r0, r0, r0, lsl #2
    16d4:	000000f8 	strdeq	r0, [r0], -r8
    16d8:	0000010c 	andeq	r0, r0, ip, lsl #2
    16dc:	01f30004 	mvnseq	r0, r4
    16e0:	00009f50 	andeq	r9, r0, r0, asr pc
    16e4:	00000000 	andeq	r0, r0, r0
    16e8:	00e00000 	rsceq	r0, r0, r0
    16ec:	00e80000 	rsceq	r0, r8, r0
    16f0:	00020000 	andeq	r0, r2, r0
    16f4:	00e89f30 	rsceq	r9, r8, r0, lsr pc
    16f8:	00e80000 	rsceq	r0, r8, r0
    16fc:	00010000 	andeq	r0, r1, r0
    1700:	0000e852 	andeq	lr, r0, r2, asr r8
    1704:	0000f000 	andeq	pc, r0, r0
    1708:	30000200 	andcc	r0, r0, r0, lsl #4
    170c:	0000f09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1710:	00010300 	andeq	r0, r1, r0, lsl #6
    1714:	52000100 	andpl	r0, r0, #0, 2
	...
    1720:	000000e0 	andeq	r0, r0, r0, ror #1
    1724:	000000f4 	strdeq	r0, [r0], -r4
    1728:	9f300002 	svcls	0x00300002
    172c:	000000f4 	strdeq	r0, [r0], -r4
    1730:	00000100 	andeq	r0, r0, r0, lsl #2
    1734:	73310005 	teqvc	r1, #5
    1738:	009f2400 	addseq	r2, pc, r0, lsl #8
    173c:	03000001 	movweq	r0, #1
    1740:	01000001 	tsteq	r0, r1
    1744:	01035100 	mrseq	r5, (UNDEF: 19)
    1748:	010c0000 	mrseq	r0, (UNDEF: 12)
    174c:	00080000 	andeq	r0, r8, r0
    1750:	5001f331 	andpl	pc, r1, r1, lsr r3	; <UNPREDICTABLE>
    1754:	9f241a4f 	svcls	0x00241a4f
	...
    1760:	0000010c 	andeq	r0, r0, ip, lsl #2
    1764:	00000130 	andeq	r0, r0, r0, lsr r1
    1768:	30500001 	subscc	r0, r0, r1
    176c:	44000001 	strmi	r0, [r0], #-1
    1770:	04000001 	streq	r0, [r0], #-1
    1774:	5001f300 	andpl	pc, r1, r0, lsl #6
    1778:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    177c:	00000000 	andeq	r0, r0, r0
    1780:	00011800 	andeq	r1, r1, r0, lsl #16
    1784:	00012000 	andeq	r2, r1, r0
    1788:	30000200 	andcc	r0, r0, r0, lsl #4
    178c:	0001209f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
    1790:	00012000 	andeq	r2, r1, r0
    1794:	52000100 	andpl	r0, r0, #0, 2
    1798:	00000120 	andeq	r0, r0, r0, lsr #2
    179c:	00000128 	andeq	r0, r0, r8, lsr #2
    17a0:	9f300002 	svcls	0x00300002
    17a4:	00000128 	andeq	r0, r0, r8, lsr #2
    17a8:	0000013b 	andeq	r0, r0, fp, lsr r1
    17ac:	00520001 	subseq	r0, r2, r1
    17b0:	00000000 	andeq	r0, r0, r0
    17b4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    17b8:	2c000001 	stccs	0, cr0, [r0], {1}
    17bc:	02000001 	andeq	r0, r0, #1
    17c0:	2c9f3000 	ldccs	0, cr3, [pc], {0}
    17c4:	38000001 	stmdacc	r0, {r0}
    17c8:	05000001 	streq	r0, [r0, #-1]
    17cc:	00733100 	rsbseq	r3, r3, r0, lsl #2
    17d0:	01389f24 	teqeq	r8, r4, lsr #30
    17d4:	013b0000 	teqeq	fp, r0
    17d8:	00010000 	andeq	r0, r1, r0
    17dc:	00013b51 	andeq	r3, r1, r1, asr fp
    17e0:	00014400 	andeq	r4, r1, r0, lsl #8
    17e4:	31000800 	tstcc	r0, r0, lsl #16
    17e8:	4f5001f3 	svcmi	0x005001f3
    17ec:	009f241a 	addseq	r2, pc, sl, lsl r4	; <UNPREDICTABLE>
    17f0:	00000000 	andeq	r0, r0, r0
    17f4:	44000000 	strmi	r0, [r0], #-0
    17f8:	d4000001 	strle	r0, [r0], #-1
    17fc:	01000001 	tsteq	r0, r1
    1800:	01d45000 	bicseq	r5, r4, r0
    1804:	02100000 	andseq	r0, r0, #0
    1808:	00010000 	andeq	r0, r1, r0
    180c:	00000054 	andeq	r0, r0, r4, asr r0
    1810:	00000000 	andeq	r0, r0, r0
    1814:	00018c00 	andeq	r8, r1, r0, lsl #24
    1818:	00019000 	andeq	r9, r1, r0
    181c:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    1820:	00000198 	muleq	r0, r8, r1
    1824:	0000019c 	muleq	r0, ip, r1
    1828:	a4550001 	ldrbge	r0, [r5], #-1
    182c:	a8000001 	stmdage	r0, {r0}
    1830:	01000001 	tsteq	r0, r1
    1834:	01b05500 	lslseq	r5, r0, #10
    1838:	01b40000 			; <UNDEFINED> instruction: 0x01b40000
    183c:	00010000 	andeq	r0, r1, r0
    1840:	0001bc55 	andeq	fp, r1, r5, asr ip
    1844:	0001c000 	andeq	ip, r1, r0
    1848:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    184c:	000001c8 	andeq	r0, r0, r8, asr #3
    1850:	000001cc 	andeq	r0, r0, ip, asr #3
    1854:	d0550001 	subsle	r0, r5, r1
    1858:	10000001 	andne	r0, r0, r1
    185c:	01000002 	tsteq	r0, r2
    1860:	00005500 	andeq	r5, r0, r0, lsl #10
    1864:	00000000 	andeq	r0, r0, r0
    1868:	01600000 	cmneq	r0, r0
    186c:	01880000 	orreq	r0, r8, r0
    1870:	00010000 	andeq	r0, r1, r0
    1874:	00018853 	andeq	r8, r1, r3, asr r8
    1878:	00019000 	andeq	r9, r1, r0
    187c:	70001c00 	andvc	r1, r0, r0, lsl #24
    1880:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1884:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1888:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    188c:	00000000 	andeq	r0, r0, r0
    1890:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1894:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1898:	909f2533 	addsls	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
    189c:	94000001 	strls	r0, [r0], #-1
    18a0:	01000001 	tsteq	r0, r1
    18a4:	01945300 	orrseq	r5, r4, r0, lsl #6
    18a8:	019c0000 	orrseq	r0, ip, r0
    18ac:	001c0000 	andseq	r0, ip, r0
    18b0:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    18b4:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    18b8:	cccccd08 	stclgt	13, cr12, [ip], {8}
    18bc:	000000cc 	andeq	r0, r0, ip, asr #1
    18c0:	20081e00 	andcs	r1, r8, r0, lsl #28
    18c4:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    18c8:	9f25332c 	svcls	0x0025332c
    18cc:	0000019c 	muleq	r0, ip, r1
    18d0:	000001a0 	andeq	r0, r0, r0, lsr #3
    18d4:	a0530001 	subsge	r0, r3, r1
    18d8:	a8000001 	stmdage	r0, {r0}
    18dc:	1c000001 	stcne	0, cr0, [r0], {1}
    18e0:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    18e4:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    18e8:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    18ec:	0000cccc 	andeq	ip, r0, ip, asr #25
    18f0:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    18f4:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    18f8:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    18fc:	0001a89f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
    1900:	0001ac00 	andeq	sl, r1, r0, lsl #24
    1904:	53000100 	movwpl	r0, #256	; 0x100
    1908:	000001ac 	andeq	r0, r0, ip, lsr #3
    190c:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
    1910:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    1914:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1918:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    191c:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1920:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1924:	25f72008 	ldrbcs	r2, [r7, #8]!
    1928:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    192c:	01b49f25 			; <UNDEFINED> instruction: 0x01b49f25
    1930:	01b80000 			; <UNDEFINED> instruction: 0x01b80000
    1934:	00010000 	andeq	r0, r1, r0
    1938:	0001b853 	andeq	fp, r1, r3, asr r8
    193c:	0001c000 	andeq	ip, r1, r0
    1940:	70001c00 	andvc	r1, r0, r0, lsl #24
    1944:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1948:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    194c:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1950:	00000000 	andeq	r0, r0, r0
    1954:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1958:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    195c:	c09f2533 	addsgt	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
    1960:	c4000001 	strgt	r0, [r0], #-1
    1964:	01000001 	tsteq	r0, r1
    1968:	01c45300 	biceq	r5, r4, r0, lsl #6
    196c:	01cc0000 	biceq	r0, ip, r0
    1970:	001c0000 	andseq	r0, ip, r0
    1974:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    1978:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    197c:	cccccd08 	stclgt	13, cr12, [ip], {8}
    1980:	000000cc 	andeq	r0, r0, ip, asr #1
    1984:	20081e00 	andcs	r1, r8, r0, lsl #28
    1988:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    198c:	9f25332c 	svcls	0x0025332c
    1990:	000001cc 	andeq	r0, r0, ip, asr #3
    1994:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1998:	d0530001 	subsle	r0, r3, r1
    199c:	d4000001 	strle	r0, [r0], #-1
    19a0:	1c000001 	stcne	0, cr0, [r0], {1}
    19a4:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    19a8:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    19ac:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    19b0:	0000cccc 	andeq	ip, r0, ip, asr #25
    19b4:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    19b8:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    19bc:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    19c0:	0001d49f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
    19c4:	0001dc00 	andeq	sp, r1, r0, lsl #24
    19c8:	74001c00 	strvc	r1, [r0], #-3072	; 0xc00
    19cc:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    19d0:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    19d4:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    19d8:	00000000 	andeq	r0, r0, r0
    19dc:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    19e0:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    19e4:	dc9f2533 	cfldr32le	mvfx2, [pc], {51}	; 0x33
    19e8:	e0000001 	and	r0, r0, r1
    19ec:	17000001 	strne	r0, [r0, -r1]
    19f0:	f7007400 			; <UNDEFINED> instruction: 0xf7007400
    19f4:	7125f72c 	msrvc	SP_abt, ip
    19f8:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    19fc:	20081e25 	andcs	r1, r8, r5, lsr #28
    1a00:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1a04:	9f25332c 	svcls	0x0025332c
    1a08:	000001e0 	andeq	r0, r0, r0, ror #3
    1a0c:	00000210 	andeq	r0, r0, r0, lsl r2
    1a10:	0074001c 	rsbseq	r0, r4, ip, lsl r0
    1a14:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1a18:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1a1c:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1a20:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1a24:	25f72008 	ldrbcs	r2, [r7, #8]!
    1a28:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1a2c:	00009f25 	andeq	r9, r0, r5, lsr #30
    1a30:	00000000 	andeq	r0, r0, r0
    1a34:	01d80000 	bicseq	r0, r8, r0
    1a38:	01fc0000 	mvnseq	r0, r0
    1a3c:	00010000 	andeq	r0, r1, r0
    1a40:	0001fc50 	andeq	pc, r1, r0, asr ip	; <UNPREDICTABLE>
    1a44:	00020300 	andeq	r0, r2, r0, lsl #6
    1a48:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1a54:	00000210 	andeq	r0, r0, r0, lsl r2
    1a58:	0000022c 	andeq	r0, r0, ip, lsr #4
    1a5c:	2c500001 	mrrccs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    1a60:	34000002 	strcc	r0, [r0], #-2
    1a64:	01000002 	tsteq	r0, r2
    1a68:	02345400 	eorseq	r5, r4, #0, 8
    1a6c:	023c0000 	eorseq	r0, ip, #0
    1a70:	00010000 	andeq	r0, r1, r0
    1a74:	00023c50 	andeq	r3, r2, r0, asr ip
    1a78:	00024400 	andeq	r4, r2, r0, lsl #8
    1a7c:	54000100 	strpl	r0, [r0], #-256	; 0x100
    1a80:	00000244 	andeq	r0, r0, r4, asr #4
    1a84:	00000250 	andeq	r0, r0, r0, asr r2
    1a88:	01f30004 	mvnseq	r0, r4
    1a8c:	02509f50 	subseq	r9, r0, #80, 30	; 0x140
    1a90:	02540000 	subseq	r0, r4, #0
    1a94:	00010000 	andeq	r0, r1, r0
    1a98:	00025450 	andeq	r5, r2, r0, asr r4
    1a9c:	00025c00 	andeq	r5, r2, r0, lsl #24
    1aa0:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    1aac:	00000220 	andeq	r0, r0, r0, lsr #4
    1ab0:	00000230 	andeq	r0, r0, r0, lsr r2
    1ab4:	9f300002 	svcls	0x00300002
    1ab8:	00000230 	andeq	r0, r0, r0, lsr r2
    1abc:	00000234 	andeq	r0, r0, r4, lsr r2
    1ac0:	34500001 	ldrbcc	r0, [r0], #-1
    1ac4:	40000002 	andmi	r0, r0, r2
    1ac8:	02000002 	andeq	r0, r0, #2
    1acc:	409f3000 	addsmi	r3, pc, r0
    1ad0:	4c000002 	stcmi	0, cr0, [r0], {2}
    1ad4:	01000002 	tsteq	r0, r2
    1ad8:	00005000 	andeq	r5, r0, r0
    1adc:	00000000 	andeq	r0, r0, r0
    1ae0:	025c0000 	subseq	r0, ip, #0
    1ae4:	02900000 	addseq	r0, r0, #0
    1ae8:	00010000 	andeq	r0, r1, r0
    1aec:	00029050 	andeq	r9, r2, r0, asr r0
    1af0:	0002a000 	andeq	sl, r2, r0
    1af4:	f3000400 	vshl.u8	d0, d0, d0
    1af8:	a09f5001 	addsge	r5, pc, r1
    1afc:	c0000002 	andgt	r0, r0, r2
    1b00:	01000002 	tsteq	r0, r2
    1b04:	02c05000 	sbceq	r5, r0, #0
    1b08:	02d40000 	sbcseq	r0, r4, #0
    1b0c:	00040000 	andeq	r0, r4, r0
    1b10:	9f5001f3 	svcls	0x005001f3
	...
    1b1c:	0000025c 	andeq	r0, r0, ip, asr r2
    1b20:	00000294 	muleq	r0, r4, r2
    1b24:	94510001 	ldrbls	r0, [r1], #-1
    1b28:	a0000002 	andge	r0, r0, r2
    1b2c:	04000002 	streq	r0, [r0], #-2
    1b30:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1b34:	0002a09f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
    1b38:	0002c400 	andeq	ip, r2, r0, lsl #8
    1b3c:	51000100 	mrspl	r0, (UNDEF: 16)
    1b40:	000002c4 	andeq	r0, r0, r4, asr #5
    1b44:	000002d4 	ldrdeq	r0, [r0], -r4
    1b48:	01f30004 	mvnseq	r0, r4
    1b4c:	00009f51 	andeq	r9, r0, r1, asr pc
    1b50:	00000000 	andeq	r0, r0, r0
    1b54:	02700000 	rsbseq	r0, r0, #0
    1b58:	02900000 	addseq	r0, r0, #0
    1b5c:	00010000 	andeq	r0, r1, r0
    1b60:	00029050 	andeq	r9, r2, r0, asr r0
    1b64:	0002a000 	andeq	sl, r2, r0
    1b68:	f3000400 	vshl.u8	d0, d0, d0
    1b6c:	009f5001 	addseq	r5, pc, r1
    1b70:	00000000 	andeq	r0, r0, r0
    1b74:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    1b78:	80000002 	andhi	r0, r0, r2
    1b7c:	02000002 	andeq	r0, r0, #2
    1b80:	809f3000 	addshi	r3, pc, r0
    1b84:	80000002 	andhi	r0, r0, r2
    1b88:	01000002 	tsteq	r0, r2
    1b8c:	02805200 	addeq	r5, r0, #0, 4
    1b90:	02880000 	addeq	r0, r8, #0
    1b94:	00020000 	andeq	r0, r2, r0
    1b98:	02889f30 	addeq	r9, r8, #48, 30	; 0xc0
    1b9c:	029b0000 	addseq	r0, fp, #0
    1ba0:	00010000 	andeq	r0, r1, r0
    1ba4:	00000052 	andeq	r0, r0, r2, asr r0
    1ba8:	00000000 	andeq	r0, r0, r0
    1bac:	00027800 	andeq	r7, r2, r0, lsl #16
    1bb0:	00028c00 	andeq	r8, r2, r0, lsl #24
    1bb4:	30000200 	andcc	r0, r0, r0, lsl #4
    1bb8:	00028c9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
    1bbc:	00029800 	andeq	r9, r2, r0, lsl #16
    1bc0:	31000500 	tstcc	r0, r0, lsl #10
    1bc4:	9f240073 	svcls	0x00240073
    1bc8:	00000298 	muleq	r0, r8, r2
    1bcc:	0000029b 	muleq	r0, fp, r2
    1bd0:	9b510001 	blls	1441bdc <__bss_end__+0x143808c>
    1bd4:	a0000002 	andge	r0, r0, r2
    1bd8:	08000002 	stmdaeq	r0, {r1}
    1bdc:	01f33100 	mvnseq	r3, r0, lsl #2
    1be0:	241a4f50 	ldrcs	r4, [sl], #-3920	; 0xf50
    1be4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1be8:	00000000 	andeq	r0, r0, r0
    1bec:	0002a000 	andeq	sl, r2, r0
    1bf0:	0002c000 	andeq	ip, r2, r0
    1bf4:	50000100 	andpl	r0, r0, r0, lsl #2
    1bf8:	000002c0 	andeq	r0, r0, r0, asr #5
    1bfc:	000002d4 	ldrdeq	r0, [r0], -r4
    1c00:	01f30004 	mvnseq	r0, r4
    1c04:	00009f50 	andeq	r9, r0, r0, asr pc
    1c08:	00000000 	andeq	r0, r0, r0
    1c0c:	02a80000 	adceq	r0, r8, #0
    1c10:	02b00000 	adcseq	r0, r0, #0
    1c14:	00020000 	andeq	r0, r2, r0
    1c18:	02b09f30 	adcseq	r9, r0, #48, 30	; 0xc0
    1c1c:	02b00000 	adcseq	r0, r0, #0
    1c20:	00010000 	andeq	r0, r1, r0
    1c24:	0002b052 	andeq	fp, r2, r2, asr r0
    1c28:	0002b800 	andeq	fp, r2, r0, lsl #16
    1c2c:	30000200 	andcc	r0, r0, r0, lsl #4
    1c30:	0002b89f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
    1c34:	0002cb00 	andeq	ip, r2, r0, lsl #22
    1c38:	52000100 	andpl	r0, r0, #0, 2
	...
    1c44:	000002a8 	andeq	r0, r0, r8, lsr #5
    1c48:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
    1c4c:	9f300002 	svcls	0x00300002
    1c50:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
    1c54:	000002c8 	andeq	r0, r0, r8, asr #5
    1c58:	73310005 	teqvc	r1, #5
    1c5c:	c89f2400 	ldmgt	pc, {sl, sp}	; <UNPREDICTABLE>
    1c60:	cb000002 	blgt	1c70 <_start-0x6390>
    1c64:	01000002 	tsteq	r0, r2
    1c68:	02cb5100 	sbceq	r5, fp, #0, 2
    1c6c:	02d40000 	sbcseq	r0, r4, #0
    1c70:	00080000 	andeq	r0, r8, r0
    1c74:	5001f331 	andpl	pc, r1, r1, lsr r3	; <UNPREDICTABLE>
    1c78:	9f241a4f 	svcls	0x00241a4f
	...
    1c84:	000002d4 	ldrdeq	r0, [r0], -r4
    1c88:	0000036c 	andeq	r0, r0, ip, ror #6
    1c8c:	6c500001 	mrrcvs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    1c90:	ac000003 	stcge	0, cr0, [r0], {3}
    1c94:	01000003 	tsteq	r0, r3
    1c98:	00005400 	andeq	r5, r0, r0, lsl #8
    1c9c:	00000000 	andeq	r0, r0, r0
    1ca0:	02d40000 	sbcseq	r0, r4, #0
    1ca4:	036f0000 	cmneq	pc, #0
    1ca8:	00010000 	andeq	r0, r1, r0
    1cac:	00036f51 	andeq	r6, r3, r1, asr pc
    1cb0:	0003ac00 	andeq	sl, r3, r0, lsl #24
    1cb4:	f3000400 	vshl.u8	d0, d0, d0
    1cb8:	009f5101 	addseq	r5, pc, r1, lsl #2
    1cbc:	00000000 	andeq	r0, r0, r0
    1cc0:	24000000 	strcs	r0, [r0], #-0
    1cc4:	28000003 	stmdacs	r0, {r0, r1}
    1cc8:	01000003 	tsteq	r0, r3
    1ccc:	03305600 	teqeq	r0, #0, 12
    1cd0:	03340000 	teqeq	r4, #0
    1cd4:	00010000 	andeq	r0, r1, r0
    1cd8:	00033c56 	andeq	r3, r3, r6, asr ip
    1cdc:	00034000 	andeq	r4, r3, r0
    1ce0:	56000100 	strpl	r0, [r0], -r0, lsl #2
    1ce4:	00000348 	andeq	r0, r0, r8, asr #6
    1ce8:	0000034c 	andeq	r0, r0, ip, asr #6
    1cec:	54560001 	ldrbpl	r0, [r6], #-1
    1cf0:	58000003 	stmdapl	r0, {r0, r1}
    1cf4:	01000003 	tsteq	r0, r3
    1cf8:	03605600 	cmneq	r0, #0, 12
    1cfc:	03640000 	cmneq	r4, #0
    1d00:	00010000 	andeq	r0, r1, r0
    1d04:	00036856 	andeq	r6, r3, r6, asr r8
    1d08:	0003ac00 	andeq	sl, r3, r0, lsl #24
    1d0c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    1d18:	000002f8 	strdeq	r0, [r0], -r8
    1d1c:	00000320 	andeq	r0, r0, r0, lsr #6
    1d20:	20530001 	subscs	r0, r3, r1
    1d24:	28000003 	stmdacs	r0, {r0, r1}
    1d28:	1c000003 	stcne	0, cr0, [r0], {3}
    1d2c:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    1d30:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    1d34:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1d38:	0000cccc 	andeq	ip, r0, ip, asr #25
    1d3c:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1d40:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1d44:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1d48:	0003289f 	muleq	r3, pc, r8	; <UNPREDICTABLE>
    1d4c:	00032c00 	andeq	r2, r3, r0, lsl #24
    1d50:	53000100 	movwpl	r0, #256	; 0x100
    1d54:	0000032c 	andeq	r0, r0, ip, lsr #6
    1d58:	00000334 	andeq	r0, r0, r4, lsr r3
    1d5c:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    1d60:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1d64:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1d68:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1d6c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1d70:	25f72008 	ldrbcs	r2, [r7, #8]!
    1d74:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1d78:	03349f25 	teqeq	r4, #37, 30	; 0x94
    1d7c:	03380000 	teqeq	r8, #0
    1d80:	00010000 	andeq	r0, r1, r0
    1d84:	00033853 	andeq	r3, r3, r3, asr r8
    1d88:	00034000 	andeq	r4, r3, r0
    1d8c:	70001c00 	andvc	r1, r0, r0, lsl #24
    1d90:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1d94:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1d98:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1d9c:	00000000 	andeq	r0, r0, r0
    1da0:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1da4:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1da8:	409f2533 	addsmi	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
    1dac:	44000003 	strmi	r0, [r0], #-3
    1db0:	01000003 	tsteq	r0, r3
    1db4:	03445300 	movteq	r5, #17152	; 0x4300
    1db8:	034c0000 	movteq	r0, #49152	; 0xc000
    1dbc:	001c0000 	andseq	r0, ip, r0
    1dc0:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    1dc4:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    1dc8:	cccccd08 	stclgt	13, cr12, [ip], {8}
    1dcc:	000000cc 	andeq	r0, r0, ip, asr #1
    1dd0:	20081e00 	andcs	r1, r8, r0, lsl #28
    1dd4:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1dd8:	9f25332c 	svcls	0x0025332c
    1ddc:	0000034c 	andeq	r0, r0, ip, asr #6
    1de0:	00000350 	andeq	r0, r0, r0, asr r3
    1de4:	50530001 	subspl	r0, r3, r1
    1de8:	58000003 	stmdapl	r0, {r0, r1}
    1dec:	1c000003 	stcne	0, cr0, [r0], {3}
    1df0:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    1df4:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    1df8:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1dfc:	0000cccc 	andeq	ip, r0, ip, asr #25
    1e00:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1e04:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1e08:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1e0c:	0003589f 	muleq	r3, pc, r8	; <UNPREDICTABLE>
    1e10:	00035c00 	andeq	r5, r3, r0, lsl #24
    1e14:	53000100 	movwpl	r0, #256	; 0x100
    1e18:	0000035c 	andeq	r0, r0, ip, asr r3
    1e1c:	00000364 	andeq	r0, r0, r4, ror #6
    1e20:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    1e24:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    1e28:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    1e2c:	00cccccc 	sbceq	ip, ip, ip, asr #25
    1e30:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1e34:	25f72008 	ldrbcs	r2, [r7, #8]!
    1e38:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1e3c:	03649f25 	cmneq	r4, #37, 30	; 0x94
    1e40:	03680000 	cmneq	r8, #0
    1e44:	00010000 	andeq	r0, r1, r0
    1e48:	00036853 	andeq	r6, r3, r3, asr r8
    1e4c:	00036c00 	andeq	r6, r3, r0, lsl #24
    1e50:	70001c00 	andvc	r1, r0, r0, lsl #24
    1e54:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1e58:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1e5c:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    1e60:	00000000 	andeq	r0, r0, r0
    1e64:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    1e68:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    1e6c:	6c9f2533 	cfldr32vs	mvfx2, [pc], {51}	; 0x33
    1e70:	74000003 	strvc	r0, [r0], #-3
    1e74:	1c000003 	stcne	0, cr0, [r0], {3}
    1e78:	f7007400 			; <UNDEFINED> instruction: 0xf7007400
    1e7c:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    1e80:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    1e84:	0000cccc 	andeq	ip, r0, ip, asr #25
    1e88:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    1e8c:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    1e90:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    1e94:	0003749f 	muleq	r3, pc, r4	; <UNPREDICTABLE>
    1e98:	00037800 	andeq	r7, r3, r0, lsl #16
    1e9c:	74001700 	strvc	r1, [r0], #-1792	; 0x700
    1ea0:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    1ea4:	f7007325 			; <UNDEFINED> instruction: 0xf7007325
    1ea8:	1e25f72c 	cdpne	7, 2, cr15, cr5, cr12, {1}
    1eac:	25f72008 	ldrbcs	r2, [r7, #8]!
    1eb0:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    1eb4:	03789f25 	cmneq	r8, #37, 30	; 0x94
    1eb8:	03ac0000 			; <UNDEFINED> instruction: 0x03ac0000
    1ebc:	001c0000 	andseq	r0, ip, r0
    1ec0:	2cf70074 	ldclcs	0, cr0, [r7], #464	; 0x1d0
    1ec4:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    1ec8:	cccccd08 	stclgt	13, cr12, [ip], {8}
    1ecc:	000000cc 	andeq	r0, r0, ip, asr #1
    1ed0:	20081e00 	andcs	r1, r8, r0, lsl #28
    1ed4:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    1ed8:	9f25332c 	svcls	0x0025332c
	...
    1ee4:	00000370 	andeq	r0, r0, r0, ror r3
    1ee8:	00000394 	muleq	r0, r4, r3
    1eec:	94500001 	ldrbls	r0, [r0], #-1
    1ef0:	9c000003 	stcls	0, cr0, [r0], {3}
    1ef4:	09000003 	stmdbeq	r0, {r0, r1}
    1ef8:	73007500 	movwvc	r7, #1280	; 0x500
    1efc:	00712400 	rsbseq	r2, r1, r0, lsl #8
    1f00:	039c9f21 	orrseq	r9, ip, #33, 30	; 0x84
    1f04:	039f0000 	orrseq	r0, pc, #0
    1f08:	00010000 	andeq	r0, r1, r0
    1f0c:	00000051 	andeq	r0, r0, r1, asr r0
	...
    1f18:	00000b00 	andeq	r0, r0, r0, lsl #22
    1f1c:	50000100 	andpl	r0, r0, r0, lsl #2
    1f20:	0000000b 	andeq	r0, r0, fp
    1f24:	00000014 	andeq	r0, r0, r4, lsl r0
    1f28:	00540001 	subseq	r0, r4, r1
    1f2c:	00000000 	andeq	r0, r0, r0
    1f30:	Address 0x0000000000001f30 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	00008010 	andeq	r8, r0, r0, lsl r0
  14:	00000118 	andeq	r0, r0, r8, lsl r1
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	03530002 	cmpeq	r3, #2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	00008128 	andeq	r8, r0, r8, lsr #2
  34:	00000600 	andeq	r0, r0, r0, lsl #12
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	14fe0002 	ldrbtne	r0, [lr], #2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	00008728 	andeq	r8, r0, r8, lsr #14
  54:	00000058 	andeq	r0, r0, r8, asr r0
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	16930002 	ldrne	r0, [r3], r2
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	00008780 	andeq	r8, r0, r0, lsl #15
  74:	00000034 	andeq	r0, r0, r4, lsr r0
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	17850002 	strne	r0, [r5, r2]
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	000087b4 			; <UNDEFINED> instruction: 0x000087b4
  94:	00000020 	andeq	r0, r0, r0, lsr #32
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	18470002 	stmdane	r7, {r1}^
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	000087d4 	ldrdeq	r8, [r0], -r4
  b4:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	1e9f0002 	cdpne	0, 9, cr0, cr15, cr2, {0}
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	00008cc4 	andeq	r8, r0, r4, asr #25
  d4:	00000020 	andeq	r0, r0, r0, lsr #32
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	1f5b0002 	svcne	0x005b0002
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	00008ce4 	andeq	r8, r0, r4, ror #25
  f4:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	205e0002 	subscs	r0, lr, r2
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	00008d0c 	andeq	r8, r0, ip, lsl #26
 114:	00000034 	andeq	r0, r0, r4, lsr r0
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	216d0002 	cmncs	sp, r2
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	00008d40 	andeq	r8, r0, r0, asr #26
 134:	00000074 	andeq	r0, r0, r4, ror r0
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	231e0002 	tstcs	lr, #2
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	00008db4 			; <UNDEFINED> instruction: 0x00008db4
 154:	00000098 	muleq	r0, r8, r0
	...
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	25190002 	ldrcs	r0, [r9, #-2]
 168:	00040000 	andeq	r0, r4, r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	00008eb0 			; <UNDEFINED> instruction: 0x00008eb0
 174:	00000154 	andeq	r0, r0, r4, asr r1
	...
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	291c0002 	ldmdbcs	ip, {r1}
 188:	00040000 	andeq	r0, r4, r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	00009004 	andeq	r9, r0, r4
 194:	000003ac 	andeq	r0, r0, ip, lsr #7
	...
 1a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a4:	2e880002 	cdpcs	0, 8, cr0, cr8, cr2, {0}
 1a8:	00040000 	andeq	r0, r4, r0
 1ac:	00000000 	andeq	r0, r0, r0
 1b0:	000093b0 			; <UNDEFINED> instruction: 0x000093b0
 1b4:	00000014 	andeq	r0, r0, r4, lsl r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	00000038 	andeq	r0, r0, r8, lsr r0
   4:	0000004c 	andeq	r0, r0, ip, asr #32
   8:	00000050 	andeq	r0, r0, r0, asr r0
   c:	000000e4 	andeq	r0, r0, r4, ror #1
	...
  18:	00008d40 	andeq	r8, r0, r0, asr #26
  1c:	00008db4 			; <UNDEFINED> instruction: 0x00008db4
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000017c 	andeq	r0, r0, ip, ror r1
   4:	01420002 	cmpeq	r2, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2f010000 	svccs	0x00010000
  1c:	2f727375 	svccs	0x00727375
  20:	61636f6c 	cmnvs	r3, ip, ror #30
  24:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
  28:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
  2c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
  30:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
  34:	61652d65 	cmnvs	r5, r5, ror #26
  38:	342f6962 	strtcc	r6, [pc], #-2402	; 40 <_start-0x7fc0>
  3c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
  40:	3173632d 	cmncc	r3, sp, lsr #6
  44:	2f653037 	svccs	0x00653037
  48:	2f62696c 	svccs	0x0062696c
  4c:	2f636367 	svccs	0x00636367
  50:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
  54:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
  58:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
  5c:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
  60:	2f332e38 	svccs	0x00332e38
  64:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  68:	00656475 	rsbeq	r6, r5, r5, ror r4
  6c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
  70:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
  74:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
  78:	2f6e756a 	svccs	0x006e756a
  7c:	6b736544 	blvs	1cd9594 <__bss_end__+0x1ccfa44>
  80:	2f706f74 	svccs	0x00706f74
  84:	6f686373 	svcvs	0x00686373
  88:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
  8c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
  90:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
  94:	53432f30 	movtpl	r2, #16176	; 0x3f30
  98:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
  9c:	3173632f 	cmncc	r3, pc, lsr #6
  a0:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
  a4:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
  a8:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
  ac:	00697062 	rsbeq	r7, r9, r2, rrx
  b0:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
  b4:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
  b8:	432f6c61 	teqmi	pc, #24832	; 0x6100
  bc:	616c6c65 	cmnvs	ip, r5, ror #24
  c0:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
  c4:	6f6e2d6d 	svcvs	0x006e2d6d
  c8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
  cc:	2f696261 	svccs	0x00696261
  d0:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
  d4:	73632d33 	cmnvc	r3, #3264	; 0xcc0
  d8:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
  dc:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
  e0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
  e4:	61652d65 	cmnvs	r5, r5, ror #26
  e8:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
  ec:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
  f0:	00006564 	andeq	r6, r0, r4, ror #10
  f4:	65672d33 	strbvs	r2, [r7, #-3379]!	; 0xd33
  f8:	742d7374 	strtvc	r7, [sp], #-884	; 0x374
  fc:	6f656d69 	svcvs	0x00656d69
 100:	742d7475 	strtvc	r7, [sp], #-1141	; 0x475
 104:	2e747365 	cdpcs	3, 7, cr7, cr4, cr5, {3}
 108:	00000063 	andeq	r0, r0, r3, rrx
 10c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
 110:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
 114:	00010068 	andeq	r0, r1, r8, rrx
 118:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
 11c:	2d746e69 	ldclcs	14, cr6, [r4, #-420]!	; 0xfffffe5c
 120:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
 124:	00010068 	andeq	r0, r1, r8, rrx
 128:	2d777300 	ldclcs	3, cr7, [r7, #-0]
 12c:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 130:	0000682e 	andeq	r6, r0, lr, lsr #16
 134:	70720000 	rsbsvc	r0, r2, r0
 138:	00682e69 	rsbeq	r2, r8, r9, ror #28
 13c:	73000002 	movwvc	r0, #2
 140:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
 144:	00682e67 	rsbeq	r2, r8, r7, ror #28
 148:	00000003 	andeq	r0, r0, r3
 14c:	10020500 	andne	r0, r2, r0, lsl #10
 150:	17000080 	strne	r0, [r0, -r0, lsl #1]
 154:	f4312f67 			; <UNDEFINED> instruction: 0xf4312f67
 158:	29523330 	ldmdbcs	r2, {r4, r5, r8, r9, ip, sp}^
 15c:	302e7603 	eorcc	r7, lr, r3, lsl #12
 160:	844bbc87 	strbhi	fp, [fp], #-3207	; 0xc87
 164:	01040200 	mrseq	r0, R12_usr
 168:	bc068206 	sfmlt	f0, 1, [r6], {6}
 16c:	6f03849f 	svcvs	0x0003849f
 170:	0402004a 	streq	r0, [r2], #-74	; 0x4a
 174:	062e0601 	strteq	r0, [lr], -r1, lsl #12
 178:	024a1303 	subeq	r1, sl, #201326592	; 0xc000000
 17c:	01010014 	tsteq	r1, r4, lsl r0
 180:	00000346 	andeq	r0, r0, r6, asr #6
 184:	01b60002 			; <UNDEFINED> instruction: 0x01b60002
 188:	01020000 	mrseq	r0, (UNDEF: 2)
 18c:	000d0efb 	strdeq	r0, [sp], -fp
 190:	01010101 	tsteq	r1, r1, lsl #2
 194:	01000000 	mrseq	r0, (UNDEF: 0)
 198:	2f010000 	svccs	0x00010000
 19c:	2f727375 	svccs	0x00727375
 1a0:	61636f6c 	cmnvs	r3, ip, ror #30
 1a4:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
 1a8:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
 1ac:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 1b0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 1b4:	61652d65 	cmnvs	r5, r5, ror #26
 1b8:	342f6962 	strtcc	r6, [pc], #-2402	; 1c0 <_start-0x7e40>
 1bc:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 1c0:	3173632d 	cmncc	r3, sp, lsr #6
 1c4:	2f653037 	svccs	0x00653037
 1c8:	2f62696c 	svccs	0x0062696c
 1cc:	2f636367 	svccs	0x00636367
 1d0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 1d4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 1d8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 1dc:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 1e0:	2f332e38 	svccs	0x00332e38
 1e4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 1e8:	00656475 	rsbeq	r6, r5, r5, ror r4
 1ec:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 1f0:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 1f4:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 1f8:	2f6e756a 	svccs	0x006e756a
 1fc:	6b736544 	blvs	1cd9714 <__bss_end__+0x1ccfbc4>
 200:	2f706f74 	svccs	0x00706f74
 204:	6f686373 	svcvs	0x00686373
 208:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 20c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 210:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 214:	53432f30 	movtpl	r2, #16176	; 0x3f30
 218:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 21c:	3173632f 	cmncc	r3, pc, lsr #6
 220:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 224:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 228:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 22c:	2f697062 	svccs	0x00697062
 230:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 234:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
 238:	2f006372 	svccs	0x00006372
 23c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 240:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 244:	6a6e6169 	bvs	1b987f0 <__bss_end__+0x1b8eca0>
 248:	442f6e75 	strtmi	r6, [pc], #-3701	; 250 <_start-0x7db0>
 24c:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 250:	732f706f 	teqvc	pc, #111	; 0x6f
 254:	6f6f6863 	svcvs	0x006f6863
 258:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 25c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 260:	30323931 	eorscc	r3, r2, r1, lsr r9
 264:	3153432f 	cmpcc	r3, pc, lsr #6
 268:	2f453034 	svccs	0x00453034
 26c:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 270:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 274:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 278:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 27c:	2f006970 	svccs	0x00006970
 280:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 284:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 288:	6a6e6169 	bvs	1b98834 <__bss_end__+0x1b8ece4>
 28c:	442f6e75 	strtmi	r6, [pc], #-3701	; 294 <_start-0x7d6c>
 290:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 294:	732f706f 	teqvc	pc, #111	; 0x6f
 298:	6f6f6863 	svcvs	0x006f6863
 29c:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 2a0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 2a4:	30323931 	eorscc	r3, r2, r1, lsr r9
 2a8:	3153432f 	cmpcc	r3, pc, lsr #6
 2ac:	2f453034 	svccs	0x00453034
 2b0:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 2b4:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 2b8:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 2bc:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 2c0:	6c2f6970 	stcvs	9, cr6, [pc], #-448	; 108 <_start-0x7ef8>
 2c4:	00636269 	rsbeq	r6, r3, r9, ror #4
 2c8:	2d777300 	ldclcs	3, cr7, [r7, #-0]
 2cc:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 2d0:	0000632e 	andeq	r6, r0, lr, lsr #6
 2d4:	79630000 	stmdbvc	r3!, {}^	; <UNPREDICTABLE>
 2d8:	2d656c63 	stclcs	12, cr6, [r5, #-396]!	; 0xfffffe74
 2dc:	6c697475 	cfstrdvs	mvd7, [r9], #-468	; 0xfffffe2c
 2e0:	0000682e 	andeq	r6, r0, lr, lsr #16
 2e4:	74730000 	ldrbtvc	r0, [r3], #-0
 2e8:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
 2ec:	6363672d 	cmnvs	r3, #11796480	; 0xb40000
 2f0:	0100682e 	tsteq	r0, lr, lsr #16
 2f4:	77730000 	ldrbvc	r0, [r3, -r0]!
 2f8:	7261752d 	rsbvc	r7, r1, #188743680	; 0xb400000
 2fc:	00682e74 	rsbeq	r2, r8, r4, ror lr
 300:	73000000 	movwvc	r0, #0
 304:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
 308:	00682e67 	rsbeq	r2, r8, r7, ror #28
 30c:	67000001 	strvs	r0, [r0, -r1]
 310:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
 314:	00020068 	andeq	r0, r2, r8, rrx
 318:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 31c:	0300682e 	movweq	r6, #2094	; 0x82e
 320:	61760000 	cmnvs	r6, r0
 324:	6972702d 	ldmdbvs	r2!, {r0, r2, r3, r5, ip, sp, lr}^
 328:	2e6b746e 	cdpcs	4, 6, cr7, cr11, cr14, {3}
 32c:	00040068 	andeq	r0, r4, r8, rrx
 330:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xc00
 334:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
 338:	003e6e69 	eorseq	r6, lr, r9, ror #28
 33c:	00000000 	andeq	r0, r0, r0
 340:	28020500 	stmdacs	r2, {r8, sl}
 344:	1a000081 	bne	550 <_start-0x7ab0>
 348:	32302f4c 	eorscc	r2, r0, #76, 30	; 0x130
 34c:	03350204 	teqeq	r5, #4, 4	; 0x40000000
 350:	01046673 	tsteq	r4, r3, ror r6
 354:	04820a03 	streq	r0, [r2], #2563	; 0xa03
 358:	73033102 	movwvc	r3, #12546	; 0x3102
 35c:	03010466 	movweq	r0, #5222	; 0x1466
 360:	0204820c 	andeq	r8, r4, #12, 4	; 0xc0000000
 364:	6673032f 	ldrbtvs	r0, [r3], -pc, lsr #6
 368:	0e030104 	adfeqs	f0, f3, f4
 36c:	2d020482 	cfstrscs	mvf0, [r2, #-520]	; 0xfffffdf8
 370:	04667303 	strbteq	r7, [r6], #-771	; 0x303
 374:	82100301 	andshi	r0, r0, #67108864	; 0x4000000
 378:	032b0204 	teqeq	fp, #4, 4	; 0x40000000
 37c:	01046673 	tsteq	r4, r3, ror r6
 380:	04821203 	streq	r1, [r2], #515	; 0x203
 384:	73032902 	movwvc	r2, #14594	; 0x3902
 388:	03010466 	movweq	r0, #5222	; 0x1466
 38c:	02048214 	andeq	r8, r4, #20, 4	; 0x40000001
 390:	032e7903 	teqeq	lr, #49152	; 0xc000
 394:	01046673 	tsteq	r4, r3, ror r6
 398:	04821603 	streq	r1, [r2], #1539	; 0x603
 39c:	2e770302 	cdpcs	3, 7, cr0, cr7, cr2, {0}
 3a0:	04667303 	strbteq	r7, [r6], #-771	; 0x303
 3a4:	82180301 	andshi	r0, r8, #67108864	; 0x4000000
 3a8:	75030204 	strvc	r0, [r3, #-516]	; 0x204
 3ac:	6673032e 	ldrbtvs	r0, [r3], -lr, lsr #6
 3b0:	1a030104 	bne	c07c8 <__bss_end__+0xb6c78>
 3b4:	03020482 	movweq	r0, #9346	; 0x2482
 3b8:	73032e73 	movwvc	r2, #15987	; 0x3e73
 3bc:	03010466 	movweq	r0, #5222	; 0x1466
 3c0:	1003821c 	andne	r8, r3, ip, lsl r2
 3c4:	034d4b2e 	movteq	r4, #56110	; 0xdb2e
 3c8:	844c2e70 	strbhi	r2, [ip], #-3696	; 0xe70
 3cc:	0d034883 	stceq	8, cr4, [r3, #-524]	; 0xfffffdf4
 3d0:	33314e2e 	teqcc	r1, #736	; 0x2e0
 3d4:	44030204 	strmi	r0, [r3], #-516	; 0x204
 3d8:	0301042e 	movweq	r0, #5166	; 0x142e
 3dc:	042f823e 	strteq	r8, [pc], #-574	; 3e4 <_start-0x7c1c>
 3e0:	66410302 	strbvs	r0, [r1], -r2, lsl #6
 3e4:	c1030104 	tstgt	r3, r4, lsl #2
 3e8:	042f8200 	strteq	r8, [pc], #-512	; 3f0 <_start-0x7c10>
 3ec:	7fbe0302 	svcvc	0x00be0302
 3f0:	03010482 	movweq	r0, #5250	; 0x1482
 3f4:	2f8200c4 	svccs	0x008200c4
 3f8:	bb030204 	bllt	c0c10 <__bss_end__+0xb70c0>
 3fc:	0104827f 	tsteq	r4, pc, ror r2
 400:	8200c703 	andhi	ip, r0, #786432	; 0xc0000
 404:	0302042f 	movweq	r0, #9263	; 0x242f
 408:	04827fb8 	streq	r7, [r2], #4024	; 0xfb8
 40c:	00ca0301 	sbceq	r0, sl, r1, lsl #6
 410:	02042f82 	andeq	r2, r4, #520	; 0x208
 414:	827fb503 	rsbshi	fp, pc, #12582912	; 0xc00000
 418:	cd030104 	stfgts	f0, [r3, #-16]
 41c:	042f8200 	strteq	r8, [pc], #-512	; 424 <_start-0x7bdc>
 420:	7fb20302 	svcvc	0x00b20302
 424:	03010482 	movweq	r0, #5250	; 0x1482
 428:	2f8200d0 	svccs	0x008200d0
 42c:	af030204 	svcge	0x00030204
 430:	0104827f 	tsteq	r4, pc, ror r2
 434:	8200d403 	andhi	sp, r0, #50331648	; 0x3000000
 438:	4c824c03 	stcmi	12, cr4, [r2], {3}
 43c:	03488384 	movteq	r8, #33668	; 0x8384
 440:	034e2e36 	movteq	r2, #60982	; 0xee36
 444:	29034a54 	stmdbcs	r3, {r2, r4, r6, r9, fp, lr}
 448:	9f34324a 	svcls	0x0034324a
 44c:	01040200 	mrseq	r0, R12_usr
 450:	bb064a06 	bllt	192c70 <__bss_end__+0x189120>
 454:	2cbb4b4e 	vldmiacs	fp!, {d4-<overflow reg d42>}
 458:	01040200 	mrseq	r0, R12_usr
 45c:	6d062e06 	stcvs	14, cr2, [r6, #-24]	; 0xffffffe8
 460:	0084a44c 	addeq	sl, r4, ip, asr #8
 464:	06010402 	streq	r0, [r1], -r2, lsl #8
 468:	4dbb064a 	ldcmi	6, cr0, [fp, #296]!	; 0x128
 46c:	02040200 	andeq	r0, r4, #0, 4
 470:	0402004b 	streq	r0, [r2], #-75	; 0x4b
 474:	02008102 	andeq	r8, r0, #-2147483648	; 0x80000000
 478:	2e060104 	adfcss	f0, f6, f4
 47c:	a54c4d06 	strbge	r4, [ip, #-3334]	; 0xd06
 480:	4f4b4bbc 	svcmi	0x004b4bbc
 484:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 488:	82820601 	addhi	r0, r2, #1048576	; 0x100000
 48c:	04040200 	streq	r0, [r4], #-512	; 0x200
 490:	0402009e 	streq	r0, [r2], #-158	; 0x9e
 494:	bd064a01 	vstrlt	s8, [r6, #-4]
 498:	4b2fbd88 	blmi	befac0 <__bss_end__+0xbe5f70>
 49c:	6724084b 	strvs	r0, [r4, -fp, asr #16]!
 4a0:	02040200 	andeq	r0, r4, #0, 4
 4a4:	0402002f 	streq	r0, [r2], #-47	; 0x2f
 4a8:	02004902 	andeq	r4, r0, #32768	; 0x8000
 4ac:	2e060104 	adfcss	f0, f6, f4
 4b0:	86346806 	ldrthi	r6, [r4], -r6, lsl #16
 4b4:	0200a04b 	andeq	sl, r0, #75	; 0x4b
 4b8:	66060104 	strvs	r0, [r6], -r4, lsl #2
 4bc:	0868bb06 	stmdaeq	r8!, {r1, r2, r8, r9, fp, ip, sp, pc}^
 4c0:	4b674b22 	blmi	19d3150 <__bss_end__+0x19c9600>
 4c4:	000a02bc 			; <UNDEFINED> instruction: 0x000a02bc
 4c8:	01020101 	tsteq	r2, r1, lsl #2
 4cc:	00020000 	andeq	r0, r2, r0
 4d0:	000000eb 	andeq	r0, r0, fp, ror #1
 4d4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 4d8:	0101000d 	tsteq	r1, sp
 4dc:	00000101 	andeq	r0, r0, r1, lsl #2
 4e0:	00000100 	andeq	r0, r0, r0, lsl #2
 4e4:	62696c01 	rsbvs	r6, r9, #256	; 0x100
 4e8:	752f0063 	strvc	r0, [pc, #-99]!	; 48d <_start-0x7b73>
 4ec:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 328 <_start-0x7cd8>
 4f0:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 4f4:	6c65432f 	stclvs	3, cr4, [r5], #-188	; 0xffffff44
 4f8:	2f72616c 	svccs	0x0072616c
 4fc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 500:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 504:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 508:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 50c:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
 510:	37317363 	ldrcc	r7, [r1, -r3, ror #6]!
 514:	6c2f6530 	cfstr32vs	mvfx6, [pc], #-192	; 45c <_start-0x7ba4>
 518:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
 51c:	612f6363 	teqvs	pc, r3, ror #6
 520:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 524:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 528:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 52c:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 530:	692f332e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, r9, ip, sp}	; <UNPREDICTABLE>
 534:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
 538:	2f006564 	svccs	0x00006564
 53c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 540:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 544:	6a6e6169 	bvs	1b98af0 <__bss_end__+0x1b8efa0>
 548:	442f6e75 	strtmi	r6, [pc], #-3701	; 550 <_start-0x7ab0>
 54c:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 550:	732f706f 	teqvc	pc, #111	; 0x6f
 554:	6f6f6863 	svcvs	0x006f6863
 558:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 55c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 560:	30323931 	eorscc	r3, r2, r1, lsr r9
 564:	3153432f 	cmpcc	r3, pc, lsr #6
 568:	2f453034 	svccs	0x00453034
 56c:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 570:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 574:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 578:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 57c:	00006970 	andeq	r6, r0, r0, ror r9
 580:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 584:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
 588:	00000100 	andeq	r0, r0, r0, lsl #2
 58c:	61647473 	smcvs	18243	; 0x4743
 590:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
 594:	00000200 	andeq	r0, r0, r0, lsl #4
 598:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
 59c:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
 5a0:	00003e6e 	andeq	r3, r0, lr, ror #28
 5a4:	70720000 	rsbsvc	r0, r2, r0
 5a8:	00682e69 	rsbeq	r2, r8, r9, ror #28
 5ac:	76000003 	strvc	r0, [r0], -r3
 5b0:	72702d61 	rsbsvc	r2, r0, #6208	; 0x1840
 5b4:	6b746e69 	blvs	1d1bf60 <__bss_end__+0x1d12410>
 5b8:	0100682e 	tsteq	r0, lr, lsr #16
 5bc:	00000000 	andeq	r0, r0, r0
 5c0:	87280205 	strhi	r0, [r8, -r5, lsl #4]!
 5c4:	6b170000 	blvs	5c05cc <__bss_end__+0x5b6a7c>
 5c8:	0289bf4b 	addeq	fp, r9, #300	; 0x12c
 5cc:	0101000e 	tsteq	r1, lr
 5d0:	00000096 	muleq	r0, r6, r0
 5d4:	006f0002 	rsbeq	r0, pc, r2
 5d8:	01020000 	mrseq	r0, (UNDEF: 2)
 5dc:	000d0efb 	strdeq	r0, [sp], -fp
 5e0:	01010101 	tsteq	r1, r1, lsl #2
 5e4:	01000000 	mrseq	r0, (UNDEF: 0)
 5e8:	6c010000 	stcvs	0, cr0, [r1], {-0}
 5ec:	00636269 	rsbeq	r6, r3, r9, ror #4
 5f0:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 5f4:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 5f8:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 5fc:	2f6e756a 	svccs	0x006e756a
 600:	6b736544 	blvs	1cd9b18 <__bss_end__+0x1ccffc8>
 604:	2f706f74 	svccs	0x00706f74
 608:	6f686373 	svcvs	0x00686373
 60c:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 610:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 614:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 618:	53432f30 	movtpl	r2, #16176	; 0x3f30
 61c:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 620:	3173632f 	cmncc	r3, pc, lsr #6
 624:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 628:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 62c:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 630:	00697062 	rsbeq	r7, r9, r2, rrx
 634:	74757000 	ldrbtvc	r7, [r5], #-0
 638:	00632e6b 	rsbeq	r2, r3, fp, ror #28
 63c:	72000001 	andvc	r0, r0, #1
 640:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 644:	00000200 	andeq	r0, r0, r0, lsl #4
 648:	02050000 	andeq	r0, r5, #0
 64c:	00008780 	andeq	r8, r0, r0, lsl #15
 650:	002d4c15 	eoreq	r4, sp, r5, lsl ip
 654:	2f020402 	svccs	0x00020402
 658:	02040200 	andeq	r0, r4, #0, 4
 65c:	04020049 	streq	r0, [r2], #-73	; 0x49
 660:	062e0601 	strteq	r0, [lr], -r1, lsl #12
 664:	0006026b 	andeq	r0, r6, fp, ror #4
 668:	00f10101 	rscseq	r0, r1, r1, lsl #2
 66c:	00020000 	andeq	r0, r2, r0
 670:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 674:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 678:	0101000d 	tsteq	r1, sp
 67c:	00000101 	andeq	r0, r0, r1, lsl #2
 680:	00000100 	andeq	r0, r0, r0, lsl #2
 684:	62696c01 	rsbvs	r6, r9, #256	; 0x100
 688:	752f0063 	strvc	r0, [pc, #-99]!	; 62d <_start-0x79d3>
 68c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 4c8 <_start-0x7b38>
 690:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 694:	6c65432f 	stclvs	3, cr4, [r5], #-188	; 0xffffff44
 698:	2f72616c 	svccs	0x0072616c
 69c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 6a0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 6a4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 6a8:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 6ac:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
 6b0:	37317363 	ldrcc	r7, [r1, -r3, ror #6]!
 6b4:	6c2f6530 	cfstr32vs	mvfx6, [pc], #-192	; 5fc <_start-0x7a04>
 6b8:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
 6bc:	612f6363 	teqvs	pc, r3, ror #6
 6c0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 6c4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 6c8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 6cc:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
 6d0:	692f332e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, r9, ip, sp}	; <UNPREDICTABLE>
 6d4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
 6d8:	2f006564 	svccs	0x00006564
 6dc:	2f727375 	svccs	0x00727375
 6e0:	61636f6c 	cmnvs	r3, ip, ror #30
 6e4:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
 6e8:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
 6ec:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 6f0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 6f4:	61652d65 	cmnvs	r5, r5, ror #26
 6f8:	342f6962 	strtcc	r6, [pc], #-2402	; 700 <_start-0x7900>
 6fc:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 700:	3173632d 	cmncc	r3, sp, lsr #6
 704:	2f653037 	svccs	0x00653037
 708:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 70c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 710:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 714:	6e692f69 	cdpvs	15, 6, cr2, cr9, cr9, {3}
 718:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
 71c:	73000065 	movwvc	r0, #101	; 0x65
 720:	656c7274 	strbvs	r7, [ip, #-628]!	; 0x274
 724:	00632e6e 	rsbeq	r2, r3, lr, ror #28
 728:	73000001 	movwvc	r0, #1
 72c:	65646474 	strbvs	r6, [r4, #-1140]!	; 0x474
 730:	00682e66 	rsbeq	r2, r8, r6, ror #28
 734:	73000002 	movwvc	r0, #2
 738:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
 73c:	00682e67 	rsbeq	r2, r8, r7, ror #28
 740:	00000003 	andeq	r0, r0, r3
 744:	b4020500 	strlt	r0, [r2], #-1280	; 0x500
 748:	14000087 	strne	r0, [r0], #-135	; 0x87
 74c:	04020014 	streq	r0, [r2], #-20
 750:	004a0602 	subeq	r0, sl, r2, lsl #12
 754:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 758:	04026906 	streq	r6, [r2], #-2310	; 0x906
 75c:	dc010100 	stfles	f0, [r1], {-0}
 760:	02000001 	andeq	r0, r0, #1
 764:	0000df00 	andeq	sp, r0, r0, lsl #30
 768:	fb010200 	blx	40f72 <__bss_end__+0x37422>
 76c:	01000d0e 	tsteq	r0, lr, lsl #26
 770:	00010101 	andeq	r0, r1, r1, lsl #2
 774:	00010000 	andeq	r0, r1, r0
 778:	696c0100 	stmdbvs	ip!, {r8}^
 77c:	2f006362 	svccs	0x00006362
 780:	2f727375 	svccs	0x00727375
 784:	61636f6c 	cmnvs	r3, ip, ror #30
 788:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
 78c:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
 790:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 794:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 798:	61652d65 	cmnvs	r5, r5, ror #26
 79c:	342f6962 	strtcc	r6, [pc], #-2402	; 7a4 <_start-0x785c>
 7a0:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
 7a4:	3173632d 	cmncc	r3, sp, lsr #6
 7a8:	2f653037 	svccs	0x00653037
 7ac:	2f62696c 	svccs	0x0062696c
 7b0:	2f636367 	svccs	0x00636367
 7b4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 7b8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
 7bc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 7c0:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
 7c4:	2f332e38 	svccs	0x00332e38
 7c8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 7cc:	00656475 	rsbeq	r6, r5, r5, ror r4
 7d0:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 7d4:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 7d8:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 7dc:	2f6e756a 	svccs	0x006e756a
 7e0:	6b736544 	blvs	1cd9cf8 <__bss_end__+0x1cd01a8>
 7e4:	2f706f74 	svccs	0x00706f74
 7e8:	6f686373 	svcvs	0x00686373
 7ec:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 7f0:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 7f4:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 7f8:	53432f30 	movtpl	r2, #16176	; 0x3f30
 7fc:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 800:	3173632f 	cmncc	r3, pc, lsr #6
 804:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 808:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 80c:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 810:	00697062 	rsbeq	r7, r9, r2, rrx
 814:	2d617600 	stclcs	6, cr7, [r1, #-0]
 818:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 81c:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
 820:	00000100 	andeq	r0, r0, r0, lsl #2
 824:	61647473 	smcvs	18243	; 0x4743
 828:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
 82c:	00000200 	andeq	r0, r0, r0, lsl #4
 830:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 834:	00030068 	andeq	r0, r3, r8, rrx
 838:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xc00
 83c:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
 840:	003e6e69 	eorseq	r6, lr, r9, ror #28
 844:	00000000 	andeq	r0, r0, r0
 848:	d4020500 	strle	r0, [r2], #-1280	; 0x500
 84c:	03000087 	movweq	r0, #135	; 0x87
 850:	a5010126 	strge	r0, [r1, #-294]	; 0x126
 854:	002d3113 	eoreq	r3, sp, r3, lsl r1
 858:	2f020402 	svccs	0x00020402
 85c:	02040200 	andeq	r0, r4, #0, 4
 860:	0402002d 	streq	r0, [r2], #-45	; 0x2d
 864:	02002f02 	andeq	r2, r0, #2, 30
 868:	4c2d0104 	stfmis	f0, [sp], #-16
 86c:	4b14304c 	blmi	50c9a4 <__bss_end__+0x502e54>
 870:	02004f2f 	andeq	r4, r0, #47, 30	; 0xbc
 874:	00670204 	rsbeq	r0, r7, r4, lsl #4
 878:	65010402 	strvs	r0, [r1, #-1026]	; 0x402
 87c:	a0304d4c 	eorsge	r4, r0, ip, asr #26
 880:	0230312f 	eorseq	r3, r0, #-1073741813	; 0xc000000b
 884:	2d841626 	stccs	6, cr1, [r4, #152]	; 0x98
 888:	0402002c 	streq	r0, [r2], #-44	; 0x2c
 88c:	02003001 	andeq	r3, r0, #1
 890:	06330104 	ldrteq	r0, [r3], -r4, lsl #2
 894:	04020066 	streq	r0, [r2], #-102	; 0x66
 898:	02002e01 	andeq	r2, r0, #1, 28
 89c:	08060104 	stmdaeq	r6, {r2, r8}
 8a0:	032f6721 	teqeq	pc, #8650752	; 0x840000
 8a4:	13038273 	movwne	r8, #12915	; 0x3273
 8a8:	0402002e 	streq	r0, [r2], #-46	; 0x2e
 8ac:	002e0601 	eoreq	r0, lr, r1, lsl #12
 8b0:	06010402 	streq	r0, [r1], -r2, lsl #8
 8b4:	034b6a9f 	movteq	r6, #47775	; 0xba9f
 8b8:	21032e67 	tstcs	r3, r7, ror #28
 8bc:	0402002e 	streq	r0, [r2], #-46	; 0x2e
 8c0:	002e0601 	eoreq	r0, lr, r1, lsl #12
 8c4:	06010402 	streq	r0, [r1], -r2, lsl #8
 8c8:	0402009f 	streq	r0, [r2], #-159	; 0x9f
 8cc:	f3bd6a01 	vtbl.8	d6, {d13-d15}, d1
 8d0:	087fa603 	ldmdaeq	pc!, {r0, r1, r9, sl, sp, pc}^	; <UNPREDICTABLE>
 8d4:	02002f20 	andeq	r2, r0, #32, 30	; 0x80
 8d8:	4a060104 	bmi	180cf0 <__bss_end__+0x1771a0>
 8dc:	2f4bbb06 	svccs	0x004bbb06
 8e0:	f200da03 	vpmax.s8	d13, d0, d3
 8e4:	31484c83 	smlalbbcc	r4, r8, r3, ip
 8e8:	4b842f2f 	blmi	fe10c5ac <__bss_end__+0xfe102a5c>
 8ec:	314d2d2f 	cmpcc	sp, pc, lsr #26
 8f0:	00832f30 	addeq	r2, r3, r0, lsr pc
 8f4:	2c010402 	cfstrscs	mvf0, [r1], {2}
 8f8:	040200be 	streq	r0, [r2], #-190	; 0xbe
 8fc:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 900:	163602bc 			; <UNDEFINED> instruction: 0x163602bc
 904:	08ba0e03 	ldmeq	sl!, {r0, r1, r9, sl, fp}
 908:	21083021 	tstcs	r8, r1, lsr #32
 90c:	30210831 	eorcc	r0, r1, r1, lsr r8
 910:	4b302108 	blmi	c08d38 <__bss_end__+0xbff1e8>
 914:	30210830 	eorcc	r0, r1, r0, lsr r8
 918:	002f31d9 	ldrdeq	r3, [pc], -r9	; <UNPREDICTABLE>
 91c:	65010402 	strvs	r0, [r1, #-1026]	; 0x402
 920:	02040200 	andeq	r0, r4, #0, 4
 924:	02004a06 	andeq	r4, r0, #24576	; 0x6000
 928:	03060104 	movweq	r0, #24836	; 0x6104
 92c:	02006642 	andeq	r6, r0, #69206016	; 0x4200000
 930:	66060204 	strvs	r0, [r6], -r4, lsl #4
 934:	00c20306 	sbceq	r0, r2, r6, lsl #6
 938:	1002684a 	andne	r6, r2, sl, asr #16
 93c:	43010100 	movwmi	r0, #4352	; 0x1100
 940:	02000000 	andeq	r0, r0, #0
 944:	00002900 	andeq	r2, r0, r0, lsl #18
 948:	fb010200 	blx	41152 <__bss_end__+0x37602>
 94c:	01000d0e 	tsteq	r0, lr, lsl #26
 950:	00010101 	andeq	r0, r1, r1, lsl #2
 954:	00010000 	andeq	r0, r1, r0
 958:	73630100 	cmnvc	r3, #0, 2
 95c:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 960:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 964:	61630000 	cmnvs	r3, r0
 968:	2e656863 	cdpcs	8, 6, cr6, cr5, cr3, {3}
 96c:	00010063 	andeq	r0, r1, r3, rrx
 970:	05000000 	streq	r0, [r0, #-0]
 974:	008cc402 	addeq	ip, ip, r2, lsl #8
 978:	30141400 	andscc	r1, r4, r0, lsl #8
 97c:	31144e2f 	tstcc	r4, pc, lsr #28
 980:	0004022f 	andeq	r0, r4, pc, lsr #4
 984:	00930101 	addseq	r0, r3, r1, lsl #2
 988:	00020000 	andeq	r0, r2, r0
 98c:	0000007d 	andeq	r0, r0, sp, ror r0
 990:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 994:	0101000d 	tsteq	r1, sp
 998:	00000101 	andeq	r0, r0, r1, lsl #2
 99c:	00000100 	andeq	r0, r0, r0, lsl #2
 9a0:	31736301 	cmncc	r3, r1, lsl #6
 9a4:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 9a8:	00637273 	rsbeq	r7, r3, r3, ror r2
 9ac:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 9b0:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 9b4:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 9b8:	2f6e756a 	svccs	0x006e756a
 9bc:	6b736544 	blvs	1cd9ed4 <__bss_end__+0x1cd0384>
 9c0:	2f706f74 	svccs	0x00706f74
 9c4:	6f686373 	svcvs	0x00686373
 9c8:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 9cc:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 9d0:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 9d4:	53432f30 	movtpl	r2, #16176	; 0x3f30
 9d8:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 9dc:	3173632f 	cmncc	r3, pc, lsr #6
 9e0:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 9e4:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 9e8:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 9ec:	00697062 	rsbeq	r7, r9, r2, rrx
 9f0:	656c6300 	strbvs	r6, [ip, #-768]!	; 0x300
 9f4:	722d6e61 	eorvc	r6, sp, #1552	; 0x610
 9f8:	6f6f6265 	svcvs	0x006f6265
 9fc:	00632e74 	rsbeq	r2, r3, r4, ror lr
 a00:	72000001 	andvc	r0, r0, #1
 a04:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 a08:	00000200 	andeq	r0, r0, r0, lsl #4
 a0c:	02050000 	andeq	r0, r5, #0
 a10:	00008ce4 	andeq	r8, r0, r4, ror #25
 a14:	4b832f15 	blmi	fe0cc670 <__bss_end__+0xfe0c2b20>
 a18:	01000602 	tsteq	r0, r2, lsl #12
 a1c:	00009601 	andeq	r9, r0, r1, lsl #12
 a20:	77000200 	strvc	r0, [r0, -r0, lsl #4]
 a24:	02000000 	andeq	r0, r0, #0
 a28:	0d0efb01 	vstreq	d15, [lr, #-4]
 a2c:	01010100 	mrseq	r0, (UNDEF: 17)
 a30:	00000001 	andeq	r0, r0, r1
 a34:	01000001 	tsteq	r0, r1
 a38:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 a3c:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
 a40:	2f006372 	svccs	0x00006372
 a44:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 a48:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
 a4c:	6a6e6169 	bvs	1b98ff8 <__bss_end__+0x1b8f4a8>
 a50:	442f6e75 	strtmi	r6, [pc], #-3701	; a58 <_start-0x75a8>
 a54:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
 a58:	732f706f 	teqvc	pc, #111	; 0x6f
 a5c:	6f6f6863 	svcvs	0x006f6863
 a60:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 a64:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 a68:	30323931 	eorscc	r3, r2, r1, lsr r9
 a6c:	3153432f 	cmpcc	r3, pc, lsr #6
 a70:	2f453034 	svccs	0x00453034
 a74:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 a78:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
 a7c:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
 a80:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 a84:	00006970 	andeq	r6, r0, r0, ror r9
 a88:	61747363 	cmnvs	r4, r3, ror #6
 a8c:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
 a90:	00000100 	andeq	r0, r0, r0, lsl #2
 a94:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 a98:	00020068 	andeq	r0, r2, r8, rrx
 a9c:	05000000 	streq	r0, [r0, #-0]
 aa0:	008d0c02 	addeq	r0, sp, r2, lsl #24
 aa4:	31321400 	teqcc	r2, r0, lsl #8
 aa8:	002f2d2f 	eoreq	r2, pc, pc, lsr #26
 aac:	49010402 	stmdbmi	r1, {r1, sl}
 ab0:	06022f4d 	streq	r2, [r2], -sp, asr #30
 ab4:	99010100 	stmdbls	r1, {r8}
 ab8:	02000000 	andeq	r0, r0, #0
 abc:	00007700 	andeq	r7, r0, r0, lsl #14
 ac0:	fb010200 	blx	412ca <__bss_end__+0x3777a>
 ac4:	01000d0e 	tsteq	r0, lr, lsl #26
 ac8:	00010101 	andeq	r0, r1, r1, lsl #2
 acc:	00010000 	andeq	r0, r1, r0
 ad0:	73630100 	cmnvc	r3, #0, 2
 ad4:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 ad8:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 adc:	73552f00 	cmpvc	r5, #0, 30
 ae0:	2f737265 	svccs	0x00737265
 ae4:	61697262 	cmnvs	r9, r2, ror #4
 ae8:	6e756a6e 	vsubvs.f32	s13, s10, s29
 aec:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 af0:	706f746b 	rsbvc	r7, pc, fp, ror #8
 af4:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 af8:	2f6c6f6f 	svccs	0x006c6f6f
 afc:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 b00:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 b04:	432f3032 	teqmi	pc, #50	; 0x32
 b08:	30343153 	eorscc	r3, r4, r3, asr r1
 b0c:	73632f45 	cmnvc	r3, #276	; 0x114
 b10:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 b14:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 b18:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 97c <_start-0x7684>
 b1c:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 b20:	65720000 	ldrbvs	r0, [r2, #-0]!
 b24:	746f6f62 	strbtvc	r6, [pc], #-3938	; b2c <_start-0x74d4>
 b28:	0100632e 	tsteq	r0, lr, lsr #6
 b2c:	70720000 	rsbsvc	r0, r2, r0
 b30:	00682e69 	rsbeq	r2, r8, r9, ror #28
 b34:	00000002 	andeq	r0, r0, r2
 b38:	40020500 	andmi	r0, r2, r0, lsl #10
 b3c:	0300008d 	movweq	r0, #141	; 0x8d
 b40:	3114010d 	tstcc	r4, sp, lsl #2
 b44:	2f15852f 	svccs	0x0015852f
 b48:	672f4d4b 	strvs	r4, [pc, -fp, asr #26]!
 b4c:	02675235 	rsbeq	r5, r7, #1342177283	; 0x50000003
 b50:	01010010 	tsteq	r1, r0, lsl r0
 b54:	000000a5 	andeq	r0, r0, r5, lsr #1
 b58:	00760002 	rsbseq	r0, r6, r2
 b5c:	01020000 	mrseq	r0, (UNDEF: 2)
 b60:	000d0efb 	strdeq	r0, [sp], -fp
 b64:	01010101 	tsteq	r1, r1, lsl #2
 b68:	01000000 	mrseq	r0, (UNDEF: 0)
 b6c:	63010000 	movwvs	r0, #4096	; 0x1000
 b70:	30343173 	eorscc	r3, r4, r3, ror r1
 b74:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 b78:	552f0063 	strpl	r0, [pc, #-99]!	; b1d <_start-0x74e3>
 b7c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 b80:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
 b84:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
 b88:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
 b8c:	6f746b73 	svcvs	0x00746b73
 b90:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
 b94:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 9fc <_start-0x7604>
 b98:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
 b9c:	31726574 	cmncc	r2, r4, ror r5
 ba0:	2f303239 	svccs	0x00303239
 ba4:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
 ba8:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
 bac:	30343173 	eorscc	r3, r4, r3, ror r1
 bb0:	30322d65 	eorscc	r2, r2, r5, ror #26
 bb4:	2f6e6977 	svccs	0x006e6977
 bb8:	7062696c 	rsbvc	r6, r2, ip, ror #18
 bbc:	74000069 	strvc	r0, [r0], #-105	; 0x69
 bc0:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 bc4:	0100632e 	tsteq	r0, lr, lsr #6
 bc8:	70720000 	rsbsvc	r0, r2, r0
 bcc:	00682e69 	rsbeq	r2, r8, r9, ror #28
 bd0:	00000002 	andeq	r0, r0, r2
 bd4:	b4020500 	strlt	r0, [r2], #-1280	; 0x500
 bd8:	1600008d 	strne	r0, [r0], -sp, lsl #1
 bdc:	002d2f13 	eoreq	r2, sp, r3, lsl pc
 be0:	06010402 	streq	r0, [r1], -r2, lsl #8
 be4:	3168062e 	cmncc	r8, lr, lsr #12
 be8:	2f4d4b2f 	svccs	0x004d4b2f
 bec:	4c304b2f 	ldcmi	11, cr4, [r0], #-188	; 0xffffff44
 bf0:	6a2f4c4b 	bvs	bd3d24 <__bss_end__+0xbca1d4>
 bf4:	2f842f2f 	svccs	0x00842f2f
 bf8:	01000802 	tsteq	r0, r2, lsl #16
 bfc:	00007701 	andeq	r7, r0, r1, lsl #14
 c00:	3b000200 	blcc	1408 <_start-0x6bf8>
 c04:	02000000 	andeq	r0, r0, #0
 c08:	0d0efb01 	vstreq	d15, [lr, #-4]
 c0c:	01010100 	mrseq	r0, (UNDEF: 17)
 c10:	00000001 	andeq	r0, r0, r1
 c14:	01000001 	tsteq	r0, r1
 c18:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 c1c:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
 c20:	00006372 	andeq	r6, r0, r2, ror r3
 c24:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 c28:	0000632e 	andeq	r6, r0, lr, lsr #6
 c2c:	70670000 	rsbvc	r0, r7, r0
 c30:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
 c34:	00000100 	andeq	r0, r0, r0, lsl #2
 c38:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
 c3c:	00000068 	andeq	r0, r0, r8, rrx
 c40:	05000000 	streq	r0, [r0, #-0]
 c44:	008eb002 	addeq	fp, lr, r2
 c48:	00d60300 	sbcseq	r0, r6, r0, lsl #6
 c4c:	03672f01 	cmneq	r7, #1, 30
 c50:	3330665e 	teqcc	r0, #98566144	; 0x5e00000
 c54:	d8306d67 	ldmdale	r0!, {r0, r1, r2, r5, r6, r8, sl, fp, sp, lr}
 c58:	67676730 			; <UNDEFINED> instruction: 0x67676730
 c5c:	03686767 	cmneq	r8, #27000832	; 0x19c0000
 c60:	6730820a 	ldrvs	r8, [r0, -sl, lsl #4]!
 c64:	672f6967 	strvs	r6, [pc, -r7, ror #18]!
 c68:	c1674c6a 	cmngt	r7, sl, ror #24
 c6c:	2f302f2f 	svccs	0x00302f2f
 c70:	02304968 	eorseq	r4, r0, #104, 18	; 0x1a0000
 c74:	01010002 	tsteq	r1, r2
 c78:	000000a5 	andeq	r0, r0, r5, lsr #1
 c7c:	00320002 	eorseq	r0, r2, r2
 c80:	01020000 	mrseq	r0, (UNDEF: 2)
 c84:	000d0efb 	strdeq	r0, [sp], -fp
 c88:	01010101 	tsteq	r1, r1, lsl #2
 c8c:	01000000 	mrseq	r0, (UNDEF: 0)
 c90:	63010000 	movwvs	r0, #4096	; 0x1000
 c94:	30343173 	eorscc	r3, r4, r3, ror r1
 c98:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 c9c:	67000063 	strvs	r0, [r0, -r3, rrx]
 ca0:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
 ca4:	00000063 	andeq	r0, r0, r3, rrx
 ca8:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 cac:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 cb0:	00000001 	andeq	r0, r0, r1
 cb4:	04020500 	streq	r0, [r2], #-1280	; 0x500
 cb8:	03000090 	movweq	r0, #144	; 0x90
 cbc:	504e013e 	subpl	r0, lr, lr, lsr r1
 cc0:	67210869 	strvs	r0, [r1, -r9, ror #16]!
 cc4:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
 cc8:	084b3267 	stmdaeq	fp, {r0, r1, r2, r5, r6, r9, ip, sp}^
 ccc:	5131dc22 	teqpl	r1, r2, lsr #24
 cd0:	30504e13 	subscc	r4, r0, r3, lsl lr
 cd4:	135031be 	cmpne	r0, #-2147483601	; 0x8000002f
 cd8:	c0304f4d 	eorsgt	r4, r0, sp, asr #30
 cdc:	0869504c 	stmdaeq	r9!, {r2, r3, r6, ip, lr}^
 ce0:	67676721 	strbvs	r6, [r7, -r1, lsr #14]!
 ce4:	32676767 	rsbcc	r6, r7, #27000832	; 0x19c0000
 ce8:	a421084b 	strtge	r0, [r1], #-2123	; 0x84b
 cec:	842f504c 	strthi	r5, [pc], #-76	; cf4 <_start-0x730c>
 cf0:	82750369 	rsbshi	r0, r5, #-1543503871	; 0xa4000001
 cf4:	4d2e0c03 	stcmi	12, cr0, [lr, #-12]!
 cf8:	98034e30 	stmdals	r3, {r4, r5, r9, sl, fp, lr}
 cfc:	13514a7f 	cmpne	r1, #520192	; 0x7f000
 d00:	a530504e 	ldrge	r5, [r0, #-78]!	; 0x4e
 d04:	4f4d1350 	svcmi	0x004d1350
 d08:	00c20330 	sbceq	r0, r2, r0, lsr r3
 d0c:	696b6aba 	stmdbvs	fp!, {r1, r3, r4, r5, r7, r9, fp, sp, lr}^
 d10:	67672108 	strbvs	r2, [r7, -r8, lsl #2]!
 d14:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
 d18:	22084b32 	andcs	r4, r8, #51200	; 0xc800
 d1c:	01000c02 	tsteq	r0, r2, lsl #24
 d20:	00008601 	andeq	r8, r0, r1, lsl #12
 d24:	72000200 	andvc	r0, r0, #0, 4
 d28:	02000000 	andeq	r0, r0, #0
 d2c:	0d0efb01 	vstreq	d15, [lr, #-4]
 d30:	01010100 	mrseq	r0, (UNDEF: 17)
 d34:	00000001 	andeq	r0, r0, r1
 d38:	01000001 	tsteq	r0, r1
 d3c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 d40:	73552f00 	cmpvc	r5, #0, 30
 d44:	2f737265 	svccs	0x00737265
 d48:	61697262 	cmnvs	r9, r2, ror #4
 d4c:	6e756a6e 	vsubvs.f32	s13, s10, s29
 d50:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 d54:	706f746b 	rsbvc	r7, pc, fp, ror #8
 d58:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 d5c:	2f6c6f6f 	svccs	0x006c6f6f
 d60:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 d64:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 d68:	432f3032 	teqmi	pc, #50	; 0x32
 d6c:	30343153 	eorscc	r3, r4, r3, asr r1
 d70:	73632f45 	cmnvc	r3, #276	; 0x114
 d74:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 d78:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 d7c:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; be0 <_start-0x7420>
 d80:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 d84:	75700000 	ldrbvc	r0, [r0, #-0]!
 d88:	61686374 	smcvs	34356	; 0x8634
 d8c:	00632e72 	rsbeq	r2, r3, r2, ror lr
 d90:	72000001 	andvc	r0, r0, #1
 d94:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
 d98:	00000200 	andeq	r0, r0, r0, lsl #4
 d9c:	02050000 	andeq	r0, r5, #0
 da0:	000093b0 			; <UNDEFINED> instruction: 0x000093b0
 da4:	06024a14 			; <UNDEFINED> instruction: 0x06024a14
 da8:	Address 0x0000000000000da8 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6c637963 	stclvs	9, cr7, [r3], #-396	; 0xfffffe74
   4:	65705f65 	ldrbvs	r5, [r0, #-3941]!	; 0xf65
   8:	69625f72 	stmdbvs	r2!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   c:	69730074 	ldmdbvs	r3!, {r2, r4, r5, r6}^
  10:	745f657a 	ldrbvc	r6, [pc], #-1402	; 18 <_start-0x7fe8>
  14:	5f777300 	svcpl	0x00777300
  18:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
  1c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
  20:	65685f74 	strbvs	r5, [r8, #-3956]!	; 0xf74
  24:	7265706c 	rsbvc	r7, r5, #108	; 0x6c
  28:	554e4700 	strbpl	r4, [lr, #-1792]	; 0x700
  2c:	34204320 	strtcc	r4, [r0], #-800	; 0x320
  30:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
  34:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
  38:	613d7570 	teqvs	sp, r0, ror r5
  3c:	31316d72 	teqcc	r1, r2, ror sp
  40:	7a6a3637 	bvc	1a8d924 <__bss_end__+0x1a83dd4>
  44:	20732d66 	rsbscs	r2, r3, r6, ror #26
  48:	75746d2d 	ldrbvc	r6, [r4, #-3373]!	; 0xd2d
  4c:	613d656e 	teqvs	sp, lr, ror #10
  50:	31316d72 	teqcc	r1, r2, ror sp
  54:	7a6a3637 	bvc	1a8d938 <__bss_end__+0x1a83de8>
  58:	20732d66 	rsbscs	r2, r3, r6, ror #26
  5c:	6467672d 	strbtvs	r6, [r7], #-1837	; 0x72d
  60:	4f2d2062 	svcmi	0x002d2062
  64:	732d2067 	teqvc	sp, #103	; 0x67
  68:	673d6474 			; <UNDEFINED> instruction: 0x673d6474
  6c:	3939756e 	ldmdbcc	r9!, {r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}
  70:	66662d20 	strbtvs	r2, [r6], -r0, lsr #26
  74:	73656572 	cmnvc	r5, #478150656	; 0x1c800000
  78:	646e6174 	strbtvs	r6, [lr], #-372	; 0x174
  7c:	00676e69 	rsbeq	r6, r7, r9, ror #28
  80:	6d746f6e 	ldclvs	15, cr6, [r4, #-440]!	; 0xfffffe48
  84:	006e6961 	rsbeq	r6, lr, r1, ror #18
  88:	65672d33 	strbvs	r2, [r7, #-3379]!	; 0xd33
  8c:	742d7374 	strtvc	r7, [sp], #-884	; 0x374
  90:	6f656d69 	svcvs	0x00656d69
  94:	742d7475 	strtvc	r7, [sp], #-1141	; 0x475
  98:	2e747365 	cdpcs	3, 7, cr7, cr4, cr5, {3}
  9c:	61750063 	cmnvs	r5, r3, rrx
  a0:	695f7472 	ldmdbvs	pc, {r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
  a4:	0074696e 	rsbseq	r6, r4, lr, ror #18
  a8:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  ac:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
  b0:	61686320 	cmnvs	r8, r0, lsr #6
  b4:	65640072 	strbvs	r0, [r4, #-114]!	; 0x72
  b8:	5f79616c 	svcpl	0x0079616c
  bc:	6300736d 	movwvs	r7, #877	; 0x36d
  c0:	6e61656c 	cdpvs	5, 6, cr6, cr1, cr12, {3}
  c4:	6265725f 	rsbvs	r7, r5, #-268435451	; 0xf0000005
  c8:	00746f6f 	rsbseq	r6, r4, pc, ror #30
  cc:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
  d0:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
  d4:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
  d8:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
  dc:	7300746e 	movwvc	r7, #1134	; 0x46e
  e0:	61755f77 	cmnvs	r5, r7, ror pc
  e4:	745f7472 	ldrbvc	r7, [pc], #-1138	; ec <_start-0x7f14>
  e8:	465f5f00 	ldrbmi	r5, [pc], -r0, lsl #30
  ec:	54434e55 	strbpl	r4, [r3], #-3669	; 0xe55
  f0:	5f4e4f49 	svcpl	0x004e4f49
  f4:	6f6c005f 	svcvs	0x006c005f
  f8:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
  fc:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 100:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 104:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
 108:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
 10c:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 110:	745f3874 	ldrbvc	r3, [pc], #-2164	; 118 <_start-0x7ee8>
 114:	75616200 	strbvc	r6, [r1, #-512]!	; 0x200
 118:	69730064 	ldmdbvs	r3!, {r2, r5, r6}^
 11c:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
 120:	6c006570 	cfstr32vs	mvfx6, [r0], {112}	; 0x70
 124:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 128:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 12c:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
 130:	6f687300 	svcvs	0x00687300
 134:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
 138:	6500746e 	strvs	r7, [r0, #-1134]	; 0x46e
 13c:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
 140:	61635f65 	cmnvs	r3, r5, ror #30
 144:	00656863 	rsbeq	r6, r5, r3, ror #16
 148:	755f7773 	ldrbvc	r7, [pc, #-1907]	; fffff9dd <__bss_end__+0xffff5e8d>
 14c:	5f747261 	svcpl	0x00747261
 150:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
 154:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
 158:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
 15c:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 160:	5f323374 	svcpl	0x00323374
 164:	74730074 	ldrbtvc	r0, [r3], #-116	; 0x74
 168:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
 16c:	73552f00 	cmpvc	r5, #0, 30
 170:	2f737265 	svccs	0x00737265
 174:	61697262 	cmnvs	r9, r2, ror #4
 178:	6e756a6e 	vsubvs.f32	s13, s10, s29
 17c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 180:	706f746b 	rsbvc	r7, pc, fp, ror #8
 184:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 188:	2f6c6f6f 	svccs	0x006c6f6f
 18c:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 190:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 194:	432f3032 	teqmi	pc, #50	; 0x32
 198:	30343153 	eorscc	r3, r4, r3, asr r1
 19c:	73632f45 	cmnvc	r3, #276	; 0x114
 1a0:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 1a4:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 1a8:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; c <_start-0x7ff4>
 1ac:	2f736261 	svccs	0x00736261
 1b0:	65642d38 	strbvs	r2, [r4, #-3384]!	; 0xd38
 1b4:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
 1b8:	746e692d 	strbtvc	r6, [lr], #-2349	; 0x92d
 1bc:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
 1c0:	2f737470 	svccs	0x00737470
 1c4:	742d3030 	strtvc	r3, [sp], #-48	; 0x30
 1c8:	2d747365 	ldclcs	3, cr7, [r4, #-404]!	; 0xfffffe6c
 1cc:	752d7773 	strvc	r7, [sp, #-1907]!	; 0x773
 1d0:	00747261 	rsbseq	r7, r4, r1, ror #4
 1d4:	5f637963 	svcpl	0x00637963
 1d8:	5f726570 	svcpl	0x00726570
 1dc:	00746962 	rsbseq	r6, r4, r2, ror #18
 1e0:	74697277 	strbtvc	r7, [r9], #-631	; 0x277
 1e4:	79635f65 	stmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 1e8:	6e755f63 	cdpvs	15, 7, cr5, cr5, cr3, {3}
 1ec:	006c6974 	rsbeq	r6, ip, r4, ror r9
 1f0:	755f7773 	ldrbvc	r7, [pc, #-1907]	; fffffa85 <__bss_end__+0xffff5f35>
 1f4:	5f747261 	svcpl	0x00747261
 1f8:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
 1fc:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
 200:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
 204:	5f777300 	svcpl	0x00777300
 208:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 20c:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 210:	6e755f73 	mrcvs	15, 3, r5, cr5, cr3, {3}
 214:	006c6974 	rsbeq	r6, ip, r4, ror r9
 218:	61765f5f 	cmnvs	r6, pc, asr pc
 21c:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
 220:	77730074 			; <UNDEFINED> instruction: 0x77730074
 224:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 228:	65675f74 	strbvs	r5, [r7, #-3956]!	; 0xf74
 22c:	64006374 	strvs	r6, [r0], #-884	; 0x374
 230:	76697265 	strbtvc	r7, [r9], -r5, ror #4
 234:	64006465 	strvs	r6, [r0], #-1125	; 0x465
 238:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 23c:	79636e5f 	stmdbvc	r3!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
 240:	73656c63 	cmnvc	r5, #25344	; 0x6300
 244:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
 248:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
 24c:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0x55f
 250:	77730063 	ldrbvc	r0, [r3, -r3, rrx]!
 254:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 258:	75705f74 	ldrbvc	r5, [r0, #-3956]!	; 0xf74
 25c:	73006374 	movwvc	r6, #884	; 0x374
 260:	61755f77 	cmnvs	r5, r7, ror pc
 264:	705f7472 	subsvc	r7, pc, r2, ror r4	; <UNPREDICTABLE>
 268:	006b7475 	rsbeq	r7, fp, r5, ror r4
 26c:	705f6176 	subsvc	r6, pc, r6, ror r1	; <UNPREDICTABLE>
 270:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
 274:	7773006b 	ldrbvc	r0, [r3, -fp, rrx]!
 278:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 27c:	72705f74 	rsbsvc	r5, r0, #116, 30	; 0x1d0
 280:	6b746e69 	blvs	1d1bc2c <__bss_end__+0x1d120dc>
 284:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 288:	65725f6f 	ldrbvs	r5, [r2, #-3951]!	; 0xf6f
 28c:	73006461 	movwvc	r6, #1121	; 0x461
 290:	61752d77 	cmnvs	r5, r7, ror sp
 294:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
 298:	61686300 	cmnvs	r8, r0, lsl #6
 29c:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
 2a0:	675f5f00 	ldrbvs	r5, [pc, -r0, lsl #30]
 2a4:	5f63756e 	svcpl	0x0063756e
 2a8:	6c5f6176 	ldfvse	f6, [pc], {118}	; 0x76
 2ac:	00747369 	rsbseq	r7, r4, r9, ror #6
 2b0:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xf5f
 2b4:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
 2b8:	675f7265 	ldrbvs	r7, [pc, -r5, ror #4]
 2bc:	755f7465 	ldrbvc	r7, [pc, #-1125]	; fffffe5f <__bss_end__+0xffff630f>
 2c0:	5f636573 	svcpl	0x00636573
 2c4:	00776172 	rsbseq	r6, r7, r2, ror r1
 2c8:	7479626e 	ldrbtvc	r6, [r9], #-622	; 0x26e
 2cc:	67007365 	strvs	r7, [r0, -r5, ror #6]
 2d0:	5f6f6970 	svcpl	0x006f6970
 2d4:	74697277 	strbtvc	r7, [r9], #-631	; 0x277
 2d8:	73750065 	cmnvc	r5, #101	; 0x65
 2dc:	745f6365 	ldrbvc	r6, [pc], #-869	; 2e4 <_start-0x7d1c>
 2e0:	6f656d69 	svcvs	0x00656d69
 2e4:	67007475 	smlsdxvs	r0, r5, r4, r7
 2e8:	5f6f6970 	svcpl	0x006f6970
 2ec:	5f746573 	svcpl	0x00746573
 2f0:	75706e69 	ldrbvc	r6, [r0, #-3689]!	; 0xe69
 2f4:	77730074 			; <UNDEFINED> instruction: 0x77730074
 2f8:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 2fc:	65675f74 	strbvs	r5, [r7, #-3956]!	; 0xf74
 300:	755f7374 	ldrbvc	r7, [pc, #-884]	; ffffff94 <__bss_end__+0xffff6444>
 304:	6c69746e 	cfstrdvs	mvd7, [r9], #-440	; 0xfffffe48
 308:	6b6c625f 	blvs	1b18c8c <__bss_end__+0x1b0f13c>
 30c:	615f5f00 	cmpvs	pc, r0, lsl #30
 310:	70670070 	rsbvc	r0, r7, r0, ror r0
 314:	735f6f69 	cmpvc	pc, #420	; 0x1a4
 318:	6f5f7465 	svcvs	0x005f7465
 31c:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0x475
 320:	61770074 	cmnvs	r7, r4, ror r0
 324:	755f7469 	ldrbvc	r7, [pc, #-1129]	; fffffec3 <__bss_end__+0xffff6373>
 328:	6c69746e 	cfstrdvs	mvd7, [r9], #-440	; 0xfffffe48
 32c:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0x55f
 330:	72610063 	rsbvc	r0, r1, #99	; 0x63
 334:	6c007367 	stcvs	3, cr7, [r0], {103}	; 0x67
 338:	2f636269 	svccs	0x00636269
 33c:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 340:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
 344:	73552f00 	cmpvc	r5, #0, 30
 348:	2f737265 	svccs	0x00737265
 34c:	61697262 	cmnvs	r9, r2, ror #4
 350:	6e756a6e 	vsubvs.f32	s13, s10, s29
 354:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 358:	706f746b 	rsbvc	r7, pc, fp, ror #8
 35c:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 360:	2f6c6f6f 	svccs	0x006c6f6f
 364:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
 368:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
 36c:	432f3032 	teqmi	pc, #50	; 0x32
 370:	30343153 	eorscc	r3, r4, r3, asr r1
 374:	73632f45 	cmnvc	r3, #276	; 0x114
 378:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 37c:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
 380:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 1e4 <_start-0x7e1c>
 384:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
 388:	62696c00 	rsbvs	r6, r9, #0, 24
 38c:	75702f63 	ldrbvc	r2, [r0, #-3939]!	; 0xf63
 390:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
 394:	746e6900 	strbtvc	r6, [lr], #-2304	; 0x900
 398:	616e7265 	cmnvs	lr, r5, ror #4
 39c:	75705f6c 	ldrbvc	r5, [r0, #-3948]!	; 0xf6c
 3a0:	72006b74 	andvc	r6, r0, #116, 22	; 0x1d000
 3a4:	705f6970 	subsvc	r6, pc, r0, ror r9	; <UNPREDICTABLE>
 3a8:	68637475 	stmdavs	r3!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
 3ac:	6c007261 	sfmvs	f7, 4, [r0], {97}	; 0x61
 3b0:	2f636269 	svccs	0x00636269
 3b4:	6c727473 	cfldrdvs	mvd7, [r2], #-460	; 0xfffffe34
 3b8:	632e6e65 	teqvs	lr, #1616	; 0x650
 3bc:	67656e00 	strbvs	r6, [r5, -r0, lsl #28]!
 3c0:	7200705f 	andvc	r7, r0, #95	; 0x5f
 3c4:	72657665 	rsbvc	r7, r5, #105906176	; 0x6500000
 3c8:	69006573 	stmdbvs	r0, {r0, r1, r4, r5, r6, r8, sl, sp, lr}
 3cc:	67696473 			; <UNDEFINED> instruction: 0x67696473
 3d0:	70007469 	andvc	r7, r0, r9, ror #8
 3d4:	5f737475 	svcpl	0x00737475
 3d8:	62007066 	andvs	r7, r0, #102	; 0x66
 3dc:	00657361 	rsbeq	r7, r5, r1, ror #6
 3e0:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
 3e4:	705f6465 	subsvc	r6, pc, r5, ror #8
 3e8:	62696c00 	rsbvs	r6, r9, #0, 24
 3ec:	61762f63 	cmnvs	r6, r3, ror #30
 3f0:	6972702d 	ldmdbvs	r2!, {r0, r2, r3, r5, ip, sp, lr}^
 3f4:	2e6b746e 	cdpcs	4, 6, cr7, cr11, cr14, {3}
 3f8:	70720063 	rsbsvc	r0, r2, r3, rrx
 3fc:	65735f69 	ldrbvs	r5, [r3, #-3945]!	; 0xf69
 400:	756f5f74 	strbvc	r5, [pc, #-3956]!	; fffff494 <__bss_end__+0xffff5944>
 404:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
 408:	64697700 	strbtvs	r7, [r9], #-1792	; 0x700
 40c:	70006874 	andvc	r6, r0, r4, ror r8
 410:	5f637475 	svcpl	0x00637475
 414:	65007066 	strvs	r7, [r0, #-102]	; 0x66
 418:	0074696d 	rsbseq	r6, r4, sp, ror #18
 41c:	61736964 	cmnvs	r3, r4, ror #18
 420:	5f656c62 	svcpl	0x00656c62
 424:	68636163 	stmdavs	r3!, {r0, r1, r5, r6, r8, sp, lr}^
 428:	73630065 	cmnvc	r3, #101	; 0x65
 42c:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 430:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 434:	6361632f 	cmnvs	r1, #-1140850688	; 0xbc000000
 438:	632e6568 	teqvs	lr, #104, 10	; 0x1a000000
 43c:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 440:	6265725f 	rsbvs	r7, r5, #-268435451	; 0xf0000005
 444:	00746f6f 	rsbseq	r6, r4, pc, ror #30
 448:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 44c:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
 450:	632f6372 	teqvs	pc, #-939524095	; 0xc8000001
 454:	6e61656c 	cdpvs	5, 6, cr6, cr1, cr12, {3}
 458:	6265722d 	rsbvs	r7, r5, #-805306366	; 0xd0000002
 45c:	2e746f6f 	cdpcs	15, 7, cr6, cr4, cr15, {3}
 460:	73630063 	cmnvc	r3, #99	; 0x63
 464:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 468:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 46c:	7473632f 	ldrbtvc	r6, [r3], #-815	; 0x32f
 470:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
 474:	5f5f0063 	svcpl	0x005f0063
 478:	5f737362 	svcpl	0x00737362
 47c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 480:	005f5f74 	subseq	r5, pc, r4, ror pc	; <UNPREDICTABLE>
 484:	73625f5f 	cmnvc	r2, #380	; 0x17c
 488:	6e655f73 	mcrvs	15, 3, r5, cr5, cr3, {3}
 48c:	005f5f64 	subseq	r5, pc, r4, ror #30
 490:	5f737362 	svcpl	0x00737362
 494:	00646e65 	rsbeq	r6, r4, r5, ror #28
 498:	7473635f 	ldrbtvc	r6, [r3], #-863	; 0x35f
 49c:	00747261 	rsbseq	r7, r4, r1, ror #4
 4a0:	755f7461 	ldrbvc	r7, [pc, #-1121]	; 47 <_start-0x7fb9>
 4a4:	5f726573 	svcpl	0x00726573
 4a8:	6576656c 	ldrbvs	r6, [r6, #-1388]!	; 0x56c
 4ac:	4d50006c 	ldclmi	0, cr0, [r0, #-432]	; 0xfffffe50
 4b0:	5341505f 	movtpl	r5, #4191	; 0x105f
 4b4:	524f5753 	subpl	r5, pc, #21757952	; 0x14c0000
 4b8:	73630044 	cmnvc	r3, #68	; 0x44
 4bc:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 4c0:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 4c4:	6265722f 	rsbvs	r7, r5, #-268435454	; 0xf0000002
 4c8:	2e746f6f 	cdpcs	15, 7, cr6, cr4, cr15, {3}
 4cc:	4d500063 	ldclmi	0, cr0, [r0, #-396]	; 0xfffffe74
 4d0:	5453525f 	ldrbpl	r5, [r3], #-607	; 0x25f
 4d4:	52575f43 	subspl	r5, r7, #268	; 0x10c
 4d8:	5f474643 	svcpl	0x00474643
 4dc:	4c4c5546 	cfstr64mi	mvdx5, [ip], {70}	; 0x46
 4e0:	5345525f 	movtpl	r5, #21087	; 0x525f
 4e4:	50005445 	andpl	r5, r0, r5, asr #8
 4e8:	44575f4d 	ldrbmi	r5, [r7], #-3917	; 0xf4d
 4ec:	7300474f 	movwvc	r4, #1871	; 0x74f
 4f0:	755f7465 	ldrbvc	r7, [pc, #-1125]	; 93 <_start-0x7f6d>
 4f4:	5f726573 	svcpl	0x00726573
 4f8:	6576656c 	ldrbvs	r6, [r6, #-1388]!	; 0x56c
 4fc:	5550006c 	ldrbpl	r0, [r0, #-108]	; 0x6c
 500:	00323354 	eorseq	r3, r2, r4, asr r3
 504:	525f4d50 	subspl	r4, pc, #80, 26	; 0x1400
 508:	00435453 	subeq	r5, r3, r3, asr r4
 50c:	72737063 	rsbsvc	r7, r3, #99	; 0x63
 510:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
 514:	7261625f 	rsbvc	r6, r1, #-268435451	; 0xf0000005
 518:	72656972 	rsbvc	r6, r5, #1867776	; 0x1c8000
 51c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 520:	735f7961 	cmpvc	pc, #1589248	; 0x184000
 524:	63006365 	movwvs	r6, #869	; 0x365
 528:	30343173 	eorscc	r3, r4, r3, ror r1
 52c:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 530:	69742f63 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
 534:	2e72656d 	cdpcs	5, 7, cr6, cr2, cr13, {3}
 538:	45470063 	strbmi	r0, [r7, #-99]	; 0x63
 53c:	00323354 	eorseq	r3, r2, r4, asr r3
 540:	6b636974 	blvs	18dab18 <__bss_end__+0x18d0fc8>
 544:	65640073 	strbvs	r0, [r4, #-115]!	; 0x73
 548:	5f79616c 	svcpl	0x0079616c
 54c:	6c637963 	stclvs	9, cr7, [r3], #-396	; 0xfffffe74
 550:	64007365 	strvs	r7, [r0], #-869	; 0x365
 554:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 558:	0073755f 	rsbseq	r7, r3, pc, asr r5
 55c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 560:	65675f72 	strbvs	r5, [r7, #-3954]!	; 0xf72
 564:	73755f74 	cmnvc	r5, #116, 30	; 0x1d0
 568:	41006365 	tstmi	r0, r5, ror #6
 56c:	4d5f5855 	ldclmi	8, cr5, [pc, #-340]	; 420 <_start-0x7be0>
 570:	434d5f55 	movtmi	r5, #57173	; 0xdf55
 574:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xf52
 578:	55410047 	strbpl	r0, [r1, #-71]	; 0x47
 57c:	554d5f58 	strbpl	r5, [sp, #-3928]	; 0xf58
 580:	5f4f495f 	svcpl	0x004f495f
 584:	00474552 	subeq	r4, r7, r2, asr r5
 588:	5f585541 	svcpl	0x00585541
 58c:	4d5f554d 	cfldr64mi	mvdx5, [pc, #-308]	; 460 <_start-0x7ba0>
 590:	525f5253 	subspl	r5, pc, #805306373	; 0x30000005
 594:	47004745 	strmi	r4, [r0, -r5, asr #14]
 598:	5f4f4950 	svcpl	0x004f4950
 59c:	434e5546 	movtmi	r5, #58694	; 0xe546
 5a0:	544c415f 	strbpl	r4, [ip], #-351	; 0x15f
 5a4:	61750030 	cmnvs	r5, r0, lsr r0
 5a8:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
 5ac:	675f6e61 	ldrbvs	r6, [pc, -r1, ror #28]
 5b0:	00637465 	rsbeq	r7, r3, r5, ror #8
 5b4:	5f585541 	svcpl	0x00585541
 5b8:	435f554d 	cmpmi	pc, #322961408	; 0x13400000
 5bc:	5f4c544e 	svcpl	0x004c544e
 5c0:	00474552 	subeq	r4, r7, r2, asr r5
 5c4:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 5c8:	7361685f 	cmnvc	r1, #6225920	; 0x5f0000
 5cc:	7461645f 	strbtvc	r6, [r1], #-1119	; 0x45f
 5d0:	50470061 	subpl	r0, r7, r1, rrx
 5d4:	465f4f49 	ldrbmi	r4, [pc], -r9, asr #30
 5d8:	5f434e55 	svcpl	0x00434e55
 5dc:	5054554f 	subspl	r5, r4, pc, asr #10
 5e0:	47005455 	smlsdmi	r0, r5, r4, r5
 5e4:	5f4f4950 	svcpl	0x004f4950
 5e8:	434e5546 	movtmi	r5, #58694	; 0xe546
 5ec:	544c415f 	strbpl	r4, [ip], #-351	; 0x15f
 5f0:	50470031 	subpl	r0, r7, r1, lsr r0
 5f4:	465f4f49 	ldrbmi	r4, [pc], -r9, asr #30
 5f8:	5f434e55 	svcpl	0x00434e55
 5fc:	32544c41 	subscc	r4, r4, #16640	; 0x4100
 600:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 604:	55465f4f 	strbpl	r5, [r6, #-3919]	; 0xf4f
 608:	415f434e 	cmpmi	pc, lr, asr #6
 60c:	0033544c 	eorseq	r5, r3, ip, asr #8
 610:	4f495047 	svcmi	0x00495047
 614:	4e55465f 	mrcmi	6, 2, r4, cr5, cr15, {2}
 618:	4c415f43 	mcrrmi	15, 4, r5, r1, cr3
 61c:	41003554 	tstmi	r0, r4, asr r5
 620:	4d5f5855 	ldclmi	8, cr5, [pc, #-340]	; 4d4 <_start-0x7b2c>
 624:	45495f55 	strbmi	r5, [r9, #-3925]	; 0xf55
 628:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xf52
 62c:	75700047 	ldrbvc	r0, [r0, #-71]!	; 0x47
 630:	00323374 	eorseq	r3, r2, r4, ror r3
 634:	5f585541 	svcpl	0x00585541
 638:	495f554d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, sl, ip, lr}^	; <UNPREDICTABLE>
 63c:	525f5249 	subspl	r5, pc, #-1879048188	; 0x90000004
 640:	67004745 	strvs	r4, [r0, -r5, asr #14]
 644:	5f6f6970 	svcpl	0x006f6970
 648:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 64c:	7500745f 	strvc	r7, [r0, #-1119]	; 0x45f
 650:	5f747261 	svcpl	0x00747261
 654:	5f6e6163 	svcpl	0x006e6163
 658:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 65c:	58554100 	ldmdapl	r5, {r8, lr}^
 660:	414e455f 	cmpmi	lr, pc, asr r5
 664:	53454c42 	movtpl	r4, #23618	; 0x5c42
 668:	58554100 	ldmdapl	r5, {r8, lr}^
 66c:	5152495f 	cmppl	r2, pc, asr r9
 670:	58554100 	ldmdapl	r5, {r8, lr}^
 674:	5f554d5f 	svcpl	0x00554d5f
 678:	44554142 	ldrbmi	r4, [r5], #-322	; 0x142
 67c:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
 680:	58554100 	ldmdapl	r5, {r8, lr}^
 684:	5f554d5f 	svcpl	0x00554d5f
 688:	54415453 	strbpl	r5, [r1], #-1107	; 0x453
 68c:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
 690:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 694:	55465f4f 	strbpl	r5, [r6, #-3919]	; 0xf4f
 698:	415f434e 	cmpmi	pc, lr, asr #6
 69c:	0034544c 	eorseq	r5, r4, ip, asr #8
 6a0:	6f697067 	svcvs	0x00697067
 6a4:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
 6a8:	6e75665f 	mrcvs	6, 3, r6, cr5, cr15, {2}
 6ac:	6f697463 	svcvs	0x00697463
 6b0:	5541006e 	strbpl	r0, [r1, #-110]	; 0x6e
 6b4:	554d5f58 	strbpl	r5, [sp, #-3928]	; 0xf58
 6b8:	5243535f 	subpl	r5, r3, #2080374785	; 0x7c000001
 6bc:	48435441 	stmdami	r3, {r0, r6, sl, ip, lr}^
 6c0:	58554100 	ldmdapl	r5, {r8, lr}^
 6c4:	5f554d5f 	svcpl	0x00554d5f
 6c8:	5f52434c 	svcpl	0x0052434c
 6cc:	00474552 	subeq	r4, r7, r2, asr r5
 6d0:	4f495047 	svcmi	0x00495047
 6d4:	4e55465f 	mrcmi	6, 2, r4, cr5, cr15, {2}
 6d8:	4e495f43 	cdpmi	15, 4, cr5, cr9, cr3, {2}
 6dc:	00545550 	subseq	r5, r4, r0, asr r5
 6e0:	5f585541 	svcpl	0x00585541
 6e4:	4c5f554d 	cfldr64mi	mvdx5, [pc], {77}	; 0x4d
 6e8:	525f5253 	subspl	r5, pc, #805306373	; 0x30000005
 6ec:	75004745 	strvc	r4, [r0, #-1861]	; 0x745
 6f0:	5f747261 	svcpl	0x00747261
 6f4:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
 6f8:	7973615f 	ldmdbvc	r3!, {r0, r1, r2, r3, r4, r6, r8, sp, lr}^
 6fc:	6700636e 	strvs	r6, [r0, -lr, ror #6]
 700:	32337465 	eorscc	r7, r3, #1694498816	; 0x65000000
 704:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 708:	6c635f6f 	stclvs	15, cr5, [r3], #-444	; 0xfffffe44
 70c:	67003072 	smlsdxvs	r0, r2, r0, r3
 710:	5f6f6970 	svcpl	0x006f6970
 714:	30746573 	rsbscc	r6, r4, r3, ror r5
 718:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 71c:	73665f6f 	cmnvc	r6, #444	; 0x1bc
 720:	00306c65 	eorseq	r6, r0, r5, ror #24
 724:	4c435047 	mcrrmi	0, 4, r5, r3, cr7
 728:	67003152 	smlsdvs	r0, r2, r1, r3
 72c:	5f6f6970 	svcpl	0x006f6970
 730:	5f746573 	svcpl	0x00746573
 734:	47006e6f 	strmi	r6, [r0, -pc, ror #28]
 738:	56454c50 			; <UNDEFINED> instruction: 0x56454c50
 73c:	50470031 	subpl	r0, r7, r1, lsr r0
 740:	31544553 	cmpcc	r4, r3, asr r5
 744:	43504700 	cmpmi	r0, #0, 14
 748:	0030524c 	eorseq	r5, r0, ip, asr #4
 74c:	45535047 	ldrbmi	r5, [r3, #-71]	; 0x47
 750:	67003054 	smlsdvs	r0, r4, r0, r3
 754:	5f6f6970 	svcpl	0x006f6970
 758:	5f746573 	svcpl	0x00746573
 75c:	0066666f 	rsbeq	r6, r6, pc, ror #12
 760:	53465047 	movtpl	r5, #24647	; 0x6047
 764:	00314c45 	eorseq	r4, r1, r5, asr #24
 768:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 76c:	67657200 	strbvs	r7, [r5, -r0, lsl #4]!
 770:	6c65735f 	stclvs	3, cr7, [r5], #-380	; 0xfffffe84
 774:	00746365 	rsbseq	r6, r4, r5, ror #6
 778:	6d746962 	ldclvs	9, cr6, [r4, #-392]!	; 0xfffffe78
 77c:	006b7361 	rsbeq	r7, fp, r1, ror #6
 780:	6f697067 	svcvs	0x00697067
 784:	6700632e 	strvs	r6, [r0, -lr, lsr #6]
 788:	5f6f6970 	svcpl	0x006f6970
 78c:	00676572 	rsbeq	r6, r7, r2, ror r5
 790:	53465047 	movtpl	r5, #24647	; 0x6047
 794:	00304c45 	eorseq	r4, r0, r5, asr #24
 798:	454c5047 	strbmi	r5, [ip, #-71]	; 0x47
 79c:	47003056 	smlsdmi	r0, r6, r0, r3
 7a0:	45534650 	ldrbmi	r4, [r3, #-1616]	; 0x650
 7a4:	4700324c 	strmi	r3, [r0, -ip, asr #4]
 7a8:	45534650 	ldrbmi	r4, [r3, #-1616]	; 0x650
 7ac:	4700334c 	strmi	r3, [r0, -ip, asr #6]
 7b0:	45534650 	ldrbmi	r4, [r3, #-1616]	; 0x650
 7b4:	4700344c 	strmi	r3, [r0, -ip, asr #8]
 7b8:	45534650 	ldrbmi	r4, [r3, #-1616]	; 0x650
 7bc:	6900354c 	stmdbvs	r0, {r2, r3, r6, r8, sl, ip, sp}
 7c0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 7c4:	5f6c616e 	svcpl	0x006c616e
 7c8:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 7cc:	00726168 	rsbseq	r6, r2, r8, ror #2
 7d0:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 7d4:	7475702f 	ldrbtvc	r7, [r5], #-47	; 0x2f
 7d8:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 7dc:	Address 0x00000000000007dc is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000028 	andeq	r0, r0, r8, lsr #32
  14:	00000000 	andeq	r0, r0, r0
  18:	00008010 	andeq	r8, r0, r0, lsl r0
  1c:	00000118 	andeq	r0, r0, r8, lsl r1
  20:	84200e42 	strthi	r0, [r0], #-3650	; 0xe42
  24:	86078508 	strhi	r8, [r7], -r8, lsl #10
  28:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
  2c:	8a038904 	bhi	e2444 <__bss_end__+0xd88f4>
  30:	42018e02 	andmi	r8, r1, #2, 28
  34:	4208b00e 	andmi	fp, r8, #14
  38:	0008b80e 	andeq	fp, r8, lr, lsl #16
  3c:	0000000c 	andeq	r0, r0, ip
  40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  44:	7c020001 	stcvc	0, cr0, [r2], {1}
  48:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  4c:	0000001c 	andeq	r0, r0, ip, lsl r0
  50:	0000003c 	andeq	r0, r0, ip, lsr r0
  54:	00008128 	andeq	r8, r0, r8, lsr #2
  58:	00000158 	andeq	r0, r0, r8, asr r1
  5c:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
  60:	86058506 	strhi	r8, [r5], -r6, lsl #10
  64:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
  68:	00018e02 	andeq	r8, r1, r2, lsl #28
  6c:	00000020 	andeq	r0, r0, r0, lsr #32
  70:	0000003c 	andeq	r0, r0, ip, lsr r0
  74:	00008280 	andeq	r8, r0, r0, lsl #5
  78:	000001c8 	andeq	r0, r0, r8, asr #3
  7c:	83200e42 	teqhi	r0, #1056	; 0x420
  80:	85078408 	strhi	r8, [r7, #-1032]	; 0x408
  84:	87058606 	strhi	r8, [r5, -r6, lsl #12]
  88:	89038804 	stmdbhi	r3, {r2, fp, pc}
  8c:	00018e02 	andeq	r8, r1, r2, lsl #28
  90:	00000020 	andeq	r0, r0, r0, lsr #32
  94:	0000003c 	andeq	r0, r0, ip, lsr r0
  98:	00008448 	andeq	r8, r0, r8, asr #8
  9c:	0000008c 	andeq	r0, r0, ip, lsl #1
  a0:	84200e42 	strthi	r0, [r0], #-3650	; 0xe42
  a4:	86078508 	strhi	r8, [r7], -r8, lsl #10
  a8:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
  ac:	8a038904 	bhi	e24c4 <__bss_end__+0xd8974>
  b0:	00018e02 	andeq	r8, r1, r2, lsl #28
  b4:	0000001c 	andeq	r0, r0, ip, lsl r0
  b8:	0000003c 	andeq	r0, r0, ip, lsr r0
  bc:	000084d4 	ldrdeq	r8, [r0], -r4
  c0:	00000078 	andeq	r0, r0, r8, ror r0
  c4:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
  c8:	86058506 	strhi	r8, [r5], -r6, lsl #10
  cc:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
  d0:	00018e02 	andeq	r8, r1, r2, lsl #28
  d4:	0000001c 	andeq	r0, r0, ip, lsl r0
  d8:	0000003c 	andeq	r0, r0, ip, lsr r0
  dc:	0000854c 	andeq	r8, r0, ip, asr #10
  e0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
  e4:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
  e8:	86058506 	strhi	r8, [r5], -r6, lsl #10
  ec:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
  f0:	00018e02 	andeq	r8, r1, r2, lsl #28
  f4:	00000014 	andeq	r0, r0, r4, lsl r0
  f8:	0000003c 	andeq	r0, r0, ip, lsr r0
  fc:	000085fc 	strdeq	r8, [r0], -ip
 100:	00000038 	andeq	r0, r0, r8, lsr r0
 104:	83080e42 	movwhi	r0, #36418	; 0x8e42
 108:	00018e02 	andeq	r8, r1, r2, lsl #28
 10c:	00000018 	andeq	r0, r0, r8, lsl r0
 110:	0000003c 	andeq	r0, r0, ip, lsr r0
 114:	00008634 	andeq	r8, r0, r4, lsr r6
 118:	0000002c 	andeq	r0, r0, ip, lsr #32
 11c:	83100e42 	tsthi	r0, #1056	; 0x420
 120:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 124:	00018e02 	andeq	r8, r1, r2, lsl #28
 128:	00000024 	andeq	r0, r0, r4, lsr #32
 12c:	0000003c 	andeq	r0, r0, ip, lsr r0
 130:	00008660 	andeq	r8, r0, r0, ror #12
 134:	00000080 	andeq	r0, r0, r0, lsl #1
 138:	810c0e42 	tsthi	ip, r2, asr #28
 13c:	83028203 	movwhi	r8, #8707	; 0x2203
 140:	180e4201 	stmdane	lr, {r0, r9, lr}
 144:	05850684 	streq	r0, [r5, #1668]	; 0x684
 148:	0e42048e 	cdpeq	4, 4, cr0, cr2, cr14, {4}
 14c:	000003e8 	andeq	r0, r0, r8, ror #7
 150:	00000014 	andeq	r0, r0, r4, lsl r0
 154:	0000003c 	andeq	r0, r0, ip, lsr r0
 158:	000086e0 	andeq	r8, r0, r0, ror #13
 15c:	00000048 	andeq	r0, r0, r8, asr #32
 160:	8e040e42 	cdphi	14, 0, cr0, cr4, cr2, {2}
 164:	100e4201 	andne	r4, lr, r1, lsl #4
 168:	0000000c 	andeq	r0, r0, ip
 16c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 170:	7c020001 	stcvc	0, cr0, [r2], {1}
 174:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 178:	00000024 	andeq	r0, r0, r4, lsr #32
 17c:	00000168 	andeq	r0, r0, r8, ror #2
 180:	00008728 	andeq	r8, r0, r8, lsr #14
 184:	00000058 	andeq	r0, r0, r8, asr r0
 188:	80100e42 	andshi	r0, r0, r2, asr #28
 18c:	82038104 	andhi	r8, r3, #4, 2
 190:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
 194:	07841c0e 	streq	r1, [r4, lr, lsl #24]
 198:	058e0685 	streq	r0, [lr, #1669]	; 0x685
 19c:	00280e42 	eoreq	r0, r8, r2, asr #28
 1a0:	0000000c 	andeq	r0, r0, ip
 1a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1a8:	7c020001 	stcvc	0, cr0, [r2], {1}
 1ac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1b0:	00000018 	andeq	r0, r0, r8, lsl r0
 1b4:	000001a0 	andeq	r0, r0, r0, lsr #3
 1b8:	00008780 	andeq	r8, r0, r0, lsl #15
 1bc:	00000034 	andeq	r0, r0, r4, lsr r0
 1c0:	83100e42 	tsthi	r0, #1056	; 0x420
 1c4:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 1c8:	00018e02 	andeq	r8, r1, r2, lsl #28
 1cc:	0000000c 	andeq	r0, r0, ip
 1d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1d4:	7c020001 	stcvc	0, cr0, [r2], {1}
 1d8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1dc:	0000000c 	andeq	r0, r0, ip
 1e0:	000001cc 	andeq	r0, r0, ip, asr #3
 1e4:	000087b4 			; <UNDEFINED> instruction: 0x000087b4
 1e8:	00000020 	andeq	r0, r0, r0, lsr #32
 1ec:	0000000c 	andeq	r0, r0, ip
 1f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1f4:	7c020001 	stcvc	0, cr0, [r2], {1}
 1f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1fc:	0000000c 	andeq	r0, r0, ip
 200:	000001ec 	andeq	r0, r0, ip, ror #3
 204:	000087d4 	ldrdeq	r8, [r0], -r4
 208:	00000014 	andeq	r0, r0, r4, lsl r0
 20c:	0000000c 	andeq	r0, r0, ip
 210:	000001ec 	andeq	r0, r0, ip, ror #3
 214:	000087e8 	andeq	r8, r0, r8, ror #15
 218:	0000002c 	andeq	r0, r0, ip, lsr #32
 21c:	0000000c 	andeq	r0, r0, ip
 220:	000001ec 	andeq	r0, r0, ip, ror #3
 224:	00008814 	andeq	r8, r0, r4, lsl r8
 228:	00000040 	andeq	r0, r0, r0, asr #32
 22c:	00000020 	andeq	r0, r0, r0, lsr #32
 230:	000001ec 	andeq	r0, r0, ip, ror #3
 234:	00008854 	andeq	r8, r0, r4, asr r8
 238:	00000198 	muleq	r0, r8, r1
 23c:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 240:	86058506 	strhi	r8, [r5], -r6, lsl #10
 244:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 248:	42018e02 	andmi	r8, r1, #2, 28
 24c:	0000580e 	andeq	r5, r0, lr, lsl #16
 250:	00000014 	andeq	r0, r0, r4, lsl r0
 254:	000001ec 	andeq	r0, r0, ip, ror #3
 258:	000089ec 	andeq	r8, r0, ip, ror #19
 25c:	00000050 	andeq	r0, r0, r0, asr r0
 260:	83080e42 	movwhi	r0, #36418	; 0x8e42
 264:	00018e02 	andeq	r8, r1, r2, lsl #28
 268:	00000028 	andeq	r0, r0, r8, lsr #32
 26c:	000001ec 	andeq	r0, r0, ip, ror #3
 270:	00008a3c 	andeq	r8, r0, ip, lsr sl
 274:	00000288 	andeq	r0, r0, r8, lsl #5
 278:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
 27c:	86088509 	strhi	r8, [r8], -r9, lsl #10
 280:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
 284:	8a048905 	bhi	1226a0 <__bss_end__+0x118b50>
 288:	8e028b03 	vmlahi.f64	d8, d2, d3
 28c:	b00e4201 	andlt	r4, lr, r1, lsl #4
 290:	00000001 	andeq	r0, r0, r1
 294:	0000000c 	andeq	r0, r0, ip
 298:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 29c:	7c020001 	stcvc	0, cr0, [r2], {1}
 2a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2a4:	0000000c 	andeq	r0, r0, ip
 2a8:	00000294 	muleq	r0, r4, r2
 2ac:	00008cc4 	andeq	r8, r0, r4, asr #25
 2b0:	00000010 	andeq	r0, r0, r0, lsl r0
 2b4:	0000000c 	andeq	r0, r0, ip
 2b8:	00000294 	muleq	r0, r4, r2
 2bc:	00008cd4 	ldrdeq	r8, [r0], -r4
 2c0:	00000010 	andeq	r0, r0, r0, lsl r0
 2c4:	0000000c 	andeq	r0, r0, ip
 2c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2cc:	7c020001 	stcvc	0, cr0, [r2], {1}
 2d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2d4:	00000014 	andeq	r0, r0, r4, lsl r0
 2d8:	000002c4 	andeq	r0, r0, r4, asr #5
 2dc:	00008ce4 	andeq	r8, r0, r4, ror #25
 2e0:	00000028 	andeq	r0, r0, r8, lsr #32
 2e4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 2e8:	00018e02 	andeq	r8, r1, r2, lsl #28
 2ec:	0000000c 	andeq	r0, r0, ip
 2f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2f4:	7c020001 	stcvc	0, cr0, [r2], {1}
 2f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2fc:	00000014 	andeq	r0, r0, r4, lsl r0
 300:	000002ec 	andeq	r0, r0, ip, ror #5
 304:	00008d0c 	andeq	r8, r0, ip, lsl #26
 308:	00000034 	andeq	r0, r0, r4, lsr r0
 30c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 310:	00018e02 	andeq	r8, r1, r2, lsl #28
 314:	0000000c 	andeq	r0, r0, ip
 318:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 31c:	7c020001 	stcvc	0, cr0, [r2], {1}
 320:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 324:	0000000c 	andeq	r0, r0, ip
 328:	00000314 	andeq	r0, r0, r4, lsl r3
 32c:	00008d40 	andeq	r8, r0, r0, asr #26
 330:	00000018 	andeq	r0, r0, r8, lsl r0
 334:	0000000c 	andeq	r0, r0, ip
 338:	00000314 	andeq	r0, r0, r4, lsl r3
 33c:	00008d58 	andeq	r8, r0, r8, asr sp
 340:	00000014 	andeq	r0, r0, r4, lsl r0
 344:	00000014 	andeq	r0, r0, r4, lsl r0
 348:	00000314 	andeq	r0, r0, r4, lsl r3
 34c:	00008d6c 	andeq	r8, r0, ip, ror #26
 350:	00000048 	andeq	r0, r0, r8, asr #32
 354:	83080e42 	movwhi	r0, #36418	; 0x8e42
 358:	00018e02 	andeq	r8, r1, r2, lsl #28
 35c:	0000000c 	andeq	r0, r0, ip
 360:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 364:	7c020001 	stcvc	0, cr0, [r2], {1}
 368:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 36c:	0000000c 	andeq	r0, r0, ip
 370:	0000035c 	andeq	r0, r0, ip, asr r3
 374:	00008db4 			; <UNDEFINED> instruction: 0x00008db4
 378:	0000001c 	andeq	r0, r0, ip, lsl r0
 37c:	00000014 	andeq	r0, r0, r4, lsl r0
 380:	0000035c 	andeq	r0, r0, ip, asr r3
 384:	00008dd0 	ldrdeq	r8, [r0], -r0
 388:	00000014 	andeq	r0, r0, r4, lsl r0
 38c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 390:	00018e02 	andeq	r8, r1, r2, lsl #28
 394:	00000014 	andeq	r0, r0, r4, lsl r0
 398:	0000035c 	andeq	r0, r0, ip, asr r3
 39c:	00008de4 	andeq	r8, r0, r4, ror #27
 3a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a4:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 3a8:	00018e02 	andeq	r8, r1, r2, lsl #28
 3ac:	00000018 	andeq	r0, r0, r8, lsl r0
 3b0:	0000035c 	andeq	r0, r0, ip, asr r3
 3b4:	00008e00 	andeq	r8, r0, r0, lsl #28
 3b8:	00000024 	andeq	r0, r0, r4, lsr #32
 3bc:	83100e42 	tsthi	r0, #1056	; 0x420
 3c0:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 3c4:	00018e02 	andeq	r8, r1, r2, lsl #28
 3c8:	00000014 	andeq	r0, r0, r4, lsl r0
 3cc:	0000035c 	andeq	r0, r0, ip, asr r3
 3d0:	00008e24 	andeq	r8, r0, r4, lsr #28
 3d4:	00000014 	andeq	r0, r0, r4, lsl r0
 3d8:	83080e42 	movwhi	r0, #36418	; 0x8e42
 3dc:	00018e02 	andeq	r8, r1, r2, lsl #28
 3e0:	00000014 	andeq	r0, r0, r4, lsl r0
 3e4:	0000035c 	andeq	r0, r0, ip, asr r3
 3e8:	00008e38 	andeq	r8, r0, r8, lsr lr
 3ec:	00000014 	andeq	r0, r0, r4, lsl r0
 3f0:	83080e42 	movwhi	r0, #36418	; 0x8e42
 3f4:	00018e02 	andeq	r8, r1, r2, lsl #28
 3f8:	0000000c 	andeq	r0, r0, ip
 3fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 400:	7c020001 	stcvc	0, cr0, [r2], {1}
 404:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 408:	00000014 	andeq	r0, r0, r4, lsl r0
 40c:	000003f8 	strdeq	r0, [r0], -r8
 410:	00008eb0 			; <UNDEFINED> instruction: 0x00008eb0
 414:	0000001c 	andeq	r0, r0, ip, lsl r0
 418:	83080e42 	movwhi	r0, #36418	; 0x8e42
 41c:	00018e02 	andeq	r8, r1, r2, lsl #28
 420:	00000018 	andeq	r0, r0, r8, lsl r0
 424:	000003f8 	strdeq	r0, [r0], -r8
 428:	00008ecc 	andeq	r8, r0, ip, asr #29
 42c:	0000009c 	muleq	r0, ip, r0
 430:	83100e42 	tsthi	r0, #1056	; 0x420
 434:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 438:	00018e02 	andeq	r8, r1, r2, lsl #28
 43c:	00000014 	andeq	r0, r0, r4, lsl r0
 440:	000003f8 	strdeq	r0, [r0], -r8
 444:	00008f68 	andeq	r8, r0, r8, ror #30
 448:	00000028 	andeq	r0, r0, r8, lsr #32
 44c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 450:	00018e02 	andeq	r8, r1, r2, lsl #28
 454:	00000014 	andeq	r0, r0, r4, lsl r0
 458:	000003f8 	strdeq	r0, [r0], -r8
 45c:	00008f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
 460:	0000001c 	andeq	r0, r0, ip, lsl r0
 464:	83080e42 	movwhi	r0, #36418	; 0x8e42
 468:	00018e02 	andeq	r8, r1, r2, lsl #28
 46c:	00000014 	andeq	r0, r0, r4, lsl r0
 470:	000003f8 	strdeq	r0, [r0], -r8
 474:	00008fac 	andeq	r8, r0, ip, lsr #31
 478:	0000002c 	andeq	r0, r0, ip, lsr #32
 47c:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 480:	00018e02 	andeq	r8, r1, r2, lsl #28
 484:	00000014 	andeq	r0, r0, r4, lsl r0
 488:	000003f8 	strdeq	r0, [r0], -r8
 48c:	00008fd8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
 490:	0000000c 	andeq	r0, r0, ip
 494:	83080e42 	movwhi	r0, #36418	; 0x8e42
 498:	00018e02 	andeq	r8, r1, r2, lsl #28
 49c:	00000014 	andeq	r0, r0, r4, lsl r0
 4a0:	000003f8 	strdeq	r0, [r0], -r8
 4a4:	00008fe4 	andeq	r8, r0, r4, ror #31
 4a8:	00000020 	andeq	r0, r0, r0, lsr #32
 4ac:	83080e42 	movwhi	r0, #36418	; 0x8e42
 4b0:	00018e02 	andeq	r8, r1, r2, lsl #28
 4b4:	0000000c 	andeq	r0, r0, ip
 4b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4bc:	7c020001 	stcvc	0, cr0, [r2], {1}
 4c0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4c4:	00000018 	andeq	r0, r0, r8, lsl r0
 4c8:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
 4cc:	00009004 	andeq	r9, r0, r4
 4d0:	000000d4 	ldrdeq	r0, [r0], -r4
 4d4:	83100e42 	tsthi	r0, #1056	; 0x420
 4d8:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 4dc:	00018e02 	andeq	r8, r1, r2, lsl #28
 4e0:	00000014 	andeq	r0, r0, r4, lsl r0
 4e4:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
 4e8:	000090d8 	ldrdeq	r9, [r0], -r8
 4ec:	00000038 	andeq	r0, r0, r8, lsr r0
 4f0:	83080e42 	movwhi	r0, #36418	; 0x8e42
 4f4:	00018e02 	andeq	r8, r1, r2, lsl #28
 4f8:	00000014 	andeq	r0, r0, r4, lsl r0
 4fc:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
 500:	00009110 	andeq	r9, r0, r0, lsl r1
 504:	00000038 	andeq	r0, r0, r8, lsr r0
 508:	83080e42 	movwhi	r0, #36418	; 0x8e42
 50c:	00018e02 	andeq	r8, r1, r2, lsl #28
 510:	00000018 	andeq	r0, r0, r8, lsl r0
 514:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
 518:	00009148 	andeq	r9, r0, r8, asr #2
 51c:	000000cc 	andeq	r0, r0, ip, asr #1
 520:	83100e42 	tsthi	r0, #1056	; 0x420
 524:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 528:	00018e02 	andeq	r8, r1, r2, lsl #28
 52c:	00000014 	andeq	r0, r0, r4, lsl r0
 530:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
 534:	00009214 	andeq	r9, r0, r4, lsl r2
 538:	0000004c 	andeq	r0, r0, ip, asr #32
 53c:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 540:	00018e02 	andeq	r8, r1, r2, lsl #28
 544:	00000014 	andeq	r0, r0, r4, lsl r0
 548:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
 54c:	00009260 	andeq	r9, r0, r0, ror #4
 550:	00000078 	andeq	r0, r0, r8, ror r0
 554:	83080e42 	movwhi	r0, #36418	; 0x8e42
 558:	00018e02 	andeq	r8, r1, r2, lsl #28
 55c:	00000018 	andeq	r0, r0, r8, lsl r0
 560:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
 564:	000092d8 	ldrdeq	r9, [r0], -r8
 568:	000000d8 	ldrdeq	r0, [r0], -r8
 56c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 570:	86038504 	strhi	r8, [r3], -r4, lsl #10
 574:	00018e02 	andeq	r8, r1, r2, lsl #28
 578:	0000000c 	andeq	r0, r0, ip
 57c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 580:	7c020001 	stcvc	0, cr0, [r2], {1}
 584:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 588:	00000014 	andeq	r0, r0, r4, lsl r0
 58c:	00000578 	andeq	r0, r0, r8, ror r5
 590:	000093b0 			; <UNDEFINED> instruction: 0x000093b0
 594:	00000014 	andeq	r0, r0, r4, lsl r0
 598:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 59c:	00018e02 	andeq	r8, r1, r2, lsl #28
