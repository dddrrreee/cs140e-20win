
7-test-preemptive-thread.bin.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e3a0d302 	mov	sp, #134217728	; 0x8000000
    8004:	e3a0b000 	mov	fp, #0
    8008:	eb0004e0 	bl	9390 <_cstart>
    800c:	eb00050e 	bl	944c <rpi_reboot>

00008010 <thread_code>:
#include "rpi-thread.h"

static unsigned thread_count, thread_sum;

// trivial first thread: does not block, explicitly calls exit.
static void thread_code(void *arg) {
    8010:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    8014:	e24dd00c 	sub	sp, sp, #12
    8018:	e1a04000 	mov	r4, r0
    unsigned *x = arg;

    // check tid
    unsigned tid = rpi_cur_thread_preemptive()->tid;
    801c:	eb0000f4 	bl	83f4 <rpi_cur_thread_preemptive>
    8020:	e5908004 	ldr	r8, [r0, #4]
    //system_disable_interrupts(); // to stop preemtion during this print; I guess system_disable_interrupts() can be used as our critical region boundary thing lol...
	printk("in thread %p, with %x\n", tid, *x);
    8024:	e59f00c0 	ldr	r0, [pc, #192]	; 80ec <thread_code+0xdc>
    8028:	e1a01008 	mov	r1, r8
    802c:	e5942000 	ldr	r2, [r4]
    8030:	eb000354 	bl	8d88 <printk>
    demand(rpi_cur_thread_preemptive()->tid == *x+1, 
    8034:	eb0000ee 	bl	83f4 <rpi_cur_thread_preemptive>
    8038:	e5901004 	ldr	r1, [r0, #4]
    803c:	e5942000 	ldr	r2, [r4]
    8040:	e2823001 	add	r3, r2, #1
    8044:	e1510003 	cmp	r1, r3
    8048:	0a00000a 	beq	8078 <thread_code+0x68>
    804c:	eb000368 	bl	8df4 <rpi_reset_putc>
    8050:	e5943000 	ldr	r3, [r4]
    8054:	e58d8000 	str	r8, [sp]
    8058:	e2833001 	add	r3, r3, #1
    805c:	e58d3004 	str	r3, [sp, #4]
    8060:	e59f0088 	ldr	r0, [pc, #136]	; 80f0 <thread_code+0xe0>
    8064:	e59f1088 	ldr	r1, [pc, #136]	; 80f4 <thread_code+0xe4>
    8068:	e59f2088 	ldr	r2, [pc, #136]	; 80f8 <thread_code+0xe8>
    806c:	e3a0301b 	mov	r3, #27
    8070:	eb000344 	bl	8d88 <printk>
    8074:	eb0004b3 	bl	9348 <clean_reboot>
                "expected %d, have %d\n", tid,*x+1);
    //system_enable_interrupts();

    // check yield.
    // rpi_yield_preemtive();
	thread_count ++;
    8078:	e59f307c 	ldr	r3, [pc, #124]	; 80fc <thread_code+0xec>
    807c:	e5931000 	ldr	r1, [r3]
    8080:	e2811001 	add	r1, r1, #1
    8084:	e5831000 	str	r1, [r3]
    // rpi_yield_preemtive();
	thread_sum += *x;
    8088:	e5931004 	ldr	r1, [r3, #4]
    808c:	e0822001 	add	r2, r2, r1
    8090:	e5832004 	str	r2, [r3, #4]
    // rpi_yield_preemtive();
    // check exit
     for(int i = 0; i < 9000000; i++){
    8094:	e3a04000 	mov	r4, #0
    8098:	e59f5060 	ldr	r5, [pc, #96]	; 8100 <thread_code+0xf0>
         if(i % 100000 == 0){
    809c:	e59f7060 	ldr	r7, [pc, #96]	; 8104 <thread_code+0xf4>
    80a0:	e59f6060 	ldr	r6, [pc, #96]	; 8108 <thread_code+0xf8>
             printk("in <%x>\n", tid);
    80a4:	e59f9060 	ldr	r9, [pc, #96]	; 810c <thread_code+0xfc>
	thread_count ++;
    // rpi_yield_preemtive();
	thread_sum += *x;
    // rpi_yield_preemtive();
    // check exit
     for(int i = 0; i < 9000000; i++){
    80a8:	ea000009 	b	80d4 <thread_code+0xc4>
         if(i % 100000 == 0){
    80ac:	e0c32497 	smull	r2, r3, r7, r4
    80b0:	e1a02fc4 	asr	r2, r4, #31
    80b4:	e06236c3 	rsb	r3, r2, r3, asr #13
    80b8:	e0030396 	mul	r3, r6, r3
    80bc:	e1540003 	cmp	r4, r3
    80c0:	1a000002 	bne	80d0 <thread_code+0xc0>
             printk("in <%x>\n", tid);
    80c4:	e1a00009 	mov	r0, r9
    80c8:	e1a01008 	mov	r1, r8
    80cc:	eb00032d 	bl	8d88 <printk>
	thread_count ++;
    // rpi_yield_preemtive();
	thread_sum += *x;
    // rpi_yield_preemtive();
    // check exit
     for(int i = 0; i < 9000000; i++){
    80d0:	e2844001 	add	r4, r4, #1
    80d4:	e1540005 	cmp	r4, r5
    80d8:	dafffff3 	ble	80ac <thread_code+0x9c>
         if(i % 100000 == 0){
             printk("in <%x>\n", tid);
         }
     }
    rpi_exit_preemptive(0);
    80dc:	e3a00000 	mov	r0, #0
    80e0:	eb000103 	bl	84f4 <rpi_exit_preemptive>
}
    80e4:	e28dd00c 	add	sp, sp, #12
    80e8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    80ec:	0000a874 	andeq	sl, r0, r4, ror r8
    80f0:	0000a88c 	andeq	sl, r0, ip, lsl #17
    80f4:	0000a8ec 	andeq	sl, r0, ip, ror #17
    80f8:	0000a868 	andeq	sl, r0, r8, ror #16
    80fc:	0000b2d8 	ldrdeq	fp, [r0], -r8
    8100:	0089543f 	addeq	r5, r9, pc, lsr r4
    8104:	14f8b589 	ldrbtne	fp, [r8], #1417	; 0x589
    8108:	000186a0 	andeq	r8, r1, r0, lsr #13
    810c:	0000a908 	andeq	sl, r0, r8, lsl #18

00008110 <notmain>:

void notmain() {
    8110:	e92d4070 	push	{r4, r5, r6, lr}
    uart_init();
    8114:	eb000702 	bl	9d24 <uart_init>
    kmalloc_init();
    8118:	eb000543 	bl	962c <kmalloc_init>

    printk("----- testing preemtive threads -----\n\n");
    811c:	e59f0088 	ldr	r0, [pc, #136]	; 81ac <notmain+0x9c>
    8120:	eb000318 	bl	8d88 <printk>
    // change this to increase the number of threads.
	int n = 30;
	thread_sum = thread_count = 0;
    8124:	e59f3084 	ldr	r3, [pc, #132]	; 81b0 <notmain+0xa0>
    8128:	e3a04000 	mov	r4, #0
    812c:	e5834000 	str	r4, [r3]
    8130:	e5834004 	str	r4, [r3, #4]
    unsigned sum = 0;
	for(int i = 0; i < n; i++)  {
        int *x = kmalloc(sizeof *x);
    8134:	e3a06004 	mov	r6, #4
        sum += *x = i;
		rpi_fork_preemptive(thread_code, x);
    8138:	e59f5074 	ldr	r5, [pc, #116]	; 81b4 <notmain+0xa4>
    printk("----- testing preemtive threads -----\n\n");
    // change this to increase the number of threads.
	int n = 30;
	thread_sum = thread_count = 0;
    unsigned sum = 0;
	for(int i = 0; i < n; i++)  {
    813c:	ea000006 	b	815c <notmain+0x4c>
        int *x = kmalloc(sizeof *x);
    8140:	e1a00006 	mov	r0, r6
    8144:	eb0004f4 	bl	951c <kmalloc>
    8148:	e1a01000 	mov	r1, r0
        sum += *x = i;
    814c:	e5804000 	str	r4, [r0]
		rpi_fork_preemptive(thread_code, x);
    8150:	e1a00005 	mov	r0, r5
    8154:	eb0000d1 	bl	84a0 <rpi_fork_preemptive>
    printk("----- testing preemtive threads -----\n\n");
    // change this to increase the number of threads.
	int n = 30;
	thread_sum = thread_count = 0;
    unsigned sum = 0;
	for(int i = 0; i < n; i++)  {
    8158:	e2844001 	add	r4, r4, #1
    815c:	e354001d 	cmp	r4, #29
    8160:	dafffff6 	ble	8140 <notmain+0x30>
        int *x = kmalloc(sizeof *x);
        sum += *x = i;
		rpi_fork_preemptive(thread_code, x);
    }
    printk("about to start\n");
    8164:	e59f004c 	ldr	r0, [pc, #76]	; 81b8 <notmain+0xa8>
    8168:	eb000306 	bl	8d88 <printk>
	rpi_thread_start_preemptive();
    816c:	eb0000e6 	bl	850c <rpi_thread_start_preemptive>
	
    for(int i = 0 ; i < n; i++){
    8170:	e3a04000 	mov	r4, #0
    8174:	ea000002 	b	8184 <notmain+0x74>
         rpi_join_preemptive(rpi_cur_thread_preemptive());
    8178:	eb00009d 	bl	83f4 <rpi_cur_thread_preemptive>
    817c:	eb0000ff 	bl	8580 <rpi_join_preemptive>
		rpi_fork_preemptive(thread_code, x);
    }
    printk("about to start\n");
	rpi_thread_start_preemptive();
	
    for(int i = 0 ; i < n; i++){
    8180:	e2844001 	add	r4, r4, #1
    8184:	e354001d 	cmp	r4, #29
    8188:	dafffffa 	ble	8178 <notmain+0x68>
         rpi_join_preemptive(rpi_cur_thread_preemptive());
     }
    
    // no more threads: check.
	printk("count = %d, sum=%d\n", thread_count, thread_sum);
    818c:	e59f301c 	ldr	r3, [pc, #28]	; 81b0 <notmain+0xa0>
    8190:	e59f0024 	ldr	r0, [pc, #36]	; 81bc <notmain+0xac>
    8194:	e5931000 	ldr	r1, [r3]
    8198:	e5932004 	ldr	r2, [r3, #4]
    819c:	eb0002f9 	bl	8d88 <printk>
	//assert(thread_count == n);
	//assert(thread_sum == sum);
    printk("SUCCESS!\n");
    81a0:	e59f0018 	ldr	r0, [pc, #24]	; 81c0 <notmain+0xb0>
    81a4:	eb0002f7 	bl	8d88 <printk>
	clean_reboot();
    81a8:	eb000466 	bl	9348 <clean_reboot>
    81ac:	0000a914 	andeq	sl, r0, r4, lsl r9
    81b0:	0000b2d8 	ldrdeq	fp, [r0], -r8
    81b4:	00008010 	andeq	r8, r0, r0, lsl r0
    81b8:	0000a93c 	andeq	sl, r0, ip, lsr r9
    81bc:	0000a94c 	andeq	sl, r0, ip, asr #18
    81c0:	0000a960 	andeq	sl, r0, r0, ror #18

000081c4 <Q_start>:
    E *head, *tail;
    unsigned cnt;
} Q_t;

// used for iteration.
static E *Q_start(Q_t *q)   { return q->head; }
    81c4:	e5900000 	ldr	r0, [r0]
    81c8:	e12fff1e 	bx	lr

000081cc <Q_next>:
static E *Q_next(E *e)      { return e->next; }
    81cc:	e5900000 	ldr	r0, [r0]
    81d0:	e12fff1e 	bx	lr

000081d4 <Q_nelem>:
static unsigned Q_nelem(Q_t *q) { return q->cnt; }
    81d4:	e5900008 	ldr	r0, [r0, #8]
    81d8:	e12fff1e 	bx	lr

000081dc <Q_append>:
    return e;
}

// insert at tail. (for FIFO)
static void Q_append(Q_t *q, E *e) {
    e->next = 0;
    81dc:	e3a03000 	mov	r3, #0
    81e0:	e5813000 	str	r3, [r1]
    q->cnt++;
    81e4:	e5903008 	ldr	r3, [r0, #8]
    81e8:	e2833001 	add	r3, r3, #1
    81ec:	e5803008 	str	r3, [r0, #8]
    if(!q->tail) 
    81f0:	e5903004 	ldr	r3, [r0, #4]
    81f4:	e3530000 	cmp	r3, #0
    81f8:	1a000002 	bne	8208 <Q_append+0x2c>
        q->head = q->tail = e;
    81fc:	e5801004 	str	r1, [r0, #4]
    8200:	e5801000 	str	r1, [r0]
    8204:	e12fff1e 	bx	lr
    else {
        q->tail->next = e;
    8208:	e5831000 	str	r1, [r3]
        q->tail = e;
    820c:	e5801004 	str	r1, [r0, #4]
    8210:	e12fff1e 	bx	lr

00008214 <Q_push>:
    }
}

// insert at head (for LIFO)
static void Q_push(Q_t *q, E *e) {
    q->cnt++;
    8214:	e5903008 	ldr	r3, [r0, #8]
    8218:	e2833001 	add	r3, r3, #1
    821c:	e5803008 	str	r3, [r0, #8]
    e->next = q->head;
    8220:	e5903000 	ldr	r3, [r0]
    8224:	e5813000 	str	r3, [r1]
    q->head = e;
    8228:	e5801000 	str	r1, [r0]
    if(!q->tail)
    822c:	e5903004 	ldr	r3, [r0, #4]
    8230:	e3530000 	cmp	r3, #0
        q->tail = e;
    8234:	05801004 	streq	r1, [r0, #4]
    8238:	e12fff1e 	bx	lr

0000823c <th_free>:
    demand(is_aligned(&t->stack[0],8), stack must be 8-byte aligned!);
    t->tid = tid++;
    return t;
}

static void th_free(rpi_preemptive_thread_t *th) {
    823c:	e92d4008 	push	{r3, lr}
    8240:	e1a01000 	mov	r1, r0
    // push on the front in case helps with caching.
    Q_push(&freeq, th);
    8244:	e59f0004 	ldr	r0, [pc, #4]	; 8250 <th_free+0x14>
    8248:	ebfffff1 	bl	8214 <Q_push>
    824c:	e8bd8008 	pop	{r3, pc}
    8250:	0000b2e0 	andeq	fp, r0, r0, ror #5

00008254 <Q_empty>:
// used for iteration.
static E *Q_start(Q_t *q)   { return q->head; }
static E *Q_next(E *e)      { return e->next; }
static unsigned Q_nelem(Q_t *q) { return q->cnt; }

static int Q_empty(Q_t *q)  { 
    8254:	e92d4010 	push	{r4, lr}
    8258:	e1a04000 	mov	r4, r0
    if(q->head)
    825c:	e5903000 	ldr	r3, [r0]
    8260:	e3530000 	cmp	r3, #0
    8264:	1a000013 	bne	82b8 <Q_empty+0x64>
        return 0;
    assert(Q_nelem(q) == 0);
    8268:	ebffffd9 	bl	81d4 <Q_nelem>
    826c:	e3500000 	cmp	r0, #0
    8270:	0a000006 	beq	8290 <Q_empty+0x3c>
    8274:	eb0002de 	bl	8df4 <rpi_reset_putc>
    8278:	e59f0048 	ldr	r0, [pc, #72]	; 82c8 <Q_empty+0x74>
    827c:	e59f1048 	ldr	r1, [pc, #72]	; 82cc <Q_empty+0x78>
    8280:	e59f2048 	ldr	r2, [pc, #72]	; 82d0 <Q_empty+0x7c>
    8284:	e3a03015 	mov	r3, #21
    8288:	eb0002be 	bl	8d88 <printk>
    828c:	eb00042d 	bl	9348 <clean_reboot>
    demand(!q->tail, invalid Q);
    8290:	e5943004 	ldr	r3, [r4, #4]
    8294:	e3530000 	cmp	r3, #0
    8298:	0a000008 	beq	82c0 <Q_empty+0x6c>
    829c:	eb0002d4 	bl	8df4 <rpi_reset_putc>
    82a0:	e59f002c 	ldr	r0, [pc, #44]	; 82d4 <Q_empty+0x80>
    82a4:	e59f1020 	ldr	r1, [pc, #32]	; 82cc <Q_empty+0x78>
    82a8:	e59f2020 	ldr	r2, [pc, #32]	; 82d0 <Q_empty+0x7c>
    82ac:	e3a03016 	mov	r3, #22
    82b0:	eb0002b4 	bl	8d88 <printk>
    82b4:	eb000423 	bl	9348 <clean_reboot>
static E *Q_next(E *e)      { return e->next; }
static unsigned Q_nelem(Q_t *q) { return q->cnt; }

static int Q_empty(Q_t *q)  { 
    if(q->head)
        return 0;
    82b8:	e3a00000 	mov	r0, #0
    82bc:	e8bd8010 	pop	{r4, pc}
    assert(Q_nelem(q) == 0);
    demand(!q->tail, invalid Q);
    return 1;
    82c0:	e3a00001 	mov	r0, #1
}
    82c4:	e8bd8010 	pop	{r4, pc}
    82c8:	0000a9c0 	andeq	sl, r0, r0, asr #19
    82cc:	0000a9e0 	andeq	sl, r0, r0, ror #19
    82d0:	0000a96c 	andeq	sl, r0, ip, ror #18
    82d4:	0000a9e4 	andeq	sl, r0, r4, ror #19

000082d8 <Q_pop>:

// remove from front of list.
static E *Q_pop(Q_t *q) {
    82d8:	e92d4008 	push	{r3, lr}
    demand(q, bad input);
    82dc:	e3500000 	cmp	r0, #0
    82e0:	1a000006 	bne	8300 <Q_pop+0x28>
    82e4:	eb0002c2 	bl	8df4 <rpi_reset_putc>
    82e8:	e59f0070 	ldr	r0, [pc, #112]	; 8360 <Q_pop+0x88>
    82ec:	e59f1070 	ldr	r1, [pc, #112]	; 8364 <Q_pop+0x8c>
    82f0:	e59f2070 	ldr	r2, [pc, #112]	; 8368 <Q_pop+0x90>
    82f4:	e3a0301c 	mov	r3, #28
    82f8:	eb0002a2 	bl	8d88 <printk>
    82fc:	eb000411 	bl	9348 <clean_reboot>

    E *e = q->head;
    8300:	e5903000 	ldr	r3, [r0]
    if(!e) {
    8304:	e3530000 	cmp	r3, #0
    8308:	1a000009 	bne	8334 <Q_pop+0x5c>
        assert(Q_empty(q));
    830c:	ebffffd0 	bl	8254 <Q_empty>
    8310:	e3500000 	cmp	r0, #0
    8314:	1a00000f 	bne	8358 <Q_pop+0x80>
    8318:	eb0002b5 	bl	8df4 <rpi_reset_putc>
    831c:	e59f0048 	ldr	r0, [pc, #72]	; 836c <Q_pop+0x94>
    8320:	e59f103c 	ldr	r1, [pc, #60]	; 8364 <Q_pop+0x8c>
    8324:	e59f203c 	ldr	r2, [pc, #60]	; 8368 <Q_pop+0x90>
    8328:	e3a03020 	mov	r3, #32
    832c:	eb000295 	bl	8d88 <printk>
    8330:	eb000404 	bl	9348 <clean_reboot>
        return 0;
    }
    q->cnt--;
    8334:	e5902008 	ldr	r2, [r0, #8]
    8338:	e2422001 	sub	r2, r2, #1
    833c:	e5802008 	str	r2, [r0, #8]
    q->head = e->next;
    8340:	e5932000 	ldr	r2, [r3]
    8344:	e5802000 	str	r2, [r0]
    if(!q->head)
    8348:	e3520000 	cmp	r2, #0
        q->tail = 0;
    834c:	05802004 	streq	r2, [r0, #4]
    return e;
    8350:	e1a00003 	mov	r0, r3
    8354:	e8bd8008 	pop	{r3, pc}
    demand(q, bad input);

    E *e = q->head;
    if(!e) {
        assert(Q_empty(q));
        return 0;
    8358:	e3a00000 	mov	r0, #0
    q->cnt--;
    q->head = e->next;
    if(!q->head)
        q->tail = 0;
    return e;
}
    835c:	e8bd8008 	pop	{r3, pc}
    8360:	0000aa14 	andeq	sl, r0, r4, lsl sl
    8364:	0000a9e0 	andeq	sl, r0, r0, ror #19
    8368:	0000a974 	andeq	sl, r0, r4, ror r9
    836c:	0000aa3c 	andeq	sl, r0, ip, lsr sl

00008370 <th_alloc>:
}

#define is_aligned(_p,_n) (((unsigned)(_p))%(_n) == 0)

// keep a cache of freed thread blocks.  call kmalloc if run out.
static rpi_preemptive_thread_t *th_alloc(void) {
    8370:	e92d4008 	push	{r3, lr}
    rpi_preemptive_thread_t *t = Q_pop(&freeq);
    8374:	e59f0060 	ldr	r0, [pc, #96]	; 83dc <th_alloc+0x6c>
    8378:	ebffffd6 	bl	82d8 <Q_pop>

    // stack has to be 8-byte aligned.
    if(!t) {
    837c:	e3500000 	cmp	r0, #0
    8380:	1a000006 	bne	83a0 <th_alloc+0x30>
        t = kmalloc_aligned(sizeof *t, 8);
    8384:	e59f0054 	ldr	r0, [pc, #84]	; 83e0 <th_alloc+0x70>
    8388:	e3a01008 	mov	r1, #8
    838c:	eb00047f 	bl	9590 <kmalloc_aligned>
        nalloced++;
    8390:	e59f3044 	ldr	r3, [pc, #68]	; 83dc <th_alloc+0x6c>
    8394:	e593200c 	ldr	r2, [r3, #12]
    8398:	e2822001 	add	r2, r2, #1
    839c:	e583200c 	str	r2, [r3, #12]
    }
    demand(is_aligned(&t->stack[0],8), stack must be 8-byte aligned!);
    83a0:	e3100007 	tst	r0, #7
    83a4:	0a000006 	beq	83c4 <th_alloc+0x54>
    83a8:	eb000291 	bl	8df4 <rpi_reset_putc>
    83ac:	e59f0030 	ldr	r0, [pc, #48]	; 83e4 <th_alloc+0x74>
    83b0:	e59f1030 	ldr	r1, [pc, #48]	; 83e8 <th_alloc+0x78>
    83b4:	e59f2030 	ldr	r2, [pc, #48]	; 83ec <th_alloc+0x7c>
    83b8:	e3a03027 	mov	r3, #39	; 0x27
    83bc:	eb000271 	bl	8d88 <printk>
    83c0:	eb0003e0 	bl	9348 <clean_reboot>
    t->tid = tid++;
    83c4:	e59f2024 	ldr	r2, [pc, #36]	; 83f0 <th_alloc+0x80>
    83c8:	e5923000 	ldr	r3, [r2]
    83cc:	e2831001 	add	r1, r3, #1
    83d0:	e5821000 	str	r1, [r2]
    83d4:	e5803004 	str	r3, [r0, #4]
    return t;
}
    83d8:	e8bd8008 	pop	{r3, pc}
    83dc:	0000b2e0 	andeq	fp, r0, r0, ror #5
    83e0:	00002010 	andeq	r2, r0, r0, lsl r0
    83e4:	0000aa58 	andeq	sl, r0, r8, asr sl
    83e8:	0000aab8 			; <UNDEFINED> instruction: 0x0000aab8
    83ec:	0000a97c 	andeq	sl, r0, ip, ror r9
    83f0:	0000a7c8 	andeq	sl, r0, r8, asr #15

000083f4 <rpi_cur_thread_preemptive>:
static unsigned nalloced = 0;

// return pointer to the current thread.
rpi_preemptive_thread_t *rpi_cur_thread_preemptive(void) {
    return cur_thread;
}
    83f4:	e59f3004 	ldr	r3, [pc, #4]	; 8400 <rpi_cur_thread_preemptive+0xc>
    83f8:	e5930010 	ldr	r0, [r3, #16]
    83fc:	e12fff1e 	bx	lr
    8400:	0000b2e0 	andeq	fp, r0, r0, ror #5

00008404 <interrupt_vector>:
 * context switch interrupt
 * decide whether or not to preemt currently running thread and do so if so.
 *
 * MAKE SURE YOU DON'T MESS WITH THE STACK IN THIS FN, OR ELSE IT WILL SCREW WITH THE CSWITCH
 */
void interrupt_vector(unsigned pc) {
    8404:	e92d4038 	push	{r3, r4, r5, lr}
    //check to see if was a timer interupt, and clear it if so.
    dev_barrier();
    8408:	eb000731 	bl	a0d4 <dev_barrier>
    unsigned pending = GET32(IRQ_basic_pending);
    840c:	e59f007c 	ldr	r0, [pc, #124]	; 8490 <interrupt_vector+0x8c>
    8410:	eb000743 	bl	a124 <GET32>
    if((pending & RPI_BASIC_ARM_TIMER_IRQ) == 0)
    8414:	e3100001 	tst	r0, #1
    8418:	08bd8038 	popeq	{r3, r4, r5, pc}
        return;
    PUT32(arm_timer_IRQClear, 1);
    841c:	e59f0070 	ldr	r0, [pc, #112]	; 8494 <interrupt_vector+0x90>
    8420:	e3a01001 	mov	r1, #1
    8424:	eb000732 	bl	a0f4 <PUT32>
    dev_barrier();
    8428:	eb000729 	bl	a0d4 <dev_barrier>

    /* ------perform the context switch------- */
    rpi_preemptive_thread_t * old_thread = cur_thread;
    842c:	e59f3064 	ldr	r3, [pc, #100]	; 8498 <interrupt_vector+0x94>
    8430:	e5934010 	ldr	r4, [r3, #16]
    if(old_thread->done){
    8434:	e5943008 	ldr	r3, [r4, #8]
    8438:	e3530000 	cmp	r3, #0
    843c:	0a000002 	beq	844c <interrupt_vector+0x48>
        th_free(old_thread);
    8440:	e1a00004 	mov	r0, r4
    8444:	ebffff7c 	bl	823c <th_free>
    8448:	ea000002 	b	8458 <interrupt_vector+0x54>
    }else{
        Q_append(&runq, old_thread);
    844c:	e59f0048 	ldr	r0, [pc, #72]	; 849c <interrupt_vector+0x98>
    8450:	e1a01004 	mov	r1, r4
    8454:	ebffff60 	bl	81dc <Q_append>
    }

    if(Q_nelem(&runq) <= 1){
    8458:	e59f003c 	ldr	r0, [pc, #60]	; 849c <interrupt_vector+0x98>
    845c:	ebffff5c 	bl	81d4 <Q_nelem>
    8460:	e3500001 	cmp	r0, #1
    8464:	8a000000 	bhi	846c <interrupt_vector+0x68>
        //there's only one thread left, so we want to resume synchronous
        system_disable_interrupts(); //this isn't working.
    8468:	eb000736 	bl	a148 <system_disable_interrupts>
    }

    rpi_preemptive_thread_t * new_thread = Q_pop(&runq);
    846c:	e59f5024 	ldr	r5, [pc, #36]	; 8498 <interrupt_vector+0x94>
    8470:	e2850014 	add	r0, r5, #20
    8474:	ebffff97 	bl	82d8 <Q_pop>
    8478:	e1a01000 	mov	r1, r0

    cur_thread = new_thread;
    847c:	e5850010 	str	r0, [r5, #16]
    rpi_cswitch_preemptive_banked(old_thread->stack, new_thread->stack);
    8480:	e2840010 	add	r0, r4, #16
    8484:	e2811010 	add	r1, r1, #16
    8488:	eb000070 	bl	8650 <rpi_cswitch_preemptive_banked>
    848c:	e8bd8038 	pop	{r3, r4, r5, pc}
    8490:	2000b200 	andcs	fp, r0, r0, lsl #4
    8494:	2000b40c 	andcs	fp, r0, ip, lsl #8
    8498:	0000b2e0 	andeq	fp, r0, r0, ror #5
    849c:	0000b2f4 	strdeq	fp, [r0], -r4

000084a0 <rpi_fork_preemptive>:
}

// create a new thread.
rpi_preemptive_thread_t *rpi_fork_preemptive(void (*code)(void *arg), void *arg) {
    84a0:	e92d4070 	push	{r4, r5, r6, lr}
    84a4:	e1a06000 	mov	r6, r0
    84a8:	e1a05001 	mov	r5, r1
    rpi_preemptive_thread_t *t = th_alloc();
    84ac:	ebffffaf 	bl	8370 <th_alloc>
    84b0:	e1a04000 	mov	r4, r0
     * do the brain-surgery on the new thread stack here.
     * must set up initial stack:
     *  - set LR, SP, and store <code> and <arg> where trampoline can get it.
     */
    void rpi_init_trampoline_preemptive(void);
    t->stack[4] = (uint32_t) code;
    84b4:	e5806020 	str	r6, [r0, #32]
    t->stack[5] = (uint32_t) arg;
    84b8:	e5805024 	str	r5, [r0, #36]	; 0x24
    t->stack[REG_SP_OFF] = (uint32_t) &t->stack[THREAD_MAXSTACK - 2];
    84bc:	e2803a02 	add	r3, r0, #8192	; 0x2000
    84c0:	e2833008 	add	r3, r3, #8
    84c4:	e5803044 	str	r3, [r0, #68]	; 0x44
    t->stack[REG_PC_OFF] = (uint32_t) &rpi_init_trampoline_preemptive; //set the starting PC. stack[REG_PC_OFF] stores the PC thread was interrupted at / the PC thread should go to when resuming.
    84c8:	e59f301c 	ldr	r3, [pc, #28]	; 84ec <rpi_fork_preemptive+0x4c>
    84cc:	e580304c 	str	r3, [r0, #76]	; 0x4c

    t->done = 0; //mark as not done
    84d0:	e3a03000 	mov	r3, #0
    84d4:	e5803008 	str	r3, [r0, #8]

    Q_append(&runq, t);
    84d8:	e59f0010 	ldr	r0, [pc, #16]	; 84f0 <rpi_fork_preemptive+0x50>
    84dc:	e1a01004 	mov	r1, r4
    84e0:	ebffff3d 	bl	81dc <Q_append>
    return t;
}
    84e4:	e1a00004 	mov	r0, r4
    84e8:	e8bd8070 	pop	{r4, r5, r6, pc}
    84ec:	0000875c 	andeq	r8, r0, ip, asr r7
    84f0:	0000b2f4 	strdeq	fp, [r0], -r4

000084f4 <rpi_exit_preemptive>:
     * Why spin?
     * This thread is done, so just spin. Once the context switch interrupt
     * happens, it will pull the processor off of this spin, and throw away
     * this process, so this infinite loop will be ended, and forgotten about.
     */
    cur_thread->done = 1; //thread is done.
    84f4:	e59f300c 	ldr	r3, [pc, #12]	; 8508 <rpi_exit_preemptive+0x14>
    84f8:	e5933010 	ldr	r3, [r3, #16]
    84fc:	e3a02001 	mov	r2, #1
    8500:	e5832008 	str	r2, [r3, #8]
    8504:	eafffffe 	b	8504 <rpi_exit_preemptive+0x10>
    8508:	0000b2e0 	andeq	fp, r0, r0, ror #5

0000850c <rpi_thread_start_preemptive>:
/*
 * starts the thread system.
 * note: our caller is not a thread!  so you have to figure
 * out how to handle this.
 */
void rpi_thread_start_preemptive(void) {
    850c:	e92d4008 	push	{r3, lr}
    // statically check that the stack is 8 byte aligned.
    AssertNow(offsetof(rpi_preemptive_thread_t, stack) % 8 == 0);
    // statically check that the register save area is at offset 0.

    // no other runnable thread: return.
    if(Q_empty(&runq))
    8510:	e59f0034 	ldr	r0, [pc, #52]	; 854c <rpi_thread_start_preemptive+0x40>
    8514:	ebffff4e 	bl	8254 <Q_empty>
    8518:	e3500000 	cmp	r0, #0
    851c:	18bd8008 	popne	{r3, pc}

    //  1. create a new fake thread
    //  2. dequeue a thread from the runq
    //  3. context switch to it, saving current state in
    //        <scheduler_thread>
    scheduler_thread = th_alloc();
    8520:	ebffff92 	bl	8370 <th_alloc>
    8524:	e59f3024 	ldr	r3, [pc, #36]	; 8550 <rpi_thread_start_preemptive+0x44>
    8528:	e5830020 	str	r0, [r3, #32]
    cur_thread = scheduler_thread;
    852c:	e5830010 	str	r0, [r3, #16]

    //init interrupts so that we can be preempted
    cycle_cnt_init();
    8530:	e3a03001 	mov	r3, #1
    8534:	ee0f3f1c 	mcr	15, 0, r3, cr15, cr12, {0}
    int_init();
    8538:	eb00064e 	bl	9e78 <int_init>
    timer_interrupt_init(PREEMTION_TIME);
    853c:	e3a00c05 	mov	r0, #1280	; 0x500
    8540:	eb0006d3 	bl	a094 <timer_interrupt_init>
    system_enable_interrupts();
    8544:	eb0006fb 	bl	a138 <system_enable_interrupts>
    8548:	e8bd8008 	pop	{r3, pc}
    854c:	0000b2f4 	strdeq	fp, [r0], -r4
    8550:	0000b2e0 	andeq	fp, r0, r0, ror #5

00008554 <rpi_stack_check_preemptive>:
}

// check the current thread stack.
void rpi_stack_check_preemptive(void) {
    8554:	e92d4008 	push	{r3, lr}
    unimplemented();
    8558:	eb000225 	bl	8df4 <rpi_reset_putc>
    855c:	e59f0010 	ldr	r0, [pc, #16]	; 8574 <rpi_stack_check_preemptive+0x20>
    8560:	e59f1010 	ldr	r1, [pc, #16]	; 8578 <rpi_stack_check_preemptive+0x24>
    8564:	e59f2010 	ldr	r2, [pc, #16]	; 857c <rpi_stack_check_preemptive+0x28>
    8568:	e3a0309c 	mov	r3, #156	; 0x9c
    856c:	eb000205 	bl	8d88 <printk>
    8570:	eb000374 	bl	9348 <clean_reboot>
    8574:	0000aac8 	andeq	sl, r0, r8, asr #21
    8578:	0000aab8 			; <UNDEFINED> instruction: 0x0000aab8
    857c:	0000a988 	andeq	sl, r0, r8, lsl #19

00008580 <rpi_join_preemptive>:
/********************************************************************
 * save for homework.
 */

// block caller until thread <th> completes.
void rpi_join_preemptive(rpi_preemptive_thread_t *th) {
    8580:	e92d43f8 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
    8584:	e1a05000 	mov	r5, r0
    if(th == scheduler_thread){
    8588:	e59f3084 	ldr	r3, [pc, #132]	; 8614 <rpi_join_preemptive+0x94>
    858c:	e5933020 	ldr	r3, [r3, #32]
    8590:	e1500003 	cmp	r0, r3
    8594:	08bd83f8 	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
        return; //to prevent deadlock; so that scheduler doesn't wait on itself.
    }
    //continually loop through freeq and runq and check if freed
    while(1){
        unsigned found = 0;
        rpi_preemptive_thread_t * curr = Q_start(&runq);
    8598:	e59f4074 	ldr	r4, [pc, #116]	; 8614 <rpi_join_preemptive+0x94>
    859c:	e2848014 	add	r8, r4, #20
    85a0:	e3a09000 	mov	r9, #0
        if(th == cur_thread){
            found = 1;
        }else{ //or check to see if it's found on runq
            while(curr != runq.tail){
                if(curr == th){
                    found = 1;
    85a4:	e3a07001 	mov	r7, #1
        return; //to prevent deadlock; so that scheduler doesn't wait on itself.
    }
    //continually loop through freeq and runq and check if freed
    while(1){
        unsigned found = 0;
        rpi_preemptive_thread_t * curr = Q_start(&runq);
    85a8:	e1a00008 	mov	r0, r8
    85ac:	ebffff04 	bl	81c4 <Q_start>
        //check to see if thread found on runq
        if(th == cur_thread){
    85b0:	e5943010 	ldr	r3, [r4, #16]
    85b4:	e1550003 	cmp	r5, r3
    85b8:	0a000008 	beq	85e0 <rpi_join_preemptive+0x60>
    85bc:	e1a06009 	mov	r6, r9
    85c0:	ea000002 	b	85d0 <rpi_join_preemptive+0x50>
            found = 1;
        }else{ //or check to see if it's found on runq
            while(curr != runq.tail){
                if(curr == th){
    85c4:	e1500005 	cmp	r0, r5
                    found = 1;
    85c8:	01a06007 	moveq	r6, r7
                }
                curr = Q_next(curr);
    85cc:	ebfffefe 	bl	81cc <Q_next>
        rpi_preemptive_thread_t * curr = Q_start(&runq);
        //check to see if thread found on runq
        if(th == cur_thread){
            found = 1;
        }else{ //or check to see if it's found on runq
            while(curr != runq.tail){
    85d0:	e5943018 	ldr	r3, [r4, #24]
    85d4:	e1530000 	cmp	r3, r0
    85d8:	1afffff9 	bne	85c4 <rpi_join_preemptive+0x44>
    85dc:	ea000000 	b	85e4 <rpi_join_preemptive+0x64>
    while(1){
        unsigned found = 0;
        rpi_preemptive_thread_t * curr = Q_start(&runq);
        //check to see if thread found on runq
        if(th == cur_thread){
            found = 1;
    85e0:	e1a06007 	mov	r6, r7
                curr = Q_next(curr);
            }
        }

        //loop through freeq to see if it's been freed
        curr = Q_start(&freeq);
    85e4:	e1a00004 	mov	r0, r4
    85e8:	ebfffef5 	bl	81c4 <Q_start>
        while(curr != freeq.tail){
    85ec:	ea000002 	b	85fc <rpi_join_preemptive+0x7c>
            if(curr == th){
    85f0:	e1500005 	cmp	r0, r5
    85f4:	08bd83f8 	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
                return;
            }
            curr = Q_next(curr);
    85f8:	ebfffef3 	bl	81cc <Q_next>
            }
        }

        //loop through freeq to see if it's been freed
        curr = Q_start(&freeq);
        while(curr != freeq.tail){
    85fc:	e5943004 	ldr	r3, [r4, #4]
    8600:	e1530000 	cmp	r3, r0
    8604:	1afffff9 	bne	85f0 <rpi_join_preemptive+0x70>
                return;
            }
            curr = Q_next(curr);
        }

        if(!found){
    8608:	e3560000 	cmp	r6, #0
    860c:	1affffe5 	bne	85a8 <rpi_join_preemptive+0x28>
    8610:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
    8614:	0000b2e0 	andeq	fp, r0, r0, ror #5

00008618 <rpi_exact_sleep_preemptive>:
}

// put the current thread on a blocked queue: resume in
// exactly // <usec> micro-seconds.  not before, not after.
// should give low-error resumption times.
void rpi_exact_sleep_preemptive(uint32_t usec) {
    8618:	e92d4008 	push	{r3, lr}
    unimplemented();
    861c:	eb0001f4 	bl	8df4 <rpi_reset_putc>
    8620:	e59f0010 	ldr	r0, [pc, #16]	; 8638 <rpi_exact_sleep_preemptive+0x20>
    8624:	e59f1010 	ldr	r1, [pc, #16]	; 863c <rpi_exact_sleep_preemptive+0x24>
    8628:	e59f2010 	ldr	r2, [pc, #16]	; 8640 <rpi_exact_sleep_preemptive+0x28>
    862c:	e3a030cb 	mov	r3, #203	; 0xcb
    8630:	eb0001d4 	bl	8d88 <printk>
    8634:	eb000343 	bl	9348 <clean_reboot>
    8638:	0000aac8 	andeq	sl, r0, r8, asr #21
    863c:	0000aab8 			; <UNDEFINED> instruction: 0x0000aab8
    8640:	0000a9a4 	andeq	sl, r0, r4, lsr #19

00008644 <rpi_cswitch_preemptive_nonbanked>:
    8644:	e8807ff0 	stm	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
    8648:	e8917ff0 	ldm	r1, {r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
    864c:	e12fff1e 	bx	lr

00008650 <rpi_cswitch_preemptive_banked>:
    8650:	e59d2010 	ldr	r2, [sp, #16]
    8654:	e5802000 	str	r2, [r0]
    8658:	e59d2014 	ldr	r2, [sp, #20]
    865c:	e5802004 	str	r2, [r0, #4]
    8660:	e59d2018 	ldr	r2, [sp, #24]
    8664:	e5802008 	str	r2, [r0, #8]
    8668:	e59d201c 	ldr	r2, [sp, #28]
    866c:	e580200c 	str	r2, [r0, #12]
    8670:	e59d2020 	ldr	r2, [sp, #32]
    8674:	e5802010 	str	r2, [r0, #16]
    8678:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
    867c:	e5802014 	str	r2, [r0, #20]
    8680:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
    8684:	e5802018 	str	r2, [r0, #24]
    8688:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
    868c:	e580201c 	str	r2, [r0, #28]
    8690:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
    8694:	e5802020 	str	r2, [r0, #32]
    8698:	e59d2034 	ldr	r2, [sp, #52]	; 0x34
    869c:	e5802024 	str	r2, [r0, #36]	; 0x24
    86a0:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    86a4:	e5802028 	str	r2, [r0, #40]	; 0x28
    86a8:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
    86ac:	e580202c 	str	r2, [r0, #44]	; 0x2c
    86b0:	e59d2040 	ldr	r2, [sp, #64]	; 0x40
    86b4:	e5802030 	str	r2, [r0, #48]	; 0x30
    86b8:	e2800034 	add	r0, r0, #52	; 0x34
    86bc:	e8d06000 	ldm	r0, {sp, lr}^
    86c0:	e2400034 	sub	r0, r0, #52	; 0x34
    86c4:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
    86c8:	e580203c 	str	r2, [r0, #60]	; 0x3c
    86cc:	e14f2000 	mrs	r2, SPSR
    86d0:	e5802040 	str	r2, [r0, #64]	; 0x40
    86d4:	e5912000 	ldr	r2, [r1]
    86d8:	e58d2010 	str	r2, [sp, #16]
    86dc:	e5912004 	ldr	r2, [r1, #4]
    86e0:	e58d2014 	str	r2, [sp, #20]
    86e4:	e5912008 	ldr	r2, [r1, #8]
    86e8:	e58d2018 	str	r2, [sp, #24]
    86ec:	e591200c 	ldr	r2, [r1, #12]
    86f0:	e58d201c 	str	r2, [sp, #28]
    86f4:	e5912010 	ldr	r2, [r1, #16]
    86f8:	e58d2020 	str	r2, [sp, #32]
    86fc:	e5912014 	ldr	r2, [r1, #20]
    8700:	e58d2024 	str	r2, [sp, #36]	; 0x24
    8704:	e5912018 	ldr	r2, [r1, #24]
    8708:	e58d2028 	str	r2, [sp, #40]	; 0x28
    870c:	e591201c 	ldr	r2, [r1, #28]
    8710:	e58d202c 	str	r2, [sp, #44]	; 0x2c
    8714:	e5912020 	ldr	r2, [r1, #32]
    8718:	e58d2030 	str	r2, [sp, #48]	; 0x30
    871c:	e5912024 	ldr	r2, [r1, #36]	; 0x24
    8720:	e58d2034 	str	r2, [sp, #52]	; 0x34
    8724:	e5912028 	ldr	r2, [r1, #40]	; 0x28
    8728:	e58d2038 	str	r2, [sp, #56]	; 0x38
    872c:	e591202c 	ldr	r2, [r1, #44]	; 0x2c
    8730:	e58d203c 	str	r2, [sp, #60]	; 0x3c
    8734:	e5912030 	ldr	r2, [r1, #48]	; 0x30
    8738:	e58d2040 	str	r2, [sp, #64]	; 0x40
    873c:	e2811034 	add	r1, r1, #52	; 0x34
    8740:	e8c16000 	stmia	r1, {sp, lr}^
    8744:	e2411034 	sub	r1, r1, #52	; 0x34
    8748:	e591203c 	ldr	r2, [r1, #60]	; 0x3c
    874c:	e58d2044 	str	r2, [sp, #68]	; 0x44
    8750:	e5912040 	ldr	r2, [r1, #64]	; 0x40
    8754:	e169f002 	msr	SPSR_fc, r2
    8758:	e12fff1e 	bx	lr

0000875c <rpi_init_trampoline_preemptive>:
    875c:	e1a01004 	mov	r1, r4
    8760:	e1a00005 	mov	r0, r5
    8764:	e12fff31 	blx	r1
    8768:	e3a00001 	mov	r0, #1
    876c:	ebffff60 	bl	84f4 <rpi_exit_preemptive>

00008770 <cq_print>:
#ifdef LINUX
#   include <string.h>
#endif
#include "circular.h"

void cq_print(cq_t *c) {
    8770:	e92d4010 	push	{r4, lr}
    8774:	e24dd010 	sub	sp, sp, #16
    debug("cq print: head=%d, tail=%d, nelem=%d, empty=%d\n", 
    8778:	e59f205c 	ldr	r2, [pc, #92]	; 87dc <cq_print+0x6c>
    877c:	e790e002 	ldr	lr, [r0, r2]
    8780:	e59f3058 	ldr	r3, [pc, #88]	; 87e0 <cq_print+0x70>
    8784:	e790c003 	ldr	ip, [r0, r3]
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }

// if adding 1 to head = tail, then we have no space.
static inline int cq_full(cq_t *q) { return (q->head+1) % CQ_N == q->tail; }

static inline unsigned cq_nelem(cq_t *q) { return (q->head - q->tail) % CQ_N; }
    8788:	e7904002 	ldr	r4, [r0, r2]
    878c:	e7901003 	ldr	r1, [r0, r3]
    8790:	e0611004 	rsb	r1, r1, r4
    8794:	e1a01981 	lsl	r1, r1, #19
    8798:	e1a019a1 	lsr	r1, r1, #19
void cq_print(cq_t *c);

/*************************************************************************************
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }
    879c:	e7902002 	ldr	r2, [r0, r2]
    87a0:	e7903003 	ldr	r3, [r0, r3]
    87a4:	e1520003 	cmp	r2, r3
    87a8:	13a03000 	movne	r3, #0
    87ac:	03a03001 	moveq	r3, #1
    87b0:	e58de000 	str	lr, [sp]
    87b4:	e58dc004 	str	ip, [sp, #4]
    87b8:	e58d1008 	str	r1, [sp, #8]
    87bc:	e58d300c 	str	r3, [sp, #12]
    87c0:	e59f001c 	ldr	r0, [pc, #28]	; 87e4 <cq_print+0x74>
    87c4:	e59f101c 	ldr	r1, [pc, #28]	; 87e8 <cq_print+0x78>
    87c8:	e59f201c 	ldr	r2, [pc, #28]	; 87ec <cq_print+0x7c>
    87cc:	e3a0300a 	mov	r3, #10
    87d0:	eb00016c 	bl	8d88 <printk>
                c->head, c->tail, cq_nelem(c), cq_empty(c));
}
    87d4:	e28dd010 	add	sp, sp, #16
    87d8:	e8bd8010 	pop	{r4, pc}
    87dc:	00002004 	andeq	r2, r0, r4
    87e0:	00002008 	andeq	r2, r0, r8
    87e4:	0000ab28 	andeq	sl, r0, r8, lsr #22
    87e8:	0000ab64 	andeq	sl, r0, r4, ror #22
    87ec:	0000aaf4 	strdeq	sl, [r0], -r4

000087f0 <cq_ok>:

void cq_ok(cq_t *c) {
    87f0:	e92d4008 	push	{r3, lr}
    if(c->fence != 0x12345678)
    87f4:	e3a03a02 	mov	r3, #8192	; 0x2000
    87f8:	e7902003 	ldr	r2, [r0, r3]
    87fc:	e59f3020 	ldr	r3, [pc, #32]	; 8824 <cq_ok+0x34>
    8800:	e1520003 	cmp	r2, r3
    8804:	08bd8008 	popeq	{r3, pc}
        panic("fence is corrupted\n");
    8808:	eb000179 	bl	8df4 <rpi_reset_putc>
    880c:	e59f0014 	ldr	r0, [pc, #20]	; 8828 <cq_ok+0x38>
    8810:	e59f1014 	ldr	r1, [pc, #20]	; 882c <cq_ok+0x3c>
    8814:	e59f2014 	ldr	r2, [pc, #20]	; 8830 <cq_ok+0x40>
    8818:	e3a0300f 	mov	r3, #15
    881c:	eb000159 	bl	8d88 <printk>
    8820:	eb0002c8 	bl	9348 <clean_reboot>
    8824:	12345678 	eorsne	r5, r4, #120, 12	; 0x7800000
    8828:	0000ab70 	andeq	sl, r0, r0, ror fp
    882c:	0000ab64 	andeq	sl, r0, r4, ror #22
    8830:	0000ab00 	andeq	sl, r0, r0, lsl #22

00008834 <cq_init>:
}

void cq_init(cq_t *c, unsigned errors_fatal_p) {
    8834:	e92d4038 	push	{r3, r4, r5, lr}
    8838:	e1a04000 	mov	r4, r0
    883c:	e1a05001 	mov	r5, r1
    memset(c, 0, sizeof *c);
    8840:	e3a01000 	mov	r1, #0
    8844:	e59f216c 	ldr	r2, [pc, #364]	; 89b8 <cq_init+0x184>
    8848:	eb000146 	bl	8d68 <memset>
    c->fence = 0x12345678;
    884c:	e59f2168 	ldr	r2, [pc, #360]	; 89bc <cq_init+0x188>
    8850:	e3a03a02 	mov	r3, #8192	; 0x2000
    8854:	e7842003 	str	r2, [r4, r3]
    c->head = c->tail = 0;
    8858:	e59f2160 	ldr	r2, [pc, #352]	; 89c0 <cq_init+0x18c>
    885c:	e3a03000 	mov	r3, #0
    8860:	e7843002 	str	r3, [r4, r2]
    8864:	e59f0158 	ldr	r0, [pc, #344]	; 89c4 <cq_init+0x190>
    8868:	e7843000 	str	r3, [r4, r0]
    c->overflow = 0;
    886c:	e59f1154 	ldr	r1, [pc, #340]	; 89c8 <cq_init+0x194>
    8870:	e7843001 	str	r3, [r4, r1]
    c->errors_fatal_p = errors_fatal_p;
    8874:	e59f3150 	ldr	r3, [pc, #336]	; 89cc <cq_init+0x198>
    8878:	e7d41003 	ldrb	r1, [r4, r3]
    887c:	e2055001 	and	r5, r5, #1
    8880:	e3c11001 	bic	r1, r1, #1
    8884:	e1855001 	orr	r5, r5, r1
    8888:	e7c45003 	strb	r5, [r4, r3]
    888c:	e7941000 	ldr	r1, [r4, r0]
    8890:	e7943002 	ldr	r3, [r4, r2]
    assert(cq_empty(c));
    8894:	e1510003 	cmp	r1, r3
    8898:	0a000006 	beq	88b8 <cq_init+0x84>
    889c:	eb000154 	bl	8df4 <rpi_reset_putc>
    88a0:	e59f0128 	ldr	r0, [pc, #296]	; 89d0 <cq_init+0x19c>
    88a4:	e59f1128 	ldr	r1, [pc, #296]	; 89d4 <cq_init+0x1a0>
    88a8:	e59f2128 	ldr	r2, [pc, #296]	; 89d8 <cq_init+0x1a4>
    88ac:	e3a03018 	mov	r3, #24
    88b0:	eb000134 	bl	8d88 <printk>
    88b4:	eb0002a3 	bl	9348 <clean_reboot>

// if adding 1 to head = tail, then we have no space.
static inline int cq_full(cq_t *q) { return (q->head+1) % CQ_N == q->tail; }
    88b8:	e59f3104 	ldr	r3, [pc, #260]	; 89c4 <cq_init+0x190>
    88bc:	e7942003 	ldr	r2, [r4, r3]
    88c0:	e2822001 	add	r2, r2, #1
    88c4:	e1a02982 	lsl	r2, r2, #19
    88c8:	e2833004 	add	r3, r3, #4
    88cc:	e7943003 	ldr	r3, [r4, r3]
    assert(!cq_full(c));
    88d0:	e15309a2 	cmp	r3, r2, lsr #19
    88d4:	1a000006 	bne	88f4 <cq_init+0xc0>
    88d8:	eb000145 	bl	8df4 <rpi_reset_putc>
    88dc:	e59f00f8 	ldr	r0, [pc, #248]	; 89dc <cq_init+0x1a8>
    88e0:	e59f10ec 	ldr	r1, [pc, #236]	; 89d4 <cq_init+0x1a0>
    88e4:	e59f20ec 	ldr	r2, [pc, #236]	; 89d8 <cq_init+0x1a4>
    88e8:	e3a03019 	mov	r3, #25
    88ec:	eb000125 	bl	8d88 <printk>
    88f0:	eb000294 	bl	9348 <clean_reboot>

static inline unsigned cq_nelem(cq_t *q) { return (q->head - q->tail) % CQ_N; }
    88f4:	e59f30c8 	ldr	r3, [pc, #200]	; 89c4 <cq_init+0x190>
    88f8:	e7942003 	ldr	r2, [r4, r3]
    88fc:	e2833004 	add	r3, r3, #4
    8900:	e7943003 	ldr	r3, [r4, r3]
    8904:	e0633002 	rsb	r3, r3, r2
    assert(cq_nelem(c) == 0);
    8908:	e1b03983 	lsls	r3, r3, #19
    890c:	0a000006 	beq	892c <cq_init+0xf8>
    8910:	eb000137 	bl	8df4 <rpi_reset_putc>
    8914:	e59f00c4 	ldr	r0, [pc, #196]	; 89e0 <cq_init+0x1ac>
    8918:	e59f10b4 	ldr	r1, [pc, #180]	; 89d4 <cq_init+0x1a0>
    891c:	e59f20b4 	ldr	r2, [pc, #180]	; 89d8 <cq_init+0x1a4>
    8920:	e3a0301a 	mov	r3, #26
    8924:	eb000117 	bl	8d88 <printk>
    8928:	eb000286 	bl	9348 <clean_reboot>
void cq_print(cq_t *c);

/*************************************************************************************
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }
    892c:	e59f3090 	ldr	r3, [pc, #144]	; 89c4 <cq_init+0x190>
    8930:	e7942003 	ldr	r2, [r4, r3]
    8934:	e2833004 	add	r3, r3, #4
    8938:	e7943003 	ldr	r3, [r4, r3]
static inline unsigned cq_nelem(cq_t *q) { return (q->head - q->tail) % CQ_N; }
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }

// not blocking: wait: this never calls getc?
static inline int cq_pop_nonblock(cq_t *c, cqe_t *e) {
    if(cq_empty(c))
    893c:	e1520003 	cmp	r2, r3
    8940:	0a000009 	beq	896c <cq_init+0x138>
        return 0;
    unsigned tail = c->tail;
    8944:	e59f3074 	ldr	r3, [pc, #116]	; 89c0 <cq_init+0x18c>
    8948:	e7942003 	ldr	r2, [r4, r3]
    *e = c->c_buf[tail];
    894c:	e7d41002 	ldrb	r1, [r4, r2]
    8950:	e6ef1071 	uxtb	r1, r1
    c->tail = (tail+1)%CQ_N;
    8954:	e2822001 	add	r2, r2, #1
    8958:	e1a02982 	lsl	r2, r2, #19
    895c:	e1a029a2 	lsr	r2, r2, #19
    8960:	e7842003 	str	r2, [r4, r3]
    return 1;
    8964:	e3a03001 	mov	r3, #1
    8968:	ea000001 	b	8974 <cq_init+0x140>
    cqe_t e = 0x12;
    896c:	e3a01012 	mov	r1, #18
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }

// not blocking: wait: this never calls getc?
static inline int cq_pop_nonblock(cq_t *c, cqe_t *e) {
    if(cq_empty(c))
        return 0;
    8970:	e3a03000 	mov	r3, #0
    assert(cq_pop_nonblock(c,&e) == 0 && e == 0x12);
    8974:	e3530000 	cmp	r3, #0
    8978:	1a000002 	bne	8988 <cq_init+0x154>
    897c:	e3510012 	cmp	r1, #18
    8980:	0a000002 	beq	8990 <cq_init+0x15c>
    8984:	ea000002 	b	8994 <cq_init+0x160>
    8988:	e3a03000 	mov	r3, #0
    898c:	ea000000 	b	8994 <cq_init+0x160>
    8990:	e3a03001 	mov	r3, #1
    8994:	e3530000 	cmp	r3, #0
    8998:	18bd8038 	popne	{r3, r4, r5, pc}
    899c:	eb000114 	bl	8df4 <rpi_reset_putc>
    89a0:	e59f003c 	ldr	r0, [pc, #60]	; 89e4 <cq_init+0x1b0>
    89a4:	e59f1028 	ldr	r1, [pc, #40]	; 89d4 <cq_init+0x1a0>
    89a8:	e59f2028 	ldr	r2, [pc, #40]	; 89d8 <cq_init+0x1a4>
    89ac:	e3a0301c 	mov	r3, #28
    89b0:	eb0000f4 	bl	8d88 <printk>
    89b4:	eb000263 	bl	9348 <clean_reboot>
    89b8:	00002014 	andeq	r2, r0, r4, lsl r0
    89bc:	12345678 	eorsne	r5, r4, #120, 12	; 0x7800000
    89c0:	00002008 	andeq	r2, r0, r8
    89c4:	00002004 	andeq	r2, r0, r4
    89c8:	0000200c 	andeq	r2, r0, ip
    89cc:	00002010 	andeq	r2, r0, r0, lsl r0
    89d0:	0000ab94 	muleq	r0, r4, fp
    89d4:	0000ab64 	andeq	sl, r0, r4, ror #22
    89d8:	0000ab08 	andeq	sl, r0, r8, lsl #22
    89dc:	0000abb0 			; <UNDEFINED> instruction: 0x0000abb0
    89e0:	0000abcc 	andeq	sl, r0, ip, asr #23
    89e4:	0000abf0 	strdeq	sl, [r0], -r0

000089e8 <cq_pop>:
    assert(sz == cq_nelem(c));
    return 1;
}

// called from user space.
cqe_t cq_pop(cq_t *c) {
    89e8:	e92d0070 	push	{r4, r5, r6}
    89ec:	e1a03000 	mov	r3, r0
void cq_print(cq_t *c);

/*************************************************************************************
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }
    89f0:	e59f4054 	ldr	r4, [pc, #84]	; 8a4c <cq_pop+0x64>
    89f4:	e59f2054 	ldr	r2, [pc, #84]	; 8a50 <cq_pop+0x68>
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }

// not blocking: wait: this never calls getc?
static inline int cq_pop_nonblock(cq_t *c, cqe_t *e) {
    if(cq_empty(c))
        return 0;
    89f8:	e3a06000 	mov	r6, #0
    unsigned tail = c->tail;
    *e = c->c_buf[tail];
    c->tail = (tail+1)%CQ_N;
    return 1;
    89fc:	e3a00001 	mov	r0, #1
void cq_print(cq_t *c);

/*************************************************************************************
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }
    8a00:	e793c004 	ldr	ip, [r3, r4]
    8a04:	e7931002 	ldr	r1, [r3, r2]
static inline unsigned cq_nelem(cq_t *q) { return (q->head - q->tail) % CQ_N; }
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }

// not blocking: wait: this never calls getc?
static inline int cq_pop_nonblock(cq_t *c, cqe_t *e) {
    if(cq_empty(c))
    8a08:	e15c0001 	cmp	ip, r1
    8a0c:	0a000008 	beq	8a34 <cq_pop+0x4c>
        return 0;
    unsigned tail = c->tail;
    8a10:	e7931002 	ldr	r1, [r3, r2]
    *e = c->c_buf[tail];
    8a14:	e7d35001 	ldrb	r5, [r3, r1]
    8a18:	e6ef5075 	uxtb	r5, r5
    c->tail = (tail+1)%CQ_N;
    8a1c:	e2811001 	add	r1, r1, #1
    8a20:	e1a01981 	lsl	r1, r1, #19
    8a24:	e1a019a1 	lsr	r1, r1, #19
    8a28:	e7831002 	str	r1, [r3, r2]
    return 1;
    8a2c:	e1a01000 	mov	r1, r0
    8a30:	ea000000 	b	8a38 <cq_pop+0x50>
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }

// not blocking: wait: this never calls getc?
static inline int cq_pop_nonblock(cq_t *c, cqe_t *e) {
    if(cq_empty(c))
        return 0;
    8a34:	e1a01006 	mov	r1, r6
    cqe_t e;

	// wait til interrupt puts something here: if interrupts not enabled,
    // this will deadlock.
    while(!cq_pop_nonblock(c,&e))
    8a38:	e3510000 	cmp	r1, #0
    8a3c:	0affffef 	beq	8a00 <cq_pop+0x18>
        ;
        // panic("will deadlock: interrupts not enabled [FIXME]\n");
    return e;
}
    8a40:	e1a00005 	mov	r0, r5
    8a44:	e8bd0070 	pop	{r4, r5, r6}
    8a48:	e12fff1e 	bx	lr
    8a4c:	00002004 	andeq	r2, r0, r4
    8a50:	00002008 	andeq	r2, r0, r8

00008a54 <cq_pop_n>:

void cq_pop_n(cq_t *c, void *data, unsigned n) {
    8a54:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    8a58:	e1a07000 	mov	r7, r0
    8a5c:	e1a06001 	mov	r6, r1
    8a60:	e1a05002 	mov	r5, r2
    cqe_t *p = data;

    for(int i = 0; i < n; i++)
    8a64:	e3a04000 	mov	r4, #0
    8a68:	ea000003 	b	8a7c <cq_pop_n+0x28>
        p[i] = cq_pop(c);
    8a6c:	e1a00007 	mov	r0, r7
    8a70:	ebffffdc 	bl	89e8 <cq_pop>
    8a74:	e7c60004 	strb	r0, [r6, r4]
}

void cq_pop_n(cq_t *c, void *data, unsigned n) {
    cqe_t *p = data;

    for(int i = 0; i < n; i++)
    8a78:	e2844001 	add	r4, r4, #1
    8a7c:	e1540005 	cmp	r4, r5
    8a80:	3afffff9 	bcc	8a6c <cq_pop_n+0x18>
        p[i] = cq_pop(c);
}
    8a84:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

00008a88 <cq_pop_n_noblk>:
    assert(cq_nelem(c) == 0);
    cqe_t e = 0x12;
    assert(cq_pop_nonblock(c,&e) == 0 && e == 0x12);
}

int cq_pop_n_noblk(cq_t *q, void *data, unsigned n) {
    8a88:	e92d4070 	push	{r4, r5, r6, lr}
    8a8c:	e1a04000 	mov	r4, r0
    8a90:	e1a06001 	mov	r6, r1
    8a94:	e1a05002 	mov	r5, r2
    cq_ok(q);
    8a98:	ebffff54 	bl	87f0 <cq_ok>
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }

// if adding 1 to head = tail, then we have no space.
static inline int cq_full(cq_t *q) { return (q->head+1) % CQ_N == q->tail; }

static inline unsigned cq_nelem(cq_t *q) { return (q->head - q->tail) % CQ_N; }
    8a9c:	e59f3038 	ldr	r3, [pc, #56]	; 8adc <cq_pop_n_noblk+0x54>
    8aa0:	e7942003 	ldr	r2, [r4, r3]
    8aa4:	e2833004 	add	r3, r3, #4
    8aa8:	e7943003 	ldr	r3, [r4, r3]
    8aac:	e0633002 	rsb	r3, r3, r2
    8ab0:	e1a03983 	lsl	r3, r3, #19
    if(cq_nelem(q) < n)
    8ab4:	e15509a3 	cmp	r5, r3, lsr #19
    8ab8:	8a000005 	bhi	8ad4 <cq_pop_n_noblk+0x4c>
        return 0;
    cq_pop_n(q,data,n);
    8abc:	e1a00004 	mov	r0, r4
    8ac0:	e1a01006 	mov	r1, r6
    8ac4:	e1a02005 	mov	r2, r5
    8ac8:	ebffffe1 	bl	8a54 <cq_pop_n>
    return 1;
    8acc:	e3a00001 	mov	r0, #1
    8ad0:	e8bd8070 	pop	{r4, r5, r6, pc}
}

int cq_pop_n_noblk(cq_t *q, void *data, unsigned n) {
    cq_ok(q);
    if(cq_nelem(q) < n)
        return 0;
    8ad4:	e3a00000 	mov	r0, #0
    cq_pop_n(q,data,n);
    return 1;
}
    8ad8:	e8bd8070 	pop	{r4, r5, r6, pc}
    8adc:	00002004 	andeq	r2, r0, r4

00008ae0 <cq_peek_n>:

// non-destructively peek ahead <n> entries.
int cq_peek_n(cq_t *c, cqe_t *v, unsigned n) {
    8ae0:	e92d4070 	push	{r4, r5, r6, lr}
    8ae4:	e1a04000 	mov	r4, r0
    8ae8:	e59f3080 	ldr	r3, [pc, #128]	; 8b70 <cq_peek_n+0x90>
    8aec:	e7905003 	ldr	r5, [r0, r3]
    8af0:	e2833004 	add	r3, r3, #4
    8af4:	e7903003 	ldr	r3, [r0, r3]
    8af8:	e0635005 	rsb	r5, r3, r5
    8afc:	e1a05985 	lsl	r5, r5, #19
    8b00:	e1a059a5 	lsr	r5, r5, #19
    int sz = cq_nelem(c);
    if(n > sz)
    8b04:	e1520005 	cmp	r2, r5
    8b08:	8a000014 	bhi	8b60 <cq_peek_n+0x80>
        return 0;
    unsigned tail = c->tail;
    8b0c:	e59f3060 	ldr	r3, [pc, #96]	; 8b74 <cq_peek_n+0x94>
    8b10:	e7906003 	ldr	r6, [r0, r3]
    if(!cq_pop_n_noblk(c, v, n))
    8b14:	ebffffdb 	bl	8a88 <cq_pop_n_noblk>
    8b18:	e3500000 	cmp	r0, #0
    8b1c:	08bd8070 	popeq	{r4, r5, r6, pc}
        return 0;
    c->tail = tail;
    8b20:	e59f304c 	ldr	r3, [pc, #76]	; 8b74 <cq_peek_n+0x94>
    8b24:	e7846003 	str	r6, [r4, r3]
    8b28:	e59f2040 	ldr	r2, [pc, #64]	; 8b70 <cq_peek_n+0x90>
    8b2c:	e7942002 	ldr	r2, [r4, r2]
    8b30:	e7943003 	ldr	r3, [r4, r3]
    8b34:	e0633002 	rsb	r3, r3, r2
    8b38:	e1a03983 	lsl	r3, r3, #19
    assert(sz == cq_nelem(c));
    8b3c:	e15509a3 	cmp	r5, r3, lsr #19
    8b40:	0a000008 	beq	8b68 <cq_peek_n+0x88>
    8b44:	eb0000aa 	bl	8df4 <rpi_reset_putc>
    8b48:	e59f0028 	ldr	r0, [pc, #40]	; 8b78 <cq_peek_n+0x98>
    8b4c:	e59f1028 	ldr	r1, [pc, #40]	; 8b7c <cq_peek_n+0x9c>
    8b50:	e59f2028 	ldr	r2, [pc, #40]	; 8b80 <cq_peek_n+0xa0>
    8b54:	e3a03030 	mov	r3, #48	; 0x30
    8b58:	eb00008a 	bl	8d88 <printk>
    8b5c:	eb0001f9 	bl	9348 <clean_reboot>

// non-destructively peek ahead <n> entries.
int cq_peek_n(cq_t *c, cqe_t *v, unsigned n) {
    int sz = cq_nelem(c);
    if(n > sz)
        return 0;
    8b60:	e3a00000 	mov	r0, #0
    8b64:	e8bd8070 	pop	{r4, r5, r6, pc}
    unsigned tail = c->tail;
    if(!cq_pop_n_noblk(c, v, n))
        return 0;
    c->tail = tail;
    assert(sz == cq_nelem(c));
    return 1;
    8b68:	e3a00001 	mov	r0, #1
}
    8b6c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8b70:	00002004 	andeq	r2, r0, r4
    8b74:	00002008 	andeq	r2, r0, r8
    8b78:	0000ac28 	andeq	sl, r0, r8, lsr #24
    8b7c:	0000ab64 	andeq	sl, r0, r4, ror #22
    8b80:	0000ab10 	andeq	sl, r0, r0, lsl fp

00008b84 <cq_push_n>:

    for(int i = 0; i < n; i++)
        p[i] = cq_pop(c);
}

int cq_push_n(cq_t *c, void *data, unsigned n) {
    8b84:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8b88:	e59f3100 	ldr	r3, [pc, #256]	; 8c90 <cq_push_n+0x10c>
    8b8c:	e790c003 	ldr	ip, [r0, r3]
    8b90:	e2833004 	add	r3, r3, #4
    8b94:	e7903003 	ldr	r3, [r0, r3]
    8b98:	e063300c 	rsb	r3, r3, ip
    8b9c:	e1a03983 	lsl	r3, r3, #19
    8ba0:	e1a039a3 	lsr	r3, r3, #19
static inline unsigned cq_nspace(cq_t *q) { return CQ_N - cq_nelem(q); }
    8ba4:	e2633a02 	rsb	r3, r3, #8192	; 0x2000
    cqe_t *p = data;

    if(cq_nspace(c) < n)
    8ba8:	e1520003 	cmp	r2, r3
    8bac:	8a000031 	bhi	8c78 <cq_push_n+0xf4>
    8bb0:	e3a03000 	mov	r3, #0
    return 1;
}

// non-blocking push.
static inline int cq_push(cq_t *c, cqe_t x) {
    unsigned head = c->head;
    8bb4:	e59fc0d4 	ldr	ip, [pc, #212]	; 8c90 <cq_push_n+0x10c>
    unsigned tail = c->tail;
    8bb8:	e59f50d4 	ldr	r5, [pc, #212]	; 8c94 <cq_push_n+0x110>
    if(cq_full(c)) 
        return 0;
    8bbc:	e1a09003 	mov	r9, r3
    c->c_buf[head] = x;
    c->head = (head + 1) % CQ_N;
    return 1;
    8bc0:	e3a08001 	mov	r8, #1
    8bc4:	ea00001a 	b	8c34 <cq_push_n+0xb0>
        return 0;
    for(int i = 0; i < n; i++)
        if(!cq_push(c, p[i]))
    8bc8:	e7d1a003 	ldrb	sl, [r1, r3]
    return 1;
}

// non-blocking push.
static inline int cq_push(cq_t *c, cqe_t x) {
    unsigned head = c->head;
    8bcc:	e790400c 	ldr	r4, [r0, ip]
    unsigned tail = c->tail;
    8bd0:	e7906005 	ldr	r6, [r0, r5]
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }

// if adding 1 to head = tail, then we have no space.
static inline int cq_full(cq_t *q) { return (q->head+1) % CQ_N == q->tail; }
    8bd4:	e790700c 	ldr	r7, [r0, ip]
    8bd8:	e2877001 	add	r7, r7, #1
    8bdc:	e1a07987 	lsl	r7, r7, #19
    8be0:	e7906005 	ldr	r6, [r0, r5]

// non-blocking push.
static inline int cq_push(cq_t *c, cqe_t x) {
    unsigned head = c->head;
    unsigned tail = c->tail;
    if(cq_full(c)) 
    8be4:	e15609a7 	cmp	r6, r7, lsr #19
    8be8:	0a000006 	beq	8c08 <cq_push_n+0x84>
        return 0;
    c->c_buf[head] = x;
    8bec:	e7c0a004 	strb	sl, [r0, r4]
    c->head = (head + 1) % CQ_N;
    8bf0:	e2844001 	add	r4, r4, #1
    8bf4:	e1a04984 	lsl	r4, r4, #19
    8bf8:	e1a049a4 	lsr	r4, r4, #19
    8bfc:	e780400c 	str	r4, [r0, ip]
    return 1;
    8c00:	e1a04008 	mov	r4, r8
    8c04:	ea000000 	b	8c0c <cq_push_n+0x88>
// non-blocking push.
static inline int cq_push(cq_t *c, cqe_t x) {
    unsigned head = c->head;
    unsigned tail = c->tail;
    if(cq_full(c)) 
        return 0;
    8c08:	e1a04009 	mov	r4, r9
    8c0c:	e3540000 	cmp	r4, #0
    8c10:	1a000006 	bne	8c30 <cq_push_n+0xac>
            panic("not handling this\n");
    8c14:	eb000076 	bl	8df4 <rpi_reset_putc>
    8c18:	e59f0078 	ldr	r0, [pc, #120]	; 8c98 <cq_push_n+0x114>
    8c1c:	e59f1078 	ldr	r1, [pc, #120]	; 8c9c <cq_push_n+0x118>
    8c20:	e59f2078 	ldr	r2, [pc, #120]	; 8ca0 <cq_push_n+0x11c>
    8c24:	e3a0304e 	mov	r3, #78	; 0x4e
    8c28:	eb000056 	bl	8d88 <printk>
    8c2c:	eb0001c5 	bl	9348 <clean_reboot>
int cq_push_n(cq_t *c, void *data, unsigned n) {
    cqe_t *p = data;

    if(cq_nspace(c) < n)
        return 0;
    for(int i = 0; i < n; i++)
    8c30:	e2833001 	add	r3, r3, #1
    8c34:	e1530002 	cmp	r3, r2
    8c38:	3affffe2 	bcc	8bc8 <cq_push_n+0x44>
        if(!cq_push(c, p[i]))
            panic("not handling this\n");
    if(n)
    8c3c:	e3520000 	cmp	r2, #0
    8c40:	0a00000e 	beq	8c80 <cq_push_n+0xfc>
void cq_print(cq_t *c);

/*************************************************************************************
* inline these so they can be used when we bit-bang off the UART with no interrupts.
*/
static inline int cq_empty(cq_t *q) { return q->head == q->tail; }
    8c44:	e59f3044 	ldr	r3, [pc, #68]	; 8c90 <cq_push_n+0x10c>
    8c48:	e7902003 	ldr	r2, [r0, r3]
    8c4c:	e2833004 	add	r3, r3, #4
    8c50:	e7903003 	ldr	r3, [r0, r3]
        assert(!cq_empty(c));
    8c54:	e1520003 	cmp	r2, r3
    8c58:	1a00000a 	bne	8c88 <cq_push_n+0x104>
    8c5c:	eb000064 	bl	8df4 <rpi_reset_putc>
    8c60:	e59f003c 	ldr	r0, [pc, #60]	; 8ca4 <cq_push_n+0x120>
    8c64:	e59f1030 	ldr	r1, [pc, #48]	; 8c9c <cq_push_n+0x118>
    8c68:	e59f2030 	ldr	r2, [pc, #48]	; 8ca0 <cq_push_n+0x11c>
    8c6c:	e3a03050 	mov	r3, #80	; 0x50
    8c70:	eb000044 	bl	8d88 <printk>
    8c74:	eb0001b3 	bl	9348 <clean_reboot>

int cq_push_n(cq_t *c, void *data, unsigned n) {
    cqe_t *p = data;

    if(cq_nspace(c) < n)
        return 0;
    8c78:	e3a00000 	mov	r0, #0
    8c7c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    for(int i = 0; i < n; i++)
        if(!cq_push(c, p[i]))
            panic("not handling this\n");
    if(n)
        assert(!cq_empty(c));
    return 1;
    8c80:	e3a00001 	mov	r0, #1
    8c84:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8c88:	e3a00001 	mov	r0, #1
}
    8c8c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8c90:	00002004 	andeq	r2, r0, r4
    8c94:	00002008 	andeq	r2, r0, r8
    8c98:	0000ac4c 	andeq	sl, r0, ip, asr #24
    8c9c:	0000ab64 	andeq	sl, r0, r4, ror #22
    8ca0:	0000ab1c 	andeq	sl, r0, ip, lsl fp
    8ca4:	0000ac70 	andeq	sl, r0, r0, ror ip

00008ca8 <callee_save>:
    8ca8:	e12fff1e 	bx	lr

00008cac <store_one_asm>:
    8cac:	e5801000 	str	r1, [r0]
    8cb0:	e12fff1e 	bx	lr

00008cb4 <check_callee_save>:
    8cb4:	e3a04004 	mov	r4, #4
    8cb8:	e3a05005 	mov	r5, #5
    8cbc:	e3a06006 	mov	r6, #6
    8cc0:	e3a07007 	mov	r7, #7
    8cc4:	e3a08008 	mov	r8, #8
    8cc8:	e3a09009 	mov	r9, #9
    8ccc:	e3a0a00a 	mov	sl, #10
    8cd0:	e3a0b00b 	mov	fp, #11
    8cd4:	e3a0c00c 	mov	ip, #12
    8cd8:	e9202000 	stmdb	r0!, {sp}
    8cdc:	e9204ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00008ce0 <cswitch>:
    8ce0:	e5804000 	str	r4, [r0]
    8ce4:	e5805004 	str	r5, [r0, #4]
    8ce8:	e5806008 	str	r6, [r0, #8]
    8cec:	e580700c 	str	r7, [r0, #12]
    8cf0:	e5808010 	str	r8, [r0, #16]
    8cf4:	e5809014 	str	r9, [r0, #20]
    8cf8:	e580a018 	str	sl, [r0, #24]
    8cfc:	e580b01c 	str	fp, [r0, #28]
    8d00:	e580c020 	str	ip, [r0, #32]
    8d04:	e580e024 	str	lr, [r0, #36]	; 0x24
    8d08:	e580d028 	str	sp, [r0, #40]	; 0x28
    8d0c:	e3a04004 	mov	r4, #4
    8d10:	e3a05005 	mov	r5, #5
    8d14:	e3a06006 	mov	r6, #6
    8d18:	e3a07007 	mov	r7, #7
    8d1c:	e3a08008 	mov	r8, #8
    8d20:	e3a09009 	mov	r9, #9
    8d24:	e3a0a00a 	mov	sl, #10
    8d28:	e3a0b00b 	mov	fp, #11
    8d2c:	e3a0c00c 	mov	ip, #12
    8d30:	e3a0d00d 	mov	sp, #13
    8d34:	e3a0e00e 	mov	lr, #14
    8d38:	e5914000 	ldr	r4, [r1]
    8d3c:	e5915004 	ldr	r5, [r1, #4]
    8d40:	e5916008 	ldr	r6, [r1, #8]
    8d44:	e591700c 	ldr	r7, [r1, #12]
    8d48:	e5918010 	ldr	r8, [r1, #16]
    8d4c:	e5919014 	ldr	r9, [r1, #20]
    8d50:	e591a018 	ldr	sl, [r1, #24]
    8d54:	e591b01c 	ldr	fp, [r1, #28]
    8d58:	e591c020 	ldr	ip, [r1, #32]
    8d5c:	e591e024 	ldr	lr, [r1, #36]	; 0x24
    8d60:	e591d028 	ldr	sp, [r1, #40]	; 0x28
    8d64:	e12fff1e 	bx	lr

00008d68 <memset>:
#include <string.h>

void *memset(void *_p, int c, size_t n) {
    char *p = _p, *e = p + n;
    8d68:	e0802002 	add	r2, r0, r2
    8d6c:	e1a03000 	mov	r3, r0

    while(p < e)
    8d70:	ea000001 	b	8d7c <memset+0x14>
        *p++ = c;
    8d74:	e5c31000 	strb	r1, [r3]
    8d78:	e2833001 	add	r3, r3, #1
#include <string.h>

void *memset(void *_p, int c, size_t n) {
    char *p = _p, *e = p + n;

    while(p < e)
    8d7c:	e1530002 	cmp	r3, r2
    8d80:	3afffffb 	bcc	8d74 <memset+0xc>
        *p++ = c;
    return _p;
}
    8d84:	e12fff1e 	bx	lr

00008d88 <printk>:
#include <stdarg.h>

#include "rpi.h"
#include "va-printk.h"

int printk(const char *fmt, ...) {
    8d88:	e92d000f 	push	{r0, r1, r2, r3}
    8d8c:	e92d4030 	push	{r4, r5, lr}
    8d90:	e24dd00c 	sub	sp, sp, #12
    // this is a really huge buffer for a pi.   could do this better.
    static char buf[1024];
    va_list args;

    va_start(args, fmt);
    8d94:	e28d301c 	add	r3, sp, #28
    8d98:	e58d3004 	str	r3, [sp, #4]
        int sz = va_printk(buf, sizeof buf, fmt, args);
    8d9c:	e59f4034 	ldr	r4, [pc, #52]	; 8dd8 <printk+0x50>
    8da0:	e1a00004 	mov	r0, r4
    8da4:	e3a01b01 	mov	r1, #1024	; 0x400
    8da8:	e59d2018 	ldr	r2, [sp, #24]
    8dac:	eb0000c3 	bl	90c0 <va_printk>
    8db0:	e1a05000 	mov	r5, r0
    va_end(args);


#if 1
    putk(buf);
    8db4:	e59f3020 	ldr	r3, [pc, #32]	; 8ddc <printk+0x54>
    8db8:	e5933000 	ldr	r3, [r3]
    8dbc:	e1a00004 	mov	r0, r4
    8dc0:	e12fff33 	blx	r3
    int i;
    for(i = 0; buf[i]; i++)
        rpi_putchar(buf[i]);
#endif
    return sz;
}
    8dc4:	e1a00005 	mov	r0, r5
    8dc8:	e28dd00c 	add	sp, sp, #12
    8dcc:	e8bd4030 	pop	{r4, r5, lr}
    8dd0:	e28dd010 	add	sp, sp, #16
    8dd4:	e12fff1e 	bx	lr
    8dd8:	0000b304 	andeq	fp, r0, r4, lsl #6
    8ddc:	0000a7d0 	ldrdeq	sl, [r0], -r0

00008de0 <internal_putchar>:
#include "rpi.h"

static int internal_putchar(int c) { uart_putc(c); return c; }
    8de0:	e92d4010 	push	{r4, lr}
    8de4:	e1a04000 	mov	r4, r0
    8de8:	eb00040c 	bl	9e20 <uart_putc>
    8dec:	e1a00004 	mov	r0, r4
    8df0:	e8bd8010 	pop	{r4, pc}

00008df4 <rpi_reset_putc>:

// override this is going through the network.
int (*rpi_putchar)(int c) = internal_putchar;

void rpi_reset_putc(void) {
    rpi_putchar = internal_putchar;
    8df4:	e59f2008 	ldr	r2, [pc, #8]	; 8e04 <rpi_reset_putc+0x10>
    8df8:	e59f3008 	ldr	r3, [pc, #8]	; 8e08 <rpi_reset_putc+0x14>
    8dfc:	e5832000 	str	r2, [r3]
    8e00:	e12fff1e 	bx	lr
    8e04:	00008de0 	andeq	r8, r0, r0, ror #27
    8e08:	0000a7cc 	andeq	sl, r0, ip, asr #15

00008e0c <rpi_set_putc>:
}
void rpi_set_putc(int (*fp)(int)) {
    rpi_putchar = fp;
    8e0c:	e59f3004 	ldr	r3, [pc, #4]	; 8e18 <rpi_set_putc+0xc>
    8e10:	e5830000 	str	r0, [r3]
    8e14:	e12fff1e 	bx	lr
    8e18:	0000a7cc 	andeq	sl, r0, ip, asr #15

00008e1c <internal_putk>:
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    8e1c:	e92d4038 	push	{r3, r4, r5, lr}
    8e20:	e1a04000 	mov	r4, r0
    for(; *p; p++)
        rpi_putchar(*p);
    8e24:	e59f5020 	ldr	r5, [pc, #32]	; 8e4c <internal_putk+0x30>
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    8e28:	ea000002 	b	8e38 <internal_putk+0x1c>
        rpi_putchar(*p);
    8e2c:	e5953000 	ldr	r3, [r5]
    8e30:	e12fff33 	blx	r3
#include "rpi.h"

// much faster to send this as an entire string using the esp.
int internal_putk(const char *p) {
    for(; *p; p++)
    8e34:	e2844001 	add	r4, r4, #1
    8e38:	e5d40000 	ldrb	r0, [r4]
    8e3c:	e3500000 	cmp	r0, #0
    8e40:	1afffff9 	bne	8e2c <internal_putk+0x10>
        rpi_putchar(*p);
//  we were adding this.
//  rpi_putchar('\n');
    return 1;
}
    8e44:	e3a00001 	mov	r0, #1
    8e48:	e8bd8038 	pop	{r3, r4, r5, pc}
    8e4c:	0000a7cc 	andeq	sl, r0, ip, asr #15

00008e50 <isdigit>:
    if(puts_fp)
        putk = puts_fp;
}

// XXX: check sign promotion.
static int isdigit(int c) { return c >= '0' && c <= '9'; }
    8e50:	e2400030 	sub	r0, r0, #48	; 0x30
    8e54:	e3500009 	cmp	r0, #9
    8e58:	83a00000 	movhi	r0, #0
    8e5c:	93a00001 	movls	r0, #1
    8e60:	e12fff1e 	bx	lr

00008e64 <pad>:

// don't move: can't be inlined, gcc seems to have a bug.
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
    8e64:	e0611000 	rsb	r1, r1, r0
	// pad with leading spaces
	for(; len < width; len++)
		*p++ = ' ';
    8e68:	e3a03020 	mov	r3, #32
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8e6c:	ea000002 	b	8e7c <pad+0x18>
		*p++ = ' ';
    8e70:	e5c03000 	strb	r3, [r0]
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8e74:	e2811001 	add	r1, r1, #1
		*p++ = ' ';
    8e78:	e2800001 	add	r0, r0, #1
char * __emit_float(char *num, double d, unsigned wdith);

static char* pad(char *p,  char *base, int width) {
	int len = p - base;
	// pad with leading spaces
	for(; len < width; len++)
    8e7c:	e1510002 	cmp	r1, r2
    8e80:	bafffffa 	blt	8e70 <pad+0xc>
		*p++ = ' ';
	*p = 0;
    8e84:	e3a03000 	mov	r3, #0
    8e88:	e5c03000 	strb	r3, [r0]
	return p;
}
    8e8c:	e12fff1e 	bx	lr

00008e90 <reverse>:

static char* reverse(char *dst, int n, char *p, char *start) {
	// drop the lower chars if the string is too big.
	int len = p - start + 1; // include \0
    8e90:	e063c002 	rsb	ip, r3, r2
    8e94:	e28cc001 	add	ip, ip, #1
	if(len > n)
    8e98:	e15c0001 	cmp	ip, r1
		start += (len - n);
    8e9c:	c061100c 	rsbgt	r1, r1, ip
    8ea0:	c0833001 	addgt	r3, r3, r1

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    8ea4:	e2422001 	sub	r2, r2, #1
    8ea8:	e1a01000 	mov	r1, r0
    8eac:	ea000002 	b	8ebc <reverse+0x2c>
		*dst++ = *p;
    8eb0:	e452c001 	ldrb	ip, [r2], #-1
    8eb4:	e5c1c000 	strb	ip, [r1]
    8eb8:	e2811001 	add	r1, r1, #1
		start += (len - n);

	char *s = dst;
	
	// p starts at end.
	for(p--; p >= start; p--)
    8ebc:	e1520003 	cmp	r2, r3
    8ec0:	2afffffa 	bcs	8eb0 <reverse+0x20>
		*dst++ = *p;
	*dst++ = 0;
    8ec4:	e3a03000 	mov	r3, #0
    8ec8:	e5c13000 	strb	r3, [r1]

	return s;
}
    8ecc:	e12fff1e 	bx	lr

00008ed0 <emit>:

static char* emit(unsigned base, char *dst, int n, int val, int width, int signed_p) {
    8ed0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8ed4:	e24dd040 	sub	sp, sp, #64	; 0x40
    8ed8:	e1a05001 	mov	r5, r1
    8edc:	e1a04002 	mov	r4, r2
    8ee0:	e59d2058 	ldr	r2, [sp, #88]	; 0x58
	// XXX: constrain width to be >= bit size: can change this.
	if(width > n)
    8ee4:	e1520004 	cmp	r2, r4
		width = n - 1;
    8ee8:	c2442001 	subgt	r2, r4, #1

	char buf[64], *p = buf; 
	unsigned u = val;
    8eec:	e1a0c003 	mov	ip, r3

	switch(base) { 
    8ef0:	e2400002 	sub	r0, r0, #2
    8ef4:	e350000e 	cmp	r0, #14
    8ef8:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
    8efc:	ea000042 	b	900c <emit+0x13c>
    8f00:	00008fe4 	andeq	r8, r0, r4, ror #31
    8f04:	0000900c 	andeq	r9, r0, ip
    8f08:	0000900c 	andeq	r9, r0, ip
    8f0c:	0000900c 	andeq	r9, r0, ip
    8f10:	0000900c 	andeq	r9, r0, ip
    8f14:	0000900c 	andeq	r9, r0, ip
    8f18:	00008fd8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    8f1c:	0000900c 	andeq	r9, r0, ip
    8f20:	00008f3c 	andeq	r8, r0, ip, lsr pc
    8f24:	0000900c 	andeq	r9, r0, ip
    8f28:	0000900c 	andeq	r9, r0, ip
    8f2c:	0000900c 	andeq	r9, r0, ip
    8f30:	0000900c 	andeq	r9, r0, ip
    8f34:	0000900c 	andeq	r9, r0, ip
    8f38:	00008fb0 			; <UNDEFINED> instruction: 0x00008fb0
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
    8f3c:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
    8f40:	e2911000 	adds	r1, r1, #0
    8f44:	13a01001 	movne	r1, #1
    8f48:	e0111fa3 	ands	r1, r1, r3, lsr #31
				neg_p = 1;
				val = -val;
    8f4c:	1263c000 	rsbne	ip, r3, #0
	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
			if(val < 0 && signed_p) {
				neg_p = 1;
    8f50:	13a08001 	movne	r8, #1
	unsigned u = val;

	switch(base) { 
		case 10: 
		{
			unsigned neg_p = 0;
    8f54:	03a08000 	moveq	r8, #0
			if(val < 0 && signed_p) {
				neg_p = 1;
    8f58:	e1a0100d 	mov	r1, sp
				val = -val;
				u = val;
			}
			do { 
				*p++ = "0123456789"[u % 10];
    8f5c:	e59f70ec 	ldr	r7, [pc, #236]	; 9050 <emit+0x180>
    8f60:	e59f60ec 	ldr	r6, [pc, #236]	; 9054 <emit+0x184>
    8f64:	ea000000 	b	8f6c <emit+0x9c>
    8f68:	e1a01003 	mov	r1, r3
    8f6c:	e2813001 	add	r3, r1, #1
    8f70:	e08e0c97 	umull	r0, lr, r7, ip
    8f74:	e1a0e1ae 	lsr	lr, lr, #3
    8f78:	e1a0000e 	mov	r0, lr
    8f7c:	e08ee10e 	add	lr, lr, lr, lsl #2
    8f80:	e1a0e08e 	lsl	lr, lr, #1
    8f84:	e06ee00c 	rsb	lr, lr, ip
    8f88:	e7d6c00e 	ldrb	ip, [r6, lr]
    8f8c:	e5c1c000 	strb	ip, [r1]
			} while(u /= 10); 
    8f90:	e1a0c000 	mov	ip, r0
    8f94:	e3500000 	cmp	r0, #0
    8f98:	1afffff2 	bne	8f68 <emit+0x98>
			if(neg_p)
    8f9c:	e3580000 	cmp	r8, #0
				*p++ = '-';
    8fa0:	12813002 	addne	r3, r1, #2
    8fa4:	13a0002d 	movne	r0, #45	; 0x2d
    8fa8:	15c10001 	strbne	r0, [r1, #1]
    8fac:	ea00001d 	b	9028 <emit+0x158>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    8fb0:	e1a0e00d 	mov	lr, sp
			break;
		}
		case 16:
			u = val;
                        do {
                                *p++ = "0123456789abcdef"[u % 16];
    8fb4:	e59f009c 	ldr	r0, [pc, #156]	; 9058 <emit+0x188>
    8fb8:	e28e3001 	add	r3, lr, #1
    8fbc:	e20c100f 	and	r1, ip, #15
    8fc0:	e7d01001 	ldrb	r1, [r0, r1]
    8fc4:	e5ce1000 	strb	r1, [lr]
    8fc8:	e1a0e003 	mov	lr, r3
                        } while(u /= 16);
    8fcc:	e1b0c22c 	lsrs	ip, ip, #4
    8fd0:	1afffff8 	bne	8fb8 <emit+0xe8>
    8fd4:	ea000013 	b	9028 <emit+0x158>
                        break;
		// just a single char
		case 8:
			*p++ = val;
    8fd8:	e5cd3000 	strb	r3, [sp]
    8fdc:	e28d3001 	add	r3, sp, #1
			break;
    8fe0:	ea000010 	b	9028 <emit+0x158>
		width = n - 1;

	char buf[64], *p = buf; 
	unsigned u = val;

	switch(base) { 
    8fe4:	e1a0e00d 	mov	lr, sp
#if 0
			for(int i = 0; i < 32; i++)
				*p++ = "01"[(u & (1<<i)) != 0];
#else
                        do {
                        	*p++ = "01"[u % 2];
    8fe8:	e59f006c 	ldr	r0, [pc, #108]	; 905c <emit+0x18c>
    8fec:	e28e3001 	add	r3, lr, #1
    8ff0:	e20c1001 	and	r1, ip, #1
    8ff4:	e7d01001 	ldrb	r1, [r0, r1]
    8ff8:	e5ce1000 	strb	r1, [lr]
    8ffc:	e1a0e003 	mov	lr, r3
			} while(u /= 2);
    9000:	e1b0c0ac 	lsrs	ip, ip, #1
    9004:	1afffff8 	bne	8fec <emit+0x11c>
    9008:	ea000006 	b	9028 <emit+0x158>
#endif
			break;
		default:
			assert(0);
    900c:	ebffff78 	bl	8df4 <rpi_reset_putc>
    9010:	e59f0048 	ldr	r0, [pc, #72]	; 9060 <emit+0x190>
    9014:	e59f1048 	ldr	r1, [pc, #72]	; 9064 <emit+0x194>
    9018:	e59f2048 	ldr	r2, [pc, #72]	; 9068 <emit+0x198>
    901c:	e3a03075 	mov	r3, #117	; 0x75
    9020:	ebffff58 	bl	8d88 <printk>
    9024:	eb0000c7 	bl	9348 <clean_reboot>
	}
	// number string is reversed, so re-reverse it.
	return reverse(dst, n, pad(p, buf, width), buf);
    9028:	e1a00003 	mov	r0, r3
    902c:	e1a0100d 	mov	r1, sp
    9030:	ebffff8b 	bl	8e64 <pad>
    9034:	e1a02000 	mov	r2, r0
    9038:	e1a00005 	mov	r0, r5
    903c:	e1a01004 	mov	r1, r4
    9040:	e1a0300d 	mov	r3, sp
    9044:	ebffff91 	bl	8e90 <reverse>
}
    9048:	e28dd040 	add	sp, sp, #64	; 0x40
    904c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9050:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    9054:	0000acdc 	ldrdeq	sl, [r0], -ip
    9058:	0000ace8 	andeq	sl, r0, r8, ror #25
    905c:	0000acfc 	strdeq	sl, [r0], -ip
    9060:	0000acb4 			; <UNDEFINED> instruction: 0x0000acb4
    9064:	0000acc8 	andeq	sl, r0, r8, asr #25
    9068:	0000ac90 	muleq	r0, r0, ip

0000906c <rpi_set_output>:
// override this is going through the network.
int (*rpi_putchar)(int c) = internal_putchar;
#endif


void rpi_set_output(int (*putc_fp)(int), int (*puts_fp)(const char *)) {
    906c:	e92d4008 	push	{r3, lr}
    assert(putc_fp);
    9070:	e3500000 	cmp	r0, #0
    9074:	1a000006 	bne	9094 <rpi_set_output+0x28>
    9078:	ebffff5d 	bl	8df4 <rpi_reset_putc>
    907c:	e59f0028 	ldr	r0, [pc, #40]	; 90ac <rpi_set_output+0x40>
    9080:	e59f1028 	ldr	r1, [pc, #40]	; 90b0 <rpi_set_output+0x44>
    9084:	e59f2028 	ldr	r2, [pc, #40]	; 90b4 <rpi_set_output+0x48>
    9088:	e3a03020 	mov	r3, #32
    908c:	ebffff3d 	bl	8d88 <printk>
    9090:	eb0000ac 	bl	9348 <clean_reboot>
    rpi_putchar = putc_fp;
    9094:	e59f301c 	ldr	r3, [pc, #28]	; 90b8 <rpi_set_output+0x4c>
    9098:	e5830000 	str	r0, [r3]
    if(puts_fp)
    909c:	e3510000 	cmp	r1, #0
        putk = puts_fp;
    90a0:	159f3014 	ldrne	r3, [pc, #20]	; 90bc <rpi_set_output+0x50>
    90a4:	15831000 	strne	r1, [r3]
    90a8:	e8bd8008 	pop	{r3, pc}
    90ac:	0000ad00 	andeq	sl, r0, r0, lsl #26
    90b0:	0000acc8 	andeq	sl, r0, r8, asr #25
    90b4:	0000ac98 	muleq	r0, r8, ip
    90b8:	0000a7cc 	andeq	sl, r0, ip, asr #15
    90bc:	0000a7d0 	ldrdeq	sl, [r0], -r0

000090c0 <va_printk>:
	return reverse(dst, n, pad(p, buf, width), buf);
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
    90c0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    90c4:	e24dd08c 	sub	sp, sp, #140	; 0x8c
    90c8:	e1a0a000 	mov	sl, r0
    90cc:	e1a09003 	mov	r9, r3
	char *p = buf, *e = buf + n - 1;
    90d0:	e2411001 	sub	r1, r1, #1
    90d4:	e0808001 	add	r8, r0, r1

	buf[0] = 0;
    90d8:	e3a03000 	mov	r3, #0
    90dc:	e5c03000 	strb	r3, [r0]
}

#include "va-printk.h"

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;
    90e0:	e1a04000 	mov	r4, r0
			fmt+=2;
		} else {	
			fmt++;

			char *s, num[128];
			unsigned width = 0;
    90e4:	e1a0b003 	mov	fp, r3

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    90e8:	ea000086 	b	9308 <va_printk+0x248>
		if(*fmt != '%')
    90ec:	e3530025 	cmp	r3, #37	; 0x25
			*p++ = *fmt++;
    90f0:	12822001 	addne	r2, r2, #1
    90f4:	15c43000 	strbne	r3, [r4]
    90f8:	12844001 	addne	r4, r4, #1
    90fc:	1a000081 	bne	9308 <va_printk+0x248>
		
		else if(fmt[1] == '%') {
    9100:	e5d21001 	ldrb	r1, [r2, #1]
    9104:	e3510025 	cmp	r1, #37	; 0x25
			*p++ = *fmt;
    9108:	05c43000 	strbeq	r3, [r4]
			fmt+=2;
    910c:	02822002 	addeq	r2, r2, #2
	for(; *fmt && p < e; ) {
		if(*fmt != '%')
			*p++ = *fmt++;
		
		else if(fmt[1] == '%') {
			*p++ = *fmt;
    9110:	02844001 	addeq	r4, r4, #1
    9114:	0a00007b 	beq	9308 <va_printk+0x248>
			fmt+=2;
		} else {	
			fmt++;
    9118:	e2826001 	add	r6, r2, #1

			char *s, num[128];
			unsigned width = 0;
    911c:	e1a0700b 	mov	r7, fp

			while(isdigit(*fmt)) {
    9120:	ea000004 	b	9138 <va_printk+0x78>
				width = width*10 + *fmt - '0';
    9124:	e0877107 	add	r7, r7, r7, lsl #2
    9128:	e1a07087 	lsl	r7, r7, #1
    912c:	e0877005 	add	r7, r7, r5
    9130:	e2477030 	sub	r7, r7, #48	; 0x30
				fmt++;
    9134:	e2866001 	add	r6, r6, #1
			fmt++;

			char *s, num[128];
			unsigned width = 0;

			while(isdigit(*fmt)) {
    9138:	e5d65000 	ldrb	r5, [r6]
    913c:	e1a00005 	mov	r0, r5
    9140:	ebffff42 	bl	8e50 <isdigit>
    9144:	e3500000 	cmp	r0, #0
    9148:	1afffff5 	bne	9124 <va_printk+0x64>
				width = width*10 + *fmt - '0';
				fmt++;
			}
			assert(width < 32);
    914c:	e357001f 	cmp	r7, #31
    9150:	9a000006 	bls	9170 <va_printk+0xb0>
    9154:	ebffff26 	bl	8df4 <rpi_reset_putc>
    9158:	e59f01d4 	ldr	r0, [pc, #468]	; 9334 <va_printk+0x274>
    915c:	e59f11d4 	ldr	r1, [pc, #468]	; 9338 <va_printk+0x278>
    9160:	e59f21d4 	ldr	r2, [pc, #468]	; 933c <va_printk+0x27c>
    9164:	e3a03092 	mov	r3, #146	; 0x92
    9168:	ebffff06 	bl	8d88 <printk>
    916c:	eb000075 	bl	9348 <clean_reboot>
			
			switch(*fmt) {
    9170:	e2455062 	sub	r5, r5, #98	; 0x62
    9174:	e3550016 	cmp	r5, #22
    9178:	979ff105 	ldrls	pc, [pc, r5, lsl #2]
    917c:	ea00004e 	b	92bc <va_printk+0x1fc>
    9180:	00009268 	andeq	r9, r0, r8, ror #4
    9184:	00009298 	muleq	r0, r8, r2
    9188:	000091f8 	strdeq	r9, [r0], -r8
    918c:	000092bc 			; <UNDEFINED> instruction: 0x000092bc
    9190:	000091dc 	ldrdeq	r9, [r0], -ip
    9194:	000092bc 			; <UNDEFINED> instruction: 0x000092bc
    9198:	000092bc 			; <UNDEFINED> instruction: 0x000092bc
    919c:	000092bc 			; <UNDEFINED> instruction: 0x000092bc
    91a0:	000092bc 			; <UNDEFINED> instruction: 0x000092bc
    91a4:	000092bc 			; <UNDEFINED> instruction: 0x000092bc
    91a8:	000092bc 			; <UNDEFINED> instruction: 0x000092bc
    91ac:	000092bc 			; <UNDEFINED> instruction: 0x000092bc
    91b0:	000092bc 			; <UNDEFINED> instruction: 0x000092bc
    91b4:	000092bc 			; <UNDEFINED> instruction: 0x000092bc
    91b8:	00009244 	andeq	r9, r0, r4, asr #4
    91bc:	000092bc 			; <UNDEFINED> instruction: 0x000092bc
    91c0:	000092bc 			; <UNDEFINED> instruction: 0x000092bc
    91c4:	0000928c 	andeq	r9, r0, ip, lsl #5
    91c8:	000092bc 			; <UNDEFINED> instruction: 0x000092bc
    91cc:	00009220 	andeq	r9, r0, r0, lsr #4
    91d0:	000092bc 			; <UNDEFINED> instruction: 0x000092bc
    91d4:	000092bc 			; <UNDEFINED> instruction: 0x000092bc
    91d8:	00009244 	andeq	r9, r0, r4, asr #4
			case 'f':
			{
#ifndef RPI_FP_ENABLED
				panic("float not enabled!!!");
    91dc:	ebffff04 	bl	8df4 <rpi_reset_putc>
    91e0:	e59f0158 	ldr	r0, [pc, #344]	; 9340 <va_printk+0x280>
    91e4:	e59f114c 	ldr	r1, [pc, #332]	; 9338 <va_printk+0x278>
    91e8:	e59f214c 	ldr	r2, [pc, #332]	; 933c <va_printk+0x27c>
    91ec:	e3a03098 	mov	r3, #152	; 0x98
    91f0:	ebfffee4 	bl	8d88 <printk>
    91f4:	eb000053 	bl	9348 <clean_reboot>

				break;
#endif
			}
			case 'd':
				s = emit(10, num, 128, va_arg(args, int), width, 1);
    91f8:	e5993000 	ldr	r3, [r9]
    91fc:	e2899004 	add	r9, r9, #4
    9200:	e58d7000 	str	r7, [sp]
    9204:	e3a02001 	mov	r2, #1
    9208:	e58d2004 	str	r2, [sp, #4]
    920c:	e3a0000a 	mov	r0, #10
    9210:	e28d1008 	add	r1, sp, #8
    9214:	e3a02080 	mov	r2, #128	; 0x80
    9218:	ebffff2c 	bl	8ed0 <emit>
				break;
    921c:	ea00002f 	b	92e0 <va_printk+0x220>
			case 'u':
				s = emit(10, num, 128, va_arg(args, unsigned), width, 0);
    9220:	e5993000 	ldr	r3, [r9]
    9224:	e2899004 	add	r9, r9, #4
    9228:	e58d7000 	str	r7, [sp]
    922c:	e58db004 	str	fp, [sp, #4]
    9230:	e3a0000a 	mov	r0, #10
    9234:	e28d1008 	add	r1, sp, #8
    9238:	e3a02080 	mov	r2, #128	; 0x80
    923c:	ebffff23 	bl	8ed0 <emit>
				break;
    9240:	ea000026 	b	92e0 <va_printk+0x220>
			case 'p':
			case 'x':
				s = emit(16, num, 128, va_arg(args, unsigned), width, 0);
    9244:	e5993000 	ldr	r3, [r9]
    9248:	e2899004 	add	r9, r9, #4
    924c:	e58d7000 	str	r7, [sp]
    9250:	e58db004 	str	fp, [sp, #4]
    9254:	e3a00010 	mov	r0, #16
    9258:	e28d1008 	add	r1, sp, #8
    925c:	e3a02080 	mov	r2, #128	; 0x80
    9260:	ebffff1a 	bl	8ed0 <emit>
				break;
    9264:	ea00001d 	b	92e0 <va_printk+0x220>
			case 'b':
				s = emit(2, num, 128, va_arg(args, unsigned), width, 0);
    9268:	e5993000 	ldr	r3, [r9]
    926c:	e2899004 	add	r9, r9, #4
    9270:	e58d7000 	str	r7, [sp]
    9274:	e58db004 	str	fp, [sp, #4]
    9278:	e3a00002 	mov	r0, #2
    927c:	e28d1008 	add	r1, sp, #8
    9280:	e3a02080 	mov	r2, #128	; 0x80
    9284:	ebffff11 	bl	8ed0 <emit>
				break;
    9288:	ea000014 	b	92e0 <va_printk+0x220>
			case 's':
				s = va_arg(args, char *);
    928c:	e5990000 	ldr	r0, [r9]
    9290:	e2899004 	add	r9, r9, #4
				break;
    9294:	ea000011 	b	92e0 <va_printk+0x220>
			case 'c':
				s = emit(8, num, 128, va_arg(args, int),width,0);
    9298:	e5993000 	ldr	r3, [r9]
    929c:	e2899004 	add	r9, r9, #4
    92a0:	e58d7000 	str	r7, [sp]
    92a4:	e58db004 	str	fp, [sp, #4]
    92a8:	e3a00008 	mov	r0, #8
    92ac:	e08d1000 	add	r1, sp, r0
    92b0:	e3a02080 	mov	r2, #128	; 0x80
    92b4:	ebffff05 	bl	8ed0 <emit>
				break;
    92b8:	ea000008 	b	92e0 <va_printk+0x220>
			default: 
				panic("printk: not handling specifier '%c'\n", *fmt);
    92bc:	ebfffecc 	bl	8df4 <rpi_reset_putc>
    92c0:	e5d63000 	ldrb	r3, [r6]
    92c4:	e58d3000 	str	r3, [sp]
    92c8:	e59f0074 	ldr	r0, [pc, #116]	; 9344 <va_printk+0x284>
    92cc:	e59f1064 	ldr	r1, [pc, #100]	; 9338 <va_printk+0x278>
    92d0:	e59f2064 	ldr	r2, [pc, #100]	; 933c <va_printk+0x27c>
    92d4:	e3a030b9 	mov	r3, #185	; 0xb9
    92d8:	ebfffeaa 	bl	8d88 <printk>
    92dc:	eb000019 	bl	9348 <clean_reboot>
				return 0;   // ugh
			}
			fmt++;
    92e0:	e2862001 	add	r2, r6, #1

			// safe string copy
			for(; p < e && *s; )
    92e4:	ea000002 	b	92f4 <va_printk+0x234>
				*p++ = *s++;
    92e8:	e2800001 	add	r0, r0, #1
    92ec:	e5c43000 	strb	r3, [r4]
    92f0:	e2844001 	add	r4, r4, #1
				return 0;   // ugh
			}
			fmt++;

			// safe string copy
			for(; p < e && *s; )
    92f4:	e1540008 	cmp	r4, r8
    92f8:	2a000002 	bcs	9308 <va_printk+0x248>
    92fc:	e5d03000 	ldrb	r3, [r0]
    9300:	e3530000 	cmp	r3, #0
    9304:	1afffff7 	bne	92e8 <va_printk+0x228>

int va_printk(char *buf, int n, const char *fmt, va_list args) {
	char *p = buf, *e = buf + n - 1;

	buf[0] = 0;
	for(; *fmt && p < e; ) {
    9308:	e5d23000 	ldrb	r3, [r2]
    930c:	e3530000 	cmp	r3, #0
    9310:	0a000001 	beq	931c <va_printk+0x25c>
    9314:	e1540008 	cmp	r4, r8
    9318:	3affff73 	bcc	90ec <va_printk+0x2c>
			// safe string copy
			for(; p < e && *s; )
				*p++ = *s++;
		}
	}
	*p++ = 0;
    931c:	e2840001 	add	r0, r4, #1
    9320:	e3a03000 	mov	r3, #0
    9324:	e5c43000 	strb	r3, [r4]
	return p - buf;
}
    9328:	e06a0000 	rsb	r0, sl, r0
    932c:	e28dd08c 	add	sp, sp, #140	; 0x8c
    9330:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9334:	0000ad18 	andeq	sl, r0, r8, lsl sp
    9338:	0000acc8 	andeq	sl, r0, r8, asr #25
    933c:	0000aca8 	andeq	sl, r0, r8, lsr #25
    9340:	0000ad34 	andeq	sl, r0, r4, lsr sp
    9344:	0000ad5c 	andeq	sl, r0, ip, asr sp

00009348 <clean_reboot>:
#include "rpi.h"

// print out a special message so bootloader exits
void clean_reboot(void) {
    9348:	e92d4008 	push	{r3, lr}
    putk("DONE!!!\n");
    934c:	e59f3014 	ldr	r3, [pc, #20]	; 9368 <clean_reboot+0x20>
    9350:	e5933000 	ldr	r3, [r3]
    9354:	e59f0010 	ldr	r0, [pc, #16]	; 936c <clean_reboot+0x24>
    9358:	e12fff33 	blx	r3
    delay_ms(100);       // (hopefully) enough time for message to get flushed.
    935c:	e3a00064 	mov	r0, #100	; 0x64
    9360:	eb000063 	bl	94f4 <delay_ms>
    rpi_reboot();
    9364:	eb000038 	bl	944c <rpi_reboot>
    9368:	0000a7d0 	ldrdeq	sl, [r0], -r0
    936c:	0000ad94 	muleq	r0, r4, sp

00009370 <internal_sw_putchar>:
#include "rpi.h"
#include "sw-uart.h"
#include "control-block.h"

static sw_uart_t console_uart;
static int internal_sw_putchar(int c) {
    9370:	e92d4010 	push	{r4, lr}
    9374:	e1a04000 	mov	r4, r0
    sw_uart_putc(&console_uart, c);
    9378:	e59f000c 	ldr	r0, [pc, #12]	; 938c <internal_sw_putchar+0x1c>
    937c:	e6ef1074 	uxtb	r1, r4
    9380:	eb0000df 	bl	9704 <sw_uart_putc>
    return c;
}
    9384:	e1a00004 	mov	r0, r4
    9388:	e8bd8010 	pop	{r4, pc}
    938c:	0000b704 	andeq	fp, r0, r4, lsl #14

00009390 <_cstart>:

void _cstart() {
    9390:	e92d4008 	push	{r3, lr}
    extern int __bss_start__, __bss_end__;
	void notmain();

    int* bss = &__bss_start__;
    9394:	e59f3068 	ldr	r3, [pc, #104]	; 9404 <_cstart+0x74>
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    9398:	e59f2068 	ldr	r2, [pc, #104]	; 9408 <_cstart+0x78>
        *bss++ = 0;
    939c:	e3a01000 	mov	r1, #0
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    93a0:	ea000001 	b	93ac <_cstart+0x1c>
        *bss++ = 0;
    93a4:	e5831000 	str	r1, [r3]
    93a8:	e2833004 	add	r3, r3, #4
	void notmain();

    int* bss = &__bss_start__;
    int* bss_end = &__bss_end__;
 
    while( bss < bss_end )
    93ac:	e1530002 	cmp	r3, r2
    93b0:	3afffffb 	bcc	93a4 <_cstart+0x14>
        *bss++ = 0;

#if 1
    // this links in so much stuff.  need to fix.
    control_blk_t *cb = cb_get_block();
    93b4:	eb0004f9 	bl	a7a0 <cb_get_block>
    if(cb) {
    93b8:	e3500000 	cmp	r0, #0
    93bc:	0a00000e 	beq	93fc <_cstart+0x6c>
        if(cb->console_dev == PUTC_SW_UART) {
    93c0:	e5d02004 	ldrb	r2, [r0, #4]
    93c4:	e3520002 	cmp	r2, #2
    93c8:	1a00000b 	bne	93fc <_cstart+0x6c>
            rpi_putchar = internal_sw_putchar;
    93cc:	e59f1038 	ldr	r1, [pc, #56]	; 940c <_cstart+0x7c>
    93d0:	e59f2038 	ldr	r2, [pc, #56]	; 9410 <_cstart+0x80>
    93d4:	e5821000 	str	r1, [r2]
            console_uart = cb->sw_uart;
    93d8:	e59fc034 	ldr	ip, [pc, #52]	; 9414 <_cstart+0x84>
    93dc:	e2803008 	add	r3, r0, #8
    93e0:	e8930007 	ldm	r3, {r0, r1, r2}
    93e4:	e88c0007 	stm	ip, {r0, r1, r2}
            sw_uart_printk(&console_uart, "about to print on regular printf\n");
    93e8:	e1a0000c 	mov	r0, ip
    93ec:	e59f1024 	ldr	r1, [pc, #36]	; 9418 <_cstart+0x88>
    93f0:	eb000217 	bl	9c54 <sw_uart_printk>
            printk("success!\n");
    93f4:	e59f0020 	ldr	r0, [pc, #32]	; 941c <_cstart+0x8c>
    93f8:	ebfffe62 	bl	8d88 <printk>
        }
    }
#endif
    notmain(); 
    93fc:	ebfffb43 	bl	8110 <notmain>
	rpi_reboot();
    9400:	eb000011 	bl	944c <rpi_reboot>
    9404:	0000b2d8 	ldrdeq	fp, [r0], -r8
    9408:	0000b720 	andeq	fp, r0, r0, lsr #14
    940c:	00009370 	andeq	r9, r0, r0, ror r3
    9410:	0000a7cc 	andeq	sl, r0, ip, asr #15
    9414:	0000b704 	andeq	fp, r0, r4, lsl #14
    9418:	0000ada0 	andeq	sl, r0, r0, lsr #27
    941c:	0000adc4 	andeq	sl, r0, r4, asr #27

00009420 <at_user_level>:
 * works if we have a trashed stack pointer?
 */
static unsigned user_level = 0b10000;
int at_user_level(void) {
    unsigned cpsr = 0;
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    9420:	e10f0000 	mrs	r0, CPSR

    // user level = lower 5 bits = 0b10000);
    return (cpsr  & 0b11111)  == user_level;
    9424:	e200001f 	and	r0, r0, #31
}
    9428:	e3500010 	cmp	r0, #16
    942c:	13a00000 	movne	r0, #0
    9430:	03a00001 	moveq	r0, #1
    9434:	e12fff1e 	bx	lr

00009438 <set_user_level>:

// this is just used by the reboot code.
void set_user_level(void) {
    unsigned cpsr = 0;
    // XXX: shouldn't we just set the one bit?
    asm volatile("mrs %0,cpsr" : "=r"(cpsr));
    9438:	e10f3000 	mrs	r3, CPSR
        cpsr = (cpsr & ~0b11111) | user_level;
    943c:	e3c3301f 	bic	r3, r3, #31
    9440:	e3833010 	orr	r3, r3, #16
    asm volatile("msr cpsr, %0" :: "r"(cpsr));
    9444:	e129f003 	msr	CPSR_fc, r3
    9448:	e12fff1e 	bx	lr

0000944c <rpi_reboot>:
}

void rpi_reboot(void) {
    944c:	e92d4008 	push	{r3, lr}
    if(at_user_level()) {
    9450:	ebfffff2 	bl	9420 <at_user_level>
    9454:	e3500000 	cmp	r0, #0
    9458:	0a000000 	beq	9460 <rpi_reboot+0x14>
        set_user_level();
    945c:	ebfffff5 	bl	9438 <set_user_level>
        // of stuff.
        // assert(!at_user_level());
    }

    // gives uart time to flush: should just call flush directly.
    delay_ms(30);
    9460:	e3a0001e 	mov	r0, #30
    9464:	eb000022 	bl	94f4 <delay_ms>
    const int PM_WDOG = 0x20100024;
    const int PM_PASSWORD = 0x5a000000;
    const int PM_RSTC_WRCFG_FULL_RESET = 0x00000020;

    // timeout = 1/16th of a second? (whatever)
    PUT32(PM_WDOG, PM_PASSWORD | 1);
    9468:	e59f0014 	ldr	r0, [pc, #20]	; 9484 <rpi_reboot+0x38>
    946c:	e59f1014 	ldr	r1, [pc, #20]	; 9488 <rpi_reboot+0x3c>
    9470:	eb00031f 	bl	a0f4 <PUT32>
    PUT32(PM_RSTC, PM_PASSWORD | PM_RSTC_WRCFG_FULL_RESET);
    9474:	e59f0010 	ldr	r0, [pc, #16]	; 948c <rpi_reboot+0x40>
    9478:	e59f1010 	ldr	r1, [pc, #16]	; 9490 <rpi_reboot+0x44>
    947c:	eb00031c 	bl	a0f4 <PUT32>
    9480:	eafffffe 	b	9480 <rpi_reboot+0x34>
    9484:	20100024 	andscs	r0, r0, r4, lsr #32
    9488:	5a000001 	bpl	9494 <delay_cycles>
    948c:	2010001c 	andscs	r0, r0, ip, lsl r0
    9490:	5a000020 	bpl	9518 <delay_sec+0x10>

00009494 <delay_cycles>:
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    9494:	ea000001 	b	94a0 <delay_cycles+0xc>
        asm("add r1, r1, #0");
    9498:	e2811000 	add	r1, r1, #0
#include "rpi.h"

// roughly 2-3x the number of cyles.  dunno if we care.  can read cycle count from
// cp15 iirc.
void delay_cycles(unsigned ticks) {
    while(ticks-- > 0)
    949c:	e1a00003 	mov	r0, r3
    94a0:	e2403001 	sub	r3, r0, #1
    94a4:	e3500000 	cmp	r0, #0
    94a8:	1afffffa 	bne	9498 <delay_cycles+0x4>
        asm("add r1, r1, #0");
}
    94ac:	e12fff1e 	bx	lr

000094b0 <timer_get_usec_raw>:

// no dev barrier.
unsigned timer_get_usec_raw(void) {
    94b0:	e92d4008 	push	{r3, lr}
    return GET32(0x20003004);
    94b4:	e59f0004 	ldr	r0, [pc, #4]	; 94c0 <timer_get_usec_raw+0x10>
    94b8:	eb000319 	bl	a124 <GET32>
}
    94bc:	e8bd8008 	pop	{r3, pc}
    94c0:	20003004 	andcs	r3, r0, r4

000094c4 <timer_get_usec>:

// in usec
unsigned timer_get_usec(void) {
    94c4:	e92d4008 	push	{r3, lr}
// comment these out for this lab (8) so student
// code does not get hit by weird timing issues.
//    dev_barrier();
    unsigned u = timer_get_usec_raw();
    94c8:	ebfffff8 	bl	94b0 <timer_get_usec_raw>
//    dev_barrier();
    return u;
}
    94cc:	e8bd8008 	pop	{r3, pc}

000094d0 <delay_us>:

void delay_us(unsigned us) {
    94d0:	e92d4038 	push	{r3, r4, r5, lr}
    94d4:	e1a05000 	mov	r5, r0
    unsigned rb = timer_get_usec();
    94d8:	ebfffff9 	bl	94c4 <timer_get_usec>
    94dc:	e1a04000 	mov	r4, r0
    while (1) {
        unsigned ra = timer_get_usec();
    94e0:	ebfffff7 	bl	94c4 <timer_get_usec>
        if ((ra - rb) >= us) {
    94e4:	e0640000 	rsb	r0, r4, r0
    94e8:	e1500005 	cmp	r0, r5
    94ec:	3afffffb 	bcc	94e0 <delay_us+0x10>
            break;
        }
    }
}
    94f0:	e8bd8038 	pop	{r3, r4, r5, pc}

000094f4 <delay_ms>:
void delay_ms(unsigned ms) {
    94f4:	e92d4008 	push	{r3, lr}
    delay_us(ms*1000);
    94f8:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    94fc:	e0000093 	mul	r0, r3, r0
    9500:	ebfffff2 	bl	94d0 <delay_us>
    9504:	e8bd8008 	pop	{r3, pc}

00009508 <delay_sec>:
}
void delay_sec(unsigned sec) {
    9508:	e92d4008 	push	{r3, lr}
    delay_ms(sec*1000);
    950c:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    9510:	e0000093 	mul	r0, r3, r0
    9514:	ebfffff6 	bl	94f4 <delay_ms>
    9518:	e8bd8008 	pop	{r3, pc}

0000951c <kmalloc>:
 *  - The returned pointer should always be 4-byte aligned.  
 *    Easiest way is to make sure the heap pointer starts 4-byte
 *    and you always round up the number of bytes.  Make sure
 *    you put an assertion in.  
 */
void *kmalloc(unsigned nbytes) {
    951c:	e92d4070 	push	{r4, r5, r6, lr}
    demand(init_p, calling before initialized);
    9520:	e59f3058 	ldr	r3, [pc, #88]	; 9580 <kmalloc+0x64>
    9524:	e5933000 	ldr	r3, [r3]
    9528:	e3530000 	cmp	r3, #0
    952c:	1a000006 	bne	954c <kmalloc+0x30>
    9530:	ebfffe2f 	bl	8df4 <rpi_reset_putc>
    9534:	e59f0048 	ldr	r0, [pc, #72]	; 9584 <kmalloc+0x68>
    9538:	e59f1048 	ldr	r1, [pc, #72]	; 9588 <kmalloc+0x6c>
    953c:	e59f2048 	ldr	r2, [pc, #72]	; 958c <kmalloc+0x70>
    9540:	e3a0301a 	mov	r3, #26
    9544:	ebfffe0f 	bl	8d88 <printk>
    9548:	ebffff7e 	bl	9348 <clean_reboot>
    
    void* to_allocate = heap_ptr;
    954c:	e59f402c 	ldr	r4, [pc, #44]	; 9580 <kmalloc+0x64>
    9550:	e5945004 	ldr	r5, [r4, #4]
    unsigned rounded_nbytes = roundup(nbytes, 8);
    9554:	e2806007 	add	r6, r0, #7
    9558:	e3c66007 	bic	r6, r6, #7
    memset(heap_ptr, 0, rounded_nbytes);
    955c:	e1a00005 	mov	r0, r5
    9560:	e3a01000 	mov	r1, #0
    9564:	e1a02006 	mov	r2, r6
    9568:	ebfffdfe 	bl	8d68 <memset>
    heap_ptr += rounded_nbytes;
    956c:	e5943004 	ldr	r3, [r4, #4]
    9570:	e0836006 	add	r6, r3, r6
    9574:	e5846004 	str	r6, [r4, #4]
    //memset(heap_ptr, 0, rounded_nbytes);
    return to_allocate;

}
    9578:	e1a00005 	mov	r0, r5
    957c:	e8bd8070 	pop	{r4, r5, r6, pc}
    9580:	0000b710 	andeq	fp, r0, r0, lsl r7
    9584:	0000ae10 	andeq	sl, r0, r0, lsl lr
    9588:	0000ae50 	andeq	sl, r0, r0, asr lr
    958c:	0000add0 	ldrdeq	sl, [r0], -r0

00009590 <kmalloc_aligned>:

// address of returned pointer should be a multiple of
// alignment.
void *kmalloc_aligned(unsigned nbytes, unsigned alignment) {
    9590:	e92d4008 	push	{r3, lr}
    demand(init_p, calling before initialized);
    9594:	e59f307c 	ldr	r3, [pc, #124]	; 9618 <kmalloc_aligned+0x88>
    9598:	e5933000 	ldr	r3, [r3]
    959c:	e3530000 	cmp	r3, #0
    95a0:	1a000006 	bne	95c0 <kmalloc_aligned+0x30>
    95a4:	ebfffe12 	bl	8df4 <rpi_reset_putc>
    95a8:	e59f006c 	ldr	r0, [pc, #108]	; 961c <kmalloc_aligned+0x8c>
    95ac:	e59f106c 	ldr	r1, [pc, #108]	; 9620 <kmalloc_aligned+0x90>
    95b0:	e59f206c 	ldr	r2, [pc, #108]	; 9624 <kmalloc_aligned+0x94>
    95b4:	e3a03028 	mov	r3, #40	; 0x28
    95b8:	ebfffdf2 	bl	8d88 <printk>
    95bc:	ebffff61 	bl	9348 <clean_reboot>

    if(alignment <= 8)
    95c0:	e3510008 	cmp	r1, #8
    95c4:	8a000001 	bhi	95d0 <kmalloc_aligned+0x40>
        return kmalloc(nbytes);
    95c8:	ebffffd3 	bl	951c <kmalloc>
    95cc:	e8bd8008 	pop	{r3, pc}
    demand(alignment % 8 == 0, "weird alignment: not a multiple of 4!");
    95d0:	e3110007 	tst	r1, #7
    95d4:	0a000006 	beq	95f4 <kmalloc_aligned+0x64>
    95d8:	ebfffe05 	bl	8df4 <rpi_reset_putc>
    95dc:	e59f0044 	ldr	r0, [pc, #68]	; 9628 <kmalloc_aligned+0x98>
    95e0:	e59f1038 	ldr	r1, [pc, #56]	; 9620 <kmalloc_aligned+0x90>
    95e4:	e59f2038 	ldr	r2, [pc, #56]	; 9624 <kmalloc_aligned+0x94>
    95e8:	e3a0302c 	mov	r3, #44	; 0x2c
    95ec:	ebfffde5 	bl	8d88 <printk>
    95f0:	ebffff54 	bl	9348 <clean_reboot>
    unsigned aligned_heap_ptr = (unsigned) heap_ptr;
    95f4:	e59f301c 	ldr	r3, [pc, #28]	; 9618 <kmalloc_aligned+0x88>
    95f8:	e5932004 	ldr	r2, [r3, #4]
	aligned_heap_ptr = roundup(aligned_heap_ptr, alignment);
    95fc:	e0812002 	add	r2, r1, r2
    9600:	e2422001 	sub	r2, r2, #1
    9604:	e2611000 	rsb	r1, r1, #0
    9608:	e0021001 	and	r1, r2, r1
	heap_ptr = (void*) aligned_heap_ptr;
    960c:	e5831004 	str	r1, [r3, #4]

	return kmalloc(nbytes);
    9610:	ebffffc1 	bl	951c <kmalloc>
}
    9614:	e8bd8008 	pop	{r3, pc}
    9618:	0000b710 	andeq	fp, r0, r0, lsl r7
    961c:	0000ae10 	andeq	sl, r0, r0, lsl lr
    9620:	0000ae50 	andeq	sl, r0, r0, asr lr
    9624:	0000add8 	ldrdeq	sl, [r0], -r8
    9628:	0000ae64 	andeq	sl, r0, r4, ror #28

0000962c <kmalloc_init>:
 *    - should be just a few lines of code.
 *    - sets heap pointer to the location of 
 *      __heap_start__.   print this to make sure
 *      it makes sense!
 */
void kmalloc_init(void) {
    962c:	e92d4008 	push	{r3, lr}
    demand(!init_p, cannot initialize twice!\n);
    9630:	e59f303c 	ldr	r3, [pc, #60]	; 9674 <kmalloc_init+0x48>
    9634:	e5933000 	ldr	r3, [r3]
    9638:	e3530000 	cmp	r3, #0
    963c:	0a000006 	beq	965c <kmalloc_init+0x30>
    9640:	ebfffdeb 	bl	8df4 <rpi_reset_putc>
    9644:	e59f002c 	ldr	r0, [pc, #44]	; 9678 <kmalloc_init+0x4c>
    9648:	e59f102c 	ldr	r1, [pc, #44]	; 967c <kmalloc_init+0x50>
    964c:	e59f202c 	ldr	r2, [pc, #44]	; 9680 <kmalloc_init+0x54>
    9650:	e3a0303d 	mov	r3, #61	; 0x3d
    9654:	ebfffdcb 	bl	8d88 <printk>
    9658:	ebffff3a 	bl	9348 <clean_reboot>
    init_p = 1;
    965c:	e59f3010 	ldr	r3, [pc, #16]	; 9674 <kmalloc_init+0x48>
    9660:	e3a02001 	mov	r2, #1
    9664:	e5832000 	str	r2, [r3]
    heap_ptr = &__heap_start__;
    9668:	e59f2014 	ldr	r2, [pc, #20]	; 9684 <kmalloc_init+0x58>
    966c:	e5832004 	str	r2, [r3, #4]
    9670:	e8bd8008 	pop	{r3, pc}
    9674:	0000b710 	andeq	fp, r0, r0, lsl r7
    9678:	0000aebc 			; <UNDEFINED> instruction: 0x0000aebc
    967c:	0000ae50 	andeq	sl, r0, r0, asr lr
    9680:	0000ade8 	andeq	sl, r0, r8, ror #27
    9684:	0000b720 	andeq	fp, r0, r0, lsr #14

00009688 <kfree_all>:
/* 
 * free all allocated memory: reset the heap 
 * pointer back to the beginning.
 */
void kfree_all(void) {
    heap_ptr = &__heap_start__;
    9688:	e59f2008 	ldr	r2, [pc, #8]	; 9698 <kfree_all+0x10>
    968c:	e59f3008 	ldr	r3, [pc, #8]	; 969c <kfree_all+0x14>
    9690:	e5832004 	str	r2, [r3, #4]
    9694:	e12fff1e 	bx	lr
    9698:	0000b720 	andeq	fp, r0, r0, lsr #14
    969c:	0000b710 	andeq	fp, r0, r0, lsl r7

000096a0 <kmalloc_heap_ptr>:
// allocated block satisfies: 
//    assert(<addr> < kmalloc_heap_ptr());
// 
void *kmalloc_heap_ptr(void) {
    return (void*) heap_ptr;
}
    96a0:	e59f3004 	ldr	r3, [pc, #4]	; 96ac <kmalloc_heap_ptr+0xc>
    96a4:	e5930004 	ldr	r0, [r3, #4]
    96a8:	e12fff1e 	bx	lr
    96ac:	0000b710 	andeq	fp, r0, r0, lsl r7

000096b0 <kmalloc_init_set_start>:

void kmalloc_init_set_start(unsigned start_address) {
    96b0:	e92d4008 	push	{r3, lr}
    demand(!init_p, cannot initialize twice!\n);
    96b4:	e59f3038 	ldr	r3, [pc, #56]	; 96f4 <kmalloc_init_set_start+0x44>
    96b8:	e5933000 	ldr	r3, [r3]
    96bc:	e3530000 	cmp	r3, #0
    96c0:	0a000006 	beq	96e0 <kmalloc_init_set_start+0x30>
    96c4:	ebfffdca 	bl	8df4 <rpi_reset_putc>
    96c8:	e59f0028 	ldr	r0, [pc, #40]	; 96f8 <kmalloc_init_set_start+0x48>
    96cc:	e59f1028 	ldr	r1, [pc, #40]	; 96fc <kmalloc_init_set_start+0x4c>
    96d0:	e59f2028 	ldr	r2, [pc, #40]	; 9700 <kmalloc_init_set_start+0x50>
    96d4:	e3a03054 	mov	r3, #84	; 0x54
    96d8:	ebfffdaa 	bl	8d88 <printk>
    96dc:	ebffff19 	bl	9348 <clean_reboot>
    init_p = 1;
    96e0:	e59f300c 	ldr	r3, [pc, #12]	; 96f4 <kmalloc_init_set_start+0x44>
    96e4:	e3a02001 	mov	r2, #1
    96e8:	e5832000 	str	r2, [r3]
    heap_ptr = (void*) start_address;
    96ec:	e5830004 	str	r0, [r3, #4]
    96f0:	e8bd8008 	pop	{r3, pc}
    96f4:	0000b710 	andeq	fp, r0, r0, lsl r7
    96f8:	0000aebc 			; <UNDEFINED> instruction: 0x0000aebc
    96fc:	0000ae50 	andeq	sl, r0, r0, asr lr
    9700:	0000adf8 	strdeq	sl, [r0], -r8

00009704 <sw_uart_putc>:
 */ 
#include "rpi.h"
#include "sw-uart.h"
#include "cycle-util.h"

void sw_uart_putc(sw_uart_t *uart, unsigned char c) {
    9704:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9708:	e1a07001 	mov	r7, r1
    // use local variables to minimize any loads or stores
    int tx = uart->tx;
    970c:	e5d06000 	ldrb	r6, [r0]
    uint32_t n = uart->cycle_per_bit,
    9710:	e5905008 	ldr	r5, [r0, #8]
             u = n,
             s = cycle_cnt_read();
    9714:	ee1f4f3c 	mrc	15, 0, r4, cr15, cr12, {1}
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    9718:	e1a00006 	mov	r0, r6
    971c:	e3a01000 	mov	r1, #0
    9720:	eb000351 	bl	a46c <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    9724:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    9728:	e0643003 	rsb	r3, r4, r3
    972c:	e1550003 	cmp	r5, r3
    9730:	8afffffb 	bhi	9724 <sw_uart_putc+0x20>
	
	// lower line (line idling)
	write_cyc_until(tx, 0, s, u);
	u += n; 
    9734:	e1a08085 	lsl	r8, r5, #1
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    9738:	e1a00006 	mov	r0, r6
    973c:	e2071001 	and	r1, r7, #1
    9740:	eb000349 	bl	a46c <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    9744:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    9748:	e0643003 	rsb	r3, r4, r3
    974c:	e1580003 	cmp	r8, r3
    9750:	8afffffb 	bhi	9744 <sw_uart_putc+0x40>
	write_cyc_until(tx, c & 1, s, u);
	u += n; 
    9754:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    9758:	e1a00006 	mov	r0, r6
    975c:	e2071002 	and	r1, r7, #2
    9760:	eb000341 	bl	a46c <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    9764:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    9768:	e0643003 	rsb	r3, r4, r3
    976c:	e1580003 	cmp	r8, r3
    9770:	8afffffb 	bhi	9764 <sw_uart_putc+0x60>
	write_cyc_until(tx, c & 2, s, u);
	u += n; 
    9774:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    9778:	e1a00006 	mov	r0, r6
    977c:	e2071004 	and	r1, r7, #4
    9780:	eb000339 	bl	a46c <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    9784:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    9788:	e0643003 	rsb	r3, r4, r3
    978c:	e1580003 	cmp	r8, r3
    9790:	8afffffb 	bhi	9784 <sw_uart_putc+0x80>
	write_cyc_until(tx, c & 4, s, u);
	u += n; 
    9794:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    9798:	e1a00006 	mov	r0, r6
    979c:	e2071008 	and	r1, r7, #8
    97a0:	eb000331 	bl	a46c <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    97a4:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    97a8:	e0643003 	rsb	r3, r4, r3
    97ac:	e1580003 	cmp	r8, r3
    97b0:	8afffffb 	bhi	97a4 <sw_uart_putc+0xa0>
	write_cyc_until(tx, c & 8, s, u);
	u += n; 
    97b4:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    97b8:	e1a00006 	mov	r0, r6
    97bc:	e2071010 	and	r1, r7, #16
    97c0:	eb000329 	bl	a46c <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    97c4:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    97c8:	e0643003 	rsb	r3, r4, r3
    97cc:	e1580003 	cmp	r8, r3
    97d0:	8afffffb 	bhi	97c4 <sw_uart_putc+0xc0>
	write_cyc_until(tx, c & 16, s, u);
	u += n; 
    97d4:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    97d8:	e1a00006 	mov	r0, r6
    97dc:	e2071020 	and	r1, r7, #32
    97e0:	eb000321 	bl	a46c <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    97e4:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    97e8:	e0643003 	rsb	r3, r4, r3
    97ec:	e1580003 	cmp	r8, r3
    97f0:	8afffffb 	bhi	97e4 <sw_uart_putc+0xe0>
	write_cyc_until(tx, c & 32, s, u);
	u += n; 
    97f4:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    97f8:	e1a00006 	mov	r0, r6
    97fc:	e2071040 	and	r1, r7, #64	; 0x40
    9800:	eb000319 	bl	a46c <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    9804:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    9808:	e0643003 	rsb	r3, r4, r3
    980c:	e1580003 	cmp	r8, r3
    9810:	8afffffb 	bhi	9804 <sw_uart_putc+0x100>
	write_cyc_until(tx, c & 64, s, u);
	u += n;
    9814:	e0888005 	add	r8, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    9818:	e1a00006 	mov	r0, r6
    981c:	e2071080 	and	r1, r7, #128	; 0x80
    9820:	eb000311 	bl	a46c <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    9824:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    9828:	e0643003 	rsb	r3, r4, r3
    982c:	e1580003 	cmp	r8, r3
    9830:	8afffffb 	bhi	9824 <sw_uart_putc+0x120>
	write_cyc_until(tx, c & 128, s, u);
	u += n; 
    9834:	e0885005 	add	r5, r8, r5
// after you do: if you look at the generated assembly, there's some
// room for tricks.  also, remove the pin check.
static inline void
write_cyc_until(unsigned pin, unsigned v, unsigned start, unsigned ncycles) {
    // GPIO_WRITE_RAW(pin,v);
    gpio_write(pin,v);
    9838:	e1a00006 	mov	r0, r6
    983c:	e3a01001 	mov	r1, #1
    9840:	eb000309 	bl	a46c <gpio_write>
// delay <n> cycles assuming we started counting cycles at time
// <start>.
static inline void delay_ncycles(unsigned start, unsigned n) {
    // this handles wrap-around, but doing so adds two instructions,
    // which makes the delay not as tight.
    while((cycle_cnt_read() - start) < n)
    9844:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    9848:	e0643003 	rsb	r3, r4, r3
    984c:	e1550003 	cmp	r5, r3
    9850:	8afffffb 	bhi	9844 <sw_uart_putc+0x140>
	write_cyc_until(tx, 1, s, u);
}
    9854:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00009858 <sw_uart_getc_timeout>:
}

// do this second: you can type in pi-cat to send stuff.
//      EASY BUG: if you are reading input, but you do not get here in 
//      time it will disappear.
int sw_uart_getc_timeout(sw_uart_t *uart, int timeout_usec) {
    9858:	e92d43f8 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
    985c:	e1a09000 	mov	r9, r0
   int rx = uart->rx;
    9860:	e5d07001 	ldrb	r7, [r0, #1]
    9864:	e1a05007 	mov	r5, r7

    // get start bit: timeout_usec=0 implies you return right away.
    while(!wait_until_usec(rx, 0, timeout_usec))
    9868:	e1a06001 	mov	r6, r1
	write_cyc_until(tx, 1, s, u);
}

// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    986c:	ebffff0f 	bl	94b0 <timer_get_usec_raw>
    9870:	e1a04000 	mov	r4, r0
    while(1) {
        if(gpio_read(rx) == v)
    9874:	e1a00005 	mov	r0, r5
    9878:	eb0002e8 	bl	a420 <gpio_read>
    987c:	e3500000 	cmp	r0, #0
    9880:	0a000005 	beq	989c <sw_uart_getc_timeout+0x44>
            return 1;
        if(timer_get_usec_raw() - start > timeout_usec)
    9884:	ebffff09 	bl	94b0 <timer_get_usec_raw>
    9888:	e0640000 	rsb	r0, r4, r0
    988c:	e1560000 	cmp	r6, r0
    9890:	2afffff7 	bcs	9874 <sw_uart_getc_timeout+0x1c>
            return 0;
    9894:	e3a03000 	mov	r3, #0
    9898:	ea000000 	b	98a0 <sw_uart_getc_timeout+0x48>
// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    while(1) {
        if(gpio_read(rx) == v)
            return 1;
    989c:	e3a03001 	mov	r3, #1
//      time it will disappear.
int sw_uart_getc_timeout(sw_uart_t *uart, int timeout_usec) {
   int rx = uart->rx;

    // get start bit: timeout_usec=0 implies you return right away.
    while(!wait_until_usec(rx, 0, timeout_usec))
    98a0:	e3530000 	cmp	r3, #0
    98a4:	0a000059 	beq	9a10 <sw_uart_getc_timeout+0x1b8>
        return -1;

    // do this first so we have a tighter bound (maybe)
    unsigned s = cycle_cnt_read();  // subtract off slop?
    98a8:	ee1f8f3c 	mrc	15, 0, r8, cr15, cr12, {1}

    // store these in locals to minimize load stores later.
    uint32_t u = uart->cycle_per_bit;
    98ac:	e5994008 	ldr	r4, [r9, #8]
    unsigned n = u/2;
    unsigned c = 0;

    // wait one period + 1/2 to get in the middle of the next read.
    delay_ncycles(s, n + 1*u);
    98b0:	e08420a4 	add	r2, r4, r4, lsr #1
    98b4:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    98b8:	e0683003 	rsb	r3, r8, r3
    98bc:	e1520003 	cmp	r2, r3
    98c0:	8afffffb 	bhi	98b4 <sw_uart_getc_timeout+0x5c>
	
	s += u;
    98c4:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx);
    98c8:	e1a00007 	mov	r0, r7
    98cc:	eb0002d3 	bl	a420 <gpio_read>
    98d0:	e1a09750 	asr	r9, r0, r7
    98d4:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    98d8:	e0683003 	rsb	r3, r8, r3
    98dc:	e1540003 	cmp	r4, r3
    98e0:	8afffffb 	bhi	98d4 <sw_uart_getc_timeout+0x7c>
    delay_ncycles(s, u);
	s += u; 
    98e4:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 1;
    98e8:	e1a00007 	mov	r0, r7
    98ec:	eb0002cb 	bl	a420 <gpio_read>
    98f0:	e1a00750 	asr	r0, r0, r7
    98f4:	e1899080 	orr	r9, r9, r0, lsl #1
    98f8:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    98fc:	e0683003 	rsb	r3, r8, r3
    9900:	e1540003 	cmp	r4, r3
    9904:	8afffffb 	bhi	98f8 <sw_uart_getc_timeout+0xa0>
    delay_ncycles(s, u);
	s += u;
    9908:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 2;
    990c:	e1a00007 	mov	r0, r7
    9910:	eb0002c2 	bl	a420 <gpio_read>
    9914:	e1a00750 	asr	r0, r0, r7
    9918:	e1899100 	orr	r9, r9, r0, lsl #2
    991c:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    9920:	e0683003 	rsb	r3, r8, r3
    9924:	e1540003 	cmp	r4, r3
    9928:	8afffffb 	bhi	991c <sw_uart_getc_timeout+0xc4>
    delay_ncycles(s, u);
	s += u;
    992c:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 3;
    9930:	e1a00007 	mov	r0, r7
    9934:	eb0002b9 	bl	a420 <gpio_read>
    9938:	e1a00750 	asr	r0, r0, r7
    993c:	e1899180 	orr	r9, r9, r0, lsl #3
    9940:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    9944:	e0683003 	rsb	r3, r8, r3
    9948:	e1540003 	cmp	r4, r3
    994c:	8afffffb 	bhi	9940 <sw_uart_getc_timeout+0xe8>
    delay_ncycles(s, u);
	s += u;
    9950:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 4;
    9954:	e1a00007 	mov	r0, r7
    9958:	eb0002b0 	bl	a420 <gpio_read>
    995c:	e1a00750 	asr	r0, r0, r7
    9960:	e1899200 	orr	r9, r9, r0, lsl #4
    9964:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    9968:	e0683003 	rsb	r3, r8, r3
    996c:	e1540003 	cmp	r4, r3
    9970:	8afffffb 	bhi	9964 <sw_uart_getc_timeout+0x10c>
    delay_ncycles(s, u);
	s += u;
    9974:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 5;
    9978:	e1a00007 	mov	r0, r7
    997c:	eb0002a7 	bl	a420 <gpio_read>
    9980:	e1a00750 	asr	r0, r0, r7
    9984:	e1899280 	orr	r9, r9, r0, lsl #5
    9988:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    998c:	e0683003 	rsb	r3, r8, r3
    9990:	e1540003 	cmp	r4, r3
    9994:	8afffffb 	bhi	9988 <sw_uart_getc_timeout+0x130>
    delay_ncycles(s, u);
	s += u;
    9998:	e0888004 	add	r8, r8, r4
    c |= (gpio_read(rx) >> rx) << 6;
    999c:	e1a00007 	mov	r0, r7
    99a0:	eb00029e 	bl	a420 <gpio_read>
    99a4:	e1a00750 	asr	r0, r0, r7
    99a8:	e1899300 	orr	r9, r9, r0, lsl #6
    99ac:	ee1f3f3c 	mrc	15, 0, r3, cr15, cr12, {1}
    99b0:	e0683003 	rsb	r3, r8, r3
    99b4:	e1540003 	cmp	r4, r3
    99b8:	8afffffb 	bhi	99ac <sw_uart_getc_timeout+0x154>
    delay_ncycles(s, u);
	s += u;
    c |= (gpio_read(rx) >> rx) << 7;
    99bc:	e1a00007 	mov	r0, r7
    99c0:	eb000296 	bl	a420 <gpio_read>
    99c4:	e1a00750 	asr	r0, r0, r7
    99c8:	e1899380 	orr	r9, r9, r0, lsl #7
	write_cyc_until(tx, 1, s, u);
}

// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    99cc:	ebfffeb7 	bl	94b0 <timer_get_usec_raw>
    99d0:	e1a04000 	mov	r4, r0
    while(1) {
        if(gpio_read(rx) == v)
    99d4:	e1a00005 	mov	r0, r5
    99d8:	eb000290 	bl	a420 <gpio_read>
    99dc:	e3500000 	cmp	r0, #0
    99e0:	0a000005 	beq	99fc <sw_uart_getc_timeout+0x1a4>
            return 1;
        if(timer_get_usec_raw() - start > timeout_usec)
    99e4:	ebfffeb1 	bl	94b0 <timer_get_usec_raw>
    99e8:	e0640000 	rsb	r0, r4, r0
    99ec:	e1560000 	cmp	r6, r0
    99f0:	2afffff7 	bcs	99d4 <sw_uart_getc_timeout+0x17c>
            return 0;
    99f4:	e3a03000 	mov	r3, #0
    99f8:	ea000000 	b	9a00 <sw_uart_getc_timeout+0x1a8>
// usec: does not have to be that accurate since the time is just for timeout.
static inline int wait_until_usec(int rx, int v, unsigned timeout_usec) {
    unsigned start = timer_get_usec_raw();
    while(1) {
        if(gpio_read(rx) == v)
            return 1;
    99fc:	e3a03001 	mov	r3, #1
    c |= (gpio_read(rx) >> rx) << 7;
    //delay_ncycles(s, u);
	//s += u;
    
	// make sure you wait for a stop bit: otherwise the next read may fail.
    while(!wait_until_usec(rx, 0, timeout_usec))
    9a00:	e3530000 	cmp	r3, #0
    9a04:	0a000003 	beq	9a18 <sw_uart_getc_timeout+0x1c0>
        return -1;
	// delay_ncycles(s, n);

    return (int)c;
    9a08:	e1a00009 	mov	r0, r9
    9a0c:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
int sw_uart_getc_timeout(sw_uart_t *uart, int timeout_usec) {
   int rx = uart->rx;

    // get start bit: timeout_usec=0 implies you return right away.
    while(!wait_until_usec(rx, 0, timeout_usec))
        return -1;
    9a10:	e3e00000 	mvn	r0, #0
    9a14:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
    //delay_ncycles(s, u);
	//s += u;
    
	// make sure you wait for a stop bit: otherwise the next read may fail.
    while(!wait_until_usec(rx, 0, timeout_usec))
        return -1;
    9a18:	e3e00000 	mvn	r0, #0
	// delay_ncycles(s, n);

    return (int)c;
}
    9a1c:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}

00009a20 <sw_uart_gets_until>:


// read characters using <sw_uart_getc()> until:
//       <sw_uart_getc() == <end>>
// returns -nbytes read if timeout (could be 0).
int sw_uart_gets_until(sw_uart_t *u, uint8_t *buf, uint32_t nbytes, uint8_t end, uint32_t usec_timeout) {
    9a20:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9a24:	e1a08000 	mov	r8, r0
    9a28:	e1a06001 	mov	r6, r1
    9a2c:	e1a09003 	mov	r9, r3
    9a30:	e59da020 	ldr	sl, [sp, #32]
    assert(nbytes>0);
    9a34:	e3520000 	cmp	r2, #0
    9a38:	1a000006 	bne	9a58 <sw_uart_gets_until+0x38>
    9a3c:	ebfffcec 	bl	8df4 <rpi_reset_putc>
    9a40:	e59f005c 	ldr	r0, [pc, #92]	; 9aa4 <sw_uart_gets_until+0x84>
    9a44:	e59f105c 	ldr	r1, [pc, #92]	; 9aa8 <sw_uart_gets_until+0x88>
    9a48:	e59f205c 	ldr	r2, [pc, #92]	; 9aac <sw_uart_gets_until+0x8c>
    9a4c:	e3a0306d 	mov	r3, #109	; 0x6d
    9a50:	ebfffccc 	bl	8d88 <printk>
    9a54:	ebfffe3b 	bl	9348 <clean_reboot>
    buf[0] = 0;
    9a58:	e3a04000 	mov	r4, #0
    9a5c:	e5c14000 	strb	r4, [r1]

    int i;
	uint8_t char_in;
    for(i = 0; i < nbytes-1; i++) {
    9a60:	e2427001 	sub	r7, r2, #1
    9a64:	ea000007 	b	9a88 <sw_uart_gets_until+0x68>
        if((char_in = (uint8_t)sw_uart_getc_timeout(u, usec_timeout)) != end) {
    9a68:	e1a00008 	mov	r0, r8
    9a6c:	e1a0100a 	mov	r1, sl
    9a70:	ebffff78 	bl	9858 <sw_uart_getc_timeout>
    9a74:	e6ef0070 	uxtb	r0, r0
    9a78:	e1500009 	cmp	r0, r9
    9a7c:	0a000004 	beq	9a94 <sw_uart_gets_until+0x74>
			buf[i] = char_in;
    9a80:	e7c60005 	strb	r0, [r6, r5]
    assert(nbytes>0);
    buf[0] = 0;

    int i;
	uint8_t char_in;
    for(i = 0; i < nbytes-1; i++) {
    9a84:	e2844001 	add	r4, r4, #1
    9a88:	e1a05004 	mov	r5, r4
    9a8c:	e1540007 	cmp	r4, r7
    9a90:	3afffff4 	bcc	9a68 <sw_uart_gets_until+0x48>
			buf[i] = char_in;
		} else {
			break;
		}
    }
    buf[i] = 0;
    9a94:	e3a03000 	mov	r3, #0
    9a98:	e7c63005 	strb	r3, [r6, r5]
    return i;
}
    9a9c:	e1a00004 	mov	r0, r4
    9aa0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9aa4:	0000af74 	andeq	sl, r0, r4, ror pc
    9aa8:	0000af90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
    9aac:	0000aefc 	strdeq	sl, [r0], -ip

00009ab0 <sw_uart_gets_timeout>:

// read characters using <sw_uart_getc()> until:
//      we do not receive any characters for <timeout> usec.
// make sure to 0 terminate!
int sw_uart_gets_timeout(sw_uart_t *u, uint8_t *buf, 
                    uint32_t nbytes, uint32_t usec_timeout) {
    9ab0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9ab4:	e1a07000 	mov	r7, r0
    9ab8:	e1a05001 	mov	r5, r1
    9abc:	e1a08003 	mov	r8, r3

    assert(nbytes>0);
    9ac0:	e3520000 	cmp	r2, #0
    9ac4:	1a000006 	bne	9ae4 <sw_uart_gets_timeout+0x34>
    9ac8:	ebfffcc9 	bl	8df4 <rpi_reset_putc>
    9acc:	e59f004c 	ldr	r0, [pc, #76]	; 9b20 <sw_uart_gets_timeout+0x70>
    9ad0:	e59f104c 	ldr	r1, [pc, #76]	; 9b24 <sw_uart_gets_timeout+0x74>
    9ad4:	e59f204c 	ldr	r2, [pc, #76]	; 9b28 <sw_uart_gets_timeout+0x78>
    9ad8:	e3a03083 	mov	r3, #131	; 0x83
    9adc:	ebfffca9 	bl	8d88 <printk>
    9ae0:	ebfffe18 	bl	9348 <clean_reboot>
    buf[0] = 0;
    9ae4:	e3a04000 	mov	r4, #0
    9ae8:	e5c14000 	strb	r4, [r1]

    int i;
    for(i = 0; i < nbytes-1; i++) {
    9aec:	e2426001 	sub	r6, r2, #1
    9af0:	ea000004 	b	9b08 <sw_uart_gets_timeout+0x58>
        buf[i] = (uint8_t) sw_uart_getc_timeout(u, usec_timeout);
    9af4:	e1a00007 	mov	r0, r7
    9af8:	e1a01008 	mov	r1, r8
    9afc:	ebffff55 	bl	9858 <sw_uart_getc_timeout>
    9b00:	e7c50004 	strb	r0, [r5, r4]

    assert(nbytes>0);
    buf[0] = 0;

    int i;
    for(i = 0; i < nbytes-1; i++) {
    9b04:	e2844001 	add	r4, r4, #1
    9b08:	e1540006 	cmp	r4, r6
    9b0c:	3afffff8 	bcc	9af4 <sw_uart_gets_timeout+0x44>
        buf[i] = (uint8_t) sw_uart_getc_timeout(u, usec_timeout);
    }
    buf[i] = 0;
    9b10:	e3a03000 	mov	r3, #0
    9b14:	e7c53004 	strb	r3, [r5, r4]
    return i;
}
    9b18:	e1a00004 	mov	r0, r4
    9b1c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9b20:	0000af74 	andeq	sl, r0, r4, ror pc
    9b24:	0000af90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
    9b28:	0000af10 	andeq	sl, r0, r0, lsl pc

00009b2c <sw_uart_init_helper>:
/**************************************************************************
 * this code is implemented for you
 */

sw_uart_t 
sw_uart_init_helper(uint8_t tx, uint8_t rx, uint32_t baud, uint32_t cyc_per_bit) {
    9b2c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9b30:	e1a04000 	mov	r4, r0
    9b34:	e1a06001 	mov	r6, r1
    9b38:	e1a08002 	mov	r8, r2
    9b3c:	e1a05003 	mov	r5, r3
    9b40:	e59d7018 	ldr	r7, [sp, #24]
    // maybe enable the cache?  don't think will work otherwise.
    gpio_set_output(tx);
    9b44:	e1a00001 	mov	r0, r1
    9b48:	eb0001b0 	bl	a210 <gpio_set_output>
    gpio_set_input(rx);
    9b4c:	e1a00008 	mov	r0, r8
    9b50:	eb0001ff 	bl	a354 <gpio_set_input>
    cycle_cnt_init();       
    9b54:	e3a03001 	mov	r3, #1
    9b58:	ee0f3f1c 	mcr	15, 0, r3, cr15, cr12, {0}
	gpio_write(tx, 1);
    9b5c:	e1a00006 	mov	r0, r6
    9b60:	e3a01001 	mov	r1, #1
    9b64:	eb000240 	bl	a46c <gpio_write>

    // make sure it makes sense.
    unsigned mhz = 700 * 1000 * 1000;
    unsigned derived = cyc_per_bit * baud;
    9b68:	e0020795 	mul	r2, r5, r7
    assert((mhz - baud) <= derived && derived <= (mhz + baud));
    9b6c:	e59f3068 	ldr	r3, [pc, #104]	; 9bdc <sw_uart_init_helper+0xb0>
    9b70:	e0653003 	rsb	r3, r5, r3
    9b74:	e1530002 	cmp	r3, r2
    9b78:	8a000005 	bhi	9b94 <sw_uart_init_helper+0x68>
    9b7c:	e59f3058 	ldr	r3, [pc, #88]	; 9bdc <sw_uart_init_helper+0xb0>
    9b80:	e0853003 	add	r3, r5, r3
    9b84:	e1530002 	cmp	r3, r2
    9b88:	2a000003 	bcs	9b9c <sw_uart_init_helper+0x70>
    9b8c:	e3a03000 	mov	r3, #0
    9b90:	ea000002 	b	9ba0 <sw_uart_init_helper+0x74>
    9b94:	e3a03000 	mov	r3, #0
    9b98:	ea000000 	b	9ba0 <sw_uart_init_helper+0x74>
    9b9c:	e3a03001 	mov	r3, #1
    9ba0:	e3530000 	cmp	r3, #0
    9ba4:	1a000006 	bne	9bc4 <sw_uart_init_helper+0x98>
    9ba8:	ebfffc91 	bl	8df4 <rpi_reset_putc>
    9bac:	e59f002c 	ldr	r0, [pc, #44]	; 9be0 <sw_uart_init_helper+0xb4>
    9bb0:	e59f102c 	ldr	r1, [pc, #44]	; 9be4 <sw_uart_init_helper+0xb8>
    9bb4:	e59f202c 	ldr	r2, [pc, #44]	; 9be8 <sw_uart_init_helper+0xbc>
    9bb8:	e3a0309d 	mov	r3, #157	; 0x9d
    9bbc:	ebfffc71 	bl	8d88 <printk>
    9bc0:	ebfffde0 	bl	9348 <clean_reboot>
    // panic("cyc_per_bit = %d * baud = %d\n", cyc_per_bit, cyc_per_bit * baud);

    return (sw_uart_t) { 
    9bc4:	e5c46000 	strb	r6, [r4]
    9bc8:	e5c48001 	strb	r8, [r4, #1]
    9bcc:	e5845004 	str	r5, [r4, #4]
    9bd0:	e5847008 	str	r7, [r4, #8]
            .tx = tx, 
            .rx = rx, 
            .baud = baud, 
            .cycle_per_bit = cyc_per_bit 
    };
}
    9bd4:	e1a00004 	mov	r0, r4
    9bd8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9bdc:	29b92700 	ldmibcs	r9!, {r8, r9, sl, sp}
    9be0:	0000afa4 	andeq	sl, r0, r4, lsr #31
    9be4:	0000af90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
    9be8:	0000af28 	andeq	sl, r0, r8, lsr #30

00009bec <sw_uart_getc>:

// blocking read.
int sw_uart_getc(sw_uart_t *uart) {
    9bec:	e92d4008 	push	{r3, lr}
    int res = sw_uart_getc_timeout(uart, ~0);
    9bf0:	e3e01000 	mvn	r1, #0
    9bf4:	ebffff17 	bl	9858 <sw_uart_getc_timeout>
    if(res < 0)
    9bf8:	e3500000 	cmp	r0, #0
    9bfc:	a8bd8008 	popge	{r3, pc}
        panic("impossible: have an infinite timeout!\n");
    9c00:	ebfffc7b 	bl	8df4 <rpi_reset_putc>
    9c04:	e59f0010 	ldr	r0, [pc, #16]	; 9c1c <sw_uart_getc+0x30>
    9c08:	e59f1010 	ldr	r1, [pc, #16]	; 9c20 <sw_uart_getc+0x34>
    9c0c:	e59f2010 	ldr	r2, [pc, #16]	; 9c24 <sw_uart_getc+0x38>
    9c10:	e3a030ac 	mov	r3, #172	; 0xac
    9c14:	ebfffc5b 	bl	8d88 <printk>
    9c18:	ebfffdca 	bl	9348 <clean_reboot>
    9c1c:	0000afe8 	andeq	sl, r0, r8, ror #31
    9c20:	0000af90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
    9c24:	0000af3c 	andeq	sl, r0, ip, lsr pc

00009c28 <sw_uart_putk>:
    return res;
}

void sw_uart_putk(sw_uart_t *uart, const char *msg) {
    9c28:	e92d4038 	push	{r3, r4, r5, lr}
    9c2c:	e1a05000 	mov	r5, r0
    9c30:	e1a04001 	mov	r4, r1
    for(; *msg; msg++)
    9c34:	ea000002 	b	9c44 <sw_uart_putk+0x1c>
        sw_uart_putc(uart, *msg);
    9c38:	e1a00005 	mov	r0, r5
    9c3c:	ebfffeb0 	bl	9704 <sw_uart_putc>
        panic("impossible: have an infinite timeout!\n");
    return res;
}

void sw_uart_putk(sw_uart_t *uart, const char *msg) {
    for(; *msg; msg++)
    9c40:	e2844001 	add	r4, r4, #1
    9c44:	e5d41000 	ldrb	r1, [r4]
    9c48:	e3510000 	cmp	r1, #0
    9c4c:	1afffff9 	bne	9c38 <sw_uart_putk+0x10>
        sw_uart_putc(uart, *msg);
}
    9c50:	e8bd8038 	pop	{r3, r4, r5, pc}

00009c54 <sw_uart_printk>:

// don't pollute the rest of the code with all the stuff in the 
// <stdarg.h> header.
#include <stdarg.h>
#include "libc/va-printk.h"
int sw_uart_printk(sw_uart_t *uart, const char *fmt, ...) {
    9c54:	e92d000e 	push	{r1, r2, r3}
    9c58:	e92d4030 	push	{r4, r5, lr}
    9c5c:	e24dde1d 	sub	sp, sp, #464	; 0x1d0
    9c60:	e1a05000 	mov	r5, r0
    char buf[460];

    va_list args;
    va_start(args, fmt);
    9c64:	e28d3e1e 	add	r3, sp, #480	; 0x1e0
    9c68:	e58d3000 	str	r3, [sp]
        int sz = va_printk(buf, sizeof buf, fmt, args);
    9c6c:	e28d0004 	add	r0, sp, #4
    9c70:	e3a01f73 	mov	r1, #460	; 0x1cc
    9c74:	e59d21dc 	ldr	r2, [sp, #476]	; 0x1dc
    9c78:	ebfffd10 	bl	90c0 <va_printk>
    9c7c:	e1a04000 	mov	r4, r0
    va_end(args);
    assert(sz < sizeof buf-1);
    9c80:	e59f3040 	ldr	r3, [pc, #64]	; 9cc8 <sw_uart_printk+0x74>
    9c84:	e1500003 	cmp	r0, r3
    9c88:	9a000006 	bls	9ca8 <sw_uart_printk+0x54>
    9c8c:	ebfffc58 	bl	8df4 <rpi_reset_putc>
    9c90:	e59f0034 	ldr	r0, [pc, #52]	; 9ccc <sw_uart_printk+0x78>
    9c94:	e59f1034 	ldr	r1, [pc, #52]	; 9cd0 <sw_uart_printk+0x7c>
    9c98:	e59f2034 	ldr	r2, [pc, #52]	; 9cd4 <sw_uart_printk+0x80>
    9c9c:	e3a030c0 	mov	r3, #192	; 0xc0
    9ca0:	ebfffc38 	bl	8d88 <printk>
    9ca4:	ebfffda7 	bl	9348 <clean_reboot>
    sw_uart_putk(uart,buf);
    9ca8:	e1a00005 	mov	r0, r5
    9cac:	e28d1004 	add	r1, sp, #4
    9cb0:	ebffffdc 	bl	9c28 <sw_uart_putk>
    return sz;
}
    9cb4:	e1a00004 	mov	r0, r4
    9cb8:	e28dde1d 	add	sp, sp, #464	; 0x1d0
    9cbc:	e8bd4030 	pop	{r4, r5, lr}
    9cc0:	e28dd00c 	add	sp, sp, #12
    9cc4:	e12fff1e 	bx	lr
    9cc8:	000001ca 	andeq	r0, r0, sl, asr #3
    9ccc:	0000b020 	andeq	fp, r0, r0, lsr #32
    9cd0:	0000af90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
    9cd4:	0000af4c 	andeq	sl, r0, ip, asr #30

00009cd8 <sw_uart_gets_until_blk>:

int sw_uart_gets_until_blk(sw_uart_t *u, uint8_t *buf, uint32_t nbytes, uint8_t end) {
    9cd8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9cdc:	e24dd00c 	sub	sp, sp, #12
    int res = sw_uart_gets_until(u, buf, nbytes, end, ~0);
    9ce0:	e3e0c000 	mvn	ip, #0
    9ce4:	e58dc000 	str	ip, [sp]
    9ce8:	ebffff4c 	bl	9a20 <sw_uart_gets_until>
    if(res < 0)
    9cec:	e3500000 	cmp	r0, #0
    9cf0:	aa000006 	bge	9d10 <sw_uart_gets_until_blk+0x38>
        panic("impossible: have an infinite timeout!\n");
    9cf4:	ebfffc3e 	bl	8df4 <rpi_reset_putc>
    9cf8:	e59f0018 	ldr	r0, [pc, #24]	; 9d18 <sw_uart_gets_until_blk+0x40>
    9cfc:	e59f1018 	ldr	r1, [pc, #24]	; 9d1c <sw_uart_gets_until_blk+0x44>
    9d00:	e59f2018 	ldr	r2, [pc, #24]	; 9d20 <sw_uart_gets_until_blk+0x48>
    9d04:	e3a030c8 	mov	r3, #200	; 0xc8
    9d08:	ebfffc1e 	bl	8d88 <printk>
    9d0c:	ebfffd8d 	bl	9348 <clean_reboot>
    return res;
}
    9d10:	e28dd00c 	add	sp, sp, #12
    9d14:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9d18:	0000afe8 	andeq	sl, r0, r8, ror #31
    9d1c:	0000af90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
    9d20:	0000af5c 	andeq	sl, r0, ip, asr pc

00009d24 <uart_init>:
#define RX_READY 0x1
#define TX_READY 0x10
#define TX_EMPTY 0x20

// note: if you need memory barriers, use <dev_barrier()>
void uart_init(void) {
    9d24:	e92d4038 	push	{r3, r4, r5, lr}
    
	dev_barrier();
    9d28:	eb0000e9 	bl	a0d4 <dev_barrier>

	// set GPIO 14 and 15 to alternate function 0
    //volatile unsigned* gpio_reg = (void*) 0x20200004;
    //unsigned bitmask = get32(gpio_reg);
    gpio_set_function(14, GPIO_FUNC_ALT5);
    9d2c:	e3a0000e 	mov	r0, #14
    9d30:	e3a01002 	mov	r1, #2
    9d34:	eb0001d5 	bl	a490 <gpio_set_function>
	gpio_set_function(15, GPIO_FUNC_ALT5);
    9d38:	e3a0000f 	mov	r0, #15
    9d3c:	e3a01002 	mov	r1, #2
    9d40:	eb0001d2 	bl	a490 <gpio_set_function>
    //bitmask &= ~(0b111 << ((UART0_RX % 10) * 3));
    //bitmask |= (0b010 << ((UART0_TX % 10) * 3));
    //bitmask |= (0b010 << ((UART0_RX % 10) * 3));
    //put32(gpio_reg, bitmask);

	dev_barrier();
    9d44:	eb0000e2 	bl	a0d4 <dev_barrier>

    put32(AUX_ENABLES, get32(AUX_ENABLES) | (ENABLE_UART));
    9d48:	e59f4068 	ldr	r4, [pc, #104]	; 9db8 <uart_init+0x94>
    9d4c:	e5945000 	ldr	r5, [r4]
    9d50:	e1a00005 	mov	r0, r5
    9d54:	eb0000f0 	bl	a11c <get32>
    9d58:	e3801001 	orr	r1, r0, #1
    9d5c:	e1a00005 	mov	r0, r5
    9d60:	eb0000e1 	bl	a0ec <put32>
	
	dev_barrier();
    9d64:	eb0000da 	bl	a0d4 <dev_barrier>
	
    put32(AUX_MU_CNTL_REG, 0x0);
    9d68:	e5940004 	ldr	r0, [r4, #4]
    9d6c:	e3a01000 	mov	r1, #0
    9d70:	eb0000dd 	bl	a0ec <put32>
    put32(AUX_MU_IER_REG, 0x0);
    9d74:	e5940008 	ldr	r0, [r4, #8]
    9d78:	e3a01000 	mov	r1, #0
    9d7c:	eb0000da 	bl	a0ec <put32>
    put32(AUX_MU_IIR_REG, CLEAR_RX_FIFO | CLEAR_TX_FIFO);
    9d80:	e594000c 	ldr	r0, [r4, #12]
    9d84:	e3a01006 	mov	r1, #6
    9d88:	eb0000d7 	bl	a0ec <put32>
	put32(AUX_MU_LCR_REG, ENABLE_8BIT_MODE);
    9d8c:	e5940010 	ldr	r0, [r4, #16]
    9d90:	e3a01003 	mov	r1, #3
    9d94:	eb0000d4 	bl	a0ec <put32>
    put32(AUX_MU_BAUD_REG, BAUD_115200);
    9d98:	e5940014 	ldr	r0, [r4, #20]
    9d9c:	e59f1018 	ldr	r1, [pc, #24]	; 9dbc <uart_init+0x98>
    9da0:	eb0000d1 	bl	a0ec <put32>
    put32(AUX_MU_CNTL_REG, ENABLE_TXER | ENABLE_RXER);
    9da4:	e5940004 	ldr	r0, [r4, #4]
    9da8:	e3a01003 	mov	r1, #3
    9dac:	eb0000ce 	bl	a0ec <put32>

	dev_barrier();
    9db0:	eb0000c7 	bl	a0d4 <dev_barrier>
    9db4:	e8bd8038 	pop	{r3, r4, r5, pc}
    9db8:	0000a7d4 	ldrdeq	sl, [r0], -r4
    9dbc:	0000010e 	andeq	r0, r0, lr, lsl #2

00009dc0 <uart_can_getc>:
}

// 1 = at least one byte on rx queue, 0 otherwise
int uart_can_getc(void) {
    9dc0:	e92d4008 	push	{r3, lr}
    return get32(AUX_MU_LSR_REG) & RX_READY;
    9dc4:	e59f300c 	ldr	r3, [pc, #12]	; 9dd8 <uart_can_getc+0x18>
    9dc8:	e5930018 	ldr	r0, [r3, #24]
    9dcc:	eb0000d2 	bl	a11c <get32>
}
    9dd0:	e2000001 	and	r0, r0, #1
    9dd4:	e8bd8008 	pop	{r3, pc}
    9dd8:	0000a7d4 	ldrdeq	sl, [r0], -r4

00009ddc <uart_getc>:

// returns one byte from the rx queue, if needed
// blocks until there is one.
int uart_getc(void) {
    9ddc:	e92d4008 	push	{r3, lr}
    while(1)
        if(uart_can_getc())  break;
    9de0:	ebfffff6 	bl	9dc0 <uart_can_getc>
    9de4:	e3500000 	cmp	r0, #0
    9de8:	0afffffc 	beq	9de0 <uart_getc+0x4>
    return get32(AUX_MU_IO_REG) & 0xFF;
    9dec:	e59f300c 	ldr	r3, [pc, #12]	; 9e00 <uart_getc+0x24>
    9df0:	e593001c 	ldr	r0, [r3, #28]
    9df4:	eb0000c8 	bl	a11c <get32>
}
    9df8:	e6ef0070 	uxtb	r0, r0
    9dfc:	e8bd8008 	pop	{r3, pc}
    9e00:	0000a7d4 	ldrdeq	sl, [r0], -r4

00009e04 <uart_can_putc>:

// 1 = space to put at least one byte, 0 otherwise.
int uart_can_putc(void) {
    9e04:	e92d4008 	push	{r3, lr}
    return get32(AUX_MU_LSR_REG) & TX_EMPTY;
    9e08:	e59f300c 	ldr	r3, [pc, #12]	; 9e1c <uart_can_putc+0x18>
    9e0c:	e5930018 	ldr	r0, [r3, #24]
    9e10:	eb0000c1 	bl	a11c <get32>
}
    9e14:	e2000020 	and	r0, r0, #32
    9e18:	e8bd8008 	pop	{r3, pc}
    9e1c:	0000a7d4 	ldrdeq	sl, [r0], -r4

00009e20 <uart_putc>:

// put one byte on the tx qqueue, if needed, blocks
// until TX has space.
void uart_putc(unsigned c) {
    9e20:	e92d4010 	push	{r4, lr}
    9e24:	e1a04000 	mov	r4, r0
    while(1)
            if(uart_can_putc())  break;
    9e28:	ebfffff5 	bl	9e04 <uart_can_putc>
    9e2c:	e3500000 	cmp	r0, #0
    9e30:	0afffffc 	beq	9e28 <uart_putc+0x8>
    put32(AUX_MU_IO_REG, c);
    9e34:	e59f300c 	ldr	r3, [pc, #12]	; 9e48 <uart_putc+0x28>
    9e38:	e593001c 	ldr	r0, [r3, #28]
    9e3c:	e1a01004 	mov	r1, r4
    9e40:	eb0000a9 	bl	a0ec <put32>
    9e44:	e8bd8010 	pop	{r4, pc}
    9e48:	0000a7d4 	ldrdeq	sl, [r0], -r4

00009e4c <uart_has_data>:


// simple wrapper routines useful later.

// a maybe-more intuitive name for clients.
int uart_has_data(void) {
    9e4c:	e92d4008 	push	{r3, lr}
    return uart_can_getc();
    9e50:	ebffffda 	bl	9dc0 <uart_can_getc>
}
    9e54:	e8bd8008 	pop	{r3, pc}

00009e58 <uart_getc_async>:

int uart_getc_async(void) { 
    9e58:	e92d4008 	push	{r3, lr}
    if(!uart_has_data())
    9e5c:	ebfffffa 	bl	9e4c <uart_has_data>
    9e60:	e3500000 	cmp	r0, #0
    9e64:	0a000001 	beq	9e70 <uart_getc_async+0x18>
        return -1;
    return uart_getc();
    9e68:	ebffffdb 	bl	9ddc <uart_getc>
    9e6c:	e8bd8008 	pop	{r3, pc}
    return uart_can_getc();
}

int uart_getc_async(void) { 
    if(!uart_has_data())
        return -1;
    9e70:	e3e00000 	mvn	r0, #0
    return uart_getc();
}
    9e74:	e8bd8008 	pop	{r3, pc}

00009e78 <int_init>:
#include "rpi.h"
#include "rpi-interrupts.h"

// initialize global interrupt state.
void int_init(void) {
    9e78:	e92d4008 	push	{r3, lr}
    // put interrupt flags in known state. 
    //  BCM2835 manual, section 7.5
    PUT32(Disable_IRQs_1, 0xffffffff);
    9e7c:	e59f004c 	ldr	r0, [pc, #76]	; 9ed0 <int_init+0x58>
    9e80:	e3e01000 	mvn	r1, #0
    9e84:	eb00009a 	bl	a0f4 <PUT32>
    PUT32(Disable_IRQs_2, 0xffffffff);
    9e88:	e59f0044 	ldr	r0, [pc, #68]	; 9ed4 <int_init+0x5c>
    9e8c:	e3e01000 	mvn	r1, #0
    9e90:	eb000097 	bl	a0f4 <PUT32>
    dev_barrier();
    9e94:	eb00008e 	bl	a0d4 <dev_barrier>

    // where the interrupt handlers go.
#   define RPI_VECTOR_START  0
    unsigned *dst = (void*)RPI_VECTOR_START,
                 *src = &_interrupt_table,
                 n = &_interrupt_table_end - src;
    9e98:	e59f3038 	ldr	r3, [pc, #56]	; 9ed8 <int_init+0x60>
    9e9c:	e59f0038 	ldr	r0, [pc, #56]	; 9edc <int_init+0x64>
    9ea0:	e0630000 	rsb	r0, r3, r0
    9ea4:	e1a00140 	asr	r0, r0, #2
    for(int i = 0; i < n; i++)
    9ea8:	e3a03000 	mov	r3, #0
        dst[i] = src[i];
    9eac:	e59fc024 	ldr	ip, [pc, #36]	; 9ed8 <int_init+0x60>
    // where the interrupt handlers go.
#   define RPI_VECTOR_START  0
    unsigned *dst = (void*)RPI_VECTOR_START,
                 *src = &_interrupt_table,
                 n = &_interrupt_table_end - src;
    for(int i = 0; i < n; i++)
    9eb0:	ea000003 	b	9ec4 <int_init+0x4c>
        dst[i] = src[i];
    9eb4:	e1a02103 	lsl	r2, r3, #2
    9eb8:	e79c1103 	ldr	r1, [ip, r3, lsl #2]
    9ebc:	e5821000 	str	r1, [r2]
    // where the interrupt handlers go.
#   define RPI_VECTOR_START  0
    unsigned *dst = (void*)RPI_VECTOR_START,
                 *src = &_interrupt_table,
                 n = &_interrupt_table_end - src;
    for(int i = 0; i < n; i++)
    9ec0:	e2833001 	add	r3, r3, #1
    9ec4:	e1530000 	cmp	r3, r0
    9ec8:	3afffff9 	bcc	9eb4 <int_init+0x3c>
        dst[i] = src[i];
}
    9ecc:	e8bd8008 	pop	{r3, pc}
    9ed0:	2000b21c 	andcs	fp, r0, ip, lsl r2
    9ed4:	2000b220 	andcs	fp, r0, r0, lsr #4
    9ed8:	0000a158 	andeq	sl, r0, r8, asr r1
    9edc:	0000a1a8 	andeq	sl, r0, r8, lsr #3

00009ee0 <fast_interrupt_vector>:

#define UNHANDLED(msg,r) \
	panic("ERROR: unhandled exception <%s> at PC=%x\n", msg,r)
void fast_interrupt_vector(unsigned pc) {
    9ee0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9ee4:	e24dd00c 	sub	sp, sp, #12
    9ee8:	e1a04000 	mov	r4, r0
	UNHANDLED("fast", pc);
    9eec:	ebfffbc0 	bl	8df4 <rpi_reset_putc>
    9ef0:	e59f301c 	ldr	r3, [pc, #28]	; 9f14 <fast_interrupt_vector+0x34>
    9ef4:	e58d3000 	str	r3, [sp]
    9ef8:	e58d4004 	str	r4, [sp, #4]
    9efc:	e59f0014 	ldr	r0, [pc, #20]	; 9f18 <fast_interrupt_vector+0x38>
    9f00:	e59f1014 	ldr	r1, [pc, #20]	; 9f1c <fast_interrupt_vector+0x3c>
    9f04:	e59f2014 	ldr	r2, [pc, #20]	; 9f20 <fast_interrupt_vector+0x40>
    9f08:	e3a03020 	mov	r3, #32
    9f0c:	ebfffb9d 	bl	8d88 <printk>
    9f10:	ebfffd0c 	bl	9348 <clean_reboot>
    9f14:	0000b130 	andeq	fp, r0, r0, lsr r1
    9f18:	0000b0d4 	ldrdeq	fp, [r0], -r4
    9f1c:	0000b110 	andeq	fp, r0, r0, lsl r1
    9f20:	0000b044 	andeq	fp, r0, r4, asr #32

00009f24 <software_interrupt_vector>:
}

// this is used for syscalls.
void software_interrupt_vector(unsigned pc) {
    9f24:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9f28:	e24dd00c 	sub	sp, sp, #12
    9f2c:	e1a04000 	mov	r4, r0
	UNHANDLED("soft interrupt", pc);
    9f30:	ebfffbaf 	bl	8df4 <rpi_reset_putc>
    9f34:	e59f301c 	ldr	r3, [pc, #28]	; 9f58 <software_interrupt_vector+0x34>
    9f38:	e58d3000 	str	r3, [sp]
    9f3c:	e58d4004 	str	r4, [sp, #4]
    9f40:	e59f0014 	ldr	r0, [pc, #20]	; 9f5c <software_interrupt_vector+0x38>
    9f44:	e59f1014 	ldr	r1, [pc, #20]	; 9f60 <software_interrupt_vector+0x3c>
    9f48:	e59f2014 	ldr	r2, [pc, #20]	; 9f64 <software_interrupt_vector+0x40>
    9f4c:	e3a03025 	mov	r3, #37	; 0x25
    9f50:	ebfffb8c 	bl	8d88 <printk>
    9f54:	ebfffcfb 	bl	9348 <clean_reboot>
    9f58:	0000b138 	andeq	fp, r0, r8, lsr r1
    9f5c:	0000b0d4 	ldrdeq	fp, [r0], -r4
    9f60:	0000b110 	andeq	fp, r0, r0, lsl r1
    9f64:	0000b05c 	andeq	fp, r0, ip, asr r0

00009f68 <reset_vector>:
}
void reset_vector(unsigned pc) {
    9f68:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9f6c:	e24dd00c 	sub	sp, sp, #12
    9f70:	e1a04000 	mov	r4, r0
	UNHANDLED("reset vector", pc);
    9f74:	ebfffb9e 	bl	8df4 <rpi_reset_putc>
    9f78:	e59f301c 	ldr	r3, [pc, #28]	; 9f9c <reset_vector+0x34>
    9f7c:	e58d3000 	str	r3, [sp]
    9f80:	e58d4004 	str	r4, [sp, #4]
    9f84:	e59f0014 	ldr	r0, [pc, #20]	; 9fa0 <reset_vector+0x38>
    9f88:	e59f1014 	ldr	r1, [pc, #20]	; 9fa4 <reset_vector+0x3c>
    9f8c:	e59f2014 	ldr	r2, [pc, #20]	; 9fa8 <reset_vector+0x40>
    9f90:	e3a03028 	mov	r3, #40	; 0x28
    9f94:	ebfffb7b 	bl	8d88 <printk>
    9f98:	ebfffcea 	bl	9348 <clean_reboot>
    9f9c:	0000b148 	andeq	fp, r0, r8, asr #2
    9fa0:	0000b0d4 	ldrdeq	fp, [r0], -r4
    9fa4:	0000b110 	andeq	fp, r0, r0, lsl r1
    9fa8:	0000b078 	andeq	fp, r0, r8, ror r0

00009fac <undefined_instruction_vector>:
}
void undefined_instruction_vector(unsigned pc) {
    9fac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9fb0:	e24dd00c 	sub	sp, sp, #12
    9fb4:	e1a04000 	mov	r4, r0
	UNHANDLED("undefined instruction", pc);
    9fb8:	ebfffb8d 	bl	8df4 <rpi_reset_putc>
    9fbc:	e59f301c 	ldr	r3, [pc, #28]	; 9fe0 <undefined_instruction_vector+0x34>
    9fc0:	e58d3000 	str	r3, [sp]
    9fc4:	e58d4004 	str	r4, [sp, #4]
    9fc8:	e59f0014 	ldr	r0, [pc, #20]	; 9fe4 <undefined_instruction_vector+0x38>
    9fcc:	e59f1014 	ldr	r1, [pc, #20]	; 9fe8 <undefined_instruction_vector+0x3c>
    9fd0:	e59f2014 	ldr	r2, [pc, #20]	; 9fec <undefined_instruction_vector+0x40>
    9fd4:	e3a0302b 	mov	r3, #43	; 0x2b
    9fd8:	ebfffb6a 	bl	8d88 <printk>
    9fdc:	ebfffcd9 	bl	9348 <clean_reboot>
    9fe0:	0000b158 	andeq	fp, r0, r8, asr r1
    9fe4:	0000b0d4 	ldrdeq	fp, [r0], -r4
    9fe8:	0000b110 	andeq	fp, r0, r0, lsl r1
    9fec:	0000b088 	andeq	fp, r0, r8, lsl #1

00009ff0 <prefetch_abort_vector>:
}
void prefetch_abort_vector(unsigned pc) {
    9ff0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9ff4:	e24dd00c 	sub	sp, sp, #12
    9ff8:	e1a04000 	mov	r4, r0
	UNHANDLED("prefetch abort", pc);
    9ffc:	ebfffb7c 	bl	8df4 <rpi_reset_putc>
    a000:	e59f301c 	ldr	r3, [pc, #28]	; a024 <prefetch_abort_vector+0x34>
    a004:	e58d3000 	str	r3, [sp]
    a008:	e58d4004 	str	r4, [sp, #4]
    a00c:	e59f0014 	ldr	r0, [pc, #20]	; a028 <prefetch_abort_vector+0x38>
    a010:	e59f1014 	ldr	r1, [pc, #20]	; a02c <prefetch_abort_vector+0x3c>
    a014:	e59f2014 	ldr	r2, [pc, #20]	; a030 <prefetch_abort_vector+0x40>
    a018:	e3a0302e 	mov	r3, #46	; 0x2e
    a01c:	ebfffb59 	bl	8d88 <printk>
    a020:	ebfffcc8 	bl	9348 <clean_reboot>
    a024:	0000b170 	andeq	fp, r0, r0, ror r1
    a028:	0000b0d4 	ldrdeq	fp, [r0], -r4
    a02c:	0000b110 	andeq	fp, r0, r0, lsl r1
    a030:	0000b0a8 	andeq	fp, r0, r8, lsr #1

0000a034 <data_abort_vector>:
}
void data_abort_vector(unsigned pc) {
    a034:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a038:	e24dd00c 	sub	sp, sp, #12
    a03c:	e1a04000 	mov	r4, r0
	UNHANDLED("data abort", pc);
    a040:	ebfffb6b 	bl	8df4 <rpi_reset_putc>
    a044:	e59f301c 	ldr	r3, [pc, #28]	; a068 <data_abort_vector+0x34>
    a048:	e58d3000 	str	r3, [sp]
    a04c:	e58d4004 	str	r4, [sp, #4]
    a050:	e59f0014 	ldr	r0, [pc, #20]	; a06c <data_abort_vector+0x38>
    a054:	e59f1014 	ldr	r1, [pc, #20]	; a070 <data_abort_vector+0x3c>
    a058:	e59f2014 	ldr	r2, [pc, #20]	; a074 <data_abort_vector+0x40>
    a05c:	e3a03031 	mov	r3, #49	; 0x31
    a060:	ebfffb48 	bl	8d88 <printk>
    a064:	ebfffcb7 	bl	9348 <clean_reboot>
    a068:	0000b180 	andeq	fp, r0, r0, lsl #3
    a06c:	0000b0d4 	ldrdeq	fp, [r0], -r4
    a070:	0000b110 	andeq	fp, r0, r0, lsl r1
    a074:	0000b0c0 	andeq	fp, r0, r0, asr #1

0000a078 <timer_check_offsets>:
    // ready.
}

// Q: how does the libpi/libc/assert.h:AssertNow macro work?
// Q: what happens / why when you change some of these constants?
static void timer_check_offsets(void) {
    a078:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a07c:	e24dd01c 	sub	sp, sp, #28
    check_bitfield(rpi_arm_timer_ctrl_t, int_enabled,        5, 1);
    check_bitfield(rpi_arm_timer_ctrl_t, timer_enabled,      7, 1);
    check_bitfield(rpi_arm_timer_ctrl_t, counter_enabled,    9, 1);
    check_bitfield(rpi_arm_timer_ctrl_t, counter_prescaler,          16, 7);
    AssertNow(sizeof(rpi_arm_timer_ctrl_t) == 4);
    printk("offsets checked out!\n");
    a080:	e59f0008 	ldr	r0, [pc, #8]	; a090 <timer_check_offsets+0x18>
    a084:	ebfffb3f 	bl	8d88 <printk>
}
    a088:	e28dd01c 	add	sp, sp, #28
    a08c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    a090:	0000b2c0 	andeq	fp, r0, r0, asr #5

0000a094 <timer_interrupt_init>:
// macros to help deal with structures and put/get
#include "libc/helper-macros.h"

static void timer_check_offsets(void);

void timer_interrupt_init(unsigned ncycles) {
    a094:	e92d4010 	push	{r4, lr}
    a098:	e1a04000 	mov	r4, r0
    timer_check_offsets();
    a09c:	ebfffff5 	bl	a078 <timer_check_offsets>

    // from valvers:
    //	 Enable the timer interrupt IRQ
    PUT32(Enable_Basic_IRQs, RPI_BASIC_ARM_TIMER_IRQ);
    a0a0:	e59f0020 	ldr	r0, [pc, #32]	; a0c8 <timer_interrupt_init+0x34>
    a0a4:	e3a01001 	mov	r1, #1
    a0a8:	eb000011 	bl	a0f4 <PUT32>

    /* Setup the system timer interrupt */
    /* Timer frequency = Clk/256 * Load --- so smaller = more frequent. */
    PUT32(arm_timer_Load, ncycles);
    a0ac:	e59f0018 	ldr	r0, [pc, #24]	; a0cc <timer_interrupt_init+0x38>
    a0b0:	e1a01004 	mov	r1, r4
    a0b4:	eb00000e 	bl	a0f4 <PUT32>

    // Setup the ARM Timer: experiment by changing the prescale [defined on p197]
#if 1
    PUT32(arm_timer_Control,
    a0b8:	e59f0010 	ldr	r0, [pc, #16]	; a0d0 <timer_interrupt_init+0x3c>
    a0bc:	e3a010a6 	mov	r1, #166	; 0xa6
    a0c0:	eb00000b 	bl	a0f4 <PUT32>
    a0c4:	e8bd8010 	pop	{r4, pc}
    a0c8:	2000b218 	andcs	fp, r0, r8, lsl r2
    a0cc:	2000b400 	andcs	fp, r0, r0, lsl #8
    a0d0:	2000b408 	andcs	fp, r0, r8, lsl #8

0000a0d4 <dev_barrier>:
    a0d4:	ea000002 	b	a0e4 <dsb>

0000a0d8 <dmb>:
    a0d8:	e3a00000 	mov	r0, #0
    a0dc:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
    a0e0:	e12fff1e 	bx	lr

0000a0e4 <dsb>:
    a0e4:	ee070f9a 	mcr	15, 0, r0, cr7, cr10, {4}
    a0e8:	e12fff1e 	bx	lr

0000a0ec <put32>:
    a0ec:	e5801000 	str	r1, [r0]
    a0f0:	e12fff1e 	bx	lr

0000a0f4 <PUT32>:
    a0f4:	e5801000 	str	r1, [r0]
    a0f8:	e12fff1e 	bx	lr

0000a0fc <put16>:
    a0fc:	e1c010b0 	strh	r1, [r0]
    a100:	e12fff1e 	bx	lr

0000a104 <PUT16>:
    a104:	e1c010b0 	strh	r1, [r0]
    a108:	e12fff1e 	bx	lr

0000a10c <put8>:
    a10c:	e5c01000 	strb	r1, [r0]
    a110:	e12fff1e 	bx	lr

0000a114 <PUT8>:
    a114:	e5c01000 	strb	r1, [r0]
    a118:	e12fff1e 	bx	lr

0000a11c <get32>:
    a11c:	e5900000 	ldr	r0, [r0]
    a120:	e12fff1e 	bx	lr

0000a124 <GET32>:
    a124:	e5900000 	ldr	r0, [r0]
    a128:	e12fff1e 	bx	lr

0000a12c <GETPC>:
    a12c:	e1a0000e 	mov	r0, lr
    a130:	e12fff1e 	bx	lr

0000a134 <dummy>:
    a134:	e12fff1e 	bx	lr

0000a138 <system_enable_interrupts>:
    a138:	e10f0000 	mrs	r0, CPSR
    a13c:	e3c00080 	bic	r0, r0, #128	; 0x80
    a140:	e121f000 	msr	CPSR_c, r0
    a144:	e12fff1e 	bx	lr

0000a148 <system_disable_interrupts>:
    a148:	e10f0000 	mrs	r0, CPSR
    a14c:	e3800080 	orr	r0, r0, #128	; 0x80
    a150:	e121f000 	msr	CPSR_c, r0
    a154:	e12fff1e 	bx	lr

0000a158 <_interrupt_table>:
    a158:	e59ff030 	ldr	pc, [pc, #48]	; a190 <_reset_asm>
    a15c:	e59ff030 	ldr	pc, [pc, #48]	; a194 <_undefined_instruction_asm>
    a160:	e59ff030 	ldr	pc, [pc, #48]	; a198 <_software_interrupt_asm>
    a164:	e59ff030 	ldr	pc, [pc, #48]	; a19c <_prefetch_abort_asm>
    a168:	e59ff030 	ldr	pc, [pc, #48]	; a1a0 <_data_abort_asm>
    a16c:	e59ff01c 	ldr	pc, [pc, #28]	; a190 <_reset_asm>
    a170:	e59ff02c 	ldr	pc, [pc, #44]	; a1a4 <_interrupt_asm>

0000a174 <fast_interrupt_asm>:
    a174:	e24ee004 	sub	lr, lr, #4
    a178:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a17c:	e92d1fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    a180:	e1a0000e 	mov	r0, lr
    a184:	ebffff55 	bl	9ee0 <fast_interrupt_vector>
    a188:	e8bd1fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    a18c:	e8fd8000 	ldm	sp!, {pc}^

0000a190 <_reset_asm>:
    a190:	0000a1f0 	strdeq	sl, [r0], -r0

0000a194 <_undefined_instruction_asm>:
    a194:	0000a1f8 	strdeq	sl, [r0], -r8

0000a198 <_software_interrupt_asm>:
    a198:	0000a1c4 	andeq	sl, r0, r4, asr #3

0000a19c <_prefetch_abort_asm>:
    a19c:	0000a200 	andeq	sl, r0, r0, lsl #4

0000a1a0 <_data_abort_asm>:
    a1a0:	0000a208 	andeq	sl, r0, r8, lsl #4

0000a1a4 <_interrupt_asm>:
    a1a4:	0000a1a8 	andeq	sl, r0, r8, lsr #3

0000a1a8 <_interrupt_table_end>:
    a1a8:	e3a0d409 	mov	sp, #150994944	; 0x9000000
    a1ac:	e24ee004 	sub	lr, lr, #4
    a1b0:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    a1b4:	e1a0000e 	mov	r0, lr
    a1b8:	ebfff891 	bl	8404 <interrupt_vector>
    a1bc:	e8bd5fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    a1c0:	e1b0f00e 	movs	pc, lr

0000a1c4 <software_interrupt_asm>:
    a1c4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a1c8:	e92d1ffe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    a1cc:	e24ee004 	sub	lr, lr, #4
    a1d0:	e1a0200e 	mov	r2, lr
    a1d4:	e1a01000 	mov	r1, r0
    a1d8:	e1a0000e 	mov	r0, lr
    a1dc:	eb000003 	bl	a1f0 <reset_asm>
    a1e0:	e8bd1ffe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    a1e4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a1e8:	e8fd8000 	ldm	sp!, {pc}^
    a1ec:	e1b0f00e 	movs	pc, lr

0000a1f0 <reset_asm>:
    a1f0:	e24ee004 	sub	lr, lr, #4
    a1f4:	ebffff5b 	bl	9f68 <reset_vector>

0000a1f8 <undefined_instruction_asm>:
    a1f8:	e24ee004 	sub	lr, lr, #4
    a1fc:	ebffff6a 	bl	9fac <undefined_instruction_vector>

0000a200 <prefetch_abort_asm>:
    a200:	e24ee004 	sub	lr, lr, #4
    a204:	ebffff79 	bl	9ff0 <prefetch_abort_vector>

0000a208 <data_abort_asm>:
    a208:	e24ee004 	sub	lr, lr, #4
    a20c:	ebffff88 	bl	a034 <data_abort_vector>

0000a210 <gpio_set_output>:
volatile unsigned *GPLEV1 = (void*) 0x20200038;
// Part 1 implement gpio_set_on, gpio_set_off, gpio_set_output

// set <pin> to be an output pin.  note: fsel0, fsel1, fsel2 are contiguous in memory,
// so you can use array calculations!
extern inline void gpio_set_output(unsigned pin) {
    a210:	e92d4038 	push	{r3, r4, r5, lr}
    a214:	e1a04000 	mov	r4, r0
    // implement this
    // use gpio_fsel0
    
    if (pin >= 32) {
    a218:	e350001f 	cmp	r0, #31
    a21c:	88bd8038 	pophi	{r3, r4, r5, pc}
        return;
    }
    
    volatile unsigned* gpio_reg;
    
    unsigned reg_select = pin / 10;
    a220:	e59f30b4 	ldr	r3, [pc, #180]	; a2dc <gpio_set_output+0xcc>
    a224:	e0832093 	umull	r2, r3, r3, r0
    a228:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    a22c:	e3530005 	cmp	r3, #5
    a230:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    a234:	ea000017 	b	a298 <gpio_set_output+0x88>
    a238:	0000a250 	andeq	sl, r0, r0, asr r2
    a23c:	0000a25c 	andeq	sl, r0, ip, asr r2
    a240:	0000a268 	andeq	sl, r0, r8, ror #4
    a244:	0000a274 	andeq	sl, r0, r4, ror r2
    a248:	0000a280 	andeq	sl, r0, r0, lsl #5
    a24c:	0000a28c 	andeq	sl, r0, ip, lsl #5
        case 0: {gpio_reg = GPFSEL0; break;}
    a250:	e59f3088 	ldr	r3, [pc, #136]	; a2e0 <gpio_set_output+0xd0>
    a254:	e5935000 	ldr	r5, [r3]
    a258:	ea00000f 	b	a29c <gpio_set_output+0x8c>
        case 1: {gpio_reg = GPFSEL1; break;}
    a25c:	e59f307c 	ldr	r3, [pc, #124]	; a2e0 <gpio_set_output+0xd0>
    a260:	e5935004 	ldr	r5, [r3, #4]
    a264:	ea00000c 	b	a29c <gpio_set_output+0x8c>
        case 2: {gpio_reg = GPFSEL2; break;}
    a268:	e59f3070 	ldr	r3, [pc, #112]	; a2e0 <gpio_set_output+0xd0>
    a26c:	e5935008 	ldr	r5, [r3, #8]
    a270:	ea000009 	b	a29c <gpio_set_output+0x8c>
        case 3: {gpio_reg = GPFSEL3; break;}
    a274:	e59f3064 	ldr	r3, [pc, #100]	; a2e0 <gpio_set_output+0xd0>
    a278:	e593500c 	ldr	r5, [r3, #12]
    a27c:	ea000006 	b	a29c <gpio_set_output+0x8c>
        case 4: {gpio_reg = GPFSEL4; break;}
    a280:	e59f3058 	ldr	r3, [pc, #88]	; a2e0 <gpio_set_output+0xd0>
    a284:	e5935010 	ldr	r5, [r3, #16]
    a288:	ea000003 	b	a29c <gpio_set_output+0x8c>
        case 5: {gpio_reg = GPFSEL5; break;}
    a28c:	e59f304c 	ldr	r3, [pc, #76]	; a2e0 <gpio_set_output+0xd0>
    a290:	e5935014 	ldr	r5, [r3, #20]
    a294:	ea000000 	b	a29c <gpio_set_output+0x8c>
        default: gpio_reg = 0x0;
    a298:	e3a05000 	mov	r5, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    a29c:	e1a00005 	mov	r0, r5
    a2a0:	ebffff9d 	bl	a11c <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    a2a4:	e59f1030 	ldr	r1, [pc, #48]	; a2dc <gpio_set_output+0xcc>
    a2a8:	e0813491 	umull	r3, r1, r1, r4
    a2ac:	e1a011a1 	lsr	r1, r1, #3
    a2b0:	e0811101 	add	r1, r1, r1, lsl #2
    a2b4:	e1a01081 	lsl	r1, r1, #1
    a2b8:	e0611004 	rsb	r1, r1, r4
    a2bc:	e0811081 	add	r1, r1, r1, lsl #1
    a2c0:	e3a03007 	mov	r3, #7
    a2c4:	e1c03113 	bic	r3, r0, r3, lsl r1
    bitmask |= (1 << ((pin % 10) * 3));
    put32(gpio_reg, bitmask);
    a2c8:	e1a00005 	mov	r0, r5
    a2cc:	e3a02001 	mov	r2, #1
    a2d0:	e1831112 	orr	r1, r3, r2, lsl r1
    a2d4:	ebffff84 	bl	a0ec <put32>
    a2d8:	e8bd8038 	pop	{r3, r4, r5, pc}
    a2dc:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    a2e0:	0000a808 	andeq	sl, r0, r8, lsl #16

0000a2e4 <gpio_set_on>:
    
}


// set GPIO <pin> on.
void gpio_set_on(unsigned pin) {
    a2e4:	e92d4008 	push	{r3, lr}
    // implement this
    // use gpio_set0
    if (pin >= 32) {
    a2e8:	e350001f 	cmp	r0, #31
    a2ec:	88bd8008 	pophi	{r3, pc}
    // Get current register value
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPSET0;
    a2f0:	959f3020 	ldrls	r3, [pc, #32]	; a318 <gpio_set_on+0x34>
    a2f4:	95932018 	ldrls	r2, [r3, #24]
        // TODO: why do we not want this statement?
        //bitmask = get32(GPSET0);
    } else {
        gpio_reg = GPSET1;
    a2f8:	859f3018 	ldrhi	r3, [pc, #24]	; a318 <gpio_set_on+0x34>
    a2fc:	8593201c 	ldrhi	r2, [r3, #28]
        //bitmask = get32(GPSET1);
        // TODO: why do we not want this statement?
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    a300:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    a304:	e1a00002 	mov	r0, r2
    a308:	e3a01001 	mov	r1, #1
    a30c:	e1a01311 	lsl	r1, r1, r3
    a310:	ebffff75 	bl	a0ec <put32>
    a314:	e8bd8008 	pop	{r3, pc}
    a318:	0000a808 	andeq	sl, r0, r8, lsl #16

0000a31c <gpio_set_off>:
}

// set GPIO <pin> off
void gpio_set_off(unsigned pin) {
    a31c:	e92d4008 	push	{r3, lr}
    // implement this
    // use gpio_clr0
    if(pin >= 32) {
    a320:	e350001f 	cmp	r0, #31
    a324:	88bd8008 	pophi	{r3, pc}
    }
    volatile unsigned* gpio_reg = 0x0;
    unsigned bitmask = 0x0;
    
    if (pin <= 31){
        gpio_reg = GPCLR0;
    a328:	959f3020 	ldrls	r3, [pc, #32]	; a350 <gpio_set_off+0x34>
    a32c:	95932020 	ldrls	r2, [r3, #32]
        //bitmask = get32(GPCLR0);
    } else {
        gpio_reg = GPCLR1;
    a330:	859f3018 	ldrhi	r3, [pc, #24]	; a350 <gpio_set_off+0x34>
    a334:	85932024 	ldrhi	r2, [r3, #36]	; 0x24
        //bitmask = get32(GPCLR1);
    }
    
    // Calculate bitmask to preserve values
    bitmask |= 1 << (pin % 32);
    a338:	e200301f 	and	r3, r0, #31
    
    put32(gpio_reg, bitmask);
    a33c:	e1a00002 	mov	r0, r2
    a340:	e3a01001 	mov	r1, #1
    a344:	e1a01311 	lsl	r1, r1, r3
    a348:	ebffff67 	bl	a0ec <put32>
    a34c:	e8bd8008 	pop	{r3, pc}
    a350:	0000a808 	andeq	sl, r0, r8, lsl #16

0000a354 <gpio_set_input>:
}

// Part 2: implement gpio_set_input and gpio_read

// set <pin> to input.
void gpio_set_input(unsigned pin) {
    a354:	e92d4038 	push	{r3, r4, r5, lr}
    a358:	e1a04000 	mov	r4, r0
    // implement.
    if(pin >= 32) {
    a35c:	e350001f 	cmp	r0, #31
    a360:	88bd8038 	pophi	{r3, r4, r5, pc}
        return;
    }
    
    volatile unsigned* gpio_reg;
    
    unsigned reg_select = pin / 10;
    a364:	e59f30ac 	ldr	r3, [pc, #172]	; a418 <gpio_set_input+0xc4>
    a368:	e0832093 	umull	r2, r3, r3, r0
    a36c:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    a370:	e3530005 	cmp	r3, #5
    a374:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    a378:	ea000017 	b	a3dc <gpio_set_input+0x88>
    a37c:	0000a394 	muleq	r0, r4, r3
    a380:	0000a3a0 	andeq	sl, r0, r0, lsr #7
    a384:	0000a3ac 	andeq	sl, r0, ip, lsr #7
    a388:	0000a3b8 			; <UNDEFINED> instruction: 0x0000a3b8
    a38c:	0000a3c4 	andeq	sl, r0, r4, asr #7
    a390:	0000a3d0 	ldrdeq	sl, [r0], -r0
        case 0: {gpio_reg = GPFSEL0; break;}
    a394:	e59f3080 	ldr	r3, [pc, #128]	; a41c <gpio_set_input+0xc8>
    a398:	e5935000 	ldr	r5, [r3]
    a39c:	ea00000f 	b	a3e0 <gpio_set_input+0x8c>
        case 1: {gpio_reg = GPFSEL1; break;}
    a3a0:	e59f3074 	ldr	r3, [pc, #116]	; a41c <gpio_set_input+0xc8>
    a3a4:	e5935004 	ldr	r5, [r3, #4]
    a3a8:	ea00000c 	b	a3e0 <gpio_set_input+0x8c>
        case 2: {gpio_reg = GPFSEL2; break;}
    a3ac:	e59f3068 	ldr	r3, [pc, #104]	; a41c <gpio_set_input+0xc8>
    a3b0:	e5935008 	ldr	r5, [r3, #8]
    a3b4:	ea000009 	b	a3e0 <gpio_set_input+0x8c>
        case 3: {gpio_reg = GPFSEL3; break;}
    a3b8:	e59f305c 	ldr	r3, [pc, #92]	; a41c <gpio_set_input+0xc8>
    a3bc:	e593500c 	ldr	r5, [r3, #12]
    a3c0:	ea000006 	b	a3e0 <gpio_set_input+0x8c>
        case 4: {gpio_reg = GPFSEL4; break;}
    a3c4:	e59f3050 	ldr	r3, [pc, #80]	; a41c <gpio_set_input+0xc8>
    a3c8:	e5935010 	ldr	r5, [r3, #16]
    a3cc:	ea000003 	b	a3e0 <gpio_set_input+0x8c>
        case 5: {gpio_reg = GPFSEL5; break;}
    a3d0:	e59f3044 	ldr	r3, [pc, #68]	; a41c <gpio_set_input+0xc8>
    a3d4:	e5935014 	ldr	r5, [r3, #20]
    a3d8:	ea000000 	b	a3e0 <gpio_set_input+0x8c>
        default: gpio_reg = 0x0;
    a3dc:	e3a05000 	mov	r5, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    a3e0:	e1a00005 	mov	r0, r5
    a3e4:	ebffff4c 	bl	a11c <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    a3e8:	e59f1028 	ldr	r1, [pc, #40]	; a418 <gpio_set_input+0xc4>
    a3ec:	e0813491 	umull	r3, r1, r1, r4
    a3f0:	e1a011a1 	lsr	r1, r1, #3
    a3f4:	e0811101 	add	r1, r1, r1, lsl #2
    a3f8:	e1a01081 	lsl	r1, r1, #1
    a3fc:	e0611004 	rsb	r1, r1, r4
    a400:	e0811081 	add	r1, r1, r1, lsl #1
    a404:	e3a03007 	mov	r3, #7
    a408:	e1c01113 	bic	r1, r0, r3, lsl r1
    put32(gpio_reg, bitmask);
    a40c:	e1a00005 	mov	r0, r5
    a410:	ebffff35 	bl	a0ec <put32>
    a414:	e8bd8038 	pop	{r3, r4, r5, pc}
    a418:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    a41c:	0000a808 	andeq	sl, r0, r8, lsl #16

0000a420 <gpio_read>:
    
    
}

// return the value of <pin>
int gpio_read(unsigned pin) {
    a420:	e92d4010 	push	{r4, lr}
    a424:	e1a04000 	mov	r4, r0
    
    if(pin >= 32) {
    a428:	e350001f 	cmp	r0, #31
    a42c:	8a00000b 	bhi	a460 <gpio_read+0x40>
        return -1;
    }
    
    unsigned v = 0;
    
    if (pin <= 31){
    a430:	8a000003 	bhi	a444 <gpio_read+0x24>
        v = get32(GPLEV0);
    a434:	e59f302c 	ldr	r3, [pc, #44]	; a468 <gpio_read+0x48>
    a438:	e5930028 	ldr	r0, [r3, #40]	; 0x28
    a43c:	ebffff36 	bl	a11c <get32>
    a440:	ea000002 	b	a450 <gpio_read+0x30>
    } else {
        v = get32(GPLEV1);
    a444:	e59f301c 	ldr	r3, [pc, #28]	; a468 <gpio_read+0x48>
    a448:	e593002c 	ldr	r0, [r3, #44]	; 0x2c
    a44c:	ebffff32 	bl	a11c <get32>
    }
    
    return (v & (1 << (pin % 32)));
    a450:	e204401f 	and	r4, r4, #31
    a454:	e3a03001 	mov	r3, #1
    a458:	e0000413 	and	r0, r0, r3, lsl r4
    a45c:	e8bd8010 	pop	{r4, pc}

// return the value of <pin>
int gpio_read(unsigned pin) {
    
    if(pin >= 32) {
        return -1;
    a460:	e3e00000 	mvn	r0, #0
    } else {
        v = get32(GPLEV1);
    }
    
    return (v & (1 << (pin % 32)));
}
    a464:	e8bd8010 	pop	{r4, pc}
    a468:	0000a808 	andeq	sl, r0, r8, lsl #16

0000a46c <gpio_write>:

// set <pin> to <v> (v \in {0,1})
void gpio_write(unsigned pin, unsigned v) {
    a46c:	e92d4008 	push	{r3, lr}
    
    if(pin >= 32) {
    a470:	e350001f 	cmp	r0, #31
    a474:	88bd8008 	pophi	{r3, pc}
        return;
    }
    
    if(v)
    a478:	e3510000 	cmp	r1, #0
    a47c:	0a000001 	beq	a488 <gpio_write+0x1c>
        gpio_set_on(pin);
    a480:	ebffff97 	bl	a2e4 <gpio_set_on>
    a484:	e8bd8008 	pop	{r3, pc}
    else
        gpio_set_off(pin);
    a488:	ebffffa3 	bl	a31c <gpio_set_off>
    a48c:	e8bd8008 	pop	{r3, pc}

0000a490 <gpio_set_function>:
}

void gpio_set_function(unsigned pin, gpio_func_t func) {
    a490:	e92d4070 	push	{r4, r5, r6, lr}
    a494:	e1a04000 	mov	r4, r0
    a498:	e1a05001 	mov	r5, r1
    // implement this
    // use gpio_fsel0
    
    if (pin >= 32 || func >= 8) {
    a49c:	e3510007 	cmp	r1, #7
    a4a0:	9350001f 	cmpls	r0, #31
    a4a4:	88bd8070 	pophi	{r4, r5, r6, pc}
        return;
    }

    volatile unsigned* gpio_reg;
    unsigned reg_select = pin / 10;
    a4a8:	e59f30b0 	ldr	r3, [pc, #176]	; a560 <gpio_set_function+0xd0>
    a4ac:	e0832093 	umull	r2, r3, r3, r0
    a4b0:	e1a031a3 	lsr	r3, r3, #3
    
    // Calculate register bank for selected GPIO pin
    switch (reg_select) {
    a4b4:	e3530005 	cmp	r3, #5
    a4b8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    a4bc:	ea000017 	b	a520 <gpio_set_function+0x90>
    a4c0:	0000a4d8 	ldrdeq	sl, [r0], -r8
    a4c4:	0000a4e4 	andeq	sl, r0, r4, ror #9
    a4c8:	0000a4f0 	strdeq	sl, [r0], -r0
    a4cc:	0000a4fc 	strdeq	sl, [r0], -ip
    a4d0:	0000a508 	andeq	sl, r0, r8, lsl #10
    a4d4:	0000a514 	andeq	sl, r0, r4, lsl r5
        case 0: {gpio_reg = GPFSEL0; break;}
    a4d8:	e59f3084 	ldr	r3, [pc, #132]	; a564 <gpio_set_function+0xd4>
    a4dc:	e5936000 	ldr	r6, [r3]
    a4e0:	ea00000f 	b	a524 <gpio_set_function+0x94>
        case 1: {gpio_reg = GPFSEL1; break;}
    a4e4:	e59f3078 	ldr	r3, [pc, #120]	; a564 <gpio_set_function+0xd4>
    a4e8:	e5936004 	ldr	r6, [r3, #4]
    a4ec:	ea00000c 	b	a524 <gpio_set_function+0x94>
        case 2: {gpio_reg = GPFSEL2; break;}
    a4f0:	e59f306c 	ldr	r3, [pc, #108]	; a564 <gpio_set_function+0xd4>
    a4f4:	e5936008 	ldr	r6, [r3, #8]
    a4f8:	ea000009 	b	a524 <gpio_set_function+0x94>
        case 3: {gpio_reg = GPFSEL3; break;}
    a4fc:	e59f3060 	ldr	r3, [pc, #96]	; a564 <gpio_set_function+0xd4>
    a500:	e593600c 	ldr	r6, [r3, #12]
    a504:	ea000006 	b	a524 <gpio_set_function+0x94>
        case 4: {gpio_reg = GPFSEL4; break;}
    a508:	e59f3054 	ldr	r3, [pc, #84]	; a564 <gpio_set_function+0xd4>
    a50c:	e5936010 	ldr	r6, [r3, #16]
    a510:	ea000003 	b	a524 <gpio_set_function+0x94>
        case 5: {gpio_reg = GPFSEL5; break;}
    a514:	e59f3048 	ldr	r3, [pc, #72]	; a564 <gpio_set_function+0xd4>
    a518:	e5936014 	ldr	r6, [r3, #20]
    a51c:	ea000000 	b	a524 <gpio_set_function+0x94>
        default: gpio_reg = 0x0;
    a520:	e3a06000 	mov	r6, #0
    }
    
    // Calculate bitmask for selected GPIO pin
    unsigned bitmask = get32(gpio_reg);
    a524:	e1a00006 	mov	r0, r6
    a528:	ebfffefb 	bl	a11c <get32>
    bitmask &= ~(0b111 << ((pin % 10) * 3));
    a52c:	e59f302c 	ldr	r3, [pc, #44]	; a560 <gpio_set_function+0xd0>
    a530:	e0832493 	umull	r2, r3, r3, r4
    a534:	e1a031a3 	lsr	r3, r3, #3
    a538:	e0833103 	add	r3, r3, r3, lsl #2
    a53c:	e1a03083 	lsl	r3, r3, #1
    a540:	e0633004 	rsb	r3, r3, r4
    a544:	e0833083 	add	r3, r3, r3, lsl #1
    a548:	e3a01007 	mov	r1, #7
    a54c:	e1c01311 	bic	r1, r0, r1, lsl r3
    bitmask |= (func << ((pin % 10) * 3));
    put32(gpio_reg, bitmask);
    a550:	e1a00006 	mov	r0, r6
    a554:	e1811315 	orr	r1, r1, r5, lsl r3
    a558:	ebfffee3 	bl	a0ec <put32>
    a55c:	e8bd8070 	pop	{r4, r5, r6, pc}
    a560:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    a564:	0000a808 	andeq	sl, r0, r8, lsl #16

0000a568 <is_gpio_int>:
// call this routine (you must implement) to setup the right GPIO event.
// as with setting up functions, you should bitwise-or in the value for the
// pin you are setting with the existing pin values.  (otherwise you will
// lose their configuration).  you also need to enable the right IRQ.   make
// sure to use device barriers!!
int is_gpio_int(unsigned gpio_int) {
    a568:	e92d4008 	push	{r3, lr}
    // assert(gpio_int >= GPIO_INT0 && gpio_int <= GPIO_INT3);

    if(get32(IRQ_PENDING_2) > 0) {
    a56c:	e59f301c 	ldr	r3, [pc, #28]	; a590 <is_gpio_int+0x28>
    a570:	e5930030 	ldr	r0, [r3, #48]	; 0x30
    a574:	ebfffee8 	bl	a11c <get32>
    a578:	e3500000 	cmp	r0, #0
    a57c:	0a000001 	beq	a588 <is_gpio_int+0x20>
        return 1;
    a580:	e3a00001 	mov	r0, #1
    a584:	e8bd8008 	pop	{r3, pc}
    }
    return 0;
    a588:	e3a00000 	mov	r0, #0
}
    a58c:	e8bd8008 	pop	{r3, pc}
    a590:	0000a808 	andeq	sl, r0, r8, lsl #16

0000a594 <gpio_int_rising_edge>:
// p97 set to detect rising edge (0->1) on <pin>.
// as the broadcom doc states, it  detects by sampling based on the clock.
// it looks for "011" (low, hi, hi) to suppress noise.  i.e., its triggered only
// *after* a 1 reading has been sampled twice, so there will be delay.
// if you want lower latency, you should us async rising edge (p99)
void gpio_int_rising_edge(unsigned pin) {
    a594:	e92d4038 	push	{r3, r4, r5, lr}
    a598:	e1a04000 	mov	r4, r0
    
    
    if(pin >= 32) {
    a59c:	e350001f 	cmp	r0, #31
    a5a0:	88bd8038 	pophi	{r3, r4, r5, pc}
        return;
    }
    
    dev_barrier();
    a5a4:	ebfffeca 	bl	a0d4 <dev_barrier>
    if(pin <= 31) {
    a5a8:	e354001f 	cmp	r4, #31
    a5ac:	8a000007 	bhi	a5d0 <gpio_int_rising_edge+0x3c>
        unsigned bitmask = get32(GPREN0);
    a5b0:	e59f505c 	ldr	r5, [pc, #92]	; a614 <gpio_int_rising_edge+0x80>
    a5b4:	e5950034 	ldr	r0, [r5, #52]	; 0x34
    a5b8:	ebfffed7 	bl	a11c <get32>
        bitmask |= 1 << pin;
    a5bc:	e3a01001 	mov	r1, #1
    a5c0:	e1801411 	orr	r1, r0, r1, lsl r4
        put32(GPREN0, bitmask);
    a5c4:	e5950034 	ldr	r0, [r5, #52]	; 0x34
    a5c8:	ebfffec7 	bl	a0ec <put32>
    a5cc:	ea000007 	b	a5f0 <gpio_int_rising_edge+0x5c>
    } else {
        unsigned bitmask = get32(GPREN1);
    a5d0:	e59f503c 	ldr	r5, [pc, #60]	; a614 <gpio_int_rising_edge+0x80>
    a5d4:	e5950038 	ldr	r0, [r5, #56]	; 0x38
    a5d8:	ebfffecf 	bl	a11c <get32>
        bitmask |= 1 << (pin % 32);
    a5dc:	e204401f 	and	r4, r4, #31
    a5e0:	e3a01001 	mov	r1, #1
    a5e4:	e1801411 	orr	r1, r0, r1, lsl r4
        put32(GPREN1, bitmask);
    a5e8:	e5950038 	ldr	r0, [r5, #56]	; 0x38
    a5ec:	ebfffebe 	bl	a0ec <put32>
    }
    dev_barrier();
    a5f0:	ebfffeb7 	bl	a0d4 <dev_barrier>
    unsigned int_mask = get32(ENABLE_IRQS_2);
    a5f4:	e59f4018 	ldr	r4, [pc, #24]	; a614 <gpio_int_rising_edge+0x80>
    a5f8:	e594003c 	ldr	r0, [r4, #60]	; 0x3c
    a5fc:	ebfffec6 	bl	a11c <get32>
    int_mask |= 1 << (49 - 32);
    a600:	e3801802 	orr	r1, r0, #131072	; 0x20000
    put32(ENABLE_IRQS_2, int_mask);
    a604:	e594003c 	ldr	r0, [r4, #60]	; 0x3c
    a608:	ebfffeb7 	bl	a0ec <put32>
    dev_barrier();
    a60c:	ebfffeb0 	bl	a0d4 <dev_barrier>
    a610:	e8bd8038 	pop	{r3, r4, r5, pc}
    a614:	0000a808 	andeq	sl, r0, r8, lsl #16

0000a618 <gpio_int_falling_edge>:
// p98: detect falling edge (1->0).  sampled using the system clock.
// similarly to rising edge detection, it suppresses noise by looking for
// "100" --- i.e., is triggered after two readings of "0" and so the
// interrupt is delayed two clock cycles.   if you want  lower latency,
// you should use async falling edge. (p99)
void gpio_int_falling_edge(unsigned pin) {
    a618:	e92d4038 	push	{r3, r4, r5, lr}
    a61c:	e1a04000 	mov	r4, r0
    
    if(pin >= 32) {
    a620:	e350001f 	cmp	r0, #31
    a624:	88bd8038 	pophi	{r3, r4, r5, pc}
        return;
    }
    
    dev_barrier();
    a628:	ebfffea9 	bl	a0d4 <dev_barrier>
    if(pin <= 31) {
    a62c:	e354001f 	cmp	r4, #31
    a630:	8a000007 	bhi	a654 <gpio_int_falling_edge+0x3c>
        unsigned bitmask = get32(GPFEN0);
    a634:	e59f505c 	ldr	r5, [pc, #92]	; a698 <gpio_int_falling_edge+0x80>
    a638:	e5950040 	ldr	r0, [r5, #64]	; 0x40
    a63c:	ebfffeb6 	bl	a11c <get32>
        bitmask |= 1 << pin;
    a640:	e3a01001 	mov	r1, #1
    a644:	e1801411 	orr	r1, r0, r1, lsl r4
        put32(GPFEN0, bitmask);
    a648:	e5950040 	ldr	r0, [r5, #64]	; 0x40
    a64c:	ebfffea6 	bl	a0ec <put32>
    a650:	ea000007 	b	a674 <gpio_int_falling_edge+0x5c>
    } else {
        unsigned bitmask = get32(GPFEN1);
    a654:	e59f503c 	ldr	r5, [pc, #60]	; a698 <gpio_int_falling_edge+0x80>
    a658:	e5950044 	ldr	r0, [r5, #68]	; 0x44
    a65c:	ebfffeae 	bl	a11c <get32>
        bitmask |= 1 << (pin % 32);
    a660:	e204401f 	and	r4, r4, #31
    a664:	e3a01001 	mov	r1, #1
    a668:	e1801411 	orr	r1, r0, r1, lsl r4
        put32(GPFEN1, bitmask);
    a66c:	e5950044 	ldr	r0, [r5, #68]	; 0x44
    a670:	ebfffe9d 	bl	a0ec <put32>
    }
    dev_barrier();
    a674:	ebfffe96 	bl	a0d4 <dev_barrier>
    unsigned int_mask = get32(ENABLE_IRQS_2);
    a678:	e59f4018 	ldr	r4, [pc, #24]	; a698 <gpio_int_falling_edge+0x80>
    a67c:	e594003c 	ldr	r0, [r4, #60]	; 0x3c
    a680:	ebfffea5 	bl	a11c <get32>
    int_mask |= 1 << (52 -32);
    a684:	e3801601 	orr	r1, r0, #1048576	; 0x100000
    put32(ENABLE_IRQS_2, int_mask);
    a688:	e594003c 	ldr	r0, [r4, #60]	; 0x3c
    a68c:	ebfffe96 	bl	a0ec <put32>
    dev_barrier();
    a690:	ebfffe8f 	bl	a0d4 <dev_barrier>
    a694:	e8bd8038 	pop	{r3, r4, r5, pc}
    a698:	0000a808 	andeq	sl, r0, r8, lsl #16

0000a69c <gpio_event_detected>:
}

// p96: a 1<<pin is set in EVENT_DETECT if <pin> triggered an interrupt.
// if you configure multiple events to lead to interrupts, you will have to
// read the pin to determine which caused it.
int gpio_event_detected(unsigned pin) {
    a69c:	e92d4010 	push	{r4, lr}
    a6a0:	e1a04000 	mov	r4, r0
    if(pin >= 32) {
    a6a4:	e350001f 	cmp	r0, #31
    a6a8:	8a000019 	bhi	a714 <gpio_event_detected+0x78>
        return -1;
    }
    
    dev_barrier();
    a6ac:	ebfffe88 	bl	a0d4 <dev_barrier>
    if(pin <= 31) {
    a6b0:	e354001f 	cmp	r4, #31
    a6b4:	8a000008 	bhi	a6dc <gpio_event_detected+0x40>
        unsigned reg_stat = get32(GPEDS0) & (1 << pin);
    a6b8:	e59f305c 	ldr	r3, [pc, #92]	; a71c <gpio_event_detected+0x80>
    a6bc:	e5930048 	ldr	r0, [r3, #72]	; 0x48
    a6c0:	ebfffe95 	bl	a11c <get32>
        if(reg_stat > 0) {dev_barrier(); return 1;}
    a6c4:	e3a03001 	mov	r3, #1
    a6c8:	e0103413 	ands	r3, r0, r3, lsl r4
    a6cc:	0a00000d 	beq	a708 <gpio_event_detected+0x6c>
    a6d0:	ebfffe7f 	bl	a0d4 <dev_barrier>
    a6d4:	e3a00001 	mov	r0, #1
    a6d8:	e8bd8010 	pop	{r4, pc}
    } else {
        unsigned reg_stat = get32(GPEDS1) & (1 << pin);
    a6dc:	e59f3038 	ldr	r3, [pc, #56]	; a71c <gpio_event_detected+0x80>
    a6e0:	e593004c 	ldr	r0, [r3, #76]	; 0x4c
    a6e4:	ebfffe8c 	bl	a11c <get32>
    a6e8:	e3a03001 	mov	r3, #1
    a6ec:	e0004413 	and	r4, r0, r3, lsl r4
        dev_barrier();
    a6f0:	ebfffe77 	bl	a0d4 <dev_barrier>
        if(reg_stat > 0) {dev_barrier(); return 1;}
    a6f4:	e3540000 	cmp	r4, #0
    a6f8:	0a000002 	beq	a708 <gpio_event_detected+0x6c>
    a6fc:	ebfffe74 	bl	a0d4 <dev_barrier>
    a700:	e3a00001 	mov	r0, #1
    a704:	e8bd8010 	pop	{r4, pc}
    }
    dev_barrier();
    a708:	ebfffe71 	bl	a0d4 <dev_barrier>
    return 0;
    a70c:	e3a00000 	mov	r0, #0
    a710:	e8bd8010 	pop	{r4, pc}
// p96: a 1<<pin is set in EVENT_DETECT if <pin> triggered an interrupt.
// if you configure multiple events to lead to interrupts, you will have to
// read the pin to determine which caused it.
int gpio_event_detected(unsigned pin) {
    if(pin >= 32) {
        return -1;
    a714:	e3e00000 	mvn	r0, #0
        dev_barrier();
        if(reg_stat > 0) {dev_barrier(); return 1;}
    }
    dev_barrier();
    return 0;
}
    a718:	e8bd8010 	pop	{r4, pc}
    a71c:	0000a808 	andeq	sl, r0, r8, lsl #16

0000a720 <gpio_event_clear>:

// p96: have to write a 1 to the pin to clear the event.
void gpio_event_clear(unsigned pin) {
    a720:	e92d4010 	push	{r4, lr}
    a724:	e1a04000 	mov	r4, r0
    
    if(pin >= 32) {
    a728:	e350001f 	cmp	r0, #31
    a72c:	88bd8010 	pophi	{r4, pc}
        return;
    }
    
    dev_barrier();
    a730:	ebfffe67 	bl	a0d4 <dev_barrier>
    if(pin <= 31) {
    a734:	e354001f 	cmp	r4, #31
    a738:	8a000005 	bhi	a754 <gpio_event_clear+0x34>
        put32(GPEDS0, 1 << pin);
    a73c:	e59f3030 	ldr	r3, [pc, #48]	; a774 <gpio_event_clear+0x54>
    a740:	e5930048 	ldr	r0, [r3, #72]	; 0x48
    a744:	e3a01001 	mov	r1, #1
    a748:	e1a01411 	lsl	r1, r1, r4
    a74c:	ebfffe66 	bl	a0ec <put32>
    a750:	ea000005 	b	a76c <gpio_event_clear+0x4c>
    } else {
        put32(GPEDS1, 1 << (pin % 32));
    a754:	e204401f 	and	r4, r4, #31
    a758:	e59f3014 	ldr	r3, [pc, #20]	; a774 <gpio_event_clear+0x54>
    a75c:	e593004c 	ldr	r0, [r3, #76]	; 0x4c
    a760:	e3a01001 	mov	r1, #1
    a764:	e1a01411 	lsl	r1, r1, r4
    a768:	ebfffe5f 	bl	a0ec <put32>
    }
    dev_barrier();
    a76c:	ebfffe58 	bl	a0d4 <dev_barrier>
    a770:	e8bd8010 	pop	{r4, pc}
    a774:	0000a808 	andeq	sl, r0, r8, lsl #16

0000a778 <cb_new>:
// trivial routines to access control block.
#include "rpi.h"
#include "control-block.h"

control_blk_t *cb_new(void) {
    a778:	e92d4008 	push	{r3, lr}
    control_blk_t *c = CTRL_BLK_ADDR;
    memset(c, 0, sizeof c);
    a77c:	e3a00409 	mov	r0, #150994944	; 0x9000000
    a780:	e3a01000 	mov	r1, #0
    a784:	e3a02004 	mov	r2, #4
    a788:	ebfff976 	bl	8d68 <memset>
    c->magic = CTRL_BLK_MAGIC;
    a78c:	e3a00409 	mov	r0, #150994944	; 0x9000000
    a790:	e59f3004 	ldr	r3, [pc, #4]	; a79c <cb_new+0x24>
    a794:	e5803000 	str	r3, [r0]
    return c;
}
    a798:	e8bd8008 	pop	{r3, pc}
    a79c:	12345678 	eorsne	r5, r4, #120, 12	; 0x7800000

0000a7a0 <cb_get_block>:

control_blk_t *cb_get_block(void) {
    control_blk_t *c = CTRL_BLK_ADDR;
    if(c->magic != CTRL_BLK_MAGIC)
    a7a0:	e3a03409 	mov	r3, #150994944	; 0x9000000
    a7a4:	e5932000 	ldr	r2, [r3]
    a7a8:	e59f3014 	ldr	r3, [pc, #20]	; a7c4 <cb_get_block+0x24>
    a7ac:	e1520003 	cmp	r2, r3
    a7b0:	0a000001 	beq	a7bc <cb_get_block+0x1c>
        return 0;
    a7b4:	e3a00000 	mov	r0, #0
    a7b8:	e12fff1e 	bx	lr
    return c;
    a7bc:	e3a00409 	mov	r0, #150994944	; 0x9000000
}
    a7c0:	e12fff1e 	bx	lr
    a7c4:	12345678 	eorsne	r5, r4, #120, 12	; 0x7800000

Disassembly of section .data:

0000a7c8 <tid>:
    a7c8:	00000001 	andeq	r0, r0, r1

0000a7cc <rpi_putchar>:
    a7cc:	00008de0 	andeq	r8, r0, r0, ror #27

0000a7d0 <putk>:
    a7d0:	00008e1c 	andeq	r8, r0, ip, lsl lr

0000a7d4 <AUX_ENABLES>:
    a7d4:	20215004 	eorcs	r5, r1, r4

0000a7d8 <AUX_MU_CNTL_REG>:
    a7d8:	20215060 	eorcs	r5, r1, r0, rrx

0000a7dc <AUX_MU_IER_REG>:
    a7dc:	20215044 	eorcs	r5, r1, r4, asr #32

0000a7e0 <AUX_MU_IIR_REG>:
    a7e0:	20215048 	eorcs	r5, r1, r8, asr #32

0000a7e4 <AUX_MU_LCR_REG>:
    a7e4:	2021504c 	eorcs	r5, r1, ip, asr #32

0000a7e8 <AUX_MU_BAUD_REG>:
    a7e8:	20215068 	eorcs	r5, r1, r8, rrx

0000a7ec <AUX_MU_LSR_REG>:
    a7ec:	20215054 	eorcs	r5, r1, r4, asr r0

0000a7f0 <AUX_MU_IO_REG>:
    a7f0:	20215040 	eorcs	r5, r1, r0, asr #32

0000a7f4 <AUX_MU_STAT_REG>:
    a7f4:	20215064 	eorcs	r5, r1, r4, rrx

0000a7f8 <AUX_MU_SCRATCH>:
    a7f8:	2021505c 	eorcs	r5, r1, ip, asr r0

0000a7fc <AUX_MU_MSR_REG>:
    a7fc:	20215058 	eorcs	r5, r1, r8, asr r0

0000a800 <AUX_MU_MCR_REG>:
    a800:	20215050 	eorcs	r5, r1, r0, asr r0

0000a804 <AUX_IRQ>:
    a804:	20215000 	eorcs	r5, r1, r0

0000a808 <GPFSEL0>:
    a808:	20200000 	eorcs	r0, r0, r0

0000a80c <GPFSEL1>:
    a80c:	20200004 	eorcs	r0, r0, r4

0000a810 <GPFSEL2>:
    a810:	20200008 	eorcs	r0, r0, r8

0000a814 <GPFSEL3>:
    a814:	2020000c 	eorcs	r0, r0, ip

0000a818 <GPFSEL4>:
    a818:	20200010 	eorcs	r0, r0, r0, lsl r0

0000a81c <GPFSEL5>:
    a81c:	20200014 	eorcs	r0, r0, r4, lsl r0

0000a820 <GPSET0>:
    a820:	2020001c 	eorcs	r0, r0, ip, lsl r0

0000a824 <GPSET1>:
    a824:	20200020 	eorcs	r0, r0, r0, lsr #32

0000a828 <GPCLR0>:
    a828:	20200028 	eorcs	r0, r0, r8, lsr #32

0000a82c <GPCLR1>:
    a82c:	2020002c 	eorcs	r0, r0, ip, lsr #32

0000a830 <GPLEV0>:
    a830:	20200034 	eorcs	r0, r0, r4, lsr r0

0000a834 <GPLEV1>:
    a834:	20200038 	eorcs	r0, r0, r8, lsr r0

0000a838 <IRQ_PENDING_2>:
    a838:	2000b208 	andcs	fp, r0, r8, lsl #4

0000a83c <GPREN0>:
    a83c:	2020004c 	eorcs	r0, r0, ip, asr #32

0000a840 <GPREN1>:
    a840:	20200050 	eorcs	r0, r0, r0, asr r0

0000a844 <ENABLE_IRQS_2>:
    a844:	2000b214 	andcs	fp, r0, r4, lsl r2

0000a848 <GPFEN0>:
    a848:	20200058 	eorcs	r0, r0, r8, asr r0

0000a84c <GPFEN1>:
    a84c:	2020005c 	eorcs	r0, r0, ip, asr r0

0000a850 <GPEDS0>:
    a850:	20200040 	eorcs	r0, r0, r0, asr #32

0000a854 <GPEDS1>:
    a854:	20200044 	eorcs	r0, r0, r4, asr #32

0000a858 <IRQ_PENDING_1>:
    a858:	2000b204 	andcs	fp, r0, r4, lsl #4

0000a85c <gpio_clr0>:
    a85c:	20200028 	eorcs	r0, r0, r8, lsr #32

0000a860 <gpio_set0>:
    a860:	2020001c 	eorcs	r0, r0, ip, lsl r0

0000a864 <gpio_fsel0>:
    a864:	20200000 	eorcs	r0, r0, r0

Disassembly of section .rodata:

0000a868 <__FUNCTION__.4256>:
    a868:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
    a86c:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
    a870:	0065646f 	rsbeq	r6, r5, pc, ror #8
    a874:	74206e69 	strtvc	r6, [r0], #-3689	; 0xe69
    a878:	61657268 	cmnvs	r5, r8, ror #4
    a87c:	70252064 	eorvc	r2, r5, r4, rrx
    a880:	6977202c 	ldmdbvs	r7!, {r2, r3, r5, sp}^
    a884:	25206874 	strcs	r6, [r0, #-2164]!	; 0x874
    a888:	00000a78 	andeq	r0, r0, r8, ror sl
    a88c:	4f525245 	svcmi	0x00525245
    a890:	73253a52 	teqvc	r5, #335872	; 0x52000
    a894:	3a73253a 	bcc	1cd3d84 <__bss_end__+0x1cc8664>
    a898:	203a6425 	eorscs	r6, sl, r5, lsr #8
    a89c:	534c4146 	movtpl	r4, #49478	; 0xc146
    a8a0:	723c2845 	eorsvc	r2, ip, #4521984	; 0x450000
    a8a4:	635f6970 	cmpvs	pc, #112, 18	; 0x1c0000
    a8a8:	745f7275 	ldrbvc	r7, [pc], #-629	; a8b0 <__FUNCTION__.4256+0x48>
    a8ac:	61657268 	cmnvs	r5, r8, ror #4
    a8b0:	72705f64 	rsbsvc	r5, r0, #100, 30	; 0x190
    a8b4:	706d6565 	rsbvc	r6, sp, r5, ror #10
    a8b8:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0x974
    a8bc:	3e2d2928 	cdpcc	9, 2, cr2, cr13, cr8, {1}
    a8c0:	20646974 	rsbcs	r6, r4, r4, ror r9
    a8c4:	2a203d3d 	bcs	819dc0 <__bss_end__+0x80e6a0>
    a8c8:	3e312b78 	vmovcc.s16	r2, d1[3]
    a8cc:	22203a29 	eorcs	r3, r0, #167936	; 0x29000
    a8d0:	65707865 	ldrbvs	r7, [r0, #-2149]!	; 0x865
    a8d4:	64657463 	strbtvs	r7, [r5], #-1123	; 0x463
    a8d8:	2c642520 	cfstr64cs	mvdx2, [r4], #-128	; 0xffffff80
    a8dc:	76616820 	strbtvc	r6, [r1], -r0, lsr #16
    a8e0:	64252065 	strtvs	r2, [r5], #-101	; 0x65
    a8e4:	0a226e5c 	beq	8a625c <__bss_end__+0x89ab3c>
    a8e8:	00000000 	andeq	r0, r0, r0
    a8ec:	65742d37 	ldrbvs	r2, [r4, #-3383]!	; 0xd37
    a8f0:	702d7473 	eorvc	r7, sp, r3, ror r4
    a8f4:	6d656572 	cfstr64vs	mvdx6, [r5, #-456]!	; 0xfffffe38
    a8f8:	76697470 			; <UNDEFINED> instruction: 0x76697470
    a8fc:	68742d65 	ldmdavs	r4!, {r0, r2, r5, r6, r8, sl, fp, sp}^
    a900:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
    a904:	0000632e 	andeq	r6, r0, lr, lsr #6
    a908:	3c206e69 	stccc	14, cr6, [r0], #-420	; 0xfffffe5c
    a90c:	0a3e7825 	beq	fa89a8 <__bss_end__+0xf9d288>
    a910:	00000000 	andeq	r0, r0, r0
    a914:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    a918:	6574202d 	ldrbvs	r2, [r4, #-45]!	; 0x2d
    a91c:	6e697473 	mcrvs	4, 3, r7, cr9, cr3, {3}
    a920:	72702067 	rsbsvc	r2, r0, #103	; 0x67
    a924:	746d6565 	strbtvc	r6, [sp], #-1381	; 0x565
    a928:	20657669 	rsbcs	r7, r5, r9, ror #12
    a92c:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
    a930:	20736461 	rsbscs	r6, r3, r1, ror #8
    a934:	2d2d2d2d 	stccs	13, cr2, [sp, #-180]!	; 0xffffff4c
    a938:	000a0a2d 	andeq	r0, sl, sp, lsr #20
    a93c:	756f6261 	strbvc	r6, [pc, #-609]!	; a6e3 <gpio_event_detected+0x47>
    a940:	6f742074 	svcvs	0x00742074
    a944:	61747320 	cmnvs	r4, r0, lsr #6
    a948:	000a7472 	andeq	r7, sl, r2, ror r4
    a94c:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    a950:	203d2074 	eorscs	r2, sp, r4, ror r0
    a954:	202c6425 	eorcs	r6, ip, r5, lsr #8
    a958:	3d6d7573 	cfstr64cc	mvdx7, [sp, #-460]!	; 0xfffffe34
    a95c:	000a6425 	andeq	r6, sl, r5, lsr #8
    a960:	43435553 	movtmi	r5, #13651	; 0x3553
    a964:	21535345 	cmpcs	r3, r5, asr #6
    a968:	0000000a 	andeq	r0, r0, sl

0000a96c <__FUNCTION__.4266>:
    a96c:	6d655f51 	stclvs	15, cr5, [r5, #-324]!	; 0xfffffebc
    a970:	00797470 	rsbseq	r7, r9, r0, ror r4

0000a974 <__FUNCTION__.4270>:
    a974:	6f705f51 	svcvs	0x00705f51
    a978:	00000070 	andeq	r0, r0, r0, ror r0

0000a97c <__FUNCTION__.4298>:
    a97c:	615f6874 	cmpvs	pc, r4, ror r8	; <UNPREDICTABLE>
    a980:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    a984:	00000000 	andeq	r0, r0, r0

0000a988 <__FUNCTION__.4330>:
    a988:	5f697072 	svcpl	0x00697072
    a98c:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    a990:	68635f6b 	stmdavs	r3!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    a994:	5f6b6365 	svcpl	0x006b6365
    a998:	65657270 	strbvs	r7, [r5, #-624]!	; 0x270
    a99c:	6974706d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    a9a0:	00006576 	andeq	r6, r0, r6, ror r5

0000a9a4 <__FUNCTION__.4346>:
    a9a4:	5f697072 	svcpl	0x00697072
    a9a8:	63617865 	cmnvs	r1, #6619136	; 0x650000
    a9ac:	6c735f74 	ldclvs	15, cr5, [r3], #-464	; 0xfffffe30
    a9b0:	5f706565 	svcpl	0x00706565
    a9b4:	65657270 	strbvs	r7, [r5, #-624]!	; 0x270
    a9b8:	6974706d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    a9bc:	00006576 	andeq	r6, r0, r6, ror r5
    a9c0:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    a9c4:	73253a43 	teqvc	r5, #274432	; 0x43000
    a9c8:	3a73253a 	bcc	1cd3eb8 <__bss_end__+0x1cc8798>
    a9cc:	513a6425 	teqpl	sl, r5, lsr #8
    a9d0:	6c656e5f 	stclvs	14, cr6, [r5], #-380	; 0xfffffe84
    a9d4:	71286d65 	teqvc	r8, r5, ror #26
    a9d8:	3d3d2029 	ldccc	0, cr2, [sp, #-164]!	; 0xffffff5c
    a9dc:	000a3020 	andeq	r3, sl, r0, lsr #32
    a9e0:	00682e51 	rsbeq	r2, r8, r1, asr lr
    a9e4:	4f525245 	svcmi	0x00525245
    a9e8:	73253a52 	teqvc	r5, #335872	; 0x52000
    a9ec:	3a73253a 	bcc	1cd3edc <__bss_end__+0x1cc87bc>
    a9f0:	203a6425 	eorscs	r6, sl, r5, lsr #8
    a9f4:	534c4146 	movtpl	r4, #49478	; 0xc146
    a9f8:	213c2845 	teqcs	ip, r5, asr #16
    a9fc:	743e2d71 	ldrtvc	r2, [lr], #-3441	; 0xd71
    aa00:	3e6c6961 	cdpcc	9, 6, cr6, cr12, cr1, {3}
    aa04:	69203a29 	stmdbvs	r0!, {r0, r3, r5, r9, fp, ip, sp}
    aa08:	6c61766e 	stclvs	6, cr7, [r1], #-440	; 0xfffffe48
    aa0c:	51206469 	teqpl	r0, r9, ror #8
    aa10:	0000000a 	andeq	r0, r0, sl
    aa14:	4f525245 	svcmi	0x00525245
    aa18:	73253a52 	teqvc	r5, #335872	; 0x52000
    aa1c:	3a73253a 	bcc	1cd3f0c <__bss_end__+0x1cc87ec>
    aa20:	203a6425 	eorscs	r6, sl, r5, lsr #8
    aa24:	534c4146 	movtpl	r4, #49478	; 0xc146
    aa28:	713c2845 	teqvc	ip, r5, asr #16
    aa2c:	203a293e 	eorscs	r2, sl, lr, lsr r9
    aa30:	20646162 	rsbcs	r6, r4, r2, ror #2
    aa34:	75706e69 	ldrbvc	r6, [r0, #-3689]!	; 0xe69
    aa38:	00000a74 	andeq	r0, r0, r4, ror sl
    aa3c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    aa40:	73253a43 	teqvc	r5, #274432	; 0x43000
    aa44:	3a73253a 	bcc	1cd3f34 <__bss_end__+0x1cc8814>
    aa48:	513a6425 	teqpl	sl, r5, lsr #8
    aa4c:	706d655f 	rsbvc	r6, sp, pc, asr r5
    aa50:	71287974 	teqvc	r8, r4, ror r9
    aa54:	00000a29 	andeq	r0, r0, r9, lsr #20
    aa58:	4f525245 	svcmi	0x00525245
    aa5c:	73253a52 	teqvc	r5, #335872	; 0x52000
    aa60:	3a73253a 	bcc	1cd3f50 <__bss_end__+0x1cc8830>
    aa64:	203a6425 	eorscs	r6, sl, r5, lsr #8
    aa68:	534c4146 	movtpl	r4, #49478	; 0xc146
    aa6c:	283c2845 	ldmdacs	ip!, {r0, r2, r6, fp, sp}
    aa70:	6e752828 	cdpvs	8, 7, cr2, cr5, cr8, {1}
    aa74:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
    aa78:	28296465 	stmdacs	r9!, {r0, r2, r5, r6, sl, sp, lr}
    aa7c:	3e2d7426 	cdpcc	4, 2, cr7, cr13, cr6, {1}
    aa80:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    aa84:	5d305b6b 	fldmdbxpl	r0!, {d5-d57}	;@ Deprecated
    aa88:	28252929 	stmdacs	r5!, {r0, r3, r5, r8, fp, sp}
    aa8c:	3d202938 	stccc	9, cr2, [r0, #-224]!	; 0xffffff20
    aa90:	2930203d 	ldmdbcs	r0!, {r0, r2, r3, r4, r5, sp}
    aa94:	203a293e 	eorscs	r2, sl, lr, lsr r9
    aa98:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    aa9c:	756d206b 	strbvc	r2, [sp, #-107]!	; 0x6b
    aaa0:	62207473 	eorvs	r7, r0, #1929379840	; 0x73000000
    aaa4:	2d382065 	ldccs	0, cr2, [r8, #-404]!	; 0xfffffe6c
    aaa8:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
    aaac:	696c6120 	stmdbvs	ip!, {r5, r8, sp, lr}^
    aab0:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
    aab4:	00000a21 	andeq	r0, r0, r1, lsr #20
    aab8:	2d697072 	stclcs	0, cr7, [r9, #-456]!	; 0xfffffe38
    aabc:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
    aac0:	632e6461 	teqvs	lr, #1627389952	; 0x61000000
    aac4:	00000000 	andeq	r0, r0, r0
    aac8:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    aacc:	73253a43 	teqvc	r5, #274432	; 0x43000
    aad0:	3a73253a 	bcc	1cd3fc0 <__bss_end__+0x1cc88a0>
    aad4:	693a6425 	ldmdbvs	sl!, {r0, r2, r5, sl, sp, lr}
    aad8:	656c706d 	strbvs	r7, [ip, #-109]!	; 0x6d
    aadc:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
    aae0:	69687420 	stmdbvs	r8!, {r5, sl, ip, sp, lr}^
    aae4:	75662073 	strbvc	r2, [r6, #-115]!	; 0x73
    aae8:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    aaec:	0a216e6f 	beq	8664b0 <__bss_end__+0x85ad90>
    aaf0:	0000000a 	andeq	r0, r0, sl

0000aaf4 <__FUNCTION__.4245>:
    aaf4:	705f7163 	subsvc	r7, pc, r3, ror #2
    aaf8:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    aafc:	00000000 	andeq	r0, r0, r0

0000ab00 <__FUNCTION__.4249>:
    ab00:	6f5f7163 	svcvs	0x005f7163
    ab04:	0000006b 	andeq	r0, r0, fp, rrx

0000ab08 <__FUNCTION__.4254>:
    ab08:	695f7163 	ldmdbvs	pc, {r0, r1, r5, r6, r8, ip, sp, lr}^	; <UNPREDICTABLE>
    ab0c:	0074696e 	rsbseq	r6, r4, lr, ror #18

0000ab10 <__FUNCTION__.4268>:
    ab10:	705f7163 	subsvc	r7, pc, r3, ror #2
    ab14:	5f6b6565 	svcpl	0x006b6565
    ab18:	0000006e 	andeq	r0, r0, lr, rrx

0000ab1c <__FUNCTION__.4293>:
    ab1c:	705f7163 	subsvc	r7, pc, r3, ror #2
    ab20:	5f687375 	svcpl	0x00687375
    ab24:	0000006e 	andeq	r0, r0, lr, rrx
    ab28:	253a7325 	ldrcs	r7, [sl, #-805]!	; 0x325
    ab2c:	64253a73 	strtvs	r3, [r5], #-2675	; 0xa73
    ab30:	2071633a 	rsbscs	r6, r1, sl, lsr r3
    ab34:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    ab38:	68203a74 	stmdavs	r0!, {r2, r4, r5, r6, r9, fp, ip, sp}
    ab3c:	3d646165 	stfcce	f6, [r4, #-404]!	; 0xfffffe6c
    ab40:	202c6425 	eorcs	r6, ip, r5, lsr #8
    ab44:	6c696174 	stfvse	f6, [r9], #-464	; 0xfffffe30
    ab48:	2c64253d 	cfstr64cs	mvdx2, [r4], #-244	; 0xffffff0c
    ab4c:	6c656e20 	stclvs	14, cr6, [r5], #-128	; 0xffffff80
    ab50:	253d6d65 	ldrcs	r6, [sp, #-3429]!	; 0xd65
    ab54:	65202c64 	strvs	r2, [r0, #-3172]!	; 0xc64
    ab58:	7974706d 	ldmdbvc	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    ab5c:	0a64253d 	beq	1914058 <__bss_end__+0x1908938>
    ab60:	00000000 	andeq	r0, r0, r0
    ab64:	63726963 	cmnvs	r2, #1622016	; 0x18c000
    ab68:	72616c75 	rsbvc	r6, r1, #29952	; 0x7500
    ab6c:	0000632e 	andeq	r6, r0, lr, lsr #6
    ab70:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    ab74:	73253a43 	teqvc	r5, #274432	; 0x43000
    ab78:	3a73253a 	bcc	1cd4068 <__bss_end__+0x1cc8948>
    ab7c:	663a6425 	ldrtvs	r6, [sl], -r5, lsr #8
    ab80:	65636e65 	strbvs	r6, [r3, #-3685]!	; 0xe65
    ab84:	20736920 	rsbscs	r6, r3, r0, lsr #18
    ab88:	72726f63 	rsbsvc	r6, r2, #396	; 0x18c
    ab8c:	65747075 	ldrbvs	r7, [r4, #-117]!	; 0x75
    ab90:	000a0a64 	andeq	r0, sl, r4, ror #20
    ab94:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    ab98:	73253a43 	teqvc	r5, #274432	; 0x43000
    ab9c:	3a73253a 	bcc	1cd408c <__bss_end__+0x1cc896c>
    aba0:	633a6425 	teqvs	sl, #620756992	; 0x25000000
    aba4:	6d655f71 	stclvs	15, cr5, [r5, #-452]!	; 0xfffffe3c
    aba8:	28797470 	ldmdacs	r9!, {r4, r5, r6, sl, ip, sp, lr}^
    abac:	000a2963 	andeq	r2, sl, r3, ror #18
    abb0:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    abb4:	73253a43 	teqvc	r5, #274432	; 0x43000
    abb8:	3a73253a 	bcc	1cd40a8 <__bss_end__+0x1cc8988>
    abbc:	213a6425 	teqcs	sl, r5, lsr #8
    abc0:	665f7163 	ldrbvs	r7, [pc], -r3, ror #2
    abc4:	286c6c75 	stmdacs	ip!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    abc8:	000a2963 	andeq	r2, sl, r3, ror #18
    abcc:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    abd0:	73253a43 	teqvc	r5, #274432	; 0x43000
    abd4:	3a73253a 	bcc	1cd40c4 <__bss_end__+0x1cc89a4>
    abd8:	633a6425 	teqvs	sl, #620756992	; 0x25000000
    abdc:	656e5f71 	strbvs	r5, [lr, #-3953]!	; 0xf71
    abe0:	286d656c 	stmdacs	sp!, {r2, r3, r5, r6, r8, sl, sp, lr}^
    abe4:	3d202963 	stccc	9, cr2, [r0, #-396]!	; 0xfffffe74
    abe8:	0a30203d 	beq	c12ce4 <__bss_end__+0xc075c4>
    abec:	00000000 	andeq	r0, r0, r0
    abf0:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    abf4:	73253a43 	teqvc	r5, #274432	; 0x43000
    abf8:	3a73253a 	bcc	1cd40e8 <__bss_end__+0x1cc89c8>
    abfc:	633a6425 	teqvs	sl, #620756992	; 0x25000000
    ac00:	6f705f71 	svcvs	0x00705f71
    ac04:	6f6e5f70 	svcvs	0x006e5f70
    ac08:	6f6c626e 	svcvs	0x006c626e
    ac0c:	63286b63 	teqvs	r8, #101376	; 0x18c00
    ac10:	2965262c 	stmdbcs	r5!, {r2, r3, r5, r9, sl, sp}^
    ac14:	203d3d20 	eorscs	r3, sp, r0, lsr #26
    ac18:	26262030 			; <UNDEFINED> instruction: 0x26262030
    ac1c:	3d206520 	cfstr32cc	mvfx6, [r0, #-128]!	; 0xffffff80
    ac20:	7830203d 	ldmdavc	r0!, {r0, r2, r3, r4, r5, sp}
    ac24:	000a3231 	andeq	r3, sl, r1, lsr r2
    ac28:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    ac2c:	73253a43 	teqvc	r5, #274432	; 0x43000
    ac30:	3a73253a 	bcc	1cd4120 <__bss_end__+0x1cc8a00>
    ac34:	733a6425 	teqvc	sl, #620756992	; 0x25000000
    ac38:	3d3d207a 	ldccc	0, cr2, [sp, #-488]!	; 0xfffffe18
    ac3c:	5f716320 	svcpl	0x00716320
    ac40:	656c656e 	strbvs	r6, [ip, #-1390]!	; 0x56e
    ac44:	2963286d 	stmdbcs	r3!, {r0, r2, r3, r5, r6, fp, sp}^
    ac48:	0000000a 	andeq	r0, r0, sl
    ac4c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    ac50:	73253a43 	teqvc	r5, #274432	; 0x43000
    ac54:	3a73253a 	bcc	1cd4144 <__bss_end__+0x1cc8a24>
    ac58:	6e3a6425 	cdpvs	4, 3, cr6, cr10, cr5, {1}
    ac5c:	6820746f 	stmdavs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
    ac60:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    ac64:	20676e69 	rsbcs	r6, r7, r9, ror #28
    ac68:	73696874 	cmnvc	r9, #116, 16	; 0x740000
    ac6c:	00000a0a 	andeq	r0, r0, sl, lsl #20
    ac70:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    ac74:	73253a43 	teqvc	r5, #274432	; 0x43000
    ac78:	3a73253a 	bcc	1cd4168 <__bss_end__+0x1cc8a48>
    ac7c:	213a6425 	teqcs	sl, r5, lsr #8
    ac80:	655f7163 	ldrbvs	r7, [pc, #-355]	; ab25 <__FUNCTION__.4293+0x9>
    ac84:	7974706d 	ldmdbvc	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    ac88:	0a296328 	beq	a63930 <__bss_end__+0xa58210>
    ac8c:	00000000 	andeq	r0, r0, r0

0000ac90 <__FUNCTION__.4228>:
    ac90:	74696d65 	strbtvc	r6, [r9], #-3429	; 0xd65
    ac94:	00000000 	andeq	r0, r0, r0

0000ac98 <__FUNCTION__.4176>:
    ac98:	5f697072 	svcpl	0x00697072
    ac9c:	5f746573 	svcpl	0x00746573
    aca0:	7074756f 	rsbsvc	r7, r4, pc, ror #10
    aca4:	00007475 	andeq	r7, r0, r5, ror r4

0000aca8 <__FUNCTION__.4250>:
    aca8:	705f6176 	subsvc	r6, pc, r6, ror r1	; <UNPREDICTABLE>
    acac:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    acb0:	0000006b 	andeq	r0, r0, fp, rrx
    acb4:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    acb8:	73253a43 	teqvc	r5, #274432	; 0x43000
    acbc:	3a73253a 	bcc	1cd41ac <__bss_end__+0x1cc8a8c>
    acc0:	303a6425 	eorscc	r6, sl, r5, lsr #8
    acc4:	0000000a 	andeq	r0, r0, sl
    acc8:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    accc:	2d61762f 	stclcs	6, cr7, [r1, #-188]!	; 0xffffff44
    acd0:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    acd4:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
    acd8:	00000000 	andeq	r0, r0, r0
    acdc:	33323130 	teqcc	r2, #48, 2
    ace0:	37363534 			; <UNDEFINED> instruction: 0x37363534
    ace4:	00003938 	andeq	r3, r0, r8, lsr r9
    ace8:	33323130 	teqcc	r2, #48, 2
    acec:	37363534 			; <UNDEFINED> instruction: 0x37363534
    acf0:	62613938 	rsbvs	r3, r1, #56, 18	; 0xe0000
    acf4:	66656463 	strbtvs	r6, [r5], -r3, ror #8
    acf8:	00000000 	andeq	r0, r0, r0
    acfc:	00003130 	andeq	r3, r0, r0, lsr r1
    ad00:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    ad04:	73253a43 	teqvc	r5, #274432	; 0x43000
    ad08:	3a73253a 	bcc	1cd41f8 <__bss_end__+0x1cc8ad8>
    ad0c:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    ad10:	5f637475 	svcpl	0x00637475
    ad14:	000a7066 	andeq	r7, sl, r6, rrx
    ad18:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    ad1c:	73253a43 	teqvc	r5, #274432	; 0x43000
    ad20:	3a73253a 	bcc	1cd4210 <__bss_end__+0x1cc8af0>
    ad24:	773a6425 	ldrvc	r6, [sl, -r5, lsr #8]!
    ad28:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
    ad2c:	33203c20 	teqcc	r0, #32, 24	; 0x2000
    ad30:	00000a32 	andeq	r0, r0, r2, lsr sl
    ad34:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    ad38:	73253a43 	teqvc	r5, #274432	; 0x43000
    ad3c:	3a73253a 	bcc	1cd422c <__bss_end__+0x1cc8b0c>
    ad40:	663a6425 	ldrtvs	r6, [sl], -r5, lsr #8
    ad44:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xf6c
    ad48:	746f6e20 	strbtvc	r6, [pc], #-3616	; ad50 <__FUNCTION__.4250+0xa8>
    ad4c:	616e6520 	cmnvs	lr, r0, lsr #10
    ad50:	64656c62 	strbtvs	r6, [r5], #-3170	; 0xc62
    ad54:	0a212121 	beq	8531e0 <__bss_end__+0x847ac0>
    ad58:	00000000 	andeq	r0, r0, r0
    ad5c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    ad60:	73253a43 	teqvc	r5, #274432	; 0x43000
    ad64:	3a73253a 	bcc	1cd4254 <__bss_end__+0x1cc8b34>
    ad68:	703a6425 	eorsvc	r6, sl, r5, lsr #8
    ad6c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    ad70:	6e203a6b 	vnmulvs.f32	s6, s0, s23
    ad74:	6820746f 	stmdavs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
    ad78:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    ad7c:	20676e69 	rsbcs	r6, r7, r9, ror #28
    ad80:	63657073 	cmnvs	r5, #115	; 0x73
    ad84:	65696669 	strbvs	r6, [r9, #-1641]!	; 0x669
    ad88:	25272072 	strcs	r2, [r7, #-114]!	; 0x72
    ad8c:	0a0a2763 	beq	294b20 <__bss_end__+0x289400>
    ad90:	00000000 	andeq	r0, r0, r0
    ad94:	454e4f44 	strbmi	r4, [lr, #-3908]	; 0xf44
    ad98:	0a212121 	beq	853224 <__bss_end__+0x847b04>
    ad9c:	00000000 	andeq	r0, r0, r0
    ada0:	756f6261 	strbvc	r6, [pc, #-609]!	; ab47 <__FUNCTION__.4293+0x2b>
    ada4:	6f742074 	svcvs	0x00742074
    ada8:	69727020 	ldmdbvs	r2!, {r5, ip, sp, lr}^
    adac:	6f20746e 	svcvs	0x0020746e
    adb0:	6572206e 	ldrbvs	r2, [r2, #-110]!	; 0x6e
    adb4:	616c7567 	cmnvs	ip, r7, ror #10
    adb8:	72702072 	rsbsvc	r2, r0, #114	; 0x72
    adbc:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
    adc0:	0000000a 	andeq	r0, r0, sl
    adc4:	63637573 	cmnvs	r3, #482344960	; 0x1cc00000
    adc8:	21737365 	cmncs	r3, r5, ror #6
    adcc:	0000000a 	andeq	r0, r0, sl

0000add0 <__FUNCTION__.4172>:
    add0:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    add4:	00636f6c 	rsbeq	r6, r3, ip, ror #30

0000add8 <__FUNCTION__.4179>:
    add8:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    addc:	5f636f6c 	svcpl	0x00636f6c
    ade0:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    ade4:	0064656e 	rsbeq	r6, r4, lr, ror #10

0000ade8 <__FUNCTION__.4184>:
    ade8:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    adec:	5f636f6c 	svcpl	0x00636f6c
    adf0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    adf4:	00000000 	andeq	r0, r0, r0

0000adf8 <__FUNCTION__.4194>:
    adf8:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
    adfc:	5f636f6c 	svcpl	0x00636f6c
    ae00:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    ae04:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
    ae08:	6174735f 	cmnvs	r4, pc, asr r3
    ae0c:	00007472 	andeq	r7, r0, r2, ror r4
    ae10:	4f525245 	svcmi	0x00525245
    ae14:	73253a52 	teqvc	r5, #335872	; 0x52000
    ae18:	3a73253a 	bcc	1cd4308 <__bss_end__+0x1cc8be8>
    ae1c:	203a6425 	eorscs	r6, sl, r5, lsr #8
    ae20:	534c4146 	movtpl	r4, #49478	; 0xc146
    ae24:	693c2845 	ldmdbvs	ip!, {r0, r2, r6, fp, sp}
    ae28:	5f74696e 	svcpl	0x0074696e
    ae2c:	3a293e70 	bcc	a5a7f4 <__bss_end__+0xa4f0d4>
    ae30:	6c616320 	stclvs	3, cr6, [r1], #-128	; 0xffffff80
    ae34:	676e696c 	strbvs	r6, [lr, -ip, ror #18]!
    ae38:	66656220 	strbtvs	r6, [r5], -r0, lsr #4
    ae3c:	2065726f 	rsbcs	r7, r5, pc, ror #4
    ae40:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    ae44:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    ae48:	0a64657a 	beq	1924438 <__bss_end__+0x1918d18>
    ae4c:	00000000 	andeq	r0, r0, r0
    ae50:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
    ae54:	6b2f6372 	blvs	be3c24 <__bss_end__+0xbd8504>
    ae58:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    ae5c:	632e636f 	teqvs	lr, #-1140850687	; 0xbc000001
    ae60:	00000000 	andeq	r0, r0, r0
    ae64:	4f525245 	svcmi	0x00525245
    ae68:	73253a52 	teqvc	r5, #335872	; 0x52000
    ae6c:	3a73253a 	bcc	1cd435c <__bss_end__+0x1cc8c3c>
    ae70:	203a6425 	eorscs	r6, sl, r5, lsr #8
    ae74:	534c4146 	movtpl	r4, #49478	; 0xc146
    ae78:	613c2845 	teqvs	ip, r5, asr #16
    ae7c:	6e67696c 	cdpvs	9, 6, cr6, cr7, cr12, {3}
    ae80:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
    ae84:	38202520 	stmdacc	r0!, {r5, r8, sl, sp}
    ae88:	203d3d20 	eorscs	r3, sp, r0, lsr #26
    ae8c:	3a293e30 	bcc	a5a754 <__bss_end__+0xa4f034>
    ae90:	65772220 	ldrbvs	r2, [r7, #-544]!	; 0x220
    ae94:	20647269 	rsbcs	r7, r4, r9, ror #4
    ae98:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    ae9c:	6e656d6e 	cdpvs	13, 6, cr6, cr5, cr14, {3}
    aea0:	6e203a74 	mcrvs	10, 1, r3, cr0, cr4, {3}
    aea4:	6120746f 	teqvs	r0, pc, ror #8
    aea8:	6c756d20 	ldclvs	13, cr6, [r5], #-128	; 0xffffff80
    aeac:	6c706974 	ldclvs	9, cr6, [r0], #-464	; 0xfffffe30
    aeb0:	666f2065 	strbtvs	r2, [pc], -r5, rrx
    aeb4:	22213420 	eorcs	r3, r1, #32, 8	; 0x20000000
    aeb8:	0000000a 	andeq	r0, r0, sl
    aebc:	4f525245 	svcmi	0x00525245
    aec0:	73253a52 	teqvc	r5, #335872	; 0x52000
    aec4:	3a73253a 	bcc	1cd43b4 <__bss_end__+0x1cc8c94>
    aec8:	203a6425 	eorscs	r6, sl, r5, lsr #8
    aecc:	534c4146 	movtpl	r4, #49478	; 0xc146
    aed0:	213c2845 	teqcs	ip, r5, asr #16
    aed4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    aed8:	293e705f 	ldmdbcs	lr!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}
    aedc:	6163203a 	cmnvs	r3, sl, lsr r0
    aee0:	746f6e6e 	strbtvc	r6, [pc], #-3694	; aee8 <__FUNCTION__.4194+0xf0>
    aee4:	696e6920 	stmdbvs	lr!, {r5, r8, fp, sp, lr}^
    aee8:	6c616974 	stclvs	9, cr6, [r1], #-464	; 0xfffffe30
    aeec:	20657a69 	rsbcs	r7, r5, r9, ror #20
    aef0:	63697774 	cmnvs	r9, #116, 14	; 0x1d00000
    aef4:	0a0a2165 	beq	293490 <__bss_end__+0x287d70>
    aef8:	00000000 	andeq	r0, r0, r0

0000aefc <__FUNCTION__.4277>:
    aefc:	755f7773 	ldrbvc	r7, [pc, #-1907]	; a791 <cb_new+0x19>
    af00:	5f747261 	svcpl	0x00747261
    af04:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
    af08:	746e755f 	strbtvc	r7, [lr], #-1375	; 0x55f
    af0c:	00006c69 	andeq	r6, r0, r9, ror #24

0000af10 <__FUNCTION__.4289>:
    af10:	755f7773 	ldrbvc	r7, [pc, #-1907]	; a7a5 <cb_get_block+0x5>
    af14:	5f747261 	svcpl	0x00747261
    af18:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
    af1c:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    af20:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
    af24:	00000000 	andeq	r0, r0, r0

0000af28 <__FUNCTION__.4303>:
    af28:	755f7773 	ldrbvc	r7, [pc, #-1907]	; a7bd <cb_get_block+0x1d>
    af2c:	5f747261 	svcpl	0x00747261
    af30:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    af34:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
    af38:	00726570 	rsbseq	r6, r2, r0, ror r5

0000af3c <__FUNCTION__.4309>:
    af3c:	755f7773 	ldrbvc	r7, [pc, #-1907]	; a7d1 <putk+0x1>
    af40:	5f747261 	svcpl	0x00747261
    af44:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
    af48:	00000000 	andeq	r0, r0, r0

0000af4c <__FUNCTION__.4331>:
    af4c:	755f7773 	ldrbvc	r7, [pc, #-1907]	; a7e1 <AUX_MU_IIR_REG+0x1>
    af50:	5f747261 	svcpl	0x00747261
    af54:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    af58:	00006b74 	andeq	r6, r0, r4, ror fp

0000af5c <__FUNCTION__.4339>:
    af5c:	755f7773 	ldrbvc	r7, [pc, #-1907]	; a7f1 <AUX_MU_IO_REG+0x1>
    af60:	5f747261 	svcpl	0x00747261
    af64:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
    af68:	746e755f 	strbtvc	r7, [lr], #-1375	; 0x55f
    af6c:	625f6c69 	subsvs	r6, pc, #26880	; 0x6900
    af70:	00006b6c 	andeq	r6, r0, ip, ror #22
    af74:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    af78:	73253a43 	teqvc	r5, #274432	; 0x43000
    af7c:	3a73253a 	bcc	1cd446c <__bss_end__+0x1cc8d4c>
    af80:	6e3a6425 	cdpvs	4, 3, cr6, cr10, cr5, {1}
    af84:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
    af88:	0a303e73 	beq	c1a95c <__bss_end__+0xc0f23c>
    af8c:	00000000 	andeq	r0, r0, r0
    af90:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
    af94:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    af98:	61752d77 	cmnvs	r5, r7, ror sp
    af9c:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
    afa0:	00000000 	andeq	r0, r0, r0
    afa4:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    afa8:	73253a43 	teqvc	r5, #274432	; 0x43000
    afac:	3a73253a 	bcc	1cd449c <__bss_end__+0x1cc8d7c>
    afb0:	283a6425 	ldmdacs	sl!, {r0, r2, r5, sl, sp, lr}
    afb4:	207a686d 	rsbscs	r6, sl, sp, ror #16
    afb8:	6162202d 	cmnvs	r2, sp, lsr #32
    afbc:	20296475 	eorcs	r6, r9, r5, ror r4
    afc0:	64203d3c 	strtvs	r3, [r0], #-3388	; 0xd3c
    afc4:	76697265 	strbtvc	r7, [r9], -r5, ror #4
    afc8:	26206465 	strtcs	r6, [r0], -r5, ror #8
    afcc:	65642026 	strbvs	r2, [r4, #-38]!	; 0x26
    afd0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    afd4:	3d3c2064 	ldccc	0, cr2, [ip, #-400]!	; 0xfffffe70
    afd8:	686d2820 	stmdavs	sp!, {r5, fp, sp}^
    afdc:	202b207a 	eorcs	r2, fp, sl, ror r0
    afe0:	64756162 	ldrbtvs	r6, [r5], #-354	; 0x162
    afe4:	00000a29 	andeq	r0, r0, r9, lsr #20
    afe8:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    afec:	73253a43 	teqvc	r5, #274432	; 0x43000
    aff0:	3a73253a 	bcc	1cd44e0 <__bss_end__+0x1cc8dc0>
    aff4:	693a6425 	ldmdbvs	sl!, {r0, r2, r5, sl, sp, lr}
    aff8:	736f706d 	cmnvc	pc, #109	; 0x6d
    affc:	6c626973 	stclvs	9, cr6, [r2], #-460	; 0xfffffe34
    b000:	68203a65 	stmdavs	r0!, {r0, r2, r5, r6, r9, fp, ip, sp}
    b004:	20657661 	rsbcs	r7, r5, r1, ror #12
    b008:	69206e61 	stmdbvs	r0!, {r0, r5, r6, r9, sl, fp, sp, lr}
    b00c:	6e69666e 	cdpvs	6, 6, cr6, cr9, cr14, {3}
    b010:	20657469 	rsbcs	r7, r5, r9, ror #8
    b014:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    b018:	2174756f 	cmncs	r4, pc, ror #10
    b01c:	00000a0a 	andeq	r0, r0, sl, lsl #20
    b020:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    b024:	73253a43 	teqvc	r5, #274432	; 0x43000
    b028:	3a73253a 	bcc	1cd4518 <__bss_end__+0x1cc8df8>
    b02c:	733a6425 	teqvc	sl, #620756992	; 0x25000000
    b030:	203c207a 	eorscs	r2, ip, sl, ror r0
    b034:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
    b038:	6220666f 	eorvs	r6, r0, #116391936	; 0x6f00000
    b03c:	312d6675 	teqcc	sp, r5, ror r6
    b040:	0000000a 	andeq	r0, r0, sl

0000b044 <__FUNCTION__.4208>:
    b044:	74736166 	ldrbtvc	r6, [r3], #-358	; 0x166
    b048:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
    b04c:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
    b050:	765f7470 			; <UNDEFINED> instruction: 0x765f7470
    b054:	6f746365 	svcvs	0x00746365
    b058:	00000072 	andeq	r0, r0, r2, ror r0

0000b05c <__FUNCTION__.4212>:
    b05c:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xf73
    b060:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
    b064:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
    b068:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
    b06c:	765f7470 			; <UNDEFINED> instruction: 0x765f7470
    b070:	6f746365 	svcvs	0x00746365
    b074:	00000072 	andeq	r0, r0, r2, ror r0

0000b078 <__FUNCTION__.4216>:
    b078:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0x572
    b07c:	65765f74 	ldrbvs	r5, [r6, #-3956]!	; 0xf74
    b080:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    b084:	00000000 	andeq	r0, r0, r0

0000b088 <__FUNCTION__.4220>:
    b088:	65646e75 	strbvs	r6, [r4, #-3701]!	; 0xe75
    b08c:	656e6966 	strbvs	r6, [lr, #-2406]!	; 0x966
    b090:	6e695f64 	cdpvs	15, 6, cr5, cr9, cr4, {3}
    b094:	75727473 	ldrbvc	r7, [r2, #-1139]!	; 0x473
    b098:	6f697463 	svcvs	0x00697463
    b09c:	65765f6e 	ldrbvs	r5, [r6, #-3950]!	; 0xf6e
    b0a0:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    b0a4:	00000000 	andeq	r0, r0, r0

0000b0a8 <__FUNCTION__.4224>:
    b0a8:	66657270 			; <UNDEFINED> instruction: 0x66657270
    b0ac:	68637465 	stmdavs	r3!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    b0b0:	6f62615f 	svcvs	0x0062615f
    b0b4:	765f7472 			; <UNDEFINED> instruction: 0x765f7472
    b0b8:	6f746365 	svcvs	0x00746365
    b0bc:	00000072 	andeq	r0, r0, r2, ror r0

0000b0c0 <__FUNCTION__.4228>:
    b0c0:	61746164 	cmnvs	r4, r4, ror #2
    b0c4:	6f62615f 	svcvs	0x0062615f
    b0c8:	765f7472 			; <UNDEFINED> instruction: 0x765f7472
    b0cc:	6f746365 	svcvs	0x00746365
    b0d0:	00000072 	andeq	r0, r0, r2, ror r0
    b0d4:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    b0d8:	73253a43 	teqvc	r5, #274432	; 0x43000
    b0dc:	3a73253a 	bcc	1cd45cc <__bss_end__+0x1cc8eac>
    b0e0:	453a6425 	ldrmi	r6, [sl, #-1061]!	; 0x425
    b0e4:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
    b0e8:	6e75203a 	mrcvs	0, 3, r2, cr5, cr10, {1}
    b0ec:	646e6168 	strbtvs	r6, [lr], #-360	; 0x168
    b0f0:	2064656c 	rsbcs	r6, r4, ip, ror #10
    b0f4:	65637865 	strbvs	r7, [r3, #-2149]!	; 0x865
    b0f8:	6f697470 	svcvs	0x00697470
    b0fc:	253c206e 	ldrcs	r2, [ip, #-110]!	; 0x6e
    b100:	61203e73 	teqvs	r0, r3, ror lr
    b104:	43502074 	cmpmi	r0, #116	; 0x74
    b108:	0a78253d 	beq	1e14604 <__bss_end__+0x1e08ee4>
    b10c:	0000000a 	andeq	r0, r0, sl
    b110:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
    b114:	692d6530 	pushvs	{r4, r5, r8, sl, sp, lr}
    b118:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    b11c:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
    b120:	746e692f 	strbtvc	r6, [lr], #-2351	; 0x92f
    b124:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
    b128:	2d737470 	cfldrdcs	mvd7, [r3, #-448]!	; 0xfffffe40
    b12c:	00632e63 	rsbeq	r2, r3, r3, ror #28
    b130:	74736166 	ldrbtvc	r6, [r3], #-358	; 0x166
    b134:	00000000 	andeq	r0, r0, r0
    b138:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xf73
    b13c:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
    b140:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
    b144:	00007470 	andeq	r7, r0, r0, ror r4
    b148:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0x572
    b14c:	65762074 	ldrbvs	r2, [r6, #-116]!	; 0x74
    b150:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    b154:	00000000 	andeq	r0, r0, r0
    b158:	65646e75 	strbvs	r6, [r4, #-3701]!	; 0xe75
    b15c:	656e6966 	strbvs	r6, [lr, #-2406]!	; 0x966
    b160:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
    b164:	75727473 	ldrbvc	r7, [r2, #-1139]!	; 0x473
    b168:	6f697463 	svcvs	0x00697463
    b16c:	0000006e 	andeq	r0, r0, lr, rrx
    b170:	66657270 			; <UNDEFINED> instruction: 0x66657270
    b174:	68637465 	stmdavs	r3!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    b178:	6f626120 	svcvs	0x00626120
    b17c:	00007472 	andeq	r7, r0, r2, ror r4
    b180:	61746164 	cmnvs	r4, r4, ror #2
    b184:	6f626120 	svcvs	0x00626120
    b188:	00007472 	andeq	r7, r0, r2, ror r4

0000b18c <__FUNCTION__.4236>:
    b18c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    b190:	68635f72 	stmdavs	r3!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    b194:	5f6b6365 	svcpl	0x006b6365
    b198:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
    b19c:	00737465 	rsbseq	r7, r3, r5, ror #8
    b1a0:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    b1a4:	73253a43 	teqvc	r5, #274432	; 0x43000
    b1a8:	3a73253a 	bcc	1cd4698 <__bss_end__+0x1cc8f78>
    b1ac:	6f3a6425 	svcvs	0x003a6425
    b1b0:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0x666
    b1b4:	72772074 	rsbsvc	r2, r7, #116	; 0x74
    b1b8:	3a676e6f 	bcc	19e6b7c <__bss_end__+0x19db45c>
    b1bc:	70786520 	rsbsvc	r6, r8, r0, lsr #10
    b1c0:	20746365 	rsbscs	r6, r4, r5, ror #6
    b1c4:	67207825 	strvs	r7, [r0, -r5, lsr #16]!
    b1c8:	2520746f 	strcs	r7, [r0, #-1135]!	; 0x46f
    b1cc:	73252078 	teqvc	r5, #120	; 0x78
    b1d0:	666f5b20 	strbtvs	r5, [pc], -r0, lsr #22
    b1d4:	64253d66 	strtvs	r3, [r5], #-3430	; 0xd66
    b1d8:	69626e2c 	stmdbvs	r2!, {r2, r3, r5, r9, sl, fp, sp, lr}^
    b1dc:	253d7374 	ldrcs	r7, [sp, #-884]!	; 0x374
    b1e0:	0a0a5d64 	beq	2a2778 <__bss_end__+0x297058>
    b1e4:	00000000 	andeq	r0, r0, r0
    b1e8:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
    b1ec:	692d6530 	pushvs	{r4, r5, r8, sl, sp, lr}
    b1f0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    b1f4:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
    b1f8:	6d69742f 	cfstrdvs	mvd7, [r9, #-188]!	; 0xffffff44
    b1fc:	692d7265 	pushvs	{r0, r2, r5, r6, r9, ip, sp, lr}
    b200:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    b204:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
    b208:	0000632e 	andeq	r6, r0, lr, lsr #6
    b20c:	5f657375 	svcpl	0x00657375
    b210:	69623233 	stmdbvs	r2!, {r0, r1, r4, r5, r9, ip, sp}^
    b214:	6f635f74 	svcvs	0x00635f74
    b218:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xe75
    b21c:	00000072 	andeq	r0, r0, r2, ror r0
    b220:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    b224:	73253a43 	teqvc	r5, #274432	; 0x43000
    b228:	3a73253a 	bcc	1cd4718 <__bss_end__+0x1cc8ff8>
    b22c:	783a6425 	ldmdavc	sl!, {r0, r2, r5, sl, sp, lr}
    b230:	3d20752e 	cfstr32cc	mvfx7, [r0, #-184]!	; 0xffffff48
    b234:	7865203d 	stmdavc	r5!, {r0, r2, r3, r4, r5, sp}^
    b238:	00000a70 	andeq	r0, r0, r0, ror sl
    b23c:	494e4150 	stmdbmi	lr, {r4, r6, r8, lr}^
    b240:	73253a43 	teqvc	r5, #274432	; 0x43000
    b244:	3a73253a 	bcc	1cd4734 <__bss_end__+0x1cc9014>
    b248:	773a6425 	ldrvc	r6, [sl, -r5, lsr #8]!
    b24c:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
    b250:	6f727720 	svcvs	0x00727720
    b254:	203a676e 	eorscs	r6, sl, lr, ror #14
    b258:	65707865 	ldrbvs	r7, [r0, #-2149]!	; 0x865
    b25c:	25207463 	strcs	r7, [r0, #-1123]!	; 0x463
    b260:	6f672078 	svcvs	0x00672078
    b264:	78252074 	stmdavc	r5!, {r2, r4, r5, r6, sp}
    b268:	20732520 	rsbscs	r2, r3, r0, lsr #10
    b26c:	66666f5b 	uqsaxvs	r6, r6, fp
    b270:	2c64253d 	cfstr64cs	mvdx2, [r4], #-244	; 0xffffff0c
    b274:	7469626e 	strbtvc	r6, [r9], #-622	; 0x26e
    b278:	64253d73 	strtvs	r3, [r5], #-3443	; 0xd73
    b27c:	000a0a5d 	andeq	r0, sl, sp, asr sl
    b280:	5f746e69 	svcpl	0x00746e69
    b284:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    b288:	0064656c 	rsbeq	r6, r4, ip, ror #10
    b28c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    b290:	6e655f72 	mcrvs	15, 3, r5, cr5, cr2, {3}
    b294:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
    b298:	00000064 	andeq	r0, r0, r4, rrx
    b29c:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    b2a0:	5f726574 	svcpl	0x00726574
    b2a4:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    b2a8:	0064656c 	rsbeq	r6, r4, ip, ror #10
    b2ac:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    b2b0:	5f726574 	svcpl	0x00726574
    b2b4:	73657270 	cmnvc	r5, #112, 4
    b2b8:	656c6163 	strbvs	r6, [ip, #-355]!	; 0x163
    b2bc:	00000072 	andeq	r0, r0, r2, ror r0
    b2c0:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
    b2c4:	20737465 	rsbscs	r7, r3, r5, ror #8
    b2c8:	63656863 	cmnvs	r5, #6488064	; 0x630000
    b2cc:	2064656b 	rsbcs	r6, r4, fp, ror #10
    b2d0:	2174756f 	cmncs	r4, pc, ror #10
    b2d4:	0000000a 	andeq	r0, r0, sl

Disassembly of section .bss:

0000b2d8 <__bss_start__>:
    b2d8:	00000000 	andeq	r0, r0, r0

0000b2dc <thread_sum>:
    b2dc:	00000000 	andeq	r0, r0, r0

0000b2e0 <freeq>:
	...

0000b2ec <nalloced>:
    b2ec:	00000000 	andeq	r0, r0, r0

0000b2f0 <cur_thread>:
    b2f0:	00000000 	andeq	r0, r0, r0

0000b2f4 <runq>:
	...

0000b300 <scheduler_thread>:
    b300:	00000000 	andeq	r0, r0, r0

0000b304 <buf.4176>:
	...

0000b704 <console_uart>:
	...

0000b710 <init_p>:
    b710:	00000000 	andeq	r0, r0, r0

0000b714 <heap_ptr>:
    b714:	00000000 	andeq	r0, r0, r0

0000b718 <rpi_arm_timer_t>:
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4b5a3605 	blmi	168d82c <__bss_end__+0x168210c>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	12010901 	andne	r0, r1, #16384	; 0x4000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0x404
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	22011a01 	andcs	r1, r1, #4096	; 0x1000
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__bss_end__+0x10c5604>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	34202955 	strtcc	r2, [r0], #-2389	; 0x955
   c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000049b 	muleq	r0, fp, r4
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000064 	andeq	r0, r0, r4, rrx
      10:	00011901 	andeq	r1, r1, r1, lsl #18
      14:	00019400 	andeq	r9, r1, r0, lsl #8
      18:	00801000 	addeq	r1, r0, r0
      1c:	0001b400 	andeq	fp, r1, r0, lsl #8
      20:	00000000 	andeq	r0, r0, r0
      24:	05040200 	streq	r0, [r4, #-512]	; 0x200
      28:	00746e69 	rsbseq	r6, r4, r9, ror #28
      2c:	32070403 	andcc	r0, r7, #50331648	; 0x3000000
      30:	03000002 	movweq	r0, #2
      34:	010d0601 	tsteq	sp, r1, lsl #12
      38:	02030000 	andeq	r0, r3, #0
      3c:	0002ae05 	andeq	sl, r2, r5, lsl #28
      40:	05040300 	streq	r0, [r4, #-768]	; 0x300
      44:	0000027e 	andeq	r0, r0, lr, ror r2
      48:	79050803 	stmdbvc	r5, {r0, r1, fp}
      4c:	03000002 	movweq	r0, #2
      50:	010b0801 	tsteq	fp, r1, lsl #16
      54:	02030000 	andeq	r0, r3, #0
      58:	00015e07 	andeq	r5, r1, r7, lsl #28
      5c:	02cd0400 	sbceq	r0, sp, #0, 8
      60:	34030000 	strcc	r0, [r3], #-0
      64:	00000068 	andeq	r0, r0, r8, rrx
      68:	2d070403 	cfstrscs	mvf0, [r7, #-12]
      6c:	03000002 	movweq	r0, #2
      70:	02280708 	eoreq	r0, r8, #8, 14	; 0x200000
      74:	04030000 	streq	r0, [r3], #-0
      78:	00025e07 	andeq	r5, r2, r7, lsl #28
      7c:	03040500 	movweq	r0, #17664	; 0x4500
      80:	01140801 	tsteq	r4, r1, lsl #16
      84:	04060000 	streq	r0, [r6], #-0
      88:	0000008c 	andeq	r0, r0, ip, lsl #1
      8c:	00007f07 	andeq	r7, r0, r7, lsl #30
      90:	05040800 	streq	r0, [r4, #-2048]	; 0x800
      94:	0000fe33 	andeq	pc, r0, r3, lsr lr	; <UNPREDICTABLE>
      98:	01850900 	orreq	r0, r5, r0, lsl #18
      9c:	e8800000 	stm	r0, {}	; <UNPREDICTABLE>
      a0:	09028082 	stmdbeq	r2, {r1, r7, pc}
      a4:	000002e3 	andeq	r0, r0, r3, ror #5
      a8:	8082e880 	addhi	lr, r2, r0, lsl #17
      ac:	02050902 	andeq	r0, r5, #32768	; 0x8000
      b0:	e8840000 	stm	r4, {}	; <UNPREDICTABLE>
      b4:	09028082 	stmdbeq	r2, {r1, r7, pc}
      b8:	00000267 	andeq	r0, r0, r7, ror #4
      bc:	8082e888 	addhi	lr, r2, r8, lsl #17
      c0:	02150902 	andseq	r0, r5, #32768	; 0x8000
      c4:	e88c0000 	stm	ip, {}	; <UNPREDICTABLE>
      c8:	09028082 	stmdbeq	r2, {r1, r7, pc}
      cc:	000001e7 	andeq	r0, r0, r7, ror #3
      d0:	8082e890 	umullhi	lr, r2, r0, r8
      d4:	00c30902 	sbceq	r0, r3, r2, lsl #18
      d8:	e8940000 	ldm	r4, {}	; <UNPREDICTABLE>
      dc:	09028082 	stmdbeq	r2, {r1, r7, pc}
      e0:	00000301 	andeq	r0, r0, r1, lsl #6
      e4:	8082e898 	umullhi	lr, r2, r8, r8
      e8:	02b80902 	adcseq	r0, r8, #32768	; 0x8000
      ec:	e89c0000 	ldm	ip, {}	; <UNPREDICTABLE>
      f0:	09028082 	stmdbeq	r2, {r1, r7, pc}
      f4:	00000141 	andeq	r0, r0, r1, asr #2
      f8:	8082e8a0 	addhi	lr, r2, r0, lsr #17
      fc:	eb0a0002 	bl	28010c <__bss_end__+0x2749ec>
     100:	10000000 	andne	r0, r0, r0
     104:	482a0220 	stmdami	sl!, {r5, r9}
     108:	0b000001 	bleq	114 <_start-0x7eec>
     10c:	0000050c 	andeq	r0, r0, ip, lsl #10
     110:	01482b02 	cmpeq	r8, r2, lsl #22
     114:	0c000000 	stceq	0, cr0, [r0], {-0}
     118:	00646974 	rsbeq	r6, r4, r4, ror r9
     11c:	005d2c02 	subseq	r2, sp, r2, lsl #24
     120:	0b040000 	bleq	100128 <__bss_end__+0xf4a08>
     124:	00000312 	andeq	r0, r0, r2, lsl r3
     128:	005d2d02 	subseq	r2, sp, r2, lsl #26
     12c:	0b080000 	bleq	200134 <__bss_end__+0x1f4a14>
     130:	00000030 	andeq	r0, r0, r0, lsr r0
     134:	005d2e02 	subseq	r2, sp, r2, lsl #28
     138:	0b0c0000 	bleq	300140 <__bss_end__+0x2f4a20>
     13c:	00000036 	andeq	r0, r0, r6, lsr r0
     140:	014e2f02 	cmpeq	lr, r2, lsl #30
     144:	00100000 	andseq	r0, r0, r0
     148:	00fe0406 	rscseq	r0, lr, r6, lsl #8
     14c:	5d0d0000 	stcpl	0, cr0, [sp, #-0]
     150:	5f000000 	svcpl	0x00000000
     154:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     158:	00000076 	andeq	r0, r0, r6, ror r0
     15c:	040007ff 	streq	r0, [r0], #-2047	; 0x7ff
     160:	0000004c 	andeq	r0, r0, ip, asr #32
     164:	00fe3002 	rscseq	r3, lr, r2
     168:	df0f0000 	svcle	0x000f0000
     16c:	01000000 	mrseq	r0, (UNDEF: 0)
     170:	00801013 	addeq	r1, r0, r3, lsl r0
     174:	00010000 	andeq	r0, r1, r0
     178:	709c0100 	addsvc	r0, ip, r0, lsl #2
     17c:	10000002 	andne	r0, r0, r2
     180:	00677261 	rsbeq	r7, r7, r1, ror #4
     184:	007d1301 	rsbseq	r1, sp, r1, lsl #6
     188:	00000000 	andeq	r0, r0, r0
     18c:	78110000 	ldmdavc	r1, {}	; <UNPREDICTABLE>
     190:	70140100 	andsvc	r0, r4, r0, lsl #2
     194:	2c000002 	stccs	0, cr0, [r0], {2}
     198:	11000000 	mrsne	r0, (UNDEF: 0)
     19c:	00646974 	rsbeq	r6, r4, r4, ror r9
     1a0:	002c1701 	eoreq	r1, ip, r1, lsl #14
     1a4:	00580000 	subseq	r0, r8, r0
     1a8:	f8120000 			; <UNDEFINED> instruction: 0xf8120000
     1ac:	86000001 	strhi	r0, [r0], -r1
     1b0:	05000002 	streq	r0, [r0, #-2]
     1b4:	00a86803 	adceq	r6, r8, r3, lsl #16
     1b8:	80941300 	addshi	r1, r4, r0, lsl #6
     1bc:	00480000 	subeq	r0, r8, r0
     1c0:	01ea0000 	mvneq	r0, r0
     1c4:	69110000 	ldmdbvs	r1, {}	; <UNPREDICTABLE>
     1c8:	25250100 	strcs	r0, [r5, #-256]!	; 0x100
     1cc:	6b000000 	blvs	1d4 <_start-0x7e2c>
     1d0:	14000000 	strne	r0, [r0], #-0
     1d4:	000080d0 	ldrdeq	r8, [r0], -r0
     1d8:	000003f2 	strdeq	r0, [r0], -r2
     1dc:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
     1e0:	01150078 	tsteq	r5, r8, ror r0
     1e4:	00790250 	rsbseq	r0, r9, r0, asr r2
     1e8:	20160000 	andscs	r0, r6, r0
     1ec:	08000080 	stmdaeq	r0, {r7}
     1f0:	17000004 	strne	r0, [r0, -r4]
     1f4:	00008034 	andeq	r8, r0, r4, lsr r0
     1f8:	000003f2 	strdeq	r0, [r0], -r2
     1fc:	00000210 	andeq	r0, r0, r0, lsl r2
     200:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
     204:	01150078 	tsteq	r5, r8, ror r0
     208:	74030550 	strvc	r0, [r3], #-1360	; 0x550
     20c:	000000a8 	andeq	r0, r0, r8, lsr #1
     210:	00803816 	addeq	r3, r0, r6, lsl r8
     214:	00040800 	andeq	r0, r4, r0, lsl #16
     218:	80501600 	subshi	r1, r0, r0, lsl #12
     21c:	04190000 	ldreq	r0, [r9], #-0
     220:	74170000 	ldrvc	r0, [r7], #-0
     224:	f2000080 	vhadd.s8	d0, d16, d0
     228:	57000003 	strpl	r0, [r0, -r3]
     22c:	15000002 	strne	r0, [r0, #-2]
     230:	4b015301 	blmi	54e3c <__bss_end__+0x4971c>
     234:	05520115 	ldrbeq	r0, [r2, #-277]	; 0x115
     238:	00a86803 	adceq	r6, r8, r3, lsl #16
     23c:	51011500 	tstpl	r1, r0, lsl #10
     240:	a8ec0305 	stmiage	ip!, {r0, r2, r8, r9}^
     244:	01150000 	tsteq	r5, r0
     248:	8c030550 	cfstr32hi	mvfx0, [r3], {80}	; 0x50
     24c:	150000a8 	strne	r0, [r0, #-168]	; 0xa8
     250:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
     254:	16000078 			; <UNDEFINED> instruction: 0x16000078
     258:	00008078 	andeq	r8, r0, r8, ror r0
     25c:	00000420 	andeq	r0, r0, r0, lsr #8
     260:	0080e414 	addeq	lr, r0, r4, lsl r4
     264:	00042700 	andeq	r2, r4, r0, lsl #14
     268:	50011500 	andpl	r1, r1, r0, lsl #10
     26c:	00003001 	andeq	r3, r0, r1
     270:	002c0406 	eoreq	r0, ip, r6, lsl #8
     274:	7f0d0000 	svcvc	0x000d0000
     278:	86000000 	strhi	r0, [r0], -r0
     27c:	18000002 	stmdane	r0, {r1}
     280:	00000076 	andeq	r0, r0, r6, ror r0
     284:	7607000b 	strvc	r0, [r7], -fp
     288:	19000002 	stmdbne	r0, {r1}
     28c:	000000d7 	ldrdeq	r0, [r0], -r7
     290:	81102d01 	tsthi	r0, r1, lsl #26
     294:	00b40000 	adcseq	r0, r4, r0
     298:	9c010000 	stcls	0, cr0, [r1], {-0}
     29c:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
     2a0:	01006e1a 	tsteq	r0, sl, lsl lr
     2a4:	00002533 	andeq	r2, r0, r3, lsr r5
     2a8:	73111e00 	tstvc	r1, #0, 28
     2ac:	01006d75 	tsteq	r0, r5, ror sp
     2b0:	00002c35 	andeq	r2, r0, r5, lsr ip
     2b4:	00008a00 	andeq	r8, r0, r0, lsl #20
     2b8:	81341300 	teqhi	r4, r0, lsl #6
     2bc:	00300000 	eorseq	r0, r0, r0
     2c0:	030b0000 	movweq	r0, #45056	; 0xb000
     2c4:	69110000 	ldmdbvs	r1, {}	; <UNPREDICTABLE>
     2c8:	25360100 	ldrcs	r0, [r6, #-256]!	; 0x100
     2cc:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
     2d0:	1b000000 	blne	2d8 <_start-0x7d28>
     2d4:	00000000 	andeq	r0, r0, r0
     2d8:	01007811 	tsteq	r0, r1, lsl r8
     2dc:	0003b937 	andeq	fp, r3, r7, lsr r9
     2e0:	0000bd00 	andeq	fp, r0, r0, lsl #26
     2e4:	81481700 	cmphi	r8, r0, lsl #14
     2e8:	04380000 	ldrteq	r0, [r8], #-0
     2ec:	02f90000 	rscseq	r0, r9, #0
     2f0:	01150000 	tsteq	r5, r0
     2f4:	00760250 	rsbseq	r0, r6, r0, asr r2
     2f8:	81581400 	cmphi	r8, r0, lsl #8
     2fc:	044d0000 	strbeq	r0, [sp], #-0
     300:	01150000 	tsteq	r5, r0
     304:	00750250 	rsbseq	r0, r5, r0, asr r2
     308:	13000000 	movwne	r0, #0
     30c:	00008170 	andeq	r8, r0, r0, ror r1
     310:	0000001c 	andeq	r0, r0, ip, lsl r0
     314:	00000338 	andeq	r0, r0, r8, lsr r3
     318:	01006911 	tsteq	r0, r1, lsl r9
     31c:	0000253e 	andeq	r2, r0, lr, lsr r5
     320:	0000db00 	andeq	sp, r0, r0, lsl #22
     324:	817c1600 	cmnhi	ip, r0, lsl #12
     328:	04080000 	streq	r0, [r8], #-0
     32c:	80160000 	andshi	r0, r6, r0
     330:	78000081 	stmdavc	r0, {r0, r7}
     334:	00000004 	andeq	r0, r0, r4
     338:	00811816 	addeq	r1, r1, r6, lsl r8
     33c:	00048900 	andeq	r8, r4, r0, lsl #18
     340:	811c1600 	tsthi	ip, r0, lsl #12
     344:	04900000 	ldreq	r0, [r0], #0
     348:	24170000 	ldrcs	r0, [r7], #-0
     34c:	f2000081 	vhadd.s8	d0, d16, d1
     350:	61000003 	tstvs	r0, r3
     354:	15000003 	strne	r0, [r0, #-3]
     358:	03055001 	movweq	r5, #20481	; 0x5001
     35c:	0000a914 	andeq	sl, r0, r4, lsl r9
     360:	816c1700 	cmnhi	ip, r0, lsl #14
     364:	03f20000 	mvnseq	r0, #0
     368:	03780000 	cmneq	r8, #0
     36c:	01150000 	tsteq	r5, r0
     370:	3c030550 	cfstr32cc	mvfx0, [r3], {80}	; 0x50
     374:	000000a9 	andeq	r0, r0, r9, lsr #1
     378:	00817016 	addeq	r7, r1, r6, lsl r0
     37c:	00049700 	andeq	r9, r4, r0, lsl #14
     380:	81a01700 	lslhi	r1, r0, #14
     384:	03f20000 	mvnseq	r0, #0
     388:	03980000 	orrseq	r0, r8, #0
     38c:	01150000 	tsteq	r5, r0
     390:	4c030550 	cfstr32mi	mvfx0, [r3], {80}	; 0x50
     394:	000000a9 	andeq	r0, r0, r9, lsr #1
     398:	0081a817 	addeq	sl, r1, r7, lsl r8
     39c:	0003f200 	andeq	pc, r3, r0, lsl #4
     3a0:	0003af00 	andeq	sl, r3, r0, lsl #30
     3a4:	50011500 	andpl	r1, r1, r0, lsl #10
     3a8:	a9600305 	stmdbge	r0!, {r0, r2, r8, r9}^
     3ac:	16000000 	strne	r0, [r0], -r0
     3b0:	000081ac 	andeq	r8, r0, ip, lsr #3
     3b4:	00000420 	andeq	r0, r0, r0, lsr #8
     3b8:	25040600 	strcs	r0, [r4, #-1536]	; 0x600
     3bc:	1c000000 	stcne	0, cr0, [r0], {-0}
     3c0:	00000287 	andeq	r0, r0, r7, lsl #5
     3c4:	002c1001 	eoreq	r1, ip, r1
     3c8:	03050000 	movweq	r0, #20480	; 0x5000
     3cc:	0000b2d8 	ldrdeq	fp, [r0], -r8
     3d0:	0002531c 	andeq	r5, r2, ip, lsl r3
     3d4:	2c100100 	ldfcss	f0, [r0], {-0}
     3d8:	05000000 	streq	r0, [r0, #-0]
     3dc:	00b2dc03 	adcseq	sp, r2, r3, lsl #24
     3e0:	003c1d00 	eorseq	r1, ip, r0, lsl #26
     3e4:	80050000 	andhi	r0, r5, r0
     3e8:	00000091 	muleq	r0, r1, r0
     3ec:	b7180305 	ldrlt	r0, [r8, -r5, lsl #6]
     3f0:	9c1e0000 	ldcls	0, cr0, [lr], {-0}
     3f4:	04000006 	streq	r0, [r0], #-6
     3f8:	00002529 	andeq	r2, r0, r9, lsr #10
     3fc:	00040800 	andeq	r0, r4, r0, lsl #16
     400:	00861f00 	addeq	r1, r6, r0, lsl #30
     404:	00200000 	eoreq	r0, r0, r0
     408:	00029421 	andeq	r9, r2, r1, lsr #8
     40c:	133d0200 	teqne	sp, #0, 4
     410:	06000004 	streq	r0, [r0], -r4
     414:	00015f04 	andeq	r5, r1, r4, lsl #30
     418:	02f22200 	rscseq	r2, r2, #0, 4
     41c:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
     420:	00013422 	andeq	r3, r1, r2, lsr #8
     424:	23660400 	cmncs	r6, #0, 8
     428:	0000001c 	andeq	r0, r0, ip, lsl r0
     42c:	04383602 	ldrteq	r3, [r8], #-1538	; 0x602
     430:	251f0000 	ldrcs	r0, [pc, #-0]	; 438 <_start-0x7bc8>
     434:	00000000 	andeq	r0, r0, r0
     438:	0000bb1e 	andeq	fp, r0, lr, lsl fp
     43c:	7d6d0400 	cfstrdvc	mvd0, [sp, #-0]
     440:	4d000000 	stcmi	0, cr0, [r0, #-0]
     444:	1f000004 	svcne	0x00000004
     448:	0000002c 	andeq	r0, r0, ip, lsr #32
     44c:	01711e00 	cmneq	r1, r0, lsl #28
     450:	33020000 	movwcc	r0, #8192	; 0x2000
     454:	00000413 	andeq	r0, r0, r3, lsl r4
     458:	00000467 	andeq	r0, r0, r7, ror #8
     45c:	0004671f 	andeq	r6, r4, pc, lsl r7
     460:	007d1f00 	rsbseq	r1, sp, r0, lsl #30
     464:	06000000 	streq	r0, [r0], -r0
     468:	00046d04 	andeq	r6, r4, r4, lsl #26
     46c:	04782400 	ldrbteq	r2, [r8], #-1024	; 0x400
     470:	7d1f0000 	ldcvc	0, cr0, [pc, #-0]	; 478 <_start-0x7b88>
     474:	00000000 	andeq	r0, r0, r0
     478:	00023f23 	andeq	r3, r2, r3, lsr #30
     47c:	89500200 	ldmdbhi	r0, {r9}^
     480:	1f000004 	svcne	0x00000004
     484:	00000413 	andeq	r0, r0, r3, lsl r4
     488:	01012200 	mrseq	r2, R9_usr
     48c:	3a040000 	bcc	100494 <__bss_end__+0xf4d74>
     490:	0002d622 	andeq	sp, r2, r2, lsr #12
     494:	22710400 	rsbscs	r0, r1, #0, 8
     498:	00000000 	andeq	r0, r0, r0
     49c:	93003a02 	movwls	r3, #2562	; 0xa02
     4a0:	0400000a 	streq	r0, [r0], #-10
     4a4:	0001da00 	andeq	sp, r1, r0, lsl #20
     4a8:	64010400 	strvs	r0, [r1], #-1024	; 0x400
     4ac:	01000000 	mrseq	r0, (UNDEF: 0)
     4b0:	0000031e 	andeq	r0, r0, lr, lsl r3
     4b4:	00000194 	muleq	r0, r4, r1
     4b8:	000081c4 	andeq	r8, r0, r4, asr #3
     4bc:	00000480 	andeq	r0, r0, r0, lsl #9
     4c0:	000001c7 	andeq	r0, r0, r7, asr #3
     4c4:	69050402 	stmdbvs	r5, {r1, sl}
     4c8:	0300746e 	movweq	r7, #1134	; 0x46e
     4cc:	02320704 	eorseq	r0, r2, #4, 14	; 0x100000
     4d0:	01030000 	mrseq	r0, (UNDEF: 3)
     4d4:	00010d06 	andeq	r0, r1, r6, lsl #26
     4d8:	05020300 	streq	r0, [r2, #-768]	; 0x300
     4dc:	000002ae 	andeq	r0, r0, lr, lsr #5
     4e0:	7e050403 	cdpvc	4, 0, cr0, cr5, cr3, {0}
     4e4:	03000002 	movweq	r0, #2
     4e8:	02790508 	rsbseq	r0, r9, #8, 10	; 0x2000000
     4ec:	01030000 	mrseq	r0, (UNDEF: 3)
     4f0:	00010b08 	andeq	r0, r1, r8, lsl #22
     4f4:	07020300 	streq	r0, [r2, -r0, lsl #6]
     4f8:	0000015e 	andeq	r0, r0, lr, asr r1
     4fc:	0002cd04 	andeq	ip, r2, r4, lsl #26
     500:	68340600 	ldmdavs	r4!, {r9, sl}
     504:	03000000 	movweq	r0, #0
     508:	022d0704 	eoreq	r0, sp, #4, 14	; 0x100000
     50c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     510:	00022807 	andeq	r2, r2, r7, lsl #16
     514:	07040300 	streq	r0, [r4, -r0, lsl #6]
     518:	0000025e 	andeq	r0, r0, lr, asr r2
     51c:	01030405 	tsteq	r3, r5, lsl #8
     520:	00011408 	andeq	r1, r1, r8, lsl #8
     524:	8c040600 	stchi	6, cr0, [r4], {-0}
     528:	07000000 	streq	r0, [r0, -r0]
     52c:	0000007f 	andeq	r0, r0, pc, ror r0
     530:	00007f08 	andeq	r7, r0, r8, lsl #30
     534:	0000a100 	andeq	sl, r0, r0, lsl #2
     538:	00760900 	rsbseq	r0, r6, r0, lsl #18
     53c:	00070000 	andeq	r0, r7, r0
     540:	3303040a 	movwcc	r0, #13322	; 0x340a
     544:	0000010e 	andeq	r0, r0, lr, lsl #2
     548:	0001850b 	andeq	r8, r1, fp, lsl #10
     54c:	82e88000 	rschi	r8, r8, #0
     550:	e30b0280 	movw	r0, #45696	; 0xb280
     554:	80000002 	andhi	r0, r0, r2
     558:	028082e8 	addeq	r8, r0, #232, 4	; 0x8000000e
     55c:	0002050b 	andeq	r0, r2, fp, lsl #10
     560:	82e88400 	rschi	r8, r8, #0, 8
     564:	670b0280 	strvs	r0, [fp, -r0, lsl #5]
     568:	88000002 	stmdahi	r0, {r1}
     56c:	028082e8 	addeq	r8, r0, #232, 4	; 0x8000000e
     570:	0002150b 	andeq	r1, r2, fp, lsl #10
     574:	82e88c00 	rschi	r8, r8, #0, 24
     578:	e70b0280 	str	r0, [fp, -r0, lsl #5]
     57c:	90000001 	andls	r0, r0, r1
     580:	028082e8 	addeq	r8, r0, #232, 4	; 0x8000000e
     584:	0000c30b 	andeq	ip, r0, fp, lsl #6
     588:	82e89400 	rschi	r9, r8, #0, 8
     58c:	010b0280 	smlabbeq	fp, r0, r2, r0
     590:	98000003 	stmdals	r0, {r0, r1}
     594:	028082e8 	addeq	r8, r0, #232, 4	; 0x8000000e
     598:	0002b80b 	andeq	fp, r2, fp, lsl #16
     59c:	82e89c00 	rschi	r9, r8, #0, 24
     5a0:	410b0280 	smlabbmi	fp, r0, r2, r0
     5a4:	a0000001 	andge	r0, r0, r1
     5a8:	028082e8 	addeq	r8, r0, #232, 4	; 0x8000000e
     5ac:	04040a00 	streq	r0, [r4], #-2560	; 0xa00
     5b0:	00018514 	andeq	r8, r1, r4, lsl r5
     5b4:	039d0b00 	orrseq	r0, sp, #0, 22
     5b8:	e4800000 	str	r0, [r0], #0
     5bc:	0b028082 	bleq	a07cc <__bss_end__+0x950ac>
     5c0:	000004c3 	andeq	r0, r0, r3, asr #9
     5c4:	8082e480 	addhi	lr, r2, r0, lsl #9
     5c8:	03ac0b02 			; <UNDEFINED> instruction: 0x03ac0b02
     5cc:	e4840000 	str	r0, [r4], #0
     5d0:	0b028082 	bleq	a07e0 <__bss_end__+0x950c0>
     5d4:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
     5d8:	8082e488 	addhi	lr, r2, r8, lsl #9
     5dc:	05110b02 	ldreq	r0, [r1, #-2818]	; 0xb02
     5e0:	e48c0000 	str	r0, [ip], #0
     5e4:	0b028082 	bleq	a07f4 <__bss_end__+0x950d4>
     5e8:	000003ef 	andeq	r0, r0, pc, ror #7
     5ec:	8082e490 	umullhi	lr, r2, r0, r4
     5f0:	03fd0b02 	mvnseq	r0, #2048	; 0x800
     5f4:	e4940000 	ldr	r0, [r4], #0
     5f8:	0b028082 	bleq	a0808 <__bss_end__+0x950e8>
     5fc:	000004d5 	ldrdeq	r0, [r0], -r5
     600:	8082e498 	umullhi	lr, r2, r8, r4
     604:	03340b02 	teqeq	r4, #2048	; 0x800
     608:	e49c0000 	ldr	r0, [ip], #0
     60c:	0b028082 	bleq	a081c <__bss_end__+0x950fc>
     610:	00000343 	andeq	r0, r0, r3, asr #6
     614:	8082e4a0 	addhi	lr, r2, r0, lsr #9
     618:	03c80b02 	biceq	r0, r8, #2048	; 0x800
     61c:	e4a40000 	strt	r0, [r4], #0
     620:	00028082 	andeq	r8, r2, r2, lsl #1
     624:	0000eb0c 	andeq	lr, r0, ip, lsl #22
     628:	05201000 	streq	r1, [r0, #-0]!
     62c:	0001cf2a 	andeq	ip, r1, sl, lsr #30
     630:	050c0d00 	streq	r0, [ip, #-3328]	; 0xd00
     634:	2b050000 	blcs	14063c <__bss_end__+0x134f1c>
     638:	000001cf 	andeq	r0, r0, pc, asr #3
     63c:	69740e00 	ldmdbvs	r4!, {r9, sl, fp}^
     640:	2c050064 	stccs	0, cr0, [r5], {100}	; 0x64
     644:	0000005d 	andeq	r0, r0, sp, asr r0
     648:	03120d04 	tsteq	r2, #4, 26	; 0x100
     64c:	2d050000 	stccs	0, cr0, [r5, #-0]
     650:	0000005d 	andeq	r0, r0, sp, asr r0
     654:	00300d08 	eorseq	r0, r0, r8, lsl #26
     658:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
     65c:	0000005d 	andeq	r0, r0, sp, asr r0
     660:	00360d0c 	eorseq	r0, r6, ip, lsl #26
     664:	2f050000 	svccs	0x00050000
     668:	000001d5 	ldrdeq	r0, [r0], -r5
     66c:	04060010 	streq	r0, [r6], #-16
     670:	00000185 	andeq	r0, r0, r5, lsl #3
     674:	00005d08 	andeq	r5, r0, r8, lsl #26
     678:	0001e600 	andeq	lr, r1, r0, lsl #12
     67c:	00760f00 	rsbseq	r0, r6, r0, lsl #30
     680:	07ff0000 	ldrbeq	r0, [pc, r0]!
     684:	004c0400 	subeq	r0, ip, r0, lsl #8
     688:	30050000 	andcc	r0, r5, r0
     68c:	00000185 	andeq	r0, r0, r5, lsl #3
     690:	0c005110 	stfeqs	f5, [r0], {16}
     694:	02200801 	eoreq	r0, r0, #65536	; 0x10000
     698:	930d0000 	movwls	r0, #53248	; 0xd000
     69c:	01000004 	tsteq	r0, r4
     6a0:	00022009 	andeq	r2, r2, r9
     6a4:	280d0000 	stmdacs	sp, {}	; <UNPREDICTABLE>
     6a8:	01000004 	tsteq	r0, r4
     6ac:	00022009 	andeq	r2, r2, r9
     6b0:	630e0400 	movwvs	r0, #58368	; 0xe400
     6b4:	0100746e 	tsteq	r0, lr, ror #8
     6b8:	00002c0a 	andeq	r2, r0, sl, lsl #24
     6bc:	06000800 	streq	r0, [r0], -r0, lsl #16
     6c0:	0001e604 	andeq	lr, r1, r4, lsl #12
     6c4:	5f511100 	svcpl	0x00511100
     6c8:	0b010074 	bleq	408a0 <__bss_end__+0x35180>
     6cc:	000001f1 	strdeq	r0, [r0], -r1
     6d0:	00050212 	andeq	r0, r5, r2, lsl r2
     6d4:	200e0100 	andcs	r0, lr, r0, lsl #2
     6d8:	c4000002 	strgt	r0, [r0], #-2
     6dc:	08000081 	stmdaeq	r0, {r0, r7}
     6e0:	01000000 	mrseq	r0, (UNDEF: 0)
     6e4:	0002589c 	muleq	r2, ip, r8
     6e8:	00711300 	rsbseq	r1, r1, r0, lsl #6
     6ec:	02580e01 	subseq	r0, r8, #1, 28
     6f0:	00fa0000 	rscseq	r0, sl, r0
     6f4:	06000000 	streq	r0, [r0], -r0
     6f8:	00022604 	andeq	r2, r2, r4, lsl #12
     6fc:	050a1200 	streq	r1, [sl, #-512]	; 0x200
     700:	0f010000 	svceq	0x00010000
     704:	00000220 	andeq	r0, r0, r0, lsr #4
     708:	000081cc 	andeq	r8, r0, ip, asr #3
     70c:	00000008 	andeq	r0, r0, r8
     710:	02859c01 	addeq	r9, r5, #256	; 0x100
     714:	65130000 	ldrvs	r0, [r3, #-0]
     718:	200f0100 	andcs	r0, pc, r0, lsl #2
     71c:	1b000002 	blne	72c <_start-0x78d4>
     720:	00000001 	andeq	r0, r0, r1
     724:	00037012 	andeq	r7, r3, r2, lsl r0
     728:	2c100100 	ldfcss	f0, [r0], {-0}
     72c:	d4000000 	strle	r0, [r0], #-0
     730:	08000081 	stmdaeq	r0, {r0, r7}
     734:	01000000 	mrseq	r0, (UNDEF: 0)
     738:	0002ac9c 	muleq	r2, ip, ip
     73c:	00711300 	rsbseq	r1, r1, r0, lsl #6
     740:	02581001 	subseq	r1, r8, #1
     744:	013c0000 	teqeq	ip, r0
     748:	14000000 	strne	r0, [r0], #-0
     74c:	0000046b 	andeq	r0, r0, fp, ror #8
     750:	81dc2b01 	bicshi	r2, ip, r1, lsl #22
     754:	00380000 	eorseq	r0, r8, r0
     758:	9c010000 	stcls	0, cr0, [r1], {-0}
     75c:	000002d8 	ldrdeq	r0, [r0], -r8
     760:	01007115 	tsteq	r0, r5, lsl r1
     764:	0002582b 	andeq	r5, r2, fp, lsr #16
     768:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
     76c:	2b010065 	blcs	40908 <__bss_end__+0x351e8>
     770:	00000220 	andeq	r0, r0, r0, lsr #4
     774:	14005101 	strne	r5, [r0], #-257	; 0x101
     778:	00000317 	andeq	r0, r0, r7, lsl r3
     77c:	82143701 	andshi	r3, r4, #262144	; 0x40000
     780:	00280000 	eoreq	r0, r8, r0
     784:	9c010000 	stcls	0, cr0, [r1], {-0}
     788:	00000304 	andeq	r0, r0, r4, lsl #6
     78c:	01007115 	tsteq	r0, r5, lsl r1
     790:	00025837 	andeq	r5, r2, r7, lsr r8
     794:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
     798:	37010065 	strcc	r0, [r1, -r5, rrx]
     79c:	00000220 	andeq	r0, r0, r0, lsr #4
     7a0:	14005101 	strne	r5, [r0], #-257	; 0x101
     7a4:	00000463 	andeq	r0, r0, r3, ror #8
     7a8:	823c2c02 	eorshi	r2, ip, #512	; 0x200
     7ac:	00180000 	andseq	r0, r8, r0
     7b0:	9c010000 	stcls	0, cr0, [r1], {-0}
     7b4:	00000342 	andeq	r0, r0, r2, asr #6
     7b8:	00687413 	rsbeq	r7, r8, r3, lsl r4
     7bc:	02202c02 	eoreq	r2, r0, #512	; 0x200
     7c0:	015d0000 	cmpeq	sp, r0
     7c4:	4c160000 	ldcmi	0, cr0, [r6], {-0}
     7c8:	d8000082 	stmdale	r0, {r1, r7}
     7cc:	17000002 	strne	r0, [r0, -r2]
     7d0:	f3035101 	vrhadd.u8	d5, d3, d1
     7d4:	01175001 	tsteq	r7, r1
     7d8:	e0030550 	and	r0, r3, r0, asr r5
     7dc:	000000b2 	strheq	r0, [r0], -r2
     7e0:	03db1200 	bicseq	r1, fp, #0, 4
     7e4:	12010000 	andne	r0, r1, #0
     7e8:	00000025 	andeq	r0, r0, r5, lsr #32
     7ec:	00008254 	andeq	r8, r0, r4, asr r2
     7f0:	00000084 	andeq	r0, r0, r4, lsl #1
     7f4:	040c9c01 	streq	r9, [ip], #-3073	; 0xc01
     7f8:	71130000 	tstvc	r3, r0
     7fc:	58120100 	ldmdapl	r2, {r8}
     800:	89000002 	stmdbhi	r0, {r1}
     804:	18000001 	stmdane	r0, {r0}
     808:	000001f8 	strdeq	r0, [r0], -r8
     80c:	0000040c 	andeq	r0, r0, ip, lsl #8
     810:	a96c0305 	stmdbge	ip!, {r0, r2, r8, r9}^
     814:	6c190000 	ldcvs	0, cr0, [r9], {-0}
     818:	85000082 	strhi	r0, [r0, #-130]	; 0x82
     81c:	8b000002 	blhi	82c <_start-0x77d4>
     820:	17000003 	strne	r0, [r0, -r3]
     824:	74025001 	strvc	r5, [r2], #-1
     828:	781a0000 	ldmdavc	sl, {}	; <UNPREDICTABLE>
     82c:	e4000082 	str	r0, [r0], #-130	; 0x82
     830:	19000009 	stmdbne	r0, {r0, r3}
     834:	0000828c 	andeq	r8, r0, ip, lsl #5
     838:	000009eb 	andeq	r0, r0, fp, ror #19
     83c:	000003c2 	andeq	r0, r0, r2, asr #7
     840:	01530117 	cmpeq	r3, r7, lsl r1
     844:	52011745 	andpl	r1, r1, #18087936	; 0x1140000
     848:	a96c0305 	stmdbge	ip!, {r0, r2, r8, r9}^
     84c:	01170000 	tsteq	r7, r0
     850:	e0030551 	and	r0, r3, r1, asr r5
     854:	170000a9 	strne	r0, [r0, -r9, lsr #1]
     858:	03055001 	movweq	r5, #20481	; 0x5001
     85c:	0000a9c0 	andeq	sl, r0, r0, asr #19
     860:	82901a00 	addshi	r1, r0, #0, 20
     864:	0a010000 	beq	4086c <__bss_end__+0x3514c>
     868:	a01a0000 	andsge	r0, sl, r0
     86c:	e4000082 	str	r0, [r0], #-130	; 0x82
     870:	19000009 	stmdbne	r0, {r0, r3}
     874:	000082b4 			; <UNDEFINED> instruction: 0x000082b4
     878:	000009eb 	andeq	r0, r0, fp, ror #19
     87c:	00000402 	andeq	r0, r0, r2, lsl #8
     880:	01530117 	cmpeq	r3, r7, lsl r1
     884:	52011746 	andpl	r1, r1, #18350080	; 0x1180000
     888:	a96c0305 	stmdbge	ip!, {r0, r2, r8, r9}^
     88c:	01170000 	tsteq	r7, r0
     890:	e0030551 	and	r0, r3, r1, asr r5
     894:	170000a9 	strne	r0, [r0, -r9, lsr #1]
     898:	03055001 	movweq	r5, #20481	; 0x5001
     89c:	0000a9e4 	andeq	sl, r0, r4, ror #19
     8a0:	82b81a00 	adcshi	r1, r8, #0, 20
     8a4:	0a010000 	beq	408ac <__bss_end__+0x3518c>
     8a8:	07000000 	streq	r0, [r0, -r0]
     8ac:	00000091 	muleq	r0, r1, r0
     8b0:	00040b12 	andeq	r0, r4, r2, lsl fp
     8b4:	201b0100 	andscs	r0, fp, r0, lsl #2
     8b8:	d8000002 	stmdale	r0, {r1}
     8bc:	98000082 	stmdals	r0, {r1, r7}
     8c0:	01000000 	mrseq	r0, (UNDEF: 0)
     8c4:	0004ea9c 	muleq	r4, ip, sl
     8c8:	00711300 	rsbseq	r1, r1, r0, lsl #6
     8cc:	02581b01 	subseq	r1, r8, #1024	; 0x400
     8d0:	01bd0000 			; <UNDEFINED> instruction: 0x01bd0000
     8d4:	f8180000 			; <UNDEFINED> instruction: 0xf8180000
     8d8:	fa000001 	blx	8e4 <_start-0x771c>
     8dc:	05000004 	streq	r0, [r0, #-4]
     8e0:	00a97403 	adceq	r7, r9, r3, lsl #8
     8e4:	00651b00 	rsbeq	r1, r5, r0, lsl #22
     8e8:	02201e01 	eoreq	r1, r0, #1, 28
     8ec:	02100000 	andseq	r0, r0, #0
     8f0:	e81a0000 	ldmda	sl, {}	; <UNPREDICTABLE>
     8f4:	e4000082 	str	r0, [r0], #-130	; 0x82
     8f8:	19000009 	stmdbne	r0, {r0, r3}
     8fc:	000082fc 	strdeq	r8, [r0], -ip
     900:	000009eb 	andeq	r0, r0, fp, ror #19
     904:	0000048a 	andeq	r0, r0, sl, lsl #9
     908:	01530117 	cmpeq	r3, r7, lsl r1
     90c:	5201174c 	andpl	r1, r1, #76, 14	; 0x1300000
     910:	a9740305 	ldmdbge	r4!, {r0, r2, r8, r9}^
     914:	01170000 	tsteq	r7, r0
     918:	e0030551 	and	r0, r3, r1, asr r5
     91c:	170000a9 	strne	r0, [r0, -r9, lsr #1]
     920:	03055001 	movweq	r5, #20481	; 0x5001
     924:	0000aa14 	andeq	sl, r0, r4, lsl sl
     928:	83001a00 	movwhi	r1, #2560	; 0xa00
     92c:	0a010000 	beq	40934 <__bss_end__+0x35214>
     930:	10190000 	andsne	r0, r9, r0
     934:	42000083 	andmi	r0, r0, #131	; 0x83
     938:	a8000003 	stmdage	r0, {r0, r1}
     93c:	17000004 	strne	r0, [r0, -r4]
     940:	f3035001 	vhadd.u8	d5, d3, d1
     944:	1a005001 	bne	14950 <__bss_end__+0x9230>
     948:	0000831c 	andeq	r8, r0, ip, lsl r3
     94c:	000009e4 	andeq	r0, r0, r4, ror #19
     950:	00833019 	addeq	r3, r3, r9, lsl r0
     954:	0009eb00 	andeq	lr, r9, r0, lsl #22
     958:	0004e000 	andeq	lr, r4, r0
     95c:	53011700 	movwpl	r1, #5888	; 0x1700
     960:	17200802 	strne	r0, [r0, -r2, lsl #16]!
     964:	03055201 	movweq	r5, #20993	; 0x5201
     968:	0000a974 	andeq	sl, r0, r4, ror r9
     96c:	05510117 	ldrbeq	r0, [r1, #-279]	; 0x117
     970:	00a9e003 	adceq	lr, r9, r3
     974:	50011700 	andpl	r1, r1, r0, lsl #14
     978:	aa3c0305 	bge	f01594 <__bss_end__+0xef5e74>
     97c:	1a000000 	bne	984 <_start-0x767c>
     980:	00008334 	andeq	r8, r0, r4, lsr r3
     984:	00000a01 	andeq	r0, r0, r1, lsl #20
     988:	007f0800 	rsbseq	r0, pc, r0, lsl #16
     98c:	04fa0000 	ldrbteq	r0, [sl], #0
     990:	76090000 	strvc	r0, [r9], -r0
     994:	05000000 	streq	r0, [r0, #-0]
     998:	04ea0700 	strbteq	r0, [sl], #1792	; 0x700
     99c:	33120000 	tstcc	r2, #0
     9a0:	02000004 	andeq	r0, r0, #4
     9a4:	0002201f 	andeq	r2, r2, pc, lsl r0
     9a8:	00837000 	addeq	r7, r3, r0
     9ac:	00008400 	andeq	r8, r0, r0, lsl #8
     9b0:	a79c0100 	ldrge	r0, [ip, r0, lsl #2]
     9b4:	1b000005 	blne	9d0 <_start-0x7630>
     9b8:	20020074 	andcs	r0, r2, r4, ror r0
     9bc:	00000220 	andeq	r0, r0, r0, lsr #4
     9c0:	0000022e 	andeq	r0, r0, lr, lsr #4
     9c4:	0001f818 	andeq	pc, r1, r8, lsl r8	; <UNPREDICTABLE>
     9c8:	0005b700 	andeq	fp, r5, r0, lsl #14
     9cc:	7c030500 	cfstr32vc	mvfx0, [r3], {-0}
     9d0:	190000a9 	stmdbne	r0, {r0, r3, r5, r7}
     9d4:	0000837c 	andeq	r8, r0, ip, ror r3
     9d8:	00000411 	andeq	r0, r0, r1, lsl r4
     9dc:	0000054b 	andeq	r0, r0, fp, asr #10
     9e0:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     9e4:	00b2e003 	adcseq	lr, r2, r3
     9e8:	90190000 	andsls	r0, r9, r0
     9ec:	08000083 	stmdaeq	r0, {r0, r1, r7}
     9f0:	6500000a 	strvs	r0, [r0, #-10]
     9f4:	17000005 	strne	r0, [r0, -r5]
     9f8:	38015101 	stmdacc	r1, {r0, r8, ip, lr}
     9fc:	03500117 	cmpeq	r0, #-1073741819	; 0xc0000005
     a00:	0020100a 	eoreq	r1, r0, sl
     a04:	0083ac1a 	addeq	sl, r3, sl, lsl ip
     a08:	0009e400 	andeq	lr, r9, r0, lsl #8
     a0c:	83c01900 	bichi	r1, r0, #0, 18
     a10:	09eb0000 	stmibeq	fp!, {}^	; <UNPREDICTABLE>
     a14:	059d0000 	ldreq	r0, [sp]
     a18:	01170000 	tsteq	r7, r0
     a1c:	27080253 	smlsdcs	r8, r3, r2, r0
     a20:	05520117 	ldrbeq	r0, [r2, #-279]	; 0x117
     a24:	00a97c03 	adceq	r7, r9, r3, lsl #24
     a28:	51011700 	tstpl	r1, r0, lsl #14
     a2c:	aab80305 	bge	fee01648 <__bss_end__+0xfedf5f28>
     a30:	01170000 	tsteq	r7, r0
     a34:	58030550 	stmdapl	r3, {r4, r6, r8, sl}
     a38:	000000aa 	andeq	r0, r0, sl, lsr #1
     a3c:	0083c41a 	addeq	ip, r3, sl, lsl r4
     a40:	000a0100 	andeq	r0, sl, r0, lsl #2
     a44:	7f080000 	svcvc	0x00080000
     a48:	b7000000 	strlt	r0, [r0, -r0]
     a4c:	09000005 	stmdbeq	r0, {r0, r2}
     a50:	00000076 	andeq	r0, r0, r6, ror r0
     a54:	a7070008 	strge	r0, [r7, -r8]
     a58:	1c000005 	stcne	0, cr0, [r0], {5}
     a5c:	00000294 	muleq	r0, r4, r2
     a60:	02201802 	eoreq	r1, r0, #131072	; 0x20000
     a64:	83f40000 	mvnshi	r0, #0
     a68:	00100000 	andseq	r0, r0, r0
     a6c:	9c010000 	stcls	0, cr0, [r1], {-0}
     a70:	000d7b1d 	andeq	r7, sp, sp, lsl fp
     a74:	043b0200 	ldrteq	r0, [fp], #-512	; 0x200
     a78:	9c000084 	stcls	0, cr0, [r0], {132}	; 0x84
     a7c:	01000000 	mrseq	r0, (UNDEF: 0)
     a80:	0006da9c 	muleq	r6, ip, sl
     a84:	63701300 	cmnvs	r0, #0, 6
     a88:	2c3b0200 	lfmcs	f0, 4, [fp], #-0
     a8c:	57000000 	strpl	r0, [r0, -r0]
     a90:	1e000002 	cdpne	0, 0, cr0, cr0, cr2, {0}
     a94:	000004cd 	andeq	r0, r0, sp, asr #9
     a98:	002c3e02 	eoreq	r3, ip, r2, lsl #28
     a9c:	02780000 	rsbseq	r0, r8, #0
     aa0:	281f0000 	ldmdacs	pc, {}	; <UNPREDICTABLE>
     aa4:	02000005 	andeq	r0, r0, #5
     aa8:	00022045 	andeq	r2, r2, r5, asr #32
     aac:	1e540100 	rdfnes	f0, f4, f0
     ab0:	00000498 	muleq	r0, r8, r4
     ab4:	02205102 	eoreq	r5, r0, #-2147483648	; 0x80000000
     ab8:	028b0000 	addeq	r0, fp, #0
     abc:	0c1a0000 	ldceq	0, cr0, [sl], {-0}
     ac0:	22000084 	andcs	r0, r0, #132	; 0x84
     ac4:	1900000a 	stmdbne	r0, {r1, r3}
     ac8:	00008414 	andeq	r8, r0, r4, lsl r4
     acc:	00000a29 	andeq	r0, r0, r9, lsr #20
     ad0:	0000063f 	andeq	r0, r0, pc, lsr r6
     ad4:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     ad8:	00b2000c 	adcseq	r0, r2, ip
     adc:	28190020 	ldmdacs	r9, {r5}
     ae0:	3e000084 	cdpcc	0, 0, cr0, cr0, cr4, {4}
     ae4:	5b00000a 	blpl	b14 <_start-0x74ec>
     ae8:	17000006 	strne	r0, [r0, -r6]
     aec:	31015101 	tstcc	r1, r1, lsl #2
     af0:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     af4:	00b40c0c 	adcseq	r0, r4, ip, lsl #24
     af8:	2c1a0020 	ldccs	0, cr0, [sl], {32}
     afc:	22000084 	andcs	r0, r0, #132	; 0x84
     b00:	1900000a 	stmdbne	r0, {r1, r3}
     b04:	00008448 	andeq	r8, r0, r8, asr #8
     b08:	00000304 	andeq	r0, r0, r4, lsl #6
     b0c:	00000678 	andeq	r0, r0, r8, ror r6
     b10:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     b14:	19000074 	stmdbne	r0, {r2, r4, r5, r6}
     b18:	00008458 	andeq	r8, r0, r8, asr r4
     b1c:	000002ac 	andeq	r0, r0, ip, lsr #5
     b20:	00000695 	muleq	r0, r5, r6
     b24:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
     b28:	01170074 	tsteq	r7, r4, ror r0
     b2c:	f4030550 	vst3.16	{d0,d2,d4}, [r3 :64], r0
     b30:	000000b2 	strheq	r0, [r0], -r2
     b34:	00846019 	addeq	r6, r4, r9, lsl r0
     b38:	00028500 	andeq	r8, r2, r0, lsl #10
     b3c:	0006ac00 	andeq	sl, r6, r0, lsl #24
     b40:	50011700 	andpl	r1, r1, r0, lsl #14
     b44:	b2f40305 	rscslt	r0, r4, #335544320	; 0x14000000
     b48:	1a000000 	bne	b50 <_start-0x74b0>
     b4c:	0000846c 	andeq	r8, r0, ip, ror #8
     b50:	00000a54 	andeq	r0, r0, r4, asr sl
     b54:	00847819 	addeq	r7, r4, r9, lsl r8
     b58:	00041100 	andeq	r1, r4, r0, lsl #2
     b5c:	0006c900 	andeq	ip, r6, r0, lsl #18
     b60:	50011700 	andpl	r1, r1, r0, lsl #14
     b64:	00147502 	andseq	r7, r4, r2, lsl #10
     b68:	00848c16 	addeq	r8, r4, r6, lsl ip
     b6c:	000a5b00 	andeq	r5, sl, r0, lsl #22
     b70:	50011700 	andpl	r1, r1, r0, lsl #14
     b74:	00107402 	andseq	r7, r0, r2, lsl #8
     b78:	01712000 	cmneq	r1, r0
     b7c:	58020000 	stmdapl	r2, {}	; <UNPREDICTABLE>
     b80:	00000220 	andeq	r0, r0, r0, lsr #4
     b84:	000084a0 	andeq	r8, r0, r0, lsr #9
     b88:	00000054 	andeq	r0, r0, r4, asr r0
     b8c:	07489c01 	strbeq	r9, [r8, -r1, lsl #24]
     b90:	e6210000 	strt	r0, [r1], -r0
     b94:	02000000 	andeq	r0, r0, #0
     b98:	00075358 	andeq	r5, r7, r8, asr r3
     b9c:	0002b800 	andeq	fp, r2, r0, lsl #16
     ba0:	72611300 	rsbvc	r1, r1, #0, 6
     ba4:	58020067 	stmdapl	r2, {r0, r1, r2, r5, r6}
     ba8:	0000007d 	andeq	r0, r0, sp, ror r0
     bac:	000002d6 	ldrdeq	r0, [r0], -r6
     bb0:	0200741b 	andeq	r7, r0, #452984832	; 0x1b000000
     bb4:	00022059 	andeq	r2, r2, r9, asr r0
     bb8:	0002f400 	andeq	pc, r2, r0, lsl #8
     bbc:	04742200 	ldrbteq	r2, [r4], #-512	; 0x200
     bc0:	60020000 	andvs	r0, r2, r0
     bc4:	0084b01a 	addeq	fp, r4, sl, lsl r0
     bc8:	0004ff00 	andeq	pc, r4, r0, lsl #30
     bcc:	84e41600 	strbthi	r1, [r4], #1536	; 0x600
     bd0:	02ac0000 	adceq	r0, ip, #0
     bd4:	01170000 	tsteq	r7, r0
     bd8:	00740251 	rsbseq	r0, r4, r1, asr r2
     bdc:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     be0:	00b2f403 	adcseq	pc, r2, r3, lsl #8
     be4:	23000000 	movwcs	r0, #0
     be8:	00000753 	andeq	r0, r0, r3, asr r7
     bec:	00007d24 	andeq	r7, r0, r4, lsr #26
     bf0:	04060000 	streq	r0, [r6], #-0
     bf4:	00000748 	andeq	r0, r0, r8, asr #14
     bf8:	00001c1d 	andeq	r1, r0, sp, lsl ip
     bfc:	f46d0200 	vld1.8	{d16-d19}, [sp], r0
     c00:	18000084 	stmdane	r0, {r2, r7}
     c04:	01000000 	mrseq	r0, (UNDEF: 0)
     c08:	00077c9c 	muleq	r7, ip, ip
     c0c:	032b2500 	teqeq	fp, #0, 10
     c10:	6d020000 	stcvs	0, cr0, [r2, #-0]
     c14:	00000025 	andeq	r0, r0, r5, lsr #32
     c18:	1d005001 	stcne	0, cr5, [r0, #-4]
     c1c:	00000000 	andeq	r0, r0, r0
     c20:	850c8302 	strhi	r8, [ip, #-770]	; 0x302
     c24:	00480000 	subeq	r0, r8, r0
     c28:	9c010000 	stcls	0, cr0, [r1], {-0}
     c2c:	000007f2 	strdeq	r0, [r0], -r2
     c30:	00853026 	addeq	r3, r5, r6, lsr #32
     c34:	00000800 	andeq	r0, r0, r0, lsl #16
     c38:	0007aa00 	andeq	sl, r7, r0, lsl #20
     c3c:	6e692700 	cdpvs	7, 6, cr2, cr9, cr0, {0}
     c40:	2c940200 	lfmcs	f0, 4, [r4], {0}
     c44:	01000000 	mrseq	r0, (UNDEF: 0)
     c48:	85181900 	ldrhi	r1, [r8, #-2304]	; 0x900
     c4c:	03420000 	movteq	r0, #8192	; 0x2000
     c50:	07c10000 	strbeq	r0, [r1, r0]
     c54:	01170000 	tsteq	r7, r0
     c58:	f4030550 	vst3.16	{d0,d2,d4}, [r3 :64], r0
     c5c:	000000b2 	strheq	r0, [r0], -r2
     c60:	0085241a 	addeq	r2, r5, sl, lsl r4
     c64:	0004ff00 	andeq	pc, r4, r0, lsl #30
     c68:	853c1a00 	ldrhi	r1, [ip, #-2560]!	; 0xa00
     c6c:	0a770000 	beq	1dc0c74 <__bss_end__+0x1db5554>
     c70:	44190000 	ldrmi	r0, [r9], #-0
     c74:	7e000085 	cdpvc	0, 0, cr0, cr0, cr5, {4}
     c78:	e800000a 	stmda	r0, {r1, r3}
     c7c:	17000007 	strne	r0, [r0, -r7]
     c80:	0a035001 	beq	d4c8c <__bss_end__+0xc956c>
     c84:	1a000500 	bne	208c <_start-0x5f74>
     c88:	00008548 	andeq	r8, r0, r8, asr #10
     c8c:	00000a8f 	andeq	r0, r0, pc, lsl #21
     c90:	04e71d00 	strbteq	r1, [r7], #3328	; 0xd00
     c94:	9b020000 	blls	80c9c <__bss_end__+0x7557c>
     c98:	00008554 	andeq	r8, r0, r4, asr r5
     c9c:	0000002c 	andeq	r0, r0, ip, lsr #32
     ca0:	08589c01 	ldmdaeq	r8, {r0, sl, fp, ip, pc}^
     ca4:	f8180000 			; <UNDEFINED> instruction: 0xf8180000
     ca8:	68000001 	stmdavs	r0, {r0}
     cac:	05000008 	streq	r0, [r0, #-8]
     cb0:	00a98803 	adceq	r8, r9, r3, lsl #16
     cb4:	855c1a00 	ldrbhi	r1, [ip, #-2560]	; 0xa00
     cb8:	09e40000 	stmibeq	r4!, {}^	; <UNPREDICTABLE>
     cbc:	70190000 	andsvc	r0, r9, r0
     cc0:	eb000085 	bl	edc <_start-0x7124>
     cc4:	4e000009 	cdpmi	0, 0, cr0, cr0, cr9, {0}
     cc8:	17000008 	strne	r0, [r0, -r8]
     ccc:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     cd0:	5201179c 	andpl	r1, r1, #156, 14	; 0x2700000
     cd4:	a9880305 	stmibge	r8, {r0, r2, r8, r9}
     cd8:	01170000 	tsteq	r7, r0
     cdc:	b8030551 	stmdalt	r3, {r0, r4, r6, r8, sl}
     ce0:	170000aa 	strne	r0, [r0, -sl, lsr #1]
     ce4:	03055001 	movweq	r5, #20481	; 0x5001
     ce8:	0000aac8 	andeq	sl, r0, r8, asr #21
     cec:	85741a00 	ldrbhi	r1, [r4, #-2560]!	; 0xa00
     cf0:	0a010000 	beq	40cf8 <__bss_end__+0x355d8>
     cf4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     cf8:	0000007f 	andeq	r0, r0, pc, ror r0
     cfc:	00000868 	andeq	r0, r0, r8, ror #16
     d00:	00007609 	andeq	r7, r0, r9, lsl #12
     d04:	07001a00 	streq	r1, [r0, -r0, lsl #20]
     d08:	00000858 	andeq	r0, r0, r8, asr r8
     d0c:	00023f1d 	andeq	r3, r2, sp, lsl pc
     d10:	80a40200 	adchi	r0, r4, r0, lsl #4
     d14:	98000085 	stmdals	r0, {r0, r2, r7}
     d18:	01000000 	mrseq	r0, (UNDEF: 0)
     d1c:	0008f39c 	muleq	r8, ip, r3
     d20:	68741300 	ldmdavs	r4!, {r8, r9, ip}^
     d24:	20a40200 	adccs	r0, r4, r0, lsl #4
     d28:	12000002 	andne	r0, r0, #2
     d2c:	28000003 	stmdacs	r0, {r0, r1}
     d30:	00008598 	muleq	r0, r8, r5
     d34:	00000080 	andeq	r0, r0, r0, lsl #1
     d38:	0004221e 	andeq	r2, r4, lr, lsl r2
     d3c:	2caa0200 	sfmcs	f0, 4, [sl]
     d40:	30000000 	andcc	r0, r0, r0
     d44:	1e000003 	cdpne	0, 0, cr0, cr0, cr3, {0}
     d48:	0000045e 	andeq	r0, r0, lr, asr r4
     d4c:	0220ab02 	eoreq	sl, r0, #2048	; 0x800
     d50:	035b0000 	cmpeq	fp, #0
     d54:	b0190000 	andslt	r0, r9, r0
     d58:	31000085 	smlabbcc	r0, r5, r0, r0
     d5c:	cb000002 	blgt	d6c <_start-0x7294>
     d60:	17000008 	strne	r0, [r0, -r8]
     d64:	78025001 	stmdavc	r2, {r0, ip, lr}
     d68:	d01a0000 	andsle	r0, sl, r0
     d6c:	5e000085 	cdppl	0, 0, cr0, cr0, cr5, {4}
     d70:	19000002 	stmdbne	r0, {r1}
     d74:	000085ec 	andeq	r8, r0, ip, ror #11
     d78:	00000231 	andeq	r0, r0, r1, lsr r2
     d7c:	000008e8 	andeq	r0, r0, r8, ror #17
     d80:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     d84:	1a000074 	bne	f5c <_start-0x70a4>
     d88:	000085fc 	strdeq	r8, [r0], -ip
     d8c:	0000025e 	andeq	r0, r0, lr, asr r2
     d90:	a81d0000 	ldmdage	sp, {}	; <UNPREDICTABLE>
     d94:	02000004 	andeq	r0, r0, #4
     d98:	008618ca 	addeq	r1, r6, sl, asr #17
     d9c:	00002c00 	andeq	r2, r0, r0, lsl #24
     da0:	689c0100 	ldmvs	ip, {r8}
     da4:	21000009 	tstcs	r0, r9
     da8:	00000b2d 	andeq	r0, r0, sp, lsr #22
     dac:	005dca02 	subseq	ip, sp, r2, lsl #20
     db0:	038f0000 	orreq	r0, pc, #0
     db4:	f8180000 			; <UNDEFINED> instruction: 0xf8180000
     db8:	68000001 	stmdavs	r0, {r0}
     dbc:	05000009 	streq	r0, [r0, #-9]
     dc0:	00a9a403 	adceq	sl, r9, r3, lsl #8
     dc4:	86201a00 	strthi	r1, [r0], -r0, lsl #20
     dc8:	09e40000 	stmibeq	r4!, {}^	; <UNPREDICTABLE>
     dcc:	34190000 	ldrcc	r0, [r9], #-0
     dd0:	eb000086 	bl	ff0 <_start-0x7010>
     dd4:	5e000009 	cdppl	0, 0, cr0, cr0, cr9, {0}
     dd8:	17000009 	strne	r0, [r0, -r9]
     ddc:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
     de0:	520117cb 	andpl	r1, r1, #53215232	; 0x32c0000
     de4:	a9a40305 	stmibge	r4!, {r0, r2, r8, r9}
     de8:	01170000 	tsteq	r7, r0
     dec:	b8030551 	stmdalt	r3, {r0, r4, r6, r8, sl}
     df0:	170000aa 	strne	r0, [r0, -sl, lsr #1]
     df4:	03055001 	movweq	r5, #20481	; 0x5001
     df8:	0000aac8 	andeq	sl, r0, r8, asr #21
     dfc:	86381a00 	ldrthi	r1, [r8], -r0, lsl #20
     e00:	0a010000 	beq	40e08 <__bss_end__+0x356e8>
     e04:	07000000 	streq	r0, [r0, -r0]
     e08:	00000858 	andeq	r0, r0, r8, asr r8
     e0c:	0004a31f 	andeq	sl, r4, pc, lsl r3
     e10:	260b0200 	strcs	r0, [fp], -r0, lsl #4
     e14:	05000002 	streq	r0, [r0, #-2]
     e18:	00b2f403 	adcseq	pc, r2, r3, lsl #8
     e1c:	03a61f00 			; <UNDEFINED> instruction: 0x03a61f00
     e20:	0b020000 	bleq	80e28 <__bss_end__+0x75708>
     e24:	00000226 	andeq	r0, r0, r6, lsr #4
     e28:	b2e00305 	rsclt	r0, r0, #335544320	; 0x14000000
     e2c:	1d1f0000 	ldcne	0, cr0, [pc, #-0]	; e34 <_start-0x71cc>
     e30:	02000005 	andeq	r0, r0, #5
     e34:	0002200d 	andeq	r2, r2, sp
     e38:	f0030500 			; <UNDEFINED> instruction: 0xf0030500
     e3c:	1f0000b2 	svcne	0x000000b2
     e40:	00000411 	andeq	r0, r0, r1, lsl r4
     e44:	02201002 	eoreq	r1, r0, #2
     e48:	03050000 	movweq	r0, #20480	; 0x5000
     e4c:	0000b300 	andeq	fp, r0, r0, lsl #6
     e50:	64697429 	strbtvs	r7, [r9], #-1065	; 0x429
     e54:	2c130200 	lfmcs	f0, 4, [r3], {-0}
     e58:	05000000 	streq	r0, [r0, #-0]
     e5c:	00a7c803 	adceq	ip, r7, r3, lsl #16
     e60:	05331f00 	ldreq	r1, [r3, #-3840]!	; 0xf00
     e64:	15020000 	strne	r0, [r2, #-0]
     e68:	0000002c 	andeq	r0, r0, ip, lsr #32
     e6c:	b2ec0305 	rsclt	r0, ip, #335544320	; 0x14000000
     e70:	3c2a0000 	stccc	0, cr0, [sl], #-0
     e74:	03000000 	movweq	r0, #0
     e78:	0000a180 	andeq	sl, r0, r0, lsl #3
     e7c:	18030500 	stmdane	r3, {r8, sl}
     e80:	220000b7 	andcs	r0, r0, #183	; 0xb7
     e84:	000002f2 	strdeq	r0, [r0], -r2
     e88:	9c2b1e07 	stcls	14, cr1, [fp], #-28	; 0xffffffe4
     e8c:	07000006 	streq	r0, [r0, -r6]
     e90:	00002529 	andeq	r2, r0, r9, lsr #10
     e94:	000a0100 	andeq	r0, sl, r0, lsl #2
     e98:	00862400 	addeq	r2, r6, r0, lsl #8
     e9c:	002c0000 	eoreq	r0, ip, r0
     ea0:	00013422 	andeq	r3, r1, r2, lsr #8
     ea4:	2b660700 	blcs	1982aac <__bss_end__+0x197738c>
     ea8:	0000038d 	andeq	r0, r0, sp, lsl #7
     eac:	007d6e07 	rsbseq	r6, sp, r7, lsl #28
     eb0:	0a220000 	beq	880eb8 <__bss_end__+0x875798>
     eb4:	2c240000 	stccs	0, cr0, [r4], #-0
     eb8:	24000000 	strcs	r0, [r0], #-0
     ebc:	0000002c 	andeq	r0, r0, ip, lsr #32
     ec0:	03e32200 	mvneq	r2, #0, 4
     ec4:	8a070000 	bhi	1c0ecc <__bss_end__+0x1b57ac>
     ec8:	00042d2b 	andeq	r2, r4, fp, lsr #26
     ecc:	2ca80700 	stccs	7, cr0, [r8]
     ed0:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
     ed4:	2400000a 	strcs	r0, [r0], #-10
     ed8:	0000002c 	andeq	r0, r0, ip, lsr #32
     edc:	05562d00 	ldrbeq	r2, [r6, #-3328]	; 0xd00
     ee0:	9c070000 	stcls	0, cr0, [r7], {-0}
     ee4:	00000a54 	andeq	r0, r0, r4, asr sl
     ee8:	00002c24 	andeq	r2, r0, r4, lsr #24
     eec:	002c2400 	eoreq	r2, ip, r0, lsl #8
     ef0:	22000000 	andcs	r0, r0, #0
     ef4:	0000053c 	andeq	r0, r0, ip, lsr r5
     ef8:	522d3204 	eorpl	r3, sp, #4, 4	; 0x40000000
     efc:	05000003 	streq	r0, [r0, #-3]
     f00:	000a7143 	andeq	r7, sl, r3, asr #2
     f04:	0a712400 	beq	1c49f0c <__bss_end__+0x1c3e7ec>
     f08:	71240000 	teqvc	r4, r0
     f0c:	0000000a 	andeq	r0, r0, sl
     f10:	005d0406 	subseq	r0, sp, r6, lsl #8
     f14:	3c220000 	stccc	0, cr0, [r2], #-0
     f18:	04000004 	streq	r0, [r0], #-4
     f1c:	03782d33 	cmneq	r8, #3264	; 0xcc0
     f20:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
     f24:	00000a8f 	andeq	r0, r0, pc, lsl #21
     f28:	00002c24 	andeq	r2, r0, r4, lsr #24
     f2c:	45220000 	strmi	r0, [r2, #-0]!
     f30:	04000004 	streq	r0, [r0], #-4
     f34:	09ce0031 	stmibeq	lr, {r0, r4, r5}^
     f38:	00040000 	andeq	r0, r4, r0
     f3c:	0000045a 	andeq	r0, r0, sl, asr r4
     f40:	00640104 	rsbeq	r0, r4, r4, lsl #2
     f44:	5c010000 	stcpl	0, cr0, [r1], {-0}
     f48:	94000005 	strls	r0, [r0], #-5
     f4c:	70000001 	andvc	r0, r0, r1
     f50:	38000087 	stmdacc	r0, {r0, r1, r2, r7}
     f54:	0a000005 	beq	f70 <_start-0x7090>
     f58:	02000004 	andeq	r0, r0, #4
     f5c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     f60:	95030074 	strls	r0, [r3, #-116]	; 0x74
     f64:	03000005 	movweq	r0, #5
     f68:	000037d4 	ldrdeq	r3, [r0], -r4
     f6c:	07040400 	streq	r0, [r4, -r0, lsl #8]
     f70:	00000232 	andeq	r0, r0, r2, lsr r2
     f74:	0d060104 	stfeqs	f0, [r6, #-16]
     f78:	04000001 	streq	r0, [r0], #-1
     f7c:	02ae0502 	adceq	r0, lr, #8388608	; 0x800000
     f80:	04040000 	streq	r0, [r4], #-0
     f84:	00027e05 	andeq	r7, r2, r5, lsl #28
     f88:	05080400 	streq	r0, [r8, #-1024]	; 0x400
     f8c:	00000279 	andeq	r0, r0, r9, ror r2
     f90:	0b080104 	bleq	2013a8 <__bss_end__+0x1f5c88>
     f94:	04000001 	streq	r0, [r0], #-1
     f98:	015e0702 	cmpeq	lr, r2, lsl #14
     f9c:	04040000 	streq	r0, [r4], #-0
     fa0:	00022d07 	andeq	r2, r2, r7, lsl #26
     fa4:	07080400 	streq	r0, [r8, -r0, lsl #8]
     fa8:	00000228 	andeq	r0, r0, r8, lsr #4
     fac:	5e070404 	cdppl	4, 0, cr0, cr7, cr4, {0}
     fb0:	05000002 	streq	r0, [r0, #-2]
     fb4:	08010404 	stmdaeq	r1, {r2, sl}
     fb8:	00000114 	andeq	r0, r0, r4, lsl r1
     fbc:	008c0406 	addeq	r0, ip, r6, lsl #8
     fc0:	7f070000 	svcvc	0x00070000
     fc4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     fc8:	0000007f 	andeq	r0, r0, pc, ror r0
     fcc:	000000a1 	andeq	r0, r0, r1, lsr #1
     fd0:	00007609 	andeq	r7, r0, r9, lsl #12
     fd4:	03000700 	movweq	r0, #1792	; 0x700
     fd8:	0000058f 	andeq	r0, r0, pc, lsl #11
     fdc:	005a1b02 	subseq	r1, sl, r2, lsl #22
     fe0:	140a0000 	strne	r0, [sl], #-0
     fe4:	06270220 	strteq	r0, [r7], -r0, lsr #4
     fe8:	0b000001 	bleq	ff4 <_start-0x700c>
     fec:	00000608 	andeq	r0, r0, r8, lsl #12
     ff0:	01172902 	tsteq	r7, r2, lsl #18
     ff4:	0c000000 	stceq	0, cr0, [r0], {-0}
     ff8:	000005f9 	strdeq	r0, [r0], -r9
     ffc:	00372a02 	eorseq	r2, r7, r2, lsl #20
    1000:	20000000 	andcs	r0, r0, r0
    1004:	0004930c 	andeq	r9, r4, ip, lsl #6
    1008:	1c2b0200 	sfmne	f0, 4, [fp], #-0
    100c:	04000001 	streq	r0, [r0], #-1
    1010:	04280c20 	strteq	r0, [r8], #-3104	; 0xc20
    1014:	2b020000 	blcs	8101c <__bss_end__+0x758fc>
    1018:	0000011c 	andeq	r0, r0, ip, lsl r1
    101c:	860c2008 	strhi	r2, [ip], -r8
    1020:	02000005 	andeq	r0, r0, #5
    1024:	00011c2e 	andeq	r1, r1, lr, lsr #24
    1028:	0d200c00 	stceq	12, cr0, [r0, #-0]
    102c:	000005a6 	andeq	r0, r0, r6, lsr #11
    1030:	00373002 	eorseq	r3, r7, r2
    1034:	01040000 	mrseq	r0, (UNDEF: 4)
    1038:	0020101f 	eoreq	r1, r0, pc, lsl r0
    103c:	0000a108 	andeq	sl, r0, r8, lsl #2
    1040:	00011700 	andeq	r1, r1, r0, lsl #14
    1044:	00760e00 	rsbseq	r0, r6, r0, lsl #28
    1048:	1fff0000 	svcne	0x00ff0000
    104c:	01060f00 	tsteq	r6, r0, lsl #30
    1050:	370f0000 	strcc	r0, [pc, -r0]
    1054:	03000000 	movweq	r0, #0
    1058:	00000625 	andeq	r0, r0, r5, lsr #12
    105c:	00ac3102 	adceq	r3, ip, r2, lsl #2
    1060:	ff100000 			; <UNDEFINED> instruction: 0xff100000
    1064:	02000005 	andeq	r0, r0, #5
    1068:	00003756 	andeq	r3, r0, r6, asr r7
    106c:	01460300 	mrseq	r0, SPSR_und
    1070:	71110000 	tstvc	r1, r0
    1074:	46560200 	ldrbmi	r0, [r6], -r0, lsl #4
    1078:	00000001 	andeq	r0, r0, r1
    107c:	01210406 	teqeq	r1, r6, lsl #8
    1080:	f0100000 			; <UNDEFINED> instruction: 0xf0100000
    1084:	02000005 	andeq	r0, r0, #5
    1088:	00002551 	andeq	r2, r0, r1, asr r5
    108c:	01660300 	cmneq	r6, r0, lsl #6
    1090:	71110000 	tstvc	r1, r0
    1094:	46510200 	ldrbmi	r0, [r1], -r0, lsl #4
    1098:	00000001 	andeq	r0, r0, r1
    109c:	00060e10 	andeq	r0, r6, r0, lsl lr
    10a0:	25540200 	ldrbcs	r0, [r4, #-512]	; 0x200
    10a4:	03000000 	movweq	r0, #0
    10a8:	00000180 	andeq	r0, r0, r0, lsl #3
    10ac:	02007111 	andeq	r7, r0, #1073741828	; 0x40000004
    10b0:	00014654 	andeq	r4, r1, r4, asr r6
    10b4:	67100000 	ldrvs	r0, [r0, -r0]
    10b8:	02000005 	andeq	r0, r0, #5
    10bc:	0000255a 	andeq	r2, r0, sl, asr r5
    10c0:	01ae0300 			; <UNDEFINED> instruction: 0x01ae0300
    10c4:	63110000 	tstvs	r1, #0
    10c8:	465a0200 	ldrbmi	r0, [sl], -r0, lsl #4
    10cc:	11000001 	tstne	r0, r1
    10d0:	5a020065 	bpl	8126c <__bss_end__+0x75b4c>
    10d4:	000001ae 	andeq	r0, r0, lr, lsr #3
    10d8:	00042812 	andeq	r2, r4, r2, lsl r8
    10dc:	375d0200 	ldrbcc	r0, [sp, -r0, lsl #4]
    10e0:	00000000 	andeq	r0, r0, r0
    10e4:	00a10406 	adceq	r0, r1, r6, lsl #8
    10e8:	c3100000 	tstgt	r0, #0
    10ec:	02000005 	andeq	r0, r0, #5
    10f0:	00003757 	andeq	r3, r0, r7, asr r7
    10f4:	01ce0300 	biceq	r0, lr, r0, lsl #6
    10f8:	71110000 	tstvc	r1, r0
    10fc:	46570200 	ldrbmi	r0, [r7], -r0, lsl #4
    1100:	00000001 	andeq	r0, r0, r1
    1104:	0005de10 	andeq	sp, r5, r0, lsl lr
    1108:	25640200 	strbcs	r0, [r4, #-512]!	; 0x200
    110c:	03000000 	movweq	r0, #0
    1110:	00000207 	andeq	r0, r0, r7, lsl #4
    1114:	02006311 	andeq	r6, r0, #1140850688	; 0x44000000
    1118:	00014664 	andeq	r4, r1, r4, ror #12
    111c:	00781100 	rsbseq	r1, r8, r0, lsl #2
    1120:	00a16402 	adceq	r6, r1, r2, lsl #8
    1124:	93120000 	tstls	r2, #0
    1128:	02000004 	andeq	r0, r0, #4
    112c:	00003765 	andeq	r3, r0, r5, ror #14
    1130:	04281200 	strteq	r1, [r8], #-512	; 0x200
    1134:	66020000 	strvs	r0, [r2], -r0
    1138:	00000037 	andeq	r0, r0, r7, lsr r0
    113c:	06161300 	ldreq	r1, [r6], -r0, lsl #6
    1140:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    1144:	00008770 	andeq	r8, r0, r0, ror r7
    1148:	00000080 	andeq	r0, r0, r0, lsl #1
    114c:	029d9c01 	addseq	r9, sp, #256	; 0x100
    1150:	63140000 	tstvs	r4, #0
    1154:	46080100 	strmi	r0, [r8], -r0, lsl #2
    1158:	b0000001 	andlt	r0, r0, r1
    115c:	15000003 	strne	r0, [r0, #-3]
    1160:	000001f8 	strdeq	r0, [r0], -r8
    1164:	000002ad 	andeq	r0, r0, sp, lsr #5
    1168:	aaf40305 	bge	ffd01d84 <__bss_end__+0xffcf6664>
    116c:	2c160000 	ldccs	0, cr0, [r6], {-0}
    1170:	88000001 	stmdahi	r0, {r0}
    1174:	14000087 	strne	r0, [r0], #-135	; 0x87
    1178:	01000000 	mrseq	r0, (UNDEF: 0)
    117c:	00025509 	andeq	r5, r2, r9, lsl #10
    1180:	013c1700 	teqeq	ip, r0, lsl #14
    1184:	03d10000 	bicseq	r0, r1, #0
    1188:	16000000 	strne	r0, [r0], -r0
    118c:	0000014c 	andeq	r0, r0, ip, asr #2
    1190:	0000879c 	muleq	r0, ip, r7
    1194:	00000014 	andeq	r0, r0, r4, lsl r0
    1198:	02720901 	rsbseq	r0, r2, #16384	; 0x4000
    119c:	5c170000 	ldcpl	0, cr0, [r7], {-0}
    11a0:	f2000001 	vhadd.s8	d0, d0, d1
    11a4:	00000003 	andeq	r0, r0, r3
    11a8:	0087d418 	addeq	sp, r7, r8, lsl r4
    11ac:	00099200 	andeq	r9, r9, r0, lsl #4
    11b0:	53011900 	movwpl	r1, #6400	; 0x1900
    11b4:	01193a01 	tsteq	r9, r1, lsl #20
    11b8:	f4030552 	vst3.16	{d0,d2,d4}, [r3 :64], r2
    11bc:	190000aa 	stmdbne	r0, {r1, r3, r5, r7}
    11c0:	03055101 	movweq	r5, #20737	; 0x5101
    11c4:	0000ab64 	andeq	sl, r0, r4, ror #22
    11c8:	05500119 	ldrbeq	r0, [r0, #-281]	; 0x119
    11cc:	00ab2803 	adceq	r2, fp, r3, lsl #16
    11d0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    11d4:	0000007f 	andeq	r0, r0, pc, ror r0
    11d8:	000002ad 	andeq	r0, r0, sp, lsr #5
    11dc:	00007609 	andeq	r7, r0, r9, lsl #12
    11e0:	07000800 	streq	r0, [r0, -r0, lsl #16]
    11e4:	0000029d 	muleq	r0, sp, r2
    11e8:	00061f13 	andeq	r1, r6, r3, lsl pc
    11ec:	f00d0100 			; <UNDEFINED> instruction: 0xf00d0100
    11f0:	44000087 	strmi	r0, [r0], #-135	; 0x87
    11f4:	01000000 	mrseq	r0, (UNDEF: 0)
    11f8:	0003249c 	muleq	r3, ip, r4
    11fc:	00631400 	rsbeq	r1, r3, r0, lsl #8
    1200:	01460d01 	cmpeq	r6, r1, lsl #26
    1204:	04130000 	ldreq	r0, [r3], #-0
    1208:	f8150000 			; <UNDEFINED> instruction: 0xf8150000
    120c:	34000001 	strcc	r0, [r0], #-1
    1210:	05000003 	streq	r0, [r0, #-3]
    1214:	00ab0003 	adceq	r0, fp, r3
    1218:	880c1a00 	stmdahi	ip, {r9, fp, ip}
    121c:	09a80000 	stmibeq	r8!, {}	; <UNPREDICTABLE>
    1220:	201b0000 	andscs	r0, fp, r0
    1224:	92000088 	andls	r0, r0, #136	; 0x88
    1228:	1a000009 	bne	1254 <_start-0x6dac>
    122c:	19000003 	stmdbne	r0, {r0, r1}
    1230:	3f015301 	svccc	0x00015301
    1234:	05520119 	ldrbeq	r0, [r2, #-281]	; 0x119
    1238:	00ab0003 	adceq	r0, fp, r3
    123c:	51011900 	tstpl	r1, r0, lsl #18
    1240:	ab640305 	blge	1901e5c <__bss_end__+0x18f673c>
    1244:	01190000 	tsteq	r9, r0
    1248:	70030550 	andvc	r0, r3, r0, asr r5
    124c:	000000ab 	andeq	r0, r0, fp, lsr #1
    1250:	0088241a 	addeq	r2, r8, sl, lsl r4
    1254:	0009af00 	andeq	sl, r9, r0, lsl #30
    1258:	7f080000 	svcvc	0x00080000
    125c:	34000000 	strcc	r0, [r0], #-0
    1260:	09000003 	stmdbeq	r0, {r0, r1}
    1264:	00000076 	andeq	r0, r0, r6, ror r0
    1268:	24070005 	strcs	r0, [r7], #-5
    126c:	13000003 	movwne	r0, #3
    1270:	000005cd 	andeq	r0, r0, sp, asr #11
    1274:	88341201 	ldmdahi	r4!, {r0, r9, ip}
    1278:	01b40000 			; <UNDEFINED> instruction: 0x01b40000
    127c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1280:	00000545 	andeq	r0, r0, r5, asr #10
    1284:	01006314 	tsteq	r0, r4, lsl r3
    1288:	00014612 	andeq	r4, r1, r2, lsl r6
    128c:	00043400 	andeq	r3, r4, r0, lsl #8
    1290:	05a61c00 	streq	r1, [r6, #3072]!	; 0xc00
    1294:	12010000 	andne	r0, r1, #0
    1298:	00000037 	andeq	r0, r0, r7, lsr r0
    129c:	00000452 	andeq	r0, r0, r2, asr r4
    12a0:	0001f815 	andeq	pc, r1, r5, lsl r8	; <UNPREDICTABLE>
    12a4:	00054500 	andeq	r4, r5, r0, lsl #10
    12a8:	08030500 	stmdaeq	r3, {r8, sl}
    12ac:	1d0000ab 	stcne	0, cr0, [r0, #-684]	; 0xfffffd54
    12b0:	1b010065 	blne	4144c <__bss_end__+0x35d2c>
    12b4:	000000a1 	andeq	r0, r0, r1, lsr #1
    12b8:	0000047e 	andeq	r0, r0, lr, ror r4
    12bc:	00014c16 	andeq	r4, r1, r6, lsl ip
    12c0:	00888c00 	addeq	r8, r8, r0, lsl #24
    12c4:	00000800 	andeq	r0, r0, r0, lsl #16
    12c8:	a1180100 	tstge	r8, r0, lsl #2
    12cc:	1e000003 	cdpne	0, 0, cr0, cr0, cr3, {0}
    12d0:	0000015c 	andeq	r0, r0, ip, asr r1
    12d4:	16005401 	strne	r5, [r0], -r1, lsl #8
    12d8:	00000166 	andeq	r0, r0, r6, ror #2
    12dc:	000088b8 			; <UNDEFINED> instruction: 0x000088b8
    12e0:	00000018 	andeq	r0, r0, r8, lsl r0
    12e4:	03bc1901 			; <UNDEFINED> instruction: 0x03bc1901
    12e8:	761e0000 	ldrvc	r0, [lr], -r0
    12ec:	01000001 	tsteq	r0, r1
    12f0:	2c160054 	ldccs	0, cr0, [r6], {84}	; 0x54
    12f4:	f4000001 	vst4.8	{d0-d3}, [r0], r1
    12f8:	14000088 	strne	r0, [r0], #-136	; 0x88
    12fc:	01000000 	mrseq	r0, (UNDEF: 0)
    1300:	0003d71a 	andeq	sp, r3, sl, lsl r7
    1304:	013c1e00 	teqeq	ip, r0, lsl #28
    1308:	54010000 	strpl	r0, [r1], #-0
    130c:	01801f00 	orreq	r1, r0, r0, lsl #30
    1310:	892c0000 	stmdbhi	ip!, {}	; <UNPREDICTABLE>
    1314:	00180000 	andseq	r0, r8, r0
    1318:	1c010000 	stcne	0, cr0, [r1], {-0}
    131c:	00000424 	andeq	r0, r0, r4, lsr #8
    1320:	0001991e 	andeq	r9, r1, lr, lsl r9
    1324:	aff20600 	svcge	0x00f20600
    1328:	00000012 	andeq	r0, r0, r2, lsl r0
    132c:	0001901e 	andeq	r9, r1, lr, lsl r0
    1330:	20540100 	subscs	r0, r4, r0, lsl #2
    1334:	00000018 	andeq	r0, r0, r8, lsl r0
    1338:	0001a221 	andeq	sl, r1, r1, lsr #4
    133c:	0004b400 	andeq	fp, r4, r0, lsl #8
    1340:	014c2200 	mrseq	r2, (UNDEF: 108)
    1344:	892c0000 	stmdbhi	ip!, {}	; <UNPREDICTABLE>
    1348:	00100000 	andseq	r0, r0, r0
    134c:	5b020000 	blpl	81354 <__bss_end__+0x75c34>
    1350:	00015c1e 	andeq	r5, r1, lr, lsl ip
    1354:	00540100 	subseq	r0, r4, r0, lsl #2
    1358:	4c1b0000 	ldcmi	0, cr0, [fp], {-0}
    135c:	b6000088 	strlt	r0, [r0], -r8, lsl #1
    1360:	44000009 	strmi	r0, [r0], #-9
    1364:	19000004 	stmdbne	r0, {r2}
    1368:	0a035201 	beq	d5b74 <__bss_end__+0xca454>
    136c:	01192014 	tsteq	r9, r4, lsl r0
    1370:	19300151 	ldmdbne	r0!, {r0, r4, r6, r8}
    1374:	74025001 	strvc	r5, [r2], #-1
    1378:	a01a0000 	andsge	r0, sl, r0
    137c:	a8000088 	stmdage	r0, {r3, r7}
    1380:	1b000009 	blne	13ac <_start-0x6c54>
    1384:	000088b4 			; <UNDEFINED> instruction: 0x000088b4
    1388:	00000992 	muleq	r0, r2, r9
    138c:	0000047b 	andeq	r0, r0, fp, ror r4
    1390:	01530119 	cmpeq	r3, r9, lsl r1
    1394:	52011948 	andpl	r1, r1, #72, 18	; 0x120000
    1398:	ab080305 	blge	201fb4 <__bss_end__+0x1f6894>
    139c:	01190000 	tsteq	r9, r0
    13a0:	64030551 	strvs	r0, [r3], #-1361	; 0x551
    13a4:	190000ab 	stmdbne	r0, {r0, r1, r3, r5, r7}
    13a8:	03055001 	movweq	r5, #20481	; 0x5001
    13ac:	0000ab94 	muleq	r0, r4, fp
    13b0:	88b81a00 	ldmhi	r8!, {r9, fp, ip}
    13b4:	09af0000 	stmibeq	pc!, {}	; <UNPREDICTABLE>
    13b8:	dc1a0000 	ldcle	0, cr0, [sl], {-0}
    13bc:	a8000088 	stmdage	r0, {r3, r7}
    13c0:	1b000009 	blne	13ec <_start-0x6c14>
    13c4:	000088f0 	strdeq	r8, [r0], -r0
    13c8:	00000992 	muleq	r0, r2, r9
    13cc:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    13d0:	01530119 	cmpeq	r3, r9, lsl r1
    13d4:	52011949 	andpl	r1, r1, #1196032	; 0x124000
    13d8:	ab080305 	blge	201ff4 <__bss_end__+0x1f68d4>
    13dc:	01190000 	tsteq	r9, r0
    13e0:	64030551 	strvs	r0, [r3], #-1361	; 0x551
    13e4:	190000ab 	stmdbne	r0, {r0, r1, r3, r5, r7}
    13e8:	03055001 	movweq	r5, #20481	; 0x5001
    13ec:	0000abb0 			; <UNDEFINED> instruction: 0x0000abb0
    13f0:	88f41a00 	ldmhi	r4!, {r9, fp, ip}^
    13f4:	09af0000 	stmibeq	pc!, {}	; <UNPREDICTABLE>
    13f8:	141a0000 	ldrne	r0, [sl], #-0
    13fc:	a8000089 	stmdage	r0, {r0, r3, r7}
    1400:	1b000009 	blne	142c <_start-0x6bd4>
    1404:	00008928 	andeq	r8, r0, r8, lsr #18
    1408:	00000992 	muleq	r0, r2, r9
    140c:	000004fb 	strdeq	r0, [r0], -fp
    1410:	01530119 	cmpeq	r3, r9, lsl r1
    1414:	5201194a 	andpl	r1, r1, #1212416	; 0x128000
    1418:	ab080305 	blge	202034 <__bss_end__+0x1f6914>
    141c:	01190000 	tsteq	r9, r0
    1420:	64030551 	strvs	r0, [r3], #-1361	; 0x551
    1424:	190000ab 	stmdbne	r0, {r0, r1, r3, r5, r7}
    1428:	03055001 	movweq	r5, #20481	; 0x5001
    142c:	0000abcc 	andeq	sl, r0, ip, asr #23
    1430:	892c1a00 	stmdbhi	ip!, {r9, fp, ip}
    1434:	09af0000 	stmibeq	pc!, {}	; <UNPREDICTABLE>
    1438:	a01a0000 	andsge	r0, sl, r0
    143c:	a8000089 	stmdage	r0, {r0, r3, r7}
    1440:	1b000009 	blne	146c <_start-0x6b94>
    1444:	000089b4 			; <UNDEFINED> instruction: 0x000089b4
    1448:	00000992 	muleq	r0, r2, r9
    144c:	0000053b 	andeq	r0, r0, fp, lsr r5
    1450:	01530119 	cmpeq	r3, r9, lsl r1
    1454:	5201194c 	andpl	r1, r1, #76, 18	; 0x130000
    1458:	ab080305 	blge	202074 <__bss_end__+0x1f6954>
    145c:	01190000 	tsteq	r9, r0
    1460:	64030551 	strvs	r0, [r3], #-1361	; 0x551
    1464:	190000ab 	stmdbne	r0, {r0, r1, r3, r5, r7}
    1468:	03055001 	movweq	r5, #20481	; 0x5001
    146c:	0000abf0 	strdeq	sl, [r0], -r0
    1470:	89b81a00 	ldmibhi	r8!, {r9, fp, ip}
    1474:	09af0000 	stmibeq	pc!, {}	; <UNPREDICTABLE>
    1478:	07000000 	streq	r0, [r0, -r0]
    147c:	00000091 	muleq	r0, r1, r0
    1480:	0005b523 	andeq	fp, r5, r3, lsr #10
    1484:	a1350100 	teqge	r5, r0, lsl #2
    1488:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    148c:	6c000089 	stcvs	0, cr0, [r0], {137}	; 0x89
    1490:	01000000 	mrseq	r0, (UNDEF: 0)
    1494:	0005cb9c 	muleq	r5, ip, fp
    1498:	00631400 	rsbeq	r1, r3, r0, lsl #8
    149c:	01463501 	cmpeq	r6, r1, lsl #10
    14a0:	04d40000 	ldrbeq	r0, [r4], #0
    14a4:	651d0000 	ldrvs	r0, [sp, #-0]
    14a8:	a1360100 	teqge	r6, r0, lsl #2
    14ac:	f2000000 	vhadd.s8	d0, d0, d0
    14b0:	22000004 	andcs	r0, r0, #4
    14b4:	00000180 	andeq	r0, r0, r0, lsl #3
    14b8:	000089f0 	strdeq	r8, [r0], -r0
    14bc:	00000048 	andeq	r0, r0, r8, asr #32
    14c0:	991e3a01 	ldmdbls	lr, {r0, r9, fp, ip, sp}
    14c4:	06000001 	streq	r0, [r0], -r1
    14c8:	0014a6f2 			; <UNDEFINED> instruction: 0x0014a6f2
    14cc:	901e0000 	andsls	r0, lr, r0
    14d0:	01000001 	tsteq	r0, r1
    14d4:	89f02453 	ldmibhi	r0!, {r0, r1, r4, r6, sl, sp}^
    14d8:	00480000 	subeq	r0, r8, r0
    14dc:	a2210000 	eorge	r0, r1, #0
    14e0:	05000001 	streq	r0, [r0, #-1]
    14e4:	25000005 	strcs	r0, [r0, #-5]
    14e8:	0000014c 	andeq	r0, r0, ip, asr #2
    14ec:	000089f0 	strdeq	r8, [r0], -r0
    14f0:	00000030 	andeq	r0, r0, r0, lsr r0
    14f4:	5c1e5b02 	ldcpl	11, cr5, [lr], {2}
    14f8:	01000001 	tsteq	r0, r1
    14fc:	00000053 	andeq	r0, r0, r3, asr r0
    1500:	05d51300 	ldrbeq	r1, [r5, #768]	; 0x300
    1504:	40010000 	andmi	r0, r1, r0
    1508:	00008a54 	andeq	r8, r0, r4, asr sl
    150c:	00000034 	andeq	r0, r0, r4, lsr r0
    1510:	063e9c01 	ldrteq	r9, [lr], -r1, lsl #24
    1514:	63140000 	tstvs	r4, #0
    1518:	46400100 	strbmi	r0, [r0], -r0, lsl #2
    151c:	25000001 	strcs	r0, [r0, #-1]
    1520:	1c000005 	stcne	0, cr0, [r0], {5}
    1524:	00000b94 	muleq	r0, r4, fp
    1528:	007d4001 	rsbseq	r4, sp, r1
    152c:	05430000 	strbeq	r0, [r3, #-0]
    1530:	6e140000 	cdpvs	0, 1, cr0, cr4, cr0, {0}
    1534:	37400100 	strbcc	r0, [r0, -r0, lsl #2]
    1538:	61000000 	mrsvs	r0, (UNDEF: 0)
    153c:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    1540:	41010070 	tstmi	r1, r0, ror r0
    1544:	000001ae 	andeq	r0, r0, lr, lsr #3
    1548:	0000057f 	andeq	r0, r0, pc, ror r5
    154c:	008a6424 	addeq	r6, sl, r4, lsr #8
    1550:	00002000 	andeq	r2, r0, r0
    1554:	00691d00 	rsbeq	r1, r9, r0, lsl #26
    1558:	00254301 	eoreq	r4, r5, r1, lsl #6
    155c:	059d0000 	ldreq	r0, [sp]
    1560:	74180000 	ldrvc	r0, [r8], #-0
    1564:	4a00008a 	bmi	1794 <_start-0x686c>
    1568:	19000005 	stmdbne	r0, {r0, r2}
    156c:	77025001 	strvc	r5, [r2, -r1]
    1570:	00000000 	andeq	r0, r0, r0
    1574:	00057723 	andeq	r7, r5, r3, lsr #14
    1578:	251f0100 	ldrcs	r0, [pc, #-256]	; 1480 <_start-0x6b80>
    157c:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    1580:	5800008a 	stmdapl	r0, {r1, r3, r7}
    1584:	01000000 	mrseq	r0, (UNDEF: 0)
    1588:	0006cc9c 	muleq	r6, ip, ip
    158c:	00711400 	rsbseq	r1, r1, r0, lsl #8
    1590:	01461f01 	cmpeq	r6, r1, lsl #30
    1594:	05bc0000 	ldreq	r0, [ip, #0]!
    1598:	941c0000 	ldrls	r0, [ip], #-0
    159c:	0100000b 	tsteq	r0, fp
    15a0:	00007d1f 	andeq	r7, r0, pc, lsl sp
    15a4:	0005da00 	andeq	sp, r5, r0, lsl #20
    15a8:	006e1400 	rsbeq	r1, lr, r0, lsl #8
    15ac:	00371f01 	eorseq	r1, r7, r1, lsl #30
    15b0:	05f80000 	ldrbeq	r0, [r8, #0]!
    15b4:	2c160000 	ldccs	0, cr0, [r6], {-0}
    15b8:	9c000001 	stcls	0, cr0, [r0], {1}
    15bc:	1800008a 	stmdane	r0, {r1, r3, r7}
    15c0:	01000000 	mrseq	r0, (UNDEF: 0)
    15c4:	00069b21 	andeq	r9, r6, r1, lsr #22
    15c8:	013c1e00 	teqeq	ip, r0, lsl #28
    15cc:	54010000 	strpl	r0, [r1], #-0
    15d0:	8a9c1b00 	bhi	fe7081d8 <__bss_end__+0xfe6fcab8>
    15d4:	02b20000 	adcseq	r0, r2, #0
    15d8:	06af0000 	strteq	r0, [pc], r0
    15dc:	01190000 	tsteq	r9, r0
    15e0:	00740250 	rsbseq	r0, r4, r0, asr r2
    15e4:	8acc1800 	bhi	ff3075ec <__bss_end__+0xff2fbecc>
    15e8:	05cb0000 	strbeq	r0, [fp]
    15ec:	01190000 	tsteq	r9, r0
    15f0:	00750252 	rsbseq	r0, r5, r2, asr r2
    15f4:	02510119 	subseq	r0, r1, #1073741830	; 0x40000006
    15f8:	01190076 	tsteq	r9, r6, ror r0
    15fc:	00740250 	rsbseq	r0, r4, r0, asr r2
    1600:	9c230000 	stcls	0, cr0, [r3], #-0
    1604:	01000005 	tsteq	r0, r5
    1608:	00002528 	andeq	r2, r0, r8, lsr #10
    160c:	008ae000 	addeq	lr, sl, r0
    1610:	0000a400 	andeq	sl, r0, r0, lsl #8
    1614:	d49c0100 	ldrle	r0, [ip], #256	; 0x100
    1618:	14000007 	strne	r0, [r0], #-7
    161c:	28010063 	stmdacs	r1, {r0, r1, r5, r6}
    1620:	00000146 	andeq	r0, r0, r6, asr #2
    1624:	00000616 	andeq	r0, r0, r6, lsl r6
    1628:	01007614 	tsteq	r0, r4, lsl r6
    162c:	0001ae28 	andeq	sl, r1, r8, lsr #28
    1630:	00064a00 	andeq	r4, r6, r0, lsl #20
    1634:	006e1400 	rsbeq	r1, lr, r0, lsl #8
    1638:	00372801 	eorseq	r2, r7, r1, lsl #16
    163c:	06840000 	streq	r0, [r4], r0
    1640:	73260000 	teqvc	r6, #0
    1644:	2901007a 	stmdbcs	r1, {r1, r3, r4, r5, r6}
    1648:	00000025 	andeq	r0, r0, r5, lsr #32
    164c:	28275501 	stmdacs	r7!, {r0, r8, sl, ip, lr}
    1650:	01000004 	tsteq	r0, r4
    1654:	0000372c 	andeq	r3, r0, ip, lsr #14
    1658:	0006be00 	andeq	fp, r6, r0, lsl #28
    165c:	01f81500 	mvnseq	r1, r0, lsl #10
    1660:	07e40000 	strbeq	r0, [r4, r0]!
    1664:	03050000 	movweq	r0, #20480	; 0x5000
    1668:	0000ab10 	andeq	sl, r0, r0, lsl fp
    166c:	00012c16 	andeq	r2, r1, r6, lsl ip
    1670:	008ae800 	addeq	lr, sl, r0, lsl #16
    1674:	00001c00 	andeq	r1, r0, r0, lsl #24
    1678:	53290100 	teqpl	r9, #0, 2
    167c:	17000007 	strne	r0, [r0, -r7]
    1680:	0000013c 	andeq	r0, r0, ip, lsr r1
    1684:	000006dc 	ldrdeq	r0, [r0], -ip
    1688:	012c1600 	teqeq	ip, r0, lsl #12
    168c:	8b280000 	blhi	a01694 <__bss_end__+0x9f5f74>
    1690:	00140000 	andseq	r0, r4, r0
    1694:	30010000 	andcc	r0, r1, r0
    1698:	00000770 	andeq	r0, r0, r0, ror r7
    169c:	00013c17 	andeq	r3, r1, r7, lsl ip
    16a0:	00071000 	andeq	r1, r7, r0
    16a4:	181b0000 	ldmdane	fp, {}	; <UNPREDICTABLE>
    16a8:	3e00008b 	cdpcc	0, 0, cr0, cr0, cr11, {4}
    16ac:	92000006 	andls	r0, r0, #6
    16b0:	19000007 	stmdbne	r0, {r0, r1, r2}
    16b4:	f3035201 	vhsub.u8	d5, d3, d1
    16b8:	01195201 	tsteq	r9, r1, lsl #4
    16bc:	01f30351 	mvnseq	r0, r1, asr r3
    16c0:	50011951 	andpl	r1, r1, r1, asr r9
    16c4:	00007402 	andeq	r7, r0, r2, lsl #8
    16c8:	008b481a 	addeq	r4, fp, sl, lsl r8
    16cc:	0009a800 	andeq	sl, r9, r0, lsl #16
    16d0:	8b5c1b00 	blhi	17082d8 <__bss_end__+0x16fcbb8>
    16d4:	09920000 	ldmibeq	r2, {}	; <UNPREDICTABLE>
    16d8:	07ca0000 	strbeq	r0, [sl, r0]
    16dc:	01190000 	tsteq	r9, r0
    16e0:	30080253 	andcc	r0, r8, r3, asr r2
    16e4:	05520119 	ldrbeq	r0, [r2, #-281]	; 0x119
    16e8:	00ab1003 	adceq	r1, fp, r3
    16ec:	51011900 	tstpl	r1, r0, lsl #18
    16f0:	ab640305 	blge	190230c <__bss_end__+0x18f6bec>
    16f4:	01190000 	tsteq	r9, r0
    16f8:	28030550 	stmdacs	r3, {r4, r6, r8, sl}
    16fc:	000000ac 	andeq	r0, r0, ip, lsr #1
    1700:	008b601a 	addeq	r6, fp, sl, lsl r0
    1704:	0009af00 	andeq	sl, r9, r0, lsl #30
    1708:	7f080000 	svcvc	0x00080000
    170c:	e4000000 	str	r0, [r0], #-0
    1710:	09000007 	stmdbeq	r0, {r0, r1, r2}
    1714:	00000076 	andeq	r0, r0, r6, ror r0
    1718:	d4070009 	strle	r0, [r7], #-9
    171c:	23000007 	movwcs	r0, #7
    1720:	000005e6 	andeq	r0, r0, r6, ror #11
    1724:	00254701 	eoreq	r4, r5, r1, lsl #14
    1728:	8b840000 	blhi	fe101730 <__bss_end__+0xfe0f6010>
    172c:	01240000 	teqeq	r4, r0
    1730:	9c010000 	stcls	0, cr0, [r1], {-0}
    1734:	0000098d 	andeq	r0, r0, sp, lsl #19
    1738:	01006314 	tsteq	r0, r4, lsl r3
    173c:	00014647 	andeq	r4, r1, r7, asr #12
    1740:	00072e00 	andeq	r2, r7, r0, lsl #28
    1744:	0b941c00 	bleq	fe50874c <__bss_end__+0xfe4fd02c>
    1748:	47010000 	strmi	r0, [r1, -r0]
    174c:	0000007d 	andeq	r0, r0, sp, ror r0
    1750:	000007b3 			; <UNDEFINED> instruction: 0x000007b3
    1754:	01006e14 	tsteq	r0, r4, lsl lr
    1758:	00003747 	andeq	r3, r0, r7, asr #14
    175c:	0007f800 	andeq	pc, r7, r0, lsl #16
    1760:	00701d00 	rsbseq	r1, r0, r0, lsl #26
    1764:	01ae4801 			; <UNDEFINED> instruction: 0x01ae4801
    1768:	084b0000 	stmdaeq	fp, {}^	; <UNPREDICTABLE>
    176c:	f8150000 			; <UNDEFINED> instruction: 0xf8150000
    1770:	8d000001 	stchi	0, cr0, [r0, #-4]
    1774:	05000009 	streq	r0, [r0, #-9]
    1778:	00ab1c03 	adceq	r1, fp, r3, lsl #24
    177c:	01b41600 			; <UNDEFINED> instruction: 0x01b41600
    1780:	8b880000 	blhi	fe201788 <__bss_end__+0xfe1f6068>
    1784:	00200000 	eoreq	r0, r0, r0
    1788:	4a010000 	bmi	41790 <__bss_end__+0x36070>
    178c:	0000087d 	andeq	r0, r0, sp, ror r8
    1790:	0001c417 	andeq	ip, r1, r7, lsl r4
    1794:	00089000 	andeq	r9, r8, r0
    1798:	012c2200 	teqeq	ip, r0, lsl #4
    179c:	8b880000 	blhi	fe2017a4 <__bss_end__+0xfe1f6084>
    17a0:	001c0000 	andseq	r0, ip, r0
    17a4:	57020000 	strpl	r0, [r2, -r0]
    17a8:	00013c17 	andeq	r3, r1, r7, lsl ip
    17ac:	00089000 	andeq	r9, r8, r0
    17b0:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    17b4:	00008bb4 			; <UNDEFINED> instruction: 0x00008bb4
    17b8:	00000088 	andeq	r0, r0, r8, lsl #1
    17bc:	0000092e 	andeq	r0, r0, lr, lsr #18
    17c0:	0100691d 	tsteq	r0, sp, lsl r9
    17c4:	0000254c 	andeq	r2, r0, ip, asr #10
    17c8:	00091500 	andeq	r1, r9, r0, lsl #10
    17cc:	01ce1f00 	biceq	r1, lr, r0, lsl #30
    17d0:	8bb40000 	blhi	fed017d8 <__bss_end__+0xfecf60b8>
    17d4:	00480000 	subeq	r0, r8, r0
    17d8:	4d010000 	stcmi	0, cr0, [r1, #-0]
    17dc:	000008ec 	andeq	r0, r0, ip, ror #17
    17e0:	0001e717 	andeq	lr, r1, r7, lsl r7
    17e4:	00093e00 	andeq	r3, r9, r0, lsl #28
    17e8:	01de1700 	bicseq	r1, lr, r0, lsl #14
    17ec:	097a0000 	ldmdbeq	sl!, {}^	; <UNPREDICTABLE>
    17f0:	48200000 	stmdami	r0!, {}	; <UNPREDICTABLE>
    17f4:	21000000 	mrscs	r0, (UNDEF: 0)
    17f8:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    17fc:	000009a6 	andeq	r0, r0, r6, lsr #19
    1800:	0001fb29 	andeq	pc, r1, r9, lsr #22
    1804:	22560100 	subscs	r0, r6, #0, 2
    1808:	00000166 	andeq	r0, r0, r6, ror #2
    180c:	00008bd4 	ldrdeq	r8, [r0], -r4
    1810:	00000010 	andeq	r0, r0, r0, lsl r0
    1814:	76176702 	ldrvc	r6, [r7], -r2, lsl #14
    1818:	d1000001 	tstle	r0, r1
    181c:	00000009 	andeq	r0, r0, r9
    1820:	181a0000 	ldmdane	sl, {}	; <UNPREDICTABLE>
    1824:	a800008c 	stmdage	r0, {r2, r3, r7}
    1828:	1b000009 	blne	1854 <_start-0x67ac>
    182c:	00008c2c 	andeq	r8, r0, ip, lsr #24
    1830:	00000992 	muleq	r0, r2, r9
    1834:	00000924 	andeq	r0, r0, r4, lsr #18
    1838:	02530119 	subseq	r0, r3, #1073741830	; 0x40000006
    183c:	01194e08 	tsteq	r9, r8, lsl #28
    1840:	1c030552 	cfstr32ne	mvfx0, [r3], {82}	; 0x52
    1844:	190000ab 	stmdbne	r0, {r0, r1, r3, r5, r7}
    1848:	03055101 	movweq	r5, #20737	; 0x5101
    184c:	0000ab64 	andeq	sl, r0, r4, ror #22
    1850:	05500119 	ldrbeq	r0, [r0, #-281]	; 0x119
    1854:	00ac4c03 	adceq	r4, ip, r3, lsl #24
    1858:	301a0000 	andscc	r0, sl, r0
    185c:	af00008c 	svcge	0x0000008c
    1860:	00000009 	andeq	r0, r0, r9
    1864:	00014c16 	andeq	r4, r1, r6, lsl ip
    1868:	008c4400 	addeq	r4, ip, r0, lsl #8
    186c:	00001000 	andeq	r1, r0, r0
    1870:	4b500100 	blmi	1401c78 <__bss_end__+0x13f6558>
    1874:	17000009 	strne	r0, [r0, -r9]
    1878:	0000015c 	andeq	r0, r0, ip, asr r1
    187c:	000009fd 	strdeq	r0, [r0], -sp
    1880:	8c601a00 	stclhi	10, cr1, [r0], #-0
    1884:	09a80000 	stmibeq	r8!, {}	; <UNPREDICTABLE>
    1888:	741b0000 	ldrvc	r0, [fp], #-0
    188c:	9200008c 	andls	r0, r0, #140	; 0x8c
    1890:	83000009 	movwhi	r0, #9
    1894:	19000009 	stmdbne	r0, {r0, r3}
    1898:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    189c:	52011950 	andpl	r1, r1, #80, 18	; 0x140000
    18a0:	ab1c0305 	blge	7024bc <__bss_end__+0x6f6d9c>
    18a4:	01190000 	tsteq	r9, r0
    18a8:	64030551 	strvs	r0, [r3], #-1361	; 0x551
    18ac:	190000ab 	stmdbne	r0, {r0, r1, r3, r5, r7}
    18b0:	03055001 	movweq	r5, #20481	; 0x5001
    18b4:	0000ac70 	andeq	sl, r0, r0, ror ip
    18b8:	8c781a00 	ldclhi	10, cr1, [r8], #-0
    18bc:	09af0000 	stmibeq	pc!, {}	; <UNPREDICTABLE>
    18c0:	07000000 	streq	r0, [r0, -r0]
    18c4:	000007d4 	ldrdeq	r0, [r0], -r4
    18c8:	00069c2a 	andeq	r9, r6, sl, lsr #24
    18cc:	25290400 	strcs	r0, [r9, #-1024]!	; 0x400
    18d0:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    18d4:	2b000009 	blcs	1900 <_start-0x6700>
    18d8:	00000086 	andeq	r0, r0, r6, lsl #1
    18dc:	f22d002c 	vhadd.s32	d0, d13, d28
    18e0:	04000002 	streq	r0, [r0], #-2
    18e4:	01342d1e 	teqeq	r4, lr, lsl sp
    18e8:	66040000 	strvs	r0, [r4], -r0
    18ec:	0005bc2e 	andeq	fp, r5, lr, lsr #24
    18f0:	7d1b0500 	cfldr32vc	mvfx0, [fp, #-0]
    18f4:	2b000000 	blcs	18fc <_start-0x6704>
    18f8:	0000007d 	andeq	r0, r0, sp, ror r0
    18fc:	0000252b 	andeq	r2, r0, fp, lsr #10
    1900:	002c2b00 	eoreq	r2, ip, r0, lsl #22
    1904:	00000000 	andeq	r0, r0, r0
    1908:	000000db 	ldrdeq	r0, [r0], -fp
    190c:	06b80004 	ldrteq	r0, [r8], r4
    1910:	01040000 	mrseq	r0, (UNDEF: 4)
    1914:	00000064 	andeq	r0, r0, r4, rrx
    1918:	00062a01 	andeq	r2, r6, r1, lsl #20
    191c:	00063800 	andeq	r3, r6, r0, lsl #16
    1920:	008d6800 	addeq	r6, sp, r0, lsl #16
    1924:	00002000 	andeq	r2, r0, r0
    1928:	00067e00 	andeq	r7, r6, r0, lsl #28
    192c:	06010200 	streq	r0, [r1], -r0, lsl #4
    1930:	0000010d 	andeq	r0, r0, sp, lsl #2
    1934:	0b080102 	bleq	201d44 <__bss_end__+0x1f6624>
    1938:	02000001 	andeq	r0, r0, #1
    193c:	02ae0502 	adceq	r0, lr, #8388608	; 0x800000
    1940:	02020000 	andeq	r0, r2, #0
    1944:	00015e07 	andeq	r5, r1, r7, lsl #28
    1948:	05040300 	streq	r0, [r4, #-768]	; 0x300
    194c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1950:	32070402 	andcc	r0, r7, #33554432	; 0x2000000
    1954:	02000002 	andeq	r0, r0, #2
    1958:	02790508 	rsbseq	r0, r9, #8, 10	; 0x2000000
    195c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1960:	00022807 	andeq	r2, r2, r7, lsl #16
    1964:	05040200 	streq	r0, [r4, #-512]	; 0x200
    1968:	0000027e 	andeq	r0, r0, lr, ror r2
    196c:	5e070402 	cdppl	4, 0, cr0, cr7, cr2, {0}
    1970:	04000002 	streq	r0, [r0], #-2
    1974:	07040204 	streq	r0, [r4, -r4, lsl #4]
    1978:	0000022d 	andeq	r0, r0, sp, lsr #4
    197c:	007a0405 	rsbseq	r0, sl, r5, lsl #8
    1980:	01020000 	mrseq	r0, (UNDEF: 2)
    1984:	00011408 	andeq	r1, r1, r8, lsl #8
    1988:	05950600 	ldreq	r0, [r5, #1536]	; 0x600
    198c:	d4020000 	strle	r0, [r2], #-0
    1990:	00000048 	andeq	r0, r0, r8, asr #32
    1994:	0005bc07 	andeq	fp, r5, r7, lsl #24
    1998:	6b1b0300 	blvs	6c25a0 <__bss_end__+0x6b6e80>
    199c:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    19a0:	2000008d 	andcs	r0, r0, sp, lsl #1
    19a4:	01000000 	mrseq	r0, (UNDEF: 0)
    19a8:	705f089c 			; <UNDEFINED> instruction: 0x705f089c
    19ac:	6b030100 	blvs	c1db4 <__bss_end__+0xb6694>
    19b0:	01000000 	mrseq	r0, (UNDEF: 0)
    19b4:	00630850 	rsbeq	r0, r3, r0, asr r8
    19b8:	00410301 	subeq	r0, r1, r1, lsl #6
    19bc:	51010000 	mrspl	r0, (UNDEF: 1)
    19c0:	01006e09 	tsteq	r0, r9, lsl #28
    19c4:	00008103 	andeq	r8, r0, r3, lsl #2
    19c8:	000a3700 	andeq	r3, sl, r0, lsl #14
    19cc:	00700a00 	rsbseq	r0, r0, r0, lsl #20
    19d0:	00740401 	rsbseq	r0, r4, r1, lsl #8
    19d4:	0a580000 	beq	16019dc <__bss_end__+0x15f62bc>
    19d8:	650b0000 	strvs	r0, [fp, #-0]
    19dc:	74040100 	strvc	r0, [r4], #-256	; 0x100
    19e0:	01000000 	mrseq	r0, (UNDEF: 0)
    19e4:	91000052 	qaddls	r0, r2, r0
    19e8:	04000001 	streq	r0, [r0], #-1
    19ec:	00075500 	andeq	r5, r7, r0, lsl #10
    19f0:	64010400 	strvs	r0, [r1], #-1024	; 0x400
    19f4:	01000000 	mrseq	r0, (UNDEF: 0)
    19f8:	0000068b 	andeq	r0, r0, fp, lsl #13
    19fc:	00000638 	andeq	r0, r0, r8, lsr r6
    1a00:	00008d88 	andeq	r8, r0, r8, lsl #27
    1a04:	00000058 	andeq	r0, r0, r8, asr r0
    1a08:	0000076e 	andeq	r0, r0, lr, ror #14
    1a0c:	00067c02 	andeq	r7, r6, r2, lsl #24
    1a10:	30280200 	eorcc	r0, r8, r0, lsl #4
    1a14:	03000000 	movweq	r0, #0
    1a18:	000006a3 	andeq	r0, r0, r3, lsr #13
    1a1c:	47000304 	strmi	r0, [r0, -r4, lsl #6]
    1a20:	04000000 	streq	r0, [r0], #-0
    1a24:	000006b2 			; <UNDEFINED> instruction: 0x000006b2
    1a28:	00000047 	andeq	r0, r0, r7, asr #32
    1a2c:	04050000 	streq	r0, [r5], #-0
    1a30:	0006a502 	andeq	sl, r6, r2, lsl #10
    1a34:	25620200 	strbcs	r0, [r2, #-512]!	; 0x200
    1a38:	06000000 	streq	r0, [r0], -r0
    1a3c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1a40:	04070074 	streq	r0, [r7], #-116	; 0x74
    1a44:	00023207 	andeq	r3, r2, r7, lsl #4
    1a48:	06010700 	streq	r0, [r1], -r0, lsl #14
    1a4c:	0000010d 	andeq	r0, r0, sp, lsl #2
    1a50:	ae050207 	cdpge	2, 0, cr0, cr5, cr7, {0}
    1a54:	07000002 	streq	r0, [r0, -r2]
    1a58:	027e0504 	rsbseq	r0, lr, #4, 10	; 0x1000000
    1a5c:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    1a60:	00027905 	andeq	r7, r2, r5, lsl #18
    1a64:	08010700 	stmdaeq	r1, {r8, r9, sl}
    1a68:	0000010b 	andeq	r0, r0, fp, lsl #2
    1a6c:	5e070207 	cdppl	2, 0, cr0, cr7, cr7, {0}
    1a70:	07000001 	streq	r0, [r0, -r1]
    1a74:	022d0704 	eoreq	r0, sp, #4, 14	; 0x100000
    1a78:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    1a7c:	00022807 	andeq	r2, r2, r7, lsl #16
    1a80:	07040700 	streq	r0, [r4, -r0, lsl #14]
    1a84:	0000025e 	andeq	r0, r0, lr, asr r2
    1a88:	00a70408 	adceq	r0, r7, r8, lsl #8
    1a8c:	01070000 	mrseq	r0, (UNDEF: 7)
    1a90:	00011408 	andeq	r1, r1, r8, lsl #8
    1a94:	b4040800 	strlt	r0, [r4], #-2048	; 0x800
    1a98:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1a9c:	000000a7 	andeq	r0, r0, r7, lsr #1
    1aa0:	00069c0a 	andeq	r9, r6, sl, lsl #24
    1aa4:	54060100 	strpl	r0, [r6], #-256	; 0x100
    1aa8:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    1aac:	5800008d 	stmdapl	r0, {r0, r2, r3, r7}
    1ab0:	01000000 	mrseq	r0, (UNDEF: 0)
    1ab4:	0001439c 	muleq	r1, ip, r3
    1ab8:	6d660b00 	vstmdbvs	r6!, {d16-d15}
    1abc:	06010074 			; <UNDEFINED> instruction: 0x06010074
    1ac0:	000000ae 	andeq	r0, r0, lr, lsr #1
    1ac4:	0c709102 	ldfeqp	f1, [r0], #-8
    1ac8:	6675620d 	ldrbtvs	r6, [r5], -sp, lsl #4
    1acc:	43080100 	movwmi	r0, #33024	; 0x8100
    1ad0:	05000001 	streq	r0, [r0, #-1]
    1ad4:	00b30403 	adcseq	r0, r3, r3, lsl #8
    1ad8:	06ad0e00 	strteq	r0, [sp], r0, lsl #28
    1adc:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1ae0:	00000049 	andeq	r0, r0, r9, asr #32
    1ae4:	0f5c9102 	svceq	0x005c9102
    1ae8:	01007a73 	tsteq	r0, r3, ror sl
    1aec:	0000540c 	andeq	r5, r0, ip, lsl #8
    1af0:	000a8300 	andeq	r8, sl, r0, lsl #6
    1af4:	8db01000 	ldchi	0, cr1, [r0]
    1af8:	01740000 	cmneq	r4, r0
    1afc:	01360000 	teqeq	r6, r0
    1b00:	01110000 	tsteq	r1, r0
    1b04:	4c910253 	lfmmi	f0, 4, [r1], {83}	; 0x53
    1b08:	03520111 	cmpeq	r2, #1073741828	; 0x40000004
    1b0c:	11064891 			; <UNDEFINED> instruction: 0x11064891
    1b10:	0a035101 	beq	d5f1c <__bss_end__+0xca7fc>
    1b14:	01110400 	tsteq	r1, r0, lsl #8
    1b18:	00740250 	rsbseq	r0, r4, r0, asr r2
    1b1c:	8dc41200 	sfmhi	f1, 2, [r4]
    1b20:	01110000 	tsteq	r1, r0
    1b24:	00740250 	rsbseq	r0, r4, r0, asr r2
    1b28:	a7130000 	ldrge	r0, [r3, -r0]
    1b2c:	54000000 	strpl	r0, [r0], #-0
    1b30:	14000001 	strne	r0, [r0], #-1
    1b34:	0000009a 	muleq	r0, sl, r0
    1b38:	150003ff 	strne	r0, [r0, #-1023]	; 0x3ff
    1b3c:	00000054 	andeq	r0, r0, r4, asr r0
    1b40:	00000163 	andeq	r0, r0, r3, ror #2
    1b44:	0000ae16 	andeq	sl, r0, r6, lsl lr
    1b48:	05170000 	ldreq	r0, [r7, #-0]
    1b4c:	04000007 	streq	r0, [r0], #-7
    1b50:	00016e22 	andeq	r6, r1, r2, lsr #28
    1b54:	54040800 	strpl	r0, [r4], #-2048	; 0x800
    1b58:	18000001 	stmdane	r0, {r0}
    1b5c:	00000699 	muleq	r0, r9, r6
    1b60:	00540205 	subseq	r0, r4, r5, lsl #4
    1b64:	a1160000 	tstge	r6, r0
    1b68:	16000000 	strne	r0, [r0], -r0
    1b6c:	00000054 	andeq	r0, r0, r4, asr r0
    1b70:	0000ae16 	andeq	sl, r0, r6, lsl lr
    1b74:	00491600 	subeq	r1, r9, r0, lsl #12
    1b78:	00000000 	andeq	r0, r0, r0
    1b7c:	00000113 	andeq	r0, r0, r3, lsl r1
    1b80:	08860004 	stmeq	r6, {r2}
    1b84:	01040000 	mrseq	r0, (UNDEF: 4)
    1b88:	00000064 	andeq	r0, r0, r4, rrx
    1b8c:	0006d401 	andeq	sp, r6, r1, lsl #8
    1b90:	00063800 	andeq	r3, r6, r0, lsl #16
    1b94:	008de000 	addeq	lr, sp, r0
    1b98:	00003c00 	andeq	r3, r0, r0, lsl #24
    1b9c:	00087400 	andeq	r7, r8, r0, lsl #8
    1ba0:	05040200 	streq	r0, [r4, #-512]	; 0x200
    1ba4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1ba8:	32070403 	andcc	r0, r7, #50331648	; 0x3000000
    1bac:	03000002 	movweq	r0, #2
    1bb0:	010d0601 	tsteq	sp, r1, lsl #12
    1bb4:	02030000 	andeq	r0, r3, #0
    1bb8:	0002ae05 	andeq	sl, r2, r5, lsl #28
    1bbc:	05040300 	streq	r0, [r4, #-768]	; 0x300
    1bc0:	0000027e 	andeq	r0, r0, lr, ror r2
    1bc4:	79050803 	stmdbvc	r5, {r0, r1, fp}
    1bc8:	03000002 	movweq	r0, #2
    1bcc:	010b0801 	tsteq	fp, r1, lsl #16
    1bd0:	02030000 	andeq	r0, r3, #0
    1bd4:	00015e07 	andeq	r5, r1, r7, lsl #28
    1bd8:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1bdc:	0000022d 	andeq	r0, r0, sp, lsr #4
    1be0:	28070803 	stmdacs	r7, {r0, r1, fp}
    1be4:	03000002 	movweq	r0, #2
    1be8:	025e0704 	subseq	r0, lr, #4, 14	; 0x100000
    1bec:	01030000 	mrseq	r0, (UNDEF: 3)
    1bf0:	00011408 	andeq	r1, r1, r8, lsl #8
    1bf4:	06b70400 	ldrteq	r0, [r7], r0, lsl #8
    1bf8:	03010000 	movweq	r0, #4096	; 0x1000
    1bfc:	00000025 	andeq	r0, r0, r5, lsr #32
    1c00:	00008de0 	andeq	r8, r0, r0, ror #27
    1c04:	00000014 	andeq	r0, r0, r4, lsl r0
    1c08:	00b09c01 	adcseq	r9, r0, r1, lsl #24
    1c0c:	63050000 	movwvs	r0, #20480	; 0x5000
    1c10:	25030100 	strcs	r0, [r3, #-256]	; 0x100
    1c14:	ac000000 	stcge	0, cr0, [r0], {-0}
    1c18:	0600000a 	streq	r0, [r0], -sl
    1c1c:	00008dec 	andeq	r8, r0, ip, ror #27
    1c20:	00000109 	andeq	r0, r0, r9, lsl #2
    1c24:	02500107 	subseq	r0, r0, #-1073741823	; 0xc0000001
    1c28:	00000074 	andeq	r0, r0, r4, ror r0
    1c2c:	0002f208 	andeq	pc, r2, r8, lsl #4
    1c30:	f4080100 	vst4.8	{d0,d2,d4,d6}, [r8], r0
    1c34:	1800008d 	stmdane	r0, {r0, r2, r3, r7}
    1c38:	01000000 	mrseq	r0, (UNDEF: 0)
    1c3c:	06e3099c 	usateq	r0, #3, ip, lsl #19
    1c40:	0b010000 	bleq	41c48 <__bss_end__+0x36528>
    1c44:	00008e0c 	andeq	r8, r0, ip, lsl #28
    1c48:	00000010 	andeq	r0, r0, r0, lsl r0
    1c4c:	00e39c01 	rsceq	r9, r3, r1, lsl #24
    1c50:	660a0000 	strvs	r0, [sl], -r0
    1c54:	0b010070 	bleq	41e1c <__bss_end__+0x366fc>
    1c58:	000000f2 	strdeq	r0, [r0], -r2
    1c5c:	0b005001 	bleq	15c68 <__bss_end__+0xa548>
    1c60:	00000025 	andeq	r0, r0, r5, lsr #32
    1c64:	000000f2 	strdeq	r0, [r0], -r2
    1c68:	0000250c 	andeq	r2, r0, ip, lsl #10
    1c6c:	040d0000 	streq	r0, [sp], #-0
    1c70:	000000e3 	andeq	r0, r0, r3, ror #1
    1c74:	0006c80e 	andeq	ip, r6, lr, lsl #16
    1c78:	f2060100 	vrhadd.s8	d0, d6, d0
    1c7c:	05000000 	streq	r0, [r0, #-0]
    1c80:	00a7cc03 	adceq	ip, r7, r3, lsl #24
    1c84:	08380f00 	ldmdaeq	r8!, {r8, r9, sl, fp}
    1c88:	3c020000 	stccc	0, cr0, [r2], {-0}
    1c8c:	00002c0c 	andeq	r2, r0, ip, lsl #24
    1c90:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
    1c94:	04000000 	streq	r0, [r0], #-0
    1c98:	00096e00 	andeq	r6, r9, r0, lsl #28
    1c9c:	64010400 	strvs	r0, [r1], #-1024	; 0x400
    1ca0:	01000000 	mrseq	r0, (UNDEF: 0)
    1ca4:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1ca8:	00000638 	andeq	r0, r0, r8, lsr r6
    1cac:	00008e1c 	andeq	r8, r0, ip, lsl lr
    1cb0:	00000034 	andeq	r0, r0, r4, lsr r0
    1cb4:	00000902 	andeq	r0, r0, r2, lsl #18
    1cb8:	69050402 	stmdbvs	r5, {r1, sl}
    1cbc:	0300746e 	movweq	r7, #1134	; 0x46e
    1cc0:	02320704 	eorseq	r0, r2, #4, 14	; 0x100000
    1cc4:	01030000 	mrseq	r0, (UNDEF: 3)
    1cc8:	00010d06 	andeq	r0, r1, r6, lsl #26
    1ccc:	05020300 	streq	r0, [r2, #-768]	; 0x300
    1cd0:	000002ae 	andeq	r0, r0, lr, lsr #5
    1cd4:	7e050403 	cdpvc	4, 0, cr0, cr5, cr3, {0}
    1cd8:	03000002 	movweq	r0, #2
    1cdc:	02790508 	rsbseq	r0, r9, #8, 10	; 0x2000000
    1ce0:	01030000 	mrseq	r0, (UNDEF: 3)
    1ce4:	00010b08 	andeq	r0, r1, r8, lsl #22
    1ce8:	07020300 	streq	r0, [r2, -r0, lsl #6]
    1cec:	0000015e 	andeq	r0, r0, lr, asr r1
    1cf0:	2d070403 	cfstrscs	mvf0, [r7, #-12]
    1cf4:	03000002 	movweq	r0, #2
    1cf8:	02280708 	eoreq	r0, r8, #8, 14	; 0x200000
    1cfc:	04030000 	streq	r0, [r3], #-0
    1d00:	00025e07 	andeq	r5, r2, r7, lsl #28
    1d04:	08010300 	stmdaeq	r1, {r8, r9}
    1d08:	00000114 	andeq	r0, r0, r4, lsl r1
    1d0c:	007f0404 	rsbseq	r0, pc, r4, lsl #8
    1d10:	72050000 	andvc	r0, r5, #0
    1d14:	06000000 	streq	r0, [r0], -r0
    1d18:	000006fc 	strdeq	r0, [r0], -ip
    1d1c:	00250401 	eoreq	r0, r5, r1, lsl #8
    1d20:	8e1c0000 	cdphi	0, 1, cr0, cr12, cr0, {0}
    1d24:	00340000 	eorseq	r0, r4, r0
    1d28:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d2c:	000000ab 	andeq	r0, r0, fp, lsr #1
    1d30:	01007007 	tsteq	r0, r7
    1d34:	00007904 	andeq	r7, r0, r4, lsl #18
    1d38:	000aca00 	andeq	ip, sl, r0, lsl #20
    1d3c:	25080000 	strcs	r0, [r8, #-0]
    1d40:	ba000000 	blt	1d48 <_start-0x62b8>
    1d44:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1d48:	00000025 	andeq	r0, r0, r5, lsr #32
    1d4c:	06c80a00 	strbeq	r0, [r8], r0, lsl #20
    1d50:	1d020000 	stcne	0, cr0, [r2, #-0]
    1d54:	000000c5 	andeq	r0, r0, r5, asr #1
    1d58:	00ab0404 	adceq	r0, fp, r4, lsl #8
    1d5c:	25080000 	strcs	r0, [r8, #-0]
    1d60:	da000000 	ble	1d68 <_start-0x6298>
    1d64:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1d68:	00000079 	andeq	r0, r0, r9, ror r0
    1d6c:	07050b00 	streq	r0, [r5, -r0, lsl #22]
    1d70:	0c010000 	stceq	0, cr0, [r1], {-0}
    1d74:	000000eb 	andeq	r0, r0, fp, ror #1
    1d78:	a7d00305 	ldrbge	r0, [r0, r5, lsl #6]
    1d7c:	04040000 	streq	r0, [r4], #-0
    1d80:	000000cb 	andeq	r0, r0, fp, asr #1
    1d84:	00068100 	andeq	r8, r6, r0, lsl #2
    1d88:	07000400 	streq	r0, [r0, -r0, lsl #8]
    1d8c:	0400000a 	streq	r0, [r0], #-10
    1d90:	00006401 	andeq	r6, r0, r1, lsl #8
    1d94:	07360100 	ldreq	r0, [r6, -r0, lsl #2]!
    1d98:	06380000 	ldrteq	r0, [r8], -r0
    1d9c:	8e500000 	cdphi	0, 5, cr0, cr0, cr0, {0}
    1da0:	04f80000 	ldrbteq	r0, [r8], #0
    1da4:	099c0000 	ldmibeq	ip, {}	; <UNPREDICTABLE>
    1da8:	04020000 	streq	r0, [r2], #-0
    1dac:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    1db0:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1db4:	00000232 	andeq	r0, r0, r2, lsr r2
    1db8:	0d060103 	stfeqs	f0, [r6, #-12]
    1dbc:	03000001 	movweq	r0, #1
    1dc0:	02ae0502 	adceq	r0, lr, #8388608	; 0x800000
    1dc4:	04030000 	streq	r0, [r3], #-0
    1dc8:	00027e05 	andeq	r7, r2, r5, lsl #28
    1dcc:	05080300 	streq	r0, [r8, #-768]	; 0x300
    1dd0:	00000279 	andeq	r0, r0, r9, ror r2
    1dd4:	0b080103 	bleq	2021e8 <__bss_end__+0x1f6ac8>
    1dd8:	03000001 	movweq	r0, #1
    1ddc:	015e0702 	cmpeq	lr, r2, lsl #14
    1de0:	04030000 	streq	r0, [r3], #-0
    1de4:	00022d07 	andeq	r2, r2, r7, lsl #26
    1de8:	07080300 	streq	r0, [r8, -r0, lsl #6]
    1dec:	00000228 	andeq	r0, r0, r8, lsr #4
    1df0:	5e070403 	cdppl	4, 0, cr0, cr7, cr3, {0}
    1df4:	04000002 	streq	r0, [r0], #-2
    1df8:	7a040504 	bvc	103210 <__bss_end__+0xf7af0>
    1dfc:	03000000 	movweq	r0, #0
    1e00:	01140801 	tsteq	r4, r1, lsl #16
    1e04:	04050000 	streq	r0, [r5], #-0
    1e08:	00000087 	andeq	r0, r0, r7, lsl #1
    1e0c:	00007a06 	andeq	r7, r0, r6, lsl #20
    1e10:	067c0700 	ldrbteq	r0, [ip], -r0, lsl #14
    1e14:	28020000 	stmdacs	r2, {}	; <UNPREDICTABLE>
    1e18:	00000097 	muleq	r0, r7, r0
    1e1c:	0006a308 	andeq	sl, r6, r8, lsl #6
    1e20:	00040400 	andeq	r0, r4, r0, lsl #8
    1e24:	000000ae 	andeq	r0, r0, lr, lsr #1
    1e28:	0006b209 	andeq	fp, r6, r9, lsl #4
    1e2c:	00007200 	andeq	r7, r0, r0, lsl #4
    1e30:	07000000 	streq	r0, [r0, -r0]
    1e34:	000006a5 	andeq	r0, r0, r5, lsr #13
    1e38:	008c6202 	addeq	r6, ip, r2, lsl #4
    1e3c:	180a0000 	stmdane	sl, {}	; <UNPREDICTABLE>
    1e40:	01000007 	tsteq	r0, r7
    1e44:	00002527 	andeq	r2, r0, r7, lsr #10
    1e48:	008e5000 	addeq	r5, lr, r0
    1e4c:	00001400 	andeq	r1, r0, r0, lsl #8
    1e50:	e09c0100 	adds	r0, ip, r0, lsl #2
    1e54:	0b000000 	bleq	1e5c <_start-0x61a4>
    1e58:	27010063 	strcs	r0, [r1, -r3, rrx]
    1e5c:	00000025 	andeq	r0, r0, r5, lsr #32
    1e60:	00000ae8 	andeq	r0, r0, r8, ror #21
    1e64:	61700c00 	cmnvs	r0, r0, lsl #24
    1e68:	2e010064 	cdpcs	0, 0, cr0, cr1, cr4, {3}
    1e6c:	00000074 	andeq	r0, r0, r4, ror r0
    1e70:	00008e64 	andeq	r8, r0, r4, ror #28
    1e74:	0000002c 	andeq	r0, r0, ip, lsr #32
    1e78:	01309c01 	teqeq	r0, r1, lsl #24
    1e7c:	700b0000 	andvc	r0, fp, r0
    1e80:	742e0100 	strtvc	r0, [lr], #-256	; 0x100
    1e84:	16000000 	strne	r0, [r0], -r0
    1e88:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    1e8c:	00000728 	andeq	r0, r0, r8, lsr #14
    1e90:	00742e01 	rsbseq	r2, r4, r1, lsl #28
    1e94:	0b410000 	bleq	1041e9c <__bss_end__+0x103677c>
    1e98:	560e0000 	strpl	r0, [lr], -r0
    1e9c:	01000007 	tsteq	r0, r7
    1ea0:	0000252e 	andeq	r2, r0, lr, lsr #10
    1ea4:	0f520100 	svceq	0x00520100
    1ea8:	006e656c 	rsbeq	r6, lr, ip, ror #10
    1eac:	00252f01 	eoreq	r2, r5, r1, lsl #30
    1eb0:	51010000 	mrspl	r0, (UNDEF: 1)
    1eb4:	07100a00 	ldreq	r0, [r0, -r0, lsl #20]
    1eb8:	37010000 	strcc	r0, [r1, -r0]
    1ebc:	00000074 	andeq	r0, r0, r4, ror r0
    1ec0:	00008e90 	muleq	r0, r0, lr
    1ec4:	00000040 	andeq	r0, r0, r0, asr #32
    1ec8:	019c9c01 	orrseq	r9, ip, r1, lsl #24
    1ecc:	640b0000 	strvs	r0, [fp], #-0
    1ed0:	01007473 	tsteq	r0, r3, ror r4
    1ed4:	00007437 	andeq	r7, r0, r7, lsr r4
    1ed8:	000b6200 	andeq	r6, fp, r0, lsl #4
    1edc:	006e0b00 	rsbeq	r0, lr, r0, lsl #22
    1ee0:	00253701 	eoreq	r3, r5, r1, lsl #14
    1ee4:	0b9a0000 	bleq	fe681eec <__bss_end__+0xfe6767cc>
    1ee8:	700b0000 	andvc	r0, fp, r0
    1eec:	74370100 	ldrtvc	r0, [r7], #-256	; 0x100
    1ef0:	bb000000 	bllt	1ef8 <_start-0x6108>
    1ef4:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    1ef8:	00000504 	andeq	r0, r0, r4, lsl #10
    1efc:	00743701 	rsbseq	r3, r4, r1, lsl #14
    1f00:	0bf10000 	bleq	ffc41f08 <__bss_end__+0xffc367e8>
    1f04:	6c100000 	ldcvs	0, cr0, [r0], {-0}
    1f08:	01006e65 	tsteq	r0, r5, ror #28
    1f0c:	00002539 	andeq	r2, r0, r9, lsr r5
    1f10:	000c0f00 	andeq	r0, ip, r0, lsl #30
    1f14:	00730f00 	rsbseq	r0, r3, r0, lsl #30
    1f18:	00743d01 	rsbseq	r3, r4, r1, lsl #26
    1f1c:	50010000 	andpl	r0, r1, r0
    1f20:	07640a00 	strbeq	r0, [r4, -r0, lsl #20]!
    1f24:	47010000 	strmi	r0, [r1, -r0]
    1f28:	00000074 	andeq	r0, r0, r4, ror r0
    1f2c:	00008ed0 	ldrdeq	r8, [r0], -r0
    1f30:	0000019c 	muleq	r0, ip, r1
    1f34:	02d39c01 	sbcseq	r9, r3, #256	; 0x100
    1f38:	280d0000 	stmdacs	sp, {}	; <UNPREDICTABLE>
    1f3c:	01000007 	tsteq	r0, r7
    1f40:	00002c47 	andeq	r2, r0, r7, asr #24
    1f44:	000c3600 	andeq	r3, ip, r0, lsl #12
    1f48:	73640b00 	cmnvc	r4, #0, 22
    1f4c:	47010074 	smlsdxmi	r1, r4, r0, r0
    1f50:	00000074 	andeq	r0, r0, r4, ror r0
    1f54:	00000c64 	andeq	r0, r0, r4, ror #24
    1f58:	01006e0b 	tsteq	r0, fp, lsl #28
    1f5c:	00002547 	andeq	r2, r0, r7, asr #10
    1f60:	000cd200 	andeq	sp, ip, r0, lsl #4
    1f64:	61760b00 	cmnvs	r6, r0, lsl #22
    1f68:	4701006c 	strmi	r0, [r1, -ip, rrx]
    1f6c:	00000025 	andeq	r0, r0, r5, lsr #32
    1f70:	00000cfe 	strdeq	r0, [r0], -lr
    1f74:	0007560d 	andeq	r5, r7, sp, lsl #12
    1f78:	25470100 	strbcs	r0, [r7, #-256]	; 0x100
    1f7c:	7d000000 	stcvc	0, cr0, [r0, #-0]
    1f80:	0e00000d 	cdpeq	0, 0, cr0, cr0, cr13, {0}
    1f84:	0000072d 	andeq	r0, r0, sp, lsr #14
    1f88:	00254701 	eoreq	r4, r5, r1, lsl #14
    1f8c:	91020000 	mrsls	r0, (UNDEF: 2)
    1f90:	75620f04 	strbvc	r0, [r2, #-3844]!	; 0xf04
    1f94:	4c010066 	stcmi	0, cr0, [r1], {102}	; 0x66
    1f98:	000002d3 	ldrdeq	r0, [r0], -r3
    1f9c:	7fa89103 	svcvc	0x00a89103
    1fa0:	01007010 	tsteq	r0, r0, lsl r0
    1fa4:	0000744c 	andeq	r7, r0, ip, asr #8
    1fa8:	000da700 	andeq	sl, sp, r0, lsl #14
    1fac:	00751000 	rsbseq	r1, r5, r0
    1fb0:	002c4d01 	eoreq	r4, ip, r1, lsl #26
    1fb4:	0e4c0000 	cdpeq	0, 4, cr0, cr12, cr0, {0}
    1fb8:	f8110000 			; <UNDEFINED> instruction: 0xf8110000
    1fbc:	f3000001 	vhadd.u8	d0, d0, d1
    1fc0:	05000002 	streq	r0, [r0, #-2]
    1fc4:	00ac9003 	adceq	r9, ip, r3
    1fc8:	8f3c1200 	svchi	0x003c1200
    1fcc:	00740000 	rsbseq	r0, r4, r0
    1fd0:	02610000 	rsbeq	r0, r1, #0
    1fd4:	0a130000 	beq	4c1fdc <__bss_end__+0x4b68bc>
    1fd8:	01000007 	tsteq	r0, r7
    1fdc:	00002c52 	andeq	r2, r0, r2, asr ip
    1fe0:	000f5100 	andeq	r5, pc, r0, lsl #2
    1fe4:	10140000 	andsne	r0, r4, r0
    1fe8:	60000090 	mulvs	r0, r0, r0
    1fec:	15000006 	strne	r0, [r0, #-6]
    1ff0:	00009024 	andeq	r9, r0, r4, lsr #32
    1ff4:	00000667 	andeq	r0, r0, r7, ror #12
    1ff8:	00000299 	muleq	r0, r9, r2
    1ffc:	02530116 	subseq	r0, r3, #-2147483643	; 0x80000005
    2000:	01167508 	tsteq	r6, r8, lsl #10
    2004:	90030552 	andls	r0, r3, r2, asr r5
    2008:	160000ac 	strne	r0, [r0], -ip, lsr #1
    200c:	03055101 	movweq	r5, #20737	; 0x5101
    2010:	0000acc8 	andeq	sl, r0, r8, asr #25
    2014:	05500116 	ldrbeq	r0, [r0, #-278]	; 0x116
    2018:	00acb403 	adceq	fp, ip, r3, lsl #8
    201c:	28140000 	ldmdacs	r4, {}	; <UNPREDICTABLE>
    2020:	7d000090 	stcvc	0, cr0, [r0, #-576]	; 0xfffffdc0
    2024:	15000006 	strne	r0, [r0, #-6]
    2028:	00009034 	andeq	r9, r0, r4, lsr r0
    202c:	000000e0 	andeq	r0, r0, r0, ror #1
    2030:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    2034:	02510116 	subseq	r0, r1, #-2147483643	; 0x80000005
    2038:	1700007d 	smlsdxne	r0, sp, r0, r0
    203c:	00009048 	andeq	r9, r0, r8, asr #32
    2040:	00000130 	andeq	r0, r0, r0, lsr r1
    2044:	02530116 	subseq	r0, r3, #-2147483643	; 0x80000005
    2048:	0116007d 	tsteq	r6, sp, ror r0
    204c:	00740251 	rsbseq	r0, r4, r1, asr r2
    2050:	02500116 	subseq	r0, r0, #-2147483643	; 0x80000005
    2054:	00000075 	andeq	r0, r0, r5, ror r0
    2058:	00007a18 	andeq	r7, r0, r8, lsl sl
    205c:	0002e300 	andeq	lr, r2, r0, lsl #6
    2060:	006b1900 	rsbeq	r1, fp, r0, lsl #18
    2064:	003f0000 	eorseq	r0, pc, r0
    2068:	00007a18 	andeq	r7, r0, r8, lsl sl
    206c:	0002f300 	andeq	pc, r2, r0, lsl #6
    2070:	006b1900 	rsbeq	r1, fp, r0, lsl #18
    2074:	00040000 	andeq	r0, r4, r0
    2078:	0002e306 	andeq	lr, r2, r6, lsl #6
    207c:	07471a00 	strbeq	r1, [r7, -r0, lsl #20]
    2080:	1f010000 	svcne	0x00010000
    2084:	0000906c 	andeq	r9, r0, ip, rrx
    2088:	00000054 	andeq	r0, r0, r4, asr r0
    208c:	037c9c01 	cmneq	ip, #256	; 0x100
    2090:	5c0d0000 	stcpl	0, cr0, [sp], {-0}
    2094:	01000007 	tsteq	r0, r7
    2098:	00038b1f 	andeq	r8, r3, pc, lsl fp
    209c:	000f7d00 	andeq	r7, pc, r0, lsl #26
    20a0:	07200d00 	streq	r0, [r0, -r0, lsl #26]!
    20a4:	1f010000 	svcne	0x00010000
    20a8:	000003a0 	andeq	r0, r0, r0, lsr #7
    20ac:	00000fa9 	andeq	r0, r0, r9, lsr #31
    20b0:	0001f811 	andeq	pc, r1, r1, lsl r8	; <UNPREDICTABLE>
    20b4:	0003b600 	andeq	fp, r3, r0, lsl #12
    20b8:	98030500 	stmdals	r3, {r8, sl}
    20bc:	140000ac 	strne	r0, [r0], #-172	; 0xac
    20c0:	0000907c 	andeq	r9, r0, ip, ror r0
    20c4:	00000660 	andeq	r0, r0, r0, ror #12
    20c8:	00909015 	addseq	r9, r0, r5, lsl r0
    20cc:	00066700 	andeq	r6, r6, r0, lsl #14
    20d0:	00037200 	andeq	r7, r3, r0, lsl #4
    20d4:	53011600 	movwpl	r1, #5632	; 0x1600
    20d8:	16200802 	strtne	r0, [r0], -r2, lsl #16
    20dc:	03055201 	movweq	r5, #20993	; 0x5201
    20e0:	0000ac98 	muleq	r0, r8, ip
    20e4:	05510116 	ldrbeq	r0, [r1, #-278]	; 0x116
    20e8:	00acc803 	adceq	ip, ip, r3, lsl #16
    20ec:	50011600 	andpl	r1, r1, r0, lsl #12
    20f0:	ad000305 	stcge	3, cr0, [r0, #-20]	; 0xffffffec
    20f4:	14000000 	strne	r0, [r0], #-0
    20f8:	00009094 	muleq	r0, r4, r0
    20fc:	0000067d 	andeq	r0, r0, sp, ror r6
    2100:	00251b00 	eoreq	r1, r5, r0, lsl #22
    2104:	038b0000 	orreq	r0, fp, #0
    2108:	251c0000 	ldrcs	r0, [ip, #-0]
    210c:	00000000 	andeq	r0, r0, r0
    2110:	037c0405 	cmneq	ip, #83886080	; 0x5000000
    2114:	251b0000 	ldrcs	r0, [fp, #-0]
    2118:	a0000000 	andge	r0, r0, r0
    211c:	1c000003 	stcne	0, cr0, [r0], {3}
    2120:	00000081 	andeq	r0, r0, r1, lsl #1
    2124:	91040500 	tstls	r4, r0, lsl #10
    2128:	18000003 	stmdane	r0, {r0, r1}
    212c:	0000007a 	andeq	r0, r0, sl, ror r0
    2130:	000003b6 			; <UNDEFINED> instruction: 0x000003b6
    2134:	00006b19 	andeq	r6, r0, r9, lsl fp
    2138:	06000e00 	streq	r0, [r0], -r0, lsl #28
    213c:	000003a6 	andeq	r0, r0, r6, lsr #7
    2140:	0006991d 	andeq	r9, r6, sp, lsl r9
    2144:	257d0100 	ldrbcs	r0, [sp, #-256]!	; 0x100
    2148:	c0000000 	andgt	r0, r0, r0
    214c:	88000090 	stmdahi	r0, {r4, r7}
    2150:	01000002 	tsteq	r0, r2
    2154:	0006259c 	muleq	r6, ip, r5
    2158:	75620b00 	strbvc	r0, [r2, #-2816]!	; 0xb00
    215c:	7d010066 	stcvc	0, cr0, [r1, #-408]	; 0xfffffe68
    2160:	00000074 	andeq	r0, r0, r4, ror r0
    2164:	00000fd5 	ldrdeq	r0, [r0], -r5
    2168:	01006e0b 	tsteq	r0, fp, lsl #28
    216c:	0000257d 	andeq	r2, r0, sp, ror r5
    2170:	00100100 	andseq	r0, r0, r0, lsl #2
    2174:	6d660b00 	vstmdbvs	r6!, {d16-d15}
    2178:	7d010074 	stcvc	0, cr0, [r1, #-464]	; 0xfffffe30
    217c:	00000081 	andeq	r0, r0, r1, lsl #1
    2180:	0000102f 	andeq	r1, r0, pc, lsr #32
    2184:	0006ad0d 	andeq	sl, r6, sp, lsl #26
    2188:	ae7d0100 	rpwgee	f0, f5, f0
    218c:	63000000 	movwvs	r0, #0
    2190:	10000010 	andne	r0, r0, r0, lsl r0
    2194:	7e010070 	mcrvc	0, 0, r0, cr1, cr0, {3}
    2198:	00000074 	andeq	r0, r0, r4, ror r0
    219c:	00001076 	andeq	r1, r0, r6, ror r0
    21a0:	01006510 	tsteq	r0, r0, lsl r5
    21a4:	0000747e 	andeq	r7, r0, lr, ror r4
    21a8:	0010f400 	andseq	pc, r0, r0, lsl #8
    21ac:	01f81100 	mvnseq	r1, r0, lsl #2
    21b0:	06350000 	ldrteq	r0, [r5], -r0
    21b4:	03050000 	movweq	r0, #20480	; 0x5000
    21b8:	0000aca8 	andeq	sl, r0, r8, lsr #25
    21bc:	0000601e 	andeq	r6, r0, lr, lsl r0
    21c0:	00731000 	rsbseq	r1, r3, r0
    21c4:	00748b01 	rsbseq	r8, r4, r1, lsl #22
    21c8:	111b0000 	tstne	fp, r0
    21cc:	6e0f0000 	cdpvs	0, 0, cr0, cr15, cr0, {0}
    21d0:	01006d75 	tsteq	r0, r5, ror sp
    21d4:	00063a8b 	andeq	r3, r6, fp, lsl #21
    21d8:	d8910300 	ldmle	r1, {r8, r9}
    21dc:	0756137e 			; <UNDEFINED> instruction: 0x0756137e
    21e0:	8c010000 	stchi	0, cr0, [r1], {-0}
    21e4:	0000002c 	andeq	r0, r0, ip, lsr #32
    21e8:	00001170 	andeq	r1, r0, r0, ror r1
    21ec:	00914415 	addseq	r4, r1, r5, lsl r4
    21f0:	0000b900 	andeq	fp, r0, r0, lsl #18
    21f4:	00047b00 	andeq	r7, r4, r0, lsl #22
    21f8:	50011600 	andpl	r1, r1, r0, lsl #12
    21fc:	00007502 	andeq	r7, r0, r2, lsl #10
    2200:	00915814 	addseq	r5, r1, r4, lsl r8
    2204:	00066000 	andeq	r6, r6, r0
    2208:	916c1500 	cmnls	ip, r0, lsl #10
    220c:	06670000 	strbteq	r0, [r7], -r0
    2210:	04b30000 	ldrteq	r0, [r3], #0
    2214:	01160000 	tsteq	r6, r0
    2218:	92080253 	andls	r0, r8, #805306373	; 0x30000005
    221c:	05520116 	ldrbeq	r0, [r2, #-278]	; 0x116
    2220:	00aca803 	adceq	sl, ip, r3, lsl #16
    2224:	51011600 	tstpl	r1, r0, lsl #12
    2228:	acc80305 	stclge	3, cr0, [r8], {5}
    222c:	01160000 	tsteq	r6, r0
    2230:	18030550 	stmdane	r3, {r4, r6, r8, sl}
    2234:	000000ad 	andeq	r0, r0, sp, lsr #1
    2238:	00917014 	addseq	r7, r1, r4, lsl r0
    223c:	00067d00 	andeq	r7, r6, r0, lsl #26
    2240:	91e01400 	mvnls	r1, r0, lsl #8
    2244:	06600000 	strbteq	r0, [r0], -r0
    2248:	f4150000 			; <UNDEFINED> instruction: 0xf4150000
    224c:	67000091 			; <UNDEFINED> instruction: 0x67000091
    2250:	f4000006 	vst4.8	{d0-d3}, [r0], r6
    2254:	16000004 	strne	r0, [r0], -r4
    2258:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    225c:	52011698 	andpl	r1, r1, #152, 12	; 0x9800000
    2260:	aca80305 	stcge	3, cr0, [r8], #20
    2264:	01160000 	tsteq	r6, r0
    2268:	c8030551 	stmdagt	r3, {r0, r4, r6, r8, sl}
    226c:	160000ac 	strne	r0, [r0], -ip, lsr #1
    2270:	03055001 	movweq	r5, #20481	; 0x5001
    2274:	0000ad34 	andeq	sl, r0, r4, lsr sp
    2278:	91f81400 	mvnsls	r1, r0, lsl #8
    227c:	067d0000 	ldrbteq	r0, [sp], -r0
    2280:	1c150000 	ldcne	0, cr0, [r5], {-0}
    2284:	9c000092 	stcls	0, cr0, [r0], {146}	; 0x92
    2288:	2a000001 	bcs	2294 <_start-0x5d6c>
    228c:	16000005 	strne	r0, [r0], -r5
    2290:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    2294:	51011680 	smlabbpl	r1, r0, r6, r1
    2298:	7ed09103 	atnvcs	f1, f3
    229c:	01500116 	cmpeq	r0, r6, lsl r1
    22a0:	7d02163a 	stcvc	6, cr1, [r2, #-232]	; 0xffffff18
    22a4:	16310104 	ldrtne	r0, [r1], -r4, lsl #2
    22a8:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    22ac:	15000077 	strne	r0, [r0, #-119]	; 0x77
    22b0:	00009240 	andeq	r9, r0, r0, asr #4
    22b4:	0000019c 	muleq	r0, ip, r1
    22b8:	00000558 	andeq	r0, r0, r8, asr r5
    22bc:	02520116 	subseq	r0, r2, #-2147483643	; 0x80000005
    22c0:	01168008 	tsteq	r6, r8
    22c4:	d0910351 	addsle	r0, r1, r1, asr r3
    22c8:	5001167e 	andpl	r1, r1, lr, ror r6
    22cc:	02163a01 	andseq	r3, r6, #4096	; 0x1000
    22d0:	7b02047d 	blvc	834cc <__bss_end__+0x77dac>
    22d4:	7d021600 	stcvc	6, cr1, [r2, #-0]
    22d8:	00770200 	rsbseq	r0, r7, r0, lsl #4
    22dc:	92641500 	rsbls	r1, r4, #0, 10
    22e0:	019c0000 	orrseq	r0, ip, r0
    22e4:	05860000 	streq	r0, [r6]
    22e8:	01160000 	tsteq	r6, r0
    22ec:	80080252 	andhi	r0, r8, r2, asr r2
    22f0:	03510116 	cmpeq	r1, #-2147483643	; 0x80000005
    22f4:	167ed091 			; <UNDEFINED> instruction: 0x167ed091
    22f8:	40015001 	andmi	r5, r1, r1
    22fc:	047d0216 	ldrbteq	r0, [sp], #-534	; 0x216
    2300:	16007b02 	strne	r7, [r0], -r2, lsl #22
    2304:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    2308:	15000077 	strne	r0, [r0, #-119]	; 0x77
    230c:	00009288 	andeq	r9, r0, r8, lsl #5
    2310:	0000019c 	muleq	r0, ip, r1
    2314:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
    2318:	02520116 	subseq	r0, r2, #-2147483643	; 0x80000005
    231c:	01168008 	tsteq	r6, r8
    2320:	d0910351 	addsle	r0, r1, r1, asr r3
    2324:	5001167e 	andpl	r1, r1, lr, ror r6
    2328:	02163201 	andseq	r3, r6, #268435456	; 0x10000000
    232c:	7b02047d 	blvc	83528 <__bss_end__+0x77e08>
    2330:	7d021600 	stcvc	6, cr1, [r2, #-0]
    2334:	00770200 	rsbseq	r0, r7, r0, lsl #4
    2338:	92b81500 	adcsls	r1, r8, #0, 10
    233c:	019c0000 	orrseq	r0, ip, r0
    2340:	05e20000 	strbeq	r0, [r2, #0]!
    2344:	01160000 	tsteq	r6, r0
    2348:	80080252 	andhi	r0, r8, r2, asr r2
    234c:	03510116 	cmpeq	r1, #-2147483643	; 0x80000005
    2350:	167ed091 			; <UNDEFINED> instruction: 0x167ed091
    2354:	38015001 	stmdacc	r1, {r0, ip, lr}
    2358:	047d0216 	ldrbteq	r0, [sp], #-534	; 0x216
    235c:	16007b02 	strne	r7, [r0], -r2, lsl #22
    2360:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    2364:	14000077 	strne	r0, [r0], #-119	; 0x77
    2368:	000092c0 	andeq	r9, r0, r0, asr #5
    236c:	00000660 	andeq	r0, r0, r0, ror #12
    2370:	0092dc15 	addseq	sp, r2, r5, lsl ip
    2374:	00066700 	andeq	r6, r6, r0, lsl #14
    2378:	00061a00 	andeq	r1, r6, r0, lsl #20
    237c:	53011600 	movwpl	r1, #5632	; 0x1600
    2380:	16b90802 	ldrtne	r0, [r9], r2, lsl #16
    2384:	03055201 	movweq	r5, #20993	; 0x5201
    2388:	0000aca8 	andeq	sl, r0, r8, lsr #25
    238c:	05510116 	ldrbeq	r0, [r1, #-278]	; 0x116
    2390:	00acc803 	adceq	ip, ip, r3, lsl #16
    2394:	50011600 	andpl	r1, r1, r0, lsl #12
    2398:	ad5c0305 	ldclge	3, cr0, [ip, #-20]	; 0xffffffec
    239c:	14000000 	strne	r0, [r0], #-0
    23a0:	000092e0 	andeq	r9, r0, r0, ror #5
    23a4:	0000067d 	andeq	r0, r0, sp, ror r6
    23a8:	7a180000 	bvc	6023b0 <__bss_end__+0x5f6c90>
    23ac:	35000000 	strcc	r0, [r0, #-0]
    23b0:	19000006 	stmdbne	r0, {r1, r2}
    23b4:	0000006b 	andeq	r0, r0, fp, rrx
    23b8:	25060009 	strcs	r0, [r6, #-9]
    23bc:	18000006 	stmdane	r0, {r1, r2}
    23c0:	0000007a 	andeq	r0, r0, sl, ror r0
    23c4:	0000064a 	andeq	r0, r0, sl, asr #12
    23c8:	00006b19 	andeq	r6, r0, r9, lsl fp
    23cc:	1f007f00 	svcne	0x00007f00
    23d0:	000006c8 	andeq	r0, r0, r8, asr #13
    23d4:	038b1d03 	orreq	r1, fp, #3, 26	; 0xc0
    23d8:	051f0000 	ldreq	r0, [pc, #-0]	; 23e0 <_start-0x5c20>
    23dc:	03000007 	movweq	r0, #7
    23e0:	0003a022 	andeq	sl, r3, r2, lsr #32
    23e4:	02f22000 	rscseq	r2, r2, #0
    23e8:	1e030000 	cdpne	0, 0, cr0, cr3, cr0, {0}
    23ec:	00069c21 	andeq	r9, r6, r1, lsr #24
    23f0:	25290300 	strcs	r0, [r9, #-768]!	; 0x300
    23f4:	7d000000 	stcvc	0, cr0, [r0, #-0]
    23f8:	1c000006 	stcne	0, cr0, [r0], {6}
    23fc:	00000081 	andeq	r0, r0, r1, lsl #1
    2400:	34200022 	strtcc	r0, [r0], #-34	; 0x22
    2404:	03000001 	movweq	r0, #1
    2408:	00ff0066 	rscseq	r0, pc, r6, rrx
    240c:	00040000 	andeq	r0, r4, r0
    2410:	00000be3 	andeq	r0, r0, r3, ror #23
    2414:	00640104 	rsbeq	r0, r4, r4, lsl #2
    2418:	74010000 	strvc	r0, [r1], #-0
    241c:	38000007 	stmdacc	r0, {r0, r1, r2}
    2420:	48000006 	stmdami	r0, {r1, r2}
    2424:	28000093 	stmdacs	r0, {r0, r1, r4, r7}
    2428:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    242c:	0200000b 	andeq	r0, r0, #11
    2430:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2434:	04030074 	streq	r0, [r3], #-116	; 0x74
    2438:	00023207 	andeq	r3, r2, r7, lsl #4
    243c:	06010300 	streq	r0, [r1], -r0, lsl #6
    2440:	0000010d 	andeq	r0, r0, sp, lsl #2
    2444:	ae050203 	cdpge	2, 0, cr0, cr5, cr3, {0}
    2448:	03000002 	movweq	r0, #2
    244c:	027e0504 	rsbseq	r0, lr, #4, 10	; 0x1000000
    2450:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2454:	00027905 	andeq	r7, r2, r5, lsl #18
    2458:	08010300 	stmdaeq	r1, {r8, r9}
    245c:	0000010b 	andeq	r0, r0, fp, lsl #2
    2460:	5e070203 	cdppl	2, 0, cr0, cr7, cr3, {0}
    2464:	03000001 	movweq	r0, #1
    2468:	022d0704 	eoreq	r0, sp, #4, 14	; 0x100000
    246c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2470:	00022807 	andeq	r2, r2, r7, lsl #16
    2474:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2478:	0000025e 	andeq	r0, r0, lr, asr r2
    247c:	14080103 	strne	r0, [r8], #-259	; 0x103
    2480:	04000001 	streq	r0, [r0], #-1
    2484:	00007f04 	andeq	r7, r0, r4, lsl #30
    2488:	00720500 	rsbseq	r0, r2, r0, lsl #10
    248c:	34060000 	strcc	r0, [r6], #-0
    2490:	01000001 	tsteq	r0, r1
    2494:	00934804 	addseq	r4, r3, r4, lsl #16
    2498:	00002800 	andeq	r2, r0, r0, lsl #16
    249c:	ca9c0100 	bgt	fe7028a4 <__bss_end__+0xfe6f7184>
    24a0:	07000000 	streq	r0, [r0, -r0]
    24a4:	0000935c 	andeq	r9, r0, ip, asr r3
    24a8:	000000ac 	andeq	r0, r0, ip, lsr #1
    24ac:	05500108 	ldrbeq	r0, [r0, #-264]	; 0x108
    24b0:	00ad9403 	adceq	r9, sp, r3, lsl #8
    24b4:	64090000 	strvs	r0, [r9], #-0
    24b8:	ea000093 	b	270c <_start-0x58f4>
    24bc:	c0000000 	andgt	r0, r0, r0
    24c0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    24c4:	08025001 	stmdaeq	r2, {r0, ip, lr}
    24c8:	680a0064 	stmdavs	sl, {r2, r5, r6}
    24cc:	fb000093 	blx	2722 <_start-0x58de>
    24d0:	00000000 	andeq	r0, r0, r0
    24d4:	0000250b 	andeq	r2, r0, fp, lsl #10
    24d8:	0000d900 	andeq	sp, r0, r0, lsl #18
    24dc:	00790c00 	rsbseq	r0, r9, r0, lsl #24
    24e0:	0d000000 	stceq	0, cr0, [r0, #-0]
    24e4:	00000705 	andeq	r0, r0, r5, lsl #14
    24e8:	00e42202 	rsceq	r2, r4, r2, lsl #4
    24ec:	04040000 	streq	r0, [r4], #-0
    24f0:	000000ca 	andeq	r0, r0, sl, asr #1
    24f4:	00078e0e 	andeq	r8, r7, lr, lsl #28
    24f8:	fb500200 	blx	1402d02 <__bss_end__+0x13f75e2>
    24fc:	0c000000 	stceq	0, cr0, [r0], {-0}
    2500:	0000002c 	andeq	r0, r0, ip, lsr #32
    2504:	07690f00 	strbeq	r0, [r9, -r0, lsl #30]!
    2508:	63020000 	movwvs	r0, #8192	; 0x2000
    250c:	0002dd00 	andeq	sp, r2, r0, lsl #26
    2510:	ad000400 	cfstrsge	mvf0, [r0, #-0]
    2514:	0400000c 	streq	r0, [r0], #-12
    2518:	00006401 	andeq	r6, r0, r1, lsl #8
    251c:	08790100 	ldmdaeq	r9!, {r8}^
    2520:	06380000 	ldrteq	r0, [r8], -r0
    2524:	93700000 	cmnls	r0, #0
    2528:	00b00000 	adcseq	r0, r0, r0
    252c:	0c150000 	ldceq	0, cr0, [r5], {-0}
    2530:	04020000 	streq	r0, [r2], #-0
    2534:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    2538:	07040300 	streq	r0, [r4, -r0, lsl #6]
    253c:	00000232 	andeq	r0, r0, r2, lsr r2
    2540:	0d060103 	stfeqs	f0, [r6, #-12]
    2544:	03000001 	movweq	r0, #1
    2548:	02ae0502 	adceq	r0, lr, #8388608	; 0x800000
    254c:	04030000 	streq	r0, [r3], #-0
    2550:	00027e05 	andeq	r7, r2, r5, lsl #28
    2554:	05080300 	streq	r0, [r8, #-768]	; 0x300
    2558:	00000279 	andeq	r0, r0, r9, ror r2
    255c:	00084204 	andeq	r4, r8, r4, lsl #4
    2560:	5a2e0200 	bpl	b82d68 <__bss_end__+0xb77648>
    2564:	03000000 	movweq	r0, #0
    2568:	010b0801 	tsteq	fp, r1, lsl #16
    256c:	02030000 	andeq	r0, r3, #0
    2570:	00015e07 	andeq	r5, r1, r7, lsl #28
    2574:	02cd0400 	sbceq	r0, sp, #0, 8
    2578:	34020000 	strcc	r0, [r2], #-0
    257c:	00000073 	andeq	r0, r0, r3, ror r0
    2580:	2d070403 	cfstrscs	mvf0, [r7, #-12]
    2584:	03000002 	movweq	r0, #2
    2588:	02280708 	eoreq	r0, r8, #8, 14	; 0x200000
    258c:	04030000 	streq	r0, [r3], #-0
    2590:	00025e07 	andeq	r5, r2, r7, lsl #28
    2594:	08010300 	stmdaeq	r1, {r8, r9}
    2598:	00000114 	andeq	r0, r0, r4, lsl r1
    259c:	00950405 	addseq	r0, r5, r5, lsl #8
    25a0:	88060000 	stmdahi	r6, {}	; <UNPREDICTABLE>
    25a4:	07000000 	streq	r0, [r0, -r0]
    25a8:	d10e030c 	tstle	lr, ip, lsl #6
    25ac:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    25b0:	03007874 	movweq	r7, #2164	; 0x874
    25b4:	00004f0f 	andeq	r4, r0, pc, lsl #30
    25b8:	72080000 	andvc	r0, r8, #0
    25bc:	0f030078 	svceq	0x00030078
    25c0:	0000004f 	andeq	r0, r0, pc, asr #32
    25c4:	08100901 	ldmdaeq	r0, {r0, r8, fp}
    25c8:	10030000 	andne	r0, r3, r0
    25cc:	00000068 	andeq	r0, r0, r8, rrx
    25d0:	07c10904 	strbeq	r0, [r1, r4, lsl #18]
    25d4:	11030000 	mrsne	r0, (UNDEF: 3)
    25d8:	00000068 	andeq	r0, r0, r8, rrx
    25dc:	f9040008 			; <UNDEFINED> instruction: 0xf9040008
    25e0:	03000007 	movweq	r0, #7
    25e4:	00009a12 	andeq	r9, r0, r2, lsl sl
    25e8:	04010a00 	streq	r0, [r1], #-2560	; 0xa00
    25ec:	0000f710 	andeq	pc, r0, r0, lsl r7	; <UNPREDICTABLE>
    25f0:	08150b00 	ldmdaeq	r5, {r8, r9, fp}
    25f4:	0b010000 	bleq	425fc <__bss_end__+0x36edc>
    25f8:	00000803 	andeq	r0, r0, r3, lsl #16
    25fc:	07eb0b02 	strbeq	r0, [fp, r2, lsl #22]!
    2600:	00030000 	andeq	r0, r3, r0
    2604:	00082a04 	andeq	r2, r8, r4, lsl #20
    2608:	dc100400 	cfldrsle	mvf0, [r0], {-0}
    260c:	07000000 	streq	r0, [r0, -r0]
    2610:	2f140414 	svccs	0x00140414
    2614:	09000001 	stmdbeq	r0, {r0}
    2618:	00000899 	muleq	r0, r9, r8
    261c:	002c1504 	eoreq	r1, ip, r4, lsl #10
    2620:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2624:	0000088d 	andeq	r0, r0, sp, lsl #17
    2628:	00f71804 	rscseq	r1, r7, r4, lsl #16
    262c:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    2630:	00000858 	andeq	r0, r0, r8, asr r8
    2634:	00d11b04 	sbcseq	r1, r1, r4, lsl #22
    2638:	00080000 	andeq	r0, r8, r0
    263c:	00084a04 	andeq	r4, r8, r4, lsl #20
    2640:	02200400 	eoreq	r0, r0, #0, 8
    2644:	0c000001 	stceq	0, cr0, [r0], {1}
    2648:	00000797 	muleq	r0, r7, r7
    264c:	00250601 	eoreq	r0, r5, r1, lsl #12
    2650:	93700000 	cmnls	r0, #0
    2654:	00200000 	eoreq	r0, r0, r0
    2658:	9c010000 	stcls	0, cr0, [r1], {-0}
    265c:	0000017a 	andeq	r0, r0, sl, ror r1
    2660:	0100630d 	tsteq	r0, sp, lsl #6
    2664:	00002506 	andeq	r2, r0, r6, lsl #10
    2668:	00119a00 	andseq	r9, r1, r0, lsl #20
    266c:	93840e00 	orrls	r0, r4, #0, 28
    2670:	027a0000 	rsbseq	r0, sl, #0
    2674:	010f0000 	mrseq	r0, CPSR
    2678:	00740251 	rsbseq	r0, r4, r1, asr r2
    267c:	0550010f 	ldrbeq	r0, [r0, #-271]	; 0x10f
    2680:	00b70403 	adcseq	r0, r7, r3, lsl #8
    2684:	10000000 	andne	r0, r0, r0
    2688:	00000822 	andeq	r0, r0, r2, lsr #16
    268c:	93900b01 	orrsls	r0, r0, #1024	; 0x400
    2690:	00900000 	addseq	r0, r0, r0
    2694:	9c010000 	stcls	0, cr0, [r1], {-0}
    2698:	00000227 	andeq	r0, r0, r7, lsr #4
    269c:	0007ab11 	andeq	sl, r7, r1, lsl fp
    26a0:	250c0100 	strcs	r0, [ip, #-256]	; 0x100
    26a4:	11000000 	mrsne	r0, (UNDEF: 0)
    26a8:	0000086d 	andeq	r0, r0, sp, ror #16
    26ac:	00250c01 	eoreq	r0, r5, r1, lsl #24
    26b0:	d7120000 	ldrle	r0, [r2, -r0]
    26b4:	01000000 	mrseq	r0, (UNDEF: 0)
    26b8:	7362130d 	cmnvc	r2, #872415232	; 0x34000000
    26bc:	0f010073 	svceq	0x00010073
    26c0:	00000227 	andeq	r0, r0, r7, lsr #4
    26c4:	000011b8 			; <UNDEFINED> instruction: 0x000011b8
    26c8:	0007b914 	andeq	fp, r7, r4, lsl r9
    26cc:	27100100 	ldrcs	r0, [r0, -r0, lsl #2]
    26d0:	13000002 	movwne	r0, #2
    26d4:	01006263 	tsteq	r0, r3, ror #4
    26d8:	00022d17 	andeq	r2, r2, r7, lsl sp
    26dc:	0011d800 	andseq	sp, r1, r0, lsl #16
    26e0:	93b81500 			; <UNDEFINED> instruction: 0x93b81500
    26e4:	02960000 	addseq	r0, r6, #0
    26e8:	f4160000 			; <UNDEFINED> instruction: 0xf4160000
    26ec:	a1000093 	swpge	r0, r3, [r0]	; <UNPREDICTABLE>
    26f0:	fd000002 	stc2	0, cr0, [r0, #-8]
    26f4:	0f000001 	svceq	0x00000001
    26f8:	03055101 	movweq	r5, #20737	; 0x5101
    26fc:	0000ada0 	andeq	sl, r0, r0, lsr #27
    2700:	0550010f 	ldrbeq	r0, [r0, #-271]	; 0x10f
    2704:	00b70403 	adcseq	r0, r7, r3, lsl #8
    2708:	fc160000 	ldc2	0, cr0, [r6], {-0}
    270c:	bc000093 	stclt	0, cr0, [r0], {147}	; 0x93
    2710:	14000002 	strne	r0, [r0], #-2
    2714:	0f000002 	svceq	0x00000002
    2718:	03055001 	movweq	r5, #20481	; 0x5001
    271c:	0000adc4 	andeq	sl, r0, r4, asr #27
    2720:	94001500 	strls	r1, [r0], #-1280	; 0x500
    2724:	02d20000 	sbcseq	r0, r2, #0
    2728:	04150000 	ldreq	r0, [r5], #-0
    272c:	d9000094 	stmdble	r0, {r2, r4, r7}
    2730:	00000002 	andeq	r0, r0, r2
    2734:	00250405 	eoreq	r0, r5, r5, lsl #8
    2738:	04050000 	streq	r0, [r5], #-0
    273c:	0000012f 	andeq	r0, r0, pc, lsr #2
    2740:	0007cf17 	andeq	ip, r7, r7, lsl pc
    2744:	d1050100 	mrsle	r0, (UNDEF: 21)
    2748:	05000000 	streq	r0, [r0, #-0]
    274c:	00b70403 	adcseq	r0, r7, r3, lsl #8
    2750:	00251800 	eoreq	r1, r5, r0, lsl #16
    2754:	02530000 	subseq	r0, r3, #0
    2758:	25190000 	ldrcs	r0, [r9, #-0]
    275c:	00000000 	andeq	r0, r0, r0
    2760:	0006c811 	andeq	ip, r6, r1, lsl r8
    2764:	5e1d0500 	cfmul32pl	mvfx0, mvfx13, mvfx0
    2768:	05000002 	streq	r0, [r0, #-2]
    276c:	00024404 	andeq	r4, r2, r4, lsl #8
    2770:	07ab1100 	streq	r1, [fp, r0, lsl #2]!
    2774:	0c010000 	stceq	0, cr0, [r1], {-0}
    2778:	00000025 	andeq	r0, r0, r5, lsr #32
    277c:	00086d11 	andeq	r6, r8, r1, lsl sp
    2780:	250c0100 	strcs	r0, [ip, #-256]	; 0x100
    2784:	1a000000 	bne	278c <_start-0x5874>
    2788:	00000835 	andeq	r0, r0, r5, lsr r8
    278c:	02904403 	addseq	r4, r0, #50331648	; 0x3000000
    2790:	90190000 	andsls	r0, r9, r0
    2794:	19000002 	stmdbne	r0, {r1}
    2798:	0000005a 	andeq	r0, r0, sl, asr r0
    279c:	d1040500 	tstle	r4, r0, lsl #10
    27a0:	1b000000 	blne	27a8 <_start-0x5858>
    27a4:	00000860 	andeq	r0, r0, r0, ror #16
    27a8:	022d2a04 	eoreq	r2, sp, #4, 20	; 0x4000
    27ac:	dc1c0000 	ldcle	0, cr0, [ip], {-0}
    27b0:	03000007 	movweq	r0, #7
    27b4:	00002515 	andeq	r2, r0, r5, lsl r5
    27b8:	0002bc00 	andeq	fp, r2, r0, lsl #24
    27bc:	02901900 	addseq	r1, r0, #0, 18
    27c0:	8f190000 	svchi	0x00190000
    27c4:	1d000000 	stcne	0, cr0, [r0, #-0]
    27c8:	069c1c00 	ldreq	r1, [ip], r0, lsl #24
    27cc:	29050000 	stmdbcs	r5, {}	; <UNPREDICTABLE>
    27d0:	00000025 	andeq	r0, r0, r5, lsr #32
    27d4:	000002d2 	ldrdeq	r0, [r0], -r2
    27d8:	00008f19 	andeq	r8, r0, r9, lsl pc
    27dc:	12001d00 	andne	r1, r0, #0, 26
    27e0:	000000d7 	ldrdeq	r0, [r0], -r7
    27e4:	6912d105 	ldmdbvs	r2, {r0, r2, r8, ip, lr, pc}
    27e8:	05000007 	streq	r0, [r0, #-7]
    27ec:	01ad0063 			; <UNDEFINED> instruction: 0x01ad0063
    27f0:	00040000 	andeq	r0, r4, r0
    27f4:	00000e44 	andeq	r0, r0, r4, asr #28
    27f8:	00640104 	rsbeq	r0, r4, r4, lsl #2
    27fc:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    2800:	38000008 	stmdacc	r0, {r3}
    2804:	78000006 	stmdavc	r0, {r1, r2}
    2808:	00000000 	andeq	r0, r0, r0
    280c:	3a000000 	bcc	2814 <_start-0x57ec>
    2810:	0200000d 	andeq	r0, r0, #13
    2814:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2818:	04030074 	streq	r0, [r3], #-116	; 0x74
    281c:	00023207 	andeq	r3, r2, r7, lsl #4
    2820:	06010300 	streq	r0, [r1], -r0, lsl #6
    2824:	0000010d 	andeq	r0, r0, sp, lsl #2
    2828:	ae050203 	cdpge	2, 0, cr0, cr5, cr3, {0}
    282c:	03000002 	movweq	r0, #2
    2830:	027e0504 	rsbseq	r0, lr, #4, 10	; 0x1000000
    2834:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2838:	00027905 	andeq	r7, r2, r5, lsl #18
    283c:	08010300 	stmdaeq	r1, {r8, r9}
    2840:	0000010b 	andeq	r0, r0, fp, lsl #2
    2844:	5e070203 	cdppl	2, 0, cr0, cr7, cr3, {0}
    2848:	03000001 	movweq	r0, #1
    284c:	022d0704 	eoreq	r0, sp, #4, 14	; 0x100000
    2850:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2854:	00022807 	andeq	r2, r2, r7, lsl #16
    2858:	07040300 	streq	r0, [r4, -r0, lsl #6]
    285c:	0000025e 	andeq	r0, r0, lr, asr r2
    2860:	14080103 	strne	r0, [r8], #-259	; 0x103
    2864:	04000001 	streq	r0, [r0], #-1
    2868:	0000089f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    286c:	00250e01 	eoreq	r0, r5, r1, lsl #28
    2870:	94200000 	strtls	r0, [r0], #-0
    2874:	00180000 	andseq	r0, r8, r0
    2878:	9c010000 	stcls	0, cr0, [r1], {-0}
    287c:	000000a2 	andeq	r0, r0, r2, lsr #1
    2880:	00090505 	andeq	r0, r9, r5, lsl #10
    2884:	2c0f0100 	stfcss	f0, [pc], {-0}
    2888:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    288c:	00000011 	andeq	r0, r0, r1, lsl r0
    2890:	0008ee06 	andeq	lr, r8, r6, lsl #28
    2894:	38170100 	ldmdacc	r7, {r8}
    2898:	14000094 	strne	r0, [r0], #-148	; 0x94
    289c:	01000000 	mrseq	r0, (UNDEF: 0)
    28a0:	0000c79c 	muleq	r0, ip, r7
    28a4:	09050500 	stmdbeq	r5, {r8, sl}
    28a8:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    28ac:	0000002c 	andeq	r0, r0, ip, lsr #32
    28b0:	00001217 	andeq	r1, r0, r7, lsl r2
    28b4:	07690600 	strbeq	r0, [r9, -r0, lsl #12]!
    28b8:	1f010000 	svcne	0x00010000
    28bc:	0000944c 	andeq	r9, r0, ip, asr #8
    28c0:	00000048 	andeq	r0, r0, r8, asr #32
    28c4:	01779c01 	cmneq	r7, r1, lsl #24
    28c8:	fd070000 	stc2	0, cr0, [r7, #-0]
    28cc:	01000008 	tsteq	r0, r8
    28d0:	0001772a 	andeq	r7, r1, sl, lsr #14
    28d4:	10001c00 	andne	r1, r0, r0, lsl #24
    28d8:	08e60720 	stmiaeq	r6!, {r5, r8, r9, sl}^
    28dc:	2b010000 	blcs	428e4 <__bss_end__+0x371c4>
    28e0:	00000177 	andeq	r0, r0, r7, ror r1
    28e4:	20100024 	andscs	r0, r0, r4, lsr #32
    28e8:	0008ad07 	andeq	sl, r8, r7, lsl #26
    28ec:	772c0100 	strvc	r0, [ip, -r0, lsl #2]!
    28f0:	00000001 	andeq	r0, r0, r1
    28f4:	085a0000 	ldmdaeq	sl, {}^	; <UNPREDICTABLE>
    28f8:	000008cd 	andeq	r0, r0, sp, asr #17
    28fc:	01772d01 	cmneq	r7, r1, lsl #26
    2900:	09200000 	stmdbeq	r0!, {}	; <UNPREDICTABLE>
    2904:	00009454 	andeq	r9, r0, r4, asr r4
    2908:	00000079 	andeq	r0, r0, r9, ror r0
    290c:	00946009 	addseq	r6, r4, r9
    2910:	0000a200 	andeq	sl, r0, r0, lsl #4
    2914:	94680a00 	strbtls	r0, [r8], #-2560	; 0xa00
    2918:	018d0000 	orreq	r0, sp, r0
    291c:	013a0000 	teqeq	sl, r0
    2920:	010b0000 	mrseq	r0, (UNDEF: 11)
    2924:	004e0150 	subeq	r0, lr, r0, asr r1
    2928:	0094740a 	addseq	r7, r4, sl, lsl #8
    292c:	00019e00 	andeq	r9, r1, r0, lsl #28
    2930:	00015a00 	andeq	r5, r1, r0, lsl #20
    2934:	51010b00 	tstpl	r1, r0, lsl #22
    2938:	00010c05 	andeq	r0, r1, r5, lsl #24
    293c:	010b5a00 	tsteq	fp, r0, lsl #20
    2940:	240c0550 	strcs	r0, [ip], #-1360	; 0x550
    2944:	00201000 	eoreq	r1, r0, r0
    2948:	0094800c 	addseq	r8, r4, ip
    294c:	00019e00 	andeq	r9, r1, r0, lsl #28
    2950:	51010b00 	tstpl	r1, r0, lsl #22
    2954:	00200c05 	eoreq	r0, r0, r5, lsl #24
    2958:	010b5a00 	tsteq	fp, r0, lsl #20
    295c:	1c0c0550 	cfstr32ne	mvfx0, [ip], {80}	; 0x50
    2960:	00201000 	eoreq	r1, r0, r0
    2964:	00250d00 	eoreq	r0, r5, r0, lsl #26
    2968:	a2080000 	andge	r0, r8, #0
    296c:	01000008 	tsteq	r0, r8
    2970:	0001880d 	andeq	r8, r1, sp, lsl #16
    2974:	2c0d1000 	stccs	0, cr1, [sp], {-0}
    2978:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    297c:	0000078e 	andeq	r0, r0, lr, lsl #15
    2980:	019e5002 	orrseq	r5, lr, r2
    2984:	2c0f0000 	stccs	0, cr0, [pc], {-0}
    2988:	00000000 	andeq	r0, r0, r0
    298c:	00055610 	andeq	r5, r5, r0, lsl r6
    2990:	0f9c0200 	svceq	0x009c0200
    2994:	0000002c 	andeq	r0, r0, ip, lsr #32
    2998:	00002c0f 	andeq	r2, r0, pc, lsl #24
    299c:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    29a0:	04000001 	streq	r0, [r0], #-1
    29a4:	000f3200 	andeq	r3, pc, r0, lsl #4
    29a8:	64010400 	strvs	r0, [r1], #-1024	; 0x400
    29ac:	01000000 	mrseq	r0, (UNDEF: 0)
    29b0:	00000927 	andeq	r0, r0, r7, lsr #18
    29b4:	00000638 	andeq	r0, r0, r8, lsr r6
    29b8:	00009494 	muleq	r0, r4, r4
    29bc:	00000088 	andeq	r0, r0, r8, lsl #1
    29c0:	00000dd7 	ldrdeq	r0, [r0], -r7
    29c4:	69050402 	stmdbvs	r5, {r1, sl}
    29c8:	0300746e 	movweq	r7, #1134	; 0x46e
    29cc:	02320704 	eorseq	r0, r2, #4, 14	; 0x100000
    29d0:	01030000 	mrseq	r0, (UNDEF: 3)
    29d4:	00010d06 	andeq	r0, r1, r6, lsl #26
    29d8:	05020300 	streq	r0, [r2, #-768]	; 0x300
    29dc:	000002ae 	andeq	r0, r0, lr, lsr #5
    29e0:	7e050403 	cdpvc	4, 0, cr0, cr5, cr3, {0}
    29e4:	03000002 	movweq	r0, #2
    29e8:	02790508 	rsbseq	r0, r9, #8, 10	; 0x2000000
    29ec:	01030000 	mrseq	r0, (UNDEF: 3)
    29f0:	00010b08 	andeq	r0, r1, r8, lsl #22
    29f4:	07020300 	streq	r0, [r2, -r0, lsl #6]
    29f8:	0000015e 	andeq	r0, r0, lr, asr r1
    29fc:	2d070403 	cfstrscs	mvf0, [r7, #-12]
    2a00:	03000002 	movweq	r0, #2
    2a04:	02280708 	eoreq	r0, r8, #8, 14	; 0x200000
    2a08:	04030000 	streq	r0, [r3], #-0
    2a0c:	00025e07 	andeq	r5, r2, r7, lsl #28
    2a10:	08010300 	stmdaeq	r1, {r8, r9}
    2a14:	00000114 	andeq	r0, r0, r4, lsl r1
    2a18:	00094004 	andeq	r4, r9, r4
    2a1c:	94050100 	strls	r0, [r5], #-256	; 0x100
    2a20:	1c000094 	stcne	0, cr0, [r0], {148}	; 0x94
    2a24:	01000000 	mrseq	r0, (UNDEF: 0)
    2a28:	00009e9c 	muleq	r0, ip, lr
    2a2c:	093a0500 	ldmdbeq	sl!, {r8, sl}
    2a30:	05010000 	streq	r0, [r1, #-0]
    2a34:	0000002c 	andeq	r0, r0, ip, lsr #32
    2a38:	00001241 	andeq	r1, r0, r1, asr #4
    2a3c:	090a0600 	stmdbeq	sl, {r9, sl}
    2a40:	0b010000 	bleq	42a48 <__bss_end__+0x37328>
    2a44:	0000002c 	andeq	r0, r0, ip, lsr #32
    2a48:	000094b0 			; <UNDEFINED> instruction: 0x000094b0
    2a4c:	00000014 	andeq	r0, r0, r4, lsl r0
    2a50:	00cb9c01 	sbceq	r9, fp, r1, lsl #24
    2a54:	bc070000 	stclt	0, cr0, [r7], {-0}
    2a58:	ca000094 	bgt	2cb0 <_start-0x5350>
    2a5c:	08000001 	stmdaeq	r0, {r0}
    2a60:	0c055001 	stceq	0, cr5, [r5], {1}
    2a64:	20003004 	andcs	r3, r0, r4
    2a68:	56060000 	strpl	r0, [r6], -r0
    2a6c:	01000009 	tsteq	r0, r9
    2a70:	00002c10 	andeq	r2, r0, r0, lsl ip
    2a74:	0094c400 	addseq	ip, r4, r0, lsl #8
    2a78:	00000c00 	andeq	r0, r0, r0, lsl #24
    2a7c:	f99c0100 			; <UNDEFINED> instruction: 0xf99c0100
    2a80:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2a84:	14010075 	strne	r0, [r1], #-117	; 0x75
    2a88:	0000002c 	andeq	r0, r0, ip, lsr #32
    2a8c:	cc0a5001 	stcgt	0, cr5, [sl], {1}
    2a90:	9e000094 	mcrls	0, 0, r0, cr0, cr4, {4}
    2a94:	00000000 	andeq	r0, r0, r0
    2a98:	00094d04 	andeq	r4, r9, r4, lsl #26
    2a9c:	d0190100 	andsle	r0, r9, r0, lsl #2
    2aa0:	24000094 	strcs	r0, [r0], #-148	; 0x94
    2aa4:	01000000 	mrseq	r0, (UNDEF: 0)
    2aa8:	0001579c 	muleq	r1, ip, r7
    2aac:	73750b00 	cmnvc	r5, #0, 22
    2ab0:	2c190100 	ldfcss	f0, [r9], {-0}
    2ab4:	75000000 	strvc	r0, [r0, #-0]
    2ab8:	09000012 	stmdbeq	r0, {r1, r4}
    2abc:	01006272 	tsteq	r0, r2, ror r2
    2ac0:	00002c1a 	andeq	r2, r0, sl, lsl ip
    2ac4:	0c540100 	ldfeqe	f0, [r4], {-0}
    2ac8:	000094e0 	andeq	r9, r0, r0, ror #9
    2acc:	00000010 	andeq	r0, r0, r0, lsl r0
    2ad0:	0000014d 	andeq	r0, r0, sp, asr #2
    2ad4:	0061720d 	rsbeq	r7, r1, sp, lsl #4
    2ad8:	002c1c01 	eoreq	r1, ip, r1, lsl #24
    2adc:	12930000 	addsne	r0, r3, #0
    2ae0:	e40a0000 	str	r0, [sl], #-0
    2ae4:	cb000094 	blgt	2d3c <_start-0x52c4>
    2ae8:	00000000 	andeq	r0, r0, r0
    2aec:	0094dc0a 	addseq	sp, r4, sl, lsl #24
    2af0:	0000cb00 	andeq	ip, r0, r0, lsl #22
    2af4:	8e040000 	cdphi	0, 0, cr0, cr4, cr0, {0}
    2af8:	01000007 	tsteq	r0, r7
    2afc:	0094f422 	addseq	pc, r4, r2, lsr #8
    2b00:	00001400 	andeq	r1, r0, r0, lsl #8
    2b04:	909c0100 	addsls	r0, ip, r0, lsl #2
    2b08:	0b000001 	bleq	2b14 <_start-0x54ec>
    2b0c:	0100736d 	tsteq	r0, sp, ror #6
    2b10:	00002c22 	andeq	r2, r0, r2, lsr #24
    2b14:	0012a600 	andseq	sl, r2, r0, lsl #12
    2b18:	95040700 	strls	r0, [r4, #-1792]	; 0x700
    2b1c:	00f90000 	rscseq	r0, r9, r0
    2b20:	01080000 	mrseq	r0, (UNDEF: 8)
    2b24:	01f30750 	mvnseq	r0, r0, asr r7
    2b28:	03e80a50 	mvneq	r0, #80, 20	; 0x50000
    2b2c:	0400001e 	streq	r0, [r0], #-30
    2b30:	0000091d 	andeq	r0, r0, sp, lsl r9
    2b34:	95082501 	strls	r2, [r8, #-1281]	; 0x501
    2b38:	00140000 	andseq	r0, r4, r0
    2b3c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b40:	000001ca 	andeq	r0, r0, sl, asr #3
    2b44:	6365730b 	cmnvs	r5, #738197504	; 0x2c000000
    2b48:	2c250100 	stfcss	f0, [r5], #-0
    2b4c:	c7000000 	strgt	r0, [r0, -r0]
    2b50:	07000012 	smladeq	r0, r2, r0, r0
    2b54:	00009518 	andeq	r9, r0, r8, lsl r5
    2b58:	00000157 	andeq	r0, r0, r7, asr r1
    2b5c:	07500108 	ldrbeq	r0, [r0, -r8, lsl #2]
    2b60:	0a5001f3 	beq	1403334 <__bss_end__+0x13f7c14>
    2b64:	001e03e8 	andseq	r0, lr, r8, ror #7
    2b68:	042d0e00 	strteq	r0, [sp], #-3584	; 0xe00
    2b6c:	a8020000 	stmdage	r2, {}	; <UNPREDICTABLE>
    2b70:	0000002c 	andeq	r0, r0, ip, lsr #32
    2b74:	00002c0f 	andeq	r2, r0, pc, lsl #24
    2b78:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
    2b7c:	04000003 	streq	r0, [r0], #-3
    2b80:	00101500 	andseq	r1, r0, r0, lsl #10
    2b84:	64010400 	strvs	r0, [r1], #-1024	; 0x400
    2b88:	01000000 	mrseq	r0, (UNDEF: 0)
    2b8c:	00000980 	andeq	r0, r0, r0, lsl #19
    2b90:	00000638 	andeq	r0, r0, r8, lsr r6
    2b94:	0000951c 	andeq	r9, r0, ip, lsl r5
    2b98:	000001e8 	andeq	r0, r0, r8, ror #3
    2b9c:	00000e7e 	andeq	r0, r0, lr, ror lr
    2ba0:	69050402 	stmdbvs	r5, {r1, sl}
    2ba4:	0300746e 	movweq	r7, #1134	; 0x46e
    2ba8:	00000595 	muleq	r0, r5, r5
    2bac:	0037d403 	eorseq	sp, r7, r3, lsl #8
    2bb0:	04040000 	streq	r0, [r4], #-0
    2bb4:	00023207 	andeq	r3, r2, r7, lsl #4
    2bb8:	06010400 	streq	r0, [r1], -r0, lsl #8
    2bbc:	0000010d 	andeq	r0, r0, sp, lsl #2
    2bc0:	ae050204 	cdpge	2, 0, cr0, cr5, cr4, {0}
    2bc4:	04000002 	streq	r0, [r0], #-2
    2bc8:	027e0504 	rsbseq	r0, lr, #4, 10	; 0x1000000
    2bcc:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    2bd0:	00027905 	andeq	r7, r2, r5, lsl #18
    2bd4:	08010400 	stmdaeq	r1, {sl}
    2bd8:	0000010b 	andeq	r0, r0, fp, lsl #2
    2bdc:	5e070204 	cdppl	2, 0, cr0, cr7, cr4, {0}
    2be0:	04000001 	streq	r0, [r0], #-1
    2be4:	022d0704 	eoreq	r0, sp, #4, 14	; 0x100000
    2be8:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    2bec:	00022807 	andeq	r2, r2, r7, lsl #16
    2bf0:	07040400 	streq	r0, [r4, -r0, lsl #8]
    2bf4:	0000025e 	andeq	r0, r0, lr, asr r2
    2bf8:	04060405 	streq	r0, [r6], #-1029	; 0x405
    2bfc:	00000085 	andeq	r0, r0, r5, lsl #1
    2c00:	14080104 	strne	r0, [r8], #-260	; 0x104
    2c04:	06000001 	streq	r0, [r0], -r1
    2c08:	00009204 	andeq	r9, r0, r4, lsl #4
    2c0c:	00850700 	addeq	r0, r5, r0, lsl #14
    2c10:	85080000 	strhi	r0, [r8, #-0]
    2c14:	a7000000 	strge	r0, [r0, -r0]
    2c18:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2c1c:	00000076 	andeq	r0, r0, r6, ror r0
    2c20:	bb0a0007 	bllt	282c44 <__bss_end__+0x277524>
    2c24:	01000000 	mrseq	r0, (UNDEF: 0)
    2c28:	00007d19 	andeq	r7, r0, r9, lsl sp
    2c2c:	00951c00 	addseq	r1, r5, r0, lsl #24
    2c30:	00007400 	andeq	r7, r0, r0, lsl #8
    2c34:	569c0100 	ldrpl	r0, [ip], r0, lsl #2
    2c38:	0b000001 	bleq	2c44 <_start-0x53bc>
    2c3c:	000009b8 			; <UNDEFINED> instruction: 0x000009b8
    2c40:	00371901 	eorseq	r1, r7, r1, lsl #18
    2c44:	12e80000 	rscne	r0, r8, #0
    2c48:	f80c0000 			; <UNDEFINED> instruction: 0xf80c0000
    2c4c:	56000001 	strpl	r0, [r0], -r1
    2c50:	05000001 	streq	r0, [r0, #-1]
    2c54:	00add003 	adceq	sp, sp, r3
    2c58:	09e70d00 	stmibeq	r7!, {r8, sl, fp}^
    2c5c:	1c010000 	stcne	0, cr0, [r1], {-0}
    2c60:	0000007d 	andeq	r0, r0, sp, ror r0
    2c64:	b00e5501 	andlt	r5, lr, r1, lsl #10
    2c68:	01000009 	tsteq	r0, r9
    2c6c:	0000371d 	andeq	r3, r0, sp, lsl r7
    2c70:	00132200 	andseq	r2, r3, r0, lsl #4
    2c74:	95340f00 	ldrls	r0, [r4, #-3840]!	; 0xf00
    2c78:	03b20000 			; <UNDEFINED> instruction: 0x03b20000
    2c7c:	48100000 	ldmdami	r0, {}	; <UNPREDICTABLE>
    2c80:	b9000095 	stmdblt	r0, {r0, r2, r4, r7}
    2c84:	31000003 	tstcc	r0, r3
    2c88:	11000001 	tstne	r0, r1
    2c8c:	4a015301 	bmi	57898 <__bss_end__+0x4c178>
    2c90:	05520111 	ldrbeq	r0, [r2, #-273]	; 0x111
    2c94:	00add003 	adceq	sp, sp, r3
    2c98:	51011100 	mrspl	r1, (UNDEF: 17)
    2c9c:	ae500305 	cdpge	3, 5, cr0, cr0, cr5, {0}
    2ca0:	01110000 	tsteq	r1, r0
    2ca4:	10030550 	andne	r0, r3, r0, asr r5
    2ca8:	000000ae 	andeq	r0, r0, lr, lsr #1
    2cac:	00954c0f 	addseq	r4, r5, pc, lsl #24
    2cb0:	0003cf00 	andeq	ip, r3, r0, lsl #30
    2cb4:	956c1200 	strbls	r1, [ip, #-512]!	; 0x200
    2cb8:	03d60000 	bicseq	r0, r6, #0
    2cbc:	01110000 	tsteq	r1, r0
    2cc0:	00760252 	rsbseq	r0, r6, r2, asr r2
    2cc4:	01510111 	cmpeq	r1, r1, lsl r1
    2cc8:	50011130 	andpl	r1, r1, r0, lsr r1
    2ccc:	00007502 	andeq	r7, r0, r2, lsl #10
    2cd0:	00970700 	addseq	r0, r7, r0, lsl #14
    2cd4:	8d0a0000 	stchi	0, cr0, [sl, #-0]
    2cd8:	01000003 	tsteq	r0, r3
    2cdc:	00007d27 	andeq	r7, r0, r7, lsr #26
    2ce0:	00959000 	addseq	r9, r5, r0
    2ce4:	00009c00 	andeq	r9, r0, r0, lsl #24
    2ce8:	459c0100 	ldrmi	r0, [ip, #256]	; 0x100
    2cec:	0b000002 	bleq	2cfc <_start-0x5304>
    2cf0:	000009b8 			; <UNDEFINED> instruction: 0x000009b8
    2cf4:	00372701 	eorseq	r2, r7, r1, lsl #14
    2cf8:	13480000 	movtne	r0, #32768	; 0x8000
    2cfc:	a60b0000 	strge	r0, [fp], -r0
    2d00:	01000009 	tsteq	r0, r9
    2d04:	00003727 	andeq	r3, r0, r7, lsr #14
    2d08:	0013b400 	andseq	fp, r3, r0, lsl #8
    2d0c:	01f80c00 	mvnseq	r0, r0, lsl #24
    2d10:	02550000 	subseq	r0, r5, #0
    2d14:	03050000 	movweq	r0, #20480	; 0x5000
    2d18:	0000add8 	ldrdeq	sl, [r0], -r8
    2d1c:	00096f0e 	andeq	r6, r9, lr, lsl #30
    2d20:	372d0100 	strcc	r0, [sp, -r0, lsl #2]!
    2d24:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    2d28:	0f000014 	svceq	0x00000014
    2d2c:	000095a8 	andeq	r9, r0, r8, lsr #11
    2d30:	000003b2 			; <UNDEFINED> instruction: 0x000003b2
    2d34:	0095bc10 	addseq	fp, r5, r0, lsl ip
    2d38:	0003b900 	andeq	fp, r3, r0, lsl #18
    2d3c:	0001e800 	andeq	lr, r1, r0, lsl #16
    2d40:	53011100 	movwpl	r1, #4352	; 0x1100
    2d44:	11280802 	teqne	r8, r2, lsl #16
    2d48:	03055201 	movweq	r5, #20993	; 0x5201
    2d4c:	0000add8 	ldrdeq	sl, [r0], -r8
    2d50:	05510111 	ldrbeq	r0, [r1, #-273]	; 0x111
    2d54:	00ae5003 	adceq	r5, lr, r3
    2d58:	50011100 	andpl	r1, r1, r0, lsl #2
    2d5c:	ae100305 	cdpge	3, 1, cr0, cr0, cr5, {0}
    2d60:	0f000000 	svceq	0x00000000
    2d64:	000095c0 	andeq	r9, r0, r0, asr #11
    2d68:	000003cf 	andeq	r0, r0, pc, asr #7
    2d6c:	0095cc0f 	addseq	ip, r5, pc, lsl #24
    2d70:	0000a700 	andeq	sl, r0, r0, lsl #14
    2d74:	95dc0f00 	ldrbls	r0, [ip, #3840]	; 0xf00
    2d78:	03b20000 			; <UNDEFINED> instruction: 0x03b20000
    2d7c:	f0100000 			; <UNDEFINED> instruction: 0xf0100000
    2d80:	b9000095 	stmdblt	r0, {r0, r2, r4, r7}
    2d84:	32000003 	andcc	r0, r0, #3
    2d88:	11000002 	tstne	r0, r2
    2d8c:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    2d90:	5201112c 	andpl	r1, r1, #44, 2
    2d94:	add80305 	ldclge	3, cr0, [r8, #20]
    2d98:	01110000 	tsteq	r1, r0
    2d9c:	50030551 	andpl	r0, r3, r1, asr r5
    2da0:	110000ae 	smlatbne	r0, lr, r0, r0
    2da4:	03055001 	movweq	r5, #20481	; 0x5001
    2da8:	0000ae64 	andeq	sl, r0, r4, ror #28
    2dac:	95f40f00 	ldrbls	r0, [r4, #3840]!	; 0xf00
    2db0:	03cf0000 	biceq	r0, pc, #0
    2db4:	140f0000 	strne	r0, [pc], #-0	; 2dbc <_start-0x5244>
    2db8:	a7000096 			; <UNDEFINED> instruction: 0xa7000096
    2dbc:	00000000 	andeq	r0, r0, r0
    2dc0:	00008508 	andeq	r8, r0, r8, lsl #10
    2dc4:	00025500 	andeq	r5, r2, r0, lsl #10
    2dc8:	00760900 	rsbseq	r0, r6, r0, lsl #18
    2dcc:	000f0000 	andeq	r0, pc, r0
    2dd0:	00024507 	andeq	r4, r2, r7, lsl #10
    2dd4:	02d61300 	sbcseq	r1, r6, #0, 6
    2dd8:	3c010000 	stccc	0, cr0, [r1], {-0}
    2ddc:	0000962c 	andeq	r9, r0, ip, lsr #12
    2de0:	0000005c 	andeq	r0, r0, ip, asr r0
    2de4:	02c09c01 	sbceq	r9, r0, #256	; 0x100
    2de8:	f80c0000 			; <UNDEFINED> instruction: 0xf80c0000
    2dec:	d0000001 	andle	r0, r0, r1
    2df0:	05000002 	streq	r0, [r0, #-2]
    2df4:	00ade803 	adceq	lr, sp, r3, lsl #16
    2df8:	96440f00 	strbls	r0, [r4], -r0, lsl #30
    2dfc:	03b20000 			; <UNDEFINED> instruction: 0x03b20000
    2e00:	58100000 	ldmdapl	r0, {}	; <UNPREDICTABLE>
    2e04:	b9000096 	stmdblt	r0, {r1, r2, r4, r7}
    2e08:	b6000003 	strlt	r0, [r0], -r3
    2e0c:	11000002 	tstne	r0, r2
    2e10:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    2e14:	5201113d 	andpl	r1, r1, #1073741839	; 0x4000000f
    2e18:	ade80305 	stclge	3, cr0, [r8, #20]!
    2e1c:	01110000 	tsteq	r1, r0
    2e20:	50030551 	andpl	r0, r3, r1, asr r5
    2e24:	110000ae 	smlatbne	r0, lr, r0, r0
    2e28:	03055001 	movweq	r5, #20481	; 0x5001
    2e2c:	0000aebc 			; <UNDEFINED> instruction: 0x0000aebc
    2e30:	965c0f00 	ldrbls	r0, [ip], -r0, lsl #30
    2e34:	03cf0000 	biceq	r0, pc, #0
    2e38:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2e3c:	00000085 	andeq	r0, r0, r5, lsl #1
    2e40:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2e44:	00007609 	andeq	r7, r0, r9, lsl #12
    2e48:	07000c00 	streq	r0, [r0, -r0, lsl #24]
    2e4c:	000002c0 	andeq	r0, r0, r0, asr #5
    2e50:	00096514 	andeq	r6, r9, r4, lsl r5
    2e54:	88460100 	stmdahi	r6, {r8}^
    2e58:	18000096 	stmdane	r0, {r1, r2, r4, r7}
    2e5c:	01000000 	mrseq	r0, (UNDEF: 0)
    2e60:	09bf159c 	ldmibeq	pc!, {r2, r3, r4, r7, r8, sl, ip}	; <UNPREDICTABLE>
    2e64:	4f010000 	svcmi	0x00010000
    2e68:	0000007d 	andeq	r0, r0, sp, ror r0
    2e6c:	000096a0 	andeq	r9, r0, r0, lsr #13
    2e70:	00000010 	andeq	r0, r0, r0, lsl r0
    2e74:	d0139c01 	andsle	r9, r3, r1, lsl #24
    2e78:	01000009 	tsteq	r0, r9
    2e7c:	0096b053 	addseq	fp, r6, r3, asr r0
    2e80:	00005400 	andeq	r5, r0, r0, lsl #8
    2e84:	709c0100 	addsvc	r0, ip, r0, lsl #2
    2e88:	0b000003 	bleq	2e9c <_start-0x5164>
    2e8c:	00000991 	muleq	r0, r1, r9
    2e90:	00375301 	eorseq	r5, r7, r1, lsl #6
    2e94:	145b0000 	ldrbne	r0, [fp], #-0
    2e98:	f80c0000 			; <UNDEFINED> instruction: 0xf80c0000
    2e9c:	80000001 	andhi	r0, r0, r1
    2ea0:	05000003 	streq	r0, [r0, #-3]
    2ea4:	00adf803 	adceq	pc, sp, r3, lsl #16
    2ea8:	96c80f00 	strbls	r0, [r8], r0, lsl #30
    2eac:	03b20000 			; <UNDEFINED> instruction: 0x03b20000
    2eb0:	dc100000 	ldcle	0, cr0, [r0], {-0}
    2eb4:	b9000096 	stmdblt	r0, {r1, r2, r4, r7}
    2eb8:	66000003 	strvs	r0, [r0], -r3
    2ebc:	11000003 	tstne	r0, r3
    2ec0:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    2ec4:	52011154 	andpl	r1, r1, #84, 2
    2ec8:	adf80305 	ldclge	3, cr0, [r8, #20]!
    2ecc:	01110000 	tsteq	r1, r0
    2ed0:	50030551 	andpl	r0, r3, r1, asr r5
    2ed4:	110000ae 	smlatbne	r0, lr, r0, r0
    2ed8:	03055001 	movweq	r5, #20481	; 0x5001
    2edc:	0000aebc 			; <UNDEFINED> instruction: 0x0000aebc
    2ee0:	96e00f00 	strbtls	r0, [r0], r0, lsl #30
    2ee4:	03cf0000 	biceq	r0, pc, #0
    2ee8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2eec:	00000085 	andeq	r0, r0, r5, lsl #1
    2ef0:	00000380 	andeq	r0, r0, r0, lsl #7
    2ef4:	00007609 	andeq	r7, r0, r9, lsl #12
    2ef8:	07001600 	streq	r1, [r0, -r0, lsl #12]
    2efc:	00000370 	andeq	r0, r0, r0, ror r3
    2f00:	00099f0d 	andeq	r9, r9, sp, lsl #30
    2f04:	25080100 	strcs	r0, [r8, #-256]	; 0x100
    2f08:	05000000 	streq	r0, [r0, #-0]
    2f0c:	00b71003 	adcseq	r1, r7, r3
    2f10:	09c70d00 	stmibeq	r7, {r8, sl, fp}^
    2f14:	0b010000 	bleq	42f1c <__bss_end__+0x377fc>
    2f18:	0000007f 	andeq	r0, r0, pc, ror r0
    2f1c:	b7140305 	ldrlt	r0, [r4, -r5, lsl #6]
    2f20:	f3160000 	vhadd.u16	d0, d6, d0
    2f24:	01000009 	tsteq	r0, r9
    2f28:	00008505 	andeq	r8, r0, r5, lsl #10
    2f2c:	02f21700 	rscseq	r1, r2, #0, 14
    2f30:	1e020000 	cdpne	0, 0, cr0, cr2, cr0, {0}
    2f34:	00069c18 	andeq	r9, r6, r8, lsl ip
    2f38:	25290200 	strcs	r0, [r9, #-512]!	; 0x200
    2f3c:	cf000000 	svcgt	0x00000000
    2f40:	19000003 	stmdbne	r0, {r0, r1}
    2f44:	0000008c 	andeq	r0, r0, ip, lsl #1
    2f48:	3417001a 	ldrcc	r0, [r7], #-26
    2f4c:	02000001 	andeq	r0, r0, #1
    2f50:	05bc1b66 	ldreq	r1, [ip, #2918]!	; 0xb66
    2f54:	1b040000 	blne	102f5c <__bss_end__+0xf783c>
    2f58:	0000007d 	andeq	r0, r0, sp, ror r0
    2f5c:	00007d19 	andeq	r7, r0, r9, lsl sp
    2f60:	00251900 	eoreq	r1, r5, r0, lsl #18
    2f64:	2c190000 	ldccs	0, cr0, [r9], {-0}
    2f68:	00000000 	andeq	r0, r0, r0
    2f6c:	0011ca00 	andseq	ip, r1, r0, lsl #20
    2f70:	9c000400 	cfstrsls	mvf0, [r0], {-0}
    2f74:	04000011 	streq	r0, [r0], #-17
    2f78:	00006401 	andeq	r6, r0, r1, lsl #8
    2f7c:	0aa10100 	beq	fe843384 <__bss_end__+0xfe837c64>
    2f80:	06380000 	ldrteq	r0, [r8], -r0
    2f84:	97040000 	strls	r0, [r4, -r0]
    2f88:	06200000 	strteq	r0, [r0], -r0
    2f8c:	0ff80000 	svceq	0x00f80000
    2f90:	04020000 	streq	r0, [r2], #-0
    2f94:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    2f98:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2f9c:	00000232 	andeq	r0, r0, r2, lsr r2
    2fa0:	0d060103 	stfeqs	f0, [r6, #-12]
    2fa4:	03000001 	movweq	r0, #1
    2fa8:	02ae0502 	adceq	r0, lr, #8388608	; 0x800000
    2fac:	04030000 	streq	r0, [r3], #-0
    2fb0:	00027e05 	andeq	r7, r2, r5, lsl #28
    2fb4:	05080300 	streq	r0, [r8, #-768]	; 0x300
    2fb8:	00000279 	andeq	r0, r0, r9, ror r2
    2fbc:	00084204 	andeq	r4, r8, r4, lsl #4
    2fc0:	5a2e0300 	bpl	b83bc8 <__bss_end__+0xb784a8>
    2fc4:	03000000 	movweq	r0, #0
    2fc8:	010b0801 	tsteq	fp, r1, lsl #16
    2fcc:	02030000 	andeq	r0, r3, #0
    2fd0:	00015e07 	andeq	r5, r1, r7, lsl #28
    2fd4:	02cd0400 	sbceq	r0, sp, #0, 8
    2fd8:	34030000 	strcc	r0, [r3], #-0
    2fdc:	00000073 	andeq	r0, r0, r3, ror r0
    2fe0:	2d070403 	cfstrscs	mvf0, [r7, #-12]
    2fe4:	03000002 	movweq	r0, #2
    2fe8:	02280708 	eoreq	r0, r8, #8, 14	; 0x200000
    2fec:	04030000 	streq	r0, [r3], #-0
    2ff0:	00025e07 	andeq	r5, r2, r7, lsl #28
    2ff4:	06040500 	streq	r0, [r4], -r0, lsl #10
    2ff8:	00009004 	andeq	r9, r0, r4
    2ffc:	08010300 	stmdaeq	r1, {r8, r9}
    3000:	00000114 	andeq	r0, r0, r4, lsl r1
    3004:	009d0406 	addseq	r0, sp, r6, lsl #8
    3008:	90070000 	andls	r0, r7, r0
    300c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3010:	d90e040c 	stmdble	lr, {r2, r3, sl}
    3014:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    3018:	04007874 	streq	r7, [r0], #-2164	; 0x874
    301c:	00004f0f 	andeq	r4, r0, pc, lsl #30
    3020:	72090000 	andvc	r0, r9, #0
    3024:	0f040078 	svceq	0x00040078
    3028:	0000004f 	andeq	r0, r0, pc, asr #32
    302c:	08100a01 	ldmdaeq	r0, {r0, r9, fp}
    3030:	10040000 	andne	r0, r4, r0
    3034:	00000068 	andeq	r0, r0, r8, rrx
    3038:	07c10a04 	strbeq	r0, [r1, r4, lsl #20]
    303c:	11040000 	mrsne	r0, (UNDEF: 4)
    3040:	00000068 	andeq	r0, r0, r8, rrx
    3044:	f9040008 			; <UNDEFINED> instruction: 0xf9040008
    3048:	04000007 	streq	r0, [r0], #-7
    304c:	0000a212 	andeq	sl, r0, r2, lsl r2
    3050:	067c0400 	ldrbteq	r0, [ip], -r0, lsl #8
    3054:	28050000 	stmdacs	r5, {}	; <UNPREDICTABLE>
    3058:	000000ef 	andeq	r0, r0, pc, ror #1
    305c:	0006a30b 	andeq	sl, r6, fp, lsl #6
    3060:	00090400 	andeq	r0, r9, r0, lsl #8
    3064:	00000106 	andeq	r0, r0, r6, lsl #2
    3068:	0006b20c 	andeq	fp, r6, ip, lsl #4
    306c:	00008800 	andeq	r8, r0, r0, lsl #16
    3070:	04000000 	streq	r0, [r0], #-0
    3074:	000006a5 	andeq	r0, r0, r5, lsr #13
    3078:	00e46205 	rsceq	r6, r4, r5, lsl #4
    307c:	5b0d0000 	blpl	343084 <__bss_end__+0x337964>
    3080:	0200000a 	andeq	r0, r0, #10
    3084:	013f0309 	teqeq	pc, r9, lsl #6
    3088:	040e0000 	streq	r0, [lr], #-0
    308c:	02000005 	andeq	r0, r0, #5
    3090:	00002c09 	andeq	r2, r0, r9, lsl #24
    3094:	006e0f00 	rsbeq	r0, lr, r0, lsl #30
    3098:	002c0902 	eoreq	r0, ip, r2, lsl #18
    309c:	11100000 	tstne	r0, r0
    30a0:	00000acf 	andeq	r0, r0, pc, asr #21
    30a4:	002c0c02 	eoreq	r0, ip, r2, lsl #24
    30a8:	00000000 	andeq	r0, r0, r0
    30ac:	000a0e0d 	andeq	r0, sl, sp, lsl #28
    30b0:	03170200 	tsteq	r7, #0, 4
    30b4:	00000176 	andeq	r0, r0, r6, ror r1
    30b8:	6e69700f 	cdpvs	0, 6, cr7, cr9, cr15, {0}
    30bc:	2c170200 	lfmcs	f0, 4, [r7], {-0}
    30c0:	0f000000 	svceq	0x00000000
    30c4:	17020076 	smlsdxne	r2, r6, r0, r0
    30c8:	0000002c 	andeq	r0, r0, ip, lsr #32
    30cc:	0005040e 	andeq	r0, r5, lr, lsl #8
    30d0:	2c170200 	lfmcs	f0, 4, [r7], {-0}
    30d4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    30d8:	00000a61 	andeq	r0, r0, r1, ror #20
    30dc:	002c1702 	eoreq	r1, ip, r2, lsl #14
    30e0:	12000000 	andne	r0, r0, #0
    30e4:	00000835 	andeq	r0, r0, r5, lsr r8
    30e8:	97040901 	strls	r0, [r4, -r1, lsl #18]
    30ec:	01540000 	cmpeq	r4, r0
    30f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    30f4:	00000722 	andeq	r0, r0, r2, lsr #14
    30f8:	0007d713 	andeq	sp, r7, r3, lsl r7
    30fc:	22090100 	andcs	r0, r9, #0, 2
    3100:	87000007 	strhi	r0, [r0, -r7]
    3104:	14000014 	strne	r0, [r0], #-20
    3108:	09010063 	stmdbeq	r1, {r0, r1, r5, r6}
    310c:	0000005a 	andeq	r0, r0, sl, asr r0
    3110:	000014a8 	andeq	r1, r0, r8, lsr #9
    3114:	00787415 	rsbseq	r7, r8, r5, lsl r4
    3118:	00250b01 	eoreq	r0, r5, r1, lsl #22
    311c:	76060000 	strvc	r0, [r6], -r0
    3120:	1aff0800 	bne	fffc5128 <__bss_end__+0xfffb9a08>
    3124:	006e169f 	mlseq	lr, pc, r6, r1	; <UNPREDICTABLE>
    3128:	00680c01 	rsbeq	r0, r8, r1, lsl #24
    312c:	14c90000 	strbne	r0, [r9], #0
    3130:	75160000 	ldrvc	r0, [r6, #-0]
    3134:	680d0100 	stmdavs	sp, {r8}
    3138:	dc000000 	stcle	0, cr0, [r0], {-0}
    313c:	15000014 	strne	r0, [r0, #-20]
    3140:	0e010073 	mcreq	0, 0, r0, cr1, cr3, {3}
    3144:	00000068 	andeq	r0, r0, r8, rrx
    3148:	14175401 	ldrne	r5, [r7], #-1025	; 0x401
    314c:	04000097 	streq	r0, [r0], #-151	; 0x97
    3150:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    3154:	18000001 	stmdane	r0, {r0}
    3158:	00000acf 	andeq	r0, r0, pc, asr #21
    315c:	002c0e01 	eoreq	r0, ip, r1, lsl #28
    3160:	54010000 	strpl	r0, [r1], #-0
    3164:	013f1900 	teqeq	pc, r0, lsl #18
    3168:	97180000 	ldrls	r0, [r8, -r0]
    316c:	001c0000 	andseq	r0, ip, r0
    3170:	11010000 	mrsne	r0, (UNDEF: 1)
    3174:	00000275 	andeq	r0, r0, r5, ror r2
    3178:	00016a1a 	andeq	r6, r1, sl, lsl sl
    317c:	00150500 	andseq	r0, r5, r0, lsl #10
    3180:	015f1b00 	cmpeq	pc, r0, lsl #22
    3184:	54010000 	strpl	r0, [r1], #-0
    3188:	0001561c 	andeq	r5, r1, ip, lsl r6
    318c:	4b1b0000 	blmi	6c3194 <__bss_end__+0x6b7a74>
    3190:	01000001 	tsteq	r0, r1
    3194:	01111956 	tsteq	r1, r6, asr r9
    3198:	97240000 	strls	r0, [r4, -r0]!
    319c:	00100000 	andseq	r0, r0, r0
    31a0:	1a020000 	bne	831a8 <__bss_end__+0x77a88>
    31a4:	0000025f 	andeq	r0, r0, pc, asr r2
    31a8:	0001281a 	andeq	r2, r1, sl, lsl r8
    31ac:	00151800 	andseq	r1, r5, r0, lsl #16
    31b0:	011d1b00 	tsteq	sp, r0, lsl #22
    31b4:	54010000 	strpl	r0, [r1], #-0
    31b8:	0097241d 	addseq	r2, r7, sp, lsl r4
    31bc:	00000400 	andeq	r0, r0, r0, lsl #8
    31c0:	01321e00 	teqeq	r2, r0, lsl #28
    31c4:	152b0000 	strne	r0, [fp, #-0]!
    31c8:	00000000 	andeq	r0, r0, r0
    31cc:	0097241f 	addseq	r2, r7, pc, lsl r4
    31d0:	00113100 	andseq	r3, r1, r0, lsl #2
    31d4:	51012000 	mrspl	r2, (UNDEF: 1)
    31d8:	01203001 	teqeq	r0, r1
    31dc:	00760250 	rsbseq	r0, r6, r0, asr r2
    31e0:	3f190000 	svccc	0x00190000
    31e4:	38000001 	stmdacc	r0, {r0}
    31e8:	1c000097 	stcne	0, cr0, [r0], {151}	; 0x97
    31ec:	01000000 	mrseq	r0, (UNDEF: 0)
    31f0:	0002f813 	andeq	pc, r2, r3, lsl r8	; <UNPREDICTABLE>
    31f4:	016a1a00 	cmneq	sl, r0, lsl #20
    31f8:	153e0000 	ldrne	r0, [lr, #-0]!
    31fc:	5f1b0000 	svcpl	0x001b0000
    3200:	01000001 	tsteq	r0, r1
    3204:	01561a54 	cmpeq	r6, r4, asr sl
    3208:	15600000 	strbne	r0, [r0, #-0]!
    320c:	4b1b0000 	blmi	6c3214 <__bss_end__+0x6b7af4>
    3210:	01000001 	tsteq	r0, r1
    3214:	01111956 	tsteq	r1, r6, asr r9
    3218:	97440000 	strbls	r0, [r4, -r0]
    321c:	00100000 	andseq	r0, r0, r0
    3220:	1a020000 	bne	83228 <__bss_end__+0x77b08>
    3224:	000002df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    3228:	0001281a 	andeq	r2, r1, sl, lsl r8
    322c:	00159100 	andseq	r9, r5, r0, lsl #2
    3230:	011d1b00 	tsteq	sp, r0, lsl #22
    3234:	54010000 	strpl	r0, [r1], #-0
    3238:	0097441d 	addseq	r4, r7, sp, lsl r4
    323c:	00000400 	andeq	r0, r0, r0, lsl #8
    3240:	01321e00 	teqeq	r2, r0, lsl #28
    3244:	15b30000 	ldrne	r0, [r3, #0]!
    3248:	00000000 	andeq	r0, r0, r0
    324c:	0097441f 	addseq	r4, r7, pc, lsl r4
    3250:	00113100 	andseq	r3, r1, r0, lsl #2
    3254:	51012000 	mrspl	r2, (UNDEF: 1)
    3258:	31007704 	tstcc	r0, r4, lsl #14
    325c:	5001201a 	andpl	r2, r1, sl, lsl r0
    3260:	00007602 	andeq	r7, r0, r2, lsl #12
    3264:	013f1900 	teqeq	pc, r0, lsl #18
    3268:	97580000 	ldrbls	r0, [r8, -r0]
    326c:	001c0000 	andseq	r0, ip, r0
    3270:	15010000 	strne	r0, [r1, #-0]
    3274:	00000380 	andeq	r0, r0, r0, lsl #7
    3278:	00016a1a 	andeq	r6, r1, sl, lsl sl
    327c:	0015c600 	andseq	ip, r5, r0, lsl #12
    3280:	015f1b00 	cmpeq	pc, r0, lsl #22
    3284:	54010000 	strpl	r0, [r1], #-0
    3288:	0001561b 	andeq	r5, r1, fp, lsl r6
    328c:	00770800 	rsbseq	r0, r7, r0, lsl #16
    3290:	ff081a32 			; <UNDEFINED> instruction: 0xff081a32
    3294:	4b1b9f1a 	blmi	6eaf04 <__bss_end__+0x6df7e4>
    3298:	01000001 	tsteq	r0, r1
    329c:	01111956 	tsteq	r1, r6, asr r9
    32a0:	97640000 	strbls	r0, [r4, -r0]!
    32a4:	00100000 	andseq	r0, r0, r0
    32a8:	1a020000 	bne	832b0 <__bss_end__+0x77b90>
    32ac:	00000367 	andeq	r0, r0, r7, ror #6
    32b0:	0001281a 	andeq	r2, r1, sl, lsl r8
    32b4:	0015eb00 	andseq	lr, r5, r0, lsl #22
    32b8:	011d1b00 	tsteq	sp, r0, lsl #22
    32bc:	54010000 	strpl	r0, [r1], #-0
    32c0:	0097641d 	addseq	r6, r7, sp, lsl r4
    32c4:	00000400 	andeq	r0, r0, r0, lsl #8
    32c8:	01321e00 	teqeq	r2, r0, lsl #28
    32cc:	16100000 	ldrne	r0, [r0], -r0
    32d0:	00000000 	andeq	r0, r0, r0
    32d4:	0097641f 	addseq	r6, r7, pc, lsl r4
    32d8:	00113100 	andseq	r3, r1, r0, lsl #2
    32dc:	51012000 	mrspl	r2, (UNDEF: 1)
    32e0:	32007704 	andcc	r7, r0, #4, 14	; 0x100000
    32e4:	5001201a 	andpl	r2, r1, sl, lsl r0
    32e8:	00007602 	andeq	r7, r0, r2, lsl #12
    32ec:	013f1900 	teqeq	pc, r0, lsl #18
    32f0:	97780000 	ldrbls	r0, [r8, -r0]!
    32f4:	001c0000 	andseq	r0, ip, r0
    32f8:	17010000 	strne	r0, [r1, -r0]
    32fc:	00000408 	andeq	r0, r0, r8, lsl #8
    3300:	00016a1a 	andeq	r6, r1, sl, lsl sl
    3304:	00162300 	andseq	r2, r6, r0, lsl #6
    3308:	015f1b00 	cmpeq	pc, r0, lsl #22
    330c:	54010000 	strpl	r0, [r1], #-0
    3310:	0001561b 	andeq	r5, r1, fp, lsl r6
    3314:	00770800 	rsbseq	r0, r7, r0, lsl #16
    3318:	ff081a34 			; <UNDEFINED> instruction: 0xff081a34
    331c:	4b1b9f1a 	blmi	6eaf8c <__bss_end__+0x6df86c>
    3320:	01000001 	tsteq	r0, r1
    3324:	01111956 	tsteq	r1, r6, asr r9
    3328:	97840000 	strls	r0, [r4, r0]
    332c:	00100000 	andseq	r0, r0, r0
    3330:	1a020000 	bne	83338 <__bss_end__+0x77c18>
    3334:	000003ef 	andeq	r0, r0, pc, ror #7
    3338:	0001281a 	andeq	r2, r1, sl, lsl r8
    333c:	00164500 	andseq	r4, r6, r0, lsl #10
    3340:	011d1b00 	tsteq	sp, r0, lsl #22
    3344:	54010000 	strpl	r0, [r1], #-0
    3348:	0097841d 	addseq	r8, r7, sp, lsl r4
    334c:	00000400 	andeq	r0, r0, r0, lsl #8
    3350:	01321e00 	teqeq	r2, r0, lsl #28
    3354:	16670000 	strbtne	r0, [r7], -r0
    3358:	00000000 	andeq	r0, r0, r0
    335c:	0097841f 	addseq	r8, r7, pc, lsl r4
    3360:	00113100 	andseq	r3, r1, r0, lsl #2
    3364:	51012000 	mrspl	r2, (UNDEF: 1)
    3368:	34007704 	strcc	r7, [r0], #-1796	; 0x704
    336c:	5001201a 	andpl	r2, r1, sl, lsl r0
    3370:	00007602 	andeq	r7, r0, r2, lsl #12
    3374:	013f1900 	teqeq	pc, r0, lsl #18
    3378:	97980000 	ldrls	r0, [r8, r0]
    337c:	001c0000 	andseq	r0, ip, r0
    3380:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    3384:	00000490 	muleq	r0, r0, r4
    3388:	00016a1a 	andeq	r6, r1, sl, lsl sl
    338c:	00167a00 	andseq	r7, r6, r0, lsl #20
    3390:	015f1b00 	cmpeq	pc, r0, lsl #22
    3394:	54010000 	strpl	r0, [r1], #-0
    3398:	0001561b 	andeq	r5, r1, fp, lsl r6
    339c:	00770800 	rsbseq	r0, r7, r0, lsl #16
    33a0:	ff081a38 			; <UNDEFINED> instruction: 0xff081a38
    33a4:	4b1b9f1a 	blmi	6eb014 <__bss_end__+0x6df8f4>
    33a8:	01000001 	tsteq	r0, r1
    33ac:	01111956 	tsteq	r1, r6, asr r9
    33b0:	97a40000 	strls	r0, [r4, r0]!
    33b4:	00100000 	andseq	r0, r0, r0
    33b8:	1a020000 	bne	833c0 <__bss_end__+0x77ca0>
    33bc:	00000477 	andeq	r0, r0, r7, ror r4
    33c0:	0001281a 	andeq	r2, r1, sl, lsl r8
    33c4:	00169f00 	andseq	r9, r6, r0, lsl #30
    33c8:	011d1b00 	tsteq	sp, r0, lsl #22
    33cc:	54010000 	strpl	r0, [r1], #-0
    33d0:	0097a41d 	addseq	sl, r7, sp, lsl r4
    33d4:	00000400 	andeq	r0, r0, r0, lsl #8
    33d8:	01321e00 	teqeq	r2, r0, lsl #28
    33dc:	16c40000 	strbne	r0, [r4], r0
    33e0:	00000000 	andeq	r0, r0, r0
    33e4:	0097a41f 	addseq	sl, r7, pc, lsl r4
    33e8:	00113100 	andseq	r3, r1, r0, lsl #2
    33ec:	51012000 	mrspl	r2, (UNDEF: 1)
    33f0:	38007704 	stmdacc	r0, {r2, r8, r9, sl, ip, sp, lr}
    33f4:	5001201a 	andpl	r2, r1, sl, lsl r0
    33f8:	00007602 	andeq	r7, r0, r2, lsl #12
    33fc:	013f1900 	teqeq	pc, r0, lsl #18
    3400:	97b80000 	ldrls	r0, [r8, r0]!
    3404:	001c0000 	andseq	r0, ip, r0
    3408:	1b010000 	blne	43410 <__bss_end__+0x37cf0>
    340c:	00000518 	andeq	r0, r0, r8, lsl r5
    3410:	00016a1a 	andeq	r6, r1, sl, lsl sl
    3414:	0016d700 	andseq	sp, r6, r0, lsl #14
    3418:	015f1b00 	cmpeq	pc, r0, lsl #22
    341c:	54010000 	strpl	r0, [r1], #-0
    3420:	0001561b 	andeq	r5, r1, fp, lsl r6
    3424:	00770800 	rsbseq	r0, r7, r0, lsl #16
    3428:	ff081a40 			; <UNDEFINED> instruction: 0xff081a40
    342c:	4b1b9f1a 	blmi	6eb09c <__bss_end__+0x6df97c>
    3430:	01000001 	tsteq	r0, r1
    3434:	01111956 	tsteq	r1, r6, asr r9
    3438:	97c40000 	strbls	r0, [r4, r0]
    343c:	00100000 	andseq	r0, r0, r0
    3440:	1a020000 	bne	83448 <__bss_end__+0x77d28>
    3444:	000004ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    3448:	0001281a 	andeq	r2, r1, sl, lsl r8
    344c:	0016fe00 	andseq	pc, r6, r0, lsl #28
    3450:	011d1b00 	tsteq	sp, r0, lsl #22
    3454:	54010000 	strpl	r0, [r1], #-0
    3458:	0097c41d 	addseq	ip, r7, sp, lsl r4
    345c:	00000400 	andeq	r0, r0, r0, lsl #8
    3460:	01321e00 	teqeq	r2, r0, lsl #28
    3464:	17250000 	strne	r0, [r5, -r0]!
    3468:	00000000 	andeq	r0, r0, r0
    346c:	0097c41f 	addseq	ip, r7, pc, lsl r4
    3470:	00113100 	andseq	r3, r1, r0, lsl #2
    3474:	51012000 	mrspl	r2, (UNDEF: 1)
    3478:	40007704 	andmi	r7, r0, r4, lsl #14
    347c:	5001201a 	andpl	r2, r1, sl, lsl r0
    3480:	00007602 	andeq	r7, r0, r2, lsl #12
    3484:	013f1900 	teqeq	pc, r0, lsl #18
    3488:	97d80000 	ldrbls	r0, [r8, r0]
    348c:	001c0000 	andseq	r0, ip, r0
    3490:	1d010000 	stcne	0, cr0, [r1, #-0]
    3494:	000005a2 	andeq	r0, r0, r2, lsr #11
    3498:	00016a1a 	andeq	r6, r1, sl, lsl sl
    349c:	00173800 	andseq	r3, r7, r0, lsl #16
    34a0:	015f1b00 	cmpeq	pc, r0, lsl #22
    34a4:	54010000 	strpl	r0, [r1], #-0
    34a8:	0001561b 	andeq	r5, r1, fp, lsl r6
    34ac:	00770900 	rsbseq	r0, r7, r0, lsl #18
    34b0:	081a2008 	ldmdaeq	sl, {r3, sp}
    34b4:	1b9f1aff 	blne	fe7ca0b8 <__bss_end__+0xfe7be998>
    34b8:	0000014b 	andeq	r0, r0, fp, asr #2
    34bc:	11195601 	tstne	r9, r1, lsl #12
    34c0:	e4000001 	str	r0, [r0], #-1
    34c4:	10000097 	mulne	r0, r7, r0
    34c8:	02000000 	andeq	r0, r0, #0
    34cc:	0005881a 	andeq	r8, r5, sl, lsl r8
    34d0:	01281a00 	teqeq	r8, r0, lsl #20
    34d4:	17620000 	strbne	r0, [r2, -r0]!
    34d8:	1d1b0000 	ldcne	0, cr0, [fp, #-0]
    34dc:	01000001 	tsteq	r0, r1
    34e0:	97e41d54 	ubfxls	r1, r4, #26, #5
    34e4:	00040000 	andeq	r0, r4, r0
    34e8:	321e0000 	andscc	r0, lr, #0
    34ec:	8c000001 	stchi	0, cr0, [r0], {1}
    34f0:	00000017 	andeq	r0, r0, r7, lsl r0
    34f4:	97e41f00 	strbls	r1, [r4, r0, lsl #30]!
    34f8:	11310000 	teqne	r1, r0
    34fc:	01200000 	teqeq	r0, r0
    3500:	00770551 	rsbseq	r0, r7, r1, asr r5
    3504:	201a2008 	andscs	r2, sl, r8
    3508:	76025001 	strvc	r5, [r2], -r1
    350c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    3510:	0000013f 	andeq	r0, r0, pc, lsr r1
    3514:	000097f8 	strdeq	r9, [r0], -r8
    3518:	0000001c 	andeq	r0, r0, ip, lsl r0
    351c:	062c1f01 	strteq	r1, [ip], -r1, lsl #30
    3520:	6a1a0000 	bvs	683528 <__bss_end__+0x677e08>
    3524:	9f000001 	svcls	0x00000001
    3528:	1b000017 	blne	358c <_start-0x4a74>
    352c:	0000015f 	andeq	r0, r0, pc, asr r1
    3530:	561b5401 	ldrpl	r5, [fp], -r1, lsl #8
    3534:	09000001 	stmdbeq	r0, {r0}
    3538:	40080077 	andmi	r0, r8, r7, ror r0
    353c:	1aff081a 	bne	fffc55ac <__bss_end__+0xfffb9e8c>
    3540:	014b1b9f 			; <UNDEFINED> instruction: 0x014b1b9f
    3544:	56010000 	strpl	r0, [r1], -r0
    3548:	00011119 	andeq	r1, r1, r9, lsl r1
    354c:	00980400 	addseq	r0, r8, r0, lsl #8
    3550:	00001000 	andeq	r1, r0, r0
    3554:	121a0200 	andsne	r0, sl, #0, 4
    3558:	1a000006 	bne	3578 <_start-0x4a88>
    355c:	00000128 	andeq	r0, r0, r8, lsr #2
    3560:	000017c1 	andeq	r1, r0, r1, asr #15
    3564:	00011d1b 	andeq	r1, r1, fp, lsl sp
    3568:	1d540100 	ldfnee	f0, [r4, #-0]
    356c:	00009804 	andeq	r9, r0, r4, lsl #16
    3570:	00000004 	andeq	r0, r0, r4
    3574:	0001321e 	andeq	r3, r1, lr, lsl r2
    3578:	0017e300 	andseq	lr, r7, r0, lsl #6
    357c:	1f000000 	svcne	0x00000000
    3580:	00009804 	andeq	r9, r0, r4, lsl #16
    3584:	00001131 	andeq	r1, r0, r1, lsr r1
    3588:	05510120 	ldrbeq	r0, [r1, #-288]	; 0x120
    358c:	40080077 	andmi	r0, r8, r7, ror r0
    3590:	5001201a 	andpl	r2, r1, sl, lsl r0
    3594:	00007602 	andeq	r7, r0, r2, lsl #12
    3598:	013f1900 	teqeq	pc, r0, lsl #18
    359c:	98180000 	ldmdals	r8, {}	; <UNPREDICTABLE>
    35a0:	001c0000 	andseq	r0, ip, r0
    35a4:	21010000 	mrscs	r0, (UNDEF: 1)
    35a8:	000006ac 	andeq	r0, r0, ip, lsr #13
    35ac:	00016a1b 	andeq	r6, r1, fp, lsl sl
    35b0:	1b580100 	blne	16039b8 <__bss_end__+0x15f8298>
    35b4:	0000015f 	andeq	r0, r0, pc, asr r1
    35b8:	561a5401 	ldrpl	r5, [sl], -r1, lsl #8
    35bc:	f6000001 			; <UNDEFINED> instruction: 0xf6000001
    35c0:	1b000017 	blne	3624 <_start-0x49dc>
    35c4:	0000014b 	andeq	r0, r0, fp, asr #2
    35c8:	11195601 	tstne	r9, r1, lsl #12
    35cc:	24000001 	strcs	r0, [r0], #-1
    35d0:	10000098 	mulne	r0, r8, r0
    35d4:	02000000 	andeq	r0, r0, #0
    35d8:	0006921a 	andeq	r9, r6, sl, lsl r2
    35dc:	01281b00 	teqeq	r8, r0, lsl #22
    35e0:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    35e4:	00011d1b 	andeq	r1, r1, fp, lsl sp
    35e8:	1d540100 	ldfnee	f0, [r4, #-0]
    35ec:	00009824 	andeq	r9, r0, r4, lsr #16
    35f0:	00000004 	andeq	r0, r0, r4
    35f4:	0001321e 	andeq	r3, r1, lr, lsl r2
    35f8:	00182900 	andseq	r2, r8, r0, lsl #18
    35fc:	1f000000 	svcne	0x00000000
    3600:	00009824 	andeq	r9, r0, r4, lsr #16
    3604:	00001131 	andeq	r1, r0, r1, lsr r1
    3608:	05510120 	ldrbeq	r0, [r1, #-288]	; 0x120
    360c:	80080077 	andhi	r0, r8, r7, ror r0
    3610:	5001201a 	andpl	r2, r1, sl, lsl r0
    3614:	00007602 	andeq	r7, r0, r2, lsl #12
    3618:	013f2100 	teqeq	pc, r0, lsl #2
    361c:	98380000 	ldmdals	r8!, {}	; <UNPREDICTABLE>
    3620:	001c0000 	andseq	r0, ip, r0
    3624:	23010000 	movwcs	r0, #4096	; 0x1000
    3628:	00016a1b 	andeq	r6, r1, fp, lsl sl
    362c:	1b550100 	blne	1543a34 <__bss_end__+0x1538314>
    3630:	0000015f 	andeq	r0, r0, pc, asr r1
    3634:	561c5401 	ldrpl	r5, [ip], -r1, lsl #8
    3638:	01000001 	tsteq	r0, r1
    363c:	00014b1b 	andeq	r4, r1, fp, lsl fp
    3640:	19560100 	ldmdbne	r6, {r8}^
    3644:	00000111 	andeq	r0, r0, r1, lsl r1
    3648:	00009844 	andeq	r9, r0, r4, asr #16
    364c:	00000010 	andeq	r0, r0, r0, lsl r0
    3650:	070b1a02 	streq	r1, [fp, -r2, lsl #20]
    3654:	281b0000 	ldmdacs	fp, {}	; <UNPREDICTABLE>
    3658:	01000001 	tsteq	r0, r1
    365c:	011d1b55 	tsteq	sp, r5, asr fp
    3660:	54010000 	strpl	r0, [r1], #-0
    3664:	0098441d 	addseq	r4, r8, sp, lsl r4
    3668:	00000400 	andeq	r0, r0, r0, lsl #8
    366c:	01321e00 	teqeq	r2, r0, lsl #28
    3670:	183c0000 	ldmdane	ip!, {}	; <UNPREDICTABLE>
    3674:	00000000 	andeq	r0, r0, r0
    3678:	0098441f 	addseq	r4, r8, pc, lsl r4
    367c:	00113100 	andseq	r3, r1, r0, lsl #2
    3680:	51012000 	mrspl	r2, (UNDEF: 1)
    3684:	01203101 	teqeq	r0, r1, lsl #2
    3688:	00760250 	rsbseq	r0, r6, r0, asr r2
    368c:	06000000 	streq	r0, [r0], -r0
    3690:	0000d904 	andeq	sp, r0, r4, lsl #18
    3694:	0b222200 	bleq	88be9c <__bss_end__+0x88077c>
    3698:	27010000 	strcs	r0, [r1, -r0]
    369c:	00000025 	andeq	r0, r0, r5, lsr #32
    36a0:	00076203 	andeq	r6, r7, r3, lsl #4
    36a4:	78720f00 	ldmdavc	r2!, {r8, r9, sl, fp}^
    36a8:	25270100 	strcs	r0, [r7, #-256]!	; 0x100
    36ac:	0f000000 	svceq	0x00000000
    36b0:	27010076 	smlsdxcs	r1, r6, r0, r0
    36b4:	00000025 	andeq	r0, r0, r5, lsr #32
    36b8:	000a7d0e 	andeq	r7, sl, lr, lsl #26
    36bc:	2c270100 	stfcss	f0, [r7], #-0
    36c0:	11000000 	mrsne	r0, (UNDEF: 0)
    36c4:	00000504 	andeq	r0, r0, r4, lsl #10
    36c8:	002c2801 	eoreq	r2, ip, r1, lsl #16
    36cc:	23000000 	movwcs	r0, #0
    36d0:	00000a1e 	andeq	r0, r0, lr, lsl sl
    36d4:	00253401 	eoreq	r3, r5, r1, lsl #8
    36d8:	98580000 	ldmdals	r8, {}^	; <UNPREDICTABLE>
    36dc:	01c80000 	biceq	r0, r8, r0
    36e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    36e4:	00000b1e 	andeq	r0, r0, lr, lsl fp
    36e8:	0007d713 	andeq	sp, r7, r3, lsl r7
    36ec:	22340100 	eorscs	r0, r4, #0, 2
    36f0:	4f000007 	svcmi	0x00000007
    36f4:	13000018 	movwne	r0, #24
    36f8:	00000a7d 	andeq	r0, r0, sp, ror sl
    36fc:	00253401 	eoreq	r3, r5, r1, lsl #8
    3700:	18940000 	ldmne	r4, {}	; <UNPREDICTABLE>
    3704:	72150000 	andsvc	r0, r5, #0
    3708:	35010078 	strcc	r0, [r1, #-120]	; 0x78
    370c:	00000025 	andeq	r0, r0, r5, lsr #32
    3710:	73165501 	tstvc	r6, #4194304	; 0x400000
    3714:	2c3c0100 	ldfcss	f0, [ip], #-0
    3718:	b2000000 	andlt	r0, r0, #0
    371c:	16000018 			; <UNDEFINED> instruction: 0x16000018
    3720:	3f010075 	svccc	0x00010075
    3724:	00000068 	andeq	r0, r0, r8, rrx
    3728:	000018c5 	andeq	r1, r0, r5, asr #17
    372c:	01006e16 	tsteq	r0, r6, lsl lr
    3730:	00002c40 	andeq	r2, r0, r0, asr #24
    3734:	0018d800 	andseq	sp, r8, r0, lsl #16
    3738:	00631600 	rsbeq	r1, r3, r0, lsl #12
    373c:	002c4101 	eoreq	r4, ip, r1, lsl #2
    3740:	18ef0000 	stmiane	pc!, {}^	; <UNPREDICTABLE>
    3744:	28190000 	ldmdacs	r9, {}	; <UNPREDICTABLE>
    3748:	6c000007 	stcvs	0, cr0, [r0], {7}
    374c:	34000098 	strcc	r0, [r0], #-152	; 0x98
    3750:	01000000 	mrseq	r0, (UNDEF: 0)
    3754:	00083c38 	andeq	r3, r8, r8, lsr ip
    3758:	074b1a00 	strbeq	r1, [fp, -r0, lsl #20]
    375c:	19190000 	ldmdbne	r9, {}	; <UNPREDICTABLE>
    3760:	421c0000 	andsmi	r0, ip, #0
    3764:	00000007 	andeq	r0, r0, r7
    3768:	0007381b 	andeq	r3, r7, fp, lsl r8
    376c:	1d550100 	ldfnee	f0, [r5, #-0]
    3770:	0000986c 	andeq	r9, r0, ip, ror #16
    3774:	00000034 	andeq	r0, r0, r4, lsr r0
    3778:	0007561e 	andeq	r5, r7, lr, lsl r6
    377c:	00193700 	andseq	r3, r9, r0, lsl #14
    3780:	98702400 	ldmdals	r0!, {sl, sp}^
    3784:	11470000 	mrsne	r0, (UNDEF: 71)
    3788:	7c250000 	stcvc	0, cr0, [r5], #-0
    378c:	52000098 	andpl	r0, r0, #152	; 0x98
    3790:	31000011 	tstcc	r0, r1, lsl r0
    3794:	20000008 	andcs	r0, r0, r8
    3798:	75025001 	strvc	r5, [r2, #-1]
    379c:	88240000 	stmdahi	r4!, {}	; <UNPREDICTABLE>
    37a0:	47000098 			; <UNDEFINED> instruction: 0x47000098
    37a4:	00000011 	andeq	r0, r0, r1, lsl r0
    37a8:	98a81700 	stmials	r8!, {r8, r9, sl, ip}
    37ac:	00040000 	andeq	r0, r4, r0
    37b0:	08590000 	ldmdaeq	r9, {}^	; <UNPREDICTABLE>
    37b4:	cf260000 	svcgt	0x00260000
    37b8:	0100000a 	tsteq	r0, sl
    37bc:	00002c3c 	andeq	r2, r0, ip, lsr ip
    37c0:	00195500 	andseq	r5, r9, r0, lsl #10
    37c4:	11190000 	tstne	r9, r0
    37c8:	b4000001 	strlt	r0, [r0], #-1
    37cc:	10000098 	mulne	r0, r8, r0
    37d0:	01000000 	mrseq	r0, (UNDEF: 0)
    37d4:	00089244 	andeq	r9, r8, r4, asr #4
    37d8:	01281a00 	teqeq	r8, r0, lsl #20
    37dc:	19680000 	stmdbne	r8!, {}^	; <UNPREDICTABLE>
    37e0:	1d1a0000 	ldcne	0, cr0, [sl, #-0]
    37e4:	8d000001 	stchi	0, cr0, [r0, #-4]
    37e8:	1d000019 	stcne	0, cr0, [r0, #-100]	; 0xffffff9c
    37ec:	000098b4 			; <UNDEFINED> instruction: 0x000098b4
    37f0:	00000004 	andeq	r0, r0, r4
    37f4:	0001321e 	andeq	r3, r1, lr, lsl r2
    37f8:	0019a000 	andseq	sl, r9, r0
    37fc:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    3800:	00000111 	andeq	r0, r0, r1, lsl r1
    3804:	000098d4 	ldrdeq	r9, [r0], -r4
    3808:	00000010 	andeq	r0, r0, r0, lsl r0
    380c:	08cb4801 	stmiaeq	fp, {r0, fp, lr}^
    3810:	281a0000 	ldmdacs	sl, {}	; <UNPREDICTABLE>
    3814:	b3000001 	movwlt	r0, #1
    3818:	1a000019 	bne	3884 <_start-0x477c>
    381c:	0000011d 	andeq	r0, r0, sp, lsl r1
    3820:	000019c6 	andeq	r1, r0, r6, asr #19
    3824:	0098d41d 	addseq	sp, r8, sp, lsl r4
    3828:	00000400 	andeq	r0, r0, r0, lsl #8
    382c:	01321e00 	teqeq	r2, r0, lsl #28
    3830:	19d90000 	ldmibne	r9, {}^	; <UNPREDICTABLE>
    3834:	00000000 	andeq	r0, r0, r0
    3838:	00011119 	andeq	r1, r1, r9, lsl r1
    383c:	0098f800 	addseq	pc, r8, r0, lsl #16
    3840:	00001000 	andeq	r1, r0, r0
    3844:	044b0100 	strbeq	r0, [fp], #-256	; 0x100
    3848:	1a000009 	bne	3874 <_start-0x478c>
    384c:	00000128 	andeq	r0, r0, r8, lsr #2
    3850:	000019ec 	andeq	r1, r0, ip, ror #19
    3854:	00011d1a 	andeq	r1, r1, sl, lsl sp
    3858:	0019ff00 	andseq	pc, r9, r0, lsl #30
    385c:	98f81d00 	ldmls	r8!, {r8, sl, fp, ip}^
    3860:	00040000 	andeq	r0, r4, r0
    3864:	321e0000 	andscc	r0, lr, #0
    3868:	12000001 	andne	r0, r0, #1
    386c:	0000001a 	andeq	r0, r0, sl, lsl r0
    3870:	01111900 	tsteq	r1, r0, lsl #18
    3874:	991c0000 	ldmdbls	ip, {}	; <UNPREDICTABLE>
    3878:	00100000 	andseq	r0, r0, r0
    387c:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    3880:	0000093d 	andeq	r0, r0, sp, lsr r9
    3884:	0001281a 	andeq	r2, r1, sl, lsl r8
    3888:	001a2500 	andseq	r2, sl, r0, lsl #10
    388c:	011d1a00 	tsteq	sp, r0, lsl #20
    3890:	1a380000 	bne	e03898 <__bss_end__+0xdf8178>
    3894:	1c1d0000 	ldcne	0, cr0, [sp], {-0}
    3898:	04000099 	streq	r0, [r0], #-153	; 0x99
    389c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    38a0:	00000132 	andeq	r0, r0, r2, lsr r1
    38a4:	00001a4b 	andeq	r1, r0, fp, asr #20
    38a8:	11190000 	tstne	r9, r0
    38ac:	40000001 	andmi	r0, r0, r1
    38b0:	10000099 	mulne	r0, r9, r0
    38b4:	01000000 	mrseq	r0, (UNDEF: 0)
    38b8:	00097651 	andeq	r7, r9, r1, asr r6
    38bc:	01281a00 	teqeq	r8, r0, lsl #20
    38c0:	1a5e0000 	bne	17838c8 <__bss_end__+0x17781a8>
    38c4:	1d1a0000 	ldcne	0, cr0, [sl, #-0]
    38c8:	71000001 	tstvc	r0, r1
    38cc:	1d00001a 	stcne	0, cr0, [r0, #-104]	; 0xffffff98
    38d0:	00009940 	andeq	r9, r0, r0, asr #18
    38d4:	00000004 	andeq	r0, r0, r4
    38d8:	0001321e 	andeq	r3, r1, lr, lsl r2
    38dc:	001a8400 	andseq	r8, sl, r0, lsl #8
    38e0:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    38e4:	00000111 	andeq	r0, r0, r1, lsl r1
    38e8:	00009964 	andeq	r9, r0, r4, ror #18
    38ec:	00000010 	andeq	r0, r0, r0, lsl r0
    38f0:	09af5401 	stmibeq	pc!, {r0, sl, ip, lr}	; <UNPREDICTABLE>
    38f4:	281a0000 	ldmdacs	sl, {}	; <UNPREDICTABLE>
    38f8:	97000001 	strls	r0, [r0, -r1]
    38fc:	1a00001a 	bne	396c <_start-0x4694>
    3900:	0000011d 	andeq	r0, r0, sp, lsl r1
    3904:	00001aaa 	andeq	r1, r0, sl, lsr #21
    3908:	0099641d 	addseq	r6, r9, sp, lsl r4
    390c:	00000400 	andeq	r0, r0, r0, lsl #8
    3910:	01321e00 	teqeq	r2, r0, lsl #28
    3914:	1abd0000 	bne	fef4391c <__bss_end__+0xfef381fc>
    3918:	00000000 	andeq	r0, r0, r0
    391c:	00011119 	andeq	r1, r1, r9, lsl r1
    3920:	00998800 	addseq	r8, r9, r0, lsl #16
    3924:	00001000 	andeq	r1, r0, r0
    3928:	e8570100 	ldmda	r7, {r8}^
    392c:	1a000009 	bne	3958 <_start-0x46a8>
    3930:	00000128 	andeq	r0, r0, r8, lsr #2
    3934:	00001ad0 	ldrdeq	r1, [r0], -r0
    3938:	00011d1a 	andeq	r1, r1, sl, lsl sp
    393c:	001ae300 	andseq	lr, sl, r0, lsl #6
    3940:	99881d00 	stmibls	r8, {r8, sl, fp, ip}
    3944:	00040000 	andeq	r0, r4, r0
    3948:	321e0000 	andscc	r0, lr, #0
    394c:	f6000001 			; <UNDEFINED> instruction: 0xf6000001
    3950:	0000001a 	andeq	r0, r0, sl, lsl r0
    3954:	01111900 	tsteq	r1, r0, lsl #18
    3958:	99ac0000 	stmibls	ip!, {}	; <UNPREDICTABLE>
    395c:	00100000 	andseq	r0, r0, r0
    3960:	5a010000 	bpl	43968 <__bss_end__+0x38248>
    3964:	00000a1d 	andeq	r0, r0, sp, lsl sl
    3968:	0001281a 	andeq	r2, r1, sl, lsl r8
    396c:	001b0900 	andseq	r0, fp, r0, lsl #18
    3970:	011d2700 	tsteq	sp, r0, lsl #14
    3974:	ac1d0000 	ldcge	0, cr0, [sp], {-0}
    3978:	04000099 	streq	r0, [r0], #-153	; 0x99
    397c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    3980:	00000132 	andeq	r0, r0, r2, lsr r1
    3984:	00001b1c 	andeq	r1, r0, ip, lsl fp
    3988:	28190000 	ldmdacs	r9, {}	; <UNPREDICTABLE>
    398c:	cc000007 	stcgt	0, cr0, [r0], {7}
    3990:	34000099 	strcc	r0, [r0], #-153	; 0x99
    3994:	01000000 	mrseq	r0, (UNDEF: 0)
    3998:	000a8161 	andeq	r8, sl, r1, ror #2
    399c:	074b2700 	strbeq	r2, [fp, -r0, lsl #14]
    39a0:	421a0000 	andsmi	r0, sl, #0
    39a4:	2f000007 	svccs	0x00000007
    39a8:	1a00001b 	bne	3a1c <_start-0x45e4>
    39ac:	00000738 	andeq	r0, r0, r8, lsr r7
    39b0:	00001b4f 	andeq	r1, r0, pc, asr #22
    39b4:	0099cc1d 	addseq	ip, r9, sp, lsl ip
    39b8:	00003400 	andeq	r3, r0, r0, lsl #8
    39bc:	07561e00 	ldrbeq	r1, [r6, -r0, lsl #28]
    39c0:	1b6d0000 	blne	1b439c8 <__bss_end__+0x1b382a8>
    39c4:	d0240000 	eorle	r0, r4, r0
    39c8:	47000099 			; <UNDEFINED> instruction: 0x47000099
    39cc:	25000011 	strcs	r0, [r0, #-17]
    39d0:	000099dc 	ldrdeq	r9, [r0], -ip
    39d4:	00001152 	andeq	r1, r0, r2, asr r1
    39d8:	00000a76 	andeq	r0, r0, r6, ror sl
    39dc:	02500120 	subseq	r0, r0, #32, 2
    39e0:	24000075 	strcs	r0, [r0], #-117	; 0x75
    39e4:	000099e8 	andeq	r9, r0, r8, ror #19
    39e8:	00001147 	andeq	r1, r0, r7, asr #2
    39ec:	d0250000 	eorle	r0, r5, r0
    39f0:	52000098 	andpl	r0, r0, #152	; 0x98
    39f4:	95000011 	strls	r0, [r0, #-17]
    39f8:	2000000a 	andcs	r0, r0, sl
    39fc:	75025001 	strvc	r5, [r2, #-1]
    3a00:	f0250000 			; <UNDEFINED> instruction: 0xf0250000
    3a04:	52000098 	andpl	r0, r0, #152	; 0x98
    3a08:	a9000011 	stmdbge	r0, {r0, r4}
    3a0c:	2000000a 	andcs	r0, r0, sl
    3a10:	75025001 	strvc	r5, [r2, #-1]
    3a14:	14250000 	strtne	r0, [r5], #-0
    3a18:	52000099 	andpl	r0, r0, #153	; 0x99
    3a1c:	bd000011 	stclt	0, cr0, [r0, #-68]	; 0xffffffbc
    3a20:	2000000a 	andcs	r0, r0, sl
    3a24:	75025001 	strvc	r5, [r2, #-1]
    3a28:	38250000 	stmdacc	r5!, {}	; <UNPREDICTABLE>
    3a2c:	52000099 	andpl	r0, r0, #153	; 0x99
    3a30:	d1000011 	tstle	r0, r1, lsl r0
    3a34:	2000000a 	andcs	r0, r0, sl
    3a38:	75025001 	strvc	r5, [r2, #-1]
    3a3c:	5c250000 	stcpl	0, cr0, [r5], #-0
    3a40:	52000099 	andpl	r0, r0, #153	; 0x99
    3a44:	e5000011 	str	r0, [r0, #-17]
    3a48:	2000000a 	andcs	r0, r0, sl
    3a4c:	75025001 	strvc	r5, [r2, #-1]
    3a50:	80250000 	eorhi	r0, r5, r0
    3a54:	52000099 	andpl	r0, r0, #153	; 0x99
    3a58:	f9000011 			; <UNDEFINED> instruction: 0xf9000011
    3a5c:	2000000a 	andcs	r0, r0, sl
    3a60:	75025001 	strvc	r5, [r2, #-1]
    3a64:	a4250000 	strtge	r0, [r5], #-0
    3a68:	52000099 	andpl	r0, r0, #153	; 0x99
    3a6c:	0d000011 	stceq	0, cr0, [r0, #-68]	; 0xffffffbc
    3a70:	2000000b 	andcs	r0, r0, fp
    3a74:	75025001 	strvc	r5, [r2, #-1]
    3a78:	c41f0000 	ldrgt	r0, [pc], #-0	; 3a80 <_start-0x4580>
    3a7c:	52000099 	andpl	r0, r0, #153	; 0x99
    3a80:	20000011 	andcs	r0, r0, r1, lsl r0
    3a84:	75025001 	strvc	r5, [r2, #-1]
    3a88:	23000000 	movwcs	r0, #0
    3a8c:	00000a33 	andeq	r0, r0, r3, lsr sl
    3a90:	00256c01 	eoreq	r6, r5, r1, lsl #24
    3a94:	9a200000 	bls	803a9c <__bss_end__+0x7f837c>
    3a98:	00900000 	addseq	r0, r0, r0
    3a9c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3aa0:	00000c02 	andeq	r0, r0, r2, lsl #24
    3aa4:	01007514 	tsteq	r0, r4, lsl r5
    3aa8:	0007226c 	andeq	r2, r7, ip, ror #4
    3aac:	001b8b00 	andseq	r8, fp, r0, lsl #22
    3ab0:	75621400 	strbvc	r1, [r2, #-1024]!	; 0x400
    3ab4:	6c010066 	stcvs	0, cr0, [r1], {102}	; 0x66
    3ab8:	00000c02 	andeq	r0, r0, r2, lsl #24
    3abc:	00001bbf 			; <UNDEFINED> instruction: 0x00001bbf
    3ac0:	0009b813 	andeq	fp, r9, r3, lsl r8
    3ac4:	686c0100 	stmdavs	ip!, {r8}^
    3ac8:	f3000000 	vhadd.u8	d0, d0, d0
    3acc:	1400001b 	strne	r0, [r0], #-27
    3ad0:	00646e65 	rsbeq	r6, r4, r5, ror #28
    3ad4:	004f6c01 	subeq	r6, pc, r1, lsl #24
    3ad8:	1c2c0000 	stcne	0, cr0, [ip], #-0
    3adc:	df280000 	svcle	0x00280000
    3ae0:	0100000a 	tsteq	r0, sl
    3ae4:	0000686c 	andeq	r6, r0, ip, ror #16
    3ae8:	00910200 	addseq	r0, r1, r0, lsl #4
    3aec:	0001f829 	andeq	pc, r1, r9, lsr #16
    3af0:	000c1800 	andeq	r1, ip, r0, lsl #16
    3af4:	fc030500 	stc2	5, cr0, [r3], {-0}
    3af8:	160000ae 	strne	r0, [r0], -lr, lsr #1
    3afc:	70010069 	andvc	r0, r1, r9, rrx
    3b00:	00000025 	andeq	r0, r0, r5, lsr #32
    3b04:	00001c66 	andeq	r1, r0, r6, ror #24
    3b08:	000ab226 	andeq	fp, sl, r6, lsr #4
    3b0c:	4f710100 	svcmi	0x00710100
    3b10:	85000000 	strhi	r0, [r0, #-0]
    3b14:	2400001c 	strcs	r0, [r0], #-28
    3b18:	00009a40 	andeq	r9, r0, r0, asr #20
    3b1c:	00001167 	andeq	r1, r0, r7, ror #2
    3b20:	009a5425 	addseq	r5, sl, r5, lsr #8
    3b24:	00116e00 	andseq	r6, r1, r0, lsl #28
    3b28:	000be200 	andeq	lr, fp, r0, lsl #4
    3b2c:	53012000 	movwpl	r2, #4096	; 0x1000
    3b30:	206d0802 	rsbcs	r0, sp, r2, lsl #16
    3b34:	03055201 	movweq	r5, #20993	; 0x5201
    3b38:	0000aefc 	strdeq	sl, [r0], -ip
    3b3c:	05510120 	ldrbeq	r0, [r1, #-288]	; 0x120
    3b40:	00af9003 	adceq	r9, pc, r3
    3b44:	50012000 	andpl	r2, r1, r0
    3b48:	af740305 	svcge	0x00740305
    3b4c:	24000000 	strcs	r0, [r0], #-0
    3b50:	00009a58 	andeq	r9, r0, r8, asr sl
    3b54:	00001184 	andeq	r1, r0, r4, lsl #3
    3b58:	009a741f 	addseq	r7, sl, pc, lsl r4
    3b5c:	00076200 	andeq	r6, r7, r0, lsl #4
    3b60:	51012000 	mrspl	r2, (UNDEF: 1)
    3b64:	20007a02 	andcs	r7, r0, r2, lsl #20
    3b68:	78025001 	stmdavc	r2, {r0, ip, lr}
    3b6c:	06000000 	streq	r0, [r0], -r0
    3b70:	00004f04 	andeq	r4, r0, r4, lsl #30
    3b74:	00902a00 	addseq	r2, r0, r0, lsl #20
    3b78:	0c180000 	ldceq	0, cr0, [r8], {-0}
    3b7c:	812b0000 	teqhi	fp, r0
    3b80:	12000000 	andne	r0, r0, #0
    3b84:	0c080700 	stceq	7, cr0, [r8], {-0}
    3b88:	ba230000 	blt	8c3b90 <__bss_end__+0x8b8470>
    3b8c:	0100000a 	tsteq	r0, sl
    3b90:	00002580 	andeq	r2, r0, r0, lsl #11
    3b94:	009ab000 	addseq	fp, sl, r0
    3b98:	00007c00 	andeq	r7, r0, r0, lsl #24
    3b9c:	e49c0100 	ldr	r0, [ip], #256	; 0x100
    3ba0:	1400000c 	strne	r0, [r0], #-12
    3ba4:	80010075 	andhi	r0, r1, r5, ror r0
    3ba8:	00000722 	andeq	r0, r0, r2, lsr #14
    3bac:	00001c98 	muleq	r0, r8, ip
    3bb0:	66756214 			; <UNDEFINED> instruction: 0x66756214
    3bb4:	02800100 	addeq	r0, r0, #0, 2
    3bb8:	cc00000c 	stcgt	0, cr0, [r0], {12}
    3bbc:	1300001c 	movwne	r0, #28
    3bc0:	000009b8 			; <UNDEFINED> instruction: 0x000009b8
    3bc4:	00688101 	rsbeq	r8, r8, r1, lsl #2
    3bc8:	1d000000 	stcne	0, cr0, [r0, #-0]
    3bcc:	df130000 	svcle	0x00130000
    3bd0:	0100000a 	tsteq	r0, sl
    3bd4:	00006881 	andeq	r6, r0, r1, lsl #17
    3bd8:	001d3900 	andseq	r3, sp, r0, lsl #18
    3bdc:	01f82900 	mvnseq	r2, r0, lsl #18
    3be0:	0cf40000 	ldcleq	0, cr0, [r4]
    3be4:	03050000 	movweq	r0, #20480	; 0x5000
    3be8:	0000af10 	andeq	sl, r0, r0, lsl pc
    3bec:	01006916 	tsteq	r0, r6, lsl r9
    3bf0:	00002586 	andeq	r2, r0, r6, lsl #11
    3bf4:	001d6d00 	andseq	r6, sp, r0, lsl #26
    3bf8:	9acc2400 	bls	ff30cc00 <__bss_end__+0xff3014e0>
    3bfc:	11670000 	cmnne	r7, r0
    3c00:	e0250000 	eor	r0, r5, r0
    3c04:	6e00009a 	mcrvs	0, 0, r0, cr0, cr10, {4}
    3c08:	c4000011 	strgt	r0, [r0], #-17
    3c0c:	2000000c 	andcs	r0, r0, ip
    3c10:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    3c14:	52012083 	andpl	r2, r1, #131	; 0x83
    3c18:	af100305 	svcge	0x00100305
    3c1c:	01200000 	teqeq	r0, r0
    3c20:	90030551 	andls	r0, r3, r1, asr r5
    3c24:	200000af 	andcs	r0, r0, pc, lsr #1
    3c28:	03055001 	movweq	r5, #20481	; 0x5001
    3c2c:	0000af74 	andeq	sl, r0, r4, ror pc
    3c30:	9ae42400 	bls	ff90cc38 <__bss_end__+0xff901518>
    3c34:	11840000 	orrne	r0, r4, r0
    3c38:	001f0000 	andseq	r0, pc, r0
    3c3c:	6200009b 	andvs	r0, r0, #155	; 0x9b
    3c40:	20000007 	andcs	r0, r0, r7
    3c44:	78025101 	stmdavc	r2, {r0, r8, ip, lr}
    3c48:	50012000 	andpl	r2, r1, r0
    3c4c:	00007702 	andeq	r7, r0, r2, lsl #14
    3c50:	00902a00 	addseq	r2, r0, r0, lsl #20
    3c54:	0cf40000 	ldcleq	0, cr0, [r4]
    3c58:	812b0000 	teqhi	fp, r0
    3c5c:	14000000 	strne	r0, [r0], #-0
    3c60:	0ce40700 	stcleq	7, cr0, [r4]
    3c64:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
    3c68:	0100000a 	tsteq	r0, sl
    3c6c:	0000d993 	muleq	r0, r3, r9
    3c70:	009b2c00 	addseq	r2, fp, r0, lsl #24
    3c74:	0000c000 	andeq	ip, r0, r0
    3c78:	149c0100 	ldrne	r0, [ip], #256	; 0x100
    3c7c:	1400000e 	strne	r0, [r0], #-14
    3c80:	01007874 	tsteq	r0, r4, ror r8
    3c84:	00004f93 	muleq	r0, r3, pc	; <UNPREDICTABLE>
    3c88:	001d8c00 	andseq	r8, sp, r0, lsl #24
    3c8c:	78721400 	ldmdavc	r2!, {sl, ip}^
    3c90:	4f930100 	svcmi	0x00930100
    3c94:	ad000000 	stcge	0, cr0, [r0, #-0]
    3c98:	1300001d 	movwne	r0, #29
    3c9c:	00000810 	andeq	r0, r0, r0, lsl r8
    3ca0:	00689301 	rsbeq	r9, r8, r1, lsl #6
    3ca4:	1dce0000 	stclne	0, cr0, [lr]
    3ca8:	02280000 	eoreq	r0, r8, #0
    3cac:	0100000a 	tsteq	r0, sl
    3cb0:	00006893 	muleq	r0, r3, r8
    3cb4:	00910200 	addseq	r0, r1, r0, lsl #4
    3cb8:	7a686d2c 	bvc	1a1f170 <__bss_end__+0x1a13a50>
    3cbc:	2c9b0100 	ldfcss	f0, [fp], {0}
    3cc0:	00000000 	andeq	r0, r0, r0
    3cc4:	2629b927 	strtcs	fp, [r9], -r7, lsr #18
    3cc8:	00000a53 	andeq	r0, r0, r3, asr sl
    3ccc:	002c9c01 	eoreq	r9, ip, r1, lsl #24
    3cd0:	1dec0000 	stclne	0, cr0, [ip]
    3cd4:	f8290000 			; <UNDEFINED> instruction: 0xf8290000
    3cd8:	24000001 	strcs	r0, [r0], #-1
    3cdc:	0500000e 	streq	r0, [r0, #-14]
    3ce0:	00af2803 	adceq	r2, pc, r3, lsl #16
    3ce4:	9b541700 	blls	15098ec <__bss_end__+0x14fe1cc>
    3ce8:	00080000 	andeq	r0, r8, r0
    3cec:	0d910000 	ldceq	0, cr0, [r1]
    3cf0:	692d0000 	pushvs	{}	; <UNPREDICTABLE>
    3cf4:	9701006e 	strls	r0, [r1, -lr, rrx]
    3cf8:	0000002c 	andeq	r0, r0, ip, lsr #32
    3cfc:	4c250001 	stcmi	0, cr0, [r5], #-4
    3d00:	8b00009b 	blhi	3f74 <_start-0x408c>
    3d04:	a5000011 	strge	r0, [r0, #-17]
    3d08:	2000000d 	andcs	r0, r0, sp
    3d0c:	76025001 	strvc	r5, [r2], -r1
    3d10:	54250000 	strtpl	r0, [r5], #-0
    3d14:	9c00009b 	stcls	0, cr0, [r0], {155}	; 0x9b
    3d18:	b9000011 	stmdblt	r0, {r0, r4}
    3d1c:	2000000d 	andcs	r0, r0, sp
    3d20:	78025001 	stmdavc	r2, {r0, ip, lr}
    3d24:	68250000 	stmdavs	r5!, {}	; <UNPREDICTABLE>
    3d28:	3100009b 	swpcc	r0, fp, [r0]	; <UNPREDICTABLE>
    3d2c:	d2000011 	andle	r0, r0, #17
    3d30:	2000000d 	andcs	r0, r0, sp
    3d34:	31015101 	tstcc	r1, r1, lsl #2
    3d38:	02500120 	subseq	r0, r0, #32, 2
    3d3c:	24000076 	strcs	r0, [r0], #-118	; 0x76
    3d40:	00009bac 	andeq	r9, r0, ip, lsr #23
    3d44:	00001167 	andeq	r1, r0, r7, ror #2
    3d48:	009bc025 	addseq	ip, fp, r5, lsr #32
    3d4c:	00116e00 	andseq	r6, r1, r0, lsl #28
    3d50:	000e0a00 	andeq	r0, lr, r0, lsl #20
    3d54:	53012000 	movwpl	r2, #4096	; 0x1000
    3d58:	209d0802 	addscs	r0, sp, r2, lsl #16
    3d5c:	03055201 	movweq	r5, #20993	; 0x5201
    3d60:	0000af28 	andeq	sl, r0, r8, lsr #30
    3d64:	05510120 	ldrbeq	r0, [r1, #-288]	; 0x120
    3d68:	00af9003 	adceq	r9, pc, r3
    3d6c:	50012000 	andpl	r2, r1, r0
    3d70:	afa40305 	svcge	0x00a40305
    3d74:	24000000 	strcs	r0, [r0], #-0
    3d78:	00009bc4 	andeq	r9, r0, r4, asr #23
    3d7c:	00001184 	andeq	r1, r0, r4, lsl #3
    3d80:	00902a00 	addseq	r2, r0, r0, lsl #20
    3d84:	0e240000 	cdpeq	0, 2, cr0, cr4, cr0, {0}
    3d88:	812b0000 	teqhi	fp, r0
    3d8c:	13000000 	movwne	r0, #0
    3d90:	0e140700 	cdpeq	7, 1, cr0, cr4, cr0, {0}
    3d94:	46230000 	strtmi	r0, [r3], -r0
    3d98:	0100000a 	tsteq	r0, sl
    3d9c:	000025a9 	andeq	r2, r0, r9, lsr #11
    3da0:	009bec00 	addseq	lr, fp, r0, lsl #24
    3da4:	00003c00 	andeq	r3, r0, r0, lsl #24
    3da8:	cc9c0100 	ldfgts	f0, [ip], {0}
    3dac:	1300000e 	movwne	r0, #14
    3db0:	000007d7 	ldrdeq	r0, [r0], -r7
    3db4:	0722a901 	streq	sl, [r2, -r1, lsl #18]!
    3db8:	1e1a0000 	cdpne	0, 1, cr0, cr10, cr0, {0}
    3dbc:	72160000 	andsvc	r0, r6, #0
    3dc0:	01007365 	tsteq	r0, r5, ror #6
    3dc4:	000025aa 	andeq	r2, r0, sl, lsr #11
    3dc8:	001e3b00 	andseq	r3, lr, r0, lsl #22
    3dcc:	01f82900 	mvnseq	r2, r0, lsl #18
    3dd0:	0edc0000 	cdpeq	0, 13, cr0, cr12, cr0, {0}
    3dd4:	03050000 	movweq	r0, #20480	; 0x5000
    3dd8:	0000af3c 	andeq	sl, r0, ip, lsr pc
    3ddc:	009bf825 	addseq	pc, fp, r5, lsr #16
    3de0:	00076200 	andeq	r6, r7, r0, lsl #4
    3de4:	000e8a00 	andeq	r8, lr, r0, lsl #20
    3de8:	51012000 	mrspl	r2, (UNDEF: 1)
    3dec:	20ff0902 	rscscs	r0, pc, r2, lsl #18
    3df0:	f3035001 	vhadd.u8	d5, d3, d1
    3df4:	24005001 	strcs	r5, [r0], #-1
    3df8:	00009c04 	andeq	r9, r0, r4, lsl #24
    3dfc:	00001167 	andeq	r1, r0, r7, ror #2
    3e00:	009c1825 	addseq	r1, ip, r5, lsr #16
    3e04:	00116e00 	andseq	r6, r1, r0, lsl #28
    3e08:	000ec200 	andeq	ip, lr, r0, lsl #4
    3e0c:	53012000 	movwpl	r2, #4096	; 0x1000
    3e10:	20ac0802 	adccs	r0, ip, r2, lsl #16
    3e14:	03055201 	movweq	r5, #20993	; 0x5201
    3e18:	0000af3c 	andeq	sl, r0, ip, lsr pc
    3e1c:	05510120 	ldrbeq	r0, [r1, #-288]	; 0x120
    3e20:	00af9003 	adceq	r9, pc, r3
    3e24:	50012000 	andpl	r2, r1, r0
    3e28:	afe80305 	svcge	0x00e80305
    3e2c:	24000000 	strcs	r0, [r0], #-0
    3e30:	00009c1c 	andeq	r9, r0, ip, lsl ip
    3e34:	00001184 	andeq	r1, r0, r4, lsl #3
    3e38:	00902a00 	addseq	r2, r0, r0, lsl #20
    3e3c:	0edc0000 	cdpeq	0, 13, cr0, cr12, cr0, {0}
    3e40:	812b0000 	teqhi	fp, r0
    3e44:	0c000000 	stceq	0, cr0, [r0], {-0}
    3e48:	0ecc0700 	cdpeq	7, 12, cr0, cr12, cr0, {0}
    3e4c:	8a120000 	bhi	483e54 <__bss_end__+0x478734>
    3e50:	0100000a 	tsteq	r0, sl
    3e54:	009c28b0 			; <UNDEFINED> instruction: 0x009c28b0
    3e58:	00002c00 	andeq	r2, r0, r0, lsl #24
    3e5c:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    3e60:	1300000f 	movwne	r0, #15
    3e64:	000007d7 	ldrdeq	r0, [r0], -r7
    3e68:	0722b001 	streq	fp, [r2, -r1]!
    3e6c:	1e4e0000 	cdpne	0, 4, cr0, cr14, cr0, {0}
    3e70:	6d140000 	ldcvs	0, cr0, [r4, #-0]
    3e74:	01006773 	tsteq	r0, r3, ror r7
    3e78:	000097b0 			; <UNDEFINED> instruction: 0x000097b0
    3e7c:	001e6c00 	andseq	r6, lr, r0, lsl #24
    3e80:	9c401f00 	mcrrls	15, 0, r1, r0, cr0
    3e84:	01760000 	cmneq	r6, r0
    3e88:	01200000 	teqeq	r0, r0
    3e8c:	00750250 	rsbseq	r0, r5, r0, asr r2
    3e90:	dc230000 	stcle	0, cr0, [r3], #-0
    3e94:	01000007 	tsteq	r0, r7
    3e98:	000025b9 			; <UNDEFINED> instruction: 0x000025b9
    3e9c:	009c5400 	addseq	r5, ip, r0, lsl #8
    3ea0:	00008400 	andeq	r8, r0, r0, lsl #8
    3ea4:	199c0100 	ldmibne	ip, {r8}
    3ea8:	13000010 	movwne	r0, #16
    3eac:	000007d7 	ldrdeq	r0, [r0], -r7
    3eb0:	0722b901 	streq	fp, [r2, -r1, lsl #18]!
    3eb4:	1e8a0000 	cdpne	0, 8, cr0, cr10, cr0, {0}
    3eb8:	662e0000 	strtvs	r0, [lr], -r0
    3ebc:	0100746d 	tsteq	r0, sp, ror #8
    3ec0:	000097b9 			; <UNDEFINED> instruction: 0x000097b9
    3ec4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3ec8:	7562152f 	strbvc	r1, [r2, #-1327]!	; 0x52f
    3ecc:	ba010066 	blt	4406c <__bss_end__+0x3894c>
    3ed0:	00001019 	andeq	r1, r0, r9, lsl r0
    3ed4:	7c9c9103 	ldfvcd	f1, [ip], {3}
    3ed8:	0006ad18 	andeq	sl, r6, r8, lsl sp
    3edc:	06bc0100 	ldrteq	r0, [ip], r0, lsl #2
    3ee0:	03000001 	movweq	r0, #1
    3ee4:	167c9891 			; <UNDEFINED> instruction: 0x167c9891
    3ee8:	01007a73 	tsteq	r0, r3, ror sl
    3eec:	000025be 			; <UNDEFINED> instruction: 0x000025be
    3ef0:	001eb600 	andseq	fp, lr, r0, lsl #12
    3ef4:	01f82900 	mvnseq	r2, r0, lsl #18
    3ef8:	103a0000 	eorsne	r0, sl, r0
    3efc:	03050000 	movweq	r0, #20480	; 0x5000
    3f00:	0000af4c 	andeq	sl, r0, ip, asr #30
    3f04:	009c7c25 	addseq	r7, ip, r5, lsr #24
    3f08:	0011ad00 	andseq	sl, r1, r0, lsl #26
    3f0c:	000fc000 	andeq	ip, pc, r0
    3f10:	53012000 	movwpl	r2, #4096	; 0x1000
    3f14:	20589102 	subscs	r9, r8, r2, lsl #2
    3f18:	91035201 	tstls	r3, r1, lsl #4
    3f1c:	01200654 	teqeq	r0, r4, asr r6
    3f20:	cc0a0351 	stcgt	3, cr0, [sl], {81}	; 0x51
    3f24:	50012001 	andpl	r2, r1, r1
    3f28:	7bfc9103 	blvc	fff2833c <__bss_end__+0xfff1cc1c>
    3f2c:	9c902400 	cfldrsls	mvf2, [r0], {0}
    3f30:	11670000 	cmnne	r7, r0
    3f34:	a4250000 	strtge	r0, [r5], #-0
    3f38:	6e00009c 	mcrvs	0, 0, r0, cr0, cr12, {4}
    3f3c:	f8000011 			; <UNDEFINED> instruction: 0xf8000011
    3f40:	2000000f 	andcs	r0, r0, pc
    3f44:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    3f48:	520120c0 	andpl	r2, r1, #192	; 0xc0
    3f4c:	af4c0305 	svcge	0x004c0305
    3f50:	01200000 	teqeq	r0, r0
    3f54:	90030551 	andls	r0, r3, r1, asr r5
    3f58:	200000af 	andcs	r0, r0, pc, lsr #1
    3f5c:	03055001 	movweq	r5, #20481	; 0x5001
    3f60:	0000b020 	andeq	fp, r0, r0, lsr #32
    3f64:	9ca82400 	cfstrsls	mvf2, [r8]
    3f68:	11840000 	orrne	r0, r4, r0
    3f6c:	b41f0000 	ldrlt	r0, [pc], #-0	; 3f74 <_start-0x408c>
    3f70:	e100009c 	swp	r0, ip, [r0]	; <UNPREDICTABLE>
    3f74:	2000000e 	andcs	r0, r0, lr
    3f78:	91035101 	tstls	r3, r1, lsl #2
    3f7c:	01207bfc 	strdeq	r7, [r0, -ip]!
    3f80:	00750250 	rsbseq	r0, r5, r0, asr r2
    3f84:	902a0000 	eorls	r0, sl, r0
    3f88:	2a000000 	bcs	3f90 <_start-0x4070>
    3f8c:	30000010 	andcc	r0, r0, r0, lsl r0
    3f90:	00000081 	andeq	r0, r0, r1, lsl #1
    3f94:	2a0001cb 	bcs	46c8 <_start-0x3938>
    3f98:	00000090 	muleq	r0, r0, r0
    3f9c:	0000103a 	andeq	r1, r0, sl, lsr r0
    3fa0:	0000812b 	andeq	r8, r0, fp, lsr #2
    3fa4:	07000e00 	streq	r0, [r0, -r0, lsl #28]
    3fa8:	0000102a 	andeq	r1, r0, sl, lsr #32
    3fac:	000afb23 	andeq	pc, sl, r3, lsr #22
    3fb0:	25c50100 	strbcs	r0, [r5, #256]	; 0x100
    3fb4:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    3fb8:	4c00009c 	stcmi	0, cr0, [r0], {156}	; 0x9c
    3fbc:	01000000 	mrseq	r0, (UNDEF: 0)
    3fc0:	00111c9c 	mulseq	r1, ip, ip
    3fc4:	00751400 	rsbseq	r1, r5, r0, lsl #8
    3fc8:	0722c501 	streq	ip, [r2, -r1, lsl #10]!
    3fcc:	1ef50000 	cdpne	0, 15, cr0, cr5, cr0, {0}
    3fd0:	62140000 	andsvs	r0, r4, #0
    3fd4:	01006675 	tsteq	r0, r5, ror r6
    3fd8:	000c02c5 	andeq	r0, ip, r5, asr #5
    3fdc:	001f1600 	andseq	r1, pc, r0, lsl #12
    3fe0:	09b81300 	ldmibeq	r8!, {r8, r9, ip}
    3fe4:	c5010000 	strgt	r0, [r1, #-0]
    3fe8:	00000068 	andeq	r0, r0, r8, rrx
    3fec:	00001f37 	andeq	r1, r0, r7, lsr pc
    3ff0:	646e6514 	strbtvs	r6, [lr], #-1300	; 0x514
    3ff4:	4fc50100 	svcmi	0x00c50100
    3ff8:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    3ffc:	1600001f 			; <UNDEFINED> instruction: 0x1600001f
    4000:	00736572 	rsbseq	r6, r3, r2, ror r5
    4004:	0025c601 	eoreq	ip, r5, r1, lsl #12
    4008:	1f790000 	svcne	0x00790000
    400c:	f8290000 			; <UNDEFINED> instruction: 0xf8290000
    4010:	2c000001 	stccs	0, cr0, [r0], {1}
    4014:	05000011 	streq	r0, [r0, #-17]
    4018:	00af5c03 	adceq	r5, pc, r3, lsl #24
    401c:	9cec2500 	cfstr64ls	mvdx2, [ip]
    4020:	0b1e0000 	bleq	784028 <__bss_end__+0x778908>
    4024:	10da0000 	sbcsne	r0, sl, r0
    4028:	01200000 	teqeq	r0, r0
    402c:	01f30352 	mvnseq	r0, r2, asr r3
    4030:	51012052 	qaddpl	r2, r2, r1
    4034:	5101f303 	tstpl	r1, r3, lsl #6
    4038:	03500120 	cmpeq	r0, #32, 2
    403c:	205001f3 	ldrshcs	r0, [r0], #-19	; 0xffffffed
    4040:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    4044:	2400ff09 	strcs	pc, [r0], #-3849	; 0xf09
    4048:	00009cf8 	strdeq	r9, [r0], -r8
    404c:	00001167 	andeq	r1, r0, r7, ror #2
    4050:	009d0c25 	addseq	r0, sp, r5, lsr #24
    4054:	00116e00 	andseq	r6, r1, r0, lsl #28
    4058:	00111200 	andseq	r1, r1, r0, lsl #4
    405c:	53012000 	movwpl	r2, #4096	; 0x1000
    4060:	20c80802 	sbccs	r0, r8, r2, lsl #16
    4064:	03055201 	movweq	r5, #20993	; 0x5201
    4068:	0000af5c 	andeq	sl, r0, ip, asr pc
    406c:	05510120 	ldrbeq	r0, [r1, #-288]	; 0x120
    4070:	00af9003 	adceq	r9, pc, r3
    4074:	50012000 	andpl	r2, r1, r0
    4078:	afe80305 	svcge	0x00e80305
    407c:	24000000 	strcs	r0, [r0], #-0
    4080:	00009d10 	andeq	r9, r0, r0, lsl sp
    4084:	00001184 	andeq	r1, r0, r4, lsl #3
    4088:	00902a00 	addseq	r2, r0, r0, lsl #20
    408c:	112c0000 	teqne	ip, r0
    4090:	812b0000 	teqhi	fp, r0
    4094:	16000000 	strne	r0, [r0], -r0
    4098:	111c0700 	tstne	ip, r0, lsl #14
    409c:	d4310000 	ldrtle	r0, [r1], #-0
    40a0:	0600000a 	streq	r0, [r0], -sl
    40a4:	00114721 	andseq	r4, r1, r1, lsr #14
    40a8:	002c3200 	eoreq	r3, ip, r0, lsl #4
    40ac:	2c320000 	ldccs	0, cr0, [r2], #-0
    40b0:	00000000 	andeq	r0, r0, r0
    40b4:	00090a33 	andeq	r0, r9, r3, lsr sl
    40b8:	2c570700 	mrrccs	7, 0, r0, r7, cr0
    40bc:	34000000 	strcc	r0, [r0], #-0
    40c0:	00000a97 	muleq	r0, r7, sl
    40c4:	00252406 	eoreq	r2, r5, r6, lsl #8
    40c8:	11670000 	cmnne	r7, r0
    40cc:	2c320000 	ldccs	0, cr0, [r2], #-0
    40d0:	00000000 	andeq	r0, r0, r0
    40d4:	0002f235 	andeq	pc, r2, r5, lsr r2	; <UNPREDICTABLE>
    40d8:	341e0700 	ldrcc	r0, [lr], #-1792	; 0x700
    40dc:	0000069c 	muleq	r0, ip, r6
    40e0:	00252907 	eoreq	r2, r5, r7, lsl #18
    40e4:	11840000 	orrne	r0, r4, r0
    40e8:	97320000 	ldrls	r0, [r2, -r0]!
    40ec:	2f000000 	svccs	0x00000000
    40f0:	01343500 	teqeq	r4, r0, lsl #10
    40f4:	66070000 	strvs	r0, [r7], -r0
    40f8:	000b1231 	andeq	r1, fp, r1, lsr r2
    40fc:	9c1d0600 	ldcls	6, cr0, [sp], {-0}
    4100:	32000011 	andcc	r0, r0, #17
    4104:	0000002c 	andeq	r0, r0, ip, lsr #32
    4108:	0aec3100 	beq	ffb10510 <__bss_end__+0xffb04df0>
    410c:	1c060000 	stcne	0, cr0, [r6], {-0}
    4110:	000011ad 	andeq	r1, r0, sp, lsr #3
    4114:	00002c32 	andeq	r2, r0, r2, lsr ip
    4118:	99360000 	ldmdbls	r6!, {}	; <UNPREDICTABLE>
    411c:	08000006 	stmdaeq	r0, {r1, r2}
    4120:	00002502 	andeq	r2, r0, r2, lsl #10
    4124:	008a3200 	addeq	r3, sl, r0, lsl #4
    4128:	25320000 	ldrcs	r0, [r2, #-0]!
    412c:	32000000 	andcc	r0, r0, #0
    4130:	00000097 	muleq	r0, r7, r0
    4134:	00010632 	andeq	r0, r1, r2, lsr r6
    4138:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    413c:	04000003 	streq	r0, [r0], #-3
    4140:	00146e00 	andseq	r6, r4, r0, lsl #28
    4144:	64010400 	strvs	r0, [r1], #-1024	; 0x400
    4148:	01000000 	mrseq	r0, (UNDEF: 0)
    414c:	00000c88 	andeq	r0, r0, r8, lsl #25
    4150:	00000638 	andeq	r0, r0, r8, lsr r6
    4154:	00009d24 	andeq	r9, r0, r4, lsr #26
    4158:	00000154 	andeq	r0, r0, r4, asr r1
    415c:	00001341 	andeq	r1, r0, r1, asr #6
    4160:	69050402 	stmdbvs	r5, {r1, sl}
    4164:	0300746e 	movweq	r7, #1134	; 0x46e
    4168:	02320704 	eorseq	r0, r2, #4, 14	; 0x100000
    416c:	01030000 	mrseq	r0, (UNDEF: 3)
    4170:	00010d06 	andeq	r0, r1, r6, lsl #26
    4174:	05020300 	streq	r0, [r2, #-768]	; 0x300
    4178:	000002ae 	andeq	r0, r0, lr, lsr #5
    417c:	7e050403 	cdpvc	4, 0, cr0, cr5, cr3, {0}
    4180:	03000002 	movweq	r0, #2
    4184:	02790508 	rsbseq	r0, r9, #8, 10	; 0x2000000
    4188:	01030000 	mrseq	r0, (UNDEF: 3)
    418c:	00010b08 	andeq	r0, r1, r8, lsl #22
    4190:	07020300 	streq	r0, [r2, -r0, lsl #6]
    4194:	0000015e 	andeq	r0, r0, lr, asr r1
    4198:	2d070403 	cfstrscs	mvf0, [r7, #-12]
    419c:	03000002 	movweq	r0, #2
    41a0:	02280708 	eoreq	r0, r8, #8, 14	; 0x200000
    41a4:	04030000 	streq	r0, [r3], #-0
    41a8:	00025e07 	andeq	r5, r2, r7, lsl #28
    41ac:	08010300 	stmdaeq	r1, {r8, r9}
    41b0:	00000114 	andeq	r0, r0, r4, lsl r1
    41b4:	0c020104 	stfeqs	f0, [r2], {4}
    41b8:	000000b2 	strheq	r0, [r0], -r2
    41bc:	000ca505 	andeq	sl, ip, r5, lsl #10
    41c0:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    41c4:	0100000b 	tsteq	r0, fp
    41c8:	000b5e05 	andeq	r5, fp, r5, lsl #28
    41cc:	aa050400 	bge	1451d4 <__bss_end__+0x139ab4>
    41d0:	0500000b 	streq	r0, [r0, #-11]
    41d4:	000bb905 	andeq	fp, fp, r5, lsl #18
    41d8:	c8050600 	stmdagt	r5, {r9, sl}
    41dc:	0700000b 	streq	r0, [r0, -fp]
    41e0:	000c5805 	andeq	r5, ip, r5, lsl #16
    41e4:	d7050300 	strle	r0, [r5, -r0, lsl #6]
    41e8:	0200000b 	andeq	r0, r0, #11
    41ec:	0c0a0600 	stceq	6, cr0, [sl], {-0}
    41f0:	15020000 	strne	r0, [r2, #-0]
    41f4:	00000079 	andeq	r0, r0, r9, ror r0
    41f8:	00010107 	andeq	r0, r1, r7, lsl #2
    41fc:	24370100 	ldrtcs	r0, [r7], #-256	; 0x100
    4200:	9c00009d 	stcls	0, cr0, [r0], {157}	; 0x9d
    4204:	01000000 	mrseq	r0, (UNDEF: 0)
    4208:	0001c39c 	muleq	r1, ip, r3
    420c:	9d2c0800 	stcls	8, cr0, [ip, #-0]
    4210:	03a80000 			; <UNDEFINED> instruction: 0x03a80000
    4214:	38090000 	stmdacc	r9, {}	; <UNPREDICTABLE>
    4218:	af00009d 	svcge	0x0000009d
    421c:	f3000003 	vhadd.u8	d0, d0, d3
    4220:	0a000000 	beq	4228 <_start-0x3dd8>
    4224:	32015101 	andcc	r5, r1, #1073741824	; 0x40000000
    4228:	0150010a 	cmpeq	r0, sl, lsl #2
    422c:	4409003e 	strmi	r0, [r9], #-62	; 0x3e
    4230:	af00009d 	svcge	0x0000009d
    4234:	0b000003 	bleq	4248 <_start-0x3db8>
    4238:	0a000001 	beq	4244 <_start-0x3dbc>
    423c:	32015101 	andcc	r5, r1, #1073741824	; 0x40000000
    4240:	0150010a 	cmpeq	r0, sl, lsl #2
    4244:	4808003f 	stmdami	r8, {r0, r1, r2, r3, r4, r5}
    4248:	a800009d 	stmdage	r0, {r0, r2, r3, r4, r7}
    424c:	09000003 	stmdbeq	r0, {r0, r1}
    4250:	00009d58 	andeq	r9, r0, r8, asr sp
    4254:	000003c5 	andeq	r0, r0, r5, asr #7
    4258:	00000128 	andeq	r0, r0, r8, lsr #2
    425c:	0250010a 	subseq	r0, r0, #-2147483646	; 0x80000002
    4260:	09000075 	stmdbeq	r0, {r0, r2, r4, r5, r6}
    4264:	00009d64 	andeq	r9, r0, r4, ror #26
    4268:	000003e6 	andeq	r0, r0, r6, ror #7
    426c:	0000013c 	andeq	r0, r0, ip, lsr r1
    4270:	0250010a 	subseq	r0, r0, #-2147483646	; 0x80000002
    4274:	08000075 	stmdaeq	r0, {r0, r2, r4, r5, r6}
    4278:	00009d68 	andeq	r9, r0, r8, ror #26
    427c:	000003a8 	andeq	r0, r0, r8, lsr #7
    4280:	009d7409 	addseq	r7, sp, r9, lsl #8
    4284:	0003e600 	andeq	lr, r3, r0, lsl #12
    4288:	00015800 	andeq	r5, r1, r0, lsl #16
    428c:	51010a00 	tstpl	r1, r0, lsl #20
    4290:	09003001 	stmdbeq	r0, {r0, ip, sp}
    4294:	00009d80 	andeq	r9, r0, r0, lsl #27
    4298:	000003e6 	andeq	r0, r0, r6, ror #7
    429c:	0000016b 	andeq	r0, r0, fp, ror #2
    42a0:	0151010a 	cmpeq	r1, sl, lsl #2
    42a4:	8c090030 	stchi	0, cr0, [r9], {48}	; 0x30
    42a8:	e600009d 			; <UNDEFINED> instruction: 0xe600009d
    42ac:	7e000003 	cdpvc	0, 0, cr0, cr0, cr3, {0}
    42b0:	0a000001 	beq	42bc <_start-0x3d44>
    42b4:	36015101 	strcc	r5, [r1], -r1, lsl #2
    42b8:	9d980900 	ldcls	9, cr0, [r8]
    42bc:	03e60000 	mvneq	r0, #0
    42c0:	01910000 	orrseq	r0, r1, r0
    42c4:	010a0000 	mrseq	r0, (UNDEF: 10)
    42c8:	00330151 	eorseq	r0, r3, r1, asr r1
    42cc:	009da409 	addseq	sl, sp, r9, lsl #8
    42d0:	0003e600 	andeq	lr, r3, r0, lsl #12
    42d4:	0001a600 	andeq	sl, r1, r0, lsl #12
    42d8:	51010a00 	tstpl	r1, r0, lsl #20
    42dc:	010e0a03 	tsteq	lr, r3, lsl #20
    42e0:	9db00900 	ldcls	9, cr0, [r0]
    42e4:	03e60000 	mvneq	r0, #0
    42e8:	01b90000 			; <UNDEFINED> instruction: 0x01b90000
    42ec:	010a0000 	mrseq	r0, (UNDEF: 10)
    42f0:	00330151 	eorseq	r0, r3, r1, asr r1
    42f4:	009db408 	addseq	fp, sp, r8, lsl #8
    42f8:	0003a800 	andeq	sl, r3, r0, lsl #16
    42fc:	6d0b0000 	stcvs	0, cr0, [fp, #-0]
    4300:	0100000b 	tsteq	r0, fp
    4304:	00002557 	andeq	r2, r0, r7, asr r5
    4308:	009dc000 	addseq	ip, sp, r0
    430c:	00001c00 	andeq	r1, r0, r0, lsl #24
    4310:	e69c0100 	ldr	r0, [ip], r0, lsl #2
    4314:	08000001 	stmdaeq	r0, {r0}
    4318:	00009dd0 	ldrdeq	r9, [r0], -r0
    431c:	000003c5 	andeq	r0, r0, r5, asr #7
    4320:	0a490b00 	beq	1246f28 <__bss_end__+0x123b808>
    4324:	5d010000 	stcpl	0, cr0, [r1, #-0]
    4328:	00000025 	andeq	r0, r0, r5, lsr #32
    432c:	00009ddc 	ldrdeq	r9, [r0], -ip
    4330:	00000028 	andeq	r0, r0, r8, lsr #32
    4334:	02129c01 	andseq	r9, r2, #256	; 0x100
    4338:	e4080000 	str	r0, [r8], #-0
    433c:	c300009d 	movwgt	r0, #157	; 0x9d
    4340:	08000001 	stmdaeq	r0, {r0}
    4344:	00009df8 	strdeq	r9, [r0], -r8
    4348:	000003c5 	andeq	r0, r0, r5, asr #7
    434c:	0c160b00 	ldceq	11, cr0, [r6], {-0}
    4350:	64010000 	strvs	r0, [r1], #-0
    4354:	00000025 	andeq	r0, r0, r5, lsr #32
    4358:	00009e04 	andeq	r9, r0, r4, lsl #28
    435c:	0000001c 	andeq	r0, r0, ip, lsl r0
    4360:	02359c01 	eorseq	r9, r5, #256	; 0x100
    4364:	14080000 	strne	r0, [r8], #-0
    4368:	c500009e 	strgt	r0, [r0, #-158]	; 0x9e
    436c:	00000003 	andeq	r0, r0, r3
    4370:	00083807 	andeq	r3, r8, r7, lsl #16
    4374:	206a0100 	rsbcs	r0, sl, r0, lsl #2
    4378:	2c00009e 	stccs	0, cr0, [r0], {158}	; 0x9e
    437c:	01000000 	mrseq	r0, (UNDEF: 0)
    4380:	0002719c 	muleq	r2, ip, r1
    4384:	00630c00 	rsbeq	r0, r3, r0, lsl #24
    4388:	002c6a01 	eoreq	r6, ip, r1, lsl #20
    438c:	1f970000 	svcne	0x00970000
    4390:	2c080000 	stccs	0, cr0, [r8], {-0}
    4394:	1200009e 	andne	r0, r0, #158	; 0x9e
    4398:	0d000002 	stceq	0, cr0, [r0, #-8]
    439c:	00009e44 	andeq	r9, r0, r4, asr #28
    43a0:	000003e6 	andeq	r0, r0, r6, ror #7
    43a4:	0251010a 	subseq	r0, r1, #-2147483646	; 0x80000002
    43a8:	00000074 	andeq	r0, r0, r4, ror r0
    43ac:	000b8b0b 	andeq	r8, fp, fp, lsl #22
    43b0:	25740100 	ldrbcs	r0, [r4, #-256]!	; 0x100
    43b4:	4c000000 	stcmi	0, cr0, [r0], {-0}
    43b8:	0c00009e 	stceq	0, cr0, [r0], {158}	; 0x9e
    43bc:	01000000 	mrseq	r0, (UNDEF: 0)
    43c0:	0002949c 	muleq	r2, ip, r4
    43c4:	9e540800 	cdpls	8, 5, cr0, cr4, cr0, {0}
    43c8:	01c30000 	biceq	r0, r3, r0
    43cc:	0b000000 	bleq	43d4 <_start-0x3c2c>
    43d0:	00000cc4 	andeq	r0, r0, r4, asr #25
    43d4:	00257801 	eoreq	r7, r5, r1, lsl #16
    43d8:	9e580000 	cdpls	0, 5, cr0, cr8, cr0, {0}
    43dc:	00200000 	eoreq	r0, r0, r0
    43e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    43e4:	000002c0 	andeq	r0, r0, r0, asr #5
    43e8:	009e6008 	addseq	r6, lr, r8
    43ec:	00027100 	andeq	r7, r2, r0, lsl #2
    43f0:	9e6c0800 	cdpls	8, 6, cr0, cr12, cr0, {0}
    43f4:	01e60000 	mvneq	r0, r0
    43f8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    43fc:	00000c30 	andeq	r0, r0, r0, lsr ip
    4400:	02d11601 	sbcseq	r1, r1, #1048576	; 0x100000
    4404:	03050000 	movweq	r0, #20480	; 0x5000
    4408:	0000a804 	andeq	sl, r0, r4, lsl #16
    440c:	02d7040f 	sbcseq	r0, r7, #251658240	; 0xf000000
    4410:	2c100000 	ldccs	0, cr0, [r0], {-0}
    4414:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    4418:	00000c24 	andeq	r0, r0, r4, lsr #24
    441c:	02d11701 	sbcseq	r1, r1, #262144	; 0x40000
    4420:	03050000 	movweq	r0, #20480	; 0x5000
    4424:	0000a7d4 	ldrdeq	sl, [r0], -r4
    4428:	000b410e 	andeq	r4, fp, lr, lsl #2
    442c:	d11a0100 	tstle	sl, r0, lsl #2
    4430:	05000002 	streq	r0, [r0, #-2]
    4434:	00a7f003 	adceq	pc, r7, r3
    4438:	0be60e00 	bleq	ff987c40 <__bss_end__+0xff97c520>
    443c:	1b010000 	blne	44444 <__bss_end__+0x38d24>
    4440:	000002d1 	ldrdeq	r0, [r0], -r1
    4444:	a7dc0305 	ldrbge	r0, [ip, r5, lsl #6]
    4448:	fb0e0000 	blx	384452 <__bss_end__+0x378d32>
    444c:	0100000b 	tsteq	r0, fp
    4450:	0002d11c 	andeq	sp, r2, ip, lsl r1
    4454:	e0030500 	and	r0, r3, r0, lsl #10
    4458:	0e0000a7 	cdpeq	0, 0, cr0, cr0, cr7, {5}
    445c:	00000c96 	muleq	r0, r6, ip
    4460:	02d11d01 	sbcseq	r1, r1, #1, 26	; 0x40
    4464:	03050000 	movweq	r0, #20480	; 0x5000
    4468:	0000a7e4 	andeq	sl, r0, r4, ror #15
    446c:	000b320e 	andeq	r3, fp, lr, lsl #4
    4470:	d11e0100 	tstle	lr, r0, lsl #2
    4474:	05000002 	streq	r0, [r0, #-2]
    4478:	00a80003 	adceq	r0, r8, r3
    447c:	0cb50e00 	ldceq	14, cr0, [r5]
    4480:	1f010000 	svcne	0x00010000
    4484:	000002d1 	ldrdeq	r0, [r0], -r1
    4488:	a7ec0305 	strbge	r0, [ip, r5, lsl #6]!
    448c:	4f0e0000 	svcmi	0x000e0000
    4490:	0100000b 	tsteq	r0, fp
    4494:	0002d120 	andeq	sp, r2, r0, lsr #2
    4498:	fc030500 	stc2	5, cr0, [r3], {-0}
    449c:	0e0000a7 	cdpeq	0, 0, cr0, cr0, cr7, {5}
    44a0:	00000c79 	andeq	r0, r0, r9, ror ip
    44a4:	02d12101 	sbcseq	r2, r1, #1073741824	; 0x40000000
    44a8:	03050000 	movweq	r0, #20480	; 0x5000
    44ac:	0000a7f8 	strdeq	sl, [r0], -r8
    44b0:	000b7b0e 	andeq	r7, fp, lr, lsl #22
    44b4:	d1220100 	teqle	r2, r0, lsl #2
    44b8:	05000002 	streq	r0, [r0, #-2]
    44bc:	00a7d803 	adceq	sp, r7, r3, lsl #16
    44c0:	0c480e00 	mcrreq	14, 0, r0, r8, cr0
    44c4:	23010000 	movwcs	r0, #4096	; 0x1000
    44c8:	000002d1 	ldrdeq	r0, [r0], -r1
    44cc:	a7f40305 	ldrbge	r0, [r4, r5, lsl #6]!
    44d0:	380e0000 	stmdacc	lr, {}	; <UNPREDICTABLE>
    44d4:	0100000c 	tsteq	r0, ip
    44d8:	0002d124 	andeq	sp, r2, r4, lsr #2
    44dc:	e8030500 	stmda	r3, {r8, sl}
    44e0:	110000a7 	smlatbne	r0, r7, r0, r0
    44e4:	000003e3 	andeq	r0, r0, r3, ror #7
    44e8:	67128a03 	ldrvs	r8, [r2, -r3, lsl #20]
    44ec:	0200000c 	andeq	r0, r0, #12
    44f0:	0003c519 	andeq	ip, r3, r9, lsl r5
    44f4:	002c1300 	eoreq	r1, ip, r0, lsl #6
    44f8:	b2130000 	andslt	r0, r3, #0
    44fc:	00000000 	andeq	r0, r0, r0
    4500:	000cd414 	andeq	sp, ip, r4, lsl r4
    4504:	2ca90300 	stccs	3, cr0, [r9]
    4508:	da000000 	ble	4510 <_start-0x3af0>
    450c:	13000003 	movwne	r0, #3
    4510:	000003da 	ldrdeq	r0, [r0], -sl
    4514:	e0040f00 	and	r0, r4, r0, lsl #30
    4518:	15000003 	strne	r0, [r0, #-3]
    451c:	000003e5 	andeq	r0, r0, r5, ror #7
    4520:	0bf51216 	bleq	ffd48d80 <__bss_end__+0xffd3d660>
    4524:	9d030000 	stcls	0, cr0, [r3, #-0]
    4528:	000003fc 	strdeq	r0, [r0], -ip
    452c:	0003fc13 	andeq	pc, r3, r3, lsl ip	; <UNPREDICTABLE>
    4530:	002c1300 	eoreq	r1, ip, r0, lsl #6
    4534:	0f000000 	svceq	0x00000000
    4538:	0003e504 	andeq	lr, r3, r4, lsl #10
    453c:	058d0000 	streq	r0, [sp]
    4540:	00040000 	andeq	r0, r4, r0
    4544:	0000159c 	muleq	r0, ip, r5
    4548:	00640104 	rsbeq	r0, r4, r4, lsl #2
    454c:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    4550:	3800000d 	stmdacc	r0, {r0, r2, r3}
    4554:	78000006 	stmdavc	r0, {r1, r2}
    4558:	0000009e 	muleq	r0, lr, r0
    455c:	46000002 	strmi	r0, [r0], -r2
    4560:	02000014 	andeq	r0, r0, #20
    4564:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    4568:	04030074 	streq	r0, [r3], #-116	; 0x74
    456c:	00023207 	andeq	r3, r2, r7, lsl #4
    4570:	06010300 	streq	r0, [r1], -r0, lsl #6
    4574:	0000010d 	andeq	r0, r0, sp, lsl #2
    4578:	ae050203 	cdpge	2, 0, cr0, cr5, cr3, {0}
    457c:	03000002 	movweq	r0, #2
    4580:	027e0504 	rsbseq	r0, lr, #4, 10	; 0x1000000
    4584:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    4588:	00027905 	andeq	r7, r2, r5, lsl #18
    458c:	08010300 	stmdaeq	r1, {r8, r9}
    4590:	0000010b 	andeq	r0, r0, fp, lsl #2
    4594:	5e070203 	cdppl	2, 0, cr0, cr7, cr3, {0}
    4598:	03000001 	movweq	r0, #1
    459c:	022d0704 	eoreq	r0, sp, #4, 14	; 0x100000
    45a0:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    45a4:	00022807 	andeq	r2, r2, r7, lsl #16
    45a8:	07040300 	streq	r0, [r4, -r0, lsl #6]
    45ac:	0000025e 	andeq	r0, r0, lr, asr r2
    45b0:	14080103 	strne	r0, [r8], #-259	; 0x103
    45b4:	04000001 	streq	r0, [r0], #-1
    45b8:	00007f04 	andeq	r7, r0, r4, lsl #30
    45bc:	00720500 	rsbseq	r0, r2, r0, lsl #10
    45c0:	72060000 	andvc	r0, r6, #0
    45c4:	94000000 	strls	r0, [r0], #-0
    45c8:	07000000 	streq	r0, [r0, -r0]
    45cc:	0000006b 	andeq	r0, r0, fp, rrx
    45d0:	04080019 	streq	r0, [r8], #-25
    45d4:	010b1403 	tsteq	fp, r3, lsl #8
    45d8:	9d090000 	stcls	0, cr0, [r9, #-0]
    45dc:	80000003 	andhi	r0, r0, r3
    45e0:	028082e4 	addeq	r8, r0, #228, 4	; 0x4000000e
    45e4:	0004c309 	andeq	ip, r4, r9, lsl #6
    45e8:	82e48000 	rschi	r8, r4, #0
    45ec:	ac090280 	sfmge	f0, 4, [r9], {128}	; 0x80
    45f0:	84000003 	strhi	r0, [r0], #-3
    45f4:	028082e4 	addeq	r8, r0, #228, 4	; 0x4000000e
    45f8:	0003ba09 	andeq	fp, r3, r9, lsl #20
    45fc:	82e48800 	rschi	r8, r4, #0, 16
    4600:	11090280 	smlabbne	r9, r0, r2, r0
    4604:	8c000005 	stchi	0, cr0, [r0], {5}
    4608:	028082e4 	addeq	r8, r0, #228, 4	; 0x4000000e
    460c:	0003ef09 	andeq	lr, r3, r9, lsl #30
    4610:	82e49000 	rschi	r9, r4, #0
    4614:	fd090280 	stc2	2, cr0, [r9, #-512]	; 0xfffffe00
    4618:	94000003 	strls	r0, [r0], #-3
    461c:	028082e4 	addeq	r8, r0, #228, 4	; 0x4000000e
    4620:	0004d509 	andeq	sp, r4, r9, lsl #10
    4624:	82e49800 	rschi	r9, r4, #0, 16
    4628:	34090280 	strcc	r0, [r9], #-640	; 0x280
    462c:	9c000003 	stcls	0, cr0, [r0], {3}
    4630:	028082e4 	addeq	r8, r0, #228, 4	; 0x4000000e
    4634:	00034309 	andeq	r4, r3, r9, lsl #6
    4638:	82e4a000 	rschi	sl, r4, #0
    463c:	c8090280 	stmdagt	r9, {r7, r9}
    4640:	a4000003 	strge	r0, [r0], #-3
    4644:	028082e4 	addeq	r8, r0, #228, 4	; 0x4000000e
    4648:	043c0a00 	ldrteq	r0, [ip], #-2560	; 0xa00
    464c:	05010000 	streq	r0, [r1, #-0]
    4650:	00009e78 	andeq	r9, r0, r8, ror lr
    4654:	00000068 	andeq	r0, r0, r8, rrx
    4658:	01b79c01 			; <UNDEFINED> instruction: 0x01b79c01
    465c:	f00b0000 			; <UNDEFINED> instruction: 0xf00b0000
    4660:	0100000c 	tsteq	r0, ip
    4664:	00002c11 	andeq	r2, r0, r1, lsl ip
    4668:	0d010b00 	vstreq	d0, [r1, #-0]
    466c:	12010000 	andne	r0, r1, #0
    4670:	0000002c 	andeq	r0, r0, ip, lsr #32
    4674:	7473640c 	ldrbtvc	r6, [r3], #-1036	; 0x40c
    4678:	b7160100 	ldrlt	r0, [r6, -r0, lsl #2]
    467c:	00000001 	andeq	r0, r0, r1
    4680:	6372730d 	cmnvs	r2, #872415232	; 0x34000000
    4684:	b7170100 	ldrlt	r0, [r7, -r0, lsl #2]
    4688:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    468c:	1801006e 	stmdane	r1, {r1, r2, r3, r5, r6}
    4690:	0000002c 	andeq	r0, r0, ip, lsr #32
    4694:	a80f5001 	stmdage	pc, {r0, ip, lr}	; <UNPREDICTABLE>
    4698:	2400009e 	strcs	r0, [r0], #-158	; 0x9e
    469c:	73000000 	movwvc	r0, #0
    46a0:	10000001 	andne	r0, r0, r1
    46a4:	19010069 	stmdbne	r1, {r0, r3, r5, r6}
    46a8:	00000025 	andeq	r0, r0, r5, lsr #32
    46ac:	00001fb5 			; <UNDEFINED> instruction: 0x00001fb5
    46b0:	9e881100 	rmflse	f1, f0, f0
    46b4:	054f0000 	strbeq	r0, [pc, #-0]	; 46bc <_start-0x3944>
    46b8:	01900000 	orrseq	r0, r0, r0
    46bc:	01120000 	tsteq	r2, r0
    46c0:	ff090251 			; <UNDEFINED> instruction: 0xff090251
    46c4:	05500112 	ldrbeq	r0, [r0, #-274]	; 0x112
    46c8:	00b21c0c 	adcseq	r1, r2, ip, lsl #24
    46cc:	94110020 	ldrls	r0, [r1], #-32
    46d0:	4f00009e 	svcmi	0x0000009e
    46d4:	ad000005 	stcge	0, cr0, [r0, #-20]	; 0xffffffec
    46d8:	12000001 	andne	r0, r0, #1
    46dc:	09025101 	stmdbeq	r2, {r0, r8, ip, lr}
    46e0:	500112ff 	strdpl	r1, [r1], -pc	; <UNPREDICTABLE>
    46e4:	b2200c05 	eorlt	r0, r0, #1280	; 0x500
    46e8:	13002000 	movwne	r2, #0
    46ec:	00009e98 	muleq	r0, r8, lr
    46f0:	00000565 	andeq	r0, r0, r5, ror #10
    46f4:	2c040400 	cfstrscs	mvf0, [r4], {-0}
    46f8:	0a000000 	beq	4700 <_start-0x3900>
    46fc:	00000d8c 	andeq	r0, r0, ip, lsl #27
    4700:	9ee01f01 	cdpls	15, 14, cr1, cr0, cr1, {0}
    4704:	00440000 	subeq	r0, r4, r0
    4708:	9c010000 	stcls	0, cr0, [r1], {-0}
    470c:	00000242 	andeq	r0, r0, r2, asr #4
    4710:	00637014 	rsbeq	r7, r3, r4, lsl r0
    4714:	002c1f01 	eoreq	r1, ip, r1, lsl #30
    4718:	1fd40000 	svcne	0x00d40000
    471c:	f8150000 			; <UNDEFINED> instruction: 0xf8150000
    4720:	52000001 	andpl	r0, r0, #1
    4724:	05000002 	streq	r0, [r0, #-2]
    4728:	00b04403 	adcseq	r4, r0, r3, lsl #8
    472c:	9ef01300 	cdpls	3, 15, cr1, cr0, cr0, {0}
    4730:	056c0000 	strbeq	r0, [ip, #-0]!
    4734:	10110000 	andsne	r0, r1, r0
    4738:	7300009f 	movwvc	r0, #159	; 0x9f
    473c:	38000005 	stmdacc	r0, {r0, r2}
    4740:	12000002 	andne	r0, r0, #2
    4744:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    4748:	52011220 	andpl	r1, r1, #32, 4
    474c:	b0440305 	sublt	r0, r4, r5, lsl #6
    4750:	01120000 	tsteq	r2, r0
    4754:	10030551 	andne	r0, r3, r1, asr r5
    4758:	120000b1 	andne	r0, r0, #177	; 0xb1
    475c:	03055001 	movweq	r5, #20481	; 0x5001
    4760:	0000b0d4 	ldrdeq	fp, [r0], -r4
    4764:	047d0212 	ldrbteq	r0, [sp], #-530	; 0x212
    4768:	12007402 	andne	r7, r0, #33554432	; 0x2000000
    476c:	05007d02 	streq	r7, [r0, #-3330]	; 0xd02
    4770:	00b13003 	adcseq	r3, r1, r3
    4774:	14130000 	ldrne	r0, [r3], #-0
    4778:	8900009f 	stmdbhi	r0, {r0, r1, r2, r3, r4, r7}
    477c:	00000005 	andeq	r0, r0, r5
    4780:	00007206 	andeq	r7, r0, r6, lsl #4
    4784:	00025200 	andeq	r5, r2, r0, lsl #4
    4788:	006b0700 	rsbeq	r0, fp, r0, lsl #14
    478c:	00150000 	andseq	r0, r5, r0
    4790:	00024205 	andeq	r4, r2, r5, lsl #4
    4794:	0d720a00 	vldmdbeq	r2!, {s1-s0}
    4798:	24010000 	strcs	r0, [r1], #-0
    479c:	00009f24 	andeq	r9, r0, r4, lsr #30
    47a0:	00000044 	andeq	r0, r0, r4, asr #32
    47a4:	02dc9c01 	sbcseq	r9, ip, #256	; 0x100
    47a8:	70140000 	andsvc	r0, r4, r0
    47ac:	24010063 	strcs	r0, [r1], #-99	; 0x63
    47b0:	0000002c 	andeq	r0, r0, ip, lsr #32
    47b4:	00001ff2 	strdeq	r1, [r0], -r2
    47b8:	0001f815 	andeq	pc, r1, r5, lsl r8	; <UNPREDICTABLE>
    47bc:	0002dc00 	andeq	sp, r2, r0, lsl #24
    47c0:	5c030500 	cfstr32pl	mvfx0, [r3], {-0}
    47c4:	130000b0 	movwne	r0, #176	; 0xb0
    47c8:	00009f34 	andeq	r9, r0, r4, lsr pc
    47cc:	0000056c 	andeq	r0, r0, ip, ror #10
    47d0:	009f5411 	addseq	r5, pc, r1, lsl r4	; <UNPREDICTABLE>
    47d4:	00057300 	andeq	r7, r5, r0, lsl #6
    47d8:	0002d200 	andeq	sp, r2, r0, lsl #4
    47dc:	53011200 	movwpl	r1, #4608	; 0x1200
    47e0:	12250802 	eorne	r0, r5, #131072	; 0x20000
    47e4:	03055201 	movweq	r5, #20993	; 0x5201
    47e8:	0000b05c 	andeq	fp, r0, ip, asr r0
    47ec:	05510112 	ldrbeq	r0, [r1, #-274]	; 0x112
    47f0:	00b11003 	adcseq	r1, r1, r3
    47f4:	50011200 	andpl	r1, r1, r0, lsl #4
    47f8:	b0d40305 	sbcslt	r0, r4, r5, lsl #6
    47fc:	02120000 	andseq	r0, r2, #0
    4800:	7402047d 	strvc	r0, [r2], #-1149	; 0x47d
    4804:	7d021200 	sfmvc	f1, 4, [r2, #-0]
    4808:	38030500 	stmdacc	r3, {r8, sl}
    480c:	000000b1 	strheq	r0, [r0], -r1
    4810:	009f5813 	addseq	r5, pc, r3, lsl r8	; <UNPREDICTABLE>
    4814:	00058900 	andeq	r8, r5, r0, lsl #18
    4818:	84050000 	strhi	r0, [r5], #-0
    481c:	0a000000 	beq	4824 <_start-0x37dc>
    4820:	00000d65 	andeq	r0, r0, r5, ror #26
    4824:	9f682701 	svcls	0x00682701
    4828:	00440000 	subeq	r0, r4, r0
    482c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4830:	00000366 	andeq	r0, r0, r6, ror #6
    4834:	00637014 	rsbeq	r7, r3, r4, lsl r0
    4838:	002c2701 	eoreq	r2, ip, r1, lsl #14
    483c:	20100000 	andscs	r0, r0, r0
    4840:	f8150000 			; <UNDEFINED> instruction: 0xf8150000
    4844:	76000001 	strvc	r0, [r0], -r1
    4848:	05000003 	streq	r0, [r0, #-3]
    484c:	00b07803 	adcseq	r7, r0, r3, lsl #16
    4850:	9f781300 	svcls	0x00781300
    4854:	056c0000 	strbeq	r0, [ip, #-0]!
    4858:	98110000 	ldmdals	r1, {}	; <UNPREDICTABLE>
    485c:	7300009f 	movwvc	r0, #159	; 0x9f
    4860:	5c000005 	stcpl	0, cr0, [r0], {5}
    4864:	12000003 	andne	r0, r0, #3
    4868:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    486c:	52011228 	andpl	r1, r1, #40, 4	; 0x80000002
    4870:	b0780305 	rsbslt	r0, r8, r5, lsl #6
    4874:	01120000 	tsteq	r2, r0
    4878:	10030551 	andne	r0, r3, r1, asr r5
    487c:	120000b1 	andne	r0, r0, #177	; 0xb1
    4880:	03055001 	movweq	r5, #20481	; 0x5001
    4884:	0000b0d4 	ldrdeq	fp, [r0], -r4
    4888:	047d0212 	ldrbteq	r0, [sp], #-530	; 0x212
    488c:	12007402 	andne	r7, r0, #33554432	; 0x2000000
    4890:	05007d02 	streq	r7, [r0, #-3330]	; 0xd02
    4894:	00b14803 	adcseq	r4, r1, r3, lsl #16
    4898:	9c130000 	ldcls	0, cr0, [r3], {-0}
    489c:	8900009f 	stmdbhi	r0, {r0, r1, r2, r3, r4, r7}
    48a0:	00000005 	andeq	r0, r0, r5
    48a4:	00007206 	andeq	r7, r0, r6, lsl #4
    48a8:	00037600 	andeq	r7, r3, r0, lsl #12
    48ac:	006b0700 	rsbeq	r0, fp, r0, lsl #14
    48b0:	000c0000 	andeq	r0, ip, r0
    48b4:	00036605 	andeq	r6, r3, r5, lsl #12
    48b8:	0d480a00 	vstreq	s1, [r8, #-0]
    48bc:	2a010000 	bcs	448c4 <__bss_end__+0x391a4>
    48c0:	00009fac 	andeq	r9, r0, ip, lsr #31
    48c4:	00000044 	andeq	r0, r0, r4, asr #32
    48c8:	04009c01 	streq	r9, [r0], #-3073	; 0xc01
    48cc:	70140000 	andsvc	r0, r4, r0
    48d0:	2a010063 	bcs	44a64 <__bss_end__+0x39344>
    48d4:	0000002c 	andeq	r0, r0, ip, lsr #32
    48d8:	0000202e 	andeq	r2, r0, lr, lsr #32
    48dc:	0001f815 	andeq	pc, r1, r5, lsl r8	; <UNPREDICTABLE>
    48e0:	00041000 	andeq	r1, r4, r0
    48e4:	88030500 	stmdahi	r3, {r8, sl}
    48e8:	130000b0 	movwne	r0, #176	; 0xb0
    48ec:	00009fbc 			; <UNDEFINED> instruction: 0x00009fbc
    48f0:	0000056c 	andeq	r0, r0, ip, ror #10
    48f4:	009fdc11 	addseq	sp, pc, r1, lsl ip	; <UNPREDICTABLE>
    48f8:	00057300 	andeq	r7, r5, r0, lsl #6
    48fc:	0003f600 	andeq	pc, r3, r0, lsl #12
    4900:	53011200 	movwpl	r1, #4608	; 0x1200
    4904:	122b0802 	eorne	r0, fp, #131072	; 0x20000
    4908:	03055201 	movweq	r5, #20993	; 0x5201
    490c:	0000b088 	andeq	fp, r0, r8, lsl #1
    4910:	05510112 	ldrbeq	r0, [r1, #-274]	; 0x112
    4914:	00b11003 	adcseq	r1, r1, r3
    4918:	50011200 	andpl	r1, r1, r0, lsl #4
    491c:	b0d40305 	sbcslt	r0, r4, r5, lsl #6
    4920:	02120000 	andseq	r0, r2, #0
    4924:	7402047d 	strvc	r0, [r2], #-1149	; 0x47d
    4928:	7d021200 	sfmvc	f1, 4, [r2, #-0]
    492c:	58030500 	stmdapl	r3, {r8, sl}
    4930:	000000b1 	strheq	r0, [r0], -r1
    4934:	009fe013 	addseq	lr, pc, r3, lsl r0	; <UNPREDICTABLE>
    4938:	00058900 	andeq	r8, r5, r0, lsl #18
    493c:	72060000 	andvc	r0, r6, #0
    4940:	10000000 	andne	r0, r0, r0
    4944:	07000004 	streq	r0, [r0, -r4]
    4948:	0000006b 	andeq	r0, r0, fp, rrx
    494c:	0005001c 	andeq	r0, r5, ip, lsl r0
    4950:	0a000004 	beq	4968 <_start-0x3698>
    4954:	00000cda 	ldrdeq	r0, [r0], -sl
    4958:	9ff02d01 	svcls	0x00f02d01
    495c:	00440000 	subeq	r0, r4, r0
    4960:	9c010000 	stcls	0, cr0, [r1], {-0}
    4964:	0000049a 	muleq	r0, sl, r4
    4968:	00637014 	rsbeq	r7, r3, r4, lsl r0
    496c:	002c2d01 	eoreq	r2, ip, r1, lsl #26
    4970:	204c0000 	subcs	r0, ip, r0
    4974:	f8150000 			; <UNDEFINED> instruction: 0xf8150000
    4978:	9a000001 	bls	4984 <_start-0x367c>
    497c:	05000004 	streq	r0, [r0, #-4]
    4980:	00b0a803 	adcseq	sl, r0, r3, lsl #16
    4984:	a0001300 	andge	r1, r0, r0, lsl #6
    4988:	056c0000 	strbeq	r0, [ip, #-0]!
    498c:	20110000 	andscs	r0, r1, r0
    4990:	730000a0 	movwvc	r0, #160	; 0xa0
    4994:	90000005 	andls	r0, r0, r5
    4998:	12000004 	andne	r0, r0, #4
    499c:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    49a0:	5201122e 	andpl	r1, r1, #-536870910	; 0xe0000002
    49a4:	b0a80305 	adclt	r0, r8, r5, lsl #6
    49a8:	01120000 	tsteq	r2, r0
    49ac:	10030551 	andne	r0, r3, r1, asr r5
    49b0:	120000b1 	andne	r0, r0, #177	; 0xb1
    49b4:	03055001 	movweq	r5, #20481	; 0x5001
    49b8:	0000b0d4 	ldrdeq	fp, [r0], -r4
    49bc:	047d0212 	ldrbteq	r0, [sp], #-530	; 0x212
    49c0:	12007402 	andne	r7, r0, #33554432	; 0x2000000
    49c4:	05007d02 	streq	r7, [r0, #-3330]	; 0xd02
    49c8:	00b17003 	adcseq	r7, r1, r3
    49cc:	24130000 	ldrcs	r0, [r3], #-0
    49d0:	890000a0 	stmdbhi	r0, {r5, r7}
    49d4:	00000005 	andeq	r0, r0, r5
    49d8:	00024205 	andeq	r4, r2, r5, lsl #4
    49dc:	0d160a00 	vldreq	s0, [r6, #-0]
    49e0:	30010000 	andcc	r0, r1, r0
    49e4:	0000a034 	andeq	sl, r0, r4, lsr r0
    49e8:	00000044 	andeq	r0, r0, r4, asr #32
    49ec:	05249c01 	streq	r9, [r4, #-3073]!	; 0xc01
    49f0:	70140000 	andsvc	r0, r4, r0
    49f4:	30010063 	andcc	r0, r1, r3, rrx
    49f8:	0000002c 	andeq	r0, r0, ip, lsr #32
    49fc:	0000206a 	andeq	r2, r0, sl, rrx
    4a00:	0001f815 	andeq	pc, r1, r5, lsl r8	; <UNPREDICTABLE>
    4a04:	00053400 	andeq	r3, r5, r0, lsl #8
    4a08:	c0030500 	andgt	r0, r3, r0, lsl #10
    4a0c:	130000b0 	movwne	r0, #176	; 0xb0
    4a10:	0000a044 	andeq	sl, r0, r4, asr #32
    4a14:	0000056c 	andeq	r0, r0, ip, ror #10
    4a18:	00a06411 	adceq	r6, r0, r1, lsl r4
    4a1c:	00057300 	andeq	r7, r5, r0, lsl #6
    4a20:	00051a00 	andeq	r1, r5, r0, lsl #20
    4a24:	53011200 	movwpl	r1, #4608	; 0x1200
    4a28:	12310802 	eorsne	r0, r1, #131072	; 0x20000
    4a2c:	03055201 	movweq	r5, #20993	; 0x5201
    4a30:	0000b0c0 	andeq	fp, r0, r0, asr #1
    4a34:	05510112 	ldrbeq	r0, [r1, #-274]	; 0x112
    4a38:	00b11003 	adcseq	r1, r1, r3
    4a3c:	50011200 	andpl	r1, r1, r0, lsl #4
    4a40:	b0d40305 	sbcslt	r0, r4, r5, lsl #6
    4a44:	02120000 	andseq	r0, r2, #0
    4a48:	7402047d 	strvc	r0, [r2], #-1149	; 0x47d
    4a4c:	7d021200 	sfmvc	f1, 4, [r2, #-0]
    4a50:	80030500 	andhi	r0, r3, r0, lsl #10
    4a54:	000000b1 	strheq	r0, [r0], -r1
    4a58:	00a06813 	adceq	r6, r0, r3, lsl r8
    4a5c:	00058900 	andeq	r8, r5, r0, lsl #18
    4a60:	72060000 	andvc	r0, r6, #0
    4a64:	34000000 	strcc	r0, [r0], #-0
    4a68:	07000005 	streq	r0, [r0, -r5]
    4a6c:	0000006b 	andeq	r0, r0, fp, rrx
    4a70:	24050011 	strcs	r0, [r5], #-17
    4a74:	0b000005 	bleq	4a90 <_start-0x3570>
    4a78:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    4a7c:	002c1101 	eoreq	r1, ip, r1, lsl #2
    4a80:	010b0000 	mrseq	r0, (UNDEF: 11)
    4a84:	0100000d 	tsteq	r0, sp
    4a88:	00002c12 	andeq	r2, r0, r2, lsl ip
    4a8c:	05561600 	ldrbeq	r1, [r6, #-1536]	; 0x600
    4a90:	9c020000 	stcls	0, cr0, [r2], {-0}
    4a94:	00000565 	andeq	r0, r0, r5, ror #10
    4a98:	00002c17 	andeq	r2, r0, r7, lsl ip
    4a9c:	002c1700 	eoreq	r1, ip, r0, lsl #14
    4aa0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    4aa4:	000003e3 	andeq	r0, r0, r3, ror #7
    4aa8:	f2188a02 	vpmax.s16	d8, d8, d2
    4aac:	02000002 	andeq	r0, r0, #2
    4ab0:	069c191e 			; <UNDEFINED> instruction: 0x069c191e
    4ab4:	29020000 	stmdbcs	r2, {}	; <UNPREDICTABLE>
    4ab8:	00000025 	andeq	r0, r0, r5, lsr #32
    4abc:	00000589 	andeq	r0, r0, r9, lsl #11
    4ac0:	00007917 	andeq	r7, r0, r7, lsl r9
    4ac4:	18001a00 	stmdane	r0, {r9, fp, ip}
    4ac8:	00000134 	andeq	r0, r0, r4, lsr r1
    4acc:	e4006602 	str	r6, [r0], #-1538	; 0x602
    4ad0:	04000002 	streq	r0, [r0], #-2
    4ad4:	0016f300 	andseq	pc, r6, r0, lsl #6
    4ad8:	64010400 	strvs	r0, [r1], #-1024	; 0x400
    4adc:	01000000 	mrseq	r0, (UNDEF: 0)
    4ae0:	00000dc4 	andeq	r0, r0, r4, asr #27
    4ae4:	00000638 	andeq	r0, r0, r8, lsr r6
    4ae8:	0000a078 	andeq	sl, r0, r8, ror r0
    4aec:	0000005c 	andeq	r0, r0, ip, asr r0
    4af0:	00001520 	andeq	r1, r0, r0, lsr #10
    4af4:	69050402 	stmdbvs	r5, {r1, sl}
    4af8:	0300746e 	movweq	r7, #1134	; 0x46e
    4afc:	02320704 	eorseq	r0, r2, #4, 14	; 0x100000
    4b00:	01030000 	mrseq	r0, (UNDEF: 3)
    4b04:	00010d06 	andeq	r0, r1, r6, lsl #26
    4b08:	05020300 	streq	r0, [r2, #-768]	; 0x300
    4b0c:	000002ae 	andeq	r0, r0, lr, lsr #5
    4b10:	7e050403 	cdpvc	4, 0, cr0, cr5, cr3, {0}
    4b14:	03000002 	movweq	r0, #2
    4b18:	02790508 	rsbseq	r0, r9, #8, 10	; 0x2000000
    4b1c:	01030000 	mrseq	r0, (UNDEF: 3)
    4b20:	00010b08 	andeq	r0, r1, r8, lsl #22
    4b24:	07020300 	streq	r0, [r2, -r0, lsl #6]
    4b28:	0000015e 	andeq	r0, r0, lr, asr r1
    4b2c:	0002cd04 	andeq	ip, r2, r4, lsl #26
    4b30:	68340300 	ldmdavs	r4!, {r8, r9}
    4b34:	03000000 	movweq	r0, #0
    4b38:	022d0704 	eoreq	r0, sp, #4, 14	; 0x100000
    4b3c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    4b40:	00022807 	andeq	r2, r2, r7, lsl #16
    4b44:	07040300 	streq	r0, [r4, -r0, lsl #6]
    4b48:	0000025e 	andeq	r0, r0, lr, asr r2
    4b4c:	14080103 	strne	r0, [r8], #-259	; 0x103
    4b50:	05000001 	streq	r0, [r0, #-1]
    4b54:	00008a04 	andeq	r8, r0, r4, lsl #20
    4b58:	007d0600 	rsbseq	r0, sp, r0, lsl #12
    4b5c:	04070000 	streq	r0, [r7], #-0
    4b60:	00f21e02 	rscseq	r1, r2, r2, lsl #28
    4b64:	fc080000 	stc2	0, cr0, [r8], {-0}
    4b68:	0200000d 	andeq	r0, r0, #13
    4b6c:	00005d21 	andeq	r5, r0, r1, lsr #26
    4b70:	1e010400 	cfcpysne	mvf0, mvf1
    4b74:	0e320800 	cdpeq	8, 3, cr0, cr2, cr0, {0}
    4b78:	22020000 	andcs	r0, r2, #0
    4b7c:	0000005d 	andeq	r0, r0, sp, asr r0
    4b80:	001c0204 	andseq	r0, ip, r4, lsl #4
    4b84:	000e0e08 	andeq	r0, lr, r8, lsl #28
    4b88:	5d270200 	sfmpl	f0, 4, [r7, #-0]
    4b8c:	04000000 	streq	r0, [r0], #-0
    4b90:	08001a01 	stmdaeq	r0, {r0, r9, fp, ip}
    4b94:	00000da2 	andeq	r0, r0, r2, lsr #27
    4b98:	005d2902 	subseq	r2, sp, r2, lsl #18
    4b9c:	01040000 	mrseq	r0, (UNDEF: 4)
    4ba0:	1a080018 	bne	204c08 <__bss_end__+0x1f94e8>
    4ba4:	0200000e 	andeq	r0, r0, #14
    4ba8:	00005d2b 	andeq	r5, r0, fp, lsr #26
    4bac:	16010400 	strne	r0, [r1], -r0, lsl #8
    4bb0:	0e2a0800 	cdpeq	8, 2, cr0, cr10, cr0, {0}
    4bb4:	2d020000 	stccs	0, cr0, [r2, #-0]
    4bb8:	0000005d 	andeq	r0, r0, sp, asr r0
    4bbc:	00090704 	andeq	r0, r9, r4, lsl #14
    4bc0:	0de70400 	cfstrdeq	mvd0, [r7]
    4bc4:	2f020000 	svccs	0x00020000
    4bc8:	0000008f 	andeq	r0, r0, pc, lsl #1
    4bcc:	33020409 	movwcc	r0, #9225	; 0x2409
    4bd0:	0000016a 	andeq	r0, r0, sl, ror #2
    4bd4:	0001850a 	andeq	r8, r1, sl, lsl #10
    4bd8:	82e88000 	rschi	r8, r8, #0
    4bdc:	e30a0280 	movw	r0, #41600	; 0xa280
    4be0:	80000002 	andhi	r0, r0, r2
    4be4:	028082e8 	addeq	r8, r0, #232, 4	; 0x8000000e
    4be8:	0002050a 	andeq	r0, r2, sl, lsl #10
    4bec:	82e88400 	rschi	r8, r8, #0, 8
    4bf0:	670a0280 	strvs	r0, [sl, -r0, lsl #5]
    4bf4:	88000002 	stmdahi	r0, {r1}
    4bf8:	028082e8 	addeq	r8, r0, #232, 4	; 0x8000000e
    4bfc:	0002150a 	andeq	r1, r2, sl, lsl #10
    4c00:	82e88c00 	rschi	r8, r8, #0, 24
    4c04:	e70a0280 	str	r0, [sl, -r0, lsl #5]
    4c08:	90000001 	andls	r0, r0, r1
    4c0c:	028082e8 	addeq	r8, r0, #232, 4	; 0x8000000e
    4c10:	0000c30a 	andeq	ip, r0, sl, lsl #6
    4c14:	82e89400 	rschi	r9, r8, #0, 8
    4c18:	010a0280 	smlabbeq	sl, r0, r2, r0
    4c1c:	98000003 	stmdals	r0, {r0, r1}
    4c20:	028082e8 	addeq	r8, r0, #232, 4	; 0x8000000e
    4c24:	0002b80a 	andeq	fp, r2, sl, lsl #16
    4c28:	82e89c00 	rschi	r9, r8, #0, 24
    4c2c:	410a0280 	smlabbmi	sl, r0, r2, r0
    4c30:	a0000001 	andge	r0, r0, r1
    4c34:	028082e8 	addeq	r8, r0, #232, 4	; 0x8000000e
    4c38:	04040900 	streq	r0, [r4], #-2304	; 0x900
    4c3c:	0001e114 	andeq	lr, r1, r4, lsl r1
    4c40:	039d0a00 	orrseq	r0, sp, #0, 20
    4c44:	e4800000 	str	r0, [r0], #0
    4c48:	0a028082 	beq	a4e58 <__bss_end__+0x99738>
    4c4c:	000004c3 	andeq	r0, r0, r3, asr #9
    4c50:	8082e480 	addhi	lr, r2, r0, lsl #9
    4c54:	03ac0a02 			; <UNDEFINED> instruction: 0x03ac0a02
    4c58:	e4840000 	str	r0, [r4], #0
    4c5c:	0a028082 	beq	a4e6c <__bss_end__+0x9974c>
    4c60:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    4c64:	8082e488 	addhi	lr, r2, r8, lsl #9
    4c68:	05110a02 	ldreq	r0, [r1, #-2562]	; 0xa02
    4c6c:	e48c0000 	str	r0, [ip], #0
    4c70:	0a028082 	beq	a4e80 <__bss_end__+0x99760>
    4c74:	000003ef 	andeq	r0, r0, pc, ror #7
    4c78:	8082e490 	umullhi	lr, r2, r0, r4
    4c7c:	03fd0a02 	mvnseq	r0, #8192	; 0x2000
    4c80:	e4940000 	ldr	r0, [r4], #0
    4c84:	0a028082 	beq	a4e94 <__bss_end__+0x99774>
    4c88:	000004d5 	ldrdeq	r0, [r0], -r5
    4c8c:	8082e498 	umullhi	lr, r2, r8, r4
    4c90:	03340a02 	teqeq	r4, #8192	; 0x2000
    4c94:	e49c0000 	ldr	r0, [ip], #0
    4c98:	0a028082 	beq	a4ea8 <__bss_end__+0x99788>
    4c9c:	00000343 	andeq	r0, r0, r3, asr #6
    4ca0:	8082e4a0 	addhi	lr, r2, r0, lsr #9
    4ca4:	03c80a02 	biceq	r0, r8, #8192	; 0x2000
    4ca8:	e4a40000 	strt	r0, [r4], #0
    4cac:	00028082 	andeq	r8, r2, r2, lsl #1
    4cb0:	000db00b 	andeq	fp, sp, fp
    4cb4:	783f0100 	ldmdavc	pc!, {r8}	; <UNPREDICTABLE>
    4cb8:	1c0000a0 	stcne	0, cr0, [r0], {160}	; 0xa0
    4cbc:	01000000 	mrseq	r0, (UNDEF: 0)
    4cc0:	0002199c 	muleq	r2, ip, r9
    4cc4:	01f80c00 	mvnseq	r0, r0, lsl #24
    4cc8:	02290000 	eoreq	r0, r9, #0
    4ccc:	03050000 	movweq	r0, #20480	; 0x5000
    4cd0:	0000b18c 	andeq	fp, r0, ip, lsl #3
    4cd4:	00a0880d 	adceq	r8, r0, sp, lsl #16
    4cd8:	0002bf00 	andeq	fp, r2, r0, lsl #30
    4cdc:	50010e00 	andpl	r0, r1, r0, lsl #28
    4ce0:	b2c00305 	sbclt	r0, r0, #335544320	; 0x14000000
    4ce4:	00000000 	andeq	r0, r0, r0
    4ce8:	00007d0f 	andeq	r7, r0, pc, lsl #26
    4cec:	00022900 	andeq	r2, r2, r0, lsl #18
    4cf0:	00761000 	rsbseq	r1, r6, r0
    4cf4:	00130000 	andseq	r0, r3, r0
    4cf8:	00021906 	andeq	r1, r2, r6, lsl #18
    4cfc:	03781100 	cmneq	r8, #0, 2
    4d00:	11010000 	mrsne	r0, (UNDEF: 1)
    4d04:	0000a094 	muleq	r0, r4, r0
    4d08:	00000040 	andeq	r0, r0, r0, asr #32
    4d0c:	02ae9c01 	adceq	r9, lr, #256	; 0x100
    4d10:	61120000 	tstvs	r2, r0
    4d14:	0100000a 	tsteq	r0, sl
    4d18:	00002c11 	andeq	r2, r0, r1, lsl ip
    4d1c:	00208800 	eoreq	r8, r0, r0, lsl #16
    4d20:	a0a01300 	adcge	r1, r0, r0, lsl #6
    4d24:	01e10000 	mvneq	r0, r0
    4d28:	ac140000 	ldcge	0, cr0, [r4], {-0}
    4d2c:	d50000a0 	strle	r0, [r0, #-160]	; 0xa0
    4d30:	77000002 	strvc	r0, [r0, -r2]
    4d34:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    4d38:	31015101 	tstcc	r1, r1, lsl #2
    4d3c:	0550010e 	ldrbeq	r0, [r0, #-270]	; 0x10e
    4d40:	00b2180c 	adcseq	r1, r2, ip, lsl #16
    4d44:	b8140020 	ldmdalt	r4, {r5}
    4d48:	d50000a0 	strle	r0, [r0, #-160]	; 0xa0
    4d4c:	94000002 	strls	r0, [r0], #-2
    4d50:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    4d54:	74025101 	strvc	r5, [r2], #-257	; 0x101
    4d58:	50010e00 	andpl	r0, r1, r0, lsl #28
    4d5c:	b4000c05 	strlt	r0, [r0], #-3077	; 0xc05
    4d60:	0d002000 	stceq	0, cr2, [r0, #-0]
    4d64:	0000a0c4 	andeq	sl, r0, r4, asr #1
    4d68:	000002d5 	ldrdeq	r0, [r0], -r5
    4d6c:	0251010e 	subseq	r0, r1, #-2147483645	; 0x80000003
    4d70:	010ea608 	tsteq	lr, r8, lsl #12
    4d74:	080c0550 	stmdaeq	ip, {r4, r6, r8, sl}
    4d78:	002000b4 	strhteq	r0, [r0], -r4
    4d7c:	003c1500 	eorseq	r1, ip, r0, lsl #10
    4d80:	80020000 	andhi	r0, r2, r0
    4d84:	000000fd 	strdeq	r0, [r0], -sp
    4d88:	b7180305 	ldrlt	r0, [r8, -r5, lsl #6]
    4d8c:	9c160000 	ldcls	0, cr0, [r6], {-0}
    4d90:	05000006 	streq	r0, [r0, #-6]
    4d94:	00002529 	andeq	r2, r0, r9, lsr #10
    4d98:	0002d500 	andeq	sp, r2, r0, lsl #10
    4d9c:	00841700 	addeq	r1, r4, r0, lsl #14
    4da0:	00180000 	andseq	r0, r8, r0
    4da4:	00055619 	andeq	r5, r5, r9, lsl r6
    4da8:	179c0500 	ldrne	r0, [ip, r0, lsl #10]
    4dac:	0000002c 	andeq	r0, r0, ip, lsr #32
    4db0:	00002c17 	andeq	r2, r0, r7, lsl ip
    4db4:	21000000 	mrscs	r0, (UNDEF: 0)
    4db8:	04000008 	streq	r0, [r0], #-8
    4dbc:	00184400 	andseq	r4, r8, r0, lsl #8
    4dc0:	64010400 	strvs	r0, [r1], #-1024	; 0x400
    4dc4:	01000000 	mrseq	r0, (UNDEF: 0)
    4dc8:	00000e86 	andeq	r0, r0, r6, lsl #29
    4dcc:	00000638 	andeq	r0, r0, r8, lsr r6
    4dd0:	0000a210 	andeq	sl, r0, r0, lsl r2
    4dd4:	00000568 	andeq	r0, r0, r8, ror #10
    4dd8:	00001651 	andeq	r1, r0, r1, asr r6
    4ddc:	28070802 	stmdacs	r7, {r1, fp}
    4de0:	02000002 	andeq	r0, r0, #2
    4de4:	02320704 	eorseq	r0, r2, #4, 14	; 0x100000
    4de8:	01020000 	mrseq	r0, (UNDEF: 2)
    4dec:	00010d06 	andeq	r0, r1, r6, lsl #26
    4df0:	05020200 	streq	r0, [r2, #-512]	; 0x200
    4df4:	000002ae 	andeq	r0, r0, lr, lsr #5
    4df8:	7e050402 	cdpvc	4, 0, cr0, cr5, cr2, {0}
    4dfc:	02000002 	andeq	r0, r0, #2
    4e00:	02790508 	rsbseq	r0, r9, #8, 10	; 0x2000000
    4e04:	01020000 	mrseq	r0, (UNDEF: 2)
    4e08:	00010b08 	andeq	r0, r1, r8, lsl #22
    4e0c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    4e10:	0000015e 	andeq	r0, r0, lr, asr r1
    4e14:	2d070402 	cfstrscs	mvf0, [r7, #-8]
    4e18:	03000002 	movweq	r0, #2
    4e1c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    4e20:	04020074 	streq	r0, [r2], #-116	; 0x74
    4e24:	00025e07 	andeq	r5, r2, r7, lsl #28
    4e28:	08010200 	stmdaeq	r1, {r9}
    4e2c:	00000114 	andeq	r0, r0, r4, lsl r1
    4e30:	0c020104 	stfeqs	f0, [r2], {4}
    4e34:	000000b2 	strheq	r0, [r0], -r2
    4e38:	000ca505 	andeq	sl, ip, r5, lsl #10
    4e3c:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    4e40:	0100000b 	tsteq	r0, fp
    4e44:	000b5e05 	andeq	r5, fp, r5, lsl #28
    4e48:	aa050400 	bge	145e50 <__bss_end__+0x13a730>
    4e4c:	0500000b 	streq	r0, [r0, #-11]
    4e50:	000bb905 	andeq	fp, fp, r5, lsl #18
    4e54:	c8050600 	stmdagt	r5, {r9, sl}
    4e58:	0700000b 	streq	r0, [r0, -fp]
    4e5c:	000c5805 	andeq	r5, ip, r5, lsl #16
    4e60:	d7050300 	strle	r0, [r5, -r0, lsl #6]
    4e64:	0200000b 	andeq	r0, r0, #11
    4e68:	0c0a0600 	stceq	6, cr0, [sl], {-0}
    4e6c:	15020000 	strne	r0, [r2, #-0]
    4e70:	00000079 	andeq	r0, r0, r9, ror r0
    4e74:	000b1207 	andeq	r1, fp, r7, lsl #4
    4e78:	103f0100 	eorsne	r0, pc, r0, lsl #2
    4e7c:	d40000a2 	strle	r0, [r0], #-162	; 0xa2
    4e80:	01000000 	mrseq	r0, (UNDEF: 0)
    4e84:	0001339c 	muleq	r1, ip, r3
    4e88:	69700800 	ldmdbvs	r0!, {fp}^
    4e8c:	3f01006e 	svccc	0x0001006e
    4e90:	0000002c 	andeq	r0, r0, ip, lsr #32
    4e94:	000020a6 	andeq	r2, r0, r6, lsr #1
    4e98:	000ec209 	andeq	ip, lr, r9, lsl #4
    4e9c:	33470100 	movtcc	r0, #28928	; 0x7100
    4ea0:	c4000001 	strgt	r0, [r0], #-1
    4ea4:	09000020 	stmdbeq	r0, {r5}
    4ea8:	00000faa 	andeq	r0, r0, sl, lsr #31
    4eac:	002c4901 	eoreq	r4, ip, r1, lsl #18
    4eb0:	21190000 	tstcs	r9, r0
    4eb4:	55090000 	strpl	r0, [r9, #-0]
    4eb8:	0100000f 	tsteq	r0, pc
    4ebc:	00002c57 	andeq	r2, r0, r7, asr ip
    4ec0:	0022e500 	eoreq	lr, r2, r0, lsl #10
    4ec4:	a2a40a00 	adcge	r0, r4, #0, 20
    4ec8:	07e00000 	strbeq	r0, [r0, r0]!
    4ecc:	01220000 	teqeq	r2, r0
    4ed0:	010b0000 	mrseq	r0, (UNDEF: 11)
    4ed4:	00750250 	rsbseq	r0, r5, r0, asr r2
    4ed8:	a2d80c00 	sbcsge	r0, r8, #0, 24
    4edc:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    4ee0:	010b0000 	mrseq	r0, (UNDEF: 11)
    4ee4:	00750250 	rsbseq	r0, r5, r0, asr r2
    4ee8:	040d0000 	streq	r0, [sp], #-0
    4eec:	00000139 	andeq	r0, r0, r9, lsr r1
    4ef0:	00002c0e 	andeq	r2, r0, lr, lsl #24
    4ef4:	0f7a0700 	svceq	0x007a0700
    4ef8:	60010000 	andvs	r0, r1, r0
    4efc:	0000a2e4 	andeq	sl, r0, r4, ror #5
    4f00:	00000038 	andeq	r0, r0, r8, lsr r0
    4f04:	01969c01 	orrseq	r9, r6, r1, lsl #24
    4f08:	70080000 	andvc	r0, r8, r0
    4f0c:	01006e69 	tsteq	r0, r9, ror #28
    4f10:	00002c60 	andeq	r2, r0, r0, ror #24
    4f14:	00231500 	eoreq	r1, r3, r0, lsl #10
    4f18:	0ec20900 	cdpeq	9, 12, cr0, cr2, cr0, {0}
    4f1c:	67010000 	strvs	r0, [r1, -r0]
    4f20:	00000133 	andeq	r0, r0, r3, lsr r1
    4f24:	00002336 	andeq	r2, r0, r6, lsr r3
    4f28:	000f5509 	andeq	r5, pc, r9, lsl #10
    4f2c:	2c680100 	stfcse	f0, [r8], #-0
    4f30:	6c000000 	stcvs	0, cr0, [r0], {-0}
    4f34:	0c000023 	stceq	0, cr0, [r0], {35}	; 0x23
    4f38:	0000a314 	andeq	sl, r0, r4, lsl r3
    4f3c:	00000801 	andeq	r0, r0, r1, lsl #16
    4f40:	0751010b 	ldrbeq	r0, [r1, -fp, lsl #2]
    4f44:	5001f331 	andpl	pc, r1, r1, lsr r3	; <UNPREDICTABLE>
    4f48:	00241a4f 	eoreq	r1, r4, pc, asr #20
    4f4c:	0e790700 	cdpeq	7, 7, cr0, cr9, cr0, {0}
    4f50:	7b010000 	blvc	44f58 <__bss_end__+0x39838>
    4f54:	0000a31c 	andeq	sl, r0, ip, lsl r3
    4f58:	00000038 	andeq	r0, r0, r8, lsr r0
    4f5c:	01ee9c01 	mvneq	r9, r1, lsl #24
    4f60:	70080000 	andvc	r0, r8, r0
    4f64:	01006e69 	tsteq	r0, r9, ror #28
    4f68:	00002c7b 	andeq	r2, r0, fp, ror ip
    4f6c:	0023ac00 	eoreq	sl, r3, r0, lsl #24
    4f70:	0ec20900 	cdpeq	9, 12, cr0, cr2, cr0, {0}
    4f74:	81010000 	mrshi	r0, (UNDEF: 1)
    4f78:	00000133 	andeq	r0, r0, r3, lsr r1
    4f7c:	000023cd 	andeq	r2, r0, sp, asr #7
    4f80:	000f5509 	andeq	r5, pc, r9, lsl #10
    4f84:	2c820100 	stfcss	f0, [r2], {0}
    4f88:	03000000 	movweq	r0, #0
    4f8c:	0c000024 	stceq	0, cr0, [r0], {36}	; 0x24
    4f90:	0000a34c 	andeq	sl, r0, ip, asr #6
    4f94:	00000801 	andeq	r0, r0, r1, lsl #16
    4f98:	0751010b 	ldrbeq	r0, [r1, -fp, lsl #2]
    4f9c:	5001f331 	andpl	pc, r1, r1, lsr r3	; <UNPREDICTABLE>
    4fa0:	00241a4f 	eoreq	r1, r4, pc, asr #20
    4fa4:	0aec0700 	beq	ffb06bac <__bss_end__+0xffafb48c>
    4fa8:	95010000 	strls	r0, [r1, #-0]
    4fac:	0000a354 	andeq	sl, r0, r4, asr r3
    4fb0:	000000cc 	andeq	r0, r0, ip, asr #1
    4fb4:	02649c01 	rsbeq	r9, r4, #256	; 0x100
    4fb8:	70080000 	andvc	r0, r8, r0
    4fbc:	01006e69 	tsteq	r0, r9, ror #28
    4fc0:	00002c95 	muleq	r0, r5, ip
    4fc4:	00244300 	eoreq	r4, r4, r0, lsl #6
    4fc8:	0ec20900 	cdpeq	9, 12, cr0, cr2, cr0, {0}
    4fcc:	9b010000 	blls	44fd4 <__bss_end__+0x398b4>
    4fd0:	00000133 	andeq	r0, r0, r3, lsr r1
    4fd4:	00002461 	andeq	r2, r0, r1, ror #8
    4fd8:	000faa09 	andeq	sl, pc, r9, lsl #20
    4fdc:	2c9d0100 	ldfcss	f0, [sp], {0}
    4fe0:	b6000000 	strlt	r0, [r0], -r0
    4fe4:	09000024 	stmdbeq	r0, {r2, r5}
    4fe8:	00000f55 	andeq	r0, r0, r5, asr pc
    4fec:	002cab01 	eoreq	sl, ip, r1, lsl #22
    4ff0:	26820000 	strcs	r0, [r2], r0
    4ff4:	e80a0000 	stmda	sl, {}	; <UNPREDICTABLE>
    4ff8:	e00000a3 	and	r0, r0, r3, lsr #1
    4ffc:	53000007 	movwpl	r0, #7
    5000:	0b000002 	bleq	5010 <_start-0x2ff0>
    5004:	75025001 	strvc	r5, [r2, #-1]
    5008:	140c0000 	strne	r0, [ip], #-0
    500c:	010000a4 	smlatbeq	r0, r4, r0, r0
    5010:	0b000008 	bleq	5038 <_start-0x2fc8>
    5014:	75025001 	strvc	r5, [r2, #-1]
    5018:	0f000000 	svceq	0x00000000
    501c:	00000a97 	muleq	r0, r7, sl
    5020:	0064b301 	rsbeq	fp, r4, r1, lsl #6
    5024:	a4200000 	strtge	r0, [r0], #-0
    5028:	004c0000 	subeq	r0, ip, r0
    502c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5030:	000002ac 	andeq	r0, r0, ip, lsr #5
    5034:	6e697008 	cdpvs	0, 6, cr7, cr9, cr8, {0}
    5038:	2cb30100 	ldfcss	f0, [r3]
    503c:	a0000000 	andge	r0, r0, r0
    5040:	10000026 	andne	r0, r0, r6, lsr #32
    5044:	b9010076 	stmdblt	r1, {r1, r2, r4, r5, r6}
    5048:	0000002c 	andeq	r0, r0, ip, lsr #32
    504c:	000026f8 	strdeq	r2, [r0], -r8
    5050:	00a44011 	adceq	r4, r4, r1, lsl r0
    5054:	0007e000 	andeq	lr, r7, r0
    5058:	a4501100 	ldrbge	r1, [r0], #-256	; 0x100
    505c:	07e00000 	strbeq	r0, [r0, r0]!
    5060:	07000000 	streq	r0, [r0, -r0]
    5064:	00000ad4 	ldrdeq	r0, [r0], -r4
    5068:	a46cc501 	strbtge	ip, [ip], #-1281	; 0x501
    506c:	00240000 	eoreq	r0, r4, r0
    5070:	9c010000 	stcls	0, cr0, [r1], {-0}
    5074:	000002fc 	strdeq	r0, [r0], -ip
    5078:	6e697008 	cdpvs	0, 6, cr7, cr9, cr8, {0}
    507c:	2cc50100 	stfcse	f0, [r5], {0}
    5080:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    5084:	08000027 	stmdaeq	r0, {r0, r1, r2, r5}
    5088:	c5010076 	strgt	r0, [r1, #-118]	; 0x76
    508c:	0000002c 	andeq	r0, r0, ip, lsr #32
    5090:	00002768 	andeq	r2, r0, r8, ror #14
    5094:	00a4840a 	adceq	r8, r4, sl, lsl #8
    5098:	00013e00 	andeq	r3, r1, r0, lsl #28
    509c:	0002f200 	andeq	pc, r2, r0, lsl #4
    50a0:	50010b00 	andpl	r0, r1, r0, lsl #22
    50a4:	5001f303 	andpl	pc, r1, r3, lsl #6
    50a8:	a48c1100 	strge	r1, [ip], #256	; 0x100
    50ac:	01960000 	orrseq	r0, r6, r0
    50b0:	07000000 	streq	r0, [r0, -r0]
    50b4:	00000c67 	andeq	r0, r0, r7, ror #24
    50b8:	a490d101 	ldrge	sp, [r0], #257	; 0x101
    50bc:	00d80000 	sbcseq	r0, r8, r0
    50c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    50c4:	00000381 	andeq	r0, r0, r1, lsl #7
    50c8:	6e697008 	cdpvs	0, 6, cr7, cr9, cr8, {0}
    50cc:	2cd10100 	ldfcse	f0, [r1], {0}
    50d0:	a2000000 	andge	r0, r0, #0
    50d4:	12000027 	andne	r0, r0, #39	; 0x27
    50d8:	00000f67 	andeq	r0, r0, r7, ror #30
    50dc:	00b2d101 	adcseq	sp, r2, r1, lsl #2
    50e0:	27c00000 	strbcs	r0, [r0, r0]
    50e4:	c2090000 	andgt	r0, r9, #0
    50e8:	0100000e 	tsteq	r0, lr
    50ec:	000133d9 	ldrdeq	r3, [r1], -r9
    50f0:	0027e100 	eoreq	lr, r7, r0, lsl #2
    50f4:	0faa0900 	svceq	0x00aa0900
    50f8:	da010000 	ble	45100 <__bss_end__+0x399e0>
    50fc:	0000002c 	andeq	r0, r0, ip, lsr #32
    5100:	00002836 	andeq	r2, r0, r6, lsr r8
    5104:	000f5509 	andeq	r5, pc, r9, lsl #10
    5108:	2ce80100 	stfcse	f0, [r8]
    510c:	02000000 	andeq	r0, r0, #0
    5110:	0a00002a 	beq	51c0 <_start-0x2e40>
    5114:	0000a52c 	andeq	sl, r0, ip, lsr #10
    5118:	000007e0 	andeq	r0, r0, r0, ror #15
    511c:	00000370 	andeq	r0, r0, r0, ror r3
    5120:	0250010b 	subseq	r0, r0, #-1073741822	; 0xc0000002
    5124:	0c000076 	stceq	0, cr0, [r0], {118}	; 0x76
    5128:	0000a55c 	andeq	sl, r0, ip, asr r5
    512c:	00000801 	andeq	r0, r0, r1, lsl #16
    5130:	0250010b 	subseq	r0, r0, #-1073741822	; 0xc0000002
    5134:	00000076 	andeq	r0, r0, r6, ror r0
    5138:	000e6d13 	andeq	r6, lr, r3, lsl sp
    513c:	01050100 	mrseq	r0, (UNDEF: 21)
    5140:	00000064 	andeq	r0, r0, r4, rrx
    5144:	0000a568 	andeq	sl, r0, r8, ror #10
    5148:	0000002c 	andeq	r0, r0, ip, lsr #32
    514c:	03b59c01 			; <UNDEFINED> instruction: 0x03b59c01
    5150:	70140000 	andsvc	r0, r4, r0
    5154:	0100000e 	tsteq	r0, lr
    5158:	002c0105 	eoreq	r0, ip, r5, lsl #2
    515c:	2a330000 	bcs	cc5164 <__bss_end__+0xcb9a44>
    5160:	78110000 	ldmdavc	r1, {}	; <UNPREDICTABLE>
    5164:	e00000a5 	and	r0, r0, r5, lsr #1
    5168:	00000007 	andeq	r0, r0, r7
    516c:	000f0515 	andeq	r0, pc, r5, lsl r5	; <UNPREDICTABLE>
    5170:	01140100 	tsteq	r4, r0, lsl #2
    5174:	0000a594 	muleq	r0, r4, r5
    5178:	00000084 	andeq	r0, r0, r4, lsl #1
    517c:	04799c01 	ldrbteq	r9, [r9], #-3073	; 0xc01
    5180:	70160000 	andsvc	r0, r6, r0
    5184:	01006e69 	tsteq	r0, r9, ror #28
    5188:	002c0114 	eoreq	r0, ip, r4, lsl r1
    518c:	2a540000 	bcs	1505194 <__bss_end__+0x14f9a74>
    5190:	94170000 	ldrls	r0, [r7], #-0
    5194:	0100000e 	tsteq	r0, lr
    5198:	002c0126 	eoreq	r0, ip, r6, lsr #2
    519c:	2a800000 	bcs	fe0051a4 <__bss_end__+0xfdff9a84>
    51a0:	b0180000 	andslt	r0, r8, r0
    51a4:	1c0000a5 	stcne	0, cr0, [r0], {165}	; 0xa5
    51a8:	1b000000 	blne	51b0 <_start-0x2e50>
    51ac:	17000004 	strne	r0, [r0, -r4]
    51b0:	00000f55 	andeq	r0, r0, r5, asr pc
    51b4:	2c011d01 	stccs	13, cr1, [r1], {1}
    51b8:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    51bc:	1100002a 	tstne	r0, sl, lsr #32
    51c0:	0000a5bc 			; <UNDEFINED> instruction: 0x0000a5bc
    51c4:	000007e0 	andeq	r0, r0, r0, ror #15
    51c8:	00a5cc11 	adceq	ip, r5, r1, lsl ip
    51cc:	00080100 	andeq	r0, r8, r0, lsl #2
    51d0:	d0180000 	andsle	r0, r8, r0
    51d4:	200000a5 	andcs	r0, r0, r5, lsr #1
    51d8:	4b000000 	blmi	51e0 <_start-0x2e20>
    51dc:	17000004 	strne	r0, [r0, -r4]
    51e0:	00000f55 	andeq	r0, r0, r5, asr pc
    51e4:	2c012101 	stfcss	f2, [r1], {1}
    51e8:	bc000000 	stclt	0, cr0, [r0], {-0}
    51ec:	1100002a 	tstne	r0, sl, lsr #32
    51f0:	0000a5dc 	ldrdeq	sl, [r0], -ip
    51f4:	000007e0 	andeq	r0, r0, r0, ror #15
    51f8:	00a5f011 	adceq	pc, r5, r1, lsl r0	; <UNPREDICTABLE>
    51fc:	00080100 	andeq	r0, r8, r0, lsl #2
    5200:	a8110000 	ldmdage	r1, {}	; <UNPREDICTABLE>
    5204:	1d0000a5 	stcne	0, cr0, [r0, #-660]	; 0xfffffd6c
    5208:	11000008 	tstne	r0, r8
    520c:	0000a5f4 	strdeq	sl, [r0], -r4
    5210:	0000081d 	andeq	r0, r0, sp, lsl r8
    5214:	00a60011 	adceq	r0, r6, r1, lsl r0
    5218:	0007e000 	andeq	lr, r7, r0
    521c:	a60c1100 	strge	r1, [ip], -r0, lsl #2
    5220:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    5224:	10110000 	andsne	r0, r1, r0
    5228:	1d0000a6 	stcne	0, cr0, [r0, #-664]	; 0xfffffd68
    522c:	00000008 	andeq	r0, r0, r8
    5230:	000f9415 	andeq	r9, pc, r5, lsl r4	; <UNPREDICTABLE>
    5234:	01310100 	teqeq	r1, r0, lsl #2
    5238:	0000a618 	andeq	sl, r0, r8, lsl r6
    523c:	00000084 	andeq	r0, r0, r4, lsl #1
    5240:	053d9c01 	ldreq	r9, [sp, #-3073]!	; 0xc01
    5244:	70160000 	andsvc	r0, r6, r0
    5248:	01006e69 	tsteq	r0, r9, ror #28
    524c:	002c0131 	eoreq	r0, ip, r1, lsr r1
    5250:	2ada0000 	bcs	ff685258 <__bss_end__+0xff679b38>
    5254:	94170000 	ldrls	r0, [r7], #-0
    5258:	0100000e 	tsteq	r0, lr
    525c:	002c0142 	eoreq	r0, ip, r2, asr #2
    5260:	2b060000 	blcs	185268 <__bss_end__+0x179b48>
    5264:	34180000 	ldrcc	r0, [r8], #-0
    5268:	1c0000a6 	stcne	0, cr0, [r0], {166}	; 0xa6
    526c:	df000000 	svcle	0x00000000
    5270:	17000004 	strne	r0, [r0, -r4]
    5274:	00000f55 	andeq	r0, r0, r5, asr pc
    5278:	2c013901 	stccs	9, cr3, [r1], {1}
    527c:	24000000 	strcs	r0, [r0], #-0
    5280:	1100002b 	tstne	r0, fp, lsr #32
    5284:	0000a640 	andeq	sl, r0, r0, asr #12
    5288:	000007e0 	andeq	r0, r0, r0, ror #15
    528c:	00a65011 	adceq	r5, r6, r1, lsl r0
    5290:	00080100 	andeq	r0, r8, r0, lsl #2
    5294:	54180000 	ldrpl	r0, [r8], #-0
    5298:	200000a6 	andcs	r0, r0, r6, lsr #1
    529c:	0f000000 	svceq	0x00000000
    52a0:	17000005 	strne	r0, [r0, -r5]
    52a4:	00000f55 	andeq	r0, r0, r5, asr pc
    52a8:	2c013d01 	stccs	13, cr3, [r1], {1}
    52ac:	42000000 	andmi	r0, r0, #0
    52b0:	1100002b 	tstne	r0, fp, lsr #32
    52b4:	0000a660 	andeq	sl, r0, r0, ror #12
    52b8:	000007e0 	andeq	r0, r0, r0, ror #15
    52bc:	00a67411 	adceq	r7, r6, r1, lsl r4
    52c0:	00080100 	andeq	r0, r8, r0, lsl #2
    52c4:	2c110000 	ldccs	0, cr0, [r1], {-0}
    52c8:	1d0000a6 	stcne	0, cr0, [r0, #-664]	; 0xfffffd68
    52cc:	11000008 	tstne	r0, r8
    52d0:	0000a678 	andeq	sl, r0, r8, ror r6
    52d4:	0000081d 	andeq	r0, r0, sp, lsl r8
    52d8:	00a68411 	adceq	r8, r6, r1, lsl r4
    52dc:	0007e000 	andeq	lr, r7, r0
    52e0:	a6901100 	ldrge	r1, [r0], r0, lsl #2
    52e4:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    52e8:	94110000 	ldrls	r0, [r1], #-0
    52ec:	1d0000a6 	stcne	0, cr0, [r0, #-664]	; 0xfffffd68
    52f0:	00000008 	andeq	r0, r0, r8
    52f4:	000e3c13 	andeq	r3, lr, r3, lsl ip
    52f8:	014c0100 	mrseq	r0, (UNDEF: 92)
    52fc:	00000064 	andeq	r0, r0, r4, rrx
    5300:	0000a69c 	muleq	r0, ip, r6
    5304:	00000084 	andeq	r0, r0, r4, lsl #1
    5308:	05e39c01 	strbeq	r9, [r3, #3073]!	; 0xc01
    530c:	70160000 	andsvc	r0, r6, r0
    5310:	01006e69 	tsteq	r0, r9, ror #28
    5314:	002c014c 	eoreq	r0, ip, ip, asr #2
    5318:	2b600000 	blcs	1805320 <__bss_end__+0x17f9c00>
    531c:	b8180000 	ldmdalt	r8, {}	; <UNPREDICTABLE>
    5320:	240000a6 	strcs	r0, [r0], #-166	; 0xa6
    5324:	97000000 	strls	r0, [r0, -r0]
    5328:	17000005 	strne	r0, [r0, -r5]
    532c:	00000eab 	andeq	r0, r0, fp, lsr #29
    5330:	2c015301 	stccs	3, cr5, [r1], {1}
    5334:	a2000000 	andge	r0, r0, #0
    5338:	1100002b 	tstne	r0, fp, lsr #32
    533c:	0000a6c4 	andeq	sl, r0, r4, asr #13
    5340:	000007e0 	andeq	r0, r0, r0, ror #15
    5344:	00a6d411 	adceq	sp, r6, r1, lsl r4
    5348:	00081d00 	andeq	r1, r8, r0, lsl #26
    534c:	dc180000 	ldcle	0, cr0, [r8], {-0}
    5350:	2c0000a6 	stccs	0, cr0, [r0], {166}	; 0xa6
    5354:	d0000000 	andle	r0, r0, r0
    5358:	17000005 	strne	r0, [r0, -r5]
    535c:	00000eab 	andeq	r0, r0, fp, lsr #29
    5360:	2c015601 	stccs	6, cr5, [r1], {1}
    5364:	bc000000 	stclt	0, cr0, [r0], {-0}
    5368:	1100002b 	tstne	r0, fp, lsr #32
    536c:	0000a6e8 	andeq	sl, r0, r8, ror #13
    5370:	000007e0 	andeq	r0, r0, r0, ror #15
    5374:	00a6f411 	adceq	pc, r6, r1, lsl r4	; <UNPREDICTABLE>
    5378:	00081d00 	andeq	r1, r8, r0, lsl #26
    537c:	a7001100 	strge	r1, [r0, -r0, lsl #2]
    5380:	081d0000 	ldmdaeq	sp, {}	; <UNPREDICTABLE>
    5384:	11000000 	mrsne	r0, (UNDEF: 0)
    5388:	0000a6b0 			; <UNDEFINED> instruction: 0x0000a6b0
    538c:	0000081d 	andeq	r0, r0, sp, lsl r8
    5390:	00a70c11 	adceq	r0, r7, r1, lsl ip
    5394:	00081d00 	andeq	r1, r8, r0, lsl #26
    5398:	28150000 	ldmdacs	r5, {}	; <UNPREDICTABLE>
    539c:	0100000f 	tsteq	r0, pc
    53a0:	a720015f 			; <UNDEFINED> instruction: 0xa720015f
    53a4:	00580000 	subseq	r0, r8, r0
    53a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    53ac:	00000648 	andeq	r0, r0, r8, asr #12
    53b0:	6e697016 	mcrvs	0, 3, r7, cr9, cr6, {0}
    53b4:	015f0100 	cmpeq	pc, r0, lsl #2
    53b8:	0000002c 	andeq	r0, r0, ip, lsr #32
    53bc:	00002bcf 	andeq	r2, r0, pc, asr #23
    53c0:	00a73411 	adceq	r3, r7, r1, lsl r4
    53c4:	00081d00 	andeq	r1, r8, r0, lsl #26
    53c8:	a7500a00 	ldrbge	r0, [r0, -r0, lsl #20]
    53cc:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    53d0:	06280000 	strteq	r0, [r8], -r0
    53d4:	010b0000 	mrseq	r0, (UNDEF: 11)
    53d8:	74310451 	ldrtvc	r0, [r1], #-1105	; 0x451
    53dc:	0a002400 	beq	e3e4 <__bss_end__+0x2cc4>
    53e0:	0000a76c 	andeq	sl, r0, ip, ror #14
    53e4:	00000801 	andeq	r0, r0, r1, lsl #16
    53e8:	0000063e 	andeq	r0, r0, lr, lsr r6
    53ec:	0451010b 	ldrbeq	r0, [r1], #-267	; 0x10b
    53f0:	24007431 	strcs	r7, [r0], #-1073	; 0x431
    53f4:	a7701100 	ldrbge	r1, [r0, -r0, lsl #2]!
    53f8:	081d0000 	ldmdaeq	sp, {}	; <UNPREDICTABLE>
    53fc:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    5400:	00000ef3 	strdeq	r0, [r0], -r3
    5404:	01332801 	teqeq	r3, r1, lsl #16
    5408:	03050000 	movweq	r0, #20480	; 0x5000
    540c:	0000a864 	andeq	sl, r0, r4, ror #16
    5410:	000f5d19 	andeq	r5, pc, r9, lsl sp	; <UNPREDICTABLE>
    5414:	33290100 	teqcc	r9, #0, 2
    5418:	05000001 	streq	r0, [r0, #-1]
    541c:	00a86003 	adceq	r6, r8, r3
    5420:	0fb51900 	svceq	0x00b51900
    5424:	2a010000 	bcs	4542c <__bss_end__+0x39d0c>
    5428:	00000133 	andeq	r0, r0, r3, lsr r1
    542c:	a85c0305 	ldmdage	ip, {r0, r2, r8, r9}^
    5430:	cb190000 	blgt	645438 <__bss_end__+0x639d18>
    5434:	0100000e 	tsteq	r0, lr
    5438:	0001332c 	andeq	r3, r1, ip, lsr #6
    543c:	08030500 	stmdaeq	r3, {r8, sl}
    5440:	190000a8 	stmdbne	r0, {r3, r5, r7}
    5444:	00000ed3 	ldrdeq	r0, [r0], -r3
    5448:	01332d01 	teqeq	r3, r1, lsl #26
    544c:	03050000 	movweq	r0, #20480	; 0x5000
    5450:	0000a80c 	andeq	sl, r0, ip, lsl #16
    5454:	000e5019 	andeq	r5, lr, r9, lsl r0
    5458:	332e0100 	teqcc	lr, #0, 2
    545c:	05000001 	streq	r0, [r0, #-1]
    5460:	00a81003 	adceq	r1, r8, r3
    5464:	0edb1900 	cdpeq	9, 13, cr1, cr11, cr0, {0}
    5468:	2f010000 	svccs	0x00010000
    546c:	00000133 	andeq	r0, r0, r3, lsr r1
    5470:	a8140305 	ldmdage	r4, {r0, r2, r8, r9}
    5474:	e3190000 	tst	r9, #0
    5478:	0100000e 	tsteq	r0, lr
    547c:	00013330 	andeq	r3, r1, r0, lsr r3
    5480:	18030500 	stmdane	r3, {r8, sl}
    5484:	190000a8 	stmdbne	r0, {r3, r5, r7}
    5488:	00000eeb 	andeq	r0, r0, fp, ror #29
    548c:	01333101 	teqeq	r3, r1, lsl #2
    5490:	03050000 	movweq	r0, #20480	; 0x5000
    5494:	0000a81c 	andeq	sl, r0, ip, lsl r8
    5498:	000e9d19 	andeq	r9, lr, r9, lsl sp
    549c:	33330100 	teqcc	r3, #0, 2
    54a0:	05000001 	streq	r0, [r0, #-1]
    54a4:	00a82003 	adceq	r2, r8, r3
    54a8:	0ea41900 	cdpeq	9, 10, cr1, cr4, cr0, {0}
    54ac:	34010000 	strcc	r0, [r1], #-0
    54b0:	00000133 	andeq	r0, r0, r3, lsr r1
    54b4:	a8240305 	stmdage	r4!, {r0, r2, r8, r9}
    54b8:	58190000 	ldmdapl	r9, {}	; <UNPREDICTABLE>
    54bc:	0100000e 	tsteq	r0, lr
    54c0:	00013336 	andeq	r3, r1, r6, lsr r3
    54c4:	28030500 	stmdacs	r3, {r8, sl}
    54c8:	190000a8 	stmdbne	r0, {r3, r5, r7}
    54cc:	00000efe 	strdeq	r0, [r0], -lr
    54d0:	01333701 	teqeq	r3, r1, lsl #14
    54d4:	03050000 	movweq	r0, #20480	; 0x5000
    54d8:	0000a82c 	andeq	sl, r0, ip, lsr #16
    54dc:	000eb419 	andeq	fp, lr, r9, lsl r4
    54e0:	33390100 	teqcc	r9, #0, 2
    54e4:	05000001 	streq	r0, [r0, #-1]
    54e8:	00a83003 	adceq	r3, r8, r3
    54ec:	0ebb1900 	cdpeq	9, 11, cr1, cr11, cr0, {0}
    54f0:	3a010000 	bcc	454f8 <__bss_end__+0x39dd8>
    54f4:	00000133 	andeq	r0, r0, r3, lsr r1
    54f8:	a8340305 	ldmdage	r4!, {r0, r2, r8, r9}
    54fc:	39190000 	ldmdbcc	r9, {}	; <UNPREDICTABLE>
    5500:	0100000f 	tsteq	r0, pc
    5504:	000133f0 	strdeq	r3, [r1], -r0
    5508:	58030500 	stmdapl	r3, {r8, sl}
    550c:	190000a8 	stmdbne	r0, {r3, r5, r7}
    5510:	00000f47 	andeq	r0, r0, r7, asr #30
    5514:	0133f101 	teqeq	r3, r1, lsl #2
    5518:	03050000 	movweq	r0, #20480	; 0x5000
    551c:	0000a838 	andeq	sl, r0, r8, lsr r8
    5520:	000f6c19 	andeq	r6, pc, r9, lsl ip	; <UNPREDICTABLE>
    5524:	33f30100 	mvnscc	r0, #0, 2
    5528:	05000001 	streq	r0, [r0, #-1]
    552c:	00a85003 	adceq	r5, r8, r3
    5530:	0f731900 	svceq	0x00731900
    5534:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    5538:	00000133 	andeq	r0, r0, r3, lsr r1
    553c:	a8540305 	ldmdage	r4, {r0, r2, r8, r9}^
    5540:	1a190000 	bne	645548 <__bss_end__+0x639e28>
    5544:	0100000f 	tsteq	r0, pc
    5548:	000133f6 	strdeq	r3, [r1], -r6
    554c:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
    5550:	190000a8 	stmdbne	r0, {r3, r5, r7}
    5554:	00000f21 	andeq	r0, r0, r1, lsr #30
    5558:	0133f701 	teqeq	r3, r1, lsl #14
    555c:	03050000 	movweq	r0, #20480	; 0x5000
    5560:	0000a840 	andeq	sl, r0, r0, asr #16
    5564:	000f8619 	andeq	r8, pc, r9, lsl r6	; <UNPREDICTABLE>
    5568:	33f90100 	mvnscc	r0, #0, 2
    556c:	05000001 	streq	r0, [r0, #-1]
    5570:	00a84803 	adceq	r4, r8, r3, lsl #16
    5574:	0f8d1900 	svceq	0x008d1900
    5578:	fa010000 	blx	45580 <__bss_end__+0x39e60>
    557c:	00000133 	andeq	r0, r0, r3, lsr r1
    5580:	a84c0305 	stmdage	ip, {r0, r2, r8, r9}^
    5584:	5f190000 	svcpl	0x00190000
    5588:	0100000e 	tsteq	r0, lr
    558c:	000133fc 	strdeq	r3, [r1], -ip
    5590:	44030500 	strmi	r0, [r3], #-1280	; 0x500
    5594:	1a0000a8 	bne	583c <_start-0x27c4>
    5598:	00000cd4 	ldrdeq	r0, [r0], -r4
    559c:	002c2001 	eoreq	r2, ip, r1
    55a0:	07f50000 	ldrbeq	r0, [r5, r0]!
    55a4:	f51b0000 			; <UNDEFINED> instruction: 0xf51b0000
    55a8:	00000007 	andeq	r0, r0, r7
    55ac:	07fb040d 	ldrbeq	r0, [fp, sp, lsl #8]!
    55b0:	001c0000 	andseq	r0, ip, r0
    55b4:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    55b8:	000bf51e 	andeq	pc, fp, lr, lsl r5	; <UNPREDICTABLE>
    55bc:	171e0100 	ldrne	r0, [lr, -r0, lsl #2]
    55c0:	1b000008 	blne	55e8 <_start-0x2a18>
    55c4:	00000817 	andeq	r0, r0, r7, lsl r8
    55c8:	00002c1b 	andeq	r2, r0, fp, lsl ip
    55cc:	040d0000 	streq	r0, [sp], #-0
    55d0:	00000800 	andeq	r0, r0, r0, lsl #16
    55d4:	0003e31f 	andeq	lr, r3, pc, lsl r3
    55d8:	008a0300 	addeq	r0, sl, r0, lsl #6
    55dc:	000001c3 	andeq	r0, r0, r3, asr #3
    55e0:	1a0d0004 	bne	3455f8 <__bss_end__+0x339ed8>
    55e4:	01040000 	mrseq	r0, (UNDEF: 4)
    55e8:	00000064 	andeq	r0, r0, r4, rrx
    55ec:	000fc601 	andeq	ip, pc, r1, lsl #12
    55f0:	00063800 	andeq	r3, r6, r0, lsl #16
    55f4:	00a77800 	adceq	r7, r7, r0, lsl #16
    55f8:	00005000 	andeq	r5, r0, r0
    55fc:	0017cd00 	andseq	ip, r7, r0, lsl #26
    5600:	05040200 	streq	r0, [r4, #-512]	; 0x200
    5604:	00746e69 	rsbseq	r6, r4, r9, ror #28
    5608:	00059503 	andeq	r9, r5, r3, lsl #10
    560c:	37d40200 	ldrbcc	r0, [r4, r0, lsl #4]
    5610:	04000000 	streq	r0, [r0], #-0
    5614:	02320704 	eorseq	r0, r2, #4, 14	; 0x100000
    5618:	01040000 	mrseq	r0, (UNDEF: 4)
    561c:	00010d06 	andeq	r0, r1, r6, lsl #26
    5620:	05020400 	streq	r0, [r2, #-1024]	; 0x400
    5624:	000002ae 	andeq	r0, r0, lr, lsr #5
    5628:	7e050404 	cdpvc	4, 0, cr0, cr5, cr4, {0}
    562c:	04000002 	streq	r0, [r0], #-2
    5630:	02790508 	rsbseq	r0, r9, #8, 10	; 0x2000000
    5634:	42030000 	andmi	r0, r3, #0
    5638:	03000008 	movweq	r0, #8
    563c:	0000652e 	andeq	r6, r0, lr, lsr #10
    5640:	08010400 	stmdaeq	r1, {sl}
    5644:	0000010b 	andeq	r0, r0, fp, lsl #2
    5648:	5e070204 	cdppl	2, 0, cr0, cr7, cr4, {0}
    564c:	03000001 	movweq	r0, #1
    5650:	000002cd 	andeq	r0, r0, sp, asr #5
    5654:	007e3403 	rsbseq	r3, lr, r3, lsl #8
    5658:	04040000 	streq	r0, [r4], #-0
    565c:	00022d07 	andeq	r2, r2, r7, lsl #26
    5660:	07080400 	streq	r0, [r8, -r0, lsl #8]
    5664:	00000228 	andeq	r0, r0, r8, lsr #4
    5668:	5e070404 	cdppl	4, 0, cr0, cr7, cr4, {0}
    566c:	05000002 	streq	r0, [r0, #-2]
    5670:	08010404 	stmdaeq	r1, {r2, sl}
    5674:	00000114 	andeq	r0, r0, r4, lsl r1
    5678:	0e040c06 	cdpeq	12, 0, cr0, cr4, cr6, {0}
    567c:	000000d3 	ldrdeq	r0, [r0], -r3
    5680:	00787407 	rsbseq	r7, r8, r7, lsl #8
    5684:	005a0f04 	subseq	r0, sl, r4, lsl #30
    5688:	07000000 	streq	r0, [r0, -r0]
    568c:	04007872 	streq	r7, [r0], #-2162	; 0x872
    5690:	00005a0f 	andeq	r5, r0, pc, lsl #20
    5694:	10080100 	andne	r0, r8, r0, lsl #2
    5698:	04000008 	streq	r0, [r0], #-8
    569c:	00007310 	andeq	r7, r0, r0, lsl r3
    56a0:	c1080400 	tstgt	r8, r0, lsl #8
    56a4:	04000007 	streq	r0, [r0], #-7
    56a8:	00007311 	andeq	r7, r0, r1, lsl r3
    56ac:	03000800 	movweq	r0, #2048	; 0x800
    56b0:	000007f9 	strdeq	r0, [r0], -r9
    56b4:	009c1204 	addseq	r1, ip, r4, lsl #4
    56b8:	01090000 	mrseq	r0, (UNDEF: 9)
    56bc:	00f91005 	rscseq	r1, r9, r5
    56c0:	150a0000 	strne	r0, [sl, #-0]
    56c4:	01000008 	tsteq	r0, r8
    56c8:	0008030a 	andeq	r0, r8, sl, lsl #6
    56cc:	eb0a0200 	bl	285ed4 <__bss_end__+0x27a7b4>
    56d0:	03000007 	movweq	r0, #7
    56d4:	082a0300 	stmdaeq	sl!, {r8, r9}
    56d8:	10050000 	andne	r0, r5, r0
    56dc:	000000de 	ldrdeq	r0, [r0], -lr
    56e0:	14051406 	strne	r1, [r5], #-1030	; 0x406
    56e4:	00000131 	andeq	r0, r0, r1, lsr r1
    56e8:	00089908 	andeq	r9, r8, r8, lsl #18
    56ec:	37150500 	ldrcc	r0, [r5, -r0, lsl #10]
    56f0:	00000000 	andeq	r0, r0, r0
    56f4:	00088d08 	andeq	r8, r8, r8, lsl #26
    56f8:	f9180500 			; <UNDEFINED> instruction: 0xf9180500
    56fc:	04000000 	streq	r0, [r0], #-0
    5700:	00085808 	andeq	r5, r8, r8, lsl #16
    5704:	d31b0500 	tstle	fp, #0, 10
    5708:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    570c:	084a0300 	stmdaeq	sl, {r8, r9}^
    5710:	20050000 	andcs	r0, r5, r0
    5714:	00000104 	andeq	r0, r0, r4, lsl #2
    5718:	000fbf0b 	andeq	fp, pc, fp, lsl #30
    571c:	7e050100 	adfvcs	f0, f5, f0
    5720:	78000001 	stmdavc	r0, {r0}
    5724:	280000a7 	stmdacs	r0, {r0, r1, r2, r5, r7}
    5728:	01000000 	mrseq	r0, (UNDEF: 0)
    572c:	00017e9c 	muleq	r1, ip, lr
    5730:	00630c00 	rsbeq	r0, r3, r0, lsl #24
    5734:	017e0601 	cmneq	lr, r1, lsl #12
    5738:	00000000 	andeq	r0, r0, r0
    573c:	8c0d0900 	stchi	9, cr0, [sp], {-0}
    5740:	ab0000a7 	blge	59e4 <_start-0x261c>
    5744:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    5748:	34015201 	strcc	r5, [r1], #-513	; 0x201
    574c:	0151010e 	cmpeq	r1, lr, lsl #2
    5750:	50010e30 	andpl	r0, r1, r0, lsr lr
    5754:	24474203 	strbcs	r4, [r7], #-515	; 0x203
    5758:	040f0000 	streq	r0, [pc], #-0	; 5760 <_start-0x28a0>
    575c:	00000131 	andeq	r0, r0, r1, lsr r1
    5760:	0008600b 	andeq	r6, r8, fp
    5764:	7e0c0100 	adfvce	f0, f4, f0
    5768:	a0000001 	andge	r0, r0, r1
    576c:	280000a7 	stmdacs	r0, {r0, r1, r2, r5, r7}
    5770:	01000000 	mrseq	r0, (UNDEF: 0)
    5774:	0001ab9c 	muleq	r1, ip, fp
    5778:	00630c00 	rsbeq	r0, r3, r0, lsl #24
    577c:	017e0d01 	cmneq	lr, r1, lsl #26
    5780:	00000000 	andeq	r0, r0, r0
    5784:	10000900 	andne	r0, r0, r0, lsl #18
    5788:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
    578c:	00931b06 	addseq	r1, r3, r6, lsl #22
    5790:	93110000 	tstls	r1, #0
    5794:	11000000 	mrsne	r0, (UNDEF: 0)
    5798:	00000025 	andeq	r0, r0, r5, lsr #32
    579c:	00002c11 	andeq	r2, r0, r1, lsl ip
    57a0:	Address 0x00000000000057a0 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	110e1b0e 	tstne	lr, lr, lsl #22
       c:	10061201 	andne	r1, r6, r1, lsl #4
      10:	02000017 	andeq	r0, r0, #23
      14:	0b0b0024 	bleq	2c00ac <__bss_end__+0x2b498c>
      18:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
      1c:	24030000 	strcs	r0, [r3], #-0
      20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
      24:	000e030b 	andeq	r0, lr, fp, lsl #6
      28:	00160400 	andseq	r0, r6, r0, lsl #8
      2c:	0b3a0e03 	bleq	e83840 <__bss_end__+0xe78120>
      30:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      34:	0f050000 	svceq	0x00050000
      38:	000b0b00 	andeq	r0, fp, r0, lsl #22
      3c:	000f0600 	andeq	r0, pc, r0, lsl #12
      40:	13490b0b 	movtne	r0, #39691	; 0x9b0b
      44:	26070000 	strcs	r0, [r7], -r0
      48:	00134900 	andseq	r4, r3, r0, lsl #18
      4c:	01040800 	tsteq	r4, r0, lsl #16
      50:	0b3a0b0b 	bleq	e82c84 <__bss_end__+0xe77564>
      54:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      58:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
      5c:	1c0e0300 	stcne	3, cr0, [lr], {-0}
      60:	0a00000d 	beq	9c <_start-0x7f64>
      64:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
      68:	0b3a050b 	bleq	e8149c <__bss_end__+0xe75d7c>
      6c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      70:	0d0b0000 	stceq	0, cr0, [fp, #-0]
      74:	3a0e0300 	bcc	380c7c <__bss_end__+0x37555c>
      78:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      7c:	000b3813 	andeq	r3, fp, r3, lsl r8
      80:	000d0c00 	andeq	r0, sp, r0, lsl #24
      84:	0b3a0803 	bleq	e82098 <__bss_end__+0xe76978>
      88:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      8c:	00000b38 	andeq	r0, r0, r8, lsr fp
      90:	4901010d 	stmdbmi	r1, {r0, r2, r3, r8}
      94:	00130113 	andseq	r0, r3, r3, lsl r1
      98:	00210e00 	eoreq	r0, r1, r0, lsl #28
      9c:	052f1349 	streq	r1, [pc, #-841]!	; fffffd5b <__bss_end__+0xffff463b>
      a0:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
      a4:	3a0e0301 	bcc	380cb0 <__bss_end__+0x375590>
      a8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
      ac:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
      b0:	97184006 	ldrls	r4, [r8, -r6]
      b4:	13011942 	movwne	r1, #6466	; 0x1942
      b8:	05100000 	ldreq	r0, [r0, #-0]
      bc:	3a080300 	bcc	200cc4 <__bss_end__+0x1f55a4>
      c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      c4:	00170213 	andseq	r0, r7, r3, lsl r2
      c8:	00341100 	eorseq	r1, r4, r0, lsl #2
      cc:	0b3a0803 	bleq	e820e0 <__bss_end__+0xe769c0>
      d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      d4:	00001702 	andeq	r1, r0, r2, lsl #14
      d8:	03003412 	movweq	r3, #1042	; 0x412
      dc:	3413490e 	ldrcc	r4, [r3], #-2318	; 0x90e
      e0:	00180219 	andseq	r0, r8, r9, lsl r2
      e4:	010b1300 	mrseq	r1, (UNDEF: 59)
      e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
      ec:	00001301 	andeq	r1, r0, r1, lsl #6
      f0:	01828914 	orreq	r8, r2, r4, lsl r9
      f4:	31011101 	tstcc	r1, r1, lsl #2
      f8:	15000013 	strne	r0, [r0, #-19]
      fc:	0001828a 	andeq	r8, r1, sl, lsl #5
     100:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     104:	16000018 			; <UNDEFINED> instruction: 0x16000018
     108:	00018289 	andeq	r8, r1, r9, lsl #5
     10c:	13310111 	teqne	r1, #1073741828	; 0x40000004
     110:	89170000 	ldmdbhi	r7, {}	; <UNPREDICTABLE>
     114:	11010182 	smlabbne	r1, r2, r1, r0
     118:	01133101 	tsteq	r3, r1, lsl #2
     11c:	18000013 	stmdane	r0, {r0, r1, r4}
     120:	13490021 	movtne	r0, #36897	; 0x9021
     124:	00000b2f 	andeq	r0, r0, pc, lsr #22
     128:	3f012e19 	svccc	0x00012e19
     12c:	3a0e0319 	bcc	380d98 <__bss_end__+0x375678>
     130:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     134:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     138:	97184006 	ldrls	r4, [r8, -r6]
     13c:	13011942 	movwne	r1, #6466	; 0x1942
     140:	341a0000 	ldrcc	r0, [sl], #-0
     144:	3a080300 	bcc	200d4c <__bss_end__+0x1f562c>
     148:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     14c:	000b1c13 	andeq	r1, fp, r3, lsl ip
     150:	010b1b00 	tsteq	fp, r0, lsl #22
     154:	00001755 	andeq	r1, r0, r5, asr r7
     158:	0300341c 	movweq	r3, #1052	; 0x41c
     15c:	3b0b3a0e 	blcc	2ce99c <__bss_end__+0x2c327c>
     160:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     164:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
     168:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     16c:	0b3b0b3a 	bleq	ec2e5c <__bss_end__+0xeb773c>
     170:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     174:	00001802 	andeq	r1, r0, r2, lsl #16
     178:	3f012e1e 	svccc	0x00012e1e
     17c:	3a0e0319 	bcc	380de8 <__bss_end__+0x3756c8>
     180:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     184:	3c134919 	ldccc	9, cr4, [r3], {25}
     188:	00130119 	andseq	r0, r3, r9, lsl r1
     18c:	00051f00 	andeq	r1, r5, r0, lsl #30
     190:	00001349 	andeq	r1, r0, r9, asr #6
     194:	00001820 	andeq	r1, r0, r0, lsr #16
     198:	002e2100 	eoreq	r2, lr, r0, lsl #2
     19c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     1a0:	0b3b0b3a 	bleq	ec2e90 <__bss_end__+0xeb7770>
     1a4:	13491927 	movtne	r1, #39207	; 0x9927
     1a8:	0000193c 	andeq	r1, r0, ip, lsr r9
     1ac:	3f002e22 	svccc	0x00002e22
     1b0:	3a0e0319 	bcc	380e1c <__bss_end__+0x3756fc>
     1b4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     1b8:	00193c19 	andseq	r3, r9, r9, lsl ip
     1bc:	012e2300 	teqeq	lr, r0, lsl #6
     1c0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     1c4:	0b3b0b3a 	bleq	ec2eb4 <__bss_end__+0xeb7794>
     1c8:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     1cc:	00001301 	andeq	r1, r0, r1, lsl #6
     1d0:	27011524 	strcs	r1, [r1, -r4, lsr #10]
     1d4:	00130119 	andseq	r0, r3, r9, lsl r1
     1d8:	11010000 	mrsne	r0, (UNDEF: 1)
     1dc:	130e2501 	movwne	r2, #58625	; 0xe501
     1e0:	1b0e030b 	blne	380e14 <__bss_end__+0x3756f4>
     1e4:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     1e8:	00171006 	andseq	r1, r7, r6
     1ec:	00240200 	eoreq	r0, r4, r0, lsl #4
     1f0:	0b3e0b0b 	bleq	f82e24 <__bss_end__+0xf77704>
     1f4:	00000803 	andeq	r0, r0, r3, lsl #16
     1f8:	0b002403 	bleq	920c <va_printk+0x14c>
     1fc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     200:	0400000e 	streq	r0, [r0], #-14
     204:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     208:	0b3b0b3a 	bleq	ec2ef8 <__bss_end__+0xeb77d8>
     20c:	00001349 	andeq	r1, r0, r9, asr #6
     210:	0b000f05 	bleq	3e2c <_start-0x41d4>
     214:	0600000b 	streq	r0, [r0], -fp
     218:	0b0b000f 	bleq	2c025c <__bss_end__+0x2b4b3c>
     21c:	00001349 	andeq	r1, r0, r9, asr #6
     220:	49002607 	stmdbmi	r0, {r0, r1, r2, r9, sl, sp}
     224:	08000013 	stmdaeq	r0, {r0, r1, r4}
     228:	13490101 	movtne	r0, #37121	; 0x9101
     22c:	00001301 	andeq	r1, r0, r1, lsl #6
     230:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
     234:	000b2f13 	andeq	r2, fp, r3, lsl pc
     238:	01040a00 	tsteq	r4, r0, lsl #20
     23c:	0b3a0b0b 	bleq	e82e70 <__bss_end__+0xe77750>
     240:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     244:	280b0000 	stmdacs	fp, {}	; <UNPREDICTABLE>
     248:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     24c:	0c00000d 	stceq	0, cr0, [r0], {13}
     250:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     254:	0b3a050b 	bleq	e81688 <__bss_end__+0xe75f68>
     258:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     25c:	0d0d0000 	stceq	0, cr0, [sp, #-0]
     260:	3a0e0300 	bcc	380e68 <__bss_end__+0x375748>
     264:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     268:	000b3813 	andeq	r3, fp, r3, lsl r8
     26c:	000d0e00 	andeq	r0, sp, r0, lsl #28
     270:	0b3a0803 	bleq	e82284 <__bss_end__+0xe76b64>
     274:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     278:	00000b38 	andeq	r0, r0, r8, lsr fp
     27c:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
     280:	00052f13 	andeq	r2, r5, r3, lsl pc
     284:	01131000 	tsteq	r3, r0
     288:	0b0b0803 	bleq	2c229c <__bss_end__+0x2b6b7c>
     28c:	0b3b0b3a 	bleq	ec2f7c <__bss_end__+0xeb785c>
     290:	00001301 	andeq	r1, r0, r1, lsl #6
     294:	03001611 	movweq	r1, #1553	; 0x611
     298:	3b0b3a08 	blcc	2ceac0 <__bss_end__+0x2c33a0>
     29c:	0013490b 	andseq	r4, r3, fp, lsl #18
     2a0:	012e1200 	teqeq	lr, r0, lsl #4
     2a4:	0b3a0e03 	bleq	e83ab8 <__bss_end__+0xe78398>
     2a8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     2ac:	01111349 	tsteq	r1, r9, asr #6
     2b0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     2b4:	01194297 			; <UNDEFINED> instruction: 0x01194297
     2b8:	13000013 	movwne	r0, #19
     2bc:	08030005 	stmdaeq	r3, {r0, r2}
     2c0:	0b3b0b3a 	bleq	ec2fb0 <__bss_end__+0xeb7890>
     2c4:	17021349 	strne	r1, [r2, -r9, asr #6]
     2c8:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
     2cc:	3a0e0301 	bcc	380ed8 <__bss_end__+0x3757b8>
     2d0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     2d4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     2d8:	97184006 	ldrls	r4, [r8, -r6]
     2dc:	13011942 	movwne	r1, #6466	; 0x1942
     2e0:	05150000 	ldreq	r0, [r5, #-0]
     2e4:	3a080300 	bcc	200eec <__bss_end__+0x1f57cc>
     2e8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2ec:	00180213 	andseq	r0, r8, r3, lsl r2
     2f0:	82891600 	addhi	r1, r9, #0, 12
     2f4:	01110101 	tsteq	r1, r1, lsl #2
     2f8:	00001331 	andeq	r1, r0, r1, lsr r3
     2fc:	01828a17 	orreq	r8, r2, r7, lsl sl
     300:	91180200 	tstls	r8, r0, lsl #4
     304:	00001842 	andeq	r1, r0, r2, asr #16
     308:	03003418 	movweq	r3, #1048	; 0x418
     30c:	3413490e 	ldrcc	r4, [r3], #-2318	; 0x90e
     310:	00180219 	andseq	r0, r8, r9, lsl r2
     314:	82891900 	addhi	r1, r9, #0, 18
     318:	01110101 	tsteq	r1, r1, lsl #2
     31c:	13011331 	movwne	r1, #4913	; 0x1331
     320:	891a0000 	ldmdbhi	sl, {}	; <UNPREDICTABLE>
     324:	11000182 	smlabbne	r0, r2, r1, r0
     328:	00133101 	andseq	r3, r3, r1, lsl #2
     32c:	00341b00 	eorseq	r1, r4, r0, lsl #22
     330:	0b3a0803 	bleq	e82344 <__bss_end__+0xe76c24>
     334:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     338:	00001702 	andeq	r1, r0, r2, lsl #14
     33c:	3f002e1c 	svccc	0x00002e1c
     340:	3a0e0319 	bcc	380fac <__bss_end__+0x37588c>
     344:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     348:	11134919 	tstne	r3, r9, lsl r9
     34c:	40061201 	andmi	r1, r6, r1, lsl #4
     350:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     354:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
     358:	03193f01 	tsteq	r9, #1, 30
     35c:	3b0b3a0e 	blcc	2ceb9c <__bss_end__+0x2c347c>
     360:	1119270b 	tstne	r9, fp, lsl #14
     364:	40061201 	andmi	r1, r6, r1, lsl #4
     368:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     36c:	00001301 	andeq	r1, r0, r1, lsl #6
     370:	0300341e 	movweq	r3, #1054	; 0x41e
     374:	3b0b3a0e 	blcc	2cebb4 <__bss_end__+0x2c3494>
     378:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     37c:	1f000017 	svcne	0x00000017
     380:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     384:	0b3b0b3a 	bleq	ec3074 <__bss_end__+0xeb7954>
     388:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     38c:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
     390:	03193f01 	tsteq	r9, #1, 30
     394:	3b0b3a0e 	blcc	2cebd4 <__bss_end__+0x2c34b4>
     398:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     39c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     3a0:	97184006 	ldrls	r4, [r8, -r6]
     3a4:	13011942 	movwne	r1, #6466	; 0x1942
     3a8:	05210000 	streq	r0, [r1, #-0]!
     3ac:	3a0e0300 	bcc	380fb4 <__bss_end__+0x375894>
     3b0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3b4:	00170213 	andseq	r0, r7, r3, lsl r2
     3b8:	002e2200 	eoreq	r2, lr, r0, lsl #4
     3bc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     3c0:	0b3b0b3a 	bleq	ec30b0 <__bss_end__+0xeb7990>
     3c4:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     3c8:	15230000 	strne	r0, [r3, #-0]!
     3cc:	01192701 	tsteq	r9, r1, lsl #14
     3d0:	24000013 	strcs	r0, [r0], #-19
     3d4:	13490005 	movtne	r0, #36869	; 0x9005
     3d8:	05250000 	streq	r0, [r5, #-0]!
     3dc:	3a0e0300 	bcc	380fe4 <__bss_end__+0x3758c4>
     3e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3e4:	00180213 	andseq	r0, r8, r3, lsl r2
     3e8:	010b2600 	tsteq	fp, r0, lsl #12
     3ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
     3f0:	00001301 	andeq	r1, r0, r1, lsl #6
     3f4:	03003427 	movweq	r3, #1063	; 0x427
     3f8:	3b0b3a08 	blcc	2cec20 <__bss_end__+0x2c3500>
     3fc:	1c13490b 	ldcne	9, cr4, [r3], {11}
     400:	2800000b 	stmdacs	r0, {r0, r1, r3}
     404:	0111010b 	tsteq	r1, fp, lsl #2
     408:	00000612 	andeq	r0, r0, r2, lsl r6
     40c:	03003429 	movweq	r3, #1065	; 0x429
     410:	3b0b3a08 	blcc	2cec38 <__bss_end__+0x2c3518>
     414:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     418:	2a000018 	bcs	480 <_start-0x7b80>
     41c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     420:	0b3b0b3a 	bleq	ec3110 <__bss_end__+0xeb79f0>
     424:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     428:	00001802 	andeq	r1, r0, r2, lsl #16
     42c:	3f012e2b 	svccc	0x00012e2b
     430:	3a0e0319 	bcc	38109c <__bss_end__+0x37597c>
     434:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     438:	3c134919 	ldccc	9, cr4, [r3], {25}
     43c:	00130119 	andseq	r0, r3, r9, lsl r1
     440:	00182c00 	andseq	r2, r8, r0, lsl #24
     444:	2e2d0000 	cdpcs	0, 2, cr0, cr13, cr0, {0}
     448:	03193f01 	tsteq	r9, #1, 30
     44c:	3b0b3a0e 	blcc	2cec8c <__bss_end__+0x2c356c>
     450:	3c19270b 	ldccc	7, cr2, [r9], {11}
     454:	00130119 	andseq	r0, r3, r9, lsl r1
     458:	11010000 	mrsne	r0, (UNDEF: 1)
     45c:	130e2501 	movwne	r2, #58625	; 0xe501
     460:	1b0e030b 	blne	381094 <__bss_end__+0x375974>
     464:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     468:	00171006 	andseq	r1, r7, r6
     46c:	00240200 	eoreq	r0, r4, r0, lsl #4
     470:	0b3e0b0b 	bleq	f830a4 <__bss_end__+0xf77984>
     474:	00000803 	andeq	r0, r0, r3, lsl #16
     478:	03001603 	movweq	r1, #1539	; 0x603
     47c:	3b0b3a0e 	blcc	2cecbc <__bss_end__+0x2c359c>
     480:	0013490b 	andseq	r4, r3, fp, lsl #18
     484:	00240400 	eoreq	r0, r4, r0, lsl #8
     488:	0b3e0b0b 	bleq	f830bc <__bss_end__+0xf7799c>
     48c:	00000e03 	andeq	r0, r0, r3, lsl #28
     490:	0b000f05 	bleq	40ac <_start-0x3f54>
     494:	0600000b 	streq	r0, [r0], -fp
     498:	0b0b000f 	bleq	2c04dc <__bss_end__+0x2b4dbc>
     49c:	00001349 	andeq	r1, r0, r9, asr #6
     4a0:	49002607 	stmdbmi	r0, {r0, r1, r2, r9, sl, sp}
     4a4:	08000013 	stmdaeq	r0, {r0, r1, r4}
     4a8:	13490101 	movtne	r0, #37121	; 0x9101
     4ac:	00001301 	andeq	r1, r0, r1, lsl #6
     4b0:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
     4b4:	000b2f13 	andeq	r2, fp, r3, lsl pc
     4b8:	01130a00 	tsteq	r3, r0, lsl #20
     4bc:	0b3a050b 	bleq	e818f0 <__bss_end__+0xe761d0>
     4c0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     4c4:	0d0b0000 	stceq	0, cr0, [fp, #-0]
     4c8:	3a0e0300 	bcc	3810d0 <__bss_end__+0x3759b0>
     4cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4d0:	000b3813 	andeq	r3, fp, r3, lsl r8
     4d4:	000d0c00 	andeq	r0, sp, r0, lsl #24
     4d8:	0b3a0e03 	bleq	e83cec <__bss_end__+0xe785cc>
     4dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     4e0:	00000538 	andeq	r0, r0, r8, lsr r5
     4e4:	03000d0d 	movweq	r0, #3341	; 0xd0d
     4e8:	3b0b3a0e 	blcc	2ced28 <__bss_end__+0x2c3608>
     4ec:	0b13490b 	bleq	4d2920 <__bss_end__+0x4c7200>
     4f0:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
     4f4:	0005380b 	andeq	r3, r5, fp, lsl #16
     4f8:	00210e00 	eoreq	r0, r1, r0, lsl #28
     4fc:	052f1349 	streq	r1, [pc, #-841]!	; 1bb <_start-0x7e45>
     500:	350f0000 	strcc	r0, [pc, #-0]	; 508 <_start-0x7af8>
     504:	00134900 	andseq	r4, r3, r0, lsl #18
     508:	012e1000 	teqeq	lr, r0
     50c:	0b3a0e03 	bleq	e83d20 <__bss_end__+0xe78600>
     510:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     514:	0b201349 	bleq	805240 <__bss_end__+0x7f9b20>
     518:	00001301 	andeq	r1, r0, r1, lsl #6
     51c:	03000511 	movweq	r0, #1297	; 0x511
     520:	3b0b3a08 	blcc	2ced48 <__bss_end__+0x2c3628>
     524:	0013490b 	andseq	r4, r3, fp, lsl #18
     528:	00341200 	eorseq	r1, r4, r0, lsl #4
     52c:	0b3a0e03 	bleq	e83d40 <__bss_end__+0xe78620>
     530:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     534:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
     538:	03193f01 	tsteq	r9, #1, 30
     53c:	3b0b3a0e 	blcc	2ced7c <__bss_end__+0x2c365c>
     540:	1119270b 	tstne	r9, fp, lsl #14
     544:	40061201 	andmi	r1, r6, r1, lsl #4
     548:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     54c:	00001301 	andeq	r1, r0, r1, lsl #6
     550:	03000514 	movweq	r0, #1300	; 0x514
     554:	3b0b3a08 	blcc	2ced7c <__bss_end__+0x2c365c>
     558:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     55c:	15000017 	strne	r0, [r0, #-23]
     560:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     564:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
     568:	00001802 	andeq	r1, r0, r2, lsl #16
     56c:	31011d16 	tstcc	r1, r6, lsl sp
     570:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     574:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     578:	0013010b 	andseq	r0, r3, fp, lsl #2
     57c:	00051700 	andeq	r1, r5, r0, lsl #14
     580:	17021331 	smladxne	r2, r1, r3, r1
     584:	89180000 	ldmdbhi	r8, {}	; <UNPREDICTABLE>
     588:	11010182 	smlabbne	r1, r2, r1, r0
     58c:	00133101 	andseq	r3, r3, r1, lsl #2
     590:	828a1900 	addhi	r1, sl, #0, 18
     594:	18020001 	stmdane	r2, {r0}
     598:	00184291 	mulseq	r8, r1, r2
     59c:	82891a00 	addhi	r1, r9, #0, 20
     5a0:	01110001 	tsteq	r1, r1
     5a4:	00001331 	andeq	r1, r0, r1, lsr r3
     5a8:	0182891b 	orreq	r8, r2, fp, lsl r9
     5ac:	31011101 	tstcc	r1, r1, lsl #2
     5b0:	00130113 	andseq	r0, r3, r3, lsl r1
     5b4:	00051c00 	andeq	r1, r5, r0, lsl #24
     5b8:	0b3a0e03 	bleq	e83dcc <__bss_end__+0xe786ac>
     5bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     5c0:	00001702 	andeq	r1, r0, r2, lsl #14
     5c4:	0300341d 	movweq	r3, #1053	; 0x41d
     5c8:	3b0b3a08 	blcc	2cedf0 <__bss_end__+0x2c36d0>
     5cc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     5d0:	1e000017 	mcrne	0, 0, r0, cr0, cr7, {0}
     5d4:	13310005 	teqne	r1, #5
     5d8:	00001802 	andeq	r1, r0, r2, lsl #16
     5dc:	31011d1f 	tstcc	r1, pc, lsl sp
     5e0:	55015213 	strpl	r5, [r1, #-531]	; 0x213
     5e4:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
     5e8:	0013010b 	andseq	r0, r3, fp, lsl #2
     5ec:	010b2000 	mrseq	r2, (UNDEF: 11)
     5f0:	00001755 	andeq	r1, r0, r5, asr r7
     5f4:	31003421 	tstcc	r0, r1, lsr #8
     5f8:	00170213 	andseq	r0, r7, r3, lsl r2
     5fc:	011d2200 	tsteq	sp, r0, lsl #4
     600:	01111331 	tsteq	r1, r1, lsr r3
     604:	0b580612 	bleq	1601e54 <__bss_end__+0x15f6734>
     608:	00000b59 	andeq	r0, r0, r9, asr fp
     60c:	3f012e23 	svccc	0x00012e23
     610:	3a0e0319 	bcc	38127c <__bss_end__+0x375b5c>
     614:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     618:	11134919 	tstne	r3, r9, lsl r9
     61c:	40061201 	andmi	r1, r6, r1, lsl #4
     620:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     624:	00001301 	andeq	r1, r0, r1, lsl #6
     628:	11010b24 	tstne	r1, r4, lsr #22
     62c:	00061201 	andeq	r1, r6, r1, lsl #4
     630:	011d2500 	tsteq	sp, r0, lsl #10
     634:	01521331 	cmpeq	r2, r1, lsr r3
     638:	0b581755 	bleq	1606394 <__bss_end__+0x15fac74>
     63c:	00000b59 	andeq	r0, r0, r9, asr fp
     640:	03003426 	movweq	r3, #1062	; 0x426
     644:	3b0b3a08 	blcc	2cee6c <__bss_end__+0x2c374c>
     648:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     64c:	27000018 	smladcs	r0, r8, r0, r0
     650:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     654:	0b3b0b3a 	bleq	ec3344 <__bss_end__+0xeb7c24>
     658:	17021349 	strne	r1, [r2, -r9, asr #6]
     65c:	0b280000 	bleq	a00664 <__bss_end__+0x9f4f44>
     660:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     664:	00130106 	andseq	r0, r3, r6, lsl #2
     668:	00342900 	eorseq	r2, r4, r0, lsl #18
     66c:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
     670:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
     674:	03193f01 	tsteq	r9, #1, 30
     678:	3b0b3a0e 	blcc	2ceeb8 <__bss_end__+0x2c3798>
     67c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     680:	01193c13 	tsteq	r9, r3, lsl ip
     684:	2b000013 	blcs	6d8 <_start-0x7928>
     688:	13490005 	movtne	r0, #36869	; 0x9005
     68c:	182c0000 	stmdane	ip!, {}	; <UNPREDICTABLE>
     690:	2d000000 	stccs	0, cr0, [r0, #-0]
     694:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     698:	0b3a0e03 	bleq	e83eac <__bss_end__+0xe7878c>
     69c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     6a0:	0000193c 	andeq	r1, r0, ip, lsr r9
     6a4:	3f012e2e 	svccc	0x00012e2e
     6a8:	3a0e0319 	bcc	381314 <__bss_end__+0x375bf4>
     6ac:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     6b0:	3c134919 	ldccc	9, cr4, [r3], {25}
     6b4:	00000019 	andeq	r0, r0, r9, lsl r0
     6b8:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     6bc:	030b130e 	movweq	r1, #45838	; 0xb30e
     6c0:	110e1b0e 	tstne	lr, lr, lsl #22
     6c4:	10061201 	andne	r1, r6, r1, lsl #4
     6c8:	02000017 	andeq	r0, r0, #23
     6cc:	0b0b0024 	bleq	2c0764 <__bss_end__+0x2b5044>
     6d0:	0e030b3e 	vmoveq.16	d3[0], r0
     6d4:	24030000 	strcs	r0, [r3], #-0
     6d8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     6dc:	0008030b 	andeq	r0, r8, fp, lsl #6
     6e0:	000f0400 	andeq	r0, pc, r0, lsl #8
     6e4:	00000b0b 	andeq	r0, r0, fp, lsl #22
     6e8:	0b000f05 	bleq	4304 <_start-0x3cfc>
     6ec:	0013490b 	andseq	r4, r3, fp, lsl #18
     6f0:	00160600 	andseq	r0, r6, r0, lsl #12
     6f4:	0b3a0e03 	bleq	e83f08 <__bss_end__+0xe787e8>
     6f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     6fc:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
     700:	03193f01 	tsteq	r9, #1, 30
     704:	3b0b3a0e 	blcc	2cef44 <__bss_end__+0x2c3824>
     708:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     70c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     710:	97184006 	ldrls	r4, [r8, -r6]
     714:	00001942 	andeq	r1, r0, r2, asr #18
     718:	03000508 	movweq	r0, #1288	; 0x508
     71c:	3b0b3a08 	blcc	2cef44 <__bss_end__+0x2c3824>
     720:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     724:	09000018 	stmdbeq	r0, {r3, r4}
     728:	08030005 	stmdaeq	r3, {r0, r2}
     72c:	0b3b0b3a 	bleq	ec341c <__bss_end__+0xeb7cfc>
     730:	17021349 	strne	r1, [r2, -r9, asr #6]
     734:	340a0000 	strcc	r0, [sl], #-0
     738:	3a080300 	bcc	201340 <__bss_end__+0x1f5c20>
     73c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     740:	00170213 	andseq	r0, r7, r3, lsl r2
     744:	00340b00 	eorseq	r0, r4, r0, lsl #22
     748:	0b3a0803 	bleq	e8275c <__bss_end__+0xe7703c>
     74c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     750:	00001802 	andeq	r1, r0, r2, lsl #16
     754:	01110100 	tsteq	r1, r0, lsl #2
     758:	0b130e25 	bleq	4c3ff4 <__bss_end__+0x4b88d4>
     75c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     760:	06120111 			; <UNDEFINED> instruction: 0x06120111
     764:	00001710 	andeq	r1, r0, r0, lsl r7
     768:	03001602 	movweq	r1, #1538	; 0x602
     76c:	3b0b3a0e 	blcc	2cefac <__bss_end__+0x2c388c>
     770:	0013490b 	andseq	r4, r3, fp, lsl #18
     774:	01130300 	tsteq	r3, r0, lsl #6
     778:	0b0b0e03 	bleq	2c3f8c <__bss_end__+0x2b886c>
     77c:	0b3b0b3a 	bleq	ec346c <__bss_end__+0xeb7d4c>
     780:	00001301 	andeq	r1, r0, r1, lsl #6
     784:	03000d04 	movweq	r0, #3332	; 0xd04
     788:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
     78c:	0019340b 	andseq	r3, r9, fp, lsl #8
     790:	000f0500 	andeq	r0, pc, r0, lsl #10
     794:	00000b0b 	andeq	r0, r0, fp, lsl #22
     798:	0b002406 	bleq	97b8 <sw_uart_putc+0xb4>
     79c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     7a0:	07000008 	streq	r0, [r0, -r8]
     7a4:	0b0b0024 	bleq	2c083c <__bss_end__+0x2b511c>
     7a8:	0e030b3e 	vmoveq.16	d3[0], r0
     7ac:	0f080000 	svceq	0x00080000
     7b0:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     7b4:	09000013 	stmdbeq	r0, {r0, r1, r4}
     7b8:	13490026 	movtne	r0, #36902	; 0x9026
     7bc:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
     7c0:	03193f01 	tsteq	r9, #1, 30
     7c4:	3b0b3a0e 	blcc	2cf004 <__bss_end__+0x2c38e4>
     7c8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     7cc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     7d0:	97184006 	ldrls	r4, [r8, -r6]
     7d4:	13011942 	movwne	r1, #6466	; 0x1942
     7d8:	050b0000 	streq	r0, [fp, #-0]
     7dc:	3a080300 	bcc	2013e4 <__bss_end__+0x1f5cc4>
     7e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     7e4:	00180213 	andseq	r0, r8, r3, lsl r2
     7e8:	00180c00 	andseq	r0, r8, r0, lsl #24
     7ec:	340d0000 	strcc	r0, [sp], #-0
     7f0:	3a080300 	bcc	2013f8 <__bss_end__+0x1f5cd8>
     7f4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     7f8:	00180213 	andseq	r0, r8, r3, lsl r2
     7fc:	00340e00 	eorseq	r0, r4, r0, lsl #28
     800:	0b3a0e03 	bleq	e84014 <__bss_end__+0xe788f4>
     804:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     808:	00001802 	andeq	r1, r0, r2, lsl #16
     80c:	0300340f 	movweq	r3, #1039	; 0x40f
     810:	3b0b3a08 	blcc	2cf038 <__bss_end__+0x2c3918>
     814:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     818:	10000017 	andne	r0, r0, r7, lsl r0
     81c:	01018289 	smlabbeq	r1, r9, r2, r8
     820:	13310111 	teqne	r1, #1073741828	; 0x40000004
     824:	00001301 	andeq	r1, r0, r1, lsl #6
     828:	01828a11 	orreq	r8, r2, r1, lsl sl
     82c:	91180200 	tstls	r8, r0, lsl #4
     830:	00001842 	andeq	r1, r0, r2, asr #16
     834:	01828912 	orreq	r8, r2, r2, lsl r9
     838:	00011101 	andeq	r1, r1, r1, lsl #2
     83c:	01011300 	mrseq	r1, SP_irq
     840:	13011349 	movwne	r1, #4937	; 0x1349
     844:	21140000 	tstcs	r4, r0
     848:	2f134900 	svccs	0x00134900
     84c:	15000005 	strne	r0, [r0, #-5]
     850:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     854:	13011349 	movwne	r1, #4937	; 0x1349
     858:	05160000 	ldreq	r0, [r6, #-0]
     85c:	00134900 	andseq	r4, r3, r0, lsl #18
     860:	00341700 	eorseq	r1, r4, r0, lsl #14
     864:	0b3a0e03 	bleq	e84078 <__bss_end__+0xe78958>
     868:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     86c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     870:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
     874:	03193f01 	tsteq	r9, #1, 30
     878:	3b0b3a0e 	blcc	2cf0b8 <__bss_end__+0x2c3998>
     87c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     880:	00193c13 	andseq	r3, r9, r3, lsl ip
     884:	11010000 	mrsne	r0, (UNDEF: 1)
     888:	130e2501 	movwne	r2, #58625	; 0xe501
     88c:	1b0e030b 	blne	3814c0 <__bss_end__+0x375da0>
     890:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     894:	00171006 	andseq	r1, r7, r6
     898:	00240200 	eoreq	r0, r4, r0, lsl #4
     89c:	0b3e0b0b 	bleq	f834d0 <__bss_end__+0xf77db0>
     8a0:	00000803 	andeq	r0, r0, r3, lsl #16
     8a4:	0b002403 	bleq	98b8 <sw_uart_getc_timeout+0x60>
     8a8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     8ac:	0400000e 	streq	r0, [r0], #-14
     8b0:	0e03012e 	adfeqsp	f0, f3, #0.5
     8b4:	0b3b0b3a 	bleq	ec35a4 <__bss_end__+0xeb7e84>
     8b8:	13491927 	movtne	r1, #39207	; 0x9927
     8bc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     8c0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     8c4:	00130119 	andseq	r0, r3, r9, lsl r1
     8c8:	00050500 	andeq	r0, r5, r0, lsl #10
     8cc:	0b3a0803 	bleq	e828e0 <__bss_end__+0xe771c0>
     8d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     8d4:	00001702 	andeq	r1, r0, r2, lsl #14
     8d8:	01828906 	orreq	r8, r2, r6, lsl #18
     8dc:	31011101 	tstcc	r1, r1, lsl #2
     8e0:	07000013 	smladeq	r0, r3, r0, r0
     8e4:	0001828a 	andeq	r8, r1, sl, lsl #5
     8e8:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     8ec:	08000018 	stmdaeq	r0, {r3, r4}
     8f0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     8f4:	0b3a0e03 	bleq	e84108 <__bss_end__+0xe789e8>
     8f8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     8fc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     900:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     904:	09000019 	stmdbeq	r0, {r0, r3, r4}
     908:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     90c:	0b3a0e03 	bleq	e84120 <__bss_end__+0xe78a00>
     910:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     914:	06120111 			; <UNDEFINED> instruction: 0x06120111
     918:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     91c:	00130119 	andseq	r0, r3, r9, lsl r1
     920:	00050a00 	andeq	r0, r5, r0, lsl #20
     924:	0b3a0803 	bleq	e82938 <__bss_end__+0xe77218>
     928:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     92c:	00001802 	andeq	r1, r0, r2, lsl #16
     930:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
     934:	01134919 	tsteq	r3, r9, lsl r9
     938:	0c000013 	stceq	0, cr0, [r0], {19}
     93c:	13490005 	movtne	r0, #36869	; 0x9005
     940:	0f0d0000 	svceq	0x000d0000
     944:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     948:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     94c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     950:	0b3b0b3a 	bleq	ec3640 <__bss_end__+0xeb7f20>
     954:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     958:	00001802 	andeq	r1, r0, r2, lsl #16
     95c:	3f012e0f 	svccc	0x00012e0f
     960:	3a0e0319 	bcc	3815cc <__bss_end__+0x375eac>
     964:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     968:	00193c19 	andseq	r3, r9, r9, lsl ip
     96c:	11010000 	mrsne	r0, (UNDEF: 1)
     970:	130e2501 	movwne	r2, #58625	; 0xe501
     974:	1b0e030b 	blne	3815a8 <__bss_end__+0x375e88>
     978:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     97c:	00171006 	andseq	r1, r7, r6
     980:	00240200 	eoreq	r0, r4, r0, lsl #4
     984:	0b3e0b0b 	bleq	f835b8 <__bss_end__+0xf77e98>
     988:	00000803 	andeq	r0, r0, r3, lsl #16
     98c:	0b002403 	bleq	99a0 <sw_uart_getc_timeout+0x148>
     990:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     994:	0400000e 	streq	r0, [r0], #-14
     998:	0b0b000f 	bleq	2c09dc <__bss_end__+0x2b52bc>
     99c:	00001349 	andeq	r1, r0, r9, asr #6
     9a0:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
     9a4:	06000013 			; <UNDEFINED> instruction: 0x06000013
     9a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     9ac:	0b3a0e03 	bleq	e841c0 <__bss_end__+0xe78aa0>
     9b0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     9b4:	01111349 	tsteq	r1, r9, asr #6
     9b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     9bc:	01194296 			; <UNDEFINED> instruction: 0x01194296
     9c0:	07000013 	smladeq	r0, r3, r0, r0
     9c4:	08030005 	stmdaeq	r3, {r0, r2}
     9c8:	0b3b0b3a 	bleq	ec36b8 <__bss_end__+0xeb7f98>
     9cc:	17021349 	strne	r1, [r2, -r9, asr #6]
     9d0:	15080000 	strne	r0, [r8, #-0]
     9d4:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
     9d8:	00130113 	andseq	r0, r3, r3, lsl r1
     9dc:	00050900 	andeq	r0, r5, r0, lsl #18
     9e0:	00001349 	andeq	r1, r0, r9, asr #6
     9e4:	0300340a 	movweq	r3, #1034	; 0x40a
     9e8:	3b0b3a0e 	blcc	2cf228 <__bss_end__+0x2c3b08>
     9ec:	3f13490b 	svccc	0x0013490b
     9f0:	00193c19 	andseq	r3, r9, r9, lsl ip
     9f4:	00340b00 	eorseq	r0, r4, r0, lsl #22
     9f8:	0b3a0e03 	bleq	e8420c <__bss_end__+0xe78aec>
     9fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     a00:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     a04:	01000000 	mrseq	r0, (UNDEF: 0)
     a08:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     a0c:	0e030b13 	vmoveq.32	d3[0], r0
     a10:	01110e1b 	tsteq	r1, fp, lsl lr
     a14:	17100612 			; <UNDEFINED> instruction: 0x17100612
     a18:	24020000 	strcs	r0, [r2], #-0
     a1c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     a20:	0008030b 	andeq	r0, r8, fp, lsl #6
     a24:	00240300 	eoreq	r0, r4, r0, lsl #6
     a28:	0b3e0b0b 	bleq	f8365c <__bss_end__+0xf77f3c>
     a2c:	00000e03 	andeq	r0, r0, r3, lsl #28
     a30:	0b000f04 	bleq	4648 <_start-0x39b8>
     a34:	0500000b 	streq	r0, [r0, #-11]
     a38:	0b0b000f 	bleq	2c0a7c <__bss_end__+0x2b535c>
     a3c:	00001349 	andeq	r1, r0, r9, asr #6
     a40:	49002606 	stmdbmi	r0, {r1, r2, r9, sl, sp}
     a44:	07000013 	smladeq	r0, r3, r0, r0
     a48:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     a4c:	0b3b0b3a 	bleq	ec373c <__bss_end__+0xeb801c>
     a50:	00001349 	andeq	r1, r0, r9, asr #6
     a54:	03011308 	movweq	r1, #4872	; 0x1308
     a58:	3a0b0b0e 	bcc	2c3698 <__bss_end__+0x2b7f78>
     a5c:	010b3b0b 	tsteq	fp, fp, lsl #22
     a60:	09000013 	stmdbeq	r0, {r0, r1, r4}
     a64:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     a68:	0b381349 	bleq	e05794 <__bss_end__+0xdfa074>
     a6c:	00001934 	andeq	r1, r0, r4, lsr r9
     a70:	03012e0a 	movweq	r2, #7690	; 0x1e0a
     a74:	3b0b3a0e 	blcc	2cf2b4 <__bss_end__+0x2c3b94>
     a78:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     a7c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     a80:	97184006 	ldrls	r4, [r8, -r6]
     a84:	13011942 	movwne	r1, #6466	; 0x1942
     a88:	050b0000 	streq	r0, [fp, #-0]
     a8c:	3a080300 	bcc	201694 <__bss_end__+0x1f5f74>
     a90:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a94:	00170213 	andseq	r0, r7, r3, lsl r2
     a98:	012e0c00 	teqeq	lr, r0, lsl #24
     a9c:	0b3a0803 	bleq	e82ab0 <__bss_end__+0xe77390>
     aa0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     aa4:	01111349 	tsteq	r1, r9, asr #6
     aa8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     aac:	01194297 			; <UNDEFINED> instruction: 0x01194297
     ab0:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     ab4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     ab8:	0b3b0b3a 	bleq	ec37a8 <__bss_end__+0xeb8088>
     abc:	17021349 	strne	r1, [r2, -r9, asr #6]
     ac0:	050e0000 	streq	r0, [lr, #-0]
     ac4:	3a0e0300 	bcc	3816cc <__bss_end__+0x375fac>
     ac8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     acc:	00180213 	andseq	r0, r8, r3, lsl r2
     ad0:	00340f00 	eorseq	r0, r4, r0, lsl #30
     ad4:	0b3a0803 	bleq	e82ae8 <__bss_end__+0xe773c8>
     ad8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     adc:	00001802 	andeq	r1, r0, r2, lsl #16
     ae0:	03003410 	movweq	r3, #1040	; 0x410
     ae4:	3b0b3a08 	blcc	2cf30c <__bss_end__+0x2c3bec>
     ae8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     aec:	11000017 	tstne	r0, r7, lsl r0
     af0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     af4:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
     af8:	00001802 	andeq	r1, r0, r2, lsl #16
     afc:	11010b12 	tstne	r1, r2, lsl fp
     b00:	01061201 	tsteq	r6, r1, lsl #4
     b04:	13000013 	movwne	r0, #19
     b08:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     b0c:	0b3b0b3a 	bleq	ec37fc <__bss_end__+0xeb80dc>
     b10:	17021349 	strne	r1, [r2, -r9, asr #6]
     b14:	89140000 	ldmdbhi	r4, {}	; <UNPREDICTABLE>
     b18:	11000182 	smlabbne	r0, r2, r1, r0
     b1c:	00133101 	andseq	r3, r3, r1, lsl #2
     b20:	82891500 	addhi	r1, r9, #0, 10
     b24:	01110101 	tsteq	r1, r1, lsl #2
     b28:	13011331 	movwne	r1, #4913	; 0x1331
     b2c:	8a160000 	bhi	580b34 <__bss_end__+0x575414>
     b30:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     b34:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     b38:	89170000 	ldmdbhi	r7, {}	; <UNPREDICTABLE>
     b3c:	11010182 	smlabbne	r1, r2, r1, r0
     b40:	00133101 	andseq	r3, r3, r1, lsl #2
     b44:	01011800 	tsteq	r1, r0, lsl #16
     b48:	13011349 	movwne	r1, #4937	; 0x1349
     b4c:	21190000 	tstcs	r9, r0
     b50:	2f134900 	svccs	0x00134900
     b54:	1a00000b 	bne	b88 <_start-0x7478>
     b58:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     b5c:	0b3a0e03 	bleq	e84370 <__bss_end__+0xe78c50>
     b60:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     b64:	06120111 			; <UNDEFINED> instruction: 0x06120111
     b68:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     b6c:	00130119 	andseq	r0, r3, r9, lsl r1
     b70:	01151b00 	tsteq	r5, r0, lsl #22
     b74:	13491927 	movtne	r1, #39207	; 0x9927
     b78:	00001301 	andeq	r1, r0, r1, lsl #6
     b7c:	4900051c 	stmdbmi	r0, {r2, r3, r4, r8, sl}
     b80:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
     b84:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     b88:	0b3a0e03 	bleq	e8439c <__bss_end__+0xe78c7c>
     b8c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     b90:	01111349 	tsteq	r1, r9, asr #6
     b94:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b98:	01194297 			; <UNDEFINED> instruction: 0x01194297
     b9c:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     ba0:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
     ba4:	341f0000 	ldrcc	r0, [pc], #-0	; bac <_start-0x7454>
     ba8:	3a0e0300 	bcc	3817b0 <__bss_end__+0x376090>
     bac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     bb0:	3c193f13 	ldccc	15, cr3, [r9], {19}
     bb4:	20000019 	andcs	r0, r0, r9, lsl r0
     bb8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     bbc:	0b3a0e03 	bleq	e843d0 <__bss_end__+0xe78cb0>
     bc0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     bc4:	0000193c 	andeq	r1, r0, ip, lsr r9
     bc8:	3f012e21 	svccc	0x00012e21
     bcc:	3a0e0319 	bcc	381838 <__bss_end__+0x376118>
     bd0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     bd4:	3c134919 	ldccc	9, cr4, [r3], {25}
     bd8:	00130119 	andseq	r0, r3, r9, lsl r1
     bdc:	00182200 	andseq	r2, r8, r0, lsl #4
     be0:	01000000 	mrseq	r0, (UNDEF: 0)
     be4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     be8:	0e030b13 	vmoveq.32	d3[0], r0
     bec:	01110e1b 	tsteq	r1, fp, lsl lr
     bf0:	17100612 			; <UNDEFINED> instruction: 0x17100612
     bf4:	24020000 	strcs	r0, [r2], #-0
     bf8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     bfc:	0008030b 	andeq	r0, r8, fp, lsl #6
     c00:	00240300 	eoreq	r0, r4, r0, lsl #6
     c04:	0b3e0b0b 	bleq	f83838 <__bss_end__+0xf78118>
     c08:	00000e03 	andeq	r0, r0, r3, lsl #28
     c0c:	0b000f04 	bleq	4824 <_start-0x37dc>
     c10:	0013490b 	andseq	r4, r3, fp, lsl #18
     c14:	00260500 	eoreq	r0, r6, r0, lsl #10
     c18:	00001349 	andeq	r1, r0, r9, asr #6
     c1c:	3f012e06 	svccc	0x00012e06
     c20:	3a0e0319 	bcc	38188c <__bss_end__+0x37616c>
     c24:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     c28:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     c2c:	97184006 	ldrls	r4, [r8, -r6]
     c30:	13011942 	movwne	r1, #6466	; 0x1942
     c34:	89070000 	stmdbhi	r7, {}	; <UNPREDICTABLE>
     c38:	11010182 	smlabbne	r1, r2, r1, r0
     c3c:	00130101 	andseq	r0, r3, r1, lsl #2
     c40:	828a0800 	addhi	r0, sl, #0, 16
     c44:	18020001 	stmdane	r2, {r0}
     c48:	00184291 	mulseq	r8, r1, r2
     c4c:	82890900 	addhi	r0, r9, #0, 18
     c50:	01110101 	tsteq	r1, r1, lsl #2
     c54:	13011331 	movwne	r1, #4913	; 0x1331
     c58:	890a0000 	stmdbhi	sl, {}	; <UNPREDICTABLE>
     c5c:	11000182 	smlabbne	r0, r2, r1, r0
     c60:	00133101 	andseq	r3, r3, r1, lsl #2
     c64:	01150b00 	tsteq	r5, r0, lsl #22
     c68:	13491927 	movtne	r1, #39207	; 0x9927
     c6c:	00001301 	andeq	r1, r0, r1, lsl #6
     c70:	4900050c 	stmdbmi	r0, {r2, r3, r8, sl}
     c74:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     c78:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     c7c:	0b3b0b3a 	bleq	ec396c <__bss_end__+0xeb824c>
     c80:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     c84:	0000193c 	andeq	r1, r0, ip, lsr r9
     c88:	3f012e0e 	svccc	0x00012e0e
     c8c:	3a0e0319 	bcc	3818f8 <__bss_end__+0x3761d8>
     c90:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     c94:	01193c19 	tsteq	r9, r9, lsl ip
     c98:	0f000013 	svceq	0x00000013
     c9c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     ca0:	0b3a0e03 	bleq	e844b4 <__bss_end__+0xe78d94>
     ca4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     ca8:	0000193c 	andeq	r1, r0, ip, lsr r9
     cac:	01110100 	tsteq	r1, r0, lsl #2
     cb0:	0b130e25 	bleq	4c454c <__bss_end__+0x4b8e2c>
     cb4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     cb8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     cbc:	00001710 	andeq	r1, r0, r0, lsl r7
     cc0:	0b002402 	bleq	9cd0 <sw_uart_printk+0x7c>
     cc4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     cc8:	03000008 	movweq	r0, #8
     ccc:	0b0b0024 	bleq	2c0d64 <__bss_end__+0x2b5644>
     cd0:	0e030b3e 	vmoveq.16	d3[0], r0
     cd4:	16040000 	strne	r0, [r4], -r0
     cd8:	3a0e0300 	bcc	3818e0 <__bss_end__+0x3761c0>
     cdc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ce0:	05000013 	streq	r0, [r0, #-19]
     ce4:	0b0b000f 	bleq	2c0d28 <__bss_end__+0x2b5608>
     ce8:	00001349 	andeq	r1, r0, r9, asr #6
     cec:	49002606 	stmdbmi	r0, {r1, r2, r9, sl, sp}
     cf0:	07000013 	smladeq	r0, r3, r0, r0
     cf4:	0b0b0113 	bleq	2c1148 <__bss_end__+0x2b5a28>
     cf8:	0b3b0b3a 	bleq	ec39e8 <__bss_end__+0xeb82c8>
     cfc:	00001301 	andeq	r1, r0, r1, lsl #6
     d00:	03000d08 	movweq	r0, #3336	; 0xd08
     d04:	3b0b3a08 	blcc	2cf52c <__bss_end__+0x2c3e0c>
     d08:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     d0c:	0900000b 	stmdbeq	r0, {r0, r1, r3}
     d10:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     d14:	0b3b0b3a 	bleq	ec3a04 <__bss_end__+0xeb82e4>
     d18:	0b381349 	bleq	e05a44 <__bss_end__+0xdfa324>
     d1c:	040a0000 	streq	r0, [sl], #-0
     d20:	3a0b0b01 	bcc	2c392c <__bss_end__+0x2b820c>
     d24:	010b3b0b 	tsteq	fp, fp, lsl #22
     d28:	0b000013 	bleq	d7c <_start-0x7284>
     d2c:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     d30:	00000d1c 	andeq	r0, r0, ip, lsl sp
     d34:	03012e0c 	movweq	r2, #7692	; 0x1e0c
     d38:	3b0b3a0e 	blcc	2cf578 <__bss_end__+0x2c3e58>
     d3c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     d40:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     d44:	97184006 	ldrls	r4, [r8, -r6]
     d48:	13011942 	movwne	r1, #6466	; 0x1942
     d4c:	050d0000 	streq	r0, [sp, #-0]
     d50:	3a080300 	bcc	201958 <__bss_end__+0x1f6238>
     d54:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d58:	00170213 	andseq	r0, r7, r3, lsl r2
     d5c:	82890e00 	addhi	r0, r9, #0, 28
     d60:	01110101 	tsteq	r1, r1, lsl #2
     d64:	00001331 	andeq	r1, r0, r1, lsr r3
     d68:	01828a0f 	orreq	r8, r2, pc, lsl #20
     d6c:	91180200 	tstls	r8, r0, lsl #4
     d70:	00001842 	andeq	r1, r0, r2, asr #16
     d74:	3f012e10 	svccc	0x00012e10
     d78:	3a0e0319 	bcc	3819e4 <__bss_end__+0x3762c4>
     d7c:	110b3b0b 	tstne	fp, fp, lsl #22
     d80:	40061201 	andmi	r1, r6, r1, lsl #4
     d84:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     d88:	00001301 	andeq	r1, r0, r1, lsl #6
     d8c:	03003411 	movweq	r3, #1041	; 0x411
     d90:	3b0b3a0e 	blcc	2cf5d0 <__bss_end__+0x2c3eb0>
     d94:	3f13490b 	svccc	0x0013490b
     d98:	00193c19 	andseq	r3, r9, r9, lsl ip
     d9c:	002e1200 	eoreq	r1, lr, r0, lsl #4
     da0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     da4:	0b3b0b3a 	bleq	ec3a94 <__bss_end__+0xeb8374>
     da8:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     dac:	34130000 	ldrcc	r0, [r3], #-0
     db0:	3a080300 	bcc	2019b8 <__bss_end__+0x1f6298>
     db4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     db8:	00170213 	andseq	r0, r7, r3, lsl r2
     dbc:	00341400 	eorseq	r1, r4, r0, lsl #8
     dc0:	0b3a0e03 	bleq	e845d4 <__bss_end__+0xe78eb4>
     dc4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     dc8:	89150000 	ldmdbhi	r5, {}	; <UNPREDICTABLE>
     dcc:	11000182 	smlabbne	r0, r2, r1, r0
     dd0:	00133101 	andseq	r3, r3, r1, lsl #2
     dd4:	82891600 	addhi	r1, r9, #0, 12
     dd8:	01110101 	tsteq	r1, r1, lsl #2
     ddc:	13011331 	movwne	r1, #4913	; 0x1331
     de0:	34170000 	ldrcc	r0, [r7], #-0
     de4:	3a0e0300 	bcc	3819ec <__bss_end__+0x3762cc>
     de8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     dec:	00180213 	andseq	r0, r8, r3, lsl r2
     df0:	01151800 	tsteq	r5, r0, lsl #16
     df4:	13491927 	movtne	r1, #39207	; 0x9927
     df8:	00001301 	andeq	r1, r0, r1, lsl #6
     dfc:	49000519 	stmdbmi	r0, {r0, r3, r4, r8, sl}
     e00:	1a000013 	bne	e54 <_start-0x71ac>
     e04:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     e08:	0b3a0e03 	bleq	e8461c <__bss_end__+0xe78efc>
     e0c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     e10:	1301193c 	movwne	r1, #6460	; 0x193c
     e14:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
     e18:	03193f00 	tsteq	r9, #0, 30
     e1c:	3b0b3a0e 	blcc	2cf65c <__bss_end__+0x2c3f3c>
     e20:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     e24:	00193c13 	andseq	r3, r9, r3, lsl ip
     e28:	012e1c00 	teqeq	lr, r0, lsl #24
     e2c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     e30:	0b3b0b3a 	bleq	ec3b20 <__bss_end__+0xeb8400>
     e34:	13491927 	movtne	r1, #39207	; 0x9927
     e38:	1301193c 	movwne	r1, #6460	; 0x193c
     e3c:	181d0000 	ldmdane	sp, {}	; <UNPREDICTABLE>
     e40:	00000000 	andeq	r0, r0, r0
     e44:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     e48:	030b130e 	movweq	r1, #45838	; 0xb30e
     e4c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
     e50:	10011117 	andne	r1, r1, r7, lsl r1
     e54:	02000017 	andeq	r0, r0, #23
     e58:	0b0b0024 	bleq	2c0ef0 <__bss_end__+0x2b57d0>
     e5c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     e60:	24030000 	strcs	r0, [r3], #-0
     e64:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     e68:	000e030b 	andeq	r0, lr, fp, lsl #6
     e6c:	012e0400 	teqeq	lr, r0, lsl #8
     e70:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     e74:	0b3b0b3a 	bleq	ec3b64 <__bss_end__+0xeb8444>
     e78:	13491927 	movtne	r1, #39207	; 0x9927
     e7c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     e80:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     e84:	00130119 	andseq	r0, r3, r9, lsl r1
     e88:	00340500 	eorseq	r0, r4, r0, lsl #10
     e8c:	0b3a0e03 	bleq	e846a0 <__bss_end__+0xe78f80>
     e90:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e94:	00001702 	andeq	r1, r0, r2, lsl #14
     e98:	3f012e06 	svccc	0x00012e06
     e9c:	3a0e0319 	bcc	381b08 <__bss_end__+0x3763e8>
     ea0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     ea4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     ea8:	97184006 	ldrls	r4, [r8, -r6]
     eac:	13011942 	movwne	r1, #6466	; 0x1942
     eb0:	34070000 	strcc	r0, [r7], #-0
     eb4:	3a0e0300 	bcc	381abc <__bss_end__+0x37639c>
     eb8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ebc:	00061c13 	andeq	r1, r6, r3, lsl ip
     ec0:	00340800 	eorseq	r0, r4, r0, lsl #16
     ec4:	0b3a0e03 	bleq	e846d8 <__bss_end__+0xe78fb8>
     ec8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ecc:	00000b1c 	andeq	r0, r0, ip, lsl fp
     ed0:	01828909 	orreq	r8, r2, r9, lsl #18
     ed4:	31011100 	mrscc	r1, (UNDEF: 17)
     ed8:	0a000013 	beq	f2c <_start-0x70d4>
     edc:	01018289 	smlabbeq	r1, r9, r2, r8
     ee0:	13310111 	teqne	r1, #1073741828	; 0x40000004
     ee4:	00001301 	andeq	r1, r0, r1, lsl #6
     ee8:	01828a0b 	orreq	r8, r2, fp, lsl #20
     eec:	91180200 	tstls	r8, r0, lsl #4
     ef0:	00001842 	andeq	r1, r0, r2, asr #16
     ef4:	0182890c 	orreq	r8, r2, ip, lsl #18
     ef8:	31011101 	tstcc	r1, r1, lsl #2
     efc:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     f00:	13490026 	movtne	r0, #36902	; 0x9026
     f04:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
     f08:	03193f01 	tsteq	r9, #1, 30
     f0c:	3b0b3a0e 	blcc	2cf74c <__bss_end__+0x2c402c>
     f10:	3c19270b 	ldccc	7, cr2, [r9], {11}
     f14:	00130119 	andseq	r0, r3, r9, lsl r1
     f18:	00050f00 	andeq	r0, r5, r0, lsl #30
     f1c:	00001349 	andeq	r1, r0, r9, asr #6
     f20:	3f012e10 	svccc	0x00012e10
     f24:	3a0e0319 	bcc	381b90 <__bss_end__+0x376470>
     f28:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     f2c:	00193c19 	andseq	r3, r9, r9, lsl ip
     f30:	11010000 	mrsne	r0, (UNDEF: 1)
     f34:	130e2501 	movwne	r2, #58625	; 0xe501
     f38:	1b0e030b 	blne	381b6c <__bss_end__+0x37644c>
     f3c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     f40:	00171006 	andseq	r1, r7, r6
     f44:	00240200 	eoreq	r0, r4, r0, lsl #4
     f48:	0b3e0b0b 	bleq	f83b7c <__bss_end__+0xf7845c>
     f4c:	00000803 	andeq	r0, r0, r3, lsl #16
     f50:	0b002403 	bleq	9f64 <software_interrupt_vector+0x40>
     f54:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     f58:	0400000e 	streq	r0, [r0], #-14
     f5c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     f60:	0b3a0e03 	bleq	e84774 <__bss_end__+0xe79054>
     f64:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     f68:	06120111 			; <UNDEFINED> instruction: 0x06120111
     f6c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     f70:	00130119 	andseq	r0, r3, r9, lsl r1
     f74:	00050500 	andeq	r0, r5, r0, lsl #10
     f78:	0b3a0e03 	bleq	e8478c <__bss_end__+0xe7906c>
     f7c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f80:	00001702 	andeq	r1, r0, r2, lsl #14
     f84:	3f012e06 	svccc	0x00012e06
     f88:	3a0e0319 	bcc	381bf4 <__bss_end__+0x3764d4>
     f8c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     f90:	11134919 	tstne	r3, r9, lsl r9
     f94:	40061201 	andmi	r1, r6, r1, lsl #4
     f98:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     f9c:	00001301 	andeq	r1, r0, r1, lsl #6
     fa0:	01828907 	orreq	r8, r2, r7, lsl #18
     fa4:	31011101 	tstcc	r1, r1, lsl #2
     fa8:	08000013 	stmdaeq	r0, {r0, r1, r4}
     fac:	0001828a 	andeq	r8, r1, sl, lsl #5
     fb0:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     fb4:	09000018 	stmdbeq	r0, {r3, r4}
     fb8:	08030034 	stmdaeq	r3, {r2, r4, r5}
     fbc:	0b3b0b3a 	bleq	ec3cac <__bss_end__+0xeb858c>
     fc0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     fc4:	890a0000 	stmdbhi	sl, {}	; <UNPREDICTABLE>
     fc8:	11000182 	smlabbne	r0, r2, r1, r0
     fcc:	00133101 	andseq	r3, r3, r1, lsl #2
     fd0:	00050b00 	andeq	r0, r5, r0, lsl #22
     fd4:	0b3a0803 	bleq	e82fe8 <__bss_end__+0xe778c8>
     fd8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     fdc:	00001702 	andeq	r1, r0, r2, lsl #14
     fe0:	11010b0c 	tstne	r1, ip, lsl #22
     fe4:	01061201 	tsteq	r6, r1, lsl #4
     fe8:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     fec:	08030034 	stmdaeq	r3, {r2, r4, r5}
     ff0:	0b3b0b3a 	bleq	ec3ce0 <__bss_end__+0xeb85c0>
     ff4:	17021349 	strne	r1, [r2, -r9, asr #6]
     ff8:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
     ffc:	03193f01 	tsteq	r9, #1, 30
    1000:	3b0b3a0e 	blcc	2cf840 <__bss_end__+0x2c4120>
    1004:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1008:	00193c13 	andseq	r3, r9, r3, lsl ip
    100c:	00050f00 	andeq	r0, r5, r0, lsl #30
    1010:	00001349 	andeq	r1, r0, r9, asr #6
    1014:	01110100 	tsteq	r1, r0, lsl #2
    1018:	0b130e25 	bleq	4c48b4 <__bss_end__+0x4b9194>
    101c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1020:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1024:	00001710 	andeq	r1, r0, r0, lsl r7
    1028:	0b002402 	bleq	a038 <data_abort_vector+0x4>
    102c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1030:	03000008 	movweq	r0, #8
    1034:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1038:	0b3b0b3a 	bleq	ec3d28 <__bss_end__+0xeb8608>
    103c:	00001349 	andeq	r1, r0, r9, asr #6
    1040:	0b002404 	bleq	a058 <data_abort_vector+0x24>
    1044:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1048:	0500000e 	streq	r0, [r0, #-14]
    104c:	0b0b000f 	bleq	2c1090 <__bss_end__+0x2b5970>
    1050:	0f060000 	svceq	0x00060000
    1054:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1058:	07000013 	smladeq	r0, r3, r0, r0
    105c:	13490026 	movtne	r0, #36902	; 0x9026
    1060:	01080000 	mrseq	r0, (UNDEF: 8)
    1064:	01134901 	tsteq	r3, r1, lsl #18
    1068:	09000013 	stmdbeq	r0, {r0, r1, r4}
    106c:	13490021 	movtne	r0, #36897	; 0x9021
    1070:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1074:	3f012e0a 	svccc	0x00012e0a
    1078:	3a0e0319 	bcc	381ce4 <__bss_end__+0x3765c4>
    107c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1080:	11134919 	tstne	r3, r9, lsl r9
    1084:	40061201 	andmi	r1, r6, r1, lsl #4
    1088:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    108c:	00001301 	andeq	r1, r0, r1, lsl #6
    1090:	0300050b 	movweq	r0, #1291	; 0x50b
    1094:	3b0b3a0e 	blcc	2cf8d4 <__bss_end__+0x2c41b4>
    1098:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    109c:	0c000017 	stceq	0, cr0, [r0], {23}
    10a0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    10a4:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
    10a8:	00001802 	andeq	r1, r0, r2, lsl #16
    10ac:	0300340d 	movweq	r3, #1037	; 0x40d
    10b0:	3b0b3a0e 	blcc	2cf8f0 <__bss_end__+0x2c41d0>
    10b4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    10b8:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
    10bc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    10c0:	0b3b0b3a 	bleq	ec3db0 <__bss_end__+0xeb8690>
    10c4:	17021349 	strne	r1, [r2, -r9, asr #6]
    10c8:	890f0000 	stmdbhi	pc, {}	; <UNPREDICTABLE>
    10cc:	11000182 	smlabbne	r0, r2, r1, r0
    10d0:	00133101 	andseq	r3, r3, r1, lsl #2
    10d4:	82891000 	addhi	r1, r9, #0
    10d8:	01110101 	tsteq	r1, r1, lsl #2
    10dc:	13011331 	movwne	r1, #4913	; 0x1331
    10e0:	8a110000 	bhi	4410e8 <__bss_end__+0x4359c8>
    10e4:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    10e8:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    10ec:	89120000 	ldmdbhi	r2, {}	; <UNPREDICTABLE>
    10f0:	11010182 	smlabbne	r1, r2, r1, r0
    10f4:	00133101 	andseq	r3, r3, r1, lsl #2
    10f8:	012e1300 	teqeq	lr, r0, lsl #6
    10fc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1100:	0b3b0b3a 	bleq	ec3df0 <__bss_end__+0xeb86d0>
    1104:	01111927 	tsteq	r1, r7, lsr #18
    1108:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    110c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1110:	14000013 	strne	r0, [r0], #-19
    1114:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1118:	0b3a0e03 	bleq	e8492c <__bss_end__+0xe7920c>
    111c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1120:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1124:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1128:	15000019 	strne	r0, [r0, #-25]
    112c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1130:	0b3a0e03 	bleq	e84944 <__bss_end__+0xe79224>
    1134:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1138:	01111349 	tsteq	r1, r9, asr #6
    113c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1140:	00194297 	mulseq	r9, r7, r2
    1144:	00341600 	eorseq	r1, r4, r0, lsl #12
    1148:	0b3a0e03 	bleq	e8495c <__bss_end__+0xe7923c>
    114c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1150:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1154:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
    1158:	03193f00 	tsteq	r9, #0, 30
    115c:	3b0b3a0e 	blcc	2cf99c <__bss_end__+0x2c427c>
    1160:	3c19270b 	ldccc	7, cr2, [r9], {11}
    1164:	18000019 	stmdane	r0, {r0, r3, r4}
    1168:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    116c:	0b3a0e03 	bleq	e84980 <__bss_end__+0xe79260>
    1170:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1174:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    1178:	00001301 	andeq	r1, r0, r1, lsl #6
    117c:	49000519 	stmdbmi	r0, {r0, r3, r4, r8, sl}
    1180:	1a000013 	bne	11d4 <_start-0x6e2c>
    1184:	00000018 	andeq	r0, r0, r8, lsl r0
    1188:	3f012e1b 	svccc	0x00012e1b
    118c:	3a0e0319 	bcc	381df8 <__bss_end__+0x3766d8>
    1190:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1194:	3c134919 	ldccc	9, cr4, [r3], {25}
    1198:	00000019 	andeq	r0, r0, r9, lsl r0
    119c:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    11a0:	030b130e 	movweq	r1, #45838	; 0xb30e
    11a4:	110e1b0e 	tstne	lr, lr, lsl #22
    11a8:	10061201 	andne	r1, r6, r1, lsl #4
    11ac:	02000017 	andeq	r0, r0, #23
    11b0:	0b0b0024 	bleq	2c1248 <__bss_end__+0x2b5b28>
    11b4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    11b8:	24030000 	strcs	r0, [r3], #-0
    11bc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    11c0:	000e030b 	andeq	r0, lr, fp, lsl #6
    11c4:	00160400 	andseq	r0, r6, r0, lsl #8
    11c8:	0b3a0e03 	bleq	e849dc <__bss_end__+0xe792bc>
    11cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    11d0:	0f050000 	svceq	0x00050000
    11d4:	000b0b00 	andeq	r0, fp, r0, lsl #22
    11d8:	000f0600 	andeq	r0, pc, r0, lsl #12
    11dc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    11e0:	26070000 	strcs	r0, [r7], -r0
    11e4:	00134900 	andseq	r4, r3, r0, lsl #18
    11e8:	01130800 	tsteq	r3, r0, lsl #16
    11ec:	0b3a0b0b 	bleq	e83e20 <__bss_end__+0xe78700>
    11f0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    11f4:	0d090000 	stceq	0, cr0, [r9, #-0]
    11f8:	3a080300 	bcc	201e00 <__bss_end__+0x1f66e0>
    11fc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1200:	000b3813 	andeq	r3, fp, r3, lsl r8
    1204:	000d0a00 	andeq	r0, sp, r0, lsl #20
    1208:	0b3a0e03 	bleq	e84a1c <__bss_end__+0xe792fc>
    120c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1210:	00000b38 	andeq	r0, r0, r8, lsr fp
    1214:	0301130b 	movweq	r1, #4875	; 0x130b
    1218:	3a0b0b0e 	bcc	2c3e58 <__bss_end__+0x2b8738>
    121c:	010b3b0b 	tsteq	fp, fp, lsl #22
    1220:	0c000013 	stceq	0, cr0, [r0], {19}
    1224:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1228:	0b381349 	bleq	e05f54 <__bss_end__+0xdfa834>
    122c:	00001934 	andeq	r1, r0, r4, lsr r9
    1230:	03012e0d 	movweq	r2, #7693	; 0x1e0d
    1234:	3b0b3a0e 	blcc	2cfa74 <__bss_end__+0x2c4354>
    1238:	2019270b 	andscs	r2, r9, fp, lsl #14
    123c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1240:	00050e00 	andeq	r0, r5, r0, lsl #28
    1244:	0b3a0e03 	bleq	e84a58 <__bss_end__+0xe79338>
    1248:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    124c:	050f0000 	streq	r0, [pc, #-0]	; 1254 <_start-0x6dac>
    1250:	3a080300 	bcc	201e58 <__bss_end__+0x1f6738>
    1254:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1258:	10000013 	andne	r0, r0, r3, lsl r0
    125c:	0000010b 	andeq	r0, r0, fp, lsl #2
    1260:	03003411 	movweq	r3, #1041	; 0x411
    1264:	3b0b3a0e 	blcc	2cfaa4 <__bss_end__+0x2c4384>
    1268:	0013490b 	andseq	r4, r3, fp, lsl #18
    126c:	012e1200 	teqeq	lr, r0, lsl #4
    1270:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1274:	0b3b0b3a 	bleq	ec3f64 <__bss_end__+0xeb8844>
    1278:	01111927 	tsteq	r1, r7, lsr #18
    127c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1280:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1284:	13000013 	movwne	r0, #19
    1288:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    128c:	0b3b0b3a 	bleq	ec3f7c <__bss_end__+0xeb885c>
    1290:	17021349 	strne	r1, [r2, -r9, asr #6]
    1294:	05140000 	ldreq	r0, [r4, #-0]
    1298:	3a080300 	bcc	201ea0 <__bss_end__+0x1f6780>
    129c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    12a0:	00170213 	andseq	r0, r7, r3, lsl r2
    12a4:	00341500 	eorseq	r1, r4, r0, lsl #10
    12a8:	0b3a0803 	bleq	e832bc <__bss_end__+0xe77b9c>
    12ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    12b0:	00001802 	andeq	r1, r0, r2, lsl #16
    12b4:	03003416 	movweq	r3, #1046	; 0x416
    12b8:	3b0b3a08 	blcc	2cfae0 <__bss_end__+0x2c43c0>
    12bc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    12c0:	17000017 	smladne	r0, r7, r0, r0
    12c4:	0111010b 	tsteq	r1, fp, lsl #2
    12c8:	13010612 	movwne	r0, #5650	; 0x1612
    12cc:	34180000 	ldrcc	r0, [r8], #-0
    12d0:	3a0e0300 	bcc	381ed8 <__bss_end__+0x3767b8>
    12d4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    12d8:	00180213 	andseq	r0, r8, r3, lsl r2
    12dc:	011d1900 	tsteq	sp, r0, lsl #18
    12e0:	01111331 	tsteq	r1, r1, lsr r3
    12e4:	0b580612 	bleq	1602b34 <__bss_end__+0x15f7414>
    12e8:	13010b59 	movwne	r0, #7001	; 0x1b59
    12ec:	051a0000 	ldreq	r0, [sl, #-0]
    12f0:	02133100 	andseq	r3, r3, #0, 2
    12f4:	1b000017 	blne	1358 <_start-0x6ca8>
    12f8:	13310005 	teqne	r1, #5
    12fc:	00001802 	andeq	r1, r0, r2, lsl #16
    1300:	3100051c 	tstcc	r0, ip, lsl r5
    1304:	000b1c13 	andeq	r1, fp, r3, lsl ip
    1308:	010b1d00 	tsteq	fp, r0, lsl #26
    130c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1310:	341e0000 	ldrcc	r0, [lr], #-0
    1314:	02133100 	andseq	r3, r3, #0, 2
    1318:	1f000017 	svcne	0x00000017
    131c:	01018289 	smlabbeq	r1, r9, r2, r8
    1320:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1324:	8a200000 	bhi	80132c <__bss_end__+0x7f5c0c>
    1328:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    132c:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    1330:	1d210000 	stcne	0, cr0, [r1, #-0]
    1334:	11133101 	tstne	r3, r1, lsl #2
    1338:	58061201 	stmdapl	r6, {r0, r9, ip}
    133c:	000b590b 	andeq	r5, fp, fp, lsl #18
    1340:	012e2200 	teqeq	lr, r0, lsl #4
    1344:	0b3a0e03 	bleq	e84b58 <__bss_end__+0xe79438>
    1348:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    134c:	0b201349 	bleq	806078 <__bss_end__+0x7fa958>
    1350:	00001301 	andeq	r1, r0, r1, lsl #6
    1354:	3f012e23 	svccc	0x00012e23
    1358:	3a0e0319 	bcc	381fc4 <__bss_end__+0x3768a4>
    135c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1360:	11134919 	tstne	r3, r9, lsl r9
    1364:	40061201 	andmi	r1, r6, r1, lsl #4
    1368:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    136c:	00001301 	andeq	r1, r0, r1, lsl #6
    1370:	01828924 	orreq	r8, r2, r4, lsr #18
    1374:	31011100 	mrscc	r1, (UNDEF: 17)
    1378:	25000013 	strcs	r0, [r0, #-19]
    137c:	01018289 	smlabbeq	r1, r9, r2, r8
    1380:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1384:	00001301 	andeq	r1, r0, r1, lsl #6
    1388:	03003426 	movweq	r3, #1062	; 0x426
    138c:	3b0b3a0e 	blcc	2cfbcc <__bss_end__+0x2c44ac>
    1390:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1394:	27000017 	smladcs	r0, r7, r0, r0
    1398:	13310005 	teqne	r1, #5
    139c:	05280000 	streq	r0, [r8, #-0]!
    13a0:	3a0e0300 	bcc	381fa8 <__bss_end__+0x376888>
    13a4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    13a8:	00180213 	andseq	r0, r8, r3, lsl r2
    13ac:	00342900 	eorseq	r2, r4, r0, lsl #18
    13b0:	13490e03 	movtne	r0, #40451	; 0x9e03
    13b4:	18021934 	stmdane	r2, {r2, r4, r5, r8, fp, ip}
    13b8:	012a0000 	teqeq	sl, r0
    13bc:	01134901 	tsteq	r3, r1, lsl #18
    13c0:	2b000013 	blcs	1414 <_start-0x6bec>
    13c4:	13490021 	movtne	r0, #36897	; 0x9021
    13c8:	00000b2f 	andeq	r0, r0, pc, lsr #22
    13cc:	0300342c 	movweq	r3, #1068	; 0x42c
    13d0:	3b0b3a08 	blcc	2cfbf8 <__bss_end__+0x2c44d8>
    13d4:	1c13490b 	ldcne	9, cr4, [r3], {11}
    13d8:	2d000006 	stccs	0, cr0, [r0, #-24]	; 0xffffffe8
    13dc:	08030034 	stmdaeq	r3, {r2, r4, r5}
    13e0:	0b3b0b3a 	bleq	ec40d0 <__bss_end__+0xeb89b0>
    13e4:	0b1c1349 	bleq	706110 <__bss_end__+0x6fa9f0>
    13e8:	052e0000 	streq	r0, [lr, #-0]!
    13ec:	3a080300 	bcc	201ff4 <__bss_end__+0x1f68d4>
    13f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    13f4:	00180213 	andseq	r0, r8, r3, lsl r2
    13f8:	00182f00 	andseq	r2, r8, r0, lsl #30
    13fc:	21300000 	teqcs	r0, r0
    1400:	2f134900 	svccs	0x00134900
    1404:	31000005 	tstcc	r0, r5
    1408:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    140c:	0b3a0e03 	bleq	e84c20 <__bss_end__+0xe79500>
    1410:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1414:	1301193c 	movwne	r1, #6460	; 0x193c
    1418:	05320000 	ldreq	r0, [r2, #-0]!
    141c:	00134900 	andseq	r4, r3, r0, lsl #18
    1420:	002e3300 	eoreq	r3, lr, r0, lsl #6
    1424:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1428:	0b3b0b3a 	bleq	ec4118 <__bss_end__+0xeb89f8>
    142c:	13491927 	movtne	r1, #39207	; 0x9927
    1430:	0000193c 	andeq	r1, r0, ip, lsr r9
    1434:	3f012e34 	svccc	0x00012e34
    1438:	3a0e0319 	bcc	3820a4 <__bss_end__+0x376984>
    143c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1440:	3c134919 	ldccc	9, cr4, [r3], {25}
    1444:	00130119 	andseq	r0, r3, r9, lsl r1
    1448:	002e3500 	eoreq	r3, lr, r0, lsl #10
    144c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1450:	0b3b0b3a 	bleq	ec4140 <__bss_end__+0xeb8a20>
    1454:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    1458:	2e360000 	cdpcs	0, 3, cr0, cr6, cr0, {0}
    145c:	03193f01 	tsteq	r9, #1, 30
    1460:	3b0b3a0e 	blcc	2cfca0 <__bss_end__+0x2c4580>
    1464:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1468:	00193c13 	andseq	r3, r9, r3, lsl ip
    146c:	11010000 	mrsne	r0, (UNDEF: 1)
    1470:	130e2501 	movwne	r2, #58625	; 0xe501
    1474:	1b0e030b 	blne	3820a8 <__bss_end__+0x376988>
    1478:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    147c:	00171006 	andseq	r1, r7, r6
    1480:	00240200 	eoreq	r0, r4, r0, lsl #4
    1484:	0b3e0b0b 	bleq	f840b8 <__bss_end__+0xf78998>
    1488:	00000803 	andeq	r0, r0, r3, lsl #16
    148c:	0b002403 	bleq	a4a0 <gpio_set_function+0x10>
    1490:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1494:	0400000e 	streq	r0, [r0], #-14
    1498:	0b0b0104 	bleq	2c18b0 <__bss_end__+0x2b6190>
    149c:	0b3b0b3a 	bleq	ec418c <__bss_end__+0xeb8a6c>
    14a0:	00001301 	andeq	r1, r0, r1, lsl #6
    14a4:	03002805 	movweq	r2, #2053	; 0x805
    14a8:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    14ac:	00160600 	andseq	r0, r6, r0, lsl #12
    14b0:	0b3a0e03 	bleq	e84cc4 <__bss_end__+0xe795a4>
    14b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    14b8:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
    14bc:	03193f01 	tsteq	r9, #1, 30
    14c0:	3b0b3a0e 	blcc	2cfd00 <__bss_end__+0x2c45e0>
    14c4:	1119270b 	tstne	r9, fp, lsl #14
    14c8:	40061201 	andmi	r1, r6, r1, lsl #4
    14cc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    14d0:	00001301 	andeq	r1, r0, r1, lsl #6
    14d4:	01828908 	orreq	r8, r2, r8, lsl #18
    14d8:	31011100 	mrscc	r1, (UNDEF: 17)
    14dc:	09000013 	stmdbeq	r0, {r0, r1, r4}
    14e0:	01018289 	smlabbeq	r1, r9, r2, r8
    14e4:	13310111 	teqne	r1, #1073741828	; 0x40000004
    14e8:	00001301 	andeq	r1, r0, r1, lsl #6
    14ec:	01828a0a 	orreq	r8, r2, sl, lsl #20
    14f0:	91180200 	tstls	r8, r0, lsl #4
    14f4:	00001842 	andeq	r1, r0, r2, asr #16
    14f8:	3f012e0b 	svccc	0x00012e0b
    14fc:	3a0e0319 	bcc	382168 <__bss_end__+0x376a48>
    1500:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1504:	11134919 	tstne	r3, r9, lsl r9
    1508:	40061201 	andmi	r1, r6, r1, lsl #4
    150c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1510:	00001301 	andeq	r1, r0, r1, lsl #6
    1514:	0300050c 	movweq	r0, #1292	; 0x50c
    1518:	3b0b3a08 	blcc	2cfd40 <__bss_end__+0x2c4620>
    151c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1520:	0d000017 	stceq	0, cr0, [r0, #-92]	; 0xffffffa4
    1524:	01018289 	smlabbeq	r1, r9, r2, r8
    1528:	13310111 	teqne	r1, #1073741828	; 0x40000004
    152c:	340e0000 	strcc	r0, [lr], #-0
    1530:	3a0e0300 	bcc	382138 <__bss_end__+0x376a18>
    1534:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1538:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    153c:	0f000018 	svceq	0x00000018
    1540:	0b0b000f 	bleq	2c1584 <__bss_end__+0x2b5e64>
    1544:	00001349 	andeq	r1, r0, r9, asr #6
    1548:	49003510 	stmdbmi	r0, {r4, r8, sl, ip, sp}
    154c:	11000013 	tstne	r0, r3, lsl r0
    1550:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1554:	0b3a0e03 	bleq	e84d68 <__bss_end__+0xe79648>
    1558:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    155c:	0000193c 	andeq	r1, r0, ip, lsr r9
    1560:	3f012e12 	svccc	0x00012e12
    1564:	3a0e0319 	bcc	3821d0 <__bss_end__+0x376ab0>
    1568:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    156c:	01193c19 	tsteq	r9, r9, lsl ip
    1570:	13000013 	movwne	r0, #19
    1574:	13490005 	movtne	r0, #36869	; 0x9005
    1578:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    157c:	03193f01 	tsteq	r9, #1, 30
    1580:	3b0b3a0e 	blcc	2cfdc0 <__bss_end__+0x2c46a0>
    1584:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1588:	01193c13 	tsteq	r9, r3, lsl ip
    158c:	15000013 	strne	r0, [r0, #-19]
    1590:	13490026 	movtne	r0, #36902	; 0x9026
    1594:	35160000 	ldrcc	r0, [r6, #-0]
    1598:	00000000 	andeq	r0, r0, r0
    159c:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    15a0:	030b130e 	movweq	r1, #45838	; 0xb30e
    15a4:	110e1b0e 	tstne	lr, lr, lsl #22
    15a8:	10061201 	andne	r1, r6, r1, lsl #4
    15ac:	02000017 	andeq	r0, r0, #23
    15b0:	0b0b0024 	bleq	2c1648 <__bss_end__+0x2b5f28>
    15b4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    15b8:	24030000 	strcs	r0, [r3], #-0
    15bc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    15c0:	000e030b 	andeq	r0, lr, fp, lsl #6
    15c4:	000f0400 	andeq	r0, pc, r0, lsl #8
    15c8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    15cc:	26050000 	strcs	r0, [r5], -r0
    15d0:	00134900 	andseq	r4, r3, r0, lsl #18
    15d4:	01010600 	tsteq	r1, r0, lsl #12
    15d8:	13011349 	movwne	r1, #4937	; 0x1349
    15dc:	21070000 	mrscs	r0, (UNDEF: 7)
    15e0:	2f134900 	svccs	0x00134900
    15e4:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    15e8:	0b0b0104 	bleq	2c1a00 <__bss_end__+0x2b62e0>
    15ec:	0b3b0b3a 	bleq	ec42dc <__bss_end__+0xeb8bbc>
    15f0:	00001301 	andeq	r1, r0, r1, lsl #6
    15f4:	03002809 	movweq	r2, #2057	; 0x809
    15f8:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    15fc:	012e0a00 	teqeq	lr, r0, lsl #20
    1600:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1604:	0b3b0b3a 	bleq	ec42f4 <__bss_end__+0xeb8bd4>
    1608:	01111927 	tsteq	r1, r7, lsr #18
    160c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1610:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1614:	0b000013 	bleq	1668 <_start-0x6998>
    1618:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    161c:	0b3b0b3a 	bleq	ec430c <__bss_end__+0xeb8bec>
    1620:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1624:	0000193c 	andeq	r1, r0, ip, lsr r9
    1628:	0300340c 	movweq	r3, #1036	; 0x40c
    162c:	3b0b3a08 	blcc	2cfe54 <__bss_end__+0x2c4734>
    1630:	1c13490b 	ldcne	9, cr4, [r3], {11}
    1634:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    1638:	08030034 	stmdaeq	r3, {r2, r4, r5}
    163c:	0b3b0b3a 	bleq	ec432c <__bss_end__+0xeb8c0c>
    1640:	00001349 	andeq	r1, r0, r9, asr #6
    1644:	0300340e 	movweq	r3, #1038	; 0x40e
    1648:	3b0b3a08 	blcc	2cfe70 <__bss_end__+0x2c4750>
    164c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1650:	0f000018 	svceq	0x00000018
    1654:	0111010b 	tsteq	r1, fp, lsl #2
    1658:	13010612 	movwne	r0, #5650	; 0x1612
    165c:	34100000 	ldrcc	r0, [r0], #-0
    1660:	3a080300 	bcc	202268 <__bss_end__+0x1f6b48>
    1664:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1668:	00170213 	andseq	r0, r7, r3, lsl r2
    166c:	82891100 	addhi	r1, r9, #0, 2
    1670:	01110101 	tsteq	r1, r1, lsl #2
    1674:	13011331 	movwne	r1, #4913	; 0x1331
    1678:	8a120000 	bhi	481680 <__bss_end__+0x475f60>
    167c:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    1680:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    1684:	89130000 	ldmdbhi	r3, {}	; <UNPREDICTABLE>
    1688:	11000182 	smlabbne	r0, r2, r1, r0
    168c:	00133101 	andseq	r3, r3, r1, lsl #2
    1690:	00051400 	andeq	r1, r5, r0, lsl #8
    1694:	0b3a0803 	bleq	e836a8 <__bss_end__+0xe77f88>
    1698:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    169c:	00001702 	andeq	r1, r0, r2, lsl #14
    16a0:	03003415 	movweq	r3, #1045	; 0x415
    16a4:	3413490e 	ldrcc	r4, [r3], #-2318	; 0x90e
    16a8:	00180219 	andseq	r0, r8, r9, lsl r2
    16ac:	012e1600 	teqeq	lr, r0, lsl #12
    16b0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    16b4:	0b3b0b3a 	bleq	ec43a4 <__bss_end__+0xeb8c84>
    16b8:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    16bc:	00001301 	andeq	r1, r0, r1, lsl #6
    16c0:	49000517 	stmdbmi	r0, {r0, r1, r2, r4, r8, sl}
    16c4:	18000013 	stmdane	r0, {r0, r1, r4}
    16c8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    16cc:	0b3a0e03 	bleq	e84ee0 <__bss_end__+0xe797c0>
    16d0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    16d4:	0000193c 	andeq	r1, r0, ip, lsr r9
    16d8:	3f012e19 	svccc	0x00012e19
    16dc:	3a0e0319 	bcc	382348 <__bss_end__+0x376c28>
    16e0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    16e4:	3c134919 	ldccc	9, cr4, [r3], {25}
    16e8:	00130119 	andseq	r0, r3, r9, lsl r1
    16ec:	00181a00 	andseq	r1, r8, r0, lsl #20
    16f0:	01000000 	mrseq	r0, (UNDEF: 0)
    16f4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    16f8:	0e030b13 	vmoveq.32	d3[0], r0
    16fc:	01110e1b 	tsteq	r1, fp, lsl lr
    1700:	17100612 			; <UNDEFINED> instruction: 0x17100612
    1704:	24020000 	strcs	r0, [r2], #-0
    1708:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    170c:	0008030b 	andeq	r0, r8, fp, lsl #6
    1710:	00240300 	eoreq	r0, r4, r0, lsl #6
    1714:	0b3e0b0b 	bleq	f84348 <__bss_end__+0xf78c28>
    1718:	00000e03 	andeq	r0, r0, r3, lsl #28
    171c:	03001604 	movweq	r1, #1540	; 0x604
    1720:	3b0b3a0e 	blcc	2cff60 <__bss_end__+0x2c4840>
    1724:	0013490b 	andseq	r4, r3, fp, lsl #18
    1728:	000f0500 	andeq	r0, pc, r0, lsl #10
    172c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1730:	26060000 	strcs	r0, [r6], -r0
    1734:	00134900 	andseq	r4, r3, r0, lsl #18
    1738:	01130700 	tsteq	r3, r0, lsl #14
    173c:	0b3a0b0b 	bleq	e84370 <__bss_end__+0xe78c50>
    1740:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1744:	0d080000 	stceq	0, cr0, [r8, #-0]
    1748:	3a0e0300 	bcc	382350 <__bss_end__+0x376c30>
    174c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1750:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    1754:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    1758:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    175c:	0b0b0104 	bleq	2c1b74 <__bss_end__+0x2b6454>
    1760:	0b3b0b3a 	bleq	ec4450 <__bss_end__+0xeb8d30>
    1764:	00001301 	andeq	r1, r0, r1, lsl #6
    1768:	0300280a 	movweq	r2, #2058	; 0x80a
    176c:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    1770:	012e0b00 	teqeq	lr, r0, lsl #22
    1774:	0b3a0e03 	bleq	e84f88 <__bss_end__+0xe79868>
    1778:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    177c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1780:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1784:	00130119 	andseq	r0, r3, r9, lsl r1
    1788:	00340c00 	eorseq	r0, r4, r0, lsl #24
    178c:	13490e03 	movtne	r0, #40451	; 0x9e03
    1790:	18021934 	stmdane	r2, {r2, r4, r5, r8, fp, ip}
    1794:	890d0000 	stmdbhi	sp, {}	; <UNPREDICTABLE>
    1798:	11010182 	smlabbne	r1, r2, r1, r0
    179c:	00133101 	andseq	r3, r3, r1, lsl #2
    17a0:	828a0e00 	addhi	r0, sl, #0, 28
    17a4:	18020001 	stmdane	r2, {r0}
    17a8:	00184291 	mulseq	r8, r1, r2
    17ac:	01010f00 	tsteq	r1, r0, lsl #30
    17b0:	13011349 	movwne	r1, #4937	; 0x1349
    17b4:	21100000 	tstcs	r0, r0
    17b8:	2f134900 	svccs	0x00134900
    17bc:	1100000b 	tstne	r0, fp
    17c0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    17c4:	0b3a0e03 	bleq	e84fd8 <__bss_end__+0xe798b8>
    17c8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    17cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    17d0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    17d4:	00130119 	andseq	r0, r3, r9, lsl r1
    17d8:	00051200 	andeq	r1, r5, r0, lsl #4
    17dc:	0b3a0e03 	bleq	e84ff0 <__bss_end__+0xe798d0>
    17e0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    17e4:	00001702 	andeq	r1, r0, r2, lsl #14
    17e8:	01828913 	orreq	r8, r2, r3, lsl r9
    17ec:	31011100 	mrscc	r1, (UNDEF: 17)
    17f0:	14000013 	strne	r0, [r0], #-19
    17f4:	01018289 	smlabbeq	r1, r9, r2, r8
    17f8:	13310111 	teqne	r1, #1073741828	; 0x40000004
    17fc:	00001301 	andeq	r1, r0, r1, lsl #6
    1800:	03003415 	movweq	r3, #1045	; 0x415
    1804:	3b0b3a0e 	blcc	2d0044 <__bss_end__+0x2c4924>
    1808:	3f13490b 	svccc	0x0013490b
    180c:	00180219 	andseq	r0, r8, r9, lsl r2
    1810:	012e1600 	teqeq	lr, r0, lsl #12
    1814:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1818:	0b3b0b3a 	bleq	ec4508 <__bss_end__+0xeb8de8>
    181c:	13491927 	movtne	r1, #39207	; 0x9927
    1820:	1301193c 	movwne	r1, #6460	; 0x193c
    1824:	05170000 	ldreq	r0, [r7, #-0]
    1828:	00134900 	andseq	r4, r3, r0, lsl #18
    182c:	00181800 	andseq	r1, r8, r0, lsl #16
    1830:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    1834:	03193f01 	tsteq	r9, #1, 30
    1838:	3b0b3a0e 	blcc	2d0078 <__bss_end__+0x2c4958>
    183c:	3c19270b 	ldccc	7, cr2, [r9], {11}
    1840:	00000019 	andeq	r0, r0, r9, lsl r0
    1844:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    1848:	030b130e 	movweq	r1, #45838	; 0xb30e
    184c:	110e1b0e 	tstne	lr, lr, lsl #22
    1850:	10061201 	andne	r1, r6, r1, lsl #4
    1854:	02000017 	andeq	r0, r0, #23
    1858:	0b0b0024 	bleq	2c18f0 <__bss_end__+0x2b61d0>
    185c:	0e030b3e 	vmoveq.16	d3[0], r0
    1860:	24030000 	strcs	r0, [r3], #-0
    1864:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1868:	0008030b 	andeq	r0, r8, fp, lsl #6
    186c:	01040400 	tsteq	r4, r0, lsl #8
    1870:	0b3a0b0b 	bleq	e844a4 <__bss_end__+0xe78d84>
    1874:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1878:	28050000 	stmdacs	r5, {}	; <UNPREDICTABLE>
    187c:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    1880:	0600000d 	streq	r0, [r0], -sp
    1884:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1888:	0b3b0b3a 	bleq	ec4578 <__bss_end__+0xeb8e58>
    188c:	00001349 	andeq	r1, r0, r9, asr #6
    1890:	3f012e07 	svccc	0x00012e07
    1894:	3a0e0319 	bcc	382500 <__bss_end__+0x376de0>
    1898:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    189c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    18a0:	97184006 	ldrls	r4, [r8, -r6]
    18a4:	13011942 	movwne	r1, #6466	; 0x1942
    18a8:	05080000 	streq	r0, [r8, #-0]
    18ac:	3a080300 	bcc	2024b4 <__bss_end__+0x1f6d94>
    18b0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    18b4:	00170213 	andseq	r0, r7, r3, lsl r2
    18b8:	00340900 	eorseq	r0, r4, r0, lsl #18
    18bc:	0b3a0e03 	bleq	e850d0 <__bss_end__+0xe799b0>
    18c0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    18c4:	00001702 	andeq	r1, r0, r2, lsl #14
    18c8:	0182890a 	orreq	r8, r2, sl, lsl #18
    18cc:	31011101 	tstcc	r1, r1, lsl #2
    18d0:	00130113 	andseq	r0, r3, r3, lsl r1
    18d4:	828a0b00 	addhi	r0, sl, #0, 22
    18d8:	18020001 	stmdane	r2, {r0}
    18dc:	00184291 	mulseq	r8, r1, r2
    18e0:	82890c00 	addhi	r0, r9, #0, 24
    18e4:	01110101 	tsteq	r1, r1, lsl #2
    18e8:	00001331 	andeq	r1, r0, r1, lsr r3
    18ec:	0b000f0d 	bleq	5528 <_start-0x2ad8>
    18f0:	0013490b 	andseq	r4, r3, fp, lsl #18
    18f4:	00350e00 	eorseq	r0, r5, r0, lsl #28
    18f8:	00001349 	andeq	r1, r0, r9, asr #6
    18fc:	3f012e0f 	svccc	0x00012e0f
    1900:	3a0e0319 	bcc	38256c <__bss_end__+0x376e4c>
    1904:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1908:	11134919 	tstne	r3, r9, lsl r9
    190c:	40061201 	andmi	r1, r6, r1, lsl #4
    1910:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1914:	00001301 	andeq	r1, r0, r1, lsl #6
    1918:	03003410 	movweq	r3, #1040	; 0x410
    191c:	3b0b3a08 	blcc	2d0144 <__bss_end__+0x2c4a24>
    1920:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1924:	11000017 	tstne	r0, r7, lsl r0
    1928:	00018289 	andeq	r8, r1, r9, lsl #5
    192c:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1930:	05120000 	ldreq	r0, [r2, #-0]
    1934:	3a0e0300 	bcc	38253c <__bss_end__+0x376e1c>
    1938:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    193c:	00170213 	andseq	r0, r7, r3, lsl r2
    1940:	012e1300 	teqeq	lr, r0, lsl #6
    1944:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1948:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    194c:	13491927 	movtne	r1, #39207	; 0x9927
    1950:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1954:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1958:	00130119 	andseq	r0, r3, r9, lsl r1
    195c:	00051400 	andeq	r1, r5, r0, lsl #8
    1960:	0b3a0e03 	bleq	e85174 <__bss_end__+0xe79a54>
    1964:	1349053b 	movtne	r0, #38203	; 0x953b
    1968:	00001702 	andeq	r1, r0, r2, lsl #14
    196c:	3f012e15 	svccc	0x00012e15
    1970:	3a0e0319 	bcc	3825dc <__bss_end__+0x376ebc>
    1974:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1978:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    197c:	97184006 	ldrls	r4, [r8, -r6]
    1980:	13011942 	movwne	r1, #6466	; 0x1942
    1984:	05160000 	ldreq	r0, [r6, #-0]
    1988:	3a080300 	bcc	202590 <__bss_end__+0x1f6e70>
    198c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1990:	00170213 	andseq	r0, r7, r3, lsl r2
    1994:	00341700 	eorseq	r1, r4, r0, lsl #14
    1998:	0b3a0e03 	bleq	e851ac <__bss_end__+0xe79a8c>
    199c:	1349053b 	movtne	r0, #38203	; 0x953b
    19a0:	00001702 	andeq	r1, r0, r2, lsl #14
    19a4:	11010b18 	tstne	r1, r8, lsl fp
    19a8:	01061201 	tsteq	r6, r1, lsl #4
    19ac:	19000013 	stmdbne	r0, {r0, r1, r4}
    19b0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    19b4:	0b3b0b3a 	bleq	ec46a4 <__bss_end__+0xeb8f84>
    19b8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    19bc:	00001802 	andeq	r1, r0, r2, lsl #16
    19c0:	3f012e1a 	svccc	0x00012e1a
    19c4:	3a0e0319 	bcc	382630 <__bss_end__+0x376f10>
    19c8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    19cc:	3c134919 	ldccc	9, cr4, [r3], {25}
    19d0:	00130119 	andseq	r0, r3, r9, lsl r1
    19d4:	00051b00 	andeq	r1, r5, r0, lsl #22
    19d8:	00001349 	andeq	r1, r0, r9, asr #6
    19dc:	4900261c 	stmdbmi	r0, {r2, r3, r4, r9, sl, sp}
    19e0:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    19e4:	00000035 	andeq	r0, r0, r5, lsr r0
    19e8:	3f012e1e 	svccc	0x00012e1e
    19ec:	3a0e0319 	bcc	382658 <__bss_end__+0x376f38>
    19f0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    19f4:	01193c19 	tsteq	r9, r9, lsl ip
    19f8:	1f000013 	svcne	0x00000013
    19fc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1a00:	0b3a0e03 	bleq	e85214 <__bss_end__+0xe79af4>
    1a04:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1a08:	0000193c 	andeq	r1, r0, ip, lsr r9
    1a0c:	01110100 	tsteq	r1, r0, lsl #2
    1a10:	0b130e25 	bleq	4c52ac <__bss_end__+0x4b9b8c>
    1a14:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1a18:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1a1c:	00001710 	andeq	r1, r0, r0, lsl r7
    1a20:	0b002402 	bleq	aa30 <__FUNCTION__.4346+0x8c>
    1a24:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1a28:	03000008 	movweq	r0, #8
    1a2c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1a30:	0b3b0b3a 	bleq	ec4720 <__bss_end__+0xeb9000>
    1a34:	00001349 	andeq	r1, r0, r9, asr #6
    1a38:	0b002404 	bleq	aa50 <__FUNCTION__.4346+0xac>
    1a3c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1a40:	0500000e 	streq	r0, [r0, #-14]
    1a44:	0b0b000f 	bleq	2c1a88 <__bss_end__+0x2b6368>
    1a48:	13060000 	movwne	r0, #24576	; 0x6000
    1a4c:	3a0b0b01 	bcc	2c4658 <__bss_end__+0x2b8f38>
    1a50:	010b3b0b 	tsteq	fp, fp, lsl #22
    1a54:	07000013 	smladeq	r0, r3, r0, r0
    1a58:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1a5c:	0b3b0b3a 	bleq	ec474c <__bss_end__+0xeb902c>
    1a60:	0b381349 	bleq	e0678c <__bss_end__+0xdfb06c>
    1a64:	0d080000 	stceq	0, cr0, [r8, #-0]
    1a68:	3a0e0300 	bcc	382670 <__bss_end__+0x376f50>
    1a6c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a70:	000b3813 	andeq	r3, fp, r3, lsl r8
    1a74:	01040900 	tsteq	r4, r0, lsl #18
    1a78:	0b3a0b0b 	bleq	e846ac <__bss_end__+0xe78f8c>
    1a7c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1a80:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
    1a84:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    1a88:	0b00000d 	bleq	1ac4 <_start-0x653c>
    1a8c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1a90:	0b3a0e03 	bleq	e852a4 <__bss_end__+0xe79b84>
    1a94:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1a98:	01111349 	tsteq	r1, r9, asr #6
    1a9c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1aa0:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1aa4:	0c000013 	stceq	0, cr0, [r0], {19}
    1aa8:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1aac:	0b3b0b3a 	bleq	ec479c <__bss_end__+0xeb907c>
    1ab0:	061c1349 	ldreq	r1, [ip], -r9, asr #6
    1ab4:	890d0000 	stmdbhi	sp, {}	; <UNPREDICTABLE>
    1ab8:	11010182 	smlabbne	r1, r2, r1, r0
    1abc:	00133101 	andseq	r3, r3, r1, lsl #2
    1ac0:	828a0e00 	addhi	r0, sl, #0, 28
    1ac4:	18020001 	stmdane	r2, {r0}
    1ac8:	00184291 	mulseq	r8, r1, r2
    1acc:	000f0f00 	andeq	r0, pc, r0, lsl #30
    1ad0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1ad4:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
    1ad8:	03193f01 	tsteq	r9, #1, 30
    1adc:	3b0b3a0e 	blcc	2d031c <__bss_end__+0x2c4bfc>
    1ae0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1ae4:	00193c13 	andseq	r3, r9, r3, lsl ip
    1ae8:	00051100 	andeq	r1, r5, r0, lsl #2
    1aec:	00001349 	andeq	r1, r0, r9, asr #6
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	00000000 	andeq	r0, r0, r0
       4:	0000000f 	andeq	r0, r0, pc
       8:	0f500001 	svceq	0x00500001
       c:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
      10:	01000000 	mrseq	r0, (UNDEF: 0)
      14:	00885400 	addeq	r5, r8, r0, lsl #8
      18:	01000000 	mrseq	r0, (UNDEF: 0)
      1c:	00040000 	andeq	r0, r4, r0
      20:	9f5001f3 	svcls	0x005001f3
	...
      2c:	0000000c 	andeq	r0, r0, ip
      30:	0000000f 	andeq	r0, r0, pc
      34:	0f500001 	svceq	0x00500001
      38:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
      3c:	01000000 	mrseq	r0, (UNDEF: 0)
      40:	00885400 	addeq	r5, r8, r0, lsl #8
      44:	01000000 	mrseq	r0, (UNDEF: 0)
      48:	00040000 	andeq	r0, r4, r0
      4c:	9f5001f3 	svcls	0x005001f3
	...
      58:	00000014 	andeq	r0, r0, r4, lsl r0
      5c:	000000dc 	ldrdeq	r0, [r0], -ip
      60:	00580001 	subseq	r0, r8, r1
      64:	00000000 	andeq	r0, r0, r0
      68:	84000000 	strhi	r0, [r0], #-0
      6c:	9c000000 	stcls	0, cr0, [r0], {-0}
      70:	02000000 	andeq	r0, r0, #0
      74:	9c9f3000 	ldcls	0, cr3, [pc], {0}
      78:	dc000000 	stcle	0, cr0, [r0], {-0}
      7c:	01000000 	mrseq	r0, (UNDEF: 0)
      80:	00005400 	andeq	r5, r0, r0, lsl #8
      84:	00000000 	andeq	r0, r0, r0
      88:	01240000 	teqeq	r4, r0
      8c:	01300000 	teqeq	r0, r0
      90:	00020000 	andeq	r0, r2, r0
      94:	00009f30 	andeq	r9, r0, r0, lsr pc
      98:	00000000 	andeq	r0, r0, r0
      9c:	01240000 	teqeq	r4, r0
      a0:	01300000 	teqeq	r0, r0
      a4:	00020000 	andeq	r0, r2, r0
      a8:	01309f30 	teqeq	r0, r0, lsr pc
      ac:	01640000 	cmneq	r4, r0
      b0:	00010000 	andeq	r0, r1, r0
      b4:	00000054 	andeq	r0, r0, r4, asr r0
      b8:	00000000 	andeq	r0, r0, r0
      bc:	00013c00 	andeq	r3, r1, r0, lsl #24
      c0:	00014400 	andeq	r4, r1, r0, lsl #8
      c4:	50000100 	andpl	r0, r0, r0, lsl #2
      c8:	00000144 	andeq	r0, r0, r4, asr #2
      cc:	00000147 	andeq	r0, r0, r7, asr #2
      d0:	00510001 	subseq	r0, r1, r1
      d4:	00000000 	andeq	r0, r0, r0
      d8:	60000000 	andvs	r0, r0, r0
      dc:	68000001 	stmdavs	r0, {r0}
      e0:	02000001 	andeq	r0, r0, #1
      e4:	689f3000 	ldmvs	pc, {ip, sp}	; <UNPREDICTABLE>
      e8:	b4000001 	strlt	r0, [r0], #-1
      ec:	01000001 	tsteq	r0, r1
      f0:	00005400 	andeq	r5, r0, r0, lsl #8
	...
      fc:	00040000 	andeq	r0, r4, r0
     100:	00010000 	andeq	r0, r1, r0
     104:	00000450 	andeq	r0, r0, r0, asr r4
     108:	00000800 	andeq	r0, r0, r0, lsl #16
     10c:	f3000400 	vshl.u8	d0, d0, d0
     110:	009f5001 	addseq	r5, pc, r1
     114:	00000000 	andeq	r0, r0, r0
     118:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     11c:	0c000000 	stceq	0, cr0, [r0], {-0}
     120:	01000000 	mrseq	r0, (UNDEF: 0)
     124:	000c5000 	andeq	r5, ip, r0
     128:	00100000 	andseq	r0, r0, r0
     12c:	00040000 	andeq	r0, r4, r0
     130:	9f5001f3 	svcls	0x005001f3
	...
     13c:	00000010 	andeq	r0, r0, r0, lsl r0
     140:	00000014 	andeq	r0, r0, r4, lsl r0
     144:	14500001 	ldrbne	r0, [r0], #-1
     148:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     14c:	04000000 	streq	r0, [r0], #-0
     150:	5001f300 	andpl	pc, r1, r0, lsl #6
     154:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     158:	00000000 	andeq	r0, r0, r0
     15c:	00007800 	andeq	r7, r0, r0, lsl #16
     160:	00008400 	andeq	r8, r0, r0, lsl #8
     164:	50000100 	andpl	r0, r0, r0, lsl #2
     168:	00000084 	andeq	r0, r0, r4, lsl #1
     16c:	00000087 	andeq	r0, r0, r7, lsl #1
     170:	87510001 	ldrbhi	r0, [r1, -r1]
     174:	90000000 	andls	r0, r0, r0
     178:	04000000 	streq	r0, [r0], #-0
     17c:	5001f300 	andpl	pc, r1, r0, lsl #6
     180:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     184:	00000000 	andeq	r0, r0, r0
     188:	00009000 	andeq	r9, r0, r0
     18c:	0000a700 	andeq	sl, r0, r0, lsl #14
     190:	50000100 	andpl	r0, r0, r0, lsl #2
     194:	000000a7 	andeq	r0, r0, r7, lsr #1
     198:	000000f4 	strdeq	r0, [r0], -r4
     19c:	f4540001 			; <UNDEFINED> instruction: 0xf4540001
     1a0:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
     1a4:	01000000 	mrseq	r0, (UNDEF: 0)
     1a8:	00f85000 	rscseq	r5, r8, r0
     1ac:	01140000 	tsteq	r4, r0
     1b0:	00010000 	andeq	r0, r1, r0
     1b4:	00000054 	andeq	r0, r0, r4, asr r0
     1b8:	00000000 	andeq	r0, r0, r0
     1bc:	00011400 	andeq	r1, r1, r0, lsl #8
     1c0:	00012300 	andeq	r2, r1, r0, lsl #6
     1c4:	50000100 	andpl	r0, r0, r0, lsl #2
     1c8:	00000123 	andeq	r0, r0, r3, lsr #2
     1cc:	0000013c 	andeq	r0, r0, ip, lsr r1
     1d0:	01f30004 	mvnseq	r0, r4
     1d4:	013c9f50 	teqeq	ip, r0, asr pc
     1d8:	014b0000 	mrseq	r0, (UNDEF: 75)
     1dc:	00010000 	andeq	r0, r1, r0
     1e0:	00014b50 	andeq	r4, r1, r0, asr fp
     1e4:	00017000 	andeq	r7, r1, r0
     1e8:	f3000400 	vshl.u8	d0, d0, d0
     1ec:	709f5001 	addsvc	r5, pc, r1
     1f0:	90000001 	andls	r0, r0, r1
     1f4:	01000001 	tsteq	r0, r1
     1f8:	01905000 	orrseq	r5, r0, r0
     1fc:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
     200:	00040000 	andeq	r0, r4, r0
     204:	9f5001f3 	svcls	0x005001f3
	...
     210:	00000140 	andeq	r0, r0, r0, asr #2
     214:	0000014b 	andeq	r0, r0, fp, asr #2
     218:	70530001 	subsvc	r0, r3, r1
     21c:	94000001 	strls	r0, [r0], #-1
     220:	01000001 	tsteq	r0, r1
     224:	00005300 	andeq	r5, r0, r0, lsl #6
     228:	00000000 	andeq	r0, r0, r0
     22c:	01b80000 			; <UNDEFINED> instruction: 0x01b80000
     230:	01c40000 	biceq	r0, r4, r0
     234:	00010000 	andeq	r0, r1, r0
     238:	0001cc50 	andeq	ip, r1, r0, asr ip
     23c:	0001e700 	andeq	lr, r1, r0, lsl #14
     240:	50000100 	andpl	r0, r0, r0, lsl #2
     244:	00000200 	andeq	r0, r0, r0, lsl #4
     248:	00000230 	andeq	r0, r0, r0, lsr r2
     24c:	00500001 	subseq	r0, r0, r1
     250:	00000000 	andeq	r0, r0, r0
     254:	40000000 	andmi	r0, r0, r0
     258:	47000002 	strmi	r0, [r0, -r2]
     25c:	01000002 	tsteq	r0, r2
     260:	02475000 	subeq	r5, r7, #0
     264:	02dc0000 	sbcseq	r0, ip, #0
     268:	00040000 	andeq	r0, r4, r0
     26c:	9f5001f3 	svcls	0x005001f3
	...
     278:	00000250 	andeq	r0, r0, r0, asr r2
     27c:	0000025c 	andeq	r0, r0, ip, asr r2
     280:	00500001 	subseq	r0, r0, r1
     284:	00000000 	andeq	r0, r0, r0
     288:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
     28c:	c0000002 	andgt	r0, r0, r2
     290:	01000002 	tsteq	r0, r2
     294:	02c05000 	sbceq	r5, r0, #0
     298:	02c40000 	sbceq	r0, r4, #0
     29c:	00010000 	andeq	r0, r1, r0
     2a0:	0002c451 	andeq	ip, r2, r1, asr r4
     2a4:	0002c700 	andeq	ip, r2, r0, lsl #14
     2a8:	03000500 	movweq	r0, #1280	; 0x500
     2ac:	0000b2f0 	strdeq	fp, [r0], -r0
	...
     2b8:	000002dc 	ldrdeq	r0, [r0], -ip
     2bc:	000002eb 	andeq	r0, r0, fp, ror #5
     2c0:	eb500001 	bl	14002cc <__bss_end__+0x13f4bac>
     2c4:	30000002 	andcc	r0, r0, r2
     2c8:	01000003 	tsteq	r0, r3
     2cc:	00005600 	andeq	r5, r0, r0, lsl #12
     2d0:	00000000 	andeq	r0, r0, r0
     2d4:	02dc0000 	sbcseq	r0, ip, #0
     2d8:	02eb0000 	rsceq	r0, fp, #0
     2dc:	00010000 	andeq	r0, r1, r0
     2e0:	0002eb51 	andeq	lr, r2, r1, asr fp
     2e4:	00033000 	andeq	r3, r3, r0
     2e8:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
     2f4:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     2f8:	00000318 	andeq	r0, r0, r8, lsl r3
     2fc:	18500001 	ldmdane	r0, {r0}^
     300:	30000003 	andcc	r0, r0, r3
     304:	01000003 	tsteq	r0, r3
     308:	00005400 	andeq	r5, r0, r0, lsl #8
     30c:	00000000 	andeq	r0, r0, r0
     310:	03bc0000 			; <UNDEFINED> instruction: 0x03bc0000
     314:	03e40000 	mvneq	r0, #0
     318:	00010000 	andeq	r0, r1, r0
     31c:	0003e450 	andeq	lr, r3, r0, asr r4
     320:	00045400 	andeq	r5, r4, r0, lsl #8
     324:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
     330:	000003e4 	andeq	r0, r0, r4, ror #7
     334:	00000400 	andeq	r0, r0, r0, lsl #8
     338:	9f300002 	svcls	0x00300002
     33c:	0000041c 	andeq	r0, r0, ip, lsl r4
     340:	00000420 	andeq	r0, r0, r0, lsr #8
     344:	9f300002 	svcls	0x00300002
     348:	00000420 	andeq	r0, r0, r0, lsr #8
     34c:	00000454 	andeq	r0, r0, r4, asr r4
     350:	00560001 	subseq	r0, r6, r1
     354:	00000000 	andeq	r0, r0, r0
     358:	ec000000 	stc	0, cr0, [r0], {-0}
     35c:	0b000003 	bleq	370 <_start-0x7c90>
     360:	01000004 	tsteq	r0, r4
     364:	040c5000 	streq	r5, [ip], #-0
     368:	04240000 	strteq	r0, [r4], #-0
     36c:	00010000 	andeq	r0, r1, r0
     370:	00042850 	andeq	r2, r4, r0, asr r8
     374:	00043700 	andeq	r3, r4, r0, lsl #14
     378:	50000100 	andpl	r0, r0, r0, lsl #2
     37c:	00000438 	andeq	r0, r0, r8, lsr r4
     380:	00000454 	andeq	r0, r0, r4, asr r4
     384:	00500001 	subseq	r0, r0, r1
     388:	00000000 	andeq	r0, r0, r0
     38c:	54000000 	strpl	r0, [r0], #-0
     390:	5b000004 	blpl	3a8 <_start-0x7c58>
     394:	01000004 	tsteq	r0, r4
     398:	045b5000 	ldrbeq	r5, [fp], #-0
     39c:	04800000 	streq	r0, [r0], #0
     3a0:	00040000 	andeq	r0, r4, r0
     3a4:	9f5001f3 	svcls	0x005001f3
	...
     3b4:	00000054 	andeq	r0, r0, r4, asr r0
     3b8:	54500001 	ldrbpl	r0, [r0], #-1
     3bc:	80000000 	andhi	r0, r0, r0
     3c0:	04000000 	streq	r0, [r0], #-0
     3c4:	5001f300 	andpl	pc, r1, r0, lsl #6
     3c8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     3cc:	00000000 	andeq	r0, r0, r0
     3d0:	00001800 	andeq	r1, r0, r0, lsl #16
     3d4:	00005400 	andeq	r5, r0, r0, lsl #8
     3d8:	50000100 	andpl	r0, r0, r0, lsl #2
     3dc:	00000054 	andeq	r0, r0, r4, asr r0
     3e0:	00000080 	andeq	r0, r0, r0, lsl #1
     3e4:	01f30004 	mvnseq	r0, r4
     3e8:	00009f50 	andeq	r9, r0, r0, asr pc
     3ec:	00000000 	andeq	r0, r0, r0
     3f0:	002c0000 	eoreq	r0, ip, r0
     3f4:	00540000 	subseq	r0, r4, r0
     3f8:	00010000 	andeq	r0, r1, r0
     3fc:	00005450 	andeq	r5, r0, r0, asr r4
     400:	00008000 	andeq	r8, r0, r0
     404:	f3000400 	vshl.u8	d0, d0, d0
     408:	009f5001 	addseq	r5, pc, r1
     40c:	00000000 	andeq	r0, r0, r0
     410:	80000000 	andhi	r0, r0, r0
     414:	9b000000 	blls	41c <_start-0x7be4>
     418:	01000000 	mrseq	r0, (UNDEF: 0)
     41c:	009b5000 	addseq	r5, fp, r0
     420:	00c40000 	sbceq	r0, r4, r0
     424:	00040000 	andeq	r0, r4, r0
     428:	9f5001f3 	svcls	0x005001f3
	...
     434:	000000c4 	andeq	r0, r0, r4, asr #1
     438:	000000db 	ldrdeq	r0, [r0], -fp
     43c:	db500001 	blle	1400448 <__bss_end__+0x13f4d28>
     440:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
     444:	01000002 	tsteq	r0, r2
     448:	00005400 	andeq	r5, r0, r0, lsl #8
     44c:	00000000 	andeq	r0, r0, r0
     450:	00c40000 	sbceq	r0, r4, r0
     454:	00d40000 	sbcseq	r0, r4, r0
     458:	00010000 	andeq	r0, r1, r0
     45c:	0000d451 	andeq	sp, r0, r1, asr r4
     460:	00011000 	andeq	r1, r1, r0
     464:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     468:	00000110 	andeq	r0, r0, r0, lsl r1
     46c:	00000278 	andeq	r0, r0, r8, ror r2
     470:	01f30004 	mvnseq	r0, r4
     474:	00009f51 	andeq	r9, r0, r1, asr pc
     478:	00000000 	andeq	r0, r0, r0
     47c:	01bc0000 			; <UNDEFINED> instruction: 0x01bc0000
     480:	01e40000 	mvneq	r0, r0
     484:	00020000 	andeq	r0, r2, r0
     488:	01e49f42 	mvneq	r9, r2, asr #30
     48c:	01fc0000 	mvnseq	r0, r0
     490:	00010000 	andeq	r0, r1, r0
     494:	0001fc51 	andeq	pc, r1, r1, asr ip	; <UNPREDICTABLE>
     498:	00020400 	andeq	r0, r2, r0, lsl #8
     49c:	42000200 	andmi	r0, r0, #0, 4
     4a0:	0002049f 	muleq	r2, pc, r4	; <UNPREDICTABLE>
     4a4:	00022f00 	andeq	r2, r2, r0, lsl #30
     4a8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     4b4:	000001dc 	ldrdeq	r0, [r0], -ip
     4b8:	000001e8 	andeq	r0, r0, r8, ror #3
     4bc:	e8520001 	ldmda	r2, {r0}^
     4c0:	ec000001 	stc	0, cr0, [r0], {1}
     4c4:	03000001 	movweq	r0, #1
     4c8:	9f7f7200 	svcls	0x007f7200
	...
     4d4:	00000278 	andeq	r0, r0, r8, ror r2
     4d8:	00000290 	muleq	r0, r0, r2
     4dc:	90500001 	subsls	r0, r0, r1
     4e0:	e4000002 	str	r0, [r0], #-2
     4e4:	01000002 	tsteq	r0, r2
     4e8:	00005300 	andeq	r5, r0, r0, lsl #6
     4ec:	00000000 	andeq	r0, r0, r0
     4f0:	02ac0000 	adceq	r0, ip, #0
     4f4:	02c40000 	sbceq	r0, r4, #0
     4f8:	00010000 	andeq	r0, r1, r0
     4fc:	00000055 	andeq	r0, r0, r5, asr r0
     500:	00000000 	andeq	r0, r0, r0
     504:	0002a400 	andeq	sl, r2, r0, lsl #8
     508:	0002b000 	andeq	fp, r2, r0
     50c:	51000100 	mrspl	r0, (UNDEF: 16)
     510:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
     514:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
     518:	7f710003 	svcvc	0x00710003
     51c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     520:	00000000 	andeq	r0, r0, r0
     524:	0002e400 	andeq	lr, r2, r0, lsl #8
     528:	0002fc00 	andeq	pc, r2, r0, lsl #24
     52c:	50000100 	andpl	r0, r0, r0, lsl #2
     530:	000002fc 	strdeq	r0, [r0], -ip
     534:	00000318 	andeq	r0, r0, r8, lsl r3
     538:	00570001 	subseq	r0, r7, r1
     53c:	00000000 	andeq	r0, r0, r0
     540:	e4000000 	str	r0, [r0], #-0
     544:	fc000002 	stc2	0, cr0, [r0], {2}
     548:	01000002 	tsteq	r0, r2
     54c:	02fc5100 	rscseq	r5, ip, #0, 2
     550:	03180000 	tsteq	r8, #0
     554:	00010000 	andeq	r0, r1, r0
     558:	00000056 	andeq	r0, r0, r6, asr r0
     55c:	00000000 	andeq	r0, r0, r0
     560:	0002e400 	andeq	lr, r2, r0, lsl #8
     564:	0002fc00 	andeq	pc, r2, r0, lsl #24
     568:	52000100 	andpl	r0, r0, #0, 2
     56c:	000002fc 	strdeq	r0, [r0], -ip
     570:	00000318 	andeq	r0, r0, r8, lsl r3
     574:	00550001 	subseq	r0, r5, r1
     578:	00000000 	andeq	r0, r0, r0
     57c:	f4000000 	vst4.8	{d0-d3}, [r0], r0
     580:	fc000002 	stc2	0, cr0, [r0], {2}
     584:	01000002 	tsteq	r0, r2
     588:	02fc5100 	rscseq	r5, ip, #0, 2
     58c:	03180000 	tsteq	r8, #0
     590:	00010000 	andeq	r0, r1, r0
     594:	00000056 	andeq	r0, r0, r6, asr r0
     598:	00000000 	andeq	r0, r0, r0
     59c:	0002f400 	andeq	pc, r2, r0, lsl #8
     5a0:	0002fc00 	andeq	pc, r2, r0, lsl #24
     5a4:	30000200 	andcc	r0, r0, r0, lsl #4
     5a8:	0002fc9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
     5ac:	00031800 	andeq	r1, r3, r0, lsl #16
     5b0:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     5bc:	00000318 	andeq	r0, r0, r8, lsl r3
     5c0:	0000032b 	andeq	r0, r0, fp, lsr #6
     5c4:	2b500001 	blcs	14005d0 <__bss_end__+0x13f4eb0>
     5c8:	70000003 	andvc	r0, r0, r3
     5cc:	01000003 	tsteq	r0, r3
     5d0:	00005400 	andeq	r5, r0, r0, lsl #8
     5d4:	00000000 	andeq	r0, r0, r0
     5d8:	03180000 	tsteq	r8, #0
     5dc:	032b0000 	teqeq	fp, #0
     5e0:	00010000 	andeq	r0, r1, r0
     5e4:	00032b51 	andeq	r2, r3, r1, asr fp
     5e8:	00037000 	andeq	r7, r3, r0
     5ec:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     5f8:	00000318 	andeq	r0, r0, r8, lsl r3
     5fc:	0000032b 	andeq	r0, r0, fp, lsr #6
     600:	2b520001 	blcs	148060c <__bss_end__+0x1474eec>
     604:	70000003 	andvc	r0, r0, r3
     608:	01000003 	tsteq	r0, r3
     60c:	00005500 	andeq	r5, r0, r0, lsl #10
     610:	00000000 	andeq	r0, r0, r0
     614:	03700000 	cmneq	r0, #0
     618:	03a70000 			; <UNDEFINED> instruction: 0x03a70000
     61c:	00010000 	andeq	r0, r1, r0
     620:	0003a750 	andeq	sl, r3, r0, asr r7
     624:	0003f000 	andeq	pc, r3, r0
     628:	54000100 	strpl	r0, [r0], #-256	; 0x100
     62c:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     630:	000003f4 	strdeq	r0, [r0], -r4
     634:	f4500001 			; <UNDEFINED> instruction: 0xf4500001
     638:	14000003 	strne	r0, [r0], #-3
     63c:	01000004 	tsteq	r0, r4
     640:	00005400 	andeq	r5, r0, r0, lsl #8
     644:	00000000 	andeq	r0, r0, r0
     648:	03700000 	cmneq	r0, #0
     64c:	03a70000 			; <UNDEFINED> instruction: 0x03a70000
     650:	00010000 	andeq	r0, r1, r0
     654:	0003a751 	andeq	sl, r3, r1, asr r7
     658:	0003f000 	andeq	pc, r3, r0
     65c:	f3000400 	vshl.u8	d0, d0, d0
     660:	f09f5101 			; <UNDEFINED> instruction: 0xf09f5101
     664:	f8000003 			; <UNDEFINED> instruction: 0xf8000003
     668:	01000003 	tsteq	r0, r3
     66c:	03f85100 	mvnseq	r5, #0, 2
     670:	04140000 	ldreq	r0, [r4], #-0
     674:	00040000 	andeq	r0, r4, r0
     678:	9f5101f3 	svcls	0x005101f3
	...
     684:	00000370 	andeq	r0, r0, r0, ror r3
     688:	000003a7 	andeq	r0, r0, r7, lsr #7
     68c:	a7520001 	ldrbge	r0, [r2, -r1]
     690:	f0000003 			; <UNDEFINED> instruction: 0xf0000003
     694:	04000003 	streq	r0, [r0], #-3
     698:	5201f300 	andpl	pc, r1, #0, 6
     69c:	0003f09f 	muleq	r3, pc, r0	; <UNPREDICTABLE>
     6a0:	0003f800 	andeq	pc, r3, r0, lsl #16
     6a4:	52000100 	andpl	r0, r0, #0, 2
     6a8:	000003f8 	strdeq	r0, [r0], -r8
     6ac:	00000414 	andeq	r0, r0, r4, lsl r4
     6b0:	01f30004 	mvnseq	r0, r4
     6b4:	00009f52 	andeq	r9, r0, r2, asr pc
     6b8:	00000000 	andeq	r0, r0, r0
     6bc:	03a40000 			; <UNDEFINED> instruction: 0x03a40000
     6c0:	03f00000 	mvnseq	r0, #0
     6c4:	00010000 	andeq	r0, r1, r0
     6c8:	0003f856 	andeq	pc, r3, r6, asr r8	; <UNPREDICTABLE>
     6cc:	00041400 	andeq	r1, r4, r0, lsl #8
     6d0:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     6dc:	00000378 	andeq	r0, r0, r8, ror r3
     6e0:	000003a7 	andeq	r0, r0, r7, lsr #7
     6e4:	a7500001 	ldrbge	r0, [r0, -r1]
     6e8:	f0000003 			; <UNDEFINED> instruction: 0xf0000003
     6ec:	01000003 	tsteq	r0, r3
     6f0:	03f05400 	mvnseq	r5, #0, 8
     6f4:	03f40000 	mvnseq	r0, #0
     6f8:	00010000 	andeq	r0, r1, r0
     6fc:	0003f450 	andeq	pc, r3, r0, asr r4	; <UNPREDICTABLE>
     700:	00041400 	andeq	r1, r4, r0, lsl #8
     704:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     710:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
     714:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     718:	f8540001 			; <UNDEFINED> instruction: 0xf8540001
     71c:	14000003 	strne	r0, [r0], #-3
     720:	01000004 	tsteq	r0, r4
     724:	00005400 	andeq	r5, r0, r0, lsl #8
     728:	00000000 	andeq	r0, r0, r0
     72c:	04140000 	ldreq	r0, [r4], #-0
     730:	04a70000 	strteq	r0, [r7], #0
     734:	00010000 	andeq	r0, r1, r0
     738:	0004a750 	andeq	sl, r4, r0, asr r7
     73c:	0004c000 	andeq	ip, r4, r0
     740:	f3000400 	vshl.u8	d0, d0, d0
     744:	c09f5001 	addsgt	r5, pc, r1
     748:	ef000004 	svc	0x00000004
     74c:	01000004 	tsteq	r0, r4
     750:	04ef5000 	strbteq	r5, [pc], #0	; 758 <_start-0x78a8>
     754:	05080000 	streq	r0, [r8, #-0]
     758:	00040000 	andeq	r0, r4, r0
     75c:	9f5001f3 	svcls	0x005001f3
     760:	00000508 	andeq	r0, r0, r8, lsl #10
     764:	0000050c 	andeq	r0, r0, ip, lsl #10
     768:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     76c:	10000005 	andne	r0, r0, r5
     770:	04000005 	streq	r0, [r0], #-5
     774:	5001f300 	andpl	pc, r1, r0, lsl #6
     778:	0005109f 	muleq	r5, pc, r0	; <UNPREDICTABLE>
     77c:	00051400 	andeq	r1, r5, r0, lsl #8
     780:	50000100 	andpl	r0, r0, r0, lsl #2
     784:	00000514 	andeq	r0, r0, r4, lsl r5
     788:	00000518 	andeq	r0, r0, r8, lsl r5
     78c:	01f30004 	mvnseq	r0, r4
     790:	05189f50 	ldreq	r9, [r8, #-3920]	; 0xf50
     794:	051c0000 	ldreq	r0, [ip, #-0]
     798:	00010000 	andeq	r0, r1, r0
     79c:	00051c50 	andeq	r1, r5, r0, asr ip
     7a0:	00053800 	andeq	r3, r5, r0, lsl #16
     7a4:	f3000400 	vshl.u8	d0, d0, d0
     7a8:	009f5001 	addseq	r5, pc, r1
     7ac:	00000000 	andeq	r0, r0, r0
     7b0:	14000000 	strne	r0, [r0], #-0
     7b4:	a7000004 	strge	r0, [r0, -r4]
     7b8:	01000004 	tsteq	r0, r4
     7bc:	04a75100 	strteq	r5, [r7], #256	; 0x100
     7c0:	04c00000 	strbeq	r0, [r0], #0
     7c4:	00040000 	andeq	r0, r4, r0
     7c8:	9f5101f3 	svcls	0x005101f3
     7cc:	000004c0 	andeq	r0, r0, r0, asr #9
     7d0:	000004ef 	andeq	r0, r0, pc, ror #9
     7d4:	ef510001 	svc	0x00510001
     7d8:	08000004 	stmdaeq	r0, {r2}
     7dc:	04000005 	streq	r0, [r0], #-5
     7e0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     7e4:	0005089f 	muleq	r5, pc, r8	; <UNPREDICTABLE>
     7e8:	00053800 	andeq	r3, r5, r0, lsl #16
     7ec:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     7f8:	00000414 	andeq	r0, r0, r4, lsl r4
     7fc:	000004a7 	andeq	r0, r0, r7, lsr #9
     800:	a7520001 	ldrbge	r0, [r2, -r1]
     804:	c0000004 	andgt	r0, r0, r4
     808:	04000004 	streq	r0, [r0], #-4
     80c:	5201f300 	andpl	pc, r1, #0, 6
     810:	0004c09f 	muleq	r4, pc, r0	; <UNPREDICTABLE>
     814:	0004dc00 	andeq	sp, r4, r0, lsl #24
     818:	52000100 	andpl	r0, r0, #0, 2
     81c:	000004dc 	ldrdeq	r0, [r0], -ip
     820:	00000508 	andeq	r0, r0, r8, lsl #10
     824:	01f30004 	mvnseq	r0, r4
     828:	05089f52 	streq	r9, [r8, #-3922]	; 0xf52
     82c:	05180000 	ldreq	r0, [r8, #-0]
     830:	00010000 	andeq	r0, r1, r0
     834:	00051852 	andeq	r1, r5, r2, asr r8
     838:	00053800 	andeq	r3, r5, r0, lsl #16
     83c:	f3000400 	vshl.u8	d0, d0, d0
     840:	009f5201 	addseq	r5, pc, r1, lsl #4
     844:	00000000 	andeq	r0, r0, r0
     848:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     84c:	a7000004 	strge	r0, [r0, -r4]
     850:	01000004 	tsteq	r0, r4
     854:	04a75100 	strteq	r5, [r7], #256	; 0x100
     858:	04c00000 	strbeq	r0, [r0], #0
     85c:	00040000 	andeq	r0, r4, r0
     860:	9f5101f3 	svcls	0x005101f3
     864:	000004c0 	andeq	r0, r0, r0, asr #9
     868:	000004ef 	andeq	r0, r0, pc, ror #9
     86c:	ef510001 	svc	0x00510001
     870:	08000004 	stmdaeq	r0, {r2}
     874:	04000005 	streq	r0, [r0], #-5
     878:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     87c:	0005089f 	muleq	r5, pc, r8	; <UNPREDICTABLE>
     880:	00053800 	andeq	r3, r5, r0, lsl #16
     884:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     890:	00000418 	andeq	r0, r0, r8, lsl r4
     894:	000004a7 	andeq	r0, r0, r7, lsr #9
     898:	a7500001 	ldrbge	r0, [r0, -r1]
     89c:	c0000004 	andgt	r0, r0, r4
     8a0:	04000004 	streq	r0, [r0], #-4
     8a4:	5001f300 	andpl	pc, r1, r0, lsl #6
     8a8:	0004c09f 	muleq	r4, pc, r0	; <UNPREDICTABLE>
     8ac:	0004ef00 	andeq	lr, r4, r0, lsl #30
     8b0:	50000100 	andpl	r0, r0, r0, lsl #2
     8b4:	000004ef 	andeq	r0, r0, pc, ror #9
     8b8:	00000508 	andeq	r0, r0, r8, lsl #10
     8bc:	01f30004 	mvnseq	r0, r4
     8c0:	05089f50 	streq	r9, [r8, #-3920]	; 0xf50
     8c4:	050c0000 	streq	r0, [ip, #-0]
     8c8:	00010000 	andeq	r0, r1, r0
     8cc:	00050c50 	andeq	r0, r5, r0, asr ip
     8d0:	00051000 	andeq	r1, r5, r0
     8d4:	f3000400 	vshl.u8	d0, d0, d0
     8d8:	109f5001 	addsne	r5, pc, r1
     8dc:	14000005 	strne	r0, [r0], #-5
     8e0:	01000005 	tsteq	r0, r5
     8e4:	05145000 	ldreq	r5, [r4, #-0]
     8e8:	05180000 	ldreq	r0, [r8, #-0]
     8ec:	00040000 	andeq	r0, r4, r0
     8f0:	9f5001f3 	svcls	0x005001f3
     8f4:	00000518 	andeq	r0, r0, r8, lsl r5
     8f8:	0000051c 	andeq	r0, r0, ip, lsl r5
     8fc:	1c500001 	mrrcne	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     900:	38000005 	stmdacc	r0, {r0, r2}
     904:	04000005 	streq	r0, [r0], #-5
     908:	5001f300 	andpl	pc, r1, r0, lsl #6
     90c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     910:	00000000 	andeq	r0, r0, r0
     914:	00045800 	andeq	r5, r4, r0, lsl #16
     918:	0004a700 	andeq	sl, r4, r0, lsl #14
     91c:	53000100 	movwpl	r0, #256	; 0x100
     920:	000004c0 	andeq	r0, r0, r0, asr #9
     924:	000004d8 	ldrdeq	r0, [r0], -r8
     928:	10530001 	subsne	r0, r3, r1
     92c:	18000005 	stmdane	r0, {r0, r2}
     930:	01000005 	tsteq	r0, r5
     934:	00005300 	andeq	r5, r0, r0, lsl #6
     938:	00000000 	andeq	r0, r0, r0
     93c:	045c0000 	ldrbeq	r0, [ip], #-0
     940:	04800000 	streq	r0, [r0], #0
     944:	00050000 	andeq	r0, r5, r0
     948:	00730071 	rsbseq	r0, r3, r1, ror r0
     94c:	00048022 	andeq	r8, r4, r2, lsr #32
     950:	00049800 	andeq	r9, r4, r0, lsl #16
     954:	5a000100 	bpl	d5c <_start-0x72a4>
     958:	00000498 	muleq	r0, r8, r4
     95c:	0000049c 	muleq	r0, ip, r4
     960:	00710005 	rsbseq	r0, r1, r5
     964:	9c220073 	stcls	0, cr0, [r2], #-460	; 0xfffffe34
     968:	c4000004 	strgt	r0, [r0], #-4
     96c:	01000004 	tsteq	r0, r4
     970:	00005a00 	andeq	r5, r0, r0, lsl #20
     974:	00000000 	andeq	r0, r0, r0
     978:	045c0000 	ldrbeq	r0, [ip], #-0
     97c:	04a70000 	strteq	r0, [r7], #0
     980:	00010000 	andeq	r0, r1, r0
     984:	0004a750 	andeq	sl, r4, r0, asr r7
     988:	0004c000 	andeq	ip, r4, r0
     98c:	f3000400 	vshl.u8	d0, d0, d0
     990:	c09f5001 	addsgt	r5, pc, r1
     994:	c4000004 	strgt	r0, [r0], #-4
     998:	01000004 	tsteq	r0, r4
     99c:	00005000 	andeq	r5, r0, r0
     9a0:	00000000 	andeq	r0, r0, r0
     9a4:	04600000 	strbteq	r0, [r0], #-0
     9a8:	04840000 	streq	r0, [r4], #0
     9ac:	00010000 	andeq	r0, r1, r0
     9b0:	00048454 	andeq	r8, r4, r4, asr r4
     9b4:	00048800 	andeq	r8, r4, r0, lsl #16
     9b8:	74000300 	strvc	r0, [r0], #-768	; 0x300
     9bc:	04989f7f 	ldreq	r9, [r8], #3967	; 0xf7f
     9c0:	049c0000 	ldreq	r0, [ip], #0
     9c4:	00010000 	andeq	r0, r1, r0
     9c8:	00000054 	andeq	r0, r0, r4, asr r0
     9cc:	00000000 	andeq	r0, r0, r0
     9d0:	00046400 	andeq	r6, r4, r0, lsl #8
     9d4:	0004a700 	andeq	sl, r4, r0, lsl #14
     9d8:	50000100 	andpl	r0, r0, r0, lsl #2
     9dc:	000004a7 	andeq	r0, r0, r7, lsr #9
     9e0:	000004c0 	andeq	r0, r0, r0, asr #9
     9e4:	01f30004 	mvnseq	r0, r4
     9e8:	04c09f50 	strbeq	r9, [r0], #3920	; 0xf50
     9ec:	04c40000 	strbeq	r0, [r4], #0
     9f0:	00010000 	andeq	r0, r1, r0
     9f4:	00000050 	andeq	r0, r0, r0, asr r0
     9f8:	00000000 	andeq	r0, r0, r0
     9fc:	0004d400 	andeq	sp, r4, r0, lsl #8
     a00:	0004ef00 	andeq	lr, r4, r0, lsl #30
     a04:	50000100 	andpl	r0, r0, r0, lsl #2
     a08:	000004ef 	andeq	r0, r0, pc, ror #9
     a0c:	00000508 	andeq	r0, r0, r8, lsl #10
     a10:	01f30004 	mvnseq	r0, r4
     a14:	05189f50 	ldreq	r9, [r8, #-3920]	; 0xf50
     a18:	051c0000 	ldreq	r0, [ip, #-0]
     a1c:	00010000 	andeq	r0, r1, r0
     a20:	00051c50 	andeq	r1, r5, r0, asr ip
     a24:	00053800 	andeq	r3, r5, r0, lsl #16
     a28:	f3000400 	vshl.u8	d0, d0, d0
     a2c:	009f5001 	addseq	r5, pc, r1
	...
     a38:	04000000 	streq	r0, [r0], #-0
     a3c:	01000000 	mrseq	r0, (UNDEF: 0)
     a40:	00045200 	andeq	r5, r4, r0, lsl #4
     a44:	00200000 	eoreq	r0, r0, r0
     a48:	00040000 	andeq	r0, r4, r0
     a4c:	9f5201f3 	svcls	0x005201f3
	...
     a5c:	0000000c 	andeq	r0, r0, ip
     a60:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     a64:	14000000 	strne	r0, [r0], #-0
     a68:	03000000 	movweq	r0, #0
     a6c:	9f017300 	svcls	0x00017300
     a70:	00000014 	andeq	r0, r0, r4, lsl r0
     a74:	00000020 	andeq	r0, r0, r0, lsr #32
     a78:	00530001 	subseq	r0, r3, r1
     a7c:	00000000 	andeq	r0, r0, r0
     a80:	2c000000 	stccs	0, cr0, [r0], {-0}
     a84:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     a88:	01000000 	mrseq	r0, (UNDEF: 0)
     a8c:	00385000 	eorseq	r5, r8, r0
     a90:	00480000 	subeq	r0, r8, r0
     a94:	00010000 	andeq	r0, r1, r0
     a98:	00004855 	andeq	r4, r0, r5, asr r8
     a9c:	00005800 	andeq	r5, r0, r0, lsl #16
     aa0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     ab0:	0000000b 	andeq	r0, r0, fp
     ab4:	0b500001 	bleq	1400ac0 <__bss_end__+0x13f53a0>
     ab8:	14000000 	strne	r0, [r0], #-0
     abc:	01000000 	mrseq	r0, (UNDEF: 0)
     ac0:	00005400 	andeq	r5, r0, r0, lsl #8
	...
     acc:	00100000 	andseq	r0, r0, r0
     ad0:	00010000 	andeq	r0, r1, r0
     ad4:	00001050 	andeq	r1, r0, r0, asr r0
     ad8:	00003400 	andeq	r3, r0, r0, lsl #8
     adc:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     aec:	00000004 	andeq	r0, r0, r4
     af0:	04500001 	ldrbeq	r0, [r0], #-1
     af4:	0c000000 	stceq	0, cr0, [r0], {-0}
     af8:	03000000 	movweq	r0, #0
     afc:	9f307000 	svcls	0x00307000
     b00:	0000000c 	andeq	r0, r0, ip
     b04:	00000014 	andeq	r0, r0, r4, lsl r0
     b08:	01f30004 	mvnseq	r0, r4
     b0c:	00009f50 	andeq	r9, r0, r0, asr pc
     b10:	00000000 	andeq	r0, r0, r0
     b14:	00140000 	andseq	r0, r4, r0
     b18:	00200000 	eoreq	r0, r0, r0
     b1c:	00010000 	andeq	r0, r1, r0
     b20:	00002050 	andeq	r2, r0, r0, asr r0
     b24:	00002c00 	andeq	r2, r0, r0, lsl #24
     b28:	70000300 	andvc	r0, r0, r0, lsl #6
     b2c:	002c9f01 	eoreq	r9, ip, r1, lsl #30
     b30:	00400000 	subeq	r0, r0, r0
     b34:	00010000 	andeq	r0, r1, r0
     b38:	00000050 	andeq	r0, r0, r0, asr r0
     b3c:	00000000 	andeq	r0, r0, r0
     b40:	00001400 	andeq	r1, r0, r0, lsl #8
     b44:	00001800 	andeq	r1, r0, r0, lsl #16
     b48:	51000100 	mrspl	r0, (UNDEF: 16)
     b4c:	00000018 	andeq	r0, r0, r8, lsl r0
     b50:	00000040 	andeq	r0, r0, r0, asr #32
     b54:	01f30004 	mvnseq	r0, r4
     b58:	00009f51 	andeq	r9, r0, r1, asr pc
     b5c:	00000000 	andeq	r0, r0, r0
     b60:	00400000 	subeq	r0, r0, r0
     b64:	00600000 	rsbeq	r0, r0, r0
     b68:	00010000 	andeq	r0, r1, r0
     b6c:	00006050 	andeq	r6, r0, r0, asr r0
     b70:	00006c00 	andeq	r6, r0, r0, lsl #24
     b74:	71000300 	mrsvc	r0, LR_irq
     b78:	006c9f01 	rsbeq	r9, ip, r1, lsl #30
     b7c:	00740000 	rsbseq	r0, r4, r0
     b80:	00010000 	andeq	r0, r1, r0
     b84:	00007451 	andeq	r7, r0, r1, asr r4
     b88:	00008000 	andeq	r8, r0, r0
     b8c:	71000300 	mrsvc	r0, LR_irq
     b90:	00009f01 	andeq	r9, r0, r1, lsl #30
     b94:	00000000 	andeq	r0, r0, r0
     b98:	00400000 	subeq	r0, r0, r0
     b9c:	00500000 	subseq	r0, r0, r0
     ba0:	00010000 	andeq	r0, r1, r0
     ba4:	00005051 	andeq	r5, r0, r1, asr r0
     ba8:	00008000 	andeq	r8, r0, r0
     bac:	f3000400 	vshl.u8	d0, d0, d0
     bb0:	009f5101 	addseq	r5, pc, r1, lsl #2
     bb4:	00000000 	andeq	r0, r0, r0
     bb8:	40000000 	andmi	r0, r0, r0
     bbc:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     bc0:	01000000 	mrseq	r0, (UNDEF: 0)
     bc4:	00585200 	subseq	r5, r8, r0, lsl #4
     bc8:	00640000 	rsbeq	r0, r4, r0
     bcc:	00010000 	andeq	r0, r1, r0
     bd0:	00006452 	andeq	r6, r0, r2, asr r4
     bd4:	00006800 	andeq	r6, r0, r0, lsl #16
     bd8:	72000300 	andvc	r0, r0, #0, 6
     bdc:	00689f01 	rsbeq	r9, r8, r1, lsl #30
     be0:	00800000 	addeq	r0, r0, r0
     be4:	00010000 	andeq	r0, r1, r0
     be8:	00000052 	andeq	r0, r0, r2, asr r0
     bec:	00000000 	andeq	r0, r0, r0
     bf0:	00004000 	andeq	r4, r0, r0
     bf4:	00005400 	andeq	r5, r0, r0, lsl #8
     bf8:	53000100 	movwpl	r0, #256	; 0x100
     bfc:	00000054 	andeq	r0, r0, r4, asr r0
     c00:	00000078 	andeq	r0, r0, r8, ror r0
     c04:	00530001 	subseq	r0, r3, r1
     c08:	00000000 	andeq	r0, r0, r0
     c0c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     c10:	60000000 	andvs	r0, r0, r0
     c14:	01000000 	mrseq	r0, (UNDEF: 0)
     c18:	00605c00 	rsbeq	r5, r0, r0, lsl #24
     c1c:	00800000 	addeq	r0, r0, r0
     c20:	000a0000 	andeq	r0, sl, r0
     c24:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
     c28:	231c5301 	tstcs	ip, #67108864	; 0x4000000
     c2c:	00009f01 	andeq	r9, r0, r1, lsl #30
     c30:	00000000 	andeq	r0, r0, r0
     c34:	00800000 	addeq	r0, r0, r0
     c38:	00a40000 	adceq	r0, r4, r0
     c3c:	00010000 	andeq	r0, r1, r0
     c40:	0000a450 	andeq	sl, r0, r0, asr r4
     c44:	00011800 	andeq	r1, r1, r0, lsl #16
     c48:	70000300 	andvc	r0, r0, r0, lsl #6
     c4c:	01189f02 	tsteq	r8, r2, lsl #30
     c50:	021c0000 	andseq	r0, ip, #0
     c54:	00040000 	andeq	r0, r4, r0
     c58:	9f5001f3 	svcls	0x005001f3
	...
     c64:	00000080 	andeq	r0, r0, r0, lsl #1
     c68:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     c6c:	f0510001 			; <UNDEFINED> instruction: 0xf0510001
     c70:	60000000 	andvs	r0, r0, r0
     c74:	01000001 	tsteq	r0, r1
     c78:	01605500 	cmneq	r0, r0, lsl #10
     c7c:	01680000 	cmneq	r8, r0
     c80:	00010000 	andeq	r0, r1, r0
     c84:	00016851 	andeq	r6, r1, r1, asr r8
     c88:	00018800 	andeq	r8, r1, r0, lsl #16
     c8c:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     c90:	00000188 	andeq	r0, r0, r8, lsl #3
     c94:	0000019c 	muleq	r0, ip, r1
     c98:	9c510001 	mrrcls	0, 0, r0, r1, cr1
     c9c:	bc000001 	stclt	0, cr0, [r0], {1}
     ca0:	01000001 	tsteq	r0, r1
     ca4:	01bc5500 			; <UNDEFINED> instruction: 0x01bc5500
     ca8:	01bf0000 			; <UNDEFINED> instruction: 0x01bf0000
     cac:	00010000 	andeq	r0, r1, r0
     cb0:	0001bf51 	andeq	fp, r1, r1, asr pc
     cb4:	00020000 	andeq	r0, r2, r0
     cb8:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     cbc:	00000200 	andeq	r0, r0, r0, lsl #4
     cc0:	0000021c 	andeq	r0, r0, ip, lsl r2
     cc4:	01f30004 	mvnseq	r0, r4
     cc8:	00009f51 	andeq	r9, r0, r1, asr pc
     ccc:	00000000 	andeq	r0, r0, r0
     cd0:	00800000 	addeq	r0, r0, r0
     cd4:	00940000 	addseq	r0, r4, r0
     cd8:	00010000 	andeq	r0, r1, r0
     cdc:	00009452 	andeq	r9, r0, r2, asr r4
     ce0:	00020000 	andeq	r0, r2, r0
     ce4:	54000100 	strpl	r0, [r0], #-256	; 0x100
     ce8:	00000200 	andeq	r0, r0, r0, lsl #4
     cec:	0000021c 	andeq	r0, r0, ip, lsl r2
     cf0:	01f30004 	mvnseq	r0, r4
     cf4:	00009f52 	andeq	r9, r0, r2, asr pc
     cf8:	00000000 	andeq	r0, r0, r0
     cfc:	00800000 	addeq	r0, r0, r0
     d00:	01000000 	mrseq	r0, (UNDEF: 0)
     d04:	00010000 	andeq	r0, r1, r0
     d08:	00010453 	andeq	r0, r1, r3, asr r4
     d0c:	00010800 	andeq	r0, r1, r0, lsl #16
     d10:	53000100 	movwpl	r0, #256	; 0x100
     d14:	00000160 	andeq	r0, r0, r0, ror #2
     d18:	00000168 	andeq	r0, r0, r8, ror #2
     d1c:	68530001 	ldmdavs	r3, {r0}^
     d20:	88000001 	stmdahi	r0, {r0}
     d24:	04000001 	streq	r0, [r0], #-1
     d28:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
     d2c:	0001889f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
     d30:	00019000 	andeq	r9, r1, r0
     d34:	53000100 	movwpl	r0, #256	; 0x100
     d38:	00000190 	muleq	r0, r0, r1
     d3c:	00000194 	muleq	r0, r4, r1
     d40:	945c0001 	ldrbls	r0, [ip], #-1
     d44:	9c000001 	stcls	0, cr0, [r0], {1}
     d48:	01000001 	tsteq	r0, r1
     d4c:	019c5300 	orrseq	r5, ip, r0, lsl #6
     d50:	01bc0000 			; <UNDEFINED> instruction: 0x01bc0000
     d54:	00040000 	andeq	r0, r4, r0
     d58:	9f5301f3 	svcls	0x005301f3
     d5c:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     d60:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
     d64:	bf530001 	svclt	0x00530001
     d68:	d8000001 	stmdale	r0, {r0}
     d6c:	04000001 	streq	r0, [r0], #-1
     d70:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
     d74:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     d78:	00000000 	andeq	r0, r0, r0
     d7c:	00008000 	andeq	r8, r0, r0
     d80:	00009c00 	andeq	r9, r0, r0, lsl #24
     d84:	91000200 	mrsls	r0, R8_usr
     d88:	00009c00 	andeq	r9, r0, r0, lsl #24
     d8c:	0001bf00 	andeq	fp, r1, r0, lsl #30
     d90:	52000100 	andpl	r0, r0, #0, 2
     d94:	000001d8 	ldrdeq	r0, [r0], -r8
     d98:	000001e3 	andeq	r0, r0, r3, ror #3
     d9c:	00520001 	subseq	r0, r2, r1
     da0:	00000000 	andeq	r0, r0, r0
     da4:	9c000000 	stcls	0, cr0, [r0], {-0}
     da8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     dac:	01000001 	tsteq	r0, r1
     db0:	01185d00 	tsteq	r8, r0, lsl #26
     db4:	011c0000 	tsteq	ip, r0
     db8:	00010000 	andeq	r0, r1, r0
     dbc:	00011c53 	andeq	r1, r1, r3, asr ip
     dc0:	00012000 	andeq	r2, r1, r0
     dc4:	51000100 	mrspl	r0, (UNDEF: 16)
     dc8:	00000120 	andeq	r0, r0, r0, lsr #2
     dcc:	00000160 	andeq	r0, r0, r0, ror #2
     dd0:	60530001 	subsvs	r0, r3, r1
     dd4:	68000001 	stmdavs	r0, {r0}
     dd8:	01000001 	tsteq	r0, r1
     ddc:	01685d00 	cmneq	r8, r0, lsl #26
     de0:	016c0000 	cmneq	ip, r0
     de4:	00010000 	andeq	r0, r1, r0
     de8:	00016c5e 	andeq	r6, r1, lr, asr ip
     dec:	00018800 	andeq	r8, r1, r0, lsl #16
     df0:	53000100 	movwpl	r0, #256	; 0x100
     df4:	00000188 	andeq	r0, r0, r8, lsl #3
     df8:	00000190 	muleq	r0, r0, r1
     dfc:	a1910004 	orrsge	r0, r1, r4
     e00:	01909f7f 	orrseq	r9, r0, pc, ror pc
     e04:	01940000 	orrseq	r0, r4, r0
     e08:	00010000 	andeq	r0, r1, r0
     e0c:	00019453 	andeq	r9, r1, r3, asr r4
     e10:	00019c00 	andeq	r9, r1, r0, lsl #24
     e14:	5d000100 	stfpls	f0, [r0, #-0]
     e18:	0000019c 	muleq	r0, ip, r1
     e1c:	000001a0 	andeq	r0, r0, r0, lsr #3
     e20:	a05e0001 	subsge	r0, lr, r1
     e24:	bc000001 	stclt	0, cr0, [r0], {1}
     e28:	01000001 	tsteq	r0, r1
     e2c:	01bc5300 			; <UNDEFINED> instruction: 0x01bc5300
     e30:	01d80000 	bicseq	r0, r8, r0
     e34:	00010000 	andeq	r0, r1, r0
     e38:	0001d85d 	andeq	sp, r1, sp, asr r8
     e3c:	0001e300 	andeq	lr, r1, r0, lsl #6
     e40:	53000100 	movwpl	r0, #256	; 0x100
	...
     e4c:	000000a0 	andeq	r0, r0, r0, lsr #1
     e50:	000000ec 	andeq	r0, r0, ip, ror #1
     e54:	ec5c0001 	mrrc	0, 0, r0, ip, cr1
     e58:	00000000 	andeq	r0, r0, r0
     e5c:	01000001 	tsteq	r0, r1
     e60:	01005300 	mrseq	r5, LR_irq
     e64:	01040000 	mrseq	r0, (UNDEF: 4)
     e68:	00010000 	andeq	r0, r1, r0
     e6c:	0001045c 	andeq	r0, r1, ip, asr r4
     e70:	00010800 	andeq	r0, r1, r0, lsl #16
     e74:	53000100 	movwpl	r0, #256	; 0x100
     e78:	00000108 	andeq	r0, r0, r8, lsl #2
     e7c:	00000118 	andeq	r0, r0, r8, lsl r1
     e80:	185c0001 	ldmdane	ip, {r0}^
     e84:	1c000001 	stcne	0, cr0, [r0], {1}
     e88:	01000001 	tsteq	r0, r1
     e8c:	011c5000 	tsteq	ip, r0
     e90:	013c0000 	teqeq	ip, r0
     e94:	00010000 	andeq	r0, r1, r0
     e98:	0001445c 	andeq	r4, r1, ip, asr r4
     e9c:	00015800 	andeq	r5, r1, r0, lsl #16
     ea0:	50000100 	andpl	r0, r0, r0, lsl #2
     ea4:	00000158 	andeq	r0, r0, r8, asr r1
     ea8:	00000160 	andeq	r0, r0, r0, ror #2
     eac:	605c0001 	subsvs	r0, ip, r1
     eb0:	68000001 	stmdavs	r0, {r0}
     eb4:	01000001 	tsteq	r0, r1
     eb8:	01685300 	cmneq	r8, r0, lsl #6
     ebc:	01780000 	cmneq	r8, r0
     ec0:	00010000 	andeq	r0, r1, r0
     ec4:	0001785c 	andeq	r7, r1, ip, asr r8
     ec8:	00018000 	andeq	r8, r1, r0
     ecc:	7c000500 	cfstr32vc	mvfx0, [r0], {-0}
     ed0:	9f253400 	svcls	0x00253400
     ed4:	00000180 	andeq	r0, r0, r0, lsl #3
     ed8:	00000188 	andeq	r0, r0, r8, lsl #3
     edc:	885c0001 	ldmdahi	ip, {r0}^
     ee0:	90000001 	andls	r0, r0, r1
     ee4:	01000001 	tsteq	r0, r1
     ee8:	01905300 	orrseq	r5, r0, r0, lsl #6
     eec:	01940000 	orrseq	r0, r4, r0
     ef0:	00010000 	andeq	r0, r1, r0
     ef4:	0001945c 	andeq	r9, r1, ip, asr r4
     ef8:	00019c00 	andeq	r9, r1, r0, lsl #24
     efc:	53000100 	movwpl	r0, #256	; 0x100
     f00:	0000019c 	muleq	r0, ip, r1
     f04:	000001ac 	andeq	r0, r0, ip, lsr #3
     f08:	ac5c0001 	mrrcge	0, 0, r0, ip, cr1
     f0c:	b4000001 	strlt	r0, [r0], #-1
     f10:	05000001 	streq	r0, [r0, #-1]
     f14:	31007c00 	tstcc	r0, r0, lsl #24
     f18:	01b49f25 			; <UNDEFINED> instruction: 0x01b49f25
     f1c:	01bc0000 			; <UNDEFINED> instruction: 0x01bc0000
     f20:	00010000 	andeq	r0, r1, r0
     f24:	0001bc5c 	andeq	fp, r1, ip, asr ip
     f28:	0001bf00 	andeq	fp, r1, r0, lsl #30
     f2c:	53000100 	movwpl	r0, #256	; 0x100
     f30:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
     f34:	000001d8 	ldrdeq	r0, [r0], -r8
     f38:	01f30004 	mvnseq	r0, r4
     f3c:	01d89f53 	bicseq	r9, r8, r3, asr pc
     f40:	01e30000 	mvneq	r0, r0
     f44:	00010000 	andeq	r0, r1, r0
     f48:	0000005c 	andeq	r0, r0, ip, asr r0
     f4c:	00000000 	andeq	r0, r0, r0
     f50:	0000ec00 	andeq	lr, r0, r0, lsl #24
     f54:	0000fc00 	andeq	pc, r0, r0, lsl #24
     f58:	30000200 	andcc	r0, r0, r0, lsl #4
     f5c:	0000fc9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
     f60:	00010400 	andeq	r0, r1, r0, lsl #8
     f64:	31000200 	mrscc	r0, R8_usr
     f68:	0001049f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
     f6c:	00010800 	andeq	r0, r1, r0, lsl #16
     f70:	30000200 	andcc	r0, r0, r0, lsl #4
     f74:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     f78:	00000000 	andeq	r0, r0, r0
     f7c:	00021c00 	andeq	r1, r2, r0, lsl #24
     f80:	00022b00 	andeq	r2, r2, r0, lsl #22
     f84:	50000100 	andpl	r0, r0, r0, lsl #2
     f88:	0000022b 	andeq	r0, r0, fp, lsr #4
     f8c:	00000244 	andeq	r0, r0, r4, asr #4
     f90:	01f30004 	mvnseq	r0, r4
     f94:	02449f50 	subeq	r9, r4, #80, 30	; 0x140
     f98:	02700000 	rsbseq	r0, r0, #0
     f9c:	00010000 	andeq	r0, r1, r0
     fa0:	00000050 	andeq	r0, r0, r0, asr r0
     fa4:	00000000 	andeq	r0, r0, r0
     fa8:	00021c00 	andeq	r1, r2, r0, lsl #24
     fac:	00022b00 	andeq	r2, r2, r0, lsl #22
     fb0:	51000100 	mrspl	r0, (UNDEF: 16)
     fb4:	0000022b 	andeq	r0, r0, fp, lsr #4
     fb8:	00000244 	andeq	r0, r0, r4, asr #4
     fbc:	01f30004 	mvnseq	r0, r4
     fc0:	02449f51 	subeq	r9, r4, #324	; 0x144
     fc4:	02700000 	rsbseq	r0, r0, #0
     fc8:	00010000 	andeq	r0, r1, r0
     fcc:	00000051 	andeq	r0, r0, r1, asr r0
     fd0:	00000000 	andeq	r0, r0, r0
     fd4:	00027000 	andeq	r7, r2, r0
     fd8:	00029c00 	andeq	r9, r2, r0, lsl #24
     fdc:	50000100 	andpl	r0, r0, r0, lsl #2
     fe0:	0000029c 	muleq	r0, ip, r2
     fe4:	000004e4 	andeq	r0, r0, r4, ror #9
     fe8:	e45a0001 	ldrb	r0, [sl], #-1
     fec:	f8000004 			; <UNDEFINED> instruction: 0xf8000004
     ff0:	04000004 	streq	r0, [r0], #-4
     ff4:	5001f300 	andpl	pc, r1, r0, lsl #6
     ff8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     ffc:	00000000 	andeq	r0, r0, r0
    1000:	00027000 	andeq	r7, r2, r0
    1004:	00028400 	andeq	r8, r2, r0, lsl #8
    1008:	51000100 	mrspl	r0, (UNDEF: 16)
    100c:	00000284 	andeq	r0, r0, r4, lsl #5
    1010:	0000029c 	muleq	r0, ip, r2
    1014:	01710003 	cmneq	r1, r3
    1018:	00029c9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
    101c:	0004f800 	andeq	pc, r4, r0, lsl #16
    1020:	f3000400 	vshl.u8	d0, d0, d0
    1024:	009f5101 	addseq	r5, pc, r1, lsl #2
    1028:	00000000 	andeq	r0, r0, r0
    102c:	70000000 	andvc	r0, r0, r0
    1030:	a4000002 	strge	r0, [r0], #-2
    1034:	01000002 	tsteq	r0, r2
    1038:	02a45200 	adceq	r5, r4, #0, 4
    103c:	02cc0000 	sbceq	r0, ip, #0
    1040:	00010000 	andeq	r0, r1, r0
    1044:	0002cc52 	andeq	ip, r2, r2, asr ip
    1048:	00049400 	andeq	r9, r4, r0, lsl #8
    104c:	56000100 	strpl	r0, [r0], -r0, lsl #2
    1050:	00000494 	muleq	r0, r4, r4
    1054:	000004f8 	strdeq	r0, [r0], -r8
    1058:	00520001 	subseq	r0, r2, r1
    105c:	00000000 	andeq	r0, r0, r0
    1060:	70000000 	andvc	r0, r0, r0
    1064:	8c000002 	stchi	0, cr0, [r0], {2}
    1068:	01000002 	tsteq	r0, r2
    106c:	00005300 	andeq	r5, r0, r0, lsl #6
    1070:	00000000 	andeq	r0, r0, r0
    1074:	02800000 	addeq	r0, r0, #0
    1078:	029c0000 	addseq	r0, ip, #0
    107c:	00010000 	andeq	r0, r1, r0
    1080:	00029c50 	andeq	r9, r2, r0, asr ip
    1084:	0002a000 	andeq	sl, r2, r0
    1088:	54000100 	strpl	r0, [r0], #-256	; 0x100
    108c:	000002a0 	andeq	r0, r0, r0, lsr #5
    1090:	000002ac 	andeq	r0, r0, ip, lsr #5
    1094:	01740003 	cmneq	r4, r3
    1098:	0002ac9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
    109c:	0002b800 	andeq	fp, r2, r0, lsl #16
    10a0:	54000100 	strpl	r0, [r0], #-256	; 0x100
    10a4:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    10a8:	000002c4 	andeq	r0, r0, r4, asr #5
    10ac:	01740003 	cmneq	r4, r3
    10b0:	0002c49f 	muleq	r2, pc, r4	; <UNPREDICTABLE>
    10b4:	00049800 	andeq	r9, r4, r0, lsl #16
    10b8:	54000100 	strpl	r0, [r0], #-256	; 0x100
    10bc:	00000498 	muleq	r0, r8, r4
    10c0:	000004a4 	andeq	r0, r0, r4, lsr #9
    10c4:	01740003 	cmneq	r4, r3
    10c8:	0004a49f 	muleq	r4, pc, r4	; <UNPREDICTABLE>
    10cc:	0004d000 	andeq	sp, r4, r0
    10d0:	54000100 	strpl	r0, [r0], #-256	; 0x100
    10d4:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    10d8:	000004dc 	ldrdeq	r0, [r0], -ip
    10dc:	dc500001 	mrrcle	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    10e0:	e4000004 	str	r0, [r0], #-4
    10e4:	03000004 	movweq	r0, #4
    10e8:	9f017400 	svcls	0x00017400
	...
    10f4:	00000288 	andeq	r0, r0, r8, lsl #5
    10f8:	000004e4 	andeq	r0, r0, r4, ror #9
    10fc:	e4580001 	ldrb	r0, [r8], #-1
    1100:	f8000004 			; <UNDEFINED> instruction: 0xf8000004
    1104:	0a000004 	beq	111c <_start-0x6ee4>
    1108:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    110c:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    1110:	009f1c31 	addseq	r1, pc, r1, lsr ip	; <UNPREDICTABLE>
    1114:	00000000 	andeq	r0, r0, r0
    1118:	cc000000 	stcgt	0, cr0, [r0], {-0}
    111c:	d0000003 	andle	r0, r0, r3
    1120:	01000003 	tsteq	r0, r3
    1124:	03f05000 	mvnseq	r5, #0
    1128:	03f40000 	mvnseq	r0, #0
    112c:	00010000 	andeq	r0, r1, r0
    1130:	00041450 	andeq	r1, r4, r0, asr r4
    1134:	00041800 	andeq	r1, r4, r0, lsl #16
    1138:	50000100 	andpl	r0, r0, r0, lsl #2
    113c:	00000438 	andeq	r0, r0, r8, lsr r4
    1140:	0000043c 	andeq	r0, r0, ip, lsr r4
    1144:	44500001 	ldrbmi	r0, [r0], #-1
    1148:	48000004 	stmdami	r0, {r2}
    114c:	01000004 	tsteq	r0, r4
    1150:	04685000 	strbteq	r5, [r8], #-0
    1154:	046c0000 	strbteq	r0, [ip], #-0
    1158:	00010000 	andeq	r0, r1, r0
    115c:	00049050 	andeq	r9, r4, r0, asr r0
    1160:	0004b800 	andeq	fp, r4, r0, lsl #16
    1164:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1170:	000002cc 	andeq	r0, r0, ip, asr #5
    1174:	000002d4 	ldrdeq	r0, [r0], -r4
    1178:	9f300002 	svcls	0x00300002
    117c:	000002d4 	ldrdeq	r0, [r0], -r4
    1180:	000002d8 	ldrdeq	r0, [r0], -r8
    1184:	e4570001 	ldrb	r0, [r7], #-1
    1188:	b8000002 	stmdalt	r0, {r1}
    118c:	01000004 	tsteq	r0, r4
    1190:	00005700 	andeq	r5, r0, r0, lsl #14
	...
    119c:	000c0000 	andeq	r0, ip, r0
    11a0:	00010000 	andeq	r0, r1, r0
    11a4:	00000c50 	andeq	r0, r0, r0, asr ip
    11a8:	00002000 	andeq	r2, r0, r0
    11ac:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    11b8:	00000034 	andeq	r0, r0, r4, lsr r0
    11bc:	0000003c 	andeq	r0, r0, ip, lsr r0
    11c0:	04730003 	ldrbteq	r0, [r3], #-3
    11c4:	00003c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    11c8:	00004700 	andeq	r4, r0, r0, lsl #14
    11cc:	53000100 	movwpl	r0, #256	; 0x100
	...
    11d8:	00000048 	andeq	r0, r0, r8, asr #32
    11dc:	00000074 	andeq	r0, r0, r4, ror r0
    11e0:	74500001 	ldrbvc	r0, [r0], #-1
    11e4:	83000000 	movwhi	r0, #0
    11e8:	03000000 	movweq	r0, #0
    11ec:	9f787300 	svcls	0x00787300
	...
    11f8:	00009420 	andeq	r9, r0, r0, lsr #8
    11fc:	00009424 	andeq	r9, r0, r4, lsr #8
    1200:	9f300002 	svcls	0x00300002
    1204:	00009424 	andeq	r9, r0, r4, lsr #8
    1208:	00009428 	andeq	r9, r0, r8, lsr #8
    120c:	00500001 	subseq	r0, r0, r1
    1210:	00000000 	andeq	r0, r0, r0
    1214:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    1218:	3c000094 	stccc	0, cr0, [r0], {148}	; 0x94
    121c:	02000094 	andeq	r0, r0, #148	; 0x94
    1220:	3c9f3000 	ldccc	0, cr3, [pc], {0}
    1224:	40000094 	mulmi	r0, r4, r0
    1228:	01000094 	swpeq	r0, r4, [r0]	; <UNPREDICTABLE>
    122c:	94445300 	strbls	r5, [r4], #-768	; 0x300
    1230:	944c0000 	strbls	r0, [ip], #-0
    1234:	00010000 	andeq	r0, r1, r0
    1238:	00000053 	andeq	r0, r0, r3, asr r0
	...
    1244:	00000400 	andeq	r0, r0, r0, lsl #8
    1248:	50000100 	andpl	r0, r0, r0, lsl #2
    124c:	00000004 	andeq	r0, r0, r4
    1250:	0000000c 	andeq	r0, r0, ip
    1254:	0c530001 	mrrceq	0, 0, r0, r3, cr1
    1258:	10000000 	andne	r0, r0, r0
    125c:	01000000 	mrseq	r0, (UNDEF: 0)
    1260:	00105000 	andseq	r5, r0, r0
    1264:	001c0000 	andseq	r0, ip, r0
    1268:	00010000 	andeq	r0, r1, r0
    126c:	00000053 	andeq	r0, r0, r3, asr r0
    1270:	00000000 	andeq	r0, r0, r0
    1274:	00003c00 	andeq	r3, r0, r0, lsl #24
    1278:	00004700 	andeq	r4, r0, r0, lsl #14
    127c:	50000100 	andpl	r0, r0, r0, lsl #2
    1280:	00000047 	andeq	r0, r0, r7, asr #32
    1284:	00000060 	andeq	r0, r0, r0, rrx
    1288:	00550001 	subseq	r0, r5, r1
    128c:	00000000 	andeq	r0, r0, r0
    1290:	50000000 	andpl	r0, r0, r0
    1294:	54000000 	strpl	r0, [r0], #-0
    1298:	01000000 	mrseq	r0, (UNDEF: 0)
    129c:	00005000 	andeq	r5, r0, r0
    12a0:	00000000 	andeq	r0, r0, r0
    12a4:	00600000 	rsbeq	r0, r0, r0
    12a8:	006c0000 	rsbeq	r0, ip, r0
    12ac:	00010000 	andeq	r0, r1, r0
    12b0:	00006c50 	andeq	r6, r0, r0, asr ip
    12b4:	00007400 	andeq	r7, r0, r0, lsl #8
    12b8:	f3000400 	vshl.u8	d0, d0, d0
    12bc:	009f5001 	addseq	r5, pc, r1
    12c0:	00000000 	andeq	r0, r0, r0
    12c4:	74000000 	strvc	r0, [r0], #-0
    12c8:	80000000 	andhi	r0, r0, r0
    12cc:	01000000 	mrseq	r0, (UNDEF: 0)
    12d0:	00805000 	addeq	r5, r0, r0
    12d4:	00880000 	addeq	r0, r8, r0
    12d8:	00040000 	andeq	r0, r4, r0
    12dc:	9f5001f3 	svcls	0x005001f3
	...
    12ec:	00000017 	andeq	r0, r0, r7, lsl r0
    12f0:	17500001 	ldrbne	r0, [r0, -r1]
    12f4:	30000000 	andcc	r0, r0, r0
    12f8:	04000000 	streq	r0, [r0], #-0
    12fc:	5001f300 	andpl	pc, r1, r0, lsl #6
    1300:	0000309f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1304:	00004400 	andeq	r4, r0, r0, lsl #8
    1308:	50000100 	andpl	r0, r0, r0, lsl #2
    130c:	00000044 	andeq	r0, r0, r4, asr #32
    1310:	00000074 	andeq	r0, r0, r4, ror r0
    1314:	01f30004 	mvnseq	r0, r4
    1318:	00009f50 	andeq	r9, r0, r0, asr pc
    131c:	00000000 	andeq	r0, r0, r0
    1320:	00400000 	subeq	r0, r0, r0
    1324:	00580000 	subseq	r0, r8, r0
    1328:	00010000 	andeq	r0, r1, r0
    132c:	00005856 	andeq	r5, r0, r6, asr r8
    1330:	00007400 	andeq	r7, r0, r0, lsl #8
    1334:	f3000900 	vmls.i8	d0, d0, d0
    1338:	07235001 	streq	r5, [r3, -r1]!
    133c:	9f1af809 	svcls	0x001af809
	...
    1348:	00000074 	andeq	r0, r0, r4, ror r0
    134c:	0000008b 	andeq	r0, r0, fp, lsl #1
    1350:	8b500001 	blhi	140135c <__bss_end__+0x13f5c3c>
    1354:	a4000000 	strge	r0, [r0], #-0
    1358:	04000000 	streq	r0, [r0], #-0
    135c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1360:	0000a49f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    1364:	0000af00 	andeq	sl, r0, r0, lsl #30
    1368:	50000100 	andpl	r0, r0, r0, lsl #2
    136c:	000000af 	andeq	r0, r0, pc, lsr #1
    1370:	000000b4 	strheq	r0, [r0], -r4
    1374:	01f30004 	mvnseq	r0, r4
    1378:	00b49f50 	adcseq	r9, r4, r0, asr pc
    137c:	00bf0000 	adcseq	r0, pc, r0
    1380:	00010000 	andeq	r0, r1, r0
    1384:	0000bf50 	andeq	fp, r0, r0, asr pc
    1388:	0000d800 	andeq	sp, r0, r0, lsl #16
    138c:	f3000400 	vshl.u8	d0, d0, d0
    1390:	d89f5001 	ldmle	pc, {r0, ip, lr}	; <UNPREDICTABLE>
    1394:	f7000000 			; <UNDEFINED> instruction: 0xf7000000
    1398:	01000000 	mrseq	r0, (UNDEF: 0)
    139c:	00f75000 	rscseq	r5, r7, r0
    13a0:	01100000 	tsteq	r0, r0
    13a4:	00040000 	andeq	r0, r4, r0
    13a8:	9f5001f3 	svcls	0x005001f3
	...
    13b4:	00000074 	andeq	r0, r0, r4, ror r0
    13b8:	0000008b 	andeq	r0, r0, fp, lsl #1
    13bc:	8b510001 	blhi	14413c8 <__bss_end__+0x1435ca8>
    13c0:	a4000000 	strge	r0, [r0], #-0
    13c4:	04000000 	streq	r0, [r0], #-0
    13c8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    13cc:	0000a49f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    13d0:	0000af00 	andeq	sl, r0, r0, lsl #30
    13d4:	51000100 	mrspl	r0, (UNDEF: 16)
    13d8:	000000af 	andeq	r0, r0, pc, lsr #1
    13dc:	000000b4 	strheq	r0, [r0], -r4
    13e0:	01f30004 	mvnseq	r0, r4
    13e4:	00b49f51 	adcseq	r9, r4, r1, asr pc
    13e8:	00bf0000 	adcseq	r0, pc, r0
    13ec:	00010000 	andeq	r0, r1, r0
    13f0:	0000bf51 	andeq	fp, r0, r1, asr pc
    13f4:	0000d800 	andeq	sp, r0, r0, lsl #16
    13f8:	f3000400 	vshl.u8	d0, d0, d0
    13fc:	d89f5101 	ldmle	pc, {r0, r8, ip, lr}	; <UNPREDICTABLE>
    1400:	ec000000 	stc	0, cr0, [r0], {-0}
    1404:	01000000 	mrseq	r0, (UNDEF: 0)
    1408:	00ec5100 	rsceq	r5, ip, r0, lsl #2
    140c:	00f00000 	rscseq	r0, r0, r0
    1410:	00040000 	andeq	r0, r4, r0
    1414:	9f1f0071 	svcls	0x001f0071
    1418:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    141c:	00000110 	andeq	r0, r0, r0, lsl r1
    1420:	01f30004 	mvnseq	r0, r4
    1424:	00009f51 	andeq	r9, r0, r1, asr pc
    1428:	00000000 	andeq	r0, r0, r0
    142c:	00e00000 	rsceq	r0, r0, r0
    1430:	00e40000 	rsceq	r0, r4, r0
    1434:	00010000 	andeq	r0, r1, r0
    1438:	0000e452 	andeq	lr, r0, r2, asr r4
    143c:	0000f000 	andeq	pc, r0, r0
    1440:	03000500 	movweq	r0, #1280	; 0x500
    1444:	0000b714 	andeq	fp, r0, r4, lsl r7
    1448:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    144c:	000000f7 	strdeq	r0, [r0], -r7
    1450:	00510001 	subseq	r0, r1, r1
    1454:	00000000 	andeq	r0, r0, r0
    1458:	94000000 	strls	r0, [r0], #-0
    145c:	ab000001 	blge	1468 <_start-0x6b98>
    1460:	01000001 	tsteq	r0, r1
    1464:	01ab5000 			; <UNDEFINED> instruction: 0x01ab5000
    1468:	01c40000 	biceq	r0, r4, r0
    146c:	00040000 	andeq	r0, r4, r0
    1470:	9f5001f3 	svcls	0x005001f3
    1474:	000001c4 	andeq	r0, r0, r4, asr #3
    1478:	000001e8 	andeq	r0, r0, r8, ror #3
    147c:	00500001 	subseq	r0, r0, r1
	...
    1488:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    148c:	01000000 	mrseq	r0, (UNDEF: 0)
    1490:	00185000 	andseq	r5, r8, r0
    1494:	01540000 	cmpeq	r4, r0
    1498:	00040000 	andeq	r0, r4, r0
    149c:	9f5001f3 	svcls	0x005001f3
	...
    14ac:	0000001c 	andeq	r0, r0, ip, lsl r0
    14b0:	1c510001 	mrrcne	0, 0, r0, r1, cr1
    14b4:	54000000 	strpl	r0, [r0], #-0
    14b8:	04000001 	streq	r0, [r0], #-1
    14bc:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    14c0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    14c4:	00000000 	andeq	r0, r0, r0
    14c8:	00001000 	andeq	r1, r0, r0
    14cc:	00013400 	andeq	r3, r1, r0, lsl #8
    14d0:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    14dc:	00000010 	andeq	r0, r0, r0, lsl r0
    14e0:	00000034 	andeq	r0, r0, r4, lsr r0
    14e4:	34550001 	ldrbcc	r0, [r5], #-1
    14e8:	34000000 	strcc	r0, [r0], #-0
    14ec:	01000001 	tsteq	r0, r1
    14f0:	01345800 	teqeq	r4, r0, lsl #16
    14f4:	01540000 	cmpeq	r4, r0
    14f8:	00010000 	andeq	r0, r1, r0
    14fc:	00000055 	andeq	r0, r0, r5, asr r0
    1500:	00000000 	andeq	r0, r0, r0
    1504:	00001400 	andeq	r1, r0, r0, lsl #8
    1508:	00013400 	andeq	r3, r1, r0, lsl #8
    150c:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    1518:	00000020 	andeq	r0, r0, r0, lsr #32
    151c:	00000134 	andeq	r0, r0, r4, lsr r1
    1520:	00550001 	subseq	r0, r5, r1
    1524:	00000000 	andeq	r0, r0, r0
    1528:	24000000 	strcs	r0, [r0], #-0
    152c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    1530:	01000000 	mrseq	r0, (UNDEF: 0)
    1534:	00005300 	andeq	r5, r0, r0, lsl #6
    1538:	00000000 	andeq	r0, r0, r0
    153c:	00340000 	eorseq	r0, r4, r0
    1540:	00540000 	subseq	r0, r4, r0
    1544:	00010000 	andeq	r0, r1, r0
    1548:	00005458 	andeq	r5, r0, r8, asr r4
    154c:	00013400 	andeq	r3, r1, r0, lsl #8
    1550:	75000500 	strvc	r0, [r0, #-1280]	; 0x500
    1554:	9f243100 	svcls	0x00243100
	...
    1560:	00000034 	andeq	r0, r0, r4, lsr r0
    1564:	0000003c 	andeq	r0, r0, ip, lsr r0
    1568:	00770005 	rsbseq	r0, r7, r5
    156c:	3c9f1a31 	vldmiacc	pc, {s2-s50}
    1570:	3f000000 	svccc	0x00000000
    1574:	01000000 	mrseq	r0, (UNDEF: 0)
    1578:	003f5100 	eorseq	r5, pc, r0, lsl #2
    157c:	01540000 	cmpeq	r4, r0
    1580:	00050000 	andeq	r0, r5, r0
    1584:	1a310077 	bne	c41768 <__bss_end__+0xc36048>
    1588:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    158c:	00000000 	andeq	r0, r0, r0
    1590:	00004000 	andeq	r4, r0, r0
    1594:	00005400 	andeq	r5, r0, r0, lsl #8
    1598:	58000100 	stmdapl	r0, {r8}
    159c:	00000054 	andeq	r0, r0, r4, asr r0
    15a0:	00000134 	andeq	r0, r0, r4, lsr r1
    15a4:	00750005 	rsbseq	r0, r5, r5
    15a8:	009f2431 	addseq	r2, pc, r1, lsr r4	; <UNPREDICTABLE>
    15ac:	00000000 	andeq	r0, r0, r0
    15b0:	44000000 	strmi	r0, [r0], #-0
    15b4:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    15b8:	01000000 	mrseq	r0, (UNDEF: 0)
    15bc:	00005300 	andeq	r5, r0, r0, lsl #6
    15c0:	00000000 	andeq	r0, r0, r0
    15c4:	00540000 	subseq	r0, r4, r0
    15c8:	00740000 	rsbseq	r0, r4, r0
    15cc:	00010000 	andeq	r0, r1, r0
    15d0:	00007458 	andeq	r7, r0, r8, asr r4
    15d4:	00013400 	andeq	r3, r1, r0, lsl #8
    15d8:	75000800 	strvc	r0, [r0, #-2048]	; 0x800
    15dc:	75243100 	strvc	r3, [r4, #-256]!	; 0x100
    15e0:	009f2200 	addseq	r2, pc, r0, lsl #4
    15e4:	00000000 	andeq	r0, r0, r0
    15e8:	60000000 	andvs	r0, r0, r0
    15ec:	74000000 	strvc	r0, [r0], #-0
    15f0:	01000000 	mrseq	r0, (UNDEF: 0)
    15f4:	00745800 	rsbseq	r5, r4, r0, lsl #16
    15f8:	01340000 	teqeq	r4, r0
    15fc:	00080000 	andeq	r0, r8, r0
    1600:	24310075 	ldrtcs	r0, [r1], #-117	; 0x75
    1604:	9f220075 	svcls	0x00220075
	...
    1610:	00000064 	andeq	r0, r0, r4, rrx
    1614:	00000068 	andeq	r0, r0, r8, rrx
    1618:	00530001 	subseq	r0, r3, r1
    161c:	00000000 	andeq	r0, r0, r0
    1620:	74000000 	strvc	r0, [r0], #-0
    1624:	94000000 	strls	r0, [r0], #-0
    1628:	01000000 	mrseq	r0, (UNDEF: 0)
    162c:	00945800 	addseq	r5, r4, r0, lsl #16
    1630:	01340000 	teqeq	r4, r0
    1634:	00050000 	andeq	r0, r5, r0
    1638:	24320075 	ldrtcs	r0, [r2], #-117	; 0x75
    163c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1640:	00000000 	andeq	r0, r0, r0
    1644:	00008000 	andeq	r8, r0, r0
    1648:	00009400 	andeq	r9, r0, r0, lsl #8
    164c:	58000100 	stmdapl	r0, {r8}
    1650:	00000094 	muleq	r0, r4, r0
    1654:	00000134 	andeq	r0, r0, r4, lsr r1
    1658:	00750005 	rsbseq	r0, r5, r5
    165c:	009f2432 	addseq	r2, pc, r2, lsr r4	; <UNPREDICTABLE>
    1660:	00000000 	andeq	r0, r0, r0
    1664:	84000000 	strhi	r0, [r0], #-0
    1668:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    166c:	01000000 	mrseq	r0, (UNDEF: 0)
    1670:	00005300 	andeq	r5, r0, r0, lsl #6
    1674:	00000000 	andeq	r0, r0, r0
    1678:	00940000 	addseq	r0, r4, r0
    167c:	00b40000 	adcseq	r0, r4, r0
    1680:	00010000 	andeq	r0, r1, r0
    1684:	0000b458 	andeq	fp, r0, r8, asr r4
    1688:	00013400 	andeq	r3, r1, r0, lsl #8
    168c:	75000800 	strvc	r0, [r0, #-2048]	; 0x800
    1690:	75243200 	strvc	r3, [r4, #-512]!	; 0x200
    1694:	009f2200 	addseq	r2, pc, r0, lsl #4
    1698:	00000000 	andeq	r0, r0, r0
    169c:	a0000000 	andge	r0, r0, r0
    16a0:	b4000000 	strlt	r0, [r0], #-0
    16a4:	01000000 	mrseq	r0, (UNDEF: 0)
    16a8:	00b45800 	adcseq	r5, r4, r0, lsl #16
    16ac:	01340000 	teqeq	r4, r0
    16b0:	00080000 	andeq	r0, r8, r0
    16b4:	24320075 	ldrtcs	r0, [r2], #-117	; 0x75
    16b8:	9f220075 	svcls	0x00220075
	...
    16c4:	000000a4 	andeq	r0, r0, r4, lsr #1
    16c8:	000000a8 	andeq	r0, r0, r8, lsr #1
    16cc:	00530001 	subseq	r0, r3, r1
    16d0:	00000000 	andeq	r0, r0, r0
    16d4:	b4000000 	strlt	r0, [r0], #-0
    16d8:	d4000000 	strle	r0, [r0], #-0
    16dc:	01000000 	mrseq	r0, (UNDEF: 0)
    16e0:	00d45800 	sbcseq	r5, r4, r0, lsl #16
    16e4:	01340000 	teqeq	r4, r0
    16e8:	000a0000 	andeq	r0, sl, r0
    16ec:	24320075 	ldrtcs	r0, [r2], #-117	; 0x75
    16f0:	24310075 	ldrtcs	r0, [r1], #-117	; 0x75
    16f4:	00009f22 	andeq	r9, r0, r2, lsr #30
    16f8:	00000000 	andeq	r0, r0, r0
    16fc:	00c00000 	sbceq	r0, r0, r0
    1700:	00d40000 	sbcseq	r0, r4, r0
    1704:	00010000 	andeq	r0, r1, r0
    1708:	0000d458 	andeq	sp, r0, r8, asr r4
    170c:	00013400 	andeq	r3, r1, r0, lsl #8
    1710:	75000a00 	strvc	r0, [r0, #-2560]	; 0xa00
    1714:	75243200 	strvc	r3, [r4, #-512]!	; 0x200
    1718:	22243100 	eorcs	r3, r4, #0, 2
    171c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1720:	00000000 	andeq	r0, r0, r0
    1724:	0000c400 	andeq	ip, r0, r0, lsl #8
    1728:	0000c800 	andeq	ip, r0, r0, lsl #16
    172c:	53000100 	movwpl	r0, #256	; 0x100
	...
    1738:	000000d4 	ldrdeq	r0, [r0], -r4
    173c:	000000f4 	strdeq	r0, [r0], -r4
    1740:	f4580001 			; <UNDEFINED> instruction: 0xf4580001
    1744:	34000000 	strcc	r0, [r0], #-0
    1748:	0d000001 	stceq	0, cr0, [r0, #-4]
    174c:	32007500 	andcc	r7, r0, #0, 10
    1750:	31007524 	tstcc	r0, r4, lsr #10
    1754:	00752224 	rsbseq	r2, r5, r4, lsr #4
    1758:	00009f22 	andeq	r9, r0, r2, lsr #30
    175c:	00000000 	andeq	r0, r0, r0
    1760:	00e00000 	rsceq	r0, r0, r0
    1764:	00f40000 	rscseq	r0, r4, r0
    1768:	00010000 	andeq	r0, r1, r0
    176c:	0000f458 	andeq	pc, r0, r8, asr r4	; <UNPREDICTABLE>
    1770:	00013400 	andeq	r3, r1, r0, lsl #8
    1774:	75000d00 	strvc	r0, [r0, #-3328]	; 0xd00
    1778:	75243200 	strvc	r3, [r4, #-512]!	; 0x200
    177c:	22243100 	eorcs	r3, r4, #0, 2
    1780:	9f220075 	svcls	0x00220075
	...
    178c:	000000e4 	andeq	r0, r0, r4, ror #1
    1790:	000000e8 	andeq	r0, r0, r8, ror #1
    1794:	00530001 	subseq	r0, r3, r1
    1798:	00000000 	andeq	r0, r0, r0
    179c:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    17a0:	14000000 	strne	r0, [r0], #-0
    17a4:	01000001 	tsteq	r0, r1
    17a8:	01145800 	tsteq	r4, r0, lsl #16
    17ac:	01340000 	teqeq	r4, r0
    17b0:	00050000 	andeq	r0, r5, r0
    17b4:	24330075 	ldrtcs	r0, [r3], #-117	; 0x75
    17b8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    17bc:	00000000 	andeq	r0, r0, r0
    17c0:	00010000 	andeq	r0, r1, r0
    17c4:	00011400 	andeq	r1, r1, r0, lsl #8
    17c8:	58000100 	stmdapl	r0, {r8}
    17cc:	00000114 	andeq	r0, r0, r4, lsl r1
    17d0:	00000134 	andeq	r0, r0, r4, lsr r1
    17d4:	00750005 	rsbseq	r0, r5, r5
    17d8:	009f2433 	addseq	r2, pc, r3, lsr r4	; <UNPREDICTABLE>
    17dc:	00000000 	andeq	r0, r0, r0
    17e0:	04000000 	streq	r0, [r0], #-0
    17e4:	08000001 	stmdaeq	r0, {r0}
    17e8:	01000001 	tsteq	r0, r1
    17ec:	00005300 	andeq	r5, r0, r0, lsl #6
    17f0:	00000000 	andeq	r0, r0, r0
    17f4:	01140000 	tsteq	r4, r0
    17f8:	011c0000 	tsteq	ip, r0
    17fc:	00060000 	andeq	r0, r6, r0
    1800:	80080077 	andhi	r0, r8, r7, ror r0
    1804:	011c9f1a 	tsteq	ip, sl, lsl pc
    1808:	011f0000 	tsteq	pc, r0
    180c:	00010000 	andeq	r0, r1, r0
    1810:	00011f51 	andeq	r1, r1, r1, asr pc
    1814:	00015400 	andeq	r5, r1, r0, lsl #8
    1818:	77000600 	strvc	r0, [r0, -r0, lsl #12]
    181c:	1a800800 	bne	fe003824 <__bss_end__+0xfdff8104>
    1820:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1824:	00000000 	andeq	r0, r0, r0
    1828:	00012400 	andeq	r2, r1, r0, lsl #8
    182c:	00012800 	andeq	r2, r1, r0, lsl #16
    1830:	53000100 	movwpl	r0, #256	; 0x100
	...
    183c:	00000144 	andeq	r0, r0, r4, asr #2
    1840:	00000148 	andeq	r0, r0, r8, asr #2
    1844:	00530001 	subseq	r0, r3, r1
    1848:	00000000 	andeq	r0, r0, r0
    184c:	54000000 	strpl	r0, [r0], #-0
    1850:	6b000001 	blvs	185c <_start-0x67a4>
    1854:	01000001 	tsteq	r0, r1
    1858:	016b5000 	cmneq	fp, r0
    185c:	01d00000 	bicseq	r0, r0, r0
    1860:	00010000 	andeq	r0, r1, r0
    1864:	0001d059 	andeq	sp, r1, r9, asr r0
    1868:	00030c00 	andeq	r0, r3, r0, lsl #24
    186c:	f3000400 	vshl.u8	d0, d0, d0
    1870:	0c9f5001 	ldceq	0, cr5, [pc], {1}
    1874:	14000003 	strne	r0, [r0], #-3
    1878:	01000003 	tsteq	r0, r3
    187c:	03145900 	tsteq	r4, #0, 18
    1880:	031c0000 	tsteq	ip, #0
    1884:	00040000 	andeq	r0, r4, r0
    1888:	9f5001f3 	svcls	0x005001f3
	...
    1894:	00000154 	andeq	r0, r0, r4, asr r1
    1898:	0000016b 	andeq	r0, r0, fp, ror #2
    189c:	6b510001 	blvs	14418a8 <__bss_end__+0x1436188>
    18a0:	1c000001 	stcne	0, cr0, [r0], {1}
    18a4:	01000003 	tsteq	r0, r3
    18a8:	00005600 	andeq	r5, r0, r0, lsl #12
    18ac:	00000000 	andeq	r0, r0, r0
    18b0:	01a80000 			; <UNDEFINED> instruction: 0x01a80000
    18b4:	02980000 	addseq	r0, r8, #0
    18b8:	00010000 	andeq	r0, r1, r0
    18bc:	00000058 	andeq	r0, r0, r8, asr r0
    18c0:	00000000 	andeq	r0, r0, r0
    18c4:	0001ac00 	andeq	sl, r1, r0, lsl #24
    18c8:	0002d000 	andeq	sp, r2, r0
    18cc:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    18d8:	000001ac 	andeq	r0, r0, ip, lsr #3
    18dc:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    18e0:	00740005 	rsbseq	r0, r4, r5
    18e4:	009f2531 	addseq	r2, pc, r1, lsr r5	; <UNPREDICTABLE>
    18e8:	00000000 	andeq	r0, r0, r0
    18ec:	ac000000 	stcge	0, cr0, [r0], {-0}
    18f0:	d0000001 	andle	r0, r0, r1
    18f4:	02000001 	andeq	r0, r0, #1
    18f8:	d09f3000 	addsle	r3, pc, r0
    18fc:	0c000001 	stceq	0, cr0, [r0], {1}
    1900:	01000003 	tsteq	r0, r3
    1904:	03145900 	tsteq	r4, #0, 18
    1908:	031c0000 	tsteq	ip, #0
    190c:	00010000 	andeq	r0, r1, r0
    1910:	00000059 	andeq	r0, r0, r9, asr r0
    1914:	00000000 	andeq	r0, r0, r0
    1918:	00016800 	andeq	r6, r1, r0, lsl #16
    191c:	00016b00 	andeq	r6, r1, r0, lsl #22
    1920:	51000100 	mrspl	r0, (UNDEF: 16)
    1924:	0000016b 	andeq	r0, r0, fp, ror #2
    1928:	0000031c 	andeq	r0, r0, ip, lsl r3
    192c:	00560001 	subseq	r0, r6, r1
    1930:	00000000 	andeq	r0, r0, r0
    1934:	70000000 	andvc	r0, r0, r0
    1938:	ac000001 	stcge	0, cr0, [r0], {1}
    193c:	01000001 	tsteq	r0, r1
    1940:	030c5400 	movweq	r5, #50176	; 0xc400
    1944:	03140000 	tsteq	r4, #0
    1948:	00010000 	andeq	r0, r1, r0
    194c:	00000054 	andeq	r0, r0, r4, asr r0
    1950:	00000000 	andeq	r0, r0, r0
    1954:	0001a800 	andeq	sl, r1, r0, lsl #16
    1958:	0001c400 	andeq	ip, r1, r0, lsl #8
    195c:	58000100 	stmdapl	r0, {r8}
	...
    1968:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    196c:	000001cb 	andeq	r0, r0, fp, asr #3
    1970:	cb520001 	blgt	148197c <__bss_end__+0x147625c>
    1974:	d0000001 	andle	r0, r0, r1
    1978:	08000002 	stmdaeq	r0, {r1}
    197c:	31007400 	tstcc	r0, r0, lsl #8
    1980:	22007425 	andcs	r7, r0, #620756992	; 0x25000000
    1984:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1988:	00000000 	andeq	r0, r0, r0
    198c:	0001b000 	andeq	fp, r1, r0
    1990:	0001c400 	andeq	ip, r1, r0, lsl #8
    1994:	58000100 	stmdapl	r0, {r8}
	...
    19a0:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
    19a4:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    19a8:	00530001 	subseq	r0, r3, r1
    19ac:	00000000 	andeq	r0, r0, r0
    19b0:	d0000000 	andle	r0, r0, r0
    19b4:	d0000001 	andle	r0, r0, r1
    19b8:	01000002 	tsteq	r0, r2
    19bc:	00005400 	andeq	r5, r0, r0, lsl #8
    19c0:	00000000 	andeq	r0, r0, r0
    19c4:	01d00000 	bicseq	r0, r0, r0
    19c8:	01e40000 	mvneq	r0, r0
    19cc:	00010000 	andeq	r0, r1, r0
    19d0:	00000058 	andeq	r0, r0, r8, asr r0
    19d4:	00000000 	andeq	r0, r0, r0
    19d8:	0001d400 	andeq	sp, r1, r0, lsl #8
    19dc:	0001d800 	andeq	sp, r1, r0, lsl #16
    19e0:	53000100 	movwpl	r0, #256	; 0x100
	...
    19ec:	000001f4 	strdeq	r0, [r0], -r4
    19f0:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    19f4:	00540001 	subseq	r0, r4, r1
    19f8:	00000000 	andeq	r0, r0, r0
    19fc:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    1a00:	08000001 	stmdaeq	r0, {r0}
    1a04:	01000002 	tsteq	r0, r2
    1a08:	00005800 	andeq	r5, r0, r0, lsl #16
    1a0c:	00000000 	andeq	r0, r0, r0
    1a10:	01f80000 	mvnseq	r0, r0
    1a14:	01fc0000 	mvnseq	r0, r0
    1a18:	00010000 	andeq	r0, r1, r0
    1a1c:	00000053 	andeq	r0, r0, r3, asr r0
    1a20:	00000000 	andeq	r0, r0, r0
    1a24:	00021800 	andeq	r1, r2, r0, lsl #16
    1a28:	0002d000 	andeq	sp, r2, r0
    1a2c:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    1a38:	00000218 	andeq	r0, r0, r8, lsl r2
    1a3c:	0000022c 	andeq	r0, r0, ip, lsr #4
    1a40:	00580001 	subseq	r0, r8, r1
    1a44:	00000000 	andeq	r0, r0, r0
    1a48:	1c000000 	stcne	0, cr0, [r0], {-0}
    1a4c:	20000002 	andcs	r0, r0, r2
    1a50:	01000002 	tsteq	r0, r2
    1a54:	00005300 	andeq	r5, r0, r0, lsl #6
    1a58:	00000000 	andeq	r0, r0, r0
    1a5c:	023c0000 	eorseq	r0, ip, #0
    1a60:	02d00000 	sbcseq	r0, r0, #0
    1a64:	00010000 	andeq	r0, r1, r0
    1a68:	00000054 	andeq	r0, r0, r4, asr r0
    1a6c:	00000000 	andeq	r0, r0, r0
    1a70:	00023c00 	andeq	r3, r2, r0, lsl #24
    1a74:	00025000 	andeq	r5, r2, r0
    1a78:	58000100 	stmdapl	r0, {r8}
	...
    1a84:	00000240 	andeq	r0, r0, r0, asr #4
    1a88:	00000244 	andeq	r0, r0, r4, asr #4
    1a8c:	00530001 	subseq	r0, r3, r1
    1a90:	00000000 	andeq	r0, r0, r0
    1a94:	60000000 	andvs	r0, r0, r0
    1a98:	d0000002 	andle	r0, r0, r2
    1a9c:	01000002 	tsteq	r0, r2
    1aa0:	00005400 	andeq	r5, r0, r0, lsl #8
    1aa4:	00000000 	andeq	r0, r0, r0
    1aa8:	02600000 	rsbeq	r0, r0, #0
    1aac:	02740000 	rsbseq	r0, r4, #0
    1ab0:	00010000 	andeq	r0, r1, r0
    1ab4:	00000058 	andeq	r0, r0, r8, asr r0
    1ab8:	00000000 	andeq	r0, r0, r0
    1abc:	00026400 	andeq	r6, r2, r0, lsl #8
    1ac0:	00026800 	andeq	r6, r2, r0, lsl #16
    1ac4:	53000100 	movwpl	r0, #256	; 0x100
	...
    1ad0:	00000284 	andeq	r0, r0, r4, lsl #5
    1ad4:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1ad8:	00540001 	subseq	r0, r4, r1
    1adc:	00000000 	andeq	r0, r0, r0
    1ae0:	84000000 	strhi	r0, [r0], #-0
    1ae4:	98000002 	stmdals	r0, {r1}
    1ae8:	01000002 	tsteq	r0, r2
    1aec:	00005800 	andeq	r5, r0, r0, lsl #16
    1af0:	00000000 	andeq	r0, r0, r0
    1af4:	02880000 	addeq	r0, r8, #0
    1af8:	028c0000 	addeq	r0, ip, #0
    1afc:	00010000 	andeq	r0, r1, r0
    1b00:	00000053 	andeq	r0, r0, r3, asr r0
    1b04:	00000000 	andeq	r0, r0, r0
    1b08:	0002a800 	andeq	sl, r2, r0, lsl #16
    1b0c:	0002d000 	andeq	sp, r2, r0
    1b10:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    1b1c:	000002ac 	andeq	r0, r0, ip, lsr #5
    1b20:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
    1b24:	00530001 	subseq	r0, r3, r1
    1b28:	00000000 	andeq	r0, r0, r0
    1b2c:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    1b30:	0c000002 	stceq	0, cr0, [r0], {2}
    1b34:	02000003 	andeq	r0, r0, #3
    1b38:	149f3000 	ldrne	r3, [pc], #0	; 1b40 <_start-0x64c0>
    1b3c:	1c000003 	stcne	0, cr0, [r0], {3}
    1b40:	02000003 	andeq	r0, r0, #3
    1b44:	009f3000 	addseq	r3, pc, r0
    1b48:	00000000 	andeq	r0, r0, r0
    1b4c:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    1b50:	0c000002 	stceq	0, cr0, [r0], {2}
    1b54:	01000003 	tsteq	r0, r3
    1b58:	03145500 	tsteq	r4, #0, 10
    1b5c:	031c0000 	tsteq	ip, #0
    1b60:	00010000 	andeq	r0, r1, r0
    1b64:	00000055 	andeq	r0, r0, r5, asr r0
    1b68:	00000000 	andeq	r0, r0, r0
    1b6c:	0002d000 	andeq	sp, r2, r0
    1b70:	00030c00 	andeq	r0, r3, r0, lsl #24
    1b74:	54000100 	strpl	r0, [r0], #-256	; 0x100
    1b78:	00000314 	andeq	r0, r0, r4, lsl r3
    1b7c:	0000031c 	andeq	r0, r0, ip, lsl r3
    1b80:	00540001 	subseq	r0, r4, r1
    1b84:	00000000 	andeq	r0, r0, r0
    1b88:	1c000000 	stcne	0, cr0, [r0], {-0}
    1b8c:	3b000003 	blcc	1ba0 <_start-0x6460>
    1b90:	01000003 	tsteq	r0, r3
    1b94:	033b5000 	teqeq	fp, #0
    1b98:	03540000 	cmpeq	r4, #0
    1b9c:	00010000 	andeq	r0, r1, r0
    1ba0:	00035458 	andeq	r5, r3, r8, asr r4
    1ba4:	00036400 	andeq	r6, r3, r0, lsl #8
    1ba8:	50000100 	andpl	r0, r0, r0, lsl #2
    1bac:	00000364 	andeq	r0, r0, r4, ror #6
    1bb0:	000003ac 	andeq	r0, r0, ip, lsr #7
    1bb4:	00580001 	subseq	r0, r8, r1
    1bb8:	00000000 	andeq	r0, r0, r0
    1bbc:	1c000000 	stcne	0, cr0, [r0], {-0}
    1bc0:	3b000003 	blcc	1bd4 <_start-0x642c>
    1bc4:	01000003 	tsteq	r0, r3
    1bc8:	033b5100 	teqeq	fp, #0, 2
    1bcc:	03540000 	cmpeq	r4, #0
    1bd0:	00010000 	andeq	r0, r1, r0
    1bd4:	00035456 	andeq	r5, r3, r6, asr r4
    1bd8:	00036400 	andeq	r6, r3, r0, lsl #8
    1bdc:	51000100 	mrspl	r0, (UNDEF: 16)
    1be0:	00000364 	andeq	r0, r0, r4, ror #6
    1be4:	000003ac 	andeq	r0, r0, ip, lsr #7
    1be8:	00560001 	subseq	r0, r6, r1
    1bec:	00000000 	andeq	r0, r0, r0
    1bf0:	1c000000 	stcne	0, cr0, [r0], {-0}
    1bf4:	3b000003 	blcc	1c08 <_start-0x63f8>
    1bf8:	01000003 	tsteq	r0, r3
    1bfc:	033b5200 	teqeq	fp, #0, 4
    1c00:	03540000 	cmpeq	r4, #0
    1c04:	00040000 	andeq	r0, r4, r0
    1c08:	9f5201f3 	svcls	0x005201f3
    1c0c:	00000354 	andeq	r0, r0, r4, asr r3
    1c10:	00000364 	andeq	r0, r0, r4, ror #6
    1c14:	64520001 	ldrbvs	r0, [r2], #-1
    1c18:	ac000003 	stcge	0, cr0, [r0], {3}
    1c1c:	03000003 	movweq	r0, #3
    1c20:	9f017700 	svcls	0x00017700
	...
    1c2c:	0000031c 	andeq	r0, r0, ip, lsl r3
    1c30:	0000033b 	andeq	r0, r0, fp, lsr r3
    1c34:	3b530001 	blcc	14c1c40 <__bss_end__+0x14b6520>
    1c38:	54000003 	strpl	r0, [r0], #-3
    1c3c:	04000003 	streq	r0, [r0], #-3
    1c40:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    1c44:	0003549f 	muleq	r3, pc, r4	; <UNPREDICTABLE>
    1c48:	00036400 	andeq	r6, r3, r0, lsl #8
    1c4c:	53000100 	movwpl	r0, #256	; 0x100
    1c50:	00000364 	andeq	r0, r0, r4, ror #6
    1c54:	000003ac 	andeq	r0, r0, ip, lsr #7
    1c58:	01f30004 	mvnseq	r0, r4
    1c5c:	00009f53 	andeq	r9, r0, r3, asr pc
    1c60:	00000000 	andeq	r0, r0, r0
    1c64:	035c0000 	cmpeq	ip, #0
    1c68:	03640000 	cmneq	r4, #0
    1c6c:	00020000 	andeq	r0, r2, r0
    1c70:	03649f30 	cmneq	r4, #48, 30	; 0xc0
    1c74:	03ac0000 			; <UNDEFINED> instruction: 0x03ac0000
    1c78:	00010000 	andeq	r0, r1, r0
    1c7c:	00000054 	andeq	r0, r0, r4, asr r0
    1c80:	00000000 	andeq	r0, r0, r0
    1c84:	00037400 	andeq	r7, r3, r0, lsl #8
    1c88:	00038400 	andeq	r8, r3, r0, lsl #8
    1c8c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1c98:	000003ac 	andeq	r0, r0, ip, lsr #7
    1c9c:	000003c7 	andeq	r0, r0, r7, asr #7
    1ca0:	c7500001 	ldrbgt	r0, [r0, -r1]
    1ca4:	e0000003 	and	r0, r0, r3
    1ca8:	01000003 	tsteq	r0, r3
    1cac:	03e05700 	mvneq	r5, #0, 14
    1cb0:	03f00000 	mvnseq	r0, #0
    1cb4:	00010000 	andeq	r0, r1, r0
    1cb8:	0003f050 	andeq	pc, r3, r0, asr r0	; <UNPREDICTABLE>
    1cbc:	00042800 	andeq	r2, r4, r0, lsl #16
    1cc0:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    1ccc:	000003ac 	andeq	r0, r0, ip, lsr #7
    1cd0:	000003c7 	andeq	r0, r0, r7, asr #7
    1cd4:	c7510001 	ldrbgt	r0, [r1, -r1]
    1cd8:	e0000003 	and	r0, r0, r3
    1cdc:	01000003 	tsteq	r0, r3
    1ce0:	03e05500 	mvneq	r5, #0, 10
    1ce4:	03f00000 	mvnseq	r0, #0
    1ce8:	00010000 	andeq	r0, r1, r0
    1cec:	0003f051 	andeq	pc, r3, r1, asr r0	; <UNPREDICTABLE>
    1cf0:	00042800 	andeq	r2, r4, r0, lsl #16
    1cf4:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    1d00:	000003ac 	andeq	r0, r0, ip, lsr #7
    1d04:	000003c7 	andeq	r0, r0, r7, asr #7
    1d08:	c7520001 	ldrbgt	r0, [r2, -r1]
    1d0c:	e0000003 	and	r0, r0, r3
    1d10:	04000003 	streq	r0, [r0], #-3
    1d14:	5201f300 	andpl	pc, r1, #0, 6
    1d18:	0003e09f 	muleq	r3, pc, r0	; <UNPREDICTABLE>
    1d1c:	0003f000 	andeq	pc, r3, r0
    1d20:	52000100 	andpl	r0, r0, #0, 2
    1d24:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1d28:	00000428 	andeq	r0, r0, r8, lsr #8
    1d2c:	01760003 	cmneq	r6, r3
    1d30:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1d34:	00000000 	andeq	r0, r0, r0
    1d38:	0003ac00 	andeq	sl, r3, r0, lsl #24
    1d3c:	0003c700 	andeq	ip, r3, r0, lsl #14
    1d40:	53000100 	movwpl	r0, #256	; 0x100
    1d44:	000003c7 	andeq	r0, r0, r7, asr #7
    1d48:	000003e0 	andeq	r0, r0, r0, ror #7
    1d4c:	e0580001 	subs	r0, r8, r1
    1d50:	f0000003 			; <UNDEFINED> instruction: 0xf0000003
    1d54:	01000003 	tsteq	r0, r3
    1d58:	03f05300 	mvnseq	r5, #0, 6
    1d5c:	04280000 	strteq	r0, [r8], #-0
    1d60:	00010000 	andeq	r0, r1, r0
    1d64:	00000058 	andeq	r0, r0, r8, asr r0
    1d68:	00000000 	andeq	r0, r0, r0
    1d6c:	0003e800 	andeq	lr, r3, r0, lsl #16
    1d70:	0003f000 	andeq	pc, r3, r0
    1d74:	30000200 	andcc	r0, r0, r0, lsl #4
    1d78:	0003f09f 	muleq	r3, pc, r0	; <UNPREDICTABLE>
    1d7c:	00042800 	andeq	r2, r4, r0, lsl #16
    1d80:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    1d8c:	00000428 	andeq	r0, r0, r8, lsr #8
    1d90:	00000447 	andeq	r0, r0, r7, asr #8
    1d94:	47510001 	ldrbmi	r0, [r1, -r1]
    1d98:	e8000004 	stmda	r0, {r2}
    1d9c:	04000004 	streq	r0, [r0], #-4
    1da0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1da4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1da8:	00000000 	andeq	r0, r0, r0
    1dac:	00042800 	andeq	r2, r4, r0, lsl #16
    1db0:	00044700 	andeq	r4, r4, r0, lsl #14
    1db4:	52000100 	andpl	r0, r0, #0, 2
    1db8:	00000447 	andeq	r0, r0, r7, asr #8
    1dbc:	000004e8 	andeq	r0, r0, r8, ror #9
    1dc0:	01f30004 	mvnseq	r0, r4
    1dc4:	00009f52 	andeq	r9, r0, r2, asr pc
    1dc8:	00000000 	andeq	r0, r0, r0
    1dcc:	04280000 	strteq	r0, [r8], #-0
    1dd0:	04470000 	strbeq	r0, [r7], #-0
    1dd4:	00010000 	andeq	r0, r1, r0
    1dd8:	00044753 	andeq	r4, r4, r3, asr r7
    1ddc:	0004e800 	andeq	lr, r4, r0, lsl #16
    1de0:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    1dec:	00000468 	andeq	r0, r0, r8, ror #8
    1df0:	000004a7 	andeq	r0, r0, r7, lsr #9
    1df4:	a7520001 	ldrbge	r0, [r2, -r1]
    1df8:	c0000004 	andgt	r0, r0, r4
    1dfc:	06000004 	streq	r0, [r0], -r4
    1e00:	77007500 	strvc	r7, [r0, -r0, lsl #10]
    1e04:	c09f1e00 	addsgt	r1, pc, r0, lsl #28
    1e08:	e8000004 	stmda	r0, {r2}
    1e0c:	01000004 	tsteq	r0, r4
    1e10:	00005200 	andeq	r5, r0, r0, lsl #4
    1e14:	00000000 	andeq	r0, r0, r0
    1e18:	04e80000 	strbteq	r0, [r8], #0
    1e1c:	04f30000 	ldrbteq	r0, [r3], #0
    1e20:	00010000 	andeq	r0, r1, r0
    1e24:	0004f350 	andeq	pc, r4, r0, asr r3	; <UNPREDICTABLE>
    1e28:	00052400 	andeq	r2, r5, r0, lsl #8
    1e2c:	f3000400 	vshl.u8	d0, d0, d0
    1e30:	009f5001 	addseq	r5, pc, r1
    1e34:	00000000 	andeq	r0, r0, r0
    1e38:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    1e3c:	ff000004 			; <UNDEFINED> instruction: 0xff000004
    1e40:	01000004 	tsteq	r0, r4
    1e44:	00005000 	andeq	r5, r0, r0
    1e48:	00000000 	andeq	r0, r0, r0
    1e4c:	05240000 	streq	r0, [r4, #-0]!
    1e50:	05340000 	ldreq	r0, [r4, #-0]!
    1e54:	00010000 	andeq	r0, r1, r0
    1e58:	00053450 	andeq	r3, r5, r0, asr r4
    1e5c:	00055000 	andeq	r5, r5, r0
    1e60:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    1e6c:	00000524 	andeq	r0, r0, r4, lsr #10
    1e70:	00000534 	andeq	r0, r0, r4, lsr r5
    1e74:	34510001 	ldrbcc	r0, [r1], #-1
    1e78:	50000005 	andpl	r0, r0, r5
    1e7c:	01000005 	tsteq	r0, r5
    1e80:	00005400 	andeq	r5, r0, r0, lsl #8
    1e84:	00000000 	andeq	r0, r0, r0
    1e88:	05500000 	ldrbeq	r0, [r0, #-0]
    1e8c:	056c0000 	strbeq	r0, [ip, #-0]!
    1e90:	00010000 	andeq	r0, r1, r0
    1e94:	00056c50 	andeq	r6, r5, r0, asr ip
    1e98:	0005bc00 	andeq	fp, r5, r0, lsl #24
    1e9c:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    1ea0:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
    1ea4:	000005d4 	ldrdeq	r0, [r0], -r4
    1ea8:	01f30004 	mvnseq	r0, r4
    1eac:	00009f50 	andeq	r9, r0, r0, asr pc
    1eb0:	00000000 	andeq	r0, r0, r0
    1eb4:	057c0000 	ldrbeq	r0, [ip, #-0]!
    1eb8:	058b0000 	streq	r0, [fp]
    1ebc:	00010000 	andeq	r0, r1, r0
    1ec0:	00058b50 	andeq	r8, r5, r0, asr fp
    1ec4:	0005a400 	andeq	sl, r5, r0, lsl #8
    1ec8:	54000100 	strpl	r0, [r0], #-256	; 0x100
    1ecc:	000005a4 	andeq	r0, r0, r4, lsr #11
    1ed0:	000005a8 	andeq	r0, r0, r8, lsr #11
    1ed4:	a8500001 	ldmdage	r0, {r0}^
    1ed8:	bc000005 	stclt	0, cr0, [r0], {5}
    1edc:	01000005 	tsteq	r0, r5
    1ee0:	05bc5400 	ldreq	r5, [ip, #1024]!	; 0x400
    1ee4:	05d40000 	ldrbeq	r0, [r4]
    1ee8:	00010000 	andeq	r0, r1, r0
    1eec:	00000050 	andeq	r0, r0, r0, asr r0
    1ef0:	00000000 	andeq	r0, r0, r0
    1ef4:	0005d400 	andeq	sp, r5, r0, lsl #8
    1ef8:	0005e700 	andeq	lr, r5, r0, lsl #14
    1efc:	50000100 	andpl	r0, r0, r0, lsl #2
    1f00:	000005e7 	andeq	r0, r0, r7, ror #11
    1f04:	00000620 	andeq	r0, r0, r0, lsr #12
    1f08:	01f30004 	mvnseq	r0, r4
    1f0c:	00009f50 	andeq	r9, r0, r0, asr pc
    1f10:	00000000 	andeq	r0, r0, r0
    1f14:	05d40000 	ldrbeq	r0, [r4]
    1f18:	05e70000 	strbeq	r0, [r7, #0]!
    1f1c:	00010000 	andeq	r0, r1, r0
    1f20:	0005e751 	andeq	lr, r5, r1, asr r7
    1f24:	00062000 	andeq	r2, r6, r0
    1f28:	f3000400 	vshl.u8	d0, d0, d0
    1f2c:	009f5101 	addseq	r5, pc, r1, lsl #2
    1f30:	00000000 	andeq	r0, r0, r0
    1f34:	d4000000 	strle	r0, [r0], #-0
    1f38:	e7000005 	str	r0, [r0, -r5]
    1f3c:	01000005 	tsteq	r0, r5
    1f40:	05e75200 	strbeq	r5, [r7, #512]!	; 0x200
    1f44:	06200000 	strteq	r0, [r0], -r0
    1f48:	00040000 	andeq	r0, r4, r0
    1f4c:	9f5201f3 	svcls	0x005201f3
	...
    1f58:	000005d4 	ldrdeq	r0, [r0], -r4
    1f5c:	000005e7 	andeq	r0, r0, r7, ror #11
    1f60:	e7530001 	ldrb	r0, [r3, -r1]
    1f64:	20000005 	andcs	r0, r0, r5
    1f68:	04000006 	streq	r0, [r0], #-6
    1f6c:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    1f70:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1f74:	00000000 	andeq	r0, r0, r0
    1f78:	0005e800 	andeq	lr, r5, r0, lsl #16
    1f7c:	0005f300 	andeq	pc, r5, r0, lsl #6
    1f80:	50000100 	andpl	r0, r0, r0, lsl #2
    1f84:	0000060c 	andeq	r0, r0, ip, lsl #12
    1f88:	00000620 	andeq	r0, r0, r0, lsr #12
    1f8c:	00500001 	subseq	r0, r0, r1
    1f90:	00000000 	andeq	r0, r0, r0
    1f94:	fc000000 	stc2	0, cr0, [r0], {-0}
    1f98:	04000000 	streq	r0, [r0], #-0
    1f9c:	01000001 	tsteq	r0, r1
    1fa0:	01045000 	mrseq	r5, (UNDEF: 4)
    1fa4:	01280000 	teqeq	r8, r0
    1fa8:	00010000 	andeq	r0, r1, r0
    1fac:	00000054 	andeq	r0, r0, r4, asr r0
    1fb0:	00000000 	andeq	r0, r0, r0
    1fb4:	00003000 	andeq	r3, r0, r0
    1fb8:	00003c00 	andeq	r3, r0, r0, lsl #24
    1fbc:	30000200 	andcc	r0, r0, r0, lsl #4
    1fc0:	00003c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    1fc4:	00006800 	andeq	r6, r0, r0, lsl #16
    1fc8:	53000100 	movwpl	r0, #256	; 0x100
	...
    1fd4:	00000068 	andeq	r0, r0, r8, rrx
    1fd8:	00000077 	andeq	r0, r0, r7, ror r0
    1fdc:	77500001 	ldrbvc	r0, [r0, -r1]
    1fe0:	ac000000 	stcge	0, cr0, [r0], {-0}
    1fe4:	01000000 	mrseq	r0, (UNDEF: 0)
    1fe8:	00005400 	andeq	r5, r0, r0, lsl #8
    1fec:	00000000 	andeq	r0, r0, r0
    1ff0:	00ac0000 	adceq	r0, ip, r0
    1ff4:	00bb0000 	adcseq	r0, fp, r0
    1ff8:	00010000 	andeq	r0, r1, r0
    1ffc:	0000bb50 	andeq	fp, r0, r0, asr fp
    2000:	0000f000 	andeq	pc, r0, r0
    2004:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    2010:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2014:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2018:	ff500001 			; <UNDEFINED> instruction: 0xff500001
    201c:	34000000 	strcc	r0, [r0], #-0
    2020:	01000001 	tsteq	r0, r1
    2024:	00005400 	andeq	r5, r0, r0, lsl #8
    2028:	00000000 	andeq	r0, r0, r0
    202c:	01340000 	teqeq	r4, r0
    2030:	01430000 	mrseq	r0, (UNDEF: 67)
    2034:	00010000 	andeq	r0, r1, r0
    2038:	00014350 	andeq	r4, r1, r0, asr r3
    203c:	00017800 	andeq	r7, r1, r0, lsl #16
    2040:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    204c:	00000178 	andeq	r0, r0, r8, ror r1
    2050:	00000187 	andeq	r0, r0, r7, lsl #3
    2054:	87500001 	ldrbhi	r0, [r0, -r1]
    2058:	bc000001 	stclt	0, cr0, [r0], {1}
    205c:	01000001 	tsteq	r0, r1
    2060:	00005400 	andeq	r5, r0, r0, lsl #8
    2064:	00000000 	andeq	r0, r0, r0
    2068:	01bc0000 			; <UNDEFINED> instruction: 0x01bc0000
    206c:	01cb0000 	biceq	r0, fp, r0
    2070:	00010000 	andeq	r0, r1, r0
    2074:	0001cb50 	andeq	ip, r1, r0, asr fp
    2078:	00020000 	andeq	r0, r2, r0
    207c:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    2088:	0000001c 	andeq	r0, r0, ip, lsl r0
    208c:	00000027 	andeq	r0, r0, r7, lsr #32
    2090:	27500001 	ldrbcs	r0, [r0, -r1]
    2094:	5c000000 	stcpl	0, cr0, [r0], {-0}
    2098:	01000000 	mrseq	r0, (UNDEF: 0)
    209c:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    20a8:	00900000 	addseq	r0, r0, r0
    20ac:	00010000 	andeq	r0, r1, r0
    20b0:	00009050 	andeq	r9, r0, r0, asr r0
    20b4:	0000d400 	andeq	sp, r0, r0, lsl #8
    20b8:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    20c4:	00000048 	andeq	r0, r0, r8, asr #32
    20c8:	0000004c 	andeq	r0, r0, ip, asr #32
    20cc:	54550001 	ldrbpl	r0, [r5], #-1
    20d0:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    20d4:	01000000 	mrseq	r0, (UNDEF: 0)
    20d8:	00605500 	rsbeq	r5, r0, r0, lsl #10
    20dc:	00640000 	rsbeq	r0, r4, r0
    20e0:	00010000 	andeq	r0, r1, r0
    20e4:	00006c55 	andeq	r6, r0, r5, asr ip
    20e8:	00007000 	andeq	r7, r0, r0
    20ec:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    20f0:	00000078 	andeq	r0, r0, r8, ror r0
    20f4:	0000007c 	andeq	r0, r0, ip, ror r0
    20f8:	84550001 	ldrbhi	r0, [r5], #-1
    20fc:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    2100:	01000000 	mrseq	r0, (UNDEF: 0)
    2104:	008c5500 	addeq	r5, ip, r0, lsl #10
    2108:	00d40000 	sbcseq	r0, r4, r0
    210c:	00010000 	andeq	r0, r1, r0
    2110:	00000055 	andeq	r0, r0, r5, asr r0
    2114:	00000000 	andeq	r0, r0, r0
    2118:	00001c00 	andeq	r1, r0, r0, lsl #24
    211c:	00004400 	andeq	r4, r0, r0, lsl #8
    2120:	53000100 	movwpl	r0, #256	; 0x100
    2124:	00000044 	andeq	r0, r0, r4, asr #32
    2128:	0000004c 	andeq	r0, r0, ip, asr #32
    212c:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    2130:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    2134:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    2138:	00cccccc 	sbceq	ip, ip, ip, asr #25
    213c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2140:	25f72008 	ldrbcs	r2, [r7, #8]!
    2144:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    2148:	004c9f25 	subeq	r9, ip, r5, lsr #30
    214c:	00500000 	subseq	r0, r0, r0
    2150:	00010000 	andeq	r0, r1, r0
    2154:	00005053 	andeq	r5, r0, r3, asr r0
    2158:	00005800 	andeq	r5, r0, r0, lsl #16
    215c:	70001c00 	andvc	r1, r0, r0, lsl #24
    2160:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    2164:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    2168:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    216c:	00000000 	andeq	r0, r0, r0
    2170:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    2174:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    2178:	589f2533 	ldmpl	pc, {r0, r1, r4, r5, r8, sl, sp}	; <UNPREDICTABLE>
    217c:	5c000000 	stcpl	0, cr0, [r0], {-0}
    2180:	01000000 	mrseq	r0, (UNDEF: 0)
    2184:	005c5300 	subseq	r5, ip, r0, lsl #6
    2188:	00640000 	rsbeq	r0, r4, r0
    218c:	001c0000 	andseq	r0, ip, r0
    2190:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    2194:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    2198:	cccccd08 	stclgt	13, cr12, [ip], {8}
    219c:	000000cc 	andeq	r0, r0, ip, asr #1
    21a0:	20081e00 	andcs	r1, r8, r0, lsl #28
    21a4:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    21a8:	9f25332c 	svcls	0x0025332c
    21ac:	00000064 	andeq	r0, r0, r4, rrx
    21b0:	00000068 	andeq	r0, r0, r8, rrx
    21b4:	68530001 	ldmdavs	r3, {r0}^
    21b8:	70000000 	andvc	r0, r0, r0
    21bc:	1c000000 	stcne	0, cr0, [r0], {-0}
    21c0:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    21c4:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    21c8:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    21cc:	0000cccc 	andeq	ip, r0, ip, asr #25
    21d0:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    21d4:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    21d8:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    21dc:	0000709f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    21e0:	00007400 	andeq	r7, r0, r0, lsl #8
    21e4:	53000100 	movwpl	r0, #256	; 0x100
    21e8:	00000074 	andeq	r0, r0, r4, ror r0
    21ec:	0000007c 	andeq	r0, r0, ip, ror r0
    21f0:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    21f4:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    21f8:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    21fc:	00cccccc 	sbceq	ip, ip, ip, asr #25
    2200:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2204:	25f72008 	ldrbcs	r2, [r7, #8]!
    2208:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    220c:	007c9f25 	rsbseq	r9, ip, r5, lsr #30
    2210:	00800000 	addeq	r0, r0, r0
    2214:	00010000 	andeq	r0, r1, r0
    2218:	00008053 	andeq	r8, r0, r3, asr r0
    221c:	00008800 	andeq	r8, r0, r0, lsl #16
    2220:	70001c00 	andvc	r1, r0, r0, lsl #24
    2224:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    2228:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    222c:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    2230:	00000000 	andeq	r0, r0, r0
    2234:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    2238:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    223c:	889f2533 	ldmhi	pc, {r0, r1, r4, r5, r8, sl, sp}	; <UNPREDICTABLE>
    2240:	8c000000 	stchi	0, cr0, [r0], {-0}
    2244:	01000000 	mrseq	r0, (UNDEF: 0)
    2248:	008c5300 	addeq	r5, ip, r0, lsl #6
    224c:	00900000 	addseq	r0, r0, r0
    2250:	001c0000 	andseq	r0, ip, r0
    2254:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    2258:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    225c:	cccccd08 	stclgt	13, cr12, [ip], {8}
    2260:	000000cc 	andeq	r0, r0, ip, asr #1
    2264:	20081e00 	andcs	r1, r8, r0, lsl #28
    2268:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    226c:	9f25332c 	svcls	0x0025332c
    2270:	00000090 	muleq	r0, r0, r0
    2274:	00000098 	muleq	r0, r8, r0
    2278:	0074001c 	rsbseq	r0, r4, ip, lsl r0
    227c:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    2280:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    2284:	00cccccc 	sbceq	ip, ip, ip, asr #25
    2288:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    228c:	25f72008 	ldrbcs	r2, [r7, #8]!
    2290:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    2294:	00989f25 	addseq	r9, r8, r5, lsr #30
    2298:	009c0000 	addseq	r0, ip, r0
    229c:	00170000 	andseq	r0, r7, r0
    22a0:	2cf70074 	ldclcs	0, cr0, [r7], #464	; 0x1d0
    22a4:	007125f7 	ldrshteq	r2, [r1], #-87	; 0xffffffa9
    22a8:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    22ac:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    22b0:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    22b4:	9c9f2533 	cfldr32ls	mvfx2, [pc], {51}	; 0x33
    22b8:	d4000000 	strle	r0, [r0], #-0
    22bc:	1c000000 	stcne	0, cr0, [r0], {-0}
    22c0:	f7007400 			; <UNDEFINED> instruction: 0xf7007400
    22c4:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    22c8:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    22cc:	0000cccc 	andeq	ip, r0, ip, asr #25
    22d0:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    22d4:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    22d8:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    22dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    22e0:	00000000 	andeq	r0, r0, r0
    22e4:	00009400 	andeq	r9, r0, r0, lsl #8
    22e8:	0000b800 	andeq	fp, r0, r0, lsl #16
    22ec:	50000100 	andpl	r0, r0, r0, lsl #2
    22f0:	000000b8 	strheq	r0, [r0], -r8
    22f4:	000000c4 	andeq	r0, r0, r4, asr #1
    22f8:	71310008 	teqvc	r1, r8
    22fc:	00732400 	rsbseq	r2, r3, r0, lsl #8
    2300:	00c49f21 	sbceq	r9, r4, r1, lsr #30
    2304:	00c70000 	sbceq	r0, r7, r0
    2308:	00010000 	andeq	r0, r1, r0
    230c:	00000051 	andeq	r0, r0, r1, asr r0
    2310:	00000000 	andeq	r0, r0, r0
    2314:	0000d400 	andeq	sp, r0, r0, lsl #8
    2318:	0000f800 	andeq	pc, r0, r0, lsl #16
    231c:	50000100 	andpl	r0, r0, r0, lsl #2
    2320:	000000f8 	strdeq	r0, [r0], -r8
    2324:	0000010c 	andeq	r0, r0, ip, lsl #2
    2328:	01f30004 	mvnseq	r0, r4
    232c:	00009f50 	andeq	r9, r0, r0, asr pc
    2330:	00000000 	andeq	r0, r0, r0
    2334:	00e00000 	rsceq	r0, r0, r0
    2338:	00e80000 	rsceq	r0, r8, r0
    233c:	00020000 	andeq	r0, r2, r0
    2340:	00e89f30 	rsceq	r9, r8, r0, lsr pc
    2344:	00e80000 	rsceq	r0, r8, r0
    2348:	00010000 	andeq	r0, r1, r0
    234c:	0000e852 	andeq	lr, r0, r2, asr r8
    2350:	0000f000 	andeq	pc, r0, r0
    2354:	30000200 	andcc	r0, r0, r0, lsl #4
    2358:	0000f09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    235c:	00010300 	andeq	r0, r1, r0, lsl #6
    2360:	52000100 	andpl	r0, r0, #0, 2
	...
    236c:	000000e0 	andeq	r0, r0, r0, ror #1
    2370:	000000f4 	strdeq	r0, [r0], -r4
    2374:	9f300002 	svcls	0x00300002
    2378:	000000f4 	strdeq	r0, [r0], -r4
    237c:	00000100 	andeq	r0, r0, r0, lsl #2
    2380:	73310005 	teqvc	r1, #5
    2384:	009f2400 	addseq	r2, pc, r0, lsl #8
    2388:	03000001 	movweq	r0, #1
    238c:	01000001 	tsteq	r0, r1
    2390:	01035100 	mrseq	r5, (UNDEF: 19)
    2394:	010c0000 	mrseq	r0, (UNDEF: 12)
    2398:	00080000 	andeq	r0, r8, r0
    239c:	5001f331 	andpl	pc, r1, r1, lsr r3	; <UNPREDICTABLE>
    23a0:	9f241a4f 	svcls	0x00241a4f
	...
    23ac:	0000010c 	andeq	r0, r0, ip, lsl #2
    23b0:	00000130 	andeq	r0, r0, r0, lsr r1
    23b4:	30500001 	subscc	r0, r0, r1
    23b8:	44000001 	strmi	r0, [r0], #-1
    23bc:	04000001 	streq	r0, [r0], #-1
    23c0:	5001f300 	andpl	pc, r1, r0, lsl #6
    23c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    23c8:	00000000 	andeq	r0, r0, r0
    23cc:	00011800 	andeq	r1, r1, r0, lsl #16
    23d0:	00012000 	andeq	r2, r1, r0
    23d4:	30000200 	andcc	r0, r0, r0, lsl #4
    23d8:	0001209f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
    23dc:	00012000 	andeq	r2, r1, r0
    23e0:	52000100 	andpl	r0, r0, #0, 2
    23e4:	00000120 	andeq	r0, r0, r0, lsr #2
    23e8:	00000128 	andeq	r0, r0, r8, lsr #2
    23ec:	9f300002 	svcls	0x00300002
    23f0:	00000128 	andeq	r0, r0, r8, lsr #2
    23f4:	0000013b 	andeq	r0, r0, fp, lsr r1
    23f8:	00520001 	subseq	r0, r2, r1
    23fc:	00000000 	andeq	r0, r0, r0
    2400:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    2404:	2c000001 	stccs	0, cr0, [r0], {1}
    2408:	02000001 	andeq	r0, r0, #1
    240c:	2c9f3000 	ldccs	0, cr3, [pc], {0}
    2410:	38000001 	stmdacc	r0, {r0}
    2414:	05000001 	streq	r0, [r0, #-1]
    2418:	00733100 	rsbseq	r3, r3, r0, lsl #2
    241c:	01389f24 	teqeq	r8, r4, lsr #30
    2420:	013b0000 	teqeq	fp, r0
    2424:	00010000 	andeq	r0, r1, r0
    2428:	00013b51 	andeq	r3, r1, r1, asr fp
    242c:	00014400 	andeq	r4, r1, r0, lsl #8
    2430:	31000800 	tstcc	r0, r0, lsl #16
    2434:	4f5001f3 	svcmi	0x005001f3
    2438:	009f241a 	addseq	r2, pc, sl, lsl r4	; <UNPREDICTABLE>
    243c:	00000000 	andeq	r0, r0, r0
    2440:	44000000 	strmi	r0, [r0], #-0
    2444:	d4000001 	strle	r0, [r0], #-1
    2448:	01000001 	tsteq	r0, r1
    244c:	01d45000 	bicseq	r5, r4, r0
    2450:	02100000 	andseq	r0, r0, #0
    2454:	00010000 	andeq	r0, r1, r0
    2458:	00000054 	andeq	r0, r0, r4, asr r0
    245c:	00000000 	andeq	r0, r0, r0
    2460:	00018c00 	andeq	r8, r1, r0, lsl #24
    2464:	00019000 	andeq	r9, r1, r0
    2468:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    246c:	00000198 	muleq	r0, r8, r1
    2470:	0000019c 	muleq	r0, ip, r1
    2474:	a4550001 	ldrbge	r0, [r5], #-1
    2478:	a8000001 	stmdage	r0, {r0}
    247c:	01000001 	tsteq	r0, r1
    2480:	01b05500 	lslseq	r5, r0, #10
    2484:	01b40000 			; <UNDEFINED> instruction: 0x01b40000
    2488:	00010000 	andeq	r0, r1, r0
    248c:	0001bc55 	andeq	fp, r1, r5, asr ip
    2490:	0001c000 	andeq	ip, r1, r0
    2494:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    2498:	000001c8 	andeq	r0, r0, r8, asr #3
    249c:	000001cc 	andeq	r0, r0, ip, asr #3
    24a0:	d0550001 	subsle	r0, r5, r1
    24a4:	10000001 	andne	r0, r0, r1
    24a8:	01000002 	tsteq	r0, r2
    24ac:	00005500 	andeq	r5, r0, r0, lsl #10
    24b0:	00000000 	andeq	r0, r0, r0
    24b4:	01600000 	cmneq	r0, r0
    24b8:	01880000 	orreq	r0, r8, r0
    24bc:	00010000 	andeq	r0, r1, r0
    24c0:	00018853 	andeq	r8, r1, r3, asr r8
    24c4:	00019000 	andeq	r9, r1, r0
    24c8:	70001c00 	andvc	r1, r0, r0, lsl #24
    24cc:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    24d0:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    24d4:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    24d8:	00000000 	andeq	r0, r0, r0
    24dc:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    24e0:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    24e4:	909f2533 	addsls	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
    24e8:	94000001 	strls	r0, [r0], #-1
    24ec:	01000001 	tsteq	r0, r1
    24f0:	01945300 	orrseq	r5, r4, r0, lsl #6
    24f4:	019c0000 	orrseq	r0, ip, r0
    24f8:	001c0000 	andseq	r0, ip, r0
    24fc:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    2500:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    2504:	cccccd08 	stclgt	13, cr12, [ip], {8}
    2508:	000000cc 	andeq	r0, r0, ip, asr #1
    250c:	20081e00 	andcs	r1, r8, r0, lsl #28
    2510:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    2514:	9f25332c 	svcls	0x0025332c
    2518:	0000019c 	muleq	r0, ip, r1
    251c:	000001a0 	andeq	r0, r0, r0, lsr #3
    2520:	a0530001 	subsge	r0, r3, r1
    2524:	a8000001 	stmdage	r0, {r0}
    2528:	1c000001 	stcne	0, cr0, [r0], {1}
    252c:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    2530:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    2534:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    2538:	0000cccc 	andeq	ip, r0, ip, asr #25
    253c:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    2540:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    2544:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    2548:	0001a89f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
    254c:	0001ac00 	andeq	sl, r1, r0, lsl #24
    2550:	53000100 	movwpl	r0, #256	; 0x100
    2554:	000001ac 	andeq	r0, r0, ip, lsr #3
    2558:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
    255c:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    2560:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    2564:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    2568:	00cccccc 	sbceq	ip, ip, ip, asr #25
    256c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2570:	25f72008 	ldrbcs	r2, [r7, #8]!
    2574:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    2578:	01b49f25 			; <UNDEFINED> instruction: 0x01b49f25
    257c:	01b80000 			; <UNDEFINED> instruction: 0x01b80000
    2580:	00010000 	andeq	r0, r1, r0
    2584:	0001b853 	andeq	fp, r1, r3, asr r8
    2588:	0001c000 	andeq	ip, r1, r0
    258c:	70001c00 	andvc	r1, r0, r0, lsl #24
    2590:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    2594:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    2598:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    259c:	00000000 	andeq	r0, r0, r0
    25a0:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    25a4:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    25a8:	c09f2533 	addsgt	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
    25ac:	c4000001 	strgt	r0, [r0], #-1
    25b0:	01000001 	tsteq	r0, r1
    25b4:	01c45300 	biceq	r5, r4, r0, lsl #6
    25b8:	01cc0000 	biceq	r0, ip, r0
    25bc:	001c0000 	andseq	r0, ip, r0
    25c0:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    25c4:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    25c8:	cccccd08 	stclgt	13, cr12, [ip], {8}
    25cc:	000000cc 	andeq	r0, r0, ip, asr #1
    25d0:	20081e00 	andcs	r1, r8, r0, lsl #28
    25d4:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    25d8:	9f25332c 	svcls	0x0025332c
    25dc:	000001cc 	andeq	r0, r0, ip, asr #3
    25e0:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    25e4:	d0530001 	subsle	r0, r3, r1
    25e8:	d4000001 	strle	r0, [r0], #-1
    25ec:	1c000001 	stcne	0, cr0, [r0], {1}
    25f0:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    25f4:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    25f8:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    25fc:	0000cccc 	andeq	ip, r0, ip, asr #25
    2600:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    2604:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    2608:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    260c:	0001d49f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
    2610:	0001dc00 	andeq	sp, r1, r0, lsl #24
    2614:	74001c00 	strvc	r1, [r0], #-3072	; 0xc00
    2618:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    261c:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    2620:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    2624:	00000000 	andeq	r0, r0, r0
    2628:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    262c:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    2630:	dc9f2533 	cfldr32le	mvfx2, [pc], {51}	; 0x33
    2634:	e0000001 	and	r0, r0, r1
    2638:	17000001 	strne	r0, [r0, -r1]
    263c:	f7007400 			; <UNDEFINED> instruction: 0xf7007400
    2640:	7125f72c 	msrvc	SP_abt, ip
    2644:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    2648:	20081e25 	andcs	r1, r8, r5, lsr #28
    264c:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    2650:	9f25332c 	svcls	0x0025332c
    2654:	000001e0 	andeq	r0, r0, r0, ror #3
    2658:	00000210 	andeq	r0, r0, r0, lsl r2
    265c:	0074001c 	rsbseq	r0, r4, ip, lsl r0
    2660:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    2664:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    2668:	00cccccc 	sbceq	ip, ip, ip, asr #25
    266c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2670:	25f72008 	ldrbcs	r2, [r7, #8]!
    2674:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    2678:	00009f25 	andeq	r9, r0, r5, lsr #30
    267c:	00000000 	andeq	r0, r0, r0
    2680:	01d80000 	bicseq	r0, r8, r0
    2684:	01fc0000 	mvnseq	r0, r0
    2688:	00010000 	andeq	r0, r1, r0
    268c:	0001fc50 	andeq	pc, r1, r0, asr ip	; <UNPREDICTABLE>
    2690:	00020300 	andeq	r0, r2, r0, lsl #6
    2694:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    26a0:	00000210 	andeq	r0, r0, r0, lsl r2
    26a4:	0000022c 	andeq	r0, r0, ip, lsr #4
    26a8:	2c500001 	mrrccs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    26ac:	34000002 	strcc	r0, [r0], #-2
    26b0:	01000002 	tsteq	r0, r2
    26b4:	02345400 	eorseq	r5, r4, #0, 8
    26b8:	023c0000 	eorseq	r0, ip, #0
    26bc:	00010000 	andeq	r0, r1, r0
    26c0:	00023c50 	andeq	r3, r2, r0, asr ip
    26c4:	00024400 	andeq	r4, r2, r0, lsl #8
    26c8:	54000100 	strpl	r0, [r0], #-256	; 0x100
    26cc:	00000244 	andeq	r0, r0, r4, asr #4
    26d0:	00000250 	andeq	r0, r0, r0, asr r2
    26d4:	01f30004 	mvnseq	r0, r4
    26d8:	02509f50 	subseq	r9, r0, #80, 30	; 0x140
    26dc:	02540000 	subseq	r0, r4, #0
    26e0:	00010000 	andeq	r0, r1, r0
    26e4:	00025450 	andeq	r5, r2, r0, asr r4
    26e8:	00025c00 	andeq	r5, r2, r0, lsl #24
    26ec:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    26f8:	00000220 	andeq	r0, r0, r0, lsr #4
    26fc:	00000230 	andeq	r0, r0, r0, lsr r2
    2700:	9f300002 	svcls	0x00300002
    2704:	00000230 	andeq	r0, r0, r0, lsr r2
    2708:	00000234 	andeq	r0, r0, r4, lsr r2
    270c:	34500001 	ldrbcc	r0, [r0], #-1
    2710:	40000002 	andmi	r0, r0, r2
    2714:	02000002 	andeq	r0, r0, #2
    2718:	409f3000 	addsmi	r3, pc, r0
    271c:	4c000002 	stcmi	0, cr0, [r0], {2}
    2720:	01000002 	tsteq	r0, r2
    2724:	00005000 	andeq	r5, r0, r0
    2728:	00000000 	andeq	r0, r0, r0
    272c:	025c0000 	subseq	r0, ip, #0
    2730:	02730000 	rsbseq	r0, r3, #0
    2734:	00010000 	andeq	r0, r1, r0
    2738:	00027350 	andeq	r7, r2, r0, asr r3
    273c:	00027800 	andeq	r7, r2, r0, lsl #16
    2740:	f3000400 	vshl.u8	d0, d0, d0
    2744:	789f5001 	ldmvc	pc, {r0, ip, lr}	; <UNPREDICTABLE>
    2748:	7b000002 	blvc	2758 <_start-0x58a8>
    274c:	01000002 	tsteq	r0, r2
    2750:	027b5000 	rsbseq	r5, fp, #0
    2754:	02800000 	addeq	r0, r0, #0
    2758:	00040000 	andeq	r0, r4, r0
    275c:	9f5001f3 	svcls	0x005001f3
	...
    2768:	0000025c 	andeq	r0, r0, ip, asr r2
    276c:	00000273 	andeq	r0, r0, r3, ror r2
    2770:	73510001 	cmpvc	r1, #1
    2774:	78000002 	stmdavc	r0, {r1}
    2778:	04000002 	streq	r0, [r0], #-2
    277c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2780:	0002789f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
    2784:	00027b00 	andeq	r7, r2, r0, lsl #22
    2788:	51000100 	mrspl	r0, (UNDEF: 16)
    278c:	0000027b 	andeq	r0, r0, fp, ror r2
    2790:	00000280 	andeq	r0, r0, r0, lsl #5
    2794:	01f30004 	mvnseq	r0, r4
    2798:	00009f51 	andeq	r9, r0, r1, asr pc
    279c:	00000000 	andeq	r0, r0, r0
    27a0:	02800000 	addeq	r0, r0, #0
    27a4:	03180000 	tsteq	r8, #0
    27a8:	00010000 	andeq	r0, r1, r0
    27ac:	00031850 	andeq	r1, r3, r0, asr r8
    27b0:	00035800 	andeq	r5, r3, r0, lsl #16
    27b4:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    27c0:	00000280 	andeq	r0, r0, r0, lsl #5
    27c4:	0000031b 	andeq	r0, r0, fp, lsl r3
    27c8:	1b510001 	blne	14427d4 <__bss_end__+0x14370b4>
    27cc:	58000003 	stmdapl	r0, {r0, r1}
    27d0:	04000003 	streq	r0, [r0], #-3
    27d4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    27d8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    27dc:	00000000 	andeq	r0, r0, r0
    27e0:	0002d000 	andeq	sp, r2, r0
    27e4:	0002d400 	andeq	sp, r2, r0, lsl #8
    27e8:	56000100 	strpl	r0, [r0], -r0, lsl #2
    27ec:	000002dc 	ldrdeq	r0, [r0], -ip
    27f0:	000002e0 	andeq	r0, r0, r0, ror #5
    27f4:	e8560001 	ldmda	r6, {r0}^
    27f8:	ec000002 	stc	0, cr0, [r0], {2}
    27fc:	01000002 	tsteq	r0, r2
    2800:	02f45600 	rscseq	r5, r4, #0, 12
    2804:	02f80000 	rscseq	r0, r8, #0
    2808:	00010000 	andeq	r0, r1, r0
    280c:	00030056 	andeq	r0, r3, r6, asr r0
    2810:	00030400 	andeq	r0, r3, r0, lsl #8
    2814:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2818:	0000030c 	andeq	r0, r0, ip, lsl #6
    281c:	00000310 	andeq	r0, r0, r0, lsl r3
    2820:	14560001 	ldrbne	r0, [r6], #-1
    2824:	58000003 	stmdapl	r0, {r0, r1}
    2828:	01000003 	tsteq	r0, r3
    282c:	00005600 	andeq	r5, r0, r0, lsl #12
    2830:	00000000 	andeq	r0, r0, r0
    2834:	02a40000 	adceq	r0, r4, #0
    2838:	02cc0000 	sbceq	r0, ip, #0
    283c:	00010000 	andeq	r0, r1, r0
    2840:	0002cc53 	andeq	ip, r2, r3, asr ip
    2844:	0002d400 	andeq	sp, r2, r0, lsl #8
    2848:	70001c00 	andvc	r1, r0, r0, lsl #24
    284c:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    2850:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    2854:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    2858:	00000000 	andeq	r0, r0, r0
    285c:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    2860:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    2864:	d49f2533 	ldrle	r2, [pc], #1331	; 286c <_start-0x5794>
    2868:	d8000002 	stmdale	r0, {r1}
    286c:	01000002 	tsteq	r0, r2
    2870:	02d85300 	sbcseq	r5, r8, #0, 6
    2874:	02e00000 	rsceq	r0, r0, #0
    2878:	001c0000 	andseq	r0, ip, r0
    287c:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    2880:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    2884:	cccccd08 	stclgt	13, cr12, [ip], {8}
    2888:	000000cc 	andeq	r0, r0, ip, asr #1
    288c:	20081e00 	andcs	r1, r8, r0, lsl #28
    2890:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    2894:	9f25332c 	svcls	0x0025332c
    2898:	000002e0 	andeq	r0, r0, r0, ror #5
    289c:	000002e4 	andeq	r0, r0, r4, ror #5
    28a0:	e4530001 	ldrb	r0, [r3], #-1
    28a4:	ec000002 	stc	0, cr0, [r0], {2}
    28a8:	1c000002 	stcne	0, cr0, [r0], {2}
    28ac:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    28b0:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    28b4:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    28b8:	0000cccc 	andeq	ip, r0, ip, asr #25
    28bc:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    28c0:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    28c4:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    28c8:	0002ec9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
    28cc:	0002f000 	andeq	pc, r2, r0
    28d0:	53000100 	movwpl	r0, #256	; 0x100
    28d4:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    28d8:	000002f8 	strdeq	r0, [r0], -r8
    28dc:	0070001c 	rsbseq	r0, r0, ip, lsl r0
    28e0:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    28e4:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    28e8:	00cccccc 	sbceq	ip, ip, ip, asr #25
    28ec:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    28f0:	25f72008 	ldrbcs	r2, [r7, #8]!
    28f4:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    28f8:	02f89f25 	rscseq	r9, r8, #37, 30	; 0x94
    28fc:	02fc0000 	rscseq	r0, ip, #0
    2900:	00010000 	andeq	r0, r1, r0
    2904:	0002fc53 	andeq	pc, r2, r3, asr ip	; <UNPREDICTABLE>
    2908:	00030400 	andeq	r0, r3, r0, lsl #8
    290c:	70001c00 	andvc	r1, r0, r0, lsl #24
    2910:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    2914:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    2918:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    291c:	00000000 	andeq	r0, r0, r0
    2920:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    2924:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    2928:	049f2533 	ldreq	r2, [pc], #1331	; 2930 <_start-0x56d0>
    292c:	08000003 	stmdaeq	r0, {r0, r1}
    2930:	01000003 	tsteq	r0, r3
    2934:	03085300 	movweq	r5, #33536	; 0x8300
    2938:	03100000 	tsteq	r0, #0
    293c:	001c0000 	andseq	r0, ip, r0
    2940:	2cf70070 	ldclcs	0, cr0, [r7], #448	; 0x1c0
    2944:	25f425f7 	ldrbcs	r2, [r4, #1527]!	; 0x5f7
    2948:	cccccd08 	stclgt	13, cr12, [ip], {8}
    294c:	000000cc 	andeq	r0, r0, ip, asr #1
    2950:	20081e00 	andcs	r1, r8, r0, lsl #28
    2954:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    2958:	9f25332c 	svcls	0x0025332c
    295c:	00000310 	andeq	r0, r0, r0, lsl r3
    2960:	00000314 	andeq	r0, r0, r4, lsl r3
    2964:	14530001 	ldrbne	r0, [r3], #-1
    2968:	18000003 	stmdane	r0, {r0, r1}
    296c:	1c000003 	stcne	0, cr0, [r0], {3}
    2970:	f7007000 			; <UNDEFINED> instruction: 0xf7007000
    2974:	f425f72c 	vld1.8	{d15}, [r5 :128], ip
    2978:	cccd0825 	stclgt	8, cr0, [sp], {37}	; 0x25
    297c:	0000cccc 	andeq	ip, r0, ip, asr #25
    2980:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
    2984:	2525f720 	strcs	pc, [r5, #-1824]!	; 0x720
    2988:	25332cf7 	ldrcs	r2, [r3, #-3319]!	; 0xcf7
    298c:	0003189f 	muleq	r3, pc, r8	; <UNPREDICTABLE>
    2990:	00032000 	andeq	r2, r3, r0
    2994:	74001c00 	strvc	r1, [r0], #-3072	; 0xc00
    2998:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    299c:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    29a0:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
    29a4:	00000000 	andeq	r0, r0, r0
    29a8:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    29ac:	2cf72525 	cfldr64cs	mvdx2, [r7], #148	; 0x94
    29b0:	209f2533 	addscs	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
    29b4:	24000003 	strcs	r0, [r0], #-3
    29b8:	17000003 	strne	r0, [r0, -r3]
    29bc:	f7007400 			; <UNDEFINED> instruction: 0xf7007400
    29c0:	7325f72c 	msrvc	CPSR_sc, #44, 14	; 0xb00000
    29c4:	f72cf700 			; <UNDEFINED> instruction: 0xf72cf700
    29c8:	20081e25 	andcs	r1, r8, r5, lsr #28
    29cc:	f72525f7 			; <UNDEFINED> instruction: 0xf72525f7
    29d0:	9f25332c 	svcls	0x0025332c
    29d4:	00000324 	andeq	r0, r0, r4, lsr #6
    29d8:	00000358 	andeq	r0, r0, r8, asr r3
    29dc:	0074001c 	rsbseq	r0, r4, ip, lsl r0
    29e0:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    29e4:	cd0825f4 	cfstr32gt	mvfx2, [r8, #-976]	; 0xfffffc30
    29e8:	00cccccc 	sbceq	ip, ip, ip, asr #25
    29ec:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    29f0:	25f72008 	ldrbcs	r2, [r7, #8]!
    29f4:	332cf725 	msrcc	CPSR_fs, #9699328	; 0x940000
    29f8:	00009f25 	andeq	r9, r0, r5, lsr #30
    29fc:	00000000 	andeq	r0, r0, r0
    2a00:	031c0000 	tsteq	ip, #0
    2a04:	03400000 	movteq	r0, #0
    2a08:	00010000 	andeq	r0, r1, r0
    2a0c:	00034050 	andeq	r4, r3, r0, asr r0
    2a10:	00034800 	andeq	r4, r3, r0, lsl #16
    2a14:	75000900 	strvc	r0, [r0, #-2304]	; 0x900
    2a18:	24007300 	strcs	r7, [r0], #-768	; 0x300
    2a1c:	9f210071 	svcls	0x00210071
    2a20:	00000348 	andeq	r0, r0, r8, asr #6
    2a24:	0000034b 	andeq	r0, r0, fp, asr #6
    2a28:	00510001 	subseq	r0, r1, r1
    2a2c:	00000000 	andeq	r0, r0, r0
    2a30:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    2a34:	64000003 	strvs	r0, [r0], #-3
    2a38:	01000003 	tsteq	r0, r3
    2a3c:	03645000 	cmneq	r4, #0
    2a40:	03840000 	orreq	r0, r4, #0
    2a44:	00040000 	andeq	r0, r4, r0
    2a48:	9f5001f3 	svcls	0x005001f3
	...
    2a54:	00000384 	andeq	r0, r0, r4, lsl #7
    2a58:	00000397 	muleq	r0, r7, r3
    2a5c:	97500001 	ldrbls	r0, [r0, -r1]
    2a60:	d0000003 	andle	r0, r0, r3
    2a64:	01000003 	tsteq	r0, r3
    2a68:	03d05400 	bicseq	r5, r0, #0, 8
    2a6c:	04080000 	streq	r0, [r8], #-0
    2a70:	00040000 	andeq	r0, r4, r0
    2a74:	9f5001f3 	svcls	0x005001f3
	...
    2a80:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2a84:	000003f4 	strdeq	r0, [r0], -r4
    2a88:	f4500001 			; <UNDEFINED> instruction: 0xf4500001
    2a8c:	fb000003 	blx	2aa2 <_start-0x555e>
    2a90:	01000003 	tsteq	r0, r3
    2a94:	00005100 	andeq	r5, r0, r0, lsl #2
    2a98:	00000000 	andeq	r0, r0, r0
    2a9c:	03ac0000 			; <UNDEFINED> instruction: 0x03ac0000
    2aa0:	03b40000 			; <UNDEFINED> instruction: 0x03b40000
    2aa4:	00010000 	andeq	r0, r1, r0
    2aa8:	0003b450 	andeq	fp, r3, r0, asr r4
    2aac:	0003bb00 	andeq	fp, r3, r0, lsl #22
    2ab0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    2abc:	000003cc 	andeq	r0, r0, ip, asr #7
    2ac0:	000003d8 	ldrdeq	r0, [r0], -r8
    2ac4:	d8500001 	ldmdale	r0, {r0}^
    2ac8:	df000003 	svcle	0x00000003
    2acc:	01000003 	tsteq	r0, r3
    2ad0:	00005100 	andeq	r5, r0, r0, lsl #2
    2ad4:	00000000 	andeq	r0, r0, r0
    2ad8:	04080000 	streq	r0, [r8], #-0
    2adc:	041b0000 	ldreq	r0, [fp], #-0
    2ae0:	00010000 	andeq	r0, r1, r0
    2ae4:	00041b50 	andeq	r1, r4, r0, asr fp
    2ae8:	00045400 	andeq	r5, r4, r0, lsl #8
    2aec:	54000100 	strpl	r0, [r0], #-256	; 0x100
    2af0:	00000454 	andeq	r0, r0, r4, asr r4
    2af4:	0000048c 	andeq	r0, r0, ip, lsl #9
    2af8:	01f30004 	mvnseq	r0, r4
    2afc:	00009f50 	andeq	r9, r0, r0, asr pc
    2b00:	00000000 	andeq	r0, r0, r0
    2b04:	04740000 	ldrbteq	r0, [r4], #-0
    2b08:	04780000 	ldrbteq	r0, [r8], #-0
    2b0c:	00010000 	andeq	r0, r1, r0
    2b10:	00047850 	andeq	r7, r4, r0, asr r8
    2b14:	00047f00 	andeq	r7, r4, r0, lsl #30
    2b18:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    2b24:	00000430 	andeq	r0, r0, r0, lsr r4
    2b28:	00000438 	andeq	r0, r0, r8, lsr r4
    2b2c:	38500001 	ldmdacc	r0, {r0}^
    2b30:	3f000004 	svccc	0x00000004
    2b34:	01000004 	tsteq	r0, r4
    2b38:	00005100 	andeq	r5, r0, r0, lsl #2
    2b3c:	00000000 	andeq	r0, r0, r0
    2b40:	04500000 	ldrbeq	r0, [r0], #-0
    2b44:	045c0000 	ldrbeq	r0, [ip], #-0
    2b48:	00010000 	andeq	r0, r1, r0
    2b4c:	00045c50 	andeq	r5, r4, r0, asr ip
    2b50:	00046300 	andeq	r6, r4, r0, lsl #6
    2b54:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    2b60:	0000048c 	andeq	r0, r0, ip, lsl #9
    2b64:	0000049f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    2b68:	9f500001 	svcls	0x00500001
    2b6c:	e0000004 	and	r0, r0, r4
    2b70:	01000004 	tsteq	r0, r4
    2b74:	04e05400 	strbteq	r5, [r0], #1024	; 0x400
    2b78:	05040000 	streq	r0, [r4, #-0]
    2b7c:	00040000 	andeq	r0, r4, r0
    2b80:	9f5001f3 	svcls	0x005001f3
    2b84:	00000504 	andeq	r0, r0, r4, lsl #10
    2b88:	00000508 	andeq	r0, r0, r8, lsl #10
    2b8c:	08500001 	ldmdaeq	r0, {r0}^
    2b90:	10000005 	andne	r0, r0, r5
    2b94:	01000005 	tsteq	r0, r5
    2b98:	00005400 	andeq	r5, r0, r0, lsl #8
    2b9c:	00000000 	andeq	r0, r0, r0
    2ba0:	04b40000 	ldrteq	r0, [r4], #0
    2ba4:	04c30000 	strbeq	r0, [r3], #0
    2ba8:	00080000 	andeq	r0, r8, r0
    2bac:	24007431 	strcs	r7, [r0], #-1073	; 0x431
    2bb0:	9f1a0070 	svcls	0x001a0070
	...
    2bbc:	000004e0 	andeq	r0, r0, r0, ror #9
    2bc0:	000004f8 	strdeq	r0, [r0], -r8
    2bc4:	00540001 	subseq	r0, r4, r1
    2bc8:	00000000 	andeq	r0, r0, r0
    2bcc:	10000000 	andne	r0, r0, r0
    2bd0:	23000005 	movwcs	r0, #5
    2bd4:	01000005 	tsteq	r0, r5
    2bd8:	05235000 	streq	r5, [r3, #-0]!
    2bdc:	05480000 	strbeq	r0, [r8, #-0]
    2be0:	00010000 	andeq	r0, r1, r0
    2be4:	00054854 	andeq	r4, r5, r4, asr r8
    2be8:	00056800 	andeq	r6, r5, r0, lsl #16
    2bec:	f3000400 	vshl.u8	d0, d0, d0
    2bf0:	009f5001 	addseq	r5, pc, r1
    2bf4:	00000000 	andeq	r0, r0, r0
    2bf8:	Address 0x0000000000002bf8 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	00008010 	andeq	r8, r0, r0, lsl r0
  14:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	049f0002 	ldreq	r0, [pc], #2	; 2c <_start-0x7fd4>
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	000081c4 	andeq	r8, r0, r4, asr #3
  34:	00000480 	andeq	r0, r0, r0, lsl #9
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	0f360002 	svceq	0x00360002
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	00008770 	andeq	r8, r0, r0, ror r7
  54:	00000538 	andeq	r0, r0, r8, lsr r5
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	19080002 	stmdbne	r8, {r1}
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	00008d68 	andeq	r8, r0, r8, ror #26
  74:	00000020 	andeq	r0, r0, r0, lsr #32
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	19e70002 	stmibne	r7!, {r1}^
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	00008d88 	andeq	r8, r0, r8, lsl #27
  94:	00000058 	andeq	r0, r0, r8, asr r0
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	1b7c0002 	blne	1f000b4 <__bss_end__+0x1ef4994>
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	00008de0 	andeq	r8, r0, r0, ror #27
  b4:	0000003c 	andeq	r0, r0, ip, lsr r0
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	1c930002 	ldcne	0, cr0, [r3], {2}
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	00008e1c 	andeq	r8, r0, ip, lsl lr
  d4:	00000034 	andeq	r0, r0, r4, lsr r0
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	1d850002 	stcne	0, cr0, [r5, #8]
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	00008e50 	andeq	r8, r0, r0, asr lr
  f4:	000004f8 	strdeq	r0, [r0], -r8
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	240a0002 	strcs	r0, [sl], #-2
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	00009348 	andeq	r9, r0, r8, asr #6
 114:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	250d0002 	strcs	r0, [sp, #-2]
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	00009370 	andeq	r9, r0, r0, ror r3
 134:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	27ee0002 	strbcs	r0, [lr, r2]!
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	00009420 	andeq	r9, r0, r0, lsr #8
 154:	00000074 	andeq	r0, r0, r4, ror r0
	...
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	299f0002 	ldmibcs	pc, {r1}	; <UNPREDICTABLE>
 168:	00040000 	andeq	r0, r4, r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	00009494 	muleq	r0, r4, r4
 174:	00000088 	andeq	r0, r0, r8, lsl #1
	...
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	2b7b0002 	blcs	1ec0194 <__bss_end__+0x1eb4a74>
 188:	00040000 	andeq	r0, r4, r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	0000951c 	andeq	r9, r0, ip, lsl r5
 194:	000001e8 	andeq	r0, r0, r8, ror #3
	...
 1a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a4:	2f6d0002 	svccs	0x006d0002
 1a8:	00040000 	andeq	r0, r4, r0
 1ac:	00000000 	andeq	r0, r0, r0
 1b0:	00009704 	andeq	r9, r0, r4, lsl #14
 1b4:	00000620 	andeq	r0, r0, r0, lsr #12
	...
 1c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c4:	413b0002 	teqmi	fp, r2
 1c8:	00040000 	andeq	r0, r4, r0
 1cc:	00000000 	andeq	r0, r0, r0
 1d0:	00009d24 	andeq	r9, r0, r4, lsr #26
 1d4:	00000154 	andeq	r0, r0, r4, asr r1
	...
 1e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e4:	453e0002 	ldrmi	r0, [lr, #-2]!
 1e8:	00040000 	andeq	r0, r4, r0
 1ec:	00000000 	andeq	r0, r0, r0
 1f0:	00009e78 	andeq	r9, r0, r8, ror lr
 1f4:	00000200 	andeq	r0, r0, r0, lsl #4
	...
 200:	0000001c 	andeq	r0, r0, ip, lsl r0
 204:	4acf0002 	bmi	ff3c0214 <__bss_end__+0xff3b4af4>
 208:	00040000 	andeq	r0, r4, r0
 20c:	00000000 	andeq	r0, r0, r0
 210:	0000a078 	andeq	sl, r0, r8, ror r0
 214:	0000005c 	andeq	r0, r0, ip, asr r0
	...
 220:	0000001c 	andeq	r0, r0, ip, lsl r0
 224:	4db70002 	ldcmi	0, cr0, [r7, #8]!
 228:	00040000 	andeq	r0, r4, r0
 22c:	00000000 	andeq	r0, r0, r0
 230:	0000a210 	andeq	sl, r0, r0, lsl r2
 234:	00000568 	andeq	r0, r0, r8, ror #10
	...
 240:	0000001c 	andeq	r0, r0, ip, lsl r0
 244:	55dc0002 	ldrbpl	r0, [ip, #2]
 248:	00040000 	andeq	r0, r4, r0
 24c:	00000000 	andeq	r0, r0, r0
 250:	0000a778 	andeq	sl, r0, r8, ror r7
 254:	00000050 	andeq	r0, r0, r0, asr r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	00000124 	andeq	r0, r0, r4, lsr #2
   4:	0000012c 	andeq	r0, r0, ip, lsr #2
   8:	00000130 	andeq	r0, r0, r0, lsr r1
   c:	00000148 	andeq	r0, r0, r8, asr #2
	...
  18:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
  1c:	000001fc 	strdeq	r0, [r0], -ip
  20:	00000200 	andeq	r0, r0, r0, lsl #4
  24:	00000204 	andeq	r0, r0, r4, lsl #4
	...
  30:	00000280 	andeq	r0, r0, r0, lsl #5
  34:	00000288 	andeq	r0, r0, r8, lsl #5
  38:	00000290 	muleq	r0, r0, r2
  3c:	00000298 	muleq	r0, r8, r2
	...
  48:	00000444 	andeq	r0, r0, r4, asr #8
  4c:	00000458 	andeq	r0, r0, r8, asr r4
  50:	0000045c 	andeq	r0, r0, ip, asr r4
  54:	0000049c 	muleq	r0, ip, r4
	...
  60:	00000294 	muleq	r0, r4, r2
  64:	00000298 	muleq	r0, r8, r2
  68:	000002c8 	andeq	r0, r0, r8, asr #5
  6c:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
	...
  78:	00009420 	andeq	r9, r0, r0, lsr #8
  7c:	00009494 	muleq	r0, r4, r4
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000001c3 	andeq	r0, r0, r3, asr #3
       4:	01560002 	cmpeq	r6, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	2f727375 	svccs	0x00727375
      20:	61636f6c 	cmnvs	r3, ip, ror #30
      24:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
      28:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
      2c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
      30:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
      34:	61652d65 	cmnvs	r5, r5, ror #26
      38:	342f6962 	strtcc	r6, [pc], #-2402	; 40 <_start-0x7fc0>
      3c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
      40:	3173632d 	cmncc	r3, sp, lsr #6
      44:	2f653037 	svccs	0x00653037
      48:	2f62696c 	svccs	0x0062696c
      4c:	2f636367 	svccs	0x00636367
      50:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
      54:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
      58:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
      5c:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
      60:	2f332e38 	svccs	0x00332e38
      64:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      68:	00656475 	rsbeq	r6, r5, r5, ror r4
      6c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
      70:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
      74:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
      78:	2f6e756a 	svccs	0x006e756a
      7c:	6b736544 	blvs	1cd9594 <__bss_end__+0x1ccde74>
      80:	2f706f74 	svccs	0x00706f74
      84:	6f686373 	svcvs	0x00686373
      88:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
      8c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
      90:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
      94:	53432f30 	movtpl	r2, #16176	; 0x3f30
      98:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
      9c:	3173632f 	cmncc	r3, pc, lsr #6
      a0:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
      a4:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
      a8:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
      ac:	00697062 	rsbeq	r7, r9, r2, rrx
      b0:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
      b4:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
      b8:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
      bc:	2f6e756a 	svccs	0x006e756a
      c0:	6b736544 	blvs	1cd95d8 <__bss_end__+0x1ccdeb8>
      c4:	2f706f74 	svccs	0x00706f74
      c8:	6f686373 	svcvs	0x00686373
      cc:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
      d0:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
      d4:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
      d8:	53432f30 	movtpl	r2, #16176	; 0x3f30
      dc:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
      e0:	3173632f 	cmncc	r3, pc, lsr #6
      e4:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
      e8:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
      ec:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
      f0:	2f697062 	svccs	0x00697062
      f4:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
      f8:	692d6530 	pushvs	{r4, r5, r8, sl, sp, lr}
      fc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     100:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
     104:	2d370000 	ldccs	0, cr0, [r7, #-0]
     108:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0x574
     10c:	6572702d 	ldrbvs	r7, [r2, #-45]!	; 0x2d
     110:	74706d65 	ldrbtvc	r6, [r0], #-3429	; 0xd65
     114:	2d657669 	stclcs	6, cr7, [r5, #-420]!	; 0xfffffe5c
     118:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
     11c:	632e6461 	teqvs	lr, #1627389952	; 0x61000000
     120:	00000000 	andeq	r0, r0, r0
     124:	2d697072 	stclcs	0, cr7, [r9, #-456]!	; 0xfffffe38
     128:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
     12c:	682e6461 	stmdavs	lr!, {r0, r5, r6, sl, sp, lr}
     130:	00000000 	andeq	r0, r0, r0
     134:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     138:	672d746e 	strvs	r7, [sp, -lr, ror #8]!
     13c:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
     140:	00000100 	andeq	r0, r0, r0, lsl #2
     144:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
     148:	00020068 	andeq	r0, r2, r8, rrx
     14c:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
     150:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
     154:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
     158:	00682e72 	rsbeq	r2, r8, r2, ror lr
     15c:	00000003 	andeq	r0, r0, r3
     160:	10020500 	andne	r0, r2, r0, lsl #10
     164:	03000080 	movweq	r0, #128	; 0x80
     168:	4c6a0112 	stfmie	f0, [sl], #-72	; 0xffffffb8
     16c:	04020083 	streq	r0, [r2], #-131	; 0x83
     170:	06ba0601 	ldrteq	r0, [sl], r1, lsl #12
     174:	69845e08 	stmibvs	r4, {r3, r9, sl, fp, ip, lr}
     178:	2f2c4b4b 	svccs	0x002c4b4b
     17c:	020064bb 	andeq	r6, r0, #-1157627904	; 0xbb000000
     180:	2e060104 	adfcss	f0, f6, f4
     184:	084b4f06 	stmdaeq	fp, {r1, r2, r8, r9, sl, fp, lr}^
     188:	302f2f5a 	eorcc	r2, pc, sl, asr pc	; <UNPREDICTABLE>
     18c:	2b30854d 	blcs	c216c8 <__bss_end__+0xc15fa8>
     190:	02040200 	andeq	r0, r4, #0, 4
     194:	0402002f 	streq	r0, [r2], #-47	; 0x2f
     198:	02006702 	andeq	r6, r0, #524288	; 0x80000
     19c:	002f0204 	eoreq	r0, pc, r4, lsl #4
     1a0:	47020402 	strmi	r0, [r2, -r2, lsl #8]
     1a4:	01040200 	mrseq	r0, R12_usr
     1a8:	4f062e06 	svcmi	0x00062e06
     1ac:	0200304b 	andeq	r3, r0, #75	; 0x4b
     1b0:	004b0204 	subeq	r0, fp, r4, lsl #4
     1b4:	49020402 	stmdbmi	r2, {r1, sl}
     1b8:	01040200 	mrseq	r0, R12_usr
     1bc:	4f062e06 	svcmi	0x00062e06
     1c0:	0e024ba1 	vmlaeq.f64	d4, d18, d17
     1c4:	3f010100 	svccc	0x00010100
     1c8:	02000002 	andeq	r0, r0, #2
     1cc:	00017800 	andeq	r7, r1, r0, lsl #16
     1d0:	fb010200 	blx	409da <__bss_end__+0x352ba>
     1d4:	01000d0e 	tsteq	r0, lr, lsl #26
     1d8:	00010101 	andeq	r0, r1, r1, lsl #2
     1dc:	00010000 	andeq	r0, r1, r0
     1e0:	552f0100 	strpl	r0, [pc, #-256]!	; e8 <_start-0x7f18>
     1e4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     1e8:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
     1ec:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
     1f0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
     1f4:	6f746b73 	svcvs	0x00746b73
     1f8:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
     1fc:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 64 <_start-0x7f9c>
     200:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
     204:	31726574 	cmncc	r2, r4, ror r5
     208:	2f303239 	svccs	0x00303239
     20c:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
     210:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
     214:	30343173 	eorscc	r3, r4, r3, ror r1
     218:	30322d65 	eorscc	r2, r2, r5, ror #26
     21c:	2f6e6977 	svccs	0x006e6977
     220:	7062696c 	rsbvc	r6, r2, ip, ror #18
     224:	73632f69 	cmnvc	r3, #420	; 0x1a4
     228:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
     22c:	746e692d 	strbtvc	r6, [lr], #-2349	; 0x92d
     230:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
     234:	2f007470 	svccs	0x00007470
     238:	2f727375 	svccs	0x00727375
     23c:	61636f6c 	cmnvs	r3, ip, ror #30
     240:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
     244:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
     248:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     24c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     250:	61652d65 	cmnvs	r5, r5, ror #26
     254:	342f6962 	strtcc	r6, [pc], #-2402	; 25c <_start-0x7da4>
     258:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
     25c:	3173632d 	cmncc	r3, sp, lsr #6
     260:	2f653037 	svccs	0x00653037
     264:	2f62696c 	svccs	0x0062696c
     268:	2f636367 	svccs	0x00636367
     26c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     270:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     274:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     278:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
     27c:	2f332e38 	svccs	0x00332e38
     280:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     284:	00656475 	rsbeq	r6, r5, r5, ror r4
     288:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
     28c:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
     290:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
     294:	2f6e756a 	svccs	0x006e756a
     298:	6b736544 	blvs	1cd97b0 <__bss_end__+0x1cce090>
     29c:	2f706f74 	svccs	0x00706f74
     2a0:	6f686373 	svcvs	0x00686373
     2a4:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
     2a8:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
     2ac:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
     2b0:	53432f30 	movtpl	r2, #16176	; 0x3f30
     2b4:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
     2b8:	3173632f 	cmncc	r3, pc, lsr #6
     2bc:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
     2c0:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
     2c4:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     2c8:	00697062 	rsbeq	r7, r9, r2, rrx
     2cc:	682e5100 	stmdavs	lr!, {r8, ip, lr}
     2d0:	00000000 	andeq	r0, r0, r0
     2d4:	2d697072 	stclcs	0, cr7, [r9, #-456]!	; 0xfffffe38
     2d8:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
     2dc:	632e6461 	teqvs	lr, #1627389952	; 0x61000000
     2e0:	00000000 	andeq	r0, r0, r0
     2e4:	2d697072 	stclcs	0, cr7, [r9, #-456]!	; 0xfffffe38
     2e8:	746d7261 	strbtvc	r7, [sp], #-609	; 0x261
     2ec:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     2f0:	0100682e 	tsteq	r0, lr, lsr #16
     2f4:	70720000 	rsbsvc	r0, r2, r0
     2f8:	6e692d69 	cdpvs	13, 6, cr2, cr9, cr9, {3}
     2fc:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
     300:	73747075 	cmnvc	r4, #117	; 0x75
     304:	0100682e 	tsteq	r0, lr, lsr #16
     308:	70720000 	rsbsvc	r0, r2, r0
     30c:	68742d69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, sl, fp, sp}^
     310:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
     314:	0000682e 	andeq	r6, r0, lr, lsr #16
     318:	74730000 	ldrbtvc	r0, [r3], #-0
     31c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
     320:	6363672d 	cmnvs	r3, #11796480	; 0xb40000
     324:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     328:	70720000 	rsbsvc	r0, r2, r0
     32c:	00682e69 	rsbeq	r2, r8, r9, ror #28
     330:	74000003 	strvc	r0, [r0], #-3
     334:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     338:	746e692d 	strbtvc	r6, [lr], #-2349	; 0x92d
     33c:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
     340:	682e7470 	stmdavs	lr!, {r4, r5, r6, sl, ip, sp, lr}
     344:	00000100 	andeq	r0, r0, r0, lsl #2
     348:	02050000 	andeq	r0, r5, #0
     34c:	000081c4 	andeq	r8, r0, r4, asr #3
     350:	01010d03 	tsteq	r1, r3, lsl #26
     354:	014b014b 	cmpeq	fp, fp, asr #2
     358:	134a1b03 	movtne	r1, #43779	; 0xab03
     35c:	6867674b 	stmdavs	r7!, {r0, r1, r3, r6, r8, r9, sl, sp, lr}^
     360:	67134f2f 	ldrvs	r4, [r3, -pc, lsr #30]
     364:	044b2f4b 	strbeq	r2, [fp], #-3915	; 0xf4b
     368:	4a700302 	bmi	1c00f78 <__bss_end__+0x1bf5858>
     36c:	0301044c 	movweq	r0, #5196	; 0x144c
     370:	684b8264 	stmdavs	fp, {r2, r5, r6, r9, pc}^
     374:	01040200 	mrseq	r0, R12_usr
     378:	d7066606 	strle	r6, [r6, -r6, lsl #12]
     37c:	01040200 	mrseq	r0, R12_usr
     380:	d4066606 	strle	r6, [r6], #-1542	; 0x606
     384:	2fa12f4d 	svccs	0x00a12f4d
     388:	01040200 	mrseq	r0, R12_usr
     38c:	d8064a06 	stmdale	r6, {r1, r2, r9, fp, lr}
     390:	02004b2f 	andeq	r4, r0, #48128	; 0xbc00
     394:	66060104 	strvs	r0, [r6], -r4, lsl #2
     398:	4b67d906 	blmi	19f67b8 <__bss_end__+0x19eb098>
     39c:	7a032f2f 	bvc	cc060 <__bss_end__+0xc0940>
     3a0:	0204354a 	andeq	r3, r4, #310378496	; 0x12800000
     3a4:	2f9e7703 	svccs	0x009e7703
     3a8:	84674b4d 	strbthi	r4, [r7], #-2893	; 0xb4d
     3ac:	01040200 	mrseq	r0, R12_usr
     3b0:	d7064a06 	strle	r4, [r6, -r6, lsl #20]
     3b4:	d66e03a0 	strbtle	r0, [lr], -r0, lsr #7
     3b8:	82210314 	eorhi	r0, r1, #20, 6	; 0x50000000
     3bc:	4c4b2f30 	mcrrmi	15, 3, r2, fp, cr0
     3c0:	674b3167 	strbvs	r3, [fp, -r7, ror #2]
     3c4:	31846968 	orrcc	r6, r4, r8, ror #18
     3c8:	67f62f84 	ldrbvs	r2, [r6, r4, lsl #31]!
     3cc:	672f2f52 			; <UNDEFINED> instruction: 0x672f2f52
     3d0:	85684c4c 	strbhi	r4, [r8, #-3148]!	; 0xc4c
     3d4:	03010a03 	movweq	r0, #6659	; 0x1a03
     3d8:	8934ba0c 	ldmdbhi	r4!, {r2, r3, r9, fp, ip, sp, pc}
     3dc:	2f4b3167 	svccs	0x004b3167
     3e0:	082f864b 	stmdaeq	pc!, {r0, r1, r3, r6, r9, sl, pc}	; <UNPREDICTABLE>
     3e4:	6d884b44 	vstrvs	d4, [r8, #272]	; 0x110
     3e8:	4c2e7903 	stcmi	9, cr7, [lr], #-12
     3ec:	00302fa2 	eorseq	r2, r0, r2, lsr #31
     3f0:	2a010402 	bcs	41400 <__bss_end__+0x35ce0>
     3f4:	2e0b0380 	cdpcs	3, 0, cr0, cr11, cr0, {4}
     3f8:	004d2f4b 	subeq	r2, sp, fp, asr #30
     3fc:	2a010402 	bcs	4140c <__bss_end__+0x35cec>
     400:	8209036d 	andhi	r0, r9, #-1275068415	; 0xb4000001
     404:	0014022f 	andseq	r0, r4, pc, lsr #4
     408:	02700101 	rsbseq	r0, r0, #1073741824	; 0x40000000
     40c:	00020000 	andeq	r0, r2, r0
     410:	00000128 	andeq	r0, r0, r8, lsr #2
     414:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     418:	0101000d 	tsteq	r1, sp
     41c:	00000101 	andeq	r0, r0, r1, lsl #2
     420:	00000100 	andeq	r0, r0, r0, lsl #2
     424:	73752f01 	cmnvc	r5, #1, 30
     428:	6f6c2f72 	svcvs	0x006c2f72
     42c:	2f6c6163 	svccs	0x006c6163
     430:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
     434:	612f7261 	teqvs	pc, r1, ror #4
     438:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     43c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     440:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     444:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
     448:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
     44c:	30373173 	eorscc	r3, r7, r3, ror r1
     450:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     454:	63672f62 	cmnvs	r7, #392	; 0x188
     458:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
     45c:	6f6e2d6d 	svcvs	0x006e2d6d
     460:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     464:	2f696261 	svccs	0x00696261
     468:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
     46c:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
     470:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     474:	552f0065 	strpl	r0, [pc, #-101]!	; 417 <_start-0x7be9>
     478:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     47c:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
     480:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
     484:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
     488:	6f746b73 	svcvs	0x00746b73
     48c:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
     490:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 2f8 <_start-0x7d08>
     494:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
     498:	31726574 	cmncc	r2, r4, ror r5
     49c:	2f303239 	svccs	0x00303239
     4a0:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
     4a4:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
     4a8:	30343173 	eorscc	r3, r4, r3, ror r1
     4ac:	30322d65 	eorscc	r2, r2, r5, ror #26
     4b0:	2f6e6977 	svccs	0x006e6977
     4b4:	7062696c 	rsbvc	r6, r2, ip, ror #18
     4b8:	752f0069 	strvc	r0, [pc, #-105]!	; 457 <_start-0x7ba9>
     4bc:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 2f8 <_start-0x7d08>
     4c0:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
     4c4:	6c65432f 	stclvs	3, cr4, [r5], #-188	; 0xffffff44
     4c8:	2f72616c 	svccs	0x0072616c
     4cc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     4d0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     4d4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     4d8:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
     4dc:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
     4e0:	37317363 	ldrcc	r7, [r1, -r3, ror #6]!
     4e4:	612f6530 	teqvs	pc, r0, lsr r5	; <UNPREDICTABLE>
     4e8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     4ec:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     4f0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     4f4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     4f8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     4fc:	69630000 	stmdbvs	r3!, {}^	; <UNPREDICTABLE>
     500:	6c756372 	ldclvs	3, cr6, [r5], #-456	; 0xfffffe38
     504:	632e7261 	teqvs	lr, #268435462	; 0x10000006
     508:	00000000 	andeq	r0, r0, r0
     50c:	63726963 	cmnvs	r2, #1622016	; 0x18c000
     510:	72616c75 	rsbvc	r6, r1, #29952	; 0x7500
     514:	0000682e 	andeq	r6, r0, lr, lsr #16
     518:	74730000 	ldrbtvc	r0, [r3], #-0
     51c:	66656464 	strbtvs	r6, [r5], -r4, ror #8
     520:	0100682e 	tsteq	r0, lr, lsr #16
     524:	70720000 	rsbsvc	r0, r2, r0
     528:	00682e69 	rsbeq	r2, r8, r9, ror #28
     52c:	73000002 	movwvc	r0, #2
     530:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     534:	00682e67 	rsbeq	r2, r8, r7, ror #28
     538:	00000003 	andeq	r0, r0, r3
     53c:	70020500 	andvc	r0, r2, r0, lsl #10
     540:	19000087 	stmdbne	r0, {r0, r1, r2, r7}
     544:	0302044b 	movweq	r0, #9291	; 0x244b
     548:	998200cd 	stmibls	r2, {r0, r2, r3, r6, r7}
     54c:	b8030104 	stmdalt	r3, {r2, r8}
     550:	22089e7f 	andcs	r9, r8, #2032	; 0x7f0
     554:	089f2fd8 	ldmeq	pc, {r3, r4, r6, r7, r8, r9, sl, fp, sp}	; <UNPREDICTABLE>
     558:	6767675b 			; <UNDEFINED> instruction: 0x6767675b
     55c:	02044b9f 	andeq	r4, r4, #162816	; 0x27c00
     560:	04ba3a03 	ldrteq	r3, [sl], #2563	; 0xa03
     564:	4a470301 	bmi	11c1170 <__bss_end__+0x11b5a50>
     568:	01040200 	mrseq	r0, R12_usr
     56c:	02044a06 	andeq	r4, r4, #24576	; 0x6000
     570:	d63c0306 	ldrtle	r0, [ip], -r6, lsl #6
     574:	45030104 	strmi	r0, [r3, #-260]	; 0x104
     578:	040200ba 	streq	r0, [r2], #-186	; 0xba
     57c:	044a0601 	strbeq	r0, [sl], #-1537	; 0x601
     580:	3d030602 	stccc	6, cr0, [r3, #-8]
     584:	030104d6 	movweq	r0, #5334	; 0x14d6
     588:	02009e44 	andeq	r9, r0, #68, 28	; 0x440
     58c:	4a060104 	bmi	1809a4 <__bss_end__+0x175284>
     590:	03060204 	movweq	r0, #25092	; 0x6204
     594:	0a03d637 	beq	f5e78 <__bss_end__+0xea758>
     598:	4b4b4c82 	blmi	12d37a8 <__bss_end__+0x12c8088>
     59c:	03010483 	movweq	r0, #5251	; 0x1483
     5a0:	044a7fbb 	strbeq	r7, [sl], #-4027	; 0xfbb
     5a4:	00c10302 	sbceq	r0, r1, r2, lsl #6
     5a8:	0301042e 	movweq	r0, #5166	; 0x142e
     5ac:	02002e40 	andeq	r2, r0, #64, 28	; 0x400
     5b0:	4a060104 	bmi	1809c8 <__bss_end__+0x1752a8>
     5b4:	04020066 	streq	r0, [r2], #-102	; 0x66
     5b8:	02006604 	andeq	r6, r0, #4, 12	; 0x400000
     5bc:	064a0104 	strbeq	r0, [sl], -r4, lsl #2
     5c0:	26021903 	strcs	r1, [r2], -r3, lsl #18
     5c4:	03020401 	movweq	r0, #9217	; 0x2401
     5c8:	0b034a1c 	bleq	d2e40 <__bss_end__+0xc7720>
     5cc:	0200324a 	andeq	r3, r0, #-1610612732	; 0xa0000004
     5d0:	71030104 	tstvc	r3, r4, lsl #2
     5d4:	0402002e 	streq	r0, [r2], #-46	; 0x2e
     5d8:	4a0a0301 	bmi	2811e4 <__bss_end__+0x275ac4>
     5dc:	834b2f4c 	movthi	r2, #48972	; 0xbf4c
     5e0:	03010446 	movweq	r0, #5190	; 0x1446
     5e4:	a04e2e5e 	subge	r2, lr, lr, asr lr
     5e8:	04020085 	streq	r0, [r2], #-133	; 0x85
     5ec:	02004b02 	andeq	r4, r0, #2048	; 0x800
     5f0:	00650204 	rsbeq	r0, r5, r4, lsl #4
     5f4:	06010402 	streq	r0, [r1], -r2, lsl #8
     5f8:	034c062e 	movteq	r0, #50734	; 0xc62e
     5fc:	04832e5a 	streq	r2, [r3], #3674	; 0xe5a
     600:	2e360302 	cdpcs	3, 3, cr0, cr6, cr2, {0}
     604:	4b030104 	blmi	c0a1c <__bss_end__+0xb52fc>
     608:	48834cba 	stmmi	r3, {r1, r3, r4, r5, r7, sl, fp, lr}
     60c:	02044d31 	andeq	r4, r4, #3136	; 0xc40
     610:	044a2e03 	strbeq	r2, [sl], #-3587	; 0xe03
     614:	d6540301 	ldrble	r0, [r4], -r1, lsl #6
     618:	04684b4c 	strbteq	r4, [r8], #-2892	; 0xb4c
     61c:	4a270302 	bmi	9c122c <__bss_end__+0x9b5b0c>
     620:	5a030104 	bpl	c0a38 <__bss_end__+0xb5318>
     624:	0402009e 	streq	r0, [r2], #-158	; 0x9e
     628:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
     62c:	032f50d1 	teqeq	pc, #209	; 0xd1
     630:	0204ba15 	andeq	fp, r4, #86016	; 0x15000
     634:	d72e0f03 	strle	r0, [lr, -r3, lsl #30]!
     638:	73030104 	movwvc	r0, #12548	; 0x3104
     63c:	0302042e 	movweq	r0, #9262	; 0x242e
     640:	302f661b 	eorcc	r6, pc, fp, lsl r6	; <UNPREDICTABLE>
     644:	03010431 	movweq	r0, #5169	; 0x1431
     648:	02044a62 	andeq	r4, r4, #401408	; 0x62000
     64c:	2f2e1803 	svccs	0x002e1803
     650:	032e6e03 	teqeq	lr, #3, 28	; 0x30
     654:	2f4c8213 	svccs	0x004c8213
     658:	01044783 	smlabbeq	r4, r3, r7, r4
     65c:	4b2e6503 	blmi	b99a70 <__bss_end__+0xb8e350>
     660:	040200d4 	streq	r0, [r2], #-212	; 0xd4
     664:	062e0601 	strteq	r0, [lr], -r1, lsl #12
     668:	4c02044d 	cfstrsmi	mvf0, [r2], {77}	; 0x4d
     66c:	00810104 	addeq	r0, r1, r4, lsl #2
     670:	06010402 	streq	r0, [r1], -r2, lsl #8
     674:	50d1064a 	sbcspl	r0, r1, sl, asr #12
     678:	000e0267 	andeq	r0, lr, r7, ror #4
     67c:	00ec0101 	rsceq	r0, ip, r1, lsl #2
     680:	00020000 	andeq	r0, r2, r0
     684:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     688:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     68c:	0101000d 	tsteq	r1, sp
     690:	00000101 	andeq	r0, r0, r1, lsl #2
     694:	00000100 	andeq	r0, r0, r0, lsl #2
     698:	62696c01 	rsbvs	r6, r9, #256	; 0x100
     69c:	752f0063 	strvc	r0, [pc, #-99]!	; 641 <_start-0x79bf>
     6a0:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 4dc <_start-0x7b24>
     6a4:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
     6a8:	6c65432f 	stclvs	3, cr4, [r5], #-188	; 0xffffff44
     6ac:	2f72616c 	svccs	0x0072616c
     6b0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     6b4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     6b8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     6bc:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
     6c0:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
     6c4:	37317363 	ldrcc	r7, [r1, -r3, ror #6]!
     6c8:	6c2f6530 	cfstr32vs	mvfx6, [pc], #-192	; 610 <_start-0x79f0>
     6cc:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
     6d0:	612f6363 	teqvs	pc, r3, ror #6
     6d4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     6d8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     6dc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     6e0:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
     6e4:	692f332e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, r9, ip, sp}	; <UNPREDICTABLE>
     6e8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     6ec:	2f006564 	svccs	0x00006564
     6f0:	2f727375 	svccs	0x00727375
     6f4:	61636f6c 	cmnvs	r3, ip, ror #30
     6f8:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
     6fc:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
     700:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     704:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     708:	61652d65 	cmnvs	r5, r5, ror #26
     70c:	342f6962 	strtcc	r6, [pc], #-2402	; 714 <_start-0x78ec>
     710:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
     714:	3173632d 	cmncc	r3, sp, lsr #6
     718:	2f653037 	svccs	0x00653037
     71c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     720:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     724:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     728:	6e692f69 	cdpvs	15, 6, cr2, cr9, cr9, {3}
     72c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     730:	6d000065 	stcvs	0, cr0, [r0, #-404]	; 0xfffffe6c
     734:	65736d65 	ldrbvs	r6, [r3, #-3429]!	; 0xd65
     738:	00632e74 	rsbeq	r2, r3, r4, ror lr
     73c:	73000001 	movwvc	r0, #1
     740:	65646474 	strbvs	r6, [r4, #-1140]!	; 0x474
     744:	00682e66 	rsbeq	r2, r8, r6, ror #28
     748:	73000002 	movwvc	r0, #2
     74c:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     750:	00682e67 	rsbeq	r2, r8, r7, ror #28
     754:	00000003 	andeq	r0, r0, r3
     758:	68020500 	stmdavs	r2, {r8, sl}
     75c:	1400008d 	strne	r0, [r0], #-141	; 0x8d
     760:	002f4c13 	eoreq	r4, pc, r3, lsl ip	; <UNPREDICTABLE>
     764:	49010402 	stmdbmi	r1, {r1, sl}
     768:	0002024d 	andeq	r0, r2, sp, asr #4
     76c:	01020101 	tsteq	r2, r1, lsl #2
     770:	00020000 	andeq	r0, r2, r0
     774:	000000eb 	andeq	r0, r0, fp, ror #1
     778:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     77c:	0101000d 	tsteq	r1, sp
     780:	00000101 	andeq	r0, r0, r1, lsl #2
     784:	00000100 	andeq	r0, r0, r0, lsl #2
     788:	62696c01 	rsbvs	r6, r9, #256	; 0x100
     78c:	752f0063 	strvc	r0, [pc, #-99]!	; 731 <_start-0x78cf>
     790:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 5cc <_start-0x7a34>
     794:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
     798:	6c65432f 	stclvs	3, cr4, [r5], #-188	; 0xffffff44
     79c:	2f72616c 	svccs	0x0072616c
     7a0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     7a4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     7a8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     7ac:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
     7b0:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
     7b4:	37317363 	ldrcc	r7, [r1, -r3, ror #6]!
     7b8:	6c2f6530 	cfstr32vs	mvfx6, [pc], #-192	; 700 <_start-0x7900>
     7bc:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
     7c0:	612f6363 	teqvs	pc, r3, ror #6
     7c4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     7c8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     7cc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     7d0:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
     7d4:	692f332e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, r9, ip, sp}	; <UNPREDICTABLE>
     7d8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     7dc:	2f006564 	svccs	0x00006564
     7e0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     7e4:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
     7e8:	6a6e6169 	bvs	1b98d94 <__bss_end__+0x1b8d674>
     7ec:	442f6e75 	strtmi	r6, [pc], #-3701	; 7f4 <_start-0x780c>
     7f0:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
     7f4:	732f706f 	teqvc	pc, #111	; 0x6f
     7f8:	6f6f6863 	svcvs	0x006f6863
     7fc:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     800:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     804:	30323931 	eorscc	r3, r2, r1, lsr r9
     808:	3153432f 	cmpcc	r3, pc, lsr #6
     80c:	2f453034 	svccs	0x00453034
     810:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
     814:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
     818:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
     81c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     820:	00006970 	andeq	r6, r0, r0, ror r9
     824:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
     828:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
     82c:	00000100 	andeq	r0, r0, r0, lsl #2
     830:	61647473 	smcvs	18243	; 0x4743
     834:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
     838:	00000200 	andeq	r0, r0, r0, lsl #4
     83c:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
     840:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
     844:	00003e6e 	andeq	r3, r0, lr, ror #28
     848:	70720000 	rsbsvc	r0, r2, r0
     84c:	00682e69 	rsbeq	r2, r8, r9, ror #28
     850:	76000003 	strvc	r0, [r0], -r3
     854:	72702d61 	rsbsvc	r2, r0, #6208	; 0x1840
     858:	6b746e69 	blvs	1d1c204 <__bss_end__+0x1d10ae4>
     85c:	0100682e 	tsteq	r0, lr, lsr #16
     860:	00000000 	andeq	r0, r0, r0
     864:	8d880205 	sfmhi	f0, 4, [r8, #20]
     868:	6b170000 	blvs	5c0870 <__bss_end__+0x5b5150>
     86c:	0289bf4b 	addeq	fp, r9, #300	; 0x12c
     870:	0101000e 	tsteq	r1, lr
     874:	0000008a 	andeq	r0, r0, sl, lsl #1
     878:	00720002 	rsbseq	r0, r2, r2
     87c:	01020000 	mrseq	r0, (UNDEF: 2)
     880:	000d0efb 	strdeq	r0, [sp], -fp
     884:	01010101 	tsteq	r1, r1, lsl #2
     888:	01000000 	mrseq	r0, (UNDEF: 0)
     88c:	6c010000 	stcvs	0, cr0, [r1], {-0}
     890:	00636269 	rsbeq	r6, r3, r9, ror #4
     894:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
     898:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
     89c:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
     8a0:	2f6e756a 	svccs	0x006e756a
     8a4:	6b736544 	blvs	1cd9dbc <__bss_end__+0x1cce69c>
     8a8:	2f706f74 	svccs	0x00706f74
     8ac:	6f686373 	svcvs	0x00686373
     8b0:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
     8b4:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
     8b8:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
     8bc:	53432f30 	movtpl	r2, #16176	; 0x3f30
     8c0:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
     8c4:	3173632f 	cmncc	r3, pc, lsr #6
     8c8:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
     8cc:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
     8d0:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     8d4:	00697062 	rsbeq	r7, r9, r2, rrx
     8d8:	74757000 	ldrbtvc	r7, [r5], #-0
     8dc:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
     8e0:	0100632e 	tsteq	r0, lr, lsr #6
     8e4:	70720000 	rsbsvc	r0, r2, r0
     8e8:	00682e69 	rsbeq	r2, r8, r9, ror #28
     8ec:	00000002 	andeq	r0, r0, r2
     8f0:	e0020500 	and	r0, r2, r0, lsl #10
     8f4:	1400008d 	strne	r0, [r0], #-141	; 0x8d
     8f8:	bc136b4a 	ldclt	11, cr6, [r3], {74}	; 0x4a
     8fc:	00080213 	andeq	r0, r8, r3, lsl r2
     900:	00960101 	addseq	r0, r6, r1, lsl #2
     904:	00020000 	andeq	r0, r2, r0
     908:	0000006f 	andeq	r0, r0, pc, rrx
     90c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     910:	0101000d 	tsteq	r1, sp
     914:	00000101 	andeq	r0, r0, r1, lsl #2
     918:	00000100 	andeq	r0, r0, r0, lsl #2
     91c:	62696c01 	rsbvs	r6, r9, #256	; 0x100
     920:	552f0063 	strpl	r0, [pc, #-99]!	; 8c5 <_start-0x773b>
     924:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     928:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
     92c:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
     930:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
     934:	6f746b73 	svcvs	0x00746b73
     938:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
     93c:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 7a4 <_start-0x785c>
     940:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
     944:	31726574 	cmncc	r2, r4, ror r5
     948:	2f303239 	svccs	0x00303239
     94c:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
     950:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
     954:	30343173 	eorscc	r3, r4, r3, ror r1
     958:	30322d65 	eorscc	r2, r2, r5, ror #26
     95c:	2f6e6977 	svccs	0x006e6977
     960:	7062696c 	rsbvc	r6, r2, ip, ror #18
     964:	70000069 	andvc	r0, r0, r9, rrx
     968:	2e6b7475 	mcrcs	4, 3, r7, cr11, cr5, {3}
     96c:	00010063 	andeq	r0, r1, r3, rrx
     970:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
     974:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     978:	00000000 	andeq	r0, r0, r0
     97c:	8e1c0205 	cdphi	2, 1, cr0, cr12, cr5, {0}
     980:	4c150000 	ldcmi	0, cr0, [r5], {-0}
     984:	0402002d 	streq	r0, [r2], #-45	; 0x2d
     988:	02002f02 	andeq	r2, r0, #2, 30
     98c:	00490204 	subeq	r0, r9, r4, lsl #4
     990:	06010402 	streq	r0, [r1], -r2, lsl #8
     994:	026b062e 	rsbeq	r0, fp, #48234496	; 0x2e00000
     998:	01010006 	tsteq	r1, r6
     99c:	000001de 	ldrdeq	r0, [r0], -lr
     9a0:	00df0002 	sbcseq	r0, pc, r2
     9a4:	01020000 	mrseq	r0, (UNDEF: 2)
     9a8:	000d0efb 	strdeq	r0, [sp], -fp
     9ac:	01010101 	tsteq	r1, r1, lsl #2
     9b0:	01000000 	mrseq	r0, (UNDEF: 0)
     9b4:	6c010000 	stcvs	0, cr0, [r1], {-0}
     9b8:	00636269 	rsbeq	r6, r3, r9, ror #4
     9bc:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     9c0:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
     9c4:	432f6c61 	teqmi	pc, #24832	; 0x6100
     9c8:	616c6c65 	cmnvs	ip, r5, ror #24
     9cc:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
     9d0:	6f6e2d6d 	svcvs	0x006e2d6d
     9d4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     9d8:	2f696261 	svccs	0x00696261
     9dc:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
     9e0:	73632d33 	cmnvc	r3, #3264	; 0xcc0
     9e4:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
     9e8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     9ec:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     9f0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     9f4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     9f8:	61652d65 	cmnvs	r5, r5, ror #26
     9fc:	342f6962 	strtcc	r6, [pc], #-2402	; a04 <_start-0x75fc>
     a00:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
     a04:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     a08:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     a0c:	73552f00 	cmpvc	r5, #0, 30
     a10:	2f737265 	svccs	0x00737265
     a14:	61697262 	cmnvs	r9, r2, ror #4
     a18:	6e756a6e 	vsubvs.f32	s13, s10, s29
     a1c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     a20:	706f746b 	rsbvc	r7, pc, fp, ror #8
     a24:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
     a28:	2f6c6f6f 	svccs	0x006c6f6f
     a2c:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
     a30:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
     a34:	432f3032 	teqmi	pc, #50	; 0x32
     a38:	30343153 	eorscc	r3, r4, r3, asr r1
     a3c:	73632f45 	cmnvc	r3, #276	; 0x114
     a40:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
     a44:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
     a48:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 8ac <_start-0x7754>
     a4c:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
     a50:	61760000 	cmnvs	r6, r0
     a54:	6972702d 	ldmdbvs	r2!, {r0, r2, r3, r5, ip, sp, lr}^
     a58:	2e6b746e 	cdpcs	4, 6, cr7, cr11, cr14, {3}
     a5c:	00010063 	andeq	r0, r1, r3, rrx
     a60:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
     a64:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
     a68:	00020068 	andeq	r0, r2, r8, rrx
     a6c:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
     a70:	0300682e 	movweq	r6, #2094	; 0x82e
     a74:	623c0000 	eorsvs	r0, ip, #0
     a78:	746c6975 	strbtvc	r6, [ip], #-2421	; 0x975
     a7c:	3e6e692d 	cdpcc	9, 6, cr6, cr14, cr13, {1}
     a80:	00000000 	andeq	r0, r0, r0
     a84:	02050000 	andeq	r0, r5, #0
     a88:	00008e50 	andeq	r8, r0, r0, asr lr
     a8c:	01012603 	tsteq	r1, r3, lsl #12
     a90:	2d3113a5 	ldccs	3, cr1, [r1, #-660]!	; 0xfffffd6c
     a94:	02040200 	andeq	r0, r4, #0, 4
     a98:	0402002f 	streq	r0, [r2], #-47	; 0x2f
     a9c:	02002d02 	andeq	r2, r0, #2, 26	; 0x80
     aa0:	002f0204 	eoreq	r0, pc, r4, lsl #4
     aa4:	2d010402 	cfstrscs	mvf0, [r1, #-8]
     aa8:	14304c4c 	ldrtne	r4, [r0], #-3148	; 0xc4c
     aac:	004f2f4b 	subeq	r2, pc, fp, asr #30
     ab0:	67020402 	strvs	r0, [r2, -r2, lsl #8]
     ab4:	01040200 	mrseq	r0, R12_usr
     ab8:	304d4c65 	subcc	r4, sp, r5, ror #24
     abc:	30312fa0 	eorscc	r2, r1, r0, lsr #31
     ac0:	84162602 	ldrhi	r2, [r6], #-1538	; 0x602
     ac4:	02002c2d 	andeq	r2, r0, #11520	; 0x2d00
     ac8:	00300104 	eorseq	r0, r0, r4, lsl #2
     acc:	33010402 	movwcc	r0, #5122	; 0x1402
     ad0:	02006606 	andeq	r6, r0, #6291456	; 0x600000
     ad4:	002e0104 	eoreq	r0, lr, r4, lsl #2
     ad8:	06010402 	streq	r0, [r1], -r2, lsl #8
     adc:	2f672108 	svccs	0x00672108
     ae0:	03827303 	orreq	r7, r2, #201326592	; 0xc000000
     ae4:	02002e13 	andeq	r2, r0, #304	; 0x130
     ae8:	2e060104 	adfcss	f0, f6, f4
     aec:	01040200 	mrseq	r0, R12_usr
     af0:	4b6a9f06 	blmi	1aa8710 <__bss_end__+0x1a9cff0>
     af4:	032e6703 	teqeq	lr, #786432	; 0xc0000
     af8:	02002e21 	andeq	r2, r0, #528	; 0x210
     afc:	2e060104 	adfcss	f0, f6, f4
     b00:	01040200 	mrseq	r0, R12_usr
     b04:	02009f06 	andeq	r9, r0, #6, 30
     b08:	d96a0104 	stmdble	sl!, {r2, r8}^
     b0c:	7fa603f3 	svcvc	0x00a603f3
     b10:	002f2008 	eoreq	r2, pc, r8
     b14:	06010402 	streq	r0, [r1], -r2, lsl #8
     b18:	4bd7064a 	blmi	ff5c2448 <__bss_end__+0xff5b6d28>
     b1c:	00da032f 	sbcseq	r0, sl, pc, lsr #6
     b20:	484c83f2 	stmdami	ip, {r1, r4, r5, r6, r7, r8, r9, pc}^
     b24:	032e0e03 	teqeq	lr, #3, 28	; 0x30
     b28:	2f2f2e75 	svccs	0x002f2e75
     b2c:	2d2f4b84 	vstmdbcs	pc!, {d4-d5}
     b30:	2f30314d 	svccs	0x0030314d
     b34:	04020083 	streq	r0, [r2], #-131	; 0x83
     b38:	00a22c01 	adceq	r2, r2, r1, lsl #24
     b3c:	06010402 	streq	r0, [r1], -r2, lsl #8
     b40:	02d8064a 	sbcseq	r0, r8, #77594624	; 0x4a00000
     b44:	0e031636 	mcreq	6, 0, r1, cr3, cr6, {1}
     b48:	302108d6 	ldrdcc	r0, [r1], -r6	; <UNPREDICTABLE>
     b4c:	30f331f3 	ldrshtcc	r3, [r3], #19
     b50:	304b30f3 	strdcc	r3, [fp], #-3
     b54:	230830f3 	movwcs	r3, #33011	; 0x80f3
     b58:	02002f31 	andeq	r2, r0, #49, 30	; 0xc4
     b5c:	00650104 	rsbeq	r0, r5, r4, lsl #2
     b60:	06020402 	streq	r0, [r2], -r2, lsl #8
     b64:	0402004a 	streq	r0, [r2], #-74	; 0x4a
     b68:	42030601 	andmi	r0, r3, #1048576	; 0x100000
     b6c:	04020066 	streq	r0, [r2], #-102	; 0x66
     b70:	06660602 	strbteq	r0, [r6], -r2, lsl #12
     b74:	4a00c203 	bmi	31388 <__bss_end__+0x25c68>
     b78:	00100268 	andseq	r0, r0, r8, ror #4
     b7c:	00930101 	addseq	r0, r3, r1, lsl #2
     b80:	00020000 	andeq	r0, r2, r0
     b84:	0000007d 	andeq	r0, r0, sp, ror r0
     b88:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     b8c:	0101000d 	tsteq	r1, sp
     b90:	00000101 	andeq	r0, r0, r1, lsl #2
     b94:	00000100 	andeq	r0, r0, r0, lsl #2
     b98:	31736301 	cmncc	r3, r1, lsl #6
     b9c:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
     ba0:	00637273 	rsbeq	r7, r3, r3, ror r2
     ba4:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
     ba8:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
     bac:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
     bb0:	2f6e756a 	svccs	0x006e756a
     bb4:	6b736544 	blvs	1cda0cc <__bss_end__+0x1cce9ac>
     bb8:	2f706f74 	svccs	0x00706f74
     bbc:	6f686373 	svcvs	0x00686373
     bc0:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
     bc4:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
     bc8:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
     bcc:	53432f30 	movtpl	r2, #16176	; 0x3f30
     bd0:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
     bd4:	3173632f 	cmncc	r3, pc, lsr #6
     bd8:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
     bdc:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
     be0:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     be4:	00697062 	rsbeq	r7, r9, r2, rrx
     be8:	656c6300 	strbvs	r6, [ip, #-768]!	; 0x300
     bec:	722d6e61 	eorvc	r6, sp, #1552	; 0x610
     bf0:	6f6f6265 	svcvs	0x006f6265
     bf4:	00632e74 	rsbeq	r2, r3, r4, ror lr
     bf8:	72000001 	andvc	r0, r0, #1
     bfc:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
     c00:	00000200 	andeq	r0, r0, r0, lsl #4
     c04:	02050000 	andeq	r0, r5, #0
     c08:	00009348 	andeq	r9, r0, r8, asr #6
     c0c:	4b832f15 	blmi	fe0cc868 <__bss_end__+0xfe0c1148>
     c10:	01000602 	tsteq	r0, r2, lsl #12
     c14:	00012101 	andeq	r2, r1, r1, lsl #2
     c18:	f8000200 			; <UNDEFINED> instruction: 0xf8000200
     c1c:	02000000 	andeq	r0, r0, #0
     c20:	0d0efb01 	vstreq	d15, [lr, #-4]
     c24:	01010100 	mrseq	r0, (UNDEF: 17)
     c28:	00000001 	andeq	r0, r0, r1
     c2c:	01000001 	tsteq	r0, r1
     c30:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
     c34:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
     c38:	2f006372 	svccs	0x00006372
     c3c:	2f727375 	svccs	0x00727375
     c40:	61636f6c 	cmnvs	r3, ip, ror #30
     c44:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
     c48:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
     c4c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     c50:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     c54:	61652d65 	cmnvs	r5, r5, ror #26
     c58:	342f6962 	strtcc	r6, [pc], #-2402	; c60 <_start-0x73a0>
     c5c:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
     c60:	3173632d 	cmncc	r3, sp, lsr #6
     c64:	2f653037 	svccs	0x00653037
     c68:	2f62696c 	svccs	0x0062696c
     c6c:	2f636367 	svccs	0x00636367
     c70:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     c74:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     c78:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     c7c:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
     c80:	2f332e38 	svccs	0x00332e38
     c84:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     c88:	00656475 	rsbeq	r6, r5, r5, ror r4
     c8c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
     c90:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
     c94:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
     c98:	2f6e756a 	svccs	0x006e756a
     c9c:	6b736544 	blvs	1cda1b4 <__bss_end__+0x1ccea94>
     ca0:	2f706f74 	svccs	0x00706f74
     ca4:	6f686373 	svcvs	0x00686373
     ca8:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
     cac:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
     cb0:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
     cb4:	53432f30 	movtpl	r2, #16176	; 0x3f30
     cb8:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
     cbc:	3173632f 	cmncc	r3, pc, lsr #6
     cc0:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
     cc4:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
     cc8:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     ccc:	00697062 	rsbeq	r7, r9, r2, rrx
     cd0:	74736300 	ldrbtvc	r6, [r3], #-768	; 0x300
     cd4:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
     cd8:	00010063 	andeq	r0, r1, r3, rrx
     cdc:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
     ce0:	2d746e69 	ldclcs	14, cr6, [r4, #-420]!	; 0xfffffe5c
     ce4:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
     ce8:	00020068 	andeq	r0, r2, r8, rrx
     cec:	2d777300 	ldclcs	3, cr7, [r7, #-0]
     cf0:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
     cf4:	0100682e 	tsteq	r0, lr, lsr #16
     cf8:	6f630000 	svcvs	0x00630000
     cfc:	6f72746e 	svcvs	0x0072746e
     d00:	6c622d6c 	stclvs	13, cr2, [r2], #-432	; 0xfffffe50
     d04:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
     d08:	00010068 	andeq	r0, r1, r8, rrx
     d0c:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
     d10:	0300682e 	movweq	r6, #2094	; 0x82e
     d14:	00000000 	andeq	r0, r0, r0
     d18:	93700205 	cmnls	r0, #1342177280	; 0x50000000
     d1c:	4b170000 	blmi	5c0d24 <__bss_end__+0x5b5604>
     d20:	31326868 	teqcc	r2, r8, ror #16
     d24:	002f2d2f 	eoreq	r2, pc, pc, lsr #26
     d28:	49010402 	stmdbmi	r1, {r1, sl}
     d2c:	674b2f4f 	strbvs	r2, [fp, -pc, asr #30]
     d30:	4e678367 	cdpmi	3, 6, cr8, cr7, cr7, {3}
     d34:	0010022f 	andseq	r0, r0, pc, lsr #4
     d38:	00990101 	addseq	r0, r9, r1, lsl #2
     d3c:	00020000 	andeq	r0, r2, r0
     d40:	00000077 	andeq	r0, r0, r7, ror r0
     d44:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     d48:	0101000d 	tsteq	r1, sp
     d4c:	00000101 	andeq	r0, r0, r1, lsl #2
     d50:	00000100 	andeq	r0, r0, r0, lsl #2
     d54:	31736301 	cmncc	r3, r1, lsl #6
     d58:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
     d5c:	00637273 	rsbeq	r7, r3, r3, ror r2
     d60:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
     d64:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
     d68:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
     d6c:	2f6e756a 	svccs	0x006e756a
     d70:	6b736544 	blvs	1cda288 <__bss_end__+0x1cceb68>
     d74:	2f706f74 	svccs	0x00706f74
     d78:	6f686373 	svcvs	0x00686373
     d7c:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
     d80:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
     d84:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
     d88:	53432f30 	movtpl	r2, #16176	; 0x3f30
     d8c:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
     d90:	3173632f 	cmncc	r3, pc, lsr #6
     d94:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
     d98:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
     d9c:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     da0:	00697062 	rsbeq	r7, r9, r2, rrx
     da4:	62657200 	rsbvs	r7, r5, #0, 4
     da8:	2e746f6f 	cdpcs	15, 7, cr6, cr4, cr15, {3}
     dac:	00010063 	andeq	r0, r1, r3, rrx
     db0:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
     db4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     db8:	00000000 	andeq	r0, r0, r0
     dbc:	94200205 	strtls	r0, [r0], #-517	; 0x205
     dc0:	0d030000 	stceq	0, cr0, [r3, #-0]
     dc4:	2f311401 	svccs	0x00311401
     dc8:	4b2f1585 	blmi	bc63e4 <__bss_end__+0xbbacc4>
     dcc:	35672f4d 	strbcc	r2, [r7, #-3917]!	; 0xf4d
     dd0:	10026752 	andne	r6, r2, r2, asr r7
     dd4:	a3010100 	movwge	r0, #4352	; 0x1100
     dd8:	02000000 	andeq	r0, r0, #0
     ddc:	00007600 	andeq	r7, r0, r0, lsl #12
     de0:	fb010200 	blx	415ea <__bss_end__+0x35eca>
     de4:	01000d0e 	tsteq	r0, lr, lsl #26
     de8:	00010101 	andeq	r0, r1, r1, lsl #2
     dec:	00010000 	andeq	r0, r1, r0
     df0:	73630100 	cmnvc	r3, #0, 2
     df4:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
     df8:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
     dfc:	73552f00 	cmpvc	r5, #0, 30
     e00:	2f737265 	svccs	0x00737265
     e04:	61697262 	cmnvs	r9, r2, ror #4
     e08:	6e756a6e 	vsubvs.f32	s13, s10, s29
     e0c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     e10:	706f746b 	rsbvc	r7, pc, fp, ror #8
     e14:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
     e18:	2f6c6f6f 	svccs	0x006c6f6f
     e1c:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
     e20:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
     e24:	432f3032 	teqmi	pc, #50	; 0x32
     e28:	30343153 	eorscc	r3, r4, r3, asr r1
     e2c:	73632f45 	cmnvc	r3, #276	; 0x114
     e30:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
     e34:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
     e38:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; c9c <_start-0x7364>
     e3c:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
     e40:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
     e44:	2e72656d 	cdpcs	5, 7, cr6, cr2, cr13, {3}
     e48:	00010063 	andeq	r0, r1, r3, rrx
     e4c:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
     e50:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     e54:	00000000 	andeq	r0, r0, r0
     e58:	94940205 	ldrls	r0, [r4], #517	; 0x205
     e5c:	13160000 	tstne	r6, #0
     e60:	02002d2f 	andeq	r2, r0, #3008	; 0xbc0
     e64:	2e060104 	adfcss	f0, f6, f4
     e68:	2f316806 	svccs	0x00316806
     e6c:	31324d4b 	teqcc	r2, fp, asr #26
     e70:	2f4c4b30 	svccs	0x004c4b30
     e74:	842f2f6a 	strthi	r2, [pc], #-3946	; e7c <_start-0x7184>
     e78:	0008022f 	andeq	r0, r8, pc, lsr #4
     e7c:	01760101 	cmneq	r6, r1, lsl #2
     e80:	00020000 	andeq	r0, r2, r0
     e84:	00000120 	andeq	r0, r0, r0, lsr #2
     e88:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     e8c:	0101000d 	tsteq	r1, sp
     e90:	00000101 	andeq	r0, r0, r1, lsl #2
     e94:	00000100 	andeq	r0, r0, r0, lsl #2
     e98:	2d796d01 	ldclcs	13, cr6, [r9, #-4]!
     e9c:	00637273 	rsbeq	r7, r3, r3, ror r2
     ea0:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
     ea4:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
     ea8:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
     eac:	2f6e756a 	svccs	0x006e756a
     eb0:	6b736544 	blvs	1cda3c8 <__bss_end__+0x1cceca8>
     eb4:	2f706f74 	svccs	0x00706f74
     eb8:	6f686373 	svcvs	0x00686373
     ebc:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
     ec0:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
     ec4:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
     ec8:	53432f30 	movtpl	r2, #16176	; 0x3f30
     ecc:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
     ed0:	3173632f 	cmncc	r3, pc, lsr #6
     ed4:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
     ed8:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
     edc:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     ee0:	00697062 	rsbeq	r7, r9, r2, rrx
     ee4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     ee8:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
     eec:	432f6c61 	teqmi	pc, #24832	; 0x6100
     ef0:	616c6c65 	cmnvs	ip, r5, ror #24
     ef4:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
     ef8:	6f6e2d6d 	svcvs	0x006e2d6d
     efc:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     f00:	2f696261 	svccs	0x00696261
     f04:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
     f08:	73632d33 	cmnvc	r3, #3264	; 0xcc0
     f0c:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
     f10:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     f14:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     f18:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     f1c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     f20:	61652d65 	cmnvs	r5, r5, ror #26
     f24:	342f6962 	strtcc	r6, [pc], #-2402	; f2c <_start-0x70d4>
     f28:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
     f2c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     f30:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     f34:	73752f00 	cmnvc	r5, #0, 30
     f38:	6f6c2f72 	svcvs	0x006c2f72
     f3c:	2f6c6163 	svccs	0x006c6163
     f40:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
     f44:	612f7261 	teqvs	pc, r1, ror #4
     f48:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     f4c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     f50:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     f54:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
     f58:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
     f5c:	30373173 	eorscc	r3, r7, r3, ror r1
     f60:	72612f65 	rsbvc	r2, r1, #404	; 0x194
     f64:	6f6e2d6d 	svcvs	0x006e2d6d
     f68:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     f6c:	2f696261 	svccs	0x00696261
     f70:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     f74:	00656475 	rsbeq	r6, r5, r5, ror r4
     f78:	616d6b00 	cmnvs	sp, r0, lsl #22
     f7c:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
     f80:	0100632e 	tsteq	r0, lr, lsr #6
     f84:	70720000 	rsbsvc	r0, r2, r0
     f88:	00682e69 	rsbeq	r2, r8, r9, ror #28
     f8c:	73000002 	movwvc	r0, #2
     f90:	65646474 	strbvs	r6, [r4, #-1140]!	; 0x474
     f94:	00682e66 	rsbeq	r2, r8, r6, ror #28
     f98:	73000003 	movwvc	r0, #3
     f9c:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     fa0:	00682e67 	rsbeq	r2, r8, r7, ror #28
     fa4:	00000004 	andeq	r0, r0, r4
     fa8:	1c020500 	cfstr32ne	mvfx0, [r2], {-0}
     fac:	03000095 	movweq	r0, #149	; 0x95
     fb0:	002f0118 	eoreq	r0, pc, r8, lsl r1	; <UNPREDICTABLE>
     fb4:	06010402 	streq	r0, [r1], -r2, lsl #8
     fb8:	4bd80682 	blmi	ff6029c8 <__bss_end__+0xff5f72a8>
     fbc:	be6a834b 	cdplt	3, 6, cr8, cr10, cr11, {2}
     fc0:	0402002f 	streq	r0, [r2], #-47	; 0x2f
     fc4:	06820601 	streq	r0, [r2], r1, lsl #12
     fc8:	004b4bd8 	ldrdeq	r4, [fp], #-184	; 0xffffff48
     fcc:	06010402 	streq	r0, [r1], -r2, lsl #8
     fd0:	4bd7064a 	blmi	ff5c2900 <__bss_end__+0xff5b71e0>
     fd4:	032f3083 	teqeq	pc, #131	; 0x83
     fd8:	002fba0a 	eoreq	fp, pc, sl, lsl #20
     fdc:	06010402 	streq	r0, [r1], -r2, lsl #8
     fe0:	67d70682 	ldrbvs	r0, [r7, r2, lsl #13]
     fe4:	14c213f9 	strbne	r1, [r2], #1017	; 0x3f9
     fe8:	02002f84 	andeq	r2, r0, #132, 30	; 0x210
     fec:	82060104 	andhi	r0, r6, #4, 2
     ff0:	0267d706 	rsbeq	sp, r7, #1572864	; 0x180000
     ff4:	0101000c 	tsteq	r1, ip
     ff8:	00000345 	andeq	r0, r0, r5, asr #6
     ffc:	01bd0002 			; <UNDEFINED> instruction: 0x01bd0002
    1000:	01020000 	mrseq	r0, (UNDEF: 2)
    1004:	000d0efb 	strdeq	r0, [sp], -fp
    1008:	01010101 	tsteq	r1, r1, lsl #2
    100c:	01000000 	mrseq	r0, (UNDEF: 0)
    1010:	6d010000 	stcvs	0, cr0, [r1, #-0]
    1014:	72732d79 	rsbsvc	r2, r3, #7744	; 0x1e40
    1018:	552f0063 	strpl	r0, [pc, #-99]!	; fbd <_start-0x7043>
    101c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    1020:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    1024:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
    1028:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
    102c:	6f746b73 	svcvs	0x00746b73
    1030:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
    1034:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; e9c <_start-0x7164>
    1038:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
    103c:	31726574 	cmncc	r2, r4, ror r5
    1040:	2f303239 	svccs	0x00303239
    1044:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
    1048:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
    104c:	30343173 	eorscc	r3, r4, r3, ror r1
    1050:	30322d65 	eorscc	r2, r2, r5, ror #26
    1054:	2f6e6977 	svccs	0x006e6977
    1058:	7062696c 	rsbvc	r6, r2, ip, ror #18
    105c:	73632f69 	cmnvc	r3, #420	; 0x1a4
    1060:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
    1064:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
    1068:	73752f00 	cmnvc	r5, #0, 30
    106c:	6f6c2f72 	svcvs	0x006c2f72
    1070:	2f6c6163 	svccs	0x006c6163
    1074:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
    1078:	612f7261 	teqvs	pc, r1, ror #4
    107c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1080:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    1084:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1088:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
    108c:	632d332e 	teqvs	sp, #-1207959552	; 0xb8000000
    1090:	30373173 	eorscc	r3, r7, r3, ror r1
    1094:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    1098:	63672f62 	cmnvs	r7, #392	; 0x188
    109c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    10a0:	6f6e2d6d 	svcvs	0x006e2d6d
    10a4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
    10a8:	2f696261 	svccs	0x00696261
    10ac:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
    10b0:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
    10b4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    10b8:	552f0065 	strpl	r0, [pc, #-101]!	; 105b <_start-0x6fa5>
    10bc:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    10c0:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    10c4:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
    10c8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
    10cc:	6f746b73 	svcvs	0x00746b73
    10d0:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
    10d4:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; f3c <_start-0x70c4>
    10d8:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
    10dc:	31726574 	cmncc	r2, r4, ror r5
    10e0:	2f303239 	svccs	0x00303239
    10e4:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
    10e8:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
    10ec:	30343173 	eorscc	r3, r4, r3, ror r1
    10f0:	30322d65 	eorscc	r2, r2, r5, ror #26
    10f4:	2f6e6977 	svccs	0x006e6977
    10f8:	7062696c 	rsbvc	r6, r2, ip, ror #18
    10fc:	552f0069 	strpl	r0, [pc, #-105]!	; 109b <_start-0x6f65>
    1100:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    1104:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    1108:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
    110c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
    1110:	6f746b73 	svcvs	0x00746b73
    1114:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
    1118:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; f80 <_start-0x7080>
    111c:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
    1120:	31726574 	cmncc	r2, r4, ror r5
    1124:	2f303239 	svccs	0x00303239
    1128:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
    112c:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
    1130:	30343173 	eorscc	r3, r4, r3, ror r1
    1134:	30322d65 	eorscc	r2, r2, r5, ror #26
    1138:	2f6e6977 	svccs	0x006e6977
    113c:	7062696c 	rsbvc	r6, r2, ip, ror #18
    1140:	696c2f69 	stmdbvs	ip!, {r0, r3, r5, r6, r8, r9, sl, fp, sp}^
    1144:	00006362 	andeq	r6, r0, r2, ror #6
    1148:	752d7773 	strvc	r7, [sp, #-1907]!	; 0x773
    114c:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    1150:	00010063 	andeq	r0, r1, r3, rrx
    1154:	63796300 	cmnvs	r9, #0, 6
    1158:	752d656c 	strvc	r6, [sp, #-1388]!	; 0x56c
    115c:	2e6c6974 	mcrcs	9, 3, r6, cr12, cr4, {3}
    1160:	00020068 	andeq	r0, r2, r8, rrx
    1164:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    1168:	2d746e69 	ldclcs	14, cr6, [r4, #-420]!	; 0xfffffe5c
    116c:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
    1170:	00030068 	andeq	r0, r3, r8, rrx
    1174:	2d777300 	ldclcs	3, cr7, [r7, #-0]
    1178:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
    117c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1180:	74730000 	ldrbtvc	r0, [r3], #-0
    1184:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
    1188:	0300682e 	movweq	r6, #2094	; 0x82e
    118c:	70670000 	rsbvc	r0, r7, r0
    1190:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    1194:	00000200 	andeq	r0, r0, r0, lsl #4
    1198:	2e697072 	mcrcs	0, 3, r7, cr9, cr2, {3}
    119c:	00040068 	andeq	r0, r4, r8, rrx
    11a0:	2d617600 	stclcs	6, cr7, [r1, #-0]
    11a4:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    11a8:	682e6b74 	stmdavs	lr!, {r2, r4, r5, r6, r8, r9, fp, sp, lr}
    11ac:	00000500 	andeq	r0, r0, r0, lsl #10
    11b0:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
    11b4:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
    11b8:	00003e6e 	andeq	r3, r0, lr, ror #28
    11bc:	00000000 	andeq	r0, r0, r0
    11c0:	97040205 	strls	r0, [r4, -r5, lsl #4]
    11c4:	4c1a0000 	ldcmi	0, cr0, [sl], {-0}
    11c8:	0204302f 	andeq	r3, r4, #47	; 0x2f
    11cc:	032e0b03 	teqeq	lr, #3072	; 0xc00
    11d0:	01046673 	tsteq	r4, r3, ror r6
    11d4:	35020488 	strcc	r0, [r2, #-1160]	; 0x488
    11d8:	04667303 	strbteq	r7, [r6], #-771	; 0x303
    11dc:	02048a01 	andeq	r8, r4, #4096	; 0x1000
    11e0:	66730333 			; <UNDEFINED> instruction: 0x66730333
    11e4:	0a030104 	beq	c15fc <__bss_end__+0xb5edc>
    11e8:	31020482 	smlabbcc	r2, r2, r4, r0
    11ec:	04667303 	strbteq	r7, [r6], #-771	; 0x303
    11f0:	820c0301 	andhi	r0, ip, #67108864	; 0x4000000
    11f4:	032f0204 	teqeq	pc, #4, 4	; 0x40000000
    11f8:	01046673 	tsteq	r4, r3, ror r6
    11fc:	04820e03 	streq	r0, [r2], #3587	; 0xe03
    1200:	73032d02 	movwvc	r2, #15618	; 0x3d02
    1204:	03010466 	movweq	r0, #5222	; 0x1466
    1208:	02048210 	andeq	r8, r4, #16, 4
    120c:	6673032b 	ldrbtvs	r0, [r3], -fp, lsr #6
    1210:	12030104 	andne	r0, r3, #4, 2
    1214:	29020482 	stmdbcs	r2, {r1, r7, sl}
    1218:	04667303 	strbteq	r7, [r6], #-771	; 0x303
    121c:	82140301 	andshi	r0, r4, #67108864	; 0x4000000
    1220:	79030204 	stmdbvc	r3, {r2, r9}
    1224:	6673032e 	ldrbtvs	r0, [r3], -lr, lsr #6
    1228:	16030104 	strne	r0, [r3], -r4, lsl #2
    122c:	03020482 	movweq	r0, #9346	; 0x2482
    1230:	73032e77 	movwvc	r2, #15991	; 0x3e77
    1234:	03010466 	movweq	r0, #5222	; 0x1466
    1238:	10038218 	andne	r8, r3, r8, lsl r2
    123c:	034d4b2e 	movteq	r4, #56110	; 0xdb2e
    1240:	844c2e70 	strbhi	r2, [ip], #-3696	; 0xe70
    1244:	0d034883 	stceq	8, cr4, [r3, #-524]	; 0xfffffdf4
    1248:	33314e2e 	teqcc	r1, #736	; 0x2e0
    124c:	48030204 	stmdami	r3, {r2, r9}
    1250:	0301042e 	movweq	r0, #5166	; 0x142e
    1254:	042f823a 	strteq	r8, [pc], #-570	; 125c <_start-0x6da4>
    1258:	66450302 	strbvs	r0, [r5], -r2, lsl #6
    125c:	3d030104 	stfccs	f0, [r3, #-16]
    1260:	02042f82 	andeq	r2, r4, #520	; 0x208
    1264:	04824203 	streq	r4, [r2], #515	; 0x203
    1268:	00c00301 	sbceq	r0, r0, r1, lsl #6
    126c:	02042f82 	andeq	r2, r4, #520	; 0x208
    1270:	827fbf03 	rsbshi	fp, pc, #3, 30
    1274:	c3030104 	movwgt	r0, #12548	; 0x3104
    1278:	042f8200 	strteq	r8, [pc], #-512	; 1280 <_start-0x6d80>
    127c:	7fbc0302 	svcvc	0x00bc0302
    1280:	03010482 	movweq	r0, #5250	; 0x1482
    1284:	2f8200c6 	svccs	0x008200c6
    1288:	b9030204 	stmdblt	r3, {r2, r9}
    128c:	0104827f 	tsteq	r4, pc, ror r2
    1290:	8200c903 	andhi	ip, r0, #49152	; 0xc000
    1294:	0302042f 	movweq	r0, #9263	; 0x242f
    1298:	04827fb6 	streq	r7, [r2], #4022	; 0xfb6
    129c:	00cc0301 	sbceq	r0, ip, r1, lsl #6
    12a0:	02042f82 	andeq	r2, r4, #520	; 0x208
    12a4:	827fb303 	rsbshi	fp, pc, #201326592	; 0xc000000
    12a8:	d0030104 	andle	r0, r3, r4, lsl #2
    12ac:	4c038200 	sfmmi	f0, 1, [r3], {-0}
    12b0:	83844c82 	orrhi	r4, r4, #33280	; 0x8200
    12b4:	2e360348 	cdpcs	3, 3, cr0, cr6, cr8, {2}
    12b8:	4a54034e 	bmi	1501ff8 <__bss_end__+0x14f68d8>
    12bc:	324a2903 	subcc	r2, sl, #49152	; 0xc000
    12c0:	02009f34 	andeq	r9, r0, #52, 30	; 0xd0
    12c4:	4a060104 	bmi	1816dc <__bss_end__+0x175fbc>
    12c8:	4b4ed706 	blmi	13b6ee8 <__bss_end__+0x13ab7c8>
    12cc:	02002cbb 	andeq	r2, r0, #47872	; 0xbb00
    12d0:	2e060104 	adfcss	f0, f6, f4
    12d4:	a44c6d06 	strbge	r6, [ip], #-3334	; 0xd06
    12d8:	04020084 	streq	r0, [r2], #-132	; 0x84
    12dc:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    12e0:	02004dd7 	andeq	r4, r0, #13760	; 0x35c0
    12e4:	004b0204 	subeq	r0, fp, r4, lsl #4
    12e8:	81020402 	tsthi	r2, r2, lsl #8
    12ec:	01040200 	mrseq	r0, R12_usr
    12f0:	4d062e06 	stcmi	14, cr2, [r6, #-24]	; 0xffffffe8
    12f4:	4bbca54c 	blmi	fef2a82c <__bss_end__+0xfef1f10c>
    12f8:	2f6a4b4b 	svccs	0x006a4b4b
    12fc:	01040200 	mrseq	r0, R12_usr
    1300:	00828206 	addeq	r8, r2, r6, lsl #4
    1304:	9e040402 	cdpls	4, 0, cr0, cr4, cr2, {0}
    1308:	01040200 	mrseq	r0, R12_usr
    130c:	88d9064a 	ldmhi	r9, {r1, r3, r6, r9, sl}^
    1310:	4b4b2fbd 	blmi	12cd20c <__bss_end__+0x12c1aec>
    1314:	00674008 	rsbeq	r4, r7, r8
    1318:	2f020402 	svccs	0x00020402
    131c:	02040200 	andeq	r0, r4, #0, 4
    1320:	04020049 	streq	r0, [r2], #-73	; 0x49
    1324:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    1328:	4b863468 	blmi	fe18e4d0 <__bss_end__+0xfe182db0>
    132c:	040200a0 	streq	r0, [r2], #-160	; 0xa0
    1330:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    1334:	220868d7 	andcs	r6, r8, #14090240	; 0xd70000
    1338:	d84b674b 	stmdale	fp, {r0, r1, r3, r6, r8, r9, sl, sp, lr}^
    133c:	01000a02 	tsteq	r0, r2, lsl #20
    1340:	00010101 	andeq	r0, r1, r1, lsl #2
    1344:	ca000200 	bgt	1b4c <_start-0x64b4>
    1348:	02000000 	andeq	r0, r0, #0
    134c:	0d0efb01 	vstreq	d15, [lr, #-4]
    1350:	01010100 	mrseq	r0, (UNDEF: 17)
    1354:	00000001 	andeq	r0, r0, r1
    1358:	01000001 	tsteq	r0, r1
    135c:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
    1360:	2f006372 	svccs	0x00006372
    1364:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1368:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
    136c:	6a6e6169 	bvs	1b99918 <__bss_end__+0x1b8e1f8>
    1370:	442f6e75 	strtmi	r6, [pc], #-3701	; 1378 <_start-0x6c88>
    1374:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
    1378:	732f706f 	teqvc	pc, #111	; 0x6f
    137c:	6f6f6863 	svcvs	0x006f6863
    1380:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
    1384:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1388:	30323931 	eorscc	r3, r2, r1, lsr r9
    138c:	3153432f 	cmpcc	r3, pc, lsr #6
    1390:	2f453034 	svccs	0x00453034
    1394:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
    1398:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
    139c:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
    13a0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    13a4:	632f6970 	teqvs	pc, #112, 18	; 0x1c0000
    13a8:	30343173 	eorscc	r3, r4, r3, ror r1
    13ac:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
    13b0:	552f0063 	strpl	r0, [pc, #-99]!	; 1355 <_start-0x6cab>
    13b4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    13b8:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    13bc:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
    13c0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
    13c4:	6f746b73 	svcvs	0x00746b73
    13c8:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
    13cc:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 1234 <_start-0x6dcc>
    13d0:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
    13d4:	31726574 	cmncc	r2, r4, ror r5
    13d8:	2f303239 	svccs	0x00303239
    13dc:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
    13e0:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
    13e4:	30343173 	eorscc	r3, r4, r3, ror r1
    13e8:	30322d65 	eorscc	r2, r2, r5, ror #26
    13ec:	2f6e6977 	svccs	0x006e6977
    13f0:	7062696c 	rsbvc	r6, r2, ip, ror #18
    13f4:	75000069 	strvc	r0, [r0, #-105]	; 0x69
    13f8:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    13fc:	00010063 	andeq	r0, r1, r3, rrx
    1400:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    1404:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    1408:	72000002 	andvc	r0, r0, #2
    140c:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
    1410:	00000300 	andeq	r0, r0, r0, lsl #6
    1414:	02050000 	andeq	r0, r5, #0
    1418:	00009d24 	andeq	r9, r0, r4, lsr #26
    141c:	30013603 	andcc	r3, r1, r3, lsl #12
    1420:	306d6733 	rsbcc	r6, sp, r3, lsr r7
    1424:	676730d8 			; <UNDEFINED> instruction: 0x676730d8
    1428:	68676767 	stmdavs	r7!, {r0, r1, r2, r5, r6, r8, r9, sl, sp, lr}^
    142c:	6a672f86 	bvs	19cd24c <__bss_end__+0x19c1b2c>
    1430:	69676730 	stmdbvs	r7!, {r4, r5, r8, r9, sl, sp, lr}^
    1434:	4c6a672f 	stclmi	7, cr6, [sl], #-188	; 0xffffff44
    1438:	2f2fc167 	svccs	0x002fc167
    143c:	49682f30 	stmdbmi	r8!, {r4, r5, r8, r9, sl, fp, sp}^
    1440:	00020230 	andeq	r0, r2, r0, lsr r2
    1444:	00d60101 	sbcseq	r0, r6, r1, lsl #2
    1448:	00020000 	andeq	r0, r2, r0
    144c:	00000097 	muleq	r0, r7, r0
    1450:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1454:	0101000d 	tsteq	r1, sp
    1458:	00000101 	andeq	r0, r0, r1, lsl #2
    145c:	00000100 	andeq	r0, r0, r0, lsl #2
    1460:	31736301 	cmncc	r3, r1, lsl #6
    1464:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
    1468:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    146c:	70757272 	rsbsvc	r7, r5, r2, ror r2
    1470:	552f0074 	strpl	r0, [pc, #-116]!	; 1404 <_start-0x6bfc>
    1474:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    1478:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    147c:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
    1480:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
    1484:	6f746b73 	svcvs	0x00746b73
    1488:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
    148c:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 12f4 <_start-0x6d0c>
    1490:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
    1494:	31726574 	cmncc	r2, r4, ror r5
    1498:	2f303239 	svccs	0x00303239
    149c:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
    14a0:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
    14a4:	30343173 	eorscc	r3, r4, r3, ror r1
    14a8:	30322d65 	eorscc	r2, r2, r5, ror #26
    14ac:	2f6e6977 	svccs	0x006e6977
    14b0:	7062696c 	rsbvc	r6, r2, ip, ror #18
    14b4:	69000069 	stmdbvs	r0, {r0, r3, r5, r6}
    14b8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    14bc:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
    14c0:	2e632d73 	mcrcs	13, 3, r2, cr3, cr3, {3}
    14c4:	00010063 	andeq	r0, r1, r3, rrx
    14c8:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
    14cc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    14d0:	70720000 	rsbsvc	r0, r2, r0
    14d4:	6e692d69 	cdpvs	13, 6, cr2, cr9, cr9, {3}
    14d8:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
    14dc:	73747075 	cmnvc	r4, #117	; 0x75
    14e0:	0100682e 	tsteq	r0, lr, lsr #16
    14e4:	00000000 	andeq	r0, r0, r0
    14e8:	9e780205 	cdpls	2, 7, cr0, cr8, cr5, {0}
    14ec:	31160000 	tstcc	r6, r0
    14f0:	0e036767 	cdpeq	7, 0, cr6, cr3, cr7, {3}
    14f4:	2d2f832e 	stccs	3, cr8, [pc, #-184]!	; 1444 <_start-0x6bbc>
    14f8:	02040200 	andeq	r0, r4, #0, 4
    14fc:	0402002f 	streq	r0, [r2], #-47	; 0x2f
    1500:	02006502 	andeq	r6, r0, #8388608	; 0x800000
    1504:	2e060104 	adfcss	f0, f6, f4
    1508:	67a24c06 	strvs	r4, [r2, r6, lsl #24]!
    150c:	0867b008 	stmdaeq	r7!, {r3, ip, sp, pc}^
    1510:	ae0867ae 	cdpge	7, 0, cr6, cr8, cr14, {5}
    1514:	67ae0867 	strvs	r0, [lr, r7, ror #16]!
    1518:	0267ae08 	rsbeq	sl, r7, #8, 28	; 0x80
    151c:	0101001c 	tsteq	r1, ip, lsl r0
    1520:	0000012d 	andeq	r0, r0, sp, lsr #2
    1524:	010d0002 	tsteq	sp, r2
    1528:	01020000 	mrseq	r0, (UNDEF: 2)
    152c:	000d0efb 	strdeq	r0, [sp], -fp
    1530:	01010101 	tsteq	r1, r1, lsl #2
    1534:	01000000 	mrseq	r0, (UNDEF: 0)
    1538:	63010000 	movwvs	r0, #4096	; 0x1000
    153c:	30343173 	eorscc	r3, r4, r3, ror r1
    1540:	6e692d65 	cdpvs	13, 6, cr2, cr9, cr5, {3}
    1544:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
    1548:	00747075 	rsbseq	r7, r4, r5, ror r0
    154c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    1550:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
    1554:	432f6c61 	teqmi	pc, #24832	; 0x6100
    1558:	616c6c65 	cmnvs	ip, r5, ror #24
    155c:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
    1560:	6f6e2d6d 	svcvs	0x006e2d6d
    1564:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
    1568:	2f696261 	svccs	0x00696261
    156c:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
    1570:	73632d33 	cmnvc	r3, #3264	; 0xcc0
    1574:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
    1578:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    157c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    1580:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    1584:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1588:	61652d65 	cmnvs	r5, r5, ror #26
    158c:	342f6962 	strtcc	r6, [pc], #-2402	; 1594 <_start-0x6a6c>
    1590:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
    1594:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1598:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    159c:	73552f00 	cmpvc	r5, #0, 30
    15a0:	2f737265 	svccs	0x00737265
    15a4:	61697262 	cmnvs	r9, r2, ror #4
    15a8:	6e756a6e 	vsubvs.f32	s13, s10, s29
    15ac:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    15b0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    15b4:	6863732f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, sp, lr}^
    15b8:	2f6c6f6f 	svccs	0x006c6f6f
    15bc:	746e6957 	strbtvc	r6, [lr], #-2391	; 0x957
    15c0:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
    15c4:	432f3032 	teqmi	pc, #50	; 0x32
    15c8:	30343153 	eorscc	r3, r4, r3, asr r1
    15cc:	73632f45 	cmnvc	r3, #276	; 0x114
    15d0:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
    15d4:	7730322d 	ldrvc	r3, [r0, -sp, lsr #4]!
    15d8:	6c2f6e69 	stcvs	14, cr6, [pc], #-420	; 143c <_start-0x6bc4>
    15dc:	69706269 	ldmdbvs	r0!, {r0, r3, r5, r6, r9, sp, lr}^
    15e0:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
    15e4:	2d72656d 	cfldr64cs	mvdx6, [r2, #-436]!	; 0xfffffe4c
    15e8:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    15ec:	70757272 	rsbsvc	r7, r5, r2, ror r2
    15f0:	00632e74 	rsbeq	r2, r3, r4, ror lr
    15f4:	72000001 	andvc	r0, r0, #1
    15f8:	612d6970 	teqvs	sp, r0, ror r9
    15fc:	69746d72 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    1600:	2e72656d 	cdpcs	5, 7, cr6, cr2, cr13, {3}
    1604:	00010068 	andeq	r0, r1, r8, rrx
    1608:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    160c:	2d746e69 	ldclcs	14, cr6, [r4, #-420]!	; 0xfffffe5c
    1610:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
    1614:	00020068 	andeq	r0, r2, r8, rrx
    1618:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
    161c:	746e692d 	strbtvc	r6, [lr], #-2349	; 0x92d
    1620:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
    1624:	2e737470 	mrccs	4, 3, r7, cr3, cr0, {3}
    1628:	00010068 	andeq	r0, r1, r8, rrx
    162c:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
    1630:	0300682e 	movweq	r6, #2094	; 0x82e
    1634:	00000000 	andeq	r0, r0, r0
    1638:	a0780205 	rsbsge	r0, r8, r5, lsl #4
    163c:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
    1640:	4a0b0301 	bmi	2c224c <__bss_end__+0x2b6b2c>
    1644:	6646034b 	strbvs	r0, [r6], -fp, asr #6
    1648:	6a6a324b 	bvs	1a8df7c <__bss_end__+0x1a8285c>
    164c:	01000e02 	tsteq	r0, r2, lsl #28
    1650:	00017801 	andeq	r7, r1, r1, lsl #16
    1654:	ca000200 	bgt	1e5c <_start-0x61a4>
    1658:	02000000 	andeq	r0, r0, #0
    165c:	0d0efb01 	vstreq	d15, [lr, #-4]
    1660:	01010100 	mrseq	r0, (UNDEF: 17)
    1664:	00000001 	andeq	r0, r0, r1
    1668:	01000001 	tsteq	r0, r1
    166c:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
    1670:	2f006372 	svccs	0x00006372
    1674:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1678:	72622f73 	rsbvc	r2, r2, #460	; 0x1cc
    167c:	6a6e6169 	bvs	1b99c28 <__bss_end__+0x1b8e508>
    1680:	442f6e75 	strtmi	r6, [pc], #-3701	; 1688 <_start-0x6978>
    1684:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
    1688:	732f706f 	teqvc	pc, #111	; 0x6f
    168c:	6f6f6863 	svcvs	0x006f6863
    1690:	69572f6c 	ldmdbvs	r7, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
    1694:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1698:	30323931 	eorscc	r3, r2, r1, lsr r9
    169c:	3153432f 	cmpcc	r3, pc, lsr #6
    16a0:	2f453034 	svccs	0x00453034
    16a4:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
    16a8:	322d6530 	eorcc	r6, sp, #48, 10	; 0xc000000
    16ac:	6e697730 	mcrvs	7, 3, r7, cr9, cr0, {1}
    16b0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    16b4:	632f6970 	teqvs	pc, #112, 18	; 0x1c0000
    16b8:	30343173 	eorscc	r3, r4, r3, ror r1
    16bc:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
    16c0:	552f0063 	strpl	r0, [pc, #-99]!	; 1665 <_start-0x699b>
    16c4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    16c8:	6972622f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    16cc:	756a6e61 	strbvc	r6, [sl, #-3681]!	; 0xe61
    16d0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xf6e
    16d4:	6f746b73 	svcvs	0x00746b73
    16d8:	63732f70 	cmnvs	r3, #112, 30	; 0x1c0
    16dc:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 1544 <_start-0x6abc>
    16e0:	6e69572f 	cdpvs	7, 6, cr5, cr9, cr15, {1}
    16e4:	31726574 	cmncc	r2, r4, ror r5
    16e8:	2f303239 	svccs	0x00303239
    16ec:	34315343 	ldrtcc	r5, [r1], #-835	; 0x343
    16f0:	632f4530 	teqvs	pc, #48, 10	; 0xc000000
    16f4:	30343173 	eorscc	r3, r4, r3, ror r1
    16f8:	30322d65 	eorscc	r2, r2, r5, ror #26
    16fc:	2f6e6977 	svccs	0x006e6977
    1700:	7062696c 	rsbvc	r6, r2, ip, ror #18
    1704:	67000069 	strvs	r0, [r0, -r9, rrx]
    1708:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
    170c:	00010063 	andeq	r0, r1, r3, rrx
    1710:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    1714:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    1718:	72000002 	andvc	r0, r0, #2
    171c:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
    1720:	00000300 	andeq	r0, r0, r0, lsl #6
    1724:	02050000 	andeq	r0, r5, #0
    1728:	0000a210 	andeq	sl, r0, r0, lsl r2
    172c:	4e013e03 	cdpmi	14, 0, cr3, cr1, cr3, {0}
    1730:	21086950 	tstcs	r8, r0, asr r9
    1734:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
    1738:	4b326767 	blmi	c9b4dc <__bss_end__+0xc8fdbc>
    173c:	31dc2208 	bicscc	r2, ip, r8, lsl #4
    1740:	504e1351 	subpl	r1, lr, r1, asr r3
    1744:	5031be30 	eorspl	fp, r1, r0, lsr lr
    1748:	304f4d13 	subcc	r4, pc, r3, lsl sp	; <UNPREDICTABLE>
    174c:	69504cc0 	ldmdbvs	r0, {r6, r7, sl, fp, lr}^
    1750:	67672108 	strbvs	r2, [r7, -r8, lsl #2]!
    1754:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
    1758:	21084b32 	tstcs	r8, r2, lsr fp
    175c:	2f504ca4 	svccs	0x00504ca4
    1760:	75036984 	strvc	r6, [r3, #-2436]	; 0x984
    1764:	2e0c0382 	cdpcs	3, 0, cr0, cr12, cr2, {4}
    1768:	4b4e304d 	blmi	138d8a4 <__bss_end__+0x1382184>
    176c:	6b6a4d4c 	blvs	1a94ca4 <__bss_end__+0x1a89584>
    1770:	67210869 	strvs	r0, [r1, -r9, ror #16]!
    1774:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
    1778:	084b3267 	stmdaeq	fp, {r0, r1, r2, r5, r6, r9, ip, sp}^
    177c:	ba1a0322 	blt	68240c <__bss_end__+0x676cec>
    1780:	2f4c9f31 	svccs	0x004c9f31
    1784:	2f4e4d52 	svccs	0x004e4d52
    1788:	684b674b 	stmdavs	fp, {r0, r1, r3, r6, r8, r9, sl, sp, lr}^
    178c:	2f4c6767 	svccs	0x004c6767
    1790:	6e4b2f67 	cdpvs	15, 4, cr2, cr11, cr7, {3}
    1794:	4b2f4e4c 	blmi	bd50cc <__bss_end__+0xbc99ac>
    1798:	67684b67 	strbvs	r4, [r8, -r7, ror #22]!
    179c:	672f4c67 	strvs	r4, [pc, -r7, ror #24]!
    17a0:	4b6d4b2f 	blmi	1b54464 <__bss_end__+0x1b48d44>
    17a4:	674b2f4e 	strbvs	r2, [fp, -lr, asr #30]
    17a8:	01040200 	mrseq	r0, R12_usr
    17ac:	68066606 	stmdavs	r6, {r1, r2, r9, sl, sp, lr}
    17b0:	02002f9f 	andeq	r2, r0, #636	; 0x27c
    17b4:	4a060104 	bmi	181bcc <__bss_end__+0x1764ac>
    17b8:	032f6806 	teqeq	pc, #393216	; 0x60000
    17bc:	0e034a73 	mcreq	10, 0, r4, cr3, cr3, {3}
    17c0:	4e4c4d2e 	cdpmi	13, 4, cr4, cr12, cr14, {1}
    17c4:	bcbc4b2f 	fldmiaxlt	ip!, {d4-d26}	;@ Deprecated
    17c8:	01000602 	tsteq	r0, r2, lsl #12
    17cc:	00012801 	andeq	r2, r1, r1, lsl #16
    17d0:	0d000200 	sfmeq	f0, 4, [r0, #-0]
    17d4:	02000001 	andeq	r0, r0, #1
    17d8:	0d0efb01 	vstreq	d15, [lr, #-4]
    17dc:	01010100 	mrseq	r0, (UNDEF: 17)
    17e0:	00000001 	andeq	r0, r0, r1
    17e4:	01000001 	tsteq	r0, r1
    17e8:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
    17ec:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
    17f0:	2f006372 	svccs	0x00006372
    17f4:	2f727375 	svccs	0x00727375
    17f8:	61636f6c 	cmnvs	r3, ip, ror #30
    17fc:	65432f6c 	strbvs	r2, [r3, #-3948]	; 0xf6c
    1800:	72616c6c 	rsbvc	r6, r1, #108, 24	; 0x6c00
    1804:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    1808:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    180c:	61652d65 	cmnvs	r5, r5, ror #26
    1810:	342f6962 	strtcc	r6, [pc], #-2402	; 1818 <_start-0x67e8>
    1814:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
    1818:	3173632d 	cmncc	r3, sp, lsr #6
    181c:	2f653037 	svccs	0x00653037
    1820:	2f62696c 	svccs	0x0062696c
    1824:	2f636367 	svccs	0x00636367
    1828:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    182c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    1830:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    1834:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
    1838:	2f332e38 	svccs	0x00332e38
    183c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1840:	00656475 	rsbeq	r6, r5, r5, ror r4
    1844:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    1848:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
    184c:	432f6c61 	teqmi	pc, #24832	; 0x6100
    1850:	616c6c65 	cmnvs	ip, r5, ror #24
    1854:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
    1858:	6f6e2d6d 	svcvs	0x006e2d6d
    185c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
    1860:	2f696261 	svccs	0x00696261
    1864:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
    1868:	73632d33 	cmnvc	r3, #3264	; 0xcc0
    186c:	65303731 	ldrvs	r3, [r0, #-1841]!	; 0x731
    1870:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    1874:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1878:	61652d65 	cmnvs	r5, r5, ror #26
    187c:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    1880:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    1884:	00006564 	andeq	r6, r0, r4, ror #10
    1888:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xf63
    188c:	2d6c6f72 	stclcs	15, cr6, [ip, #-456]!	; 0xfffffe38
    1890:	636f6c62 	cmnvs	pc, #25088	; 0x6200
    1894:	00632e6b 	rsbeq	r2, r3, fp, ror #28
    1898:	73000001 	movwvc	r0, #1
    189c:	65646474 	strbvs	r6, [r4, #-1140]!	; 0x474
    18a0:	00682e66 	rsbeq	r2, r8, r6, ror #28
    18a4:	73000002 	movwvc	r0, #2
    18a8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    18ac:	63672d74 	cmnvs	r7, #116, 26	; 0x1d00
    18b0:	00682e63 	rsbeq	r2, r8, r3, ror #28
    18b4:	73000002 	movwvc	r0, #2
    18b8:	61752d77 	cmnvs	r5, r7, ror sp
    18bc:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
    18c0:	00000100 	andeq	r0, r0, r0, lsl #2
    18c4:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xf63
    18c8:	2d6c6f72 	stclcs	15, cr6, [ip, #-456]!	; 0xfffffe38
    18cc:	636f6c62 	cmnvs	pc, #25088	; 0x6200
    18d0:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    18d4:	73000001 	movwvc	r0, #1
    18d8:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    18dc:	00682e67 	rsbeq	r2, r8, r7, ror #28
    18e0:	00000003 	andeq	r0, r0, r3
    18e4:	78020500 	stmdavc	r2, {r8, sl}
    18e8:	160000a7 	strne	r0, [r0], -r7, lsr #1
    18ec:	4c688330 	stclmi	3, cr8, [r8], #-192	; 0xffffff40
    18f0:	2f4b9f14 	svccs	0x004b9f14
    18f4:	01000402 	tsteq	r0, r2, lsl #8
    18f8:	Address 0x00000000000018f8 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	5f697072 	svcpl	0x00697072
   4:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
   8:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
   c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
  10:	6572705f 	ldrbvs	r7, [r2, #-95]!	; 0x5f
  14:	74706d65 	ldrbtvc	r6, [r0], #-3429	; 0xd65
  18:	00657669 	rsbeq	r7, r5, r9, ror #12
  1c:	5f697072 	svcpl	0x00697072
  20:	74697865 	strbtvc	r7, [r9], #-2149	; 0x865
  24:	6572705f 	ldrbvs	r7, [r2, #-95]!	; 0x5f
  28:	74706d65 	ldrbtvc	r6, [r0], #-3429	; 0xd65
  2c:	00657669 	rsbeq	r7, r5, r9, ror #12
  30:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
  34:	7473006e 	ldrbtvc	r0, [r3], #-110	; 0x6e
  38:	006b6361 	rsbeq	r6, fp, r1, ror #6
  3c:	5f697072 	svcpl	0x00697072
  40:	5f6d7261 	svcpl	0x006d7261
  44:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
  48:	00745f72 	rsbseq	r5, r4, r2, ror pc
  4c:	5f697072 	svcpl	0x00697072
  50:	65657270 	strbvs	r7, [r5, #-624]!	; 0x270
  54:	6974706d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
  58:	745f6576 	ldrbvc	r6, [pc], #-1398	; 60 <_start-0x7fa0>
  5c:	61657268 	cmnvs	r5, r8, ror #4
  60:	00745f64 	rsbseq	r5, r4, r4, ror #30
  64:	20554e47 	subscs	r4, r5, r7, asr #28
  68:	2e342043 	cdpcs	0, 3, cr2, cr4, cr3, {2}
  6c:	20332e38 	eorscs	r2, r3, r8, lsr lr
  70:	70636d2d 	rsbvc	r6, r3, sp, lsr #26
  74:	72613d75 	rsbvc	r3, r1, #7488	; 0x1d40
  78:	3731316d 	ldrcc	r3, [r1, -sp, ror #2]!
  7c:	667a6a36 			; <UNDEFINED> instruction: 0x667a6a36
  80:	2d20732d 	stccs	3, cr7, [r0, #-180]!	; 0xffffff4c
  84:	6e75746d 	cdpvs	4, 7, cr7, cr5, cr13, {3}
  88:	72613d65 	rsbvc	r3, r1, #6464	; 0x1940
  8c:	3731316d 	ldrcc	r3, [r1, -sp, ror #2]!
  90:	667a6a36 			; <UNDEFINED> instruction: 0x667a6a36
  94:	2d20732d 	stccs	3, cr7, [r0, #-180]!	; 0xffffff4c
  98:	62646767 	rsbvs	r6, r4, #27000832	; 0x19c0000
  9c:	674f2d20 	strbvs	r2, [pc, -r0, lsr #26]
  a0:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xd20
  a4:	6e673d64 	cdpvs	13, 6, cr3, cr7, cr4, {3}
  a8:	20393975 	eorscs	r3, r9, r5, ror r9
  ac:	7266662d 	rsbvc	r6, r6, #47185920	; 0x2d00000
  b0:	74736565 	ldrbtvc	r6, [r3], #-1381	; 0x565
  b4:	69646e61 	stmdbvs	r4!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  b8:	6b00676e 	blvs	19e78 <__bss_end__+0xe758>
  bc:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
  c0:	6100636f 	tstvs	r0, pc, ror #6
  c4:	745f6d72 	ldrbvc	r6, [pc], #-3442	; cc <_start-0x7f34>
  c8:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
  cc:	73614d5f 	cmnvc	r1, #6080	; 0x17c0
  d0:	4964656b 	stmdbmi	r4!, {r0, r1, r3, r5, r6, r8, sl, sp, lr}^
  d4:	6e005152 	mcrvs	1, 0, r5, cr0, cr2, {2}
  d8:	616d746f 	cmnvs	sp, pc, ror #8
  dc:	74006e69 	strvc	r6, [r0], #-3689	; 0xe69
  e0:	61657268 	cmnvs	r5, r8, ror #4
  e4:	6f635f64 	svcvs	0x00635f64
  e8:	72006564 	andvc	r6, r0, #100, 10	; 0x19000000
  ec:	705f6970 	subsvc	r6, pc, r0, ror r9	; <UNPREDICTABLE>
  f0:	6d656572 	cfstr64vs	mvdx6, [r5, #-456]!	; 0xfffffe38
  f4:	76697470 			; <UNDEFINED> instruction: 0x76697470
  f8:	68745f65 	ldmdavs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
  fc:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 100:	72617500 	rsbvc	r7, r1, #0, 10
 104:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
 108:	75007469 	strvc	r7, [r0, #-1129]	; 0x469
 10c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 110:	2064656e 	rsbcs	r6, r4, lr, ror #10
 114:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 118:	742d3700 	strtvc	r3, [sp], #-1792	; 0x700
 11c:	2d747365 	ldclcs	3, cr7, [r4, #-404]!	; 0xfffffe6c
 120:	65657270 	strbvs	r7, [r5, #-624]!	; 0x270
 124:	6974706d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
 128:	742d6576 	strtvc	r6, [sp], #-1398	; 0x576
 12c:	61657268 	cmnvs	r5, r8, ror #4
 130:	00632e64 	rsbeq	r2, r3, r4, ror #28
 134:	61656c63 	cmnvs	r5, r3, ror #24
 138:	65725f6e 	ldrbvs	r5, [r2, #-3950]!	; 0xf6e
 13c:	746f6f62 	strbtvc	r6, [pc], #-3938	; 144 <_start-0x7ebc>
 140:	6d726100 	ldfvse	f6, [r2, #-0]
 144:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
 148:	465f7265 	ldrbmi	r7, [pc], -r5, ror #4
 14c:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
 150:	696e6e75 	stmdbvs	lr!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 154:	6f43676e 	svcvs	0x0043676e
 158:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xe75
 15c:	68730072 	ldmdavs	r3!, {r1, r4, r5, r6}^
 160:	2074726f 	rsbscs	r7, r4, pc, ror #4
 164:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 168:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
 16c:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
 170:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 174:	726f665f 	rsbvc	r6, pc, #99614720	; 0x5f00000
 178:	72705f6b 	rsbsvc	r5, r0, #428	; 0x1ac
 17c:	706d6565 	rsbvc	r6, sp, r5, ror #10
 180:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0x974
 184:	6d726100 	ldfvse	f6, [r2, #-0]
 188:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
 18c:	425f7265 	subsmi	r7, pc, #1342177286	; 0x50000006
 190:	00657361 	rsbeq	r7, r5, r1, ror #6
 194:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 198:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 19c:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 1a0:	2f6e756a 	svccs	0x006e756a
 1a4:	6b736544 	blvs	1cd96bc <__bss_end__+0x1ccdf9c>
 1a8:	2f706f74 	svccs	0x00706f74
 1ac:	6f686373 	svcvs	0x00686373
 1b0:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 1b4:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 1b8:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 1bc:	53432f30 	movtpl	r2, #16176	; 0x3f30
 1c0:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 1c4:	3173632f 	cmncc	r3, pc, lsr #6
 1c8:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 1cc:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 1d0:	616c2f6e 	cmnvs	ip, lr, ror #30
 1d4:	742f7362 	strtvc	r7, [pc], #-866	; 1dc <_start-0x7e24>
 1d8:	61657268 	cmnvs	r5, r8, ror #4
 1dc:	702d7364 	eorvc	r7, sp, r4, ror #6
 1e0:	616b6361 	cmnvs	fp, r1, ror #6
 1e4:	61006567 	tstvs	r0, r7, ror #10
 1e8:	745f6d72 	ldrbvc	r6, [pc], #-3442	; 1f0 <_start-0x7e10>
 1ec:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 1f0:	5741525f 	smlsldpl	r5, r1, pc, r2	; <UNPREDICTABLE>
 1f4:	00515249 	subseq	r5, r1, r9, asr #4
 1f8:	55465f5f 	strbpl	r5, [r6, #-3935]	; 0xf5f
 1fc:	4954434e 	ldmdbmi	r4, {r1, r2, r3, r6, r8, r9, lr}^
 200:	5f5f4e4f 	svcpl	0x005f4e4f
 204:	6d726100 	ldfvse	f6, [r2, #-0]
 208:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
 20c:	565f7265 	ldrbpl	r7, [pc], -r5, ror #4
 210:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
 214:	6d726100 	ldfvse	f6, [r2, #-0]
 218:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
 21c:	495f7265 	ldmdbmi	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
 220:	6c435152 	stfvse	f5, [r3], {82}	; 0x52
 224:	00726165 	rsbseq	r6, r2, r5, ror #2
 228:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 22c:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
 230:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
 234:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
 238:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 23c:	7200746e 	andvc	r7, r0, #1845493760	; 0x6e000000
 240:	6a5f6970 	bvs	17da808 <__bss_end__+0x17cf0e8>
 244:	5f6e696f 	svcpl	0x006e696f
 248:	65657270 	strbvs	r7, [r5, #-624]!	; 0x270
 24c:	6974706d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
 250:	74006576 	strvc	r6, [r0], #-1398	; 0x576
 254:	61657268 	cmnvs	r5, r8, ror #4
 258:	75735f64 	ldrbvc	r5, [r3, #-3940]!	; 0xf64
 25c:	6973006d 	ldmdbvs	r3!, {r0, r2, r3, r5, r6}^
 260:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
 264:	61006570 	tstvs	r0, r0, ror r5
 268:	745f6d72 	ldrbvc	r6, [pc], #-3442	; 270 <_start-0x7d90>
 26c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 270:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
 274:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; ac <_start-0x7f54>
 278:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
 27c:	6f6c2067 	svcvs	0x006c2067
 280:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 284:	7400746e 	strvc	r7, [r0], #-1134	; 0x46e
 288:	61657268 	cmnvs	r5, r8, ror #4
 28c:	6f635f64 	svcvs	0x00635f64
 290:	00746e75 	rsbseq	r6, r4, r5, ror lr
 294:	5f697072 	svcpl	0x00697072
 298:	5f727563 	svcpl	0x00727563
 29c:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 2a0:	705f6461 	subsvc	r6, pc, r1, ror #8
 2a4:	6d656572 	cfstr64vs	mvdx6, [r5, #-456]!	; 0xfffffe38
 2a8:	76697470 			; <UNDEFINED> instruction: 0x76697470
 2ac:	68730065 	ldmdavs	r3!, {r0, r2, r5, r6}^
 2b0:	2074726f 	rsbscs	r7, r4, pc, ror #4
 2b4:	00746e69 	rsbseq	r6, r4, r9, ror #28
 2b8:	5f6d7261 	svcpl	0x006d7261
 2bc:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 2c0:	72505f72 	subsvc	r5, r0, #456	; 0x1c8
 2c4:	76694465 	strbtvc	r4, [r9], -r5, ror #8
 2c8:	72656469 	rsbvc	r6, r5, #1761607680	; 0x69000000
 2cc:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 2d0:	5f323374 	svcpl	0x00323374
 2d4:	6d6b0074 	stclvs	0, cr0, [fp, #-464]!	; 0xfffffe30
 2d8:	6f6c6c61 	svcvs	0x006c6c61
 2dc:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 2e0:	61007469 	tstvs	r0, r9, ror #8
 2e4:	745f6d72 	ldrbvc	r6, [pc], #-3442	; 2ec <_start-0x7d14>
 2e8:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 2ec:	616f4c5f 	cmnvs	pc, pc, asr ip	; <UNPREDICTABLE>
 2f0:	70720064 	rsbsvc	r0, r2, r4, rrx
 2f4:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xf69
 2f8:	5f746573 	svcpl	0x00746573
 2fc:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 300:	6d726100 	ldfvse	f6, [r2, #-0]
 304:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
 308:	525f7265 	subspl	r7, pc, #1342177286	; 0x50000006
 30c:	616f6c65 	cmnvs	pc, r5, ror #24
 310:	6f640064 	svcvs	0x00640064
 314:	5100656e 	tstpl	r0, lr, ror #10
 318:	7375705f 	cmnvc	r5, #95	; 0x5f
 31c:	70720068 	rsbsvc	r0, r2, r8, rrx
 320:	68742d69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, sl, fp, sp}^
 324:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 328:	6500632e 	strvs	r6, [r0, #-814]	; 0x32e
 32c:	63746978 	cmnvs	r4, #120, 18	; 0x1e0000
 330:	0065646f 	rsbeq	r6, r5, pc, ror #8
 334:	61736944 	cmnvs	r3, r4, asr #18
 338:	5f656c62 	svcpl	0x00656c62
 33c:	73515249 	cmpvc	r1, #-1879048188	; 0x90000004
 340:	4400315f 	strmi	r3, [r0], #-351	; 0x15f
 344:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
 348:	495f656c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
 34c:	5f735152 	svcpl	0x00735152
 350:	70720032 	rsbsvc	r0, r2, r2, lsr r0
 354:	73635f69 	cmnvc	r3, #420	; 0x1a4
 358:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
 35c:	72705f68 	rsbsvc	r5, r0, #104, 30	; 0x1a0
 360:	706d6565 	rsbvc	r6, sp, r5, ror #10
 364:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0x974
 368:	6e61625f 	mcrvs	2, 3, r6, cr1, cr15, {2}
 36c:	0064656b 	rsbeq	r6, r4, fp, ror #10
 370:	656e5f51 	strbvs	r5, [lr, #-3921]!	; 0xf51
 374:	006d656c 	rsbeq	r6, sp, ip, ror #10
 378:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 37c:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
 380:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
 384:	5f747075 	svcpl	0x00747075
 388:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
 38c:	616d6b00 	cmnvs	sp, r0, lsl #22
 390:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 394:	696c615f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r8, sp, lr}^
 398:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
 39c:	51524900 	cmppl	r2, r0, lsl #18
 3a0:	7361425f 	cmnvc	r1, #-268435451	; 0xf0000005
 3a4:	72660065 	rsbvc	r0, r6, #101	; 0x65
 3a8:	00716565 	rsbseq	r6, r1, r5, ror #10
 3ac:	5f515249 	svcpl	0x00515249
 3b0:	646e6570 	strbtvs	r6, [lr], #-1392	; 0x570
 3b4:	5f676e69 	svcpl	0x00676e69
 3b8:	52490031 	subpl	r0, r9, #49	; 0x31
 3bc:	65705f51 	ldrbvs	r5, [r0, #-3921]!	; 0xf51
 3c0:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
 3c4:	00325f67 	eorseq	r5, r2, r7, ror #30
 3c8:	61736944 	cmnvs	r3, r4, asr #18
 3cc:	5f656c62 	svcpl	0x00656c62
 3d0:	69736142 	ldmdbvs	r3!, {r1, r6, r8, sp, lr}^
 3d4:	52495f63 	subpl	r5, r9, #396	; 0x18c
 3d8:	51007351 	tstpl	r0, r1, asr r3
 3dc:	706d655f 	rsbvc	r6, sp, pc, asr r5
 3e0:	64007974 	strvs	r7, [r0], #-2420	; 0x974
 3e4:	625f7665 	subsvs	r7, pc, #105906176	; 0x6500000
 3e8:	69727261 	ldmdbvs	r2!, {r0, r5, r6, r9, ip, sp, lr}^
 3ec:	45007265 	strmi	r7, [r0, #-613]	; 0x265
 3f0:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
 3f4:	52495f65 	subpl	r5, r9, #404	; 0x194
 3f8:	315f7351 	cmpcc	pc, r1, asr r3	; <UNPREDICTABLE>
 3fc:	616e4500 	cmnvs	lr, r0, lsl #10
 400:	5f656c62 	svcpl	0x00656c62
 404:	73515249 	cmpvc	r1, #-1879048188	; 0x90000004
 408:	5100325f 	tstpl	r0, pc, asr r2
 40c:	706f705f 	rsbvc	r7, pc, pc, asr r0	; <UNPREDICTABLE>
 410:	68637300 	stmdavs	r3!, {r8, r9, ip, sp, lr}^
 414:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
 418:	745f7265 	ldrbvc	r7, [pc], #-613	; 420 <_start-0x7be0>
 41c:	61657268 	cmnvs	r5, r8, ror #4
 420:	6f660064 	svcvs	0x00660064
 424:	00646e75 	rsbeq	r6, r4, r5, ror lr
 428:	6c696174 	stfvse	f6, [r9], #-464	; 0xfffffe30
 42c:	54454700 	strbpl	r4, [r5], #-1792	; 0x700
 430:	74003233 	strvc	r3, [r0], #-563	; 0x233
 434:	6c615f68 	stclvs	15, cr5, [r1], #-416	; 0xfffffe60
 438:	00636f6c 	rsbeq	r6, r3, ip, ror #30
 43c:	5f746e69 	svcpl	0x00746e69
 440:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
 444:	73797300 	cmnvc	r9, #0, 6
 448:	5f6d6574 	svcpl	0x006d6574
 44c:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 450:	695f656c 	ldmdbvs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
 454:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 458:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
 45c:	75630073 	strbvc	r0, [r3, #-115]!	; 0x73
 460:	74007272 	strvc	r7, [r0], #-626	; 0x272
 464:	72665f68 	rsbvc	r5, r6, #104, 30	; 0x1a0
 468:	51006565 	tstpl	r0, r5, ror #10
 46c:	7070615f 	rsbsvc	r6, r0, pc, asr r1
 470:	00646e65 	rsbeq	r6, r4, r5, ror #28
 474:	5f697072 	svcpl	0x00697072
 478:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
 47c:	6172745f 	cmnvs	r2, pc, asr r4
 480:	6c6f706d 	stclvs	0, cr7, [pc], #-436	; 2d4 <_start-0x7d2c>
 484:	5f656e69 	svcpl	0x00656e69
 488:	65657270 	strbvs	r7, [r5, #-624]!	; 0x270
 48c:	6974706d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
 490:	68006576 	stmdavs	r0, {r1, r2, r4, r5, r6, r8, sl, sp, lr}
 494:	00646165 	rsbeq	r6, r4, r5, ror #2
 498:	5f77656e 	svcpl	0x0077656e
 49c:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 4a0:	72006461 	andvc	r6, r0, #1627389952	; 0x61000000
 4a4:	00716e75 	rsbseq	r6, r1, r5, ror lr
 4a8:	5f697072 	svcpl	0x00697072
 4ac:	63617865 	cmnvs	r1, #6619136	; 0x650000
 4b0:	6c735f74 	ldclvs	15, cr5, [r3], #-464	; 0xfffffe30
 4b4:	5f706565 	svcpl	0x00706565
 4b8:	65657270 	strbvs	r7, [r5, #-624]!	; 0x270
 4bc:	6974706d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
 4c0:	49006576 	stmdbmi	r0, {r1, r2, r4, r5, r6, r8, sl, sp, lr}
 4c4:	625f5152 	subsvs	r5, pc, #-2147483628	; 0x80000014
 4c8:	63697361 	cmnvs	r9, #-2080374783	; 0x84000001
 4cc:	6e65705f 	mcrvs	0, 3, r7, cr5, cr15, {2}
 4d0:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
 4d4:	616e4500 	cmnvs	lr, r0, lsl #10
 4d8:	5f656c62 	svcpl	0x00656c62
 4dc:	69736142 	ldmdbvs	r3!, {r1, r6, r8, sp, lr}^
 4e0:	52495f63 	subpl	r5, r9, #396	; 0x18c
 4e4:	72007351 	andvc	r7, r0, #1140850689	; 0x44000001
 4e8:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
 4ec:	6b636174 	blvs	18d8ac4 <__bss_end__+0x18cd3a4>
 4f0:	6568635f 	strbvs	r6, [r8, #-863]!	; 0x35f
 4f4:	705f6b63 	subsvc	r6, pc, r3, ror #22
 4f8:	6d656572 	cfstr64vs	mvdx6, [r5, #-456]!	; 0xfffffe38
 4fc:	76697470 			; <UNDEFINED> instruction: 0x76697470
 500:	5f510065 	svcpl	0x00510065
 504:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 508:	5f510074 	svcpl	0x00510074
 50c:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0x56e
 510:	51494600 	cmppl	r9, r0, lsl #12
 514:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 518:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 350 <_start-0x7cb0>
 51c:	72756300 	rsbsvc	r6, r5, #0, 6
 520:	7268745f 	rsbvc	r7, r8, #1593835520	; 0x5f000000
 524:	00646165 	rsbeq	r6, r4, r5, ror #2
 528:	5f646c6f 	svcpl	0x00646c6f
 52c:	65726874 	ldrbvs	r6, [r2, #-2164]!	; 0x874
 530:	6e006461 	cdpvs	4, 0, cr6, cr0, cr1, {3}
 534:	6f6c6c61 	svcvs	0x006c6c61
 538:	00646563 	rsbeq	r6, r4, r3, ror #10
 53c:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0x973
 540:	645f6d65 	ldrbvs	r6, [pc], #-3429	; 548 <_start-0x7ab8>
 544:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
 548:	695f656c 	ldmdbvs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
 54c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 550:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
 554:	55500073 	ldrbpl	r0, [r0, #-115]	; 0x73
 558:	00323354 	eorseq	r3, r2, r4, asr r3
 55c:	63726963 	cmnvs	r2, #1622016	; 0x18c000
 560:	72616c75 	rsbvc	r6, r1, #29952	; 0x7500
 564:	6300632e 	movwvs	r6, #814	; 0x32e
 568:	6f705f71 	svcvs	0x00705f71
 56c:	6f6e5f70 	svcvs	0x006e5f70
 570:	6f6c626e 	svcvs	0x006c626e
 574:	63006b63 	movwvs	r6, #2915	; 0xb63
 578:	6f705f71 	svcvs	0x00705f71
 57c:	5f6e5f70 	svcpl	0x006e5f70
 580:	6c626f6e 	stclvs	15, cr6, [r2], #-440	; 0xfffffe48
 584:	766f006b 	strbtvc	r0, [pc], -fp, rrx
 588:	6c667265 	sfmvs	f7, 2, [r6], #-404	; 0xfffffe6c
 58c:	6300776f 	movwvs	r7, #1903	; 0x76f
 590:	745f6571 	ldrbvc	r6, [pc], #-1393	; 598 <_start-0x7a68>
 594:	7a697300 	bvc	1a5d19c <__bss_end__+0x1a51a7c>
 598:	00745f65 	rsbseq	r5, r4, r5, ror #30
 59c:	705f7163 	subsvc	r7, pc, r3, ror #2
 5a0:	5f6b6565 	svcpl	0x006b6565
 5a4:	7265006e 	rsbvc	r0, r5, #110	; 0x6e
 5a8:	73726f72 	cmnvc	r2, #456	; 0x1c8
 5ac:	7461665f 	strbtvc	r6, [r1], #-1631	; 0x65f
 5b0:	705f6c61 	subsvc	r6, pc, r1, ror #24
 5b4:	5f716300 	svcpl	0x00716300
 5b8:	00706f70 	rsbseq	r6, r0, r0, ror pc
 5bc:	736d656d 	cmnvc	sp, #457179136	; 0x1b400000
 5c0:	63007465 	movwvs	r7, #1125	; 0x465
 5c4:	736e5f71 	cmnvc	lr, #452	; 0x1c4
 5c8:	65636170 	strbvs	r6, [r3, #-368]!	; 0x170
 5cc:	5f716300 	svcpl	0x00716300
 5d0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
 5d4:	5f716300 	svcpl	0x00716300
 5d8:	5f706f70 	svcpl	0x00706f70
 5dc:	7163006e 	cmnvc	r3, lr, rrx
 5e0:	7375705f 	cmnvc	r5, #95	; 0x5f
 5e4:	71630068 	cmnvc	r3, r8, rrx
 5e8:	7375705f 	cmnvc	r5, #95	; 0x5f
 5ec:	006e5f68 	rsbeq	r5, lr, r8, ror #30
 5f0:	655f7163 	ldrbvs	r7, [pc, #-355]	; 495 <_start-0x7b6b>
 5f4:	7974706d 	ldmdbvc	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
 5f8:	6e656600 	cdpvs	6, 6, cr6, cr5, cr0, {0}
 5fc:	63006563 	movwvs	r6, #1379	; 0x563
 600:	656e5f71 	strbvs	r5, [lr, #-3953]!	; 0xf71
 604:	006d656c 	rsbeq	r6, sp, ip, ror #10
 608:	75625f63 	strbvc	r5, [r2, #-3939]!	; 0xf63
 60c:	71630066 	cmnvc	r3, r6, rrx
 610:	6c75665f 	ldclvs	6, cr6, [r5], #-380	; 0xfffffe84
 614:	7163006c 	cmnvc	r3, ip, rrx
 618:	6972705f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
 61c:	6300746e 	movwvs	r7, #1134	; 0x46e
 620:	6b6f5f71 	blvs	1bd83ec <__bss_end__+0x1bccccc>
 624:	5f716300 	svcpl	0x00716300
 628:	696c0074 	stmdbvs	ip!, {r2, r4, r5, r6}^
 62c:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!	; 4ac <_start-0x7b54>
 630:	65736d65 	ldrbvs	r6, [r3, #-3429]!	; 0xd65
 634:	00632e74 	rsbeq	r2, r3, r4, ror lr
 638:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0x52f
 63c:	622f7372 	eorvs	r7, pc, #-939524095	; 0xc8000001
 640:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
 644:	2f6e756a 	svccs	0x006e756a
 648:	6b736544 	blvs	1cd9b60 <__bss_end__+0x1cce440>
 64c:	2f706f74 	svccs	0x00706f74
 650:	6f686373 	svcvs	0x00686373
 654:	572f6c6f 	strpl	r6, [pc, -pc, ror #24]!
 658:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 65c:	32393172 	eorscc	r3, r9, #-2147483620	; 0x8000001c
 660:	53432f30 	movtpl	r2, #16176	; 0x3f30
 664:	45303431 	ldrmi	r3, [r0, #-1073]!	; 0x431
 668:	3173632f 	cmncc	r3, pc, lsr #6
 66c:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 670:	69773032 	ldmdbvs	r7!, {r1, r4, r5, ip, sp}^
 674:	696c2f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 678:	00697062 	rsbeq	r7, r9, r2, rrx
 67c:	6e675f5f 	mcrvs	15, 3, r5, cr7, cr15, {2}
 680:	765f6375 			; <UNDEFINED> instruction: 0x765f6375
 684:	696c5f61 	stmdbvs	ip!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
 688:	6c007473 	cfstrsvs	mvf7, [r0], {115}	; 0x73
 68c:	2f636269 	svccs	0x00636269
 690:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 694:	632e6b74 	teqvs	lr, #116, 22	; 0x1d000
 698:	5f617600 	svcpl	0x00617600
 69c:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 6a0:	5f006b74 	svcpl	0x00006b74
 6a4:	5f61765f 	svcpl	0x0061765f
 6a8:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
 6ac:	67726100 	ldrbvs	r6, [r2, -r0, lsl #2]!
 6b0:	5f5f0073 	svcpl	0x005f0073
 6b4:	69007061 	stmdbvs	r0, {r0, r5, r6, ip, sp, lr}
 6b8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 6bc:	5f6c616e 	svcpl	0x006c616e
 6c0:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 6c4:	00726168 	rsbseq	r6, r2, r8, ror #2
 6c8:	5f697072 	svcpl	0x00697072
 6cc:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 6d0:	00726168 	rsbseq	r6, r2, r8, ror #2
 6d4:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 6d8:	7475702f 	ldrbtvc	r7, [r5], #-47	; 0x2f
 6dc:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 6e0:	7200632e 	andvc	r6, r0, #-1207959552	; 0xb8000000
 6e4:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
 6e8:	705f7465 	subsvc	r7, pc, r5, ror #8
 6ec:	00637475 	rsbeq	r7, r3, r5, ror r4
 6f0:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
 6f4:	7475702f 	ldrbtvc	r7, [r5], #-47	; 0x2f
 6f8:	00632e6b 	rsbeq	r2, r3, fp, ror #28
 6fc:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
 700:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
 704:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
 708:	656e006b 	strbvs	r0, [lr, #-107]!	; 0x6b
 70c:	00705f67 	rsbseq	r5, r0, r7, ror #30
 710:	65766572 	ldrbvs	r6, [r6, #-1394]!	; 0x572
 714:	00657372 	rsbeq	r7, r5, r2, ror r3
 718:	69647369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
 71c:	00746967 	rsbseq	r6, r4, r7, ror #18
 720:	73747570 	cmnvc	r4, #112, 10	; 0x1c000000
 724:	0070665f 	rsbseq	r6, r0, pc, asr r6
 728:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0x162
 72c:	67697300 	strbvs	r7, [r9, -r0, lsl #6]!
 730:	5f64656e 	svcpl	0x0064656e
 734:	696c0070 	stmdbvs	ip!, {r4, r5, r6}^
 738:	762f6362 	strtvc	r6, [pc], -r2, ror #6
 73c:	72702d61 	rsbsvc	r2, r0, #6208	; 0x1840
 740:	6b746e69 	blvs	1d1c0ec <__bss_end__+0x1d109cc>
 744:	7200632e 	andvc	r6, r0, #-1207959552	; 0xb8000000
 748:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
 74c:	6f5f7465 	svcvs	0x005f7465
 750:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0x475
 754:	69770074 	ldmdbvs	r7!, {r2, r4, r5, r6}^
 758:	00687464 	rsbeq	r7, r8, r4, ror #8
 75c:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 760:	0070665f 	rsbseq	r6, r0, pc, asr r6
 764:	74696d65 	strbtvc	r6, [r9], #-3429	; 0xd65
 768:	69707200 	ldmdbvs	r0!, {r9, ip, sp, lr}^
 76c:	6265725f 	rsbvs	r7, r5, #-268435451	; 0xf0000005
 770:	00746f6f 	rsbseq	r6, r4, pc, ror #30
 774:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 778:	732d6530 	teqvc	sp, #48, 10	; 0xc000000
 77c:	632f6372 	teqvs	pc, #-939524095	; 0xc8000001
 780:	6e61656c 	cdpvs	5, 6, cr6, cr1, cr12, {3}
 784:	6265722d 	rsbvs	r7, r5, #-805306366	; 0xd0000002
 788:	2e746f6f 	cdpcs	15, 7, cr6, cr4, cr15, {3}
 78c:	65640063 	strbvs	r0, [r4, #-99]!	; 0x63
 790:	5f79616c 	svcpl	0x0079616c
 794:	6900736d 	stmdbvs	r0, {r0, r2, r3, r5, r6, r8, r9, ip, sp, lr}
 798:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 79c:	5f6c616e 	svcpl	0x006c616e
 7a0:	705f7773 	subsvc	r7, pc, r3, ror r7	; <UNPREDICTABLE>
 7a4:	68637475 	stmdavs	r3!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
 7a8:	5f007261 	svcpl	0x00007261
 7ac:	7373625f 	cmnvc	r3, #-268435451	; 0xf0000005
 7b0:	6174735f 	cmnvs	r4, pc, asr r3
 7b4:	5f5f7472 	svcpl	0x005f7472
 7b8:	73736200 	cmnvc	r3, #0, 4
 7bc:	646e655f 	strbtvs	r6, [lr], #-1375	; 0x55f
 7c0:	63796300 	cmnvs	r9, #0, 6
 7c4:	705f656c 	subsvc	r6, pc, ip, ror #10
 7c8:	625f7265 	subsvs	r7, pc, #1342177286	; 0x50000006
 7cc:	63007469 	movwvs	r7, #1129	; 0x469
 7d0:	6f736e6f 	svcvs	0x00736e6f
 7d4:	755f656c 	ldrbvc	r6, [pc, #-1388]	; 270 <_start-0x7d90>
 7d8:	00747261 	rsbseq	r7, r4, r1, ror #4
 7dc:	755f7773 	ldrbvc	r7, [pc, #-1907]	; 71 <_start-0x7f8f>
 7e0:	5f747261 	svcpl	0x00747261
 7e4:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 7e8:	50006b74 	andpl	r6, r0, r4, ror fp
 7ec:	5f435455 	svcpl	0x00435455
 7f0:	5f505345 	svcpl	0x00505345
 7f4:	54524155 	ldrbpl	r4, [r2], #-341	; 0x155
 7f8:	5f777300 	svcpl	0x00777300
 7fc:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 800:	5000745f 	andpl	r7, r0, pc, asr r4
 804:	5f435455 	svcpl	0x00435455
 808:	555f5753 	ldrbpl	r5, [pc, #-1875]	; bd <_start-0x7f43>
 80c:	00545241 	subseq	r5, r4, r1, asr #4
 810:	64756162 	ldrbtvs	r6, [r5], #-354	; 0x162
 814:	54555000 	ldrbpl	r5, [r5], #-0
 818:	57485f43 	strbpl	r5, [r8, -r3, asr #30]
 81c:	5241555f 	subpl	r5, r1, #398458880	; 0x17c00000
 820:	635f0054 	cmpvs	pc, #84	; 0x54
 824:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 828:	61750074 	cmnvs	r5, r4, ror r0
 82c:	645f7472 	ldrbvs	r7, [pc], #-1138	; 834 <_start-0x77cc>
 830:	745f7665 	ldrbvc	r7, [pc], #-1637	; 838 <_start-0x77c8>
 834:	5f777300 	svcpl	0x00777300
 838:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 83c:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
 840:	69750063 	ldmdbvs	r5!, {r0, r1, r5, r6}^
 844:	5f38746e 	svcpl	0x0038746e
 848:	6f630074 	svcvs	0x00630074
 84c:	6f72746e 	svcvs	0x0072746e
 850:	6c625f6c 	stclvs	15, cr5, [r2], #-432	; 0xfffffe50
 854:	00745f6b 	rsbseq	r5, r4, fp, ror #30
 858:	755f7773 	ldrbvc	r7, [pc, #-1907]	; ed <_start-0x7f13>
 85c:	00747261 	rsbseq	r7, r4, r1, ror #4
 860:	675f6263 	ldrbvs	r6, [pc, -r3, ror #4]
 864:	625f7465 	subsvs	r7, pc, #1694498816	; 0x65000000
 868:	6b636f6c 	blvs	18dc620 <__bss_end__+0x18d0f00>
 86c:	625f5f00 	subsvs	r5, pc, #0, 30
 870:	655f7373 	ldrbvs	r7, [pc, #-883]	; 505 <_start-0x7afb>
 874:	5f5f646e 	svcpl	0x005f646e
 878:	31736300 	cmncc	r3, r0, lsl #6
 87c:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 880:	2f637273 	svccs	0x00637273
 884:	61747363 	cmnvs	r4, r3, ror #6
 888:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
 88c:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
 890:	656c6f73 	strbvs	r6, [ip, #-3955]!	; 0xf73
 894:	7665645f 			; <UNDEFINED> instruction: 0x7665645f
 898:	67616d00 	strbvs	r6, [r1, -r0, lsl #26]!
 89c:	61006369 	tstvs	r0, r9, ror #6
 8a0:	73755f74 	cmnvc	r5, #116, 30	; 0x1d0
 8a4:	6c5f7265 	lfmvs	f7, 2, [pc], {101}	; 0x65
 8a8:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
 8ac:	5f4d5000 	svcpl	0x004d5000
 8b0:	53534150 	cmppl	r3, #80, 2
 8b4:	44524f57 	ldrbmi	r4, [r2], #-3927	; 0xf57
 8b8:	31736300 	cmncc	r3, r0, lsl #6
 8bc:	2d653034 	stclcs	0, cr3, [r5, #-208]!	; 0xffffff30
 8c0:	2f637273 	svccs	0x00637273
 8c4:	6f626572 	svcvs	0x00626572
 8c8:	632e746f 	teqvs	lr, #1862270976	; 0x6f000000
 8cc:	5f4d5000 	svcpl	0x004d5000
 8d0:	43545352 	cmpmi	r4, #1207959553	; 0x48000001
 8d4:	4352575f 	cmpmi	r2, #24903680	; 0x17c0000
 8d8:	465f4746 	ldrbmi	r4, [pc], -r6, asr #14
 8dc:	5f4c4c55 	svcpl	0x004c4c55
 8e0:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
 8e4:	4d500054 	ldclmi	0, cr0, [r0, #-336]	; 0xfffffeb0
 8e8:	4f44575f 	svcmi	0x0044575f
 8ec:	65730047 	ldrbvs	r0, [r3, #-71]!	; 0x47
 8f0:	73755f74 	cmnvc	r5, #116, 30	; 0x1d0
 8f4:	6c5f7265 	lfmvs	f7, 2, [pc], {101}	; 0x65
 8f8:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
 8fc:	5f4d5000 	svcpl	0x004d5000
 900:	43545352 	cmpmi	r4, #1207959553	; 0x48000001
 904:	73706300 	cmnvc	r0, #0, 6
 908:	69740072 	ldmdbvs	r4!, {r1, r4, r5, r6}^
 90c:	5f72656d 	svcpl	0x0072656d
 910:	5f746567 	svcpl	0x00746567
 914:	63657375 	cmnvs	r5, #-738197503	; 0xd4000001
 918:	7761725f 			; <UNDEFINED> instruction: 0x7761725f
 91c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 920:	735f7961 	cmpvc	pc, #1589248	; 0x184000
 924:	63006365 	movwvs	r6, #869	; 0x365
 928:	30343173 	eorscc	r3, r4, r3, ror r1
 92c:	72732d65 	rsbsvc	r2, r3, #6464	; 0x1940
 930:	69742f63 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
 934:	2e72656d 	cdpcs	5, 7, cr6, cr2, cr13, {3}
 938:	69740063 	ldmdbvs	r4!, {r0, r1, r5, r6}^
 93c:	00736b63 	rsbseq	r6, r3, r3, ror #22
 940:	616c6564 	cmnvs	ip, r4, ror #10
 944:	79635f79 	stmdbvc	r3!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 948:	73656c63 	cmnvc	r5, #25344	; 0x6300
 94c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 950:	755f7961 	ldrbvc	r7, [pc, #-2401]	; fffffff7 <__bss_end__+0xffff48d7>
 954:	69740073 	ldmdbvs	r4!, {r0, r1, r4, r5, r6}^
 958:	5f72656d 	svcpl	0x0072656d
 95c:	5f746567 	svcpl	0x00746567
 960:	63657375 	cmnvs	r5, #-738197503	; 0xd4000001
 964:	72666b00 	rsbvc	r6, r6, #0, 22
 968:	615f6565 	cmpvs	pc, r5, ror #10
 96c:	61006c6c 	tstvs	r0, ip, ror #24
 970:	6e67696c 	cdpvs	9, 6, cr6, cr7, cr12, {3}
 974:	685f6465 	ldmdavs	pc, {r0, r2, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
 978:	5f706165 	svcpl	0x00706165
 97c:	00727470 	rsbseq	r7, r2, r0, ror r4
 980:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
 984:	6b2f6372 	blvs	bd9754 <__bss_end__+0xbce034>
 988:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 98c:	632e636f 	teqvs	lr, #-1140850687	; 0xbc000001
 990:	61747300 	cmnvs	r4, r0, lsl #6
 994:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
 998:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
 99c:	69007373 	stmdbvs	r0, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}
 9a0:	5f74696e 	svcpl	0x0074696e
 9a4:	6c610070 	stclvs	0, cr0, [r1], #-448	; 0xfffffe40
 9a8:	6d6e6769 	stclvs	7, cr6, [lr, #-420]!	; 0xfffffe5c
 9ac:	00746e65 	rsbseq	r6, r4, r5, ror #28
 9b0:	6e756f72 	mrcvs	15, 3, r6, cr5, cr2, {3}
 9b4:	5f646564 	svcpl	0x00646564
 9b8:	7479626e 	ldrbtvc	r6, [r9], #-622	; 0x26e
 9bc:	6b007365 	blvs	1d758 <__bss_end__+0x12038>
 9c0:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 9c4:	685f636f 	ldmdavs	pc, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 9c8:	5f706165 	svcpl	0x00706165
 9cc:	00727470 	rsbseq	r7, r2, r0, ror r4
 9d0:	6c616d6b 	stclvs	13, cr6, [r1], #-428	; 0xfffffe54
 9d4:	5f636f6c 	svcpl	0x00636f6c
 9d8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
 9dc:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
 9e0:	6174735f 	cmnvs	r4, pc, asr r3
 9e4:	74007472 	strvc	r7, [r0], #-1138	; 0x472
 9e8:	6c615f6f 	stclvs	15, cr5, [r1], #-444	; 0xfffffe44
 9ec:	61636f6c 	cmnvs	r3, ip, ror #30
 9f0:	5f006574 	svcpl	0x00006574
 9f4:	6165685f 	cmnvs	r5, pc, asr r8
 9f8:	74735f70 	ldrbtvc	r5, [r3], #-3952	; 0xf70
 9fc:	5f747261 	svcpl	0x00747261
 a00:	7963005f 	stmdbvc	r3!, {r0, r1, r2, r3, r4, r6}^
 a04:	65705f63 	ldrbvs	r5, [r0, #-3939]!	; 0xf63
 a08:	69625f72 	stmdbvs	r2!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 a0c:	72770074 	rsbsvc	r0, r7, #116	; 0x74
 a10:	5f657469 	svcpl	0x00657469
 a14:	5f637963 	svcpl	0x00637963
 a18:	69746e75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 a1c:	7773006c 	ldrbvc	r0, [r3, -ip, rrx]!
 a20:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 a24:	65675f74 	strbvs	r5, [r7, #-3956]!	; 0xf74
 a28:	745f6374 	ldrbvc	r6, [pc], #-884	; a30 <_start-0x75d0>
 a2c:	6f656d69 	svcvs	0x00656d69
 a30:	73007475 	movwvc	r7, #1141	; 0x475
 a34:	61755f77 	cmnvs	r5, r7, ror pc
 a38:	675f7472 			; <UNDEFINED> instruction: 0x675f7472
 a3c:	5f737465 	svcpl	0x00737465
 a40:	69746e75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 a44:	7773006c 	ldrbvc	r0, [r3, -ip, rrx]!
 a48:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 a4c:	65675f74 	strbvs	r5, [r7, #-3956]!	; 0xf74
 a50:	64006374 	strvs	r6, [r0], #-884	; 0x374
 a54:	76697265 	strbtvc	r7, [r9], -r5, ror #4
 a58:	64006465 	strvs	r6, [r0], #-1125	; 0x465
 a5c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 a60:	79636e5f 	stmdbvc	r3!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
 a64:	73656c63 	cmnvc	r5, #25344	; 0x6300
 a68:	5f777300 	svcpl	0x00777300
 a6c:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 a70:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 a74:	65685f74 	strbvs	r5, [r8, #-3956]!	; 0xf74
 a78:	7265706c 	rsbvc	r7, r5, #108	; 0x6c
 a7c:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
 a80:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
 a84:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0x55f
 a88:	77730063 	ldrbvc	r0, [r3, -r3, rrx]!
 a8c:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 a90:	75705f74 	ldrbvc	r5, [r0, #-3956]!	; 0xf74
 a94:	67006b74 	smlsdxvs	r0, r4, fp, r6
 a98:	5f6f6970 	svcpl	0x006f6970
 a9c:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 aa0:	2d796d00 	ldclcs	13, cr6, [r9, #-0]
 aa4:	2f637273 	svccs	0x00637273
 aa8:	752d7773 	strvc	r7, [sp, #-1907]!	; 0x773
 aac:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
 ab0:	68630063 	stmdavs	r3!, {r0, r1, r5, r6}^
 ab4:	695f7261 	ldmdbvs	pc, {r0, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
 ab8:	7773006e 	ldrbvc	r0, [r3, -lr, rrx]!
 abc:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 ac0:	65675f74 	strbvs	r5, [r7, #-3956]!	; 0xf74
 ac4:	745f7374 	ldrbvc	r7, [pc], #-884	; acc <_start-0x7534>
 ac8:	6f656d69 	svcvs	0x00656d69
 acc:	5f007475 	svcpl	0x00007475
 ad0:	0074756f 	rsbseq	r7, r4, pc, ror #10
 ad4:	6f697067 	svcvs	0x00697067
 ad8:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 adc:	75006574 	strvc	r6, [r0, #-1396]	; 0x574
 ae0:	5f636573 	svcpl	0x00636573
 ae4:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 ae8:	0074756f 	rsbseq	r7, r4, pc, ror #10
 aec:	6f697067 	svcvs	0x00697067
 af0:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
 af4:	706e695f 	rsbvc	r6, lr, pc, asr r9
 af8:	73007475 	movwvc	r7, #1141	; 0x475
 afc:	61755f77 	cmnvs	r5, r7, ror pc
 b00:	675f7472 			; <UNDEFINED> instruction: 0x675f7472
 b04:	5f737465 	svcpl	0x00737465
 b08:	69746e75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 b0c:	6c625f6c 	stclvs	15, cr5, [r2], #-432	; 0xfffffe50
 b10:	7067006b 	rsbvc	r0, r7, fp, rrx
 b14:	735f6f69 	cmpvc	pc, #420	; 0x1a4
 b18:	6f5f7465 	svcvs	0x005f7465
 b1c:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0x475
 b20:	61770074 	cmnvs	r7, r4, ror r0
 b24:	755f7469 	ldrbvc	r7, [pc, #-1129]	; 6c3 <_start-0x793d>
 b28:	6c69746e 	cfstrdvs	mvd7, [r9], #-440	; 0xfffffe48
 b2c:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0x55f
 b30:	55410063 	strbpl	r0, [r1, #-99]	; 0x63
 b34:	554d5f58 	strbpl	r5, [sp, #-3928]	; 0xf58
 b38:	52434d5f 	subpl	r4, r3, #6080	; 0x17c0
 b3c:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
 b40:	58554100 	ldmdapl	r5, {r8, lr}^
 b44:	5f554d5f 	svcpl	0x00554d5f
 b48:	525f4f49 	subspl	r4, pc, #292	; 0x124
 b4c:	41004745 	tstmi	r0, r5, asr #14
 b50:	4d5f5855 	ldclmi	8, cr5, [pc, #-340]	; a04 <_start-0x75fc>
 b54:	534d5f55 	movtpl	r5, #57173	; 0xdf55
 b58:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xf52
 b5c:	50470047 	subpl	r0, r7, r7, asr #32
 b60:	465f4f49 	ldrbmi	r4, [pc], -r9, asr #30
 b64:	5f434e55 	svcpl	0x00434e55
 b68:	30544c41 	subscc	r4, r4, r1, asr #24
 b6c:	72617500 	rsbvc	r7, r1, #0, 10
 b70:	61635f74 	smcvs	13812	; 0x35f4
 b74:	65675f6e 	strbvs	r5, [r7, #-3950]!	; 0xf6e
 b78:	41006374 	tstmi	r0, r4, ror r3
 b7c:	4d5f5855 	ldclmi	8, cr5, [pc, #-340]	; a30 <_start-0x75d0>
 b80:	4e435f55 	mcrmi	15, 2, r5, cr3, cr5, {2}
 b84:	525f4c54 	subspl	r4, pc, #84, 24	; 0x5400
 b88:	75004745 	strvc	r4, [r0, #-1861]	; 0x745
 b8c:	5f747261 	svcpl	0x00747261
 b90:	5f736168 	svcpl	0x00736168
 b94:	61746164 	cmnvs	r4, r4, ror #2
 b98:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 b9c:	55465f4f 	strbpl	r5, [r6, #-3919]	; 0xf4f
 ba0:	4f5f434e 	svcmi	0x005f434e
 ba4:	55505455 	ldrbpl	r5, [r0, #-1109]	; 0x455
 ba8:	50470054 	subpl	r0, r7, r4, asr r0
 bac:	465f4f49 	ldrbmi	r4, [pc], -r9, asr #30
 bb0:	5f434e55 	svcpl	0x00434e55
 bb4:	31544c41 	cmpcc	r4, r1, asr #24
 bb8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 bbc:	55465f4f 	strbpl	r5, [r6, #-3919]	; 0xf4f
 bc0:	415f434e 	cmpmi	pc, lr, asr #6
 bc4:	0032544c 	eorseq	r5, r2, ip, asr #8
 bc8:	4f495047 	svcmi	0x00495047
 bcc:	4e55465f 	mrcmi	6, 2, r4, cr5, cr15, {2}
 bd0:	4c415f43 	mcrrmi	15, 4, r5, r1, cr3
 bd4:	47003354 	smlsdmi	r0, r4, r3, r3
 bd8:	5f4f4950 	svcpl	0x004f4950
 bdc:	434e5546 	movtmi	r5, #58694	; 0xe546
 be0:	544c415f 	strbpl	r4, [ip], #-351	; 0x15f
 be4:	55410035 	strbpl	r0, [r1, #-53]	; 0x35
 be8:	554d5f58 	strbpl	r5, [sp, #-3928]	; 0xf58
 bec:	5245495f 	subpl	r4, r5, #1556480	; 0x17c000
 bf0:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
 bf4:	74757000 	ldrbtvc	r7, [r5], #-0
 bf8:	41003233 	tstmi	r0, r3, lsr r2
 bfc:	4d5f5855 	ldclmi	8, cr5, [pc, #-340]	; ab0 <_start-0x7550>
 c00:	49495f55 	stmdbmi	r9, {r0, r2, r4, r6, r8, r9, sl, fp, ip, lr}^
 c04:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xf52
 c08:	70670047 	rsbvc	r0, r7, r7, asr #32
 c0c:	665f6f69 	ldrbvs	r6, [pc], -r9, ror #30
 c10:	5f636e75 	svcpl	0x00636e75
 c14:	61750074 	cmnvs	r5, r4, ror r0
 c18:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
 c1c:	705f6e61 	subsvc	r6, pc, r1, ror #28
 c20:	00637475 	rsbeq	r7, r3, r5, ror r4
 c24:	5f585541 	svcpl	0x00585541
 c28:	42414e45 	submi	r4, r1, #1104	; 0x450
 c2c:	0053454c 	subseq	r4, r3, ip, asr #10
 c30:	5f585541 	svcpl	0x00585541
 c34:	00515249 	subseq	r5, r1, r9, asr #4
 c38:	5f585541 	svcpl	0x00585541
 c3c:	425f554d 	subsmi	r5, pc, #322961408	; 0x13400000
 c40:	5f445541 	svcpl	0x00445541
 c44:	00474552 	subeq	r4, r7, r2, asr r5
 c48:	5f585541 	svcpl	0x00585541
 c4c:	535f554d 	cmppl	pc, #322961408	; 0x13400000
 c50:	5f544154 	svcpl	0x00544154
 c54:	00474552 	subeq	r4, r7, r2, asr r5
 c58:	4f495047 	svcmi	0x00495047
 c5c:	4e55465f 	mrcmi	6, 2, r4, cr5, cr15, {2}
 c60:	4c415f43 	mcrrmi	15, 4, r5, r1, cr3
 c64:	67003454 	smlsdvs	r0, r4, r4, r3
 c68:	5f6f6970 	svcpl	0x006f6970
 c6c:	5f746573 	svcpl	0x00746573
 c70:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 c74:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
 c78:	58554100 	ldmdapl	r5, {r8, lr}^
 c7c:	5f554d5f 	svcpl	0x00554d5f
 c80:	41524353 	cmpmi	r2, r3, asr r3
 c84:	00484354 	subeq	r4, r8, r4, asr r3
 c88:	732d796d 	teqvc	sp, #1785856	; 0x1b4000
 c8c:	752f6372 	strvc	r6, [pc, #-882]!	; 922 <_start-0x76de>
 c90:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
 c94:	55410063 	strbpl	r0, [r1, #-99]	; 0x63
 c98:	554d5f58 	strbpl	r5, [sp, #-3928]	; 0xf58
 c9c:	52434c5f 	subpl	r4, r3, #24320	; 0x5f00
 ca0:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
 ca4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 ca8:	55465f4f 	strbpl	r5, [r6, #-3919]	; 0xf4f
 cac:	495f434e 	ldmdbmi	pc, {r1, r2, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
 cb0:	5455504e 	ldrbpl	r5, [r5], #-78	; 0x4e
 cb4:	58554100 	ldmdapl	r5, {r8, lr}^
 cb8:	5f554d5f 	svcpl	0x00554d5f
 cbc:	5f52534c 	svcpl	0x0052534c
 cc0:	00474552 	subeq	r4, r7, r2, asr r5
 cc4:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 cc8:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
 ccc:	73615f63 	cmnvc	r1, #396	; 0x18c
 cd0:	00636e79 	rsbeq	r6, r3, r9, ror lr
 cd4:	33746567 	cmncc	r4, #432013312	; 0x19c00000
 cd8:	72700032 	rsbsvc	r0, r0, #50	; 0x32
 cdc:	74656665 	strbtvc	r6, [r5], #-1637	; 0x665
 ce0:	615f6863 	cmpvs	pc, r3, ror #16
 ce4:	74726f62 	ldrbtvc	r6, [r2], #-3938	; 0xf62
 ce8:	6365765f 	cmnvs	r5, #99614720	; 0x5f00000
 cec:	00726f74 	rsbseq	r6, r2, r4, ror pc
 cf0:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
 cf4:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
 cf8:	745f7470 	ldrbvc	r7, [pc], #-1136	; d00 <_start-0x7300>
 cfc:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
 d00:	6e695f00 	cdpvs	15, 6, cr5, cr9, cr0, {0}
 d04:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
 d08:	5f747075 	svcpl	0x00747075
 d0c:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
 d10:	6e655f65 	cdpvs	15, 6, cr5, cr5, cr5, {3}
 d14:	61640064 	cmnvs	r4, r4, rrx
 d18:	615f6174 	cmpvs	pc, r4, ror r1	; <UNPREDICTABLE>
 d1c:	74726f62 	ldrbtvc	r6, [r2], #-3938	; 0xf62
 d20:	6365765f 	cmnvs	r5, #99614720	; 0x5f00000
 d24:	00726f74 	rsbseq	r6, r2, r4, ror pc
 d28:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 d2c:	692d6530 	pushvs	{r4, r5, r8, sl, sp, lr}
 d30:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 d34:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
 d38:	746e692f 	strbtvc	r6, [lr], #-2351	; 0x92f
 d3c:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
 d40:	2d737470 	cfldrdcs	mvd7, [r3, #-448]!	; 0xfffffe40
 d44:	00632e63 	rsbeq	r2, r3, r3, ror #28
 d48:	65646e75 	strbvs	r6, [r4, #-3701]!	; 0xe75
 d4c:	656e6966 	strbvs	r6, [lr, #-2406]!	; 0x966
 d50:	6e695f64 	cdpvs	15, 6, cr5, cr9, cr4, {3}
 d54:	75727473 	ldrbvc	r7, [r2, #-1139]!	; 0x473
 d58:	6f697463 	svcvs	0x00697463
 d5c:	65765f6e 	ldrbvs	r5, [r6, #-3950]!	; 0xf6e
 d60:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 d64:	73657200 	cmnvc	r5, #0, 4
 d68:	765f7465 	ldrbvc	r7, [pc], -r5, ror #8
 d6c:	6f746365 	svcvs	0x00746365
 d70:	6f730072 	svcvs	0x00730072
 d74:	61777466 	cmnvs	r7, r6, ror #8
 d78:	695f6572 	ldmdbvs	pc, {r1, r4, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
 d7c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 d80:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
 d84:	6365765f 	cmnvs	r5, #99614720	; 0x5f00000
 d88:	00726f74 	rsbseq	r6, r2, r4, ror pc
 d8c:	74736166 	ldrbtvc	r6, [r3], #-358	; 0x166
 d90:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
 d94:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
 d98:	765f7470 			; <UNDEFINED> instruction: 0x765f7470
 d9c:	6f746365 	svcvs	0x00746365
 da0:	69740072 	ldmdbvs	r4!, {r1, r4, r5, r6}^
 da4:	5f72656d 	svcpl	0x0072656d
 da8:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 dac:	0064656c 	rsbeq	r6, r4, ip, ror #10
 db0:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
 db4:	68635f72 	stmdavs	r3!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 db8:	5f6b6365 	svcpl	0x006b6365
 dbc:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
 dc0:	00737465 	rsbseq	r7, r3, r5, ror #8
 dc4:	34317363 	ldrtcc	r7, [r1], #-867	; 0x363
 dc8:	692d6530 	pushvs	{r4, r5, r8, sl, sp, lr}
 dcc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 dd0:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
 dd4:	6d69742f 	cfstrdvs	mvd7, [r9, #-188]!	; 0xffffff44
 dd8:	692d7265 	pushvs	{r0, r2, r5, r6, r9, ip, sp, lr}
 ddc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 de0:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
 de4:	7200632e 	andvc	r6, r0, #-1207959552	; 0xb8000000
 de8:	615f6970 	cmpvs	pc, r0, ror r9	; <UNPREDICTABLE>
 dec:	745f6d72 	ldrbvc	r6, [pc], #-3442	; df4 <_start-0x720c>
 df0:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 df4:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 df8:	00745f6c 	rsbseq	r5, r4, ip, ror #30
 dfc:	5f657375 	svcpl	0x00657375
 e00:	69623233 	stmdbvs	r2!, {r0, r1, r4, r5, r9, ip, sp}^
 e04:	6f635f74 	svcvs	0x00635f74
 e08:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xe75
 e0c:	6e690072 	mcrvs	0, 3, r0, cr9, cr2, {3}
 e10:	6e655f74 	mcrvs	15, 3, r5, cr5, cr4, {3}
 e14:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
 e18:	6f630064 	svcvs	0x00630064
 e1c:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xe75
 e20:	6e655f72 	mcrvs	15, 3, r5, cr5, cr2, {3}
 e24:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
 e28:	6f630064 	svcvs	0x00630064
 e2c:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xe75
 e30:	72705f72 	rsbsvc	r5, r0, #456	; 0x1c8
 e34:	61637365 	cmnvs	r3, r5, ror #6
 e38:	0072656c 	rsbseq	r6, r2, ip, ror #10
 e3c:	6f697067 	svcvs	0x00697067
 e40:	6576655f 	ldrbvs	r6, [r6, #-1375]!	; 0x55f
 e44:	645f746e 	ldrbvs	r7, [pc], #-1134	; e4c <_start-0x71b4>
 e48:	63657465 	cmnvs	r5, #1694498816	; 0x65000000
 e4c:	00646574 	rsbeq	r6, r4, r4, ror r5
 e50:	53465047 	movtpl	r5, #24647	; 0x6047
 e54:	00324c45 	eorseq	r4, r2, r5, asr #24
 e58:	4c435047 	mcrrmi	0, 4, r5, r3, cr7
 e5c:	45003052 	strmi	r3, [r0, #-82]	; 0x52
 e60:	4c42414e 	stfmie	f4, [r2], {78}	; 0x4e
 e64:	52495f45 	subpl	r5, r9, #276	; 0x114
 e68:	325f5351 	subscc	r5, pc, #1140850689	; 0x44000001
 e6c:	5f736900 	svcpl	0x00736900
 e70:	6f697067 	svcvs	0x00697067
 e74:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
 e78:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 e7c:	65735f6f 	ldrbvs	r5, [r3, #-3951]!	; 0xf6f
 e80:	666f5f74 	uqsub16vs	r5, pc, r4	; <UNPREDICTABLE>
 e84:	796d0066 	stmdbvc	sp!, {r1, r2, r5, r6}^
 e88:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 e8c:	6970672f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r8, r9, sl, sp, lr}^
 e90:	00632e6f 	rsbeq	r2, r3, pc, ror #28
 e94:	5f746e69 	svcpl	0x00746e69
 e98:	6b73616d 	blvs	1cd9454 <__bss_end__+0x1ccdd34>
 e9c:	53504700 	cmppl	r0, #0, 14
 ea0:	00305445 	eorseq	r5, r0, r5, asr #8
 ea4:	45535047 	ldrbmi	r5, [r3, #-71]	; 0x47
 ea8:	72003154 	andvc	r3, r0, #84, 2
 eac:	735f6765 	cmpvc	pc, #26476544	; 0x1940000
 eb0:	00746174 	rsbseq	r6, r4, r4, ror r1
 eb4:	454c5047 	strbmi	r5, [ip, #-71]	; 0x47
 eb8:	47003056 	smlsdmi	r0, r6, r0, r3
 ebc:	56454c50 			; <UNDEFINED> instruction: 0x56454c50
 ec0:	70670031 	rsbvc	r0, r7, r1, lsr r0
 ec4:	725f6f69 	subsvc	r6, pc, #420	; 0x1a4
 ec8:	47006765 	strmi	r6, [r0, -r5, ror #14]
 ecc:	45534650 	ldrbmi	r4, [r3, #-1616]	; 0x650
 ed0:	4700304c 	strmi	r3, [r0, -ip, asr #32]
 ed4:	45534650 	ldrbmi	r4, [r3, #-1616]	; 0x650
 ed8:	4700314c 	strmi	r3, [r0, -ip, asr #2]
 edc:	45534650 	ldrbmi	r4, [r3, #-1616]	; 0x650
 ee0:	4700334c 	strmi	r3, [r0, -ip, asr #6]
 ee4:	45534650 	ldrbmi	r4, [r3, #-1616]	; 0x650
 ee8:	4700344c 	strmi	r3, [r0, -ip, asr #8]
 eec:	45534650 	ldrbmi	r4, [r3, #-1616]	; 0x650
 ef0:	6700354c 	strvs	r3, [r0, -ip, asr #10]
 ef4:	5f6f6970 	svcpl	0x006f6970
 ef8:	6c657366 	stclvs	3, cr7, [r5], #-408	; 0xfffffe68
 efc:	50470030 	subpl	r0, r7, r0, lsr r0
 f00:	31524c43 	cmpcc	r2, r3, asr #24
 f04:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 f08:	6e695f6f 	cdpvs	15, 6, cr5, cr9, cr15, {3}
 f0c:	69725f74 	ldmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 f10:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
 f14:	6764655f 			; <UNDEFINED> instruction: 0x6764655f
 f18:	50470065 	subpl	r0, r7, r5, rrx
 f1c:	304e4552 	subcc	r4, lr, r2, asr r5
 f20:	52504700 	subspl	r4, r0, #0, 14
 f24:	00314e45 	eorseq	r4, r1, r5, asr #28
 f28:	6f697067 	svcvs	0x00697067
 f2c:	6576655f 	ldrbvs	r6, [r6, #-1375]!	; 0x55f
 f30:	635f746e 	cmpvs	pc, #1845493760	; 0x6e000000
 f34:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 f38:	51524900 	cmppl	r2, r0, lsl #18
 f3c:	4e45505f 	mcrmi	0, 2, r5, cr5, cr15, {2}
 f40:	474e4944 	strbmi	r4, [lr, -r4, asr #18]
 f44:	4900315f 	stmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, ip, sp}
 f48:	505f5152 	subspl	r5, pc, r2, asr r1	; <UNPREDICTABLE>
 f4c:	49444e45 	stmdbmi	r4, {r0, r2, r6, r9, sl, fp, lr}^
 f50:	325f474e 	subscc	r4, pc, #20447232	; 0x1380000
 f54:	74696200 	strbtvc	r6, [r9], #-512	; 0x200
 f58:	6b73616d 	blvs	1cd9514 <__bss_end__+0x1ccddf4>
 f5c:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 f60:	65735f6f 	ldrbvs	r5, [r3, #-3951]!	; 0xf6f
 f64:	66003074 			; <UNDEFINED> instruction: 0x66003074
 f68:	00636e75 	rsbeq	r6, r3, r5, ror lr
 f6c:	44455047 	strbmi	r5, [r5], #-71	; 0x47
 f70:	47003053 	smlsdmi	r0, r3, r0, r3
 f74:	53444550 	movtpl	r4, #17744	; 0x4550
 f78:	70670031 	rsbvc	r0, r7, r1, lsr r0
 f7c:	735f6f69 	cmpvc	pc, #420	; 0x1a4
 f80:	6f5f7465 	svcvs	0x005f7465
 f84:	5047006e 	subpl	r0, r7, lr, rrx
 f88:	304e4546 	subcc	r4, lr, r6, asr #10
 f8c:	46504700 	ldrbmi	r4, [r0], -r0, lsl #14
 f90:	00314e45 	eorseq	r4, r1, r5, asr #28
 f94:	6f697067 	svcvs	0x00697067
 f98:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
 f9c:	6c61665f 	stclvs	6, cr6, [r1], #-380	; 0xfffffe84
 fa0:	676e696c 	strbvs	r6, [lr, -ip, ror #18]!
 fa4:	6764655f 			; <UNDEFINED> instruction: 0x6764655f
 fa8:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0x65
 fac:	65735f67 	ldrbvs	r5, [r3, #-3943]!	; 0xf67
 fb0:	7463656c 	strbtvc	r6, [r3], #-1388	; 0x56c
 fb4:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 fb8:	6c635f6f 	stclvs	15, cr5, [r3], #-444	; 0xfffffe44
 fbc:	63003072 	movwvs	r3, #114	; 0x72
 fc0:	656e5f62 	strbvs	r5, [lr, #-3938]!	; 0xf62
 fc4:	73630077 	cmnvc	r3, #119	; 0x77
 fc8:	65303431 	ldrvs	r3, [r0, #-1073]!	; 0x431
 fcc:	6372732d 	cmnvs	r2, #-1275068416	; 0xb4000000
 fd0:	6e6f632f 	cdpvs	3, 6, cr6, cr15, cr15, {1}
 fd4:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; e0c <_start-0x71f4>
 fd8:	6f6c622d 	svcvs	0x006c622d
 fdc:	632e6b63 	teqvs	lr, #101376	; 0x18c00
	...

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000020 	andeq	r0, r0, r0, lsr #32
  14:	00000000 	andeq	r0, r0, r0
  18:	00008010 	andeq	r8, r0, r0, lsl r0
  1c:	00000100 	andeq	r0, r0, r0, lsl #2
  20:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xe42
  24:	86068507 	strhi	r8, [r6], -r7, lsl #10
  28:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
  2c:	8e028903 	cdphi	9, 0, cr8, cr2, cr3, {0}
  30:	280e4201 	stmdacs	lr, {r0, r9, lr}
  34:	00000018 	andeq	r0, r0, r8, lsl r0
  38:	00000000 	andeq	r0, r0, r0
  3c:	00008110 	andeq	r8, r0, r0, lsl r1
  40:	000000b4 	strheq	r0, [r0], -r4
  44:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
  48:	86038504 	strhi	r8, [r3], -r4, lsl #10
  4c:	00018e02 	andeq	r8, r1, r2, lsl #28
  50:	0000000c 	andeq	r0, r0, ip
  54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  58:	7c020001 	stcvc	0, cr0, [r2], {1}
  5c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  60:	0000000c 	andeq	r0, r0, ip
  64:	00000050 	andeq	r0, r0, r0, asr r0
  68:	000081c4 	andeq	r8, r0, r4, asr #3
  6c:	00000008 	andeq	r0, r0, r8
  70:	0000000c 	andeq	r0, r0, ip
  74:	00000050 	andeq	r0, r0, r0, asr r0
  78:	000081cc 	andeq	r8, r0, ip, asr #3
  7c:	00000008 	andeq	r0, r0, r8
  80:	0000000c 	andeq	r0, r0, ip
  84:	00000050 	andeq	r0, r0, r0, asr r0
  88:	000081d4 	ldrdeq	r8, [r0], -r4
  8c:	00000008 	andeq	r0, r0, r8
  90:	0000000c 	andeq	r0, r0, ip
  94:	00000050 	andeq	r0, r0, r0, asr r0
  98:	000081dc 	ldrdeq	r8, [r0], -ip
  9c:	00000038 	andeq	r0, r0, r8, lsr r0
  a0:	0000000c 	andeq	r0, r0, ip
  a4:	00000050 	andeq	r0, r0, r0, asr r0
  a8:	00008214 	andeq	r8, r0, r4, lsl r2
  ac:	00000028 	andeq	r0, r0, r8, lsr #32
  b0:	00000014 	andeq	r0, r0, r4, lsl r0
  b4:	00000050 	andeq	r0, r0, r0, asr r0
  b8:	0000823c 	andeq	r8, r0, ip, lsr r2
  bc:	00000018 	andeq	r0, r0, r8, lsl r0
  c0:	83080e42 	movwhi	r0, #36418	; 0x8e42
  c4:	00018e02 	andeq	r8, r1, r2, lsl #28
  c8:	00000014 	andeq	r0, r0, r4, lsl r0
  cc:	00000050 	andeq	r0, r0, r0, asr r0
  d0:	00008254 	andeq	r8, r0, r4, asr r2
  d4:	00000084 	andeq	r0, r0, r4, lsl #1
  d8:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
  dc:	00018e02 	andeq	r8, r1, r2, lsl #28
  e0:	00000014 	andeq	r0, r0, r4, lsl r0
  e4:	00000050 	andeq	r0, r0, r0, asr r0
  e8:	000082d8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
  ec:	00000098 	muleq	r0, r8, r0
  f0:	83080e42 	movwhi	r0, #36418	; 0x8e42
  f4:	00018e02 	andeq	r8, r1, r2, lsl #28
  f8:	00000014 	andeq	r0, r0, r4, lsl r0
  fc:	00000050 	andeq	r0, r0, r0, asr r0
 100:	00008370 	andeq	r8, r0, r0, ror r3
 104:	00000084 	andeq	r0, r0, r4, lsl #1
 108:	83080e42 	movwhi	r0, #36418	; 0x8e42
 10c:	00018e02 	andeq	r8, r1, r2, lsl #28
 110:	0000000c 	andeq	r0, r0, ip
 114:	00000050 	andeq	r0, r0, r0, asr r0
 118:	000083f4 	strdeq	r8, [r0], -r4
 11c:	00000010 	andeq	r0, r0, r0, lsl r0
 120:	00000018 	andeq	r0, r0, r8, lsl r0
 124:	00000050 	andeq	r0, r0, r0, asr r0
 128:	00008404 	andeq	r8, r0, r4, lsl #8
 12c:	0000009c 	muleq	r0, ip, r0
 130:	83100e42 	tsthi	r0, #1056	; 0x420
 134:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 138:	00018e02 	andeq	r8, r1, r2, lsl #28
 13c:	00000018 	andeq	r0, r0, r8, lsl r0
 140:	00000050 	andeq	r0, r0, r0, asr r0
 144:	000084a0 	andeq	r8, r0, r0, lsr #9
 148:	00000054 	andeq	r0, r0, r4, asr r0
 14c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 150:	86038504 	strhi	r8, [r3], -r4, lsl #10
 154:	00018e02 	andeq	r8, r1, r2, lsl #28
 158:	0000000c 	andeq	r0, r0, ip
 15c:	00000050 	andeq	r0, r0, r0, asr r0
 160:	000084f4 	strdeq	r8, [r0], -r4
 164:	00000018 	andeq	r0, r0, r8, lsl r0
 168:	00000014 	andeq	r0, r0, r4, lsl r0
 16c:	00000050 	andeq	r0, r0, r0, asr r0
 170:	0000850c 	andeq	r8, r0, ip, lsl #10
 174:	00000048 	andeq	r0, r0, r8, asr #32
 178:	83080e42 	movwhi	r0, #36418	; 0x8e42
 17c:	00018e02 	andeq	r8, r1, r2, lsl #28
 180:	00000014 	andeq	r0, r0, r4, lsl r0
 184:	00000050 	andeq	r0, r0, r0, asr r0
 188:	00008554 	andeq	r8, r0, r4, asr r5
 18c:	0000002c 	andeq	r0, r0, ip, lsr #32
 190:	83080e42 	movwhi	r0, #36418	; 0x8e42
 194:	00018e02 	andeq	r8, r1, r2, lsl #28
 198:	00000020 	andeq	r0, r0, r0, lsr #32
 19c:	00000050 	andeq	r0, r0, r0, asr r0
 1a0:	00008580 	andeq	r8, r0, r0, lsl #11
 1a4:	00000098 	muleq	r0, r8, r0
 1a8:	83200e42 	teqhi	r0, #1056	; 0x420
 1ac:	85078408 	strhi	r8, [r7, #-1032]	; 0x408
 1b0:	87058606 	strhi	r8, [r5, -r6, lsl #12]
 1b4:	89038804 	stmdbhi	r3, {r2, fp, pc}
 1b8:	00018e02 	andeq	r8, r1, r2, lsl #28
 1bc:	00000014 	andeq	r0, r0, r4, lsl r0
 1c0:	00000050 	andeq	r0, r0, r0, asr r0
 1c4:	00008618 	andeq	r8, r0, r8, lsl r6
 1c8:	0000002c 	andeq	r0, r0, ip, lsr #32
 1cc:	83080e42 	movwhi	r0, #36418	; 0x8e42
 1d0:	00018e02 	andeq	r8, r1, r2, lsl #28
 1d4:	0000000c 	andeq	r0, r0, ip
 1d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1dc:	7c020001 	stcvc	0, cr0, [r2], {1}
 1e0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1e4:	00000018 	andeq	r0, r0, r8, lsl r0
 1e8:	000001d4 	ldrdeq	r0, [r0], -r4
 1ec:	00008770 	andeq	r8, r0, r0, ror r7
 1f0:	00000080 	andeq	r0, r0, r0, lsl #1
 1f4:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 1f8:	42018e02 	andmi	r8, r1, #2, 28
 1fc:	0000180e 	andeq	r1, r0, lr, lsl #16
 200:	00000014 	andeq	r0, r0, r4, lsl r0
 204:	000001d4 	ldrdeq	r0, [r0], -r4
 208:	000087f0 	strdeq	r8, [r0], -r0
 20c:	00000044 	andeq	r0, r0, r4, asr #32
 210:	83080e42 	movwhi	r0, #36418	; 0x8e42
 214:	00018e02 	andeq	r8, r1, r2, lsl #28
 218:	00000018 	andeq	r0, r0, r8, lsl r0
 21c:	000001d4 	ldrdeq	r0, [r0], -r4
 220:	00008834 	andeq	r8, r0, r4, lsr r8
 224:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
 228:	83100e42 	tsthi	r0, #1056	; 0x420
 22c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 230:	00018e02 	andeq	r8, r1, r2, lsl #28
 234:	00000018 	andeq	r0, r0, r8, lsl r0
 238:	000001d4 	ldrdeq	r0, [r0], -r4
 23c:	000089e8 	andeq	r8, r0, r8, ror #19
 240:	0000006c 	andeq	r0, r0, ip, rrx
 244:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
 248:	86028503 	strhi	r8, [r2], -r3, lsl #10
 24c:	00000001 	andeq	r0, r0, r1
 250:	0000001c 	andeq	r0, r0, ip, lsl r0
 254:	000001d4 	ldrdeq	r0, [r0], -r4
 258:	00008a54 	andeq	r8, r0, r4, asr sl
 25c:	00000034 	andeq	r0, r0, r4, lsr r0
 260:	83180e42 	tsthi	r8, #1056	; 0x420
 264:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
 268:	87038604 	strhi	r8, [r3, -r4, lsl #12]
 26c:	00018e02 	andeq	r8, r1, r2, lsl #28
 270:	00000018 	andeq	r0, r0, r8, lsl r0
 274:	000001d4 	ldrdeq	r0, [r0], -r4
 278:	00008a88 	andeq	r8, r0, r8, lsl #21
 27c:	00000058 	andeq	r0, r0, r8, asr r0
 280:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 284:	86038504 	strhi	r8, [r3], -r4, lsl #10
 288:	00018e02 	andeq	r8, r1, r2, lsl #28
 28c:	00000018 	andeq	r0, r0, r8, lsl r0
 290:	000001d4 	ldrdeq	r0, [r0], -r4
 294:	00008ae0 	andeq	r8, r0, r0, ror #21
 298:	000000a4 	andeq	r0, r0, r4, lsr #1
 29c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 2a0:	86038504 	strhi	r8, [r3], -r4, lsl #10
 2a4:	00018e02 	andeq	r8, r1, r2, lsl #28
 2a8:	00000020 	andeq	r0, r0, r0, lsr #32
 2ac:	000001d4 	ldrdeq	r0, [r0], -r4
 2b0:	00008b84 	andeq	r8, r0, r4, lsl #23
 2b4:	00000124 	andeq	r0, r0, r4, lsr #2
 2b8:	84200e42 	strthi	r0, [r0], #-3650	; 0xe42
 2bc:	86078508 	strhi	r8, [r7], -r8, lsl #10
 2c0:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
 2c4:	8a038904 	bhi	e26dc <__bss_end__+0xd6fbc>
 2c8:	00018e02 	andeq	r8, r1, r2, lsl #28
 2cc:	0000000c 	andeq	r0, r0, ip
 2d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2d4:	7c020001 	stcvc	0, cr0, [r2], {1}
 2d8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2dc:	0000000c 	andeq	r0, r0, ip
 2e0:	000002cc 	andeq	r0, r0, ip, asr #5
 2e4:	00008d68 	andeq	r8, r0, r8, ror #26
 2e8:	00000020 	andeq	r0, r0, r0, lsr #32
 2ec:	0000000c 	andeq	r0, r0, ip
 2f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2f4:	7c020001 	stcvc	0, cr0, [r2], {1}
 2f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2fc:	00000024 	andeq	r0, r0, r4, lsr #32
 300:	000002ec 	andeq	r0, r0, ip, ror #5
 304:	00008d88 	andeq	r8, r0, r8, lsl #27
 308:	00000058 	andeq	r0, r0, r8, asr r0
 30c:	80100e42 	andshi	r0, r0, r2, asr #28
 310:	82038104 	andhi	r8, r3, #4, 2
 314:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
 318:	07841c0e 	streq	r1, [r4, lr, lsl #24]
 31c:	058e0685 	streq	r0, [lr, #1669]	; 0x685
 320:	00280e42 	eoreq	r0, r8, r2, asr #28
 324:	0000000c 	andeq	r0, r0, ip
 328:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 32c:	7c020001 	stcvc	0, cr0, [r2], {1}
 330:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 334:	00000014 	andeq	r0, r0, r4, lsl r0
 338:	00000324 	andeq	r0, r0, r4, lsr #6
 33c:	00008de0 	andeq	r8, r0, r0, ror #27
 340:	00000014 	andeq	r0, r0, r4, lsl r0
 344:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 348:	00018e02 	andeq	r8, r1, r2, lsl #28
 34c:	0000000c 	andeq	r0, r0, ip
 350:	00000324 	andeq	r0, r0, r4, lsr #6
 354:	00008df4 	strdeq	r8, [r0], -r4
 358:	00000018 	andeq	r0, r0, r8, lsl r0
 35c:	0000000c 	andeq	r0, r0, ip
 360:	00000324 	andeq	r0, r0, r4, lsr #6
 364:	00008e0c 	andeq	r8, r0, ip, lsl #28
 368:	00000010 	andeq	r0, r0, r0, lsl r0
 36c:	0000000c 	andeq	r0, r0, ip
 370:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 374:	7c020001 	stcvc	0, cr0, [r2], {1}
 378:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 37c:	00000018 	andeq	r0, r0, r8, lsl r0
 380:	0000036c 	andeq	r0, r0, ip, ror #6
 384:	00008e1c 	andeq	r8, r0, ip, lsl lr
 388:	00000034 	andeq	r0, r0, r4, lsr r0
 38c:	83100e42 	tsthi	r0, #1056	; 0x420
 390:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 394:	00018e02 	andeq	r8, r1, r2, lsl #28
 398:	0000000c 	andeq	r0, r0, ip
 39c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3a0:	7c020001 	stcvc	0, cr0, [r2], {1}
 3a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3a8:	0000000c 	andeq	r0, r0, ip
 3ac:	00000398 	muleq	r0, r8, r3
 3b0:	00008e50 	andeq	r8, r0, r0, asr lr
 3b4:	00000014 	andeq	r0, r0, r4, lsl r0
 3b8:	0000000c 	andeq	r0, r0, ip
 3bc:	00000398 	muleq	r0, r8, r3
 3c0:	00008e64 	andeq	r8, r0, r4, ror #28
 3c4:	0000002c 	andeq	r0, r0, ip, lsr #32
 3c8:	0000000c 	andeq	r0, r0, ip
 3cc:	00000398 	muleq	r0, r8, r3
 3d0:	00008e90 	muleq	r0, r0, lr
 3d4:	00000040 	andeq	r0, r0, r0, asr #32
 3d8:	00000020 	andeq	r0, r0, r0, lsr #32
 3dc:	00000398 	muleq	r0, r8, r3
 3e0:	00008ed0 	ldrdeq	r8, [r0], -r0
 3e4:	0000019c 	muleq	r0, ip, r1
 3e8:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 3ec:	86058506 	strhi	r8, [r5], -r6, lsl #10
 3f0:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 3f4:	42018e02 	andmi	r8, r1, #2, 28
 3f8:	0000580e 	andeq	r5, r0, lr, lsl #16
 3fc:	00000014 	andeq	r0, r0, r4, lsl r0
 400:	00000398 	muleq	r0, r8, r3
 404:	0000906c 	andeq	r9, r0, ip, rrx
 408:	00000054 	andeq	r0, r0, r4, asr r0
 40c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 410:	00018e02 	andeq	r8, r1, r2, lsl #28
 414:	00000028 	andeq	r0, r0, r8, lsr #32
 418:	00000398 	muleq	r0, r8, r3
 41c:	000090c0 	andeq	r9, r0, r0, asr #1
 420:	00000288 	andeq	r0, r0, r8, lsl #5
 424:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
 428:	86088509 	strhi	r8, [r8], -r9, lsl #10
 42c:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
 430:	8a048905 	bhi	12284c <__bss_end__+0x11712c>
 434:	8e028b03 	vmlahi.f64	d8, d2, d3
 438:	b00e4201 	andlt	r4, lr, r1, lsl #4
 43c:	00000001 	andeq	r0, r0, r1
 440:	0000000c 	andeq	r0, r0, ip
 444:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 448:	7c020001 	stcvc	0, cr0, [r2], {1}
 44c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 450:	00000014 	andeq	r0, r0, r4, lsl r0
 454:	00000440 	andeq	r0, r0, r0, asr #8
 458:	00009348 	andeq	r9, r0, r8, asr #6
 45c:	00000028 	andeq	r0, r0, r8, lsr #32
 460:	83080e42 	movwhi	r0, #36418	; 0x8e42
 464:	00018e02 	andeq	r8, r1, r2, lsl #28
 468:	0000000c 	andeq	r0, r0, ip
 46c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 470:	7c020001 	stcvc	0, cr0, [r2], {1}
 474:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 478:	00000014 	andeq	r0, r0, r4, lsl r0
 47c:	00000468 	andeq	r0, r0, r8, ror #8
 480:	00009370 	andeq	r9, r0, r0, ror r3
 484:	00000020 	andeq	r0, r0, r0, lsr #32
 488:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 48c:	00018e02 	andeq	r8, r1, r2, lsl #28
 490:	00000014 	andeq	r0, r0, r4, lsl r0
 494:	00000468 	andeq	r0, r0, r8, ror #8
 498:	00009390 	muleq	r0, r0, r3
 49c:	00000090 	muleq	r0, r0, r0
 4a0:	83080e42 	movwhi	r0, #36418	; 0x8e42
 4a4:	00018e02 	andeq	r8, r1, r2, lsl #28
 4a8:	0000000c 	andeq	r0, r0, ip
 4ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4b0:	7c020001 	stcvc	0, cr0, [r2], {1}
 4b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4b8:	0000000c 	andeq	r0, r0, ip
 4bc:	000004a8 	andeq	r0, r0, r8, lsr #9
 4c0:	00009420 	andeq	r9, r0, r0, lsr #8
 4c4:	00000018 	andeq	r0, r0, r8, lsl r0
 4c8:	0000000c 	andeq	r0, r0, ip
 4cc:	000004a8 	andeq	r0, r0, r8, lsr #9
 4d0:	00009438 	andeq	r9, r0, r8, lsr r4
 4d4:	00000014 	andeq	r0, r0, r4, lsl r0
 4d8:	00000014 	andeq	r0, r0, r4, lsl r0
 4dc:	000004a8 	andeq	r0, r0, r8, lsr #9
 4e0:	0000944c 	andeq	r9, r0, ip, asr #8
 4e4:	00000048 	andeq	r0, r0, r8, asr #32
 4e8:	83080e42 	movwhi	r0, #36418	; 0x8e42
 4ec:	00018e02 	andeq	r8, r1, r2, lsl #28
 4f0:	0000000c 	andeq	r0, r0, ip
 4f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4f8:	7c020001 	stcvc	0, cr0, [r2], {1}
 4fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 500:	0000000c 	andeq	r0, r0, ip
 504:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 508:	00009494 	muleq	r0, r4, r4
 50c:	0000001c 	andeq	r0, r0, ip, lsl r0
 510:	00000014 	andeq	r0, r0, r4, lsl r0
 514:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 518:	000094b0 			; <UNDEFINED> instruction: 0x000094b0
 51c:	00000014 	andeq	r0, r0, r4, lsl r0
 520:	83080e42 	movwhi	r0, #36418	; 0x8e42
 524:	00018e02 	andeq	r8, r1, r2, lsl #28
 528:	00000014 	andeq	r0, r0, r4, lsl r0
 52c:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 530:	000094c4 	andeq	r9, r0, r4, asr #9
 534:	0000000c 	andeq	r0, r0, ip
 538:	83080e42 	movwhi	r0, #36418	; 0x8e42
 53c:	00018e02 	andeq	r8, r1, r2, lsl #28
 540:	00000018 	andeq	r0, r0, r8, lsl r0
 544:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 548:	000094d0 	ldrdeq	r9, [r0], -r0
 54c:	00000024 	andeq	r0, r0, r4, lsr #32
 550:	83100e42 	tsthi	r0, #1056	; 0x420
 554:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 558:	00018e02 	andeq	r8, r1, r2, lsl #28
 55c:	00000014 	andeq	r0, r0, r4, lsl r0
 560:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 564:	000094f4 	strdeq	r9, [r0], -r4
 568:	00000014 	andeq	r0, r0, r4, lsl r0
 56c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 570:	00018e02 	andeq	r8, r1, r2, lsl #28
 574:	00000014 	andeq	r0, r0, r4, lsl r0
 578:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 57c:	00009508 	andeq	r9, r0, r8, lsl #10
 580:	00000014 	andeq	r0, r0, r4, lsl r0
 584:	83080e42 	movwhi	r0, #36418	; 0x8e42
 588:	00018e02 	andeq	r8, r1, r2, lsl #28
 58c:	0000000c 	andeq	r0, r0, ip
 590:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 594:	7c020001 	stcvc	0, cr0, [r2], {1}
 598:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 59c:	00000018 	andeq	r0, r0, r8, lsl r0
 5a0:	0000058c 	andeq	r0, r0, ip, lsl #11
 5a4:	0000951c 	andeq	r9, r0, ip, lsl r5
 5a8:	00000074 	andeq	r0, r0, r4, ror r0
 5ac:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 5b0:	86038504 	strhi	r8, [r3], -r4, lsl #10
 5b4:	00018e02 	andeq	r8, r1, r2, lsl #28
 5b8:	00000014 	andeq	r0, r0, r4, lsl r0
 5bc:	0000058c 	andeq	r0, r0, ip, lsl #11
 5c0:	00009590 	muleq	r0, r0, r5
 5c4:	0000009c 	muleq	r0, ip, r0
 5c8:	83080e42 	movwhi	r0, #36418	; 0x8e42
 5cc:	00018e02 	andeq	r8, r1, r2, lsl #28
 5d0:	00000014 	andeq	r0, r0, r4, lsl r0
 5d4:	0000058c 	andeq	r0, r0, ip, lsl #11
 5d8:	0000962c 	andeq	r9, r0, ip, lsr #12
 5dc:	0000005c 	andeq	r0, r0, ip, asr r0
 5e0:	83080e42 	movwhi	r0, #36418	; 0x8e42
 5e4:	00018e02 	andeq	r8, r1, r2, lsl #28
 5e8:	0000000c 	andeq	r0, r0, ip
 5ec:	0000058c 	andeq	r0, r0, ip, lsl #11
 5f0:	00009688 	andeq	r9, r0, r8, lsl #13
 5f4:	00000018 	andeq	r0, r0, r8, lsl r0
 5f8:	0000000c 	andeq	r0, r0, ip
 5fc:	0000058c 	andeq	r0, r0, ip, lsl #11
 600:	000096a0 	andeq	r9, r0, r0, lsr #13
 604:	00000010 	andeq	r0, r0, r0, lsl r0
 608:	00000014 	andeq	r0, r0, r4, lsl r0
 60c:	0000058c 	andeq	r0, r0, ip, lsl #11
 610:	000096b0 			; <UNDEFINED> instruction: 0x000096b0
 614:	00000054 	andeq	r0, r0, r4, asr r0
 618:	83080e42 	movwhi	r0, #36418	; 0x8e42
 61c:	00018e02 	andeq	r8, r1, r2, lsl #28
 620:	0000000c 	andeq	r0, r0, ip
 624:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 628:	7c020001 	stcvc	0, cr0, [r2], {1}
 62c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 630:	0000001c 	andeq	r0, r0, ip, lsl r0
 634:	00000620 	andeq	r0, r0, r0, lsr #12
 638:	00009704 	andeq	r9, r0, r4, lsl #14
 63c:	00000154 	andeq	r0, r0, r4, asr r1
 640:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 644:	86058506 	strhi	r8, [r5], -r6, lsl #10
 648:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 64c:	00018e02 	andeq	r8, r1, r2, lsl #28
 650:	00000020 	andeq	r0, r0, r0, lsr #32
 654:	00000620 	andeq	r0, r0, r0, lsr #12
 658:	00009858 	andeq	r9, r0, r8, asr r8
 65c:	000001c8 	andeq	r0, r0, r8, asr #3
 660:	83200e42 	teqhi	r0, #1056	; 0x420
 664:	85078408 	strhi	r8, [r7, #-1032]	; 0x408
 668:	87058606 	strhi	r8, [r5, -r6, lsl #12]
 66c:	89038804 	stmdbhi	r3, {r2, fp, pc}
 670:	00018e02 	andeq	r8, r1, r2, lsl #28
 674:	00000020 	andeq	r0, r0, r0, lsr #32
 678:	00000620 	andeq	r0, r0, r0, lsr #12
 67c:	00009a20 	andeq	r9, r0, r0, lsr #20
 680:	00000090 	muleq	r0, r0, r0
 684:	84200e42 	strthi	r0, [r0], #-3650	; 0xe42
 688:	86078508 	strhi	r8, [r7], -r8, lsl #10
 68c:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
 690:	8a038904 	bhi	e2aa8 <__bss_end__+0xd7388>
 694:	00018e02 	andeq	r8, r1, r2, lsl #28
 698:	0000001c 	andeq	r0, r0, ip, lsl r0
 69c:	00000620 	andeq	r0, r0, r0, lsr #12
 6a0:	00009ab0 			; <UNDEFINED> instruction: 0x00009ab0
 6a4:	0000007c 	andeq	r0, r0, ip, ror r0
 6a8:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 6ac:	86058506 	strhi	r8, [r5], -r6, lsl #10
 6b0:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 6b4:	00018e02 	andeq	r8, r1, r2, lsl #28
 6b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6bc:	00000620 	andeq	r0, r0, r0, lsr #12
 6c0:	00009b2c 	andeq	r9, r0, ip, lsr #22
 6c4:	000000c0 	andeq	r0, r0, r0, asr #1
 6c8:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
 6cc:	86058506 	strhi	r8, [r5], -r6, lsl #10
 6d0:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 6d4:	00018e02 	andeq	r8, r1, r2, lsl #28
 6d8:	00000014 	andeq	r0, r0, r4, lsl r0
 6dc:	00000620 	andeq	r0, r0, r0, lsr #12
 6e0:	00009bec 	andeq	r9, r0, ip, ror #23
 6e4:	0000003c 	andeq	r0, r0, ip, lsr r0
 6e8:	83080e42 	movwhi	r0, #36418	; 0x8e42
 6ec:	00018e02 	andeq	r8, r1, r2, lsl #28
 6f0:	00000018 	andeq	r0, r0, r8, lsl r0
 6f4:	00000620 	andeq	r0, r0, r0, lsr #12
 6f8:	00009c28 	andeq	r9, r0, r8, lsr #24
 6fc:	0000002c 	andeq	r0, r0, ip, lsr #32
 700:	83100e42 	tsthi	r0, #1056	; 0x420
 704:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 708:	00018e02 	andeq	r8, r1, r2, lsl #28
 70c:	00000024 	andeq	r0, r0, r4, lsr #32
 710:	00000620 	andeq	r0, r0, r0, lsr #12
 714:	00009c54 	andeq	r9, r0, r4, asr ip
 718:	00000084 	andeq	r0, r0, r4, lsl #1
 71c:	810c0e42 	tsthi	ip, r2, asr #28
 720:	83028203 	movwhi	r8, #8707	; 0x2203
 724:	180e4201 	stmdane	lr, {r0, r9, lr}
 728:	05850684 	streq	r0, [r5, #1668]	; 0x684
 72c:	0e42048e 	cdpeq	4, 4, cr0, cr2, cr14, {4}
 730:	000003e8 	andeq	r0, r0, r8, ror #7
 734:	00000014 	andeq	r0, r0, r4, lsl r0
 738:	00000620 	andeq	r0, r0, r0, lsr #12
 73c:	00009cd8 	ldrdeq	r9, [r0], -r8
 740:	0000004c 	andeq	r0, r0, ip, asr #32
 744:	8e040e42 	cdphi	14, 0, cr0, cr4, cr2, {2}
 748:	100e4201 	andne	r4, lr, r1, lsl #4
 74c:	0000000c 	andeq	r0, r0, ip
 750:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 754:	7c020001 	stcvc	0, cr0, [r2], {1}
 758:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 75c:	00000018 	andeq	r0, r0, r8, lsl r0
 760:	0000074c 	andeq	r0, r0, ip, asr #14
 764:	00009d24 	andeq	r9, r0, r4, lsr #26
 768:	0000009c 	muleq	r0, ip, r0
 76c:	83100e42 	tsthi	r0, #1056	; 0x420
 770:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 774:	00018e02 	andeq	r8, r1, r2, lsl #28
 778:	00000014 	andeq	r0, r0, r4, lsl r0
 77c:	0000074c 	andeq	r0, r0, ip, asr #14
 780:	00009dc0 	andeq	r9, r0, r0, asr #27
 784:	0000001c 	andeq	r0, r0, ip, lsl r0
 788:	83080e42 	movwhi	r0, #36418	; 0x8e42
 78c:	00018e02 	andeq	r8, r1, r2, lsl #28
 790:	00000014 	andeq	r0, r0, r4, lsl r0
 794:	0000074c 	andeq	r0, r0, ip, asr #14
 798:	00009ddc 	ldrdeq	r9, [r0], -ip
 79c:	00000028 	andeq	r0, r0, r8, lsr #32
 7a0:	83080e42 	movwhi	r0, #36418	; 0x8e42
 7a4:	00018e02 	andeq	r8, r1, r2, lsl #28
 7a8:	00000014 	andeq	r0, r0, r4, lsl r0
 7ac:	0000074c 	andeq	r0, r0, ip, asr #14
 7b0:	00009e04 	andeq	r9, r0, r4, lsl #28
 7b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 7b8:	83080e42 	movwhi	r0, #36418	; 0x8e42
 7bc:	00018e02 	andeq	r8, r1, r2, lsl #28
 7c0:	00000014 	andeq	r0, r0, r4, lsl r0
 7c4:	0000074c 	andeq	r0, r0, ip, asr #14
 7c8:	00009e20 	andeq	r9, r0, r0, lsr #28
 7cc:	0000002c 	andeq	r0, r0, ip, lsr #32
 7d0:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 7d4:	00018e02 	andeq	r8, r1, r2, lsl #28
 7d8:	00000014 	andeq	r0, r0, r4, lsl r0
 7dc:	0000074c 	andeq	r0, r0, ip, asr #14
 7e0:	00009e4c 	andeq	r9, r0, ip, asr #28
 7e4:	0000000c 	andeq	r0, r0, ip
 7e8:	83080e42 	movwhi	r0, #36418	; 0x8e42
 7ec:	00018e02 	andeq	r8, r1, r2, lsl #28
 7f0:	00000014 	andeq	r0, r0, r4, lsl r0
 7f4:	0000074c 	andeq	r0, r0, ip, asr #14
 7f8:	00009e58 	andeq	r9, r0, r8, asr lr
 7fc:	00000020 	andeq	r0, r0, r0, lsr #32
 800:	83080e42 	movwhi	r0, #36418	; 0x8e42
 804:	00018e02 	andeq	r8, r1, r2, lsl #28
 808:	0000000c 	andeq	r0, r0, ip
 80c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 810:	7c020001 	stcvc	0, cr0, [r2], {1}
 814:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 818:	00000014 	andeq	r0, r0, r4, lsl r0
 81c:	00000808 	andeq	r0, r0, r8, lsl #16
 820:	00009e78 	andeq	r9, r0, r8, ror lr
 824:	00000068 	andeq	r0, r0, r8, rrx
 828:	83080e42 	movwhi	r0, #36418	; 0x8e42
 82c:	00018e02 	andeq	r8, r1, r2, lsl #28
 830:	00000014 	andeq	r0, r0, r4, lsl r0
 834:	00000808 	andeq	r0, r0, r8, lsl #16
 838:	00009ee0 	andeq	r9, r0, r0, ror #29
 83c:	00000044 	andeq	r0, r0, r4, asr #32
 840:	8e040e42 	cdphi	14, 0, cr0, cr4, cr2, {2}
 844:	100e4201 	andne	r4, lr, r1, lsl #4
 848:	00000014 	andeq	r0, r0, r4, lsl r0
 84c:	00000808 	andeq	r0, r0, r8, lsl #16
 850:	00009f24 	andeq	r9, r0, r4, lsr #30
 854:	00000044 	andeq	r0, r0, r4, asr #32
 858:	8e040e42 	cdphi	14, 0, cr0, cr4, cr2, {2}
 85c:	100e4201 	andne	r4, lr, r1, lsl #4
 860:	00000014 	andeq	r0, r0, r4, lsl r0
 864:	00000808 	andeq	r0, r0, r8, lsl #16
 868:	00009f68 	andeq	r9, r0, r8, ror #30
 86c:	00000044 	andeq	r0, r0, r4, asr #32
 870:	8e040e42 	cdphi	14, 0, cr0, cr4, cr2, {2}
 874:	100e4201 	andne	r4, lr, r1, lsl #4
 878:	00000014 	andeq	r0, r0, r4, lsl r0
 87c:	00000808 	andeq	r0, r0, r8, lsl #16
 880:	00009fac 	andeq	r9, r0, ip, lsr #31
 884:	00000044 	andeq	r0, r0, r4, asr #32
 888:	8e040e42 	cdphi	14, 0, cr0, cr4, cr2, {2}
 88c:	100e4201 	andne	r4, lr, r1, lsl #4
 890:	00000014 	andeq	r0, r0, r4, lsl r0
 894:	00000808 	andeq	r0, r0, r8, lsl #16
 898:	00009ff0 	strdeq	r9, [r0], -r0
 89c:	00000044 	andeq	r0, r0, r4, asr #32
 8a0:	8e040e42 	cdphi	14, 0, cr0, cr4, cr2, {2}
 8a4:	100e4201 	andne	r4, lr, r1, lsl #4
 8a8:	00000014 	andeq	r0, r0, r4, lsl r0
 8ac:	00000808 	andeq	r0, r0, r8, lsl #16
 8b0:	0000a034 	andeq	sl, r0, r4, lsr r0
 8b4:	00000044 	andeq	r0, r0, r4, asr #32
 8b8:	8e040e42 	cdphi	14, 0, cr0, cr4, cr2, {2}
 8bc:	100e4201 	andne	r4, lr, r1, lsl #4
 8c0:	0000000c 	andeq	r0, r0, ip
 8c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8c8:	7c020001 	stcvc	0, cr0, [r2], {1}
 8cc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 8d0:	00000014 	andeq	r0, r0, r4, lsl r0
 8d4:	000008c0 	andeq	r0, r0, r0, asr #17
 8d8:	0000a078 	andeq	sl, r0, r8, ror r0
 8dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 8e0:	8e040e42 	cdphi	14, 0, cr0, cr4, cr2, {2}
 8e4:	200e4201 	andcs	r4, lr, r1, lsl #4
 8e8:	00000014 	andeq	r0, r0, r4, lsl r0
 8ec:	000008c0 	andeq	r0, r0, r0, asr #17
 8f0:	0000a094 	muleq	r0, r4, r0
 8f4:	00000040 	andeq	r0, r0, r0, asr #32
 8f8:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 8fc:	00018e02 	andeq	r8, r1, r2, lsl #28
 900:	0000000c 	andeq	r0, r0, ip
 904:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 908:	7c020001 	stcvc	0, cr0, [r2], {1}
 90c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 910:	00000018 	andeq	r0, r0, r8, lsl r0
 914:	00000900 	andeq	r0, r0, r0, lsl #18
 918:	0000a210 	andeq	sl, r0, r0, lsl r2
 91c:	000000d4 	ldrdeq	r0, [r0], -r4
 920:	83100e42 	tsthi	r0, #1056	; 0x420
 924:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 928:	00018e02 	andeq	r8, r1, r2, lsl #28
 92c:	00000014 	andeq	r0, r0, r4, lsl r0
 930:	00000900 	andeq	r0, r0, r0, lsl #18
 934:	0000a2e4 	andeq	sl, r0, r4, ror #5
 938:	00000038 	andeq	r0, r0, r8, lsr r0
 93c:	83080e42 	movwhi	r0, #36418	; 0x8e42
 940:	00018e02 	andeq	r8, r1, r2, lsl #28
 944:	00000014 	andeq	r0, r0, r4, lsl r0
 948:	00000900 	andeq	r0, r0, r0, lsl #18
 94c:	0000a31c 	andeq	sl, r0, ip, lsl r3
 950:	00000038 	andeq	r0, r0, r8, lsr r0
 954:	83080e42 	movwhi	r0, #36418	; 0x8e42
 958:	00018e02 	andeq	r8, r1, r2, lsl #28
 95c:	00000018 	andeq	r0, r0, r8, lsl r0
 960:	00000900 	andeq	r0, r0, r0, lsl #18
 964:	0000a354 	andeq	sl, r0, r4, asr r3
 968:	000000cc 	andeq	r0, r0, ip, asr #1
 96c:	83100e42 	tsthi	r0, #1056	; 0x420
 970:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 974:	00018e02 	andeq	r8, r1, r2, lsl #28
 978:	00000014 	andeq	r0, r0, r4, lsl r0
 97c:	00000900 	andeq	r0, r0, r0, lsl #18
 980:	0000a420 	andeq	sl, r0, r0, lsr #8
 984:	0000004c 	andeq	r0, r0, ip, asr #32
 988:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 98c:	00018e02 	andeq	r8, r1, r2, lsl #28
 990:	00000014 	andeq	r0, r0, r4, lsl r0
 994:	00000900 	andeq	r0, r0, r0, lsl #18
 998:	0000a46c 	andeq	sl, r0, ip, ror #8
 99c:	00000024 	andeq	r0, r0, r4, lsr #32
 9a0:	83080e42 	movwhi	r0, #36418	; 0x8e42
 9a4:	00018e02 	andeq	r8, r1, r2, lsl #28
 9a8:	00000018 	andeq	r0, r0, r8, lsl r0
 9ac:	00000900 	andeq	r0, r0, r0, lsl #18
 9b0:	0000a490 	muleq	r0, r0, r4
 9b4:	000000d8 	ldrdeq	r0, [r0], -r8
 9b8:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 9bc:	86038504 	strhi	r8, [r3], -r4, lsl #10
 9c0:	00018e02 	andeq	r8, r1, r2, lsl #28
 9c4:	00000014 	andeq	r0, r0, r4, lsl r0
 9c8:	00000900 	andeq	r0, r0, r0, lsl #18
 9cc:	0000a568 	andeq	sl, r0, r8, ror #10
 9d0:	0000002c 	andeq	r0, r0, ip, lsr #32
 9d4:	83080e42 	movwhi	r0, #36418	; 0x8e42
 9d8:	00018e02 	andeq	r8, r1, r2, lsl #28
 9dc:	00000018 	andeq	r0, r0, r8, lsl r0
 9e0:	00000900 	andeq	r0, r0, r0, lsl #18
 9e4:	0000a594 	muleq	r0, r4, r5
 9e8:	00000084 	andeq	r0, r0, r4, lsl #1
 9ec:	83100e42 	tsthi	r0, #1056	; 0x420
 9f0:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 9f4:	00018e02 	andeq	r8, r1, r2, lsl #28
 9f8:	00000018 	andeq	r0, r0, r8, lsl r0
 9fc:	00000900 	andeq	r0, r0, r0, lsl #18
 a00:	0000a618 	andeq	sl, r0, r8, lsl r6
 a04:	00000084 	andeq	r0, r0, r4, lsl #1
 a08:	83100e42 	tsthi	r0, #1056	; 0x420
 a0c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
 a10:	00018e02 	andeq	r8, r1, r2, lsl #28
 a14:	00000014 	andeq	r0, r0, r4, lsl r0
 a18:	00000900 	andeq	r0, r0, r0, lsl #18
 a1c:	0000a69c 	muleq	r0, ip, r6
 a20:	00000084 	andeq	r0, r0, r4, lsl #1
 a24:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 a28:	00018e02 	andeq	r8, r1, r2, lsl #28
 a2c:	00000014 	andeq	r0, r0, r4, lsl r0
 a30:	00000900 	andeq	r0, r0, r0, lsl #18
 a34:	0000a720 	andeq	sl, r0, r0, lsr #14
 a38:	00000058 	andeq	r0, r0, r8, asr r0
 a3c:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
 a40:	00018e02 	andeq	r8, r1, r2, lsl #28
 a44:	0000000c 	andeq	r0, r0, ip
 a48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a4c:	7c020001 	stcvc	0, cr0, [r2], {1}
 a50:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a54:	00000014 	andeq	r0, r0, r4, lsl r0
 a58:	00000a44 	andeq	r0, r0, r4, asr #20
 a5c:	0000a778 	andeq	sl, r0, r8, ror r7
 a60:	00000028 	andeq	r0, r0, r8, lsr #32
 a64:	83080e42 	movwhi	r0, #36418	; 0x8e42
 a68:	00018e02 	andeq	r8, r1, r2, lsl #28
 a6c:	0000000c 	andeq	r0, r0, ip
 a70:	00000a44 	andeq	r0, r0, r4, asr #20
 a74:	0000a7a0 	andeq	sl, r0, r0, lsr #15
 a78:	00000028 	andeq	r0, r0, r8, lsr #32
